
SMSgateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a314  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10012314  10012314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001694  10012380  10012380  00012380  2**2
                  ALLOC
  3 .stack        00000804  10013a14  10013a14  00012380  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012380  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000123a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000245e4  00000000  00000000  0001245c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b4a  00000000  00000000  00036a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006156  00000000  00000000  0003958a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000768  00000000  00000000  0003f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007f8  00000000  00000000  0003fe48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000073d9  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000beaf  00000000  00000000  00047a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010a671  00000000  00000000  000538c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d64  00000000  00000000  0015df3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10012314 	.word	0x10012314
10008068:	10012314 	.word	0x10012314
1000806c:	10012380 	.word	0x10012380
10008070:	10013a14 	.word	0x10013a14
10008074:	10012380 	.word	0x10012380
10008078:	10012318 	.word	0x10012318
1000807c:	10012384 	.word	0x10012384
10008080:	1000f871 	.word	0x1000f871
10008084:	1000bb2d 	.word	0x1000bb2d

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012380 	.word	0x10012380
100080a8:	00000000 	.word	0x00000000
100080ac:	10012314 	.word	0x10012314

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012384 	.word	0x10012384
100080dc:	10012314 	.word	0x10012314
100080e0:	10012314 	.word	0x10012314
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
100080e8:	2800      	cmp	r0, #0
100080ea:	d107      	bne.n	100080fc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080ec:	2900      	cmp	r1, #0
100080ee:	d102      	bne.n	100080f6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
100080f0:	4b06      	ldr	r3, [pc, #24]	; (1000810c <dualtimer_set_counter+0x24>)
100080f2:	601a      	str	r2, [r3, #0]
100080f4:	e009      	b.n	1000810a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
100080f6:	4b05      	ldr	r3, [pc, #20]	; (1000810c <dualtimer_set_counter+0x24>)
100080f8:	619a      	str	r2, [r3, #24]
100080fa:	e006      	b.n	1000810a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080fc:	2900      	cmp	r1, #0
100080fe:	d102      	bne.n	10008106 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008100:	4b02      	ldr	r3, [pc, #8]	; (1000810c <dualtimer_set_counter+0x24>)
10008102:	621a      	str	r2, [r3, #32]
10008104:	e001      	b.n	1000810a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008106:	4b01      	ldr	r3, [pc, #4]	; (1000810c <dualtimer_set_counter+0x24>)
10008108:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000810a:	4770      	bx	lr
1000810c:	40001000 	.word	0x40001000

10008110 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008110:	2800      	cmp	r0, #0
10008112:	d105      	bne.n	10008120 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008114:	4a06      	ldr	r2, [pc, #24]	; (10008130 <dualtimer_enable+0x20>)
10008116:	7a11      	ldrb	r1, [r2, #8]
10008118:	2380      	movs	r3, #128	; 0x80
1000811a:	430b      	orrs	r3, r1
1000811c:	7213      	strb	r3, [r2, #8]
1000811e:	e005      	b.n	1000812c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008120:	4903      	ldr	r1, [pc, #12]	; (10008130 <dualtimer_enable+0x20>)
10008122:	2228      	movs	r2, #40	; 0x28
10008124:	5c88      	ldrb	r0, [r1, r2]
10008126:	2380      	movs	r3, #128	; 0x80
10008128:	4303      	orrs	r3, r0
1000812a:	548b      	strb	r3, [r1, r2]
	}
}
1000812c:	4770      	bx	lr
1000812e:	46c0      	nop			; (mov r8, r8)
10008130:	40001000 	.word	0x40001000

10008134 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008134:	2800      	cmp	r0, #0
10008136:	d105      	bne.n	10008144 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008138:	4a06      	ldr	r2, [pc, #24]	; (10008154 <dualtimer_disable+0x20>)
1000813a:	7a11      	ldrb	r1, [r2, #8]
1000813c:	237f      	movs	r3, #127	; 0x7f
1000813e:	400b      	ands	r3, r1
10008140:	7213      	strb	r3, [r2, #8]
10008142:	e005      	b.n	10008150 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008144:	4903      	ldr	r1, [pc, #12]	; (10008154 <dualtimer_disable+0x20>)
10008146:	2228      	movs	r2, #40	; 0x28
10008148:	5c88      	ldrb	r0, [r1, r2]
1000814a:	237f      	movs	r3, #127	; 0x7f
1000814c:	4003      	ands	r3, r0
1000814e:	548b      	strb	r3, [r1, r2]
	}
}
10008150:	4770      	bx	lr
10008152:	46c0      	nop			; (mov r8, r8)
10008154:	40001000 	.word	0x40001000

10008158 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008158:	2800      	cmp	r0, #0
1000815a:	d102      	bne.n	10008162 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000815c:	4b02      	ldr	r3, [pc, #8]	; (10008168 <dualtimer_register_callback+0x10>)
1000815e:	6019      	str	r1, [r3, #0]
10008160:	e001      	b.n	10008166 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008162:	4b02      	ldr	r3, [pc, #8]	; (1000816c <dualtimer_register_callback+0x14>)
10008164:	6019      	str	r1, [r3, #0]
	}
}
10008166:	4770      	bx	lr
10008168:	1001239c 	.word	0x1001239c
1000816c:	100123a0 	.word	0x100123a0

10008170 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008170:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10008172:	4b17      	ldr	r3, [pc, #92]	; (100081d0 <gpio_port0_isr_handler+0x60>)
10008174:	681d      	ldr	r5, [r3, #0]
10008176:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008178:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000817a:	07cb      	lsls	r3, r1, #31
1000817c:	d407      	bmi.n	1000818e <gpio_port0_isr_handler+0x1e>
1000817e:	2301      	movs	r3, #1
10008180:	2401      	movs	r4, #1
10008182:	0018      	movs	r0, r3
10008184:	0022      	movs	r2, r4
10008186:	409a      	lsls	r2, r3
10008188:	4211      	tst	r1, r2
1000818a:	d016      	beq.n	100081ba <gpio_port0_isr_handler+0x4a>
1000818c:	e001      	b.n	10008192 <gpio_port0_isr_handler+0x22>
1000818e:	2201      	movs	r2, #1
10008190:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
10008192:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
10008194:	431a      	orrs	r2, r3
10008196:	b292      	uxth	r2, r2
10008198:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000819a:	2346      	movs	r3, #70	; 0x46
1000819c:	4a0c      	ldr	r2, [pc, #48]	; (100081d0 <gpio_port0_isr_handler+0x60>)
1000819e:	5ad3      	ldrh	r3, [r2, r3]
100081a0:	4103      	asrs	r3, r0
100081a2:	07db      	lsls	r3, r3, #31
100081a4:	d50c      	bpl.n	100081c0 <gpio_port0_isr_handler+0x50>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
100081a6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
100081a8:	5ad3      	ldrh	r3, [r2, r3]
100081aa:	4103      	asrs	r3, r0
100081ac:	07db      	lsls	r3, r3, #31
100081ae:	d507      	bpl.n	100081c0 <gpio_port0_isr_handler+0x50>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
100081b0:	0080      	lsls	r0, r0, #2
100081b2:	1810      	adds	r0, r2, r0
100081b4:	6843      	ldr	r3, [r0, #4]
100081b6:	4798      	blx	r3
100081b8:	e002      	b.n	100081c0 <gpio_port0_isr_handler+0x50>
100081ba:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100081bc:	2b10      	cmp	r3, #16
100081be:	d1e0      	bne.n	10008182 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100081c0:	2180      	movs	r1, #128	; 0x80
100081c2:	0409      	lsls	r1, r1, #16
100081c4:	23c0      	movs	r3, #192	; 0xc0
100081c6:	005b      	lsls	r3, r3, #1
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <gpio_port0_isr_handler+0x64>)
100081ca:	50d1      	str	r1, [r2, r3]
			_gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
100081cc:	bd70      	pop	{r4, r5, r6, pc}
100081ce:	46c0      	nop			; (mov r8, r8)
100081d0:	100125f4 	.word	0x100125f4
100081d4:	e000e100 	.word	0xe000e100

100081d8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
100081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
100081da:	4b19      	ldr	r3, [pc, #100]	; (10008240 <gpio_port1_isr_handler+0x68>)
100081dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100081de:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
100081e0:	b2b6      	uxth	r6, r6
100081e2:	0037      	movs	r7, r6
100081e4:	2500      	movs	r5, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081e6:	0b76      	lsrs	r6, r6, #13
100081e8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100081ea:	4c15      	ldr	r4, [pc, #84]	; (10008240 <gpio_port1_isr_handler+0x68>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081ec:	2e00      	cmp	r6, #0
100081ee:	d001      	beq.n	100081f4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
100081f0:	4b14      	ldr	r3, [pc, #80]	; (10008244 <gpio_port1_isr_handler+0x6c>)
100081f2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100081f4:	002a      	movs	r2, r5
100081f6:	2301      	movs	r3, #1
100081f8:	40ab      	lsls	r3, r5
100081fa:	421f      	tst	r7, r3
100081fc:	d015      	beq.n	1000822a <gpio_port1_isr_handler+0x52>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100081fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
10008200:	8f08      	ldrh	r0, [r1, #56]	; 0x38
10008202:	4303      	orrs	r3, r0
10008204:	b29b      	uxth	r3, r3
10008206:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008208:	238e      	movs	r3, #142	; 0x8e
1000820a:	5ae3      	ldrh	r3, [r4, r3]
1000820c:	412b      	asrs	r3, r5
1000820e:	07db      	lsls	r3, r3, #31
10008210:	d50b      	bpl.n	1000822a <gpio_port1_isr_handler+0x52>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10008212:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008214:	490a      	ldr	r1, [pc, #40]	; (10008240 <gpio_port1_isr_handler+0x68>)
10008216:	5acb      	ldrh	r3, [r1, r3]
10008218:	412b      	asrs	r3, r5
1000821a:	07db      	lsls	r3, r3, #31
1000821c:	d505      	bpl.n	1000822a <gpio_port1_isr_handler+0x52>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000821e:	3212      	adds	r2, #18
10008220:	0092      	lsls	r2, r2, #2
10008222:	188a      	adds	r2, r1, r2
10008224:	6853      	ldr	r3, [r2, #4]
10008226:	4798      	blx	r3
				break;
10008228:	e002      	b.n	10008230 <gpio_port1_isr_handler+0x58>
1000822a:	3501      	adds	r5, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000822c:	2d10      	cmp	r5, #16
1000822e:	d1dd      	bne.n	100081ec <gpio_port1_isr_handler+0x14>
10008230:	2180      	movs	r1, #128	; 0x80
10008232:	0449      	lsls	r1, r1, #17
10008234:	23c0      	movs	r3, #192	; 0xc0
10008236:	005b      	lsls	r3, r3, #1
10008238:	4a03      	ldr	r2, [pc, #12]	; (10008248 <gpio_port1_isr_handler+0x70>)
1000823a:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000823e:	46c0      	nop			; (mov r8, r8)
10008240:	100125f4 	.word	0x100125f4
10008244:	0001bc51 	.word	0x0001bc51
10008248:	e000e100 	.word	0xe000e100

1000824c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000824c:	2300      	movs	r3, #0
1000824e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008250:	2201      	movs	r2, #1
10008252:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008254:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008256:	70c3      	strb	r3, [r0, #3]
}
10008258:	4770      	bx	lr
1000825a:	46c0      	nop			; (mov r8, r8)

1000825c <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000825c:	b530      	push	{r4, r5, lr}
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1) || \
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
1000825e:	2317      	movs	r3, #23

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008260:	2801      	cmp	r0, #1
10008262:	d800      	bhi.n	10008266 <gpio_pin_set_config+0xa>
10008264:	e0a2      	b.n	100083ac <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_1) || \
10008266:	280e      	cmp	r0, #14
10008268:	d100      	bne.n	1000826c <gpio_pin_set_config+0x10>
1000826a:	e09f      	b.n	100083ac <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000826c:	2807      	cmp	r0, #7
1000826e:	d809      	bhi.n	10008284 <gpio_pin_set_config+0x28>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008270:	4d4f      	ldr	r5, [pc, #316]	; (100083b0 <gpio_pin_set_config+0x154>)
10008272:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008274:	3b10      	subs	r3, #16
10008276:	4003      	ands	r3, r0
10008278:	009b      	lsls	r3, r3, #2
1000827a:	2407      	movs	r4, #7
1000827c:	409c      	lsls	r4, r3
1000827e:	43a2      	bics	r2, r4
10008280:	646a      	str	r2, [r5, #68]	; 0x44
10008282:	e016      	b.n	100082b2 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 15) {
10008284:	280f      	cmp	r0, #15
10008286:	d809      	bhi.n	1000829c <gpio_pin_set_config+0x40>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008288:	4d49      	ldr	r5, [pc, #292]	; (100083b0 <gpio_pin_set_config+0x154>)
1000828a:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000828c:	2307      	movs	r3, #7
1000828e:	4003      	ands	r3, r0
10008290:	009b      	lsls	r3, r3, #2
10008292:	2407      	movs	r4, #7
10008294:	409c      	lsls	r4, r3
10008296:	43a2      	bics	r2, r4
10008298:	64aa      	str	r2, [r5, #72]	; 0x48
1000829a:	e00a      	b.n	100082b2 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 23) {
1000829c:	2817      	cmp	r0, #23
1000829e:	d808      	bhi.n	100082b2 <gpio_pin_set_config+0x56>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100082a0:	4d43      	ldr	r5, [pc, #268]	; (100083b0 <gpio_pin_set_config+0x154>)
100082a2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100082a4:	2307      	movs	r3, #7
100082a6:	4003      	ands	r3, r0
100082a8:	009b      	lsls	r3, r3, #2
100082aa:	2407      	movs	r4, #7
100082ac:	409c      	lsls	r4, r3
100082ae:	43a2      	bics	r2, r4
100082b0:	64ea      	str	r2, [r5, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100082b2:	0003      	movs	r3, r0
100082b4:	3b1d      	subs	r3, #29
100082b6:	2b02      	cmp	r3, #2
100082b8:	d829      	bhi.n	1000830e <gpio_pin_set_config+0xb2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100082ba:	784b      	ldrb	r3, [r1, #1]
100082bc:	2b01      	cmp	r3, #1
100082be:	d108      	bne.n	100082d2 <gpio_pin_set_config+0x76>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100082c0:	4d3c      	ldr	r5, [pc, #240]	; (100083b4 <gpio_pin_set_config+0x158>)
100082c2:	7d2b      	ldrb	r3, [r5, #20]
100082c4:	241f      	movs	r4, #31
100082c6:	1a24      	subs	r4, r4, r0
100082c8:	2201      	movs	r2, #1
100082ca:	40a2      	lsls	r2, r4
100082cc:	4393      	bics	r3, r2
100082ce:	752b      	strb	r3, [r5, #20]
100082d0:	e008      	b.n	100082e4 <gpio_pin_set_config+0x88>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100082d2:	4c38      	ldr	r4, [pc, #224]	; (100083b4 <gpio_pin_set_config+0x158>)
100082d4:	7d25      	ldrb	r5, [r4, #20]
100082d6:	221f      	movs	r2, #31
100082d8:	1a12      	subs	r2, r2, r0
100082da:	2301      	movs	r3, #1
100082dc:	4093      	lsls	r3, r2
100082de:	432b      	orrs	r3, r5
100082e0:	b2db      	uxtb	r3, r3
100082e2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100082e4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100082e6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100082e8:	2a00      	cmp	r2, #0
100082ea:	d05f      	beq.n	100083ac <gpio_pin_set_config+0x150>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100082ec:	4931      	ldr	r1, [pc, #196]	; (100083b4 <gpio_pin_set_config+0x158>)
100082ee:	880c      	ldrh	r4, [r1, #0]
100082f0:	221f      	movs	r2, #31
100082f2:	1a10      	subs	r0, r2, r0
100082f4:	0080      	lsls	r0, r0, #2
100082f6:	3301      	adds	r3, #1
100082f8:	4083      	lsls	r3, r0
100082fa:	4323      	orrs	r3, r4
100082fc:	b29b      	uxth	r3, r3
100082fe:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008300:	4a2d      	ldr	r2, [pc, #180]	; (100083b8 <gpio_pin_set_config+0x15c>)
10008302:	7811      	ldrb	r1, [r2, #0]
10008304:	2302      	movs	r3, #2
10008306:	430b      	orrs	r3, r1
10008308:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000830a:	2300      	movs	r3, #0
1000830c:	e04e      	b.n	100083ac <gpio_pin_set_config+0x150>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000830e:	780a      	ldrb	r2, [r1, #0]
10008310:	2a00      	cmp	r2, #0
10008312:	d131      	bne.n	10008378 <gpio_pin_set_config+0x11c>
				if(gpio_pin < 16) {
10008314:	280f      	cmp	r0, #15
10008316:	d805      	bhi.n	10008324 <gpio_pin_set_config+0xc8>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008318:	2301      	movs	r3, #1
1000831a:	4083      	lsls	r3, r0
1000831c:	b29b      	uxth	r3, r3
1000831e:	4a27      	ldr	r2, [pc, #156]	; (100083bc <gpio_pin_set_config+0x160>)
10008320:	8293      	strh	r3, [r2, #20]
10008322:	e006      	b.n	10008332 <gpio_pin_set_config+0xd6>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008324:	220f      	movs	r2, #15
10008326:	4002      	ands	r2, r0
10008328:	2301      	movs	r3, #1
1000832a:	4093      	lsls	r3, r2
1000832c:	b29b      	uxth	r3, r3
1000832e:	4a24      	ldr	r2, [pc, #144]	; (100083c0 <gpio_pin_set_config+0x164>)
10008330:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
10008332:	784b      	ldrb	r3, [r1, #1]
10008334:	2b01      	cmp	r3, #1
10008336:	d00c      	beq.n	10008352 <gpio_pin_set_config+0xf6>
10008338:	2b00      	cmp	r3, #0
1000833a:	d002      	beq.n	10008342 <gpio_pin_set_config+0xe6>
1000833c:	2b02      	cmp	r3, #2
1000833e:	d010      	beq.n	10008362 <gpio_pin_set_config+0x106>
10008340:	e033      	b.n	100083aa <gpio_pin_set_config+0x14e>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008342:	491b      	ldr	r1, [pc, #108]	; (100083b0 <gpio_pin_set_config+0x154>)
10008344:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008346:	2301      	movs	r3, #1
10008348:	4083      	lsls	r3, r0
1000834a:	4313      	orrs	r3, r2
1000834c:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000834e:	2300      	movs	r3, #0
				}
				/* pull_enable. */
				switch(config->input_pull) {
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
10008350:	e02c      	b.n	100083ac <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008352:	4917      	ldr	r1, [pc, #92]	; (100083b0 <gpio_pin_set_config+0x154>)
10008354:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008356:	2201      	movs	r2, #1
10008358:	4082      	lsls	r2, r0
1000835a:	4393      	bics	r3, r2
1000835c:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000835e:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008360:	e024      	b.n	100083ac <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008362:	4b13      	ldr	r3, [pc, #76]	; (100083b0 <gpio_pin_set_config+0x154>)
10008364:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008366:	2201      	movs	r2, #1
10008368:	4082      	lsls	r2, r0
1000836a:	4311      	orrs	r1, r2
1000836c:	6559      	str	r1, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000836e:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008370:	4391      	bics	r1, r2
10008372:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008374:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008376:	e019      	b.n	100083ac <gpio_pin_set_config+0x150>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008378:	2300      	movs	r3, #0
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
						break;
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000837a:	2a01      	cmp	r2, #1
1000837c:	d116      	bne.n	100083ac <gpio_pin_set_config+0x150>
				if (gpio_pin < 16) {
1000837e:	280f      	cmp	r0, #15
10008380:	d808      	bhi.n	10008394 <gpio_pin_set_config+0x138>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
10008382:	4a0e      	ldr	r2, [pc, #56]	; (100083bc <gpio_pin_set_config+0x160>)
10008384:	8a11      	ldrh	r1, [r2, #16]
10008386:	3301      	adds	r3, #1
10008388:	4083      	lsls	r3, r0
1000838a:	430b      	orrs	r3, r1
1000838c:	b29b      	uxth	r3, r3
1000838e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008390:	2300      	movs	r3, #0
10008392:	e00b      	b.n	100083ac <gpio_pin_set_config+0x150>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
10008394:	4a0a      	ldr	r2, [pc, #40]	; (100083c0 <gpio_pin_set_config+0x164>)
10008396:	8a11      	ldrh	r1, [r2, #16]
10008398:	230f      	movs	r3, #15
1000839a:	4018      	ands	r0, r3
1000839c:	3b0e      	subs	r3, #14
1000839e:	4083      	lsls	r3, r0
100083a0:	430b      	orrs	r3, r1
100083a2:	b29b      	uxth	r3, r3
100083a4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083a6:	2300      	movs	r3, #0
100083a8:	e000      	b.n	100083ac <gpio_pin_set_config+0x150>
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
100083aa:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100083ac:	0018      	movs	r0, r3
100083ae:	bd30      	pop	{r4, r5, pc}
100083b0:	4000b000 	.word	0x4000b000
100083b4:	4000f000 	.word	0x4000f000
100083b8:	4000e000 	.word	0x4000e000
100083bc:	40010000 	.word	0x40010000
100083c0:	40011000 	.word	0x40011000

100083c4 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100083c4:	b510      	push	{r4, lr}
	if(gpio_pin < 16) {
100083c6:	280f      	cmp	r0, #15
100083c8:	d810      	bhi.n	100083ec <gpio_pin_set_output_level+0x28>
		if(level) {
100083ca:	2900      	cmp	r1, #0
100083cc:	d007      	beq.n	100083de <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100083ce:	4a12      	ldr	r2, [pc, #72]	; (10008418 <gpio_pin_set_output_level+0x54>)
100083d0:	8891      	ldrh	r1, [r2, #4]
100083d2:	2301      	movs	r3, #1
100083d4:	4083      	lsls	r3, r0
100083d6:	430b      	orrs	r3, r1
100083d8:	b29b      	uxth	r3, r3
100083da:	8093      	strh	r3, [r2, #4]
100083dc:	e01a      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100083de:	490e      	ldr	r1, [pc, #56]	; (10008418 <gpio_pin_set_output_level+0x54>)
100083e0:	888b      	ldrh	r3, [r1, #4]
100083e2:	2201      	movs	r2, #1
100083e4:	4082      	lsls	r2, r0
100083e6:	4393      	bics	r3, r2
100083e8:	808b      	strh	r3, [r1, #4]
100083ea:	e013      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		}
	} else {
		if(level) {
100083ec:	2900      	cmp	r1, #0
100083ee:	d009      	beq.n	10008404 <gpio_pin_set_output_level+0x40>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
100083f0:	490a      	ldr	r1, [pc, #40]	; (1000841c <gpio_pin_set_output_level+0x58>)
100083f2:	888c      	ldrh	r4, [r1, #4]
100083f4:	220f      	movs	r2, #15
100083f6:	4010      	ands	r0, r2
100083f8:	2301      	movs	r3, #1
100083fa:	4083      	lsls	r3, r0
100083fc:	4323      	orrs	r3, r4
100083fe:	b29b      	uxth	r3, r3
10008400:	808b      	strh	r3, [r1, #4]
10008402:	e007      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008404:	4905      	ldr	r1, [pc, #20]	; (1000841c <gpio_pin_set_output_level+0x58>)
10008406:	888b      	ldrh	r3, [r1, #4]
10008408:	220f      	movs	r2, #15
1000840a:	4010      	ands	r0, r2
1000840c:	3a0e      	subs	r2, #14
1000840e:	4082      	lsls	r2, r0
10008410:	4393      	bics	r3, r2
10008412:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008414:	bd10      	pop	{r4, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40010000 	.word	0x40010000
1000841c:	40011000 	.word	0x40011000

10008420 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008420:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008422:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008424:	23ff      	movs	r3, #255	; 0xff
10008426:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008428:	2807      	cmp	r0, #7
1000842a:	d833      	bhi.n	10008494 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000842c:	4a4e      	ldr	r2, [pc, #312]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000842e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008430:	3bf8      	subs	r3, #248	; 0xf8
10008432:	4003      	ands	r3, r0
10008434:	009b      	lsls	r3, r3, #2
10008436:	2607      	movs	r6, #7
10008438:	409e      	lsls	r6, r3
1000843a:	43b4      	bics	r4, r6
1000843c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000843e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008440:	000e      	movs	r6, r1
10008442:	409e      	lsls	r6, r3
10008444:	0033      	movs	r3, r6
10008446:	4323      	orrs	r3, r4
10008448:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000844a:	2901      	cmp	r1, #1
1000844c:	d000      	beq.n	10008450 <gpio_pinmux_cofiguration+0x30>
1000844e:	e08a      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008450:	2803      	cmp	r0, #3
10008452:	d80f      	bhi.n	10008474 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008454:	0011      	movs	r1, r2
10008456:	22d0      	movs	r2, #208	; 0xd0
10008458:	0052      	lsls	r2, r2, #1
1000845a:	588c      	ldr	r4, [r1, r2]
1000845c:	2303      	movs	r3, #3
1000845e:	4018      	ands	r0, r3
10008460:	00c0      	lsls	r0, r0, #3
10008462:	333c      	adds	r3, #60	; 0x3c
10008464:	4083      	lsls	r3, r0
10008466:	439c      	bics	r4, r3
10008468:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000846a:	588b      	ldr	r3, [r1, r2]
1000846c:	4085      	lsls	r5, r0
1000846e:	431d      	orrs	r5, r3
10008470:	508d      	str	r5, [r1, r2]
10008472:	e078      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008474:	493c      	ldr	r1, [pc, #240]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
10008476:	22d2      	movs	r2, #210	; 0xd2
10008478:	0052      	lsls	r2, r2, #1
1000847a:	588c      	ldr	r4, [r1, r2]
1000847c:	2303      	movs	r3, #3
1000847e:	4018      	ands	r0, r3
10008480:	00c0      	lsls	r0, r0, #3
10008482:	333c      	adds	r3, #60	; 0x3c
10008484:	4083      	lsls	r3, r0
10008486:	439c      	bics	r4, r3
10008488:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000848a:	588b      	ldr	r3, [r1, r2]
1000848c:	4085      	lsls	r5, r0
1000848e:	431d      	orrs	r5, r3
10008490:	508d      	str	r5, [r1, r2]
10008492:	e068      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008494:	280f      	cmp	r0, #15
10008496:	d832      	bhi.n	100084fe <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008498:	4a33      	ldr	r2, [pc, #204]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000849a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000849c:	2307      	movs	r3, #7
1000849e:	4003      	ands	r3, r0
100084a0:	009b      	lsls	r3, r3, #2
100084a2:	2607      	movs	r6, #7
100084a4:	409e      	lsls	r6, r3
100084a6:	43b4      	bics	r4, r6
100084a8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100084aa:	6c94      	ldr	r4, [r2, #72]	; 0x48
100084ac:	000e      	movs	r6, r1
100084ae:	409e      	lsls	r6, r3
100084b0:	0033      	movs	r3, r6
100084b2:	4323      	orrs	r3, r4
100084b4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100084b6:	2901      	cmp	r1, #1
100084b8:	d155      	bne.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100084ba:	280b      	cmp	r0, #11
100084bc:	d80f      	bhi.n	100084de <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084be:	0011      	movs	r1, r2
100084c0:	22d4      	movs	r2, #212	; 0xd4
100084c2:	0052      	lsls	r2, r2, #1
100084c4:	588c      	ldr	r4, [r1, r2]
100084c6:	2303      	movs	r3, #3
100084c8:	4018      	ands	r0, r3
100084ca:	00c0      	lsls	r0, r0, #3
100084cc:	333c      	adds	r3, #60	; 0x3c
100084ce:	4083      	lsls	r3, r0
100084d0:	439c      	bics	r4, r3
100084d2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084d4:	588b      	ldr	r3, [r1, r2]
100084d6:	4085      	lsls	r5, r0
100084d8:	431d      	orrs	r5, r3
100084da:	508d      	str	r5, [r1, r2]
100084dc:	e043      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084de:	4922      	ldr	r1, [pc, #136]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
100084e0:	22d6      	movs	r2, #214	; 0xd6
100084e2:	0052      	lsls	r2, r2, #1
100084e4:	588c      	ldr	r4, [r1, r2]
100084e6:	2303      	movs	r3, #3
100084e8:	4018      	ands	r0, r3
100084ea:	00c0      	lsls	r0, r0, #3
100084ec:	333c      	adds	r3, #60	; 0x3c
100084ee:	4083      	lsls	r3, r0
100084f0:	439c      	bics	r4, r3
100084f2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084f4:	588b      	ldr	r3, [r1, r2]
100084f6:	4085      	lsls	r5, r0
100084f8:	431d      	orrs	r5, r3
100084fa:	508d      	str	r5, [r1, r2]
100084fc:	e033      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100084fe:	2817      	cmp	r0, #23
10008500:	d831      	bhi.n	10008566 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008502:	4a19      	ldr	r2, [pc, #100]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
10008504:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008506:	2307      	movs	r3, #7
10008508:	4003      	ands	r3, r0
1000850a:	009b      	lsls	r3, r3, #2
1000850c:	2607      	movs	r6, #7
1000850e:	409e      	lsls	r6, r3
10008510:	43b4      	bics	r4, r6
10008512:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008514:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008516:	000e      	movs	r6, r1
10008518:	409e      	lsls	r6, r3
1000851a:	0033      	movs	r3, r6
1000851c:	4323      	orrs	r3, r4
1000851e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008520:	2901      	cmp	r1, #1
10008522:	d120      	bne.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008524:	2813      	cmp	r0, #19
10008526:	d80f      	bhi.n	10008548 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008528:	0011      	movs	r1, r2
1000852a:	22d8      	movs	r2, #216	; 0xd8
1000852c:	0052      	lsls	r2, r2, #1
1000852e:	588c      	ldr	r4, [r1, r2]
10008530:	2303      	movs	r3, #3
10008532:	4018      	ands	r0, r3
10008534:	00c0      	lsls	r0, r0, #3
10008536:	333c      	adds	r3, #60	; 0x3c
10008538:	4083      	lsls	r3, r0
1000853a:	439c      	bics	r4, r3
1000853c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000853e:	588b      	ldr	r3, [r1, r2]
10008540:	4085      	lsls	r5, r0
10008542:	431d      	orrs	r5, r3
10008544:	508d      	str	r5, [r1, r2]
10008546:	e00e      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008548:	4a07      	ldr	r2, [pc, #28]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000854a:	23da      	movs	r3, #218	; 0xda
1000854c:	005b      	lsls	r3, r3, #1
1000854e:	58d1      	ldr	r1, [r2, r3]
10008550:	2403      	movs	r4, #3
10008552:	4020      	ands	r0, r4
10008554:	00c0      	lsls	r0, r0, #3
10008556:	343c      	adds	r4, #60	; 0x3c
10008558:	4084      	lsls	r4, r0
1000855a:	43a1      	bics	r1, r4
1000855c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000855e:	58d1      	ldr	r1, [r2, r3]
10008560:	4085      	lsls	r5, r0
10008562:	430d      	orrs	r5, r1
10008564:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008566:	bd70      	pop	{r4, r5, r6, pc}
10008568:	4000b000 	.word	0x4000b000

1000856c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000856c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(callback_func);
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000856e:	230f      	movs	r3, #15
10008570:	4283      	cmp	r3, r0
10008572:	419b      	sbcs	r3, r3
10008574:	425b      	negs	r3, r3
		gpio_port = 0;
	} else {
		gpio_port = 1;
	}
	switch (callback_type) {
10008576:	2a01      	cmp	r2, #1
10008578:	d01e      	beq.n	100085b8 <gpio_register_callback+0x4c>
1000857a:	2a00      	cmp	r2, #0
1000857c:	d004      	beq.n	10008588 <gpio_register_callback+0x1c>
1000857e:	2a02      	cmp	r2, #2
10008580:	d032      	beq.n	100085e8 <gpio_register_callback+0x7c>
10008582:	2a03      	cmp	r2, #3
10008584:	d048      	beq.n	10008618 <gpio_register_callback+0xac>
10008586:	e05e      	b.n	10008646 <gpio_register_callback+0xda>
		case GPIO_CALLBACK_LOW:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
10008588:	4e39      	ldr	r6, [pc, #228]	; (10008670 <gpio_register_callback+0x104>)
1000858a:	00dc      	lsls	r4, r3, #3
1000858c:	18e2      	adds	r2, r4, r3
1000858e:	00d2      	lsls	r2, r2, #3
10008590:	5992      	ldr	r2, [r2, r6]
10008592:	4694      	mov	ip, r2
10008594:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
10008596:	270f      	movs	r7, #15
10008598:	4007      	ands	r7, r0
1000859a:	2201      	movs	r2, #1
1000859c:	40ba      	lsls	r2, r7
1000859e:	b212      	sxth	r2, r2
100085a0:	4315      	orrs	r5, r2
100085a2:	b2ad      	uxth	r5, r5
100085a4:	4667      	mov	r7, ip
100085a6:	85bd      	strh	r5, [r7, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= 1 << (gpio_pin % 16);
100085a8:	18e4      	adds	r4, r4, r3
100085aa:	00e4      	lsls	r4, r4, #3
100085ac:	59a4      	ldr	r4, [r4, r6]
100085ae:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
100085b0:	432a      	orrs	r2, r5
100085b2:	b292      	uxth	r2, r2
100085b4:	86a2      	strh	r2, [r4, #52]	; 0x34
			break;
100085b6:	e046      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_HIGH:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
100085b8:	4e2d      	ldr	r6, [pc, #180]	; (10008670 <gpio_register_callback+0x104>)
100085ba:	00dc      	lsls	r4, r3, #3
100085bc:	18e2      	adds	r2, r4, r3
100085be:	00d2      	lsls	r2, r2, #3
100085c0:	5992      	ldr	r2, [r2, r6]
100085c2:	4694      	mov	ip, r2
100085c4:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
100085c6:	270f      	movs	r7, #15
100085c8:	4007      	ands	r7, r0
100085ca:	2201      	movs	r2, #1
100085cc:	40ba      	lsls	r2, r7
100085ce:	b212      	sxth	r2, r2
100085d0:	4315      	orrs	r5, r2
100085d2:	b2ad      	uxth	r5, r5
100085d4:	4667      	mov	r7, ip
100085d6:	85bd      	strh	r5, [r7, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
100085d8:	18e4      	adds	r4, r4, r3
100085da:	00e4      	lsls	r4, r4, #3
100085dc:	59a4      	ldr	r4, [r4, r6]
100085de:	8e25      	ldrh	r5, [r4, #48]	; 0x30
100085e0:	432a      	orrs	r2, r5
100085e2:	b292      	uxth	r2, r2
100085e4:	8622      	strh	r2, [r4, #48]	; 0x30
			break;
100085e6:	e02e      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_RISING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
100085e8:	4e21      	ldr	r6, [pc, #132]	; (10008670 <gpio_register_callback+0x104>)
100085ea:	00dc      	lsls	r4, r3, #3
100085ec:	18e2      	adds	r2, r4, r3
100085ee:	00d2      	lsls	r2, r2, #3
100085f0:	5992      	ldr	r2, [r2, r6]
100085f2:	4694      	mov	ip, r2
100085f4:	8d15      	ldrh	r5, [r2, #40]	; 0x28
100085f6:	270f      	movs	r7, #15
100085f8:	4007      	ands	r7, r0
100085fa:	2201      	movs	r2, #1
100085fc:	40ba      	lsls	r2, r7
100085fe:	b212      	sxth	r2, r2
10008600:	4315      	orrs	r5, r2
10008602:	b2ad      	uxth	r5, r5
10008604:	4667      	mov	r7, ip
10008606:	853d      	strh	r5, [r7, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
10008608:	18e4      	adds	r4, r4, r3
1000860a:	00e4      	lsls	r4, r4, #3
1000860c:	59a4      	ldr	r4, [r4, r6]
1000860e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
10008610:	432a      	orrs	r2, r5
10008612:	b292      	uxth	r2, r2
10008614:	8622      	strh	r2, [r4, #48]	; 0x30
			break;
10008616:	e016      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_FALLING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
10008618:	4e15      	ldr	r6, [pc, #84]	; (10008670 <gpio_register_callback+0x104>)
1000861a:	00dc      	lsls	r4, r3, #3
1000861c:	18e2      	adds	r2, r4, r3
1000861e:	00d2      	lsls	r2, r2, #3
10008620:	5992      	ldr	r2, [r2, r6]
10008622:	4694      	mov	ip, r2
10008624:	8d15      	ldrh	r5, [r2, #40]	; 0x28
10008626:	270f      	movs	r7, #15
10008628:	4007      	ands	r7, r0
1000862a:	2201      	movs	r2, #1
1000862c:	40ba      	lsls	r2, r7
1000862e:	b212      	sxth	r2, r2
10008630:	4315      	orrs	r5, r2
10008632:	b2ad      	uxth	r5, r5
10008634:	4667      	mov	r7, ip
10008636:	853d      	strh	r5, [r7, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= (1 << (gpio_pin % 16));
10008638:	18e4      	adds	r4, r4, r3
1000863a:	00e4      	lsls	r4, r4, #3
1000863c:	59a4      	ldr	r4, [r4, r6]
1000863e:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
10008640:	432a      	orrs	r2, r5
10008642:	b292      	uxth	r2, r2
10008644:	86a2      	strh	r2, [r4, #52]	; 0x34

		case GPIO_CALLBACK_N:
			break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
10008646:	220f      	movs	r2, #15
10008648:	4010      	ands	r0, r2
1000864a:	4c09      	ldr	r4, [pc, #36]	; (10008670 <gpio_register_callback+0x104>)
1000864c:	00dd      	lsls	r5, r3, #3
1000864e:	18ea      	adds	r2, r5, r3
10008650:	0052      	lsls	r2, r2, #1
10008652:	1812      	adds	r2, r2, r0
10008654:	0092      	lsls	r2, r2, #2
10008656:	18a2      	adds	r2, r4, r2
10008658:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000865a:	18ea      	adds	r2, r5, r3
1000865c:	00d2      	lsls	r2, r2, #3
1000865e:	18a2      	adds	r2, r4, r2
10008660:	3244      	adds	r2, #68	; 0x44
10008662:	2101      	movs	r1, #1
10008664:	4081      	lsls	r1, r0
10008666:	8813      	ldrh	r3, [r2, #0]
10008668:	430b      	orrs	r3, r1
1000866a:	8013      	strh	r3, [r2, #0]
}
1000866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000866e:	46c0      	nop			; (mov r8, r8)
10008670:	100125f4 	.word	0x100125f4

10008674 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
10008674:	b530      	push	{r4, r5, lr}
	} else {
		gpio_port = 1;
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10008676:	230f      	movs	r3, #15
10008678:	4283      	cmp	r3, r0
1000867a:	419b      	sbcs	r3, r3
1000867c:	425b      	negs	r3, r3
1000867e:	220f      	movs	r2, #15
10008680:	4010      	ands	r0, r2
10008682:	3a0e      	subs	r2, #14
10008684:	4082      	lsls	r2, r0
10008686:	b212      	sxth	r2, r2
10008688:	4c08      	ldr	r4, [pc, #32]	; (100086ac <gpio_enable_callback+0x38>)
1000868a:	00dd      	lsls	r5, r3, #3
1000868c:	18e9      	adds	r1, r5, r3
1000868e:	00c9      	lsls	r1, r1, #3
10008690:	1861      	adds	r1, r4, r1
10008692:	3146      	adds	r1, #70	; 0x46
10008694:	8808      	ldrh	r0, [r1, #0]
10008696:	4310      	orrs	r0, r2
10008698:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg |= (1 << (gpio_pin % 16));
1000869a:	18eb      	adds	r3, r5, r3
1000869c:	00db      	lsls	r3, r3, #3
1000869e:	591b      	ldr	r3, [r3, r4]
100086a0:	8c19      	ldrh	r1, [r3, #32]
100086a2:	430a      	orrs	r2, r1
100086a4:	b292      	uxth	r2, r2
100086a6:	841a      	strh	r2, [r3, #32]
}
100086a8:	bd30      	pop	{r4, r5, pc}
100086aa:	46c0      	nop			; (mov r8, r8)
100086ac:	100125f4 	.word	0x100125f4

100086b0 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
100086b0:	b510      	push	{r4, lr}
100086b2:	4b13      	ldr	r3, [pc, #76]	; (10008700 <gpio_init+0x50>)
100086b4:	0019      	movs	r1, r3
100086b6:	3140      	adds	r1, #64	; 0x40
100086b8:	001a      	movs	r2, r3
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100086ba:	2000      	movs	r0, #0
100086bc:	6050      	str	r0, [r2, #4]
100086be:	3204      	adds	r2, #4
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
100086c0:	428a      	cmp	r2, r1
100086c2:	d1fb      	bne.n	100086bc <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100086c4:	4a0e      	ldr	r2, [pc, #56]	; (10008700 <gpio_init+0x50>)
100086c6:	2000      	movs	r0, #0
100086c8:	2446      	movs	r4, #70	; 0x46
100086ca:	5310      	strh	r0, [r2, r4]
		_gpio_instances[i].callback_reg_mask = 0;
100086cc:	3c02      	subs	r4, #2
100086ce:	5310      	strh	r0, [r2, r4]
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100086d0:	2200      	movs	r2, #0
100086d2:	64da      	str	r2, [r3, #76]	; 0x4c
100086d4:	3304      	adds	r3, #4
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
100086d6:	428b      	cmp	r3, r1
100086d8:	d1fb      	bne.n	100086d2 <gpio_init+0x22>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100086da:	4b09      	ldr	r3, [pc, #36]	; (10008700 <gpio_init+0x50>)
100086dc:	2200      	movs	r2, #0
100086de:	218e      	movs	r1, #142	; 0x8e
100086e0:	525a      	strh	r2, [r3, r1]
		_gpio_instances[i].callback_reg_mask = 0;
100086e2:	3902      	subs	r1, #2
100086e4:	525a      	strh	r2, [r3, r1]
	}
	_gpio_instances[0].hw = (void *)GPIO0;
100086e6:	4a07      	ldr	r2, [pc, #28]	; (10008704 <gpio_init+0x54>)
100086e8:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
100086ea:	4a07      	ldr	r2, [pc, #28]	; (10008708 <gpio_init+0x58>)
100086ec:	649a      	str	r2, [r3, #72]	; 0x48
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
100086ee:	4907      	ldr	r1, [pc, #28]	; (1000870c <gpio_init+0x5c>)
100086f0:	2027      	movs	r0, #39	; 0x27
100086f2:	4c07      	ldr	r4, [pc, #28]	; (10008710 <gpio_init+0x60>)
100086f4:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
100086f6:	4907      	ldr	r1, [pc, #28]	; (10008714 <gpio_init+0x64>)
100086f8:	2028      	movs	r0, #40	; 0x28
100086fa:	47a0      	blx	r4
}
100086fc:	bd10      	pop	{r4, pc}
100086fe:	46c0      	nop			; (mov r8, r8)
10008700:	100125f4 	.word	0x100125f4
10008704:	40010000 	.word	0x40010000
10008708:	40011000 	.word	0x40011000
1000870c:	10008171 	.word	0x10008171
10008710:	10008f6d 	.word	0x10008f6d
10008714:	100081d9 	.word	0x100081d9

10008718 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008718:	2801      	cmp	r0, #1
1000871a:	d00d      	beq.n	10008738 <system_clock_config+0x20>
1000871c:	2800      	cmp	r0, #0
1000871e:	d002      	beq.n	10008726 <system_clock_config+0xe>
10008720:	2802      	cmp	r0, #2
10008722:	d01c      	beq.n	1000875e <system_clock_config+0x46>
10008724:	e02e      	b.n	10008784 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008726:	4a18      	ldr	r2, [pc, #96]	; (10008788 <system_clock_config+0x70>)
10008728:	6990      	ldr	r0, [r2, #24]
1000872a:	230c      	movs	r3, #12
1000872c:	4303      	orrs	r3, r0
1000872e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008730:	4a16      	ldr	r2, [pc, #88]	; (1000878c <system_clock_config+0x74>)
10008732:	4b17      	ldr	r3, [pc, #92]	; (10008790 <system_clock_config+0x78>)
10008734:	601a      	str	r2, [r3, #0]
			break;
10008736:	e01a      	b.n	1000876e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008738:	4b13      	ldr	r3, [pc, #76]	; (10008788 <system_clock_config+0x70>)
1000873a:	6998      	ldr	r0, [r3, #24]
1000873c:	2208      	movs	r2, #8
1000873e:	4302      	orrs	r2, r0
10008740:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008742:	699a      	ldr	r2, [r3, #24]
10008744:	2004      	movs	r0, #4
10008746:	4382      	bics	r2, r0
10008748:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000874a:	4a12      	ldr	r2, [pc, #72]	; (10008794 <system_clock_config+0x7c>)
1000874c:	6853      	ldr	r3, [r2, #4]
1000874e:	2080      	movs	r0, #128	; 0x80
10008750:	0300      	lsls	r0, r0, #12
10008752:	4303      	orrs	r3, r0
10008754:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008756:	4a10      	ldr	r2, [pc, #64]	; (10008798 <system_clock_config+0x80>)
10008758:	4b0d      	ldr	r3, [pc, #52]	; (10008790 <system_clock_config+0x78>)
1000875a:	601a      	str	r2, [r3, #0]
			break;
1000875c:	e007      	b.n	1000876e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000875e:	4a0a      	ldr	r2, [pc, #40]	; (10008788 <system_clock_config+0x70>)
10008760:	6993      	ldr	r3, [r2, #24]
10008762:	200c      	movs	r0, #12
10008764:	4383      	bics	r3, r0
10008766:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008768:	4a08      	ldr	r2, [pc, #32]	; (1000878c <system_clock_config+0x74>)
1000876a:	4b09      	ldr	r3, [pc, #36]	; (10008790 <system_clock_config+0x78>)
1000876c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000876e:	4b06      	ldr	r3, [pc, #24]	; (10008788 <system_clock_config+0x70>)
10008770:	699a      	ldr	r2, [r3, #24]
10008772:	2003      	movs	r0, #3
10008774:	4382      	bics	r2, r0
10008776:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008778:	699a      	ldr	r2, [r3, #24]
1000877a:	4001      	ands	r1, r0
1000877c:	4311      	orrs	r1, r2
1000877e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008780:	2000      	movs	r0, #0
10008782:	e000      	b.n	10008786 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008784:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008786:	4770      	bx	lr
10008788:	4000b000 	.word	0x4000b000
1000878c:	018cba80 	.word	0x018cba80
10008790:	10012684 	.word	0x10012684
10008794:	4000f000 	.word	0x4000f000
10008798:	001e8480 	.word	0x001e8480

1000879c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000879c:	4b01      	ldr	r3, [pc, #4]	; (100087a4 <system_clock_get_value+0x8>)
1000879e:	6818      	ldr	r0, [r3, #0]
}
100087a0:	4770      	bx	lr
100087a2:	46c0      	nop			; (mov r8, r8)
100087a4:	10012684 	.word	0x10012684

100087a8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100087a8:	b500      	push	{lr}
	switch (peripheral) {
100087aa:	2835      	cmp	r0, #53	; 0x35
100087ac:	d900      	bls.n	100087b0 <system_clock_peripheral_enable+0x8>
100087ae:	e1a2      	b.n	10008af6 <system_clock_peripheral_enable+0x34e>
100087b0:	0080      	lsls	r0, r0, #2
100087b2:	4bd2      	ldr	r3, [pc, #840]	; (10008afc <system_clock_peripheral_enable+0x354>)
100087b4:	581b      	ldr	r3, [r3, r0]
100087b6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087b8:	4ad1      	ldr	r2, [pc, #836]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087ba:	68d1      	ldr	r1, [r2, #12]
100087bc:	2302      	movs	r3, #2
100087be:	430b      	orrs	r3, r1
100087c0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087c2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
100087c4:	e198      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087c6:	4ace      	ldr	r2, [pc, #824]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087c8:	68d1      	ldr	r1, [r2, #12]
100087ca:	2304      	movs	r3, #4
100087cc:	430b      	orrs	r3, r1
100087ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
100087d2:	e191      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087d4:	4aca      	ldr	r2, [pc, #808]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087d6:	68d1      	ldr	r1, [r2, #12]
100087d8:	2308      	movs	r3, #8
100087da:	430b      	orrs	r3, r1
100087dc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
100087e0:	e18a      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087e2:	4ac7      	ldr	r2, [pc, #796]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087e4:	68d1      	ldr	r1, [r2, #12]
100087e6:	2310      	movs	r3, #16
100087e8:	430b      	orrs	r3, r1
100087ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
100087ee:	e183      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087f0:	4ac3      	ldr	r2, [pc, #780]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087f2:	68d1      	ldr	r1, [r2, #12]
100087f4:	2320      	movs	r3, #32
100087f6:	430b      	orrs	r3, r1
100087f8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
100087fc:	e17c      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087fe:	4ac0      	ldr	r2, [pc, #768]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008800:	68d1      	ldr	r1, [r2, #12]
10008802:	2380      	movs	r3, #128	; 0x80
10008804:	430b      	orrs	r3, r1
10008806:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000880a:	e175      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000880c:	4abc      	ldr	r2, [pc, #752]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000880e:	68d3      	ldr	r3, [r2, #12]
10008810:	2180      	movs	r1, #128	; 0x80
10008812:	0049      	lsls	r1, r1, #1
10008814:	430b      	orrs	r3, r1
10008816:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000881a:	e16d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000881c:	4ab8      	ldr	r2, [pc, #736]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000881e:	68d3      	ldr	r3, [r2, #12]
10008820:	2180      	movs	r1, #128	; 0x80
10008822:	0109      	lsls	r1, r1, #4
10008824:	430b      	orrs	r3, r1
10008826:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000882a:	e165      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000882c:	4ab4      	ldr	r2, [pc, #720]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000882e:	68d3      	ldr	r3, [r2, #12]
10008830:	2180      	movs	r1, #128	; 0x80
10008832:	0149      	lsls	r1, r1, #5
10008834:	430b      	orrs	r3, r1
10008836:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000883a:	e15d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000883c:	4ab0      	ldr	r2, [pc, #704]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000883e:	68d3      	ldr	r3, [r2, #12]
10008840:	2180      	movs	r1, #128	; 0x80
10008842:	0189      	lsls	r1, r1, #6
10008844:	430b      	orrs	r3, r1
10008846:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000884a:	e155      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000884c:	4aac      	ldr	r2, [pc, #688]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000884e:	68d3      	ldr	r3, [r2, #12]
10008850:	2180      	movs	r1, #128	; 0x80
10008852:	01c9      	lsls	r1, r1, #7
10008854:	430b      	orrs	r3, r1
10008856:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000885a:	e14d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000885c:	4aa8      	ldr	r2, [pc, #672]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000885e:	68d3      	ldr	r3, [r2, #12]
10008860:	2180      	movs	r1, #128	; 0x80
10008862:	0209      	lsls	r1, r1, #8
10008864:	430b      	orrs	r3, r1
10008866:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000886a:	e145      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000886c:	4aa4      	ldr	r2, [pc, #656]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000886e:	68d3      	ldr	r3, [r2, #12]
10008870:	2180      	movs	r1, #128	; 0x80
10008872:	0249      	lsls	r1, r1, #9
10008874:	430b      	orrs	r3, r1
10008876:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008878:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000887a:	e13d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000887c:	4aa0      	ldr	r2, [pc, #640]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000887e:	68d3      	ldr	r3, [r2, #12]
10008880:	2180      	movs	r1, #128	; 0x80
10008882:	0289      	lsls	r1, r1, #10
10008884:	430b      	orrs	r3, r1
10008886:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008888:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000888a:	e135      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000888c:	4a9c      	ldr	r2, [pc, #624]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000888e:	68d3      	ldr	r3, [r2, #12]
10008890:	2180      	movs	r1, #128	; 0x80
10008892:	02c9      	lsls	r1, r1, #11
10008894:	430b      	orrs	r3, r1
10008896:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000889a:	e12d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000889c:	4a98      	ldr	r2, [pc, #608]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000889e:	68d3      	ldr	r3, [r2, #12]
100088a0:	2180      	movs	r1, #128	; 0x80
100088a2:	0309      	lsls	r1, r1, #12
100088a4:	430b      	orrs	r3, r1
100088a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100088aa:	e125      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088ac:	4a94      	ldr	r2, [pc, #592]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088ae:	68d3      	ldr	r3, [r2, #12]
100088b0:	2180      	movs	r1, #128	; 0x80
100088b2:	0349      	lsls	r1, r1, #13
100088b4:	430b      	orrs	r3, r1
100088b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100088ba:	e11d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088bc:	4a90      	ldr	r2, [pc, #576]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088be:	68d3      	ldr	r3, [r2, #12]
100088c0:	2180      	movs	r1, #128	; 0x80
100088c2:	0389      	lsls	r1, r1, #14
100088c4:	430b      	orrs	r3, r1
100088c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100088ca:	e115      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088cc:	4a8c      	ldr	r2, [pc, #560]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088ce:	68d3      	ldr	r3, [r2, #12]
100088d0:	2180      	movs	r1, #128	; 0x80
100088d2:	03c9      	lsls	r1, r1, #15
100088d4:	430b      	orrs	r3, r1
100088d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100088da:	e10d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088dc:	4a88      	ldr	r2, [pc, #544]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088de:	68d3      	ldr	r3, [r2, #12]
100088e0:	2180      	movs	r1, #128	; 0x80
100088e2:	0409      	lsls	r1, r1, #16
100088e4:	430b      	orrs	r3, r1
100088e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100088ea:	e105      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088ec:	4a84      	ldr	r2, [pc, #528]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088ee:	68d3      	ldr	r3, [r2, #12]
100088f0:	2180      	movs	r1, #128	; 0x80
100088f2:	0449      	lsls	r1, r1, #17
100088f4:	430b      	orrs	r3, r1
100088f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100088fa:	e0fd      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088fc:	4a80      	ldr	r2, [pc, #512]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088fe:	68d3      	ldr	r3, [r2, #12]
10008900:	2180      	movs	r1, #128	; 0x80
10008902:	0489      	lsls	r1, r1, #18
10008904:	430b      	orrs	r3, r1
10008906:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008908:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000890a:	e0f5      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000890c:	4a7c      	ldr	r2, [pc, #496]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000890e:	68d3      	ldr	r3, [r2, #12]
10008910:	2180      	movs	r1, #128	; 0x80
10008912:	04c9      	lsls	r1, r1, #19
10008914:	430b      	orrs	r3, r1
10008916:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008918:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000891a:	e0ed      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000891c:	4a78      	ldr	r2, [pc, #480]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000891e:	68d3      	ldr	r3, [r2, #12]
10008920:	2180      	movs	r1, #128	; 0x80
10008922:	0509      	lsls	r1, r1, #20
10008924:	430b      	orrs	r3, r1
10008926:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008928:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000892a:	e0e5      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000892c:	4a74      	ldr	r2, [pc, #464]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000892e:	68d3      	ldr	r3, [r2, #12]
10008930:	2180      	movs	r1, #128	; 0x80
10008932:	0549      	lsls	r1, r1, #21
10008934:	430b      	orrs	r3, r1
10008936:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000893a:	e0dd      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000893c:	4a70      	ldr	r2, [pc, #448]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000893e:	68d3      	ldr	r3, [r2, #12]
10008940:	2180      	movs	r1, #128	; 0x80
10008942:	0589      	lsls	r1, r1, #22
10008944:	430b      	orrs	r3, r1
10008946:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008948:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000894a:	e0d5      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000894c:	4a6c      	ldr	r2, [pc, #432]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000894e:	68d3      	ldr	r3, [r2, #12]
10008950:	2180      	movs	r1, #128	; 0x80
10008952:	05c9      	lsls	r1, r1, #23
10008954:	430b      	orrs	r3, r1
10008956:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000895a:	e0cd      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000895c:	4a68      	ldr	r2, [pc, #416]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000895e:	6911      	ldr	r1, [r2, #16]
10008960:	2301      	movs	r3, #1
10008962:	430b      	orrs	r3, r1
10008964:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008966:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008968:	e0c6      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000896a:	4a65      	ldr	r2, [pc, #404]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000896c:	6911      	ldr	r1, [r2, #16]
1000896e:	2302      	movs	r3, #2
10008970:	430b      	orrs	r3, r1
10008972:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008974:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008976:	e0bf      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008978:	4a61      	ldr	r2, [pc, #388]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000897a:	6911      	ldr	r1, [r2, #16]
1000897c:	2304      	movs	r3, #4
1000897e:	430b      	orrs	r3, r1
10008980:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008982:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008984:	e0b8      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008986:	4a5e      	ldr	r2, [pc, #376]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008988:	6911      	ldr	r1, [r2, #16]
1000898a:	2308      	movs	r3, #8
1000898c:	430b      	orrs	r3, r1
1000898e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008990:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008992:	e0b1      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008994:	4a5a      	ldr	r2, [pc, #360]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008996:	6911      	ldr	r1, [r2, #16]
10008998:	2310      	movs	r3, #16
1000899a:	430b      	orrs	r3, r1
1000899c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000899e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
100089a0:	e0aa      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089a2:	4a57      	ldr	r2, [pc, #348]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089a4:	6911      	ldr	r1, [r2, #16]
100089a6:	2320      	movs	r3, #32
100089a8:	430b      	orrs	r3, r1
100089aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
100089ae:	e0a3      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089b0:	4a53      	ldr	r2, [pc, #332]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089b2:	6911      	ldr	r1, [r2, #16]
100089b4:	2340      	movs	r3, #64	; 0x40
100089b6:	430b      	orrs	r3, r1
100089b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
100089bc:	e09c      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089be:	4a50      	ldr	r2, [pc, #320]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089c0:	6911      	ldr	r1, [r2, #16]
100089c2:	2380      	movs	r3, #128	; 0x80
100089c4:	430b      	orrs	r3, r1
100089c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
100089ca:	e095      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089cc:	4a4c      	ldr	r2, [pc, #304]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089ce:	6913      	ldr	r3, [r2, #16]
100089d0:	2180      	movs	r1, #128	; 0x80
100089d2:	0049      	lsls	r1, r1, #1
100089d4:	430b      	orrs	r3, r1
100089d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
100089da:	e08d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089dc:	4a48      	ldr	r2, [pc, #288]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089de:	6913      	ldr	r3, [r2, #16]
100089e0:	2180      	movs	r1, #128	; 0x80
100089e2:	0089      	lsls	r1, r1, #2
100089e4:	430b      	orrs	r3, r1
100089e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
100089ea:	e085      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089ec:	4a44      	ldr	r2, [pc, #272]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089ee:	6913      	ldr	r3, [r2, #16]
100089f0:	2180      	movs	r1, #128	; 0x80
100089f2:	00c9      	lsls	r1, r1, #3
100089f4:	430b      	orrs	r3, r1
100089f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
100089fa:	e07d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089fc:	4a40      	ldr	r2, [pc, #256]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089fe:	6913      	ldr	r3, [r2, #16]
10008a00:	2180      	movs	r1, #128	; 0x80
10008a02:	0109      	lsls	r1, r1, #4
10008a04:	430b      	orrs	r3, r1
10008a06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008a0a:	e075      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a0c:	4a3c      	ldr	r2, [pc, #240]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a0e:	6913      	ldr	r3, [r2, #16]
10008a10:	2180      	movs	r1, #128	; 0x80
10008a12:	0149      	lsls	r1, r1, #5
10008a14:	430b      	orrs	r3, r1
10008a16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008a1a:	e06d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a1c:	4a38      	ldr	r2, [pc, #224]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a1e:	6913      	ldr	r3, [r2, #16]
10008a20:	2180      	movs	r1, #128	; 0x80
10008a22:	0189      	lsls	r1, r1, #6
10008a24:	430b      	orrs	r3, r1
10008a26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008a2a:	e065      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a2c:	4a34      	ldr	r2, [pc, #208]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a2e:	6913      	ldr	r3, [r2, #16]
10008a30:	2180      	movs	r1, #128	; 0x80
10008a32:	01c9      	lsls	r1, r1, #7
10008a34:	430b      	orrs	r3, r1
10008a36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008a3a:	e05d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a3c:	4a30      	ldr	r2, [pc, #192]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a3e:	6913      	ldr	r3, [r2, #16]
10008a40:	2180      	movs	r1, #128	; 0x80
10008a42:	0209      	lsls	r1, r1, #8
10008a44:	430b      	orrs	r3, r1
10008a46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008a4a:	e055      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a4c:	4a2c      	ldr	r2, [pc, #176]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a4e:	6913      	ldr	r3, [r2, #16]
10008a50:	2180      	movs	r1, #128	; 0x80
10008a52:	0249      	lsls	r1, r1, #9
10008a54:	430b      	orrs	r3, r1
10008a56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008a5a:	e04d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a5c:	4a28      	ldr	r2, [pc, #160]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a5e:	6913      	ldr	r3, [r2, #16]
10008a60:	2180      	movs	r1, #128	; 0x80
10008a62:	0289      	lsls	r1, r1, #10
10008a64:	430b      	orrs	r3, r1
10008a66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008a6a:	e045      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a6c:	4a24      	ldr	r2, [pc, #144]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a6e:	6913      	ldr	r3, [r2, #16]
10008a70:	2180      	movs	r1, #128	; 0x80
10008a72:	02c9      	lsls	r1, r1, #11
10008a74:	430b      	orrs	r3, r1
10008a76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008a7a:	e03d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a7c:	4a20      	ldr	r2, [pc, #128]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a7e:	6913      	ldr	r3, [r2, #16]
10008a80:	2180      	movs	r1, #128	; 0x80
10008a82:	0309      	lsls	r1, r1, #12
10008a84:	430b      	orrs	r3, r1
10008a86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008a8a:	e035      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a8c:	4a1c      	ldr	r2, [pc, #112]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a8e:	6913      	ldr	r3, [r2, #16]
10008a90:	2180      	movs	r1, #128	; 0x80
10008a92:	0349      	lsls	r1, r1, #13
10008a94:	430b      	orrs	r3, r1
10008a96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008a9a:	e02d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a9c:	4a18      	ldr	r2, [pc, #96]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a9e:	6913      	ldr	r3, [r2, #16]
10008aa0:	2180      	movs	r1, #128	; 0x80
10008aa2:	0389      	lsls	r1, r1, #14
10008aa4:	430b      	orrs	r3, r1
10008aa6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008aaa:	e025      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aac:	4a14      	ldr	r2, [pc, #80]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008aae:	6913      	ldr	r3, [r2, #16]
10008ab0:	2180      	movs	r1, #128	; 0x80
10008ab2:	03c9      	lsls	r1, r1, #15
10008ab4:	430b      	orrs	r3, r1
10008ab6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ab8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008aba:	e01d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008abc:	4a10      	ldr	r2, [pc, #64]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008abe:	6913      	ldr	r3, [r2, #16]
10008ac0:	2180      	movs	r1, #128	; 0x80
10008ac2:	0409      	lsls	r1, r1, #16
10008ac4:	430b      	orrs	r3, r1
10008ac6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ac8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008aca:	e015      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008acc:	4a0c      	ldr	r2, [pc, #48]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008ace:	7d11      	ldrb	r1, [r2, #20]
10008ad0:	2301      	movs	r3, #1
10008ad2:	430b      	orrs	r3, r1
10008ad4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ad6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008ad8:	e00e      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008ada:	4a09      	ldr	r2, [pc, #36]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008adc:	7d11      	ldrb	r1, [r2, #20]
10008ade:	2302      	movs	r3, #2
10008ae0:	430b      	orrs	r3, r1
10008ae2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008ae6:	e007      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008ae8:	4a05      	ldr	r2, [pc, #20]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008aea:	7d11      	ldrb	r1, [r2, #20]
10008aec:	2304      	movs	r3, #4
10008aee:	430b      	orrs	r3, r1
10008af0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008af4:	e000      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008af6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008af8:	bd00      	pop	{pc}
10008afa:	46c0      	nop			; (mov r8, r8)
10008afc:	10010b00 	.word	0x10010b00
10008b00:	4000b000 	.word	0x4000b000

10008b04 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008b04:	b500      	push	{lr}
	switch (peripheral) {
10008b06:	2843      	cmp	r0, #67	; 0x43
10008b08:	d900      	bls.n	10008b0c <system_peripheral_reset+0x8>
10008b0a:	e223      	b.n	10008f54 <system_peripheral_reset+0x450>
10008b0c:	0080      	lsls	r0, r0, #2
10008b0e:	4be0      	ldr	r3, [pc, #896]	; (10008e90 <system_peripheral_reset+0x38c>)
10008b10:	581b      	ldr	r3, [r3, r0]
10008b12:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b14:	4bdf      	ldr	r3, [pc, #892]	; (10008e94 <system_peripheral_reset+0x390>)
10008b16:	6859      	ldr	r1, [r3, #4]
10008b18:	2202      	movs	r2, #2
10008b1a:	4391      	bics	r1, r2
10008b1c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b1e:	6859      	ldr	r1, [r3, #4]
10008b20:	430a      	orrs	r2, r1
10008b22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b24:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008b26:	e216      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b28:	4bda      	ldr	r3, [pc, #872]	; (10008e94 <system_peripheral_reset+0x390>)
10008b2a:	6859      	ldr	r1, [r3, #4]
10008b2c:	2204      	movs	r2, #4
10008b2e:	4391      	bics	r1, r2
10008b30:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b32:	6859      	ldr	r1, [r3, #4]
10008b34:	430a      	orrs	r2, r1
10008b36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008b3a:	e20c      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b3c:	4bd5      	ldr	r3, [pc, #852]	; (10008e94 <system_peripheral_reset+0x390>)
10008b3e:	6859      	ldr	r1, [r3, #4]
10008b40:	2208      	movs	r2, #8
10008b42:	4391      	bics	r1, r2
10008b44:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b46:	6859      	ldr	r1, [r3, #4]
10008b48:	430a      	orrs	r2, r1
10008b4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b4c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10008b4e:	e202      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b50:	4bd0      	ldr	r3, [pc, #832]	; (10008e94 <system_peripheral_reset+0x390>)
10008b52:	6859      	ldr	r1, [r3, #4]
10008b54:	2210      	movs	r2, #16
10008b56:	4391      	bics	r1, r2
10008b58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b5a:	6859      	ldr	r1, [r3, #4]
10008b5c:	430a      	orrs	r2, r1
10008b5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10008b62:	e1f8      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b64:	4bcb      	ldr	r3, [pc, #812]	; (10008e94 <system_peripheral_reset+0x390>)
10008b66:	6859      	ldr	r1, [r3, #4]
10008b68:	2220      	movs	r2, #32
10008b6a:	4391      	bics	r1, r2
10008b6c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b6e:	6859      	ldr	r1, [r3, #4]
10008b70:	430a      	orrs	r2, r1
10008b72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b74:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008b76:	e1ee      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b78:	4bc6      	ldr	r3, [pc, #792]	; (10008e94 <system_peripheral_reset+0x390>)
10008b7a:	6859      	ldr	r1, [r3, #4]
10008b7c:	2240      	movs	r2, #64	; 0x40
10008b7e:	4391      	bics	r1, r2
10008b80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b82:	6859      	ldr	r1, [r3, #4]
10008b84:	430a      	orrs	r2, r1
10008b86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b88:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10008b8a:	e1e4      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b8c:	4bc1      	ldr	r3, [pc, #772]	; (10008e94 <system_peripheral_reset+0x390>)
10008b8e:	6859      	ldr	r1, [r3, #4]
10008b90:	2280      	movs	r2, #128	; 0x80
10008b92:	4391      	bics	r1, r2
10008b94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b96:	6859      	ldr	r1, [r3, #4]
10008b98:	430a      	orrs	r2, r1
10008b9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10008b9e:	e1da      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ba0:	4bbc      	ldr	r3, [pc, #752]	; (10008e94 <system_peripheral_reset+0x390>)
10008ba2:	6859      	ldr	r1, [r3, #4]
10008ba4:	4abc      	ldr	r2, [pc, #752]	; (10008e98 <system_peripheral_reset+0x394>)
10008ba6:	400a      	ands	r2, r1
10008ba8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008baa:	685a      	ldr	r2, [r3, #4]
10008bac:	2180      	movs	r1, #128	; 0x80
10008bae:	0049      	lsls	r1, r1, #1
10008bb0:	430a      	orrs	r2, r1
10008bb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bb4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10008bb6:	e1ce      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008bb8:	4bb6      	ldr	r3, [pc, #728]	; (10008e94 <system_peripheral_reset+0x390>)
10008bba:	6859      	ldr	r1, [r3, #4]
10008bbc:	4ab7      	ldr	r2, [pc, #732]	; (10008e9c <system_peripheral_reset+0x398>)
10008bbe:	400a      	ands	r2, r1
10008bc0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bc2:	685a      	ldr	r2, [r3, #4]
10008bc4:	2180      	movs	r1, #128	; 0x80
10008bc6:	0089      	lsls	r1, r1, #2
10008bc8:	430a      	orrs	r2, r1
10008bca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10008bce:	e1c2      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008bd0:	4bb0      	ldr	r3, [pc, #704]	; (10008e94 <system_peripheral_reset+0x390>)
10008bd2:	6859      	ldr	r1, [r3, #4]
10008bd4:	4ab2      	ldr	r2, [pc, #712]	; (10008ea0 <system_peripheral_reset+0x39c>)
10008bd6:	400a      	ands	r2, r1
10008bd8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bda:	685a      	ldr	r2, [r3, #4]
10008bdc:	2180      	movs	r1, #128	; 0x80
10008bde:	00c9      	lsls	r1, r1, #3
10008be0:	430a      	orrs	r2, r1
10008be2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008be4:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008be6:	e1b6      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008be8:	4baa      	ldr	r3, [pc, #680]	; (10008e94 <system_peripheral_reset+0x390>)
10008bea:	6859      	ldr	r1, [r3, #4]
10008bec:	4aad      	ldr	r2, [pc, #692]	; (10008ea4 <system_peripheral_reset+0x3a0>)
10008bee:	400a      	ands	r2, r1
10008bf0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bf2:	685a      	ldr	r2, [r3, #4]
10008bf4:	2180      	movs	r1, #128	; 0x80
10008bf6:	0109      	lsls	r1, r1, #4
10008bf8:	430a      	orrs	r2, r1
10008bfa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfc:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10008bfe:	e1aa      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c00:	4ba4      	ldr	r3, [pc, #656]	; (10008e94 <system_peripheral_reset+0x390>)
10008c02:	6859      	ldr	r1, [r3, #4]
10008c04:	4aa8      	ldr	r2, [pc, #672]	; (10008ea8 <system_peripheral_reset+0x3a4>)
10008c06:	400a      	ands	r2, r1
10008c08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c0a:	685a      	ldr	r2, [r3, #4]
10008c0c:	2180      	movs	r1, #128	; 0x80
10008c0e:	0149      	lsls	r1, r1, #5
10008c10:	430a      	orrs	r2, r1
10008c12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c14:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10008c16:	e19e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c18:	4b9e      	ldr	r3, [pc, #632]	; (10008e94 <system_peripheral_reset+0x390>)
10008c1a:	6859      	ldr	r1, [r3, #4]
10008c1c:	4aa3      	ldr	r2, [pc, #652]	; (10008eac <system_peripheral_reset+0x3a8>)
10008c1e:	400a      	ands	r2, r1
10008c20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c22:	685a      	ldr	r2, [r3, #4]
10008c24:	2180      	movs	r1, #128	; 0x80
10008c26:	0189      	lsls	r1, r1, #6
10008c28:	430a      	orrs	r2, r1
10008c2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c2c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10008c2e:	e192      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c30:	4b98      	ldr	r3, [pc, #608]	; (10008e94 <system_peripheral_reset+0x390>)
10008c32:	6859      	ldr	r1, [r3, #4]
10008c34:	4a9e      	ldr	r2, [pc, #632]	; (10008eb0 <system_peripheral_reset+0x3ac>)
10008c36:	400a      	ands	r2, r1
10008c38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c3a:	685a      	ldr	r2, [r3, #4]
10008c3c:	2180      	movs	r1, #128	; 0x80
10008c3e:	01c9      	lsls	r1, r1, #7
10008c40:	430a      	orrs	r2, r1
10008c42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c44:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10008c46:	e186      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c48:	4b92      	ldr	r3, [pc, #584]	; (10008e94 <system_peripheral_reset+0x390>)
10008c4a:	6859      	ldr	r1, [r3, #4]
10008c4c:	4a99      	ldr	r2, [pc, #612]	; (10008eb4 <system_peripheral_reset+0x3b0>)
10008c4e:	400a      	ands	r2, r1
10008c50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c52:	685a      	ldr	r2, [r3, #4]
10008c54:	2180      	movs	r1, #128	; 0x80
10008c56:	0209      	lsls	r1, r1, #8
10008c58:	430a      	orrs	r2, r1
10008c5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c5c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
10008c5e:	e17a      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c60:	4b8c      	ldr	r3, [pc, #560]	; (10008e94 <system_peripheral_reset+0x390>)
10008c62:	6859      	ldr	r1, [r3, #4]
10008c64:	4a94      	ldr	r2, [pc, #592]	; (10008eb8 <system_peripheral_reset+0x3b4>)
10008c66:	400a      	ands	r2, r1
10008c68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c6a:	685a      	ldr	r2, [r3, #4]
10008c6c:	2180      	movs	r1, #128	; 0x80
10008c6e:	0249      	lsls	r1, r1, #9
10008c70:	430a      	orrs	r2, r1
10008c72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c74:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10008c76:	e16e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c78:	4b86      	ldr	r3, [pc, #536]	; (10008e94 <system_peripheral_reset+0x390>)
10008c7a:	6859      	ldr	r1, [r3, #4]
10008c7c:	4a8f      	ldr	r2, [pc, #572]	; (10008ebc <system_peripheral_reset+0x3b8>)
10008c7e:	400a      	ands	r2, r1
10008c80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c82:	685a      	ldr	r2, [r3, #4]
10008c84:	2180      	movs	r1, #128	; 0x80
10008c86:	0289      	lsls	r1, r1, #10
10008c88:	430a      	orrs	r2, r1
10008c8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
10008c8e:	e162      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c90:	4b80      	ldr	r3, [pc, #512]	; (10008e94 <system_peripheral_reset+0x390>)
10008c92:	6859      	ldr	r1, [r3, #4]
10008c94:	4a8a      	ldr	r2, [pc, #552]	; (10008ec0 <system_peripheral_reset+0x3bc>)
10008c96:	400a      	ands	r2, r1
10008c98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c9a:	685a      	ldr	r2, [r3, #4]
10008c9c:	2180      	movs	r1, #128	; 0x80
10008c9e:	02c9      	lsls	r1, r1, #11
10008ca0:	430a      	orrs	r2, r1
10008ca2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ca4:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008ca6:	e156      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ca8:	4b7a      	ldr	r3, [pc, #488]	; (10008e94 <system_peripheral_reset+0x390>)
10008caa:	6859      	ldr	r1, [r3, #4]
10008cac:	4a85      	ldr	r2, [pc, #532]	; (10008ec4 <system_peripheral_reset+0x3c0>)
10008cae:	400a      	ands	r2, r1
10008cb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cb2:	685a      	ldr	r2, [r3, #4]
10008cb4:	2180      	movs	r1, #128	; 0x80
10008cb6:	0309      	lsls	r1, r1, #12
10008cb8:	430a      	orrs	r2, r1
10008cba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cbc:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008cbe:	e14a      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cc0:	4b74      	ldr	r3, [pc, #464]	; (10008e94 <system_peripheral_reset+0x390>)
10008cc2:	6859      	ldr	r1, [r3, #4]
10008cc4:	4a80      	ldr	r2, [pc, #512]	; (10008ec8 <system_peripheral_reset+0x3c4>)
10008cc6:	400a      	ands	r2, r1
10008cc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cca:	685a      	ldr	r2, [r3, #4]
10008ccc:	2180      	movs	r1, #128	; 0x80
10008cce:	0349      	lsls	r1, r1, #13
10008cd0:	430a      	orrs	r2, r1
10008cd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008cd6:	e13e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cd8:	4b6e      	ldr	r3, [pc, #440]	; (10008e94 <system_peripheral_reset+0x390>)
10008cda:	6859      	ldr	r1, [r3, #4]
10008cdc:	4a7b      	ldr	r2, [pc, #492]	; (10008ecc <system_peripheral_reset+0x3c8>)
10008cde:	400a      	ands	r2, r1
10008ce0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ce2:	685a      	ldr	r2, [r3, #4]
10008ce4:	2180      	movs	r1, #128	; 0x80
10008ce6:	0389      	lsls	r1, r1, #14
10008ce8:	430a      	orrs	r2, r1
10008cea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cec:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008cee:	e132      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cf0:	4b68      	ldr	r3, [pc, #416]	; (10008e94 <system_peripheral_reset+0x390>)
10008cf2:	6859      	ldr	r1, [r3, #4]
10008cf4:	4a76      	ldr	r2, [pc, #472]	; (10008ed0 <system_peripheral_reset+0x3cc>)
10008cf6:	400a      	ands	r2, r1
10008cf8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cfa:	685a      	ldr	r2, [r3, #4]
10008cfc:	2180      	movs	r1, #128	; 0x80
10008cfe:	03c9      	lsls	r1, r1, #15
10008d00:	430a      	orrs	r2, r1
10008d02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d04:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008d06:	e126      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d08:	4b62      	ldr	r3, [pc, #392]	; (10008e94 <system_peripheral_reset+0x390>)
10008d0a:	6859      	ldr	r1, [r3, #4]
10008d0c:	4a71      	ldr	r2, [pc, #452]	; (10008ed4 <system_peripheral_reset+0x3d0>)
10008d0e:	400a      	ands	r2, r1
10008d10:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d12:	685a      	ldr	r2, [r3, #4]
10008d14:	2180      	movs	r1, #128	; 0x80
10008d16:	0409      	lsls	r1, r1, #16
10008d18:	430a      	orrs	r2, r1
10008d1a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d1c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008d1e:	e11a      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d20:	4b5c      	ldr	r3, [pc, #368]	; (10008e94 <system_peripheral_reset+0x390>)
10008d22:	6859      	ldr	r1, [r3, #4]
10008d24:	4a6c      	ldr	r2, [pc, #432]	; (10008ed8 <system_peripheral_reset+0x3d4>)
10008d26:	400a      	ands	r2, r1
10008d28:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d2a:	685a      	ldr	r2, [r3, #4]
10008d2c:	2180      	movs	r1, #128	; 0x80
10008d2e:	0449      	lsls	r1, r1, #17
10008d30:	430a      	orrs	r2, r1
10008d32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d34:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008d36:	e10e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d38:	4b56      	ldr	r3, [pc, #344]	; (10008e94 <system_peripheral_reset+0x390>)
10008d3a:	6859      	ldr	r1, [r3, #4]
10008d3c:	4a67      	ldr	r2, [pc, #412]	; (10008edc <system_peripheral_reset+0x3d8>)
10008d3e:	400a      	ands	r2, r1
10008d40:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d42:	685a      	ldr	r2, [r3, #4]
10008d44:	2180      	movs	r1, #128	; 0x80
10008d46:	0489      	lsls	r1, r1, #18
10008d48:	430a      	orrs	r2, r1
10008d4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d4c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10008d4e:	e102      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d50:	4b50      	ldr	r3, [pc, #320]	; (10008e94 <system_peripheral_reset+0x390>)
10008d52:	6859      	ldr	r1, [r3, #4]
10008d54:	4a62      	ldr	r2, [pc, #392]	; (10008ee0 <system_peripheral_reset+0x3dc>)
10008d56:	400a      	ands	r2, r1
10008d58:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d5a:	685a      	ldr	r2, [r3, #4]
10008d5c:	2180      	movs	r1, #128	; 0x80
10008d5e:	04c9      	lsls	r1, r1, #19
10008d60:	430a      	orrs	r2, r1
10008d62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d64:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10008d66:	e0f6      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d68:	4b4a      	ldr	r3, [pc, #296]	; (10008e94 <system_peripheral_reset+0x390>)
10008d6a:	6859      	ldr	r1, [r3, #4]
10008d6c:	4a5d      	ldr	r2, [pc, #372]	; (10008ee4 <system_peripheral_reset+0x3e0>)
10008d6e:	400a      	ands	r2, r1
10008d70:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d72:	685a      	ldr	r2, [r3, #4]
10008d74:	2180      	movs	r1, #128	; 0x80
10008d76:	0509      	lsls	r1, r1, #20
10008d78:	430a      	orrs	r2, r1
10008d7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d7c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10008d7e:	e0ea      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d80:	4b44      	ldr	r3, [pc, #272]	; (10008e94 <system_peripheral_reset+0x390>)
10008d82:	6859      	ldr	r1, [r3, #4]
10008d84:	4a58      	ldr	r2, [pc, #352]	; (10008ee8 <system_peripheral_reset+0x3e4>)
10008d86:	400a      	ands	r2, r1
10008d88:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d8a:	685a      	ldr	r2, [r3, #4]
10008d8c:	2180      	movs	r1, #128	; 0x80
10008d8e:	0549      	lsls	r1, r1, #21
10008d90:	430a      	orrs	r2, r1
10008d92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d94:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10008d96:	e0de      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d98:	4b3e      	ldr	r3, [pc, #248]	; (10008e94 <system_peripheral_reset+0x390>)
10008d9a:	6859      	ldr	r1, [r3, #4]
10008d9c:	4a53      	ldr	r2, [pc, #332]	; (10008eec <system_peripheral_reset+0x3e8>)
10008d9e:	400a      	ands	r2, r1
10008da0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008da2:	685a      	ldr	r2, [r3, #4]
10008da4:	2180      	movs	r1, #128	; 0x80
10008da6:	0589      	lsls	r1, r1, #22
10008da8:	430a      	orrs	r2, r1
10008daa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dac:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10008dae:	e0d2      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008db0:	4b38      	ldr	r3, [pc, #224]	; (10008e94 <system_peripheral_reset+0x390>)
10008db2:	6859      	ldr	r1, [r3, #4]
10008db4:	4a4e      	ldr	r2, [pc, #312]	; (10008ef0 <system_peripheral_reset+0x3ec>)
10008db6:	400a      	ands	r2, r1
10008db8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dba:	685a      	ldr	r2, [r3, #4]
10008dbc:	2180      	movs	r1, #128	; 0x80
10008dbe:	05c9      	lsls	r1, r1, #23
10008dc0:	430a      	orrs	r2, r1
10008dc2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dc4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10008dc6:	e0c6      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dc8:	4a32      	ldr	r2, [pc, #200]	; (10008e94 <system_peripheral_reset+0x390>)
10008dca:	6853      	ldr	r3, [r2, #4]
10008dcc:	005b      	lsls	r3, r3, #1
10008dce:	085b      	lsrs	r3, r3, #1
10008dd0:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dd2:	6853      	ldr	r3, [r2, #4]
10008dd4:	2180      	movs	r1, #128	; 0x80
10008dd6:	0609      	lsls	r1, r1, #24
10008dd8:	430b      	orrs	r3, r1
10008dda:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ddc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10008dde:	e0ba      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008de0:	4b2c      	ldr	r3, [pc, #176]	; (10008e94 <system_peripheral_reset+0x390>)
10008de2:	891a      	ldrh	r2, [r3, #8]
10008de4:	2101      	movs	r1, #1
10008de6:	438a      	bics	r2, r1
10008de8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008dea:	8919      	ldrh	r1, [r3, #8]
10008dec:	2201      	movs	r2, #1
10008dee:	430a      	orrs	r2, r1
10008df0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008df2:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10008df4:	e0af      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008df6:	4b27      	ldr	r3, [pc, #156]	; (10008e94 <system_peripheral_reset+0x390>)
10008df8:	891a      	ldrh	r2, [r3, #8]
10008dfa:	2102      	movs	r1, #2
10008dfc:	438a      	bics	r2, r1
10008dfe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e00:	8919      	ldrh	r1, [r3, #8]
10008e02:	2202      	movs	r2, #2
10008e04:	430a      	orrs	r2, r1
10008e06:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e08:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10008e0a:	e0a4      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e0c:	4b21      	ldr	r3, [pc, #132]	; (10008e94 <system_peripheral_reset+0x390>)
10008e0e:	891a      	ldrh	r2, [r3, #8]
10008e10:	2104      	movs	r1, #4
10008e12:	438a      	bics	r2, r1
10008e14:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e16:	8919      	ldrh	r1, [r3, #8]
10008e18:	2204      	movs	r2, #4
10008e1a:	430a      	orrs	r2, r1
10008e1c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e1e:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10008e20:	e099      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e22:	4b1c      	ldr	r3, [pc, #112]	; (10008e94 <system_peripheral_reset+0x390>)
10008e24:	891a      	ldrh	r2, [r3, #8]
10008e26:	2108      	movs	r1, #8
10008e28:	438a      	bics	r2, r1
10008e2a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e2c:	8919      	ldrh	r1, [r3, #8]
10008e2e:	2208      	movs	r2, #8
10008e30:	430a      	orrs	r2, r1
10008e32:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e34:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008e36:	e08e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e38:	4b16      	ldr	r3, [pc, #88]	; (10008e94 <system_peripheral_reset+0x390>)
10008e3a:	891a      	ldrh	r2, [r3, #8]
10008e3c:	2110      	movs	r1, #16
10008e3e:	438a      	bics	r2, r1
10008e40:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e42:	8919      	ldrh	r1, [r3, #8]
10008e44:	2210      	movs	r2, #16
10008e46:	430a      	orrs	r2, r1
10008e48:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008e4c:	e083      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e4e:	4b11      	ldr	r3, [pc, #68]	; (10008e94 <system_peripheral_reset+0x390>)
10008e50:	891a      	ldrh	r2, [r3, #8]
10008e52:	2120      	movs	r1, #32
10008e54:	438a      	bics	r2, r1
10008e56:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e58:	8919      	ldrh	r1, [r3, #8]
10008e5a:	2220      	movs	r2, #32
10008e5c:	430a      	orrs	r2, r1
10008e5e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e60:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008e62:	e078      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e64:	4b0b      	ldr	r3, [pc, #44]	; (10008e94 <system_peripheral_reset+0x390>)
10008e66:	891a      	ldrh	r2, [r3, #8]
10008e68:	2140      	movs	r1, #64	; 0x40
10008e6a:	438a      	bics	r2, r1
10008e6c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e6e:	8919      	ldrh	r1, [r3, #8]
10008e70:	2240      	movs	r2, #64	; 0x40
10008e72:	430a      	orrs	r2, r1
10008e74:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e76:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10008e78:	e06d      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e7a:	4b06      	ldr	r3, [pc, #24]	; (10008e94 <system_peripheral_reset+0x390>)
10008e7c:	891a      	ldrh	r2, [r3, #8]
10008e7e:	2180      	movs	r1, #128	; 0x80
10008e80:	438a      	bics	r2, r1
10008e82:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e84:	8919      	ldrh	r1, [r3, #8]
10008e86:	2280      	movs	r2, #128	; 0x80
10008e88:	430a      	orrs	r2, r1
10008e8a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e8c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
10008e8e:	e062      	b.n	10008f56 <system_peripheral_reset+0x452>
10008e90:	10010bd8 	.word	0x10010bd8
10008e94:	4000b000 	.word	0x4000b000
10008e98:	fffffeff 	.word	0xfffffeff
10008e9c:	fffffdff 	.word	0xfffffdff
10008ea0:	fffffbff 	.word	0xfffffbff
10008ea4:	fffff7ff 	.word	0xfffff7ff
10008ea8:	ffffefff 	.word	0xffffefff
10008eac:	ffffdfff 	.word	0xffffdfff
10008eb0:	ffffbfff 	.word	0xffffbfff
10008eb4:	ffff7fff 	.word	0xffff7fff
10008eb8:	fffeffff 	.word	0xfffeffff
10008ebc:	fffdffff 	.word	0xfffdffff
10008ec0:	fffbffff 	.word	0xfffbffff
10008ec4:	fff7ffff 	.word	0xfff7ffff
10008ec8:	ffefffff 	.word	0xffefffff
10008ecc:	ffdfffff 	.word	0xffdfffff
10008ed0:	ffbfffff 	.word	0xffbfffff
10008ed4:	ff7fffff 	.word	0xff7fffff
10008ed8:	feffffff 	.word	0xfeffffff
10008edc:	fdffffff 	.word	0xfdffffff
10008ee0:	fbffffff 	.word	0xfbffffff
10008ee4:	f7ffffff 	.word	0xf7ffffff
10008ee8:	efffffff 	.word	0xefffffff
10008eec:	dfffffff 	.word	0xdfffffff
10008ef0:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008ef4:	4b18      	ldr	r3, [pc, #96]	; (10008f58 <system_peripheral_reset+0x454>)
10008ef6:	8919      	ldrh	r1, [r3, #8]
10008ef8:	4a18      	ldr	r2, [pc, #96]	; (10008f5c <system_peripheral_reset+0x458>)
10008efa:	400a      	ands	r2, r1
10008efc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008efe:	8919      	ldrh	r1, [r3, #8]
10008f00:	2280      	movs	r2, #128	; 0x80
10008f02:	0052      	lsls	r2, r2, #1
10008f04:	430a      	orrs	r2, r1
10008f06:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f08:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
10008f0a:	e024      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f0c:	4b12      	ldr	r3, [pc, #72]	; (10008f58 <system_peripheral_reset+0x454>)
10008f0e:	8919      	ldrh	r1, [r3, #8]
10008f10:	4a13      	ldr	r2, [pc, #76]	; (10008f60 <system_peripheral_reset+0x45c>)
10008f12:	400a      	ands	r2, r1
10008f14:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f16:	8919      	ldrh	r1, [r3, #8]
10008f18:	2280      	movs	r2, #128	; 0x80
10008f1a:	0092      	lsls	r2, r2, #2
10008f1c:	430a      	orrs	r2, r1
10008f1e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f20:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10008f22:	e018      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f24:	4b0c      	ldr	r3, [pc, #48]	; (10008f58 <system_peripheral_reset+0x454>)
10008f26:	8919      	ldrh	r1, [r3, #8]
10008f28:	4a0e      	ldr	r2, [pc, #56]	; (10008f64 <system_peripheral_reset+0x460>)
10008f2a:	400a      	ands	r2, r1
10008f2c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f2e:	8919      	ldrh	r1, [r3, #8]
10008f30:	2280      	movs	r2, #128	; 0x80
10008f32:	00d2      	lsls	r2, r2, #3
10008f34:	430a      	orrs	r2, r1
10008f36:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10008f3a:	e00c      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f3c:	4b06      	ldr	r3, [pc, #24]	; (10008f58 <system_peripheral_reset+0x454>)
10008f3e:	8919      	ldrh	r1, [r3, #8]
10008f40:	4a09      	ldr	r2, [pc, #36]	; (10008f68 <system_peripheral_reset+0x464>)
10008f42:	400a      	ands	r2, r1
10008f44:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f46:	8919      	ldrh	r1, [r3, #8]
10008f48:	2280      	movs	r2, #128	; 0x80
10008f4a:	0112      	lsls	r2, r2, #4
10008f4c:	430a      	orrs	r2, r1
10008f4e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f50:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10008f52:	e000      	b.n	10008f56 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10008f54:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008f56:	bd00      	pop	{pc}
10008f58:	4000b000 	.word	0x4000b000
10008f5c:	fffffeff 	.word	0xfffffeff
10008f60:	fffffdff 	.word	0xfffffdff
10008f64:	fffffbff 	.word	0xfffffbff
10008f68:	fffff7ff 	.word	0xfffff7ff

10008f6c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10008f6c:	2380      	movs	r3, #128	; 0x80
10008f6e:	04db      	lsls	r3, r3, #19
10008f70:	469c      	mov	ip, r3
10008f72:	4460      	add	r0, ip
10008f74:	0080      	lsls	r0, r0, #2
10008f76:	6001      	str	r1, [r0, #0]
}
10008f78:	4770      	bx	lr
10008f7a:	46c0      	nop			; (mov r8, r8)

10008f7c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10008f7c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10008f7e:	4b20      	ldr	r3, [pc, #128]	; (10009000 <uart_rx0_isr_handler+0x84>)
10008f80:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008f82:	6823      	ldr	r3, [r4, #0]
10008f84:	7d1d      	ldrb	r5, [r3, #20]
10008f86:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10008f88:	066a      	lsls	r2, r5, #25
10008f8a:	d513      	bpl.n	10008fb4 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10008f8c:	211e      	movs	r1, #30
10008f8e:	2222      	movs	r2, #34	; 0x22
10008f90:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10008f92:	7e1a      	ldrb	r2, [r3, #24]
10008f94:	3123      	adds	r1, #35	; 0x23
10008f96:	438a      	bics	r2, r1
10008f98:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008f9a:	2321      	movs	r3, #33	; 0x21
10008f9c:	5ce3      	ldrb	r3, [r4, r3]
10008f9e:	071b      	lsls	r3, r3, #28
10008fa0:	d506      	bpl.n	10008fb0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10008fa2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008fa4:	5ce3      	ldrb	r3, [r4, r3]
10008fa6:	071b      	lsls	r3, r3, #28
10008fa8:	d502      	bpl.n	10008fb0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10008faa:	0020      	movs	r0, r4
10008fac:	6923      	ldr	r3, [r4, #16]
10008fae:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10008fb0:	6823      	ldr	r3, [r4, #0]
10008fb2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008fb4:	07eb      	lsls	r3, r5, #31
10008fb6:	d522      	bpl.n	10008ffe <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10008fb8:	6823      	ldr	r3, [r4, #0]
10008fba:	7c1b      	ldrb	r3, [r3, #16]
10008fbc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008fbe:	6962      	ldr	r2, [r4, #20]
10008fc0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008fc2:	6963      	ldr	r3, [r4, #20]
10008fc4:	3301      	adds	r3, #1
10008fc6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008fc8:	8ba3      	ldrh	r3, [r4, #28]
10008fca:	3b01      	subs	r3, #1
10008fcc:	b29b      	uxth	r3, r3
10008fce:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10008fd0:	8ba3      	ldrh	r3, [r4, #28]
10008fd2:	b29b      	uxth	r3, r3
10008fd4:	2b00      	cmp	r3, #0
10008fd6:	d112      	bne.n	10008ffe <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008fd8:	3321      	adds	r3, #33	; 0x21
10008fda:	5ce3      	ldrb	r3, [r4, r3]
10008fdc:	075b      	lsls	r3, r3, #29
10008fde:	d50e      	bpl.n	10008ffe <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10008fe0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008fe2:	5ce3      	ldrb	r3, [r4, r3]
10008fe4:	075b      	lsls	r3, r3, #29
10008fe6:	d50a      	bpl.n	10008ffe <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10008fe8:	2200      	movs	r2, #0
10008fea:	2322      	movs	r3, #34	; 0x22
10008fec:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10008fee:	6822      	ldr	r2, [r4, #0]
10008ff0:	7e13      	ldrb	r3, [r2, #24]
10008ff2:	2101      	movs	r1, #1
10008ff4:	438b      	bics	r3, r1
10008ff6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10008ff8:	68e3      	ldr	r3, [r4, #12]
10008ffa:	0020      	movs	r0, r4
10008ffc:	4798      	blx	r3
			}
		}
	}
}
10008ffe:	bd70      	pop	{r4, r5, r6, pc}
10009000:	10012688 	.word	0x10012688

10009004 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009004:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009006:	4b21      	ldr	r3, [pc, #132]	; (1000908c <uart_tx0_isr_handler+0x88>)
10009008:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000900a:	6823      	ldr	r3, [r4, #0]
1000900c:	791d      	ldrb	r5, [r3, #4]
1000900e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009010:	07ea      	lsls	r2, r5, #31
10009012:	d517      	bpl.n	10009044 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009014:	69a2      	ldr	r2, [r4, #24]
10009016:	7811      	ldrb	r1, [r2, #0]
10009018:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000901a:	3201      	adds	r2, #1
1000901c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000901e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009020:	8be3      	ldrh	r3, [r4, #30]
10009022:	3b01      	subs	r3, #1
10009024:	b29b      	uxth	r3, r3
10009026:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009028:	8be3      	ldrh	r3, [r4, #30]
1000902a:	b29b      	uxth	r3, r3
1000902c:	2b00      	cmp	r3, #0
1000902e:	d109      	bne.n	10009044 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009030:	6822      	ldr	r2, [r4, #0]
10009032:	7a13      	ldrb	r3, [r2, #8]
10009034:	2101      	movs	r1, #1
10009036:	438b      	bics	r3, r1
10009038:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000903a:	6822      	ldr	r2, [r4, #0]
1000903c:	7a11      	ldrb	r1, [r2, #8]
1000903e:	2310      	movs	r3, #16
10009040:	430b      	orrs	r3, r1
10009042:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009044:	06eb      	lsls	r3, r5, #27
10009046:	d512      	bpl.n	1000906e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009048:	2321      	movs	r3, #33	; 0x21
1000904a:	5ce3      	ldrb	r3, [r4, r3]
1000904c:	07db      	lsls	r3, r3, #31
1000904e:	d50e      	bpl.n	1000906e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009050:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009052:	5ce3      	ldrb	r3, [r4, r3]
10009054:	07db      	lsls	r3, r3, #31
10009056:	d50a      	bpl.n	1000906e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009058:	2200      	movs	r2, #0
1000905a:	2322      	movs	r3, #34	; 0x22
1000905c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000905e:	6822      	ldr	r2, [r4, #0]
10009060:	7a13      	ldrb	r3, [r2, #8]
10009062:	2110      	movs	r1, #16
10009064:	438b      	bics	r3, r1
10009066:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009068:	0020      	movs	r0, r4
1000906a:	6863      	ldr	r3, [r4, #4]
1000906c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000906e:	06ab      	lsls	r3, r5, #26
10009070:	d50a      	bpl.n	10009088 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009072:	2321      	movs	r3, #33	; 0x21
10009074:	5ce3      	ldrb	r3, [r4, r3]
10009076:	079b      	lsls	r3, r3, #30
10009078:	d506      	bpl.n	10009088 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000907a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000907c:	5ce3      	ldrb	r3, [r4, r3]
1000907e:	079b      	lsls	r3, r3, #30
10009080:	d502      	bpl.n	10009088 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009082:	68a3      	ldr	r3, [r4, #8]
10009084:	0020      	movs	r0, r4
10009086:	4798      	blx	r3
		}

	}
}
10009088:	bd70      	pop	{r4, r5, r6, pc}
1000908a:	46c0      	nop			; (mov r8, r8)
1000908c:	10012688 	.word	0x10012688

10009090 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009090:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009092:	4b20      	ldr	r3, [pc, #128]	; (10009114 <uart_rx1_isr_handler+0x84>)
10009094:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009096:	6823      	ldr	r3, [r4, #0]
10009098:	7d1d      	ldrb	r5, [r3, #20]
1000909a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000909c:	066a      	lsls	r2, r5, #25
1000909e:	d513      	bpl.n	100090c8 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100090a0:	211e      	movs	r1, #30
100090a2:	2222      	movs	r2, #34	; 0x22
100090a4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100090a6:	7e1a      	ldrb	r2, [r3, #24]
100090a8:	3123      	adds	r1, #35	; 0x23
100090aa:	438a      	bics	r2, r1
100090ac:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100090ae:	2321      	movs	r3, #33	; 0x21
100090b0:	5ce3      	ldrb	r3, [r4, r3]
100090b2:	071b      	lsls	r3, r3, #28
100090b4:	d506      	bpl.n	100090c4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100090b6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100090b8:	5ce3      	ldrb	r3, [r4, r3]
100090ba:	071b      	lsls	r3, r3, #28
100090bc:	d502      	bpl.n	100090c4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100090be:	0020      	movs	r0, r4
100090c0:	6923      	ldr	r3, [r4, #16]
100090c2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100090c4:	6823      	ldr	r3, [r4, #0]
100090c6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100090c8:	07eb      	lsls	r3, r5, #31
100090ca:	d522      	bpl.n	10009112 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100090cc:	6823      	ldr	r3, [r4, #0]
100090ce:	7c1b      	ldrb	r3, [r3, #16]
100090d0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100090d2:	6962      	ldr	r2, [r4, #20]
100090d4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100090d6:	6963      	ldr	r3, [r4, #20]
100090d8:	3301      	adds	r3, #1
100090da:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100090dc:	8ba3      	ldrh	r3, [r4, #28]
100090de:	3b01      	subs	r3, #1
100090e0:	b29b      	uxth	r3, r3
100090e2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100090e4:	8ba3      	ldrh	r3, [r4, #28]
100090e6:	b29b      	uxth	r3, r3
100090e8:	2b00      	cmp	r3, #0
100090ea:	d112      	bne.n	10009112 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100090ec:	3321      	adds	r3, #33	; 0x21
100090ee:	5ce3      	ldrb	r3, [r4, r3]
100090f0:	075b      	lsls	r3, r3, #29
100090f2:	d50e      	bpl.n	10009112 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100090f4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100090f6:	5ce3      	ldrb	r3, [r4, r3]
100090f8:	075b      	lsls	r3, r3, #29
100090fa:	d50a      	bpl.n	10009112 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100090fc:	2200      	movs	r2, #0
100090fe:	2322      	movs	r3, #34	; 0x22
10009100:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009102:	6822      	ldr	r2, [r4, #0]
10009104:	7e13      	ldrb	r3, [r2, #24]
10009106:	2101      	movs	r1, #1
10009108:	438b      	bics	r3, r1
1000910a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000910c:	68e3      	ldr	r3, [r4, #12]
1000910e:	0020      	movs	r0, r4
10009110:	4798      	blx	r3
			}
		}
	}
}
10009112:	bd70      	pop	{r4, r5, r6, pc}
10009114:	10012688 	.word	0x10012688

10009118 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009118:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000911a:	4b21      	ldr	r3, [pc, #132]	; (100091a0 <uart_tx1_isr_handler+0x88>)
1000911c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000911e:	6823      	ldr	r3, [r4, #0]
10009120:	791d      	ldrb	r5, [r3, #4]
10009122:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009124:	07ea      	lsls	r2, r5, #31
10009126:	d517      	bpl.n	10009158 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009128:	69a2      	ldr	r2, [r4, #24]
1000912a:	7811      	ldrb	r1, [r2, #0]
1000912c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000912e:	3201      	adds	r2, #1
10009130:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009132:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009134:	8be3      	ldrh	r3, [r4, #30]
10009136:	3b01      	subs	r3, #1
10009138:	b29b      	uxth	r3, r3
1000913a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000913c:	8be3      	ldrh	r3, [r4, #30]
1000913e:	b29b      	uxth	r3, r3
10009140:	2b00      	cmp	r3, #0
10009142:	d109      	bne.n	10009158 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009144:	6822      	ldr	r2, [r4, #0]
10009146:	7a13      	ldrb	r3, [r2, #8]
10009148:	2101      	movs	r1, #1
1000914a:	438b      	bics	r3, r1
1000914c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000914e:	6822      	ldr	r2, [r4, #0]
10009150:	7a11      	ldrb	r1, [r2, #8]
10009152:	2310      	movs	r3, #16
10009154:	430b      	orrs	r3, r1
10009156:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009158:	06eb      	lsls	r3, r5, #27
1000915a:	d512      	bpl.n	10009182 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000915c:	2321      	movs	r3, #33	; 0x21
1000915e:	5ce3      	ldrb	r3, [r4, r3]
10009160:	07db      	lsls	r3, r3, #31
10009162:	d50e      	bpl.n	10009182 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009164:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009166:	5ce3      	ldrb	r3, [r4, r3]
10009168:	07db      	lsls	r3, r3, #31
1000916a:	d50a      	bpl.n	10009182 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000916c:	2200      	movs	r2, #0
1000916e:	2322      	movs	r3, #34	; 0x22
10009170:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009172:	6822      	ldr	r2, [r4, #0]
10009174:	7a13      	ldrb	r3, [r2, #8]
10009176:	2110      	movs	r1, #16
10009178:	438b      	bics	r3, r1
1000917a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000917c:	0020      	movs	r0, r4
1000917e:	6863      	ldr	r3, [r4, #4]
10009180:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009182:	06ab      	lsls	r3, r5, #26
10009184:	d50a      	bpl.n	1000919c <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009186:	2321      	movs	r3, #33	; 0x21
10009188:	5ce3      	ldrb	r3, [r4, r3]
1000918a:	079b      	lsls	r3, r3, #30
1000918c:	d506      	bpl.n	1000919c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000918e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009190:	5ce3      	ldrb	r3, [r4, r3]
10009192:	079b      	lsls	r3, r3, #30
10009194:	d502      	bpl.n	1000919c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009196:	68a3      	ldr	r3, [r4, #8]
10009198:	0020      	movs	r0, r4
1000919a:	4798      	blx	r3
		}

	}
}
1000919c:	bd70      	pop	{r4, r5, r6, pc}
1000919e:	46c0      	nop			; (mov r8, r8)
100091a0:	10012688 	.word	0x10012688

100091a4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
100091a4:	23e1      	movs	r3, #225	; 0xe1
100091a6:	025b      	lsls	r3, r3, #9
100091a8:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
100091aa:	2300      	movs	r3, #0
100091ac:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
100091ae:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
100091b0:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
100091b2:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
100091b4:	3302      	adds	r3, #2
100091b6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
100091b8:	2203      	movs	r2, #3
100091ba:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
100091bc:	3201      	adds	r2, #1
100091be:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
100091c0:	3201      	adds	r2, #1
100091c2:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
100091c4:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
100091c6:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
100091c8:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
100091ca:	6243      	str	r3, [r0, #36]	; 0x24
}
100091cc:	4770      	bx	lr
100091ce:	46c0      	nop			; (mov r8, r8)

100091d0 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100091d2:	464f      	mov	r7, r9
100091d4:	4646      	mov	r6, r8
100091d6:	b4c0      	push	{r6, r7}
100091d8:	0005      	movs	r5, r0
100091da:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
100091dc:	6001      	str	r1, [r0, #0]

	if (hw == UART0) {
100091de:	4b55      	ldr	r3, [pc, #340]	; (10009334 <uart_init+0x164>)
100091e0:	4299      	cmp	r1, r3
100091e2:	d118      	bne.n	10009216 <uart_init+0x46>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
100091e4:	2009      	movs	r0, #9
100091e6:	4c54      	ldr	r4, [pc, #336]	; (10009338 <uart_init+0x168>)
100091e8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
100091ea:	200a      	movs	r0, #10
100091ec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
100091ee:	2009      	movs	r0, #9
100091f0:	4c52      	ldr	r4, [pc, #328]	; (1000933c <uart_init+0x16c>)
100091f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
100091f4:	200a      	movs	r0, #10
100091f6:	47a0      	blx	r4
		_uart_instances[0] = module;
100091f8:	4b51      	ldr	r3, [pc, #324]	; (10009340 <uart_init+0x170>)
100091fa:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
100091fc:	4951      	ldr	r1, [pc, #324]	; (10009344 <uart_init+0x174>)
100091fe:	2010      	movs	r0, #16
10009200:	4c51      	ldr	r4, [pc, #324]	; (10009348 <uart_init+0x178>)
10009202:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009204:	4951      	ldr	r1, [pc, #324]	; (1000934c <uart_init+0x17c>)
10009206:	2011      	movs	r0, #17
10009208:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000920a:	4b51      	ldr	r3, [pc, #324]	; (10009350 <uart_init+0x180>)
1000920c:	2201      	movs	r2, #1
1000920e:	601a      	str	r2, [r3, #0]
10009210:	3201      	adds	r2, #1
10009212:	601a      	str	r2, [r3, #0]
10009214:	e01a      	b.n	1000924c <uart_init+0x7c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009216:	4b4f      	ldr	r3, [pc, #316]	; (10009354 <uart_init+0x184>)
10009218:	4299      	cmp	r1, r3
1000921a:	d117      	bne.n	1000924c <uart_init+0x7c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000921c:	200b      	movs	r0, #11
1000921e:	4c46      	ldr	r4, [pc, #280]	; (10009338 <uart_init+0x168>)
10009220:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009222:	200c      	movs	r0, #12
10009224:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009226:	200b      	movs	r0, #11
10009228:	4c44      	ldr	r4, [pc, #272]	; (1000933c <uart_init+0x16c>)
1000922a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000922c:	200c      	movs	r0, #12
1000922e:	47a0      	blx	r4
		_uart_instances[1] = module;
10009230:	4b43      	ldr	r3, [pc, #268]	; (10009340 <uart_init+0x170>)
10009232:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009234:	4948      	ldr	r1, [pc, #288]	; (10009358 <uart_init+0x188>)
10009236:	2012      	movs	r0, #18
10009238:	4c43      	ldr	r4, [pc, #268]	; (10009348 <uart_init+0x178>)
1000923a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000923c:	4947      	ldr	r1, [pc, #284]	; (1000935c <uart_init+0x18c>)
1000923e:	2013      	movs	r0, #19
10009240:	47a0      	blx	r4
10009242:	4b43      	ldr	r3, [pc, #268]	; (10009350 <uart_init+0x180>)
10009244:	2204      	movs	r2, #4
10009246:	601a      	str	r2, [r3, #0]
10009248:	3204      	adds	r2, #4
1000924a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000924c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000924e:	2204      	movs	r2, #4
10009250:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009252:	2b00      	cmp	r3, #0
10009254:	d152      	bne.n	100092fc <uart_init+0x12c>
		index = 4;
	} else {
		index = 2;
10009256:	3302      	adds	r3, #2
10009258:	4698      	mov	r8, r3
1000925a:	e04f      	b.n	100092fc <uart_init+0x12c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000925c:	8a31      	ldrh	r1, [r6, #16]
1000925e:	ce01      	ldmia	r6!, {r0}
10009260:	b2c0      	uxtb	r0, r0
10009262:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009264:	3401      	adds	r4, #1
10009266:	b2e4      	uxtb	r4, r4
10009268:	4544      	cmp	r4, r8
1000926a:	d3f7      	bcc.n	1000925c <uart_init+0x8c>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000926c:	682b      	ldr	r3, [r5, #0]
1000926e:	7d1a      	ldrb	r2, [r3, #20]
10009270:	07d2      	lsls	r2, r2, #31
10009272:	d504      	bpl.n	1000927e <uart_init+0xae>
10009274:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009276:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009278:	7d1a      	ldrb	r2, [r3, #20]
1000927a:	420a      	tst	r2, r1
1000927c:	d1fb      	bne.n	10009276 <uart_init+0xa6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000927e:	2100      	movs	r1, #0
10009280:	2220      	movs	r2, #32
10009282:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009284:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009286:	1e59      	subs	r1, r3, #1
10009288:	418b      	sbcs	r3, r1
1000928a:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000928c:	793b      	ldrb	r3, [r7, #4]
1000928e:	797a      	ldrb	r2, [r7, #5]
10009290:	4313      	orrs	r3, r2
10009292:	430b      	orrs	r3, r1
	switch(config->parity) {
10009294:	79ba      	ldrb	r2, [r7, #6]
10009296:	2a02      	cmp	r2, #2
10009298:	d00d      	beq.n	100092b6 <uart_init+0xe6>
1000929a:	b2d1      	uxtb	r1, r2
1000929c:	2902      	cmp	r1, #2
1000929e:	d802      	bhi.n	100092a6 <uart_init+0xd6>
100092a0:	2a01      	cmp	r2, #1
100092a2:	d005      	beq.n	100092b0 <uart_init+0xe0>
100092a4:	e00f      	b.n	100092c6 <uart_init+0xf6>
100092a6:	2a03      	cmp	r2, #3
100092a8:	d008      	beq.n	100092bc <uart_init+0xec>
100092aa:	2a04      	cmp	r2, #4
100092ac:	d009      	beq.n	100092c2 <uart_init+0xf2>
100092ae:	e00a      	b.n	100092c6 <uart_init+0xf6>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100092b0:	2202      	movs	r2, #2
100092b2:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
100092b4:	e007      	b.n	100092c6 <uart_init+0xf6>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
100092b6:	2206      	movs	r2, #6
100092b8:	4313      	orrs	r3, r2
			break;
100092ba:	e004      	b.n	100092c6 <uart_init+0xf6>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
100092bc:	220a      	movs	r2, #10
100092be:	4313      	orrs	r3, r2
			break;
100092c0:	e001      	b.n	100092c6 <uart_init+0xf6>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
100092c2:	220e      	movs	r2, #14
100092c4:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
100092c6:	2220      	movs	r2, #32
100092c8:	6829      	ldr	r1, [r5, #0]
100092ca:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
100092cc:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
100092ce:	4b24      	ldr	r3, [pc, #144]	; (10009360 <uart_init+0x190>)
100092d0:	4798      	blx	r3
100092d2:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
100092d4:	0031      	movs	r1, r6
100092d6:	4b23      	ldr	r3, [pc, #140]	; (10009364 <uart_init+0x194>)
100092d8:	4798      	blx	r3
100092da:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
100092dc:	0400      	lsls	r0, r0, #16
100092de:	0c00      	lsrs	r0, r0, #16
100092e0:	4370      	muls	r0, r6
100092e2:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
100092e4:	0931      	lsrs	r1, r6, #4
100092e6:	4288      	cmp	r0, r1
100092e8:	d906      	bls.n	100092f8 <uart_init+0x128>
100092ea:	2300      	movs	r3, #0
		i++;
100092ec:	3301      	adds	r3, #1
100092ee:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
100092f0:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
100092f2:	4288      	cmp	r0, r1
100092f4:	d8fa      	bhi.n	100092ec <uart_init+0x11c>
100092f6:	e007      	b.n	10009308 <uart_init+0x138>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
100092f8:	2300      	movs	r3, #0
100092fa:	e005      	b.n	10009308 <uart_init+0x138>
100092fc:	003e      	movs	r6, r7
100092fe:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009300:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009302:	4b19      	ldr	r3, [pc, #100]	; (10009368 <uart_init+0x198>)
10009304:	4699      	mov	r9, r3
10009306:	e7a9      	b.n	1000925c <uart_init+0x8c>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009308:	2100      	movs	r1, #0
1000930a:	2028      	movs	r0, #40	; 0x28
1000930c:	682c      	ldr	r4, [r5, #0]
1000930e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009310:	3301      	adds	r3, #1
10009312:	071b      	lsls	r3, r3, #28
10009314:	0f5b      	lsrs	r3, r3, #29
10009316:	00d2      	lsls	r2, r2, #3
10009318:	4313      	orrs	r3, r2
1000931a:	b29b      	uxth	r3, r3
1000931c:	682a      	ldr	r2, [r5, #0]
1000931e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009320:	682b      	ldr	r3, [r5, #0]
10009322:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009324:	682b      	ldr	r3, [r5, #0]
10009326:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009328:	2000      	movs	r0, #0
1000932a:	bc0c      	pop	{r2, r3}
1000932c:	4690      	mov	r8, r2
1000932e:	4699      	mov	r9, r3
10009330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009332:	46c0      	nop			; (mov r8, r8)
10009334:	40004000 	.word	0x40004000
10009338:	10008b05 	.word	0x10008b05
1000933c:	100087a9 	.word	0x100087a9
10009340:	10012688 	.word	0x10012688
10009344:	10008f7d 	.word	0x10008f7d
10009348:	10008f6d 	.word	0x10008f6d
1000934c:	10009005 	.word	0x10009005
10009350:	e000e100 	.word	0xe000e100
10009354:	40005000 	.word	0x40005000
10009358:	10009091 	.word	0x10009091
1000935c:	10009119 	.word	0x10009119
10009360:	1000879d 	.word	0x1000879d
10009364:	1000e7d1 	.word	0x1000e7d1
10009368:	10008421 	.word	0x10008421

1000936c <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000936c:	6802      	ldr	r2, [r0, #0]
1000936e:	2001      	movs	r0, #1
10009370:	7913      	ldrb	r3, [r2, #4]
10009372:	4203      	tst	r3, r0
10009374:	d0fc      	beq.n	10009370 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009376:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009378:	2000      	movs	r0, #0
1000937a:	4770      	bx	lr

1000937c <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000937c:	6802      	ldr	r2, [r0, #0]
1000937e:	2001      	movs	r0, #1
10009380:	7d13      	ldrb	r3, [r2, #20]
10009382:	4203      	tst	r3, r0
10009384:	d0fc      	beq.n	10009380 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009386:	7c13      	ldrb	r3, [r2, #16]
10009388:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000938a:	2000      	movs	r0, #0
1000938c:	4770      	bx	lr
1000938e:	46c0      	nop			; (mov r8, r8)

10009390 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009390:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009392:	2a00      	cmp	r2, #0
10009394:	d00d      	beq.n	100093b2 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009396:	330b      	adds	r3, #11
10009398:	5cc3      	ldrb	r3, [r0, r3]
1000939a:	b2db      	uxtb	r3, r3
1000939c:	2b05      	cmp	r3, #5
1000939e:	d008      	beq.n	100093b2 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
100093a0:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
100093a2:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
100093a4:	2205      	movs	r2, #5
100093a6:	2322      	movs	r3, #34	; 0x22
100093a8:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
100093aa:	6803      	ldr	r3, [r0, #0]
100093ac:	3a04      	subs	r2, #4
100093ae:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
100093b0:	2300      	movs	r3, #0
}
100093b2:	0018      	movs	r0, r3
100093b4:	4770      	bx	lr
100093b6:	46c0      	nop			; (mov r8, r8)

100093b8 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100093b8:	0093      	lsls	r3, r2, #2
100093ba:	18c3      	adds	r3, r0, r3
100093bc:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100093be:	2120      	movs	r1, #32
100093c0:	2301      	movs	r3, #1
100093c2:	4093      	lsls	r3, r2
100093c4:	5c42      	ldrb	r2, [r0, r1]
100093c6:	4313      	orrs	r3, r2
100093c8:	5443      	strb	r3, [r0, r1]
}
100093ca:	4770      	bx	lr

100093cc <uart_unregister_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
100093cc:	008b      	lsls	r3, r1, #2
100093ce:	18c3      	adds	r3, r0, r3
100093d0:	2200      	movs	r2, #0
100093d2:	605a      	str	r2, [r3, #4]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
100093d4:	3201      	adds	r2, #1
100093d6:	408a      	lsls	r2, r1
100093d8:	2120      	movs	r1, #32
100093da:	5c43      	ldrb	r3, [r0, r1]
100093dc:	4393      	bics	r3, r2
100093de:	5443      	strb	r3, [r0, r1]
}
100093e0:	4770      	bx	lr
100093e2:	46c0      	nop			; (mov r8, r8)

100093e4 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
100093e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
100093e6:	2221      	movs	r2, #33	; 0x21
100093e8:	2301      	movs	r3, #1
100093ea:	408b      	lsls	r3, r1
100093ec:	5c84      	ldrb	r4, [r0, r2]
100093ee:	4323      	orrs	r3, r4
100093f0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
100093f2:	2901      	cmp	r1, #1
100093f4:	d104      	bne.n	10009400 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100093f6:	6802      	ldr	r2, [r0, #0]
100093f8:	7a11      	ldrb	r1, [r2, #8]
100093fa:	2320      	movs	r3, #32
100093fc:	430b      	orrs	r3, r1
100093fe:	7213      	strb	r3, [r2, #8]
	}
}
10009400:	bd10      	pop	{r4, pc}
10009402:	46c0      	nop			; (mov r8, r8)

10009404 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009404:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009406:	2201      	movs	r2, #1
10009408:	408a      	lsls	r2, r1
1000940a:	2421      	movs	r4, #33	; 0x21
1000940c:	5d03      	ldrb	r3, [r0, r4]
1000940e:	4393      	bics	r3, r2
10009410:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009412:	2901      	cmp	r1, #1
10009414:	d104      	bne.n	10009420 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009416:	6802      	ldr	r2, [r0, #0]
10009418:	7a13      	ldrb	r3, [r2, #8]
1000941a:	311f      	adds	r1, #31
1000941c:	438b      	bics	r3, r1
1000941e:	7213      	strb	r3, [r2, #8]
	}

}
10009420:	bd10      	pop	{r4, pc}
10009422:	46c0      	nop			; (mov r8, r8)

10009424 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009424:	b5f0      	push	{r4, r5, r6, r7, lr}
10009426:	4647      	mov	r7, r8
10009428:	b480      	push	{r7}
1000942a:	000c      	movs	r4, r1
1000942c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000942e:	2800      	cmp	r0, #0
10009430:	d10d      	bne.n	1000944e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009432:	2a00      	cmp	r2, #0
10009434:	dd0e      	ble.n	10009454 <_read+0x30>
10009436:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009438:	4e08      	ldr	r6, [pc, #32]	; (1000945c <_read+0x38>)
1000943a:	4d09      	ldr	r5, [pc, #36]	; (10009460 <_read+0x3c>)
1000943c:	6830      	ldr	r0, [r6, #0]
1000943e:	0021      	movs	r1, r4
10009440:	682b      	ldr	r3, [r5, #0]
10009442:	4798      	blx	r3
		ptr++;
10009444:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009446:	42a7      	cmp	r7, r4
10009448:	d1f8      	bne.n	1000943c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000944a:	4640      	mov	r0, r8
1000944c:	e003      	b.n	10009456 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000944e:	2001      	movs	r0, #1
10009450:	4240      	negs	r0, r0
10009452:	e000      	b.n	10009456 <_read+0x32>
	}

	for (; len > 0; --len) {
10009454:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009456:	bc04      	pop	{r2}
10009458:	4690      	mov	r8, r2
1000945a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000945c:	10012698 	.word	0x10012698
10009460:	10012690 	.word	0x10012690

10009464 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009464:	b5f0      	push	{r4, r5, r6, r7, lr}
10009466:	4647      	mov	r7, r8
10009468:	b480      	push	{r7}
1000946a:	000e      	movs	r6, r1
1000946c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000946e:	3801      	subs	r0, #1
10009470:	2802      	cmp	r0, #2
10009472:	d811      	bhi.n	10009498 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009474:	2a00      	cmp	r2, #0
10009476:	d012      	beq.n	1000949e <_write+0x3a>
10009478:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000947a:	4b0c      	ldr	r3, [pc, #48]	; (100094ac <_write+0x48>)
1000947c:	4698      	mov	r8, r3
1000947e:	4f0c      	ldr	r7, [pc, #48]	; (100094b0 <_write+0x4c>)
10009480:	4643      	mov	r3, r8
10009482:	6818      	ldr	r0, [r3, #0]
10009484:	5d31      	ldrb	r1, [r6, r4]
10009486:	683b      	ldr	r3, [r7, #0]
10009488:	4798      	blx	r3
1000948a:	2800      	cmp	r0, #0
1000948c:	db09      	blt.n	100094a2 <_write+0x3e>
			return -1;
		}
		++nChars;
1000948e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009490:	42a5      	cmp	r5, r4
10009492:	d1f5      	bne.n	10009480 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009494:	0020      	movs	r0, r4
10009496:	e006      	b.n	100094a6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009498:	2001      	movs	r0, #1
1000949a:	4240      	negs	r0, r0
1000949c:	e003      	b.n	100094a6 <_write+0x42>
	}

	for (; len != 0; --len) {
1000949e:	2000      	movs	r0, #0
100094a0:	e001      	b.n	100094a6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100094a2:	2001      	movs	r0, #1
100094a4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100094a6:	bc04      	pop	{r2}
100094a8:	4690      	mov	r8, r2
100094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100094ac:	10012698 	.word	0x10012698
100094b0:	10012694 	.word	0x10012694

100094b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100094b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100094b6:	4a06      	ldr	r2, [pc, #24]	; (100094d0 <_sbrk+0x1c>)
100094b8:	6812      	ldr	r2, [r2, #0]
100094ba:	2a00      	cmp	r2, #0
100094bc:	d102      	bne.n	100094c4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100094be:	4905      	ldr	r1, [pc, #20]	; (100094d4 <_sbrk+0x20>)
100094c0:	4a03      	ldr	r2, [pc, #12]	; (100094d0 <_sbrk+0x1c>)
100094c2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100094c4:	4a02      	ldr	r2, [pc, #8]	; (100094d0 <_sbrk+0x1c>)
100094c6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100094c8:	18c3      	adds	r3, r0, r3
100094ca:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100094cc:	4770      	bx	lr
100094ce:	46c0      	nop			; (mov r8, r8)
100094d0:	100123a4 	.word	0x100123a4
100094d4:	10014218 	.word	0x10014218

100094d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
100094d8:	2001      	movs	r0, #1
100094da:	4240      	negs	r0, r0
100094dc:	4770      	bx	lr
100094de:	46c0      	nop			; (mov r8, r8)

100094e0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
100094e0:	2380      	movs	r3, #128	; 0x80
100094e2:	019b      	lsls	r3, r3, #6
100094e4:	604b      	str	r3, [r1, #4]

	return 0;
}
100094e6:	2000      	movs	r0, #0
100094e8:	4770      	bx	lr
100094ea:	46c0      	nop			; (mov r8, r8)

100094ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
100094ec:	2001      	movs	r0, #1
100094ee:	4770      	bx	lr

100094f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100094f0:	2000      	movs	r0, #0
100094f2:	4770      	bx	lr

100094f4 <pxp_monitor_connect_request>:
* @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_connect_request(at_ble_scan_info_t *scan_buffer,
uint8_t index)
{
100094f4:	b510      	push	{r4, lr}
	memcpy((uint8_t *)&pxp_reporter_address,
100094f6:	4c13      	ldr	r4, [pc, #76]	; (10009544 <pxp_monitor_connect_request+0x50>)
100094f8:	008b      	lsls	r3, r1, #2
100094fa:	185b      	adds	r3, r3, r1
100094fc:	00db      	lsls	r3, r3, #3
100094fe:	1859      	adds	r1, r3, r1
10009500:	1841      	adds	r1, r0, r1
10009502:	3101      	adds	r1, #1
10009504:	2207      	movs	r2, #7
10009506:	0020      	movs	r0, r4
10009508:	4b0f      	ldr	r3, [pc, #60]	; (10009548 <pxp_monitor_connect_request+0x54>)
1000950a:	4798      	blx	r3
	(uint8_t *)&scan_buffer[index].dev_addr,
	sizeof(at_ble_addr_t));

	if (gap_dev_connect(&pxp_reporter_address) == AT_BLE_SUCCESS) {
1000950c:	0020      	movs	r0, r4
1000950e:	4b0f      	ldr	r3, [pc, #60]	; (1000954c <pxp_monitor_connect_request+0x58>)
10009510:	4798      	blx	r3
10009512:	1e04      	subs	r4, r0, #0
10009514:	d10d      	bne.n	10009532 <pxp_monitor_connect_request+0x3e>
		DBG_LOG("PXP Connect request sent");
10009516:	480e      	ldr	r0, [pc, #56]	; (10009550 <pxp_monitor_connect_request+0x5c>)
10009518:	4b0e      	ldr	r3, [pc, #56]	; (10009554 <pxp_monitor_connect_request+0x60>)
1000951a:	4798      	blx	r3
1000951c:	480e      	ldr	r0, [pc, #56]	; (10009558 <pxp_monitor_connect_request+0x64>)
1000951e:	4b0f      	ldr	r3, [pc, #60]	; (1000955c <pxp_monitor_connect_request+0x68>)
10009520:	4798      	blx	r3
		pxp_connect_request_flag = PXP_DEV_CONNECTING;
10009522:	2201      	movs	r2, #1
10009524:	4b0e      	ldr	r3, [pc, #56]	; (10009560 <pxp_monitor_connect_request+0x6c>)
10009526:	701a      	strb	r2, [r3, #0]
		hw_timer_start_func_cb(PXP_CONNECT_REQ_INTERVAL);
10009528:	4b0e      	ldr	r3, [pc, #56]	; (10009564 <pxp_monitor_connect_request+0x70>)
1000952a:	681b      	ldr	r3, [r3, #0]
1000952c:	2014      	movs	r0, #20
1000952e:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10009530:	e006      	b.n	10009540 <pxp_monitor_connect_request+0x4c>
	}
    else {
		DBG_LOG("PXP Connect request send failed");
10009532:	4807      	ldr	r0, [pc, #28]	; (10009550 <pxp_monitor_connect_request+0x5c>)
10009534:	4b07      	ldr	r3, [pc, #28]	; (10009554 <pxp_monitor_connect_request+0x60>)
10009536:	4798      	blx	r3
10009538:	480b      	ldr	r0, [pc, #44]	; (10009568 <pxp_monitor_connect_request+0x74>)
1000953a:	4b08      	ldr	r3, [pc, #32]	; (1000955c <pxp_monitor_connect_request+0x68>)
1000953c:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
1000953e:	24e2      	movs	r4, #226	; 0xe2
}
10009540:	0020      	movs	r0, r4
10009542:	bd10      	pop	{r4, pc}
10009544:	100126b8 	.word	0x100126b8
10009548:	1000f8db 	.word	0x1000f8db
1000954c:	1000a715 	.word	0x1000a715
10009550:	10010ce8 	.word	0x10010ce8
10009554:	1000fa1d 	.word	0x1000fa1d
10009558:	10010fec 	.word	0x10010fec
1000955c:	1000f8fd 	.word	0x1000f8fd
10009560:	100123ac 	.word	0x100123ac
10009564:	100123b0 	.word	0x100123b0
10009568:	10011008 	.word	0x10011008

1000956c <register_hw_timer_start_func_cb>:
*
* @return none.
*/
void register_hw_timer_start_func_cb(hw_timer_start_func_cb_t timer_start_fn)
{
	hw_timer_start_func_cb = timer_start_fn;
1000956c:	4b01      	ldr	r3, [pc, #4]	; (10009574 <register_hw_timer_start_func_cb+0x8>)
1000956e:	6018      	str	r0, [r3, #0]
}
10009570:	4770      	bx	lr
10009572:	46c0      	nop			; (mov r8, r8)
10009574:	100123b0 	.word	0x100123b0

10009578 <register_hw_timer_stop_func_cb>:
*
* @return none.
*/
void register_hw_timer_stop_func_cb(hw_timer_stop_func_cb_t timer_stop_fn)
{
	hw_timer_stop_func_cb = timer_stop_fn;
10009578:	4b01      	ldr	r3, [pc, #4]	; (10009580 <register_hw_timer_stop_func_cb+0x8>)
1000957a:	6018      	str	r0, [r3, #0]
}
1000957c:	4770      	bx	lr
1000957e:	46c0      	nop			; (mov r8, r8)
10009580:	100123a8 	.word	0x100123a8

10009584 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
10009584:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
10009586:	4804      	ldr	r0, [pc, #16]	; (10009598 <ble_undefined_event_handler+0x14>)
10009588:	4b04      	ldr	r3, [pc, #16]	; (1000959c <ble_undefined_event_handler+0x18>)
1000958a:	4798      	blx	r3
1000958c:	4804      	ldr	r0, [pc, #16]	; (100095a0 <ble_undefined_event_handler+0x1c>)
1000958e:	4b05      	ldr	r3, [pc, #20]	; (100095a4 <ble_undefined_event_handler+0x20>)
10009590:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009592:	2000      	movs	r0, #0
10009594:	bd10      	pop	{r4, pc}
10009596:	46c0      	nop			; (mov r8, r8)
10009598:	10010ce8 	.word	0x10010ce8
1000959c:	1000fa1d 	.word	0x1000fa1d
100095a0:	10011370 	.word	0x10011370
100095a4:	1000f8fd 	.word	0x1000f8fd

100095a8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
100095a8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
100095aa:	7800      	ldrb	r0, [r0, #0]
100095ac:	2800      	cmp	r0, #0
100095ae:	d006      	beq.n	100095be <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
100095b0:	4803      	ldr	r0, [pc, #12]	; (100095c0 <ble_scan_report_handler+0x18>)
100095b2:	4b04      	ldr	r3, [pc, #16]	; (100095c4 <ble_scan_report_handler+0x1c>)
100095b4:	4798      	blx	r3
100095b6:	4804      	ldr	r0, [pc, #16]	; (100095c8 <ble_scan_report_handler+0x20>)
100095b8:	4b04      	ldr	r3, [pc, #16]	; (100095cc <ble_scan_report_handler+0x24>)
100095ba:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100095bc:	20e2      	movs	r0, #226	; 0xe2
}
100095be:	bd10      	pop	{r4, pc}
100095c0:	10010ce8 	.word	0x10010ce8
100095c4:	1000fa1d 	.word	0x1000fa1d
100095c8:	1001138c 	.word	0x1001138c
100095cc:	1000f8fd 	.word	0x1000f8fd

100095d0 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
100095d0:	b510      	push	{r4, lr}
100095d2:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
100095d4:	4804      	ldr	r0, [pc, #16]	; (100095e8 <ble_mtu_changed_indication_handler+0x18>)
100095d6:	4b05      	ldr	r3, [pc, #20]	; (100095ec <ble_mtu_changed_indication_handler+0x1c>)
100095d8:	4798      	blx	r3
100095da:	8862      	ldrh	r2, [r4, #2]
100095dc:	8821      	ldrh	r1, [r4, #0]
100095de:	4804      	ldr	r0, [pc, #16]	; (100095f0 <ble_mtu_changed_indication_handler+0x20>)
100095e0:	4b04      	ldr	r3, [pc, #16]	; (100095f4 <ble_mtu_changed_indication_handler+0x24>)
100095e2:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
100095e4:	2000      	movs	r0, #0
100095e6:	bd10      	pop	{r4, pc}
100095e8:	10010ce8 	.word	0x10010ce8
100095ec:	1000fa1d 	.word	0x1000fa1d
100095f0:	100113a0 	.word	0x100113a0
100095f4:	1000f8fd 	.word	0x1000f8fd

100095f8 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
100095f8:	b570      	push	{r4, r5, r6, lr}
100095fa:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100095fc:	78c5      	ldrb	r5, [r0, #3]
100095fe:	2d00      	cmp	r5, #0
10009600:	d108      	bne.n	10009614 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
10009602:	480a      	ldr	r0, [pc, #40]	; (1000962c <ble_mtu_changed_cmd_complete_handler+0x34>)
10009604:	4b0a      	ldr	r3, [pc, #40]	; (10009630 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009606:	4798      	blx	r3
10009608:	78a2      	ldrb	r2, [r4, #2]
1000960a:	8821      	ldrh	r1, [r4, #0]
1000960c:	4809      	ldr	r0, [pc, #36]	; (10009634 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000960e:	4b0a      	ldr	r3, [pc, #40]	; (10009638 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009610:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009612:	e008      	b.n	10009626 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009614:	4805      	ldr	r0, [pc, #20]	; (1000962c <ble_mtu_changed_cmd_complete_handler+0x34>)
10009616:	4b06      	ldr	r3, [pc, #24]	; (10009630 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009618:	4798      	blx	r3
1000961a:	78a2      	ldrb	r2, [r4, #2]
1000961c:	8821      	ldrh	r1, [r4, #0]
1000961e:	4807      	ldr	r0, [pc, #28]	; (1000963c <ble_mtu_changed_cmd_complete_handler+0x44>)
10009620:	4b05      	ldr	r3, [pc, #20]	; (10009638 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009622:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009624:	25e2      	movs	r5, #226	; 0xe2
}
10009626:	0028      	movs	r0, r5
10009628:	bd70      	pop	{r4, r5, r6, pc}
1000962a:	46c0      	nop			; (mov r8, r8)
1000962c:	10010ce8 	.word	0x10010ce8
10009630:	1000fa1d 	.word	0x1000fa1d
10009634:	100113d8 	.word	0x100113d8
10009638:	1000f8fd 	.word	0x1000f8fd
1000963c:	10011408 	.word	0x10011408

10009640 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
10009640:	b570      	push	{r4, r5, r6, lr}
10009642:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009644:	78c5      	ldrb	r5, [r0, #3]
10009646:	2d00      	cmp	r5, #0
10009648:	d108      	bne.n	1000965c <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000964a:	480a      	ldr	r0, [pc, #40]	; (10009674 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000964c:	4b0a      	ldr	r3, [pc, #40]	; (10009678 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000964e:	4798      	blx	r3
10009650:	78a2      	ldrb	r2, [r4, #2]
10009652:	8821      	ldrh	r1, [r4, #0]
10009654:	4809      	ldr	r0, [pc, #36]	; (1000967c <ble_characteristic_write_cmd_complete_handler+0x3c>)
10009656:	4b0a      	ldr	r3, [pc, #40]	; (10009680 <ble_characteristic_write_cmd_complete_handler+0x40>)
10009658:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000965a:	e008      	b.n	1000966e <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000965c:	4805      	ldr	r0, [pc, #20]	; (10009674 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000965e:	4b06      	ldr	r3, [pc, #24]	; (10009678 <ble_characteristic_write_cmd_complete_handler+0x38>)
10009660:	4798      	blx	r3
10009662:	78a2      	ldrb	r2, [r4, #2]
10009664:	8821      	ldrh	r1, [r4, #0]
10009666:	4807      	ldr	r0, [pc, #28]	; (10009684 <ble_characteristic_write_cmd_complete_handler+0x44>)
10009668:	4b05      	ldr	r3, [pc, #20]	; (10009680 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000966a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000966c:	25e2      	movs	r5, #226	; 0xe2
}
1000966e:	0028      	movs	r0, r5
10009670:	bd70      	pop	{r4, r5, r6, pc}
10009672:	46c0      	nop			; (mov r8, r8)
10009674:	10010ce8 	.word	0x10010ce8
10009678:	1000fa1d 	.word	0x1000fa1d
1000967c:	10011440 	.word	0x10011440
10009680:	1000f8fd 	.word	0x1000f8fd
10009684:	1001147c 	.word	0x1001147c

10009688 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000968a:	0006      	movs	r6, r0
1000968c:	4c1d      	ldr	r4, [pc, #116]	; (10009704 <ble_disconnected_state_handler+0x7c>)
1000968e:	239b      	movs	r3, #155	; 0x9b
10009690:	009b      	lsls	r3, r3, #2
10009692:	18e7      	adds	r7, r4, r3
10009694:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009696:	0023      	movs	r3, r4
10009698:	3b56      	subs	r3, #86	; 0x56
1000969a:	881a      	ldrh	r2, [r3, #0]
1000969c:	8833      	ldrh	r3, [r6, #0]
1000969e:	429a      	cmp	r2, r3
100096a0:	d122      	bne.n	100096e8 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100096a2:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
100096a4:	2b05      	cmp	r3, #5
100096a6:	d001      	beq.n	100096ac <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100096a8:	2b08      	cmp	r3, #8
100096aa:	d102      	bne.n	100096b2 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
100096ac:	2301      	movs	r3, #1
100096ae:	702b      	strb	r3, [r5, #0]
100096b0:	e01a      	b.n	100096e8 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
100096b2:	2b07      	cmp	r3, #7
100096b4:	d80f      	bhi.n	100096d6 <ble_disconnected_state_handler+0x4e>
100096b6:	009b      	lsls	r3, r3, #2
100096b8:	4a13      	ldr	r2, [pc, #76]	; (10009708 <ble_disconnected_state_handler+0x80>)
100096ba:	58d3      	ldr	r3, [r2, r3]
100096bc:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100096be:	2300      	movs	r3, #0
100096c0:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
100096c2:	4b12      	ldr	r3, [pc, #72]	; (1000970c <ble_disconnected_state_handler+0x84>)
100096c4:	781b      	ldrb	r3, [r3, #0]
100096c6:	2b00      	cmp	r3, #0
100096c8:	d00e      	beq.n	100096e8 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
100096ca:	4a10      	ldr	r2, [pc, #64]	; (1000970c <ble_disconnected_state_handler+0x84>)
100096cc:	7813      	ldrb	r3, [r2, #0]
100096ce:	3b01      	subs	r3, #1
100096d0:	b2db      	uxtb	r3, r3
100096d2:	7013      	strb	r3, [r2, #0]
100096d4:	e008      	b.n	100096e8 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
100096d6:	480e      	ldr	r0, [pc, #56]	; (10009710 <ble_disconnected_state_handler+0x88>)
100096d8:	4b0e      	ldr	r3, [pc, #56]	; (10009714 <ble_disconnected_state_handler+0x8c>)
100096da:	4798      	blx	r3
100096dc:	7829      	ldrb	r1, [r5, #0]
100096de:	480e      	ldr	r0, [pc, #56]	; (10009718 <ble_disconnected_state_handler+0x90>)
100096e0:	4b0e      	ldr	r3, [pc, #56]	; (1000971c <ble_disconnected_state_handler+0x94>)
100096e2:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100096e4:	2300      	movs	r3, #0
100096e6:	702b      	strb	r3, [r5, #0]
100096e8:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100096ea:	42bc      	cmp	r4, r7
100096ec:	d1d2      	bne.n	10009694 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
100096ee:	4808      	ldr	r0, [pc, #32]	; (10009710 <ble_disconnected_state_handler+0x88>)
100096f0:	4b08      	ldr	r3, [pc, #32]	; (10009714 <ble_disconnected_state_handler+0x8c>)
100096f2:	4798      	blx	r3
100096f4:	8832      	ldrh	r2, [r6, #0]
100096f6:	78b1      	ldrb	r1, [r6, #2]
100096f8:	4809      	ldr	r0, [pc, #36]	; (10009720 <ble_disconnected_state_handler+0x98>)
100096fa:	4b08      	ldr	r3, [pc, #32]	; (1000971c <ble_disconnected_state_handler+0x94>)
100096fc:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100096fe:	2000      	movs	r0, #0
10009700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009702:	46c0      	nop			; (mov r8, r8)
10009704:	1001273a 	.word	0x1001273a
10009708:	10011200 	.word	0x10011200
1000970c:	10012948 	.word	0x10012948
10009710:	10010ce8 	.word	0x10010ce8
10009714:	1000fa1d 	.word	0x1000fa1d
10009718:	100114b8 	.word	0x100114b8
1000971c:	1000f8fd 	.word	0x1000f8fd
10009720:	100114d0 	.word	0x100114d0

10009724 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
10009724:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
10009726:	4804      	ldr	r0, [pc, #16]	; (10009738 <ble_conn_param_update+0x14>)
10009728:	4b04      	ldr	r3, [pc, #16]	; (1000973c <ble_conn_param_update+0x18>)
1000972a:	4798      	blx	r3
1000972c:	4804      	ldr	r0, [pc, #16]	; (10009740 <ble_conn_param_update+0x1c>)
1000972e:	4b05      	ldr	r3, [pc, #20]	; (10009744 <ble_conn_param_update+0x20>)
10009730:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009732:	2000      	movs	r0, #0
10009734:	bd10      	pop	{r4, pc}
10009736:	46c0      	nop			; (mov r8, r8)
10009738:	10010ce8 	.word	0x10010ce8
1000973c:	1000fa1d 	.word	0x1000fa1d
10009740:	10011500 	.word	0x10011500
10009744:	1000f8fd 	.word	0x1000f8fd

10009748 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000974a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000974c:	8801      	ldrh	r1, [r0, #0]
1000974e:	4b28      	ldr	r3, [pc, #160]	; (100097f0 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009750:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009752:	891a      	ldrh	r2, [r3, #8]
10009754:	428a      	cmp	r2, r1
10009756:	d104      	bne.n	10009762 <ble_encryption_status_change_handler+0x1a>
10009758:	001a      	movs	r2, r3
1000975a:	325e      	adds	r2, #94	; 0x5e
1000975c:	7812      	ldrb	r2, [r2, #0]
1000975e:	2a06      	cmp	r2, #6
10009760:	d02e      	beq.n	100097c0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009762:	3401      	adds	r4, #1
10009764:	b2e4      	uxtb	r4, r4
10009766:	337c      	adds	r3, #124	; 0x7c
10009768:	2c05      	cmp	r4, #5
1000976a:	d1f2      	bne.n	10009752 <ble_encryption_status_change_handler+0xa>
1000976c:	e039      	b.n	100097e2 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000976e:	4920      	ldr	r1, [pc, #128]	; (100097f0 <ble_encryption_status_change_handler+0xa8>)
10009770:	0163      	lsls	r3, r4, #5
10009772:	1b1a      	subs	r2, r3, r4
10009774:	0092      	lsls	r2, r2, #2
10009776:	188a      	adds	r2, r1, r2
10009778:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000977a:	0014      	movs	r4, r2
1000977c:	345e      	adds	r4, #94	; 0x5e
1000977e:	2307      	movs	r3, #7
10009780:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009782:	481c      	ldr	r0, [pc, #112]	; (100097f4 <ble_encryption_status_change_handler+0xac>)
10009784:	4b1c      	ldr	r3, [pc, #112]	; (100097f8 <ble_encryption_status_change_handler+0xb0>)
10009786:	4798      	blx	r3
10009788:	481c      	ldr	r0, [pc, #112]	; (100097fc <ble_encryption_status_change_handler+0xb4>)
1000978a:	4b1d      	ldr	r3, [pc, #116]	; (10009800 <ble_encryption_status_change_handler+0xb8>)
1000978c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000978e:	25e2      	movs	r5, #226	; 0xe2
10009790:	e02b      	b.n	100097ea <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009792:	4818      	ldr	r0, [pc, #96]	; (100097f4 <ble_encryption_status_change_handler+0xac>)
10009794:	4b18      	ldr	r3, [pc, #96]	; (100097f8 <ble_encryption_status_change_handler+0xb0>)
10009796:	4798      	blx	r3
10009798:	481a      	ldr	r0, [pc, #104]	; (10009804 <ble_encryption_status_change_handler+0xbc>)
1000979a:	4b19      	ldr	r3, [pc, #100]	; (10009800 <ble_encryption_status_change_handler+0xb8>)
1000979c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000979e:	4914      	ldr	r1, [pc, #80]	; (100097f0 <ble_encryption_status_change_handler+0xa8>)
100097a0:	0163      	lsls	r3, r4, #5
100097a2:	1b1a      	subs	r2, r3, r4
100097a4:	0092      	lsls	r2, r2, #2
100097a6:	188a      	adds	r2, r1, r2
100097a8:	0010      	movs	r0, r2
100097aa:	305e      	adds	r0, #94	; 0x5e
100097ac:	2708      	movs	r7, #8
100097ae:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
100097b0:	78f0      	ldrb	r0, [r6, #3]
100097b2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
100097b4:	78b2      	ldrb	r2, [r6, #2]
100097b6:	1b1c      	subs	r4, r3, r4
100097b8:	00a4      	lsls	r4, r4, #2
100097ba:	190c      	adds	r4, r1, r4
100097bc:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
100097be:	e014      	b.n	100097ea <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
100097c0:	78b5      	ldrb	r5, [r6, #2]
100097c2:	2d00      	cmp	r5, #0
100097c4:	d0e5      	beq.n	10009792 <ble_encryption_status_change_handler+0x4a>
100097c6:	e7d2      	b.n	1000976e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
100097c8:	4e0a      	ldr	r6, [pc, #40]	; (100097f4 <ble_encryption_status_change_handler+0xac>)
100097ca:	0030      	movs	r0, r6
100097cc:	4d0a      	ldr	r5, [pc, #40]	; (100097f8 <ble_encryption_status_change_handler+0xb0>)
100097ce:	47a8      	blx	r5
100097d0:	480c      	ldr	r0, [pc, #48]	; (10009804 <ble_encryption_status_change_handler+0xbc>)
100097d2:	4c0b      	ldr	r4, [pc, #44]	; (10009800 <ble_encryption_status_change_handler+0xb8>)
100097d4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
100097d6:	0030      	movs	r0, r6
100097d8:	47a8      	blx	r5
100097da:	480b      	ldr	r0, [pc, #44]	; (10009808 <ble_encryption_status_change_handler+0xc0>)
100097dc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
100097de:	25e2      	movs	r5, #226	; 0xe2
100097e0:	e003      	b.n	100097ea <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
100097e2:	78b5      	ldrb	r5, [r6, #2]
100097e4:	2d00      	cmp	r5, #0
100097e6:	d1c2      	bne.n	1000976e <ble_encryption_status_change_handler+0x26>
100097e8:	e7ee      	b.n	100097c8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
100097ea:	0028      	movs	r0, r5
100097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100097ee:	46c0      	nop			; (mov r8, r8)
100097f0:	100126dc 	.word	0x100126dc
100097f4:	10010ce8 	.word	0x10010ce8
100097f8:	1000fa1d 	.word	0x1000fa1d
100097fc:	1001151c 	.word	0x1001151c
10009800:	1000f8fd 	.word	0x1000f8fd
10009804:	10011530 	.word	0x10011530
10009808:	10011554 	.word	0x10011554

1000980c <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000980c:	b530      	push	{r4, r5, lr}
1000980e:	b085      	sub	sp, #20
10009810:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009812:	4b1f      	ldr	r3, [pc, #124]	; (10009890 <ble_scan_info_handler+0x84>)
10009814:	781b      	ldrb	r3, [r3, #0]
10009816:	b2db      	uxtb	r3, r3
10009818:	2b13      	cmp	r3, #19
1000981a:	d824      	bhi.n	10009866 <ble_scan_info_handler+0x5a>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000981c:	4d1c      	ldr	r5, [pc, #112]	; (10009890 <ble_scan_info_handler+0x84>)
1000981e:	782b      	ldrb	r3, [r5, #0]
10009820:	b2db      	uxtb	r3, r3
10009822:	0098      	lsls	r0, r3, #2
10009824:	18c0      	adds	r0, r0, r3
10009826:	00c0      	lsls	r0, r0, #3
10009828:	18c3      	adds	r3, r0, r3
1000982a:	481a      	ldr	r0, [pc, #104]	; (10009894 <ble_scan_info_handler+0x88>)
1000982c:	1818      	adds	r0, r3, r0
1000982e:	2229      	movs	r2, #41	; 0x29
10009830:	0021      	movs	r1, r4
10009832:	4b19      	ldr	r3, [pc, #100]	; (10009898 <ble_scan_info_handler+0x8c>)
10009834:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009836:	4819      	ldr	r0, [pc, #100]	; (1000989c <ble_scan_info_handler+0x90>)
10009838:	4b19      	ldr	r3, [pc, #100]	; (100098a0 <ble_scan_info_handler+0x94>)
1000983a:	4798      	blx	r3
1000983c:	7829      	ldrb	r1, [r5, #0]
1000983e:	b2c9      	uxtb	r1, r1
10009840:	79a3      	ldrb	r3, [r4, #6]
10009842:	79e2      	ldrb	r2, [r4, #7]
10009844:	78a0      	ldrb	r0, [r4, #2]
10009846:	9003      	str	r0, [sp, #12]
10009848:	78e0      	ldrb	r0, [r4, #3]
1000984a:	9002      	str	r0, [sp, #8]
1000984c:	7920      	ldrb	r0, [r4, #4]
1000984e:	9001      	str	r0, [sp, #4]
10009850:	7960      	ldrb	r0, [r4, #5]
10009852:	9000      	str	r0, [sp, #0]
10009854:	4813      	ldr	r0, [pc, #76]	; (100098a4 <ble_scan_info_handler+0x98>)
10009856:	4c14      	ldr	r4, [pc, #80]	; (100098a8 <ble_scan_info_handler+0x9c>)
10009858:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000985a:	782b      	ldrb	r3, [r5, #0]
1000985c:	3301      	adds	r3, #1
1000985e:	b2db      	uxtb	r3, r3
10009860:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
10009862:	2300      	movs	r3, #0
10009864:	e011      	b.n	1000988a <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009866:	480d      	ldr	r0, [pc, #52]	; (1000989c <ble_scan_info_handler+0x90>)
10009868:	4b0d      	ldr	r3, [pc, #52]	; (100098a0 <ble_scan_info_handler+0x94>)
1000986a:	4798      	blx	r3
1000986c:	480f      	ldr	r0, [pc, #60]	; (100098ac <ble_scan_info_handler+0xa0>)
1000986e:	4b0e      	ldr	r3, [pc, #56]	; (100098a8 <ble_scan_info_handler+0x9c>)
10009870:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009872:	4b0f      	ldr	r3, [pc, #60]	; (100098b0 <ble_scan_info_handler+0xa4>)
10009874:	4798      	blx	r3
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
10009876:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009878:	2800      	cmp	r0, #0
1000987a:	d006      	beq.n	1000988a <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000987c:	4807      	ldr	r0, [pc, #28]	; (1000989c <ble_scan_info_handler+0x90>)
1000987e:	4b08      	ldr	r3, [pc, #32]	; (100098a0 <ble_scan_info_handler+0x94>)
10009880:	4798      	blx	r3
10009882:	480c      	ldr	r0, [pc, #48]	; (100098b4 <ble_scan_info_handler+0xa8>)
10009884:	4b08      	ldr	r3, [pc, #32]	; (100098a8 <ble_scan_info_handler+0x9c>)
10009886:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
10009888:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000988a:	0018      	movs	r0, r3
1000988c:	b005      	add	sp, #20
1000988e:	bd30      	pop	{r4, r5, pc}
10009890:	100123bc 	.word	0x100123bc
10009894:	100129b0 	.word	0x100129b0
10009898:	1000f8db 	.word	0x1000f8db
1000989c:	10010ce8 	.word	0x10010ce8
100098a0:	1000fa1d 	.word	0x1000fa1d
100098a4:	1001157c 	.word	0x1001157c
100098a8:	1000f8fd 	.word	0x1000f8fd
100098ac:	100115b8 	.word	0x100115b8
100098b0:	1000c7f5 	.word	0x1000c7f5
100098b4:	100115f0 	.word	0x100115f0

100098b8 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
100098b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100098ba:	4647      	mov	r7, r8
100098bc:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
100098be:	7803      	ldrb	r3, [r0, #0]
100098c0:	2b00      	cmp	r3, #0
100098c2:	d14d      	bne.n	10009960 <ble_resolv_rand_addr_handler+0xa8>
100098c4:	4d33      	ldr	r5, [pc, #204]	; (10009994 <ble_resolv_rand_addr_handler+0xdc>)
100098c6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
100098c8:	1c46      	adds	r6, r0, #1
100098ca:	4f33      	ldr	r7, [pc, #204]	; (10009998 <ble_resolv_rand_addr_handler+0xe0>)
100098cc:	2210      	movs	r2, #16
100098ce:	0029      	movs	r1, r5
100098d0:	0030      	movs	r0, r6
100098d2:	47b8      	blx	r7
100098d4:	2800      	cmp	r0, #0
100098d6:	d02c      	beq.n	10009932 <ble_resolv_rand_addr_handler+0x7a>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100098d8:	3401      	adds	r4, #1
100098da:	b2e4      	uxtb	r4, r4
100098dc:	357c      	adds	r5, #124	; 0x7c
100098de:	2c05      	cmp	r4, #5
100098e0:	d1f4      	bne.n	100098cc <ble_resolv_rand_addr_handler+0x14>
100098e2:	e03d      	b.n	10009960 <ble_resolv_rand_addr_handler+0xa8>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
100098e4:	001d      	movs	r5, r3
100098e6:	7811      	ldrb	r1, [r2, #0]
100098e8:	2900      	cmp	r1, #0
100098ea:	d11b      	bne.n	10009924 <ble_resolv_rand_addr_handler+0x6c>
100098ec:	e001      	b.n	100098f2 <ble_resolv_rand_addr_handler+0x3a>
100098ee:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100098f0:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
100098f2:	4b2a      	ldr	r3, [pc, #168]	; (1000999c <ble_resolv_rand_addr_handler+0xe4>)
100098f4:	4698      	mov	r8, r3
100098f6:	016e      	lsls	r6, r5, #5
100098f8:	1b77      	subs	r7, r6, r5
100098fa:	00bf      	lsls	r7, r7, #2
100098fc:	4447      	add	r7, r8
100098fe:	2212      	movs	r2, #18
10009900:	4927      	ldr	r1, [pc, #156]	; (100099a0 <ble_resolv_rand_addr_handler+0xe8>)
10009902:	0038      	movs	r0, r7
10009904:	4b27      	ldr	r3, [pc, #156]	; (100099a4 <ble_resolv_rand_addr_handler+0xec>)
10009906:	4798      	blx	r3
				ble_device_count++;
10009908:	4a27      	ldr	r2, [pc, #156]	; (100099a8 <ble_resolv_rand_addr_handler+0xf0>)
1000990a:	7813      	ldrb	r3, [r2, #0]
1000990c:	3301      	adds	r3, #1
1000990e:	b2db      	uxtb	r3, r3
10009910:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009912:	375e      	adds	r7, #94	; 0x5e
10009914:	2302      	movs	r3, #2
10009916:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009918:	1b75      	subs	r5, r6, r5
1000991a:	00ad      	lsls	r5, r5, #2
1000991c:	4445      	add	r5, r8
1000991e:	3308      	adds	r3, #8
10009920:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
10009922:	e02c      	b.n	1000997e <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009924:	3401      	adds	r4, #1
10009926:	b2e4      	uxtb	r4, r4
10009928:	3301      	adds	r3, #1
1000992a:	327c      	adds	r2, #124	; 0x7c
1000992c:	2c05      	cmp	r4, #5
1000992e:	d1d9      	bne.n	100098e4 <ble_resolv_rand_addr_handler+0x2c>
10009930:	e025      	b.n	1000997e <ble_resolv_rand_addr_handler+0xc6>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
10009932:	481e      	ldr	r0, [pc, #120]	; (100099ac <ble_resolv_rand_addr_handler+0xf4>)
10009934:	4b1e      	ldr	r3, [pc, #120]	; (100099b0 <ble_resolv_rand_addr_handler+0xf8>)
10009936:	4798      	blx	r3
10009938:	481e      	ldr	r0, [pc, #120]	; (100099b4 <ble_resolv_rand_addr_handler+0xfc>)
1000993a:	4b1f      	ldr	r3, [pc, #124]	; (100099b8 <ble_resolv_rand_addr_handler+0x100>)
1000993c:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000993e:	4817      	ldr	r0, [pc, #92]	; (1000999c <ble_resolv_rand_addr_handler+0xe4>)
10009940:	0163      	lsls	r3, r4, #5
10009942:	1b1a      	subs	r2, r3, r4
10009944:	0092      	lsls	r2, r2, #2
10009946:	1882      	adds	r2, r0, r2
10009948:	0011      	movs	r1, r2
1000994a:	315e      	adds	r1, #94	; 0x5e
1000994c:	2502      	movs	r5, #2
1000994e:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009950:	210a      	movs	r1, #10
10009952:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10009954:	0010      	movs	r0, r2
10009956:	2212      	movs	r2, #18
10009958:	4911      	ldr	r1, [pc, #68]	; (100099a0 <ble_resolv_rand_addr_handler+0xe8>)
1000995a:	4b12      	ldr	r3, [pc, #72]	; (100099a4 <ble_resolv_rand_addr_handler+0xec>)
1000995c:	4798      	blx	r3
1000995e:	e00e      	b.n	1000997e <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
10009960:	4812      	ldr	r0, [pc, #72]	; (100099ac <ble_resolv_rand_addr_handler+0xf4>)
10009962:	4b13      	ldr	r3, [pc, #76]	; (100099b0 <ble_resolv_rand_addr_handler+0xf8>)
10009964:	4798      	blx	r3
10009966:	4815      	ldr	r0, [pc, #84]	; (100099bc <ble_resolv_rand_addr_handler+0x104>)
10009968:	4b13      	ldr	r3, [pc, #76]	; (100099b8 <ble_resolv_rand_addr_handler+0x100>)
1000996a:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000996c:	235e      	movs	r3, #94	; 0x5e
1000996e:	4a0b      	ldr	r2, [pc, #44]	; (1000999c <ble_resolv_rand_addr_handler+0xe4>)
10009970:	5cd3      	ldrb	r3, [r2, r3]
10009972:	2b00      	cmp	r3, #0
10009974:	d0bb      	beq.n	100098ee <ble_resolv_rand_addr_handler+0x36>
10009976:	4a12      	ldr	r2, [pc, #72]	; (100099c0 <ble_resolv_rand_addr_handler+0x108>)
10009978:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000997a:	2401      	movs	r4, #1
1000997c:	e7b2      	b.n	100098e4 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000997e:	480b      	ldr	r0, [pc, #44]	; (100099ac <ble_resolv_rand_addr_handler+0xf4>)
10009980:	4b0b      	ldr	r3, [pc, #44]	; (100099b0 <ble_resolv_rand_addr_handler+0xf8>)
10009982:	4798      	blx	r3
10009984:	0021      	movs	r1, r4
10009986:	480f      	ldr	r0, [pc, #60]	; (100099c4 <ble_resolv_rand_addr_handler+0x10c>)
10009988:	4b0b      	ldr	r3, [pc, #44]	; (100099b8 <ble_resolv_rand_addr_handler+0x100>)
1000998a:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000998c:	2000      	movs	r0, #0
1000998e:	bc04      	pop	{r2}
10009990:	4690      	mov	r8, r2
10009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009994:	10012722 	.word	0x10012722
10009998:	1000f8bd 	.word	0x1000f8bd
1000999c:	100126dc 	.word	0x100126dc
100099a0:	10012988 	.word	0x10012988
100099a4:	1000f8db 	.word	0x1000f8db
100099a8:	10012948 	.word	0x10012948
100099ac:	10010ce8 	.word	0x10010ce8
100099b0:	1000fa1d 	.word	0x1000fa1d
100099b4:	10011618 	.word	0x10011618
100099b8:	1000f8fd 	.word	0x1000f8fd
100099bc:	10011630 	.word	0x10011630
100099c0:	100127b6 	.word	0x100127b6
100099c4:	10011608 	.word	0x10011608

100099c8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
100099c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100099ca:	465f      	mov	r7, fp
100099cc:	464e      	mov	r6, r9
100099ce:	4645      	mov	r5, r8
100099d0:	b4e0      	push	{r5, r6, r7}
100099d2:	b09a      	sub	sp, #104	; 0x68
100099d4:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
100099d6:	7a86      	ldrb	r6, [r0, #10]
100099d8:	2e00      	cmp	r6, #0
100099da:	d000      	beq.n	100099de <ble_connected_state_handler+0x16>
100099dc:	e0bc      	b.n	10009b58 <ble_connected_state_handler+0x190>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
100099de:	4870      	ldr	r0, [pc, #448]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
100099e0:	4f70      	ldr	r7, [pc, #448]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
100099e2:	47b8      	blx	r7
100099e4:	792b      	ldrb	r3, [r5, #4]
100099e6:	796a      	ldrb	r2, [r5, #5]
100099e8:	79a9      	ldrb	r1, [r5, #6]
100099ea:	7868      	ldrb	r0, [r5, #1]
100099ec:	9002      	str	r0, [sp, #8]
100099ee:	78a8      	ldrb	r0, [r5, #2]
100099f0:	9001      	str	r0, [sp, #4]
100099f2:	78e8      	ldrb	r0, [r5, #3]
100099f4:	9000      	str	r0, [sp, #0]
100099f6:	486c      	ldr	r0, [pc, #432]	; (10009ba8 <ble_connected_state_handler+0x1e0>)
100099f8:	4c6c      	ldr	r4, [pc, #432]	; (10009bac <ble_connected_state_handler+0x1e4>)
100099fa:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
100099fc:	4868      	ldr	r0, [pc, #416]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
100099fe:	47b8      	blx	r7
10009a00:	8929      	ldrh	r1, [r5, #8]
10009a02:	486b      	ldr	r0, [pc, #428]	; (10009bb0 <ble_connected_state_handler+0x1e8>)
10009a04:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
10009a06:	2212      	movs	r2, #18
10009a08:	0029      	movs	r1, r5
10009a0a:	486a      	ldr	r0, [pc, #424]	; (10009bb4 <ble_connected_state_handler+0x1ec>)
10009a0c:	4b6a      	ldr	r3, [pc, #424]	; (10009bb8 <ble_connected_state_handler+0x1f0>)
10009a0e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009a10:	9504      	str	r5, [sp, #16]
10009a12:	2207      	movs	r2, #7
10009a14:	0029      	movs	r1, r5
10009a16:	4869      	ldr	r0, [pc, #420]	; (10009bbc <ble_connected_state_handler+0x1f4>)
10009a18:	4b69      	ldr	r3, [pc, #420]	; (10009bc0 <ble_connected_state_handler+0x1f8>)
10009a1a:	4798      	blx	r3
10009a1c:	2800      	cmp	r0, #0
10009a1e:	d100      	bne.n	10009a22 <ble_connected_state_handler+0x5a>
10009a20:	e0a3      	b.n	10009b6a <ble_connected_state_handler+0x1a2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
10009a22:	782b      	ldrb	r3, [r5, #0]
10009a24:	2b02      	cmp	r3, #2
10009a26:	d000      	beq.n	10009a2a <ble_connected_state_handler+0x62>
10009a28:	e09f      	b.n	10009b6a <ble_connected_state_handler+0x1a2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
10009a2a:	2250      	movs	r2, #80	; 0x50
10009a2c:	2100      	movs	r1, #0
10009a2e:	a806      	add	r0, sp, #24
10009a30:	4b64      	ldr	r3, [pc, #400]	; (10009bc4 <ble_connected_state_handler+0x1fc>)
10009a32:	4798      	blx	r3
10009a34:	4f64      	ldr	r7, [pc, #400]	; (10009bc8 <ble_connected_state_handler+0x200>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
10009a36:	2300      	movs	r3, #0
10009a38:	e00b      	b.n	10009a52 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009a3a:	1c59      	adds	r1, r3, #1
10009a3c:	7814      	ldrb	r4, [r2, #0]
10009a3e:	a806      	add	r0, sp, #24
10009a40:	54c4      	strb	r4, [r0, r3]
10009a42:	3201      	adds	r2, #1
10009a44:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
10009a46:	42b3      	cmp	r3, r6
10009a48:	d1f7      	bne.n	10009a3a <ble_connected_state_handler+0x72>
10009a4a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009a4c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
10009a4e:	2b50      	cmp	r3, #80	; 0x50
10009a50:	d004      	beq.n	10009a5c <ble_connected_state_handler+0x94>
10009a52:	001e      	movs	r6, r3
10009a54:	3610      	adds	r6, #16
10009a56:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009a58:	003a      	movs	r2, r7
10009a5a:	e7ee      	b.n	10009a3a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
10009a5c:	aa06      	add	r2, sp, #24
10009a5e:	0029      	movs	r1, r5
10009a60:	2005      	movs	r0, #5
10009a62:	4b5a      	ldr	r3, [pc, #360]	; (10009bcc <ble_connected_state_handler+0x204>)
10009a64:	4798      	blx	r3
10009a66:	1e06      	subs	r6, r0, #0
10009a68:	d106      	bne.n	10009a78 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
10009a6a:	484d      	ldr	r0, [pc, #308]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009a6c:	4b4d      	ldr	r3, [pc, #308]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009a6e:	4798      	blx	r3
10009a70:	4857      	ldr	r0, [pc, #348]	; (10009bd0 <ble_connected_state_handler+0x208>)
10009a72:	4b4e      	ldr	r3, [pc, #312]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009a74:	4798      	blx	r3
						return AT_BLE_SUCCESS;
10009a76:	e08c      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
10009a78:	4849      	ldr	r0, [pc, #292]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009a7a:	4b4a      	ldr	r3, [pc, #296]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009a7c:	4798      	blx	r3
10009a7e:	4855      	ldr	r0, [pc, #340]	; (10009bd4 <ble_connected_state_handler+0x20c>)
10009a80:	4b4a      	ldr	r3, [pc, #296]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009a82:	4798      	blx	r3
						return AT_BLE_FAILURE;
10009a84:	26e2      	movs	r6, #226	; 0xe2
10009a86:	e084      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
10009a88:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009a8a:	9405      	str	r4, [sp, #20]
10009a8c:	2207      	movs	r2, #7
10009a8e:	9904      	ldr	r1, [sp, #16]
10009a90:	4648      	mov	r0, r9
10009a92:	47d8      	blx	fp
10009a94:	2800      	cmp	r0, #0
10009a96:	d109      	bne.n	10009aac <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009a98:	9a05      	ldr	r2, [sp, #20]
10009a9a:	0153      	lsls	r3, r2, #5
10009a9c:	1a9b      	subs	r3, r3, r2
10009a9e:	009a      	lsls	r2, r3, #2
10009aa0:	4b4d      	ldr	r3, [pc, #308]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009aa2:	189b      	adds	r3, r3, r2
10009aa4:	335e      	adds	r3, #94	; 0x5e
10009aa6:	2202      	movs	r2, #2
10009aa8:	701a      	strb	r2, [r3, #0]
10009aaa:	e02b      	b.n	10009b04 <ble_connected_state_handler+0x13c>
10009aac:	3401      	adds	r4, #1
10009aae:	237c      	movs	r3, #124	; 0x7c
10009ab0:	469c      	mov	ip, r3
10009ab2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ab4:	2c05      	cmp	r4, #5
10009ab6:	d1e7      	bne.n	10009a88 <ble_connected_state_handler+0xc0>
10009ab8:	e062      	b.n	10009b80 <ble_connected_state_handler+0x1b8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009aba:	001c      	movs	r4, r3
10009abc:	7811      	ldrb	r1, [r2, #0]
10009abe:	2900      	cmp	r1, #0
10009ac0:	d11a      	bne.n	10009af8 <ble_connected_state_handler+0x130>
10009ac2:	e001      	b.n	10009ac8 <ble_connected_state_handler+0x100>
10009ac4:	2400      	movs	r4, #0
10009ac6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
10009ac8:	0163      	lsls	r3, r4, #5
10009aca:	4699      	mov	r9, r3
10009acc:	1b18      	subs	r0, r3, r4
10009ace:	0080      	lsls	r0, r0, #2
10009ad0:	4b41      	ldr	r3, [pc, #260]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009ad2:	4698      	mov	r8, r3
10009ad4:	4440      	add	r0, r8
10009ad6:	2212      	movs	r2, #18
10009ad8:	0029      	movs	r1, r5
10009ada:	4b37      	ldr	r3, [pc, #220]	; (10009bb8 <ble_connected_state_handler+0x1f0>)
10009adc:	4798      	blx	r3
						ble_device_count++;
10009ade:	4a3f      	ldr	r2, [pc, #252]	; (10009bdc <ble_connected_state_handler+0x214>)
10009ae0:	7813      	ldrb	r3, [r2, #0]
10009ae2:	3301      	adds	r3, #1
10009ae4:	b2db      	uxtb	r3, r3
10009ae6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009ae8:	464b      	mov	r3, r9
10009aea:	1b1b      	subs	r3, r3, r4
10009aec:	009b      	lsls	r3, r3, #2
10009aee:	4443      	add	r3, r8
10009af0:	335e      	adds	r3, #94	; 0x5e
10009af2:	2202      	movs	r2, #2
10009af4:	701a      	strb	r2, [r3, #0]
						break;
10009af6:	e005      	b.n	10009b04 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009af8:	1c79      	adds	r1, r7, #1
10009afa:	b2cf      	uxtb	r7, r1
10009afc:	3301      	adds	r3, #1
10009afe:	327c      	adds	r2, #124	; 0x7c
10009b00:	2f05      	cmp	r7, #5
10009b02:	d1da      	bne.n	10009aba <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009b04:	2207      	movs	r2, #7
10009b06:	0029      	movs	r1, r5
10009b08:	482c      	ldr	r0, [pc, #176]	; (10009bbc <ble_connected_state_handler+0x1f4>)
10009b0a:	4b2d      	ldr	r3, [pc, #180]	; (10009bc0 <ble_connected_state_handler+0x1f8>)
10009b0c:	4798      	blx	r3
10009b0e:	2800      	cmp	r0, #0
10009b10:	d107      	bne.n	10009b22 <ble_connected_state_handler+0x15a>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
10009b12:	017b      	lsls	r3, r7, #5
10009b14:	1bdb      	subs	r3, r3, r7
10009b16:	009b      	lsls	r3, r3, #2
10009b18:	4a2f      	ldr	r2, [pc, #188]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b1a:	18d3      	adds	r3, r2, r3
10009b1c:	2205      	movs	r2, #5
10009b1e:	749a      	strb	r2, [r3, #18]
10009b20:	e006      	b.n	10009b30 <ble_connected_state_handler+0x168>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009b22:	017b      	lsls	r3, r7, #5
10009b24:	1bdb      	subs	r3, r3, r7
10009b26:	009b      	lsls	r3, r3, #2
10009b28:	4a2b      	ldr	r2, [pc, #172]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b2a:	18d3      	adds	r3, r2, r3
10009b2c:	220a      	movs	r2, #10
10009b2e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009b30:	2207      	movs	r2, #7
10009b32:	2100      	movs	r1, #0
10009b34:	4821      	ldr	r0, [pc, #132]	; (10009bbc <ble_connected_state_handler+0x1f4>)
10009b36:	4b23      	ldr	r3, [pc, #140]	; (10009bc4 <ble_connected_state_handler+0x1fc>)
10009b38:	4798      	blx	r3
10009b3a:	e02a      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
10009b3c:	4818      	ldr	r0, [pc, #96]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009b3e:	4b19      	ldr	r3, [pc, #100]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009b40:	4798      	blx	r3
10009b42:	4b26      	ldr	r3, [pc, #152]	; (10009bdc <ble_connected_state_handler+0x214>)
10009b44:	7819      	ldrb	r1, [r3, #0]
10009b46:	b2c9      	uxtb	r1, r1
10009b48:	4825      	ldr	r0, [pc, #148]	; (10009be0 <ble_connected_state_handler+0x218>)
10009b4a:	4b18      	ldr	r3, [pc, #96]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009b4c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
10009b4e:	8928      	ldrh	r0, [r5, #8]
10009b50:	2113      	movs	r1, #19
10009b52:	4b24      	ldr	r3, [pc, #144]	; (10009be4 <ble_connected_state_handler+0x21c>)
10009b54:	4798      	blx	r3
10009b56:	e01c      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
10009b58:	4811      	ldr	r0, [pc, #68]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009b5a:	4b12      	ldr	r3, [pc, #72]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009b5c:	4798      	blx	r3
10009b5e:	7aa9      	ldrb	r1, [r5, #10]
10009b60:	4821      	ldr	r0, [pc, #132]	; (10009be8 <ble_connected_state_handler+0x220>)
10009b62:	4b12      	ldr	r3, [pc, #72]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009b64:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
10009b66:	2600      	movs	r6, #0
10009b68:	e013      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
10009b6a:	4b1c      	ldr	r3, [pc, #112]	; (10009bdc <ble_connected_state_handler+0x214>)
10009b6c:	781b      	ldrb	r3, [r3, #0]
10009b6e:	b2db      	uxtb	r3, r3
10009b70:	2b04      	cmp	r3, #4
10009b72:	d8e3      	bhi.n	10009b3c <ble_connected_state_handler+0x174>
10009b74:	4b18      	ldr	r3, [pc, #96]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b76:	4699      	mov	r9, r3
10009b78:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009b7a:	4b11      	ldr	r3, [pc, #68]	; (10009bc0 <ble_connected_state_handler+0x1f8>)
10009b7c:	469b      	mov	fp, r3
10009b7e:	e783      	b.n	10009a88 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009b80:	235e      	movs	r3, #94	; 0x5e
10009b82:	4a15      	ldr	r2, [pc, #84]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b84:	5cd3      	ldrb	r3, [r2, r3]
10009b86:	2b00      	cmp	r3, #0
10009b88:	d09c      	beq.n	10009ac4 <ble_connected_state_handler+0xfc>
10009b8a:	4a18      	ldr	r2, [pc, #96]	; (10009bec <ble_connected_state_handler+0x224>)
10009b8c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b8e:	2701      	movs	r7, #1
10009b90:	e793      	b.n	10009aba <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
10009b92:	0030      	movs	r0, r6
10009b94:	b01a      	add	sp, #104	; 0x68
10009b96:	bc1c      	pop	{r2, r3, r4}
10009b98:	4690      	mov	r8, r2
10009b9a:	4699      	mov	r9, r3
10009b9c:	46a3      	mov	fp, r4
10009b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ba0:	10010ce8 	.word	0x10010ce8
10009ba4:	1000fa1d 	.word	0x1000fa1d
10009ba8:	1001164c 	.word	0x1001164c
10009bac:	1000f8fd 	.word	0x1000f8fd
10009bb0:	10011690 	.word	0x10011690
10009bb4:	10012988 	.word	0x10012988
10009bb8:	1000f8db 	.word	0x1000f8db
10009bbc:	100123c0 	.word	0x100123c0
10009bc0:	1000f8bd 	.word	0x1000f8bd
10009bc4:	1000f8ed 	.word	0x1000f8ed
10009bc8:	10012722 	.word	0x10012722
10009bcc:	1000c919 	.word	0x1000c919
10009bd0:	100116a8 	.word	0x100116a8
10009bd4:	100116cc 	.word	0x100116cc
10009bd8:	100126dc 	.word	0x100126dc
10009bdc:	10012948 	.word	0x10012948
10009be0:	100116f0 	.word	0x100116f0
10009be4:	1000c8ed 	.word	0x1000c8ed
10009be8:	1001172c 	.word	0x1001172c
10009bec:	100127b6 	.word	0x100127b6

10009bf0 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bf2:	465f      	mov	r7, fp
10009bf4:	4656      	mov	r6, sl
10009bf6:	464d      	mov	r5, r9
10009bf8:	4644      	mov	r4, r8
10009bfa:	b4f0      	push	{r4, r5, r6, r7}
10009bfc:	b083      	sub	sp, #12
10009bfe:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009c00:	8841      	ldrh	r1, [r0, #2]
10009c02:	4b59      	ldr	r3, [pc, #356]	; (10009d68 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c04:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009c06:	891a      	ldrh	r2, [r3, #8]
10009c08:	428a      	cmp	r2, r1
10009c0a:	d105      	bne.n	10009c18 <ble_pair_done_handler+0x28>
10009c0c:	001a      	movs	r2, r3
10009c0e:	325e      	adds	r2, #94	; 0x5e
10009c10:	7812      	ldrb	r2, [r2, #0]
10009c12:	2a03      	cmp	r2, #3
10009c14:	d100      	bne.n	10009c18 <ble_pair_done_handler+0x28>
10009c16:	e09a      	b.n	10009d4e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c18:	3401      	adds	r4, #1
10009c1a:	b2e4      	uxtb	r4, r4
10009c1c:	337c      	adds	r3, #124	; 0x7c
10009c1e:	2c05      	cmp	r4, #5
10009c20:	d1f1      	bne.n	10009c06 <ble_pair_done_handler+0x16>
10009c22:	e057      	b.n	10009cd4 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
10009c24:	7821      	ldrb	r1, [r4, #0]
10009c26:	0030      	movs	r0, r6
10009c28:	47b8      	blx	r7
10009c2a:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
10009c2c:	454c      	cmp	r4, r9
10009c2e:	d1f9      	bne.n	10009c24 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
10009c30:	484e      	ldr	r0, [pc, #312]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009c32:	4b4f      	ldr	r3, [pc, #316]	; (10009d70 <ble_pair_done_handler+0x180>)
10009c34:	4798      	blx	r3
10009c36:	484f      	ldr	r0, [pc, #316]	; (10009d74 <ble_pair_done_handler+0x184>)
10009c38:	4b4f      	ldr	r3, [pc, #316]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c3a:	4798      	blx	r3
10009c3c:	002e      	movs	r6, r5
10009c3e:	3622      	adds	r6, #34	; 0x22
10009c40:	002c      	movs	r4, r5
10009c42:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
10009c44:	4f4c      	ldr	r7, [pc, #304]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c46:	7831      	ldrb	r1, [r6, #0]
10009c48:	484c      	ldr	r0, [pc, #304]	; (10009d7c <ble_pair_done_handler+0x18c>)
10009c4a:	47b8      	blx	r7
10009c4c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
10009c4e:	42a6      	cmp	r6, r4
10009c50:	d1f9      	bne.n	10009c46 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
10009c52:	4846      	ldr	r0, [pc, #280]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009c54:	4b46      	ldr	r3, [pc, #280]	; (10009d70 <ble_pair_done_handler+0x180>)
10009c56:	4798      	blx	r3
10009c58:	4849      	ldr	r0, [pc, #292]	; (10009d80 <ble_pair_done_handler+0x190>)
10009c5a:	4b47      	ldr	r3, [pc, #284]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c5c:	4798      	blx	r3
10009c5e:	3542      	adds	r5, #66	; 0x42
10009c60:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
10009c62:	4e46      	ldr	r6, [pc, #280]	; (10009d7c <ble_pair_done_handler+0x18c>)
10009c64:	4d44      	ldr	r5, [pc, #272]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c66:	7821      	ldrb	r1, [r4, #0]
10009c68:	0030      	movs	r0, r6
10009c6a:	47a8      	blx	r5
10009c6c:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
10009c6e:	42bc      	cmp	r4, r7
10009c70:	d1f9      	bne.n	10009c66 <ble_pair_done_handler+0x76>
10009c72:	e071      	b.n	10009d58 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009c74:	0163      	lsls	r3, r4, #5
10009c76:	1b1c      	subs	r4, r3, r4
10009c78:	00a4      	lsls	r4, r4, #2
10009c7a:	4b3b      	ldr	r3, [pc, #236]	; (10009d68 <ble_pair_done_handler+0x178>)
10009c7c:	191c      	adds	r4, r3, r4
10009c7e:	345e      	adds	r4, #94	; 0x5e
10009c80:	7823      	ldrb	r3, [r4, #0]
10009c82:	2b01      	cmp	r3, #1
10009c84:	d915      	bls.n	10009cb2 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
10009c86:	4839      	ldr	r0, [pc, #228]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009c88:	4b39      	ldr	r3, [pc, #228]	; (10009d70 <ble_pair_done_handler+0x180>)
10009c8a:	4798      	blx	r3
10009c8c:	483d      	ldr	r0, [pc, #244]	; (10009d84 <ble_pair_done_handler+0x194>)
10009c8e:	4b3a      	ldr	r3, [pc, #232]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c90:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009c92:	8868      	ldrh	r0, [r5, #2]
10009c94:	2113      	movs	r1, #19
10009c96:	4b3c      	ldr	r3, [pc, #240]	; (10009d88 <ble_pair_done_handler+0x198>)
10009c98:	4798      	blx	r3
10009c9a:	9001      	str	r0, [sp, #4]
10009c9c:	2800      	cmp	r0, #0
10009c9e:	d05b      	beq.n	10009d58 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
10009ca0:	4832      	ldr	r0, [pc, #200]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009ca2:	4b33      	ldr	r3, [pc, #204]	; (10009d70 <ble_pair_done_handler+0x180>)
10009ca4:	4798      	blx	r3
10009ca6:	4839      	ldr	r0, [pc, #228]	; (10009d8c <ble_pair_done_handler+0x19c>)
10009ca8:	4b33      	ldr	r3, [pc, #204]	; (10009d78 <ble_pair_done_handler+0x188>)
10009caa:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009cac:	23e2      	movs	r3, #226	; 0xe2
10009cae:	9301      	str	r3, [sp, #4]
10009cb0:	e052      	b.n	10009d58 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009cb2:	2300      	movs	r3, #0
10009cb4:	9301      	str	r3, [sp, #4]
10009cb6:	e04f      	b.n	10009d58 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009cb8:	4e2c      	ldr	r6, [pc, #176]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009cba:	0030      	movs	r0, r6
10009cbc:	4d2c      	ldr	r5, [pc, #176]	; (10009d70 <ble_pair_done_handler+0x180>)
10009cbe:	47a8      	blx	r5
10009cc0:	4833      	ldr	r0, [pc, #204]	; (10009d90 <ble_pair_done_handler+0x1a0>)
10009cc2:	4c2d      	ldr	r4, [pc, #180]	; (10009d78 <ble_pair_done_handler+0x188>)
10009cc4:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009cc6:	0030      	movs	r0, r6
10009cc8:	47a8      	blx	r5
10009cca:	4832      	ldr	r0, [pc, #200]	; (10009d94 <ble_pair_done_handler+0x1a4>)
10009ccc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009cce:	23e2      	movs	r3, #226	; 0xe2
10009cd0:	9301      	str	r3, [sp, #4]
10009cd2:	e041      	b.n	10009d58 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009cd4:	792b      	ldrb	r3, [r5, #4]
10009cd6:	2b00      	cmp	r3, #0
10009cd8:	d1cc      	bne.n	10009c74 <ble_pair_done_handler+0x84>
10009cda:	e7ed      	b.n	10009cb8 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009cdc:	4823      	ldr	r0, [pc, #140]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009cde:	4b24      	ldr	r3, [pc, #144]	; (10009d70 <ble_pair_done_handler+0x180>)
10009ce0:	469b      	mov	fp, r3
10009ce2:	4798      	blx	r3
10009ce4:	482a      	ldr	r0, [pc, #168]	; (10009d90 <ble_pair_done_handler+0x1a0>)
10009ce6:	4b24      	ldr	r3, [pc, #144]	; (10009d78 <ble_pair_done_handler+0x188>)
10009ce8:	469a      	mov	sl, r3
10009cea:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009cec:	782a      	ldrb	r2, [r5, #0]
10009cee:	4b1e      	ldr	r3, [pc, #120]	; (10009d68 <ble_pair_done_handler+0x178>)
10009cf0:	4698      	mov	r8, r3
10009cf2:	0167      	lsls	r7, r4, #5
10009cf4:	1b3b      	subs	r3, r7, r4
10009cf6:	009b      	lsls	r3, r3, #2
10009cf8:	4443      	add	r3, r8
10009cfa:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009cfc:	792a      	ldrb	r2, [r5, #4]
10009cfe:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009d00:	335e      	adds	r3, #94	; 0x5e
10009d02:	2205      	movs	r2, #5
10009d04:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009d06:	1b38      	subs	r0, r7, r4
10009d08:	0080      	lsls	r0, r0, #2
10009d0a:	4440      	add	r0, r8
10009d0c:	3036      	adds	r0, #54	; 0x36
10009d0e:	320b      	adds	r2, #11
10009d10:	0029      	movs	r1, r5
10009d12:	3122      	adds	r1, #34	; 0x22
10009d14:	4b20      	ldr	r3, [pc, #128]	; (10009d98 <ble_pair_done_handler+0x1a8>)
10009d16:	4699      	mov	r9, r3
10009d18:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009d1a:	1b38      	subs	r0, r7, r4
10009d1c:	0080      	lsls	r0, r0, #2
10009d1e:	4440      	add	r0, r8
10009d20:	3046      	adds	r0, #70	; 0x46
10009d22:	2217      	movs	r2, #23
10009d24:	0029      	movs	r1, r5
10009d26:	3132      	adds	r1, #50	; 0x32
10009d28:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009d2a:	1b38      	subs	r0, r7, r4
10009d2c:	0080      	lsls	r0, r0, #2
10009d2e:	4440      	add	r0, r8
10009d30:	301a      	adds	r0, #26
10009d32:	1dac      	adds	r4, r5, #6
10009d34:	221c      	movs	r2, #28
10009d36:	0021      	movs	r1, r4
10009d38:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
10009d3a:	480c      	ldr	r0, [pc, #48]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009d3c:	47d8      	blx	fp
10009d3e:	4817      	ldr	r0, [pc, #92]	; (10009d9c <ble_pair_done_handler+0x1ac>)
10009d40:	47d0      	blx	sl
10009d42:	2316      	movs	r3, #22
10009d44:	4699      	mov	r9, r3
10009d46:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
10009d48:	4e0c      	ldr	r6, [pc, #48]	; (10009d7c <ble_pair_done_handler+0x18c>)
10009d4a:	4f0b      	ldr	r7, [pc, #44]	; (10009d78 <ble_pair_done_handler+0x188>)
10009d4c:	e76a      	b.n	10009c24 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009d4e:	792b      	ldrb	r3, [r5, #4]
10009d50:	9301      	str	r3, [sp, #4]
10009d52:	2b00      	cmp	r3, #0
10009d54:	d0c2      	beq.n	10009cdc <ble_pair_done_handler+0xec>
10009d56:	e78d      	b.n	10009c74 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009d58:	9801      	ldr	r0, [sp, #4]
10009d5a:	b003      	add	sp, #12
10009d5c:	bc3c      	pop	{r2, r3, r4, r5}
10009d5e:	4690      	mov	r8, r2
10009d60:	4699      	mov	r9, r3
10009d62:	46a2      	mov	sl, r4
10009d64:	46ab      	mov	fp, r5
10009d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d68:	100126dc 	.word	0x100126dc
10009d6c:	10010ce8 	.word	0x10010ce8
10009d70:	1000fa1d 	.word	0x1000fa1d
10009d74:	10011760 	.word	0x10011760
10009d78:	1000f8fd 	.word	0x1000f8fd
10009d7c:	10011754 	.word	0x10011754
10009d80:	10011768 	.word	0x10011768
10009d84:	10011770 	.word	0x10011770
10009d88:	1000c8ed 	.word	0x1000c8ed
10009d8c:	10011790 	.word	0x10011790
10009d90:	100117ac 	.word	0x100117ac
10009d94:	100117d8 	.word	0x100117d8
10009d98:	1000f8db 	.word	0x1000f8db
10009d9c:	10011808 	.word	0x10011808

10009da0 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009da0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009da2:	8800      	ldrh	r0, [r0, #0]
10009da4:	2378      	movs	r3, #120	; 0x78
10009da6:	2201      	movs	r2, #1
10009da8:	2101      	movs	r1, #1
10009daa:	4c02      	ldr	r4, [pc, #8]	; (10009db4 <ble_conn_param_update_req+0x14>)
10009dac:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009dae:	2000      	movs	r0, #0
10009db0:	bd10      	pop	{r4, pc}
10009db2:	46c0      	nop			; (mov r8, r8)
10009db4:	1000c90d 	.word	0x1000c90d

10009db8 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dba:	4657      	mov	r7, sl
10009dbc:	464e      	mov	r6, r9
10009dbe:	4645      	mov	r5, r8
10009dc0:	b4e0      	push	{r5, r6, r7}
10009dc2:	b084      	sub	sp, #16
10009dc4:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009dc6:	2209      	movs	r2, #9
10009dc8:	2100      	movs	r1, #0
10009dca:	a801      	add	r0, sp, #4
10009dcc:	4b6a      	ldr	r3, [pc, #424]	; (10009f78 <ble_slave_security_request_handler+0x1c0>)
10009dce:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009dd0:	8825      	ldrh	r5, [r4, #0]
10009dd2:	496a      	ldr	r1, [pc, #424]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009dd4:	000a      	movs	r2, r1
10009dd6:	2300      	movs	r3, #0
10009dd8:	8910      	ldrh	r0, [r2, #8]
10009dda:	42a8      	cmp	r0, r5
10009ddc:	d116      	bne.n	10009e0c <ble_slave_security_request_handler+0x54>
10009dde:	0010      	movs	r0, r2
10009de0:	305e      	adds	r0, #94	; 0x5e
10009de2:	7800      	ldrb	r0, [r0, #0]
10009de4:	2802      	cmp	r0, #2
10009de6:	d111      	bne.n	10009e0c <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009de8:	4864      	ldr	r0, [pc, #400]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009dea:	015a      	lsls	r2, r3, #5
10009dec:	1ad6      	subs	r6, r2, r3
10009dee:	00b6      	lsls	r6, r6, #2
10009df0:	1986      	adds	r6, r0, r6
10009df2:	365e      	adds	r6, #94	; 0x5e
10009df4:	2206      	movs	r2, #6
10009df6:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009df8:	32f9      	adds	r2, #249	; 0xf9
10009dfa:	4013      	ands	r3, r2
10009dfc:	015a      	lsls	r2, r3, #5
10009dfe:	1ad2      	subs	r2, r2, r3
10009e00:	0092      	lsls	r2, r2, #2
10009e02:	1882      	adds	r2, r0, r2
10009e04:	7d12      	ldrb	r2, [r2, #20]
10009e06:	07d0      	lsls	r0, r2, #31
10009e08:	d405      	bmi.n	10009e16 <ble_slave_security_request_handler+0x5e>
10009e0a:	e01b      	b.n	10009e44 <ble_slave_security_request_handler+0x8c>
10009e0c:	3301      	adds	r3, #1
10009e0e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e10:	2b05      	cmp	r3, #5
10009e12:	d1e1      	bne.n	10009dd8 <ble_slave_security_request_handler+0x20>
10009e14:	e01e      	b.n	10009e54 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009e16:	78e0      	ldrb	r0, [r4, #3]
10009e18:	2800      	cmp	r0, #0
10009e1a:	d013      	beq.n	10009e44 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009e1c:	0159      	lsls	r1, r3, #5
10009e1e:	1ac9      	subs	r1, r1, r3
10009e20:	008b      	lsls	r3, r1, #2
10009e22:	4956      	ldr	r1, [pc, #344]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009e24:	18c9      	adds	r1, r1, r3
10009e26:	311a      	adds	r1, #26
10009e28:	8820      	ldrh	r0, [r4, #0]
10009e2a:	4b55      	ldr	r3, [pc, #340]	; (10009f80 <ble_slave_security_request_handler+0x1c8>)
10009e2c:	4798      	blx	r3
10009e2e:	2800      	cmp	r0, #0
10009e30:	d100      	bne.n	10009e34 <ble_slave_security_request_handler+0x7c>
10009e32:	e09b      	b.n	10009f6c <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009e34:	4853      	ldr	r0, [pc, #332]	; (10009f84 <ble_slave_security_request_handler+0x1cc>)
10009e36:	4b54      	ldr	r3, [pc, #336]	; (10009f88 <ble_slave_security_request_handler+0x1d0>)
10009e38:	4798      	blx	r3
10009e3a:	4854      	ldr	r0, [pc, #336]	; (10009f8c <ble_slave_security_request_handler+0x1d4>)
10009e3c:	4b54      	ldr	r3, [pc, #336]	; (10009f90 <ble_slave_security_request_handler+0x1d8>)
10009e3e:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009e40:	20e2      	movs	r0, #226	; 0xe2
10009e42:	e093      	b.n	10009f6c <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009e44:	015a      	lsls	r2, r3, #5
10009e46:	1ad3      	subs	r3, r2, r3
10009e48:	009b      	lsls	r3, r3, #2
10009e4a:	4a4c      	ldr	r2, [pc, #304]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009e4c:	18d3      	adds	r3, r2, r3
10009e4e:	335e      	adds	r3, #94	; 0x5e
10009e50:	2202      	movs	r2, #2
10009e52:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e54:	8825      	ldrh	r5, [r4, #0]
10009e56:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e58:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e5a:	0016      	movs	r6, r2
10009e5c:	8908      	ldrh	r0, [r1, #8]
10009e5e:	42a8      	cmp	r0, r5
10009e60:	d10d      	bne.n	10009e7e <ble_slave_security_request_handler+0xc6>
10009e62:	0008      	movs	r0, r1
10009e64:	305e      	adds	r0, #94	; 0x5e
10009e66:	7800      	ldrb	r0, [r0, #0]
10009e68:	2802      	cmp	r0, #2
10009e6a:	d108      	bne.n	10009e7e <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009e6c:	0152      	lsls	r2, r2, #5
10009e6e:	1b92      	subs	r2, r2, r6
10009e70:	0096      	lsls	r6, r2, #2
10009e72:	4a42      	ldr	r2, [pc, #264]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009e74:	1992      	adds	r2, r2, r6
10009e76:	325e      	adds	r2, #94	; 0x5e
10009e78:	2103      	movs	r1, #3
10009e7a:	7011      	strb	r1, [r2, #0]
			break;
10009e7c:	e005      	b.n	10009e8a <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e7e:	3301      	adds	r3, #1
10009e80:	b2db      	uxtb	r3, r3
10009e82:	3201      	adds	r2, #1
10009e84:	317c      	adds	r1, #124	; 0x7c
10009e86:	2b05      	cmp	r3, #5
10009e88:	d1e7      	bne.n	10009e5a <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
10009e8a:	aa01      	add	r2, sp, #4
10009e8c:	78e1      	ldrb	r1, [r4, #3]
10009e8e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009e90:	2101      	movs	r1, #1
10009e92:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009e94:	3103      	adds	r1, #3
10009e96:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009e98:	001f      	movs	r7, r3
10009e9a:	015a      	lsls	r2, r3, #5
10009e9c:	1ad2      	subs	r2, r2, r3
10009e9e:	0092      	lsls	r2, r2, #2
10009ea0:	4936      	ldr	r1, [pc, #216]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009ea2:	5c52      	ldrb	r2, [r2, r1]
10009ea4:	2a02      	cmp	r2, #2
10009ea6:	d104      	bne.n	10009eb2 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009ea8:	aa01      	add	r2, sp, #4
10009eaa:	2103      	movs	r1, #3
10009eac:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009eae:	71d1      	strb	r1, [r2, #7]
10009eb0:	e003      	b.n	10009eba <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009eb2:	aa01      	add	r2, sp, #4
10009eb4:	2101      	movs	r1, #1
10009eb6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009eb8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
10009eba:	aa01      	add	r2, sp, #4
10009ebc:	2110      	movs	r1, #16
10009ebe:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009ec0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009ec2:	017a      	lsls	r2, r7, #5
10009ec4:	1bd2      	subs	r2, r2, r7
10009ec6:	0092      	lsls	r2, r2, #2
10009ec8:	492c      	ldr	r1, [pc, #176]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009eca:	188a      	adds	r2, r1, r2
10009ecc:	7e12      	ldrb	r2, [r2, #24]
10009ece:	2a40      	cmp	r2, #64	; 0x40
10009ed0:	d134      	bne.n	10009f3c <ble_slave_security_request_handler+0x184>
10009ed2:	015a      	lsls	r2, r3, #5
10009ed4:	1ad3      	subs	r3, r2, r3
10009ed6:	009b      	lsls	r3, r3, #2
10009ed8:	469a      	mov	sl, r3
10009eda:	001e      	movs	r6, r3
10009edc:	3660      	adds	r6, #96	; 0x60
10009ede:	1876      	adds	r6, r6, r1
10009ee0:	4655      	mov	r5, sl
10009ee2:	3568      	adds	r5, #104	; 0x68
10009ee4:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009ee6:	4b2b      	ldr	r3, [pc, #172]	; (10009f94 <ble_slave_security_request_handler+0x1dc>)
10009ee8:	4699      	mov	r9, r3
10009eea:	230f      	movs	r3, #15
10009eec:	4698      	mov	r8, r3
10009eee:	47c8      	blx	r9
10009ef0:	4643      	mov	r3, r8
10009ef2:	4018      	ands	r0, r3
10009ef4:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009ef6:	47c8      	blx	r9
10009ef8:	4643      	mov	r3, r8
10009efa:	4018      	ands	r0, r3
10009efc:	74b0      	strb	r0, [r6, #18]
10009efe:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009f00:	42ae      	cmp	r6, r5
10009f02:	d1f4      	bne.n	10009eee <ble_slave_security_request_handler+0x136>
10009f04:	4656      	mov	r6, sl
10009f06:	3670      	adds	r6, #112	; 0x70
10009f08:	4a1c      	ldr	r2, [pc, #112]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009f0a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009f0c:	4b21      	ldr	r3, [pc, #132]	; (10009f94 <ble_slave_security_request_handler+0x1dc>)
10009f0e:	4699      	mov	r9, r3
10009f10:	230f      	movs	r3, #15
10009f12:	4698      	mov	r8, r3
10009f14:	47c8      	blx	r9
10009f16:	4643      	mov	r3, r8
10009f18:	4018      	ands	r0, r3
10009f1a:	7028      	strb	r0, [r5, #0]
10009f1c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009f1e:	42b5      	cmp	r5, r6
10009f20:	d1f8      	bne.n	10009f14 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009f22:	4b1c      	ldr	r3, [pc, #112]	; (10009f94 <ble_slave_security_request_handler+0x1dc>)
10009f24:	4798      	blx	r3
10009f26:	017b      	lsls	r3, r7, #5
10009f28:	1bdb      	subs	r3, r3, r7
10009f2a:	009b      	lsls	r3, r3, #2
10009f2c:	4a13      	ldr	r2, [pc, #76]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009f2e:	18d3      	adds	r3, r2, r3
10009f30:	001a      	movs	r2, r3
10009f32:	3270      	adds	r2, #112	; 0x70
10009f34:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009f36:	337a      	adds	r3, #122	; 0x7a
10009f38:	2210      	movs	r2, #16
10009f3a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009f3c:	017a      	lsls	r2, r7, #5
10009f3e:	1bd7      	subs	r7, r2, r7
10009f40:	00bf      	lsls	r7, r7, #2
10009f42:	3760      	adds	r7, #96	; 0x60
10009f44:	4a0d      	ldr	r2, [pc, #52]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009f46:	18ba      	adds	r2, r7, r2
10009f48:	8820      	ldrh	r0, [r4, #0]
10009f4a:	2300      	movs	r3, #0
10009f4c:	a901      	add	r1, sp, #4
10009f4e:	4c12      	ldr	r4, [pc, #72]	; (10009f98 <ble_slave_security_request_handler+0x1e0>)
10009f50:	47a0      	blx	r4
10009f52:	2800      	cmp	r0, #0
10009f54:	d00a      	beq.n	10009f6c <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
10009f56:	ab01      	add	r3, sp, #4
10009f58:	2200      	movs	r2, #0
10009f5a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009f5c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009f5e:	4809      	ldr	r0, [pc, #36]	; (10009f84 <ble_slave_security_request_handler+0x1cc>)
10009f60:	4b09      	ldr	r3, [pc, #36]	; (10009f88 <ble_slave_security_request_handler+0x1d0>)
10009f62:	4798      	blx	r3
10009f64:	480d      	ldr	r0, [pc, #52]	; (10009f9c <ble_slave_security_request_handler+0x1e4>)
10009f66:	4b0a      	ldr	r3, [pc, #40]	; (10009f90 <ble_slave_security_request_handler+0x1d8>)
10009f68:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009f6a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009f6c:	b004      	add	sp, #16
10009f6e:	bc1c      	pop	{r2, r3, r4}
10009f70:	4690      	mov	r8, r2
10009f72:	4699      	mov	r9, r3
10009f74:	46a2      	mov	sl, r4
10009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f78:	1000f8ed 	.word	0x1000f8ed
10009f7c:	100126dc 	.word	0x100126dc
10009f80:	1000ce25 	.word	0x1000ce25
10009f84:	10010ce8 	.word	0x10010ce8
10009f88:	1000fa1d 	.word	0x1000fa1d
10009f8c:	10011810 	.word	0x10011810
10009f90:	1000f8fd 	.word	0x1000f8fd
10009f94:	1000fa31 	.word	0x1000fa31
10009f98:	1000cc79 	.word	0x1000cc79
10009f9c:	10011828 	.word	0x10011828

10009fa0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fa2:	465f      	mov	r7, fp
10009fa4:	4656      	mov	r6, sl
10009fa6:	464d      	mov	r5, r9
10009fa8:	4644      	mov	r4, r8
10009faa:	b4f0      	push	{r4, r5, r6, r7}
10009fac:	b085      	sub	sp, #20
10009fae:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fb0:	8804      	ldrh	r4, [r0, #0]
10009fb2:	4a54      	ldr	r2, [pc, #336]	; (1000a104 <ble_pair_request_handler+0x164>)
10009fb4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fb6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fb8:	8910      	ldrh	r0, [r2, #8]
10009fba:	42a0      	cmp	r0, r4
10009fbc:	d10d      	bne.n	10009fda <ble_pair_request_handler+0x3a>
10009fbe:	0010      	movs	r0, r2
10009fc0:	305e      	adds	r0, #94	; 0x5e
10009fc2:	7800      	ldrb	r0, [r0, #0]
10009fc4:	2802      	cmp	r0, #2
10009fc6:	d108      	bne.n	10009fda <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009fc8:	014a      	lsls	r2, r1, #5
10009fca:	1a52      	subs	r2, r2, r1
10009fcc:	0095      	lsls	r5, r2, #2
10009fce:	4a4d      	ldr	r2, [pc, #308]	; (1000a104 <ble_pair_request_handler+0x164>)
10009fd0:	1952      	adds	r2, r2, r5
10009fd2:	325e      	adds	r2, #94	; 0x5e
10009fd4:	2103      	movs	r1, #3
10009fd6:	7011      	strb	r1, [r2, #0]
			break;
10009fd8:	e005      	b.n	10009fe6 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fda:	3301      	adds	r3, #1
10009fdc:	b2db      	uxtb	r3, r3
10009fde:	3101      	adds	r1, #1
10009fe0:	327c      	adds	r2, #124	; 0x7c
10009fe2:	2b05      	cmp	r3, #5
10009fe4:	d1e8      	bne.n	10009fb8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009fe6:	aa01      	add	r2, sp, #4
10009fe8:	2100      	movs	r1, #0
10009fea:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
10009fec:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009fee:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009ff0:	2003      	movs	r0, #3
10009ff2:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009ff4:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009ff6:	001e      	movs	r6, r3
10009ff8:	015a      	lsls	r2, r3, #5
10009ffa:	1ad2      	subs	r2, r2, r3
10009ffc:	0092      	lsls	r2, r2, #2
10009ffe:	4941      	ldr	r1, [pc, #260]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a000:	5c52      	ldrb	r2, [r2, r1]
1000a002:	2a02      	cmp	r2, #2
1000a004:	d104      	bne.n	1000a010 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a006:	aa01      	add	r2, sp, #4
1000a008:	2103      	movs	r1, #3
1000a00a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a00c:	71d1      	strb	r1, [r2, #7]
1000a00e:	e003      	b.n	1000a018 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a010:	aa01      	add	r2, sp, #4
1000a012:	2101      	movs	r1, #1
1000a014:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a016:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a018:	aa01      	add	r2, sp, #4
1000a01a:	2110      	movs	r1, #16
1000a01c:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a01e:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a020:	0172      	lsls	r2, r6, #5
1000a022:	1b92      	subs	r2, r2, r6
1000a024:	0092      	lsls	r2, r2, #2
1000a026:	4937      	ldr	r1, [pc, #220]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a028:	188a      	adds	r2, r1, r2
1000a02a:	7e12      	ldrb	r2, [r2, #24]
1000a02c:	2a40      	cmp	r2, #64	; 0x40
1000a02e:	d142      	bne.n	1000a0b6 <ble_pair_request_handler+0x116>
1000a030:	015f      	lsls	r7, r3, #5
1000a032:	1afb      	subs	r3, r7, r3
1000a034:	009b      	lsls	r3, r3, #2
1000a036:	469b      	mov	fp, r3
1000a038:	001c      	movs	r4, r3
1000a03a:	3460      	adds	r4, #96	; 0x60
1000a03c:	1864      	adds	r4, r4, r1
1000a03e:	465d      	mov	r5, fp
1000a040:	3568      	adds	r5, #104	; 0x68
1000a042:	186d      	adds	r5, r5, r1
1000a044:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a046:	4b30      	ldr	r3, [pc, #192]	; (1000a108 <ble_pair_request_handler+0x168>)
1000a048:	469a      	mov	sl, r3
1000a04a:	230f      	movs	r3, #15
1000a04c:	4699      	mov	r9, r3
1000a04e:	47d0      	blx	sl
1000a050:	464b      	mov	r3, r9
1000a052:	4018      	ands	r0, r3
1000a054:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a056:	47d0      	blx	sl
1000a058:	464b      	mov	r3, r9
1000a05a:	4018      	ands	r0, r3
1000a05c:	74b8      	strb	r0, [r7, #18]
1000a05e:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a060:	42af      	cmp	r7, r5
1000a062:	d1f4      	bne.n	1000a04e <ble_pair_request_handler+0xae>
1000a064:	465b      	mov	r3, fp
1000a066:	3370      	adds	r3, #112	; 0x70
1000a068:	4f26      	ldr	r7, [pc, #152]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a06a:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a06c:	4b26      	ldr	r3, [pc, #152]	; (1000a108 <ble_pair_request_handler+0x168>)
1000a06e:	469a      	mov	sl, r3
1000a070:	230f      	movs	r3, #15
1000a072:	4699      	mov	r9, r3
1000a074:	47d0      	blx	sl
1000a076:	464b      	mov	r3, r9
1000a078:	4018      	ands	r0, r3
1000a07a:	7028      	strb	r0, [r5, #0]
1000a07c:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a07e:	42bd      	cmp	r5, r7
1000a080:	d1f8      	bne.n	1000a074 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000a082:	4822      	ldr	r0, [pc, #136]	; (1000a10c <ble_pair_request_handler+0x16c>)
1000a084:	4b22      	ldr	r3, [pc, #136]	; (1000a110 <ble_pair_request_handler+0x170>)
1000a086:	4798      	blx	r3
1000a088:	4822      	ldr	r0, [pc, #136]	; (1000a114 <ble_pair_request_handler+0x174>)
1000a08a:	4b23      	ldr	r3, [pc, #140]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a08c:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000a08e:	4d22      	ldr	r5, [pc, #136]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a090:	7821      	ldrb	r1, [r4, #0]
1000a092:	4822      	ldr	r0, [pc, #136]	; (1000a11c <ble_pair_request_handler+0x17c>)
1000a094:	47a8      	blx	r5
1000a096:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000a098:	42bc      	cmp	r4, r7
1000a09a:	d1f9      	bne.n	1000a090 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a09c:	4b1a      	ldr	r3, [pc, #104]	; (1000a108 <ble_pair_request_handler+0x168>)
1000a09e:	4798      	blx	r3
1000a0a0:	0173      	lsls	r3, r6, #5
1000a0a2:	1b9b      	subs	r3, r3, r6
1000a0a4:	009b      	lsls	r3, r3, #2
1000a0a6:	4a17      	ldr	r2, [pc, #92]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a0a8:	18d3      	adds	r3, r2, r3
1000a0aa:	001a      	movs	r2, r3
1000a0ac:	3270      	adds	r2, #112	; 0x70
1000a0ae:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a0b0:	337a      	adds	r3, #122	; 0x7a
1000a0b2:	2210      	movs	r2, #16
1000a0b4:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000a0b6:	4815      	ldr	r0, [pc, #84]	; (1000a10c <ble_pair_request_handler+0x16c>)
1000a0b8:	4b15      	ldr	r3, [pc, #84]	; (1000a110 <ble_pair_request_handler+0x170>)
1000a0ba:	4798      	blx	r3
1000a0bc:	4818      	ldr	r0, [pc, #96]	; (1000a120 <ble_pair_request_handler+0x180>)
1000a0be:	4b16      	ldr	r3, [pc, #88]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a0c0:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a0c2:	0173      	lsls	r3, r6, #5
1000a0c4:	1b9b      	subs	r3, r3, r6
1000a0c6:	009b      	lsls	r3, r3, #2
1000a0c8:	3360      	adds	r3, #96	; 0x60
1000a0ca:	4a0e      	ldr	r2, [pc, #56]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a0cc:	189a      	adds	r2, r3, r2
1000a0ce:	4643      	mov	r3, r8
1000a0d0:	8818      	ldrh	r0, [r3, #0]
1000a0d2:	2300      	movs	r3, #0
1000a0d4:	a901      	add	r1, sp, #4
1000a0d6:	4c13      	ldr	r4, [pc, #76]	; (1000a124 <ble_pair_request_handler+0x184>)
1000a0d8:	47a0      	blx	r4
1000a0da:	2800      	cmp	r0, #0
1000a0dc:	d00a      	beq.n	1000a0f4 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000a0de:	ab01      	add	r3, sp, #4
1000a0e0:	2200      	movs	r2, #0
1000a0e2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a0e4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a0e6:	4809      	ldr	r0, [pc, #36]	; (1000a10c <ble_pair_request_handler+0x16c>)
1000a0e8:	4b09      	ldr	r3, [pc, #36]	; (1000a110 <ble_pair_request_handler+0x170>)
1000a0ea:	4798      	blx	r3
1000a0ec:	480e      	ldr	r0, [pc, #56]	; (1000a128 <ble_pair_request_handler+0x188>)
1000a0ee:	4b0a      	ldr	r3, [pc, #40]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a0f0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a0f2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a0f4:	b005      	add	sp, #20
1000a0f6:	bc3c      	pop	{r2, r3, r4, r5}
1000a0f8:	4690      	mov	r8, r2
1000a0fa:	4699      	mov	r9, r3
1000a0fc:	46a2      	mov	sl, r4
1000a0fe:	46ab      	mov	fp, r5
1000a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a102:	46c0      	nop			; (mov r8, r8)
1000a104:	100126dc 	.word	0x100126dc
1000a108:	1000fa31 	.word	0x1000fa31
1000a10c:	10010ce8 	.word	0x10010ce8
1000a110:	1000fa1d 	.word	0x1000fa1d
1000a114:	10011854 	.word	0x10011854
1000a118:	1000f8fd 	.word	0x1000f8fd
1000a11c:	10011864 	.word	0x10011864
1000a120:	1001186c 	.word	0x1001186c
1000a124:	1000cc79 	.word	0x1000cc79
1000a128:	10011888 	.word	0x10011888

1000a12c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a12c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a12e:	b085      	sub	sp, #20
1000a130:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a132:	2206      	movs	r2, #6
1000a134:	493d      	ldr	r1, [pc, #244]	; (1000a22c <ble_pair_key_request_handler+0x100>)
1000a136:	a802      	add	r0, sp, #8
1000a138:	4e3d      	ldr	r6, [pc, #244]	; (1000a230 <ble_pair_key_request_handler+0x104>)
1000a13a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a13c:	ac01      	add	r4, sp, #4
1000a13e:	2204      	movs	r2, #4
1000a140:	0029      	movs	r1, r5
1000a142:	0020      	movs	r0, r4
1000a144:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a146:	78e3      	ldrb	r3, [r4, #3]
1000a148:	2b00      	cmp	r3, #0
1000a14a:	d162      	bne.n	1000a212 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a14c:	4839      	ldr	r0, [pc, #228]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a14e:	4b3a      	ldr	r3, [pc, #232]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a150:	4798      	blx	r3
1000a152:	483a      	ldr	r0, [pc, #232]	; (1000a23c <ble_pair_key_request_handler+0x110>)
1000a154:	4b3a      	ldr	r3, [pc, #232]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a156:	4798      	blx	r3
1000a158:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a15a:	4c3a      	ldr	r4, [pc, #232]	; (1000a244 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a15c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a15e:	201e      	movs	r0, #30
1000a160:	47a0      	blx	r4
1000a162:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a164:	2b00      	cmp	r3, #0
1000a166:	d11a      	bne.n	1000a19e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a168:	4f32      	ldr	r7, [pc, #200]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a16a:	0038      	movs	r0, r7
1000a16c:	4e32      	ldr	r6, [pc, #200]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a16e:	47b0      	blx	r6
1000a170:	4835      	ldr	r0, [pc, #212]	; (1000a248 <ble_pair_key_request_handler+0x11c>)
1000a172:	4c33      	ldr	r4, [pc, #204]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a174:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a176:	0038      	movs	r0, r7
1000a178:	47b0      	blx	r6
1000a17a:	4834      	ldr	r0, [pc, #208]	; (1000a24c <ble_pair_key_request_handler+0x120>)
1000a17c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a17e:	8828      	ldrh	r0, [r5, #0]
1000a180:	2113      	movs	r1, #19
1000a182:	4b33      	ldr	r3, [pc, #204]	; (1000a250 <ble_pair_key_request_handler+0x124>)
1000a184:	4798      	blx	r3
1000a186:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a188:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a18a:	2b00      	cmp	r3, #0
1000a18c:	d04c      	beq.n	1000a228 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a18e:	4829      	ldr	r0, [pc, #164]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a190:	4b29      	ldr	r3, [pc, #164]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a192:	4798      	blx	r3
1000a194:	482f      	ldr	r0, [pc, #188]	; (1000a254 <ble_pair_key_request_handler+0x128>)
1000a196:	4b2a      	ldr	r3, [pc, #168]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a198:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a19a:	20e2      	movs	r0, #226	; 0xe2
1000a19c:	e044      	b.n	1000a228 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a19e:	001a      	movs	r2, r3
1000a1a0:	3a30      	subs	r2, #48	; 0x30
1000a1a2:	2a09      	cmp	r2, #9
1000a1a4:	d8db      	bhi.n	1000a15e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a1a6:	aa02      	add	r2, sp, #8
1000a1a8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a1aa:	4038      	ands	r0, r7
1000a1ac:	4b2a      	ldr	r3, [pc, #168]	; (1000a258 <ble_pair_key_request_handler+0x12c>)
1000a1ae:	4798      	blx	r3
1000a1b0:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a1b2:	2e06      	cmp	r6, #6
1000a1b4:	d026      	beq.n	1000a204 <ble_pair_key_request_handler+0xd8>
1000a1b6:	e7d2      	b.n	1000a15e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a1b8:	481e      	ldr	r0, [pc, #120]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a1ba:	4b1f      	ldr	r3, [pc, #124]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a1bc:	4798      	blx	r3
1000a1be:	4827      	ldr	r0, [pc, #156]	; (1000a25c <ble_pair_key_request_handler+0x130>)
1000a1c0:	4b1f      	ldr	r3, [pc, #124]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a1c2:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a1c4:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a1c6:	4e24      	ldr	r6, [pc, #144]	; (1000a258 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a1c8:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a1ca:	5ce0      	ldrb	r0, [r4, r3]
1000a1cc:	47b0      	blx	r6
1000a1ce:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a1d0:	2c06      	cmp	r4, #6
1000a1d2:	d1f9      	bne.n	1000a1c8 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a1d4:	ab01      	add	r3, sp, #4
1000a1d6:	7899      	ldrb	r1, [r3, #2]
1000a1d8:	8828      	ldrh	r0, [r5, #0]
1000a1da:	aa02      	add	r2, sp, #8
1000a1dc:	4b20      	ldr	r3, [pc, #128]	; (1000a260 <ble_pair_key_request_handler+0x134>)
1000a1de:	4798      	blx	r3
1000a1e0:	2800      	cmp	r0, #0
1000a1e2:	d021      	beq.n	1000a228 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a1e4:	4813      	ldr	r0, [pc, #76]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a1e6:	4b14      	ldr	r3, [pc, #80]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a1e8:	4798      	blx	r3
1000a1ea:	481e      	ldr	r0, [pc, #120]	; (1000a264 <ble_pair_key_request_handler+0x138>)
1000a1ec:	4b14      	ldr	r3, [pc, #80]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a1ee:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a1f0:	2000      	movs	r0, #0
1000a1f2:	e019      	b.n	1000a228 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a1f4:	480f      	ldr	r0, [pc, #60]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a1f6:	4b10      	ldr	r3, [pc, #64]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a1f8:	4798      	blx	r3
1000a1fa:	481b      	ldr	r0, [pc, #108]	; (1000a268 <ble_pair_key_request_handler+0x13c>)
1000a1fc:	4b10      	ldr	r3, [pc, #64]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a1fe:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a200:	2000      	movs	r0, #0
1000a202:	e011      	b.n	1000a228 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a204:	480b      	ldr	r0, [pc, #44]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a206:	4b0c      	ldr	r3, [pc, #48]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a208:	4798      	blx	r3
1000a20a:	4818      	ldr	r0, [pc, #96]	; (1000a26c <ble_pair_key_request_handler+0x140>)
1000a20c:	4b0c      	ldr	r3, [pc, #48]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a20e:	4798      	blx	r3
1000a210:	e7d8      	b.n	1000a1c4 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a212:	ab01      	add	r3, sp, #4
1000a214:	885a      	ldrh	r2, [r3, #2]
1000a216:	2380      	movs	r3, #128	; 0x80
1000a218:	005b      	lsls	r3, r3, #1
1000a21a:	429a      	cmp	r2, r3
1000a21c:	d0cc      	beq.n	1000a1b8 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a21e:	ab01      	add	r3, sp, #4
1000a220:	789b      	ldrb	r3, [r3, #2]
1000a222:	2b01      	cmp	r3, #1
1000a224:	d0e6      	beq.n	1000a1f4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a226:	2000      	movs	r0, #0
}
1000a228:	b005      	add	sp, #20
1000a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a22c:	1001132c 	.word	0x1001132c
1000a230:	1000f8db 	.word	0x1000f8db
1000a234:	10010ce8 	.word	0x10010ce8
1000a238:	1000fa1d 	.word	0x1000fa1d
1000a23c:	100118b0 	.word	0x100118b0
1000a240:	1000f8fd 	.word	0x1000f8fd
1000a244:	1000ac1d 	.word	0x1000ac1d
1000a248:	100118d8 	.word	0x100118d8
1000a24c:	100118e4 	.word	0x100118e4
1000a250:	1000c8ed 	.word	0x1000c8ed
1000a254:	10011790 	.word	0x10011790
1000a258:	1000f931 	.word	0x1000f931
1000a25c:	100118f8 	.word	0x100118f8
1000a260:	1000cda9 	.word	0x1000cda9
1000a264:	10011930 	.word	0x10011930
1000a268:	10011948 	.word	0x10011948
1000a26c:	10011964 	.word	0x10011964

1000a270 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a270:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a272:	465f      	mov	r7, fp
1000a274:	4656      	mov	r6, sl
1000a276:	464d      	mov	r5, r9
1000a278:	b4e0      	push	{r5, r6, r7}
1000a27a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a27c:	8800      	ldrh	r0, [r0, #0]
1000a27e:	4b49      	ldr	r3, [pc, #292]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a280:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a282:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a284:	8919      	ldrh	r1, [r3, #8]
1000a286:	4281      	cmp	r1, r0
1000a288:	d137      	bne.n	1000a2fa <ble_encryption_request_handler+0x8a>
1000a28a:	0019      	movs	r1, r3
1000a28c:	315e      	adds	r1, #94	; 0x5e
1000a28e:	7809      	ldrb	r1, [r1, #0]
1000a290:	2901      	cmp	r1, #1
1000a292:	d932      	bls.n	1000a2fa <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a294:	4f43      	ldr	r7, [pc, #268]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a296:	0153      	lsls	r3, r2, #5
1000a298:	1a9d      	subs	r5, r3, r2
1000a29a:	00ad      	lsls	r5, r5, #2
1000a29c:	197d      	adds	r5, r7, r5
1000a29e:	355e      	adds	r5, #94	; 0x5e
1000a2a0:	2306      	movs	r3, #6
1000a2a2:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000a2a4:	4840      	ldr	r0, [pc, #256]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2a6:	4b41      	ldr	r3, [pc, #260]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a2a8:	469a      	mov	sl, r3
1000a2aa:	4798      	blx	r3
1000a2ac:	8831      	ldrh	r1, [r6, #0]
1000a2ae:	4840      	ldr	r0, [pc, #256]	; (1000a3b0 <ble_encryption_request_handler+0x140>)
1000a2b0:	4b40      	ldr	r3, [pc, #256]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a2b2:	4699      	mov	r9, r3
1000a2b4:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000a2b6:	483c      	ldr	r0, [pc, #240]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2b8:	47d0      	blx	sl
1000a2ba:	0163      	lsls	r3, r4, #5
1000a2bc:	1b1b      	subs	r3, r3, r4
1000a2be:	009b      	lsls	r3, r3, #2
1000a2c0:	18ff      	adds	r7, r7, r3
1000a2c2:	2370      	movs	r3, #112	; 0x70
1000a2c4:	469b      	mov	fp, r3
1000a2c6:	44bb      	add	fp, r7
1000a2c8:	465b      	mov	r3, fp
1000a2ca:	8819      	ldrh	r1, [r3, #0]
1000a2cc:	483a      	ldr	r0, [pc, #232]	; (1000a3b8 <ble_encryption_request_handler+0x148>)
1000a2ce:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000a2d0:	4835      	ldr	r0, [pc, #212]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2d2:	47d0      	blx	sl
1000a2d4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000a2d6:	4839      	ldr	r0, [pc, #228]	; (1000a3bc <ble_encryption_request_handler+0x14c>)
1000a2d8:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000a2da:	4833      	ldr	r0, [pc, #204]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2dc:	47d0      	blx	sl
1000a2de:	8871      	ldrh	r1, [r6, #2]
1000a2e0:	4837      	ldr	r0, [pc, #220]	; (1000a3c0 <ble_encryption_request_handler+0x150>)
1000a2e2:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000a2e4:	4830      	ldr	r0, [pc, #192]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2e6:	47d0      	blx	sl
1000a2e8:	0021      	movs	r1, r4
1000a2ea:	4836      	ldr	r0, [pc, #216]	; (1000a3c4 <ble_encryption_request_handler+0x154>)
1000a2ec:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a2ee:	465b      	mov	r3, fp
1000a2f0:	881a      	ldrh	r2, [r3, #0]
1000a2f2:	8873      	ldrh	r3, [r6, #2]
1000a2f4:	429a      	cmp	r2, r3
1000a2f6:	d12a      	bne.n	1000a34e <ble_encryption_request_handler+0xde>
1000a2f8:	e006      	b.n	1000a308 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2fa:	3401      	adds	r4, #1
1000a2fc:	b2e4      	uxtb	r4, r4
1000a2fe:	3201      	adds	r2, #1
1000a300:	337c      	adds	r3, #124	; 0x7c
1000a302:	2c05      	cmp	r4, #5
1000a304:	d1be      	bne.n	1000a284 <ble_encryption_request_handler+0x14>
1000a306:	e022      	b.n	1000a34e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a308:	0161      	lsls	r1, r4, #5
1000a30a:	1b09      	subs	r1, r1, r4
1000a30c:	0089      	lsls	r1, r1, #2
1000a30e:	4b25      	ldr	r3, [pc, #148]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a310:	1859      	adds	r1, r3, r1
1000a312:	3172      	adds	r1, #114	; 0x72
1000a314:	1d30      	adds	r0, r6, #4
1000a316:	2208      	movs	r2, #8
1000a318:	4b2b      	ldr	r3, [pc, #172]	; (1000a3c8 <ble_encryption_request_handler+0x158>)
1000a31a:	4798      	blx	r3
1000a31c:	2800      	cmp	r0, #0
1000a31e:	d116      	bne.n	1000a34e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000a320:	4821      	ldr	r0, [pc, #132]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a322:	4b22      	ldr	r3, [pc, #136]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a324:	4798      	blx	r3
1000a326:	4829      	ldr	r0, [pc, #164]	; (1000a3cc <ble_encryption_request_handler+0x15c>)
1000a328:	4b22      	ldr	r3, [pc, #136]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a32a:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a32c:	0162      	lsls	r2, r4, #5
1000a32e:	1b13      	subs	r3, r2, r4
1000a330:	009b      	lsls	r3, r3, #2
1000a332:	3360      	adds	r3, #96	; 0x60
1000a334:	491b      	ldr	r1, [pc, #108]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a336:	185b      	adds	r3, r3, r1
1000a338:	1b12      	subs	r2, r2, r4
1000a33a:	0092      	lsls	r2, r2, #2
1000a33c:	188a      	adds	r2, r1, r2
1000a33e:	7d11      	ldrb	r1, [r2, #20]
1000a340:	8830      	ldrh	r0, [r6, #0]
1000a342:	2201      	movs	r2, #1
1000a344:	4c22      	ldr	r4, [pc, #136]	; (1000a3d0 <ble_encryption_request_handler+0x160>)
1000a346:	47a0      	blx	r4
1000a348:	1e04      	subs	r4, r0, #0
1000a34a:	d01e      	beq.n	1000a38a <ble_encryption_request_handler+0x11a>
1000a34c:	e015      	b.n	1000a37a <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a34e:	4f16      	ldr	r7, [pc, #88]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a350:	0038      	movs	r0, r7
1000a352:	4e16      	ldr	r6, [pc, #88]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a354:	47b0      	blx	r6
1000a356:	481f      	ldr	r0, [pc, #124]	; (1000a3d4 <ble_encryption_request_handler+0x164>)
1000a358:	4d16      	ldr	r5, [pc, #88]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a35a:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a35c:	0038      	movs	r0, r7
1000a35e:	47b0      	blx	r6
1000a360:	481d      	ldr	r0, [pc, #116]	; (1000a3d8 <ble_encryption_request_handler+0x168>)
1000a362:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a364:	0163      	lsls	r3, r4, #5
1000a366:	1b1c      	subs	r4, r3, r4
1000a368:	00a4      	lsls	r4, r4, #2
1000a36a:	4b0e      	ldr	r3, [pc, #56]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a36c:	191c      	adds	r4, r3, r4
1000a36e:	8920      	ldrh	r0, [r4, #8]
1000a370:	2105      	movs	r1, #5
1000a372:	4b1a      	ldr	r3, [pc, #104]	; (1000a3dc <ble_encryption_request_handler+0x16c>)
1000a374:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a376:	24e2      	movs	r4, #226	; 0xe2
1000a378:	e00d      	b.n	1000a396 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a37a:	480b      	ldr	r0, [pc, #44]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a37c:	4b0b      	ldr	r3, [pc, #44]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a37e:	4798      	blx	r3
1000a380:	4817      	ldr	r0, [pc, #92]	; (1000a3e0 <ble_encryption_request_handler+0x170>)
1000a382:	4b0c      	ldr	r3, [pc, #48]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a384:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a386:	2400      	movs	r4, #0
1000a388:	e005      	b.n	1000a396 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000a38a:	4807      	ldr	r0, [pc, #28]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a38c:	4b07      	ldr	r3, [pc, #28]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a38e:	4798      	blx	r3
1000a390:	4814      	ldr	r0, [pc, #80]	; (1000a3e4 <ble_encryption_request_handler+0x174>)
1000a392:	4b08      	ldr	r3, [pc, #32]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a394:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000a396:	0020      	movs	r0, r4
1000a398:	bc1c      	pop	{r2, r3, r4}
1000a39a:	4691      	mov	r9, r2
1000a39c:	469a      	mov	sl, r3
1000a39e:	46a3      	mov	fp, r4
1000a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3a2:	46c0      	nop			; (mov r8, r8)
1000a3a4:	100126dc 	.word	0x100126dc
1000a3a8:	10010ce8 	.word	0x10010ce8
1000a3ac:	1000fa1d 	.word	0x1000fa1d
1000a3b0:	10011978 	.word	0x10011978
1000a3b4:	1000f8fd 	.word	0x1000f8fd
1000a3b8:	100119a4 	.word	0x100119a4
1000a3bc:	100119b8 	.word	0x100119b8
1000a3c0:	100119cc 	.word	0x100119cc
1000a3c4:	100119dc 	.word	0x100119dc
1000a3c8:	1000f8bd 	.word	0x1000f8bd
1000a3cc:	100119ec 	.word	0x100119ec
1000a3d0:	1000ce9d 	.word	0x1000ce9d
1000a3d4:	10011a00 	.word	0x10011a00
1000a3d8:	10011a38 	.word	0x10011a38
1000a3dc:	1000c8ed 	.word	0x1000c8ed
1000a3e0:	10011a90 	.word	0x10011a90
1000a3e4:	10011ab0 	.word	0x10011ab0

1000a3e8 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a3e8:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a3ea:	2a00      	cmp	r2, #0
1000a3ec:	d047      	beq.n	1000a47e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a3ee:	2906      	cmp	r1, #6
1000a3f0:	d847      	bhi.n	1000a482 <ble_mgr_events_callback_handler+0x9a>
1000a3f2:	0089      	lsls	r1, r1, #2
1000a3f4:	4b28      	ldr	r3, [pc, #160]	; (1000a498 <ble_mgr_events_callback_handler+0xb0>)
1000a3f6:	585b      	ldr	r3, [r3, r1]
1000a3f8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a3fa:	4b28      	ldr	r3, [pc, #160]	; (1000a49c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a3fc:	2405      	movs	r4, #5
1000a3fe:	e00a      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a400:	4b27      	ldr	r3, [pc, #156]	; (1000a4a0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a402:	2401      	movs	r4, #1
			}
			break;
1000a404:	e007      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a406:	4b27      	ldr	r3, [pc, #156]	; (1000a4a4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a408:	2405      	movs	r4, #5
			}
			break;
1000a40a:	e004      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a40c:	4b26      	ldr	r3, [pc, #152]	; (1000a4a8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a40e:	2401      	movs	r4, #1
			}
			break;
1000a410:	e001      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a412:	4b26      	ldr	r3, [pc, #152]	; (1000a4ac <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a414:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a416:	2800      	cmp	r0, #0
1000a418:	d116      	bne.n	1000a448 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a41a:	6819      	ldr	r1, [r3, #0]
1000a41c:	2900      	cmp	r1, #0
1000a41e:	d10b      	bne.n	1000a438 <ble_mgr_events_callback_handler+0x50>
1000a420:	e006      	b.n	1000a430 <ble_mgr_events_callback_handler+0x48>
1000a422:	001d      	movs	r5, r3
1000a424:	3304      	adds	r3, #4
1000a426:	1f18      	subs	r0, r3, #4
1000a428:	6800      	ldr	r0, [r0, #0]
1000a42a:	2800      	cmp	r0, #0
1000a42c:	d106      	bne.n	1000a43c <ble_mgr_events_callback_handler+0x54>
1000a42e:	e000      	b.n	1000a432 <ble_mgr_events_callback_handler+0x4a>
1000a430:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a432:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a434:	2101      	movs	r1, #1
						break;
1000a436:	e02c      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
1000a438:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a43a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a43c:	3101      	adds	r1, #1
1000a43e:	b2c9      	uxtb	r1, r1
1000a440:	42a1      	cmp	r1, r4
1000a442:	d3ee      	bcc.n	1000a422 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a444:	2100      	movs	r1, #0
1000a446:	e024      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
1000a448:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a44a:	2801      	cmp	r0, #1
1000a44c:	d121      	bne.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a44e:	6819      	ldr	r1, [r3, #0]
1000a450:	428a      	cmp	r2, r1
1000a452:	d10c      	bne.n	1000a46e <ble_mgr_events_callback_handler+0x86>
1000a454:	e006      	b.n	1000a464 <ble_mgr_events_callback_handler+0x7c>
1000a456:	001d      	movs	r5, r3
1000a458:	3304      	adds	r3, #4
1000a45a:	1f18      	subs	r0, r3, #4
1000a45c:	6800      	ldr	r0, [r0, #0]
1000a45e:	4282      	cmp	r2, r0
1000a460:	d107      	bne.n	1000a472 <ble_mgr_events_callback_handler+0x8a>
1000a462:	e000      	b.n	1000a466 <ble_mgr_events_callback_handler+0x7e>
1000a464:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a466:	2300      	movs	r3, #0
1000a468:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a46a:	2101      	movs	r1, #1
						break;
1000a46c:	e011      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
1000a46e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a470:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a472:	3101      	adds	r1, #1
1000a474:	b2c9      	uxtb	r1, r1
1000a476:	42a1      	cmp	r1, r4
1000a478:	d3ed      	bcc.n	1000a456 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a47a:	2100      	movs	r1, #0
1000a47c:	e009      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a47e:	2100      	movs	r1, #0
1000a480:	e007      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a482:	2100      	movs	r1, #0
1000a484:	e005      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a486:	4b0a      	ldr	r3, [pc, #40]	; (1000a4b0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a488:	2405      	movs	r4, #5
1000a48a:	e7c4      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a48c:	4b09      	ldr	r3, [pc, #36]	; (1000a4b4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a48e:	2401      	movs	r4, #1
1000a490:	e7c1      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a492:	0008      	movs	r0, r1
1000a494:	bd30      	pop	{r4, r5, pc}
1000a496:	46c0      	nop			; (mov r8, r8)
1000a498:	10011220 	.word	0x10011220
1000a49c:	100126c8 	.word	0x100126c8
1000a4a0:	100126c4 	.word	0x100126c4
1000a4a4:	1001294c 	.word	0x1001294c
1000a4a8:	10012ef0 	.word	0x10012ef0
1000a4ac:	10012960 	.word	0x10012960
1000a4b0:	10012974 	.word	0x10012974
1000a4b4:	100129ac 	.word	0x100129ac

1000a4b8 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4ba:	4647      	mov	r7, r8
1000a4bc:	b480      	push	{r7}
1000a4be:	b090      	sub	sp, #64	; 0x40
1000a4c0:	0005      	movs	r5, r0
/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a4c2:	2400      	movs	r4, #0
1000a4c4:	4b6a      	ldr	r3, [pc, #424]	; (1000a670 <ble_device_init+0x1b8>)
1000a4c6:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a4c8:	2207      	movs	r2, #7
1000a4ca:	2100      	movs	r1, #0
1000a4cc:	4869      	ldr	r0, [pc, #420]	; (1000a674 <ble_device_init+0x1bc>)
1000a4ce:	4e6a      	ldr	r6, [pc, #424]	; (1000a678 <ble_device_init+0x1c0>)
1000a4d0:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a4d2:	2212      	movs	r2, #18
1000a4d4:	2100      	movs	r1, #0
1000a4d6:	4869      	ldr	r0, [pc, #420]	; (1000a67c <ble_device_init+0x1c4>)
1000a4d8:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a4da:	4b69      	ldr	r3, [pc, #420]	; (1000a680 <ble_device_init+0x1c8>)
1000a4dc:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a4de:	22cd      	movs	r2, #205	; 0xcd
1000a4e0:	0092      	lsls	r2, r2, #2
1000a4e2:	2100      	movs	r1, #0
1000a4e4:	4867      	ldr	r0, [pc, #412]	; (1000a684 <ble_device_init+0x1cc>)
1000a4e6:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a4e8:	4b67      	ldr	r3, [pc, #412]	; (1000a688 <ble_device_init+0x1d0>)
1000a4ea:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a4ec:	2283      	movs	r2, #131	; 0x83
1000a4ee:	0092      	lsls	r2, r2, #2
1000a4f0:	2100      	movs	r1, #0
1000a4f2:	4866      	ldr	r0, [pc, #408]	; (1000a68c <ble_device_init+0x1d4>)
1000a4f4:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a4f6:	220c      	movs	r2, #12
1000a4f8:	2100      	movs	r1, #0
1000a4fa:	4865      	ldr	r0, [pc, #404]	; (1000a690 <ble_device_init+0x1d8>)
1000a4fc:	47b0      	blx	r6

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a4fe:	4b65      	ldr	r3, [pc, #404]	; (1000a694 <ble_device_init+0x1dc>)
1000a500:	601c      	str	r4, [r3, #0]
1000a502:	605c      	str	r4, [r3, #4]
1000a504:	609c      	str	r4, [r3, #8]
1000a506:	60dc      	str	r4, [r3, #12]
1000a508:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a50a:	4b63      	ldr	r3, [pc, #396]	; (1000a698 <ble_device_init+0x1e0>)
1000a50c:	601c      	str	r4, [r3, #0]
1000a50e:	605c      	str	r4, [r3, #4]
1000a510:	609c      	str	r4, [r3, #8]
1000a512:	60dc      	str	r4, [r3, #12]
1000a514:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a516:	4b61      	ldr	r3, [pc, #388]	; (1000a69c <ble_device_init+0x1e4>)
1000a518:	601c      	str	r4, [r3, #0]
1000a51a:	605c      	str	r4, [r3, #4]
1000a51c:	609c      	str	r4, [r3, #8]
1000a51e:	60dc      	str	r4, [r3, #12]
1000a520:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a522:	4b5f      	ldr	r3, [pc, #380]	; (1000a6a0 <ble_device_init+0x1e8>)
1000a524:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a526:	4b5f      	ldr	r3, [pc, #380]	; (1000a6a4 <ble_device_init+0x1ec>)
1000a528:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a52a:	4b5f      	ldr	r3, [pc, #380]	; (1000a6a8 <ble_device_init+0x1f0>)
1000a52c:	601c      	str	r4, [r3, #0]
1000a52e:	605c      	str	r4, [r3, #4]
1000a530:	609c      	str	r4, [r3, #8]
1000a532:	60dc      	str	r4, [r3, #12]
1000a534:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a536:	4b5d      	ldr	r3, [pc, #372]	; (1000a6ac <ble_device_init+0x1f4>)
1000a538:	601c      	str	r4, [r3, #0]
1000a53a:	4c5d      	ldr	r4, [pc, #372]	; (1000a6b0 <ble_device_init+0x1f8>)
1000a53c:	239b      	movs	r3, #155	; 0x9b
1000a53e:	009b      	lsls	r3, r3, #2
1000a540:	4698      	mov	r8, r3
1000a542:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a544:	4f4c      	ldr	r7, [pc, #304]	; (1000a678 <ble_device_init+0x1c0>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a546:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a548:	227c      	movs	r2, #124	; 0x7c
1000a54a:	2100      	movs	r1, #0
1000a54c:	0020      	movs	r0, r4
1000a54e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a550:	0023      	movs	r3, r4
1000a552:	335e      	adds	r3, #94	; 0x5e
1000a554:	2200      	movs	r2, #0
1000a556:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a558:	7626      	strb	r6, [r4, #24]
1000a55a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a55c:	45a0      	cmp	r8, r4
1000a55e:	d1f3      	bne.n	1000a548 <ble_device_init+0x90>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a560:	4b54      	ldr	r3, [pc, #336]	; (1000a6b4 <ble_device_init+0x1fc>)
1000a562:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a564:	4854      	ldr	r0, [pc, #336]	; (1000a6b8 <ble_device_init+0x200>)
1000a566:	4b55      	ldr	r3, [pc, #340]	; (1000a6bc <ble_device_init+0x204>)
1000a568:	4798      	blx	r3
1000a56a:	4855      	ldr	r0, [pc, #340]	; (1000a6c0 <ble_device_init+0x208>)
1000a56c:	4b55      	ldr	r3, [pc, #340]	; (1000a6c4 <ble_device_init+0x20c>)
1000a56e:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a570:	4847      	ldr	r0, [pc, #284]	; (1000a690 <ble_device_init+0x1d8>)
1000a572:	4b55      	ldr	r3, [pc, #340]	; (1000a6c8 <ble_device_init+0x210>)
1000a574:	4798      	blx	r3
1000a576:	2800      	cmp	r0, #0
1000a578:	d00b      	beq.n	1000a592 <ble_device_init+0xda>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a57a:	4e4f      	ldr	r6, [pc, #316]	; (1000a6b8 <ble_device_init+0x200>)
1000a57c:	0030      	movs	r0, r6
1000a57e:	4d4f      	ldr	r5, [pc, #316]	; (1000a6bc <ble_device_init+0x204>)
1000a580:	47a8      	blx	r5
1000a582:	4852      	ldr	r0, [pc, #328]	; (1000a6cc <ble_device_init+0x214>)
1000a584:	4c4f      	ldr	r4, [pc, #316]	; (1000a6c4 <ble_device_init+0x20c>)
1000a586:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a588:	0030      	movs	r0, r6
1000a58a:	47a8      	blx	r5
1000a58c:	4850      	ldr	r0, [pc, #320]	; (1000a6d0 <ble_device_init+0x218>)
1000a58e:	47a0      	blx	r4
1000a590:	e7fe      	b.n	1000a590 <ble_device_init+0xd8>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a592:	4a50      	ldr	r2, [pc, #320]	; (1000a6d4 <ble_device_init+0x21c>)
1000a594:	2100      	movs	r1, #0
1000a596:	2000      	movs	r0, #0
1000a598:	4c4f      	ldr	r4, [pc, #316]	; (1000a6d8 <ble_device_init+0x220>)
1000a59a:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a59c:	4a4f      	ldr	r2, [pc, #316]	; (1000a6dc <ble_device_init+0x224>)
1000a59e:	2102      	movs	r1, #2
1000a5a0:	2000      	movs	r0, #0
1000a5a2:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a5a4:	2109      	movs	r1, #9
1000a5a6:	484e      	ldr	r0, [pc, #312]	; (1000a6e0 <ble_device_init+0x228>)
1000a5a8:	4b4e      	ldr	r3, [pc, #312]	; (1000a6e4 <ble_device_init+0x22c>)
1000a5aa:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a5ac:	2800      	cmp	r0, #0
1000a5ae:	d005      	beq.n	1000a5bc <ble_device_init+0x104>
	{
		DBG_LOG("Device name set failed");
1000a5b0:	4841      	ldr	r0, [pc, #260]	; (1000a6b8 <ble_device_init+0x200>)
1000a5b2:	4b42      	ldr	r3, [pc, #264]	; (1000a6bc <ble_device_init+0x204>)
1000a5b4:	4798      	blx	r3
1000a5b6:	484c      	ldr	r0, [pc, #304]	; (1000a6e8 <ble_device_init+0x230>)
1000a5b8:	4b42      	ldr	r3, [pc, #264]	; (1000a6c4 <ble_device_init+0x20c>)
1000a5ba:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a5bc:	2207      	movs	r2, #7
1000a5be:	494b      	ldr	r1, [pc, #300]	; (1000a6ec <ble_device_init+0x234>)
1000a5c0:	3108      	adds	r1, #8
1000a5c2:	a804      	add	r0, sp, #16
1000a5c4:	4b4a      	ldr	r3, [pc, #296]	; (1000a6f0 <ble_device_init+0x238>)
1000a5c6:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a5c8:	2226      	movs	r2, #38	; 0x26
1000a5ca:	2100      	movs	r1, #0
1000a5cc:	a806      	add	r0, sp, #24
1000a5ce:	4b2a      	ldr	r3, [pc, #168]	; (1000a678 <ble_device_init+0x1c0>)
1000a5d0:	4798      	blx	r3
	
	if (addr == NULL)
1000a5d2:	2d00      	cmp	r5, #0
1000a5d4:	d10c      	bne.n	1000a5f0 <ble_device_init+0x138>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a5d6:	a804      	add	r0, sp, #16
1000a5d8:	4b46      	ldr	r3, [pc, #280]	; (1000a6f4 <ble_device_init+0x23c>)
1000a5da:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a5dc:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a5de:	2800      	cmp	r0, #0
1000a5e0:	d006      	beq.n	1000a5f0 <ble_device_init+0x138>
		{
			DBG_LOG("BD address get failed");
1000a5e2:	4835      	ldr	r0, [pc, #212]	; (1000a6b8 <ble_device_init+0x200>)
1000a5e4:	4b35      	ldr	r3, [pc, #212]	; (1000a6bc <ble_device_init+0x204>)
1000a5e6:	4798      	blx	r3
1000a5e8:	4843      	ldr	r0, [pc, #268]	; (1000a6f8 <ble_device_init+0x240>)
1000a5ea:	4b36      	ldr	r3, [pc, #216]	; (1000a6c4 <ble_device_init+0x20c>)
1000a5ec:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a5ee:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a5f0:	4831      	ldr	r0, [pc, #196]	; (1000a6b8 <ble_device_init+0x200>)
1000a5f2:	4b32      	ldr	r3, [pc, #200]	; (1000a6bc <ble_device_init+0x204>)
1000a5f4:	4798      	blx	r3
1000a5f6:	792b      	ldrb	r3, [r5, #4]
1000a5f8:	796a      	ldrb	r2, [r5, #5]
1000a5fa:	79a9      	ldrb	r1, [r5, #6]
1000a5fc:	7828      	ldrb	r0, [r5, #0]
1000a5fe:	9003      	str	r0, [sp, #12]
1000a600:	7868      	ldrb	r0, [r5, #1]
1000a602:	9002      	str	r0, [sp, #8]
1000a604:	78a8      	ldrb	r0, [r5, #2]
1000a606:	9001      	str	r0, [sp, #4]
1000a608:	78e8      	ldrb	r0, [r5, #3]
1000a60a:	9000      	str	r0, [sp, #0]
1000a60c:	483b      	ldr	r0, [pc, #236]	; (1000a6fc <ble_device_init+0x244>)
1000a60e:	4c2d      	ldr	r4, [pc, #180]	; (1000a6c4 <ble_device_init+0x20c>)
1000a610:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a612:	ac06      	add	r4, sp, #24
1000a614:	2305      	movs	r3, #5
1000a616:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a618:	4b39      	ldr	r3, [pc, #228]	; (1000a700 <ble_device_init+0x248>)
1000a61a:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a61c:	2207      	movs	r2, #7
1000a61e:	0029      	movs	r1, r5
1000a620:	a807      	add	r0, sp, #28
1000a622:	4b33      	ldr	r3, [pc, #204]	; (1000a6f0 <ble_device_init+0x238>)
1000a624:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a626:	2300      	movs	r3, #0
1000a628:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a62a:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a62c:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a62e:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a630:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a632:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a634:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a636:	2380      	movs	r3, #128	; 0x80
1000a638:	009b      	lsls	r3, r3, #2
1000a63a:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a63c:	0020      	movs	r0, r4
1000a63e:	4b31      	ldr	r3, [pc, #196]	; (1000a704 <ble_device_init+0x24c>)
1000a640:	4798      	blx	r3
1000a642:	2800      	cmp	r0, #0
1000a644:	d005      	beq.n	1000a652 <ble_device_init+0x19a>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a646:	481c      	ldr	r0, [pc, #112]	; (1000a6b8 <ble_device_init+0x200>)
1000a648:	4b1c      	ldr	r3, [pc, #112]	; (1000a6bc <ble_device_init+0x204>)
1000a64a:	4798      	blx	r3
1000a64c:	482e      	ldr	r0, [pc, #184]	; (1000a708 <ble_device_init+0x250>)
1000a64e:	4b1d      	ldr	r3, [pc, #116]	; (1000a6c4 <ble_device_init+0x20c>)
1000a650:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a652:	0028      	movs	r0, r5
1000a654:	4b2d      	ldr	r3, [pc, #180]	; (1000a70c <ble_device_init+0x254>)
1000a656:	4798      	blx	r3
1000a658:	2800      	cmp	r0, #0
1000a65a:	d005      	beq.n	1000a668 <ble_device_init+0x1b0>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a65c:	4816      	ldr	r0, [pc, #88]	; (1000a6b8 <ble_device_init+0x200>)
1000a65e:	4b17      	ldr	r3, [pc, #92]	; (1000a6bc <ble_device_init+0x204>)
1000a660:	4798      	blx	r3
1000a662:	482b      	ldr	r0, [pc, #172]	; (1000a710 <ble_device_init+0x258>)
1000a664:	4b17      	ldr	r3, [pc, #92]	; (1000a6c4 <ble_device_init+0x20c>)
1000a666:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a668:	b010      	add	sp, #64	; 0x40
1000a66a:	bc04      	pop	{r2}
1000a66c:	4690      	mov	r8, r2
1000a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a670:	100123b8 	.word	0x100123b8
1000a674:	100123c0 	.word	0x100123c0
1000a678:	1000f8ed 	.word	0x1000f8ed
1000a67c:	10012988 	.word	0x10012988
1000a680:	100123bc 	.word	0x100123bc
1000a684:	100129b0 	.word	0x100129b0
1000a688:	100129a8 	.word	0x100129a8
1000a68c:	10012ce4 	.word	0x10012ce4
1000a690:	1001299c 	.word	0x1001299c
1000a694:	10012960 	.word	0x10012960
1000a698:	10012974 	.word	0x10012974
1000a69c:	100126c8 	.word	0x100126c8
1000a6a0:	100129ac 	.word	0x100129ac
1000a6a4:	100126c4 	.word	0x100126c4
1000a6a8:	1001294c 	.word	0x1001294c
1000a6ac:	10012ef0 	.word	0x10012ef0
1000a6b0:	100126dc 	.word	0x100126dc
1000a6b4:	10012948 	.word	0x10012948
1000a6b8:	10010ce8 	.word	0x10010ce8
1000a6bc:	1000fa1d 	.word	0x1000fa1d
1000a6c0:	10011acc 	.word	0x10011acc
1000a6c4:	1000f8fd 	.word	0x1000f8fd
1000a6c8:	1000c579 	.word	0x1000c579
1000a6cc:	10011ae0 	.word	0x10011ae0
1000a6d0:	10011b00 	.word	0x10011b00
1000a6d4:	10011ce4 	.word	0x10011ce4
1000a6d8:	1000a3e9 	.word	0x1000a3e9
1000a6dc:	10011348 	.word	0x10011348
1000a6e0:	10011b3c 	.word	0x10011b3c
1000a6e4:	1000c491 	.word	0x1000c491
1000a6e8:	10011b48 	.word	0x10011b48
1000a6ec:	1001132c 	.word	0x1001132c
1000a6f0:	1000f8db 	.word	0x1000f8db
1000a6f4:	1000c4c5 	.word	0x1000c4c5
1000a6f8:	10011b60 	.word	0x10011b60
1000a6fc:	10011b78 	.word	0x10011b78
1000a700:	00003a98 	.word	0x00003a98
1000a704:	1000c4e9 	.word	0x1000c4e9
1000a708:	10011bb0 	.word	0x10011bb0
1000a70c:	1000c711 	.word	0x1000c711
1000a710:	10011bd4 	.word	0x10011bd4

1000a714 <gap_dev_connect>:
	return AT_BLE_SUCCESS;
}

/** @brief request the peer device for connection */
at_ble_status_t gap_dev_connect(at_ble_addr_t *dev_addr)
{
1000a714:	b510      	push	{r4, lr}
1000a716:	b086      	sub	sp, #24
1000a718:	0004      	movs	r4, r0
	at_ble_connection_params_t gap_conn_parameter;
	
	memcpy((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)dev_addr, sizeof(at_ble_addr_t));
1000a71a:	2207      	movs	r2, #7
1000a71c:	0001      	movs	r1, r0
1000a71e:	480c      	ldr	r0, [pc, #48]	; (1000a750 <gap_dev_connect+0x3c>)
1000a720:	4b0c      	ldr	r3, [pc, #48]	; (1000a754 <gap_dev_connect+0x40>)
1000a722:	4798      	blx	r3

	gap_conn_parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
1000a724:	ab03      	add	r3, sp, #12
1000a726:	2208      	movs	r2, #8
1000a728:	801a      	strh	r2, [r3, #0]
	gap_conn_parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
1000a72a:	3202      	adds	r2, #2
1000a72c:	805a      	strh	r2, [r3, #2]
	gap_conn_parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
1000a72e:	3a06      	subs	r2, #6
1000a730:	809a      	strh	r2, [r3, #4]
	gap_conn_parameter.ce_len_min = GAP_CE_LEN_MIN;
1000a732:	2200      	movs	r2, #0
1000a734:	811a      	strh	r2, [r3, #8]
	gap_conn_parameter.ce_len_max = GAP_CE_LEN_MAX;
1000a736:	815a      	strh	r2, [r3, #10]
	gap_conn_parameter.superv_to = GAP_SUPERVISION_TIMOUT;
1000a738:	22fa      	movs	r2, #250	; 0xfa
1000a73a:	00d2      	lsls	r2, r2, #3
1000a73c:	80da      	strh	r2, [r3, #6]

	return (at_ble_connect(dev_addr, GAP_CONNECT_PEER_COUNT, SCAN_INTERVAL, SCAN_WINDOW, &gap_conn_parameter));
1000a73e:	9300      	str	r3, [sp, #0]
1000a740:	2360      	movs	r3, #96	; 0x60
1000a742:	2260      	movs	r2, #96	; 0x60
1000a744:	2101      	movs	r1, #1
1000a746:	0020      	movs	r0, r4
1000a748:	4c03      	ldr	r4, [pc, #12]	; (1000a758 <gap_dev_connect+0x44>)
1000a74a:	47a0      	blx	r4
}
1000a74c:	b006      	add	sp, #24
1000a74e:	bd10      	pop	{r4, pc}
1000a750:	100123c0 	.word	0x100123c0
1000a754:	1000f8db 	.word	0x1000f8db
1000a758:	1000c815 	.word	0x1000c815

1000a75c <gap_dev_scan>:

/** @brief instructs device to start scanning */
at_ble_status_t gap_dev_scan(void)
{
1000a75c:	b510      	push	{r4, lr}
1000a75e:	b084      	sub	sp, #16
	/* Device Scan discover started*/
	DBG_LOG("Scanning...Please wait...");
1000a760:	480a      	ldr	r0, [pc, #40]	; (1000a78c <gap_dev_scan+0x30>)
1000a762:	4b0b      	ldr	r3, [pc, #44]	; (1000a790 <gap_dev_scan+0x34>)
1000a764:	4798      	blx	r3
1000a766:	480b      	ldr	r0, [pc, #44]	; (1000a794 <gap_dev_scan+0x38>)
1000a768:	4b0b      	ldr	r3, [pc, #44]	; (1000a798 <gap_dev_scan+0x3c>)
1000a76a:	4798      	blx	r3
	/* make service discover counter to zero*/
	scan_response_count = 0;
1000a76c:	2300      	movs	r3, #0
1000a76e:	4a0b      	ldr	r2, [pc, #44]	; (1000a79c <gap_dev_scan+0x40>)
1000a770:	7013      	strb	r3, [r2, #0]
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
1000a772:	2201      	movs	r2, #1
1000a774:	9202      	str	r2, [sp, #8]
1000a776:	9301      	str	r3, [sp, #4]
1000a778:	9300      	str	r3, [sp, #0]
1000a77a:	3301      	adds	r3, #1
1000a77c:	2200      	movs	r2, #0
1000a77e:	2160      	movs	r1, #96	; 0x60
1000a780:	2060      	movs	r0, #96	; 0x60
1000a782:	4c07      	ldr	r4, [pc, #28]	; (1000a7a0 <gap_dev_scan+0x44>)
1000a784:	47a0      	blx	r4
}
1000a786:	b004      	add	sp, #16
1000a788:	bd10      	pop	{r4, pc}
1000a78a:	46c0      	nop			; (mov r8, r8)
1000a78c:	10010ce8 	.word	0x10010ce8
1000a790:	1000fa1d 	.word	0x1000fa1d
1000a794:	10011bf4 	.word	0x10011bf4
1000a798:	1000f8fd 	.word	0x1000f8fd
1000a79c:	100123bc 	.word	0x100123bc
1000a7a0:	1000c765 	.word	0x1000c765

1000a7a4 <scan_info_parse>:
}

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
1000a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7a6:	465f      	mov	r7, fp
1000a7a8:	4656      	mov	r6, sl
1000a7aa:	464d      	mov	r5, r9
1000a7ac:	4644      	mov	r4, r8
1000a7ae:	b4f0      	push	{r4, r5, r6, r7}
1000a7b0:	b087      	sub	sp, #28
1000a7b2:	4681      	mov	r9, r0
1000a7b4:	9101      	str	r1, [sp, #4]
1000a7b6:	4693      	mov	fp, r2
	if (scan_info_data->adv_data_len) {
1000a7b8:	2327      	movs	r3, #39	; 0x27
1000a7ba:	5cc6      	ldrb	r6, [r0, r3]
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000a7bc:	20e2      	movs	r0, #226	; 0xe2

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
	if (scan_info_data->adv_data_len) {
1000a7be:	2e00      	cmp	r6, #0
1000a7c0:	d062      	beq.n	1000a888 <scan_info_parse+0xe4>
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
1000a7c2:	2200      	movs	r2, #0
1000a7c4:	ab04      	add	r3, sp, #16
1000a7c6:	701a      	strb	r2, [r3, #0]
1000a7c8:	2500      	movs	r5, #0
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000a7ca:	2301      	movs	r3, #1
1000a7cc:	425b      	negs	r3, r3
1000a7ce:	4698      	mov	r8, r3
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000a7d0:	000b      	movs	r3, r1
1000a7d2:	3301      	adds	r3, #1
1000a7d4:	9300      	str	r3, [sp, #0]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000a7d6:	4b30      	ldr	r3, [pc, #192]	; (1000a898 <scan_info_parse+0xf4>)
1000a7d8:	469a      	mov	sl, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
1000a7da:	464b      	mov	r3, r9
1000a7dc:	195a      	adds	r2, r3, r5
1000a7de:	7a11      	ldrb	r1, [r2, #8]
1000a7e0:	ab04      	add	r3, sp, #16
1000a7e2:	7019      	strb	r1, [r3, #0]
			adv_element_data.type
			= scan_info_data->adv_data[index + 1];
1000a7e4:	7a52      	ldrb	r2, [r2, #9]
1000a7e6:	705a      	strb	r2, [r3, #1]
			adv_element_data.data
			= &scan_info_data->adv_data[index + 2];
1000a7e8:	002a      	movs	r2, r5
1000a7ea:	320a      	adds	r2, #10
1000a7ec:	444a      	add	r2, r9
1000a7ee:	9205      	str	r2, [sp, #20]
			adv_element_p = &adv_element_data;

			if (adv_element_p->type == adv_type) {
1000a7f0:	785b      	ldrb	r3, [r3, #1]
1000a7f2:	b2db      	uxtb	r3, r3
1000a7f4:	455b      	cmp	r3, fp
1000a7f6:	d136      	bne.n	1000a866 <scan_info_parse+0xc2>
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
1000a7f8:	ab04      	add	r3, sp, #16
1000a7fa:	781c      	ldrb	r4, [r3, #0]
				/* actual size of the data	*/
				adv_type_size -= 1;
1000a7fc:	3c01      	subs	r4, #1
1000a7fe:	b2e4      	uxtb	r4, r4
				while (adv_type_size) {
1000a800:	2c00      	cmp	r4, #0
1000a802:	d030      	beq.n	1000a866 <scan_info_parse+0xc2>
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
1000a804:	9b01      	ldr	r3, [sp, #4]
1000a806:	781f      	ldrb	r7, [r3, #0]
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000a808:	4643      	mov	r3, r8
1000a80a:	9303      	str	r3, [sp, #12]
					if (ble_service_uuid->type ==
1000a80c:	2f00      	cmp	r7, #0
1000a80e:	d10a      	bne.n	1000a826 <scan_info_parse+0x82>
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000a810:	9805      	ldr	r0, [sp, #20]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000a812:	2202      	movs	r2, #2
1000a814:	9900      	ldr	r1, [sp, #0]
1000a816:	47d0      	blx	sl
1000a818:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_16_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
1000a81a:	9b05      	ldr	r3, [sp, #20]
1000a81c:	3302      	adds	r3, #2
1000a81e:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
1000a820:	3c02      	subs	r4, #2
1000a822:	b2e4      	uxtb	r4, r4
1000a824:	e01a      	b.n	1000a85c <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000a826:	2f01      	cmp	r7, #1
1000a828:	d10b      	bne.n	1000a842 <scan_info_parse+0x9e>
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000a82a:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_16_LEN;
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
1000a82c:	2204      	movs	r2, #4
1000a82e:	9900      	ldr	r1, [sp, #0]
1000a830:	4b19      	ldr	r3, [pc, #100]	; (1000a898 <scan_info_parse+0xf4>)
1000a832:	4798      	blx	r3
1000a834:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_32_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
1000a836:	9b05      	ldr	r3, [sp, #20]
1000a838:	3304      	adds	r3, #4
1000a83a:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000a83c:	3c04      	subs	r4, #4
1000a83e:	b2e4      	uxtb	r4, r4
1000a840:	e00c      	b.n	1000a85c <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000a842:	2f02      	cmp	r7, #2
1000a844:	d10a      	bne.n	1000a85c <scan_info_parse+0xb8>
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000a846:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000a848:	2210      	movs	r2, #16
1000a84a:	9900      	ldr	r1, [sp, #0]
1000a84c:	4b12      	ldr	r3, [pc, #72]	; (1000a898 <scan_info_parse+0xf4>)
1000a84e:	4798      	blx	r3
1000a850:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_128_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
1000a852:	9b05      	ldr	r3, [sp, #20]
1000a854:	3310      	adds	r3, #16
1000a856:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000a858:	3c04      	subs	r4, #4
1000a85a:	b2e4      	uxtb	r4, r4
					}

					if (cmp_status == 0) {
1000a85c:	9b03      	ldr	r3, [sp, #12]
1000a85e:	2b00      	cmp	r3, #0
1000a860:	d011      	beq.n	1000a886 <scan_info_parse+0xe2>
			if (adv_element_p->type == adv_type) {
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
1000a862:	2c00      	cmp	r4, #0
1000a864:	d1d0      	bne.n	1000a808 <scan_info_parse+0x64>
						return AT_BLE_SUCCESS;
					}
				}
			}

			index += (adv_element_data.len + 1);
1000a866:	aa04      	add	r2, sp, #16
1000a868:	7813      	ldrb	r3, [r2, #0]
1000a86a:	3301      	adds	r3, #1
1000a86c:	18ed      	adds	r5, r5, r3
1000a86e:	b2ed      	uxtb	r5, r5
			adv_element_data.len += 1;
1000a870:	7813      	ldrb	r3, [r2, #0]
1000a872:	3301      	adds	r3, #1
1000a874:	b2db      	uxtb	r3, r3
1000a876:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
1000a878:	7813      	ldrb	r3, [r2, #0]
1000a87a:	1af6      	subs	r6, r6, r3
1000a87c:	b2f6      	uxtb	r6, r6
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
1000a87e:	2e00      	cmp	r6, #0
1000a880:	d1ab      	bne.n	1000a7da <scan_info_parse+0x36>
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000a882:	20e2      	movs	r0, #226	; 0xe2
1000a884:	e000      	b.n	1000a888 <scan_info_parse+0xe4>
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					}

					if (cmp_status == 0) {
						return AT_BLE_SUCCESS;
1000a886:	2000      	movs	r0, #0
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
}
1000a888:	b007      	add	sp, #28
1000a88a:	bc3c      	pop	{r2, r3, r4, r5}
1000a88c:	4690      	mov	r8, r2
1000a88e:	4699      	mov	r9, r3
1000a890:	46a2      	mov	sl, r4
1000a892:	46ab      	mov	fp, r5
1000a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a896:	46c0      	nop			; (mov r8, r8)
1000a898:	1000f8bd 	.word	0x1000f8bd

1000a89c <ble_connected_device_role>:
	}
	return false;
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000a89c:	b530      	push	{r4, r5, lr}
1000a89e:	4a0d      	ldr	r2, [pc, #52]	; (1000a8d4 <ble_connected_device_role+0x38>)
1000a8a0:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
1000a8a2:	001d      	movs	r5, r3
1000a8a4:	0014      	movs	r4, r2
1000a8a6:	345e      	adds	r4, #94	; 0x5e
1000a8a8:	7824      	ldrb	r4, [r4, #0]
1000a8aa:	2c01      	cmp	r4, #1
1000a8ac:	d90b      	bls.n	1000a8c6 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a8ae:	8914      	ldrh	r4, [r2, #8]
1000a8b0:	4284      	cmp	r4, r0
1000a8b2:	d108      	bne.n	1000a8c6 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000a8b4:	015b      	lsls	r3, r3, #5
1000a8b6:	1b5d      	subs	r5, r3, r5
1000a8b8:	00ad      	lsls	r5, r5, #2
1000a8ba:	4b06      	ldr	r3, [pc, #24]	; (1000a8d4 <ble_connected_device_role+0x38>)
1000a8bc:	195d      	adds	r5, r3, r5
1000a8be:	7cab      	ldrb	r3, [r5, #18]
1000a8c0:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000a8c2:	2000      	movs	r0, #0
			break;
1000a8c4:	e004      	b.n	1000a8d0 <ble_connected_device_role+0x34>
1000a8c6:	3301      	adds	r3, #1
1000a8c8:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a8ca:	2b05      	cmp	r3, #5
1000a8cc:	d1e9      	bne.n	1000a8a2 <ble_connected_device_role+0x6>
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000a8ce:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000a8d0:	bd30      	pop	{r4, r5, pc}
1000a8d2:	46c0      	nop			; (mov r8, r8)
1000a8d4:	100126dc 	.word	0x100126dc

1000a8d8 <ble_check_iscentral>:
	}
	return false;
}

bool ble_check_iscentral(at_ble_handle_t handle)
{
1000a8d8:	b500      	push	{lr}
1000a8da:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
1000a8dc:	466b      	mov	r3, sp
1000a8de:	1dd9      	adds	r1, r3, #7
1000a8e0:	2300      	movs	r3, #0
1000a8e2:	700b      	strb	r3, [r1, #0]
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000a8e4:	4b07      	ldr	r3, [pc, #28]	; (1000a904 <ble_check_iscentral+0x2c>)
1000a8e6:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000a8e8:	2300      	movs	r3, #0

bool ble_check_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000a8ea:	2800      	cmp	r0, #0
1000a8ec:	d106      	bne.n	1000a8fc <ble_check_iscentral+0x24>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000a8ee:	466b      	mov	r3, sp
1000a8f0:	3307      	adds	r3, #7
1000a8f2:	781b      	ldrb	r3, [r3, #0]
1000a8f4:	3b05      	subs	r3, #5
1000a8f6:	4258      	negs	r0, r3
1000a8f8:	4143      	adcs	r3, r0
1000a8fa:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000a8fc:	0018      	movs	r0, r3
1000a8fe:	b003      	add	sp, #12
1000a900:	bd00      	pop	{pc}
1000a902:	46c0      	nop			; (mov r8, r8)
1000a904:	1000a89d 	.word	0x1000a89d

1000a908 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a90a:	0004      	movs	r4, r0
1000a90c:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000a90e:	4848      	ldr	r0, [pc, #288]	; (1000aa30 <ble_event_manager+0x128>)
1000a910:	4b48      	ldr	r3, [pc, #288]	; (1000aa34 <ble_event_manager+0x12c>)
1000a912:	4798      	blx	r3
1000a914:	0021      	movs	r1, r4
1000a916:	4848      	ldr	r0, [pc, #288]	; (1000aa38 <ble_event_manager+0x130>)
1000a918:	4b48      	ldr	r3, [pc, #288]	; (1000aa3c <ble_event_manager+0x134>)
1000a91a:	4798      	blx	r3
	switch(events)
1000a91c:	2c3b      	cmp	r4, #59	; 0x3b
1000a91e:	d879      	bhi.n	1000aa14 <ble_event_manager+0x10c>
1000a920:	00a3      	lsls	r3, r4, #2
1000a922:	4a47      	ldr	r2, [pc, #284]	; (1000aa40 <ble_event_manager+0x138>)
1000a924:	58d3      	ldr	r3, [r2, r3]
1000a926:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a928:	00a4      	lsls	r4, r4, #2
1000a92a:	2600      	movs	r6, #0
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a92c:	4f45      	ldr	r7, [pc, #276]	; (1000aa44 <ble_event_manager+0x13c>)
1000a92e:	59bb      	ldr	r3, [r7, r6]
1000a930:	2b00      	cmp	r3, #0
1000a932:	d004      	beq.n	1000a93e <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a934:	591b      	ldr	r3, [r3, r4]
1000a936:	2b00      	cmp	r3, #0
1000a938:	d001      	beq.n	1000a93e <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);
1000a93a:	0028      	movs	r0, r5
1000a93c:	4798      	blx	r3
1000a93e:	3604      	adds	r6, #4
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a940:	2e14      	cmp	r6, #20
1000a942:	d1f4      	bne.n	1000a92e <ble_event_manager+0x26>
1000a944:	e072      	b.n	1000aa2c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a946:	3c13      	subs	r4, #19
1000a948:	b2e4      	uxtb	r4, r4
1000a94a:	00a4      	lsls	r4, r4, #2
1000a94c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a94e:	4f3e      	ldr	r7, [pc, #248]	; (1000aa48 <ble_event_manager+0x140>)
1000a950:	59bb      	ldr	r3, [r7, r6]
1000a952:	2b00      	cmp	r3, #0
1000a954:	d004      	beq.n	1000a960 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a956:	591b      	ldr	r3, [r3, r4]
1000a958:	2b00      	cmp	r3, #0
1000a95a:	d001      	beq.n	1000a960 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000a95c:	0028      	movs	r0, r5
1000a95e:	4798      	blx	r3
1000a960:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a962:	2e14      	cmp	r6, #20
1000a964:	d1f4      	bne.n	1000a950 <ble_event_manager+0x48>
1000a966:	e061      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000a968:	3c1d      	subs	r4, #29
1000a96a:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000a96c:	4830      	ldr	r0, [pc, #192]	; (1000aa30 <ble_event_manager+0x128>)
1000a96e:	4b31      	ldr	r3, [pc, #196]	; (1000aa34 <ble_event_manager+0x12c>)
1000a970:	4798      	blx	r3
1000a972:	0021      	movs	r1, r4
1000a974:	4835      	ldr	r0, [pc, #212]	; (1000aa4c <ble_event_manager+0x144>)
1000a976:	4b31      	ldr	r3, [pc, #196]	; (1000aa3c <ble_event_manager+0x134>)
1000a978:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a97a:	00a4      	lsls	r4, r4, #2
1000a97c:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a97e:	4f34      	ldr	r7, [pc, #208]	; (1000aa50 <ble_event_manager+0x148>)
1000a980:	59bb      	ldr	r3, [r7, r6]
1000a982:	2b00      	cmp	r3, #0
1000a984:	d004      	beq.n	1000a990 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a986:	591b      	ldr	r3, [r3, r4]
1000a988:	2b00      	cmp	r3, #0
1000a98a:	d001      	beq.n	1000a990 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000a98c:	0028      	movs	r0, r5
1000a98e:	4798      	blx	r3
1000a990:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a992:	2e14      	cmp	r6, #20
1000a994:	d1f4      	bne.n	1000a980 <ble_event_manager+0x78>
1000a996:	e049      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a998:	3c27      	subs	r4, #39	; 0x27
1000a99a:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a99c:	4b2d      	ldr	r3, [pc, #180]	; (1000aa54 <ble_event_manager+0x14c>)
1000a99e:	681b      	ldr	r3, [r3, #0]
1000a9a0:	2b00      	cmp	r3, #0
1000a9a2:	d043      	beq.n	1000aa2c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9a4:	00a4      	lsls	r4, r4, #2
1000a9a6:	58e3      	ldr	r3, [r4, r3]
1000a9a8:	2b00      	cmp	r3, #0
1000a9aa:	d03f      	beq.n	1000aa2c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000a9ac:	0028      	movs	r0, r5
1000a9ae:	4798      	blx	r3
1000a9b0:	e03c      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a9b2:	3c2d      	subs	r4, #45	; 0x2d
1000a9b4:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a9b6:	4b28      	ldr	r3, [pc, #160]	; (1000aa58 <ble_event_manager+0x150>)
1000a9b8:	681b      	ldr	r3, [r3, #0]
1000a9ba:	2b00      	cmp	r3, #0
1000a9bc:	d036      	beq.n	1000aa2c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9be:	00a4      	lsls	r4, r4, #2
1000a9c0:	58e3      	ldr	r3, [r4, r3]
1000a9c2:	2b00      	cmp	r3, #0
1000a9c4:	d032      	beq.n	1000aa2c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000a9c6:	0028      	movs	r0, r5
1000a9c8:	4798      	blx	r3
1000a9ca:	e02f      	b.n	1000aa2c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9cc:	3c36      	subs	r4, #54	; 0x36
1000a9ce:	b2e4      	uxtb	r4, r4
1000a9d0:	00a4      	lsls	r4, r4, #2
1000a9d2:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a9d4:	4f21      	ldr	r7, [pc, #132]	; (1000aa5c <ble_event_manager+0x154>)
1000a9d6:	59bb      	ldr	r3, [r7, r6]
1000a9d8:	2b00      	cmp	r3, #0
1000a9da:	d004      	beq.n	1000a9e6 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9dc:	591b      	ldr	r3, [r3, r4]
1000a9de:	2b00      	cmp	r3, #0
1000a9e0:	d001      	beq.n	1000a9e6 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000a9e2:	0028      	movs	r0, r5
1000a9e4:	4798      	blx	r3
1000a9e6:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a9e8:	2e14      	cmp	r6, #20
1000a9ea:	d1f4      	bne.n	1000a9d6 <ble_event_manager+0xce>
1000a9ec:	e01e      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a9ee:	3c38      	subs	r4, #56	; 0x38
1000a9f0:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a9f2:	4b1b      	ldr	r3, [pc, #108]	; (1000aa60 <ble_event_manager+0x158>)
1000a9f4:	681b      	ldr	r3, [r3, #0]
1000a9f6:	2b00      	cmp	r3, #0
1000a9f8:	d018      	beq.n	1000aa2c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9fa:	00a4      	lsls	r4, r4, #2
1000a9fc:	58e3      	ldr	r3, [r4, r3]
1000a9fe:	2b00      	cmp	r3, #0
1000aa00:	d014      	beq.n	1000aa2c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000aa02:	0028      	movs	r0, r5
1000aa04:	4798      	blx	r3
1000aa06:	e011      	b.n	1000aa2c <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000aa08:	4b16      	ldr	r3, [pc, #88]	; (1000aa64 <ble_event_manager+0x15c>)
1000aa0a:	681b      	ldr	r3, [r3, #0]
1000aa0c:	2b00      	cmp	r3, #0
1000aa0e:	d00d      	beq.n	1000aa2c <ble_event_manager+0x124>
			ble_user_event_cb();
1000aa10:	4798      	blx	r3
1000aa12:	e00b      	b.n	1000aa2c <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000aa14:	4e06      	ldr	r6, [pc, #24]	; (1000aa30 <ble_event_manager+0x128>)
1000aa16:	0030      	movs	r0, r6
1000aa18:	4d06      	ldr	r5, [pc, #24]	; (1000aa34 <ble_event_manager+0x12c>)
1000aa1a:	47a8      	blx	r5
1000aa1c:	0021      	movs	r1, r4
1000aa1e:	4812      	ldr	r0, [pc, #72]	; (1000aa68 <ble_event_manager+0x160>)
1000aa20:	4b06      	ldr	r3, [pc, #24]	; (1000aa3c <ble_event_manager+0x134>)
1000aa22:	4798      	blx	r3
		DBG_LOG("\r\n");
1000aa24:	0030      	movs	r0, r6
1000aa26:	47a8      	blx	r5
1000aa28:	0030      	movs	r0, r6
1000aa2a:	47a8      	blx	r5
	}
	break;		
	}
}
1000aa2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa2e:	46c0      	nop			; (mov r8, r8)
1000aa30:	10010ce8 	.word	0x10010ce8
1000aa34:	1000fa1d 	.word	0x1000fa1d
1000aa38:	10011c54 	.word	0x10011c54
1000aa3c:	1000f8fd 	.word	0x1000f8fd
1000aa40:	1001123c 	.word	0x1001123c
1000aa44:	10012960 	.word	0x10012960
1000aa48:	10012974 	.word	0x10012974
1000aa4c:	10011c64 	.word	0x10011c64
1000aa50:	100126c8 	.word	0x100126c8
1000aa54:	100129ac 	.word	0x100129ac
1000aa58:	100126c4 	.word	0x100126c4
1000aa5c:	1001294c 	.word	0x1001294c
1000aa60:	10012ef0 	.word	0x10012ef0
1000aa64:	100123b8 	.word	0x100123b8
1000aa68:	10011c7c 	.word	0x10011c7c

1000aa6c <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000aa6c:	b510      	push	{r4, lr}
1000aa6e:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000aa70:	4906      	ldr	r1, [pc, #24]	; (1000aa8c <ble_event_task+0x20>)
1000aa72:	4807      	ldr	r0, [pc, #28]	; (1000aa90 <ble_event_task+0x24>)
1000aa74:	4b07      	ldr	r3, [pc, #28]	; (1000aa94 <ble_event_task+0x28>)
1000aa76:	4798      	blx	r3
1000aa78:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000aa7a:	d104      	bne.n	1000aa86 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000aa7c:	4b04      	ldr	r3, [pc, #16]	; (1000aa90 <ble_event_task+0x24>)
1000aa7e:	7818      	ldrb	r0, [r3, #0]
1000aa80:	4902      	ldr	r1, [pc, #8]	; (1000aa8c <ble_event_task+0x20>)
1000aa82:	4b05      	ldr	r3, [pc, #20]	; (1000aa98 <ble_event_task+0x2c>)
1000aa84:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000aa86:	0020      	movs	r0, r4
1000aa88:	bd10      	pop	{r4, pc}
1000aa8a:	46c0      	nop			; (mov r8, r8)
1000aa8c:	10012ce4 	.word	0x10012ce4
1000aa90:	100129a8 	.word	0x100129a8
1000aa94:	1000bdd1 	.word	0x1000bdd1
1000aa98:	1000a909 	.word	0x1000a909

1000aa9c <button_init>:
#include <asf.h>
#include "button.h"

void button_init(button_callback_t callback)
{
1000aa9c:	b530      	push	{r4, r5, lr}
1000aa9e:	b083      	sub	sp, #12
1000aaa0:	0005      	movs	r5, r0
	struct gpio_config config_gpio_pin;

	gpio_get_config_defaults(&config_gpio_pin);
1000aaa2:	ac01      	add	r4, sp, #4
1000aaa4:	0020      	movs	r0, r4
1000aaa6:	4b0a      	ldr	r3, [pc, #40]	; (1000aad0 <button_init+0x34>)
1000aaa8:	4798      	blx	r3

	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000aaaa:	2300      	movs	r3, #0
1000aaac:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000aaae:	7063      	strb	r3, [r4, #1]

	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000aab0:	0021      	movs	r1, r4
1000aab2:	2017      	movs	r0, #23
1000aab4:	4b07      	ldr	r3, [pc, #28]	; (1000aad4 <button_init+0x38>)
1000aab6:	4798      	blx	r3
	gpio_init();
1000aab8:	4b07      	ldr	r3, [pc, #28]	; (1000aad8 <button_init+0x3c>)
1000aaba:	4798      	blx	r3
	gpio_register_callback(BUTTON_0_PIN, callback, GPIO_CALLBACK_RISING);
1000aabc:	2202      	movs	r2, #2
1000aabe:	0029      	movs	r1, r5
1000aac0:	2017      	movs	r0, #23
1000aac2:	4b06      	ldr	r3, [pc, #24]	; (1000aadc <button_init+0x40>)
1000aac4:	4798      	blx	r3
	gpio_enable_callback(BUTTON_0_PIN);
1000aac6:	2017      	movs	r0, #23
1000aac8:	4b05      	ldr	r3, [pc, #20]	; (1000aae0 <button_init+0x44>)
1000aaca:	4798      	blx	r3
}
1000aacc:	b003      	add	sp, #12
1000aace:	bd30      	pop	{r4, r5, pc}
1000aad0:	1000824d 	.word	0x1000824d
1000aad4:	1000825d 	.word	0x1000825d
1000aad8:	100086b1 	.word	0x100086b1
1000aadc:	1000856d 	.word	0x1000856d
1000aae0:	10008675 	.word	0x10008675

1000aae4 <uart_read_complete_callback>:
void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	read_complete_flag = true;
1000aae4:	2201      	movs	r2, #1
1000aae6:	4b01      	ldr	r3, [pc, #4]	; (1000aaec <uart_read_complete_callback+0x8>)
1000aae8:	701a      	strb	r2, [r3, #0]
}
1000aaea:	4770      	bx	lr
1000aaec:	100123c7 	.word	0x100123c7

1000aaf0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000aaf0:	b570      	push	{r4, r5, r6, lr}
1000aaf2:	0006      	movs	r6, r0
1000aaf4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000aaf6:	4c03      	ldr	r4, [pc, #12]	; (1000ab04 <usart_serial_getchar+0x14>)
1000aaf8:	0029      	movs	r1, r5
1000aafa:	0030      	movs	r0, r6
1000aafc:	47a0      	blx	r4
1000aafe:	2800      	cmp	r0, #0
1000ab00:	d1fa      	bne.n	1000aaf8 <usart_serial_getchar+0x8>
}
1000ab02:	bd70      	pop	{r4, r5, r6, pc}
1000ab04:	1000937d 	.word	0x1000937d

1000ab08 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ab08:	b570      	push	{r4, r5, r6, lr}
1000ab0a:	0006      	movs	r6, r0
1000ab0c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ab0e:	4c03      	ldr	r4, [pc, #12]	; (1000ab1c <usart_serial_putchar+0x14>)
1000ab10:	0029      	movs	r1, r5
1000ab12:	0030      	movs	r0, r6
1000ab14:	47a0      	blx	r4
1000ab16:	2800      	cmp	r0, #0
1000ab18:	d1fa      	bne.n	1000ab10 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ab1a:	bd70      	pop	{r4, r5, r6, pc}
1000ab1c:	1000936d 	.word	0x1000936d

1000ab20 <serial_console_init>:

void serial_console_init(void)
{
1000ab20:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ab22:	2100      	movs	r1, #0
1000ab24:	2000      	movs	r0, #0
1000ab26:	4b16      	ldr	r3, [pc, #88]	; (1000ab80 <serial_console_init+0x60>)
1000ab28:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ab2a:	4c16      	ldr	r4, [pc, #88]	; (1000ab84 <serial_console_init+0x64>)
1000ab2c:	0020      	movs	r0, r4
1000ab2e:	4b16      	ldr	r3, [pc, #88]	; (1000ab88 <serial_console_init+0x68>)
1000ab30:	4798      	blx	r3

	config_uart.baud_rate = 115200;
1000ab32:	23e1      	movs	r3, #225	; 0xe1
1000ab34:	025b      	lsls	r3, r3, #9
1000ab36:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000ab38:	2302      	movs	r3, #2
1000ab3a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000ab3c:	2203      	movs	r2, #3
1000ab3e:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000ab40:	3201      	adds	r2, #1
1000ab42:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000ab44:	3201      	adds	r2, #1
1000ab46:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000ab48:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000ab4a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000ab4c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000ab4e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ab50:	480e      	ldr	r0, [pc, #56]	; (1000ab8c <serial_console_init+0x6c>)
1000ab52:	4b0f      	ldr	r3, [pc, #60]	; (1000ab90 <serial_console_init+0x70>)
1000ab54:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ab56:	4a0f      	ldr	r2, [pc, #60]	; (1000ab94 <serial_console_init+0x74>)
1000ab58:	4b0f      	ldr	r3, [pc, #60]	; (1000ab98 <serial_console_init+0x78>)
1000ab5a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ab5c:	4a0f      	ldr	r2, [pc, #60]	; (1000ab9c <serial_console_init+0x7c>)
1000ab5e:	4b10      	ldr	r3, [pc, #64]	; (1000aba0 <serial_console_init+0x80>)
1000ab60:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ab62:	0022      	movs	r2, r4
1000ab64:	490f      	ldr	r1, [pc, #60]	; (1000aba4 <serial_console_init+0x84>)
1000ab66:	4b10      	ldr	r3, [pc, #64]	; (1000aba8 <serial_console_init+0x88>)
1000ab68:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ab6a:	4d10      	ldr	r5, [pc, #64]	; (1000abac <serial_console_init+0x8c>)
1000ab6c:	682b      	ldr	r3, [r5, #0]
1000ab6e:	6898      	ldr	r0, [r3, #8]
1000ab70:	2100      	movs	r1, #0
1000ab72:	4c0f      	ldr	r4, [pc, #60]	; (1000abb0 <serial_console_init+0x90>)
1000ab74:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ab76:	682b      	ldr	r3, [r5, #0]
1000ab78:	6858      	ldr	r0, [r3, #4]
1000ab7a:	2100      	movs	r1, #0
1000ab7c:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
}
1000ab7e:	bd70      	pop	{r4, r5, r6, pc}
1000ab80:	10008719 	.word	0x10008719
1000ab84:	10012f18 	.word	0x10012f18
1000ab88:	100091a5 	.word	0x100091a5
1000ab8c:	10012ef4 	.word	0x10012ef4
1000ab90:	10012698 	.word	0x10012698
1000ab94:	1000ab09 	.word	0x1000ab09
1000ab98:	10012694 	.word	0x10012694
1000ab9c:	1000aaf1 	.word	0x1000aaf1
1000aba0:	10012690 	.word	0x10012690
1000aba4:	40004000 	.word	0x40004000
1000aba8:	100091d1 	.word	0x100091d1
1000abac:	1001237c 	.word	0x1001237c
1000abb0:	1000faa9 	.word	0x1000faa9

1000abb4 <_time_start>:

void _time_start(unsigned int sec)
{
1000abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abb6:	b083      	sub	sp, #12
1000abb8:	0005      	movs	r5, r0
	system_clock_get_value();
1000abba:	4c0d      	ldr	r4, [pc, #52]	; (1000abf0 <_time_start+0x3c>)
1000abbc:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000abbe:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000abc0:	4f0c      	ldr	r7, [pc, #48]	; (1000abf4 <_time_start+0x40>)
1000abc2:	47b8      	blx	r7
1000abc4:	4e0c      	ldr	r6, [pc, #48]	; (1000abf8 <_time_start+0x44>)
1000abc6:	4a0d      	ldr	r2, [pc, #52]	; (1000abfc <_time_start+0x48>)
1000abc8:	4b0d      	ldr	r3, [pc, #52]	; (1000ac00 <_time_start+0x4c>)
1000abca:	47b0      	blx	r6
1000abcc:	9000      	str	r0, [sp, #0]
1000abce:	9101      	str	r1, [sp, #4]
1000abd0:	20fa      	movs	r0, #250	; 0xfa
1000abd2:	0080      	lsls	r0, r0, #2
1000abd4:	4368      	muls	r0, r5
1000abd6:	47b8      	blx	r7
1000abd8:	0002      	movs	r2, r0
1000abda:	000b      	movs	r3, r1
1000abdc:	9800      	ldr	r0, [sp, #0]
1000abde:	9901      	ldr	r1, [sp, #4]
1000abe0:	47b0      	blx	r6
1000abe2:	4b08      	ldr	r3, [pc, #32]	; (1000ac04 <_time_start+0x50>)
1000abe4:	4798      	blx	r3
1000abe6:	4b08      	ldr	r3, [pc, #32]	; (1000ac08 <_time_start+0x54>)
1000abe8:	6018      	str	r0, [r3, #0]
}
1000abea:	b003      	add	sp, #12
1000abec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abee:	46c0      	nop			; (mov r8, r8)
1000abf0:	1000879d 	.word	0x1000879d
1000abf4:	1000f52d 	.word	0x1000f52d
1000abf8:	1000e925 	.word	0x1000e925
1000abfc:	19feaec7 	.word	0x19feaec7
1000ac00:	3f09d8ef 	.word	0x3f09d8ef
1000ac04:	1000e8e9 	.word	0x1000e8e9
1000ac08:	100123c8 	.word	0x100123c8

1000ac0c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ac0c:	4b02      	ldr	r3, [pc, #8]	; (1000ac18 <_time_done+0xc>)
1000ac0e:	681a      	ldr	r2, [r3, #0]
1000ac10:	1e50      	subs	r0, r2, #1
1000ac12:	6018      	str	r0, [r3, #0]
}
1000ac14:	4770      	bx	lr
1000ac16:	46c0      	nop			; (mov r8, r8)
1000ac18:	100123c8 	.word	0x100123c8

1000ac1c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ac1c:	b570      	push	{r4, r5, r6, lr}
	
	read_complete_flag = false;
1000ac1e:	2400      	movs	r4, #0
1000ac20:	4b16      	ldr	r3, [pc, #88]	; (1000ac7c <getchar_b11_timeout+0x60>)
1000ac22:	701c      	strb	r4, [r3, #0]
	_time_start(sec);
1000ac24:	4b16      	ldr	r3, [pc, #88]	; (1000ac80 <getchar_b11_timeout+0x64>)
1000ac26:	4798      	blx	r3
	
	string_input[0] = 0;
1000ac28:	4d16      	ldr	r5, [pc, #88]	; (1000ac84 <getchar_b11_timeout+0x68>)
1000ac2a:	702c      	strb	r4, [r5, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ac2c:	4c16      	ldr	r4, [pc, #88]	; (1000ac88 <getchar_b11_timeout+0x6c>)
1000ac2e:	2202      	movs	r2, #2
1000ac30:	4916      	ldr	r1, [pc, #88]	; (1000ac8c <getchar_b11_timeout+0x70>)
1000ac32:	0020      	movs	r0, r4
1000ac34:	4b16      	ldr	r3, [pc, #88]	; (1000ac90 <getchar_b11_timeout+0x74>)
1000ac36:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ac38:	2102      	movs	r1, #2
1000ac3a:	0020      	movs	r0, r4
1000ac3c:	4b15      	ldr	r3, [pc, #84]	; (1000ac94 <getchar_b11_timeout+0x78>)
1000ac3e:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ac40:	2201      	movs	r2, #1
1000ac42:	0029      	movs	r1, r5
1000ac44:	0020      	movs	r0, r4
1000ac46:	4b14      	ldr	r3, [pc, #80]	; (1000ac98 <getchar_b11_timeout+0x7c>)
1000ac48:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
1000ac4a:	4c0c      	ldr	r4, [pc, #48]	; (1000ac7c <getchar_b11_timeout+0x60>)
1000ac4c:	4d13      	ldr	r5, [pc, #76]	; (1000ac9c <getchar_b11_timeout+0x80>)
1000ac4e:	7823      	ldrb	r3, [r4, #0]
1000ac50:	2b00      	cmp	r3, #0
1000ac52:	d102      	bne.n	1000ac5a <getchar_b11_timeout+0x3e>
1000ac54:	47a8      	blx	r5
1000ac56:	2800      	cmp	r0, #0
1000ac58:	d1f9      	bne.n	1000ac4e <getchar_b11_timeout+0x32>
	
	if( tick == 0 )
1000ac5a:	4b11      	ldr	r3, [pc, #68]	; (1000aca0 <getchar_b11_timeout+0x84>)
1000ac5c:	681b      	ldr	r3, [r3, #0]
1000ac5e:	2b00      	cmp	r3, #0
1000ac60:	d108      	bne.n	1000ac74 <getchar_b11_timeout+0x58>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
1000ac62:	4c09      	ldr	r4, [pc, #36]	; (1000ac88 <getchar_b11_timeout+0x6c>)
1000ac64:	2102      	movs	r1, #2
1000ac66:	0020      	movs	r0, r4
1000ac68:	4b0e      	ldr	r3, [pc, #56]	; (1000aca4 <getchar_b11_timeout+0x88>)
1000ac6a:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ac6c:	2102      	movs	r1, #2
1000ac6e:	0020      	movs	r0, r4
1000ac70:	4b0d      	ldr	r3, [pc, #52]	; (1000aca8 <getchar_b11_timeout+0x8c>)
1000ac72:	4798      	blx	r3
	}
	return string_input[0];
1000ac74:	4b03      	ldr	r3, [pc, #12]	; (1000ac84 <getchar_b11_timeout+0x68>)
1000ac76:	7818      	ldrb	r0, [r3, #0]
}
1000ac78:	bd70      	pop	{r4, r5, r6, pc}
1000ac7a:	46c0      	nop			; (mov r8, r8)
1000ac7c:	100123c7 	.word	0x100123c7
1000ac80:	1000abb5 	.word	0x1000abb5
1000ac84:	100123cc 	.word	0x100123cc
1000ac88:	10012ef4 	.word	0x10012ef4
1000ac8c:	1000aae5 	.word	0x1000aae5
1000ac90:	100093b9 	.word	0x100093b9
1000ac94:	100093e5 	.word	0x100093e5
1000ac98:	10009391 	.word	0x10009391
1000ac9c:	1000ac0d 	.word	0x1000ac0d
1000aca0:	100123c8 	.word	0x100123c8
1000aca4:	100093cd 	.word	0x100093cd
1000aca8:	10009405 	.word	0x10009405

1000acac <dualtimer_callback2>:
#include "conf_dualtimer.h"

extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
1000acac:	b510      	push	{r4, lr}
	puts("Timer2 trigger\r\n");
1000acae:	4802      	ldr	r0, [pc, #8]	; (1000acb8 <dualtimer_callback2+0xc>)
1000acb0:	4b02      	ldr	r3, [pc, #8]	; (1000acbc <dualtimer_callback2+0x10>)
1000acb2:	4798      	blx	r3
}
1000acb4:	bd10      	pop	{r4, pc}
1000acb6:	46c0      	nop			; (mov r8, r8)
1000acb8:	10011d30 	.word	0x10011d30
1000acbc:	1000fa1d 	.word	0x1000fa1d

1000acc0 <hw_timer_register_callback>:

	dualtimer_init(&config_dualtimer);
}

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000acc0:	b510      	push	{r4, lr}
1000acc2:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000acc4:	2000      	movs	r0, #0
1000acc6:	4c07      	ldr	r4, [pc, #28]	; (1000ace4 <hw_timer_register_callback+0x24>)
1000acc8:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000acca:	4907      	ldr	r1, [pc, #28]	; (1000ace8 <hw_timer_register_callback+0x28>)
1000accc:	2001      	movs	r0, #1
1000acce:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000acd0:	2000      	movs	r0, #0
1000acd2:	4c06      	ldr	r4, [pc, #24]	; (1000acec <hw_timer_register_callback+0x2c>)
1000acd4:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000acd6:	2001      	movs	r0, #1
1000acd8:	47a0      	blx	r4
1000acda:	2280      	movs	r2, #128	; 0x80
1000acdc:	01d2      	lsls	r2, r2, #7
1000acde:	4b04      	ldr	r3, [pc, #16]	; (1000acf0 <hw_timer_register_callback+0x30>)
1000ace0:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ace2:	bd10      	pop	{r4, pc}
1000ace4:	10008159 	.word	0x10008159
1000ace8:	1000acad 	.word	0x1000acad
1000acec:	10008135 	.word	0x10008135
1000acf0:	e000e100 	.word	0xe000e100

1000acf4 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000acf4:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000acf6:	2800      	cmp	r0, #0
1000acf8:	d100      	bne.n	1000acfc <hw_timer_start+0x8>
		delay = 1;
1000acfa:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000acfc:	4b05      	ldr	r3, [pc, #20]	; (1000ad14 <hw_timer_start+0x20>)
1000acfe:	4343      	muls	r3, r0
1000ad00:	001a      	movs	r2, r3
1000ad02:	2100      	movs	r1, #0
1000ad04:	2000      	movs	r0, #0
1000ad06:	4b04      	ldr	r3, [pc, #16]	; (1000ad18 <hw_timer_start+0x24>)
1000ad08:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000ad0a:	2000      	movs	r0, #0
1000ad0c:	4b03      	ldr	r3, [pc, #12]	; (1000ad1c <hw_timer_start+0x28>)
1000ad0e:	4798      	blx	r3
}
1000ad10:	bd10      	pop	{r4, pc}
1000ad12:	46c0      	nop			; (mov r8, r8)
1000ad14:	018cba80 	.word	0x018cba80
1000ad18:	100080e9 	.word	0x100080e9
1000ad1c:	10008111 	.word	0x10008111

1000ad20 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000ad20:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000ad22:	2000      	movs	r0, #0
1000ad24:	4b01      	ldr	r3, [pc, #4]	; (1000ad2c <hw_timer_stop+0xc>)
1000ad26:	4798      	blx	r3
}
1000ad28:	bd10      	pop	{r4, pc}
1000ad2a:	46c0      	nop			; (mov r8, r8)
1000ad2c:	10008135 	.word	0x10008135

1000ad30 <platform_event_free>:
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ad30:	4b02      	ldr	r3, [pc, #8]	; (1000ad3c <platform_event_free+0xc>)
1000ad32:	681a      	ldr	r2, [r3, #0]
1000ad34:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ad36:	6018      	str	r0, [r3, #0]
}
1000ad38:	4770      	bx	lr
1000ad3a:	46c0      	nop			; (mov r8, r8)
1000ad3c:	100123d4 	.word	0x100123d4

1000ad40 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ad40:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ad42:	4b0b      	ldr	r3, [pc, #44]	; (1000ad70 <platform_event_post+0x30>)
1000ad44:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ad46:	2c00      	cmp	r4, #0
1000ad48:	d011      	beq.n	1000ad6e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ad4a:	6825      	ldr	r5, [r4, #0]
1000ad4c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ad4e:	2300      	movs	r3, #0
1000ad50:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000ad52:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000ad54:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ad56:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ad58:	4b06      	ldr	r3, [pc, #24]	; (1000ad74 <platform_event_post+0x34>)
1000ad5a:	681a      	ldr	r2, [r3, #0]
1000ad5c:	2a00      	cmp	r2, #0
1000ad5e:	d102      	bne.n	1000ad66 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ad60:	601c      	str	r4, [r3, #0]
1000ad62:	e004      	b.n	1000ad6e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ad64:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ad66:	6813      	ldr	r3, [r2, #0]
1000ad68:	2b00      	cmp	r3, #0
1000ad6a:	d1fb      	bne.n	1000ad64 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ad6c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ad6e:	bd30      	pop	{r4, r5, pc}
1000ad70:	100123d4 	.word	0x100123d4
1000ad74:	100123d0 	.word	0x100123d0

1000ad78 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000ad78:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ad7a:	2300      	movs	r3, #0
1000ad7c:	4a06      	ldr	r2, [pc, #24]	; (1000ad98 <platform_event_init+0x20>)
1000ad7e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ad80:	4a06      	ldr	r2, [pc, #24]	; (1000ad9c <platform_event_init+0x24>)
1000ad82:	6013      	str	r3, [r2, #0]
1000ad84:	4c06      	ldr	r4, [pc, #24]	; (1000ada0 <platform_event_init+0x28>)
1000ad86:	0026      	movs	r6, r4
1000ad88:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ad8a:	4d06      	ldr	r5, [pc, #24]	; (1000ada4 <platform_event_init+0x2c>)
1000ad8c:	0020      	movs	r0, r4
1000ad8e:	47a8      	blx	r5
1000ad90:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ad92:	42b4      	cmp	r4, r6
1000ad94:	d1fa      	bne.n	1000ad8c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ad96:	bd70      	pop	{r4, r5, r6, pc}
1000ad98:	100123d4 	.word	0x100123d4
1000ad9c:	100123d0 	.word	0x100123d0
1000ada0:	100123d8 	.word	0x100123d8
1000ada4:	1000ad31 	.word	0x1000ad31

1000ada8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ada8:	b510      	push	{r4, lr}
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000adaa:	4b11      	ldr	r3, [pc, #68]	; (1000adf0 <at_ke_msg_send+0x48>)
1000adac:	681c      	ldr	r4, [r3, #0]
	ke_msg_send(param_ptr);
1000adae:	4b11      	ldr	r3, [pc, #68]	; (1000adf4 <at_ke_msg_send+0x4c>)
1000adb0:	681b      	ldr	r3, [r3, #0]
1000adb2:	4798      	blx	r3
	if(osc_en == 0)
1000adb4:	07e3      	lsls	r3, r4, #31
1000adb6:	d414      	bmi.n	1000ade2 <at_ke_msg_send+0x3a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000adb8:	4b0f      	ldr	r3, [pc, #60]	; (1000adf8 <at_ke_msg_send+0x50>)
1000adba:	681b      	ldr	r3, [r3, #0]
1000adbc:	2002      	movs	r0, #2
1000adbe:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000adc0:	4b0e      	ldr	r3, [pc, #56]	; (1000adfc <at_ke_msg_send+0x54>)
1000adc2:	681b      	ldr	r3, [r3, #0]
1000adc4:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000adc6:	4c0e      	ldr	r4, [pc, #56]	; (1000ae00 <at_ke_msg_send+0x58>)
1000adc8:	2003      	movs	r0, #3
1000adca:	6823      	ldr	r3, [r4, #0]
1000adcc:	4798      	blx	r3
1000adce:	2800      	cmp	r0, #0
1000add0:	d1fa      	bne.n	1000adc8 <at_ke_msg_send+0x20>
		pwr_disable_arm_wakeup(1<<1);
1000add2:	4b0c      	ldr	r3, [pc, #48]	; (1000ae04 <at_ke_msg_send+0x5c>)
1000add4:	681b      	ldr	r3, [r3, #0]
1000add6:	3002      	adds	r0, #2
1000add8:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000adda:	2201      	movs	r2, #1
1000addc:	4b0a      	ldr	r3, [pc, #40]	; (1000ae08 <at_ke_msg_send+0x60>)
1000adde:	601a      	str	r2, [r3, #0]
1000ade0:	e004      	b.n	1000adec <at_ke_msg_send+0x44>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
1000ade2:	4b0a      	ldr	r3, [pc, #40]	; (1000ae0c <at_ke_msg_send+0x64>)
1000ade4:	6818      	ldr	r0, [r3, #0]
1000ade6:	4b0a      	ldr	r3, [pc, #40]	; (1000ae10 <at_ke_msg_send+0x68>)
1000ade8:	681b      	ldr	r3, [r3, #0]
1000adea:	4798      	blx	r3
	}
}
1000adec:	bd10      	pop	{r4, pc}
1000adee:	46c0      	nop			; (mov r8, r8)
1000adf0:	4000b1ec 	.word	0x4000b1ec
1000adf4:	1001247c 	.word	0x1001247c
1000adf8:	10012474 	.word	0x10012474
1000adfc:	1001248c 	.word	0x1001248c
1000ae00:	10012460 	.word	0x10012460
1000ae04:	10012468 	.word	0x10012468
1000ae08:	4000b020 	.word	0x4000b020
1000ae0c:	1001246c 	.word	0x1001246c
1000ae10:	1001245c 	.word	0x1001245c

1000ae14 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ae14:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ae16:	4b06      	ldr	r3, [pc, #24]	; (1000ae30 <samb11_plf_resume_callback+0x1c>)
1000ae18:	4a06      	ldr	r2, [pc, #24]	; (1000ae34 <samb11_plf_resume_callback+0x20>)
1000ae1a:	6819      	ldr	r1, [r3, #0]
1000ae1c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ae1e:	685a      	ldr	r2, [r3, #4]
1000ae20:	4b05      	ldr	r3, [pc, #20]	; (1000ae38 <samb11_plf_resume_callback+0x24>)
1000ae22:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ae24:	4b05      	ldr	r3, [pc, #20]	; (1000ae3c <samb11_plf_resume_callback+0x28>)
1000ae26:	681b      	ldr	r3, [r3, #0]
1000ae28:	2b00      	cmp	r3, #0
1000ae2a:	d000      	beq.n	1000ae2e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ae2c:	4798      	blx	r3
	}
}
1000ae2e:	bd10      	pop	{r4, pc}
1000ae30:	10012f40 	.word	0x10012f40
1000ae34:	4000b00c 	.word	0x4000b00c
1000ae38:	4000b010 	.word	0x4000b010
1000ae3c:	10013214 	.word	0x10013214

1000ae40 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ae40:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ae42:	2232      	movs	r2, #50	; 0x32
1000ae44:	2100      	movs	r1, #0
1000ae46:	480f      	ldr	r0, [pc, #60]	; (1000ae84 <init_port_list+0x44>)
1000ae48:	4b0f      	ldr	r3, [pc, #60]	; (1000ae88 <init_port_list+0x48>)
1000ae4a:	4798      	blx	r3
1000ae4c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ae4e:	480d      	ldr	r0, [pc, #52]	; (1000ae84 <init_port_list+0x44>)
		port_list[i].bit.available = 1;
1000ae50:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ae52:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ae54:	004a      	lsls	r2, r1, #1
1000ae56:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ae58:	1882      	adds	r2, r0, r2
1000ae5a:	7853      	ldrb	r3, [r2, #1]
1000ae5c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ae5e:	b2db      	uxtb	r3, r3
1000ae60:	43a3      	bics	r3, r4
1000ae62:	7053      	strb	r3, [r2, #1]
1000ae64:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ae66:	2919      	cmp	r1, #25
1000ae68:	d1f4      	bne.n	1000ae54 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ae6a:	4b06      	ldr	r3, [pc, #24]	; (1000ae84 <init_port_list+0x44>)
1000ae6c:	785a      	ldrb	r2, [r3, #1]
1000ae6e:	3918      	subs	r1, #24
1000ae70:	438a      	bics	r2, r1
1000ae72:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000ae74:	78da      	ldrb	r2, [r3, #3]
1000ae76:	438a      	bics	r2, r1
1000ae78:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1000ae7a:	7f5a      	ldrb	r2, [r3, #29]
1000ae7c:	438a      	bics	r2, r1
1000ae7e:	775a      	strb	r2, [r3, #29]
}
1000ae80:	bd70      	pop	{r4, r5, r6, pc}
1000ae82:	46c0      	nop			; (mov r8, r8)
1000ae84:	10012f58 	.word	0x10012f58
1000ae88:	1000f8ed 	.word	0x1000f8ed

1000ae8c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ae8c:	4a06      	ldr	r2, [pc, #24]	; (1000aea8 <init_clock+0x1c>)
1000ae8e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ae90:	4b06      	ldr	r3, [pc, #24]	; (1000aeac <init_clock+0x20>)
1000ae92:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000ae94:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000ae96:	4a06      	ldr	r2, [pc, #24]	; (1000aeb0 <init_clock+0x24>)
1000ae98:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ae9a:	4906      	ldr	r1, [pc, #24]	; (1000aeb4 <init_clock+0x28>)
1000ae9c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ae9e:	4b06      	ldr	r3, [pc, #24]	; (1000aeb8 <init_clock+0x2c>)
1000aea0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000aea2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000aea4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000aea6:	4770      	bx	lr
1000aea8:	4000b00c 	.word	0x4000b00c
1000aeac:	fffe0fd3 	.word	0xfffe0fd3
1000aeb0:	10012f40 	.word	0x10012f40
1000aeb4:	4000b010 	.word	0x4000b010
1000aeb8:	ffffe7c0 	.word	0xffffe7c0

1000aebc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aebe:	464f      	mov	r7, r9
1000aec0:	4646      	mov	r6, r8
1000aec2:	b4c0      	push	{r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000aec4:	4b44      	ldr	r3, [pc, #272]	; (1000afd8 <platform_driver_init+0x11c>)
1000aec6:	781b      	ldrb	r3, [r3, #0]
1000aec8:	2b00      	cmp	r3, #0
1000aeca:	d003      	beq.n	1000aed4 <platform_driver_init+0x18>
1000aecc:	4b42      	ldr	r3, [pc, #264]	; (1000afd8 <platform_driver_init+0x11c>)
1000aece:	781b      	ldrb	r3, [r3, #0]
1000aed0:	2b01      	cmp	r3, #1
1000aed2:	d079      	beq.n	1000afc8 <platform_driver_init+0x10c>
		init_port_list();
1000aed4:	4b41      	ldr	r3, [pc, #260]	; (1000afdc <platform_driver_init+0x120>)
1000aed6:	4798      	blx	r3
		init_clock();
1000aed8:	4b41      	ldr	r3, [pc, #260]	; (1000afe0 <platform_driver_init+0x124>)
1000aeda:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000aedc:	2700      	movs	r7, #0
1000aede:	4b41      	ldr	r3, [pc, #260]	; (1000afe4 <platform_driver_init+0x128>)
1000aee0:	601f      	str	r7, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aee2:	4c41      	ldr	r4, [pc, #260]	; (1000afe8 <platform_driver_init+0x12c>)
1000aee4:	2380      	movs	r3, #128	; 0x80
1000aee6:	2280      	movs	r2, #128	; 0x80
1000aee8:	0412      	lsls	r2, r2, #16
1000aeea:	4691      	mov	r9, r2
1000aeec:	50e2      	str	r2, [r4, r3]
1000aeee:	2280      	movs	r2, #128	; 0x80
1000aef0:	0452      	lsls	r2, r2, #17
1000aef2:	4690      	mov	r8, r2
1000aef4:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000aef6:	4d3d      	ldr	r5, [pc, #244]	; (1000afec <platform_driver_init+0x130>)
1000aef8:	4b3d      	ldr	r3, [pc, #244]	; (1000aff0 <platform_driver_init+0x134>)
1000aefa:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000aefc:	4b3d      	ldr	r3, [pc, #244]	; (1000aff4 <platform_driver_init+0x138>)
1000aefe:	4a3e      	ldr	r2, [pc, #248]	; (1000aff8 <platform_driver_init+0x13c>)
1000af00:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000af02:	493e      	ldr	r1, [pc, #248]	; (1000affc <platform_driver_init+0x140>)
1000af04:	4a3e      	ldr	r2, [pc, #248]	; (1000b000 <platform_driver_init+0x144>)
1000af06:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000af08:	4a3e      	ldr	r2, [pc, #248]	; (1000b004 <platform_driver_init+0x148>)
1000af0a:	6811      	ldr	r1, [r2, #0]
1000af0c:	4a3e      	ldr	r2, [pc, #248]	; (1000b008 <platform_driver_init+0x14c>)
1000af0e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000af10:	4a3e      	ldr	r2, [pc, #248]	; (1000b00c <platform_driver_init+0x150>)
1000af12:	6811      	ldr	r1, [r2, #0]
1000af14:	4a3e      	ldr	r2, [pc, #248]	; (1000b010 <platform_driver_init+0x154>)
1000af16:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000af18:	493e      	ldr	r1, [pc, #248]	; (1000b014 <platform_driver_init+0x158>)
1000af1a:	4a3f      	ldr	r2, [pc, #252]	; (1000b018 <platform_driver_init+0x15c>)
1000af1c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000af1e:	493f      	ldr	r1, [pc, #252]	; (1000b01c <platform_driver_init+0x160>)
1000af20:	4a3f      	ldr	r2, [pc, #252]	; (1000b020 <platform_driver_init+0x164>)
1000af22:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000af24:	4e3f      	ldr	r6, [pc, #252]	; (1000b024 <platform_driver_init+0x168>)
1000af26:	4a40      	ldr	r2, [pc, #256]	; (1000b028 <platform_driver_init+0x16c>)
1000af28:	6032      	str	r2, [r6, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000af2a:	4940      	ldr	r1, [pc, #256]	; (1000b02c <platform_driver_init+0x170>)
1000af2c:	4a40      	ldr	r2, [pc, #256]	; (1000b030 <platform_driver_init+0x174>)
1000af2e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000af30:	4940      	ldr	r1, [pc, #256]	; (1000b034 <platform_driver_init+0x178>)
1000af32:	4a41      	ldr	r2, [pc, #260]	; (1000b038 <platform_driver_init+0x17c>)
1000af34:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000af36:	4941      	ldr	r1, [pc, #260]	; (1000b03c <platform_driver_init+0x180>)
1000af38:	4a41      	ldr	r2, [pc, #260]	; (1000b040 <platform_driver_init+0x184>)
1000af3a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000af3c:	4941      	ldr	r1, [pc, #260]	; (1000b044 <platform_driver_init+0x188>)
1000af3e:	4a42      	ldr	r2, [pc, #264]	; (1000b048 <platform_driver_init+0x18c>)
1000af40:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000af42:	4942      	ldr	r1, [pc, #264]	; (1000b04c <platform_driver_init+0x190>)
1000af44:	4a42      	ldr	r2, [pc, #264]	; (1000b050 <platform_driver_init+0x194>)
1000af46:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000af48:	4942      	ldr	r1, [pc, #264]	; (1000b054 <platform_driver_init+0x198>)
1000af4a:	4a43      	ldr	r2, [pc, #268]	; (1000b058 <platform_driver_init+0x19c>)
1000af4c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000af4e:	2028      	movs	r0, #40	; 0x28
1000af50:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000af52:	4942      	ldr	r1, [pc, #264]	; (1000b05c <platform_driver_init+0x1a0>)
1000af54:	2028      	movs	r0, #40	; 0x28
1000af56:	682b      	ldr	r3, [r5, #0]
1000af58:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000af5a:	682b      	ldr	r3, [r5, #0]
1000af5c:	4940      	ldr	r1, [pc, #256]	; (1000b060 <platform_driver_init+0x1a4>)
1000af5e:	2027      	movs	r0, #39	; 0x27
1000af60:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000af62:	4b40      	ldr	r3, [pc, #256]	; (1000b064 <platform_driver_init+0x1a8>)
1000af64:	681a      	ldr	r2, [r3, #0]
1000af66:	4b40      	ldr	r3, [pc, #256]	; (1000b068 <platform_driver_init+0x1ac>)
1000af68:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000af6a:	4a40      	ldr	r2, [pc, #256]	; (1000b06c <platform_driver_init+0x1b0>)
1000af6c:	4b40      	ldr	r3, [pc, #256]	; (1000b070 <platform_driver_init+0x1b4>)
1000af6e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000af70:	4a40      	ldr	r2, [pc, #256]	; (1000b074 <platform_driver_init+0x1b8>)
1000af72:	4b41      	ldr	r3, [pc, #260]	; (1000b078 <platform_driver_init+0x1bc>)
1000af74:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000af76:	4a41      	ldr	r2, [pc, #260]	; (1000b07c <platform_driver_init+0x1c0>)
1000af78:	4b41      	ldr	r3, [pc, #260]	; (1000b080 <platform_driver_init+0x1c4>)
1000af7a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000af7c:	4a41      	ldr	r2, [pc, #260]	; (1000b084 <platform_driver_init+0x1c8>)
1000af7e:	4b42      	ldr	r3, [pc, #264]	; (1000b088 <platform_driver_init+0x1cc>)
1000af80:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000af82:	4a42      	ldr	r2, [pc, #264]	; (1000b08c <platform_driver_init+0x1d0>)
1000af84:	4b42      	ldr	r3, [pc, #264]	; (1000b090 <platform_driver_init+0x1d4>)
1000af86:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000af88:	4a42      	ldr	r2, [pc, #264]	; (1000b094 <platform_driver_init+0x1d8>)
1000af8a:	4b43      	ldr	r3, [pc, #268]	; (1000b098 <platform_driver_init+0x1dc>)
1000af8c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000af8e:	4a43      	ldr	r2, [pc, #268]	; (1000b09c <platform_driver_init+0x1e0>)
1000af90:	4b43      	ldr	r3, [pc, #268]	; (1000b0a0 <platform_driver_init+0x1e4>)
1000af92:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000af94:	22a0      	movs	r2, #160	; 0xa0
1000af96:	0092      	lsls	r2, r2, #2
1000af98:	2100      	movs	r1, #0
1000af9a:	4842      	ldr	r0, [pc, #264]	; (1000b0a4 <platform_driver_init+0x1e8>)
1000af9c:	4b42      	ldr	r3, [pc, #264]	; (1000b0a8 <platform_driver_init+0x1ec>)
1000af9e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000afa0:	2280      	movs	r2, #128	; 0x80
1000afa2:	0092      	lsls	r2, r2, #2
1000afa4:	4b41      	ldr	r3, [pc, #260]	; (1000b0ac <platform_driver_init+0x1f0>)
1000afa6:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000afa8:	4b41      	ldr	r3, [pc, #260]	; (1000b0b0 <platform_driver_init+0x1f4>)
1000afaa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000afac:	464b      	mov	r3, r9
1000afae:	6023      	str	r3, [r4, #0]
1000afb0:	4643      	mov	r3, r8
1000afb2:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000afb4:	4b3f      	ldr	r3, [pc, #252]	; (1000b0b4 <platform_driver_init+0x1f8>)
1000afb6:	601f      	str	r7, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000afb8:	6833      	ldr	r3, [r6, #0]
1000afba:	4a3f      	ldr	r2, [pc, #252]	; (1000b0b8 <platform_driver_init+0x1fc>)
1000afbc:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1000afbe:	2201      	movs	r2, #1
1000afc0:	4b05      	ldr	r3, [pc, #20]	; (1000afd8 <platform_driver_init+0x11c>)
1000afc2:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000afc4:	2000      	movs	r0, #0
1000afc6:	e003      	b.n	1000afd0 <platform_driver_init+0x114>
	}
	else {
		platform_initialized = 1;
1000afc8:	2201      	movs	r2, #1
1000afca:	4b03      	ldr	r3, [pc, #12]	; (1000afd8 <platform_driver_init+0x11c>)
1000afcc:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000afce:	2001      	movs	r0, #1
	}
	return status;
}
1000afd0:	bc0c      	pop	{r2, r3}
1000afd2:	4690      	mov	r8, r2
1000afd4:	4699      	mov	r9, r3
1000afd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000afd8:	10012464 	.word	0x10012464
1000afdc:	1000ae41 	.word	0x1000ae41
1000afe0:	1000ae8d 	.word	0x1000ae8d
1000afe4:	10012488 	.word	0x10012488
1000afe8:	e000e100 	.word	0xe000e100
1000afec:	1001320c 	.word	0x1001320c
1000aff0:	000007d7 	.word	0x000007d7
1000aff4:	000007bd 	.word	0x000007bd
1000aff8:	10012f4c 	.word	0x10012f4c
1000affc:	0001bc51 	.word	0x0001bc51
1000b000:	10013210 	.word	0x10013210
1000b004:	100400bc 	.word	0x100400bc
1000b008:	10012458 	.word	0x10012458
1000b00c:	100400b8 	.word	0x100400b8
1000b010:	10012454 	.word	0x10012454
1000b014:	0001b99f 	.word	0x0001b99f
1000b018:	10012f48 	.word	0x10012f48
1000b01c:	0001b9db 	.word	0x0001b9db
1000b020:	10012f50 	.word	0x10012f50
1000b024:	1001321c 	.word	0x1001321c
1000b028:	1004003c 	.word	0x1004003c
1000b02c:	10041fc0 	.word	0x10041fc0
1000b030:	10012f54 	.word	0x10012f54
1000b034:	10041fc4 	.word	0x10041fc4
1000b038:	10013218 	.word	0x10013218
1000b03c:	0001cbe9 	.word	0x0001cbe9
1000b040:	10012474 	.word	0x10012474
1000b044:	0001cd8f 	.word	0x0001cd8f
1000b048:	10012468 	.word	0x10012468
1000b04c:	0001cea3 	.word	0x0001cea3
1000b050:	1001248c 	.word	0x1001248c
1000b054:	0001cbcf 	.word	0x0001cbcf
1000b058:	10012460 	.word	0x10012460
1000b05c:	1000b531 	.word	0x1000b531
1000b060:	1000b4c5 	.word	0x1000b4c5
1000b064:	100400e4 	.word	0x100400e4
1000b068:	1001247c 	.word	0x1001247c
1000b06c:	00019fe9 	.word	0x00019fe9
1000b070:	10012490 	.word	0x10012490
1000b074:	0001dbdd 	.word	0x0001dbdd
1000b078:	1001245c 	.word	0x1001245c
1000b07c:	0001dc5b 	.word	0x0001dc5b
1000b080:	10012470 	.word	0x10012470
1000b084:	100405ec 	.word	0x100405ec
1000b088:	1001246c 	.word	0x1001246c
1000b08c:	0001d5e3 	.word	0x0001d5e3
1000b090:	10012478 	.word	0x10012478
1000b094:	10040c20 	.word	0x10040c20
1000b098:	10012494 	.word	0x10012494
1000b09c:	00019f09 	.word	0x00019f09
1000b0a0:	10012450 	.word	0x10012450
1000b0a4:	10012f8c 	.word	0x10012f8c
1000b0a8:	1000f8ed 	.word	0x1000f8ed
1000b0ac:	10013220 	.word	0x10013220
1000b0b0:	1000ad79 	.word	0x1000ad79
1000b0b4:	10013214 	.word	0x10013214
1000b0b8:	1000ae15 	.word	0x1000ae15

1000b0bc <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b0bc:	4b04      	ldr	r3, [pc, #16]	; (1000b0d0 <platform_register_ble_msg_handler+0x14>)
1000b0be:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b0c0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b0c2:	2a01      	cmp	r2, #1
1000b0c4:	d102      	bne.n	1000b0cc <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b0c6:	4b03      	ldr	r3, [pc, #12]	; (1000b0d4 <platform_register_ble_msg_handler+0x18>)
1000b0c8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b0ca:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b0cc:	0018      	movs	r0, r3
1000b0ce:	4770      	bx	lr
1000b0d0:	10012464 	.word	0x10012464
1000b0d4:	10012488 	.word	0x10012488

1000b0d8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b0d8:	b570      	push	{r4, r5, r6, lr}
1000b0da:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b0dc:	4b0e      	ldr	r3, [pc, #56]	; (1000b118 <platform_interface_send+0x40>)
1000b0de:	681b      	ldr	r3, [r3, #0]
1000b0e0:	2b00      	cmp	r3, #0
1000b0e2:	d002      	beq.n	1000b0ea <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b0e4:	8840      	ldrh	r0, [r0, #2]
1000b0e6:	4798      	blx	r3
1000b0e8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b0ea:	88e3      	ldrh	r3, [r4, #6]
1000b0ec:	88a2      	ldrh	r2, [r4, #4]
1000b0ee:	8861      	ldrh	r1, [r4, #2]
1000b0f0:	8820      	ldrh	r0, [r4, #0]
1000b0f2:	4d0a      	ldr	r5, [pc, #40]	; (1000b11c <platform_interface_send+0x44>)
1000b0f4:	682d      	ldr	r5, [r5, #0]
1000b0f6:	47a8      	blx	r5
1000b0f8:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b0fa:	88e2      	ldrh	r2, [r4, #6]
1000b0fc:	2a00      	cmp	r2, #0
1000b0fe:	d102      	bne.n	1000b106 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b100:	4b07      	ldr	r3, [pc, #28]	; (1000b120 <platform_interface_send+0x48>)
1000b102:	4798      	blx	r3
1000b104:	e006      	b.n	1000b114 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b106:	0021      	movs	r1, r4
1000b108:	3108      	adds	r1, #8
1000b10a:	4b06      	ldr	r3, [pc, #24]	; (1000b124 <platform_interface_send+0x4c>)
1000b10c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b10e:	0028      	movs	r0, r5
1000b110:	4b03      	ldr	r3, [pc, #12]	; (1000b120 <platform_interface_send+0x48>)
1000b112:	4798      	blx	r3
	}
}
1000b114:	bd70      	pop	{r4, r5, r6, pc}
1000b116:	46c0      	nop			; (mov r8, r8)
1000b118:	10012458 	.word	0x10012458
1000b11c:	10012490 	.word	0x10012490
1000b120:	1000ada9 	.word	0x1000ada9
1000b124:	1000f8db 	.word	0x1000f8db

1000b128 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b12a:	0004      	movs	r4, r0
1000b12c:	000f      	movs	r7, r1
1000b12e:	0016      	movs	r6, r2
1000b130:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
1000b132:	4b0e      	ldr	r3, [pc, #56]	; (1000b16c <send_plf_int_msg_ind+0x44>)
1000b134:	6818      	ldr	r0, [r3, #0]
1000b136:	4b0e      	ldr	r3, [pc, #56]	; (1000b170 <send_plf_int_msg_ind+0x48>)
1000b138:	681b      	ldr	r3, [r3, #0]
1000b13a:	4798      	blx	r3
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b13c:	023a      	lsls	r2, r7, #8
1000b13e:	4322      	orrs	r2, r4
1000b140:	4b0c      	ldr	r3, [pc, #48]	; (1000b174 <send_plf_int_msg_ind+0x4c>)
1000b142:	681c      	ldr	r4, [r3, #0]
1000b144:	002b      	movs	r3, r5
1000b146:	2105      	movs	r1, #5
1000b148:	20a0      	movs	r0, #160	; 0xa0
1000b14a:	00c0      	lsls	r0, r0, #3
1000b14c:	47a0      	blx	r4
1000b14e:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000b150:	d00a      	beq.n	1000b168 <send_plf_int_msg_ind+0x40>
		if((data_len != 0) && (NULL != data))
1000b152:	2d00      	cmp	r5, #0
1000b154:	d005      	beq.n	1000b162 <send_plf_int_msg_ind+0x3a>
1000b156:	2e00      	cmp	r6, #0
1000b158:	d003      	beq.n	1000b162 <send_plf_int_msg_ind+0x3a>
		{
			//copy params
			memcpy(params, data, data_len);
1000b15a:	002a      	movs	r2, r5
1000b15c:	0031      	movs	r1, r6
1000b15e:	4b06      	ldr	r3, [pc, #24]	; (1000b178 <send_plf_int_msg_ind+0x50>)
1000b160:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b162:	0020      	movs	r0, r4
1000b164:	4b05      	ldr	r3, [pc, #20]	; (1000b17c <send_plf_int_msg_ind+0x54>)
1000b166:	4798      	blx	r3
	}
}
1000b168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b16a:	46c0      	nop			; (mov r8, r8)
1000b16c:	1001246c 	.word	0x1001246c
1000b170:	1001245c 	.word	0x1001245c
1000b174:	10012490 	.word	0x10012490
1000b178:	1000f8db 	.word	0x1000f8db
1000b17c:	1000ada9 	.word	0x1000ada9

1000b180 <platform_event_wait>:
	
	platform_interface_send(msg, u16TxLen);
}

plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b180:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b182:	465f      	mov	r7, fp
1000b184:	4656      	mov	r6, sl
1000b186:	464d      	mov	r5, r9
1000b188:	4644      	mov	r4, r8
1000b18a:	b4f0      	push	{r4, r5, r6, r7}
1000b18c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b18e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b190:	2300      	movs	r3, #0
1000b192:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b194:	1ce3      	adds	r3, r4, #3
1000b196:	d81c      	bhi.n	1000b1d2 <platform_event_wait+0x52>
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b198:	220d      	movs	r2, #13
1000b19a:	2100      	movs	r1, #0
1000b19c:	a802      	add	r0, sp, #8
1000b19e:	4b82      	ldr	r3, [pc, #520]	; (1000b3a8 <platform_event_wait+0x228>)
1000b1a0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b1a2:	2319      	movs	r3, #25
1000b1a4:	aa02      	add	r2, sp, #8
1000b1a6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b1a8:	3b16      	subs	r3, #22
1000b1aa:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b1ac:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b1ae:	3302      	adds	r3, #2
1000b1b0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b1b2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b1b4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b1b6:	0a23      	lsrs	r3, r4, #8
1000b1b8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b1ba:	0c23      	lsrs	r3, r4, #16
1000b1bc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b1be:	0e24      	lsrs	r4, r4, #24
1000b1c0:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b1c2:	2301      	movs	r3, #1
1000b1c4:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b1c6:	210d      	movs	r1, #13
1000b1c8:	0010      	movs	r0, r2
1000b1ca:	4b78      	ldr	r3, [pc, #480]	; (1000b3ac <platform_event_wait+0x22c>)
1000b1cc:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b1ce:	2301      	movs	r3, #1
1000b1d0:	4699      	mov	r9, r3
1000b1d2:	2400      	movs	r4, #0
1000b1d4:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b1d6:	4f76      	ldr	r7, [pc, #472]	; (1000b3b0 <platform_event_wait+0x230>)
1000b1d8:	4e76      	ldr	r6, [pc, #472]	; (1000b3b4 <platform_event_wait+0x234>)
1000b1da:	4977      	ldr	r1, [pc, #476]	; (1000b3b8 <platform_event_wait+0x238>)
1000b1dc:	6838      	ldr	r0, [r7, #0]
1000b1de:	6833      	ldr	r3, [r6, #0]
1000b1e0:	4798      	blx	r3
1000b1e2:	2800      	cmp	r0, #0
1000b1e4:	d000      	beq.n	1000b1e8 <platform_event_wait+0x68>
1000b1e6:	e088      	b.n	1000b2fa <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b1e8:	4b73      	ldr	r3, [pc, #460]	; (1000b3b8 <platform_event_wait+0x238>)
1000b1ea:	681c      	ldr	r4, [r3, #0]
1000b1ec:	88a3      	ldrh	r3, [r4, #4]
1000b1ee:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b1f0:	23cd      	movs	r3, #205	; 0xcd
1000b1f2:	009b      	lsls	r3, r3, #2
1000b1f4:	459a      	cmp	sl, r3
1000b1f6:	d100      	bne.n	1000b1fa <platform_event_wait+0x7a>
1000b1f8:	e0c7      	b.n	1000b38a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b1fa:	8923      	ldrh	r3, [r4, #8]
1000b1fc:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b1fe:	8963      	ldrh	r3, [r4, #10]
1000b200:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b202:	464b      	mov	r3, r9
1000b204:	2b00      	cmp	r3, #0
1000b206:	d011      	beq.n	1000b22c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b208:	220d      	movs	r2, #13
1000b20a:	2100      	movs	r1, #0
1000b20c:	a802      	add	r0, sp, #8
1000b20e:	4b66      	ldr	r3, [pc, #408]	; (1000b3a8 <platform_event_wait+0x228>)
1000b210:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b212:	2319      	movs	r3, #25
1000b214:	aa02      	add	r2, sp, #8
1000b216:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b218:	3b16      	subs	r3, #22
1000b21a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b21c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b21e:	3302      	adds	r3, #2
1000b220:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b222:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b224:	210d      	movs	r1, #13
1000b226:	0010      	movs	r0, r2
1000b228:	4b60      	ldr	r3, [pc, #384]	; (1000b3ac <platform_event_wait+0x22c>)
1000b22a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b22c:	23a0      	movs	r3, #160	; 0xa0
1000b22e:	00db      	lsls	r3, r3, #3
1000b230:	459a      	cmp	sl, r3
1000b232:	d121      	bne.n	1000b278 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b234:	4b61      	ldr	r3, [pc, #388]	; (1000b3bc <platform_event_wait+0x23c>)
1000b236:	881b      	ldrh	r3, [r3, #0]
1000b238:	4443      	add	r3, r8
1000b23a:	22a0      	movs	r2, #160	; 0xa0
1000b23c:	0092      	lsls	r2, r2, #2
1000b23e:	4293      	cmp	r3, r2
1000b240:	dd02      	ble.n	1000b248 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b242:	3a80      	subs	r2, #128	; 0x80
1000b244:	4b5d      	ldr	r3, [pc, #372]	; (1000b3bc <platform_event_wait+0x23c>)
1000b246:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b248:	4b5c      	ldr	r3, [pc, #368]	; (1000b3bc <platform_event_wait+0x23c>)
1000b24a:	469a      	mov	sl, r3
1000b24c:	881d      	ldrh	r5, [r3, #0]
1000b24e:	4b5c      	ldr	r3, [pc, #368]	; (1000b3c0 <platform_event_wait+0x240>)
1000b250:	18ed      	adds	r5, r5, r3
1000b252:	0021      	movs	r1, r4
1000b254:	310c      	adds	r1, #12
1000b256:	4642      	mov	r2, r8
1000b258:	0028      	movs	r0, r5
1000b25a:	4b5a      	ldr	r3, [pc, #360]	; (1000b3c4 <platform_event_wait+0x244>)
1000b25c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b25e:	4642      	mov	r2, r8
1000b260:	0029      	movs	r1, r5
1000b262:	4658      	mov	r0, fp
1000b264:	4b58      	ldr	r3, [pc, #352]	; (1000b3c8 <platform_event_wait+0x248>)
1000b266:	4798      	blx	r3
				plf_event_buff_index += len;
1000b268:	4653      	mov	r3, sl
1000b26a:	881b      	ldrh	r3, [r3, #0]
1000b26c:	4443      	add	r3, r8
1000b26e:	4652      	mov	r2, sl
1000b270:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b272:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b274:	2502      	movs	r5, #2
1000b276:	e03a      	b.n	1000b2ee <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b278:	4b54      	ldr	r3, [pc, #336]	; (1000b3cc <platform_event_wait+0x24c>)
1000b27a:	681b      	ldr	r3, [r3, #0]
1000b27c:	2b00      	cmp	r3, #0
1000b27e:	d032      	beq.n	1000b2e6 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b280:	4b4d      	ldr	r3, [pc, #308]	; (1000b3b8 <platform_event_wait+0x238>)
1000b282:	681a      	ldr	r2, [r3, #0]
1000b284:	8893      	ldrh	r3, [r2, #4]
1000b286:	21cd      	movs	r1, #205	; 0xcd
1000b288:	0089      	lsls	r1, r1, #2
1000b28a:	428b      	cmp	r3, r1
1000b28c:	d104      	bne.n	1000b298 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b28e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b290:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b292:	2b00      	cmp	r3, #0
1000b294:	d02b      	beq.n	1000b2ee <platform_event_wait+0x16e>
1000b296:	e028      	b.n	1000b2ea <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b298:	4c4d      	ldr	r4, [pc, #308]	; (1000b3d0 <platform_event_wait+0x250>)
1000b29a:	4d49      	ldr	r5, [pc, #292]	; (1000b3c0 <platform_event_wait+0x240>)
1000b29c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b29e:	702b      	strb	r3, [r5, #0]
1000b2a0:	0a1b      	lsrs	r3, r3, #8
1000b2a2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b2a4:	8910      	ldrh	r0, [r2, #8]
1000b2a6:	4b4b      	ldr	r3, [pc, #300]	; (1000b3d4 <platform_event_wait+0x254>)
1000b2a8:	681b      	ldr	r3, [r3, #0]
1000b2aa:	4798      	blx	r3
1000b2ac:	7128      	strb	r0, [r5, #4]
1000b2ae:	0a00      	lsrs	r0, r0, #8
1000b2b0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b2b2:	6820      	ldr	r0, [r4, #0]
1000b2b4:	4b40      	ldr	r3, [pc, #256]	; (1000b3b8 <platform_event_wait+0x238>)
1000b2b6:	681a      	ldr	r2, [r3, #0]
1000b2b8:	88d2      	ldrh	r2, [r2, #6]
1000b2ba:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b2bc:	681d      	ldr	r5, [r3, #0]
1000b2be:	896b      	ldrh	r3, [r5, #10]
1000b2c0:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b2c2:	3008      	adds	r0, #8
1000b2c4:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b2c6:	896a      	ldrh	r2, [r5, #10]
1000b2c8:	2a00      	cmp	r2, #0
1000b2ca:	d003      	beq.n	1000b2d4 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b2cc:	0029      	movs	r1, r5
1000b2ce:	310c      	adds	r1, #12
1000b2d0:	4b3c      	ldr	r3, [pc, #240]	; (1000b3c4 <platform_event_wait+0x244>)
1000b2d2:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b2d4:	8969      	ldrh	r1, [r5, #10]
1000b2d6:	3108      	adds	r1, #8
1000b2d8:	4b3c      	ldr	r3, [pc, #240]	; (1000b3cc <platform_event_wait+0x24c>)
1000b2da:	681b      	ldr	r3, [r3, #0]
1000b2dc:	4838      	ldr	r0, [pc, #224]	; (1000b3c0 <platform_event_wait+0x240>)
1000b2de:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b2e0:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b2e2:	2503      	movs	r5, #3
1000b2e4:	e003      	b.n	1000b2ee <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b2e6:	2400      	movs	r4, #0
1000b2e8:	e001      	b.n	1000b2ee <platform_event_wait+0x16e>
1000b2ea:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b2ec:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b2ee:	4b32      	ldr	r3, [pc, #200]	; (1000b3b8 <platform_event_wait+0x238>)
1000b2f0:	6818      	ldr	r0, [r3, #0]
1000b2f2:	4b39      	ldr	r3, [pc, #228]	; (1000b3d8 <platform_event_wait+0x258>)
1000b2f4:	681b      	ldr	r3, [r3, #0]
1000b2f6:	4798      	blx	r3
1000b2f8:	e000      	b.n	1000b2fc <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b2fa:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b2fc:	2c00      	cmp	r4, #0
1000b2fe:	d000      	beq.n	1000b302 <platform_event_wait+0x182>
1000b300:	e76b      	b.n	1000b1da <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b302:	464b      	mov	r3, r9
1000b304:	2b00      	cmp	r3, #0
1000b306:	d046      	beq.n	1000b396 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b308:	4b29      	ldr	r3, [pc, #164]	; (1000b3b0 <platform_event_wait+0x230>)
1000b30a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b30c:	2e00      	cmp	r6, #0
1000b30e:	d104      	bne.n	1000b31a <platform_event_wait+0x19a>
1000b310:	2300      	movs	r3, #0
1000b312:	6a1c      	ldr	r4, [r3, #32]
1000b314:	2c00      	cmp	r4, #0
1000b316:	d131      	bne.n	1000b37c <platform_event_wait+0x1fc>
1000b318:	e03d      	b.n	1000b396 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b31a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b31c:	2314      	movs	r3, #20
1000b31e:	469c      	mov	ip, r3
1000b320:	44b4      	add	ip, r6
1000b322:	4663      	mov	r3, ip
1000b324:	4660      	mov	r0, ip
1000b326:	9300      	str	r3, [sp, #0]
1000b328:	4b2c      	ldr	r3, [pc, #176]	; (1000b3dc <platform_event_wait+0x25c>)
1000b32a:	681b      	ldr	r3, [r3, #0]
1000b32c:	4798      	blx	r3
	while(NULL != current)
1000b32e:	2c00      	cmp	r4, #0
1000b330:	d01f      	beq.n	1000b372 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b332:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b334:	23cd      	movs	r3, #205	; 0xcd
1000b336:	009b      	lsls	r3, r3, #2
1000b338:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b33a:	4b27      	ldr	r3, [pc, #156]	; (1000b3d8 <platform_event_wait+0x258>)
1000b33c:	469a      	mov	sl, r3
1000b33e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b340:	6803      	ldr	r3, [r0, #0]
1000b342:	889b      	ldrh	r3, [r3, #4]
1000b344:	4543      	cmp	r3, r8
1000b346:	d110      	bne.n	1000b36a <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b348:	2f00      	cmp	r7, #0
1000b34a:	d006      	beq.n	1000b35a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b34c:	6883      	ldr	r3, [r0, #8]
1000b34e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b350:	4653      	mov	r3, sl
1000b352:	681b      	ldr	r3, [r3, #0]
1000b354:	4798      	blx	r3
				current = prev->pstrNext;
1000b356:	68b8      	ldr	r0, [r7, #8]
1000b358:	e009      	b.n	1000b36e <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b35a:	6883      	ldr	r3, [r0, #8]
1000b35c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b35e:	4b1e      	ldr	r3, [pc, #120]	; (1000b3d8 <platform_event_wait+0x258>)
1000b360:	681b      	ldr	r3, [r3, #0]
1000b362:	9301      	str	r3, [sp, #4]
1000b364:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b366:	6a30      	ldr	r0, [r6, #32]
1000b368:	e001      	b.n	1000b36e <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b36a:	0007      	movs	r7, r0
1000b36c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b36e:	2800      	cmp	r0, #0
1000b370:	d1e6      	bne.n	1000b340 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b372:	4b1b      	ldr	r3, [pc, #108]	; (1000b3e0 <platform_event_wait+0x260>)
1000b374:	681b      	ldr	r3, [r3, #0]
1000b376:	9800      	ldr	r0, [sp, #0]
1000b378:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b37a:	e00c      	b.n	1000b396 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b37c:	2314      	movs	r3, #20
1000b37e:	9300      	str	r3, [sp, #0]
1000b380:	4b16      	ldr	r3, [pc, #88]	; (1000b3dc <platform_event_wait+0x25c>)
1000b382:	681b      	ldr	r3, [r3, #0]
1000b384:	2014      	movs	r0, #20
1000b386:	4798      	blx	r3
1000b388:	e7d3      	b.n	1000b332 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b38a:	4b10      	ldr	r3, [pc, #64]	; (1000b3cc <platform_event_wait+0x24c>)
1000b38c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b38e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b390:	2b00      	cmp	r3, #0
1000b392:	d0ac      	beq.n	1000b2ee <platform_event_wait+0x16e>
1000b394:	e77b      	b.n	1000b28e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b396:	0028      	movs	r0, r5
1000b398:	b007      	add	sp, #28
1000b39a:	bc3c      	pop	{r2, r3, r4, r5}
1000b39c:	4690      	mov	r8, r2
1000b39e:	4699      	mov	r9, r3
1000b3a0:	46a2      	mov	sl, r4
1000b3a2:	46ab      	mov	fp, r5
1000b3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b3a6:	46c0      	nop			; (mov r8, r8)
1000b3a8:	1000f8ed 	.word	0x1000f8ed
1000b3ac:	1000b0d9 	.word	0x1000b0d9
1000b3b0:	10012494 	.word	0x10012494
1000b3b4:	10012478 	.word	0x10012478
1000b3b8:	10012484 	.word	0x10012484
1000b3bc:	10013220 	.word	0x10013220
1000b3c0:	10012f8c 	.word	0x10012f8c
1000b3c4:	1000f8db 	.word	0x1000f8db
1000b3c8:	1000ad41 	.word	0x1000ad41
1000b3cc:	10012488 	.word	0x10012488
1000b3d0:	10012480 	.word	0x10012480
1000b3d4:	10012454 	.word	0x10012454
1000b3d8:	10012450 	.word	0x10012450
1000b3dc:	10012470 	.word	0x10012470
1000b3e0:	1001245c 	.word	0x1001245c

1000b3e4 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b3e4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b3e6:	4b12      	ldr	r3, [pc, #72]	; (1000b430 <acquire_sleep_lock+0x4c>)
1000b3e8:	681c      	ldr	r4, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b3ea:	4b12      	ldr	r3, [pc, #72]	; (1000b434 <acquire_sleep_lock+0x50>)
1000b3ec:	681b      	ldr	r3, [r3, #0]
1000b3ee:	2080      	movs	r0, #128	; 0x80
1000b3f0:	0200      	lsls	r0, r0, #8
1000b3f2:	4798      	blx	r3
	if(osc_en == 0)
1000b3f4:	07e3      	lsls	r3, r4, #31
1000b3f6:	d414      	bmi.n	1000b422 <acquire_sleep_lock+0x3e>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000b3f8:	4b0f      	ldr	r3, [pc, #60]	; (1000b438 <acquire_sleep_lock+0x54>)
1000b3fa:	681b      	ldr	r3, [r3, #0]
1000b3fc:	2002      	movs	r0, #2
1000b3fe:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000b400:	4b0e      	ldr	r3, [pc, #56]	; (1000b43c <acquire_sleep_lock+0x58>)
1000b402:	681b      	ldr	r3, [r3, #0]
1000b404:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000b406:	4c0e      	ldr	r4, [pc, #56]	; (1000b440 <acquire_sleep_lock+0x5c>)
1000b408:	2003      	movs	r0, #3
1000b40a:	6823      	ldr	r3, [r4, #0]
1000b40c:	4798      	blx	r3
1000b40e:	2800      	cmp	r0, #0
1000b410:	d1fa      	bne.n	1000b408 <acquire_sleep_lock+0x24>
		pwr_disable_arm_wakeup(1<<1);
1000b412:	4b0c      	ldr	r3, [pc, #48]	; (1000b444 <acquire_sleep_lock+0x60>)
1000b414:	681b      	ldr	r3, [r3, #0]
1000b416:	3002      	adds	r0, #2
1000b418:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000b41a:	2201      	movs	r2, #1
1000b41c:	4b0a      	ldr	r3, [pc, #40]	; (1000b448 <acquire_sleep_lock+0x64>)
1000b41e:	601a      	str	r2, [r3, #0]
1000b420:	e004      	b.n	1000b42c <acquire_sleep_lock+0x48>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
1000b422:	4b0a      	ldr	r3, [pc, #40]	; (1000b44c <acquire_sleep_lock+0x68>)
1000b424:	6818      	ldr	r0, [r3, #0]
1000b426:	4b0a      	ldr	r3, [pc, #40]	; (1000b450 <acquire_sleep_lock+0x6c>)
1000b428:	681b      	ldr	r3, [r3, #0]
1000b42a:	4798      	blx	r3
	}
	return status;
}
1000b42c:	2008      	movs	r0, #8
1000b42e:	bd10      	pop	{r4, pc}
1000b430:	4000b1ec 	.word	0x4000b1ec
1000b434:	10012f48 	.word	0x10012f48
1000b438:	10012474 	.word	0x10012474
1000b43c:	1001248c 	.word	0x1001248c
1000b440:	10012460 	.word	0x10012460
1000b444:	10012468 	.word	0x10012468
1000b448:	4000b020 	.word	0x4000b020
1000b44c:	1001246c 	.word	0x1001246c
1000b450:	1001245c 	.word	0x1001245c

1000b454 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
1000b454:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b456:	4a18      	ldr	r2, [pc, #96]	; (1000b4b8 <gpio1_combined_isr_handler+0x64>)
1000b458:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b45a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b45c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b45e:	2180      	movs	r1, #128	; 0x80
1000b460:	0209      	lsls	r1, r1, #8
1000b462:	4301      	orrs	r1, r0
1000b464:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b466:	0010      	movs	r0, r2
1000b468:	4d14      	ldr	r5, [pc, #80]	; (1000b4bc <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b46a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b46c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b46e:	05db      	lsls	r3, r3, #23
1000b470:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b472:	d011      	beq.n	1000b498 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b474:	b2db      	uxtb	r3, r3
1000b476:	4259      	negs	r1, r3
1000b478:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b47a:	2b01      	cmp	r3, #1
1000b47c:	d006      	beq.n	1000b48c <gpio1_combined_isr_handler+0x38>
1000b47e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b480:	085b      	lsrs	r3, r3, #1
				index++;
1000b482:	3101      	adds	r1, #1
1000b484:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b486:	2b01      	cmp	r3, #1
1000b488:	d1fa      	bne.n	1000b480 <gpio1_combined_isr_handler+0x2c>
1000b48a:	e000      	b.n	1000b48e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b48c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b48e:	0023      	movs	r3, r4
1000b490:	408b      	lsls	r3, r1
1000b492:	b29b      	uxth	r3, r3
1000b494:	8703      	strh	r3, [r0, #56]	; 0x38
1000b496:	e003      	b.n	1000b4a0 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b498:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b49a:	432b      	orrs	r3, r5
1000b49c:	b29b      	uxth	r3, r3
1000b49e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b4a0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b4a2:	05db      	lsls	r3, r3, #23
1000b4a4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b4a6:	d1e2      	bne.n	1000b46e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b4a8:	2180      	movs	r1, #128	; 0x80
1000b4aa:	0049      	lsls	r1, r1, #1
1000b4ac:	3381      	adds	r3, #129	; 0x81
1000b4ae:	33ff      	adds	r3, #255	; 0xff
1000b4b0:	4a03      	ldr	r2, [pc, #12]	; (1000b4c0 <gpio1_combined_isr_handler+0x6c>)
1000b4b2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b4b4:	bd30      	pop	{r4, r5, pc}
1000b4b6:	46c0      	nop			; (mov r8, r8)
1000b4b8:	40011000 	.word	0x40011000
1000b4bc:	ffff8000 	.word	0xffff8000
1000b4c0:	e000e100 	.word	0xe000e100

1000b4c4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b4c4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b4c6:	4a17      	ldr	r2, [pc, #92]	; (1000b524 <gpio0_combined_isr_handler+0x60>)
1000b4c8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b4ca:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b4cc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b4ce:	2180      	movs	r1, #128	; 0x80
1000b4d0:	0209      	lsls	r1, r1, #8
1000b4d2:	4301      	orrs	r1, r0
1000b4d4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b4d6:	0010      	movs	r0, r2
1000b4d8:	4d13      	ldr	r5, [pc, #76]	; (1000b528 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b4da:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b4dc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b4de:	05db      	lsls	r3, r3, #23
1000b4e0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b4e2:	d011      	beq.n	1000b508 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b4e4:	b2db      	uxtb	r3, r3
1000b4e6:	4259      	negs	r1, r3
1000b4e8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b4ea:	2b01      	cmp	r3, #1
1000b4ec:	d006      	beq.n	1000b4fc <gpio0_combined_isr_handler+0x38>
1000b4ee:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b4f0:	085b      	lsrs	r3, r3, #1
				index++;
1000b4f2:	3101      	adds	r1, #1
1000b4f4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b4f6:	2b01      	cmp	r3, #1
1000b4f8:	d1fa      	bne.n	1000b4f0 <gpio0_combined_isr_handler+0x2c>
1000b4fa:	e000      	b.n	1000b4fe <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b4fc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b4fe:	0023      	movs	r3, r4
1000b500:	408b      	lsls	r3, r1
1000b502:	b29b      	uxth	r3, r3
1000b504:	8703      	strh	r3, [r0, #56]	; 0x38
1000b506:	e003      	b.n	1000b510 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b508:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b50a:	432b      	orrs	r3, r5
1000b50c:	b29b      	uxth	r3, r3
1000b50e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b510:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b512:	05db      	lsls	r3, r3, #23
1000b514:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b516:	d1e2      	bne.n	1000b4de <gpio0_combined_isr_handler+0x1a>
1000b518:	2180      	movs	r1, #128	; 0x80
1000b51a:	3381      	adds	r3, #129	; 0x81
1000b51c:	33ff      	adds	r3, #255	; 0xff
1000b51e:	4a03      	ldr	r2, [pc, #12]	; (1000b52c <gpio0_combined_isr_handler+0x68>)
1000b520:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b522:	bd30      	pop	{r4, r5, pc}
1000b524:	40010000 	.word	0x40010000
1000b528:	ffff8000 	.word	0xffff8000
1000b52c:	e000e100 	.word	0xe000e100

1000b530 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b530:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b532:	4b0c      	ldr	r3, [pc, #48]	; (1000b564 <PORT1_COMB_Handler+0x34>)
1000b534:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b536:	0b5b      	lsrs	r3, r3, #13
1000b538:	d010      	beq.n	1000b55c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b53a:	4b0b      	ldr	r3, [pc, #44]	; (1000b568 <PORT1_COMB_Handler+0x38>)
1000b53c:	681b      	ldr	r3, [r3, #0]
1000b53e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b540:	4a08      	ldr	r2, [pc, #32]	; (1000b564 <PORT1_COMB_Handler+0x34>)
1000b542:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b544:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b546:	0b5b      	lsrs	r3, r3, #13
1000b548:	035b      	lsls	r3, r3, #13
1000b54a:	430b      	orrs	r3, r1
1000b54c:	8713      	strh	r3, [r2, #56]	; 0x38
1000b54e:	2180      	movs	r1, #128	; 0x80
1000b550:	0049      	lsls	r1, r1, #1
1000b552:	23c0      	movs	r3, #192	; 0xc0
1000b554:	005b      	lsls	r3, r3, #1
1000b556:	4a05      	ldr	r2, [pc, #20]	; (1000b56c <PORT1_COMB_Handler+0x3c>)
1000b558:	50d1      	str	r1, [r2, r3]
1000b55a:	e001      	b.n	1000b560 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b55c:	4b04      	ldr	r3, [pc, #16]	; (1000b570 <PORT1_COMB_Handler+0x40>)
1000b55e:	4798      	blx	r3
	}
}
1000b560:	bd10      	pop	{r4, pc}
1000b562:	46c0      	nop			; (mov r8, r8)
1000b564:	40011000 	.word	0x40011000
1000b568:	10013210 	.word	0x10013210
1000b56c:	e000e100 	.word	0xe000e100
1000b570:	1000b455 	.word	0x1000b455

1000b574 <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *params)
{
    ALL_UNUSED(params);
    app_state = SMS_DISCONNECTED;
1000b574:	2203      	movs	r2, #3
1000b576:	4b02      	ldr	r3, [pc, #8]	; (1000b580 <ble_disconnected_app_event+0xc>)
1000b578:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
}
1000b57a:	2000      	movs	r0, #0
1000b57c:	4770      	bx	lr
1000b57e:	46c0      	nop			; (mov r8, r8)
1000b580:	10013224 	.word	0x10013224

1000b584 <timer_callback_fn>:


/* timer callback function */
static void timer_callback_fn(void)
{
    app_state = SMS_INT_TIMER1;
1000b584:	2206      	movs	r2, #6
1000b586:	4b01      	ldr	r3, [pc, #4]	; (1000b58c <timer_callback_fn+0x8>)
1000b588:	701a      	strb	r2, [r3, #0]
    /* Add timer callback functionality here */
}
1000b58a:	4770      	bx	lr
1000b58c:	10013224 	.word	0x10013224

1000b590 <sms_gateway_char_write_resp>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_WRITE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_write_resp(void *params)
{
1000b590:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic write response");
1000b592:	4804      	ldr	r0, [pc, #16]	; (1000b5a4 <sms_gateway_char_write_resp+0x14>)
1000b594:	4b04      	ldr	r3, [pc, #16]	; (1000b5a8 <sms_gateway_char_write_resp+0x18>)
1000b596:	4798      	blx	r3
1000b598:	4804      	ldr	r0, [pc, #16]	; (1000b5ac <sms_gateway_char_write_resp+0x1c>)
1000b59a:	4b05      	ldr	r3, [pc, #20]	; (1000b5b0 <sms_gateway_char_write_resp+0x20>)
1000b59c:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b59e:	2000      	movs	r0, #0
1000b5a0:	bd10      	pop	{r4, pc}
1000b5a2:	46c0      	nop			; (mov r8, r8)
1000b5a4:	10010ce8 	.word	0x10010ce8
1000b5a8:	1000fa1d 	.word	0x1000fa1d
1000b5ac:	10011db0 	.word	0x10011db0
1000b5b0:	1000f8fd 	.word	0x1000f8fd

1000b5b4 <sms_gateway_char_read_multiple>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_MULTIBLE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_read_multiple(void *params)
{
1000b5b4:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by multiple BLE responses");
1000b5b6:	4804      	ldr	r0, [pc, #16]	; (1000b5c8 <sms_gateway_char_read_multiple+0x14>)
1000b5b8:	4b04      	ldr	r3, [pc, #16]	; (1000b5cc <sms_gateway_char_read_multiple+0x18>)
1000b5ba:	4798      	blx	r3
1000b5bc:	4804      	ldr	r0, [pc, #16]	; (1000b5d0 <sms_gateway_char_read_multiple+0x1c>)
1000b5be:	4b05      	ldr	r3, [pc, #20]	; (1000b5d4 <sms_gateway_char_read_multiple+0x20>)
1000b5c0:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b5c2:	2000      	movs	r0, #0
1000b5c4:	bd10      	pop	{r4, pc}
1000b5c6:	46c0      	nop			; (mov r8, r8)
1000b5c8:	10010ce8 	.word	0x10010ce8
1000b5cc:	1000fa1d 	.word	0x1000fa1d
1000b5d0:	10011dd0 	.word	0x10011dd0
1000b5d4:	1000f8fd 	.word	0x1000f8fd

1000b5d8 <sms_gateway_char_read_by_uuid>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_BY_UUID_RESPONSE event from stack */
static at_ble_status_t 	sms_gateway_char_read_by_uuid(void *params)
{
1000b5d8:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by uuid response");
1000b5da:	4804      	ldr	r0, [pc, #16]	; (1000b5ec <sms_gateway_char_read_by_uuid+0x14>)
1000b5dc:	4b04      	ldr	r3, [pc, #16]	; (1000b5f0 <sms_gateway_char_read_by_uuid+0x18>)
1000b5de:	4798      	blx	r3
1000b5e0:	4804      	ldr	r0, [pc, #16]	; (1000b5f4 <sms_gateway_char_read_by_uuid+0x1c>)
1000b5e2:	4b05      	ldr	r3, [pc, #20]	; (1000b5f8 <sms_gateway_char_read_by_uuid+0x20>)
1000b5e4:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b5e6:	2000      	movs	r0, #0
1000b5e8:	bd10      	pop	{r4, pc}
1000b5ea:	46c0      	nop			; (mov r8, r8)
1000b5ec:	10010ce8 	.word	0x10010ce8
1000b5f0:	1000fa1d 	.word	0x1000fa1d
1000b5f4:	10011e00 	.word	0x10011e00
1000b5f8:	1000f8fd 	.word	0x1000f8fd

1000b5fc <sms_gateway_discovery_complete>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE (#23) event from stack */
static at_ble_status_t sms_gateway_discovery_complete(void *params)
{
1000b5fc:	b510      	push	{r4, lr}
    DBG_LOG("Discovery complete");
1000b5fe:	4804      	ldr	r0, [pc, #16]	; (1000b610 <sms_gateway_discovery_complete+0x14>)
1000b600:	4b04      	ldr	r3, [pc, #16]	; (1000b614 <sms_gateway_discovery_complete+0x18>)
1000b602:	4798      	blx	r3
1000b604:	4804      	ldr	r0, [pc, #16]	; (1000b618 <sms_gateway_discovery_complete+0x1c>)
1000b606:	4b05      	ldr	r3, [pc, #20]	; (1000b61c <sms_gateway_discovery_complete+0x20>)
1000b608:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b60a:	2000      	movs	r0, #0
1000b60c:	bd10      	pop	{r4, pc}
1000b60e:	46c0      	nop			; (mov r8, r8)
1000b610:	10010ce8 	.word	0x10010ce8
1000b614:	1000fa1d 	.word	0x1000fa1d
1000b618:	10011e28 	.word	0x10011e28
1000b61c:	1000f8fd 	.word	0x1000f8fd

1000b620 <sms_gateway_descr_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DESCRIPTOR_FOUND event from stack */
static at_ble_status_t sms_gateway_descr_found(void *params)
{
1000b620:	b510      	push	{r4, lr}
    DBG_LOG("Descriptor found");
1000b622:	4804      	ldr	r0, [pc, #16]	; (1000b634 <sms_gateway_descr_found+0x14>)
1000b624:	4b04      	ldr	r3, [pc, #16]	; (1000b638 <sms_gateway_descr_found+0x18>)
1000b626:	4798      	blx	r3
1000b628:	4804      	ldr	r0, [pc, #16]	; (1000b63c <sms_gateway_descr_found+0x1c>)
1000b62a:	4b05      	ldr	r3, [pc, #20]	; (1000b640 <sms_gateway_descr_found+0x20>)
1000b62c:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b62e:	2000      	movs	r0, #0
1000b630:	bd10      	pop	{r4, pc}
1000b632:	46c0      	nop			; (mov r8, r8)
1000b634:	10010ce8 	.word	0x10010ce8
1000b638:	1000fa1d 	.word	0x1000fa1d
1000b63c:	10011e3c 	.word	0x10011e3c
1000b640:	1000f8fd 	.word	0x1000f8fd

1000b644 <sms_gateway_char_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_FOUND event from stack */
static at_ble_status_t sms_gateway_char_found(void *params)
{
1000b644:	b510      	push	{r4, lr}
    DBG_LOG_DEV("Characteristic found");
1000b646:	4804      	ldr	r0, [pc, #16]	; (1000b658 <sms_gateway_char_found+0x14>)
1000b648:	4b04      	ldr	r3, [pc, #16]	; (1000b65c <sms_gateway_char_found+0x18>)
1000b64a:	4798      	blx	r3
1000b64c:	4804      	ldr	r0, [pc, #16]	; (1000b660 <sms_gateway_char_found+0x1c>)
1000b64e:	4b05      	ldr	r3, [pc, #20]	; (1000b664 <sms_gateway_char_found+0x20>)
1000b650:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b652:	2000      	movs	r0, #0
1000b654:	bd10      	pop	{r4, pc}
1000b656:	46c0      	nop			; (mov r8, r8)
1000b658:	10010ce8 	.word	0x10010ce8
1000b65c:	1000fa1d 	.word	0x1000fa1d
1000b660:	10011e50 	.word	0x10011e50
1000b664:	1000f8fd 	.word	0x1000f8fd

1000b668 <sms_gateway_service_found>:
/* .... */

/* GATT CLIENT */
/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND (#19) event from stack */
static at_ble_status_t sms_gateway_service_found(void *params)
{
1000b668:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b66a:	4647      	mov	r7, r8
1000b66c:	b480      	push	{r7}
1000b66e:	4680      	mov	r8, r0
    DBG_LOG_DEV("Primary service found");
1000b670:	4e19      	ldr	r6, [pc, #100]	; (1000b6d8 <sms_gateway_service_found+0x70>)
1000b672:	0030      	movs	r0, r6
1000b674:	4d19      	ldr	r5, [pc, #100]	; (1000b6dc <sms_gateway_service_found+0x74>)
1000b676:	47a8      	blx	r5
1000b678:	4819      	ldr	r0, [pc, #100]	; (1000b6e0 <sms_gateway_service_found+0x78>)
1000b67a:	4c1a      	ldr	r4, [pc, #104]	; (1000b6e4 <sms_gateway_service_found+0x7c>)
1000b67c:	47a0      	blx	r4
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
1000b67e:	0030      	movs	r0, r6
1000b680:	47a8      	blx	r5
1000b682:	4819      	ldr	r0, [pc, #100]	; (1000b6e8 <sms_gateway_service_found+0x80>)
1000b684:	47a0      	blx	r4
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
1000b686:	0030      	movs	r0, r6
1000b688:	47a8      	blx	r5
1000b68a:	4643      	mov	r3, r8
1000b68c:	7999      	ldrb	r1, [r3, #6]
1000b68e:	4817      	ldr	r0, [pc, #92]	; (1000b6ec <sms_gateway_service_found+0x84>)
1000b690:	47a0      	blx	r4
    DBG_LOG_DEV("  service uuid: 0x");
1000b692:	0030      	movs	r0, r6
1000b694:	47a8      	blx	r5
1000b696:	4816      	ldr	r0, [pc, #88]	; (1000b6f0 <sms_gateway_service_found+0x88>)
1000b698:	47a0      	blx	r4
1000b69a:	4643      	mov	r3, r8
1000b69c:	1ddc      	adds	r4, r3, #7
1000b69e:	4647      	mov	r7, r8
1000b6a0:	3717      	adds	r7, #23
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        DBG_LOG_CONT_DEV("%x", service->service_uuid.uuid[i]);
1000b6a2:	4e14      	ldr	r6, [pc, #80]	; (1000b6f4 <sms_gateway_service_found+0x8c>)
1000b6a4:	4d0f      	ldr	r5, [pc, #60]	; (1000b6e4 <sms_gateway_service_found+0x7c>)
1000b6a6:	7821      	ldrb	r1, [r4, #0]
1000b6a8:	0030      	movs	r0, r6
1000b6aa:	47a8      	blx	r5
1000b6ac:	3401      	adds	r4, #1
    DBG_LOG_DEV("Primary service found");
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
    DBG_LOG_DEV("  service uuid: 0x");
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
1000b6ae:	42bc      	cmp	r4, r7
1000b6b0:	d1f9      	bne.n	1000b6a6 <sms_gateway_service_found+0x3e>
        DBG_LOG_CONT_DEV("%x", service->service_uuid.uuid[i]);
    }
    DBG_LOG_DEV("  start handle: %d", service->start_handle);
1000b6b2:	4e09      	ldr	r6, [pc, #36]	; (1000b6d8 <sms_gateway_service_found+0x70>)
1000b6b4:	0030      	movs	r0, r6
1000b6b6:	4d09      	ldr	r5, [pc, #36]	; (1000b6dc <sms_gateway_service_found+0x74>)
1000b6b8:	47a8      	blx	r5
1000b6ba:	4643      	mov	r3, r8
1000b6bc:	8859      	ldrh	r1, [r3, #2]
1000b6be:	480e      	ldr	r0, [pc, #56]	; (1000b6f8 <sms_gateway_service_found+0x90>)
1000b6c0:	4c08      	ldr	r4, [pc, #32]	; (1000b6e4 <sms_gateway_service_found+0x7c>)
1000b6c2:	47a0      	blx	r4
    DBG_LOG_DEV("  end handle: %d", service->end_handle);
1000b6c4:	0030      	movs	r0, r6
1000b6c6:	47a8      	blx	r5
1000b6c8:	4643      	mov	r3, r8
1000b6ca:	8899      	ldrh	r1, [r3, #4]
1000b6cc:	480b      	ldr	r0, [pc, #44]	; (1000b6fc <sms_gateway_service_found+0x94>)
1000b6ce:	47a0      	blx	r4
    return AT_BLE_SUCCESS;
}
1000b6d0:	2000      	movs	r0, #0
1000b6d2:	bc04      	pop	{r2}
1000b6d4:	4690      	mov	r8, r2
1000b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6d8:	10010ce8 	.word	0x10010ce8
1000b6dc:	1000fa1d 	.word	0x1000fa1d
1000b6e0:	10011e68 	.word	0x10011e68
1000b6e4:	1000f8fd 	.word	0x1000f8fd
1000b6e8:	10011e80 	.word	0x10011e80
1000b6ec:	10011eb8 	.word	0x10011eb8
1000b6f0:	10011ecc 	.word	0x10011ecc
1000b6f4:	10011ee0 	.word	0x10011ee0
1000b6f8:	10011ee4 	.word	0x10011ee4
1000b6fc:	10011ef8 	.word	0x10011ef8

1000b700 <sms_gateway_indication_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_INDICATION_RECIEVED event from stack */
static at_ble_status_t sms_gateway_indication_received(void *param)
{
1000b700:	b570      	push	{r4, r5, r6, lr}
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000b702:	4e0a      	ldr	r6, [pc, #40]	; (1000b72c <sms_gateway_indication_received+0x2c>)
1000b704:	7830      	ldrb	r0, [r6, #0]
1000b706:	2101      	movs	r1, #1
1000b708:	4d09      	ldr	r5, [pc, #36]	; (1000b730 <sms_gateway_indication_received+0x30>)
1000b70a:	47a8      	blx	r5

    at_ble_indication_recieved_t *indication = (at_ble_indication_recieved_t *)param;
    static uint16_t sms_ind_cnt = 0;
    sms_ind_cnt++;
1000b70c:	4c09      	ldr	r4, [pc, #36]	; (1000b734 <sms_gateway_indication_received+0x34>)
1000b70e:	8823      	ldrh	r3, [r4, #0]
1000b710:	3301      	adds	r3, #1
1000b712:	8023      	strh	r3, [r4, #0]
    DBG_LOG_DEV("Indication counter: %d", sms_ind_cnt);
1000b714:	4808      	ldr	r0, [pc, #32]	; (1000b738 <sms_gateway_indication_received+0x38>)
1000b716:	4b09      	ldr	r3, [pc, #36]	; (1000b73c <sms_gateway_indication_received+0x3c>)
1000b718:	4798      	blx	r3
1000b71a:	8821      	ldrh	r1, [r4, #0]
1000b71c:	4808      	ldr	r0, [pc, #32]	; (1000b740 <sms_gateway_indication_received+0x40>)
1000b71e:	4b09      	ldr	r3, [pc, #36]	; (1000b744 <sms_gateway_indication_received+0x44>)
1000b720:	4798      	blx	r3
    //DBG_LOG_DEV("Indication received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d", indication->conn_handle, indication->char_handle, indication->char_len);
    //for(uint8_t i = 0; i < indication->char_len; i++) {
        //DBG_LOG_CONT_DEV("\r\n- char value[%d]: 0x%02x", i, indication->char_value[i]);
    //}
 
    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000b722:	7830      	ldrb	r0, [r6, #0]
1000b724:	2100      	movs	r1, #0
1000b726:	47a8      	blx	r5

    return AT_BLE_SUCCESS;
}
1000b728:	2000      	movs	r0, #0
1000b72a:	bd70      	pop	{r4, r5, r6, pc}
1000b72c:	10012314 	.word	0x10012314
1000b730:	100083c5 	.word	0x100083c5
1000b734:	1001249e 	.word	0x1001249e
1000b738:	10010ce8 	.word	0x10010ce8
1000b73c:	1000fa1d 	.word	0x1000fa1d
1000b740:	10011f0c 	.word	0x10011f0c
1000b744:	1000f8fd 	.word	0x1000f8fd

1000b748 <sms_gateway_notification_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_NOTIFICATION_RECIEVED (#27) event from stack */
static at_ble_status_t sms_gateway_notification_received(void *params)
{
1000b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b74a:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000b74c:	4b16      	ldr	r3, [pc, #88]	; (1000b7a8 <sms_gateway_notification_received+0x60>)
1000b74e:	7818      	ldrb	r0, [r3, #0]
1000b750:	2101      	movs	r1, #1
1000b752:	4b16      	ldr	r3, [pc, #88]	; (1000b7ac <sms_gateway_notification_received+0x64>)
1000b754:	4798      	blx	r3

    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
1000b756:	4c16      	ldr	r4, [pc, #88]	; (1000b7b0 <sms_gateway_notification_received+0x68>)
1000b758:	8823      	ldrh	r3, [r4, #0]
1000b75a:	3301      	adds	r3, #1
1000b75c:	8023      	strh	r3, [r4, #0]
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
1000b75e:	4e15      	ldr	r6, [pc, #84]	; (1000b7b4 <sms_gateway_notification_received+0x6c>)
1000b760:	0030      	movs	r0, r6
1000b762:	4f15      	ldr	r7, [pc, #84]	; (1000b7b8 <sms_gateway_notification_received+0x70>)
1000b764:	47b8      	blx	r7
1000b766:	8821      	ldrh	r1, [r4, #0]
1000b768:	4814      	ldr	r0, [pc, #80]	; (1000b7bc <sms_gateway_notification_received+0x74>)
1000b76a:	4c15      	ldr	r4, [pc, #84]	; (1000b7c0 <sms_gateway_notification_received+0x78>)
1000b76c:	47a0      	blx	r4
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
1000b76e:	0030      	movs	r0, r6
1000b770:	47b8      	blx	r7
1000b772:	78ab      	ldrb	r3, [r5, #2]
1000b774:	88aa      	ldrh	r2, [r5, #4]
1000b776:	8829      	ldrh	r1, [r5, #0]
1000b778:	4812      	ldr	r0, [pc, #72]	; (1000b7c4 <sms_gateway_notification_received+0x7c>)
1000b77a:	47a0      	blx	r4
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000b77c:	78ab      	ldrb	r3, [r5, #2]
1000b77e:	2b00      	cmp	r3, #0
1000b780:	d00b      	beq.n	1000b79a <sms_gateway_notification_received+0x52>
1000b782:	2400      	movs	r4, #0
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
1000b784:	4e10      	ldr	r6, [pc, #64]	; (1000b7c8 <sms_gateway_notification_received+0x80>)
1000b786:	4f0e      	ldr	r7, [pc, #56]	; (1000b7c0 <sms_gateway_notification_received+0x78>)
1000b788:	192b      	adds	r3, r5, r4
1000b78a:	7999      	ldrb	r1, [r3, #6]
1000b78c:	0030      	movs	r0, r6
1000b78e:	47b8      	blx	r7
    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000b790:	3401      	adds	r4, #1
1000b792:	b2e4      	uxtb	r4, r4
1000b794:	78ab      	ldrb	r3, [r5, #2]
1000b796:	42a3      	cmp	r3, r4
1000b798:	d8f6      	bhi.n	1000b788 <sms_gateway_notification_received+0x40>
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
    }

    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000b79a:	4b03      	ldr	r3, [pc, #12]	; (1000b7a8 <sms_gateway_notification_received+0x60>)
1000b79c:	7818      	ldrb	r0, [r3, #0]
1000b79e:	2100      	movs	r1, #0
1000b7a0:	4b02      	ldr	r3, [pc, #8]	; (1000b7ac <sms_gateway_notification_received+0x64>)
1000b7a2:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000b7a4:	2000      	movs	r0, #0
1000b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b7a8:	10012314 	.word	0x10012314
1000b7ac:	100083c5 	.word	0x100083c5
1000b7b0:	1001249a 	.word	0x1001249a
1000b7b4:	10010ce8 	.word	0x10010ce8
1000b7b8:	1000fa1d 	.word	0x1000fa1d
1000b7bc:	10011f24 	.word	0x10011f24
1000b7c0:	1000f8fd 	.word	0x1000f8fd
1000b7c4:	10011f2c 	.word	0x10011f2c
1000b7c8:	10012004 	.word	0x10012004

1000b7cc <ble_connected_app_event>:
    return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
1000b7cc:	b510      	push	{r4, lr}
1000b7ce:	0004      	movs	r4, r0
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000b7d0:	8900      	ldrh	r0, [r0, #8]
1000b7d2:	4b08      	ldr	r3, [pc, #32]	; (1000b7f4 <ble_connected_app_event+0x28>)
1000b7d4:	4798      	blx	r3
    {
        return AT_BLE_FAILURE;
1000b7d6:	23e2      	movs	r3, #226	; 0xe2
static at_ble_status_t ble_connected_app_event(void *params)
{
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000b7d8:	2800      	cmp	r0, #0
1000b7da:	d009      	beq.n	1000b7f0 <ble_connected_app_event+0x24>
    {
        return AT_BLE_FAILURE;
    }
    
    DBG_LOG_DEV("Device connected...");
1000b7dc:	4806      	ldr	r0, [pc, #24]	; (1000b7f8 <ble_connected_app_event+0x2c>)
1000b7de:	4b07      	ldr	r3, [pc, #28]	; (1000b7fc <ble_connected_app_event+0x30>)
1000b7e0:	4798      	blx	r3
1000b7e2:	4807      	ldr	r0, [pc, #28]	; (1000b800 <ble_connected_app_event+0x34>)
1000b7e4:	4b07      	ldr	r3, [pc, #28]	; (1000b804 <ble_connected_app_event+0x38>)
1000b7e6:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_CONNECTED;
1000b7e8:	2202      	movs	r2, #2
1000b7ea:	4b07      	ldr	r3, [pc, #28]	; (1000b808 <ble_connected_app_event+0x3c>)
1000b7ec:	701a      	strb	r2, [r3, #0]
    return conn_params->conn_status;
1000b7ee:	7aa3      	ldrb	r3, [r4, #10]
}
1000b7f0:	0018      	movs	r0, r3
1000b7f2:	bd10      	pop	{r4, pc}
1000b7f4:	1000a8d9 	.word	0x1000a8d9
1000b7f8:	10010ce8 	.word	0x10010ce8
1000b7fc:	1000fa1d 	.word	0x1000fa1d
1000b800:	10011fbc 	.word	0x10011fbc
1000b804:	1000f8fd 	.word	0x1000f8fd
1000b808:	1001249c 	.word	0x1001249c

1000b80c <ble_scan_data_app_event>:
/* ------------------ */

/* GAP */
/* Callback registered for AT_BLE_SCAN_REPORT (#2) event from stack */
static at_ble_status_t ble_scan_data_app_event(void *param)
{
1000b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b80e:	465f      	mov	r7, fp
1000b810:	4656      	mov	r6, sl
1000b812:	464d      	mov	r5, r9
1000b814:	4644      	mov	r4, r8
1000b816:	b4f0      	push	{r4, r5, r6, r7}
1000b818:	b097      	sub	sp, #92	; 0x5c
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
1000b81a:	4b73      	ldr	r3, [pc, #460]	; (1000b9e8 <ble_scan_data_app_event+0x1dc>)
1000b81c:	781c      	ldrb	r4, [r3, #0]
1000b81e:	b2e4      	uxtb	r4, r4
    scan_index = 0;
1000b820:	2200      	movs	r2, #0
1000b822:	4b72      	ldr	r3, [pc, #456]	; (1000b9ec <ble_scan_data_app_event+0x1e0>)
1000b824:	701a      	strb	r2, [r3, #0]
    bool device_identified = false;
    uint8_t device_index = 0;
    char search_pattern1[strlen(SMS_ID_PATTERN1)];
    char search_pattern2[strlen(SMS_ID_PATTERN2)];
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
1000b826:	3214      	adds	r2, #20
1000b828:	2100      	movs	r1, #0
1000b82a:	a80e      	add	r0, sp, #56	; 0x38
1000b82c:	4b70      	ldr	r3, [pc, #448]	; (1000b9f0 <ble_scan_data_app_event+0x1e4>)
1000b82e:	4798      	blx	r3
    if (scanned_dev_count) {
1000b830:	2c00      	cmp	r4, #0
1000b832:	d100      	bne.n	1000b836 <ble_scan_data_app_event+0x2a>
1000b834:	e0c0      	b.n	1000b9b8 <ble_scan_data_app_event+0x1ac>
1000b836:	4a6f      	ldr	r2, [pc, #444]	; (1000b9f4 <ble_scan_data_app_event+0x1e8>)
1000b838:	2300      	movs	r3, #0
1000b83a:	2100      	movs	r1, #0
1000b83c:	0008      	movs	r0, r1
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
            /* Display only the connectible devices*/
            if((scan_buffer[index].type == AT_BLE_ADV_TYPE_DIRECTED)
1000b83e:	7811      	ldrb	r1, [r2, #0]
1000b840:	2901      	cmp	r1, #1
1000b842:	d803      	bhi.n	1000b84c <ble_scan_data_app_event+0x40>
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
1000b844:	1c41      	adds	r1, r0, #1
1000b846:	ad0e      	add	r5, sp, #56	; 0x38
1000b848:	542b      	strb	r3, [r5, r0]
1000b84a:	b2c8      	uxtb	r0, r1
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
    if (scanned_dev_count) {
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
1000b84c:	3301      	adds	r3, #1
1000b84e:	b2db      	uxtb	r3, r3
1000b850:	3229      	adds	r2, #41	; 0x29
1000b852:	429c      	cmp	r4, r3
1000b854:	d1f3      	bne.n	1000b83e <ble_scan_data_app_event+0x32>
1000b856:	9007      	str	r0, [sp, #28]
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
            }
        }
        
        if (scan_device_count) {
1000b858:	2800      	cmp	r0, #0
1000b85a:	d100      	bne.n	1000b85e <ble_scan_data_app_event+0x52>
1000b85c:	e083      	b.n	1000b966 <ble_scan_data_app_event+0x15a>
            /* Service type to be searched */
            service_uuid.type = AT_BLE_UUID_16;
1000b85e:	ab09      	add	r3, sp, #36	; 0x24
1000b860:	2200      	movs	r2, #0
1000b862:	701a      	strb	r2, [r3, #0]

            /* Service UUID */
            service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
1000b864:	3218      	adds	r2, #24
1000b866:	709a      	strb	r2, [r3, #2]
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
1000b868:	3a15      	subs	r2, #21
1000b86a:	705a      	strb	r2, [r3, #1]
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
1000b86c:	aa13      	add	r2, sp, #76	; 0x4c
1000b86e:	4b62      	ldr	r3, [pc, #392]	; (1000b9f8 <ble_scan_data_app_event+0x1ec>)
1000b870:	cb03      	ldmia	r3!, {r0, r1}
1000b872:	c203      	stmia	r2!, {r0, r1}
1000b874:	781b      	ldrb	r3, [r3, #0]
1000b876:	7013      	strb	r3, [r2, #0]
1000b878:	9b07      	ldr	r3, [sp, #28]
1000b87a:	3b01      	subs	r3, #1
1000b87c:	b2db      	uxtb	r3, r3
1000b87e:	3301      	adds	r3, #1
1000b880:	9304      	str	r3, [sp, #16]
1000b882:	2300      	movs	r3, #0
1000b884:	4699      	mov	r9, r3
1000b886:	9306      	str	r3, [sp, #24]
1000b888:	9305      	str	r3, [sp, #20]
1000b88a:	464c      	mov	r4, r9
1000b88c:	b2e3      	uxtb	r3, r4
1000b88e:	469b      	mov	fp, r3
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b890:	485a      	ldr	r0, [pc, #360]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b892:	4b5b      	ldr	r3, [pc, #364]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b894:	4798      	blx	r3
                index,
                scan_buffer[scan_device[index]].dev_addr.addr[5],
1000b896:	ab0e      	add	r3, sp, #56	; 0x38
1000b898:	5ce3      	ldrb	r3, [r4, r3]
1000b89a:	009a      	lsls	r2, r3, #2
1000b89c:	18d2      	adds	r2, r2, r3
1000b89e:	00d2      	lsls	r2, r2, #3
1000b8a0:	18d3      	adds	r3, r2, r3
1000b8a2:	4a54      	ldr	r2, [pc, #336]	; (1000b9f4 <ble_scan_data_app_event+0x1e8>)
1000b8a4:	4690      	mov	r8, r2
1000b8a6:	4498      	add	r8, r3
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b8a8:	4643      	mov	r3, r8
1000b8aa:	799b      	ldrb	r3, [r3, #6]
1000b8ac:	4642      	mov	r2, r8
1000b8ae:	79d2      	ldrb	r2, [r2, #7]
1000b8b0:	4641      	mov	r1, r8
1000b8b2:	7889      	ldrb	r1, [r1, #2]
1000b8b4:	9103      	str	r1, [sp, #12]
1000b8b6:	4641      	mov	r1, r8
1000b8b8:	78c9      	ldrb	r1, [r1, #3]
1000b8ba:	9102      	str	r1, [sp, #8]
1000b8bc:	4641      	mov	r1, r8
1000b8be:	7909      	ldrb	r1, [r1, #4]
1000b8c0:	9101      	str	r1, [sp, #4]
1000b8c2:	4641      	mov	r1, r8
1000b8c4:	7949      	ldrb	r1, [r1, #5]
1000b8c6:	9100      	str	r1, [sp, #0]
1000b8c8:	4649      	mov	r1, r9
1000b8ca:	484e      	ldr	r0, [pc, #312]	; (1000ba04 <ble_scan_data_app_event+0x1f8>)
1000b8cc:	4c4e      	ldr	r4, [pc, #312]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b8ce:	47a0      	blx	r4
                scan_buffer[scan_device[index]].dev_addr.addr[3],
                scan_buffer[scan_device[index]].dev_addr.addr[2],
                scan_buffer[scan_device[index]].dev_addr.addr[1],
                scan_buffer[scan_device[index]].dev_addr.addr[0]);

                DBG_LOG_DEV("      - advertised data: 0x ");
1000b8d0:	484a      	ldr	r0, [pc, #296]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b8d2:	4b4b      	ldr	r3, [pc, #300]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b8d4:	4798      	blx	r3
1000b8d6:	484d      	ldr	r0, [pc, #308]	; (1000ba0c <ble_scan_data_app_event+0x200>)
1000b8d8:	47a0      	blx	r4
1000b8da:	4644      	mov	r4, r8
1000b8dc:	3408      	adds	r4, #8
1000b8de:	2327      	movs	r3, #39	; 0x27
1000b8e0:	4443      	add	r3, r8
1000b8e2:	469a      	mov	sl, r3
                uint8_t i = 0;
                uint8_t search_index = 0;
1000b8e4:	2600      	movs	r6, #0
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
                    if(id1) {
                        DBG_LOG_DEV("%02x... looking for %02x", scan_buffer[scan_device[index]].adv_data[i], search_pattern1[search_index]);
1000b8e6:	4f46      	ldr	r7, [pc, #280]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b8e8:	4844      	ldr	r0, [pc, #272]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b8ea:	47b8      	blx	r7
1000b8ec:	ab13      	add	r3, sp, #76	; 0x4c
1000b8ee:	5d9d      	ldrb	r5, [r3, r6]
1000b8f0:	7821      	ldrb	r1, [r4, #0]
1000b8f2:	002a      	movs	r2, r5
1000b8f4:	4846      	ldr	r0, [pc, #280]	; (1000ba10 <ble_scan_data_app_event+0x204>)
1000b8f6:	4b44      	ldr	r3, [pc, #272]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b8f8:	4798      	blx	r3
                        if(scan_buffer[scan_device[index]].adv_data[i] == search_pattern1[search_index]) {
1000b8fa:	7823      	ldrb	r3, [r4, #0]
1000b8fc:	42ab      	cmp	r3, r5
1000b8fe:	d113      	bne.n	1000b928 <ble_scan_data_app_event+0x11c>
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
1000b900:	0031      	movs	r1, r6
1000b902:	4844      	ldr	r0, [pc, #272]	; (1000ba14 <ble_scan_data_app_event+0x208>)
1000b904:	4b40      	ldr	r3, [pc, #256]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b906:	4798      	blx	r3
                            if(search_index < (sizeof(search_pattern1)-1)) {
1000b908:	2e07      	cmp	r6, #7
1000b90a:	d802      	bhi.n	1000b912 <ble_scan_data_app_event+0x106>
                                search_index += 1;
1000b90c:	3601      	adds	r6, #1
1000b90e:	b2f6      	uxtb	r6, r6
1000b910:	e00a      	b.n	1000b928 <ble_scan_data_app_event+0x11c>
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
1000b912:	483a      	ldr	r0, [pc, #232]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b914:	4b3a      	ldr	r3, [pc, #232]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b916:	4798      	blx	r3
1000b918:	483f      	ldr	r0, [pc, #252]	; (1000ba18 <ble_scan_data_app_event+0x20c>)
1000b91a:	4b3b      	ldr	r3, [pc, #236]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b91c:	4798      	blx	r3
                                device_identified = true;
                                device_index = index;
                                break;
1000b91e:	465b      	mov	r3, fp
1000b920:	9306      	str	r3, [sp, #24]
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
                            if(search_index < (sizeof(search_pattern1)-1)) {
                                search_index += 1;
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
                                device_identified = true;
1000b922:	2301      	movs	r3, #1
1000b924:	9305      	str	r3, [sp, #20]
                                device_index = index;
                                break;
1000b926:	e002      	b.n	1000b92e <ble_scan_data_app_event+0x122>
1000b928:	3401      	adds	r4, #1
                DBG_LOG_DEV("      - advertised data: 0x ");
                uint8_t i = 0;
                uint8_t search_index = 0;
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
1000b92a:	4554      	cmp	r4, sl
1000b92c:	d1dc      	bne.n	1000b8e8 <ble_scan_data_app_event+0xdc>
                            }
                        }
                    }
                }
                
                if (scan_info_parse(&scan_buffer[scan_device[index]], &service_uuid, AD_TYPE_COMPLETE_LIST_UUID) == AT_BLE_SUCCESS) {
1000b92e:	2203      	movs	r2, #3
1000b930:	a909      	add	r1, sp, #36	; 0x24
1000b932:	4640      	mov	r0, r8
1000b934:	4b39      	ldr	r3, [pc, #228]	; (1000ba1c <ble_scan_data_app_event+0x210>)
1000b936:	4798      	blx	r3
1000b938:	2800      	cmp	r0, #0
1000b93a:	d109      	bne.n	1000b950 <ble_scan_data_app_event+0x144>
                    /* Device Service UUID  matched */
                    supp_scan_index[scan_index++] = index;
1000b93c:	4a2b      	ldr	r2, [pc, #172]	; (1000b9ec <ble_scan_data_app_event+0x1e0>)
1000b93e:	7813      	ldrb	r3, [r2, #0]
1000b940:	1c59      	adds	r1, r3, #1
1000b942:	7011      	strb	r1, [r2, #0]
1000b944:	4a36      	ldr	r2, [pc, #216]	; (1000ba20 <ble_scan_data_app_event+0x214>)
1000b946:	4659      	mov	r1, fp
1000b948:	54d1      	strb	r1, [r2, r3]
                    DBG_LOG_CONT("---PXP");
1000b94a:	4836      	ldr	r0, [pc, #216]	; (1000ba24 <ble_scan_data_app_event+0x218>)
1000b94c:	4b2e      	ldr	r3, [pc, #184]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b94e:	4798      	blx	r3
1000b950:	464b      	mov	r3, r9
1000b952:	3301      	adds	r3, #1
1000b954:	4699      	mov	r9, r3
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
1000b956:	9a04      	ldr	r2, [sp, #16]
1000b958:	429a      	cmp	r2, r3
1000b95a:	d196      	bne.n	1000b88a <ble_scan_data_app_event+0x7e>
                    DBG_LOG_CONT("---PXP");
                }
            }
        }

        if (!scan_index)  {
1000b95c:	4b23      	ldr	r3, [pc, #140]	; (1000b9ec <ble_scan_data_app_event+0x1e0>)
1000b95e:	781b      	ldrb	r3, [r3, #0]
1000b960:	2b00      	cmp	r3, #0
1000b962:	d134      	bne.n	1000b9ce <ble_scan_data_app_event+0x1c2>
1000b964:	e002      	b.n	1000b96c <ble_scan_data_app_event+0x160>
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
    uint8_t device_index = 0;
1000b966:	2300      	movs	r3, #0
1000b968:	9306      	str	r3, [sp, #24]
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
1000b96a:	9305      	str	r3, [sp, #20]
                }
            }
        }

        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
1000b96c:	4823      	ldr	r0, [pc, #140]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b96e:	4b24      	ldr	r3, [pc, #144]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b970:	4798      	blx	r3
1000b972:	482d      	ldr	r0, [pc, #180]	; (1000ba28 <ble_scan_data_app_event+0x21c>)
1000b974:	4b24      	ldr	r3, [pc, #144]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b976:	4798      	blx	r3
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000b978:	4b2c      	ldr	r3, [pc, #176]	; (1000ba2c <ble_scan_data_app_event+0x220>)
1000b97a:	4798      	blx	r3
        
        if(device_identified) {
1000b97c:	9b05      	ldr	r3, [sp, #20]
1000b97e:	2b00      	cmp	r3, #0
1000b980:	d00c      	beq.n	1000b99c <ble_scan_data_app_event+0x190>
            DBG_LOG_DEV("Compatible device found");
1000b982:	481e      	ldr	r0, [pc, #120]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b984:	4b1e      	ldr	r3, [pc, #120]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b986:	4798      	blx	r3
1000b988:	4829      	ldr	r0, [pc, #164]	; (1000ba30 <ble_scan_data_app_event+0x224>)
1000b98a:	4b1f      	ldr	r3, [pc, #124]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b98c:	4798      	blx	r3
            return pxp_monitor_connect_request(scan_buffer, scan_device[device_index]);
1000b98e:	ab0e      	add	r3, sp, #56	; 0x38
1000b990:	9a06      	ldr	r2, [sp, #24]
1000b992:	5c99      	ldrb	r1, [r3, r2]
1000b994:	4817      	ldr	r0, [pc, #92]	; (1000b9f4 <ble_scan_data_app_event+0x1e8>)
1000b996:	4b27      	ldr	r3, [pc, #156]	; (1000ba34 <ble_scan_data_app_event+0x228>)
1000b998:	4798      	blx	r3
1000b99a:	e01e      	b.n	1000b9da <ble_scan_data_app_event+0x1ce>
        }
        /*Updating the index pointer to connect */
        else if(scan_device_count) {
1000b99c:	9b07      	ldr	r3, [sp, #28]
1000b99e:	2b00      	cmp	r3, #0
1000b9a0:	d008      	beq.n	1000b9b4 <ble_scan_data_app_event+0x1a8>
            /* Successful device found event*/
            DBG_LOG_DEV("NO compatible device found");
1000b9a2:	4816      	ldr	r0, [pc, #88]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b9a4:	4b16      	ldr	r3, [pc, #88]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b9a6:	4798      	blx	r3
1000b9a8:	4823      	ldr	r0, [pc, #140]	; (1000ba38 <ble_scan_data_app_event+0x22c>)
1000b9aa:	4b17      	ldr	r3, [pc, #92]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b9ac:	4798      	blx	r3
            app_state = SMS_RUNNING;
1000b9ae:	2202      	movs	r2, #2
1000b9b0:	4b22      	ldr	r3, [pc, #136]	; (1000ba3c <ble_scan_data_app_event+0x230>)
1000b9b2:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000b9b4:	20e2      	movs	r0, #226	; 0xe2
1000b9b6:	e010      	b.n	1000b9da <ble_scan_data_app_event+0x1ce>
            //}
        }
    }
    else {
        /* from no device found event*/
        DBG_LOG_DEV("Nothing found");
1000b9b8:	4810      	ldr	r0, [pc, #64]	; (1000b9fc <ble_scan_data_app_event+0x1f0>)
1000b9ba:	4b11      	ldr	r3, [pc, #68]	; (1000ba00 <ble_scan_data_app_event+0x1f4>)
1000b9bc:	4798      	blx	r3
1000b9be:	4820      	ldr	r0, [pc, #128]	; (1000ba40 <ble_scan_data_app_event+0x234>)
1000b9c0:	4b11      	ldr	r3, [pc, #68]	; (1000ba08 <ble_scan_data_app_event+0x1fc>)
1000b9c2:	4798      	blx	r3
        app_state = SMS_RUNNING;
1000b9c4:	2202      	movs	r2, #2
1000b9c6:	4b1d      	ldr	r3, [pc, #116]	; (1000ba3c <ble_scan_data_app_event+0x230>)
1000b9c8:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000b9ca:	20e2      	movs	r0, #226	; 0xe2
1000b9cc:	e005      	b.n	1000b9da <ble_scan_data_app_event+0x1ce>
        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000b9ce:	4b17      	ldr	r3, [pc, #92]	; (1000ba2c <ble_scan_data_app_event+0x220>)
1000b9d0:	4798      	blx	r3
        
        if(device_identified) {
1000b9d2:	9b05      	ldr	r3, [sp, #20]
1000b9d4:	2b00      	cmp	r3, #0
1000b9d6:	d0e4      	beq.n	1000b9a2 <ble_scan_data_app_event+0x196>
1000b9d8:	e7d3      	b.n	1000b982 <ble_scan_data_app_event+0x176>
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
}
1000b9da:	b017      	add	sp, #92	; 0x5c
1000b9dc:	bc3c      	pop	{r2, r3, r4, r5}
1000b9de:	4690      	mov	r8, r2
1000b9e0:	4699      	mov	r9, r3
1000b9e2:	46a2      	mov	sl, r4
1000b9e4:	46ab      	mov	fp, r5
1000b9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9e8:	100123bc 	.word	0x100123bc
1000b9ec:	100123b4 	.word	0x100123b4
1000b9f0:	1000f8ed 	.word	0x1000f8ed
1000b9f4:	100129b0 	.word	0x100129b0
1000b9f8:	10011b3c 	.word	0x10011b3c
1000b9fc:	10010ce8 	.word	0x10010ce8
1000ba00:	1000fa1d 	.word	0x1000fa1d
1000ba04:	10011028 	.word	0x10011028
1000ba08:	1000f8fd 	.word	0x1000f8fd
1000ba0c:	10011fd0 	.word	0x10011fd0
1000ba10:	10011ff0 	.word	0x10011ff0
1000ba14:	1001200c 	.word	0x1001200c
1000ba18:	10012024 	.word	0x10012024
1000ba1c:	1000a7a5 	.word	0x1000a7a5
1000ba20:	10013228 	.word	0x10013228
1000ba24:	10011068 	.word	0x10011068
1000ba28:	100110bc 	.word	0x100110bc
1000ba2c:	1000c7f5 	.word	0x1000c7f5
1000ba30:	1001203c 	.word	0x1001203c
1000ba34:	100094f5 	.word	0x100094f5
1000ba38:	10012054 	.word	0x10012054
1000ba3c:	10013224 	.word	0x10013224
1000ba40:	10012070 	.word	0x10012070

1000ba44 <button_cb>:
    app_state = SMS_INT_TIMER1;
    /* Add timer callback functionality here */
}

static void button_cb(void)
{
1000ba44:	b510      	push	{r4, lr}
    /* Add button callback functionality here */
    app_state = SMS_INT_BUTTON2;
1000ba46:	2205      	movs	r2, #5
1000ba48:	4b04      	ldr	r3, [pc, #16]	; (1000ba5c <button_cb+0x18>)
1000ba4a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(BUTTON_0_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000ba4c:	2300      	movs	r3, #0
1000ba4e:	2200      	movs	r2, #0
1000ba50:	2102      	movs	r1, #2
1000ba52:	2017      	movs	r0, #23
1000ba54:	4c02      	ldr	r4, [pc, #8]	; (1000ba60 <button_cb+0x1c>)
1000ba56:	47a0      	blx	r4
}
1000ba58:	bd10      	pop	{r4, pc}
1000ba5a:	46c0      	nop			; (mov r8, r8)
1000ba5c:	10013224 	.word	0x10013224
1000ba60:	1000b129 	.word	0x1000b129

1000ba64 <sms_gateway_init>:

static void sms_gateway_init(void)
{
1000ba64:	b510      	push	{r4, lr}
    at_ble_status_t scan_status;

    scan_status = gap_dev_scan();
1000ba66:	4b0a      	ldr	r3, [pc, #40]	; (1000ba90 <sms_gateway_init+0x2c>)
1000ba68:	4798      	blx	r3

    if(scan_status == AT_BLE_INVALID_PARAM) {
1000ba6a:	28cf      	cmp	r0, #207	; 0xcf
1000ba6c:	d106      	bne.n	1000ba7c <sms_gateway_init+0x18>
        DBG_LOG("Scan parameters are invalid");
1000ba6e:	4809      	ldr	r0, [pc, #36]	; (1000ba94 <sms_gateway_init+0x30>)
1000ba70:	4b09      	ldr	r3, [pc, #36]	; (1000ba98 <sms_gateway_init+0x34>)
1000ba72:	4798      	blx	r3
1000ba74:	4809      	ldr	r0, [pc, #36]	; (1000ba9c <sms_gateway_init+0x38>)
1000ba76:	4b0a      	ldr	r3, [pc, #40]	; (1000baa0 <sms_gateway_init+0x3c>)
1000ba78:	4798      	blx	r3
1000ba7a:	e007      	b.n	1000ba8c <sms_gateway_init+0x28>
        } else if(scan_status == AT_BLE_FAILURE) {
1000ba7c:	28e2      	cmp	r0, #226	; 0xe2
1000ba7e:	d105      	bne.n	1000ba8c <sms_gateway_init+0x28>
        DBG_LOG("Scanning failed generic error");
1000ba80:	4804      	ldr	r0, [pc, #16]	; (1000ba94 <sms_gateway_init+0x30>)
1000ba82:	4b05      	ldr	r3, [pc, #20]	; (1000ba98 <sms_gateway_init+0x34>)
1000ba84:	4798      	blx	r3
1000ba86:	4807      	ldr	r0, [pc, #28]	; (1000baa4 <sms_gateway_init+0x40>)
1000ba88:	4b05      	ldr	r3, [pc, #20]	; (1000baa0 <sms_gateway_init+0x3c>)
1000ba8a:	4798      	blx	r3
    }
}
1000ba8c:	bd10      	pop	{r4, pc}
1000ba8e:	46c0      	nop			; (mov r8, r8)
1000ba90:	1000a75d 	.word	0x1000a75d
1000ba94:	10010ce8 	.word	0x10010ce8
1000ba98:	1000fa1d 	.word	0x1000fa1d
1000ba9c:	10012080 	.word	0x10012080
1000baa0:	1000f8fd 	.word	0x1000f8fd
1000baa4:	1001209c 	.word	0x1001209c

1000baa8 <sms_gateway_discover_services>:

at_ble_status_t sms_gateway_discover_services(at_ble_handle_t handle)
{
1000baa8:	b510      	push	{r4, lr}
    at_ble_status_t status;
    status = at_ble_primary_service_discover_all(handle, GATT_DISCOVERY_STARTING_HANDLE, GATT_DISCOVERY_ENDING_HANDLE);
1000baaa:	4a0b      	ldr	r2, [pc, #44]	; (1000bad8 <sms_gateway_discover_services+0x30>)
1000baac:	2101      	movs	r1, #1
1000baae:	4b0b      	ldr	r3, [pc, #44]	; (1000badc <sms_gateway_discover_services+0x34>)
1000bab0:	4798      	blx	r3
    if(status != AT_BLE_SUCCESS) {
1000bab2:	2800      	cmp	r0, #0
1000bab4:	d007      	beq.n	1000bac6 <sms_gateway_discover_services+0x1e>
        DBG_LOG("GATT service discovery request failed");
1000bab6:	480a      	ldr	r0, [pc, #40]	; (1000bae0 <sms_gateway_discover_services+0x38>)
1000bab8:	4b0a      	ldr	r3, [pc, #40]	; (1000bae4 <sms_gateway_discover_services+0x3c>)
1000baba:	4798      	blx	r3
1000babc:	480a      	ldr	r0, [pc, #40]	; (1000bae8 <sms_gateway_discover_services+0x40>)
1000babe:	4b0b      	ldr	r3, [pc, #44]	; (1000baec <sms_gateway_discover_services+0x44>)
1000bac0:	4798      	blx	r3
        return AT_BLE_FAILURE;
1000bac2:	20e2      	movs	r0, #226	; 0xe2
1000bac4:	e006      	b.n	1000bad4 <sms_gateway_discover_services+0x2c>
        } else {
        DBG_LOG_DEV("GATT service discovery request started");
1000bac6:	4806      	ldr	r0, [pc, #24]	; (1000bae0 <sms_gateway_discover_services+0x38>)
1000bac8:	4b06      	ldr	r3, [pc, #24]	; (1000bae4 <sms_gateway_discover_services+0x3c>)
1000baca:	4798      	blx	r3
1000bacc:	4808      	ldr	r0, [pc, #32]	; (1000baf0 <sms_gateway_discover_services+0x48>)
1000bace:	4b07      	ldr	r3, [pc, #28]	; (1000baec <sms_gateway_discover_services+0x44>)
1000bad0:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000bad2:	2000      	movs	r0, #0
    }
}
1000bad4:	bd10      	pop	{r4, pc}
1000bad6:	46c0      	nop			; (mov r8, r8)
1000bad8:	0000ffff 	.word	0x0000ffff
1000badc:	1000c961 	.word	0x1000c961
1000bae0:	10010ce8 	.word	0x10010ce8
1000bae4:	1000fa1d 	.word	0x1000fa1d
1000bae8:	100120bc 	.word	0x100120bc
1000baec:	1000f8fd 	.word	0x1000f8fd
1000baf0:	100120e4 	.word	0x100120e4

1000baf4 <ble_paired_app_event>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *params)
{
1000baf4:	b510      	push	{r4, lr}
1000baf6:	0004      	movs	r4, r0
    DBG_LOG_DEV("Devices paired...");
1000baf8:	4806      	ldr	r0, [pc, #24]	; (1000bb14 <ble_paired_app_event+0x20>)
1000bafa:	4b07      	ldr	r3, [pc, #28]	; (1000bb18 <ble_paired_app_event+0x24>)
1000bafc:	4798      	blx	r3
1000bafe:	4807      	ldr	r0, [pc, #28]	; (1000bb1c <ble_paired_app_event+0x28>)
1000bb00:	4b07      	ldr	r3, [pc, #28]	; (1000bb20 <ble_paired_app_event+0x2c>)
1000bb02:	4798      	blx	r3
    at_ble_status_t discovery_status = AT_BLE_FAILURE;
    at_ble_pair_done_t *pair_done_val;
    pair_done_val = (at_ble_pair_done_t *)params;

    discovery_status = sms_gateway_discover_services(pair_done_val->handle);
1000bb04:	8860      	ldrh	r0, [r4, #2]
1000bb06:	4b07      	ldr	r3, [pc, #28]	; (1000bb24 <ble_paired_app_event+0x30>)
1000bb08:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_PAIRED;
1000bb0a:	2203      	movs	r2, #3
1000bb0c:	4b06      	ldr	r3, [pc, #24]	; (1000bb28 <ble_paired_app_event+0x34>)
1000bb0e:	701a      	strb	r2, [r3, #0]

    return discovery_status;
}
1000bb10:	bd10      	pop	{r4, pc}
1000bb12:	46c0      	nop			; (mov r8, r8)
1000bb14:	10010ce8 	.word	0x10010ce8
1000bb18:	1000fa1d 	.word	0x1000fa1d
1000bb1c:	1001210c 	.word	0x1001210c
1000bb20:	1000f8fd 	.word	0x1000f8fd
1000bb24:	1000baa9 	.word	0x1000baa9
1000bb28:	1001249c 	.word	0x1001249c

1000bb2c <main>:
{
    app_state = SMS_RUNNING;
}

int main(void)
{
1000bb2c:	b570      	push	{r4, r5, r6, lr}
1000bb2e:	b082      	sub	sp, #8
    app_state = SMS_STARTING;
1000bb30:	2200      	movs	r2, #0
1000bb32:	4b45      	ldr	r3, [pc, #276]	; (1000bc48 <main+0x11c>)
1000bb34:	701a      	strb	r2, [r3, #0]

    platform_driver_init();
1000bb36:	4b45      	ldr	r3, [pc, #276]	; (1000bc4c <main+0x120>)
1000bb38:	4798      	blx	r3
    acquire_sleep_lock();
1000bb3a:	4b45      	ldr	r3, [pc, #276]	; (1000bc50 <main+0x124>)
1000bb3c:	4798      	blx	r3

    /* Initialize serial console */
    serial_console_init();
1000bb3e:	4b45      	ldr	r3, [pc, #276]	; (1000bc54 <main+0x128>)
1000bb40:	4798      	blx	r3
    //hw_timer_init();
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
    
    /* button initialization */
    button_init(button_cb);
1000bb42:	4845      	ldr	r0, [pc, #276]	; (1000bc58 <main+0x12c>)
1000bb44:	4b45      	ldr	r3, [pc, #276]	; (1000bc5c <main+0x130>)
1000bb46:	4798      	blx	r3
}

static void sms_gpio_init(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000bb48:	ac01      	add	r4, sp, #4
1000bb4a:	0020      	movs	r0, r4
1000bb4c:	4b44      	ldr	r3, [pc, #272]	; (1000bc60 <main+0x134>)
1000bb4e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000bb50:	2301      	movs	r3, #1
1000bb52:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(dbg_gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000bb54:	4b43      	ldr	r3, [pc, #268]	; (1000bc64 <main+0x138>)
1000bb56:	7818      	ldrb	r0, [r3, #0]
1000bb58:	0021      	movs	r1, r4
1000bb5a:	4b43      	ldr	r3, [pc, #268]	; (1000bc68 <main+0x13c>)
1000bb5c:	4798      	blx	r3
1000bb5e:	2800      	cmp	r0, #0
1000bb60:	d005      	beq.n	1000bb6e <main+0x42>
        DBG_LOG("Problem while setting gpio pin");
1000bb62:	4842      	ldr	r0, [pc, #264]	; (1000bc6c <main+0x140>)
1000bb64:	4b42      	ldr	r3, [pc, #264]	; (1000bc70 <main+0x144>)
1000bb66:	4798      	blx	r3
1000bb68:	4842      	ldr	r0, [pc, #264]	; (1000bc74 <main+0x148>)
1000bb6a:	4b43      	ldr	r3, [pc, #268]	; (1000bc78 <main+0x14c>)
1000bb6c:	4798      	blx	r3
    }
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
1000bb6e:	4b43      	ldr	r3, [pc, #268]	; (1000bc7c <main+0x150>)
1000bb70:	7819      	ldrb	r1, [r3, #0]
1000bb72:	b2c9      	uxtb	r1, r1
1000bb74:	4b3b      	ldr	r3, [pc, #236]	; (1000bc64 <main+0x138>)
1000bb76:	7818      	ldrb	r0, [r3, #0]
1000bb78:	4b41      	ldr	r3, [pc, #260]	; (1000bc80 <main+0x154>)
1000bb7a:	4798      	blx	r3
    /* button initialization */
    button_init(button_cb);

    sms_gpio_init();
    
    hw_timer_register_callback(timer_callback_fn);
1000bb7c:	4841      	ldr	r0, [pc, #260]	; (1000bc84 <main+0x158>)
1000bb7e:	4b42      	ldr	r3, [pc, #264]	; (1000bc88 <main+0x15c>)
1000bb80:	4798      	blx	r3

    DBG_LOG("Initializing BLE Application");
1000bb82:	483a      	ldr	r0, [pc, #232]	; (1000bc6c <main+0x140>)
1000bb84:	4b3a      	ldr	r3, [pc, #232]	; (1000bc70 <main+0x144>)
1000bb86:	4798      	blx	r3
1000bb88:	4840      	ldr	r0, [pc, #256]	; (1000bc8c <main+0x160>)
1000bb8a:	4b3b      	ldr	r3, [pc, #236]	; (1000bc78 <main+0x14c>)
1000bb8c:	4798      	blx	r3
    
    /* initialize the BLE chip and Set the Device Address */
    ble_device_init(NULL);
1000bb8e:	2000      	movs	r0, #0
1000bb90:	4b3f      	ldr	r3, [pc, #252]	; (1000bc90 <main+0x164>)
1000bb92:	4798      	blx	r3

    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_gateway_app_gap_cb);
1000bb94:	4a3f      	ldr	r2, [pc, #252]	; (1000bc94 <main+0x168>)
1000bb96:	2100      	movs	r1, #0
1000bb98:	2000      	movs	r0, #0
1000bb9a:	4c3f      	ldr	r4, [pc, #252]	; (1000bc98 <main+0x16c>)
1000bb9c:	47a0      	blx	r4
    

    /* Register callbacks for GATT CLIENT related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_CLIENT_EVENT_TYPE, sms_gateway_app_gatt_client_cb);
1000bb9e:	4a3f      	ldr	r2, [pc, #252]	; (1000bc9c <main+0x170>)
1000bba0:	2101      	movs	r1, #1
1000bba2:	2000      	movs	r0, #0
1000bba4:	47a0      	blx	r4
    
    //while(app_state != SMS_INT_BUTTON2);;
    //
    //app_state = SMS_RUNNING;

    sms_gateway_init();
1000bba6:	4b3e      	ldr	r3, [pc, #248]	; (1000bca0 <main+0x174>)
1000bba8:	4798      	blx	r3

    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
1000bbaa:	483e      	ldr	r0, [pc, #248]	; (1000bca4 <main+0x178>)
1000bbac:	4b3e      	ldr	r3, [pc, #248]	; (1000bca8 <main+0x17c>)
1000bbae:	4798      	blx	r3
    register_hw_timer_stop_func_cb(hw_timer_stop);
1000bbb0:	483e      	ldr	r0, [pc, #248]	; (1000bcac <main+0x180>)
1000bbb2:	4b3f      	ldr	r3, [pc, #252]	; (1000bcb0 <main+0x184>)
1000bbb4:	4798      	blx	r3
    
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000bbb6:	4d3f      	ldr	r5, [pc, #252]	; (1000bcb4 <main+0x188>)
        
        switch(app_state) {
1000bbb8:	4c23      	ldr	r4, [pc, #140]	; (1000bc48 <main+0x11c>)
1000bbba:	4e3f      	ldr	r6, [pc, #252]	; (1000bcb8 <main+0x18c>)
    
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000bbbc:	2001      	movs	r0, #1
1000bbbe:	4240      	negs	r0, r0
1000bbc0:	47a8      	blx	r5
        
        switch(app_state) {
1000bbc2:	7823      	ldrb	r3, [r4, #0]
1000bbc4:	b2db      	uxtb	r3, r3
1000bbc6:	2b07      	cmp	r3, #7
1000bbc8:	d8f8      	bhi.n	1000bbbc <main+0x90>
1000bbca:	009b      	lsls	r3, r3, #2
1000bbcc:	58f3      	ldr	r3, [r6, r3]
1000bbce:	469f      	mov	pc, r3

            case SMS_CONNECTING:
            break;

            case SMS_RUNNING:
            DBG_LOG_DEV("SMS_RUNNING...");
1000bbd0:	4826      	ldr	r0, [pc, #152]	; (1000bc6c <main+0x140>)
1000bbd2:	4b27      	ldr	r3, [pc, #156]	; (1000bc70 <main+0x144>)
1000bbd4:	4798      	blx	r3
1000bbd6:	4839      	ldr	r0, [pc, #228]	; (1000bcbc <main+0x190>)
1000bbd8:	4b27      	ldr	r3, [pc, #156]	; (1000bc78 <main+0x14c>)
1000bbda:	4798      	blx	r3
            break;
1000bbdc:	e7ee      	b.n	1000bbbc <main+0x90>

            case SMS_DISCONNECTED:
            DBG_LOG_DEV("SMS_DISCONNECTED...");
1000bbde:	4823      	ldr	r0, [pc, #140]	; (1000bc6c <main+0x140>)
1000bbe0:	4b23      	ldr	r3, [pc, #140]	; (1000bc70 <main+0x144>)
1000bbe2:	4798      	blx	r3
1000bbe4:	4836      	ldr	r0, [pc, #216]	; (1000bcc0 <main+0x194>)
1000bbe6:	4b24      	ldr	r3, [pc, #144]	; (1000bc78 <main+0x14c>)
1000bbe8:	4798      	blx	r3
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
}

static void sms_disconnected_fn(void)
{
    app_state = SMS_RUNNING;
1000bbea:	2202      	movs	r2, #2
1000bbec:	4b16      	ldr	r3, [pc, #88]	; (1000bc48 <main+0x11c>)
1000bbee:	701a      	strb	r2, [r3, #0]
1000bbf0:	e7e4      	b.n	1000bbbc <main+0x90>
            DBG_LOG_DEV("SMS_DISCONNECTED...");
            sms_disconnected_fn();
            break;

            case SMS_INT_BUTTON1:
            DBG_LOG_DEV("SMS_INT_BUTTON1...");
1000bbf2:	481e      	ldr	r0, [pc, #120]	; (1000bc6c <main+0x140>)
1000bbf4:	4b1e      	ldr	r3, [pc, #120]	; (1000bc70 <main+0x144>)
1000bbf6:	4798      	blx	r3
1000bbf8:	4832      	ldr	r0, [pc, #200]	; (1000bcc4 <main+0x198>)
1000bbfa:	4b1f      	ldr	r3, [pc, #124]	; (1000bc78 <main+0x14c>)
1000bbfc:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_button1_fn(void)
{
    app_state = SMS_RUNNING;
1000bbfe:	2202      	movs	r2, #2
1000bc00:	4b11      	ldr	r3, [pc, #68]	; (1000bc48 <main+0x11c>)
1000bc02:	701a      	strb	r2, [r3, #0]
1000bc04:	e7da      	b.n	1000bbbc <main+0x90>
            DBG_LOG_DEV("SMS_INT_BUTTON1...");
            sms_int_button1_fn();
            break;

            case SMS_INT_BUTTON2:
            DBG_LOG_DEV("SMS_INT_BUTTON2...");
1000bc06:	4819      	ldr	r0, [pc, #100]	; (1000bc6c <main+0x140>)
1000bc08:	4b19      	ldr	r3, [pc, #100]	; (1000bc70 <main+0x144>)
1000bc0a:	4798      	blx	r3
1000bc0c:	482e      	ldr	r0, [pc, #184]	; (1000bcc8 <main+0x19c>)
1000bc0e:	4b1a      	ldr	r3, [pc, #104]	; (1000bc78 <main+0x14c>)
1000bc10:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_button2_fn(void)
{
    sms_gateway_init();
1000bc12:	4b23      	ldr	r3, [pc, #140]	; (1000bca0 <main+0x174>)
1000bc14:	4798      	blx	r3
    app_state = SMS_RUNNING;
1000bc16:	2202      	movs	r2, #2
1000bc18:	4b0b      	ldr	r3, [pc, #44]	; (1000bc48 <main+0x11c>)
1000bc1a:	701a      	strb	r2, [r3, #0]
1000bc1c:	e7ce      	b.n	1000bbbc <main+0x90>
            DBG_LOG_DEV("SMS_INT_BUTTON2...");
            sms_int_button2_fn();
            break;

            case SMS_INT_TIMER1:
            DBG_LOG_DEV("SMS_INT_TIMER1...");
1000bc1e:	4813      	ldr	r0, [pc, #76]	; (1000bc6c <main+0x140>)
1000bc20:	4b13      	ldr	r3, [pc, #76]	; (1000bc70 <main+0x144>)
1000bc22:	4798      	blx	r3
1000bc24:	4829      	ldr	r0, [pc, #164]	; (1000bccc <main+0x1a0>)
1000bc26:	4b14      	ldr	r3, [pc, #80]	; (1000bc78 <main+0x14c>)
1000bc28:	4798      	blx	r3
    //DBG_LOG("Unable to connect with device");
    //}
    //} else if(sms_gateway_connection_flag == SMS_DEV_SERVICE_FOUND) {
    //hw_timer_start(PXP_RSSI_UPDATE_INTERVAL);
    //}
    app_state = SMS_RUNNING;
1000bc2a:	2202      	movs	r2, #2
1000bc2c:	4b06      	ldr	r3, [pc, #24]	; (1000bc48 <main+0x11c>)
1000bc2e:	701a      	strb	r2, [r3, #0]
1000bc30:	e7c4      	b.n	1000bbbc <main+0x90>
            DBG_LOG_DEV("SMS_INT_TIMER1...");
            sms_int_timer1_fn();
            break;

            case SMS_INT_TIMER2:
            DBG_LOG_DEV("SMS_INT_TIMER2...");
1000bc32:	480e      	ldr	r0, [pc, #56]	; (1000bc6c <main+0x140>)
1000bc34:	4b0e      	ldr	r3, [pc, #56]	; (1000bc70 <main+0x144>)
1000bc36:	4798      	blx	r3
1000bc38:	4825      	ldr	r0, [pc, #148]	; (1000bcd0 <main+0x1a4>)
1000bc3a:	4b0f      	ldr	r3, [pc, #60]	; (1000bc78 <main+0x14c>)
1000bc3c:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_timer2_fn(void)
{
    app_state = SMS_RUNNING;
1000bc3e:	2202      	movs	r2, #2
1000bc40:	4b01      	ldr	r3, [pc, #4]	; (1000bc48 <main+0x11c>)
1000bc42:	701a      	strb	r2, [r3, #0]
1000bc44:	e7ba      	b.n	1000bbbc <main+0x90>
1000bc46:	46c0      	nop			; (mov r8, r8)
1000bc48:	10013224 	.word	0x10013224
1000bc4c:	1000aebd 	.word	0x1000aebd
1000bc50:	1000b3e5 	.word	0x1000b3e5
1000bc54:	1000ab21 	.word	0x1000ab21
1000bc58:	1000ba45 	.word	0x1000ba45
1000bc5c:	1000aa9d 	.word	0x1000aa9d
1000bc60:	1000824d 	.word	0x1000824d
1000bc64:	10012314 	.word	0x10012314
1000bc68:	1000825d 	.word	0x1000825d
1000bc6c:	10010ce8 	.word	0x10010ce8
1000bc70:	1000fa1d 	.word	0x1000fa1d
1000bc74:	10012120 	.word	0x10012120
1000bc78:	1000f8fd 	.word	0x1000f8fd
1000bc7c:	10012498 	.word	0x10012498
1000bc80:	100083c5 	.word	0x100083c5
1000bc84:	1000b585 	.word	0x1000b585
1000bc88:	1000acc1 	.word	0x1000acc1
1000bc8c:	10012140 	.word	0x10012140
1000bc90:	1000a4b9 	.word	0x1000a4b9
1000bc94:	10011d64 	.word	0x10011d64
1000bc98:	1000a3e9 	.word	0x1000a3e9
1000bc9c:	100121d4 	.word	0x100121d4
1000bca0:	1000ba65 	.word	0x1000ba65
1000bca4:	1000acf5 	.word	0x1000acf5
1000bca8:	1000956d 	.word	0x1000956d
1000bcac:	1000ad21 	.word	0x1000ad21
1000bcb0:	10009579 	.word	0x10009579
1000bcb4:	1000aa6d 	.word	0x1000aa6d
1000bcb8:	10011d44 	.word	0x10011d44
1000bcbc:	10012160 	.word	0x10012160
1000bcc0:	10012170 	.word	0x10012170
1000bcc4:	10012184 	.word	0x10012184
1000bcc8:	10012198 	.word	0x10012198
1000bccc:	100121ac 	.word	0x100121ac
1000bcd0:	100121c0 	.word	0x100121c0

1000bcd4 <internal_event_post>:
1000bcd4:	b570      	push	{r4, r5, r6, lr}
1000bcd6:	4d0c      	ldr	r5, [pc, #48]	; (1000bd08 <internal_event_post+0x34>)
1000bcd8:	682c      	ldr	r4, [r5, #0]
1000bcda:	2c00      	cmp	r4, #0
1000bcdc:	d013      	beq.n	1000bd06 <internal_event_post+0x32>
1000bcde:	6826      	ldr	r6, [r4, #0]
1000bce0:	60e2      	str	r2, [r4, #12]
1000bce2:	602e      	str	r6, [r5, #0]
1000bce4:	2500      	movs	r5, #0
1000bce6:	4a09      	ldr	r2, [pc, #36]	; (1000bd0c <internal_event_post+0x38>)
1000bce8:	8123      	strh	r3, [r4, #8]
1000bcea:	6813      	ldr	r3, [r2, #0]
1000bcec:	6025      	str	r5, [r4, #0]
1000bcee:	80a0      	strh	r0, [r4, #4]
1000bcf0:	80e1      	strh	r1, [r4, #6]
1000bcf2:	42ab      	cmp	r3, r5
1000bcf4:	d101      	bne.n	1000bcfa <internal_event_post+0x26>
1000bcf6:	6014      	str	r4, [r2, #0]
1000bcf8:	e005      	b.n	1000bd06 <internal_event_post+0x32>
1000bcfa:	681a      	ldr	r2, [r3, #0]
1000bcfc:	2a00      	cmp	r2, #0
1000bcfe:	d001      	beq.n	1000bd04 <internal_event_post+0x30>
1000bd00:	1c13      	adds	r3, r2, #0
1000bd02:	e7fa      	b.n	1000bcfa <internal_event_post+0x26>
1000bd04:	601c      	str	r4, [r3, #0]
1000bd06:	bd70      	pop	{r4, r5, r6, pc}
1000bd08:	10012544 	.word	0x10012544
1000bd0c:	10012540 	.word	0x10012540

1000bd10 <internal_event_init>:
1000bd10:	4b08      	ldr	r3, [pc, #32]	; (1000bd34 <internal_event_init+0x24>)
1000bd12:	2200      	movs	r2, #0
1000bd14:	1c19      	adds	r1, r3, #0
1000bd16:	b510      	push	{r4, lr}
1000bd18:	6818      	ldr	r0, [r3, #0]
1000bd1a:	4b07      	ldr	r3, [pc, #28]	; (1000bd38 <internal_event_init+0x28>)
1000bd1c:	189c      	adds	r4, r3, r2
1000bd1e:	50d0      	str	r0, [r2, r3]
1000bd20:	3210      	adds	r2, #16
1000bd22:	1c20      	adds	r0, r4, #0
1000bd24:	2aa0      	cmp	r2, #160	; 0xa0
1000bd26:	d1f8      	bne.n	1000bd1a <internal_event_init+0xa>
1000bd28:	2200      	movs	r2, #0
1000bd2a:	3390      	adds	r3, #144	; 0x90
1000bd2c:	600b      	str	r3, [r1, #0]
1000bd2e:	4b03      	ldr	r3, [pc, #12]	; (1000bd3c <internal_event_init+0x2c>)
1000bd30:	601a      	str	r2, [r3, #0]
1000bd32:	bd10      	pop	{r4, pc}
1000bd34:	10012544 	.word	0x10012544
1000bd38:	100124a0 	.word	0x100124a0
1000bd3c:	10012540 	.word	0x10012540

1000bd40 <special_events_handler>:
1000bd40:	b538      	push	{r3, r4, r5, lr}
1000bd42:	4c1b      	ldr	r4, [pc, #108]	; (1000bdb0 <special_events_handler+0x70>)
1000bd44:	1c03      	adds	r3, r0, #0
1000bd46:	8825      	ldrh	r5, [r4, #0]
1000bd48:	1c08      	adds	r0, r1, #0
1000bd4a:	1c21      	adds	r1, r4, #0
1000bd4c:	429d      	cmp	r5, r3
1000bd4e:	d107      	bne.n	1000bd60 <special_events_handler+0x20>
1000bd50:	88a5      	ldrh	r5, [r4, #4]
1000bd52:	4285      	cmp	r5, r0
1000bd54:	d104      	bne.n	1000bd60 <special_events_handler+0x20>
1000bd56:	2301      	movs	r3, #1
1000bd58:	425b      	negs	r3, r3
1000bd5a:	8023      	strh	r3, [r4, #0]
1000bd5c:	60a2      	str	r2, [r4, #8]
1000bd5e:	e009      	b.n	1000bd74 <special_events_handler+0x34>
1000bd60:	884c      	ldrh	r4, [r1, #2]
1000bd62:	429c      	cmp	r4, r3
1000bd64:	d10a      	bne.n	1000bd7c <special_events_handler+0x3c>
1000bd66:	888c      	ldrh	r4, [r1, #4]
1000bd68:	4284      	cmp	r4, r0
1000bd6a:	d107      	bne.n	1000bd7c <special_events_handler+0x3c>
1000bd6c:	2301      	movs	r3, #1
1000bd6e:	425b      	negs	r3, r3
1000bd70:	804b      	strh	r3, [r1, #2]
1000bd72:	608a      	str	r2, [r1, #8]
1000bd74:	4b0f      	ldr	r3, [pc, #60]	; (1000bdb4 <special_events_handler+0x74>)
1000bd76:	4798      	blx	r3
1000bd78:	2001      	movs	r0, #1
1000bd7a:	e017      	b.n	1000bdac <special_events_handler+0x6c>
1000bd7c:	490e      	ldr	r1, [pc, #56]	; (1000bdb8 <special_events_handler+0x78>)
1000bd7e:	428b      	cmp	r3, r1
1000bd80:	d00e      	beq.n	1000bda0 <special_events_handler+0x60>
1000bd82:	490e      	ldr	r1, [pc, #56]	; (1000bdbc <special_events_handler+0x7c>)
1000bd84:	428b      	cmp	r3, r1
1000bd86:	d007      	beq.n	1000bd98 <special_events_handler+0x58>
1000bd88:	490d      	ldr	r1, [pc, #52]	; (1000bdc0 <special_events_handler+0x80>)
1000bd8a:	2000      	movs	r0, #0
1000bd8c:	428b      	cmp	r3, r1
1000bd8e:	d10d      	bne.n	1000bdac <special_events_handler+0x6c>
1000bd90:	1c10      	adds	r0, r2, #0
1000bd92:	4b0c      	ldr	r3, [pc, #48]	; (1000bdc4 <special_events_handler+0x84>)
1000bd94:	4798      	blx	r3
1000bd96:	e7ef      	b.n	1000bd78 <special_events_handler+0x38>
1000bd98:	1c11      	adds	r1, r2, #0
1000bd9a:	4b0b      	ldr	r3, [pc, #44]	; (1000bdc8 <special_events_handler+0x88>)
1000bd9c:	2200      	movs	r2, #0
1000bd9e:	e002      	b.n	1000bda6 <special_events_handler+0x66>
1000bda0:	1c11      	adds	r1, r2, #0
1000bda2:	2200      	movs	r2, #0
1000bda4:	4b09      	ldr	r3, [pc, #36]	; (1000bdcc <special_events_handler+0x8c>)
1000bda6:	4798      	blx	r3
1000bda8:	4243      	negs	r3, r0
1000bdaa:	4158      	adcs	r0, r3
1000bdac:	bd38      	pop	{r3, r4, r5, pc}
1000bdae:	46c0      	nop			; (mov r8, r8)
1000bdb0:	1001323c 	.word	0x1001323c
1000bdb4:	1000cfa9 	.word	0x1000cfa9
1000bdb8:	00000e13 	.word	0x00000e13
1000bdbc:	00000e15 	.word	0x00000e15
1000bdc0:	00000e01 	.word	0x00000e01
1000bdc4:	1000d319 	.word	0x1000d319
1000bdc8:	1000d4d9 	.word	0x1000d4d9
1000bdcc:	1000d5b1 	.word	0x1000d5b1

1000bdd0 <at_ble_event_get>:
1000bdd0:	2300      	movs	r3, #0
1000bdd2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdd4:	b085      	sub	sp, #20
1000bdd6:	9202      	str	r2, [sp, #8]
1000bdd8:	7003      	strb	r3, [r0, #0]
1000bdda:	9b02      	ldr	r3, [sp, #8]
1000bddc:	9001      	str	r0, [sp, #4]
1000bdde:	3b01      	subs	r3, #1
1000bde0:	1c0d      	adds	r5, r1, #0
1000bde2:	9303      	str	r3, [sp, #12]
1000bde4:	3303      	adds	r3, #3
1000bde6:	d802      	bhi.n	1000bdee <at_ble_event_get+0x1e>
1000bde8:	9802      	ldr	r0, [sp, #8]
1000bdea:	4bad      	ldr	r3, [pc, #692]	; (1000c0a0 <at_ble_event_get+0x2d0>)
1000bdec:	4798      	blx	r3
1000bdee:	9b03      	ldr	r3, [sp, #12]
1000bdf0:	4fac      	ldr	r7, [pc, #688]	; (1000c0a4 <at_ble_event_get+0x2d4>)
1000bdf2:	2400      	movs	r4, #0
1000bdf4:	3303      	adds	r3, #3
1000bdf6:	d812      	bhi.n	1000be1e <at_ble_event_get+0x4e>
1000bdf8:	683b      	ldr	r3, [r7, #0]
1000bdfa:	2b00      	cmp	r3, #0
1000bdfc:	d112      	bne.n	1000be24 <at_ble_event_get+0x54>
1000bdfe:	2cd0      	cmp	r4, #208	; 0xd0
1000be00:	d100      	bne.n	1000be04 <at_ble_event_get+0x34>
1000be02:	e29c      	b.n	1000c33e <at_ble_event_get+0x56e>
1000be04:	9802      	ldr	r0, [sp, #8]
1000be06:	4ba8      	ldr	r3, [pc, #672]	; (1000c0a8 <at_ble_event_get+0x2d8>)
1000be08:	4798      	blx	r3
1000be0a:	1e04      	subs	r4, r0, #0
1000be0c:	2c02      	cmp	r4, #2
1000be0e:	d1f3      	bne.n	1000bdf8 <at_ble_event_get+0x28>
1000be10:	e025      	b.n	1000be5e <at_ble_event_get+0x8e>
1000be12:	9802      	ldr	r0, [sp, #8]
1000be14:	4ba4      	ldr	r3, [pc, #656]	; (1000c0a8 <at_ble_event_get+0x2d8>)
1000be16:	4798      	blx	r3
1000be18:	1e04      	subs	r4, r0, #0
1000be1a:	2c02      	cmp	r4, #2
1000be1c:	d01f      	beq.n	1000be5e <at_ble_event_get+0x8e>
1000be1e:	683b      	ldr	r3, [r7, #0]
1000be20:	2b00      	cmp	r3, #0
1000be22:	d0f6      	beq.n	1000be12 <at_ble_event_get+0x42>
1000be24:	2cd0      	cmp	r4, #208	; 0xd0
1000be26:	d100      	bne.n	1000be2a <at_ble_event_get+0x5a>
1000be28:	e289      	b.n	1000c33e <at_ble_event_get+0x56e>
1000be2a:	1ee3      	subs	r3, r4, #3
1000be2c:	1e5a      	subs	r2, r3, #1
1000be2e:	4193      	sbcs	r3, r2
1000be30:	6838      	ldr	r0, [r7, #0]
1000be32:	425b      	negs	r3, r3
1000be34:	401c      	ands	r4, r3
1000be36:	2800      	cmp	r0, #0
1000be38:	d100      	bne.n	1000be3c <at_ble_event_get+0x6c>
1000be3a:	e286      	b.n	1000c34a <at_ble_event_get+0x57a>
1000be3c:	6803      	ldr	r3, [r0, #0]
1000be3e:	68c1      	ldr	r1, [r0, #12]
1000be40:	603b      	str	r3, [r7, #0]
1000be42:	4f9a      	ldr	r7, [pc, #616]	; (1000c0ac <at_ble_event_get+0x2dc>)
1000be44:	88c2      	ldrh	r2, [r0, #6]
1000be46:	683e      	ldr	r6, [r7, #0]
1000be48:	8883      	ldrh	r3, [r0, #4]
1000be4a:	6006      	str	r6, [r0, #0]
1000be4c:	6038      	str	r0, [r7, #0]
1000be4e:	2c00      	cmp	r4, #0
1000be50:	d112      	bne.n	1000be78 <at_ble_event_get+0xa8>
1000be52:	4897      	ldr	r0, [pc, #604]	; (1000c0b0 <at_ble_event_get+0x2e0>)
1000be54:	4283      	cmp	r3, r0
1000be56:	d008      	beq.n	1000be6a <at_ble_event_get+0x9a>
1000be58:	4896      	ldr	r0, [pc, #600]	; (1000c0b4 <at_ble_event_get+0x2e4>)
1000be5a:	4283      	cmp	r3, r0
1000be5c:	d11d      	bne.n	1000be9a <at_ble_event_get+0xca>
1000be5e:	233a      	movs	r3, #58	; 0x3a
1000be60:	2400      	movs	r4, #0
1000be62:	9a01      	ldr	r2, [sp, #4]
1000be64:	1c25      	adds	r5, r4, #0
1000be66:	7013      	strb	r3, [r2, #0]
1000be68:	e006      	b.n	1000be78 <at_ble_event_get+0xa8>
1000be6a:	429a      	cmp	r2, r3
1000be6c:	d000      	beq.n	1000be70 <at_ble_event_get+0xa0>
1000be6e:	e268      	b.n	1000c342 <at_ble_event_get+0x572>
1000be70:	2338      	movs	r3, #56	; 0x38
1000be72:	9a01      	ldr	r2, [sp, #4]
1000be74:	7013      	strb	r3, [r2, #0]
1000be76:	6029      	str	r1, [r5, #0]
1000be78:	9b01      	ldr	r3, [sp, #4]
1000be7a:	781b      	ldrb	r3, [r3, #0]
1000be7c:	2b3b      	cmp	r3, #59	; 0x3b
1000be7e:	d003      	beq.n	1000be88 <at_ble_event_get+0xb8>
1000be80:	9b03      	ldr	r3, [sp, #12]
1000be82:	3303      	adds	r3, #3
1000be84:	d903      	bls.n	1000be8e <at_ble_event_get+0xbe>
1000be86:	e264      	b.n	1000c352 <at_ble_event_get+0x582>
1000be88:	2c00      	cmp	r4, #0
1000be8a:	d0b0      	beq.n	1000bdee <at_ble_event_get+0x1e>
1000be8c:	e7f8      	b.n	1000be80 <at_ble_event_get+0xb0>
1000be8e:	2cd0      	cmp	r4, #208	; 0xd0
1000be90:	d100      	bne.n	1000be94 <at_ble_event_get+0xc4>
1000be92:	e25e      	b.n	1000c352 <at_ble_event_get+0x582>
1000be94:	4b88      	ldr	r3, [pc, #544]	; (1000c0b8 <at_ble_event_get+0x2e8>)
1000be96:	4798      	blx	r3
1000be98:	e25b      	b.n	1000c352 <at_ble_event_get+0x582>
1000be9a:	2abb      	cmp	r2, #187	; 0xbb
1000be9c:	d123      	bne.n	1000bee6 <at_ble_event_get+0x116>
1000be9e:	2bbb      	cmp	r3, #187	; 0xbb
1000bea0:	d121      	bne.n	1000bee6 <at_ble_event_get+0x116>
1000bea2:	80ac      	strh	r4, [r5, #4]
1000bea4:	788b      	ldrb	r3, [r1, #2]
1000bea6:	784a      	ldrb	r2, [r1, #1]
1000bea8:	021b      	lsls	r3, r3, #8
1000beaa:	78cf      	ldrb	r7, [r1, #3]
1000beac:	7908      	ldrb	r0, [r1, #4]
1000beae:	4313      	orrs	r3, r2
1000beb0:	794a      	ldrb	r2, [r1, #5]
1000beb2:	4982      	ldr	r1, [pc, #520]	; (1000c0bc <at_ble_event_get+0x2ec>)
1000beb4:	70af      	strb	r7, [r5, #2]
1000beb6:	802b      	strh	r3, [r5, #0]
1000beb8:	428b      	cmp	r3, r1
1000beba:	d806      	bhi.n	1000beca <at_ble_event_get+0xfa>
1000bebc:	4a80      	ldr	r2, [pc, #512]	; (1000c0c0 <at_ble_event_get+0x2f0>)
1000bebe:	4293      	cmp	r3, r2
1000bec0:	d20b      	bcs.n	1000beda <at_ble_event_get+0x10a>
1000bec2:	4a80      	ldr	r2, [pc, #512]	; (1000c0c4 <at_ble_event_get+0x2f4>)
1000bec4:	4293      	cmp	r3, r2
1000bec6:	d008      	beq.n	1000beda <at_ble_event_get+0x10a>
1000bec8:	e009      	b.n	1000bede <at_ble_event_get+0x10e>
1000beca:	497f      	ldr	r1, [pc, #508]	; (1000c0c8 <at_ble_event_get+0x2f8>)
1000becc:	428b      	cmp	r3, r1
1000bece:	d106      	bne.n	1000bede <at_ble_event_get+0x10e>
1000bed0:	0213      	lsls	r3, r2, #8
1000bed2:	4303      	orrs	r3, r0
1000bed4:	80ab      	strh	r3, [r5, #4]
1000bed6:	2337      	movs	r3, #55	; 0x37
1000bed8:	e002      	b.n	1000bee0 <at_ble_event_get+0x110>
1000beda:	2336      	movs	r3, #54	; 0x36
1000bedc:	e000      	b.n	1000bee0 <at_ble_event_get+0x110>
1000bede:	2300      	movs	r3, #0
1000bee0:	9a01      	ldr	r2, [sp, #4]
1000bee2:	7013      	strb	r3, [r2, #0]
1000bee4:	e7c8      	b.n	1000be78 <at_ble_event_get+0xa8>
1000bee6:	4879      	ldr	r0, [pc, #484]	; (1000c0cc <at_ble_event_get+0x2fc>)
1000bee8:	4283      	cmp	r3, r0
1000beea:	d100      	bne.n	1000beee <at_ble_event_get+0x11e>
1000beec:	e14c      	b.n	1000c188 <at_ble_event_get+0x3b8>
1000beee:	d864      	bhi.n	1000bfba <at_ble_event_get+0x1ea>
1000bef0:	4877      	ldr	r0, [pc, #476]	; (1000c0d0 <at_ble_event_get+0x300>)
1000bef2:	4283      	cmp	r3, r0
1000bef4:	d100      	bne.n	1000bef8 <at_ble_event_get+0x128>
1000bef6:	e1cd      	b.n	1000c294 <at_ble_event_get+0x4c4>
1000bef8:	d82f      	bhi.n	1000bf5a <at_ble_event_get+0x18a>
1000befa:	4876      	ldr	r0, [pc, #472]	; (1000c0d4 <at_ble_event_get+0x304>)
1000befc:	4283      	cmp	r3, r0
1000befe:	d100      	bne.n	1000bf02 <at_ble_event_get+0x132>
1000bf00:	e1d6      	b.n	1000c2b0 <at_ble_event_get+0x4e0>
1000bf02:	d813      	bhi.n	1000bf2c <at_ble_event_get+0x15c>
1000bf04:	4874      	ldr	r0, [pc, #464]	; (1000c0d8 <at_ble_event_get+0x308>)
1000bf06:	4283      	cmp	r3, r0
1000bf08:	d100      	bne.n	1000bf0c <at_ble_event_get+0x13c>
1000bf0a:	e19f      	b.n	1000c24c <at_ble_event_get+0x47c>
1000bf0c:	d804      	bhi.n	1000bf18 <at_ble_event_get+0x148>
1000bf0e:	2438      	movs	r4, #56	; 0x38
1000bf10:	42a3      	cmp	r3, r4
1000bf12:	d100      	bne.n	1000bf16 <at_ble_event_get+0x146>
1000bf14:	e20f      	b.n	1000c336 <at_ble_event_get+0x566>
1000bf16:	e0b6      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bf18:	4870      	ldr	r0, [pc, #448]	; (1000c0dc <at_ble_event_get+0x30c>)
1000bf1a:	4283      	cmp	r3, r0
1000bf1c:	d100      	bne.n	1000bf20 <at_ble_event_get+0x150>
1000bf1e:	e19b      	b.n	1000c258 <at_ble_event_get+0x488>
1000bf20:	30fe      	adds	r0, #254	; 0xfe
1000bf22:	30ff      	adds	r0, #255	; 0xff
1000bf24:	4283      	cmp	r3, r0
1000bf26:	d100      	bne.n	1000bf2a <at_ble_event_get+0x15a>
1000bf28:	e1c8      	b.n	1000c2bc <at_ble_event_get+0x4ec>
1000bf2a:	e0ac      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bf2c:	486c      	ldr	r0, [pc, #432]	; (1000c0e0 <at_ble_event_get+0x310>)
1000bf2e:	4283      	cmp	r3, r0
1000bf30:	d100      	bne.n	1000bf34 <at_ble_event_get+0x164>
1000bf32:	e1a3      	b.n	1000c27c <at_ble_event_get+0x4ac>
1000bf34:	d808      	bhi.n	1000bf48 <at_ble_event_get+0x178>
1000bf36:	486b      	ldr	r0, [pc, #428]	; (1000c0e4 <at_ble_event_get+0x314>)
1000bf38:	4283      	cmp	r3, r0
1000bf3a:	d100      	bne.n	1000bf3e <at_ble_event_get+0x16e>
1000bf3c:	e192      	b.n	1000c264 <at_ble_event_get+0x494>
1000bf3e:	486a      	ldr	r0, [pc, #424]	; (1000c0e8 <at_ble_event_get+0x318>)
1000bf40:	4283      	cmp	r3, r0
1000bf42:	d100      	bne.n	1000bf46 <at_ble_event_get+0x176>
1000bf44:	e194      	b.n	1000c270 <at_ble_event_get+0x4a0>
1000bf46:	e09e      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bf48:	4868      	ldr	r0, [pc, #416]	; (1000c0ec <at_ble_event_get+0x31c>)
1000bf4a:	4283      	cmp	r3, r0
1000bf4c:	d100      	bne.n	1000bf50 <at_ble_event_get+0x180>
1000bf4e:	e19b      	b.n	1000c288 <at_ble_event_get+0x4b8>
1000bf50:	4867      	ldr	r0, [pc, #412]	; (1000c0f0 <at_ble_event_get+0x320>)
1000bf52:	4283      	cmp	r3, r0
1000bf54:	d100      	bne.n	1000bf58 <at_ble_event_get+0x188>
1000bf56:	e1c5      	b.n	1000c2e4 <at_ble_event_get+0x514>
1000bf58:	e095      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bf5a:	4866      	ldr	r0, [pc, #408]	; (1000c0f4 <at_ble_event_get+0x324>)
1000bf5c:	4283      	cmp	r3, r0
1000bf5e:	d100      	bne.n	1000bf62 <at_ble_event_get+0x192>
1000bf60:	e1ba      	b.n	1000c2d8 <at_ble_event_get+0x508>
1000bf62:	d812      	bhi.n	1000bf8a <at_ble_event_get+0x1ba>
1000bf64:	4864      	ldr	r0, [pc, #400]	; (1000c0f8 <at_ble_event_get+0x328>)
1000bf66:	4283      	cmp	r3, r0
1000bf68:	d100      	bne.n	1000bf6c <at_ble_event_get+0x19c>
1000bf6a:	e1c1      	b.n	1000c2f0 <at_ble_event_get+0x520>
1000bf6c:	d804      	bhi.n	1000bf78 <at_ble_event_get+0x1a8>
1000bf6e:	4863      	ldr	r0, [pc, #396]	; (1000c0fc <at_ble_event_get+0x32c>)
1000bf70:	4283      	cmp	r3, r0
1000bf72:	d100      	bne.n	1000bf76 <at_ble_event_get+0x1a6>
1000bf74:	e192      	b.n	1000c29c <at_ble_event_get+0x4cc>
1000bf76:	e086      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bf78:	4861      	ldr	r0, [pc, #388]	; (1000c100 <at_ble_event_get+0x330>)
1000bf7a:	4283      	cmp	r3, r0
1000bf7c:	d100      	bne.n	1000bf80 <at_ble_event_get+0x1b0>
1000bf7e:	e1a1      	b.n	1000c2c4 <at_ble_event_get+0x4f4>
1000bf80:	4860      	ldr	r0, [pc, #384]	; (1000c104 <at_ble_event_get+0x334>)
1000bf82:	4283      	cmp	r3, r0
1000bf84:	d100      	bne.n	1000bf88 <at_ble_event_get+0x1b8>
1000bf86:	e1a3      	b.n	1000c2d0 <at_ble_event_get+0x500>
1000bf88:	e07d      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bf8a:	4a5f      	ldr	r2, [pc, #380]	; (1000c108 <at_ble_event_get+0x338>)
1000bf8c:	4293      	cmp	r3, r2
1000bf8e:	d100      	bne.n	1000bf92 <at_ble_event_get+0x1c2>
1000bf90:	e07f      	b.n	1000c092 <at_ble_event_get+0x2c2>
1000bf92:	d808      	bhi.n	1000bfa6 <at_ble_event_get+0x1d6>
1000bf94:	3a08      	subs	r2, #8
1000bf96:	4293      	cmp	r3, r2
1000bf98:	d077      	beq.n	1000c08a <at_ble_event_get+0x2ba>
1000bf9a:	4a5c      	ldr	r2, [pc, #368]	; (1000c10c <at_ble_event_get+0x33c>)
1000bf9c:	2439      	movs	r4, #57	; 0x39
1000bf9e:	4293      	cmp	r3, r2
1000bfa0:	d100      	bne.n	1000bfa4 <at_ble_event_get+0x1d4>
1000bfa2:	e1c8      	b.n	1000c336 <at_ble_event_get+0x566>
1000bfa4:	e06f      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bfa6:	22d1      	movs	r2, #209	; 0xd1
1000bfa8:	0112      	lsls	r2, r2, #4
1000bfaa:	4293      	cmp	r3, r2
1000bfac:	d100      	bne.n	1000bfb0 <at_ble_event_get+0x1e0>
1000bfae:	e0df      	b.n	1000c170 <at_ble_event_get+0x3a0>
1000bfb0:	4a57      	ldr	r2, [pc, #348]	; (1000c110 <at_ble_event_get+0x340>)
1000bfb2:	4293      	cmp	r3, r2
1000bfb4:	d100      	bne.n	1000bfb8 <at_ble_event_get+0x1e8>
1000bfb6:	e0e1      	b.n	1000c17c <at_ble_event_get+0x3ac>
1000bfb8:	e065      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bfba:	4856      	ldr	r0, [pc, #344]	; (1000c114 <at_ble_event_get+0x344>)
1000bfbc:	4283      	cmp	r3, r0
1000bfbe:	d100      	bne.n	1000bfc2 <at_ble_event_get+0x1f2>
1000bfc0:	e118      	b.n	1000c1f4 <at_ble_event_get+0x424>
1000bfc2:	d82e      	bhi.n	1000c022 <at_ble_event_get+0x252>
1000bfc4:	4854      	ldr	r0, [pc, #336]	; (1000c118 <at_ble_event_get+0x348>)
1000bfc6:	4283      	cmp	r3, r0
1000bfc8:	d100      	bne.n	1000bfcc <at_ble_event_get+0x1fc>
1000bfca:	e13b      	b.n	1000c244 <at_ble_event_get+0x474>
1000bfcc:	d812      	bhi.n	1000bff4 <at_ble_event_get+0x224>
1000bfce:	4853      	ldr	r0, [pc, #332]	; (1000c11c <at_ble_event_get+0x34c>)
1000bfd0:	4283      	cmp	r3, r0
1000bfd2:	d100      	bne.n	1000bfd6 <at_ble_event_get+0x206>
1000bfd4:	e0ee      	b.n	1000c1b4 <at_ble_event_get+0x3e4>
1000bfd6:	d804      	bhi.n	1000bfe2 <at_ble_event_get+0x212>
1000bfd8:	3803      	subs	r0, #3
1000bfda:	4283      	cmp	r3, r0
1000bfdc:	d100      	bne.n	1000bfe0 <at_ble_event_get+0x210>
1000bfde:	e0d9      	b.n	1000c194 <at_ble_event_get+0x3c4>
1000bfe0:	e051      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bfe2:	484f      	ldr	r0, [pc, #316]	; (1000c120 <at_ble_event_get+0x350>)
1000bfe4:	4283      	cmp	r3, r0
1000bfe6:	d100      	bne.n	1000bfea <at_ble_event_get+0x21a>
1000bfe8:	e0d8      	b.n	1000c19c <at_ble_event_get+0x3cc>
1000bfea:	484e      	ldr	r0, [pc, #312]	; (1000c124 <at_ble_event_get+0x354>)
1000bfec:	4283      	cmp	r3, r0
1000bfee:	d100      	bne.n	1000bff2 <at_ble_event_get+0x222>
1000bff0:	e0fb      	b.n	1000c1ea <at_ble_event_get+0x41a>
1000bff2:	e048      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000bff4:	484c      	ldr	r0, [pc, #304]	; (1000c128 <at_ble_event_get+0x358>)
1000bff6:	4283      	cmp	r3, r0
1000bff8:	d100      	bne.n	1000bffc <at_ble_event_get+0x22c>
1000bffa:	e0e1      	b.n	1000c1c0 <at_ble_event_get+0x3f0>
1000bffc:	d808      	bhi.n	1000c010 <at_ble_event_get+0x240>
1000bffe:	484b      	ldr	r0, [pc, #300]	; (1000c12c <at_ble_event_get+0x35c>)
1000c000:	4283      	cmp	r3, r0
1000c002:	d100      	bne.n	1000c006 <at_ble_event_get+0x236>
1000c004:	e11a      	b.n	1000c23c <at_ble_event_get+0x46c>
1000c006:	484a      	ldr	r0, [pc, #296]	; (1000c130 <at_ble_event_get+0x360>)
1000c008:	4283      	cmp	r3, r0
1000c00a:	d100      	bne.n	1000c00e <at_ble_event_get+0x23e>
1000c00c:	e0dd      	b.n	1000c1ca <at_ble_event_get+0x3fa>
1000c00e:	e03a      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c010:	4848      	ldr	r0, [pc, #288]	; (1000c134 <at_ble_event_get+0x364>)
1000c012:	4283      	cmp	r3, r0
1000c014:	d100      	bne.n	1000c018 <at_ble_event_get+0x248>
1000c016:	e0dc      	b.n	1000c1d2 <at_ble_event_get+0x402>
1000c018:	4847      	ldr	r0, [pc, #284]	; (1000c138 <at_ble_event_get+0x368>)
1000c01a:	4283      	cmp	r3, r0
1000c01c:	d100      	bne.n	1000c020 <at_ble_event_get+0x250>
1000c01e:	e0de      	b.n	1000c1de <at_ble_event_get+0x40e>
1000c020:	e031      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c022:	4846      	ldr	r0, [pc, #280]	; (1000c13c <at_ble_event_get+0x36c>)
1000c024:	4283      	cmp	r3, r0
1000c026:	d100      	bne.n	1000c02a <at_ble_event_get+0x25a>
1000c028:	e0f6      	b.n	1000c218 <at_ble_event_get+0x448>
1000c02a:	d816      	bhi.n	1000c05a <at_ble_event_get+0x28a>
1000c02c:	4844      	ldr	r0, [pc, #272]	; (1000c140 <at_ble_event_get+0x370>)
1000c02e:	4283      	cmp	r3, r0
1000c030:	d100      	bne.n	1000c034 <at_ble_event_get+0x264>
1000c032:	e0f7      	b.n	1000c224 <at_ble_event_get+0x454>
1000c034:	d808      	bhi.n	1000c048 <at_ble_event_get+0x278>
1000c036:	4843      	ldr	r0, [pc, #268]	; (1000c144 <at_ble_event_get+0x374>)
1000c038:	4283      	cmp	r3, r0
1000c03a:	d100      	bne.n	1000c03e <at_ble_event_get+0x26e>
1000c03c:	e0e0      	b.n	1000c200 <at_ble_event_get+0x430>
1000c03e:	4842      	ldr	r0, [pc, #264]	; (1000c148 <at_ble_event_get+0x378>)
1000c040:	4283      	cmp	r3, r0
1000c042:	d100      	bne.n	1000c046 <at_ble_event_get+0x276>
1000c044:	e0b0      	b.n	1000c1a8 <at_ble_event_get+0x3d8>
1000c046:	e01e      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c048:	4a40      	ldr	r2, [pc, #256]	; (1000c14c <at_ble_event_get+0x37c>)
1000c04a:	4293      	cmp	r3, r2
1000c04c:	d100      	bne.n	1000c050 <at_ble_event_get+0x280>
1000c04e:	e0dd      	b.n	1000c20c <at_ble_event_get+0x43c>
1000c050:	4a3f      	ldr	r2, [pc, #252]	; (1000c150 <at_ble_event_get+0x380>)
1000c052:	4293      	cmp	r3, r2
1000c054:	d100      	bne.n	1000c058 <at_ble_event_get+0x288>
1000c056:	e0eb      	b.n	1000c230 <at_ble_event_get+0x460>
1000c058:	e015      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c05a:	483e      	ldr	r0, [pc, #248]	; (1000c154 <at_ble_event_get+0x384>)
1000c05c:	4283      	cmp	r3, r0
1000c05e:	d100      	bne.n	1000c062 <at_ble_event_get+0x292>
1000c060:	e158      	b.n	1000c314 <at_ble_event_get+0x544>
1000c062:	d808      	bhi.n	1000c076 <at_ble_event_get+0x2a6>
1000c064:	483c      	ldr	r0, [pc, #240]	; (1000c158 <at_ble_event_get+0x388>)
1000c066:	4283      	cmp	r3, r0
1000c068:	d100      	bne.n	1000c06c <at_ble_event_get+0x29c>
1000c06a:	e147      	b.n	1000c2fc <at_ble_event_get+0x52c>
1000c06c:	483b      	ldr	r0, [pc, #236]	; (1000c15c <at_ble_event_get+0x38c>)
1000c06e:	4283      	cmp	r3, r0
1000c070:	d100      	bne.n	1000c074 <at_ble_event_get+0x2a4>
1000c072:	e149      	b.n	1000c308 <at_ble_event_get+0x538>
1000c074:	e007      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c076:	483a      	ldr	r0, [pc, #232]	; (1000c160 <at_ble_event_get+0x390>)
1000c078:	4283      	cmp	r3, r0
1000c07a:	d100      	bne.n	1000c07e <at_ble_event_get+0x2ae>
1000c07c:	e150      	b.n	1000c320 <at_ble_event_get+0x550>
1000c07e:	4839      	ldr	r0, [pc, #228]	; (1000c164 <at_ble_event_get+0x394>)
1000c080:	4283      	cmp	r3, r0
1000c082:	d100      	bne.n	1000c086 <at_ble_event_get+0x2b6>
1000c084:	e152      	b.n	1000c32c <at_ble_event_get+0x55c>
1000c086:	2400      	movs	r4, #0
1000c088:	e155      	b.n	1000c336 <at_ble_event_get+0x566>
1000c08a:	1c08      	adds	r0, r1, #0
1000c08c:	4b36      	ldr	r3, [pc, #216]	; (1000c168 <at_ble_event_get+0x398>)
1000c08e:	1c29      	adds	r1, r5, #0
1000c090:	e07d      	b.n	1000c18e <at_ble_event_get+0x3be>
1000c092:	1c08      	adds	r0, r1, #0
1000c094:	4b35      	ldr	r3, [pc, #212]	; (1000c16c <at_ble_event_get+0x39c>)
1000c096:	1c29      	adds	r1, r5, #0
1000c098:	4798      	blx	r3
1000c09a:	2404      	movs	r4, #4
1000c09c:	e14b      	b.n	1000c336 <at_ble_event_get+0x566>
1000c09e:	46c0      	nop			; (mov r8, r8)
1000c0a0:	1000cfe1 	.word	0x1000cfe1
1000c0a4:	10012540 	.word	0x10012540
1000c0a8:	1000b181 	.word	0x1000b181
1000c0ac:	10012544 	.word	0x10012544
1000c0b0:	0000ffff 	.word	0x0000ffff
1000c0b4:	0000fffe 	.word	0x0000fffe
1000c0b8:	1000cfe3 	.word	0x1000cfe3
1000c0bc:	0000201e 	.word	0x0000201e
1000c0c0:	0000201d 	.word	0x0000201d
1000c0c4:	00000c03 	.word	0x00000c03
1000c0c8:	0000201f 	.word	0x0000201f
1000c0cc:	00000d1c 	.word	0x00000d1c
1000c0d0:	00000c0c 	.word	0x00000c0c
1000c0d4:	00000c02 	.word	0x00000c02
1000c0d8:	00000a02 	.word	0x00000a02
1000c0dc:	00000a03 	.word	0x00000a03
1000c0e0:	00000c06 	.word	0x00000c06
1000c0e4:	00000c04 	.word	0x00000c04
1000c0e8:	00000c05 	.word	0x00000c05
1000c0ec:	00000c07 	.word	0x00000c07
1000c0f0:	00000c09 	.word	0x00000c09
1000c0f4:	00000c17 	.word	0x00000c17
1000c0f8:	00000c12 	.word	0x00000c12
1000c0fc:	00000c0d 	.word	0x00000c0d
1000c100:	00000c13 	.word	0x00000c13
1000c104:	00000c15 	.word	0x00000c15
1000c108:	00000d08 	.word	0x00000d08
1000c10c:	00000d01 	.word	0x00000d01
1000c110:	00000d15 	.word	0x00000d15
1000c114:	00000e1b 	.word	0x00000e1b
1000c118:	00000e0f 	.word	0x00000e0f
1000c11c:	00000e03 	.word	0x00000e03
1000c120:	00000e06 	.word	0x00000e06
1000c124:	00000e0a 	.word	0x00000e0a
1000c128:	00000e15 	.word	0x00000e15
1000c12c:	00000e11 	.word	0x00000e11
1000c130:	00000e13 	.word	0x00000e13
1000c134:	00000e17 	.word	0x00000e17
1000c138:	00000e19 	.word	0x00000e19
1000c13c:	00000e27 	.word	0x00000e27
1000c140:	00000e21 	.word	0x00000e21
1000c144:	00000e1c 	.word	0x00000e1c
1000c148:	00000e1d 	.word	0x00000e1d
1000c14c:	00000e22 	.word	0x00000e22
1000c150:	00000e25 	.word	0x00000e25
1000c154:	00001b05 	.word	0x00001b05
1000c158:	00001b01 	.word	0x00001b01
1000c15c:	00001b03 	.word	0x00001b03
1000c160:	00001b06 	.word	0x00001b06
1000c164:	00001b08 	.word	0x00001b08
1000c168:	1000ddcd 	.word	0x1000ddcd
1000c16c:	1000ddb1 	.word	0x1000ddb1
1000c170:	1c08      	adds	r0, r1, #0
1000c172:	4b79      	ldr	r3, [pc, #484]	; (1000c358 <at_ble_event_get+0x588>)
1000c174:	1c29      	adds	r1, r5, #0
1000c176:	4798      	blx	r3
1000c178:	2401      	movs	r4, #1
1000c17a:	e0dc      	b.n	1000c336 <at_ble_event_get+0x566>
1000c17c:	1c08      	adds	r0, r1, #0
1000c17e:	4b77      	ldr	r3, [pc, #476]	; (1000c35c <at_ble_event_get+0x58c>)
1000c180:	1c29      	adds	r1, r5, #0
1000c182:	4798      	blx	r3
1000c184:	240f      	movs	r4, #15
1000c186:	e0d6      	b.n	1000c336 <at_ble_event_get+0x566>
1000c188:	1c08      	adds	r0, r1, #0
1000c18a:	1c29      	adds	r1, r5, #0
1000c18c:	4b74      	ldr	r3, [pc, #464]	; (1000c360 <at_ble_event_get+0x590>)
1000c18e:	4798      	blx	r3
1000c190:	1c04      	adds	r4, r0, #0
1000c192:	e0d0      	b.n	1000c336 <at_ble_event_get+0x566>
1000c194:	1c10      	adds	r0, r2, #0
1000c196:	4b73      	ldr	r3, [pc, #460]	; (1000c364 <at_ble_event_get+0x594>)
1000c198:	1c2a      	adds	r2, r5, #0
1000c19a:	e014      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c19c:	1c10      	adds	r0, r2, #0
1000c19e:	4b72      	ldr	r3, [pc, #456]	; (1000c368 <at_ble_event_get+0x598>)
1000c1a0:	1c2a      	adds	r2, r5, #0
1000c1a2:	4798      	blx	r3
1000c1a4:	2411      	movs	r4, #17
1000c1a6:	e0c6      	b.n	1000c336 <at_ble_event_get+0x566>
1000c1a8:	1c10      	adds	r0, r2, #0
1000c1aa:	4b70      	ldr	r3, [pc, #448]	; (1000c36c <at_ble_event_get+0x59c>)
1000c1ac:	1c2a      	adds	r2, r5, #0
1000c1ae:	4798      	blx	r3
1000c1b0:	2412      	movs	r4, #18
1000c1b2:	e0c0      	b.n	1000c336 <at_ble_event_get+0x566>
1000c1b4:	1c08      	adds	r0, r1, #0
1000c1b6:	4b6e      	ldr	r3, [pc, #440]	; (1000c370 <at_ble_event_get+0x5a0>)
1000c1b8:	1c29      	adds	r1, r5, #0
1000c1ba:	4798      	blx	r3
1000c1bc:	2406      	movs	r4, #6
1000c1be:	e0ba      	b.n	1000c336 <at_ble_event_get+0x566>
1000c1c0:	1c10      	adds	r0, r2, #0
1000c1c2:	1c2a      	adds	r2, r5, #0
1000c1c4:	4b6b      	ldr	r3, [pc, #428]	; (1000c374 <at_ble_event_get+0x5a4>)
1000c1c6:	4798      	blx	r3
1000c1c8:	e7e2      	b.n	1000c190 <at_ble_event_get+0x3c0>
1000c1ca:	1c10      	adds	r0, r2, #0
1000c1cc:	4b6a      	ldr	r3, [pc, #424]	; (1000c378 <at_ble_event_get+0x5a8>)
1000c1ce:	1c2a      	adds	r2, r5, #0
1000c1d0:	e7f9      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c1d2:	1c10      	adds	r0, r2, #0
1000c1d4:	4b69      	ldr	r3, [pc, #420]	; (1000c37c <at_ble_event_get+0x5ac>)
1000c1d6:	1c2a      	adds	r2, r5, #0
1000c1d8:	4798      	blx	r3
1000c1da:	240d      	movs	r4, #13
1000c1dc:	e0ab      	b.n	1000c336 <at_ble_event_get+0x566>
1000c1de:	1c10      	adds	r0, r2, #0
1000c1e0:	4b67      	ldr	r3, [pc, #412]	; (1000c380 <at_ble_event_get+0x5b0>)
1000c1e2:	1c2a      	adds	r2, r5, #0
1000c1e4:	4798      	blx	r3
1000c1e6:	240e      	movs	r4, #14
1000c1e8:	e0a5      	b.n	1000c336 <at_ble_event_get+0x566>
1000c1ea:	1c10      	adds	r0, r2, #0
1000c1ec:	4b65      	ldr	r3, [pc, #404]	; (1000c384 <at_ble_event_get+0x5b4>)
1000c1ee:	1c2a      	adds	r2, r5, #0
1000c1f0:	4798      	blx	r3
1000c1f2:	e075      	b.n	1000c2e0 <at_ble_event_get+0x510>
1000c1f4:	1c10      	adds	r0, r2, #0
1000c1f6:	4b64      	ldr	r3, [pc, #400]	; (1000c388 <at_ble_event_get+0x5b8>)
1000c1f8:	1c2a      	adds	r2, r5, #0
1000c1fa:	4798      	blx	r3
1000c1fc:	240b      	movs	r4, #11
1000c1fe:	e09a      	b.n	1000c336 <at_ble_event_get+0x566>
1000c200:	1c10      	adds	r0, r2, #0
1000c202:	4b62      	ldr	r3, [pc, #392]	; (1000c38c <at_ble_event_get+0x5bc>)
1000c204:	1c2a      	adds	r2, r5, #0
1000c206:	4798      	blx	r3
1000c208:	2410      	movs	r4, #16
1000c20a:	e094      	b.n	1000c336 <at_ble_event_get+0x566>
1000c20c:	1c08      	adds	r0, r1, #0
1000c20e:	4b60      	ldr	r3, [pc, #384]	; (1000c390 <at_ble_event_get+0x5c0>)
1000c210:	1c29      	adds	r1, r5, #0
1000c212:	4798      	blx	r3
1000c214:	2428      	movs	r4, #40	; 0x28
1000c216:	e08e      	b.n	1000c336 <at_ble_event_get+0x566>
1000c218:	1c08      	adds	r0, r1, #0
1000c21a:	4b5e      	ldr	r3, [pc, #376]	; (1000c394 <at_ble_event_get+0x5c4>)
1000c21c:	1c29      	adds	r1, r5, #0
1000c21e:	4798      	blx	r3
1000c220:	2429      	movs	r4, #41	; 0x29
1000c222:	e088      	b.n	1000c336 <at_ble_event_get+0x566>
1000c224:	1c08      	adds	r0, r1, #0
1000c226:	4b5c      	ldr	r3, [pc, #368]	; (1000c398 <at_ble_event_get+0x5c8>)
1000c228:	1c29      	adds	r1, r5, #0
1000c22a:	4798      	blx	r3
1000c22c:	2427      	movs	r4, #39	; 0x27
1000c22e:	e082      	b.n	1000c336 <at_ble_event_get+0x566>
1000c230:	1c08      	adds	r0, r1, #0
1000c232:	4b5a      	ldr	r3, [pc, #360]	; (1000c39c <at_ble_event_get+0x5cc>)
1000c234:	1c29      	adds	r1, r5, #0
1000c236:	4798      	blx	r3
1000c238:	242a      	movs	r4, #42	; 0x2a
1000c23a:	e07c      	b.n	1000c336 <at_ble_event_get+0x566>
1000c23c:	1c10      	adds	r0, r2, #0
1000c23e:	4b58      	ldr	r3, [pc, #352]	; (1000c3a0 <at_ble_event_get+0x5d0>)
1000c240:	1c2a      	adds	r2, r5, #0
1000c242:	e7c0      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c244:	1c10      	adds	r0, r2, #0
1000c246:	4b57      	ldr	r3, [pc, #348]	; (1000c3a4 <at_ble_event_get+0x5d4>)
1000c248:	1c2a      	adds	r2, r5, #0
1000c24a:	e7bc      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c24c:	1c08      	adds	r0, r1, #0
1000c24e:	4b56      	ldr	r3, [pc, #344]	; (1000c3a8 <at_ble_event_get+0x5d8>)
1000c250:	1c29      	adds	r1, r5, #0
1000c252:	4798      	blx	r3
1000c254:	242b      	movs	r4, #43	; 0x2b
1000c256:	e06e      	b.n	1000c336 <at_ble_event_get+0x566>
1000c258:	1c08      	adds	r0, r1, #0
1000c25a:	4b54      	ldr	r3, [pc, #336]	; (1000c3ac <at_ble_event_get+0x5dc>)
1000c25c:	1c29      	adds	r1, r5, #0
1000c25e:	4798      	blx	r3
1000c260:	242c      	movs	r4, #44	; 0x2c
1000c262:	e068      	b.n	1000c336 <at_ble_event_get+0x566>
1000c264:	1c10      	adds	r0, r2, #0
1000c266:	4b52      	ldr	r3, [pc, #328]	; (1000c3b0 <at_ble_event_get+0x5e0>)
1000c268:	1c2a      	adds	r2, r5, #0
1000c26a:	4798      	blx	r3
1000c26c:	2413      	movs	r4, #19
1000c26e:	e062      	b.n	1000c336 <at_ble_event_get+0x566>
1000c270:	1c10      	adds	r0, r2, #0
1000c272:	4b50      	ldr	r3, [pc, #320]	; (1000c3b4 <at_ble_event_get+0x5e4>)
1000c274:	1c2a      	adds	r2, r5, #0
1000c276:	4798      	blx	r3
1000c278:	2414      	movs	r4, #20
1000c27a:	e05c      	b.n	1000c336 <at_ble_event_get+0x566>
1000c27c:	1c10      	adds	r0, r2, #0
1000c27e:	4b4e      	ldr	r3, [pc, #312]	; (1000c3b8 <at_ble_event_get+0x5e8>)
1000c280:	1c2a      	adds	r2, r5, #0
1000c282:	4798      	blx	r3
1000c284:	2415      	movs	r4, #21
1000c286:	e056      	b.n	1000c336 <at_ble_event_get+0x566>
1000c288:	1c10      	adds	r0, r2, #0
1000c28a:	4b4c      	ldr	r3, [pc, #304]	; (1000c3bc <at_ble_event_get+0x5ec>)
1000c28c:	1c2a      	adds	r2, r5, #0
1000c28e:	4798      	blx	r3
1000c290:	2416      	movs	r4, #22
1000c292:	e050      	b.n	1000c336 <at_ble_event_get+0x566>
1000c294:	1c10      	adds	r0, r2, #0
1000c296:	4b4a      	ldr	r3, [pc, #296]	; (1000c3c0 <at_ble_event_get+0x5f0>)
1000c298:	1c2a      	adds	r2, r5, #0
1000c29a:	e794      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c29c:	1c10      	adds	r0, r2, #0
1000c29e:	4b48      	ldr	r3, [pc, #288]	; (1000c3c0 <at_ble_event_get+0x5f0>)
1000c2a0:	1c2a      	adds	r2, r5, #0
1000c2a2:	4798      	blx	r3
1000c2a4:	88a9      	ldrh	r1, [r5, #4]
1000c2a6:	1c04      	adds	r4, r0, #0
1000c2a8:	4b46      	ldr	r3, [pc, #280]	; (1000c3c4 <at_ble_event_get+0x5f4>)
1000c2aa:	8828      	ldrh	r0, [r5, #0]
1000c2ac:	4798      	blx	r3
1000c2ae:	e042      	b.n	1000c336 <at_ble_event_get+0x566>
1000c2b0:	1c10      	adds	r0, r2, #0
1000c2b2:	4b45      	ldr	r3, [pc, #276]	; (1000c3c8 <at_ble_event_get+0x5f8>)
1000c2b4:	1c2a      	adds	r2, r5, #0
1000c2b6:	4798      	blx	r3
1000c2b8:	2423      	movs	r4, #35	; 0x23
1000c2ba:	e03c      	b.n	1000c336 <at_ble_event_get+0x566>
1000c2bc:	1c10      	adds	r0, r2, #0
1000c2be:	4b43      	ldr	r3, [pc, #268]	; (1000c3cc <at_ble_event_get+0x5fc>)
1000c2c0:	1c2a      	adds	r2, r5, #0
1000c2c2:	e780      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c2c4:	0a12      	lsrs	r2, r2, #8
1000c2c6:	1c08      	adds	r0, r1, #0
1000c2c8:	802a      	strh	r2, [r5, #0]
1000c2ca:	1c29      	adds	r1, r5, #0
1000c2cc:	4b40      	ldr	r3, [pc, #256]	; (1000c3d0 <at_ble_event_get+0x600>)
1000c2ce:	e75e      	b.n	1000c18e <at_ble_event_get+0x3be>
1000c2d0:	1c10      	adds	r0, r2, #0
1000c2d2:	4b40      	ldr	r3, [pc, #256]	; (1000c3d4 <at_ble_event_get+0x604>)
1000c2d4:	1c2a      	adds	r2, r5, #0
1000c2d6:	e776      	b.n	1000c1c6 <at_ble_event_get+0x3f6>
1000c2d8:	1c08      	adds	r0, r1, #0
1000c2da:	4b3f      	ldr	r3, [pc, #252]	; (1000c3d8 <at_ble_event_get+0x608>)
1000c2dc:	1c29      	adds	r1, r5, #0
1000c2de:	4798      	blx	r3
1000c2e0:	243b      	movs	r4, #59	; 0x3b
1000c2e2:	e028      	b.n	1000c336 <at_ble_event_get+0x566>
1000c2e4:	1c10      	adds	r0, r2, #0
1000c2e6:	4b3d      	ldr	r3, [pc, #244]	; (1000c3dc <at_ble_event_get+0x60c>)
1000c2e8:	1c2a      	adds	r2, r5, #0
1000c2ea:	4798      	blx	r3
1000c2ec:	2418      	movs	r4, #24
1000c2ee:	e022      	b.n	1000c336 <at_ble_event_get+0x566>
1000c2f0:	1c10      	adds	r0, r2, #0
1000c2f2:	4b3b      	ldr	r3, [pc, #236]	; (1000c3e0 <at_ble_event_get+0x610>)
1000c2f4:	1c2a      	adds	r2, r5, #0
1000c2f6:	4798      	blx	r3
1000c2f8:	2420      	movs	r4, #32
1000c2fa:	e01c      	b.n	1000c336 <at_ble_event_get+0x566>
1000c2fc:	1c10      	adds	r0, r2, #0
1000c2fe:	4b39      	ldr	r3, [pc, #228]	; (1000c3e4 <at_ble_event_get+0x614>)
1000c300:	1c2a      	adds	r2, r5, #0
1000c302:	4798      	blx	r3
1000c304:	2433      	movs	r4, #51	; 0x33
1000c306:	e016      	b.n	1000c336 <at_ble_event_get+0x566>
1000c308:	1c10      	adds	r0, r2, #0
1000c30a:	4b37      	ldr	r3, [pc, #220]	; (1000c3e8 <at_ble_event_get+0x618>)
1000c30c:	1c2a      	adds	r2, r5, #0
1000c30e:	4798      	blx	r3
1000c310:	2430      	movs	r4, #48	; 0x30
1000c312:	e010      	b.n	1000c336 <at_ble_event_get+0x566>
1000c314:	1c10      	adds	r0, r2, #0
1000c316:	4b35      	ldr	r3, [pc, #212]	; (1000c3ec <at_ble_event_get+0x61c>)
1000c318:	1c2a      	adds	r2, r5, #0
1000c31a:	4798      	blx	r3
1000c31c:	2434      	movs	r4, #52	; 0x34
1000c31e:	e00a      	b.n	1000c336 <at_ble_event_get+0x566>
1000c320:	1c10      	adds	r0, r2, #0
1000c322:	4b33      	ldr	r3, [pc, #204]	; (1000c3f0 <at_ble_event_get+0x620>)
1000c324:	1c2a      	adds	r2, r5, #0
1000c326:	4798      	blx	r3
1000c328:	2435      	movs	r4, #53	; 0x35
1000c32a:	e004      	b.n	1000c336 <at_ble_event_get+0x566>
1000c32c:	1c10      	adds	r0, r2, #0
1000c32e:	4b31      	ldr	r3, [pc, #196]	; (1000c3f4 <at_ble_event_get+0x624>)
1000c330:	1c2a      	adds	r2, r5, #0
1000c332:	4798      	blx	r3
1000c334:	2432      	movs	r4, #50	; 0x32
1000c336:	9b01      	ldr	r3, [sp, #4]
1000c338:	701c      	strb	r4, [r3, #0]
1000c33a:	2400      	movs	r4, #0
1000c33c:	e59c      	b.n	1000be78 <at_ble_event_get+0xa8>
1000c33e:	24d0      	movs	r4, #208	; 0xd0
1000c340:	e59a      	b.n	1000be78 <at_ble_event_get+0xa8>
1000c342:	2abb      	cmp	r2, #187	; 0xbb
1000c344:	d000      	beq.n	1000c348 <at_ble_event_get+0x578>
1000c346:	e69e      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c348:	e7f5      	b.n	1000c336 <at_ble_event_get+0x566>
1000c34a:	2c00      	cmp	r4, #0
1000c34c:	d000      	beq.n	1000c350 <at_ble_event_get+0x580>
1000c34e:	e593      	b.n	1000be78 <at_ble_event_get+0xa8>
1000c350:	e699      	b.n	1000c086 <at_ble_event_get+0x2b6>
1000c352:	1c20      	adds	r0, r4, #0
1000c354:	b005      	add	sp, #20
1000c356:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c358:	1000dfc5 	.word	0x1000dfc5
1000c35c:	1000e1d1 	.word	0x1000e1d1
1000c360:	1000e1f5 	.word	0x1000e1f5
1000c364:	1000d185 	.word	0x1000d185
1000c368:	1000d9c5 	.word	0x1000d9c5
1000c36c:	1000da41 	.word	0x1000da41
1000c370:	1000d43d 	.word	0x1000d43d
1000c374:	1000d4d9 	.word	0x1000d4d9
1000c378:	1000d5b1 	.word	0x1000d5b1
1000c37c:	1000d7f9 	.word	0x1000d7f9
1000c380:	1000d899 	.word	0x1000d899
1000c384:	1000d951 	.word	0x1000d951
1000c388:	1000d979 	.word	0x1000d979
1000c38c:	1000d98f 	.word	0x1000d98f
1000c390:	1000da59 	.word	0x1000da59
1000c394:	1000da87 	.word	0x1000da87
1000c398:	1000da9d 	.word	0x1000da9d
1000c39c:	1000dac7 	.word	0x1000dac7
1000c3a0:	1000d8f5 	.word	0x1000d8f5
1000c3a4:	1000d91f 	.word	0x1000d91f
1000c3a8:	1000cc1d 	.word	0x1000cc1d
1000c3ac:	1000cc49 	.word	0x1000cc49
1000c3b0:	1000e42d 	.word	0x1000e42d
1000c3b4:	1000e469 	.word	0x1000e469
1000c3b8:	1000e4b1 	.word	0x1000e4b1
1000c3bc:	1000e4f5 	.word	0x1000e4f5
1000c3c0:	1000e529 	.word	0x1000e529
1000c3c4:	1000e3ed 	.word	0x1000e3ed
1000c3c8:	1000e5f5 	.word	0x1000e5f5
1000c3cc:	1000e57d 	.word	0x1000e57d
1000c3d0:	1000cb75 	.word	0x1000cb75
1000c3d4:	1000cbe1 	.word	0x1000cbe1
1000c3d8:	1000cba5 	.word	0x1000cba5
1000c3dc:	1000e605 	.word	0x1000e605
1000c3e0:	1000e645 	.word	0x1000e645
1000c3e4:	1000e791 	.word	0x1000e791
1000c3e8:	1000e79b 	.word	0x1000e79b
1000c3ec:	1000e7a1 	.word	0x1000e7a1
1000c3f0:	1000e7a7 	.word	0x1000e7a7
1000c3f4:	1000e7b3 	.word	0x1000e7b3

1000c3f8 <internal_event_flush>:
1000c3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c3fa:	490e      	ldr	r1, [pc, #56]	; (1000c434 <internal_event_flush+0x3c>)
1000c3fc:	2400      	movs	r4, #0
1000c3fe:	680b      	ldr	r3, [r1, #0]
1000c400:	1c0f      	adds	r7, r1, #0
1000c402:	1c1e      	adds	r6, r3, #0
1000c404:	4a0c      	ldr	r2, [pc, #48]	; (1000c438 <internal_event_flush+0x40>)
1000c406:	6815      	ldr	r5, [r2, #0]
1000c408:	9201      	str	r2, [sp, #4]
1000c40a:	2b00      	cmp	r3, #0
1000c40c:	d00e      	beq.n	1000c42c <internal_event_flush+0x34>
1000c40e:	889a      	ldrh	r2, [r3, #4]
1000c410:	6819      	ldr	r1, [r3, #0]
1000c412:	4282      	cmp	r2, r0
1000c414:	d107      	bne.n	1000c426 <internal_event_flush+0x2e>
1000c416:	2c00      	cmp	r4, #0
1000c418:	d001      	beq.n	1000c41e <internal_event_flush+0x26>
1000c41a:	6021      	str	r1, [r4, #0]
1000c41c:	e000      	b.n	1000c420 <internal_event_flush+0x28>
1000c41e:	1c0e      	adds	r6, r1, #0
1000c420:	601d      	str	r5, [r3, #0]
1000c422:	1c1d      	adds	r5, r3, #0
1000c424:	1c23      	adds	r3, r4, #0
1000c426:	1c1c      	adds	r4, r3, #0
1000c428:	1c0b      	adds	r3, r1, #0
1000c42a:	e7ee      	b.n	1000c40a <internal_event_flush+0x12>
1000c42c:	9b01      	ldr	r3, [sp, #4]
1000c42e:	603e      	str	r6, [r7, #0]
1000c430:	601d      	str	r5, [r3, #0]
1000c432:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c434:	10012540 	.word	0x10012540
1000c438:	10012544 	.word	0x10012544

1000c43c <internal_conn_flush>:
1000c43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c43e:	4a12      	ldr	r2, [pc, #72]	; (1000c488 <internal_conn_flush+0x4c>)
1000c440:	9000      	str	r0, [sp, #0]
1000c442:	6813      	ldr	r3, [r2, #0]
1000c444:	4811      	ldr	r0, [pc, #68]	; (1000c48c <internal_conn_flush+0x50>)
1000c446:	1c1f      	adds	r7, r3, #0
1000c448:	2100      	movs	r1, #0
1000c44a:	4684      	mov	ip, r0
1000c44c:	6804      	ldr	r4, [r0, #0]
1000c44e:	9201      	str	r2, [sp, #4]
1000c450:	2b00      	cmp	r3, #0
1000c452:	d014      	beq.n	1000c47e <internal_conn_flush+0x42>
1000c454:	88d8      	ldrh	r0, [r3, #6]
1000c456:	9a00      	ldr	r2, [sp, #0]
1000c458:	681d      	ldr	r5, [r3, #0]
1000c45a:	0a06      	lsrs	r6, r0, #8
1000c45c:	4296      	cmp	r6, r2
1000c45e:	d10b      	bne.n	1000c478 <internal_conn_flush+0x3c>
1000c460:	26fd      	movs	r6, #253	; 0xfd
1000c462:	4006      	ands	r6, r0
1000c464:	2e0c      	cmp	r6, #12
1000c466:	d107      	bne.n	1000c478 <internal_conn_flush+0x3c>
1000c468:	2900      	cmp	r1, #0
1000c46a:	d001      	beq.n	1000c470 <internal_conn_flush+0x34>
1000c46c:	600d      	str	r5, [r1, #0]
1000c46e:	e000      	b.n	1000c472 <internal_conn_flush+0x36>
1000c470:	1c2f      	adds	r7, r5, #0
1000c472:	601c      	str	r4, [r3, #0]
1000c474:	1c1c      	adds	r4, r3, #0
1000c476:	1c0b      	adds	r3, r1, #0
1000c478:	1c19      	adds	r1, r3, #0
1000c47a:	1c2b      	adds	r3, r5, #0
1000c47c:	e7e8      	b.n	1000c450 <internal_conn_flush+0x14>
1000c47e:	9b01      	ldr	r3, [sp, #4]
1000c480:	601f      	str	r7, [r3, #0]
1000c482:	4663      	mov	r3, ip
1000c484:	601c      	str	r4, [r3, #0]
1000c486:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c488:	10012540 	.word	0x10012540
1000c48c:	10012544 	.word	0x10012544

1000c490 <at_ble_device_name_set>:
1000c490:	b530      	push	{r4, r5, lr}
1000c492:	23cf      	movs	r3, #207	; 0xcf
1000c494:	2800      	cmp	r0, #0
1000c496:	d010      	beq.n	1000c4ba <at_ble_device_name_set+0x2a>
1000c498:	1e4a      	subs	r2, r1, #1
1000c49a:	2a1f      	cmp	r2, #31
1000c49c:	d80d      	bhi.n	1000c4ba <at_ble_device_name_set+0x2a>
1000c49e:	4a08      	ldr	r2, [pc, #32]	; (1000c4c0 <at_ble_device_name_set+0x30>)
1000c4a0:	1c13      	adds	r3, r2, #0
1000c4a2:	33aa      	adds	r3, #170	; 0xaa
1000c4a4:	8019      	strh	r1, [r3, #0]
1000c4a6:	2300      	movs	r3, #0
1000c4a8:	1c1c      	adds	r4, r3, #0
1000c4aa:	5cc5      	ldrb	r5, [r0, r3]
1000c4ac:	34ac      	adds	r4, #172	; 0xac
1000c4ae:	3301      	adds	r3, #1
1000c4b0:	5515      	strb	r5, [r2, r4]
1000c4b2:	b2dc      	uxtb	r4, r3
1000c4b4:	428c      	cmp	r4, r1
1000c4b6:	d3f7      	bcc.n	1000c4a8 <at_ble_device_name_set+0x18>
1000c4b8:	2300      	movs	r3, #0
1000c4ba:	1c18      	adds	r0, r3, #0
1000c4bc:	bd30      	pop	{r4, r5, pc}
1000c4be:	46c0      	nop			; (mov r8, r8)
1000c4c0:	100132da 	.word	0x100132da

1000c4c4 <at_ble_addr_get>:
1000c4c4:	b510      	push	{r4, lr}
1000c4c6:	1c04      	adds	r4, r0, #0
1000c4c8:	20cf      	movs	r0, #207	; 0xcf
1000c4ca:	2c00      	cmp	r4, #0
1000c4cc:	d006      	beq.n	1000c4dc <at_ble_addr_get+0x18>
1000c4ce:	4b04      	ldr	r3, [pc, #16]	; (1000c4e0 <at_ble_addr_get+0x1c>)
1000c4d0:	38ce      	subs	r0, #206	; 0xce
1000c4d2:	1c21      	adds	r1, r4, #0
1000c4d4:	4798      	blx	r3
1000c4d6:	4b03      	ldr	r3, [pc, #12]	; (1000c4e4 <at_ble_addr_get+0x20>)
1000c4d8:	791b      	ldrb	r3, [r3, #4]
1000c4da:	7023      	strb	r3, [r4, #0]
1000c4dc:	bd10      	pop	{r4, pc}
1000c4de:	46c0      	nop			; (mov r8, r8)
1000c4e0:	1000dc61 	.word	0x1000dc61
1000c4e4:	100132da 	.word	0x100132da

1000c4e8 <at_ble_set_dev_config>:
1000c4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4ea:	7906      	ldrb	r6, [r0, #4]
1000c4ec:	b089      	sub	sp, #36	; 0x24
1000c4ee:	25cf      	movs	r5, #207	; 0xcf
1000c4f0:	2e03      	cmp	r6, #3
1000c4f2:	d838      	bhi.n	1000c566 <at_ble_set_dev_config+0x7e>
1000c4f4:	7803      	ldrb	r3, [r0, #0]
1000c4f6:	3511      	adds	r5, #17
1000c4f8:	2b0f      	cmp	r3, #15
1000c4fa:	d834      	bhi.n	1000c566 <at_ble_set_dev_config+0x7e>
1000c4fc:	2380      	movs	r3, #128	; 0x80
1000c4fe:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c500:	3d11      	subs	r5, #17
1000c502:	009b      	lsls	r3, r3, #2
1000c504:	429f      	cmp	r7, r3
1000c506:	d82e      	bhi.n	1000c566 <at_ble_set_dev_config+0x7e>
1000c508:	7fc5      	ldrb	r5, [r0, #31]
1000c50a:	7f83      	ldrb	r3, [r0, #30]
1000c50c:	01ad      	lsls	r5, r5, #6
1000c50e:	015b      	lsls	r3, r3, #5
1000c510:	431d      	orrs	r5, r3
1000c512:	7ec3      	ldrb	r3, [r0, #27]
1000c514:	431d      	orrs	r5, r3
1000c516:	7f43      	ldrb	r3, [r0, #29]
1000c518:	011b      	lsls	r3, r3, #4
1000c51a:	431d      	orrs	r5, r3
1000c51c:	7f03      	ldrb	r3, [r0, #28]
1000c51e:	009b      	lsls	r3, r3, #2
1000c520:	431d      	orrs	r5, r3
1000c522:	4b12      	ldr	r3, [pc, #72]	; (1000c56c <at_ble_set_dev_config+0x84>)
1000c524:	b2ed      	uxtb	r5, r5
1000c526:	711e      	strb	r6, [r3, #4]
1000c528:	7903      	ldrb	r3, [r0, #4]
1000c52a:	3b02      	subs	r3, #2
1000c52c:	2b01      	cmp	r3, #1
1000c52e:	d801      	bhi.n	1000c534 <at_ble_set_dev_config+0x4c>
1000c530:	2302      	movs	r3, #2
1000c532:	7103      	strb	r3, [r0, #4]
1000c534:	1c04      	adds	r4, r0, #0
1000c536:	1c23      	adds	r3, r4, #0
1000c538:	330b      	adds	r3, #11
1000c53a:	8861      	ldrh	r1, [r4, #2]
1000c53c:	9307      	str	r3, [sp, #28]
1000c53e:	7923      	ldrb	r3, [r4, #4]
1000c540:	7800      	ldrb	r0, [r0, #0]
1000c542:	9300      	str	r3, [sp, #0]
1000c544:	9501      	str	r5, [sp, #4]
1000c546:	8c25      	ldrh	r5, [r4, #32]
1000c548:	1d62      	adds	r2, r4, #5
1000c54a:	9502      	str	r5, [sp, #8]
1000c54c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c54e:	9b07      	ldr	r3, [sp, #28]
1000c550:	9503      	str	r5, [sp, #12]
1000c552:	9704      	str	r7, [sp, #16]
1000c554:	4d06      	ldr	r5, [pc, #24]	; (1000c570 <at_ble_set_dev_config+0x88>)
1000c556:	47a8      	blx	r5
1000c558:	7126      	strb	r6, [r4, #4]
1000c55a:	1c05      	adds	r5, r0, #0
1000c55c:	1c21      	adds	r1, r4, #0
1000c55e:	4803      	ldr	r0, [pc, #12]	; (1000c56c <at_ble_set_dev_config+0x84>)
1000c560:	2226      	movs	r2, #38	; 0x26
1000c562:	4b04      	ldr	r3, [pc, #16]	; (1000c574 <at_ble_set_dev_config+0x8c>)
1000c564:	4798      	blx	r3
1000c566:	1c28      	adds	r0, r5, #0
1000c568:	b009      	add	sp, #36	; 0x24
1000c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c56c:	100132da 	.word	0x100132da
1000c570:	1000db59 	.word	0x1000db59
1000c574:	1000f8db 	.word	0x1000f8db

1000c578 <at_ble_init>:
1000c578:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c57a:	b087      	sub	sp, #28
1000c57c:	af03      	add	r7, sp, #12
1000c57e:	494d      	ldr	r1, [pc, #308]	; (1000c6b4 <at_ble_init+0x13c>)
1000c580:	1c04      	adds	r4, r0, #0
1000c582:	220b      	movs	r2, #11
1000c584:	4b4c      	ldr	r3, [pc, #304]	; (1000c6b8 <at_ble_init+0x140>)
1000c586:	1c38      	adds	r0, r7, #0
1000c588:	4798      	blx	r3
1000c58a:	2205      	movs	r2, #5
1000c58c:	4b4b      	ldr	r3, [pc, #300]	; (1000c6bc <at_ble_init+0x144>)
1000c58e:	801a      	strh	r2, [r3, #0]
1000c590:	2300      	movs	r3, #0
1000c592:	4a4b      	ldr	r2, [pc, #300]	; (1000c6c0 <at_ble_init+0x148>)
1000c594:	6013      	str	r3, [r2, #0]
1000c596:	4a4b      	ldr	r2, [pc, #300]	; (1000c6c4 <at_ble_init+0x14c>)
1000c598:	7013      	strb	r3, [r2, #0]
1000c59a:	4a4b      	ldr	r2, [pc, #300]	; (1000c6c8 <at_ble_init+0x150>)
1000c59c:	7013      	strb	r3, [r2, #0]
1000c59e:	4b4b      	ldr	r3, [pc, #300]	; (1000c6cc <at_ble_init+0x154>)
1000c5a0:	4798      	blx	r3
1000c5a2:	4b4b      	ldr	r3, [pc, #300]	; (1000c6d0 <at_ble_init+0x158>)
1000c5a4:	4798      	blx	r3
1000c5a6:	4b4b      	ldr	r3, [pc, #300]	; (1000c6d4 <at_ble_init+0x15c>)
1000c5a8:	4798      	blx	r3
1000c5aa:	4b4b      	ldr	r3, [pc, #300]	; (1000c6d8 <at_ble_init+0x160>)
1000c5ac:	4798      	blx	r3
1000c5ae:	2c00      	cmp	r4, #0
1000c5b0:	d009      	beq.n	1000c5c6 <at_ble_init+0x4e>
1000c5b2:	6820      	ldr	r0, [r4, #0]
1000c5b4:	2800      	cmp	r0, #0
1000c5b6:	d006      	beq.n	1000c5c6 <at_ble_init+0x4e>
1000c5b8:	6861      	ldr	r1, [r4, #4]
1000c5ba:	2900      	cmp	r1, #0
1000c5bc:	d101      	bne.n	1000c5c2 <at_ble_init+0x4a>
1000c5be:	26e2      	movs	r6, #226	; 0xe2
1000c5c0:	e075      	b.n	1000c6ae <at_ble_init+0x136>
1000c5c2:	4b46      	ldr	r3, [pc, #280]	; (1000c6dc <at_ble_init+0x164>)
1000c5c4:	4798      	blx	r3
1000c5c6:	4b46      	ldr	r3, [pc, #280]	; (1000c6e0 <at_ble_init+0x168>)
1000c5c8:	4798      	blx	r3
1000c5ca:	2801      	cmp	r0, #1
1000c5cc:	d8f7      	bhi.n	1000c5be <at_ble_init+0x46>
1000c5ce:	4845      	ldr	r0, [pc, #276]	; (1000c6e4 <at_ble_init+0x16c>)
1000c5d0:	4b45      	ldr	r3, [pc, #276]	; (1000c6e8 <at_ble_init+0x170>)
1000c5d2:	4798      	blx	r3
1000c5d4:	2800      	cmp	r0, #0
1000c5d6:	d1f2      	bne.n	1000c5be <at_ble_init+0x46>
1000c5d8:	4b44      	ldr	r3, [pc, #272]	; (1000c6ec <at_ble_init+0x174>)
1000c5da:	4798      	blx	r3
1000c5dc:	4b44      	ldr	r3, [pc, #272]	; (1000c6f0 <at_ble_init+0x178>)
1000c5de:	4798      	blx	r3
1000c5e0:	466b      	mov	r3, sp
1000c5e2:	2201      	movs	r2, #1
1000c5e4:	1cdc      	adds	r4, r3, #3
1000c5e6:	1c20      	adds	r0, r4, #0
1000c5e8:	a901      	add	r1, sp, #4
1000c5ea:	4252      	negs	r2, r2
1000c5ec:	4b41      	ldr	r3, [pc, #260]	; (1000c6f4 <at_ble_init+0x17c>)
1000c5ee:	4798      	blx	r3
1000c5f0:	2800      	cmp	r0, #0
1000c5f2:	d102      	bne.n	1000c5fa <at_ble_init+0x82>
1000c5f4:	7823      	ldrb	r3, [r4, #0]
1000c5f6:	2b39      	cmp	r3, #57	; 0x39
1000c5f8:	d1f2      	bne.n	1000c5e0 <at_ble_init+0x68>
1000c5fa:	4b3f      	ldr	r3, [pc, #252]	; (1000c6f8 <at_ble_init+0x180>)
1000c5fc:	4798      	blx	r3
1000c5fe:	1e06      	subs	r6, r0, #0
1000c600:	d155      	bne.n	1000c6ae <at_ble_init+0x136>
1000c602:	1c03      	adds	r3, r0, #0
1000c604:	2101      	movs	r1, #1
1000c606:	4a3d      	ldr	r2, [pc, #244]	; (1000c6fc <at_ble_init+0x184>)
1000c608:	4249      	negs	r1, r1
1000c60a:	189a      	adds	r2, r3, r2
1000c60c:	3312      	adds	r3, #18
1000c60e:	8151      	strh	r1, [r2, #10]
1000c610:	2b90      	cmp	r3, #144	; 0x90
1000c612:	d1f7      	bne.n	1000c604 <at_ble_init+0x8c>
1000c614:	4c3a      	ldr	r4, [pc, #232]	; (1000c700 <at_ble_init+0x188>)
1000c616:	3b81      	subs	r3, #129	; 0x81
1000c618:	7023      	strb	r3, [r4, #0]
1000c61a:	4b3a      	ldr	r3, [pc, #232]	; (1000c704 <at_ble_init+0x18c>)
1000c61c:	4a3a      	ldr	r2, [pc, #232]	; (1000c708 <at_ble_init+0x190>)
1000c61e:	8063      	strh	r3, [r4, #2]
1000c620:	2300      	movs	r3, #0
1000c622:	7123      	strb	r3, [r4, #4]
1000c624:	3301      	adds	r3, #1
1000c626:	1e58      	subs	r0, r3, #1
1000c628:	0119      	lsls	r1, r3, #4
1000c62a:	4301      	orrs	r1, r0
1000c62c:	3302      	adds	r3, #2
1000c62e:	7011      	strb	r1, [r2, #0]
1000c630:	3201      	adds	r2, #1
1000c632:	2b21      	cmp	r3, #33	; 0x21
1000c634:	d1f7      	bne.n	1000c626 <at_ble_init+0xae>
1000c636:	33e0      	adds	r3, #224	; 0xe0
1000c638:	33ff      	adds	r3, #255	; 0xff
1000c63a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c63c:	1c23      	adds	r3, r4, #0
1000c63e:	2500      	movs	r5, #0
1000c640:	3373      	adds	r3, #115	; 0x73
1000c642:	701d      	strb	r5, [r3, #0]
1000c644:	1c23      	adds	r3, r4, #0
1000c646:	3372      	adds	r3, #114	; 0x72
1000c648:	701d      	strb	r5, [r3, #0]
1000c64a:	1c23      	adds	r3, r4, #0
1000c64c:	3376      	adds	r3, #118	; 0x76
1000c64e:	701d      	strb	r5, [r3, #0]
1000c650:	1c23      	adds	r3, r4, #0
1000c652:	33cc      	adds	r3, #204	; 0xcc
1000c654:	801d      	strh	r5, [r3, #0]
1000c656:	1c22      	adds	r2, r4, #0
1000c658:	23a0      	movs	r3, #160	; 0xa0
1000c65a:	32d0      	adds	r2, #208	; 0xd0
1000c65c:	005b      	lsls	r3, r3, #1
1000c65e:	8013      	strh	r3, [r2, #0]
1000c660:	1c22      	adds	r2, r4, #0
1000c662:	32ce      	adds	r2, #206	; 0xce
1000c664:	8013      	strh	r3, [r2, #0]
1000c666:	1c23      	adds	r3, r4, #0
1000c668:	33d2      	adds	r3, #210	; 0xd2
1000c66a:	801d      	strh	r5, [r3, #0]
1000c66c:	22fa      	movs	r2, #250	; 0xfa
1000c66e:	1c23      	adds	r3, r4, #0
1000c670:	0052      	lsls	r2, r2, #1
1000c672:	33d4      	adds	r3, #212	; 0xd4
1000c674:	801a      	strh	r2, [r3, #0]
1000c676:	1c23      	adds	r3, r4, #0
1000c678:	33d6      	adds	r3, #214	; 0xd6
1000c67a:	701d      	strb	r5, [r3, #0]
1000c67c:	1c20      	adds	r0, r4, #0
1000c67e:	4b23      	ldr	r3, [pc, #140]	; (1000c70c <at_ble_init+0x194>)
1000c680:	76e5      	strb	r5, [r4, #27]
1000c682:	7725      	strb	r5, [r4, #28]
1000c684:	7765      	strb	r5, [r4, #29]
1000c686:	77a5      	strb	r5, [r4, #30]
1000c688:	77e5      	strb	r5, [r4, #31]
1000c68a:	8425      	strh	r5, [r4, #32]
1000c68c:	8465      	strh	r5, [r4, #34]	; 0x22
1000c68e:	4798      	blx	r3
1000c690:	1c23      	adds	r3, r4, #0
1000c692:	2207      	movs	r2, #7
1000c694:	3374      	adds	r3, #116	; 0x74
1000c696:	701a      	strb	r2, [r3, #0]
1000c698:	1c23      	adds	r3, r4, #0
1000c69a:	3204      	adds	r2, #4
1000c69c:	33aa      	adds	r3, #170	; 0xaa
1000c69e:	801a      	strh	r2, [r3, #0]
1000c6a0:	1c2b      	adds	r3, r5, #0
1000c6a2:	5d7a      	ldrb	r2, [r7, r5]
1000c6a4:	33ac      	adds	r3, #172	; 0xac
1000c6a6:	3501      	adds	r5, #1
1000c6a8:	54e2      	strb	r2, [r4, r3]
1000c6aa:	2d0b      	cmp	r5, #11
1000c6ac:	d1f8      	bne.n	1000c6a0 <at_ble_init+0x128>
1000c6ae:	1c30      	adds	r0, r6, #0
1000c6b0:	b007      	add	sp, #28
1000c6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c6b4:	100121fc 	.word	0x100121fc
1000c6b8:	1000f8db 	.word	0x1000f8db
1000c6bc:	10013248 	.word	0x10013248
1000c6c0:	100125e8 	.word	0x100125e8
1000c6c4:	10012550 	.word	0x10012550
1000c6c8:	10012315 	.word	0x10012315
1000c6cc:	1000e655 	.word	0x1000e655
1000c6d0:	1000c955 	.word	0x1000c955
1000c6d4:	1000c9f9 	.word	0x1000c9f9
1000c6d8:	1000cc11 	.word	0x1000cc11
1000c6dc:	1000ca2d 	.word	0x1000ca2d
1000c6e0:	1000aebd 	.word	0x1000aebd
1000c6e4:	1000ced1 	.word	0x1000ced1
1000c6e8:	1000b0bd 	.word	0x1000b0bd
1000c6ec:	1000cf69 	.word	0x1000cf69
1000c6f0:	1000bd11 	.word	0x1000bd11
1000c6f4:	1000bdd1 	.word	0x1000bdd1
1000c6f8:	1000dae9 	.word	0x1000dae9
1000c6fc:	1001324a 	.word	0x1001324a
1000c700:	100132da 	.word	0x100132da
1000c704:	00003a98 	.word	0x00003a98
1000c708:	100132e5 	.word	0x100132e5
1000c70c:	1000c4e9 	.word	0x1000c4e9

1000c710 <at_ble_addr_set>:
1000c710:	b538      	push	{r3, r4, r5, lr}
1000c712:	1c45      	adds	r5, r0, #1
1000c714:	1c03      	adds	r3, r0, #0
1000c716:	20cf      	movs	r0, #207	; 0xcf
1000c718:	2d00      	cmp	r5, #0
1000c71a:	d018      	beq.n	1000c74e <at_ble_addr_set+0x3e>
1000c71c:	781a      	ldrb	r2, [r3, #0]
1000c71e:	2a03      	cmp	r2, #3
1000c720:	d815      	bhi.n	1000c74e <at_ble_addr_set+0x3e>
1000c722:	2a01      	cmp	r2, #1
1000c724:	d102      	bne.n	1000c72c <at_ble_addr_set+0x1c>
1000c726:	785a      	ldrb	r2, [r3, #1]
1000c728:	2a00      	cmp	r2, #0
1000c72a:	d010      	beq.n	1000c74e <at_ble_addr_set+0x3e>
1000c72c:	1c1c      	adds	r4, r3, #0
1000c72e:	1c29      	adds	r1, r5, #0
1000c730:	2206      	movs	r2, #6
1000c732:	4b07      	ldr	r3, [pc, #28]	; (1000c750 <at_ble_addr_set+0x40>)
1000c734:	4807      	ldr	r0, [pc, #28]	; (1000c754 <at_ble_addr_set+0x44>)
1000c736:	4798      	blx	r3
1000c738:	7823      	ldrb	r3, [r4, #0]
1000c73a:	4807      	ldr	r0, [pc, #28]	; (1000c758 <at_ble_addr_set+0x48>)
1000c73c:	7103      	strb	r3, [r0, #4]
1000c73e:	4b07      	ldr	r3, [pc, #28]	; (1000c75c <at_ble_addr_set+0x4c>)
1000c740:	4798      	blx	r3
1000c742:	7823      	ldrb	r3, [r4, #0]
1000c744:	2b00      	cmp	r3, #0
1000c746:	d102      	bne.n	1000c74e <at_ble_addr_set+0x3e>
1000c748:	1c28      	adds	r0, r5, #0
1000c74a:	4b05      	ldr	r3, [pc, #20]	; (1000c760 <at_ble_addr_set+0x50>)
1000c74c:	4798      	blx	r3
1000c74e:	bd38      	pop	{r3, r4, r5, pc}
1000c750:	1000f8db 	.word	0x1000f8db
1000c754:	100132df 	.word	0x100132df
1000c758:	100132da 	.word	0x100132da
1000c75c:	1000c4e9 	.word	0x1000c4e9
1000c760:	1000cfe5 	.word	0x1000cfe5

1000c764 <at_ble_scan_start>:
1000c764:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c766:	b08d      	sub	sp, #52	; 0x34
1000c768:	1c06      	adds	r6, r0, #0
1000c76a:	a812      	add	r0, sp, #72	; 0x48
1000c76c:	7807      	ldrb	r7, [r0, #0]
1000c76e:	a813      	add	r0, sp, #76	; 0x4c
1000c770:	7800      	ldrb	r0, [r0, #0]
1000c772:	9007      	str	r0, [sp, #28]
1000c774:	a814      	add	r0, sp, #80	; 0x50
1000c776:	7800      	ldrb	r0, [r0, #0]
1000c778:	9008      	str	r0, [sp, #32]
1000c77a:	20cf      	movs	r0, #207	; 0xcf
1000c77c:	2f02      	cmp	r7, #2
1000c77e:	d82e      	bhi.n	1000c7de <at_ble_scan_start+0x7a>
1000c780:	42b1      	cmp	r1, r6
1000c782:	d82c      	bhi.n	1000c7de <at_ble_scan_start+0x7a>
1000c784:	2b01      	cmp	r3, #1
1000c786:	d82a      	bhi.n	1000c7de <at_ble_scan_start+0x7a>
1000c788:	1f0c      	subs	r4, r1, #4
1000c78a:	4d16      	ldr	r5, [pc, #88]	; (1000c7e4 <at_ble_scan_start+0x80>)
1000c78c:	b2a4      	uxth	r4, r4
1000c78e:	42ac      	cmp	r4, r5
1000c790:	d825      	bhi.n	1000c7de <at_ble_scan_start+0x7a>
1000c792:	1f34      	subs	r4, r6, #4
1000c794:	b2a4      	uxth	r4, r4
1000c796:	42ac      	cmp	r4, r5
1000c798:	d821      	bhi.n	1000c7de <at_ble_scan_start+0x7a>
1000c79a:	9c07      	ldr	r4, [sp, #28]
1000c79c:	2c00      	cmp	r4, #0
1000c79e:	d001      	beq.n	1000c7a4 <at_ble_scan_start+0x40>
1000c7a0:	2f02      	cmp	r7, #2
1000c7a2:	d11c      	bne.n	1000c7de <at_ble_scan_start+0x7a>
1000c7a4:	1c1c      	adds	r4, r3, #0
1000c7a6:	4b10      	ldr	r3, [pc, #64]	; (1000c7e8 <at_ble_scan_start+0x84>)
1000c7a8:	1c0d      	adds	r5, r1, #0
1000c7aa:	9209      	str	r2, [sp, #36]	; 0x24
1000c7ac:	4798      	blx	r3
1000c7ae:	4b0f      	ldr	r3, [pc, #60]	; (1000c7ec <at_ble_scan_start+0x88>)
1000c7b0:	1c01      	adds	r1, r0, #0
1000c7b2:	885a      	ldrh	r2, [r3, #2]
1000c7b4:	9b07      	ldr	r3, [sp, #28]
1000c7b6:	4260      	negs	r0, r4
1000c7b8:	4160      	adcs	r0, r4
1000c7ba:	9303      	str	r3, [sp, #12]
1000c7bc:	9b08      	ldr	r3, [sp, #32]
1000c7be:	9702      	str	r7, [sp, #8]
1000c7c0:	9304      	str	r3, [sp, #16]
1000c7c2:	2364      	movs	r3, #100	; 0x64
1000c7c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000c7c6:	ac04      	add	r4, sp, #16
1000c7c8:	435f      	muls	r7, r3
1000c7ca:	3b4b      	subs	r3, #75	; 0x4b
1000c7cc:	b2bf      	uxth	r7, r7
1000c7ce:	3011      	adds	r0, #17
1000c7d0:	191b      	adds	r3, r3, r4
1000c7d2:	9600      	str	r6, [sp, #0]
1000c7d4:	9501      	str	r5, [sp, #4]
1000c7d6:	9705      	str	r7, [sp, #20]
1000c7d8:	4c05      	ldr	r4, [pc, #20]	; (1000c7f0 <at_ble_scan_start+0x8c>)
1000c7da:	47a0      	blx	r4
1000c7dc:	2000      	movs	r0, #0
1000c7de:	b00d      	add	sp, #52	; 0x34
1000c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7e2:	46c0      	nop			; (mov r8, r8)
1000c7e4:	00003ffc 	.word	0x00003ffc
1000c7e8:	1000df15 	.word	0x1000df15
1000c7ec:	100132da 	.word	0x100132da
1000c7f0:	1000df2d 	.word	0x1000df2d

1000c7f4 <at_ble_scan_stop>:
1000c7f4:	b510      	push	{r4, lr}
1000c7f6:	4b05      	ldr	r3, [pc, #20]	; (1000c80c <at_ble_scan_stop+0x18>)
1000c7f8:	4798      	blx	r3
1000c7fa:	1e04      	subs	r4, r0, #0
1000c7fc:	d103      	bne.n	1000c806 <at_ble_scan_stop+0x12>
1000c7fe:	20d1      	movs	r0, #209	; 0xd1
1000c800:	4b03      	ldr	r3, [pc, #12]	; (1000c810 <at_ble_scan_stop+0x1c>)
1000c802:	0100      	lsls	r0, r0, #4
1000c804:	4798      	blx	r3
1000c806:	1c20      	adds	r0, r4, #0
1000c808:	bd10      	pop	{r4, pc}
1000c80a:	46c0      	nop			; (mov r8, r8)
1000c80c:	1000dd41 	.word	0x1000dd41
1000c810:	1000c3f9 	.word	0x1000c3f9

1000c814 <at_ble_connect>:
1000c814:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c816:	b091      	sub	sp, #68	; 0x44
1000c818:	930d      	str	r3, [sp, #52]	; 0x34
1000c81a:	4b2d      	ldr	r3, [pc, #180]	; (1000c8d0 <at_ble_connect+0xbc>)
1000c81c:	900a      	str	r0, [sp, #40]	; 0x28
1000c81e:	910b      	str	r1, [sp, #44]	; 0x2c
1000c820:	920c      	str	r2, [sp, #48]	; 0x30
1000c822:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000c824:	4798      	blx	r3
1000c826:	254b      	movs	r5, #75	; 0x4b
1000c828:	2807      	cmp	r0, #7
1000c82a:	d84d      	bhi.n	1000c8c8 <at_ble_connect+0xb4>
1000c82c:	8863      	ldrh	r3, [r4, #2]
1000c82e:	4a29      	ldr	r2, [pc, #164]	; (1000c8d4 <at_ble_connect+0xc0>)
1000c830:	3b06      	subs	r3, #6
1000c832:	b29b      	uxth	r3, r3
1000c834:	3584      	adds	r5, #132	; 0x84
1000c836:	4293      	cmp	r3, r2
1000c838:	d846      	bhi.n	1000c8c8 <at_ble_connect+0xb4>
1000c83a:	8823      	ldrh	r3, [r4, #0]
1000c83c:	3b06      	subs	r3, #6
1000c83e:	b29b      	uxth	r3, r3
1000c840:	4293      	cmp	r3, r2
1000c842:	d841      	bhi.n	1000c8c8 <at_ble_connect+0xb4>
1000c844:	88e3      	ldrh	r3, [r4, #6]
1000c846:	4a24      	ldr	r2, [pc, #144]	; (1000c8d8 <at_ble_connect+0xc4>)
1000c848:	3b0a      	subs	r3, #10
1000c84a:	b29b      	uxth	r3, r3
1000c84c:	4293      	cmp	r3, r2
1000c84e:	d83b      	bhi.n	1000c8c8 <at_ble_connect+0xb4>
1000c850:	23f4      	movs	r3, #244	; 0xf4
1000c852:	88a2      	ldrh	r2, [r4, #4]
1000c854:	33ff      	adds	r3, #255	; 0xff
1000c856:	429a      	cmp	r2, r3
1000c858:	d836      	bhi.n	1000c8c8 <at_ble_connect+0xb4>
1000c85a:	af0e      	add	r7, sp, #56	; 0x38
1000c85c:	4b1f      	ldr	r3, [pc, #124]	; (1000c8dc <at_ble_connect+0xc8>)
1000c85e:	2001      	movs	r0, #1
1000c860:	1c39      	adds	r1, r7, #0
1000c862:	4798      	blx	r3
1000c864:	4e1e      	ldr	r6, [pc, #120]	; (1000c8e0 <at_ble_connect+0xcc>)
1000c866:	1c05      	adds	r5, r0, #0
1000c868:	7933      	ldrb	r3, [r6, #4]
1000c86a:	703b      	strb	r3, [r7, #0]
1000c86c:	2800      	cmp	r0, #0
1000c86e:	d12a      	bne.n	1000c8c6 <at_ble_connect+0xb2>
1000c870:	4b1c      	ldr	r3, [pc, #112]	; (1000c8e4 <at_ble_connect+0xd0>)
1000c872:	4798      	blx	r3
1000c874:	3675      	adds	r6, #117	; 0x75
1000c876:	7833      	ldrb	r3, [r6, #0]
1000c878:	1c01      	adds	r1, r0, #0
1000c87a:	3b01      	subs	r3, #1
1000c87c:	2b01      	cmp	r3, #1
1000c87e:	d901      	bls.n	1000c884 <at_ble_connect+0x70>
1000c880:	2302      	movs	r3, #2
1000c882:	7033      	strb	r3, [r6, #0]
1000c884:	4b16      	ldr	r3, [pc, #88]	; (1000c8e0 <at_ble_connect+0xcc>)
1000c886:	1c1a      	adds	r2, r3, #0
1000c888:	3275      	adds	r2, #117	; 0x75
1000c88a:	7810      	ldrb	r0, [r2, #0]
1000c88c:	885a      	ldrh	r2, [r3, #2]
1000c88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000c890:	3012      	adds	r0, #18
1000c892:	9300      	str	r3, [sp, #0]
1000c894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c896:	b2c0      	uxtb	r0, r0
1000c898:	9301      	str	r3, [sp, #4]
1000c89a:	8823      	ldrh	r3, [r4, #0]
1000c89c:	9302      	str	r3, [sp, #8]
1000c89e:	8863      	ldrh	r3, [r4, #2]
1000c8a0:	9303      	str	r3, [sp, #12]
1000c8a2:	88a3      	ldrh	r3, [r4, #4]
1000c8a4:	9304      	str	r3, [sp, #16]
1000c8a6:	88e3      	ldrh	r3, [r4, #6]
1000c8a8:	9305      	str	r3, [sp, #20]
1000c8aa:	8923      	ldrh	r3, [r4, #8]
1000c8ac:	9306      	str	r3, [sp, #24]
1000c8ae:	8963      	ldrh	r3, [r4, #10]
1000c8b0:	ac04      	add	r4, sp, #16
1000c8b2:	9307      	str	r3, [sp, #28]
1000c8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c8b6:	9308      	str	r3, [sp, #32]
1000c8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c8ba:	9309      	str	r3, [sp, #36]	; 0x24
1000c8bc:	2329      	movs	r3, #41	; 0x29
1000c8be:	191b      	adds	r3, r3, r4
1000c8c0:	4c09      	ldr	r4, [pc, #36]	; (1000c8e8 <at_ble_connect+0xd4>)
1000c8c2:	47a0      	blx	r4
1000c8c4:	e000      	b.n	1000c8c8 <at_ble_connect+0xb4>
1000c8c6:	25e2      	movs	r5, #226	; 0xe2
1000c8c8:	1c28      	adds	r0, r5, #0
1000c8ca:	b011      	add	sp, #68	; 0x44
1000c8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c8ce:	46c0      	nop			; (mov r8, r8)
1000c8d0:	1000d15d 	.word	0x1000d15d
1000c8d4:	00000c7a 	.word	0x00000c7a
1000c8d8:	00000c76 	.word	0x00000c76
1000c8dc:	1000dc61 	.word	0x1000dc61
1000c8e0:	100132da 	.word	0x100132da
1000c8e4:	1000df15 	.word	0x1000df15
1000c8e8:	1000e04d 	.word	0x1000e04d

1000c8ec <at_ble_disconnect>:
1000c8ec:	b538      	push	{r3, r4, r5, lr}
1000c8ee:	1c04      	adds	r4, r0, #0
1000c8f0:	4b04      	ldr	r3, [pc, #16]	; (1000c904 <at_ble_disconnect+0x18>)
1000c8f2:	1c08      	adds	r0, r1, #0
1000c8f4:	1c21      	adds	r1, r4, #0
1000c8f6:	4798      	blx	r3
1000c8f8:	1c05      	adds	r5, r0, #0
1000c8fa:	4b03      	ldr	r3, [pc, #12]	; (1000c908 <at_ble_disconnect+0x1c>)
1000c8fc:	1c20      	adds	r0, r4, #0
1000c8fe:	4798      	blx	r3
1000c900:	1c28      	adds	r0, r5, #0
1000c902:	bd38      	pop	{r3, r4, r5, pc}
1000c904:	1000d3f9 	.word	0x1000d3f9
1000c908:	1000c43d 	.word	0x1000c43d

1000c90c <at_ble_conn_update_reply>:
1000c90c:	b510      	push	{r4, lr}
1000c90e:	4c01      	ldr	r4, [pc, #4]	; (1000c914 <at_ble_conn_update_reply+0x8>)
1000c910:	47a0      	blx	r4
1000c912:	bd10      	pop	{r4, pc}
1000c914:	1000d8a9 	.word	0x1000d8a9

1000c918 <at_ble_random_address_resolve>:
1000c918:	b510      	push	{r4, lr}
1000c91a:	23cf      	movs	r3, #207	; 0xcf
1000c91c:	2800      	cmp	r0, #0
1000c91e:	d00a      	beq.n	1000c936 <at_ble_random_address_resolve+0x1e>
1000c920:	2900      	cmp	r1, #0
1000c922:	d008      	beq.n	1000c936 <at_ble_random_address_resolve+0x1e>
1000c924:	2a00      	cmp	r2, #0
1000c926:	d006      	beq.n	1000c936 <at_ble_random_address_resolve+0x1e>
1000c928:	780c      	ldrb	r4, [r1, #0]
1000c92a:	2c02      	cmp	r4, #2
1000c92c:	d103      	bne.n	1000c936 <at_ble_random_address_resolve+0x1e>
1000c92e:	4b03      	ldr	r3, [pc, #12]	; (1000c93c <at_ble_random_address_resolve+0x24>)
1000c930:	3101      	adds	r1, #1
1000c932:	4798      	blx	r3
1000c934:	2300      	movs	r3, #0
1000c936:	1c18      	adds	r0, r3, #0
1000c938:	bd10      	pop	{r4, pc}
1000c93a:	46c0      	nop			; (mov r8, r8)
1000c93c:	1000e169 	.word	0x1000e169

1000c940 <at_ble_uuid_len2type>:
1000c940:	1e83      	subs	r3, r0, #2
1000c942:	b2db      	uxtb	r3, r3
1000c944:	2003      	movs	r0, #3
1000c946:	2b0e      	cmp	r3, #14
1000c948:	d801      	bhi.n	1000c94e <at_ble_uuid_len2type+0xe>
1000c94a:	4a01      	ldr	r2, [pc, #4]	; (1000c950 <at_ble_uuid_len2type+0x10>)
1000c94c:	5cd0      	ldrb	r0, [r2, r3]
1000c94e:	4770      	bx	lr
1000c950:	10012207 	.word	0x10012207

1000c954 <init_gatt_client_module>:
1000c954:	2200      	movs	r2, #0
1000c956:	4b01      	ldr	r3, [pc, #4]	; (1000c95c <init_gatt_client_module+0x8>)
1000c958:	801a      	strh	r2, [r3, #0]
1000c95a:	4770      	bx	lr
1000c95c:	10012548 	.word	0x10012548

1000c960 <at_ble_primary_service_discover_all>:
1000c960:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c962:	24cf      	movs	r4, #207	; 0xcf
1000c964:	2900      	cmp	r1, #0
1000c966:	d00a      	beq.n	1000c97e <at_ble_primary_service_discover_all+0x1e>
1000c968:	428a      	cmp	r2, r1
1000c96a:	d308      	bcc.n	1000c97e <at_ble_primary_service_discover_all+0x1e>
1000c96c:	2400      	movs	r4, #0
1000c96e:	1c13      	adds	r3, r2, #0
1000c970:	9001      	str	r0, [sp, #4]
1000c972:	1c0a      	adds	r2, r1, #0
1000c974:	9400      	str	r4, [sp, #0]
1000c976:	2002      	movs	r0, #2
1000c978:	1c21      	adds	r1, r4, #0
1000c97a:	4d02      	ldr	r5, [pc, #8]	; (1000c984 <at_ble_primary_service_discover_all+0x24>)
1000c97c:	47a8      	blx	r5
1000c97e:	1c20      	adds	r0, r4, #0
1000c980:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c982:	46c0      	nop			; (mov r8, r8)
1000c984:	1000e35d 	.word	0x1000e35d

1000c988 <db_searchATT>:
1000c988:	b570      	push	{r4, r5, r6, lr}
1000c98a:	1c05      	adds	r5, r0, #0
1000c98c:	2400      	movs	r4, #0
1000c98e:	4b0c      	ldr	r3, [pc, #48]	; (1000c9c0 <db_searchATT+0x38>)
1000c990:	6819      	ldr	r1, [r3, #0]
1000c992:	4b0c      	ldr	r3, [pc, #48]	; (1000c9c4 <db_searchATT+0x3c>)
1000c994:	681e      	ldr	r6, [r3, #0]
1000c996:	428c      	cmp	r4, r1
1000c998:	dc10      	bgt.n	1000c9bc <db_searchATT+0x34>
1000c99a:	200c      	movs	r0, #12
1000c99c:	1863      	adds	r3, r4, r1
1000c99e:	0fda      	lsrs	r2, r3, #31
1000c9a0:	18d3      	adds	r3, r2, r3
1000c9a2:	1c02      	adds	r2, r0, #0
1000c9a4:	105b      	asrs	r3, r3, #1
1000c9a6:	435a      	muls	r2, r3
1000c9a8:	18b0      	adds	r0, r6, r2
1000c9aa:	8802      	ldrh	r2, [r0, #0]
1000c9ac:	42aa      	cmp	r2, r5
1000c9ae:	d201      	bcs.n	1000c9b4 <db_searchATT+0x2c>
1000c9b0:	1e59      	subs	r1, r3, #1
1000c9b2:	e7f0      	b.n	1000c996 <db_searchATT+0xe>
1000c9b4:	42aa      	cmp	r2, r5
1000c9b6:	d902      	bls.n	1000c9be <db_searchATT+0x36>
1000c9b8:	1c5c      	adds	r4, r3, #1
1000c9ba:	e7ec      	b.n	1000c996 <db_searchATT+0xe>
1000c9bc:	2000      	movs	r0, #0
1000c9be:	bd70      	pop	{r4, r5, r6, pc}
1000c9c0:	1001255c 	.word	0x1001255c
1000c9c4:	10012554 	.word	0x10012554

1000c9c8 <at_ble_read_authorize_reply.part.2>:
1000c9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c9ca:	4b09      	ldr	r3, [pc, #36]	; (1000c9f0 <at_ble_read_authorize_reply.part.2+0x28>)
1000c9cc:	1c05      	adds	r5, r0, #0
1000c9ce:	1c08      	adds	r0, r1, #0
1000c9d0:	1c0c      	adds	r4, r1, #0
1000c9d2:	4798      	blx	r3
1000c9d4:	2800      	cmp	r0, #0
1000c9d6:	d009      	beq.n	1000c9ec <at_ble_read_authorize_reply.part.2+0x24>
1000c9d8:	6882      	ldr	r2, [r0, #8]
1000c9da:	2a00      	cmp	r2, #0
1000c9dc:	d006      	beq.n	1000c9ec <at_ble_read_authorize_reply.part.2+0x24>
1000c9de:	8883      	ldrh	r3, [r0, #4]
1000c9e0:	1c29      	adds	r1, r5, #0
1000c9e2:	9200      	str	r2, [sp, #0]
1000c9e4:	1c20      	adds	r0, r4, #0
1000c9e6:	2200      	movs	r2, #0
1000c9e8:	4c02      	ldr	r4, [pc, #8]	; (1000c9f4 <at_ble_read_authorize_reply.part.2+0x2c>)
1000c9ea:	47a0      	blx	r4
1000c9ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c9ee:	46c0      	nop			; (mov r8, r8)
1000c9f0:	1000c989 	.word	0x1000c989
1000c9f4:	1000e265 	.word	0x1000e265

1000c9f8 <initi_gatt_server_module>:
1000c9f8:	2300      	movs	r3, #0
1000c9fa:	4a06      	ldr	r2, [pc, #24]	; (1000ca14 <initi_gatt_server_module+0x1c>)
1000c9fc:	7013      	strb	r3, [r2, #0]
1000c9fe:	4a06      	ldr	r2, [pc, #24]	; (1000ca18 <initi_gatt_server_module+0x20>)
1000ca00:	6013      	str	r3, [r2, #0]
1000ca02:	4a06      	ldr	r2, [pc, #24]	; (1000ca1c <initi_gatt_server_module+0x24>)
1000ca04:	6013      	str	r3, [r2, #0]
1000ca06:	4a06      	ldr	r2, [pc, #24]	; (1000ca20 <initi_gatt_server_module+0x28>)
1000ca08:	6013      	str	r3, [r2, #0]
1000ca0a:	4a06      	ldr	r2, [pc, #24]	; (1000ca24 <initi_gatt_server_module+0x2c>)
1000ca0c:	6013      	str	r3, [r2, #0]
1000ca0e:	4a06      	ldr	r2, [pc, #24]	; (1000ca28 <initi_gatt_server_module+0x30>)
1000ca10:	6013      	str	r3, [r2, #0]
1000ca12:	4770      	bx	lr
1000ca14:	10012550 	.word	0x10012550
1000ca18:	10012560 	.word	0x10012560
1000ca1c:	1001255c 	.word	0x1001255c
1000ca20:	1001254c 	.word	0x1001254c
1000ca24:	10012558 	.word	0x10012558
1000ca28:	10012554 	.word	0x10012554

1000ca2c <db_init>:
1000ca2c:	4b0a      	ldr	r3, [pc, #40]	; (1000ca58 <db_init+0x2c>)
1000ca2e:	4a0b      	ldr	r2, [pc, #44]	; (1000ca5c <db_init+0x30>)
1000ca30:	6018      	str	r0, [r3, #0]
1000ca32:	084b      	lsrs	r3, r1, #1
1000ca34:	6013      	str	r3, [r2, #0]
1000ca36:	4a0a      	ldr	r2, [pc, #40]	; (1000ca60 <db_init+0x34>)
1000ca38:	18c3      	adds	r3, r0, r3
1000ca3a:	6013      	str	r3, [r2, #0]
1000ca3c:	4a09      	ldr	r2, [pc, #36]	; (1000ca64 <db_init+0x38>)
1000ca3e:	1841      	adds	r1, r0, r1
1000ca40:	6013      	str	r3, [r2, #0]
1000ca42:	2303      	movs	r3, #3
1000ca44:	2200      	movs	r2, #0
1000ca46:	3103      	adds	r1, #3
1000ca48:	4399      	bics	r1, r3
1000ca4a:	4b07      	ldr	r3, [pc, #28]	; (1000ca68 <db_init+0x3c>)
1000ca4c:	3904      	subs	r1, #4
1000ca4e:	6019      	str	r1, [r3, #0]
1000ca50:	4b06      	ldr	r3, [pc, #24]	; (1000ca6c <db_init+0x40>)
1000ca52:	601a      	str	r2, [r3, #0]
1000ca54:	4770      	bx	lr
1000ca56:	46c0      	nop			; (mov r8, r8)
1000ca58:	10012564 	.word	0x10012564
1000ca5c:	10012560 	.word	0x10012560
1000ca60:	1001254c 	.word	0x1001254c
1000ca64:	10012558 	.word	0x10012558
1000ca68:	10012554 	.word	0x10012554
1000ca6c:	1001255c 	.word	0x1001255c

1000ca70 <at_ble_characteristic_value_set>:
1000ca70:	b570      	push	{r4, r5, r6, lr}
1000ca72:	4b0b      	ldr	r3, [pc, #44]	; (1000caa0 <at_ble_characteristic_value_set+0x30>)
1000ca74:	1c06      	adds	r6, r0, #0
1000ca76:	1c0c      	adds	r4, r1, #0
1000ca78:	1c15      	adds	r5, r2, #0
1000ca7a:	4798      	blx	r3
1000ca7c:	2800      	cmp	r0, #0
1000ca7e:	d008      	beq.n	1000ca92 <at_ble_characteristic_value_set+0x22>
1000ca80:	6880      	ldr	r0, [r0, #8]
1000ca82:	2800      	cmp	r0, #0
1000ca84:	d005      	beq.n	1000ca92 <at_ble_characteristic_value_set+0x22>
1000ca86:	1c21      	adds	r1, r4, #0
1000ca88:	1c2a      	adds	r2, r5, #0
1000ca8a:	4b06      	ldr	r3, [pc, #24]	; (1000caa4 <at_ble_characteristic_value_set+0x34>)
1000ca8c:	4798      	blx	r3
1000ca8e:	2000      	movs	r0, #0
1000ca90:	e004      	b.n	1000ca9c <at_ble_characteristic_value_set+0x2c>
1000ca92:	1c30      	adds	r0, r6, #0
1000ca94:	1c29      	adds	r1, r5, #0
1000ca96:	1c22      	adds	r2, r4, #0
1000ca98:	4b03      	ldr	r3, [pc, #12]	; (1000caa8 <at_ble_characteristic_value_set+0x38>)
1000ca9a:	4798      	blx	r3
1000ca9c:	bd70      	pop	{r4, r5, r6, pc}
1000ca9e:	46c0      	nop			; (mov r8, r8)
1000caa0:	1000c989 	.word	0x1000c989
1000caa4:	1000f8db 	.word	0x1000f8db
1000caa8:	1000e669 	.word	0x1000e669

1000caac <at_ble_characteristic_value_get>:
1000caac:	b570      	push	{r4, r5, r6, lr}
1000caae:	4b0c      	ldr	r3, [pc, #48]	; (1000cae0 <at_ble_characteristic_value_get+0x34>)
1000cab0:	1c06      	adds	r6, r0, #0
1000cab2:	1c0c      	adds	r4, r1, #0
1000cab4:	1c15      	adds	r5, r2, #0
1000cab6:	4798      	blx	r3
1000cab8:	2800      	cmp	r0, #0
1000caba:	d00b      	beq.n	1000cad4 <at_ble_characteristic_value_get+0x28>
1000cabc:	6883      	ldr	r3, [r0, #8]
1000cabe:	2b00      	cmp	r3, #0
1000cac0:	d008      	beq.n	1000cad4 <at_ble_characteristic_value_get+0x28>
1000cac2:	8883      	ldrh	r3, [r0, #4]
1000cac4:	802b      	strh	r3, [r5, #0]
1000cac6:	8882      	ldrh	r2, [r0, #4]
1000cac8:	6881      	ldr	r1, [r0, #8]
1000caca:	4b06      	ldr	r3, [pc, #24]	; (1000cae4 <at_ble_characteristic_value_get+0x38>)
1000cacc:	1c20      	adds	r0, r4, #0
1000cace:	4798      	blx	r3
1000cad0:	2000      	movs	r0, #0
1000cad2:	e004      	b.n	1000cade <at_ble_characteristic_value_get+0x32>
1000cad4:	1c30      	adds	r0, r6, #0
1000cad6:	1c29      	adds	r1, r5, #0
1000cad8:	1c22      	adds	r2, r4, #0
1000cada:	4b03      	ldr	r3, [pc, #12]	; (1000cae8 <at_ble_characteristic_value_get+0x3c>)
1000cadc:	4798      	blx	r3
1000cade:	bd70      	pop	{r4, r5, r6, pc}
1000cae0:	1000c989 	.word	0x1000c989
1000cae4:	1000f8db 	.word	0x1000f8db
1000cae8:	1000e6f5 	.word	0x1000e6f5

1000caec <at_ble_write_authorize_reply>:
1000caec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000caee:	b085      	sub	sp, #20
1000caf0:	1c04      	adds	r4, r0, #0
1000caf2:	9101      	str	r1, [sp, #4]
1000caf4:	2900      	cmp	r1, #0
1000caf6:	d128      	bne.n	1000cb4a <at_ble_write_authorize_reply+0x5e>
1000caf8:	8843      	ldrh	r3, [r0, #2]
1000cafa:	1c27      	adds	r7, r4, #0
1000cafc:	9300      	str	r3, [sp, #0]
1000cafe:	1c18      	adds	r0, r3, #0
1000cb00:	4b16      	ldr	r3, [pc, #88]	; (1000cb5c <at_ble_write_authorize_reply+0x70>)
1000cb02:	4798      	blx	r3
1000cb04:	3708      	adds	r7, #8
1000cb06:	2800      	cmp	r0, #0
1000cb08:	d009      	beq.n	1000cb1e <at_ble_write_authorize_reply+0x32>
1000cb0a:	6880      	ldr	r0, [r0, #8]
1000cb0c:	2800      	cmp	r0, #0
1000cb0e:	d006      	beq.n	1000cb1e <at_ble_write_authorize_reply+0x32>
1000cb10:	88a3      	ldrh	r3, [r4, #4]
1000cb12:	88e2      	ldrh	r2, [r4, #6]
1000cb14:	18c0      	adds	r0, r0, r3
1000cb16:	1c39      	adds	r1, r7, #0
1000cb18:	4b11      	ldr	r3, [pc, #68]	; (1000cb60 <at_ble_write_authorize_reply+0x74>)
1000cb1a:	4798      	blx	r3
1000cb1c:	e015      	b.n	1000cb4a <at_ble_write_authorize_reply+0x5e>
1000cb1e:	ab02      	add	r3, sp, #8
1000cb20:	1d9e      	adds	r6, r3, #6
1000cb22:	2300      	movs	r3, #0
1000cb24:	4d0f      	ldr	r5, [pc, #60]	; (1000cb64 <at_ble_write_authorize_reply+0x78>)
1000cb26:	8033      	strh	r3, [r6, #0]
1000cb28:	6829      	ldr	r1, [r5, #0]
1000cb2a:	1c32      	adds	r2, r6, #0
1000cb2c:	4b0e      	ldr	r3, [pc, #56]	; (1000cb68 <at_ble_write_authorize_reply+0x7c>)
1000cb2e:	9800      	ldr	r0, [sp, #0]
1000cb30:	4798      	blx	r3
1000cb32:	682b      	ldr	r3, [r5, #0]
1000cb34:	88a0      	ldrh	r0, [r4, #4]
1000cb36:	88e2      	ldrh	r2, [r4, #6]
1000cb38:	1818      	adds	r0, r3, r0
1000cb3a:	1c39      	adds	r1, r7, #0
1000cb3c:	4b08      	ldr	r3, [pc, #32]	; (1000cb60 <at_ble_write_authorize_reply+0x74>)
1000cb3e:	4798      	blx	r3
1000cb40:	8860      	ldrh	r0, [r4, #2]
1000cb42:	8832      	ldrh	r2, [r6, #0]
1000cb44:	6829      	ldr	r1, [r5, #0]
1000cb46:	4b09      	ldr	r3, [pc, #36]	; (1000cb6c <at_ble_write_authorize_reply+0x80>)
1000cb48:	4798      	blx	r3
1000cb4a:	8860      	ldrh	r0, [r4, #2]
1000cb4c:	8821      	ldrh	r1, [r4, #0]
1000cb4e:	9a01      	ldr	r2, [sp, #4]
1000cb50:	4b07      	ldr	r3, [pc, #28]	; (1000cb70 <at_ble_write_authorize_reply+0x84>)
1000cb52:	4798      	blx	r3
1000cb54:	2000      	movs	r0, #0
1000cb56:	b005      	add	sp, #20
1000cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb5a:	46c0      	nop			; (mov r8, r8)
1000cb5c:	1000c989 	.word	0x1000c989
1000cb60:	1000f8db 	.word	0x1000f8db
1000cb64:	10012318 	.word	0x10012318
1000cb68:	1000caad 	.word	0x1000caad
1000cb6c:	1000ca71 	.word	0x1000ca71
1000cb70:	1000e2d1 	.word	0x1000e2d1

1000cb74 <gatts_handle_read_req>:
1000cb74:	b538      	push	{r3, r4, r5, lr}
1000cb76:	1c0c      	adds	r4, r1, #0
1000cb78:	4b07      	ldr	r3, [pc, #28]	; (1000cb98 <gatts_handle_read_req+0x24>)
1000cb7a:	4798      	blx	r3
1000cb7c:	8865      	ldrh	r5, [r4, #2]
1000cb7e:	4b07      	ldr	r3, [pc, #28]	; (1000cb9c <gatts_handle_read_req+0x28>)
1000cb80:	1c28      	adds	r0, r5, #0
1000cb82:	4798      	blx	r3
1000cb84:	7883      	ldrb	r3, [r0, #2]
1000cb86:	2026      	movs	r0, #38	; 0x26
1000cb88:	07db      	lsls	r3, r3, #31
1000cb8a:	d404      	bmi.n	1000cb96 <gatts_handle_read_req+0x22>
1000cb8c:	8820      	ldrh	r0, [r4, #0]
1000cb8e:	1c29      	adds	r1, r5, #0
1000cb90:	4b03      	ldr	r3, [pc, #12]	; (1000cba0 <gatts_handle_read_req+0x2c>)
1000cb92:	4798      	blx	r3
1000cb94:	203b      	movs	r0, #59	; 0x3b
1000cb96:	bd38      	pop	{r3, r4, r5, pc}
1000cb98:	1000e215 	.word	0x1000e215
1000cb9c:	1000c989 	.word	0x1000c989
1000cba0:	1000c9c9 	.word	0x1000c9c9

1000cba4 <gatts_handle_att_info_req>:
1000cba4:	b538      	push	{r3, r4, r5, lr}
1000cba6:	1c0d      	adds	r5, r1, #0
1000cba8:	4b0a      	ldr	r3, [pc, #40]	; (1000cbd4 <gatts_handle_att_info_req+0x30>)
1000cbaa:	1c14      	adds	r4, r2, #0
1000cbac:	4798      	blx	r3
1000cbae:	882d      	ldrh	r5, [r5, #0]
1000cbb0:	4b09      	ldr	r3, [pc, #36]	; (1000cbd8 <gatts_handle_att_info_req+0x34>)
1000cbb2:	1c28      	adds	r0, r5, #0
1000cbb4:	4798      	blx	r3
1000cbb6:	0a22      	lsrs	r2, r4, #8
1000cbb8:	1c03      	adds	r3, r0, #0
1000cbba:	4c08      	ldr	r4, [pc, #32]	; (1000cbdc <gatts_handle_att_info_req+0x38>)
1000cbbc:	b291      	uxth	r1, r2
1000cbbe:	2800      	cmp	r0, #0
1000cbc0:	d003      	beq.n	1000cbca <gatts_handle_att_info_req+0x26>
1000cbc2:	8882      	ldrh	r2, [r0, #4]
1000cbc4:	2300      	movs	r3, #0
1000cbc6:	1c28      	adds	r0, r5, #0
1000cbc8:	e001      	b.n	1000cbce <gatts_handle_att_info_req+0x2a>
1000cbca:	1c28      	adds	r0, r5, #0
1000cbcc:	2201      	movs	r2, #1
1000cbce:	47a0      	blx	r4
1000cbd0:	203b      	movs	r0, #59	; 0x3b
1000cbd2:	bd38      	pop	{r3, r4, r5, pc}
1000cbd4:	1000e259 	.word	0x1000e259
1000cbd8:	1000c989 	.word	0x1000c989
1000cbdc:	1000e315 	.word	0x1000e315

1000cbe0 <gatts_handle_write_req>:
1000cbe0:	b510      	push	{r4, lr}
1000cbe2:	1c14      	adds	r4, r2, #0
1000cbe4:	4b07      	ldr	r3, [pc, #28]	; (1000cc04 <gatts_handle_write_req+0x24>)
1000cbe6:	4798      	blx	r3
1000cbe8:	4b07      	ldr	r3, [pc, #28]	; (1000cc08 <gatts_handle_write_req+0x28>)
1000cbea:	8860      	ldrh	r0, [r4, #2]
1000cbec:	4798      	blx	r3
1000cbee:	2302      	movs	r3, #2
1000cbf0:	7881      	ldrb	r1, [r0, #2]
1000cbf2:	2022      	movs	r0, #34	; 0x22
1000cbf4:	4019      	ands	r1, r3
1000cbf6:	d103      	bne.n	1000cc00 <gatts_handle_write_req+0x20>
1000cbf8:	1c20      	adds	r0, r4, #0
1000cbfa:	4b04      	ldr	r3, [pc, #16]	; (1000cc0c <gatts_handle_write_req+0x2c>)
1000cbfc:	4798      	blx	r3
1000cbfe:	201f      	movs	r0, #31
1000cc00:	bd10      	pop	{r4, pc}
1000cc02:	46c0      	nop			; (mov r8, r8)
1000cc04:	1000e221 	.word	0x1000e221
1000cc08:	1000c989 	.word	0x1000c989
1000cc0c:	1000caed 	.word	0x1000caed

1000cc10 <init_l2cc_task_module>:
1000cc10:	220a      	movs	r2, #10
1000cc12:	4b01      	ldr	r3, [pc, #4]	; (1000cc18 <init_l2cc_task_module+0x8>)
1000cc14:	701a      	strb	r2, [r3, #0]
1000cc16:	4770      	bx	lr
1000cc18:	10012315 	.word	0x10012315

1000cc1c <l2cc_data_send_rsp_handler>:
1000cc1c:	b510      	push	{r4, lr}
1000cc1e:	7802      	ldrb	r2, [r0, #0]
1000cc20:	700a      	strb	r2, [r1, #0]
1000cc22:	7883      	ldrb	r3, [r0, #2]
1000cc24:	7844      	ldrb	r4, [r0, #1]
1000cc26:	021b      	lsls	r3, r3, #8
1000cc28:	4323      	orrs	r3, r4
1000cc2a:	804b      	strh	r3, [r1, #2]
1000cc2c:	7903      	ldrb	r3, [r0, #4]
1000cc2e:	78c0      	ldrb	r0, [r0, #3]
1000cc30:	021b      	lsls	r3, r3, #8
1000cc32:	4303      	orrs	r3, r0
1000cc34:	808b      	strh	r3, [r1, #4]
1000cc36:	2a00      	cmp	r2, #0
1000cc38:	d103      	bne.n	1000cc42 <l2cc_data_send_rsp_handler+0x26>
1000cc3a:	4a02      	ldr	r2, [pc, #8]	; (1000cc44 <l2cc_data_send_rsp_handler+0x28>)
1000cc3c:	7813      	ldrb	r3, [r2, #0]
1000cc3e:	3301      	adds	r3, #1
1000cc40:	7013      	strb	r3, [r2, #0]
1000cc42:	bd10      	pop	{r4, pc}
1000cc44:	10012315 	.word	0x10012315

1000cc48 <l2cc_data_received_handler>:
1000cc48:	b508      	push	{r3, lr}
1000cc4a:	1c03      	adds	r3, r0, #0
1000cc4c:	7842      	ldrb	r2, [r0, #1]
1000cc4e:	7800      	ldrb	r0, [r0, #0]
1000cc50:	0212      	lsls	r2, r2, #8
1000cc52:	4302      	orrs	r2, r0
1000cc54:	800a      	strh	r2, [r1, #0]
1000cc56:	78da      	ldrb	r2, [r3, #3]
1000cc58:	7898      	ldrb	r0, [r3, #2]
1000cc5a:	0212      	lsls	r2, r2, #8
1000cc5c:	4302      	orrs	r2, r0
1000cc5e:	804a      	strh	r2, [r1, #2]
1000cc60:	795a      	ldrb	r2, [r3, #5]
1000cc62:	7918      	ldrb	r0, [r3, #4]
1000cc64:	0212      	lsls	r2, r2, #8
1000cc66:	4302      	orrs	r2, r0
1000cc68:	808a      	strh	r2, [r1, #4]
1000cc6a:	1d88      	adds	r0, r1, #6
1000cc6c:	1d99      	adds	r1, r3, #6
1000cc6e:	4b01      	ldr	r3, [pc, #4]	; (1000cc74 <l2cc_data_received_handler+0x2c>)
1000cc70:	4798      	blx	r3
1000cc72:	bd08      	pop	{r3, pc}
1000cc74:	1000f8db 	.word	0x1000f8db

1000cc78 <at_ble_authenticate>:
1000cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc7a:	1c0c      	adds	r4, r1, #0
1000cc7c:	211f      	movs	r1, #31
1000cc7e:	b08b      	sub	sp, #44	; 0x2c
1000cc80:	9307      	str	r3, [sp, #28]
1000cc82:	ab02      	add	r3, sp, #8
1000cc84:	18c9      	adds	r1, r1, r3
1000cc86:	230f      	movs	r3, #15
1000cc88:	700b      	strb	r3, [r1, #0]
1000cc8a:	4b40      	ldr	r3, [pc, #256]	; (1000cd8c <at_ble_authenticate+0x114>)
1000cc8c:	1c05      	adds	r5, r0, #0
1000cc8e:	1c16      	adds	r6, r2, #0
1000cc90:	4798      	blx	r3
1000cc92:	1c07      	adds	r7, r0, #0
1000cc94:	2001      	movs	r0, #1
1000cc96:	2f07      	cmp	r7, #7
1000cc98:	d875      	bhi.n	1000cd86 <at_ble_authenticate+0x10e>
1000cc9a:	2c00      	cmp	r4, #0
1000cc9c:	d113      	bne.n	1000ccc6 <at_ble_authenticate+0x4e>
1000cc9e:	2312      	movs	r3, #18
1000cca0:	435f      	muls	r7, r3
1000cca2:	4b3b      	ldr	r3, [pc, #236]	; (1000cd90 <at_ble_authenticate+0x118>)
1000cca4:	5cfb      	ldrb	r3, [r7, r3]
1000cca6:	4283      	cmp	r3, r0
1000cca8:	d001      	beq.n	1000ccae <at_ble_authenticate+0x36>
1000ccaa:	20cf      	movs	r0, #207	; 0xcf
1000ccac:	e06b      	b.n	1000cd86 <at_ble_authenticate+0x10e>
1000ccae:	9504      	str	r5, [sp, #16]
1000ccb0:	9400      	str	r4, [sp, #0]
1000ccb2:	9401      	str	r4, [sp, #4]
1000ccb4:	9402      	str	r4, [sp, #8]
1000ccb6:	9403      	str	r4, [sp, #12]
1000ccb8:	1c20      	adds	r0, r4, #0
1000ccba:	1c21      	adds	r1, r4, #0
1000ccbc:	1c22      	adds	r2, r4, #0
1000ccbe:	1c23      	adds	r3, r4, #0
1000ccc0:	4d34      	ldr	r5, [pc, #208]	; (1000cd94 <at_ble_authenticate+0x11c>)
1000ccc2:	47a8      	blx	r5
1000ccc4:	e05e      	b.n	1000cd84 <at_ble_authenticate+0x10c>
1000ccc6:	7922      	ldrb	r2, [r4, #4]
1000ccc8:	2a06      	cmp	r2, #6
1000ccca:	d9ee      	bls.n	1000ccaa <at_ble_authenticate+0x32>
1000cccc:	7963      	ldrb	r3, [r4, #5]
1000ccce:	2b10      	cmp	r3, #16
1000ccd0:	d8eb      	bhi.n	1000ccaa <at_ble_authenticate+0x32>
1000ccd2:	429a      	cmp	r2, r3
1000ccd4:	d8e9      	bhi.n	1000ccaa <at_ble_authenticate+0x32>
1000ccd6:	7a23      	ldrb	r3, [r4, #8]
1000ccd8:	2b04      	cmp	r3, #4
1000ccda:	d8e6      	bhi.n	1000ccaa <at_ble_authenticate+0x32>
1000ccdc:	79a3      	ldrb	r3, [r4, #6]
1000ccde:	2b07      	cmp	r3, #7
1000cce0:	d8e3      	bhi.n	1000ccaa <at_ble_authenticate+0x32>
1000cce2:	79e3      	ldrb	r3, [r4, #7]
1000cce4:	2b07      	cmp	r3, #7
1000cce6:	d8e0      	bhi.n	1000ccaa <at_ble_authenticate+0x32>
1000cce8:	78a3      	ldrb	r3, [r4, #2]
1000ccea:	2b00      	cmp	r3, #0
1000ccec:	d006      	beq.n	1000ccfc <at_ble_authenticate+0x84>
1000ccee:	2e00      	cmp	r6, #0
1000ccf0:	d0db      	beq.n	1000ccaa <at_ble_authenticate+0x32>
1000ccf2:	4829      	ldr	r0, [pc, #164]	; (1000cd98 <at_ble_authenticate+0x120>)
1000ccf4:	1c31      	adds	r1, r6, #0
1000ccf6:	221c      	movs	r2, #28
1000ccf8:	4b28      	ldr	r3, [pc, #160]	; (1000cd9c <at_ble_authenticate+0x124>)
1000ccfa:	4798      	blx	r3
1000ccfc:	9b07      	ldr	r3, [sp, #28]
1000ccfe:	2b00      	cmp	r3, #0
1000cd00:	d005      	beq.n	1000cd0e <at_ble_authenticate+0x96>
1000cd02:	4827      	ldr	r0, [pc, #156]	; (1000cda0 <at_ble_authenticate+0x128>)
1000cd04:	1c19      	adds	r1, r3, #0
1000cd06:	309a      	adds	r0, #154	; 0x9a
1000cd08:	2210      	movs	r2, #16
1000cd0a:	4b24      	ldr	r3, [pc, #144]	; (1000cd9c <at_ble_authenticate+0x124>)
1000cd0c:	4798      	blx	r3
1000cd0e:	7863      	ldrb	r3, [r4, #1]
1000cd10:	78a2      	ldrb	r2, [r4, #2]
1000cd12:	009b      	lsls	r3, r3, #2
1000cd14:	4313      	orrs	r3, r2
1000cd16:	2212      	movs	r2, #18
1000cd18:	4357      	muls	r7, r2
1000cd1a:	4a1d      	ldr	r2, [pc, #116]	; (1000cd90 <at_ble_authenticate+0x118>)
1000cd1c:	b2db      	uxtb	r3, r3
1000cd1e:	5cba      	ldrb	r2, [r7, r2]
1000cd20:	2a00      	cmp	r2, #0
1000cd22:	d116      	bne.n	1000cd52 <at_ble_authenticate+0xda>
1000cd24:	79a0      	ldrb	r0, [r4, #6]
1000cd26:	0742      	lsls	r2, r0, #29
1000cd28:	d502      	bpl.n	1000cd30 <at_ble_authenticate+0xb8>
1000cd2a:	9a07      	ldr	r2, [sp, #28]
1000cd2c:	2a00      	cmp	r2, #0
1000cd2e:	d0bc      	beq.n	1000ccaa <at_ble_authenticate+0x32>
1000cd30:	07c2      	lsls	r2, r0, #31
1000cd32:	d501      	bpl.n	1000cd38 <at_ble_authenticate+0xc0>
1000cd34:	2e00      	cmp	r6, #0
1000cd36:	d0b8      	beq.n	1000ccaa <at_ble_authenticate+0x32>
1000cd38:	7966      	ldrb	r6, [r4, #5]
1000cd3a:	7821      	ldrb	r1, [r4, #0]
1000cd3c:	78e2      	ldrb	r2, [r4, #3]
1000cd3e:	9600      	str	r6, [sp, #0]
1000cd40:	9001      	str	r0, [sp, #4]
1000cd42:	79e0      	ldrb	r0, [r4, #7]
1000cd44:	9002      	str	r0, [sp, #8]
1000cd46:	7a20      	ldrb	r0, [r4, #8]
1000cd48:	4c16      	ldr	r4, [pc, #88]	; (1000cda4 <at_ble_authenticate+0x12c>)
1000cd4a:	9003      	str	r0, [sp, #12]
1000cd4c:	1c28      	adds	r0, r5, #0
1000cd4e:	47a0      	blx	r4
1000cd50:	e018      	b.n	1000cd84 <at_ble_authenticate+0x10c>
1000cd52:	2a01      	cmp	r2, #1
1000cd54:	d1a9      	bne.n	1000ccaa <at_ble_authenticate+0x32>
1000cd56:	79e0      	ldrb	r0, [r4, #7]
1000cd58:	0742      	lsls	r2, r0, #29
1000cd5a:	d502      	bpl.n	1000cd62 <at_ble_authenticate+0xea>
1000cd5c:	9a07      	ldr	r2, [sp, #28]
1000cd5e:	2a00      	cmp	r2, #0
1000cd60:	d0a3      	beq.n	1000ccaa <at_ble_authenticate+0x32>
1000cd62:	07c2      	lsls	r2, r0, #31
1000cd64:	d501      	bpl.n	1000cd6a <at_ble_authenticate+0xf2>
1000cd66:	2e00      	cmp	r6, #0
1000cd68:	d09f      	beq.n	1000ccaa <at_ble_authenticate+0x32>
1000cd6a:	7966      	ldrb	r6, [r4, #5]
1000cd6c:	7821      	ldrb	r1, [r4, #0]
1000cd6e:	78e2      	ldrb	r2, [r4, #3]
1000cd70:	9600      	str	r6, [sp, #0]
1000cd72:	79a6      	ldrb	r6, [r4, #6]
1000cd74:	9002      	str	r0, [sp, #8]
1000cd76:	9601      	str	r6, [sp, #4]
1000cd78:	7a20      	ldrb	r0, [r4, #8]
1000cd7a:	9504      	str	r5, [sp, #16]
1000cd7c:	9003      	str	r0, [sp, #12]
1000cd7e:	4c05      	ldr	r4, [pc, #20]	; (1000cd94 <at_ble_authenticate+0x11c>)
1000cd80:	2001      	movs	r0, #1
1000cd82:	47a0      	blx	r4
1000cd84:	2000      	movs	r0, #0
1000cd86:	b00b      	add	sp, #44	; 0x2c
1000cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd8a:	46c0      	nop			; (mov r8, r8)
1000cd8c:	1000d121 	.word	0x1000d121
1000cd90:	1001324a 	.word	0x1001324a
1000cd94:	1000d691 	.word	0x1000d691
1000cd98:	10013358 	.word	0x10013358
1000cd9c:	1000f8db 	.word	0x1000f8db
1000cda0:	100132da 	.word	0x100132da
1000cda4:	1000d471 	.word	0x1000d471

1000cda8 <at_ble_pair_key_reply>:
1000cda8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdaa:	b085      	sub	sp, #20
1000cdac:	1c05      	adds	r5, r0, #0
1000cdae:	1c0c      	adds	r4, r1, #0
1000cdb0:	1c16      	adds	r6, r2, #0
1000cdb2:	2100      	movs	r1, #0
1000cdb4:	4668      	mov	r0, sp
1000cdb6:	2210      	movs	r2, #16
1000cdb8:	4b18      	ldr	r3, [pc, #96]	; (1000ce1c <at_ble_pair_key_reply+0x74>)
1000cdba:	4798      	blx	r3
1000cdbc:	2101      	movs	r1, #1
1000cdbe:	2e00      	cmp	r6, #0
1000cdc0:	d101      	bne.n	1000cdc6 <at_ble_pair_key_reply+0x1e>
1000cdc2:	1c31      	adds	r1, r6, #0
1000cdc4:	466e      	mov	r6, sp
1000cdc6:	2c00      	cmp	r4, #0
1000cdc8:	d116      	bne.n	1000cdf8 <at_ble_pair_key_reply+0x50>
1000cdca:	2701      	movs	r7, #1
1000cdcc:	1c23      	adds	r3, r4, #0
1000cdce:	1d70      	adds	r0, r6, #5
1000cdd0:	3e01      	subs	r6, #1
1000cdd2:	7802      	ldrb	r2, [r0, #0]
1000cdd4:	3801      	subs	r0, #1
1000cdd6:	3a30      	subs	r2, #48	; 0x30
1000cdd8:	437a      	muls	r2, r7
1000cdda:	189b      	adds	r3, r3, r2
1000cddc:	220a      	movs	r2, #10
1000cdde:	4357      	muls	r7, r2
1000cde0:	42b0      	cmp	r0, r6
1000cde2:	d1f6      	bne.n	1000cdd2 <at_ble_pair_key_reply+0x2a>
1000cde4:	466a      	mov	r2, sp
1000cde6:	4668      	mov	r0, sp
1000cde8:	7013      	strb	r3, [r2, #0]
1000cdea:	0a1a      	lsrs	r2, r3, #8
1000cdec:	7042      	strb	r2, [r0, #1]
1000cdee:	0c1a      	lsrs	r2, r3, #16
1000cdf0:	0e1b      	lsrs	r3, r3, #24
1000cdf2:	7082      	strb	r2, [r0, #2]
1000cdf4:	70c3      	strb	r3, [r0, #3]
1000cdf6:	e009      	b.n	1000ce0c <at_ble_pair_key_reply+0x64>
1000cdf8:	20cf      	movs	r0, #207	; 0xcf
1000cdfa:	2c01      	cmp	r4, #1
1000cdfc:	d10c      	bne.n	1000ce18 <at_ble_pair_key_reply+0x70>
1000cdfe:	2300      	movs	r3, #0
1000ce00:	4668      	mov	r0, sp
1000ce02:	5cf2      	ldrb	r2, [r6, r3]
1000ce04:	54c2      	strb	r2, [r0, r3]
1000ce06:	3301      	adds	r3, #1
1000ce08:	2b10      	cmp	r3, #16
1000ce0a:	d1f9      	bne.n	1000ce00 <at_ble_pair_key_reply+0x58>
1000ce0c:	2004      	movs	r0, #4
1000ce0e:	466a      	mov	r2, sp
1000ce10:	1c2b      	adds	r3, r5, #0
1000ce12:	4c03      	ldr	r4, [pc, #12]	; (1000ce20 <at_ble_pair_key_reply+0x78>)
1000ce14:	47a0      	blx	r4
1000ce16:	2000      	movs	r0, #0
1000ce18:	b005      	add	sp, #20
1000ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce1c:	1000f8ed 	.word	0x1000f8ed
1000ce20:	1000d70d 	.word	0x1000d70d

1000ce24 <at_ble_encryption_start>:
1000ce24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce26:	23cf      	movs	r3, #207	; 0xcf
1000ce28:	2900      	cmp	r1, #0
1000ce2a:	d02b      	beq.n	1000ce84 <at_ble_encryption_start+0x60>
1000ce2c:	2a05      	cmp	r2, #5
1000ce2e:	d829      	bhi.n	1000ce84 <at_ble_encryption_start+0x60>
1000ce30:	2701      	movs	r7, #1
1000ce32:	1c3d      	adds	r5, r7, #0
1000ce34:	2433      	movs	r4, #51	; 0x33
1000ce36:	4095      	lsls	r5, r2
1000ce38:	4225      	tst	r5, r4
1000ce3a:	d023      	beq.n	1000ce84 <at_ble_encryption_start+0x60>
1000ce3c:	7e8c      	ldrb	r4, [r1, #26]
1000ce3e:	3c07      	subs	r4, #7
1000ce40:	2c09      	cmp	r4, #9
1000ce42:	d81f      	bhi.n	1000ce84 <at_ble_encryption_start+0x60>
1000ce44:	4b10      	ldr	r3, [pc, #64]	; (1000ce88 <at_ble_encryption_start+0x64>)
1000ce46:	1c0c      	adds	r4, r1, #0
1000ce48:	2100      	movs	r1, #0
1000ce4a:	1c15      	adds	r5, r2, #0
1000ce4c:	1c06      	adds	r6, r0, #0
1000ce4e:	4798      	blx	r3
1000ce50:	1c3b      	adds	r3, r7, #0
1000ce52:	2807      	cmp	r0, #7
1000ce54:	d816      	bhi.n	1000ce84 <at_ble_encryption_start+0x60>
1000ce56:	2312      	movs	r3, #18
1000ce58:	4358      	muls	r0, r3
1000ce5a:	4b0c      	ldr	r3, [pc, #48]	; (1000ce8c <at_ble_encryption_start+0x68>)
1000ce5c:	5cc7      	ldrb	r7, [r0, r3]
1000ce5e:	23e0      	movs	r3, #224	; 0xe0
1000ce60:	2f00      	cmp	r7, #0
1000ce62:	d10f      	bne.n	1000ce84 <at_ble_encryption_start+0x60>
1000ce64:	1c21      	adds	r1, r4, #0
1000ce66:	221c      	movs	r2, #28
1000ce68:	4b09      	ldr	r3, [pc, #36]	; (1000ce90 <at_ble_encryption_start+0x6c>)
1000ce6a:	480a      	ldr	r0, [pc, #40]	; (1000ce94 <at_ble_encryption_start+0x70>)
1000ce6c:	4798      	blx	r3
1000ce6e:	1c23      	adds	r3, r4, #0
1000ce70:	7ea1      	ldrb	r1, [r4, #26]
1000ce72:	8a22      	ldrh	r2, [r4, #16]
1000ce74:	3312      	adds	r3, #18
1000ce76:	9100      	str	r1, [sp, #0]
1000ce78:	9501      	str	r5, [sp, #4]
1000ce7a:	1c21      	adds	r1, r4, #0
1000ce7c:	1c30      	adds	r0, r6, #0
1000ce7e:	4c06      	ldr	r4, [pc, #24]	; (1000ce98 <at_ble_encryption_start+0x74>)
1000ce80:	47a0      	blx	r4
1000ce82:	1c3b      	adds	r3, r7, #0
1000ce84:	1c18      	adds	r0, r3, #0
1000ce86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ce88:	1000d121 	.word	0x1000d121
1000ce8c:	1001324a 	.word	0x1001324a
1000ce90:	1000f8db 	.word	0x1000f8db
1000ce94:	10013358 	.word	0x10013358
1000ce98:	1000d75d 	.word	0x1000d75d

1000ce9c <at_ble_encryption_request_reply>:
1000ce9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ce9e:	24cf      	movs	r4, #207	; 0xcf
1000cea0:	2b00      	cmp	r3, #0
1000cea2:	d011      	beq.n	1000cec8 <at_ble_encryption_request_reply+0x2c>
1000cea4:	2a00      	cmp	r2, #0
1000cea6:	d00a      	beq.n	1000cebe <at_ble_encryption_request_reply+0x22>
1000cea8:	2905      	cmp	r1, #5
1000ceaa:	d80d      	bhi.n	1000cec8 <at_ble_encryption_request_reply+0x2c>
1000ceac:	2501      	movs	r5, #1
1000ceae:	2633      	movs	r6, #51	; 0x33
1000ceb0:	408d      	lsls	r5, r1
1000ceb2:	4235      	tst	r5, r6
1000ceb4:	d008      	beq.n	1000cec8 <at_ble_encryption_request_reply+0x2c>
1000ceb6:	7e9d      	ldrb	r5, [r3, #26]
1000ceb8:	3d07      	subs	r5, #7
1000ceba:	2d09      	cmp	r5, #9
1000cebc:	d804      	bhi.n	1000cec8 <at_ble_encryption_request_reply+0x2c>
1000cebe:	7e9c      	ldrb	r4, [r3, #26]
1000cec0:	9400      	str	r4, [sp, #0]
1000cec2:	4c02      	ldr	r4, [pc, #8]	; (1000cecc <at_ble_encryption_request_reply+0x30>)
1000cec4:	47a0      	blx	r4
1000cec6:	2400      	movs	r4, #0
1000cec8:	1c20      	adds	r0, r4, #0
1000ceca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000cecc:	1000d819 	.word	0x1000d819

1000ced0 <rx_callback>:
1000ced0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ced2:	88c5      	ldrh	r5, [r0, #6]
1000ced4:	8807      	ldrh	r7, [r0, #0]
1000ced6:	8886      	ldrh	r6, [r0, #4]
1000ced8:	2d00      	cmp	r5, #0
1000ceda:	d10c      	bne.n	1000cef6 <rx_callback+0x26>
1000cedc:	4b19      	ldr	r3, [pc, #100]	; (1000cf44 <rx_callback+0x74>)
1000cede:	1c38      	adds	r0, r7, #0
1000cee0:	1c31      	adds	r1, r6, #0
1000cee2:	1c2a      	adds	r2, r5, #0
1000cee4:	4798      	blx	r3
1000cee6:	1e03      	subs	r3, r0, #0
1000cee8:	d12a      	bne.n	1000cf40 <rx_callback+0x70>
1000ceea:	1c38      	adds	r0, r7, #0
1000ceec:	1c31      	adds	r1, r6, #0
1000ceee:	1c1a      	adds	r2, r3, #0
1000cef0:	4c15      	ldr	r4, [pc, #84]	; (1000cf48 <rx_callback+0x78>)
1000cef2:	47a0      	blx	r4
1000cef4:	e024      	b.n	1000cf40 <rx_callback+0x70>
1000cef6:	2296      	movs	r2, #150	; 0x96
1000cef8:	4c14      	ldr	r4, [pc, #80]	; (1000cf4c <rx_callback+0x7c>)
1000cefa:	0092      	lsls	r2, r2, #2
1000cefc:	8823      	ldrh	r3, [r4, #0]
1000cefe:	195b      	adds	r3, r3, r5
1000cf00:	4293      	cmp	r3, r2
1000cf02:	dd01      	ble.n	1000cf08 <rx_callback+0x38>
1000cf04:	2300      	movs	r3, #0
1000cf06:	8023      	strh	r3, [r4, #0]
1000cf08:	1c01      	adds	r1, r0, #0
1000cf0a:	4a11      	ldr	r2, [pc, #68]	; (1000cf50 <rx_callback+0x80>)
1000cf0c:	8823      	ldrh	r3, [r4, #0]
1000cf0e:	3108      	adds	r1, #8
1000cf10:	189b      	adds	r3, r3, r2
1000cf12:	9301      	str	r3, [sp, #4]
1000cf14:	1c18      	adds	r0, r3, #0
1000cf16:	1c2a      	adds	r2, r5, #0
1000cf18:	4b0e      	ldr	r3, [pc, #56]	; (1000cf54 <rx_callback+0x84>)
1000cf1a:	4798      	blx	r3
1000cf1c:	1c38      	adds	r0, r7, #0
1000cf1e:	1c31      	adds	r1, r6, #0
1000cf20:	9a01      	ldr	r2, [sp, #4]
1000cf22:	4b08      	ldr	r3, [pc, #32]	; (1000cf44 <rx_callback+0x74>)
1000cf24:	4798      	blx	r3
1000cf26:	2800      	cmp	r0, #0
1000cf28:	d10a      	bne.n	1000cf40 <rx_callback+0x70>
1000cf2a:	4b09      	ldr	r3, [pc, #36]	; (1000cf50 <rx_callback+0x80>)
1000cf2c:	8822      	ldrh	r2, [r4, #0]
1000cf2e:	1c31      	adds	r1, r6, #0
1000cf30:	18d2      	adds	r2, r2, r3
1000cf32:	1c38      	adds	r0, r7, #0
1000cf34:	1c2b      	adds	r3, r5, #0
1000cf36:	4e04      	ldr	r6, [pc, #16]	; (1000cf48 <rx_callback+0x78>)
1000cf38:	47b0      	blx	r6
1000cf3a:	8823      	ldrh	r3, [r4, #0]
1000cf3c:	18ed      	adds	r5, r5, r3
1000cf3e:	8025      	strh	r5, [r4, #0]
1000cf40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cf42:	46c0      	nop			; (mov r8, r8)
1000cf44:	1000bd41 	.word	0x1000bd41
1000cf48:	1000bcd5 	.word	0x1000bcd5
1000cf4c:	100133b4 	.word	0x100133b4
1000cf50:	100137b8 	.word	0x100137b8
1000cf54:	1000f8db 	.word	0x1000f8db

1000cf58 <interface_send>:
1000cf58:	b508      	push	{r3, lr}
1000cf5a:	4b02      	ldr	r3, [pc, #8]	; (1000cf64 <interface_send+0xc>)
1000cf5c:	4798      	blx	r3
1000cf5e:	2000      	movs	r0, #0
1000cf60:	bd08      	pop	{r3, pc}
1000cf62:	46c0      	nop			; (mov r8, r8)
1000cf64:	1000b0d9 	.word	0x1000b0d9

1000cf68 <interface_init>:
1000cf68:	2280      	movs	r2, #128	; 0x80
1000cf6a:	b510      	push	{r4, lr}
1000cf6c:	2100      	movs	r1, #0
1000cf6e:	4c08      	ldr	r4, [pc, #32]	; (1000cf90 <interface_init+0x28>)
1000cf70:	0092      	lsls	r2, r2, #2
1000cf72:	4808      	ldr	r0, [pc, #32]	; (1000cf94 <interface_init+0x2c>)
1000cf74:	47a0      	blx	r4
1000cf76:	2296      	movs	r2, #150	; 0x96
1000cf78:	2100      	movs	r1, #0
1000cf7a:	0092      	lsls	r2, r2, #2
1000cf7c:	4806      	ldr	r0, [pc, #24]	; (1000cf98 <interface_init+0x30>)
1000cf7e:	47a0      	blx	r4
1000cf80:	2200      	movs	r2, #0
1000cf82:	4b06      	ldr	r3, [pc, #24]	; (1000cf9c <interface_init+0x34>)
1000cf84:	801a      	strh	r2, [r3, #0]
1000cf86:	4a06      	ldr	r2, [pc, #24]	; (1000cfa0 <interface_init+0x38>)
1000cf88:	4b06      	ldr	r3, [pc, #24]	; (1000cfa4 <interface_init+0x3c>)
1000cf8a:	601a      	str	r2, [r3, #0]
1000cf8c:	bd10      	pop	{r4, pc}
1000cf8e:	46c0      	nop			; (mov r8, r8)
1000cf90:	1000f8ed 	.word	0x1000f8ed
1000cf94:	100135b8 	.word	0x100135b8
1000cf98:	100137b8 	.word	0x100137b8
1000cf9c:	100133b4 	.word	0x100133b4
1000cfa0:	100133b8 	.word	0x100133b8
1000cfa4:	10012318 	.word	0x10012318

1000cfa8 <platform_cmd_cmpl_signal>:
1000cfa8:	2201      	movs	r2, #1
1000cfaa:	4b01      	ldr	r3, [pc, #4]	; (1000cfb0 <platform_cmd_cmpl_signal+0x8>)
1000cfac:	601a      	str	r2, [r3, #0]
1000cfae:	4770      	bx	lr
1000cfb0:	10012568 	.word	0x10012568

1000cfb4 <platform_cmd_cmpl_wait>:
1000cfb4:	b510      	push	{r4, lr}
1000cfb6:	1c04      	adds	r4, r0, #0
1000cfb8:	4b07      	ldr	r3, [pc, #28]	; (1000cfd8 <platform_cmd_cmpl_wait+0x24>)
1000cfba:	681a      	ldr	r2, [r3, #0]
1000cfbc:	2a01      	cmp	r2, #1
1000cfbe:	d003      	beq.n	1000cfc8 <platform_cmd_cmpl_wait+0x14>
1000cfc0:	4b06      	ldr	r3, [pc, #24]	; (1000cfdc <platform_cmd_cmpl_wait+0x28>)
1000cfc2:	2000      	movs	r0, #0
1000cfc4:	4798      	blx	r3
1000cfc6:	e7f7      	b.n	1000cfb8 <platform_cmd_cmpl_wait+0x4>
1000cfc8:	6819      	ldr	r1, [r3, #0]
1000cfca:	2901      	cmp	r1, #1
1000cfcc:	d102      	bne.n	1000cfd4 <platform_cmd_cmpl_wait+0x20>
1000cfce:	2200      	movs	r2, #0
1000cfd0:	601a      	str	r2, [r3, #0]
1000cfd2:	e000      	b.n	1000cfd6 <platform_cmd_cmpl_wait+0x22>
1000cfd4:	7022      	strb	r2, [r4, #0]
1000cfd6:	bd10      	pop	{r4, pc}
1000cfd8:	10012568 	.word	0x10012568
1000cfdc:	1000b181 	.word	0x1000b181

1000cfe0 <start_timer>:
1000cfe0:	4770      	bx	lr

1000cfe2 <stop_timer>:
1000cfe2:	4770      	bx	lr

1000cfe4 <dbg_le_set_bd_addr_req_handler>:
1000cfe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cfe6:	466b      	mov	r3, sp
1000cfe8:	1dde      	adds	r6, r3, #7
1000cfea:	2300      	movs	r3, #0
1000cfec:	7033      	strb	r3, [r6, #0]
1000cfee:	230f      	movs	r3, #15
1000cff0:	4c13      	ldr	r4, [pc, #76]	; (1000d040 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000cff2:	2703      	movs	r7, #3
1000cff4:	7023      	strb	r3, [r4, #0]
1000cff6:	2300      	movs	r3, #0
1000cff8:	70e3      	strb	r3, [r4, #3]
1000cffa:	4b12      	ldr	r3, [pc, #72]	; (1000d044 <dbg_le_set_bd_addr_req_handler+0x60>)
1000cffc:	1c01      	adds	r1, r0, #0
1000cffe:	881a      	ldrh	r2, [r3, #0]
1000d000:	881b      	ldrh	r3, [r3, #0]
1000d002:	7122      	strb	r2, [r4, #4]
1000d004:	0a1b      	lsrs	r3, r3, #8
1000d006:	2206      	movs	r2, #6
1000d008:	7163      	strb	r3, [r4, #5]
1000d00a:	480f      	ldr	r0, [pc, #60]	; (1000d048 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d00c:	4b0f      	ldr	r3, [pc, #60]	; (1000d04c <dbg_le_set_bd_addr_req_handler+0x68>)
1000d00e:	7067      	strb	r7, [r4, #1]
1000d010:	70a7      	strb	r7, [r4, #2]
1000d012:	4798      	blx	r3
1000d014:	4d0e      	ldr	r5, [pc, #56]	; (1000d050 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d016:	4b0f      	ldr	r3, [pc, #60]	; (1000d054 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d018:	210e      	movs	r1, #14
1000d01a:	802b      	strh	r3, [r5, #0]
1000d01c:	2306      	movs	r3, #6
1000d01e:	71a3      	strb	r3, [r4, #6]
1000d020:	2300      	movs	r3, #0
1000d022:	1c20      	adds	r0, r4, #0
1000d024:	71e3      	strb	r3, [r4, #7]
1000d026:	4b0c      	ldr	r3, [pc, #48]	; (1000d058 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d028:	80af      	strh	r7, [r5, #4]
1000d02a:	4798      	blx	r3
1000d02c:	1c30      	adds	r0, r6, #0
1000d02e:	4b0b      	ldr	r3, [pc, #44]	; (1000d05c <dbg_le_set_bd_addr_req_handler+0x78>)
1000d030:	4798      	blx	r3
1000d032:	7833      	ldrb	r3, [r6, #0]
1000d034:	20e2      	movs	r0, #226	; 0xe2
1000d036:	2b00      	cmp	r3, #0
1000d038:	d101      	bne.n	1000d03e <dbg_le_set_bd_addr_req_handler+0x5a>
1000d03a:	68ab      	ldr	r3, [r5, #8]
1000d03c:	7818      	ldrb	r0, [r3, #0]
1000d03e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d040:	100135b8 	.word	0x100135b8
1000d044:	10013248 	.word	0x10013248
1000d048:	100135c0 	.word	0x100135c0
1000d04c:	1000f8db 	.word	0x1000f8db
1000d050:	1001323c 	.word	0x1001323c
1000d054:	00000329 	.word	0x00000329
1000d058:	1000cf59 	.word	0x1000cf59
1000d05c:	1000cfb5 	.word	0x1000cfb5

1000d060 <gapc_get_dev_info_cfm.constprop.1>:
1000d060:	b538      	push	{r3, r4, r5, lr}
1000d062:	230b      	movs	r3, #11
1000d064:	4c27      	ldr	r4, [pc, #156]	; (1000d104 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d066:	7023      	strb	r3, [r4, #0]
1000d068:	3303      	adds	r3, #3
1000d06a:	7063      	strb	r3, [r4, #1]
1000d06c:	3329      	adds	r3, #41	; 0x29
1000d06e:	70a3      	strb	r3, [r4, #2]
1000d070:	4b25      	ldr	r3, [pc, #148]	; (1000d108 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d072:	70e1      	strb	r1, [r4, #3]
1000d074:	881a      	ldrh	r2, [r3, #0]
1000d076:	881b      	ldrh	r3, [r3, #0]
1000d078:	7122      	strb	r2, [r4, #4]
1000d07a:	0a1b      	lsrs	r3, r3, #8
1000d07c:	7163      	strb	r3, [r4, #5]
1000d07e:	2300      	movs	r3, #0
1000d080:	7220      	strb	r0, [r4, #8]
1000d082:	7263      	strb	r3, [r4, #9]
1000d084:	2801      	cmp	r0, #1
1000d086:	d02b      	beq.n	1000d0e0 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d088:	4298      	cmp	r0, r3
1000d08a:	d01b      	beq.n	1000d0c4 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d08c:	2802      	cmp	r0, #2
1000d08e:	d12f      	bne.n	1000d0f0 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d090:	4b1e      	ldr	r3, [pc, #120]	; (1000d10c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d092:	2112      	movs	r1, #18
1000d094:	1c1a      	adds	r2, r3, #0
1000d096:	32ce      	adds	r2, #206	; 0xce
1000d098:	8812      	ldrh	r2, [r2, #0]
1000d09a:	72a2      	strb	r2, [r4, #10]
1000d09c:	0a12      	lsrs	r2, r2, #8
1000d09e:	72e2      	strb	r2, [r4, #11]
1000d0a0:	1c1a      	adds	r2, r3, #0
1000d0a2:	32d0      	adds	r2, #208	; 0xd0
1000d0a4:	8812      	ldrh	r2, [r2, #0]
1000d0a6:	7322      	strb	r2, [r4, #12]
1000d0a8:	0a12      	lsrs	r2, r2, #8
1000d0aa:	7362      	strb	r2, [r4, #13]
1000d0ac:	1c1a      	adds	r2, r3, #0
1000d0ae:	32d2      	adds	r2, #210	; 0xd2
1000d0b0:	8812      	ldrh	r2, [r2, #0]
1000d0b2:	33d4      	adds	r3, #212	; 0xd4
1000d0b4:	73a2      	strb	r2, [r4, #14]
1000d0b6:	0a12      	lsrs	r2, r2, #8
1000d0b8:	73e2      	strb	r2, [r4, #15]
1000d0ba:	881b      	ldrh	r3, [r3, #0]
1000d0bc:	7423      	strb	r3, [r4, #16]
1000d0be:	0a1b      	lsrs	r3, r3, #8
1000d0c0:	7463      	strb	r3, [r4, #17]
1000d0c2:	e016      	b.n	1000d0f2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0c4:	4b11      	ldr	r3, [pc, #68]	; (1000d10c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0c6:	4912      	ldr	r1, [pc, #72]	; (1000d110 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d0c8:	33aa      	adds	r3, #170	; 0xaa
1000d0ca:	881d      	ldrh	r5, [r3, #0]
1000d0cc:	4811      	ldr	r0, [pc, #68]	; (1000d114 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d0ce:	0a2b      	lsrs	r3, r5, #8
1000d0d0:	72a5      	strb	r5, [r4, #10]
1000d0d2:	72e3      	strb	r3, [r4, #11]
1000d0d4:	1c2a      	adds	r2, r5, #0
1000d0d6:	4b10      	ldr	r3, [pc, #64]	; (1000d118 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d0d8:	350c      	adds	r5, #12
1000d0da:	4798      	blx	r3
1000d0dc:	b2a9      	uxth	r1, r5
1000d0de:	e008      	b.n	1000d0f2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0e0:	4b0a      	ldr	r3, [pc, #40]	; (1000d10c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0e2:	210c      	movs	r1, #12
1000d0e4:	33cc      	adds	r3, #204	; 0xcc
1000d0e6:	881b      	ldrh	r3, [r3, #0]
1000d0e8:	72a3      	strb	r3, [r4, #10]
1000d0ea:	0a1b      	lsrs	r3, r3, #8
1000d0ec:	72e3      	strb	r3, [r4, #11]
1000d0ee:	e000      	b.n	1000d0f2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0f0:	210a      	movs	r1, #10
1000d0f2:	1c0b      	adds	r3, r1, #0
1000d0f4:	3b08      	subs	r3, #8
1000d0f6:	71a3      	strb	r3, [r4, #6]
1000d0f8:	121b      	asrs	r3, r3, #8
1000d0fa:	71e3      	strb	r3, [r4, #7]
1000d0fc:	1c20      	adds	r0, r4, #0
1000d0fe:	4b07      	ldr	r3, [pc, #28]	; (1000d11c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d100:	4798      	blx	r3
1000d102:	bd38      	pop	{r3, r4, r5, pc}
1000d104:	100135b8 	.word	0x100135b8
1000d108:	10013248 	.word	0x10013248
1000d10c:	100132da 	.word	0x100132da
1000d110:	10013386 	.word	0x10013386
1000d114:	100135c4 	.word	0x100135c4
1000d118:	1000f8db 	.word	0x1000f8db
1000d11c:	1000cf59 	.word	0x1000cf59

1000d120 <check_ConnData_idx_role>:
1000d120:	4b0c      	ldr	r3, [pc, #48]	; (1000d154 <check_ConnData_idx_role+0x34>)
1000d122:	b570      	push	{r4, r5, r6, lr}
1000d124:	1c04      	adds	r4, r0, #0
1000d126:	2008      	movs	r0, #8
1000d128:	429c      	cmp	r4, r3
1000d12a:	d011      	beq.n	1000d150 <check_ConnData_idx_role+0x30>
1000d12c:	2300      	movs	r3, #0
1000d12e:	2212      	movs	r2, #18
1000d130:	435a      	muls	r2, r3
1000d132:	4d09      	ldr	r5, [pc, #36]	; (1000d158 <check_ConnData_idx_role+0x38>)
1000d134:	b2d8      	uxtb	r0, r3
1000d136:	1956      	adds	r6, r2, r5
1000d138:	8976      	ldrh	r6, [r6, #10]
1000d13a:	42a6      	cmp	r6, r4
1000d13c:	d104      	bne.n	1000d148 <check_ConnData_idx_role+0x28>
1000d13e:	2900      	cmp	r1, #0
1000d140:	d006      	beq.n	1000d150 <check_ConnData_idx_role+0x30>
1000d142:	5d53      	ldrb	r3, [r2, r5]
1000d144:	700b      	strb	r3, [r1, #0]
1000d146:	e003      	b.n	1000d150 <check_ConnData_idx_role+0x30>
1000d148:	3301      	adds	r3, #1
1000d14a:	2b08      	cmp	r3, #8
1000d14c:	d1ef      	bne.n	1000d12e <check_ConnData_idx_role+0xe>
1000d14e:	1c18      	adds	r0, r3, #0
1000d150:	bd70      	pop	{r4, r5, r6, pc}
1000d152:	46c0      	nop			; (mov r8, r8)
1000d154:	0000ffff 	.word	0x0000ffff
1000d158:	1001324a 	.word	0x1001324a

1000d15c <check_ConnData_emptyEntry>:
1000d15c:	2300      	movs	r3, #0
1000d15e:	2212      	movs	r2, #18
1000d160:	435a      	muls	r2, r3
1000d162:	4906      	ldr	r1, [pc, #24]	; (1000d17c <check_ConnData_emptyEntry+0x20>)
1000d164:	b2d8      	uxtb	r0, r3
1000d166:	1852      	adds	r2, r2, r1
1000d168:	8951      	ldrh	r1, [r2, #10]
1000d16a:	4a05      	ldr	r2, [pc, #20]	; (1000d180 <check_ConnData_emptyEntry+0x24>)
1000d16c:	4291      	cmp	r1, r2
1000d16e:	d003      	beq.n	1000d178 <check_ConnData_emptyEntry+0x1c>
1000d170:	3301      	adds	r3, #1
1000d172:	2b08      	cmp	r3, #8
1000d174:	d1f3      	bne.n	1000d15e <check_ConnData_emptyEntry+0x2>
1000d176:	1c18      	adds	r0, r3, #0
1000d178:	4770      	bx	lr
1000d17a:	46c0      	nop			; (mov r8, r8)
1000d17c:	1001324a 	.word	0x1001324a
1000d180:	0000ffff 	.word	0x0000ffff

1000d184 <gapc_cmp_evt>:
1000d184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d186:	780b      	ldrb	r3, [r1, #0]
1000d188:	1c05      	adds	r5, r0, #0
1000d18a:	1e58      	subs	r0, r3, #1
1000d18c:	784e      	ldrb	r6, [r1, #1]
1000d18e:	280f      	cmp	r0, #15
1000d190:	d85a      	bhi.n	1000d248 <gapc_cmp_evt+0xc4>
1000d192:	1c14      	adds	r4, r2, #0
1000d194:	f001 fb12 	bl	1000e7bc <__gnu_thumb1_case_uqi>
1000d198:	5858440a 	.word	0x5858440a
1000d19c:	4b584444 	.word	0x4b584444
1000d1a0:	0825122d 	.word	0x0825122d
1000d1a4:	3e395858 	.word	0x3e395858
1000d1a8:	203b      	movs	r0, #59	; 0x3b
1000d1aa:	e04e      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1ac:	203b      	movs	r0, #59	; 0x3b
1000d1ae:	2e00      	cmp	r6, #0
1000d1b0:	d04b      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1b2:	0a2d      	lsrs	r5, r5, #8
1000d1b4:	8015      	strh	r5, [r2, #0]
1000d1b6:	7096      	strb	r6, [r2, #2]
1000d1b8:	3835      	subs	r0, #53	; 0x35
1000d1ba:	e046      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1bc:	466b      	mov	r3, sp
1000d1be:	1ddf      	adds	r7, r3, #7
1000d1c0:	2301      	movs	r3, #1
1000d1c2:	0a2d      	lsrs	r5, r5, #8
1000d1c4:	703b      	strb	r3, [r7, #0]
1000d1c6:	1c28      	adds	r0, r5, #0
1000d1c8:	1c39      	adds	r1, r7, #0
1000d1ca:	4b20      	ldr	r3, [pc, #128]	; (1000d24c <gapc_cmp_evt+0xc8>)
1000d1cc:	4798      	blx	r3
1000d1ce:	2807      	cmp	r0, #7
1000d1d0:	d803      	bhi.n	1000d1da <gapc_cmp_evt+0x56>
1000d1d2:	783b      	ldrb	r3, [r7, #0]
1000d1d4:	203b      	movs	r0, #59	; 0x3b
1000d1d6:	2b00      	cmp	r3, #0
1000d1d8:	d037      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1da:	8065      	strh	r5, [r4, #2]
1000d1dc:	7126      	strb	r6, [r4, #4]
1000d1de:	2009      	movs	r0, #9
1000d1e0:	e033      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1e2:	203b      	movs	r0, #59	; 0x3b
1000d1e4:	2e00      	cmp	r6, #0
1000d1e6:	d030      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1e8:	0a2d      	lsrs	r5, r5, #8
1000d1ea:	8015      	strh	r5, [r2, #0]
1000d1ec:	7096      	strb	r6, [r2, #2]
1000d1ee:	382d      	subs	r0, #45	; 0x2d
1000d1f0:	e02b      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1f2:	203b      	movs	r0, #59	; 0x3b
1000d1f4:	2e00      	cmp	r6, #0
1000d1f6:	d028      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d1f8:	2300      	movs	r3, #0
1000d1fa:	0a2d      	lsrs	r5, r5, #8
1000d1fc:	8015      	strh	r5, [r2, #0]
1000d1fe:	7096      	strb	r6, [r2, #2]
1000d200:	8093      	strh	r3, [r2, #4]
1000d202:	80d3      	strh	r3, [r2, #6]
1000d204:	8113      	strh	r3, [r2, #8]
1000d206:	3834      	subs	r0, #52	; 0x34
1000d208:	e01f      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d20a:	203b      	movs	r0, #59	; 0x3b
1000d20c:	2e00      	cmp	r6, #0
1000d20e:	d01c      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d210:	7216      	strb	r6, [r2, #8]
1000d212:	e003      	b.n	1000d21c <gapc_cmp_evt+0x98>
1000d214:	203b      	movs	r0, #59	; 0x3b
1000d216:	2e00      	cmp	r6, #0
1000d218:	d017      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d21a:	7116      	strb	r6, [r2, #4]
1000d21c:	3812      	subs	r0, #18
1000d21e:	e014      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d220:	203b      	movs	r0, #59	; 0x3b
1000d222:	2e00      	cmp	r6, #0
1000d224:	d011      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d226:	7093      	strb	r3, [r2, #2]
1000d228:	70d6      	strb	r6, [r2, #3]
1000d22a:	382a      	subs	r0, #42	; 0x2a
1000d22c:	e00d      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d22e:	203b      	movs	r0, #59	; 0x3b
1000d230:	2e00      	cmp	r6, #0
1000d232:	d00a      	beq.n	1000d24a <gapc_cmp_evt+0xc6>
1000d234:	0a2d      	lsrs	r5, r5, #8
1000d236:	7016      	strb	r6, [r2, #0]
1000d238:	8055      	strh	r5, [r2, #2]
1000d23a:	1d10      	adds	r0, r2, #4
1000d23c:	2100      	movs	r1, #0
1000d23e:	2205      	movs	r2, #5
1000d240:	4b03      	ldr	r3, [pc, #12]	; (1000d250 <gapc_cmp_evt+0xcc>)
1000d242:	4798      	blx	r3
1000d244:	2012      	movs	r0, #18
1000d246:	e000      	b.n	1000d24a <gapc_cmp_evt+0xc6>
1000d248:	2000      	movs	r0, #0
1000d24a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d24c:	1000d121 	.word	0x1000d121
1000d250:	1000f8ed 	.word	0x1000f8ed

1000d254 <gapc_connection_cfm_handler>:
1000d254:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d256:	b085      	sub	sp, #20
1000d258:	1c1d      	adds	r5, r3, #0
1000d25a:	ab0a      	add	r3, sp, #40	; 0x28
1000d25c:	781b      	ldrb	r3, [r3, #0]
1000d25e:	9201      	str	r2, [sp, #4]
1000d260:	9302      	str	r3, [sp, #8]
1000d262:	ab0b      	add	r3, sp, #44	; 0x2c
1000d264:	781b      	ldrb	r3, [r3, #0]
1000d266:	1c07      	adds	r7, r0, #0
1000d268:	9303      	str	r3, [sp, #12]
1000d26a:	ab0c      	add	r3, sp, #48	; 0x30
1000d26c:	881a      	ldrh	r2, [r3, #0]
1000d26e:	2302      	movs	r3, #2
1000d270:	1c0e      	adds	r6, r1, #0
1000d272:	4c23      	ldr	r4, [pc, #140]	; (1000d300 <gapc_connection_cfm_handler+0xac>)
1000d274:	1c39      	adds	r1, r7, #0
1000d276:	7023      	strb	r3, [r4, #0]
1000d278:	330c      	adds	r3, #12
1000d27a:	7063      	strb	r3, [r4, #1]
1000d27c:	70a3      	strb	r3, [r4, #2]
1000d27e:	4b21      	ldr	r3, [pc, #132]	; (1000d304 <gapc_connection_cfm_handler+0xb0>)
1000d280:	70e2      	strb	r2, [r4, #3]
1000d282:	881a      	ldrh	r2, [r3, #0]
1000d284:	881b      	ldrh	r3, [r3, #0]
1000d286:	7122      	strb	r2, [r4, #4]
1000d288:	0a1b      	lsrs	r3, r3, #8
1000d28a:	4f1f      	ldr	r7, [pc, #124]	; (1000d308 <gapc_connection_cfm_handler+0xb4>)
1000d28c:	2210      	movs	r2, #16
1000d28e:	481f      	ldr	r0, [pc, #124]	; (1000d30c <gapc_connection_cfm_handler+0xb8>)
1000d290:	7163      	strb	r3, [r4, #5]
1000d292:	47b8      	blx	r7
1000d294:	0a33      	lsrs	r3, r6, #8
1000d296:	7626      	strb	r6, [r4, #24]
1000d298:	7663      	strb	r3, [r4, #25]
1000d29a:	9901      	ldr	r1, [sp, #4]
1000d29c:	0c33      	lsrs	r3, r6, #16
1000d29e:	2210      	movs	r2, #16
1000d2a0:	0e36      	lsrs	r6, r6, #24
1000d2a2:	481b      	ldr	r0, [pc, #108]	; (1000d310 <gapc_connection_cfm_handler+0xbc>)
1000d2a4:	76a3      	strb	r3, [r4, #26]
1000d2a6:	76e6      	strb	r6, [r4, #27]
1000d2a8:	47b8      	blx	r7
1000d2aa:	1c23      	adds	r3, r4, #0
1000d2ac:	332c      	adds	r3, #44	; 0x2c
1000d2ae:	701d      	strb	r5, [r3, #0]
1000d2b0:	1c23      	adds	r3, r4, #0
1000d2b2:	0a2a      	lsrs	r2, r5, #8
1000d2b4:	332d      	adds	r3, #45	; 0x2d
1000d2b6:	701a      	strb	r2, [r3, #0]
1000d2b8:	1c23      	adds	r3, r4, #0
1000d2ba:	0c2a      	lsrs	r2, r5, #16
1000d2bc:	332e      	adds	r3, #46	; 0x2e
1000d2be:	701a      	strb	r2, [r3, #0]
1000d2c0:	1c23      	adds	r3, r4, #0
1000d2c2:	0e2d      	lsrs	r5, r5, #24
1000d2c4:	332f      	adds	r3, #47	; 0x2f
1000d2c6:	466a      	mov	r2, sp
1000d2c8:	701d      	strb	r5, [r3, #0]
1000d2ca:	1c23      	adds	r3, r4, #0
1000d2cc:	7a12      	ldrb	r2, [r2, #8]
1000d2ce:	3330      	adds	r3, #48	; 0x30
1000d2d0:	701a      	strb	r2, [r3, #0]
1000d2d2:	1c23      	adds	r3, r4, #0
1000d2d4:	2500      	movs	r5, #0
1000d2d6:	3331      	adds	r3, #49	; 0x31
1000d2d8:	466a      	mov	r2, sp
1000d2da:	701d      	strb	r5, [r3, #0]
1000d2dc:	1c23      	adds	r3, r4, #0
1000d2de:	7b12      	ldrb	r2, [r2, #12]
1000d2e0:	3332      	adds	r3, #50	; 0x32
1000d2e2:	701a      	strb	r2, [r3, #0]
1000d2e4:	1c23      	adds	r3, r4, #0
1000d2e6:	3333      	adds	r3, #51	; 0x33
1000d2e8:	701d      	strb	r5, [r3, #0]
1000d2ea:	232c      	movs	r3, #44	; 0x2c
1000d2ec:	1c20      	adds	r0, r4, #0
1000d2ee:	71a3      	strb	r3, [r4, #6]
1000d2f0:	2134      	movs	r1, #52	; 0x34
1000d2f2:	4b08      	ldr	r3, [pc, #32]	; (1000d314 <gapc_connection_cfm_handler+0xc0>)
1000d2f4:	71e5      	strb	r5, [r4, #7]
1000d2f6:	4798      	blx	r3
1000d2f8:	1c28      	adds	r0, r5, #0
1000d2fa:	b005      	add	sp, #20
1000d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2fe:	46c0      	nop			; (mov r8, r8)
1000d300:	100135b8 	.word	0x100135b8
1000d304:	10013248 	.word	0x10013248
1000d308:	1000f8db 	.word	0x1000f8db
1000d30c:	100135c0 	.word	0x100135c0
1000d310:	100135d4 	.word	0x100135d4
1000d314:	1000cf59 	.word	0x1000cf59

1000d318 <gapc_con_req_ind>:
1000d318:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d31a:	7845      	ldrb	r5, [r0, #1]
1000d31c:	7803      	ldrb	r3, [r0, #0]
1000d31e:	4c30      	ldr	r4, [pc, #192]	; (1000d3e0 <gapc_con_req_ind+0xc8>)
1000d320:	022d      	lsls	r5, r5, #8
1000d322:	431d      	orrs	r5, r3
1000d324:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d326:	78c3      	ldrb	r3, [r0, #3]
1000d328:	7882      	ldrb	r2, [r0, #2]
1000d32a:	b08b      	sub	sp, #44	; 0x2c
1000d32c:	021b      	lsls	r3, r3, #8
1000d32e:	431a      	orrs	r2, r3
1000d330:	466b      	mov	r3, sp
1000d332:	9205      	str	r2, [sp, #20]
1000d334:	8a9b      	ldrh	r3, [r3, #20]
1000d336:	2120      	movs	r1, #32
1000d338:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d33a:	7943      	ldrb	r3, [r0, #5]
1000d33c:	7902      	ldrb	r2, [r0, #4]
1000d33e:	021b      	lsls	r3, r3, #8
1000d340:	431a      	orrs	r2, r3
1000d342:	466b      	mov	r3, sp
1000d344:	9206      	str	r2, [sp, #24]
1000d346:	8b1b      	ldrh	r3, [r3, #24]
1000d348:	1c06      	adds	r6, r0, #0
1000d34a:	8623      	strh	r3, [r4, #48]	; 0x30
1000d34c:	79c3      	ldrb	r3, [r0, #7]
1000d34e:	7982      	ldrb	r2, [r0, #6]
1000d350:	021b      	lsls	r3, r3, #8
1000d352:	431a      	orrs	r2, r3
1000d354:	466b      	mov	r3, sp
1000d356:	9207      	str	r2, [sp, #28]
1000d358:	466a      	mov	r2, sp
1000d35a:	8b9b      	ldrh	r3, [r3, #28]
1000d35c:	1852      	adds	r2, r2, r1
1000d35e:	8663      	strh	r3, [r4, #50]	; 0x32
1000d360:	7a43      	ldrb	r3, [r0, #9]
1000d362:	1c01      	adds	r1, r0, #0
1000d364:	9308      	str	r3, [sp, #32]
1000d366:	1c23      	adds	r3, r4, #0
1000d368:	7812      	ldrb	r2, [r2, #0]
1000d36a:	3377      	adds	r3, #119	; 0x77
1000d36c:	3478      	adds	r4, #120	; 0x78
1000d36e:	701a      	strb	r2, [r3, #0]
1000d370:	310a      	adds	r1, #10
1000d372:	2206      	movs	r2, #6
1000d374:	4b1b      	ldr	r3, [pc, #108]	; (1000d3e4 <gapc_con_req_ind+0xcc>)
1000d376:	1c20      	adds	r0, r4, #0
1000d378:	4798      	blx	r3
1000d37a:	7c33      	ldrb	r3, [r6, #16]
1000d37c:	9309      	str	r3, [sp, #36]	; 0x24
1000d37e:	4b1a      	ldr	r3, [pc, #104]	; (1000d3e8 <gapc_con_req_ind+0xd0>)
1000d380:	4798      	blx	r3
1000d382:	4e1a      	ldr	r6, [pc, #104]	; (1000d3ec <gapc_con_req_ind+0xd4>)
1000d384:	1e07      	subs	r7, r0, #0
1000d386:	2f07      	cmp	r7, #7
1000d388:	d81b      	bhi.n	1000d3c2 <gapc_con_req_ind+0xaa>
1000d38a:	2312      	movs	r3, #18
1000d38c:	4343      	muls	r3, r0
1000d38e:	18f0      	adds	r0, r6, r3
1000d390:	8145      	strh	r5, [r0, #10]
1000d392:	4669      	mov	r1, sp
1000d394:	2524      	movs	r5, #36	; 0x24
1000d396:	1949      	adds	r1, r1, r5
1000d398:	7809      	ldrb	r1, [r1, #0]
1000d39a:	2206      	movs	r2, #6
1000d39c:	54f1      	strb	r1, [r6, r3]
1000d39e:	2120      	movs	r1, #32
1000d3a0:	466b      	mov	r3, sp
1000d3a2:	185b      	adds	r3, r3, r1
1000d3a4:	781b      	ldrb	r3, [r3, #0]
1000d3a6:	1c21      	adds	r1, r4, #0
1000d3a8:	7043      	strb	r3, [r0, #1]
1000d3aa:	466b      	mov	r3, sp
1000d3ac:	8a9b      	ldrh	r3, [r3, #20]
1000d3ae:	3002      	adds	r0, #2
1000d3b0:	8143      	strh	r3, [r0, #10]
1000d3b2:	466b      	mov	r3, sp
1000d3b4:	8b1b      	ldrh	r3, [r3, #24]
1000d3b6:	8183      	strh	r3, [r0, #12]
1000d3b8:	466b      	mov	r3, sp
1000d3ba:	8b9b      	ldrh	r3, [r3, #28]
1000d3bc:	81c3      	strh	r3, [r0, #14]
1000d3be:	4b09      	ldr	r3, [pc, #36]	; (1000d3e4 <gapc_con_req_ind+0xcc>)
1000d3c0:	4798      	blx	r3
1000d3c2:	2112      	movs	r1, #18
1000d3c4:	2300      	movs	r3, #0
1000d3c6:	434f      	muls	r7, r1
1000d3c8:	9300      	str	r3, [sp, #0]
1000d3ca:	9301      	str	r3, [sp, #4]
1000d3cc:	19f6      	adds	r6, r6, r7
1000d3ce:	8971      	ldrh	r1, [r6, #10]
1000d3d0:	4a07      	ldr	r2, [pc, #28]	; (1000d3f0 <gapc_con_req_ind+0xd8>)
1000d3d2:	9102      	str	r1, [sp, #8]
1000d3d4:	1c10      	adds	r0, r2, #0
1000d3d6:	1c19      	adds	r1, r3, #0
1000d3d8:	4c06      	ldr	r4, [pc, #24]	; (1000d3f4 <gapc_con_req_ind+0xdc>)
1000d3da:	47a0      	blx	r4
1000d3dc:	b00b      	add	sp, #44	; 0x2c
1000d3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3e0:	100132da 	.word	0x100132da
1000d3e4:	1000f8db 	.word	0x1000f8db
1000d3e8:	1000d15d 	.word	0x1000d15d
1000d3ec:	1001324a 	.word	0x1001324a
1000d3f0:	100125d2 	.word	0x100125d2
1000d3f4:	1000d255 	.word	0x1000d255

1000d3f8 <gapc_disconnect_cmd_handler>:
1000d3f8:	2204      	movs	r2, #4
1000d3fa:	b510      	push	{r4, lr}
1000d3fc:	4b0c      	ldr	r3, [pc, #48]	; (1000d430 <gapc_disconnect_cmd_handler+0x38>)
1000d3fe:	2400      	movs	r4, #0
1000d400:	701a      	strb	r2, [r3, #0]
1000d402:	320a      	adds	r2, #10
1000d404:	705a      	strb	r2, [r3, #1]
1000d406:	709a      	strb	r2, [r3, #2]
1000d408:	4a0a      	ldr	r2, [pc, #40]	; (1000d434 <gapc_disconnect_cmd_handler+0x3c>)
1000d40a:	70d9      	strb	r1, [r3, #3]
1000d40c:	8811      	ldrh	r1, [r2, #0]
1000d40e:	8812      	ldrh	r2, [r2, #0]
1000d410:	7119      	strb	r1, [r3, #4]
1000d412:	0a12      	lsrs	r2, r2, #8
1000d414:	715a      	strb	r2, [r3, #5]
1000d416:	2201      	movs	r2, #1
1000d418:	721a      	strb	r2, [r3, #8]
1000d41a:	1892      	adds	r2, r2, r2
1000d41c:	7258      	strb	r0, [r3, #9]
1000d41e:	719a      	strb	r2, [r3, #6]
1000d420:	71dc      	strb	r4, [r3, #7]
1000d422:	1c18      	adds	r0, r3, #0
1000d424:	210a      	movs	r1, #10
1000d426:	4b04      	ldr	r3, [pc, #16]	; (1000d438 <gapc_disconnect_cmd_handler+0x40>)
1000d428:	4798      	blx	r3
1000d42a:	1c20      	adds	r0, r4, #0
1000d42c:	bd10      	pop	{r4, pc}
1000d42e:	46c0      	nop			; (mov r8, r8)
1000d430:	100135b8 	.word	0x100135b8
1000d434:	10013248 	.word	0x10013248
1000d438:	1000cf59 	.word	0x1000cf59

1000d43c <gapc_disconnect_ind>:
1000d43c:	1c02      	adds	r2, r0, #0
1000d43e:	b508      	push	{r3, lr}
1000d440:	7843      	ldrb	r3, [r0, #1]
1000d442:	7800      	ldrb	r0, [r0, #0]
1000d444:	021b      	lsls	r3, r3, #8
1000d446:	4318      	orrs	r0, r3
1000d448:	8008      	strh	r0, [r1, #0]
1000d44a:	7893      	ldrb	r3, [r2, #2]
1000d44c:	708b      	strb	r3, [r1, #2]
1000d44e:	2100      	movs	r1, #0
1000d450:	4b05      	ldr	r3, [pc, #20]	; (1000d468 <gapc_disconnect_ind+0x2c>)
1000d452:	4798      	blx	r3
1000d454:	2807      	cmp	r0, #7
1000d456:	d806      	bhi.n	1000d466 <gapc_disconnect_ind+0x2a>
1000d458:	2312      	movs	r3, #18
1000d45a:	4358      	muls	r0, r3
1000d45c:	4b03      	ldr	r3, [pc, #12]	; (1000d46c <gapc_disconnect_ind+0x30>)
1000d45e:	1818      	adds	r0, r3, r0
1000d460:	2301      	movs	r3, #1
1000d462:	425b      	negs	r3, r3
1000d464:	8143      	strh	r3, [r0, #10]
1000d466:	bd08      	pop	{r3, pc}
1000d468:	1000d121 	.word	0x1000d121
1000d46c:	1001324a 	.word	0x1001324a

1000d470 <gapc_bond_cmd_handler>:
1000d470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d472:	9300      	str	r3, [sp, #0]
1000d474:	2312      	movs	r3, #18
1000d476:	1c04      	adds	r4, r0, #0
1000d478:	a808      	add	r0, sp, #32
1000d47a:	7807      	ldrb	r7, [r0, #0]
1000d47c:	a809      	add	r0, sp, #36	; 0x24
1000d47e:	7806      	ldrb	r6, [r0, #0]
1000d480:	a80a      	add	r0, sp, #40	; 0x28
1000d482:	7805      	ldrb	r5, [r0, #0]
1000d484:	a80b      	add	r0, sp, #44	; 0x2c
1000d486:	7800      	ldrb	r0, [r0, #0]
1000d488:	9001      	str	r0, [sp, #4]
1000d48a:	4810      	ldr	r0, [pc, #64]	; (1000d4cc <gapc_bond_cmd_handler+0x5c>)
1000d48c:	7003      	strb	r3, [r0, #0]
1000d48e:	230e      	movs	r3, #14
1000d490:	70c4      	strb	r4, [r0, #3]
1000d492:	4c0f      	ldr	r4, [pc, #60]	; (1000d4d0 <gapc_bond_cmd_handler+0x60>)
1000d494:	7043      	strb	r3, [r0, #1]
1000d496:	7083      	strb	r3, [r0, #2]
1000d498:	8823      	ldrh	r3, [r4, #0]
1000d49a:	8824      	ldrh	r4, [r4, #0]
1000d49c:	7103      	strb	r3, [r0, #4]
1000d49e:	466b      	mov	r3, sp
1000d4a0:	781b      	ldrb	r3, [r3, #0]
1000d4a2:	0a24      	lsrs	r4, r4, #8
1000d4a4:	72c3      	strb	r3, [r0, #11]
1000d4a6:	466b      	mov	r3, sp
1000d4a8:	791b      	ldrb	r3, [r3, #4]
1000d4aa:	7144      	strb	r4, [r0, #5]
1000d4ac:	73c3      	strb	r3, [r0, #15]
1000d4ae:	2308      	movs	r3, #8
1000d4b0:	7183      	strb	r3, [r0, #6]
1000d4b2:	2300      	movs	r3, #0
1000d4b4:	240a      	movs	r4, #10
1000d4b6:	7241      	strb	r1, [r0, #9]
1000d4b8:	71c3      	strb	r3, [r0, #7]
1000d4ba:	2110      	movs	r1, #16
1000d4bc:	4b05      	ldr	r3, [pc, #20]	; (1000d4d4 <gapc_bond_cmd_handler+0x64>)
1000d4be:	7307      	strb	r7, [r0, #12]
1000d4c0:	7346      	strb	r6, [r0, #13]
1000d4c2:	7385      	strb	r5, [r0, #14]
1000d4c4:	7204      	strb	r4, [r0, #8]
1000d4c6:	7282      	strb	r2, [r0, #10]
1000d4c8:	4798      	blx	r3
1000d4ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d4cc:	100135b8 	.word	0x100135b8
1000d4d0:	10013248 	.word	0x10013248
1000d4d4:	1000cf59 	.word	0x1000cf59

1000d4d8 <gapc_bond_ind>:
1000d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d4da:	780e      	ldrb	r6, [r1, #0]
1000d4dc:	1c03      	adds	r3, r0, #0
1000d4de:	1eb0      	subs	r0, r6, #2
1000d4e0:	2805      	cmp	r0, #5
1000d4e2:	d85d      	bhi.n	1000d5a0 <gapc_bond_ind+0xc8>
1000d4e4:	1c15      	adds	r5, r2, #0
1000d4e6:	1c0c      	adds	r4, r1, #0
1000d4e8:	f001 f968 	bl	1000e7bc <__gnu_thumb1_case_uqi>
1000d4ec:	2f5a030d 	.word	0x2f5a030d
1000d4f0:	4740      	.short	0x4740
1000d4f2:	2009      	movs	r0, #9
1000d4f4:	2a00      	cmp	r2, #0
1000d4f6:	d054      	beq.n	1000d5a2 <gapc_bond_ind+0xca>
1000d4f8:	0a1b      	lsrs	r3, r3, #8
1000d4fa:	8053      	strh	r3, [r2, #2]
1000d4fc:	788b      	ldrb	r3, [r1, #2]
1000d4fe:	4829      	ldr	r0, [pc, #164]	; (1000d5a4 <gapc_bond_ind+0xcc>)
1000d500:	7113      	strb	r3, [r2, #4]
1000d502:	2100      	movs	r1, #0
1000d504:	e01c      	b.n	1000d540 <gapc_bond_ind+0x68>
1000d506:	2009      	movs	r0, #9
1000d508:	2a00      	cmp	r2, #0
1000d50a:	d04a      	beq.n	1000d5a2 <gapc_bond_ind+0xca>
1000d50c:	4c25      	ldr	r4, [pc, #148]	; (1000d5a4 <gapc_bond_ind+0xcc>)
1000d50e:	0a1b      	lsrs	r3, r3, #8
1000d510:	8053      	strh	r3, [r2, #2]
1000d512:	788b      	ldrb	r3, [r1, #2]
1000d514:	2700      	movs	r7, #0
1000d516:	1c10      	adds	r0, r2, #0
1000d518:	1c21      	adds	r1, r4, #0
1000d51a:	7013      	strb	r3, [r2, #0]
1000d51c:	4e22      	ldr	r6, [pc, #136]	; (1000d5a8 <gapc_bond_ind+0xd0>)
1000d51e:	7117      	strb	r7, [r2, #4]
1000d520:	312e      	adds	r1, #46	; 0x2e
1000d522:	2217      	movs	r2, #23
1000d524:	3032      	adds	r0, #50	; 0x32
1000d526:	47b0      	blx	r6
1000d528:	1c28      	adds	r0, r5, #0
1000d52a:	1c21      	adds	r1, r4, #0
1000d52c:	2210      	movs	r2, #16
1000d52e:	311e      	adds	r1, #30
1000d530:	3022      	adds	r0, #34	; 0x22
1000d532:	47b0      	blx	r6
1000d534:	1ca1      	adds	r1, r4, #2
1000d536:	1da8      	adds	r0, r5, #6
1000d538:	221c      	movs	r2, #28
1000d53a:	47b0      	blx	r6
1000d53c:	1c20      	adds	r0, r4, #0
1000d53e:	1c39      	adds	r1, r7, #0
1000d540:	2246      	movs	r2, #70	; 0x46
1000d542:	4b1a      	ldr	r3, [pc, #104]	; (1000d5ac <gapc_bond_ind+0xd4>)
1000d544:	4798      	blx	r3
1000d546:	2009      	movs	r0, #9
1000d548:	e02b      	b.n	1000d5a2 <gapc_bond_ind+0xca>
1000d54a:	4d16      	ldr	r5, [pc, #88]	; (1000d5a4 <gapc_bond_ind+0xcc>)
1000d54c:	3102      	adds	r1, #2
1000d54e:	1c28      	adds	r0, r5, #0
1000d550:	2210      	movs	r2, #16
1000d552:	4e15      	ldr	r6, [pc, #84]	; (1000d5a8 <gapc_bond_ind+0xd0>)
1000d554:	302e      	adds	r0, #46	; 0x2e
1000d556:	47b0      	blx	r6
1000d558:	1c28      	adds	r0, r5, #0
1000d55a:	1c21      	adds	r1, r4, #0
1000d55c:	303f      	adds	r0, #63	; 0x3f
1000d55e:	3112      	adds	r1, #18
1000d560:	2206      	movs	r2, #6
1000d562:	47b0      	blx	r6
1000d564:	7e23      	ldrb	r3, [r4, #24]
1000d566:	353e      	adds	r5, #62	; 0x3e
1000d568:	702b      	strb	r3, [r5, #0]
1000d56a:	e019      	b.n	1000d5a0 <gapc_bond_ind+0xc8>
1000d56c:	480d      	ldr	r0, [pc, #52]	; (1000d5a4 <gapc_bond_ind+0xcc>)
1000d56e:	3102      	adds	r1, #2
1000d570:	2210      	movs	r2, #16
1000d572:	4b0d      	ldr	r3, [pc, #52]	; (1000d5a8 <gapc_bond_ind+0xd0>)
1000d574:	301e      	adds	r0, #30
1000d576:	4798      	blx	r3
1000d578:	e012      	b.n	1000d5a0 <gapc_bond_ind+0xc8>
1000d57a:	4d0a      	ldr	r5, [pc, #40]	; (1000d5a4 <gapc_bond_ind+0xcc>)
1000d57c:	3102      	adds	r1, #2
1000d57e:	2210      	movs	r2, #16
1000d580:	4e09      	ldr	r6, [pc, #36]	; (1000d5a8 <gapc_bond_ind+0xd0>)
1000d582:	1ca8      	adds	r0, r5, #2
1000d584:	47b0      	blx	r6
1000d586:	1c28      	adds	r0, r5, #0
1000d588:	1c21      	adds	r1, r4, #0
1000d58a:	7ce3      	ldrb	r3, [r4, #19]
1000d58c:	7ca2      	ldrb	r2, [r4, #18]
1000d58e:	021b      	lsls	r3, r3, #8
1000d590:	4313      	orrs	r3, r2
1000d592:	3014      	adds	r0, #20
1000d594:	3114      	adds	r1, #20
1000d596:	2208      	movs	r2, #8
1000d598:	826b      	strh	r3, [r5, #18]
1000d59a:	47b0      	blx	r6
1000d59c:	7f23      	ldrb	r3, [r4, #28]
1000d59e:	772b      	strb	r3, [r5, #28]
1000d5a0:	2000      	movs	r0, #0
1000d5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d5a4:	1001258c 	.word	0x1001258c
1000d5a8:	1000f8db 	.word	0x1000f8db
1000d5ac:	1000f8ed 	.word	0x1000f8ed

1000d5b0 <gapc_bond_req_ind>:
1000d5b0:	b570      	push	{r4, r5, r6, lr}
1000d5b2:	780c      	ldrb	r4, [r1, #0]
1000d5b4:	1c03      	adds	r3, r0, #0
1000d5b6:	7849      	ldrb	r1, [r1, #1]
1000d5b8:	2c07      	cmp	r4, #7
1000d5ba:	d85c      	bhi.n	1000d676 <gapc_bond_req_ind+0xc6>
1000d5bc:	1c20      	adds	r0, r4, #0
1000d5be:	f001 f8fd 	bl	1000e7bc <__gnu_thumb1_case_uqi>
1000d5c2:	5a04      	.short	0x5a04
1000d5c4:	5a0b5a5a 	.word	0x5a0b5a5a
1000d5c8:	1f1f      	.short	0x1f1f
1000d5ca:	200a      	movs	r0, #10
1000d5cc:	2a00      	cmp	r2, #0
1000d5ce:	d053      	beq.n	1000d678 <gapc_bond_req_ind+0xc8>
1000d5d0:	0a1b      	lsrs	r3, r3, #8
1000d5d2:	8013      	strh	r3, [r2, #0]
1000d5d4:	7091      	strb	r1, [r2, #2]
1000d5d6:	e04f      	b.n	1000d678 <gapc_bond_req_ind+0xc8>
1000d5d8:	2a00      	cmp	r2, #0
1000d5da:	d00b      	beq.n	1000d5f4 <gapc_bond_req_ind+0x44>
1000d5dc:	0a1b      	lsrs	r3, r3, #8
1000d5de:	8013      	strh	r3, [r2, #0]
1000d5e0:	2900      	cmp	r1, #0
1000d5e2:	d102      	bne.n	1000d5ea <gapc_bond_req_ind+0x3a>
1000d5e4:	2301      	movs	r3, #1
1000d5e6:	7093      	strb	r3, [r2, #2]
1000d5e8:	e004      	b.n	1000d5f4 <gapc_bond_req_ind+0x44>
1000d5ea:	2300      	movs	r3, #0
1000d5ec:	7093      	strb	r3, [r2, #2]
1000d5ee:	2902      	cmp	r1, #2
1000d5f0:	d102      	bne.n	1000d5f8 <gapc_bond_req_ind+0x48>
1000d5f2:	70d3      	strb	r3, [r2, #3]
1000d5f4:	200c      	movs	r0, #12
1000d5f6:	e03f      	b.n	1000d678 <gapc_bond_req_ind+0xc8>
1000d5f8:	2901      	cmp	r1, #1
1000d5fa:	d1fb      	bne.n	1000d5f4 <gapc_bond_req_ind+0x44>
1000d5fc:	70d1      	strb	r1, [r2, #3]
1000d5fe:	e7f9      	b.n	1000d5f4 <gapc_bond_req_ind+0x44>
1000d600:	2214      	movs	r2, #20
1000d602:	481e      	ldr	r0, [pc, #120]	; (1000d67c <gapc_bond_req_ind+0xcc>)
1000d604:	0a1b      	lsrs	r3, r3, #8
1000d606:	70c3      	strb	r3, [r0, #3]
1000d608:	4b1d      	ldr	r3, [pc, #116]	; (1000d680 <gapc_bond_req_ind+0xd0>)
1000d60a:	7002      	strb	r2, [r0, #0]
1000d60c:	3a06      	subs	r2, #6
1000d60e:	7042      	strb	r2, [r0, #1]
1000d610:	7082      	strb	r2, [r0, #2]
1000d612:	881a      	ldrh	r2, [r3, #0]
1000d614:	881b      	ldrh	r3, [r3, #0]
1000d616:	4e1b      	ldr	r6, [pc, #108]	; (1000d684 <gapc_bond_req_ind+0xd4>)
1000d618:	0a1b      	lsrs	r3, r3, #8
1000d61a:	7143      	strb	r3, [r0, #5]
1000d61c:	2301      	movs	r3, #1
1000d61e:	7102      	strb	r2, [r0, #4]
1000d620:	7204      	strb	r4, [r0, #8]
1000d622:	7243      	strb	r3, [r0, #9]
1000d624:	1c05      	adds	r5, r0, #0
1000d626:	1c31      	adds	r1, r6, #0
1000d628:	300a      	adds	r0, #10
1000d62a:	2c07      	cmp	r4, #7
1000d62c:	d116      	bne.n	1000d65c <gapc_bond_req_ind+0xac>
1000d62e:	317e      	adds	r1, #126	; 0x7e
1000d630:	2210      	movs	r2, #16
1000d632:	4c15      	ldr	r4, [pc, #84]	; (1000d688 <gapc_bond_req_ind+0xd8>)
1000d634:	47a0      	blx	r4
1000d636:	1c33      	adds	r3, r6, #0
1000d638:	1c31      	adds	r1, r6, #0
1000d63a:	1c28      	adds	r0, r5, #0
1000d63c:	338e      	adds	r3, #142	; 0x8e
1000d63e:	881b      	ldrh	r3, [r3, #0]
1000d640:	3190      	adds	r1, #144	; 0x90
1000d642:	76ab      	strb	r3, [r5, #26]
1000d644:	2208      	movs	r2, #8
1000d646:	0a1b      	lsrs	r3, r3, #8
1000d648:	301c      	adds	r0, #28
1000d64a:	76eb      	strb	r3, [r5, #27]
1000d64c:	47a0      	blx	r4
1000d64e:	1c31      	adds	r1, r6, #0
1000d650:	3198      	adds	r1, #152	; 0x98
1000d652:	780a      	ldrb	r2, [r1, #0]
1000d654:	1d6b      	adds	r3, r5, #5
1000d656:	77da      	strb	r2, [r3, #31]
1000d658:	2125      	movs	r1, #37	; 0x25
1000d65a:	e004      	b.n	1000d666 <gapc_bond_req_ind+0xb6>
1000d65c:	319a      	adds	r1, #154	; 0x9a
1000d65e:	2210      	movs	r2, #16
1000d660:	4b09      	ldr	r3, [pc, #36]	; (1000d688 <gapc_bond_req_ind+0xd8>)
1000d662:	4798      	blx	r3
1000d664:	211a      	movs	r1, #26
1000d666:	1c0b      	adds	r3, r1, #0
1000d668:	2400      	movs	r4, #0
1000d66a:	3b08      	subs	r3, #8
1000d66c:	71ab      	strb	r3, [r5, #6]
1000d66e:	1c28      	adds	r0, r5, #0
1000d670:	4b06      	ldr	r3, [pc, #24]	; (1000d68c <gapc_bond_req_ind+0xdc>)
1000d672:	71ec      	strb	r4, [r5, #7]
1000d674:	4798      	blx	r3
1000d676:	2000      	movs	r0, #0
1000d678:	bd70      	pop	{r4, r5, r6, pc}
1000d67a:	46c0      	nop			; (mov r8, r8)
1000d67c:	100135b8 	.word	0x100135b8
1000d680:	10013248 	.word	0x10013248
1000d684:	100132da 	.word	0x100132da
1000d688:	1000f8db 	.word	0x1000f8db
1000d68c:	1000cf59 	.word	0x1000cf59

1000d690 <gapc_bond_cfm_handler_pair_resp>:
1000d690:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d692:	b085      	sub	sp, #20
1000d694:	1c07      	adds	r7, r0, #0
1000d696:	a80a      	add	r0, sp, #40	; 0x28
1000d698:	7806      	ldrb	r6, [r0, #0]
1000d69a:	a80b      	add	r0, sp, #44	; 0x2c
1000d69c:	7805      	ldrb	r5, [r0, #0]
1000d69e:	a80c      	add	r0, sp, #48	; 0x30
1000d6a0:	7800      	ldrb	r0, [r0, #0]
1000d6a2:	2414      	movs	r4, #20
1000d6a4:	9002      	str	r0, [sp, #8]
1000d6a6:	a80d      	add	r0, sp, #52	; 0x34
1000d6a8:	7800      	ldrb	r0, [r0, #0]
1000d6aa:	9301      	str	r3, [sp, #4]
1000d6ac:	9003      	str	r0, [sp, #12]
1000d6ae:	a80e      	add	r0, sp, #56	; 0x38
1000d6b0:	8800      	ldrh	r0, [r0, #0]
1000d6b2:	4684      	mov	ip, r0
1000d6b4:	4812      	ldr	r0, [pc, #72]	; (1000d700 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d6b6:	7004      	strb	r4, [r0, #0]
1000d6b8:	3c06      	subs	r4, #6
1000d6ba:	7044      	strb	r4, [r0, #1]
1000d6bc:	7084      	strb	r4, [r0, #2]
1000d6be:	4664      	mov	r4, ip
1000d6c0:	70c4      	strb	r4, [r0, #3]
1000d6c2:	4c10      	ldr	r4, [pc, #64]	; (1000d704 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d6c4:	7247      	strb	r7, [r0, #9]
1000d6c6:	8823      	ldrh	r3, [r4, #0]
1000d6c8:	8824      	ldrh	r4, [r4, #0]
1000d6ca:	7103      	strb	r3, [r0, #4]
1000d6cc:	466b      	mov	r3, sp
1000d6ce:	791b      	ldrb	r3, [r3, #4]
1000d6d0:	0a24      	lsrs	r4, r4, #8
1000d6d2:	7303      	strb	r3, [r0, #12]
1000d6d4:	466b      	mov	r3, sp
1000d6d6:	7a1b      	ldrb	r3, [r3, #8]
1000d6d8:	7144      	strb	r4, [r0, #5]
1000d6da:	73c3      	strb	r3, [r0, #15]
1000d6dc:	466b      	mov	r3, sp
1000d6de:	7b1b      	ldrb	r3, [r3, #12]
1000d6e0:	2401      	movs	r4, #1
1000d6e2:	7403      	strb	r3, [r0, #16]
1000d6e4:	2309      	movs	r3, #9
1000d6e6:	7183      	strb	r3, [r0, #6]
1000d6e8:	2300      	movs	r3, #0
1000d6ea:	7204      	strb	r4, [r0, #8]
1000d6ec:	7281      	strb	r1, [r0, #10]
1000d6ee:	72c2      	strb	r2, [r0, #11]
1000d6f0:	7346      	strb	r6, [r0, #13]
1000d6f2:	7385      	strb	r5, [r0, #14]
1000d6f4:	71c3      	strb	r3, [r0, #7]
1000d6f6:	2111      	movs	r1, #17
1000d6f8:	4b03      	ldr	r3, [pc, #12]	; (1000d708 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d6fa:	4798      	blx	r3
1000d6fc:	b005      	add	sp, #20
1000d6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d700:	100135b8 	.word	0x100135b8
1000d704:	10013248 	.word	0x10013248
1000d708:	1000cf59 	.word	0x1000cf59

1000d70c <gapc_bond_cfm_handler_key_exch>:
1000d70c:	b538      	push	{r3, r4, r5, lr}
1000d70e:	2514      	movs	r5, #20
1000d710:	4c0d      	ldr	r4, [pc, #52]	; (1000d748 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d712:	70e3      	strb	r3, [r4, #3]
1000d714:	4b0d      	ldr	r3, [pc, #52]	; (1000d74c <gapc_bond_cfm_handler_key_exch+0x40>)
1000d716:	7025      	strb	r5, [r4, #0]
1000d718:	3d06      	subs	r5, #6
1000d71a:	7065      	strb	r5, [r4, #1]
1000d71c:	70a5      	strb	r5, [r4, #2]
1000d71e:	881d      	ldrh	r5, [r3, #0]
1000d720:	881b      	ldrh	r3, [r3, #0]
1000d722:	7220      	strb	r0, [r4, #8]
1000d724:	0a1b      	lsrs	r3, r3, #8
1000d726:	7163      	strb	r3, [r4, #5]
1000d728:	7261      	strb	r1, [r4, #9]
1000d72a:	4b09      	ldr	r3, [pc, #36]	; (1000d750 <gapc_bond_cfm_handler_key_exch+0x44>)
1000d72c:	1c11      	adds	r1, r2, #0
1000d72e:	4809      	ldr	r0, [pc, #36]	; (1000d754 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d730:	2210      	movs	r2, #16
1000d732:	7125      	strb	r5, [r4, #4]
1000d734:	4798      	blx	r3
1000d736:	2312      	movs	r3, #18
1000d738:	71a3      	strb	r3, [r4, #6]
1000d73a:	2300      	movs	r3, #0
1000d73c:	1c20      	adds	r0, r4, #0
1000d73e:	71e3      	strb	r3, [r4, #7]
1000d740:	211a      	movs	r1, #26
1000d742:	4b05      	ldr	r3, [pc, #20]	; (1000d758 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d744:	4798      	blx	r3
1000d746:	bd38      	pop	{r3, r4, r5, pc}
1000d748:	100135b8 	.word	0x100135b8
1000d74c:	10013248 	.word	0x10013248
1000d750:	1000f8db 	.word	0x1000f8db
1000d754:	100135c2 	.word	0x100135c2
1000d758:	1000cf59 	.word	0x1000cf59

1000d75c <gapc_encrypt_cmd_handler>:
1000d75c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d75e:	2500      	movs	r5, #0
1000d760:	b089      	sub	sp, #36	; 0x24
1000d762:	9306      	str	r3, [sp, #24]
1000d764:	ab0e      	add	r3, sp, #56	; 0x38
1000d766:	781b      	ldrb	r3, [r3, #0]
1000d768:	1c17      	adds	r7, r2, #0
1000d76a:	9307      	str	r3, [sp, #28]
1000d76c:	ab0f      	add	r3, sp, #60	; 0x3c
1000d76e:	781b      	ldrb	r3, [r3, #0]
1000d770:	4a19      	ldr	r2, [pc, #100]	; (1000d7d8 <gapc_encrypt_cmd_handler+0x7c>)
1000d772:	1c06      	adds	r6, r0, #0
1000d774:	9105      	str	r1, [sp, #20]
1000d776:	9300      	str	r3, [sp, #0]
1000d778:	9002      	str	r0, [sp, #8]
1000d77a:	1c29      	adds	r1, r5, #0
1000d77c:	1c2b      	adds	r3, r5, #0
1000d77e:	9501      	str	r5, [sp, #4]
1000d780:	1c10      	adds	r0, r2, #0
1000d782:	4c16      	ldr	r4, [pc, #88]	; (1000d7dc <gapc_encrypt_cmd_handler+0x80>)
1000d784:	47a0      	blx	r4
1000d786:	2316      	movs	r3, #22
1000d788:	4c15      	ldr	r4, [pc, #84]	; (1000d7e0 <gapc_encrypt_cmd_handler+0x84>)
1000d78a:	9905      	ldr	r1, [sp, #20]
1000d78c:	7023      	strb	r3, [r4, #0]
1000d78e:	3b08      	subs	r3, #8
1000d790:	7063      	strb	r3, [r4, #1]
1000d792:	70a3      	strb	r3, [r4, #2]
1000d794:	4b13      	ldr	r3, [pc, #76]	; (1000d7e4 <gapc_encrypt_cmd_handler+0x88>)
1000d796:	70e6      	strb	r6, [r4, #3]
1000d798:	881a      	ldrh	r2, [r3, #0]
1000d79a:	881b      	ldrh	r3, [r3, #0]
1000d79c:	7122      	strb	r2, [r4, #4]
1000d79e:	0a1b      	lsrs	r3, r3, #8
1000d7a0:	7163      	strb	r3, [r4, #5]
1000d7a2:	230b      	movs	r3, #11
1000d7a4:	4e10      	ldr	r6, [pc, #64]	; (1000d7e8 <gapc_encrypt_cmd_handler+0x8c>)
1000d7a6:	2210      	movs	r2, #16
1000d7a8:	4810      	ldr	r0, [pc, #64]	; (1000d7ec <gapc_encrypt_cmd_handler+0x90>)
1000d7aa:	7223      	strb	r3, [r4, #8]
1000d7ac:	7265      	strb	r5, [r4, #9]
1000d7ae:	47b0      	blx	r6
1000d7b0:	0a3b      	lsrs	r3, r7, #8
1000d7b2:	9906      	ldr	r1, [sp, #24]
1000d7b4:	2208      	movs	r2, #8
1000d7b6:	480e      	ldr	r0, [pc, #56]	; (1000d7f0 <gapc_encrypt_cmd_handler+0x94>)
1000d7b8:	76e3      	strb	r3, [r4, #27]
1000d7ba:	76a7      	strb	r7, [r4, #26]
1000d7bc:	47b0      	blx	r6
1000d7be:	466a      	mov	r2, sp
1000d7c0:	7f12      	ldrb	r2, [r2, #28]
1000d7c2:	1d63      	adds	r3, r4, #5
1000d7c4:	77da      	strb	r2, [r3, #31]
1000d7c6:	231d      	movs	r3, #29
1000d7c8:	1c20      	adds	r0, r4, #0
1000d7ca:	71a3      	strb	r3, [r4, #6]
1000d7cc:	2125      	movs	r1, #37	; 0x25
1000d7ce:	4b09      	ldr	r3, [pc, #36]	; (1000d7f4 <gapc_encrypt_cmd_handler+0x98>)
1000d7d0:	71e5      	strb	r5, [r4, #7]
1000d7d2:	4798      	blx	r3
1000d7d4:	b009      	add	sp, #36	; 0x24
1000d7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7d8:	1001256c 	.word	0x1001256c
1000d7dc:	1000d255 	.word	0x1000d255
1000d7e0:	100135b8 	.word	0x100135b8
1000d7e4:	10013248 	.word	0x10013248
1000d7e8:	1000f8db 	.word	0x1000f8db
1000d7ec:	100135c2 	.word	0x100135c2
1000d7f0:	100135d4 	.word	0x100135d4
1000d7f4:	1000cf59 	.word	0x1000cf59

1000d7f8 <gapc_encrypt_req_ind>:
1000d7f8:	b508      	push	{r3, lr}
1000d7fa:	0a00      	lsrs	r0, r0, #8
1000d7fc:	8010      	strh	r0, [r2, #0]
1000d7fe:	784b      	ldrb	r3, [r1, #1]
1000d800:	7808      	ldrb	r0, [r1, #0]
1000d802:	021b      	lsls	r3, r3, #8
1000d804:	4303      	orrs	r3, r0
1000d806:	8053      	strh	r3, [r2, #2]
1000d808:	1d10      	adds	r0, r2, #4
1000d80a:	3102      	adds	r1, #2
1000d80c:	2208      	movs	r2, #8
1000d80e:	4b01      	ldr	r3, [pc, #4]	; (1000d814 <gapc_encrypt_req_ind+0x1c>)
1000d810:	4798      	blx	r3
1000d812:	bd08      	pop	{r3, pc}
1000d814:	1000f8db 	.word	0x1000f8db

1000d818 <gapc_encrypt_cfm_handler>:
1000d818:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d81a:	2500      	movs	r5, #0
1000d81c:	b087      	sub	sp, #28
1000d81e:	9304      	str	r3, [sp, #16]
1000d820:	ab0c      	add	r3, sp, #48	; 0x30
1000d822:	781b      	ldrb	r3, [r3, #0]
1000d824:	1c17      	adds	r7, r2, #0
1000d826:	4a15      	ldr	r2, [pc, #84]	; (1000d87c <gapc_encrypt_cfm_handler+0x64>)
1000d828:	1c06      	adds	r6, r0, #0
1000d82a:	9305      	str	r3, [sp, #20]
1000d82c:	9100      	str	r1, [sp, #0]
1000d82e:	9002      	str	r0, [sp, #8]
1000d830:	1c29      	adds	r1, r5, #0
1000d832:	1c2b      	adds	r3, r5, #0
1000d834:	9501      	str	r5, [sp, #4]
1000d836:	1c10      	adds	r0, r2, #0
1000d838:	4c11      	ldr	r4, [pc, #68]	; (1000d880 <gapc_encrypt_cfm_handler+0x68>)
1000d83a:	47a0      	blx	r4
1000d83c:	2318      	movs	r3, #24
1000d83e:	4c11      	ldr	r4, [pc, #68]	; (1000d884 <gapc_encrypt_cfm_handler+0x6c>)
1000d840:	9904      	ldr	r1, [sp, #16]
1000d842:	7023      	strb	r3, [r4, #0]
1000d844:	3b0a      	subs	r3, #10
1000d846:	7063      	strb	r3, [r4, #1]
1000d848:	70a3      	strb	r3, [r4, #2]
1000d84a:	4b0f      	ldr	r3, [pc, #60]	; (1000d888 <gapc_encrypt_cfm_handler+0x70>)
1000d84c:	480f      	ldr	r0, [pc, #60]	; (1000d88c <gapc_encrypt_cfm_handler+0x74>)
1000d84e:	881a      	ldrh	r2, [r3, #0]
1000d850:	881b      	ldrh	r3, [r3, #0]
1000d852:	7122      	strb	r2, [r4, #4]
1000d854:	0a1b      	lsrs	r3, r3, #8
1000d856:	7163      	strb	r3, [r4, #5]
1000d858:	2210      	movs	r2, #16
1000d85a:	4b0d      	ldr	r3, [pc, #52]	; (1000d890 <gapc_encrypt_cfm_handler+0x78>)
1000d85c:	70e6      	strb	r6, [r4, #3]
1000d85e:	7227      	strb	r7, [r4, #8]
1000d860:	4798      	blx	r3
1000d862:	466b      	mov	r3, sp
1000d864:	7d1b      	ldrb	r3, [r3, #20]
1000d866:	1c20      	adds	r0, r4, #0
1000d868:	7663      	strb	r3, [r4, #25]
1000d86a:	2312      	movs	r3, #18
1000d86c:	211a      	movs	r1, #26
1000d86e:	71a3      	strb	r3, [r4, #6]
1000d870:	4b08      	ldr	r3, [pc, #32]	; (1000d894 <gapc_encrypt_cfm_handler+0x7c>)
1000d872:	71e5      	strb	r5, [r4, #7]
1000d874:	4798      	blx	r3
1000d876:	b007      	add	sp, #28
1000d878:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d87a:	46c0      	nop			; (mov r8, r8)
1000d87c:	1001257c 	.word	0x1001257c
1000d880:	1000d255 	.word	0x1000d255
1000d884:	100135b8 	.word	0x100135b8
1000d888:	10013248 	.word	0x10013248
1000d88c:	100135c1 	.word	0x100135c1
1000d890:	1000f8db 	.word	0x1000f8db
1000d894:	1000cf59 	.word	0x1000cf59

1000d898 <gapc_encrypt_ind>:
1000d898:	780b      	ldrb	r3, [r1, #0]
1000d89a:	0a00      	lsrs	r0, r0, #8
1000d89c:	70d3      	strb	r3, [r2, #3]
1000d89e:	2300      	movs	r3, #0
1000d8a0:	8010      	strh	r0, [r2, #0]
1000d8a2:	7093      	strb	r3, [r2, #2]
1000d8a4:	4770      	bx	lr
	...

1000d8a8 <gapc_param_update_cfm_handler>:
1000d8a8:	b538      	push	{r3, r4, r5, lr}
1000d8aa:	2410      	movs	r4, #16
1000d8ac:	1c05      	adds	r5, r0, #0
1000d8ae:	480e      	ldr	r0, [pc, #56]	; (1000d8e8 <gapc_param_update_cfm_handler+0x40>)
1000d8b0:	7004      	strb	r4, [r0, #0]
1000d8b2:	3c02      	subs	r4, #2
1000d8b4:	7044      	strb	r4, [r0, #1]
1000d8b6:	7084      	strb	r4, [r0, #2]
1000d8b8:	4c0c      	ldr	r4, [pc, #48]	; (1000d8ec <gapc_param_update_cfm_handler+0x44>)
1000d8ba:	70c5      	strb	r5, [r0, #3]
1000d8bc:	8825      	ldrh	r5, [r4, #0]
1000d8be:	8824      	ldrh	r4, [r4, #0]
1000d8c0:	72c3      	strb	r3, [r0, #11]
1000d8c2:	0a1b      	lsrs	r3, r3, #8
1000d8c4:	0a24      	lsrs	r4, r4, #8
1000d8c6:	7303      	strb	r3, [r0, #12]
1000d8c8:	2305      	movs	r3, #5
1000d8ca:	7144      	strb	r4, [r0, #5]
1000d8cc:	2400      	movs	r4, #0
1000d8ce:	7201      	strb	r1, [r0, #8]
1000d8d0:	7242      	strb	r2, [r0, #9]
1000d8d2:	7183      	strb	r3, [r0, #6]
1000d8d4:	0a12      	lsrs	r2, r2, #8
1000d8d6:	210d      	movs	r1, #13
1000d8d8:	4b05      	ldr	r3, [pc, #20]	; (1000d8f0 <gapc_param_update_cfm_handler+0x48>)
1000d8da:	7105      	strb	r5, [r0, #4]
1000d8dc:	7282      	strb	r2, [r0, #10]
1000d8de:	71c4      	strb	r4, [r0, #7]
1000d8e0:	4798      	blx	r3
1000d8e2:	1c20      	adds	r0, r4, #0
1000d8e4:	bd38      	pop	{r3, r4, r5, pc}
1000d8e6:	46c0      	nop			; (mov r8, r8)
1000d8e8:	100135b8 	.word	0x100135b8
1000d8ec:	10013248 	.word	0x10013248
1000d8f0:	1000cf59 	.word	0x1000cf59

1000d8f4 <gapc_param_updated_ind>:
1000d8f4:	2300      	movs	r3, #0
1000d8f6:	0a00      	lsrs	r0, r0, #8
1000d8f8:	8010      	strh	r0, [r2, #0]
1000d8fa:	7093      	strb	r3, [r2, #2]
1000d8fc:	784b      	ldrb	r3, [r1, #1]
1000d8fe:	7808      	ldrb	r0, [r1, #0]
1000d900:	021b      	lsls	r3, r3, #8
1000d902:	4303      	orrs	r3, r0
1000d904:	8093      	strh	r3, [r2, #4]
1000d906:	78cb      	ldrb	r3, [r1, #3]
1000d908:	7888      	ldrb	r0, [r1, #2]
1000d90a:	021b      	lsls	r3, r3, #8
1000d90c:	4303      	orrs	r3, r0
1000d90e:	80d3      	strh	r3, [r2, #6]
1000d910:	794b      	ldrb	r3, [r1, #5]
1000d912:	7909      	ldrb	r1, [r1, #4]
1000d914:	021b      	lsls	r3, r3, #8
1000d916:	430b      	orrs	r3, r1
1000d918:	2007      	movs	r0, #7
1000d91a:	8113      	strh	r3, [r2, #8]
1000d91c:	4770      	bx	lr

1000d91e <gapc_param_updated_req_ind>:
1000d91e:	0a00      	lsrs	r0, r0, #8
1000d920:	8010      	strh	r0, [r2, #0]
1000d922:	784b      	ldrb	r3, [r1, #1]
1000d924:	7808      	ldrb	r0, [r1, #0]
1000d926:	021b      	lsls	r3, r3, #8
1000d928:	4303      	orrs	r3, r0
1000d92a:	8053      	strh	r3, [r2, #2]
1000d92c:	78cb      	ldrb	r3, [r1, #3]
1000d92e:	7888      	ldrb	r0, [r1, #2]
1000d930:	021b      	lsls	r3, r3, #8
1000d932:	4303      	orrs	r3, r0
1000d934:	8093      	strh	r3, [r2, #4]
1000d936:	794b      	ldrb	r3, [r1, #5]
1000d938:	7908      	ldrb	r0, [r1, #4]
1000d93a:	021b      	lsls	r3, r3, #8
1000d93c:	4303      	orrs	r3, r0
1000d93e:	80d3      	strh	r3, [r2, #6]
1000d940:	79cb      	ldrb	r3, [r1, #7]
1000d942:	7989      	ldrb	r1, [r1, #6]
1000d944:	021b      	lsls	r3, r3, #8
1000d946:	430b      	orrs	r3, r1
1000d948:	2008      	movs	r0, #8
1000d94a:	8113      	strh	r3, [r2, #8]
1000d94c:	4770      	bx	lr
	...

1000d950 <gapc_dev_info_req_ind_handler>:
1000d950:	b508      	push	{r3, lr}
1000d952:	1c0b      	adds	r3, r1, #0
1000d954:	0a01      	lsrs	r1, r0, #8
1000d956:	8011      	strh	r1, [r2, #0]
1000d958:	7818      	ldrb	r0, [r3, #0]
1000d95a:	7090      	strb	r0, [r2, #2]
1000d95c:	2800      	cmp	r0, #0
1000d95e:	d104      	bne.n	1000d96a <gapc_dev_info_req_ind_handler+0x1a>
1000d960:	4b03      	ldr	r3, [pc, #12]	; (1000d970 <gapc_dev_info_req_ind_handler+0x20>)
1000d962:	33aa      	adds	r3, #170	; 0xaa
1000d964:	881b      	ldrh	r3, [r3, #0]
1000d966:	2b00      	cmp	r3, #0
1000d968:	d001      	beq.n	1000d96e <gapc_dev_info_req_ind_handler+0x1e>
1000d96a:	4b02      	ldr	r3, [pc, #8]	; (1000d974 <gapc_dev_info_req_ind_handler+0x24>)
1000d96c:	4798      	blx	r3
1000d96e:	bd08      	pop	{r3, pc}
1000d970:	100132da 	.word	0x100132da
1000d974:	1000d061 	.word	0x1000d061

1000d978 <gapc_sec_req_ind>:
1000d978:	0a00      	lsrs	r0, r0, #8
1000d97a:	8010      	strh	r0, [r2, #0]
1000d97c:	7809      	ldrb	r1, [r1, #0]
1000d97e:	2301      	movs	r3, #1
1000d980:	1c08      	adds	r0, r1, #0
1000d982:	0889      	lsrs	r1, r1, #2
1000d984:	4018      	ands	r0, r3
1000d986:	400b      	ands	r3, r1
1000d988:	70d0      	strb	r0, [r2, #3]
1000d98a:	7113      	strb	r3, [r2, #4]
1000d98c:	4770      	bx	lr

1000d98e <gapc_sign_counter_ind_handler>:
1000d98e:	0a00      	lsrs	r0, r0, #8
1000d990:	8010      	strh	r0, [r2, #0]
1000d992:	784b      	ldrb	r3, [r1, #1]
1000d994:	0218      	lsls	r0, r3, #8
1000d996:	788b      	ldrb	r3, [r1, #2]
1000d998:	041b      	lsls	r3, r3, #16
1000d99a:	4303      	orrs	r3, r0
1000d99c:	7808      	ldrb	r0, [r1, #0]
1000d99e:	4303      	orrs	r3, r0
1000d9a0:	78c8      	ldrb	r0, [r1, #3]
1000d9a2:	0600      	lsls	r0, r0, #24
1000d9a4:	4303      	orrs	r3, r0
1000d9a6:	6053      	str	r3, [r2, #4]
1000d9a8:	794b      	ldrb	r3, [r1, #5]
1000d9aa:	0218      	lsls	r0, r3, #8
1000d9ac:	798b      	ldrb	r3, [r1, #6]
1000d9ae:	041b      	lsls	r3, r3, #16
1000d9b0:	4303      	orrs	r3, r0
1000d9b2:	7908      	ldrb	r0, [r1, #4]
1000d9b4:	79c9      	ldrb	r1, [r1, #7]
1000d9b6:	4303      	orrs	r3, r0
1000d9b8:	0609      	lsls	r1, r1, #24
1000d9ba:	430b      	orrs	r3, r1
1000d9bc:	2000      	movs	r0, #0
1000d9be:	6093      	str	r3, [r2, #8]
1000d9c0:	4770      	bx	lr
	...

1000d9c4 <gapc_peer_att_info_ind_handler>:
1000d9c4:	b510      	push	{r4, lr}
1000d9c6:	0a00      	lsrs	r0, r0, #8
1000d9c8:	8010      	strh	r0, [r2, #0]
1000d9ca:	7808      	ldrb	r0, [r1, #0]
1000d9cc:	7090      	strb	r0, [r2, #2]
1000d9ce:	788b      	ldrb	r3, [r1, #2]
1000d9d0:	784c      	ldrb	r4, [r1, #1]
1000d9d2:	021b      	lsls	r3, r3, #8
1000d9d4:	4323      	orrs	r3, r4
1000d9d6:	8093      	strh	r3, [r2, #4]
1000d9d8:	2801      	cmp	r0, #1
1000d9da:	d027      	beq.n	1000da2c <gapc_peer_att_info_ind_handler+0x68>
1000d9dc:	2800      	cmp	r0, #0
1000d9de:	d017      	beq.n	1000da10 <gapc_peer_att_info_ind_handler+0x4c>
1000d9e0:	2802      	cmp	r0, #2
1000d9e2:	d12a      	bne.n	1000da3a <gapc_peer_att_info_ind_handler+0x76>
1000d9e4:	790b      	ldrb	r3, [r1, #4]
1000d9e6:	78c8      	ldrb	r0, [r1, #3]
1000d9e8:	021b      	lsls	r3, r3, #8
1000d9ea:	4303      	orrs	r3, r0
1000d9ec:	8113      	strh	r3, [r2, #8]
1000d9ee:	798b      	ldrb	r3, [r1, #6]
1000d9f0:	7948      	ldrb	r0, [r1, #5]
1000d9f2:	021b      	lsls	r3, r3, #8
1000d9f4:	4303      	orrs	r3, r0
1000d9f6:	80d3      	strh	r3, [r2, #6]
1000d9f8:	7a0b      	ldrb	r3, [r1, #8]
1000d9fa:	79c8      	ldrb	r0, [r1, #7]
1000d9fc:	021b      	lsls	r3, r3, #8
1000d9fe:	4303      	orrs	r3, r0
1000da00:	8193      	strh	r3, [r2, #12]
1000da02:	7a8b      	ldrb	r3, [r1, #10]
1000da04:	7a49      	ldrb	r1, [r1, #9]
1000da06:	021b      	lsls	r3, r3, #8
1000da08:	430b      	orrs	r3, r1
1000da0a:	8153      	strh	r3, [r2, #10]
1000da0c:	2306      	movs	r3, #6
1000da0e:	e013      	b.n	1000da38 <gapc_peer_att_info_ind_handler+0x74>
1000da10:	1c14      	adds	r4, r2, #0
1000da12:	1c20      	adds	r0, r4, #0
1000da14:	790a      	ldrb	r2, [r1, #4]
1000da16:	78cb      	ldrb	r3, [r1, #3]
1000da18:	0212      	lsls	r2, r2, #8
1000da1a:	431a      	orrs	r2, r3
1000da1c:	80e2      	strh	r2, [r4, #6]
1000da1e:	4b07      	ldr	r3, [pc, #28]	; (1000da3c <gapc_peer_att_info_ind_handler+0x78>)
1000da20:	3008      	adds	r0, #8
1000da22:	3105      	adds	r1, #5
1000da24:	4798      	blx	r3
1000da26:	2302      	movs	r3, #2
1000da28:	70a3      	strb	r3, [r4, #2]
1000da2a:	e006      	b.n	1000da3a <gapc_peer_att_info_ind_handler+0x76>
1000da2c:	790b      	ldrb	r3, [r1, #4]
1000da2e:	78c9      	ldrb	r1, [r1, #3]
1000da30:	021b      	lsls	r3, r3, #8
1000da32:	430b      	orrs	r3, r1
1000da34:	80d3      	strh	r3, [r2, #6]
1000da36:	2305      	movs	r3, #5
1000da38:	7093      	strb	r3, [r2, #2]
1000da3a:	bd10      	pop	{r4, pc}
1000da3c:	1000f8db 	.word	0x1000f8db

1000da40 <gapc_con_channel_map_ind_handler>:
1000da40:	b508      	push	{r3, lr}
1000da42:	2300      	movs	r3, #0
1000da44:	0a00      	lsrs	r0, r0, #8
1000da46:	7013      	strb	r3, [r2, #0]
1000da48:	8050      	strh	r0, [r2, #2]
1000da4a:	4b02      	ldr	r3, [pc, #8]	; (1000da54 <gapc_con_channel_map_ind_handler+0x14>)
1000da4c:	1d10      	adds	r0, r2, #4
1000da4e:	2205      	movs	r2, #5
1000da50:	4798      	blx	r3
1000da52:	bd08      	pop	{r3, pc}
1000da54:	1000f8db 	.word	0x1000f8db

1000da58 <gapc_lecb_connected>:
1000da58:	7843      	ldrb	r3, [r0, #1]
1000da5a:	7802      	ldrb	r2, [r0, #0]
1000da5c:	021b      	lsls	r3, r3, #8
1000da5e:	4313      	orrs	r3, r2
1000da60:	800b      	strh	r3, [r1, #0]
1000da62:	78c3      	ldrb	r3, [r0, #3]
1000da64:	7882      	ldrb	r2, [r0, #2]
1000da66:	021b      	lsls	r3, r3, #8
1000da68:	4313      	orrs	r3, r2
1000da6a:	804b      	strh	r3, [r1, #2]
1000da6c:	7943      	ldrb	r3, [r0, #5]
1000da6e:	7902      	ldrb	r2, [r0, #4]
1000da70:	021b      	lsls	r3, r3, #8
1000da72:	4313      	orrs	r3, r2
1000da74:	808b      	strh	r3, [r1, #4]
1000da76:	79c3      	ldrb	r3, [r0, #7]
1000da78:	7982      	ldrb	r2, [r0, #6]
1000da7a:	021b      	lsls	r3, r3, #8
1000da7c:	4313      	orrs	r3, r2
1000da7e:	80cb      	strh	r3, [r1, #6]
1000da80:	2300      	movs	r3, #0
1000da82:	720b      	strb	r3, [r1, #8]
1000da84:	4770      	bx	lr

1000da86 <gapc_lecb_disconnected>:
1000da86:	7843      	ldrb	r3, [r0, #1]
1000da88:	7802      	ldrb	r2, [r0, #0]
1000da8a:	021b      	lsls	r3, r3, #8
1000da8c:	4313      	orrs	r3, r2
1000da8e:	800b      	strh	r3, [r1, #0]
1000da90:	78c3      	ldrb	r3, [r0, #3]
1000da92:	7882      	ldrb	r2, [r0, #2]
1000da94:	021b      	lsls	r3, r3, #8
1000da96:	4313      	orrs	r3, r2
1000da98:	804b      	strh	r3, [r1, #2]
1000da9a:	4770      	bx	lr

1000da9c <gapc_lecb_connect_req_ind>:
1000da9c:	7843      	ldrb	r3, [r0, #1]
1000da9e:	7802      	ldrb	r2, [r0, #0]
1000daa0:	021b      	lsls	r3, r3, #8
1000daa2:	4313      	orrs	r3, r2
1000daa4:	800b      	strh	r3, [r1, #0]
1000daa6:	78c3      	ldrb	r3, [r0, #3]
1000daa8:	7882      	ldrb	r2, [r0, #2]
1000daaa:	021b      	lsls	r3, r3, #8
1000daac:	4313      	orrs	r3, r2
1000daae:	804b      	strh	r3, [r1, #2]
1000dab0:	7943      	ldrb	r3, [r0, #5]
1000dab2:	7902      	ldrb	r2, [r0, #4]
1000dab4:	021b      	lsls	r3, r3, #8
1000dab6:	4313      	orrs	r3, r2
1000dab8:	808b      	strh	r3, [r1, #4]
1000daba:	79c3      	ldrb	r3, [r0, #7]
1000dabc:	7982      	ldrb	r2, [r0, #6]
1000dabe:	021b      	lsls	r3, r3, #8
1000dac0:	4313      	orrs	r3, r2
1000dac2:	80cb      	strh	r3, [r1, #6]
1000dac4:	4770      	bx	lr

1000dac6 <gapc_lecb_add_credit_resp_handler>:
1000dac6:	7843      	ldrb	r3, [r0, #1]
1000dac8:	7802      	ldrb	r2, [r0, #0]
1000daca:	021b      	lsls	r3, r3, #8
1000dacc:	4313      	orrs	r3, r2
1000dace:	800b      	strh	r3, [r1, #0]
1000dad0:	78c3      	ldrb	r3, [r0, #3]
1000dad2:	7882      	ldrb	r2, [r0, #2]
1000dad4:	021b      	lsls	r3, r3, #8
1000dad6:	4313      	orrs	r3, r2
1000dad8:	804b      	strh	r3, [r1, #2]
1000dada:	7943      	ldrb	r3, [r0, #5]
1000dadc:	7902      	ldrb	r2, [r0, #4]
1000dade:	021b      	lsls	r3, r3, #8
1000dae0:	4313      	orrs	r3, r2
1000dae2:	808b      	strh	r3, [r1, #4]
1000dae4:	4770      	bx	lr
	...

1000dae8 <gapm_reset_req_handler>:
1000dae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000daea:	466b      	mov	r3, sp
1000daec:	4915      	ldr	r1, [pc, #84]	; (1000db44 <gapm_reset_req_handler+0x5c>)
1000daee:	4816      	ldr	r0, [pc, #88]	; (1000db48 <gapm_reset_req_handler+0x60>)
1000daf0:	880c      	ldrh	r4, [r1, #0]
1000daf2:	8809      	ldrh	r1, [r1, #0]
1000daf4:	1ddd      	adds	r5, r3, #7
1000daf6:	0a09      	lsrs	r1, r1, #8
1000daf8:	2300      	movs	r3, #0
1000dafa:	2202      	movs	r2, #2
1000dafc:	7141      	strb	r1, [r0, #5]
1000dafe:	26d0      	movs	r6, #208	; 0xd0
1000db00:	2101      	movs	r1, #1
1000db02:	7104      	strb	r4, [r0, #4]
1000db04:	4c11      	ldr	r4, [pc, #68]	; (1000db4c <gapm_reset_req_handler+0x64>)
1000db06:	702b      	strb	r3, [r5, #0]
1000db08:	7002      	strb	r2, [r0, #0]
1000db0a:	70c3      	strb	r3, [r0, #3]
1000db0c:	320b      	adds	r2, #11
1000db0e:	7201      	strb	r1, [r0, #8]
1000db10:	7181      	strb	r1, [r0, #6]
1000db12:	71c3      	strb	r3, [r0, #7]
1000db14:	3108      	adds	r1, #8
1000db16:	4b0e      	ldr	r3, [pc, #56]	; (1000db50 <gapm_reset_req_handler+0x68>)
1000db18:	0136      	lsls	r6, r6, #4
1000db1a:	7042      	strb	r2, [r0, #1]
1000db1c:	7082      	strb	r2, [r0, #2]
1000db1e:	80a2      	strh	r2, [r4, #4]
1000db20:	8026      	strh	r6, [r4, #0]
1000db22:	4798      	blx	r3
1000db24:	1c28      	adds	r0, r5, #0
1000db26:	4b0b      	ldr	r3, [pc, #44]	; (1000db54 <gapm_reset_req_handler+0x6c>)
1000db28:	4798      	blx	r3
1000db2a:	782b      	ldrb	r3, [r5, #0]
1000db2c:	20e2      	movs	r0, #226	; 0xe2
1000db2e:	2b00      	cmp	r3, #0
1000db30:	d106      	bne.n	1000db40 <gapm_reset_req_handler+0x58>
1000db32:	68a3      	ldr	r3, [r4, #8]
1000db34:	20e2      	movs	r0, #226	; 0xe2
1000db36:	781a      	ldrb	r2, [r3, #0]
1000db38:	785b      	ldrb	r3, [r3, #1]
1000db3a:	2a01      	cmp	r2, #1
1000db3c:	d100      	bne.n	1000db40 <gapm_reset_req_handler+0x58>
1000db3e:	1c18      	adds	r0, r3, #0
1000db40:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000db42:	46c0      	nop			; (mov r8, r8)
1000db44:	10013248 	.word	0x10013248
1000db48:	100135b8 	.word	0x100135b8
1000db4c:	1001323c 	.word	0x1001323c
1000db50:	1000cf59 	.word	0x1000cf59
1000db54:	1000cfb5 	.word	0x1000cfb5

1000db58 <gapm_set_dev_config_cmd_handler>:
1000db58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db5a:	b089      	sub	sp, #36	; 0x24
1000db5c:	9303      	str	r3, [sp, #12]
1000db5e:	ab0e      	add	r3, sp, #56	; 0x38
1000db60:	781b      	ldrb	r3, [r3, #0]
1000db62:	4c37      	ldr	r4, [pc, #220]	; (1000dc40 <gapm_set_dev_config_cmd_handler+0xe8>)
1000db64:	9304      	str	r3, [sp, #16]
1000db66:	ab0f      	add	r3, sp, #60	; 0x3c
1000db68:	781b      	ldrb	r3, [r3, #0]
1000db6a:	270d      	movs	r7, #13
1000db6c:	9305      	str	r3, [sp, #20]
1000db6e:	ab10      	add	r3, sp, #64	; 0x40
1000db70:	881b      	ldrh	r3, [r3, #0]
1000db72:	72a1      	strb	r1, [r4, #10]
1000db74:	9300      	str	r3, [sp, #0]
1000db76:	ab11      	add	r3, sp, #68	; 0x44
1000db78:	881b      	ldrh	r3, [r3, #0]
1000db7a:	0a09      	lsrs	r1, r1, #8
1000db7c:	9301      	str	r3, [sp, #4]
1000db7e:	ab12      	add	r3, sp, #72	; 0x48
1000db80:	881b      	ldrh	r3, [r3, #0]
1000db82:	7260      	strb	r0, [r4, #9]
1000db84:	9302      	str	r3, [sp, #8]
1000db86:	ab06      	add	r3, sp, #24
1000db88:	1dde      	adds	r6, r3, #7
1000db8a:	2300      	movs	r3, #0
1000db8c:	7033      	strb	r3, [r6, #0]
1000db8e:	2304      	movs	r3, #4
1000db90:	7023      	strb	r3, [r4, #0]
1000db92:	2300      	movs	r3, #0
1000db94:	70e3      	strb	r3, [r4, #3]
1000db96:	4b2b      	ldr	r3, [pc, #172]	; (1000dc44 <gapm_set_dev_config_cmd_handler+0xec>)
1000db98:	72e1      	strb	r1, [r4, #11]
1000db9a:	881d      	ldrh	r5, [r3, #0]
1000db9c:	881b      	ldrh	r3, [r3, #0]
1000db9e:	1c11      	adds	r1, r2, #0
1000dba0:	0a1b      	lsrs	r3, r3, #8
1000dba2:	7163      	strb	r3, [r4, #5]
1000dba4:	2303      	movs	r3, #3
1000dba6:	7125      	strb	r5, [r4, #4]
1000dba8:	2206      	movs	r2, #6
1000dbaa:	4d27      	ldr	r5, [pc, #156]	; (1000dc48 <gapm_set_dev_config_cmd_handler+0xf0>)
1000dbac:	4827      	ldr	r0, [pc, #156]	; (1000dc4c <gapm_set_dev_config_cmd_handler+0xf4>)
1000dbae:	7223      	strb	r3, [r4, #8]
1000dbb0:	7067      	strb	r7, [r4, #1]
1000dbb2:	70a7      	strb	r7, [r4, #2]
1000dbb4:	47a8      	blx	r5
1000dbb6:	9903      	ldr	r1, [sp, #12]
1000dbb8:	2210      	movs	r2, #16
1000dbba:	4825      	ldr	r0, [pc, #148]	; (1000dc50 <gapm_set_dev_config_cmd_handler+0xf8>)
1000dbbc:	47a8      	blx	r5
1000dbbe:	466a      	mov	r2, sp
1000dbc0:	7c12      	ldrb	r2, [r2, #16]
1000dbc2:	1ce3      	adds	r3, r4, #3
1000dbc4:	77da      	strb	r2, [r3, #31]
1000dbc6:	466a      	mov	r2, sp
1000dbc8:	7d12      	ldrb	r2, [r2, #20]
1000dbca:	1d23      	adds	r3, r4, #4
1000dbcc:	77da      	strb	r2, [r3, #31]
1000dbce:	466a      	mov	r2, sp
1000dbd0:	7812      	ldrb	r2, [r2, #0]
1000dbd2:	1d63      	adds	r3, r4, #5
1000dbd4:	77da      	strb	r2, [r3, #31]
1000dbd6:	9b00      	ldr	r3, [sp, #0]
1000dbd8:	1da2      	adds	r2, r4, #6
1000dbda:	0a1b      	lsrs	r3, r3, #8
1000dbdc:	77d3      	strb	r3, [r2, #31]
1000dbde:	466a      	mov	r2, sp
1000dbe0:	7912      	ldrb	r2, [r2, #4]
1000dbe2:	1de3      	adds	r3, r4, #7
1000dbe4:	77da      	strb	r2, [r3, #31]
1000dbe6:	1c22      	adds	r2, r4, #0
1000dbe8:	9b01      	ldr	r3, [sp, #4]
1000dbea:	3208      	adds	r2, #8
1000dbec:	0a1b      	lsrs	r3, r3, #8
1000dbee:	77d3      	strb	r3, [r2, #31]
1000dbf0:	466a      	mov	r2, sp
1000dbf2:	1c23      	adds	r3, r4, #0
1000dbf4:	7a12      	ldrb	r2, [r2, #8]
1000dbf6:	3328      	adds	r3, #40	; 0x28
1000dbf8:	701a      	strb	r2, [r3, #0]
1000dbfa:	1c22      	adds	r2, r4, #0
1000dbfc:	9b02      	ldr	r3, [sp, #8]
1000dbfe:	3229      	adds	r2, #41	; 0x29
1000dc00:	0a1b      	lsrs	r3, r3, #8
1000dc02:	7013      	strb	r3, [r2, #0]
1000dc04:	23d0      	movs	r3, #208	; 0xd0
1000dc06:	4d13      	ldr	r5, [pc, #76]	; (1000dc54 <gapm_set_dev_config_cmd_handler+0xfc>)
1000dc08:	011b      	lsls	r3, r3, #4
1000dc0a:	802b      	strh	r3, [r5, #0]
1000dc0c:	2322      	movs	r3, #34	; 0x22
1000dc0e:	71a3      	strb	r3, [r4, #6]
1000dc10:	2300      	movs	r3, #0
1000dc12:	212a      	movs	r1, #42	; 0x2a
1000dc14:	71e3      	strb	r3, [r4, #7]
1000dc16:	1c20      	adds	r0, r4, #0
1000dc18:	4b0f      	ldr	r3, [pc, #60]	; (1000dc58 <gapm_set_dev_config_cmd_handler+0x100>)
1000dc1a:	80af      	strh	r7, [r5, #4]
1000dc1c:	4798      	blx	r3
1000dc1e:	1c30      	adds	r0, r6, #0
1000dc20:	4b0e      	ldr	r3, [pc, #56]	; (1000dc5c <gapm_set_dev_config_cmd_handler+0x104>)
1000dc22:	4798      	blx	r3
1000dc24:	7833      	ldrb	r3, [r6, #0]
1000dc26:	20e2      	movs	r0, #226	; 0xe2
1000dc28:	2b00      	cmp	r3, #0
1000dc2a:	d106      	bne.n	1000dc3a <gapm_set_dev_config_cmd_handler+0xe2>
1000dc2c:	68ab      	ldr	r3, [r5, #8]
1000dc2e:	20e2      	movs	r0, #226	; 0xe2
1000dc30:	781a      	ldrb	r2, [r3, #0]
1000dc32:	785b      	ldrb	r3, [r3, #1]
1000dc34:	2a03      	cmp	r2, #3
1000dc36:	d100      	bne.n	1000dc3a <gapm_set_dev_config_cmd_handler+0xe2>
1000dc38:	1c18      	adds	r0, r3, #0
1000dc3a:	b009      	add	sp, #36	; 0x24
1000dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc3e:	46c0      	nop			; (mov r8, r8)
1000dc40:	100135b8 	.word	0x100135b8
1000dc44:	10013248 	.word	0x10013248
1000dc48:	1000f8db 	.word	0x1000f8db
1000dc4c:	100135c4 	.word	0x100135c4
1000dc50:	100135ca 	.word	0x100135ca
1000dc54:	1001323c 	.word	0x1001323c
1000dc58:	1000cf59 	.word	0x1000cf59
1000dc5c:	1000cfb5 	.word	0x1000cfb5

1000dc60 <gapm_get_dev_config_cmd_handler>:
1000dc60:	4684      	mov	ip, r0
1000dc62:	4663      	mov	r3, ip
1000dc64:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc66:	b085      	sub	sp, #20
1000dc68:	9100      	str	r1, [sp, #0]
1000dc6a:	20cf      	movs	r0, #207	; 0xcf
1000dc6c:	2b01      	cmp	r3, #1
1000dc6e:	d854      	bhi.n	1000dd1a <gapm_get_dev_config_cmd_handler+0xba>
1000dc70:	2900      	cmp	r1, #0
1000dc72:	d052      	beq.n	1000dd1a <gapm_get_dev_config_cmd_handler+0xba>
1000dc74:	2200      	movs	r2, #0
1000dc76:	492a      	ldr	r1, [pc, #168]	; (1000dd20 <gapm_get_dev_config_cmd_handler+0xc0>)
1000dc78:	ab02      	add	r3, sp, #8
1000dc7a:	880c      	ldrh	r4, [r1, #0]
1000dc7c:	8809      	ldrh	r1, [r1, #0]
1000dc7e:	1d9f      	adds	r7, r3, #6
1000dc80:	719a      	strb	r2, [r3, #6]
1000dc82:	4b28      	ldr	r3, [pc, #160]	; (1000dd24 <gapm_get_dev_config_cmd_handler+0xc4>)
1000dc84:	0a09      	lsrs	r1, r1, #8
1000dc86:	250d      	movs	r5, #13
1000dc88:	2606      	movs	r6, #6
1000dc8a:	7159      	strb	r1, [r3, #5]
1000dc8c:	4661      	mov	r1, ip
1000dc8e:	701e      	strb	r6, [r3, #0]
1000dc90:	705d      	strb	r5, [r3, #1]
1000dc92:	709d      	strb	r5, [r3, #2]
1000dc94:	70da      	strb	r2, [r3, #3]
1000dc96:	711c      	strb	r4, [r3, #4]
1000dc98:	2901      	cmp	r1, #1
1000dc9a:	d13e      	bne.n	1000dd1a <gapm_get_dev_config_cmd_handler+0xba>
1000dc9c:	21d0      	movs	r1, #208	; 0xd0
1000dc9e:	4c22      	ldr	r4, [pc, #136]	; (1000dd28 <gapm_get_dev_config_cmd_handler+0xc8>)
1000dca0:	0109      	lsls	r1, r1, #4
1000dca2:	8061      	strh	r1, [r4, #2]
1000dca4:	4921      	ldr	r1, [pc, #132]	; (1000dd2c <gapm_get_dev_config_cmd_handler+0xcc>)
1000dca6:	71da      	strb	r2, [r3, #7]
1000dca8:	8021      	strh	r1, [r4, #0]
1000dcaa:	4661      	mov	r1, ip
1000dcac:	721e      	strb	r6, [r3, #8]
1000dcae:	7199      	strb	r1, [r3, #6]
1000dcb0:	1c18      	adds	r0, r3, #0
1000dcb2:	2109      	movs	r1, #9
1000dcb4:	4b1e      	ldr	r3, [pc, #120]	; (1000dd30 <gapm_get_dev_config_cmd_handler+0xd0>)
1000dcb6:	80a5      	strh	r5, [r4, #4]
1000dcb8:	4798      	blx	r3
1000dcba:	1c38      	adds	r0, r7, #0
1000dcbc:	4b1d      	ldr	r3, [pc, #116]	; (1000dd34 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dcbe:	4798      	blx	r3
1000dcc0:	783b      	ldrb	r3, [r7, #0]
1000dcc2:	20e2      	movs	r0, #226	; 0xe2
1000dcc4:	9301      	str	r3, [sp, #4]
1000dcc6:	2b00      	cmp	r3, #0
1000dcc8:	d127      	bne.n	1000dd1a <gapm_get_dev_config_cmd_handler+0xba>
1000dcca:	8821      	ldrh	r1, [r4, #0]
1000dccc:	4a1a      	ldr	r2, [pc, #104]	; (1000dd38 <gapm_get_dev_config_cmd_handler+0xd8>)
1000dcce:	68a7      	ldr	r7, [r4, #8]
1000dcd0:	3b01      	subs	r3, #1
1000dcd2:	4291      	cmp	r1, r2
1000dcd4:	d001      	beq.n	1000dcda <gapm_get_dev_config_cmd_handler+0x7a>
1000dcd6:	8023      	strh	r3, [r4, #0]
1000dcd8:	e01a      	b.n	1000dd10 <gapm_get_dev_config_cmd_handler+0xb0>
1000dcda:	8063      	strh	r3, [r4, #2]
1000dcdc:	9b00      	ldr	r3, [sp, #0]
1000dcde:	1c39      	adds	r1, r7, #0
1000dce0:	1c58      	adds	r0, r3, #1
1000dce2:	1c32      	adds	r2, r6, #0
1000dce4:	4b15      	ldr	r3, [pc, #84]	; (1000dd3c <gapm_get_dev_config_cmd_handler+0xdc>)
1000dce6:	4798      	blx	r3
1000dce8:	79bb      	ldrb	r3, [r7, #6]
1000dcea:	9a00      	ldr	r2, [sp, #0]
1000dcec:	7013      	strb	r3, [r2, #0]
1000dcee:	23d0      	movs	r3, #208	; 0xd0
1000dcf0:	011b      	lsls	r3, r3, #4
1000dcf2:	8023      	strh	r3, [r4, #0]
1000dcf4:	ab02      	add	r3, sp, #8
1000dcf6:	80a5      	strh	r5, [r4, #4]
1000dcf8:	1ddd      	adds	r5, r3, #7
1000dcfa:	466b      	mov	r3, sp
1000dcfc:	791b      	ldrb	r3, [r3, #4]
1000dcfe:	1c28      	adds	r0, r5, #0
1000dd00:	702b      	strb	r3, [r5, #0]
1000dd02:	4b0c      	ldr	r3, [pc, #48]	; (1000dd34 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd04:	4798      	blx	r3
1000dd06:	782b      	ldrb	r3, [r5, #0]
1000dd08:	20d0      	movs	r0, #208	; 0xd0
1000dd0a:	2b00      	cmp	r3, #0
1000dd0c:	d105      	bne.n	1000dd1a <gapm_get_dev_config_cmd_handler+0xba>
1000dd0e:	68a7      	ldr	r7, [r4, #8]
1000dd10:	783b      	ldrb	r3, [r7, #0]
1000dd12:	7878      	ldrb	r0, [r7, #1]
1000dd14:	2b06      	cmp	r3, #6
1000dd16:	d000      	beq.n	1000dd1a <gapm_get_dev_config_cmd_handler+0xba>
1000dd18:	20e2      	movs	r0, #226	; 0xe2
1000dd1a:	b005      	add	sp, #20
1000dd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd1e:	46c0      	nop			; (mov r8, r8)
1000dd20:	10013248 	.word	0x10013248
1000dd24:	100135b8 	.word	0x100135b8
1000dd28:	1001323c 	.word	0x1001323c
1000dd2c:	00000d08 	.word	0x00000d08
1000dd30:	1000cf59 	.word	0x1000cf59
1000dd34:	1000cfb5 	.word	0x1000cfb5
1000dd38:	0000ffff 	.word	0x0000ffff
1000dd3c:	1000f8db 	.word	0x1000f8db

1000dd40 <gapm_cancel_cmd_handler>:
1000dd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000dd42:	4916      	ldr	r1, [pc, #88]	; (1000dd9c <gapm_cancel_cmd_handler+0x5c>)
1000dd44:	4816      	ldr	r0, [pc, #88]	; (1000dda0 <gapm_cancel_cmd_handler+0x60>)
1000dd46:	880c      	ldrh	r4, [r1, #0]
1000dd48:	8809      	ldrh	r1, [r1, #0]
1000dd4a:	466b      	mov	r3, sp
1000dd4c:	0a09      	lsrs	r1, r1, #8
1000dd4e:	7141      	strb	r1, [r0, #5]
1000dd50:	2102      	movs	r1, #2
1000dd52:	2203      	movs	r2, #3
1000dd54:	7201      	strb	r1, [r0, #8]
1000dd56:	21d0      	movs	r1, #208	; 0xd0
1000dd58:	1ddd      	adds	r5, r3, #7
1000dd5a:	2300      	movs	r3, #0
1000dd5c:	7104      	strb	r4, [r0, #4]
1000dd5e:	4c11      	ldr	r4, [pc, #68]	; (1000dda4 <gapm_cancel_cmd_handler+0x64>)
1000dd60:	7002      	strb	r2, [r0, #0]
1000dd62:	0109      	lsls	r1, r1, #4
1000dd64:	320a      	adds	r2, #10
1000dd66:	702b      	strb	r3, [r5, #0]
1000dd68:	7042      	strb	r2, [r0, #1]
1000dd6a:	7082      	strb	r2, [r0, #2]
1000dd6c:	70c3      	strb	r3, [r0, #3]
1000dd6e:	8021      	strh	r1, [r4, #0]
1000dd70:	80a2      	strh	r2, [r4, #4]
1000dd72:	71c3      	strb	r3, [r0, #7]
1000dd74:	3a0c      	subs	r2, #12
1000dd76:	2109      	movs	r1, #9
1000dd78:	4b0b      	ldr	r3, [pc, #44]	; (1000dda8 <gapm_cancel_cmd_handler+0x68>)
1000dd7a:	7182      	strb	r2, [r0, #6]
1000dd7c:	4798      	blx	r3
1000dd7e:	1c28      	adds	r0, r5, #0
1000dd80:	4b0a      	ldr	r3, [pc, #40]	; (1000ddac <gapm_cancel_cmd_handler+0x6c>)
1000dd82:	4798      	blx	r3
1000dd84:	7828      	ldrb	r0, [r5, #0]
1000dd86:	2800      	cmp	r0, #0
1000dd88:	d001      	beq.n	1000dd8e <gapm_cancel_cmd_handler+0x4e>
1000dd8a:	20e2      	movs	r0, #226	; 0xe2
1000dd8c:	e004      	b.n	1000dd98 <gapm_cancel_cmd_handler+0x58>
1000dd8e:	68a3      	ldr	r3, [r4, #8]
1000dd90:	785b      	ldrb	r3, [r3, #1]
1000dd92:	2b44      	cmp	r3, #68	; 0x44
1000dd94:	d000      	beq.n	1000dd98 <gapm_cancel_cmd_handler+0x58>
1000dd96:	1c18      	adds	r0, r3, #0
1000dd98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000dd9a:	46c0      	nop			; (mov r8, r8)
1000dd9c:	10013248 	.word	0x10013248
1000dda0:	100135b8 	.word	0x100135b8
1000dda4:	1001323c 	.word	0x1001323c
1000dda8:	1000cf59 	.word	0x1000cf59
1000ddac:	1000cfb5 	.word	0x1000cfb5

1000ddb0 <gapm_dev_bdaddr_ind_handler>:
1000ddb0:	b538      	push	{r3, r4, r5, lr}
1000ddb2:	1c05      	adds	r5, r0, #0
1000ddb4:	1c0c      	adds	r4, r1, #0
1000ddb6:	1c48      	adds	r0, r1, #1
1000ddb8:	2206      	movs	r2, #6
1000ddba:	1c29      	adds	r1, r5, #0
1000ddbc:	4b02      	ldr	r3, [pc, #8]	; (1000ddc8 <gapm_dev_bdaddr_ind_handler+0x18>)
1000ddbe:	4798      	blx	r3
1000ddc0:	79ab      	ldrb	r3, [r5, #6]
1000ddc2:	2000      	movs	r0, #0
1000ddc4:	7023      	strb	r3, [r4, #0]
1000ddc6:	bd38      	pop	{r3, r4, r5, pc}
1000ddc8:	1000f8db 	.word	0x1000f8db

1000ddcc <gapm_cmp_evt>:
1000ddcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ddce:	7803      	ldrb	r3, [r0, #0]
1000ddd0:	7845      	ldrb	r5, [r0, #1]
1000ddd2:	3b0c      	subs	r3, #12
1000ddd4:	1e18      	subs	r0, r3, #0
1000ddd6:	280b      	cmp	r0, #11
1000ddd8:	d900      	bls.n	1000dddc <gapm_cmp_evt+0x10>
1000ddda:	e08d      	b.n	1000def8 <gapm_cmp_evt+0x12c>
1000dddc:	1c0c      	adds	r4, r1, #0
1000ddde:	f000 fced 	bl	1000e7bc <__gnu_thumb1_case_uqi>
1000dde2:	1952      	.short	0x1952
1000dde4:	068b1919 	.word	0x068b1919
1000dde8:	8b595906 	.word	0x8b595906
1000ddec:	0d8b      	.short	0x0d8b
1000ddee:	2300      	movs	r3, #0
1000ddf0:	2d45      	cmp	r5, #69	; 0x45
1000ddf2:	d000      	beq.n	1000ddf6 <gapm_cmp_evt+0x2a>
1000ddf4:	1c2b      	adds	r3, r5, #0
1000ddf6:	7023      	strb	r3, [r4, #0]
1000ddf8:	2002      	movs	r0, #2
1000ddfa:	e07e      	b.n	1000defa <gapm_cmp_evt+0x12e>
1000ddfc:	203b      	movs	r0, #59	; 0x3b
1000ddfe:	2d00      	cmp	r5, #0
1000de00:	d100      	bne.n	1000de04 <gapm_cmp_evt+0x38>
1000de02:	e07a      	b.n	1000defa <gapm_cmp_evt+0x12e>
1000de04:	700d      	strb	r5, [r1, #0]
1000de06:	1c48      	adds	r0, r1, #1
1000de08:	2210      	movs	r2, #16
1000de0a:	2100      	movs	r1, #0
1000de0c:	4b3b      	ldr	r3, [pc, #236]	; (1000defc <gapm_cmp_evt+0x130>)
1000de0e:	4798      	blx	r3
1000de10:	200f      	movs	r0, #15
1000de12:	e072      	b.n	1000defa <gapm_cmp_evt+0x12e>
1000de14:	2d00      	cmp	r5, #0
1000de16:	d134      	bne.n	1000de82 <gapm_cmp_evt+0xb6>
1000de18:	4b39      	ldr	r3, [pc, #228]	; (1000df00 <gapm_cmp_evt+0x134>)
1000de1a:	4798      	blx	r3
1000de1c:	1e43      	subs	r3, r0, #1
1000de1e:	b2db      	uxtb	r3, r3
1000de20:	1c28      	adds	r0, r5, #0
1000de22:	2b06      	cmp	r3, #6
1000de24:	d869      	bhi.n	1000defa <gapm_cmp_evt+0x12e>
1000de26:	466b      	mov	r3, sp
1000de28:	4e36      	ldr	r6, [pc, #216]	; (1000df04 <gapm_cmp_evt+0x138>)
1000de2a:	1dd9      	adds	r1, r3, #7
1000de2c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000de2e:	4b36      	ldr	r3, [pc, #216]	; (1000df08 <gapm_cmp_evt+0x13c>)
1000de30:	4798      	blx	r3
1000de32:	2312      	movs	r3, #18
1000de34:	4358      	muls	r0, r3
1000de36:	4935      	ldr	r1, [pc, #212]	; (1000df0c <gapm_cmp_evt+0x140>)
1000de38:	1809      	adds	r1, r1, r0
1000de3a:	1c0b      	adds	r3, r1, #0
1000de3c:	894a      	ldrh	r2, [r1, #10]
1000de3e:	3308      	adds	r3, #8
1000de40:	8122      	strh	r2, [r4, #8]
1000de42:	784f      	ldrb	r7, [r1, #1]
1000de44:	72a5      	strb	r5, [r4, #10]
1000de46:	7027      	strb	r7, [r4, #0]
1000de48:	898a      	ldrh	r2, [r1, #12]
1000de4a:	1c60      	adds	r0, r4, #1
1000de4c:	81a2      	strh	r2, [r4, #12]
1000de4e:	88db      	ldrh	r3, [r3, #6]
1000de50:	3102      	adds	r1, #2
1000de52:	81e3      	strh	r3, [r4, #14]
1000de54:	89cb      	ldrh	r3, [r1, #14]
1000de56:	2206      	movs	r2, #6
1000de58:	8223      	strh	r3, [r4, #16]
1000de5a:	4b2d      	ldr	r3, [pc, #180]	; (1000df10 <gapm_cmp_evt+0x144>)
1000de5c:	4798      	blx	r3
1000de5e:	2f00      	cmp	r7, #0
1000de60:	d00a      	beq.n	1000de78 <gapm_cmp_evt+0xac>
1000de62:	79a3      	ldrb	r3, [r4, #6]
1000de64:	223f      	movs	r2, #63	; 0x3f
1000de66:	1c19      	adds	r1, r3, #0
1000de68:	3501      	adds	r5, #1
1000de6a:	4391      	bics	r1, r2
1000de6c:	29c0      	cmp	r1, #192	; 0xc0
1000de6e:	d003      	beq.n	1000de78 <gapm_cmp_evt+0xac>
1000de70:	065b      	lsls	r3, r3, #25
1000de72:	0fdb      	lsrs	r3, r3, #31
1000de74:	3502      	adds	r5, #2
1000de76:	1aed      	subs	r5, r5, r3
1000de78:	2301      	movs	r3, #1
1000de7a:	425b      	negs	r3, r3
1000de7c:	7025      	strb	r5, [r4, #0]
1000de7e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000de80:	e038      	b.n	1000def4 <gapm_cmp_evt+0x128>
1000de82:	700d      	strb	r5, [r1, #0]
1000de84:	e004      	b.n	1000de90 <gapm_cmp_evt+0xc4>
1000de86:	2300      	movs	r3, #0
1000de88:	2d45      	cmp	r5, #69	; 0x45
1000de8a:	d000      	beq.n	1000de8e <gapm_cmp_evt+0xc2>
1000de8c:	1c2b      	adds	r3, r5, #0
1000de8e:	7023      	strb	r3, [r4, #0]
1000de90:	2003      	movs	r0, #3
1000de92:	e032      	b.n	1000defa <gapm_cmp_evt+0x12e>
1000de94:	4e1b      	ldr	r6, [pc, #108]	; (1000df04 <gapm_cmp_evt+0x138>)
1000de96:	2100      	movs	r1, #0
1000de98:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000de9a:	4b1b      	ldr	r3, [pc, #108]	; (1000df08 <gapm_cmp_evt+0x13c>)
1000de9c:	4798      	blx	r3
1000de9e:	2807      	cmp	r0, #7
1000dea0:	d818      	bhi.n	1000ded4 <gapm_cmp_evt+0x108>
1000dea2:	2301      	movs	r3, #1
1000dea4:	425b      	negs	r3, r3
1000dea6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000dea8:	3313      	adds	r3, #19
1000deaa:	4358      	muls	r0, r3
1000deac:	4917      	ldr	r1, [pc, #92]	; (1000df0c <gapm_cmp_evt+0x140>)
1000deae:	1809      	adds	r1, r1, r0
1000deb0:	1c0b      	adds	r3, r1, #0
1000deb2:	894a      	ldrh	r2, [r1, #10]
1000deb4:	3308      	adds	r3, #8
1000deb6:	8122      	strh	r2, [r4, #8]
1000deb8:	784a      	ldrb	r2, [r1, #1]
1000deba:	72a5      	strb	r5, [r4, #10]
1000debc:	7022      	strb	r2, [r4, #0]
1000debe:	898a      	ldrh	r2, [r1, #12]
1000dec0:	1c60      	adds	r0, r4, #1
1000dec2:	81a2      	strh	r2, [r4, #12]
1000dec4:	88db      	ldrh	r3, [r3, #6]
1000dec6:	3102      	adds	r1, #2
1000dec8:	81e3      	strh	r3, [r4, #14]
1000deca:	89cb      	ldrh	r3, [r1, #14]
1000decc:	2206      	movs	r2, #6
1000dece:	8223      	strh	r3, [r4, #16]
1000ded0:	4b0f      	ldr	r3, [pc, #60]	; (1000df10 <gapm_cmp_evt+0x144>)
1000ded2:	4798      	blx	r3
1000ded4:	2200      	movs	r2, #0
1000ded6:	7823      	ldrb	r3, [r4, #0]
1000ded8:	4293      	cmp	r3, r2
1000deda:	d00a      	beq.n	1000def2 <gapm_cmp_evt+0x126>
1000dedc:	79a3      	ldrb	r3, [r4, #6]
1000dede:	323f      	adds	r2, #63	; 0x3f
1000dee0:	1c19      	adds	r1, r3, #0
1000dee2:	4391      	bics	r1, r2
1000dee4:	3a3e      	subs	r2, #62	; 0x3e
1000dee6:	29c0      	cmp	r1, #192	; 0xc0
1000dee8:	d003      	beq.n	1000def2 <gapm_cmp_evt+0x126>
1000deea:	065b      	lsls	r3, r3, #25
1000deec:	0fdb      	lsrs	r3, r3, #31
1000deee:	3202      	adds	r2, #2
1000def0:	1ad2      	subs	r2, r2, r3
1000def2:	7022      	strb	r2, [r4, #0]
1000def4:	2005      	movs	r0, #5
1000def6:	e000      	b.n	1000defa <gapm_cmp_evt+0x12e>
1000def8:	2000      	movs	r0, #0
1000defa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000defc:	1000f8ed 	.word	0x1000f8ed
1000df00:	1000d15d 	.word	0x1000d15d
1000df04:	100132da 	.word	0x100132da
1000df08:	1000d121 	.word	0x1000d121
1000df0c:	1001324a 	.word	0x1001324a
1000df10:	1000f8db 	.word	0x1000f8db

1000df14 <get_gap_local_addr_type>:
1000df14:	4b04      	ldr	r3, [pc, #16]	; (1000df28 <get_gap_local_addr_type+0x14>)
1000df16:	2001      	movs	r0, #1
1000df18:	791b      	ldrb	r3, [r3, #4]
1000df1a:	2b02      	cmp	r3, #2
1000df1c:	d003      	beq.n	1000df26 <get_gap_local_addr_type+0x12>
1000df1e:	3b03      	subs	r3, #3
1000df20:	4258      	negs	r0, r3
1000df22:	4158      	adcs	r0, r3
1000df24:	0040      	lsls	r0, r0, #1
1000df26:	4770      	bx	lr
1000df28:	100132da 	.word	0x100132da

1000df2c <gapm_start_scan_cmd_handler>:
1000df2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df2e:	b085      	sub	sp, #20
1000df30:	ab0a      	add	r3, sp, #40	; 0x28
1000df32:	881e      	ldrh	r6, [r3, #0]
1000df34:	ab0b      	add	r3, sp, #44	; 0x2c
1000df36:	881d      	ldrh	r5, [r3, #0]
1000df38:	ab0c      	add	r3, sp, #48	; 0x30
1000df3a:	781b      	ldrb	r3, [r3, #0]
1000df3c:	4f1e      	ldr	r7, [pc, #120]	; (1000dfb8 <gapm_start_scan_cmd_handler+0x8c>)
1000df3e:	9301      	str	r3, [sp, #4]
1000df40:	ab0d      	add	r3, sp, #52	; 0x34
1000df42:	781b      	ldrb	r3, [r3, #0]
1000df44:	9100      	str	r1, [sp, #0]
1000df46:	9302      	str	r3, [sp, #8]
1000df48:	ab0e      	add	r3, sp, #56	; 0x38
1000df4a:	781b      	ldrb	r3, [r3, #0]
1000df4c:	8839      	ldrh	r1, [r7, #0]
1000df4e:	9303      	str	r3, [sp, #12]
1000df50:	ab0f      	add	r3, sp, #60	; 0x3c
1000df52:	881c      	ldrh	r4, [r3, #0]
1000df54:	4b19      	ldr	r3, [pc, #100]	; (1000dfbc <gapm_start_scan_cmd_handler+0x90>)
1000df56:	220f      	movs	r2, #15
1000df58:	7119      	strb	r1, [r3, #4]
1000df5a:	4669      	mov	r1, sp
1000df5c:	7809      	ldrb	r1, [r1, #0]
1000df5e:	701a      	strb	r2, [r3, #0]
1000df60:	7259      	strb	r1, [r3, #9]
1000df62:	4669      	mov	r1, sp
1000df64:	7909      	ldrb	r1, [r1, #4]
1000df66:	3a02      	subs	r2, #2
1000df68:	7419      	strb	r1, [r3, #16]
1000df6a:	4669      	mov	r1, sp
1000df6c:	705a      	strb	r2, [r3, #1]
1000df6e:	709a      	strb	r2, [r3, #2]
1000df70:	2200      	movs	r2, #0
1000df72:	883f      	ldrh	r7, [r7, #0]
1000df74:	7a09      	ldrb	r1, [r1, #8]
1000df76:	731e      	strb	r6, [r3, #12]
1000df78:	739d      	strb	r5, [r3, #14]
1000df7a:	0a3f      	lsrs	r7, r7, #8
1000df7c:	0a36      	lsrs	r6, r6, #8
1000df7e:	0a2d      	lsrs	r5, r5, #8
1000df80:	70da      	strb	r2, [r3, #3]
1000df82:	729a      	strb	r2, [r3, #10]
1000df84:	72da      	strb	r2, [r3, #11]
1000df86:	715f      	strb	r7, [r3, #5]
1000df88:	7218      	strb	r0, [r3, #8]
1000df8a:	735e      	strb	r6, [r3, #13]
1000df8c:	73dd      	strb	r5, [r3, #15]
1000df8e:	7459      	strb	r1, [r3, #17]
1000df90:	4669      	mov	r1, sp
1000df92:	7b09      	ldrb	r1, [r1, #12]
1000df94:	759c      	strb	r4, [r3, #22]
1000df96:	7499      	strb	r1, [r3, #18]
1000df98:	21a5      	movs	r1, #165	; 0xa5
1000df9a:	0a24      	lsrs	r4, r4, #8
1000df9c:	7519      	strb	r1, [r3, #20]
1000df9e:	7559      	strb	r1, [r3, #21]
1000dfa0:	3995      	subs	r1, #149	; 0x95
1000dfa2:	74da      	strb	r2, [r3, #19]
1000dfa4:	75dc      	strb	r4, [r3, #23]
1000dfa6:	7199      	strb	r1, [r3, #6]
1000dfa8:	71da      	strb	r2, [r3, #7]
1000dfaa:	1c18      	adds	r0, r3, #0
1000dfac:	3108      	adds	r1, #8
1000dfae:	4b04      	ldr	r3, [pc, #16]	; (1000dfc0 <gapm_start_scan_cmd_handler+0x94>)
1000dfb0:	4798      	blx	r3
1000dfb2:	b005      	add	sp, #20
1000dfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dfb6:	46c0      	nop			; (mov r8, r8)
1000dfb8:	10013248 	.word	0x10013248
1000dfbc:	100135b8 	.word	0x100135b8
1000dfc0:	1000cf59 	.word	0x1000cf59

1000dfc4 <gapm_adv_report_evt_handler>:
1000dfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dfc6:	7843      	ldrb	r3, [r0, #1]
1000dfc8:	1c05      	adds	r5, r0, #0
1000dfca:	9301      	str	r3, [sp, #4]
1000dfcc:	466b      	mov	r3, sp
1000dfce:	1c0c      	adds	r4, r1, #0
1000dfd0:	791b      	ldrb	r3, [r3, #4]
1000dfd2:	7806      	ldrb	r6, [r0, #0]
1000dfd4:	2206      	movs	r2, #6
1000dfd6:	704b      	strb	r3, [r1, #1]
1000dfd8:	1c88      	adds	r0, r1, #2
1000dfda:	4f1b      	ldr	r7, [pc, #108]	; (1000e048 <gapm_adv_report_evt_handler+0x84>)
1000dfdc:	1ca9      	adds	r1, r5, #2
1000dfde:	47b8      	blx	r7
1000dfe0:	1c20      	adds	r0, r4, #0
1000dfe2:	1c29      	adds	r1, r5, #0
1000dfe4:	7a2a      	ldrb	r2, [r5, #8]
1000dfe6:	3008      	adds	r0, #8
1000dfe8:	77c2      	strb	r2, [r0, #31]
1000dfea:	3109      	adds	r1, #9
1000dfec:	3528      	adds	r5, #40	; 0x28
1000dfee:	47b8      	blx	r7
1000dff0:	782b      	ldrb	r3, [r5, #0]
1000dff2:	b25a      	sxtb	r2, r3
1000dff4:	2a00      	cmp	r2, #0
1000dff6:	da01      	bge.n	1000dffc <gapm_adv_report_evt_handler+0x38>
1000dff8:	3301      	adds	r3, #1
1000dffa:	b2db      	uxtb	r3, r3
1000dffc:	1c22      	adds	r2, r4, #0
1000dffe:	3228      	adds	r2, #40	; 0x28
1000e000:	7013      	strb	r3, [r2, #0]
1000e002:	2200      	movs	r2, #0
1000e004:	9b01      	ldr	r3, [sp, #4]
1000e006:	4293      	cmp	r3, r2
1000e008:	d00a      	beq.n	1000e020 <gapm_adv_report_evt_handler+0x5c>
1000e00a:	79e3      	ldrb	r3, [r4, #7]
1000e00c:	323f      	adds	r2, #63	; 0x3f
1000e00e:	1c19      	adds	r1, r3, #0
1000e010:	4391      	bics	r1, r2
1000e012:	3a3e      	subs	r2, #62	; 0x3e
1000e014:	29c0      	cmp	r1, #192	; 0xc0
1000e016:	d003      	beq.n	1000e020 <gapm_adv_report_evt_handler+0x5c>
1000e018:	065b      	lsls	r3, r3, #25
1000e01a:	0fdb      	lsrs	r3, r3, #31
1000e01c:	3202      	adds	r2, #2
1000e01e:	1ad2      	subs	r2, r2, r3
1000e020:	7062      	strb	r2, [r4, #1]
1000e022:	2e04      	cmp	r6, #4
1000e024:	d80f      	bhi.n	1000e046 <gapm_adv_report_evt_handler+0x82>
1000e026:	1c30      	adds	r0, r6, #0
1000e028:	f000 fbc8 	bl	1000e7bc <__gnu_thumb1_case_uqi>
1000e02c:	09070503 	.word	0x09070503
1000e030:	0b          	.byte	0x0b
1000e031:	00          	.byte	0x00
1000e032:	2300      	movs	r3, #0
1000e034:	e006      	b.n	1000e044 <gapm_adv_report_evt_handler+0x80>
1000e036:	2301      	movs	r3, #1
1000e038:	e004      	b.n	1000e044 <gapm_adv_report_evt_handler+0x80>
1000e03a:	2302      	movs	r3, #2
1000e03c:	e002      	b.n	1000e044 <gapm_adv_report_evt_handler+0x80>
1000e03e:	2303      	movs	r3, #3
1000e040:	e000      	b.n	1000e044 <gapm_adv_report_evt_handler+0x80>
1000e042:	2305      	movs	r3, #5
1000e044:	7023      	strb	r3, [r4, #0]
1000e046:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e048:	1000f8db 	.word	0x1000f8db

1000e04c <gapm_start_connection_cmd_handler>:
1000e04c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e04e:	b089      	sub	sp, #36	; 0x24
1000e050:	aa0f      	add	r2, sp, #60	; 0x3c
1000e052:	8812      	ldrh	r2, [r2, #0]
1000e054:	9107      	str	r1, [sp, #28]
1000e056:	4694      	mov	ip, r2
1000e058:	aa10      	add	r2, sp, #64	; 0x40
1000e05a:	8812      	ldrh	r2, [r2, #0]
1000e05c:	a908      	add	r1, sp, #32
1000e05e:	9202      	str	r2, [sp, #8]
1000e060:	aa11      	add	r2, sp, #68	; 0x44
1000e062:	8812      	ldrh	r2, [r2, #0]
1000e064:	4e3b      	ldr	r6, [pc, #236]	; (1000e154 <gapm_start_connection_cmd_handler+0x108>)
1000e066:	9203      	str	r2, [sp, #12]
1000e068:	aa12      	add	r2, sp, #72	; 0x48
1000e06a:	8812      	ldrh	r2, [r2, #0]
1000e06c:	4c3a      	ldr	r4, [pc, #232]	; (1000e158 <gapm_start_connection_cmd_handler+0x10c>)
1000e06e:	9204      	str	r2, [sp, #16]
1000e070:	aa13      	add	r2, sp, #76	; 0x4c
1000e072:	8812      	ldrh	r2, [r2, #0]
1000e074:	ab0e      	add	r3, sp, #56	; 0x38
1000e076:	9205      	str	r2, [sp, #20]
1000e078:	aa14      	add	r2, sp, #80	; 0x50
1000e07a:	8812      	ldrh	r2, [r2, #0]
1000e07c:	881b      	ldrh	r3, [r3, #0]
1000e07e:	9206      	str	r2, [sp, #24]
1000e080:	aa15      	add	r2, sp, #84	; 0x54
1000e082:	8817      	ldrh	r7, [r2, #0]
1000e084:	2219      	movs	r2, #25
1000e086:	1852      	adds	r2, r2, r1
1000e088:	7fd2      	ldrb	r2, [r2, #31]
1000e08a:	8831      	ldrh	r1, [r6, #0]
1000e08c:	9201      	str	r2, [sp, #4]
1000e08e:	2211      	movs	r2, #17
1000e090:	7121      	strb	r1, [r4, #4]
1000e092:	4669      	mov	r1, sp
1000e094:	7022      	strb	r2, [r4, #0]
1000e096:	3a04      	subs	r2, #4
1000e098:	7062      	strb	r2, [r4, #1]
1000e09a:	70a2      	strb	r2, [r4, #2]
1000e09c:	2200      	movs	r2, #0
1000e09e:	8836      	ldrh	r6, [r6, #0]
1000e0a0:	7f09      	ldrb	r1, [r1, #28]
1000e0a2:	0a36      	lsrs	r6, r6, #8
1000e0a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000e0a6:	7166      	strb	r6, [r4, #5]
1000e0a8:	70e2      	strb	r2, [r4, #3]
1000e0aa:	7220      	strb	r0, [r4, #8]
1000e0ac:	7261      	strb	r1, [r4, #9]
1000e0ae:	72a2      	strb	r2, [r4, #10]
1000e0b0:	72e2      	strb	r2, [r4, #11]
1000e0b2:	7323      	strb	r3, [r4, #12]
1000e0b4:	0a1b      	lsrs	r3, r3, #8
1000e0b6:	7363      	strb	r3, [r4, #13]
1000e0b8:	4663      	mov	r3, ip
1000e0ba:	73a3      	strb	r3, [r4, #14]
1000e0bc:	4663      	mov	r3, ip
1000e0be:	0a1b      	lsrs	r3, r3, #8
1000e0c0:	73e3      	strb	r3, [r4, #15]
1000e0c2:	466b      	mov	r3, sp
1000e0c4:	7a1b      	ldrb	r3, [r3, #8]
1000e0c6:	2607      	movs	r6, #7
1000e0c8:	7423      	strb	r3, [r4, #16]
1000e0ca:	9b02      	ldr	r3, [sp, #8]
1000e0cc:	76a7      	strb	r7, [r4, #26]
1000e0ce:	0a1b      	lsrs	r3, r3, #8
1000e0d0:	7463      	strb	r3, [r4, #17]
1000e0d2:	466b      	mov	r3, sp
1000e0d4:	7b1b      	ldrb	r3, [r3, #12]
1000e0d6:	74a3      	strb	r3, [r4, #18]
1000e0d8:	9b03      	ldr	r3, [sp, #12]
1000e0da:	0a1b      	lsrs	r3, r3, #8
1000e0dc:	74e3      	strb	r3, [r4, #19]
1000e0de:	466b      	mov	r3, sp
1000e0e0:	7c1b      	ldrb	r3, [r3, #16]
1000e0e2:	7523      	strb	r3, [r4, #20]
1000e0e4:	9b04      	ldr	r3, [sp, #16]
1000e0e6:	0a1b      	lsrs	r3, r3, #8
1000e0e8:	7563      	strb	r3, [r4, #21]
1000e0ea:	466b      	mov	r3, sp
1000e0ec:	7d1b      	ldrb	r3, [r3, #20]
1000e0ee:	75a3      	strb	r3, [r4, #22]
1000e0f0:	9b05      	ldr	r3, [sp, #20]
1000e0f2:	0a1b      	lsrs	r3, r3, #8
1000e0f4:	75e3      	strb	r3, [r4, #23]
1000e0f6:	466b      	mov	r3, sp
1000e0f8:	7e1b      	ldrb	r3, [r3, #24]
1000e0fa:	7623      	strb	r3, [r4, #24]
1000e0fc:	9b06      	ldr	r3, [sp, #24]
1000e0fe:	0a1b      	lsrs	r3, r3, #8
1000e100:	7663      	strb	r3, [r4, #25]
1000e102:	0a3b      	lsrs	r3, r7, #8
1000e104:	76e3      	strb	r3, [r4, #27]
1000e106:	466b      	mov	r3, sp
1000e108:	791b      	ldrb	r3, [r3, #4]
1000e10a:	4f14      	ldr	r7, [pc, #80]	; (1000e15c <gapm_start_connection_cmd_handler+0x110>)
1000e10c:	7723      	strb	r3, [r4, #28]
1000e10e:	9b01      	ldr	r3, [sp, #4]
1000e110:	435e      	muls	r6, r3
1000e112:	19ae      	adds	r6, r5, r6
1000e114:	42b5      	cmp	r5, r6
1000e116:	d00f      	beq.n	1000e138 <gapm_start_connection_cmd_handler+0xec>
1000e118:	1c69      	adds	r1, r5, #1
1000e11a:	1c38      	adds	r0, r7, #0
1000e11c:	2206      	movs	r2, #6
1000e11e:	4b10      	ldr	r3, [pc, #64]	; (1000e160 <gapm_start_connection_cmd_handler+0x114>)
1000e120:	4798      	blx	r3
1000e122:	2200      	movs	r2, #0
1000e124:	2102      	movs	r1, #2
1000e126:	782b      	ldrb	r3, [r5, #0]
1000e128:	3507      	adds	r5, #7
1000e12a:	3b01      	subs	r3, #1
1000e12c:	b2db      	uxtb	r3, r3
1000e12e:	4299      	cmp	r1, r3
1000e130:	4152      	adcs	r2, r2
1000e132:	71ba      	strb	r2, [r7, #6]
1000e134:	3707      	adds	r7, #7
1000e136:	e7ed      	b.n	1000e114 <gapm_start_connection_cmd_handler+0xc8>
1000e138:	2107      	movs	r1, #7
1000e13a:	9b01      	ldr	r3, [sp, #4]
1000e13c:	1c20      	adds	r0, r4, #0
1000e13e:	4359      	muls	r1, r3
1000e140:	311d      	adds	r1, #29
1000e142:	1c0b      	adds	r3, r1, #0
1000e144:	3b08      	subs	r3, #8
1000e146:	71a3      	strb	r3, [r4, #6]
1000e148:	121b      	asrs	r3, r3, #8
1000e14a:	71e3      	strb	r3, [r4, #7]
1000e14c:	4b05      	ldr	r3, [pc, #20]	; (1000e164 <gapm_start_connection_cmd_handler+0x118>)
1000e14e:	4798      	blx	r3
1000e150:	b009      	add	sp, #36	; 0x24
1000e152:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e154:	10013248 	.word	0x10013248
1000e158:	100135b8 	.word	0x100135b8
1000e15c:	100135d5 	.word	0x100135d5
1000e160:	1000f8db 	.word	0x1000f8db
1000e164:	1000cf59 	.word	0x1000cf59

1000e168 <gapm_resolv_addr_cmd_handler>:
1000e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e16a:	2314      	movs	r3, #20
1000e16c:	4c12      	ldr	r4, [pc, #72]	; (1000e1b8 <gapm_resolv_addr_cmd_handler+0x50>)
1000e16e:	1c17      	adds	r7, r2, #0
1000e170:	7023      	strb	r3, [r4, #0]
1000e172:	3b07      	subs	r3, #7
1000e174:	7063      	strb	r3, [r4, #1]
1000e176:	70a3      	strb	r3, [r4, #2]
1000e178:	2300      	movs	r3, #0
1000e17a:	70e3      	strb	r3, [r4, #3]
1000e17c:	4b0f      	ldr	r3, [pc, #60]	; (1000e1bc <gapm_resolv_addr_cmd_handler+0x54>)
1000e17e:	1c05      	adds	r5, r0, #0
1000e180:	881a      	ldrh	r2, [r3, #0]
1000e182:	881b      	ldrh	r3, [r3, #0]
1000e184:	4e0e      	ldr	r6, [pc, #56]	; (1000e1c0 <gapm_resolv_addr_cmd_handler+0x58>)
1000e186:	0a1b      	lsrs	r3, r3, #8
1000e188:	7163      	strb	r3, [r4, #5]
1000e18a:	2317      	movs	r3, #23
1000e18c:	012d      	lsls	r5, r5, #4
1000e18e:	7122      	strb	r2, [r4, #4]
1000e190:	7260      	strb	r0, [r4, #9]
1000e192:	2206      	movs	r2, #6
1000e194:	480b      	ldr	r0, [pc, #44]	; (1000e1c4 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e196:	7223      	strb	r3, [r4, #8]
1000e198:	47b0      	blx	r6
1000e19a:	1c39      	adds	r1, r7, #0
1000e19c:	1c2a      	adds	r2, r5, #0
1000e19e:	480a      	ldr	r0, [pc, #40]	; (1000e1c8 <gapm_resolv_addr_cmd_handler+0x60>)
1000e1a0:	47b0      	blx	r6
1000e1a2:	1c29      	adds	r1, r5, #0
1000e1a4:	3110      	adds	r1, #16
1000e1a6:	1c0b      	adds	r3, r1, #0
1000e1a8:	3b08      	subs	r3, #8
1000e1aa:	71a3      	strb	r3, [r4, #6]
1000e1ac:	121b      	asrs	r3, r3, #8
1000e1ae:	71e3      	strb	r3, [r4, #7]
1000e1b0:	1c20      	adds	r0, r4, #0
1000e1b2:	4b06      	ldr	r3, [pc, #24]	; (1000e1cc <gapm_resolv_addr_cmd_handler+0x64>)
1000e1b4:	4798      	blx	r3
1000e1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e1b8:	100135b8 	.word	0x100135b8
1000e1bc:	10013248 	.word	0x10013248
1000e1c0:	1000f8db 	.word	0x1000f8db
1000e1c4:	100135c2 	.word	0x100135c2
1000e1c8:	100135c8 	.word	0x100135c8
1000e1cc:	1000cf59 	.word	0x1000cf59

1000e1d0 <gapm_addr_solved_ind_handler>:
1000e1d0:	b570      	push	{r4, r5, r6, lr}
1000e1d2:	1c04      	adds	r4, r0, #0
1000e1d4:	1c08      	adds	r0, r1, #0
1000e1d6:	1c0d      	adds	r5, r1, #0
1000e1d8:	4e05      	ldr	r6, [pc, #20]	; (1000e1f0 <gapm_addr_solved_ind_handler+0x20>)
1000e1da:	1c21      	adds	r1, r4, #0
1000e1dc:	2206      	movs	r2, #6
1000e1de:	3011      	adds	r0, #17
1000e1e0:	47b0      	blx	r6
1000e1e2:	1c68      	adds	r0, r5, #1
1000e1e4:	1da1      	adds	r1, r4, #6
1000e1e6:	2210      	movs	r2, #16
1000e1e8:	47b0      	blx	r6
1000e1ea:	2300      	movs	r3, #0
1000e1ec:	702b      	strb	r3, [r5, #0]
1000e1ee:	bd70      	pop	{r4, r5, r6, pc}
1000e1f0:	1000f8db 	.word	0x1000f8db

1000e1f4 <gapm_profile_added_ind_handler>:
1000e1f4:	b510      	push	{r4, lr}
1000e1f6:	7843      	ldrb	r3, [r0, #1]
1000e1f8:	7902      	ldrb	r2, [r0, #4]
1000e1fa:	7944      	ldrb	r4, [r0, #5]
1000e1fc:	7800      	ldrb	r0, [r0, #0]
1000e1fe:	021b      	lsls	r3, r3, #8
1000e200:	4303      	orrs	r3, r0
1000e202:	2b1b      	cmp	r3, #27
1000e204:	d104      	bne.n	1000e210 <gapm_profile_added_ind_handler+0x1c>
1000e206:	2300      	movs	r3, #0
1000e208:	700b      	strb	r3, [r1, #0]
1000e20a:	0223      	lsls	r3, r4, #8
1000e20c:	4313      	orrs	r3, r2
1000e20e:	804b      	strh	r3, [r1, #2]
1000e210:	203b      	movs	r0, #59	; 0x3b
1000e212:	bd10      	pop	{r4, pc}

1000e214 <gattc_read_req_ind_parser>:
1000e214:	7843      	ldrb	r3, [r0, #1]
1000e216:	7802      	ldrb	r2, [r0, #0]
1000e218:	021b      	lsls	r3, r3, #8
1000e21a:	4313      	orrs	r3, r2
1000e21c:	804b      	strh	r3, [r1, #2]
1000e21e:	4770      	bx	lr

1000e220 <gattc_write_req_ind_parser>:
1000e220:	b508      	push	{r3, lr}
1000e222:	1c13      	adds	r3, r2, #0
1000e224:	0a00      	lsrs	r0, r0, #8
1000e226:	8010      	strh	r0, [r2, #0]
1000e228:	784a      	ldrb	r2, [r1, #1]
1000e22a:	7808      	ldrb	r0, [r1, #0]
1000e22c:	0212      	lsls	r2, r2, #8
1000e22e:	4302      	orrs	r2, r0
1000e230:	805a      	strh	r2, [r3, #2]
1000e232:	78ca      	ldrb	r2, [r1, #3]
1000e234:	7888      	ldrb	r0, [r1, #2]
1000e236:	0212      	lsls	r2, r2, #8
1000e238:	4302      	orrs	r2, r0
1000e23a:	809a      	strh	r2, [r3, #4]
1000e23c:	794a      	ldrb	r2, [r1, #5]
1000e23e:	7908      	ldrb	r0, [r1, #4]
1000e240:	0212      	lsls	r2, r2, #8
1000e242:	4302      	orrs	r2, r0
1000e244:	80da      	strh	r2, [r3, #6]
1000e246:	3308      	adds	r3, #8
1000e248:	1c18      	adds	r0, r3, #0
1000e24a:	3106      	adds	r1, #6
1000e24c:	4b01      	ldr	r3, [pc, #4]	; (1000e254 <gattc_write_req_ind_parser+0x34>)
1000e24e:	4798      	blx	r3
1000e250:	bd08      	pop	{r3, pc}
1000e252:	46c0      	nop			; (mov r8, r8)
1000e254:	1000f8db 	.word	0x1000f8db

1000e258 <gattc_att_info_req_parser>:
1000e258:	7843      	ldrb	r3, [r0, #1]
1000e25a:	7802      	ldrb	r2, [r0, #0]
1000e25c:	021b      	lsls	r3, r3, #8
1000e25e:	4313      	orrs	r3, r2
1000e260:	800b      	strh	r3, [r1, #0]
1000e262:	4770      	bx	lr

1000e264 <gattc_read_cfm>:
1000e264:	b538      	push	{r3, r4, r5, lr}
1000e266:	2514      	movs	r5, #20
1000e268:	1c1c      	adds	r4, r3, #0
1000e26a:	4b14      	ldr	r3, [pc, #80]	; (1000e2bc <gattc_read_cfm+0x58>)
1000e26c:	70d9      	strb	r1, [r3, #3]
1000e26e:	4914      	ldr	r1, [pc, #80]	; (1000e2c0 <gattc_read_cfm+0x5c>)
1000e270:	701d      	strb	r5, [r3, #0]
1000e272:	3d08      	subs	r5, #8
1000e274:	705d      	strb	r5, [r3, #1]
1000e276:	709d      	strb	r5, [r3, #2]
1000e278:	880d      	ldrh	r5, [r1, #0]
1000e27a:	8809      	ldrh	r1, [r1, #0]
1000e27c:	7218      	strb	r0, [r3, #8]
1000e27e:	0a09      	lsrs	r1, r1, #8
1000e280:	7159      	strb	r1, [r3, #5]
1000e282:	0a00      	lsrs	r0, r0, #8
1000e284:	0a21      	lsrs	r1, r4, #8
1000e286:	711d      	strb	r5, [r3, #4]
1000e288:	7258      	strb	r0, [r3, #9]
1000e28a:	729c      	strb	r4, [r3, #10]
1000e28c:	72d9      	strb	r1, [r3, #11]
1000e28e:	731a      	strb	r2, [r3, #12]
1000e290:	1c1d      	adds	r5, r3, #0
1000e292:	2c00      	cmp	r4, #0
1000e294:	d007      	beq.n	1000e2a6 <gattc_read_cfm+0x42>
1000e296:	9904      	ldr	r1, [sp, #16]
1000e298:	1c22      	adds	r2, r4, #0
1000e29a:	480a      	ldr	r0, [pc, #40]	; (1000e2c4 <gattc_read_cfm+0x60>)
1000e29c:	4b0a      	ldr	r3, [pc, #40]	; (1000e2c8 <gattc_read_cfm+0x64>)
1000e29e:	340d      	adds	r4, #13
1000e2a0:	4798      	blx	r3
1000e2a2:	b2a1      	uxth	r1, r4
1000e2a4:	e001      	b.n	1000e2aa <gattc_read_cfm+0x46>
1000e2a6:	210e      	movs	r1, #14
1000e2a8:	735c      	strb	r4, [r3, #13]
1000e2aa:	1c0b      	adds	r3, r1, #0
1000e2ac:	3b08      	subs	r3, #8
1000e2ae:	71ab      	strb	r3, [r5, #6]
1000e2b0:	121b      	asrs	r3, r3, #8
1000e2b2:	71eb      	strb	r3, [r5, #7]
1000e2b4:	1c28      	adds	r0, r5, #0
1000e2b6:	4b05      	ldr	r3, [pc, #20]	; (1000e2cc <gattc_read_cfm+0x68>)
1000e2b8:	4798      	blx	r3
1000e2ba:	bd38      	pop	{r3, r4, r5, pc}
1000e2bc:	100135b8 	.word	0x100135b8
1000e2c0:	10013248 	.word	0x10013248
1000e2c4:	100135c5 	.word	0x100135c5
1000e2c8:	1000f8db 	.word	0x1000f8db
1000e2cc:	1000cf59 	.word	0x1000cf59

1000e2d0 <gattc_write_cfm>:
1000e2d0:	4b0d      	ldr	r3, [pc, #52]	; (1000e308 <gattc_write_cfm+0x38>)
1000e2d2:	b510      	push	{r4, lr}
1000e2d4:	729a      	strb	r2, [r3, #10]
1000e2d6:	2203      	movs	r2, #3
1000e2d8:	2416      	movs	r4, #22
1000e2da:	719a      	strb	r2, [r3, #6]
1000e2dc:	2200      	movs	r2, #0
1000e2de:	70d9      	strb	r1, [r3, #3]
1000e2e0:	490a      	ldr	r1, [pc, #40]	; (1000e30c <gattc_write_cfm+0x3c>)
1000e2e2:	701c      	strb	r4, [r3, #0]
1000e2e4:	3c0a      	subs	r4, #10
1000e2e6:	705c      	strb	r4, [r3, #1]
1000e2e8:	709c      	strb	r4, [r3, #2]
1000e2ea:	880c      	ldrh	r4, [r1, #0]
1000e2ec:	8809      	ldrh	r1, [r1, #0]
1000e2ee:	7218      	strb	r0, [r3, #8]
1000e2f0:	0a09      	lsrs	r1, r1, #8
1000e2f2:	0a00      	lsrs	r0, r0, #8
1000e2f4:	711c      	strb	r4, [r3, #4]
1000e2f6:	7159      	strb	r1, [r3, #5]
1000e2f8:	7258      	strb	r0, [r3, #9]
1000e2fa:	71da      	strb	r2, [r3, #7]
1000e2fc:	1c18      	adds	r0, r3, #0
1000e2fe:	210b      	movs	r1, #11
1000e300:	4b03      	ldr	r3, [pc, #12]	; (1000e310 <gattc_write_cfm+0x40>)
1000e302:	4798      	blx	r3
1000e304:	bd10      	pop	{r4, pc}
1000e306:	46c0      	nop			; (mov r8, r8)
1000e308:	100135b8 	.word	0x100135b8
1000e30c:	10013248 	.word	0x10013248
1000e310:	1000cf59 	.word	0x1000cf59

1000e314 <gattc_att_info_cfm>:
1000e314:	b538      	push	{r3, r4, r5, lr}
1000e316:	4c0e      	ldr	r4, [pc, #56]	; (1000e350 <gattc_att_info_cfm+0x3c>)
1000e318:	2518      	movs	r5, #24
1000e31a:	7323      	strb	r3, [r4, #12]
1000e31c:	2305      	movs	r3, #5
1000e31e:	71a3      	strb	r3, [r4, #6]
1000e320:	2300      	movs	r3, #0
1000e322:	70e1      	strb	r1, [r4, #3]
1000e324:	490b      	ldr	r1, [pc, #44]	; (1000e354 <gattc_att_info_cfm+0x40>)
1000e326:	7025      	strb	r5, [r4, #0]
1000e328:	3d0c      	subs	r5, #12
1000e32a:	7065      	strb	r5, [r4, #1]
1000e32c:	70a5      	strb	r5, [r4, #2]
1000e32e:	880d      	ldrh	r5, [r1, #0]
1000e330:	8809      	ldrh	r1, [r1, #0]
1000e332:	7220      	strb	r0, [r4, #8]
1000e334:	0a09      	lsrs	r1, r1, #8
1000e336:	0a00      	lsrs	r0, r0, #8
1000e338:	7161      	strb	r1, [r4, #5]
1000e33a:	7260      	strb	r0, [r4, #9]
1000e33c:	72a2      	strb	r2, [r4, #10]
1000e33e:	71e3      	strb	r3, [r4, #7]
1000e340:	0a12      	lsrs	r2, r2, #8
1000e342:	1c20      	adds	r0, r4, #0
1000e344:	210d      	movs	r1, #13
1000e346:	4b04      	ldr	r3, [pc, #16]	; (1000e358 <gattc_att_info_cfm+0x44>)
1000e348:	7125      	strb	r5, [r4, #4]
1000e34a:	72e2      	strb	r2, [r4, #11]
1000e34c:	4798      	blx	r3
1000e34e:	bd38      	pop	{r3, r4, r5, pc}
1000e350:	100135b8 	.word	0x100135b8
1000e354:	10013248 	.word	0x10013248
1000e358:	1000cf59 	.word	0x1000cf59

1000e35c <gattc_disc_cmd_handler>:
1000e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e35e:	2603      	movs	r6, #3
1000e360:	ac06      	add	r4, sp, #24
1000e362:	1c0d      	adds	r5, r1, #0
1000e364:	cc02      	ldmia	r4!, {r1}
1000e366:	8827      	ldrh	r7, [r4, #0]
1000e368:	4c1a      	ldr	r4, [pc, #104]	; (1000e3d4 <gattc_disc_cmd_handler+0x78>)
1000e36a:	7026      	strb	r6, [r4, #0]
1000e36c:	3609      	adds	r6, #9
1000e36e:	7066      	strb	r6, [r4, #1]
1000e370:	70a6      	strb	r6, [r4, #2]
1000e372:	4e19      	ldr	r6, [pc, #100]	; (1000e3d8 <gattc_disc_cmd_handler+0x7c>)
1000e374:	70e7      	strb	r7, [r4, #3]
1000e376:	8837      	ldrh	r7, [r6, #0]
1000e378:	8836      	ldrh	r6, [r6, #0]
1000e37a:	7127      	strb	r7, [r4, #4]
1000e37c:	0a36      	lsrs	r6, r6, #8
1000e37e:	7166      	strb	r6, [r4, #5]
1000e380:	7220      	strb	r0, [r4, #8]
1000e382:	2900      	cmp	r1, #0
1000e384:	d102      	bne.n	1000e38c <gattc_disc_cmd_handler+0x30>
1000e386:	2002      	movs	r0, #2
1000e388:	7260      	strb	r0, [r4, #9]
1000e38a:	e000      	b.n	1000e38e <gattc_disc_cmd_handler+0x32>
1000e38c:	7265      	strb	r5, [r4, #9]
1000e38e:	4e13      	ldr	r6, [pc, #76]	; (1000e3dc <gattc_disc_cmd_handler+0x80>)
1000e390:	7322      	strb	r2, [r4, #12]
1000e392:	8830      	ldrh	r0, [r6, #0]
1000e394:	0a12      	lsrs	r2, r2, #8
1000e396:	0a07      	lsrs	r7, r0, #8
1000e398:	72a0      	strb	r0, [r4, #10]
1000e39a:	73a3      	strb	r3, [r4, #14]
1000e39c:	3001      	adds	r0, #1
1000e39e:	0a1b      	lsrs	r3, r3, #8
1000e3a0:	72e7      	strb	r7, [r4, #11]
1000e3a2:	8030      	strh	r0, [r6, #0]
1000e3a4:	7362      	strb	r2, [r4, #13]
1000e3a6:	73e3      	strb	r3, [r4, #15]
1000e3a8:	2900      	cmp	r1, #0
1000e3aa:	d103      	bne.n	1000e3b4 <gattc_disc_cmd_handler+0x58>
1000e3ac:	7421      	strb	r1, [r4, #16]
1000e3ae:	7461      	strb	r1, [r4, #17]
1000e3b0:	3112      	adds	r1, #18
1000e3b2:	e005      	b.n	1000e3c0 <gattc_disc_cmd_handler+0x64>
1000e3b4:	480a      	ldr	r0, [pc, #40]	; (1000e3e0 <gattc_disc_cmd_handler+0x84>)
1000e3b6:	1c2a      	adds	r2, r5, #0
1000e3b8:	4b0a      	ldr	r3, [pc, #40]	; (1000e3e4 <gattc_disc_cmd_handler+0x88>)
1000e3ba:	4798      	blx	r3
1000e3bc:	1c29      	adds	r1, r5, #0
1000e3be:	3110      	adds	r1, #16
1000e3c0:	1c0b      	adds	r3, r1, #0
1000e3c2:	3b08      	subs	r3, #8
1000e3c4:	71a3      	strb	r3, [r4, #6]
1000e3c6:	121b      	asrs	r3, r3, #8
1000e3c8:	71e3      	strb	r3, [r4, #7]
1000e3ca:	1c20      	adds	r0, r4, #0
1000e3cc:	4b06      	ldr	r3, [pc, #24]	; (1000e3e8 <gattc_disc_cmd_handler+0x8c>)
1000e3ce:	4798      	blx	r3
1000e3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e3d2:	46c0      	nop			; (mov r8, r8)
1000e3d4:	100135b8 	.word	0x100135b8
1000e3d8:	10013248 	.word	0x10013248
1000e3dc:	100125e2 	.word	0x100125e2
1000e3e0:	100135c8 	.word	0x100135c8
1000e3e4:	1000f8db 	.word	0x1000f8db
1000e3e8:	1000cf59 	.word	0x1000cf59

1000e3ec <gattc_event_cfm_handler>:
1000e3ec:	220e      	movs	r2, #14
1000e3ee:	b508      	push	{r3, lr}
1000e3f0:	4b0b      	ldr	r3, [pc, #44]	; (1000e420 <gattc_event_cfm_handler+0x34>)
1000e3f2:	701a      	strb	r2, [r3, #0]
1000e3f4:	3a02      	subs	r2, #2
1000e3f6:	705a      	strb	r2, [r3, #1]
1000e3f8:	709a      	strb	r2, [r3, #2]
1000e3fa:	4a0a      	ldr	r2, [pc, #40]	; (1000e424 <gattc_event_cfm_handler+0x38>)
1000e3fc:	70d8      	strb	r0, [r3, #3]
1000e3fe:	8810      	ldrh	r0, [r2, #0]
1000e400:	8812      	ldrh	r2, [r2, #0]
1000e402:	7219      	strb	r1, [r3, #8]
1000e404:	0a12      	lsrs	r2, r2, #8
1000e406:	715a      	strb	r2, [r3, #5]
1000e408:	2202      	movs	r2, #2
1000e40a:	719a      	strb	r2, [r3, #6]
1000e40c:	2200      	movs	r2, #0
1000e40e:	0a09      	lsrs	r1, r1, #8
1000e410:	7118      	strb	r0, [r3, #4]
1000e412:	7259      	strb	r1, [r3, #9]
1000e414:	71da      	strb	r2, [r3, #7]
1000e416:	1c18      	adds	r0, r3, #0
1000e418:	210a      	movs	r1, #10
1000e41a:	4b03      	ldr	r3, [pc, #12]	; (1000e428 <gattc_event_cfm_handler+0x3c>)
1000e41c:	4798      	blx	r3
1000e41e:	bd08      	pop	{r3, pc}
1000e420:	100135b8 	.word	0x100135b8
1000e424:	10013248 	.word	0x10013248
1000e428:	1000cf59 	.word	0x1000cf59

1000e42c <gattc_disc_svc_ind_parser>:
1000e42c:	b570      	push	{r4, r5, r6, lr}
1000e42e:	1c15      	adds	r5, r2, #0
1000e430:	0a00      	lsrs	r0, r0, #8
1000e432:	8010      	strh	r0, [r2, #0]
1000e434:	784b      	ldrb	r3, [r1, #1]
1000e436:	780a      	ldrb	r2, [r1, #0]
1000e438:	021b      	lsls	r3, r3, #8
1000e43a:	4313      	orrs	r3, r2
1000e43c:	806b      	strh	r3, [r5, #2]
1000e43e:	78cb      	ldrb	r3, [r1, #3]
1000e440:	788a      	ldrb	r2, [r1, #2]
1000e442:	021b      	lsls	r3, r3, #8
1000e444:	4313      	orrs	r3, r2
1000e446:	80ab      	strh	r3, [r5, #4]
1000e448:	790e      	ldrb	r6, [r1, #4]
1000e44a:	4b05      	ldr	r3, [pc, #20]	; (1000e460 <gattc_disc_svc_ind_parser+0x34>)
1000e44c:	1c30      	adds	r0, r6, #0
1000e44e:	1c0c      	adds	r4, r1, #0
1000e450:	4798      	blx	r3
1000e452:	1c32      	adds	r2, r6, #0
1000e454:	71a8      	strb	r0, [r5, #6]
1000e456:	1d61      	adds	r1, r4, #5
1000e458:	1de8      	adds	r0, r5, #7
1000e45a:	4b02      	ldr	r3, [pc, #8]	; (1000e464 <gattc_disc_svc_ind_parser+0x38>)
1000e45c:	4798      	blx	r3
1000e45e:	bd70      	pop	{r4, r5, r6, pc}
1000e460:	1000c941 	.word	0x1000c941
1000e464:	1000f8db 	.word	0x1000f8db

1000e468 <gattc_disc_svc_incl_ind_parser>:
1000e468:	b570      	push	{r4, r5, r6, lr}
1000e46a:	1c15      	adds	r5, r2, #0
1000e46c:	0a00      	lsrs	r0, r0, #8
1000e46e:	8010      	strh	r0, [r2, #0]
1000e470:	784b      	ldrb	r3, [r1, #1]
1000e472:	780a      	ldrb	r2, [r1, #0]
1000e474:	021b      	lsls	r3, r3, #8
1000e476:	4313      	orrs	r3, r2
1000e478:	806b      	strh	r3, [r5, #2]
1000e47a:	78cb      	ldrb	r3, [r1, #3]
1000e47c:	788a      	ldrb	r2, [r1, #2]
1000e47e:	021b      	lsls	r3, r3, #8
1000e480:	4313      	orrs	r3, r2
1000e482:	80ab      	strh	r3, [r5, #4]
1000e484:	794b      	ldrb	r3, [r1, #5]
1000e486:	790a      	ldrb	r2, [r1, #4]
1000e488:	021b      	lsls	r3, r3, #8
1000e48a:	4313      	orrs	r3, r2
1000e48c:	80eb      	strh	r3, [r5, #6]
1000e48e:	798e      	ldrb	r6, [r1, #6]
1000e490:	4b05      	ldr	r3, [pc, #20]	; (1000e4a8 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e492:	1c30      	adds	r0, r6, #0
1000e494:	1c0c      	adds	r4, r1, #0
1000e496:	4798      	blx	r3
1000e498:	7228      	strb	r0, [r5, #8]
1000e49a:	1c28      	adds	r0, r5, #0
1000e49c:	1c32      	adds	r2, r6, #0
1000e49e:	1de1      	adds	r1, r4, #7
1000e4a0:	4b02      	ldr	r3, [pc, #8]	; (1000e4ac <gattc_disc_svc_incl_ind_parser+0x44>)
1000e4a2:	3009      	adds	r0, #9
1000e4a4:	4798      	blx	r3
1000e4a6:	bd70      	pop	{r4, r5, r6, pc}
1000e4a8:	1000c941 	.word	0x1000c941
1000e4ac:	1000f8db 	.word	0x1000f8db

1000e4b0 <gattc_disc_char_ind_parser>:
1000e4b0:	b570      	push	{r4, r5, r6, lr}
1000e4b2:	1c15      	adds	r5, r2, #0
1000e4b4:	0a00      	lsrs	r0, r0, #8
1000e4b6:	8010      	strh	r0, [r2, #0]
1000e4b8:	784b      	ldrb	r3, [r1, #1]
1000e4ba:	780a      	ldrb	r2, [r1, #0]
1000e4bc:	021b      	lsls	r3, r3, #8
1000e4be:	4313      	orrs	r3, r2
1000e4c0:	806b      	strh	r3, [r5, #2]
1000e4c2:	78cb      	ldrb	r3, [r1, #3]
1000e4c4:	788a      	ldrb	r2, [r1, #2]
1000e4c6:	021b      	lsls	r3, r3, #8
1000e4c8:	4313      	orrs	r3, r2
1000e4ca:	80ab      	strh	r3, [r5, #4]
1000e4cc:	790b      	ldrb	r3, [r1, #4]
1000e4ce:	1c0c      	adds	r4, r1, #0
1000e4d0:	71ab      	strb	r3, [r5, #6]
1000e4d2:	794e      	ldrb	r6, [r1, #5]
1000e4d4:	4b05      	ldr	r3, [pc, #20]	; (1000e4ec <gattc_disc_char_ind_parser+0x3c>)
1000e4d6:	1c30      	adds	r0, r6, #0
1000e4d8:	4798      	blx	r3
1000e4da:	71e8      	strb	r0, [r5, #7]
1000e4dc:	1c28      	adds	r0, r5, #0
1000e4de:	1c32      	adds	r2, r6, #0
1000e4e0:	1da1      	adds	r1, r4, #6
1000e4e2:	4b03      	ldr	r3, [pc, #12]	; (1000e4f0 <gattc_disc_char_ind_parser+0x40>)
1000e4e4:	3008      	adds	r0, #8
1000e4e6:	4798      	blx	r3
1000e4e8:	bd70      	pop	{r4, r5, r6, pc}
1000e4ea:	46c0      	nop			; (mov r8, r8)
1000e4ec:	1000c941 	.word	0x1000c941
1000e4f0:	1000f8db 	.word	0x1000f8db

1000e4f4 <gattc_disc_char_desc_ind_parser>:
1000e4f4:	b570      	push	{r4, r5, r6, lr}
1000e4f6:	1c15      	adds	r5, r2, #0
1000e4f8:	0a00      	lsrs	r0, r0, #8
1000e4fa:	8010      	strh	r0, [r2, #0]
1000e4fc:	784b      	ldrb	r3, [r1, #1]
1000e4fe:	780a      	ldrb	r2, [r1, #0]
1000e500:	021b      	lsls	r3, r3, #8
1000e502:	4313      	orrs	r3, r2
1000e504:	806b      	strh	r3, [r5, #2]
1000e506:	788e      	ldrb	r6, [r1, #2]
1000e508:	4b05      	ldr	r3, [pc, #20]	; (1000e520 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e50a:	1c30      	adds	r0, r6, #0
1000e50c:	1c0c      	adds	r4, r1, #0
1000e50e:	4798      	blx	r3
1000e510:	1c32      	adds	r2, r6, #0
1000e512:	7128      	strb	r0, [r5, #4]
1000e514:	1ce1      	adds	r1, r4, #3
1000e516:	1d68      	adds	r0, r5, #5
1000e518:	4b02      	ldr	r3, [pc, #8]	; (1000e524 <gattc_disc_char_desc_ind_parser+0x30>)
1000e51a:	4798      	blx	r3
1000e51c:	bd70      	pop	{r4, r5, r6, pc}
1000e51e:	46c0      	nop			; (mov r8, r8)
1000e520:	1000c941 	.word	0x1000c941
1000e524:	1000f8db 	.word	0x1000f8db

1000e528 <gattc_event_ind_and_notification_parser>:
1000e528:	b510      	push	{r4, lr}
1000e52a:	780c      	ldrb	r4, [r1, #0]
1000e52c:	1c13      	adds	r3, r2, #0
1000e52e:	2c12      	cmp	r4, #18
1000e530:	d10e      	bne.n	1000e550 <gattc_event_ind_and_notification_parser+0x28>
1000e532:	0a00      	lsrs	r0, r0, #8
1000e534:	8010      	strh	r0, [r2, #0]
1000e536:	788a      	ldrb	r2, [r1, #2]
1000e538:	709a      	strb	r2, [r3, #2]
1000e53a:	7948      	ldrb	r0, [r1, #5]
1000e53c:	790c      	ldrb	r4, [r1, #4]
1000e53e:	0200      	lsls	r0, r0, #8
1000e540:	4320      	orrs	r0, r4
1000e542:	8098      	strh	r0, [r3, #4]
1000e544:	3106      	adds	r1, #6
1000e546:	1d98      	adds	r0, r3, #6
1000e548:	4b0b      	ldr	r3, [pc, #44]	; (1000e578 <gattc_event_ind_and_notification_parser+0x50>)
1000e54a:	4798      	blx	r3
1000e54c:	221b      	movs	r2, #27
1000e54e:	e010      	b.n	1000e572 <gattc_event_ind_and_notification_parser+0x4a>
1000e550:	2200      	movs	r2, #0
1000e552:	2c13      	cmp	r4, #19
1000e554:	d10d      	bne.n	1000e572 <gattc_event_ind_and_notification_parser+0x4a>
1000e556:	0a00      	lsrs	r0, r0, #8
1000e558:	8018      	strh	r0, [r3, #0]
1000e55a:	788a      	ldrb	r2, [r1, #2]
1000e55c:	709a      	strb	r2, [r3, #2]
1000e55e:	7908      	ldrb	r0, [r1, #4]
1000e560:	78cc      	ldrb	r4, [r1, #3]
1000e562:	0200      	lsls	r0, r0, #8
1000e564:	4320      	orrs	r0, r4
1000e566:	8098      	strh	r0, [r3, #4]
1000e568:	3106      	adds	r1, #6
1000e56a:	1d98      	adds	r0, r3, #6
1000e56c:	4b02      	ldr	r3, [pc, #8]	; (1000e578 <gattc_event_ind_and_notification_parser+0x50>)
1000e56e:	4798      	blx	r3
1000e570:	221c      	movs	r2, #28
1000e572:	1c10      	adds	r0, r2, #0
1000e574:	bd10      	pop	{r4, pc}
1000e576:	46c0      	nop			; (mov r8, r8)
1000e578:	1000f8db 	.word	0x1000f8db

1000e57c <gattc_complete_evt_handler>:
1000e57c:	b500      	push	{lr}
1000e57e:	0a00      	lsrs	r0, r0, #8
1000e580:	8010      	strh	r0, [r2, #0]
1000e582:	7808      	ldrb	r0, [r1, #0]
1000e584:	7090      	strb	r0, [r2, #2]
1000e586:	784b      	ldrb	r3, [r1, #1]
1000e588:	3801      	subs	r0, #1
1000e58a:	70d3      	strb	r3, [r2, #3]
1000e58c:	2813      	cmp	r0, #19
1000e58e:	d82c      	bhi.n	1000e5ea <gattc_complete_evt_handler+0x6e>
1000e590:	f000 f914 	bl	1000e7bc <__gnu_thumb1_case_uqi>
1000e594:	0a0a0a0c 	.word	0x0a0a0a0c
1000e598:	210a0a0a 	.word	0x210a0a0a
1000e59c:	111f2121 	.word	0x111f2121
1000e5a0:	2b111111 	.word	0x2b111111
1000e5a4:	2919132b 	.word	0x2919132b
1000e5a8:	2017      	movs	r0, #23
1000e5aa:	e01f      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5ac:	2024      	movs	r0, #36	; 0x24
1000e5ae:	2b00      	cmp	r3, #0
1000e5b0:	d11c      	bne.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5b2:	3017      	adds	r0, #23
1000e5b4:	e01a      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5b6:	2025      	movs	r0, #37	; 0x25
1000e5b8:	e018      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5ba:	4a0d      	ldr	r2, [pc, #52]	; (1000e5f0 <gattc_complete_evt_handler+0x74>)
1000e5bc:	201d      	movs	r0, #29
1000e5be:	6813      	ldr	r3, [r2, #0]
1000e5c0:	3b01      	subs	r3, #1
1000e5c2:	6013      	str	r3, [r2, #0]
1000e5c4:	e012      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5c6:	4a0a      	ldr	r2, [pc, #40]	; (1000e5f0 <gattc_complete_evt_handler+0x74>)
1000e5c8:	201e      	movs	r0, #30
1000e5ca:	6813      	ldr	r3, [r2, #0]
1000e5cc:	3b01      	subs	r3, #1
1000e5ce:	6013      	str	r3, [r2, #0]
1000e5d0:	e00c      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5d2:	2019      	movs	r0, #25
1000e5d4:	e00a      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5d6:	203b      	movs	r0, #59	; 0x3b
1000e5d8:	2b00      	cmp	r3, #0
1000e5da:	d007      	beq.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5dc:	2182      	movs	r1, #130	; 0x82
1000e5de:	0089      	lsls	r1, r1, #2
1000e5e0:	5453      	strb	r3, [r2, r1]
1000e5e2:	3823      	subs	r0, #35	; 0x23
1000e5e4:	e002      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5e6:	2021      	movs	r0, #33	; 0x21
1000e5e8:	e000      	b.n	1000e5ec <gattc_complete_evt_handler+0x70>
1000e5ea:	2000      	movs	r0, #0
1000e5ec:	bd00      	pop	{pc}
1000e5ee:	46c0      	nop			; (mov r8, r8)
1000e5f0:	100125e8 	.word	0x100125e8

1000e5f4 <gattc_event_mtu_changed_ind_parser>:
1000e5f4:	0a00      	lsrs	r0, r0, #8
1000e5f6:	8010      	strh	r0, [r2, #0]
1000e5f8:	784b      	ldrb	r3, [r1, #1]
1000e5fa:	7809      	ldrb	r1, [r1, #0]
1000e5fc:	021b      	lsls	r3, r3, #8
1000e5fe:	430b      	orrs	r3, r1
1000e600:	8053      	strh	r3, [r2, #2]
1000e602:	4770      	bx	lr

1000e604 <gattc_read_ind_parser>:
1000e604:	0a00      	lsrs	r0, r0, #8
1000e606:	b508      	push	{r3, lr}
1000e608:	8010      	strh	r0, [r2, #0]
1000e60a:	1c13      	adds	r3, r2, #0
1000e60c:	2282      	movs	r2, #130	; 0x82
1000e60e:	2000      	movs	r0, #0
1000e610:	0092      	lsls	r2, r2, #2
1000e612:	5498      	strb	r0, [r3, r2]
1000e614:	784a      	ldrb	r2, [r1, #1]
1000e616:	7808      	ldrb	r0, [r1, #0]
1000e618:	0212      	lsls	r2, r2, #8
1000e61a:	4302      	orrs	r2, r0
1000e61c:	805a      	strh	r2, [r3, #2]
1000e61e:	78ca      	ldrb	r2, [r1, #3]
1000e620:	7888      	ldrb	r0, [r1, #2]
1000e622:	0212      	lsls	r2, r2, #8
1000e624:	4302      	orrs	r2, r0
1000e626:	80da      	strh	r2, [r3, #6]
1000e628:	794a      	ldrb	r2, [r1, #5]
1000e62a:	7908      	ldrb	r0, [r1, #4]
1000e62c:	0212      	lsls	r2, r2, #8
1000e62e:	4302      	orrs	r2, r0
1000e630:	809a      	strh	r2, [r3, #4]
1000e632:	3308      	adds	r3, #8
1000e634:	1c18      	adds	r0, r3, #0
1000e636:	3106      	adds	r1, #6
1000e638:	4b01      	ldr	r3, [pc, #4]	; (1000e640 <gattc_read_ind_parser+0x3c>)
1000e63a:	4798      	blx	r3
1000e63c:	bd08      	pop	{r3, pc}
1000e63e:	46c0      	nop			; (mov r8, r8)
1000e640:	1000f8db 	.word	0x1000f8db

1000e644 <gattc_svc_changed_cfg_ind_parser>:
1000e644:	0a00      	lsrs	r0, r0, #8
1000e646:	8010      	strh	r0, [r2, #0]
1000e648:	784b      	ldrb	r3, [r1, #1]
1000e64a:	7809      	ldrb	r1, [r1, #0]
1000e64c:	021b      	lsls	r3, r3, #8
1000e64e:	430b      	orrs	r3, r1
1000e650:	8053      	strh	r3, [r2, #2]
1000e652:	4770      	bx	lr

1000e654 <init_gattc_task_module>:
1000e654:	2300      	movs	r3, #0
1000e656:	4a02      	ldr	r2, [pc, #8]	; (1000e660 <init_gattc_task_module+0xc>)
1000e658:	8013      	strh	r3, [r2, #0]
1000e65a:	4a02      	ldr	r2, [pc, #8]	; (1000e664 <init_gattc_task_module+0x10>)
1000e65c:	8013      	strh	r3, [r2, #0]
1000e65e:	4770      	bx	lr
1000e660:	100125e2 	.word	0x100125e2
1000e664:	100125e4 	.word	0x100125e4

1000e668 <gattm_att_set_value_req_handler>:
1000e668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e66a:	466b      	mov	r3, sp
1000e66c:	1dde      	adds	r6, r3, #7
1000e66e:	2300      	movs	r3, #0
1000e670:	1c0d      	adds	r5, r1, #0
1000e672:	210c      	movs	r1, #12
1000e674:	270b      	movs	r7, #11
1000e676:	4c17      	ldr	r4, [pc, #92]	; (1000e6d4 <gattm_att_set_value_req_handler+0x6c>)
1000e678:	7033      	strb	r3, [r6, #0]
1000e67a:	70e3      	strb	r3, [r4, #3]
1000e67c:	4b16      	ldr	r3, [pc, #88]	; (1000e6d8 <gattm_att_set_value_req_handler+0x70>)
1000e67e:	7021      	strb	r1, [r4, #0]
1000e680:	8819      	ldrh	r1, [r3, #0]
1000e682:	881b      	ldrh	r3, [r3, #0]
1000e684:	7220      	strb	r0, [r4, #8]
1000e686:	0a1b      	lsrs	r3, r3, #8
1000e688:	7163      	strb	r3, [r4, #5]
1000e68a:	0a00      	lsrs	r0, r0, #8
1000e68c:	0a2b      	lsrs	r3, r5, #8
1000e68e:	7121      	strb	r1, [r4, #4]
1000e690:	7260      	strb	r0, [r4, #9]
1000e692:	1c11      	adds	r1, r2, #0
1000e694:	72a5      	strb	r5, [r4, #10]
1000e696:	1c2a      	adds	r2, r5, #0
1000e698:	72e3      	strb	r3, [r4, #11]
1000e69a:	350c      	adds	r5, #12
1000e69c:	4b0f      	ldr	r3, [pc, #60]	; (1000e6dc <gattm_att_set_value_req_handler+0x74>)
1000e69e:	4810      	ldr	r0, [pc, #64]	; (1000e6e0 <gattm_att_set_value_req_handler+0x78>)
1000e6a0:	7067      	strb	r7, [r4, #1]
1000e6a2:	70a7      	strb	r7, [r4, #2]
1000e6a4:	4798      	blx	r3
1000e6a6:	b2a9      	uxth	r1, r5
1000e6a8:	4b0e      	ldr	r3, [pc, #56]	; (1000e6e4 <gattm_att_set_value_req_handler+0x7c>)
1000e6aa:	4d0f      	ldr	r5, [pc, #60]	; (1000e6e8 <gattm_att_set_value_req_handler+0x80>)
1000e6ac:	1c20      	adds	r0, r4, #0
1000e6ae:	802b      	strh	r3, [r5, #0]
1000e6b0:	1c0b      	adds	r3, r1, #0
1000e6b2:	3b08      	subs	r3, #8
1000e6b4:	71a3      	strb	r3, [r4, #6]
1000e6b6:	121b      	asrs	r3, r3, #8
1000e6b8:	71e3      	strb	r3, [r4, #7]
1000e6ba:	4b0c      	ldr	r3, [pc, #48]	; (1000e6ec <gattm_att_set_value_req_handler+0x84>)
1000e6bc:	80af      	strh	r7, [r5, #4]
1000e6be:	4798      	blx	r3
1000e6c0:	1c30      	adds	r0, r6, #0
1000e6c2:	4b0b      	ldr	r3, [pc, #44]	; (1000e6f0 <gattm_att_set_value_req_handler+0x88>)
1000e6c4:	4798      	blx	r3
1000e6c6:	7833      	ldrb	r3, [r6, #0]
1000e6c8:	20e2      	movs	r0, #226	; 0xe2
1000e6ca:	2b00      	cmp	r3, #0
1000e6cc:	d101      	bne.n	1000e6d2 <gattm_att_set_value_req_handler+0x6a>
1000e6ce:	68ab      	ldr	r3, [r5, #8]
1000e6d0:	7898      	ldrb	r0, [r3, #2]
1000e6d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e6d4:	100135b8 	.word	0x100135b8
1000e6d8:	10013248 	.word	0x10013248
1000e6dc:	1000f8db 	.word	0x1000f8db
1000e6e0:	100135c4 	.word	0x100135c4
1000e6e4:	00000b0d 	.word	0x00000b0d
1000e6e8:	1001323c 	.word	0x1001323c
1000e6ec:	1000cf59 	.word	0x1000cf59
1000e6f0:	1000cfb5 	.word	0x1000cfb5

1000e6f4 <gattm_att_get_value_req_handler>:
1000e6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6f6:	b085      	sub	sp, #20
1000e6f8:	9201      	str	r2, [sp, #4]
1000e6fa:	220a      	movs	r2, #10
1000e6fc:	1c04      	adds	r4, r0, #0
1000e6fe:	481d      	ldr	r0, [pc, #116]	; (1000e774 <gattm_att_get_value_req_handler+0x80>)
1000e700:	ab02      	add	r3, sp, #8
1000e702:	1dde      	adds	r6, r3, #7
1000e704:	7002      	strb	r2, [r0, #0]
1000e706:	2300      	movs	r3, #0
1000e708:	220b      	movs	r2, #11
1000e70a:	4d1b      	ldr	r5, [pc, #108]	; (1000e778 <gattm_att_get_value_req_handler+0x84>)
1000e70c:	1c0f      	adds	r7, r1, #0
1000e70e:	8829      	ldrh	r1, [r5, #0]
1000e710:	882d      	ldrh	r5, [r5, #0]
1000e712:	7101      	strb	r1, [r0, #4]
1000e714:	0a2d      	lsrs	r5, r5, #8
1000e716:	7145      	strb	r5, [r0, #5]
1000e718:	0a25      	lsrs	r5, r4, #8
1000e71a:	7245      	strb	r5, [r0, #9]
1000e71c:	4917      	ldr	r1, [pc, #92]	; (1000e77c <gattm_att_get_value_req_handler+0x88>)
1000e71e:	4d18      	ldr	r5, [pc, #96]	; (1000e780 <gattm_att_get_value_req_handler+0x8c>)
1000e720:	7033      	strb	r3, [r6, #0]
1000e722:	7042      	strb	r2, [r0, #1]
1000e724:	7082      	strb	r2, [r0, #2]
1000e726:	70c3      	strb	r3, [r0, #3]
1000e728:	8029      	strh	r1, [r5, #0]
1000e72a:	80aa      	strh	r2, [r5, #4]
1000e72c:	71c3      	strb	r3, [r0, #7]
1000e72e:	3a09      	subs	r2, #9
1000e730:	210a      	movs	r1, #10
1000e732:	4b14      	ldr	r3, [pc, #80]	; (1000e784 <gattm_att_get_value_req_handler+0x90>)
1000e734:	7182      	strb	r2, [r0, #6]
1000e736:	7204      	strb	r4, [r0, #8]
1000e738:	4798      	blx	r3
1000e73a:	1c30      	adds	r0, r6, #0
1000e73c:	4b12      	ldr	r3, [pc, #72]	; (1000e788 <gattm_att_get_value_req_handler+0x94>)
1000e73e:	4798      	blx	r3
1000e740:	7833      	ldrb	r3, [r6, #0]
1000e742:	20e2      	movs	r0, #226	; 0xe2
1000e744:	2b00      	cmp	r3, #0
1000e746:	d112      	bne.n	1000e76e <gattm_att_get_value_req_handler+0x7a>
1000e748:	68a9      	ldr	r1, [r5, #8]
1000e74a:	9801      	ldr	r0, [sp, #4]
1000e74c:	784d      	ldrb	r5, [r1, #1]
1000e74e:	780b      	ldrb	r3, [r1, #0]
1000e750:	78ca      	ldrb	r2, [r1, #3]
1000e752:	022d      	lsls	r5, r5, #8
1000e754:	431d      	orrs	r5, r3
1000e756:	788b      	ldrb	r3, [r1, #2]
1000e758:	0212      	lsls	r2, r2, #8
1000e75a:	431a      	orrs	r2, r3
1000e75c:	803a      	strh	r2, [r7, #0]
1000e75e:	790e      	ldrb	r6, [r1, #4]
1000e760:	4b0a      	ldr	r3, [pc, #40]	; (1000e78c <gattm_att_get_value_req_handler+0x98>)
1000e762:	3105      	adds	r1, #5
1000e764:	4798      	blx	r3
1000e766:	20e2      	movs	r0, #226	; 0xe2
1000e768:	42ac      	cmp	r4, r5
1000e76a:	d100      	bne.n	1000e76e <gattm_att_get_value_req_handler+0x7a>
1000e76c:	1c30      	adds	r0, r6, #0
1000e76e:	b005      	add	sp, #20
1000e770:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e772:	46c0      	nop			; (mov r8, r8)
1000e774:	100135b8 	.word	0x100135b8
1000e778:	10013248 	.word	0x10013248
1000e77c:	00000b0b 	.word	0x00000b0b
1000e780:	1001323c 	.word	0x1001323c
1000e784:	1000cf59 	.word	0x1000cf59
1000e788:	1000cfb5 	.word	0x1000cfb5
1000e78c:	1000f8db 	.word	0x1000f8db

1000e790 <htpt_enable_rsp_handler>:
1000e790:	780b      	ldrb	r3, [r1, #0]
1000e792:	7013      	strb	r3, [r2, #0]
1000e794:	784b      	ldrb	r3, [r1, #1]
1000e796:	7053      	strb	r3, [r2, #1]
1000e798:	4770      	bx	lr

1000e79a <htpt_temp_send_rsp_handler>:
1000e79a:	780b      	ldrb	r3, [r1, #0]
1000e79c:	7013      	strb	r3, [r2, #0]
1000e79e:	4770      	bx	lr

1000e7a0 <htpt_meas_intv_upd_rsp_handler>:
1000e7a0:	780b      	ldrb	r3, [r1, #0]
1000e7a2:	7013      	strb	r3, [r2, #0]
1000e7a4:	4770      	bx	lr

1000e7a6 <htpt_meas_intv_chg_req_ind_handler>:
1000e7a6:	78cb      	ldrb	r3, [r1, #3]
1000e7a8:	7889      	ldrb	r1, [r1, #2]
1000e7aa:	021b      	lsls	r3, r3, #8
1000e7ac:	430b      	orrs	r3, r1
1000e7ae:	8013      	strh	r3, [r2, #0]
1000e7b0:	4770      	bx	lr

1000e7b2 <htpt_cfg_indntf_ind_handler>:
1000e7b2:	780b      	ldrb	r3, [r1, #0]
1000e7b4:	7013      	strb	r3, [r2, #0]
1000e7b6:	784b      	ldrb	r3, [r1, #1]
1000e7b8:	7053      	strb	r3, [r2, #1]
1000e7ba:	4770      	bx	lr

1000e7bc <__gnu_thumb1_case_uqi>:
1000e7bc:	b402      	push	{r1}
1000e7be:	4671      	mov	r1, lr
1000e7c0:	0849      	lsrs	r1, r1, #1
1000e7c2:	0049      	lsls	r1, r1, #1
1000e7c4:	5c09      	ldrb	r1, [r1, r0]
1000e7c6:	0049      	lsls	r1, r1, #1
1000e7c8:	448e      	add	lr, r1
1000e7ca:	bc02      	pop	{r1}
1000e7cc:	4770      	bx	lr
1000e7ce:	46c0      	nop			; (mov r8, r8)

1000e7d0 <__aeabi_uidiv>:
1000e7d0:	2200      	movs	r2, #0
1000e7d2:	0843      	lsrs	r3, r0, #1
1000e7d4:	428b      	cmp	r3, r1
1000e7d6:	d374      	bcc.n	1000e8c2 <__aeabi_uidiv+0xf2>
1000e7d8:	0903      	lsrs	r3, r0, #4
1000e7da:	428b      	cmp	r3, r1
1000e7dc:	d35f      	bcc.n	1000e89e <__aeabi_uidiv+0xce>
1000e7de:	0a03      	lsrs	r3, r0, #8
1000e7e0:	428b      	cmp	r3, r1
1000e7e2:	d344      	bcc.n	1000e86e <__aeabi_uidiv+0x9e>
1000e7e4:	0b03      	lsrs	r3, r0, #12
1000e7e6:	428b      	cmp	r3, r1
1000e7e8:	d328      	bcc.n	1000e83c <__aeabi_uidiv+0x6c>
1000e7ea:	0c03      	lsrs	r3, r0, #16
1000e7ec:	428b      	cmp	r3, r1
1000e7ee:	d30d      	bcc.n	1000e80c <__aeabi_uidiv+0x3c>
1000e7f0:	22ff      	movs	r2, #255	; 0xff
1000e7f2:	0209      	lsls	r1, r1, #8
1000e7f4:	ba12      	rev	r2, r2
1000e7f6:	0c03      	lsrs	r3, r0, #16
1000e7f8:	428b      	cmp	r3, r1
1000e7fa:	d302      	bcc.n	1000e802 <__aeabi_uidiv+0x32>
1000e7fc:	1212      	asrs	r2, r2, #8
1000e7fe:	0209      	lsls	r1, r1, #8
1000e800:	d065      	beq.n	1000e8ce <__aeabi_uidiv+0xfe>
1000e802:	0b03      	lsrs	r3, r0, #12
1000e804:	428b      	cmp	r3, r1
1000e806:	d319      	bcc.n	1000e83c <__aeabi_uidiv+0x6c>
1000e808:	e000      	b.n	1000e80c <__aeabi_uidiv+0x3c>
1000e80a:	0a09      	lsrs	r1, r1, #8
1000e80c:	0bc3      	lsrs	r3, r0, #15
1000e80e:	428b      	cmp	r3, r1
1000e810:	d301      	bcc.n	1000e816 <__aeabi_uidiv+0x46>
1000e812:	03cb      	lsls	r3, r1, #15
1000e814:	1ac0      	subs	r0, r0, r3
1000e816:	4152      	adcs	r2, r2
1000e818:	0b83      	lsrs	r3, r0, #14
1000e81a:	428b      	cmp	r3, r1
1000e81c:	d301      	bcc.n	1000e822 <__aeabi_uidiv+0x52>
1000e81e:	038b      	lsls	r3, r1, #14
1000e820:	1ac0      	subs	r0, r0, r3
1000e822:	4152      	adcs	r2, r2
1000e824:	0b43      	lsrs	r3, r0, #13
1000e826:	428b      	cmp	r3, r1
1000e828:	d301      	bcc.n	1000e82e <__aeabi_uidiv+0x5e>
1000e82a:	034b      	lsls	r3, r1, #13
1000e82c:	1ac0      	subs	r0, r0, r3
1000e82e:	4152      	adcs	r2, r2
1000e830:	0b03      	lsrs	r3, r0, #12
1000e832:	428b      	cmp	r3, r1
1000e834:	d301      	bcc.n	1000e83a <__aeabi_uidiv+0x6a>
1000e836:	030b      	lsls	r3, r1, #12
1000e838:	1ac0      	subs	r0, r0, r3
1000e83a:	4152      	adcs	r2, r2
1000e83c:	0ac3      	lsrs	r3, r0, #11
1000e83e:	428b      	cmp	r3, r1
1000e840:	d301      	bcc.n	1000e846 <__aeabi_uidiv+0x76>
1000e842:	02cb      	lsls	r3, r1, #11
1000e844:	1ac0      	subs	r0, r0, r3
1000e846:	4152      	adcs	r2, r2
1000e848:	0a83      	lsrs	r3, r0, #10
1000e84a:	428b      	cmp	r3, r1
1000e84c:	d301      	bcc.n	1000e852 <__aeabi_uidiv+0x82>
1000e84e:	028b      	lsls	r3, r1, #10
1000e850:	1ac0      	subs	r0, r0, r3
1000e852:	4152      	adcs	r2, r2
1000e854:	0a43      	lsrs	r3, r0, #9
1000e856:	428b      	cmp	r3, r1
1000e858:	d301      	bcc.n	1000e85e <__aeabi_uidiv+0x8e>
1000e85a:	024b      	lsls	r3, r1, #9
1000e85c:	1ac0      	subs	r0, r0, r3
1000e85e:	4152      	adcs	r2, r2
1000e860:	0a03      	lsrs	r3, r0, #8
1000e862:	428b      	cmp	r3, r1
1000e864:	d301      	bcc.n	1000e86a <__aeabi_uidiv+0x9a>
1000e866:	020b      	lsls	r3, r1, #8
1000e868:	1ac0      	subs	r0, r0, r3
1000e86a:	4152      	adcs	r2, r2
1000e86c:	d2cd      	bcs.n	1000e80a <__aeabi_uidiv+0x3a>
1000e86e:	09c3      	lsrs	r3, r0, #7
1000e870:	428b      	cmp	r3, r1
1000e872:	d301      	bcc.n	1000e878 <__aeabi_uidiv+0xa8>
1000e874:	01cb      	lsls	r3, r1, #7
1000e876:	1ac0      	subs	r0, r0, r3
1000e878:	4152      	adcs	r2, r2
1000e87a:	0983      	lsrs	r3, r0, #6
1000e87c:	428b      	cmp	r3, r1
1000e87e:	d301      	bcc.n	1000e884 <__aeabi_uidiv+0xb4>
1000e880:	018b      	lsls	r3, r1, #6
1000e882:	1ac0      	subs	r0, r0, r3
1000e884:	4152      	adcs	r2, r2
1000e886:	0943      	lsrs	r3, r0, #5
1000e888:	428b      	cmp	r3, r1
1000e88a:	d301      	bcc.n	1000e890 <__aeabi_uidiv+0xc0>
1000e88c:	014b      	lsls	r3, r1, #5
1000e88e:	1ac0      	subs	r0, r0, r3
1000e890:	4152      	adcs	r2, r2
1000e892:	0903      	lsrs	r3, r0, #4
1000e894:	428b      	cmp	r3, r1
1000e896:	d301      	bcc.n	1000e89c <__aeabi_uidiv+0xcc>
1000e898:	010b      	lsls	r3, r1, #4
1000e89a:	1ac0      	subs	r0, r0, r3
1000e89c:	4152      	adcs	r2, r2
1000e89e:	08c3      	lsrs	r3, r0, #3
1000e8a0:	428b      	cmp	r3, r1
1000e8a2:	d301      	bcc.n	1000e8a8 <__aeabi_uidiv+0xd8>
1000e8a4:	00cb      	lsls	r3, r1, #3
1000e8a6:	1ac0      	subs	r0, r0, r3
1000e8a8:	4152      	adcs	r2, r2
1000e8aa:	0883      	lsrs	r3, r0, #2
1000e8ac:	428b      	cmp	r3, r1
1000e8ae:	d301      	bcc.n	1000e8b4 <__aeabi_uidiv+0xe4>
1000e8b0:	008b      	lsls	r3, r1, #2
1000e8b2:	1ac0      	subs	r0, r0, r3
1000e8b4:	4152      	adcs	r2, r2
1000e8b6:	0843      	lsrs	r3, r0, #1
1000e8b8:	428b      	cmp	r3, r1
1000e8ba:	d301      	bcc.n	1000e8c0 <__aeabi_uidiv+0xf0>
1000e8bc:	004b      	lsls	r3, r1, #1
1000e8be:	1ac0      	subs	r0, r0, r3
1000e8c0:	4152      	adcs	r2, r2
1000e8c2:	1a41      	subs	r1, r0, r1
1000e8c4:	d200      	bcs.n	1000e8c8 <__aeabi_uidiv+0xf8>
1000e8c6:	4601      	mov	r1, r0
1000e8c8:	4152      	adcs	r2, r2
1000e8ca:	4610      	mov	r0, r2
1000e8cc:	4770      	bx	lr
1000e8ce:	e7ff      	b.n	1000e8d0 <__aeabi_uidiv+0x100>
1000e8d0:	b501      	push	{r0, lr}
1000e8d2:	2000      	movs	r0, #0
1000e8d4:	f000 f806 	bl	1000e8e4 <__aeabi_idiv0>
1000e8d8:	bd02      	pop	{r1, pc}
1000e8da:	46c0      	nop			; (mov r8, r8)

1000e8dc <__aeabi_uidivmod>:
1000e8dc:	2900      	cmp	r1, #0
1000e8de:	d0f7      	beq.n	1000e8d0 <__aeabi_uidiv+0x100>
1000e8e0:	e776      	b.n	1000e7d0 <__aeabi_uidiv>
1000e8e2:	4770      	bx	lr

1000e8e4 <__aeabi_idiv0>:
1000e8e4:	4770      	bx	lr
1000e8e6:	46c0      	nop			; (mov r8, r8)

1000e8e8 <__aeabi_d2uiz>:
1000e8e8:	b570      	push	{r4, r5, r6, lr}
1000e8ea:	2200      	movs	r2, #0
1000e8ec:	4b0c      	ldr	r3, [pc, #48]	; (1000e920 <__aeabi_d2uiz+0x38>)
1000e8ee:	0004      	movs	r4, r0
1000e8f0:	000d      	movs	r5, r1
1000e8f2:	f000 fe87 	bl	1000f604 <__aeabi_dcmpge>
1000e8f6:	2800      	cmp	r0, #0
1000e8f8:	d104      	bne.n	1000e904 <__aeabi_d2uiz+0x1c>
1000e8fa:	0020      	movs	r0, r4
1000e8fc:	0029      	movs	r1, r5
1000e8fe:	f000 fddf 	bl	1000f4c0 <__aeabi_d2iz>
1000e902:	bd70      	pop	{r4, r5, r6, pc}
1000e904:	4b06      	ldr	r3, [pc, #24]	; (1000e920 <__aeabi_d2uiz+0x38>)
1000e906:	2200      	movs	r2, #0
1000e908:	0020      	movs	r0, r4
1000e90a:	0029      	movs	r1, r5
1000e90c:	f000 fa84 	bl	1000ee18 <__aeabi_dsub>
1000e910:	f000 fdd6 	bl	1000f4c0 <__aeabi_d2iz>
1000e914:	2380      	movs	r3, #128	; 0x80
1000e916:	061b      	lsls	r3, r3, #24
1000e918:	469c      	mov	ip, r3
1000e91a:	4460      	add	r0, ip
1000e91c:	e7f1      	b.n	1000e902 <__aeabi_d2uiz+0x1a>
1000e91e:	46c0      	nop			; (mov r8, r8)
1000e920:	41e00000 	.word	0x41e00000

1000e924 <__aeabi_dmul>:
1000e924:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e926:	465f      	mov	r7, fp
1000e928:	4656      	mov	r6, sl
1000e92a:	464d      	mov	r5, r9
1000e92c:	4644      	mov	r4, r8
1000e92e:	b4f0      	push	{r4, r5, r6, r7}
1000e930:	030d      	lsls	r5, r1, #12
1000e932:	4699      	mov	r9, r3
1000e934:	004e      	lsls	r6, r1, #1
1000e936:	0b2b      	lsrs	r3, r5, #12
1000e938:	b087      	sub	sp, #28
1000e93a:	0007      	movs	r7, r0
1000e93c:	4692      	mov	sl, r2
1000e93e:	4680      	mov	r8, r0
1000e940:	469b      	mov	fp, r3
1000e942:	0d76      	lsrs	r6, r6, #21
1000e944:	0fcc      	lsrs	r4, r1, #31
1000e946:	2e00      	cmp	r6, #0
1000e948:	d069      	beq.n	1000ea1e <__aeabi_dmul+0xfa>
1000e94a:	4b6d      	ldr	r3, [pc, #436]	; (1000eb00 <__aeabi_dmul+0x1dc>)
1000e94c:	429e      	cmp	r6, r3
1000e94e:	d035      	beq.n	1000e9bc <__aeabi_dmul+0x98>
1000e950:	465b      	mov	r3, fp
1000e952:	2280      	movs	r2, #128	; 0x80
1000e954:	00dd      	lsls	r5, r3, #3
1000e956:	0412      	lsls	r2, r2, #16
1000e958:	0f43      	lsrs	r3, r0, #29
1000e95a:	4313      	orrs	r3, r2
1000e95c:	432b      	orrs	r3, r5
1000e95e:	469b      	mov	fp, r3
1000e960:	00c3      	lsls	r3, r0, #3
1000e962:	4698      	mov	r8, r3
1000e964:	4b67      	ldr	r3, [pc, #412]	; (1000eb04 <__aeabi_dmul+0x1e0>)
1000e966:	2700      	movs	r7, #0
1000e968:	469c      	mov	ip, r3
1000e96a:	2300      	movs	r3, #0
1000e96c:	4466      	add	r6, ip
1000e96e:	9301      	str	r3, [sp, #4]
1000e970:	464a      	mov	r2, r9
1000e972:	0315      	lsls	r5, r2, #12
1000e974:	0050      	lsls	r0, r2, #1
1000e976:	0fd2      	lsrs	r2, r2, #31
1000e978:	4653      	mov	r3, sl
1000e97a:	0b2d      	lsrs	r5, r5, #12
1000e97c:	0d40      	lsrs	r0, r0, #21
1000e97e:	4691      	mov	r9, r2
1000e980:	d100      	bne.n	1000e984 <__aeabi_dmul+0x60>
1000e982:	e076      	b.n	1000ea72 <__aeabi_dmul+0x14e>
1000e984:	4a5e      	ldr	r2, [pc, #376]	; (1000eb00 <__aeabi_dmul+0x1dc>)
1000e986:	4290      	cmp	r0, r2
1000e988:	d06c      	beq.n	1000ea64 <__aeabi_dmul+0x140>
1000e98a:	2280      	movs	r2, #128	; 0x80
1000e98c:	0f5b      	lsrs	r3, r3, #29
1000e98e:	0412      	lsls	r2, r2, #16
1000e990:	4313      	orrs	r3, r2
1000e992:	4a5c      	ldr	r2, [pc, #368]	; (1000eb04 <__aeabi_dmul+0x1e0>)
1000e994:	00ed      	lsls	r5, r5, #3
1000e996:	4694      	mov	ip, r2
1000e998:	431d      	orrs	r5, r3
1000e99a:	4653      	mov	r3, sl
1000e99c:	2200      	movs	r2, #0
1000e99e:	00db      	lsls	r3, r3, #3
1000e9a0:	4460      	add	r0, ip
1000e9a2:	4649      	mov	r1, r9
1000e9a4:	1836      	adds	r6, r6, r0
1000e9a6:	1c70      	adds	r0, r6, #1
1000e9a8:	4061      	eors	r1, r4
1000e9aa:	9002      	str	r0, [sp, #8]
1000e9ac:	4317      	orrs	r7, r2
1000e9ae:	2f0f      	cmp	r7, #15
1000e9b0:	d900      	bls.n	1000e9b4 <__aeabi_dmul+0x90>
1000e9b2:	e0af      	b.n	1000eb14 <__aeabi_dmul+0x1f0>
1000e9b4:	4854      	ldr	r0, [pc, #336]	; (1000eb08 <__aeabi_dmul+0x1e4>)
1000e9b6:	00bf      	lsls	r7, r7, #2
1000e9b8:	59c7      	ldr	r7, [r0, r7]
1000e9ba:	46bf      	mov	pc, r7
1000e9bc:	465b      	mov	r3, fp
1000e9be:	431f      	orrs	r7, r3
1000e9c0:	d000      	beq.n	1000e9c4 <__aeabi_dmul+0xa0>
1000e9c2:	e088      	b.n	1000ead6 <__aeabi_dmul+0x1b2>
1000e9c4:	2300      	movs	r3, #0
1000e9c6:	469b      	mov	fp, r3
1000e9c8:	4698      	mov	r8, r3
1000e9ca:	3302      	adds	r3, #2
1000e9cc:	2708      	movs	r7, #8
1000e9ce:	9301      	str	r3, [sp, #4]
1000e9d0:	e7ce      	b.n	1000e970 <__aeabi_dmul+0x4c>
1000e9d2:	4649      	mov	r1, r9
1000e9d4:	2a02      	cmp	r2, #2
1000e9d6:	d06a      	beq.n	1000eaae <__aeabi_dmul+0x18a>
1000e9d8:	2a03      	cmp	r2, #3
1000e9da:	d100      	bne.n	1000e9de <__aeabi_dmul+0xba>
1000e9dc:	e209      	b.n	1000edf2 <__aeabi_dmul+0x4ce>
1000e9de:	2a01      	cmp	r2, #1
1000e9e0:	d000      	beq.n	1000e9e4 <__aeabi_dmul+0xc0>
1000e9e2:	e1bb      	b.n	1000ed5c <__aeabi_dmul+0x438>
1000e9e4:	4011      	ands	r1, r2
1000e9e6:	2200      	movs	r2, #0
1000e9e8:	2300      	movs	r3, #0
1000e9ea:	2500      	movs	r5, #0
1000e9ec:	4690      	mov	r8, r2
1000e9ee:	b2cc      	uxtb	r4, r1
1000e9f0:	2100      	movs	r1, #0
1000e9f2:	032d      	lsls	r5, r5, #12
1000e9f4:	0d0a      	lsrs	r2, r1, #20
1000e9f6:	0512      	lsls	r2, r2, #20
1000e9f8:	0b2d      	lsrs	r5, r5, #12
1000e9fa:	4315      	orrs	r5, r2
1000e9fc:	4a43      	ldr	r2, [pc, #268]	; (1000eb0c <__aeabi_dmul+0x1e8>)
1000e9fe:	051b      	lsls	r3, r3, #20
1000ea00:	4015      	ands	r5, r2
1000ea02:	431d      	orrs	r5, r3
1000ea04:	006d      	lsls	r5, r5, #1
1000ea06:	07e4      	lsls	r4, r4, #31
1000ea08:	086d      	lsrs	r5, r5, #1
1000ea0a:	4325      	orrs	r5, r4
1000ea0c:	4640      	mov	r0, r8
1000ea0e:	0029      	movs	r1, r5
1000ea10:	b007      	add	sp, #28
1000ea12:	bc3c      	pop	{r2, r3, r4, r5}
1000ea14:	4690      	mov	r8, r2
1000ea16:	4699      	mov	r9, r3
1000ea18:	46a2      	mov	sl, r4
1000ea1a:	46ab      	mov	fp, r5
1000ea1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea1e:	4303      	orrs	r3, r0
1000ea20:	d052      	beq.n	1000eac8 <__aeabi_dmul+0x1a4>
1000ea22:	465b      	mov	r3, fp
1000ea24:	2b00      	cmp	r3, #0
1000ea26:	d100      	bne.n	1000ea2a <__aeabi_dmul+0x106>
1000ea28:	e18a      	b.n	1000ed40 <__aeabi_dmul+0x41c>
1000ea2a:	4658      	mov	r0, fp
1000ea2c:	f000 fdf4 	bl	1000f618 <__clzsi2>
1000ea30:	0003      	movs	r3, r0
1000ea32:	3b0b      	subs	r3, #11
1000ea34:	2b1c      	cmp	r3, #28
1000ea36:	dd00      	ble.n	1000ea3a <__aeabi_dmul+0x116>
1000ea38:	e17b      	b.n	1000ed32 <__aeabi_dmul+0x40e>
1000ea3a:	221d      	movs	r2, #29
1000ea3c:	1ad3      	subs	r3, r2, r3
1000ea3e:	003a      	movs	r2, r7
1000ea40:	0001      	movs	r1, r0
1000ea42:	465d      	mov	r5, fp
1000ea44:	40da      	lsrs	r2, r3
1000ea46:	3908      	subs	r1, #8
1000ea48:	408d      	lsls	r5, r1
1000ea4a:	0013      	movs	r3, r2
1000ea4c:	408f      	lsls	r7, r1
1000ea4e:	432b      	orrs	r3, r5
1000ea50:	469b      	mov	fp, r3
1000ea52:	46b8      	mov	r8, r7
1000ea54:	4b2e      	ldr	r3, [pc, #184]	; (1000eb10 <__aeabi_dmul+0x1ec>)
1000ea56:	2700      	movs	r7, #0
1000ea58:	469c      	mov	ip, r3
1000ea5a:	2300      	movs	r3, #0
1000ea5c:	4460      	add	r0, ip
1000ea5e:	4246      	negs	r6, r0
1000ea60:	9301      	str	r3, [sp, #4]
1000ea62:	e785      	b.n	1000e970 <__aeabi_dmul+0x4c>
1000ea64:	4652      	mov	r2, sl
1000ea66:	432a      	orrs	r2, r5
1000ea68:	d12c      	bne.n	1000eac4 <__aeabi_dmul+0x1a0>
1000ea6a:	2500      	movs	r5, #0
1000ea6c:	2300      	movs	r3, #0
1000ea6e:	2202      	movs	r2, #2
1000ea70:	e797      	b.n	1000e9a2 <__aeabi_dmul+0x7e>
1000ea72:	4652      	mov	r2, sl
1000ea74:	432a      	orrs	r2, r5
1000ea76:	d021      	beq.n	1000eabc <__aeabi_dmul+0x198>
1000ea78:	2d00      	cmp	r5, #0
1000ea7a:	d100      	bne.n	1000ea7e <__aeabi_dmul+0x15a>
1000ea7c:	e154      	b.n	1000ed28 <__aeabi_dmul+0x404>
1000ea7e:	0028      	movs	r0, r5
1000ea80:	f000 fdca 	bl	1000f618 <__clzsi2>
1000ea84:	0003      	movs	r3, r0
1000ea86:	3b0b      	subs	r3, #11
1000ea88:	2b1c      	cmp	r3, #28
1000ea8a:	dd00      	ble.n	1000ea8e <__aeabi_dmul+0x16a>
1000ea8c:	e146      	b.n	1000ed1c <__aeabi_dmul+0x3f8>
1000ea8e:	211d      	movs	r1, #29
1000ea90:	1acb      	subs	r3, r1, r3
1000ea92:	4651      	mov	r1, sl
1000ea94:	0002      	movs	r2, r0
1000ea96:	40d9      	lsrs	r1, r3
1000ea98:	4653      	mov	r3, sl
1000ea9a:	3a08      	subs	r2, #8
1000ea9c:	4095      	lsls	r5, r2
1000ea9e:	4093      	lsls	r3, r2
1000eaa0:	430d      	orrs	r5, r1
1000eaa2:	4a1b      	ldr	r2, [pc, #108]	; (1000eb10 <__aeabi_dmul+0x1ec>)
1000eaa4:	4694      	mov	ip, r2
1000eaa6:	4460      	add	r0, ip
1000eaa8:	4240      	negs	r0, r0
1000eaaa:	2200      	movs	r2, #0
1000eaac:	e779      	b.n	1000e9a2 <__aeabi_dmul+0x7e>
1000eaae:	2401      	movs	r4, #1
1000eab0:	2200      	movs	r2, #0
1000eab2:	400c      	ands	r4, r1
1000eab4:	4b12      	ldr	r3, [pc, #72]	; (1000eb00 <__aeabi_dmul+0x1dc>)
1000eab6:	2500      	movs	r5, #0
1000eab8:	4690      	mov	r8, r2
1000eaba:	e799      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000eabc:	2500      	movs	r5, #0
1000eabe:	2300      	movs	r3, #0
1000eac0:	2201      	movs	r2, #1
1000eac2:	e76e      	b.n	1000e9a2 <__aeabi_dmul+0x7e>
1000eac4:	2203      	movs	r2, #3
1000eac6:	e76c      	b.n	1000e9a2 <__aeabi_dmul+0x7e>
1000eac8:	2300      	movs	r3, #0
1000eaca:	469b      	mov	fp, r3
1000eacc:	4698      	mov	r8, r3
1000eace:	3301      	adds	r3, #1
1000ead0:	2704      	movs	r7, #4
1000ead2:	9301      	str	r3, [sp, #4]
1000ead4:	e74c      	b.n	1000e970 <__aeabi_dmul+0x4c>
1000ead6:	2303      	movs	r3, #3
1000ead8:	270c      	movs	r7, #12
1000eada:	9301      	str	r3, [sp, #4]
1000eadc:	e748      	b.n	1000e970 <__aeabi_dmul+0x4c>
1000eade:	2300      	movs	r3, #0
1000eae0:	2580      	movs	r5, #128	; 0x80
1000eae2:	4698      	mov	r8, r3
1000eae4:	2400      	movs	r4, #0
1000eae6:	032d      	lsls	r5, r5, #12
1000eae8:	4b05      	ldr	r3, [pc, #20]	; (1000eb00 <__aeabi_dmul+0x1dc>)
1000eaea:	e781      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000eaec:	465d      	mov	r5, fp
1000eaee:	4643      	mov	r3, r8
1000eaf0:	9a01      	ldr	r2, [sp, #4]
1000eaf2:	e76f      	b.n	1000e9d4 <__aeabi_dmul+0xb0>
1000eaf4:	465d      	mov	r5, fp
1000eaf6:	4643      	mov	r3, r8
1000eaf8:	0021      	movs	r1, r4
1000eafa:	9a01      	ldr	r2, [sp, #4]
1000eafc:	e76a      	b.n	1000e9d4 <__aeabi_dmul+0xb0>
1000eafe:	46c0      	nop			; (mov r8, r8)
1000eb00:	000007ff 	.word	0x000007ff
1000eb04:	fffffc01 	.word	0xfffffc01
1000eb08:	10012218 	.word	0x10012218
1000eb0c:	800fffff 	.word	0x800fffff
1000eb10:	000003f3 	.word	0x000003f3
1000eb14:	4642      	mov	r2, r8
1000eb16:	0c12      	lsrs	r2, r2, #16
1000eb18:	4691      	mov	r9, r2
1000eb1a:	0c1a      	lsrs	r2, r3, #16
1000eb1c:	4694      	mov	ip, r2
1000eb1e:	4642      	mov	r2, r8
1000eb20:	0417      	lsls	r7, r2, #16
1000eb22:	464a      	mov	r2, r9
1000eb24:	041b      	lsls	r3, r3, #16
1000eb26:	0c1b      	lsrs	r3, r3, #16
1000eb28:	435a      	muls	r2, r3
1000eb2a:	4660      	mov	r0, ip
1000eb2c:	4690      	mov	r8, r2
1000eb2e:	464a      	mov	r2, r9
1000eb30:	4342      	muls	r2, r0
1000eb32:	0010      	movs	r0, r2
1000eb34:	9203      	str	r2, [sp, #12]
1000eb36:	4662      	mov	r2, ip
1000eb38:	001c      	movs	r4, r3
1000eb3a:	0c3f      	lsrs	r7, r7, #16
1000eb3c:	437a      	muls	r2, r7
1000eb3e:	437c      	muls	r4, r7
1000eb40:	4442      	add	r2, r8
1000eb42:	9201      	str	r2, [sp, #4]
1000eb44:	0c22      	lsrs	r2, r4, #16
1000eb46:	4692      	mov	sl, r2
1000eb48:	9a01      	ldr	r2, [sp, #4]
1000eb4a:	4452      	add	r2, sl
1000eb4c:	4590      	cmp	r8, r2
1000eb4e:	d906      	bls.n	1000eb5e <__aeabi_dmul+0x23a>
1000eb50:	4682      	mov	sl, r0
1000eb52:	2080      	movs	r0, #128	; 0x80
1000eb54:	0240      	lsls	r0, r0, #9
1000eb56:	4680      	mov	r8, r0
1000eb58:	44c2      	add	sl, r8
1000eb5a:	4650      	mov	r0, sl
1000eb5c:	9003      	str	r0, [sp, #12]
1000eb5e:	0c10      	lsrs	r0, r2, #16
1000eb60:	9004      	str	r0, [sp, #16]
1000eb62:	4648      	mov	r0, r9
1000eb64:	0424      	lsls	r4, r4, #16
1000eb66:	0c24      	lsrs	r4, r4, #16
1000eb68:	0412      	lsls	r2, r2, #16
1000eb6a:	1912      	adds	r2, r2, r4
1000eb6c:	9205      	str	r2, [sp, #20]
1000eb6e:	0c2a      	lsrs	r2, r5, #16
1000eb70:	042d      	lsls	r5, r5, #16
1000eb72:	0c2d      	lsrs	r5, r5, #16
1000eb74:	4368      	muls	r0, r5
1000eb76:	002c      	movs	r4, r5
1000eb78:	4682      	mov	sl, r0
1000eb7a:	4648      	mov	r0, r9
1000eb7c:	437c      	muls	r4, r7
1000eb7e:	4350      	muls	r0, r2
1000eb80:	4681      	mov	r9, r0
1000eb82:	0c20      	lsrs	r0, r4, #16
1000eb84:	4680      	mov	r8, r0
1000eb86:	4357      	muls	r7, r2
1000eb88:	4457      	add	r7, sl
1000eb8a:	4447      	add	r7, r8
1000eb8c:	45ba      	cmp	sl, r7
1000eb8e:	d903      	bls.n	1000eb98 <__aeabi_dmul+0x274>
1000eb90:	2080      	movs	r0, #128	; 0x80
1000eb92:	0240      	lsls	r0, r0, #9
1000eb94:	4680      	mov	r8, r0
1000eb96:	44c1      	add	r9, r8
1000eb98:	0c38      	lsrs	r0, r7, #16
1000eb9a:	043f      	lsls	r7, r7, #16
1000eb9c:	46b8      	mov	r8, r7
1000eb9e:	4448      	add	r0, r9
1000eba0:	0424      	lsls	r4, r4, #16
1000eba2:	0c24      	lsrs	r4, r4, #16
1000eba4:	9001      	str	r0, [sp, #4]
1000eba6:	9804      	ldr	r0, [sp, #16]
1000eba8:	44a0      	add	r8, r4
1000ebaa:	4440      	add	r0, r8
1000ebac:	9004      	str	r0, [sp, #16]
1000ebae:	4658      	mov	r0, fp
1000ebb0:	0c00      	lsrs	r0, r0, #16
1000ebb2:	4681      	mov	r9, r0
1000ebb4:	4658      	mov	r0, fp
1000ebb6:	0404      	lsls	r4, r0, #16
1000ebb8:	0c20      	lsrs	r0, r4, #16
1000ebba:	4682      	mov	sl, r0
1000ebbc:	0007      	movs	r7, r0
1000ebbe:	4648      	mov	r0, r9
1000ebc0:	435f      	muls	r7, r3
1000ebc2:	464c      	mov	r4, r9
1000ebc4:	4343      	muls	r3, r0
1000ebc6:	4660      	mov	r0, ip
1000ebc8:	4360      	muls	r0, r4
1000ebca:	4664      	mov	r4, ip
1000ebcc:	4683      	mov	fp, r0
1000ebce:	4650      	mov	r0, sl
1000ebd0:	4344      	muls	r4, r0
1000ebd2:	0c38      	lsrs	r0, r7, #16
1000ebd4:	4684      	mov	ip, r0
1000ebd6:	18e4      	adds	r4, r4, r3
1000ebd8:	4464      	add	r4, ip
1000ebda:	42a3      	cmp	r3, r4
1000ebdc:	d903      	bls.n	1000ebe6 <__aeabi_dmul+0x2c2>
1000ebde:	2380      	movs	r3, #128	; 0x80
1000ebe0:	025b      	lsls	r3, r3, #9
1000ebe2:	469c      	mov	ip, r3
1000ebe4:	44e3      	add	fp, ip
1000ebe6:	4648      	mov	r0, r9
1000ebe8:	043f      	lsls	r7, r7, #16
1000ebea:	0c23      	lsrs	r3, r4, #16
1000ebec:	0c3f      	lsrs	r7, r7, #16
1000ebee:	0424      	lsls	r4, r4, #16
1000ebf0:	19e4      	adds	r4, r4, r7
1000ebf2:	4657      	mov	r7, sl
1000ebf4:	4368      	muls	r0, r5
1000ebf6:	436f      	muls	r7, r5
1000ebf8:	4684      	mov	ip, r0
1000ebfa:	464d      	mov	r5, r9
1000ebfc:	4650      	mov	r0, sl
1000ebfe:	4355      	muls	r5, r2
1000ec00:	4342      	muls	r2, r0
1000ec02:	0c38      	lsrs	r0, r7, #16
1000ec04:	4681      	mov	r9, r0
1000ec06:	4462      	add	r2, ip
1000ec08:	444a      	add	r2, r9
1000ec0a:	445b      	add	r3, fp
1000ec0c:	4594      	cmp	ip, r2
1000ec0e:	d903      	bls.n	1000ec18 <__aeabi_dmul+0x2f4>
1000ec10:	2080      	movs	r0, #128	; 0x80
1000ec12:	0240      	lsls	r0, r0, #9
1000ec14:	4684      	mov	ip, r0
1000ec16:	4465      	add	r5, ip
1000ec18:	9803      	ldr	r0, [sp, #12]
1000ec1a:	043f      	lsls	r7, r7, #16
1000ec1c:	4683      	mov	fp, r0
1000ec1e:	9804      	ldr	r0, [sp, #16]
1000ec20:	0c3f      	lsrs	r7, r7, #16
1000ec22:	4684      	mov	ip, r0
1000ec24:	44e3      	add	fp, ip
1000ec26:	45c3      	cmp	fp, r8
1000ec28:	4180      	sbcs	r0, r0
1000ec2a:	4240      	negs	r0, r0
1000ec2c:	4682      	mov	sl, r0
1000ec2e:	0410      	lsls	r0, r2, #16
1000ec30:	4684      	mov	ip, r0
1000ec32:	9801      	ldr	r0, [sp, #4]
1000ec34:	4467      	add	r7, ip
1000ec36:	4684      	mov	ip, r0
1000ec38:	4467      	add	r7, ip
1000ec3a:	44a3      	add	fp, r4
1000ec3c:	46bc      	mov	ip, r7
1000ec3e:	45a3      	cmp	fp, r4
1000ec40:	41a4      	sbcs	r4, r4
1000ec42:	4699      	mov	r9, r3
1000ec44:	44d4      	add	ip, sl
1000ec46:	4264      	negs	r4, r4
1000ec48:	4287      	cmp	r7, r0
1000ec4a:	41bf      	sbcs	r7, r7
1000ec4c:	45d4      	cmp	ip, sl
1000ec4e:	4180      	sbcs	r0, r0
1000ec50:	44e1      	add	r9, ip
1000ec52:	46a0      	mov	r8, r4
1000ec54:	4599      	cmp	r9, r3
1000ec56:	419b      	sbcs	r3, r3
1000ec58:	427f      	negs	r7, r7
1000ec5a:	4240      	negs	r0, r0
1000ec5c:	44c8      	add	r8, r9
1000ec5e:	4307      	orrs	r7, r0
1000ec60:	0c12      	lsrs	r2, r2, #16
1000ec62:	18ba      	adds	r2, r7, r2
1000ec64:	45a0      	cmp	r8, r4
1000ec66:	41a4      	sbcs	r4, r4
1000ec68:	425f      	negs	r7, r3
1000ec6a:	003b      	movs	r3, r7
1000ec6c:	4264      	negs	r4, r4
1000ec6e:	4323      	orrs	r3, r4
1000ec70:	18d7      	adds	r7, r2, r3
1000ec72:	4643      	mov	r3, r8
1000ec74:	197d      	adds	r5, r7, r5
1000ec76:	0ddb      	lsrs	r3, r3, #23
1000ec78:	026d      	lsls	r5, r5, #9
1000ec7a:	431d      	orrs	r5, r3
1000ec7c:	465b      	mov	r3, fp
1000ec7e:	025a      	lsls	r2, r3, #9
1000ec80:	9b05      	ldr	r3, [sp, #20]
1000ec82:	431a      	orrs	r2, r3
1000ec84:	1e53      	subs	r3, r2, #1
1000ec86:	419a      	sbcs	r2, r3
1000ec88:	465b      	mov	r3, fp
1000ec8a:	0ddb      	lsrs	r3, r3, #23
1000ec8c:	431a      	orrs	r2, r3
1000ec8e:	4643      	mov	r3, r8
1000ec90:	025b      	lsls	r3, r3, #9
1000ec92:	4313      	orrs	r3, r2
1000ec94:	01ea      	lsls	r2, r5, #7
1000ec96:	d507      	bpl.n	1000eca8 <__aeabi_dmul+0x384>
1000ec98:	2201      	movs	r2, #1
1000ec9a:	085c      	lsrs	r4, r3, #1
1000ec9c:	4013      	ands	r3, r2
1000ec9e:	4323      	orrs	r3, r4
1000eca0:	07ea      	lsls	r2, r5, #31
1000eca2:	9e02      	ldr	r6, [sp, #8]
1000eca4:	4313      	orrs	r3, r2
1000eca6:	086d      	lsrs	r5, r5, #1
1000eca8:	4a57      	ldr	r2, [pc, #348]	; (1000ee08 <__aeabi_dmul+0x4e4>)
1000ecaa:	18b2      	adds	r2, r6, r2
1000ecac:	2a00      	cmp	r2, #0
1000ecae:	dd4b      	ble.n	1000ed48 <__aeabi_dmul+0x424>
1000ecb0:	0758      	lsls	r0, r3, #29
1000ecb2:	d009      	beq.n	1000ecc8 <__aeabi_dmul+0x3a4>
1000ecb4:	200f      	movs	r0, #15
1000ecb6:	4018      	ands	r0, r3
1000ecb8:	2804      	cmp	r0, #4
1000ecba:	d005      	beq.n	1000ecc8 <__aeabi_dmul+0x3a4>
1000ecbc:	1d18      	adds	r0, r3, #4
1000ecbe:	4298      	cmp	r0, r3
1000ecc0:	419b      	sbcs	r3, r3
1000ecc2:	425b      	negs	r3, r3
1000ecc4:	18ed      	adds	r5, r5, r3
1000ecc6:	0003      	movs	r3, r0
1000ecc8:	01e8      	lsls	r0, r5, #7
1000ecca:	d504      	bpl.n	1000ecd6 <__aeabi_dmul+0x3b2>
1000eccc:	4a4f      	ldr	r2, [pc, #316]	; (1000ee0c <__aeabi_dmul+0x4e8>)
1000ecce:	4015      	ands	r5, r2
1000ecd0:	2280      	movs	r2, #128	; 0x80
1000ecd2:	00d2      	lsls	r2, r2, #3
1000ecd4:	18b2      	adds	r2, r6, r2
1000ecd6:	484e      	ldr	r0, [pc, #312]	; (1000ee10 <__aeabi_dmul+0x4ec>)
1000ecd8:	4282      	cmp	r2, r0
1000ecda:	dd00      	ble.n	1000ecde <__aeabi_dmul+0x3ba>
1000ecdc:	e6e7      	b.n	1000eaae <__aeabi_dmul+0x18a>
1000ecde:	2401      	movs	r4, #1
1000ece0:	08db      	lsrs	r3, r3, #3
1000ece2:	0768      	lsls	r0, r5, #29
1000ece4:	4318      	orrs	r0, r3
1000ece6:	026d      	lsls	r5, r5, #9
1000ece8:	0553      	lsls	r3, r2, #21
1000ecea:	4680      	mov	r8, r0
1000ecec:	0b2d      	lsrs	r5, r5, #12
1000ecee:	0d5b      	lsrs	r3, r3, #21
1000ecf0:	400c      	ands	r4, r1
1000ecf2:	e67d      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000ecf4:	2280      	movs	r2, #128	; 0x80
1000ecf6:	4659      	mov	r1, fp
1000ecf8:	0312      	lsls	r2, r2, #12
1000ecfa:	4211      	tst	r1, r2
1000ecfc:	d008      	beq.n	1000ed10 <__aeabi_dmul+0x3ec>
1000ecfe:	4215      	tst	r5, r2
1000ed00:	d106      	bne.n	1000ed10 <__aeabi_dmul+0x3ec>
1000ed02:	4315      	orrs	r5, r2
1000ed04:	032d      	lsls	r5, r5, #12
1000ed06:	4698      	mov	r8, r3
1000ed08:	0b2d      	lsrs	r5, r5, #12
1000ed0a:	464c      	mov	r4, r9
1000ed0c:	4b41      	ldr	r3, [pc, #260]	; (1000ee14 <__aeabi_dmul+0x4f0>)
1000ed0e:	e66f      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000ed10:	465d      	mov	r5, fp
1000ed12:	4315      	orrs	r5, r2
1000ed14:	032d      	lsls	r5, r5, #12
1000ed16:	0b2d      	lsrs	r5, r5, #12
1000ed18:	4b3e      	ldr	r3, [pc, #248]	; (1000ee14 <__aeabi_dmul+0x4f0>)
1000ed1a:	e669      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000ed1c:	0003      	movs	r3, r0
1000ed1e:	4655      	mov	r5, sl
1000ed20:	3b28      	subs	r3, #40	; 0x28
1000ed22:	409d      	lsls	r5, r3
1000ed24:	2300      	movs	r3, #0
1000ed26:	e6bc      	b.n	1000eaa2 <__aeabi_dmul+0x17e>
1000ed28:	4650      	mov	r0, sl
1000ed2a:	f000 fc75 	bl	1000f618 <__clzsi2>
1000ed2e:	3020      	adds	r0, #32
1000ed30:	e6a8      	b.n	1000ea84 <__aeabi_dmul+0x160>
1000ed32:	0003      	movs	r3, r0
1000ed34:	3b28      	subs	r3, #40	; 0x28
1000ed36:	409f      	lsls	r7, r3
1000ed38:	2300      	movs	r3, #0
1000ed3a:	46bb      	mov	fp, r7
1000ed3c:	4698      	mov	r8, r3
1000ed3e:	e689      	b.n	1000ea54 <__aeabi_dmul+0x130>
1000ed40:	f000 fc6a 	bl	1000f618 <__clzsi2>
1000ed44:	3020      	adds	r0, #32
1000ed46:	e673      	b.n	1000ea30 <__aeabi_dmul+0x10c>
1000ed48:	2401      	movs	r4, #1
1000ed4a:	1aa6      	subs	r6, r4, r2
1000ed4c:	2e38      	cmp	r6, #56	; 0x38
1000ed4e:	dd07      	ble.n	1000ed60 <__aeabi_dmul+0x43c>
1000ed50:	2200      	movs	r2, #0
1000ed52:	400c      	ands	r4, r1
1000ed54:	2300      	movs	r3, #0
1000ed56:	2500      	movs	r5, #0
1000ed58:	4690      	mov	r8, r2
1000ed5a:	e649      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000ed5c:	9e02      	ldr	r6, [sp, #8]
1000ed5e:	e7a3      	b.n	1000eca8 <__aeabi_dmul+0x384>
1000ed60:	2e1f      	cmp	r6, #31
1000ed62:	dc20      	bgt.n	1000eda6 <__aeabi_dmul+0x482>
1000ed64:	2220      	movs	r2, #32
1000ed66:	002c      	movs	r4, r5
1000ed68:	0018      	movs	r0, r3
1000ed6a:	1b92      	subs	r2, r2, r6
1000ed6c:	40f0      	lsrs	r0, r6
1000ed6e:	4094      	lsls	r4, r2
1000ed70:	4093      	lsls	r3, r2
1000ed72:	4304      	orrs	r4, r0
1000ed74:	1e58      	subs	r0, r3, #1
1000ed76:	4183      	sbcs	r3, r0
1000ed78:	431c      	orrs	r4, r3
1000ed7a:	40f5      	lsrs	r5, r6
1000ed7c:	0763      	lsls	r3, r4, #29
1000ed7e:	d009      	beq.n	1000ed94 <__aeabi_dmul+0x470>
1000ed80:	230f      	movs	r3, #15
1000ed82:	4023      	ands	r3, r4
1000ed84:	2b04      	cmp	r3, #4
1000ed86:	d005      	beq.n	1000ed94 <__aeabi_dmul+0x470>
1000ed88:	0023      	movs	r3, r4
1000ed8a:	1d1c      	adds	r4, r3, #4
1000ed8c:	429c      	cmp	r4, r3
1000ed8e:	4192      	sbcs	r2, r2
1000ed90:	4252      	negs	r2, r2
1000ed92:	18ad      	adds	r5, r5, r2
1000ed94:	022b      	lsls	r3, r5, #8
1000ed96:	d51f      	bpl.n	1000edd8 <__aeabi_dmul+0x4b4>
1000ed98:	2401      	movs	r4, #1
1000ed9a:	2200      	movs	r2, #0
1000ed9c:	400c      	ands	r4, r1
1000ed9e:	2301      	movs	r3, #1
1000eda0:	2500      	movs	r5, #0
1000eda2:	4690      	mov	r8, r2
1000eda4:	e624      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000eda6:	201f      	movs	r0, #31
1000eda8:	002c      	movs	r4, r5
1000edaa:	4240      	negs	r0, r0
1000edac:	1a82      	subs	r2, r0, r2
1000edae:	40d4      	lsrs	r4, r2
1000edb0:	2e20      	cmp	r6, #32
1000edb2:	d01c      	beq.n	1000edee <__aeabi_dmul+0x4ca>
1000edb4:	2240      	movs	r2, #64	; 0x40
1000edb6:	1b96      	subs	r6, r2, r6
1000edb8:	40b5      	lsls	r5, r6
1000edba:	432b      	orrs	r3, r5
1000edbc:	1e58      	subs	r0, r3, #1
1000edbe:	4183      	sbcs	r3, r0
1000edc0:	2007      	movs	r0, #7
1000edc2:	4323      	orrs	r3, r4
1000edc4:	4018      	ands	r0, r3
1000edc6:	2500      	movs	r5, #0
1000edc8:	2800      	cmp	r0, #0
1000edca:	d009      	beq.n	1000ede0 <__aeabi_dmul+0x4bc>
1000edcc:	220f      	movs	r2, #15
1000edce:	2500      	movs	r5, #0
1000edd0:	401a      	ands	r2, r3
1000edd2:	001c      	movs	r4, r3
1000edd4:	2a04      	cmp	r2, #4
1000edd6:	d1d8      	bne.n	1000ed8a <__aeabi_dmul+0x466>
1000edd8:	0023      	movs	r3, r4
1000edda:	0768      	lsls	r0, r5, #29
1000eddc:	026d      	lsls	r5, r5, #9
1000edde:	0b2d      	lsrs	r5, r5, #12
1000ede0:	2401      	movs	r4, #1
1000ede2:	08db      	lsrs	r3, r3, #3
1000ede4:	4303      	orrs	r3, r0
1000ede6:	4698      	mov	r8, r3
1000ede8:	400c      	ands	r4, r1
1000edea:	2300      	movs	r3, #0
1000edec:	e600      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000edee:	2500      	movs	r5, #0
1000edf0:	e7e3      	b.n	1000edba <__aeabi_dmul+0x496>
1000edf2:	2280      	movs	r2, #128	; 0x80
1000edf4:	2401      	movs	r4, #1
1000edf6:	0312      	lsls	r2, r2, #12
1000edf8:	4315      	orrs	r5, r2
1000edfa:	032d      	lsls	r5, r5, #12
1000edfc:	4698      	mov	r8, r3
1000edfe:	0b2d      	lsrs	r5, r5, #12
1000ee00:	400c      	ands	r4, r1
1000ee02:	4b04      	ldr	r3, [pc, #16]	; (1000ee14 <__aeabi_dmul+0x4f0>)
1000ee04:	e5f4      	b.n	1000e9f0 <__aeabi_dmul+0xcc>
1000ee06:	46c0      	nop			; (mov r8, r8)
1000ee08:	000003ff 	.word	0x000003ff
1000ee0c:	feffffff 	.word	0xfeffffff
1000ee10:	000007fe 	.word	0x000007fe
1000ee14:	000007ff 	.word	0x000007ff

1000ee18 <__aeabi_dsub>:
1000ee18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee1a:	4657      	mov	r7, sl
1000ee1c:	464e      	mov	r6, r9
1000ee1e:	4645      	mov	r5, r8
1000ee20:	b4e0      	push	{r5, r6, r7}
1000ee22:	000e      	movs	r6, r1
1000ee24:	0011      	movs	r1, r2
1000ee26:	0ff2      	lsrs	r2, r6, #31
1000ee28:	4692      	mov	sl, r2
1000ee2a:	00c5      	lsls	r5, r0, #3
1000ee2c:	0f42      	lsrs	r2, r0, #29
1000ee2e:	0318      	lsls	r0, r3, #12
1000ee30:	0337      	lsls	r7, r6, #12
1000ee32:	0074      	lsls	r4, r6, #1
1000ee34:	0a40      	lsrs	r0, r0, #9
1000ee36:	0f4e      	lsrs	r6, r1, #29
1000ee38:	0a7f      	lsrs	r7, r7, #9
1000ee3a:	4330      	orrs	r0, r6
1000ee3c:	4ecf      	ldr	r6, [pc, #828]	; (1000f17c <__aeabi_dsub+0x364>)
1000ee3e:	4317      	orrs	r7, r2
1000ee40:	005a      	lsls	r2, r3, #1
1000ee42:	0d64      	lsrs	r4, r4, #21
1000ee44:	0d52      	lsrs	r2, r2, #21
1000ee46:	0fdb      	lsrs	r3, r3, #31
1000ee48:	00c9      	lsls	r1, r1, #3
1000ee4a:	42b2      	cmp	r2, r6
1000ee4c:	d100      	bne.n	1000ee50 <__aeabi_dsub+0x38>
1000ee4e:	e0e5      	b.n	1000f01c <__aeabi_dsub+0x204>
1000ee50:	2601      	movs	r6, #1
1000ee52:	4073      	eors	r3, r6
1000ee54:	1aa6      	subs	r6, r4, r2
1000ee56:	46b4      	mov	ip, r6
1000ee58:	4553      	cmp	r3, sl
1000ee5a:	d100      	bne.n	1000ee5e <__aeabi_dsub+0x46>
1000ee5c:	e0af      	b.n	1000efbe <__aeabi_dsub+0x1a6>
1000ee5e:	2e00      	cmp	r6, #0
1000ee60:	dc00      	bgt.n	1000ee64 <__aeabi_dsub+0x4c>
1000ee62:	e10d      	b.n	1000f080 <__aeabi_dsub+0x268>
1000ee64:	2a00      	cmp	r2, #0
1000ee66:	d13a      	bne.n	1000eede <__aeabi_dsub+0xc6>
1000ee68:	0003      	movs	r3, r0
1000ee6a:	430b      	orrs	r3, r1
1000ee6c:	d000      	beq.n	1000ee70 <__aeabi_dsub+0x58>
1000ee6e:	e0e4      	b.n	1000f03a <__aeabi_dsub+0x222>
1000ee70:	076b      	lsls	r3, r5, #29
1000ee72:	d009      	beq.n	1000ee88 <__aeabi_dsub+0x70>
1000ee74:	230f      	movs	r3, #15
1000ee76:	402b      	ands	r3, r5
1000ee78:	2b04      	cmp	r3, #4
1000ee7a:	d005      	beq.n	1000ee88 <__aeabi_dsub+0x70>
1000ee7c:	1d2b      	adds	r3, r5, #4
1000ee7e:	42ab      	cmp	r3, r5
1000ee80:	41ad      	sbcs	r5, r5
1000ee82:	426d      	negs	r5, r5
1000ee84:	197f      	adds	r7, r7, r5
1000ee86:	001d      	movs	r5, r3
1000ee88:	023b      	lsls	r3, r7, #8
1000ee8a:	d400      	bmi.n	1000ee8e <__aeabi_dsub+0x76>
1000ee8c:	e088      	b.n	1000efa0 <__aeabi_dsub+0x188>
1000ee8e:	4bbb      	ldr	r3, [pc, #748]	; (1000f17c <__aeabi_dsub+0x364>)
1000ee90:	3401      	adds	r4, #1
1000ee92:	429c      	cmp	r4, r3
1000ee94:	d100      	bne.n	1000ee98 <__aeabi_dsub+0x80>
1000ee96:	e110      	b.n	1000f0ba <__aeabi_dsub+0x2a2>
1000ee98:	003a      	movs	r2, r7
1000ee9a:	4bb9      	ldr	r3, [pc, #740]	; (1000f180 <__aeabi_dsub+0x368>)
1000ee9c:	4651      	mov	r1, sl
1000ee9e:	401a      	ands	r2, r3
1000eea0:	2301      	movs	r3, #1
1000eea2:	0750      	lsls	r0, r2, #29
1000eea4:	08ed      	lsrs	r5, r5, #3
1000eea6:	0252      	lsls	r2, r2, #9
1000eea8:	0564      	lsls	r4, r4, #21
1000eeaa:	4305      	orrs	r5, r0
1000eeac:	0b12      	lsrs	r2, r2, #12
1000eeae:	0d64      	lsrs	r4, r4, #21
1000eeb0:	400b      	ands	r3, r1
1000eeb2:	2100      	movs	r1, #0
1000eeb4:	0028      	movs	r0, r5
1000eeb6:	0312      	lsls	r2, r2, #12
1000eeb8:	0d0d      	lsrs	r5, r1, #20
1000eeba:	0b12      	lsrs	r2, r2, #12
1000eebc:	0564      	lsls	r4, r4, #21
1000eebe:	052d      	lsls	r5, r5, #20
1000eec0:	4315      	orrs	r5, r2
1000eec2:	0862      	lsrs	r2, r4, #1
1000eec4:	4caf      	ldr	r4, [pc, #700]	; (1000f184 <__aeabi_dsub+0x36c>)
1000eec6:	07db      	lsls	r3, r3, #31
1000eec8:	402c      	ands	r4, r5
1000eeca:	4314      	orrs	r4, r2
1000eecc:	0064      	lsls	r4, r4, #1
1000eece:	0864      	lsrs	r4, r4, #1
1000eed0:	431c      	orrs	r4, r3
1000eed2:	0021      	movs	r1, r4
1000eed4:	bc1c      	pop	{r2, r3, r4}
1000eed6:	4690      	mov	r8, r2
1000eed8:	4699      	mov	r9, r3
1000eeda:	46a2      	mov	sl, r4
1000eedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eede:	4ba7      	ldr	r3, [pc, #668]	; (1000f17c <__aeabi_dsub+0x364>)
1000eee0:	429c      	cmp	r4, r3
1000eee2:	d0c5      	beq.n	1000ee70 <__aeabi_dsub+0x58>
1000eee4:	2380      	movs	r3, #128	; 0x80
1000eee6:	041b      	lsls	r3, r3, #16
1000eee8:	4318      	orrs	r0, r3
1000eeea:	4663      	mov	r3, ip
1000eeec:	2b38      	cmp	r3, #56	; 0x38
1000eeee:	dd00      	ble.n	1000eef2 <__aeabi_dsub+0xda>
1000eef0:	e0fd      	b.n	1000f0ee <__aeabi_dsub+0x2d6>
1000eef2:	2b1f      	cmp	r3, #31
1000eef4:	dd00      	ble.n	1000eef8 <__aeabi_dsub+0xe0>
1000eef6:	e130      	b.n	1000f15a <__aeabi_dsub+0x342>
1000eef8:	4662      	mov	r2, ip
1000eefa:	2320      	movs	r3, #32
1000eefc:	1a9b      	subs	r3, r3, r2
1000eefe:	0002      	movs	r2, r0
1000ef00:	409a      	lsls	r2, r3
1000ef02:	4666      	mov	r6, ip
1000ef04:	4690      	mov	r8, r2
1000ef06:	000a      	movs	r2, r1
1000ef08:	4099      	lsls	r1, r3
1000ef0a:	40f2      	lsrs	r2, r6
1000ef0c:	4646      	mov	r6, r8
1000ef0e:	1e4b      	subs	r3, r1, #1
1000ef10:	4199      	sbcs	r1, r3
1000ef12:	4332      	orrs	r2, r6
1000ef14:	4311      	orrs	r1, r2
1000ef16:	4663      	mov	r3, ip
1000ef18:	0002      	movs	r2, r0
1000ef1a:	40da      	lsrs	r2, r3
1000ef1c:	1a69      	subs	r1, r5, r1
1000ef1e:	428d      	cmp	r5, r1
1000ef20:	419b      	sbcs	r3, r3
1000ef22:	000d      	movs	r5, r1
1000ef24:	1aba      	subs	r2, r7, r2
1000ef26:	425b      	negs	r3, r3
1000ef28:	1ad7      	subs	r7, r2, r3
1000ef2a:	023b      	lsls	r3, r7, #8
1000ef2c:	d535      	bpl.n	1000ef9a <__aeabi_dsub+0x182>
1000ef2e:	027a      	lsls	r2, r7, #9
1000ef30:	0a53      	lsrs	r3, r2, #9
1000ef32:	4698      	mov	r8, r3
1000ef34:	4643      	mov	r3, r8
1000ef36:	2b00      	cmp	r3, #0
1000ef38:	d100      	bne.n	1000ef3c <__aeabi_dsub+0x124>
1000ef3a:	e0c4      	b.n	1000f0c6 <__aeabi_dsub+0x2ae>
1000ef3c:	4640      	mov	r0, r8
1000ef3e:	f000 fb6b 	bl	1000f618 <__clzsi2>
1000ef42:	0003      	movs	r3, r0
1000ef44:	3b08      	subs	r3, #8
1000ef46:	2b1f      	cmp	r3, #31
1000ef48:	dd00      	ble.n	1000ef4c <__aeabi_dsub+0x134>
1000ef4a:	e0c5      	b.n	1000f0d8 <__aeabi_dsub+0x2c0>
1000ef4c:	2220      	movs	r2, #32
1000ef4e:	0029      	movs	r1, r5
1000ef50:	1ad2      	subs	r2, r2, r3
1000ef52:	4647      	mov	r7, r8
1000ef54:	40d1      	lsrs	r1, r2
1000ef56:	409f      	lsls	r7, r3
1000ef58:	000a      	movs	r2, r1
1000ef5a:	409d      	lsls	r5, r3
1000ef5c:	433a      	orrs	r2, r7
1000ef5e:	429c      	cmp	r4, r3
1000ef60:	dd00      	ble.n	1000ef64 <__aeabi_dsub+0x14c>
1000ef62:	e0c0      	b.n	1000f0e6 <__aeabi_dsub+0x2ce>
1000ef64:	1b1c      	subs	r4, r3, r4
1000ef66:	1c63      	adds	r3, r4, #1
1000ef68:	2b1f      	cmp	r3, #31
1000ef6a:	dd00      	ble.n	1000ef6e <__aeabi_dsub+0x156>
1000ef6c:	e0e4      	b.n	1000f138 <__aeabi_dsub+0x320>
1000ef6e:	2120      	movs	r1, #32
1000ef70:	0014      	movs	r4, r2
1000ef72:	0028      	movs	r0, r5
1000ef74:	1ac9      	subs	r1, r1, r3
1000ef76:	40d8      	lsrs	r0, r3
1000ef78:	408c      	lsls	r4, r1
1000ef7a:	408d      	lsls	r5, r1
1000ef7c:	4304      	orrs	r4, r0
1000ef7e:	40da      	lsrs	r2, r3
1000ef80:	1e68      	subs	r0, r5, #1
1000ef82:	4185      	sbcs	r5, r0
1000ef84:	0017      	movs	r7, r2
1000ef86:	4325      	orrs	r5, r4
1000ef88:	2400      	movs	r4, #0
1000ef8a:	e771      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000ef8c:	4642      	mov	r2, r8
1000ef8e:	4663      	mov	r3, ip
1000ef90:	431a      	orrs	r2, r3
1000ef92:	d100      	bne.n	1000ef96 <__aeabi_dsub+0x17e>
1000ef94:	e24c      	b.n	1000f430 <__aeabi_dsub+0x618>
1000ef96:	4667      	mov	r7, ip
1000ef98:	4645      	mov	r5, r8
1000ef9a:	076b      	lsls	r3, r5, #29
1000ef9c:	d000      	beq.n	1000efa0 <__aeabi_dsub+0x188>
1000ef9e:	e769      	b.n	1000ee74 <__aeabi_dsub+0x5c>
1000efa0:	2301      	movs	r3, #1
1000efa2:	4651      	mov	r1, sl
1000efa4:	0778      	lsls	r0, r7, #29
1000efa6:	08ed      	lsrs	r5, r5, #3
1000efa8:	08fa      	lsrs	r2, r7, #3
1000efaa:	400b      	ands	r3, r1
1000efac:	4305      	orrs	r5, r0
1000efae:	4973      	ldr	r1, [pc, #460]	; (1000f17c <__aeabi_dsub+0x364>)
1000efb0:	428c      	cmp	r4, r1
1000efb2:	d038      	beq.n	1000f026 <__aeabi_dsub+0x20e>
1000efb4:	0312      	lsls	r2, r2, #12
1000efb6:	0564      	lsls	r4, r4, #21
1000efb8:	0b12      	lsrs	r2, r2, #12
1000efba:	0d64      	lsrs	r4, r4, #21
1000efbc:	e779      	b.n	1000eeb2 <__aeabi_dsub+0x9a>
1000efbe:	2e00      	cmp	r6, #0
1000efc0:	dc00      	bgt.n	1000efc4 <__aeabi_dsub+0x1ac>
1000efc2:	e09a      	b.n	1000f0fa <__aeabi_dsub+0x2e2>
1000efc4:	2a00      	cmp	r2, #0
1000efc6:	d047      	beq.n	1000f058 <__aeabi_dsub+0x240>
1000efc8:	4a6c      	ldr	r2, [pc, #432]	; (1000f17c <__aeabi_dsub+0x364>)
1000efca:	4294      	cmp	r4, r2
1000efcc:	d100      	bne.n	1000efd0 <__aeabi_dsub+0x1b8>
1000efce:	e74f      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000efd0:	2280      	movs	r2, #128	; 0x80
1000efd2:	0412      	lsls	r2, r2, #16
1000efd4:	4310      	orrs	r0, r2
1000efd6:	4662      	mov	r2, ip
1000efd8:	2a38      	cmp	r2, #56	; 0x38
1000efda:	dc00      	bgt.n	1000efde <__aeabi_dsub+0x1c6>
1000efdc:	e108      	b.n	1000f1f0 <__aeabi_dsub+0x3d8>
1000efde:	4301      	orrs	r1, r0
1000efe0:	1e48      	subs	r0, r1, #1
1000efe2:	4181      	sbcs	r1, r0
1000efe4:	2200      	movs	r2, #0
1000efe6:	b2c9      	uxtb	r1, r1
1000efe8:	1949      	adds	r1, r1, r5
1000efea:	19d2      	adds	r2, r2, r7
1000efec:	42a9      	cmp	r1, r5
1000efee:	41bf      	sbcs	r7, r7
1000eff0:	000d      	movs	r5, r1
1000eff2:	427f      	negs	r7, r7
1000eff4:	18bf      	adds	r7, r7, r2
1000eff6:	023a      	lsls	r2, r7, #8
1000eff8:	d400      	bmi.n	1000effc <__aeabi_dsub+0x1e4>
1000effa:	e142      	b.n	1000f282 <__aeabi_dsub+0x46a>
1000effc:	4a5f      	ldr	r2, [pc, #380]	; (1000f17c <__aeabi_dsub+0x364>)
1000effe:	3401      	adds	r4, #1
1000f000:	4294      	cmp	r4, r2
1000f002:	d100      	bne.n	1000f006 <__aeabi_dsub+0x1ee>
1000f004:	e14e      	b.n	1000f2a4 <__aeabi_dsub+0x48c>
1000f006:	2001      	movs	r0, #1
1000f008:	4a5d      	ldr	r2, [pc, #372]	; (1000f180 <__aeabi_dsub+0x368>)
1000f00a:	0869      	lsrs	r1, r5, #1
1000f00c:	403a      	ands	r2, r7
1000f00e:	4028      	ands	r0, r5
1000f010:	4308      	orrs	r0, r1
1000f012:	07d5      	lsls	r5, r2, #31
1000f014:	4305      	orrs	r5, r0
1000f016:	0857      	lsrs	r7, r2, #1
1000f018:	469a      	mov	sl, r3
1000f01a:	e729      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f01c:	0006      	movs	r6, r0
1000f01e:	430e      	orrs	r6, r1
1000f020:	d000      	beq.n	1000f024 <__aeabi_dsub+0x20c>
1000f022:	e717      	b.n	1000ee54 <__aeabi_dsub+0x3c>
1000f024:	e714      	b.n	1000ee50 <__aeabi_dsub+0x38>
1000f026:	0029      	movs	r1, r5
1000f028:	4311      	orrs	r1, r2
1000f02a:	d100      	bne.n	1000f02e <__aeabi_dsub+0x216>
1000f02c:	e1f9      	b.n	1000f422 <__aeabi_dsub+0x60a>
1000f02e:	2180      	movs	r1, #128	; 0x80
1000f030:	0309      	lsls	r1, r1, #12
1000f032:	430a      	orrs	r2, r1
1000f034:	0312      	lsls	r2, r2, #12
1000f036:	0b12      	lsrs	r2, r2, #12
1000f038:	e73b      	b.n	1000eeb2 <__aeabi_dsub+0x9a>
1000f03a:	2301      	movs	r3, #1
1000f03c:	425b      	negs	r3, r3
1000f03e:	4698      	mov	r8, r3
1000f040:	44c4      	add	ip, r8
1000f042:	4663      	mov	r3, ip
1000f044:	2b00      	cmp	r3, #0
1000f046:	d172      	bne.n	1000f12e <__aeabi_dsub+0x316>
1000f048:	1a69      	subs	r1, r5, r1
1000f04a:	428d      	cmp	r5, r1
1000f04c:	419b      	sbcs	r3, r3
1000f04e:	1a3f      	subs	r7, r7, r0
1000f050:	425b      	negs	r3, r3
1000f052:	1aff      	subs	r7, r7, r3
1000f054:	000d      	movs	r5, r1
1000f056:	e768      	b.n	1000ef2a <__aeabi_dsub+0x112>
1000f058:	0002      	movs	r2, r0
1000f05a:	430a      	orrs	r2, r1
1000f05c:	d100      	bne.n	1000f060 <__aeabi_dsub+0x248>
1000f05e:	e707      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f060:	2201      	movs	r2, #1
1000f062:	4252      	negs	r2, r2
1000f064:	4690      	mov	r8, r2
1000f066:	44c4      	add	ip, r8
1000f068:	4662      	mov	r2, ip
1000f06a:	2a00      	cmp	r2, #0
1000f06c:	d000      	beq.n	1000f070 <__aeabi_dsub+0x258>
1000f06e:	e0e6      	b.n	1000f23e <__aeabi_dsub+0x426>
1000f070:	1869      	adds	r1, r5, r1
1000f072:	42a9      	cmp	r1, r5
1000f074:	41b6      	sbcs	r6, r6
1000f076:	183f      	adds	r7, r7, r0
1000f078:	4276      	negs	r6, r6
1000f07a:	19f7      	adds	r7, r6, r7
1000f07c:	000d      	movs	r5, r1
1000f07e:	e7ba      	b.n	1000eff6 <__aeabi_dsub+0x1de>
1000f080:	2e00      	cmp	r6, #0
1000f082:	d000      	beq.n	1000f086 <__aeabi_dsub+0x26e>
1000f084:	e080      	b.n	1000f188 <__aeabi_dsub+0x370>
1000f086:	1c62      	adds	r2, r4, #1
1000f088:	0552      	lsls	r2, r2, #21
1000f08a:	0d52      	lsrs	r2, r2, #21
1000f08c:	2a01      	cmp	r2, #1
1000f08e:	dc00      	bgt.n	1000f092 <__aeabi_dsub+0x27a>
1000f090:	e0f9      	b.n	1000f286 <__aeabi_dsub+0x46e>
1000f092:	1a6a      	subs	r2, r5, r1
1000f094:	4691      	mov	r9, r2
1000f096:	454d      	cmp	r5, r9
1000f098:	41b6      	sbcs	r6, r6
1000f09a:	1a3a      	subs	r2, r7, r0
1000f09c:	4276      	negs	r6, r6
1000f09e:	1b92      	subs	r2, r2, r6
1000f0a0:	4690      	mov	r8, r2
1000f0a2:	0212      	lsls	r2, r2, #8
1000f0a4:	d400      	bmi.n	1000f0a8 <__aeabi_dsub+0x290>
1000f0a6:	e099      	b.n	1000f1dc <__aeabi_dsub+0x3c4>
1000f0a8:	1b4d      	subs	r5, r1, r5
1000f0aa:	42a9      	cmp	r1, r5
1000f0ac:	4189      	sbcs	r1, r1
1000f0ae:	1bc7      	subs	r7, r0, r7
1000f0b0:	4249      	negs	r1, r1
1000f0b2:	1a7a      	subs	r2, r7, r1
1000f0b4:	4690      	mov	r8, r2
1000f0b6:	469a      	mov	sl, r3
1000f0b8:	e73c      	b.n	1000ef34 <__aeabi_dsub+0x11c>
1000f0ba:	4652      	mov	r2, sl
1000f0bc:	2301      	movs	r3, #1
1000f0be:	2500      	movs	r5, #0
1000f0c0:	4013      	ands	r3, r2
1000f0c2:	2200      	movs	r2, #0
1000f0c4:	e6f5      	b.n	1000eeb2 <__aeabi_dsub+0x9a>
1000f0c6:	0028      	movs	r0, r5
1000f0c8:	f000 faa6 	bl	1000f618 <__clzsi2>
1000f0cc:	3020      	adds	r0, #32
1000f0ce:	0003      	movs	r3, r0
1000f0d0:	3b08      	subs	r3, #8
1000f0d2:	2b1f      	cmp	r3, #31
1000f0d4:	dc00      	bgt.n	1000f0d8 <__aeabi_dsub+0x2c0>
1000f0d6:	e739      	b.n	1000ef4c <__aeabi_dsub+0x134>
1000f0d8:	002a      	movs	r2, r5
1000f0da:	3828      	subs	r0, #40	; 0x28
1000f0dc:	4082      	lsls	r2, r0
1000f0de:	2500      	movs	r5, #0
1000f0e0:	429c      	cmp	r4, r3
1000f0e2:	dc00      	bgt.n	1000f0e6 <__aeabi_dsub+0x2ce>
1000f0e4:	e73e      	b.n	1000ef64 <__aeabi_dsub+0x14c>
1000f0e6:	4f26      	ldr	r7, [pc, #152]	; (1000f180 <__aeabi_dsub+0x368>)
1000f0e8:	1ae4      	subs	r4, r4, r3
1000f0ea:	4017      	ands	r7, r2
1000f0ec:	e6c0      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f0ee:	4301      	orrs	r1, r0
1000f0f0:	1e48      	subs	r0, r1, #1
1000f0f2:	4181      	sbcs	r1, r0
1000f0f4:	2200      	movs	r2, #0
1000f0f6:	b2c9      	uxtb	r1, r1
1000f0f8:	e710      	b.n	1000ef1c <__aeabi_dsub+0x104>
1000f0fa:	2e00      	cmp	r6, #0
1000f0fc:	d000      	beq.n	1000f100 <__aeabi_dsub+0x2e8>
1000f0fe:	e0f1      	b.n	1000f2e4 <__aeabi_dsub+0x4cc>
1000f100:	1c62      	adds	r2, r4, #1
1000f102:	4694      	mov	ip, r2
1000f104:	0552      	lsls	r2, r2, #21
1000f106:	0d52      	lsrs	r2, r2, #21
1000f108:	2a01      	cmp	r2, #1
1000f10a:	dc00      	bgt.n	1000f10e <__aeabi_dsub+0x2f6>
1000f10c:	e0a0      	b.n	1000f250 <__aeabi_dsub+0x438>
1000f10e:	4a1b      	ldr	r2, [pc, #108]	; (1000f17c <__aeabi_dsub+0x364>)
1000f110:	4594      	cmp	ip, r2
1000f112:	d100      	bne.n	1000f116 <__aeabi_dsub+0x2fe>
1000f114:	e0c5      	b.n	1000f2a2 <__aeabi_dsub+0x48a>
1000f116:	1869      	adds	r1, r5, r1
1000f118:	42a9      	cmp	r1, r5
1000f11a:	4192      	sbcs	r2, r2
1000f11c:	183f      	adds	r7, r7, r0
1000f11e:	4252      	negs	r2, r2
1000f120:	19d2      	adds	r2, r2, r7
1000f122:	0849      	lsrs	r1, r1, #1
1000f124:	07d5      	lsls	r5, r2, #31
1000f126:	430d      	orrs	r5, r1
1000f128:	0857      	lsrs	r7, r2, #1
1000f12a:	4664      	mov	r4, ip
1000f12c:	e6a0      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f12e:	4b13      	ldr	r3, [pc, #76]	; (1000f17c <__aeabi_dsub+0x364>)
1000f130:	429c      	cmp	r4, r3
1000f132:	d000      	beq.n	1000f136 <__aeabi_dsub+0x31e>
1000f134:	e6d9      	b.n	1000eeea <__aeabi_dsub+0xd2>
1000f136:	e69b      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f138:	0011      	movs	r1, r2
1000f13a:	3c1f      	subs	r4, #31
1000f13c:	40e1      	lsrs	r1, r4
1000f13e:	000c      	movs	r4, r1
1000f140:	2b20      	cmp	r3, #32
1000f142:	d100      	bne.n	1000f146 <__aeabi_dsub+0x32e>
1000f144:	e080      	b.n	1000f248 <__aeabi_dsub+0x430>
1000f146:	2140      	movs	r1, #64	; 0x40
1000f148:	1acb      	subs	r3, r1, r3
1000f14a:	409a      	lsls	r2, r3
1000f14c:	4315      	orrs	r5, r2
1000f14e:	1e6a      	subs	r2, r5, #1
1000f150:	4195      	sbcs	r5, r2
1000f152:	2700      	movs	r7, #0
1000f154:	4325      	orrs	r5, r4
1000f156:	2400      	movs	r4, #0
1000f158:	e71f      	b.n	1000ef9a <__aeabi_dsub+0x182>
1000f15a:	4663      	mov	r3, ip
1000f15c:	0002      	movs	r2, r0
1000f15e:	3b20      	subs	r3, #32
1000f160:	40da      	lsrs	r2, r3
1000f162:	4663      	mov	r3, ip
1000f164:	2b20      	cmp	r3, #32
1000f166:	d071      	beq.n	1000f24c <__aeabi_dsub+0x434>
1000f168:	2340      	movs	r3, #64	; 0x40
1000f16a:	4666      	mov	r6, ip
1000f16c:	1b9b      	subs	r3, r3, r6
1000f16e:	4098      	lsls	r0, r3
1000f170:	4301      	orrs	r1, r0
1000f172:	1e48      	subs	r0, r1, #1
1000f174:	4181      	sbcs	r1, r0
1000f176:	4311      	orrs	r1, r2
1000f178:	2200      	movs	r2, #0
1000f17a:	e6cf      	b.n	1000ef1c <__aeabi_dsub+0x104>
1000f17c:	000007ff 	.word	0x000007ff
1000f180:	ff7fffff 	.word	0xff7fffff
1000f184:	800fffff 	.word	0x800fffff
1000f188:	2c00      	cmp	r4, #0
1000f18a:	d048      	beq.n	1000f21e <__aeabi_dsub+0x406>
1000f18c:	4cca      	ldr	r4, [pc, #808]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f18e:	42a2      	cmp	r2, r4
1000f190:	d100      	bne.n	1000f194 <__aeabi_dsub+0x37c>
1000f192:	e0a2      	b.n	1000f2da <__aeabi_dsub+0x4c2>
1000f194:	4274      	negs	r4, r6
1000f196:	46a1      	mov	r9, r4
1000f198:	2480      	movs	r4, #128	; 0x80
1000f19a:	0424      	lsls	r4, r4, #16
1000f19c:	4327      	orrs	r7, r4
1000f19e:	464c      	mov	r4, r9
1000f1a0:	2c38      	cmp	r4, #56	; 0x38
1000f1a2:	dd00      	ble.n	1000f1a6 <__aeabi_dsub+0x38e>
1000f1a4:	e0db      	b.n	1000f35e <__aeabi_dsub+0x546>
1000f1a6:	2c1f      	cmp	r4, #31
1000f1a8:	dd00      	ble.n	1000f1ac <__aeabi_dsub+0x394>
1000f1aa:	e144      	b.n	1000f436 <__aeabi_dsub+0x61e>
1000f1ac:	464e      	mov	r6, r9
1000f1ae:	2420      	movs	r4, #32
1000f1b0:	1ba4      	subs	r4, r4, r6
1000f1b2:	003e      	movs	r6, r7
1000f1b4:	40a6      	lsls	r6, r4
1000f1b6:	46a2      	mov	sl, r4
1000f1b8:	46b0      	mov	r8, r6
1000f1ba:	464c      	mov	r4, r9
1000f1bc:	002e      	movs	r6, r5
1000f1be:	40e6      	lsrs	r6, r4
1000f1c0:	46b4      	mov	ip, r6
1000f1c2:	4646      	mov	r6, r8
1000f1c4:	4664      	mov	r4, ip
1000f1c6:	4326      	orrs	r6, r4
1000f1c8:	4654      	mov	r4, sl
1000f1ca:	40a5      	lsls	r5, r4
1000f1cc:	1e6c      	subs	r4, r5, #1
1000f1ce:	41a5      	sbcs	r5, r4
1000f1d0:	0034      	movs	r4, r6
1000f1d2:	432c      	orrs	r4, r5
1000f1d4:	464d      	mov	r5, r9
1000f1d6:	40ef      	lsrs	r7, r5
1000f1d8:	1b0d      	subs	r5, r1, r4
1000f1da:	e028      	b.n	1000f22e <__aeabi_dsub+0x416>
1000f1dc:	464a      	mov	r2, r9
1000f1de:	4643      	mov	r3, r8
1000f1e0:	464d      	mov	r5, r9
1000f1e2:	431a      	orrs	r2, r3
1000f1e4:	d000      	beq.n	1000f1e8 <__aeabi_dsub+0x3d0>
1000f1e6:	e6a5      	b.n	1000ef34 <__aeabi_dsub+0x11c>
1000f1e8:	2300      	movs	r3, #0
1000f1ea:	2400      	movs	r4, #0
1000f1ec:	2500      	movs	r5, #0
1000f1ee:	e6de      	b.n	1000efae <__aeabi_dsub+0x196>
1000f1f0:	2a1f      	cmp	r2, #31
1000f1f2:	dc5a      	bgt.n	1000f2aa <__aeabi_dsub+0x492>
1000f1f4:	4666      	mov	r6, ip
1000f1f6:	2220      	movs	r2, #32
1000f1f8:	1b92      	subs	r2, r2, r6
1000f1fa:	0006      	movs	r6, r0
1000f1fc:	4096      	lsls	r6, r2
1000f1fe:	4691      	mov	r9, r2
1000f200:	46b0      	mov	r8, r6
1000f202:	4662      	mov	r2, ip
1000f204:	000e      	movs	r6, r1
1000f206:	40d6      	lsrs	r6, r2
1000f208:	4642      	mov	r2, r8
1000f20a:	4316      	orrs	r6, r2
1000f20c:	464a      	mov	r2, r9
1000f20e:	4091      	lsls	r1, r2
1000f210:	1e4a      	subs	r2, r1, #1
1000f212:	4191      	sbcs	r1, r2
1000f214:	0002      	movs	r2, r0
1000f216:	4660      	mov	r0, ip
1000f218:	4331      	orrs	r1, r6
1000f21a:	40c2      	lsrs	r2, r0
1000f21c:	e6e4      	b.n	1000efe8 <__aeabi_dsub+0x1d0>
1000f21e:	003c      	movs	r4, r7
1000f220:	432c      	orrs	r4, r5
1000f222:	d05a      	beq.n	1000f2da <__aeabi_dsub+0x4c2>
1000f224:	43f4      	mvns	r4, r6
1000f226:	46a1      	mov	r9, r4
1000f228:	2c00      	cmp	r4, #0
1000f22a:	d152      	bne.n	1000f2d2 <__aeabi_dsub+0x4ba>
1000f22c:	1b4d      	subs	r5, r1, r5
1000f22e:	42a9      	cmp	r1, r5
1000f230:	4189      	sbcs	r1, r1
1000f232:	1bc7      	subs	r7, r0, r7
1000f234:	4249      	negs	r1, r1
1000f236:	1a7f      	subs	r7, r7, r1
1000f238:	0014      	movs	r4, r2
1000f23a:	469a      	mov	sl, r3
1000f23c:	e675      	b.n	1000ef2a <__aeabi_dsub+0x112>
1000f23e:	4a9e      	ldr	r2, [pc, #632]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f240:	4294      	cmp	r4, r2
1000f242:	d000      	beq.n	1000f246 <__aeabi_dsub+0x42e>
1000f244:	e6c7      	b.n	1000efd6 <__aeabi_dsub+0x1be>
1000f246:	e613      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f248:	2200      	movs	r2, #0
1000f24a:	e77f      	b.n	1000f14c <__aeabi_dsub+0x334>
1000f24c:	2000      	movs	r0, #0
1000f24e:	e78f      	b.n	1000f170 <__aeabi_dsub+0x358>
1000f250:	2c00      	cmp	r4, #0
1000f252:	d000      	beq.n	1000f256 <__aeabi_dsub+0x43e>
1000f254:	e0c8      	b.n	1000f3e8 <__aeabi_dsub+0x5d0>
1000f256:	003b      	movs	r3, r7
1000f258:	432b      	orrs	r3, r5
1000f25a:	d100      	bne.n	1000f25e <__aeabi_dsub+0x446>
1000f25c:	e10f      	b.n	1000f47e <__aeabi_dsub+0x666>
1000f25e:	0003      	movs	r3, r0
1000f260:	430b      	orrs	r3, r1
1000f262:	d100      	bne.n	1000f266 <__aeabi_dsub+0x44e>
1000f264:	e604      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f266:	1869      	adds	r1, r5, r1
1000f268:	42a9      	cmp	r1, r5
1000f26a:	419b      	sbcs	r3, r3
1000f26c:	183f      	adds	r7, r7, r0
1000f26e:	425b      	negs	r3, r3
1000f270:	19df      	adds	r7, r3, r7
1000f272:	023b      	lsls	r3, r7, #8
1000f274:	d400      	bmi.n	1000f278 <__aeabi_dsub+0x460>
1000f276:	e11a      	b.n	1000f4ae <__aeabi_dsub+0x696>
1000f278:	4b90      	ldr	r3, [pc, #576]	; (1000f4bc <__aeabi_dsub+0x6a4>)
1000f27a:	000d      	movs	r5, r1
1000f27c:	401f      	ands	r7, r3
1000f27e:	4664      	mov	r4, ip
1000f280:	e5f6      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f282:	469a      	mov	sl, r3
1000f284:	e689      	b.n	1000ef9a <__aeabi_dsub+0x182>
1000f286:	003a      	movs	r2, r7
1000f288:	432a      	orrs	r2, r5
1000f28a:	2c00      	cmp	r4, #0
1000f28c:	d15c      	bne.n	1000f348 <__aeabi_dsub+0x530>
1000f28e:	2a00      	cmp	r2, #0
1000f290:	d175      	bne.n	1000f37e <__aeabi_dsub+0x566>
1000f292:	0002      	movs	r2, r0
1000f294:	430a      	orrs	r2, r1
1000f296:	d100      	bne.n	1000f29a <__aeabi_dsub+0x482>
1000f298:	e0ca      	b.n	1000f430 <__aeabi_dsub+0x618>
1000f29a:	0007      	movs	r7, r0
1000f29c:	000d      	movs	r5, r1
1000f29e:	469a      	mov	sl, r3
1000f2a0:	e5e6      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f2a2:	4664      	mov	r4, ip
1000f2a4:	2200      	movs	r2, #0
1000f2a6:	2500      	movs	r5, #0
1000f2a8:	e681      	b.n	1000efae <__aeabi_dsub+0x196>
1000f2aa:	4662      	mov	r2, ip
1000f2ac:	0006      	movs	r6, r0
1000f2ae:	3a20      	subs	r2, #32
1000f2b0:	40d6      	lsrs	r6, r2
1000f2b2:	4662      	mov	r2, ip
1000f2b4:	46b0      	mov	r8, r6
1000f2b6:	2a20      	cmp	r2, #32
1000f2b8:	d100      	bne.n	1000f2bc <__aeabi_dsub+0x4a4>
1000f2ba:	e0b7      	b.n	1000f42c <__aeabi_dsub+0x614>
1000f2bc:	2240      	movs	r2, #64	; 0x40
1000f2be:	4666      	mov	r6, ip
1000f2c0:	1b92      	subs	r2, r2, r6
1000f2c2:	4090      	lsls	r0, r2
1000f2c4:	4301      	orrs	r1, r0
1000f2c6:	4642      	mov	r2, r8
1000f2c8:	1e48      	subs	r0, r1, #1
1000f2ca:	4181      	sbcs	r1, r0
1000f2cc:	4311      	orrs	r1, r2
1000f2ce:	2200      	movs	r2, #0
1000f2d0:	e68a      	b.n	1000efe8 <__aeabi_dsub+0x1d0>
1000f2d2:	4c79      	ldr	r4, [pc, #484]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f2d4:	42a2      	cmp	r2, r4
1000f2d6:	d000      	beq.n	1000f2da <__aeabi_dsub+0x4c2>
1000f2d8:	e761      	b.n	1000f19e <__aeabi_dsub+0x386>
1000f2da:	0007      	movs	r7, r0
1000f2dc:	000d      	movs	r5, r1
1000f2de:	0014      	movs	r4, r2
1000f2e0:	469a      	mov	sl, r3
1000f2e2:	e5c5      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f2e4:	2c00      	cmp	r4, #0
1000f2e6:	d141      	bne.n	1000f36c <__aeabi_dsub+0x554>
1000f2e8:	003c      	movs	r4, r7
1000f2ea:	432c      	orrs	r4, r5
1000f2ec:	d078      	beq.n	1000f3e0 <__aeabi_dsub+0x5c8>
1000f2ee:	43f4      	mvns	r4, r6
1000f2f0:	46a1      	mov	r9, r4
1000f2f2:	2c00      	cmp	r4, #0
1000f2f4:	d020      	beq.n	1000f338 <__aeabi_dsub+0x520>
1000f2f6:	4c70      	ldr	r4, [pc, #448]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f2f8:	42a2      	cmp	r2, r4
1000f2fa:	d071      	beq.n	1000f3e0 <__aeabi_dsub+0x5c8>
1000f2fc:	464c      	mov	r4, r9
1000f2fe:	2c38      	cmp	r4, #56	; 0x38
1000f300:	dd00      	ble.n	1000f304 <__aeabi_dsub+0x4ec>
1000f302:	e0b2      	b.n	1000f46a <__aeabi_dsub+0x652>
1000f304:	2c1f      	cmp	r4, #31
1000f306:	dd00      	ble.n	1000f30a <__aeabi_dsub+0x4f2>
1000f308:	e0bc      	b.n	1000f484 <__aeabi_dsub+0x66c>
1000f30a:	2620      	movs	r6, #32
1000f30c:	1b34      	subs	r4, r6, r4
1000f30e:	46a2      	mov	sl, r4
1000f310:	003c      	movs	r4, r7
1000f312:	4656      	mov	r6, sl
1000f314:	40b4      	lsls	r4, r6
1000f316:	464e      	mov	r6, r9
1000f318:	46a0      	mov	r8, r4
1000f31a:	002c      	movs	r4, r5
1000f31c:	40f4      	lsrs	r4, r6
1000f31e:	46a4      	mov	ip, r4
1000f320:	4644      	mov	r4, r8
1000f322:	4666      	mov	r6, ip
1000f324:	4334      	orrs	r4, r6
1000f326:	46a4      	mov	ip, r4
1000f328:	4654      	mov	r4, sl
1000f32a:	40a5      	lsls	r5, r4
1000f32c:	4664      	mov	r4, ip
1000f32e:	1e6e      	subs	r6, r5, #1
1000f330:	41b5      	sbcs	r5, r6
1000f332:	4325      	orrs	r5, r4
1000f334:	464c      	mov	r4, r9
1000f336:	40e7      	lsrs	r7, r4
1000f338:	186d      	adds	r5, r5, r1
1000f33a:	428d      	cmp	r5, r1
1000f33c:	4189      	sbcs	r1, r1
1000f33e:	183f      	adds	r7, r7, r0
1000f340:	4249      	negs	r1, r1
1000f342:	19cf      	adds	r7, r1, r7
1000f344:	0014      	movs	r4, r2
1000f346:	e656      	b.n	1000eff6 <__aeabi_dsub+0x1de>
1000f348:	2a00      	cmp	r2, #0
1000f34a:	d12f      	bne.n	1000f3ac <__aeabi_dsub+0x594>
1000f34c:	0002      	movs	r2, r0
1000f34e:	430a      	orrs	r2, r1
1000f350:	d100      	bne.n	1000f354 <__aeabi_dsub+0x53c>
1000f352:	e084      	b.n	1000f45e <__aeabi_dsub+0x646>
1000f354:	0007      	movs	r7, r0
1000f356:	000d      	movs	r5, r1
1000f358:	469a      	mov	sl, r3
1000f35a:	4c57      	ldr	r4, [pc, #348]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f35c:	e588      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f35e:	433d      	orrs	r5, r7
1000f360:	1e6f      	subs	r7, r5, #1
1000f362:	41bd      	sbcs	r5, r7
1000f364:	b2ec      	uxtb	r4, r5
1000f366:	2700      	movs	r7, #0
1000f368:	1b0d      	subs	r5, r1, r4
1000f36a:	e760      	b.n	1000f22e <__aeabi_dsub+0x416>
1000f36c:	4c52      	ldr	r4, [pc, #328]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f36e:	42a2      	cmp	r2, r4
1000f370:	d036      	beq.n	1000f3e0 <__aeabi_dsub+0x5c8>
1000f372:	4274      	negs	r4, r6
1000f374:	2680      	movs	r6, #128	; 0x80
1000f376:	0436      	lsls	r6, r6, #16
1000f378:	46a1      	mov	r9, r4
1000f37a:	4337      	orrs	r7, r6
1000f37c:	e7be      	b.n	1000f2fc <__aeabi_dsub+0x4e4>
1000f37e:	0002      	movs	r2, r0
1000f380:	430a      	orrs	r2, r1
1000f382:	d100      	bne.n	1000f386 <__aeabi_dsub+0x56e>
1000f384:	e574      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f386:	1a6a      	subs	r2, r5, r1
1000f388:	4690      	mov	r8, r2
1000f38a:	4545      	cmp	r5, r8
1000f38c:	41b6      	sbcs	r6, r6
1000f38e:	1a3a      	subs	r2, r7, r0
1000f390:	4276      	negs	r6, r6
1000f392:	1b92      	subs	r2, r2, r6
1000f394:	4694      	mov	ip, r2
1000f396:	0212      	lsls	r2, r2, #8
1000f398:	d400      	bmi.n	1000f39c <__aeabi_dsub+0x584>
1000f39a:	e5f7      	b.n	1000ef8c <__aeabi_dsub+0x174>
1000f39c:	1b4d      	subs	r5, r1, r5
1000f39e:	42a9      	cmp	r1, r5
1000f3a0:	4189      	sbcs	r1, r1
1000f3a2:	1bc7      	subs	r7, r0, r7
1000f3a4:	4249      	negs	r1, r1
1000f3a6:	1a7f      	subs	r7, r7, r1
1000f3a8:	469a      	mov	sl, r3
1000f3aa:	e561      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f3ac:	0002      	movs	r2, r0
1000f3ae:	430a      	orrs	r2, r1
1000f3b0:	d03a      	beq.n	1000f428 <__aeabi_dsub+0x610>
1000f3b2:	08ed      	lsrs	r5, r5, #3
1000f3b4:	077c      	lsls	r4, r7, #29
1000f3b6:	432c      	orrs	r4, r5
1000f3b8:	2580      	movs	r5, #128	; 0x80
1000f3ba:	08fa      	lsrs	r2, r7, #3
1000f3bc:	032d      	lsls	r5, r5, #12
1000f3be:	422a      	tst	r2, r5
1000f3c0:	d008      	beq.n	1000f3d4 <__aeabi_dsub+0x5bc>
1000f3c2:	08c7      	lsrs	r7, r0, #3
1000f3c4:	422f      	tst	r7, r5
1000f3c6:	d105      	bne.n	1000f3d4 <__aeabi_dsub+0x5bc>
1000f3c8:	0745      	lsls	r5, r0, #29
1000f3ca:	002c      	movs	r4, r5
1000f3cc:	003a      	movs	r2, r7
1000f3ce:	469a      	mov	sl, r3
1000f3d0:	08c9      	lsrs	r1, r1, #3
1000f3d2:	430c      	orrs	r4, r1
1000f3d4:	0f67      	lsrs	r7, r4, #29
1000f3d6:	00d2      	lsls	r2, r2, #3
1000f3d8:	00e5      	lsls	r5, r4, #3
1000f3da:	4317      	orrs	r7, r2
1000f3dc:	4c36      	ldr	r4, [pc, #216]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f3de:	e547      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f3e0:	0007      	movs	r7, r0
1000f3e2:	000d      	movs	r5, r1
1000f3e4:	0014      	movs	r4, r2
1000f3e6:	e543      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f3e8:	003a      	movs	r2, r7
1000f3ea:	432a      	orrs	r2, r5
1000f3ec:	d043      	beq.n	1000f476 <__aeabi_dsub+0x65e>
1000f3ee:	0002      	movs	r2, r0
1000f3f0:	430a      	orrs	r2, r1
1000f3f2:	d019      	beq.n	1000f428 <__aeabi_dsub+0x610>
1000f3f4:	08ed      	lsrs	r5, r5, #3
1000f3f6:	077c      	lsls	r4, r7, #29
1000f3f8:	432c      	orrs	r4, r5
1000f3fa:	2580      	movs	r5, #128	; 0x80
1000f3fc:	08fa      	lsrs	r2, r7, #3
1000f3fe:	032d      	lsls	r5, r5, #12
1000f400:	422a      	tst	r2, r5
1000f402:	d007      	beq.n	1000f414 <__aeabi_dsub+0x5fc>
1000f404:	08c6      	lsrs	r6, r0, #3
1000f406:	422e      	tst	r6, r5
1000f408:	d104      	bne.n	1000f414 <__aeabi_dsub+0x5fc>
1000f40a:	0747      	lsls	r7, r0, #29
1000f40c:	003c      	movs	r4, r7
1000f40e:	0032      	movs	r2, r6
1000f410:	08c9      	lsrs	r1, r1, #3
1000f412:	430c      	orrs	r4, r1
1000f414:	00d7      	lsls	r7, r2, #3
1000f416:	0f62      	lsrs	r2, r4, #29
1000f418:	00e5      	lsls	r5, r4, #3
1000f41a:	4317      	orrs	r7, r2
1000f41c:	469a      	mov	sl, r3
1000f41e:	4c26      	ldr	r4, [pc, #152]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f420:	e526      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f422:	2200      	movs	r2, #0
1000f424:	2500      	movs	r5, #0
1000f426:	e544      	b.n	1000eeb2 <__aeabi_dsub+0x9a>
1000f428:	4c23      	ldr	r4, [pc, #140]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f42a:	e521      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f42c:	2000      	movs	r0, #0
1000f42e:	e749      	b.n	1000f2c4 <__aeabi_dsub+0x4ac>
1000f430:	2300      	movs	r3, #0
1000f432:	2500      	movs	r5, #0
1000f434:	e5bb      	b.n	1000efae <__aeabi_dsub+0x196>
1000f436:	464c      	mov	r4, r9
1000f438:	003e      	movs	r6, r7
1000f43a:	3c20      	subs	r4, #32
1000f43c:	40e6      	lsrs	r6, r4
1000f43e:	464c      	mov	r4, r9
1000f440:	46b4      	mov	ip, r6
1000f442:	2c20      	cmp	r4, #32
1000f444:	d031      	beq.n	1000f4aa <__aeabi_dsub+0x692>
1000f446:	2440      	movs	r4, #64	; 0x40
1000f448:	464e      	mov	r6, r9
1000f44a:	1ba6      	subs	r6, r4, r6
1000f44c:	40b7      	lsls	r7, r6
1000f44e:	433d      	orrs	r5, r7
1000f450:	1e6c      	subs	r4, r5, #1
1000f452:	41a5      	sbcs	r5, r4
1000f454:	4664      	mov	r4, ip
1000f456:	432c      	orrs	r4, r5
1000f458:	2700      	movs	r7, #0
1000f45a:	1b0d      	subs	r5, r1, r4
1000f45c:	e6e7      	b.n	1000f22e <__aeabi_dsub+0x416>
1000f45e:	2280      	movs	r2, #128	; 0x80
1000f460:	2300      	movs	r3, #0
1000f462:	0312      	lsls	r2, r2, #12
1000f464:	4c14      	ldr	r4, [pc, #80]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f466:	2500      	movs	r5, #0
1000f468:	e5a1      	b.n	1000efae <__aeabi_dsub+0x196>
1000f46a:	433d      	orrs	r5, r7
1000f46c:	1e6f      	subs	r7, r5, #1
1000f46e:	41bd      	sbcs	r5, r7
1000f470:	2700      	movs	r7, #0
1000f472:	b2ed      	uxtb	r5, r5
1000f474:	e760      	b.n	1000f338 <__aeabi_dsub+0x520>
1000f476:	0007      	movs	r7, r0
1000f478:	000d      	movs	r5, r1
1000f47a:	4c0f      	ldr	r4, [pc, #60]	; (1000f4b8 <__aeabi_dsub+0x6a0>)
1000f47c:	e4f8      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f47e:	0007      	movs	r7, r0
1000f480:	000d      	movs	r5, r1
1000f482:	e4f5      	b.n	1000ee70 <__aeabi_dsub+0x58>
1000f484:	464e      	mov	r6, r9
1000f486:	003c      	movs	r4, r7
1000f488:	3e20      	subs	r6, #32
1000f48a:	40f4      	lsrs	r4, r6
1000f48c:	46a0      	mov	r8, r4
1000f48e:	464c      	mov	r4, r9
1000f490:	2c20      	cmp	r4, #32
1000f492:	d00e      	beq.n	1000f4b2 <__aeabi_dsub+0x69a>
1000f494:	2440      	movs	r4, #64	; 0x40
1000f496:	464e      	mov	r6, r9
1000f498:	1ba4      	subs	r4, r4, r6
1000f49a:	40a7      	lsls	r7, r4
1000f49c:	433d      	orrs	r5, r7
1000f49e:	1e6f      	subs	r7, r5, #1
1000f4a0:	41bd      	sbcs	r5, r7
1000f4a2:	4644      	mov	r4, r8
1000f4a4:	2700      	movs	r7, #0
1000f4a6:	4325      	orrs	r5, r4
1000f4a8:	e746      	b.n	1000f338 <__aeabi_dsub+0x520>
1000f4aa:	2700      	movs	r7, #0
1000f4ac:	e7cf      	b.n	1000f44e <__aeabi_dsub+0x636>
1000f4ae:	000d      	movs	r5, r1
1000f4b0:	e573      	b.n	1000ef9a <__aeabi_dsub+0x182>
1000f4b2:	2700      	movs	r7, #0
1000f4b4:	e7f2      	b.n	1000f49c <__aeabi_dsub+0x684>
1000f4b6:	46c0      	nop			; (mov r8, r8)
1000f4b8:	000007ff 	.word	0x000007ff
1000f4bc:	ff7fffff 	.word	0xff7fffff

1000f4c0 <__aeabi_d2iz>:
1000f4c0:	030b      	lsls	r3, r1, #12
1000f4c2:	b530      	push	{r4, r5, lr}
1000f4c4:	4d13      	ldr	r5, [pc, #76]	; (1000f514 <__aeabi_d2iz+0x54>)
1000f4c6:	0b1a      	lsrs	r2, r3, #12
1000f4c8:	004b      	lsls	r3, r1, #1
1000f4ca:	0d5b      	lsrs	r3, r3, #21
1000f4cc:	0fc9      	lsrs	r1, r1, #31
1000f4ce:	2400      	movs	r4, #0
1000f4d0:	42ab      	cmp	r3, r5
1000f4d2:	dd11      	ble.n	1000f4f8 <__aeabi_d2iz+0x38>
1000f4d4:	4c10      	ldr	r4, [pc, #64]	; (1000f518 <__aeabi_d2iz+0x58>)
1000f4d6:	42a3      	cmp	r3, r4
1000f4d8:	dc10      	bgt.n	1000f4fc <__aeabi_d2iz+0x3c>
1000f4da:	2480      	movs	r4, #128	; 0x80
1000f4dc:	0364      	lsls	r4, r4, #13
1000f4de:	4322      	orrs	r2, r4
1000f4e0:	4c0e      	ldr	r4, [pc, #56]	; (1000f51c <__aeabi_d2iz+0x5c>)
1000f4e2:	1ae4      	subs	r4, r4, r3
1000f4e4:	2c1f      	cmp	r4, #31
1000f4e6:	dd0c      	ble.n	1000f502 <__aeabi_d2iz+0x42>
1000f4e8:	480d      	ldr	r0, [pc, #52]	; (1000f520 <__aeabi_d2iz+0x60>)
1000f4ea:	1ac3      	subs	r3, r0, r3
1000f4ec:	40da      	lsrs	r2, r3
1000f4ee:	0013      	movs	r3, r2
1000f4f0:	425c      	negs	r4, r3
1000f4f2:	2900      	cmp	r1, #0
1000f4f4:	d100      	bne.n	1000f4f8 <__aeabi_d2iz+0x38>
1000f4f6:	001c      	movs	r4, r3
1000f4f8:	0020      	movs	r0, r4
1000f4fa:	bd30      	pop	{r4, r5, pc}
1000f4fc:	4b09      	ldr	r3, [pc, #36]	; (1000f524 <__aeabi_d2iz+0x64>)
1000f4fe:	18cc      	adds	r4, r1, r3
1000f500:	e7fa      	b.n	1000f4f8 <__aeabi_d2iz+0x38>
1000f502:	40e0      	lsrs	r0, r4
1000f504:	4c08      	ldr	r4, [pc, #32]	; (1000f528 <__aeabi_d2iz+0x68>)
1000f506:	46a4      	mov	ip, r4
1000f508:	4463      	add	r3, ip
1000f50a:	409a      	lsls	r2, r3
1000f50c:	0013      	movs	r3, r2
1000f50e:	4303      	orrs	r3, r0
1000f510:	e7ee      	b.n	1000f4f0 <__aeabi_d2iz+0x30>
1000f512:	46c0      	nop			; (mov r8, r8)
1000f514:	000003fe 	.word	0x000003fe
1000f518:	0000041d 	.word	0x0000041d
1000f51c:	00000433 	.word	0x00000433
1000f520:	00000413 	.word	0x00000413
1000f524:	7fffffff 	.word	0x7fffffff
1000f528:	fffffbed 	.word	0xfffffbed

1000f52c <__aeabi_ui2d>:
1000f52c:	b570      	push	{r4, r5, r6, lr}
1000f52e:	1e05      	subs	r5, r0, #0
1000f530:	d028      	beq.n	1000f584 <__aeabi_ui2d+0x58>
1000f532:	f000 f871 	bl	1000f618 <__clzsi2>
1000f536:	4b15      	ldr	r3, [pc, #84]	; (1000f58c <__aeabi_ui2d+0x60>)
1000f538:	4a15      	ldr	r2, [pc, #84]	; (1000f590 <__aeabi_ui2d+0x64>)
1000f53a:	1a1b      	subs	r3, r3, r0
1000f53c:	1ad2      	subs	r2, r2, r3
1000f53e:	2a1f      	cmp	r2, #31
1000f540:	dd16      	ble.n	1000f570 <__aeabi_ui2d+0x44>
1000f542:	002c      	movs	r4, r5
1000f544:	4a13      	ldr	r2, [pc, #76]	; (1000f594 <__aeabi_ui2d+0x68>)
1000f546:	2500      	movs	r5, #0
1000f548:	1ad2      	subs	r2, r2, r3
1000f54a:	4094      	lsls	r4, r2
1000f54c:	055a      	lsls	r2, r3, #21
1000f54e:	0324      	lsls	r4, r4, #12
1000f550:	0b24      	lsrs	r4, r4, #12
1000f552:	0d52      	lsrs	r2, r2, #21
1000f554:	2100      	movs	r1, #0
1000f556:	0324      	lsls	r4, r4, #12
1000f558:	0d0b      	lsrs	r3, r1, #20
1000f55a:	0b24      	lsrs	r4, r4, #12
1000f55c:	051b      	lsls	r3, r3, #20
1000f55e:	4323      	orrs	r3, r4
1000f560:	4c0d      	ldr	r4, [pc, #52]	; (1000f598 <__aeabi_ui2d+0x6c>)
1000f562:	0512      	lsls	r2, r2, #20
1000f564:	4023      	ands	r3, r4
1000f566:	4313      	orrs	r3, r2
1000f568:	005b      	lsls	r3, r3, #1
1000f56a:	0028      	movs	r0, r5
1000f56c:	0859      	lsrs	r1, r3, #1
1000f56e:	bd70      	pop	{r4, r5, r6, pc}
1000f570:	210b      	movs	r1, #11
1000f572:	002c      	movs	r4, r5
1000f574:	1a08      	subs	r0, r1, r0
1000f576:	40c4      	lsrs	r4, r0
1000f578:	4095      	lsls	r5, r2
1000f57a:	0324      	lsls	r4, r4, #12
1000f57c:	055a      	lsls	r2, r3, #21
1000f57e:	0b24      	lsrs	r4, r4, #12
1000f580:	0d52      	lsrs	r2, r2, #21
1000f582:	e7e7      	b.n	1000f554 <__aeabi_ui2d+0x28>
1000f584:	2200      	movs	r2, #0
1000f586:	2400      	movs	r4, #0
1000f588:	e7e4      	b.n	1000f554 <__aeabi_ui2d+0x28>
1000f58a:	46c0      	nop			; (mov r8, r8)
1000f58c:	0000041e 	.word	0x0000041e
1000f590:	00000433 	.word	0x00000433
1000f594:	00000413 	.word	0x00000413
1000f598:	800fffff 	.word	0x800fffff

1000f59c <__aeabi_cdrcmple>:
1000f59c:	4684      	mov	ip, r0
1000f59e:	1c10      	adds	r0, r2, #0
1000f5a0:	4662      	mov	r2, ip
1000f5a2:	468c      	mov	ip, r1
1000f5a4:	1c19      	adds	r1, r3, #0
1000f5a6:	4663      	mov	r3, ip
1000f5a8:	e000      	b.n	1000f5ac <__aeabi_cdcmpeq>
1000f5aa:	46c0      	nop			; (mov r8, r8)

1000f5ac <__aeabi_cdcmpeq>:
1000f5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f5ae:	f000 f8f5 	bl	1000f79c <__ledf2>
1000f5b2:	2800      	cmp	r0, #0
1000f5b4:	d401      	bmi.n	1000f5ba <__aeabi_cdcmpeq+0xe>
1000f5b6:	2100      	movs	r1, #0
1000f5b8:	42c8      	cmn	r0, r1
1000f5ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f5bc <__aeabi_dcmpeq>:
1000f5bc:	b510      	push	{r4, lr}
1000f5be:	f000 f849 	bl	1000f654 <__eqdf2>
1000f5c2:	4240      	negs	r0, r0
1000f5c4:	3001      	adds	r0, #1
1000f5c6:	bd10      	pop	{r4, pc}

1000f5c8 <__aeabi_dcmplt>:
1000f5c8:	b510      	push	{r4, lr}
1000f5ca:	f000 f8e7 	bl	1000f79c <__ledf2>
1000f5ce:	2800      	cmp	r0, #0
1000f5d0:	db01      	blt.n	1000f5d6 <__aeabi_dcmplt+0xe>
1000f5d2:	2000      	movs	r0, #0
1000f5d4:	bd10      	pop	{r4, pc}
1000f5d6:	2001      	movs	r0, #1
1000f5d8:	bd10      	pop	{r4, pc}
1000f5da:	46c0      	nop			; (mov r8, r8)

1000f5dc <__aeabi_dcmple>:
1000f5dc:	b510      	push	{r4, lr}
1000f5de:	f000 f8dd 	bl	1000f79c <__ledf2>
1000f5e2:	2800      	cmp	r0, #0
1000f5e4:	dd01      	ble.n	1000f5ea <__aeabi_dcmple+0xe>
1000f5e6:	2000      	movs	r0, #0
1000f5e8:	bd10      	pop	{r4, pc}
1000f5ea:	2001      	movs	r0, #1
1000f5ec:	bd10      	pop	{r4, pc}
1000f5ee:	46c0      	nop			; (mov r8, r8)

1000f5f0 <__aeabi_dcmpgt>:
1000f5f0:	b510      	push	{r4, lr}
1000f5f2:	f000 f86f 	bl	1000f6d4 <__gedf2>
1000f5f6:	2800      	cmp	r0, #0
1000f5f8:	dc01      	bgt.n	1000f5fe <__aeabi_dcmpgt+0xe>
1000f5fa:	2000      	movs	r0, #0
1000f5fc:	bd10      	pop	{r4, pc}
1000f5fe:	2001      	movs	r0, #1
1000f600:	bd10      	pop	{r4, pc}
1000f602:	46c0      	nop			; (mov r8, r8)

1000f604 <__aeabi_dcmpge>:
1000f604:	b510      	push	{r4, lr}
1000f606:	f000 f865 	bl	1000f6d4 <__gedf2>
1000f60a:	2800      	cmp	r0, #0
1000f60c:	da01      	bge.n	1000f612 <__aeabi_dcmpge+0xe>
1000f60e:	2000      	movs	r0, #0
1000f610:	bd10      	pop	{r4, pc}
1000f612:	2001      	movs	r0, #1
1000f614:	bd10      	pop	{r4, pc}
1000f616:	46c0      	nop			; (mov r8, r8)

1000f618 <__clzsi2>:
1000f618:	211c      	movs	r1, #28
1000f61a:	2301      	movs	r3, #1
1000f61c:	041b      	lsls	r3, r3, #16
1000f61e:	4298      	cmp	r0, r3
1000f620:	d301      	bcc.n	1000f626 <__clzsi2+0xe>
1000f622:	0c00      	lsrs	r0, r0, #16
1000f624:	3910      	subs	r1, #16
1000f626:	0a1b      	lsrs	r3, r3, #8
1000f628:	4298      	cmp	r0, r3
1000f62a:	d301      	bcc.n	1000f630 <__clzsi2+0x18>
1000f62c:	0a00      	lsrs	r0, r0, #8
1000f62e:	3908      	subs	r1, #8
1000f630:	091b      	lsrs	r3, r3, #4
1000f632:	4298      	cmp	r0, r3
1000f634:	d301      	bcc.n	1000f63a <__clzsi2+0x22>
1000f636:	0900      	lsrs	r0, r0, #4
1000f638:	3904      	subs	r1, #4
1000f63a:	a202      	add	r2, pc, #8	; (adr r2, 1000f644 <__clzsi2+0x2c>)
1000f63c:	5c10      	ldrb	r0, [r2, r0]
1000f63e:	1840      	adds	r0, r0, r1
1000f640:	4770      	bx	lr
1000f642:	46c0      	nop			; (mov r8, r8)
1000f644:	02020304 	.word	0x02020304
1000f648:	01010101 	.word	0x01010101
	...

1000f654 <__eqdf2>:
1000f654:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f656:	465f      	mov	r7, fp
1000f658:	4656      	mov	r6, sl
1000f65a:	464d      	mov	r5, r9
1000f65c:	4644      	mov	r4, r8
1000f65e:	b4f0      	push	{r4, r5, r6, r7}
1000f660:	031f      	lsls	r7, r3, #12
1000f662:	005c      	lsls	r4, r3, #1
1000f664:	0fdb      	lsrs	r3, r3, #31
1000f666:	469a      	mov	sl, r3
1000f668:	4b19      	ldr	r3, [pc, #100]	; (1000f6d0 <__eqdf2+0x7c>)
1000f66a:	030e      	lsls	r6, r1, #12
1000f66c:	004d      	lsls	r5, r1, #1
1000f66e:	0fc9      	lsrs	r1, r1, #31
1000f670:	4680      	mov	r8, r0
1000f672:	0b36      	lsrs	r6, r6, #12
1000f674:	0d6d      	lsrs	r5, r5, #21
1000f676:	468b      	mov	fp, r1
1000f678:	4691      	mov	r9, r2
1000f67a:	0b3f      	lsrs	r7, r7, #12
1000f67c:	0d64      	lsrs	r4, r4, #21
1000f67e:	429d      	cmp	r5, r3
1000f680:	d019      	beq.n	1000f6b6 <__eqdf2+0x62>
1000f682:	4b13      	ldr	r3, [pc, #76]	; (1000f6d0 <__eqdf2+0x7c>)
1000f684:	429c      	cmp	r4, r3
1000f686:	d01b      	beq.n	1000f6c0 <__eqdf2+0x6c>
1000f688:	2301      	movs	r3, #1
1000f68a:	42a5      	cmp	r5, r4
1000f68c:	d006      	beq.n	1000f69c <__eqdf2+0x48>
1000f68e:	0018      	movs	r0, r3
1000f690:	bc3c      	pop	{r2, r3, r4, r5}
1000f692:	4690      	mov	r8, r2
1000f694:	4699      	mov	r9, r3
1000f696:	46a2      	mov	sl, r4
1000f698:	46ab      	mov	fp, r5
1000f69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f69c:	42be      	cmp	r6, r7
1000f69e:	d1f6      	bne.n	1000f68e <__eqdf2+0x3a>
1000f6a0:	45c8      	cmp	r8, r9
1000f6a2:	d1f4      	bne.n	1000f68e <__eqdf2+0x3a>
1000f6a4:	45d3      	cmp	fp, sl
1000f6a6:	d010      	beq.n	1000f6ca <__eqdf2+0x76>
1000f6a8:	2d00      	cmp	r5, #0
1000f6aa:	d1f0      	bne.n	1000f68e <__eqdf2+0x3a>
1000f6ac:	4330      	orrs	r0, r6
1000f6ae:	0003      	movs	r3, r0
1000f6b0:	1e5a      	subs	r2, r3, #1
1000f6b2:	4193      	sbcs	r3, r2
1000f6b4:	e7eb      	b.n	1000f68e <__eqdf2+0x3a>
1000f6b6:	0031      	movs	r1, r6
1000f6b8:	2301      	movs	r3, #1
1000f6ba:	4301      	orrs	r1, r0
1000f6bc:	d1e7      	bne.n	1000f68e <__eqdf2+0x3a>
1000f6be:	e7e0      	b.n	1000f682 <__eqdf2+0x2e>
1000f6c0:	433a      	orrs	r2, r7
1000f6c2:	2301      	movs	r3, #1
1000f6c4:	2a00      	cmp	r2, #0
1000f6c6:	d1e2      	bne.n	1000f68e <__eqdf2+0x3a>
1000f6c8:	e7de      	b.n	1000f688 <__eqdf2+0x34>
1000f6ca:	2300      	movs	r3, #0
1000f6cc:	e7df      	b.n	1000f68e <__eqdf2+0x3a>
1000f6ce:	46c0      	nop			; (mov r8, r8)
1000f6d0:	000007ff 	.word	0x000007ff

1000f6d4 <__gedf2>:
1000f6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6d6:	465f      	mov	r7, fp
1000f6d8:	4644      	mov	r4, r8
1000f6da:	4656      	mov	r6, sl
1000f6dc:	464d      	mov	r5, r9
1000f6de:	b4f0      	push	{r4, r5, r6, r7}
1000f6e0:	031f      	lsls	r7, r3, #12
1000f6e2:	0b3c      	lsrs	r4, r7, #12
1000f6e4:	4f2c      	ldr	r7, [pc, #176]	; (1000f798 <__gedf2+0xc4>)
1000f6e6:	030e      	lsls	r6, r1, #12
1000f6e8:	004d      	lsls	r5, r1, #1
1000f6ea:	46a3      	mov	fp, r4
1000f6ec:	005c      	lsls	r4, r3, #1
1000f6ee:	4684      	mov	ip, r0
1000f6f0:	0b36      	lsrs	r6, r6, #12
1000f6f2:	0d6d      	lsrs	r5, r5, #21
1000f6f4:	0fc9      	lsrs	r1, r1, #31
1000f6f6:	4690      	mov	r8, r2
1000f6f8:	0d64      	lsrs	r4, r4, #21
1000f6fa:	0fdb      	lsrs	r3, r3, #31
1000f6fc:	42bd      	cmp	r5, r7
1000f6fe:	d02b      	beq.n	1000f758 <__gedf2+0x84>
1000f700:	4f25      	ldr	r7, [pc, #148]	; (1000f798 <__gedf2+0xc4>)
1000f702:	42bc      	cmp	r4, r7
1000f704:	d02e      	beq.n	1000f764 <__gedf2+0x90>
1000f706:	2d00      	cmp	r5, #0
1000f708:	d10e      	bne.n	1000f728 <__gedf2+0x54>
1000f70a:	4330      	orrs	r0, r6
1000f70c:	0007      	movs	r7, r0
1000f70e:	4681      	mov	r9, r0
1000f710:	4278      	negs	r0, r7
1000f712:	4178      	adcs	r0, r7
1000f714:	2c00      	cmp	r4, #0
1000f716:	d117      	bne.n	1000f748 <__gedf2+0x74>
1000f718:	465f      	mov	r7, fp
1000f71a:	433a      	orrs	r2, r7
1000f71c:	d114      	bne.n	1000f748 <__gedf2+0x74>
1000f71e:	464b      	mov	r3, r9
1000f720:	2000      	movs	r0, #0
1000f722:	2b00      	cmp	r3, #0
1000f724:	d00a      	beq.n	1000f73c <__gedf2+0x68>
1000f726:	e006      	b.n	1000f736 <__gedf2+0x62>
1000f728:	2c00      	cmp	r4, #0
1000f72a:	d102      	bne.n	1000f732 <__gedf2+0x5e>
1000f72c:	4658      	mov	r0, fp
1000f72e:	4302      	orrs	r2, r0
1000f730:	d001      	beq.n	1000f736 <__gedf2+0x62>
1000f732:	4299      	cmp	r1, r3
1000f734:	d01a      	beq.n	1000f76c <__gedf2+0x98>
1000f736:	2301      	movs	r3, #1
1000f738:	4248      	negs	r0, r1
1000f73a:	4318      	orrs	r0, r3
1000f73c:	bc3c      	pop	{r2, r3, r4, r5}
1000f73e:	4690      	mov	r8, r2
1000f740:	4699      	mov	r9, r3
1000f742:	46a2      	mov	sl, r4
1000f744:	46ab      	mov	fp, r5
1000f746:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f748:	2800      	cmp	r0, #0
1000f74a:	d0f2      	beq.n	1000f732 <__gedf2+0x5e>
1000f74c:	4258      	negs	r0, r3
1000f74e:	4158      	adcs	r0, r3
1000f750:	2201      	movs	r2, #1
1000f752:	4240      	negs	r0, r0
1000f754:	4310      	orrs	r0, r2
1000f756:	e7f1      	b.n	1000f73c <__gedf2+0x68>
1000f758:	0037      	movs	r7, r6
1000f75a:	4307      	orrs	r7, r0
1000f75c:	d0d0      	beq.n	1000f700 <__gedf2+0x2c>
1000f75e:	2002      	movs	r0, #2
1000f760:	4240      	negs	r0, r0
1000f762:	e7eb      	b.n	1000f73c <__gedf2+0x68>
1000f764:	465f      	mov	r7, fp
1000f766:	4317      	orrs	r7, r2
1000f768:	d0cd      	beq.n	1000f706 <__gedf2+0x32>
1000f76a:	e7f8      	b.n	1000f75e <__gedf2+0x8a>
1000f76c:	42a5      	cmp	r5, r4
1000f76e:	dce2      	bgt.n	1000f736 <__gedf2+0x62>
1000f770:	db05      	blt.n	1000f77e <__gedf2+0xaa>
1000f772:	455e      	cmp	r6, fp
1000f774:	d8df      	bhi.n	1000f736 <__gedf2+0x62>
1000f776:	d008      	beq.n	1000f78a <__gedf2+0xb6>
1000f778:	2000      	movs	r0, #0
1000f77a:	455e      	cmp	r6, fp
1000f77c:	d2de      	bcs.n	1000f73c <__gedf2+0x68>
1000f77e:	4248      	negs	r0, r1
1000f780:	4148      	adcs	r0, r1
1000f782:	2301      	movs	r3, #1
1000f784:	4240      	negs	r0, r0
1000f786:	4318      	orrs	r0, r3
1000f788:	e7d8      	b.n	1000f73c <__gedf2+0x68>
1000f78a:	45c4      	cmp	ip, r8
1000f78c:	d8d3      	bhi.n	1000f736 <__gedf2+0x62>
1000f78e:	2000      	movs	r0, #0
1000f790:	45c4      	cmp	ip, r8
1000f792:	d3f4      	bcc.n	1000f77e <__gedf2+0xaa>
1000f794:	e7d2      	b.n	1000f73c <__gedf2+0x68>
1000f796:	46c0      	nop			; (mov r8, r8)
1000f798:	000007ff 	.word	0x000007ff

1000f79c <__ledf2>:
1000f79c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f79e:	465f      	mov	r7, fp
1000f7a0:	464d      	mov	r5, r9
1000f7a2:	4644      	mov	r4, r8
1000f7a4:	4656      	mov	r6, sl
1000f7a6:	b4f0      	push	{r4, r5, r6, r7}
1000f7a8:	031c      	lsls	r4, r3, #12
1000f7aa:	0b24      	lsrs	r4, r4, #12
1000f7ac:	46a4      	mov	ip, r4
1000f7ae:	4c2f      	ldr	r4, [pc, #188]	; (1000f86c <__ledf2+0xd0>)
1000f7b0:	030f      	lsls	r7, r1, #12
1000f7b2:	004d      	lsls	r5, r1, #1
1000f7b4:	005e      	lsls	r6, r3, #1
1000f7b6:	0fc9      	lsrs	r1, r1, #31
1000f7b8:	4680      	mov	r8, r0
1000f7ba:	0b3f      	lsrs	r7, r7, #12
1000f7bc:	0d6d      	lsrs	r5, r5, #21
1000f7be:	468b      	mov	fp, r1
1000f7c0:	4691      	mov	r9, r2
1000f7c2:	0d76      	lsrs	r6, r6, #21
1000f7c4:	0fdb      	lsrs	r3, r3, #31
1000f7c6:	42a5      	cmp	r5, r4
1000f7c8:	d020      	beq.n	1000f80c <__ledf2+0x70>
1000f7ca:	4c28      	ldr	r4, [pc, #160]	; (1000f86c <__ledf2+0xd0>)
1000f7cc:	42a6      	cmp	r6, r4
1000f7ce:	d022      	beq.n	1000f816 <__ledf2+0x7a>
1000f7d0:	2d00      	cmp	r5, #0
1000f7d2:	d112      	bne.n	1000f7fa <__ledf2+0x5e>
1000f7d4:	4338      	orrs	r0, r7
1000f7d6:	4244      	negs	r4, r0
1000f7d8:	4144      	adcs	r4, r0
1000f7da:	2e00      	cmp	r6, #0
1000f7dc:	d020      	beq.n	1000f820 <__ledf2+0x84>
1000f7de:	2c00      	cmp	r4, #0
1000f7e0:	d00d      	beq.n	1000f7fe <__ledf2+0x62>
1000f7e2:	425c      	negs	r4, r3
1000f7e4:	4163      	adcs	r3, r4
1000f7e6:	2401      	movs	r4, #1
1000f7e8:	425b      	negs	r3, r3
1000f7ea:	431c      	orrs	r4, r3
1000f7ec:	0020      	movs	r0, r4
1000f7ee:	bc3c      	pop	{r2, r3, r4, r5}
1000f7f0:	4690      	mov	r8, r2
1000f7f2:	4699      	mov	r9, r3
1000f7f4:	46a2      	mov	sl, r4
1000f7f6:	46ab      	mov	fp, r5
1000f7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7fa:	2e00      	cmp	r6, #0
1000f7fc:	d017      	beq.n	1000f82e <__ledf2+0x92>
1000f7fe:	455b      	cmp	r3, fp
1000f800:	d019      	beq.n	1000f836 <__ledf2+0x9a>
1000f802:	465b      	mov	r3, fp
1000f804:	425c      	negs	r4, r3
1000f806:	2301      	movs	r3, #1
1000f808:	431c      	orrs	r4, r3
1000f80a:	e7ef      	b.n	1000f7ec <__ledf2+0x50>
1000f80c:	0039      	movs	r1, r7
1000f80e:	2402      	movs	r4, #2
1000f810:	4301      	orrs	r1, r0
1000f812:	d1eb      	bne.n	1000f7ec <__ledf2+0x50>
1000f814:	e7d9      	b.n	1000f7ca <__ledf2+0x2e>
1000f816:	4661      	mov	r1, ip
1000f818:	2402      	movs	r4, #2
1000f81a:	4311      	orrs	r1, r2
1000f81c:	d1e6      	bne.n	1000f7ec <__ledf2+0x50>
1000f81e:	e7d7      	b.n	1000f7d0 <__ledf2+0x34>
1000f820:	4661      	mov	r1, ip
1000f822:	430a      	orrs	r2, r1
1000f824:	d1db      	bne.n	1000f7de <__ledf2+0x42>
1000f826:	2400      	movs	r4, #0
1000f828:	2800      	cmp	r0, #0
1000f82a:	d0df      	beq.n	1000f7ec <__ledf2+0x50>
1000f82c:	e7e9      	b.n	1000f802 <__ledf2+0x66>
1000f82e:	4661      	mov	r1, ip
1000f830:	430a      	orrs	r2, r1
1000f832:	d1e4      	bne.n	1000f7fe <__ledf2+0x62>
1000f834:	e7e5      	b.n	1000f802 <__ledf2+0x66>
1000f836:	42b5      	cmp	r5, r6
1000f838:	dd03      	ble.n	1000f842 <__ledf2+0xa6>
1000f83a:	2201      	movs	r2, #1
1000f83c:	425c      	negs	r4, r3
1000f83e:	4314      	orrs	r4, r2
1000f840:	e7d4      	b.n	1000f7ec <__ledf2+0x50>
1000f842:	42b5      	cmp	r5, r6
1000f844:	dbcd      	blt.n	1000f7e2 <__ledf2+0x46>
1000f846:	4567      	cmp	r7, ip
1000f848:	d8db      	bhi.n	1000f802 <__ledf2+0x66>
1000f84a:	d009      	beq.n	1000f860 <__ledf2+0xc4>
1000f84c:	2400      	movs	r4, #0
1000f84e:	4567      	cmp	r7, ip
1000f850:	d2cc      	bcs.n	1000f7ec <__ledf2+0x50>
1000f852:	4659      	mov	r1, fp
1000f854:	424c      	negs	r4, r1
1000f856:	4161      	adcs	r1, r4
1000f858:	2401      	movs	r4, #1
1000f85a:	4249      	negs	r1, r1
1000f85c:	430c      	orrs	r4, r1
1000f85e:	e7c5      	b.n	1000f7ec <__ledf2+0x50>
1000f860:	45c8      	cmp	r8, r9
1000f862:	d8ce      	bhi.n	1000f802 <__ledf2+0x66>
1000f864:	2400      	movs	r4, #0
1000f866:	45c8      	cmp	r8, r9
1000f868:	d3f3      	bcc.n	1000f852 <__ledf2+0xb6>
1000f86a:	e7bf      	b.n	1000f7ec <__ledf2+0x50>
1000f86c:	000007ff 	.word	0x000007ff

1000f870 <__libc_init_array>:
1000f870:	4b0e      	ldr	r3, [pc, #56]	; (1000f8ac <__libc_init_array+0x3c>)
1000f872:	b570      	push	{r4, r5, r6, lr}
1000f874:	2500      	movs	r5, #0
1000f876:	001e      	movs	r6, r3
1000f878:	4c0d      	ldr	r4, [pc, #52]	; (1000f8b0 <__libc_init_array+0x40>)
1000f87a:	1ae4      	subs	r4, r4, r3
1000f87c:	10a4      	asrs	r4, r4, #2
1000f87e:	42a5      	cmp	r5, r4
1000f880:	d004      	beq.n	1000f88c <__libc_init_array+0x1c>
1000f882:	00ab      	lsls	r3, r5, #2
1000f884:	58f3      	ldr	r3, [r6, r3]
1000f886:	4798      	blx	r3
1000f888:	3501      	adds	r5, #1
1000f88a:	e7f8      	b.n	1000f87e <__libc_init_array+0xe>
1000f88c:	f002 fd32 	bl	100122f4 <_init>
1000f890:	4b08      	ldr	r3, [pc, #32]	; (1000f8b4 <__libc_init_array+0x44>)
1000f892:	2500      	movs	r5, #0
1000f894:	001e      	movs	r6, r3
1000f896:	4c08      	ldr	r4, [pc, #32]	; (1000f8b8 <__libc_init_array+0x48>)
1000f898:	1ae4      	subs	r4, r4, r3
1000f89a:	10a4      	asrs	r4, r4, #2
1000f89c:	42a5      	cmp	r5, r4
1000f89e:	d004      	beq.n	1000f8aa <__libc_init_array+0x3a>
1000f8a0:	00ab      	lsls	r3, r5, #2
1000f8a2:	58f3      	ldr	r3, [r6, r3]
1000f8a4:	4798      	blx	r3
1000f8a6:	3501      	adds	r5, #1
1000f8a8:	e7f8      	b.n	1000f89c <__libc_init_array+0x2c>
1000f8aa:	bd70      	pop	{r4, r5, r6, pc}
1000f8ac:	10012300 	.word	0x10012300
1000f8b0:	10012300 	.word	0x10012300
1000f8b4:	10012300 	.word	0x10012300
1000f8b8:	10012304 	.word	0x10012304

1000f8bc <memcmp>:
1000f8bc:	b530      	push	{r4, r5, lr}
1000f8be:	2400      	movs	r4, #0
1000f8c0:	42a2      	cmp	r2, r4
1000f8c2:	d008      	beq.n	1000f8d6 <memcmp+0x1a>
1000f8c4:	5d03      	ldrb	r3, [r0, r4]
1000f8c6:	1c65      	adds	r5, r4, #1
1000f8c8:	5d0c      	ldrb	r4, [r1, r4]
1000f8ca:	42a3      	cmp	r3, r4
1000f8cc:	d001      	beq.n	1000f8d2 <memcmp+0x16>
1000f8ce:	1b18      	subs	r0, r3, r4
1000f8d0:	e002      	b.n	1000f8d8 <memcmp+0x1c>
1000f8d2:	002c      	movs	r4, r5
1000f8d4:	e7f4      	b.n	1000f8c0 <memcmp+0x4>
1000f8d6:	2000      	movs	r0, #0
1000f8d8:	bd30      	pop	{r4, r5, pc}

1000f8da <memcpy>:
1000f8da:	2300      	movs	r3, #0
1000f8dc:	b510      	push	{r4, lr}
1000f8de:	429a      	cmp	r2, r3
1000f8e0:	d003      	beq.n	1000f8ea <memcpy+0x10>
1000f8e2:	5ccc      	ldrb	r4, [r1, r3]
1000f8e4:	54c4      	strb	r4, [r0, r3]
1000f8e6:	3301      	adds	r3, #1
1000f8e8:	e7f9      	b.n	1000f8de <memcpy+0x4>
1000f8ea:	bd10      	pop	{r4, pc}

1000f8ec <memset>:
1000f8ec:	0003      	movs	r3, r0
1000f8ee:	1882      	adds	r2, r0, r2
1000f8f0:	4293      	cmp	r3, r2
1000f8f2:	d002      	beq.n	1000f8fa <memset+0xe>
1000f8f4:	7019      	strb	r1, [r3, #0]
1000f8f6:	3301      	adds	r3, #1
1000f8f8:	e7fa      	b.n	1000f8f0 <memset+0x4>
1000f8fa:	4770      	bx	lr

1000f8fc <iprintf>:
1000f8fc:	b40f      	push	{r0, r1, r2, r3}
1000f8fe:	4b0b      	ldr	r3, [pc, #44]	; (1000f92c <iprintf+0x30>)
1000f900:	b513      	push	{r0, r1, r4, lr}
1000f902:	681c      	ldr	r4, [r3, #0]
1000f904:	2c00      	cmp	r4, #0
1000f906:	d005      	beq.n	1000f914 <iprintf+0x18>
1000f908:	69a3      	ldr	r3, [r4, #24]
1000f90a:	2b00      	cmp	r3, #0
1000f90c:	d102      	bne.n	1000f914 <iprintf+0x18>
1000f90e:	0020      	movs	r0, r4
1000f910:	f000 fb46 	bl	1000ffa0 <__sinit>
1000f914:	ab05      	add	r3, sp, #20
1000f916:	9a04      	ldr	r2, [sp, #16]
1000f918:	68a1      	ldr	r1, [r4, #8]
1000f91a:	0020      	movs	r0, r4
1000f91c:	9301      	str	r3, [sp, #4]
1000f91e:	f000 fd05 	bl	1001032c <_vfiprintf_r>
1000f922:	bc16      	pop	{r1, r2, r4}
1000f924:	bc08      	pop	{r3}
1000f926:	b004      	add	sp, #16
1000f928:	4718      	bx	r3
1000f92a:	46c0      	nop			; (mov r8, r8)
1000f92c:	1001237c 	.word	0x1001237c

1000f930 <putchar>:
1000f930:	4b08      	ldr	r3, [pc, #32]	; (1000f954 <putchar+0x24>)
1000f932:	b570      	push	{r4, r5, r6, lr}
1000f934:	681c      	ldr	r4, [r3, #0]
1000f936:	0005      	movs	r5, r0
1000f938:	2c00      	cmp	r4, #0
1000f93a:	d005      	beq.n	1000f948 <putchar+0x18>
1000f93c:	69a3      	ldr	r3, [r4, #24]
1000f93e:	2b00      	cmp	r3, #0
1000f940:	d102      	bne.n	1000f948 <putchar+0x18>
1000f942:	0020      	movs	r0, r4
1000f944:	f000 fb2c 	bl	1000ffa0 <__sinit>
1000f948:	0029      	movs	r1, r5
1000f94a:	68a2      	ldr	r2, [r4, #8]
1000f94c:	0020      	movs	r0, r4
1000f94e:	f000 ff99 	bl	10010884 <_putc_r>
1000f952:	bd70      	pop	{r4, r5, r6, pc}
1000f954:	1001237c 	.word	0x1001237c

1000f958 <_puts_r>:
1000f958:	b570      	push	{r4, r5, r6, lr}
1000f95a:	0005      	movs	r5, r0
1000f95c:	000e      	movs	r6, r1
1000f95e:	2800      	cmp	r0, #0
1000f960:	d004      	beq.n	1000f96c <_puts_r+0x14>
1000f962:	6983      	ldr	r3, [r0, #24]
1000f964:	2b00      	cmp	r3, #0
1000f966:	d101      	bne.n	1000f96c <_puts_r+0x14>
1000f968:	f000 fb1a 	bl	1000ffa0 <__sinit>
1000f96c:	69ab      	ldr	r3, [r5, #24]
1000f96e:	68ac      	ldr	r4, [r5, #8]
1000f970:	2b00      	cmp	r3, #0
1000f972:	d102      	bne.n	1000f97a <_puts_r+0x22>
1000f974:	0028      	movs	r0, r5
1000f976:	f000 fb13 	bl	1000ffa0 <__sinit>
1000f97a:	4b25      	ldr	r3, [pc, #148]	; (1000fa10 <_puts_r+0xb8>)
1000f97c:	429c      	cmp	r4, r3
1000f97e:	d101      	bne.n	1000f984 <_puts_r+0x2c>
1000f980:	686c      	ldr	r4, [r5, #4]
1000f982:	e008      	b.n	1000f996 <_puts_r+0x3e>
1000f984:	4b23      	ldr	r3, [pc, #140]	; (1000fa14 <_puts_r+0xbc>)
1000f986:	429c      	cmp	r4, r3
1000f988:	d101      	bne.n	1000f98e <_puts_r+0x36>
1000f98a:	68ac      	ldr	r4, [r5, #8]
1000f98c:	e003      	b.n	1000f996 <_puts_r+0x3e>
1000f98e:	4b22      	ldr	r3, [pc, #136]	; (1000fa18 <_puts_r+0xc0>)
1000f990:	429c      	cmp	r4, r3
1000f992:	d100      	bne.n	1000f996 <_puts_r+0x3e>
1000f994:	68ec      	ldr	r4, [r5, #12]
1000f996:	89a3      	ldrh	r3, [r4, #12]
1000f998:	071b      	lsls	r3, r3, #28
1000f99a:	d502      	bpl.n	1000f9a2 <_puts_r+0x4a>
1000f99c:	6923      	ldr	r3, [r4, #16]
1000f99e:	2b00      	cmp	r3, #0
1000f9a0:	d111      	bne.n	1000f9c6 <_puts_r+0x6e>
1000f9a2:	0021      	movs	r1, r4
1000f9a4:	0028      	movs	r0, r5
1000f9a6:	f000 f991 	bl	1000fccc <__swsetup_r>
1000f9aa:	2800      	cmp	r0, #0
1000f9ac:	d00b      	beq.n	1000f9c6 <_puts_r+0x6e>
1000f9ae:	2001      	movs	r0, #1
1000f9b0:	4240      	negs	r0, r0
1000f9b2:	e02b      	b.n	1000fa0c <_puts_r+0xb4>
1000f9b4:	3b01      	subs	r3, #1
1000f9b6:	3601      	adds	r6, #1
1000f9b8:	60a3      	str	r3, [r4, #8]
1000f9ba:	2b00      	cmp	r3, #0
1000f9bc:	db08      	blt.n	1000f9d0 <_puts_r+0x78>
1000f9be:	6823      	ldr	r3, [r4, #0]
1000f9c0:	1c5a      	adds	r2, r3, #1
1000f9c2:	6022      	str	r2, [r4, #0]
1000f9c4:	7019      	strb	r1, [r3, #0]
1000f9c6:	7831      	ldrb	r1, [r6, #0]
1000f9c8:	68a3      	ldr	r3, [r4, #8]
1000f9ca:	2900      	cmp	r1, #0
1000f9cc:	d1f2      	bne.n	1000f9b4 <_puts_r+0x5c>
1000f9ce:	e00b      	b.n	1000f9e8 <_puts_r+0x90>
1000f9d0:	69a2      	ldr	r2, [r4, #24]
1000f9d2:	4293      	cmp	r3, r2
1000f9d4:	db01      	blt.n	1000f9da <_puts_r+0x82>
1000f9d6:	290a      	cmp	r1, #10
1000f9d8:	d1f1      	bne.n	1000f9be <_puts_r+0x66>
1000f9da:	0022      	movs	r2, r4
1000f9dc:	0028      	movs	r0, r5
1000f9de:	f000 f91d 	bl	1000fc1c <__swbuf_r>
1000f9e2:	1c43      	adds	r3, r0, #1
1000f9e4:	d1ef      	bne.n	1000f9c6 <_puts_r+0x6e>
1000f9e6:	e7e2      	b.n	1000f9ae <_puts_r+0x56>
1000f9e8:	3b01      	subs	r3, #1
1000f9ea:	60a3      	str	r3, [r4, #8]
1000f9ec:	2b00      	cmp	r3, #0
1000f9ee:	da08      	bge.n	1000fa02 <_puts_r+0xaa>
1000f9f0:	0022      	movs	r2, r4
1000f9f2:	310a      	adds	r1, #10
1000f9f4:	0028      	movs	r0, r5
1000f9f6:	f000 f911 	bl	1000fc1c <__swbuf_r>
1000f9fa:	1c43      	adds	r3, r0, #1
1000f9fc:	d0d7      	beq.n	1000f9ae <_puts_r+0x56>
1000f9fe:	200a      	movs	r0, #10
1000fa00:	e004      	b.n	1000fa0c <_puts_r+0xb4>
1000fa02:	200a      	movs	r0, #10
1000fa04:	6823      	ldr	r3, [r4, #0]
1000fa06:	1c5a      	adds	r2, r3, #1
1000fa08:	6022      	str	r2, [r4, #0]
1000fa0a:	7018      	strb	r0, [r3, #0]
1000fa0c:	bd70      	pop	{r4, r5, r6, pc}
1000fa0e:	46c0      	nop			; (mov r8, r8)
1000fa10:	10012260 	.word	0x10012260
1000fa14:	10012280 	.word	0x10012280
1000fa18:	100122a0 	.word	0x100122a0

1000fa1c <puts>:
1000fa1c:	b510      	push	{r4, lr}
1000fa1e:	4b03      	ldr	r3, [pc, #12]	; (1000fa2c <puts+0x10>)
1000fa20:	0001      	movs	r1, r0
1000fa22:	6818      	ldr	r0, [r3, #0]
1000fa24:	f7ff ff98 	bl	1000f958 <_puts_r>
1000fa28:	bd10      	pop	{r4, pc}
1000fa2a:	46c0      	nop			; (mov r8, r8)
1000fa2c:	1001237c 	.word	0x1001237c

1000fa30 <rand>:
1000fa30:	4b15      	ldr	r3, [pc, #84]	; (1000fa88 <rand+0x58>)
1000fa32:	b510      	push	{r4, lr}
1000fa34:	681c      	ldr	r4, [r3, #0]
1000fa36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000fa38:	2b00      	cmp	r3, #0
1000fa3a:	d115      	bne.n	1000fa68 <rand+0x38>
1000fa3c:	2018      	movs	r0, #24
1000fa3e:	f000 fba7 	bl	10010190 <malloc>
1000fa42:	4b12      	ldr	r3, [pc, #72]	; (1000fa8c <rand+0x5c>)
1000fa44:	63a0      	str	r0, [r4, #56]	; 0x38
1000fa46:	8003      	strh	r3, [r0, #0]
1000fa48:	4b11      	ldr	r3, [pc, #68]	; (1000fa90 <rand+0x60>)
1000fa4a:	2201      	movs	r2, #1
1000fa4c:	8043      	strh	r3, [r0, #2]
1000fa4e:	4b11      	ldr	r3, [pc, #68]	; (1000fa94 <rand+0x64>)
1000fa50:	8083      	strh	r3, [r0, #4]
1000fa52:	4b11      	ldr	r3, [pc, #68]	; (1000fa98 <rand+0x68>)
1000fa54:	80c3      	strh	r3, [r0, #6]
1000fa56:	4b11      	ldr	r3, [pc, #68]	; (1000fa9c <rand+0x6c>)
1000fa58:	8103      	strh	r3, [r0, #8]
1000fa5a:	2305      	movs	r3, #5
1000fa5c:	8143      	strh	r3, [r0, #10]
1000fa5e:	3306      	adds	r3, #6
1000fa60:	8183      	strh	r3, [r0, #12]
1000fa62:	2300      	movs	r3, #0
1000fa64:	6102      	str	r2, [r0, #16]
1000fa66:	6143      	str	r3, [r0, #20]
1000fa68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1000fa6a:	4a0d      	ldr	r2, [pc, #52]	; (1000faa0 <rand+0x70>)
1000fa6c:	6920      	ldr	r0, [r4, #16]
1000fa6e:	6961      	ldr	r1, [r4, #20]
1000fa70:	4b0c      	ldr	r3, [pc, #48]	; (1000faa4 <rand+0x74>)
1000fa72:	f001 f819 	bl	10010aa8 <__aeabi_lmul>
1000fa76:	2201      	movs	r2, #1
1000fa78:	2300      	movs	r3, #0
1000fa7a:	1880      	adds	r0, r0, r2
1000fa7c:	4159      	adcs	r1, r3
1000fa7e:	6120      	str	r0, [r4, #16]
1000fa80:	6161      	str	r1, [r4, #20]
1000fa82:	0048      	lsls	r0, r1, #1
1000fa84:	0840      	lsrs	r0, r0, #1
1000fa86:	bd10      	pop	{r4, pc}
1000fa88:	1001237c 	.word	0x1001237c
1000fa8c:	0000330e 	.word	0x0000330e
1000fa90:	ffffabcd 	.word	0xffffabcd
1000fa94:	00001234 	.word	0x00001234
1000fa98:	ffffe66d 	.word	0xffffe66d
1000fa9c:	ffffdeec 	.word	0xffffdeec
1000faa0:	4c957f2d 	.word	0x4c957f2d
1000faa4:	5851f42d 	.word	0x5851f42d

1000faa8 <setbuf>:
1000faa8:	424a      	negs	r2, r1
1000faaa:	414a      	adcs	r2, r1
1000faac:	2380      	movs	r3, #128	; 0x80
1000faae:	b510      	push	{r4, lr}
1000fab0:	0052      	lsls	r2, r2, #1
1000fab2:	00db      	lsls	r3, r3, #3
1000fab4:	f000 f802 	bl	1000fabc <setvbuf>
1000fab8:	bd10      	pop	{r4, pc}
	...

1000fabc <setvbuf>:
1000fabc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fabe:	001d      	movs	r5, r3
1000fac0:	4b51      	ldr	r3, [pc, #324]	; (1000fc08 <setvbuf+0x14c>)
1000fac2:	b085      	sub	sp, #20
1000fac4:	681e      	ldr	r6, [r3, #0]
1000fac6:	0004      	movs	r4, r0
1000fac8:	000f      	movs	r7, r1
1000faca:	9200      	str	r2, [sp, #0]
1000facc:	2e00      	cmp	r6, #0
1000face:	d005      	beq.n	1000fadc <setvbuf+0x20>
1000fad0:	69b3      	ldr	r3, [r6, #24]
1000fad2:	2b00      	cmp	r3, #0
1000fad4:	d102      	bne.n	1000fadc <setvbuf+0x20>
1000fad6:	0030      	movs	r0, r6
1000fad8:	f000 fa62 	bl	1000ffa0 <__sinit>
1000fadc:	4b4b      	ldr	r3, [pc, #300]	; (1000fc0c <setvbuf+0x150>)
1000fade:	429c      	cmp	r4, r3
1000fae0:	d101      	bne.n	1000fae6 <setvbuf+0x2a>
1000fae2:	6874      	ldr	r4, [r6, #4]
1000fae4:	e008      	b.n	1000faf8 <setvbuf+0x3c>
1000fae6:	4b4a      	ldr	r3, [pc, #296]	; (1000fc10 <setvbuf+0x154>)
1000fae8:	429c      	cmp	r4, r3
1000faea:	d101      	bne.n	1000faf0 <setvbuf+0x34>
1000faec:	68b4      	ldr	r4, [r6, #8]
1000faee:	e003      	b.n	1000faf8 <setvbuf+0x3c>
1000faf0:	4b48      	ldr	r3, [pc, #288]	; (1000fc14 <setvbuf+0x158>)
1000faf2:	429c      	cmp	r4, r3
1000faf4:	d100      	bne.n	1000faf8 <setvbuf+0x3c>
1000faf6:	68f4      	ldr	r4, [r6, #12]
1000faf8:	9b00      	ldr	r3, [sp, #0]
1000fafa:	2b02      	cmp	r3, #2
1000fafc:	d005      	beq.n	1000fb0a <setvbuf+0x4e>
1000fafe:	2b01      	cmp	r3, #1
1000fb00:	d900      	bls.n	1000fb04 <setvbuf+0x48>
1000fb02:	e07c      	b.n	1000fbfe <setvbuf+0x142>
1000fb04:	2d00      	cmp	r5, #0
1000fb06:	da00      	bge.n	1000fb0a <setvbuf+0x4e>
1000fb08:	e079      	b.n	1000fbfe <setvbuf+0x142>
1000fb0a:	0021      	movs	r1, r4
1000fb0c:	0030      	movs	r0, r6
1000fb0e:	f000 f9d9 	bl	1000fec4 <_fflush_r>
1000fb12:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fb14:	2900      	cmp	r1, #0
1000fb16:	d008      	beq.n	1000fb2a <setvbuf+0x6e>
1000fb18:	0023      	movs	r3, r4
1000fb1a:	3344      	adds	r3, #68	; 0x44
1000fb1c:	4299      	cmp	r1, r3
1000fb1e:	d002      	beq.n	1000fb26 <setvbuf+0x6a>
1000fb20:	0030      	movs	r0, r6
1000fb22:	f000 fb3f 	bl	100101a4 <_free_r>
1000fb26:	2300      	movs	r3, #0
1000fb28:	6363      	str	r3, [r4, #52]	; 0x34
1000fb2a:	2300      	movs	r3, #0
1000fb2c:	61a3      	str	r3, [r4, #24]
1000fb2e:	6063      	str	r3, [r4, #4]
1000fb30:	89a3      	ldrh	r3, [r4, #12]
1000fb32:	061b      	lsls	r3, r3, #24
1000fb34:	d503      	bpl.n	1000fb3e <setvbuf+0x82>
1000fb36:	6921      	ldr	r1, [r4, #16]
1000fb38:	0030      	movs	r0, r6
1000fb3a:	f000 fb33 	bl	100101a4 <_free_r>
1000fb3e:	89a2      	ldrh	r2, [r4, #12]
1000fb40:	4b35      	ldr	r3, [pc, #212]	; (1000fc18 <setvbuf+0x15c>)
1000fb42:	4013      	ands	r3, r2
1000fb44:	81a3      	strh	r3, [r4, #12]
1000fb46:	9b00      	ldr	r3, [sp, #0]
1000fb48:	2b02      	cmp	r3, #2
1000fb4a:	d021      	beq.n	1000fb90 <setvbuf+0xd4>
1000fb4c:	ab03      	add	r3, sp, #12
1000fb4e:	aa02      	add	r2, sp, #8
1000fb50:	0021      	movs	r1, r4
1000fb52:	0030      	movs	r0, r6
1000fb54:	f000 fab8 	bl	100100c8 <__swhatbuf_r>
1000fb58:	89a3      	ldrh	r3, [r4, #12]
1000fb5a:	4318      	orrs	r0, r3
1000fb5c:	81a0      	strh	r0, [r4, #12]
1000fb5e:	2d00      	cmp	r5, #0
1000fb60:	d101      	bne.n	1000fb66 <setvbuf+0xaa>
1000fb62:	9d02      	ldr	r5, [sp, #8]
1000fb64:	e001      	b.n	1000fb6a <setvbuf+0xae>
1000fb66:	2f00      	cmp	r7, #0
1000fb68:	d125      	bne.n	1000fbb6 <setvbuf+0xfa>
1000fb6a:	0028      	movs	r0, r5
1000fb6c:	f000 fb10 	bl	10010190 <malloc>
1000fb70:	9501      	str	r5, [sp, #4]
1000fb72:	1e07      	subs	r7, r0, #0
1000fb74:	d11a      	bne.n	1000fbac <setvbuf+0xf0>
1000fb76:	9b02      	ldr	r3, [sp, #8]
1000fb78:	9301      	str	r3, [sp, #4]
1000fb7a:	42ab      	cmp	r3, r5
1000fb7c:	d102      	bne.n	1000fb84 <setvbuf+0xc8>
1000fb7e:	2001      	movs	r0, #1
1000fb80:	4240      	negs	r0, r0
1000fb82:	e006      	b.n	1000fb92 <setvbuf+0xd6>
1000fb84:	9801      	ldr	r0, [sp, #4]
1000fb86:	f000 fb03 	bl	10010190 <malloc>
1000fb8a:	1e07      	subs	r7, r0, #0
1000fb8c:	d10e      	bne.n	1000fbac <setvbuf+0xf0>
1000fb8e:	e7f6      	b.n	1000fb7e <setvbuf+0xc2>
1000fb90:	2000      	movs	r0, #0
1000fb92:	2202      	movs	r2, #2
1000fb94:	89a3      	ldrh	r3, [r4, #12]
1000fb96:	4313      	orrs	r3, r2
1000fb98:	81a3      	strh	r3, [r4, #12]
1000fb9a:	2300      	movs	r3, #0
1000fb9c:	60a3      	str	r3, [r4, #8]
1000fb9e:	0023      	movs	r3, r4
1000fba0:	3347      	adds	r3, #71	; 0x47
1000fba2:	6023      	str	r3, [r4, #0]
1000fba4:	6123      	str	r3, [r4, #16]
1000fba6:	2301      	movs	r3, #1
1000fba8:	6163      	str	r3, [r4, #20]
1000fbaa:	e02a      	b.n	1000fc02 <setvbuf+0x146>
1000fbac:	2280      	movs	r2, #128	; 0x80
1000fbae:	89a3      	ldrh	r3, [r4, #12]
1000fbb0:	9d01      	ldr	r5, [sp, #4]
1000fbb2:	4313      	orrs	r3, r2
1000fbb4:	81a3      	strh	r3, [r4, #12]
1000fbb6:	69b3      	ldr	r3, [r6, #24]
1000fbb8:	2b00      	cmp	r3, #0
1000fbba:	d102      	bne.n	1000fbc2 <setvbuf+0x106>
1000fbbc:	0030      	movs	r0, r6
1000fbbe:	f000 f9ef 	bl	1000ffa0 <__sinit>
1000fbc2:	9b00      	ldr	r3, [sp, #0]
1000fbc4:	2b01      	cmp	r3, #1
1000fbc6:	d103      	bne.n	1000fbd0 <setvbuf+0x114>
1000fbc8:	89a3      	ldrh	r3, [r4, #12]
1000fbca:	9a00      	ldr	r2, [sp, #0]
1000fbcc:	431a      	orrs	r2, r3
1000fbce:	81a2      	strh	r2, [r4, #12]
1000fbd0:	2308      	movs	r3, #8
1000fbd2:	89a2      	ldrh	r2, [r4, #12]
1000fbd4:	6027      	str	r7, [r4, #0]
1000fbd6:	4013      	ands	r3, r2
1000fbd8:	6127      	str	r7, [r4, #16]
1000fbda:	6165      	str	r5, [r4, #20]
1000fbdc:	1e18      	subs	r0, r3, #0
1000fbde:	d00c      	beq.n	1000fbfa <setvbuf+0x13e>
1000fbe0:	2301      	movs	r3, #1
1000fbe2:	401a      	ands	r2, r3
1000fbe4:	2300      	movs	r3, #0
1000fbe6:	1e10      	subs	r0, r2, #0
1000fbe8:	4298      	cmp	r0, r3
1000fbea:	d004      	beq.n	1000fbf6 <setvbuf+0x13a>
1000fbec:	426d      	negs	r5, r5
1000fbee:	60a3      	str	r3, [r4, #8]
1000fbf0:	61a5      	str	r5, [r4, #24]
1000fbf2:	0018      	movs	r0, r3
1000fbf4:	e005      	b.n	1000fc02 <setvbuf+0x146>
1000fbf6:	60a5      	str	r5, [r4, #8]
1000fbf8:	e003      	b.n	1000fc02 <setvbuf+0x146>
1000fbfa:	60a3      	str	r3, [r4, #8]
1000fbfc:	e001      	b.n	1000fc02 <setvbuf+0x146>
1000fbfe:	2001      	movs	r0, #1
1000fc00:	4240      	negs	r0, r0
1000fc02:	b005      	add	sp, #20
1000fc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc06:	46c0      	nop			; (mov r8, r8)
1000fc08:	1001237c 	.word	0x1001237c
1000fc0c:	10012260 	.word	0x10012260
1000fc10:	10012280 	.word	0x10012280
1000fc14:	100122a0 	.word	0x100122a0
1000fc18:	fffff35c 	.word	0xfffff35c

1000fc1c <__swbuf_r>:
1000fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fc1e:	0005      	movs	r5, r0
1000fc20:	000f      	movs	r7, r1
1000fc22:	0014      	movs	r4, r2
1000fc24:	2800      	cmp	r0, #0
1000fc26:	d004      	beq.n	1000fc32 <__swbuf_r+0x16>
1000fc28:	6983      	ldr	r3, [r0, #24]
1000fc2a:	2b00      	cmp	r3, #0
1000fc2c:	d101      	bne.n	1000fc32 <__swbuf_r+0x16>
1000fc2e:	f000 f9b7 	bl	1000ffa0 <__sinit>
1000fc32:	4b23      	ldr	r3, [pc, #140]	; (1000fcc0 <__swbuf_r+0xa4>)
1000fc34:	429c      	cmp	r4, r3
1000fc36:	d101      	bne.n	1000fc3c <__swbuf_r+0x20>
1000fc38:	686c      	ldr	r4, [r5, #4]
1000fc3a:	e008      	b.n	1000fc4e <__swbuf_r+0x32>
1000fc3c:	4b21      	ldr	r3, [pc, #132]	; (1000fcc4 <__swbuf_r+0xa8>)
1000fc3e:	429c      	cmp	r4, r3
1000fc40:	d101      	bne.n	1000fc46 <__swbuf_r+0x2a>
1000fc42:	68ac      	ldr	r4, [r5, #8]
1000fc44:	e003      	b.n	1000fc4e <__swbuf_r+0x32>
1000fc46:	4b20      	ldr	r3, [pc, #128]	; (1000fcc8 <__swbuf_r+0xac>)
1000fc48:	429c      	cmp	r4, r3
1000fc4a:	d100      	bne.n	1000fc4e <__swbuf_r+0x32>
1000fc4c:	68ec      	ldr	r4, [r5, #12]
1000fc4e:	69a3      	ldr	r3, [r4, #24]
1000fc50:	60a3      	str	r3, [r4, #8]
1000fc52:	89a3      	ldrh	r3, [r4, #12]
1000fc54:	071b      	lsls	r3, r3, #28
1000fc56:	d50a      	bpl.n	1000fc6e <__swbuf_r+0x52>
1000fc58:	6923      	ldr	r3, [r4, #16]
1000fc5a:	2b00      	cmp	r3, #0
1000fc5c:	d007      	beq.n	1000fc6e <__swbuf_r+0x52>
1000fc5e:	6823      	ldr	r3, [r4, #0]
1000fc60:	6922      	ldr	r2, [r4, #16]
1000fc62:	b2fe      	uxtb	r6, r7
1000fc64:	1a98      	subs	r0, r3, r2
1000fc66:	6963      	ldr	r3, [r4, #20]
1000fc68:	4298      	cmp	r0, r3
1000fc6a:	db0f      	blt.n	1000fc8c <__swbuf_r+0x70>
1000fc6c:	e008      	b.n	1000fc80 <__swbuf_r+0x64>
1000fc6e:	0021      	movs	r1, r4
1000fc70:	0028      	movs	r0, r5
1000fc72:	f000 f82b 	bl	1000fccc <__swsetup_r>
1000fc76:	2800      	cmp	r0, #0
1000fc78:	d0f1      	beq.n	1000fc5e <__swbuf_r+0x42>
1000fc7a:	2001      	movs	r0, #1
1000fc7c:	4240      	negs	r0, r0
1000fc7e:	e01d      	b.n	1000fcbc <__swbuf_r+0xa0>
1000fc80:	0021      	movs	r1, r4
1000fc82:	0028      	movs	r0, r5
1000fc84:	f000 f91e 	bl	1000fec4 <_fflush_r>
1000fc88:	2800      	cmp	r0, #0
1000fc8a:	d1f6      	bne.n	1000fc7a <__swbuf_r+0x5e>
1000fc8c:	68a3      	ldr	r3, [r4, #8]
1000fc8e:	3001      	adds	r0, #1
1000fc90:	3b01      	subs	r3, #1
1000fc92:	60a3      	str	r3, [r4, #8]
1000fc94:	6823      	ldr	r3, [r4, #0]
1000fc96:	1c5a      	adds	r2, r3, #1
1000fc98:	6022      	str	r2, [r4, #0]
1000fc9a:	701f      	strb	r7, [r3, #0]
1000fc9c:	6963      	ldr	r3, [r4, #20]
1000fc9e:	4298      	cmp	r0, r3
1000fca0:	d005      	beq.n	1000fcae <__swbuf_r+0x92>
1000fca2:	89a3      	ldrh	r3, [r4, #12]
1000fca4:	0030      	movs	r0, r6
1000fca6:	07db      	lsls	r3, r3, #31
1000fca8:	d508      	bpl.n	1000fcbc <__swbuf_r+0xa0>
1000fcaa:	2e0a      	cmp	r6, #10
1000fcac:	d106      	bne.n	1000fcbc <__swbuf_r+0xa0>
1000fcae:	0021      	movs	r1, r4
1000fcb0:	0028      	movs	r0, r5
1000fcb2:	f000 f907 	bl	1000fec4 <_fflush_r>
1000fcb6:	2800      	cmp	r0, #0
1000fcb8:	d1df      	bne.n	1000fc7a <__swbuf_r+0x5e>
1000fcba:	0030      	movs	r0, r6
1000fcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fcbe:	46c0      	nop			; (mov r8, r8)
1000fcc0:	10012260 	.word	0x10012260
1000fcc4:	10012280 	.word	0x10012280
1000fcc8:	100122a0 	.word	0x100122a0

1000fccc <__swsetup_r>:
1000fccc:	4b36      	ldr	r3, [pc, #216]	; (1000fda8 <__swsetup_r+0xdc>)
1000fcce:	b570      	push	{r4, r5, r6, lr}
1000fcd0:	681d      	ldr	r5, [r3, #0]
1000fcd2:	0006      	movs	r6, r0
1000fcd4:	000c      	movs	r4, r1
1000fcd6:	2d00      	cmp	r5, #0
1000fcd8:	d005      	beq.n	1000fce6 <__swsetup_r+0x1a>
1000fcda:	69ab      	ldr	r3, [r5, #24]
1000fcdc:	2b00      	cmp	r3, #0
1000fcde:	d102      	bne.n	1000fce6 <__swsetup_r+0x1a>
1000fce0:	0028      	movs	r0, r5
1000fce2:	f000 f95d 	bl	1000ffa0 <__sinit>
1000fce6:	4b31      	ldr	r3, [pc, #196]	; (1000fdac <__swsetup_r+0xe0>)
1000fce8:	429c      	cmp	r4, r3
1000fcea:	d101      	bne.n	1000fcf0 <__swsetup_r+0x24>
1000fcec:	686c      	ldr	r4, [r5, #4]
1000fcee:	e008      	b.n	1000fd02 <__swsetup_r+0x36>
1000fcf0:	4b2f      	ldr	r3, [pc, #188]	; (1000fdb0 <__swsetup_r+0xe4>)
1000fcf2:	429c      	cmp	r4, r3
1000fcf4:	d101      	bne.n	1000fcfa <__swsetup_r+0x2e>
1000fcf6:	68ac      	ldr	r4, [r5, #8]
1000fcf8:	e003      	b.n	1000fd02 <__swsetup_r+0x36>
1000fcfa:	4b2e      	ldr	r3, [pc, #184]	; (1000fdb4 <__swsetup_r+0xe8>)
1000fcfc:	429c      	cmp	r4, r3
1000fcfe:	d100      	bne.n	1000fd02 <__swsetup_r+0x36>
1000fd00:	68ec      	ldr	r4, [r5, #12]
1000fd02:	220c      	movs	r2, #12
1000fd04:	5ea3      	ldrsh	r3, [r4, r2]
1000fd06:	b29a      	uxth	r2, r3
1000fd08:	0711      	lsls	r1, r2, #28
1000fd0a:	d423      	bmi.n	1000fd54 <__swsetup_r+0x88>
1000fd0c:	06d1      	lsls	r1, r2, #27
1000fd0e:	d407      	bmi.n	1000fd20 <__swsetup_r+0x54>
1000fd10:	2209      	movs	r2, #9
1000fd12:	2001      	movs	r0, #1
1000fd14:	6032      	str	r2, [r6, #0]
1000fd16:	3237      	adds	r2, #55	; 0x37
1000fd18:	4313      	orrs	r3, r2
1000fd1a:	81a3      	strh	r3, [r4, #12]
1000fd1c:	4240      	negs	r0, r0
1000fd1e:	e042      	b.n	1000fda6 <__swsetup_r+0xda>
1000fd20:	0753      	lsls	r3, r2, #29
1000fd22:	d513      	bpl.n	1000fd4c <__swsetup_r+0x80>
1000fd24:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fd26:	2900      	cmp	r1, #0
1000fd28:	d008      	beq.n	1000fd3c <__swsetup_r+0x70>
1000fd2a:	0023      	movs	r3, r4
1000fd2c:	3344      	adds	r3, #68	; 0x44
1000fd2e:	4299      	cmp	r1, r3
1000fd30:	d002      	beq.n	1000fd38 <__swsetup_r+0x6c>
1000fd32:	0030      	movs	r0, r6
1000fd34:	f000 fa36 	bl	100101a4 <_free_r>
1000fd38:	2300      	movs	r3, #0
1000fd3a:	6363      	str	r3, [r4, #52]	; 0x34
1000fd3c:	2224      	movs	r2, #36	; 0x24
1000fd3e:	89a3      	ldrh	r3, [r4, #12]
1000fd40:	4393      	bics	r3, r2
1000fd42:	81a3      	strh	r3, [r4, #12]
1000fd44:	2300      	movs	r3, #0
1000fd46:	6063      	str	r3, [r4, #4]
1000fd48:	6923      	ldr	r3, [r4, #16]
1000fd4a:	6023      	str	r3, [r4, #0]
1000fd4c:	2208      	movs	r2, #8
1000fd4e:	89a3      	ldrh	r3, [r4, #12]
1000fd50:	4313      	orrs	r3, r2
1000fd52:	81a3      	strh	r3, [r4, #12]
1000fd54:	6923      	ldr	r3, [r4, #16]
1000fd56:	2b00      	cmp	r3, #0
1000fd58:	d10b      	bne.n	1000fd72 <__swsetup_r+0xa6>
1000fd5a:	23a0      	movs	r3, #160	; 0xa0
1000fd5c:	89a2      	ldrh	r2, [r4, #12]
1000fd5e:	009b      	lsls	r3, r3, #2
1000fd60:	4013      	ands	r3, r2
1000fd62:	2280      	movs	r2, #128	; 0x80
1000fd64:	0092      	lsls	r2, r2, #2
1000fd66:	4293      	cmp	r3, r2
1000fd68:	d003      	beq.n	1000fd72 <__swsetup_r+0xa6>
1000fd6a:	0021      	movs	r1, r4
1000fd6c:	0030      	movs	r0, r6
1000fd6e:	f000 f9d1 	bl	10010114 <__smakebuf_r>
1000fd72:	2301      	movs	r3, #1
1000fd74:	89a2      	ldrh	r2, [r4, #12]
1000fd76:	4013      	ands	r3, r2
1000fd78:	d005      	beq.n	1000fd86 <__swsetup_r+0xba>
1000fd7a:	2300      	movs	r3, #0
1000fd7c:	60a3      	str	r3, [r4, #8]
1000fd7e:	6963      	ldr	r3, [r4, #20]
1000fd80:	425b      	negs	r3, r3
1000fd82:	61a3      	str	r3, [r4, #24]
1000fd84:	e003      	b.n	1000fd8e <__swsetup_r+0xc2>
1000fd86:	0792      	lsls	r2, r2, #30
1000fd88:	d400      	bmi.n	1000fd8c <__swsetup_r+0xc0>
1000fd8a:	6963      	ldr	r3, [r4, #20]
1000fd8c:	60a3      	str	r3, [r4, #8]
1000fd8e:	2000      	movs	r0, #0
1000fd90:	6923      	ldr	r3, [r4, #16]
1000fd92:	4283      	cmp	r3, r0
1000fd94:	d107      	bne.n	1000fda6 <__swsetup_r+0xda>
1000fd96:	220c      	movs	r2, #12
1000fd98:	5ea3      	ldrsh	r3, [r4, r2]
1000fd9a:	061a      	lsls	r2, r3, #24
1000fd9c:	d503      	bpl.n	1000fda6 <__swsetup_r+0xda>
1000fd9e:	2240      	movs	r2, #64	; 0x40
1000fda0:	4313      	orrs	r3, r2
1000fda2:	81a3      	strh	r3, [r4, #12]
1000fda4:	3801      	subs	r0, #1
1000fda6:	bd70      	pop	{r4, r5, r6, pc}
1000fda8:	1001237c 	.word	0x1001237c
1000fdac:	10012260 	.word	0x10012260
1000fdb0:	10012280 	.word	0x10012280
1000fdb4:	100122a0 	.word	0x100122a0

1000fdb8 <__sflush_r>:
1000fdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fdba:	898a      	ldrh	r2, [r1, #12]
1000fdbc:	0005      	movs	r5, r0
1000fdbe:	000c      	movs	r4, r1
1000fdc0:	0713      	lsls	r3, r2, #28
1000fdc2:	d45a      	bmi.n	1000fe7a <__sflush_r+0xc2>
1000fdc4:	684b      	ldr	r3, [r1, #4]
1000fdc6:	2b00      	cmp	r3, #0
1000fdc8:	dc02      	bgt.n	1000fdd0 <__sflush_r+0x18>
1000fdca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000fdcc:	2b00      	cmp	r3, #0
1000fdce:	dd19      	ble.n	1000fe04 <__sflush_r+0x4c>
1000fdd0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fdd2:	2f00      	cmp	r7, #0
1000fdd4:	d016      	beq.n	1000fe04 <__sflush_r+0x4c>
1000fdd6:	2300      	movs	r3, #0
1000fdd8:	682e      	ldr	r6, [r5, #0]
1000fdda:	602b      	str	r3, [r5, #0]
1000fddc:	2380      	movs	r3, #128	; 0x80
1000fdde:	015b      	lsls	r3, r3, #5
1000fde0:	401a      	ands	r2, r3
1000fde2:	d001      	beq.n	1000fde8 <__sflush_r+0x30>
1000fde4:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000fde6:	e014      	b.n	1000fe12 <__sflush_r+0x5a>
1000fde8:	2301      	movs	r3, #1
1000fdea:	6a21      	ldr	r1, [r4, #32]
1000fdec:	0028      	movs	r0, r5
1000fdee:	47b8      	blx	r7
1000fdf0:	1c43      	adds	r3, r0, #1
1000fdf2:	d10e      	bne.n	1000fe12 <__sflush_r+0x5a>
1000fdf4:	682b      	ldr	r3, [r5, #0]
1000fdf6:	2b00      	cmp	r3, #0
1000fdf8:	d00b      	beq.n	1000fe12 <__sflush_r+0x5a>
1000fdfa:	2b1d      	cmp	r3, #29
1000fdfc:	d001      	beq.n	1000fe02 <__sflush_r+0x4a>
1000fdfe:	2b16      	cmp	r3, #22
1000fe00:	d102      	bne.n	1000fe08 <__sflush_r+0x50>
1000fe02:	602e      	str	r6, [r5, #0]
1000fe04:	2000      	movs	r0, #0
1000fe06:	e05a      	b.n	1000febe <__sflush_r+0x106>
1000fe08:	2240      	movs	r2, #64	; 0x40
1000fe0a:	89a3      	ldrh	r3, [r4, #12]
1000fe0c:	4313      	orrs	r3, r2
1000fe0e:	81a3      	strh	r3, [r4, #12]
1000fe10:	e055      	b.n	1000febe <__sflush_r+0x106>
1000fe12:	89a3      	ldrh	r3, [r4, #12]
1000fe14:	075b      	lsls	r3, r3, #29
1000fe16:	d506      	bpl.n	1000fe26 <__sflush_r+0x6e>
1000fe18:	6863      	ldr	r3, [r4, #4]
1000fe1a:	1ac0      	subs	r0, r0, r3
1000fe1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000fe1e:	2b00      	cmp	r3, #0
1000fe20:	d001      	beq.n	1000fe26 <__sflush_r+0x6e>
1000fe22:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000fe24:	1ac0      	subs	r0, r0, r3
1000fe26:	2300      	movs	r3, #0
1000fe28:	0002      	movs	r2, r0
1000fe2a:	6a21      	ldr	r1, [r4, #32]
1000fe2c:	0028      	movs	r0, r5
1000fe2e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fe30:	47b8      	blx	r7
1000fe32:	89a3      	ldrh	r3, [r4, #12]
1000fe34:	1c42      	adds	r2, r0, #1
1000fe36:	d106      	bne.n	1000fe46 <__sflush_r+0x8e>
1000fe38:	6829      	ldr	r1, [r5, #0]
1000fe3a:	291d      	cmp	r1, #29
1000fe3c:	d83a      	bhi.n	1000feb4 <__sflush_r+0xfc>
1000fe3e:	4a20      	ldr	r2, [pc, #128]	; (1000fec0 <__sflush_r+0x108>)
1000fe40:	40ca      	lsrs	r2, r1
1000fe42:	07d2      	lsls	r2, r2, #31
1000fe44:	d536      	bpl.n	1000feb4 <__sflush_r+0xfc>
1000fe46:	2200      	movs	r2, #0
1000fe48:	6062      	str	r2, [r4, #4]
1000fe4a:	6922      	ldr	r2, [r4, #16]
1000fe4c:	6022      	str	r2, [r4, #0]
1000fe4e:	04db      	lsls	r3, r3, #19
1000fe50:	d505      	bpl.n	1000fe5e <__sflush_r+0xa6>
1000fe52:	1c43      	adds	r3, r0, #1
1000fe54:	d102      	bne.n	1000fe5c <__sflush_r+0xa4>
1000fe56:	682b      	ldr	r3, [r5, #0]
1000fe58:	2b00      	cmp	r3, #0
1000fe5a:	d100      	bne.n	1000fe5e <__sflush_r+0xa6>
1000fe5c:	6560      	str	r0, [r4, #84]	; 0x54
1000fe5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fe60:	602e      	str	r6, [r5, #0]
1000fe62:	2900      	cmp	r1, #0
1000fe64:	d0ce      	beq.n	1000fe04 <__sflush_r+0x4c>
1000fe66:	0023      	movs	r3, r4
1000fe68:	3344      	adds	r3, #68	; 0x44
1000fe6a:	4299      	cmp	r1, r3
1000fe6c:	d002      	beq.n	1000fe74 <__sflush_r+0xbc>
1000fe6e:	0028      	movs	r0, r5
1000fe70:	f000 f998 	bl	100101a4 <_free_r>
1000fe74:	2000      	movs	r0, #0
1000fe76:	6360      	str	r0, [r4, #52]	; 0x34
1000fe78:	e021      	b.n	1000febe <__sflush_r+0x106>
1000fe7a:	690f      	ldr	r7, [r1, #16]
1000fe7c:	2f00      	cmp	r7, #0
1000fe7e:	d0c1      	beq.n	1000fe04 <__sflush_r+0x4c>
1000fe80:	680b      	ldr	r3, [r1, #0]
1000fe82:	600f      	str	r7, [r1, #0]
1000fe84:	1bdb      	subs	r3, r3, r7
1000fe86:	9301      	str	r3, [sp, #4]
1000fe88:	2300      	movs	r3, #0
1000fe8a:	0792      	lsls	r2, r2, #30
1000fe8c:	d100      	bne.n	1000fe90 <__sflush_r+0xd8>
1000fe8e:	694b      	ldr	r3, [r1, #20]
1000fe90:	60a3      	str	r3, [r4, #8]
1000fe92:	e003      	b.n	1000fe9c <__sflush_r+0xe4>
1000fe94:	9b01      	ldr	r3, [sp, #4]
1000fe96:	183f      	adds	r7, r7, r0
1000fe98:	1a1b      	subs	r3, r3, r0
1000fe9a:	9301      	str	r3, [sp, #4]
1000fe9c:	9b01      	ldr	r3, [sp, #4]
1000fe9e:	2b00      	cmp	r3, #0
1000fea0:	ddb0      	ble.n	1000fe04 <__sflush_r+0x4c>
1000fea2:	9b01      	ldr	r3, [sp, #4]
1000fea4:	003a      	movs	r2, r7
1000fea6:	6a21      	ldr	r1, [r4, #32]
1000fea8:	0028      	movs	r0, r5
1000feaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000feac:	47b0      	blx	r6
1000feae:	2800      	cmp	r0, #0
1000feb0:	dcf0      	bgt.n	1000fe94 <__sflush_r+0xdc>
1000feb2:	89a3      	ldrh	r3, [r4, #12]
1000feb4:	2240      	movs	r2, #64	; 0x40
1000feb6:	2001      	movs	r0, #1
1000feb8:	4313      	orrs	r3, r2
1000feba:	81a3      	strh	r3, [r4, #12]
1000febc:	4240      	negs	r0, r0
1000febe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fec0:	20400001 	.word	0x20400001

1000fec4 <_fflush_r>:
1000fec4:	690b      	ldr	r3, [r1, #16]
1000fec6:	b570      	push	{r4, r5, r6, lr}
1000fec8:	0005      	movs	r5, r0
1000feca:	000c      	movs	r4, r1
1000fecc:	2b00      	cmp	r3, #0
1000fece:	d101      	bne.n	1000fed4 <_fflush_r+0x10>
1000fed0:	2000      	movs	r0, #0
1000fed2:	e01c      	b.n	1000ff0e <_fflush_r+0x4a>
1000fed4:	2800      	cmp	r0, #0
1000fed6:	d004      	beq.n	1000fee2 <_fflush_r+0x1e>
1000fed8:	6983      	ldr	r3, [r0, #24]
1000feda:	2b00      	cmp	r3, #0
1000fedc:	d101      	bne.n	1000fee2 <_fflush_r+0x1e>
1000fede:	f000 f85f 	bl	1000ffa0 <__sinit>
1000fee2:	4b0b      	ldr	r3, [pc, #44]	; (1000ff10 <_fflush_r+0x4c>)
1000fee4:	429c      	cmp	r4, r3
1000fee6:	d101      	bne.n	1000feec <_fflush_r+0x28>
1000fee8:	686c      	ldr	r4, [r5, #4]
1000feea:	e008      	b.n	1000fefe <_fflush_r+0x3a>
1000feec:	4b09      	ldr	r3, [pc, #36]	; (1000ff14 <_fflush_r+0x50>)
1000feee:	429c      	cmp	r4, r3
1000fef0:	d101      	bne.n	1000fef6 <_fflush_r+0x32>
1000fef2:	68ac      	ldr	r4, [r5, #8]
1000fef4:	e003      	b.n	1000fefe <_fflush_r+0x3a>
1000fef6:	4b08      	ldr	r3, [pc, #32]	; (1000ff18 <_fflush_r+0x54>)
1000fef8:	429c      	cmp	r4, r3
1000fefa:	d100      	bne.n	1000fefe <_fflush_r+0x3a>
1000fefc:	68ec      	ldr	r4, [r5, #12]
1000fefe:	220c      	movs	r2, #12
1000ff00:	5ea3      	ldrsh	r3, [r4, r2]
1000ff02:	2b00      	cmp	r3, #0
1000ff04:	d0e4      	beq.n	1000fed0 <_fflush_r+0xc>
1000ff06:	0021      	movs	r1, r4
1000ff08:	0028      	movs	r0, r5
1000ff0a:	f7ff ff55 	bl	1000fdb8 <__sflush_r>
1000ff0e:	bd70      	pop	{r4, r5, r6, pc}
1000ff10:	10012260 	.word	0x10012260
1000ff14:	10012280 	.word	0x10012280
1000ff18:	100122a0 	.word	0x100122a0

1000ff1c <_cleanup_r>:
1000ff1c:	b510      	push	{r4, lr}
1000ff1e:	4902      	ldr	r1, [pc, #8]	; (1000ff28 <_cleanup_r+0xc>)
1000ff20:	f000 f8b0 	bl	10010084 <_fwalk_reent>
1000ff24:	bd10      	pop	{r4, pc}
1000ff26:	46c0      	nop			; (mov r8, r8)
1000ff28:	1000fec5 	.word	0x1000fec5

1000ff2c <std.isra.0>:
1000ff2c:	2300      	movs	r3, #0
1000ff2e:	b510      	push	{r4, lr}
1000ff30:	0004      	movs	r4, r0
1000ff32:	6003      	str	r3, [r0, #0]
1000ff34:	6043      	str	r3, [r0, #4]
1000ff36:	6083      	str	r3, [r0, #8]
1000ff38:	8181      	strh	r1, [r0, #12]
1000ff3a:	6643      	str	r3, [r0, #100]	; 0x64
1000ff3c:	81c2      	strh	r2, [r0, #14]
1000ff3e:	6103      	str	r3, [r0, #16]
1000ff40:	6143      	str	r3, [r0, #20]
1000ff42:	6183      	str	r3, [r0, #24]
1000ff44:	0019      	movs	r1, r3
1000ff46:	2208      	movs	r2, #8
1000ff48:	305c      	adds	r0, #92	; 0x5c
1000ff4a:	f7ff fccf 	bl	1000f8ec <memset>
1000ff4e:	4b05      	ldr	r3, [pc, #20]	; (1000ff64 <std.isra.0+0x38>)
1000ff50:	6224      	str	r4, [r4, #32]
1000ff52:	6263      	str	r3, [r4, #36]	; 0x24
1000ff54:	4b04      	ldr	r3, [pc, #16]	; (1000ff68 <std.isra.0+0x3c>)
1000ff56:	62a3      	str	r3, [r4, #40]	; 0x28
1000ff58:	4b04      	ldr	r3, [pc, #16]	; (1000ff6c <std.isra.0+0x40>)
1000ff5a:	62e3      	str	r3, [r4, #44]	; 0x2c
1000ff5c:	4b04      	ldr	r3, [pc, #16]	; (1000ff70 <std.isra.0+0x44>)
1000ff5e:	6323      	str	r3, [r4, #48]	; 0x30
1000ff60:	bd10      	pop	{r4, pc}
1000ff62:	46c0      	nop			; (mov r8, r8)
1000ff64:	10010915 	.word	0x10010915
1000ff68:	1001093d 	.word	0x1001093d
1000ff6c:	10010975 	.word	0x10010975
1000ff70:	100109a1 	.word	0x100109a1

1000ff74 <__sfmoreglue>:
1000ff74:	b570      	push	{r4, r5, r6, lr}
1000ff76:	2568      	movs	r5, #104	; 0x68
1000ff78:	1e4b      	subs	r3, r1, #1
1000ff7a:	435d      	muls	r5, r3
1000ff7c:	000e      	movs	r6, r1
1000ff7e:	0029      	movs	r1, r5
1000ff80:	3174      	adds	r1, #116	; 0x74
1000ff82:	f000 f955 	bl	10010230 <_malloc_r>
1000ff86:	1e04      	subs	r4, r0, #0
1000ff88:	d008      	beq.n	1000ff9c <__sfmoreglue+0x28>
1000ff8a:	2100      	movs	r1, #0
1000ff8c:	002a      	movs	r2, r5
1000ff8e:	6001      	str	r1, [r0, #0]
1000ff90:	6046      	str	r6, [r0, #4]
1000ff92:	300c      	adds	r0, #12
1000ff94:	60a0      	str	r0, [r4, #8]
1000ff96:	3268      	adds	r2, #104	; 0x68
1000ff98:	f7ff fca8 	bl	1000f8ec <memset>
1000ff9c:	0020      	movs	r0, r4
1000ff9e:	bd70      	pop	{r4, r5, r6, pc}

1000ffa0 <__sinit>:
1000ffa0:	6983      	ldr	r3, [r0, #24]
1000ffa2:	b513      	push	{r0, r1, r4, lr}
1000ffa4:	0004      	movs	r4, r0
1000ffa6:	2b00      	cmp	r3, #0
1000ffa8:	d128      	bne.n	1000fffc <__sinit+0x5c>
1000ffaa:	6483      	str	r3, [r0, #72]	; 0x48
1000ffac:	64c3      	str	r3, [r0, #76]	; 0x4c
1000ffae:	6503      	str	r3, [r0, #80]	; 0x50
1000ffb0:	4b13      	ldr	r3, [pc, #76]	; (10010000 <__sinit+0x60>)
1000ffb2:	4a14      	ldr	r2, [pc, #80]	; (10010004 <__sinit+0x64>)
1000ffb4:	681b      	ldr	r3, [r3, #0]
1000ffb6:	6282      	str	r2, [r0, #40]	; 0x28
1000ffb8:	9301      	str	r3, [sp, #4]
1000ffba:	4298      	cmp	r0, r3
1000ffbc:	d101      	bne.n	1000ffc2 <__sinit+0x22>
1000ffbe:	2301      	movs	r3, #1
1000ffc0:	6183      	str	r3, [r0, #24]
1000ffc2:	0020      	movs	r0, r4
1000ffc4:	f000 f820 	bl	10010008 <__sfp>
1000ffc8:	6060      	str	r0, [r4, #4]
1000ffca:	0020      	movs	r0, r4
1000ffcc:	f000 f81c 	bl	10010008 <__sfp>
1000ffd0:	60a0      	str	r0, [r4, #8]
1000ffd2:	0020      	movs	r0, r4
1000ffd4:	f000 f818 	bl	10010008 <__sfp>
1000ffd8:	2200      	movs	r2, #0
1000ffda:	60e0      	str	r0, [r4, #12]
1000ffdc:	2104      	movs	r1, #4
1000ffde:	6860      	ldr	r0, [r4, #4]
1000ffe0:	f7ff ffa4 	bl	1000ff2c <std.isra.0>
1000ffe4:	2201      	movs	r2, #1
1000ffe6:	2109      	movs	r1, #9
1000ffe8:	68a0      	ldr	r0, [r4, #8]
1000ffea:	f7ff ff9f 	bl	1000ff2c <std.isra.0>
1000ffee:	2202      	movs	r2, #2
1000fff0:	2112      	movs	r1, #18
1000fff2:	68e0      	ldr	r0, [r4, #12]
1000fff4:	f7ff ff9a 	bl	1000ff2c <std.isra.0>
1000fff8:	2301      	movs	r3, #1
1000fffa:	61a3      	str	r3, [r4, #24]
1000fffc:	bd13      	pop	{r0, r1, r4, pc}
1000fffe:	46c0      	nop			; (mov r8, r8)
10010000:	1001225c 	.word	0x1001225c
10010004:	1000ff1d 	.word	0x1000ff1d

10010008 <__sfp>:
10010008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001000a:	4b1d      	ldr	r3, [pc, #116]	; (10010080 <__sfp+0x78>)
1001000c:	0006      	movs	r6, r0
1001000e:	681d      	ldr	r5, [r3, #0]
10010010:	69ab      	ldr	r3, [r5, #24]
10010012:	2b00      	cmp	r3, #0
10010014:	d102      	bne.n	1001001c <__sfp+0x14>
10010016:	0028      	movs	r0, r5
10010018:	f7ff ffc2 	bl	1000ffa0 <__sinit>
1001001c:	3548      	adds	r5, #72	; 0x48
1001001e:	68ac      	ldr	r4, [r5, #8]
10010020:	686b      	ldr	r3, [r5, #4]
10010022:	3b01      	subs	r3, #1
10010024:	d405      	bmi.n	10010032 <__sfp+0x2a>
10010026:	220c      	movs	r2, #12
10010028:	5ea7      	ldrsh	r7, [r4, r2]
1001002a:	2f00      	cmp	r7, #0
1001002c:	d010      	beq.n	10010050 <__sfp+0x48>
1001002e:	3468      	adds	r4, #104	; 0x68
10010030:	e7f7      	b.n	10010022 <__sfp+0x1a>
10010032:	682b      	ldr	r3, [r5, #0]
10010034:	2b00      	cmp	r3, #0
10010036:	d001      	beq.n	1001003c <__sfp+0x34>
10010038:	682d      	ldr	r5, [r5, #0]
1001003a:	e7f0      	b.n	1001001e <__sfp+0x16>
1001003c:	2104      	movs	r1, #4
1001003e:	0030      	movs	r0, r6
10010040:	f7ff ff98 	bl	1000ff74 <__sfmoreglue>
10010044:	6028      	str	r0, [r5, #0]
10010046:	2800      	cmp	r0, #0
10010048:	d1f6      	bne.n	10010038 <__sfp+0x30>
1001004a:	230c      	movs	r3, #12
1001004c:	6033      	str	r3, [r6, #0]
1001004e:	e016      	b.n	1001007e <__sfp+0x76>
10010050:	2301      	movs	r3, #1
10010052:	0020      	movs	r0, r4
10010054:	425b      	negs	r3, r3
10010056:	81e3      	strh	r3, [r4, #14]
10010058:	3302      	adds	r3, #2
1001005a:	81a3      	strh	r3, [r4, #12]
1001005c:	6667      	str	r7, [r4, #100]	; 0x64
1001005e:	6027      	str	r7, [r4, #0]
10010060:	60a7      	str	r7, [r4, #8]
10010062:	6067      	str	r7, [r4, #4]
10010064:	6127      	str	r7, [r4, #16]
10010066:	6167      	str	r7, [r4, #20]
10010068:	61a7      	str	r7, [r4, #24]
1001006a:	305c      	adds	r0, #92	; 0x5c
1001006c:	2208      	movs	r2, #8
1001006e:	0039      	movs	r1, r7
10010070:	f7ff fc3c 	bl	1000f8ec <memset>
10010074:	0020      	movs	r0, r4
10010076:	6367      	str	r7, [r4, #52]	; 0x34
10010078:	63a7      	str	r7, [r4, #56]	; 0x38
1001007a:	64a7      	str	r7, [r4, #72]	; 0x48
1001007c:	64e7      	str	r7, [r4, #76]	; 0x4c
1001007e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010080:	1001225c 	.word	0x1001225c

10010084 <_fwalk_reent>:
10010084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010086:	0004      	movs	r4, r0
10010088:	0007      	movs	r7, r0
1001008a:	2600      	movs	r6, #0
1001008c:	9101      	str	r1, [sp, #4]
1001008e:	3448      	adds	r4, #72	; 0x48
10010090:	2c00      	cmp	r4, #0
10010092:	d016      	beq.n	100100c2 <_fwalk_reent+0x3e>
10010094:	6863      	ldr	r3, [r4, #4]
10010096:	68a5      	ldr	r5, [r4, #8]
10010098:	9300      	str	r3, [sp, #0]
1001009a:	9b00      	ldr	r3, [sp, #0]
1001009c:	3b01      	subs	r3, #1
1001009e:	9300      	str	r3, [sp, #0]
100100a0:	d40d      	bmi.n	100100be <_fwalk_reent+0x3a>
100100a2:	89ab      	ldrh	r3, [r5, #12]
100100a4:	2b01      	cmp	r3, #1
100100a6:	d908      	bls.n	100100ba <_fwalk_reent+0x36>
100100a8:	220e      	movs	r2, #14
100100aa:	5eab      	ldrsh	r3, [r5, r2]
100100ac:	3301      	adds	r3, #1
100100ae:	d004      	beq.n	100100ba <_fwalk_reent+0x36>
100100b0:	0029      	movs	r1, r5
100100b2:	0038      	movs	r0, r7
100100b4:	9b01      	ldr	r3, [sp, #4]
100100b6:	4798      	blx	r3
100100b8:	4306      	orrs	r6, r0
100100ba:	3568      	adds	r5, #104	; 0x68
100100bc:	e7ed      	b.n	1001009a <_fwalk_reent+0x16>
100100be:	6824      	ldr	r4, [r4, #0]
100100c0:	e7e6      	b.n	10010090 <_fwalk_reent+0xc>
100100c2:	0030      	movs	r0, r6
100100c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100100c8 <__swhatbuf_r>:
100100c8:	b570      	push	{r4, r5, r6, lr}
100100ca:	000e      	movs	r6, r1
100100cc:	001d      	movs	r5, r3
100100ce:	230e      	movs	r3, #14
100100d0:	5ec9      	ldrsh	r1, [r1, r3]
100100d2:	b090      	sub	sp, #64	; 0x40
100100d4:	0014      	movs	r4, r2
100100d6:	2900      	cmp	r1, #0
100100d8:	da06      	bge.n	100100e8 <__swhatbuf_r+0x20>
100100da:	2300      	movs	r3, #0
100100dc:	602b      	str	r3, [r5, #0]
100100de:	89b3      	ldrh	r3, [r6, #12]
100100e0:	061b      	lsls	r3, r3, #24
100100e2:	d50f      	bpl.n	10010104 <__swhatbuf_r+0x3c>
100100e4:	2340      	movs	r3, #64	; 0x40
100100e6:	e00f      	b.n	10010108 <__swhatbuf_r+0x40>
100100e8:	aa01      	add	r2, sp, #4
100100ea:	f000 fc85 	bl	100109f8 <_fstat_r>
100100ee:	2800      	cmp	r0, #0
100100f0:	dbf3      	blt.n	100100da <__swhatbuf_r+0x12>
100100f2:	23f0      	movs	r3, #240	; 0xf0
100100f4:	9a02      	ldr	r2, [sp, #8]
100100f6:	021b      	lsls	r3, r3, #8
100100f8:	4013      	ands	r3, r2
100100fa:	4a05      	ldr	r2, [pc, #20]	; (10010110 <__swhatbuf_r+0x48>)
100100fc:	189b      	adds	r3, r3, r2
100100fe:	425a      	negs	r2, r3
10010100:	4153      	adcs	r3, r2
10010102:	602b      	str	r3, [r5, #0]
10010104:	2380      	movs	r3, #128	; 0x80
10010106:	00db      	lsls	r3, r3, #3
10010108:	2000      	movs	r0, #0
1001010a:	6023      	str	r3, [r4, #0]
1001010c:	b010      	add	sp, #64	; 0x40
1001010e:	bd70      	pop	{r4, r5, r6, pc}
10010110:	ffffe000 	.word	0xffffe000

10010114 <__smakebuf_r>:
10010114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010116:	2602      	movs	r6, #2
10010118:	898b      	ldrh	r3, [r1, #12]
1001011a:	0005      	movs	r5, r0
1001011c:	000c      	movs	r4, r1
1001011e:	4233      	tst	r3, r6
10010120:	d110      	bne.n	10010144 <__smakebuf_r+0x30>
10010122:	ab01      	add	r3, sp, #4
10010124:	466a      	mov	r2, sp
10010126:	f7ff ffcf 	bl	100100c8 <__swhatbuf_r>
1001012a:	9900      	ldr	r1, [sp, #0]
1001012c:	0007      	movs	r7, r0
1001012e:	0028      	movs	r0, r5
10010130:	f000 f87e 	bl	10010230 <_malloc_r>
10010134:	2800      	cmp	r0, #0
10010136:	d10c      	bne.n	10010152 <__smakebuf_r+0x3e>
10010138:	220c      	movs	r2, #12
1001013a:	5ea3      	ldrsh	r3, [r4, r2]
1001013c:	059a      	lsls	r2, r3, #22
1001013e:	d423      	bmi.n	10010188 <__smakebuf_r+0x74>
10010140:	4333      	orrs	r3, r6
10010142:	81a3      	strh	r3, [r4, #12]
10010144:	0023      	movs	r3, r4
10010146:	3347      	adds	r3, #71	; 0x47
10010148:	6023      	str	r3, [r4, #0]
1001014a:	6123      	str	r3, [r4, #16]
1001014c:	2301      	movs	r3, #1
1001014e:	6163      	str	r3, [r4, #20]
10010150:	e01a      	b.n	10010188 <__smakebuf_r+0x74>
10010152:	2280      	movs	r2, #128	; 0x80
10010154:	4b0d      	ldr	r3, [pc, #52]	; (1001018c <__smakebuf_r+0x78>)
10010156:	62ab      	str	r3, [r5, #40]	; 0x28
10010158:	89a3      	ldrh	r3, [r4, #12]
1001015a:	6020      	str	r0, [r4, #0]
1001015c:	4313      	orrs	r3, r2
1001015e:	81a3      	strh	r3, [r4, #12]
10010160:	9b00      	ldr	r3, [sp, #0]
10010162:	6120      	str	r0, [r4, #16]
10010164:	6163      	str	r3, [r4, #20]
10010166:	9b01      	ldr	r3, [sp, #4]
10010168:	2b00      	cmp	r3, #0
1001016a:	d00a      	beq.n	10010182 <__smakebuf_r+0x6e>
1001016c:	230e      	movs	r3, #14
1001016e:	5ee1      	ldrsh	r1, [r4, r3]
10010170:	0028      	movs	r0, r5
10010172:	f000 fc53 	bl	10010a1c <_isatty_r>
10010176:	2800      	cmp	r0, #0
10010178:	d003      	beq.n	10010182 <__smakebuf_r+0x6e>
1001017a:	2201      	movs	r2, #1
1001017c:	89a3      	ldrh	r3, [r4, #12]
1001017e:	4313      	orrs	r3, r2
10010180:	81a3      	strh	r3, [r4, #12]
10010182:	89a3      	ldrh	r3, [r4, #12]
10010184:	431f      	orrs	r7, r3
10010186:	81a7      	strh	r7, [r4, #12]
10010188:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001018a:	46c0      	nop			; (mov r8, r8)
1001018c:	1000ff1d 	.word	0x1000ff1d

10010190 <malloc>:
10010190:	b510      	push	{r4, lr}
10010192:	4b03      	ldr	r3, [pc, #12]	; (100101a0 <malloc+0x10>)
10010194:	0001      	movs	r1, r0
10010196:	6818      	ldr	r0, [r3, #0]
10010198:	f000 f84a 	bl	10010230 <_malloc_r>
1001019c:	bd10      	pop	{r4, pc}
1001019e:	46c0      	nop			; (mov r8, r8)
100101a0:	1001237c 	.word	0x1001237c

100101a4 <_free_r>:
100101a4:	b530      	push	{r4, r5, lr}
100101a6:	2900      	cmp	r1, #0
100101a8:	d03e      	beq.n	10010228 <_free_r+0x84>
100101aa:	3904      	subs	r1, #4
100101ac:	680b      	ldr	r3, [r1, #0]
100101ae:	2b00      	cmp	r3, #0
100101b0:	da00      	bge.n	100101b4 <_free_r+0x10>
100101b2:	18c9      	adds	r1, r1, r3
100101b4:	4a1d      	ldr	r2, [pc, #116]	; (1001022c <_free_r+0x88>)
100101b6:	6813      	ldr	r3, [r2, #0]
100101b8:	0014      	movs	r4, r2
100101ba:	2b00      	cmp	r3, #0
100101bc:	d102      	bne.n	100101c4 <_free_r+0x20>
100101be:	604b      	str	r3, [r1, #4]
100101c0:	6011      	str	r1, [r2, #0]
100101c2:	e031      	b.n	10010228 <_free_r+0x84>
100101c4:	428b      	cmp	r3, r1
100101c6:	d90d      	bls.n	100101e4 <_free_r+0x40>
100101c8:	680a      	ldr	r2, [r1, #0]
100101ca:	1888      	adds	r0, r1, r2
100101cc:	4283      	cmp	r3, r0
100101ce:	d103      	bne.n	100101d8 <_free_r+0x34>
100101d0:	6818      	ldr	r0, [r3, #0]
100101d2:	685b      	ldr	r3, [r3, #4]
100101d4:	1882      	adds	r2, r0, r2
100101d6:	600a      	str	r2, [r1, #0]
100101d8:	604b      	str	r3, [r1, #4]
100101da:	6021      	str	r1, [r4, #0]
100101dc:	e024      	b.n	10010228 <_free_r+0x84>
100101de:	428a      	cmp	r2, r1
100101e0:	d803      	bhi.n	100101ea <_free_r+0x46>
100101e2:	0013      	movs	r3, r2
100101e4:	685a      	ldr	r2, [r3, #4]
100101e6:	2a00      	cmp	r2, #0
100101e8:	d1f9      	bne.n	100101de <_free_r+0x3a>
100101ea:	681d      	ldr	r5, [r3, #0]
100101ec:	195c      	adds	r4, r3, r5
100101ee:	428c      	cmp	r4, r1
100101f0:	d10b      	bne.n	1001020a <_free_r+0x66>
100101f2:	6809      	ldr	r1, [r1, #0]
100101f4:	1869      	adds	r1, r5, r1
100101f6:	1858      	adds	r0, r3, r1
100101f8:	6019      	str	r1, [r3, #0]
100101fa:	4282      	cmp	r2, r0
100101fc:	d114      	bne.n	10010228 <_free_r+0x84>
100101fe:	6810      	ldr	r0, [r2, #0]
10010200:	6852      	ldr	r2, [r2, #4]
10010202:	1841      	adds	r1, r0, r1
10010204:	6019      	str	r1, [r3, #0]
10010206:	605a      	str	r2, [r3, #4]
10010208:	e00e      	b.n	10010228 <_free_r+0x84>
1001020a:	428c      	cmp	r4, r1
1001020c:	d902      	bls.n	10010214 <_free_r+0x70>
1001020e:	230c      	movs	r3, #12
10010210:	6003      	str	r3, [r0, #0]
10010212:	e009      	b.n	10010228 <_free_r+0x84>
10010214:	6808      	ldr	r0, [r1, #0]
10010216:	180c      	adds	r4, r1, r0
10010218:	42a2      	cmp	r2, r4
1001021a:	d103      	bne.n	10010224 <_free_r+0x80>
1001021c:	6814      	ldr	r4, [r2, #0]
1001021e:	6852      	ldr	r2, [r2, #4]
10010220:	1820      	adds	r0, r4, r0
10010222:	6008      	str	r0, [r1, #0]
10010224:	604a      	str	r2, [r1, #4]
10010226:	6059      	str	r1, [r3, #4]
10010228:	bd30      	pop	{r4, r5, pc}
1001022a:	46c0      	nop			; (mov r8, r8)
1001022c:	100125f0 	.word	0x100125f0

10010230 <_malloc_r>:
10010230:	2303      	movs	r3, #3
10010232:	b570      	push	{r4, r5, r6, lr}
10010234:	1ccd      	adds	r5, r1, #3
10010236:	439d      	bics	r5, r3
10010238:	3508      	adds	r5, #8
1001023a:	0006      	movs	r6, r0
1001023c:	2d0c      	cmp	r5, #12
1001023e:	d201      	bcs.n	10010244 <_malloc_r+0x14>
10010240:	250c      	movs	r5, #12
10010242:	e005      	b.n	10010250 <_malloc_r+0x20>
10010244:	2d00      	cmp	r5, #0
10010246:	da03      	bge.n	10010250 <_malloc_r+0x20>
10010248:	230c      	movs	r3, #12
1001024a:	2000      	movs	r0, #0
1001024c:	6033      	str	r3, [r6, #0]
1001024e:	e040      	b.n	100102d2 <_malloc_r+0xa2>
10010250:	42a9      	cmp	r1, r5
10010252:	d8f9      	bhi.n	10010248 <_malloc_r+0x18>
10010254:	4b1f      	ldr	r3, [pc, #124]	; (100102d4 <_malloc_r+0xa4>)
10010256:	681c      	ldr	r4, [r3, #0]
10010258:	001a      	movs	r2, r3
1001025a:	0021      	movs	r1, r4
1001025c:	2900      	cmp	r1, #0
1001025e:	d013      	beq.n	10010288 <_malloc_r+0x58>
10010260:	680b      	ldr	r3, [r1, #0]
10010262:	1b5b      	subs	r3, r3, r5
10010264:	d40d      	bmi.n	10010282 <_malloc_r+0x52>
10010266:	2b0b      	cmp	r3, #11
10010268:	d902      	bls.n	10010270 <_malloc_r+0x40>
1001026a:	600b      	str	r3, [r1, #0]
1001026c:	18cc      	adds	r4, r1, r3
1001026e:	e01e      	b.n	100102ae <_malloc_r+0x7e>
10010270:	428c      	cmp	r4, r1
10010272:	d102      	bne.n	1001027a <_malloc_r+0x4a>
10010274:	6863      	ldr	r3, [r4, #4]
10010276:	6013      	str	r3, [r2, #0]
10010278:	e01a      	b.n	100102b0 <_malloc_r+0x80>
1001027a:	684b      	ldr	r3, [r1, #4]
1001027c:	6063      	str	r3, [r4, #4]
1001027e:	000c      	movs	r4, r1
10010280:	e016      	b.n	100102b0 <_malloc_r+0x80>
10010282:	000c      	movs	r4, r1
10010284:	6849      	ldr	r1, [r1, #4]
10010286:	e7e9      	b.n	1001025c <_malloc_r+0x2c>
10010288:	4c13      	ldr	r4, [pc, #76]	; (100102d8 <_malloc_r+0xa8>)
1001028a:	6823      	ldr	r3, [r4, #0]
1001028c:	2b00      	cmp	r3, #0
1001028e:	d103      	bne.n	10010298 <_malloc_r+0x68>
10010290:	0030      	movs	r0, r6
10010292:	f000 fb2d 	bl	100108f0 <_sbrk_r>
10010296:	6020      	str	r0, [r4, #0]
10010298:	0029      	movs	r1, r5
1001029a:	0030      	movs	r0, r6
1001029c:	f000 fb28 	bl	100108f0 <_sbrk_r>
100102a0:	1c43      	adds	r3, r0, #1
100102a2:	d0d1      	beq.n	10010248 <_malloc_r+0x18>
100102a4:	2303      	movs	r3, #3
100102a6:	1cc4      	adds	r4, r0, #3
100102a8:	439c      	bics	r4, r3
100102aa:	42a0      	cmp	r0, r4
100102ac:	d10a      	bne.n	100102c4 <_malloc_r+0x94>
100102ae:	6025      	str	r5, [r4, #0]
100102b0:	0020      	movs	r0, r4
100102b2:	2207      	movs	r2, #7
100102b4:	300b      	adds	r0, #11
100102b6:	1d23      	adds	r3, r4, #4
100102b8:	4390      	bics	r0, r2
100102ba:	1ac3      	subs	r3, r0, r3
100102bc:	d009      	beq.n	100102d2 <_malloc_r+0xa2>
100102be:	425a      	negs	r2, r3
100102c0:	50e2      	str	r2, [r4, r3]
100102c2:	e006      	b.n	100102d2 <_malloc_r+0xa2>
100102c4:	1a21      	subs	r1, r4, r0
100102c6:	0030      	movs	r0, r6
100102c8:	f000 fb12 	bl	100108f0 <_sbrk_r>
100102cc:	1c43      	adds	r3, r0, #1
100102ce:	d1ee      	bne.n	100102ae <_malloc_r+0x7e>
100102d0:	e7ba      	b.n	10010248 <_malloc_r+0x18>
100102d2:	bd70      	pop	{r4, r5, r6, pc}
100102d4:	100125f0 	.word	0x100125f0
100102d8:	100125ec 	.word	0x100125ec

100102dc <__sfputc_r>:
100102dc:	6893      	ldr	r3, [r2, #8]
100102de:	b510      	push	{r4, lr}
100102e0:	3b01      	subs	r3, #1
100102e2:	6093      	str	r3, [r2, #8]
100102e4:	2b00      	cmp	r3, #0
100102e6:	da05      	bge.n	100102f4 <__sfputc_r+0x18>
100102e8:	6994      	ldr	r4, [r2, #24]
100102ea:	42a3      	cmp	r3, r4
100102ec:	db08      	blt.n	10010300 <__sfputc_r+0x24>
100102ee:	b2cb      	uxtb	r3, r1
100102f0:	2b0a      	cmp	r3, #10
100102f2:	d005      	beq.n	10010300 <__sfputc_r+0x24>
100102f4:	6813      	ldr	r3, [r2, #0]
100102f6:	1c58      	adds	r0, r3, #1
100102f8:	6010      	str	r0, [r2, #0]
100102fa:	7019      	strb	r1, [r3, #0]
100102fc:	b2c8      	uxtb	r0, r1
100102fe:	e001      	b.n	10010304 <__sfputc_r+0x28>
10010300:	f7ff fc8c 	bl	1000fc1c <__swbuf_r>
10010304:	bd10      	pop	{r4, pc}

10010306 <__sfputs_r>:
10010306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010308:	0006      	movs	r6, r0
1001030a:	000f      	movs	r7, r1
1001030c:	0014      	movs	r4, r2
1001030e:	18d5      	adds	r5, r2, r3
10010310:	42ac      	cmp	r4, r5
10010312:	d008      	beq.n	10010326 <__sfputs_r+0x20>
10010314:	7821      	ldrb	r1, [r4, #0]
10010316:	003a      	movs	r2, r7
10010318:	0030      	movs	r0, r6
1001031a:	f7ff ffdf 	bl	100102dc <__sfputc_r>
1001031e:	3401      	adds	r4, #1
10010320:	1c43      	adds	r3, r0, #1
10010322:	d1f5      	bne.n	10010310 <__sfputs_r+0xa>
10010324:	e000      	b.n	10010328 <__sfputs_r+0x22>
10010326:	2000      	movs	r0, #0
10010328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001032c <_vfiprintf_r>:
1001032c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001032e:	b09f      	sub	sp, #124	; 0x7c
10010330:	0006      	movs	r6, r0
10010332:	000f      	movs	r7, r1
10010334:	9202      	str	r2, [sp, #8]
10010336:	9305      	str	r3, [sp, #20]
10010338:	2800      	cmp	r0, #0
1001033a:	d004      	beq.n	10010346 <_vfiprintf_r+0x1a>
1001033c:	6983      	ldr	r3, [r0, #24]
1001033e:	2b00      	cmp	r3, #0
10010340:	d101      	bne.n	10010346 <_vfiprintf_r+0x1a>
10010342:	f7ff fe2d 	bl	1000ffa0 <__sinit>
10010346:	4b7f      	ldr	r3, [pc, #508]	; (10010544 <_vfiprintf_r+0x218>)
10010348:	429f      	cmp	r7, r3
1001034a:	d101      	bne.n	10010350 <_vfiprintf_r+0x24>
1001034c:	6877      	ldr	r7, [r6, #4]
1001034e:	e008      	b.n	10010362 <_vfiprintf_r+0x36>
10010350:	4b7d      	ldr	r3, [pc, #500]	; (10010548 <_vfiprintf_r+0x21c>)
10010352:	429f      	cmp	r7, r3
10010354:	d101      	bne.n	1001035a <_vfiprintf_r+0x2e>
10010356:	68b7      	ldr	r7, [r6, #8]
10010358:	e003      	b.n	10010362 <_vfiprintf_r+0x36>
1001035a:	4b7c      	ldr	r3, [pc, #496]	; (1001054c <_vfiprintf_r+0x220>)
1001035c:	429f      	cmp	r7, r3
1001035e:	d100      	bne.n	10010362 <_vfiprintf_r+0x36>
10010360:	68f7      	ldr	r7, [r6, #12]
10010362:	89bb      	ldrh	r3, [r7, #12]
10010364:	071b      	lsls	r3, r3, #28
10010366:	d50a      	bpl.n	1001037e <_vfiprintf_r+0x52>
10010368:	693b      	ldr	r3, [r7, #16]
1001036a:	2b00      	cmp	r3, #0
1001036c:	d007      	beq.n	1001037e <_vfiprintf_r+0x52>
1001036e:	2300      	movs	r3, #0
10010370:	ad06      	add	r5, sp, #24
10010372:	616b      	str	r3, [r5, #20]
10010374:	3320      	adds	r3, #32
10010376:	766b      	strb	r3, [r5, #25]
10010378:	3310      	adds	r3, #16
1001037a:	76ab      	strb	r3, [r5, #26]
1001037c:	e03d      	b.n	100103fa <_vfiprintf_r+0xce>
1001037e:	0039      	movs	r1, r7
10010380:	0030      	movs	r0, r6
10010382:	f7ff fca3 	bl	1000fccc <__swsetup_r>
10010386:	2800      	cmp	r0, #0
10010388:	d0f1      	beq.n	1001036e <_vfiprintf_r+0x42>
1001038a:	2001      	movs	r0, #1
1001038c:	4240      	negs	r0, r0
1001038e:	e0d6      	b.n	1001053e <_vfiprintf_r+0x212>
10010390:	9a05      	ldr	r2, [sp, #20]
10010392:	1d11      	adds	r1, r2, #4
10010394:	6812      	ldr	r2, [r2, #0]
10010396:	9105      	str	r1, [sp, #20]
10010398:	2a00      	cmp	r2, #0
1001039a:	da00      	bge.n	1001039e <_vfiprintf_r+0x72>
1001039c:	e07f      	b.n	1001049e <_vfiprintf_r+0x172>
1001039e:	9209      	str	r2, [sp, #36]	; 0x24
100103a0:	3401      	adds	r4, #1
100103a2:	7823      	ldrb	r3, [r4, #0]
100103a4:	2b2e      	cmp	r3, #46	; 0x2e
100103a6:	d100      	bne.n	100103aa <_vfiprintf_r+0x7e>
100103a8:	e08d      	b.n	100104c6 <_vfiprintf_r+0x19a>
100103aa:	7821      	ldrb	r1, [r4, #0]
100103ac:	2203      	movs	r2, #3
100103ae:	4868      	ldr	r0, [pc, #416]	; (10010550 <_vfiprintf_r+0x224>)
100103b0:	f000 fb5a 	bl	10010a68 <memchr>
100103b4:	2800      	cmp	r0, #0
100103b6:	d007      	beq.n	100103c8 <_vfiprintf_r+0x9c>
100103b8:	4b65      	ldr	r3, [pc, #404]	; (10010550 <_vfiprintf_r+0x224>)
100103ba:	682a      	ldr	r2, [r5, #0]
100103bc:	1ac0      	subs	r0, r0, r3
100103be:	2340      	movs	r3, #64	; 0x40
100103c0:	4083      	lsls	r3, r0
100103c2:	4313      	orrs	r3, r2
100103c4:	602b      	str	r3, [r5, #0]
100103c6:	3401      	adds	r4, #1
100103c8:	7821      	ldrb	r1, [r4, #0]
100103ca:	1c63      	adds	r3, r4, #1
100103cc:	2206      	movs	r2, #6
100103ce:	4861      	ldr	r0, [pc, #388]	; (10010554 <_vfiprintf_r+0x228>)
100103d0:	9302      	str	r3, [sp, #8]
100103d2:	7629      	strb	r1, [r5, #24]
100103d4:	f000 fb48 	bl	10010a68 <memchr>
100103d8:	2800      	cmp	r0, #0
100103da:	d100      	bne.n	100103de <_vfiprintf_r+0xb2>
100103dc:	e09d      	b.n	1001051a <_vfiprintf_r+0x1ee>
100103de:	4b5e      	ldr	r3, [pc, #376]	; (10010558 <_vfiprintf_r+0x22c>)
100103e0:	2b00      	cmp	r3, #0
100103e2:	d000      	beq.n	100103e6 <_vfiprintf_r+0xba>
100103e4:	e090      	b.n	10010508 <_vfiprintf_r+0x1dc>
100103e6:	2207      	movs	r2, #7
100103e8:	9b05      	ldr	r3, [sp, #20]
100103ea:	3307      	adds	r3, #7
100103ec:	4393      	bics	r3, r2
100103ee:	3308      	adds	r3, #8
100103f0:	9305      	str	r3, [sp, #20]
100103f2:	696b      	ldr	r3, [r5, #20]
100103f4:	9a03      	ldr	r2, [sp, #12]
100103f6:	189b      	adds	r3, r3, r2
100103f8:	616b      	str	r3, [r5, #20]
100103fa:	9c02      	ldr	r4, [sp, #8]
100103fc:	7823      	ldrb	r3, [r4, #0]
100103fe:	2b00      	cmp	r3, #0
10010400:	d104      	bne.n	1001040c <_vfiprintf_r+0xe0>
10010402:	9b02      	ldr	r3, [sp, #8]
10010404:	1ae3      	subs	r3, r4, r3
10010406:	9304      	str	r3, [sp, #16]
10010408:	d012      	beq.n	10010430 <_vfiprintf_r+0x104>
1001040a:	e003      	b.n	10010414 <_vfiprintf_r+0xe8>
1001040c:	2b25      	cmp	r3, #37	; 0x25
1001040e:	d0f8      	beq.n	10010402 <_vfiprintf_r+0xd6>
10010410:	3401      	adds	r4, #1
10010412:	e7f3      	b.n	100103fc <_vfiprintf_r+0xd0>
10010414:	9b04      	ldr	r3, [sp, #16]
10010416:	9a02      	ldr	r2, [sp, #8]
10010418:	0039      	movs	r1, r7
1001041a:	0030      	movs	r0, r6
1001041c:	f7ff ff73 	bl	10010306 <__sfputs_r>
10010420:	1c43      	adds	r3, r0, #1
10010422:	d100      	bne.n	10010426 <_vfiprintf_r+0xfa>
10010424:	e086      	b.n	10010534 <_vfiprintf_r+0x208>
10010426:	696a      	ldr	r2, [r5, #20]
10010428:	9b04      	ldr	r3, [sp, #16]
1001042a:	4694      	mov	ip, r2
1001042c:	4463      	add	r3, ip
1001042e:	616b      	str	r3, [r5, #20]
10010430:	7823      	ldrb	r3, [r4, #0]
10010432:	2b00      	cmp	r3, #0
10010434:	d07e      	beq.n	10010534 <_vfiprintf_r+0x208>
10010436:	2201      	movs	r2, #1
10010438:	2300      	movs	r3, #0
1001043a:	4252      	negs	r2, r2
1001043c:	606a      	str	r2, [r5, #4]
1001043e:	a902      	add	r1, sp, #8
10010440:	3254      	adds	r2, #84	; 0x54
10010442:	1852      	adds	r2, r2, r1
10010444:	3401      	adds	r4, #1
10010446:	602b      	str	r3, [r5, #0]
10010448:	60eb      	str	r3, [r5, #12]
1001044a:	60ab      	str	r3, [r5, #8]
1001044c:	7013      	strb	r3, [r2, #0]
1001044e:	65ab      	str	r3, [r5, #88]	; 0x58
10010450:	7821      	ldrb	r1, [r4, #0]
10010452:	2205      	movs	r2, #5
10010454:	4841      	ldr	r0, [pc, #260]	; (1001055c <_vfiprintf_r+0x230>)
10010456:	f000 fb07 	bl	10010a68 <memchr>
1001045a:	2800      	cmp	r0, #0
1001045c:	d008      	beq.n	10010470 <_vfiprintf_r+0x144>
1001045e:	4b3f      	ldr	r3, [pc, #252]	; (1001055c <_vfiprintf_r+0x230>)
10010460:	682a      	ldr	r2, [r5, #0]
10010462:	1ac0      	subs	r0, r0, r3
10010464:	2301      	movs	r3, #1
10010466:	4083      	lsls	r3, r0
10010468:	4313      	orrs	r3, r2
1001046a:	602b      	str	r3, [r5, #0]
1001046c:	3401      	adds	r4, #1
1001046e:	e7ef      	b.n	10010450 <_vfiprintf_r+0x124>
10010470:	682b      	ldr	r3, [r5, #0]
10010472:	06da      	lsls	r2, r3, #27
10010474:	d504      	bpl.n	10010480 <_vfiprintf_r+0x154>
10010476:	2253      	movs	r2, #83	; 0x53
10010478:	2120      	movs	r1, #32
1001047a:	a802      	add	r0, sp, #8
1001047c:	1812      	adds	r2, r2, r0
1001047e:	7011      	strb	r1, [r2, #0]
10010480:	071a      	lsls	r2, r3, #28
10010482:	d504      	bpl.n	1001048e <_vfiprintf_r+0x162>
10010484:	2253      	movs	r2, #83	; 0x53
10010486:	212b      	movs	r1, #43	; 0x2b
10010488:	a802      	add	r0, sp, #8
1001048a:	1812      	adds	r2, r2, r0
1001048c:	7011      	strb	r1, [r2, #0]
1001048e:	7822      	ldrb	r2, [r4, #0]
10010490:	2a2a      	cmp	r2, #42	; 0x2a
10010492:	d100      	bne.n	10010496 <_vfiprintf_r+0x16a>
10010494:	e77c      	b.n	10010390 <_vfiprintf_r+0x64>
10010496:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010498:	2000      	movs	r0, #0
1001049a:	210a      	movs	r1, #10
1001049c:	e005      	b.n	100104aa <_vfiprintf_r+0x17e>
1001049e:	4252      	negs	r2, r2
100104a0:	60ea      	str	r2, [r5, #12]
100104a2:	2202      	movs	r2, #2
100104a4:	4313      	orrs	r3, r2
100104a6:	602b      	str	r3, [r5, #0]
100104a8:	e77a      	b.n	100103a0 <_vfiprintf_r+0x74>
100104aa:	7822      	ldrb	r2, [r4, #0]
100104ac:	3a30      	subs	r2, #48	; 0x30
100104ae:	2a09      	cmp	r2, #9
100104b0:	d804      	bhi.n	100104bc <_vfiprintf_r+0x190>
100104b2:	434b      	muls	r3, r1
100104b4:	3401      	adds	r4, #1
100104b6:	189b      	adds	r3, r3, r2
100104b8:	2001      	movs	r0, #1
100104ba:	e7f6      	b.n	100104aa <_vfiprintf_r+0x17e>
100104bc:	2800      	cmp	r0, #0
100104be:	d100      	bne.n	100104c2 <_vfiprintf_r+0x196>
100104c0:	e76f      	b.n	100103a2 <_vfiprintf_r+0x76>
100104c2:	9309      	str	r3, [sp, #36]	; 0x24
100104c4:	e76d      	b.n	100103a2 <_vfiprintf_r+0x76>
100104c6:	7863      	ldrb	r3, [r4, #1]
100104c8:	2b2a      	cmp	r3, #42	; 0x2a
100104ca:	d10a      	bne.n	100104e2 <_vfiprintf_r+0x1b6>
100104cc:	9b05      	ldr	r3, [sp, #20]
100104ce:	3402      	adds	r4, #2
100104d0:	1d1a      	adds	r2, r3, #4
100104d2:	681b      	ldr	r3, [r3, #0]
100104d4:	9205      	str	r2, [sp, #20]
100104d6:	2b00      	cmp	r3, #0
100104d8:	da01      	bge.n	100104de <_vfiprintf_r+0x1b2>
100104da:	2301      	movs	r3, #1
100104dc:	425b      	negs	r3, r3
100104de:	9307      	str	r3, [sp, #28]
100104e0:	e763      	b.n	100103aa <_vfiprintf_r+0x7e>
100104e2:	2300      	movs	r3, #0
100104e4:	200a      	movs	r0, #10
100104e6:	001a      	movs	r2, r3
100104e8:	3401      	adds	r4, #1
100104ea:	606b      	str	r3, [r5, #4]
100104ec:	7821      	ldrb	r1, [r4, #0]
100104ee:	3930      	subs	r1, #48	; 0x30
100104f0:	2909      	cmp	r1, #9
100104f2:	d804      	bhi.n	100104fe <_vfiprintf_r+0x1d2>
100104f4:	4342      	muls	r2, r0
100104f6:	3401      	adds	r4, #1
100104f8:	1852      	adds	r2, r2, r1
100104fa:	2301      	movs	r3, #1
100104fc:	e7f6      	b.n	100104ec <_vfiprintf_r+0x1c0>
100104fe:	2b00      	cmp	r3, #0
10010500:	d100      	bne.n	10010504 <_vfiprintf_r+0x1d8>
10010502:	e752      	b.n	100103aa <_vfiprintf_r+0x7e>
10010504:	9207      	str	r2, [sp, #28]
10010506:	e750      	b.n	100103aa <_vfiprintf_r+0x7e>
10010508:	ab05      	add	r3, sp, #20
1001050a:	9300      	str	r3, [sp, #0]
1001050c:	003a      	movs	r2, r7
1001050e:	4b14      	ldr	r3, [pc, #80]	; (10010560 <_vfiprintf_r+0x234>)
10010510:	0029      	movs	r1, r5
10010512:	0030      	movs	r0, r6
10010514:	e000      	b.n	10010518 <_vfiprintf_r+0x1ec>
10010516:	bf00      	nop
10010518:	e007      	b.n	1001052a <_vfiprintf_r+0x1fe>
1001051a:	ab05      	add	r3, sp, #20
1001051c:	9300      	str	r3, [sp, #0]
1001051e:	003a      	movs	r2, r7
10010520:	4b0f      	ldr	r3, [pc, #60]	; (10010560 <_vfiprintf_r+0x234>)
10010522:	0029      	movs	r1, r5
10010524:	0030      	movs	r0, r6
10010526:	f000 f88b 	bl	10010640 <_printf_i>
1001052a:	9003      	str	r0, [sp, #12]
1001052c:	9b03      	ldr	r3, [sp, #12]
1001052e:	3301      	adds	r3, #1
10010530:	d000      	beq.n	10010534 <_vfiprintf_r+0x208>
10010532:	e75e      	b.n	100103f2 <_vfiprintf_r+0xc6>
10010534:	89bb      	ldrh	r3, [r7, #12]
10010536:	065b      	lsls	r3, r3, #25
10010538:	d500      	bpl.n	1001053c <_vfiprintf_r+0x210>
1001053a:	e726      	b.n	1001038a <_vfiprintf_r+0x5e>
1001053c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001053e:	b01f      	add	sp, #124	; 0x7c
10010540:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010542:	46c0      	nop			; (mov r8, r8)
10010544:	10012260 	.word	0x10012260
10010548:	10012280 	.word	0x10012280
1001054c:	100122a0 	.word	0x100122a0
10010550:	100122c6 	.word	0x100122c6
10010554:	100122ca 	.word	0x100122ca
10010558:	00000000 	.word	0x00000000
1001055c:	100122c0 	.word	0x100122c0
10010560:	10010307 	.word	0x10010307

10010564 <_printf_common>:
10010564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010566:	0017      	movs	r7, r2
10010568:	9301      	str	r3, [sp, #4]
1001056a:	688a      	ldr	r2, [r1, #8]
1001056c:	690b      	ldr	r3, [r1, #16]
1001056e:	9000      	str	r0, [sp, #0]
10010570:	000c      	movs	r4, r1
10010572:	4293      	cmp	r3, r2
10010574:	da00      	bge.n	10010578 <_printf_common+0x14>
10010576:	0013      	movs	r3, r2
10010578:	0022      	movs	r2, r4
1001057a:	603b      	str	r3, [r7, #0]
1001057c:	3243      	adds	r2, #67	; 0x43
1001057e:	7812      	ldrb	r2, [r2, #0]
10010580:	2a00      	cmp	r2, #0
10010582:	d001      	beq.n	10010588 <_printf_common+0x24>
10010584:	3301      	adds	r3, #1
10010586:	603b      	str	r3, [r7, #0]
10010588:	6823      	ldr	r3, [r4, #0]
1001058a:	069b      	lsls	r3, r3, #26
1001058c:	d502      	bpl.n	10010594 <_printf_common+0x30>
1001058e:	683b      	ldr	r3, [r7, #0]
10010590:	3302      	adds	r3, #2
10010592:	603b      	str	r3, [r7, #0]
10010594:	2506      	movs	r5, #6
10010596:	6823      	ldr	r3, [r4, #0]
10010598:	401d      	ands	r5, r3
1001059a:	d01e      	beq.n	100105da <_printf_common+0x76>
1001059c:	0023      	movs	r3, r4
1001059e:	3343      	adds	r3, #67	; 0x43
100105a0:	781b      	ldrb	r3, [r3, #0]
100105a2:	1e5a      	subs	r2, r3, #1
100105a4:	4193      	sbcs	r3, r2
100105a6:	6822      	ldr	r2, [r4, #0]
100105a8:	0692      	lsls	r2, r2, #26
100105aa:	d51c      	bpl.n	100105e6 <_printf_common+0x82>
100105ac:	2030      	movs	r0, #48	; 0x30
100105ae:	18e1      	adds	r1, r4, r3
100105b0:	3143      	adds	r1, #67	; 0x43
100105b2:	7008      	strb	r0, [r1, #0]
100105b4:	0021      	movs	r1, r4
100105b6:	1c5a      	adds	r2, r3, #1
100105b8:	3145      	adds	r1, #69	; 0x45
100105ba:	7809      	ldrb	r1, [r1, #0]
100105bc:	18a2      	adds	r2, r4, r2
100105be:	3243      	adds	r2, #67	; 0x43
100105c0:	3302      	adds	r3, #2
100105c2:	7011      	strb	r1, [r2, #0]
100105c4:	e00f      	b.n	100105e6 <_printf_common+0x82>
100105c6:	0022      	movs	r2, r4
100105c8:	2301      	movs	r3, #1
100105ca:	3219      	adds	r2, #25
100105cc:	9901      	ldr	r1, [sp, #4]
100105ce:	9800      	ldr	r0, [sp, #0]
100105d0:	9e08      	ldr	r6, [sp, #32]
100105d2:	47b0      	blx	r6
100105d4:	1c43      	adds	r3, r0, #1
100105d6:	d00e      	beq.n	100105f6 <_printf_common+0x92>
100105d8:	3501      	adds	r5, #1
100105da:	68e3      	ldr	r3, [r4, #12]
100105dc:	683a      	ldr	r2, [r7, #0]
100105de:	1a9b      	subs	r3, r3, r2
100105e0:	429d      	cmp	r5, r3
100105e2:	dbf0      	blt.n	100105c6 <_printf_common+0x62>
100105e4:	e7da      	b.n	1001059c <_printf_common+0x38>
100105e6:	0022      	movs	r2, r4
100105e8:	9901      	ldr	r1, [sp, #4]
100105ea:	3243      	adds	r2, #67	; 0x43
100105ec:	9800      	ldr	r0, [sp, #0]
100105ee:	9d08      	ldr	r5, [sp, #32]
100105f0:	47a8      	blx	r5
100105f2:	1c43      	adds	r3, r0, #1
100105f4:	d102      	bne.n	100105fc <_printf_common+0x98>
100105f6:	2001      	movs	r0, #1
100105f8:	4240      	negs	r0, r0
100105fa:	e020      	b.n	1001063e <_printf_common+0xda>
100105fc:	2306      	movs	r3, #6
100105fe:	6820      	ldr	r0, [r4, #0]
10010600:	68e1      	ldr	r1, [r4, #12]
10010602:	683a      	ldr	r2, [r7, #0]
10010604:	4003      	ands	r3, r0
10010606:	2500      	movs	r5, #0
10010608:	2b04      	cmp	r3, #4
1001060a:	d103      	bne.n	10010614 <_printf_common+0xb0>
1001060c:	1a8d      	subs	r5, r1, r2
1001060e:	43eb      	mvns	r3, r5
10010610:	17db      	asrs	r3, r3, #31
10010612:	401d      	ands	r5, r3
10010614:	68a3      	ldr	r3, [r4, #8]
10010616:	6922      	ldr	r2, [r4, #16]
10010618:	4293      	cmp	r3, r2
1001061a:	dd01      	ble.n	10010620 <_printf_common+0xbc>
1001061c:	1a9b      	subs	r3, r3, r2
1001061e:	18ed      	adds	r5, r5, r3
10010620:	2700      	movs	r7, #0
10010622:	42bd      	cmp	r5, r7
10010624:	d00a      	beq.n	1001063c <_printf_common+0xd8>
10010626:	0022      	movs	r2, r4
10010628:	2301      	movs	r3, #1
1001062a:	321a      	adds	r2, #26
1001062c:	9901      	ldr	r1, [sp, #4]
1001062e:	9800      	ldr	r0, [sp, #0]
10010630:	9e08      	ldr	r6, [sp, #32]
10010632:	47b0      	blx	r6
10010634:	1c43      	adds	r3, r0, #1
10010636:	d0de      	beq.n	100105f6 <_printf_common+0x92>
10010638:	3701      	adds	r7, #1
1001063a:	e7f2      	b.n	10010622 <_printf_common+0xbe>
1001063c:	2000      	movs	r0, #0
1001063e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010640 <_printf_i>:
10010640:	b5f0      	push	{r4, r5, r6, r7, lr}
10010642:	b08b      	sub	sp, #44	; 0x2c
10010644:	9206      	str	r2, [sp, #24]
10010646:	000a      	movs	r2, r1
10010648:	3243      	adds	r2, #67	; 0x43
1001064a:	9307      	str	r3, [sp, #28]
1001064c:	9005      	str	r0, [sp, #20]
1001064e:	9204      	str	r2, [sp, #16]
10010650:	7e0a      	ldrb	r2, [r1, #24]
10010652:	000c      	movs	r4, r1
10010654:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010656:	2a6e      	cmp	r2, #110	; 0x6e
10010658:	d100      	bne.n	1001065c <_printf_i+0x1c>
1001065a:	e0ab      	b.n	100107b4 <_printf_i+0x174>
1001065c:	d811      	bhi.n	10010682 <_printf_i+0x42>
1001065e:	2a63      	cmp	r2, #99	; 0x63
10010660:	d022      	beq.n	100106a8 <_printf_i+0x68>
10010662:	d809      	bhi.n	10010678 <_printf_i+0x38>
10010664:	2a00      	cmp	r2, #0
10010666:	d100      	bne.n	1001066a <_printf_i+0x2a>
10010668:	e0b5      	b.n	100107d6 <_printf_i+0x196>
1001066a:	2a58      	cmp	r2, #88	; 0x58
1001066c:	d000      	beq.n	10010670 <_printf_i+0x30>
1001066e:	e0c5      	b.n	100107fc <_printf_i+0x1bc>
10010670:	3145      	adds	r1, #69	; 0x45
10010672:	700a      	strb	r2, [r1, #0]
10010674:	4a81      	ldr	r2, [pc, #516]	; (1001087c <_printf_i+0x23c>)
10010676:	e04f      	b.n	10010718 <_printf_i+0xd8>
10010678:	2a64      	cmp	r2, #100	; 0x64
1001067a:	d01d      	beq.n	100106b8 <_printf_i+0x78>
1001067c:	2a69      	cmp	r2, #105	; 0x69
1001067e:	d01b      	beq.n	100106b8 <_printf_i+0x78>
10010680:	e0bc      	b.n	100107fc <_printf_i+0x1bc>
10010682:	2a73      	cmp	r2, #115	; 0x73
10010684:	d100      	bne.n	10010688 <_printf_i+0x48>
10010686:	e0aa      	b.n	100107de <_printf_i+0x19e>
10010688:	d809      	bhi.n	1001069e <_printf_i+0x5e>
1001068a:	2a6f      	cmp	r2, #111	; 0x6f
1001068c:	d029      	beq.n	100106e2 <_printf_i+0xa2>
1001068e:	2a70      	cmp	r2, #112	; 0x70
10010690:	d000      	beq.n	10010694 <_printf_i+0x54>
10010692:	e0b3      	b.n	100107fc <_printf_i+0x1bc>
10010694:	2220      	movs	r2, #32
10010696:	6809      	ldr	r1, [r1, #0]
10010698:	430a      	orrs	r2, r1
1001069a:	6022      	str	r2, [r4, #0]
1001069c:	e037      	b.n	1001070e <_printf_i+0xce>
1001069e:	2a75      	cmp	r2, #117	; 0x75
100106a0:	d01f      	beq.n	100106e2 <_printf_i+0xa2>
100106a2:	2a78      	cmp	r2, #120	; 0x78
100106a4:	d033      	beq.n	1001070e <_printf_i+0xce>
100106a6:	e0a9      	b.n	100107fc <_printf_i+0x1bc>
100106a8:	000e      	movs	r6, r1
100106aa:	681a      	ldr	r2, [r3, #0]
100106ac:	3642      	adds	r6, #66	; 0x42
100106ae:	1d11      	adds	r1, r2, #4
100106b0:	6019      	str	r1, [r3, #0]
100106b2:	6813      	ldr	r3, [r2, #0]
100106b4:	7033      	strb	r3, [r6, #0]
100106b6:	e0a4      	b.n	10010802 <_printf_i+0x1c2>
100106b8:	6821      	ldr	r1, [r4, #0]
100106ba:	681a      	ldr	r2, [r3, #0]
100106bc:	0608      	lsls	r0, r1, #24
100106be:	d406      	bmi.n	100106ce <_printf_i+0x8e>
100106c0:	0649      	lsls	r1, r1, #25
100106c2:	d504      	bpl.n	100106ce <_printf_i+0x8e>
100106c4:	1d11      	adds	r1, r2, #4
100106c6:	6019      	str	r1, [r3, #0]
100106c8:	2300      	movs	r3, #0
100106ca:	5ed5      	ldrsh	r5, [r2, r3]
100106cc:	e002      	b.n	100106d4 <_printf_i+0x94>
100106ce:	1d11      	adds	r1, r2, #4
100106d0:	6019      	str	r1, [r3, #0]
100106d2:	6815      	ldr	r5, [r2, #0]
100106d4:	2d00      	cmp	r5, #0
100106d6:	da3b      	bge.n	10010750 <_printf_i+0x110>
100106d8:	232d      	movs	r3, #45	; 0x2d
100106da:	9a04      	ldr	r2, [sp, #16]
100106dc:	426d      	negs	r5, r5
100106de:	7013      	strb	r3, [r2, #0]
100106e0:	e036      	b.n	10010750 <_printf_i+0x110>
100106e2:	6821      	ldr	r1, [r4, #0]
100106e4:	681a      	ldr	r2, [r3, #0]
100106e6:	0608      	lsls	r0, r1, #24
100106e8:	d406      	bmi.n	100106f8 <_printf_i+0xb8>
100106ea:	0649      	lsls	r1, r1, #25
100106ec:	d504      	bpl.n	100106f8 <_printf_i+0xb8>
100106ee:	6815      	ldr	r5, [r2, #0]
100106f0:	1d11      	adds	r1, r2, #4
100106f2:	6019      	str	r1, [r3, #0]
100106f4:	b2ad      	uxth	r5, r5
100106f6:	e002      	b.n	100106fe <_printf_i+0xbe>
100106f8:	1d11      	adds	r1, r2, #4
100106fa:	6019      	str	r1, [r3, #0]
100106fc:	6815      	ldr	r5, [r2, #0]
100106fe:	4b5f      	ldr	r3, [pc, #380]	; (1001087c <_printf_i+0x23c>)
10010700:	7e22      	ldrb	r2, [r4, #24]
10010702:	9303      	str	r3, [sp, #12]
10010704:	2708      	movs	r7, #8
10010706:	2a6f      	cmp	r2, #111	; 0x6f
10010708:	d01d      	beq.n	10010746 <_printf_i+0x106>
1001070a:	270a      	movs	r7, #10
1001070c:	e01b      	b.n	10010746 <_printf_i+0x106>
1001070e:	0022      	movs	r2, r4
10010710:	2178      	movs	r1, #120	; 0x78
10010712:	3245      	adds	r2, #69	; 0x45
10010714:	7011      	strb	r1, [r2, #0]
10010716:	4a5a      	ldr	r2, [pc, #360]	; (10010880 <_printf_i+0x240>)
10010718:	6819      	ldr	r1, [r3, #0]
1001071a:	9203      	str	r2, [sp, #12]
1001071c:	1d08      	adds	r0, r1, #4
1001071e:	6822      	ldr	r2, [r4, #0]
10010720:	6018      	str	r0, [r3, #0]
10010722:	680d      	ldr	r5, [r1, #0]
10010724:	0610      	lsls	r0, r2, #24
10010726:	d402      	bmi.n	1001072e <_printf_i+0xee>
10010728:	0650      	lsls	r0, r2, #25
1001072a:	d500      	bpl.n	1001072e <_printf_i+0xee>
1001072c:	b2ad      	uxth	r5, r5
1001072e:	07d3      	lsls	r3, r2, #31
10010730:	d502      	bpl.n	10010738 <_printf_i+0xf8>
10010732:	2320      	movs	r3, #32
10010734:	431a      	orrs	r2, r3
10010736:	6022      	str	r2, [r4, #0]
10010738:	2710      	movs	r7, #16
1001073a:	2d00      	cmp	r5, #0
1001073c:	d103      	bne.n	10010746 <_printf_i+0x106>
1001073e:	2320      	movs	r3, #32
10010740:	6822      	ldr	r2, [r4, #0]
10010742:	439a      	bics	r2, r3
10010744:	6022      	str	r2, [r4, #0]
10010746:	0023      	movs	r3, r4
10010748:	2200      	movs	r2, #0
1001074a:	3343      	adds	r3, #67	; 0x43
1001074c:	701a      	strb	r2, [r3, #0]
1001074e:	e002      	b.n	10010756 <_printf_i+0x116>
10010750:	270a      	movs	r7, #10
10010752:	4b4a      	ldr	r3, [pc, #296]	; (1001087c <_printf_i+0x23c>)
10010754:	9303      	str	r3, [sp, #12]
10010756:	6863      	ldr	r3, [r4, #4]
10010758:	60a3      	str	r3, [r4, #8]
1001075a:	2b00      	cmp	r3, #0
1001075c:	db09      	blt.n	10010772 <_printf_i+0x132>
1001075e:	2204      	movs	r2, #4
10010760:	6821      	ldr	r1, [r4, #0]
10010762:	4391      	bics	r1, r2
10010764:	6021      	str	r1, [r4, #0]
10010766:	2d00      	cmp	r5, #0
10010768:	d105      	bne.n	10010776 <_printf_i+0x136>
1001076a:	9e04      	ldr	r6, [sp, #16]
1001076c:	2b00      	cmp	r3, #0
1001076e:	d011      	beq.n	10010794 <_printf_i+0x154>
10010770:	e07b      	b.n	1001086a <_printf_i+0x22a>
10010772:	2d00      	cmp	r5, #0
10010774:	d079      	beq.n	1001086a <_printf_i+0x22a>
10010776:	9e04      	ldr	r6, [sp, #16]
10010778:	0028      	movs	r0, r5
1001077a:	0039      	movs	r1, r7
1001077c:	f7fe f8ae 	bl	1000e8dc <__aeabi_uidivmod>
10010780:	9b03      	ldr	r3, [sp, #12]
10010782:	3e01      	subs	r6, #1
10010784:	5c5b      	ldrb	r3, [r3, r1]
10010786:	0028      	movs	r0, r5
10010788:	7033      	strb	r3, [r6, #0]
1001078a:	0039      	movs	r1, r7
1001078c:	f7fe f820 	bl	1000e7d0 <__aeabi_uidiv>
10010790:	1e05      	subs	r5, r0, #0
10010792:	d1f1      	bne.n	10010778 <_printf_i+0x138>
10010794:	2f08      	cmp	r7, #8
10010796:	d109      	bne.n	100107ac <_printf_i+0x16c>
10010798:	6823      	ldr	r3, [r4, #0]
1001079a:	07db      	lsls	r3, r3, #31
1001079c:	d506      	bpl.n	100107ac <_printf_i+0x16c>
1001079e:	6863      	ldr	r3, [r4, #4]
100107a0:	6922      	ldr	r2, [r4, #16]
100107a2:	4293      	cmp	r3, r2
100107a4:	dc02      	bgt.n	100107ac <_printf_i+0x16c>
100107a6:	2330      	movs	r3, #48	; 0x30
100107a8:	3e01      	subs	r6, #1
100107aa:	7033      	strb	r3, [r6, #0]
100107ac:	9b04      	ldr	r3, [sp, #16]
100107ae:	1b9b      	subs	r3, r3, r6
100107b0:	6123      	str	r3, [r4, #16]
100107b2:	e02b      	b.n	1001080c <_printf_i+0x1cc>
100107b4:	6809      	ldr	r1, [r1, #0]
100107b6:	681a      	ldr	r2, [r3, #0]
100107b8:	0608      	lsls	r0, r1, #24
100107ba:	d407      	bmi.n	100107cc <_printf_i+0x18c>
100107bc:	0649      	lsls	r1, r1, #25
100107be:	d505      	bpl.n	100107cc <_printf_i+0x18c>
100107c0:	1d11      	adds	r1, r2, #4
100107c2:	6019      	str	r1, [r3, #0]
100107c4:	6813      	ldr	r3, [r2, #0]
100107c6:	8aa2      	ldrh	r2, [r4, #20]
100107c8:	801a      	strh	r2, [r3, #0]
100107ca:	e004      	b.n	100107d6 <_printf_i+0x196>
100107cc:	1d11      	adds	r1, r2, #4
100107ce:	6019      	str	r1, [r3, #0]
100107d0:	6813      	ldr	r3, [r2, #0]
100107d2:	6962      	ldr	r2, [r4, #20]
100107d4:	601a      	str	r2, [r3, #0]
100107d6:	2300      	movs	r3, #0
100107d8:	9e04      	ldr	r6, [sp, #16]
100107da:	6123      	str	r3, [r4, #16]
100107dc:	e016      	b.n	1001080c <_printf_i+0x1cc>
100107de:	681a      	ldr	r2, [r3, #0]
100107e0:	1d11      	adds	r1, r2, #4
100107e2:	6019      	str	r1, [r3, #0]
100107e4:	6816      	ldr	r6, [r2, #0]
100107e6:	2100      	movs	r1, #0
100107e8:	6862      	ldr	r2, [r4, #4]
100107ea:	0030      	movs	r0, r6
100107ec:	f000 f93c 	bl	10010a68 <memchr>
100107f0:	2800      	cmp	r0, #0
100107f2:	d001      	beq.n	100107f8 <_printf_i+0x1b8>
100107f4:	1b80      	subs	r0, r0, r6
100107f6:	6060      	str	r0, [r4, #4]
100107f8:	6863      	ldr	r3, [r4, #4]
100107fa:	e003      	b.n	10010804 <_printf_i+0x1c4>
100107fc:	0026      	movs	r6, r4
100107fe:	3642      	adds	r6, #66	; 0x42
10010800:	7032      	strb	r2, [r6, #0]
10010802:	2301      	movs	r3, #1
10010804:	6123      	str	r3, [r4, #16]
10010806:	2300      	movs	r3, #0
10010808:	9a04      	ldr	r2, [sp, #16]
1001080a:	7013      	strb	r3, [r2, #0]
1001080c:	9b07      	ldr	r3, [sp, #28]
1001080e:	aa09      	add	r2, sp, #36	; 0x24
10010810:	9300      	str	r3, [sp, #0]
10010812:	0021      	movs	r1, r4
10010814:	9b06      	ldr	r3, [sp, #24]
10010816:	9805      	ldr	r0, [sp, #20]
10010818:	f7ff fea4 	bl	10010564 <_printf_common>
1001081c:	1c43      	adds	r3, r0, #1
1001081e:	d102      	bne.n	10010826 <_printf_i+0x1e6>
10010820:	2001      	movs	r0, #1
10010822:	4240      	negs	r0, r0
10010824:	e027      	b.n	10010876 <_printf_i+0x236>
10010826:	6923      	ldr	r3, [r4, #16]
10010828:	0032      	movs	r2, r6
1001082a:	9906      	ldr	r1, [sp, #24]
1001082c:	9805      	ldr	r0, [sp, #20]
1001082e:	9d07      	ldr	r5, [sp, #28]
10010830:	47a8      	blx	r5
10010832:	1c43      	adds	r3, r0, #1
10010834:	d0f4      	beq.n	10010820 <_printf_i+0x1e0>
10010836:	6823      	ldr	r3, [r4, #0]
10010838:	2500      	movs	r5, #0
1001083a:	079b      	lsls	r3, r3, #30
1001083c:	d40f      	bmi.n	1001085e <_printf_i+0x21e>
1001083e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010840:	68e0      	ldr	r0, [r4, #12]
10010842:	4298      	cmp	r0, r3
10010844:	da17      	bge.n	10010876 <_printf_i+0x236>
10010846:	0018      	movs	r0, r3
10010848:	e015      	b.n	10010876 <_printf_i+0x236>
1001084a:	0022      	movs	r2, r4
1001084c:	2301      	movs	r3, #1
1001084e:	3219      	adds	r2, #25
10010850:	9906      	ldr	r1, [sp, #24]
10010852:	9805      	ldr	r0, [sp, #20]
10010854:	9e07      	ldr	r6, [sp, #28]
10010856:	47b0      	blx	r6
10010858:	1c43      	adds	r3, r0, #1
1001085a:	d0e1      	beq.n	10010820 <_printf_i+0x1e0>
1001085c:	3501      	adds	r5, #1
1001085e:	68e3      	ldr	r3, [r4, #12]
10010860:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010862:	1a9b      	subs	r3, r3, r2
10010864:	429d      	cmp	r5, r3
10010866:	dbf0      	blt.n	1001084a <_printf_i+0x20a>
10010868:	e7e9      	b.n	1001083e <_printf_i+0x1fe>
1001086a:	0026      	movs	r6, r4
1001086c:	9b03      	ldr	r3, [sp, #12]
1001086e:	3642      	adds	r6, #66	; 0x42
10010870:	781b      	ldrb	r3, [r3, #0]
10010872:	7033      	strb	r3, [r6, #0]
10010874:	e78e      	b.n	10010794 <_printf_i+0x154>
10010876:	b00b      	add	sp, #44	; 0x2c
10010878:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001087a:	46c0      	nop			; (mov r8, r8)
1001087c:	100122d1 	.word	0x100122d1
10010880:	100122e2 	.word	0x100122e2

10010884 <_putc_r>:
10010884:	b570      	push	{r4, r5, r6, lr}
10010886:	0006      	movs	r6, r0
10010888:	000d      	movs	r5, r1
1001088a:	0014      	movs	r4, r2
1001088c:	2800      	cmp	r0, #0
1001088e:	d004      	beq.n	1001089a <_putc_r+0x16>
10010890:	6983      	ldr	r3, [r0, #24]
10010892:	2b00      	cmp	r3, #0
10010894:	d101      	bne.n	1001089a <_putc_r+0x16>
10010896:	f7ff fb83 	bl	1000ffa0 <__sinit>
1001089a:	4b12      	ldr	r3, [pc, #72]	; (100108e4 <_putc_r+0x60>)
1001089c:	429c      	cmp	r4, r3
1001089e:	d101      	bne.n	100108a4 <_putc_r+0x20>
100108a0:	6874      	ldr	r4, [r6, #4]
100108a2:	e008      	b.n	100108b6 <_putc_r+0x32>
100108a4:	4b10      	ldr	r3, [pc, #64]	; (100108e8 <_putc_r+0x64>)
100108a6:	429c      	cmp	r4, r3
100108a8:	d101      	bne.n	100108ae <_putc_r+0x2a>
100108aa:	68b4      	ldr	r4, [r6, #8]
100108ac:	e003      	b.n	100108b6 <_putc_r+0x32>
100108ae:	4b0f      	ldr	r3, [pc, #60]	; (100108ec <_putc_r+0x68>)
100108b0:	429c      	cmp	r4, r3
100108b2:	d100      	bne.n	100108b6 <_putc_r+0x32>
100108b4:	68f4      	ldr	r4, [r6, #12]
100108b6:	68a3      	ldr	r3, [r4, #8]
100108b8:	3b01      	subs	r3, #1
100108ba:	60a3      	str	r3, [r4, #8]
100108bc:	2b00      	cmp	r3, #0
100108be:	da05      	bge.n	100108cc <_putc_r+0x48>
100108c0:	69a2      	ldr	r2, [r4, #24]
100108c2:	4293      	cmp	r3, r2
100108c4:	db08      	blt.n	100108d8 <_putc_r+0x54>
100108c6:	b2eb      	uxtb	r3, r5
100108c8:	2b0a      	cmp	r3, #10
100108ca:	d005      	beq.n	100108d8 <_putc_r+0x54>
100108cc:	6823      	ldr	r3, [r4, #0]
100108ce:	b2e8      	uxtb	r0, r5
100108d0:	1c5a      	adds	r2, r3, #1
100108d2:	6022      	str	r2, [r4, #0]
100108d4:	701d      	strb	r5, [r3, #0]
100108d6:	e004      	b.n	100108e2 <_putc_r+0x5e>
100108d8:	0022      	movs	r2, r4
100108da:	0029      	movs	r1, r5
100108dc:	0030      	movs	r0, r6
100108de:	f7ff f99d 	bl	1000fc1c <__swbuf_r>
100108e2:	bd70      	pop	{r4, r5, r6, pc}
100108e4:	10012260 	.word	0x10012260
100108e8:	10012280 	.word	0x10012280
100108ec:	100122a0 	.word	0x100122a0

100108f0 <_sbrk_r>:
100108f0:	2300      	movs	r3, #0
100108f2:	b570      	push	{r4, r5, r6, lr}
100108f4:	4c06      	ldr	r4, [pc, #24]	; (10010910 <_sbrk_r+0x20>)
100108f6:	0005      	movs	r5, r0
100108f8:	0008      	movs	r0, r1
100108fa:	6023      	str	r3, [r4, #0]
100108fc:	f7f8 fdda 	bl	100094b4 <_sbrk>
10010900:	1c43      	adds	r3, r0, #1
10010902:	d103      	bne.n	1001090c <_sbrk_r+0x1c>
10010904:	6823      	ldr	r3, [r4, #0]
10010906:	2b00      	cmp	r3, #0
10010908:	d000      	beq.n	1001090c <_sbrk_r+0x1c>
1001090a:	602b      	str	r3, [r5, #0]
1001090c:	bd70      	pop	{r4, r5, r6, pc}
1001090e:	46c0      	nop			; (mov r8, r8)
10010910:	10013a10 	.word	0x10013a10

10010914 <__sread>:
10010914:	b570      	push	{r4, r5, r6, lr}
10010916:	000c      	movs	r4, r1
10010918:	250e      	movs	r5, #14
1001091a:	5f49      	ldrsh	r1, [r1, r5]
1001091c:	f000 f8b0 	bl	10010a80 <_read_r>
10010920:	2800      	cmp	r0, #0
10010922:	db03      	blt.n	1001092c <__sread+0x18>
10010924:	6d63      	ldr	r3, [r4, #84]	; 0x54
10010926:	181b      	adds	r3, r3, r0
10010928:	6563      	str	r3, [r4, #84]	; 0x54
1001092a:	e003      	b.n	10010934 <__sread+0x20>
1001092c:	89a2      	ldrh	r2, [r4, #12]
1001092e:	4b02      	ldr	r3, [pc, #8]	; (10010938 <__sread+0x24>)
10010930:	4013      	ands	r3, r2
10010932:	81a3      	strh	r3, [r4, #12]
10010934:	bd70      	pop	{r4, r5, r6, pc}
10010936:	46c0      	nop			; (mov r8, r8)
10010938:	ffffefff 	.word	0xffffefff

1001093c <__swrite>:
1001093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001093e:	001f      	movs	r7, r3
10010940:	898b      	ldrh	r3, [r1, #12]
10010942:	0005      	movs	r5, r0
10010944:	000c      	movs	r4, r1
10010946:	0016      	movs	r6, r2
10010948:	05db      	lsls	r3, r3, #23
1001094a:	d505      	bpl.n	10010958 <__swrite+0x1c>
1001094c:	230e      	movs	r3, #14
1001094e:	5ec9      	ldrsh	r1, [r1, r3]
10010950:	2200      	movs	r2, #0
10010952:	2302      	movs	r3, #2
10010954:	f000 f874 	bl	10010a40 <_lseek_r>
10010958:	89a2      	ldrh	r2, [r4, #12]
1001095a:	4b05      	ldr	r3, [pc, #20]	; (10010970 <__swrite+0x34>)
1001095c:	0028      	movs	r0, r5
1001095e:	4013      	ands	r3, r2
10010960:	81a3      	strh	r3, [r4, #12]
10010962:	0032      	movs	r2, r6
10010964:	230e      	movs	r3, #14
10010966:	5ee1      	ldrsh	r1, [r4, r3]
10010968:	003b      	movs	r3, r7
1001096a:	f000 f81f 	bl	100109ac <_write_r>
1001096e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010970:	ffffefff 	.word	0xffffefff

10010974 <__sseek>:
10010974:	b570      	push	{r4, r5, r6, lr}
10010976:	000c      	movs	r4, r1
10010978:	250e      	movs	r5, #14
1001097a:	5f49      	ldrsh	r1, [r1, r5]
1001097c:	f000 f860 	bl	10010a40 <_lseek_r>
10010980:	89a3      	ldrh	r3, [r4, #12]
10010982:	1c42      	adds	r2, r0, #1
10010984:	d103      	bne.n	1001098e <__sseek+0x1a>
10010986:	4a05      	ldr	r2, [pc, #20]	; (1001099c <__sseek+0x28>)
10010988:	4013      	ands	r3, r2
1001098a:	81a3      	strh	r3, [r4, #12]
1001098c:	e004      	b.n	10010998 <__sseek+0x24>
1001098e:	2280      	movs	r2, #128	; 0x80
10010990:	0152      	lsls	r2, r2, #5
10010992:	4313      	orrs	r3, r2
10010994:	81a3      	strh	r3, [r4, #12]
10010996:	6560      	str	r0, [r4, #84]	; 0x54
10010998:	bd70      	pop	{r4, r5, r6, pc}
1001099a:	46c0      	nop			; (mov r8, r8)
1001099c:	ffffefff 	.word	0xffffefff

100109a0 <__sclose>:
100109a0:	b510      	push	{r4, lr}
100109a2:	230e      	movs	r3, #14
100109a4:	5ec9      	ldrsh	r1, [r1, r3]
100109a6:	f000 f815 	bl	100109d4 <_close_r>
100109aa:	bd10      	pop	{r4, pc}

100109ac <_write_r>:
100109ac:	b570      	push	{r4, r5, r6, lr}
100109ae:	0005      	movs	r5, r0
100109b0:	0008      	movs	r0, r1
100109b2:	0011      	movs	r1, r2
100109b4:	2200      	movs	r2, #0
100109b6:	4c06      	ldr	r4, [pc, #24]	; (100109d0 <_write_r+0x24>)
100109b8:	6022      	str	r2, [r4, #0]
100109ba:	001a      	movs	r2, r3
100109bc:	f7f8 fd52 	bl	10009464 <_write>
100109c0:	1c43      	adds	r3, r0, #1
100109c2:	d103      	bne.n	100109cc <_write_r+0x20>
100109c4:	6823      	ldr	r3, [r4, #0]
100109c6:	2b00      	cmp	r3, #0
100109c8:	d000      	beq.n	100109cc <_write_r+0x20>
100109ca:	602b      	str	r3, [r5, #0]
100109cc:	bd70      	pop	{r4, r5, r6, pc}
100109ce:	46c0      	nop			; (mov r8, r8)
100109d0:	10013a10 	.word	0x10013a10

100109d4 <_close_r>:
100109d4:	2300      	movs	r3, #0
100109d6:	b570      	push	{r4, r5, r6, lr}
100109d8:	4c06      	ldr	r4, [pc, #24]	; (100109f4 <_close_r+0x20>)
100109da:	0005      	movs	r5, r0
100109dc:	0008      	movs	r0, r1
100109de:	6023      	str	r3, [r4, #0]
100109e0:	f7f8 fd7a 	bl	100094d8 <_close>
100109e4:	1c43      	adds	r3, r0, #1
100109e6:	d103      	bne.n	100109f0 <_close_r+0x1c>
100109e8:	6823      	ldr	r3, [r4, #0]
100109ea:	2b00      	cmp	r3, #0
100109ec:	d000      	beq.n	100109f0 <_close_r+0x1c>
100109ee:	602b      	str	r3, [r5, #0]
100109f0:	bd70      	pop	{r4, r5, r6, pc}
100109f2:	46c0      	nop			; (mov r8, r8)
100109f4:	10013a10 	.word	0x10013a10

100109f8 <_fstat_r>:
100109f8:	2300      	movs	r3, #0
100109fa:	b570      	push	{r4, r5, r6, lr}
100109fc:	4c06      	ldr	r4, [pc, #24]	; (10010a18 <_fstat_r+0x20>)
100109fe:	0005      	movs	r5, r0
10010a00:	0008      	movs	r0, r1
10010a02:	0011      	movs	r1, r2
10010a04:	6023      	str	r3, [r4, #0]
10010a06:	f7f8 fd6b 	bl	100094e0 <_fstat>
10010a0a:	1c43      	adds	r3, r0, #1
10010a0c:	d103      	bne.n	10010a16 <_fstat_r+0x1e>
10010a0e:	6823      	ldr	r3, [r4, #0]
10010a10:	2b00      	cmp	r3, #0
10010a12:	d000      	beq.n	10010a16 <_fstat_r+0x1e>
10010a14:	602b      	str	r3, [r5, #0]
10010a16:	bd70      	pop	{r4, r5, r6, pc}
10010a18:	10013a10 	.word	0x10013a10

10010a1c <_isatty_r>:
10010a1c:	2300      	movs	r3, #0
10010a1e:	b570      	push	{r4, r5, r6, lr}
10010a20:	4c06      	ldr	r4, [pc, #24]	; (10010a3c <_isatty_r+0x20>)
10010a22:	0005      	movs	r5, r0
10010a24:	0008      	movs	r0, r1
10010a26:	6023      	str	r3, [r4, #0]
10010a28:	f7f8 fd60 	bl	100094ec <_isatty>
10010a2c:	1c43      	adds	r3, r0, #1
10010a2e:	d103      	bne.n	10010a38 <_isatty_r+0x1c>
10010a30:	6823      	ldr	r3, [r4, #0]
10010a32:	2b00      	cmp	r3, #0
10010a34:	d000      	beq.n	10010a38 <_isatty_r+0x1c>
10010a36:	602b      	str	r3, [r5, #0]
10010a38:	bd70      	pop	{r4, r5, r6, pc}
10010a3a:	46c0      	nop			; (mov r8, r8)
10010a3c:	10013a10 	.word	0x10013a10

10010a40 <_lseek_r>:
10010a40:	b570      	push	{r4, r5, r6, lr}
10010a42:	0005      	movs	r5, r0
10010a44:	0008      	movs	r0, r1
10010a46:	0011      	movs	r1, r2
10010a48:	2200      	movs	r2, #0
10010a4a:	4c06      	ldr	r4, [pc, #24]	; (10010a64 <_lseek_r+0x24>)
10010a4c:	6022      	str	r2, [r4, #0]
10010a4e:	001a      	movs	r2, r3
10010a50:	f7f8 fd4e 	bl	100094f0 <_lseek>
10010a54:	1c43      	adds	r3, r0, #1
10010a56:	d103      	bne.n	10010a60 <_lseek_r+0x20>
10010a58:	6823      	ldr	r3, [r4, #0]
10010a5a:	2b00      	cmp	r3, #0
10010a5c:	d000      	beq.n	10010a60 <_lseek_r+0x20>
10010a5e:	602b      	str	r3, [r5, #0]
10010a60:	bd70      	pop	{r4, r5, r6, pc}
10010a62:	46c0      	nop			; (mov r8, r8)
10010a64:	10013a10 	.word	0x10013a10

10010a68 <memchr>:
10010a68:	b2c9      	uxtb	r1, r1
10010a6a:	1882      	adds	r2, r0, r2
10010a6c:	4290      	cmp	r0, r2
10010a6e:	d004      	beq.n	10010a7a <memchr+0x12>
10010a70:	7803      	ldrb	r3, [r0, #0]
10010a72:	428b      	cmp	r3, r1
10010a74:	d002      	beq.n	10010a7c <memchr+0x14>
10010a76:	3001      	adds	r0, #1
10010a78:	e7f8      	b.n	10010a6c <memchr+0x4>
10010a7a:	2000      	movs	r0, #0
10010a7c:	4770      	bx	lr
	...

10010a80 <_read_r>:
10010a80:	b570      	push	{r4, r5, r6, lr}
10010a82:	0005      	movs	r5, r0
10010a84:	0008      	movs	r0, r1
10010a86:	0011      	movs	r1, r2
10010a88:	2200      	movs	r2, #0
10010a8a:	4c06      	ldr	r4, [pc, #24]	; (10010aa4 <_read_r+0x24>)
10010a8c:	6022      	str	r2, [r4, #0]
10010a8e:	001a      	movs	r2, r3
10010a90:	f7f8 fcc8 	bl	10009424 <_read>
10010a94:	1c43      	adds	r3, r0, #1
10010a96:	d103      	bne.n	10010aa0 <_read_r+0x20>
10010a98:	6823      	ldr	r3, [r4, #0]
10010a9a:	2b00      	cmp	r3, #0
10010a9c:	d000      	beq.n	10010aa0 <_read_r+0x20>
10010a9e:	602b      	str	r3, [r5, #0]
10010aa0:	bd70      	pop	{r4, r5, r6, pc}
10010aa2:	46c0      	nop			; (mov r8, r8)
10010aa4:	10013a10 	.word	0x10013a10

10010aa8 <__aeabi_lmul>:
10010aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010aaa:	464f      	mov	r7, r9
10010aac:	4646      	mov	r6, r8
10010aae:	b4c0      	push	{r6, r7}
10010ab0:	0416      	lsls	r6, r2, #16
10010ab2:	0c36      	lsrs	r6, r6, #16
10010ab4:	4699      	mov	r9, r3
10010ab6:	0033      	movs	r3, r6
10010ab8:	0405      	lsls	r5, r0, #16
10010aba:	0c2c      	lsrs	r4, r5, #16
10010abc:	0c07      	lsrs	r7, r0, #16
10010abe:	0c15      	lsrs	r5, r2, #16
10010ac0:	4363      	muls	r3, r4
10010ac2:	437e      	muls	r6, r7
10010ac4:	436f      	muls	r7, r5
10010ac6:	4365      	muls	r5, r4
10010ac8:	0c1c      	lsrs	r4, r3, #16
10010aca:	19ad      	adds	r5, r5, r6
10010acc:	1964      	adds	r4, r4, r5
10010ace:	469c      	mov	ip, r3
10010ad0:	42a6      	cmp	r6, r4
10010ad2:	d903      	bls.n	10010adc <__aeabi_lmul+0x34>
10010ad4:	2380      	movs	r3, #128	; 0x80
10010ad6:	025b      	lsls	r3, r3, #9
10010ad8:	4698      	mov	r8, r3
10010ada:	4447      	add	r7, r8
10010adc:	4663      	mov	r3, ip
10010ade:	0c25      	lsrs	r5, r4, #16
10010ae0:	19ef      	adds	r7, r5, r7
10010ae2:	041d      	lsls	r5, r3, #16
10010ae4:	464b      	mov	r3, r9
10010ae6:	434a      	muls	r2, r1
10010ae8:	4343      	muls	r3, r0
10010aea:	0c2d      	lsrs	r5, r5, #16
10010aec:	0424      	lsls	r4, r4, #16
10010aee:	1964      	adds	r4, r4, r5
10010af0:	1899      	adds	r1, r3, r2
10010af2:	19c9      	adds	r1, r1, r7
10010af4:	0020      	movs	r0, r4
10010af6:	bc0c      	pop	{r2, r3}
10010af8:	4690      	mov	r8, r2
10010afa:	4699      	mov	r9, r3
10010afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010afe:	46c0      	nop			; (mov r8, r8)
10010b00:	100087b8 	.word	0x100087b8
10010b04:	100087c6 	.word	0x100087c6
10010b08:	100087d4 	.word	0x100087d4
10010b0c:	100087e2 	.word	0x100087e2
10010b10:	100087f0 	.word	0x100087f0
10010b14:	100087fe 	.word	0x100087fe
10010b18:	1000880c 	.word	0x1000880c
10010b1c:	1000881c 	.word	0x1000881c
10010b20:	1000882c 	.word	0x1000882c
10010b24:	1000883c 	.word	0x1000883c
10010b28:	1000884c 	.word	0x1000884c
10010b2c:	1000885c 	.word	0x1000885c
10010b30:	1000886c 	.word	0x1000886c
10010b34:	1000887c 	.word	0x1000887c
10010b38:	1000888c 	.word	0x1000888c
10010b3c:	1000889c 	.word	0x1000889c
10010b40:	100088ac 	.word	0x100088ac
10010b44:	100088bc 	.word	0x100088bc
10010b48:	100088cc 	.word	0x100088cc
10010b4c:	100088dc 	.word	0x100088dc
10010b50:	100088ec 	.word	0x100088ec
10010b54:	100088fc 	.word	0x100088fc
10010b58:	1000890c 	.word	0x1000890c
10010b5c:	1000891c 	.word	0x1000891c
10010b60:	1000892c 	.word	0x1000892c
10010b64:	1000893c 	.word	0x1000893c
10010b68:	1000894c 	.word	0x1000894c
10010b6c:	1000895c 	.word	0x1000895c
10010b70:	1000896a 	.word	0x1000896a
10010b74:	10008978 	.word	0x10008978
10010b78:	10008986 	.word	0x10008986
10010b7c:	10008994 	.word	0x10008994
10010b80:	100089a2 	.word	0x100089a2
10010b84:	100089b0 	.word	0x100089b0
10010b88:	100089be 	.word	0x100089be
10010b8c:	100089cc 	.word	0x100089cc
10010b90:	100089dc 	.word	0x100089dc
10010b94:	100089ec 	.word	0x100089ec
10010b98:	100089fc 	.word	0x100089fc
10010b9c:	10008a0c 	.word	0x10008a0c
10010ba0:	10008a1c 	.word	0x10008a1c
10010ba4:	10008a2c 	.word	0x10008a2c
10010ba8:	10008a3c 	.word	0x10008a3c
10010bac:	10008a4c 	.word	0x10008a4c
10010bb0:	10008a5c 	.word	0x10008a5c
10010bb4:	10008a6c 	.word	0x10008a6c
10010bb8:	10008a7c 	.word	0x10008a7c
10010bbc:	10008a8c 	.word	0x10008a8c
10010bc0:	10008a9c 	.word	0x10008a9c
10010bc4:	10008aac 	.word	0x10008aac
10010bc8:	10008abc 	.word	0x10008abc
10010bcc:	10008acc 	.word	0x10008acc
10010bd0:	10008ada 	.word	0x10008ada
10010bd4:	10008ae8 	.word	0x10008ae8
10010bd8:	10008b28 	.word	0x10008b28
10010bdc:	10008b50 	.word	0x10008b50
10010be0:	10008b78 	.word	0x10008b78
10010be4:	10008ba0 	.word	0x10008ba0
10010be8:	10008de0 	.word	0x10008de0
10010bec:	10008bd0 	.word	0x10008bd0
10010bf0:	10008be8 	.word	0x10008be8
10010bf4:	10008c60 	.word	0x10008c60
10010bf8:	10008c78 	.word	0x10008c78
10010bfc:	10008c00 	.word	0x10008c00
10010c00:	10008c18 	.word	0x10008c18
10010c04:	10008c30 	.word	0x10008c30
10010c08:	10008c48 	.word	0x10008c48
10010c0c:	10008c90 	.word	0x10008c90
10010c10:	10008f54 	.word	0x10008f54
10010c14:	10008f54 	.word	0x10008f54
10010c18:	10008f54 	.word	0x10008f54
10010c1c:	10008f54 	.word	0x10008f54
10010c20:	10008f54 	.word	0x10008f54
10010c24:	10008f54 	.word	0x10008f54
10010c28:	10008f54 	.word	0x10008f54
10010c2c:	10008f54 	.word	0x10008f54
10010c30:	10008d38 	.word	0x10008d38
10010c34:	10008d50 	.word	0x10008d50
10010c38:	10008d68 	.word	0x10008d68
10010c3c:	10008df6 	.word	0x10008df6
10010c40:	10008cc0 	.word	0x10008cc0
10010c44:	10008f54 	.word	0x10008f54
10010c48:	10008f54 	.word	0x10008f54
10010c4c:	10008f54 	.word	0x10008f54
10010c50:	10008f54 	.word	0x10008f54
10010c54:	10008f54 	.word	0x10008f54
10010c58:	10008f54 	.word	0x10008f54
10010c5c:	10008d80 	.word	0x10008d80
10010c60:	10008d98 	.word	0x10008d98
10010c64:	10008db0 	.word	0x10008db0
10010c68:	10008dc8 	.word	0x10008dc8
10010c6c:	10008f54 	.word	0x10008f54
10010c70:	10008f0c 	.word	0x10008f0c
10010c74:	10008f24 	.word	0x10008f24
10010c78:	10008f54 	.word	0x10008f54
10010c7c:	10008f54 	.word	0x10008f54
10010c80:	10008e22 	.word	0x10008e22
10010c84:	10008e38 	.word	0x10008e38
10010c88:	10008e4e 	.word	0x10008e4e
10010c8c:	10008e64 	.word	0x10008e64
10010c90:	10008f54 	.word	0x10008f54
10010c94:	10008f54 	.word	0x10008f54
10010c98:	10008f54 	.word	0x10008f54
10010c9c:	10008f54 	.word	0x10008f54
10010ca0:	10008f54 	.word	0x10008f54
10010ca4:	10008f54 	.word	0x10008f54
10010ca8:	10008f54 	.word	0x10008f54
10010cac:	10008f54 	.word	0x10008f54
10010cb0:	10008b14 	.word	0x10008b14
10010cb4:	10008b3c 	.word	0x10008b3c
10010cb8:	10008b64 	.word	0x10008b64
10010cbc:	10008b8c 	.word	0x10008b8c
10010cc0:	10008bb8 	.word	0x10008bb8
10010cc4:	10008ca8 	.word	0x10008ca8
10010cc8:	10008cd8 	.word	0x10008cd8
10010ccc:	10008cf0 	.word	0x10008cf0
10010cd0:	10008d08 	.word	0x10008d08
10010cd4:	10008d20 	.word	0x10008d20
10010cd8:	10008e0c 	.word	0x10008e0c
10010cdc:	10008e7a 	.word	0x10008e7a
10010ce0:	10008ef4 	.word	0x10008ef4
10010ce4:	10008f3c 	.word	0x10008f3c
10010ce8:	0000000d 	.word	0x0000000d
10010cec:	6b6e696c 	.word	0x6b6e696c
10010cf0:	736f6c20 	.word	0x736f6c20
10010cf4:	65732073 	.word	0x65732073
10010cf8:	63697672 	.word	0x63697672
10010cfc:	69642065 	.word	0x69642065
10010d00:	766f6373 	.word	0x766f6373
10010d04:	64657265 	.word	0x64657265
10010d08:	00000000 	.word	0x00000000
10010d0c:	656d6d49 	.word	0x656d6d49
10010d10:	74616964 	.word	0x74616964
10010d14:	6c412065 	.word	0x6c412065
10010d18:	20747265 	.word	0x20747265
10010d1c:	76726573 	.word	0x76726573
10010d20:	20656369 	.word	0x20656369
10010d24:	63736964 	.word	0x63736964
10010d28:	7265766f 	.word	0x7265766f
10010d2c:	00006465 	.word	0x00006465
10010d30:	70207854 	.word	0x70207854
10010d34:	7265776f 	.word	0x7265776f
10010d38:	72657320 	.word	0x72657320
10010d3c:	65636976 	.word	0x65636976
10010d40:	73696420 	.word	0x73696420
10010d44:	65766f63 	.word	0x65766f63
10010d48:	00646572 	.word	0x00646572
10010d4c:	63736964 	.word	0x63736964
10010d50:	7265766f 	.word	0x7265766f
10010d54:	6d6f6320 	.word	0x6d6f6320
10010d58:	74656c70 	.word	0x74656c70
10010d5c:	706f2065 	.word	0x706f2065
10010d60:	74617265 	.word	0x74617265
10010d64:	206e6f69 	.word	0x206e6f69
10010d68:	61206425 	.word	0x61206425
10010d6c:	2520646e 	.word	0x2520646e
10010d70:	00000064 	.word	0x00000064
10010d74:	43207854 	.word	0x43207854
10010d78:	61726168 	.word	0x61726168
10010d7c:	72657463 	.word	0x72657463
10010d80:	69747369 	.word	0x69747369
10010d84:	69442063 	.word	0x69442063
10010d88:	766f6373 	.word	0x766f6373
10010d8c:	20797265 	.word	0x20797265
10010d90:	72617453 	.word	0x72617453
10010d94:	00646574 	.word	0x00646574
10010d98:	43207854 	.word	0x43207854
10010d9c:	61726168 	.word	0x61726168
10010da0:	72657463 	.word	0x72657463
10010da4:	69747369 	.word	0x69747369
10010da8:	69442063 	.word	0x69442063
10010dac:	766f6373 	.word	0x766f6373
10010db0:	20797265 	.word	0x20797265
10010db4:	6c696146 	.word	0x6c696146
10010db8:	00006465 	.word	0x00006465
10010dbc:	50207854 	.word	0x50207854
10010dc0:	7265776f 	.word	0x7265776f
10010dc4:	72655320 	.word	0x72655320
10010dc8:	65636976 	.word	0x65636976
10010dcc:	746f6e20 	.word	0x746f6e20
10010dd0:	756f4620 	.word	0x756f4620
10010dd4:	0000646e 	.word	0x0000646e
10010dd8:	6b6e694c 	.word	0x6b6e694c
10010ddc:	736f4c20 	.word	0x736f4c20
10010de0:	68432073 	.word	0x68432073
10010de4:	63617261 	.word	0x63617261
10010de8:	69726574 	.word	0x69726574
10010dec:	63697473 	.word	0x63697473
10010df0:	73694420 	.word	0x73694420
10010df4:	65766f63 	.word	0x65766f63
10010df8:	53207972 	.word	0x53207972
10010dfc:	74726174 	.word	0x74726174
10010e00:	00006465 	.word	0x00006465
10010e04:	6b6e694c 	.word	0x6b6e694c
10010e08:	736f4c20 	.word	0x736f4c20
10010e0c:	68432073 	.word	0x68432073
10010e10:	63617261 	.word	0x63617261
10010e14:	69726574 	.word	0x69726574
10010e18:	63697473 	.word	0x63697473
10010e1c:	73694420 	.word	0x73694420
10010e20:	65766f63 	.word	0x65766f63
10010e24:	46207972 	.word	0x46207972
10010e28:	656c6961 	.word	0x656c6961
10010e2c:	00000064 	.word	0x00000064
10010e30:	6b6e694c 	.word	0x6b6e694c
10010e34:	736f4c20 	.word	0x736f4c20
10010e38:	65532073 	.word	0x65532073
10010e3c:	63697672 	.word	0x63697672
10010e40:	6f6e2065 	.word	0x6f6e2065
10010e44:	76412074 	.word	0x76412074
10010e48:	616c6961 	.word	0x616c6961
10010e4c:	00656c62 	.word	0x00656c62
10010e50:	656d6d49 	.word	0x656d6d49
10010e54:	74616964 	.word	0x74616964
10010e58:	68432065 	.word	0x68432065
10010e5c:	63617261 	.word	0x63617261
10010e60:	69726574 	.word	0x69726574
10010e64:	63697473 	.word	0x63697473
10010e68:	73694420 	.word	0x73694420
10010e6c:	65766f63 	.word	0x65766f63
10010e70:	53207972 	.word	0x53207972
10010e74:	74726174 	.word	0x74726174
10010e78:	00006465 	.word	0x00006465
10010e7c:	656d6d49 	.word	0x656d6d49
10010e80:	74616964 	.word	0x74616964
10010e84:	68432065 	.word	0x68432065
10010e88:	63617261 	.word	0x63617261
10010e8c:	69726574 	.word	0x69726574
10010e90:	63697473 	.word	0x63697473
10010e94:	73694420 	.word	0x73694420
10010e98:	65766f63 	.word	0x65766f63
10010e9c:	46207972 	.word	0x46207972
10010ea0:	656c6961 	.word	0x656c6961
10010ea4:	00000064 	.word	0x00000064
10010ea8:	656d6d49 	.word	0x656d6d49
10010eac:	74616964 	.word	0x74616964
10010eb0:	6c412065 	.word	0x6c412065
10010eb4:	20747265 	.word	0x20747265
10010eb8:	76726553 	.word	0x76726553
10010ebc:	20656369 	.word	0x20656369
10010ec0:	20746f6e 	.word	0x20746f6e
10010ec4:	69617641 	.word	0x69617641
10010ec8:	6c62616c 	.word	0x6c62616c
10010ecc:	00000065 	.word	0x00000065
10010ed0:	584f5250 	.word	0x584f5250
10010ed4:	54494d49 	.word	0x54494d49
10010ed8:	52502059 	.word	0x52502059
10010edc:	4c49464f 	.word	0x4c49464f
10010ee0:	4f4e2045 	.word	0x4f4e2045
10010ee4:	55532054 	.word	0x55532054
10010ee8:	524f5050 	.word	0x524f5050
10010eec:	00444554 	.word	0x00444554
10010ef0:	54544147 	.word	0x54544147
10010ef4:	61686320 	.word	0x61686320
10010ef8:	74636172 	.word	0x74636172
10010efc:	73697265 	.word	0x73697265
10010f00:	20636974 	.word	0x20636974
10010f04:	63736964 	.word	0x63736964
10010f08:	7265766f 	.word	0x7265766f
10010f0c:	6f632079 	.word	0x6f632079
10010f10:	656c706d 	.word	0x656c706d
10010f14:	00646574 	.word	0x00646574
10010f18:	6b6e694c 	.word	0x6b6e694c
10010f1c:	736f4c20 	.word	0x736f4c20
10010f20:	72772073 	.word	0x72772073
10010f24:	20657469 	.word	0x20657469
10010f28:	72616863 	.word	0x72616863
10010f2c:	65746361 	.word	0x65746361
10010f30:	74736972 	.word	0x74736972
10010f34:	20736369 	.word	0x20736369
10010f38:	6c696166 	.word	0x6c696166
10010f3c:	00006465 	.word	0x00006465
10010f40:	72616843 	.word	0x72616843
10010f44:	65746361 	.word	0x65746361
10010f48:	74736972 	.word	0x74736972
10010f4c:	52206369 	.word	0x52206369
10010f50:	20646165 	.word	0x20646165
10010f54:	75716552 	.word	0x75716552
10010f58:	20747365 	.word	0x20747365
10010f5c:	6c696166 	.word	0x6c696166
10010f60:	00006465 	.word	0x00006465
10010f64:	72617453 	.word	0x72617453
10010f68:	676e6974 	.word	0x676e6974
10010f6c:	6d697420 	.word	0x6d697420
10010f70:	00007265 	.word	0x00007265
10010f74:	68676948 	.word	0x68676948
10010f78:	656c4120 	.word	0x656c4120
10010f7c:	52207472 	.word	0x52207472
10010f80:	20495353 	.word	0x20495353
10010f84:	676e6172 	.word	0x676e6172
10010f88:	25203a65 	.word	0x25203a65
10010f8c:	6d426464 	.word	0x6d426464
10010f90:	646e6120 	.word	0x646e6120
10010f94:	6f626120 	.word	0x6f626120
10010f98:	00006576 	.word	0x00006576
10010f9c:	646c694d 	.word	0x646c694d
10010fa0:	656c4120 	.word	0x656c4120
10010fa4:	52207472 	.word	0x52207472
10010fa8:	20495353 	.word	0x20495353
10010fac:	676e6172 	.word	0x676e6172
10010fb0:	25203a65 	.word	0x25203a65
10010fb4:	6d426464 	.word	0x6d426464
10010fb8:	206f7420 	.word	0x206f7420
10010fbc:	42646425 	.word	0x42646425
10010fc0:	0000006d 	.word	0x0000006d
10010fc4:	41206f4e 	.word	0x41206f4e
10010fc8:	7472656c 	.word	0x7472656c
10010fcc:	53535220 	.word	0x53535220
10010fd0:	61722049 	.word	0x61722049
10010fd4:	3a65676e 	.word	0x3a65676e
10010fd8:	25202020 	.word	0x25202020
10010fdc:	6d426464 	.word	0x6d426464
10010fe0:	646e6120 	.word	0x646e6120
10010fe4:	6c656220 	.word	0x6c656220
10010fe8:	0000776f 	.word	0x0000776f
10010fec:	20505850 	.word	0x20505850
10010ff0:	6e6e6f43 	.word	0x6e6e6f43
10010ff4:	20746365 	.word	0x20746365
10010ff8:	75716572 	.word	0x75716572
10010ffc:	20747365 	.word	0x20747365
10011000:	746e6573 	.word	0x746e6573
10011004:	00000000 	.word	0x00000000
10011008:	20505850 	.word	0x20505850
1001100c:	6e6e6f43 	.word	0x6e6e6f43
10011010:	20746365 	.word	0x20746365
10011014:	75716572 	.word	0x75716572
10011018:	20747365 	.word	0x20747365
1001101c:	646e6573 	.word	0x646e6573
10011020:	69616620 	.word	0x69616620
10011024:	0064656c 	.word	0x0064656c
10011028:	6f666e49 	.word	0x6f666e49
1001102c:	6544203a 	.word	0x6544203a
10011030:	65636976 	.word	0x65636976
10011034:	756f6620 	.word	0x756f6620
10011038:	6120646e 	.word	0x6120646e
1001103c:	65726464 	.word	0x65726464
10011040:	5b207373 	.word	0x5b207373
10011044:	205d6425 	.word	0x205d6425
10011048:	25783020 	.word	0x25783020
1001104c:	25583230 	.word	0x25583230
10011050:	25583230 	.word	0x25583230
10011054:	25583230 	.word	0x25583230
10011058:	25583230 	.word	0x25583230
1001105c:	25583230 	.word	0x25583230
10011060:	20583230 	.word	0x20583230
10011064:	00000000 	.word	0x00000000
10011068:	502d2d2d 	.word	0x502d2d2d
1001106c:	00005058 	.word	0x00005058
10011070:	656c6553 	.word	0x656c6553
10011074:	49207463 	.word	0x49207463
10011078:	7865646e 	.word	0x7865646e
1001107c:	6d756e20 	.word	0x6d756e20
10011080:	20726562 	.word	0x20726562
10011084:	43206f74 	.word	0x43206f74
10011088:	656e6e6f 	.word	0x656e6e6f
1001108c:	6f207463 	.word	0x6f207463
10011090:	735b2072 	.word	0x735b2072
10011094:	6f74205d 	.word	0x6f74205d
10011098:	61637320 	.word	0x61637320
1001109c:	0000006e 	.word	0x0000006e
100110a0:	656c6553 	.word	0x656c6553
100110a4:	5b207463 	.word	0x5b207463
100110a8:	74205d73 	.word	0x74205d73
100110ac:	6373206f 	.word	0x6373206f
100110b0:	61206e61 	.word	0x61206e61
100110b4:	6e696167 	.word	0x6e696167
100110b8:	00000000 	.word	0x00000000
100110bc:	786f7250 	.word	0x786f7250
100110c0:	74696d69 	.word	0x74696d69
100110c4:	72502079 	.word	0x72502079
100110c8:	6c69666f 	.word	0x6c69666f
100110cc:	75732065 	.word	0x75732065
100110d0:	726f7070 	.word	0x726f7070
100110d4:	20646574 	.word	0x20646574
100110d8:	69766564 	.word	0x69766564
100110dc:	6e206563 	.word	0x6e206563
100110e0:	6620746f 	.word	0x6620746f
100110e4:	646e756f 	.word	0x646e756f
100110e8:	00000020 	.word	0x00000020
100110ec:	69726550 	.word	0x69726550
100110f0:	72656870 	.word	0x72656870
100110f4:	69206c61 	.word	0x69206c61
100110f8:	6c612073 	.word	0x6c612073
100110fc:	64616572 	.word	0x64616572
10011100:	64412079 	.word	0x64412079
10011104:	74726576 	.word	0x74726576
10011108:	6e697369 	.word	0x6e697369
1001110c:	53202e67 	.word	0x53202e67
10011110:	206e6163 	.word	0x206e6163
10011114:	20746f6e 	.word	0x20746f6e
10011118:	6d726570 	.word	0x6d726570
1001111c:	65747469 	.word	0x65747469
10011120:	00000064 	.word	0x00000064
10011124:	656c6553 	.word	0x656c6553
10011128:	5b207463 	.word	0x5b207463
1001112c:	74205d72 	.word	0x74205d72
10011130:	6552206f 	.word	0x6552206f
10011134:	6e6e6f63 	.word	0x6e6e6f63
10011138:	20746365 	.word	0x20746365
1001113c:	5b20726f 	.word	0x5b20726f
10011140:	53205d73 	.word	0x53205d73
10011144:	006e6163 	.word	0x006e6163
10011148:	20505850 	.word	0x20505850
1001114c:	432d6552 	.word	0x432d6552
10011150:	656e6e6f 	.word	0x656e6e6f
10011154:	72207463 	.word	0x72207463
10011158:	65757165 	.word	0x65757165
1001115c:	73207473 	.word	0x73207473
10011160:	00746e65 	.word	0x00746e65
10011164:	20505850 	.word	0x20505850
10011168:	432d6552 	.word	0x432d6552
1001116c:	656e6e6f 	.word	0x656e6e6f
10011170:	72207463 	.word	0x72207463
10011174:	65757165 	.word	0x65757165
10011178:	73207473 	.word	0x73207473
1001117c:	20646e65 	.word	0x20646e65
10011180:	6c696166 	.word	0x6c696166
10011184:	00006465 	.word	0x00006465
10011188:	69726550 	.word	0x69726550
1001118c:	72656870 	.word	0x72656870
10011190:	69206c61 	.word	0x69206c61
10011194:	6c612073 	.word	0x6c612073
10011198:	64616572 	.word	0x64616572
1001119c:	64412079 	.word	0x64412079
100111a0:	74726576 	.word	0x74726576
100111a4:	6e697369 	.word	0x6e697369
100111a8:	63532c67 	.word	0x63532c67
100111ac:	6e206e61 	.word	0x6e206e61
100111b0:	7020746f 	.word	0x7020746f
100111b4:	696d7265 	.word	0x696d7265
100111b8:	64657474 	.word	0x64657474
100111bc:	00000000 	.word	0x00000000
100111c0:	54544147 	.word	0x54544147
100111c4:	73694420 	.word	0x73694420
100111c8:	65766f63 	.word	0x65766f63
100111cc:	72207972 	.word	0x72207972
100111d0:	65757165 	.word	0x65757165
100111d4:	73207473 	.word	0x73207473
100111d8:	74726174 	.word	0x74726174
100111dc:	00206465 	.word	0x00206465
100111e0:	54544147 	.word	0x54544147
100111e4:	73694420 	.word	0x73694420
100111e8:	65766f63 	.word	0x65766f63
100111ec:	72207972 	.word	0x72207972
100111f0:	65757165 	.word	0x65757165
100111f4:	66207473 	.word	0x66207473
100111f8:	656c6961 	.word	0x656c6961
100111fc:	00000064 	.word	0x00000064
10011200:	100096d6 	.word	0x100096d6
10011204:	100096e8 	.word	0x100096e8
10011208:	100096be 	.word	0x100096be
1001120c:	100096be 	.word	0x100096be
10011210:	100096be 	.word	0x100096be
10011214:	100096d6 	.word	0x100096d6
10011218:	100096be 	.word	0x100096be
1001121c:	100096be 	.word	0x100096be
10011220:	1000a412 	.word	0x1000a412
10011224:	1000a486 	.word	0x1000a486
10011228:	1000a3fa 	.word	0x1000a3fa
1001122c:	1000a48c 	.word	0x1000a48c
10011230:	1000a400 	.word	0x1000a400
10011234:	1000a406 	.word	0x1000a406
10011238:	1000a40c 	.word	0x1000a40c
1001123c:	1000a928 	.word	0x1000a928
10011240:	1000a928 	.word	0x1000a928
10011244:	1000a928 	.word	0x1000a928
10011248:	1000a928 	.word	0x1000a928
1001124c:	1000a928 	.word	0x1000a928
10011250:	1000a928 	.word	0x1000a928
10011254:	1000a928 	.word	0x1000a928
10011258:	1000a928 	.word	0x1000a928
1001125c:	1000a928 	.word	0x1000a928
10011260:	1000a928 	.word	0x1000a928
10011264:	1000a928 	.word	0x1000a928
10011268:	1000a928 	.word	0x1000a928
1001126c:	1000a928 	.word	0x1000a928
10011270:	1000a928 	.word	0x1000a928
10011274:	1000a928 	.word	0x1000a928
10011278:	1000a928 	.word	0x1000a928
1001127c:	1000a928 	.word	0x1000a928
10011280:	1000a928 	.word	0x1000a928
10011284:	1000a928 	.word	0x1000a928
10011288:	1000a946 	.word	0x1000a946
1001128c:	1000a946 	.word	0x1000a946
10011290:	1000a946 	.word	0x1000a946
10011294:	1000a946 	.word	0x1000a946
10011298:	1000a946 	.word	0x1000a946
1001129c:	1000a946 	.word	0x1000a946
100112a0:	1000a946 	.word	0x1000a946
100112a4:	1000a946 	.word	0x1000a946
100112a8:	1000a946 	.word	0x1000a946
100112ac:	1000a946 	.word	0x1000a946
100112b0:	1000a968 	.word	0x1000a968
100112b4:	1000a968 	.word	0x1000a968
100112b8:	1000a968 	.word	0x1000a968
100112bc:	1000a968 	.word	0x1000a968
100112c0:	1000a968 	.word	0x1000a968
100112c4:	1000a968 	.word	0x1000a968
100112c8:	1000a968 	.word	0x1000a968
100112cc:	1000a968 	.word	0x1000a968
100112d0:	1000a968 	.word	0x1000a968
100112d4:	1000a968 	.word	0x1000a968
100112d8:	1000a998 	.word	0x1000a998
100112dc:	1000a998 	.word	0x1000a998
100112e0:	1000a998 	.word	0x1000a998
100112e4:	1000a998 	.word	0x1000a998
100112e8:	1000a998 	.word	0x1000a998
100112ec:	1000a998 	.word	0x1000a998
100112f0:	1000a9b2 	.word	0x1000a9b2
100112f4:	1000a9b2 	.word	0x1000a9b2
100112f8:	1000a9b2 	.word	0x1000a9b2
100112fc:	1000a9b2 	.word	0x1000a9b2
10011300:	1000a9b2 	.word	0x1000a9b2
10011304:	1000a9b2 	.word	0x1000a9b2
10011308:	1000a9b2 	.word	0x1000a9b2
1001130c:	1000a9b2 	.word	0x1000a9b2
10011310:	1000a9b2 	.word	0x1000a9b2
10011314:	1000a9cc 	.word	0x1000a9cc
10011318:	1000a9cc 	.word	0x1000a9cc
1001131c:	1000a9ee 	.word	0x1000a9ee
10011320:	1000a9ee 	.word	0x1000a9ee
10011324:	1000aa08 	.word	0x1000aa08
10011328:	1000a9ee 	.word	0x1000a9ee
1001132c:	34333231 	.word	0x34333231
10011330:	00003635 	.word	0x00003635
10011334:	efcdab00 	.word	0xefcdab00
10011338:	00efcdab 	.word	0x00efcdab
1001133c:	b2d60600 	.word	0xb2d60600
10011340:	f8f005f0 	.word	0xf8f005f0
10011344:	00000000 	.word	0x00000000

10011348 <ble_mgr_gatt_server_handle>:
	...
10011360:	100095d1 100095f9 10009641 00000000     ........A.......
10011370:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10011380:	65636552 64657669 00000000 6e616353     Received....Scan
10011390:	676e696e 61662020 64656c69 00000000     ning  failed....
100113a0:	2d454c42 2055544d 6e616843 2c646567     BLE-MTU Changed,
100113b0:	6e6f4320 7463656e 206e6f69 646e6148      Connection Hand
100113c0:	203a656c 202c6425 2077654e 756c6156     le: %d, New Valu
100113d0:	25203a65 00000064 2055544d 6e616843     e: %d...MTU Chan
100113e0:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
100113f0:	646e6148 253a656c 4f202c64 61726570     Handle:%d, Opera
10011400:	6e6f6974 0064253a 2055544d 6e616843     tion:%d.MTU Chan
10011410:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10011420:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10011430:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10011440:	72616843 69725720 43206574 4320646d     Char Write Cmd C
10011450:	6c706d6f 2c657465 6e6f4320 7463656e     omplete, Connect
10011460:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10011470:	61726570 6e6f6974 0064253a 72616843     peration:%d.Char
10011480:	69725720 43206574 4620646d 656c6961      Write Cmd Faile
10011490:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
100114a0:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
100114b0:	253a6e6f 00000064 74617453 6f4e2065     on:%d...State No
100114c0:	61482074 656c646e 64252064 00000000     t Handled %d....
100114d0:	69766544 64206563 6f637369 63656e6e     Device disconnec
100114e0:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
100114f0:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10011500:	425f5441 435f454c 5f4e4e4f 41524150     AT_BLE_CONN_PARA
10011510:	50555f4d 45544144 00000020 72636e45     M_UPDATE ...Encr
10011520:	69747079 66206e6f 656c6961 00000064     yption failed...
10011530:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10011540:	64657465 63757320 73736563 6c6c7566     eted successfull
10011550:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10011560:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10011570:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10011580:	7665443a 20656369 6e756f66 64612064     :Device found ad
10011590:	73657264 255b2073 20205d64 30257830     dress [%d]  0x%0
100115a0:	30255832 30255832 30255832 30255832     2X%02X%02X%02X%0
100115b0:	30255832 00205832 6f666e49 78616d3a     2X%02X .Info:max
100115c0:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
100115d0:	69766564 72206563 68636165 2e2e6465     device reached..
100115e0:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
100115f0:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10011600:	6e6e6163 00676e69 69766544 69206563     canning.Device i
10011610:	253a7864 00000064 23232323 23232323     dx:%d...########
10011620:	65442323 65636976 756f4620 0000646e     ##Device Found..
10011630:	23232323 23232323 65442323 65636976     ##########Device
10011640:	746f4e20 756f4620 0000646e 6e6e6f43      Not Found..Conn
10011650:	65746365 6f742064 65657020 65642072     ected to peer de
10011660:	65636976 74697720 64612068 73657264     vice with addres
10011670:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10011680:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10011690:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100116a0:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100116b0:	61522067 6d6f646e 64646120 73736572     g Random address
100116c0:	63757320 73736563 00002a2a 6f736552      success**..Reso
100116d0:	6e69766c 61522067 6d6f646e 64646120     lving Random add
100116e0:	73736572 69616620 2a64656c 0000002a     ress failed**...
100116f0:	2078614d 626d756e 6f207265 6f632066     Max number of co
10011700:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10011710:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10011720:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10011730:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10011740:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10011750:	00000064 30257830 202c5832 00000000     d...0x%02X, ....
10011760:	4b525343 0000203a 3a4b5249 00000000     CSRK: ..IRK:....
10011770:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10011780:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10011790:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100117a0:	46207473 656c6961 00000064 72696150     st Failed...Pair
100117b0:	20676e69 636f7270 72756465 6f632065     ing procedure co
100117c0:	656c706d 20646574 63637573 66737365     mpleted successf
100117d0:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100117e0:	6e206563 6620746f 646e756f 206f7420     ce not found to 
100117f0:	726f7473 68742065 61702065 6e697269     store the pairin
10011800:	6e692067 00006f66 3a4b544c 00000020     g info..LTK: ...
10011810:	72636e45 69747079 4e206e6f 7320746f     Encryption Not s
10011820:	74726174 00006465 76616c53 65532065     tarted..Slave Se
10011830:	69727563 52207974 2d207165 74754120     curity Req - Aut
10011840:	746e6568 74616369 206e6f69 6c696146     hentication Fail
10011850:	00006465 656e6547 65746172 544c2064     ed..Generated LT
10011860:	00203a4b 30257830 00205832 646e6553     K: .0x%02X .Send
10011870:	20676e69 72696170 20676e69 70736572     ing pairing resp
10011880:	65736e6f 00000000 72696150 71655220     onse....Pair Req
10011890:	74736575 41202d20 65687475 6369746e     uest - Authentic
100118a0:	6f697461 6146206e 64656c69 00000000     ation Failed....
100118b0:	65746e45 68742072 61502065 656b7373     Enter the Passke
100118c0:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
100118d0:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
100118e0:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
100118f0:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10011900:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10011910:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10011920:	6568746f 65442072 65636976 00003a29     other Device):..
10011930:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10011940:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10011950:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10011960:	00000064 65746e45 20646572 73736150     d...Entered Pass
10011970:	646f632d 00003a65 2d434e45 3a716552     -code:..ENC-Req:
10011980:	6e6f4320 6148206e 656c646e 76654420      Conn Handle Dev
10011990:	20656369 6e756f46 64683a64 64253a6c     ice Found:hdl:%d
100119a0:	00000000 74736f68 76656420 20656369     ....host device 
100119b0:	76696465 00782520 72656570 76656420     ediv %x.peer dev
100119c0:	20656369 76696465 00782520 5f636e65     ice ediv %x.enc_
100119d0:	20716572 76696465 00782520 20656854     req ediv %x.The 
100119e0:	65646e69 73692078 00642520 2d434e45     index is %d.ENC-
100119f0:	3a716552 79654b20 756f4620 0000646e     Req: Key Found..
10011a00:	72696150 20676e69 6f666e69 74616d72     Pairing informat
10011a10:	206e6f69 7020666f 20726565 69766564     ion of peer devi
10011a20:	69206563 6f6e2073 76612074 616c6961     ce is not availa
10011a30:	2e656c62 00000000 61656c50 75206573     ble.....Please u
10011a40:	6961706e 68742072 65642065 65636976     npair the device
10011a50:	6f726620 6570206d 64207265 63697665      from peer devic
10011a60:	6f6d2865 656c6962 65732029 6e697474     e(mobile) settin
10011a70:	6d207367 20756e65 20646e61 72617473     gs menu and star
10011a80:	61702074 6e697269 67612067 006e6961     t pairing again.
10011a90:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10011aa0:	52207473 796c7065 69614620 0064656c     st Reply Failed.
10011ab0:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10011ac0:	52207473 796c7065 00000000 74696e49     st Reply....Init
10011ad0:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10011ae0:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10011af0:	6f697461 6166206e 64656c69 00000000     ation failed....
10011b00:	61656c50 63206573 6b636568 65687420     Please check the
10011b10:	776f7020 61207265 6320646e 656e6e6f      power and conne
10011b20:	6f697463 202f206e 64726168 65726177     ction / hardware
10011b30:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10011b40:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10011b50:	20656d61 20746573 6c696166 00006465     ame set failed..
10011b60:	61204442 65726464 67207373 66207465     BD address get f
10011b70:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10011b80:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10011b90:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10011ba0:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10011bb0:	20746553 20454c42 69766544 63206563     Set BLE Device c
10011bc0:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10011bd0:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10011be0:	41206563 65726464 66207373 656c6961     ce Address faile
10011bf0:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10011c00:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10011c10:	76616c53 65732065 69727563 72207974     Slave security r
10011c20:	65757165 73207473 65636375 75667373     equest successfu
10011c30:	0000006c 76616c53 65732065 69727563     l...Slave securi
10011c40:	72207974 65757165 66207473 656c6961     ty request faile
10011c50:	00000064 2d454c42 6e657645 64253a74     d...BLE-Event:%d
10011c60:	00000000 54544147 7265535f 20726576     ....GATT_Server 
10011c70:	6e657645 64253a74 00000000 2d454c42     Event:%d....BLE-
10011c80:	616e614d 3a726567 6e6b6e55 206e776f     Manager:Unknown 
10011c90:	6e657645 78303d74 00005825 20454c42     Event=0x%X..BLE 
10011ca0:	65766441 73697472 6e656d65 61642074     Advertisement da
10011cb0:	73206174 66207465 656c6961 00000064     ta set failed...
10011cc0:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10011cd0:	61642074 73206174 73207465 65636375     t data set succe
10011ce0:	00007373                                ss..

10011ce4 <ble_mgr_gap_handle>:
10011ce4:	10009585 1000980d 100095a9 00000000     ................
10011cf4:	00000000 100099c9 10009689 10009725     ............%...
10011d04:	10009da1 10009bf1 10009fa1 10009db9     ................
10011d14:	1000a12d 1000a271 10009749 100098b9     -...q...I.......
	...
10011d30:	656d6954 74203272 67676972 0a0d7265     Timer2 trigger..
10011d40:	00000000 1000bbbc 1000bbbc 1000bbd0     ................
10011d50:	1000bbde 1000bbf2 1000bc06 1000bc1e     ................
10011d60:	1000bc32                                2...

10011d64 <sms_gateway_app_gap_cb>:
	...
10011d6c:	1000b80d 00000000 00000000 1000b7cd     ................
10011d7c:	1000b575 00000000 00000000 1000baf5     u...............
	...
10011db0:	72616843 65746361 74736972 77206369     Characteristic w
10011dc0:	65746972 73657220 736e6f70 00000065     rite response...
10011dd0:	72616843 65746361 74736972 72206369     Characteristic r
10011de0:	20646165 6d207962 69746c75 20656c70     ead by multiple 
10011df0:	20454c42 70736572 65736e6f 00000073     BLE responses...
10011e00:	72616843 65746361 74736972 72206369     Characteristic r
10011e10:	20646165 75207962 20646975 70736572     ead by uuid resp
10011e20:	65736e6f 00000000 63736944 7265766f     onse....Discover
10011e30:	6f632079 656c706d 00006574 63736544     y complete..Desc
10011e40:	74706972 6620726f 646e756f 00000000     riptor found....
10011e50:	72616843 65746361 74736972 66206369     Characteristic f
10011e60:	646e756f 00000000 6d697250 20797261     ound....Primary 
10011e70:	76726573 20656369 6e756f66 00000064     service found...
10011e80:	736d735b 7461675f 79617765 7265735f     [sms_gateway_ser
10011e90:	65636976 756f665f 205d646e 72657320     vice_found]  ser
10011ea0:	65636976 61686320 74636172 73697265     vice characteris
10011eb0:	73636974 0000003a 65732020 63697672     tics:...  servic
10011ec0:	79742065 203a6570 00006425 65732020     e type: %d..  se
10011ed0:	63697672 75752065 203a6469 00007830     rvice uuid: 0x..
10011ee0:	00007825 74732020 20747261 646e6168     %x..  start hand
10011ef0:	203a656c 00006425 6e652020 61682064     le: %d..  end ha
10011f00:	656c646e 6425203a 00000000 69646e49     ndle: %d....Indi
10011f10:	69746163 63206e6f 746e756f 203a7265     cation counter: 
10011f20:	00006425 3a746e63 00642520 736d735b     %d..cnt: %d.[sms
10011f30:	7461675f 79617765 746f6e5f 63696669     _gateway_notific
10011f40:	6f697461 65725f6e 76696563 095d6465     ation_received].
10011f50:	69746f4e 61636966 6e6f6974 63657220     Notification rec
10011f60:	65766965 2e2e2e64 202d0a0d 6e6e6f63     eived.....- conn
10011f70:	6e616820 3a656c64 25783020 0d783430      handle: 0x%04x.
10011f80:	63202d0a 20726168 646e6168 203a656c     .- char handle: 
10011f90:	30257830 0a0d7834 6863202d 6c207261     0x%04x..- char l
10011fa0:	203a6e65 0a0d6425 6863202d 76207261     en: %d..- char v
10011fb0:	65756c61 7830203a 00000000 69766544     alue: 0x....Devi
10011fc0:	63206563 656e6e6f 64657463 002e2e2e     ce connected....
10011fd0:	20202020 202d2020 65766461 73697472           - advertis
10011fe0:	64206465 3a617461 20783020 00000000     ed data: 0x ....
10011ff0:	78323025 202e2e2e 6b6f6f6c 20676e69     %02x... looking 
10012000:	20726f66 78323025 00000000 554f4620     for %02x.... FOU
10012010:	2021444e 692e2e2e 7865646e 6425203a     ND! ...index: %d
10012020:	00000000 54544150 314e5245 54414d20     ....PATTERN1 MAT
10012030:	4e494843 21212147 00000000 706d6f43     CHING!!!....Comp
10012040:	62697461 6420656c 63697665 6f662065     atible device fo
10012050:	00646e75 63204f4e 61706d6f 6c626974     und.NO compatibl
10012060:	65642065 65636976 756f6620 0000646e     e device found..
10012070:	68746f4e 20676e69 6e756f66 00000064     Nothing found...
10012080:	6e616353 72617020 74656d61 20737265     Scan parameters 
10012090:	20657261 61766e69 0064696c 6e616353     are invalid.Scan
100120a0:	676e696e 69616620 2064656c 656e6567     ning failed gene
100120b0:	20636972 6f727265 00000072 54544147     ric error...GATT
100120c0:	72657320 65636976 73696420 65766f63      service discove
100120d0:	72207972 65757165 66207473 656c6961     ry request faile
100120e0:	00000064 54544147 72657320 65636976     d...GATT service
100120f0:	73696420 65766f63 72207972 65757165      discovery reque
10012100:	73207473 74726174 00006465 69766544     st started..Devi
10012110:	20736563 72696170 2e2e6465 0000002e     ces paired......
10012120:	626f7250 206d656c 6c696877 65732065     Problem while se
10012130:	6e697474 70672067 70206f69 00006e69     tting gpio pin..
10012140:	74696e49 696c6169 676e697a 454c4220     Initializing BLE
10012150:	70704120 6163696c 6e6f6974 00000000      Application....
10012160:	5f534d53 4e4e5552 2e474e49 00002e2e     SMS_RUNNING.....
10012170:	5f534d53 43534944 454e4e4f 44455443     SMS_DISCONNECTED
10012180:	002e2e2e 5f534d53 5f544e49 54545542     ....SMS_INT_BUTT
10012190:	2e314e4f 00002e2e 5f534d53 5f544e49     ON1.....SMS_INT_
100121a0:	54545542 2e324e4f 00002e2e 5f534d53     BUTTON2.....SMS_
100121b0:	5f544e49 454d4954 2e2e3152 0000002e     INT_TIMER1......
100121c0:	5f534d53 5f544e49 454d4954 2e2e3252     SMS_INT_TIMER2..
100121d0:	0000002e                                ....

100121d4 <sms_gateway_app_gatt_client_cb>:
100121d4:	1000b669 00000000 1000b645 1000b621     i.......E...!...
100121e4:	1000b5fd 1000b5d9 1000b5b5 1000b591     ................
100121f4:	1000b749 1000b701 656d7441 6f43206c     I.......Atmel Co
10012204:	002e7072                                         rp.

10012207 <CSWTCH.51>:
10012207:	03010300 03030303 03030303 00020303     ................
10012217:	00eb1400 00e9d410 00e9d410 00e9d210     ................
10012227:	00eaec10 00eaec10 00eade10 00e9d210     ................
10012237:	00eaec10 00eade10 00eaec10 00e9d210     ................
10012247:	00eaf410 00eaf410 00eaf410 00ecf410     ................
10012257:	00004310 01231c00                                .C...

1001225c <_global_impure_ptr>:
1001225c:	1001231c                                .#..

10012260 <__sf_fake_stdin>:
	...

10012280 <__sf_fake_stdout>:
	...

100122a0 <__sf_fake_stderr>:
	...
100122c0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100122d0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100122e0:	31300046 35343332 39383736 64636261     F.0123456789abcd
100122f0:	00006665                                ef..

100122f4 <_init>:
100122f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100122f6:	46c0      	nop			; (mov r8, r8)
100122f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100122fa:	bc08      	pop	{r3}
100122fc:	469e      	mov	lr, r3
100122fe:	4770      	bx	lr

10012300 <__init_array_start>:
10012300:	100080b1 	.word	0x100080b1

10012304 <_fini>:
10012304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012306:	46c0      	nop			; (mov r8, r8)
10012308:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001230a:	bc08      	pop	{r3}
1001230c:	469e      	mov	lr, r3
1001230e:	4770      	bx	lr

10012310 <__fini_array_start>:
10012310:	10008089 	.word	0x10008089
