
SMSgateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aa30  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10012a30  10012a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000016fc  10012a9c  10012a9c  00012a9c  2**2
                  ALLOC
  3 .stack        00000800  10014198  10014198  00012a9c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012a9c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00012ac4  2**0
                  CONTENTS, READONLY
  6 .debug_info   000260b6  00000000  00000000  00012b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ca7  00000000  00000000  00038c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c87  00000000  00000000  0003b8d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007d0  00000000  00000000  0004255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000878  00000000  00000000  00042d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007497  00000000  00000000  000435a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c027  00000000  00000000  0004aa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010af7d  00000000  00000000  00056a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ed0  00000000  00000000  001619e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10012a30 	.word	0x10012a30
10008068:	10012a30 	.word	0x10012a30
1000806c:	10012a9c 	.word	0x10012a9c
10008070:	10014198 	.word	0x10014198
10008074:	10012a9c 	.word	0x10012a9c
10008078:	10012a34 	.word	0x10012a34
1000807c:	10012aa0 	.word	0x10012aa0
10008080:	1000fecd 	.word	0x1000fecd
10008084:	1000bfc9 	.word	0x1000bfc9

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012a9c 	.word	0x10012a9c
100080a8:	00000000 	.word	0x00000000
100080ac:	10012a30 	.word	0x10012a30

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012aa0 	.word	0x10012aa0
100080dc:	10012a30 	.word	0x10012a30
100080e0:	10012a30 	.word	0x10012a30
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
100080e8:	2800      	cmp	r0, #0
100080ea:	d107      	bne.n	100080fc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080ec:	2900      	cmp	r1, #0
100080ee:	d102      	bne.n	100080f6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
100080f0:	4b06      	ldr	r3, [pc, #24]	; (1000810c <dualtimer_set_counter+0x24>)
100080f2:	601a      	str	r2, [r3, #0]
100080f4:	e009      	b.n	1000810a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
100080f6:	4b05      	ldr	r3, [pc, #20]	; (1000810c <dualtimer_set_counter+0x24>)
100080f8:	619a      	str	r2, [r3, #24]
100080fa:	e006      	b.n	1000810a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080fc:	2900      	cmp	r1, #0
100080fe:	d102      	bne.n	10008106 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008100:	4b02      	ldr	r3, [pc, #8]	; (1000810c <dualtimer_set_counter+0x24>)
10008102:	621a      	str	r2, [r3, #32]
10008104:	e001      	b.n	1000810a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008106:	4b01      	ldr	r3, [pc, #4]	; (1000810c <dualtimer_set_counter+0x24>)
10008108:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000810a:	4770      	bx	lr
1000810c:	40001000 	.word	0x40001000

10008110 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008110:	2800      	cmp	r0, #0
10008112:	d105      	bne.n	10008120 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008114:	4a06      	ldr	r2, [pc, #24]	; (10008130 <dualtimer_enable+0x20>)
10008116:	7a11      	ldrb	r1, [r2, #8]
10008118:	2380      	movs	r3, #128	; 0x80
1000811a:	430b      	orrs	r3, r1
1000811c:	7213      	strb	r3, [r2, #8]
1000811e:	e005      	b.n	1000812c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008120:	4903      	ldr	r1, [pc, #12]	; (10008130 <dualtimer_enable+0x20>)
10008122:	2228      	movs	r2, #40	; 0x28
10008124:	5c88      	ldrb	r0, [r1, r2]
10008126:	2380      	movs	r3, #128	; 0x80
10008128:	4303      	orrs	r3, r0
1000812a:	548b      	strb	r3, [r1, r2]
	}
}
1000812c:	4770      	bx	lr
1000812e:	46c0      	nop			; (mov r8, r8)
10008130:	40001000 	.word	0x40001000

10008134 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008134:	2800      	cmp	r0, #0
10008136:	d105      	bne.n	10008144 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008138:	4a06      	ldr	r2, [pc, #24]	; (10008154 <dualtimer_disable+0x20>)
1000813a:	7a11      	ldrb	r1, [r2, #8]
1000813c:	237f      	movs	r3, #127	; 0x7f
1000813e:	400b      	ands	r3, r1
10008140:	7213      	strb	r3, [r2, #8]
10008142:	e005      	b.n	10008150 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008144:	4903      	ldr	r1, [pc, #12]	; (10008154 <dualtimer_disable+0x20>)
10008146:	2228      	movs	r2, #40	; 0x28
10008148:	5c88      	ldrb	r0, [r1, r2]
1000814a:	237f      	movs	r3, #127	; 0x7f
1000814c:	4003      	ands	r3, r0
1000814e:	548b      	strb	r3, [r1, r2]
	}
}
10008150:	4770      	bx	lr
10008152:	46c0      	nop			; (mov r8, r8)
10008154:	40001000 	.word	0x40001000

10008158 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008158:	2800      	cmp	r0, #0
1000815a:	d102      	bne.n	10008162 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000815c:	4b02      	ldr	r3, [pc, #8]	; (10008168 <dualtimer_register_callback+0x10>)
1000815e:	6019      	str	r1, [r3, #0]
10008160:	e001      	b.n	10008166 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008162:	4b02      	ldr	r3, [pc, #8]	; (1000816c <dualtimer_register_callback+0x14>)
10008164:	6019      	str	r1, [r3, #0]
	}
}
10008166:	4770      	bx	lr
10008168:	10012ab8 	.word	0x10012ab8
1000816c:	10012abc 	.word	0x10012abc

10008170 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008170:	2300      	movs	r3, #0
10008172:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008174:	2201      	movs	r2, #1
10008176:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008178:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000817a:	70c3      	strb	r3, [r0, #3]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008180:	b530      	push	{r4, r5, lr}
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1) || \
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
10008182:	2317      	movs	r3, #23

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008184:	2801      	cmp	r0, #1
10008186:	d800      	bhi.n	1000818a <gpio_pin_set_config+0xa>
10008188:	e0a2      	b.n	100082d0 <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_1) || \
1000818a:	280e      	cmp	r0, #14
1000818c:	d100      	bne.n	10008190 <gpio_pin_set_config+0x10>
1000818e:	e09f      	b.n	100082d0 <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008190:	2807      	cmp	r0, #7
10008192:	d809      	bhi.n	100081a8 <gpio_pin_set_config+0x28>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008194:	4d4f      	ldr	r5, [pc, #316]	; (100082d4 <gpio_pin_set_config+0x154>)
10008196:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008198:	3b10      	subs	r3, #16
1000819a:	4003      	ands	r3, r0
1000819c:	009b      	lsls	r3, r3, #2
1000819e:	2407      	movs	r4, #7
100081a0:	409c      	lsls	r4, r3
100081a2:	43a2      	bics	r2, r4
100081a4:	646a      	str	r2, [r5, #68]	; 0x44
100081a6:	e016      	b.n	100081d6 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 15) {
100081a8:	280f      	cmp	r0, #15
100081aa:	d809      	bhi.n	100081c0 <gpio_pin_set_config+0x40>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100081ac:	4d49      	ldr	r5, [pc, #292]	; (100082d4 <gpio_pin_set_config+0x154>)
100081ae:	6caa      	ldr	r2, [r5, #72]	; 0x48
100081b0:	2307      	movs	r3, #7
100081b2:	4003      	ands	r3, r0
100081b4:	009b      	lsls	r3, r3, #2
100081b6:	2407      	movs	r4, #7
100081b8:	409c      	lsls	r4, r3
100081ba:	43a2      	bics	r2, r4
100081bc:	64aa      	str	r2, [r5, #72]	; 0x48
100081be:	e00a      	b.n	100081d6 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 23) {
100081c0:	2817      	cmp	r0, #23
100081c2:	d808      	bhi.n	100081d6 <gpio_pin_set_config+0x56>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100081c4:	4d43      	ldr	r5, [pc, #268]	; (100082d4 <gpio_pin_set_config+0x154>)
100081c6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100081c8:	2307      	movs	r3, #7
100081ca:	4003      	ands	r3, r0
100081cc:	009b      	lsls	r3, r3, #2
100081ce:	2407      	movs	r4, #7
100081d0:	409c      	lsls	r4, r3
100081d2:	43a2      	bics	r2, r4
100081d4:	64ea      	str	r2, [r5, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100081d6:	0003      	movs	r3, r0
100081d8:	3b1d      	subs	r3, #29
100081da:	2b02      	cmp	r3, #2
100081dc:	d829      	bhi.n	10008232 <gpio_pin_set_config+0xb2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100081de:	784b      	ldrb	r3, [r1, #1]
100081e0:	2b01      	cmp	r3, #1
100081e2:	d108      	bne.n	100081f6 <gpio_pin_set_config+0x76>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100081e4:	4d3c      	ldr	r5, [pc, #240]	; (100082d8 <gpio_pin_set_config+0x158>)
100081e6:	7d2b      	ldrb	r3, [r5, #20]
100081e8:	241f      	movs	r4, #31
100081ea:	1a24      	subs	r4, r4, r0
100081ec:	2201      	movs	r2, #1
100081ee:	40a2      	lsls	r2, r4
100081f0:	4393      	bics	r3, r2
100081f2:	752b      	strb	r3, [r5, #20]
100081f4:	e008      	b.n	10008208 <gpio_pin_set_config+0x88>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100081f6:	4c38      	ldr	r4, [pc, #224]	; (100082d8 <gpio_pin_set_config+0x158>)
100081f8:	7d25      	ldrb	r5, [r4, #20]
100081fa:	221f      	movs	r2, #31
100081fc:	1a12      	subs	r2, r2, r0
100081fe:	2301      	movs	r3, #1
10008200:	4093      	lsls	r3, r2
10008202:	432b      	orrs	r3, r5
10008204:	b2db      	uxtb	r3, r3
10008206:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008208:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000820a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000820c:	2a00      	cmp	r2, #0
1000820e:	d05f      	beq.n	100082d0 <gpio_pin_set_config+0x150>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008210:	4931      	ldr	r1, [pc, #196]	; (100082d8 <gpio_pin_set_config+0x158>)
10008212:	880c      	ldrh	r4, [r1, #0]
10008214:	221f      	movs	r2, #31
10008216:	1a10      	subs	r0, r2, r0
10008218:	0080      	lsls	r0, r0, #2
1000821a:	3301      	adds	r3, #1
1000821c:	4083      	lsls	r3, r0
1000821e:	4323      	orrs	r3, r4
10008220:	b29b      	uxth	r3, r3
10008222:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008224:	4a2d      	ldr	r2, [pc, #180]	; (100082dc <gpio_pin_set_config+0x15c>)
10008226:	7811      	ldrb	r1, [r2, #0]
10008228:	2302      	movs	r3, #2
1000822a:	430b      	orrs	r3, r1
1000822c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000822e:	2300      	movs	r3, #0
10008230:	e04e      	b.n	100082d0 <gpio_pin_set_config+0x150>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008232:	780a      	ldrb	r2, [r1, #0]
10008234:	2a00      	cmp	r2, #0
10008236:	d131      	bne.n	1000829c <gpio_pin_set_config+0x11c>
				if(gpio_pin < 16) {
10008238:	280f      	cmp	r0, #15
1000823a:	d805      	bhi.n	10008248 <gpio_pin_set_config+0xc8>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000823c:	2301      	movs	r3, #1
1000823e:	4083      	lsls	r3, r0
10008240:	b29b      	uxth	r3, r3
10008242:	4a27      	ldr	r2, [pc, #156]	; (100082e0 <gpio_pin_set_config+0x160>)
10008244:	8293      	strh	r3, [r2, #20]
10008246:	e006      	b.n	10008256 <gpio_pin_set_config+0xd6>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008248:	220f      	movs	r2, #15
1000824a:	4002      	ands	r2, r0
1000824c:	2301      	movs	r3, #1
1000824e:	4093      	lsls	r3, r2
10008250:	b29b      	uxth	r3, r3
10008252:	4a24      	ldr	r2, [pc, #144]	; (100082e4 <gpio_pin_set_config+0x164>)
10008254:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
10008256:	784b      	ldrb	r3, [r1, #1]
10008258:	2b01      	cmp	r3, #1
1000825a:	d00c      	beq.n	10008276 <gpio_pin_set_config+0xf6>
1000825c:	2b00      	cmp	r3, #0
1000825e:	d002      	beq.n	10008266 <gpio_pin_set_config+0xe6>
10008260:	2b02      	cmp	r3, #2
10008262:	d010      	beq.n	10008286 <gpio_pin_set_config+0x106>
10008264:	e033      	b.n	100082ce <gpio_pin_set_config+0x14e>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008266:	491b      	ldr	r1, [pc, #108]	; (100082d4 <gpio_pin_set_config+0x154>)
10008268:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000826a:	2301      	movs	r3, #1
1000826c:	4083      	lsls	r3, r0
1000826e:	4313      	orrs	r3, r2
10008270:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008272:	2300      	movs	r3, #0
				}
				/* pull_enable. */
				switch(config->input_pull) {
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
10008274:	e02c      	b.n	100082d0 <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008276:	4917      	ldr	r1, [pc, #92]	; (100082d4 <gpio_pin_set_config+0x154>)
10008278:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000827a:	2201      	movs	r2, #1
1000827c:	4082      	lsls	r2, r0
1000827e:	4393      	bics	r3, r2
10008280:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008282:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008284:	e024      	b.n	100082d0 <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008286:	4b13      	ldr	r3, [pc, #76]	; (100082d4 <gpio_pin_set_config+0x154>)
10008288:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000828a:	2201      	movs	r2, #1
1000828c:	4082      	lsls	r2, r0
1000828e:	4311      	orrs	r1, r2
10008290:	6559      	str	r1, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008292:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008294:	4391      	bics	r1, r2
10008296:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008298:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
1000829a:	e019      	b.n	100082d0 <gpio_pin_set_config+0x150>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000829c:	2300      	movs	r3, #0
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
						break;
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000829e:	2a01      	cmp	r2, #1
100082a0:	d116      	bne.n	100082d0 <gpio_pin_set_config+0x150>
				if (gpio_pin < 16) {
100082a2:	280f      	cmp	r0, #15
100082a4:	d808      	bhi.n	100082b8 <gpio_pin_set_config+0x138>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
100082a6:	4a0e      	ldr	r2, [pc, #56]	; (100082e0 <gpio_pin_set_config+0x160>)
100082a8:	8a11      	ldrh	r1, [r2, #16]
100082aa:	3301      	adds	r3, #1
100082ac:	4083      	lsls	r3, r0
100082ae:	430b      	orrs	r3, r1
100082b0:	b29b      	uxth	r3, r3
100082b2:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100082b4:	2300      	movs	r3, #0
100082b6:	e00b      	b.n	100082d0 <gpio_pin_set_config+0x150>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
100082b8:	4a0a      	ldr	r2, [pc, #40]	; (100082e4 <gpio_pin_set_config+0x164>)
100082ba:	8a11      	ldrh	r1, [r2, #16]
100082bc:	230f      	movs	r3, #15
100082be:	4018      	ands	r0, r3
100082c0:	3b0e      	subs	r3, #14
100082c2:	4083      	lsls	r3, r0
100082c4:	430b      	orrs	r3, r1
100082c6:	b29b      	uxth	r3, r3
100082c8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100082ca:	2300      	movs	r3, #0
100082cc:	e000      	b.n	100082d0 <gpio_pin_set_config+0x150>
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
100082ce:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100082d0:	0018      	movs	r0, r3
100082d2:	bd30      	pop	{r4, r5, pc}
100082d4:	4000b000 	.word	0x4000b000
100082d8:	4000f000 	.word	0x4000f000
100082dc:	4000e000 	.word	0x4000e000
100082e0:	40010000 	.word	0x40010000
100082e4:	40011000 	.word	0x40011000

100082e8 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
100082e8:	280f      	cmp	r0, #15
100082ea:	d806      	bhi.n	100082fa <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
100082ec:	4b09      	ldr	r3, [pc, #36]	; (10008314 <gpio_pin_get_input_level+0x2c>)
100082ee:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
100082f0:	2301      	movs	r3, #1
100082f2:	4083      	lsls	r3, r0
100082f4:	0018      	movs	r0, r3
100082f6:	4008      	ands	r0, r1
100082f8:	e008      	b.n	1000830c <gpio_pin_get_input_level+0x24>
	} else {
		regval = GPIO1->DATA.reg;
100082fa:	4b07      	ldr	r3, [pc, #28]	; (10008318 <gpio_pin_get_input_level+0x30>)
100082fc:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
100082fe:	230f      	movs	r3, #15
10008300:	4003      	ands	r3, r0
10008302:	001a      	movs	r2, r3
10008304:	2301      	movs	r3, #1
10008306:	4093      	lsls	r3, r2
10008308:	0018      	movs	r0, r3
1000830a:	4008      	ands	r0, r1
	}

	return regval;
1000830c:	1e43      	subs	r3, r0, #1
1000830e:	4198      	sbcs	r0, r3
10008310:	b2c0      	uxtb	r0, r0
}
10008312:	4770      	bx	lr
10008314:	40010000 	.word	0x40010000
10008318:	40011000 	.word	0x40011000

1000831c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000831c:	b510      	push	{r4, lr}
	if(gpio_pin < 16) {
1000831e:	280f      	cmp	r0, #15
10008320:	d810      	bhi.n	10008344 <gpio_pin_set_output_level+0x28>
		if(level) {
10008322:	2900      	cmp	r1, #0
10008324:	d007      	beq.n	10008336 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008326:	4a12      	ldr	r2, [pc, #72]	; (10008370 <gpio_pin_set_output_level+0x54>)
10008328:	8891      	ldrh	r1, [r2, #4]
1000832a:	2301      	movs	r3, #1
1000832c:	4083      	lsls	r3, r0
1000832e:	430b      	orrs	r3, r1
10008330:	b29b      	uxth	r3, r3
10008332:	8093      	strh	r3, [r2, #4]
10008334:	e01a      	b.n	1000836c <gpio_pin_set_output_level+0x50>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008336:	490e      	ldr	r1, [pc, #56]	; (10008370 <gpio_pin_set_output_level+0x54>)
10008338:	888b      	ldrh	r3, [r1, #4]
1000833a:	2201      	movs	r2, #1
1000833c:	4082      	lsls	r2, r0
1000833e:	4393      	bics	r3, r2
10008340:	808b      	strh	r3, [r1, #4]
10008342:	e013      	b.n	1000836c <gpio_pin_set_output_level+0x50>
		}
	} else {
		if(level) {
10008344:	2900      	cmp	r1, #0
10008346:	d009      	beq.n	1000835c <gpio_pin_set_output_level+0x40>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008348:	490a      	ldr	r1, [pc, #40]	; (10008374 <gpio_pin_set_output_level+0x58>)
1000834a:	888c      	ldrh	r4, [r1, #4]
1000834c:	220f      	movs	r2, #15
1000834e:	4010      	ands	r0, r2
10008350:	2301      	movs	r3, #1
10008352:	4083      	lsls	r3, r0
10008354:	4323      	orrs	r3, r4
10008356:	b29b      	uxth	r3, r3
10008358:	808b      	strh	r3, [r1, #4]
1000835a:	e007      	b.n	1000836c <gpio_pin_set_output_level+0x50>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000835c:	4905      	ldr	r1, [pc, #20]	; (10008374 <gpio_pin_set_output_level+0x58>)
1000835e:	888b      	ldrh	r3, [r1, #4]
10008360:	220f      	movs	r2, #15
10008362:	4010      	ands	r0, r2
10008364:	3a0e      	subs	r2, #14
10008366:	4082      	lsls	r2, r0
10008368:	4393      	bics	r3, r2
1000836a:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000836c:	bd10      	pop	{r4, pc}
1000836e:	46c0      	nop			; (mov r8, r8)
10008370:	40010000 	.word	0x40010000
10008374:	40011000 	.word	0x40011000

10008378 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008378:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000837a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000837c:	23ff      	movs	r3, #255	; 0xff
1000837e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008380:	2807      	cmp	r0, #7
10008382:	d833      	bhi.n	100083ec <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008384:	4a4e      	ldr	r2, [pc, #312]	; (100084c0 <gpio_pinmux_cofiguration+0x148>)
10008386:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008388:	3bf8      	subs	r3, #248	; 0xf8
1000838a:	4003      	ands	r3, r0
1000838c:	009b      	lsls	r3, r3, #2
1000838e:	2607      	movs	r6, #7
10008390:	409e      	lsls	r6, r3
10008392:	43b4      	bics	r4, r6
10008394:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008396:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008398:	000e      	movs	r6, r1
1000839a:	409e      	lsls	r6, r3
1000839c:	0033      	movs	r3, r6
1000839e:	4323      	orrs	r3, r4
100083a0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
100083a2:	2901      	cmp	r1, #1
100083a4:	d000      	beq.n	100083a8 <gpio_pinmux_cofiguration+0x30>
100083a6:	e08a      	b.n	100084be <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
100083a8:	2803      	cmp	r0, #3
100083aa:	d80f      	bhi.n	100083cc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100083ac:	0011      	movs	r1, r2
100083ae:	22d0      	movs	r2, #208	; 0xd0
100083b0:	0052      	lsls	r2, r2, #1
100083b2:	588c      	ldr	r4, [r1, r2]
100083b4:	2303      	movs	r3, #3
100083b6:	4018      	ands	r0, r3
100083b8:	00c0      	lsls	r0, r0, #3
100083ba:	333c      	adds	r3, #60	; 0x3c
100083bc:	4083      	lsls	r3, r0
100083be:	439c      	bics	r4, r3
100083c0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100083c2:	588b      	ldr	r3, [r1, r2]
100083c4:	4085      	lsls	r5, r0
100083c6:	431d      	orrs	r5, r3
100083c8:	508d      	str	r5, [r1, r2]
100083ca:	e078      	b.n	100084be <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100083cc:	493c      	ldr	r1, [pc, #240]	; (100084c0 <gpio_pinmux_cofiguration+0x148>)
100083ce:	22d2      	movs	r2, #210	; 0xd2
100083d0:	0052      	lsls	r2, r2, #1
100083d2:	588c      	ldr	r4, [r1, r2]
100083d4:	2303      	movs	r3, #3
100083d6:	4018      	ands	r0, r3
100083d8:	00c0      	lsls	r0, r0, #3
100083da:	333c      	adds	r3, #60	; 0x3c
100083dc:	4083      	lsls	r3, r0
100083de:	439c      	bics	r4, r3
100083e0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100083e2:	588b      	ldr	r3, [r1, r2]
100083e4:	4085      	lsls	r5, r0
100083e6:	431d      	orrs	r5, r3
100083e8:	508d      	str	r5, [r1, r2]
100083ea:	e068      	b.n	100084be <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100083ec:	280f      	cmp	r0, #15
100083ee:	d832      	bhi.n	10008456 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100083f0:	4a33      	ldr	r2, [pc, #204]	; (100084c0 <gpio_pinmux_cofiguration+0x148>)
100083f2:	6c94      	ldr	r4, [r2, #72]	; 0x48
100083f4:	2307      	movs	r3, #7
100083f6:	4003      	ands	r3, r0
100083f8:	009b      	lsls	r3, r3, #2
100083fa:	2607      	movs	r6, #7
100083fc:	409e      	lsls	r6, r3
100083fe:	43b4      	bics	r4, r6
10008400:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008402:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008404:	000e      	movs	r6, r1
10008406:	409e      	lsls	r6, r3
10008408:	0033      	movs	r3, r6
1000840a:	4323      	orrs	r3, r4
1000840c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000840e:	2901      	cmp	r1, #1
10008410:	d155      	bne.n	100084be <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008412:	280b      	cmp	r0, #11
10008414:	d80f      	bhi.n	10008436 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008416:	0011      	movs	r1, r2
10008418:	22d4      	movs	r2, #212	; 0xd4
1000841a:	0052      	lsls	r2, r2, #1
1000841c:	588c      	ldr	r4, [r1, r2]
1000841e:	2303      	movs	r3, #3
10008420:	4018      	ands	r0, r3
10008422:	00c0      	lsls	r0, r0, #3
10008424:	333c      	adds	r3, #60	; 0x3c
10008426:	4083      	lsls	r3, r0
10008428:	439c      	bics	r4, r3
1000842a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000842c:	588b      	ldr	r3, [r1, r2]
1000842e:	4085      	lsls	r5, r0
10008430:	431d      	orrs	r5, r3
10008432:	508d      	str	r5, [r1, r2]
10008434:	e043      	b.n	100084be <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008436:	4922      	ldr	r1, [pc, #136]	; (100084c0 <gpio_pinmux_cofiguration+0x148>)
10008438:	22d6      	movs	r2, #214	; 0xd6
1000843a:	0052      	lsls	r2, r2, #1
1000843c:	588c      	ldr	r4, [r1, r2]
1000843e:	2303      	movs	r3, #3
10008440:	4018      	ands	r0, r3
10008442:	00c0      	lsls	r0, r0, #3
10008444:	333c      	adds	r3, #60	; 0x3c
10008446:	4083      	lsls	r3, r0
10008448:	439c      	bics	r4, r3
1000844a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000844c:	588b      	ldr	r3, [r1, r2]
1000844e:	4085      	lsls	r5, r0
10008450:	431d      	orrs	r5, r3
10008452:	508d      	str	r5, [r1, r2]
10008454:	e033      	b.n	100084be <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008456:	2817      	cmp	r0, #23
10008458:	d831      	bhi.n	100084be <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000845a:	4a19      	ldr	r2, [pc, #100]	; (100084c0 <gpio_pinmux_cofiguration+0x148>)
1000845c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000845e:	2307      	movs	r3, #7
10008460:	4003      	ands	r3, r0
10008462:	009b      	lsls	r3, r3, #2
10008464:	2607      	movs	r6, #7
10008466:	409e      	lsls	r6, r3
10008468:	43b4      	bics	r4, r6
1000846a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000846c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000846e:	000e      	movs	r6, r1
10008470:	409e      	lsls	r6, r3
10008472:	0033      	movs	r3, r6
10008474:	4323      	orrs	r3, r4
10008476:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008478:	2901      	cmp	r1, #1
1000847a:	d120      	bne.n	100084be <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000847c:	2813      	cmp	r0, #19
1000847e:	d80f      	bhi.n	100084a0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008480:	0011      	movs	r1, r2
10008482:	22d8      	movs	r2, #216	; 0xd8
10008484:	0052      	lsls	r2, r2, #1
10008486:	588c      	ldr	r4, [r1, r2]
10008488:	2303      	movs	r3, #3
1000848a:	4018      	ands	r0, r3
1000848c:	00c0      	lsls	r0, r0, #3
1000848e:	333c      	adds	r3, #60	; 0x3c
10008490:	4083      	lsls	r3, r0
10008492:	439c      	bics	r4, r3
10008494:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008496:	588b      	ldr	r3, [r1, r2]
10008498:	4085      	lsls	r5, r0
1000849a:	431d      	orrs	r5, r3
1000849c:	508d      	str	r5, [r1, r2]
1000849e:	e00e      	b.n	100084be <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084a0:	4a07      	ldr	r2, [pc, #28]	; (100084c0 <gpio_pinmux_cofiguration+0x148>)
100084a2:	23da      	movs	r3, #218	; 0xda
100084a4:	005b      	lsls	r3, r3, #1
100084a6:	58d1      	ldr	r1, [r2, r3]
100084a8:	2403      	movs	r4, #3
100084aa:	4020      	ands	r0, r4
100084ac:	00c0      	lsls	r0, r0, #3
100084ae:	343c      	adds	r4, #60	; 0x3c
100084b0:	4084      	lsls	r4, r0
100084b2:	43a1      	bics	r1, r4
100084b4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084b6:	58d1      	ldr	r1, [r2, r3]
100084b8:	4085      	lsls	r5, r0
100084ba:	430d      	orrs	r5, r1
100084bc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
100084be:	bd70      	pop	{r4, r5, r6, pc}
100084c0:	4000b000 	.word	0x4000b000

100084c4 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
100084c4:	230c      	movs	r3, #12
100084c6:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
100084c8:	2300      	movs	r3, #0
100084ca:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
100084cc:	7083      	strb	r3, [r0, #2]
}
100084ce:	4770      	bx	lr

100084d0 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
100084d0:	2301      	movs	r3, #1
100084d2:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
100084d4:	2300      	movs	r3, #0
100084d6:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
100084d8:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
100084da:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
100084dc:	3381      	adds	r3, #129	; 0x81
100084de:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10_MUX2_SPI0_SCK;
100084e0:	3b77      	subs	r3, #119	; 0x77
100084e2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11_MUX2_SPI0_MOSI;
100084e4:	3301      	adds	r3, #1
100084e6:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12_MUX2_SPI0_SSN;
100084e8:	3301      	adds	r3, #1
100084ea:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13_MUX2_SPI0_MISO;
100084ec:	3301      	adds	r3, #1
100084ee:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_MUX2_SPI0_SCK;
100084f0:	3b0b      	subs	r3, #11
100084f2:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_MUX2_SPI0_MOSI;
100084f4:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_MUX2_SPI0_SSN;
100084f6:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_MUX2_SPI0_MISO;
100084f8:	6243      	str	r3, [r0, #36]	; 0x24
};
100084fa:	4770      	bx	lr

100084fc <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
100084fc:	b530      	push	{r4, r5, lr}
100084fe:	b083      	sub	sp, #12
10008500:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10008502:	780b      	ldrb	r3, [r1, #0]
10008504:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
10008506:	784b      	ldrb	r3, [r1, #1]
10008508:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000850a:	788b      	ldrb	r3, [r1, #2]
1000850c:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000850e:	ad01      	add	r5, sp, #4
10008510:	0028      	movs	r0, r5
10008512:	4b07      	ldr	r3, [pc, #28]	; (10008530 <spi_attach_slave+0x34>)
10008514:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008516:	2301      	movs	r3, #1
10008518:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000851a:	7820      	ldrb	r0, [r4, #0]
1000851c:	0029      	movs	r1, r5
1000851e:	4b05      	ldr	r3, [pc, #20]	; (10008534 <spi_attach_slave+0x38>)
10008520:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10008522:	7820      	ldrb	r0, [r4, #0]
10008524:	2101      	movs	r1, #1
10008526:	4b04      	ldr	r3, [pc, #16]	; (10008538 <spi_attach_slave+0x3c>)
10008528:	4798      	blx	r3
}
1000852a:	b003      	add	sp, #12
1000852c:	bd30      	pop	{r4, r5, pc}
1000852e:	46c0      	nop			; (mov r8, r8)
10008530:	10008171 	.word	0x10008171
10008534:	10008181 	.word	0x10008181
10008538:	1000831d 	.word	0x1000831d

1000853c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000853c:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_SPI_MODULE_ENABLE_ENABLE;
1000853e:	2201      	movs	r2, #1
10008540:	761a      	strb	r2, [r3, #24]
}
10008542:	4770      	bx	lr

10008544 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10008544:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
10008546:	2300      	movs	r3, #0
10008548:	6802      	ldr	r2, [r0, #0]
1000854a:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000854c:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000854e:	4a0d      	ldr	r2, [pc, #52]	; (10008584 <spi_disable+0x40>)
10008550:	4293      	cmp	r3, r2
10008552:	d109      	bne.n	10008568 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10008554:	2041      	movs	r0, #65	; 0x41
10008556:	4c0c      	ldr	r4, [pc, #48]	; (10008588 <spi_disable+0x44>)
10008558:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000855a:	2026      	movs	r0, #38	; 0x26
1000855c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000855e:	2038      	movs	r0, #56	; 0x38
10008560:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10008562:	2001      	movs	r0, #1
10008564:	47a0      	blx	r4
10008566:	e00b      	b.n	10008580 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
10008568:	4a08      	ldr	r2, [pc, #32]	; (1000858c <spi_disable+0x48>)
1000856a:	4293      	cmp	r3, r2
1000856c:	d108      	bne.n	10008580 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000856e:	2042      	movs	r0, #66	; 0x42
10008570:	4c05      	ldr	r4, [pc, #20]	; (10008588 <spi_disable+0x44>)
10008572:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10008574:	2027      	movs	r0, #39	; 0x27
10008576:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10008578:	2039      	movs	r0, #57	; 0x39
1000857a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000857c:	2002      	movs	r0, #2
1000857e:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10008580:	bd10      	pop	{r4, pc}
10008582:	46c0      	nop			; (mov r8, r8)
10008584:	40006000 	.word	0x40006000
10008588:	10008bc9 	.word	0x10008bc9
1000858c:	40007000 	.word	0x40007000

10008590 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10008590:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10008592:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10008594:	4b09      	ldr	r3, [pc, #36]	; (100085bc <spi_reset+0x2c>)
10008596:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10008598:	4b09      	ldr	r3, [pc, #36]	; (100085c0 <spi_reset+0x30>)
1000859a:	429c      	cmp	r4, r3
1000859c:	d105      	bne.n	100085aa <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000859e:	2001      	movs	r0, #1
100085a0:	4c08      	ldr	r4, [pc, #32]	; (100085c4 <spi_reset+0x34>)
100085a2:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
100085a4:	2038      	movs	r0, #56	; 0x38
100085a6:	47a0      	blx	r4
100085a8:	e007      	b.n	100085ba <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
100085aa:	4b07      	ldr	r3, [pc, #28]	; (100085c8 <spi_reset+0x38>)
100085ac:	429c      	cmp	r4, r3
100085ae:	d104      	bne.n	100085ba <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
100085b0:	2002      	movs	r0, #2
100085b2:	4c04      	ldr	r4, [pc, #16]	; (100085c4 <spi_reset+0x34>)
100085b4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
100085b6:	2039      	movs	r0, #57	; 0x39
100085b8:	47a0      	blx	r4
	}
}
100085ba:	bd10      	pop	{r4, pc}
100085bc:	10008545 	.word	0x10008545
100085c0:	40006000 	.word	0x40006000
100085c4:	10008f35 	.word	0x10008f35
100085c8:	40007000 	.word	0x40007000

100085cc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
100085cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100085ce:	4657      	mov	r7, sl
100085d0:	4646      	mov	r6, r8
100085d2:	b4c0      	push	{r6, r7}
100085d4:	b083      	sub	sp, #12
100085d6:	0006      	movs	r6, r0
100085d8:	4688      	mov	r8, r1
100085da:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
100085dc:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_SPI_MODULE_ENABLE_MASK) {
100085de:	7e0b      	ldrb	r3, [r1, #24]
100085e0:	07db      	lsls	r3, r3, #31
100085e2:	d501      	bpl.n	100085e8 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
100085e4:	2300      	movs	r3, #0
100085e6:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
100085e8:	0030      	movs	r0, r6
100085ea:	4b48      	ldr	r3, [pc, #288]	; (1000870c <spi_init+0x140>)
100085ec:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
100085ee:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
100085f0:	4a47      	ldr	r2, [pc, #284]	; (10008710 <spi_init+0x144>)
100085f2:	4293      	cmp	r3, r2
100085f4:	d109      	bne.n	1000860a <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
100085f6:	2041      	movs	r0, #65	; 0x41
100085f8:	4c46      	ldr	r4, [pc, #280]	; (10008714 <spi_init+0x148>)
100085fa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
100085fc:	2026      	movs	r0, #38	; 0x26
100085fe:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10008600:	2038      	movs	r0, #56	; 0x38
10008602:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10008604:	2001      	movs	r0, #1
10008606:	47a0      	blx	r4
10008608:	e00b      	b.n	10008622 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000860a:	4a43      	ldr	r2, [pc, #268]	; (10008718 <spi_init+0x14c>)
1000860c:	4293      	cmp	r3, r2
1000860e:	d108      	bne.n	10008622 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10008610:	2042      	movs	r0, #66	; 0x42
10008612:	4c40      	ldr	r4, [pc, #256]	; (10008714 <spi_init+0x148>)
10008614:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10008616:	2027      	movs	r0, #39	; 0x27
10008618:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000861a:	2039      	movs	r0, #57	; 0x39
1000861c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000861e:	2002      	movs	r0, #2
10008620:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008622:	a801      	add	r0, sp, #4
10008624:	4b3d      	ldr	r3, [pc, #244]	; (1000871c <spi_init+0x150>)
10008626:	4798      	blx	r3
10008628:	002c      	movs	r4, r5
1000862a:	3408      	adds	r4, #8
1000862c:	2318      	movs	r3, #24
1000862e:	469a      	mov	sl, r3
10008630:	44aa      	add	sl, r5
10008632:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10008634:	6820      	ldr	r0, [r4, #0]
10008636:	1c43      	adds	r3, r0, #1
10008638:	d011      	beq.n	1000865e <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000863a:	782b      	ldrb	r3, [r5, #0]
1000863c:	2b01      	cmp	r3, #1
1000863e:	d102      	bne.n	10008646 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008640:	466a      	mov	r2, sp
10008642:	7113      	strb	r3, [r2, #4]
10008644:	e003      	b.n	1000864e <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
10008646:	2b00      	cmp	r3, #0
10008648:	d101      	bne.n	1000864e <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000864a:	466a      	mov	r2, sp
1000864c:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000864e:	b2c0      	uxtb	r0, r0
10008650:	a901      	add	r1, sp, #4
10008652:	4b33      	ldr	r3, [pc, #204]	; (10008720 <spi_init+0x154>)
10008654:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10008656:	8a39      	ldrh	r1, [r7, #16]
10008658:	7838      	ldrb	r0, [r7, #0]
1000865a:	4b32      	ldr	r3, [pc, #200]	; (10008724 <spi_init+0x158>)
1000865c:	4798      	blx	r3
1000865e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10008660:	4554      	cmp	r4, sl
10008662:	d1e6      	bne.n	10008632 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008664:	78eb      	ldrb	r3, [r5, #3]
10008666:	4642      	mov	r2, r8
10008668:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000866a:	782b      	ldrb	r3, [r5, #0]
1000866c:	2b01      	cmp	r3, #1
1000866e:	d100      	bne.n	10008672 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10008670:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10008672:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10008674:	782a      	ldrb	r2, [r5, #0]
10008676:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10008678:	782a      	ldrb	r2, [r5, #0]
1000867a:	2a01      	cmp	r2, #1
1000867c:	d101      	bne.n	10008682 <spi_init+0xb6>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000867e:	792a      	ldrb	r2, [r5, #4]
10008680:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10008682:	786a      	ldrb	r2, [r5, #1]
10008684:	2a04      	cmp	r2, #4
10008686:	d104      	bne.n	10008692 <spi_init+0xc6>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10008688:	2124      	movs	r1, #36	; 0x24
1000868a:	5c58      	ldrb	r0, [r3, r1]
1000868c:	4302      	orrs	r2, r0
1000868e:	545a      	strb	r2, [r3, r1]
10008690:	e004      	b.n	1000869c <spi_init+0xd0>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10008692:	2124      	movs	r1, #36	; 0x24
10008694:	5c5a      	ldrb	r2, [r3, r1]
10008696:	2004      	movs	r0, #4
10008698:	4382      	bics	r2, r0
1000869a:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000869c:	78aa      	ldrb	r2, [r5, #2]
1000869e:	2a01      	cmp	r2, #1
100086a0:	d01a      	beq.n	100086d8 <spi_init+0x10c>
100086a2:	2a00      	cmp	r2, #0
100086a4:	d004      	beq.n	100086b0 <spi_init+0xe4>
100086a6:	2a02      	cmp	r2, #2
100086a8:	d00c      	beq.n	100086c4 <spi_init+0xf8>
100086aa:	2a03      	cmp	r2, #3
100086ac:	d01e      	beq.n	100086ec <spi_init+0x120>
100086ae:	e026      	b.n	100086fe <spi_init+0x132>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
100086b0:	2224      	movs	r2, #36	; 0x24
100086b2:	5c99      	ldrb	r1, [r3, r2]
100086b4:	2002      	movs	r0, #2
100086b6:	4381      	bics	r1, r0
100086b8:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
100086ba:	5c99      	ldrb	r1, [r3, r2]
100086bc:	3801      	subs	r0, #1
100086be:	4381      	bics	r1, r0
100086c0:	5499      	strb	r1, [r3, r2]
100086c2:	e01c      	b.n	100086fe <spi_init+0x132>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
100086c4:	2224      	movs	r2, #36	; 0x24
100086c6:	5c98      	ldrb	r0, [r3, r2]
100086c8:	2102      	movs	r1, #2
100086ca:	4301      	orrs	r1, r0
100086cc:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
100086ce:	5c99      	ldrb	r1, [r3, r2]
100086d0:	2001      	movs	r0, #1
100086d2:	4381      	bics	r1, r0
100086d4:	5499      	strb	r1, [r3, r2]
100086d6:	e012      	b.n	100086fe <spi_init+0x132>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
100086d8:	2224      	movs	r2, #36	; 0x24
100086da:	5c99      	ldrb	r1, [r3, r2]
100086dc:	2002      	movs	r0, #2
100086de:	4381      	bics	r1, r0
100086e0:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
100086e2:	5c98      	ldrb	r0, [r3, r2]
100086e4:	2101      	movs	r1, #1
100086e6:	4301      	orrs	r1, r0
100086e8:	5499      	strb	r1, [r3, r2]
100086ea:	e008      	b.n	100086fe <spi_init+0x132>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
100086ec:	2224      	movs	r2, #36	; 0x24
100086ee:	5c98      	ldrb	r0, [r3, r2]
100086f0:	2102      	movs	r1, #2
100086f2:	4301      	orrs	r1, r0
100086f4:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
100086f6:	5c98      	ldrb	r0, [r3, r2]
100086f8:	2101      	movs	r1, #1
100086fa:	4301      	orrs	r1, r0
100086fc:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
100086fe:	2000      	movs	r0, #0
10008700:	b003      	add	sp, #12
10008702:	bc0c      	pop	{r2, r3}
10008704:	4690      	mov	r8, r2
10008706:	469a      	mov	sl, r3
10008708:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000870a:	46c0      	nop			; (mov r8, r8)
1000870c:	10008591 	.word	0x10008591
10008710:	40006000 	.word	0x40006000
10008714:	1000886d 	.word	0x1000886d
10008718:	40007000 	.word	0x40007000
1000871c:	10008171 	.word	0x10008171
10008720:	10008181 	.word	0x10008181
10008724:	10008379 	.word	0x10008379

10008728 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10008728:	b5f0      	push	{r4, r5, r6, r7, lr}
1000872a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000872c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000872e:	2600      	movs	r6, #0
10008730:	466d      	mov	r5, sp
10008732:	71ee      	strb	r6, [r5, #7]
10008734:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10008736:	2c00      	cmp	r4, #0
10008738:	d034      	beq.n	100087a4 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000873a:	2900      	cmp	r1, #0
1000873c:	d104      	bne.n	10008748 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000873e:	0029      	movs	r1, r5
10008740:	7980      	ldrb	r0, [r0, #6]
10008742:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10008744:	2701      	movs	r7, #1
10008746:	e00b      	b.n	10008760 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10008748:	2a00      	cmp	r2, #0
1000874a:	d005      	beq.n	10008758 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000874c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000874e:	2b00      	cmp	r3, #0
10008750:	d029      	beq.n	100087a6 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10008752:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008754:	2700      	movs	r7, #0
10008756:	e003      	b.n	10008760 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10008758:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000875a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000875c:	466a      	mov	r2, sp
1000875e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10008760:	2528      	movs	r5, #40	; 0x28
10008762:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10008764:	07c0      	lsls	r0, r0, #31
10008766:	d4fc      	bmi.n	10008762 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10008768:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000876a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000876c:	2b00      	cmp	r3, #0
1000876e:	d014      	beq.n	1000879a <spi_transceive_buffer_wait+0x72>
10008770:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10008772:	4278      	negs	r0, r7
10008774:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10008776:	4270      	negs	r0, r6
10008778:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000877a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000877c:	07c0      	lsls	r0, r0, #31
1000877e:	d5fc      	bpl.n	1000877a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10008780:	7808      	ldrb	r0, [r1, #0]
10008782:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10008784:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10008786:	07c0      	lsls	r0, r0, #31
10008788:	d5fc      	bpl.n	10008784 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000878a:	7920      	ldrb	r0, [r4, #4]
1000878c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000878e:	3501      	adds	r5, #1
10008790:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10008792:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10008794:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10008796:	42ab      	cmp	r3, r5
10008798:	d1ef      	bne.n	1000877a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000879a:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000879c:	06db      	lsls	r3, r3, #27
1000879e:	d5fc      	bpl.n	1000879a <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
100087a0:	2000      	movs	r0, #0
100087a2:	e000      	b.n	100087a6 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
100087a4:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
100087a6:	b003      	add	sp, #12
100087a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100087aa:	46c0      	nop			; (mov r8, r8)

100087ac <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
100087ac:	b510      	push	{r4, lr}
100087ae:	0013      	movs	r3, r2
	return spi_transceive_buffer_wait(module, tx_data, NULL, length);
100087b0:	2200      	movs	r2, #0
100087b2:	4c01      	ldr	r4, [pc, #4]	; (100087b8 <spi_write_buffer_wait+0xc>)
100087b4:	47a0      	blx	r4
}
100087b6:	bd10      	pop	{r4, pc}
100087b8:	10008729 	.word	0x10008729

100087bc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
100087bc:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
100087be:	7808      	ldrb	r0, [r1, #0]
	if(select) {
100087c0:	2a00      	cmp	r2, #0
100087c2:	d003      	beq.n	100087cc <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
100087c4:	2100      	movs	r1, #0
100087c6:	4b04      	ldr	r3, [pc, #16]	; (100087d8 <spi_select_slave+0x1c>)
100087c8:	4798      	blx	r3
100087ca:	e002      	b.n	100087d2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
100087cc:	2101      	movs	r1, #1
100087ce:	4b02      	ldr	r3, [pc, #8]	; (100087d8 <spi_select_slave+0x1c>)
100087d0:	4798      	blx	r3
	}

	return STATUS_OK;
}
100087d2:	2000      	movs	r0, #0
100087d4:	bd10      	pop	{r4, pc}
100087d6:	46c0      	nop			; (mov r8, r8)
100087d8:	1000831d 	.word	0x1000831d

100087dc <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
100087dc:	2801      	cmp	r0, #1
100087de:	d00d      	beq.n	100087fc <system_clock_config+0x20>
100087e0:	2800      	cmp	r0, #0
100087e2:	d002      	beq.n	100087ea <system_clock_config+0xe>
100087e4:	2802      	cmp	r0, #2
100087e6:	d01c      	beq.n	10008822 <system_clock_config+0x46>
100087e8:	e02e      	b.n	10008848 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
100087ea:	4a18      	ldr	r2, [pc, #96]	; (1000884c <system_clock_config+0x70>)
100087ec:	6990      	ldr	r0, [r2, #24]
100087ee:	230c      	movs	r3, #12
100087f0:	4303      	orrs	r3, r0
100087f2:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
100087f4:	4a16      	ldr	r2, [pc, #88]	; (10008850 <system_clock_config+0x74>)
100087f6:	4b17      	ldr	r3, [pc, #92]	; (10008854 <system_clock_config+0x78>)
100087f8:	601a      	str	r2, [r3, #0]
			break;
100087fa:	e01a      	b.n	10008832 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
100087fc:	4b13      	ldr	r3, [pc, #76]	; (1000884c <system_clock_config+0x70>)
100087fe:	6998      	ldr	r0, [r3, #24]
10008800:	2208      	movs	r2, #8
10008802:	4302      	orrs	r2, r0
10008804:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008806:	699a      	ldr	r2, [r3, #24]
10008808:	2004      	movs	r0, #4
1000880a:	4382      	bics	r2, r0
1000880c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000880e:	4a12      	ldr	r2, [pc, #72]	; (10008858 <system_clock_config+0x7c>)
10008810:	6853      	ldr	r3, [r2, #4]
10008812:	2080      	movs	r0, #128	; 0x80
10008814:	0300      	lsls	r0, r0, #12
10008816:	4303      	orrs	r3, r0
10008818:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000881a:	4a10      	ldr	r2, [pc, #64]	; (1000885c <system_clock_config+0x80>)
1000881c:	4b0d      	ldr	r3, [pc, #52]	; (10008854 <system_clock_config+0x78>)
1000881e:	601a      	str	r2, [r3, #0]
			break;
10008820:	e007      	b.n	10008832 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008822:	4a0a      	ldr	r2, [pc, #40]	; (1000884c <system_clock_config+0x70>)
10008824:	6993      	ldr	r3, [r2, #24]
10008826:	200c      	movs	r0, #12
10008828:	4383      	bics	r3, r0
1000882a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000882c:	4a08      	ldr	r2, [pc, #32]	; (10008850 <system_clock_config+0x74>)
1000882e:	4b09      	ldr	r3, [pc, #36]	; (10008854 <system_clock_config+0x78>)
10008830:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008832:	4b06      	ldr	r3, [pc, #24]	; (1000884c <system_clock_config+0x70>)
10008834:	699a      	ldr	r2, [r3, #24]
10008836:	2003      	movs	r0, #3
10008838:	4382      	bics	r2, r0
1000883a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000883c:	699a      	ldr	r2, [r3, #24]
1000883e:	4001      	ands	r1, r0
10008840:	4311      	orrs	r1, r2
10008842:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008844:	2000      	movs	r0, #0
10008846:	e000      	b.n	1000884a <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008848:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000884a:	4770      	bx	lr
1000884c:	4000b000 	.word	0x4000b000
10008850:	018cba80 	.word	0x018cba80
10008854:	10012d54 	.word	0x10012d54
10008858:	4000f000 	.word	0x4000f000
1000885c:	001e8480 	.word	0x001e8480

10008860 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008860:	4b01      	ldr	r3, [pc, #4]	; (10008868 <system_clock_get_value+0x8>)
10008862:	6818      	ldr	r0, [r3, #0]
}
10008864:	4770      	bx	lr
10008866:	46c0      	nop			; (mov r8, r8)
10008868:	10012d54 	.word	0x10012d54

1000886c <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000886c:	b500      	push	{lr}
	switch (peripheral) {
1000886e:	2835      	cmp	r0, #53	; 0x35
10008870:	d900      	bls.n	10008874 <system_clock_peripheral_enable+0x8>
10008872:	e1a2      	b.n	10008bba <system_clock_peripheral_enable+0x34e>
10008874:	0080      	lsls	r0, r0, #2
10008876:	4bd2      	ldr	r3, [pc, #840]	; (10008bc0 <system_clock_peripheral_enable+0x354>)
10008878:	581b      	ldr	r3, [r3, r0]
1000887a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000887c:	4ad1      	ldr	r2, [pc, #836]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
1000887e:	68d1      	ldr	r1, [r2, #12]
10008880:	2302      	movs	r3, #2
10008882:	430b      	orrs	r3, r1
10008884:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008886:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008888:	e198      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000888a:	4ace      	ldr	r2, [pc, #824]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
1000888c:	68d1      	ldr	r1, [r2, #12]
1000888e:	2304      	movs	r3, #4
10008890:	430b      	orrs	r3, r1
10008892:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008894:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008896:	e191      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008898:	4aca      	ldr	r2, [pc, #808]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
1000889a:	68d1      	ldr	r1, [r2, #12]
1000889c:	2308      	movs	r3, #8
1000889e:	430b      	orrs	r3, r1
100088a0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
100088a4:	e18a      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088a6:	4ac7      	ldr	r2, [pc, #796]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100088a8:	68d1      	ldr	r1, [r2, #12]
100088aa:	2310      	movs	r3, #16
100088ac:	430b      	orrs	r3, r1
100088ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
100088b2:	e183      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088b4:	4ac3      	ldr	r2, [pc, #780]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100088b6:	68d1      	ldr	r1, [r2, #12]
100088b8:	2320      	movs	r3, #32
100088ba:	430b      	orrs	r3, r1
100088bc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
100088c0:	e17c      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088c2:	4ac0      	ldr	r2, [pc, #768]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100088c4:	68d1      	ldr	r1, [r2, #12]
100088c6:	2380      	movs	r3, #128	; 0x80
100088c8:	430b      	orrs	r3, r1
100088ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100088ce:	e175      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088d0:	4abc      	ldr	r2, [pc, #752]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100088d2:	68d3      	ldr	r3, [r2, #12]
100088d4:	2180      	movs	r1, #128	; 0x80
100088d6:	0049      	lsls	r1, r1, #1
100088d8:	430b      	orrs	r3, r1
100088da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
100088de:	e16d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088e0:	4ab8      	ldr	r2, [pc, #736]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100088e2:	68d3      	ldr	r3, [r2, #12]
100088e4:	2180      	movs	r1, #128	; 0x80
100088e6:	0109      	lsls	r1, r1, #4
100088e8:	430b      	orrs	r3, r1
100088ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
100088ee:	e165      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088f0:	4ab4      	ldr	r2, [pc, #720]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100088f2:	68d3      	ldr	r3, [r2, #12]
100088f4:	2180      	movs	r1, #128	; 0x80
100088f6:	0149      	lsls	r1, r1, #5
100088f8:	430b      	orrs	r3, r1
100088fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
100088fe:	e15d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008900:	4ab0      	ldr	r2, [pc, #704]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008902:	68d3      	ldr	r3, [r2, #12]
10008904:	2180      	movs	r1, #128	; 0x80
10008906:	0189      	lsls	r1, r1, #6
10008908:	430b      	orrs	r3, r1
1000890a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000890c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000890e:	e155      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008910:	4aac      	ldr	r2, [pc, #688]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008912:	68d3      	ldr	r3, [r2, #12]
10008914:	2180      	movs	r1, #128	; 0x80
10008916:	01c9      	lsls	r1, r1, #7
10008918:	430b      	orrs	r3, r1
1000891a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000891c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000891e:	e14d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008920:	4aa8      	ldr	r2, [pc, #672]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008922:	68d3      	ldr	r3, [r2, #12]
10008924:	2180      	movs	r1, #128	; 0x80
10008926:	0209      	lsls	r1, r1, #8
10008928:	430b      	orrs	r3, r1
1000892a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000892c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000892e:	e145      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008930:	4aa4      	ldr	r2, [pc, #656]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008932:	68d3      	ldr	r3, [r2, #12]
10008934:	2180      	movs	r1, #128	; 0x80
10008936:	0249      	lsls	r1, r1, #9
10008938:	430b      	orrs	r3, r1
1000893a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000893c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000893e:	e13d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008940:	4aa0      	ldr	r2, [pc, #640]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008942:	68d3      	ldr	r3, [r2, #12]
10008944:	2180      	movs	r1, #128	; 0x80
10008946:	0289      	lsls	r1, r1, #10
10008948:	430b      	orrs	r3, r1
1000894a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000894c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000894e:	e135      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008950:	4a9c      	ldr	r2, [pc, #624]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008952:	68d3      	ldr	r3, [r2, #12]
10008954:	2180      	movs	r1, #128	; 0x80
10008956:	02c9      	lsls	r1, r1, #11
10008958:	430b      	orrs	r3, r1
1000895a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000895c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000895e:	e12d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008960:	4a98      	ldr	r2, [pc, #608]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008962:	68d3      	ldr	r3, [r2, #12]
10008964:	2180      	movs	r1, #128	; 0x80
10008966:	0309      	lsls	r1, r1, #12
10008968:	430b      	orrs	r3, r1
1000896a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000896c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000896e:	e125      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008970:	4a94      	ldr	r2, [pc, #592]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008972:	68d3      	ldr	r3, [r2, #12]
10008974:	2180      	movs	r1, #128	; 0x80
10008976:	0349      	lsls	r1, r1, #13
10008978:	430b      	orrs	r3, r1
1000897a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000897c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000897e:	e11d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008980:	4a90      	ldr	r2, [pc, #576]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008982:	68d3      	ldr	r3, [r2, #12]
10008984:	2180      	movs	r1, #128	; 0x80
10008986:	0389      	lsls	r1, r1, #14
10008988:	430b      	orrs	r3, r1
1000898a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000898c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000898e:	e115      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008990:	4a8c      	ldr	r2, [pc, #560]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008992:	68d3      	ldr	r3, [r2, #12]
10008994:	2180      	movs	r1, #128	; 0x80
10008996:	03c9      	lsls	r1, r1, #15
10008998:	430b      	orrs	r3, r1
1000899a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000899c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000899e:	e10d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089a0:	4a88      	ldr	r2, [pc, #544]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100089a2:	68d3      	ldr	r3, [r2, #12]
100089a4:	2180      	movs	r1, #128	; 0x80
100089a6:	0409      	lsls	r1, r1, #16
100089a8:	430b      	orrs	r3, r1
100089aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100089ae:	e105      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089b0:	4a84      	ldr	r2, [pc, #528]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100089b2:	68d3      	ldr	r3, [r2, #12]
100089b4:	2180      	movs	r1, #128	; 0x80
100089b6:	0449      	lsls	r1, r1, #17
100089b8:	430b      	orrs	r3, r1
100089ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100089be:	e0fd      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089c0:	4a80      	ldr	r2, [pc, #512]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100089c2:	68d3      	ldr	r3, [r2, #12]
100089c4:	2180      	movs	r1, #128	; 0x80
100089c6:	0489      	lsls	r1, r1, #18
100089c8:	430b      	orrs	r3, r1
100089ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
100089ce:	e0f5      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089d0:	4a7c      	ldr	r2, [pc, #496]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100089d2:	68d3      	ldr	r3, [r2, #12]
100089d4:	2180      	movs	r1, #128	; 0x80
100089d6:	04c9      	lsls	r1, r1, #19
100089d8:	430b      	orrs	r3, r1
100089da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
100089de:	e0ed      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089e0:	4a78      	ldr	r2, [pc, #480]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100089e2:	68d3      	ldr	r3, [r2, #12]
100089e4:	2180      	movs	r1, #128	; 0x80
100089e6:	0509      	lsls	r1, r1, #20
100089e8:	430b      	orrs	r3, r1
100089ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
100089ee:	e0e5      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089f0:	4a74      	ldr	r2, [pc, #464]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
100089f2:	68d3      	ldr	r3, [r2, #12]
100089f4:	2180      	movs	r1, #128	; 0x80
100089f6:	0549      	lsls	r1, r1, #21
100089f8:	430b      	orrs	r3, r1
100089fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
100089fe:	e0dd      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a00:	4a70      	ldr	r2, [pc, #448]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a02:	68d3      	ldr	r3, [r2, #12]
10008a04:	2180      	movs	r1, #128	; 0x80
10008a06:	0589      	lsls	r1, r1, #22
10008a08:	430b      	orrs	r3, r1
10008a0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008a0e:	e0d5      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a10:	4a6c      	ldr	r2, [pc, #432]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a12:	68d3      	ldr	r3, [r2, #12]
10008a14:	2180      	movs	r1, #128	; 0x80
10008a16:	05c9      	lsls	r1, r1, #23
10008a18:	430b      	orrs	r3, r1
10008a1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008a1e:	e0cd      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a20:	4a68      	ldr	r2, [pc, #416]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a22:	6911      	ldr	r1, [r2, #16]
10008a24:	2301      	movs	r3, #1
10008a26:	430b      	orrs	r3, r1
10008a28:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008a2c:	e0c6      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a2e:	4a65      	ldr	r2, [pc, #404]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a30:	6911      	ldr	r1, [r2, #16]
10008a32:	2302      	movs	r3, #2
10008a34:	430b      	orrs	r3, r1
10008a36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008a3a:	e0bf      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a3c:	4a61      	ldr	r2, [pc, #388]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a3e:	6911      	ldr	r1, [r2, #16]
10008a40:	2304      	movs	r3, #4
10008a42:	430b      	orrs	r3, r1
10008a44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008a48:	e0b8      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a4a:	4a5e      	ldr	r2, [pc, #376]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a4c:	6911      	ldr	r1, [r2, #16]
10008a4e:	2308      	movs	r3, #8
10008a50:	430b      	orrs	r3, r1
10008a52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008a56:	e0b1      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a58:	4a5a      	ldr	r2, [pc, #360]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a5a:	6911      	ldr	r1, [r2, #16]
10008a5c:	2310      	movs	r3, #16
10008a5e:	430b      	orrs	r3, r1
10008a60:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008a64:	e0aa      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a66:	4a57      	ldr	r2, [pc, #348]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a68:	6911      	ldr	r1, [r2, #16]
10008a6a:	2320      	movs	r3, #32
10008a6c:	430b      	orrs	r3, r1
10008a6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008a72:	e0a3      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a74:	4a53      	ldr	r2, [pc, #332]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a76:	6911      	ldr	r1, [r2, #16]
10008a78:	2340      	movs	r3, #64	; 0x40
10008a7a:	430b      	orrs	r3, r1
10008a7c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008a80:	e09c      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a82:	4a50      	ldr	r2, [pc, #320]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a84:	6911      	ldr	r1, [r2, #16]
10008a86:	2380      	movs	r3, #128	; 0x80
10008a88:	430b      	orrs	r3, r1
10008a8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008a8e:	e095      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a90:	4a4c      	ldr	r2, [pc, #304]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008a92:	6913      	ldr	r3, [r2, #16]
10008a94:	2180      	movs	r1, #128	; 0x80
10008a96:	0049      	lsls	r1, r1, #1
10008a98:	430b      	orrs	r3, r1
10008a9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008a9e:	e08d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aa0:	4a48      	ldr	r2, [pc, #288]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008aa2:	6913      	ldr	r3, [r2, #16]
10008aa4:	2180      	movs	r1, #128	; 0x80
10008aa6:	0089      	lsls	r1, r1, #2
10008aa8:	430b      	orrs	r3, r1
10008aaa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008aae:	e085      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ab0:	4a44      	ldr	r2, [pc, #272]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008ab2:	6913      	ldr	r3, [r2, #16]
10008ab4:	2180      	movs	r1, #128	; 0x80
10008ab6:	00c9      	lsls	r1, r1, #3
10008ab8:	430b      	orrs	r3, r1
10008aba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008abc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008abe:	e07d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ac0:	4a40      	ldr	r2, [pc, #256]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008ac2:	6913      	ldr	r3, [r2, #16]
10008ac4:	2180      	movs	r1, #128	; 0x80
10008ac6:	0109      	lsls	r1, r1, #4
10008ac8:	430b      	orrs	r3, r1
10008aca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008acc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008ace:	e075      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ad0:	4a3c      	ldr	r2, [pc, #240]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008ad2:	6913      	ldr	r3, [r2, #16]
10008ad4:	2180      	movs	r1, #128	; 0x80
10008ad6:	0149      	lsls	r1, r1, #5
10008ad8:	430b      	orrs	r3, r1
10008ada:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008adc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008ade:	e06d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ae0:	4a38      	ldr	r2, [pc, #224]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008ae2:	6913      	ldr	r3, [r2, #16]
10008ae4:	2180      	movs	r1, #128	; 0x80
10008ae6:	0189      	lsls	r1, r1, #6
10008ae8:	430b      	orrs	r3, r1
10008aea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008aee:	e065      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008af0:	4a34      	ldr	r2, [pc, #208]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008af2:	6913      	ldr	r3, [r2, #16]
10008af4:	2180      	movs	r1, #128	; 0x80
10008af6:	01c9      	lsls	r1, r1, #7
10008af8:	430b      	orrs	r3, r1
10008afa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008afc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008afe:	e05d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b00:	4a30      	ldr	r2, [pc, #192]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b02:	6913      	ldr	r3, [r2, #16]
10008b04:	2180      	movs	r1, #128	; 0x80
10008b06:	0209      	lsls	r1, r1, #8
10008b08:	430b      	orrs	r3, r1
10008b0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008b0e:	e055      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b10:	4a2c      	ldr	r2, [pc, #176]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b12:	6913      	ldr	r3, [r2, #16]
10008b14:	2180      	movs	r1, #128	; 0x80
10008b16:	0249      	lsls	r1, r1, #9
10008b18:	430b      	orrs	r3, r1
10008b1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008b1e:	e04d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b20:	4a28      	ldr	r2, [pc, #160]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b22:	6913      	ldr	r3, [r2, #16]
10008b24:	2180      	movs	r1, #128	; 0x80
10008b26:	0289      	lsls	r1, r1, #10
10008b28:	430b      	orrs	r3, r1
10008b2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008b2e:	e045      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b30:	4a24      	ldr	r2, [pc, #144]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b32:	6913      	ldr	r3, [r2, #16]
10008b34:	2180      	movs	r1, #128	; 0x80
10008b36:	02c9      	lsls	r1, r1, #11
10008b38:	430b      	orrs	r3, r1
10008b3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008b3e:	e03d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b40:	4a20      	ldr	r2, [pc, #128]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b42:	6913      	ldr	r3, [r2, #16]
10008b44:	2180      	movs	r1, #128	; 0x80
10008b46:	0309      	lsls	r1, r1, #12
10008b48:	430b      	orrs	r3, r1
10008b4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008b4e:	e035      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b50:	4a1c      	ldr	r2, [pc, #112]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b52:	6913      	ldr	r3, [r2, #16]
10008b54:	2180      	movs	r1, #128	; 0x80
10008b56:	0349      	lsls	r1, r1, #13
10008b58:	430b      	orrs	r3, r1
10008b5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008b5e:	e02d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b60:	4a18      	ldr	r2, [pc, #96]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b62:	6913      	ldr	r3, [r2, #16]
10008b64:	2180      	movs	r1, #128	; 0x80
10008b66:	0389      	lsls	r1, r1, #14
10008b68:	430b      	orrs	r3, r1
10008b6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008b6e:	e025      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b70:	4a14      	ldr	r2, [pc, #80]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b72:	6913      	ldr	r3, [r2, #16]
10008b74:	2180      	movs	r1, #128	; 0x80
10008b76:	03c9      	lsls	r1, r1, #15
10008b78:	430b      	orrs	r3, r1
10008b7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008b7e:	e01d      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b80:	4a10      	ldr	r2, [pc, #64]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b82:	6913      	ldr	r3, [r2, #16]
10008b84:	2180      	movs	r1, #128	; 0x80
10008b86:	0409      	lsls	r1, r1, #16
10008b88:	430b      	orrs	r3, r1
10008b8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008b8e:	e015      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008b90:	4a0c      	ldr	r2, [pc, #48]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008b92:	7d11      	ldrb	r1, [r2, #20]
10008b94:	2301      	movs	r3, #1
10008b96:	430b      	orrs	r3, r1
10008b98:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008b9c:	e00e      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008b9e:	4a09      	ldr	r2, [pc, #36]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008ba0:	7d11      	ldrb	r1, [r2, #20]
10008ba2:	2302      	movs	r3, #2
10008ba4:	430b      	orrs	r3, r1
10008ba6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ba8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008baa:	e007      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008bac:	4a05      	ldr	r2, [pc, #20]	; (10008bc4 <system_clock_peripheral_enable+0x358>)
10008bae:	7d11      	ldrb	r1, [r2, #20]
10008bb0:	2304      	movs	r3, #4
10008bb2:	430b      	orrs	r3, r1
10008bb4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008bb8:	e000      	b.n	10008bbc <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008bba:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008bbc:	bd00      	pop	{pc}
10008bbe:	46c0      	nop			; (mov r8, r8)
10008bc0:	1001115c 	.word	0x1001115c
10008bc4:	4000b000 	.word	0x4000b000

10008bc8 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
10008bc8:	b500      	push	{lr}
	switch (peripheral) {
10008bca:	2835      	cmp	r0, #53	; 0x35
10008bcc:	d900      	bls.n	10008bd0 <system_clock_peripheral_disable+0x8>
10008bce:	e17d      	b.n	10008ecc <system_clock_peripheral_disable+0x304>
10008bd0:	0080      	lsls	r0, r0, #2
10008bd2:	4bbf      	ldr	r3, [pc, #764]	; (10008ed0 <system_clock_peripheral_disable+0x308>)
10008bd4:	581b      	ldr	r3, [r3, r0]
10008bd6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008bd8:	4abe      	ldr	r2, [pc, #760]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008bda:	68d3      	ldr	r3, [r2, #12]
10008bdc:	2102      	movs	r1, #2
10008bde:	438b      	bics	r3, r1
10008be0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008be2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008be4:	e173      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008be6:	4abb      	ldr	r2, [pc, #748]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008be8:	68d3      	ldr	r3, [r2, #12]
10008bea:	2104      	movs	r1, #4
10008bec:	438b      	bics	r3, r1
10008bee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008bf2:	e16c      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008bf4:	4ab7      	ldr	r2, [pc, #732]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008bf6:	68d3      	ldr	r3, [r2, #12]
10008bf8:	2108      	movs	r1, #8
10008bfa:	438b      	bics	r3, r1
10008bfc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008c00:	e165      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c02:	4ab4      	ldr	r2, [pc, #720]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c04:	68d3      	ldr	r3, [r2, #12]
10008c06:	2110      	movs	r1, #16
10008c08:	438b      	bics	r3, r1
10008c0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008c0e:	e15e      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c10:	4ab0      	ldr	r2, [pc, #704]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c12:	68d3      	ldr	r3, [r2, #12]
10008c14:	2120      	movs	r1, #32
10008c16:	438b      	bics	r3, r1
10008c18:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c1a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008c1c:	e157      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c1e:	4aad      	ldr	r2, [pc, #692]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c20:	68d3      	ldr	r3, [r2, #12]
10008c22:	2180      	movs	r1, #128	; 0x80
10008c24:	438b      	bics	r3, r1
10008c26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008c2a:	e150      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c2c:	4aa9      	ldr	r2, [pc, #676]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c2e:	68d1      	ldr	r1, [r2, #12]
10008c30:	4ba9      	ldr	r3, [pc, #676]	; (10008ed8 <system_clock_peripheral_disable+0x310>)
10008c32:	400b      	ands	r3, r1
10008c34:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c36:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008c38:	e149      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c3a:	4aa6      	ldr	r2, [pc, #664]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c3c:	68d1      	ldr	r1, [r2, #12]
10008c3e:	4ba7      	ldr	r3, [pc, #668]	; (10008edc <system_clock_peripheral_disable+0x314>)
10008c40:	400b      	ands	r3, r1
10008c42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008c46:	e142      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c48:	4aa2      	ldr	r2, [pc, #648]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c4a:	68d1      	ldr	r1, [r2, #12]
10008c4c:	4ba4      	ldr	r3, [pc, #656]	; (10008ee0 <system_clock_peripheral_disable+0x318>)
10008c4e:	400b      	ands	r3, r1
10008c50:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c52:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008c54:	e13b      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c56:	4a9f      	ldr	r2, [pc, #636]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c58:	68d1      	ldr	r1, [r2, #12]
10008c5a:	4ba2      	ldr	r3, [pc, #648]	; (10008ee4 <system_clock_peripheral_disable+0x31c>)
10008c5c:	400b      	ands	r3, r1
10008c5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008c62:	e134      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c64:	4a9b      	ldr	r2, [pc, #620]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c66:	68d1      	ldr	r1, [r2, #12]
10008c68:	4b9f      	ldr	r3, [pc, #636]	; (10008ee8 <system_clock_peripheral_disable+0x320>)
10008c6a:	400b      	ands	r3, r1
10008c6c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c6e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008c70:	e12d      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c72:	4a98      	ldr	r2, [pc, #608]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c74:	68d1      	ldr	r1, [r2, #12]
10008c76:	4b9d      	ldr	r3, [pc, #628]	; (10008eec <system_clock_peripheral_disable+0x324>)
10008c78:	400b      	ands	r3, r1
10008c7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008c7e:	e126      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c80:	4a94      	ldr	r2, [pc, #592]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c82:	68d1      	ldr	r1, [r2, #12]
10008c84:	4b9a      	ldr	r3, [pc, #616]	; (10008ef0 <system_clock_peripheral_disable+0x328>)
10008c86:	400b      	ands	r3, r1
10008c88:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008c8c:	e11f      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c8e:	4a91      	ldr	r2, [pc, #580]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c90:	68d1      	ldr	r1, [r2, #12]
10008c92:	4b98      	ldr	r3, [pc, #608]	; (10008ef4 <system_clock_peripheral_disable+0x32c>)
10008c94:	400b      	ands	r3, r1
10008c96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008c9a:	e118      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008c9c:	4a8d      	ldr	r2, [pc, #564]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008c9e:	68d1      	ldr	r1, [r2, #12]
10008ca0:	4b95      	ldr	r3, [pc, #596]	; (10008ef8 <system_clock_peripheral_disable+0x330>)
10008ca2:	400b      	ands	r3, r1
10008ca4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ca6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008ca8:	e111      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008caa:	4a8a      	ldr	r2, [pc, #552]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008cac:	68d1      	ldr	r1, [r2, #12]
10008cae:	4b93      	ldr	r3, [pc, #588]	; (10008efc <system_clock_peripheral_disable+0x334>)
10008cb0:	400b      	ands	r3, r1
10008cb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008cb6:	e10a      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008cb8:	4a86      	ldr	r2, [pc, #536]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008cba:	68d1      	ldr	r1, [r2, #12]
10008cbc:	4b90      	ldr	r3, [pc, #576]	; (10008f00 <system_clock_peripheral_disable+0x338>)
10008cbe:	400b      	ands	r3, r1
10008cc0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cc2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008cc4:	e103      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008cc6:	4a83      	ldr	r2, [pc, #524]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008cc8:	68d1      	ldr	r1, [r2, #12]
10008cca:	4b8e      	ldr	r3, [pc, #568]	; (10008f04 <system_clock_peripheral_disable+0x33c>)
10008ccc:	400b      	ands	r3, r1
10008cce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008cd2:	e0fc      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008cd4:	4a7f      	ldr	r2, [pc, #508]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008cd6:	68d1      	ldr	r1, [r2, #12]
10008cd8:	4b8b      	ldr	r3, [pc, #556]	; (10008f08 <system_clock_peripheral_disable+0x340>)
10008cda:	400b      	ands	r3, r1
10008cdc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008ce0:	e0f5      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008ce2:	4a7c      	ldr	r2, [pc, #496]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008ce4:	68d1      	ldr	r1, [r2, #12]
10008ce6:	4b89      	ldr	r3, [pc, #548]	; (10008f0c <system_clock_peripheral_disable+0x344>)
10008ce8:	400b      	ands	r3, r1
10008cea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008cee:	e0ee      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008cf0:	4a78      	ldr	r2, [pc, #480]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008cf2:	68d1      	ldr	r1, [r2, #12]
10008cf4:	4b86      	ldr	r3, [pc, #536]	; (10008f10 <system_clock_peripheral_disable+0x348>)
10008cf6:	400b      	ands	r3, r1
10008cf8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cfa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008cfc:	e0e7      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008cfe:	4a75      	ldr	r2, [pc, #468]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d00:	68d1      	ldr	r1, [r2, #12]
10008d02:	4b84      	ldr	r3, [pc, #528]	; (10008f14 <system_clock_peripheral_disable+0x34c>)
10008d04:	400b      	ands	r3, r1
10008d06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008d0a:	e0e0      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008d0c:	4a71      	ldr	r2, [pc, #452]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d0e:	68d1      	ldr	r1, [r2, #12]
10008d10:	4b81      	ldr	r3, [pc, #516]	; (10008f18 <system_clock_peripheral_disable+0x350>)
10008d12:	400b      	ands	r3, r1
10008d14:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008d18:	e0d9      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008d1a:	4a6e      	ldr	r2, [pc, #440]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d1c:	68d1      	ldr	r1, [r2, #12]
10008d1e:	4b7f      	ldr	r3, [pc, #508]	; (10008f1c <system_clock_peripheral_disable+0x354>)
10008d20:	400b      	ands	r3, r1
10008d22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008d26:	e0d2      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008d28:	4a6a      	ldr	r2, [pc, #424]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d2a:	68d1      	ldr	r1, [r2, #12]
10008d2c:	4b7c      	ldr	r3, [pc, #496]	; (10008f20 <system_clock_peripheral_disable+0x358>)
10008d2e:	400b      	ands	r3, r1
10008d30:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008d34:	e0cb      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008d36:	4a67      	ldr	r2, [pc, #412]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d38:	68d1      	ldr	r1, [r2, #12]
10008d3a:	4b7a      	ldr	r3, [pc, #488]	; (10008f24 <system_clock_peripheral_disable+0x35c>)
10008d3c:	400b      	ands	r3, r1
10008d3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008d42:	e0c4      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008d44:	4a63      	ldr	r2, [pc, #396]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d46:	68d1      	ldr	r1, [r2, #12]
10008d48:	4b77      	ldr	r3, [pc, #476]	; (10008f28 <system_clock_peripheral_disable+0x360>)
10008d4a:	400b      	ands	r3, r1
10008d4c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008d50:	e0bd      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008d52:	4a60      	ldr	r2, [pc, #384]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d54:	6913      	ldr	r3, [r2, #16]
10008d56:	2101      	movs	r1, #1
10008d58:	438b      	bics	r3, r1
10008d5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008d5e:	e0b6      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008d60:	4a5c      	ldr	r2, [pc, #368]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d62:	6913      	ldr	r3, [r2, #16]
10008d64:	2102      	movs	r1, #2
10008d66:	438b      	bics	r3, r1
10008d68:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008d6c:	e0af      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008d6e:	4a59      	ldr	r2, [pc, #356]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d70:	6913      	ldr	r3, [r2, #16]
10008d72:	2104      	movs	r1, #4
10008d74:	438b      	bics	r3, r1
10008d76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008d7a:	e0a8      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008d7c:	4a55      	ldr	r2, [pc, #340]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d7e:	6913      	ldr	r3, [r2, #16]
10008d80:	2108      	movs	r1, #8
10008d82:	438b      	bics	r3, r1
10008d84:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008d88:	e0a1      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008d8a:	4a52      	ldr	r2, [pc, #328]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d8c:	6913      	ldr	r3, [r2, #16]
10008d8e:	2110      	movs	r1, #16
10008d90:	438b      	bics	r3, r1
10008d92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008d96:	e09a      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008d98:	4a4e      	ldr	r2, [pc, #312]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008d9a:	6913      	ldr	r3, [r2, #16]
10008d9c:	2120      	movs	r1, #32
10008d9e:	438b      	bics	r3, r1
10008da0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008da4:	e093      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008da6:	4a4b      	ldr	r2, [pc, #300]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008da8:	6913      	ldr	r3, [r2, #16]
10008daa:	2140      	movs	r1, #64	; 0x40
10008dac:	438b      	bics	r3, r1
10008dae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008db0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008db2:	e08c      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008db4:	4a47      	ldr	r2, [pc, #284]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008db6:	6913      	ldr	r3, [r2, #16]
10008db8:	2180      	movs	r1, #128	; 0x80
10008dba:	438b      	bics	r3, r1
10008dbc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008dc0:	e085      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008dc2:	4a44      	ldr	r2, [pc, #272]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008dc4:	6911      	ldr	r1, [r2, #16]
10008dc6:	4b44      	ldr	r3, [pc, #272]	; (10008ed8 <system_clock_peripheral_disable+0x310>)
10008dc8:	400b      	ands	r3, r1
10008dca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008dce:	e07e      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008dd0:	4a40      	ldr	r2, [pc, #256]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008dd2:	6911      	ldr	r1, [r2, #16]
10008dd4:	4b55      	ldr	r3, [pc, #340]	; (10008f2c <system_clock_peripheral_disable+0x364>)
10008dd6:	400b      	ands	r3, r1
10008dd8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008ddc:	e077      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008dde:	4a3d      	ldr	r2, [pc, #244]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008de0:	6911      	ldr	r1, [r2, #16]
10008de2:	4b53      	ldr	r3, [pc, #332]	; (10008f30 <system_clock_peripheral_disable+0x368>)
10008de4:	400b      	ands	r3, r1
10008de6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008de8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008dea:	e070      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008dec:	4a39      	ldr	r2, [pc, #228]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008dee:	6911      	ldr	r1, [r2, #16]
10008df0:	4b3a      	ldr	r3, [pc, #232]	; (10008edc <system_clock_peripheral_disable+0x314>)
10008df2:	400b      	ands	r3, r1
10008df4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008df6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008df8:	e069      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008dfa:	4a36      	ldr	r2, [pc, #216]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008dfc:	6911      	ldr	r1, [r2, #16]
10008dfe:	4b38      	ldr	r3, [pc, #224]	; (10008ee0 <system_clock_peripheral_disable+0x318>)
10008e00:	400b      	ands	r3, r1
10008e02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008e06:	e062      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e08:	4a32      	ldr	r2, [pc, #200]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e0a:	6911      	ldr	r1, [r2, #16]
10008e0c:	4b35      	ldr	r3, [pc, #212]	; (10008ee4 <system_clock_peripheral_disable+0x31c>)
10008e0e:	400b      	ands	r3, r1
10008e10:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008e14:	e05b      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e16:	4a2f      	ldr	r2, [pc, #188]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e18:	6911      	ldr	r1, [r2, #16]
10008e1a:	4b33      	ldr	r3, [pc, #204]	; (10008ee8 <system_clock_peripheral_disable+0x320>)
10008e1c:	400b      	ands	r3, r1
10008e1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008e22:	e054      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e24:	4a2b      	ldr	r2, [pc, #172]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e26:	6911      	ldr	r1, [r2, #16]
10008e28:	4b30      	ldr	r3, [pc, #192]	; (10008eec <system_clock_peripheral_disable+0x324>)
10008e2a:	400b      	ands	r3, r1
10008e2c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008e30:	e04d      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e32:	4a28      	ldr	r2, [pc, #160]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e34:	6911      	ldr	r1, [r2, #16]
10008e36:	4b2e      	ldr	r3, [pc, #184]	; (10008ef0 <system_clock_peripheral_disable+0x328>)
10008e38:	400b      	ands	r3, r1
10008e3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008e3e:	e046      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e40:	4a24      	ldr	r2, [pc, #144]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e42:	6911      	ldr	r1, [r2, #16]
10008e44:	4b2b      	ldr	r3, [pc, #172]	; (10008ef4 <system_clock_peripheral_disable+0x32c>)
10008e46:	400b      	ands	r3, r1
10008e48:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008e4c:	e03f      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e4e:	4a21      	ldr	r2, [pc, #132]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e50:	6911      	ldr	r1, [r2, #16]
10008e52:	4b29      	ldr	r3, [pc, #164]	; (10008ef8 <system_clock_peripheral_disable+0x330>)
10008e54:	400b      	ands	r3, r1
10008e56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008e5a:	e038      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e5c:	4a1d      	ldr	r2, [pc, #116]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e5e:	6911      	ldr	r1, [r2, #16]
10008e60:	4b26      	ldr	r3, [pc, #152]	; (10008efc <system_clock_peripheral_disable+0x334>)
10008e62:	400b      	ands	r3, r1
10008e64:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008e68:	e031      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e6a:	4a1a      	ldr	r2, [pc, #104]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e6c:	6911      	ldr	r1, [r2, #16]
10008e6e:	4b24      	ldr	r3, [pc, #144]	; (10008f00 <system_clock_peripheral_disable+0x338>)
10008e70:	400b      	ands	r3, r1
10008e72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008e76:	e02a      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e78:	4a16      	ldr	r2, [pc, #88]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e7a:	6911      	ldr	r1, [r2, #16]
10008e7c:	4b21      	ldr	r3, [pc, #132]	; (10008f04 <system_clock_peripheral_disable+0x33c>)
10008e7e:	400b      	ands	r3, r1
10008e80:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008e84:	e023      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e86:	4a13      	ldr	r2, [pc, #76]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e88:	6911      	ldr	r1, [r2, #16]
10008e8a:	4b1f      	ldr	r3, [pc, #124]	; (10008f08 <system_clock_peripheral_disable+0x340>)
10008e8c:	400b      	ands	r3, r1
10008e8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008e92:	e01c      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008e94:	4a0f      	ldr	r2, [pc, #60]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008e96:	6911      	ldr	r1, [r2, #16]
10008e98:	4b1c      	ldr	r3, [pc, #112]	; (10008f0c <system_clock_peripheral_disable+0x344>)
10008e9a:	400b      	ands	r3, r1
10008e9c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e9e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008ea0:	e015      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
10008ea2:	4a0c      	ldr	r2, [pc, #48]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008ea4:	7d13      	ldrb	r3, [r2, #20]
10008ea6:	2101      	movs	r1, #1
10008ea8:	438b      	bics	r3, r1
10008eaa:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008eae:	e00e      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
10008eb0:	4a08      	ldr	r2, [pc, #32]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008eb2:	7d13      	ldrb	r3, [r2, #20]
10008eb4:	2102      	movs	r1, #2
10008eb6:	438b      	bics	r3, r1
10008eb8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008ebc:	e007      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
10008ebe:	4a05      	ldr	r2, [pc, #20]	; (10008ed4 <system_clock_peripheral_disable+0x30c>)
10008ec0:	7d13      	ldrb	r3, [r2, #20]
10008ec2:	2104      	movs	r1, #4
10008ec4:	438b      	bics	r3, r1
10008ec6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008eca:	e000      	b.n	10008ece <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
10008ecc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008ece:	bd00      	pop	{pc}
10008ed0:	10011234 	.word	0x10011234
10008ed4:	4000b000 	.word	0x4000b000
10008ed8:	fffffeff 	.word	0xfffffeff
10008edc:	fffff7ff 	.word	0xfffff7ff
10008ee0:	ffffefff 	.word	0xffffefff
10008ee4:	ffffdfff 	.word	0xffffdfff
10008ee8:	ffffbfff 	.word	0xffffbfff
10008eec:	ffff7fff 	.word	0xffff7fff
10008ef0:	fffeffff 	.word	0xfffeffff
10008ef4:	fffdffff 	.word	0xfffdffff
10008ef8:	fffbffff 	.word	0xfffbffff
10008efc:	fff7ffff 	.word	0xfff7ffff
10008f00:	ffefffff 	.word	0xffefffff
10008f04:	ffdfffff 	.word	0xffdfffff
10008f08:	ffbfffff 	.word	0xffbfffff
10008f0c:	ff7fffff 	.word	0xff7fffff
10008f10:	feffffff 	.word	0xfeffffff
10008f14:	fdffffff 	.word	0xfdffffff
10008f18:	fbffffff 	.word	0xfbffffff
10008f1c:	f7ffffff 	.word	0xf7ffffff
10008f20:	efffffff 	.word	0xefffffff
10008f24:	dfffffff 	.word	0xdfffffff
10008f28:	bfffffff 	.word	0xbfffffff
10008f2c:	fffffdff 	.word	0xfffffdff
10008f30:	fffffbff 	.word	0xfffffbff

10008f34 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008f34:	b500      	push	{lr}
	switch (peripheral) {
10008f36:	2843      	cmp	r0, #67	; 0x43
10008f38:	d900      	bls.n	10008f3c <system_peripheral_reset+0x8>
10008f3a:	e223      	b.n	10009384 <system_peripheral_reset+0x450>
10008f3c:	0080      	lsls	r0, r0, #2
10008f3e:	4be0      	ldr	r3, [pc, #896]	; (100092c0 <system_peripheral_reset+0x38c>)
10008f40:	581b      	ldr	r3, [r3, r0]
10008f42:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f44:	4bdf      	ldr	r3, [pc, #892]	; (100092c4 <system_peripheral_reset+0x390>)
10008f46:	6859      	ldr	r1, [r3, #4]
10008f48:	2202      	movs	r2, #2
10008f4a:	4391      	bics	r1, r2
10008f4c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f4e:	6859      	ldr	r1, [r3, #4]
10008f50:	430a      	orrs	r2, r1
10008f52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f54:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008f56:	e216      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f58:	4bda      	ldr	r3, [pc, #872]	; (100092c4 <system_peripheral_reset+0x390>)
10008f5a:	6859      	ldr	r1, [r3, #4]
10008f5c:	2204      	movs	r2, #4
10008f5e:	4391      	bics	r1, r2
10008f60:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f62:	6859      	ldr	r1, [r3, #4]
10008f64:	430a      	orrs	r2, r1
10008f66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f68:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008f6a:	e20c      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f6c:	4bd5      	ldr	r3, [pc, #852]	; (100092c4 <system_peripheral_reset+0x390>)
10008f6e:	6859      	ldr	r1, [r3, #4]
10008f70:	2208      	movs	r2, #8
10008f72:	4391      	bics	r1, r2
10008f74:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f76:	6859      	ldr	r1, [r3, #4]
10008f78:	430a      	orrs	r2, r1
10008f7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f7c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10008f7e:	e202      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f80:	4bd0      	ldr	r3, [pc, #832]	; (100092c4 <system_peripheral_reset+0x390>)
10008f82:	6859      	ldr	r1, [r3, #4]
10008f84:	2210      	movs	r2, #16
10008f86:	4391      	bics	r1, r2
10008f88:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f8a:	6859      	ldr	r1, [r3, #4]
10008f8c:	430a      	orrs	r2, r1
10008f8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f90:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10008f92:	e1f8      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f94:	4bcb      	ldr	r3, [pc, #812]	; (100092c4 <system_peripheral_reset+0x390>)
10008f96:	6859      	ldr	r1, [r3, #4]
10008f98:	2220      	movs	r2, #32
10008f9a:	4391      	bics	r1, r2
10008f9c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f9e:	6859      	ldr	r1, [r3, #4]
10008fa0:	430a      	orrs	r2, r1
10008fa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008fa6:	e1ee      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fa8:	4bc6      	ldr	r3, [pc, #792]	; (100092c4 <system_peripheral_reset+0x390>)
10008faa:	6859      	ldr	r1, [r3, #4]
10008fac:	2240      	movs	r2, #64	; 0x40
10008fae:	4391      	bics	r1, r2
10008fb0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fb2:	6859      	ldr	r1, [r3, #4]
10008fb4:	430a      	orrs	r2, r1
10008fb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10008fba:	e1e4      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fbc:	4bc1      	ldr	r3, [pc, #772]	; (100092c4 <system_peripheral_reset+0x390>)
10008fbe:	6859      	ldr	r1, [r3, #4]
10008fc0:	2280      	movs	r2, #128	; 0x80
10008fc2:	4391      	bics	r1, r2
10008fc4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fc6:	6859      	ldr	r1, [r3, #4]
10008fc8:	430a      	orrs	r2, r1
10008fca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fcc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10008fce:	e1da      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fd0:	4bbc      	ldr	r3, [pc, #752]	; (100092c4 <system_peripheral_reset+0x390>)
10008fd2:	6859      	ldr	r1, [r3, #4]
10008fd4:	4abc      	ldr	r2, [pc, #752]	; (100092c8 <system_peripheral_reset+0x394>)
10008fd6:	400a      	ands	r2, r1
10008fd8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008fda:	685a      	ldr	r2, [r3, #4]
10008fdc:	2180      	movs	r1, #128	; 0x80
10008fde:	0049      	lsls	r1, r1, #1
10008fe0:	430a      	orrs	r2, r1
10008fe2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fe4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10008fe6:	e1ce      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008fe8:	4bb6      	ldr	r3, [pc, #728]	; (100092c4 <system_peripheral_reset+0x390>)
10008fea:	6859      	ldr	r1, [r3, #4]
10008fec:	4ab7      	ldr	r2, [pc, #732]	; (100092cc <system_peripheral_reset+0x398>)
10008fee:	400a      	ands	r2, r1
10008ff0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ff2:	685a      	ldr	r2, [r3, #4]
10008ff4:	2180      	movs	r1, #128	; 0x80
10008ff6:	0089      	lsls	r1, r1, #2
10008ff8:	430a      	orrs	r2, r1
10008ffa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ffc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10008ffe:	e1c2      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009000:	4bb0      	ldr	r3, [pc, #704]	; (100092c4 <system_peripheral_reset+0x390>)
10009002:	6859      	ldr	r1, [r3, #4]
10009004:	4ab2      	ldr	r2, [pc, #712]	; (100092d0 <system_peripheral_reset+0x39c>)
10009006:	400a      	ands	r2, r1
10009008:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000900a:	685a      	ldr	r2, [r3, #4]
1000900c:	2180      	movs	r1, #128	; 0x80
1000900e:	00c9      	lsls	r1, r1, #3
10009010:	430a      	orrs	r2, r1
10009012:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009014:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009016:	e1b6      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009018:	4baa      	ldr	r3, [pc, #680]	; (100092c4 <system_peripheral_reset+0x390>)
1000901a:	6859      	ldr	r1, [r3, #4]
1000901c:	4aad      	ldr	r2, [pc, #692]	; (100092d4 <system_peripheral_reset+0x3a0>)
1000901e:	400a      	ands	r2, r1
10009020:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009022:	685a      	ldr	r2, [r3, #4]
10009024:	2180      	movs	r1, #128	; 0x80
10009026:	0109      	lsls	r1, r1, #4
10009028:	430a      	orrs	r2, r1
1000902a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000902c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000902e:	e1aa      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009030:	4ba4      	ldr	r3, [pc, #656]	; (100092c4 <system_peripheral_reset+0x390>)
10009032:	6859      	ldr	r1, [r3, #4]
10009034:	4aa8      	ldr	r2, [pc, #672]	; (100092d8 <system_peripheral_reset+0x3a4>)
10009036:	400a      	ands	r2, r1
10009038:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000903a:	685a      	ldr	r2, [r3, #4]
1000903c:	2180      	movs	r1, #128	; 0x80
1000903e:	0149      	lsls	r1, r1, #5
10009040:	430a      	orrs	r2, r1
10009042:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009044:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10009046:	e19e      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009048:	4b9e      	ldr	r3, [pc, #632]	; (100092c4 <system_peripheral_reset+0x390>)
1000904a:	6859      	ldr	r1, [r3, #4]
1000904c:	4aa3      	ldr	r2, [pc, #652]	; (100092dc <system_peripheral_reset+0x3a8>)
1000904e:	400a      	ands	r2, r1
10009050:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009052:	685a      	ldr	r2, [r3, #4]
10009054:	2180      	movs	r1, #128	; 0x80
10009056:	0189      	lsls	r1, r1, #6
10009058:	430a      	orrs	r2, r1
1000905a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000905c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
1000905e:	e192      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009060:	4b98      	ldr	r3, [pc, #608]	; (100092c4 <system_peripheral_reset+0x390>)
10009062:	6859      	ldr	r1, [r3, #4]
10009064:	4a9e      	ldr	r2, [pc, #632]	; (100092e0 <system_peripheral_reset+0x3ac>)
10009066:	400a      	ands	r2, r1
10009068:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000906a:	685a      	ldr	r2, [r3, #4]
1000906c:	2180      	movs	r1, #128	; 0x80
1000906e:	01c9      	lsls	r1, r1, #7
10009070:	430a      	orrs	r2, r1
10009072:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009074:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10009076:	e186      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009078:	4b92      	ldr	r3, [pc, #584]	; (100092c4 <system_peripheral_reset+0x390>)
1000907a:	6859      	ldr	r1, [r3, #4]
1000907c:	4a99      	ldr	r2, [pc, #612]	; (100092e4 <system_peripheral_reset+0x3b0>)
1000907e:	400a      	ands	r2, r1
10009080:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009082:	685a      	ldr	r2, [r3, #4]
10009084:	2180      	movs	r1, #128	; 0x80
10009086:	0209      	lsls	r1, r1, #8
10009088:	430a      	orrs	r2, r1
1000908a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000908c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000908e:	e17a      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009090:	4b8c      	ldr	r3, [pc, #560]	; (100092c4 <system_peripheral_reset+0x390>)
10009092:	6859      	ldr	r1, [r3, #4]
10009094:	4a94      	ldr	r2, [pc, #592]	; (100092e8 <system_peripheral_reset+0x3b4>)
10009096:	400a      	ands	r2, r1
10009098:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000909a:	685a      	ldr	r2, [r3, #4]
1000909c:	2180      	movs	r1, #128	; 0x80
1000909e:	0249      	lsls	r1, r1, #9
100090a0:	430a      	orrs	r2, r1
100090a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090a4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
100090a6:	e16e      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090a8:	4b86      	ldr	r3, [pc, #536]	; (100092c4 <system_peripheral_reset+0x390>)
100090aa:	6859      	ldr	r1, [r3, #4]
100090ac:	4a8f      	ldr	r2, [pc, #572]	; (100092ec <system_peripheral_reset+0x3b8>)
100090ae:	400a      	ands	r2, r1
100090b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090b2:	685a      	ldr	r2, [r3, #4]
100090b4:	2180      	movs	r1, #128	; 0x80
100090b6:	0289      	lsls	r1, r1, #10
100090b8:	430a      	orrs	r2, r1
100090ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090bc:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
100090be:	e162      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090c0:	4b80      	ldr	r3, [pc, #512]	; (100092c4 <system_peripheral_reset+0x390>)
100090c2:	6859      	ldr	r1, [r3, #4]
100090c4:	4a8a      	ldr	r2, [pc, #552]	; (100092f0 <system_peripheral_reset+0x3bc>)
100090c6:	400a      	ands	r2, r1
100090c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090ca:	685a      	ldr	r2, [r3, #4]
100090cc:	2180      	movs	r1, #128	; 0x80
100090ce:	02c9      	lsls	r1, r1, #11
100090d0:	430a      	orrs	r2, r1
100090d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d4:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
100090d6:	e156      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090d8:	4b7a      	ldr	r3, [pc, #488]	; (100092c4 <system_peripheral_reset+0x390>)
100090da:	6859      	ldr	r1, [r3, #4]
100090dc:	4a85      	ldr	r2, [pc, #532]	; (100092f4 <system_peripheral_reset+0x3c0>)
100090de:	400a      	ands	r2, r1
100090e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090e2:	685a      	ldr	r2, [r3, #4]
100090e4:	2180      	movs	r1, #128	; 0x80
100090e6:	0309      	lsls	r1, r1, #12
100090e8:	430a      	orrs	r2, r1
100090ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090ec:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
100090ee:	e14a      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100090f0:	4b74      	ldr	r3, [pc, #464]	; (100092c4 <system_peripheral_reset+0x390>)
100090f2:	6859      	ldr	r1, [r3, #4]
100090f4:	4a80      	ldr	r2, [pc, #512]	; (100092f8 <system_peripheral_reset+0x3c4>)
100090f6:	400a      	ands	r2, r1
100090f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100090fa:	685a      	ldr	r2, [r3, #4]
100090fc:	2180      	movs	r1, #128	; 0x80
100090fe:	0349      	lsls	r1, r1, #13
10009100:	430a      	orrs	r2, r1
10009102:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009104:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009106:	e13e      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009108:	4b6e      	ldr	r3, [pc, #440]	; (100092c4 <system_peripheral_reset+0x390>)
1000910a:	6859      	ldr	r1, [r3, #4]
1000910c:	4a7b      	ldr	r2, [pc, #492]	; (100092fc <system_peripheral_reset+0x3c8>)
1000910e:	400a      	ands	r2, r1
10009110:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009112:	685a      	ldr	r2, [r3, #4]
10009114:	2180      	movs	r1, #128	; 0x80
10009116:	0389      	lsls	r1, r1, #14
10009118:	430a      	orrs	r2, r1
1000911a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000911c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000911e:	e132      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009120:	4b68      	ldr	r3, [pc, #416]	; (100092c4 <system_peripheral_reset+0x390>)
10009122:	6859      	ldr	r1, [r3, #4]
10009124:	4a76      	ldr	r2, [pc, #472]	; (10009300 <system_peripheral_reset+0x3cc>)
10009126:	400a      	ands	r2, r1
10009128:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000912a:	685a      	ldr	r2, [r3, #4]
1000912c:	2180      	movs	r1, #128	; 0x80
1000912e:	03c9      	lsls	r1, r1, #15
10009130:	430a      	orrs	r2, r1
10009132:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009134:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009136:	e126      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009138:	4b62      	ldr	r3, [pc, #392]	; (100092c4 <system_peripheral_reset+0x390>)
1000913a:	6859      	ldr	r1, [r3, #4]
1000913c:	4a71      	ldr	r2, [pc, #452]	; (10009304 <system_peripheral_reset+0x3d0>)
1000913e:	400a      	ands	r2, r1
10009140:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009142:	685a      	ldr	r2, [r3, #4]
10009144:	2180      	movs	r1, #128	; 0x80
10009146:	0409      	lsls	r1, r1, #16
10009148:	430a      	orrs	r2, r1
1000914a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000914c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000914e:	e11a      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009150:	4b5c      	ldr	r3, [pc, #368]	; (100092c4 <system_peripheral_reset+0x390>)
10009152:	6859      	ldr	r1, [r3, #4]
10009154:	4a6c      	ldr	r2, [pc, #432]	; (10009308 <system_peripheral_reset+0x3d4>)
10009156:	400a      	ands	r2, r1
10009158:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000915a:	685a      	ldr	r2, [r3, #4]
1000915c:	2180      	movs	r1, #128	; 0x80
1000915e:	0449      	lsls	r1, r1, #17
10009160:	430a      	orrs	r2, r1
10009162:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009164:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10009166:	e10e      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009168:	4b56      	ldr	r3, [pc, #344]	; (100092c4 <system_peripheral_reset+0x390>)
1000916a:	6859      	ldr	r1, [r3, #4]
1000916c:	4a67      	ldr	r2, [pc, #412]	; (1000930c <system_peripheral_reset+0x3d8>)
1000916e:	400a      	ands	r2, r1
10009170:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009172:	685a      	ldr	r2, [r3, #4]
10009174:	2180      	movs	r1, #128	; 0x80
10009176:	0489      	lsls	r1, r1, #18
10009178:	430a      	orrs	r2, r1
1000917a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000917c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
1000917e:	e102      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009180:	4b50      	ldr	r3, [pc, #320]	; (100092c4 <system_peripheral_reset+0x390>)
10009182:	6859      	ldr	r1, [r3, #4]
10009184:	4a62      	ldr	r2, [pc, #392]	; (10009310 <system_peripheral_reset+0x3dc>)
10009186:	400a      	ands	r2, r1
10009188:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000918a:	685a      	ldr	r2, [r3, #4]
1000918c:	2180      	movs	r1, #128	; 0x80
1000918e:	04c9      	lsls	r1, r1, #19
10009190:	430a      	orrs	r2, r1
10009192:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009194:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10009196:	e0f6      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009198:	4b4a      	ldr	r3, [pc, #296]	; (100092c4 <system_peripheral_reset+0x390>)
1000919a:	6859      	ldr	r1, [r3, #4]
1000919c:	4a5d      	ldr	r2, [pc, #372]	; (10009314 <system_peripheral_reset+0x3e0>)
1000919e:	400a      	ands	r2, r1
100091a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091a2:	685a      	ldr	r2, [r3, #4]
100091a4:	2180      	movs	r1, #128	; 0x80
100091a6:	0509      	lsls	r1, r1, #20
100091a8:	430a      	orrs	r2, r1
100091aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ac:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
100091ae:	e0ea      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091b0:	4b44      	ldr	r3, [pc, #272]	; (100092c4 <system_peripheral_reset+0x390>)
100091b2:	6859      	ldr	r1, [r3, #4]
100091b4:	4a58      	ldr	r2, [pc, #352]	; (10009318 <system_peripheral_reset+0x3e4>)
100091b6:	400a      	ands	r2, r1
100091b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ba:	685a      	ldr	r2, [r3, #4]
100091bc:	2180      	movs	r1, #128	; 0x80
100091be:	0549      	lsls	r1, r1, #21
100091c0:	430a      	orrs	r2, r1
100091c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091c4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
100091c6:	e0de      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091c8:	4b3e      	ldr	r3, [pc, #248]	; (100092c4 <system_peripheral_reset+0x390>)
100091ca:	6859      	ldr	r1, [r3, #4]
100091cc:	4a53      	ldr	r2, [pc, #332]	; (1000931c <system_peripheral_reset+0x3e8>)
100091ce:	400a      	ands	r2, r1
100091d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091d2:	685a      	ldr	r2, [r3, #4]
100091d4:	2180      	movs	r1, #128	; 0x80
100091d6:	0589      	lsls	r1, r1, #22
100091d8:	430a      	orrs	r2, r1
100091da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091dc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
100091de:	e0d2      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091e0:	4b38      	ldr	r3, [pc, #224]	; (100092c4 <system_peripheral_reset+0x390>)
100091e2:	6859      	ldr	r1, [r3, #4]
100091e4:	4a4e      	ldr	r2, [pc, #312]	; (10009320 <system_peripheral_reset+0x3ec>)
100091e6:	400a      	ands	r2, r1
100091e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ea:	685a      	ldr	r2, [r3, #4]
100091ec:	2180      	movs	r1, #128	; 0x80
100091ee:	05c9      	lsls	r1, r1, #23
100091f0:	430a      	orrs	r2, r1
100091f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091f4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
100091f6:	e0c6      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091f8:	4a32      	ldr	r2, [pc, #200]	; (100092c4 <system_peripheral_reset+0x390>)
100091fa:	6853      	ldr	r3, [r2, #4]
100091fc:	005b      	lsls	r3, r3, #1
100091fe:	085b      	lsrs	r3, r3, #1
10009200:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009202:	6853      	ldr	r3, [r2, #4]
10009204:	2180      	movs	r1, #128	; 0x80
10009206:	0609      	lsls	r1, r1, #24
10009208:	430b      	orrs	r3, r1
1000920a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000920c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000920e:	e0ba      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009210:	4b2c      	ldr	r3, [pc, #176]	; (100092c4 <system_peripheral_reset+0x390>)
10009212:	891a      	ldrh	r2, [r3, #8]
10009214:	2101      	movs	r1, #1
10009216:	438a      	bics	r2, r1
10009218:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000921a:	8919      	ldrh	r1, [r3, #8]
1000921c:	2201      	movs	r2, #1
1000921e:	430a      	orrs	r2, r1
10009220:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009222:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10009224:	e0af      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009226:	4b27      	ldr	r3, [pc, #156]	; (100092c4 <system_peripheral_reset+0x390>)
10009228:	891a      	ldrh	r2, [r3, #8]
1000922a:	2102      	movs	r1, #2
1000922c:	438a      	bics	r2, r1
1000922e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009230:	8919      	ldrh	r1, [r3, #8]
10009232:	2202      	movs	r2, #2
10009234:	430a      	orrs	r2, r1
10009236:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009238:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
1000923a:	e0a4      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000923c:	4b21      	ldr	r3, [pc, #132]	; (100092c4 <system_peripheral_reset+0x390>)
1000923e:	891a      	ldrh	r2, [r3, #8]
10009240:	2104      	movs	r1, #4
10009242:	438a      	bics	r2, r1
10009244:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009246:	8919      	ldrh	r1, [r3, #8]
10009248:	2204      	movs	r2, #4
1000924a:	430a      	orrs	r2, r1
1000924c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000924e:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10009250:	e099      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009252:	4b1c      	ldr	r3, [pc, #112]	; (100092c4 <system_peripheral_reset+0x390>)
10009254:	891a      	ldrh	r2, [r3, #8]
10009256:	2108      	movs	r1, #8
10009258:	438a      	bics	r2, r1
1000925a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000925c:	8919      	ldrh	r1, [r3, #8]
1000925e:	2208      	movs	r2, #8
10009260:	430a      	orrs	r2, r1
10009262:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009264:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009266:	e08e      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009268:	4b16      	ldr	r3, [pc, #88]	; (100092c4 <system_peripheral_reset+0x390>)
1000926a:	891a      	ldrh	r2, [r3, #8]
1000926c:	2110      	movs	r1, #16
1000926e:	438a      	bics	r2, r1
10009270:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009272:	8919      	ldrh	r1, [r3, #8]
10009274:	2210      	movs	r2, #16
10009276:	430a      	orrs	r2, r1
10009278:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000927a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000927c:	e083      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000927e:	4b11      	ldr	r3, [pc, #68]	; (100092c4 <system_peripheral_reset+0x390>)
10009280:	891a      	ldrh	r2, [r3, #8]
10009282:	2120      	movs	r1, #32
10009284:	438a      	bics	r2, r1
10009286:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009288:	8919      	ldrh	r1, [r3, #8]
1000928a:	2220      	movs	r2, #32
1000928c:	430a      	orrs	r2, r1
1000928e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009290:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009292:	e078      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009294:	4b0b      	ldr	r3, [pc, #44]	; (100092c4 <system_peripheral_reset+0x390>)
10009296:	891a      	ldrh	r2, [r3, #8]
10009298:	2140      	movs	r1, #64	; 0x40
1000929a:	438a      	bics	r2, r1
1000929c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000929e:	8919      	ldrh	r1, [r3, #8]
100092a0:	2240      	movs	r2, #64	; 0x40
100092a2:	430a      	orrs	r2, r1
100092a4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a6:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
100092a8:	e06d      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100092aa:	4b06      	ldr	r3, [pc, #24]	; (100092c4 <system_peripheral_reset+0x390>)
100092ac:	891a      	ldrh	r2, [r3, #8]
100092ae:	2180      	movs	r1, #128	; 0x80
100092b0:	438a      	bics	r2, r1
100092b2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100092b4:	8919      	ldrh	r1, [r3, #8]
100092b6:	2280      	movs	r2, #128	; 0x80
100092b8:	430a      	orrs	r2, r1
100092ba:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092bc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
100092be:	e062      	b.n	10009386 <system_peripheral_reset+0x452>
100092c0:	1001130c 	.word	0x1001130c
100092c4:	4000b000 	.word	0x4000b000
100092c8:	fffffeff 	.word	0xfffffeff
100092cc:	fffffdff 	.word	0xfffffdff
100092d0:	fffffbff 	.word	0xfffffbff
100092d4:	fffff7ff 	.word	0xfffff7ff
100092d8:	ffffefff 	.word	0xffffefff
100092dc:	ffffdfff 	.word	0xffffdfff
100092e0:	ffffbfff 	.word	0xffffbfff
100092e4:	ffff7fff 	.word	0xffff7fff
100092e8:	fffeffff 	.word	0xfffeffff
100092ec:	fffdffff 	.word	0xfffdffff
100092f0:	fffbffff 	.word	0xfffbffff
100092f4:	fff7ffff 	.word	0xfff7ffff
100092f8:	ffefffff 	.word	0xffefffff
100092fc:	ffdfffff 	.word	0xffdfffff
10009300:	ffbfffff 	.word	0xffbfffff
10009304:	ff7fffff 	.word	0xff7fffff
10009308:	feffffff 	.word	0xfeffffff
1000930c:	fdffffff 	.word	0xfdffffff
10009310:	fbffffff 	.word	0xfbffffff
10009314:	f7ffffff 	.word	0xf7ffffff
10009318:	efffffff 	.word	0xefffffff
1000931c:	dfffffff 	.word	0xdfffffff
10009320:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009324:	4b18      	ldr	r3, [pc, #96]	; (10009388 <system_peripheral_reset+0x454>)
10009326:	8919      	ldrh	r1, [r3, #8]
10009328:	4a18      	ldr	r2, [pc, #96]	; (1000938c <system_peripheral_reset+0x458>)
1000932a:	400a      	ands	r2, r1
1000932c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000932e:	8919      	ldrh	r1, [r3, #8]
10009330:	2280      	movs	r2, #128	; 0x80
10009332:	0052      	lsls	r2, r2, #1
10009334:	430a      	orrs	r2, r1
10009336:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009338:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000933a:	e024      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000933c:	4b12      	ldr	r3, [pc, #72]	; (10009388 <system_peripheral_reset+0x454>)
1000933e:	8919      	ldrh	r1, [r3, #8]
10009340:	4a13      	ldr	r2, [pc, #76]	; (10009390 <system_peripheral_reset+0x45c>)
10009342:	400a      	ands	r2, r1
10009344:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009346:	8919      	ldrh	r1, [r3, #8]
10009348:	2280      	movs	r2, #128	; 0x80
1000934a:	0092      	lsls	r2, r2, #2
1000934c:	430a      	orrs	r2, r1
1000934e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009350:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009352:	e018      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009354:	4b0c      	ldr	r3, [pc, #48]	; (10009388 <system_peripheral_reset+0x454>)
10009356:	8919      	ldrh	r1, [r3, #8]
10009358:	4a0e      	ldr	r2, [pc, #56]	; (10009394 <system_peripheral_reset+0x460>)
1000935a:	400a      	ands	r2, r1
1000935c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000935e:	8919      	ldrh	r1, [r3, #8]
10009360:	2280      	movs	r2, #128	; 0x80
10009362:	00d2      	lsls	r2, r2, #3
10009364:	430a      	orrs	r2, r1
10009366:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009368:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000936a:	e00c      	b.n	10009386 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000936c:	4b06      	ldr	r3, [pc, #24]	; (10009388 <system_peripheral_reset+0x454>)
1000936e:	8919      	ldrh	r1, [r3, #8]
10009370:	4a09      	ldr	r2, [pc, #36]	; (10009398 <system_peripheral_reset+0x464>)
10009372:	400a      	ands	r2, r1
10009374:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009376:	8919      	ldrh	r1, [r3, #8]
10009378:	2280      	movs	r2, #128	; 0x80
1000937a:	0112      	lsls	r2, r2, #4
1000937c:	430a      	orrs	r2, r1
1000937e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009380:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10009382:	e000      	b.n	10009386 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009384:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009386:	bd00      	pop	{pc}
10009388:	4000b000 	.word	0x4000b000
1000938c:	fffffeff 	.word	0xfffffeff
10009390:	fffffdff 	.word	0xfffffdff
10009394:	fffffbff 	.word	0xfffffbff
10009398:	fffff7ff 	.word	0xfffff7ff

1000939c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000939c:	2380      	movs	r3, #128	; 0x80
1000939e:	04db      	lsls	r3, r3, #19
100093a0:	469c      	mov	ip, r3
100093a2:	4460      	add	r0, ip
100093a4:	0080      	lsls	r0, r0, #2
100093a6:	6001      	str	r1, [r0, #0]
}
100093a8:	4770      	bx	lr
100093aa:	46c0      	nop			; (mov r8, r8)

100093ac <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
100093ac:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100093ae:	4b20      	ldr	r3, [pc, #128]	; (10009430 <uart_rx0_isr_handler+0x84>)
100093b0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100093b2:	6823      	ldr	r3, [r4, #0]
100093b4:	7d1d      	ldrb	r5, [r3, #20]
100093b6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
100093b8:	066a      	lsls	r2, r5, #25
100093ba:	d513      	bpl.n	100093e4 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100093bc:	211e      	movs	r1, #30
100093be:	2222      	movs	r2, #34	; 0x22
100093c0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100093c2:	7e1a      	ldrb	r2, [r3, #24]
100093c4:	3123      	adds	r1, #35	; 0x23
100093c6:	438a      	bics	r2, r1
100093c8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100093ca:	2321      	movs	r3, #33	; 0x21
100093cc:	5ce3      	ldrb	r3, [r4, r3]
100093ce:	071b      	lsls	r3, r3, #28
100093d0:	d506      	bpl.n	100093e0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100093d2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100093d4:	5ce3      	ldrb	r3, [r4, r3]
100093d6:	071b      	lsls	r3, r3, #28
100093d8:	d502      	bpl.n	100093e0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100093da:	0020      	movs	r0, r4
100093dc:	6923      	ldr	r3, [r4, #16]
100093de:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100093e0:	6823      	ldr	r3, [r4, #0]
100093e2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100093e4:	07eb      	lsls	r3, r5, #31
100093e6:	d522      	bpl.n	1000942e <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100093e8:	6823      	ldr	r3, [r4, #0]
100093ea:	7c1b      	ldrb	r3, [r3, #16]
100093ec:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100093ee:	6962      	ldr	r2, [r4, #20]
100093f0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100093f2:	6963      	ldr	r3, [r4, #20]
100093f4:	3301      	adds	r3, #1
100093f6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100093f8:	8ba3      	ldrh	r3, [r4, #28]
100093fa:	3b01      	subs	r3, #1
100093fc:	b29b      	uxth	r3, r3
100093fe:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009400:	8ba3      	ldrh	r3, [r4, #28]
10009402:	b29b      	uxth	r3, r3
10009404:	2b00      	cmp	r3, #0
10009406:	d112      	bne.n	1000942e <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009408:	3321      	adds	r3, #33	; 0x21
1000940a:	5ce3      	ldrb	r3, [r4, r3]
1000940c:	075b      	lsls	r3, r3, #29
1000940e:	d50e      	bpl.n	1000942e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009410:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009412:	5ce3      	ldrb	r3, [r4, r3]
10009414:	075b      	lsls	r3, r3, #29
10009416:	d50a      	bpl.n	1000942e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009418:	2200      	movs	r2, #0
1000941a:	2322      	movs	r3, #34	; 0x22
1000941c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000941e:	6822      	ldr	r2, [r4, #0]
10009420:	7e13      	ldrb	r3, [r2, #24]
10009422:	2101      	movs	r1, #1
10009424:	438b      	bics	r3, r1
10009426:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009428:	68e3      	ldr	r3, [r4, #12]
1000942a:	0020      	movs	r0, r4
1000942c:	4798      	blx	r3
			}
		}
	}
}
1000942e:	bd70      	pop	{r4, r5, r6, pc}
10009430:	10012d58 	.word	0x10012d58

10009434 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009434:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009436:	4b21      	ldr	r3, [pc, #132]	; (100094bc <uart_tx0_isr_handler+0x88>)
10009438:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000943a:	6823      	ldr	r3, [r4, #0]
1000943c:	791d      	ldrb	r5, [r3, #4]
1000943e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009440:	07ea      	lsls	r2, r5, #31
10009442:	d517      	bpl.n	10009474 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009444:	69a2      	ldr	r2, [r4, #24]
10009446:	7811      	ldrb	r1, [r2, #0]
10009448:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000944a:	3201      	adds	r2, #1
1000944c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000944e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009450:	8be3      	ldrh	r3, [r4, #30]
10009452:	3b01      	subs	r3, #1
10009454:	b29b      	uxth	r3, r3
10009456:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009458:	8be3      	ldrh	r3, [r4, #30]
1000945a:	b29b      	uxth	r3, r3
1000945c:	2b00      	cmp	r3, #0
1000945e:	d109      	bne.n	10009474 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009460:	6822      	ldr	r2, [r4, #0]
10009462:	7a13      	ldrb	r3, [r2, #8]
10009464:	2101      	movs	r1, #1
10009466:	438b      	bics	r3, r1
10009468:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000946a:	6822      	ldr	r2, [r4, #0]
1000946c:	7a11      	ldrb	r1, [r2, #8]
1000946e:	2310      	movs	r3, #16
10009470:	430b      	orrs	r3, r1
10009472:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009474:	06eb      	lsls	r3, r5, #27
10009476:	d512      	bpl.n	1000949e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009478:	2321      	movs	r3, #33	; 0x21
1000947a:	5ce3      	ldrb	r3, [r4, r3]
1000947c:	07db      	lsls	r3, r3, #31
1000947e:	d50e      	bpl.n	1000949e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009480:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009482:	5ce3      	ldrb	r3, [r4, r3]
10009484:	07db      	lsls	r3, r3, #31
10009486:	d50a      	bpl.n	1000949e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009488:	2200      	movs	r2, #0
1000948a:	2322      	movs	r3, #34	; 0x22
1000948c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000948e:	6822      	ldr	r2, [r4, #0]
10009490:	7a13      	ldrb	r3, [r2, #8]
10009492:	2110      	movs	r1, #16
10009494:	438b      	bics	r3, r1
10009496:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009498:	0020      	movs	r0, r4
1000949a:	6863      	ldr	r3, [r4, #4]
1000949c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000949e:	06ab      	lsls	r3, r5, #26
100094a0:	d50a      	bpl.n	100094b8 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100094a2:	2321      	movs	r3, #33	; 0x21
100094a4:	5ce3      	ldrb	r3, [r4, r3]
100094a6:	079b      	lsls	r3, r3, #30
100094a8:	d506      	bpl.n	100094b8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100094aa:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100094ac:	5ce3      	ldrb	r3, [r4, r3]
100094ae:	079b      	lsls	r3, r3, #30
100094b0:	d502      	bpl.n	100094b8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100094b2:	68a3      	ldr	r3, [r4, #8]
100094b4:	0020      	movs	r0, r4
100094b6:	4798      	blx	r3
		}

	}
}
100094b8:	bd70      	pop	{r4, r5, r6, pc}
100094ba:	46c0      	nop			; (mov r8, r8)
100094bc:	10012d58 	.word	0x10012d58

100094c0 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
100094c0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
100094c2:	4b20      	ldr	r3, [pc, #128]	; (10009544 <uart_rx1_isr_handler+0x84>)
100094c4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100094c6:	6823      	ldr	r3, [r4, #0]
100094c8:	7d1d      	ldrb	r5, [r3, #20]
100094ca:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
100094cc:	066a      	lsls	r2, r5, #25
100094ce:	d513      	bpl.n	100094f8 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100094d0:	211e      	movs	r1, #30
100094d2:	2222      	movs	r2, #34	; 0x22
100094d4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100094d6:	7e1a      	ldrb	r2, [r3, #24]
100094d8:	3123      	adds	r1, #35	; 0x23
100094da:	438a      	bics	r2, r1
100094dc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100094de:	2321      	movs	r3, #33	; 0x21
100094e0:	5ce3      	ldrb	r3, [r4, r3]
100094e2:	071b      	lsls	r3, r3, #28
100094e4:	d506      	bpl.n	100094f4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100094e6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100094e8:	5ce3      	ldrb	r3, [r4, r3]
100094ea:	071b      	lsls	r3, r3, #28
100094ec:	d502      	bpl.n	100094f4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100094ee:	0020      	movs	r0, r4
100094f0:	6923      	ldr	r3, [r4, #16]
100094f2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100094f4:	6823      	ldr	r3, [r4, #0]
100094f6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100094f8:	07eb      	lsls	r3, r5, #31
100094fa:	d522      	bpl.n	10009542 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100094fc:	6823      	ldr	r3, [r4, #0]
100094fe:	7c1b      	ldrb	r3, [r3, #16]
10009500:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009502:	6962      	ldr	r2, [r4, #20]
10009504:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009506:	6963      	ldr	r3, [r4, #20]
10009508:	3301      	adds	r3, #1
1000950a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000950c:	8ba3      	ldrh	r3, [r4, #28]
1000950e:	3b01      	subs	r3, #1
10009510:	b29b      	uxth	r3, r3
10009512:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009514:	8ba3      	ldrh	r3, [r4, #28]
10009516:	b29b      	uxth	r3, r3
10009518:	2b00      	cmp	r3, #0
1000951a:	d112      	bne.n	10009542 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000951c:	3321      	adds	r3, #33	; 0x21
1000951e:	5ce3      	ldrb	r3, [r4, r3]
10009520:	075b      	lsls	r3, r3, #29
10009522:	d50e      	bpl.n	10009542 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009524:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009526:	5ce3      	ldrb	r3, [r4, r3]
10009528:	075b      	lsls	r3, r3, #29
1000952a:	d50a      	bpl.n	10009542 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000952c:	2200      	movs	r2, #0
1000952e:	2322      	movs	r3, #34	; 0x22
10009530:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009532:	6822      	ldr	r2, [r4, #0]
10009534:	7e13      	ldrb	r3, [r2, #24]
10009536:	2101      	movs	r1, #1
10009538:	438b      	bics	r3, r1
1000953a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000953c:	68e3      	ldr	r3, [r4, #12]
1000953e:	0020      	movs	r0, r4
10009540:	4798      	blx	r3
			}
		}
	}
}
10009542:	bd70      	pop	{r4, r5, r6, pc}
10009544:	10012d58 	.word	0x10012d58

10009548 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009548:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000954a:	4b21      	ldr	r3, [pc, #132]	; (100095d0 <uart_tx1_isr_handler+0x88>)
1000954c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000954e:	6823      	ldr	r3, [r4, #0]
10009550:	791d      	ldrb	r5, [r3, #4]
10009552:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009554:	07ea      	lsls	r2, r5, #31
10009556:	d517      	bpl.n	10009588 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009558:	69a2      	ldr	r2, [r4, #24]
1000955a:	7811      	ldrb	r1, [r2, #0]
1000955c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000955e:	3201      	adds	r2, #1
10009560:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009562:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009564:	8be3      	ldrh	r3, [r4, #30]
10009566:	3b01      	subs	r3, #1
10009568:	b29b      	uxth	r3, r3
1000956a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000956c:	8be3      	ldrh	r3, [r4, #30]
1000956e:	b29b      	uxth	r3, r3
10009570:	2b00      	cmp	r3, #0
10009572:	d109      	bne.n	10009588 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009574:	6822      	ldr	r2, [r4, #0]
10009576:	7a13      	ldrb	r3, [r2, #8]
10009578:	2101      	movs	r1, #1
1000957a:	438b      	bics	r3, r1
1000957c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000957e:	6822      	ldr	r2, [r4, #0]
10009580:	7a11      	ldrb	r1, [r2, #8]
10009582:	2310      	movs	r3, #16
10009584:	430b      	orrs	r3, r1
10009586:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009588:	06eb      	lsls	r3, r5, #27
1000958a:	d512      	bpl.n	100095b2 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000958c:	2321      	movs	r3, #33	; 0x21
1000958e:	5ce3      	ldrb	r3, [r4, r3]
10009590:	07db      	lsls	r3, r3, #31
10009592:	d50e      	bpl.n	100095b2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009594:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009596:	5ce3      	ldrb	r3, [r4, r3]
10009598:	07db      	lsls	r3, r3, #31
1000959a:	d50a      	bpl.n	100095b2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000959c:	2200      	movs	r2, #0
1000959e:	2322      	movs	r3, #34	; 0x22
100095a0:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100095a2:	6822      	ldr	r2, [r4, #0]
100095a4:	7a13      	ldrb	r3, [r2, #8]
100095a6:	2110      	movs	r1, #16
100095a8:	438b      	bics	r3, r1
100095aa:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100095ac:	0020      	movs	r0, r4
100095ae:	6863      	ldr	r3, [r4, #4]
100095b0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100095b2:	06ab      	lsls	r3, r5, #26
100095b4:	d50a      	bpl.n	100095cc <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100095b6:	2321      	movs	r3, #33	; 0x21
100095b8:	5ce3      	ldrb	r3, [r4, r3]
100095ba:	079b      	lsls	r3, r3, #30
100095bc:	d506      	bpl.n	100095cc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100095be:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100095c0:	5ce3      	ldrb	r3, [r4, r3]
100095c2:	079b      	lsls	r3, r3, #30
100095c4:	d502      	bpl.n	100095cc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100095c6:	68a3      	ldr	r3, [r4, #8]
100095c8:	0020      	movs	r0, r4
100095ca:	4798      	blx	r3
		}

	}
}
100095cc:	bd70      	pop	{r4, r5, r6, pc}
100095ce:	46c0      	nop			; (mov r8, r8)
100095d0:	10012d58 	.word	0x10012d58

100095d4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
100095d4:	23e1      	movs	r3, #225	; 0xe1
100095d6:	025b      	lsls	r3, r3, #9
100095d8:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
100095da:	2300      	movs	r3, #0
100095dc:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
100095de:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
100095e0:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
100095e2:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
100095e4:	3302      	adds	r3, #2
100095e6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
100095e8:	2203      	movs	r2, #3
100095ea:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
100095ec:	3201      	adds	r2, #1
100095ee:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
100095f0:	3201      	adds	r2, #1
100095f2:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
100095f4:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
100095f6:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
100095f8:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
100095fa:	6243      	str	r3, [r0, #36]	; 0x24
}
100095fc:	4770      	bx	lr
100095fe:	46c0      	nop			; (mov r8, r8)

10009600 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009602:	464f      	mov	r7, r9
10009604:	4646      	mov	r6, r8
10009606:	b4c0      	push	{r6, r7}
10009608:	0005      	movs	r5, r0
1000960a:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000960c:	6001      	str	r1, [r0, #0]

	if (hw == UART0) {
1000960e:	4b55      	ldr	r3, [pc, #340]	; (10009764 <uart_init+0x164>)
10009610:	4299      	cmp	r1, r3
10009612:	d118      	bne.n	10009646 <uart_init+0x46>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009614:	2009      	movs	r0, #9
10009616:	4c54      	ldr	r4, [pc, #336]	; (10009768 <uart_init+0x168>)
10009618:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000961a:	200a      	movs	r0, #10
1000961c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000961e:	2009      	movs	r0, #9
10009620:	4c52      	ldr	r4, [pc, #328]	; (1000976c <uart_init+0x16c>)
10009622:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009624:	200a      	movs	r0, #10
10009626:	47a0      	blx	r4
		_uart_instances[0] = module;
10009628:	4b51      	ldr	r3, [pc, #324]	; (10009770 <uart_init+0x170>)
1000962a:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000962c:	4951      	ldr	r1, [pc, #324]	; (10009774 <uart_init+0x174>)
1000962e:	2010      	movs	r0, #16
10009630:	4c51      	ldr	r4, [pc, #324]	; (10009778 <uart_init+0x178>)
10009632:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009634:	4951      	ldr	r1, [pc, #324]	; (1000977c <uart_init+0x17c>)
10009636:	2011      	movs	r0, #17
10009638:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000963a:	4b51      	ldr	r3, [pc, #324]	; (10009780 <uart_init+0x180>)
1000963c:	2201      	movs	r2, #1
1000963e:	601a      	str	r2, [r3, #0]
10009640:	3201      	adds	r2, #1
10009642:	601a      	str	r2, [r3, #0]
10009644:	e01a      	b.n	1000967c <uart_init+0x7c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009646:	4b4f      	ldr	r3, [pc, #316]	; (10009784 <uart_init+0x184>)
10009648:	4299      	cmp	r1, r3
1000964a:	d117      	bne.n	1000967c <uart_init+0x7c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000964c:	200b      	movs	r0, #11
1000964e:	4c46      	ldr	r4, [pc, #280]	; (10009768 <uart_init+0x168>)
10009650:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009652:	200c      	movs	r0, #12
10009654:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009656:	200b      	movs	r0, #11
10009658:	4c44      	ldr	r4, [pc, #272]	; (1000976c <uart_init+0x16c>)
1000965a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000965c:	200c      	movs	r0, #12
1000965e:	47a0      	blx	r4
		_uart_instances[1] = module;
10009660:	4b43      	ldr	r3, [pc, #268]	; (10009770 <uart_init+0x170>)
10009662:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009664:	4948      	ldr	r1, [pc, #288]	; (10009788 <uart_init+0x188>)
10009666:	2012      	movs	r0, #18
10009668:	4c43      	ldr	r4, [pc, #268]	; (10009778 <uart_init+0x178>)
1000966a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000966c:	4947      	ldr	r1, [pc, #284]	; (1000978c <uart_init+0x18c>)
1000966e:	2013      	movs	r0, #19
10009670:	47a0      	blx	r4
10009672:	4b43      	ldr	r3, [pc, #268]	; (10009780 <uart_init+0x180>)
10009674:	2204      	movs	r2, #4
10009676:	601a      	str	r2, [r3, #0]
10009678:	3204      	adds	r2, #4
1000967a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000967c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000967e:	2204      	movs	r2, #4
10009680:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009682:	2b00      	cmp	r3, #0
10009684:	d152      	bne.n	1000972c <uart_init+0x12c>
		index = 4;
	} else {
		index = 2;
10009686:	3302      	adds	r3, #2
10009688:	4698      	mov	r8, r3
1000968a:	e04f      	b.n	1000972c <uart_init+0x12c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000968c:	8a31      	ldrh	r1, [r6, #16]
1000968e:	ce01      	ldmia	r6!, {r0}
10009690:	b2c0      	uxtb	r0, r0
10009692:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009694:	3401      	adds	r4, #1
10009696:	b2e4      	uxtb	r4, r4
10009698:	4544      	cmp	r4, r8
1000969a:	d3f7      	bcc.n	1000968c <uart_init+0x8c>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000969c:	682b      	ldr	r3, [r5, #0]
1000969e:	7d1a      	ldrb	r2, [r3, #20]
100096a0:	07d2      	lsls	r2, r2, #31
100096a2:	d504      	bpl.n	100096ae <uart_init+0xae>
100096a4:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
100096a6:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100096a8:	7d1a      	ldrb	r2, [r3, #20]
100096aa:	420a      	tst	r2, r1
100096ac:	d1fb      	bne.n	100096a6 <uart_init+0xa6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
100096ae:	2100      	movs	r1, #0
100096b0:	2220      	movs	r2, #32
100096b2:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
100096b4:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
100096b6:	1e59      	subs	r1, r3, #1
100096b8:	418b      	sbcs	r3, r1
100096ba:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
100096bc:	793b      	ldrb	r3, [r7, #4]
100096be:	797a      	ldrb	r2, [r7, #5]
100096c0:	4313      	orrs	r3, r2
100096c2:	430b      	orrs	r3, r1
	switch(config->parity) {
100096c4:	79ba      	ldrb	r2, [r7, #6]
100096c6:	2a02      	cmp	r2, #2
100096c8:	d00d      	beq.n	100096e6 <uart_init+0xe6>
100096ca:	b2d1      	uxtb	r1, r2
100096cc:	2902      	cmp	r1, #2
100096ce:	d802      	bhi.n	100096d6 <uart_init+0xd6>
100096d0:	2a01      	cmp	r2, #1
100096d2:	d005      	beq.n	100096e0 <uart_init+0xe0>
100096d4:	e00f      	b.n	100096f6 <uart_init+0xf6>
100096d6:	2a03      	cmp	r2, #3
100096d8:	d008      	beq.n	100096ec <uart_init+0xec>
100096da:	2a04      	cmp	r2, #4
100096dc:	d009      	beq.n	100096f2 <uart_init+0xf2>
100096de:	e00a      	b.n	100096f6 <uart_init+0xf6>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100096e0:	2202      	movs	r2, #2
100096e2:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
100096e4:	e007      	b.n	100096f6 <uart_init+0xf6>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
100096e6:	2206      	movs	r2, #6
100096e8:	4313      	orrs	r3, r2
			break;
100096ea:	e004      	b.n	100096f6 <uart_init+0xf6>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
100096ec:	220a      	movs	r2, #10
100096ee:	4313      	orrs	r3, r2
			break;
100096f0:	e001      	b.n	100096f6 <uart_init+0xf6>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
100096f2:	220e      	movs	r2, #14
100096f4:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
100096f6:	2220      	movs	r2, #32
100096f8:	6829      	ldr	r1, [r5, #0]
100096fa:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
100096fc:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
100096fe:	4b24      	ldr	r3, [pc, #144]	; (10009790 <uart_init+0x190>)
10009700:	4798      	blx	r3
10009702:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009704:	0031      	movs	r1, r6
10009706:	4b23      	ldr	r3, [pc, #140]	; (10009794 <uart_init+0x194>)
10009708:	4798      	blx	r3
1000970a:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000970c:	0400      	lsls	r0, r0, #16
1000970e:	0c00      	lsrs	r0, r0, #16
10009710:	4370      	muls	r0, r6
10009712:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009714:	0931      	lsrs	r1, r6, #4
10009716:	4288      	cmp	r0, r1
10009718:	d906      	bls.n	10009728 <uart_init+0x128>
1000971a:	2300      	movs	r3, #0
		i++;
1000971c:	3301      	adds	r3, #1
1000971e:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009720:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009722:	4288      	cmp	r0, r1
10009724:	d8fa      	bhi.n	1000971c <uart_init+0x11c>
10009726:	e007      	b.n	10009738 <uart_init+0x138>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009728:	2300      	movs	r3, #0
1000972a:	e005      	b.n	10009738 <uart_init+0x138>
1000972c:	003e      	movs	r6, r7
1000972e:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009730:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009732:	4b19      	ldr	r3, [pc, #100]	; (10009798 <uart_init+0x198>)
10009734:	4699      	mov	r9, r3
10009736:	e7a9      	b.n	1000968c <uart_init+0x8c>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009738:	2100      	movs	r1, #0
1000973a:	2028      	movs	r0, #40	; 0x28
1000973c:	682c      	ldr	r4, [r5, #0]
1000973e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009740:	3301      	adds	r3, #1
10009742:	071b      	lsls	r3, r3, #28
10009744:	0f5b      	lsrs	r3, r3, #29
10009746:	00d2      	lsls	r2, r2, #3
10009748:	4313      	orrs	r3, r2
1000974a:	b29b      	uxth	r3, r3
1000974c:	682a      	ldr	r2, [r5, #0]
1000974e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009750:	682b      	ldr	r3, [r5, #0]
10009752:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009754:	682b      	ldr	r3, [r5, #0]
10009756:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009758:	2000      	movs	r0, #0
1000975a:	bc0c      	pop	{r2, r3}
1000975c:	4690      	mov	r8, r2
1000975e:	4699      	mov	r9, r3
10009760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009762:	46c0      	nop			; (mov r8, r8)
10009764:	40004000 	.word	0x40004000
10009768:	10008f35 	.word	0x10008f35
1000976c:	1000886d 	.word	0x1000886d
10009770:	10012d58 	.word	0x10012d58
10009774:	100093ad 	.word	0x100093ad
10009778:	1000939d 	.word	0x1000939d
1000977c:	10009435 	.word	0x10009435
10009780:	e000e100 	.word	0xe000e100
10009784:	40005000 	.word	0x40005000
10009788:	100094c1 	.word	0x100094c1
1000978c:	10009549 	.word	0x10009549
10009790:	10008861 	.word	0x10008861
10009794:	1000ec59 	.word	0x1000ec59
10009798:	10008379 	.word	0x10008379

1000979c <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000979c:	6802      	ldr	r2, [r0, #0]
1000979e:	2001      	movs	r0, #1
100097a0:	7913      	ldrb	r3, [r2, #4]
100097a2:	4203      	tst	r3, r0
100097a4:	d0fc      	beq.n	100097a0 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
100097a6:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
100097a8:	2000      	movs	r0, #0
100097aa:	4770      	bx	lr

100097ac <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
100097ac:	6802      	ldr	r2, [r0, #0]
100097ae:	2001      	movs	r0, #1
100097b0:	7d13      	ldrb	r3, [r2, #20]
100097b2:	4203      	tst	r3, r0
100097b4:	d0fc      	beq.n	100097b0 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
100097b6:	7c13      	ldrb	r3, [r2, #16]
100097b8:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
100097ba:	2000      	movs	r0, #0
100097bc:	4770      	bx	lr
100097be:	46c0      	nop			; (mov r8, r8)

100097c0 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100097c0:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
100097c2:	2a00      	cmp	r2, #0
100097c4:	d00d      	beq.n	100097e2 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
100097c6:	330b      	adds	r3, #11
100097c8:	5cc3      	ldrb	r3, [r0, r3]
100097ca:	b2db      	uxtb	r3, r3
100097cc:	2b05      	cmp	r3, #5
100097ce:	d008      	beq.n	100097e2 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
100097d0:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
100097d2:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
100097d4:	2205      	movs	r2, #5
100097d6:	2322      	movs	r3, #34	; 0x22
100097d8:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
100097da:	6803      	ldr	r3, [r0, #0]
100097dc:	3a04      	subs	r2, #4
100097de:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
100097e0:	2300      	movs	r3, #0
}
100097e2:	0018      	movs	r0, r3
100097e4:	4770      	bx	lr
100097e6:	46c0      	nop			; (mov r8, r8)

100097e8 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100097e8:	0093      	lsls	r3, r2, #2
100097ea:	18c3      	adds	r3, r0, r3
100097ec:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100097ee:	2120      	movs	r1, #32
100097f0:	2301      	movs	r3, #1
100097f2:	4093      	lsls	r3, r2
100097f4:	5c42      	ldrb	r2, [r0, r1]
100097f6:	4313      	orrs	r3, r2
100097f8:	5443      	strb	r3, [r0, r1]
}
100097fa:	4770      	bx	lr

100097fc <uart_unregister_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
100097fc:	008b      	lsls	r3, r1, #2
100097fe:	18c3      	adds	r3, r0, r3
10009800:	2200      	movs	r2, #0
10009802:	605a      	str	r2, [r3, #4]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
10009804:	3201      	adds	r2, #1
10009806:	408a      	lsls	r2, r1
10009808:	2120      	movs	r1, #32
1000980a:	5c43      	ldrb	r3, [r0, r1]
1000980c:	4393      	bics	r3, r2
1000980e:	5443      	strb	r3, [r0, r1]
}
10009810:	4770      	bx	lr
10009812:	46c0      	nop			; (mov r8, r8)

10009814 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009814:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009816:	2221      	movs	r2, #33	; 0x21
10009818:	2301      	movs	r3, #1
1000981a:	408b      	lsls	r3, r1
1000981c:	5c84      	ldrb	r4, [r0, r2]
1000981e:	4323      	orrs	r3, r4
10009820:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009822:	2901      	cmp	r1, #1
10009824:	d104      	bne.n	10009830 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009826:	6802      	ldr	r2, [r0, #0]
10009828:	7a11      	ldrb	r1, [r2, #8]
1000982a:	2320      	movs	r3, #32
1000982c:	430b      	orrs	r3, r1
1000982e:	7213      	strb	r3, [r2, #8]
	}
}
10009830:	bd10      	pop	{r4, pc}
10009832:	46c0      	nop			; (mov r8, r8)

10009834 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009834:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009836:	2201      	movs	r2, #1
10009838:	408a      	lsls	r2, r1
1000983a:	2421      	movs	r4, #33	; 0x21
1000983c:	5d03      	ldrb	r3, [r0, r4]
1000983e:	4393      	bics	r3, r2
10009840:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009842:	2901      	cmp	r1, #1
10009844:	d104      	bne.n	10009850 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009846:	6802      	ldr	r2, [r0, #0]
10009848:	7a13      	ldrb	r3, [r2, #8]
1000984a:	311f      	adds	r1, #31
1000984c:	438b      	bics	r3, r1
1000984e:	7213      	strb	r3, [r2, #8]
	}

}
10009850:	bd10      	pop	{r4, pc}
10009852:	46c0      	nop			; (mov r8, r8)

10009854 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009854:	b5f0      	push	{r4, r5, r6, r7, lr}
10009856:	4647      	mov	r7, r8
10009858:	b480      	push	{r7}
1000985a:	000c      	movs	r4, r1
1000985c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000985e:	2800      	cmp	r0, #0
10009860:	d10d      	bne.n	1000987e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009862:	2a00      	cmp	r2, #0
10009864:	dd0e      	ble.n	10009884 <_read+0x30>
10009866:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009868:	4e08      	ldr	r6, [pc, #32]	; (1000988c <_read+0x38>)
1000986a:	4d09      	ldr	r5, [pc, #36]	; (10009890 <_read+0x3c>)
1000986c:	6830      	ldr	r0, [r6, #0]
1000986e:	0021      	movs	r1, r4
10009870:	682b      	ldr	r3, [r5, #0]
10009872:	4798      	blx	r3
		ptr++;
10009874:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009876:	42a7      	cmp	r7, r4
10009878:	d1f8      	bne.n	1000986c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000987a:	4640      	mov	r0, r8
1000987c:	e003      	b.n	10009886 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000987e:	2001      	movs	r0, #1
10009880:	4240      	negs	r0, r0
10009882:	e000      	b.n	10009886 <_read+0x32>
	}

	for (; len > 0; --len) {
10009884:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009886:	bc04      	pop	{r2}
10009888:	4690      	mov	r8, r2
1000988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000988c:	10012d68 	.word	0x10012d68
10009890:	10012d60 	.word	0x10012d60

10009894 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009894:	b5f0      	push	{r4, r5, r6, r7, lr}
10009896:	4647      	mov	r7, r8
10009898:	b480      	push	{r7}
1000989a:	000e      	movs	r6, r1
1000989c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000989e:	3801      	subs	r0, #1
100098a0:	2802      	cmp	r0, #2
100098a2:	d811      	bhi.n	100098c8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
100098a4:	2a00      	cmp	r2, #0
100098a6:	d012      	beq.n	100098ce <_write+0x3a>
100098a8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
100098aa:	4b0c      	ldr	r3, [pc, #48]	; (100098dc <_write+0x48>)
100098ac:	4698      	mov	r8, r3
100098ae:	4f0c      	ldr	r7, [pc, #48]	; (100098e0 <_write+0x4c>)
100098b0:	4643      	mov	r3, r8
100098b2:	6818      	ldr	r0, [r3, #0]
100098b4:	5d31      	ldrb	r1, [r6, r4]
100098b6:	683b      	ldr	r3, [r7, #0]
100098b8:	4798      	blx	r3
100098ba:	2800      	cmp	r0, #0
100098bc:	db09      	blt.n	100098d2 <_write+0x3e>
			return -1;
		}
		++nChars;
100098be:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
100098c0:	42a5      	cmp	r5, r4
100098c2:	d1f5      	bne.n	100098b0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
100098c4:	0020      	movs	r0, r4
100098c6:	e006      	b.n	100098d6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
100098c8:	2001      	movs	r0, #1
100098ca:	4240      	negs	r0, r0
100098cc:	e003      	b.n	100098d6 <_write+0x42>
	}

	for (; len != 0; --len) {
100098ce:	2000      	movs	r0, #0
100098d0:	e001      	b.n	100098d6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100098d2:	2001      	movs	r0, #1
100098d4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100098d6:	bc04      	pop	{r2}
100098d8:	4690      	mov	r8, r2
100098da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100098dc:	10012d68 	.word	0x10012d68
100098e0:	10012d64 	.word	0x10012d64

100098e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100098e4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100098e6:	4a06      	ldr	r2, [pc, #24]	; (10009900 <_sbrk+0x1c>)
100098e8:	6812      	ldr	r2, [r2, #0]
100098ea:	2a00      	cmp	r2, #0
100098ec:	d102      	bne.n	100098f4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100098ee:	4905      	ldr	r1, [pc, #20]	; (10009904 <_sbrk+0x20>)
100098f0:	4a03      	ldr	r2, [pc, #12]	; (10009900 <_sbrk+0x1c>)
100098f2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100098f4:	4a02      	ldr	r2, [pc, #8]	; (10009900 <_sbrk+0x1c>)
100098f6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100098f8:	18c3      	adds	r3, r0, r3
100098fa:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100098fc:	4770      	bx	lr
100098fe:	46c0      	nop			; (mov r8, r8)
10009900:	10012ac0 	.word	0x10012ac0
10009904:	10014998 	.word	0x10014998

10009908 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009908:	2001      	movs	r0, #1
1000990a:	4240      	negs	r0, r0
1000990c:	4770      	bx	lr
1000990e:	46c0      	nop			; (mov r8, r8)

10009910 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009910:	2380      	movs	r3, #128	; 0x80
10009912:	019b      	lsls	r3, r3, #6
10009914:	604b      	str	r3, [r1, #4]

	return 0;
}
10009916:	2000      	movs	r0, #0
10009918:	4770      	bx	lr
1000991a:	46c0      	nop			; (mov r8, r8)

1000991c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000991c:	2001      	movs	r0, #1
1000991e:	4770      	bx	lr

10009920 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009920:	2000      	movs	r0, #0
10009922:	4770      	bx	lr

10009924 <pxp_monitor_connect_request>:
* @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_connect_request(at_ble_scan_info_t *scan_buffer,
uint8_t index)
{
10009924:	b510      	push	{r4, lr}
	memcpy((uint8_t *)&pxp_reporter_address,
10009926:	4c13      	ldr	r4, [pc, #76]	; (10009974 <pxp_monitor_connect_request+0x50>)
10009928:	008b      	lsls	r3, r1, #2
1000992a:	185b      	adds	r3, r3, r1
1000992c:	00db      	lsls	r3, r3, #3
1000992e:	1859      	adds	r1, r3, r1
10009930:	1841      	adds	r1, r0, r1
10009932:	3101      	adds	r1, #1
10009934:	2207      	movs	r2, #7
10009936:	0020      	movs	r0, r4
10009938:	4b0f      	ldr	r3, [pc, #60]	; (10009978 <pxp_monitor_connect_request+0x54>)
1000993a:	4798      	blx	r3
	(uint8_t *)&scan_buffer[index].dev_addr,
	sizeof(at_ble_addr_t));

	if (gap_dev_connect(&pxp_reporter_address) == AT_BLE_SUCCESS) {
1000993c:	0020      	movs	r0, r4
1000993e:	4b0f      	ldr	r3, [pc, #60]	; (1000997c <pxp_monitor_connect_request+0x58>)
10009940:	4798      	blx	r3
10009942:	1e04      	subs	r4, r0, #0
10009944:	d10d      	bne.n	10009962 <pxp_monitor_connect_request+0x3e>
		DBG_LOG("PXP Connect request sent");
10009946:	480e      	ldr	r0, [pc, #56]	; (10009980 <pxp_monitor_connect_request+0x5c>)
10009948:	4b0e      	ldr	r3, [pc, #56]	; (10009984 <pxp_monitor_connect_request+0x60>)
1000994a:	4798      	blx	r3
1000994c:	480e      	ldr	r0, [pc, #56]	; (10009988 <pxp_monitor_connect_request+0x64>)
1000994e:	4b0f      	ldr	r3, [pc, #60]	; (1000998c <pxp_monitor_connect_request+0x68>)
10009950:	4798      	blx	r3
		pxp_connect_request_flag = PXP_DEV_CONNECTING;
10009952:	2201      	movs	r2, #1
10009954:	4b0e      	ldr	r3, [pc, #56]	; (10009990 <pxp_monitor_connect_request+0x6c>)
10009956:	701a      	strb	r2, [r3, #0]
		hw_timer_start_func_cb(PXP_CONNECT_REQ_INTERVAL);
10009958:	4b0e      	ldr	r3, [pc, #56]	; (10009994 <pxp_monitor_connect_request+0x70>)
1000995a:	681b      	ldr	r3, [r3, #0]
1000995c:	2014      	movs	r0, #20
1000995e:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10009960:	e006      	b.n	10009970 <pxp_monitor_connect_request+0x4c>
	}
    else {
		DBG_LOG("PXP Connect request send failed");
10009962:	4807      	ldr	r0, [pc, #28]	; (10009980 <pxp_monitor_connect_request+0x5c>)
10009964:	4b07      	ldr	r3, [pc, #28]	; (10009984 <pxp_monitor_connect_request+0x60>)
10009966:	4798      	blx	r3
10009968:	480b      	ldr	r0, [pc, #44]	; (10009998 <pxp_monitor_connect_request+0x74>)
1000996a:	4b08      	ldr	r3, [pc, #32]	; (1000998c <pxp_monitor_connect_request+0x68>)
1000996c:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
1000996e:	24e2      	movs	r4, #226	; 0xe2
}
10009970:	0020      	movs	r0, r4
10009972:	bd10      	pop	{r4, pc}
10009974:	10012d88 	.word	0x10012d88
10009978:	1000ff37 	.word	0x1000ff37
1000997c:	1000ab45 	.word	0x1000ab45
10009980:	1001141c 	.word	0x1001141c
10009984:	10010079 	.word	0x10010079
10009988:	10011720 	.word	0x10011720
1000998c:	1000ff59 	.word	0x1000ff59
10009990:	10012ac8 	.word	0x10012ac8
10009994:	10012acc 	.word	0x10012acc
10009998:	1001173c 	.word	0x1001173c

1000999c <register_hw_timer_start_func_cb>:
*
* @return none.
*/
void register_hw_timer_start_func_cb(hw_timer_start_func_cb_t timer_start_fn)
{
	hw_timer_start_func_cb = timer_start_fn;
1000999c:	4b01      	ldr	r3, [pc, #4]	; (100099a4 <register_hw_timer_start_func_cb+0x8>)
1000999e:	6018      	str	r0, [r3, #0]
}
100099a0:	4770      	bx	lr
100099a2:	46c0      	nop			; (mov r8, r8)
100099a4:	10012acc 	.word	0x10012acc

100099a8 <register_hw_timer_stop_func_cb>:
*
* @return none.
*/
void register_hw_timer_stop_func_cb(hw_timer_stop_func_cb_t timer_stop_fn)
{
	hw_timer_stop_func_cb = timer_stop_fn;
100099a8:	4b01      	ldr	r3, [pc, #4]	; (100099b0 <register_hw_timer_stop_func_cb+0x8>)
100099aa:	6018      	str	r0, [r3, #0]
}
100099ac:	4770      	bx	lr
100099ae:	46c0      	nop			; (mov r8, r8)
100099b0:	10012ac4 	.word	0x10012ac4

100099b4 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
100099b4:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
100099b6:	4804      	ldr	r0, [pc, #16]	; (100099c8 <ble_undefined_event_handler+0x14>)
100099b8:	4b04      	ldr	r3, [pc, #16]	; (100099cc <ble_undefined_event_handler+0x18>)
100099ba:	4798      	blx	r3
100099bc:	4804      	ldr	r0, [pc, #16]	; (100099d0 <ble_undefined_event_handler+0x1c>)
100099be:	4b05      	ldr	r3, [pc, #20]	; (100099d4 <ble_undefined_event_handler+0x20>)
100099c0:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
100099c2:	2000      	movs	r0, #0
100099c4:	bd10      	pop	{r4, pc}
100099c6:	46c0      	nop			; (mov r8, r8)
100099c8:	1001141c 	.word	0x1001141c
100099cc:	10010079 	.word	0x10010079
100099d0:	100119b4 	.word	0x100119b4
100099d4:	1000ff59 	.word	0x1000ff59

100099d8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
100099d8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
100099da:	7800      	ldrb	r0, [r0, #0]
100099dc:	2800      	cmp	r0, #0
100099de:	d006      	beq.n	100099ee <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
100099e0:	4803      	ldr	r0, [pc, #12]	; (100099f0 <ble_scan_report_handler+0x18>)
100099e2:	4b04      	ldr	r3, [pc, #16]	; (100099f4 <ble_scan_report_handler+0x1c>)
100099e4:	4798      	blx	r3
100099e6:	4804      	ldr	r0, [pc, #16]	; (100099f8 <ble_scan_report_handler+0x20>)
100099e8:	4b04      	ldr	r3, [pc, #16]	; (100099fc <ble_scan_report_handler+0x24>)
100099ea:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100099ec:	20e2      	movs	r0, #226	; 0xe2
}
100099ee:	bd10      	pop	{r4, pc}
100099f0:	1001141c 	.word	0x1001141c
100099f4:	10010079 	.word	0x10010079
100099f8:	100119d0 	.word	0x100119d0
100099fc:	1000ff59 	.word	0x1000ff59

10009a00 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
10009a00:	b510      	push	{r4, lr}
10009a02:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
10009a04:	4804      	ldr	r0, [pc, #16]	; (10009a18 <ble_mtu_changed_indication_handler+0x18>)
10009a06:	4b05      	ldr	r3, [pc, #20]	; (10009a1c <ble_mtu_changed_indication_handler+0x1c>)
10009a08:	4798      	blx	r3
10009a0a:	8862      	ldrh	r2, [r4, #2]
10009a0c:	8821      	ldrh	r1, [r4, #0]
10009a0e:	4804      	ldr	r0, [pc, #16]	; (10009a20 <ble_mtu_changed_indication_handler+0x20>)
10009a10:	4b04      	ldr	r3, [pc, #16]	; (10009a24 <ble_mtu_changed_indication_handler+0x24>)
10009a12:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009a14:	2000      	movs	r0, #0
10009a16:	bd10      	pop	{r4, pc}
10009a18:	1001141c 	.word	0x1001141c
10009a1c:	10010079 	.word	0x10010079
10009a20:	100119e4 	.word	0x100119e4
10009a24:	1000ff59 	.word	0x1000ff59

10009a28 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009a28:	b570      	push	{r4, r5, r6, lr}
10009a2a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009a2c:	78c5      	ldrb	r5, [r0, #3]
10009a2e:	2d00      	cmp	r5, #0
10009a30:	d108      	bne.n	10009a44 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
10009a32:	480a      	ldr	r0, [pc, #40]	; (10009a5c <ble_mtu_changed_cmd_complete_handler+0x34>)
10009a34:	4b0a      	ldr	r3, [pc, #40]	; (10009a60 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009a36:	4798      	blx	r3
10009a38:	78a2      	ldrb	r2, [r4, #2]
10009a3a:	8821      	ldrh	r1, [r4, #0]
10009a3c:	4809      	ldr	r0, [pc, #36]	; (10009a64 <ble_mtu_changed_cmd_complete_handler+0x3c>)
10009a3e:	4b0a      	ldr	r3, [pc, #40]	; (10009a68 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009a40:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009a42:	e008      	b.n	10009a56 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009a44:	4805      	ldr	r0, [pc, #20]	; (10009a5c <ble_mtu_changed_cmd_complete_handler+0x34>)
10009a46:	4b06      	ldr	r3, [pc, #24]	; (10009a60 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009a48:	4798      	blx	r3
10009a4a:	78a2      	ldrb	r2, [r4, #2]
10009a4c:	8821      	ldrh	r1, [r4, #0]
10009a4e:	4807      	ldr	r0, [pc, #28]	; (10009a6c <ble_mtu_changed_cmd_complete_handler+0x44>)
10009a50:	4b05      	ldr	r3, [pc, #20]	; (10009a68 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009a52:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009a54:	25e2      	movs	r5, #226	; 0xe2
}
10009a56:	0028      	movs	r0, r5
10009a58:	bd70      	pop	{r4, r5, r6, pc}
10009a5a:	46c0      	nop			; (mov r8, r8)
10009a5c:	1001141c 	.word	0x1001141c
10009a60:	10010079 	.word	0x10010079
10009a64:	10011a1c 	.word	0x10011a1c
10009a68:	1000ff59 	.word	0x1000ff59
10009a6c:	10011a4c 	.word	0x10011a4c

10009a70 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
10009a70:	b570      	push	{r4, r5, r6, lr}
10009a72:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009a74:	78c5      	ldrb	r5, [r0, #3]
10009a76:	2d00      	cmp	r5, #0
10009a78:	d108      	bne.n	10009a8c <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
10009a7a:	480a      	ldr	r0, [pc, #40]	; (10009aa4 <ble_characteristic_write_cmd_complete_handler+0x34>)
10009a7c:	4b0a      	ldr	r3, [pc, #40]	; (10009aa8 <ble_characteristic_write_cmd_complete_handler+0x38>)
10009a7e:	4798      	blx	r3
10009a80:	78a2      	ldrb	r2, [r4, #2]
10009a82:	8821      	ldrh	r1, [r4, #0]
10009a84:	4809      	ldr	r0, [pc, #36]	; (10009aac <ble_characteristic_write_cmd_complete_handler+0x3c>)
10009a86:	4b0a      	ldr	r3, [pc, #40]	; (10009ab0 <ble_characteristic_write_cmd_complete_handler+0x40>)
10009a88:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009a8a:	e008      	b.n	10009a9e <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
10009a8c:	4805      	ldr	r0, [pc, #20]	; (10009aa4 <ble_characteristic_write_cmd_complete_handler+0x34>)
10009a8e:	4b06      	ldr	r3, [pc, #24]	; (10009aa8 <ble_characteristic_write_cmd_complete_handler+0x38>)
10009a90:	4798      	blx	r3
10009a92:	78a2      	ldrb	r2, [r4, #2]
10009a94:	8821      	ldrh	r1, [r4, #0]
10009a96:	4807      	ldr	r0, [pc, #28]	; (10009ab4 <ble_characteristic_write_cmd_complete_handler+0x44>)
10009a98:	4b05      	ldr	r3, [pc, #20]	; (10009ab0 <ble_characteristic_write_cmd_complete_handler+0x40>)
10009a9a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009a9c:	25e2      	movs	r5, #226	; 0xe2
}
10009a9e:	0028      	movs	r0, r5
10009aa0:	bd70      	pop	{r4, r5, r6, pc}
10009aa2:	46c0      	nop			; (mov r8, r8)
10009aa4:	1001141c 	.word	0x1001141c
10009aa8:	10010079 	.word	0x10010079
10009aac:	10011a84 	.word	0x10011a84
10009ab0:	1000ff59 	.word	0x1000ff59
10009ab4:	10011ac0 	.word	0x10011ac0

10009ab8 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009aba:	0006      	movs	r6, r0
10009abc:	4c1d      	ldr	r4, [pc, #116]	; (10009b34 <ble_disconnected_state_handler+0x7c>)
10009abe:	239b      	movs	r3, #155	; 0x9b
10009ac0:	009b      	lsls	r3, r3, #2
10009ac2:	18e7      	adds	r7, r4, r3
10009ac4:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009ac6:	0023      	movs	r3, r4
10009ac8:	3b56      	subs	r3, #86	; 0x56
10009aca:	881a      	ldrh	r2, [r3, #0]
10009acc:	8833      	ldrh	r3, [r6, #0]
10009ace:	429a      	cmp	r2, r3
10009ad0:	d122      	bne.n	10009b18 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ad2:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009ad4:	2b05      	cmp	r3, #5
10009ad6:	d001      	beq.n	10009adc <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ad8:	2b08      	cmp	r3, #8
10009ada:	d102      	bne.n	10009ae2 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009adc:	2301      	movs	r3, #1
10009ade:	702b      	strb	r3, [r5, #0]
10009ae0:	e01a      	b.n	10009b18 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009ae2:	2b07      	cmp	r3, #7
10009ae4:	d80f      	bhi.n	10009b06 <ble_disconnected_state_handler+0x4e>
10009ae6:	009b      	lsls	r3, r3, #2
10009ae8:	4a13      	ldr	r2, [pc, #76]	; (10009b38 <ble_disconnected_state_handler+0x80>)
10009aea:	58d3      	ldr	r3, [r2, r3]
10009aec:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009aee:	2300      	movs	r3, #0
10009af0:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
10009af2:	4b12      	ldr	r3, [pc, #72]	; (10009b3c <ble_disconnected_state_handler+0x84>)
10009af4:	781b      	ldrb	r3, [r3, #0]
10009af6:	2b00      	cmp	r3, #0
10009af8:	d00e      	beq.n	10009b18 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
10009afa:	4a10      	ldr	r2, [pc, #64]	; (10009b3c <ble_disconnected_state_handler+0x84>)
10009afc:	7813      	ldrb	r3, [r2, #0]
10009afe:	3b01      	subs	r3, #1
10009b00:	b2db      	uxtb	r3, r3
10009b02:	7013      	strb	r3, [r2, #0]
10009b04:	e008      	b.n	10009b18 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
10009b06:	480e      	ldr	r0, [pc, #56]	; (10009b40 <ble_disconnected_state_handler+0x88>)
10009b08:	4b0e      	ldr	r3, [pc, #56]	; (10009b44 <ble_disconnected_state_handler+0x8c>)
10009b0a:	4798      	blx	r3
10009b0c:	7829      	ldrb	r1, [r5, #0]
10009b0e:	480e      	ldr	r0, [pc, #56]	; (10009b48 <ble_disconnected_state_handler+0x90>)
10009b10:	4b0e      	ldr	r3, [pc, #56]	; (10009b4c <ble_disconnected_state_handler+0x94>)
10009b12:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009b14:	2300      	movs	r3, #0
10009b16:	702b      	strb	r3, [r5, #0]
10009b18:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b1a:	42bc      	cmp	r4, r7
10009b1c:	d1d2      	bne.n	10009ac4 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009b1e:	4808      	ldr	r0, [pc, #32]	; (10009b40 <ble_disconnected_state_handler+0x88>)
10009b20:	4b08      	ldr	r3, [pc, #32]	; (10009b44 <ble_disconnected_state_handler+0x8c>)
10009b22:	4798      	blx	r3
10009b24:	8832      	ldrh	r2, [r6, #0]
10009b26:	78b1      	ldrb	r1, [r6, #2]
10009b28:	4809      	ldr	r0, [pc, #36]	; (10009b50 <ble_disconnected_state_handler+0x98>)
10009b2a:	4b08      	ldr	r3, [pc, #32]	; (10009b4c <ble_disconnected_state_handler+0x94>)
10009b2c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009b2e:	2000      	movs	r0, #0
10009b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009b32:	46c0      	nop			; (mov r8, r8)
10009b34:	10012e0a 	.word	0x10012e0a
10009b38:	10011934 	.word	0x10011934
10009b3c:	10013018 	.word	0x10013018
10009b40:	1001141c 	.word	0x1001141c
10009b44:	10010079 	.word	0x10010079
10009b48:	10011afc 	.word	0x10011afc
10009b4c:	1000ff59 	.word	0x1000ff59
10009b50:	10011b14 	.word	0x10011b14

10009b54 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
10009b54:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
10009b56:	4804      	ldr	r0, [pc, #16]	; (10009b68 <ble_conn_param_update+0x14>)
10009b58:	4b04      	ldr	r3, [pc, #16]	; (10009b6c <ble_conn_param_update+0x18>)
10009b5a:	4798      	blx	r3
10009b5c:	4804      	ldr	r0, [pc, #16]	; (10009b70 <ble_conn_param_update+0x1c>)
10009b5e:	4b05      	ldr	r3, [pc, #20]	; (10009b74 <ble_conn_param_update+0x20>)
10009b60:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009b62:	2000      	movs	r0, #0
10009b64:	bd10      	pop	{r4, pc}
10009b66:	46c0      	nop			; (mov r8, r8)
10009b68:	1001141c 	.word	0x1001141c
10009b6c:	10010079 	.word	0x10010079
10009b70:	10011b44 	.word	0x10011b44
10009b74:	1000ff59 	.word	0x1000ff59

10009b78 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009b7a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009b7c:	8801      	ldrh	r1, [r0, #0]
10009b7e:	4b28      	ldr	r3, [pc, #160]	; (10009c20 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b80:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009b82:	891a      	ldrh	r2, [r3, #8]
10009b84:	428a      	cmp	r2, r1
10009b86:	d104      	bne.n	10009b92 <ble_encryption_status_change_handler+0x1a>
10009b88:	001a      	movs	r2, r3
10009b8a:	325e      	adds	r2, #94	; 0x5e
10009b8c:	7812      	ldrb	r2, [r2, #0]
10009b8e:	2a06      	cmp	r2, #6
10009b90:	d02e      	beq.n	10009bf0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b92:	3401      	adds	r4, #1
10009b94:	b2e4      	uxtb	r4, r4
10009b96:	337c      	adds	r3, #124	; 0x7c
10009b98:	2c05      	cmp	r4, #5
10009b9a:	d1f2      	bne.n	10009b82 <ble_encryption_status_change_handler+0xa>
10009b9c:	e039      	b.n	10009c12 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009b9e:	4920      	ldr	r1, [pc, #128]	; (10009c20 <ble_encryption_status_change_handler+0xa8>)
10009ba0:	0163      	lsls	r3, r4, #5
10009ba2:	1b1a      	subs	r2, r3, r4
10009ba4:	0092      	lsls	r2, r2, #2
10009ba6:	188a      	adds	r2, r1, r2
10009ba8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009baa:	0014      	movs	r4, r2
10009bac:	345e      	adds	r4, #94	; 0x5e
10009bae:	2307      	movs	r3, #7
10009bb0:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009bb2:	481c      	ldr	r0, [pc, #112]	; (10009c24 <ble_encryption_status_change_handler+0xac>)
10009bb4:	4b1c      	ldr	r3, [pc, #112]	; (10009c28 <ble_encryption_status_change_handler+0xb0>)
10009bb6:	4798      	blx	r3
10009bb8:	481c      	ldr	r0, [pc, #112]	; (10009c2c <ble_encryption_status_change_handler+0xb4>)
10009bba:	4b1d      	ldr	r3, [pc, #116]	; (10009c30 <ble_encryption_status_change_handler+0xb8>)
10009bbc:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009bbe:	25e2      	movs	r5, #226	; 0xe2
10009bc0:	e02b      	b.n	10009c1a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009bc2:	4818      	ldr	r0, [pc, #96]	; (10009c24 <ble_encryption_status_change_handler+0xac>)
10009bc4:	4b18      	ldr	r3, [pc, #96]	; (10009c28 <ble_encryption_status_change_handler+0xb0>)
10009bc6:	4798      	blx	r3
10009bc8:	481a      	ldr	r0, [pc, #104]	; (10009c34 <ble_encryption_status_change_handler+0xbc>)
10009bca:	4b19      	ldr	r3, [pc, #100]	; (10009c30 <ble_encryption_status_change_handler+0xb8>)
10009bcc:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009bce:	4914      	ldr	r1, [pc, #80]	; (10009c20 <ble_encryption_status_change_handler+0xa8>)
10009bd0:	0163      	lsls	r3, r4, #5
10009bd2:	1b1a      	subs	r2, r3, r4
10009bd4:	0092      	lsls	r2, r2, #2
10009bd6:	188a      	adds	r2, r1, r2
10009bd8:	0010      	movs	r0, r2
10009bda:	305e      	adds	r0, #94	; 0x5e
10009bdc:	2708      	movs	r7, #8
10009bde:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009be0:	78f0      	ldrb	r0, [r6, #3]
10009be2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009be4:	78b2      	ldrb	r2, [r6, #2]
10009be6:	1b1c      	subs	r4, r3, r4
10009be8:	00a4      	lsls	r4, r4, #2
10009bea:	190c      	adds	r4, r1, r4
10009bec:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009bee:	e014      	b.n	10009c1a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009bf0:	78b5      	ldrb	r5, [r6, #2]
10009bf2:	2d00      	cmp	r5, #0
10009bf4:	d0e5      	beq.n	10009bc2 <ble_encryption_status_change_handler+0x4a>
10009bf6:	e7d2      	b.n	10009b9e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009bf8:	4e0a      	ldr	r6, [pc, #40]	; (10009c24 <ble_encryption_status_change_handler+0xac>)
10009bfa:	0030      	movs	r0, r6
10009bfc:	4d0a      	ldr	r5, [pc, #40]	; (10009c28 <ble_encryption_status_change_handler+0xb0>)
10009bfe:	47a8      	blx	r5
10009c00:	480c      	ldr	r0, [pc, #48]	; (10009c34 <ble_encryption_status_change_handler+0xbc>)
10009c02:	4c0b      	ldr	r4, [pc, #44]	; (10009c30 <ble_encryption_status_change_handler+0xb8>)
10009c04:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009c06:	0030      	movs	r0, r6
10009c08:	47a8      	blx	r5
10009c0a:	480b      	ldr	r0, [pc, #44]	; (10009c38 <ble_encryption_status_change_handler+0xc0>)
10009c0c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009c0e:	25e2      	movs	r5, #226	; 0xe2
10009c10:	e003      	b.n	10009c1a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009c12:	78b5      	ldrb	r5, [r6, #2]
10009c14:	2d00      	cmp	r5, #0
10009c16:	d1c2      	bne.n	10009b9e <ble_encryption_status_change_handler+0x26>
10009c18:	e7ee      	b.n	10009bf8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009c1a:	0028      	movs	r0, r5
10009c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c1e:	46c0      	nop			; (mov r8, r8)
10009c20:	10012dac 	.word	0x10012dac
10009c24:	1001141c 	.word	0x1001141c
10009c28:	10010079 	.word	0x10010079
10009c2c:	10011b60 	.word	0x10011b60
10009c30:	1000ff59 	.word	0x1000ff59
10009c34:	10011b74 	.word	0x10011b74
10009c38:	10011b98 	.word	0x10011b98

10009c3c <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009c3c:	b530      	push	{r4, r5, lr}
10009c3e:	b085      	sub	sp, #20
10009c40:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009c42:	4b1f      	ldr	r3, [pc, #124]	; (10009cc0 <ble_scan_info_handler+0x84>)
10009c44:	781b      	ldrb	r3, [r3, #0]
10009c46:	b2db      	uxtb	r3, r3
10009c48:	2b13      	cmp	r3, #19
10009c4a:	d824      	bhi.n	10009c96 <ble_scan_info_handler+0x5a>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009c4c:	4d1c      	ldr	r5, [pc, #112]	; (10009cc0 <ble_scan_info_handler+0x84>)
10009c4e:	782b      	ldrb	r3, [r5, #0]
10009c50:	b2db      	uxtb	r3, r3
10009c52:	0098      	lsls	r0, r3, #2
10009c54:	18c0      	adds	r0, r0, r3
10009c56:	00c0      	lsls	r0, r0, #3
10009c58:	18c3      	adds	r3, r0, r3
10009c5a:	481a      	ldr	r0, [pc, #104]	; (10009cc4 <ble_scan_info_handler+0x88>)
10009c5c:	1818      	adds	r0, r3, r0
10009c5e:	2229      	movs	r2, #41	; 0x29
10009c60:	0021      	movs	r1, r4
10009c62:	4b19      	ldr	r3, [pc, #100]	; (10009cc8 <ble_scan_info_handler+0x8c>)
10009c64:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009c66:	4819      	ldr	r0, [pc, #100]	; (10009ccc <ble_scan_info_handler+0x90>)
10009c68:	4b19      	ldr	r3, [pc, #100]	; (10009cd0 <ble_scan_info_handler+0x94>)
10009c6a:	4798      	blx	r3
10009c6c:	7829      	ldrb	r1, [r5, #0]
10009c6e:	b2c9      	uxtb	r1, r1
10009c70:	79a3      	ldrb	r3, [r4, #6]
10009c72:	79e2      	ldrb	r2, [r4, #7]
10009c74:	78a0      	ldrb	r0, [r4, #2]
10009c76:	9003      	str	r0, [sp, #12]
10009c78:	78e0      	ldrb	r0, [r4, #3]
10009c7a:	9002      	str	r0, [sp, #8]
10009c7c:	7920      	ldrb	r0, [r4, #4]
10009c7e:	9001      	str	r0, [sp, #4]
10009c80:	7960      	ldrb	r0, [r4, #5]
10009c82:	9000      	str	r0, [sp, #0]
10009c84:	4813      	ldr	r0, [pc, #76]	; (10009cd4 <ble_scan_info_handler+0x98>)
10009c86:	4c14      	ldr	r4, [pc, #80]	; (10009cd8 <ble_scan_info_handler+0x9c>)
10009c88:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009c8a:	782b      	ldrb	r3, [r5, #0]
10009c8c:	3301      	adds	r3, #1
10009c8e:	b2db      	uxtb	r3, r3
10009c90:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
10009c92:	2300      	movs	r3, #0
10009c94:	e011      	b.n	10009cba <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009c96:	480d      	ldr	r0, [pc, #52]	; (10009ccc <ble_scan_info_handler+0x90>)
10009c98:	4b0d      	ldr	r3, [pc, #52]	; (10009cd0 <ble_scan_info_handler+0x94>)
10009c9a:	4798      	blx	r3
10009c9c:	480f      	ldr	r0, [pc, #60]	; (10009cdc <ble_scan_info_handler+0xa0>)
10009c9e:	4b0e      	ldr	r3, [pc, #56]	; (10009cd8 <ble_scan_info_handler+0x9c>)
10009ca0:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009ca2:	4b0f      	ldr	r3, [pc, #60]	; (10009ce0 <ble_scan_info_handler+0xa4>)
10009ca4:	4798      	blx	r3
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
10009ca6:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009ca8:	2800      	cmp	r0, #0
10009caa:	d006      	beq.n	10009cba <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
10009cac:	4807      	ldr	r0, [pc, #28]	; (10009ccc <ble_scan_info_handler+0x90>)
10009cae:	4b08      	ldr	r3, [pc, #32]	; (10009cd0 <ble_scan_info_handler+0x94>)
10009cb0:	4798      	blx	r3
10009cb2:	480c      	ldr	r0, [pc, #48]	; (10009ce4 <ble_scan_info_handler+0xa8>)
10009cb4:	4b08      	ldr	r3, [pc, #32]	; (10009cd8 <ble_scan_info_handler+0x9c>)
10009cb6:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
10009cb8:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009cba:	0018      	movs	r0, r3
10009cbc:	b005      	add	sp, #20
10009cbe:	bd30      	pop	{r4, r5, pc}
10009cc0:	10012ad8 	.word	0x10012ad8
10009cc4:	10013080 	.word	0x10013080
10009cc8:	1000ff37 	.word	0x1000ff37
10009ccc:	1001141c 	.word	0x1001141c
10009cd0:	10010079 	.word	0x10010079
10009cd4:	10011bc0 	.word	0x10011bc0
10009cd8:	1000ff59 	.word	0x1000ff59
10009cdc:	10011bfc 	.word	0x10011bfc
10009ce0:	1000cd15 	.word	0x1000cd15
10009ce4:	10011c34 	.word	0x10011c34

10009ce8 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
10009ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cea:	4647      	mov	r7, r8
10009cec:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
10009cee:	7803      	ldrb	r3, [r0, #0]
10009cf0:	2b00      	cmp	r3, #0
10009cf2:	d14d      	bne.n	10009d90 <ble_resolv_rand_addr_handler+0xa8>
10009cf4:	4d33      	ldr	r5, [pc, #204]	; (10009dc4 <ble_resolv_rand_addr_handler+0xdc>)
10009cf6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
10009cf8:	1c46      	adds	r6, r0, #1
10009cfa:	4f33      	ldr	r7, [pc, #204]	; (10009dc8 <ble_resolv_rand_addr_handler+0xe0>)
10009cfc:	2210      	movs	r2, #16
10009cfe:	0029      	movs	r1, r5
10009d00:	0030      	movs	r0, r6
10009d02:	47b8      	blx	r7
10009d04:	2800      	cmp	r0, #0
10009d06:	d02c      	beq.n	10009d62 <ble_resolv_rand_addr_handler+0x7a>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d08:	3401      	adds	r4, #1
10009d0a:	b2e4      	uxtb	r4, r4
10009d0c:	357c      	adds	r5, #124	; 0x7c
10009d0e:	2c05      	cmp	r4, #5
10009d10:	d1f4      	bne.n	10009cfc <ble_resolv_rand_addr_handler+0x14>
10009d12:	e03d      	b.n	10009d90 <ble_resolv_rand_addr_handler+0xa8>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009d14:	001d      	movs	r5, r3
10009d16:	7811      	ldrb	r1, [r2, #0]
10009d18:	2900      	cmp	r1, #0
10009d1a:	d11b      	bne.n	10009d54 <ble_resolv_rand_addr_handler+0x6c>
10009d1c:	e001      	b.n	10009d22 <ble_resolv_rand_addr_handler+0x3a>
10009d1e:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d20:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10009d22:	4b2a      	ldr	r3, [pc, #168]	; (10009dcc <ble_resolv_rand_addr_handler+0xe4>)
10009d24:	4698      	mov	r8, r3
10009d26:	016e      	lsls	r6, r5, #5
10009d28:	1b77      	subs	r7, r6, r5
10009d2a:	00bf      	lsls	r7, r7, #2
10009d2c:	4447      	add	r7, r8
10009d2e:	2212      	movs	r2, #18
10009d30:	4927      	ldr	r1, [pc, #156]	; (10009dd0 <ble_resolv_rand_addr_handler+0xe8>)
10009d32:	0038      	movs	r0, r7
10009d34:	4b27      	ldr	r3, [pc, #156]	; (10009dd4 <ble_resolv_rand_addr_handler+0xec>)
10009d36:	4798      	blx	r3
				ble_device_count++;
10009d38:	4a27      	ldr	r2, [pc, #156]	; (10009dd8 <ble_resolv_rand_addr_handler+0xf0>)
10009d3a:	7813      	ldrb	r3, [r2, #0]
10009d3c:	3301      	adds	r3, #1
10009d3e:	b2db      	uxtb	r3, r3
10009d40:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009d42:	375e      	adds	r7, #94	; 0x5e
10009d44:	2302      	movs	r3, #2
10009d46:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009d48:	1b75      	subs	r5, r6, r5
10009d4a:	00ad      	lsls	r5, r5, #2
10009d4c:	4445      	add	r5, r8
10009d4e:	3308      	adds	r3, #8
10009d50:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
10009d52:	e02c      	b.n	10009dae <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d54:	3401      	adds	r4, #1
10009d56:	b2e4      	uxtb	r4, r4
10009d58:	3301      	adds	r3, #1
10009d5a:	327c      	adds	r2, #124	; 0x7c
10009d5c:	2c05      	cmp	r4, #5
10009d5e:	d1d9      	bne.n	10009d14 <ble_resolv_rand_addr_handler+0x2c>
10009d60:	e025      	b.n	10009dae <ble_resolv_rand_addr_handler+0xc6>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
10009d62:	481e      	ldr	r0, [pc, #120]	; (10009ddc <ble_resolv_rand_addr_handler+0xf4>)
10009d64:	4b1e      	ldr	r3, [pc, #120]	; (10009de0 <ble_resolv_rand_addr_handler+0xf8>)
10009d66:	4798      	blx	r3
10009d68:	481e      	ldr	r0, [pc, #120]	; (10009de4 <ble_resolv_rand_addr_handler+0xfc>)
10009d6a:	4b1f      	ldr	r3, [pc, #124]	; (10009de8 <ble_resolv_rand_addr_handler+0x100>)
10009d6c:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009d6e:	4817      	ldr	r0, [pc, #92]	; (10009dcc <ble_resolv_rand_addr_handler+0xe4>)
10009d70:	0163      	lsls	r3, r4, #5
10009d72:	1b1a      	subs	r2, r3, r4
10009d74:	0092      	lsls	r2, r2, #2
10009d76:	1882      	adds	r2, r0, r2
10009d78:	0011      	movs	r1, r2
10009d7a:	315e      	adds	r1, #94	; 0x5e
10009d7c:	2502      	movs	r5, #2
10009d7e:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009d80:	210a      	movs	r1, #10
10009d82:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10009d84:	0010      	movs	r0, r2
10009d86:	2212      	movs	r2, #18
10009d88:	4911      	ldr	r1, [pc, #68]	; (10009dd0 <ble_resolv_rand_addr_handler+0xe8>)
10009d8a:	4b12      	ldr	r3, [pc, #72]	; (10009dd4 <ble_resolv_rand_addr_handler+0xec>)
10009d8c:	4798      	blx	r3
10009d8e:	e00e      	b.n	10009dae <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
10009d90:	4812      	ldr	r0, [pc, #72]	; (10009ddc <ble_resolv_rand_addr_handler+0xf4>)
10009d92:	4b13      	ldr	r3, [pc, #76]	; (10009de0 <ble_resolv_rand_addr_handler+0xf8>)
10009d94:	4798      	blx	r3
10009d96:	4815      	ldr	r0, [pc, #84]	; (10009dec <ble_resolv_rand_addr_handler+0x104>)
10009d98:	4b13      	ldr	r3, [pc, #76]	; (10009de8 <ble_resolv_rand_addr_handler+0x100>)
10009d9a:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009d9c:	235e      	movs	r3, #94	; 0x5e
10009d9e:	4a0b      	ldr	r2, [pc, #44]	; (10009dcc <ble_resolv_rand_addr_handler+0xe4>)
10009da0:	5cd3      	ldrb	r3, [r2, r3]
10009da2:	2b00      	cmp	r3, #0
10009da4:	d0bb      	beq.n	10009d1e <ble_resolv_rand_addr_handler+0x36>
10009da6:	4a12      	ldr	r2, [pc, #72]	; (10009df0 <ble_resolv_rand_addr_handler+0x108>)
10009da8:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009daa:	2401      	movs	r4, #1
10009dac:	e7b2      	b.n	10009d14 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
10009dae:	480b      	ldr	r0, [pc, #44]	; (10009ddc <ble_resolv_rand_addr_handler+0xf4>)
10009db0:	4b0b      	ldr	r3, [pc, #44]	; (10009de0 <ble_resolv_rand_addr_handler+0xf8>)
10009db2:	4798      	blx	r3
10009db4:	0021      	movs	r1, r4
10009db6:	480f      	ldr	r0, [pc, #60]	; (10009df4 <ble_resolv_rand_addr_handler+0x10c>)
10009db8:	4b0b      	ldr	r3, [pc, #44]	; (10009de8 <ble_resolv_rand_addr_handler+0x100>)
10009dba:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
10009dbc:	2000      	movs	r0, #0
10009dbe:	bc04      	pop	{r2}
10009dc0:	4690      	mov	r8, r2
10009dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009dc4:	10012df2 	.word	0x10012df2
10009dc8:	1000ff19 	.word	0x1000ff19
10009dcc:	10012dac 	.word	0x10012dac
10009dd0:	10013058 	.word	0x10013058
10009dd4:	1000ff37 	.word	0x1000ff37
10009dd8:	10013018 	.word	0x10013018
10009ddc:	1001141c 	.word	0x1001141c
10009de0:	10010079 	.word	0x10010079
10009de4:	10011c5c 	.word	0x10011c5c
10009de8:	1000ff59 	.word	0x1000ff59
10009dec:	10011c74 	.word	0x10011c74
10009df0:	10012e86 	.word	0x10012e86
10009df4:	10011c4c 	.word	0x10011c4c

10009df8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009df8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dfa:	465f      	mov	r7, fp
10009dfc:	464e      	mov	r6, r9
10009dfe:	4645      	mov	r5, r8
10009e00:	b4e0      	push	{r5, r6, r7}
10009e02:	b09a      	sub	sp, #104	; 0x68
10009e04:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
10009e06:	7a86      	ldrb	r6, [r0, #10]
10009e08:	2e00      	cmp	r6, #0
10009e0a:	d000      	beq.n	10009e0e <ble_connected_state_handler+0x16>
10009e0c:	e0bc      	b.n	10009f88 <ble_connected_state_handler+0x190>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
10009e0e:	4870      	ldr	r0, [pc, #448]	; (10009fd0 <ble_connected_state_handler+0x1d8>)
10009e10:	4f70      	ldr	r7, [pc, #448]	; (10009fd4 <ble_connected_state_handler+0x1dc>)
10009e12:	47b8      	blx	r7
10009e14:	792b      	ldrb	r3, [r5, #4]
10009e16:	796a      	ldrb	r2, [r5, #5]
10009e18:	79a9      	ldrb	r1, [r5, #6]
10009e1a:	7868      	ldrb	r0, [r5, #1]
10009e1c:	9002      	str	r0, [sp, #8]
10009e1e:	78a8      	ldrb	r0, [r5, #2]
10009e20:	9001      	str	r0, [sp, #4]
10009e22:	78e8      	ldrb	r0, [r5, #3]
10009e24:	9000      	str	r0, [sp, #0]
10009e26:	486c      	ldr	r0, [pc, #432]	; (10009fd8 <ble_connected_state_handler+0x1e0>)
10009e28:	4c6c      	ldr	r4, [pc, #432]	; (10009fdc <ble_connected_state_handler+0x1e4>)
10009e2a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
10009e2c:	4868      	ldr	r0, [pc, #416]	; (10009fd0 <ble_connected_state_handler+0x1d8>)
10009e2e:	47b8      	blx	r7
10009e30:	8929      	ldrh	r1, [r5, #8]
10009e32:	486b      	ldr	r0, [pc, #428]	; (10009fe0 <ble_connected_state_handler+0x1e8>)
10009e34:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
10009e36:	2212      	movs	r2, #18
10009e38:	0029      	movs	r1, r5
10009e3a:	486a      	ldr	r0, [pc, #424]	; (10009fe4 <ble_connected_state_handler+0x1ec>)
10009e3c:	4b6a      	ldr	r3, [pc, #424]	; (10009fe8 <ble_connected_state_handler+0x1f0>)
10009e3e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009e40:	9504      	str	r5, [sp, #16]
10009e42:	2207      	movs	r2, #7
10009e44:	0029      	movs	r1, r5
10009e46:	4869      	ldr	r0, [pc, #420]	; (10009fec <ble_connected_state_handler+0x1f4>)
10009e48:	4b69      	ldr	r3, [pc, #420]	; (10009ff0 <ble_connected_state_handler+0x1f8>)
10009e4a:	4798      	blx	r3
10009e4c:	2800      	cmp	r0, #0
10009e4e:	d100      	bne.n	10009e52 <ble_connected_state_handler+0x5a>
10009e50:	e0a3      	b.n	10009f9a <ble_connected_state_handler+0x1a2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
10009e52:	782b      	ldrb	r3, [r5, #0]
10009e54:	2b02      	cmp	r3, #2
10009e56:	d000      	beq.n	10009e5a <ble_connected_state_handler+0x62>
10009e58:	e09f      	b.n	10009f9a <ble_connected_state_handler+0x1a2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
10009e5a:	2250      	movs	r2, #80	; 0x50
10009e5c:	2100      	movs	r1, #0
10009e5e:	a806      	add	r0, sp, #24
10009e60:	4b64      	ldr	r3, [pc, #400]	; (10009ff4 <ble_connected_state_handler+0x1fc>)
10009e62:	4798      	blx	r3
10009e64:	4f64      	ldr	r7, [pc, #400]	; (10009ff8 <ble_connected_state_handler+0x200>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
10009e66:	2300      	movs	r3, #0
10009e68:	e00b      	b.n	10009e82 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009e6a:	1c59      	adds	r1, r3, #1
10009e6c:	7814      	ldrb	r4, [r2, #0]
10009e6e:	a806      	add	r0, sp, #24
10009e70:	54c4      	strb	r4, [r0, r3]
10009e72:	3201      	adds	r2, #1
10009e74:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
10009e76:	42b3      	cmp	r3, r6
10009e78:	d1f7      	bne.n	10009e6a <ble_connected_state_handler+0x72>
10009e7a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009e7c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
10009e7e:	2b50      	cmp	r3, #80	; 0x50
10009e80:	d004      	beq.n	10009e8c <ble_connected_state_handler+0x94>
10009e82:	001e      	movs	r6, r3
10009e84:	3610      	adds	r6, #16
10009e86:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009e88:	003a      	movs	r2, r7
10009e8a:	e7ee      	b.n	10009e6a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
10009e8c:	aa06      	add	r2, sp, #24
10009e8e:	0029      	movs	r1, r5
10009e90:	2005      	movs	r0, #5
10009e92:	4b5a      	ldr	r3, [pc, #360]	; (10009ffc <ble_connected_state_handler+0x204>)
10009e94:	4798      	blx	r3
10009e96:	1e06      	subs	r6, r0, #0
10009e98:	d106      	bne.n	10009ea8 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
10009e9a:	484d      	ldr	r0, [pc, #308]	; (10009fd0 <ble_connected_state_handler+0x1d8>)
10009e9c:	4b4d      	ldr	r3, [pc, #308]	; (10009fd4 <ble_connected_state_handler+0x1dc>)
10009e9e:	4798      	blx	r3
10009ea0:	4857      	ldr	r0, [pc, #348]	; (1000a000 <ble_connected_state_handler+0x208>)
10009ea2:	4b4e      	ldr	r3, [pc, #312]	; (10009fdc <ble_connected_state_handler+0x1e4>)
10009ea4:	4798      	blx	r3
						return AT_BLE_SUCCESS;
10009ea6:	e08c      	b.n	10009fc2 <ble_connected_state_handler+0x1ca>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
10009ea8:	4849      	ldr	r0, [pc, #292]	; (10009fd0 <ble_connected_state_handler+0x1d8>)
10009eaa:	4b4a      	ldr	r3, [pc, #296]	; (10009fd4 <ble_connected_state_handler+0x1dc>)
10009eac:	4798      	blx	r3
10009eae:	4855      	ldr	r0, [pc, #340]	; (1000a004 <ble_connected_state_handler+0x20c>)
10009eb0:	4b4a      	ldr	r3, [pc, #296]	; (10009fdc <ble_connected_state_handler+0x1e4>)
10009eb2:	4798      	blx	r3
						return AT_BLE_FAILURE;
10009eb4:	26e2      	movs	r6, #226	; 0xe2
10009eb6:	e084      	b.n	10009fc2 <ble_connected_state_handler+0x1ca>
10009eb8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009eba:	9405      	str	r4, [sp, #20]
10009ebc:	2207      	movs	r2, #7
10009ebe:	9904      	ldr	r1, [sp, #16]
10009ec0:	4648      	mov	r0, r9
10009ec2:	47d8      	blx	fp
10009ec4:	2800      	cmp	r0, #0
10009ec6:	d109      	bne.n	10009edc <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009ec8:	9a05      	ldr	r2, [sp, #20]
10009eca:	0153      	lsls	r3, r2, #5
10009ecc:	1a9b      	subs	r3, r3, r2
10009ece:	009a      	lsls	r2, r3, #2
10009ed0:	4b4d      	ldr	r3, [pc, #308]	; (1000a008 <ble_connected_state_handler+0x210>)
10009ed2:	189b      	adds	r3, r3, r2
10009ed4:	335e      	adds	r3, #94	; 0x5e
10009ed6:	2202      	movs	r2, #2
10009ed8:	701a      	strb	r2, [r3, #0]
10009eda:	e02b      	b.n	10009f34 <ble_connected_state_handler+0x13c>
10009edc:	3401      	adds	r4, #1
10009ede:	237c      	movs	r3, #124	; 0x7c
10009ee0:	469c      	mov	ip, r3
10009ee2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ee4:	2c05      	cmp	r4, #5
10009ee6:	d1e7      	bne.n	10009eb8 <ble_connected_state_handler+0xc0>
10009ee8:	e062      	b.n	10009fb0 <ble_connected_state_handler+0x1b8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009eea:	001c      	movs	r4, r3
10009eec:	7811      	ldrb	r1, [r2, #0]
10009eee:	2900      	cmp	r1, #0
10009ef0:	d11a      	bne.n	10009f28 <ble_connected_state_handler+0x130>
10009ef2:	e001      	b.n	10009ef8 <ble_connected_state_handler+0x100>
10009ef4:	2400      	movs	r4, #0
10009ef6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
10009ef8:	0163      	lsls	r3, r4, #5
10009efa:	4699      	mov	r9, r3
10009efc:	1b18      	subs	r0, r3, r4
10009efe:	0080      	lsls	r0, r0, #2
10009f00:	4b41      	ldr	r3, [pc, #260]	; (1000a008 <ble_connected_state_handler+0x210>)
10009f02:	4698      	mov	r8, r3
10009f04:	4440      	add	r0, r8
10009f06:	2212      	movs	r2, #18
10009f08:	0029      	movs	r1, r5
10009f0a:	4b37      	ldr	r3, [pc, #220]	; (10009fe8 <ble_connected_state_handler+0x1f0>)
10009f0c:	4798      	blx	r3
						ble_device_count++;
10009f0e:	4a3f      	ldr	r2, [pc, #252]	; (1000a00c <ble_connected_state_handler+0x214>)
10009f10:	7813      	ldrb	r3, [r2, #0]
10009f12:	3301      	adds	r3, #1
10009f14:	b2db      	uxtb	r3, r3
10009f16:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009f18:	464b      	mov	r3, r9
10009f1a:	1b1b      	subs	r3, r3, r4
10009f1c:	009b      	lsls	r3, r3, #2
10009f1e:	4443      	add	r3, r8
10009f20:	335e      	adds	r3, #94	; 0x5e
10009f22:	2202      	movs	r2, #2
10009f24:	701a      	strb	r2, [r3, #0]
						break;
10009f26:	e005      	b.n	10009f34 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f28:	1c79      	adds	r1, r7, #1
10009f2a:	b2cf      	uxtb	r7, r1
10009f2c:	3301      	adds	r3, #1
10009f2e:	327c      	adds	r2, #124	; 0x7c
10009f30:	2f05      	cmp	r7, #5
10009f32:	d1da      	bne.n	10009eea <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009f34:	2207      	movs	r2, #7
10009f36:	0029      	movs	r1, r5
10009f38:	482c      	ldr	r0, [pc, #176]	; (10009fec <ble_connected_state_handler+0x1f4>)
10009f3a:	4b2d      	ldr	r3, [pc, #180]	; (10009ff0 <ble_connected_state_handler+0x1f8>)
10009f3c:	4798      	blx	r3
10009f3e:	2800      	cmp	r0, #0
10009f40:	d107      	bne.n	10009f52 <ble_connected_state_handler+0x15a>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
10009f42:	017b      	lsls	r3, r7, #5
10009f44:	1bdb      	subs	r3, r3, r7
10009f46:	009b      	lsls	r3, r3, #2
10009f48:	4a2f      	ldr	r2, [pc, #188]	; (1000a008 <ble_connected_state_handler+0x210>)
10009f4a:	18d3      	adds	r3, r2, r3
10009f4c:	2205      	movs	r2, #5
10009f4e:	749a      	strb	r2, [r3, #18]
10009f50:	e006      	b.n	10009f60 <ble_connected_state_handler+0x168>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009f52:	017b      	lsls	r3, r7, #5
10009f54:	1bdb      	subs	r3, r3, r7
10009f56:	009b      	lsls	r3, r3, #2
10009f58:	4a2b      	ldr	r2, [pc, #172]	; (1000a008 <ble_connected_state_handler+0x210>)
10009f5a:	18d3      	adds	r3, r2, r3
10009f5c:	220a      	movs	r2, #10
10009f5e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009f60:	2207      	movs	r2, #7
10009f62:	2100      	movs	r1, #0
10009f64:	4821      	ldr	r0, [pc, #132]	; (10009fec <ble_connected_state_handler+0x1f4>)
10009f66:	4b23      	ldr	r3, [pc, #140]	; (10009ff4 <ble_connected_state_handler+0x1fc>)
10009f68:	4798      	blx	r3
10009f6a:	e02a      	b.n	10009fc2 <ble_connected_state_handler+0x1ca>
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
10009f6c:	4818      	ldr	r0, [pc, #96]	; (10009fd0 <ble_connected_state_handler+0x1d8>)
10009f6e:	4b19      	ldr	r3, [pc, #100]	; (10009fd4 <ble_connected_state_handler+0x1dc>)
10009f70:	4798      	blx	r3
10009f72:	4b26      	ldr	r3, [pc, #152]	; (1000a00c <ble_connected_state_handler+0x214>)
10009f74:	7819      	ldrb	r1, [r3, #0]
10009f76:	b2c9      	uxtb	r1, r1
10009f78:	4825      	ldr	r0, [pc, #148]	; (1000a010 <ble_connected_state_handler+0x218>)
10009f7a:	4b18      	ldr	r3, [pc, #96]	; (10009fdc <ble_connected_state_handler+0x1e4>)
10009f7c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
10009f7e:	8928      	ldrh	r0, [r5, #8]
10009f80:	2113      	movs	r1, #19
10009f82:	4b24      	ldr	r3, [pc, #144]	; (1000a014 <ble_connected_state_handler+0x21c>)
10009f84:	4798      	blx	r3
10009f86:	e01c      	b.n	10009fc2 <ble_connected_state_handler+0x1ca>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
10009f88:	4811      	ldr	r0, [pc, #68]	; (10009fd0 <ble_connected_state_handler+0x1d8>)
10009f8a:	4b12      	ldr	r3, [pc, #72]	; (10009fd4 <ble_connected_state_handler+0x1dc>)
10009f8c:	4798      	blx	r3
10009f8e:	7aa9      	ldrb	r1, [r5, #10]
10009f90:	4821      	ldr	r0, [pc, #132]	; (1000a018 <ble_connected_state_handler+0x220>)
10009f92:	4b12      	ldr	r3, [pc, #72]	; (10009fdc <ble_connected_state_handler+0x1e4>)
10009f94:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
10009f96:	2600      	movs	r6, #0
10009f98:	e013      	b.n	10009fc2 <ble_connected_state_handler+0x1ca>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
10009f9a:	4b1c      	ldr	r3, [pc, #112]	; (1000a00c <ble_connected_state_handler+0x214>)
10009f9c:	781b      	ldrb	r3, [r3, #0]
10009f9e:	b2db      	uxtb	r3, r3
10009fa0:	2b04      	cmp	r3, #4
10009fa2:	d8e3      	bhi.n	10009f6c <ble_connected_state_handler+0x174>
10009fa4:	4b18      	ldr	r3, [pc, #96]	; (1000a008 <ble_connected_state_handler+0x210>)
10009fa6:	4699      	mov	r9, r3
10009fa8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009faa:	4b11      	ldr	r3, [pc, #68]	; (10009ff0 <ble_connected_state_handler+0x1f8>)
10009fac:	469b      	mov	fp, r3
10009fae:	e783      	b.n	10009eb8 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009fb0:	235e      	movs	r3, #94	; 0x5e
10009fb2:	4a15      	ldr	r2, [pc, #84]	; (1000a008 <ble_connected_state_handler+0x210>)
10009fb4:	5cd3      	ldrb	r3, [r2, r3]
10009fb6:	2b00      	cmp	r3, #0
10009fb8:	d09c      	beq.n	10009ef4 <ble_connected_state_handler+0xfc>
10009fba:	4a18      	ldr	r2, [pc, #96]	; (1000a01c <ble_connected_state_handler+0x224>)
10009fbc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fbe:	2701      	movs	r7, #1
10009fc0:	e793      	b.n	10009eea <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
10009fc2:	0030      	movs	r0, r6
10009fc4:	b01a      	add	sp, #104	; 0x68
10009fc6:	bc1c      	pop	{r2, r3, r4}
10009fc8:	4690      	mov	r8, r2
10009fca:	4699      	mov	r9, r3
10009fcc:	46a3      	mov	fp, r4
10009fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009fd0:	1001141c 	.word	0x1001141c
10009fd4:	10010079 	.word	0x10010079
10009fd8:	10011c90 	.word	0x10011c90
10009fdc:	1000ff59 	.word	0x1000ff59
10009fe0:	10011cd4 	.word	0x10011cd4
10009fe4:	10013058 	.word	0x10013058
10009fe8:	1000ff37 	.word	0x1000ff37
10009fec:	10012adc 	.word	0x10012adc
10009ff0:	1000ff19 	.word	0x1000ff19
10009ff4:	1000ff49 	.word	0x1000ff49
10009ff8:	10012df2 	.word	0x10012df2
10009ffc:	1000ce39 	.word	0x1000ce39
1000a000:	10011cec 	.word	0x10011cec
1000a004:	10011d10 	.word	0x10011d10
1000a008:	10012dac 	.word	0x10012dac
1000a00c:	10013018 	.word	0x10013018
1000a010:	10011d34 	.word	0x10011d34
1000a014:	1000ce0d 	.word	0x1000ce0d
1000a018:	10011d70 	.word	0x10011d70
1000a01c:	10012e86 	.word	0x10012e86

1000a020 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a020:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a022:	465f      	mov	r7, fp
1000a024:	4656      	mov	r6, sl
1000a026:	464d      	mov	r5, r9
1000a028:	4644      	mov	r4, r8
1000a02a:	b4f0      	push	{r4, r5, r6, r7}
1000a02c:	b083      	sub	sp, #12
1000a02e:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a030:	8841      	ldrh	r1, [r0, #2]
1000a032:	4b59      	ldr	r3, [pc, #356]	; (1000a198 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a034:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a036:	891a      	ldrh	r2, [r3, #8]
1000a038:	428a      	cmp	r2, r1
1000a03a:	d105      	bne.n	1000a048 <ble_pair_done_handler+0x28>
1000a03c:	001a      	movs	r2, r3
1000a03e:	325e      	adds	r2, #94	; 0x5e
1000a040:	7812      	ldrb	r2, [r2, #0]
1000a042:	2a03      	cmp	r2, #3
1000a044:	d100      	bne.n	1000a048 <ble_pair_done_handler+0x28>
1000a046:	e09a      	b.n	1000a17e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a048:	3401      	adds	r4, #1
1000a04a:	b2e4      	uxtb	r4, r4
1000a04c:	337c      	adds	r3, #124	; 0x7c
1000a04e:	2c05      	cmp	r4, #5
1000a050:	d1f1      	bne.n	1000a036 <ble_pair_done_handler+0x16>
1000a052:	e057      	b.n	1000a104 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a054:	7821      	ldrb	r1, [r4, #0]
1000a056:	0030      	movs	r0, r6
1000a058:	47b8      	blx	r7
1000a05a:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000a05c:	454c      	cmp	r4, r9
1000a05e:	d1f9      	bne.n	1000a054 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000a060:	484e      	ldr	r0, [pc, #312]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a062:	4b4f      	ldr	r3, [pc, #316]	; (1000a1a0 <ble_pair_done_handler+0x180>)
1000a064:	4798      	blx	r3
1000a066:	484f      	ldr	r0, [pc, #316]	; (1000a1a4 <ble_pair_done_handler+0x184>)
1000a068:	4b4f      	ldr	r3, [pc, #316]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a06a:	4798      	blx	r3
1000a06c:	002e      	movs	r6, r5
1000a06e:	3622      	adds	r6, #34	; 0x22
1000a070:	002c      	movs	r4, r5
1000a072:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000a074:	4f4c      	ldr	r7, [pc, #304]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a076:	7831      	ldrb	r1, [r6, #0]
1000a078:	484c      	ldr	r0, [pc, #304]	; (1000a1ac <ble_pair_done_handler+0x18c>)
1000a07a:	47b8      	blx	r7
1000a07c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000a07e:	42a6      	cmp	r6, r4
1000a080:	d1f9      	bne.n	1000a076 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000a082:	4846      	ldr	r0, [pc, #280]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a084:	4b46      	ldr	r3, [pc, #280]	; (1000a1a0 <ble_pair_done_handler+0x180>)
1000a086:	4798      	blx	r3
1000a088:	4849      	ldr	r0, [pc, #292]	; (1000a1b0 <ble_pair_done_handler+0x190>)
1000a08a:	4b47      	ldr	r3, [pc, #284]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a08c:	4798      	blx	r3
1000a08e:	3542      	adds	r5, #66	; 0x42
1000a090:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000a092:	4e46      	ldr	r6, [pc, #280]	; (1000a1ac <ble_pair_done_handler+0x18c>)
1000a094:	4d44      	ldr	r5, [pc, #272]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a096:	7821      	ldrb	r1, [r4, #0]
1000a098:	0030      	movs	r0, r6
1000a09a:	47a8      	blx	r5
1000a09c:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000a09e:	42bc      	cmp	r4, r7
1000a0a0:	d1f9      	bne.n	1000a096 <ble_pair_done_handler+0x76>
1000a0a2:	e071      	b.n	1000a188 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a0a4:	0163      	lsls	r3, r4, #5
1000a0a6:	1b1c      	subs	r4, r3, r4
1000a0a8:	00a4      	lsls	r4, r4, #2
1000a0aa:	4b3b      	ldr	r3, [pc, #236]	; (1000a198 <ble_pair_done_handler+0x178>)
1000a0ac:	191c      	adds	r4, r3, r4
1000a0ae:	345e      	adds	r4, #94	; 0x5e
1000a0b0:	7823      	ldrb	r3, [r4, #0]
1000a0b2:	2b01      	cmp	r3, #1
1000a0b4:	d915      	bls.n	1000a0e2 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000a0b6:	4839      	ldr	r0, [pc, #228]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a0b8:	4b39      	ldr	r3, [pc, #228]	; (1000a1a0 <ble_pair_done_handler+0x180>)
1000a0ba:	4798      	blx	r3
1000a0bc:	483d      	ldr	r0, [pc, #244]	; (1000a1b4 <ble_pair_done_handler+0x194>)
1000a0be:	4b3a      	ldr	r3, [pc, #232]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a0c0:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a0c2:	8868      	ldrh	r0, [r5, #2]
1000a0c4:	2113      	movs	r1, #19
1000a0c6:	4b3c      	ldr	r3, [pc, #240]	; (1000a1b8 <ble_pair_done_handler+0x198>)
1000a0c8:	4798      	blx	r3
1000a0ca:	9001      	str	r0, [sp, #4]
1000a0cc:	2800      	cmp	r0, #0
1000a0ce:	d05b      	beq.n	1000a188 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000a0d0:	4832      	ldr	r0, [pc, #200]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a0d2:	4b33      	ldr	r3, [pc, #204]	; (1000a1a0 <ble_pair_done_handler+0x180>)
1000a0d4:	4798      	blx	r3
1000a0d6:	4839      	ldr	r0, [pc, #228]	; (1000a1bc <ble_pair_done_handler+0x19c>)
1000a0d8:	4b33      	ldr	r3, [pc, #204]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a0da:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a0dc:	23e2      	movs	r3, #226	; 0xe2
1000a0de:	9301      	str	r3, [sp, #4]
1000a0e0:	e052      	b.n	1000a188 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a0e2:	2300      	movs	r3, #0
1000a0e4:	9301      	str	r3, [sp, #4]
1000a0e6:	e04f      	b.n	1000a188 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a0e8:	4e2c      	ldr	r6, [pc, #176]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a0ea:	0030      	movs	r0, r6
1000a0ec:	4d2c      	ldr	r5, [pc, #176]	; (1000a1a0 <ble_pair_done_handler+0x180>)
1000a0ee:	47a8      	blx	r5
1000a0f0:	4833      	ldr	r0, [pc, #204]	; (1000a1c0 <ble_pair_done_handler+0x1a0>)
1000a0f2:	4c2d      	ldr	r4, [pc, #180]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a0f4:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a0f6:	0030      	movs	r0, r6
1000a0f8:	47a8      	blx	r5
1000a0fa:	4832      	ldr	r0, [pc, #200]	; (1000a1c4 <ble_pair_done_handler+0x1a4>)
1000a0fc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a0fe:	23e2      	movs	r3, #226	; 0xe2
1000a100:	9301      	str	r3, [sp, #4]
1000a102:	e041      	b.n	1000a188 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a104:	792b      	ldrb	r3, [r5, #4]
1000a106:	2b00      	cmp	r3, #0
1000a108:	d1cc      	bne.n	1000a0a4 <ble_pair_done_handler+0x84>
1000a10a:	e7ed      	b.n	1000a0e8 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a10c:	4823      	ldr	r0, [pc, #140]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a10e:	4b24      	ldr	r3, [pc, #144]	; (1000a1a0 <ble_pair_done_handler+0x180>)
1000a110:	469b      	mov	fp, r3
1000a112:	4798      	blx	r3
1000a114:	482a      	ldr	r0, [pc, #168]	; (1000a1c0 <ble_pair_done_handler+0x1a0>)
1000a116:	4b24      	ldr	r3, [pc, #144]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a118:	469a      	mov	sl, r3
1000a11a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a11c:	782a      	ldrb	r2, [r5, #0]
1000a11e:	4b1e      	ldr	r3, [pc, #120]	; (1000a198 <ble_pair_done_handler+0x178>)
1000a120:	4698      	mov	r8, r3
1000a122:	0167      	lsls	r7, r4, #5
1000a124:	1b3b      	subs	r3, r7, r4
1000a126:	009b      	lsls	r3, r3, #2
1000a128:	4443      	add	r3, r8
1000a12a:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a12c:	792a      	ldrb	r2, [r5, #4]
1000a12e:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a130:	335e      	adds	r3, #94	; 0x5e
1000a132:	2205      	movs	r2, #5
1000a134:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a136:	1b38      	subs	r0, r7, r4
1000a138:	0080      	lsls	r0, r0, #2
1000a13a:	4440      	add	r0, r8
1000a13c:	3036      	adds	r0, #54	; 0x36
1000a13e:	320b      	adds	r2, #11
1000a140:	0029      	movs	r1, r5
1000a142:	3122      	adds	r1, #34	; 0x22
1000a144:	4b20      	ldr	r3, [pc, #128]	; (1000a1c8 <ble_pair_done_handler+0x1a8>)
1000a146:	4699      	mov	r9, r3
1000a148:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a14a:	1b38      	subs	r0, r7, r4
1000a14c:	0080      	lsls	r0, r0, #2
1000a14e:	4440      	add	r0, r8
1000a150:	3046      	adds	r0, #70	; 0x46
1000a152:	2217      	movs	r2, #23
1000a154:	0029      	movs	r1, r5
1000a156:	3132      	adds	r1, #50	; 0x32
1000a158:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a15a:	1b38      	subs	r0, r7, r4
1000a15c:	0080      	lsls	r0, r0, #2
1000a15e:	4440      	add	r0, r8
1000a160:	301a      	adds	r0, #26
1000a162:	1dac      	adds	r4, r5, #6
1000a164:	221c      	movs	r2, #28
1000a166:	0021      	movs	r1, r4
1000a168:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000a16a:	480c      	ldr	r0, [pc, #48]	; (1000a19c <ble_pair_done_handler+0x17c>)
1000a16c:	47d8      	blx	fp
1000a16e:	4817      	ldr	r0, [pc, #92]	; (1000a1cc <ble_pair_done_handler+0x1ac>)
1000a170:	47d0      	blx	sl
1000a172:	2316      	movs	r3, #22
1000a174:	4699      	mov	r9, r3
1000a176:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a178:	4e0c      	ldr	r6, [pc, #48]	; (1000a1ac <ble_pair_done_handler+0x18c>)
1000a17a:	4f0b      	ldr	r7, [pc, #44]	; (1000a1a8 <ble_pair_done_handler+0x188>)
1000a17c:	e76a      	b.n	1000a054 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a17e:	792b      	ldrb	r3, [r5, #4]
1000a180:	9301      	str	r3, [sp, #4]
1000a182:	2b00      	cmp	r3, #0
1000a184:	d0c2      	beq.n	1000a10c <ble_pair_done_handler+0xec>
1000a186:	e78d      	b.n	1000a0a4 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a188:	9801      	ldr	r0, [sp, #4]
1000a18a:	b003      	add	sp, #12
1000a18c:	bc3c      	pop	{r2, r3, r4, r5}
1000a18e:	4690      	mov	r8, r2
1000a190:	4699      	mov	r9, r3
1000a192:	46a2      	mov	sl, r4
1000a194:	46ab      	mov	fp, r5
1000a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a198:	10012dac 	.word	0x10012dac
1000a19c:	1001141c 	.word	0x1001141c
1000a1a0:	10010079 	.word	0x10010079
1000a1a4:	10011da4 	.word	0x10011da4
1000a1a8:	1000ff59 	.word	0x1000ff59
1000a1ac:	10011d98 	.word	0x10011d98
1000a1b0:	10011dac 	.word	0x10011dac
1000a1b4:	10011db4 	.word	0x10011db4
1000a1b8:	1000ce0d 	.word	0x1000ce0d
1000a1bc:	10011dd4 	.word	0x10011dd4
1000a1c0:	10011df0 	.word	0x10011df0
1000a1c4:	10011e1c 	.word	0x10011e1c
1000a1c8:	1000ff37 	.word	0x1000ff37
1000a1cc:	10011e4c 	.word	0x10011e4c

1000a1d0 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a1d0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a1d2:	8800      	ldrh	r0, [r0, #0]
1000a1d4:	2378      	movs	r3, #120	; 0x78
1000a1d6:	2201      	movs	r2, #1
1000a1d8:	2101      	movs	r1, #1
1000a1da:	4c02      	ldr	r4, [pc, #8]	; (1000a1e4 <ble_conn_param_update_req+0x14>)
1000a1dc:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a1de:	2000      	movs	r0, #0
1000a1e0:	bd10      	pop	{r4, pc}
1000a1e2:	46c0      	nop			; (mov r8, r8)
1000a1e4:	1000ce2d 	.word	0x1000ce2d

1000a1e8 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1ea:	4657      	mov	r7, sl
1000a1ec:	464e      	mov	r6, r9
1000a1ee:	4645      	mov	r5, r8
1000a1f0:	b4e0      	push	{r5, r6, r7}
1000a1f2:	b084      	sub	sp, #16
1000a1f4:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a1f6:	2209      	movs	r2, #9
1000a1f8:	2100      	movs	r1, #0
1000a1fa:	a801      	add	r0, sp, #4
1000a1fc:	4b6a      	ldr	r3, [pc, #424]	; (1000a3a8 <ble_slave_security_request_handler+0x1c0>)
1000a1fe:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a200:	8825      	ldrh	r5, [r4, #0]
1000a202:	496a      	ldr	r1, [pc, #424]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a204:	000a      	movs	r2, r1
1000a206:	2300      	movs	r3, #0
1000a208:	8910      	ldrh	r0, [r2, #8]
1000a20a:	42a8      	cmp	r0, r5
1000a20c:	d116      	bne.n	1000a23c <ble_slave_security_request_handler+0x54>
1000a20e:	0010      	movs	r0, r2
1000a210:	305e      	adds	r0, #94	; 0x5e
1000a212:	7800      	ldrb	r0, [r0, #0]
1000a214:	2802      	cmp	r0, #2
1000a216:	d111      	bne.n	1000a23c <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a218:	4864      	ldr	r0, [pc, #400]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a21a:	015a      	lsls	r2, r3, #5
1000a21c:	1ad6      	subs	r6, r2, r3
1000a21e:	00b6      	lsls	r6, r6, #2
1000a220:	1986      	adds	r6, r0, r6
1000a222:	365e      	adds	r6, #94	; 0x5e
1000a224:	2206      	movs	r2, #6
1000a226:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a228:	32f9      	adds	r2, #249	; 0xf9
1000a22a:	4013      	ands	r3, r2
1000a22c:	015a      	lsls	r2, r3, #5
1000a22e:	1ad2      	subs	r2, r2, r3
1000a230:	0092      	lsls	r2, r2, #2
1000a232:	1882      	adds	r2, r0, r2
1000a234:	7d12      	ldrb	r2, [r2, #20]
1000a236:	07d0      	lsls	r0, r2, #31
1000a238:	d405      	bmi.n	1000a246 <ble_slave_security_request_handler+0x5e>
1000a23a:	e01b      	b.n	1000a274 <ble_slave_security_request_handler+0x8c>
1000a23c:	3301      	adds	r3, #1
1000a23e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a240:	2b05      	cmp	r3, #5
1000a242:	d1e1      	bne.n	1000a208 <ble_slave_security_request_handler+0x20>
1000a244:	e01e      	b.n	1000a284 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a246:	78e0      	ldrb	r0, [r4, #3]
1000a248:	2800      	cmp	r0, #0
1000a24a:	d013      	beq.n	1000a274 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a24c:	0159      	lsls	r1, r3, #5
1000a24e:	1ac9      	subs	r1, r1, r3
1000a250:	008b      	lsls	r3, r1, #2
1000a252:	4956      	ldr	r1, [pc, #344]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a254:	18c9      	adds	r1, r1, r3
1000a256:	311a      	adds	r1, #26
1000a258:	8820      	ldrh	r0, [r4, #0]
1000a25a:	4b55      	ldr	r3, [pc, #340]	; (1000a3b0 <ble_slave_security_request_handler+0x1c8>)
1000a25c:	4798      	blx	r3
1000a25e:	2800      	cmp	r0, #0
1000a260:	d100      	bne.n	1000a264 <ble_slave_security_request_handler+0x7c>
1000a262:	e09b      	b.n	1000a39c <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a264:	4853      	ldr	r0, [pc, #332]	; (1000a3b4 <ble_slave_security_request_handler+0x1cc>)
1000a266:	4b54      	ldr	r3, [pc, #336]	; (1000a3b8 <ble_slave_security_request_handler+0x1d0>)
1000a268:	4798      	blx	r3
1000a26a:	4854      	ldr	r0, [pc, #336]	; (1000a3bc <ble_slave_security_request_handler+0x1d4>)
1000a26c:	4b54      	ldr	r3, [pc, #336]	; (1000a3c0 <ble_slave_security_request_handler+0x1d8>)
1000a26e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a270:	20e2      	movs	r0, #226	; 0xe2
1000a272:	e093      	b.n	1000a39c <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a274:	015a      	lsls	r2, r3, #5
1000a276:	1ad3      	subs	r3, r2, r3
1000a278:	009b      	lsls	r3, r3, #2
1000a27a:	4a4c      	ldr	r2, [pc, #304]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a27c:	18d3      	adds	r3, r2, r3
1000a27e:	335e      	adds	r3, #94	; 0x5e
1000a280:	2202      	movs	r2, #2
1000a282:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a284:	8825      	ldrh	r5, [r4, #0]
1000a286:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a288:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a28a:	0016      	movs	r6, r2
1000a28c:	8908      	ldrh	r0, [r1, #8]
1000a28e:	42a8      	cmp	r0, r5
1000a290:	d10d      	bne.n	1000a2ae <ble_slave_security_request_handler+0xc6>
1000a292:	0008      	movs	r0, r1
1000a294:	305e      	adds	r0, #94	; 0x5e
1000a296:	7800      	ldrb	r0, [r0, #0]
1000a298:	2802      	cmp	r0, #2
1000a29a:	d108      	bne.n	1000a2ae <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a29c:	0152      	lsls	r2, r2, #5
1000a29e:	1b92      	subs	r2, r2, r6
1000a2a0:	0096      	lsls	r6, r2, #2
1000a2a2:	4a42      	ldr	r2, [pc, #264]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a2a4:	1992      	adds	r2, r2, r6
1000a2a6:	325e      	adds	r2, #94	; 0x5e
1000a2a8:	2103      	movs	r1, #3
1000a2aa:	7011      	strb	r1, [r2, #0]
			break;
1000a2ac:	e005      	b.n	1000a2ba <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2ae:	3301      	adds	r3, #1
1000a2b0:	b2db      	uxtb	r3, r3
1000a2b2:	3201      	adds	r2, #1
1000a2b4:	317c      	adds	r1, #124	; 0x7c
1000a2b6:	2b05      	cmp	r3, #5
1000a2b8:	d1e7      	bne.n	1000a28a <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000a2ba:	aa01      	add	r2, sp, #4
1000a2bc:	78e1      	ldrb	r1, [r4, #3]
1000a2be:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a2c0:	2101      	movs	r1, #1
1000a2c2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a2c4:	3103      	adds	r1, #3
1000a2c6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a2c8:	001f      	movs	r7, r3
1000a2ca:	015a      	lsls	r2, r3, #5
1000a2cc:	1ad2      	subs	r2, r2, r3
1000a2ce:	0092      	lsls	r2, r2, #2
1000a2d0:	4936      	ldr	r1, [pc, #216]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a2d2:	5c52      	ldrb	r2, [r2, r1]
1000a2d4:	2a02      	cmp	r2, #2
1000a2d6:	d104      	bne.n	1000a2e2 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a2d8:	aa01      	add	r2, sp, #4
1000a2da:	2103      	movs	r1, #3
1000a2dc:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a2de:	71d1      	strb	r1, [r2, #7]
1000a2e0:	e003      	b.n	1000a2ea <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a2e2:	aa01      	add	r2, sp, #4
1000a2e4:	2101      	movs	r1, #1
1000a2e6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a2e8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a2ea:	aa01      	add	r2, sp, #4
1000a2ec:	2110      	movs	r1, #16
1000a2ee:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a2f0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a2f2:	017a      	lsls	r2, r7, #5
1000a2f4:	1bd2      	subs	r2, r2, r7
1000a2f6:	0092      	lsls	r2, r2, #2
1000a2f8:	492c      	ldr	r1, [pc, #176]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a2fa:	188a      	adds	r2, r1, r2
1000a2fc:	7e12      	ldrb	r2, [r2, #24]
1000a2fe:	2a40      	cmp	r2, #64	; 0x40
1000a300:	d134      	bne.n	1000a36c <ble_slave_security_request_handler+0x184>
1000a302:	015a      	lsls	r2, r3, #5
1000a304:	1ad3      	subs	r3, r2, r3
1000a306:	009b      	lsls	r3, r3, #2
1000a308:	469a      	mov	sl, r3
1000a30a:	001e      	movs	r6, r3
1000a30c:	3660      	adds	r6, #96	; 0x60
1000a30e:	1876      	adds	r6, r6, r1
1000a310:	4655      	mov	r5, sl
1000a312:	3568      	adds	r5, #104	; 0x68
1000a314:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a316:	4b2b      	ldr	r3, [pc, #172]	; (1000a3c4 <ble_slave_security_request_handler+0x1dc>)
1000a318:	4699      	mov	r9, r3
1000a31a:	230f      	movs	r3, #15
1000a31c:	4698      	mov	r8, r3
1000a31e:	47c8      	blx	r9
1000a320:	4643      	mov	r3, r8
1000a322:	4018      	ands	r0, r3
1000a324:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a326:	47c8      	blx	r9
1000a328:	4643      	mov	r3, r8
1000a32a:	4018      	ands	r0, r3
1000a32c:	74b0      	strb	r0, [r6, #18]
1000a32e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a330:	42ae      	cmp	r6, r5
1000a332:	d1f4      	bne.n	1000a31e <ble_slave_security_request_handler+0x136>
1000a334:	4656      	mov	r6, sl
1000a336:	3670      	adds	r6, #112	; 0x70
1000a338:	4a1c      	ldr	r2, [pc, #112]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a33a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a33c:	4b21      	ldr	r3, [pc, #132]	; (1000a3c4 <ble_slave_security_request_handler+0x1dc>)
1000a33e:	4699      	mov	r9, r3
1000a340:	230f      	movs	r3, #15
1000a342:	4698      	mov	r8, r3
1000a344:	47c8      	blx	r9
1000a346:	4643      	mov	r3, r8
1000a348:	4018      	ands	r0, r3
1000a34a:	7028      	strb	r0, [r5, #0]
1000a34c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a34e:	42b5      	cmp	r5, r6
1000a350:	d1f8      	bne.n	1000a344 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a352:	4b1c      	ldr	r3, [pc, #112]	; (1000a3c4 <ble_slave_security_request_handler+0x1dc>)
1000a354:	4798      	blx	r3
1000a356:	017b      	lsls	r3, r7, #5
1000a358:	1bdb      	subs	r3, r3, r7
1000a35a:	009b      	lsls	r3, r3, #2
1000a35c:	4a13      	ldr	r2, [pc, #76]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a35e:	18d3      	adds	r3, r2, r3
1000a360:	001a      	movs	r2, r3
1000a362:	3270      	adds	r2, #112	; 0x70
1000a364:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a366:	337a      	adds	r3, #122	; 0x7a
1000a368:	2210      	movs	r2, #16
1000a36a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a36c:	017a      	lsls	r2, r7, #5
1000a36e:	1bd7      	subs	r7, r2, r7
1000a370:	00bf      	lsls	r7, r7, #2
1000a372:	3760      	adds	r7, #96	; 0x60
1000a374:	4a0d      	ldr	r2, [pc, #52]	; (1000a3ac <ble_slave_security_request_handler+0x1c4>)
1000a376:	18ba      	adds	r2, r7, r2
1000a378:	8820      	ldrh	r0, [r4, #0]
1000a37a:	2300      	movs	r3, #0
1000a37c:	a901      	add	r1, sp, #4
1000a37e:	4c12      	ldr	r4, [pc, #72]	; (1000a3c8 <ble_slave_security_request_handler+0x1e0>)
1000a380:	47a0      	blx	r4
1000a382:	2800      	cmp	r0, #0
1000a384:	d00a      	beq.n	1000a39c <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000a386:	ab01      	add	r3, sp, #4
1000a388:	2200      	movs	r2, #0
1000a38a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a38c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a38e:	4809      	ldr	r0, [pc, #36]	; (1000a3b4 <ble_slave_security_request_handler+0x1cc>)
1000a390:	4b09      	ldr	r3, [pc, #36]	; (1000a3b8 <ble_slave_security_request_handler+0x1d0>)
1000a392:	4798      	blx	r3
1000a394:	480d      	ldr	r0, [pc, #52]	; (1000a3cc <ble_slave_security_request_handler+0x1e4>)
1000a396:	4b0a      	ldr	r3, [pc, #40]	; (1000a3c0 <ble_slave_security_request_handler+0x1d8>)
1000a398:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a39a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a39c:	b004      	add	sp, #16
1000a39e:	bc1c      	pop	{r2, r3, r4}
1000a3a0:	4690      	mov	r8, r2
1000a3a2:	4699      	mov	r9, r3
1000a3a4:	46a2      	mov	sl, r4
1000a3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3a8:	1000ff49 	.word	0x1000ff49
1000a3ac:	10012dac 	.word	0x10012dac
1000a3b0:	1000d345 	.word	0x1000d345
1000a3b4:	1001141c 	.word	0x1001141c
1000a3b8:	10010079 	.word	0x10010079
1000a3bc:	10011e54 	.word	0x10011e54
1000a3c0:	1000ff59 	.word	0x1000ff59
1000a3c4:	1001008d 	.word	0x1001008d
1000a3c8:	1000d199 	.word	0x1000d199
1000a3cc:	10011e6c 	.word	0x10011e6c

1000a3d0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3d2:	465f      	mov	r7, fp
1000a3d4:	4656      	mov	r6, sl
1000a3d6:	464d      	mov	r5, r9
1000a3d8:	4644      	mov	r4, r8
1000a3da:	b4f0      	push	{r4, r5, r6, r7}
1000a3dc:	b085      	sub	sp, #20
1000a3de:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a3e0:	8804      	ldrh	r4, [r0, #0]
1000a3e2:	4a54      	ldr	r2, [pc, #336]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a3e4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3e6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a3e8:	8910      	ldrh	r0, [r2, #8]
1000a3ea:	42a0      	cmp	r0, r4
1000a3ec:	d10d      	bne.n	1000a40a <ble_pair_request_handler+0x3a>
1000a3ee:	0010      	movs	r0, r2
1000a3f0:	305e      	adds	r0, #94	; 0x5e
1000a3f2:	7800      	ldrb	r0, [r0, #0]
1000a3f4:	2802      	cmp	r0, #2
1000a3f6:	d108      	bne.n	1000a40a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a3f8:	014a      	lsls	r2, r1, #5
1000a3fa:	1a52      	subs	r2, r2, r1
1000a3fc:	0095      	lsls	r5, r2, #2
1000a3fe:	4a4d      	ldr	r2, [pc, #308]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a400:	1952      	adds	r2, r2, r5
1000a402:	325e      	adds	r2, #94	; 0x5e
1000a404:	2103      	movs	r1, #3
1000a406:	7011      	strb	r1, [r2, #0]
			break;
1000a408:	e005      	b.n	1000a416 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a40a:	3301      	adds	r3, #1
1000a40c:	b2db      	uxtb	r3, r3
1000a40e:	3101      	adds	r1, #1
1000a410:	327c      	adds	r2, #124	; 0x7c
1000a412:	2b05      	cmp	r3, #5
1000a414:	d1e8      	bne.n	1000a3e8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a416:	aa01      	add	r2, sp, #4
1000a418:	2100      	movs	r1, #0
1000a41a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a41c:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a41e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a420:	2003      	movs	r0, #3
1000a422:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a424:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a426:	001e      	movs	r6, r3
1000a428:	015a      	lsls	r2, r3, #5
1000a42a:	1ad2      	subs	r2, r2, r3
1000a42c:	0092      	lsls	r2, r2, #2
1000a42e:	4941      	ldr	r1, [pc, #260]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a430:	5c52      	ldrb	r2, [r2, r1]
1000a432:	2a02      	cmp	r2, #2
1000a434:	d104      	bne.n	1000a440 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a436:	aa01      	add	r2, sp, #4
1000a438:	2103      	movs	r1, #3
1000a43a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a43c:	71d1      	strb	r1, [r2, #7]
1000a43e:	e003      	b.n	1000a448 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a440:	aa01      	add	r2, sp, #4
1000a442:	2101      	movs	r1, #1
1000a444:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a446:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a448:	aa01      	add	r2, sp, #4
1000a44a:	2110      	movs	r1, #16
1000a44c:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a44e:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a450:	0172      	lsls	r2, r6, #5
1000a452:	1b92      	subs	r2, r2, r6
1000a454:	0092      	lsls	r2, r2, #2
1000a456:	4937      	ldr	r1, [pc, #220]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a458:	188a      	adds	r2, r1, r2
1000a45a:	7e12      	ldrb	r2, [r2, #24]
1000a45c:	2a40      	cmp	r2, #64	; 0x40
1000a45e:	d142      	bne.n	1000a4e6 <ble_pair_request_handler+0x116>
1000a460:	015f      	lsls	r7, r3, #5
1000a462:	1afb      	subs	r3, r7, r3
1000a464:	009b      	lsls	r3, r3, #2
1000a466:	469b      	mov	fp, r3
1000a468:	001c      	movs	r4, r3
1000a46a:	3460      	adds	r4, #96	; 0x60
1000a46c:	1864      	adds	r4, r4, r1
1000a46e:	465d      	mov	r5, fp
1000a470:	3568      	adds	r5, #104	; 0x68
1000a472:	186d      	adds	r5, r5, r1
1000a474:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a476:	4b30      	ldr	r3, [pc, #192]	; (1000a538 <ble_pair_request_handler+0x168>)
1000a478:	469a      	mov	sl, r3
1000a47a:	230f      	movs	r3, #15
1000a47c:	4699      	mov	r9, r3
1000a47e:	47d0      	blx	sl
1000a480:	464b      	mov	r3, r9
1000a482:	4018      	ands	r0, r3
1000a484:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a486:	47d0      	blx	sl
1000a488:	464b      	mov	r3, r9
1000a48a:	4018      	ands	r0, r3
1000a48c:	74b8      	strb	r0, [r7, #18]
1000a48e:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a490:	42af      	cmp	r7, r5
1000a492:	d1f4      	bne.n	1000a47e <ble_pair_request_handler+0xae>
1000a494:	465b      	mov	r3, fp
1000a496:	3370      	adds	r3, #112	; 0x70
1000a498:	4f26      	ldr	r7, [pc, #152]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a49a:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a49c:	4b26      	ldr	r3, [pc, #152]	; (1000a538 <ble_pair_request_handler+0x168>)
1000a49e:	469a      	mov	sl, r3
1000a4a0:	230f      	movs	r3, #15
1000a4a2:	4699      	mov	r9, r3
1000a4a4:	47d0      	blx	sl
1000a4a6:	464b      	mov	r3, r9
1000a4a8:	4018      	ands	r0, r3
1000a4aa:	7028      	strb	r0, [r5, #0]
1000a4ac:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a4ae:	42bd      	cmp	r5, r7
1000a4b0:	d1f8      	bne.n	1000a4a4 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000a4b2:	4822      	ldr	r0, [pc, #136]	; (1000a53c <ble_pair_request_handler+0x16c>)
1000a4b4:	4b22      	ldr	r3, [pc, #136]	; (1000a540 <ble_pair_request_handler+0x170>)
1000a4b6:	4798      	blx	r3
1000a4b8:	4822      	ldr	r0, [pc, #136]	; (1000a544 <ble_pair_request_handler+0x174>)
1000a4ba:	4b23      	ldr	r3, [pc, #140]	; (1000a548 <ble_pair_request_handler+0x178>)
1000a4bc:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000a4be:	4d22      	ldr	r5, [pc, #136]	; (1000a548 <ble_pair_request_handler+0x178>)
1000a4c0:	7821      	ldrb	r1, [r4, #0]
1000a4c2:	4822      	ldr	r0, [pc, #136]	; (1000a54c <ble_pair_request_handler+0x17c>)
1000a4c4:	47a8      	blx	r5
1000a4c6:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000a4c8:	42bc      	cmp	r4, r7
1000a4ca:	d1f9      	bne.n	1000a4c0 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a4cc:	4b1a      	ldr	r3, [pc, #104]	; (1000a538 <ble_pair_request_handler+0x168>)
1000a4ce:	4798      	blx	r3
1000a4d0:	0173      	lsls	r3, r6, #5
1000a4d2:	1b9b      	subs	r3, r3, r6
1000a4d4:	009b      	lsls	r3, r3, #2
1000a4d6:	4a17      	ldr	r2, [pc, #92]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a4d8:	18d3      	adds	r3, r2, r3
1000a4da:	001a      	movs	r2, r3
1000a4dc:	3270      	adds	r2, #112	; 0x70
1000a4de:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a4e0:	337a      	adds	r3, #122	; 0x7a
1000a4e2:	2210      	movs	r2, #16
1000a4e4:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000a4e6:	4815      	ldr	r0, [pc, #84]	; (1000a53c <ble_pair_request_handler+0x16c>)
1000a4e8:	4b15      	ldr	r3, [pc, #84]	; (1000a540 <ble_pair_request_handler+0x170>)
1000a4ea:	4798      	blx	r3
1000a4ec:	4818      	ldr	r0, [pc, #96]	; (1000a550 <ble_pair_request_handler+0x180>)
1000a4ee:	4b16      	ldr	r3, [pc, #88]	; (1000a548 <ble_pair_request_handler+0x178>)
1000a4f0:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a4f2:	0173      	lsls	r3, r6, #5
1000a4f4:	1b9b      	subs	r3, r3, r6
1000a4f6:	009b      	lsls	r3, r3, #2
1000a4f8:	3360      	adds	r3, #96	; 0x60
1000a4fa:	4a0e      	ldr	r2, [pc, #56]	; (1000a534 <ble_pair_request_handler+0x164>)
1000a4fc:	189a      	adds	r2, r3, r2
1000a4fe:	4643      	mov	r3, r8
1000a500:	8818      	ldrh	r0, [r3, #0]
1000a502:	2300      	movs	r3, #0
1000a504:	a901      	add	r1, sp, #4
1000a506:	4c13      	ldr	r4, [pc, #76]	; (1000a554 <ble_pair_request_handler+0x184>)
1000a508:	47a0      	blx	r4
1000a50a:	2800      	cmp	r0, #0
1000a50c:	d00a      	beq.n	1000a524 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000a50e:	ab01      	add	r3, sp, #4
1000a510:	2200      	movs	r2, #0
1000a512:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a514:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a516:	4809      	ldr	r0, [pc, #36]	; (1000a53c <ble_pair_request_handler+0x16c>)
1000a518:	4b09      	ldr	r3, [pc, #36]	; (1000a540 <ble_pair_request_handler+0x170>)
1000a51a:	4798      	blx	r3
1000a51c:	480e      	ldr	r0, [pc, #56]	; (1000a558 <ble_pair_request_handler+0x188>)
1000a51e:	4b0a      	ldr	r3, [pc, #40]	; (1000a548 <ble_pair_request_handler+0x178>)
1000a520:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a522:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a524:	b005      	add	sp, #20
1000a526:	bc3c      	pop	{r2, r3, r4, r5}
1000a528:	4690      	mov	r8, r2
1000a52a:	4699      	mov	r9, r3
1000a52c:	46a2      	mov	sl, r4
1000a52e:	46ab      	mov	fp, r5
1000a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a532:	46c0      	nop			; (mov r8, r8)
1000a534:	10012dac 	.word	0x10012dac
1000a538:	1001008d 	.word	0x1001008d
1000a53c:	1001141c 	.word	0x1001141c
1000a540:	10010079 	.word	0x10010079
1000a544:	10011e98 	.word	0x10011e98
1000a548:	1000ff59 	.word	0x1000ff59
1000a54c:	10011ea8 	.word	0x10011ea8
1000a550:	10011eb0 	.word	0x10011eb0
1000a554:	1000d199 	.word	0x1000d199
1000a558:	10011ecc 	.word	0x10011ecc

1000a55c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a55e:	b085      	sub	sp, #20
1000a560:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a562:	2206      	movs	r2, #6
1000a564:	493d      	ldr	r1, [pc, #244]	; (1000a65c <ble_pair_key_request_handler+0x100>)
1000a566:	a802      	add	r0, sp, #8
1000a568:	4e3d      	ldr	r6, [pc, #244]	; (1000a660 <ble_pair_key_request_handler+0x104>)
1000a56a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a56c:	ac01      	add	r4, sp, #4
1000a56e:	2204      	movs	r2, #4
1000a570:	0029      	movs	r1, r5
1000a572:	0020      	movs	r0, r4
1000a574:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a576:	78e3      	ldrb	r3, [r4, #3]
1000a578:	2b00      	cmp	r3, #0
1000a57a:	d162      	bne.n	1000a642 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a57c:	4839      	ldr	r0, [pc, #228]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a57e:	4b3a      	ldr	r3, [pc, #232]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a580:	4798      	blx	r3
1000a582:	483a      	ldr	r0, [pc, #232]	; (1000a66c <ble_pair_key_request_handler+0x110>)
1000a584:	4b3a      	ldr	r3, [pc, #232]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a586:	4798      	blx	r3
1000a588:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a58a:	4c3a      	ldr	r4, [pc, #232]	; (1000a674 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a58c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a58e:	201e      	movs	r0, #30
1000a590:	47a0      	blx	r4
1000a592:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a594:	2b00      	cmp	r3, #0
1000a596:	d11a      	bne.n	1000a5ce <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a598:	4f32      	ldr	r7, [pc, #200]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a59a:	0038      	movs	r0, r7
1000a59c:	4e32      	ldr	r6, [pc, #200]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a59e:	47b0      	blx	r6
1000a5a0:	4835      	ldr	r0, [pc, #212]	; (1000a678 <ble_pair_key_request_handler+0x11c>)
1000a5a2:	4c33      	ldr	r4, [pc, #204]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a5a4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a5a6:	0038      	movs	r0, r7
1000a5a8:	47b0      	blx	r6
1000a5aa:	4834      	ldr	r0, [pc, #208]	; (1000a67c <ble_pair_key_request_handler+0x120>)
1000a5ac:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a5ae:	8828      	ldrh	r0, [r5, #0]
1000a5b0:	2113      	movs	r1, #19
1000a5b2:	4b33      	ldr	r3, [pc, #204]	; (1000a680 <ble_pair_key_request_handler+0x124>)
1000a5b4:	4798      	blx	r3
1000a5b6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a5b8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a5ba:	2b00      	cmp	r3, #0
1000a5bc:	d04c      	beq.n	1000a658 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a5be:	4829      	ldr	r0, [pc, #164]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a5c0:	4b29      	ldr	r3, [pc, #164]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a5c2:	4798      	blx	r3
1000a5c4:	482f      	ldr	r0, [pc, #188]	; (1000a684 <ble_pair_key_request_handler+0x128>)
1000a5c6:	4b2a      	ldr	r3, [pc, #168]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a5c8:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a5ca:	20e2      	movs	r0, #226	; 0xe2
1000a5cc:	e044      	b.n	1000a658 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a5ce:	001a      	movs	r2, r3
1000a5d0:	3a30      	subs	r2, #48	; 0x30
1000a5d2:	2a09      	cmp	r2, #9
1000a5d4:	d8db      	bhi.n	1000a58e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a5d6:	aa02      	add	r2, sp, #8
1000a5d8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a5da:	4038      	ands	r0, r7
1000a5dc:	4b2a      	ldr	r3, [pc, #168]	; (1000a688 <ble_pair_key_request_handler+0x12c>)
1000a5de:	4798      	blx	r3
1000a5e0:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a5e2:	2e06      	cmp	r6, #6
1000a5e4:	d026      	beq.n	1000a634 <ble_pair_key_request_handler+0xd8>
1000a5e6:	e7d2      	b.n	1000a58e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a5e8:	481e      	ldr	r0, [pc, #120]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a5ea:	4b1f      	ldr	r3, [pc, #124]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a5ec:	4798      	blx	r3
1000a5ee:	4827      	ldr	r0, [pc, #156]	; (1000a68c <ble_pair_key_request_handler+0x130>)
1000a5f0:	4b1f      	ldr	r3, [pc, #124]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a5f2:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a5f4:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a5f6:	4e24      	ldr	r6, [pc, #144]	; (1000a688 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a5f8:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a5fa:	5ce0      	ldrb	r0, [r4, r3]
1000a5fc:	47b0      	blx	r6
1000a5fe:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a600:	2c06      	cmp	r4, #6
1000a602:	d1f9      	bne.n	1000a5f8 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a604:	ab01      	add	r3, sp, #4
1000a606:	7899      	ldrb	r1, [r3, #2]
1000a608:	8828      	ldrh	r0, [r5, #0]
1000a60a:	aa02      	add	r2, sp, #8
1000a60c:	4b20      	ldr	r3, [pc, #128]	; (1000a690 <ble_pair_key_request_handler+0x134>)
1000a60e:	4798      	blx	r3
1000a610:	2800      	cmp	r0, #0
1000a612:	d021      	beq.n	1000a658 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a614:	4813      	ldr	r0, [pc, #76]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a616:	4b14      	ldr	r3, [pc, #80]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a618:	4798      	blx	r3
1000a61a:	481e      	ldr	r0, [pc, #120]	; (1000a694 <ble_pair_key_request_handler+0x138>)
1000a61c:	4b14      	ldr	r3, [pc, #80]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a61e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a620:	2000      	movs	r0, #0
1000a622:	e019      	b.n	1000a658 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a624:	480f      	ldr	r0, [pc, #60]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a626:	4b10      	ldr	r3, [pc, #64]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a628:	4798      	blx	r3
1000a62a:	481b      	ldr	r0, [pc, #108]	; (1000a698 <ble_pair_key_request_handler+0x13c>)
1000a62c:	4b10      	ldr	r3, [pc, #64]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a62e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a630:	2000      	movs	r0, #0
1000a632:	e011      	b.n	1000a658 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a634:	480b      	ldr	r0, [pc, #44]	; (1000a664 <ble_pair_key_request_handler+0x108>)
1000a636:	4b0c      	ldr	r3, [pc, #48]	; (1000a668 <ble_pair_key_request_handler+0x10c>)
1000a638:	4798      	blx	r3
1000a63a:	4818      	ldr	r0, [pc, #96]	; (1000a69c <ble_pair_key_request_handler+0x140>)
1000a63c:	4b0c      	ldr	r3, [pc, #48]	; (1000a670 <ble_pair_key_request_handler+0x114>)
1000a63e:	4798      	blx	r3
1000a640:	e7d8      	b.n	1000a5f4 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a642:	ab01      	add	r3, sp, #4
1000a644:	885a      	ldrh	r2, [r3, #2]
1000a646:	2380      	movs	r3, #128	; 0x80
1000a648:	005b      	lsls	r3, r3, #1
1000a64a:	429a      	cmp	r2, r3
1000a64c:	d0cc      	beq.n	1000a5e8 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a64e:	ab01      	add	r3, sp, #4
1000a650:	789b      	ldrb	r3, [r3, #2]
1000a652:	2b01      	cmp	r3, #1
1000a654:	d0e6      	beq.n	1000a624 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a656:	2000      	movs	r0, #0
}
1000a658:	b005      	add	sp, #20
1000a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a65c:	10011970 	.word	0x10011970
1000a660:	1000ff37 	.word	0x1000ff37
1000a664:	1001141c 	.word	0x1001141c
1000a668:	10010079 	.word	0x10010079
1000a66c:	10011ef4 	.word	0x10011ef4
1000a670:	1000ff59 	.word	0x1000ff59
1000a674:	1000ae29 	.word	0x1000ae29
1000a678:	10011f1c 	.word	0x10011f1c
1000a67c:	10011f28 	.word	0x10011f28
1000a680:	1000ce0d 	.word	0x1000ce0d
1000a684:	10011dd4 	.word	0x10011dd4
1000a688:	1000ff8d 	.word	0x1000ff8d
1000a68c:	10011f3c 	.word	0x10011f3c
1000a690:	1000d2c9 	.word	0x1000d2c9
1000a694:	10011f74 	.word	0x10011f74
1000a698:	10011f8c 	.word	0x10011f8c
1000a69c:	10011fa8 	.word	0x10011fa8

1000a6a0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6a2:	465f      	mov	r7, fp
1000a6a4:	4656      	mov	r6, sl
1000a6a6:	464d      	mov	r5, r9
1000a6a8:	b4e0      	push	{r5, r6, r7}
1000a6aa:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a6ac:	8800      	ldrh	r0, [r0, #0]
1000a6ae:	4b49      	ldr	r3, [pc, #292]	; (1000a7d4 <ble_encryption_request_handler+0x134>)
1000a6b0:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6b2:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a6b4:	8919      	ldrh	r1, [r3, #8]
1000a6b6:	4281      	cmp	r1, r0
1000a6b8:	d137      	bne.n	1000a72a <ble_encryption_request_handler+0x8a>
1000a6ba:	0019      	movs	r1, r3
1000a6bc:	315e      	adds	r1, #94	; 0x5e
1000a6be:	7809      	ldrb	r1, [r1, #0]
1000a6c0:	2901      	cmp	r1, #1
1000a6c2:	d932      	bls.n	1000a72a <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a6c4:	4f43      	ldr	r7, [pc, #268]	; (1000a7d4 <ble_encryption_request_handler+0x134>)
1000a6c6:	0153      	lsls	r3, r2, #5
1000a6c8:	1a9d      	subs	r5, r3, r2
1000a6ca:	00ad      	lsls	r5, r5, #2
1000a6cc:	197d      	adds	r5, r7, r5
1000a6ce:	355e      	adds	r5, #94	; 0x5e
1000a6d0:	2306      	movs	r3, #6
1000a6d2:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000a6d4:	4840      	ldr	r0, [pc, #256]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a6d6:	4b41      	ldr	r3, [pc, #260]	; (1000a7dc <ble_encryption_request_handler+0x13c>)
1000a6d8:	469a      	mov	sl, r3
1000a6da:	4798      	blx	r3
1000a6dc:	8831      	ldrh	r1, [r6, #0]
1000a6de:	4840      	ldr	r0, [pc, #256]	; (1000a7e0 <ble_encryption_request_handler+0x140>)
1000a6e0:	4b40      	ldr	r3, [pc, #256]	; (1000a7e4 <ble_encryption_request_handler+0x144>)
1000a6e2:	4699      	mov	r9, r3
1000a6e4:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000a6e6:	483c      	ldr	r0, [pc, #240]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a6e8:	47d0      	blx	sl
1000a6ea:	0163      	lsls	r3, r4, #5
1000a6ec:	1b1b      	subs	r3, r3, r4
1000a6ee:	009b      	lsls	r3, r3, #2
1000a6f0:	18ff      	adds	r7, r7, r3
1000a6f2:	2370      	movs	r3, #112	; 0x70
1000a6f4:	469b      	mov	fp, r3
1000a6f6:	44bb      	add	fp, r7
1000a6f8:	465b      	mov	r3, fp
1000a6fa:	8819      	ldrh	r1, [r3, #0]
1000a6fc:	483a      	ldr	r0, [pc, #232]	; (1000a7e8 <ble_encryption_request_handler+0x148>)
1000a6fe:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000a700:	4835      	ldr	r0, [pc, #212]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a702:	47d0      	blx	sl
1000a704:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000a706:	4839      	ldr	r0, [pc, #228]	; (1000a7ec <ble_encryption_request_handler+0x14c>)
1000a708:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000a70a:	4833      	ldr	r0, [pc, #204]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a70c:	47d0      	blx	sl
1000a70e:	8871      	ldrh	r1, [r6, #2]
1000a710:	4837      	ldr	r0, [pc, #220]	; (1000a7f0 <ble_encryption_request_handler+0x150>)
1000a712:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000a714:	4830      	ldr	r0, [pc, #192]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a716:	47d0      	blx	sl
1000a718:	0021      	movs	r1, r4
1000a71a:	4836      	ldr	r0, [pc, #216]	; (1000a7f4 <ble_encryption_request_handler+0x154>)
1000a71c:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a71e:	465b      	mov	r3, fp
1000a720:	881a      	ldrh	r2, [r3, #0]
1000a722:	8873      	ldrh	r3, [r6, #2]
1000a724:	429a      	cmp	r2, r3
1000a726:	d12a      	bne.n	1000a77e <ble_encryption_request_handler+0xde>
1000a728:	e006      	b.n	1000a738 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a72a:	3401      	adds	r4, #1
1000a72c:	b2e4      	uxtb	r4, r4
1000a72e:	3201      	adds	r2, #1
1000a730:	337c      	adds	r3, #124	; 0x7c
1000a732:	2c05      	cmp	r4, #5
1000a734:	d1be      	bne.n	1000a6b4 <ble_encryption_request_handler+0x14>
1000a736:	e022      	b.n	1000a77e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a738:	0161      	lsls	r1, r4, #5
1000a73a:	1b09      	subs	r1, r1, r4
1000a73c:	0089      	lsls	r1, r1, #2
1000a73e:	4b25      	ldr	r3, [pc, #148]	; (1000a7d4 <ble_encryption_request_handler+0x134>)
1000a740:	1859      	adds	r1, r3, r1
1000a742:	3172      	adds	r1, #114	; 0x72
1000a744:	1d30      	adds	r0, r6, #4
1000a746:	2208      	movs	r2, #8
1000a748:	4b2b      	ldr	r3, [pc, #172]	; (1000a7f8 <ble_encryption_request_handler+0x158>)
1000a74a:	4798      	blx	r3
1000a74c:	2800      	cmp	r0, #0
1000a74e:	d116      	bne.n	1000a77e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000a750:	4821      	ldr	r0, [pc, #132]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a752:	4b22      	ldr	r3, [pc, #136]	; (1000a7dc <ble_encryption_request_handler+0x13c>)
1000a754:	4798      	blx	r3
1000a756:	4829      	ldr	r0, [pc, #164]	; (1000a7fc <ble_encryption_request_handler+0x15c>)
1000a758:	4b22      	ldr	r3, [pc, #136]	; (1000a7e4 <ble_encryption_request_handler+0x144>)
1000a75a:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a75c:	0162      	lsls	r2, r4, #5
1000a75e:	1b13      	subs	r3, r2, r4
1000a760:	009b      	lsls	r3, r3, #2
1000a762:	3360      	adds	r3, #96	; 0x60
1000a764:	491b      	ldr	r1, [pc, #108]	; (1000a7d4 <ble_encryption_request_handler+0x134>)
1000a766:	185b      	adds	r3, r3, r1
1000a768:	1b12      	subs	r2, r2, r4
1000a76a:	0092      	lsls	r2, r2, #2
1000a76c:	188a      	adds	r2, r1, r2
1000a76e:	7d11      	ldrb	r1, [r2, #20]
1000a770:	8830      	ldrh	r0, [r6, #0]
1000a772:	2201      	movs	r2, #1
1000a774:	4c22      	ldr	r4, [pc, #136]	; (1000a800 <ble_encryption_request_handler+0x160>)
1000a776:	47a0      	blx	r4
1000a778:	1e04      	subs	r4, r0, #0
1000a77a:	d01e      	beq.n	1000a7ba <ble_encryption_request_handler+0x11a>
1000a77c:	e015      	b.n	1000a7aa <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a77e:	4f16      	ldr	r7, [pc, #88]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a780:	0038      	movs	r0, r7
1000a782:	4e16      	ldr	r6, [pc, #88]	; (1000a7dc <ble_encryption_request_handler+0x13c>)
1000a784:	47b0      	blx	r6
1000a786:	481f      	ldr	r0, [pc, #124]	; (1000a804 <ble_encryption_request_handler+0x164>)
1000a788:	4d16      	ldr	r5, [pc, #88]	; (1000a7e4 <ble_encryption_request_handler+0x144>)
1000a78a:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a78c:	0038      	movs	r0, r7
1000a78e:	47b0      	blx	r6
1000a790:	481d      	ldr	r0, [pc, #116]	; (1000a808 <ble_encryption_request_handler+0x168>)
1000a792:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a794:	0163      	lsls	r3, r4, #5
1000a796:	1b1c      	subs	r4, r3, r4
1000a798:	00a4      	lsls	r4, r4, #2
1000a79a:	4b0e      	ldr	r3, [pc, #56]	; (1000a7d4 <ble_encryption_request_handler+0x134>)
1000a79c:	191c      	adds	r4, r3, r4
1000a79e:	8920      	ldrh	r0, [r4, #8]
1000a7a0:	2105      	movs	r1, #5
1000a7a2:	4b1a      	ldr	r3, [pc, #104]	; (1000a80c <ble_encryption_request_handler+0x16c>)
1000a7a4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a7a6:	24e2      	movs	r4, #226	; 0xe2
1000a7a8:	e00d      	b.n	1000a7c6 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a7aa:	480b      	ldr	r0, [pc, #44]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a7ac:	4b0b      	ldr	r3, [pc, #44]	; (1000a7dc <ble_encryption_request_handler+0x13c>)
1000a7ae:	4798      	blx	r3
1000a7b0:	4817      	ldr	r0, [pc, #92]	; (1000a810 <ble_encryption_request_handler+0x170>)
1000a7b2:	4b0c      	ldr	r3, [pc, #48]	; (1000a7e4 <ble_encryption_request_handler+0x144>)
1000a7b4:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a7b6:	2400      	movs	r4, #0
1000a7b8:	e005      	b.n	1000a7c6 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000a7ba:	4807      	ldr	r0, [pc, #28]	; (1000a7d8 <ble_encryption_request_handler+0x138>)
1000a7bc:	4b07      	ldr	r3, [pc, #28]	; (1000a7dc <ble_encryption_request_handler+0x13c>)
1000a7be:	4798      	blx	r3
1000a7c0:	4814      	ldr	r0, [pc, #80]	; (1000a814 <ble_encryption_request_handler+0x174>)
1000a7c2:	4b08      	ldr	r3, [pc, #32]	; (1000a7e4 <ble_encryption_request_handler+0x144>)
1000a7c4:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000a7c6:	0020      	movs	r0, r4
1000a7c8:	bc1c      	pop	{r2, r3, r4}
1000a7ca:	4691      	mov	r9, r2
1000a7cc:	469a      	mov	sl, r3
1000a7ce:	46a3      	mov	fp, r4
1000a7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7d2:	46c0      	nop			; (mov r8, r8)
1000a7d4:	10012dac 	.word	0x10012dac
1000a7d8:	1001141c 	.word	0x1001141c
1000a7dc:	10010079 	.word	0x10010079
1000a7e0:	10011fbc 	.word	0x10011fbc
1000a7e4:	1000ff59 	.word	0x1000ff59
1000a7e8:	10011fe8 	.word	0x10011fe8
1000a7ec:	10011ffc 	.word	0x10011ffc
1000a7f0:	10012010 	.word	0x10012010
1000a7f4:	10012020 	.word	0x10012020
1000a7f8:	1000ff19 	.word	0x1000ff19
1000a7fc:	10012030 	.word	0x10012030
1000a800:	1000d3bd 	.word	0x1000d3bd
1000a804:	10012044 	.word	0x10012044
1000a808:	1001207c 	.word	0x1001207c
1000a80c:	1000ce0d 	.word	0x1000ce0d
1000a810:	100120d4 	.word	0x100120d4
1000a814:	100120f4 	.word	0x100120f4

1000a818 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a818:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a81a:	2a00      	cmp	r2, #0
1000a81c:	d047      	beq.n	1000a8ae <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a81e:	2906      	cmp	r1, #6
1000a820:	d847      	bhi.n	1000a8b2 <ble_mgr_events_callback_handler+0x9a>
1000a822:	0089      	lsls	r1, r1, #2
1000a824:	4b28      	ldr	r3, [pc, #160]	; (1000a8c8 <ble_mgr_events_callback_handler+0xb0>)
1000a826:	585b      	ldr	r3, [r3, r1]
1000a828:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a82a:	4b28      	ldr	r3, [pc, #160]	; (1000a8cc <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a82c:	2405      	movs	r4, #5
1000a82e:	e00a      	b.n	1000a846 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a830:	4b27      	ldr	r3, [pc, #156]	; (1000a8d0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a832:	2401      	movs	r4, #1
			}
			break;
1000a834:	e007      	b.n	1000a846 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a836:	4b27      	ldr	r3, [pc, #156]	; (1000a8d4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a838:	2405      	movs	r4, #5
			}
			break;
1000a83a:	e004      	b.n	1000a846 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a83c:	4b26      	ldr	r3, [pc, #152]	; (1000a8d8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a83e:	2401      	movs	r4, #1
			}
			break;
1000a840:	e001      	b.n	1000a846 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a842:	4b26      	ldr	r3, [pc, #152]	; (1000a8dc <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a844:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a846:	2800      	cmp	r0, #0
1000a848:	d116      	bne.n	1000a878 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a84a:	6819      	ldr	r1, [r3, #0]
1000a84c:	2900      	cmp	r1, #0
1000a84e:	d10b      	bne.n	1000a868 <ble_mgr_events_callback_handler+0x50>
1000a850:	e006      	b.n	1000a860 <ble_mgr_events_callback_handler+0x48>
1000a852:	001d      	movs	r5, r3
1000a854:	3304      	adds	r3, #4
1000a856:	1f18      	subs	r0, r3, #4
1000a858:	6800      	ldr	r0, [r0, #0]
1000a85a:	2800      	cmp	r0, #0
1000a85c:	d106      	bne.n	1000a86c <ble_mgr_events_callback_handler+0x54>
1000a85e:	e000      	b.n	1000a862 <ble_mgr_events_callback_handler+0x4a>
1000a860:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a862:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a864:	2101      	movs	r1, #1
						break;
1000a866:	e02c      	b.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
1000a868:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a86a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a86c:	3101      	adds	r1, #1
1000a86e:	b2c9      	uxtb	r1, r1
1000a870:	42a1      	cmp	r1, r4
1000a872:	d3ee      	bcc.n	1000a852 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a874:	2100      	movs	r1, #0
1000a876:	e024      	b.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
1000a878:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a87a:	2801      	cmp	r0, #1
1000a87c:	d121      	bne.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a87e:	6819      	ldr	r1, [r3, #0]
1000a880:	428a      	cmp	r2, r1
1000a882:	d10c      	bne.n	1000a89e <ble_mgr_events_callback_handler+0x86>
1000a884:	e006      	b.n	1000a894 <ble_mgr_events_callback_handler+0x7c>
1000a886:	001d      	movs	r5, r3
1000a888:	3304      	adds	r3, #4
1000a88a:	1f18      	subs	r0, r3, #4
1000a88c:	6800      	ldr	r0, [r0, #0]
1000a88e:	4282      	cmp	r2, r0
1000a890:	d107      	bne.n	1000a8a2 <ble_mgr_events_callback_handler+0x8a>
1000a892:	e000      	b.n	1000a896 <ble_mgr_events_callback_handler+0x7e>
1000a894:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a896:	2300      	movs	r3, #0
1000a898:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a89a:	2101      	movs	r1, #1
						break;
1000a89c:	e011      	b.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
1000a89e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a8a0:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a8a2:	3101      	adds	r1, #1
1000a8a4:	b2c9      	uxtb	r1, r1
1000a8a6:	42a1      	cmp	r1, r4
1000a8a8:	d3ed      	bcc.n	1000a886 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a8aa:	2100      	movs	r1, #0
1000a8ac:	e009      	b.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a8ae:	2100      	movs	r1, #0
1000a8b0:	e007      	b.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a8b2:	2100      	movs	r1, #0
1000a8b4:	e005      	b.n	1000a8c2 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a8b6:	4b0a      	ldr	r3, [pc, #40]	; (1000a8e0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a8b8:	2405      	movs	r4, #5
1000a8ba:	e7c4      	b.n	1000a846 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a8bc:	4b09      	ldr	r3, [pc, #36]	; (1000a8e4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a8be:	2401      	movs	r4, #1
1000a8c0:	e7c1      	b.n	1000a846 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a8c2:	0008      	movs	r0, r1
1000a8c4:	bd30      	pop	{r4, r5, pc}
1000a8c6:	46c0      	nop			; (mov r8, r8)
1000a8c8:	10011954 	.word	0x10011954
1000a8cc:	10012d98 	.word	0x10012d98
1000a8d0:	10012d94 	.word	0x10012d94
1000a8d4:	1001301c 	.word	0x1001301c
1000a8d8:	100135c0 	.word	0x100135c0
1000a8dc:	10013030 	.word	0x10013030
1000a8e0:	10013044 	.word	0x10013044
1000a8e4:	1001307c 	.word	0x1001307c

1000a8e8 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8ea:	4647      	mov	r7, r8
1000a8ec:	b480      	push	{r7}
1000a8ee:	b090      	sub	sp, #64	; 0x40
1000a8f0:	0005      	movs	r5, r0
/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a8f2:	2400      	movs	r4, #0
1000a8f4:	4b6a      	ldr	r3, [pc, #424]	; (1000aaa0 <ble_device_init+0x1b8>)
1000a8f6:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a8f8:	2207      	movs	r2, #7
1000a8fa:	2100      	movs	r1, #0
1000a8fc:	4869      	ldr	r0, [pc, #420]	; (1000aaa4 <ble_device_init+0x1bc>)
1000a8fe:	4e6a      	ldr	r6, [pc, #424]	; (1000aaa8 <ble_device_init+0x1c0>)
1000a900:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a902:	2212      	movs	r2, #18
1000a904:	2100      	movs	r1, #0
1000a906:	4869      	ldr	r0, [pc, #420]	; (1000aaac <ble_device_init+0x1c4>)
1000a908:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a90a:	4b69      	ldr	r3, [pc, #420]	; (1000aab0 <ble_device_init+0x1c8>)
1000a90c:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a90e:	22cd      	movs	r2, #205	; 0xcd
1000a910:	0092      	lsls	r2, r2, #2
1000a912:	2100      	movs	r1, #0
1000a914:	4867      	ldr	r0, [pc, #412]	; (1000aab4 <ble_device_init+0x1cc>)
1000a916:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a918:	4b67      	ldr	r3, [pc, #412]	; (1000aab8 <ble_device_init+0x1d0>)
1000a91a:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a91c:	2283      	movs	r2, #131	; 0x83
1000a91e:	0092      	lsls	r2, r2, #2
1000a920:	2100      	movs	r1, #0
1000a922:	4866      	ldr	r0, [pc, #408]	; (1000aabc <ble_device_init+0x1d4>)
1000a924:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a926:	220c      	movs	r2, #12
1000a928:	2100      	movs	r1, #0
1000a92a:	4865      	ldr	r0, [pc, #404]	; (1000aac0 <ble_device_init+0x1d8>)
1000a92c:	47b0      	blx	r6

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a92e:	4b65      	ldr	r3, [pc, #404]	; (1000aac4 <ble_device_init+0x1dc>)
1000a930:	601c      	str	r4, [r3, #0]
1000a932:	605c      	str	r4, [r3, #4]
1000a934:	609c      	str	r4, [r3, #8]
1000a936:	60dc      	str	r4, [r3, #12]
1000a938:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a93a:	4b63      	ldr	r3, [pc, #396]	; (1000aac8 <ble_device_init+0x1e0>)
1000a93c:	601c      	str	r4, [r3, #0]
1000a93e:	605c      	str	r4, [r3, #4]
1000a940:	609c      	str	r4, [r3, #8]
1000a942:	60dc      	str	r4, [r3, #12]
1000a944:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a946:	4b61      	ldr	r3, [pc, #388]	; (1000aacc <ble_device_init+0x1e4>)
1000a948:	601c      	str	r4, [r3, #0]
1000a94a:	605c      	str	r4, [r3, #4]
1000a94c:	609c      	str	r4, [r3, #8]
1000a94e:	60dc      	str	r4, [r3, #12]
1000a950:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a952:	4b5f      	ldr	r3, [pc, #380]	; (1000aad0 <ble_device_init+0x1e8>)
1000a954:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a956:	4b5f      	ldr	r3, [pc, #380]	; (1000aad4 <ble_device_init+0x1ec>)
1000a958:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a95a:	4b5f      	ldr	r3, [pc, #380]	; (1000aad8 <ble_device_init+0x1f0>)
1000a95c:	601c      	str	r4, [r3, #0]
1000a95e:	605c      	str	r4, [r3, #4]
1000a960:	609c      	str	r4, [r3, #8]
1000a962:	60dc      	str	r4, [r3, #12]
1000a964:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a966:	4b5d      	ldr	r3, [pc, #372]	; (1000aadc <ble_device_init+0x1f4>)
1000a968:	601c      	str	r4, [r3, #0]
1000a96a:	4c5d      	ldr	r4, [pc, #372]	; (1000aae0 <ble_device_init+0x1f8>)
1000a96c:	239b      	movs	r3, #155	; 0x9b
1000a96e:	009b      	lsls	r3, r3, #2
1000a970:	4698      	mov	r8, r3
1000a972:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a974:	4f4c      	ldr	r7, [pc, #304]	; (1000aaa8 <ble_device_init+0x1c0>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a976:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a978:	227c      	movs	r2, #124	; 0x7c
1000a97a:	2100      	movs	r1, #0
1000a97c:	0020      	movs	r0, r4
1000a97e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a980:	0023      	movs	r3, r4
1000a982:	335e      	adds	r3, #94	; 0x5e
1000a984:	2200      	movs	r2, #0
1000a986:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a988:	7626      	strb	r6, [r4, #24]
1000a98a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a98c:	45a0      	cmp	r8, r4
1000a98e:	d1f3      	bne.n	1000a978 <ble_device_init+0x90>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a990:	4b54      	ldr	r3, [pc, #336]	; (1000aae4 <ble_device_init+0x1fc>)
1000a992:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a994:	4854      	ldr	r0, [pc, #336]	; (1000aae8 <ble_device_init+0x200>)
1000a996:	4b55      	ldr	r3, [pc, #340]	; (1000aaec <ble_device_init+0x204>)
1000a998:	4798      	blx	r3
1000a99a:	4855      	ldr	r0, [pc, #340]	; (1000aaf0 <ble_device_init+0x208>)
1000a99c:	4b55      	ldr	r3, [pc, #340]	; (1000aaf4 <ble_device_init+0x20c>)
1000a99e:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a9a0:	4847      	ldr	r0, [pc, #284]	; (1000aac0 <ble_device_init+0x1d8>)
1000a9a2:	4b55      	ldr	r3, [pc, #340]	; (1000aaf8 <ble_device_init+0x210>)
1000a9a4:	4798      	blx	r3
1000a9a6:	2800      	cmp	r0, #0
1000a9a8:	d00b      	beq.n	1000a9c2 <ble_device_init+0xda>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a9aa:	4e4f      	ldr	r6, [pc, #316]	; (1000aae8 <ble_device_init+0x200>)
1000a9ac:	0030      	movs	r0, r6
1000a9ae:	4d4f      	ldr	r5, [pc, #316]	; (1000aaec <ble_device_init+0x204>)
1000a9b0:	47a8      	blx	r5
1000a9b2:	4852      	ldr	r0, [pc, #328]	; (1000aafc <ble_device_init+0x214>)
1000a9b4:	4c4f      	ldr	r4, [pc, #316]	; (1000aaf4 <ble_device_init+0x20c>)
1000a9b6:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a9b8:	0030      	movs	r0, r6
1000a9ba:	47a8      	blx	r5
1000a9bc:	4850      	ldr	r0, [pc, #320]	; (1000ab00 <ble_device_init+0x218>)
1000a9be:	47a0      	blx	r4
1000a9c0:	e7fe      	b.n	1000a9c0 <ble_device_init+0xd8>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a9c2:	4a50      	ldr	r2, [pc, #320]	; (1000ab04 <ble_device_init+0x21c>)
1000a9c4:	2100      	movs	r1, #0
1000a9c6:	2000      	movs	r0, #0
1000a9c8:	4c4f      	ldr	r4, [pc, #316]	; (1000ab08 <ble_device_init+0x220>)
1000a9ca:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a9cc:	4a4f      	ldr	r2, [pc, #316]	; (1000ab0c <ble_device_init+0x224>)
1000a9ce:	2102      	movs	r1, #2
1000a9d0:	2000      	movs	r0, #0
1000a9d2:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a9d4:	2109      	movs	r1, #9
1000a9d6:	484e      	ldr	r0, [pc, #312]	; (1000ab10 <ble_device_init+0x228>)
1000a9d8:	4b4e      	ldr	r3, [pc, #312]	; (1000ab14 <ble_device_init+0x22c>)
1000a9da:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a9dc:	2800      	cmp	r0, #0
1000a9de:	d005      	beq.n	1000a9ec <ble_device_init+0x104>
	{
		DBG_LOG("Device name set failed");
1000a9e0:	4841      	ldr	r0, [pc, #260]	; (1000aae8 <ble_device_init+0x200>)
1000a9e2:	4b42      	ldr	r3, [pc, #264]	; (1000aaec <ble_device_init+0x204>)
1000a9e4:	4798      	blx	r3
1000a9e6:	484c      	ldr	r0, [pc, #304]	; (1000ab18 <ble_device_init+0x230>)
1000a9e8:	4b42      	ldr	r3, [pc, #264]	; (1000aaf4 <ble_device_init+0x20c>)
1000a9ea:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a9ec:	2207      	movs	r2, #7
1000a9ee:	494b      	ldr	r1, [pc, #300]	; (1000ab1c <ble_device_init+0x234>)
1000a9f0:	3108      	adds	r1, #8
1000a9f2:	a804      	add	r0, sp, #16
1000a9f4:	4b4a      	ldr	r3, [pc, #296]	; (1000ab20 <ble_device_init+0x238>)
1000a9f6:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a9f8:	2226      	movs	r2, #38	; 0x26
1000a9fa:	2100      	movs	r1, #0
1000a9fc:	a806      	add	r0, sp, #24
1000a9fe:	4b2a      	ldr	r3, [pc, #168]	; (1000aaa8 <ble_device_init+0x1c0>)
1000aa00:	4798      	blx	r3
	
	if (addr == NULL)
1000aa02:	2d00      	cmp	r5, #0
1000aa04:	d10c      	bne.n	1000aa20 <ble_device_init+0x138>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000aa06:	a804      	add	r0, sp, #16
1000aa08:	4b46      	ldr	r3, [pc, #280]	; (1000ab24 <ble_device_init+0x23c>)
1000aa0a:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000aa0c:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000aa0e:	2800      	cmp	r0, #0
1000aa10:	d006      	beq.n	1000aa20 <ble_device_init+0x138>
		{
			DBG_LOG("BD address get failed");
1000aa12:	4835      	ldr	r0, [pc, #212]	; (1000aae8 <ble_device_init+0x200>)
1000aa14:	4b35      	ldr	r3, [pc, #212]	; (1000aaec <ble_device_init+0x204>)
1000aa16:	4798      	blx	r3
1000aa18:	4843      	ldr	r0, [pc, #268]	; (1000ab28 <ble_device_init+0x240>)
1000aa1a:	4b36      	ldr	r3, [pc, #216]	; (1000aaf4 <ble_device_init+0x20c>)
1000aa1c:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000aa1e:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000aa20:	4831      	ldr	r0, [pc, #196]	; (1000aae8 <ble_device_init+0x200>)
1000aa22:	4b32      	ldr	r3, [pc, #200]	; (1000aaec <ble_device_init+0x204>)
1000aa24:	4798      	blx	r3
1000aa26:	792b      	ldrb	r3, [r5, #4]
1000aa28:	796a      	ldrb	r2, [r5, #5]
1000aa2a:	79a9      	ldrb	r1, [r5, #6]
1000aa2c:	7828      	ldrb	r0, [r5, #0]
1000aa2e:	9003      	str	r0, [sp, #12]
1000aa30:	7868      	ldrb	r0, [r5, #1]
1000aa32:	9002      	str	r0, [sp, #8]
1000aa34:	78a8      	ldrb	r0, [r5, #2]
1000aa36:	9001      	str	r0, [sp, #4]
1000aa38:	78e8      	ldrb	r0, [r5, #3]
1000aa3a:	9000      	str	r0, [sp, #0]
1000aa3c:	483b      	ldr	r0, [pc, #236]	; (1000ab2c <ble_device_init+0x244>)
1000aa3e:	4c2d      	ldr	r4, [pc, #180]	; (1000aaf4 <ble_device_init+0x20c>)
1000aa40:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000aa42:	ac06      	add	r4, sp, #24
1000aa44:	2305      	movs	r3, #5
1000aa46:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000aa48:	4b39      	ldr	r3, [pc, #228]	; (1000ab30 <ble_device_init+0x248>)
1000aa4a:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000aa4c:	2207      	movs	r2, #7
1000aa4e:	0029      	movs	r1, r5
1000aa50:	a807      	add	r0, sp, #28
1000aa52:	4b33      	ldr	r3, [pc, #204]	; (1000ab20 <ble_device_init+0x238>)
1000aa54:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000aa56:	2300      	movs	r3, #0
1000aa58:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000aa5a:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000aa5c:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000aa5e:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000aa60:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000aa62:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000aa64:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000aa66:	2380      	movs	r3, #128	; 0x80
1000aa68:	009b      	lsls	r3, r3, #2
1000aa6a:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000aa6c:	0020      	movs	r0, r4
1000aa6e:	4b31      	ldr	r3, [pc, #196]	; (1000ab34 <ble_device_init+0x24c>)
1000aa70:	4798      	blx	r3
1000aa72:	2800      	cmp	r0, #0
1000aa74:	d005      	beq.n	1000aa82 <ble_device_init+0x19a>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000aa76:	481c      	ldr	r0, [pc, #112]	; (1000aae8 <ble_device_init+0x200>)
1000aa78:	4b1c      	ldr	r3, [pc, #112]	; (1000aaec <ble_device_init+0x204>)
1000aa7a:	4798      	blx	r3
1000aa7c:	482e      	ldr	r0, [pc, #184]	; (1000ab38 <ble_device_init+0x250>)
1000aa7e:	4b1d      	ldr	r3, [pc, #116]	; (1000aaf4 <ble_device_init+0x20c>)
1000aa80:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000aa82:	0028      	movs	r0, r5
1000aa84:	4b2d      	ldr	r3, [pc, #180]	; (1000ab3c <ble_device_init+0x254>)
1000aa86:	4798      	blx	r3
1000aa88:	2800      	cmp	r0, #0
1000aa8a:	d005      	beq.n	1000aa98 <ble_device_init+0x1b0>
	{
		DBG_LOG("Set BLE Device Address failed");
1000aa8c:	4816      	ldr	r0, [pc, #88]	; (1000aae8 <ble_device_init+0x200>)
1000aa8e:	4b17      	ldr	r3, [pc, #92]	; (1000aaec <ble_device_init+0x204>)
1000aa90:	4798      	blx	r3
1000aa92:	482b      	ldr	r0, [pc, #172]	; (1000ab40 <ble_device_init+0x258>)
1000aa94:	4b17      	ldr	r3, [pc, #92]	; (1000aaf4 <ble_device_init+0x20c>)
1000aa96:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000aa98:	b010      	add	sp, #64	; 0x40
1000aa9a:	bc04      	pop	{r2}
1000aa9c:	4690      	mov	r8, r2
1000aa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aaa0:	10012ad4 	.word	0x10012ad4
1000aaa4:	10012adc 	.word	0x10012adc
1000aaa8:	1000ff49 	.word	0x1000ff49
1000aaac:	10013058 	.word	0x10013058
1000aab0:	10012ad8 	.word	0x10012ad8
1000aab4:	10013080 	.word	0x10013080
1000aab8:	10013078 	.word	0x10013078
1000aabc:	100133b4 	.word	0x100133b4
1000aac0:	1001306c 	.word	0x1001306c
1000aac4:	10013030 	.word	0x10013030
1000aac8:	10013044 	.word	0x10013044
1000aacc:	10012d98 	.word	0x10012d98
1000aad0:	1001307c 	.word	0x1001307c
1000aad4:	10012d94 	.word	0x10012d94
1000aad8:	1001301c 	.word	0x1001301c
1000aadc:	100135c0 	.word	0x100135c0
1000aae0:	10012dac 	.word	0x10012dac
1000aae4:	10013018 	.word	0x10013018
1000aae8:	1001141c 	.word	0x1001141c
1000aaec:	10010079 	.word	0x10010079
1000aaf0:	10012110 	.word	0x10012110
1000aaf4:	1000ff59 	.word	0x1000ff59
1000aaf8:	1000cb29 	.word	0x1000cb29
1000aafc:	10012124 	.word	0x10012124
1000ab00:	10012144 	.word	0x10012144
1000ab04:	10012328 	.word	0x10012328
1000ab08:	1000a819 	.word	0x1000a819
1000ab0c:	1001198c 	.word	0x1001198c
1000ab10:	10012180 	.word	0x10012180
1000ab14:	1000ca41 	.word	0x1000ca41
1000ab18:	1001218c 	.word	0x1001218c
1000ab1c:	10011970 	.word	0x10011970
1000ab20:	1000ff37 	.word	0x1000ff37
1000ab24:	1000ca75 	.word	0x1000ca75
1000ab28:	100121a4 	.word	0x100121a4
1000ab2c:	100121bc 	.word	0x100121bc
1000ab30:	00003a98 	.word	0x00003a98
1000ab34:	1000ca99 	.word	0x1000ca99
1000ab38:	100121f4 	.word	0x100121f4
1000ab3c:	1000ccc1 	.word	0x1000ccc1
1000ab40:	10012218 	.word	0x10012218

1000ab44 <gap_dev_connect>:
	return AT_BLE_SUCCESS;
}

/** @brief request the peer device for connection */
at_ble_status_t gap_dev_connect(at_ble_addr_t *dev_addr)
{
1000ab44:	b510      	push	{r4, lr}
1000ab46:	b086      	sub	sp, #24
1000ab48:	0004      	movs	r4, r0
	at_ble_connection_params_t gap_conn_parameter;
	
	memcpy((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)dev_addr, sizeof(at_ble_addr_t));
1000ab4a:	2207      	movs	r2, #7
1000ab4c:	0001      	movs	r1, r0
1000ab4e:	480c      	ldr	r0, [pc, #48]	; (1000ab80 <gap_dev_connect+0x3c>)
1000ab50:	4b0c      	ldr	r3, [pc, #48]	; (1000ab84 <gap_dev_connect+0x40>)
1000ab52:	4798      	blx	r3

	gap_conn_parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
1000ab54:	ab03      	add	r3, sp, #12
1000ab56:	2208      	movs	r2, #8
1000ab58:	801a      	strh	r2, [r3, #0]
	gap_conn_parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
1000ab5a:	3202      	adds	r2, #2
1000ab5c:	805a      	strh	r2, [r3, #2]
	gap_conn_parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
1000ab5e:	3a06      	subs	r2, #6
1000ab60:	809a      	strh	r2, [r3, #4]
	gap_conn_parameter.ce_len_min = GAP_CE_LEN_MIN;
1000ab62:	2200      	movs	r2, #0
1000ab64:	811a      	strh	r2, [r3, #8]
	gap_conn_parameter.ce_len_max = GAP_CE_LEN_MAX;
1000ab66:	815a      	strh	r2, [r3, #10]
	gap_conn_parameter.superv_to = GAP_SUPERVISION_TIMOUT;
1000ab68:	22fa      	movs	r2, #250	; 0xfa
1000ab6a:	00d2      	lsls	r2, r2, #3
1000ab6c:	80da      	strh	r2, [r3, #6]

	return (at_ble_connect(dev_addr, GAP_CONNECT_PEER_COUNT, SCAN_INTERVAL, SCAN_WINDOW, &gap_conn_parameter));
1000ab6e:	9300      	str	r3, [sp, #0]
1000ab70:	2360      	movs	r3, #96	; 0x60
1000ab72:	2260      	movs	r2, #96	; 0x60
1000ab74:	2101      	movs	r1, #1
1000ab76:	0020      	movs	r0, r4
1000ab78:	4c03      	ldr	r4, [pc, #12]	; (1000ab88 <gap_dev_connect+0x44>)
1000ab7a:	47a0      	blx	r4
}
1000ab7c:	b006      	add	sp, #24
1000ab7e:	bd10      	pop	{r4, pc}
1000ab80:	10012adc 	.word	0x10012adc
1000ab84:	1000ff37 	.word	0x1000ff37
1000ab88:	1000cd35 	.word	0x1000cd35

1000ab8c <scan_info_parse>:
}

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
1000ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab8e:	465f      	mov	r7, fp
1000ab90:	4656      	mov	r6, sl
1000ab92:	464d      	mov	r5, r9
1000ab94:	4644      	mov	r4, r8
1000ab96:	b4f0      	push	{r4, r5, r6, r7}
1000ab98:	b087      	sub	sp, #28
1000ab9a:	4681      	mov	r9, r0
1000ab9c:	9101      	str	r1, [sp, #4]
1000ab9e:	4693      	mov	fp, r2
	if (scan_info_data->adv_data_len) {
1000aba0:	2327      	movs	r3, #39	; 0x27
1000aba2:	5cc6      	ldrb	r6, [r0, r3]
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000aba4:	20e2      	movs	r0, #226	; 0xe2

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
	if (scan_info_data->adv_data_len) {
1000aba6:	2e00      	cmp	r6, #0
1000aba8:	d062      	beq.n	1000ac70 <scan_info_parse+0xe4>
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
1000abaa:	2200      	movs	r2, #0
1000abac:	ab04      	add	r3, sp, #16
1000abae:	701a      	strb	r2, [r3, #0]
1000abb0:	2500      	movs	r5, #0
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000abb2:	2301      	movs	r3, #1
1000abb4:	425b      	negs	r3, r3
1000abb6:	4698      	mov	r8, r3
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000abb8:	000b      	movs	r3, r1
1000abba:	3301      	adds	r3, #1
1000abbc:	9300      	str	r3, [sp, #0]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000abbe:	4b30      	ldr	r3, [pc, #192]	; (1000ac80 <scan_info_parse+0xf4>)
1000abc0:	469a      	mov	sl, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
1000abc2:	464b      	mov	r3, r9
1000abc4:	195a      	adds	r2, r3, r5
1000abc6:	7a11      	ldrb	r1, [r2, #8]
1000abc8:	ab04      	add	r3, sp, #16
1000abca:	7019      	strb	r1, [r3, #0]
			adv_element_data.type
			= scan_info_data->adv_data[index + 1];
1000abcc:	7a52      	ldrb	r2, [r2, #9]
1000abce:	705a      	strb	r2, [r3, #1]
			adv_element_data.data
			= &scan_info_data->adv_data[index + 2];
1000abd0:	002a      	movs	r2, r5
1000abd2:	320a      	adds	r2, #10
1000abd4:	444a      	add	r2, r9
1000abd6:	9205      	str	r2, [sp, #20]
			adv_element_p = &adv_element_data;

			if (adv_element_p->type == adv_type) {
1000abd8:	785b      	ldrb	r3, [r3, #1]
1000abda:	b2db      	uxtb	r3, r3
1000abdc:	455b      	cmp	r3, fp
1000abde:	d136      	bne.n	1000ac4e <scan_info_parse+0xc2>
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
1000abe0:	ab04      	add	r3, sp, #16
1000abe2:	781c      	ldrb	r4, [r3, #0]
				/* actual size of the data	*/
				adv_type_size -= 1;
1000abe4:	3c01      	subs	r4, #1
1000abe6:	b2e4      	uxtb	r4, r4
				while (adv_type_size) {
1000abe8:	2c00      	cmp	r4, #0
1000abea:	d030      	beq.n	1000ac4e <scan_info_parse+0xc2>
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
1000abec:	9b01      	ldr	r3, [sp, #4]
1000abee:	781f      	ldrb	r7, [r3, #0]
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000abf0:	4643      	mov	r3, r8
1000abf2:	9303      	str	r3, [sp, #12]
					if (ble_service_uuid->type ==
1000abf4:	2f00      	cmp	r7, #0
1000abf6:	d10a      	bne.n	1000ac0e <scan_info_parse+0x82>
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000abf8:	9805      	ldr	r0, [sp, #20]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000abfa:	2202      	movs	r2, #2
1000abfc:	9900      	ldr	r1, [sp, #0]
1000abfe:	47d0      	blx	sl
1000ac00:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_16_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
1000ac02:	9b05      	ldr	r3, [sp, #20]
1000ac04:	3302      	adds	r3, #2
1000ac06:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
1000ac08:	3c02      	subs	r4, #2
1000ac0a:	b2e4      	uxtb	r4, r4
1000ac0c:	e01a      	b.n	1000ac44 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000ac0e:	2f01      	cmp	r7, #1
1000ac10:	d10b      	bne.n	1000ac2a <scan_info_parse+0x9e>
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000ac12:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_16_LEN;
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
1000ac14:	2204      	movs	r2, #4
1000ac16:	9900      	ldr	r1, [sp, #0]
1000ac18:	4b19      	ldr	r3, [pc, #100]	; (1000ac80 <scan_info_parse+0xf4>)
1000ac1a:	4798      	blx	r3
1000ac1c:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_32_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
1000ac1e:	9b05      	ldr	r3, [sp, #20]
1000ac20:	3304      	adds	r3, #4
1000ac22:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000ac24:	3c04      	subs	r4, #4
1000ac26:	b2e4      	uxtb	r4, r4
1000ac28:	e00c      	b.n	1000ac44 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000ac2a:	2f02      	cmp	r7, #2
1000ac2c:	d10a      	bne.n	1000ac44 <scan_info_parse+0xb8>
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000ac2e:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000ac30:	2210      	movs	r2, #16
1000ac32:	9900      	ldr	r1, [sp, #0]
1000ac34:	4b12      	ldr	r3, [pc, #72]	; (1000ac80 <scan_info_parse+0xf4>)
1000ac36:	4798      	blx	r3
1000ac38:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_128_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
1000ac3a:	9b05      	ldr	r3, [sp, #20]
1000ac3c:	3310      	adds	r3, #16
1000ac3e:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000ac40:	3c04      	subs	r4, #4
1000ac42:	b2e4      	uxtb	r4, r4
					}

					if (cmp_status == 0) {
1000ac44:	9b03      	ldr	r3, [sp, #12]
1000ac46:	2b00      	cmp	r3, #0
1000ac48:	d011      	beq.n	1000ac6e <scan_info_parse+0xe2>
			if (adv_element_p->type == adv_type) {
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
1000ac4a:	2c00      	cmp	r4, #0
1000ac4c:	d1d0      	bne.n	1000abf0 <scan_info_parse+0x64>
						return AT_BLE_SUCCESS;
					}
				}
			}

			index += (adv_element_data.len + 1);
1000ac4e:	aa04      	add	r2, sp, #16
1000ac50:	7813      	ldrb	r3, [r2, #0]
1000ac52:	3301      	adds	r3, #1
1000ac54:	18ed      	adds	r5, r5, r3
1000ac56:	b2ed      	uxtb	r5, r5
			adv_element_data.len += 1;
1000ac58:	7813      	ldrb	r3, [r2, #0]
1000ac5a:	3301      	adds	r3, #1
1000ac5c:	b2db      	uxtb	r3, r3
1000ac5e:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
1000ac60:	7813      	ldrb	r3, [r2, #0]
1000ac62:	1af6      	subs	r6, r6, r3
1000ac64:	b2f6      	uxtb	r6, r6
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
1000ac66:	2e00      	cmp	r6, #0
1000ac68:	d1ab      	bne.n	1000abc2 <scan_info_parse+0x36>
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000ac6a:	20e2      	movs	r0, #226	; 0xe2
1000ac6c:	e000      	b.n	1000ac70 <scan_info_parse+0xe4>
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					}

					if (cmp_status == 0) {
						return AT_BLE_SUCCESS;
1000ac6e:	2000      	movs	r0, #0
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
}
1000ac70:	b007      	add	sp, #28
1000ac72:	bc3c      	pop	{r2, r3, r4, r5}
1000ac74:	4690      	mov	r8, r2
1000ac76:	4699      	mov	r9, r3
1000ac78:	46a2      	mov	sl, r4
1000ac7a:	46ab      	mov	fp, r5
1000ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac7e:	46c0      	nop			; (mov r8, r8)
1000ac80:	1000ff19 	.word	0x1000ff19

1000ac84 <ble_connected_device_role>:
	}
	return false;
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000ac84:	b530      	push	{r4, r5, lr}
1000ac86:	4a0d      	ldr	r2, [pc, #52]	; (1000acbc <ble_connected_device_role+0x38>)
1000ac88:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
1000ac8a:	001d      	movs	r5, r3
1000ac8c:	0014      	movs	r4, r2
1000ac8e:	345e      	adds	r4, #94	; 0x5e
1000ac90:	7824      	ldrb	r4, [r4, #0]
1000ac92:	2c01      	cmp	r4, #1
1000ac94:	d90b      	bls.n	1000acae <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000ac96:	8914      	ldrh	r4, [r2, #8]
1000ac98:	4284      	cmp	r4, r0
1000ac9a:	d108      	bne.n	1000acae <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000ac9c:	015b      	lsls	r3, r3, #5
1000ac9e:	1b5d      	subs	r5, r3, r5
1000aca0:	00ad      	lsls	r5, r5, #2
1000aca2:	4b06      	ldr	r3, [pc, #24]	; (1000acbc <ble_connected_device_role+0x38>)
1000aca4:	195d      	adds	r5, r3, r5
1000aca6:	7cab      	ldrb	r3, [r5, #18]
1000aca8:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000acaa:	2000      	movs	r0, #0
			break;
1000acac:	e004      	b.n	1000acb8 <ble_connected_device_role+0x34>
1000acae:	3301      	adds	r3, #1
1000acb0:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000acb2:	2b05      	cmp	r3, #5
1000acb4:	d1e9      	bne.n	1000ac8a <ble_connected_device_role+0x6>
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000acb6:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000acb8:	bd30      	pop	{r4, r5, pc}
1000acba:	46c0      	nop			; (mov r8, r8)
1000acbc:	10012dac 	.word	0x10012dac

1000acc0 <ble_check_iscentral>:
	}
	return false;
}

bool ble_check_iscentral(at_ble_handle_t handle)
{
1000acc0:	b500      	push	{lr}
1000acc2:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
1000acc4:	466b      	mov	r3, sp
1000acc6:	1dd9      	adds	r1, r3, #7
1000acc8:	2300      	movs	r3, #0
1000acca:	700b      	strb	r3, [r1, #0]
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000accc:	4b07      	ldr	r3, [pc, #28]	; (1000acec <ble_check_iscentral+0x2c>)
1000acce:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000acd0:	2300      	movs	r3, #0

bool ble_check_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000acd2:	2800      	cmp	r0, #0
1000acd4:	d106      	bne.n	1000ace4 <ble_check_iscentral+0x24>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000acd6:	466b      	mov	r3, sp
1000acd8:	3307      	adds	r3, #7
1000acda:	781b      	ldrb	r3, [r3, #0]
1000acdc:	3b05      	subs	r3, #5
1000acde:	4258      	negs	r0, r3
1000ace0:	4143      	adcs	r3, r0
1000ace2:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000ace4:	0018      	movs	r0, r3
1000ace6:	b003      	add	sp, #12
1000ace8:	bd00      	pop	{pc}
1000acea:	46c0      	nop			; (mov r8, r8)
1000acec:	1000ac85 	.word	0x1000ac85

1000acf0 <uart_read_complete_callback>:
void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	read_complete_flag = true;
1000acf0:	2201      	movs	r2, #1
1000acf2:	4b01      	ldr	r3, [pc, #4]	; (1000acf8 <uart_read_complete_callback+0x8>)
1000acf4:	701a      	strb	r2, [r3, #0]
}
1000acf6:	4770      	bx	lr
1000acf8:	10012ae3 	.word	0x10012ae3

1000acfc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000acfc:	b570      	push	{r4, r5, r6, lr}
1000acfe:	0006      	movs	r6, r0
1000ad00:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ad02:	4c03      	ldr	r4, [pc, #12]	; (1000ad10 <usart_serial_getchar+0x14>)
1000ad04:	0029      	movs	r1, r5
1000ad06:	0030      	movs	r0, r6
1000ad08:	47a0      	blx	r4
1000ad0a:	2800      	cmp	r0, #0
1000ad0c:	d1fa      	bne.n	1000ad04 <usart_serial_getchar+0x8>
}
1000ad0e:	bd70      	pop	{r4, r5, r6, pc}
1000ad10:	100097ad 	.word	0x100097ad

1000ad14 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ad14:	b570      	push	{r4, r5, r6, lr}
1000ad16:	0006      	movs	r6, r0
1000ad18:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ad1a:	4c03      	ldr	r4, [pc, #12]	; (1000ad28 <usart_serial_putchar+0x14>)
1000ad1c:	0029      	movs	r1, r5
1000ad1e:	0030      	movs	r0, r6
1000ad20:	47a0      	blx	r4
1000ad22:	2800      	cmp	r0, #0
1000ad24:	d1fa      	bne.n	1000ad1c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ad26:	bd70      	pop	{r4, r5, r6, pc}
1000ad28:	1000979d 	.word	0x1000979d

1000ad2c <serial_console_init>:

void serial_console_init(void)
{
1000ad2c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ad2e:	2100      	movs	r1, #0
1000ad30:	2000      	movs	r0, #0
1000ad32:	4b16      	ldr	r3, [pc, #88]	; (1000ad8c <serial_console_init+0x60>)
1000ad34:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ad36:	4c16      	ldr	r4, [pc, #88]	; (1000ad90 <serial_console_init+0x64>)
1000ad38:	0020      	movs	r0, r4
1000ad3a:	4b16      	ldr	r3, [pc, #88]	; (1000ad94 <serial_console_init+0x68>)
1000ad3c:	4798      	blx	r3

	config_uart.baud_rate = 115200;
1000ad3e:	23e1      	movs	r3, #225	; 0xe1
1000ad40:	025b      	lsls	r3, r3, #9
1000ad42:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000ad44:	2302      	movs	r3, #2
1000ad46:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000ad48:	2203      	movs	r2, #3
1000ad4a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000ad4c:	3201      	adds	r2, #1
1000ad4e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000ad50:	3201      	adds	r2, #1
1000ad52:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000ad54:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000ad56:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000ad58:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000ad5a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ad5c:	480e      	ldr	r0, [pc, #56]	; (1000ad98 <serial_console_init+0x6c>)
1000ad5e:	4b0f      	ldr	r3, [pc, #60]	; (1000ad9c <serial_console_init+0x70>)
1000ad60:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ad62:	4a0f      	ldr	r2, [pc, #60]	; (1000ada0 <serial_console_init+0x74>)
1000ad64:	4b0f      	ldr	r3, [pc, #60]	; (1000ada4 <serial_console_init+0x78>)
1000ad66:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ad68:	4a0f      	ldr	r2, [pc, #60]	; (1000ada8 <serial_console_init+0x7c>)
1000ad6a:	4b10      	ldr	r3, [pc, #64]	; (1000adac <serial_console_init+0x80>)
1000ad6c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ad6e:	0022      	movs	r2, r4
1000ad70:	490f      	ldr	r1, [pc, #60]	; (1000adb0 <serial_console_init+0x84>)
1000ad72:	4b10      	ldr	r3, [pc, #64]	; (1000adb4 <serial_console_init+0x88>)
1000ad74:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ad76:	4d10      	ldr	r5, [pc, #64]	; (1000adb8 <serial_console_init+0x8c>)
1000ad78:	682b      	ldr	r3, [r5, #0]
1000ad7a:	6898      	ldr	r0, [r3, #8]
1000ad7c:	2100      	movs	r1, #0
1000ad7e:	4c0f      	ldr	r4, [pc, #60]	; (1000adbc <serial_console_init+0x90>)
1000ad80:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ad82:	682b      	ldr	r3, [r5, #0]
1000ad84:	6858      	ldr	r0, [r3, #4]
1000ad86:	2100      	movs	r1, #0
1000ad88:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
}
1000ad8a:	bd70      	pop	{r4, r5, r6, pc}
1000ad8c:	100087dd 	.word	0x100087dd
1000ad90:	100135e8 	.word	0x100135e8
1000ad94:	100095d5 	.word	0x100095d5
1000ad98:	100135c4 	.word	0x100135c4
1000ad9c:	10012d68 	.word	0x10012d68
1000ada0:	1000ad15 	.word	0x1000ad15
1000ada4:	10012d64 	.word	0x10012d64
1000ada8:	1000acfd 	.word	0x1000acfd
1000adac:	10012d60 	.word	0x10012d60
1000adb0:	40004000 	.word	0x40004000
1000adb4:	10009601 	.word	0x10009601
1000adb8:	10012a98 	.word	0x10012a98
1000adbc:	10010105 	.word	0x10010105

1000adc0 <_time_start>:

void _time_start(unsigned int sec)
{
1000adc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adc2:	b083      	sub	sp, #12
1000adc4:	0005      	movs	r5, r0
	system_clock_get_value();
1000adc6:	4c0d      	ldr	r4, [pc, #52]	; (1000adfc <_time_start+0x3c>)
1000adc8:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000adca:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000adcc:	4f0c      	ldr	r7, [pc, #48]	; (1000ae00 <_time_start+0x40>)
1000adce:	47b8      	blx	r7
1000add0:	4e0c      	ldr	r6, [pc, #48]	; (1000ae04 <_time_start+0x44>)
1000add2:	4a0d      	ldr	r2, [pc, #52]	; (1000ae08 <_time_start+0x48>)
1000add4:	4b0d      	ldr	r3, [pc, #52]	; (1000ae0c <_time_start+0x4c>)
1000add6:	47b0      	blx	r6
1000add8:	9000      	str	r0, [sp, #0]
1000adda:	9101      	str	r1, [sp, #4]
1000addc:	20fa      	movs	r0, #250	; 0xfa
1000adde:	0080      	lsls	r0, r0, #2
1000ade0:	4368      	muls	r0, r5
1000ade2:	47b8      	blx	r7
1000ade4:	0002      	movs	r2, r0
1000ade6:	000b      	movs	r3, r1
1000ade8:	9800      	ldr	r0, [sp, #0]
1000adea:	9901      	ldr	r1, [sp, #4]
1000adec:	47b0      	blx	r6
1000adee:	4b08      	ldr	r3, [pc, #32]	; (1000ae10 <_time_start+0x50>)
1000adf0:	4798      	blx	r3
1000adf2:	4b08      	ldr	r3, [pc, #32]	; (1000ae14 <_time_start+0x54>)
1000adf4:	6018      	str	r0, [r3, #0]
}
1000adf6:	b003      	add	sp, #12
1000adf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000adfa:	46c0      	nop			; (mov r8, r8)
1000adfc:	10008861 	.word	0x10008861
1000ae00:	1000fb89 	.word	0x1000fb89
1000ae04:	1000ef81 	.word	0x1000ef81
1000ae08:	19feaec7 	.word	0x19feaec7
1000ae0c:	3f09d8ef 	.word	0x3f09d8ef
1000ae10:	1000ef45 	.word	0x1000ef45
1000ae14:	10012ae4 	.word	0x10012ae4

1000ae18 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ae18:	4b02      	ldr	r3, [pc, #8]	; (1000ae24 <_time_done+0xc>)
1000ae1a:	681a      	ldr	r2, [r3, #0]
1000ae1c:	1e50      	subs	r0, r2, #1
1000ae1e:	6018      	str	r0, [r3, #0]
}
1000ae20:	4770      	bx	lr
1000ae22:	46c0      	nop			; (mov r8, r8)
1000ae24:	10012ae4 	.word	0x10012ae4

1000ae28 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ae28:	b570      	push	{r4, r5, r6, lr}
	
	read_complete_flag = false;
1000ae2a:	2400      	movs	r4, #0
1000ae2c:	4b16      	ldr	r3, [pc, #88]	; (1000ae88 <getchar_b11_timeout+0x60>)
1000ae2e:	701c      	strb	r4, [r3, #0]
	_time_start(sec);
1000ae30:	4b16      	ldr	r3, [pc, #88]	; (1000ae8c <getchar_b11_timeout+0x64>)
1000ae32:	4798      	blx	r3
	
	string_input[0] = 0;
1000ae34:	4d16      	ldr	r5, [pc, #88]	; (1000ae90 <getchar_b11_timeout+0x68>)
1000ae36:	702c      	strb	r4, [r5, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ae38:	4c16      	ldr	r4, [pc, #88]	; (1000ae94 <getchar_b11_timeout+0x6c>)
1000ae3a:	2202      	movs	r2, #2
1000ae3c:	4916      	ldr	r1, [pc, #88]	; (1000ae98 <getchar_b11_timeout+0x70>)
1000ae3e:	0020      	movs	r0, r4
1000ae40:	4b16      	ldr	r3, [pc, #88]	; (1000ae9c <getchar_b11_timeout+0x74>)
1000ae42:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ae44:	2102      	movs	r1, #2
1000ae46:	0020      	movs	r0, r4
1000ae48:	4b15      	ldr	r3, [pc, #84]	; (1000aea0 <getchar_b11_timeout+0x78>)
1000ae4a:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ae4c:	2201      	movs	r2, #1
1000ae4e:	0029      	movs	r1, r5
1000ae50:	0020      	movs	r0, r4
1000ae52:	4b14      	ldr	r3, [pc, #80]	; (1000aea4 <getchar_b11_timeout+0x7c>)
1000ae54:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
1000ae56:	4c0c      	ldr	r4, [pc, #48]	; (1000ae88 <getchar_b11_timeout+0x60>)
1000ae58:	4d13      	ldr	r5, [pc, #76]	; (1000aea8 <getchar_b11_timeout+0x80>)
1000ae5a:	7823      	ldrb	r3, [r4, #0]
1000ae5c:	2b00      	cmp	r3, #0
1000ae5e:	d102      	bne.n	1000ae66 <getchar_b11_timeout+0x3e>
1000ae60:	47a8      	blx	r5
1000ae62:	2800      	cmp	r0, #0
1000ae64:	d1f9      	bne.n	1000ae5a <getchar_b11_timeout+0x32>
	
	if( tick == 0 )
1000ae66:	4b11      	ldr	r3, [pc, #68]	; (1000aeac <getchar_b11_timeout+0x84>)
1000ae68:	681b      	ldr	r3, [r3, #0]
1000ae6a:	2b00      	cmp	r3, #0
1000ae6c:	d108      	bne.n	1000ae80 <getchar_b11_timeout+0x58>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
1000ae6e:	4c09      	ldr	r4, [pc, #36]	; (1000ae94 <getchar_b11_timeout+0x6c>)
1000ae70:	2102      	movs	r1, #2
1000ae72:	0020      	movs	r0, r4
1000ae74:	4b0e      	ldr	r3, [pc, #56]	; (1000aeb0 <getchar_b11_timeout+0x88>)
1000ae76:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ae78:	2102      	movs	r1, #2
1000ae7a:	0020      	movs	r0, r4
1000ae7c:	4b0d      	ldr	r3, [pc, #52]	; (1000aeb4 <getchar_b11_timeout+0x8c>)
1000ae7e:	4798      	blx	r3
	}
	return string_input[0];
1000ae80:	4b03      	ldr	r3, [pc, #12]	; (1000ae90 <getchar_b11_timeout+0x68>)
1000ae82:	7818      	ldrb	r0, [r3, #0]
}
1000ae84:	bd70      	pop	{r4, r5, r6, pc}
1000ae86:	46c0      	nop			; (mov r8, r8)
1000ae88:	10012ae3 	.word	0x10012ae3
1000ae8c:	1000adc1 	.word	0x1000adc1
1000ae90:	10012ae8 	.word	0x10012ae8
1000ae94:	100135c4 	.word	0x100135c4
1000ae98:	1000acf1 	.word	0x1000acf1
1000ae9c:	100097e9 	.word	0x100097e9
1000aea0:	10009815 	.word	0x10009815
1000aea4:	100097c1 	.word	0x100097c1
1000aea8:	1000ae19 	.word	0x1000ae19
1000aeac:	10012ae4 	.word	0x10012ae4
1000aeb0:	100097fd 	.word	0x100097fd
1000aeb4:	10009835 	.word	0x10009835

1000aeb8 <dualtimer_callback2>:
#include "conf_dualtimer.h"

extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
1000aeb8:	b510      	push	{r4, lr}
	puts("Timer2 trigger\r\n");
1000aeba:	4802      	ldr	r0, [pc, #8]	; (1000aec4 <dualtimer_callback2+0xc>)
1000aebc:	4b02      	ldr	r3, [pc, #8]	; (1000aec8 <dualtimer_callback2+0x10>)
1000aebe:	4798      	blx	r3
}
1000aec0:	bd10      	pop	{r4, pc}
1000aec2:	46c0      	nop			; (mov r8, r8)
1000aec4:	10012374 	.word	0x10012374
1000aec8:	10010079 	.word	0x10010079

1000aecc <hw_timer_register_callback>:

	dualtimer_init(&config_dualtimer);
}

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000aecc:	b510      	push	{r4, lr}
1000aece:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000aed0:	2000      	movs	r0, #0
1000aed2:	4c07      	ldr	r4, [pc, #28]	; (1000aef0 <hw_timer_register_callback+0x24>)
1000aed4:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000aed6:	4907      	ldr	r1, [pc, #28]	; (1000aef4 <hw_timer_register_callback+0x28>)
1000aed8:	2001      	movs	r0, #1
1000aeda:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000aedc:	2000      	movs	r0, #0
1000aede:	4c06      	ldr	r4, [pc, #24]	; (1000aef8 <hw_timer_register_callback+0x2c>)
1000aee0:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000aee2:	2001      	movs	r0, #1
1000aee4:	47a0      	blx	r4
1000aee6:	2280      	movs	r2, #128	; 0x80
1000aee8:	01d2      	lsls	r2, r2, #7
1000aeea:	4b04      	ldr	r3, [pc, #16]	; (1000aefc <hw_timer_register_callback+0x30>)
1000aeec:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000aeee:	bd10      	pop	{r4, pc}
1000aef0:	10008159 	.word	0x10008159
1000aef4:	1000aeb9 	.word	0x1000aeb9
1000aef8:	10008135 	.word	0x10008135
1000aefc:	e000e100 	.word	0xe000e100

1000af00 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000af00:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000af02:	2800      	cmp	r0, #0
1000af04:	d100      	bne.n	1000af08 <hw_timer_start+0x8>
		delay = 1;
1000af06:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000af08:	4b05      	ldr	r3, [pc, #20]	; (1000af20 <hw_timer_start+0x20>)
1000af0a:	4343      	muls	r3, r0
1000af0c:	001a      	movs	r2, r3
1000af0e:	2100      	movs	r1, #0
1000af10:	2000      	movs	r0, #0
1000af12:	4b04      	ldr	r3, [pc, #16]	; (1000af24 <hw_timer_start+0x24>)
1000af14:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000af16:	2000      	movs	r0, #0
1000af18:	4b03      	ldr	r3, [pc, #12]	; (1000af28 <hw_timer_start+0x28>)
1000af1a:	4798      	blx	r3
}
1000af1c:	bd10      	pop	{r4, pc}
1000af1e:	46c0      	nop			; (mov r8, r8)
1000af20:	018cba80 	.word	0x018cba80
1000af24:	100080e9 	.word	0x100080e9
1000af28:	10008111 	.word	0x10008111

1000af2c <hw_timer_stop>:

void hw_timer_stop(void)
{
1000af2c:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000af2e:	2000      	movs	r0, #0
1000af30:	4b01      	ldr	r3, [pc, #4]	; (1000af38 <hw_timer_stop+0xc>)
1000af32:	4798      	blx	r3
}
1000af34:	bd10      	pop	{r4, pc}
1000af36:	46c0      	nop			; (mov r8, r8)
1000af38:	10008135 	.word	0x10008135

1000af3c <platform_event_free>:
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000af3c:	4b02      	ldr	r3, [pc, #8]	; (1000af48 <platform_event_free+0xc>)
1000af3e:	681a      	ldr	r2, [r3, #0]
1000af40:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000af42:	6018      	str	r0, [r3, #0]
}
1000af44:	4770      	bx	lr
1000af46:	46c0      	nop			; (mov r8, r8)
1000af48:	10012af0 	.word	0x10012af0

1000af4c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000af4c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000af4e:	4b0b      	ldr	r3, [pc, #44]	; (1000af7c <platform_event_post+0x30>)
1000af50:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000af52:	2c00      	cmp	r4, #0
1000af54:	d011      	beq.n	1000af7a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000af56:	6825      	ldr	r5, [r4, #0]
1000af58:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000af5a:	2300      	movs	r3, #0
1000af5c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000af5e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000af60:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000af62:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000af64:	4b06      	ldr	r3, [pc, #24]	; (1000af80 <platform_event_post+0x34>)
1000af66:	681a      	ldr	r2, [r3, #0]
1000af68:	2a00      	cmp	r2, #0
1000af6a:	d102      	bne.n	1000af72 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000af6c:	601c      	str	r4, [r3, #0]
1000af6e:	e004      	b.n	1000af7a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000af70:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000af72:	6813      	ldr	r3, [r2, #0]
1000af74:	2b00      	cmp	r3, #0
1000af76:	d1fb      	bne.n	1000af70 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000af78:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000af7a:	bd30      	pop	{r4, r5, pc}
1000af7c:	10012af0 	.word	0x10012af0
1000af80:	10012aec 	.word	0x10012aec

1000af84 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000af84:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000af86:	2300      	movs	r3, #0
1000af88:	4a06      	ldr	r2, [pc, #24]	; (1000afa4 <platform_event_init+0x20>)
1000af8a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000af8c:	4a06      	ldr	r2, [pc, #24]	; (1000afa8 <platform_event_init+0x24>)
1000af8e:	6013      	str	r3, [r2, #0]
1000af90:	4c06      	ldr	r4, [pc, #24]	; (1000afac <platform_event_init+0x28>)
1000af92:	0026      	movs	r6, r4
1000af94:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000af96:	4d06      	ldr	r5, [pc, #24]	; (1000afb0 <platform_event_init+0x2c>)
1000af98:	0020      	movs	r0, r4
1000af9a:	47a8      	blx	r5
1000af9c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000af9e:	42b4      	cmp	r4, r6
1000afa0:	d1fa      	bne.n	1000af98 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000afa2:	bd70      	pop	{r4, r5, r6, pc}
1000afa4:	10012af0 	.word	0x10012af0
1000afa8:	10012aec 	.word	0x10012aec
1000afac:	10012af4 	.word	0x10012af4
1000afb0:	1000af3d 	.word	0x1000af3d

1000afb4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000afb4:	b510      	push	{r4, lr}
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000afb6:	4b11      	ldr	r3, [pc, #68]	; (1000affc <at_ke_msg_send+0x48>)
1000afb8:	681c      	ldr	r4, [r3, #0]
	ke_msg_send(param_ptr);
1000afba:	4b11      	ldr	r3, [pc, #68]	; (1000b000 <at_ke_msg_send+0x4c>)
1000afbc:	681b      	ldr	r3, [r3, #0]
1000afbe:	4798      	blx	r3
	if(osc_en == 0)
1000afc0:	07e3      	lsls	r3, r4, #31
1000afc2:	d414      	bmi.n	1000afee <at_ke_msg_send+0x3a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000afc4:	4b0f      	ldr	r3, [pc, #60]	; (1000b004 <at_ke_msg_send+0x50>)
1000afc6:	681b      	ldr	r3, [r3, #0]
1000afc8:	2002      	movs	r0, #2
1000afca:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000afcc:	4b0e      	ldr	r3, [pc, #56]	; (1000b008 <at_ke_msg_send+0x54>)
1000afce:	681b      	ldr	r3, [r3, #0]
1000afd0:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000afd2:	4c0e      	ldr	r4, [pc, #56]	; (1000b00c <at_ke_msg_send+0x58>)
1000afd4:	2003      	movs	r0, #3
1000afd6:	6823      	ldr	r3, [r4, #0]
1000afd8:	4798      	blx	r3
1000afda:	2800      	cmp	r0, #0
1000afdc:	d1fa      	bne.n	1000afd4 <at_ke_msg_send+0x20>
		pwr_disable_arm_wakeup(1<<1);
1000afde:	4b0c      	ldr	r3, [pc, #48]	; (1000b010 <at_ke_msg_send+0x5c>)
1000afe0:	681b      	ldr	r3, [r3, #0]
1000afe2:	3002      	adds	r0, #2
1000afe4:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000afe6:	2201      	movs	r2, #1
1000afe8:	4b0a      	ldr	r3, [pc, #40]	; (1000b014 <at_ke_msg_send+0x60>)
1000afea:	601a      	str	r2, [r3, #0]
1000afec:	e004      	b.n	1000aff8 <at_ke_msg_send+0x44>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
1000afee:	4b0a      	ldr	r3, [pc, #40]	; (1000b018 <at_ke_msg_send+0x64>)
1000aff0:	6818      	ldr	r0, [r3, #0]
1000aff2:	4b0a      	ldr	r3, [pc, #40]	; (1000b01c <at_ke_msg_send+0x68>)
1000aff4:	681b      	ldr	r3, [r3, #0]
1000aff6:	4798      	blx	r3
	}
}
1000aff8:	bd10      	pop	{r4, pc}
1000affa:	46c0      	nop			; (mov r8, r8)
1000affc:	4000b1ec 	.word	0x4000b1ec
1000b000:	10012b98 	.word	0x10012b98
1000b004:	10012b90 	.word	0x10012b90
1000b008:	10012ba8 	.word	0x10012ba8
1000b00c:	10012b7c 	.word	0x10012b7c
1000b010:	10012b84 	.word	0x10012b84
1000b014:	4000b020 	.word	0x4000b020
1000b018:	10012b88 	.word	0x10012b88
1000b01c:	10012b78 	.word	0x10012b78

1000b020 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b020:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b022:	4b06      	ldr	r3, [pc, #24]	; (1000b03c <samb11_plf_resume_callback+0x1c>)
1000b024:	4a06      	ldr	r2, [pc, #24]	; (1000b040 <samb11_plf_resume_callback+0x20>)
1000b026:	6819      	ldr	r1, [r3, #0]
1000b028:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b02a:	685a      	ldr	r2, [r3, #4]
1000b02c:	4b05      	ldr	r3, [pc, #20]	; (1000b044 <samb11_plf_resume_callback+0x24>)
1000b02e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b030:	4b05      	ldr	r3, [pc, #20]	; (1000b048 <samb11_plf_resume_callback+0x28>)
1000b032:	681b      	ldr	r3, [r3, #0]
1000b034:	2b00      	cmp	r3, #0
1000b036:	d000      	beq.n	1000b03a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b038:	4798      	blx	r3
	}
}
1000b03a:	bd10      	pop	{r4, pc}
1000b03c:	10013610 	.word	0x10013610
1000b040:	4000b00c 	.word	0x4000b00c
1000b044:	4000b010 	.word	0x4000b010
1000b048:	100138e4 	.word	0x100138e4

1000b04c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b04c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b04e:	2232      	movs	r2, #50	; 0x32
1000b050:	2100      	movs	r1, #0
1000b052:	480f      	ldr	r0, [pc, #60]	; (1000b090 <init_port_list+0x44>)
1000b054:	4b0f      	ldr	r3, [pc, #60]	; (1000b094 <init_port_list+0x48>)
1000b056:	4798      	blx	r3
1000b058:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b05a:	480d      	ldr	r0, [pc, #52]	; (1000b090 <init_port_list+0x44>)
		port_list[i].bit.available = 1;
1000b05c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b05e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b060:	004a      	lsls	r2, r1, #1
1000b062:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b064:	1882      	adds	r2, r0, r2
1000b066:	7853      	ldrb	r3, [r2, #1]
1000b068:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b06a:	b2db      	uxtb	r3, r3
1000b06c:	43a3      	bics	r3, r4
1000b06e:	7053      	strb	r3, [r2, #1]
1000b070:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b072:	2919      	cmp	r1, #25
1000b074:	d1f4      	bne.n	1000b060 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b076:	4b06      	ldr	r3, [pc, #24]	; (1000b090 <init_port_list+0x44>)
1000b078:	785a      	ldrb	r2, [r3, #1]
1000b07a:	3918      	subs	r1, #24
1000b07c:	438a      	bics	r2, r1
1000b07e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b080:	78da      	ldrb	r2, [r3, #3]
1000b082:	438a      	bics	r2, r1
1000b084:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1000b086:	7f5a      	ldrb	r2, [r3, #29]
1000b088:	438a      	bics	r2, r1
1000b08a:	775a      	strb	r2, [r3, #29]
}
1000b08c:	bd70      	pop	{r4, r5, r6, pc}
1000b08e:	46c0      	nop			; (mov r8, r8)
1000b090:	10013628 	.word	0x10013628
1000b094:	1000ff49 	.word	0x1000ff49

1000b098 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b098:	4a06      	ldr	r2, [pc, #24]	; (1000b0b4 <init_clock+0x1c>)
1000b09a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b09c:	4b06      	ldr	r3, [pc, #24]	; (1000b0b8 <init_clock+0x20>)
1000b09e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b0a0:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b0a2:	4a06      	ldr	r2, [pc, #24]	; (1000b0bc <init_clock+0x24>)
1000b0a4:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b0a6:	4906      	ldr	r1, [pc, #24]	; (1000b0c0 <init_clock+0x28>)
1000b0a8:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b0aa:	4b06      	ldr	r3, [pc, #24]	; (1000b0c4 <init_clock+0x2c>)
1000b0ac:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b0ae:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b0b0:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b0b2:	4770      	bx	lr
1000b0b4:	4000b00c 	.word	0x4000b00c
1000b0b8:	fffe0fd3 	.word	0xfffe0fd3
1000b0bc:	10013610 	.word	0x10013610
1000b0c0:	4000b010 	.word	0x4000b010
1000b0c4:	ffffe7c0 	.word	0xffffe7c0

1000b0c8 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b0ca:	464f      	mov	r7, r9
1000b0cc:	4646      	mov	r6, r8
1000b0ce:	b4c0      	push	{r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b0d0:	4b44      	ldr	r3, [pc, #272]	; (1000b1e4 <platform_driver_init+0x11c>)
1000b0d2:	781b      	ldrb	r3, [r3, #0]
1000b0d4:	2b00      	cmp	r3, #0
1000b0d6:	d003      	beq.n	1000b0e0 <platform_driver_init+0x18>
1000b0d8:	4b42      	ldr	r3, [pc, #264]	; (1000b1e4 <platform_driver_init+0x11c>)
1000b0da:	781b      	ldrb	r3, [r3, #0]
1000b0dc:	2b01      	cmp	r3, #1
1000b0de:	d079      	beq.n	1000b1d4 <platform_driver_init+0x10c>
		init_port_list();
1000b0e0:	4b41      	ldr	r3, [pc, #260]	; (1000b1e8 <platform_driver_init+0x120>)
1000b0e2:	4798      	blx	r3
		init_clock();
1000b0e4:	4b41      	ldr	r3, [pc, #260]	; (1000b1ec <platform_driver_init+0x124>)
1000b0e6:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b0e8:	2700      	movs	r7, #0
1000b0ea:	4b41      	ldr	r3, [pc, #260]	; (1000b1f0 <platform_driver_init+0x128>)
1000b0ec:	601f      	str	r7, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b0ee:	4c41      	ldr	r4, [pc, #260]	; (1000b1f4 <platform_driver_init+0x12c>)
1000b0f0:	2380      	movs	r3, #128	; 0x80
1000b0f2:	2280      	movs	r2, #128	; 0x80
1000b0f4:	0412      	lsls	r2, r2, #16
1000b0f6:	4691      	mov	r9, r2
1000b0f8:	50e2      	str	r2, [r4, r3]
1000b0fa:	2280      	movs	r2, #128	; 0x80
1000b0fc:	0452      	lsls	r2, r2, #17
1000b0fe:	4690      	mov	r8, r2
1000b100:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b102:	4d3d      	ldr	r5, [pc, #244]	; (1000b1f8 <platform_driver_init+0x130>)
1000b104:	4b3d      	ldr	r3, [pc, #244]	; (1000b1fc <platform_driver_init+0x134>)
1000b106:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b108:	4b3d      	ldr	r3, [pc, #244]	; (1000b200 <platform_driver_init+0x138>)
1000b10a:	4a3e      	ldr	r2, [pc, #248]	; (1000b204 <platform_driver_init+0x13c>)
1000b10c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b10e:	493e      	ldr	r1, [pc, #248]	; (1000b208 <platform_driver_init+0x140>)
1000b110:	4a3e      	ldr	r2, [pc, #248]	; (1000b20c <platform_driver_init+0x144>)
1000b112:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b114:	4a3e      	ldr	r2, [pc, #248]	; (1000b210 <platform_driver_init+0x148>)
1000b116:	6811      	ldr	r1, [r2, #0]
1000b118:	4a3e      	ldr	r2, [pc, #248]	; (1000b214 <platform_driver_init+0x14c>)
1000b11a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b11c:	4a3e      	ldr	r2, [pc, #248]	; (1000b218 <platform_driver_init+0x150>)
1000b11e:	6811      	ldr	r1, [r2, #0]
1000b120:	4a3e      	ldr	r2, [pc, #248]	; (1000b21c <platform_driver_init+0x154>)
1000b122:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b124:	493e      	ldr	r1, [pc, #248]	; (1000b220 <platform_driver_init+0x158>)
1000b126:	4a3f      	ldr	r2, [pc, #252]	; (1000b224 <platform_driver_init+0x15c>)
1000b128:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b12a:	493f      	ldr	r1, [pc, #252]	; (1000b228 <platform_driver_init+0x160>)
1000b12c:	4a3f      	ldr	r2, [pc, #252]	; (1000b22c <platform_driver_init+0x164>)
1000b12e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b130:	4e3f      	ldr	r6, [pc, #252]	; (1000b230 <platform_driver_init+0x168>)
1000b132:	4a40      	ldr	r2, [pc, #256]	; (1000b234 <platform_driver_init+0x16c>)
1000b134:	6032      	str	r2, [r6, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b136:	4940      	ldr	r1, [pc, #256]	; (1000b238 <platform_driver_init+0x170>)
1000b138:	4a40      	ldr	r2, [pc, #256]	; (1000b23c <platform_driver_init+0x174>)
1000b13a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b13c:	4940      	ldr	r1, [pc, #256]	; (1000b240 <platform_driver_init+0x178>)
1000b13e:	4a41      	ldr	r2, [pc, #260]	; (1000b244 <platform_driver_init+0x17c>)
1000b140:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b142:	4941      	ldr	r1, [pc, #260]	; (1000b248 <platform_driver_init+0x180>)
1000b144:	4a41      	ldr	r2, [pc, #260]	; (1000b24c <platform_driver_init+0x184>)
1000b146:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b148:	4941      	ldr	r1, [pc, #260]	; (1000b250 <platform_driver_init+0x188>)
1000b14a:	4a42      	ldr	r2, [pc, #264]	; (1000b254 <platform_driver_init+0x18c>)
1000b14c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b14e:	4942      	ldr	r1, [pc, #264]	; (1000b258 <platform_driver_init+0x190>)
1000b150:	4a42      	ldr	r2, [pc, #264]	; (1000b25c <platform_driver_init+0x194>)
1000b152:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b154:	4942      	ldr	r1, [pc, #264]	; (1000b260 <platform_driver_init+0x198>)
1000b156:	4a43      	ldr	r2, [pc, #268]	; (1000b264 <platform_driver_init+0x19c>)
1000b158:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b15a:	2028      	movs	r0, #40	; 0x28
1000b15c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b15e:	4942      	ldr	r1, [pc, #264]	; (1000b268 <platform_driver_init+0x1a0>)
1000b160:	2028      	movs	r0, #40	; 0x28
1000b162:	682b      	ldr	r3, [r5, #0]
1000b164:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b166:	682b      	ldr	r3, [r5, #0]
1000b168:	4940      	ldr	r1, [pc, #256]	; (1000b26c <platform_driver_init+0x1a4>)
1000b16a:	2027      	movs	r0, #39	; 0x27
1000b16c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b16e:	4b40      	ldr	r3, [pc, #256]	; (1000b270 <platform_driver_init+0x1a8>)
1000b170:	681a      	ldr	r2, [r3, #0]
1000b172:	4b40      	ldr	r3, [pc, #256]	; (1000b274 <platform_driver_init+0x1ac>)
1000b174:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b176:	4a40      	ldr	r2, [pc, #256]	; (1000b278 <platform_driver_init+0x1b0>)
1000b178:	4b40      	ldr	r3, [pc, #256]	; (1000b27c <platform_driver_init+0x1b4>)
1000b17a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b17c:	4a40      	ldr	r2, [pc, #256]	; (1000b280 <platform_driver_init+0x1b8>)
1000b17e:	4b41      	ldr	r3, [pc, #260]	; (1000b284 <platform_driver_init+0x1bc>)
1000b180:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b182:	4a41      	ldr	r2, [pc, #260]	; (1000b288 <platform_driver_init+0x1c0>)
1000b184:	4b41      	ldr	r3, [pc, #260]	; (1000b28c <platform_driver_init+0x1c4>)
1000b186:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b188:	4a41      	ldr	r2, [pc, #260]	; (1000b290 <platform_driver_init+0x1c8>)
1000b18a:	4b42      	ldr	r3, [pc, #264]	; (1000b294 <platform_driver_init+0x1cc>)
1000b18c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b18e:	4a42      	ldr	r2, [pc, #264]	; (1000b298 <platform_driver_init+0x1d0>)
1000b190:	4b42      	ldr	r3, [pc, #264]	; (1000b29c <platform_driver_init+0x1d4>)
1000b192:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b194:	4a42      	ldr	r2, [pc, #264]	; (1000b2a0 <platform_driver_init+0x1d8>)
1000b196:	4b43      	ldr	r3, [pc, #268]	; (1000b2a4 <platform_driver_init+0x1dc>)
1000b198:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b19a:	4a43      	ldr	r2, [pc, #268]	; (1000b2a8 <platform_driver_init+0x1e0>)
1000b19c:	4b43      	ldr	r3, [pc, #268]	; (1000b2ac <platform_driver_init+0x1e4>)
1000b19e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b1a0:	22a0      	movs	r2, #160	; 0xa0
1000b1a2:	0092      	lsls	r2, r2, #2
1000b1a4:	2100      	movs	r1, #0
1000b1a6:	4842      	ldr	r0, [pc, #264]	; (1000b2b0 <platform_driver_init+0x1e8>)
1000b1a8:	4b42      	ldr	r3, [pc, #264]	; (1000b2b4 <platform_driver_init+0x1ec>)
1000b1aa:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b1ac:	2280      	movs	r2, #128	; 0x80
1000b1ae:	0092      	lsls	r2, r2, #2
1000b1b0:	4b41      	ldr	r3, [pc, #260]	; (1000b2b8 <platform_driver_init+0x1f0>)
1000b1b2:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b1b4:	4b41      	ldr	r3, [pc, #260]	; (1000b2bc <platform_driver_init+0x1f4>)
1000b1b6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b1b8:	464b      	mov	r3, r9
1000b1ba:	6023      	str	r3, [r4, #0]
1000b1bc:	4643      	mov	r3, r8
1000b1be:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b1c0:	4b3f      	ldr	r3, [pc, #252]	; (1000b2c0 <platform_driver_init+0x1f8>)
1000b1c2:	601f      	str	r7, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b1c4:	6833      	ldr	r3, [r6, #0]
1000b1c6:	4a3f      	ldr	r2, [pc, #252]	; (1000b2c4 <platform_driver_init+0x1fc>)
1000b1c8:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1000b1ca:	2201      	movs	r2, #1
1000b1cc:	4b05      	ldr	r3, [pc, #20]	; (1000b1e4 <platform_driver_init+0x11c>)
1000b1ce:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b1d0:	2000      	movs	r0, #0
1000b1d2:	e003      	b.n	1000b1dc <platform_driver_init+0x114>
	}
	else {
		platform_initialized = 1;
1000b1d4:	2201      	movs	r2, #1
1000b1d6:	4b03      	ldr	r3, [pc, #12]	; (1000b1e4 <platform_driver_init+0x11c>)
1000b1d8:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b1da:	2001      	movs	r0, #1
	}
	return status;
}
1000b1dc:	bc0c      	pop	{r2, r3}
1000b1de:	4690      	mov	r8, r2
1000b1e0:	4699      	mov	r9, r3
1000b1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b1e4:	10012b80 	.word	0x10012b80
1000b1e8:	1000b04d 	.word	0x1000b04d
1000b1ec:	1000b099 	.word	0x1000b099
1000b1f0:	10012ba4 	.word	0x10012ba4
1000b1f4:	e000e100 	.word	0xe000e100
1000b1f8:	100138dc 	.word	0x100138dc
1000b1fc:	000007d7 	.word	0x000007d7
1000b200:	000007bd 	.word	0x000007bd
1000b204:	1001361c 	.word	0x1001361c
1000b208:	0001bc51 	.word	0x0001bc51
1000b20c:	100138e0 	.word	0x100138e0
1000b210:	100400bc 	.word	0x100400bc
1000b214:	10012b74 	.word	0x10012b74
1000b218:	100400b8 	.word	0x100400b8
1000b21c:	10012b70 	.word	0x10012b70
1000b220:	0001b99f 	.word	0x0001b99f
1000b224:	10013618 	.word	0x10013618
1000b228:	0001b9db 	.word	0x0001b9db
1000b22c:	10013620 	.word	0x10013620
1000b230:	100138ec 	.word	0x100138ec
1000b234:	1004003c 	.word	0x1004003c
1000b238:	10041fc0 	.word	0x10041fc0
1000b23c:	10013624 	.word	0x10013624
1000b240:	10041fc4 	.word	0x10041fc4
1000b244:	100138e8 	.word	0x100138e8
1000b248:	0001cbe9 	.word	0x0001cbe9
1000b24c:	10012b90 	.word	0x10012b90
1000b250:	0001cd8f 	.word	0x0001cd8f
1000b254:	10012b84 	.word	0x10012b84
1000b258:	0001cea3 	.word	0x0001cea3
1000b25c:	10012ba8 	.word	0x10012ba8
1000b260:	0001cbcf 	.word	0x0001cbcf
1000b264:	10012b7c 	.word	0x10012b7c
1000b268:	1000b6e5 	.word	0x1000b6e5
1000b26c:	1000b679 	.word	0x1000b679
1000b270:	100400e4 	.word	0x100400e4
1000b274:	10012b98 	.word	0x10012b98
1000b278:	00019fe9 	.word	0x00019fe9
1000b27c:	10012bac 	.word	0x10012bac
1000b280:	0001dbdd 	.word	0x0001dbdd
1000b284:	10012b78 	.word	0x10012b78
1000b288:	0001dc5b 	.word	0x0001dc5b
1000b28c:	10012b8c 	.word	0x10012b8c
1000b290:	100405ec 	.word	0x100405ec
1000b294:	10012b88 	.word	0x10012b88
1000b298:	0001d5e3 	.word	0x0001d5e3
1000b29c:	10012b94 	.word	0x10012b94
1000b2a0:	10040c20 	.word	0x10040c20
1000b2a4:	10012bb0 	.word	0x10012bb0
1000b2a8:	00019f09 	.word	0x00019f09
1000b2ac:	10012b6c 	.word	0x10012b6c
1000b2b0:	1001365c 	.word	0x1001365c
1000b2b4:	1000ff49 	.word	0x1000ff49
1000b2b8:	100138f0 	.word	0x100138f0
1000b2bc:	1000af85 	.word	0x1000af85
1000b2c0:	100138e4 	.word	0x100138e4
1000b2c4:	1000b021 	.word	0x1000b021

1000b2c8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b2c8:	4b04      	ldr	r3, [pc, #16]	; (1000b2dc <platform_register_ble_msg_handler+0x14>)
1000b2ca:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b2cc:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b2ce:	2a01      	cmp	r2, #1
1000b2d0:	d102      	bne.n	1000b2d8 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b2d2:	4b03      	ldr	r3, [pc, #12]	; (1000b2e0 <platform_register_ble_msg_handler+0x18>)
1000b2d4:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b2d6:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b2d8:	0018      	movs	r0, r3
1000b2da:	4770      	bx	lr
1000b2dc:	10012b80 	.word	0x10012b80
1000b2e0:	10012ba4 	.word	0x10012ba4

1000b2e4 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b2e4:	b570      	push	{r4, r5, r6, lr}
1000b2e6:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b2e8:	4b0e      	ldr	r3, [pc, #56]	; (1000b324 <platform_interface_send+0x40>)
1000b2ea:	681b      	ldr	r3, [r3, #0]
1000b2ec:	2b00      	cmp	r3, #0
1000b2ee:	d002      	beq.n	1000b2f6 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b2f0:	8840      	ldrh	r0, [r0, #2]
1000b2f2:	4798      	blx	r3
1000b2f4:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b2f6:	88e3      	ldrh	r3, [r4, #6]
1000b2f8:	88a2      	ldrh	r2, [r4, #4]
1000b2fa:	8861      	ldrh	r1, [r4, #2]
1000b2fc:	8820      	ldrh	r0, [r4, #0]
1000b2fe:	4d0a      	ldr	r5, [pc, #40]	; (1000b328 <platform_interface_send+0x44>)
1000b300:	682d      	ldr	r5, [r5, #0]
1000b302:	47a8      	blx	r5
1000b304:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b306:	88e2      	ldrh	r2, [r4, #6]
1000b308:	2a00      	cmp	r2, #0
1000b30a:	d102      	bne.n	1000b312 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b30c:	4b07      	ldr	r3, [pc, #28]	; (1000b32c <platform_interface_send+0x48>)
1000b30e:	4798      	blx	r3
1000b310:	e006      	b.n	1000b320 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b312:	0021      	movs	r1, r4
1000b314:	3108      	adds	r1, #8
1000b316:	4b06      	ldr	r3, [pc, #24]	; (1000b330 <platform_interface_send+0x4c>)
1000b318:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b31a:	0028      	movs	r0, r5
1000b31c:	4b03      	ldr	r3, [pc, #12]	; (1000b32c <platform_interface_send+0x48>)
1000b31e:	4798      	blx	r3
	}
}
1000b320:	bd70      	pop	{r4, r5, r6, pc}
1000b322:	46c0      	nop			; (mov r8, r8)
1000b324:	10012b74 	.word	0x10012b74
1000b328:	10012bac 	.word	0x10012bac
1000b32c:	1000afb5 	.word	0x1000afb5
1000b330:	1000ff37 	.word	0x1000ff37

1000b334 <platform_event_wait>:
	
	platform_interface_send(msg, u16TxLen);
}

plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b334:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b336:	465f      	mov	r7, fp
1000b338:	4656      	mov	r6, sl
1000b33a:	464d      	mov	r5, r9
1000b33c:	4644      	mov	r4, r8
1000b33e:	b4f0      	push	{r4, r5, r6, r7}
1000b340:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b342:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b344:	2300      	movs	r3, #0
1000b346:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b348:	1ce3      	adds	r3, r4, #3
1000b34a:	d81c      	bhi.n	1000b386 <platform_event_wait+0x52>
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b34c:	220d      	movs	r2, #13
1000b34e:	2100      	movs	r1, #0
1000b350:	a802      	add	r0, sp, #8
1000b352:	4b82      	ldr	r3, [pc, #520]	; (1000b55c <platform_event_wait+0x228>)
1000b354:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b356:	2319      	movs	r3, #25
1000b358:	aa02      	add	r2, sp, #8
1000b35a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b35c:	3b16      	subs	r3, #22
1000b35e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b360:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b362:	3302      	adds	r3, #2
1000b364:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b366:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b368:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b36a:	0a23      	lsrs	r3, r4, #8
1000b36c:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b36e:	0c23      	lsrs	r3, r4, #16
1000b370:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b372:	0e24      	lsrs	r4, r4, #24
1000b374:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b376:	2301      	movs	r3, #1
1000b378:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b37a:	210d      	movs	r1, #13
1000b37c:	0010      	movs	r0, r2
1000b37e:	4b78      	ldr	r3, [pc, #480]	; (1000b560 <platform_event_wait+0x22c>)
1000b380:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b382:	2301      	movs	r3, #1
1000b384:	4699      	mov	r9, r3
1000b386:	2400      	movs	r4, #0
1000b388:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b38a:	4f76      	ldr	r7, [pc, #472]	; (1000b564 <platform_event_wait+0x230>)
1000b38c:	4e76      	ldr	r6, [pc, #472]	; (1000b568 <platform_event_wait+0x234>)
1000b38e:	4977      	ldr	r1, [pc, #476]	; (1000b56c <platform_event_wait+0x238>)
1000b390:	6838      	ldr	r0, [r7, #0]
1000b392:	6833      	ldr	r3, [r6, #0]
1000b394:	4798      	blx	r3
1000b396:	2800      	cmp	r0, #0
1000b398:	d000      	beq.n	1000b39c <platform_event_wait+0x68>
1000b39a:	e088      	b.n	1000b4ae <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b39c:	4b73      	ldr	r3, [pc, #460]	; (1000b56c <platform_event_wait+0x238>)
1000b39e:	681c      	ldr	r4, [r3, #0]
1000b3a0:	88a3      	ldrh	r3, [r4, #4]
1000b3a2:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b3a4:	23cd      	movs	r3, #205	; 0xcd
1000b3a6:	009b      	lsls	r3, r3, #2
1000b3a8:	459a      	cmp	sl, r3
1000b3aa:	d100      	bne.n	1000b3ae <platform_event_wait+0x7a>
1000b3ac:	e0c7      	b.n	1000b53e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b3ae:	8923      	ldrh	r3, [r4, #8]
1000b3b0:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b3b2:	8963      	ldrh	r3, [r4, #10]
1000b3b4:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b3b6:	464b      	mov	r3, r9
1000b3b8:	2b00      	cmp	r3, #0
1000b3ba:	d011      	beq.n	1000b3e0 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b3bc:	220d      	movs	r2, #13
1000b3be:	2100      	movs	r1, #0
1000b3c0:	a802      	add	r0, sp, #8
1000b3c2:	4b66      	ldr	r3, [pc, #408]	; (1000b55c <platform_event_wait+0x228>)
1000b3c4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b3c6:	2319      	movs	r3, #25
1000b3c8:	aa02      	add	r2, sp, #8
1000b3ca:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b3cc:	3b16      	subs	r3, #22
1000b3ce:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b3d0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b3d2:	3302      	adds	r3, #2
1000b3d4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b3d6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b3d8:	210d      	movs	r1, #13
1000b3da:	0010      	movs	r0, r2
1000b3dc:	4b60      	ldr	r3, [pc, #384]	; (1000b560 <platform_event_wait+0x22c>)
1000b3de:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b3e0:	23a0      	movs	r3, #160	; 0xa0
1000b3e2:	00db      	lsls	r3, r3, #3
1000b3e4:	459a      	cmp	sl, r3
1000b3e6:	d121      	bne.n	1000b42c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b3e8:	4b61      	ldr	r3, [pc, #388]	; (1000b570 <platform_event_wait+0x23c>)
1000b3ea:	881b      	ldrh	r3, [r3, #0]
1000b3ec:	4443      	add	r3, r8
1000b3ee:	22a0      	movs	r2, #160	; 0xa0
1000b3f0:	0092      	lsls	r2, r2, #2
1000b3f2:	4293      	cmp	r3, r2
1000b3f4:	dd02      	ble.n	1000b3fc <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b3f6:	3a80      	subs	r2, #128	; 0x80
1000b3f8:	4b5d      	ldr	r3, [pc, #372]	; (1000b570 <platform_event_wait+0x23c>)
1000b3fa:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b3fc:	4b5c      	ldr	r3, [pc, #368]	; (1000b570 <platform_event_wait+0x23c>)
1000b3fe:	469a      	mov	sl, r3
1000b400:	881d      	ldrh	r5, [r3, #0]
1000b402:	4b5c      	ldr	r3, [pc, #368]	; (1000b574 <platform_event_wait+0x240>)
1000b404:	18ed      	adds	r5, r5, r3
1000b406:	0021      	movs	r1, r4
1000b408:	310c      	adds	r1, #12
1000b40a:	4642      	mov	r2, r8
1000b40c:	0028      	movs	r0, r5
1000b40e:	4b5a      	ldr	r3, [pc, #360]	; (1000b578 <platform_event_wait+0x244>)
1000b410:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b412:	4642      	mov	r2, r8
1000b414:	0029      	movs	r1, r5
1000b416:	4658      	mov	r0, fp
1000b418:	4b58      	ldr	r3, [pc, #352]	; (1000b57c <platform_event_wait+0x248>)
1000b41a:	4798      	blx	r3
				plf_event_buff_index += len;
1000b41c:	4653      	mov	r3, sl
1000b41e:	881b      	ldrh	r3, [r3, #0]
1000b420:	4443      	add	r3, r8
1000b422:	4652      	mov	r2, sl
1000b424:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b426:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b428:	2502      	movs	r5, #2
1000b42a:	e03a      	b.n	1000b4a2 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b42c:	4b54      	ldr	r3, [pc, #336]	; (1000b580 <platform_event_wait+0x24c>)
1000b42e:	681b      	ldr	r3, [r3, #0]
1000b430:	2b00      	cmp	r3, #0
1000b432:	d032      	beq.n	1000b49a <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b434:	4b4d      	ldr	r3, [pc, #308]	; (1000b56c <platform_event_wait+0x238>)
1000b436:	681a      	ldr	r2, [r3, #0]
1000b438:	8893      	ldrh	r3, [r2, #4]
1000b43a:	21cd      	movs	r1, #205	; 0xcd
1000b43c:	0089      	lsls	r1, r1, #2
1000b43e:	428b      	cmp	r3, r1
1000b440:	d104      	bne.n	1000b44c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b442:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b444:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b446:	2b00      	cmp	r3, #0
1000b448:	d02b      	beq.n	1000b4a2 <platform_event_wait+0x16e>
1000b44a:	e028      	b.n	1000b49e <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b44c:	4c4d      	ldr	r4, [pc, #308]	; (1000b584 <platform_event_wait+0x250>)
1000b44e:	4d49      	ldr	r5, [pc, #292]	; (1000b574 <platform_event_wait+0x240>)
1000b450:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b452:	702b      	strb	r3, [r5, #0]
1000b454:	0a1b      	lsrs	r3, r3, #8
1000b456:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b458:	8910      	ldrh	r0, [r2, #8]
1000b45a:	4b4b      	ldr	r3, [pc, #300]	; (1000b588 <platform_event_wait+0x254>)
1000b45c:	681b      	ldr	r3, [r3, #0]
1000b45e:	4798      	blx	r3
1000b460:	7128      	strb	r0, [r5, #4]
1000b462:	0a00      	lsrs	r0, r0, #8
1000b464:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b466:	6820      	ldr	r0, [r4, #0]
1000b468:	4b40      	ldr	r3, [pc, #256]	; (1000b56c <platform_event_wait+0x238>)
1000b46a:	681a      	ldr	r2, [r3, #0]
1000b46c:	88d2      	ldrh	r2, [r2, #6]
1000b46e:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b470:	681d      	ldr	r5, [r3, #0]
1000b472:	896b      	ldrh	r3, [r5, #10]
1000b474:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b476:	3008      	adds	r0, #8
1000b478:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b47a:	896a      	ldrh	r2, [r5, #10]
1000b47c:	2a00      	cmp	r2, #0
1000b47e:	d003      	beq.n	1000b488 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b480:	0029      	movs	r1, r5
1000b482:	310c      	adds	r1, #12
1000b484:	4b3c      	ldr	r3, [pc, #240]	; (1000b578 <platform_event_wait+0x244>)
1000b486:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b488:	8969      	ldrh	r1, [r5, #10]
1000b48a:	3108      	adds	r1, #8
1000b48c:	4b3c      	ldr	r3, [pc, #240]	; (1000b580 <platform_event_wait+0x24c>)
1000b48e:	681b      	ldr	r3, [r3, #0]
1000b490:	4838      	ldr	r0, [pc, #224]	; (1000b574 <platform_event_wait+0x240>)
1000b492:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b494:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b496:	2503      	movs	r5, #3
1000b498:	e003      	b.n	1000b4a2 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b49a:	2400      	movs	r4, #0
1000b49c:	e001      	b.n	1000b4a2 <platform_event_wait+0x16e>
1000b49e:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b4a0:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b4a2:	4b32      	ldr	r3, [pc, #200]	; (1000b56c <platform_event_wait+0x238>)
1000b4a4:	6818      	ldr	r0, [r3, #0]
1000b4a6:	4b39      	ldr	r3, [pc, #228]	; (1000b58c <platform_event_wait+0x258>)
1000b4a8:	681b      	ldr	r3, [r3, #0]
1000b4aa:	4798      	blx	r3
1000b4ac:	e000      	b.n	1000b4b0 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b4ae:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b4b0:	2c00      	cmp	r4, #0
1000b4b2:	d000      	beq.n	1000b4b6 <platform_event_wait+0x182>
1000b4b4:	e76b      	b.n	1000b38e <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b4b6:	464b      	mov	r3, r9
1000b4b8:	2b00      	cmp	r3, #0
1000b4ba:	d046      	beq.n	1000b54a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b4bc:	4b29      	ldr	r3, [pc, #164]	; (1000b564 <platform_event_wait+0x230>)
1000b4be:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b4c0:	2e00      	cmp	r6, #0
1000b4c2:	d104      	bne.n	1000b4ce <platform_event_wait+0x19a>
1000b4c4:	2300      	movs	r3, #0
1000b4c6:	6a1c      	ldr	r4, [r3, #32]
1000b4c8:	2c00      	cmp	r4, #0
1000b4ca:	d131      	bne.n	1000b530 <platform_event_wait+0x1fc>
1000b4cc:	e03d      	b.n	1000b54a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b4ce:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b4d0:	2314      	movs	r3, #20
1000b4d2:	469c      	mov	ip, r3
1000b4d4:	44b4      	add	ip, r6
1000b4d6:	4663      	mov	r3, ip
1000b4d8:	4660      	mov	r0, ip
1000b4da:	9300      	str	r3, [sp, #0]
1000b4dc:	4b2c      	ldr	r3, [pc, #176]	; (1000b590 <platform_event_wait+0x25c>)
1000b4de:	681b      	ldr	r3, [r3, #0]
1000b4e0:	4798      	blx	r3
	while(NULL != current)
1000b4e2:	2c00      	cmp	r4, #0
1000b4e4:	d01f      	beq.n	1000b526 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b4e6:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b4e8:	23cd      	movs	r3, #205	; 0xcd
1000b4ea:	009b      	lsls	r3, r3, #2
1000b4ec:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b4ee:	4b27      	ldr	r3, [pc, #156]	; (1000b58c <platform_event_wait+0x258>)
1000b4f0:	469a      	mov	sl, r3
1000b4f2:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b4f4:	6803      	ldr	r3, [r0, #0]
1000b4f6:	889b      	ldrh	r3, [r3, #4]
1000b4f8:	4543      	cmp	r3, r8
1000b4fa:	d110      	bne.n	1000b51e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b4fc:	2f00      	cmp	r7, #0
1000b4fe:	d006      	beq.n	1000b50e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b500:	6883      	ldr	r3, [r0, #8]
1000b502:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b504:	4653      	mov	r3, sl
1000b506:	681b      	ldr	r3, [r3, #0]
1000b508:	4798      	blx	r3
				current = prev->pstrNext;
1000b50a:	68b8      	ldr	r0, [r7, #8]
1000b50c:	e009      	b.n	1000b522 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b50e:	6883      	ldr	r3, [r0, #8]
1000b510:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b512:	4b1e      	ldr	r3, [pc, #120]	; (1000b58c <platform_event_wait+0x258>)
1000b514:	681b      	ldr	r3, [r3, #0]
1000b516:	9301      	str	r3, [sp, #4]
1000b518:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b51a:	6a30      	ldr	r0, [r6, #32]
1000b51c:	e001      	b.n	1000b522 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b51e:	0007      	movs	r7, r0
1000b520:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b522:	2800      	cmp	r0, #0
1000b524:	d1e6      	bne.n	1000b4f4 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b526:	4b1b      	ldr	r3, [pc, #108]	; (1000b594 <platform_event_wait+0x260>)
1000b528:	681b      	ldr	r3, [r3, #0]
1000b52a:	9800      	ldr	r0, [sp, #0]
1000b52c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b52e:	e00c      	b.n	1000b54a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b530:	2314      	movs	r3, #20
1000b532:	9300      	str	r3, [sp, #0]
1000b534:	4b16      	ldr	r3, [pc, #88]	; (1000b590 <platform_event_wait+0x25c>)
1000b536:	681b      	ldr	r3, [r3, #0]
1000b538:	2014      	movs	r0, #20
1000b53a:	4798      	blx	r3
1000b53c:	e7d3      	b.n	1000b4e6 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b53e:	4b10      	ldr	r3, [pc, #64]	; (1000b580 <platform_event_wait+0x24c>)
1000b540:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b542:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b544:	2b00      	cmp	r3, #0
1000b546:	d0ac      	beq.n	1000b4a2 <platform_event_wait+0x16e>
1000b548:	e77b      	b.n	1000b442 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b54a:	0028      	movs	r0, r5
1000b54c:	b007      	add	sp, #28
1000b54e:	bc3c      	pop	{r2, r3, r4, r5}
1000b550:	4690      	mov	r8, r2
1000b552:	4699      	mov	r9, r3
1000b554:	46a2      	mov	sl, r4
1000b556:	46ab      	mov	fp, r5
1000b558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b55a:	46c0      	nop			; (mov r8, r8)
1000b55c:	1000ff49 	.word	0x1000ff49
1000b560:	1000b2e5 	.word	0x1000b2e5
1000b564:	10012bb0 	.word	0x10012bb0
1000b568:	10012b94 	.word	0x10012b94
1000b56c:	10012ba0 	.word	0x10012ba0
1000b570:	100138f0 	.word	0x100138f0
1000b574:	1001365c 	.word	0x1001365c
1000b578:	1000ff37 	.word	0x1000ff37
1000b57c:	1000af4d 	.word	0x1000af4d
1000b580:	10012ba4 	.word	0x10012ba4
1000b584:	10012b9c 	.word	0x10012b9c
1000b588:	10012b70 	.word	0x10012b70
1000b58c:	10012b6c 	.word	0x10012b6c
1000b590:	10012b8c 	.word	0x10012b8c
1000b594:	10012b78 	.word	0x10012b78

1000b598 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b598:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b59a:	4b12      	ldr	r3, [pc, #72]	; (1000b5e4 <acquire_sleep_lock+0x4c>)
1000b59c:	681c      	ldr	r4, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b59e:	4b12      	ldr	r3, [pc, #72]	; (1000b5e8 <acquire_sleep_lock+0x50>)
1000b5a0:	681b      	ldr	r3, [r3, #0]
1000b5a2:	2080      	movs	r0, #128	; 0x80
1000b5a4:	0200      	lsls	r0, r0, #8
1000b5a6:	4798      	blx	r3
	if(osc_en == 0)
1000b5a8:	07e3      	lsls	r3, r4, #31
1000b5aa:	d414      	bmi.n	1000b5d6 <acquire_sleep_lock+0x3e>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000b5ac:	4b0f      	ldr	r3, [pc, #60]	; (1000b5ec <acquire_sleep_lock+0x54>)
1000b5ae:	681b      	ldr	r3, [r3, #0]
1000b5b0:	2002      	movs	r0, #2
1000b5b2:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000b5b4:	4b0e      	ldr	r3, [pc, #56]	; (1000b5f0 <acquire_sleep_lock+0x58>)
1000b5b6:	681b      	ldr	r3, [r3, #0]
1000b5b8:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000b5ba:	4c0e      	ldr	r4, [pc, #56]	; (1000b5f4 <acquire_sleep_lock+0x5c>)
1000b5bc:	2003      	movs	r0, #3
1000b5be:	6823      	ldr	r3, [r4, #0]
1000b5c0:	4798      	blx	r3
1000b5c2:	2800      	cmp	r0, #0
1000b5c4:	d1fa      	bne.n	1000b5bc <acquire_sleep_lock+0x24>
		pwr_disable_arm_wakeup(1<<1);
1000b5c6:	4b0c      	ldr	r3, [pc, #48]	; (1000b5f8 <acquire_sleep_lock+0x60>)
1000b5c8:	681b      	ldr	r3, [r3, #0]
1000b5ca:	3002      	adds	r0, #2
1000b5cc:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000b5ce:	2201      	movs	r2, #1
1000b5d0:	4b0a      	ldr	r3, [pc, #40]	; (1000b5fc <acquire_sleep_lock+0x64>)
1000b5d2:	601a      	str	r2, [r3, #0]
1000b5d4:	e004      	b.n	1000b5e0 <acquire_sleep_lock+0x48>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
1000b5d6:	4b0a      	ldr	r3, [pc, #40]	; (1000b600 <acquire_sleep_lock+0x68>)
1000b5d8:	6818      	ldr	r0, [r3, #0]
1000b5da:	4b0a      	ldr	r3, [pc, #40]	; (1000b604 <acquire_sleep_lock+0x6c>)
1000b5dc:	681b      	ldr	r3, [r3, #0]
1000b5de:	4798      	blx	r3
	}
	return status;
}
1000b5e0:	2008      	movs	r0, #8
1000b5e2:	bd10      	pop	{r4, pc}
1000b5e4:	4000b1ec 	.word	0x4000b1ec
1000b5e8:	10013618 	.word	0x10013618
1000b5ec:	10012b90 	.word	0x10012b90
1000b5f0:	10012ba8 	.word	0x10012ba8
1000b5f4:	10012b7c 	.word	0x10012b7c
1000b5f8:	10012b84 	.word	0x10012b84
1000b5fc:	4000b020 	.word	0x4000b020
1000b600:	10012b88 	.word	0x10012b88
1000b604:	10012b78 	.word	0x10012b78

1000b608 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
1000b608:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b60a:	4a18      	ldr	r2, [pc, #96]	; (1000b66c <gpio1_combined_isr_handler+0x64>)
1000b60c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b60e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b610:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b612:	2180      	movs	r1, #128	; 0x80
1000b614:	0209      	lsls	r1, r1, #8
1000b616:	4301      	orrs	r1, r0
1000b618:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b61a:	0010      	movs	r0, r2
1000b61c:	4d14      	ldr	r5, [pc, #80]	; (1000b670 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b61e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b620:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b622:	05db      	lsls	r3, r3, #23
1000b624:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b626:	d011      	beq.n	1000b64c <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b628:	b2db      	uxtb	r3, r3
1000b62a:	4259      	negs	r1, r3
1000b62c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b62e:	2b01      	cmp	r3, #1
1000b630:	d006      	beq.n	1000b640 <gpio1_combined_isr_handler+0x38>
1000b632:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b634:	085b      	lsrs	r3, r3, #1
				index++;
1000b636:	3101      	adds	r1, #1
1000b638:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b63a:	2b01      	cmp	r3, #1
1000b63c:	d1fa      	bne.n	1000b634 <gpio1_combined_isr_handler+0x2c>
1000b63e:	e000      	b.n	1000b642 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b640:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b642:	0023      	movs	r3, r4
1000b644:	408b      	lsls	r3, r1
1000b646:	b29b      	uxth	r3, r3
1000b648:	8703      	strh	r3, [r0, #56]	; 0x38
1000b64a:	e003      	b.n	1000b654 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b64c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b64e:	432b      	orrs	r3, r5
1000b650:	b29b      	uxth	r3, r3
1000b652:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b654:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b656:	05db      	lsls	r3, r3, #23
1000b658:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b65a:	d1e2      	bne.n	1000b622 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b65c:	2180      	movs	r1, #128	; 0x80
1000b65e:	0049      	lsls	r1, r1, #1
1000b660:	3381      	adds	r3, #129	; 0x81
1000b662:	33ff      	adds	r3, #255	; 0xff
1000b664:	4a03      	ldr	r2, [pc, #12]	; (1000b674 <gpio1_combined_isr_handler+0x6c>)
1000b666:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b668:	bd30      	pop	{r4, r5, pc}
1000b66a:	46c0      	nop			; (mov r8, r8)
1000b66c:	40011000 	.word	0x40011000
1000b670:	ffff8000 	.word	0xffff8000
1000b674:	e000e100 	.word	0xe000e100

1000b678 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b678:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b67a:	4a17      	ldr	r2, [pc, #92]	; (1000b6d8 <gpio0_combined_isr_handler+0x60>)
1000b67c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b67e:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b680:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b682:	2180      	movs	r1, #128	; 0x80
1000b684:	0209      	lsls	r1, r1, #8
1000b686:	4301      	orrs	r1, r0
1000b688:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b68a:	0010      	movs	r0, r2
1000b68c:	4d13      	ldr	r5, [pc, #76]	; (1000b6dc <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b68e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b690:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b692:	05db      	lsls	r3, r3, #23
1000b694:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b696:	d011      	beq.n	1000b6bc <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b698:	b2db      	uxtb	r3, r3
1000b69a:	4259      	negs	r1, r3
1000b69c:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b69e:	2b01      	cmp	r3, #1
1000b6a0:	d006      	beq.n	1000b6b0 <gpio0_combined_isr_handler+0x38>
1000b6a2:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b6a4:	085b      	lsrs	r3, r3, #1
				index++;
1000b6a6:	3101      	adds	r1, #1
1000b6a8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b6aa:	2b01      	cmp	r3, #1
1000b6ac:	d1fa      	bne.n	1000b6a4 <gpio0_combined_isr_handler+0x2c>
1000b6ae:	e000      	b.n	1000b6b2 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b6b0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b6b2:	0023      	movs	r3, r4
1000b6b4:	408b      	lsls	r3, r1
1000b6b6:	b29b      	uxth	r3, r3
1000b6b8:	8703      	strh	r3, [r0, #56]	; 0x38
1000b6ba:	e003      	b.n	1000b6c4 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b6bc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b6be:	432b      	orrs	r3, r5
1000b6c0:	b29b      	uxth	r3, r3
1000b6c2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b6c4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b6c6:	05db      	lsls	r3, r3, #23
1000b6c8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b6ca:	d1e2      	bne.n	1000b692 <gpio0_combined_isr_handler+0x1a>
1000b6cc:	2180      	movs	r1, #128	; 0x80
1000b6ce:	3381      	adds	r3, #129	; 0x81
1000b6d0:	33ff      	adds	r3, #255	; 0xff
1000b6d2:	4a03      	ldr	r2, [pc, #12]	; (1000b6e0 <gpio0_combined_isr_handler+0x68>)
1000b6d4:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b6d6:	bd30      	pop	{r4, r5, pc}
1000b6d8:	40010000 	.word	0x40010000
1000b6dc:	ffff8000 	.word	0xffff8000
1000b6e0:	e000e100 	.word	0xe000e100

1000b6e4 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b6e4:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b6e6:	4b0c      	ldr	r3, [pc, #48]	; (1000b718 <PORT1_COMB_Handler+0x34>)
1000b6e8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b6ea:	0b5b      	lsrs	r3, r3, #13
1000b6ec:	d010      	beq.n	1000b710 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b6ee:	4b0b      	ldr	r3, [pc, #44]	; (1000b71c <PORT1_COMB_Handler+0x38>)
1000b6f0:	681b      	ldr	r3, [r3, #0]
1000b6f2:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b6f4:	4a08      	ldr	r2, [pc, #32]	; (1000b718 <PORT1_COMB_Handler+0x34>)
1000b6f6:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b6f8:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b6fa:	0b5b      	lsrs	r3, r3, #13
1000b6fc:	035b      	lsls	r3, r3, #13
1000b6fe:	430b      	orrs	r3, r1
1000b700:	8713      	strh	r3, [r2, #56]	; 0x38
1000b702:	2180      	movs	r1, #128	; 0x80
1000b704:	0049      	lsls	r1, r1, #1
1000b706:	23c0      	movs	r3, #192	; 0xc0
1000b708:	005b      	lsls	r3, r3, #1
1000b70a:	4a05      	ldr	r2, [pc, #20]	; (1000b720 <PORT1_COMB_Handler+0x3c>)
1000b70c:	50d1      	str	r1, [r2, r3]
1000b70e:	e001      	b.n	1000b714 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b710:	4b04      	ldr	r3, [pc, #16]	; (1000b724 <PORT1_COMB_Handler+0x40>)
1000b712:	4798      	blx	r3
	}
}
1000b714:	bd10      	pop	{r4, pc}
1000b716:	46c0      	nop			; (mov r8, r8)
1000b718:	40011000 	.word	0x40011000
1000b71c:	100138e0 	.word	0x100138e0
1000b720:	e000e100 	.word	0xe000e100
1000b724:	1000b609 	.word	0x1000b609

1000b728 <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *params)
{
    ALL_UNUSED(params);
    app_state = SMS_DISCONNECTED;
1000b728:	2203      	movs	r2, #3
1000b72a:	4b02      	ldr	r3, [pc, #8]	; (1000b734 <ble_disconnected_app_event+0xc>)
1000b72c:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
}
1000b72e:	2000      	movs	r0, #0
1000b730:	4770      	bx	lr
1000b732:	46c0      	nop			; (mov r8, r8)
1000b734:	1001393c 	.word	0x1001393c

1000b738 <timer_callback_fn>:


/* timer callback function */
static void timer_callback_fn(void)
{
    app_state = SMS_INT_TIMER1;
1000b738:	2206      	movs	r2, #6
1000b73a:	4b01      	ldr	r3, [pc, #4]	; (1000b740 <timer_callback_fn+0x8>)
1000b73c:	701a      	strb	r2, [r3, #0]
    /* Add timer callback functionality here */
}
1000b73e:	4770      	bx	lr
1000b740:	1001393c 	.word	0x1001393c

1000b744 <sms_gateway_char_write_resp>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_WRITE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_write_resp(void *params)
{
1000b744:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic write response");
1000b746:	4804      	ldr	r0, [pc, #16]	; (1000b758 <sms_gateway_char_write_resp+0x14>)
1000b748:	4b04      	ldr	r3, [pc, #16]	; (1000b75c <sms_gateway_char_write_resp+0x18>)
1000b74a:	4798      	blx	r3
1000b74c:	4804      	ldr	r0, [pc, #16]	; (1000b760 <sms_gateway_char_write_resp+0x1c>)
1000b74e:	4b05      	ldr	r3, [pc, #20]	; (1000b764 <sms_gateway_char_write_resp+0x20>)
1000b750:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b752:	2000      	movs	r0, #0
1000b754:	bd10      	pop	{r4, pc}
1000b756:	46c0      	nop			; (mov r8, r8)
1000b758:	1001141c 	.word	0x1001141c
1000b75c:	10010079 	.word	0x10010079
1000b760:	100123d4 	.word	0x100123d4
1000b764:	1000ff59 	.word	0x1000ff59

1000b768 <sms_gateway_char_read_multiple>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_MULTIBLE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_read_multiple(void *params)
{
1000b768:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by multiple BLE responses");
1000b76a:	4804      	ldr	r0, [pc, #16]	; (1000b77c <sms_gateway_char_read_multiple+0x14>)
1000b76c:	4b04      	ldr	r3, [pc, #16]	; (1000b780 <sms_gateway_char_read_multiple+0x18>)
1000b76e:	4798      	blx	r3
1000b770:	4804      	ldr	r0, [pc, #16]	; (1000b784 <sms_gateway_char_read_multiple+0x1c>)
1000b772:	4b05      	ldr	r3, [pc, #20]	; (1000b788 <sms_gateway_char_read_multiple+0x20>)
1000b774:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b776:	2000      	movs	r0, #0
1000b778:	bd10      	pop	{r4, pc}
1000b77a:	46c0      	nop			; (mov r8, r8)
1000b77c:	1001141c 	.word	0x1001141c
1000b780:	10010079 	.word	0x10010079
1000b784:	100123f4 	.word	0x100123f4
1000b788:	1000ff59 	.word	0x1000ff59

1000b78c <sms_gateway_char_read_by_uuid>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_BY_UUID_RESPONSE event from stack */
static at_ble_status_t 	sms_gateway_char_read_by_uuid(void *params)
{
1000b78c:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by uuid response");
1000b78e:	4804      	ldr	r0, [pc, #16]	; (1000b7a0 <sms_gateway_char_read_by_uuid+0x14>)
1000b790:	4b04      	ldr	r3, [pc, #16]	; (1000b7a4 <sms_gateway_char_read_by_uuid+0x18>)
1000b792:	4798      	blx	r3
1000b794:	4804      	ldr	r0, [pc, #16]	; (1000b7a8 <sms_gateway_char_read_by_uuid+0x1c>)
1000b796:	4b05      	ldr	r3, [pc, #20]	; (1000b7ac <sms_gateway_char_read_by_uuid+0x20>)
1000b798:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b79a:	2000      	movs	r0, #0
1000b79c:	bd10      	pop	{r4, pc}
1000b79e:	46c0      	nop			; (mov r8, r8)
1000b7a0:	1001141c 	.word	0x1001141c
1000b7a4:	10010079 	.word	0x10010079
1000b7a8:	10012424 	.word	0x10012424
1000b7ac:	1000ff59 	.word	0x1000ff59

1000b7b0 <sms_gateway_discovery_complete>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE (#23) event from stack */
static at_ble_status_t sms_gateway_discovery_complete(void *params)
{
1000b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b7b2:	465f      	mov	r7, fp
1000b7b4:	4656      	mov	r6, sl
1000b7b6:	464d      	mov	r5, r9
1000b7b8:	4644      	mov	r4, r8
1000b7ba:	b4f0      	push	{r4, r5, r6, r7}
    DBG_LOG("Discovery complete...");
1000b7bc:	4822      	ldr	r0, [pc, #136]	; (1000b848 <sms_gateway_discovery_complete+0x98>)
1000b7be:	4b23      	ldr	r3, [pc, #140]	; (1000b84c <sms_gateway_discovery_complete+0x9c>)
1000b7c0:	4798      	blx	r3
1000b7c2:	4823      	ldr	r0, [pc, #140]	; (1000b850 <sms_gateway_discovery_complete+0xa0>)
1000b7c4:	4b23      	ldr	r3, [pc, #140]	; (1000b854 <sms_gateway_discovery_complete+0xa4>)
1000b7c6:	4798      	blx	r3
1000b7c8:	4b23      	ldr	r3, [pc, #140]	; (1000b858 <sms_gateway_discovery_complete+0xa8>)
1000b7ca:	469a      	mov	sl, r3
1000b7cc:	2300      	movs	r3, #0
1000b7ce:	4699      	mov	r9, r3
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		DBG_LOG_DEV("Peripheral #%d", i);
1000b7d0:	4b1e      	ldr	r3, [pc, #120]	; (1000b84c <sms_gateway_discovery_complete+0x9c>)
1000b7d2:	4698      	mov	r8, r3
1000b7d4:	481c      	ldr	r0, [pc, #112]	; (1000b848 <sms_gateway_discovery_complete+0x98>)
1000b7d6:	47c0      	blx	r8
1000b7d8:	4649      	mov	r1, r9
1000b7da:	4820      	ldr	r0, [pc, #128]	; (1000b85c <sms_gateway_discovery_complete+0xac>)
1000b7dc:	4c1d      	ldr	r4, [pc, #116]	; (1000b854 <sms_gateway_discovery_complete+0xa4>)
1000b7de:	47a0      	blx	r4
		DBG_LOG_DEV(" - id %d", periph_instance[i].id);
1000b7e0:	4819      	ldr	r0, [pc, #100]	; (1000b848 <sms_gateway_discovery_complete+0x98>)
1000b7e2:	47c0      	blx	r8
1000b7e4:	46d3      	mov	fp, sl
1000b7e6:	4653      	mov	r3, sl
1000b7e8:	7819      	ldrb	r1, [r3, #0]
1000b7ea:	481d      	ldr	r0, [pc, #116]	; (1000b860 <sms_gateway_discovery_complete+0xb0>)
1000b7ec:	47a0      	blx	r4
		DBG_LOG_DEV(" - conn handle 0x%04x", periph_instance[i].conn_handle);
1000b7ee:	4816      	ldr	r0, [pc, #88]	; (1000b848 <sms_gateway_discovery_complete+0x98>)
1000b7f0:	47c0      	blx	r8
1000b7f2:	4653      	mov	r3, sl
1000b7f4:	8859      	ldrh	r1, [r3, #2]
1000b7f6:	481b      	ldr	r0, [pc, #108]	; (1000b864 <sms_gateway_discovery_complete+0xb4>)
1000b7f8:	47a0      	blx	r4
1000b7fa:	4655      	mov	r5, sl
1000b7fc:	3508      	adds	r5, #8
1000b7fe:	2400      	movs	r4, #0
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			DBG_LOG_DEV(" - service%d: %d", j, periph_instance[i].available_services[j]);
1000b800:	4f12      	ldr	r7, [pc, #72]	; (1000b84c <sms_gateway_discovery_complete+0x9c>)
1000b802:	4811      	ldr	r0, [pc, #68]	; (1000b848 <sms_gateway_discovery_complete+0x98>)
1000b804:	47b8      	blx	r7
1000b806:	465b      	mov	r3, fp
1000b808:	191b      	adds	r3, r3, r4
1000b80a:	791a      	ldrb	r2, [r3, #4]
1000b80c:	0021      	movs	r1, r4
1000b80e:	4816      	ldr	r0, [pc, #88]	; (1000b868 <sms_gateway_discovery_complete+0xb8>)
1000b810:	4e10      	ldr	r6, [pc, #64]	; (1000b854 <sms_gateway_discovery_complete+0xa4>)
1000b812:	47b0      	blx	r6
			DBG_LOG_DEV(" - char range: %d - %d", periph_instance[i].service_handle_range[j][0], periph_instance[i].service_handle_range[j][1]);
1000b814:	480c      	ldr	r0, [pc, #48]	; (1000b848 <sms_gateway_discovery_complete+0x98>)
1000b816:	47b8      	blx	r7
1000b818:	886a      	ldrh	r2, [r5, #2]
1000b81a:	8829      	ldrh	r1, [r5, #0]
1000b81c:	4813      	ldr	r0, [pc, #76]	; (1000b86c <sms_gateway_discovery_complete+0xbc>)
1000b81e:	47b0      	blx	r6
1000b820:	3401      	adds	r4, #1
1000b822:	3504      	adds	r5, #4
    DBG_LOG("Discovery complete...");
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		DBG_LOG_DEV("Peripheral #%d", i);
		DBG_LOG_DEV(" - id %d", periph_instance[i].id);
		DBG_LOG_DEV(" - conn handle 0x%04x", periph_instance[i].conn_handle);
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
1000b824:	2c03      	cmp	r4, #3
1000b826:	d1ec      	bne.n	1000b802 <sms_gateway_discovery_complete+0x52>
1000b828:	2301      	movs	r3, #1
1000b82a:	469c      	mov	ip, r3
1000b82c:	44e1      	add	r9, ip
1000b82e:	3313      	adds	r3, #19
1000b830:	469c      	mov	ip, r3
1000b832:	44e2      	add	sl, ip

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE (#23) event from stack */
static at_ble_status_t sms_gateway_discovery_complete(void *params)
{
    DBG_LOG("Discovery complete...");
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
1000b834:	464b      	mov	r3, r9
1000b836:	2b05      	cmp	r3, #5
1000b838:	d1cc      	bne.n	1000b7d4 <sms_gateway_discovery_complete+0x24>
			DBG_LOG_DEV(" - char range: %d - %d", periph_instance[i].service_handle_range[j][0], periph_instance[i].service_handle_range[j][1]);
		}
	}
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b83a:	2000      	movs	r0, #0
1000b83c:	bc3c      	pop	{r2, r3, r4, r5}
1000b83e:	4690      	mov	r8, r2
1000b840:	4699      	mov	r9, r3
1000b842:	46a2      	mov	sl, r4
1000b844:	46ab      	mov	fp, r5
1000b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b848:	1001141c 	.word	0x1001141c
1000b84c:	10010079 	.word	0x10010079
1000b850:	1001244c 	.word	0x1001244c
1000b854:	1000ff59 	.word	0x1000ff59
1000b858:	10013940 	.word	0x10013940
1000b85c:	10012464 	.word	0x10012464
1000b860:	10012474 	.word	0x10012474
1000b864:	10012480 	.word	0x10012480
1000b868:	10012498 	.word	0x10012498
1000b86c:	100124ac 	.word	0x100124ac

1000b870 <sms_gateway_descr_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DESCRIPTOR_FOUND event from stack */
static at_ble_status_t sms_gateway_descr_found(void *params)
{
1000b870:	b510      	push	{r4, lr}
    DBG_LOG("Descriptor found");
1000b872:	4804      	ldr	r0, [pc, #16]	; (1000b884 <sms_gateway_descr_found+0x14>)
1000b874:	4b04      	ldr	r3, [pc, #16]	; (1000b888 <sms_gateway_descr_found+0x18>)
1000b876:	4798      	blx	r3
1000b878:	4804      	ldr	r0, [pc, #16]	; (1000b88c <sms_gateway_descr_found+0x1c>)
1000b87a:	4b05      	ldr	r3, [pc, #20]	; (1000b890 <sms_gateway_descr_found+0x20>)
1000b87c:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b87e:	2000      	movs	r0, #0
1000b880:	bd10      	pop	{r4, pc}
1000b882:	46c0      	nop			; (mov r8, r8)
1000b884:	1001141c 	.word	0x1001141c
1000b888:	10010079 	.word	0x10010079
1000b88c:	100124c4 	.word	0x100124c4
1000b890:	1000ff59 	.word	0x1000ff59

1000b894 <sms_gateway_char_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_FOUND event from stack */
static at_ble_status_t sms_gateway_char_found(void *params)
{
1000b894:	b510      	push	{r4, lr}
    DBG_LOG_DEV("Characteristic found");
1000b896:	4804      	ldr	r0, [pc, #16]	; (1000b8a8 <sms_gateway_char_found+0x14>)
1000b898:	4b04      	ldr	r3, [pc, #16]	; (1000b8ac <sms_gateway_char_found+0x18>)
1000b89a:	4798      	blx	r3
1000b89c:	4804      	ldr	r0, [pc, #16]	; (1000b8b0 <sms_gateway_char_found+0x1c>)
1000b89e:	4b05      	ldr	r3, [pc, #20]	; (1000b8b4 <sms_gateway_char_found+0x20>)
1000b8a0:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b8a2:	2000      	movs	r0, #0
1000b8a4:	bd10      	pop	{r4, pc}
1000b8a6:	46c0      	nop			; (mov r8, r8)
1000b8a8:	1001141c 	.word	0x1001141c
1000b8ac:	10010079 	.word	0x10010079
1000b8b0:	100124d8 	.word	0x100124d8
1000b8b4:	1000ff59 	.word	0x1000ff59

1000b8b8 <sms_gateway_service_found>:
/* .... */

/* GATT CLIENT */
/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND (#19) event from stack */
static at_ble_status_t sms_gateway_service_found(void *params)
{
1000b8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8ba:	465f      	mov	r7, fp
1000b8bc:	4646      	mov	r6, r8
1000b8be:	b4c0      	push	{r6, r7}
1000b8c0:	b083      	sub	sp, #12
1000b8c2:	4680      	mov	r8, r0
	uint16_t comp_val = 0;
    DBG_LOG_DEV("Primary service found");
1000b8c4:	4e51      	ldr	r6, [pc, #324]	; (1000ba0c <sms_gateway_service_found+0x154>)
1000b8c6:	0030      	movs	r0, r6
1000b8c8:	4d51      	ldr	r5, [pc, #324]	; (1000ba10 <sms_gateway_service_found+0x158>)
1000b8ca:	47a8      	blx	r5
1000b8cc:	4851      	ldr	r0, [pc, #324]	; (1000ba14 <sms_gateway_service_found+0x15c>)
1000b8ce:	4c52      	ldr	r4, [pc, #328]	; (1000ba18 <sms_gateway_service_found+0x160>)
1000b8d0:	47a0      	blx	r4
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
1000b8d2:	0030      	movs	r0, r6
1000b8d4:	47a8      	blx	r5
1000b8d6:	4851      	ldr	r0, [pc, #324]	; (1000ba1c <sms_gateway_service_found+0x164>)
1000b8d8:	47a0      	blx	r4
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
1000b8da:	0030      	movs	r0, r6
1000b8dc:	47a8      	blx	r5
1000b8de:	4643      	mov	r3, r8
1000b8e0:	7999      	ldrb	r1, [r3, #6]
1000b8e2:	484f      	ldr	r0, [pc, #316]	; (1000ba20 <sms_gateway_service_found+0x168>)
1000b8e4:	47a0      	blx	r4
    DBG_LOG_DEV("  service uuid: 0x");
1000b8e6:	0030      	movs	r0, r6
1000b8e8:	47a8      	blx	r5
1000b8ea:	484e      	ldr	r0, [pc, #312]	; (1000ba24 <sms_gateway_service_found+0x16c>)
1000b8ec:	47a0      	blx	r4
1000b8ee:	4643      	mov	r3, r8
1000b8f0:	1ddd      	adds	r5, r3, #7
1000b8f2:	2401      	movs	r4, #1
1000b8f4:	2700      	movs	r7, #0

/* GATT CLIENT */
/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND (#19) event from stack */
static at_ble_status_t sms_gateway_service_found(void *params)
{
	uint16_t comp_val = 0;
1000b8f6:	2300      	movs	r3, #0
1000b8f8:	469b      	mov	fp, r3
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
    DBG_LOG_DEV("  service uuid: 0x");
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        DBG_LOG_CONT_DEV("%02x", service->service_uuid.uuid[i]);
1000b8fa:	4e47      	ldr	r6, [pc, #284]	; (1000ba18 <sms_gateway_service_found+0x160>)
1000b8fc:	e003      	b.n	1000b906 <sms_gateway_service_found+0x4e>
1000b8fe:	3701      	adds	r7, #1
1000b900:	3501      	adds	r5, #1
1000b902:	3401      	adds	r4, #1
1000b904:	b2e4      	uxtb	r4, r4
1000b906:	9501      	str	r5, [sp, #4]
1000b908:	7829      	ldrb	r1, [r5, #0]
1000b90a:	4847      	ldr	r0, [pc, #284]	; (1000ba28 <sms_gateway_service_found+0x170>)
1000b90c:	47b0      	blx	r6
1000b90e:	b2fb      	uxtb	r3, r7
		if(i == 6) {
1000b910:	2b06      	cmp	r3, #6
1000b912:	d103      	bne.n	1000b91c <sms_gateway_service_found+0x64>
			comp_val = service->service_uuid.uuid[i];
			comp_val = (comp_val << 8) & 0xff00;
1000b914:	782b      	ldrb	r3, [r5, #0]
1000b916:	021b      	lsls	r3, r3, #8
1000b918:	469b      	mov	fp, r3
1000b91a:	e7f0      	b.n	1000b8fe <sms_gateway_service_found+0x46>
			//DBG_LOG_DEV("Comp val: 0x%04x", comp_val);
		}
		else if(i == 7) {
1000b91c:	2b07      	cmp	r3, #7
1000b91e:	d105      	bne.n	1000b92c <sms_gateway_service_found+0x74>
			comp_val |= service->service_uuid.uuid[i];
1000b920:	9b01      	ldr	r3, [sp, #4]
1000b922:	781b      	ldrb	r3, [r3, #0]
1000b924:	465a      	mov	r2, fp
1000b926:	431a      	orrs	r2, r3
1000b928:	4693      	mov	fp, r2
1000b92a:	e7e8      	b.n	1000b8fe <sms_gateway_service_found+0x46>
    DBG_LOG_DEV("Primary service found");
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
    DBG_LOG_DEV("  service uuid: 0x");
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
1000b92c:	2c0f      	cmp	r4, #15
1000b92e:	d9e6      	bls.n	1000b8fe <sms_gateway_service_found+0x46>
		else if(i == 7) {
			comp_val |= service->service_uuid.uuid[i];
			//DBG_LOG_DEV("Comp val: 0x%04x", comp_val);
		}
    }
	DBG_LOG_DEV("  comp val: 0x%04x", comp_val);
1000b930:	4d36      	ldr	r5, [pc, #216]	; (1000ba0c <sms_gateway_service_found+0x154>)
1000b932:	0028      	movs	r0, r5
1000b934:	4e36      	ldr	r6, [pc, #216]	; (1000ba10 <sms_gateway_service_found+0x158>)
1000b936:	47b0      	blx	r6
1000b938:	4659      	mov	r1, fp
1000b93a:	483c      	ldr	r0, [pc, #240]	; (1000ba2c <sms_gateway_service_found+0x174>)
1000b93c:	4c36      	ldr	r4, [pc, #216]	; (1000ba18 <sms_gateway_service_found+0x160>)
1000b93e:	47a0      	blx	r4
    DBG_LOG_DEV("  start handle: %d", service->start_handle);
1000b940:	0028      	movs	r0, r5
1000b942:	47b0      	blx	r6
1000b944:	4643      	mov	r3, r8
1000b946:	8859      	ldrh	r1, [r3, #2]
1000b948:	4839      	ldr	r0, [pc, #228]	; (1000ba30 <sms_gateway_service_found+0x178>)
1000b94a:	47a0      	blx	r4
    DBG_LOG_DEV("  end handle: %d", service->end_handle);
1000b94c:	0028      	movs	r0, r5
1000b94e:	47b0      	blx	r6
1000b950:	4643      	mov	r3, r8
1000b952:	8899      	ldrh	r1, [r3, #4]
1000b954:	4837      	ldr	r0, [pc, #220]	; (1000ba34 <sms_gateway_service_found+0x17c>)
1000b956:	47a0      	blx	r4
	
	if(comp_val == 0xbbbb) {
1000b958:	4b37      	ldr	r3, [pc, #220]	; (1000ba38 <sms_gateway_service_found+0x180>)
1000b95a:	459b      	cmp	fp, r3
1000b95c:	d118      	bne.n	1000b990 <sms_gateway_service_found+0xd8>
		DBG_LOG_DEV("  button service!");
1000b95e:	482b      	ldr	r0, [pc, #172]	; (1000ba0c <sms_gateway_service_found+0x154>)
1000b960:	4b2b      	ldr	r3, [pc, #172]	; (1000ba10 <sms_gateway_service_found+0x158>)
1000b962:	4798      	blx	r3
1000b964:	4835      	ldr	r0, [pc, #212]	; (1000ba3c <sms_gateway_service_found+0x184>)
1000b966:	4b2c      	ldr	r3, [pc, #176]	; (1000ba18 <sms_gateway_service_found+0x160>)
1000b968:	4798      	blx	r3
		periph_instance[periph_counter].available_services[SMS_BLE_SERV_BUTTON_POS] = true;
1000b96a:	4b35      	ldr	r3, [pc, #212]	; (1000ba40 <sms_gateway_service_found+0x188>)
1000b96c:	781b      	ldrb	r3, [r3, #0]
1000b96e:	4935      	ldr	r1, [pc, #212]	; (1000ba44 <sms_gateway_service_found+0x18c>)
1000b970:	0098      	lsls	r0, r3, #2
1000b972:	18c2      	adds	r2, r0, r3
1000b974:	0092      	lsls	r2, r2, #2
1000b976:	188a      	adds	r2, r1, r2
1000b978:	2401      	movs	r4, #1
1000b97a:	7114      	strb	r4, [r2, #4]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_BUTTON_POS][0] = service->start_handle;
1000b97c:	4644      	mov	r4, r8
1000b97e:	8864      	ldrh	r4, [r4, #2]
1000b980:	8114      	strh	r4, [r2, #8]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_BUTTON_POS][1] = service->end_handle;
1000b982:	4642      	mov	r2, r8
1000b984:	8892      	ldrh	r2, [r2, #4]
1000b986:	18c3      	adds	r3, r0, r3
1000b988:	009b      	lsls	r3, r3, #2
1000b98a:	18cb      	adds	r3, r1, r3
1000b98c:	815a      	strh	r2, [r3, #10]
1000b98e:	e036      	b.n	1000b9fe <sms_gateway_service_found+0x146>
	}
	else if(comp_val == 0xeeee) {
1000b990:	4b2d      	ldr	r3, [pc, #180]	; (1000ba48 <sms_gateway_service_found+0x190>)
1000b992:	459b      	cmp	fp, r3
1000b994:	d118      	bne.n	1000b9c8 <sms_gateway_service_found+0x110>
		DBG_LOG_DEV("  pressure service!");
1000b996:	481d      	ldr	r0, [pc, #116]	; (1000ba0c <sms_gateway_service_found+0x154>)
1000b998:	4b1d      	ldr	r3, [pc, #116]	; (1000ba10 <sms_gateway_service_found+0x158>)
1000b99a:	4798      	blx	r3
1000b99c:	482b      	ldr	r0, [pc, #172]	; (1000ba4c <sms_gateway_service_found+0x194>)
1000b99e:	4b1e      	ldr	r3, [pc, #120]	; (1000ba18 <sms_gateway_service_found+0x160>)
1000b9a0:	4798      	blx	r3
		periph_instance[periph_counter].available_services[SMS_BLE_SERV_PRESSURE_POS] = true;
1000b9a2:	4b27      	ldr	r3, [pc, #156]	; (1000ba40 <sms_gateway_service_found+0x188>)
1000b9a4:	781b      	ldrb	r3, [r3, #0]
1000b9a6:	4927      	ldr	r1, [pc, #156]	; (1000ba44 <sms_gateway_service_found+0x18c>)
1000b9a8:	0098      	lsls	r0, r3, #2
1000b9aa:	18c2      	adds	r2, r0, r3
1000b9ac:	0092      	lsls	r2, r2, #2
1000b9ae:	188a      	adds	r2, r1, r2
1000b9b0:	2401      	movs	r4, #1
1000b9b2:	7154      	strb	r4, [r2, #5]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_PRESSURE_POS][0] = service->start_handle;
1000b9b4:	4644      	mov	r4, r8
1000b9b6:	8864      	ldrh	r4, [r4, #2]
1000b9b8:	8194      	strh	r4, [r2, #12]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_PRESSURE_POS][1] = service->end_handle;
1000b9ba:	4642      	mov	r2, r8
1000b9bc:	8892      	ldrh	r2, [r2, #4]
1000b9be:	18c3      	adds	r3, r0, r3
1000b9c0:	009b      	lsls	r3, r3, #2
1000b9c2:	18cb      	adds	r3, r1, r3
1000b9c4:	81da      	strh	r2, [r3, #14]
1000b9c6:	e01a      	b.n	1000b9fe <sms_gateway_service_found+0x146>
	}
	else if(comp_val == 0x1111) {
1000b9c8:	4b21      	ldr	r3, [pc, #132]	; (1000ba50 <sms_gateway_service_found+0x198>)
1000b9ca:	459b      	cmp	fp, r3
1000b9cc:	d117      	bne.n	1000b9fe <sms_gateway_service_found+0x146>
		DBG_LOG_DEV("  mpu service!");
1000b9ce:	480f      	ldr	r0, [pc, #60]	; (1000ba0c <sms_gateway_service_found+0x154>)
1000b9d0:	4b0f      	ldr	r3, [pc, #60]	; (1000ba10 <sms_gateway_service_found+0x158>)
1000b9d2:	4798      	blx	r3
1000b9d4:	481f      	ldr	r0, [pc, #124]	; (1000ba54 <sms_gateway_service_found+0x19c>)
1000b9d6:	4b10      	ldr	r3, [pc, #64]	; (1000ba18 <sms_gateway_service_found+0x160>)
1000b9d8:	4798      	blx	r3
		periph_instance[periph_counter].available_services[SMS_BLE_SERV_MPU_POS] = true;
1000b9da:	4b19      	ldr	r3, [pc, #100]	; (1000ba40 <sms_gateway_service_found+0x188>)
1000b9dc:	781b      	ldrb	r3, [r3, #0]
1000b9de:	4919      	ldr	r1, [pc, #100]	; (1000ba44 <sms_gateway_service_found+0x18c>)
1000b9e0:	0098      	lsls	r0, r3, #2
1000b9e2:	18c2      	adds	r2, r0, r3
1000b9e4:	0092      	lsls	r2, r2, #2
1000b9e6:	188a      	adds	r2, r1, r2
1000b9e8:	2401      	movs	r4, #1
1000b9ea:	7194      	strb	r4, [r2, #6]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_MPU_POS][0] = service->start_handle;
1000b9ec:	4644      	mov	r4, r8
1000b9ee:	8864      	ldrh	r4, [r4, #2]
1000b9f0:	8214      	strh	r4, [r2, #16]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_MPU_POS][1] = service->end_handle;
1000b9f2:	4642      	mov	r2, r8
1000b9f4:	8892      	ldrh	r2, [r2, #4]
1000b9f6:	18c3      	adds	r3, r0, r3
1000b9f8:	009b      	lsls	r3, r3, #2
1000b9fa:	18cb      	adds	r3, r1, r3
1000b9fc:	825a      	strh	r2, [r3, #18]
	}
    return AT_BLE_SUCCESS;
}
1000b9fe:	2000      	movs	r0, #0
1000ba00:	b003      	add	sp, #12
1000ba02:	bc0c      	pop	{r2, r3}
1000ba04:	4690      	mov	r8, r2
1000ba06:	469b      	mov	fp, r3
1000ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba0a:	46c0      	nop			; (mov r8, r8)
1000ba0c:	1001141c 	.word	0x1001141c
1000ba10:	10010079 	.word	0x10010079
1000ba14:	100124f0 	.word	0x100124f0
1000ba18:	1000ff59 	.word	0x1000ff59
1000ba1c:	10012508 	.word	0x10012508
1000ba20:	10012540 	.word	0x10012540
1000ba24:	10012554 	.word	0x10012554
1000ba28:	10012724 	.word	0x10012724
1000ba2c:	10012568 	.word	0x10012568
1000ba30:	1001257c 	.word	0x1001257c
1000ba34:	10012590 	.word	0x10012590
1000ba38:	0000bbbb 	.word	0x0000bbbb
1000ba3c:	100125a4 	.word	0x100125a4
1000ba40:	100138f5 	.word	0x100138f5
1000ba44:	10013940 	.word	0x10013940
1000ba48:	0000eeee 	.word	0x0000eeee
1000ba4c:	100125b8 	.word	0x100125b8
1000ba50:	00001111 	.word	0x00001111
1000ba54:	100125cc 	.word	0x100125cc

1000ba58 <sms_gateway_indication_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_INDICATION_RECIEVED event from stack */
static at_ble_status_t sms_gateway_indication_received(void *param)
{
1000ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ba5a:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000ba5c:	4b23      	ldr	r3, [pc, #140]	; (1000baec <sms_gateway_indication_received+0x94>)
1000ba5e:	7818      	ldrb	r0, [r3, #0]
1000ba60:	2101      	movs	r1, #1
1000ba62:	4b23      	ldr	r3, [pc, #140]	; (1000baf0 <sms_gateway_indication_received+0x98>)
1000ba64:	4798      	blx	r3

    at_ble_indication_recieved_t *indication = (at_ble_indication_recieved_t *)param;
    static uint16_t btn_ind_cnt = 0;
    static uint16_t press_ind_cnt = 0;
    static uint16_t imu_ind_cnt = 0;
    switch(indication->char_len) {
1000ba66:	78ab      	ldrb	r3, [r5, #2]
1000ba68:	2b08      	cmp	r3, #8
1000ba6a:	d00f      	beq.n	1000ba8c <sms_gateway_indication_received+0x34>
1000ba6c:	2b0c      	cmp	r3, #12
1000ba6e:	d022      	beq.n	1000bab6 <sms_gateway_indication_received+0x5e>
1000ba70:	2b01      	cmp	r3, #1
1000ba72:	d134      	bne.n	1000bade <sms_gateway_indication_received+0x86>
        case 1:
        DBG_LOG_DEV("BTN %d: 0x%02x", btn_ind_cnt++, indication->char_value[0]);
1000ba74:	481f      	ldr	r0, [pc, #124]	; (1000baf4 <sms_gateway_indication_received+0x9c>)
1000ba76:	4b20      	ldr	r3, [pc, #128]	; (1000baf8 <sms_gateway_indication_received+0xa0>)
1000ba78:	4798      	blx	r3
1000ba7a:	4b20      	ldr	r3, [pc, #128]	; (1000bafc <sms_gateway_indication_received+0xa4>)
1000ba7c:	8819      	ldrh	r1, [r3, #0]
1000ba7e:	1c4a      	adds	r2, r1, #1
1000ba80:	801a      	strh	r2, [r3, #0]
1000ba82:	79aa      	ldrb	r2, [r5, #6]
1000ba84:	481e      	ldr	r0, [pc, #120]	; (1000bb00 <sms_gateway_indication_received+0xa8>)
1000ba86:	4b1f      	ldr	r3, [pc, #124]	; (1000bb04 <sms_gateway_indication_received+0xac>)
1000ba88:	4798      	blx	r3
        break;
1000ba8a:	e028      	b.n	1000bade <sms_gateway_indication_received+0x86>
        
        case 8:
        DBG_LOG_DEV("\t\tPRESS %d: 0x", press_ind_cnt++);
1000ba8c:	4819      	ldr	r0, [pc, #100]	; (1000baf4 <sms_gateway_indication_received+0x9c>)
1000ba8e:	4b1a      	ldr	r3, [pc, #104]	; (1000baf8 <sms_gateway_indication_received+0xa0>)
1000ba90:	4798      	blx	r3
1000ba92:	4b1d      	ldr	r3, [pc, #116]	; (1000bb08 <sms_gateway_indication_received+0xb0>)
1000ba94:	8819      	ldrh	r1, [r3, #0]
1000ba96:	1c4a      	adds	r2, r1, #1
1000ba98:	801a      	strh	r2, [r3, #0]
1000ba9a:	481c      	ldr	r0, [pc, #112]	; (1000bb0c <sms_gateway_indication_received+0xb4>)
1000ba9c:	4b19      	ldr	r3, [pc, #100]	; (1000bb04 <sms_gateway_indication_received+0xac>)
1000ba9e:	4798      	blx	r3
1000baa0:	1dac      	adds	r4, r5, #6
1000baa2:	350e      	adds	r5, #14
        for(uint8_t i = 0; i < 8; i++) {
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
1000baa4:	4f1a      	ldr	r7, [pc, #104]	; (1000bb10 <sms_gateway_indication_received+0xb8>)
1000baa6:	4e17      	ldr	r6, [pc, #92]	; (1000bb04 <sms_gateway_indication_received+0xac>)
1000baa8:	7821      	ldrb	r1, [r4, #0]
1000baaa:	0038      	movs	r0, r7
1000baac:	47b0      	blx	r6
1000baae:	3401      	adds	r4, #1
        DBG_LOG_DEV("BTN %d: 0x%02x", btn_ind_cnt++, indication->char_value[0]);
        break;
        
        case 8:
        DBG_LOG_DEV("\t\tPRESS %d: 0x", press_ind_cnt++);
        for(uint8_t i = 0; i < 8; i++) {
1000bab0:	42ac      	cmp	r4, r5
1000bab2:	d1f9      	bne.n	1000baa8 <sms_gateway_indication_received+0x50>
1000bab4:	e013      	b.n	1000bade <sms_gateway_indication_received+0x86>
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
        }
        break;
        
        case 12:
        DBG_LOG_DEV("\t\t\t\tIMU %d: 0x", imu_ind_cnt++);
1000bab6:	480f      	ldr	r0, [pc, #60]	; (1000baf4 <sms_gateway_indication_received+0x9c>)
1000bab8:	4b0f      	ldr	r3, [pc, #60]	; (1000baf8 <sms_gateway_indication_received+0xa0>)
1000baba:	4798      	blx	r3
1000babc:	4b15      	ldr	r3, [pc, #84]	; (1000bb14 <sms_gateway_indication_received+0xbc>)
1000babe:	8819      	ldrh	r1, [r3, #0]
1000bac0:	1c4a      	adds	r2, r1, #1
1000bac2:	801a      	strh	r2, [r3, #0]
1000bac4:	4814      	ldr	r0, [pc, #80]	; (1000bb18 <sms_gateway_indication_received+0xc0>)
1000bac6:	4b0f      	ldr	r3, [pc, #60]	; (1000bb04 <sms_gateway_indication_received+0xac>)
1000bac8:	4798      	blx	r3
1000baca:	1dac      	adds	r4, r5, #6
1000bacc:	3512      	adds	r5, #18
        for(uint8_t i = 0; i < 12; i++) {
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
1000bace:	4e10      	ldr	r6, [pc, #64]	; (1000bb10 <sms_gateway_indication_received+0xb8>)
1000bad0:	4f0c      	ldr	r7, [pc, #48]	; (1000bb04 <sms_gateway_indication_received+0xac>)
1000bad2:	7821      	ldrb	r1, [r4, #0]
1000bad4:	0030      	movs	r0, r6
1000bad6:	47b8      	blx	r7
1000bad8:	3401      	adds	r4, #1
        }
        break;
        
        case 12:
        DBG_LOG_DEV("\t\t\t\tIMU %d: 0x", imu_ind_cnt++);
        for(uint8_t i = 0; i < 12; i++) {
1000bada:	42ac      	cmp	r4, r5
1000badc:	d1f9      	bne.n	1000bad2 <sms_gateway_indication_received+0x7a>
    //DBG_LOG_DEV("Indication received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d", indication->conn_handle, indication->char_handle, indication->char_len);
    //for(uint8_t i = 0; i < indication->char_len; i++) {
        //DBG_LOG_CONT_DEV("\r\n- char value[%d]: 0x%02x", i, indication->char_value[i]);
    //}
 
    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000bade:	4b03      	ldr	r3, [pc, #12]	; (1000baec <sms_gateway_indication_received+0x94>)
1000bae0:	7818      	ldrb	r0, [r3, #0]
1000bae2:	2100      	movs	r1, #0
1000bae4:	4b02      	ldr	r3, [pc, #8]	; (1000baf0 <sms_gateway_indication_received+0x98>)
1000bae6:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000bae8:	2000      	movs	r0, #0
1000baea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000baec:	10012a30 	.word	0x10012a30
1000baf0:	1000831d 	.word	0x1000831d
1000baf4:	1001141c 	.word	0x1001141c
1000baf8:	10010079 	.word	0x10010079
1000bafc:	10012bfe 	.word	0x10012bfe
1000bb00:	100125dc 	.word	0x100125dc
1000bb04:	1000ff59 	.word	0x1000ff59
1000bb08:	10012bfa 	.word	0x10012bfa
1000bb0c:	100125ec 	.word	0x100125ec
1000bb10:	10012724 	.word	0x10012724
1000bb14:	10012bb6 	.word	0x10012bb6
1000bb18:	100125fc 	.word	0x100125fc

1000bb1c <sms_gateway_notification_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_NOTIFICATION_RECIEVED (#27) event from stack */
static at_ble_status_t sms_gateway_notification_received(void *params)
{
1000bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bb1e:	464f      	mov	r7, r9
1000bb20:	4646      	mov	r6, r8
1000bb22:	b4c0      	push	{r6, r7}
1000bb24:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000bb26:	4b3e      	ldr	r3, [pc, #248]	; (1000bc20 <sms_gateway_notification_received+0x104>)
1000bb28:	7818      	ldrb	r0, [r3, #0]
1000bb2a:	2101      	movs	r1, #1
1000bb2c:	4b3d      	ldr	r3, [pc, #244]	; (1000bc24 <sms_gateway_notification_received+0x108>)
1000bb2e:	4798      	blx	r3

    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
1000bb30:	4c3d      	ldr	r4, [pc, #244]	; (1000bc28 <sms_gateway_notification_received+0x10c>)
1000bb32:	8823      	ldrh	r3, [r4, #0]
1000bb34:	3301      	adds	r3, #1
1000bb36:	8023      	strh	r3, [r4, #0]
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
1000bb38:	4e3c      	ldr	r6, [pc, #240]	; (1000bc2c <sms_gateway_notification_received+0x110>)
1000bb3a:	0030      	movs	r0, r6
1000bb3c:	4f3c      	ldr	r7, [pc, #240]	; (1000bc30 <sms_gateway_notification_received+0x114>)
1000bb3e:	47b8      	blx	r7
1000bb40:	8821      	ldrh	r1, [r4, #0]
1000bb42:	483c      	ldr	r0, [pc, #240]	; (1000bc34 <sms_gateway_notification_received+0x118>)
1000bb44:	4c3c      	ldr	r4, [pc, #240]	; (1000bc38 <sms_gateway_notification_received+0x11c>)
1000bb46:	47a0      	blx	r4
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
1000bb48:	0030      	movs	r0, r6
1000bb4a:	47b8      	blx	r7
1000bb4c:	78ab      	ldrb	r3, [r5, #2]
1000bb4e:	88aa      	ldrh	r2, [r5, #4]
1000bb50:	8829      	ldrh	r1, [r5, #0]
1000bb52:	483a      	ldr	r0, [pc, #232]	; (1000bc3c <sms_gateway_notification_received+0x120>)
1000bb54:	47a0      	blx	r4
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000bb56:	78ab      	ldrb	r3, [r5, #2]
1000bb58:	2b00      	cmp	r3, #0
1000bb5a:	d00b      	beq.n	1000bb74 <sms_gateway_notification_received+0x58>
1000bb5c:	2400      	movs	r4, #0
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
1000bb5e:	4e38      	ldr	r6, [pc, #224]	; (1000bc40 <sms_gateway_notification_received+0x124>)
1000bb60:	4f35      	ldr	r7, [pc, #212]	; (1000bc38 <sms_gateway_notification_received+0x11c>)
1000bb62:	192b      	adds	r3, r5, r4
1000bb64:	7999      	ldrb	r1, [r3, #6]
1000bb66:	0030      	movs	r0, r6
1000bb68:	47b8      	blx	r7
    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000bb6a:	3401      	adds	r4, #1
1000bb6c:	b2e4      	uxtb	r4, r4
1000bb6e:	78ab      	ldrb	r3, [r5, #2]
1000bb70:	42a3      	cmp	r3, r4
1000bb72:	d8f6      	bhi.n	1000bb62 <sms_gateway_notification_received+0x46>
1000bb74:	4c33      	ldr	r4, [pc, #204]	; (1000bc44 <sms_gateway_notification_received+0x128>)
1000bb76:	0026      	movs	r6, r4
1000bb78:	3664      	adds	r6, #100	; 0x64
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		if(periph_instance[i].conn_handle == notification->conn_handle) {
1000bb7a:	8862      	ldrh	r2, [r4, #2]
1000bb7c:	882b      	ldrh	r3, [r5, #0]
1000bb7e:	429a      	cmp	r2, r3
1000bb80:	d140      	bne.n	1000bc04 <sms_gateway_notification_received+0xe8>
			spi_message.periph_id = periph_instance[i].id;
1000bb82:	7823      	ldrb	r3, [r4, #0]
1000bb84:	4a30      	ldr	r2, [pc, #192]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bb86:	7013      	strb	r3, [r2, #0]
			for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
				if((notification->char_handle > periph_instance[i].service_handle_range[j][0]) && (notification->char_handle < periph_instance[i].service_handle_range[j][1])) {
1000bb88:	88a8      	ldrh	r0, [r5, #4]
1000bb8a:	0022      	movs	r2, r4
1000bb8c:	3208      	adds	r2, #8
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		if(periph_instance[i].conn_handle == notification->conn_handle) {
			spi_message.periph_id = periph_instance[i].id;
			for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
1000bb8e:	2300      	movs	r3, #0
				if((notification->char_handle > periph_instance[i].service_handle_range[j][0]) && (notification->char_handle < periph_instance[i].service_handle_range[j][1])) {
1000bb90:	8811      	ldrh	r1, [r2, #0]
1000bb92:	4281      	cmp	r1, r0
1000bb94:	d231      	bcs.n	1000bbfa <sms_gateway_notification_received+0xde>
1000bb96:	8851      	ldrh	r1, [r2, #2]
1000bb98:	4281      	cmp	r1, r0
1000bb9a:	d92e      	bls.n	1000bbfa <sms_gateway_notification_received+0xde>
					spi_message.service = j;
1000bb9c:	4a2a      	ldr	r2, [pc, #168]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bb9e:	7053      	strb	r3, [r2, #1]
					spi_message.length = notification->char_len;
1000bba0:	78ab      	ldrb	r3, [r5, #2]
1000bba2:	7093      	strb	r3, [r2, #2]
					DBG_LOG_DEV("Peripheral %d, service %d, length %d", spi_message.periph_id, spi_message.service, spi_message.length);
1000bba4:	4821      	ldr	r0, [pc, #132]	; (1000bc2c <sms_gateway_notification_received+0x110>)
1000bba6:	4b22      	ldr	r3, [pc, #136]	; (1000bc30 <sms_gateway_notification_received+0x114>)
1000bba8:	4698      	mov	r8, r3
1000bbaa:	4798      	blx	r3
1000bbac:	4b26      	ldr	r3, [pc, #152]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bbae:	789b      	ldrb	r3, [r3, #2]
1000bbb0:	4a25      	ldr	r2, [pc, #148]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bbb2:	7852      	ldrb	r2, [r2, #1]
1000bbb4:	4924      	ldr	r1, [pc, #144]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bbb6:	7809      	ldrb	r1, [r1, #0]
1000bbb8:	4824      	ldr	r0, [pc, #144]	; (1000bc4c <sms_gateway_notification_received+0x130>)
1000bbba:	4f1f      	ldr	r7, [pc, #124]	; (1000bc38 <sms_gateway_notification_received+0x11c>)
1000bbbc:	47b8      	blx	r7
					DBG_LOG_DEV("Data 0x");
1000bbbe:	481b      	ldr	r0, [pc, #108]	; (1000bc2c <sms_gateway_notification_received+0x110>)
1000bbc0:	47c0      	blx	r8
1000bbc2:	4823      	ldr	r0, [pc, #140]	; (1000bc50 <sms_gateway_notification_received+0x134>)
1000bbc4:	47b8      	blx	r7
					for(uint8_t k = 0; k < spi_message.length; k++) {
1000bbc6:	4b20      	ldr	r3, [pc, #128]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bbc8:	789b      	ldrb	r3, [r3, #2]
1000bbca:	2b00      	cmp	r3, #0
1000bbcc:	d01a      	beq.n	1000bc04 <sms_gateway_notification_received+0xe8>
1000bbce:	2700      	movs	r7, #0
						spi_message.data[k] = notification->char_value[k];
1000bbd0:	4b1d      	ldr	r3, [pc, #116]	; (1000bc48 <sms_gateway_notification_received+0x12c>)
1000bbd2:	4699      	mov	r9, r3
						DBG_LOG_CONT_DEV("%02x ", spi_message.data[k]);
1000bbd4:	4b18      	ldr	r3, [pc, #96]	; (1000bc38 <sms_gateway_notification_received+0x11c>)
1000bbd6:	4698      	mov	r8, r3
					spi_message.service = j;
					spi_message.length = notification->char_len;
					DBG_LOG_DEV("Peripheral %d, service %d, length %d", spi_message.periph_id, spi_message.service, spi_message.length);
					DBG_LOG_DEV("Data 0x");
					for(uint8_t k = 0; k < spi_message.length; k++) {
						spi_message.data[k] = notification->char_value[k];
1000bbd8:	19eb      	adds	r3, r5, r7
1000bbda:	7999      	ldrb	r1, [r3, #6]
1000bbdc:	464b      	mov	r3, r9
1000bbde:	19db      	adds	r3, r3, r7
1000bbe0:	70d9      	strb	r1, [r3, #3]
						DBG_LOG_CONT_DEV("%02x ", spi_message.data[k]);
1000bbe2:	481c      	ldr	r0, [pc, #112]	; (1000bc54 <sms_gateway_notification_received+0x138>)
1000bbe4:	47c0      	blx	r8
						spi_send = true;
1000bbe6:	2201      	movs	r2, #1
1000bbe8:	4b1b      	ldr	r3, [pc, #108]	; (1000bc58 <sms_gateway_notification_received+0x13c>)
1000bbea:	701a      	strb	r2, [r3, #0]
				if((notification->char_handle > periph_instance[i].service_handle_range[j][0]) && (notification->char_handle < periph_instance[i].service_handle_range[j][1])) {
					spi_message.service = j;
					spi_message.length = notification->char_len;
					DBG_LOG_DEV("Peripheral %d, service %d, length %d", spi_message.periph_id, spi_message.service, spi_message.length);
					DBG_LOG_DEV("Data 0x");
					for(uint8_t k = 0; k < spi_message.length; k++) {
1000bbec:	1c7b      	adds	r3, r7, #1
1000bbee:	b2df      	uxtb	r7, r3
1000bbf0:	464b      	mov	r3, r9
1000bbf2:	789b      	ldrb	r3, [r3, #2]
1000bbf4:	42bb      	cmp	r3, r7
1000bbf6:	d8ef      	bhi.n	1000bbd8 <sms_gateway_notification_received+0xbc>
1000bbf8:	e004      	b.n	1000bc04 <sms_gateway_notification_received+0xe8>
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		if(periph_instance[i].conn_handle == notification->conn_handle) {
			spi_message.periph_id = periph_instance[i].id;
			for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
1000bbfa:	3301      	adds	r3, #1
1000bbfc:	b2db      	uxtb	r3, r3
1000bbfe:	3204      	adds	r2, #4
1000bc00:	2b03      	cmp	r3, #3
1000bc02:	d1c5      	bne.n	1000bb90 <sms_gateway_notification_received+0x74>
1000bc04:	3414      	adds	r4, #20
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
    for(uint8_t i = 0; i < notification->char_len; i++) {
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
1000bc06:	42b4      	cmp	r4, r6
1000bc08:	d1b7      	bne.n	1000bb7a <sms_gateway_notification_received+0x5e>
			}
		}
	}
	

    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000bc0a:	4b05      	ldr	r3, [pc, #20]	; (1000bc20 <sms_gateway_notification_received+0x104>)
1000bc0c:	7818      	ldrb	r0, [r3, #0]
1000bc0e:	2100      	movs	r1, #0
1000bc10:	4b04      	ldr	r3, [pc, #16]	; (1000bc24 <sms_gateway_notification_received+0x108>)
1000bc12:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000bc14:	2000      	movs	r0, #0
1000bc16:	bc0c      	pop	{r2, r3}
1000bc18:	4690      	mov	r8, r2
1000bc1a:	4699      	mov	r9, r3
1000bc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bc1e:	46c0      	nop			; (mov r8, r8)
1000bc20:	10012a30 	.word	0x10012a30
1000bc24:	1000831d 	.word	0x1000831d
1000bc28:	10012bfc 	.word	0x10012bfc
1000bc2c:	1001141c 	.word	0x1001141c
1000bc30:	10010079 	.word	0x10010079
1000bc34:	1001260c 	.word	0x1001260c
1000bc38:	1000ff59 	.word	0x1000ff59
1000bc3c:	10012614 	.word	0x10012614
1000bc40:	10012724 	.word	0x10012724
1000bc44:	10013940 	.word	0x10013940
1000bc48:	100138fc 	.word	0x100138fc
1000bc4c:	100126a4 	.word	0x100126a4
1000bc50:	100126cc 	.word	0x100126cc
1000bc54:	100126d4 	.word	0x100126d4
1000bc58:	100138f4 	.word	0x100138f4

1000bc5c <ble_connected_app_event>:
    return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
1000bc5c:	b510      	push	{r4, lr}
1000bc5e:	0004      	movs	r4, r0
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000bc60:	8900      	ldrh	r0, [r0, #8]
1000bc62:	4b08      	ldr	r3, [pc, #32]	; (1000bc84 <ble_connected_app_event+0x28>)
1000bc64:	4798      	blx	r3
    {
        return AT_BLE_FAILURE;
1000bc66:	23e2      	movs	r3, #226	; 0xe2
static at_ble_status_t ble_connected_app_event(void *params)
{
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000bc68:	2800      	cmp	r0, #0
1000bc6a:	d009      	beq.n	1000bc80 <ble_connected_app_event+0x24>
    {
        return AT_BLE_FAILURE;
    }
    
    DBG_LOG_DEV("Device connected...");
1000bc6c:	4806      	ldr	r0, [pc, #24]	; (1000bc88 <ble_connected_app_event+0x2c>)
1000bc6e:	4b07      	ldr	r3, [pc, #28]	; (1000bc8c <ble_connected_app_event+0x30>)
1000bc70:	4798      	blx	r3
1000bc72:	4807      	ldr	r0, [pc, #28]	; (1000bc90 <ble_connected_app_event+0x34>)
1000bc74:	4b07      	ldr	r3, [pc, #28]	; (1000bc94 <ble_connected_app_event+0x38>)
1000bc76:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_CONNECTED;
1000bc78:	2202      	movs	r2, #2
1000bc7a:	4b07      	ldr	r3, [pc, #28]	; (1000bc98 <ble_connected_app_event+0x3c>)
1000bc7c:	701a      	strb	r2, [r3, #0]
    return conn_params->conn_status;
1000bc7e:	7aa3      	ldrb	r3, [r4, #10]
}
1000bc80:	0018      	movs	r0, r3
1000bc82:	bd10      	pop	{r4, pc}
1000bc84:	1000acc1 	.word	0x1000acc1
1000bc88:	1001141c 	.word	0x1001141c
1000bc8c:	10010079 	.word	0x10010079
1000bc90:	100126dc 	.word	0x100126dc
1000bc94:	1000ff59 	.word	0x1000ff59
1000bc98:	10012bb4 	.word	0x10012bb4

1000bc9c <ble_scan_data_app_event>:
/* ------------------ */

/* GAP */
/* Callback registered for AT_BLE_SCAN_REPORT (#2) event from stack */
static at_ble_status_t ble_scan_data_app_event(void *param)
{
1000bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc9e:	465f      	mov	r7, fp
1000bca0:	4656      	mov	r6, sl
1000bca2:	464d      	mov	r5, r9
1000bca4:	4644      	mov	r4, r8
1000bca6:	b4f0      	push	{r4, r5, r6, r7}
1000bca8:	b097      	sub	sp, #92	; 0x5c
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
1000bcaa:	4b73      	ldr	r3, [pc, #460]	; (1000be78 <ble_scan_data_app_event+0x1dc>)
1000bcac:	781c      	ldrb	r4, [r3, #0]
1000bcae:	b2e4      	uxtb	r4, r4
    scan_index = 0;
1000bcb0:	2200      	movs	r2, #0
1000bcb2:	4b72      	ldr	r3, [pc, #456]	; (1000be7c <ble_scan_data_app_event+0x1e0>)
1000bcb4:	701a      	strb	r2, [r3, #0]
    bool device_identified = false;
    uint8_t device_index = 0;
    char search_pattern1[strlen(SMS_ID_PATTERN1)];
    char search_pattern2[strlen(SMS_ID_PATTERN2)];
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
1000bcb6:	3214      	adds	r2, #20
1000bcb8:	2100      	movs	r1, #0
1000bcba:	a80e      	add	r0, sp, #56	; 0x38
1000bcbc:	4b70      	ldr	r3, [pc, #448]	; (1000be80 <ble_scan_data_app_event+0x1e4>)
1000bcbe:	4798      	blx	r3
    if (scanned_dev_count) {
1000bcc0:	2c00      	cmp	r4, #0
1000bcc2:	d100      	bne.n	1000bcc6 <ble_scan_data_app_event+0x2a>
1000bcc4:	e0c0      	b.n	1000be48 <ble_scan_data_app_event+0x1ac>
1000bcc6:	4a6f      	ldr	r2, [pc, #444]	; (1000be84 <ble_scan_data_app_event+0x1e8>)
1000bcc8:	2300      	movs	r3, #0
1000bcca:	2100      	movs	r1, #0
1000bccc:	0008      	movs	r0, r1
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
            /* Display only the connectible devices*/
            if((scan_buffer[index].type == AT_BLE_ADV_TYPE_DIRECTED)
1000bcce:	7811      	ldrb	r1, [r2, #0]
1000bcd0:	2901      	cmp	r1, #1
1000bcd2:	d803      	bhi.n	1000bcdc <ble_scan_data_app_event+0x40>
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
1000bcd4:	1c41      	adds	r1, r0, #1
1000bcd6:	ad0e      	add	r5, sp, #56	; 0x38
1000bcd8:	542b      	strb	r3, [r5, r0]
1000bcda:	b2c8      	uxtb	r0, r1
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
    if (scanned_dev_count) {
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
1000bcdc:	3301      	adds	r3, #1
1000bcde:	b2db      	uxtb	r3, r3
1000bce0:	3229      	adds	r2, #41	; 0x29
1000bce2:	429c      	cmp	r4, r3
1000bce4:	d1f3      	bne.n	1000bcce <ble_scan_data_app_event+0x32>
1000bce6:	9007      	str	r0, [sp, #28]
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
            }
        }
        
        if (scan_device_count) {
1000bce8:	2800      	cmp	r0, #0
1000bcea:	d100      	bne.n	1000bcee <ble_scan_data_app_event+0x52>
1000bcec:	e083      	b.n	1000bdf6 <ble_scan_data_app_event+0x15a>
            /* Service type to be searched */
            service_uuid.type = AT_BLE_UUID_16;
1000bcee:	ab09      	add	r3, sp, #36	; 0x24
1000bcf0:	2200      	movs	r2, #0
1000bcf2:	701a      	strb	r2, [r3, #0]

            /* Service UUID */
            service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
1000bcf4:	3218      	adds	r2, #24
1000bcf6:	709a      	strb	r2, [r3, #2]
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
1000bcf8:	3a15      	subs	r2, #21
1000bcfa:	705a      	strb	r2, [r3, #1]
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
1000bcfc:	aa13      	add	r2, sp, #76	; 0x4c
1000bcfe:	4b62      	ldr	r3, [pc, #392]	; (1000be88 <ble_scan_data_app_event+0x1ec>)
1000bd00:	cb03      	ldmia	r3!, {r0, r1}
1000bd02:	c203      	stmia	r2!, {r0, r1}
1000bd04:	781b      	ldrb	r3, [r3, #0]
1000bd06:	7013      	strb	r3, [r2, #0]
1000bd08:	9b07      	ldr	r3, [sp, #28]
1000bd0a:	3b01      	subs	r3, #1
1000bd0c:	b2db      	uxtb	r3, r3
1000bd0e:	3301      	adds	r3, #1
1000bd10:	9304      	str	r3, [sp, #16]
1000bd12:	2300      	movs	r3, #0
1000bd14:	4699      	mov	r9, r3
1000bd16:	9306      	str	r3, [sp, #24]
1000bd18:	9305      	str	r3, [sp, #20]
1000bd1a:	464c      	mov	r4, r9
1000bd1c:	b2e3      	uxtb	r3, r4
1000bd1e:	469b      	mov	fp, r3
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bd20:	485a      	ldr	r0, [pc, #360]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000bd22:	4b5b      	ldr	r3, [pc, #364]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000bd24:	4798      	blx	r3
                index,
                scan_buffer[scan_device[index]].dev_addr.addr[5],
1000bd26:	ab0e      	add	r3, sp, #56	; 0x38
1000bd28:	5ce3      	ldrb	r3, [r4, r3]
1000bd2a:	009a      	lsls	r2, r3, #2
1000bd2c:	18d2      	adds	r2, r2, r3
1000bd2e:	00d2      	lsls	r2, r2, #3
1000bd30:	18d3      	adds	r3, r2, r3
1000bd32:	4a54      	ldr	r2, [pc, #336]	; (1000be84 <ble_scan_data_app_event+0x1e8>)
1000bd34:	4690      	mov	r8, r2
1000bd36:	4498      	add	r8, r3
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bd38:	4643      	mov	r3, r8
1000bd3a:	799b      	ldrb	r3, [r3, #6]
1000bd3c:	4642      	mov	r2, r8
1000bd3e:	79d2      	ldrb	r2, [r2, #7]
1000bd40:	4641      	mov	r1, r8
1000bd42:	7889      	ldrb	r1, [r1, #2]
1000bd44:	9103      	str	r1, [sp, #12]
1000bd46:	4641      	mov	r1, r8
1000bd48:	78c9      	ldrb	r1, [r1, #3]
1000bd4a:	9102      	str	r1, [sp, #8]
1000bd4c:	4641      	mov	r1, r8
1000bd4e:	7909      	ldrb	r1, [r1, #4]
1000bd50:	9101      	str	r1, [sp, #4]
1000bd52:	4641      	mov	r1, r8
1000bd54:	7949      	ldrb	r1, [r1, #5]
1000bd56:	9100      	str	r1, [sp, #0]
1000bd58:	4649      	mov	r1, r9
1000bd5a:	484e      	ldr	r0, [pc, #312]	; (1000be94 <ble_scan_data_app_event+0x1f8>)
1000bd5c:	4c4e      	ldr	r4, [pc, #312]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000bd5e:	47a0      	blx	r4
                scan_buffer[scan_device[index]].dev_addr.addr[3],
                scan_buffer[scan_device[index]].dev_addr.addr[2],
                scan_buffer[scan_device[index]].dev_addr.addr[1],
                scan_buffer[scan_device[index]].dev_addr.addr[0]);

                DBG_LOG_DEV("      - advertised data: 0x ");
1000bd60:	484a      	ldr	r0, [pc, #296]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000bd62:	4b4b      	ldr	r3, [pc, #300]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000bd64:	4798      	blx	r3
1000bd66:	484d      	ldr	r0, [pc, #308]	; (1000be9c <ble_scan_data_app_event+0x200>)
1000bd68:	47a0      	blx	r4
1000bd6a:	4644      	mov	r4, r8
1000bd6c:	3408      	adds	r4, #8
1000bd6e:	2327      	movs	r3, #39	; 0x27
1000bd70:	4443      	add	r3, r8
1000bd72:	469a      	mov	sl, r3
                uint8_t i = 0;
                uint8_t search_index = 0;
1000bd74:	2600      	movs	r6, #0
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
                    if(id1) {
                        DBG_LOG_DEV("%02x... looking for %02x", scan_buffer[scan_device[index]].adv_data[i], search_pattern1[search_index]);
1000bd76:	4f46      	ldr	r7, [pc, #280]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000bd78:	4844      	ldr	r0, [pc, #272]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000bd7a:	47b8      	blx	r7
1000bd7c:	ab13      	add	r3, sp, #76	; 0x4c
1000bd7e:	5d9d      	ldrb	r5, [r3, r6]
1000bd80:	7821      	ldrb	r1, [r4, #0]
1000bd82:	002a      	movs	r2, r5
1000bd84:	4846      	ldr	r0, [pc, #280]	; (1000bea0 <ble_scan_data_app_event+0x204>)
1000bd86:	4b44      	ldr	r3, [pc, #272]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000bd88:	4798      	blx	r3
                        if(scan_buffer[scan_device[index]].adv_data[i] == search_pattern1[search_index]) {
1000bd8a:	7823      	ldrb	r3, [r4, #0]
1000bd8c:	42ab      	cmp	r3, r5
1000bd8e:	d113      	bne.n	1000bdb8 <ble_scan_data_app_event+0x11c>
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
1000bd90:	0031      	movs	r1, r6
1000bd92:	4844      	ldr	r0, [pc, #272]	; (1000bea4 <ble_scan_data_app_event+0x208>)
1000bd94:	4b40      	ldr	r3, [pc, #256]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000bd96:	4798      	blx	r3
                            if(search_index < (sizeof(search_pattern1)-1)) {
1000bd98:	2e07      	cmp	r6, #7
1000bd9a:	d802      	bhi.n	1000bda2 <ble_scan_data_app_event+0x106>
                                search_index += 1;
1000bd9c:	3601      	adds	r6, #1
1000bd9e:	b2f6      	uxtb	r6, r6
1000bda0:	e00a      	b.n	1000bdb8 <ble_scan_data_app_event+0x11c>
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
1000bda2:	483a      	ldr	r0, [pc, #232]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000bda4:	4b3a      	ldr	r3, [pc, #232]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000bda6:	4798      	blx	r3
1000bda8:	483f      	ldr	r0, [pc, #252]	; (1000bea8 <ble_scan_data_app_event+0x20c>)
1000bdaa:	4b3b      	ldr	r3, [pc, #236]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000bdac:	4798      	blx	r3
                                device_identified = true;
                                device_index = index;
                                break;
1000bdae:	465b      	mov	r3, fp
1000bdb0:	9306      	str	r3, [sp, #24]
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
                            if(search_index < (sizeof(search_pattern1)-1)) {
                                search_index += 1;
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
                                device_identified = true;
1000bdb2:	2301      	movs	r3, #1
1000bdb4:	9305      	str	r3, [sp, #20]
                                device_index = index;
                                break;
1000bdb6:	e002      	b.n	1000bdbe <ble_scan_data_app_event+0x122>
1000bdb8:	3401      	adds	r4, #1
                DBG_LOG_DEV("      - advertised data: 0x ");
                uint8_t i = 0;
                uint8_t search_index = 0;
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
1000bdba:	4554      	cmp	r4, sl
1000bdbc:	d1dc      	bne.n	1000bd78 <ble_scan_data_app_event+0xdc>
                            }
                        }
                    }
                }
                
                if (scan_info_parse(&scan_buffer[scan_device[index]], &service_uuid, AD_TYPE_COMPLETE_LIST_UUID) == AT_BLE_SUCCESS) {
1000bdbe:	2203      	movs	r2, #3
1000bdc0:	a909      	add	r1, sp, #36	; 0x24
1000bdc2:	4640      	mov	r0, r8
1000bdc4:	4b39      	ldr	r3, [pc, #228]	; (1000beac <ble_scan_data_app_event+0x210>)
1000bdc6:	4798      	blx	r3
1000bdc8:	2800      	cmp	r0, #0
1000bdca:	d109      	bne.n	1000bde0 <ble_scan_data_app_event+0x144>
                    /* Device Service UUID  matched */
                    supp_scan_index[scan_index++] = index;
1000bdcc:	4a2b      	ldr	r2, [pc, #172]	; (1000be7c <ble_scan_data_app_event+0x1e0>)
1000bdce:	7813      	ldrb	r3, [r2, #0]
1000bdd0:	1c59      	adds	r1, r3, #1
1000bdd2:	7011      	strb	r1, [r2, #0]
1000bdd4:	4a36      	ldr	r2, [pc, #216]	; (1000beb0 <ble_scan_data_app_event+0x214>)
1000bdd6:	4659      	mov	r1, fp
1000bdd8:	54d1      	strb	r1, [r2, r3]
                    DBG_LOG_CONT("---PXP");
1000bdda:	4836      	ldr	r0, [pc, #216]	; (1000beb4 <ble_scan_data_app_event+0x218>)
1000bddc:	4b2e      	ldr	r3, [pc, #184]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000bdde:	4798      	blx	r3
1000bde0:	464b      	mov	r3, r9
1000bde2:	3301      	adds	r3, #1
1000bde4:	4699      	mov	r9, r3
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
1000bde6:	9a04      	ldr	r2, [sp, #16]
1000bde8:	429a      	cmp	r2, r3
1000bdea:	d196      	bne.n	1000bd1a <ble_scan_data_app_event+0x7e>
                    DBG_LOG_CONT("---PXP");
                }
            }
        }

        if (!scan_index)  {
1000bdec:	4b23      	ldr	r3, [pc, #140]	; (1000be7c <ble_scan_data_app_event+0x1e0>)
1000bdee:	781b      	ldrb	r3, [r3, #0]
1000bdf0:	2b00      	cmp	r3, #0
1000bdf2:	d134      	bne.n	1000be5e <ble_scan_data_app_event+0x1c2>
1000bdf4:	e002      	b.n	1000bdfc <ble_scan_data_app_event+0x160>
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
    uint8_t device_index = 0;
1000bdf6:	2300      	movs	r3, #0
1000bdf8:	9306      	str	r3, [sp, #24]
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
1000bdfa:	9305      	str	r3, [sp, #20]
                }
            }
        }

        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
1000bdfc:	4823      	ldr	r0, [pc, #140]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000bdfe:	4b24      	ldr	r3, [pc, #144]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000be00:	4798      	blx	r3
1000be02:	482d      	ldr	r0, [pc, #180]	; (1000beb8 <ble_scan_data_app_event+0x21c>)
1000be04:	4b24      	ldr	r3, [pc, #144]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000be06:	4798      	blx	r3
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000be08:	4b2c      	ldr	r3, [pc, #176]	; (1000bebc <ble_scan_data_app_event+0x220>)
1000be0a:	4798      	blx	r3
        
        if(device_identified) {
1000be0c:	9b05      	ldr	r3, [sp, #20]
1000be0e:	2b00      	cmp	r3, #0
1000be10:	d00c      	beq.n	1000be2c <ble_scan_data_app_event+0x190>
            DBG_LOG_DEV("Compatible device found");
1000be12:	481e      	ldr	r0, [pc, #120]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000be14:	4b1e      	ldr	r3, [pc, #120]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000be16:	4798      	blx	r3
1000be18:	4829      	ldr	r0, [pc, #164]	; (1000bec0 <ble_scan_data_app_event+0x224>)
1000be1a:	4b1f      	ldr	r3, [pc, #124]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000be1c:	4798      	blx	r3
            return pxp_monitor_connect_request(scan_buffer, scan_device[device_index]);
1000be1e:	ab0e      	add	r3, sp, #56	; 0x38
1000be20:	9a06      	ldr	r2, [sp, #24]
1000be22:	5c99      	ldrb	r1, [r3, r2]
1000be24:	4817      	ldr	r0, [pc, #92]	; (1000be84 <ble_scan_data_app_event+0x1e8>)
1000be26:	4b27      	ldr	r3, [pc, #156]	; (1000bec4 <ble_scan_data_app_event+0x228>)
1000be28:	4798      	blx	r3
1000be2a:	e01e      	b.n	1000be6a <ble_scan_data_app_event+0x1ce>
        }
        /*Updating the index pointer to connect */
        else if(scan_device_count) {
1000be2c:	9b07      	ldr	r3, [sp, #28]
1000be2e:	2b00      	cmp	r3, #0
1000be30:	d008      	beq.n	1000be44 <ble_scan_data_app_event+0x1a8>
            /* Successful device found event*/
            DBG_LOG_DEV("NO compatible device found");
1000be32:	4816      	ldr	r0, [pc, #88]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000be34:	4b16      	ldr	r3, [pc, #88]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000be36:	4798      	blx	r3
1000be38:	4823      	ldr	r0, [pc, #140]	; (1000bec8 <ble_scan_data_app_event+0x22c>)
1000be3a:	4b17      	ldr	r3, [pc, #92]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000be3c:	4798      	blx	r3
            app_state = SMS_RUNNING;
1000be3e:	2202      	movs	r2, #2
1000be40:	4b22      	ldr	r3, [pc, #136]	; (1000becc <ble_scan_data_app_event+0x230>)
1000be42:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000be44:	20e2      	movs	r0, #226	; 0xe2
1000be46:	e010      	b.n	1000be6a <ble_scan_data_app_event+0x1ce>
            //}
        }
    }
    else {
        /* from no device found event*/
        DBG_LOG_DEV("Nothing found");
1000be48:	4810      	ldr	r0, [pc, #64]	; (1000be8c <ble_scan_data_app_event+0x1f0>)
1000be4a:	4b11      	ldr	r3, [pc, #68]	; (1000be90 <ble_scan_data_app_event+0x1f4>)
1000be4c:	4798      	blx	r3
1000be4e:	4820      	ldr	r0, [pc, #128]	; (1000bed0 <ble_scan_data_app_event+0x234>)
1000be50:	4b11      	ldr	r3, [pc, #68]	; (1000be98 <ble_scan_data_app_event+0x1fc>)
1000be52:	4798      	blx	r3
        app_state = SMS_RUNNING;
1000be54:	2202      	movs	r2, #2
1000be56:	4b1d      	ldr	r3, [pc, #116]	; (1000becc <ble_scan_data_app_event+0x230>)
1000be58:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000be5a:	20e2      	movs	r0, #226	; 0xe2
1000be5c:	e005      	b.n	1000be6a <ble_scan_data_app_event+0x1ce>
        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000be5e:	4b17      	ldr	r3, [pc, #92]	; (1000bebc <ble_scan_data_app_event+0x220>)
1000be60:	4798      	blx	r3
        
        if(device_identified) {
1000be62:	9b05      	ldr	r3, [sp, #20]
1000be64:	2b00      	cmp	r3, #0
1000be66:	d0e4      	beq.n	1000be32 <ble_scan_data_app_event+0x196>
1000be68:	e7d3      	b.n	1000be12 <ble_scan_data_app_event+0x176>
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
}
1000be6a:	b017      	add	sp, #92	; 0x5c
1000be6c:	bc3c      	pop	{r2, r3, r4, r5}
1000be6e:	4690      	mov	r8, r2
1000be70:	4699      	mov	r9, r3
1000be72:	46a2      	mov	sl, r4
1000be74:	46ab      	mov	fp, r5
1000be76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be78:	10012ad8 	.word	0x10012ad8
1000be7c:	10012ad0 	.word	0x10012ad0
1000be80:	1000ff49 	.word	0x1000ff49
1000be84:	10013080 	.word	0x10013080
1000be88:	10012180 	.word	0x10012180
1000be8c:	1001141c 	.word	0x1001141c
1000be90:	10010079 	.word	0x10010079
1000be94:	1001175c 	.word	0x1001175c
1000be98:	1000ff59 	.word	0x1000ff59
1000be9c:	100126f0 	.word	0x100126f0
1000bea0:	10012710 	.word	0x10012710
1000bea4:	1001272c 	.word	0x1001272c
1000bea8:	10012744 	.word	0x10012744
1000beac:	1000ab8d 	.word	0x1000ab8d
1000beb0:	100139ac 	.word	0x100139ac
1000beb4:	1001179c 	.word	0x1001179c
1000beb8:	100117f0 	.word	0x100117f0
1000bebc:	1000cd15 	.word	0x1000cd15
1000bec0:	1001275c 	.word	0x1001275c
1000bec4:	10009925 	.word	0x10009925
1000bec8:	10012774 	.word	0x10012774
1000becc:	1001393c 	.word	0x1001393c
1000bed0:	10012790 	.word	0x10012790

1000bed4 <sms_gateway_discover_services>:
        DBG_LOG("Scanning failed generic error");
    }
}

at_ble_status_t sms_gateway_discover_services(at_ble_handle_t handle)
{
1000bed4:	b510      	push	{r4, lr}
    at_ble_status_t status;
    status = at_ble_primary_service_discover_all(handle, GATT_DISCOVERY_STARTING_HANDLE, GATT_DISCOVERY_ENDING_HANDLE);
1000bed6:	4a0b      	ldr	r2, [pc, #44]	; (1000bf04 <sms_gateway_discover_services+0x30>)
1000bed8:	2101      	movs	r1, #1
1000beda:	4b0b      	ldr	r3, [pc, #44]	; (1000bf08 <sms_gateway_discover_services+0x34>)
1000bedc:	4798      	blx	r3
    if(status != AT_BLE_SUCCESS) {
1000bede:	2800      	cmp	r0, #0
1000bee0:	d007      	beq.n	1000bef2 <sms_gateway_discover_services+0x1e>
        DBG_LOG("GATT service discovery request failed");
1000bee2:	480a      	ldr	r0, [pc, #40]	; (1000bf0c <sms_gateway_discover_services+0x38>)
1000bee4:	4b0a      	ldr	r3, [pc, #40]	; (1000bf10 <sms_gateway_discover_services+0x3c>)
1000bee6:	4798      	blx	r3
1000bee8:	480a      	ldr	r0, [pc, #40]	; (1000bf14 <sms_gateway_discover_services+0x40>)
1000beea:	4b0b      	ldr	r3, [pc, #44]	; (1000bf18 <sms_gateway_discover_services+0x44>)
1000beec:	4798      	blx	r3
        return AT_BLE_FAILURE;
1000beee:	20e2      	movs	r0, #226	; 0xe2
1000bef0:	e006      	b.n	1000bf00 <sms_gateway_discover_services+0x2c>
        } else {
        DBG_LOG_DEV("GATT service discovery request started");
1000bef2:	4806      	ldr	r0, [pc, #24]	; (1000bf0c <sms_gateway_discover_services+0x38>)
1000bef4:	4b06      	ldr	r3, [pc, #24]	; (1000bf10 <sms_gateway_discover_services+0x3c>)
1000bef6:	4798      	blx	r3
1000bef8:	4808      	ldr	r0, [pc, #32]	; (1000bf1c <sms_gateway_discover_services+0x48>)
1000befa:	4b07      	ldr	r3, [pc, #28]	; (1000bf18 <sms_gateway_discover_services+0x44>)
1000befc:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000befe:	2000      	movs	r0, #0
    }
}
1000bf00:	bd10      	pop	{r4, pc}
1000bf02:	46c0      	nop			; (mov r8, r8)
1000bf04:	0000ffff 	.word	0x0000ffff
1000bf08:	1000ce81 	.word	0x1000ce81
1000bf0c:	1001141c 	.word	0x1001141c
1000bf10:	10010079 	.word	0x10010079
1000bf14:	100127a0 	.word	0x100127a0
1000bf18:	1000ff59 	.word	0x1000ff59
1000bf1c:	100127c8 	.word	0x100127c8

1000bf20 <ble_paired_app_event>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *params)
{
1000bf20:	b570      	push	{r4, r5, r6, lr}
1000bf22:	0004      	movs	r4, r0
    DBG_LOG_DEV("Devices paired...");
1000bf24:	481d      	ldr	r0, [pc, #116]	; (1000bf9c <ble_paired_app_event+0x7c>)
1000bf26:	4b1e      	ldr	r3, [pc, #120]	; (1000bfa0 <ble_paired_app_event+0x80>)
1000bf28:	4798      	blx	r3
1000bf2a:	481e      	ldr	r0, [pc, #120]	; (1000bfa4 <ble_paired_app_event+0x84>)
1000bf2c:	4b1e      	ldr	r3, [pc, #120]	; (1000bfa8 <ble_paired_app_event+0x88>)
1000bf2e:	4798      	blx	r3
    at_ble_status_t discovery_status = AT_BLE_FAILURE;
    at_ble_pair_done_t *pair_done_val;
    pair_done_val = (at_ble_pair_done_t *)params;
	
	if(periph_counter == 0xff) {
1000bf30:	4b1e      	ldr	r3, [pc, #120]	; (1000bfac <ble_paired_app_event+0x8c>)
1000bf32:	781b      	ldrb	r3, [r3, #0]
1000bf34:	2bff      	cmp	r3, #255	; 0xff
1000bf36:	d109      	bne.n	1000bf4c <ble_paired_app_event+0x2c>
		periph_counter = 0;
1000bf38:	2200      	movs	r2, #0
1000bf3a:	4b1c      	ldr	r3, [pc, #112]	; (1000bfac <ble_paired_app_event+0x8c>)
1000bf3c:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("Registering first peripheral");
1000bf3e:	4817      	ldr	r0, [pc, #92]	; (1000bf9c <ble_paired_app_event+0x7c>)
1000bf40:	4b17      	ldr	r3, [pc, #92]	; (1000bfa0 <ble_paired_app_event+0x80>)
1000bf42:	4798      	blx	r3
1000bf44:	481a      	ldr	r0, [pc, #104]	; (1000bfb0 <ble_paired_app_event+0x90>)
1000bf46:	4b18      	ldr	r3, [pc, #96]	; (1000bfa8 <ble_paired_app_event+0x88>)
1000bf48:	4798      	blx	r3
1000bf4a:	e014      	b.n	1000bf76 <ble_paired_app_event+0x56>
	}
	else if((periph_counter + 1) >= SMS_BLE_PERIPHERAL_MAX) {
1000bf4c:	1c5a      	adds	r2, r3, #1
1000bf4e:	2a04      	cmp	r2, #4
1000bf50:	dd07      	ble.n	1000bf62 <ble_paired_app_event+0x42>
		DBG_LOG_DEV("Maximum amount of peripherals reached!");
1000bf52:	4812      	ldr	r0, [pc, #72]	; (1000bf9c <ble_paired_app_event+0x7c>)
1000bf54:	4b12      	ldr	r3, [pc, #72]	; (1000bfa0 <ble_paired_app_event+0x80>)
1000bf56:	4798      	blx	r3
1000bf58:	4816      	ldr	r0, [pc, #88]	; (1000bfb4 <ble_paired_app_event+0x94>)
1000bf5a:	4b13      	ldr	r3, [pc, #76]	; (1000bfa8 <ble_paired_app_event+0x88>)
1000bf5c:	4798      	blx	r3
		return AT_BLE_ATT_INSUFF_RESOURCE;
1000bf5e:	2011      	movs	r0, #17
1000bf60:	e01b      	b.n	1000bf9a <ble_paired_app_event+0x7a>
	}
	else {
		periph_counter += 1;
1000bf62:	4d12      	ldr	r5, [pc, #72]	; (1000bfac <ble_paired_app_event+0x8c>)
1000bf64:	3301      	adds	r3, #1
1000bf66:	702b      	strb	r3, [r5, #0]
		DBG_LOG_DEV("Increasing peripheral counter: %d", periph_counter);
1000bf68:	480c      	ldr	r0, [pc, #48]	; (1000bf9c <ble_paired_app_event+0x7c>)
1000bf6a:	4b0d      	ldr	r3, [pc, #52]	; (1000bfa0 <ble_paired_app_event+0x80>)
1000bf6c:	4798      	blx	r3
1000bf6e:	7829      	ldrb	r1, [r5, #0]
1000bf70:	4811      	ldr	r0, [pc, #68]	; (1000bfb8 <ble_paired_app_event+0x98>)
1000bf72:	4b0d      	ldr	r3, [pc, #52]	; (1000bfa8 <ble_paired_app_event+0x88>)
1000bf74:	4798      	blx	r3
	}
	periph_instance[periph_counter].id = periph_counter;
1000bf76:	4b0d      	ldr	r3, [pc, #52]	; (1000bfac <ble_paired_app_event+0x8c>)
1000bf78:	781b      	ldrb	r3, [r3, #0]
1000bf7a:	4910      	ldr	r1, [pc, #64]	; (1000bfbc <ble_paired_app_event+0x9c>)
1000bf7c:	0098      	lsls	r0, r3, #2
1000bf7e:	18c2      	adds	r2, r0, r3
1000bf80:	0092      	lsls	r2, r2, #2
1000bf82:	5453      	strb	r3, [r2, r1]
	periph_instance[periph_counter].conn_handle = pair_done_val->handle;
1000bf84:	8862      	ldrh	r2, [r4, #2]
1000bf86:	18c3      	adds	r3, r0, r3
1000bf88:	009b      	lsls	r3, r3, #2
1000bf8a:	18cb      	adds	r3, r1, r3
1000bf8c:	805a      	strh	r2, [r3, #2]

    discovery_status = sms_gateway_discover_services(pair_done_val->handle);
1000bf8e:	8860      	ldrh	r0, [r4, #2]
1000bf90:	4b0b      	ldr	r3, [pc, #44]	; (1000bfc0 <ble_paired_app_event+0xa0>)
1000bf92:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_PAIRED;
1000bf94:	2203      	movs	r2, #3
1000bf96:	4b0b      	ldr	r3, [pc, #44]	; (1000bfc4 <ble_paired_app_event+0xa4>)
1000bf98:	701a      	strb	r2, [r3, #0]

    return discovery_status;
}
1000bf9a:	bd70      	pop	{r4, r5, r6, pc}
1000bf9c:	1001141c 	.word	0x1001141c
1000bfa0:	10010079 	.word	0x10010079
1000bfa4:	100127f0 	.word	0x100127f0
1000bfa8:	1000ff59 	.word	0x1000ff59
1000bfac:	100138f5 	.word	0x100138f5
1000bfb0:	10012804 	.word	0x10012804
1000bfb4:	10012824 	.word	0x10012824
1000bfb8:	1001284c 	.word	0x1001284c
1000bfbc:	10013940 	.word	0x10013940
1000bfc0:	1000bed5 	.word	0x1000bed5
1000bfc4:	10012bb4 	.word	0x10012bb4

1000bfc8 <main>:
	spi_send = false;
	spi_enable(&spi_master_instance);
}

int main(void)
{
1000bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bfca:	4657      	mov	r7, sl
1000bfcc:	464e      	mov	r6, r9
1000bfce:	4645      	mov	r5, r8
1000bfd0:	b4e0      	push	{r5, r6, r7}
1000bfd2:	b08c      	sub	sp, #48	; 0x30
    app_state = SMS_STARTING;
1000bfd4:	2200      	movs	r2, #0
1000bfd6:	4b7e      	ldr	r3, [pc, #504]	; (1000c1d0 <main+0x208>)
1000bfd8:	701a      	strb	r2, [r3, #0]

    platform_driver_init();
1000bfda:	4b7e      	ldr	r3, [pc, #504]	; (1000c1d4 <main+0x20c>)
1000bfdc:	4798      	blx	r3
    acquire_sleep_lock();
1000bfde:	4b7e      	ldr	r3, [pc, #504]	; (1000c1d8 <main+0x210>)
1000bfe0:	4798      	blx	r3

    /* Initialize serial console */
    serial_console_init();
1000bfe2:	4b7e      	ldr	r3, [pc, #504]	; (1000c1dc <main+0x214>)
1000bfe4:	4798      	blx	r3
}

static void sms_gpio_init(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000bfe6:	ac02      	add	r4, sp, #8
1000bfe8:	0020      	movs	r0, r4
1000bfea:	4b7d      	ldr	r3, [pc, #500]	; (1000c1e0 <main+0x218>)
1000bfec:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000bfee:	2301      	movs	r3, #1
1000bff0:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(dbg_gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000bff2:	4b7c      	ldr	r3, [pc, #496]	; (1000c1e4 <main+0x21c>)
1000bff4:	7818      	ldrb	r0, [r3, #0]
1000bff6:	0021      	movs	r1, r4
1000bff8:	4b7b      	ldr	r3, [pc, #492]	; (1000c1e8 <main+0x220>)
1000bffa:	4798      	blx	r3
1000bffc:	2800      	cmp	r0, #0
1000bffe:	d005      	beq.n	1000c00c <main+0x44>
        DBG_LOG("Problem while setting gpio pin");
1000c000:	487a      	ldr	r0, [pc, #488]	; (1000c1ec <main+0x224>)
1000c002:	4b7b      	ldr	r3, [pc, #492]	; (1000c1f0 <main+0x228>)
1000c004:	4798      	blx	r3
1000c006:	487b      	ldr	r0, [pc, #492]	; (1000c1f4 <main+0x22c>)
1000c008:	4b7b      	ldr	r3, [pc, #492]	; (1000c1f8 <main+0x230>)
1000c00a:	4798      	blx	r3
    }
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
1000c00c:	4b7b      	ldr	r3, [pc, #492]	; (1000c1fc <main+0x234>)
1000c00e:	7819      	ldrb	r1, [r3, #0]
1000c010:	b2c9      	uxtb	r1, r1
1000c012:	4b74      	ldr	r3, [pc, #464]	; (1000c1e4 <main+0x21c>)
1000c014:	7818      	ldrb	r0, [r3, #0]
1000c016:	4b7a      	ldr	r3, [pc, #488]	; (1000c200 <main+0x238>)
1000c018:	4798      	blx	r3
    /* button initialization */
    //button_init(button_cb);

    sms_gpio_init();
    
    hw_timer_register_callback(timer_callback_fn);
1000c01a:	487a      	ldr	r0, [pc, #488]	; (1000c204 <main+0x23c>)
1000c01c:	4b7a      	ldr	r3, [pc, #488]	; (1000c208 <main+0x240>)
1000c01e:	4798      	blx	r3

static void configure_spi_master(void)
{
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_slave_inst_get_config_defaults(&slave_dev_config);
1000c020:	ac01      	add	r4, sp, #4
1000c022:	0020      	movs	r0, r4
1000c024:	4b79      	ldr	r3, [pc, #484]	; (1000c20c <main+0x244>)
1000c026:	4798      	blx	r3
	slave_dev_config.ss_pin = CONF_SPI_PIN_SSN;
1000c028:	2310      	movs	r3, #16
1000c02a:	7023      	strb	r3, [r4, #0]
	spi_attach_slave(&spi_slave, &slave_dev_config);
1000c02c:	0021      	movs	r1, r4
1000c02e:	4878      	ldr	r0, [pc, #480]	; (1000c210 <main+0x248>)
1000c030:	4b78      	ldr	r3, [pc, #480]	; (1000c214 <main+0x24c>)
1000c032:	4798      	blx	r3
	spi_get_config_defaults(&config_spi_master);
1000c034:	ac02      	add	r4, sp, #8
1000c036:	0020      	movs	r0, r4
1000c038:	4b77      	ldr	r3, [pc, #476]	; (1000c218 <main+0x250>)
1000c03a:	4798      	blx	r3
	config_spi_master.transfer_mode = CONF_SPI_TRANSFER_MODE;
1000c03c:	2700      	movs	r7, #0
1000c03e:	70a7      	strb	r7, [r4, #2]
	config_spi_master.clock_divider = 150;
1000c040:	2396      	movs	r3, #150	; 0x96
1000c042:	7123      	strb	r3, [r4, #4]
	config_spi_master.pin_number_pad[0] = CONF_SPI_PIN_SCK;
1000c044:	3b85      	subs	r3, #133	; 0x85
1000c046:	60a3      	str	r3, [r4, #8]
	config_spi_master.pinmux_sel_pad[0] = CONF_SPI_MUX_SCK;
1000c048:	3b0d      	subs	r3, #13
1000c04a:	61a3      	str	r3, [r4, #24]
	config_spi_master.pin_number_pad[1] = CONF_SPI_PIN_MOSI;
1000c04c:	2213      	movs	r2, #19
1000c04e:	60e2      	str	r2, [r4, #12]
	config_spi_master.pinmux_sel_pad[1] = CONF_SPI_MUX_MOSI;
1000c050:	61e3      	str	r3, [r4, #28]
	config_spi_master.pin_number_pad[2] = PINMUX_UNUSED;
1000c052:	2501      	movs	r5, #1
1000c054:	426d      	negs	r5, r5
1000c056:	6125      	str	r5, [r4, #16]
	config_spi_master.pinmux_sel_pad[2] = PINMUX_UNUSED;
1000c058:	6225      	str	r5, [r4, #32]
	config_spi_master.pin_number_pad[3] = CONF_SPI_PIN_MISO;
1000c05a:	3a01      	subs	r2, #1
1000c05c:	6162      	str	r2, [r4, #20]
	config_spi_master.pinmux_sel_pad[3] = CONF_SPI_MUX_MISO;
1000c05e:	6263      	str	r3, [r4, #36]	; 0x24
	spi_init(&spi_master_instance, CONF_SPI, &config_spi_master);
1000c060:	4e6e      	ldr	r6, [pc, #440]	; (1000c21c <main+0x254>)
1000c062:	0022      	movs	r2, r4
1000c064:	496e      	ldr	r1, [pc, #440]	; (1000c220 <main+0x258>)
1000c066:	0030      	movs	r0, r6
1000c068:	4b6e      	ldr	r3, [pc, #440]	; (1000c224 <main+0x25c>)
1000c06a:	4798      	blx	r3
	spi_send = false;
1000c06c:	4b6e      	ldr	r3, [pc, #440]	; (1000c228 <main+0x260>)
1000c06e:	701f      	strb	r7, [r3, #0]
	spi_enable(&spi_master_instance);
1000c070:	0030      	movs	r0, r6
1000c072:	4b6e      	ldr	r3, [pc, #440]	; (1000c22c <main+0x264>)
1000c074:	4798      	blx	r3
    
    hw_timer_register_callback(timer_callback_fn);
	
	configure_spi_master();

    DBG_LOG("Initializing BLE Application");
1000c076:	485d      	ldr	r0, [pc, #372]	; (1000c1ec <main+0x224>)
1000c078:	4b5d      	ldr	r3, [pc, #372]	; (1000c1f0 <main+0x228>)
1000c07a:	4798      	blx	r3
1000c07c:	486c      	ldr	r0, [pc, #432]	; (1000c230 <main+0x268>)
1000c07e:	4b5e      	ldr	r3, [pc, #376]	; (1000c1f8 <main+0x230>)
1000c080:	4798      	blx	r3
    
    /* initialize the BLE chip and Set the Device Address */
    ble_device_init(NULL);
1000c082:	2000      	movs	r0, #0
1000c084:	4b6b      	ldr	r3, [pc, #428]	; (1000c234 <main+0x26c>)
1000c086:	4798      	blx	r3

    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_gateway_app_gap_cb);
1000c088:	4a6b      	ldr	r2, [pc, #428]	; (1000c238 <main+0x270>)
1000c08a:	2100      	movs	r1, #0
1000c08c:	2000      	movs	r0, #0
1000c08e:	4c6b      	ldr	r4, [pc, #428]	; (1000c23c <main+0x274>)
1000c090:	47a0      	blx	r4
    

    /* Register callbacks for GATT CLIENT related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_CLIENT_EVENT_TYPE, sms_gateway_app_gatt_client_cb);
1000c092:	4a6b      	ldr	r2, [pc, #428]	; (1000c240 <main+0x278>)
1000c094:	2101      	movs	r1, #1
1000c096:	2000      	movs	r0, #0
1000c098:	47a0      	blx	r4
    //
    //app_state = SMS_RUNNING;

    //sms_gateway_init();

    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
1000c09a:	486a      	ldr	r0, [pc, #424]	; (1000c244 <main+0x27c>)
1000c09c:	4b6a      	ldr	r3, [pc, #424]	; (1000c248 <main+0x280>)
1000c09e:	4798      	blx	r3
    register_hw_timer_stop_func_cb(hw_timer_stop);
1000c0a0:	486a      	ldr	r0, [pc, #424]	; (1000c24c <main+0x284>)
1000c0a2:	4b6b      	ldr	r3, [pc, #428]	; (1000c250 <main+0x288>)
1000c0a4:	4798      	blx	r3
    
	periph_counter = 0xFF;
1000c0a6:	4b6b      	ldr	r3, [pc, #428]	; (1000c254 <main+0x28c>)
1000c0a8:	701d      	strb	r5, [r3, #0]
1000c0aa:	4b6b      	ldr	r3, [pc, #428]	; (1000c258 <main+0x290>)
1000c0ac:	001d      	movs	r5, r3
1000c0ae:	3564      	adds	r5, #100	; 0x64
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
1000c0b0:	21ff      	movs	r1, #255	; 0xff
		periph_instance[i].conn_handle = 0xffff;
1000c0b2:	2401      	movs	r4, #1
1000c0b4:	4264      	negs	r4, r4
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c0b6:	2200      	movs	r2, #0
			periph_instance[i].service_handle_range[j][0] = 0xff;
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c0b8:	2000      	movs	r0, #0
    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
    register_hw_timer_stop_func_cb(hw_timer_stop);
    
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
1000c0ba:	7019      	strb	r1, [r3, #0]
		periph_instance[i].conn_handle = 0xffff;
1000c0bc:	805c      	strh	r4, [r3, #2]
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c0be:	711a      	strb	r2, [r3, #4]
			periph_instance[i].service_handle_range[j][0] = 0xff;
1000c0c0:	8119      	strh	r1, [r3, #8]
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c0c2:	815a      	strh	r2, [r3, #10]
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
		periph_instance[i].conn_handle = 0xffff;
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c0c4:	7158      	strb	r0, [r3, #5]
			periph_instance[i].service_handle_range[j][0] = 0xff;
1000c0c6:	8199      	strh	r1, [r3, #12]
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c0c8:	81da      	strh	r2, [r3, #14]
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
		periph_instance[i].conn_handle = 0xffff;
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c0ca:	7198      	strb	r0, [r3, #6]
			periph_instance[i].service_handle_range[j][0] = 0xff;
1000c0cc:	8219      	strh	r1, [r3, #16]
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c0ce:	825a      	strh	r2, [r3, #18]
1000c0d0:	3314      	adds	r3, #20

    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
    register_hw_timer_stop_func_cb(hw_timer_stop);
    
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
1000c0d2:	42ab      	cmp	r3, r5
1000c0d4:	d1f1      	bne.n	1000c0ba <main+0xf2>
		}
	}
	
	while(1)
	{
		buffer[0] = 0;
1000c0d6:	4b61      	ldr	r3, [pc, #388]	; (1000c25c <main+0x294>)
1000c0d8:	469a      	mov	sl, r3
1000c0da:	2300      	movs	r3, #0
1000c0dc:	4699      	mov	r9, r3
		buffer[1] = rand() % 3;
1000c0de:	4b60      	ldr	r3, [pc, #384]	; (1000c260 <main+0x298>)
1000c0e0:	4698      	mov	r8, r3
		}
	}
	
	while(1)
	{
		buffer[0] = 0;
1000c0e2:	4653      	mov	r3, sl
1000c0e4:	464a      	mov	r2, r9
1000c0e6:	701a      	strb	r2, [r3, #0]
		buffer[1] = rand() % 3;
1000c0e8:	47c0      	blx	r8
1000c0ea:	2103      	movs	r1, #3
1000c0ec:	4b5d      	ldr	r3, [pc, #372]	; (1000c264 <main+0x29c>)
1000c0ee:	4798      	blx	r3
1000c0f0:	b2c9      	uxtb	r1, r1
1000c0f2:	4653      	mov	r3, sl
1000c0f4:	7059      	strb	r1, [r3, #1]
		buffer[2] = (buffer[1] == 0 ? 1 : (buffer[1] == 1 ? 8 : 12));
1000c0f6:	2301      	movs	r3, #1
1000c0f8:	2900      	cmp	r1, #0
1000c0fa:	d004      	beq.n	1000c106 <main+0x13e>
1000c0fc:	2901      	cmp	r1, #1
1000c0fe:	d001      	beq.n	1000c104 <main+0x13c>
1000c100:	330b      	adds	r3, #11
1000c102:	e000      	b.n	1000c106 <main+0x13e>
1000c104:	2308      	movs	r3, #8
1000c106:	4c55      	ldr	r4, [pc, #340]	; (1000c25c <main+0x294>)
1000c108:	70a3      	strb	r3, [r4, #2]
		DBG_LOG_DEV("[0]: 0, [1]: %d, [2]: %d, [3]: ", buffer[1], buffer[2]);
1000c10a:	4838      	ldr	r0, [pc, #224]	; (1000c1ec <main+0x224>)
1000c10c:	4b38      	ldr	r3, [pc, #224]	; (1000c1f0 <main+0x228>)
1000c10e:	4798      	blx	r3
1000c110:	78a2      	ldrb	r2, [r4, #2]
1000c112:	7861      	ldrb	r1, [r4, #1]
1000c114:	4854      	ldr	r0, [pc, #336]	; (1000c268 <main+0x2a0>)
1000c116:	4b38      	ldr	r3, [pc, #224]	; (1000c1f8 <main+0x230>)
1000c118:	4798      	blx	r3
		for(uint8_t i = 0; i < buffer[2]; i++) {
1000c11a:	78a3      	ldrb	r3, [r4, #2]
1000c11c:	2b00      	cmp	r3, #0
1000c11e:	d012      	beq.n	1000c146 <main+0x17e>
1000c120:	2400      	movs	r4, #0
			buffer[i+3] = rand() % 0xff;
1000c122:	4f4f      	ldr	r7, [pc, #316]	; (1000c260 <main+0x298>)
1000c124:	4e4f      	ldr	r6, [pc, #316]	; (1000c264 <main+0x29c>)
1000c126:	4d4d      	ldr	r5, [pc, #308]	; (1000c25c <main+0x294>)
1000c128:	47b8      	blx	r7
1000c12a:	21ff      	movs	r1, #255	; 0xff
1000c12c:	47b0      	blx	r6
1000c12e:	192b      	adds	r3, r5, r4
1000c130:	70d9      	strb	r1, [r3, #3]
			DBG_LOG_CONT_DEV("%d ", buffer[i+3]);
1000c132:	23ff      	movs	r3, #255	; 0xff
1000c134:	4019      	ands	r1, r3
1000c136:	484d      	ldr	r0, [pc, #308]	; (1000c26c <main+0x2a4>)
1000c138:	4b2f      	ldr	r3, [pc, #188]	; (1000c1f8 <main+0x230>)
1000c13a:	4798      	blx	r3
	{
		buffer[0] = 0;
		buffer[1] = rand() % 3;
		buffer[2] = (buffer[1] == 0 ? 1 : (buffer[1] == 1 ? 8 : 12));
		DBG_LOG_DEV("[0]: 0, [1]: %d, [2]: %d, [3]: ", buffer[1], buffer[2]);
		for(uint8_t i = 0; i < buffer[2]; i++) {
1000c13c:	3401      	adds	r4, #1
1000c13e:	b2e4      	uxtb	r4, r4
1000c140:	78ab      	ldrb	r3, [r5, #2]
1000c142:	42a3      	cmp	r3, r4
1000c144:	d8f0      	bhi.n	1000c128 <main+0x160>
			buffer[i+3] = rand() % 0xff;
			DBG_LOG_CONT_DEV("%d ", buffer[i+3]);
		}
		spi_select_slave(&spi_master_instance, &spi_slave, true);
1000c146:	4d32      	ldr	r5, [pc, #200]	; (1000c210 <main+0x248>)
1000c148:	4c34      	ldr	r4, [pc, #208]	; (1000c21c <main+0x254>)
1000c14a:	2201      	movs	r2, #1
1000c14c:	0029      	movs	r1, r5
1000c14e:	0020      	movs	r0, r4
1000c150:	4e47      	ldr	r6, [pc, #284]	; (1000c270 <main+0x2a8>)
1000c152:	47b0      	blx	r6
		spi_write_buffer_wait(&spi_master_instance, buffer, SPI_BUF_LENGTH);
1000c154:	2240      	movs	r2, #64	; 0x40
1000c156:	4941      	ldr	r1, [pc, #260]	; (1000c25c <main+0x294>)
1000c158:	0020      	movs	r0, r4
1000c15a:	4b46      	ldr	r3, [pc, #280]	; (1000c274 <main+0x2ac>)
1000c15c:	4798      	blx	r3
		spi_select_slave(&spi_master_instance, &spi_slave, false);
1000c15e:	2200      	movs	r2, #0
1000c160:	0029      	movs	r1, r5
1000c162:	0020      	movs	r0, r4
1000c164:	47b0      	blx	r6
		uint32_t delay1 = 500000;
		while(delay1--) {};
1000c166:	4b44      	ldr	r3, [pc, #272]	; (1000c278 <main+0x2b0>)
1000c168:	3b01      	subs	r3, #1
1000c16a:	2b00      	cmp	r3, #0
1000c16c:	d1fc      	bne.n	1000c168 <main+0x1a0>
		if(!gpio_pin_get_input_level(BUTTON_0_PIN)) {
1000c16e:	2017      	movs	r0, #23
1000c170:	4b42      	ldr	r3, [pc, #264]	; (1000c27c <main+0x2b4>)
1000c172:	4798      	blx	r3
1000c174:	2800      	cmp	r0, #0
1000c176:	d125      	bne.n	1000c1c4 <main+0x1fc>
}

static void sms_int_button2_fn(void)
{
    //sms_gateway_init();
	buffer[0] = 4;
1000c178:	4c38      	ldr	r4, [pc, #224]	; (1000c25c <main+0x294>)
1000c17a:	2304      	movs	r3, #4
1000c17c:	7023      	strb	r3, [r4, #0]
	buffer[1] = rand() % 3;
1000c17e:	4b38      	ldr	r3, [pc, #224]	; (1000c260 <main+0x298>)
1000c180:	4798      	blx	r3
1000c182:	2103      	movs	r1, #3
1000c184:	4b37      	ldr	r3, [pc, #220]	; (1000c264 <main+0x29c>)
1000c186:	4798      	blx	r3
1000c188:	7061      	strb	r1, [r4, #1]
	buffer[2] = 0xff;
1000c18a:	23ff      	movs	r3, #255	; 0xff
1000c18c:	70a3      	strb	r3, [r4, #2]
	DBG_LOG_DEV("[0]: 4, [1]: %d, [2]: %d", buffer[1], buffer[2]);
1000c18e:	4817      	ldr	r0, [pc, #92]	; (1000c1ec <main+0x224>)
1000c190:	4b17      	ldr	r3, [pc, #92]	; (1000c1f0 <main+0x228>)
1000c192:	4798      	blx	r3
1000c194:	78a2      	ldrb	r2, [r4, #2]
1000c196:	7861      	ldrb	r1, [r4, #1]
1000c198:	4839      	ldr	r0, [pc, #228]	; (1000c280 <main+0x2b8>)
1000c19a:	4b17      	ldr	r3, [pc, #92]	; (1000c1f8 <main+0x230>)
1000c19c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &spi_slave, true);
1000c19e:	4e1c      	ldr	r6, [pc, #112]	; (1000c210 <main+0x248>)
1000c1a0:	4f1e      	ldr	r7, [pc, #120]	; (1000c21c <main+0x254>)
1000c1a2:	2201      	movs	r2, #1
1000c1a4:	0031      	movs	r1, r6
1000c1a6:	0038      	movs	r0, r7
1000c1a8:	4d31      	ldr	r5, [pc, #196]	; (1000c270 <main+0x2a8>)
1000c1aa:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_master_instance, buffer, SPI_BUF_LENGTH);
1000c1ac:	2240      	movs	r2, #64	; 0x40
1000c1ae:	0021      	movs	r1, r4
1000c1b0:	0038      	movs	r0, r7
1000c1b2:	4b30      	ldr	r3, [pc, #192]	; (1000c274 <main+0x2ac>)
1000c1b4:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &spi_slave, false);
1000c1b6:	2200      	movs	r2, #0
1000c1b8:	0031      	movs	r1, r6
1000c1ba:	0038      	movs	r0, r7
1000c1bc:	47a8      	blx	r5
    app_state = SMS_RUNNING;
1000c1be:	2202      	movs	r2, #2
1000c1c0:	4b03      	ldr	r3, [pc, #12]	; (1000c1d0 <main+0x208>)
1000c1c2:	701a      	strb	r2, [r3, #0]
		while(delay1--) {};
		if(!gpio_pin_get_input_level(BUTTON_0_PIN)) {
			sms_int_button2_fn();
		}
		uint32_t delay2 = 500000;
		while(delay2--) {};
1000c1c4:	4b2c      	ldr	r3, [pc, #176]	; (1000c278 <main+0x2b0>)
1000c1c6:	3b01      	subs	r3, #1
1000c1c8:	2b00      	cmp	r3, #0
1000c1ca:	d1fc      	bne.n	1000c1c6 <main+0x1fe>
1000c1cc:	e789      	b.n	1000c0e2 <main+0x11a>
1000c1ce:	46c0      	nop			; (mov r8, r8)
1000c1d0:	1001393c 	.word	0x1001393c
1000c1d4:	1000b0c9 	.word	0x1000b0c9
1000c1d8:	1000b599 	.word	0x1000b599
1000c1dc:	1000ad2d 	.word	0x1000ad2d
1000c1e0:	10008171 	.word	0x10008171
1000c1e4:	10012a30 	.word	0x10012a30
1000c1e8:	10008181 	.word	0x10008181
1000c1ec:	1001141c 	.word	0x1001141c
1000c1f0:	10010079 	.word	0x10010079
1000c1f4:	10012870 	.word	0x10012870
1000c1f8:	1000ff59 	.word	0x1000ff59
1000c1fc:	10012bf8 	.word	0x10012bf8
1000c200:	1000831d 	.word	0x1000831d
1000c204:	1000b739 	.word	0x1000b739
1000c208:	1000aecd 	.word	0x1000aecd
1000c20c:	100084c5 	.word	0x100084c5
1000c210:	100138f8 	.word	0x100138f8
1000c214:	100084fd 	.word	0x100084fd
1000c218:	100084d1 	.word	0x100084d1
1000c21c:	100139a4 	.word	0x100139a4
1000c220:	40007000 	.word	0x40007000
1000c224:	100085cd 	.word	0x100085cd
1000c228:	100138f4 	.word	0x100138f4
1000c22c:	1000853d 	.word	0x1000853d
1000c230:	10012890 	.word	0x10012890
1000c234:	1000a8e9 	.word	0x1000a8e9
1000c238:	10012388 	.word	0x10012388
1000c23c:	1000a819 	.word	0x1000a819
1000c240:	100128f0 	.word	0x100128f0
1000c244:	1000af01 	.word	0x1000af01
1000c248:	1000999d 	.word	0x1000999d
1000c24c:	1000af2d 	.word	0x1000af2d
1000c250:	100099a9 	.word	0x100099a9
1000c254:	100138f5 	.word	0x100138f5
1000c258:	10013940 	.word	0x10013940
1000c25c:	10012bb8 	.word	0x10012bb8
1000c260:	1001008d 	.word	0x1001008d
1000c264:	1000ef39 	.word	0x1000ef39
1000c268:	100128b0 	.word	0x100128b0
1000c26c:	100128d0 	.word	0x100128d0
1000c270:	100087bd 	.word	0x100087bd
1000c274:	100087ad 	.word	0x100087ad
1000c278:	0007a121 	.word	0x0007a121
1000c27c:	100082e9 	.word	0x100082e9
1000c280:	100128d4 	.word	0x100128d4

1000c284 <internal_event_post>:
1000c284:	b570      	push	{r4, r5, r6, lr}
1000c286:	4d0c      	ldr	r5, [pc, #48]	; (1000c2b8 <internal_event_post+0x34>)
1000c288:	682c      	ldr	r4, [r5, #0]
1000c28a:	2c00      	cmp	r4, #0
1000c28c:	d013      	beq.n	1000c2b6 <internal_event_post+0x32>
1000c28e:	6826      	ldr	r6, [r4, #0]
1000c290:	60e2      	str	r2, [r4, #12]
1000c292:	602e      	str	r6, [r5, #0]
1000c294:	2500      	movs	r5, #0
1000c296:	4a09      	ldr	r2, [pc, #36]	; (1000c2bc <internal_event_post+0x38>)
1000c298:	8123      	strh	r3, [r4, #8]
1000c29a:	6813      	ldr	r3, [r2, #0]
1000c29c:	6025      	str	r5, [r4, #0]
1000c29e:	80a0      	strh	r0, [r4, #4]
1000c2a0:	80e1      	strh	r1, [r4, #6]
1000c2a2:	42ab      	cmp	r3, r5
1000c2a4:	d101      	bne.n	1000c2aa <internal_event_post+0x26>
1000c2a6:	6014      	str	r4, [r2, #0]
1000c2a8:	e005      	b.n	1000c2b6 <internal_event_post+0x32>
1000c2aa:	681a      	ldr	r2, [r3, #0]
1000c2ac:	2a00      	cmp	r2, #0
1000c2ae:	d001      	beq.n	1000c2b4 <internal_event_post+0x30>
1000c2b0:	1c13      	adds	r3, r2, #0
1000c2b2:	e7fa      	b.n	1000c2aa <internal_event_post+0x26>
1000c2b4:	601c      	str	r4, [r3, #0]
1000c2b6:	bd70      	pop	{r4, r5, r6, pc}
1000c2b8:	10012ca4 	.word	0x10012ca4
1000c2bc:	10012ca0 	.word	0x10012ca0

1000c2c0 <internal_event_init>:
1000c2c0:	4b08      	ldr	r3, [pc, #32]	; (1000c2e4 <internal_event_init+0x24>)
1000c2c2:	2200      	movs	r2, #0
1000c2c4:	1c19      	adds	r1, r3, #0
1000c2c6:	b510      	push	{r4, lr}
1000c2c8:	6818      	ldr	r0, [r3, #0]
1000c2ca:	4b07      	ldr	r3, [pc, #28]	; (1000c2e8 <internal_event_init+0x28>)
1000c2cc:	189c      	adds	r4, r3, r2
1000c2ce:	50d0      	str	r0, [r2, r3]
1000c2d0:	3210      	adds	r2, #16
1000c2d2:	1c20      	adds	r0, r4, #0
1000c2d4:	2aa0      	cmp	r2, #160	; 0xa0
1000c2d6:	d1f8      	bne.n	1000c2ca <internal_event_init+0xa>
1000c2d8:	2200      	movs	r2, #0
1000c2da:	3390      	adds	r3, #144	; 0x90
1000c2dc:	600b      	str	r3, [r1, #0]
1000c2de:	4b03      	ldr	r3, [pc, #12]	; (1000c2ec <internal_event_init+0x2c>)
1000c2e0:	601a      	str	r2, [r3, #0]
1000c2e2:	bd10      	pop	{r4, pc}
1000c2e4:	10012ca4 	.word	0x10012ca4
1000c2e8:	10012c00 	.word	0x10012c00
1000c2ec:	10012ca0 	.word	0x10012ca0

1000c2f0 <special_events_handler>:
1000c2f0:	b538      	push	{r3, r4, r5, lr}
1000c2f2:	4c1b      	ldr	r4, [pc, #108]	; (1000c360 <special_events_handler+0x70>)
1000c2f4:	1c03      	adds	r3, r0, #0
1000c2f6:	8825      	ldrh	r5, [r4, #0]
1000c2f8:	1c08      	adds	r0, r1, #0
1000c2fa:	1c21      	adds	r1, r4, #0
1000c2fc:	429d      	cmp	r5, r3
1000c2fe:	d107      	bne.n	1000c310 <special_events_handler+0x20>
1000c300:	88a5      	ldrh	r5, [r4, #4]
1000c302:	4285      	cmp	r5, r0
1000c304:	d104      	bne.n	1000c310 <special_events_handler+0x20>
1000c306:	2301      	movs	r3, #1
1000c308:	425b      	negs	r3, r3
1000c30a:	8023      	strh	r3, [r4, #0]
1000c30c:	60a2      	str	r2, [r4, #8]
1000c30e:	e009      	b.n	1000c324 <special_events_handler+0x34>
1000c310:	884c      	ldrh	r4, [r1, #2]
1000c312:	429c      	cmp	r4, r3
1000c314:	d10a      	bne.n	1000c32c <special_events_handler+0x3c>
1000c316:	888c      	ldrh	r4, [r1, #4]
1000c318:	4284      	cmp	r4, r0
1000c31a:	d107      	bne.n	1000c32c <special_events_handler+0x3c>
1000c31c:	2301      	movs	r3, #1
1000c31e:	425b      	negs	r3, r3
1000c320:	804b      	strh	r3, [r1, #2]
1000c322:	608a      	str	r2, [r1, #8]
1000c324:	4b0f      	ldr	r3, [pc, #60]	; (1000c364 <special_events_handler+0x74>)
1000c326:	4798      	blx	r3
1000c328:	2001      	movs	r0, #1
1000c32a:	e017      	b.n	1000c35c <special_events_handler+0x6c>
1000c32c:	490e      	ldr	r1, [pc, #56]	; (1000c368 <special_events_handler+0x78>)
1000c32e:	428b      	cmp	r3, r1
1000c330:	d00e      	beq.n	1000c350 <special_events_handler+0x60>
1000c332:	490e      	ldr	r1, [pc, #56]	; (1000c36c <special_events_handler+0x7c>)
1000c334:	428b      	cmp	r3, r1
1000c336:	d007      	beq.n	1000c348 <special_events_handler+0x58>
1000c338:	490d      	ldr	r1, [pc, #52]	; (1000c370 <special_events_handler+0x80>)
1000c33a:	2000      	movs	r0, #0
1000c33c:	428b      	cmp	r3, r1
1000c33e:	d10d      	bne.n	1000c35c <special_events_handler+0x6c>
1000c340:	1c10      	adds	r0, r2, #0
1000c342:	4b0c      	ldr	r3, [pc, #48]	; (1000c374 <special_events_handler+0x84>)
1000c344:	4798      	blx	r3
1000c346:	e7ef      	b.n	1000c328 <special_events_handler+0x38>
1000c348:	1c11      	adds	r1, r2, #0
1000c34a:	4b0b      	ldr	r3, [pc, #44]	; (1000c378 <special_events_handler+0x88>)
1000c34c:	2200      	movs	r2, #0
1000c34e:	e002      	b.n	1000c356 <special_events_handler+0x66>
1000c350:	1c11      	adds	r1, r2, #0
1000c352:	2200      	movs	r2, #0
1000c354:	4b09      	ldr	r3, [pc, #36]	; (1000c37c <special_events_handler+0x8c>)
1000c356:	4798      	blx	r3
1000c358:	4243      	negs	r3, r0
1000c35a:	4158      	adcs	r0, r3
1000c35c:	bd38      	pop	{r3, r4, r5, pc}
1000c35e:	46c0      	nop			; (mov r8, r8)
1000c360:	100139c0 	.word	0x100139c0
1000c364:	1000d4c9 	.word	0x1000d4c9
1000c368:	00000e13 	.word	0x00000e13
1000c36c:	00000e15 	.word	0x00000e15
1000c370:	00000e01 	.word	0x00000e01
1000c374:	1000d839 	.word	0x1000d839
1000c378:	1000d9f9 	.word	0x1000d9f9
1000c37c:	1000dad1 	.word	0x1000dad1

1000c380 <at_ble_event_get>:
1000c380:	2300      	movs	r3, #0
1000c382:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c384:	b085      	sub	sp, #20
1000c386:	9202      	str	r2, [sp, #8]
1000c388:	7003      	strb	r3, [r0, #0]
1000c38a:	9b02      	ldr	r3, [sp, #8]
1000c38c:	9001      	str	r0, [sp, #4]
1000c38e:	3b01      	subs	r3, #1
1000c390:	1c0d      	adds	r5, r1, #0
1000c392:	9303      	str	r3, [sp, #12]
1000c394:	3303      	adds	r3, #3
1000c396:	d802      	bhi.n	1000c39e <at_ble_event_get+0x1e>
1000c398:	9802      	ldr	r0, [sp, #8]
1000c39a:	4bad      	ldr	r3, [pc, #692]	; (1000c650 <at_ble_event_get+0x2d0>)
1000c39c:	4798      	blx	r3
1000c39e:	9b03      	ldr	r3, [sp, #12]
1000c3a0:	4fac      	ldr	r7, [pc, #688]	; (1000c654 <at_ble_event_get+0x2d4>)
1000c3a2:	2400      	movs	r4, #0
1000c3a4:	3303      	adds	r3, #3
1000c3a6:	d812      	bhi.n	1000c3ce <at_ble_event_get+0x4e>
1000c3a8:	683b      	ldr	r3, [r7, #0]
1000c3aa:	2b00      	cmp	r3, #0
1000c3ac:	d112      	bne.n	1000c3d4 <at_ble_event_get+0x54>
1000c3ae:	2cd0      	cmp	r4, #208	; 0xd0
1000c3b0:	d100      	bne.n	1000c3b4 <at_ble_event_get+0x34>
1000c3b2:	e29c      	b.n	1000c8ee <at_ble_event_get+0x56e>
1000c3b4:	9802      	ldr	r0, [sp, #8]
1000c3b6:	4ba8      	ldr	r3, [pc, #672]	; (1000c658 <at_ble_event_get+0x2d8>)
1000c3b8:	4798      	blx	r3
1000c3ba:	1e04      	subs	r4, r0, #0
1000c3bc:	2c02      	cmp	r4, #2
1000c3be:	d1f3      	bne.n	1000c3a8 <at_ble_event_get+0x28>
1000c3c0:	e025      	b.n	1000c40e <at_ble_event_get+0x8e>
1000c3c2:	9802      	ldr	r0, [sp, #8]
1000c3c4:	4ba4      	ldr	r3, [pc, #656]	; (1000c658 <at_ble_event_get+0x2d8>)
1000c3c6:	4798      	blx	r3
1000c3c8:	1e04      	subs	r4, r0, #0
1000c3ca:	2c02      	cmp	r4, #2
1000c3cc:	d01f      	beq.n	1000c40e <at_ble_event_get+0x8e>
1000c3ce:	683b      	ldr	r3, [r7, #0]
1000c3d0:	2b00      	cmp	r3, #0
1000c3d2:	d0f6      	beq.n	1000c3c2 <at_ble_event_get+0x42>
1000c3d4:	2cd0      	cmp	r4, #208	; 0xd0
1000c3d6:	d100      	bne.n	1000c3da <at_ble_event_get+0x5a>
1000c3d8:	e289      	b.n	1000c8ee <at_ble_event_get+0x56e>
1000c3da:	1ee3      	subs	r3, r4, #3
1000c3dc:	1e5a      	subs	r2, r3, #1
1000c3de:	4193      	sbcs	r3, r2
1000c3e0:	6838      	ldr	r0, [r7, #0]
1000c3e2:	425b      	negs	r3, r3
1000c3e4:	401c      	ands	r4, r3
1000c3e6:	2800      	cmp	r0, #0
1000c3e8:	d100      	bne.n	1000c3ec <at_ble_event_get+0x6c>
1000c3ea:	e286      	b.n	1000c8fa <at_ble_event_get+0x57a>
1000c3ec:	6803      	ldr	r3, [r0, #0]
1000c3ee:	68c1      	ldr	r1, [r0, #12]
1000c3f0:	603b      	str	r3, [r7, #0]
1000c3f2:	4f9a      	ldr	r7, [pc, #616]	; (1000c65c <at_ble_event_get+0x2dc>)
1000c3f4:	88c2      	ldrh	r2, [r0, #6]
1000c3f6:	683e      	ldr	r6, [r7, #0]
1000c3f8:	8883      	ldrh	r3, [r0, #4]
1000c3fa:	6006      	str	r6, [r0, #0]
1000c3fc:	6038      	str	r0, [r7, #0]
1000c3fe:	2c00      	cmp	r4, #0
1000c400:	d112      	bne.n	1000c428 <at_ble_event_get+0xa8>
1000c402:	4897      	ldr	r0, [pc, #604]	; (1000c660 <at_ble_event_get+0x2e0>)
1000c404:	4283      	cmp	r3, r0
1000c406:	d008      	beq.n	1000c41a <at_ble_event_get+0x9a>
1000c408:	4896      	ldr	r0, [pc, #600]	; (1000c664 <at_ble_event_get+0x2e4>)
1000c40a:	4283      	cmp	r3, r0
1000c40c:	d11d      	bne.n	1000c44a <at_ble_event_get+0xca>
1000c40e:	233a      	movs	r3, #58	; 0x3a
1000c410:	2400      	movs	r4, #0
1000c412:	9a01      	ldr	r2, [sp, #4]
1000c414:	1c25      	adds	r5, r4, #0
1000c416:	7013      	strb	r3, [r2, #0]
1000c418:	e006      	b.n	1000c428 <at_ble_event_get+0xa8>
1000c41a:	429a      	cmp	r2, r3
1000c41c:	d000      	beq.n	1000c420 <at_ble_event_get+0xa0>
1000c41e:	e268      	b.n	1000c8f2 <at_ble_event_get+0x572>
1000c420:	2338      	movs	r3, #56	; 0x38
1000c422:	9a01      	ldr	r2, [sp, #4]
1000c424:	7013      	strb	r3, [r2, #0]
1000c426:	6029      	str	r1, [r5, #0]
1000c428:	9b01      	ldr	r3, [sp, #4]
1000c42a:	781b      	ldrb	r3, [r3, #0]
1000c42c:	2b3b      	cmp	r3, #59	; 0x3b
1000c42e:	d003      	beq.n	1000c438 <at_ble_event_get+0xb8>
1000c430:	9b03      	ldr	r3, [sp, #12]
1000c432:	3303      	adds	r3, #3
1000c434:	d903      	bls.n	1000c43e <at_ble_event_get+0xbe>
1000c436:	e264      	b.n	1000c902 <at_ble_event_get+0x582>
1000c438:	2c00      	cmp	r4, #0
1000c43a:	d0b0      	beq.n	1000c39e <at_ble_event_get+0x1e>
1000c43c:	e7f8      	b.n	1000c430 <at_ble_event_get+0xb0>
1000c43e:	2cd0      	cmp	r4, #208	; 0xd0
1000c440:	d100      	bne.n	1000c444 <at_ble_event_get+0xc4>
1000c442:	e25e      	b.n	1000c902 <at_ble_event_get+0x582>
1000c444:	4b88      	ldr	r3, [pc, #544]	; (1000c668 <at_ble_event_get+0x2e8>)
1000c446:	4798      	blx	r3
1000c448:	e25b      	b.n	1000c902 <at_ble_event_get+0x582>
1000c44a:	2abb      	cmp	r2, #187	; 0xbb
1000c44c:	d123      	bne.n	1000c496 <at_ble_event_get+0x116>
1000c44e:	2bbb      	cmp	r3, #187	; 0xbb
1000c450:	d121      	bne.n	1000c496 <at_ble_event_get+0x116>
1000c452:	80ac      	strh	r4, [r5, #4]
1000c454:	788b      	ldrb	r3, [r1, #2]
1000c456:	784a      	ldrb	r2, [r1, #1]
1000c458:	021b      	lsls	r3, r3, #8
1000c45a:	78cf      	ldrb	r7, [r1, #3]
1000c45c:	7908      	ldrb	r0, [r1, #4]
1000c45e:	4313      	orrs	r3, r2
1000c460:	794a      	ldrb	r2, [r1, #5]
1000c462:	4982      	ldr	r1, [pc, #520]	; (1000c66c <at_ble_event_get+0x2ec>)
1000c464:	70af      	strb	r7, [r5, #2]
1000c466:	802b      	strh	r3, [r5, #0]
1000c468:	428b      	cmp	r3, r1
1000c46a:	d806      	bhi.n	1000c47a <at_ble_event_get+0xfa>
1000c46c:	4a80      	ldr	r2, [pc, #512]	; (1000c670 <at_ble_event_get+0x2f0>)
1000c46e:	4293      	cmp	r3, r2
1000c470:	d20b      	bcs.n	1000c48a <at_ble_event_get+0x10a>
1000c472:	4a80      	ldr	r2, [pc, #512]	; (1000c674 <at_ble_event_get+0x2f4>)
1000c474:	4293      	cmp	r3, r2
1000c476:	d008      	beq.n	1000c48a <at_ble_event_get+0x10a>
1000c478:	e009      	b.n	1000c48e <at_ble_event_get+0x10e>
1000c47a:	497f      	ldr	r1, [pc, #508]	; (1000c678 <at_ble_event_get+0x2f8>)
1000c47c:	428b      	cmp	r3, r1
1000c47e:	d106      	bne.n	1000c48e <at_ble_event_get+0x10e>
1000c480:	0213      	lsls	r3, r2, #8
1000c482:	4303      	orrs	r3, r0
1000c484:	80ab      	strh	r3, [r5, #4]
1000c486:	2337      	movs	r3, #55	; 0x37
1000c488:	e002      	b.n	1000c490 <at_ble_event_get+0x110>
1000c48a:	2336      	movs	r3, #54	; 0x36
1000c48c:	e000      	b.n	1000c490 <at_ble_event_get+0x110>
1000c48e:	2300      	movs	r3, #0
1000c490:	9a01      	ldr	r2, [sp, #4]
1000c492:	7013      	strb	r3, [r2, #0]
1000c494:	e7c8      	b.n	1000c428 <at_ble_event_get+0xa8>
1000c496:	4879      	ldr	r0, [pc, #484]	; (1000c67c <at_ble_event_get+0x2fc>)
1000c498:	4283      	cmp	r3, r0
1000c49a:	d100      	bne.n	1000c49e <at_ble_event_get+0x11e>
1000c49c:	e14c      	b.n	1000c738 <at_ble_event_get+0x3b8>
1000c49e:	d864      	bhi.n	1000c56a <at_ble_event_get+0x1ea>
1000c4a0:	4877      	ldr	r0, [pc, #476]	; (1000c680 <at_ble_event_get+0x300>)
1000c4a2:	4283      	cmp	r3, r0
1000c4a4:	d100      	bne.n	1000c4a8 <at_ble_event_get+0x128>
1000c4a6:	e1cd      	b.n	1000c844 <at_ble_event_get+0x4c4>
1000c4a8:	d82f      	bhi.n	1000c50a <at_ble_event_get+0x18a>
1000c4aa:	4876      	ldr	r0, [pc, #472]	; (1000c684 <at_ble_event_get+0x304>)
1000c4ac:	4283      	cmp	r3, r0
1000c4ae:	d100      	bne.n	1000c4b2 <at_ble_event_get+0x132>
1000c4b0:	e1d6      	b.n	1000c860 <at_ble_event_get+0x4e0>
1000c4b2:	d813      	bhi.n	1000c4dc <at_ble_event_get+0x15c>
1000c4b4:	4874      	ldr	r0, [pc, #464]	; (1000c688 <at_ble_event_get+0x308>)
1000c4b6:	4283      	cmp	r3, r0
1000c4b8:	d100      	bne.n	1000c4bc <at_ble_event_get+0x13c>
1000c4ba:	e19f      	b.n	1000c7fc <at_ble_event_get+0x47c>
1000c4bc:	d804      	bhi.n	1000c4c8 <at_ble_event_get+0x148>
1000c4be:	2438      	movs	r4, #56	; 0x38
1000c4c0:	42a3      	cmp	r3, r4
1000c4c2:	d100      	bne.n	1000c4c6 <at_ble_event_get+0x146>
1000c4c4:	e20f      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c4c6:	e0b6      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c4c8:	4870      	ldr	r0, [pc, #448]	; (1000c68c <at_ble_event_get+0x30c>)
1000c4ca:	4283      	cmp	r3, r0
1000c4cc:	d100      	bne.n	1000c4d0 <at_ble_event_get+0x150>
1000c4ce:	e19b      	b.n	1000c808 <at_ble_event_get+0x488>
1000c4d0:	30fe      	adds	r0, #254	; 0xfe
1000c4d2:	30ff      	adds	r0, #255	; 0xff
1000c4d4:	4283      	cmp	r3, r0
1000c4d6:	d100      	bne.n	1000c4da <at_ble_event_get+0x15a>
1000c4d8:	e1c8      	b.n	1000c86c <at_ble_event_get+0x4ec>
1000c4da:	e0ac      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c4dc:	486c      	ldr	r0, [pc, #432]	; (1000c690 <at_ble_event_get+0x310>)
1000c4de:	4283      	cmp	r3, r0
1000c4e0:	d100      	bne.n	1000c4e4 <at_ble_event_get+0x164>
1000c4e2:	e1a3      	b.n	1000c82c <at_ble_event_get+0x4ac>
1000c4e4:	d808      	bhi.n	1000c4f8 <at_ble_event_get+0x178>
1000c4e6:	486b      	ldr	r0, [pc, #428]	; (1000c694 <at_ble_event_get+0x314>)
1000c4e8:	4283      	cmp	r3, r0
1000c4ea:	d100      	bne.n	1000c4ee <at_ble_event_get+0x16e>
1000c4ec:	e192      	b.n	1000c814 <at_ble_event_get+0x494>
1000c4ee:	486a      	ldr	r0, [pc, #424]	; (1000c698 <at_ble_event_get+0x318>)
1000c4f0:	4283      	cmp	r3, r0
1000c4f2:	d100      	bne.n	1000c4f6 <at_ble_event_get+0x176>
1000c4f4:	e194      	b.n	1000c820 <at_ble_event_get+0x4a0>
1000c4f6:	e09e      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c4f8:	4868      	ldr	r0, [pc, #416]	; (1000c69c <at_ble_event_get+0x31c>)
1000c4fa:	4283      	cmp	r3, r0
1000c4fc:	d100      	bne.n	1000c500 <at_ble_event_get+0x180>
1000c4fe:	e19b      	b.n	1000c838 <at_ble_event_get+0x4b8>
1000c500:	4867      	ldr	r0, [pc, #412]	; (1000c6a0 <at_ble_event_get+0x320>)
1000c502:	4283      	cmp	r3, r0
1000c504:	d100      	bne.n	1000c508 <at_ble_event_get+0x188>
1000c506:	e1c5      	b.n	1000c894 <at_ble_event_get+0x514>
1000c508:	e095      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c50a:	4866      	ldr	r0, [pc, #408]	; (1000c6a4 <at_ble_event_get+0x324>)
1000c50c:	4283      	cmp	r3, r0
1000c50e:	d100      	bne.n	1000c512 <at_ble_event_get+0x192>
1000c510:	e1ba      	b.n	1000c888 <at_ble_event_get+0x508>
1000c512:	d812      	bhi.n	1000c53a <at_ble_event_get+0x1ba>
1000c514:	4864      	ldr	r0, [pc, #400]	; (1000c6a8 <at_ble_event_get+0x328>)
1000c516:	4283      	cmp	r3, r0
1000c518:	d100      	bne.n	1000c51c <at_ble_event_get+0x19c>
1000c51a:	e1c1      	b.n	1000c8a0 <at_ble_event_get+0x520>
1000c51c:	d804      	bhi.n	1000c528 <at_ble_event_get+0x1a8>
1000c51e:	4863      	ldr	r0, [pc, #396]	; (1000c6ac <at_ble_event_get+0x32c>)
1000c520:	4283      	cmp	r3, r0
1000c522:	d100      	bne.n	1000c526 <at_ble_event_get+0x1a6>
1000c524:	e192      	b.n	1000c84c <at_ble_event_get+0x4cc>
1000c526:	e086      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c528:	4861      	ldr	r0, [pc, #388]	; (1000c6b0 <at_ble_event_get+0x330>)
1000c52a:	4283      	cmp	r3, r0
1000c52c:	d100      	bne.n	1000c530 <at_ble_event_get+0x1b0>
1000c52e:	e1a1      	b.n	1000c874 <at_ble_event_get+0x4f4>
1000c530:	4860      	ldr	r0, [pc, #384]	; (1000c6b4 <at_ble_event_get+0x334>)
1000c532:	4283      	cmp	r3, r0
1000c534:	d100      	bne.n	1000c538 <at_ble_event_get+0x1b8>
1000c536:	e1a3      	b.n	1000c880 <at_ble_event_get+0x500>
1000c538:	e07d      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c53a:	4a5f      	ldr	r2, [pc, #380]	; (1000c6b8 <at_ble_event_get+0x338>)
1000c53c:	4293      	cmp	r3, r2
1000c53e:	d100      	bne.n	1000c542 <at_ble_event_get+0x1c2>
1000c540:	e07f      	b.n	1000c642 <at_ble_event_get+0x2c2>
1000c542:	d808      	bhi.n	1000c556 <at_ble_event_get+0x1d6>
1000c544:	3a08      	subs	r2, #8
1000c546:	4293      	cmp	r3, r2
1000c548:	d077      	beq.n	1000c63a <at_ble_event_get+0x2ba>
1000c54a:	4a5c      	ldr	r2, [pc, #368]	; (1000c6bc <at_ble_event_get+0x33c>)
1000c54c:	2439      	movs	r4, #57	; 0x39
1000c54e:	4293      	cmp	r3, r2
1000c550:	d100      	bne.n	1000c554 <at_ble_event_get+0x1d4>
1000c552:	e1c8      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c554:	e06f      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c556:	22d1      	movs	r2, #209	; 0xd1
1000c558:	0112      	lsls	r2, r2, #4
1000c55a:	4293      	cmp	r3, r2
1000c55c:	d100      	bne.n	1000c560 <at_ble_event_get+0x1e0>
1000c55e:	e0df      	b.n	1000c720 <at_ble_event_get+0x3a0>
1000c560:	4a57      	ldr	r2, [pc, #348]	; (1000c6c0 <at_ble_event_get+0x340>)
1000c562:	4293      	cmp	r3, r2
1000c564:	d100      	bne.n	1000c568 <at_ble_event_get+0x1e8>
1000c566:	e0e1      	b.n	1000c72c <at_ble_event_get+0x3ac>
1000c568:	e065      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c56a:	4856      	ldr	r0, [pc, #344]	; (1000c6c4 <at_ble_event_get+0x344>)
1000c56c:	4283      	cmp	r3, r0
1000c56e:	d100      	bne.n	1000c572 <at_ble_event_get+0x1f2>
1000c570:	e118      	b.n	1000c7a4 <at_ble_event_get+0x424>
1000c572:	d82e      	bhi.n	1000c5d2 <at_ble_event_get+0x252>
1000c574:	4854      	ldr	r0, [pc, #336]	; (1000c6c8 <at_ble_event_get+0x348>)
1000c576:	4283      	cmp	r3, r0
1000c578:	d100      	bne.n	1000c57c <at_ble_event_get+0x1fc>
1000c57a:	e13b      	b.n	1000c7f4 <at_ble_event_get+0x474>
1000c57c:	d812      	bhi.n	1000c5a4 <at_ble_event_get+0x224>
1000c57e:	4853      	ldr	r0, [pc, #332]	; (1000c6cc <at_ble_event_get+0x34c>)
1000c580:	4283      	cmp	r3, r0
1000c582:	d100      	bne.n	1000c586 <at_ble_event_get+0x206>
1000c584:	e0ee      	b.n	1000c764 <at_ble_event_get+0x3e4>
1000c586:	d804      	bhi.n	1000c592 <at_ble_event_get+0x212>
1000c588:	3803      	subs	r0, #3
1000c58a:	4283      	cmp	r3, r0
1000c58c:	d100      	bne.n	1000c590 <at_ble_event_get+0x210>
1000c58e:	e0d9      	b.n	1000c744 <at_ble_event_get+0x3c4>
1000c590:	e051      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c592:	484f      	ldr	r0, [pc, #316]	; (1000c6d0 <at_ble_event_get+0x350>)
1000c594:	4283      	cmp	r3, r0
1000c596:	d100      	bne.n	1000c59a <at_ble_event_get+0x21a>
1000c598:	e0d8      	b.n	1000c74c <at_ble_event_get+0x3cc>
1000c59a:	484e      	ldr	r0, [pc, #312]	; (1000c6d4 <at_ble_event_get+0x354>)
1000c59c:	4283      	cmp	r3, r0
1000c59e:	d100      	bne.n	1000c5a2 <at_ble_event_get+0x222>
1000c5a0:	e0fb      	b.n	1000c79a <at_ble_event_get+0x41a>
1000c5a2:	e048      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c5a4:	484c      	ldr	r0, [pc, #304]	; (1000c6d8 <at_ble_event_get+0x358>)
1000c5a6:	4283      	cmp	r3, r0
1000c5a8:	d100      	bne.n	1000c5ac <at_ble_event_get+0x22c>
1000c5aa:	e0e1      	b.n	1000c770 <at_ble_event_get+0x3f0>
1000c5ac:	d808      	bhi.n	1000c5c0 <at_ble_event_get+0x240>
1000c5ae:	484b      	ldr	r0, [pc, #300]	; (1000c6dc <at_ble_event_get+0x35c>)
1000c5b0:	4283      	cmp	r3, r0
1000c5b2:	d100      	bne.n	1000c5b6 <at_ble_event_get+0x236>
1000c5b4:	e11a      	b.n	1000c7ec <at_ble_event_get+0x46c>
1000c5b6:	484a      	ldr	r0, [pc, #296]	; (1000c6e0 <at_ble_event_get+0x360>)
1000c5b8:	4283      	cmp	r3, r0
1000c5ba:	d100      	bne.n	1000c5be <at_ble_event_get+0x23e>
1000c5bc:	e0dd      	b.n	1000c77a <at_ble_event_get+0x3fa>
1000c5be:	e03a      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c5c0:	4848      	ldr	r0, [pc, #288]	; (1000c6e4 <at_ble_event_get+0x364>)
1000c5c2:	4283      	cmp	r3, r0
1000c5c4:	d100      	bne.n	1000c5c8 <at_ble_event_get+0x248>
1000c5c6:	e0dc      	b.n	1000c782 <at_ble_event_get+0x402>
1000c5c8:	4847      	ldr	r0, [pc, #284]	; (1000c6e8 <at_ble_event_get+0x368>)
1000c5ca:	4283      	cmp	r3, r0
1000c5cc:	d100      	bne.n	1000c5d0 <at_ble_event_get+0x250>
1000c5ce:	e0de      	b.n	1000c78e <at_ble_event_get+0x40e>
1000c5d0:	e031      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c5d2:	4846      	ldr	r0, [pc, #280]	; (1000c6ec <at_ble_event_get+0x36c>)
1000c5d4:	4283      	cmp	r3, r0
1000c5d6:	d100      	bne.n	1000c5da <at_ble_event_get+0x25a>
1000c5d8:	e0f6      	b.n	1000c7c8 <at_ble_event_get+0x448>
1000c5da:	d816      	bhi.n	1000c60a <at_ble_event_get+0x28a>
1000c5dc:	4844      	ldr	r0, [pc, #272]	; (1000c6f0 <at_ble_event_get+0x370>)
1000c5de:	4283      	cmp	r3, r0
1000c5e0:	d100      	bne.n	1000c5e4 <at_ble_event_get+0x264>
1000c5e2:	e0f7      	b.n	1000c7d4 <at_ble_event_get+0x454>
1000c5e4:	d808      	bhi.n	1000c5f8 <at_ble_event_get+0x278>
1000c5e6:	4843      	ldr	r0, [pc, #268]	; (1000c6f4 <at_ble_event_get+0x374>)
1000c5e8:	4283      	cmp	r3, r0
1000c5ea:	d100      	bne.n	1000c5ee <at_ble_event_get+0x26e>
1000c5ec:	e0e0      	b.n	1000c7b0 <at_ble_event_get+0x430>
1000c5ee:	4842      	ldr	r0, [pc, #264]	; (1000c6f8 <at_ble_event_get+0x378>)
1000c5f0:	4283      	cmp	r3, r0
1000c5f2:	d100      	bne.n	1000c5f6 <at_ble_event_get+0x276>
1000c5f4:	e0b0      	b.n	1000c758 <at_ble_event_get+0x3d8>
1000c5f6:	e01e      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c5f8:	4a40      	ldr	r2, [pc, #256]	; (1000c6fc <at_ble_event_get+0x37c>)
1000c5fa:	4293      	cmp	r3, r2
1000c5fc:	d100      	bne.n	1000c600 <at_ble_event_get+0x280>
1000c5fe:	e0dd      	b.n	1000c7bc <at_ble_event_get+0x43c>
1000c600:	4a3f      	ldr	r2, [pc, #252]	; (1000c700 <at_ble_event_get+0x380>)
1000c602:	4293      	cmp	r3, r2
1000c604:	d100      	bne.n	1000c608 <at_ble_event_get+0x288>
1000c606:	e0eb      	b.n	1000c7e0 <at_ble_event_get+0x460>
1000c608:	e015      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c60a:	483e      	ldr	r0, [pc, #248]	; (1000c704 <at_ble_event_get+0x384>)
1000c60c:	4283      	cmp	r3, r0
1000c60e:	d100      	bne.n	1000c612 <at_ble_event_get+0x292>
1000c610:	e158      	b.n	1000c8c4 <at_ble_event_get+0x544>
1000c612:	d808      	bhi.n	1000c626 <at_ble_event_get+0x2a6>
1000c614:	483c      	ldr	r0, [pc, #240]	; (1000c708 <at_ble_event_get+0x388>)
1000c616:	4283      	cmp	r3, r0
1000c618:	d100      	bne.n	1000c61c <at_ble_event_get+0x29c>
1000c61a:	e147      	b.n	1000c8ac <at_ble_event_get+0x52c>
1000c61c:	483b      	ldr	r0, [pc, #236]	; (1000c70c <at_ble_event_get+0x38c>)
1000c61e:	4283      	cmp	r3, r0
1000c620:	d100      	bne.n	1000c624 <at_ble_event_get+0x2a4>
1000c622:	e149      	b.n	1000c8b8 <at_ble_event_get+0x538>
1000c624:	e007      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c626:	483a      	ldr	r0, [pc, #232]	; (1000c710 <at_ble_event_get+0x390>)
1000c628:	4283      	cmp	r3, r0
1000c62a:	d100      	bne.n	1000c62e <at_ble_event_get+0x2ae>
1000c62c:	e150      	b.n	1000c8d0 <at_ble_event_get+0x550>
1000c62e:	4839      	ldr	r0, [pc, #228]	; (1000c714 <at_ble_event_get+0x394>)
1000c630:	4283      	cmp	r3, r0
1000c632:	d100      	bne.n	1000c636 <at_ble_event_get+0x2b6>
1000c634:	e152      	b.n	1000c8dc <at_ble_event_get+0x55c>
1000c636:	2400      	movs	r4, #0
1000c638:	e155      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c63a:	1c08      	adds	r0, r1, #0
1000c63c:	4b36      	ldr	r3, [pc, #216]	; (1000c718 <at_ble_event_get+0x398>)
1000c63e:	1c29      	adds	r1, r5, #0
1000c640:	e07d      	b.n	1000c73e <at_ble_event_get+0x3be>
1000c642:	1c08      	adds	r0, r1, #0
1000c644:	4b35      	ldr	r3, [pc, #212]	; (1000c71c <at_ble_event_get+0x39c>)
1000c646:	1c29      	adds	r1, r5, #0
1000c648:	4798      	blx	r3
1000c64a:	2404      	movs	r4, #4
1000c64c:	e14b      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c64e:	46c0      	nop			; (mov r8, r8)
1000c650:	1000d501 	.word	0x1000d501
1000c654:	10012ca0 	.word	0x10012ca0
1000c658:	1000b335 	.word	0x1000b335
1000c65c:	10012ca4 	.word	0x10012ca4
1000c660:	0000ffff 	.word	0x0000ffff
1000c664:	0000fffe 	.word	0x0000fffe
1000c668:	1000d503 	.word	0x1000d503
1000c66c:	0000201e 	.word	0x0000201e
1000c670:	0000201d 	.word	0x0000201d
1000c674:	00000c03 	.word	0x00000c03
1000c678:	0000201f 	.word	0x0000201f
1000c67c:	00000d1c 	.word	0x00000d1c
1000c680:	00000c0c 	.word	0x00000c0c
1000c684:	00000c02 	.word	0x00000c02
1000c688:	00000a02 	.word	0x00000a02
1000c68c:	00000a03 	.word	0x00000a03
1000c690:	00000c06 	.word	0x00000c06
1000c694:	00000c04 	.word	0x00000c04
1000c698:	00000c05 	.word	0x00000c05
1000c69c:	00000c07 	.word	0x00000c07
1000c6a0:	00000c09 	.word	0x00000c09
1000c6a4:	00000c17 	.word	0x00000c17
1000c6a8:	00000c12 	.word	0x00000c12
1000c6ac:	00000c0d 	.word	0x00000c0d
1000c6b0:	00000c13 	.word	0x00000c13
1000c6b4:	00000c15 	.word	0x00000c15
1000c6b8:	00000d08 	.word	0x00000d08
1000c6bc:	00000d01 	.word	0x00000d01
1000c6c0:	00000d15 	.word	0x00000d15
1000c6c4:	00000e1b 	.word	0x00000e1b
1000c6c8:	00000e0f 	.word	0x00000e0f
1000c6cc:	00000e03 	.word	0x00000e03
1000c6d0:	00000e06 	.word	0x00000e06
1000c6d4:	00000e0a 	.word	0x00000e0a
1000c6d8:	00000e15 	.word	0x00000e15
1000c6dc:	00000e11 	.word	0x00000e11
1000c6e0:	00000e13 	.word	0x00000e13
1000c6e4:	00000e17 	.word	0x00000e17
1000c6e8:	00000e19 	.word	0x00000e19
1000c6ec:	00000e27 	.word	0x00000e27
1000c6f0:	00000e21 	.word	0x00000e21
1000c6f4:	00000e1c 	.word	0x00000e1c
1000c6f8:	00000e1d 	.word	0x00000e1d
1000c6fc:	00000e22 	.word	0x00000e22
1000c700:	00000e25 	.word	0x00000e25
1000c704:	00001b05 	.word	0x00001b05
1000c708:	00001b01 	.word	0x00001b01
1000c70c:	00001b03 	.word	0x00001b03
1000c710:	00001b06 	.word	0x00001b06
1000c714:	00001b08 	.word	0x00001b08
1000c718:	1000e2ed 	.word	0x1000e2ed
1000c71c:	1000e2d1 	.word	0x1000e2d1
1000c720:	1c08      	adds	r0, r1, #0
1000c722:	4b79      	ldr	r3, [pc, #484]	; (1000c908 <at_ble_event_get+0x588>)
1000c724:	1c29      	adds	r1, r5, #0
1000c726:	4798      	blx	r3
1000c728:	2401      	movs	r4, #1
1000c72a:	e0dc      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c72c:	1c08      	adds	r0, r1, #0
1000c72e:	4b77      	ldr	r3, [pc, #476]	; (1000c90c <at_ble_event_get+0x58c>)
1000c730:	1c29      	adds	r1, r5, #0
1000c732:	4798      	blx	r3
1000c734:	240f      	movs	r4, #15
1000c736:	e0d6      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c738:	1c08      	adds	r0, r1, #0
1000c73a:	1c29      	adds	r1, r5, #0
1000c73c:	4b74      	ldr	r3, [pc, #464]	; (1000c910 <at_ble_event_get+0x590>)
1000c73e:	4798      	blx	r3
1000c740:	1c04      	adds	r4, r0, #0
1000c742:	e0d0      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c744:	1c10      	adds	r0, r2, #0
1000c746:	4b73      	ldr	r3, [pc, #460]	; (1000c914 <at_ble_event_get+0x594>)
1000c748:	1c2a      	adds	r2, r5, #0
1000c74a:	e014      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c74c:	1c10      	adds	r0, r2, #0
1000c74e:	4b72      	ldr	r3, [pc, #456]	; (1000c918 <at_ble_event_get+0x598>)
1000c750:	1c2a      	adds	r2, r5, #0
1000c752:	4798      	blx	r3
1000c754:	2411      	movs	r4, #17
1000c756:	e0c6      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c758:	1c10      	adds	r0, r2, #0
1000c75a:	4b70      	ldr	r3, [pc, #448]	; (1000c91c <at_ble_event_get+0x59c>)
1000c75c:	1c2a      	adds	r2, r5, #0
1000c75e:	4798      	blx	r3
1000c760:	2412      	movs	r4, #18
1000c762:	e0c0      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c764:	1c08      	adds	r0, r1, #0
1000c766:	4b6e      	ldr	r3, [pc, #440]	; (1000c920 <at_ble_event_get+0x5a0>)
1000c768:	1c29      	adds	r1, r5, #0
1000c76a:	4798      	blx	r3
1000c76c:	2406      	movs	r4, #6
1000c76e:	e0ba      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c770:	1c10      	adds	r0, r2, #0
1000c772:	1c2a      	adds	r2, r5, #0
1000c774:	4b6b      	ldr	r3, [pc, #428]	; (1000c924 <at_ble_event_get+0x5a4>)
1000c776:	4798      	blx	r3
1000c778:	e7e2      	b.n	1000c740 <at_ble_event_get+0x3c0>
1000c77a:	1c10      	adds	r0, r2, #0
1000c77c:	4b6a      	ldr	r3, [pc, #424]	; (1000c928 <at_ble_event_get+0x5a8>)
1000c77e:	1c2a      	adds	r2, r5, #0
1000c780:	e7f9      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c782:	1c10      	adds	r0, r2, #0
1000c784:	4b69      	ldr	r3, [pc, #420]	; (1000c92c <at_ble_event_get+0x5ac>)
1000c786:	1c2a      	adds	r2, r5, #0
1000c788:	4798      	blx	r3
1000c78a:	240d      	movs	r4, #13
1000c78c:	e0ab      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c78e:	1c10      	adds	r0, r2, #0
1000c790:	4b67      	ldr	r3, [pc, #412]	; (1000c930 <at_ble_event_get+0x5b0>)
1000c792:	1c2a      	adds	r2, r5, #0
1000c794:	4798      	blx	r3
1000c796:	240e      	movs	r4, #14
1000c798:	e0a5      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c79a:	1c10      	adds	r0, r2, #0
1000c79c:	4b65      	ldr	r3, [pc, #404]	; (1000c934 <at_ble_event_get+0x5b4>)
1000c79e:	1c2a      	adds	r2, r5, #0
1000c7a0:	4798      	blx	r3
1000c7a2:	e075      	b.n	1000c890 <at_ble_event_get+0x510>
1000c7a4:	1c10      	adds	r0, r2, #0
1000c7a6:	4b64      	ldr	r3, [pc, #400]	; (1000c938 <at_ble_event_get+0x5b8>)
1000c7a8:	1c2a      	adds	r2, r5, #0
1000c7aa:	4798      	blx	r3
1000c7ac:	240b      	movs	r4, #11
1000c7ae:	e09a      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c7b0:	1c10      	adds	r0, r2, #0
1000c7b2:	4b62      	ldr	r3, [pc, #392]	; (1000c93c <at_ble_event_get+0x5bc>)
1000c7b4:	1c2a      	adds	r2, r5, #0
1000c7b6:	4798      	blx	r3
1000c7b8:	2410      	movs	r4, #16
1000c7ba:	e094      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c7bc:	1c08      	adds	r0, r1, #0
1000c7be:	4b60      	ldr	r3, [pc, #384]	; (1000c940 <at_ble_event_get+0x5c0>)
1000c7c0:	1c29      	adds	r1, r5, #0
1000c7c2:	4798      	blx	r3
1000c7c4:	2428      	movs	r4, #40	; 0x28
1000c7c6:	e08e      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c7c8:	1c08      	adds	r0, r1, #0
1000c7ca:	4b5e      	ldr	r3, [pc, #376]	; (1000c944 <at_ble_event_get+0x5c4>)
1000c7cc:	1c29      	adds	r1, r5, #0
1000c7ce:	4798      	blx	r3
1000c7d0:	2429      	movs	r4, #41	; 0x29
1000c7d2:	e088      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c7d4:	1c08      	adds	r0, r1, #0
1000c7d6:	4b5c      	ldr	r3, [pc, #368]	; (1000c948 <at_ble_event_get+0x5c8>)
1000c7d8:	1c29      	adds	r1, r5, #0
1000c7da:	4798      	blx	r3
1000c7dc:	2427      	movs	r4, #39	; 0x27
1000c7de:	e082      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c7e0:	1c08      	adds	r0, r1, #0
1000c7e2:	4b5a      	ldr	r3, [pc, #360]	; (1000c94c <at_ble_event_get+0x5cc>)
1000c7e4:	1c29      	adds	r1, r5, #0
1000c7e6:	4798      	blx	r3
1000c7e8:	242a      	movs	r4, #42	; 0x2a
1000c7ea:	e07c      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c7ec:	1c10      	adds	r0, r2, #0
1000c7ee:	4b58      	ldr	r3, [pc, #352]	; (1000c950 <at_ble_event_get+0x5d0>)
1000c7f0:	1c2a      	adds	r2, r5, #0
1000c7f2:	e7c0      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c7f4:	1c10      	adds	r0, r2, #0
1000c7f6:	4b57      	ldr	r3, [pc, #348]	; (1000c954 <at_ble_event_get+0x5d4>)
1000c7f8:	1c2a      	adds	r2, r5, #0
1000c7fa:	e7bc      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c7fc:	1c08      	adds	r0, r1, #0
1000c7fe:	4b56      	ldr	r3, [pc, #344]	; (1000c958 <at_ble_event_get+0x5d8>)
1000c800:	1c29      	adds	r1, r5, #0
1000c802:	4798      	blx	r3
1000c804:	242b      	movs	r4, #43	; 0x2b
1000c806:	e06e      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c808:	1c08      	adds	r0, r1, #0
1000c80a:	4b54      	ldr	r3, [pc, #336]	; (1000c95c <at_ble_event_get+0x5dc>)
1000c80c:	1c29      	adds	r1, r5, #0
1000c80e:	4798      	blx	r3
1000c810:	242c      	movs	r4, #44	; 0x2c
1000c812:	e068      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c814:	1c10      	adds	r0, r2, #0
1000c816:	4b52      	ldr	r3, [pc, #328]	; (1000c960 <at_ble_event_get+0x5e0>)
1000c818:	1c2a      	adds	r2, r5, #0
1000c81a:	4798      	blx	r3
1000c81c:	2413      	movs	r4, #19
1000c81e:	e062      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c820:	1c10      	adds	r0, r2, #0
1000c822:	4b50      	ldr	r3, [pc, #320]	; (1000c964 <at_ble_event_get+0x5e4>)
1000c824:	1c2a      	adds	r2, r5, #0
1000c826:	4798      	blx	r3
1000c828:	2414      	movs	r4, #20
1000c82a:	e05c      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c82c:	1c10      	adds	r0, r2, #0
1000c82e:	4b4e      	ldr	r3, [pc, #312]	; (1000c968 <at_ble_event_get+0x5e8>)
1000c830:	1c2a      	adds	r2, r5, #0
1000c832:	4798      	blx	r3
1000c834:	2415      	movs	r4, #21
1000c836:	e056      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c838:	1c10      	adds	r0, r2, #0
1000c83a:	4b4c      	ldr	r3, [pc, #304]	; (1000c96c <at_ble_event_get+0x5ec>)
1000c83c:	1c2a      	adds	r2, r5, #0
1000c83e:	4798      	blx	r3
1000c840:	2416      	movs	r4, #22
1000c842:	e050      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c844:	1c10      	adds	r0, r2, #0
1000c846:	4b4a      	ldr	r3, [pc, #296]	; (1000c970 <at_ble_event_get+0x5f0>)
1000c848:	1c2a      	adds	r2, r5, #0
1000c84a:	e794      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c84c:	1c10      	adds	r0, r2, #0
1000c84e:	4b48      	ldr	r3, [pc, #288]	; (1000c970 <at_ble_event_get+0x5f0>)
1000c850:	1c2a      	adds	r2, r5, #0
1000c852:	4798      	blx	r3
1000c854:	88a9      	ldrh	r1, [r5, #4]
1000c856:	1c04      	adds	r4, r0, #0
1000c858:	4b46      	ldr	r3, [pc, #280]	; (1000c974 <at_ble_event_get+0x5f4>)
1000c85a:	8828      	ldrh	r0, [r5, #0]
1000c85c:	4798      	blx	r3
1000c85e:	e042      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c860:	1c10      	adds	r0, r2, #0
1000c862:	4b45      	ldr	r3, [pc, #276]	; (1000c978 <at_ble_event_get+0x5f8>)
1000c864:	1c2a      	adds	r2, r5, #0
1000c866:	4798      	blx	r3
1000c868:	2423      	movs	r4, #35	; 0x23
1000c86a:	e03c      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c86c:	1c10      	adds	r0, r2, #0
1000c86e:	4b43      	ldr	r3, [pc, #268]	; (1000c97c <at_ble_event_get+0x5fc>)
1000c870:	1c2a      	adds	r2, r5, #0
1000c872:	e780      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c874:	0a12      	lsrs	r2, r2, #8
1000c876:	1c08      	adds	r0, r1, #0
1000c878:	802a      	strh	r2, [r5, #0]
1000c87a:	1c29      	adds	r1, r5, #0
1000c87c:	4b40      	ldr	r3, [pc, #256]	; (1000c980 <at_ble_event_get+0x600>)
1000c87e:	e75e      	b.n	1000c73e <at_ble_event_get+0x3be>
1000c880:	1c10      	adds	r0, r2, #0
1000c882:	4b40      	ldr	r3, [pc, #256]	; (1000c984 <at_ble_event_get+0x604>)
1000c884:	1c2a      	adds	r2, r5, #0
1000c886:	e776      	b.n	1000c776 <at_ble_event_get+0x3f6>
1000c888:	1c08      	adds	r0, r1, #0
1000c88a:	4b3f      	ldr	r3, [pc, #252]	; (1000c988 <at_ble_event_get+0x608>)
1000c88c:	1c29      	adds	r1, r5, #0
1000c88e:	4798      	blx	r3
1000c890:	243b      	movs	r4, #59	; 0x3b
1000c892:	e028      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c894:	1c10      	adds	r0, r2, #0
1000c896:	4b3d      	ldr	r3, [pc, #244]	; (1000c98c <at_ble_event_get+0x60c>)
1000c898:	1c2a      	adds	r2, r5, #0
1000c89a:	4798      	blx	r3
1000c89c:	2418      	movs	r4, #24
1000c89e:	e022      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8a0:	1c10      	adds	r0, r2, #0
1000c8a2:	4b3b      	ldr	r3, [pc, #236]	; (1000c990 <at_ble_event_get+0x610>)
1000c8a4:	1c2a      	adds	r2, r5, #0
1000c8a6:	4798      	blx	r3
1000c8a8:	2420      	movs	r4, #32
1000c8aa:	e01c      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8ac:	1c10      	adds	r0, r2, #0
1000c8ae:	4b39      	ldr	r3, [pc, #228]	; (1000c994 <at_ble_event_get+0x614>)
1000c8b0:	1c2a      	adds	r2, r5, #0
1000c8b2:	4798      	blx	r3
1000c8b4:	2433      	movs	r4, #51	; 0x33
1000c8b6:	e016      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8b8:	1c10      	adds	r0, r2, #0
1000c8ba:	4b37      	ldr	r3, [pc, #220]	; (1000c998 <at_ble_event_get+0x618>)
1000c8bc:	1c2a      	adds	r2, r5, #0
1000c8be:	4798      	blx	r3
1000c8c0:	2430      	movs	r4, #48	; 0x30
1000c8c2:	e010      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8c4:	1c10      	adds	r0, r2, #0
1000c8c6:	4b35      	ldr	r3, [pc, #212]	; (1000c99c <at_ble_event_get+0x61c>)
1000c8c8:	1c2a      	adds	r2, r5, #0
1000c8ca:	4798      	blx	r3
1000c8cc:	2434      	movs	r4, #52	; 0x34
1000c8ce:	e00a      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8d0:	1c10      	adds	r0, r2, #0
1000c8d2:	4b33      	ldr	r3, [pc, #204]	; (1000c9a0 <at_ble_event_get+0x620>)
1000c8d4:	1c2a      	adds	r2, r5, #0
1000c8d6:	4798      	blx	r3
1000c8d8:	2435      	movs	r4, #53	; 0x35
1000c8da:	e004      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8dc:	1c10      	adds	r0, r2, #0
1000c8de:	4b31      	ldr	r3, [pc, #196]	; (1000c9a4 <at_ble_event_get+0x624>)
1000c8e0:	1c2a      	adds	r2, r5, #0
1000c8e2:	4798      	blx	r3
1000c8e4:	2432      	movs	r4, #50	; 0x32
1000c8e6:	9b01      	ldr	r3, [sp, #4]
1000c8e8:	701c      	strb	r4, [r3, #0]
1000c8ea:	2400      	movs	r4, #0
1000c8ec:	e59c      	b.n	1000c428 <at_ble_event_get+0xa8>
1000c8ee:	24d0      	movs	r4, #208	; 0xd0
1000c8f0:	e59a      	b.n	1000c428 <at_ble_event_get+0xa8>
1000c8f2:	2abb      	cmp	r2, #187	; 0xbb
1000c8f4:	d000      	beq.n	1000c8f8 <at_ble_event_get+0x578>
1000c8f6:	e69e      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c8f8:	e7f5      	b.n	1000c8e6 <at_ble_event_get+0x566>
1000c8fa:	2c00      	cmp	r4, #0
1000c8fc:	d000      	beq.n	1000c900 <at_ble_event_get+0x580>
1000c8fe:	e593      	b.n	1000c428 <at_ble_event_get+0xa8>
1000c900:	e699      	b.n	1000c636 <at_ble_event_get+0x2b6>
1000c902:	1c20      	adds	r0, r4, #0
1000c904:	b005      	add	sp, #20
1000c906:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c908:	1000e44d 	.word	0x1000e44d
1000c90c:	1000e659 	.word	0x1000e659
1000c910:	1000e67d 	.word	0x1000e67d
1000c914:	1000d6a5 	.word	0x1000d6a5
1000c918:	1000dee5 	.word	0x1000dee5
1000c91c:	1000df61 	.word	0x1000df61
1000c920:	1000d95d 	.word	0x1000d95d
1000c924:	1000d9f9 	.word	0x1000d9f9
1000c928:	1000dad1 	.word	0x1000dad1
1000c92c:	1000dd19 	.word	0x1000dd19
1000c930:	1000ddb9 	.word	0x1000ddb9
1000c934:	1000de71 	.word	0x1000de71
1000c938:	1000de99 	.word	0x1000de99
1000c93c:	1000deaf 	.word	0x1000deaf
1000c940:	1000df79 	.word	0x1000df79
1000c944:	1000dfa7 	.word	0x1000dfa7
1000c948:	1000dfbd 	.word	0x1000dfbd
1000c94c:	1000dfe7 	.word	0x1000dfe7
1000c950:	1000de15 	.word	0x1000de15
1000c954:	1000de3f 	.word	0x1000de3f
1000c958:	1000d13d 	.word	0x1000d13d
1000c95c:	1000d169 	.word	0x1000d169
1000c960:	1000e8b5 	.word	0x1000e8b5
1000c964:	1000e8f1 	.word	0x1000e8f1
1000c968:	1000e939 	.word	0x1000e939
1000c96c:	1000e97d 	.word	0x1000e97d
1000c970:	1000e9b1 	.word	0x1000e9b1
1000c974:	1000e875 	.word	0x1000e875
1000c978:	1000ea7d 	.word	0x1000ea7d
1000c97c:	1000ea05 	.word	0x1000ea05
1000c980:	1000d095 	.word	0x1000d095
1000c984:	1000d101 	.word	0x1000d101
1000c988:	1000d0c5 	.word	0x1000d0c5
1000c98c:	1000ea8d 	.word	0x1000ea8d
1000c990:	1000eacd 	.word	0x1000eacd
1000c994:	1000ec19 	.word	0x1000ec19
1000c998:	1000ec23 	.word	0x1000ec23
1000c99c:	1000ec29 	.word	0x1000ec29
1000c9a0:	1000ec2f 	.word	0x1000ec2f
1000c9a4:	1000ec3b 	.word	0x1000ec3b

1000c9a8 <internal_event_flush>:
1000c9a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c9aa:	490e      	ldr	r1, [pc, #56]	; (1000c9e4 <internal_event_flush+0x3c>)
1000c9ac:	2400      	movs	r4, #0
1000c9ae:	680b      	ldr	r3, [r1, #0]
1000c9b0:	1c0f      	adds	r7, r1, #0
1000c9b2:	1c1e      	adds	r6, r3, #0
1000c9b4:	4a0c      	ldr	r2, [pc, #48]	; (1000c9e8 <internal_event_flush+0x40>)
1000c9b6:	6815      	ldr	r5, [r2, #0]
1000c9b8:	9201      	str	r2, [sp, #4]
1000c9ba:	2b00      	cmp	r3, #0
1000c9bc:	d00e      	beq.n	1000c9dc <internal_event_flush+0x34>
1000c9be:	889a      	ldrh	r2, [r3, #4]
1000c9c0:	6819      	ldr	r1, [r3, #0]
1000c9c2:	4282      	cmp	r2, r0
1000c9c4:	d107      	bne.n	1000c9d6 <internal_event_flush+0x2e>
1000c9c6:	2c00      	cmp	r4, #0
1000c9c8:	d001      	beq.n	1000c9ce <internal_event_flush+0x26>
1000c9ca:	6021      	str	r1, [r4, #0]
1000c9cc:	e000      	b.n	1000c9d0 <internal_event_flush+0x28>
1000c9ce:	1c0e      	adds	r6, r1, #0
1000c9d0:	601d      	str	r5, [r3, #0]
1000c9d2:	1c1d      	adds	r5, r3, #0
1000c9d4:	1c23      	adds	r3, r4, #0
1000c9d6:	1c1c      	adds	r4, r3, #0
1000c9d8:	1c0b      	adds	r3, r1, #0
1000c9da:	e7ee      	b.n	1000c9ba <internal_event_flush+0x12>
1000c9dc:	9b01      	ldr	r3, [sp, #4]
1000c9de:	603e      	str	r6, [r7, #0]
1000c9e0:	601d      	str	r5, [r3, #0]
1000c9e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c9e4:	10012ca0 	.word	0x10012ca0
1000c9e8:	10012ca4 	.word	0x10012ca4

1000c9ec <internal_conn_flush>:
1000c9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c9ee:	4a12      	ldr	r2, [pc, #72]	; (1000ca38 <internal_conn_flush+0x4c>)
1000c9f0:	9000      	str	r0, [sp, #0]
1000c9f2:	6813      	ldr	r3, [r2, #0]
1000c9f4:	4811      	ldr	r0, [pc, #68]	; (1000ca3c <internal_conn_flush+0x50>)
1000c9f6:	1c1f      	adds	r7, r3, #0
1000c9f8:	2100      	movs	r1, #0
1000c9fa:	4684      	mov	ip, r0
1000c9fc:	6804      	ldr	r4, [r0, #0]
1000c9fe:	9201      	str	r2, [sp, #4]
1000ca00:	2b00      	cmp	r3, #0
1000ca02:	d014      	beq.n	1000ca2e <internal_conn_flush+0x42>
1000ca04:	88d8      	ldrh	r0, [r3, #6]
1000ca06:	9a00      	ldr	r2, [sp, #0]
1000ca08:	681d      	ldr	r5, [r3, #0]
1000ca0a:	0a06      	lsrs	r6, r0, #8
1000ca0c:	4296      	cmp	r6, r2
1000ca0e:	d10b      	bne.n	1000ca28 <internal_conn_flush+0x3c>
1000ca10:	26fd      	movs	r6, #253	; 0xfd
1000ca12:	4006      	ands	r6, r0
1000ca14:	2e0c      	cmp	r6, #12
1000ca16:	d107      	bne.n	1000ca28 <internal_conn_flush+0x3c>
1000ca18:	2900      	cmp	r1, #0
1000ca1a:	d001      	beq.n	1000ca20 <internal_conn_flush+0x34>
1000ca1c:	600d      	str	r5, [r1, #0]
1000ca1e:	e000      	b.n	1000ca22 <internal_conn_flush+0x36>
1000ca20:	1c2f      	adds	r7, r5, #0
1000ca22:	601c      	str	r4, [r3, #0]
1000ca24:	1c1c      	adds	r4, r3, #0
1000ca26:	1c0b      	adds	r3, r1, #0
1000ca28:	1c19      	adds	r1, r3, #0
1000ca2a:	1c2b      	adds	r3, r5, #0
1000ca2c:	e7e8      	b.n	1000ca00 <internal_conn_flush+0x14>
1000ca2e:	9b01      	ldr	r3, [sp, #4]
1000ca30:	601f      	str	r7, [r3, #0]
1000ca32:	4663      	mov	r3, ip
1000ca34:	601c      	str	r4, [r3, #0]
1000ca36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ca38:	10012ca0 	.word	0x10012ca0
1000ca3c:	10012ca4 	.word	0x10012ca4

1000ca40 <at_ble_device_name_set>:
1000ca40:	b530      	push	{r4, r5, lr}
1000ca42:	23cf      	movs	r3, #207	; 0xcf
1000ca44:	2800      	cmp	r0, #0
1000ca46:	d010      	beq.n	1000ca6a <at_ble_device_name_set+0x2a>
1000ca48:	1e4a      	subs	r2, r1, #1
1000ca4a:	2a1f      	cmp	r2, #31
1000ca4c:	d80d      	bhi.n	1000ca6a <at_ble_device_name_set+0x2a>
1000ca4e:	4a08      	ldr	r2, [pc, #32]	; (1000ca70 <at_ble_device_name_set+0x30>)
1000ca50:	1c13      	adds	r3, r2, #0
1000ca52:	33aa      	adds	r3, #170	; 0xaa
1000ca54:	8019      	strh	r1, [r3, #0]
1000ca56:	2300      	movs	r3, #0
1000ca58:	1c1c      	adds	r4, r3, #0
1000ca5a:	5cc5      	ldrb	r5, [r0, r3]
1000ca5c:	34ac      	adds	r4, #172	; 0xac
1000ca5e:	3301      	adds	r3, #1
1000ca60:	5515      	strb	r5, [r2, r4]
1000ca62:	b2dc      	uxtb	r4, r3
1000ca64:	428c      	cmp	r4, r1
1000ca66:	d3f7      	bcc.n	1000ca58 <at_ble_device_name_set+0x18>
1000ca68:	2300      	movs	r3, #0
1000ca6a:	1c18      	adds	r0, r3, #0
1000ca6c:	bd30      	pop	{r4, r5, pc}
1000ca6e:	46c0      	nop			; (mov r8, r8)
1000ca70:	10013a5e 	.word	0x10013a5e

1000ca74 <at_ble_addr_get>:
1000ca74:	b510      	push	{r4, lr}
1000ca76:	1c04      	adds	r4, r0, #0
1000ca78:	20cf      	movs	r0, #207	; 0xcf
1000ca7a:	2c00      	cmp	r4, #0
1000ca7c:	d006      	beq.n	1000ca8c <at_ble_addr_get+0x18>
1000ca7e:	4b04      	ldr	r3, [pc, #16]	; (1000ca90 <at_ble_addr_get+0x1c>)
1000ca80:	38ce      	subs	r0, #206	; 0xce
1000ca82:	1c21      	adds	r1, r4, #0
1000ca84:	4798      	blx	r3
1000ca86:	4b03      	ldr	r3, [pc, #12]	; (1000ca94 <at_ble_addr_get+0x20>)
1000ca88:	791b      	ldrb	r3, [r3, #4]
1000ca8a:	7023      	strb	r3, [r4, #0]
1000ca8c:	bd10      	pop	{r4, pc}
1000ca8e:	46c0      	nop			; (mov r8, r8)
1000ca90:	1000e181 	.word	0x1000e181
1000ca94:	10013a5e 	.word	0x10013a5e

1000ca98 <at_ble_set_dev_config>:
1000ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca9a:	7906      	ldrb	r6, [r0, #4]
1000ca9c:	b089      	sub	sp, #36	; 0x24
1000ca9e:	25cf      	movs	r5, #207	; 0xcf
1000caa0:	2e03      	cmp	r6, #3
1000caa2:	d838      	bhi.n	1000cb16 <at_ble_set_dev_config+0x7e>
1000caa4:	7803      	ldrb	r3, [r0, #0]
1000caa6:	3511      	adds	r5, #17
1000caa8:	2b0f      	cmp	r3, #15
1000caaa:	d834      	bhi.n	1000cb16 <at_ble_set_dev_config+0x7e>
1000caac:	2380      	movs	r3, #128	; 0x80
1000caae:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000cab0:	3d11      	subs	r5, #17
1000cab2:	009b      	lsls	r3, r3, #2
1000cab4:	429f      	cmp	r7, r3
1000cab6:	d82e      	bhi.n	1000cb16 <at_ble_set_dev_config+0x7e>
1000cab8:	7fc5      	ldrb	r5, [r0, #31]
1000caba:	7f83      	ldrb	r3, [r0, #30]
1000cabc:	01ad      	lsls	r5, r5, #6
1000cabe:	015b      	lsls	r3, r3, #5
1000cac0:	431d      	orrs	r5, r3
1000cac2:	7ec3      	ldrb	r3, [r0, #27]
1000cac4:	431d      	orrs	r5, r3
1000cac6:	7f43      	ldrb	r3, [r0, #29]
1000cac8:	011b      	lsls	r3, r3, #4
1000caca:	431d      	orrs	r5, r3
1000cacc:	7f03      	ldrb	r3, [r0, #28]
1000cace:	009b      	lsls	r3, r3, #2
1000cad0:	431d      	orrs	r5, r3
1000cad2:	4b12      	ldr	r3, [pc, #72]	; (1000cb1c <at_ble_set_dev_config+0x84>)
1000cad4:	b2ed      	uxtb	r5, r5
1000cad6:	711e      	strb	r6, [r3, #4]
1000cad8:	7903      	ldrb	r3, [r0, #4]
1000cada:	3b02      	subs	r3, #2
1000cadc:	2b01      	cmp	r3, #1
1000cade:	d801      	bhi.n	1000cae4 <at_ble_set_dev_config+0x4c>
1000cae0:	2302      	movs	r3, #2
1000cae2:	7103      	strb	r3, [r0, #4]
1000cae4:	1c04      	adds	r4, r0, #0
1000cae6:	1c23      	adds	r3, r4, #0
1000cae8:	330b      	adds	r3, #11
1000caea:	8861      	ldrh	r1, [r4, #2]
1000caec:	9307      	str	r3, [sp, #28]
1000caee:	7923      	ldrb	r3, [r4, #4]
1000caf0:	7800      	ldrb	r0, [r0, #0]
1000caf2:	9300      	str	r3, [sp, #0]
1000caf4:	9501      	str	r5, [sp, #4]
1000caf6:	8c25      	ldrh	r5, [r4, #32]
1000caf8:	1d62      	adds	r2, r4, #5
1000cafa:	9502      	str	r5, [sp, #8]
1000cafc:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000cafe:	9b07      	ldr	r3, [sp, #28]
1000cb00:	9503      	str	r5, [sp, #12]
1000cb02:	9704      	str	r7, [sp, #16]
1000cb04:	4d06      	ldr	r5, [pc, #24]	; (1000cb20 <at_ble_set_dev_config+0x88>)
1000cb06:	47a8      	blx	r5
1000cb08:	7126      	strb	r6, [r4, #4]
1000cb0a:	1c05      	adds	r5, r0, #0
1000cb0c:	1c21      	adds	r1, r4, #0
1000cb0e:	4803      	ldr	r0, [pc, #12]	; (1000cb1c <at_ble_set_dev_config+0x84>)
1000cb10:	2226      	movs	r2, #38	; 0x26
1000cb12:	4b04      	ldr	r3, [pc, #16]	; (1000cb24 <at_ble_set_dev_config+0x8c>)
1000cb14:	4798      	blx	r3
1000cb16:	1c28      	adds	r0, r5, #0
1000cb18:	b009      	add	sp, #36	; 0x24
1000cb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb1c:	10013a5e 	.word	0x10013a5e
1000cb20:	1000e079 	.word	0x1000e079
1000cb24:	1000ff37 	.word	0x1000ff37

1000cb28 <at_ble_init>:
1000cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb2a:	b087      	sub	sp, #28
1000cb2c:	af03      	add	r7, sp, #12
1000cb2e:	494d      	ldr	r1, [pc, #308]	; (1000cc64 <at_ble_init+0x13c>)
1000cb30:	1c04      	adds	r4, r0, #0
1000cb32:	220b      	movs	r2, #11
1000cb34:	4b4c      	ldr	r3, [pc, #304]	; (1000cc68 <at_ble_init+0x140>)
1000cb36:	1c38      	adds	r0, r7, #0
1000cb38:	4798      	blx	r3
1000cb3a:	2205      	movs	r2, #5
1000cb3c:	4b4b      	ldr	r3, [pc, #300]	; (1000cc6c <at_ble_init+0x144>)
1000cb3e:	801a      	strh	r2, [r3, #0]
1000cb40:	2300      	movs	r3, #0
1000cb42:	4a4b      	ldr	r2, [pc, #300]	; (1000cc70 <at_ble_init+0x148>)
1000cb44:	6013      	str	r3, [r2, #0]
1000cb46:	4a4b      	ldr	r2, [pc, #300]	; (1000cc74 <at_ble_init+0x14c>)
1000cb48:	7013      	strb	r3, [r2, #0]
1000cb4a:	4a4b      	ldr	r2, [pc, #300]	; (1000cc78 <at_ble_init+0x150>)
1000cb4c:	7013      	strb	r3, [r2, #0]
1000cb4e:	4b4b      	ldr	r3, [pc, #300]	; (1000cc7c <at_ble_init+0x154>)
1000cb50:	4798      	blx	r3
1000cb52:	4b4b      	ldr	r3, [pc, #300]	; (1000cc80 <at_ble_init+0x158>)
1000cb54:	4798      	blx	r3
1000cb56:	4b4b      	ldr	r3, [pc, #300]	; (1000cc84 <at_ble_init+0x15c>)
1000cb58:	4798      	blx	r3
1000cb5a:	4b4b      	ldr	r3, [pc, #300]	; (1000cc88 <at_ble_init+0x160>)
1000cb5c:	4798      	blx	r3
1000cb5e:	2c00      	cmp	r4, #0
1000cb60:	d009      	beq.n	1000cb76 <at_ble_init+0x4e>
1000cb62:	6820      	ldr	r0, [r4, #0]
1000cb64:	2800      	cmp	r0, #0
1000cb66:	d006      	beq.n	1000cb76 <at_ble_init+0x4e>
1000cb68:	6861      	ldr	r1, [r4, #4]
1000cb6a:	2900      	cmp	r1, #0
1000cb6c:	d101      	bne.n	1000cb72 <at_ble_init+0x4a>
1000cb6e:	26e2      	movs	r6, #226	; 0xe2
1000cb70:	e075      	b.n	1000cc5e <at_ble_init+0x136>
1000cb72:	4b46      	ldr	r3, [pc, #280]	; (1000cc8c <at_ble_init+0x164>)
1000cb74:	4798      	blx	r3
1000cb76:	4b46      	ldr	r3, [pc, #280]	; (1000cc90 <at_ble_init+0x168>)
1000cb78:	4798      	blx	r3
1000cb7a:	2801      	cmp	r0, #1
1000cb7c:	d8f7      	bhi.n	1000cb6e <at_ble_init+0x46>
1000cb7e:	4845      	ldr	r0, [pc, #276]	; (1000cc94 <at_ble_init+0x16c>)
1000cb80:	4b45      	ldr	r3, [pc, #276]	; (1000cc98 <at_ble_init+0x170>)
1000cb82:	4798      	blx	r3
1000cb84:	2800      	cmp	r0, #0
1000cb86:	d1f2      	bne.n	1000cb6e <at_ble_init+0x46>
1000cb88:	4b44      	ldr	r3, [pc, #272]	; (1000cc9c <at_ble_init+0x174>)
1000cb8a:	4798      	blx	r3
1000cb8c:	4b44      	ldr	r3, [pc, #272]	; (1000cca0 <at_ble_init+0x178>)
1000cb8e:	4798      	blx	r3
1000cb90:	466b      	mov	r3, sp
1000cb92:	2201      	movs	r2, #1
1000cb94:	1cdc      	adds	r4, r3, #3
1000cb96:	1c20      	adds	r0, r4, #0
1000cb98:	a901      	add	r1, sp, #4
1000cb9a:	4252      	negs	r2, r2
1000cb9c:	4b41      	ldr	r3, [pc, #260]	; (1000cca4 <at_ble_init+0x17c>)
1000cb9e:	4798      	blx	r3
1000cba0:	2800      	cmp	r0, #0
1000cba2:	d102      	bne.n	1000cbaa <at_ble_init+0x82>
1000cba4:	7823      	ldrb	r3, [r4, #0]
1000cba6:	2b39      	cmp	r3, #57	; 0x39
1000cba8:	d1f2      	bne.n	1000cb90 <at_ble_init+0x68>
1000cbaa:	4b3f      	ldr	r3, [pc, #252]	; (1000cca8 <at_ble_init+0x180>)
1000cbac:	4798      	blx	r3
1000cbae:	1e06      	subs	r6, r0, #0
1000cbb0:	d155      	bne.n	1000cc5e <at_ble_init+0x136>
1000cbb2:	1c03      	adds	r3, r0, #0
1000cbb4:	2101      	movs	r1, #1
1000cbb6:	4a3d      	ldr	r2, [pc, #244]	; (1000ccac <at_ble_init+0x184>)
1000cbb8:	4249      	negs	r1, r1
1000cbba:	189a      	adds	r2, r3, r2
1000cbbc:	3312      	adds	r3, #18
1000cbbe:	8151      	strh	r1, [r2, #10]
1000cbc0:	2b90      	cmp	r3, #144	; 0x90
1000cbc2:	d1f7      	bne.n	1000cbb4 <at_ble_init+0x8c>
1000cbc4:	4c3a      	ldr	r4, [pc, #232]	; (1000ccb0 <at_ble_init+0x188>)
1000cbc6:	3b81      	subs	r3, #129	; 0x81
1000cbc8:	7023      	strb	r3, [r4, #0]
1000cbca:	4b3a      	ldr	r3, [pc, #232]	; (1000ccb4 <at_ble_init+0x18c>)
1000cbcc:	4a3a      	ldr	r2, [pc, #232]	; (1000ccb8 <at_ble_init+0x190>)
1000cbce:	8063      	strh	r3, [r4, #2]
1000cbd0:	2300      	movs	r3, #0
1000cbd2:	7123      	strb	r3, [r4, #4]
1000cbd4:	3301      	adds	r3, #1
1000cbd6:	1e58      	subs	r0, r3, #1
1000cbd8:	0119      	lsls	r1, r3, #4
1000cbda:	4301      	orrs	r1, r0
1000cbdc:	3302      	adds	r3, #2
1000cbde:	7011      	strb	r1, [r2, #0]
1000cbe0:	3201      	adds	r2, #1
1000cbe2:	2b21      	cmp	r3, #33	; 0x21
1000cbe4:	d1f7      	bne.n	1000cbd6 <at_ble_init+0xae>
1000cbe6:	33e0      	adds	r3, #224	; 0xe0
1000cbe8:	33ff      	adds	r3, #255	; 0xff
1000cbea:	84a3      	strh	r3, [r4, #36]	; 0x24
1000cbec:	1c23      	adds	r3, r4, #0
1000cbee:	2500      	movs	r5, #0
1000cbf0:	3373      	adds	r3, #115	; 0x73
1000cbf2:	701d      	strb	r5, [r3, #0]
1000cbf4:	1c23      	adds	r3, r4, #0
1000cbf6:	3372      	adds	r3, #114	; 0x72
1000cbf8:	701d      	strb	r5, [r3, #0]
1000cbfa:	1c23      	adds	r3, r4, #0
1000cbfc:	3376      	adds	r3, #118	; 0x76
1000cbfe:	701d      	strb	r5, [r3, #0]
1000cc00:	1c23      	adds	r3, r4, #0
1000cc02:	33cc      	adds	r3, #204	; 0xcc
1000cc04:	801d      	strh	r5, [r3, #0]
1000cc06:	1c22      	adds	r2, r4, #0
1000cc08:	23a0      	movs	r3, #160	; 0xa0
1000cc0a:	32d0      	adds	r2, #208	; 0xd0
1000cc0c:	005b      	lsls	r3, r3, #1
1000cc0e:	8013      	strh	r3, [r2, #0]
1000cc10:	1c22      	adds	r2, r4, #0
1000cc12:	32ce      	adds	r2, #206	; 0xce
1000cc14:	8013      	strh	r3, [r2, #0]
1000cc16:	1c23      	adds	r3, r4, #0
1000cc18:	33d2      	adds	r3, #210	; 0xd2
1000cc1a:	801d      	strh	r5, [r3, #0]
1000cc1c:	22fa      	movs	r2, #250	; 0xfa
1000cc1e:	1c23      	adds	r3, r4, #0
1000cc20:	0052      	lsls	r2, r2, #1
1000cc22:	33d4      	adds	r3, #212	; 0xd4
1000cc24:	801a      	strh	r2, [r3, #0]
1000cc26:	1c23      	adds	r3, r4, #0
1000cc28:	33d6      	adds	r3, #214	; 0xd6
1000cc2a:	701d      	strb	r5, [r3, #0]
1000cc2c:	1c20      	adds	r0, r4, #0
1000cc2e:	4b23      	ldr	r3, [pc, #140]	; (1000ccbc <at_ble_init+0x194>)
1000cc30:	76e5      	strb	r5, [r4, #27]
1000cc32:	7725      	strb	r5, [r4, #28]
1000cc34:	7765      	strb	r5, [r4, #29]
1000cc36:	77a5      	strb	r5, [r4, #30]
1000cc38:	77e5      	strb	r5, [r4, #31]
1000cc3a:	8425      	strh	r5, [r4, #32]
1000cc3c:	8465      	strh	r5, [r4, #34]	; 0x22
1000cc3e:	4798      	blx	r3
1000cc40:	1c23      	adds	r3, r4, #0
1000cc42:	2207      	movs	r2, #7
1000cc44:	3374      	adds	r3, #116	; 0x74
1000cc46:	701a      	strb	r2, [r3, #0]
1000cc48:	1c23      	adds	r3, r4, #0
1000cc4a:	3204      	adds	r2, #4
1000cc4c:	33aa      	adds	r3, #170	; 0xaa
1000cc4e:	801a      	strh	r2, [r3, #0]
1000cc50:	1c2b      	adds	r3, r5, #0
1000cc52:	5d7a      	ldrb	r2, [r7, r5]
1000cc54:	33ac      	adds	r3, #172	; 0xac
1000cc56:	3501      	adds	r5, #1
1000cc58:	54e2      	strb	r2, [r4, r3]
1000cc5a:	2d0b      	cmp	r5, #11
1000cc5c:	d1f8      	bne.n	1000cc50 <at_ble_init+0x128>
1000cc5e:	1c30      	adds	r0, r6, #0
1000cc60:	b007      	add	sp, #28
1000cc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cc64:	10012918 	.word	0x10012918
1000cc68:	1000ff37 	.word	0x1000ff37
1000cc6c:	100139cc 	.word	0x100139cc
1000cc70:	10012d48 	.word	0x10012d48
1000cc74:	10012cb0 	.word	0x10012cb0
1000cc78:	10012a31 	.word	0x10012a31
1000cc7c:	1000eadd 	.word	0x1000eadd
1000cc80:	1000ce75 	.word	0x1000ce75
1000cc84:	1000cf19 	.word	0x1000cf19
1000cc88:	1000d131 	.word	0x1000d131
1000cc8c:	1000cf4d 	.word	0x1000cf4d
1000cc90:	1000b0c9 	.word	0x1000b0c9
1000cc94:	1000d3f1 	.word	0x1000d3f1
1000cc98:	1000b2c9 	.word	0x1000b2c9
1000cc9c:	1000d489 	.word	0x1000d489
1000cca0:	1000c2c1 	.word	0x1000c2c1
1000cca4:	1000c381 	.word	0x1000c381
1000cca8:	1000e009 	.word	0x1000e009
1000ccac:	100139ce 	.word	0x100139ce
1000ccb0:	10013a5e 	.word	0x10013a5e
1000ccb4:	00003a98 	.word	0x00003a98
1000ccb8:	10013a69 	.word	0x10013a69
1000ccbc:	1000ca99 	.word	0x1000ca99

1000ccc0 <at_ble_addr_set>:
1000ccc0:	b538      	push	{r3, r4, r5, lr}
1000ccc2:	1c45      	adds	r5, r0, #1
1000ccc4:	1c03      	adds	r3, r0, #0
1000ccc6:	20cf      	movs	r0, #207	; 0xcf
1000ccc8:	2d00      	cmp	r5, #0
1000ccca:	d018      	beq.n	1000ccfe <at_ble_addr_set+0x3e>
1000cccc:	781a      	ldrb	r2, [r3, #0]
1000ccce:	2a03      	cmp	r2, #3
1000ccd0:	d815      	bhi.n	1000ccfe <at_ble_addr_set+0x3e>
1000ccd2:	2a01      	cmp	r2, #1
1000ccd4:	d102      	bne.n	1000ccdc <at_ble_addr_set+0x1c>
1000ccd6:	785a      	ldrb	r2, [r3, #1]
1000ccd8:	2a00      	cmp	r2, #0
1000ccda:	d010      	beq.n	1000ccfe <at_ble_addr_set+0x3e>
1000ccdc:	1c1c      	adds	r4, r3, #0
1000ccde:	1c29      	adds	r1, r5, #0
1000cce0:	2206      	movs	r2, #6
1000cce2:	4b07      	ldr	r3, [pc, #28]	; (1000cd00 <at_ble_addr_set+0x40>)
1000cce4:	4807      	ldr	r0, [pc, #28]	; (1000cd04 <at_ble_addr_set+0x44>)
1000cce6:	4798      	blx	r3
1000cce8:	7823      	ldrb	r3, [r4, #0]
1000ccea:	4807      	ldr	r0, [pc, #28]	; (1000cd08 <at_ble_addr_set+0x48>)
1000ccec:	7103      	strb	r3, [r0, #4]
1000ccee:	4b07      	ldr	r3, [pc, #28]	; (1000cd0c <at_ble_addr_set+0x4c>)
1000ccf0:	4798      	blx	r3
1000ccf2:	7823      	ldrb	r3, [r4, #0]
1000ccf4:	2b00      	cmp	r3, #0
1000ccf6:	d102      	bne.n	1000ccfe <at_ble_addr_set+0x3e>
1000ccf8:	1c28      	adds	r0, r5, #0
1000ccfa:	4b05      	ldr	r3, [pc, #20]	; (1000cd10 <at_ble_addr_set+0x50>)
1000ccfc:	4798      	blx	r3
1000ccfe:	bd38      	pop	{r3, r4, r5, pc}
1000cd00:	1000ff37 	.word	0x1000ff37
1000cd04:	10013a63 	.word	0x10013a63
1000cd08:	10013a5e 	.word	0x10013a5e
1000cd0c:	1000ca99 	.word	0x1000ca99
1000cd10:	1000d505 	.word	0x1000d505

1000cd14 <at_ble_scan_stop>:
1000cd14:	b510      	push	{r4, lr}
1000cd16:	4b05      	ldr	r3, [pc, #20]	; (1000cd2c <at_ble_scan_stop+0x18>)
1000cd18:	4798      	blx	r3
1000cd1a:	1e04      	subs	r4, r0, #0
1000cd1c:	d103      	bne.n	1000cd26 <at_ble_scan_stop+0x12>
1000cd1e:	20d1      	movs	r0, #209	; 0xd1
1000cd20:	4b03      	ldr	r3, [pc, #12]	; (1000cd30 <at_ble_scan_stop+0x1c>)
1000cd22:	0100      	lsls	r0, r0, #4
1000cd24:	4798      	blx	r3
1000cd26:	1c20      	adds	r0, r4, #0
1000cd28:	bd10      	pop	{r4, pc}
1000cd2a:	46c0      	nop			; (mov r8, r8)
1000cd2c:	1000e261 	.word	0x1000e261
1000cd30:	1000c9a9 	.word	0x1000c9a9

1000cd34 <at_ble_connect>:
1000cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd36:	b091      	sub	sp, #68	; 0x44
1000cd38:	930d      	str	r3, [sp, #52]	; 0x34
1000cd3a:	4b2d      	ldr	r3, [pc, #180]	; (1000cdf0 <at_ble_connect+0xbc>)
1000cd3c:	900a      	str	r0, [sp, #40]	; 0x28
1000cd3e:	910b      	str	r1, [sp, #44]	; 0x2c
1000cd40:	920c      	str	r2, [sp, #48]	; 0x30
1000cd42:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000cd44:	4798      	blx	r3
1000cd46:	254b      	movs	r5, #75	; 0x4b
1000cd48:	2807      	cmp	r0, #7
1000cd4a:	d84d      	bhi.n	1000cde8 <at_ble_connect+0xb4>
1000cd4c:	8863      	ldrh	r3, [r4, #2]
1000cd4e:	4a29      	ldr	r2, [pc, #164]	; (1000cdf4 <at_ble_connect+0xc0>)
1000cd50:	3b06      	subs	r3, #6
1000cd52:	b29b      	uxth	r3, r3
1000cd54:	3584      	adds	r5, #132	; 0x84
1000cd56:	4293      	cmp	r3, r2
1000cd58:	d846      	bhi.n	1000cde8 <at_ble_connect+0xb4>
1000cd5a:	8823      	ldrh	r3, [r4, #0]
1000cd5c:	3b06      	subs	r3, #6
1000cd5e:	b29b      	uxth	r3, r3
1000cd60:	4293      	cmp	r3, r2
1000cd62:	d841      	bhi.n	1000cde8 <at_ble_connect+0xb4>
1000cd64:	88e3      	ldrh	r3, [r4, #6]
1000cd66:	4a24      	ldr	r2, [pc, #144]	; (1000cdf8 <at_ble_connect+0xc4>)
1000cd68:	3b0a      	subs	r3, #10
1000cd6a:	b29b      	uxth	r3, r3
1000cd6c:	4293      	cmp	r3, r2
1000cd6e:	d83b      	bhi.n	1000cde8 <at_ble_connect+0xb4>
1000cd70:	23f4      	movs	r3, #244	; 0xf4
1000cd72:	88a2      	ldrh	r2, [r4, #4]
1000cd74:	33ff      	adds	r3, #255	; 0xff
1000cd76:	429a      	cmp	r2, r3
1000cd78:	d836      	bhi.n	1000cde8 <at_ble_connect+0xb4>
1000cd7a:	af0e      	add	r7, sp, #56	; 0x38
1000cd7c:	4b1f      	ldr	r3, [pc, #124]	; (1000cdfc <at_ble_connect+0xc8>)
1000cd7e:	2001      	movs	r0, #1
1000cd80:	1c39      	adds	r1, r7, #0
1000cd82:	4798      	blx	r3
1000cd84:	4e1e      	ldr	r6, [pc, #120]	; (1000ce00 <at_ble_connect+0xcc>)
1000cd86:	1c05      	adds	r5, r0, #0
1000cd88:	7933      	ldrb	r3, [r6, #4]
1000cd8a:	703b      	strb	r3, [r7, #0]
1000cd8c:	2800      	cmp	r0, #0
1000cd8e:	d12a      	bne.n	1000cde6 <at_ble_connect+0xb2>
1000cd90:	4b1c      	ldr	r3, [pc, #112]	; (1000ce04 <at_ble_connect+0xd0>)
1000cd92:	4798      	blx	r3
1000cd94:	3675      	adds	r6, #117	; 0x75
1000cd96:	7833      	ldrb	r3, [r6, #0]
1000cd98:	1c01      	adds	r1, r0, #0
1000cd9a:	3b01      	subs	r3, #1
1000cd9c:	2b01      	cmp	r3, #1
1000cd9e:	d901      	bls.n	1000cda4 <at_ble_connect+0x70>
1000cda0:	2302      	movs	r3, #2
1000cda2:	7033      	strb	r3, [r6, #0]
1000cda4:	4b16      	ldr	r3, [pc, #88]	; (1000ce00 <at_ble_connect+0xcc>)
1000cda6:	1c1a      	adds	r2, r3, #0
1000cda8:	3275      	adds	r2, #117	; 0x75
1000cdaa:	7810      	ldrb	r0, [r2, #0]
1000cdac:	885a      	ldrh	r2, [r3, #2]
1000cdae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000cdb0:	3012      	adds	r0, #18
1000cdb2:	9300      	str	r3, [sp, #0]
1000cdb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000cdb6:	b2c0      	uxtb	r0, r0
1000cdb8:	9301      	str	r3, [sp, #4]
1000cdba:	8823      	ldrh	r3, [r4, #0]
1000cdbc:	9302      	str	r3, [sp, #8]
1000cdbe:	8863      	ldrh	r3, [r4, #2]
1000cdc0:	9303      	str	r3, [sp, #12]
1000cdc2:	88a3      	ldrh	r3, [r4, #4]
1000cdc4:	9304      	str	r3, [sp, #16]
1000cdc6:	88e3      	ldrh	r3, [r4, #6]
1000cdc8:	9305      	str	r3, [sp, #20]
1000cdca:	8923      	ldrh	r3, [r4, #8]
1000cdcc:	9306      	str	r3, [sp, #24]
1000cdce:	8963      	ldrh	r3, [r4, #10]
1000cdd0:	ac04      	add	r4, sp, #16
1000cdd2:	9307      	str	r3, [sp, #28]
1000cdd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000cdd6:	9308      	str	r3, [sp, #32]
1000cdd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000cdda:	9309      	str	r3, [sp, #36]	; 0x24
1000cddc:	2329      	movs	r3, #41	; 0x29
1000cdde:	191b      	adds	r3, r3, r4
1000cde0:	4c09      	ldr	r4, [pc, #36]	; (1000ce08 <at_ble_connect+0xd4>)
1000cde2:	47a0      	blx	r4
1000cde4:	e000      	b.n	1000cde8 <at_ble_connect+0xb4>
1000cde6:	25e2      	movs	r5, #226	; 0xe2
1000cde8:	1c28      	adds	r0, r5, #0
1000cdea:	b011      	add	sp, #68	; 0x44
1000cdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cdee:	46c0      	nop			; (mov r8, r8)
1000cdf0:	1000d67d 	.word	0x1000d67d
1000cdf4:	00000c7a 	.word	0x00000c7a
1000cdf8:	00000c76 	.word	0x00000c76
1000cdfc:	1000e181 	.word	0x1000e181
1000ce00:	10013a5e 	.word	0x10013a5e
1000ce04:	1000e435 	.word	0x1000e435
1000ce08:	1000e4d5 	.word	0x1000e4d5

1000ce0c <at_ble_disconnect>:
1000ce0c:	b538      	push	{r3, r4, r5, lr}
1000ce0e:	1c04      	adds	r4, r0, #0
1000ce10:	4b04      	ldr	r3, [pc, #16]	; (1000ce24 <at_ble_disconnect+0x18>)
1000ce12:	1c08      	adds	r0, r1, #0
1000ce14:	1c21      	adds	r1, r4, #0
1000ce16:	4798      	blx	r3
1000ce18:	1c05      	adds	r5, r0, #0
1000ce1a:	4b03      	ldr	r3, [pc, #12]	; (1000ce28 <at_ble_disconnect+0x1c>)
1000ce1c:	1c20      	adds	r0, r4, #0
1000ce1e:	4798      	blx	r3
1000ce20:	1c28      	adds	r0, r5, #0
1000ce22:	bd38      	pop	{r3, r4, r5, pc}
1000ce24:	1000d919 	.word	0x1000d919
1000ce28:	1000c9ed 	.word	0x1000c9ed

1000ce2c <at_ble_conn_update_reply>:
1000ce2c:	b510      	push	{r4, lr}
1000ce2e:	4c01      	ldr	r4, [pc, #4]	; (1000ce34 <at_ble_conn_update_reply+0x8>)
1000ce30:	47a0      	blx	r4
1000ce32:	bd10      	pop	{r4, pc}
1000ce34:	1000ddc9 	.word	0x1000ddc9

1000ce38 <at_ble_random_address_resolve>:
1000ce38:	b510      	push	{r4, lr}
1000ce3a:	23cf      	movs	r3, #207	; 0xcf
1000ce3c:	2800      	cmp	r0, #0
1000ce3e:	d00a      	beq.n	1000ce56 <at_ble_random_address_resolve+0x1e>
1000ce40:	2900      	cmp	r1, #0
1000ce42:	d008      	beq.n	1000ce56 <at_ble_random_address_resolve+0x1e>
1000ce44:	2a00      	cmp	r2, #0
1000ce46:	d006      	beq.n	1000ce56 <at_ble_random_address_resolve+0x1e>
1000ce48:	780c      	ldrb	r4, [r1, #0]
1000ce4a:	2c02      	cmp	r4, #2
1000ce4c:	d103      	bne.n	1000ce56 <at_ble_random_address_resolve+0x1e>
1000ce4e:	4b03      	ldr	r3, [pc, #12]	; (1000ce5c <at_ble_random_address_resolve+0x24>)
1000ce50:	3101      	adds	r1, #1
1000ce52:	4798      	blx	r3
1000ce54:	2300      	movs	r3, #0
1000ce56:	1c18      	adds	r0, r3, #0
1000ce58:	bd10      	pop	{r4, pc}
1000ce5a:	46c0      	nop			; (mov r8, r8)
1000ce5c:	1000e5f1 	.word	0x1000e5f1

1000ce60 <at_ble_uuid_len2type>:
1000ce60:	1e83      	subs	r3, r0, #2
1000ce62:	b2db      	uxtb	r3, r3
1000ce64:	2003      	movs	r0, #3
1000ce66:	2b0e      	cmp	r3, #14
1000ce68:	d801      	bhi.n	1000ce6e <at_ble_uuid_len2type+0xe>
1000ce6a:	4a01      	ldr	r2, [pc, #4]	; (1000ce70 <at_ble_uuid_len2type+0x10>)
1000ce6c:	5cd0      	ldrb	r0, [r2, r3]
1000ce6e:	4770      	bx	lr
1000ce70:	10012923 	.word	0x10012923

1000ce74 <init_gatt_client_module>:
1000ce74:	2200      	movs	r2, #0
1000ce76:	4b01      	ldr	r3, [pc, #4]	; (1000ce7c <init_gatt_client_module+0x8>)
1000ce78:	801a      	strh	r2, [r3, #0]
1000ce7a:	4770      	bx	lr
1000ce7c:	10012ca8 	.word	0x10012ca8

1000ce80 <at_ble_primary_service_discover_all>:
1000ce80:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ce82:	24cf      	movs	r4, #207	; 0xcf
1000ce84:	2900      	cmp	r1, #0
1000ce86:	d00a      	beq.n	1000ce9e <at_ble_primary_service_discover_all+0x1e>
1000ce88:	428a      	cmp	r2, r1
1000ce8a:	d308      	bcc.n	1000ce9e <at_ble_primary_service_discover_all+0x1e>
1000ce8c:	2400      	movs	r4, #0
1000ce8e:	1c13      	adds	r3, r2, #0
1000ce90:	9001      	str	r0, [sp, #4]
1000ce92:	1c0a      	adds	r2, r1, #0
1000ce94:	9400      	str	r4, [sp, #0]
1000ce96:	2002      	movs	r0, #2
1000ce98:	1c21      	adds	r1, r4, #0
1000ce9a:	4d02      	ldr	r5, [pc, #8]	; (1000cea4 <at_ble_primary_service_discover_all+0x24>)
1000ce9c:	47a8      	blx	r5
1000ce9e:	1c20      	adds	r0, r4, #0
1000cea0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000cea2:	46c0      	nop			; (mov r8, r8)
1000cea4:	1000e7e5 	.word	0x1000e7e5

1000cea8 <db_searchATT>:
1000cea8:	b570      	push	{r4, r5, r6, lr}
1000ceaa:	1c05      	adds	r5, r0, #0
1000ceac:	2400      	movs	r4, #0
1000ceae:	4b0c      	ldr	r3, [pc, #48]	; (1000cee0 <db_searchATT+0x38>)
1000ceb0:	6819      	ldr	r1, [r3, #0]
1000ceb2:	4b0c      	ldr	r3, [pc, #48]	; (1000cee4 <db_searchATT+0x3c>)
1000ceb4:	681e      	ldr	r6, [r3, #0]
1000ceb6:	428c      	cmp	r4, r1
1000ceb8:	dc10      	bgt.n	1000cedc <db_searchATT+0x34>
1000ceba:	200c      	movs	r0, #12
1000cebc:	1863      	adds	r3, r4, r1
1000cebe:	0fda      	lsrs	r2, r3, #31
1000cec0:	18d3      	adds	r3, r2, r3
1000cec2:	1c02      	adds	r2, r0, #0
1000cec4:	105b      	asrs	r3, r3, #1
1000cec6:	435a      	muls	r2, r3
1000cec8:	18b0      	adds	r0, r6, r2
1000ceca:	8802      	ldrh	r2, [r0, #0]
1000cecc:	42aa      	cmp	r2, r5
1000cece:	d201      	bcs.n	1000ced4 <db_searchATT+0x2c>
1000ced0:	1e59      	subs	r1, r3, #1
1000ced2:	e7f0      	b.n	1000ceb6 <db_searchATT+0xe>
1000ced4:	42aa      	cmp	r2, r5
1000ced6:	d902      	bls.n	1000cede <db_searchATT+0x36>
1000ced8:	1c5c      	adds	r4, r3, #1
1000ceda:	e7ec      	b.n	1000ceb6 <db_searchATT+0xe>
1000cedc:	2000      	movs	r0, #0
1000cede:	bd70      	pop	{r4, r5, r6, pc}
1000cee0:	10012cbc 	.word	0x10012cbc
1000cee4:	10012cb4 	.word	0x10012cb4

1000cee8 <at_ble_read_authorize_reply.part.2>:
1000cee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ceea:	4b09      	ldr	r3, [pc, #36]	; (1000cf10 <at_ble_read_authorize_reply.part.2+0x28>)
1000ceec:	1c05      	adds	r5, r0, #0
1000ceee:	1c08      	adds	r0, r1, #0
1000cef0:	1c0c      	adds	r4, r1, #0
1000cef2:	4798      	blx	r3
1000cef4:	2800      	cmp	r0, #0
1000cef6:	d009      	beq.n	1000cf0c <at_ble_read_authorize_reply.part.2+0x24>
1000cef8:	6882      	ldr	r2, [r0, #8]
1000cefa:	2a00      	cmp	r2, #0
1000cefc:	d006      	beq.n	1000cf0c <at_ble_read_authorize_reply.part.2+0x24>
1000cefe:	8883      	ldrh	r3, [r0, #4]
1000cf00:	1c29      	adds	r1, r5, #0
1000cf02:	9200      	str	r2, [sp, #0]
1000cf04:	1c20      	adds	r0, r4, #0
1000cf06:	2200      	movs	r2, #0
1000cf08:	4c02      	ldr	r4, [pc, #8]	; (1000cf14 <at_ble_read_authorize_reply.part.2+0x2c>)
1000cf0a:	47a0      	blx	r4
1000cf0c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000cf0e:	46c0      	nop			; (mov r8, r8)
1000cf10:	1000cea9 	.word	0x1000cea9
1000cf14:	1000e6ed 	.word	0x1000e6ed

1000cf18 <initi_gatt_server_module>:
1000cf18:	2300      	movs	r3, #0
1000cf1a:	4a06      	ldr	r2, [pc, #24]	; (1000cf34 <initi_gatt_server_module+0x1c>)
1000cf1c:	7013      	strb	r3, [r2, #0]
1000cf1e:	4a06      	ldr	r2, [pc, #24]	; (1000cf38 <initi_gatt_server_module+0x20>)
1000cf20:	6013      	str	r3, [r2, #0]
1000cf22:	4a06      	ldr	r2, [pc, #24]	; (1000cf3c <initi_gatt_server_module+0x24>)
1000cf24:	6013      	str	r3, [r2, #0]
1000cf26:	4a06      	ldr	r2, [pc, #24]	; (1000cf40 <initi_gatt_server_module+0x28>)
1000cf28:	6013      	str	r3, [r2, #0]
1000cf2a:	4a06      	ldr	r2, [pc, #24]	; (1000cf44 <initi_gatt_server_module+0x2c>)
1000cf2c:	6013      	str	r3, [r2, #0]
1000cf2e:	4a06      	ldr	r2, [pc, #24]	; (1000cf48 <initi_gatt_server_module+0x30>)
1000cf30:	6013      	str	r3, [r2, #0]
1000cf32:	4770      	bx	lr
1000cf34:	10012cb0 	.word	0x10012cb0
1000cf38:	10012cc0 	.word	0x10012cc0
1000cf3c:	10012cbc 	.word	0x10012cbc
1000cf40:	10012cac 	.word	0x10012cac
1000cf44:	10012cb8 	.word	0x10012cb8
1000cf48:	10012cb4 	.word	0x10012cb4

1000cf4c <db_init>:
1000cf4c:	4b0a      	ldr	r3, [pc, #40]	; (1000cf78 <db_init+0x2c>)
1000cf4e:	4a0b      	ldr	r2, [pc, #44]	; (1000cf7c <db_init+0x30>)
1000cf50:	6018      	str	r0, [r3, #0]
1000cf52:	084b      	lsrs	r3, r1, #1
1000cf54:	6013      	str	r3, [r2, #0]
1000cf56:	4a0a      	ldr	r2, [pc, #40]	; (1000cf80 <db_init+0x34>)
1000cf58:	18c3      	adds	r3, r0, r3
1000cf5a:	6013      	str	r3, [r2, #0]
1000cf5c:	4a09      	ldr	r2, [pc, #36]	; (1000cf84 <db_init+0x38>)
1000cf5e:	1841      	adds	r1, r0, r1
1000cf60:	6013      	str	r3, [r2, #0]
1000cf62:	2303      	movs	r3, #3
1000cf64:	2200      	movs	r2, #0
1000cf66:	3103      	adds	r1, #3
1000cf68:	4399      	bics	r1, r3
1000cf6a:	4b07      	ldr	r3, [pc, #28]	; (1000cf88 <db_init+0x3c>)
1000cf6c:	3904      	subs	r1, #4
1000cf6e:	6019      	str	r1, [r3, #0]
1000cf70:	4b06      	ldr	r3, [pc, #24]	; (1000cf8c <db_init+0x40>)
1000cf72:	601a      	str	r2, [r3, #0]
1000cf74:	4770      	bx	lr
1000cf76:	46c0      	nop			; (mov r8, r8)
1000cf78:	10012cc4 	.word	0x10012cc4
1000cf7c:	10012cc0 	.word	0x10012cc0
1000cf80:	10012cac 	.word	0x10012cac
1000cf84:	10012cb8 	.word	0x10012cb8
1000cf88:	10012cb4 	.word	0x10012cb4
1000cf8c:	10012cbc 	.word	0x10012cbc

1000cf90 <at_ble_characteristic_value_set>:
1000cf90:	b570      	push	{r4, r5, r6, lr}
1000cf92:	4b0b      	ldr	r3, [pc, #44]	; (1000cfc0 <at_ble_characteristic_value_set+0x30>)
1000cf94:	1c06      	adds	r6, r0, #0
1000cf96:	1c0c      	adds	r4, r1, #0
1000cf98:	1c15      	adds	r5, r2, #0
1000cf9a:	4798      	blx	r3
1000cf9c:	2800      	cmp	r0, #0
1000cf9e:	d008      	beq.n	1000cfb2 <at_ble_characteristic_value_set+0x22>
1000cfa0:	6880      	ldr	r0, [r0, #8]
1000cfa2:	2800      	cmp	r0, #0
1000cfa4:	d005      	beq.n	1000cfb2 <at_ble_characteristic_value_set+0x22>
1000cfa6:	1c21      	adds	r1, r4, #0
1000cfa8:	1c2a      	adds	r2, r5, #0
1000cfaa:	4b06      	ldr	r3, [pc, #24]	; (1000cfc4 <at_ble_characteristic_value_set+0x34>)
1000cfac:	4798      	blx	r3
1000cfae:	2000      	movs	r0, #0
1000cfb0:	e004      	b.n	1000cfbc <at_ble_characteristic_value_set+0x2c>
1000cfb2:	1c30      	adds	r0, r6, #0
1000cfb4:	1c29      	adds	r1, r5, #0
1000cfb6:	1c22      	adds	r2, r4, #0
1000cfb8:	4b03      	ldr	r3, [pc, #12]	; (1000cfc8 <at_ble_characteristic_value_set+0x38>)
1000cfba:	4798      	blx	r3
1000cfbc:	bd70      	pop	{r4, r5, r6, pc}
1000cfbe:	46c0      	nop			; (mov r8, r8)
1000cfc0:	1000cea9 	.word	0x1000cea9
1000cfc4:	1000ff37 	.word	0x1000ff37
1000cfc8:	1000eaf1 	.word	0x1000eaf1

1000cfcc <at_ble_characteristic_value_get>:
1000cfcc:	b570      	push	{r4, r5, r6, lr}
1000cfce:	4b0c      	ldr	r3, [pc, #48]	; (1000d000 <at_ble_characteristic_value_get+0x34>)
1000cfd0:	1c06      	adds	r6, r0, #0
1000cfd2:	1c0c      	adds	r4, r1, #0
1000cfd4:	1c15      	adds	r5, r2, #0
1000cfd6:	4798      	blx	r3
1000cfd8:	2800      	cmp	r0, #0
1000cfda:	d00b      	beq.n	1000cff4 <at_ble_characteristic_value_get+0x28>
1000cfdc:	6883      	ldr	r3, [r0, #8]
1000cfde:	2b00      	cmp	r3, #0
1000cfe0:	d008      	beq.n	1000cff4 <at_ble_characteristic_value_get+0x28>
1000cfe2:	8883      	ldrh	r3, [r0, #4]
1000cfe4:	802b      	strh	r3, [r5, #0]
1000cfe6:	8882      	ldrh	r2, [r0, #4]
1000cfe8:	6881      	ldr	r1, [r0, #8]
1000cfea:	4b06      	ldr	r3, [pc, #24]	; (1000d004 <at_ble_characteristic_value_get+0x38>)
1000cfec:	1c20      	adds	r0, r4, #0
1000cfee:	4798      	blx	r3
1000cff0:	2000      	movs	r0, #0
1000cff2:	e004      	b.n	1000cffe <at_ble_characteristic_value_get+0x32>
1000cff4:	1c30      	adds	r0, r6, #0
1000cff6:	1c29      	adds	r1, r5, #0
1000cff8:	1c22      	adds	r2, r4, #0
1000cffa:	4b03      	ldr	r3, [pc, #12]	; (1000d008 <at_ble_characteristic_value_get+0x3c>)
1000cffc:	4798      	blx	r3
1000cffe:	bd70      	pop	{r4, r5, r6, pc}
1000d000:	1000cea9 	.word	0x1000cea9
1000d004:	1000ff37 	.word	0x1000ff37
1000d008:	1000eb7d 	.word	0x1000eb7d

1000d00c <at_ble_write_authorize_reply>:
1000d00c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d00e:	b085      	sub	sp, #20
1000d010:	1c04      	adds	r4, r0, #0
1000d012:	9101      	str	r1, [sp, #4]
1000d014:	2900      	cmp	r1, #0
1000d016:	d128      	bne.n	1000d06a <at_ble_write_authorize_reply+0x5e>
1000d018:	8843      	ldrh	r3, [r0, #2]
1000d01a:	1c27      	adds	r7, r4, #0
1000d01c:	9300      	str	r3, [sp, #0]
1000d01e:	1c18      	adds	r0, r3, #0
1000d020:	4b16      	ldr	r3, [pc, #88]	; (1000d07c <at_ble_write_authorize_reply+0x70>)
1000d022:	4798      	blx	r3
1000d024:	3708      	adds	r7, #8
1000d026:	2800      	cmp	r0, #0
1000d028:	d009      	beq.n	1000d03e <at_ble_write_authorize_reply+0x32>
1000d02a:	6880      	ldr	r0, [r0, #8]
1000d02c:	2800      	cmp	r0, #0
1000d02e:	d006      	beq.n	1000d03e <at_ble_write_authorize_reply+0x32>
1000d030:	88a3      	ldrh	r3, [r4, #4]
1000d032:	88e2      	ldrh	r2, [r4, #6]
1000d034:	18c0      	adds	r0, r0, r3
1000d036:	1c39      	adds	r1, r7, #0
1000d038:	4b11      	ldr	r3, [pc, #68]	; (1000d080 <at_ble_write_authorize_reply+0x74>)
1000d03a:	4798      	blx	r3
1000d03c:	e015      	b.n	1000d06a <at_ble_write_authorize_reply+0x5e>
1000d03e:	ab02      	add	r3, sp, #8
1000d040:	1d9e      	adds	r6, r3, #6
1000d042:	2300      	movs	r3, #0
1000d044:	4d0f      	ldr	r5, [pc, #60]	; (1000d084 <at_ble_write_authorize_reply+0x78>)
1000d046:	8033      	strh	r3, [r6, #0]
1000d048:	6829      	ldr	r1, [r5, #0]
1000d04a:	1c32      	adds	r2, r6, #0
1000d04c:	4b0e      	ldr	r3, [pc, #56]	; (1000d088 <at_ble_write_authorize_reply+0x7c>)
1000d04e:	9800      	ldr	r0, [sp, #0]
1000d050:	4798      	blx	r3
1000d052:	682b      	ldr	r3, [r5, #0]
1000d054:	88a0      	ldrh	r0, [r4, #4]
1000d056:	88e2      	ldrh	r2, [r4, #6]
1000d058:	1818      	adds	r0, r3, r0
1000d05a:	1c39      	adds	r1, r7, #0
1000d05c:	4b08      	ldr	r3, [pc, #32]	; (1000d080 <at_ble_write_authorize_reply+0x74>)
1000d05e:	4798      	blx	r3
1000d060:	8860      	ldrh	r0, [r4, #2]
1000d062:	8832      	ldrh	r2, [r6, #0]
1000d064:	6829      	ldr	r1, [r5, #0]
1000d066:	4b09      	ldr	r3, [pc, #36]	; (1000d08c <at_ble_write_authorize_reply+0x80>)
1000d068:	4798      	blx	r3
1000d06a:	8860      	ldrh	r0, [r4, #2]
1000d06c:	8821      	ldrh	r1, [r4, #0]
1000d06e:	9a01      	ldr	r2, [sp, #4]
1000d070:	4b07      	ldr	r3, [pc, #28]	; (1000d090 <at_ble_write_authorize_reply+0x84>)
1000d072:	4798      	blx	r3
1000d074:	2000      	movs	r0, #0
1000d076:	b005      	add	sp, #20
1000d078:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d07a:	46c0      	nop			; (mov r8, r8)
1000d07c:	1000cea9 	.word	0x1000cea9
1000d080:	1000ff37 	.word	0x1000ff37
1000d084:	10012a34 	.word	0x10012a34
1000d088:	1000cfcd 	.word	0x1000cfcd
1000d08c:	1000cf91 	.word	0x1000cf91
1000d090:	1000e759 	.word	0x1000e759

1000d094 <gatts_handle_read_req>:
1000d094:	b538      	push	{r3, r4, r5, lr}
1000d096:	1c0c      	adds	r4, r1, #0
1000d098:	4b07      	ldr	r3, [pc, #28]	; (1000d0b8 <gatts_handle_read_req+0x24>)
1000d09a:	4798      	blx	r3
1000d09c:	8865      	ldrh	r5, [r4, #2]
1000d09e:	4b07      	ldr	r3, [pc, #28]	; (1000d0bc <gatts_handle_read_req+0x28>)
1000d0a0:	1c28      	adds	r0, r5, #0
1000d0a2:	4798      	blx	r3
1000d0a4:	7883      	ldrb	r3, [r0, #2]
1000d0a6:	2026      	movs	r0, #38	; 0x26
1000d0a8:	07db      	lsls	r3, r3, #31
1000d0aa:	d404      	bmi.n	1000d0b6 <gatts_handle_read_req+0x22>
1000d0ac:	8820      	ldrh	r0, [r4, #0]
1000d0ae:	1c29      	adds	r1, r5, #0
1000d0b0:	4b03      	ldr	r3, [pc, #12]	; (1000d0c0 <gatts_handle_read_req+0x2c>)
1000d0b2:	4798      	blx	r3
1000d0b4:	203b      	movs	r0, #59	; 0x3b
1000d0b6:	bd38      	pop	{r3, r4, r5, pc}
1000d0b8:	1000e69d 	.word	0x1000e69d
1000d0bc:	1000cea9 	.word	0x1000cea9
1000d0c0:	1000cee9 	.word	0x1000cee9

1000d0c4 <gatts_handle_att_info_req>:
1000d0c4:	b538      	push	{r3, r4, r5, lr}
1000d0c6:	1c0d      	adds	r5, r1, #0
1000d0c8:	4b0a      	ldr	r3, [pc, #40]	; (1000d0f4 <gatts_handle_att_info_req+0x30>)
1000d0ca:	1c14      	adds	r4, r2, #0
1000d0cc:	4798      	blx	r3
1000d0ce:	882d      	ldrh	r5, [r5, #0]
1000d0d0:	4b09      	ldr	r3, [pc, #36]	; (1000d0f8 <gatts_handle_att_info_req+0x34>)
1000d0d2:	1c28      	adds	r0, r5, #0
1000d0d4:	4798      	blx	r3
1000d0d6:	0a22      	lsrs	r2, r4, #8
1000d0d8:	1c03      	adds	r3, r0, #0
1000d0da:	4c08      	ldr	r4, [pc, #32]	; (1000d0fc <gatts_handle_att_info_req+0x38>)
1000d0dc:	b291      	uxth	r1, r2
1000d0de:	2800      	cmp	r0, #0
1000d0e0:	d003      	beq.n	1000d0ea <gatts_handle_att_info_req+0x26>
1000d0e2:	8882      	ldrh	r2, [r0, #4]
1000d0e4:	2300      	movs	r3, #0
1000d0e6:	1c28      	adds	r0, r5, #0
1000d0e8:	e001      	b.n	1000d0ee <gatts_handle_att_info_req+0x2a>
1000d0ea:	1c28      	adds	r0, r5, #0
1000d0ec:	2201      	movs	r2, #1
1000d0ee:	47a0      	blx	r4
1000d0f0:	203b      	movs	r0, #59	; 0x3b
1000d0f2:	bd38      	pop	{r3, r4, r5, pc}
1000d0f4:	1000e6e1 	.word	0x1000e6e1
1000d0f8:	1000cea9 	.word	0x1000cea9
1000d0fc:	1000e79d 	.word	0x1000e79d

1000d100 <gatts_handle_write_req>:
1000d100:	b510      	push	{r4, lr}
1000d102:	1c14      	adds	r4, r2, #0
1000d104:	4b07      	ldr	r3, [pc, #28]	; (1000d124 <gatts_handle_write_req+0x24>)
1000d106:	4798      	blx	r3
1000d108:	4b07      	ldr	r3, [pc, #28]	; (1000d128 <gatts_handle_write_req+0x28>)
1000d10a:	8860      	ldrh	r0, [r4, #2]
1000d10c:	4798      	blx	r3
1000d10e:	2302      	movs	r3, #2
1000d110:	7881      	ldrb	r1, [r0, #2]
1000d112:	2022      	movs	r0, #34	; 0x22
1000d114:	4019      	ands	r1, r3
1000d116:	d103      	bne.n	1000d120 <gatts_handle_write_req+0x20>
1000d118:	1c20      	adds	r0, r4, #0
1000d11a:	4b04      	ldr	r3, [pc, #16]	; (1000d12c <gatts_handle_write_req+0x2c>)
1000d11c:	4798      	blx	r3
1000d11e:	201f      	movs	r0, #31
1000d120:	bd10      	pop	{r4, pc}
1000d122:	46c0      	nop			; (mov r8, r8)
1000d124:	1000e6a9 	.word	0x1000e6a9
1000d128:	1000cea9 	.word	0x1000cea9
1000d12c:	1000d00d 	.word	0x1000d00d

1000d130 <init_l2cc_task_module>:
1000d130:	220a      	movs	r2, #10
1000d132:	4b01      	ldr	r3, [pc, #4]	; (1000d138 <init_l2cc_task_module+0x8>)
1000d134:	701a      	strb	r2, [r3, #0]
1000d136:	4770      	bx	lr
1000d138:	10012a31 	.word	0x10012a31

1000d13c <l2cc_data_send_rsp_handler>:
1000d13c:	b510      	push	{r4, lr}
1000d13e:	7802      	ldrb	r2, [r0, #0]
1000d140:	700a      	strb	r2, [r1, #0]
1000d142:	7883      	ldrb	r3, [r0, #2]
1000d144:	7844      	ldrb	r4, [r0, #1]
1000d146:	021b      	lsls	r3, r3, #8
1000d148:	4323      	orrs	r3, r4
1000d14a:	804b      	strh	r3, [r1, #2]
1000d14c:	7903      	ldrb	r3, [r0, #4]
1000d14e:	78c0      	ldrb	r0, [r0, #3]
1000d150:	021b      	lsls	r3, r3, #8
1000d152:	4303      	orrs	r3, r0
1000d154:	808b      	strh	r3, [r1, #4]
1000d156:	2a00      	cmp	r2, #0
1000d158:	d103      	bne.n	1000d162 <l2cc_data_send_rsp_handler+0x26>
1000d15a:	4a02      	ldr	r2, [pc, #8]	; (1000d164 <l2cc_data_send_rsp_handler+0x28>)
1000d15c:	7813      	ldrb	r3, [r2, #0]
1000d15e:	3301      	adds	r3, #1
1000d160:	7013      	strb	r3, [r2, #0]
1000d162:	bd10      	pop	{r4, pc}
1000d164:	10012a31 	.word	0x10012a31

1000d168 <l2cc_data_received_handler>:
1000d168:	b508      	push	{r3, lr}
1000d16a:	1c03      	adds	r3, r0, #0
1000d16c:	7842      	ldrb	r2, [r0, #1]
1000d16e:	7800      	ldrb	r0, [r0, #0]
1000d170:	0212      	lsls	r2, r2, #8
1000d172:	4302      	orrs	r2, r0
1000d174:	800a      	strh	r2, [r1, #0]
1000d176:	78da      	ldrb	r2, [r3, #3]
1000d178:	7898      	ldrb	r0, [r3, #2]
1000d17a:	0212      	lsls	r2, r2, #8
1000d17c:	4302      	orrs	r2, r0
1000d17e:	804a      	strh	r2, [r1, #2]
1000d180:	795a      	ldrb	r2, [r3, #5]
1000d182:	7918      	ldrb	r0, [r3, #4]
1000d184:	0212      	lsls	r2, r2, #8
1000d186:	4302      	orrs	r2, r0
1000d188:	808a      	strh	r2, [r1, #4]
1000d18a:	1d88      	adds	r0, r1, #6
1000d18c:	1d99      	adds	r1, r3, #6
1000d18e:	4b01      	ldr	r3, [pc, #4]	; (1000d194 <l2cc_data_received_handler+0x2c>)
1000d190:	4798      	blx	r3
1000d192:	bd08      	pop	{r3, pc}
1000d194:	1000ff37 	.word	0x1000ff37

1000d198 <at_ble_authenticate>:
1000d198:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d19a:	1c0c      	adds	r4, r1, #0
1000d19c:	211f      	movs	r1, #31
1000d19e:	b08b      	sub	sp, #44	; 0x2c
1000d1a0:	9307      	str	r3, [sp, #28]
1000d1a2:	ab02      	add	r3, sp, #8
1000d1a4:	18c9      	adds	r1, r1, r3
1000d1a6:	230f      	movs	r3, #15
1000d1a8:	700b      	strb	r3, [r1, #0]
1000d1aa:	4b40      	ldr	r3, [pc, #256]	; (1000d2ac <at_ble_authenticate+0x114>)
1000d1ac:	1c05      	adds	r5, r0, #0
1000d1ae:	1c16      	adds	r6, r2, #0
1000d1b0:	4798      	blx	r3
1000d1b2:	1c07      	adds	r7, r0, #0
1000d1b4:	2001      	movs	r0, #1
1000d1b6:	2f07      	cmp	r7, #7
1000d1b8:	d875      	bhi.n	1000d2a6 <at_ble_authenticate+0x10e>
1000d1ba:	2c00      	cmp	r4, #0
1000d1bc:	d113      	bne.n	1000d1e6 <at_ble_authenticate+0x4e>
1000d1be:	2312      	movs	r3, #18
1000d1c0:	435f      	muls	r7, r3
1000d1c2:	4b3b      	ldr	r3, [pc, #236]	; (1000d2b0 <at_ble_authenticate+0x118>)
1000d1c4:	5cfb      	ldrb	r3, [r7, r3]
1000d1c6:	4283      	cmp	r3, r0
1000d1c8:	d001      	beq.n	1000d1ce <at_ble_authenticate+0x36>
1000d1ca:	20cf      	movs	r0, #207	; 0xcf
1000d1cc:	e06b      	b.n	1000d2a6 <at_ble_authenticate+0x10e>
1000d1ce:	9504      	str	r5, [sp, #16]
1000d1d0:	9400      	str	r4, [sp, #0]
1000d1d2:	9401      	str	r4, [sp, #4]
1000d1d4:	9402      	str	r4, [sp, #8]
1000d1d6:	9403      	str	r4, [sp, #12]
1000d1d8:	1c20      	adds	r0, r4, #0
1000d1da:	1c21      	adds	r1, r4, #0
1000d1dc:	1c22      	adds	r2, r4, #0
1000d1de:	1c23      	adds	r3, r4, #0
1000d1e0:	4d34      	ldr	r5, [pc, #208]	; (1000d2b4 <at_ble_authenticate+0x11c>)
1000d1e2:	47a8      	blx	r5
1000d1e4:	e05e      	b.n	1000d2a4 <at_ble_authenticate+0x10c>
1000d1e6:	7922      	ldrb	r2, [r4, #4]
1000d1e8:	2a06      	cmp	r2, #6
1000d1ea:	d9ee      	bls.n	1000d1ca <at_ble_authenticate+0x32>
1000d1ec:	7963      	ldrb	r3, [r4, #5]
1000d1ee:	2b10      	cmp	r3, #16
1000d1f0:	d8eb      	bhi.n	1000d1ca <at_ble_authenticate+0x32>
1000d1f2:	429a      	cmp	r2, r3
1000d1f4:	d8e9      	bhi.n	1000d1ca <at_ble_authenticate+0x32>
1000d1f6:	7a23      	ldrb	r3, [r4, #8]
1000d1f8:	2b04      	cmp	r3, #4
1000d1fa:	d8e6      	bhi.n	1000d1ca <at_ble_authenticate+0x32>
1000d1fc:	79a3      	ldrb	r3, [r4, #6]
1000d1fe:	2b07      	cmp	r3, #7
1000d200:	d8e3      	bhi.n	1000d1ca <at_ble_authenticate+0x32>
1000d202:	79e3      	ldrb	r3, [r4, #7]
1000d204:	2b07      	cmp	r3, #7
1000d206:	d8e0      	bhi.n	1000d1ca <at_ble_authenticate+0x32>
1000d208:	78a3      	ldrb	r3, [r4, #2]
1000d20a:	2b00      	cmp	r3, #0
1000d20c:	d006      	beq.n	1000d21c <at_ble_authenticate+0x84>
1000d20e:	2e00      	cmp	r6, #0
1000d210:	d0db      	beq.n	1000d1ca <at_ble_authenticate+0x32>
1000d212:	4829      	ldr	r0, [pc, #164]	; (1000d2b8 <at_ble_authenticate+0x120>)
1000d214:	1c31      	adds	r1, r6, #0
1000d216:	221c      	movs	r2, #28
1000d218:	4b28      	ldr	r3, [pc, #160]	; (1000d2bc <at_ble_authenticate+0x124>)
1000d21a:	4798      	blx	r3
1000d21c:	9b07      	ldr	r3, [sp, #28]
1000d21e:	2b00      	cmp	r3, #0
1000d220:	d005      	beq.n	1000d22e <at_ble_authenticate+0x96>
1000d222:	4827      	ldr	r0, [pc, #156]	; (1000d2c0 <at_ble_authenticate+0x128>)
1000d224:	1c19      	adds	r1, r3, #0
1000d226:	309a      	adds	r0, #154	; 0x9a
1000d228:	2210      	movs	r2, #16
1000d22a:	4b24      	ldr	r3, [pc, #144]	; (1000d2bc <at_ble_authenticate+0x124>)
1000d22c:	4798      	blx	r3
1000d22e:	7863      	ldrb	r3, [r4, #1]
1000d230:	78a2      	ldrb	r2, [r4, #2]
1000d232:	009b      	lsls	r3, r3, #2
1000d234:	4313      	orrs	r3, r2
1000d236:	2212      	movs	r2, #18
1000d238:	4357      	muls	r7, r2
1000d23a:	4a1d      	ldr	r2, [pc, #116]	; (1000d2b0 <at_ble_authenticate+0x118>)
1000d23c:	b2db      	uxtb	r3, r3
1000d23e:	5cba      	ldrb	r2, [r7, r2]
1000d240:	2a00      	cmp	r2, #0
1000d242:	d116      	bne.n	1000d272 <at_ble_authenticate+0xda>
1000d244:	79a0      	ldrb	r0, [r4, #6]
1000d246:	0742      	lsls	r2, r0, #29
1000d248:	d502      	bpl.n	1000d250 <at_ble_authenticate+0xb8>
1000d24a:	9a07      	ldr	r2, [sp, #28]
1000d24c:	2a00      	cmp	r2, #0
1000d24e:	d0bc      	beq.n	1000d1ca <at_ble_authenticate+0x32>
1000d250:	07c2      	lsls	r2, r0, #31
1000d252:	d501      	bpl.n	1000d258 <at_ble_authenticate+0xc0>
1000d254:	2e00      	cmp	r6, #0
1000d256:	d0b8      	beq.n	1000d1ca <at_ble_authenticate+0x32>
1000d258:	7966      	ldrb	r6, [r4, #5]
1000d25a:	7821      	ldrb	r1, [r4, #0]
1000d25c:	78e2      	ldrb	r2, [r4, #3]
1000d25e:	9600      	str	r6, [sp, #0]
1000d260:	9001      	str	r0, [sp, #4]
1000d262:	79e0      	ldrb	r0, [r4, #7]
1000d264:	9002      	str	r0, [sp, #8]
1000d266:	7a20      	ldrb	r0, [r4, #8]
1000d268:	4c16      	ldr	r4, [pc, #88]	; (1000d2c4 <at_ble_authenticate+0x12c>)
1000d26a:	9003      	str	r0, [sp, #12]
1000d26c:	1c28      	adds	r0, r5, #0
1000d26e:	47a0      	blx	r4
1000d270:	e018      	b.n	1000d2a4 <at_ble_authenticate+0x10c>
1000d272:	2a01      	cmp	r2, #1
1000d274:	d1a9      	bne.n	1000d1ca <at_ble_authenticate+0x32>
1000d276:	79e0      	ldrb	r0, [r4, #7]
1000d278:	0742      	lsls	r2, r0, #29
1000d27a:	d502      	bpl.n	1000d282 <at_ble_authenticate+0xea>
1000d27c:	9a07      	ldr	r2, [sp, #28]
1000d27e:	2a00      	cmp	r2, #0
1000d280:	d0a3      	beq.n	1000d1ca <at_ble_authenticate+0x32>
1000d282:	07c2      	lsls	r2, r0, #31
1000d284:	d501      	bpl.n	1000d28a <at_ble_authenticate+0xf2>
1000d286:	2e00      	cmp	r6, #0
1000d288:	d09f      	beq.n	1000d1ca <at_ble_authenticate+0x32>
1000d28a:	7966      	ldrb	r6, [r4, #5]
1000d28c:	7821      	ldrb	r1, [r4, #0]
1000d28e:	78e2      	ldrb	r2, [r4, #3]
1000d290:	9600      	str	r6, [sp, #0]
1000d292:	79a6      	ldrb	r6, [r4, #6]
1000d294:	9002      	str	r0, [sp, #8]
1000d296:	9601      	str	r6, [sp, #4]
1000d298:	7a20      	ldrb	r0, [r4, #8]
1000d29a:	9504      	str	r5, [sp, #16]
1000d29c:	9003      	str	r0, [sp, #12]
1000d29e:	4c05      	ldr	r4, [pc, #20]	; (1000d2b4 <at_ble_authenticate+0x11c>)
1000d2a0:	2001      	movs	r0, #1
1000d2a2:	47a0      	blx	r4
1000d2a4:	2000      	movs	r0, #0
1000d2a6:	b00b      	add	sp, #44	; 0x2c
1000d2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2aa:	46c0      	nop			; (mov r8, r8)
1000d2ac:	1000d641 	.word	0x1000d641
1000d2b0:	100139ce 	.word	0x100139ce
1000d2b4:	1000dbb1 	.word	0x1000dbb1
1000d2b8:	10013adc 	.word	0x10013adc
1000d2bc:	1000ff37 	.word	0x1000ff37
1000d2c0:	10013a5e 	.word	0x10013a5e
1000d2c4:	1000d991 	.word	0x1000d991

1000d2c8 <at_ble_pair_key_reply>:
1000d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2ca:	b085      	sub	sp, #20
1000d2cc:	1c05      	adds	r5, r0, #0
1000d2ce:	1c0c      	adds	r4, r1, #0
1000d2d0:	1c16      	adds	r6, r2, #0
1000d2d2:	2100      	movs	r1, #0
1000d2d4:	4668      	mov	r0, sp
1000d2d6:	2210      	movs	r2, #16
1000d2d8:	4b18      	ldr	r3, [pc, #96]	; (1000d33c <at_ble_pair_key_reply+0x74>)
1000d2da:	4798      	blx	r3
1000d2dc:	2101      	movs	r1, #1
1000d2de:	2e00      	cmp	r6, #0
1000d2e0:	d101      	bne.n	1000d2e6 <at_ble_pair_key_reply+0x1e>
1000d2e2:	1c31      	adds	r1, r6, #0
1000d2e4:	466e      	mov	r6, sp
1000d2e6:	2c00      	cmp	r4, #0
1000d2e8:	d116      	bne.n	1000d318 <at_ble_pair_key_reply+0x50>
1000d2ea:	2701      	movs	r7, #1
1000d2ec:	1c23      	adds	r3, r4, #0
1000d2ee:	1d70      	adds	r0, r6, #5
1000d2f0:	3e01      	subs	r6, #1
1000d2f2:	7802      	ldrb	r2, [r0, #0]
1000d2f4:	3801      	subs	r0, #1
1000d2f6:	3a30      	subs	r2, #48	; 0x30
1000d2f8:	437a      	muls	r2, r7
1000d2fa:	189b      	adds	r3, r3, r2
1000d2fc:	220a      	movs	r2, #10
1000d2fe:	4357      	muls	r7, r2
1000d300:	42b0      	cmp	r0, r6
1000d302:	d1f6      	bne.n	1000d2f2 <at_ble_pair_key_reply+0x2a>
1000d304:	466a      	mov	r2, sp
1000d306:	4668      	mov	r0, sp
1000d308:	7013      	strb	r3, [r2, #0]
1000d30a:	0a1a      	lsrs	r2, r3, #8
1000d30c:	7042      	strb	r2, [r0, #1]
1000d30e:	0c1a      	lsrs	r2, r3, #16
1000d310:	0e1b      	lsrs	r3, r3, #24
1000d312:	7082      	strb	r2, [r0, #2]
1000d314:	70c3      	strb	r3, [r0, #3]
1000d316:	e009      	b.n	1000d32c <at_ble_pair_key_reply+0x64>
1000d318:	20cf      	movs	r0, #207	; 0xcf
1000d31a:	2c01      	cmp	r4, #1
1000d31c:	d10c      	bne.n	1000d338 <at_ble_pair_key_reply+0x70>
1000d31e:	2300      	movs	r3, #0
1000d320:	4668      	mov	r0, sp
1000d322:	5cf2      	ldrb	r2, [r6, r3]
1000d324:	54c2      	strb	r2, [r0, r3]
1000d326:	3301      	adds	r3, #1
1000d328:	2b10      	cmp	r3, #16
1000d32a:	d1f9      	bne.n	1000d320 <at_ble_pair_key_reply+0x58>
1000d32c:	2004      	movs	r0, #4
1000d32e:	466a      	mov	r2, sp
1000d330:	1c2b      	adds	r3, r5, #0
1000d332:	4c03      	ldr	r4, [pc, #12]	; (1000d340 <at_ble_pair_key_reply+0x78>)
1000d334:	47a0      	blx	r4
1000d336:	2000      	movs	r0, #0
1000d338:	b005      	add	sp, #20
1000d33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d33c:	1000ff49 	.word	0x1000ff49
1000d340:	1000dc2d 	.word	0x1000dc2d

1000d344 <at_ble_encryption_start>:
1000d344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d346:	23cf      	movs	r3, #207	; 0xcf
1000d348:	2900      	cmp	r1, #0
1000d34a:	d02b      	beq.n	1000d3a4 <at_ble_encryption_start+0x60>
1000d34c:	2a05      	cmp	r2, #5
1000d34e:	d829      	bhi.n	1000d3a4 <at_ble_encryption_start+0x60>
1000d350:	2701      	movs	r7, #1
1000d352:	1c3d      	adds	r5, r7, #0
1000d354:	2433      	movs	r4, #51	; 0x33
1000d356:	4095      	lsls	r5, r2
1000d358:	4225      	tst	r5, r4
1000d35a:	d023      	beq.n	1000d3a4 <at_ble_encryption_start+0x60>
1000d35c:	7e8c      	ldrb	r4, [r1, #26]
1000d35e:	3c07      	subs	r4, #7
1000d360:	2c09      	cmp	r4, #9
1000d362:	d81f      	bhi.n	1000d3a4 <at_ble_encryption_start+0x60>
1000d364:	4b10      	ldr	r3, [pc, #64]	; (1000d3a8 <at_ble_encryption_start+0x64>)
1000d366:	1c0c      	adds	r4, r1, #0
1000d368:	2100      	movs	r1, #0
1000d36a:	1c15      	adds	r5, r2, #0
1000d36c:	1c06      	adds	r6, r0, #0
1000d36e:	4798      	blx	r3
1000d370:	1c3b      	adds	r3, r7, #0
1000d372:	2807      	cmp	r0, #7
1000d374:	d816      	bhi.n	1000d3a4 <at_ble_encryption_start+0x60>
1000d376:	2312      	movs	r3, #18
1000d378:	4358      	muls	r0, r3
1000d37a:	4b0c      	ldr	r3, [pc, #48]	; (1000d3ac <at_ble_encryption_start+0x68>)
1000d37c:	5cc7      	ldrb	r7, [r0, r3]
1000d37e:	23e0      	movs	r3, #224	; 0xe0
1000d380:	2f00      	cmp	r7, #0
1000d382:	d10f      	bne.n	1000d3a4 <at_ble_encryption_start+0x60>
1000d384:	1c21      	adds	r1, r4, #0
1000d386:	221c      	movs	r2, #28
1000d388:	4b09      	ldr	r3, [pc, #36]	; (1000d3b0 <at_ble_encryption_start+0x6c>)
1000d38a:	480a      	ldr	r0, [pc, #40]	; (1000d3b4 <at_ble_encryption_start+0x70>)
1000d38c:	4798      	blx	r3
1000d38e:	1c23      	adds	r3, r4, #0
1000d390:	7ea1      	ldrb	r1, [r4, #26]
1000d392:	8a22      	ldrh	r2, [r4, #16]
1000d394:	3312      	adds	r3, #18
1000d396:	9100      	str	r1, [sp, #0]
1000d398:	9501      	str	r5, [sp, #4]
1000d39a:	1c21      	adds	r1, r4, #0
1000d39c:	1c30      	adds	r0, r6, #0
1000d39e:	4c06      	ldr	r4, [pc, #24]	; (1000d3b8 <at_ble_encryption_start+0x74>)
1000d3a0:	47a0      	blx	r4
1000d3a2:	1c3b      	adds	r3, r7, #0
1000d3a4:	1c18      	adds	r0, r3, #0
1000d3a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d3a8:	1000d641 	.word	0x1000d641
1000d3ac:	100139ce 	.word	0x100139ce
1000d3b0:	1000ff37 	.word	0x1000ff37
1000d3b4:	10013adc 	.word	0x10013adc
1000d3b8:	1000dc7d 	.word	0x1000dc7d

1000d3bc <at_ble_encryption_request_reply>:
1000d3bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d3be:	24cf      	movs	r4, #207	; 0xcf
1000d3c0:	2b00      	cmp	r3, #0
1000d3c2:	d011      	beq.n	1000d3e8 <at_ble_encryption_request_reply+0x2c>
1000d3c4:	2a00      	cmp	r2, #0
1000d3c6:	d00a      	beq.n	1000d3de <at_ble_encryption_request_reply+0x22>
1000d3c8:	2905      	cmp	r1, #5
1000d3ca:	d80d      	bhi.n	1000d3e8 <at_ble_encryption_request_reply+0x2c>
1000d3cc:	2501      	movs	r5, #1
1000d3ce:	2633      	movs	r6, #51	; 0x33
1000d3d0:	408d      	lsls	r5, r1
1000d3d2:	4235      	tst	r5, r6
1000d3d4:	d008      	beq.n	1000d3e8 <at_ble_encryption_request_reply+0x2c>
1000d3d6:	7e9d      	ldrb	r5, [r3, #26]
1000d3d8:	3d07      	subs	r5, #7
1000d3da:	2d09      	cmp	r5, #9
1000d3dc:	d804      	bhi.n	1000d3e8 <at_ble_encryption_request_reply+0x2c>
1000d3de:	7e9c      	ldrb	r4, [r3, #26]
1000d3e0:	9400      	str	r4, [sp, #0]
1000d3e2:	4c02      	ldr	r4, [pc, #8]	; (1000d3ec <at_ble_encryption_request_reply+0x30>)
1000d3e4:	47a0      	blx	r4
1000d3e6:	2400      	movs	r4, #0
1000d3e8:	1c20      	adds	r0, r4, #0
1000d3ea:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d3ec:	1000dd39 	.word	0x1000dd39

1000d3f0 <rx_callback>:
1000d3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d3f2:	88c5      	ldrh	r5, [r0, #6]
1000d3f4:	8807      	ldrh	r7, [r0, #0]
1000d3f6:	8886      	ldrh	r6, [r0, #4]
1000d3f8:	2d00      	cmp	r5, #0
1000d3fa:	d10c      	bne.n	1000d416 <rx_callback+0x26>
1000d3fc:	4b19      	ldr	r3, [pc, #100]	; (1000d464 <rx_callback+0x74>)
1000d3fe:	1c38      	adds	r0, r7, #0
1000d400:	1c31      	adds	r1, r6, #0
1000d402:	1c2a      	adds	r2, r5, #0
1000d404:	4798      	blx	r3
1000d406:	1e03      	subs	r3, r0, #0
1000d408:	d12a      	bne.n	1000d460 <rx_callback+0x70>
1000d40a:	1c38      	adds	r0, r7, #0
1000d40c:	1c31      	adds	r1, r6, #0
1000d40e:	1c1a      	adds	r2, r3, #0
1000d410:	4c15      	ldr	r4, [pc, #84]	; (1000d468 <rx_callback+0x78>)
1000d412:	47a0      	blx	r4
1000d414:	e024      	b.n	1000d460 <rx_callback+0x70>
1000d416:	2296      	movs	r2, #150	; 0x96
1000d418:	4c14      	ldr	r4, [pc, #80]	; (1000d46c <rx_callback+0x7c>)
1000d41a:	0092      	lsls	r2, r2, #2
1000d41c:	8823      	ldrh	r3, [r4, #0]
1000d41e:	195b      	adds	r3, r3, r5
1000d420:	4293      	cmp	r3, r2
1000d422:	dd01      	ble.n	1000d428 <rx_callback+0x38>
1000d424:	2300      	movs	r3, #0
1000d426:	8023      	strh	r3, [r4, #0]
1000d428:	1c01      	adds	r1, r0, #0
1000d42a:	4a11      	ldr	r2, [pc, #68]	; (1000d470 <rx_callback+0x80>)
1000d42c:	8823      	ldrh	r3, [r4, #0]
1000d42e:	3108      	adds	r1, #8
1000d430:	189b      	adds	r3, r3, r2
1000d432:	9301      	str	r3, [sp, #4]
1000d434:	1c18      	adds	r0, r3, #0
1000d436:	1c2a      	adds	r2, r5, #0
1000d438:	4b0e      	ldr	r3, [pc, #56]	; (1000d474 <rx_callback+0x84>)
1000d43a:	4798      	blx	r3
1000d43c:	1c38      	adds	r0, r7, #0
1000d43e:	1c31      	adds	r1, r6, #0
1000d440:	9a01      	ldr	r2, [sp, #4]
1000d442:	4b08      	ldr	r3, [pc, #32]	; (1000d464 <rx_callback+0x74>)
1000d444:	4798      	blx	r3
1000d446:	2800      	cmp	r0, #0
1000d448:	d10a      	bne.n	1000d460 <rx_callback+0x70>
1000d44a:	4b09      	ldr	r3, [pc, #36]	; (1000d470 <rx_callback+0x80>)
1000d44c:	8822      	ldrh	r2, [r4, #0]
1000d44e:	1c31      	adds	r1, r6, #0
1000d450:	18d2      	adds	r2, r2, r3
1000d452:	1c38      	adds	r0, r7, #0
1000d454:	1c2b      	adds	r3, r5, #0
1000d456:	4e04      	ldr	r6, [pc, #16]	; (1000d468 <rx_callback+0x78>)
1000d458:	47b0      	blx	r6
1000d45a:	8823      	ldrh	r3, [r4, #0]
1000d45c:	18ed      	adds	r5, r5, r3
1000d45e:	8025      	strh	r5, [r4, #0]
1000d460:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d462:	46c0      	nop			; (mov r8, r8)
1000d464:	1000c2f1 	.word	0x1000c2f1
1000d468:	1000c285 	.word	0x1000c285
1000d46c:	10013b38 	.word	0x10013b38
1000d470:	10013f3c 	.word	0x10013f3c
1000d474:	1000ff37 	.word	0x1000ff37

1000d478 <interface_send>:
1000d478:	b508      	push	{r3, lr}
1000d47a:	4b02      	ldr	r3, [pc, #8]	; (1000d484 <interface_send+0xc>)
1000d47c:	4798      	blx	r3
1000d47e:	2000      	movs	r0, #0
1000d480:	bd08      	pop	{r3, pc}
1000d482:	46c0      	nop			; (mov r8, r8)
1000d484:	1000b2e5 	.word	0x1000b2e5

1000d488 <interface_init>:
1000d488:	2280      	movs	r2, #128	; 0x80
1000d48a:	b510      	push	{r4, lr}
1000d48c:	2100      	movs	r1, #0
1000d48e:	4c08      	ldr	r4, [pc, #32]	; (1000d4b0 <interface_init+0x28>)
1000d490:	0092      	lsls	r2, r2, #2
1000d492:	4808      	ldr	r0, [pc, #32]	; (1000d4b4 <interface_init+0x2c>)
1000d494:	47a0      	blx	r4
1000d496:	2296      	movs	r2, #150	; 0x96
1000d498:	2100      	movs	r1, #0
1000d49a:	0092      	lsls	r2, r2, #2
1000d49c:	4806      	ldr	r0, [pc, #24]	; (1000d4b8 <interface_init+0x30>)
1000d49e:	47a0      	blx	r4
1000d4a0:	2200      	movs	r2, #0
1000d4a2:	4b06      	ldr	r3, [pc, #24]	; (1000d4bc <interface_init+0x34>)
1000d4a4:	801a      	strh	r2, [r3, #0]
1000d4a6:	4a06      	ldr	r2, [pc, #24]	; (1000d4c0 <interface_init+0x38>)
1000d4a8:	4b06      	ldr	r3, [pc, #24]	; (1000d4c4 <interface_init+0x3c>)
1000d4aa:	601a      	str	r2, [r3, #0]
1000d4ac:	bd10      	pop	{r4, pc}
1000d4ae:	46c0      	nop			; (mov r8, r8)
1000d4b0:	1000ff49 	.word	0x1000ff49
1000d4b4:	10013d3c 	.word	0x10013d3c
1000d4b8:	10013f3c 	.word	0x10013f3c
1000d4bc:	10013b38 	.word	0x10013b38
1000d4c0:	10013b3c 	.word	0x10013b3c
1000d4c4:	10012a34 	.word	0x10012a34

1000d4c8 <platform_cmd_cmpl_signal>:
1000d4c8:	2201      	movs	r2, #1
1000d4ca:	4b01      	ldr	r3, [pc, #4]	; (1000d4d0 <platform_cmd_cmpl_signal+0x8>)
1000d4cc:	601a      	str	r2, [r3, #0]
1000d4ce:	4770      	bx	lr
1000d4d0:	10012cc8 	.word	0x10012cc8

1000d4d4 <platform_cmd_cmpl_wait>:
1000d4d4:	b510      	push	{r4, lr}
1000d4d6:	1c04      	adds	r4, r0, #0
1000d4d8:	4b07      	ldr	r3, [pc, #28]	; (1000d4f8 <platform_cmd_cmpl_wait+0x24>)
1000d4da:	681a      	ldr	r2, [r3, #0]
1000d4dc:	2a01      	cmp	r2, #1
1000d4de:	d003      	beq.n	1000d4e8 <platform_cmd_cmpl_wait+0x14>
1000d4e0:	4b06      	ldr	r3, [pc, #24]	; (1000d4fc <platform_cmd_cmpl_wait+0x28>)
1000d4e2:	2000      	movs	r0, #0
1000d4e4:	4798      	blx	r3
1000d4e6:	e7f7      	b.n	1000d4d8 <platform_cmd_cmpl_wait+0x4>
1000d4e8:	6819      	ldr	r1, [r3, #0]
1000d4ea:	2901      	cmp	r1, #1
1000d4ec:	d102      	bne.n	1000d4f4 <platform_cmd_cmpl_wait+0x20>
1000d4ee:	2200      	movs	r2, #0
1000d4f0:	601a      	str	r2, [r3, #0]
1000d4f2:	e000      	b.n	1000d4f6 <platform_cmd_cmpl_wait+0x22>
1000d4f4:	7022      	strb	r2, [r4, #0]
1000d4f6:	bd10      	pop	{r4, pc}
1000d4f8:	10012cc8 	.word	0x10012cc8
1000d4fc:	1000b335 	.word	0x1000b335

1000d500 <start_timer>:
1000d500:	4770      	bx	lr

1000d502 <stop_timer>:
1000d502:	4770      	bx	lr

1000d504 <dbg_le_set_bd_addr_req_handler>:
1000d504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d506:	466b      	mov	r3, sp
1000d508:	1dde      	adds	r6, r3, #7
1000d50a:	2300      	movs	r3, #0
1000d50c:	7033      	strb	r3, [r6, #0]
1000d50e:	230f      	movs	r3, #15
1000d510:	4c13      	ldr	r4, [pc, #76]	; (1000d560 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d512:	2703      	movs	r7, #3
1000d514:	7023      	strb	r3, [r4, #0]
1000d516:	2300      	movs	r3, #0
1000d518:	70e3      	strb	r3, [r4, #3]
1000d51a:	4b12      	ldr	r3, [pc, #72]	; (1000d564 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d51c:	1c01      	adds	r1, r0, #0
1000d51e:	881a      	ldrh	r2, [r3, #0]
1000d520:	881b      	ldrh	r3, [r3, #0]
1000d522:	7122      	strb	r2, [r4, #4]
1000d524:	0a1b      	lsrs	r3, r3, #8
1000d526:	2206      	movs	r2, #6
1000d528:	7163      	strb	r3, [r4, #5]
1000d52a:	480f      	ldr	r0, [pc, #60]	; (1000d568 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d52c:	4b0f      	ldr	r3, [pc, #60]	; (1000d56c <dbg_le_set_bd_addr_req_handler+0x68>)
1000d52e:	7067      	strb	r7, [r4, #1]
1000d530:	70a7      	strb	r7, [r4, #2]
1000d532:	4798      	blx	r3
1000d534:	4d0e      	ldr	r5, [pc, #56]	; (1000d570 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d536:	4b0f      	ldr	r3, [pc, #60]	; (1000d574 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d538:	210e      	movs	r1, #14
1000d53a:	802b      	strh	r3, [r5, #0]
1000d53c:	2306      	movs	r3, #6
1000d53e:	71a3      	strb	r3, [r4, #6]
1000d540:	2300      	movs	r3, #0
1000d542:	1c20      	adds	r0, r4, #0
1000d544:	71e3      	strb	r3, [r4, #7]
1000d546:	4b0c      	ldr	r3, [pc, #48]	; (1000d578 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d548:	80af      	strh	r7, [r5, #4]
1000d54a:	4798      	blx	r3
1000d54c:	1c30      	adds	r0, r6, #0
1000d54e:	4b0b      	ldr	r3, [pc, #44]	; (1000d57c <dbg_le_set_bd_addr_req_handler+0x78>)
1000d550:	4798      	blx	r3
1000d552:	7833      	ldrb	r3, [r6, #0]
1000d554:	20e2      	movs	r0, #226	; 0xe2
1000d556:	2b00      	cmp	r3, #0
1000d558:	d101      	bne.n	1000d55e <dbg_le_set_bd_addr_req_handler+0x5a>
1000d55a:	68ab      	ldr	r3, [r5, #8]
1000d55c:	7818      	ldrb	r0, [r3, #0]
1000d55e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d560:	10013d3c 	.word	0x10013d3c
1000d564:	100139cc 	.word	0x100139cc
1000d568:	10013d44 	.word	0x10013d44
1000d56c:	1000ff37 	.word	0x1000ff37
1000d570:	100139c0 	.word	0x100139c0
1000d574:	00000329 	.word	0x00000329
1000d578:	1000d479 	.word	0x1000d479
1000d57c:	1000d4d5 	.word	0x1000d4d5

1000d580 <gapc_get_dev_info_cfm.constprop.1>:
1000d580:	b538      	push	{r3, r4, r5, lr}
1000d582:	230b      	movs	r3, #11
1000d584:	4c27      	ldr	r4, [pc, #156]	; (1000d624 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d586:	7023      	strb	r3, [r4, #0]
1000d588:	3303      	adds	r3, #3
1000d58a:	7063      	strb	r3, [r4, #1]
1000d58c:	3329      	adds	r3, #41	; 0x29
1000d58e:	70a3      	strb	r3, [r4, #2]
1000d590:	4b25      	ldr	r3, [pc, #148]	; (1000d628 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d592:	70e1      	strb	r1, [r4, #3]
1000d594:	881a      	ldrh	r2, [r3, #0]
1000d596:	881b      	ldrh	r3, [r3, #0]
1000d598:	7122      	strb	r2, [r4, #4]
1000d59a:	0a1b      	lsrs	r3, r3, #8
1000d59c:	7163      	strb	r3, [r4, #5]
1000d59e:	2300      	movs	r3, #0
1000d5a0:	7220      	strb	r0, [r4, #8]
1000d5a2:	7263      	strb	r3, [r4, #9]
1000d5a4:	2801      	cmp	r0, #1
1000d5a6:	d02b      	beq.n	1000d600 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d5a8:	4298      	cmp	r0, r3
1000d5aa:	d01b      	beq.n	1000d5e4 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d5ac:	2802      	cmp	r0, #2
1000d5ae:	d12f      	bne.n	1000d610 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d5b0:	4b1e      	ldr	r3, [pc, #120]	; (1000d62c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d5b2:	2112      	movs	r1, #18
1000d5b4:	1c1a      	adds	r2, r3, #0
1000d5b6:	32ce      	adds	r2, #206	; 0xce
1000d5b8:	8812      	ldrh	r2, [r2, #0]
1000d5ba:	72a2      	strb	r2, [r4, #10]
1000d5bc:	0a12      	lsrs	r2, r2, #8
1000d5be:	72e2      	strb	r2, [r4, #11]
1000d5c0:	1c1a      	adds	r2, r3, #0
1000d5c2:	32d0      	adds	r2, #208	; 0xd0
1000d5c4:	8812      	ldrh	r2, [r2, #0]
1000d5c6:	7322      	strb	r2, [r4, #12]
1000d5c8:	0a12      	lsrs	r2, r2, #8
1000d5ca:	7362      	strb	r2, [r4, #13]
1000d5cc:	1c1a      	adds	r2, r3, #0
1000d5ce:	32d2      	adds	r2, #210	; 0xd2
1000d5d0:	8812      	ldrh	r2, [r2, #0]
1000d5d2:	33d4      	adds	r3, #212	; 0xd4
1000d5d4:	73a2      	strb	r2, [r4, #14]
1000d5d6:	0a12      	lsrs	r2, r2, #8
1000d5d8:	73e2      	strb	r2, [r4, #15]
1000d5da:	881b      	ldrh	r3, [r3, #0]
1000d5dc:	7423      	strb	r3, [r4, #16]
1000d5de:	0a1b      	lsrs	r3, r3, #8
1000d5e0:	7463      	strb	r3, [r4, #17]
1000d5e2:	e016      	b.n	1000d612 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d5e4:	4b11      	ldr	r3, [pc, #68]	; (1000d62c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d5e6:	4912      	ldr	r1, [pc, #72]	; (1000d630 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d5e8:	33aa      	adds	r3, #170	; 0xaa
1000d5ea:	881d      	ldrh	r5, [r3, #0]
1000d5ec:	4811      	ldr	r0, [pc, #68]	; (1000d634 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d5ee:	0a2b      	lsrs	r3, r5, #8
1000d5f0:	72a5      	strb	r5, [r4, #10]
1000d5f2:	72e3      	strb	r3, [r4, #11]
1000d5f4:	1c2a      	adds	r2, r5, #0
1000d5f6:	4b10      	ldr	r3, [pc, #64]	; (1000d638 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d5f8:	350c      	adds	r5, #12
1000d5fa:	4798      	blx	r3
1000d5fc:	b2a9      	uxth	r1, r5
1000d5fe:	e008      	b.n	1000d612 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d600:	4b0a      	ldr	r3, [pc, #40]	; (1000d62c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d602:	210c      	movs	r1, #12
1000d604:	33cc      	adds	r3, #204	; 0xcc
1000d606:	881b      	ldrh	r3, [r3, #0]
1000d608:	72a3      	strb	r3, [r4, #10]
1000d60a:	0a1b      	lsrs	r3, r3, #8
1000d60c:	72e3      	strb	r3, [r4, #11]
1000d60e:	e000      	b.n	1000d612 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d610:	210a      	movs	r1, #10
1000d612:	1c0b      	adds	r3, r1, #0
1000d614:	3b08      	subs	r3, #8
1000d616:	71a3      	strb	r3, [r4, #6]
1000d618:	121b      	asrs	r3, r3, #8
1000d61a:	71e3      	strb	r3, [r4, #7]
1000d61c:	1c20      	adds	r0, r4, #0
1000d61e:	4b07      	ldr	r3, [pc, #28]	; (1000d63c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d620:	4798      	blx	r3
1000d622:	bd38      	pop	{r3, r4, r5, pc}
1000d624:	10013d3c 	.word	0x10013d3c
1000d628:	100139cc 	.word	0x100139cc
1000d62c:	10013a5e 	.word	0x10013a5e
1000d630:	10013b0a 	.word	0x10013b0a
1000d634:	10013d48 	.word	0x10013d48
1000d638:	1000ff37 	.word	0x1000ff37
1000d63c:	1000d479 	.word	0x1000d479

1000d640 <check_ConnData_idx_role>:
1000d640:	4b0c      	ldr	r3, [pc, #48]	; (1000d674 <check_ConnData_idx_role+0x34>)
1000d642:	b570      	push	{r4, r5, r6, lr}
1000d644:	1c04      	adds	r4, r0, #0
1000d646:	2008      	movs	r0, #8
1000d648:	429c      	cmp	r4, r3
1000d64a:	d011      	beq.n	1000d670 <check_ConnData_idx_role+0x30>
1000d64c:	2300      	movs	r3, #0
1000d64e:	2212      	movs	r2, #18
1000d650:	435a      	muls	r2, r3
1000d652:	4d09      	ldr	r5, [pc, #36]	; (1000d678 <check_ConnData_idx_role+0x38>)
1000d654:	b2d8      	uxtb	r0, r3
1000d656:	1956      	adds	r6, r2, r5
1000d658:	8976      	ldrh	r6, [r6, #10]
1000d65a:	42a6      	cmp	r6, r4
1000d65c:	d104      	bne.n	1000d668 <check_ConnData_idx_role+0x28>
1000d65e:	2900      	cmp	r1, #0
1000d660:	d006      	beq.n	1000d670 <check_ConnData_idx_role+0x30>
1000d662:	5d53      	ldrb	r3, [r2, r5]
1000d664:	700b      	strb	r3, [r1, #0]
1000d666:	e003      	b.n	1000d670 <check_ConnData_idx_role+0x30>
1000d668:	3301      	adds	r3, #1
1000d66a:	2b08      	cmp	r3, #8
1000d66c:	d1ef      	bne.n	1000d64e <check_ConnData_idx_role+0xe>
1000d66e:	1c18      	adds	r0, r3, #0
1000d670:	bd70      	pop	{r4, r5, r6, pc}
1000d672:	46c0      	nop			; (mov r8, r8)
1000d674:	0000ffff 	.word	0x0000ffff
1000d678:	100139ce 	.word	0x100139ce

1000d67c <check_ConnData_emptyEntry>:
1000d67c:	2300      	movs	r3, #0
1000d67e:	2212      	movs	r2, #18
1000d680:	435a      	muls	r2, r3
1000d682:	4906      	ldr	r1, [pc, #24]	; (1000d69c <check_ConnData_emptyEntry+0x20>)
1000d684:	b2d8      	uxtb	r0, r3
1000d686:	1852      	adds	r2, r2, r1
1000d688:	8951      	ldrh	r1, [r2, #10]
1000d68a:	4a05      	ldr	r2, [pc, #20]	; (1000d6a0 <check_ConnData_emptyEntry+0x24>)
1000d68c:	4291      	cmp	r1, r2
1000d68e:	d003      	beq.n	1000d698 <check_ConnData_emptyEntry+0x1c>
1000d690:	3301      	adds	r3, #1
1000d692:	2b08      	cmp	r3, #8
1000d694:	d1f3      	bne.n	1000d67e <check_ConnData_emptyEntry+0x2>
1000d696:	1c18      	adds	r0, r3, #0
1000d698:	4770      	bx	lr
1000d69a:	46c0      	nop			; (mov r8, r8)
1000d69c:	100139ce 	.word	0x100139ce
1000d6a0:	0000ffff 	.word	0x0000ffff

1000d6a4 <gapc_cmp_evt>:
1000d6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d6a6:	780b      	ldrb	r3, [r1, #0]
1000d6a8:	1c05      	adds	r5, r0, #0
1000d6aa:	1e58      	subs	r0, r3, #1
1000d6ac:	784e      	ldrb	r6, [r1, #1]
1000d6ae:	280f      	cmp	r0, #15
1000d6b0:	d85a      	bhi.n	1000d768 <gapc_cmp_evt+0xc4>
1000d6b2:	1c14      	adds	r4, r2, #0
1000d6b4:	f001 fac6 	bl	1000ec44 <__gnu_thumb1_case_uqi>
1000d6b8:	5858440a 	.word	0x5858440a
1000d6bc:	4b584444 	.word	0x4b584444
1000d6c0:	0825122d 	.word	0x0825122d
1000d6c4:	3e395858 	.word	0x3e395858
1000d6c8:	203b      	movs	r0, #59	; 0x3b
1000d6ca:	e04e      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d6cc:	203b      	movs	r0, #59	; 0x3b
1000d6ce:	2e00      	cmp	r6, #0
1000d6d0:	d04b      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d6d2:	0a2d      	lsrs	r5, r5, #8
1000d6d4:	8015      	strh	r5, [r2, #0]
1000d6d6:	7096      	strb	r6, [r2, #2]
1000d6d8:	3835      	subs	r0, #53	; 0x35
1000d6da:	e046      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d6dc:	466b      	mov	r3, sp
1000d6de:	1ddf      	adds	r7, r3, #7
1000d6e0:	2301      	movs	r3, #1
1000d6e2:	0a2d      	lsrs	r5, r5, #8
1000d6e4:	703b      	strb	r3, [r7, #0]
1000d6e6:	1c28      	adds	r0, r5, #0
1000d6e8:	1c39      	adds	r1, r7, #0
1000d6ea:	4b20      	ldr	r3, [pc, #128]	; (1000d76c <gapc_cmp_evt+0xc8>)
1000d6ec:	4798      	blx	r3
1000d6ee:	2807      	cmp	r0, #7
1000d6f0:	d803      	bhi.n	1000d6fa <gapc_cmp_evt+0x56>
1000d6f2:	783b      	ldrb	r3, [r7, #0]
1000d6f4:	203b      	movs	r0, #59	; 0x3b
1000d6f6:	2b00      	cmp	r3, #0
1000d6f8:	d037      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d6fa:	8065      	strh	r5, [r4, #2]
1000d6fc:	7126      	strb	r6, [r4, #4]
1000d6fe:	2009      	movs	r0, #9
1000d700:	e033      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d702:	203b      	movs	r0, #59	; 0x3b
1000d704:	2e00      	cmp	r6, #0
1000d706:	d030      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d708:	0a2d      	lsrs	r5, r5, #8
1000d70a:	8015      	strh	r5, [r2, #0]
1000d70c:	7096      	strb	r6, [r2, #2]
1000d70e:	382d      	subs	r0, #45	; 0x2d
1000d710:	e02b      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d712:	203b      	movs	r0, #59	; 0x3b
1000d714:	2e00      	cmp	r6, #0
1000d716:	d028      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d718:	2300      	movs	r3, #0
1000d71a:	0a2d      	lsrs	r5, r5, #8
1000d71c:	8015      	strh	r5, [r2, #0]
1000d71e:	7096      	strb	r6, [r2, #2]
1000d720:	8093      	strh	r3, [r2, #4]
1000d722:	80d3      	strh	r3, [r2, #6]
1000d724:	8113      	strh	r3, [r2, #8]
1000d726:	3834      	subs	r0, #52	; 0x34
1000d728:	e01f      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d72a:	203b      	movs	r0, #59	; 0x3b
1000d72c:	2e00      	cmp	r6, #0
1000d72e:	d01c      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d730:	7216      	strb	r6, [r2, #8]
1000d732:	e003      	b.n	1000d73c <gapc_cmp_evt+0x98>
1000d734:	203b      	movs	r0, #59	; 0x3b
1000d736:	2e00      	cmp	r6, #0
1000d738:	d017      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d73a:	7116      	strb	r6, [r2, #4]
1000d73c:	3812      	subs	r0, #18
1000d73e:	e014      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d740:	203b      	movs	r0, #59	; 0x3b
1000d742:	2e00      	cmp	r6, #0
1000d744:	d011      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d746:	7093      	strb	r3, [r2, #2]
1000d748:	70d6      	strb	r6, [r2, #3]
1000d74a:	382a      	subs	r0, #42	; 0x2a
1000d74c:	e00d      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d74e:	203b      	movs	r0, #59	; 0x3b
1000d750:	2e00      	cmp	r6, #0
1000d752:	d00a      	beq.n	1000d76a <gapc_cmp_evt+0xc6>
1000d754:	0a2d      	lsrs	r5, r5, #8
1000d756:	7016      	strb	r6, [r2, #0]
1000d758:	8055      	strh	r5, [r2, #2]
1000d75a:	1d10      	adds	r0, r2, #4
1000d75c:	2100      	movs	r1, #0
1000d75e:	2205      	movs	r2, #5
1000d760:	4b03      	ldr	r3, [pc, #12]	; (1000d770 <gapc_cmp_evt+0xcc>)
1000d762:	4798      	blx	r3
1000d764:	2012      	movs	r0, #18
1000d766:	e000      	b.n	1000d76a <gapc_cmp_evt+0xc6>
1000d768:	2000      	movs	r0, #0
1000d76a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d76c:	1000d641 	.word	0x1000d641
1000d770:	1000ff49 	.word	0x1000ff49

1000d774 <gapc_connection_cfm_handler>:
1000d774:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d776:	b085      	sub	sp, #20
1000d778:	1c1d      	adds	r5, r3, #0
1000d77a:	ab0a      	add	r3, sp, #40	; 0x28
1000d77c:	781b      	ldrb	r3, [r3, #0]
1000d77e:	9201      	str	r2, [sp, #4]
1000d780:	9302      	str	r3, [sp, #8]
1000d782:	ab0b      	add	r3, sp, #44	; 0x2c
1000d784:	781b      	ldrb	r3, [r3, #0]
1000d786:	1c07      	adds	r7, r0, #0
1000d788:	9303      	str	r3, [sp, #12]
1000d78a:	ab0c      	add	r3, sp, #48	; 0x30
1000d78c:	881a      	ldrh	r2, [r3, #0]
1000d78e:	2302      	movs	r3, #2
1000d790:	1c0e      	adds	r6, r1, #0
1000d792:	4c23      	ldr	r4, [pc, #140]	; (1000d820 <gapc_connection_cfm_handler+0xac>)
1000d794:	1c39      	adds	r1, r7, #0
1000d796:	7023      	strb	r3, [r4, #0]
1000d798:	330c      	adds	r3, #12
1000d79a:	7063      	strb	r3, [r4, #1]
1000d79c:	70a3      	strb	r3, [r4, #2]
1000d79e:	4b21      	ldr	r3, [pc, #132]	; (1000d824 <gapc_connection_cfm_handler+0xb0>)
1000d7a0:	70e2      	strb	r2, [r4, #3]
1000d7a2:	881a      	ldrh	r2, [r3, #0]
1000d7a4:	881b      	ldrh	r3, [r3, #0]
1000d7a6:	7122      	strb	r2, [r4, #4]
1000d7a8:	0a1b      	lsrs	r3, r3, #8
1000d7aa:	4f1f      	ldr	r7, [pc, #124]	; (1000d828 <gapc_connection_cfm_handler+0xb4>)
1000d7ac:	2210      	movs	r2, #16
1000d7ae:	481f      	ldr	r0, [pc, #124]	; (1000d82c <gapc_connection_cfm_handler+0xb8>)
1000d7b0:	7163      	strb	r3, [r4, #5]
1000d7b2:	47b8      	blx	r7
1000d7b4:	0a33      	lsrs	r3, r6, #8
1000d7b6:	7626      	strb	r6, [r4, #24]
1000d7b8:	7663      	strb	r3, [r4, #25]
1000d7ba:	9901      	ldr	r1, [sp, #4]
1000d7bc:	0c33      	lsrs	r3, r6, #16
1000d7be:	2210      	movs	r2, #16
1000d7c0:	0e36      	lsrs	r6, r6, #24
1000d7c2:	481b      	ldr	r0, [pc, #108]	; (1000d830 <gapc_connection_cfm_handler+0xbc>)
1000d7c4:	76a3      	strb	r3, [r4, #26]
1000d7c6:	76e6      	strb	r6, [r4, #27]
1000d7c8:	47b8      	blx	r7
1000d7ca:	1c23      	adds	r3, r4, #0
1000d7cc:	332c      	adds	r3, #44	; 0x2c
1000d7ce:	701d      	strb	r5, [r3, #0]
1000d7d0:	1c23      	adds	r3, r4, #0
1000d7d2:	0a2a      	lsrs	r2, r5, #8
1000d7d4:	332d      	adds	r3, #45	; 0x2d
1000d7d6:	701a      	strb	r2, [r3, #0]
1000d7d8:	1c23      	adds	r3, r4, #0
1000d7da:	0c2a      	lsrs	r2, r5, #16
1000d7dc:	332e      	adds	r3, #46	; 0x2e
1000d7de:	701a      	strb	r2, [r3, #0]
1000d7e0:	1c23      	adds	r3, r4, #0
1000d7e2:	0e2d      	lsrs	r5, r5, #24
1000d7e4:	332f      	adds	r3, #47	; 0x2f
1000d7e6:	466a      	mov	r2, sp
1000d7e8:	701d      	strb	r5, [r3, #0]
1000d7ea:	1c23      	adds	r3, r4, #0
1000d7ec:	7a12      	ldrb	r2, [r2, #8]
1000d7ee:	3330      	adds	r3, #48	; 0x30
1000d7f0:	701a      	strb	r2, [r3, #0]
1000d7f2:	1c23      	adds	r3, r4, #0
1000d7f4:	2500      	movs	r5, #0
1000d7f6:	3331      	adds	r3, #49	; 0x31
1000d7f8:	466a      	mov	r2, sp
1000d7fa:	701d      	strb	r5, [r3, #0]
1000d7fc:	1c23      	adds	r3, r4, #0
1000d7fe:	7b12      	ldrb	r2, [r2, #12]
1000d800:	3332      	adds	r3, #50	; 0x32
1000d802:	701a      	strb	r2, [r3, #0]
1000d804:	1c23      	adds	r3, r4, #0
1000d806:	3333      	adds	r3, #51	; 0x33
1000d808:	701d      	strb	r5, [r3, #0]
1000d80a:	232c      	movs	r3, #44	; 0x2c
1000d80c:	1c20      	adds	r0, r4, #0
1000d80e:	71a3      	strb	r3, [r4, #6]
1000d810:	2134      	movs	r1, #52	; 0x34
1000d812:	4b08      	ldr	r3, [pc, #32]	; (1000d834 <gapc_connection_cfm_handler+0xc0>)
1000d814:	71e5      	strb	r5, [r4, #7]
1000d816:	4798      	blx	r3
1000d818:	1c28      	adds	r0, r5, #0
1000d81a:	b005      	add	sp, #20
1000d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d81e:	46c0      	nop			; (mov r8, r8)
1000d820:	10013d3c 	.word	0x10013d3c
1000d824:	100139cc 	.word	0x100139cc
1000d828:	1000ff37 	.word	0x1000ff37
1000d82c:	10013d44 	.word	0x10013d44
1000d830:	10013d58 	.word	0x10013d58
1000d834:	1000d479 	.word	0x1000d479

1000d838 <gapc_con_req_ind>:
1000d838:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d83a:	7845      	ldrb	r5, [r0, #1]
1000d83c:	7803      	ldrb	r3, [r0, #0]
1000d83e:	4c30      	ldr	r4, [pc, #192]	; (1000d900 <gapc_con_req_ind+0xc8>)
1000d840:	022d      	lsls	r5, r5, #8
1000d842:	431d      	orrs	r5, r3
1000d844:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d846:	78c3      	ldrb	r3, [r0, #3]
1000d848:	7882      	ldrb	r2, [r0, #2]
1000d84a:	b08b      	sub	sp, #44	; 0x2c
1000d84c:	021b      	lsls	r3, r3, #8
1000d84e:	431a      	orrs	r2, r3
1000d850:	466b      	mov	r3, sp
1000d852:	9205      	str	r2, [sp, #20]
1000d854:	8a9b      	ldrh	r3, [r3, #20]
1000d856:	2120      	movs	r1, #32
1000d858:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d85a:	7943      	ldrb	r3, [r0, #5]
1000d85c:	7902      	ldrb	r2, [r0, #4]
1000d85e:	021b      	lsls	r3, r3, #8
1000d860:	431a      	orrs	r2, r3
1000d862:	466b      	mov	r3, sp
1000d864:	9206      	str	r2, [sp, #24]
1000d866:	8b1b      	ldrh	r3, [r3, #24]
1000d868:	1c06      	adds	r6, r0, #0
1000d86a:	8623      	strh	r3, [r4, #48]	; 0x30
1000d86c:	79c3      	ldrb	r3, [r0, #7]
1000d86e:	7982      	ldrb	r2, [r0, #6]
1000d870:	021b      	lsls	r3, r3, #8
1000d872:	431a      	orrs	r2, r3
1000d874:	466b      	mov	r3, sp
1000d876:	9207      	str	r2, [sp, #28]
1000d878:	466a      	mov	r2, sp
1000d87a:	8b9b      	ldrh	r3, [r3, #28]
1000d87c:	1852      	adds	r2, r2, r1
1000d87e:	8663      	strh	r3, [r4, #50]	; 0x32
1000d880:	7a43      	ldrb	r3, [r0, #9]
1000d882:	1c01      	adds	r1, r0, #0
1000d884:	9308      	str	r3, [sp, #32]
1000d886:	1c23      	adds	r3, r4, #0
1000d888:	7812      	ldrb	r2, [r2, #0]
1000d88a:	3377      	adds	r3, #119	; 0x77
1000d88c:	3478      	adds	r4, #120	; 0x78
1000d88e:	701a      	strb	r2, [r3, #0]
1000d890:	310a      	adds	r1, #10
1000d892:	2206      	movs	r2, #6
1000d894:	4b1b      	ldr	r3, [pc, #108]	; (1000d904 <gapc_con_req_ind+0xcc>)
1000d896:	1c20      	adds	r0, r4, #0
1000d898:	4798      	blx	r3
1000d89a:	7c33      	ldrb	r3, [r6, #16]
1000d89c:	9309      	str	r3, [sp, #36]	; 0x24
1000d89e:	4b1a      	ldr	r3, [pc, #104]	; (1000d908 <gapc_con_req_ind+0xd0>)
1000d8a0:	4798      	blx	r3
1000d8a2:	4e1a      	ldr	r6, [pc, #104]	; (1000d90c <gapc_con_req_ind+0xd4>)
1000d8a4:	1e07      	subs	r7, r0, #0
1000d8a6:	2f07      	cmp	r7, #7
1000d8a8:	d81b      	bhi.n	1000d8e2 <gapc_con_req_ind+0xaa>
1000d8aa:	2312      	movs	r3, #18
1000d8ac:	4343      	muls	r3, r0
1000d8ae:	18f0      	adds	r0, r6, r3
1000d8b0:	8145      	strh	r5, [r0, #10]
1000d8b2:	4669      	mov	r1, sp
1000d8b4:	2524      	movs	r5, #36	; 0x24
1000d8b6:	1949      	adds	r1, r1, r5
1000d8b8:	7809      	ldrb	r1, [r1, #0]
1000d8ba:	2206      	movs	r2, #6
1000d8bc:	54f1      	strb	r1, [r6, r3]
1000d8be:	2120      	movs	r1, #32
1000d8c0:	466b      	mov	r3, sp
1000d8c2:	185b      	adds	r3, r3, r1
1000d8c4:	781b      	ldrb	r3, [r3, #0]
1000d8c6:	1c21      	adds	r1, r4, #0
1000d8c8:	7043      	strb	r3, [r0, #1]
1000d8ca:	466b      	mov	r3, sp
1000d8cc:	8a9b      	ldrh	r3, [r3, #20]
1000d8ce:	3002      	adds	r0, #2
1000d8d0:	8143      	strh	r3, [r0, #10]
1000d8d2:	466b      	mov	r3, sp
1000d8d4:	8b1b      	ldrh	r3, [r3, #24]
1000d8d6:	8183      	strh	r3, [r0, #12]
1000d8d8:	466b      	mov	r3, sp
1000d8da:	8b9b      	ldrh	r3, [r3, #28]
1000d8dc:	81c3      	strh	r3, [r0, #14]
1000d8de:	4b09      	ldr	r3, [pc, #36]	; (1000d904 <gapc_con_req_ind+0xcc>)
1000d8e0:	4798      	blx	r3
1000d8e2:	2112      	movs	r1, #18
1000d8e4:	2300      	movs	r3, #0
1000d8e6:	434f      	muls	r7, r1
1000d8e8:	9300      	str	r3, [sp, #0]
1000d8ea:	9301      	str	r3, [sp, #4]
1000d8ec:	19f6      	adds	r6, r6, r7
1000d8ee:	8971      	ldrh	r1, [r6, #10]
1000d8f0:	4a07      	ldr	r2, [pc, #28]	; (1000d910 <gapc_con_req_ind+0xd8>)
1000d8f2:	9102      	str	r1, [sp, #8]
1000d8f4:	1c10      	adds	r0, r2, #0
1000d8f6:	1c19      	adds	r1, r3, #0
1000d8f8:	4c06      	ldr	r4, [pc, #24]	; (1000d914 <gapc_con_req_ind+0xdc>)
1000d8fa:	47a0      	blx	r4
1000d8fc:	b00b      	add	sp, #44	; 0x2c
1000d8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d900:	10013a5e 	.word	0x10013a5e
1000d904:	1000ff37 	.word	0x1000ff37
1000d908:	1000d67d 	.word	0x1000d67d
1000d90c:	100139ce 	.word	0x100139ce
1000d910:	10012d32 	.word	0x10012d32
1000d914:	1000d775 	.word	0x1000d775

1000d918 <gapc_disconnect_cmd_handler>:
1000d918:	2204      	movs	r2, #4
1000d91a:	b510      	push	{r4, lr}
1000d91c:	4b0c      	ldr	r3, [pc, #48]	; (1000d950 <gapc_disconnect_cmd_handler+0x38>)
1000d91e:	2400      	movs	r4, #0
1000d920:	701a      	strb	r2, [r3, #0]
1000d922:	320a      	adds	r2, #10
1000d924:	705a      	strb	r2, [r3, #1]
1000d926:	709a      	strb	r2, [r3, #2]
1000d928:	4a0a      	ldr	r2, [pc, #40]	; (1000d954 <gapc_disconnect_cmd_handler+0x3c>)
1000d92a:	70d9      	strb	r1, [r3, #3]
1000d92c:	8811      	ldrh	r1, [r2, #0]
1000d92e:	8812      	ldrh	r2, [r2, #0]
1000d930:	7119      	strb	r1, [r3, #4]
1000d932:	0a12      	lsrs	r2, r2, #8
1000d934:	715a      	strb	r2, [r3, #5]
1000d936:	2201      	movs	r2, #1
1000d938:	721a      	strb	r2, [r3, #8]
1000d93a:	1892      	adds	r2, r2, r2
1000d93c:	7258      	strb	r0, [r3, #9]
1000d93e:	719a      	strb	r2, [r3, #6]
1000d940:	71dc      	strb	r4, [r3, #7]
1000d942:	1c18      	adds	r0, r3, #0
1000d944:	210a      	movs	r1, #10
1000d946:	4b04      	ldr	r3, [pc, #16]	; (1000d958 <gapc_disconnect_cmd_handler+0x40>)
1000d948:	4798      	blx	r3
1000d94a:	1c20      	adds	r0, r4, #0
1000d94c:	bd10      	pop	{r4, pc}
1000d94e:	46c0      	nop			; (mov r8, r8)
1000d950:	10013d3c 	.word	0x10013d3c
1000d954:	100139cc 	.word	0x100139cc
1000d958:	1000d479 	.word	0x1000d479

1000d95c <gapc_disconnect_ind>:
1000d95c:	1c02      	adds	r2, r0, #0
1000d95e:	b508      	push	{r3, lr}
1000d960:	7843      	ldrb	r3, [r0, #1]
1000d962:	7800      	ldrb	r0, [r0, #0]
1000d964:	021b      	lsls	r3, r3, #8
1000d966:	4318      	orrs	r0, r3
1000d968:	8008      	strh	r0, [r1, #0]
1000d96a:	7893      	ldrb	r3, [r2, #2]
1000d96c:	708b      	strb	r3, [r1, #2]
1000d96e:	2100      	movs	r1, #0
1000d970:	4b05      	ldr	r3, [pc, #20]	; (1000d988 <gapc_disconnect_ind+0x2c>)
1000d972:	4798      	blx	r3
1000d974:	2807      	cmp	r0, #7
1000d976:	d806      	bhi.n	1000d986 <gapc_disconnect_ind+0x2a>
1000d978:	2312      	movs	r3, #18
1000d97a:	4358      	muls	r0, r3
1000d97c:	4b03      	ldr	r3, [pc, #12]	; (1000d98c <gapc_disconnect_ind+0x30>)
1000d97e:	1818      	adds	r0, r3, r0
1000d980:	2301      	movs	r3, #1
1000d982:	425b      	negs	r3, r3
1000d984:	8143      	strh	r3, [r0, #10]
1000d986:	bd08      	pop	{r3, pc}
1000d988:	1000d641 	.word	0x1000d641
1000d98c:	100139ce 	.word	0x100139ce

1000d990 <gapc_bond_cmd_handler>:
1000d990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d992:	9300      	str	r3, [sp, #0]
1000d994:	2312      	movs	r3, #18
1000d996:	1c04      	adds	r4, r0, #0
1000d998:	a808      	add	r0, sp, #32
1000d99a:	7807      	ldrb	r7, [r0, #0]
1000d99c:	a809      	add	r0, sp, #36	; 0x24
1000d99e:	7806      	ldrb	r6, [r0, #0]
1000d9a0:	a80a      	add	r0, sp, #40	; 0x28
1000d9a2:	7805      	ldrb	r5, [r0, #0]
1000d9a4:	a80b      	add	r0, sp, #44	; 0x2c
1000d9a6:	7800      	ldrb	r0, [r0, #0]
1000d9a8:	9001      	str	r0, [sp, #4]
1000d9aa:	4810      	ldr	r0, [pc, #64]	; (1000d9ec <gapc_bond_cmd_handler+0x5c>)
1000d9ac:	7003      	strb	r3, [r0, #0]
1000d9ae:	230e      	movs	r3, #14
1000d9b0:	70c4      	strb	r4, [r0, #3]
1000d9b2:	4c0f      	ldr	r4, [pc, #60]	; (1000d9f0 <gapc_bond_cmd_handler+0x60>)
1000d9b4:	7043      	strb	r3, [r0, #1]
1000d9b6:	7083      	strb	r3, [r0, #2]
1000d9b8:	8823      	ldrh	r3, [r4, #0]
1000d9ba:	8824      	ldrh	r4, [r4, #0]
1000d9bc:	7103      	strb	r3, [r0, #4]
1000d9be:	466b      	mov	r3, sp
1000d9c0:	781b      	ldrb	r3, [r3, #0]
1000d9c2:	0a24      	lsrs	r4, r4, #8
1000d9c4:	72c3      	strb	r3, [r0, #11]
1000d9c6:	466b      	mov	r3, sp
1000d9c8:	791b      	ldrb	r3, [r3, #4]
1000d9ca:	7144      	strb	r4, [r0, #5]
1000d9cc:	73c3      	strb	r3, [r0, #15]
1000d9ce:	2308      	movs	r3, #8
1000d9d0:	7183      	strb	r3, [r0, #6]
1000d9d2:	2300      	movs	r3, #0
1000d9d4:	240a      	movs	r4, #10
1000d9d6:	7241      	strb	r1, [r0, #9]
1000d9d8:	71c3      	strb	r3, [r0, #7]
1000d9da:	2110      	movs	r1, #16
1000d9dc:	4b05      	ldr	r3, [pc, #20]	; (1000d9f4 <gapc_bond_cmd_handler+0x64>)
1000d9de:	7307      	strb	r7, [r0, #12]
1000d9e0:	7346      	strb	r6, [r0, #13]
1000d9e2:	7385      	strb	r5, [r0, #14]
1000d9e4:	7204      	strb	r4, [r0, #8]
1000d9e6:	7282      	strb	r2, [r0, #10]
1000d9e8:	4798      	blx	r3
1000d9ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d9ec:	10013d3c 	.word	0x10013d3c
1000d9f0:	100139cc 	.word	0x100139cc
1000d9f4:	1000d479 	.word	0x1000d479

1000d9f8 <gapc_bond_ind>:
1000d9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d9fa:	780e      	ldrb	r6, [r1, #0]
1000d9fc:	1c03      	adds	r3, r0, #0
1000d9fe:	1eb0      	subs	r0, r6, #2
1000da00:	2805      	cmp	r0, #5
1000da02:	d85d      	bhi.n	1000dac0 <gapc_bond_ind+0xc8>
1000da04:	1c15      	adds	r5, r2, #0
1000da06:	1c0c      	adds	r4, r1, #0
1000da08:	f001 f91c 	bl	1000ec44 <__gnu_thumb1_case_uqi>
1000da0c:	2f5a030d 	.word	0x2f5a030d
1000da10:	4740      	.short	0x4740
1000da12:	2009      	movs	r0, #9
1000da14:	2a00      	cmp	r2, #0
1000da16:	d054      	beq.n	1000dac2 <gapc_bond_ind+0xca>
1000da18:	0a1b      	lsrs	r3, r3, #8
1000da1a:	8053      	strh	r3, [r2, #2]
1000da1c:	788b      	ldrb	r3, [r1, #2]
1000da1e:	4829      	ldr	r0, [pc, #164]	; (1000dac4 <gapc_bond_ind+0xcc>)
1000da20:	7113      	strb	r3, [r2, #4]
1000da22:	2100      	movs	r1, #0
1000da24:	e01c      	b.n	1000da60 <gapc_bond_ind+0x68>
1000da26:	2009      	movs	r0, #9
1000da28:	2a00      	cmp	r2, #0
1000da2a:	d04a      	beq.n	1000dac2 <gapc_bond_ind+0xca>
1000da2c:	4c25      	ldr	r4, [pc, #148]	; (1000dac4 <gapc_bond_ind+0xcc>)
1000da2e:	0a1b      	lsrs	r3, r3, #8
1000da30:	8053      	strh	r3, [r2, #2]
1000da32:	788b      	ldrb	r3, [r1, #2]
1000da34:	2700      	movs	r7, #0
1000da36:	1c10      	adds	r0, r2, #0
1000da38:	1c21      	adds	r1, r4, #0
1000da3a:	7013      	strb	r3, [r2, #0]
1000da3c:	4e22      	ldr	r6, [pc, #136]	; (1000dac8 <gapc_bond_ind+0xd0>)
1000da3e:	7117      	strb	r7, [r2, #4]
1000da40:	312e      	adds	r1, #46	; 0x2e
1000da42:	2217      	movs	r2, #23
1000da44:	3032      	adds	r0, #50	; 0x32
1000da46:	47b0      	blx	r6
1000da48:	1c28      	adds	r0, r5, #0
1000da4a:	1c21      	adds	r1, r4, #0
1000da4c:	2210      	movs	r2, #16
1000da4e:	311e      	adds	r1, #30
1000da50:	3022      	adds	r0, #34	; 0x22
1000da52:	47b0      	blx	r6
1000da54:	1ca1      	adds	r1, r4, #2
1000da56:	1da8      	adds	r0, r5, #6
1000da58:	221c      	movs	r2, #28
1000da5a:	47b0      	blx	r6
1000da5c:	1c20      	adds	r0, r4, #0
1000da5e:	1c39      	adds	r1, r7, #0
1000da60:	2246      	movs	r2, #70	; 0x46
1000da62:	4b1a      	ldr	r3, [pc, #104]	; (1000dacc <gapc_bond_ind+0xd4>)
1000da64:	4798      	blx	r3
1000da66:	2009      	movs	r0, #9
1000da68:	e02b      	b.n	1000dac2 <gapc_bond_ind+0xca>
1000da6a:	4d16      	ldr	r5, [pc, #88]	; (1000dac4 <gapc_bond_ind+0xcc>)
1000da6c:	3102      	adds	r1, #2
1000da6e:	1c28      	adds	r0, r5, #0
1000da70:	2210      	movs	r2, #16
1000da72:	4e15      	ldr	r6, [pc, #84]	; (1000dac8 <gapc_bond_ind+0xd0>)
1000da74:	302e      	adds	r0, #46	; 0x2e
1000da76:	47b0      	blx	r6
1000da78:	1c28      	adds	r0, r5, #0
1000da7a:	1c21      	adds	r1, r4, #0
1000da7c:	303f      	adds	r0, #63	; 0x3f
1000da7e:	3112      	adds	r1, #18
1000da80:	2206      	movs	r2, #6
1000da82:	47b0      	blx	r6
1000da84:	7e23      	ldrb	r3, [r4, #24]
1000da86:	353e      	adds	r5, #62	; 0x3e
1000da88:	702b      	strb	r3, [r5, #0]
1000da8a:	e019      	b.n	1000dac0 <gapc_bond_ind+0xc8>
1000da8c:	480d      	ldr	r0, [pc, #52]	; (1000dac4 <gapc_bond_ind+0xcc>)
1000da8e:	3102      	adds	r1, #2
1000da90:	2210      	movs	r2, #16
1000da92:	4b0d      	ldr	r3, [pc, #52]	; (1000dac8 <gapc_bond_ind+0xd0>)
1000da94:	301e      	adds	r0, #30
1000da96:	4798      	blx	r3
1000da98:	e012      	b.n	1000dac0 <gapc_bond_ind+0xc8>
1000da9a:	4d0a      	ldr	r5, [pc, #40]	; (1000dac4 <gapc_bond_ind+0xcc>)
1000da9c:	3102      	adds	r1, #2
1000da9e:	2210      	movs	r2, #16
1000daa0:	4e09      	ldr	r6, [pc, #36]	; (1000dac8 <gapc_bond_ind+0xd0>)
1000daa2:	1ca8      	adds	r0, r5, #2
1000daa4:	47b0      	blx	r6
1000daa6:	1c28      	adds	r0, r5, #0
1000daa8:	1c21      	adds	r1, r4, #0
1000daaa:	7ce3      	ldrb	r3, [r4, #19]
1000daac:	7ca2      	ldrb	r2, [r4, #18]
1000daae:	021b      	lsls	r3, r3, #8
1000dab0:	4313      	orrs	r3, r2
1000dab2:	3014      	adds	r0, #20
1000dab4:	3114      	adds	r1, #20
1000dab6:	2208      	movs	r2, #8
1000dab8:	826b      	strh	r3, [r5, #18]
1000daba:	47b0      	blx	r6
1000dabc:	7f23      	ldrb	r3, [r4, #28]
1000dabe:	772b      	strb	r3, [r5, #28]
1000dac0:	2000      	movs	r0, #0
1000dac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dac4:	10012cec 	.word	0x10012cec
1000dac8:	1000ff37 	.word	0x1000ff37
1000dacc:	1000ff49 	.word	0x1000ff49

1000dad0 <gapc_bond_req_ind>:
1000dad0:	b570      	push	{r4, r5, r6, lr}
1000dad2:	780c      	ldrb	r4, [r1, #0]
1000dad4:	1c03      	adds	r3, r0, #0
1000dad6:	7849      	ldrb	r1, [r1, #1]
1000dad8:	2c07      	cmp	r4, #7
1000dada:	d85c      	bhi.n	1000db96 <gapc_bond_req_ind+0xc6>
1000dadc:	1c20      	adds	r0, r4, #0
1000dade:	f001 f8b1 	bl	1000ec44 <__gnu_thumb1_case_uqi>
1000dae2:	5a04      	.short	0x5a04
1000dae4:	5a0b5a5a 	.word	0x5a0b5a5a
1000dae8:	1f1f      	.short	0x1f1f
1000daea:	200a      	movs	r0, #10
1000daec:	2a00      	cmp	r2, #0
1000daee:	d053      	beq.n	1000db98 <gapc_bond_req_ind+0xc8>
1000daf0:	0a1b      	lsrs	r3, r3, #8
1000daf2:	8013      	strh	r3, [r2, #0]
1000daf4:	7091      	strb	r1, [r2, #2]
1000daf6:	e04f      	b.n	1000db98 <gapc_bond_req_ind+0xc8>
1000daf8:	2a00      	cmp	r2, #0
1000dafa:	d00b      	beq.n	1000db14 <gapc_bond_req_ind+0x44>
1000dafc:	0a1b      	lsrs	r3, r3, #8
1000dafe:	8013      	strh	r3, [r2, #0]
1000db00:	2900      	cmp	r1, #0
1000db02:	d102      	bne.n	1000db0a <gapc_bond_req_ind+0x3a>
1000db04:	2301      	movs	r3, #1
1000db06:	7093      	strb	r3, [r2, #2]
1000db08:	e004      	b.n	1000db14 <gapc_bond_req_ind+0x44>
1000db0a:	2300      	movs	r3, #0
1000db0c:	7093      	strb	r3, [r2, #2]
1000db0e:	2902      	cmp	r1, #2
1000db10:	d102      	bne.n	1000db18 <gapc_bond_req_ind+0x48>
1000db12:	70d3      	strb	r3, [r2, #3]
1000db14:	200c      	movs	r0, #12
1000db16:	e03f      	b.n	1000db98 <gapc_bond_req_ind+0xc8>
1000db18:	2901      	cmp	r1, #1
1000db1a:	d1fb      	bne.n	1000db14 <gapc_bond_req_ind+0x44>
1000db1c:	70d1      	strb	r1, [r2, #3]
1000db1e:	e7f9      	b.n	1000db14 <gapc_bond_req_ind+0x44>
1000db20:	2214      	movs	r2, #20
1000db22:	481e      	ldr	r0, [pc, #120]	; (1000db9c <gapc_bond_req_ind+0xcc>)
1000db24:	0a1b      	lsrs	r3, r3, #8
1000db26:	70c3      	strb	r3, [r0, #3]
1000db28:	4b1d      	ldr	r3, [pc, #116]	; (1000dba0 <gapc_bond_req_ind+0xd0>)
1000db2a:	7002      	strb	r2, [r0, #0]
1000db2c:	3a06      	subs	r2, #6
1000db2e:	7042      	strb	r2, [r0, #1]
1000db30:	7082      	strb	r2, [r0, #2]
1000db32:	881a      	ldrh	r2, [r3, #0]
1000db34:	881b      	ldrh	r3, [r3, #0]
1000db36:	4e1b      	ldr	r6, [pc, #108]	; (1000dba4 <gapc_bond_req_ind+0xd4>)
1000db38:	0a1b      	lsrs	r3, r3, #8
1000db3a:	7143      	strb	r3, [r0, #5]
1000db3c:	2301      	movs	r3, #1
1000db3e:	7102      	strb	r2, [r0, #4]
1000db40:	7204      	strb	r4, [r0, #8]
1000db42:	7243      	strb	r3, [r0, #9]
1000db44:	1c05      	adds	r5, r0, #0
1000db46:	1c31      	adds	r1, r6, #0
1000db48:	300a      	adds	r0, #10
1000db4a:	2c07      	cmp	r4, #7
1000db4c:	d116      	bne.n	1000db7c <gapc_bond_req_ind+0xac>
1000db4e:	317e      	adds	r1, #126	; 0x7e
1000db50:	2210      	movs	r2, #16
1000db52:	4c15      	ldr	r4, [pc, #84]	; (1000dba8 <gapc_bond_req_ind+0xd8>)
1000db54:	47a0      	blx	r4
1000db56:	1c33      	adds	r3, r6, #0
1000db58:	1c31      	adds	r1, r6, #0
1000db5a:	1c28      	adds	r0, r5, #0
1000db5c:	338e      	adds	r3, #142	; 0x8e
1000db5e:	881b      	ldrh	r3, [r3, #0]
1000db60:	3190      	adds	r1, #144	; 0x90
1000db62:	76ab      	strb	r3, [r5, #26]
1000db64:	2208      	movs	r2, #8
1000db66:	0a1b      	lsrs	r3, r3, #8
1000db68:	301c      	adds	r0, #28
1000db6a:	76eb      	strb	r3, [r5, #27]
1000db6c:	47a0      	blx	r4
1000db6e:	1c31      	adds	r1, r6, #0
1000db70:	3198      	adds	r1, #152	; 0x98
1000db72:	780a      	ldrb	r2, [r1, #0]
1000db74:	1d6b      	adds	r3, r5, #5
1000db76:	77da      	strb	r2, [r3, #31]
1000db78:	2125      	movs	r1, #37	; 0x25
1000db7a:	e004      	b.n	1000db86 <gapc_bond_req_ind+0xb6>
1000db7c:	319a      	adds	r1, #154	; 0x9a
1000db7e:	2210      	movs	r2, #16
1000db80:	4b09      	ldr	r3, [pc, #36]	; (1000dba8 <gapc_bond_req_ind+0xd8>)
1000db82:	4798      	blx	r3
1000db84:	211a      	movs	r1, #26
1000db86:	1c0b      	adds	r3, r1, #0
1000db88:	2400      	movs	r4, #0
1000db8a:	3b08      	subs	r3, #8
1000db8c:	71ab      	strb	r3, [r5, #6]
1000db8e:	1c28      	adds	r0, r5, #0
1000db90:	4b06      	ldr	r3, [pc, #24]	; (1000dbac <gapc_bond_req_ind+0xdc>)
1000db92:	71ec      	strb	r4, [r5, #7]
1000db94:	4798      	blx	r3
1000db96:	2000      	movs	r0, #0
1000db98:	bd70      	pop	{r4, r5, r6, pc}
1000db9a:	46c0      	nop			; (mov r8, r8)
1000db9c:	10013d3c 	.word	0x10013d3c
1000dba0:	100139cc 	.word	0x100139cc
1000dba4:	10013a5e 	.word	0x10013a5e
1000dba8:	1000ff37 	.word	0x1000ff37
1000dbac:	1000d479 	.word	0x1000d479

1000dbb0 <gapc_bond_cfm_handler_pair_resp>:
1000dbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbb2:	b085      	sub	sp, #20
1000dbb4:	1c07      	adds	r7, r0, #0
1000dbb6:	a80a      	add	r0, sp, #40	; 0x28
1000dbb8:	7806      	ldrb	r6, [r0, #0]
1000dbba:	a80b      	add	r0, sp, #44	; 0x2c
1000dbbc:	7805      	ldrb	r5, [r0, #0]
1000dbbe:	a80c      	add	r0, sp, #48	; 0x30
1000dbc0:	7800      	ldrb	r0, [r0, #0]
1000dbc2:	2414      	movs	r4, #20
1000dbc4:	9002      	str	r0, [sp, #8]
1000dbc6:	a80d      	add	r0, sp, #52	; 0x34
1000dbc8:	7800      	ldrb	r0, [r0, #0]
1000dbca:	9301      	str	r3, [sp, #4]
1000dbcc:	9003      	str	r0, [sp, #12]
1000dbce:	a80e      	add	r0, sp, #56	; 0x38
1000dbd0:	8800      	ldrh	r0, [r0, #0]
1000dbd2:	4684      	mov	ip, r0
1000dbd4:	4812      	ldr	r0, [pc, #72]	; (1000dc20 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000dbd6:	7004      	strb	r4, [r0, #0]
1000dbd8:	3c06      	subs	r4, #6
1000dbda:	7044      	strb	r4, [r0, #1]
1000dbdc:	7084      	strb	r4, [r0, #2]
1000dbde:	4664      	mov	r4, ip
1000dbe0:	70c4      	strb	r4, [r0, #3]
1000dbe2:	4c10      	ldr	r4, [pc, #64]	; (1000dc24 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000dbe4:	7247      	strb	r7, [r0, #9]
1000dbe6:	8823      	ldrh	r3, [r4, #0]
1000dbe8:	8824      	ldrh	r4, [r4, #0]
1000dbea:	7103      	strb	r3, [r0, #4]
1000dbec:	466b      	mov	r3, sp
1000dbee:	791b      	ldrb	r3, [r3, #4]
1000dbf0:	0a24      	lsrs	r4, r4, #8
1000dbf2:	7303      	strb	r3, [r0, #12]
1000dbf4:	466b      	mov	r3, sp
1000dbf6:	7a1b      	ldrb	r3, [r3, #8]
1000dbf8:	7144      	strb	r4, [r0, #5]
1000dbfa:	73c3      	strb	r3, [r0, #15]
1000dbfc:	466b      	mov	r3, sp
1000dbfe:	7b1b      	ldrb	r3, [r3, #12]
1000dc00:	2401      	movs	r4, #1
1000dc02:	7403      	strb	r3, [r0, #16]
1000dc04:	2309      	movs	r3, #9
1000dc06:	7183      	strb	r3, [r0, #6]
1000dc08:	2300      	movs	r3, #0
1000dc0a:	7204      	strb	r4, [r0, #8]
1000dc0c:	7281      	strb	r1, [r0, #10]
1000dc0e:	72c2      	strb	r2, [r0, #11]
1000dc10:	7346      	strb	r6, [r0, #13]
1000dc12:	7385      	strb	r5, [r0, #14]
1000dc14:	71c3      	strb	r3, [r0, #7]
1000dc16:	2111      	movs	r1, #17
1000dc18:	4b03      	ldr	r3, [pc, #12]	; (1000dc28 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000dc1a:	4798      	blx	r3
1000dc1c:	b005      	add	sp, #20
1000dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc20:	10013d3c 	.word	0x10013d3c
1000dc24:	100139cc 	.word	0x100139cc
1000dc28:	1000d479 	.word	0x1000d479

1000dc2c <gapc_bond_cfm_handler_key_exch>:
1000dc2c:	b538      	push	{r3, r4, r5, lr}
1000dc2e:	2514      	movs	r5, #20
1000dc30:	4c0d      	ldr	r4, [pc, #52]	; (1000dc68 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000dc32:	70e3      	strb	r3, [r4, #3]
1000dc34:	4b0d      	ldr	r3, [pc, #52]	; (1000dc6c <gapc_bond_cfm_handler_key_exch+0x40>)
1000dc36:	7025      	strb	r5, [r4, #0]
1000dc38:	3d06      	subs	r5, #6
1000dc3a:	7065      	strb	r5, [r4, #1]
1000dc3c:	70a5      	strb	r5, [r4, #2]
1000dc3e:	881d      	ldrh	r5, [r3, #0]
1000dc40:	881b      	ldrh	r3, [r3, #0]
1000dc42:	7220      	strb	r0, [r4, #8]
1000dc44:	0a1b      	lsrs	r3, r3, #8
1000dc46:	7163      	strb	r3, [r4, #5]
1000dc48:	7261      	strb	r1, [r4, #9]
1000dc4a:	4b09      	ldr	r3, [pc, #36]	; (1000dc70 <gapc_bond_cfm_handler_key_exch+0x44>)
1000dc4c:	1c11      	adds	r1, r2, #0
1000dc4e:	4809      	ldr	r0, [pc, #36]	; (1000dc74 <gapc_bond_cfm_handler_key_exch+0x48>)
1000dc50:	2210      	movs	r2, #16
1000dc52:	7125      	strb	r5, [r4, #4]
1000dc54:	4798      	blx	r3
1000dc56:	2312      	movs	r3, #18
1000dc58:	71a3      	strb	r3, [r4, #6]
1000dc5a:	2300      	movs	r3, #0
1000dc5c:	1c20      	adds	r0, r4, #0
1000dc5e:	71e3      	strb	r3, [r4, #7]
1000dc60:	211a      	movs	r1, #26
1000dc62:	4b05      	ldr	r3, [pc, #20]	; (1000dc78 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000dc64:	4798      	blx	r3
1000dc66:	bd38      	pop	{r3, r4, r5, pc}
1000dc68:	10013d3c 	.word	0x10013d3c
1000dc6c:	100139cc 	.word	0x100139cc
1000dc70:	1000ff37 	.word	0x1000ff37
1000dc74:	10013d46 	.word	0x10013d46
1000dc78:	1000d479 	.word	0x1000d479

1000dc7c <gapc_encrypt_cmd_handler>:
1000dc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc7e:	2500      	movs	r5, #0
1000dc80:	b089      	sub	sp, #36	; 0x24
1000dc82:	9306      	str	r3, [sp, #24]
1000dc84:	ab0e      	add	r3, sp, #56	; 0x38
1000dc86:	781b      	ldrb	r3, [r3, #0]
1000dc88:	1c17      	adds	r7, r2, #0
1000dc8a:	9307      	str	r3, [sp, #28]
1000dc8c:	ab0f      	add	r3, sp, #60	; 0x3c
1000dc8e:	781b      	ldrb	r3, [r3, #0]
1000dc90:	4a19      	ldr	r2, [pc, #100]	; (1000dcf8 <gapc_encrypt_cmd_handler+0x7c>)
1000dc92:	1c06      	adds	r6, r0, #0
1000dc94:	9105      	str	r1, [sp, #20]
1000dc96:	9300      	str	r3, [sp, #0]
1000dc98:	9002      	str	r0, [sp, #8]
1000dc9a:	1c29      	adds	r1, r5, #0
1000dc9c:	1c2b      	adds	r3, r5, #0
1000dc9e:	9501      	str	r5, [sp, #4]
1000dca0:	1c10      	adds	r0, r2, #0
1000dca2:	4c16      	ldr	r4, [pc, #88]	; (1000dcfc <gapc_encrypt_cmd_handler+0x80>)
1000dca4:	47a0      	blx	r4
1000dca6:	2316      	movs	r3, #22
1000dca8:	4c15      	ldr	r4, [pc, #84]	; (1000dd00 <gapc_encrypt_cmd_handler+0x84>)
1000dcaa:	9905      	ldr	r1, [sp, #20]
1000dcac:	7023      	strb	r3, [r4, #0]
1000dcae:	3b08      	subs	r3, #8
1000dcb0:	7063      	strb	r3, [r4, #1]
1000dcb2:	70a3      	strb	r3, [r4, #2]
1000dcb4:	4b13      	ldr	r3, [pc, #76]	; (1000dd04 <gapc_encrypt_cmd_handler+0x88>)
1000dcb6:	70e6      	strb	r6, [r4, #3]
1000dcb8:	881a      	ldrh	r2, [r3, #0]
1000dcba:	881b      	ldrh	r3, [r3, #0]
1000dcbc:	7122      	strb	r2, [r4, #4]
1000dcbe:	0a1b      	lsrs	r3, r3, #8
1000dcc0:	7163      	strb	r3, [r4, #5]
1000dcc2:	230b      	movs	r3, #11
1000dcc4:	4e10      	ldr	r6, [pc, #64]	; (1000dd08 <gapc_encrypt_cmd_handler+0x8c>)
1000dcc6:	2210      	movs	r2, #16
1000dcc8:	4810      	ldr	r0, [pc, #64]	; (1000dd0c <gapc_encrypt_cmd_handler+0x90>)
1000dcca:	7223      	strb	r3, [r4, #8]
1000dccc:	7265      	strb	r5, [r4, #9]
1000dcce:	47b0      	blx	r6
1000dcd0:	0a3b      	lsrs	r3, r7, #8
1000dcd2:	9906      	ldr	r1, [sp, #24]
1000dcd4:	2208      	movs	r2, #8
1000dcd6:	480e      	ldr	r0, [pc, #56]	; (1000dd10 <gapc_encrypt_cmd_handler+0x94>)
1000dcd8:	76e3      	strb	r3, [r4, #27]
1000dcda:	76a7      	strb	r7, [r4, #26]
1000dcdc:	47b0      	blx	r6
1000dcde:	466a      	mov	r2, sp
1000dce0:	7f12      	ldrb	r2, [r2, #28]
1000dce2:	1d63      	adds	r3, r4, #5
1000dce4:	77da      	strb	r2, [r3, #31]
1000dce6:	231d      	movs	r3, #29
1000dce8:	1c20      	adds	r0, r4, #0
1000dcea:	71a3      	strb	r3, [r4, #6]
1000dcec:	2125      	movs	r1, #37	; 0x25
1000dcee:	4b09      	ldr	r3, [pc, #36]	; (1000dd14 <gapc_encrypt_cmd_handler+0x98>)
1000dcf0:	71e5      	strb	r5, [r4, #7]
1000dcf2:	4798      	blx	r3
1000dcf4:	b009      	add	sp, #36	; 0x24
1000dcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcf8:	10012ccc 	.word	0x10012ccc
1000dcfc:	1000d775 	.word	0x1000d775
1000dd00:	10013d3c 	.word	0x10013d3c
1000dd04:	100139cc 	.word	0x100139cc
1000dd08:	1000ff37 	.word	0x1000ff37
1000dd0c:	10013d46 	.word	0x10013d46
1000dd10:	10013d58 	.word	0x10013d58
1000dd14:	1000d479 	.word	0x1000d479

1000dd18 <gapc_encrypt_req_ind>:
1000dd18:	b508      	push	{r3, lr}
1000dd1a:	0a00      	lsrs	r0, r0, #8
1000dd1c:	8010      	strh	r0, [r2, #0]
1000dd1e:	784b      	ldrb	r3, [r1, #1]
1000dd20:	7808      	ldrb	r0, [r1, #0]
1000dd22:	021b      	lsls	r3, r3, #8
1000dd24:	4303      	orrs	r3, r0
1000dd26:	8053      	strh	r3, [r2, #2]
1000dd28:	1d10      	adds	r0, r2, #4
1000dd2a:	3102      	adds	r1, #2
1000dd2c:	2208      	movs	r2, #8
1000dd2e:	4b01      	ldr	r3, [pc, #4]	; (1000dd34 <gapc_encrypt_req_ind+0x1c>)
1000dd30:	4798      	blx	r3
1000dd32:	bd08      	pop	{r3, pc}
1000dd34:	1000ff37 	.word	0x1000ff37

1000dd38 <gapc_encrypt_cfm_handler>:
1000dd38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd3a:	2500      	movs	r5, #0
1000dd3c:	b087      	sub	sp, #28
1000dd3e:	9304      	str	r3, [sp, #16]
1000dd40:	ab0c      	add	r3, sp, #48	; 0x30
1000dd42:	781b      	ldrb	r3, [r3, #0]
1000dd44:	1c17      	adds	r7, r2, #0
1000dd46:	4a15      	ldr	r2, [pc, #84]	; (1000dd9c <gapc_encrypt_cfm_handler+0x64>)
1000dd48:	1c06      	adds	r6, r0, #0
1000dd4a:	9305      	str	r3, [sp, #20]
1000dd4c:	9100      	str	r1, [sp, #0]
1000dd4e:	9002      	str	r0, [sp, #8]
1000dd50:	1c29      	adds	r1, r5, #0
1000dd52:	1c2b      	adds	r3, r5, #0
1000dd54:	9501      	str	r5, [sp, #4]
1000dd56:	1c10      	adds	r0, r2, #0
1000dd58:	4c11      	ldr	r4, [pc, #68]	; (1000dda0 <gapc_encrypt_cfm_handler+0x68>)
1000dd5a:	47a0      	blx	r4
1000dd5c:	2318      	movs	r3, #24
1000dd5e:	4c11      	ldr	r4, [pc, #68]	; (1000dda4 <gapc_encrypt_cfm_handler+0x6c>)
1000dd60:	9904      	ldr	r1, [sp, #16]
1000dd62:	7023      	strb	r3, [r4, #0]
1000dd64:	3b0a      	subs	r3, #10
1000dd66:	7063      	strb	r3, [r4, #1]
1000dd68:	70a3      	strb	r3, [r4, #2]
1000dd6a:	4b0f      	ldr	r3, [pc, #60]	; (1000dda8 <gapc_encrypt_cfm_handler+0x70>)
1000dd6c:	480f      	ldr	r0, [pc, #60]	; (1000ddac <gapc_encrypt_cfm_handler+0x74>)
1000dd6e:	881a      	ldrh	r2, [r3, #0]
1000dd70:	881b      	ldrh	r3, [r3, #0]
1000dd72:	7122      	strb	r2, [r4, #4]
1000dd74:	0a1b      	lsrs	r3, r3, #8
1000dd76:	7163      	strb	r3, [r4, #5]
1000dd78:	2210      	movs	r2, #16
1000dd7a:	4b0d      	ldr	r3, [pc, #52]	; (1000ddb0 <gapc_encrypt_cfm_handler+0x78>)
1000dd7c:	70e6      	strb	r6, [r4, #3]
1000dd7e:	7227      	strb	r7, [r4, #8]
1000dd80:	4798      	blx	r3
1000dd82:	466b      	mov	r3, sp
1000dd84:	7d1b      	ldrb	r3, [r3, #20]
1000dd86:	1c20      	adds	r0, r4, #0
1000dd88:	7663      	strb	r3, [r4, #25]
1000dd8a:	2312      	movs	r3, #18
1000dd8c:	211a      	movs	r1, #26
1000dd8e:	71a3      	strb	r3, [r4, #6]
1000dd90:	4b08      	ldr	r3, [pc, #32]	; (1000ddb4 <gapc_encrypt_cfm_handler+0x7c>)
1000dd92:	71e5      	strb	r5, [r4, #7]
1000dd94:	4798      	blx	r3
1000dd96:	b007      	add	sp, #28
1000dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd9a:	46c0      	nop			; (mov r8, r8)
1000dd9c:	10012cdc 	.word	0x10012cdc
1000dda0:	1000d775 	.word	0x1000d775
1000dda4:	10013d3c 	.word	0x10013d3c
1000dda8:	100139cc 	.word	0x100139cc
1000ddac:	10013d45 	.word	0x10013d45
1000ddb0:	1000ff37 	.word	0x1000ff37
1000ddb4:	1000d479 	.word	0x1000d479

1000ddb8 <gapc_encrypt_ind>:
1000ddb8:	780b      	ldrb	r3, [r1, #0]
1000ddba:	0a00      	lsrs	r0, r0, #8
1000ddbc:	70d3      	strb	r3, [r2, #3]
1000ddbe:	2300      	movs	r3, #0
1000ddc0:	8010      	strh	r0, [r2, #0]
1000ddc2:	7093      	strb	r3, [r2, #2]
1000ddc4:	4770      	bx	lr
	...

1000ddc8 <gapc_param_update_cfm_handler>:
1000ddc8:	b538      	push	{r3, r4, r5, lr}
1000ddca:	2410      	movs	r4, #16
1000ddcc:	1c05      	adds	r5, r0, #0
1000ddce:	480e      	ldr	r0, [pc, #56]	; (1000de08 <gapc_param_update_cfm_handler+0x40>)
1000ddd0:	7004      	strb	r4, [r0, #0]
1000ddd2:	3c02      	subs	r4, #2
1000ddd4:	7044      	strb	r4, [r0, #1]
1000ddd6:	7084      	strb	r4, [r0, #2]
1000ddd8:	4c0c      	ldr	r4, [pc, #48]	; (1000de0c <gapc_param_update_cfm_handler+0x44>)
1000ddda:	70c5      	strb	r5, [r0, #3]
1000dddc:	8825      	ldrh	r5, [r4, #0]
1000ddde:	8824      	ldrh	r4, [r4, #0]
1000dde0:	72c3      	strb	r3, [r0, #11]
1000dde2:	0a1b      	lsrs	r3, r3, #8
1000dde4:	0a24      	lsrs	r4, r4, #8
1000dde6:	7303      	strb	r3, [r0, #12]
1000dde8:	2305      	movs	r3, #5
1000ddea:	7144      	strb	r4, [r0, #5]
1000ddec:	2400      	movs	r4, #0
1000ddee:	7201      	strb	r1, [r0, #8]
1000ddf0:	7242      	strb	r2, [r0, #9]
1000ddf2:	7183      	strb	r3, [r0, #6]
1000ddf4:	0a12      	lsrs	r2, r2, #8
1000ddf6:	210d      	movs	r1, #13
1000ddf8:	4b05      	ldr	r3, [pc, #20]	; (1000de10 <gapc_param_update_cfm_handler+0x48>)
1000ddfa:	7105      	strb	r5, [r0, #4]
1000ddfc:	7282      	strb	r2, [r0, #10]
1000ddfe:	71c4      	strb	r4, [r0, #7]
1000de00:	4798      	blx	r3
1000de02:	1c20      	adds	r0, r4, #0
1000de04:	bd38      	pop	{r3, r4, r5, pc}
1000de06:	46c0      	nop			; (mov r8, r8)
1000de08:	10013d3c 	.word	0x10013d3c
1000de0c:	100139cc 	.word	0x100139cc
1000de10:	1000d479 	.word	0x1000d479

1000de14 <gapc_param_updated_ind>:
1000de14:	2300      	movs	r3, #0
1000de16:	0a00      	lsrs	r0, r0, #8
1000de18:	8010      	strh	r0, [r2, #0]
1000de1a:	7093      	strb	r3, [r2, #2]
1000de1c:	784b      	ldrb	r3, [r1, #1]
1000de1e:	7808      	ldrb	r0, [r1, #0]
1000de20:	021b      	lsls	r3, r3, #8
1000de22:	4303      	orrs	r3, r0
1000de24:	8093      	strh	r3, [r2, #4]
1000de26:	78cb      	ldrb	r3, [r1, #3]
1000de28:	7888      	ldrb	r0, [r1, #2]
1000de2a:	021b      	lsls	r3, r3, #8
1000de2c:	4303      	orrs	r3, r0
1000de2e:	80d3      	strh	r3, [r2, #6]
1000de30:	794b      	ldrb	r3, [r1, #5]
1000de32:	7909      	ldrb	r1, [r1, #4]
1000de34:	021b      	lsls	r3, r3, #8
1000de36:	430b      	orrs	r3, r1
1000de38:	2007      	movs	r0, #7
1000de3a:	8113      	strh	r3, [r2, #8]
1000de3c:	4770      	bx	lr

1000de3e <gapc_param_updated_req_ind>:
1000de3e:	0a00      	lsrs	r0, r0, #8
1000de40:	8010      	strh	r0, [r2, #0]
1000de42:	784b      	ldrb	r3, [r1, #1]
1000de44:	7808      	ldrb	r0, [r1, #0]
1000de46:	021b      	lsls	r3, r3, #8
1000de48:	4303      	orrs	r3, r0
1000de4a:	8053      	strh	r3, [r2, #2]
1000de4c:	78cb      	ldrb	r3, [r1, #3]
1000de4e:	7888      	ldrb	r0, [r1, #2]
1000de50:	021b      	lsls	r3, r3, #8
1000de52:	4303      	orrs	r3, r0
1000de54:	8093      	strh	r3, [r2, #4]
1000de56:	794b      	ldrb	r3, [r1, #5]
1000de58:	7908      	ldrb	r0, [r1, #4]
1000de5a:	021b      	lsls	r3, r3, #8
1000de5c:	4303      	orrs	r3, r0
1000de5e:	80d3      	strh	r3, [r2, #6]
1000de60:	79cb      	ldrb	r3, [r1, #7]
1000de62:	7989      	ldrb	r1, [r1, #6]
1000de64:	021b      	lsls	r3, r3, #8
1000de66:	430b      	orrs	r3, r1
1000de68:	2008      	movs	r0, #8
1000de6a:	8113      	strh	r3, [r2, #8]
1000de6c:	4770      	bx	lr
	...

1000de70 <gapc_dev_info_req_ind_handler>:
1000de70:	b508      	push	{r3, lr}
1000de72:	1c0b      	adds	r3, r1, #0
1000de74:	0a01      	lsrs	r1, r0, #8
1000de76:	8011      	strh	r1, [r2, #0]
1000de78:	7818      	ldrb	r0, [r3, #0]
1000de7a:	7090      	strb	r0, [r2, #2]
1000de7c:	2800      	cmp	r0, #0
1000de7e:	d104      	bne.n	1000de8a <gapc_dev_info_req_ind_handler+0x1a>
1000de80:	4b03      	ldr	r3, [pc, #12]	; (1000de90 <gapc_dev_info_req_ind_handler+0x20>)
1000de82:	33aa      	adds	r3, #170	; 0xaa
1000de84:	881b      	ldrh	r3, [r3, #0]
1000de86:	2b00      	cmp	r3, #0
1000de88:	d001      	beq.n	1000de8e <gapc_dev_info_req_ind_handler+0x1e>
1000de8a:	4b02      	ldr	r3, [pc, #8]	; (1000de94 <gapc_dev_info_req_ind_handler+0x24>)
1000de8c:	4798      	blx	r3
1000de8e:	bd08      	pop	{r3, pc}
1000de90:	10013a5e 	.word	0x10013a5e
1000de94:	1000d581 	.word	0x1000d581

1000de98 <gapc_sec_req_ind>:
1000de98:	0a00      	lsrs	r0, r0, #8
1000de9a:	8010      	strh	r0, [r2, #0]
1000de9c:	7809      	ldrb	r1, [r1, #0]
1000de9e:	2301      	movs	r3, #1
1000dea0:	1c08      	adds	r0, r1, #0
1000dea2:	0889      	lsrs	r1, r1, #2
1000dea4:	4018      	ands	r0, r3
1000dea6:	400b      	ands	r3, r1
1000dea8:	70d0      	strb	r0, [r2, #3]
1000deaa:	7113      	strb	r3, [r2, #4]
1000deac:	4770      	bx	lr

1000deae <gapc_sign_counter_ind_handler>:
1000deae:	0a00      	lsrs	r0, r0, #8
1000deb0:	8010      	strh	r0, [r2, #0]
1000deb2:	784b      	ldrb	r3, [r1, #1]
1000deb4:	0218      	lsls	r0, r3, #8
1000deb6:	788b      	ldrb	r3, [r1, #2]
1000deb8:	041b      	lsls	r3, r3, #16
1000deba:	4303      	orrs	r3, r0
1000debc:	7808      	ldrb	r0, [r1, #0]
1000debe:	4303      	orrs	r3, r0
1000dec0:	78c8      	ldrb	r0, [r1, #3]
1000dec2:	0600      	lsls	r0, r0, #24
1000dec4:	4303      	orrs	r3, r0
1000dec6:	6053      	str	r3, [r2, #4]
1000dec8:	794b      	ldrb	r3, [r1, #5]
1000deca:	0218      	lsls	r0, r3, #8
1000decc:	798b      	ldrb	r3, [r1, #6]
1000dece:	041b      	lsls	r3, r3, #16
1000ded0:	4303      	orrs	r3, r0
1000ded2:	7908      	ldrb	r0, [r1, #4]
1000ded4:	79c9      	ldrb	r1, [r1, #7]
1000ded6:	4303      	orrs	r3, r0
1000ded8:	0609      	lsls	r1, r1, #24
1000deda:	430b      	orrs	r3, r1
1000dedc:	2000      	movs	r0, #0
1000dede:	6093      	str	r3, [r2, #8]
1000dee0:	4770      	bx	lr
	...

1000dee4 <gapc_peer_att_info_ind_handler>:
1000dee4:	b510      	push	{r4, lr}
1000dee6:	0a00      	lsrs	r0, r0, #8
1000dee8:	8010      	strh	r0, [r2, #0]
1000deea:	7808      	ldrb	r0, [r1, #0]
1000deec:	7090      	strb	r0, [r2, #2]
1000deee:	788b      	ldrb	r3, [r1, #2]
1000def0:	784c      	ldrb	r4, [r1, #1]
1000def2:	021b      	lsls	r3, r3, #8
1000def4:	4323      	orrs	r3, r4
1000def6:	8093      	strh	r3, [r2, #4]
1000def8:	2801      	cmp	r0, #1
1000defa:	d027      	beq.n	1000df4c <gapc_peer_att_info_ind_handler+0x68>
1000defc:	2800      	cmp	r0, #0
1000defe:	d017      	beq.n	1000df30 <gapc_peer_att_info_ind_handler+0x4c>
1000df00:	2802      	cmp	r0, #2
1000df02:	d12a      	bne.n	1000df5a <gapc_peer_att_info_ind_handler+0x76>
1000df04:	790b      	ldrb	r3, [r1, #4]
1000df06:	78c8      	ldrb	r0, [r1, #3]
1000df08:	021b      	lsls	r3, r3, #8
1000df0a:	4303      	orrs	r3, r0
1000df0c:	8113      	strh	r3, [r2, #8]
1000df0e:	798b      	ldrb	r3, [r1, #6]
1000df10:	7948      	ldrb	r0, [r1, #5]
1000df12:	021b      	lsls	r3, r3, #8
1000df14:	4303      	orrs	r3, r0
1000df16:	80d3      	strh	r3, [r2, #6]
1000df18:	7a0b      	ldrb	r3, [r1, #8]
1000df1a:	79c8      	ldrb	r0, [r1, #7]
1000df1c:	021b      	lsls	r3, r3, #8
1000df1e:	4303      	orrs	r3, r0
1000df20:	8193      	strh	r3, [r2, #12]
1000df22:	7a8b      	ldrb	r3, [r1, #10]
1000df24:	7a49      	ldrb	r1, [r1, #9]
1000df26:	021b      	lsls	r3, r3, #8
1000df28:	430b      	orrs	r3, r1
1000df2a:	8153      	strh	r3, [r2, #10]
1000df2c:	2306      	movs	r3, #6
1000df2e:	e013      	b.n	1000df58 <gapc_peer_att_info_ind_handler+0x74>
1000df30:	1c14      	adds	r4, r2, #0
1000df32:	1c20      	adds	r0, r4, #0
1000df34:	790a      	ldrb	r2, [r1, #4]
1000df36:	78cb      	ldrb	r3, [r1, #3]
1000df38:	0212      	lsls	r2, r2, #8
1000df3a:	431a      	orrs	r2, r3
1000df3c:	80e2      	strh	r2, [r4, #6]
1000df3e:	4b07      	ldr	r3, [pc, #28]	; (1000df5c <gapc_peer_att_info_ind_handler+0x78>)
1000df40:	3008      	adds	r0, #8
1000df42:	3105      	adds	r1, #5
1000df44:	4798      	blx	r3
1000df46:	2302      	movs	r3, #2
1000df48:	70a3      	strb	r3, [r4, #2]
1000df4a:	e006      	b.n	1000df5a <gapc_peer_att_info_ind_handler+0x76>
1000df4c:	790b      	ldrb	r3, [r1, #4]
1000df4e:	78c9      	ldrb	r1, [r1, #3]
1000df50:	021b      	lsls	r3, r3, #8
1000df52:	430b      	orrs	r3, r1
1000df54:	80d3      	strh	r3, [r2, #6]
1000df56:	2305      	movs	r3, #5
1000df58:	7093      	strb	r3, [r2, #2]
1000df5a:	bd10      	pop	{r4, pc}
1000df5c:	1000ff37 	.word	0x1000ff37

1000df60 <gapc_con_channel_map_ind_handler>:
1000df60:	b508      	push	{r3, lr}
1000df62:	2300      	movs	r3, #0
1000df64:	0a00      	lsrs	r0, r0, #8
1000df66:	7013      	strb	r3, [r2, #0]
1000df68:	8050      	strh	r0, [r2, #2]
1000df6a:	4b02      	ldr	r3, [pc, #8]	; (1000df74 <gapc_con_channel_map_ind_handler+0x14>)
1000df6c:	1d10      	adds	r0, r2, #4
1000df6e:	2205      	movs	r2, #5
1000df70:	4798      	blx	r3
1000df72:	bd08      	pop	{r3, pc}
1000df74:	1000ff37 	.word	0x1000ff37

1000df78 <gapc_lecb_connected>:
1000df78:	7843      	ldrb	r3, [r0, #1]
1000df7a:	7802      	ldrb	r2, [r0, #0]
1000df7c:	021b      	lsls	r3, r3, #8
1000df7e:	4313      	orrs	r3, r2
1000df80:	800b      	strh	r3, [r1, #0]
1000df82:	78c3      	ldrb	r3, [r0, #3]
1000df84:	7882      	ldrb	r2, [r0, #2]
1000df86:	021b      	lsls	r3, r3, #8
1000df88:	4313      	orrs	r3, r2
1000df8a:	804b      	strh	r3, [r1, #2]
1000df8c:	7943      	ldrb	r3, [r0, #5]
1000df8e:	7902      	ldrb	r2, [r0, #4]
1000df90:	021b      	lsls	r3, r3, #8
1000df92:	4313      	orrs	r3, r2
1000df94:	808b      	strh	r3, [r1, #4]
1000df96:	79c3      	ldrb	r3, [r0, #7]
1000df98:	7982      	ldrb	r2, [r0, #6]
1000df9a:	021b      	lsls	r3, r3, #8
1000df9c:	4313      	orrs	r3, r2
1000df9e:	80cb      	strh	r3, [r1, #6]
1000dfa0:	2300      	movs	r3, #0
1000dfa2:	720b      	strb	r3, [r1, #8]
1000dfa4:	4770      	bx	lr

1000dfa6 <gapc_lecb_disconnected>:
1000dfa6:	7843      	ldrb	r3, [r0, #1]
1000dfa8:	7802      	ldrb	r2, [r0, #0]
1000dfaa:	021b      	lsls	r3, r3, #8
1000dfac:	4313      	orrs	r3, r2
1000dfae:	800b      	strh	r3, [r1, #0]
1000dfb0:	78c3      	ldrb	r3, [r0, #3]
1000dfb2:	7882      	ldrb	r2, [r0, #2]
1000dfb4:	021b      	lsls	r3, r3, #8
1000dfb6:	4313      	orrs	r3, r2
1000dfb8:	804b      	strh	r3, [r1, #2]
1000dfba:	4770      	bx	lr

1000dfbc <gapc_lecb_connect_req_ind>:
1000dfbc:	7843      	ldrb	r3, [r0, #1]
1000dfbe:	7802      	ldrb	r2, [r0, #0]
1000dfc0:	021b      	lsls	r3, r3, #8
1000dfc2:	4313      	orrs	r3, r2
1000dfc4:	800b      	strh	r3, [r1, #0]
1000dfc6:	78c3      	ldrb	r3, [r0, #3]
1000dfc8:	7882      	ldrb	r2, [r0, #2]
1000dfca:	021b      	lsls	r3, r3, #8
1000dfcc:	4313      	orrs	r3, r2
1000dfce:	804b      	strh	r3, [r1, #2]
1000dfd0:	7943      	ldrb	r3, [r0, #5]
1000dfd2:	7902      	ldrb	r2, [r0, #4]
1000dfd4:	021b      	lsls	r3, r3, #8
1000dfd6:	4313      	orrs	r3, r2
1000dfd8:	808b      	strh	r3, [r1, #4]
1000dfda:	79c3      	ldrb	r3, [r0, #7]
1000dfdc:	7982      	ldrb	r2, [r0, #6]
1000dfde:	021b      	lsls	r3, r3, #8
1000dfe0:	4313      	orrs	r3, r2
1000dfe2:	80cb      	strh	r3, [r1, #6]
1000dfe4:	4770      	bx	lr

1000dfe6 <gapc_lecb_add_credit_resp_handler>:
1000dfe6:	7843      	ldrb	r3, [r0, #1]
1000dfe8:	7802      	ldrb	r2, [r0, #0]
1000dfea:	021b      	lsls	r3, r3, #8
1000dfec:	4313      	orrs	r3, r2
1000dfee:	800b      	strh	r3, [r1, #0]
1000dff0:	78c3      	ldrb	r3, [r0, #3]
1000dff2:	7882      	ldrb	r2, [r0, #2]
1000dff4:	021b      	lsls	r3, r3, #8
1000dff6:	4313      	orrs	r3, r2
1000dff8:	804b      	strh	r3, [r1, #2]
1000dffa:	7943      	ldrb	r3, [r0, #5]
1000dffc:	7902      	ldrb	r2, [r0, #4]
1000dffe:	021b      	lsls	r3, r3, #8
1000e000:	4313      	orrs	r3, r2
1000e002:	808b      	strh	r3, [r1, #4]
1000e004:	4770      	bx	lr
	...

1000e008 <gapm_reset_req_handler>:
1000e008:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e00a:	466b      	mov	r3, sp
1000e00c:	4915      	ldr	r1, [pc, #84]	; (1000e064 <gapm_reset_req_handler+0x5c>)
1000e00e:	4816      	ldr	r0, [pc, #88]	; (1000e068 <gapm_reset_req_handler+0x60>)
1000e010:	880c      	ldrh	r4, [r1, #0]
1000e012:	8809      	ldrh	r1, [r1, #0]
1000e014:	1ddd      	adds	r5, r3, #7
1000e016:	0a09      	lsrs	r1, r1, #8
1000e018:	2300      	movs	r3, #0
1000e01a:	2202      	movs	r2, #2
1000e01c:	7141      	strb	r1, [r0, #5]
1000e01e:	26d0      	movs	r6, #208	; 0xd0
1000e020:	2101      	movs	r1, #1
1000e022:	7104      	strb	r4, [r0, #4]
1000e024:	4c11      	ldr	r4, [pc, #68]	; (1000e06c <gapm_reset_req_handler+0x64>)
1000e026:	702b      	strb	r3, [r5, #0]
1000e028:	7002      	strb	r2, [r0, #0]
1000e02a:	70c3      	strb	r3, [r0, #3]
1000e02c:	320b      	adds	r2, #11
1000e02e:	7201      	strb	r1, [r0, #8]
1000e030:	7181      	strb	r1, [r0, #6]
1000e032:	71c3      	strb	r3, [r0, #7]
1000e034:	3108      	adds	r1, #8
1000e036:	4b0e      	ldr	r3, [pc, #56]	; (1000e070 <gapm_reset_req_handler+0x68>)
1000e038:	0136      	lsls	r6, r6, #4
1000e03a:	7042      	strb	r2, [r0, #1]
1000e03c:	7082      	strb	r2, [r0, #2]
1000e03e:	80a2      	strh	r2, [r4, #4]
1000e040:	8026      	strh	r6, [r4, #0]
1000e042:	4798      	blx	r3
1000e044:	1c28      	adds	r0, r5, #0
1000e046:	4b0b      	ldr	r3, [pc, #44]	; (1000e074 <gapm_reset_req_handler+0x6c>)
1000e048:	4798      	blx	r3
1000e04a:	782b      	ldrb	r3, [r5, #0]
1000e04c:	20e2      	movs	r0, #226	; 0xe2
1000e04e:	2b00      	cmp	r3, #0
1000e050:	d106      	bne.n	1000e060 <gapm_reset_req_handler+0x58>
1000e052:	68a3      	ldr	r3, [r4, #8]
1000e054:	20e2      	movs	r0, #226	; 0xe2
1000e056:	781a      	ldrb	r2, [r3, #0]
1000e058:	785b      	ldrb	r3, [r3, #1]
1000e05a:	2a01      	cmp	r2, #1
1000e05c:	d100      	bne.n	1000e060 <gapm_reset_req_handler+0x58>
1000e05e:	1c18      	adds	r0, r3, #0
1000e060:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e062:	46c0      	nop			; (mov r8, r8)
1000e064:	100139cc 	.word	0x100139cc
1000e068:	10013d3c 	.word	0x10013d3c
1000e06c:	100139c0 	.word	0x100139c0
1000e070:	1000d479 	.word	0x1000d479
1000e074:	1000d4d5 	.word	0x1000d4d5

1000e078 <gapm_set_dev_config_cmd_handler>:
1000e078:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e07a:	b089      	sub	sp, #36	; 0x24
1000e07c:	9303      	str	r3, [sp, #12]
1000e07e:	ab0e      	add	r3, sp, #56	; 0x38
1000e080:	781b      	ldrb	r3, [r3, #0]
1000e082:	4c37      	ldr	r4, [pc, #220]	; (1000e160 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e084:	9304      	str	r3, [sp, #16]
1000e086:	ab0f      	add	r3, sp, #60	; 0x3c
1000e088:	781b      	ldrb	r3, [r3, #0]
1000e08a:	270d      	movs	r7, #13
1000e08c:	9305      	str	r3, [sp, #20]
1000e08e:	ab10      	add	r3, sp, #64	; 0x40
1000e090:	881b      	ldrh	r3, [r3, #0]
1000e092:	72a1      	strb	r1, [r4, #10]
1000e094:	9300      	str	r3, [sp, #0]
1000e096:	ab11      	add	r3, sp, #68	; 0x44
1000e098:	881b      	ldrh	r3, [r3, #0]
1000e09a:	0a09      	lsrs	r1, r1, #8
1000e09c:	9301      	str	r3, [sp, #4]
1000e09e:	ab12      	add	r3, sp, #72	; 0x48
1000e0a0:	881b      	ldrh	r3, [r3, #0]
1000e0a2:	7260      	strb	r0, [r4, #9]
1000e0a4:	9302      	str	r3, [sp, #8]
1000e0a6:	ab06      	add	r3, sp, #24
1000e0a8:	1dde      	adds	r6, r3, #7
1000e0aa:	2300      	movs	r3, #0
1000e0ac:	7033      	strb	r3, [r6, #0]
1000e0ae:	2304      	movs	r3, #4
1000e0b0:	7023      	strb	r3, [r4, #0]
1000e0b2:	2300      	movs	r3, #0
1000e0b4:	70e3      	strb	r3, [r4, #3]
1000e0b6:	4b2b      	ldr	r3, [pc, #172]	; (1000e164 <gapm_set_dev_config_cmd_handler+0xec>)
1000e0b8:	72e1      	strb	r1, [r4, #11]
1000e0ba:	881d      	ldrh	r5, [r3, #0]
1000e0bc:	881b      	ldrh	r3, [r3, #0]
1000e0be:	1c11      	adds	r1, r2, #0
1000e0c0:	0a1b      	lsrs	r3, r3, #8
1000e0c2:	7163      	strb	r3, [r4, #5]
1000e0c4:	2303      	movs	r3, #3
1000e0c6:	7125      	strb	r5, [r4, #4]
1000e0c8:	2206      	movs	r2, #6
1000e0ca:	4d27      	ldr	r5, [pc, #156]	; (1000e168 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e0cc:	4827      	ldr	r0, [pc, #156]	; (1000e16c <gapm_set_dev_config_cmd_handler+0xf4>)
1000e0ce:	7223      	strb	r3, [r4, #8]
1000e0d0:	7067      	strb	r7, [r4, #1]
1000e0d2:	70a7      	strb	r7, [r4, #2]
1000e0d4:	47a8      	blx	r5
1000e0d6:	9903      	ldr	r1, [sp, #12]
1000e0d8:	2210      	movs	r2, #16
1000e0da:	4825      	ldr	r0, [pc, #148]	; (1000e170 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e0dc:	47a8      	blx	r5
1000e0de:	466a      	mov	r2, sp
1000e0e0:	7c12      	ldrb	r2, [r2, #16]
1000e0e2:	1ce3      	adds	r3, r4, #3
1000e0e4:	77da      	strb	r2, [r3, #31]
1000e0e6:	466a      	mov	r2, sp
1000e0e8:	7d12      	ldrb	r2, [r2, #20]
1000e0ea:	1d23      	adds	r3, r4, #4
1000e0ec:	77da      	strb	r2, [r3, #31]
1000e0ee:	466a      	mov	r2, sp
1000e0f0:	7812      	ldrb	r2, [r2, #0]
1000e0f2:	1d63      	adds	r3, r4, #5
1000e0f4:	77da      	strb	r2, [r3, #31]
1000e0f6:	9b00      	ldr	r3, [sp, #0]
1000e0f8:	1da2      	adds	r2, r4, #6
1000e0fa:	0a1b      	lsrs	r3, r3, #8
1000e0fc:	77d3      	strb	r3, [r2, #31]
1000e0fe:	466a      	mov	r2, sp
1000e100:	7912      	ldrb	r2, [r2, #4]
1000e102:	1de3      	adds	r3, r4, #7
1000e104:	77da      	strb	r2, [r3, #31]
1000e106:	1c22      	adds	r2, r4, #0
1000e108:	9b01      	ldr	r3, [sp, #4]
1000e10a:	3208      	adds	r2, #8
1000e10c:	0a1b      	lsrs	r3, r3, #8
1000e10e:	77d3      	strb	r3, [r2, #31]
1000e110:	466a      	mov	r2, sp
1000e112:	1c23      	adds	r3, r4, #0
1000e114:	7a12      	ldrb	r2, [r2, #8]
1000e116:	3328      	adds	r3, #40	; 0x28
1000e118:	701a      	strb	r2, [r3, #0]
1000e11a:	1c22      	adds	r2, r4, #0
1000e11c:	9b02      	ldr	r3, [sp, #8]
1000e11e:	3229      	adds	r2, #41	; 0x29
1000e120:	0a1b      	lsrs	r3, r3, #8
1000e122:	7013      	strb	r3, [r2, #0]
1000e124:	23d0      	movs	r3, #208	; 0xd0
1000e126:	4d13      	ldr	r5, [pc, #76]	; (1000e174 <gapm_set_dev_config_cmd_handler+0xfc>)
1000e128:	011b      	lsls	r3, r3, #4
1000e12a:	802b      	strh	r3, [r5, #0]
1000e12c:	2322      	movs	r3, #34	; 0x22
1000e12e:	71a3      	strb	r3, [r4, #6]
1000e130:	2300      	movs	r3, #0
1000e132:	212a      	movs	r1, #42	; 0x2a
1000e134:	71e3      	strb	r3, [r4, #7]
1000e136:	1c20      	adds	r0, r4, #0
1000e138:	4b0f      	ldr	r3, [pc, #60]	; (1000e178 <gapm_set_dev_config_cmd_handler+0x100>)
1000e13a:	80af      	strh	r7, [r5, #4]
1000e13c:	4798      	blx	r3
1000e13e:	1c30      	adds	r0, r6, #0
1000e140:	4b0e      	ldr	r3, [pc, #56]	; (1000e17c <gapm_set_dev_config_cmd_handler+0x104>)
1000e142:	4798      	blx	r3
1000e144:	7833      	ldrb	r3, [r6, #0]
1000e146:	20e2      	movs	r0, #226	; 0xe2
1000e148:	2b00      	cmp	r3, #0
1000e14a:	d106      	bne.n	1000e15a <gapm_set_dev_config_cmd_handler+0xe2>
1000e14c:	68ab      	ldr	r3, [r5, #8]
1000e14e:	20e2      	movs	r0, #226	; 0xe2
1000e150:	781a      	ldrb	r2, [r3, #0]
1000e152:	785b      	ldrb	r3, [r3, #1]
1000e154:	2a03      	cmp	r2, #3
1000e156:	d100      	bne.n	1000e15a <gapm_set_dev_config_cmd_handler+0xe2>
1000e158:	1c18      	adds	r0, r3, #0
1000e15a:	b009      	add	sp, #36	; 0x24
1000e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e15e:	46c0      	nop			; (mov r8, r8)
1000e160:	10013d3c 	.word	0x10013d3c
1000e164:	100139cc 	.word	0x100139cc
1000e168:	1000ff37 	.word	0x1000ff37
1000e16c:	10013d48 	.word	0x10013d48
1000e170:	10013d4e 	.word	0x10013d4e
1000e174:	100139c0 	.word	0x100139c0
1000e178:	1000d479 	.word	0x1000d479
1000e17c:	1000d4d5 	.word	0x1000d4d5

1000e180 <gapm_get_dev_config_cmd_handler>:
1000e180:	4684      	mov	ip, r0
1000e182:	4663      	mov	r3, ip
1000e184:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e186:	b085      	sub	sp, #20
1000e188:	9100      	str	r1, [sp, #0]
1000e18a:	20cf      	movs	r0, #207	; 0xcf
1000e18c:	2b01      	cmp	r3, #1
1000e18e:	d854      	bhi.n	1000e23a <gapm_get_dev_config_cmd_handler+0xba>
1000e190:	2900      	cmp	r1, #0
1000e192:	d052      	beq.n	1000e23a <gapm_get_dev_config_cmd_handler+0xba>
1000e194:	2200      	movs	r2, #0
1000e196:	492a      	ldr	r1, [pc, #168]	; (1000e240 <gapm_get_dev_config_cmd_handler+0xc0>)
1000e198:	ab02      	add	r3, sp, #8
1000e19a:	880c      	ldrh	r4, [r1, #0]
1000e19c:	8809      	ldrh	r1, [r1, #0]
1000e19e:	1d9f      	adds	r7, r3, #6
1000e1a0:	719a      	strb	r2, [r3, #6]
1000e1a2:	4b28      	ldr	r3, [pc, #160]	; (1000e244 <gapm_get_dev_config_cmd_handler+0xc4>)
1000e1a4:	0a09      	lsrs	r1, r1, #8
1000e1a6:	250d      	movs	r5, #13
1000e1a8:	2606      	movs	r6, #6
1000e1aa:	7159      	strb	r1, [r3, #5]
1000e1ac:	4661      	mov	r1, ip
1000e1ae:	701e      	strb	r6, [r3, #0]
1000e1b0:	705d      	strb	r5, [r3, #1]
1000e1b2:	709d      	strb	r5, [r3, #2]
1000e1b4:	70da      	strb	r2, [r3, #3]
1000e1b6:	711c      	strb	r4, [r3, #4]
1000e1b8:	2901      	cmp	r1, #1
1000e1ba:	d13e      	bne.n	1000e23a <gapm_get_dev_config_cmd_handler+0xba>
1000e1bc:	21d0      	movs	r1, #208	; 0xd0
1000e1be:	4c22      	ldr	r4, [pc, #136]	; (1000e248 <gapm_get_dev_config_cmd_handler+0xc8>)
1000e1c0:	0109      	lsls	r1, r1, #4
1000e1c2:	8061      	strh	r1, [r4, #2]
1000e1c4:	4921      	ldr	r1, [pc, #132]	; (1000e24c <gapm_get_dev_config_cmd_handler+0xcc>)
1000e1c6:	71da      	strb	r2, [r3, #7]
1000e1c8:	8021      	strh	r1, [r4, #0]
1000e1ca:	4661      	mov	r1, ip
1000e1cc:	721e      	strb	r6, [r3, #8]
1000e1ce:	7199      	strb	r1, [r3, #6]
1000e1d0:	1c18      	adds	r0, r3, #0
1000e1d2:	2109      	movs	r1, #9
1000e1d4:	4b1e      	ldr	r3, [pc, #120]	; (1000e250 <gapm_get_dev_config_cmd_handler+0xd0>)
1000e1d6:	80a5      	strh	r5, [r4, #4]
1000e1d8:	4798      	blx	r3
1000e1da:	1c38      	adds	r0, r7, #0
1000e1dc:	4b1d      	ldr	r3, [pc, #116]	; (1000e254 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e1de:	4798      	blx	r3
1000e1e0:	783b      	ldrb	r3, [r7, #0]
1000e1e2:	20e2      	movs	r0, #226	; 0xe2
1000e1e4:	9301      	str	r3, [sp, #4]
1000e1e6:	2b00      	cmp	r3, #0
1000e1e8:	d127      	bne.n	1000e23a <gapm_get_dev_config_cmd_handler+0xba>
1000e1ea:	8821      	ldrh	r1, [r4, #0]
1000e1ec:	4a1a      	ldr	r2, [pc, #104]	; (1000e258 <gapm_get_dev_config_cmd_handler+0xd8>)
1000e1ee:	68a7      	ldr	r7, [r4, #8]
1000e1f0:	3b01      	subs	r3, #1
1000e1f2:	4291      	cmp	r1, r2
1000e1f4:	d001      	beq.n	1000e1fa <gapm_get_dev_config_cmd_handler+0x7a>
1000e1f6:	8023      	strh	r3, [r4, #0]
1000e1f8:	e01a      	b.n	1000e230 <gapm_get_dev_config_cmd_handler+0xb0>
1000e1fa:	8063      	strh	r3, [r4, #2]
1000e1fc:	9b00      	ldr	r3, [sp, #0]
1000e1fe:	1c39      	adds	r1, r7, #0
1000e200:	1c58      	adds	r0, r3, #1
1000e202:	1c32      	adds	r2, r6, #0
1000e204:	4b15      	ldr	r3, [pc, #84]	; (1000e25c <gapm_get_dev_config_cmd_handler+0xdc>)
1000e206:	4798      	blx	r3
1000e208:	79bb      	ldrb	r3, [r7, #6]
1000e20a:	9a00      	ldr	r2, [sp, #0]
1000e20c:	7013      	strb	r3, [r2, #0]
1000e20e:	23d0      	movs	r3, #208	; 0xd0
1000e210:	011b      	lsls	r3, r3, #4
1000e212:	8023      	strh	r3, [r4, #0]
1000e214:	ab02      	add	r3, sp, #8
1000e216:	80a5      	strh	r5, [r4, #4]
1000e218:	1ddd      	adds	r5, r3, #7
1000e21a:	466b      	mov	r3, sp
1000e21c:	791b      	ldrb	r3, [r3, #4]
1000e21e:	1c28      	adds	r0, r5, #0
1000e220:	702b      	strb	r3, [r5, #0]
1000e222:	4b0c      	ldr	r3, [pc, #48]	; (1000e254 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e224:	4798      	blx	r3
1000e226:	782b      	ldrb	r3, [r5, #0]
1000e228:	20d0      	movs	r0, #208	; 0xd0
1000e22a:	2b00      	cmp	r3, #0
1000e22c:	d105      	bne.n	1000e23a <gapm_get_dev_config_cmd_handler+0xba>
1000e22e:	68a7      	ldr	r7, [r4, #8]
1000e230:	783b      	ldrb	r3, [r7, #0]
1000e232:	7878      	ldrb	r0, [r7, #1]
1000e234:	2b06      	cmp	r3, #6
1000e236:	d000      	beq.n	1000e23a <gapm_get_dev_config_cmd_handler+0xba>
1000e238:	20e2      	movs	r0, #226	; 0xe2
1000e23a:	b005      	add	sp, #20
1000e23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e23e:	46c0      	nop			; (mov r8, r8)
1000e240:	100139cc 	.word	0x100139cc
1000e244:	10013d3c 	.word	0x10013d3c
1000e248:	100139c0 	.word	0x100139c0
1000e24c:	00000d08 	.word	0x00000d08
1000e250:	1000d479 	.word	0x1000d479
1000e254:	1000d4d5 	.word	0x1000d4d5
1000e258:	0000ffff 	.word	0x0000ffff
1000e25c:	1000ff37 	.word	0x1000ff37

1000e260 <gapm_cancel_cmd_handler>:
1000e260:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e262:	4916      	ldr	r1, [pc, #88]	; (1000e2bc <gapm_cancel_cmd_handler+0x5c>)
1000e264:	4816      	ldr	r0, [pc, #88]	; (1000e2c0 <gapm_cancel_cmd_handler+0x60>)
1000e266:	880c      	ldrh	r4, [r1, #0]
1000e268:	8809      	ldrh	r1, [r1, #0]
1000e26a:	466b      	mov	r3, sp
1000e26c:	0a09      	lsrs	r1, r1, #8
1000e26e:	7141      	strb	r1, [r0, #5]
1000e270:	2102      	movs	r1, #2
1000e272:	2203      	movs	r2, #3
1000e274:	7201      	strb	r1, [r0, #8]
1000e276:	21d0      	movs	r1, #208	; 0xd0
1000e278:	1ddd      	adds	r5, r3, #7
1000e27a:	2300      	movs	r3, #0
1000e27c:	7104      	strb	r4, [r0, #4]
1000e27e:	4c11      	ldr	r4, [pc, #68]	; (1000e2c4 <gapm_cancel_cmd_handler+0x64>)
1000e280:	7002      	strb	r2, [r0, #0]
1000e282:	0109      	lsls	r1, r1, #4
1000e284:	320a      	adds	r2, #10
1000e286:	702b      	strb	r3, [r5, #0]
1000e288:	7042      	strb	r2, [r0, #1]
1000e28a:	7082      	strb	r2, [r0, #2]
1000e28c:	70c3      	strb	r3, [r0, #3]
1000e28e:	8021      	strh	r1, [r4, #0]
1000e290:	80a2      	strh	r2, [r4, #4]
1000e292:	71c3      	strb	r3, [r0, #7]
1000e294:	3a0c      	subs	r2, #12
1000e296:	2109      	movs	r1, #9
1000e298:	4b0b      	ldr	r3, [pc, #44]	; (1000e2c8 <gapm_cancel_cmd_handler+0x68>)
1000e29a:	7182      	strb	r2, [r0, #6]
1000e29c:	4798      	blx	r3
1000e29e:	1c28      	adds	r0, r5, #0
1000e2a0:	4b0a      	ldr	r3, [pc, #40]	; (1000e2cc <gapm_cancel_cmd_handler+0x6c>)
1000e2a2:	4798      	blx	r3
1000e2a4:	7828      	ldrb	r0, [r5, #0]
1000e2a6:	2800      	cmp	r0, #0
1000e2a8:	d001      	beq.n	1000e2ae <gapm_cancel_cmd_handler+0x4e>
1000e2aa:	20e2      	movs	r0, #226	; 0xe2
1000e2ac:	e004      	b.n	1000e2b8 <gapm_cancel_cmd_handler+0x58>
1000e2ae:	68a3      	ldr	r3, [r4, #8]
1000e2b0:	785b      	ldrb	r3, [r3, #1]
1000e2b2:	2b44      	cmp	r3, #68	; 0x44
1000e2b4:	d000      	beq.n	1000e2b8 <gapm_cancel_cmd_handler+0x58>
1000e2b6:	1c18      	adds	r0, r3, #0
1000e2b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e2ba:	46c0      	nop			; (mov r8, r8)
1000e2bc:	100139cc 	.word	0x100139cc
1000e2c0:	10013d3c 	.word	0x10013d3c
1000e2c4:	100139c0 	.word	0x100139c0
1000e2c8:	1000d479 	.word	0x1000d479
1000e2cc:	1000d4d5 	.word	0x1000d4d5

1000e2d0 <gapm_dev_bdaddr_ind_handler>:
1000e2d0:	b538      	push	{r3, r4, r5, lr}
1000e2d2:	1c05      	adds	r5, r0, #0
1000e2d4:	1c0c      	adds	r4, r1, #0
1000e2d6:	1c48      	adds	r0, r1, #1
1000e2d8:	2206      	movs	r2, #6
1000e2da:	1c29      	adds	r1, r5, #0
1000e2dc:	4b02      	ldr	r3, [pc, #8]	; (1000e2e8 <gapm_dev_bdaddr_ind_handler+0x18>)
1000e2de:	4798      	blx	r3
1000e2e0:	79ab      	ldrb	r3, [r5, #6]
1000e2e2:	2000      	movs	r0, #0
1000e2e4:	7023      	strb	r3, [r4, #0]
1000e2e6:	bd38      	pop	{r3, r4, r5, pc}
1000e2e8:	1000ff37 	.word	0x1000ff37

1000e2ec <gapm_cmp_evt>:
1000e2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e2ee:	7803      	ldrb	r3, [r0, #0]
1000e2f0:	7845      	ldrb	r5, [r0, #1]
1000e2f2:	3b0c      	subs	r3, #12
1000e2f4:	1e18      	subs	r0, r3, #0
1000e2f6:	280b      	cmp	r0, #11
1000e2f8:	d900      	bls.n	1000e2fc <gapm_cmp_evt+0x10>
1000e2fa:	e08d      	b.n	1000e418 <gapm_cmp_evt+0x12c>
1000e2fc:	1c0c      	adds	r4, r1, #0
1000e2fe:	f000 fca1 	bl	1000ec44 <__gnu_thumb1_case_uqi>
1000e302:	1952      	.short	0x1952
1000e304:	068b1919 	.word	0x068b1919
1000e308:	8b595906 	.word	0x8b595906
1000e30c:	0d8b      	.short	0x0d8b
1000e30e:	2300      	movs	r3, #0
1000e310:	2d45      	cmp	r5, #69	; 0x45
1000e312:	d000      	beq.n	1000e316 <gapm_cmp_evt+0x2a>
1000e314:	1c2b      	adds	r3, r5, #0
1000e316:	7023      	strb	r3, [r4, #0]
1000e318:	2002      	movs	r0, #2
1000e31a:	e07e      	b.n	1000e41a <gapm_cmp_evt+0x12e>
1000e31c:	203b      	movs	r0, #59	; 0x3b
1000e31e:	2d00      	cmp	r5, #0
1000e320:	d100      	bne.n	1000e324 <gapm_cmp_evt+0x38>
1000e322:	e07a      	b.n	1000e41a <gapm_cmp_evt+0x12e>
1000e324:	700d      	strb	r5, [r1, #0]
1000e326:	1c48      	adds	r0, r1, #1
1000e328:	2210      	movs	r2, #16
1000e32a:	2100      	movs	r1, #0
1000e32c:	4b3b      	ldr	r3, [pc, #236]	; (1000e41c <gapm_cmp_evt+0x130>)
1000e32e:	4798      	blx	r3
1000e330:	200f      	movs	r0, #15
1000e332:	e072      	b.n	1000e41a <gapm_cmp_evt+0x12e>
1000e334:	2d00      	cmp	r5, #0
1000e336:	d134      	bne.n	1000e3a2 <gapm_cmp_evt+0xb6>
1000e338:	4b39      	ldr	r3, [pc, #228]	; (1000e420 <gapm_cmp_evt+0x134>)
1000e33a:	4798      	blx	r3
1000e33c:	1e43      	subs	r3, r0, #1
1000e33e:	b2db      	uxtb	r3, r3
1000e340:	1c28      	adds	r0, r5, #0
1000e342:	2b06      	cmp	r3, #6
1000e344:	d869      	bhi.n	1000e41a <gapm_cmp_evt+0x12e>
1000e346:	466b      	mov	r3, sp
1000e348:	4e36      	ldr	r6, [pc, #216]	; (1000e424 <gapm_cmp_evt+0x138>)
1000e34a:	1dd9      	adds	r1, r3, #7
1000e34c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e34e:	4b36      	ldr	r3, [pc, #216]	; (1000e428 <gapm_cmp_evt+0x13c>)
1000e350:	4798      	blx	r3
1000e352:	2312      	movs	r3, #18
1000e354:	4358      	muls	r0, r3
1000e356:	4935      	ldr	r1, [pc, #212]	; (1000e42c <gapm_cmp_evt+0x140>)
1000e358:	1809      	adds	r1, r1, r0
1000e35a:	1c0b      	adds	r3, r1, #0
1000e35c:	894a      	ldrh	r2, [r1, #10]
1000e35e:	3308      	adds	r3, #8
1000e360:	8122      	strh	r2, [r4, #8]
1000e362:	784f      	ldrb	r7, [r1, #1]
1000e364:	72a5      	strb	r5, [r4, #10]
1000e366:	7027      	strb	r7, [r4, #0]
1000e368:	898a      	ldrh	r2, [r1, #12]
1000e36a:	1c60      	adds	r0, r4, #1
1000e36c:	81a2      	strh	r2, [r4, #12]
1000e36e:	88db      	ldrh	r3, [r3, #6]
1000e370:	3102      	adds	r1, #2
1000e372:	81e3      	strh	r3, [r4, #14]
1000e374:	89cb      	ldrh	r3, [r1, #14]
1000e376:	2206      	movs	r2, #6
1000e378:	8223      	strh	r3, [r4, #16]
1000e37a:	4b2d      	ldr	r3, [pc, #180]	; (1000e430 <gapm_cmp_evt+0x144>)
1000e37c:	4798      	blx	r3
1000e37e:	2f00      	cmp	r7, #0
1000e380:	d00a      	beq.n	1000e398 <gapm_cmp_evt+0xac>
1000e382:	79a3      	ldrb	r3, [r4, #6]
1000e384:	223f      	movs	r2, #63	; 0x3f
1000e386:	1c19      	adds	r1, r3, #0
1000e388:	3501      	adds	r5, #1
1000e38a:	4391      	bics	r1, r2
1000e38c:	29c0      	cmp	r1, #192	; 0xc0
1000e38e:	d003      	beq.n	1000e398 <gapm_cmp_evt+0xac>
1000e390:	065b      	lsls	r3, r3, #25
1000e392:	0fdb      	lsrs	r3, r3, #31
1000e394:	3502      	adds	r5, #2
1000e396:	1aed      	subs	r5, r5, r3
1000e398:	2301      	movs	r3, #1
1000e39a:	425b      	negs	r3, r3
1000e39c:	7025      	strb	r5, [r4, #0]
1000e39e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e3a0:	e038      	b.n	1000e414 <gapm_cmp_evt+0x128>
1000e3a2:	700d      	strb	r5, [r1, #0]
1000e3a4:	e004      	b.n	1000e3b0 <gapm_cmp_evt+0xc4>
1000e3a6:	2300      	movs	r3, #0
1000e3a8:	2d45      	cmp	r5, #69	; 0x45
1000e3aa:	d000      	beq.n	1000e3ae <gapm_cmp_evt+0xc2>
1000e3ac:	1c2b      	adds	r3, r5, #0
1000e3ae:	7023      	strb	r3, [r4, #0]
1000e3b0:	2003      	movs	r0, #3
1000e3b2:	e032      	b.n	1000e41a <gapm_cmp_evt+0x12e>
1000e3b4:	4e1b      	ldr	r6, [pc, #108]	; (1000e424 <gapm_cmp_evt+0x138>)
1000e3b6:	2100      	movs	r1, #0
1000e3b8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e3ba:	4b1b      	ldr	r3, [pc, #108]	; (1000e428 <gapm_cmp_evt+0x13c>)
1000e3bc:	4798      	blx	r3
1000e3be:	2807      	cmp	r0, #7
1000e3c0:	d818      	bhi.n	1000e3f4 <gapm_cmp_evt+0x108>
1000e3c2:	2301      	movs	r3, #1
1000e3c4:	425b      	negs	r3, r3
1000e3c6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e3c8:	3313      	adds	r3, #19
1000e3ca:	4358      	muls	r0, r3
1000e3cc:	4917      	ldr	r1, [pc, #92]	; (1000e42c <gapm_cmp_evt+0x140>)
1000e3ce:	1809      	adds	r1, r1, r0
1000e3d0:	1c0b      	adds	r3, r1, #0
1000e3d2:	894a      	ldrh	r2, [r1, #10]
1000e3d4:	3308      	adds	r3, #8
1000e3d6:	8122      	strh	r2, [r4, #8]
1000e3d8:	784a      	ldrb	r2, [r1, #1]
1000e3da:	72a5      	strb	r5, [r4, #10]
1000e3dc:	7022      	strb	r2, [r4, #0]
1000e3de:	898a      	ldrh	r2, [r1, #12]
1000e3e0:	1c60      	adds	r0, r4, #1
1000e3e2:	81a2      	strh	r2, [r4, #12]
1000e3e4:	88db      	ldrh	r3, [r3, #6]
1000e3e6:	3102      	adds	r1, #2
1000e3e8:	81e3      	strh	r3, [r4, #14]
1000e3ea:	89cb      	ldrh	r3, [r1, #14]
1000e3ec:	2206      	movs	r2, #6
1000e3ee:	8223      	strh	r3, [r4, #16]
1000e3f0:	4b0f      	ldr	r3, [pc, #60]	; (1000e430 <gapm_cmp_evt+0x144>)
1000e3f2:	4798      	blx	r3
1000e3f4:	2200      	movs	r2, #0
1000e3f6:	7823      	ldrb	r3, [r4, #0]
1000e3f8:	4293      	cmp	r3, r2
1000e3fa:	d00a      	beq.n	1000e412 <gapm_cmp_evt+0x126>
1000e3fc:	79a3      	ldrb	r3, [r4, #6]
1000e3fe:	323f      	adds	r2, #63	; 0x3f
1000e400:	1c19      	adds	r1, r3, #0
1000e402:	4391      	bics	r1, r2
1000e404:	3a3e      	subs	r2, #62	; 0x3e
1000e406:	29c0      	cmp	r1, #192	; 0xc0
1000e408:	d003      	beq.n	1000e412 <gapm_cmp_evt+0x126>
1000e40a:	065b      	lsls	r3, r3, #25
1000e40c:	0fdb      	lsrs	r3, r3, #31
1000e40e:	3202      	adds	r2, #2
1000e410:	1ad2      	subs	r2, r2, r3
1000e412:	7022      	strb	r2, [r4, #0]
1000e414:	2005      	movs	r0, #5
1000e416:	e000      	b.n	1000e41a <gapm_cmp_evt+0x12e>
1000e418:	2000      	movs	r0, #0
1000e41a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e41c:	1000ff49 	.word	0x1000ff49
1000e420:	1000d67d 	.word	0x1000d67d
1000e424:	10013a5e 	.word	0x10013a5e
1000e428:	1000d641 	.word	0x1000d641
1000e42c:	100139ce 	.word	0x100139ce
1000e430:	1000ff37 	.word	0x1000ff37

1000e434 <get_gap_local_addr_type>:
1000e434:	4b04      	ldr	r3, [pc, #16]	; (1000e448 <get_gap_local_addr_type+0x14>)
1000e436:	2001      	movs	r0, #1
1000e438:	791b      	ldrb	r3, [r3, #4]
1000e43a:	2b02      	cmp	r3, #2
1000e43c:	d003      	beq.n	1000e446 <get_gap_local_addr_type+0x12>
1000e43e:	3b03      	subs	r3, #3
1000e440:	4258      	negs	r0, r3
1000e442:	4158      	adcs	r0, r3
1000e444:	0040      	lsls	r0, r0, #1
1000e446:	4770      	bx	lr
1000e448:	10013a5e 	.word	0x10013a5e

1000e44c <gapm_adv_report_evt_handler>:
1000e44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e44e:	7843      	ldrb	r3, [r0, #1]
1000e450:	1c05      	adds	r5, r0, #0
1000e452:	9301      	str	r3, [sp, #4]
1000e454:	466b      	mov	r3, sp
1000e456:	1c0c      	adds	r4, r1, #0
1000e458:	791b      	ldrb	r3, [r3, #4]
1000e45a:	7806      	ldrb	r6, [r0, #0]
1000e45c:	2206      	movs	r2, #6
1000e45e:	704b      	strb	r3, [r1, #1]
1000e460:	1c88      	adds	r0, r1, #2
1000e462:	4f1b      	ldr	r7, [pc, #108]	; (1000e4d0 <gapm_adv_report_evt_handler+0x84>)
1000e464:	1ca9      	adds	r1, r5, #2
1000e466:	47b8      	blx	r7
1000e468:	1c20      	adds	r0, r4, #0
1000e46a:	1c29      	adds	r1, r5, #0
1000e46c:	7a2a      	ldrb	r2, [r5, #8]
1000e46e:	3008      	adds	r0, #8
1000e470:	77c2      	strb	r2, [r0, #31]
1000e472:	3109      	adds	r1, #9
1000e474:	3528      	adds	r5, #40	; 0x28
1000e476:	47b8      	blx	r7
1000e478:	782b      	ldrb	r3, [r5, #0]
1000e47a:	b25a      	sxtb	r2, r3
1000e47c:	2a00      	cmp	r2, #0
1000e47e:	da01      	bge.n	1000e484 <gapm_adv_report_evt_handler+0x38>
1000e480:	3301      	adds	r3, #1
1000e482:	b2db      	uxtb	r3, r3
1000e484:	1c22      	adds	r2, r4, #0
1000e486:	3228      	adds	r2, #40	; 0x28
1000e488:	7013      	strb	r3, [r2, #0]
1000e48a:	2200      	movs	r2, #0
1000e48c:	9b01      	ldr	r3, [sp, #4]
1000e48e:	4293      	cmp	r3, r2
1000e490:	d00a      	beq.n	1000e4a8 <gapm_adv_report_evt_handler+0x5c>
1000e492:	79e3      	ldrb	r3, [r4, #7]
1000e494:	323f      	adds	r2, #63	; 0x3f
1000e496:	1c19      	adds	r1, r3, #0
1000e498:	4391      	bics	r1, r2
1000e49a:	3a3e      	subs	r2, #62	; 0x3e
1000e49c:	29c0      	cmp	r1, #192	; 0xc0
1000e49e:	d003      	beq.n	1000e4a8 <gapm_adv_report_evt_handler+0x5c>
1000e4a0:	065b      	lsls	r3, r3, #25
1000e4a2:	0fdb      	lsrs	r3, r3, #31
1000e4a4:	3202      	adds	r2, #2
1000e4a6:	1ad2      	subs	r2, r2, r3
1000e4a8:	7062      	strb	r2, [r4, #1]
1000e4aa:	2e04      	cmp	r6, #4
1000e4ac:	d80f      	bhi.n	1000e4ce <gapm_adv_report_evt_handler+0x82>
1000e4ae:	1c30      	adds	r0, r6, #0
1000e4b0:	f000 fbc8 	bl	1000ec44 <__gnu_thumb1_case_uqi>
1000e4b4:	09070503 	.word	0x09070503
1000e4b8:	0b          	.byte	0x0b
1000e4b9:	00          	.byte	0x00
1000e4ba:	2300      	movs	r3, #0
1000e4bc:	e006      	b.n	1000e4cc <gapm_adv_report_evt_handler+0x80>
1000e4be:	2301      	movs	r3, #1
1000e4c0:	e004      	b.n	1000e4cc <gapm_adv_report_evt_handler+0x80>
1000e4c2:	2302      	movs	r3, #2
1000e4c4:	e002      	b.n	1000e4cc <gapm_adv_report_evt_handler+0x80>
1000e4c6:	2303      	movs	r3, #3
1000e4c8:	e000      	b.n	1000e4cc <gapm_adv_report_evt_handler+0x80>
1000e4ca:	2305      	movs	r3, #5
1000e4cc:	7023      	strb	r3, [r4, #0]
1000e4ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e4d0:	1000ff37 	.word	0x1000ff37

1000e4d4 <gapm_start_connection_cmd_handler>:
1000e4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4d6:	b089      	sub	sp, #36	; 0x24
1000e4d8:	aa0f      	add	r2, sp, #60	; 0x3c
1000e4da:	8812      	ldrh	r2, [r2, #0]
1000e4dc:	9107      	str	r1, [sp, #28]
1000e4de:	4694      	mov	ip, r2
1000e4e0:	aa10      	add	r2, sp, #64	; 0x40
1000e4e2:	8812      	ldrh	r2, [r2, #0]
1000e4e4:	a908      	add	r1, sp, #32
1000e4e6:	9202      	str	r2, [sp, #8]
1000e4e8:	aa11      	add	r2, sp, #68	; 0x44
1000e4ea:	8812      	ldrh	r2, [r2, #0]
1000e4ec:	4e3b      	ldr	r6, [pc, #236]	; (1000e5dc <gapm_start_connection_cmd_handler+0x108>)
1000e4ee:	9203      	str	r2, [sp, #12]
1000e4f0:	aa12      	add	r2, sp, #72	; 0x48
1000e4f2:	8812      	ldrh	r2, [r2, #0]
1000e4f4:	4c3a      	ldr	r4, [pc, #232]	; (1000e5e0 <gapm_start_connection_cmd_handler+0x10c>)
1000e4f6:	9204      	str	r2, [sp, #16]
1000e4f8:	aa13      	add	r2, sp, #76	; 0x4c
1000e4fa:	8812      	ldrh	r2, [r2, #0]
1000e4fc:	ab0e      	add	r3, sp, #56	; 0x38
1000e4fe:	9205      	str	r2, [sp, #20]
1000e500:	aa14      	add	r2, sp, #80	; 0x50
1000e502:	8812      	ldrh	r2, [r2, #0]
1000e504:	881b      	ldrh	r3, [r3, #0]
1000e506:	9206      	str	r2, [sp, #24]
1000e508:	aa15      	add	r2, sp, #84	; 0x54
1000e50a:	8817      	ldrh	r7, [r2, #0]
1000e50c:	2219      	movs	r2, #25
1000e50e:	1852      	adds	r2, r2, r1
1000e510:	7fd2      	ldrb	r2, [r2, #31]
1000e512:	8831      	ldrh	r1, [r6, #0]
1000e514:	9201      	str	r2, [sp, #4]
1000e516:	2211      	movs	r2, #17
1000e518:	7121      	strb	r1, [r4, #4]
1000e51a:	4669      	mov	r1, sp
1000e51c:	7022      	strb	r2, [r4, #0]
1000e51e:	3a04      	subs	r2, #4
1000e520:	7062      	strb	r2, [r4, #1]
1000e522:	70a2      	strb	r2, [r4, #2]
1000e524:	2200      	movs	r2, #0
1000e526:	8836      	ldrh	r6, [r6, #0]
1000e528:	7f09      	ldrb	r1, [r1, #28]
1000e52a:	0a36      	lsrs	r6, r6, #8
1000e52c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000e52e:	7166      	strb	r6, [r4, #5]
1000e530:	70e2      	strb	r2, [r4, #3]
1000e532:	7220      	strb	r0, [r4, #8]
1000e534:	7261      	strb	r1, [r4, #9]
1000e536:	72a2      	strb	r2, [r4, #10]
1000e538:	72e2      	strb	r2, [r4, #11]
1000e53a:	7323      	strb	r3, [r4, #12]
1000e53c:	0a1b      	lsrs	r3, r3, #8
1000e53e:	7363      	strb	r3, [r4, #13]
1000e540:	4663      	mov	r3, ip
1000e542:	73a3      	strb	r3, [r4, #14]
1000e544:	4663      	mov	r3, ip
1000e546:	0a1b      	lsrs	r3, r3, #8
1000e548:	73e3      	strb	r3, [r4, #15]
1000e54a:	466b      	mov	r3, sp
1000e54c:	7a1b      	ldrb	r3, [r3, #8]
1000e54e:	2607      	movs	r6, #7
1000e550:	7423      	strb	r3, [r4, #16]
1000e552:	9b02      	ldr	r3, [sp, #8]
1000e554:	76a7      	strb	r7, [r4, #26]
1000e556:	0a1b      	lsrs	r3, r3, #8
1000e558:	7463      	strb	r3, [r4, #17]
1000e55a:	466b      	mov	r3, sp
1000e55c:	7b1b      	ldrb	r3, [r3, #12]
1000e55e:	74a3      	strb	r3, [r4, #18]
1000e560:	9b03      	ldr	r3, [sp, #12]
1000e562:	0a1b      	lsrs	r3, r3, #8
1000e564:	74e3      	strb	r3, [r4, #19]
1000e566:	466b      	mov	r3, sp
1000e568:	7c1b      	ldrb	r3, [r3, #16]
1000e56a:	7523      	strb	r3, [r4, #20]
1000e56c:	9b04      	ldr	r3, [sp, #16]
1000e56e:	0a1b      	lsrs	r3, r3, #8
1000e570:	7563      	strb	r3, [r4, #21]
1000e572:	466b      	mov	r3, sp
1000e574:	7d1b      	ldrb	r3, [r3, #20]
1000e576:	75a3      	strb	r3, [r4, #22]
1000e578:	9b05      	ldr	r3, [sp, #20]
1000e57a:	0a1b      	lsrs	r3, r3, #8
1000e57c:	75e3      	strb	r3, [r4, #23]
1000e57e:	466b      	mov	r3, sp
1000e580:	7e1b      	ldrb	r3, [r3, #24]
1000e582:	7623      	strb	r3, [r4, #24]
1000e584:	9b06      	ldr	r3, [sp, #24]
1000e586:	0a1b      	lsrs	r3, r3, #8
1000e588:	7663      	strb	r3, [r4, #25]
1000e58a:	0a3b      	lsrs	r3, r7, #8
1000e58c:	76e3      	strb	r3, [r4, #27]
1000e58e:	466b      	mov	r3, sp
1000e590:	791b      	ldrb	r3, [r3, #4]
1000e592:	4f14      	ldr	r7, [pc, #80]	; (1000e5e4 <gapm_start_connection_cmd_handler+0x110>)
1000e594:	7723      	strb	r3, [r4, #28]
1000e596:	9b01      	ldr	r3, [sp, #4]
1000e598:	435e      	muls	r6, r3
1000e59a:	19ae      	adds	r6, r5, r6
1000e59c:	42b5      	cmp	r5, r6
1000e59e:	d00f      	beq.n	1000e5c0 <gapm_start_connection_cmd_handler+0xec>
1000e5a0:	1c69      	adds	r1, r5, #1
1000e5a2:	1c38      	adds	r0, r7, #0
1000e5a4:	2206      	movs	r2, #6
1000e5a6:	4b10      	ldr	r3, [pc, #64]	; (1000e5e8 <gapm_start_connection_cmd_handler+0x114>)
1000e5a8:	4798      	blx	r3
1000e5aa:	2200      	movs	r2, #0
1000e5ac:	2102      	movs	r1, #2
1000e5ae:	782b      	ldrb	r3, [r5, #0]
1000e5b0:	3507      	adds	r5, #7
1000e5b2:	3b01      	subs	r3, #1
1000e5b4:	b2db      	uxtb	r3, r3
1000e5b6:	4299      	cmp	r1, r3
1000e5b8:	4152      	adcs	r2, r2
1000e5ba:	71ba      	strb	r2, [r7, #6]
1000e5bc:	3707      	adds	r7, #7
1000e5be:	e7ed      	b.n	1000e59c <gapm_start_connection_cmd_handler+0xc8>
1000e5c0:	2107      	movs	r1, #7
1000e5c2:	9b01      	ldr	r3, [sp, #4]
1000e5c4:	1c20      	adds	r0, r4, #0
1000e5c6:	4359      	muls	r1, r3
1000e5c8:	311d      	adds	r1, #29
1000e5ca:	1c0b      	adds	r3, r1, #0
1000e5cc:	3b08      	subs	r3, #8
1000e5ce:	71a3      	strb	r3, [r4, #6]
1000e5d0:	121b      	asrs	r3, r3, #8
1000e5d2:	71e3      	strb	r3, [r4, #7]
1000e5d4:	4b05      	ldr	r3, [pc, #20]	; (1000e5ec <gapm_start_connection_cmd_handler+0x118>)
1000e5d6:	4798      	blx	r3
1000e5d8:	b009      	add	sp, #36	; 0x24
1000e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5dc:	100139cc 	.word	0x100139cc
1000e5e0:	10013d3c 	.word	0x10013d3c
1000e5e4:	10013d59 	.word	0x10013d59
1000e5e8:	1000ff37 	.word	0x1000ff37
1000e5ec:	1000d479 	.word	0x1000d479

1000e5f0 <gapm_resolv_addr_cmd_handler>:
1000e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e5f2:	2314      	movs	r3, #20
1000e5f4:	4c12      	ldr	r4, [pc, #72]	; (1000e640 <gapm_resolv_addr_cmd_handler+0x50>)
1000e5f6:	1c17      	adds	r7, r2, #0
1000e5f8:	7023      	strb	r3, [r4, #0]
1000e5fa:	3b07      	subs	r3, #7
1000e5fc:	7063      	strb	r3, [r4, #1]
1000e5fe:	70a3      	strb	r3, [r4, #2]
1000e600:	2300      	movs	r3, #0
1000e602:	70e3      	strb	r3, [r4, #3]
1000e604:	4b0f      	ldr	r3, [pc, #60]	; (1000e644 <gapm_resolv_addr_cmd_handler+0x54>)
1000e606:	1c05      	adds	r5, r0, #0
1000e608:	881a      	ldrh	r2, [r3, #0]
1000e60a:	881b      	ldrh	r3, [r3, #0]
1000e60c:	4e0e      	ldr	r6, [pc, #56]	; (1000e648 <gapm_resolv_addr_cmd_handler+0x58>)
1000e60e:	0a1b      	lsrs	r3, r3, #8
1000e610:	7163      	strb	r3, [r4, #5]
1000e612:	2317      	movs	r3, #23
1000e614:	012d      	lsls	r5, r5, #4
1000e616:	7122      	strb	r2, [r4, #4]
1000e618:	7260      	strb	r0, [r4, #9]
1000e61a:	2206      	movs	r2, #6
1000e61c:	480b      	ldr	r0, [pc, #44]	; (1000e64c <gapm_resolv_addr_cmd_handler+0x5c>)
1000e61e:	7223      	strb	r3, [r4, #8]
1000e620:	47b0      	blx	r6
1000e622:	1c39      	adds	r1, r7, #0
1000e624:	1c2a      	adds	r2, r5, #0
1000e626:	480a      	ldr	r0, [pc, #40]	; (1000e650 <gapm_resolv_addr_cmd_handler+0x60>)
1000e628:	47b0      	blx	r6
1000e62a:	1c29      	adds	r1, r5, #0
1000e62c:	3110      	adds	r1, #16
1000e62e:	1c0b      	adds	r3, r1, #0
1000e630:	3b08      	subs	r3, #8
1000e632:	71a3      	strb	r3, [r4, #6]
1000e634:	121b      	asrs	r3, r3, #8
1000e636:	71e3      	strb	r3, [r4, #7]
1000e638:	1c20      	adds	r0, r4, #0
1000e63a:	4b06      	ldr	r3, [pc, #24]	; (1000e654 <gapm_resolv_addr_cmd_handler+0x64>)
1000e63c:	4798      	blx	r3
1000e63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e640:	10013d3c 	.word	0x10013d3c
1000e644:	100139cc 	.word	0x100139cc
1000e648:	1000ff37 	.word	0x1000ff37
1000e64c:	10013d46 	.word	0x10013d46
1000e650:	10013d4c 	.word	0x10013d4c
1000e654:	1000d479 	.word	0x1000d479

1000e658 <gapm_addr_solved_ind_handler>:
1000e658:	b570      	push	{r4, r5, r6, lr}
1000e65a:	1c04      	adds	r4, r0, #0
1000e65c:	1c08      	adds	r0, r1, #0
1000e65e:	1c0d      	adds	r5, r1, #0
1000e660:	4e05      	ldr	r6, [pc, #20]	; (1000e678 <gapm_addr_solved_ind_handler+0x20>)
1000e662:	1c21      	adds	r1, r4, #0
1000e664:	2206      	movs	r2, #6
1000e666:	3011      	adds	r0, #17
1000e668:	47b0      	blx	r6
1000e66a:	1c68      	adds	r0, r5, #1
1000e66c:	1da1      	adds	r1, r4, #6
1000e66e:	2210      	movs	r2, #16
1000e670:	47b0      	blx	r6
1000e672:	2300      	movs	r3, #0
1000e674:	702b      	strb	r3, [r5, #0]
1000e676:	bd70      	pop	{r4, r5, r6, pc}
1000e678:	1000ff37 	.word	0x1000ff37

1000e67c <gapm_profile_added_ind_handler>:
1000e67c:	b510      	push	{r4, lr}
1000e67e:	7843      	ldrb	r3, [r0, #1]
1000e680:	7902      	ldrb	r2, [r0, #4]
1000e682:	7944      	ldrb	r4, [r0, #5]
1000e684:	7800      	ldrb	r0, [r0, #0]
1000e686:	021b      	lsls	r3, r3, #8
1000e688:	4303      	orrs	r3, r0
1000e68a:	2b1b      	cmp	r3, #27
1000e68c:	d104      	bne.n	1000e698 <gapm_profile_added_ind_handler+0x1c>
1000e68e:	2300      	movs	r3, #0
1000e690:	700b      	strb	r3, [r1, #0]
1000e692:	0223      	lsls	r3, r4, #8
1000e694:	4313      	orrs	r3, r2
1000e696:	804b      	strh	r3, [r1, #2]
1000e698:	203b      	movs	r0, #59	; 0x3b
1000e69a:	bd10      	pop	{r4, pc}

1000e69c <gattc_read_req_ind_parser>:
1000e69c:	7843      	ldrb	r3, [r0, #1]
1000e69e:	7802      	ldrb	r2, [r0, #0]
1000e6a0:	021b      	lsls	r3, r3, #8
1000e6a2:	4313      	orrs	r3, r2
1000e6a4:	804b      	strh	r3, [r1, #2]
1000e6a6:	4770      	bx	lr

1000e6a8 <gattc_write_req_ind_parser>:
1000e6a8:	b508      	push	{r3, lr}
1000e6aa:	1c13      	adds	r3, r2, #0
1000e6ac:	0a00      	lsrs	r0, r0, #8
1000e6ae:	8010      	strh	r0, [r2, #0]
1000e6b0:	784a      	ldrb	r2, [r1, #1]
1000e6b2:	7808      	ldrb	r0, [r1, #0]
1000e6b4:	0212      	lsls	r2, r2, #8
1000e6b6:	4302      	orrs	r2, r0
1000e6b8:	805a      	strh	r2, [r3, #2]
1000e6ba:	78ca      	ldrb	r2, [r1, #3]
1000e6bc:	7888      	ldrb	r0, [r1, #2]
1000e6be:	0212      	lsls	r2, r2, #8
1000e6c0:	4302      	orrs	r2, r0
1000e6c2:	809a      	strh	r2, [r3, #4]
1000e6c4:	794a      	ldrb	r2, [r1, #5]
1000e6c6:	7908      	ldrb	r0, [r1, #4]
1000e6c8:	0212      	lsls	r2, r2, #8
1000e6ca:	4302      	orrs	r2, r0
1000e6cc:	80da      	strh	r2, [r3, #6]
1000e6ce:	3308      	adds	r3, #8
1000e6d0:	1c18      	adds	r0, r3, #0
1000e6d2:	3106      	adds	r1, #6
1000e6d4:	4b01      	ldr	r3, [pc, #4]	; (1000e6dc <gattc_write_req_ind_parser+0x34>)
1000e6d6:	4798      	blx	r3
1000e6d8:	bd08      	pop	{r3, pc}
1000e6da:	46c0      	nop			; (mov r8, r8)
1000e6dc:	1000ff37 	.word	0x1000ff37

1000e6e0 <gattc_att_info_req_parser>:
1000e6e0:	7843      	ldrb	r3, [r0, #1]
1000e6e2:	7802      	ldrb	r2, [r0, #0]
1000e6e4:	021b      	lsls	r3, r3, #8
1000e6e6:	4313      	orrs	r3, r2
1000e6e8:	800b      	strh	r3, [r1, #0]
1000e6ea:	4770      	bx	lr

1000e6ec <gattc_read_cfm>:
1000e6ec:	b538      	push	{r3, r4, r5, lr}
1000e6ee:	2514      	movs	r5, #20
1000e6f0:	1c1c      	adds	r4, r3, #0
1000e6f2:	4b14      	ldr	r3, [pc, #80]	; (1000e744 <gattc_read_cfm+0x58>)
1000e6f4:	70d9      	strb	r1, [r3, #3]
1000e6f6:	4914      	ldr	r1, [pc, #80]	; (1000e748 <gattc_read_cfm+0x5c>)
1000e6f8:	701d      	strb	r5, [r3, #0]
1000e6fa:	3d08      	subs	r5, #8
1000e6fc:	705d      	strb	r5, [r3, #1]
1000e6fe:	709d      	strb	r5, [r3, #2]
1000e700:	880d      	ldrh	r5, [r1, #0]
1000e702:	8809      	ldrh	r1, [r1, #0]
1000e704:	7218      	strb	r0, [r3, #8]
1000e706:	0a09      	lsrs	r1, r1, #8
1000e708:	7159      	strb	r1, [r3, #5]
1000e70a:	0a00      	lsrs	r0, r0, #8
1000e70c:	0a21      	lsrs	r1, r4, #8
1000e70e:	711d      	strb	r5, [r3, #4]
1000e710:	7258      	strb	r0, [r3, #9]
1000e712:	729c      	strb	r4, [r3, #10]
1000e714:	72d9      	strb	r1, [r3, #11]
1000e716:	731a      	strb	r2, [r3, #12]
1000e718:	1c1d      	adds	r5, r3, #0
1000e71a:	2c00      	cmp	r4, #0
1000e71c:	d007      	beq.n	1000e72e <gattc_read_cfm+0x42>
1000e71e:	9904      	ldr	r1, [sp, #16]
1000e720:	1c22      	adds	r2, r4, #0
1000e722:	480a      	ldr	r0, [pc, #40]	; (1000e74c <gattc_read_cfm+0x60>)
1000e724:	4b0a      	ldr	r3, [pc, #40]	; (1000e750 <gattc_read_cfm+0x64>)
1000e726:	340d      	adds	r4, #13
1000e728:	4798      	blx	r3
1000e72a:	b2a1      	uxth	r1, r4
1000e72c:	e001      	b.n	1000e732 <gattc_read_cfm+0x46>
1000e72e:	210e      	movs	r1, #14
1000e730:	735c      	strb	r4, [r3, #13]
1000e732:	1c0b      	adds	r3, r1, #0
1000e734:	3b08      	subs	r3, #8
1000e736:	71ab      	strb	r3, [r5, #6]
1000e738:	121b      	asrs	r3, r3, #8
1000e73a:	71eb      	strb	r3, [r5, #7]
1000e73c:	1c28      	adds	r0, r5, #0
1000e73e:	4b05      	ldr	r3, [pc, #20]	; (1000e754 <gattc_read_cfm+0x68>)
1000e740:	4798      	blx	r3
1000e742:	bd38      	pop	{r3, r4, r5, pc}
1000e744:	10013d3c 	.word	0x10013d3c
1000e748:	100139cc 	.word	0x100139cc
1000e74c:	10013d49 	.word	0x10013d49
1000e750:	1000ff37 	.word	0x1000ff37
1000e754:	1000d479 	.word	0x1000d479

1000e758 <gattc_write_cfm>:
1000e758:	4b0d      	ldr	r3, [pc, #52]	; (1000e790 <gattc_write_cfm+0x38>)
1000e75a:	b510      	push	{r4, lr}
1000e75c:	729a      	strb	r2, [r3, #10]
1000e75e:	2203      	movs	r2, #3
1000e760:	2416      	movs	r4, #22
1000e762:	719a      	strb	r2, [r3, #6]
1000e764:	2200      	movs	r2, #0
1000e766:	70d9      	strb	r1, [r3, #3]
1000e768:	490a      	ldr	r1, [pc, #40]	; (1000e794 <gattc_write_cfm+0x3c>)
1000e76a:	701c      	strb	r4, [r3, #0]
1000e76c:	3c0a      	subs	r4, #10
1000e76e:	705c      	strb	r4, [r3, #1]
1000e770:	709c      	strb	r4, [r3, #2]
1000e772:	880c      	ldrh	r4, [r1, #0]
1000e774:	8809      	ldrh	r1, [r1, #0]
1000e776:	7218      	strb	r0, [r3, #8]
1000e778:	0a09      	lsrs	r1, r1, #8
1000e77a:	0a00      	lsrs	r0, r0, #8
1000e77c:	711c      	strb	r4, [r3, #4]
1000e77e:	7159      	strb	r1, [r3, #5]
1000e780:	7258      	strb	r0, [r3, #9]
1000e782:	71da      	strb	r2, [r3, #7]
1000e784:	1c18      	adds	r0, r3, #0
1000e786:	210b      	movs	r1, #11
1000e788:	4b03      	ldr	r3, [pc, #12]	; (1000e798 <gattc_write_cfm+0x40>)
1000e78a:	4798      	blx	r3
1000e78c:	bd10      	pop	{r4, pc}
1000e78e:	46c0      	nop			; (mov r8, r8)
1000e790:	10013d3c 	.word	0x10013d3c
1000e794:	100139cc 	.word	0x100139cc
1000e798:	1000d479 	.word	0x1000d479

1000e79c <gattc_att_info_cfm>:
1000e79c:	b538      	push	{r3, r4, r5, lr}
1000e79e:	4c0e      	ldr	r4, [pc, #56]	; (1000e7d8 <gattc_att_info_cfm+0x3c>)
1000e7a0:	2518      	movs	r5, #24
1000e7a2:	7323      	strb	r3, [r4, #12]
1000e7a4:	2305      	movs	r3, #5
1000e7a6:	71a3      	strb	r3, [r4, #6]
1000e7a8:	2300      	movs	r3, #0
1000e7aa:	70e1      	strb	r1, [r4, #3]
1000e7ac:	490b      	ldr	r1, [pc, #44]	; (1000e7dc <gattc_att_info_cfm+0x40>)
1000e7ae:	7025      	strb	r5, [r4, #0]
1000e7b0:	3d0c      	subs	r5, #12
1000e7b2:	7065      	strb	r5, [r4, #1]
1000e7b4:	70a5      	strb	r5, [r4, #2]
1000e7b6:	880d      	ldrh	r5, [r1, #0]
1000e7b8:	8809      	ldrh	r1, [r1, #0]
1000e7ba:	7220      	strb	r0, [r4, #8]
1000e7bc:	0a09      	lsrs	r1, r1, #8
1000e7be:	0a00      	lsrs	r0, r0, #8
1000e7c0:	7161      	strb	r1, [r4, #5]
1000e7c2:	7260      	strb	r0, [r4, #9]
1000e7c4:	72a2      	strb	r2, [r4, #10]
1000e7c6:	71e3      	strb	r3, [r4, #7]
1000e7c8:	0a12      	lsrs	r2, r2, #8
1000e7ca:	1c20      	adds	r0, r4, #0
1000e7cc:	210d      	movs	r1, #13
1000e7ce:	4b04      	ldr	r3, [pc, #16]	; (1000e7e0 <gattc_att_info_cfm+0x44>)
1000e7d0:	7125      	strb	r5, [r4, #4]
1000e7d2:	72e2      	strb	r2, [r4, #11]
1000e7d4:	4798      	blx	r3
1000e7d6:	bd38      	pop	{r3, r4, r5, pc}
1000e7d8:	10013d3c 	.word	0x10013d3c
1000e7dc:	100139cc 	.word	0x100139cc
1000e7e0:	1000d479 	.word	0x1000d479

1000e7e4 <gattc_disc_cmd_handler>:
1000e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e7e6:	2603      	movs	r6, #3
1000e7e8:	ac06      	add	r4, sp, #24
1000e7ea:	1c0d      	adds	r5, r1, #0
1000e7ec:	cc02      	ldmia	r4!, {r1}
1000e7ee:	8827      	ldrh	r7, [r4, #0]
1000e7f0:	4c1a      	ldr	r4, [pc, #104]	; (1000e85c <gattc_disc_cmd_handler+0x78>)
1000e7f2:	7026      	strb	r6, [r4, #0]
1000e7f4:	3609      	adds	r6, #9
1000e7f6:	7066      	strb	r6, [r4, #1]
1000e7f8:	70a6      	strb	r6, [r4, #2]
1000e7fa:	4e19      	ldr	r6, [pc, #100]	; (1000e860 <gattc_disc_cmd_handler+0x7c>)
1000e7fc:	70e7      	strb	r7, [r4, #3]
1000e7fe:	8837      	ldrh	r7, [r6, #0]
1000e800:	8836      	ldrh	r6, [r6, #0]
1000e802:	7127      	strb	r7, [r4, #4]
1000e804:	0a36      	lsrs	r6, r6, #8
1000e806:	7166      	strb	r6, [r4, #5]
1000e808:	7220      	strb	r0, [r4, #8]
1000e80a:	2900      	cmp	r1, #0
1000e80c:	d102      	bne.n	1000e814 <gattc_disc_cmd_handler+0x30>
1000e80e:	2002      	movs	r0, #2
1000e810:	7260      	strb	r0, [r4, #9]
1000e812:	e000      	b.n	1000e816 <gattc_disc_cmd_handler+0x32>
1000e814:	7265      	strb	r5, [r4, #9]
1000e816:	4e13      	ldr	r6, [pc, #76]	; (1000e864 <gattc_disc_cmd_handler+0x80>)
1000e818:	7322      	strb	r2, [r4, #12]
1000e81a:	8830      	ldrh	r0, [r6, #0]
1000e81c:	0a12      	lsrs	r2, r2, #8
1000e81e:	0a07      	lsrs	r7, r0, #8
1000e820:	72a0      	strb	r0, [r4, #10]
1000e822:	73a3      	strb	r3, [r4, #14]
1000e824:	3001      	adds	r0, #1
1000e826:	0a1b      	lsrs	r3, r3, #8
1000e828:	72e7      	strb	r7, [r4, #11]
1000e82a:	8030      	strh	r0, [r6, #0]
1000e82c:	7362      	strb	r2, [r4, #13]
1000e82e:	73e3      	strb	r3, [r4, #15]
1000e830:	2900      	cmp	r1, #0
1000e832:	d103      	bne.n	1000e83c <gattc_disc_cmd_handler+0x58>
1000e834:	7421      	strb	r1, [r4, #16]
1000e836:	7461      	strb	r1, [r4, #17]
1000e838:	3112      	adds	r1, #18
1000e83a:	e005      	b.n	1000e848 <gattc_disc_cmd_handler+0x64>
1000e83c:	480a      	ldr	r0, [pc, #40]	; (1000e868 <gattc_disc_cmd_handler+0x84>)
1000e83e:	1c2a      	adds	r2, r5, #0
1000e840:	4b0a      	ldr	r3, [pc, #40]	; (1000e86c <gattc_disc_cmd_handler+0x88>)
1000e842:	4798      	blx	r3
1000e844:	1c29      	adds	r1, r5, #0
1000e846:	3110      	adds	r1, #16
1000e848:	1c0b      	adds	r3, r1, #0
1000e84a:	3b08      	subs	r3, #8
1000e84c:	71a3      	strb	r3, [r4, #6]
1000e84e:	121b      	asrs	r3, r3, #8
1000e850:	71e3      	strb	r3, [r4, #7]
1000e852:	1c20      	adds	r0, r4, #0
1000e854:	4b06      	ldr	r3, [pc, #24]	; (1000e870 <gattc_disc_cmd_handler+0x8c>)
1000e856:	4798      	blx	r3
1000e858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e85a:	46c0      	nop			; (mov r8, r8)
1000e85c:	10013d3c 	.word	0x10013d3c
1000e860:	100139cc 	.word	0x100139cc
1000e864:	10012d42 	.word	0x10012d42
1000e868:	10013d4c 	.word	0x10013d4c
1000e86c:	1000ff37 	.word	0x1000ff37
1000e870:	1000d479 	.word	0x1000d479

1000e874 <gattc_event_cfm_handler>:
1000e874:	220e      	movs	r2, #14
1000e876:	b508      	push	{r3, lr}
1000e878:	4b0b      	ldr	r3, [pc, #44]	; (1000e8a8 <gattc_event_cfm_handler+0x34>)
1000e87a:	701a      	strb	r2, [r3, #0]
1000e87c:	3a02      	subs	r2, #2
1000e87e:	705a      	strb	r2, [r3, #1]
1000e880:	709a      	strb	r2, [r3, #2]
1000e882:	4a0a      	ldr	r2, [pc, #40]	; (1000e8ac <gattc_event_cfm_handler+0x38>)
1000e884:	70d8      	strb	r0, [r3, #3]
1000e886:	8810      	ldrh	r0, [r2, #0]
1000e888:	8812      	ldrh	r2, [r2, #0]
1000e88a:	7219      	strb	r1, [r3, #8]
1000e88c:	0a12      	lsrs	r2, r2, #8
1000e88e:	715a      	strb	r2, [r3, #5]
1000e890:	2202      	movs	r2, #2
1000e892:	719a      	strb	r2, [r3, #6]
1000e894:	2200      	movs	r2, #0
1000e896:	0a09      	lsrs	r1, r1, #8
1000e898:	7118      	strb	r0, [r3, #4]
1000e89a:	7259      	strb	r1, [r3, #9]
1000e89c:	71da      	strb	r2, [r3, #7]
1000e89e:	1c18      	adds	r0, r3, #0
1000e8a0:	210a      	movs	r1, #10
1000e8a2:	4b03      	ldr	r3, [pc, #12]	; (1000e8b0 <gattc_event_cfm_handler+0x3c>)
1000e8a4:	4798      	blx	r3
1000e8a6:	bd08      	pop	{r3, pc}
1000e8a8:	10013d3c 	.word	0x10013d3c
1000e8ac:	100139cc 	.word	0x100139cc
1000e8b0:	1000d479 	.word	0x1000d479

1000e8b4 <gattc_disc_svc_ind_parser>:
1000e8b4:	b570      	push	{r4, r5, r6, lr}
1000e8b6:	1c15      	adds	r5, r2, #0
1000e8b8:	0a00      	lsrs	r0, r0, #8
1000e8ba:	8010      	strh	r0, [r2, #0]
1000e8bc:	784b      	ldrb	r3, [r1, #1]
1000e8be:	780a      	ldrb	r2, [r1, #0]
1000e8c0:	021b      	lsls	r3, r3, #8
1000e8c2:	4313      	orrs	r3, r2
1000e8c4:	806b      	strh	r3, [r5, #2]
1000e8c6:	78cb      	ldrb	r3, [r1, #3]
1000e8c8:	788a      	ldrb	r2, [r1, #2]
1000e8ca:	021b      	lsls	r3, r3, #8
1000e8cc:	4313      	orrs	r3, r2
1000e8ce:	80ab      	strh	r3, [r5, #4]
1000e8d0:	790e      	ldrb	r6, [r1, #4]
1000e8d2:	4b05      	ldr	r3, [pc, #20]	; (1000e8e8 <gattc_disc_svc_ind_parser+0x34>)
1000e8d4:	1c30      	adds	r0, r6, #0
1000e8d6:	1c0c      	adds	r4, r1, #0
1000e8d8:	4798      	blx	r3
1000e8da:	1c32      	adds	r2, r6, #0
1000e8dc:	71a8      	strb	r0, [r5, #6]
1000e8de:	1d61      	adds	r1, r4, #5
1000e8e0:	1de8      	adds	r0, r5, #7
1000e8e2:	4b02      	ldr	r3, [pc, #8]	; (1000e8ec <gattc_disc_svc_ind_parser+0x38>)
1000e8e4:	4798      	blx	r3
1000e8e6:	bd70      	pop	{r4, r5, r6, pc}
1000e8e8:	1000ce61 	.word	0x1000ce61
1000e8ec:	1000ff37 	.word	0x1000ff37

1000e8f0 <gattc_disc_svc_incl_ind_parser>:
1000e8f0:	b570      	push	{r4, r5, r6, lr}
1000e8f2:	1c15      	adds	r5, r2, #0
1000e8f4:	0a00      	lsrs	r0, r0, #8
1000e8f6:	8010      	strh	r0, [r2, #0]
1000e8f8:	784b      	ldrb	r3, [r1, #1]
1000e8fa:	780a      	ldrb	r2, [r1, #0]
1000e8fc:	021b      	lsls	r3, r3, #8
1000e8fe:	4313      	orrs	r3, r2
1000e900:	806b      	strh	r3, [r5, #2]
1000e902:	78cb      	ldrb	r3, [r1, #3]
1000e904:	788a      	ldrb	r2, [r1, #2]
1000e906:	021b      	lsls	r3, r3, #8
1000e908:	4313      	orrs	r3, r2
1000e90a:	80ab      	strh	r3, [r5, #4]
1000e90c:	794b      	ldrb	r3, [r1, #5]
1000e90e:	790a      	ldrb	r2, [r1, #4]
1000e910:	021b      	lsls	r3, r3, #8
1000e912:	4313      	orrs	r3, r2
1000e914:	80eb      	strh	r3, [r5, #6]
1000e916:	798e      	ldrb	r6, [r1, #6]
1000e918:	4b05      	ldr	r3, [pc, #20]	; (1000e930 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e91a:	1c30      	adds	r0, r6, #0
1000e91c:	1c0c      	adds	r4, r1, #0
1000e91e:	4798      	blx	r3
1000e920:	7228      	strb	r0, [r5, #8]
1000e922:	1c28      	adds	r0, r5, #0
1000e924:	1c32      	adds	r2, r6, #0
1000e926:	1de1      	adds	r1, r4, #7
1000e928:	4b02      	ldr	r3, [pc, #8]	; (1000e934 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e92a:	3009      	adds	r0, #9
1000e92c:	4798      	blx	r3
1000e92e:	bd70      	pop	{r4, r5, r6, pc}
1000e930:	1000ce61 	.word	0x1000ce61
1000e934:	1000ff37 	.word	0x1000ff37

1000e938 <gattc_disc_char_ind_parser>:
1000e938:	b570      	push	{r4, r5, r6, lr}
1000e93a:	1c15      	adds	r5, r2, #0
1000e93c:	0a00      	lsrs	r0, r0, #8
1000e93e:	8010      	strh	r0, [r2, #0]
1000e940:	784b      	ldrb	r3, [r1, #1]
1000e942:	780a      	ldrb	r2, [r1, #0]
1000e944:	021b      	lsls	r3, r3, #8
1000e946:	4313      	orrs	r3, r2
1000e948:	806b      	strh	r3, [r5, #2]
1000e94a:	78cb      	ldrb	r3, [r1, #3]
1000e94c:	788a      	ldrb	r2, [r1, #2]
1000e94e:	021b      	lsls	r3, r3, #8
1000e950:	4313      	orrs	r3, r2
1000e952:	80ab      	strh	r3, [r5, #4]
1000e954:	790b      	ldrb	r3, [r1, #4]
1000e956:	1c0c      	adds	r4, r1, #0
1000e958:	71ab      	strb	r3, [r5, #6]
1000e95a:	794e      	ldrb	r6, [r1, #5]
1000e95c:	4b05      	ldr	r3, [pc, #20]	; (1000e974 <gattc_disc_char_ind_parser+0x3c>)
1000e95e:	1c30      	adds	r0, r6, #0
1000e960:	4798      	blx	r3
1000e962:	71e8      	strb	r0, [r5, #7]
1000e964:	1c28      	adds	r0, r5, #0
1000e966:	1c32      	adds	r2, r6, #0
1000e968:	1da1      	adds	r1, r4, #6
1000e96a:	4b03      	ldr	r3, [pc, #12]	; (1000e978 <gattc_disc_char_ind_parser+0x40>)
1000e96c:	3008      	adds	r0, #8
1000e96e:	4798      	blx	r3
1000e970:	bd70      	pop	{r4, r5, r6, pc}
1000e972:	46c0      	nop			; (mov r8, r8)
1000e974:	1000ce61 	.word	0x1000ce61
1000e978:	1000ff37 	.word	0x1000ff37

1000e97c <gattc_disc_char_desc_ind_parser>:
1000e97c:	b570      	push	{r4, r5, r6, lr}
1000e97e:	1c15      	adds	r5, r2, #0
1000e980:	0a00      	lsrs	r0, r0, #8
1000e982:	8010      	strh	r0, [r2, #0]
1000e984:	784b      	ldrb	r3, [r1, #1]
1000e986:	780a      	ldrb	r2, [r1, #0]
1000e988:	021b      	lsls	r3, r3, #8
1000e98a:	4313      	orrs	r3, r2
1000e98c:	806b      	strh	r3, [r5, #2]
1000e98e:	788e      	ldrb	r6, [r1, #2]
1000e990:	4b05      	ldr	r3, [pc, #20]	; (1000e9a8 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e992:	1c30      	adds	r0, r6, #0
1000e994:	1c0c      	adds	r4, r1, #0
1000e996:	4798      	blx	r3
1000e998:	1c32      	adds	r2, r6, #0
1000e99a:	7128      	strb	r0, [r5, #4]
1000e99c:	1ce1      	adds	r1, r4, #3
1000e99e:	1d68      	adds	r0, r5, #5
1000e9a0:	4b02      	ldr	r3, [pc, #8]	; (1000e9ac <gattc_disc_char_desc_ind_parser+0x30>)
1000e9a2:	4798      	blx	r3
1000e9a4:	bd70      	pop	{r4, r5, r6, pc}
1000e9a6:	46c0      	nop			; (mov r8, r8)
1000e9a8:	1000ce61 	.word	0x1000ce61
1000e9ac:	1000ff37 	.word	0x1000ff37

1000e9b0 <gattc_event_ind_and_notification_parser>:
1000e9b0:	b510      	push	{r4, lr}
1000e9b2:	780c      	ldrb	r4, [r1, #0]
1000e9b4:	1c13      	adds	r3, r2, #0
1000e9b6:	2c12      	cmp	r4, #18
1000e9b8:	d10e      	bne.n	1000e9d8 <gattc_event_ind_and_notification_parser+0x28>
1000e9ba:	0a00      	lsrs	r0, r0, #8
1000e9bc:	8010      	strh	r0, [r2, #0]
1000e9be:	788a      	ldrb	r2, [r1, #2]
1000e9c0:	709a      	strb	r2, [r3, #2]
1000e9c2:	7948      	ldrb	r0, [r1, #5]
1000e9c4:	790c      	ldrb	r4, [r1, #4]
1000e9c6:	0200      	lsls	r0, r0, #8
1000e9c8:	4320      	orrs	r0, r4
1000e9ca:	8098      	strh	r0, [r3, #4]
1000e9cc:	3106      	adds	r1, #6
1000e9ce:	1d98      	adds	r0, r3, #6
1000e9d0:	4b0b      	ldr	r3, [pc, #44]	; (1000ea00 <gattc_event_ind_and_notification_parser+0x50>)
1000e9d2:	4798      	blx	r3
1000e9d4:	221b      	movs	r2, #27
1000e9d6:	e010      	b.n	1000e9fa <gattc_event_ind_and_notification_parser+0x4a>
1000e9d8:	2200      	movs	r2, #0
1000e9da:	2c13      	cmp	r4, #19
1000e9dc:	d10d      	bne.n	1000e9fa <gattc_event_ind_and_notification_parser+0x4a>
1000e9de:	0a00      	lsrs	r0, r0, #8
1000e9e0:	8018      	strh	r0, [r3, #0]
1000e9e2:	788a      	ldrb	r2, [r1, #2]
1000e9e4:	709a      	strb	r2, [r3, #2]
1000e9e6:	7908      	ldrb	r0, [r1, #4]
1000e9e8:	78cc      	ldrb	r4, [r1, #3]
1000e9ea:	0200      	lsls	r0, r0, #8
1000e9ec:	4320      	orrs	r0, r4
1000e9ee:	8098      	strh	r0, [r3, #4]
1000e9f0:	3106      	adds	r1, #6
1000e9f2:	1d98      	adds	r0, r3, #6
1000e9f4:	4b02      	ldr	r3, [pc, #8]	; (1000ea00 <gattc_event_ind_and_notification_parser+0x50>)
1000e9f6:	4798      	blx	r3
1000e9f8:	221c      	movs	r2, #28
1000e9fa:	1c10      	adds	r0, r2, #0
1000e9fc:	bd10      	pop	{r4, pc}
1000e9fe:	46c0      	nop			; (mov r8, r8)
1000ea00:	1000ff37 	.word	0x1000ff37

1000ea04 <gattc_complete_evt_handler>:
1000ea04:	b500      	push	{lr}
1000ea06:	0a00      	lsrs	r0, r0, #8
1000ea08:	8010      	strh	r0, [r2, #0]
1000ea0a:	7808      	ldrb	r0, [r1, #0]
1000ea0c:	7090      	strb	r0, [r2, #2]
1000ea0e:	784b      	ldrb	r3, [r1, #1]
1000ea10:	3801      	subs	r0, #1
1000ea12:	70d3      	strb	r3, [r2, #3]
1000ea14:	2813      	cmp	r0, #19
1000ea16:	d82c      	bhi.n	1000ea72 <gattc_complete_evt_handler+0x6e>
1000ea18:	f000 f914 	bl	1000ec44 <__gnu_thumb1_case_uqi>
1000ea1c:	0a0a0a0c 	.word	0x0a0a0a0c
1000ea20:	210a0a0a 	.word	0x210a0a0a
1000ea24:	111f2121 	.word	0x111f2121
1000ea28:	2b111111 	.word	0x2b111111
1000ea2c:	2919132b 	.word	0x2919132b
1000ea30:	2017      	movs	r0, #23
1000ea32:	e01f      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea34:	2024      	movs	r0, #36	; 0x24
1000ea36:	2b00      	cmp	r3, #0
1000ea38:	d11c      	bne.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea3a:	3017      	adds	r0, #23
1000ea3c:	e01a      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea3e:	2025      	movs	r0, #37	; 0x25
1000ea40:	e018      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea42:	4a0d      	ldr	r2, [pc, #52]	; (1000ea78 <gattc_complete_evt_handler+0x74>)
1000ea44:	201d      	movs	r0, #29
1000ea46:	6813      	ldr	r3, [r2, #0]
1000ea48:	3b01      	subs	r3, #1
1000ea4a:	6013      	str	r3, [r2, #0]
1000ea4c:	e012      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea4e:	4a0a      	ldr	r2, [pc, #40]	; (1000ea78 <gattc_complete_evt_handler+0x74>)
1000ea50:	201e      	movs	r0, #30
1000ea52:	6813      	ldr	r3, [r2, #0]
1000ea54:	3b01      	subs	r3, #1
1000ea56:	6013      	str	r3, [r2, #0]
1000ea58:	e00c      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea5a:	2019      	movs	r0, #25
1000ea5c:	e00a      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea5e:	203b      	movs	r0, #59	; 0x3b
1000ea60:	2b00      	cmp	r3, #0
1000ea62:	d007      	beq.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea64:	2182      	movs	r1, #130	; 0x82
1000ea66:	0089      	lsls	r1, r1, #2
1000ea68:	5453      	strb	r3, [r2, r1]
1000ea6a:	3823      	subs	r0, #35	; 0x23
1000ea6c:	e002      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea6e:	2021      	movs	r0, #33	; 0x21
1000ea70:	e000      	b.n	1000ea74 <gattc_complete_evt_handler+0x70>
1000ea72:	2000      	movs	r0, #0
1000ea74:	bd00      	pop	{pc}
1000ea76:	46c0      	nop			; (mov r8, r8)
1000ea78:	10012d48 	.word	0x10012d48

1000ea7c <gattc_event_mtu_changed_ind_parser>:
1000ea7c:	0a00      	lsrs	r0, r0, #8
1000ea7e:	8010      	strh	r0, [r2, #0]
1000ea80:	784b      	ldrb	r3, [r1, #1]
1000ea82:	7809      	ldrb	r1, [r1, #0]
1000ea84:	021b      	lsls	r3, r3, #8
1000ea86:	430b      	orrs	r3, r1
1000ea88:	8053      	strh	r3, [r2, #2]
1000ea8a:	4770      	bx	lr

1000ea8c <gattc_read_ind_parser>:
1000ea8c:	0a00      	lsrs	r0, r0, #8
1000ea8e:	b508      	push	{r3, lr}
1000ea90:	8010      	strh	r0, [r2, #0]
1000ea92:	1c13      	adds	r3, r2, #0
1000ea94:	2282      	movs	r2, #130	; 0x82
1000ea96:	2000      	movs	r0, #0
1000ea98:	0092      	lsls	r2, r2, #2
1000ea9a:	5498      	strb	r0, [r3, r2]
1000ea9c:	784a      	ldrb	r2, [r1, #1]
1000ea9e:	7808      	ldrb	r0, [r1, #0]
1000eaa0:	0212      	lsls	r2, r2, #8
1000eaa2:	4302      	orrs	r2, r0
1000eaa4:	805a      	strh	r2, [r3, #2]
1000eaa6:	78ca      	ldrb	r2, [r1, #3]
1000eaa8:	7888      	ldrb	r0, [r1, #2]
1000eaaa:	0212      	lsls	r2, r2, #8
1000eaac:	4302      	orrs	r2, r0
1000eaae:	80da      	strh	r2, [r3, #6]
1000eab0:	794a      	ldrb	r2, [r1, #5]
1000eab2:	7908      	ldrb	r0, [r1, #4]
1000eab4:	0212      	lsls	r2, r2, #8
1000eab6:	4302      	orrs	r2, r0
1000eab8:	809a      	strh	r2, [r3, #4]
1000eaba:	3308      	adds	r3, #8
1000eabc:	1c18      	adds	r0, r3, #0
1000eabe:	3106      	adds	r1, #6
1000eac0:	4b01      	ldr	r3, [pc, #4]	; (1000eac8 <gattc_read_ind_parser+0x3c>)
1000eac2:	4798      	blx	r3
1000eac4:	bd08      	pop	{r3, pc}
1000eac6:	46c0      	nop			; (mov r8, r8)
1000eac8:	1000ff37 	.word	0x1000ff37

1000eacc <gattc_svc_changed_cfg_ind_parser>:
1000eacc:	0a00      	lsrs	r0, r0, #8
1000eace:	8010      	strh	r0, [r2, #0]
1000ead0:	784b      	ldrb	r3, [r1, #1]
1000ead2:	7809      	ldrb	r1, [r1, #0]
1000ead4:	021b      	lsls	r3, r3, #8
1000ead6:	430b      	orrs	r3, r1
1000ead8:	8053      	strh	r3, [r2, #2]
1000eada:	4770      	bx	lr

1000eadc <init_gattc_task_module>:
1000eadc:	2300      	movs	r3, #0
1000eade:	4a02      	ldr	r2, [pc, #8]	; (1000eae8 <init_gattc_task_module+0xc>)
1000eae0:	8013      	strh	r3, [r2, #0]
1000eae2:	4a02      	ldr	r2, [pc, #8]	; (1000eaec <init_gattc_task_module+0x10>)
1000eae4:	8013      	strh	r3, [r2, #0]
1000eae6:	4770      	bx	lr
1000eae8:	10012d42 	.word	0x10012d42
1000eaec:	10012d44 	.word	0x10012d44

1000eaf0 <gattm_att_set_value_req_handler>:
1000eaf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eaf2:	466b      	mov	r3, sp
1000eaf4:	1dde      	adds	r6, r3, #7
1000eaf6:	2300      	movs	r3, #0
1000eaf8:	1c0d      	adds	r5, r1, #0
1000eafa:	210c      	movs	r1, #12
1000eafc:	270b      	movs	r7, #11
1000eafe:	4c17      	ldr	r4, [pc, #92]	; (1000eb5c <gattm_att_set_value_req_handler+0x6c>)
1000eb00:	7033      	strb	r3, [r6, #0]
1000eb02:	70e3      	strb	r3, [r4, #3]
1000eb04:	4b16      	ldr	r3, [pc, #88]	; (1000eb60 <gattm_att_set_value_req_handler+0x70>)
1000eb06:	7021      	strb	r1, [r4, #0]
1000eb08:	8819      	ldrh	r1, [r3, #0]
1000eb0a:	881b      	ldrh	r3, [r3, #0]
1000eb0c:	7220      	strb	r0, [r4, #8]
1000eb0e:	0a1b      	lsrs	r3, r3, #8
1000eb10:	7163      	strb	r3, [r4, #5]
1000eb12:	0a00      	lsrs	r0, r0, #8
1000eb14:	0a2b      	lsrs	r3, r5, #8
1000eb16:	7121      	strb	r1, [r4, #4]
1000eb18:	7260      	strb	r0, [r4, #9]
1000eb1a:	1c11      	adds	r1, r2, #0
1000eb1c:	72a5      	strb	r5, [r4, #10]
1000eb1e:	1c2a      	adds	r2, r5, #0
1000eb20:	72e3      	strb	r3, [r4, #11]
1000eb22:	350c      	adds	r5, #12
1000eb24:	4b0f      	ldr	r3, [pc, #60]	; (1000eb64 <gattm_att_set_value_req_handler+0x74>)
1000eb26:	4810      	ldr	r0, [pc, #64]	; (1000eb68 <gattm_att_set_value_req_handler+0x78>)
1000eb28:	7067      	strb	r7, [r4, #1]
1000eb2a:	70a7      	strb	r7, [r4, #2]
1000eb2c:	4798      	blx	r3
1000eb2e:	b2a9      	uxth	r1, r5
1000eb30:	4b0e      	ldr	r3, [pc, #56]	; (1000eb6c <gattm_att_set_value_req_handler+0x7c>)
1000eb32:	4d0f      	ldr	r5, [pc, #60]	; (1000eb70 <gattm_att_set_value_req_handler+0x80>)
1000eb34:	1c20      	adds	r0, r4, #0
1000eb36:	802b      	strh	r3, [r5, #0]
1000eb38:	1c0b      	adds	r3, r1, #0
1000eb3a:	3b08      	subs	r3, #8
1000eb3c:	71a3      	strb	r3, [r4, #6]
1000eb3e:	121b      	asrs	r3, r3, #8
1000eb40:	71e3      	strb	r3, [r4, #7]
1000eb42:	4b0c      	ldr	r3, [pc, #48]	; (1000eb74 <gattm_att_set_value_req_handler+0x84>)
1000eb44:	80af      	strh	r7, [r5, #4]
1000eb46:	4798      	blx	r3
1000eb48:	1c30      	adds	r0, r6, #0
1000eb4a:	4b0b      	ldr	r3, [pc, #44]	; (1000eb78 <gattm_att_set_value_req_handler+0x88>)
1000eb4c:	4798      	blx	r3
1000eb4e:	7833      	ldrb	r3, [r6, #0]
1000eb50:	20e2      	movs	r0, #226	; 0xe2
1000eb52:	2b00      	cmp	r3, #0
1000eb54:	d101      	bne.n	1000eb5a <gattm_att_set_value_req_handler+0x6a>
1000eb56:	68ab      	ldr	r3, [r5, #8]
1000eb58:	7898      	ldrb	r0, [r3, #2]
1000eb5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000eb5c:	10013d3c 	.word	0x10013d3c
1000eb60:	100139cc 	.word	0x100139cc
1000eb64:	1000ff37 	.word	0x1000ff37
1000eb68:	10013d48 	.word	0x10013d48
1000eb6c:	00000b0d 	.word	0x00000b0d
1000eb70:	100139c0 	.word	0x100139c0
1000eb74:	1000d479 	.word	0x1000d479
1000eb78:	1000d4d5 	.word	0x1000d4d5

1000eb7c <gattm_att_get_value_req_handler>:
1000eb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb7e:	b085      	sub	sp, #20
1000eb80:	9201      	str	r2, [sp, #4]
1000eb82:	220a      	movs	r2, #10
1000eb84:	1c04      	adds	r4, r0, #0
1000eb86:	481d      	ldr	r0, [pc, #116]	; (1000ebfc <gattm_att_get_value_req_handler+0x80>)
1000eb88:	ab02      	add	r3, sp, #8
1000eb8a:	1dde      	adds	r6, r3, #7
1000eb8c:	7002      	strb	r2, [r0, #0]
1000eb8e:	2300      	movs	r3, #0
1000eb90:	220b      	movs	r2, #11
1000eb92:	4d1b      	ldr	r5, [pc, #108]	; (1000ec00 <gattm_att_get_value_req_handler+0x84>)
1000eb94:	1c0f      	adds	r7, r1, #0
1000eb96:	8829      	ldrh	r1, [r5, #0]
1000eb98:	882d      	ldrh	r5, [r5, #0]
1000eb9a:	7101      	strb	r1, [r0, #4]
1000eb9c:	0a2d      	lsrs	r5, r5, #8
1000eb9e:	7145      	strb	r5, [r0, #5]
1000eba0:	0a25      	lsrs	r5, r4, #8
1000eba2:	7245      	strb	r5, [r0, #9]
1000eba4:	4917      	ldr	r1, [pc, #92]	; (1000ec04 <gattm_att_get_value_req_handler+0x88>)
1000eba6:	4d18      	ldr	r5, [pc, #96]	; (1000ec08 <gattm_att_get_value_req_handler+0x8c>)
1000eba8:	7033      	strb	r3, [r6, #0]
1000ebaa:	7042      	strb	r2, [r0, #1]
1000ebac:	7082      	strb	r2, [r0, #2]
1000ebae:	70c3      	strb	r3, [r0, #3]
1000ebb0:	8029      	strh	r1, [r5, #0]
1000ebb2:	80aa      	strh	r2, [r5, #4]
1000ebb4:	71c3      	strb	r3, [r0, #7]
1000ebb6:	3a09      	subs	r2, #9
1000ebb8:	210a      	movs	r1, #10
1000ebba:	4b14      	ldr	r3, [pc, #80]	; (1000ec0c <gattm_att_get_value_req_handler+0x90>)
1000ebbc:	7182      	strb	r2, [r0, #6]
1000ebbe:	7204      	strb	r4, [r0, #8]
1000ebc0:	4798      	blx	r3
1000ebc2:	1c30      	adds	r0, r6, #0
1000ebc4:	4b12      	ldr	r3, [pc, #72]	; (1000ec10 <gattm_att_get_value_req_handler+0x94>)
1000ebc6:	4798      	blx	r3
1000ebc8:	7833      	ldrb	r3, [r6, #0]
1000ebca:	20e2      	movs	r0, #226	; 0xe2
1000ebcc:	2b00      	cmp	r3, #0
1000ebce:	d112      	bne.n	1000ebf6 <gattm_att_get_value_req_handler+0x7a>
1000ebd0:	68a9      	ldr	r1, [r5, #8]
1000ebd2:	9801      	ldr	r0, [sp, #4]
1000ebd4:	784d      	ldrb	r5, [r1, #1]
1000ebd6:	780b      	ldrb	r3, [r1, #0]
1000ebd8:	78ca      	ldrb	r2, [r1, #3]
1000ebda:	022d      	lsls	r5, r5, #8
1000ebdc:	431d      	orrs	r5, r3
1000ebde:	788b      	ldrb	r3, [r1, #2]
1000ebe0:	0212      	lsls	r2, r2, #8
1000ebe2:	431a      	orrs	r2, r3
1000ebe4:	803a      	strh	r2, [r7, #0]
1000ebe6:	790e      	ldrb	r6, [r1, #4]
1000ebe8:	4b0a      	ldr	r3, [pc, #40]	; (1000ec14 <gattm_att_get_value_req_handler+0x98>)
1000ebea:	3105      	adds	r1, #5
1000ebec:	4798      	blx	r3
1000ebee:	20e2      	movs	r0, #226	; 0xe2
1000ebf0:	42ac      	cmp	r4, r5
1000ebf2:	d100      	bne.n	1000ebf6 <gattm_att_get_value_req_handler+0x7a>
1000ebf4:	1c30      	adds	r0, r6, #0
1000ebf6:	b005      	add	sp, #20
1000ebf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebfa:	46c0      	nop			; (mov r8, r8)
1000ebfc:	10013d3c 	.word	0x10013d3c
1000ec00:	100139cc 	.word	0x100139cc
1000ec04:	00000b0b 	.word	0x00000b0b
1000ec08:	100139c0 	.word	0x100139c0
1000ec0c:	1000d479 	.word	0x1000d479
1000ec10:	1000d4d5 	.word	0x1000d4d5
1000ec14:	1000ff37 	.word	0x1000ff37

1000ec18 <htpt_enable_rsp_handler>:
1000ec18:	780b      	ldrb	r3, [r1, #0]
1000ec1a:	7013      	strb	r3, [r2, #0]
1000ec1c:	784b      	ldrb	r3, [r1, #1]
1000ec1e:	7053      	strb	r3, [r2, #1]
1000ec20:	4770      	bx	lr

1000ec22 <htpt_temp_send_rsp_handler>:
1000ec22:	780b      	ldrb	r3, [r1, #0]
1000ec24:	7013      	strb	r3, [r2, #0]
1000ec26:	4770      	bx	lr

1000ec28 <htpt_meas_intv_upd_rsp_handler>:
1000ec28:	780b      	ldrb	r3, [r1, #0]
1000ec2a:	7013      	strb	r3, [r2, #0]
1000ec2c:	4770      	bx	lr

1000ec2e <htpt_meas_intv_chg_req_ind_handler>:
1000ec2e:	78cb      	ldrb	r3, [r1, #3]
1000ec30:	7889      	ldrb	r1, [r1, #2]
1000ec32:	021b      	lsls	r3, r3, #8
1000ec34:	430b      	orrs	r3, r1
1000ec36:	8013      	strh	r3, [r2, #0]
1000ec38:	4770      	bx	lr

1000ec3a <htpt_cfg_indntf_ind_handler>:
1000ec3a:	780b      	ldrb	r3, [r1, #0]
1000ec3c:	7013      	strb	r3, [r2, #0]
1000ec3e:	784b      	ldrb	r3, [r1, #1]
1000ec40:	7053      	strb	r3, [r2, #1]
1000ec42:	4770      	bx	lr

1000ec44 <__gnu_thumb1_case_uqi>:
1000ec44:	b402      	push	{r1}
1000ec46:	4671      	mov	r1, lr
1000ec48:	0849      	lsrs	r1, r1, #1
1000ec4a:	0049      	lsls	r1, r1, #1
1000ec4c:	5c09      	ldrb	r1, [r1, r0]
1000ec4e:	0049      	lsls	r1, r1, #1
1000ec50:	448e      	add	lr, r1
1000ec52:	bc02      	pop	{r1}
1000ec54:	4770      	bx	lr
1000ec56:	46c0      	nop			; (mov r8, r8)

1000ec58 <__aeabi_uidiv>:
1000ec58:	2200      	movs	r2, #0
1000ec5a:	0843      	lsrs	r3, r0, #1
1000ec5c:	428b      	cmp	r3, r1
1000ec5e:	d374      	bcc.n	1000ed4a <__aeabi_uidiv+0xf2>
1000ec60:	0903      	lsrs	r3, r0, #4
1000ec62:	428b      	cmp	r3, r1
1000ec64:	d35f      	bcc.n	1000ed26 <__aeabi_uidiv+0xce>
1000ec66:	0a03      	lsrs	r3, r0, #8
1000ec68:	428b      	cmp	r3, r1
1000ec6a:	d344      	bcc.n	1000ecf6 <__aeabi_uidiv+0x9e>
1000ec6c:	0b03      	lsrs	r3, r0, #12
1000ec6e:	428b      	cmp	r3, r1
1000ec70:	d328      	bcc.n	1000ecc4 <__aeabi_uidiv+0x6c>
1000ec72:	0c03      	lsrs	r3, r0, #16
1000ec74:	428b      	cmp	r3, r1
1000ec76:	d30d      	bcc.n	1000ec94 <__aeabi_uidiv+0x3c>
1000ec78:	22ff      	movs	r2, #255	; 0xff
1000ec7a:	0209      	lsls	r1, r1, #8
1000ec7c:	ba12      	rev	r2, r2
1000ec7e:	0c03      	lsrs	r3, r0, #16
1000ec80:	428b      	cmp	r3, r1
1000ec82:	d302      	bcc.n	1000ec8a <__aeabi_uidiv+0x32>
1000ec84:	1212      	asrs	r2, r2, #8
1000ec86:	0209      	lsls	r1, r1, #8
1000ec88:	d065      	beq.n	1000ed56 <__aeabi_uidiv+0xfe>
1000ec8a:	0b03      	lsrs	r3, r0, #12
1000ec8c:	428b      	cmp	r3, r1
1000ec8e:	d319      	bcc.n	1000ecc4 <__aeabi_uidiv+0x6c>
1000ec90:	e000      	b.n	1000ec94 <__aeabi_uidiv+0x3c>
1000ec92:	0a09      	lsrs	r1, r1, #8
1000ec94:	0bc3      	lsrs	r3, r0, #15
1000ec96:	428b      	cmp	r3, r1
1000ec98:	d301      	bcc.n	1000ec9e <__aeabi_uidiv+0x46>
1000ec9a:	03cb      	lsls	r3, r1, #15
1000ec9c:	1ac0      	subs	r0, r0, r3
1000ec9e:	4152      	adcs	r2, r2
1000eca0:	0b83      	lsrs	r3, r0, #14
1000eca2:	428b      	cmp	r3, r1
1000eca4:	d301      	bcc.n	1000ecaa <__aeabi_uidiv+0x52>
1000eca6:	038b      	lsls	r3, r1, #14
1000eca8:	1ac0      	subs	r0, r0, r3
1000ecaa:	4152      	adcs	r2, r2
1000ecac:	0b43      	lsrs	r3, r0, #13
1000ecae:	428b      	cmp	r3, r1
1000ecb0:	d301      	bcc.n	1000ecb6 <__aeabi_uidiv+0x5e>
1000ecb2:	034b      	lsls	r3, r1, #13
1000ecb4:	1ac0      	subs	r0, r0, r3
1000ecb6:	4152      	adcs	r2, r2
1000ecb8:	0b03      	lsrs	r3, r0, #12
1000ecba:	428b      	cmp	r3, r1
1000ecbc:	d301      	bcc.n	1000ecc2 <__aeabi_uidiv+0x6a>
1000ecbe:	030b      	lsls	r3, r1, #12
1000ecc0:	1ac0      	subs	r0, r0, r3
1000ecc2:	4152      	adcs	r2, r2
1000ecc4:	0ac3      	lsrs	r3, r0, #11
1000ecc6:	428b      	cmp	r3, r1
1000ecc8:	d301      	bcc.n	1000ecce <__aeabi_uidiv+0x76>
1000ecca:	02cb      	lsls	r3, r1, #11
1000eccc:	1ac0      	subs	r0, r0, r3
1000ecce:	4152      	adcs	r2, r2
1000ecd0:	0a83      	lsrs	r3, r0, #10
1000ecd2:	428b      	cmp	r3, r1
1000ecd4:	d301      	bcc.n	1000ecda <__aeabi_uidiv+0x82>
1000ecd6:	028b      	lsls	r3, r1, #10
1000ecd8:	1ac0      	subs	r0, r0, r3
1000ecda:	4152      	adcs	r2, r2
1000ecdc:	0a43      	lsrs	r3, r0, #9
1000ecde:	428b      	cmp	r3, r1
1000ece0:	d301      	bcc.n	1000ece6 <__aeabi_uidiv+0x8e>
1000ece2:	024b      	lsls	r3, r1, #9
1000ece4:	1ac0      	subs	r0, r0, r3
1000ece6:	4152      	adcs	r2, r2
1000ece8:	0a03      	lsrs	r3, r0, #8
1000ecea:	428b      	cmp	r3, r1
1000ecec:	d301      	bcc.n	1000ecf2 <__aeabi_uidiv+0x9a>
1000ecee:	020b      	lsls	r3, r1, #8
1000ecf0:	1ac0      	subs	r0, r0, r3
1000ecf2:	4152      	adcs	r2, r2
1000ecf4:	d2cd      	bcs.n	1000ec92 <__aeabi_uidiv+0x3a>
1000ecf6:	09c3      	lsrs	r3, r0, #7
1000ecf8:	428b      	cmp	r3, r1
1000ecfa:	d301      	bcc.n	1000ed00 <__aeabi_uidiv+0xa8>
1000ecfc:	01cb      	lsls	r3, r1, #7
1000ecfe:	1ac0      	subs	r0, r0, r3
1000ed00:	4152      	adcs	r2, r2
1000ed02:	0983      	lsrs	r3, r0, #6
1000ed04:	428b      	cmp	r3, r1
1000ed06:	d301      	bcc.n	1000ed0c <__aeabi_uidiv+0xb4>
1000ed08:	018b      	lsls	r3, r1, #6
1000ed0a:	1ac0      	subs	r0, r0, r3
1000ed0c:	4152      	adcs	r2, r2
1000ed0e:	0943      	lsrs	r3, r0, #5
1000ed10:	428b      	cmp	r3, r1
1000ed12:	d301      	bcc.n	1000ed18 <__aeabi_uidiv+0xc0>
1000ed14:	014b      	lsls	r3, r1, #5
1000ed16:	1ac0      	subs	r0, r0, r3
1000ed18:	4152      	adcs	r2, r2
1000ed1a:	0903      	lsrs	r3, r0, #4
1000ed1c:	428b      	cmp	r3, r1
1000ed1e:	d301      	bcc.n	1000ed24 <__aeabi_uidiv+0xcc>
1000ed20:	010b      	lsls	r3, r1, #4
1000ed22:	1ac0      	subs	r0, r0, r3
1000ed24:	4152      	adcs	r2, r2
1000ed26:	08c3      	lsrs	r3, r0, #3
1000ed28:	428b      	cmp	r3, r1
1000ed2a:	d301      	bcc.n	1000ed30 <__aeabi_uidiv+0xd8>
1000ed2c:	00cb      	lsls	r3, r1, #3
1000ed2e:	1ac0      	subs	r0, r0, r3
1000ed30:	4152      	adcs	r2, r2
1000ed32:	0883      	lsrs	r3, r0, #2
1000ed34:	428b      	cmp	r3, r1
1000ed36:	d301      	bcc.n	1000ed3c <__aeabi_uidiv+0xe4>
1000ed38:	008b      	lsls	r3, r1, #2
1000ed3a:	1ac0      	subs	r0, r0, r3
1000ed3c:	4152      	adcs	r2, r2
1000ed3e:	0843      	lsrs	r3, r0, #1
1000ed40:	428b      	cmp	r3, r1
1000ed42:	d301      	bcc.n	1000ed48 <__aeabi_uidiv+0xf0>
1000ed44:	004b      	lsls	r3, r1, #1
1000ed46:	1ac0      	subs	r0, r0, r3
1000ed48:	4152      	adcs	r2, r2
1000ed4a:	1a41      	subs	r1, r0, r1
1000ed4c:	d200      	bcs.n	1000ed50 <__aeabi_uidiv+0xf8>
1000ed4e:	4601      	mov	r1, r0
1000ed50:	4152      	adcs	r2, r2
1000ed52:	4610      	mov	r0, r2
1000ed54:	4770      	bx	lr
1000ed56:	e7ff      	b.n	1000ed58 <__aeabi_uidiv+0x100>
1000ed58:	b501      	push	{r0, lr}
1000ed5a:	2000      	movs	r0, #0
1000ed5c:	f000 f8f0 	bl	1000ef40 <__aeabi_idiv0>
1000ed60:	bd02      	pop	{r1, pc}
1000ed62:	46c0      	nop			; (mov r8, r8)

1000ed64 <__aeabi_uidivmod>:
1000ed64:	2900      	cmp	r1, #0
1000ed66:	d0f7      	beq.n	1000ed58 <__aeabi_uidiv+0x100>
1000ed68:	e776      	b.n	1000ec58 <__aeabi_uidiv>
1000ed6a:	4770      	bx	lr

1000ed6c <__aeabi_idiv>:
1000ed6c:	4603      	mov	r3, r0
1000ed6e:	430b      	orrs	r3, r1
1000ed70:	d47f      	bmi.n	1000ee72 <__aeabi_idiv+0x106>
1000ed72:	2200      	movs	r2, #0
1000ed74:	0843      	lsrs	r3, r0, #1
1000ed76:	428b      	cmp	r3, r1
1000ed78:	d374      	bcc.n	1000ee64 <__aeabi_idiv+0xf8>
1000ed7a:	0903      	lsrs	r3, r0, #4
1000ed7c:	428b      	cmp	r3, r1
1000ed7e:	d35f      	bcc.n	1000ee40 <__aeabi_idiv+0xd4>
1000ed80:	0a03      	lsrs	r3, r0, #8
1000ed82:	428b      	cmp	r3, r1
1000ed84:	d344      	bcc.n	1000ee10 <__aeabi_idiv+0xa4>
1000ed86:	0b03      	lsrs	r3, r0, #12
1000ed88:	428b      	cmp	r3, r1
1000ed8a:	d328      	bcc.n	1000edde <__aeabi_idiv+0x72>
1000ed8c:	0c03      	lsrs	r3, r0, #16
1000ed8e:	428b      	cmp	r3, r1
1000ed90:	d30d      	bcc.n	1000edae <__aeabi_idiv+0x42>
1000ed92:	22ff      	movs	r2, #255	; 0xff
1000ed94:	0209      	lsls	r1, r1, #8
1000ed96:	ba12      	rev	r2, r2
1000ed98:	0c03      	lsrs	r3, r0, #16
1000ed9a:	428b      	cmp	r3, r1
1000ed9c:	d302      	bcc.n	1000eda4 <__aeabi_idiv+0x38>
1000ed9e:	1212      	asrs	r2, r2, #8
1000eda0:	0209      	lsls	r1, r1, #8
1000eda2:	d065      	beq.n	1000ee70 <__aeabi_idiv+0x104>
1000eda4:	0b03      	lsrs	r3, r0, #12
1000eda6:	428b      	cmp	r3, r1
1000eda8:	d319      	bcc.n	1000edde <__aeabi_idiv+0x72>
1000edaa:	e000      	b.n	1000edae <__aeabi_idiv+0x42>
1000edac:	0a09      	lsrs	r1, r1, #8
1000edae:	0bc3      	lsrs	r3, r0, #15
1000edb0:	428b      	cmp	r3, r1
1000edb2:	d301      	bcc.n	1000edb8 <__aeabi_idiv+0x4c>
1000edb4:	03cb      	lsls	r3, r1, #15
1000edb6:	1ac0      	subs	r0, r0, r3
1000edb8:	4152      	adcs	r2, r2
1000edba:	0b83      	lsrs	r3, r0, #14
1000edbc:	428b      	cmp	r3, r1
1000edbe:	d301      	bcc.n	1000edc4 <__aeabi_idiv+0x58>
1000edc0:	038b      	lsls	r3, r1, #14
1000edc2:	1ac0      	subs	r0, r0, r3
1000edc4:	4152      	adcs	r2, r2
1000edc6:	0b43      	lsrs	r3, r0, #13
1000edc8:	428b      	cmp	r3, r1
1000edca:	d301      	bcc.n	1000edd0 <__aeabi_idiv+0x64>
1000edcc:	034b      	lsls	r3, r1, #13
1000edce:	1ac0      	subs	r0, r0, r3
1000edd0:	4152      	adcs	r2, r2
1000edd2:	0b03      	lsrs	r3, r0, #12
1000edd4:	428b      	cmp	r3, r1
1000edd6:	d301      	bcc.n	1000eddc <__aeabi_idiv+0x70>
1000edd8:	030b      	lsls	r3, r1, #12
1000edda:	1ac0      	subs	r0, r0, r3
1000eddc:	4152      	adcs	r2, r2
1000edde:	0ac3      	lsrs	r3, r0, #11
1000ede0:	428b      	cmp	r3, r1
1000ede2:	d301      	bcc.n	1000ede8 <__aeabi_idiv+0x7c>
1000ede4:	02cb      	lsls	r3, r1, #11
1000ede6:	1ac0      	subs	r0, r0, r3
1000ede8:	4152      	adcs	r2, r2
1000edea:	0a83      	lsrs	r3, r0, #10
1000edec:	428b      	cmp	r3, r1
1000edee:	d301      	bcc.n	1000edf4 <__aeabi_idiv+0x88>
1000edf0:	028b      	lsls	r3, r1, #10
1000edf2:	1ac0      	subs	r0, r0, r3
1000edf4:	4152      	adcs	r2, r2
1000edf6:	0a43      	lsrs	r3, r0, #9
1000edf8:	428b      	cmp	r3, r1
1000edfa:	d301      	bcc.n	1000ee00 <__aeabi_idiv+0x94>
1000edfc:	024b      	lsls	r3, r1, #9
1000edfe:	1ac0      	subs	r0, r0, r3
1000ee00:	4152      	adcs	r2, r2
1000ee02:	0a03      	lsrs	r3, r0, #8
1000ee04:	428b      	cmp	r3, r1
1000ee06:	d301      	bcc.n	1000ee0c <__aeabi_idiv+0xa0>
1000ee08:	020b      	lsls	r3, r1, #8
1000ee0a:	1ac0      	subs	r0, r0, r3
1000ee0c:	4152      	adcs	r2, r2
1000ee0e:	d2cd      	bcs.n	1000edac <__aeabi_idiv+0x40>
1000ee10:	09c3      	lsrs	r3, r0, #7
1000ee12:	428b      	cmp	r3, r1
1000ee14:	d301      	bcc.n	1000ee1a <__aeabi_idiv+0xae>
1000ee16:	01cb      	lsls	r3, r1, #7
1000ee18:	1ac0      	subs	r0, r0, r3
1000ee1a:	4152      	adcs	r2, r2
1000ee1c:	0983      	lsrs	r3, r0, #6
1000ee1e:	428b      	cmp	r3, r1
1000ee20:	d301      	bcc.n	1000ee26 <__aeabi_idiv+0xba>
1000ee22:	018b      	lsls	r3, r1, #6
1000ee24:	1ac0      	subs	r0, r0, r3
1000ee26:	4152      	adcs	r2, r2
1000ee28:	0943      	lsrs	r3, r0, #5
1000ee2a:	428b      	cmp	r3, r1
1000ee2c:	d301      	bcc.n	1000ee32 <__aeabi_idiv+0xc6>
1000ee2e:	014b      	lsls	r3, r1, #5
1000ee30:	1ac0      	subs	r0, r0, r3
1000ee32:	4152      	adcs	r2, r2
1000ee34:	0903      	lsrs	r3, r0, #4
1000ee36:	428b      	cmp	r3, r1
1000ee38:	d301      	bcc.n	1000ee3e <__aeabi_idiv+0xd2>
1000ee3a:	010b      	lsls	r3, r1, #4
1000ee3c:	1ac0      	subs	r0, r0, r3
1000ee3e:	4152      	adcs	r2, r2
1000ee40:	08c3      	lsrs	r3, r0, #3
1000ee42:	428b      	cmp	r3, r1
1000ee44:	d301      	bcc.n	1000ee4a <__aeabi_idiv+0xde>
1000ee46:	00cb      	lsls	r3, r1, #3
1000ee48:	1ac0      	subs	r0, r0, r3
1000ee4a:	4152      	adcs	r2, r2
1000ee4c:	0883      	lsrs	r3, r0, #2
1000ee4e:	428b      	cmp	r3, r1
1000ee50:	d301      	bcc.n	1000ee56 <__aeabi_idiv+0xea>
1000ee52:	008b      	lsls	r3, r1, #2
1000ee54:	1ac0      	subs	r0, r0, r3
1000ee56:	4152      	adcs	r2, r2
1000ee58:	0843      	lsrs	r3, r0, #1
1000ee5a:	428b      	cmp	r3, r1
1000ee5c:	d301      	bcc.n	1000ee62 <__aeabi_idiv+0xf6>
1000ee5e:	004b      	lsls	r3, r1, #1
1000ee60:	1ac0      	subs	r0, r0, r3
1000ee62:	4152      	adcs	r2, r2
1000ee64:	1a41      	subs	r1, r0, r1
1000ee66:	d200      	bcs.n	1000ee6a <__aeabi_idiv+0xfe>
1000ee68:	4601      	mov	r1, r0
1000ee6a:	4152      	adcs	r2, r2
1000ee6c:	4610      	mov	r0, r2
1000ee6e:	4770      	bx	lr
1000ee70:	e05d      	b.n	1000ef2e <__aeabi_idiv+0x1c2>
1000ee72:	0fca      	lsrs	r2, r1, #31
1000ee74:	d000      	beq.n	1000ee78 <__aeabi_idiv+0x10c>
1000ee76:	4249      	negs	r1, r1
1000ee78:	1003      	asrs	r3, r0, #32
1000ee7a:	d300      	bcc.n	1000ee7e <__aeabi_idiv+0x112>
1000ee7c:	4240      	negs	r0, r0
1000ee7e:	4053      	eors	r3, r2
1000ee80:	2200      	movs	r2, #0
1000ee82:	469c      	mov	ip, r3
1000ee84:	0903      	lsrs	r3, r0, #4
1000ee86:	428b      	cmp	r3, r1
1000ee88:	d32d      	bcc.n	1000eee6 <__aeabi_idiv+0x17a>
1000ee8a:	0a03      	lsrs	r3, r0, #8
1000ee8c:	428b      	cmp	r3, r1
1000ee8e:	d312      	bcc.n	1000eeb6 <__aeabi_idiv+0x14a>
1000ee90:	22fc      	movs	r2, #252	; 0xfc
1000ee92:	0189      	lsls	r1, r1, #6
1000ee94:	ba12      	rev	r2, r2
1000ee96:	0a03      	lsrs	r3, r0, #8
1000ee98:	428b      	cmp	r3, r1
1000ee9a:	d30c      	bcc.n	1000eeb6 <__aeabi_idiv+0x14a>
1000ee9c:	0189      	lsls	r1, r1, #6
1000ee9e:	1192      	asrs	r2, r2, #6
1000eea0:	428b      	cmp	r3, r1
1000eea2:	d308      	bcc.n	1000eeb6 <__aeabi_idiv+0x14a>
1000eea4:	0189      	lsls	r1, r1, #6
1000eea6:	1192      	asrs	r2, r2, #6
1000eea8:	428b      	cmp	r3, r1
1000eeaa:	d304      	bcc.n	1000eeb6 <__aeabi_idiv+0x14a>
1000eeac:	0189      	lsls	r1, r1, #6
1000eeae:	d03a      	beq.n	1000ef26 <__aeabi_idiv+0x1ba>
1000eeb0:	1192      	asrs	r2, r2, #6
1000eeb2:	e000      	b.n	1000eeb6 <__aeabi_idiv+0x14a>
1000eeb4:	0989      	lsrs	r1, r1, #6
1000eeb6:	09c3      	lsrs	r3, r0, #7
1000eeb8:	428b      	cmp	r3, r1
1000eeba:	d301      	bcc.n	1000eec0 <__aeabi_idiv+0x154>
1000eebc:	01cb      	lsls	r3, r1, #7
1000eebe:	1ac0      	subs	r0, r0, r3
1000eec0:	4152      	adcs	r2, r2
1000eec2:	0983      	lsrs	r3, r0, #6
1000eec4:	428b      	cmp	r3, r1
1000eec6:	d301      	bcc.n	1000eecc <__aeabi_idiv+0x160>
1000eec8:	018b      	lsls	r3, r1, #6
1000eeca:	1ac0      	subs	r0, r0, r3
1000eecc:	4152      	adcs	r2, r2
1000eece:	0943      	lsrs	r3, r0, #5
1000eed0:	428b      	cmp	r3, r1
1000eed2:	d301      	bcc.n	1000eed8 <__aeabi_idiv+0x16c>
1000eed4:	014b      	lsls	r3, r1, #5
1000eed6:	1ac0      	subs	r0, r0, r3
1000eed8:	4152      	adcs	r2, r2
1000eeda:	0903      	lsrs	r3, r0, #4
1000eedc:	428b      	cmp	r3, r1
1000eede:	d301      	bcc.n	1000eee4 <__aeabi_idiv+0x178>
1000eee0:	010b      	lsls	r3, r1, #4
1000eee2:	1ac0      	subs	r0, r0, r3
1000eee4:	4152      	adcs	r2, r2
1000eee6:	08c3      	lsrs	r3, r0, #3
1000eee8:	428b      	cmp	r3, r1
1000eeea:	d301      	bcc.n	1000eef0 <__aeabi_idiv+0x184>
1000eeec:	00cb      	lsls	r3, r1, #3
1000eeee:	1ac0      	subs	r0, r0, r3
1000eef0:	4152      	adcs	r2, r2
1000eef2:	0883      	lsrs	r3, r0, #2
1000eef4:	428b      	cmp	r3, r1
1000eef6:	d301      	bcc.n	1000eefc <__aeabi_idiv+0x190>
1000eef8:	008b      	lsls	r3, r1, #2
1000eefa:	1ac0      	subs	r0, r0, r3
1000eefc:	4152      	adcs	r2, r2
1000eefe:	d2d9      	bcs.n	1000eeb4 <__aeabi_idiv+0x148>
1000ef00:	0843      	lsrs	r3, r0, #1
1000ef02:	428b      	cmp	r3, r1
1000ef04:	d301      	bcc.n	1000ef0a <__aeabi_idiv+0x19e>
1000ef06:	004b      	lsls	r3, r1, #1
1000ef08:	1ac0      	subs	r0, r0, r3
1000ef0a:	4152      	adcs	r2, r2
1000ef0c:	1a41      	subs	r1, r0, r1
1000ef0e:	d200      	bcs.n	1000ef12 <__aeabi_idiv+0x1a6>
1000ef10:	4601      	mov	r1, r0
1000ef12:	4663      	mov	r3, ip
1000ef14:	4152      	adcs	r2, r2
1000ef16:	105b      	asrs	r3, r3, #1
1000ef18:	4610      	mov	r0, r2
1000ef1a:	d301      	bcc.n	1000ef20 <__aeabi_idiv+0x1b4>
1000ef1c:	4240      	negs	r0, r0
1000ef1e:	2b00      	cmp	r3, #0
1000ef20:	d500      	bpl.n	1000ef24 <__aeabi_idiv+0x1b8>
1000ef22:	4249      	negs	r1, r1
1000ef24:	4770      	bx	lr
1000ef26:	4663      	mov	r3, ip
1000ef28:	105b      	asrs	r3, r3, #1
1000ef2a:	d300      	bcc.n	1000ef2e <__aeabi_idiv+0x1c2>
1000ef2c:	4240      	negs	r0, r0
1000ef2e:	b501      	push	{r0, lr}
1000ef30:	2000      	movs	r0, #0
1000ef32:	f000 f805 	bl	1000ef40 <__aeabi_idiv0>
1000ef36:	bd02      	pop	{r1, pc}

1000ef38 <__aeabi_idivmod>:
1000ef38:	2900      	cmp	r1, #0
1000ef3a:	d0f8      	beq.n	1000ef2e <__aeabi_idiv+0x1c2>
1000ef3c:	e716      	b.n	1000ed6c <__aeabi_idiv>
1000ef3e:	4770      	bx	lr

1000ef40 <__aeabi_idiv0>:
1000ef40:	4770      	bx	lr
1000ef42:	46c0      	nop			; (mov r8, r8)

1000ef44 <__aeabi_d2uiz>:
1000ef44:	b570      	push	{r4, r5, r6, lr}
1000ef46:	2200      	movs	r2, #0
1000ef48:	4b0c      	ldr	r3, [pc, #48]	; (1000ef7c <__aeabi_d2uiz+0x38>)
1000ef4a:	0004      	movs	r4, r0
1000ef4c:	000d      	movs	r5, r1
1000ef4e:	f000 fe87 	bl	1000fc60 <__aeabi_dcmpge>
1000ef52:	2800      	cmp	r0, #0
1000ef54:	d104      	bne.n	1000ef60 <__aeabi_d2uiz+0x1c>
1000ef56:	0020      	movs	r0, r4
1000ef58:	0029      	movs	r1, r5
1000ef5a:	f000 fddf 	bl	1000fb1c <__aeabi_d2iz>
1000ef5e:	bd70      	pop	{r4, r5, r6, pc}
1000ef60:	4b06      	ldr	r3, [pc, #24]	; (1000ef7c <__aeabi_d2uiz+0x38>)
1000ef62:	2200      	movs	r2, #0
1000ef64:	0020      	movs	r0, r4
1000ef66:	0029      	movs	r1, r5
1000ef68:	f000 fa84 	bl	1000f474 <__aeabi_dsub>
1000ef6c:	f000 fdd6 	bl	1000fb1c <__aeabi_d2iz>
1000ef70:	2380      	movs	r3, #128	; 0x80
1000ef72:	061b      	lsls	r3, r3, #24
1000ef74:	469c      	mov	ip, r3
1000ef76:	4460      	add	r0, ip
1000ef78:	e7f1      	b.n	1000ef5e <__aeabi_d2uiz+0x1a>
1000ef7a:	46c0      	nop			; (mov r8, r8)
1000ef7c:	41e00000 	.word	0x41e00000

1000ef80 <__aeabi_dmul>:
1000ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef82:	465f      	mov	r7, fp
1000ef84:	4656      	mov	r6, sl
1000ef86:	464d      	mov	r5, r9
1000ef88:	4644      	mov	r4, r8
1000ef8a:	b4f0      	push	{r4, r5, r6, r7}
1000ef8c:	030d      	lsls	r5, r1, #12
1000ef8e:	4699      	mov	r9, r3
1000ef90:	004e      	lsls	r6, r1, #1
1000ef92:	0b2b      	lsrs	r3, r5, #12
1000ef94:	b087      	sub	sp, #28
1000ef96:	0007      	movs	r7, r0
1000ef98:	4692      	mov	sl, r2
1000ef9a:	4680      	mov	r8, r0
1000ef9c:	469b      	mov	fp, r3
1000ef9e:	0d76      	lsrs	r6, r6, #21
1000efa0:	0fcc      	lsrs	r4, r1, #31
1000efa2:	2e00      	cmp	r6, #0
1000efa4:	d069      	beq.n	1000f07a <__aeabi_dmul+0xfa>
1000efa6:	4b6d      	ldr	r3, [pc, #436]	; (1000f15c <__aeabi_dmul+0x1dc>)
1000efa8:	429e      	cmp	r6, r3
1000efaa:	d035      	beq.n	1000f018 <__aeabi_dmul+0x98>
1000efac:	465b      	mov	r3, fp
1000efae:	2280      	movs	r2, #128	; 0x80
1000efb0:	00dd      	lsls	r5, r3, #3
1000efb2:	0412      	lsls	r2, r2, #16
1000efb4:	0f43      	lsrs	r3, r0, #29
1000efb6:	4313      	orrs	r3, r2
1000efb8:	432b      	orrs	r3, r5
1000efba:	469b      	mov	fp, r3
1000efbc:	00c3      	lsls	r3, r0, #3
1000efbe:	4698      	mov	r8, r3
1000efc0:	4b67      	ldr	r3, [pc, #412]	; (1000f160 <__aeabi_dmul+0x1e0>)
1000efc2:	2700      	movs	r7, #0
1000efc4:	469c      	mov	ip, r3
1000efc6:	2300      	movs	r3, #0
1000efc8:	4466      	add	r6, ip
1000efca:	9301      	str	r3, [sp, #4]
1000efcc:	464a      	mov	r2, r9
1000efce:	0315      	lsls	r5, r2, #12
1000efd0:	0050      	lsls	r0, r2, #1
1000efd2:	0fd2      	lsrs	r2, r2, #31
1000efd4:	4653      	mov	r3, sl
1000efd6:	0b2d      	lsrs	r5, r5, #12
1000efd8:	0d40      	lsrs	r0, r0, #21
1000efda:	4691      	mov	r9, r2
1000efdc:	d100      	bne.n	1000efe0 <__aeabi_dmul+0x60>
1000efde:	e076      	b.n	1000f0ce <__aeabi_dmul+0x14e>
1000efe0:	4a5e      	ldr	r2, [pc, #376]	; (1000f15c <__aeabi_dmul+0x1dc>)
1000efe2:	4290      	cmp	r0, r2
1000efe4:	d06c      	beq.n	1000f0c0 <__aeabi_dmul+0x140>
1000efe6:	2280      	movs	r2, #128	; 0x80
1000efe8:	0f5b      	lsrs	r3, r3, #29
1000efea:	0412      	lsls	r2, r2, #16
1000efec:	4313      	orrs	r3, r2
1000efee:	4a5c      	ldr	r2, [pc, #368]	; (1000f160 <__aeabi_dmul+0x1e0>)
1000eff0:	00ed      	lsls	r5, r5, #3
1000eff2:	4694      	mov	ip, r2
1000eff4:	431d      	orrs	r5, r3
1000eff6:	4653      	mov	r3, sl
1000eff8:	2200      	movs	r2, #0
1000effa:	00db      	lsls	r3, r3, #3
1000effc:	4460      	add	r0, ip
1000effe:	4649      	mov	r1, r9
1000f000:	1836      	adds	r6, r6, r0
1000f002:	1c70      	adds	r0, r6, #1
1000f004:	4061      	eors	r1, r4
1000f006:	9002      	str	r0, [sp, #8]
1000f008:	4317      	orrs	r7, r2
1000f00a:	2f0f      	cmp	r7, #15
1000f00c:	d900      	bls.n	1000f010 <__aeabi_dmul+0x90>
1000f00e:	e0af      	b.n	1000f170 <__aeabi_dmul+0x1f0>
1000f010:	4854      	ldr	r0, [pc, #336]	; (1000f164 <__aeabi_dmul+0x1e4>)
1000f012:	00bf      	lsls	r7, r7, #2
1000f014:	59c7      	ldr	r7, [r0, r7]
1000f016:	46bf      	mov	pc, r7
1000f018:	465b      	mov	r3, fp
1000f01a:	431f      	orrs	r7, r3
1000f01c:	d000      	beq.n	1000f020 <__aeabi_dmul+0xa0>
1000f01e:	e088      	b.n	1000f132 <__aeabi_dmul+0x1b2>
1000f020:	2300      	movs	r3, #0
1000f022:	469b      	mov	fp, r3
1000f024:	4698      	mov	r8, r3
1000f026:	3302      	adds	r3, #2
1000f028:	2708      	movs	r7, #8
1000f02a:	9301      	str	r3, [sp, #4]
1000f02c:	e7ce      	b.n	1000efcc <__aeabi_dmul+0x4c>
1000f02e:	4649      	mov	r1, r9
1000f030:	2a02      	cmp	r2, #2
1000f032:	d06a      	beq.n	1000f10a <__aeabi_dmul+0x18a>
1000f034:	2a03      	cmp	r2, #3
1000f036:	d100      	bne.n	1000f03a <__aeabi_dmul+0xba>
1000f038:	e209      	b.n	1000f44e <__aeabi_dmul+0x4ce>
1000f03a:	2a01      	cmp	r2, #1
1000f03c:	d000      	beq.n	1000f040 <__aeabi_dmul+0xc0>
1000f03e:	e1bb      	b.n	1000f3b8 <__aeabi_dmul+0x438>
1000f040:	4011      	ands	r1, r2
1000f042:	2200      	movs	r2, #0
1000f044:	2300      	movs	r3, #0
1000f046:	2500      	movs	r5, #0
1000f048:	4690      	mov	r8, r2
1000f04a:	b2cc      	uxtb	r4, r1
1000f04c:	2100      	movs	r1, #0
1000f04e:	032d      	lsls	r5, r5, #12
1000f050:	0d0a      	lsrs	r2, r1, #20
1000f052:	0512      	lsls	r2, r2, #20
1000f054:	0b2d      	lsrs	r5, r5, #12
1000f056:	4315      	orrs	r5, r2
1000f058:	4a43      	ldr	r2, [pc, #268]	; (1000f168 <__aeabi_dmul+0x1e8>)
1000f05a:	051b      	lsls	r3, r3, #20
1000f05c:	4015      	ands	r5, r2
1000f05e:	431d      	orrs	r5, r3
1000f060:	006d      	lsls	r5, r5, #1
1000f062:	07e4      	lsls	r4, r4, #31
1000f064:	086d      	lsrs	r5, r5, #1
1000f066:	4325      	orrs	r5, r4
1000f068:	4640      	mov	r0, r8
1000f06a:	0029      	movs	r1, r5
1000f06c:	b007      	add	sp, #28
1000f06e:	bc3c      	pop	{r2, r3, r4, r5}
1000f070:	4690      	mov	r8, r2
1000f072:	4699      	mov	r9, r3
1000f074:	46a2      	mov	sl, r4
1000f076:	46ab      	mov	fp, r5
1000f078:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f07a:	4303      	orrs	r3, r0
1000f07c:	d052      	beq.n	1000f124 <__aeabi_dmul+0x1a4>
1000f07e:	465b      	mov	r3, fp
1000f080:	2b00      	cmp	r3, #0
1000f082:	d100      	bne.n	1000f086 <__aeabi_dmul+0x106>
1000f084:	e18a      	b.n	1000f39c <__aeabi_dmul+0x41c>
1000f086:	4658      	mov	r0, fp
1000f088:	f000 fdf4 	bl	1000fc74 <__clzsi2>
1000f08c:	0003      	movs	r3, r0
1000f08e:	3b0b      	subs	r3, #11
1000f090:	2b1c      	cmp	r3, #28
1000f092:	dd00      	ble.n	1000f096 <__aeabi_dmul+0x116>
1000f094:	e17b      	b.n	1000f38e <__aeabi_dmul+0x40e>
1000f096:	221d      	movs	r2, #29
1000f098:	1ad3      	subs	r3, r2, r3
1000f09a:	003a      	movs	r2, r7
1000f09c:	0001      	movs	r1, r0
1000f09e:	465d      	mov	r5, fp
1000f0a0:	40da      	lsrs	r2, r3
1000f0a2:	3908      	subs	r1, #8
1000f0a4:	408d      	lsls	r5, r1
1000f0a6:	0013      	movs	r3, r2
1000f0a8:	408f      	lsls	r7, r1
1000f0aa:	432b      	orrs	r3, r5
1000f0ac:	469b      	mov	fp, r3
1000f0ae:	46b8      	mov	r8, r7
1000f0b0:	4b2e      	ldr	r3, [pc, #184]	; (1000f16c <__aeabi_dmul+0x1ec>)
1000f0b2:	2700      	movs	r7, #0
1000f0b4:	469c      	mov	ip, r3
1000f0b6:	2300      	movs	r3, #0
1000f0b8:	4460      	add	r0, ip
1000f0ba:	4246      	negs	r6, r0
1000f0bc:	9301      	str	r3, [sp, #4]
1000f0be:	e785      	b.n	1000efcc <__aeabi_dmul+0x4c>
1000f0c0:	4652      	mov	r2, sl
1000f0c2:	432a      	orrs	r2, r5
1000f0c4:	d12c      	bne.n	1000f120 <__aeabi_dmul+0x1a0>
1000f0c6:	2500      	movs	r5, #0
1000f0c8:	2300      	movs	r3, #0
1000f0ca:	2202      	movs	r2, #2
1000f0cc:	e797      	b.n	1000effe <__aeabi_dmul+0x7e>
1000f0ce:	4652      	mov	r2, sl
1000f0d0:	432a      	orrs	r2, r5
1000f0d2:	d021      	beq.n	1000f118 <__aeabi_dmul+0x198>
1000f0d4:	2d00      	cmp	r5, #0
1000f0d6:	d100      	bne.n	1000f0da <__aeabi_dmul+0x15a>
1000f0d8:	e154      	b.n	1000f384 <__aeabi_dmul+0x404>
1000f0da:	0028      	movs	r0, r5
1000f0dc:	f000 fdca 	bl	1000fc74 <__clzsi2>
1000f0e0:	0003      	movs	r3, r0
1000f0e2:	3b0b      	subs	r3, #11
1000f0e4:	2b1c      	cmp	r3, #28
1000f0e6:	dd00      	ble.n	1000f0ea <__aeabi_dmul+0x16a>
1000f0e8:	e146      	b.n	1000f378 <__aeabi_dmul+0x3f8>
1000f0ea:	211d      	movs	r1, #29
1000f0ec:	1acb      	subs	r3, r1, r3
1000f0ee:	4651      	mov	r1, sl
1000f0f0:	0002      	movs	r2, r0
1000f0f2:	40d9      	lsrs	r1, r3
1000f0f4:	4653      	mov	r3, sl
1000f0f6:	3a08      	subs	r2, #8
1000f0f8:	4095      	lsls	r5, r2
1000f0fa:	4093      	lsls	r3, r2
1000f0fc:	430d      	orrs	r5, r1
1000f0fe:	4a1b      	ldr	r2, [pc, #108]	; (1000f16c <__aeabi_dmul+0x1ec>)
1000f100:	4694      	mov	ip, r2
1000f102:	4460      	add	r0, ip
1000f104:	4240      	negs	r0, r0
1000f106:	2200      	movs	r2, #0
1000f108:	e779      	b.n	1000effe <__aeabi_dmul+0x7e>
1000f10a:	2401      	movs	r4, #1
1000f10c:	2200      	movs	r2, #0
1000f10e:	400c      	ands	r4, r1
1000f110:	4b12      	ldr	r3, [pc, #72]	; (1000f15c <__aeabi_dmul+0x1dc>)
1000f112:	2500      	movs	r5, #0
1000f114:	4690      	mov	r8, r2
1000f116:	e799      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f118:	2500      	movs	r5, #0
1000f11a:	2300      	movs	r3, #0
1000f11c:	2201      	movs	r2, #1
1000f11e:	e76e      	b.n	1000effe <__aeabi_dmul+0x7e>
1000f120:	2203      	movs	r2, #3
1000f122:	e76c      	b.n	1000effe <__aeabi_dmul+0x7e>
1000f124:	2300      	movs	r3, #0
1000f126:	469b      	mov	fp, r3
1000f128:	4698      	mov	r8, r3
1000f12a:	3301      	adds	r3, #1
1000f12c:	2704      	movs	r7, #4
1000f12e:	9301      	str	r3, [sp, #4]
1000f130:	e74c      	b.n	1000efcc <__aeabi_dmul+0x4c>
1000f132:	2303      	movs	r3, #3
1000f134:	270c      	movs	r7, #12
1000f136:	9301      	str	r3, [sp, #4]
1000f138:	e748      	b.n	1000efcc <__aeabi_dmul+0x4c>
1000f13a:	2300      	movs	r3, #0
1000f13c:	2580      	movs	r5, #128	; 0x80
1000f13e:	4698      	mov	r8, r3
1000f140:	2400      	movs	r4, #0
1000f142:	032d      	lsls	r5, r5, #12
1000f144:	4b05      	ldr	r3, [pc, #20]	; (1000f15c <__aeabi_dmul+0x1dc>)
1000f146:	e781      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f148:	465d      	mov	r5, fp
1000f14a:	4643      	mov	r3, r8
1000f14c:	9a01      	ldr	r2, [sp, #4]
1000f14e:	e76f      	b.n	1000f030 <__aeabi_dmul+0xb0>
1000f150:	465d      	mov	r5, fp
1000f152:	4643      	mov	r3, r8
1000f154:	0021      	movs	r1, r4
1000f156:	9a01      	ldr	r2, [sp, #4]
1000f158:	e76a      	b.n	1000f030 <__aeabi_dmul+0xb0>
1000f15a:	46c0      	nop			; (mov r8, r8)
1000f15c:	000007ff 	.word	0x000007ff
1000f160:	fffffc01 	.word	0xfffffc01
1000f164:	10012934 	.word	0x10012934
1000f168:	800fffff 	.word	0x800fffff
1000f16c:	000003f3 	.word	0x000003f3
1000f170:	4642      	mov	r2, r8
1000f172:	0c12      	lsrs	r2, r2, #16
1000f174:	4691      	mov	r9, r2
1000f176:	0c1a      	lsrs	r2, r3, #16
1000f178:	4694      	mov	ip, r2
1000f17a:	4642      	mov	r2, r8
1000f17c:	0417      	lsls	r7, r2, #16
1000f17e:	464a      	mov	r2, r9
1000f180:	041b      	lsls	r3, r3, #16
1000f182:	0c1b      	lsrs	r3, r3, #16
1000f184:	435a      	muls	r2, r3
1000f186:	4660      	mov	r0, ip
1000f188:	4690      	mov	r8, r2
1000f18a:	464a      	mov	r2, r9
1000f18c:	4342      	muls	r2, r0
1000f18e:	0010      	movs	r0, r2
1000f190:	9203      	str	r2, [sp, #12]
1000f192:	4662      	mov	r2, ip
1000f194:	001c      	movs	r4, r3
1000f196:	0c3f      	lsrs	r7, r7, #16
1000f198:	437a      	muls	r2, r7
1000f19a:	437c      	muls	r4, r7
1000f19c:	4442      	add	r2, r8
1000f19e:	9201      	str	r2, [sp, #4]
1000f1a0:	0c22      	lsrs	r2, r4, #16
1000f1a2:	4692      	mov	sl, r2
1000f1a4:	9a01      	ldr	r2, [sp, #4]
1000f1a6:	4452      	add	r2, sl
1000f1a8:	4590      	cmp	r8, r2
1000f1aa:	d906      	bls.n	1000f1ba <__aeabi_dmul+0x23a>
1000f1ac:	4682      	mov	sl, r0
1000f1ae:	2080      	movs	r0, #128	; 0x80
1000f1b0:	0240      	lsls	r0, r0, #9
1000f1b2:	4680      	mov	r8, r0
1000f1b4:	44c2      	add	sl, r8
1000f1b6:	4650      	mov	r0, sl
1000f1b8:	9003      	str	r0, [sp, #12]
1000f1ba:	0c10      	lsrs	r0, r2, #16
1000f1bc:	9004      	str	r0, [sp, #16]
1000f1be:	4648      	mov	r0, r9
1000f1c0:	0424      	lsls	r4, r4, #16
1000f1c2:	0c24      	lsrs	r4, r4, #16
1000f1c4:	0412      	lsls	r2, r2, #16
1000f1c6:	1912      	adds	r2, r2, r4
1000f1c8:	9205      	str	r2, [sp, #20]
1000f1ca:	0c2a      	lsrs	r2, r5, #16
1000f1cc:	042d      	lsls	r5, r5, #16
1000f1ce:	0c2d      	lsrs	r5, r5, #16
1000f1d0:	4368      	muls	r0, r5
1000f1d2:	002c      	movs	r4, r5
1000f1d4:	4682      	mov	sl, r0
1000f1d6:	4648      	mov	r0, r9
1000f1d8:	437c      	muls	r4, r7
1000f1da:	4350      	muls	r0, r2
1000f1dc:	4681      	mov	r9, r0
1000f1de:	0c20      	lsrs	r0, r4, #16
1000f1e0:	4680      	mov	r8, r0
1000f1e2:	4357      	muls	r7, r2
1000f1e4:	4457      	add	r7, sl
1000f1e6:	4447      	add	r7, r8
1000f1e8:	45ba      	cmp	sl, r7
1000f1ea:	d903      	bls.n	1000f1f4 <__aeabi_dmul+0x274>
1000f1ec:	2080      	movs	r0, #128	; 0x80
1000f1ee:	0240      	lsls	r0, r0, #9
1000f1f0:	4680      	mov	r8, r0
1000f1f2:	44c1      	add	r9, r8
1000f1f4:	0c38      	lsrs	r0, r7, #16
1000f1f6:	043f      	lsls	r7, r7, #16
1000f1f8:	46b8      	mov	r8, r7
1000f1fa:	4448      	add	r0, r9
1000f1fc:	0424      	lsls	r4, r4, #16
1000f1fe:	0c24      	lsrs	r4, r4, #16
1000f200:	9001      	str	r0, [sp, #4]
1000f202:	9804      	ldr	r0, [sp, #16]
1000f204:	44a0      	add	r8, r4
1000f206:	4440      	add	r0, r8
1000f208:	9004      	str	r0, [sp, #16]
1000f20a:	4658      	mov	r0, fp
1000f20c:	0c00      	lsrs	r0, r0, #16
1000f20e:	4681      	mov	r9, r0
1000f210:	4658      	mov	r0, fp
1000f212:	0404      	lsls	r4, r0, #16
1000f214:	0c20      	lsrs	r0, r4, #16
1000f216:	4682      	mov	sl, r0
1000f218:	0007      	movs	r7, r0
1000f21a:	4648      	mov	r0, r9
1000f21c:	435f      	muls	r7, r3
1000f21e:	464c      	mov	r4, r9
1000f220:	4343      	muls	r3, r0
1000f222:	4660      	mov	r0, ip
1000f224:	4360      	muls	r0, r4
1000f226:	4664      	mov	r4, ip
1000f228:	4683      	mov	fp, r0
1000f22a:	4650      	mov	r0, sl
1000f22c:	4344      	muls	r4, r0
1000f22e:	0c38      	lsrs	r0, r7, #16
1000f230:	4684      	mov	ip, r0
1000f232:	18e4      	adds	r4, r4, r3
1000f234:	4464      	add	r4, ip
1000f236:	42a3      	cmp	r3, r4
1000f238:	d903      	bls.n	1000f242 <__aeabi_dmul+0x2c2>
1000f23a:	2380      	movs	r3, #128	; 0x80
1000f23c:	025b      	lsls	r3, r3, #9
1000f23e:	469c      	mov	ip, r3
1000f240:	44e3      	add	fp, ip
1000f242:	4648      	mov	r0, r9
1000f244:	043f      	lsls	r7, r7, #16
1000f246:	0c23      	lsrs	r3, r4, #16
1000f248:	0c3f      	lsrs	r7, r7, #16
1000f24a:	0424      	lsls	r4, r4, #16
1000f24c:	19e4      	adds	r4, r4, r7
1000f24e:	4657      	mov	r7, sl
1000f250:	4368      	muls	r0, r5
1000f252:	436f      	muls	r7, r5
1000f254:	4684      	mov	ip, r0
1000f256:	464d      	mov	r5, r9
1000f258:	4650      	mov	r0, sl
1000f25a:	4355      	muls	r5, r2
1000f25c:	4342      	muls	r2, r0
1000f25e:	0c38      	lsrs	r0, r7, #16
1000f260:	4681      	mov	r9, r0
1000f262:	4462      	add	r2, ip
1000f264:	444a      	add	r2, r9
1000f266:	445b      	add	r3, fp
1000f268:	4594      	cmp	ip, r2
1000f26a:	d903      	bls.n	1000f274 <__aeabi_dmul+0x2f4>
1000f26c:	2080      	movs	r0, #128	; 0x80
1000f26e:	0240      	lsls	r0, r0, #9
1000f270:	4684      	mov	ip, r0
1000f272:	4465      	add	r5, ip
1000f274:	9803      	ldr	r0, [sp, #12]
1000f276:	043f      	lsls	r7, r7, #16
1000f278:	4683      	mov	fp, r0
1000f27a:	9804      	ldr	r0, [sp, #16]
1000f27c:	0c3f      	lsrs	r7, r7, #16
1000f27e:	4684      	mov	ip, r0
1000f280:	44e3      	add	fp, ip
1000f282:	45c3      	cmp	fp, r8
1000f284:	4180      	sbcs	r0, r0
1000f286:	4240      	negs	r0, r0
1000f288:	4682      	mov	sl, r0
1000f28a:	0410      	lsls	r0, r2, #16
1000f28c:	4684      	mov	ip, r0
1000f28e:	9801      	ldr	r0, [sp, #4]
1000f290:	4467      	add	r7, ip
1000f292:	4684      	mov	ip, r0
1000f294:	4467      	add	r7, ip
1000f296:	44a3      	add	fp, r4
1000f298:	46bc      	mov	ip, r7
1000f29a:	45a3      	cmp	fp, r4
1000f29c:	41a4      	sbcs	r4, r4
1000f29e:	4699      	mov	r9, r3
1000f2a0:	44d4      	add	ip, sl
1000f2a2:	4264      	negs	r4, r4
1000f2a4:	4287      	cmp	r7, r0
1000f2a6:	41bf      	sbcs	r7, r7
1000f2a8:	45d4      	cmp	ip, sl
1000f2aa:	4180      	sbcs	r0, r0
1000f2ac:	44e1      	add	r9, ip
1000f2ae:	46a0      	mov	r8, r4
1000f2b0:	4599      	cmp	r9, r3
1000f2b2:	419b      	sbcs	r3, r3
1000f2b4:	427f      	negs	r7, r7
1000f2b6:	4240      	negs	r0, r0
1000f2b8:	44c8      	add	r8, r9
1000f2ba:	4307      	orrs	r7, r0
1000f2bc:	0c12      	lsrs	r2, r2, #16
1000f2be:	18ba      	adds	r2, r7, r2
1000f2c0:	45a0      	cmp	r8, r4
1000f2c2:	41a4      	sbcs	r4, r4
1000f2c4:	425f      	negs	r7, r3
1000f2c6:	003b      	movs	r3, r7
1000f2c8:	4264      	negs	r4, r4
1000f2ca:	4323      	orrs	r3, r4
1000f2cc:	18d7      	adds	r7, r2, r3
1000f2ce:	4643      	mov	r3, r8
1000f2d0:	197d      	adds	r5, r7, r5
1000f2d2:	0ddb      	lsrs	r3, r3, #23
1000f2d4:	026d      	lsls	r5, r5, #9
1000f2d6:	431d      	orrs	r5, r3
1000f2d8:	465b      	mov	r3, fp
1000f2da:	025a      	lsls	r2, r3, #9
1000f2dc:	9b05      	ldr	r3, [sp, #20]
1000f2de:	431a      	orrs	r2, r3
1000f2e0:	1e53      	subs	r3, r2, #1
1000f2e2:	419a      	sbcs	r2, r3
1000f2e4:	465b      	mov	r3, fp
1000f2e6:	0ddb      	lsrs	r3, r3, #23
1000f2e8:	431a      	orrs	r2, r3
1000f2ea:	4643      	mov	r3, r8
1000f2ec:	025b      	lsls	r3, r3, #9
1000f2ee:	4313      	orrs	r3, r2
1000f2f0:	01ea      	lsls	r2, r5, #7
1000f2f2:	d507      	bpl.n	1000f304 <__aeabi_dmul+0x384>
1000f2f4:	2201      	movs	r2, #1
1000f2f6:	085c      	lsrs	r4, r3, #1
1000f2f8:	4013      	ands	r3, r2
1000f2fa:	4323      	orrs	r3, r4
1000f2fc:	07ea      	lsls	r2, r5, #31
1000f2fe:	9e02      	ldr	r6, [sp, #8]
1000f300:	4313      	orrs	r3, r2
1000f302:	086d      	lsrs	r5, r5, #1
1000f304:	4a57      	ldr	r2, [pc, #348]	; (1000f464 <__aeabi_dmul+0x4e4>)
1000f306:	18b2      	adds	r2, r6, r2
1000f308:	2a00      	cmp	r2, #0
1000f30a:	dd4b      	ble.n	1000f3a4 <__aeabi_dmul+0x424>
1000f30c:	0758      	lsls	r0, r3, #29
1000f30e:	d009      	beq.n	1000f324 <__aeabi_dmul+0x3a4>
1000f310:	200f      	movs	r0, #15
1000f312:	4018      	ands	r0, r3
1000f314:	2804      	cmp	r0, #4
1000f316:	d005      	beq.n	1000f324 <__aeabi_dmul+0x3a4>
1000f318:	1d18      	adds	r0, r3, #4
1000f31a:	4298      	cmp	r0, r3
1000f31c:	419b      	sbcs	r3, r3
1000f31e:	425b      	negs	r3, r3
1000f320:	18ed      	adds	r5, r5, r3
1000f322:	0003      	movs	r3, r0
1000f324:	01e8      	lsls	r0, r5, #7
1000f326:	d504      	bpl.n	1000f332 <__aeabi_dmul+0x3b2>
1000f328:	4a4f      	ldr	r2, [pc, #316]	; (1000f468 <__aeabi_dmul+0x4e8>)
1000f32a:	4015      	ands	r5, r2
1000f32c:	2280      	movs	r2, #128	; 0x80
1000f32e:	00d2      	lsls	r2, r2, #3
1000f330:	18b2      	adds	r2, r6, r2
1000f332:	484e      	ldr	r0, [pc, #312]	; (1000f46c <__aeabi_dmul+0x4ec>)
1000f334:	4282      	cmp	r2, r0
1000f336:	dd00      	ble.n	1000f33a <__aeabi_dmul+0x3ba>
1000f338:	e6e7      	b.n	1000f10a <__aeabi_dmul+0x18a>
1000f33a:	2401      	movs	r4, #1
1000f33c:	08db      	lsrs	r3, r3, #3
1000f33e:	0768      	lsls	r0, r5, #29
1000f340:	4318      	orrs	r0, r3
1000f342:	026d      	lsls	r5, r5, #9
1000f344:	0553      	lsls	r3, r2, #21
1000f346:	4680      	mov	r8, r0
1000f348:	0b2d      	lsrs	r5, r5, #12
1000f34a:	0d5b      	lsrs	r3, r3, #21
1000f34c:	400c      	ands	r4, r1
1000f34e:	e67d      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f350:	2280      	movs	r2, #128	; 0x80
1000f352:	4659      	mov	r1, fp
1000f354:	0312      	lsls	r2, r2, #12
1000f356:	4211      	tst	r1, r2
1000f358:	d008      	beq.n	1000f36c <__aeabi_dmul+0x3ec>
1000f35a:	4215      	tst	r5, r2
1000f35c:	d106      	bne.n	1000f36c <__aeabi_dmul+0x3ec>
1000f35e:	4315      	orrs	r5, r2
1000f360:	032d      	lsls	r5, r5, #12
1000f362:	4698      	mov	r8, r3
1000f364:	0b2d      	lsrs	r5, r5, #12
1000f366:	464c      	mov	r4, r9
1000f368:	4b41      	ldr	r3, [pc, #260]	; (1000f470 <__aeabi_dmul+0x4f0>)
1000f36a:	e66f      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f36c:	465d      	mov	r5, fp
1000f36e:	4315      	orrs	r5, r2
1000f370:	032d      	lsls	r5, r5, #12
1000f372:	0b2d      	lsrs	r5, r5, #12
1000f374:	4b3e      	ldr	r3, [pc, #248]	; (1000f470 <__aeabi_dmul+0x4f0>)
1000f376:	e669      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f378:	0003      	movs	r3, r0
1000f37a:	4655      	mov	r5, sl
1000f37c:	3b28      	subs	r3, #40	; 0x28
1000f37e:	409d      	lsls	r5, r3
1000f380:	2300      	movs	r3, #0
1000f382:	e6bc      	b.n	1000f0fe <__aeabi_dmul+0x17e>
1000f384:	4650      	mov	r0, sl
1000f386:	f000 fc75 	bl	1000fc74 <__clzsi2>
1000f38a:	3020      	adds	r0, #32
1000f38c:	e6a8      	b.n	1000f0e0 <__aeabi_dmul+0x160>
1000f38e:	0003      	movs	r3, r0
1000f390:	3b28      	subs	r3, #40	; 0x28
1000f392:	409f      	lsls	r7, r3
1000f394:	2300      	movs	r3, #0
1000f396:	46bb      	mov	fp, r7
1000f398:	4698      	mov	r8, r3
1000f39a:	e689      	b.n	1000f0b0 <__aeabi_dmul+0x130>
1000f39c:	f000 fc6a 	bl	1000fc74 <__clzsi2>
1000f3a0:	3020      	adds	r0, #32
1000f3a2:	e673      	b.n	1000f08c <__aeabi_dmul+0x10c>
1000f3a4:	2401      	movs	r4, #1
1000f3a6:	1aa6      	subs	r6, r4, r2
1000f3a8:	2e38      	cmp	r6, #56	; 0x38
1000f3aa:	dd07      	ble.n	1000f3bc <__aeabi_dmul+0x43c>
1000f3ac:	2200      	movs	r2, #0
1000f3ae:	400c      	ands	r4, r1
1000f3b0:	2300      	movs	r3, #0
1000f3b2:	2500      	movs	r5, #0
1000f3b4:	4690      	mov	r8, r2
1000f3b6:	e649      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f3b8:	9e02      	ldr	r6, [sp, #8]
1000f3ba:	e7a3      	b.n	1000f304 <__aeabi_dmul+0x384>
1000f3bc:	2e1f      	cmp	r6, #31
1000f3be:	dc20      	bgt.n	1000f402 <__aeabi_dmul+0x482>
1000f3c0:	2220      	movs	r2, #32
1000f3c2:	002c      	movs	r4, r5
1000f3c4:	0018      	movs	r0, r3
1000f3c6:	1b92      	subs	r2, r2, r6
1000f3c8:	40f0      	lsrs	r0, r6
1000f3ca:	4094      	lsls	r4, r2
1000f3cc:	4093      	lsls	r3, r2
1000f3ce:	4304      	orrs	r4, r0
1000f3d0:	1e58      	subs	r0, r3, #1
1000f3d2:	4183      	sbcs	r3, r0
1000f3d4:	431c      	orrs	r4, r3
1000f3d6:	40f5      	lsrs	r5, r6
1000f3d8:	0763      	lsls	r3, r4, #29
1000f3da:	d009      	beq.n	1000f3f0 <__aeabi_dmul+0x470>
1000f3dc:	230f      	movs	r3, #15
1000f3de:	4023      	ands	r3, r4
1000f3e0:	2b04      	cmp	r3, #4
1000f3e2:	d005      	beq.n	1000f3f0 <__aeabi_dmul+0x470>
1000f3e4:	0023      	movs	r3, r4
1000f3e6:	1d1c      	adds	r4, r3, #4
1000f3e8:	429c      	cmp	r4, r3
1000f3ea:	4192      	sbcs	r2, r2
1000f3ec:	4252      	negs	r2, r2
1000f3ee:	18ad      	adds	r5, r5, r2
1000f3f0:	022b      	lsls	r3, r5, #8
1000f3f2:	d51f      	bpl.n	1000f434 <__aeabi_dmul+0x4b4>
1000f3f4:	2401      	movs	r4, #1
1000f3f6:	2200      	movs	r2, #0
1000f3f8:	400c      	ands	r4, r1
1000f3fa:	2301      	movs	r3, #1
1000f3fc:	2500      	movs	r5, #0
1000f3fe:	4690      	mov	r8, r2
1000f400:	e624      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f402:	201f      	movs	r0, #31
1000f404:	002c      	movs	r4, r5
1000f406:	4240      	negs	r0, r0
1000f408:	1a82      	subs	r2, r0, r2
1000f40a:	40d4      	lsrs	r4, r2
1000f40c:	2e20      	cmp	r6, #32
1000f40e:	d01c      	beq.n	1000f44a <__aeabi_dmul+0x4ca>
1000f410:	2240      	movs	r2, #64	; 0x40
1000f412:	1b96      	subs	r6, r2, r6
1000f414:	40b5      	lsls	r5, r6
1000f416:	432b      	orrs	r3, r5
1000f418:	1e58      	subs	r0, r3, #1
1000f41a:	4183      	sbcs	r3, r0
1000f41c:	2007      	movs	r0, #7
1000f41e:	4323      	orrs	r3, r4
1000f420:	4018      	ands	r0, r3
1000f422:	2500      	movs	r5, #0
1000f424:	2800      	cmp	r0, #0
1000f426:	d009      	beq.n	1000f43c <__aeabi_dmul+0x4bc>
1000f428:	220f      	movs	r2, #15
1000f42a:	2500      	movs	r5, #0
1000f42c:	401a      	ands	r2, r3
1000f42e:	001c      	movs	r4, r3
1000f430:	2a04      	cmp	r2, #4
1000f432:	d1d8      	bne.n	1000f3e6 <__aeabi_dmul+0x466>
1000f434:	0023      	movs	r3, r4
1000f436:	0768      	lsls	r0, r5, #29
1000f438:	026d      	lsls	r5, r5, #9
1000f43a:	0b2d      	lsrs	r5, r5, #12
1000f43c:	2401      	movs	r4, #1
1000f43e:	08db      	lsrs	r3, r3, #3
1000f440:	4303      	orrs	r3, r0
1000f442:	4698      	mov	r8, r3
1000f444:	400c      	ands	r4, r1
1000f446:	2300      	movs	r3, #0
1000f448:	e600      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f44a:	2500      	movs	r5, #0
1000f44c:	e7e3      	b.n	1000f416 <__aeabi_dmul+0x496>
1000f44e:	2280      	movs	r2, #128	; 0x80
1000f450:	2401      	movs	r4, #1
1000f452:	0312      	lsls	r2, r2, #12
1000f454:	4315      	orrs	r5, r2
1000f456:	032d      	lsls	r5, r5, #12
1000f458:	4698      	mov	r8, r3
1000f45a:	0b2d      	lsrs	r5, r5, #12
1000f45c:	400c      	ands	r4, r1
1000f45e:	4b04      	ldr	r3, [pc, #16]	; (1000f470 <__aeabi_dmul+0x4f0>)
1000f460:	e5f4      	b.n	1000f04c <__aeabi_dmul+0xcc>
1000f462:	46c0      	nop			; (mov r8, r8)
1000f464:	000003ff 	.word	0x000003ff
1000f468:	feffffff 	.word	0xfeffffff
1000f46c:	000007fe 	.word	0x000007fe
1000f470:	000007ff 	.word	0x000007ff

1000f474 <__aeabi_dsub>:
1000f474:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f476:	4657      	mov	r7, sl
1000f478:	464e      	mov	r6, r9
1000f47a:	4645      	mov	r5, r8
1000f47c:	b4e0      	push	{r5, r6, r7}
1000f47e:	000e      	movs	r6, r1
1000f480:	0011      	movs	r1, r2
1000f482:	0ff2      	lsrs	r2, r6, #31
1000f484:	4692      	mov	sl, r2
1000f486:	00c5      	lsls	r5, r0, #3
1000f488:	0f42      	lsrs	r2, r0, #29
1000f48a:	0318      	lsls	r0, r3, #12
1000f48c:	0337      	lsls	r7, r6, #12
1000f48e:	0074      	lsls	r4, r6, #1
1000f490:	0a40      	lsrs	r0, r0, #9
1000f492:	0f4e      	lsrs	r6, r1, #29
1000f494:	0a7f      	lsrs	r7, r7, #9
1000f496:	4330      	orrs	r0, r6
1000f498:	4ecf      	ldr	r6, [pc, #828]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f49a:	4317      	orrs	r7, r2
1000f49c:	005a      	lsls	r2, r3, #1
1000f49e:	0d64      	lsrs	r4, r4, #21
1000f4a0:	0d52      	lsrs	r2, r2, #21
1000f4a2:	0fdb      	lsrs	r3, r3, #31
1000f4a4:	00c9      	lsls	r1, r1, #3
1000f4a6:	42b2      	cmp	r2, r6
1000f4a8:	d100      	bne.n	1000f4ac <__aeabi_dsub+0x38>
1000f4aa:	e0e5      	b.n	1000f678 <__aeabi_dsub+0x204>
1000f4ac:	2601      	movs	r6, #1
1000f4ae:	4073      	eors	r3, r6
1000f4b0:	1aa6      	subs	r6, r4, r2
1000f4b2:	46b4      	mov	ip, r6
1000f4b4:	4553      	cmp	r3, sl
1000f4b6:	d100      	bne.n	1000f4ba <__aeabi_dsub+0x46>
1000f4b8:	e0af      	b.n	1000f61a <__aeabi_dsub+0x1a6>
1000f4ba:	2e00      	cmp	r6, #0
1000f4bc:	dc00      	bgt.n	1000f4c0 <__aeabi_dsub+0x4c>
1000f4be:	e10d      	b.n	1000f6dc <__aeabi_dsub+0x268>
1000f4c0:	2a00      	cmp	r2, #0
1000f4c2:	d13a      	bne.n	1000f53a <__aeabi_dsub+0xc6>
1000f4c4:	0003      	movs	r3, r0
1000f4c6:	430b      	orrs	r3, r1
1000f4c8:	d000      	beq.n	1000f4cc <__aeabi_dsub+0x58>
1000f4ca:	e0e4      	b.n	1000f696 <__aeabi_dsub+0x222>
1000f4cc:	076b      	lsls	r3, r5, #29
1000f4ce:	d009      	beq.n	1000f4e4 <__aeabi_dsub+0x70>
1000f4d0:	230f      	movs	r3, #15
1000f4d2:	402b      	ands	r3, r5
1000f4d4:	2b04      	cmp	r3, #4
1000f4d6:	d005      	beq.n	1000f4e4 <__aeabi_dsub+0x70>
1000f4d8:	1d2b      	adds	r3, r5, #4
1000f4da:	42ab      	cmp	r3, r5
1000f4dc:	41ad      	sbcs	r5, r5
1000f4de:	426d      	negs	r5, r5
1000f4e0:	197f      	adds	r7, r7, r5
1000f4e2:	001d      	movs	r5, r3
1000f4e4:	023b      	lsls	r3, r7, #8
1000f4e6:	d400      	bmi.n	1000f4ea <__aeabi_dsub+0x76>
1000f4e8:	e088      	b.n	1000f5fc <__aeabi_dsub+0x188>
1000f4ea:	4bbb      	ldr	r3, [pc, #748]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f4ec:	3401      	adds	r4, #1
1000f4ee:	429c      	cmp	r4, r3
1000f4f0:	d100      	bne.n	1000f4f4 <__aeabi_dsub+0x80>
1000f4f2:	e110      	b.n	1000f716 <__aeabi_dsub+0x2a2>
1000f4f4:	003a      	movs	r2, r7
1000f4f6:	4bb9      	ldr	r3, [pc, #740]	; (1000f7dc <__aeabi_dsub+0x368>)
1000f4f8:	4651      	mov	r1, sl
1000f4fa:	401a      	ands	r2, r3
1000f4fc:	2301      	movs	r3, #1
1000f4fe:	0750      	lsls	r0, r2, #29
1000f500:	08ed      	lsrs	r5, r5, #3
1000f502:	0252      	lsls	r2, r2, #9
1000f504:	0564      	lsls	r4, r4, #21
1000f506:	4305      	orrs	r5, r0
1000f508:	0b12      	lsrs	r2, r2, #12
1000f50a:	0d64      	lsrs	r4, r4, #21
1000f50c:	400b      	ands	r3, r1
1000f50e:	2100      	movs	r1, #0
1000f510:	0028      	movs	r0, r5
1000f512:	0312      	lsls	r2, r2, #12
1000f514:	0d0d      	lsrs	r5, r1, #20
1000f516:	0b12      	lsrs	r2, r2, #12
1000f518:	0564      	lsls	r4, r4, #21
1000f51a:	052d      	lsls	r5, r5, #20
1000f51c:	4315      	orrs	r5, r2
1000f51e:	0862      	lsrs	r2, r4, #1
1000f520:	4caf      	ldr	r4, [pc, #700]	; (1000f7e0 <__aeabi_dsub+0x36c>)
1000f522:	07db      	lsls	r3, r3, #31
1000f524:	402c      	ands	r4, r5
1000f526:	4314      	orrs	r4, r2
1000f528:	0064      	lsls	r4, r4, #1
1000f52a:	0864      	lsrs	r4, r4, #1
1000f52c:	431c      	orrs	r4, r3
1000f52e:	0021      	movs	r1, r4
1000f530:	bc1c      	pop	{r2, r3, r4}
1000f532:	4690      	mov	r8, r2
1000f534:	4699      	mov	r9, r3
1000f536:	46a2      	mov	sl, r4
1000f538:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f53a:	4ba7      	ldr	r3, [pc, #668]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f53c:	429c      	cmp	r4, r3
1000f53e:	d0c5      	beq.n	1000f4cc <__aeabi_dsub+0x58>
1000f540:	2380      	movs	r3, #128	; 0x80
1000f542:	041b      	lsls	r3, r3, #16
1000f544:	4318      	orrs	r0, r3
1000f546:	4663      	mov	r3, ip
1000f548:	2b38      	cmp	r3, #56	; 0x38
1000f54a:	dd00      	ble.n	1000f54e <__aeabi_dsub+0xda>
1000f54c:	e0fd      	b.n	1000f74a <__aeabi_dsub+0x2d6>
1000f54e:	2b1f      	cmp	r3, #31
1000f550:	dd00      	ble.n	1000f554 <__aeabi_dsub+0xe0>
1000f552:	e130      	b.n	1000f7b6 <__aeabi_dsub+0x342>
1000f554:	4662      	mov	r2, ip
1000f556:	2320      	movs	r3, #32
1000f558:	1a9b      	subs	r3, r3, r2
1000f55a:	0002      	movs	r2, r0
1000f55c:	409a      	lsls	r2, r3
1000f55e:	4666      	mov	r6, ip
1000f560:	4690      	mov	r8, r2
1000f562:	000a      	movs	r2, r1
1000f564:	4099      	lsls	r1, r3
1000f566:	40f2      	lsrs	r2, r6
1000f568:	4646      	mov	r6, r8
1000f56a:	1e4b      	subs	r3, r1, #1
1000f56c:	4199      	sbcs	r1, r3
1000f56e:	4332      	orrs	r2, r6
1000f570:	4311      	orrs	r1, r2
1000f572:	4663      	mov	r3, ip
1000f574:	0002      	movs	r2, r0
1000f576:	40da      	lsrs	r2, r3
1000f578:	1a69      	subs	r1, r5, r1
1000f57a:	428d      	cmp	r5, r1
1000f57c:	419b      	sbcs	r3, r3
1000f57e:	000d      	movs	r5, r1
1000f580:	1aba      	subs	r2, r7, r2
1000f582:	425b      	negs	r3, r3
1000f584:	1ad7      	subs	r7, r2, r3
1000f586:	023b      	lsls	r3, r7, #8
1000f588:	d535      	bpl.n	1000f5f6 <__aeabi_dsub+0x182>
1000f58a:	027a      	lsls	r2, r7, #9
1000f58c:	0a53      	lsrs	r3, r2, #9
1000f58e:	4698      	mov	r8, r3
1000f590:	4643      	mov	r3, r8
1000f592:	2b00      	cmp	r3, #0
1000f594:	d100      	bne.n	1000f598 <__aeabi_dsub+0x124>
1000f596:	e0c4      	b.n	1000f722 <__aeabi_dsub+0x2ae>
1000f598:	4640      	mov	r0, r8
1000f59a:	f000 fb6b 	bl	1000fc74 <__clzsi2>
1000f59e:	0003      	movs	r3, r0
1000f5a0:	3b08      	subs	r3, #8
1000f5a2:	2b1f      	cmp	r3, #31
1000f5a4:	dd00      	ble.n	1000f5a8 <__aeabi_dsub+0x134>
1000f5a6:	e0c5      	b.n	1000f734 <__aeabi_dsub+0x2c0>
1000f5a8:	2220      	movs	r2, #32
1000f5aa:	0029      	movs	r1, r5
1000f5ac:	1ad2      	subs	r2, r2, r3
1000f5ae:	4647      	mov	r7, r8
1000f5b0:	40d1      	lsrs	r1, r2
1000f5b2:	409f      	lsls	r7, r3
1000f5b4:	000a      	movs	r2, r1
1000f5b6:	409d      	lsls	r5, r3
1000f5b8:	433a      	orrs	r2, r7
1000f5ba:	429c      	cmp	r4, r3
1000f5bc:	dd00      	ble.n	1000f5c0 <__aeabi_dsub+0x14c>
1000f5be:	e0c0      	b.n	1000f742 <__aeabi_dsub+0x2ce>
1000f5c0:	1b1c      	subs	r4, r3, r4
1000f5c2:	1c63      	adds	r3, r4, #1
1000f5c4:	2b1f      	cmp	r3, #31
1000f5c6:	dd00      	ble.n	1000f5ca <__aeabi_dsub+0x156>
1000f5c8:	e0e4      	b.n	1000f794 <__aeabi_dsub+0x320>
1000f5ca:	2120      	movs	r1, #32
1000f5cc:	0014      	movs	r4, r2
1000f5ce:	0028      	movs	r0, r5
1000f5d0:	1ac9      	subs	r1, r1, r3
1000f5d2:	40d8      	lsrs	r0, r3
1000f5d4:	408c      	lsls	r4, r1
1000f5d6:	408d      	lsls	r5, r1
1000f5d8:	4304      	orrs	r4, r0
1000f5da:	40da      	lsrs	r2, r3
1000f5dc:	1e68      	subs	r0, r5, #1
1000f5de:	4185      	sbcs	r5, r0
1000f5e0:	0017      	movs	r7, r2
1000f5e2:	4325      	orrs	r5, r4
1000f5e4:	2400      	movs	r4, #0
1000f5e6:	e771      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f5e8:	4642      	mov	r2, r8
1000f5ea:	4663      	mov	r3, ip
1000f5ec:	431a      	orrs	r2, r3
1000f5ee:	d100      	bne.n	1000f5f2 <__aeabi_dsub+0x17e>
1000f5f0:	e24c      	b.n	1000fa8c <__aeabi_dsub+0x618>
1000f5f2:	4667      	mov	r7, ip
1000f5f4:	4645      	mov	r5, r8
1000f5f6:	076b      	lsls	r3, r5, #29
1000f5f8:	d000      	beq.n	1000f5fc <__aeabi_dsub+0x188>
1000f5fa:	e769      	b.n	1000f4d0 <__aeabi_dsub+0x5c>
1000f5fc:	2301      	movs	r3, #1
1000f5fe:	4651      	mov	r1, sl
1000f600:	0778      	lsls	r0, r7, #29
1000f602:	08ed      	lsrs	r5, r5, #3
1000f604:	08fa      	lsrs	r2, r7, #3
1000f606:	400b      	ands	r3, r1
1000f608:	4305      	orrs	r5, r0
1000f60a:	4973      	ldr	r1, [pc, #460]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f60c:	428c      	cmp	r4, r1
1000f60e:	d038      	beq.n	1000f682 <__aeabi_dsub+0x20e>
1000f610:	0312      	lsls	r2, r2, #12
1000f612:	0564      	lsls	r4, r4, #21
1000f614:	0b12      	lsrs	r2, r2, #12
1000f616:	0d64      	lsrs	r4, r4, #21
1000f618:	e779      	b.n	1000f50e <__aeabi_dsub+0x9a>
1000f61a:	2e00      	cmp	r6, #0
1000f61c:	dc00      	bgt.n	1000f620 <__aeabi_dsub+0x1ac>
1000f61e:	e09a      	b.n	1000f756 <__aeabi_dsub+0x2e2>
1000f620:	2a00      	cmp	r2, #0
1000f622:	d047      	beq.n	1000f6b4 <__aeabi_dsub+0x240>
1000f624:	4a6c      	ldr	r2, [pc, #432]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f626:	4294      	cmp	r4, r2
1000f628:	d100      	bne.n	1000f62c <__aeabi_dsub+0x1b8>
1000f62a:	e74f      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f62c:	2280      	movs	r2, #128	; 0x80
1000f62e:	0412      	lsls	r2, r2, #16
1000f630:	4310      	orrs	r0, r2
1000f632:	4662      	mov	r2, ip
1000f634:	2a38      	cmp	r2, #56	; 0x38
1000f636:	dc00      	bgt.n	1000f63a <__aeabi_dsub+0x1c6>
1000f638:	e108      	b.n	1000f84c <__aeabi_dsub+0x3d8>
1000f63a:	4301      	orrs	r1, r0
1000f63c:	1e48      	subs	r0, r1, #1
1000f63e:	4181      	sbcs	r1, r0
1000f640:	2200      	movs	r2, #0
1000f642:	b2c9      	uxtb	r1, r1
1000f644:	1949      	adds	r1, r1, r5
1000f646:	19d2      	adds	r2, r2, r7
1000f648:	42a9      	cmp	r1, r5
1000f64a:	41bf      	sbcs	r7, r7
1000f64c:	000d      	movs	r5, r1
1000f64e:	427f      	negs	r7, r7
1000f650:	18bf      	adds	r7, r7, r2
1000f652:	023a      	lsls	r2, r7, #8
1000f654:	d400      	bmi.n	1000f658 <__aeabi_dsub+0x1e4>
1000f656:	e142      	b.n	1000f8de <__aeabi_dsub+0x46a>
1000f658:	4a5f      	ldr	r2, [pc, #380]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f65a:	3401      	adds	r4, #1
1000f65c:	4294      	cmp	r4, r2
1000f65e:	d100      	bne.n	1000f662 <__aeabi_dsub+0x1ee>
1000f660:	e14e      	b.n	1000f900 <__aeabi_dsub+0x48c>
1000f662:	2001      	movs	r0, #1
1000f664:	4a5d      	ldr	r2, [pc, #372]	; (1000f7dc <__aeabi_dsub+0x368>)
1000f666:	0869      	lsrs	r1, r5, #1
1000f668:	403a      	ands	r2, r7
1000f66a:	4028      	ands	r0, r5
1000f66c:	4308      	orrs	r0, r1
1000f66e:	07d5      	lsls	r5, r2, #31
1000f670:	4305      	orrs	r5, r0
1000f672:	0857      	lsrs	r7, r2, #1
1000f674:	469a      	mov	sl, r3
1000f676:	e729      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f678:	0006      	movs	r6, r0
1000f67a:	430e      	orrs	r6, r1
1000f67c:	d000      	beq.n	1000f680 <__aeabi_dsub+0x20c>
1000f67e:	e717      	b.n	1000f4b0 <__aeabi_dsub+0x3c>
1000f680:	e714      	b.n	1000f4ac <__aeabi_dsub+0x38>
1000f682:	0029      	movs	r1, r5
1000f684:	4311      	orrs	r1, r2
1000f686:	d100      	bne.n	1000f68a <__aeabi_dsub+0x216>
1000f688:	e1f9      	b.n	1000fa7e <__aeabi_dsub+0x60a>
1000f68a:	2180      	movs	r1, #128	; 0x80
1000f68c:	0309      	lsls	r1, r1, #12
1000f68e:	430a      	orrs	r2, r1
1000f690:	0312      	lsls	r2, r2, #12
1000f692:	0b12      	lsrs	r2, r2, #12
1000f694:	e73b      	b.n	1000f50e <__aeabi_dsub+0x9a>
1000f696:	2301      	movs	r3, #1
1000f698:	425b      	negs	r3, r3
1000f69a:	4698      	mov	r8, r3
1000f69c:	44c4      	add	ip, r8
1000f69e:	4663      	mov	r3, ip
1000f6a0:	2b00      	cmp	r3, #0
1000f6a2:	d172      	bne.n	1000f78a <__aeabi_dsub+0x316>
1000f6a4:	1a69      	subs	r1, r5, r1
1000f6a6:	428d      	cmp	r5, r1
1000f6a8:	419b      	sbcs	r3, r3
1000f6aa:	1a3f      	subs	r7, r7, r0
1000f6ac:	425b      	negs	r3, r3
1000f6ae:	1aff      	subs	r7, r7, r3
1000f6b0:	000d      	movs	r5, r1
1000f6b2:	e768      	b.n	1000f586 <__aeabi_dsub+0x112>
1000f6b4:	0002      	movs	r2, r0
1000f6b6:	430a      	orrs	r2, r1
1000f6b8:	d100      	bne.n	1000f6bc <__aeabi_dsub+0x248>
1000f6ba:	e707      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f6bc:	2201      	movs	r2, #1
1000f6be:	4252      	negs	r2, r2
1000f6c0:	4690      	mov	r8, r2
1000f6c2:	44c4      	add	ip, r8
1000f6c4:	4662      	mov	r2, ip
1000f6c6:	2a00      	cmp	r2, #0
1000f6c8:	d000      	beq.n	1000f6cc <__aeabi_dsub+0x258>
1000f6ca:	e0e6      	b.n	1000f89a <__aeabi_dsub+0x426>
1000f6cc:	1869      	adds	r1, r5, r1
1000f6ce:	42a9      	cmp	r1, r5
1000f6d0:	41b6      	sbcs	r6, r6
1000f6d2:	183f      	adds	r7, r7, r0
1000f6d4:	4276      	negs	r6, r6
1000f6d6:	19f7      	adds	r7, r6, r7
1000f6d8:	000d      	movs	r5, r1
1000f6da:	e7ba      	b.n	1000f652 <__aeabi_dsub+0x1de>
1000f6dc:	2e00      	cmp	r6, #0
1000f6de:	d000      	beq.n	1000f6e2 <__aeabi_dsub+0x26e>
1000f6e0:	e080      	b.n	1000f7e4 <__aeabi_dsub+0x370>
1000f6e2:	1c62      	adds	r2, r4, #1
1000f6e4:	0552      	lsls	r2, r2, #21
1000f6e6:	0d52      	lsrs	r2, r2, #21
1000f6e8:	2a01      	cmp	r2, #1
1000f6ea:	dc00      	bgt.n	1000f6ee <__aeabi_dsub+0x27a>
1000f6ec:	e0f9      	b.n	1000f8e2 <__aeabi_dsub+0x46e>
1000f6ee:	1a6a      	subs	r2, r5, r1
1000f6f0:	4691      	mov	r9, r2
1000f6f2:	454d      	cmp	r5, r9
1000f6f4:	41b6      	sbcs	r6, r6
1000f6f6:	1a3a      	subs	r2, r7, r0
1000f6f8:	4276      	negs	r6, r6
1000f6fa:	1b92      	subs	r2, r2, r6
1000f6fc:	4690      	mov	r8, r2
1000f6fe:	0212      	lsls	r2, r2, #8
1000f700:	d400      	bmi.n	1000f704 <__aeabi_dsub+0x290>
1000f702:	e099      	b.n	1000f838 <__aeabi_dsub+0x3c4>
1000f704:	1b4d      	subs	r5, r1, r5
1000f706:	42a9      	cmp	r1, r5
1000f708:	4189      	sbcs	r1, r1
1000f70a:	1bc7      	subs	r7, r0, r7
1000f70c:	4249      	negs	r1, r1
1000f70e:	1a7a      	subs	r2, r7, r1
1000f710:	4690      	mov	r8, r2
1000f712:	469a      	mov	sl, r3
1000f714:	e73c      	b.n	1000f590 <__aeabi_dsub+0x11c>
1000f716:	4652      	mov	r2, sl
1000f718:	2301      	movs	r3, #1
1000f71a:	2500      	movs	r5, #0
1000f71c:	4013      	ands	r3, r2
1000f71e:	2200      	movs	r2, #0
1000f720:	e6f5      	b.n	1000f50e <__aeabi_dsub+0x9a>
1000f722:	0028      	movs	r0, r5
1000f724:	f000 faa6 	bl	1000fc74 <__clzsi2>
1000f728:	3020      	adds	r0, #32
1000f72a:	0003      	movs	r3, r0
1000f72c:	3b08      	subs	r3, #8
1000f72e:	2b1f      	cmp	r3, #31
1000f730:	dc00      	bgt.n	1000f734 <__aeabi_dsub+0x2c0>
1000f732:	e739      	b.n	1000f5a8 <__aeabi_dsub+0x134>
1000f734:	002a      	movs	r2, r5
1000f736:	3828      	subs	r0, #40	; 0x28
1000f738:	4082      	lsls	r2, r0
1000f73a:	2500      	movs	r5, #0
1000f73c:	429c      	cmp	r4, r3
1000f73e:	dc00      	bgt.n	1000f742 <__aeabi_dsub+0x2ce>
1000f740:	e73e      	b.n	1000f5c0 <__aeabi_dsub+0x14c>
1000f742:	4f26      	ldr	r7, [pc, #152]	; (1000f7dc <__aeabi_dsub+0x368>)
1000f744:	1ae4      	subs	r4, r4, r3
1000f746:	4017      	ands	r7, r2
1000f748:	e6c0      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f74a:	4301      	orrs	r1, r0
1000f74c:	1e48      	subs	r0, r1, #1
1000f74e:	4181      	sbcs	r1, r0
1000f750:	2200      	movs	r2, #0
1000f752:	b2c9      	uxtb	r1, r1
1000f754:	e710      	b.n	1000f578 <__aeabi_dsub+0x104>
1000f756:	2e00      	cmp	r6, #0
1000f758:	d000      	beq.n	1000f75c <__aeabi_dsub+0x2e8>
1000f75a:	e0f1      	b.n	1000f940 <__aeabi_dsub+0x4cc>
1000f75c:	1c62      	adds	r2, r4, #1
1000f75e:	4694      	mov	ip, r2
1000f760:	0552      	lsls	r2, r2, #21
1000f762:	0d52      	lsrs	r2, r2, #21
1000f764:	2a01      	cmp	r2, #1
1000f766:	dc00      	bgt.n	1000f76a <__aeabi_dsub+0x2f6>
1000f768:	e0a0      	b.n	1000f8ac <__aeabi_dsub+0x438>
1000f76a:	4a1b      	ldr	r2, [pc, #108]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f76c:	4594      	cmp	ip, r2
1000f76e:	d100      	bne.n	1000f772 <__aeabi_dsub+0x2fe>
1000f770:	e0c5      	b.n	1000f8fe <__aeabi_dsub+0x48a>
1000f772:	1869      	adds	r1, r5, r1
1000f774:	42a9      	cmp	r1, r5
1000f776:	4192      	sbcs	r2, r2
1000f778:	183f      	adds	r7, r7, r0
1000f77a:	4252      	negs	r2, r2
1000f77c:	19d2      	adds	r2, r2, r7
1000f77e:	0849      	lsrs	r1, r1, #1
1000f780:	07d5      	lsls	r5, r2, #31
1000f782:	430d      	orrs	r5, r1
1000f784:	0857      	lsrs	r7, r2, #1
1000f786:	4664      	mov	r4, ip
1000f788:	e6a0      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f78a:	4b13      	ldr	r3, [pc, #76]	; (1000f7d8 <__aeabi_dsub+0x364>)
1000f78c:	429c      	cmp	r4, r3
1000f78e:	d000      	beq.n	1000f792 <__aeabi_dsub+0x31e>
1000f790:	e6d9      	b.n	1000f546 <__aeabi_dsub+0xd2>
1000f792:	e69b      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f794:	0011      	movs	r1, r2
1000f796:	3c1f      	subs	r4, #31
1000f798:	40e1      	lsrs	r1, r4
1000f79a:	000c      	movs	r4, r1
1000f79c:	2b20      	cmp	r3, #32
1000f79e:	d100      	bne.n	1000f7a2 <__aeabi_dsub+0x32e>
1000f7a0:	e080      	b.n	1000f8a4 <__aeabi_dsub+0x430>
1000f7a2:	2140      	movs	r1, #64	; 0x40
1000f7a4:	1acb      	subs	r3, r1, r3
1000f7a6:	409a      	lsls	r2, r3
1000f7a8:	4315      	orrs	r5, r2
1000f7aa:	1e6a      	subs	r2, r5, #1
1000f7ac:	4195      	sbcs	r5, r2
1000f7ae:	2700      	movs	r7, #0
1000f7b0:	4325      	orrs	r5, r4
1000f7b2:	2400      	movs	r4, #0
1000f7b4:	e71f      	b.n	1000f5f6 <__aeabi_dsub+0x182>
1000f7b6:	4663      	mov	r3, ip
1000f7b8:	0002      	movs	r2, r0
1000f7ba:	3b20      	subs	r3, #32
1000f7bc:	40da      	lsrs	r2, r3
1000f7be:	4663      	mov	r3, ip
1000f7c0:	2b20      	cmp	r3, #32
1000f7c2:	d071      	beq.n	1000f8a8 <__aeabi_dsub+0x434>
1000f7c4:	2340      	movs	r3, #64	; 0x40
1000f7c6:	4666      	mov	r6, ip
1000f7c8:	1b9b      	subs	r3, r3, r6
1000f7ca:	4098      	lsls	r0, r3
1000f7cc:	4301      	orrs	r1, r0
1000f7ce:	1e48      	subs	r0, r1, #1
1000f7d0:	4181      	sbcs	r1, r0
1000f7d2:	4311      	orrs	r1, r2
1000f7d4:	2200      	movs	r2, #0
1000f7d6:	e6cf      	b.n	1000f578 <__aeabi_dsub+0x104>
1000f7d8:	000007ff 	.word	0x000007ff
1000f7dc:	ff7fffff 	.word	0xff7fffff
1000f7e0:	800fffff 	.word	0x800fffff
1000f7e4:	2c00      	cmp	r4, #0
1000f7e6:	d048      	beq.n	1000f87a <__aeabi_dsub+0x406>
1000f7e8:	4cca      	ldr	r4, [pc, #808]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000f7ea:	42a2      	cmp	r2, r4
1000f7ec:	d100      	bne.n	1000f7f0 <__aeabi_dsub+0x37c>
1000f7ee:	e0a2      	b.n	1000f936 <__aeabi_dsub+0x4c2>
1000f7f0:	4274      	negs	r4, r6
1000f7f2:	46a1      	mov	r9, r4
1000f7f4:	2480      	movs	r4, #128	; 0x80
1000f7f6:	0424      	lsls	r4, r4, #16
1000f7f8:	4327      	orrs	r7, r4
1000f7fa:	464c      	mov	r4, r9
1000f7fc:	2c38      	cmp	r4, #56	; 0x38
1000f7fe:	dd00      	ble.n	1000f802 <__aeabi_dsub+0x38e>
1000f800:	e0db      	b.n	1000f9ba <__aeabi_dsub+0x546>
1000f802:	2c1f      	cmp	r4, #31
1000f804:	dd00      	ble.n	1000f808 <__aeabi_dsub+0x394>
1000f806:	e144      	b.n	1000fa92 <__aeabi_dsub+0x61e>
1000f808:	464e      	mov	r6, r9
1000f80a:	2420      	movs	r4, #32
1000f80c:	1ba4      	subs	r4, r4, r6
1000f80e:	003e      	movs	r6, r7
1000f810:	40a6      	lsls	r6, r4
1000f812:	46a2      	mov	sl, r4
1000f814:	46b0      	mov	r8, r6
1000f816:	464c      	mov	r4, r9
1000f818:	002e      	movs	r6, r5
1000f81a:	40e6      	lsrs	r6, r4
1000f81c:	46b4      	mov	ip, r6
1000f81e:	4646      	mov	r6, r8
1000f820:	4664      	mov	r4, ip
1000f822:	4326      	orrs	r6, r4
1000f824:	4654      	mov	r4, sl
1000f826:	40a5      	lsls	r5, r4
1000f828:	1e6c      	subs	r4, r5, #1
1000f82a:	41a5      	sbcs	r5, r4
1000f82c:	0034      	movs	r4, r6
1000f82e:	432c      	orrs	r4, r5
1000f830:	464d      	mov	r5, r9
1000f832:	40ef      	lsrs	r7, r5
1000f834:	1b0d      	subs	r5, r1, r4
1000f836:	e028      	b.n	1000f88a <__aeabi_dsub+0x416>
1000f838:	464a      	mov	r2, r9
1000f83a:	4643      	mov	r3, r8
1000f83c:	464d      	mov	r5, r9
1000f83e:	431a      	orrs	r2, r3
1000f840:	d000      	beq.n	1000f844 <__aeabi_dsub+0x3d0>
1000f842:	e6a5      	b.n	1000f590 <__aeabi_dsub+0x11c>
1000f844:	2300      	movs	r3, #0
1000f846:	2400      	movs	r4, #0
1000f848:	2500      	movs	r5, #0
1000f84a:	e6de      	b.n	1000f60a <__aeabi_dsub+0x196>
1000f84c:	2a1f      	cmp	r2, #31
1000f84e:	dc5a      	bgt.n	1000f906 <__aeabi_dsub+0x492>
1000f850:	4666      	mov	r6, ip
1000f852:	2220      	movs	r2, #32
1000f854:	1b92      	subs	r2, r2, r6
1000f856:	0006      	movs	r6, r0
1000f858:	4096      	lsls	r6, r2
1000f85a:	4691      	mov	r9, r2
1000f85c:	46b0      	mov	r8, r6
1000f85e:	4662      	mov	r2, ip
1000f860:	000e      	movs	r6, r1
1000f862:	40d6      	lsrs	r6, r2
1000f864:	4642      	mov	r2, r8
1000f866:	4316      	orrs	r6, r2
1000f868:	464a      	mov	r2, r9
1000f86a:	4091      	lsls	r1, r2
1000f86c:	1e4a      	subs	r2, r1, #1
1000f86e:	4191      	sbcs	r1, r2
1000f870:	0002      	movs	r2, r0
1000f872:	4660      	mov	r0, ip
1000f874:	4331      	orrs	r1, r6
1000f876:	40c2      	lsrs	r2, r0
1000f878:	e6e4      	b.n	1000f644 <__aeabi_dsub+0x1d0>
1000f87a:	003c      	movs	r4, r7
1000f87c:	432c      	orrs	r4, r5
1000f87e:	d05a      	beq.n	1000f936 <__aeabi_dsub+0x4c2>
1000f880:	43f4      	mvns	r4, r6
1000f882:	46a1      	mov	r9, r4
1000f884:	2c00      	cmp	r4, #0
1000f886:	d152      	bne.n	1000f92e <__aeabi_dsub+0x4ba>
1000f888:	1b4d      	subs	r5, r1, r5
1000f88a:	42a9      	cmp	r1, r5
1000f88c:	4189      	sbcs	r1, r1
1000f88e:	1bc7      	subs	r7, r0, r7
1000f890:	4249      	negs	r1, r1
1000f892:	1a7f      	subs	r7, r7, r1
1000f894:	0014      	movs	r4, r2
1000f896:	469a      	mov	sl, r3
1000f898:	e675      	b.n	1000f586 <__aeabi_dsub+0x112>
1000f89a:	4a9e      	ldr	r2, [pc, #632]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000f89c:	4294      	cmp	r4, r2
1000f89e:	d000      	beq.n	1000f8a2 <__aeabi_dsub+0x42e>
1000f8a0:	e6c7      	b.n	1000f632 <__aeabi_dsub+0x1be>
1000f8a2:	e613      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f8a4:	2200      	movs	r2, #0
1000f8a6:	e77f      	b.n	1000f7a8 <__aeabi_dsub+0x334>
1000f8a8:	2000      	movs	r0, #0
1000f8aa:	e78f      	b.n	1000f7cc <__aeabi_dsub+0x358>
1000f8ac:	2c00      	cmp	r4, #0
1000f8ae:	d000      	beq.n	1000f8b2 <__aeabi_dsub+0x43e>
1000f8b0:	e0c8      	b.n	1000fa44 <__aeabi_dsub+0x5d0>
1000f8b2:	003b      	movs	r3, r7
1000f8b4:	432b      	orrs	r3, r5
1000f8b6:	d100      	bne.n	1000f8ba <__aeabi_dsub+0x446>
1000f8b8:	e10f      	b.n	1000fada <__aeabi_dsub+0x666>
1000f8ba:	0003      	movs	r3, r0
1000f8bc:	430b      	orrs	r3, r1
1000f8be:	d100      	bne.n	1000f8c2 <__aeabi_dsub+0x44e>
1000f8c0:	e604      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f8c2:	1869      	adds	r1, r5, r1
1000f8c4:	42a9      	cmp	r1, r5
1000f8c6:	419b      	sbcs	r3, r3
1000f8c8:	183f      	adds	r7, r7, r0
1000f8ca:	425b      	negs	r3, r3
1000f8cc:	19df      	adds	r7, r3, r7
1000f8ce:	023b      	lsls	r3, r7, #8
1000f8d0:	d400      	bmi.n	1000f8d4 <__aeabi_dsub+0x460>
1000f8d2:	e11a      	b.n	1000fb0a <__aeabi_dsub+0x696>
1000f8d4:	4b90      	ldr	r3, [pc, #576]	; (1000fb18 <__aeabi_dsub+0x6a4>)
1000f8d6:	000d      	movs	r5, r1
1000f8d8:	401f      	ands	r7, r3
1000f8da:	4664      	mov	r4, ip
1000f8dc:	e5f6      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f8de:	469a      	mov	sl, r3
1000f8e0:	e689      	b.n	1000f5f6 <__aeabi_dsub+0x182>
1000f8e2:	003a      	movs	r2, r7
1000f8e4:	432a      	orrs	r2, r5
1000f8e6:	2c00      	cmp	r4, #0
1000f8e8:	d15c      	bne.n	1000f9a4 <__aeabi_dsub+0x530>
1000f8ea:	2a00      	cmp	r2, #0
1000f8ec:	d175      	bne.n	1000f9da <__aeabi_dsub+0x566>
1000f8ee:	0002      	movs	r2, r0
1000f8f0:	430a      	orrs	r2, r1
1000f8f2:	d100      	bne.n	1000f8f6 <__aeabi_dsub+0x482>
1000f8f4:	e0ca      	b.n	1000fa8c <__aeabi_dsub+0x618>
1000f8f6:	0007      	movs	r7, r0
1000f8f8:	000d      	movs	r5, r1
1000f8fa:	469a      	mov	sl, r3
1000f8fc:	e5e6      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f8fe:	4664      	mov	r4, ip
1000f900:	2200      	movs	r2, #0
1000f902:	2500      	movs	r5, #0
1000f904:	e681      	b.n	1000f60a <__aeabi_dsub+0x196>
1000f906:	4662      	mov	r2, ip
1000f908:	0006      	movs	r6, r0
1000f90a:	3a20      	subs	r2, #32
1000f90c:	40d6      	lsrs	r6, r2
1000f90e:	4662      	mov	r2, ip
1000f910:	46b0      	mov	r8, r6
1000f912:	2a20      	cmp	r2, #32
1000f914:	d100      	bne.n	1000f918 <__aeabi_dsub+0x4a4>
1000f916:	e0b7      	b.n	1000fa88 <__aeabi_dsub+0x614>
1000f918:	2240      	movs	r2, #64	; 0x40
1000f91a:	4666      	mov	r6, ip
1000f91c:	1b92      	subs	r2, r2, r6
1000f91e:	4090      	lsls	r0, r2
1000f920:	4301      	orrs	r1, r0
1000f922:	4642      	mov	r2, r8
1000f924:	1e48      	subs	r0, r1, #1
1000f926:	4181      	sbcs	r1, r0
1000f928:	4311      	orrs	r1, r2
1000f92a:	2200      	movs	r2, #0
1000f92c:	e68a      	b.n	1000f644 <__aeabi_dsub+0x1d0>
1000f92e:	4c79      	ldr	r4, [pc, #484]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000f930:	42a2      	cmp	r2, r4
1000f932:	d000      	beq.n	1000f936 <__aeabi_dsub+0x4c2>
1000f934:	e761      	b.n	1000f7fa <__aeabi_dsub+0x386>
1000f936:	0007      	movs	r7, r0
1000f938:	000d      	movs	r5, r1
1000f93a:	0014      	movs	r4, r2
1000f93c:	469a      	mov	sl, r3
1000f93e:	e5c5      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f940:	2c00      	cmp	r4, #0
1000f942:	d141      	bne.n	1000f9c8 <__aeabi_dsub+0x554>
1000f944:	003c      	movs	r4, r7
1000f946:	432c      	orrs	r4, r5
1000f948:	d078      	beq.n	1000fa3c <__aeabi_dsub+0x5c8>
1000f94a:	43f4      	mvns	r4, r6
1000f94c:	46a1      	mov	r9, r4
1000f94e:	2c00      	cmp	r4, #0
1000f950:	d020      	beq.n	1000f994 <__aeabi_dsub+0x520>
1000f952:	4c70      	ldr	r4, [pc, #448]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000f954:	42a2      	cmp	r2, r4
1000f956:	d071      	beq.n	1000fa3c <__aeabi_dsub+0x5c8>
1000f958:	464c      	mov	r4, r9
1000f95a:	2c38      	cmp	r4, #56	; 0x38
1000f95c:	dd00      	ble.n	1000f960 <__aeabi_dsub+0x4ec>
1000f95e:	e0b2      	b.n	1000fac6 <__aeabi_dsub+0x652>
1000f960:	2c1f      	cmp	r4, #31
1000f962:	dd00      	ble.n	1000f966 <__aeabi_dsub+0x4f2>
1000f964:	e0bc      	b.n	1000fae0 <__aeabi_dsub+0x66c>
1000f966:	2620      	movs	r6, #32
1000f968:	1b34      	subs	r4, r6, r4
1000f96a:	46a2      	mov	sl, r4
1000f96c:	003c      	movs	r4, r7
1000f96e:	4656      	mov	r6, sl
1000f970:	40b4      	lsls	r4, r6
1000f972:	464e      	mov	r6, r9
1000f974:	46a0      	mov	r8, r4
1000f976:	002c      	movs	r4, r5
1000f978:	40f4      	lsrs	r4, r6
1000f97a:	46a4      	mov	ip, r4
1000f97c:	4644      	mov	r4, r8
1000f97e:	4666      	mov	r6, ip
1000f980:	4334      	orrs	r4, r6
1000f982:	46a4      	mov	ip, r4
1000f984:	4654      	mov	r4, sl
1000f986:	40a5      	lsls	r5, r4
1000f988:	4664      	mov	r4, ip
1000f98a:	1e6e      	subs	r6, r5, #1
1000f98c:	41b5      	sbcs	r5, r6
1000f98e:	4325      	orrs	r5, r4
1000f990:	464c      	mov	r4, r9
1000f992:	40e7      	lsrs	r7, r4
1000f994:	186d      	adds	r5, r5, r1
1000f996:	428d      	cmp	r5, r1
1000f998:	4189      	sbcs	r1, r1
1000f99a:	183f      	adds	r7, r7, r0
1000f99c:	4249      	negs	r1, r1
1000f99e:	19cf      	adds	r7, r1, r7
1000f9a0:	0014      	movs	r4, r2
1000f9a2:	e656      	b.n	1000f652 <__aeabi_dsub+0x1de>
1000f9a4:	2a00      	cmp	r2, #0
1000f9a6:	d12f      	bne.n	1000fa08 <__aeabi_dsub+0x594>
1000f9a8:	0002      	movs	r2, r0
1000f9aa:	430a      	orrs	r2, r1
1000f9ac:	d100      	bne.n	1000f9b0 <__aeabi_dsub+0x53c>
1000f9ae:	e084      	b.n	1000faba <__aeabi_dsub+0x646>
1000f9b0:	0007      	movs	r7, r0
1000f9b2:	000d      	movs	r5, r1
1000f9b4:	469a      	mov	sl, r3
1000f9b6:	4c57      	ldr	r4, [pc, #348]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000f9b8:	e588      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f9ba:	433d      	orrs	r5, r7
1000f9bc:	1e6f      	subs	r7, r5, #1
1000f9be:	41bd      	sbcs	r5, r7
1000f9c0:	b2ec      	uxtb	r4, r5
1000f9c2:	2700      	movs	r7, #0
1000f9c4:	1b0d      	subs	r5, r1, r4
1000f9c6:	e760      	b.n	1000f88a <__aeabi_dsub+0x416>
1000f9c8:	4c52      	ldr	r4, [pc, #328]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000f9ca:	42a2      	cmp	r2, r4
1000f9cc:	d036      	beq.n	1000fa3c <__aeabi_dsub+0x5c8>
1000f9ce:	4274      	negs	r4, r6
1000f9d0:	2680      	movs	r6, #128	; 0x80
1000f9d2:	0436      	lsls	r6, r6, #16
1000f9d4:	46a1      	mov	r9, r4
1000f9d6:	4337      	orrs	r7, r6
1000f9d8:	e7be      	b.n	1000f958 <__aeabi_dsub+0x4e4>
1000f9da:	0002      	movs	r2, r0
1000f9dc:	430a      	orrs	r2, r1
1000f9de:	d100      	bne.n	1000f9e2 <__aeabi_dsub+0x56e>
1000f9e0:	e574      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000f9e2:	1a6a      	subs	r2, r5, r1
1000f9e4:	4690      	mov	r8, r2
1000f9e6:	4545      	cmp	r5, r8
1000f9e8:	41b6      	sbcs	r6, r6
1000f9ea:	1a3a      	subs	r2, r7, r0
1000f9ec:	4276      	negs	r6, r6
1000f9ee:	1b92      	subs	r2, r2, r6
1000f9f0:	4694      	mov	ip, r2
1000f9f2:	0212      	lsls	r2, r2, #8
1000f9f4:	d400      	bmi.n	1000f9f8 <__aeabi_dsub+0x584>
1000f9f6:	e5f7      	b.n	1000f5e8 <__aeabi_dsub+0x174>
1000f9f8:	1b4d      	subs	r5, r1, r5
1000f9fa:	42a9      	cmp	r1, r5
1000f9fc:	4189      	sbcs	r1, r1
1000f9fe:	1bc7      	subs	r7, r0, r7
1000fa00:	4249      	negs	r1, r1
1000fa02:	1a7f      	subs	r7, r7, r1
1000fa04:	469a      	mov	sl, r3
1000fa06:	e561      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fa08:	0002      	movs	r2, r0
1000fa0a:	430a      	orrs	r2, r1
1000fa0c:	d03a      	beq.n	1000fa84 <__aeabi_dsub+0x610>
1000fa0e:	08ed      	lsrs	r5, r5, #3
1000fa10:	077c      	lsls	r4, r7, #29
1000fa12:	432c      	orrs	r4, r5
1000fa14:	2580      	movs	r5, #128	; 0x80
1000fa16:	08fa      	lsrs	r2, r7, #3
1000fa18:	032d      	lsls	r5, r5, #12
1000fa1a:	422a      	tst	r2, r5
1000fa1c:	d008      	beq.n	1000fa30 <__aeabi_dsub+0x5bc>
1000fa1e:	08c7      	lsrs	r7, r0, #3
1000fa20:	422f      	tst	r7, r5
1000fa22:	d105      	bne.n	1000fa30 <__aeabi_dsub+0x5bc>
1000fa24:	0745      	lsls	r5, r0, #29
1000fa26:	002c      	movs	r4, r5
1000fa28:	003a      	movs	r2, r7
1000fa2a:	469a      	mov	sl, r3
1000fa2c:	08c9      	lsrs	r1, r1, #3
1000fa2e:	430c      	orrs	r4, r1
1000fa30:	0f67      	lsrs	r7, r4, #29
1000fa32:	00d2      	lsls	r2, r2, #3
1000fa34:	00e5      	lsls	r5, r4, #3
1000fa36:	4317      	orrs	r7, r2
1000fa38:	4c36      	ldr	r4, [pc, #216]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000fa3a:	e547      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fa3c:	0007      	movs	r7, r0
1000fa3e:	000d      	movs	r5, r1
1000fa40:	0014      	movs	r4, r2
1000fa42:	e543      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fa44:	003a      	movs	r2, r7
1000fa46:	432a      	orrs	r2, r5
1000fa48:	d043      	beq.n	1000fad2 <__aeabi_dsub+0x65e>
1000fa4a:	0002      	movs	r2, r0
1000fa4c:	430a      	orrs	r2, r1
1000fa4e:	d019      	beq.n	1000fa84 <__aeabi_dsub+0x610>
1000fa50:	08ed      	lsrs	r5, r5, #3
1000fa52:	077c      	lsls	r4, r7, #29
1000fa54:	432c      	orrs	r4, r5
1000fa56:	2580      	movs	r5, #128	; 0x80
1000fa58:	08fa      	lsrs	r2, r7, #3
1000fa5a:	032d      	lsls	r5, r5, #12
1000fa5c:	422a      	tst	r2, r5
1000fa5e:	d007      	beq.n	1000fa70 <__aeabi_dsub+0x5fc>
1000fa60:	08c6      	lsrs	r6, r0, #3
1000fa62:	422e      	tst	r6, r5
1000fa64:	d104      	bne.n	1000fa70 <__aeabi_dsub+0x5fc>
1000fa66:	0747      	lsls	r7, r0, #29
1000fa68:	003c      	movs	r4, r7
1000fa6a:	0032      	movs	r2, r6
1000fa6c:	08c9      	lsrs	r1, r1, #3
1000fa6e:	430c      	orrs	r4, r1
1000fa70:	00d7      	lsls	r7, r2, #3
1000fa72:	0f62      	lsrs	r2, r4, #29
1000fa74:	00e5      	lsls	r5, r4, #3
1000fa76:	4317      	orrs	r7, r2
1000fa78:	469a      	mov	sl, r3
1000fa7a:	4c26      	ldr	r4, [pc, #152]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000fa7c:	e526      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fa7e:	2200      	movs	r2, #0
1000fa80:	2500      	movs	r5, #0
1000fa82:	e544      	b.n	1000f50e <__aeabi_dsub+0x9a>
1000fa84:	4c23      	ldr	r4, [pc, #140]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000fa86:	e521      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fa88:	2000      	movs	r0, #0
1000fa8a:	e749      	b.n	1000f920 <__aeabi_dsub+0x4ac>
1000fa8c:	2300      	movs	r3, #0
1000fa8e:	2500      	movs	r5, #0
1000fa90:	e5bb      	b.n	1000f60a <__aeabi_dsub+0x196>
1000fa92:	464c      	mov	r4, r9
1000fa94:	003e      	movs	r6, r7
1000fa96:	3c20      	subs	r4, #32
1000fa98:	40e6      	lsrs	r6, r4
1000fa9a:	464c      	mov	r4, r9
1000fa9c:	46b4      	mov	ip, r6
1000fa9e:	2c20      	cmp	r4, #32
1000faa0:	d031      	beq.n	1000fb06 <__aeabi_dsub+0x692>
1000faa2:	2440      	movs	r4, #64	; 0x40
1000faa4:	464e      	mov	r6, r9
1000faa6:	1ba6      	subs	r6, r4, r6
1000faa8:	40b7      	lsls	r7, r6
1000faaa:	433d      	orrs	r5, r7
1000faac:	1e6c      	subs	r4, r5, #1
1000faae:	41a5      	sbcs	r5, r4
1000fab0:	4664      	mov	r4, ip
1000fab2:	432c      	orrs	r4, r5
1000fab4:	2700      	movs	r7, #0
1000fab6:	1b0d      	subs	r5, r1, r4
1000fab8:	e6e7      	b.n	1000f88a <__aeabi_dsub+0x416>
1000faba:	2280      	movs	r2, #128	; 0x80
1000fabc:	2300      	movs	r3, #0
1000fabe:	0312      	lsls	r2, r2, #12
1000fac0:	4c14      	ldr	r4, [pc, #80]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000fac2:	2500      	movs	r5, #0
1000fac4:	e5a1      	b.n	1000f60a <__aeabi_dsub+0x196>
1000fac6:	433d      	orrs	r5, r7
1000fac8:	1e6f      	subs	r7, r5, #1
1000faca:	41bd      	sbcs	r5, r7
1000facc:	2700      	movs	r7, #0
1000face:	b2ed      	uxtb	r5, r5
1000fad0:	e760      	b.n	1000f994 <__aeabi_dsub+0x520>
1000fad2:	0007      	movs	r7, r0
1000fad4:	000d      	movs	r5, r1
1000fad6:	4c0f      	ldr	r4, [pc, #60]	; (1000fb14 <__aeabi_dsub+0x6a0>)
1000fad8:	e4f8      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fada:	0007      	movs	r7, r0
1000fadc:	000d      	movs	r5, r1
1000fade:	e4f5      	b.n	1000f4cc <__aeabi_dsub+0x58>
1000fae0:	464e      	mov	r6, r9
1000fae2:	003c      	movs	r4, r7
1000fae4:	3e20      	subs	r6, #32
1000fae6:	40f4      	lsrs	r4, r6
1000fae8:	46a0      	mov	r8, r4
1000faea:	464c      	mov	r4, r9
1000faec:	2c20      	cmp	r4, #32
1000faee:	d00e      	beq.n	1000fb0e <__aeabi_dsub+0x69a>
1000faf0:	2440      	movs	r4, #64	; 0x40
1000faf2:	464e      	mov	r6, r9
1000faf4:	1ba4      	subs	r4, r4, r6
1000faf6:	40a7      	lsls	r7, r4
1000faf8:	433d      	orrs	r5, r7
1000fafa:	1e6f      	subs	r7, r5, #1
1000fafc:	41bd      	sbcs	r5, r7
1000fafe:	4644      	mov	r4, r8
1000fb00:	2700      	movs	r7, #0
1000fb02:	4325      	orrs	r5, r4
1000fb04:	e746      	b.n	1000f994 <__aeabi_dsub+0x520>
1000fb06:	2700      	movs	r7, #0
1000fb08:	e7cf      	b.n	1000faaa <__aeabi_dsub+0x636>
1000fb0a:	000d      	movs	r5, r1
1000fb0c:	e573      	b.n	1000f5f6 <__aeabi_dsub+0x182>
1000fb0e:	2700      	movs	r7, #0
1000fb10:	e7f2      	b.n	1000faf8 <__aeabi_dsub+0x684>
1000fb12:	46c0      	nop			; (mov r8, r8)
1000fb14:	000007ff 	.word	0x000007ff
1000fb18:	ff7fffff 	.word	0xff7fffff

1000fb1c <__aeabi_d2iz>:
1000fb1c:	030b      	lsls	r3, r1, #12
1000fb1e:	b530      	push	{r4, r5, lr}
1000fb20:	4d13      	ldr	r5, [pc, #76]	; (1000fb70 <__aeabi_d2iz+0x54>)
1000fb22:	0b1a      	lsrs	r2, r3, #12
1000fb24:	004b      	lsls	r3, r1, #1
1000fb26:	0d5b      	lsrs	r3, r3, #21
1000fb28:	0fc9      	lsrs	r1, r1, #31
1000fb2a:	2400      	movs	r4, #0
1000fb2c:	42ab      	cmp	r3, r5
1000fb2e:	dd11      	ble.n	1000fb54 <__aeabi_d2iz+0x38>
1000fb30:	4c10      	ldr	r4, [pc, #64]	; (1000fb74 <__aeabi_d2iz+0x58>)
1000fb32:	42a3      	cmp	r3, r4
1000fb34:	dc10      	bgt.n	1000fb58 <__aeabi_d2iz+0x3c>
1000fb36:	2480      	movs	r4, #128	; 0x80
1000fb38:	0364      	lsls	r4, r4, #13
1000fb3a:	4322      	orrs	r2, r4
1000fb3c:	4c0e      	ldr	r4, [pc, #56]	; (1000fb78 <__aeabi_d2iz+0x5c>)
1000fb3e:	1ae4      	subs	r4, r4, r3
1000fb40:	2c1f      	cmp	r4, #31
1000fb42:	dd0c      	ble.n	1000fb5e <__aeabi_d2iz+0x42>
1000fb44:	480d      	ldr	r0, [pc, #52]	; (1000fb7c <__aeabi_d2iz+0x60>)
1000fb46:	1ac3      	subs	r3, r0, r3
1000fb48:	40da      	lsrs	r2, r3
1000fb4a:	0013      	movs	r3, r2
1000fb4c:	425c      	negs	r4, r3
1000fb4e:	2900      	cmp	r1, #0
1000fb50:	d100      	bne.n	1000fb54 <__aeabi_d2iz+0x38>
1000fb52:	001c      	movs	r4, r3
1000fb54:	0020      	movs	r0, r4
1000fb56:	bd30      	pop	{r4, r5, pc}
1000fb58:	4b09      	ldr	r3, [pc, #36]	; (1000fb80 <__aeabi_d2iz+0x64>)
1000fb5a:	18cc      	adds	r4, r1, r3
1000fb5c:	e7fa      	b.n	1000fb54 <__aeabi_d2iz+0x38>
1000fb5e:	40e0      	lsrs	r0, r4
1000fb60:	4c08      	ldr	r4, [pc, #32]	; (1000fb84 <__aeabi_d2iz+0x68>)
1000fb62:	46a4      	mov	ip, r4
1000fb64:	4463      	add	r3, ip
1000fb66:	409a      	lsls	r2, r3
1000fb68:	0013      	movs	r3, r2
1000fb6a:	4303      	orrs	r3, r0
1000fb6c:	e7ee      	b.n	1000fb4c <__aeabi_d2iz+0x30>
1000fb6e:	46c0      	nop			; (mov r8, r8)
1000fb70:	000003fe 	.word	0x000003fe
1000fb74:	0000041d 	.word	0x0000041d
1000fb78:	00000433 	.word	0x00000433
1000fb7c:	00000413 	.word	0x00000413
1000fb80:	7fffffff 	.word	0x7fffffff
1000fb84:	fffffbed 	.word	0xfffffbed

1000fb88 <__aeabi_ui2d>:
1000fb88:	b570      	push	{r4, r5, r6, lr}
1000fb8a:	1e05      	subs	r5, r0, #0
1000fb8c:	d028      	beq.n	1000fbe0 <__aeabi_ui2d+0x58>
1000fb8e:	f000 f871 	bl	1000fc74 <__clzsi2>
1000fb92:	4b15      	ldr	r3, [pc, #84]	; (1000fbe8 <__aeabi_ui2d+0x60>)
1000fb94:	4a15      	ldr	r2, [pc, #84]	; (1000fbec <__aeabi_ui2d+0x64>)
1000fb96:	1a1b      	subs	r3, r3, r0
1000fb98:	1ad2      	subs	r2, r2, r3
1000fb9a:	2a1f      	cmp	r2, #31
1000fb9c:	dd16      	ble.n	1000fbcc <__aeabi_ui2d+0x44>
1000fb9e:	002c      	movs	r4, r5
1000fba0:	4a13      	ldr	r2, [pc, #76]	; (1000fbf0 <__aeabi_ui2d+0x68>)
1000fba2:	2500      	movs	r5, #0
1000fba4:	1ad2      	subs	r2, r2, r3
1000fba6:	4094      	lsls	r4, r2
1000fba8:	055a      	lsls	r2, r3, #21
1000fbaa:	0324      	lsls	r4, r4, #12
1000fbac:	0b24      	lsrs	r4, r4, #12
1000fbae:	0d52      	lsrs	r2, r2, #21
1000fbb0:	2100      	movs	r1, #0
1000fbb2:	0324      	lsls	r4, r4, #12
1000fbb4:	0d0b      	lsrs	r3, r1, #20
1000fbb6:	0b24      	lsrs	r4, r4, #12
1000fbb8:	051b      	lsls	r3, r3, #20
1000fbba:	4323      	orrs	r3, r4
1000fbbc:	4c0d      	ldr	r4, [pc, #52]	; (1000fbf4 <__aeabi_ui2d+0x6c>)
1000fbbe:	0512      	lsls	r2, r2, #20
1000fbc0:	4023      	ands	r3, r4
1000fbc2:	4313      	orrs	r3, r2
1000fbc4:	005b      	lsls	r3, r3, #1
1000fbc6:	0028      	movs	r0, r5
1000fbc8:	0859      	lsrs	r1, r3, #1
1000fbca:	bd70      	pop	{r4, r5, r6, pc}
1000fbcc:	210b      	movs	r1, #11
1000fbce:	002c      	movs	r4, r5
1000fbd0:	1a08      	subs	r0, r1, r0
1000fbd2:	40c4      	lsrs	r4, r0
1000fbd4:	4095      	lsls	r5, r2
1000fbd6:	0324      	lsls	r4, r4, #12
1000fbd8:	055a      	lsls	r2, r3, #21
1000fbda:	0b24      	lsrs	r4, r4, #12
1000fbdc:	0d52      	lsrs	r2, r2, #21
1000fbde:	e7e7      	b.n	1000fbb0 <__aeabi_ui2d+0x28>
1000fbe0:	2200      	movs	r2, #0
1000fbe2:	2400      	movs	r4, #0
1000fbe4:	e7e4      	b.n	1000fbb0 <__aeabi_ui2d+0x28>
1000fbe6:	46c0      	nop			; (mov r8, r8)
1000fbe8:	0000041e 	.word	0x0000041e
1000fbec:	00000433 	.word	0x00000433
1000fbf0:	00000413 	.word	0x00000413
1000fbf4:	800fffff 	.word	0x800fffff

1000fbf8 <__aeabi_cdrcmple>:
1000fbf8:	4684      	mov	ip, r0
1000fbfa:	1c10      	adds	r0, r2, #0
1000fbfc:	4662      	mov	r2, ip
1000fbfe:	468c      	mov	ip, r1
1000fc00:	1c19      	adds	r1, r3, #0
1000fc02:	4663      	mov	r3, ip
1000fc04:	e000      	b.n	1000fc08 <__aeabi_cdcmpeq>
1000fc06:	46c0      	nop			; (mov r8, r8)

1000fc08 <__aeabi_cdcmpeq>:
1000fc08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000fc0a:	f000 f8f5 	bl	1000fdf8 <__ledf2>
1000fc0e:	2800      	cmp	r0, #0
1000fc10:	d401      	bmi.n	1000fc16 <__aeabi_cdcmpeq+0xe>
1000fc12:	2100      	movs	r1, #0
1000fc14:	42c8      	cmn	r0, r1
1000fc16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000fc18 <__aeabi_dcmpeq>:
1000fc18:	b510      	push	{r4, lr}
1000fc1a:	f000 f849 	bl	1000fcb0 <__eqdf2>
1000fc1e:	4240      	negs	r0, r0
1000fc20:	3001      	adds	r0, #1
1000fc22:	bd10      	pop	{r4, pc}

1000fc24 <__aeabi_dcmplt>:
1000fc24:	b510      	push	{r4, lr}
1000fc26:	f000 f8e7 	bl	1000fdf8 <__ledf2>
1000fc2a:	2800      	cmp	r0, #0
1000fc2c:	db01      	blt.n	1000fc32 <__aeabi_dcmplt+0xe>
1000fc2e:	2000      	movs	r0, #0
1000fc30:	bd10      	pop	{r4, pc}
1000fc32:	2001      	movs	r0, #1
1000fc34:	bd10      	pop	{r4, pc}
1000fc36:	46c0      	nop			; (mov r8, r8)

1000fc38 <__aeabi_dcmple>:
1000fc38:	b510      	push	{r4, lr}
1000fc3a:	f000 f8dd 	bl	1000fdf8 <__ledf2>
1000fc3e:	2800      	cmp	r0, #0
1000fc40:	dd01      	ble.n	1000fc46 <__aeabi_dcmple+0xe>
1000fc42:	2000      	movs	r0, #0
1000fc44:	bd10      	pop	{r4, pc}
1000fc46:	2001      	movs	r0, #1
1000fc48:	bd10      	pop	{r4, pc}
1000fc4a:	46c0      	nop			; (mov r8, r8)

1000fc4c <__aeabi_dcmpgt>:
1000fc4c:	b510      	push	{r4, lr}
1000fc4e:	f000 f86f 	bl	1000fd30 <__gedf2>
1000fc52:	2800      	cmp	r0, #0
1000fc54:	dc01      	bgt.n	1000fc5a <__aeabi_dcmpgt+0xe>
1000fc56:	2000      	movs	r0, #0
1000fc58:	bd10      	pop	{r4, pc}
1000fc5a:	2001      	movs	r0, #1
1000fc5c:	bd10      	pop	{r4, pc}
1000fc5e:	46c0      	nop			; (mov r8, r8)

1000fc60 <__aeabi_dcmpge>:
1000fc60:	b510      	push	{r4, lr}
1000fc62:	f000 f865 	bl	1000fd30 <__gedf2>
1000fc66:	2800      	cmp	r0, #0
1000fc68:	da01      	bge.n	1000fc6e <__aeabi_dcmpge+0xe>
1000fc6a:	2000      	movs	r0, #0
1000fc6c:	bd10      	pop	{r4, pc}
1000fc6e:	2001      	movs	r0, #1
1000fc70:	bd10      	pop	{r4, pc}
1000fc72:	46c0      	nop			; (mov r8, r8)

1000fc74 <__clzsi2>:
1000fc74:	211c      	movs	r1, #28
1000fc76:	2301      	movs	r3, #1
1000fc78:	041b      	lsls	r3, r3, #16
1000fc7a:	4298      	cmp	r0, r3
1000fc7c:	d301      	bcc.n	1000fc82 <__clzsi2+0xe>
1000fc7e:	0c00      	lsrs	r0, r0, #16
1000fc80:	3910      	subs	r1, #16
1000fc82:	0a1b      	lsrs	r3, r3, #8
1000fc84:	4298      	cmp	r0, r3
1000fc86:	d301      	bcc.n	1000fc8c <__clzsi2+0x18>
1000fc88:	0a00      	lsrs	r0, r0, #8
1000fc8a:	3908      	subs	r1, #8
1000fc8c:	091b      	lsrs	r3, r3, #4
1000fc8e:	4298      	cmp	r0, r3
1000fc90:	d301      	bcc.n	1000fc96 <__clzsi2+0x22>
1000fc92:	0900      	lsrs	r0, r0, #4
1000fc94:	3904      	subs	r1, #4
1000fc96:	a202      	add	r2, pc, #8	; (adr r2, 1000fca0 <__clzsi2+0x2c>)
1000fc98:	5c10      	ldrb	r0, [r2, r0]
1000fc9a:	1840      	adds	r0, r0, r1
1000fc9c:	4770      	bx	lr
1000fc9e:	46c0      	nop			; (mov r8, r8)
1000fca0:	02020304 	.word	0x02020304
1000fca4:	01010101 	.word	0x01010101
	...

1000fcb0 <__eqdf2>:
1000fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcb2:	465f      	mov	r7, fp
1000fcb4:	4656      	mov	r6, sl
1000fcb6:	464d      	mov	r5, r9
1000fcb8:	4644      	mov	r4, r8
1000fcba:	b4f0      	push	{r4, r5, r6, r7}
1000fcbc:	031f      	lsls	r7, r3, #12
1000fcbe:	005c      	lsls	r4, r3, #1
1000fcc0:	0fdb      	lsrs	r3, r3, #31
1000fcc2:	469a      	mov	sl, r3
1000fcc4:	4b19      	ldr	r3, [pc, #100]	; (1000fd2c <__eqdf2+0x7c>)
1000fcc6:	030e      	lsls	r6, r1, #12
1000fcc8:	004d      	lsls	r5, r1, #1
1000fcca:	0fc9      	lsrs	r1, r1, #31
1000fccc:	4680      	mov	r8, r0
1000fcce:	0b36      	lsrs	r6, r6, #12
1000fcd0:	0d6d      	lsrs	r5, r5, #21
1000fcd2:	468b      	mov	fp, r1
1000fcd4:	4691      	mov	r9, r2
1000fcd6:	0b3f      	lsrs	r7, r7, #12
1000fcd8:	0d64      	lsrs	r4, r4, #21
1000fcda:	429d      	cmp	r5, r3
1000fcdc:	d019      	beq.n	1000fd12 <__eqdf2+0x62>
1000fcde:	4b13      	ldr	r3, [pc, #76]	; (1000fd2c <__eqdf2+0x7c>)
1000fce0:	429c      	cmp	r4, r3
1000fce2:	d01b      	beq.n	1000fd1c <__eqdf2+0x6c>
1000fce4:	2301      	movs	r3, #1
1000fce6:	42a5      	cmp	r5, r4
1000fce8:	d006      	beq.n	1000fcf8 <__eqdf2+0x48>
1000fcea:	0018      	movs	r0, r3
1000fcec:	bc3c      	pop	{r2, r3, r4, r5}
1000fcee:	4690      	mov	r8, r2
1000fcf0:	4699      	mov	r9, r3
1000fcf2:	46a2      	mov	sl, r4
1000fcf4:	46ab      	mov	fp, r5
1000fcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fcf8:	42be      	cmp	r6, r7
1000fcfa:	d1f6      	bne.n	1000fcea <__eqdf2+0x3a>
1000fcfc:	45c8      	cmp	r8, r9
1000fcfe:	d1f4      	bne.n	1000fcea <__eqdf2+0x3a>
1000fd00:	45d3      	cmp	fp, sl
1000fd02:	d010      	beq.n	1000fd26 <__eqdf2+0x76>
1000fd04:	2d00      	cmp	r5, #0
1000fd06:	d1f0      	bne.n	1000fcea <__eqdf2+0x3a>
1000fd08:	4330      	orrs	r0, r6
1000fd0a:	0003      	movs	r3, r0
1000fd0c:	1e5a      	subs	r2, r3, #1
1000fd0e:	4193      	sbcs	r3, r2
1000fd10:	e7eb      	b.n	1000fcea <__eqdf2+0x3a>
1000fd12:	0031      	movs	r1, r6
1000fd14:	2301      	movs	r3, #1
1000fd16:	4301      	orrs	r1, r0
1000fd18:	d1e7      	bne.n	1000fcea <__eqdf2+0x3a>
1000fd1a:	e7e0      	b.n	1000fcde <__eqdf2+0x2e>
1000fd1c:	433a      	orrs	r2, r7
1000fd1e:	2301      	movs	r3, #1
1000fd20:	2a00      	cmp	r2, #0
1000fd22:	d1e2      	bne.n	1000fcea <__eqdf2+0x3a>
1000fd24:	e7de      	b.n	1000fce4 <__eqdf2+0x34>
1000fd26:	2300      	movs	r3, #0
1000fd28:	e7df      	b.n	1000fcea <__eqdf2+0x3a>
1000fd2a:	46c0      	nop			; (mov r8, r8)
1000fd2c:	000007ff 	.word	0x000007ff

1000fd30 <__gedf2>:
1000fd30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd32:	465f      	mov	r7, fp
1000fd34:	4644      	mov	r4, r8
1000fd36:	4656      	mov	r6, sl
1000fd38:	464d      	mov	r5, r9
1000fd3a:	b4f0      	push	{r4, r5, r6, r7}
1000fd3c:	031f      	lsls	r7, r3, #12
1000fd3e:	0b3c      	lsrs	r4, r7, #12
1000fd40:	4f2c      	ldr	r7, [pc, #176]	; (1000fdf4 <__gedf2+0xc4>)
1000fd42:	030e      	lsls	r6, r1, #12
1000fd44:	004d      	lsls	r5, r1, #1
1000fd46:	46a3      	mov	fp, r4
1000fd48:	005c      	lsls	r4, r3, #1
1000fd4a:	4684      	mov	ip, r0
1000fd4c:	0b36      	lsrs	r6, r6, #12
1000fd4e:	0d6d      	lsrs	r5, r5, #21
1000fd50:	0fc9      	lsrs	r1, r1, #31
1000fd52:	4690      	mov	r8, r2
1000fd54:	0d64      	lsrs	r4, r4, #21
1000fd56:	0fdb      	lsrs	r3, r3, #31
1000fd58:	42bd      	cmp	r5, r7
1000fd5a:	d02b      	beq.n	1000fdb4 <__gedf2+0x84>
1000fd5c:	4f25      	ldr	r7, [pc, #148]	; (1000fdf4 <__gedf2+0xc4>)
1000fd5e:	42bc      	cmp	r4, r7
1000fd60:	d02e      	beq.n	1000fdc0 <__gedf2+0x90>
1000fd62:	2d00      	cmp	r5, #0
1000fd64:	d10e      	bne.n	1000fd84 <__gedf2+0x54>
1000fd66:	4330      	orrs	r0, r6
1000fd68:	0007      	movs	r7, r0
1000fd6a:	4681      	mov	r9, r0
1000fd6c:	4278      	negs	r0, r7
1000fd6e:	4178      	adcs	r0, r7
1000fd70:	2c00      	cmp	r4, #0
1000fd72:	d117      	bne.n	1000fda4 <__gedf2+0x74>
1000fd74:	465f      	mov	r7, fp
1000fd76:	433a      	orrs	r2, r7
1000fd78:	d114      	bne.n	1000fda4 <__gedf2+0x74>
1000fd7a:	464b      	mov	r3, r9
1000fd7c:	2000      	movs	r0, #0
1000fd7e:	2b00      	cmp	r3, #0
1000fd80:	d00a      	beq.n	1000fd98 <__gedf2+0x68>
1000fd82:	e006      	b.n	1000fd92 <__gedf2+0x62>
1000fd84:	2c00      	cmp	r4, #0
1000fd86:	d102      	bne.n	1000fd8e <__gedf2+0x5e>
1000fd88:	4658      	mov	r0, fp
1000fd8a:	4302      	orrs	r2, r0
1000fd8c:	d001      	beq.n	1000fd92 <__gedf2+0x62>
1000fd8e:	4299      	cmp	r1, r3
1000fd90:	d01a      	beq.n	1000fdc8 <__gedf2+0x98>
1000fd92:	2301      	movs	r3, #1
1000fd94:	4248      	negs	r0, r1
1000fd96:	4318      	orrs	r0, r3
1000fd98:	bc3c      	pop	{r2, r3, r4, r5}
1000fd9a:	4690      	mov	r8, r2
1000fd9c:	4699      	mov	r9, r3
1000fd9e:	46a2      	mov	sl, r4
1000fda0:	46ab      	mov	fp, r5
1000fda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fda4:	2800      	cmp	r0, #0
1000fda6:	d0f2      	beq.n	1000fd8e <__gedf2+0x5e>
1000fda8:	4258      	negs	r0, r3
1000fdaa:	4158      	adcs	r0, r3
1000fdac:	2201      	movs	r2, #1
1000fdae:	4240      	negs	r0, r0
1000fdb0:	4310      	orrs	r0, r2
1000fdb2:	e7f1      	b.n	1000fd98 <__gedf2+0x68>
1000fdb4:	0037      	movs	r7, r6
1000fdb6:	4307      	orrs	r7, r0
1000fdb8:	d0d0      	beq.n	1000fd5c <__gedf2+0x2c>
1000fdba:	2002      	movs	r0, #2
1000fdbc:	4240      	negs	r0, r0
1000fdbe:	e7eb      	b.n	1000fd98 <__gedf2+0x68>
1000fdc0:	465f      	mov	r7, fp
1000fdc2:	4317      	orrs	r7, r2
1000fdc4:	d0cd      	beq.n	1000fd62 <__gedf2+0x32>
1000fdc6:	e7f8      	b.n	1000fdba <__gedf2+0x8a>
1000fdc8:	42a5      	cmp	r5, r4
1000fdca:	dce2      	bgt.n	1000fd92 <__gedf2+0x62>
1000fdcc:	db05      	blt.n	1000fdda <__gedf2+0xaa>
1000fdce:	455e      	cmp	r6, fp
1000fdd0:	d8df      	bhi.n	1000fd92 <__gedf2+0x62>
1000fdd2:	d008      	beq.n	1000fde6 <__gedf2+0xb6>
1000fdd4:	2000      	movs	r0, #0
1000fdd6:	455e      	cmp	r6, fp
1000fdd8:	d2de      	bcs.n	1000fd98 <__gedf2+0x68>
1000fdda:	4248      	negs	r0, r1
1000fddc:	4148      	adcs	r0, r1
1000fdde:	2301      	movs	r3, #1
1000fde0:	4240      	negs	r0, r0
1000fde2:	4318      	orrs	r0, r3
1000fde4:	e7d8      	b.n	1000fd98 <__gedf2+0x68>
1000fde6:	45c4      	cmp	ip, r8
1000fde8:	d8d3      	bhi.n	1000fd92 <__gedf2+0x62>
1000fdea:	2000      	movs	r0, #0
1000fdec:	45c4      	cmp	ip, r8
1000fdee:	d3f4      	bcc.n	1000fdda <__gedf2+0xaa>
1000fdf0:	e7d2      	b.n	1000fd98 <__gedf2+0x68>
1000fdf2:	46c0      	nop			; (mov r8, r8)
1000fdf4:	000007ff 	.word	0x000007ff

1000fdf8 <__ledf2>:
1000fdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdfa:	465f      	mov	r7, fp
1000fdfc:	464d      	mov	r5, r9
1000fdfe:	4644      	mov	r4, r8
1000fe00:	4656      	mov	r6, sl
1000fe02:	b4f0      	push	{r4, r5, r6, r7}
1000fe04:	031c      	lsls	r4, r3, #12
1000fe06:	0b24      	lsrs	r4, r4, #12
1000fe08:	46a4      	mov	ip, r4
1000fe0a:	4c2f      	ldr	r4, [pc, #188]	; (1000fec8 <__ledf2+0xd0>)
1000fe0c:	030f      	lsls	r7, r1, #12
1000fe0e:	004d      	lsls	r5, r1, #1
1000fe10:	005e      	lsls	r6, r3, #1
1000fe12:	0fc9      	lsrs	r1, r1, #31
1000fe14:	4680      	mov	r8, r0
1000fe16:	0b3f      	lsrs	r7, r7, #12
1000fe18:	0d6d      	lsrs	r5, r5, #21
1000fe1a:	468b      	mov	fp, r1
1000fe1c:	4691      	mov	r9, r2
1000fe1e:	0d76      	lsrs	r6, r6, #21
1000fe20:	0fdb      	lsrs	r3, r3, #31
1000fe22:	42a5      	cmp	r5, r4
1000fe24:	d020      	beq.n	1000fe68 <__ledf2+0x70>
1000fe26:	4c28      	ldr	r4, [pc, #160]	; (1000fec8 <__ledf2+0xd0>)
1000fe28:	42a6      	cmp	r6, r4
1000fe2a:	d022      	beq.n	1000fe72 <__ledf2+0x7a>
1000fe2c:	2d00      	cmp	r5, #0
1000fe2e:	d112      	bne.n	1000fe56 <__ledf2+0x5e>
1000fe30:	4338      	orrs	r0, r7
1000fe32:	4244      	negs	r4, r0
1000fe34:	4144      	adcs	r4, r0
1000fe36:	2e00      	cmp	r6, #0
1000fe38:	d020      	beq.n	1000fe7c <__ledf2+0x84>
1000fe3a:	2c00      	cmp	r4, #0
1000fe3c:	d00d      	beq.n	1000fe5a <__ledf2+0x62>
1000fe3e:	425c      	negs	r4, r3
1000fe40:	4163      	adcs	r3, r4
1000fe42:	2401      	movs	r4, #1
1000fe44:	425b      	negs	r3, r3
1000fe46:	431c      	orrs	r4, r3
1000fe48:	0020      	movs	r0, r4
1000fe4a:	bc3c      	pop	{r2, r3, r4, r5}
1000fe4c:	4690      	mov	r8, r2
1000fe4e:	4699      	mov	r9, r3
1000fe50:	46a2      	mov	sl, r4
1000fe52:	46ab      	mov	fp, r5
1000fe54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe56:	2e00      	cmp	r6, #0
1000fe58:	d017      	beq.n	1000fe8a <__ledf2+0x92>
1000fe5a:	455b      	cmp	r3, fp
1000fe5c:	d019      	beq.n	1000fe92 <__ledf2+0x9a>
1000fe5e:	465b      	mov	r3, fp
1000fe60:	425c      	negs	r4, r3
1000fe62:	2301      	movs	r3, #1
1000fe64:	431c      	orrs	r4, r3
1000fe66:	e7ef      	b.n	1000fe48 <__ledf2+0x50>
1000fe68:	0039      	movs	r1, r7
1000fe6a:	2402      	movs	r4, #2
1000fe6c:	4301      	orrs	r1, r0
1000fe6e:	d1eb      	bne.n	1000fe48 <__ledf2+0x50>
1000fe70:	e7d9      	b.n	1000fe26 <__ledf2+0x2e>
1000fe72:	4661      	mov	r1, ip
1000fe74:	2402      	movs	r4, #2
1000fe76:	4311      	orrs	r1, r2
1000fe78:	d1e6      	bne.n	1000fe48 <__ledf2+0x50>
1000fe7a:	e7d7      	b.n	1000fe2c <__ledf2+0x34>
1000fe7c:	4661      	mov	r1, ip
1000fe7e:	430a      	orrs	r2, r1
1000fe80:	d1db      	bne.n	1000fe3a <__ledf2+0x42>
1000fe82:	2400      	movs	r4, #0
1000fe84:	2800      	cmp	r0, #0
1000fe86:	d0df      	beq.n	1000fe48 <__ledf2+0x50>
1000fe88:	e7e9      	b.n	1000fe5e <__ledf2+0x66>
1000fe8a:	4661      	mov	r1, ip
1000fe8c:	430a      	orrs	r2, r1
1000fe8e:	d1e4      	bne.n	1000fe5a <__ledf2+0x62>
1000fe90:	e7e5      	b.n	1000fe5e <__ledf2+0x66>
1000fe92:	42b5      	cmp	r5, r6
1000fe94:	dd03      	ble.n	1000fe9e <__ledf2+0xa6>
1000fe96:	2201      	movs	r2, #1
1000fe98:	425c      	negs	r4, r3
1000fe9a:	4314      	orrs	r4, r2
1000fe9c:	e7d4      	b.n	1000fe48 <__ledf2+0x50>
1000fe9e:	42b5      	cmp	r5, r6
1000fea0:	dbcd      	blt.n	1000fe3e <__ledf2+0x46>
1000fea2:	4567      	cmp	r7, ip
1000fea4:	d8db      	bhi.n	1000fe5e <__ledf2+0x66>
1000fea6:	d009      	beq.n	1000febc <__ledf2+0xc4>
1000fea8:	2400      	movs	r4, #0
1000feaa:	4567      	cmp	r7, ip
1000feac:	d2cc      	bcs.n	1000fe48 <__ledf2+0x50>
1000feae:	4659      	mov	r1, fp
1000feb0:	424c      	negs	r4, r1
1000feb2:	4161      	adcs	r1, r4
1000feb4:	2401      	movs	r4, #1
1000feb6:	4249      	negs	r1, r1
1000feb8:	430c      	orrs	r4, r1
1000feba:	e7c5      	b.n	1000fe48 <__ledf2+0x50>
1000febc:	45c8      	cmp	r8, r9
1000febe:	d8ce      	bhi.n	1000fe5e <__ledf2+0x66>
1000fec0:	2400      	movs	r4, #0
1000fec2:	45c8      	cmp	r8, r9
1000fec4:	d3f3      	bcc.n	1000feae <__ledf2+0xb6>
1000fec6:	e7bf      	b.n	1000fe48 <__ledf2+0x50>
1000fec8:	000007ff 	.word	0x000007ff

1000fecc <__libc_init_array>:
1000fecc:	4b0e      	ldr	r3, [pc, #56]	; (1000ff08 <__libc_init_array+0x3c>)
1000fece:	b570      	push	{r4, r5, r6, lr}
1000fed0:	2500      	movs	r5, #0
1000fed2:	001e      	movs	r6, r3
1000fed4:	4c0d      	ldr	r4, [pc, #52]	; (1000ff0c <__libc_init_array+0x40>)
1000fed6:	1ae4      	subs	r4, r4, r3
1000fed8:	10a4      	asrs	r4, r4, #2
1000feda:	42a5      	cmp	r5, r4
1000fedc:	d004      	beq.n	1000fee8 <__libc_init_array+0x1c>
1000fede:	00ab      	lsls	r3, r5, #2
1000fee0:	58f3      	ldr	r3, [r6, r3]
1000fee2:	4798      	blx	r3
1000fee4:	3501      	adds	r5, #1
1000fee6:	e7f8      	b.n	1000feda <__libc_init_array+0xe>
1000fee8:	f002 fd92 	bl	10012a10 <_init>
1000feec:	4b08      	ldr	r3, [pc, #32]	; (1000ff10 <__libc_init_array+0x44>)
1000feee:	2500      	movs	r5, #0
1000fef0:	001e      	movs	r6, r3
1000fef2:	4c08      	ldr	r4, [pc, #32]	; (1000ff14 <__libc_init_array+0x48>)
1000fef4:	1ae4      	subs	r4, r4, r3
1000fef6:	10a4      	asrs	r4, r4, #2
1000fef8:	42a5      	cmp	r5, r4
1000fefa:	d004      	beq.n	1000ff06 <__libc_init_array+0x3a>
1000fefc:	00ab      	lsls	r3, r5, #2
1000fefe:	58f3      	ldr	r3, [r6, r3]
1000ff00:	4798      	blx	r3
1000ff02:	3501      	adds	r5, #1
1000ff04:	e7f8      	b.n	1000fef8 <__libc_init_array+0x2c>
1000ff06:	bd70      	pop	{r4, r5, r6, pc}
1000ff08:	10012a1c 	.word	0x10012a1c
1000ff0c:	10012a1c 	.word	0x10012a1c
1000ff10:	10012a1c 	.word	0x10012a1c
1000ff14:	10012a20 	.word	0x10012a20

1000ff18 <memcmp>:
1000ff18:	b530      	push	{r4, r5, lr}
1000ff1a:	2400      	movs	r4, #0
1000ff1c:	42a2      	cmp	r2, r4
1000ff1e:	d008      	beq.n	1000ff32 <memcmp+0x1a>
1000ff20:	5d03      	ldrb	r3, [r0, r4]
1000ff22:	1c65      	adds	r5, r4, #1
1000ff24:	5d0c      	ldrb	r4, [r1, r4]
1000ff26:	42a3      	cmp	r3, r4
1000ff28:	d001      	beq.n	1000ff2e <memcmp+0x16>
1000ff2a:	1b18      	subs	r0, r3, r4
1000ff2c:	e002      	b.n	1000ff34 <memcmp+0x1c>
1000ff2e:	002c      	movs	r4, r5
1000ff30:	e7f4      	b.n	1000ff1c <memcmp+0x4>
1000ff32:	2000      	movs	r0, #0
1000ff34:	bd30      	pop	{r4, r5, pc}

1000ff36 <memcpy>:
1000ff36:	2300      	movs	r3, #0
1000ff38:	b510      	push	{r4, lr}
1000ff3a:	429a      	cmp	r2, r3
1000ff3c:	d003      	beq.n	1000ff46 <memcpy+0x10>
1000ff3e:	5ccc      	ldrb	r4, [r1, r3]
1000ff40:	54c4      	strb	r4, [r0, r3]
1000ff42:	3301      	adds	r3, #1
1000ff44:	e7f9      	b.n	1000ff3a <memcpy+0x4>
1000ff46:	bd10      	pop	{r4, pc}

1000ff48 <memset>:
1000ff48:	0003      	movs	r3, r0
1000ff4a:	1882      	adds	r2, r0, r2
1000ff4c:	4293      	cmp	r3, r2
1000ff4e:	d002      	beq.n	1000ff56 <memset+0xe>
1000ff50:	7019      	strb	r1, [r3, #0]
1000ff52:	3301      	adds	r3, #1
1000ff54:	e7fa      	b.n	1000ff4c <memset+0x4>
1000ff56:	4770      	bx	lr

1000ff58 <iprintf>:
1000ff58:	b40f      	push	{r0, r1, r2, r3}
1000ff5a:	4b0b      	ldr	r3, [pc, #44]	; (1000ff88 <iprintf+0x30>)
1000ff5c:	b513      	push	{r0, r1, r4, lr}
1000ff5e:	681c      	ldr	r4, [r3, #0]
1000ff60:	2c00      	cmp	r4, #0
1000ff62:	d005      	beq.n	1000ff70 <iprintf+0x18>
1000ff64:	69a3      	ldr	r3, [r4, #24]
1000ff66:	2b00      	cmp	r3, #0
1000ff68:	d102      	bne.n	1000ff70 <iprintf+0x18>
1000ff6a:	0020      	movs	r0, r4
1000ff6c:	f000 fb46 	bl	100105fc <__sinit>
1000ff70:	ab05      	add	r3, sp, #20
1000ff72:	9a04      	ldr	r2, [sp, #16]
1000ff74:	68a1      	ldr	r1, [r4, #8]
1000ff76:	0020      	movs	r0, r4
1000ff78:	9301      	str	r3, [sp, #4]
1000ff7a:	f000 fd05 	bl	10010988 <_vfiprintf_r>
1000ff7e:	bc16      	pop	{r1, r2, r4}
1000ff80:	bc08      	pop	{r3}
1000ff82:	b004      	add	sp, #16
1000ff84:	4718      	bx	r3
1000ff86:	46c0      	nop			; (mov r8, r8)
1000ff88:	10012a98 	.word	0x10012a98

1000ff8c <putchar>:
1000ff8c:	4b08      	ldr	r3, [pc, #32]	; (1000ffb0 <putchar+0x24>)
1000ff8e:	b570      	push	{r4, r5, r6, lr}
1000ff90:	681c      	ldr	r4, [r3, #0]
1000ff92:	0005      	movs	r5, r0
1000ff94:	2c00      	cmp	r4, #0
1000ff96:	d005      	beq.n	1000ffa4 <putchar+0x18>
1000ff98:	69a3      	ldr	r3, [r4, #24]
1000ff9a:	2b00      	cmp	r3, #0
1000ff9c:	d102      	bne.n	1000ffa4 <putchar+0x18>
1000ff9e:	0020      	movs	r0, r4
1000ffa0:	f000 fb2c 	bl	100105fc <__sinit>
1000ffa4:	0029      	movs	r1, r5
1000ffa6:	68a2      	ldr	r2, [r4, #8]
1000ffa8:	0020      	movs	r0, r4
1000ffaa:	f000 ff99 	bl	10010ee0 <_putc_r>
1000ffae:	bd70      	pop	{r4, r5, r6, pc}
1000ffb0:	10012a98 	.word	0x10012a98

1000ffb4 <_puts_r>:
1000ffb4:	b570      	push	{r4, r5, r6, lr}
1000ffb6:	0005      	movs	r5, r0
1000ffb8:	000e      	movs	r6, r1
1000ffba:	2800      	cmp	r0, #0
1000ffbc:	d004      	beq.n	1000ffc8 <_puts_r+0x14>
1000ffbe:	6983      	ldr	r3, [r0, #24]
1000ffc0:	2b00      	cmp	r3, #0
1000ffc2:	d101      	bne.n	1000ffc8 <_puts_r+0x14>
1000ffc4:	f000 fb1a 	bl	100105fc <__sinit>
1000ffc8:	69ab      	ldr	r3, [r5, #24]
1000ffca:	68ac      	ldr	r4, [r5, #8]
1000ffcc:	2b00      	cmp	r3, #0
1000ffce:	d102      	bne.n	1000ffd6 <_puts_r+0x22>
1000ffd0:	0028      	movs	r0, r5
1000ffd2:	f000 fb13 	bl	100105fc <__sinit>
1000ffd6:	4b25      	ldr	r3, [pc, #148]	; (1001006c <_puts_r+0xb8>)
1000ffd8:	429c      	cmp	r4, r3
1000ffda:	d101      	bne.n	1000ffe0 <_puts_r+0x2c>
1000ffdc:	686c      	ldr	r4, [r5, #4]
1000ffde:	e008      	b.n	1000fff2 <_puts_r+0x3e>
1000ffe0:	4b23      	ldr	r3, [pc, #140]	; (10010070 <_puts_r+0xbc>)
1000ffe2:	429c      	cmp	r4, r3
1000ffe4:	d101      	bne.n	1000ffea <_puts_r+0x36>
1000ffe6:	68ac      	ldr	r4, [r5, #8]
1000ffe8:	e003      	b.n	1000fff2 <_puts_r+0x3e>
1000ffea:	4b22      	ldr	r3, [pc, #136]	; (10010074 <_puts_r+0xc0>)
1000ffec:	429c      	cmp	r4, r3
1000ffee:	d100      	bne.n	1000fff2 <_puts_r+0x3e>
1000fff0:	68ec      	ldr	r4, [r5, #12]
1000fff2:	89a3      	ldrh	r3, [r4, #12]
1000fff4:	071b      	lsls	r3, r3, #28
1000fff6:	d502      	bpl.n	1000fffe <_puts_r+0x4a>
1000fff8:	6923      	ldr	r3, [r4, #16]
1000fffa:	2b00      	cmp	r3, #0
1000fffc:	d111      	bne.n	10010022 <_puts_r+0x6e>
1000fffe:	0021      	movs	r1, r4
10010000:	0028      	movs	r0, r5
10010002:	f000 f991 	bl	10010328 <__swsetup_r>
10010006:	2800      	cmp	r0, #0
10010008:	d00b      	beq.n	10010022 <_puts_r+0x6e>
1001000a:	2001      	movs	r0, #1
1001000c:	4240      	negs	r0, r0
1001000e:	e02b      	b.n	10010068 <_puts_r+0xb4>
10010010:	3b01      	subs	r3, #1
10010012:	3601      	adds	r6, #1
10010014:	60a3      	str	r3, [r4, #8]
10010016:	2b00      	cmp	r3, #0
10010018:	db08      	blt.n	1001002c <_puts_r+0x78>
1001001a:	6823      	ldr	r3, [r4, #0]
1001001c:	1c5a      	adds	r2, r3, #1
1001001e:	6022      	str	r2, [r4, #0]
10010020:	7019      	strb	r1, [r3, #0]
10010022:	7831      	ldrb	r1, [r6, #0]
10010024:	68a3      	ldr	r3, [r4, #8]
10010026:	2900      	cmp	r1, #0
10010028:	d1f2      	bne.n	10010010 <_puts_r+0x5c>
1001002a:	e00b      	b.n	10010044 <_puts_r+0x90>
1001002c:	69a2      	ldr	r2, [r4, #24]
1001002e:	4293      	cmp	r3, r2
10010030:	db01      	blt.n	10010036 <_puts_r+0x82>
10010032:	290a      	cmp	r1, #10
10010034:	d1f1      	bne.n	1001001a <_puts_r+0x66>
10010036:	0022      	movs	r2, r4
10010038:	0028      	movs	r0, r5
1001003a:	f000 f91d 	bl	10010278 <__swbuf_r>
1001003e:	1c43      	adds	r3, r0, #1
10010040:	d1ef      	bne.n	10010022 <_puts_r+0x6e>
10010042:	e7e2      	b.n	1001000a <_puts_r+0x56>
10010044:	3b01      	subs	r3, #1
10010046:	60a3      	str	r3, [r4, #8]
10010048:	2b00      	cmp	r3, #0
1001004a:	da08      	bge.n	1001005e <_puts_r+0xaa>
1001004c:	0022      	movs	r2, r4
1001004e:	310a      	adds	r1, #10
10010050:	0028      	movs	r0, r5
10010052:	f000 f911 	bl	10010278 <__swbuf_r>
10010056:	1c43      	adds	r3, r0, #1
10010058:	d0d7      	beq.n	1001000a <_puts_r+0x56>
1001005a:	200a      	movs	r0, #10
1001005c:	e004      	b.n	10010068 <_puts_r+0xb4>
1001005e:	200a      	movs	r0, #10
10010060:	6823      	ldr	r3, [r4, #0]
10010062:	1c5a      	adds	r2, r3, #1
10010064:	6022      	str	r2, [r4, #0]
10010066:	7018      	strb	r0, [r3, #0]
10010068:	bd70      	pop	{r4, r5, r6, pc}
1001006a:	46c0      	nop			; (mov r8, r8)
1001006c:	1001297c 	.word	0x1001297c
10010070:	1001299c 	.word	0x1001299c
10010074:	100129bc 	.word	0x100129bc

10010078 <puts>:
10010078:	b510      	push	{r4, lr}
1001007a:	4b03      	ldr	r3, [pc, #12]	; (10010088 <puts+0x10>)
1001007c:	0001      	movs	r1, r0
1001007e:	6818      	ldr	r0, [r3, #0]
10010080:	f7ff ff98 	bl	1000ffb4 <_puts_r>
10010084:	bd10      	pop	{r4, pc}
10010086:	46c0      	nop			; (mov r8, r8)
10010088:	10012a98 	.word	0x10012a98

1001008c <rand>:
1001008c:	4b15      	ldr	r3, [pc, #84]	; (100100e4 <rand+0x58>)
1001008e:	b510      	push	{r4, lr}
10010090:	681c      	ldr	r4, [r3, #0]
10010092:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10010094:	2b00      	cmp	r3, #0
10010096:	d115      	bne.n	100100c4 <rand+0x38>
10010098:	2018      	movs	r0, #24
1001009a:	f000 fba7 	bl	100107ec <malloc>
1001009e:	4b12      	ldr	r3, [pc, #72]	; (100100e8 <rand+0x5c>)
100100a0:	63a0      	str	r0, [r4, #56]	; 0x38
100100a2:	8003      	strh	r3, [r0, #0]
100100a4:	4b11      	ldr	r3, [pc, #68]	; (100100ec <rand+0x60>)
100100a6:	2201      	movs	r2, #1
100100a8:	8043      	strh	r3, [r0, #2]
100100aa:	4b11      	ldr	r3, [pc, #68]	; (100100f0 <rand+0x64>)
100100ac:	8083      	strh	r3, [r0, #4]
100100ae:	4b11      	ldr	r3, [pc, #68]	; (100100f4 <rand+0x68>)
100100b0:	80c3      	strh	r3, [r0, #6]
100100b2:	4b11      	ldr	r3, [pc, #68]	; (100100f8 <rand+0x6c>)
100100b4:	8103      	strh	r3, [r0, #8]
100100b6:	2305      	movs	r3, #5
100100b8:	8143      	strh	r3, [r0, #10]
100100ba:	3306      	adds	r3, #6
100100bc:	8183      	strh	r3, [r0, #12]
100100be:	2300      	movs	r3, #0
100100c0:	6102      	str	r2, [r0, #16]
100100c2:	6143      	str	r3, [r0, #20]
100100c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100100c6:	4a0d      	ldr	r2, [pc, #52]	; (100100fc <rand+0x70>)
100100c8:	6920      	ldr	r0, [r4, #16]
100100ca:	6961      	ldr	r1, [r4, #20]
100100cc:	4b0c      	ldr	r3, [pc, #48]	; (10010100 <rand+0x74>)
100100ce:	f001 f819 	bl	10011104 <__aeabi_lmul>
100100d2:	2201      	movs	r2, #1
100100d4:	2300      	movs	r3, #0
100100d6:	1880      	adds	r0, r0, r2
100100d8:	4159      	adcs	r1, r3
100100da:	6120      	str	r0, [r4, #16]
100100dc:	6161      	str	r1, [r4, #20]
100100de:	0048      	lsls	r0, r1, #1
100100e0:	0840      	lsrs	r0, r0, #1
100100e2:	bd10      	pop	{r4, pc}
100100e4:	10012a98 	.word	0x10012a98
100100e8:	0000330e 	.word	0x0000330e
100100ec:	ffffabcd 	.word	0xffffabcd
100100f0:	00001234 	.word	0x00001234
100100f4:	ffffe66d 	.word	0xffffe66d
100100f8:	ffffdeec 	.word	0xffffdeec
100100fc:	4c957f2d 	.word	0x4c957f2d
10010100:	5851f42d 	.word	0x5851f42d

10010104 <setbuf>:
10010104:	424a      	negs	r2, r1
10010106:	414a      	adcs	r2, r1
10010108:	2380      	movs	r3, #128	; 0x80
1001010a:	b510      	push	{r4, lr}
1001010c:	0052      	lsls	r2, r2, #1
1001010e:	00db      	lsls	r3, r3, #3
10010110:	f000 f802 	bl	10010118 <setvbuf>
10010114:	bd10      	pop	{r4, pc}
	...

10010118 <setvbuf>:
10010118:	b5f0      	push	{r4, r5, r6, r7, lr}
1001011a:	001d      	movs	r5, r3
1001011c:	4b51      	ldr	r3, [pc, #324]	; (10010264 <setvbuf+0x14c>)
1001011e:	b085      	sub	sp, #20
10010120:	681e      	ldr	r6, [r3, #0]
10010122:	0004      	movs	r4, r0
10010124:	000f      	movs	r7, r1
10010126:	9200      	str	r2, [sp, #0]
10010128:	2e00      	cmp	r6, #0
1001012a:	d005      	beq.n	10010138 <setvbuf+0x20>
1001012c:	69b3      	ldr	r3, [r6, #24]
1001012e:	2b00      	cmp	r3, #0
10010130:	d102      	bne.n	10010138 <setvbuf+0x20>
10010132:	0030      	movs	r0, r6
10010134:	f000 fa62 	bl	100105fc <__sinit>
10010138:	4b4b      	ldr	r3, [pc, #300]	; (10010268 <setvbuf+0x150>)
1001013a:	429c      	cmp	r4, r3
1001013c:	d101      	bne.n	10010142 <setvbuf+0x2a>
1001013e:	6874      	ldr	r4, [r6, #4]
10010140:	e008      	b.n	10010154 <setvbuf+0x3c>
10010142:	4b4a      	ldr	r3, [pc, #296]	; (1001026c <setvbuf+0x154>)
10010144:	429c      	cmp	r4, r3
10010146:	d101      	bne.n	1001014c <setvbuf+0x34>
10010148:	68b4      	ldr	r4, [r6, #8]
1001014a:	e003      	b.n	10010154 <setvbuf+0x3c>
1001014c:	4b48      	ldr	r3, [pc, #288]	; (10010270 <setvbuf+0x158>)
1001014e:	429c      	cmp	r4, r3
10010150:	d100      	bne.n	10010154 <setvbuf+0x3c>
10010152:	68f4      	ldr	r4, [r6, #12]
10010154:	9b00      	ldr	r3, [sp, #0]
10010156:	2b02      	cmp	r3, #2
10010158:	d005      	beq.n	10010166 <setvbuf+0x4e>
1001015a:	2b01      	cmp	r3, #1
1001015c:	d900      	bls.n	10010160 <setvbuf+0x48>
1001015e:	e07c      	b.n	1001025a <setvbuf+0x142>
10010160:	2d00      	cmp	r5, #0
10010162:	da00      	bge.n	10010166 <setvbuf+0x4e>
10010164:	e079      	b.n	1001025a <setvbuf+0x142>
10010166:	0021      	movs	r1, r4
10010168:	0030      	movs	r0, r6
1001016a:	f000 f9d9 	bl	10010520 <_fflush_r>
1001016e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010170:	2900      	cmp	r1, #0
10010172:	d008      	beq.n	10010186 <setvbuf+0x6e>
10010174:	0023      	movs	r3, r4
10010176:	3344      	adds	r3, #68	; 0x44
10010178:	4299      	cmp	r1, r3
1001017a:	d002      	beq.n	10010182 <setvbuf+0x6a>
1001017c:	0030      	movs	r0, r6
1001017e:	f000 fb3f 	bl	10010800 <_free_r>
10010182:	2300      	movs	r3, #0
10010184:	6363      	str	r3, [r4, #52]	; 0x34
10010186:	2300      	movs	r3, #0
10010188:	61a3      	str	r3, [r4, #24]
1001018a:	6063      	str	r3, [r4, #4]
1001018c:	89a3      	ldrh	r3, [r4, #12]
1001018e:	061b      	lsls	r3, r3, #24
10010190:	d503      	bpl.n	1001019a <setvbuf+0x82>
10010192:	6921      	ldr	r1, [r4, #16]
10010194:	0030      	movs	r0, r6
10010196:	f000 fb33 	bl	10010800 <_free_r>
1001019a:	89a2      	ldrh	r2, [r4, #12]
1001019c:	4b35      	ldr	r3, [pc, #212]	; (10010274 <setvbuf+0x15c>)
1001019e:	4013      	ands	r3, r2
100101a0:	81a3      	strh	r3, [r4, #12]
100101a2:	9b00      	ldr	r3, [sp, #0]
100101a4:	2b02      	cmp	r3, #2
100101a6:	d021      	beq.n	100101ec <setvbuf+0xd4>
100101a8:	ab03      	add	r3, sp, #12
100101aa:	aa02      	add	r2, sp, #8
100101ac:	0021      	movs	r1, r4
100101ae:	0030      	movs	r0, r6
100101b0:	f000 fab8 	bl	10010724 <__swhatbuf_r>
100101b4:	89a3      	ldrh	r3, [r4, #12]
100101b6:	4318      	orrs	r0, r3
100101b8:	81a0      	strh	r0, [r4, #12]
100101ba:	2d00      	cmp	r5, #0
100101bc:	d101      	bne.n	100101c2 <setvbuf+0xaa>
100101be:	9d02      	ldr	r5, [sp, #8]
100101c0:	e001      	b.n	100101c6 <setvbuf+0xae>
100101c2:	2f00      	cmp	r7, #0
100101c4:	d125      	bne.n	10010212 <setvbuf+0xfa>
100101c6:	0028      	movs	r0, r5
100101c8:	f000 fb10 	bl	100107ec <malloc>
100101cc:	9501      	str	r5, [sp, #4]
100101ce:	1e07      	subs	r7, r0, #0
100101d0:	d11a      	bne.n	10010208 <setvbuf+0xf0>
100101d2:	9b02      	ldr	r3, [sp, #8]
100101d4:	9301      	str	r3, [sp, #4]
100101d6:	42ab      	cmp	r3, r5
100101d8:	d102      	bne.n	100101e0 <setvbuf+0xc8>
100101da:	2001      	movs	r0, #1
100101dc:	4240      	negs	r0, r0
100101de:	e006      	b.n	100101ee <setvbuf+0xd6>
100101e0:	9801      	ldr	r0, [sp, #4]
100101e2:	f000 fb03 	bl	100107ec <malloc>
100101e6:	1e07      	subs	r7, r0, #0
100101e8:	d10e      	bne.n	10010208 <setvbuf+0xf0>
100101ea:	e7f6      	b.n	100101da <setvbuf+0xc2>
100101ec:	2000      	movs	r0, #0
100101ee:	2202      	movs	r2, #2
100101f0:	89a3      	ldrh	r3, [r4, #12]
100101f2:	4313      	orrs	r3, r2
100101f4:	81a3      	strh	r3, [r4, #12]
100101f6:	2300      	movs	r3, #0
100101f8:	60a3      	str	r3, [r4, #8]
100101fa:	0023      	movs	r3, r4
100101fc:	3347      	adds	r3, #71	; 0x47
100101fe:	6023      	str	r3, [r4, #0]
10010200:	6123      	str	r3, [r4, #16]
10010202:	2301      	movs	r3, #1
10010204:	6163      	str	r3, [r4, #20]
10010206:	e02a      	b.n	1001025e <setvbuf+0x146>
10010208:	2280      	movs	r2, #128	; 0x80
1001020a:	89a3      	ldrh	r3, [r4, #12]
1001020c:	9d01      	ldr	r5, [sp, #4]
1001020e:	4313      	orrs	r3, r2
10010210:	81a3      	strh	r3, [r4, #12]
10010212:	69b3      	ldr	r3, [r6, #24]
10010214:	2b00      	cmp	r3, #0
10010216:	d102      	bne.n	1001021e <setvbuf+0x106>
10010218:	0030      	movs	r0, r6
1001021a:	f000 f9ef 	bl	100105fc <__sinit>
1001021e:	9b00      	ldr	r3, [sp, #0]
10010220:	2b01      	cmp	r3, #1
10010222:	d103      	bne.n	1001022c <setvbuf+0x114>
10010224:	89a3      	ldrh	r3, [r4, #12]
10010226:	9a00      	ldr	r2, [sp, #0]
10010228:	431a      	orrs	r2, r3
1001022a:	81a2      	strh	r2, [r4, #12]
1001022c:	2308      	movs	r3, #8
1001022e:	89a2      	ldrh	r2, [r4, #12]
10010230:	6027      	str	r7, [r4, #0]
10010232:	4013      	ands	r3, r2
10010234:	6127      	str	r7, [r4, #16]
10010236:	6165      	str	r5, [r4, #20]
10010238:	1e18      	subs	r0, r3, #0
1001023a:	d00c      	beq.n	10010256 <setvbuf+0x13e>
1001023c:	2301      	movs	r3, #1
1001023e:	401a      	ands	r2, r3
10010240:	2300      	movs	r3, #0
10010242:	1e10      	subs	r0, r2, #0
10010244:	4298      	cmp	r0, r3
10010246:	d004      	beq.n	10010252 <setvbuf+0x13a>
10010248:	426d      	negs	r5, r5
1001024a:	60a3      	str	r3, [r4, #8]
1001024c:	61a5      	str	r5, [r4, #24]
1001024e:	0018      	movs	r0, r3
10010250:	e005      	b.n	1001025e <setvbuf+0x146>
10010252:	60a5      	str	r5, [r4, #8]
10010254:	e003      	b.n	1001025e <setvbuf+0x146>
10010256:	60a3      	str	r3, [r4, #8]
10010258:	e001      	b.n	1001025e <setvbuf+0x146>
1001025a:	2001      	movs	r0, #1
1001025c:	4240      	negs	r0, r0
1001025e:	b005      	add	sp, #20
10010260:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010262:	46c0      	nop			; (mov r8, r8)
10010264:	10012a98 	.word	0x10012a98
10010268:	1001297c 	.word	0x1001297c
1001026c:	1001299c 	.word	0x1001299c
10010270:	100129bc 	.word	0x100129bc
10010274:	fffff35c 	.word	0xfffff35c

10010278 <__swbuf_r>:
10010278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001027a:	0005      	movs	r5, r0
1001027c:	000f      	movs	r7, r1
1001027e:	0014      	movs	r4, r2
10010280:	2800      	cmp	r0, #0
10010282:	d004      	beq.n	1001028e <__swbuf_r+0x16>
10010284:	6983      	ldr	r3, [r0, #24]
10010286:	2b00      	cmp	r3, #0
10010288:	d101      	bne.n	1001028e <__swbuf_r+0x16>
1001028a:	f000 f9b7 	bl	100105fc <__sinit>
1001028e:	4b23      	ldr	r3, [pc, #140]	; (1001031c <__swbuf_r+0xa4>)
10010290:	429c      	cmp	r4, r3
10010292:	d101      	bne.n	10010298 <__swbuf_r+0x20>
10010294:	686c      	ldr	r4, [r5, #4]
10010296:	e008      	b.n	100102aa <__swbuf_r+0x32>
10010298:	4b21      	ldr	r3, [pc, #132]	; (10010320 <__swbuf_r+0xa8>)
1001029a:	429c      	cmp	r4, r3
1001029c:	d101      	bne.n	100102a2 <__swbuf_r+0x2a>
1001029e:	68ac      	ldr	r4, [r5, #8]
100102a0:	e003      	b.n	100102aa <__swbuf_r+0x32>
100102a2:	4b20      	ldr	r3, [pc, #128]	; (10010324 <__swbuf_r+0xac>)
100102a4:	429c      	cmp	r4, r3
100102a6:	d100      	bne.n	100102aa <__swbuf_r+0x32>
100102a8:	68ec      	ldr	r4, [r5, #12]
100102aa:	69a3      	ldr	r3, [r4, #24]
100102ac:	60a3      	str	r3, [r4, #8]
100102ae:	89a3      	ldrh	r3, [r4, #12]
100102b0:	071b      	lsls	r3, r3, #28
100102b2:	d50a      	bpl.n	100102ca <__swbuf_r+0x52>
100102b4:	6923      	ldr	r3, [r4, #16]
100102b6:	2b00      	cmp	r3, #0
100102b8:	d007      	beq.n	100102ca <__swbuf_r+0x52>
100102ba:	6823      	ldr	r3, [r4, #0]
100102bc:	6922      	ldr	r2, [r4, #16]
100102be:	b2fe      	uxtb	r6, r7
100102c0:	1a98      	subs	r0, r3, r2
100102c2:	6963      	ldr	r3, [r4, #20]
100102c4:	4298      	cmp	r0, r3
100102c6:	db0f      	blt.n	100102e8 <__swbuf_r+0x70>
100102c8:	e008      	b.n	100102dc <__swbuf_r+0x64>
100102ca:	0021      	movs	r1, r4
100102cc:	0028      	movs	r0, r5
100102ce:	f000 f82b 	bl	10010328 <__swsetup_r>
100102d2:	2800      	cmp	r0, #0
100102d4:	d0f1      	beq.n	100102ba <__swbuf_r+0x42>
100102d6:	2001      	movs	r0, #1
100102d8:	4240      	negs	r0, r0
100102da:	e01d      	b.n	10010318 <__swbuf_r+0xa0>
100102dc:	0021      	movs	r1, r4
100102de:	0028      	movs	r0, r5
100102e0:	f000 f91e 	bl	10010520 <_fflush_r>
100102e4:	2800      	cmp	r0, #0
100102e6:	d1f6      	bne.n	100102d6 <__swbuf_r+0x5e>
100102e8:	68a3      	ldr	r3, [r4, #8]
100102ea:	3001      	adds	r0, #1
100102ec:	3b01      	subs	r3, #1
100102ee:	60a3      	str	r3, [r4, #8]
100102f0:	6823      	ldr	r3, [r4, #0]
100102f2:	1c5a      	adds	r2, r3, #1
100102f4:	6022      	str	r2, [r4, #0]
100102f6:	701f      	strb	r7, [r3, #0]
100102f8:	6963      	ldr	r3, [r4, #20]
100102fa:	4298      	cmp	r0, r3
100102fc:	d005      	beq.n	1001030a <__swbuf_r+0x92>
100102fe:	89a3      	ldrh	r3, [r4, #12]
10010300:	0030      	movs	r0, r6
10010302:	07db      	lsls	r3, r3, #31
10010304:	d508      	bpl.n	10010318 <__swbuf_r+0xa0>
10010306:	2e0a      	cmp	r6, #10
10010308:	d106      	bne.n	10010318 <__swbuf_r+0xa0>
1001030a:	0021      	movs	r1, r4
1001030c:	0028      	movs	r0, r5
1001030e:	f000 f907 	bl	10010520 <_fflush_r>
10010312:	2800      	cmp	r0, #0
10010314:	d1df      	bne.n	100102d6 <__swbuf_r+0x5e>
10010316:	0030      	movs	r0, r6
10010318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001031a:	46c0      	nop			; (mov r8, r8)
1001031c:	1001297c 	.word	0x1001297c
10010320:	1001299c 	.word	0x1001299c
10010324:	100129bc 	.word	0x100129bc

10010328 <__swsetup_r>:
10010328:	4b36      	ldr	r3, [pc, #216]	; (10010404 <__swsetup_r+0xdc>)
1001032a:	b570      	push	{r4, r5, r6, lr}
1001032c:	681d      	ldr	r5, [r3, #0]
1001032e:	0006      	movs	r6, r0
10010330:	000c      	movs	r4, r1
10010332:	2d00      	cmp	r5, #0
10010334:	d005      	beq.n	10010342 <__swsetup_r+0x1a>
10010336:	69ab      	ldr	r3, [r5, #24]
10010338:	2b00      	cmp	r3, #0
1001033a:	d102      	bne.n	10010342 <__swsetup_r+0x1a>
1001033c:	0028      	movs	r0, r5
1001033e:	f000 f95d 	bl	100105fc <__sinit>
10010342:	4b31      	ldr	r3, [pc, #196]	; (10010408 <__swsetup_r+0xe0>)
10010344:	429c      	cmp	r4, r3
10010346:	d101      	bne.n	1001034c <__swsetup_r+0x24>
10010348:	686c      	ldr	r4, [r5, #4]
1001034a:	e008      	b.n	1001035e <__swsetup_r+0x36>
1001034c:	4b2f      	ldr	r3, [pc, #188]	; (1001040c <__swsetup_r+0xe4>)
1001034e:	429c      	cmp	r4, r3
10010350:	d101      	bne.n	10010356 <__swsetup_r+0x2e>
10010352:	68ac      	ldr	r4, [r5, #8]
10010354:	e003      	b.n	1001035e <__swsetup_r+0x36>
10010356:	4b2e      	ldr	r3, [pc, #184]	; (10010410 <__swsetup_r+0xe8>)
10010358:	429c      	cmp	r4, r3
1001035a:	d100      	bne.n	1001035e <__swsetup_r+0x36>
1001035c:	68ec      	ldr	r4, [r5, #12]
1001035e:	220c      	movs	r2, #12
10010360:	5ea3      	ldrsh	r3, [r4, r2]
10010362:	b29a      	uxth	r2, r3
10010364:	0711      	lsls	r1, r2, #28
10010366:	d423      	bmi.n	100103b0 <__swsetup_r+0x88>
10010368:	06d1      	lsls	r1, r2, #27
1001036a:	d407      	bmi.n	1001037c <__swsetup_r+0x54>
1001036c:	2209      	movs	r2, #9
1001036e:	2001      	movs	r0, #1
10010370:	6032      	str	r2, [r6, #0]
10010372:	3237      	adds	r2, #55	; 0x37
10010374:	4313      	orrs	r3, r2
10010376:	81a3      	strh	r3, [r4, #12]
10010378:	4240      	negs	r0, r0
1001037a:	e042      	b.n	10010402 <__swsetup_r+0xda>
1001037c:	0753      	lsls	r3, r2, #29
1001037e:	d513      	bpl.n	100103a8 <__swsetup_r+0x80>
10010380:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010382:	2900      	cmp	r1, #0
10010384:	d008      	beq.n	10010398 <__swsetup_r+0x70>
10010386:	0023      	movs	r3, r4
10010388:	3344      	adds	r3, #68	; 0x44
1001038a:	4299      	cmp	r1, r3
1001038c:	d002      	beq.n	10010394 <__swsetup_r+0x6c>
1001038e:	0030      	movs	r0, r6
10010390:	f000 fa36 	bl	10010800 <_free_r>
10010394:	2300      	movs	r3, #0
10010396:	6363      	str	r3, [r4, #52]	; 0x34
10010398:	2224      	movs	r2, #36	; 0x24
1001039a:	89a3      	ldrh	r3, [r4, #12]
1001039c:	4393      	bics	r3, r2
1001039e:	81a3      	strh	r3, [r4, #12]
100103a0:	2300      	movs	r3, #0
100103a2:	6063      	str	r3, [r4, #4]
100103a4:	6923      	ldr	r3, [r4, #16]
100103a6:	6023      	str	r3, [r4, #0]
100103a8:	2208      	movs	r2, #8
100103aa:	89a3      	ldrh	r3, [r4, #12]
100103ac:	4313      	orrs	r3, r2
100103ae:	81a3      	strh	r3, [r4, #12]
100103b0:	6923      	ldr	r3, [r4, #16]
100103b2:	2b00      	cmp	r3, #0
100103b4:	d10b      	bne.n	100103ce <__swsetup_r+0xa6>
100103b6:	23a0      	movs	r3, #160	; 0xa0
100103b8:	89a2      	ldrh	r2, [r4, #12]
100103ba:	009b      	lsls	r3, r3, #2
100103bc:	4013      	ands	r3, r2
100103be:	2280      	movs	r2, #128	; 0x80
100103c0:	0092      	lsls	r2, r2, #2
100103c2:	4293      	cmp	r3, r2
100103c4:	d003      	beq.n	100103ce <__swsetup_r+0xa6>
100103c6:	0021      	movs	r1, r4
100103c8:	0030      	movs	r0, r6
100103ca:	f000 f9d1 	bl	10010770 <__smakebuf_r>
100103ce:	2301      	movs	r3, #1
100103d0:	89a2      	ldrh	r2, [r4, #12]
100103d2:	4013      	ands	r3, r2
100103d4:	d005      	beq.n	100103e2 <__swsetup_r+0xba>
100103d6:	2300      	movs	r3, #0
100103d8:	60a3      	str	r3, [r4, #8]
100103da:	6963      	ldr	r3, [r4, #20]
100103dc:	425b      	negs	r3, r3
100103de:	61a3      	str	r3, [r4, #24]
100103e0:	e003      	b.n	100103ea <__swsetup_r+0xc2>
100103e2:	0792      	lsls	r2, r2, #30
100103e4:	d400      	bmi.n	100103e8 <__swsetup_r+0xc0>
100103e6:	6963      	ldr	r3, [r4, #20]
100103e8:	60a3      	str	r3, [r4, #8]
100103ea:	2000      	movs	r0, #0
100103ec:	6923      	ldr	r3, [r4, #16]
100103ee:	4283      	cmp	r3, r0
100103f0:	d107      	bne.n	10010402 <__swsetup_r+0xda>
100103f2:	220c      	movs	r2, #12
100103f4:	5ea3      	ldrsh	r3, [r4, r2]
100103f6:	061a      	lsls	r2, r3, #24
100103f8:	d503      	bpl.n	10010402 <__swsetup_r+0xda>
100103fa:	2240      	movs	r2, #64	; 0x40
100103fc:	4313      	orrs	r3, r2
100103fe:	81a3      	strh	r3, [r4, #12]
10010400:	3801      	subs	r0, #1
10010402:	bd70      	pop	{r4, r5, r6, pc}
10010404:	10012a98 	.word	0x10012a98
10010408:	1001297c 	.word	0x1001297c
1001040c:	1001299c 	.word	0x1001299c
10010410:	100129bc 	.word	0x100129bc

10010414 <__sflush_r>:
10010414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010416:	898a      	ldrh	r2, [r1, #12]
10010418:	0005      	movs	r5, r0
1001041a:	000c      	movs	r4, r1
1001041c:	0713      	lsls	r3, r2, #28
1001041e:	d45a      	bmi.n	100104d6 <__sflush_r+0xc2>
10010420:	684b      	ldr	r3, [r1, #4]
10010422:	2b00      	cmp	r3, #0
10010424:	dc02      	bgt.n	1001042c <__sflush_r+0x18>
10010426:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10010428:	2b00      	cmp	r3, #0
1001042a:	dd19      	ble.n	10010460 <__sflush_r+0x4c>
1001042c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001042e:	2f00      	cmp	r7, #0
10010430:	d016      	beq.n	10010460 <__sflush_r+0x4c>
10010432:	2300      	movs	r3, #0
10010434:	682e      	ldr	r6, [r5, #0]
10010436:	602b      	str	r3, [r5, #0]
10010438:	2380      	movs	r3, #128	; 0x80
1001043a:	015b      	lsls	r3, r3, #5
1001043c:	401a      	ands	r2, r3
1001043e:	d001      	beq.n	10010444 <__sflush_r+0x30>
10010440:	6d60      	ldr	r0, [r4, #84]	; 0x54
10010442:	e014      	b.n	1001046e <__sflush_r+0x5a>
10010444:	2301      	movs	r3, #1
10010446:	6a21      	ldr	r1, [r4, #32]
10010448:	0028      	movs	r0, r5
1001044a:	47b8      	blx	r7
1001044c:	1c43      	adds	r3, r0, #1
1001044e:	d10e      	bne.n	1001046e <__sflush_r+0x5a>
10010450:	682b      	ldr	r3, [r5, #0]
10010452:	2b00      	cmp	r3, #0
10010454:	d00b      	beq.n	1001046e <__sflush_r+0x5a>
10010456:	2b1d      	cmp	r3, #29
10010458:	d001      	beq.n	1001045e <__sflush_r+0x4a>
1001045a:	2b16      	cmp	r3, #22
1001045c:	d102      	bne.n	10010464 <__sflush_r+0x50>
1001045e:	602e      	str	r6, [r5, #0]
10010460:	2000      	movs	r0, #0
10010462:	e05a      	b.n	1001051a <__sflush_r+0x106>
10010464:	2240      	movs	r2, #64	; 0x40
10010466:	89a3      	ldrh	r3, [r4, #12]
10010468:	4313      	orrs	r3, r2
1001046a:	81a3      	strh	r3, [r4, #12]
1001046c:	e055      	b.n	1001051a <__sflush_r+0x106>
1001046e:	89a3      	ldrh	r3, [r4, #12]
10010470:	075b      	lsls	r3, r3, #29
10010472:	d506      	bpl.n	10010482 <__sflush_r+0x6e>
10010474:	6863      	ldr	r3, [r4, #4]
10010476:	1ac0      	subs	r0, r0, r3
10010478:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001047a:	2b00      	cmp	r3, #0
1001047c:	d001      	beq.n	10010482 <__sflush_r+0x6e>
1001047e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10010480:	1ac0      	subs	r0, r0, r3
10010482:	2300      	movs	r3, #0
10010484:	0002      	movs	r2, r0
10010486:	6a21      	ldr	r1, [r4, #32]
10010488:	0028      	movs	r0, r5
1001048a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001048c:	47b8      	blx	r7
1001048e:	89a3      	ldrh	r3, [r4, #12]
10010490:	1c42      	adds	r2, r0, #1
10010492:	d106      	bne.n	100104a2 <__sflush_r+0x8e>
10010494:	6829      	ldr	r1, [r5, #0]
10010496:	291d      	cmp	r1, #29
10010498:	d83a      	bhi.n	10010510 <__sflush_r+0xfc>
1001049a:	4a20      	ldr	r2, [pc, #128]	; (1001051c <__sflush_r+0x108>)
1001049c:	40ca      	lsrs	r2, r1
1001049e:	07d2      	lsls	r2, r2, #31
100104a0:	d536      	bpl.n	10010510 <__sflush_r+0xfc>
100104a2:	2200      	movs	r2, #0
100104a4:	6062      	str	r2, [r4, #4]
100104a6:	6922      	ldr	r2, [r4, #16]
100104a8:	6022      	str	r2, [r4, #0]
100104aa:	04db      	lsls	r3, r3, #19
100104ac:	d505      	bpl.n	100104ba <__sflush_r+0xa6>
100104ae:	1c43      	adds	r3, r0, #1
100104b0:	d102      	bne.n	100104b8 <__sflush_r+0xa4>
100104b2:	682b      	ldr	r3, [r5, #0]
100104b4:	2b00      	cmp	r3, #0
100104b6:	d100      	bne.n	100104ba <__sflush_r+0xa6>
100104b8:	6560      	str	r0, [r4, #84]	; 0x54
100104ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
100104bc:	602e      	str	r6, [r5, #0]
100104be:	2900      	cmp	r1, #0
100104c0:	d0ce      	beq.n	10010460 <__sflush_r+0x4c>
100104c2:	0023      	movs	r3, r4
100104c4:	3344      	adds	r3, #68	; 0x44
100104c6:	4299      	cmp	r1, r3
100104c8:	d002      	beq.n	100104d0 <__sflush_r+0xbc>
100104ca:	0028      	movs	r0, r5
100104cc:	f000 f998 	bl	10010800 <_free_r>
100104d0:	2000      	movs	r0, #0
100104d2:	6360      	str	r0, [r4, #52]	; 0x34
100104d4:	e021      	b.n	1001051a <__sflush_r+0x106>
100104d6:	690f      	ldr	r7, [r1, #16]
100104d8:	2f00      	cmp	r7, #0
100104da:	d0c1      	beq.n	10010460 <__sflush_r+0x4c>
100104dc:	680b      	ldr	r3, [r1, #0]
100104de:	600f      	str	r7, [r1, #0]
100104e0:	1bdb      	subs	r3, r3, r7
100104e2:	9301      	str	r3, [sp, #4]
100104e4:	2300      	movs	r3, #0
100104e6:	0792      	lsls	r2, r2, #30
100104e8:	d100      	bne.n	100104ec <__sflush_r+0xd8>
100104ea:	694b      	ldr	r3, [r1, #20]
100104ec:	60a3      	str	r3, [r4, #8]
100104ee:	e003      	b.n	100104f8 <__sflush_r+0xe4>
100104f0:	9b01      	ldr	r3, [sp, #4]
100104f2:	183f      	adds	r7, r7, r0
100104f4:	1a1b      	subs	r3, r3, r0
100104f6:	9301      	str	r3, [sp, #4]
100104f8:	9b01      	ldr	r3, [sp, #4]
100104fa:	2b00      	cmp	r3, #0
100104fc:	ddb0      	ble.n	10010460 <__sflush_r+0x4c>
100104fe:	9b01      	ldr	r3, [sp, #4]
10010500:	003a      	movs	r2, r7
10010502:	6a21      	ldr	r1, [r4, #32]
10010504:	0028      	movs	r0, r5
10010506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10010508:	47b0      	blx	r6
1001050a:	2800      	cmp	r0, #0
1001050c:	dcf0      	bgt.n	100104f0 <__sflush_r+0xdc>
1001050e:	89a3      	ldrh	r3, [r4, #12]
10010510:	2240      	movs	r2, #64	; 0x40
10010512:	2001      	movs	r0, #1
10010514:	4313      	orrs	r3, r2
10010516:	81a3      	strh	r3, [r4, #12]
10010518:	4240      	negs	r0, r0
1001051a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001051c:	20400001 	.word	0x20400001

10010520 <_fflush_r>:
10010520:	690b      	ldr	r3, [r1, #16]
10010522:	b570      	push	{r4, r5, r6, lr}
10010524:	0005      	movs	r5, r0
10010526:	000c      	movs	r4, r1
10010528:	2b00      	cmp	r3, #0
1001052a:	d101      	bne.n	10010530 <_fflush_r+0x10>
1001052c:	2000      	movs	r0, #0
1001052e:	e01c      	b.n	1001056a <_fflush_r+0x4a>
10010530:	2800      	cmp	r0, #0
10010532:	d004      	beq.n	1001053e <_fflush_r+0x1e>
10010534:	6983      	ldr	r3, [r0, #24]
10010536:	2b00      	cmp	r3, #0
10010538:	d101      	bne.n	1001053e <_fflush_r+0x1e>
1001053a:	f000 f85f 	bl	100105fc <__sinit>
1001053e:	4b0b      	ldr	r3, [pc, #44]	; (1001056c <_fflush_r+0x4c>)
10010540:	429c      	cmp	r4, r3
10010542:	d101      	bne.n	10010548 <_fflush_r+0x28>
10010544:	686c      	ldr	r4, [r5, #4]
10010546:	e008      	b.n	1001055a <_fflush_r+0x3a>
10010548:	4b09      	ldr	r3, [pc, #36]	; (10010570 <_fflush_r+0x50>)
1001054a:	429c      	cmp	r4, r3
1001054c:	d101      	bne.n	10010552 <_fflush_r+0x32>
1001054e:	68ac      	ldr	r4, [r5, #8]
10010550:	e003      	b.n	1001055a <_fflush_r+0x3a>
10010552:	4b08      	ldr	r3, [pc, #32]	; (10010574 <_fflush_r+0x54>)
10010554:	429c      	cmp	r4, r3
10010556:	d100      	bne.n	1001055a <_fflush_r+0x3a>
10010558:	68ec      	ldr	r4, [r5, #12]
1001055a:	220c      	movs	r2, #12
1001055c:	5ea3      	ldrsh	r3, [r4, r2]
1001055e:	2b00      	cmp	r3, #0
10010560:	d0e4      	beq.n	1001052c <_fflush_r+0xc>
10010562:	0021      	movs	r1, r4
10010564:	0028      	movs	r0, r5
10010566:	f7ff ff55 	bl	10010414 <__sflush_r>
1001056a:	bd70      	pop	{r4, r5, r6, pc}
1001056c:	1001297c 	.word	0x1001297c
10010570:	1001299c 	.word	0x1001299c
10010574:	100129bc 	.word	0x100129bc

10010578 <_cleanup_r>:
10010578:	b510      	push	{r4, lr}
1001057a:	4902      	ldr	r1, [pc, #8]	; (10010584 <_cleanup_r+0xc>)
1001057c:	f000 f8b0 	bl	100106e0 <_fwalk_reent>
10010580:	bd10      	pop	{r4, pc}
10010582:	46c0      	nop			; (mov r8, r8)
10010584:	10010521 	.word	0x10010521

10010588 <std.isra.0>:
10010588:	2300      	movs	r3, #0
1001058a:	b510      	push	{r4, lr}
1001058c:	0004      	movs	r4, r0
1001058e:	6003      	str	r3, [r0, #0]
10010590:	6043      	str	r3, [r0, #4]
10010592:	6083      	str	r3, [r0, #8]
10010594:	8181      	strh	r1, [r0, #12]
10010596:	6643      	str	r3, [r0, #100]	; 0x64
10010598:	81c2      	strh	r2, [r0, #14]
1001059a:	6103      	str	r3, [r0, #16]
1001059c:	6143      	str	r3, [r0, #20]
1001059e:	6183      	str	r3, [r0, #24]
100105a0:	0019      	movs	r1, r3
100105a2:	2208      	movs	r2, #8
100105a4:	305c      	adds	r0, #92	; 0x5c
100105a6:	f7ff fccf 	bl	1000ff48 <memset>
100105aa:	4b05      	ldr	r3, [pc, #20]	; (100105c0 <std.isra.0+0x38>)
100105ac:	6224      	str	r4, [r4, #32]
100105ae:	6263      	str	r3, [r4, #36]	; 0x24
100105b0:	4b04      	ldr	r3, [pc, #16]	; (100105c4 <std.isra.0+0x3c>)
100105b2:	62a3      	str	r3, [r4, #40]	; 0x28
100105b4:	4b04      	ldr	r3, [pc, #16]	; (100105c8 <std.isra.0+0x40>)
100105b6:	62e3      	str	r3, [r4, #44]	; 0x2c
100105b8:	4b04      	ldr	r3, [pc, #16]	; (100105cc <std.isra.0+0x44>)
100105ba:	6323      	str	r3, [r4, #48]	; 0x30
100105bc:	bd10      	pop	{r4, pc}
100105be:	46c0      	nop			; (mov r8, r8)
100105c0:	10010f71 	.word	0x10010f71
100105c4:	10010f99 	.word	0x10010f99
100105c8:	10010fd1 	.word	0x10010fd1
100105cc:	10010ffd 	.word	0x10010ffd

100105d0 <__sfmoreglue>:
100105d0:	b570      	push	{r4, r5, r6, lr}
100105d2:	2568      	movs	r5, #104	; 0x68
100105d4:	1e4b      	subs	r3, r1, #1
100105d6:	435d      	muls	r5, r3
100105d8:	000e      	movs	r6, r1
100105da:	0029      	movs	r1, r5
100105dc:	3174      	adds	r1, #116	; 0x74
100105de:	f000 f955 	bl	1001088c <_malloc_r>
100105e2:	1e04      	subs	r4, r0, #0
100105e4:	d008      	beq.n	100105f8 <__sfmoreglue+0x28>
100105e6:	2100      	movs	r1, #0
100105e8:	002a      	movs	r2, r5
100105ea:	6001      	str	r1, [r0, #0]
100105ec:	6046      	str	r6, [r0, #4]
100105ee:	300c      	adds	r0, #12
100105f0:	60a0      	str	r0, [r4, #8]
100105f2:	3268      	adds	r2, #104	; 0x68
100105f4:	f7ff fca8 	bl	1000ff48 <memset>
100105f8:	0020      	movs	r0, r4
100105fa:	bd70      	pop	{r4, r5, r6, pc}

100105fc <__sinit>:
100105fc:	6983      	ldr	r3, [r0, #24]
100105fe:	b513      	push	{r0, r1, r4, lr}
10010600:	0004      	movs	r4, r0
10010602:	2b00      	cmp	r3, #0
10010604:	d128      	bne.n	10010658 <__sinit+0x5c>
10010606:	6483      	str	r3, [r0, #72]	; 0x48
10010608:	64c3      	str	r3, [r0, #76]	; 0x4c
1001060a:	6503      	str	r3, [r0, #80]	; 0x50
1001060c:	4b13      	ldr	r3, [pc, #76]	; (1001065c <__sinit+0x60>)
1001060e:	4a14      	ldr	r2, [pc, #80]	; (10010660 <__sinit+0x64>)
10010610:	681b      	ldr	r3, [r3, #0]
10010612:	6282      	str	r2, [r0, #40]	; 0x28
10010614:	9301      	str	r3, [sp, #4]
10010616:	4298      	cmp	r0, r3
10010618:	d101      	bne.n	1001061e <__sinit+0x22>
1001061a:	2301      	movs	r3, #1
1001061c:	6183      	str	r3, [r0, #24]
1001061e:	0020      	movs	r0, r4
10010620:	f000 f820 	bl	10010664 <__sfp>
10010624:	6060      	str	r0, [r4, #4]
10010626:	0020      	movs	r0, r4
10010628:	f000 f81c 	bl	10010664 <__sfp>
1001062c:	60a0      	str	r0, [r4, #8]
1001062e:	0020      	movs	r0, r4
10010630:	f000 f818 	bl	10010664 <__sfp>
10010634:	2200      	movs	r2, #0
10010636:	60e0      	str	r0, [r4, #12]
10010638:	2104      	movs	r1, #4
1001063a:	6860      	ldr	r0, [r4, #4]
1001063c:	f7ff ffa4 	bl	10010588 <std.isra.0>
10010640:	2201      	movs	r2, #1
10010642:	2109      	movs	r1, #9
10010644:	68a0      	ldr	r0, [r4, #8]
10010646:	f7ff ff9f 	bl	10010588 <std.isra.0>
1001064a:	2202      	movs	r2, #2
1001064c:	2112      	movs	r1, #18
1001064e:	68e0      	ldr	r0, [r4, #12]
10010650:	f7ff ff9a 	bl	10010588 <std.isra.0>
10010654:	2301      	movs	r3, #1
10010656:	61a3      	str	r3, [r4, #24]
10010658:	bd13      	pop	{r0, r1, r4, pc}
1001065a:	46c0      	nop			; (mov r8, r8)
1001065c:	10012978 	.word	0x10012978
10010660:	10010579 	.word	0x10010579

10010664 <__sfp>:
10010664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010666:	4b1d      	ldr	r3, [pc, #116]	; (100106dc <__sfp+0x78>)
10010668:	0006      	movs	r6, r0
1001066a:	681d      	ldr	r5, [r3, #0]
1001066c:	69ab      	ldr	r3, [r5, #24]
1001066e:	2b00      	cmp	r3, #0
10010670:	d102      	bne.n	10010678 <__sfp+0x14>
10010672:	0028      	movs	r0, r5
10010674:	f7ff ffc2 	bl	100105fc <__sinit>
10010678:	3548      	adds	r5, #72	; 0x48
1001067a:	68ac      	ldr	r4, [r5, #8]
1001067c:	686b      	ldr	r3, [r5, #4]
1001067e:	3b01      	subs	r3, #1
10010680:	d405      	bmi.n	1001068e <__sfp+0x2a>
10010682:	220c      	movs	r2, #12
10010684:	5ea7      	ldrsh	r7, [r4, r2]
10010686:	2f00      	cmp	r7, #0
10010688:	d010      	beq.n	100106ac <__sfp+0x48>
1001068a:	3468      	adds	r4, #104	; 0x68
1001068c:	e7f7      	b.n	1001067e <__sfp+0x1a>
1001068e:	682b      	ldr	r3, [r5, #0]
10010690:	2b00      	cmp	r3, #0
10010692:	d001      	beq.n	10010698 <__sfp+0x34>
10010694:	682d      	ldr	r5, [r5, #0]
10010696:	e7f0      	b.n	1001067a <__sfp+0x16>
10010698:	2104      	movs	r1, #4
1001069a:	0030      	movs	r0, r6
1001069c:	f7ff ff98 	bl	100105d0 <__sfmoreglue>
100106a0:	6028      	str	r0, [r5, #0]
100106a2:	2800      	cmp	r0, #0
100106a4:	d1f6      	bne.n	10010694 <__sfp+0x30>
100106a6:	230c      	movs	r3, #12
100106a8:	6033      	str	r3, [r6, #0]
100106aa:	e016      	b.n	100106da <__sfp+0x76>
100106ac:	2301      	movs	r3, #1
100106ae:	0020      	movs	r0, r4
100106b0:	425b      	negs	r3, r3
100106b2:	81e3      	strh	r3, [r4, #14]
100106b4:	3302      	adds	r3, #2
100106b6:	81a3      	strh	r3, [r4, #12]
100106b8:	6667      	str	r7, [r4, #100]	; 0x64
100106ba:	6027      	str	r7, [r4, #0]
100106bc:	60a7      	str	r7, [r4, #8]
100106be:	6067      	str	r7, [r4, #4]
100106c0:	6127      	str	r7, [r4, #16]
100106c2:	6167      	str	r7, [r4, #20]
100106c4:	61a7      	str	r7, [r4, #24]
100106c6:	305c      	adds	r0, #92	; 0x5c
100106c8:	2208      	movs	r2, #8
100106ca:	0039      	movs	r1, r7
100106cc:	f7ff fc3c 	bl	1000ff48 <memset>
100106d0:	0020      	movs	r0, r4
100106d2:	6367      	str	r7, [r4, #52]	; 0x34
100106d4:	63a7      	str	r7, [r4, #56]	; 0x38
100106d6:	64a7      	str	r7, [r4, #72]	; 0x48
100106d8:	64e7      	str	r7, [r4, #76]	; 0x4c
100106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100106dc:	10012978 	.word	0x10012978

100106e0 <_fwalk_reent>:
100106e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100106e2:	0004      	movs	r4, r0
100106e4:	0007      	movs	r7, r0
100106e6:	2600      	movs	r6, #0
100106e8:	9101      	str	r1, [sp, #4]
100106ea:	3448      	adds	r4, #72	; 0x48
100106ec:	2c00      	cmp	r4, #0
100106ee:	d016      	beq.n	1001071e <_fwalk_reent+0x3e>
100106f0:	6863      	ldr	r3, [r4, #4]
100106f2:	68a5      	ldr	r5, [r4, #8]
100106f4:	9300      	str	r3, [sp, #0]
100106f6:	9b00      	ldr	r3, [sp, #0]
100106f8:	3b01      	subs	r3, #1
100106fa:	9300      	str	r3, [sp, #0]
100106fc:	d40d      	bmi.n	1001071a <_fwalk_reent+0x3a>
100106fe:	89ab      	ldrh	r3, [r5, #12]
10010700:	2b01      	cmp	r3, #1
10010702:	d908      	bls.n	10010716 <_fwalk_reent+0x36>
10010704:	220e      	movs	r2, #14
10010706:	5eab      	ldrsh	r3, [r5, r2]
10010708:	3301      	adds	r3, #1
1001070a:	d004      	beq.n	10010716 <_fwalk_reent+0x36>
1001070c:	0029      	movs	r1, r5
1001070e:	0038      	movs	r0, r7
10010710:	9b01      	ldr	r3, [sp, #4]
10010712:	4798      	blx	r3
10010714:	4306      	orrs	r6, r0
10010716:	3568      	adds	r5, #104	; 0x68
10010718:	e7ed      	b.n	100106f6 <_fwalk_reent+0x16>
1001071a:	6824      	ldr	r4, [r4, #0]
1001071c:	e7e6      	b.n	100106ec <_fwalk_reent+0xc>
1001071e:	0030      	movs	r0, r6
10010720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010724 <__swhatbuf_r>:
10010724:	b570      	push	{r4, r5, r6, lr}
10010726:	000e      	movs	r6, r1
10010728:	001d      	movs	r5, r3
1001072a:	230e      	movs	r3, #14
1001072c:	5ec9      	ldrsh	r1, [r1, r3]
1001072e:	b090      	sub	sp, #64	; 0x40
10010730:	0014      	movs	r4, r2
10010732:	2900      	cmp	r1, #0
10010734:	da06      	bge.n	10010744 <__swhatbuf_r+0x20>
10010736:	2300      	movs	r3, #0
10010738:	602b      	str	r3, [r5, #0]
1001073a:	89b3      	ldrh	r3, [r6, #12]
1001073c:	061b      	lsls	r3, r3, #24
1001073e:	d50f      	bpl.n	10010760 <__swhatbuf_r+0x3c>
10010740:	2340      	movs	r3, #64	; 0x40
10010742:	e00f      	b.n	10010764 <__swhatbuf_r+0x40>
10010744:	aa01      	add	r2, sp, #4
10010746:	f000 fc85 	bl	10011054 <_fstat_r>
1001074a:	2800      	cmp	r0, #0
1001074c:	dbf3      	blt.n	10010736 <__swhatbuf_r+0x12>
1001074e:	23f0      	movs	r3, #240	; 0xf0
10010750:	9a02      	ldr	r2, [sp, #8]
10010752:	021b      	lsls	r3, r3, #8
10010754:	4013      	ands	r3, r2
10010756:	4a05      	ldr	r2, [pc, #20]	; (1001076c <__swhatbuf_r+0x48>)
10010758:	189b      	adds	r3, r3, r2
1001075a:	425a      	negs	r2, r3
1001075c:	4153      	adcs	r3, r2
1001075e:	602b      	str	r3, [r5, #0]
10010760:	2380      	movs	r3, #128	; 0x80
10010762:	00db      	lsls	r3, r3, #3
10010764:	2000      	movs	r0, #0
10010766:	6023      	str	r3, [r4, #0]
10010768:	b010      	add	sp, #64	; 0x40
1001076a:	bd70      	pop	{r4, r5, r6, pc}
1001076c:	ffffe000 	.word	0xffffe000

10010770 <__smakebuf_r>:
10010770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010772:	2602      	movs	r6, #2
10010774:	898b      	ldrh	r3, [r1, #12]
10010776:	0005      	movs	r5, r0
10010778:	000c      	movs	r4, r1
1001077a:	4233      	tst	r3, r6
1001077c:	d110      	bne.n	100107a0 <__smakebuf_r+0x30>
1001077e:	ab01      	add	r3, sp, #4
10010780:	466a      	mov	r2, sp
10010782:	f7ff ffcf 	bl	10010724 <__swhatbuf_r>
10010786:	9900      	ldr	r1, [sp, #0]
10010788:	0007      	movs	r7, r0
1001078a:	0028      	movs	r0, r5
1001078c:	f000 f87e 	bl	1001088c <_malloc_r>
10010790:	2800      	cmp	r0, #0
10010792:	d10c      	bne.n	100107ae <__smakebuf_r+0x3e>
10010794:	220c      	movs	r2, #12
10010796:	5ea3      	ldrsh	r3, [r4, r2]
10010798:	059a      	lsls	r2, r3, #22
1001079a:	d423      	bmi.n	100107e4 <__smakebuf_r+0x74>
1001079c:	4333      	orrs	r3, r6
1001079e:	81a3      	strh	r3, [r4, #12]
100107a0:	0023      	movs	r3, r4
100107a2:	3347      	adds	r3, #71	; 0x47
100107a4:	6023      	str	r3, [r4, #0]
100107a6:	6123      	str	r3, [r4, #16]
100107a8:	2301      	movs	r3, #1
100107aa:	6163      	str	r3, [r4, #20]
100107ac:	e01a      	b.n	100107e4 <__smakebuf_r+0x74>
100107ae:	2280      	movs	r2, #128	; 0x80
100107b0:	4b0d      	ldr	r3, [pc, #52]	; (100107e8 <__smakebuf_r+0x78>)
100107b2:	62ab      	str	r3, [r5, #40]	; 0x28
100107b4:	89a3      	ldrh	r3, [r4, #12]
100107b6:	6020      	str	r0, [r4, #0]
100107b8:	4313      	orrs	r3, r2
100107ba:	81a3      	strh	r3, [r4, #12]
100107bc:	9b00      	ldr	r3, [sp, #0]
100107be:	6120      	str	r0, [r4, #16]
100107c0:	6163      	str	r3, [r4, #20]
100107c2:	9b01      	ldr	r3, [sp, #4]
100107c4:	2b00      	cmp	r3, #0
100107c6:	d00a      	beq.n	100107de <__smakebuf_r+0x6e>
100107c8:	230e      	movs	r3, #14
100107ca:	5ee1      	ldrsh	r1, [r4, r3]
100107cc:	0028      	movs	r0, r5
100107ce:	f000 fc53 	bl	10011078 <_isatty_r>
100107d2:	2800      	cmp	r0, #0
100107d4:	d003      	beq.n	100107de <__smakebuf_r+0x6e>
100107d6:	2201      	movs	r2, #1
100107d8:	89a3      	ldrh	r3, [r4, #12]
100107da:	4313      	orrs	r3, r2
100107dc:	81a3      	strh	r3, [r4, #12]
100107de:	89a3      	ldrh	r3, [r4, #12]
100107e0:	431f      	orrs	r7, r3
100107e2:	81a7      	strh	r7, [r4, #12]
100107e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100107e6:	46c0      	nop			; (mov r8, r8)
100107e8:	10010579 	.word	0x10010579

100107ec <malloc>:
100107ec:	b510      	push	{r4, lr}
100107ee:	4b03      	ldr	r3, [pc, #12]	; (100107fc <malloc+0x10>)
100107f0:	0001      	movs	r1, r0
100107f2:	6818      	ldr	r0, [r3, #0]
100107f4:	f000 f84a 	bl	1001088c <_malloc_r>
100107f8:	bd10      	pop	{r4, pc}
100107fa:	46c0      	nop			; (mov r8, r8)
100107fc:	10012a98 	.word	0x10012a98

10010800 <_free_r>:
10010800:	b530      	push	{r4, r5, lr}
10010802:	2900      	cmp	r1, #0
10010804:	d03e      	beq.n	10010884 <_free_r+0x84>
10010806:	3904      	subs	r1, #4
10010808:	680b      	ldr	r3, [r1, #0]
1001080a:	2b00      	cmp	r3, #0
1001080c:	da00      	bge.n	10010810 <_free_r+0x10>
1001080e:	18c9      	adds	r1, r1, r3
10010810:	4a1d      	ldr	r2, [pc, #116]	; (10010888 <_free_r+0x88>)
10010812:	6813      	ldr	r3, [r2, #0]
10010814:	0014      	movs	r4, r2
10010816:	2b00      	cmp	r3, #0
10010818:	d102      	bne.n	10010820 <_free_r+0x20>
1001081a:	604b      	str	r3, [r1, #4]
1001081c:	6011      	str	r1, [r2, #0]
1001081e:	e031      	b.n	10010884 <_free_r+0x84>
10010820:	428b      	cmp	r3, r1
10010822:	d90d      	bls.n	10010840 <_free_r+0x40>
10010824:	680a      	ldr	r2, [r1, #0]
10010826:	1888      	adds	r0, r1, r2
10010828:	4283      	cmp	r3, r0
1001082a:	d103      	bne.n	10010834 <_free_r+0x34>
1001082c:	6818      	ldr	r0, [r3, #0]
1001082e:	685b      	ldr	r3, [r3, #4]
10010830:	1882      	adds	r2, r0, r2
10010832:	600a      	str	r2, [r1, #0]
10010834:	604b      	str	r3, [r1, #4]
10010836:	6021      	str	r1, [r4, #0]
10010838:	e024      	b.n	10010884 <_free_r+0x84>
1001083a:	428a      	cmp	r2, r1
1001083c:	d803      	bhi.n	10010846 <_free_r+0x46>
1001083e:	0013      	movs	r3, r2
10010840:	685a      	ldr	r2, [r3, #4]
10010842:	2a00      	cmp	r2, #0
10010844:	d1f9      	bne.n	1001083a <_free_r+0x3a>
10010846:	681d      	ldr	r5, [r3, #0]
10010848:	195c      	adds	r4, r3, r5
1001084a:	428c      	cmp	r4, r1
1001084c:	d10b      	bne.n	10010866 <_free_r+0x66>
1001084e:	6809      	ldr	r1, [r1, #0]
10010850:	1869      	adds	r1, r5, r1
10010852:	1858      	adds	r0, r3, r1
10010854:	6019      	str	r1, [r3, #0]
10010856:	4282      	cmp	r2, r0
10010858:	d114      	bne.n	10010884 <_free_r+0x84>
1001085a:	6810      	ldr	r0, [r2, #0]
1001085c:	6852      	ldr	r2, [r2, #4]
1001085e:	1841      	adds	r1, r0, r1
10010860:	6019      	str	r1, [r3, #0]
10010862:	605a      	str	r2, [r3, #4]
10010864:	e00e      	b.n	10010884 <_free_r+0x84>
10010866:	428c      	cmp	r4, r1
10010868:	d902      	bls.n	10010870 <_free_r+0x70>
1001086a:	230c      	movs	r3, #12
1001086c:	6003      	str	r3, [r0, #0]
1001086e:	e009      	b.n	10010884 <_free_r+0x84>
10010870:	6808      	ldr	r0, [r1, #0]
10010872:	180c      	adds	r4, r1, r0
10010874:	42a2      	cmp	r2, r4
10010876:	d103      	bne.n	10010880 <_free_r+0x80>
10010878:	6814      	ldr	r4, [r2, #0]
1001087a:	6852      	ldr	r2, [r2, #4]
1001087c:	1820      	adds	r0, r4, r0
1001087e:	6008      	str	r0, [r1, #0]
10010880:	604a      	str	r2, [r1, #4]
10010882:	6059      	str	r1, [r3, #4]
10010884:	bd30      	pop	{r4, r5, pc}
10010886:	46c0      	nop			; (mov r8, r8)
10010888:	10012d50 	.word	0x10012d50

1001088c <_malloc_r>:
1001088c:	2303      	movs	r3, #3
1001088e:	b570      	push	{r4, r5, r6, lr}
10010890:	1ccd      	adds	r5, r1, #3
10010892:	439d      	bics	r5, r3
10010894:	3508      	adds	r5, #8
10010896:	0006      	movs	r6, r0
10010898:	2d0c      	cmp	r5, #12
1001089a:	d201      	bcs.n	100108a0 <_malloc_r+0x14>
1001089c:	250c      	movs	r5, #12
1001089e:	e005      	b.n	100108ac <_malloc_r+0x20>
100108a0:	2d00      	cmp	r5, #0
100108a2:	da03      	bge.n	100108ac <_malloc_r+0x20>
100108a4:	230c      	movs	r3, #12
100108a6:	2000      	movs	r0, #0
100108a8:	6033      	str	r3, [r6, #0]
100108aa:	e040      	b.n	1001092e <_malloc_r+0xa2>
100108ac:	42a9      	cmp	r1, r5
100108ae:	d8f9      	bhi.n	100108a4 <_malloc_r+0x18>
100108b0:	4b1f      	ldr	r3, [pc, #124]	; (10010930 <_malloc_r+0xa4>)
100108b2:	681c      	ldr	r4, [r3, #0]
100108b4:	001a      	movs	r2, r3
100108b6:	0021      	movs	r1, r4
100108b8:	2900      	cmp	r1, #0
100108ba:	d013      	beq.n	100108e4 <_malloc_r+0x58>
100108bc:	680b      	ldr	r3, [r1, #0]
100108be:	1b5b      	subs	r3, r3, r5
100108c0:	d40d      	bmi.n	100108de <_malloc_r+0x52>
100108c2:	2b0b      	cmp	r3, #11
100108c4:	d902      	bls.n	100108cc <_malloc_r+0x40>
100108c6:	600b      	str	r3, [r1, #0]
100108c8:	18cc      	adds	r4, r1, r3
100108ca:	e01e      	b.n	1001090a <_malloc_r+0x7e>
100108cc:	428c      	cmp	r4, r1
100108ce:	d102      	bne.n	100108d6 <_malloc_r+0x4a>
100108d0:	6863      	ldr	r3, [r4, #4]
100108d2:	6013      	str	r3, [r2, #0]
100108d4:	e01a      	b.n	1001090c <_malloc_r+0x80>
100108d6:	684b      	ldr	r3, [r1, #4]
100108d8:	6063      	str	r3, [r4, #4]
100108da:	000c      	movs	r4, r1
100108dc:	e016      	b.n	1001090c <_malloc_r+0x80>
100108de:	000c      	movs	r4, r1
100108e0:	6849      	ldr	r1, [r1, #4]
100108e2:	e7e9      	b.n	100108b8 <_malloc_r+0x2c>
100108e4:	4c13      	ldr	r4, [pc, #76]	; (10010934 <_malloc_r+0xa8>)
100108e6:	6823      	ldr	r3, [r4, #0]
100108e8:	2b00      	cmp	r3, #0
100108ea:	d103      	bne.n	100108f4 <_malloc_r+0x68>
100108ec:	0030      	movs	r0, r6
100108ee:	f000 fb2d 	bl	10010f4c <_sbrk_r>
100108f2:	6020      	str	r0, [r4, #0]
100108f4:	0029      	movs	r1, r5
100108f6:	0030      	movs	r0, r6
100108f8:	f000 fb28 	bl	10010f4c <_sbrk_r>
100108fc:	1c43      	adds	r3, r0, #1
100108fe:	d0d1      	beq.n	100108a4 <_malloc_r+0x18>
10010900:	2303      	movs	r3, #3
10010902:	1cc4      	adds	r4, r0, #3
10010904:	439c      	bics	r4, r3
10010906:	42a0      	cmp	r0, r4
10010908:	d10a      	bne.n	10010920 <_malloc_r+0x94>
1001090a:	6025      	str	r5, [r4, #0]
1001090c:	0020      	movs	r0, r4
1001090e:	2207      	movs	r2, #7
10010910:	300b      	adds	r0, #11
10010912:	1d23      	adds	r3, r4, #4
10010914:	4390      	bics	r0, r2
10010916:	1ac3      	subs	r3, r0, r3
10010918:	d009      	beq.n	1001092e <_malloc_r+0xa2>
1001091a:	425a      	negs	r2, r3
1001091c:	50e2      	str	r2, [r4, r3]
1001091e:	e006      	b.n	1001092e <_malloc_r+0xa2>
10010920:	1a21      	subs	r1, r4, r0
10010922:	0030      	movs	r0, r6
10010924:	f000 fb12 	bl	10010f4c <_sbrk_r>
10010928:	1c43      	adds	r3, r0, #1
1001092a:	d1ee      	bne.n	1001090a <_malloc_r+0x7e>
1001092c:	e7ba      	b.n	100108a4 <_malloc_r+0x18>
1001092e:	bd70      	pop	{r4, r5, r6, pc}
10010930:	10012d50 	.word	0x10012d50
10010934:	10012d4c 	.word	0x10012d4c

10010938 <__sfputc_r>:
10010938:	6893      	ldr	r3, [r2, #8]
1001093a:	b510      	push	{r4, lr}
1001093c:	3b01      	subs	r3, #1
1001093e:	6093      	str	r3, [r2, #8]
10010940:	2b00      	cmp	r3, #0
10010942:	da05      	bge.n	10010950 <__sfputc_r+0x18>
10010944:	6994      	ldr	r4, [r2, #24]
10010946:	42a3      	cmp	r3, r4
10010948:	db08      	blt.n	1001095c <__sfputc_r+0x24>
1001094a:	b2cb      	uxtb	r3, r1
1001094c:	2b0a      	cmp	r3, #10
1001094e:	d005      	beq.n	1001095c <__sfputc_r+0x24>
10010950:	6813      	ldr	r3, [r2, #0]
10010952:	1c58      	adds	r0, r3, #1
10010954:	6010      	str	r0, [r2, #0]
10010956:	7019      	strb	r1, [r3, #0]
10010958:	b2c8      	uxtb	r0, r1
1001095a:	e001      	b.n	10010960 <__sfputc_r+0x28>
1001095c:	f7ff fc8c 	bl	10010278 <__swbuf_r>
10010960:	bd10      	pop	{r4, pc}

10010962 <__sfputs_r>:
10010962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010964:	0006      	movs	r6, r0
10010966:	000f      	movs	r7, r1
10010968:	0014      	movs	r4, r2
1001096a:	18d5      	adds	r5, r2, r3
1001096c:	42ac      	cmp	r4, r5
1001096e:	d008      	beq.n	10010982 <__sfputs_r+0x20>
10010970:	7821      	ldrb	r1, [r4, #0]
10010972:	003a      	movs	r2, r7
10010974:	0030      	movs	r0, r6
10010976:	f7ff ffdf 	bl	10010938 <__sfputc_r>
1001097a:	3401      	adds	r4, #1
1001097c:	1c43      	adds	r3, r0, #1
1001097e:	d1f5      	bne.n	1001096c <__sfputs_r+0xa>
10010980:	e000      	b.n	10010984 <__sfputs_r+0x22>
10010982:	2000      	movs	r0, #0
10010984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010988 <_vfiprintf_r>:
10010988:	b5f0      	push	{r4, r5, r6, r7, lr}
1001098a:	b09f      	sub	sp, #124	; 0x7c
1001098c:	0006      	movs	r6, r0
1001098e:	000f      	movs	r7, r1
10010990:	9202      	str	r2, [sp, #8]
10010992:	9305      	str	r3, [sp, #20]
10010994:	2800      	cmp	r0, #0
10010996:	d004      	beq.n	100109a2 <_vfiprintf_r+0x1a>
10010998:	6983      	ldr	r3, [r0, #24]
1001099a:	2b00      	cmp	r3, #0
1001099c:	d101      	bne.n	100109a2 <_vfiprintf_r+0x1a>
1001099e:	f7ff fe2d 	bl	100105fc <__sinit>
100109a2:	4b7f      	ldr	r3, [pc, #508]	; (10010ba0 <_vfiprintf_r+0x218>)
100109a4:	429f      	cmp	r7, r3
100109a6:	d101      	bne.n	100109ac <_vfiprintf_r+0x24>
100109a8:	6877      	ldr	r7, [r6, #4]
100109aa:	e008      	b.n	100109be <_vfiprintf_r+0x36>
100109ac:	4b7d      	ldr	r3, [pc, #500]	; (10010ba4 <_vfiprintf_r+0x21c>)
100109ae:	429f      	cmp	r7, r3
100109b0:	d101      	bne.n	100109b6 <_vfiprintf_r+0x2e>
100109b2:	68b7      	ldr	r7, [r6, #8]
100109b4:	e003      	b.n	100109be <_vfiprintf_r+0x36>
100109b6:	4b7c      	ldr	r3, [pc, #496]	; (10010ba8 <_vfiprintf_r+0x220>)
100109b8:	429f      	cmp	r7, r3
100109ba:	d100      	bne.n	100109be <_vfiprintf_r+0x36>
100109bc:	68f7      	ldr	r7, [r6, #12]
100109be:	89bb      	ldrh	r3, [r7, #12]
100109c0:	071b      	lsls	r3, r3, #28
100109c2:	d50a      	bpl.n	100109da <_vfiprintf_r+0x52>
100109c4:	693b      	ldr	r3, [r7, #16]
100109c6:	2b00      	cmp	r3, #0
100109c8:	d007      	beq.n	100109da <_vfiprintf_r+0x52>
100109ca:	2300      	movs	r3, #0
100109cc:	ad06      	add	r5, sp, #24
100109ce:	616b      	str	r3, [r5, #20]
100109d0:	3320      	adds	r3, #32
100109d2:	766b      	strb	r3, [r5, #25]
100109d4:	3310      	adds	r3, #16
100109d6:	76ab      	strb	r3, [r5, #26]
100109d8:	e03d      	b.n	10010a56 <_vfiprintf_r+0xce>
100109da:	0039      	movs	r1, r7
100109dc:	0030      	movs	r0, r6
100109de:	f7ff fca3 	bl	10010328 <__swsetup_r>
100109e2:	2800      	cmp	r0, #0
100109e4:	d0f1      	beq.n	100109ca <_vfiprintf_r+0x42>
100109e6:	2001      	movs	r0, #1
100109e8:	4240      	negs	r0, r0
100109ea:	e0d6      	b.n	10010b9a <_vfiprintf_r+0x212>
100109ec:	9a05      	ldr	r2, [sp, #20]
100109ee:	1d11      	adds	r1, r2, #4
100109f0:	6812      	ldr	r2, [r2, #0]
100109f2:	9105      	str	r1, [sp, #20]
100109f4:	2a00      	cmp	r2, #0
100109f6:	da00      	bge.n	100109fa <_vfiprintf_r+0x72>
100109f8:	e07f      	b.n	10010afa <_vfiprintf_r+0x172>
100109fa:	9209      	str	r2, [sp, #36]	; 0x24
100109fc:	3401      	adds	r4, #1
100109fe:	7823      	ldrb	r3, [r4, #0]
10010a00:	2b2e      	cmp	r3, #46	; 0x2e
10010a02:	d100      	bne.n	10010a06 <_vfiprintf_r+0x7e>
10010a04:	e08d      	b.n	10010b22 <_vfiprintf_r+0x19a>
10010a06:	7821      	ldrb	r1, [r4, #0]
10010a08:	2203      	movs	r2, #3
10010a0a:	4868      	ldr	r0, [pc, #416]	; (10010bac <_vfiprintf_r+0x224>)
10010a0c:	f000 fb5a 	bl	100110c4 <memchr>
10010a10:	2800      	cmp	r0, #0
10010a12:	d007      	beq.n	10010a24 <_vfiprintf_r+0x9c>
10010a14:	4b65      	ldr	r3, [pc, #404]	; (10010bac <_vfiprintf_r+0x224>)
10010a16:	682a      	ldr	r2, [r5, #0]
10010a18:	1ac0      	subs	r0, r0, r3
10010a1a:	2340      	movs	r3, #64	; 0x40
10010a1c:	4083      	lsls	r3, r0
10010a1e:	4313      	orrs	r3, r2
10010a20:	602b      	str	r3, [r5, #0]
10010a22:	3401      	adds	r4, #1
10010a24:	7821      	ldrb	r1, [r4, #0]
10010a26:	1c63      	adds	r3, r4, #1
10010a28:	2206      	movs	r2, #6
10010a2a:	4861      	ldr	r0, [pc, #388]	; (10010bb0 <_vfiprintf_r+0x228>)
10010a2c:	9302      	str	r3, [sp, #8]
10010a2e:	7629      	strb	r1, [r5, #24]
10010a30:	f000 fb48 	bl	100110c4 <memchr>
10010a34:	2800      	cmp	r0, #0
10010a36:	d100      	bne.n	10010a3a <_vfiprintf_r+0xb2>
10010a38:	e09d      	b.n	10010b76 <_vfiprintf_r+0x1ee>
10010a3a:	4b5e      	ldr	r3, [pc, #376]	; (10010bb4 <_vfiprintf_r+0x22c>)
10010a3c:	2b00      	cmp	r3, #0
10010a3e:	d000      	beq.n	10010a42 <_vfiprintf_r+0xba>
10010a40:	e090      	b.n	10010b64 <_vfiprintf_r+0x1dc>
10010a42:	2207      	movs	r2, #7
10010a44:	9b05      	ldr	r3, [sp, #20]
10010a46:	3307      	adds	r3, #7
10010a48:	4393      	bics	r3, r2
10010a4a:	3308      	adds	r3, #8
10010a4c:	9305      	str	r3, [sp, #20]
10010a4e:	696b      	ldr	r3, [r5, #20]
10010a50:	9a03      	ldr	r2, [sp, #12]
10010a52:	189b      	adds	r3, r3, r2
10010a54:	616b      	str	r3, [r5, #20]
10010a56:	9c02      	ldr	r4, [sp, #8]
10010a58:	7823      	ldrb	r3, [r4, #0]
10010a5a:	2b00      	cmp	r3, #0
10010a5c:	d104      	bne.n	10010a68 <_vfiprintf_r+0xe0>
10010a5e:	9b02      	ldr	r3, [sp, #8]
10010a60:	1ae3      	subs	r3, r4, r3
10010a62:	9304      	str	r3, [sp, #16]
10010a64:	d012      	beq.n	10010a8c <_vfiprintf_r+0x104>
10010a66:	e003      	b.n	10010a70 <_vfiprintf_r+0xe8>
10010a68:	2b25      	cmp	r3, #37	; 0x25
10010a6a:	d0f8      	beq.n	10010a5e <_vfiprintf_r+0xd6>
10010a6c:	3401      	adds	r4, #1
10010a6e:	e7f3      	b.n	10010a58 <_vfiprintf_r+0xd0>
10010a70:	9b04      	ldr	r3, [sp, #16]
10010a72:	9a02      	ldr	r2, [sp, #8]
10010a74:	0039      	movs	r1, r7
10010a76:	0030      	movs	r0, r6
10010a78:	f7ff ff73 	bl	10010962 <__sfputs_r>
10010a7c:	1c43      	adds	r3, r0, #1
10010a7e:	d100      	bne.n	10010a82 <_vfiprintf_r+0xfa>
10010a80:	e086      	b.n	10010b90 <_vfiprintf_r+0x208>
10010a82:	696a      	ldr	r2, [r5, #20]
10010a84:	9b04      	ldr	r3, [sp, #16]
10010a86:	4694      	mov	ip, r2
10010a88:	4463      	add	r3, ip
10010a8a:	616b      	str	r3, [r5, #20]
10010a8c:	7823      	ldrb	r3, [r4, #0]
10010a8e:	2b00      	cmp	r3, #0
10010a90:	d07e      	beq.n	10010b90 <_vfiprintf_r+0x208>
10010a92:	2201      	movs	r2, #1
10010a94:	2300      	movs	r3, #0
10010a96:	4252      	negs	r2, r2
10010a98:	606a      	str	r2, [r5, #4]
10010a9a:	a902      	add	r1, sp, #8
10010a9c:	3254      	adds	r2, #84	; 0x54
10010a9e:	1852      	adds	r2, r2, r1
10010aa0:	3401      	adds	r4, #1
10010aa2:	602b      	str	r3, [r5, #0]
10010aa4:	60eb      	str	r3, [r5, #12]
10010aa6:	60ab      	str	r3, [r5, #8]
10010aa8:	7013      	strb	r3, [r2, #0]
10010aaa:	65ab      	str	r3, [r5, #88]	; 0x58
10010aac:	7821      	ldrb	r1, [r4, #0]
10010aae:	2205      	movs	r2, #5
10010ab0:	4841      	ldr	r0, [pc, #260]	; (10010bb8 <_vfiprintf_r+0x230>)
10010ab2:	f000 fb07 	bl	100110c4 <memchr>
10010ab6:	2800      	cmp	r0, #0
10010ab8:	d008      	beq.n	10010acc <_vfiprintf_r+0x144>
10010aba:	4b3f      	ldr	r3, [pc, #252]	; (10010bb8 <_vfiprintf_r+0x230>)
10010abc:	682a      	ldr	r2, [r5, #0]
10010abe:	1ac0      	subs	r0, r0, r3
10010ac0:	2301      	movs	r3, #1
10010ac2:	4083      	lsls	r3, r0
10010ac4:	4313      	orrs	r3, r2
10010ac6:	602b      	str	r3, [r5, #0]
10010ac8:	3401      	adds	r4, #1
10010aca:	e7ef      	b.n	10010aac <_vfiprintf_r+0x124>
10010acc:	682b      	ldr	r3, [r5, #0]
10010ace:	06da      	lsls	r2, r3, #27
10010ad0:	d504      	bpl.n	10010adc <_vfiprintf_r+0x154>
10010ad2:	2253      	movs	r2, #83	; 0x53
10010ad4:	2120      	movs	r1, #32
10010ad6:	a802      	add	r0, sp, #8
10010ad8:	1812      	adds	r2, r2, r0
10010ada:	7011      	strb	r1, [r2, #0]
10010adc:	071a      	lsls	r2, r3, #28
10010ade:	d504      	bpl.n	10010aea <_vfiprintf_r+0x162>
10010ae0:	2253      	movs	r2, #83	; 0x53
10010ae2:	212b      	movs	r1, #43	; 0x2b
10010ae4:	a802      	add	r0, sp, #8
10010ae6:	1812      	adds	r2, r2, r0
10010ae8:	7011      	strb	r1, [r2, #0]
10010aea:	7822      	ldrb	r2, [r4, #0]
10010aec:	2a2a      	cmp	r2, #42	; 0x2a
10010aee:	d100      	bne.n	10010af2 <_vfiprintf_r+0x16a>
10010af0:	e77c      	b.n	100109ec <_vfiprintf_r+0x64>
10010af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010af4:	2000      	movs	r0, #0
10010af6:	210a      	movs	r1, #10
10010af8:	e005      	b.n	10010b06 <_vfiprintf_r+0x17e>
10010afa:	4252      	negs	r2, r2
10010afc:	60ea      	str	r2, [r5, #12]
10010afe:	2202      	movs	r2, #2
10010b00:	4313      	orrs	r3, r2
10010b02:	602b      	str	r3, [r5, #0]
10010b04:	e77a      	b.n	100109fc <_vfiprintf_r+0x74>
10010b06:	7822      	ldrb	r2, [r4, #0]
10010b08:	3a30      	subs	r2, #48	; 0x30
10010b0a:	2a09      	cmp	r2, #9
10010b0c:	d804      	bhi.n	10010b18 <_vfiprintf_r+0x190>
10010b0e:	434b      	muls	r3, r1
10010b10:	3401      	adds	r4, #1
10010b12:	189b      	adds	r3, r3, r2
10010b14:	2001      	movs	r0, #1
10010b16:	e7f6      	b.n	10010b06 <_vfiprintf_r+0x17e>
10010b18:	2800      	cmp	r0, #0
10010b1a:	d100      	bne.n	10010b1e <_vfiprintf_r+0x196>
10010b1c:	e76f      	b.n	100109fe <_vfiprintf_r+0x76>
10010b1e:	9309      	str	r3, [sp, #36]	; 0x24
10010b20:	e76d      	b.n	100109fe <_vfiprintf_r+0x76>
10010b22:	7863      	ldrb	r3, [r4, #1]
10010b24:	2b2a      	cmp	r3, #42	; 0x2a
10010b26:	d10a      	bne.n	10010b3e <_vfiprintf_r+0x1b6>
10010b28:	9b05      	ldr	r3, [sp, #20]
10010b2a:	3402      	adds	r4, #2
10010b2c:	1d1a      	adds	r2, r3, #4
10010b2e:	681b      	ldr	r3, [r3, #0]
10010b30:	9205      	str	r2, [sp, #20]
10010b32:	2b00      	cmp	r3, #0
10010b34:	da01      	bge.n	10010b3a <_vfiprintf_r+0x1b2>
10010b36:	2301      	movs	r3, #1
10010b38:	425b      	negs	r3, r3
10010b3a:	9307      	str	r3, [sp, #28]
10010b3c:	e763      	b.n	10010a06 <_vfiprintf_r+0x7e>
10010b3e:	2300      	movs	r3, #0
10010b40:	200a      	movs	r0, #10
10010b42:	001a      	movs	r2, r3
10010b44:	3401      	adds	r4, #1
10010b46:	606b      	str	r3, [r5, #4]
10010b48:	7821      	ldrb	r1, [r4, #0]
10010b4a:	3930      	subs	r1, #48	; 0x30
10010b4c:	2909      	cmp	r1, #9
10010b4e:	d804      	bhi.n	10010b5a <_vfiprintf_r+0x1d2>
10010b50:	4342      	muls	r2, r0
10010b52:	3401      	adds	r4, #1
10010b54:	1852      	adds	r2, r2, r1
10010b56:	2301      	movs	r3, #1
10010b58:	e7f6      	b.n	10010b48 <_vfiprintf_r+0x1c0>
10010b5a:	2b00      	cmp	r3, #0
10010b5c:	d100      	bne.n	10010b60 <_vfiprintf_r+0x1d8>
10010b5e:	e752      	b.n	10010a06 <_vfiprintf_r+0x7e>
10010b60:	9207      	str	r2, [sp, #28]
10010b62:	e750      	b.n	10010a06 <_vfiprintf_r+0x7e>
10010b64:	ab05      	add	r3, sp, #20
10010b66:	9300      	str	r3, [sp, #0]
10010b68:	003a      	movs	r2, r7
10010b6a:	4b14      	ldr	r3, [pc, #80]	; (10010bbc <_vfiprintf_r+0x234>)
10010b6c:	0029      	movs	r1, r5
10010b6e:	0030      	movs	r0, r6
10010b70:	e000      	b.n	10010b74 <_vfiprintf_r+0x1ec>
10010b72:	bf00      	nop
10010b74:	e007      	b.n	10010b86 <_vfiprintf_r+0x1fe>
10010b76:	ab05      	add	r3, sp, #20
10010b78:	9300      	str	r3, [sp, #0]
10010b7a:	003a      	movs	r2, r7
10010b7c:	4b0f      	ldr	r3, [pc, #60]	; (10010bbc <_vfiprintf_r+0x234>)
10010b7e:	0029      	movs	r1, r5
10010b80:	0030      	movs	r0, r6
10010b82:	f000 f88b 	bl	10010c9c <_printf_i>
10010b86:	9003      	str	r0, [sp, #12]
10010b88:	9b03      	ldr	r3, [sp, #12]
10010b8a:	3301      	adds	r3, #1
10010b8c:	d000      	beq.n	10010b90 <_vfiprintf_r+0x208>
10010b8e:	e75e      	b.n	10010a4e <_vfiprintf_r+0xc6>
10010b90:	89bb      	ldrh	r3, [r7, #12]
10010b92:	065b      	lsls	r3, r3, #25
10010b94:	d500      	bpl.n	10010b98 <_vfiprintf_r+0x210>
10010b96:	e726      	b.n	100109e6 <_vfiprintf_r+0x5e>
10010b98:	980b      	ldr	r0, [sp, #44]	; 0x2c
10010b9a:	b01f      	add	sp, #124	; 0x7c
10010b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b9e:	46c0      	nop			; (mov r8, r8)
10010ba0:	1001297c 	.word	0x1001297c
10010ba4:	1001299c 	.word	0x1001299c
10010ba8:	100129bc 	.word	0x100129bc
10010bac:	100129e2 	.word	0x100129e2
10010bb0:	100129e6 	.word	0x100129e6
10010bb4:	00000000 	.word	0x00000000
10010bb8:	100129dc 	.word	0x100129dc
10010bbc:	10010963 	.word	0x10010963

10010bc0 <_printf_common>:
10010bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010bc2:	0017      	movs	r7, r2
10010bc4:	9301      	str	r3, [sp, #4]
10010bc6:	688a      	ldr	r2, [r1, #8]
10010bc8:	690b      	ldr	r3, [r1, #16]
10010bca:	9000      	str	r0, [sp, #0]
10010bcc:	000c      	movs	r4, r1
10010bce:	4293      	cmp	r3, r2
10010bd0:	da00      	bge.n	10010bd4 <_printf_common+0x14>
10010bd2:	0013      	movs	r3, r2
10010bd4:	0022      	movs	r2, r4
10010bd6:	603b      	str	r3, [r7, #0]
10010bd8:	3243      	adds	r2, #67	; 0x43
10010bda:	7812      	ldrb	r2, [r2, #0]
10010bdc:	2a00      	cmp	r2, #0
10010bde:	d001      	beq.n	10010be4 <_printf_common+0x24>
10010be0:	3301      	adds	r3, #1
10010be2:	603b      	str	r3, [r7, #0]
10010be4:	6823      	ldr	r3, [r4, #0]
10010be6:	069b      	lsls	r3, r3, #26
10010be8:	d502      	bpl.n	10010bf0 <_printf_common+0x30>
10010bea:	683b      	ldr	r3, [r7, #0]
10010bec:	3302      	adds	r3, #2
10010bee:	603b      	str	r3, [r7, #0]
10010bf0:	2506      	movs	r5, #6
10010bf2:	6823      	ldr	r3, [r4, #0]
10010bf4:	401d      	ands	r5, r3
10010bf6:	d01e      	beq.n	10010c36 <_printf_common+0x76>
10010bf8:	0023      	movs	r3, r4
10010bfa:	3343      	adds	r3, #67	; 0x43
10010bfc:	781b      	ldrb	r3, [r3, #0]
10010bfe:	1e5a      	subs	r2, r3, #1
10010c00:	4193      	sbcs	r3, r2
10010c02:	6822      	ldr	r2, [r4, #0]
10010c04:	0692      	lsls	r2, r2, #26
10010c06:	d51c      	bpl.n	10010c42 <_printf_common+0x82>
10010c08:	2030      	movs	r0, #48	; 0x30
10010c0a:	18e1      	adds	r1, r4, r3
10010c0c:	3143      	adds	r1, #67	; 0x43
10010c0e:	7008      	strb	r0, [r1, #0]
10010c10:	0021      	movs	r1, r4
10010c12:	1c5a      	adds	r2, r3, #1
10010c14:	3145      	adds	r1, #69	; 0x45
10010c16:	7809      	ldrb	r1, [r1, #0]
10010c18:	18a2      	adds	r2, r4, r2
10010c1a:	3243      	adds	r2, #67	; 0x43
10010c1c:	3302      	adds	r3, #2
10010c1e:	7011      	strb	r1, [r2, #0]
10010c20:	e00f      	b.n	10010c42 <_printf_common+0x82>
10010c22:	0022      	movs	r2, r4
10010c24:	2301      	movs	r3, #1
10010c26:	3219      	adds	r2, #25
10010c28:	9901      	ldr	r1, [sp, #4]
10010c2a:	9800      	ldr	r0, [sp, #0]
10010c2c:	9e08      	ldr	r6, [sp, #32]
10010c2e:	47b0      	blx	r6
10010c30:	1c43      	adds	r3, r0, #1
10010c32:	d00e      	beq.n	10010c52 <_printf_common+0x92>
10010c34:	3501      	adds	r5, #1
10010c36:	68e3      	ldr	r3, [r4, #12]
10010c38:	683a      	ldr	r2, [r7, #0]
10010c3a:	1a9b      	subs	r3, r3, r2
10010c3c:	429d      	cmp	r5, r3
10010c3e:	dbf0      	blt.n	10010c22 <_printf_common+0x62>
10010c40:	e7da      	b.n	10010bf8 <_printf_common+0x38>
10010c42:	0022      	movs	r2, r4
10010c44:	9901      	ldr	r1, [sp, #4]
10010c46:	3243      	adds	r2, #67	; 0x43
10010c48:	9800      	ldr	r0, [sp, #0]
10010c4a:	9d08      	ldr	r5, [sp, #32]
10010c4c:	47a8      	blx	r5
10010c4e:	1c43      	adds	r3, r0, #1
10010c50:	d102      	bne.n	10010c58 <_printf_common+0x98>
10010c52:	2001      	movs	r0, #1
10010c54:	4240      	negs	r0, r0
10010c56:	e020      	b.n	10010c9a <_printf_common+0xda>
10010c58:	2306      	movs	r3, #6
10010c5a:	6820      	ldr	r0, [r4, #0]
10010c5c:	68e1      	ldr	r1, [r4, #12]
10010c5e:	683a      	ldr	r2, [r7, #0]
10010c60:	4003      	ands	r3, r0
10010c62:	2500      	movs	r5, #0
10010c64:	2b04      	cmp	r3, #4
10010c66:	d103      	bne.n	10010c70 <_printf_common+0xb0>
10010c68:	1a8d      	subs	r5, r1, r2
10010c6a:	43eb      	mvns	r3, r5
10010c6c:	17db      	asrs	r3, r3, #31
10010c6e:	401d      	ands	r5, r3
10010c70:	68a3      	ldr	r3, [r4, #8]
10010c72:	6922      	ldr	r2, [r4, #16]
10010c74:	4293      	cmp	r3, r2
10010c76:	dd01      	ble.n	10010c7c <_printf_common+0xbc>
10010c78:	1a9b      	subs	r3, r3, r2
10010c7a:	18ed      	adds	r5, r5, r3
10010c7c:	2700      	movs	r7, #0
10010c7e:	42bd      	cmp	r5, r7
10010c80:	d00a      	beq.n	10010c98 <_printf_common+0xd8>
10010c82:	0022      	movs	r2, r4
10010c84:	2301      	movs	r3, #1
10010c86:	321a      	adds	r2, #26
10010c88:	9901      	ldr	r1, [sp, #4]
10010c8a:	9800      	ldr	r0, [sp, #0]
10010c8c:	9e08      	ldr	r6, [sp, #32]
10010c8e:	47b0      	blx	r6
10010c90:	1c43      	adds	r3, r0, #1
10010c92:	d0de      	beq.n	10010c52 <_printf_common+0x92>
10010c94:	3701      	adds	r7, #1
10010c96:	e7f2      	b.n	10010c7e <_printf_common+0xbe>
10010c98:	2000      	movs	r0, #0
10010c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010c9c <_printf_i>:
10010c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c9e:	b08b      	sub	sp, #44	; 0x2c
10010ca0:	9206      	str	r2, [sp, #24]
10010ca2:	000a      	movs	r2, r1
10010ca4:	3243      	adds	r2, #67	; 0x43
10010ca6:	9307      	str	r3, [sp, #28]
10010ca8:	9005      	str	r0, [sp, #20]
10010caa:	9204      	str	r2, [sp, #16]
10010cac:	7e0a      	ldrb	r2, [r1, #24]
10010cae:	000c      	movs	r4, r1
10010cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010cb2:	2a6e      	cmp	r2, #110	; 0x6e
10010cb4:	d100      	bne.n	10010cb8 <_printf_i+0x1c>
10010cb6:	e0ab      	b.n	10010e10 <_printf_i+0x174>
10010cb8:	d811      	bhi.n	10010cde <_printf_i+0x42>
10010cba:	2a63      	cmp	r2, #99	; 0x63
10010cbc:	d022      	beq.n	10010d04 <_printf_i+0x68>
10010cbe:	d809      	bhi.n	10010cd4 <_printf_i+0x38>
10010cc0:	2a00      	cmp	r2, #0
10010cc2:	d100      	bne.n	10010cc6 <_printf_i+0x2a>
10010cc4:	e0b5      	b.n	10010e32 <_printf_i+0x196>
10010cc6:	2a58      	cmp	r2, #88	; 0x58
10010cc8:	d000      	beq.n	10010ccc <_printf_i+0x30>
10010cca:	e0c5      	b.n	10010e58 <_printf_i+0x1bc>
10010ccc:	3145      	adds	r1, #69	; 0x45
10010cce:	700a      	strb	r2, [r1, #0]
10010cd0:	4a81      	ldr	r2, [pc, #516]	; (10010ed8 <_printf_i+0x23c>)
10010cd2:	e04f      	b.n	10010d74 <_printf_i+0xd8>
10010cd4:	2a64      	cmp	r2, #100	; 0x64
10010cd6:	d01d      	beq.n	10010d14 <_printf_i+0x78>
10010cd8:	2a69      	cmp	r2, #105	; 0x69
10010cda:	d01b      	beq.n	10010d14 <_printf_i+0x78>
10010cdc:	e0bc      	b.n	10010e58 <_printf_i+0x1bc>
10010cde:	2a73      	cmp	r2, #115	; 0x73
10010ce0:	d100      	bne.n	10010ce4 <_printf_i+0x48>
10010ce2:	e0aa      	b.n	10010e3a <_printf_i+0x19e>
10010ce4:	d809      	bhi.n	10010cfa <_printf_i+0x5e>
10010ce6:	2a6f      	cmp	r2, #111	; 0x6f
10010ce8:	d029      	beq.n	10010d3e <_printf_i+0xa2>
10010cea:	2a70      	cmp	r2, #112	; 0x70
10010cec:	d000      	beq.n	10010cf0 <_printf_i+0x54>
10010cee:	e0b3      	b.n	10010e58 <_printf_i+0x1bc>
10010cf0:	2220      	movs	r2, #32
10010cf2:	6809      	ldr	r1, [r1, #0]
10010cf4:	430a      	orrs	r2, r1
10010cf6:	6022      	str	r2, [r4, #0]
10010cf8:	e037      	b.n	10010d6a <_printf_i+0xce>
10010cfa:	2a75      	cmp	r2, #117	; 0x75
10010cfc:	d01f      	beq.n	10010d3e <_printf_i+0xa2>
10010cfe:	2a78      	cmp	r2, #120	; 0x78
10010d00:	d033      	beq.n	10010d6a <_printf_i+0xce>
10010d02:	e0a9      	b.n	10010e58 <_printf_i+0x1bc>
10010d04:	000e      	movs	r6, r1
10010d06:	681a      	ldr	r2, [r3, #0]
10010d08:	3642      	adds	r6, #66	; 0x42
10010d0a:	1d11      	adds	r1, r2, #4
10010d0c:	6019      	str	r1, [r3, #0]
10010d0e:	6813      	ldr	r3, [r2, #0]
10010d10:	7033      	strb	r3, [r6, #0]
10010d12:	e0a4      	b.n	10010e5e <_printf_i+0x1c2>
10010d14:	6821      	ldr	r1, [r4, #0]
10010d16:	681a      	ldr	r2, [r3, #0]
10010d18:	0608      	lsls	r0, r1, #24
10010d1a:	d406      	bmi.n	10010d2a <_printf_i+0x8e>
10010d1c:	0649      	lsls	r1, r1, #25
10010d1e:	d504      	bpl.n	10010d2a <_printf_i+0x8e>
10010d20:	1d11      	adds	r1, r2, #4
10010d22:	6019      	str	r1, [r3, #0]
10010d24:	2300      	movs	r3, #0
10010d26:	5ed5      	ldrsh	r5, [r2, r3]
10010d28:	e002      	b.n	10010d30 <_printf_i+0x94>
10010d2a:	1d11      	adds	r1, r2, #4
10010d2c:	6019      	str	r1, [r3, #0]
10010d2e:	6815      	ldr	r5, [r2, #0]
10010d30:	2d00      	cmp	r5, #0
10010d32:	da3b      	bge.n	10010dac <_printf_i+0x110>
10010d34:	232d      	movs	r3, #45	; 0x2d
10010d36:	9a04      	ldr	r2, [sp, #16]
10010d38:	426d      	negs	r5, r5
10010d3a:	7013      	strb	r3, [r2, #0]
10010d3c:	e036      	b.n	10010dac <_printf_i+0x110>
10010d3e:	6821      	ldr	r1, [r4, #0]
10010d40:	681a      	ldr	r2, [r3, #0]
10010d42:	0608      	lsls	r0, r1, #24
10010d44:	d406      	bmi.n	10010d54 <_printf_i+0xb8>
10010d46:	0649      	lsls	r1, r1, #25
10010d48:	d504      	bpl.n	10010d54 <_printf_i+0xb8>
10010d4a:	6815      	ldr	r5, [r2, #0]
10010d4c:	1d11      	adds	r1, r2, #4
10010d4e:	6019      	str	r1, [r3, #0]
10010d50:	b2ad      	uxth	r5, r5
10010d52:	e002      	b.n	10010d5a <_printf_i+0xbe>
10010d54:	1d11      	adds	r1, r2, #4
10010d56:	6019      	str	r1, [r3, #0]
10010d58:	6815      	ldr	r5, [r2, #0]
10010d5a:	4b5f      	ldr	r3, [pc, #380]	; (10010ed8 <_printf_i+0x23c>)
10010d5c:	7e22      	ldrb	r2, [r4, #24]
10010d5e:	9303      	str	r3, [sp, #12]
10010d60:	2708      	movs	r7, #8
10010d62:	2a6f      	cmp	r2, #111	; 0x6f
10010d64:	d01d      	beq.n	10010da2 <_printf_i+0x106>
10010d66:	270a      	movs	r7, #10
10010d68:	e01b      	b.n	10010da2 <_printf_i+0x106>
10010d6a:	0022      	movs	r2, r4
10010d6c:	2178      	movs	r1, #120	; 0x78
10010d6e:	3245      	adds	r2, #69	; 0x45
10010d70:	7011      	strb	r1, [r2, #0]
10010d72:	4a5a      	ldr	r2, [pc, #360]	; (10010edc <_printf_i+0x240>)
10010d74:	6819      	ldr	r1, [r3, #0]
10010d76:	9203      	str	r2, [sp, #12]
10010d78:	1d08      	adds	r0, r1, #4
10010d7a:	6822      	ldr	r2, [r4, #0]
10010d7c:	6018      	str	r0, [r3, #0]
10010d7e:	680d      	ldr	r5, [r1, #0]
10010d80:	0610      	lsls	r0, r2, #24
10010d82:	d402      	bmi.n	10010d8a <_printf_i+0xee>
10010d84:	0650      	lsls	r0, r2, #25
10010d86:	d500      	bpl.n	10010d8a <_printf_i+0xee>
10010d88:	b2ad      	uxth	r5, r5
10010d8a:	07d3      	lsls	r3, r2, #31
10010d8c:	d502      	bpl.n	10010d94 <_printf_i+0xf8>
10010d8e:	2320      	movs	r3, #32
10010d90:	431a      	orrs	r2, r3
10010d92:	6022      	str	r2, [r4, #0]
10010d94:	2710      	movs	r7, #16
10010d96:	2d00      	cmp	r5, #0
10010d98:	d103      	bne.n	10010da2 <_printf_i+0x106>
10010d9a:	2320      	movs	r3, #32
10010d9c:	6822      	ldr	r2, [r4, #0]
10010d9e:	439a      	bics	r2, r3
10010da0:	6022      	str	r2, [r4, #0]
10010da2:	0023      	movs	r3, r4
10010da4:	2200      	movs	r2, #0
10010da6:	3343      	adds	r3, #67	; 0x43
10010da8:	701a      	strb	r2, [r3, #0]
10010daa:	e002      	b.n	10010db2 <_printf_i+0x116>
10010dac:	270a      	movs	r7, #10
10010dae:	4b4a      	ldr	r3, [pc, #296]	; (10010ed8 <_printf_i+0x23c>)
10010db0:	9303      	str	r3, [sp, #12]
10010db2:	6863      	ldr	r3, [r4, #4]
10010db4:	60a3      	str	r3, [r4, #8]
10010db6:	2b00      	cmp	r3, #0
10010db8:	db09      	blt.n	10010dce <_printf_i+0x132>
10010dba:	2204      	movs	r2, #4
10010dbc:	6821      	ldr	r1, [r4, #0]
10010dbe:	4391      	bics	r1, r2
10010dc0:	6021      	str	r1, [r4, #0]
10010dc2:	2d00      	cmp	r5, #0
10010dc4:	d105      	bne.n	10010dd2 <_printf_i+0x136>
10010dc6:	9e04      	ldr	r6, [sp, #16]
10010dc8:	2b00      	cmp	r3, #0
10010dca:	d011      	beq.n	10010df0 <_printf_i+0x154>
10010dcc:	e07b      	b.n	10010ec6 <_printf_i+0x22a>
10010dce:	2d00      	cmp	r5, #0
10010dd0:	d079      	beq.n	10010ec6 <_printf_i+0x22a>
10010dd2:	9e04      	ldr	r6, [sp, #16]
10010dd4:	0028      	movs	r0, r5
10010dd6:	0039      	movs	r1, r7
10010dd8:	f7fd ffc4 	bl	1000ed64 <__aeabi_uidivmod>
10010ddc:	9b03      	ldr	r3, [sp, #12]
10010dde:	3e01      	subs	r6, #1
10010de0:	5c5b      	ldrb	r3, [r3, r1]
10010de2:	0028      	movs	r0, r5
10010de4:	7033      	strb	r3, [r6, #0]
10010de6:	0039      	movs	r1, r7
10010de8:	f7fd ff36 	bl	1000ec58 <__aeabi_uidiv>
10010dec:	1e05      	subs	r5, r0, #0
10010dee:	d1f1      	bne.n	10010dd4 <_printf_i+0x138>
10010df0:	2f08      	cmp	r7, #8
10010df2:	d109      	bne.n	10010e08 <_printf_i+0x16c>
10010df4:	6823      	ldr	r3, [r4, #0]
10010df6:	07db      	lsls	r3, r3, #31
10010df8:	d506      	bpl.n	10010e08 <_printf_i+0x16c>
10010dfa:	6863      	ldr	r3, [r4, #4]
10010dfc:	6922      	ldr	r2, [r4, #16]
10010dfe:	4293      	cmp	r3, r2
10010e00:	dc02      	bgt.n	10010e08 <_printf_i+0x16c>
10010e02:	2330      	movs	r3, #48	; 0x30
10010e04:	3e01      	subs	r6, #1
10010e06:	7033      	strb	r3, [r6, #0]
10010e08:	9b04      	ldr	r3, [sp, #16]
10010e0a:	1b9b      	subs	r3, r3, r6
10010e0c:	6123      	str	r3, [r4, #16]
10010e0e:	e02b      	b.n	10010e68 <_printf_i+0x1cc>
10010e10:	6809      	ldr	r1, [r1, #0]
10010e12:	681a      	ldr	r2, [r3, #0]
10010e14:	0608      	lsls	r0, r1, #24
10010e16:	d407      	bmi.n	10010e28 <_printf_i+0x18c>
10010e18:	0649      	lsls	r1, r1, #25
10010e1a:	d505      	bpl.n	10010e28 <_printf_i+0x18c>
10010e1c:	1d11      	adds	r1, r2, #4
10010e1e:	6019      	str	r1, [r3, #0]
10010e20:	6813      	ldr	r3, [r2, #0]
10010e22:	8aa2      	ldrh	r2, [r4, #20]
10010e24:	801a      	strh	r2, [r3, #0]
10010e26:	e004      	b.n	10010e32 <_printf_i+0x196>
10010e28:	1d11      	adds	r1, r2, #4
10010e2a:	6019      	str	r1, [r3, #0]
10010e2c:	6813      	ldr	r3, [r2, #0]
10010e2e:	6962      	ldr	r2, [r4, #20]
10010e30:	601a      	str	r2, [r3, #0]
10010e32:	2300      	movs	r3, #0
10010e34:	9e04      	ldr	r6, [sp, #16]
10010e36:	6123      	str	r3, [r4, #16]
10010e38:	e016      	b.n	10010e68 <_printf_i+0x1cc>
10010e3a:	681a      	ldr	r2, [r3, #0]
10010e3c:	1d11      	adds	r1, r2, #4
10010e3e:	6019      	str	r1, [r3, #0]
10010e40:	6816      	ldr	r6, [r2, #0]
10010e42:	2100      	movs	r1, #0
10010e44:	6862      	ldr	r2, [r4, #4]
10010e46:	0030      	movs	r0, r6
10010e48:	f000 f93c 	bl	100110c4 <memchr>
10010e4c:	2800      	cmp	r0, #0
10010e4e:	d001      	beq.n	10010e54 <_printf_i+0x1b8>
10010e50:	1b80      	subs	r0, r0, r6
10010e52:	6060      	str	r0, [r4, #4]
10010e54:	6863      	ldr	r3, [r4, #4]
10010e56:	e003      	b.n	10010e60 <_printf_i+0x1c4>
10010e58:	0026      	movs	r6, r4
10010e5a:	3642      	adds	r6, #66	; 0x42
10010e5c:	7032      	strb	r2, [r6, #0]
10010e5e:	2301      	movs	r3, #1
10010e60:	6123      	str	r3, [r4, #16]
10010e62:	2300      	movs	r3, #0
10010e64:	9a04      	ldr	r2, [sp, #16]
10010e66:	7013      	strb	r3, [r2, #0]
10010e68:	9b07      	ldr	r3, [sp, #28]
10010e6a:	aa09      	add	r2, sp, #36	; 0x24
10010e6c:	9300      	str	r3, [sp, #0]
10010e6e:	0021      	movs	r1, r4
10010e70:	9b06      	ldr	r3, [sp, #24]
10010e72:	9805      	ldr	r0, [sp, #20]
10010e74:	f7ff fea4 	bl	10010bc0 <_printf_common>
10010e78:	1c43      	adds	r3, r0, #1
10010e7a:	d102      	bne.n	10010e82 <_printf_i+0x1e6>
10010e7c:	2001      	movs	r0, #1
10010e7e:	4240      	negs	r0, r0
10010e80:	e027      	b.n	10010ed2 <_printf_i+0x236>
10010e82:	6923      	ldr	r3, [r4, #16]
10010e84:	0032      	movs	r2, r6
10010e86:	9906      	ldr	r1, [sp, #24]
10010e88:	9805      	ldr	r0, [sp, #20]
10010e8a:	9d07      	ldr	r5, [sp, #28]
10010e8c:	47a8      	blx	r5
10010e8e:	1c43      	adds	r3, r0, #1
10010e90:	d0f4      	beq.n	10010e7c <_printf_i+0x1e0>
10010e92:	6823      	ldr	r3, [r4, #0]
10010e94:	2500      	movs	r5, #0
10010e96:	079b      	lsls	r3, r3, #30
10010e98:	d40f      	bmi.n	10010eba <_printf_i+0x21e>
10010e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010e9c:	68e0      	ldr	r0, [r4, #12]
10010e9e:	4298      	cmp	r0, r3
10010ea0:	da17      	bge.n	10010ed2 <_printf_i+0x236>
10010ea2:	0018      	movs	r0, r3
10010ea4:	e015      	b.n	10010ed2 <_printf_i+0x236>
10010ea6:	0022      	movs	r2, r4
10010ea8:	2301      	movs	r3, #1
10010eaa:	3219      	adds	r2, #25
10010eac:	9906      	ldr	r1, [sp, #24]
10010eae:	9805      	ldr	r0, [sp, #20]
10010eb0:	9e07      	ldr	r6, [sp, #28]
10010eb2:	47b0      	blx	r6
10010eb4:	1c43      	adds	r3, r0, #1
10010eb6:	d0e1      	beq.n	10010e7c <_printf_i+0x1e0>
10010eb8:	3501      	adds	r5, #1
10010eba:	68e3      	ldr	r3, [r4, #12]
10010ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010ebe:	1a9b      	subs	r3, r3, r2
10010ec0:	429d      	cmp	r5, r3
10010ec2:	dbf0      	blt.n	10010ea6 <_printf_i+0x20a>
10010ec4:	e7e9      	b.n	10010e9a <_printf_i+0x1fe>
10010ec6:	0026      	movs	r6, r4
10010ec8:	9b03      	ldr	r3, [sp, #12]
10010eca:	3642      	adds	r6, #66	; 0x42
10010ecc:	781b      	ldrb	r3, [r3, #0]
10010ece:	7033      	strb	r3, [r6, #0]
10010ed0:	e78e      	b.n	10010df0 <_printf_i+0x154>
10010ed2:	b00b      	add	sp, #44	; 0x2c
10010ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ed6:	46c0      	nop			; (mov r8, r8)
10010ed8:	100129ed 	.word	0x100129ed
10010edc:	100129fe 	.word	0x100129fe

10010ee0 <_putc_r>:
10010ee0:	b570      	push	{r4, r5, r6, lr}
10010ee2:	0006      	movs	r6, r0
10010ee4:	000d      	movs	r5, r1
10010ee6:	0014      	movs	r4, r2
10010ee8:	2800      	cmp	r0, #0
10010eea:	d004      	beq.n	10010ef6 <_putc_r+0x16>
10010eec:	6983      	ldr	r3, [r0, #24]
10010eee:	2b00      	cmp	r3, #0
10010ef0:	d101      	bne.n	10010ef6 <_putc_r+0x16>
10010ef2:	f7ff fb83 	bl	100105fc <__sinit>
10010ef6:	4b12      	ldr	r3, [pc, #72]	; (10010f40 <_putc_r+0x60>)
10010ef8:	429c      	cmp	r4, r3
10010efa:	d101      	bne.n	10010f00 <_putc_r+0x20>
10010efc:	6874      	ldr	r4, [r6, #4]
10010efe:	e008      	b.n	10010f12 <_putc_r+0x32>
10010f00:	4b10      	ldr	r3, [pc, #64]	; (10010f44 <_putc_r+0x64>)
10010f02:	429c      	cmp	r4, r3
10010f04:	d101      	bne.n	10010f0a <_putc_r+0x2a>
10010f06:	68b4      	ldr	r4, [r6, #8]
10010f08:	e003      	b.n	10010f12 <_putc_r+0x32>
10010f0a:	4b0f      	ldr	r3, [pc, #60]	; (10010f48 <_putc_r+0x68>)
10010f0c:	429c      	cmp	r4, r3
10010f0e:	d100      	bne.n	10010f12 <_putc_r+0x32>
10010f10:	68f4      	ldr	r4, [r6, #12]
10010f12:	68a3      	ldr	r3, [r4, #8]
10010f14:	3b01      	subs	r3, #1
10010f16:	60a3      	str	r3, [r4, #8]
10010f18:	2b00      	cmp	r3, #0
10010f1a:	da05      	bge.n	10010f28 <_putc_r+0x48>
10010f1c:	69a2      	ldr	r2, [r4, #24]
10010f1e:	4293      	cmp	r3, r2
10010f20:	db08      	blt.n	10010f34 <_putc_r+0x54>
10010f22:	b2eb      	uxtb	r3, r5
10010f24:	2b0a      	cmp	r3, #10
10010f26:	d005      	beq.n	10010f34 <_putc_r+0x54>
10010f28:	6823      	ldr	r3, [r4, #0]
10010f2a:	b2e8      	uxtb	r0, r5
10010f2c:	1c5a      	adds	r2, r3, #1
10010f2e:	6022      	str	r2, [r4, #0]
10010f30:	701d      	strb	r5, [r3, #0]
10010f32:	e004      	b.n	10010f3e <_putc_r+0x5e>
10010f34:	0022      	movs	r2, r4
10010f36:	0029      	movs	r1, r5
10010f38:	0030      	movs	r0, r6
10010f3a:	f7ff f99d 	bl	10010278 <__swbuf_r>
10010f3e:	bd70      	pop	{r4, r5, r6, pc}
10010f40:	1001297c 	.word	0x1001297c
10010f44:	1001299c 	.word	0x1001299c
10010f48:	100129bc 	.word	0x100129bc

10010f4c <_sbrk_r>:
10010f4c:	2300      	movs	r3, #0
10010f4e:	b570      	push	{r4, r5, r6, lr}
10010f50:	4c06      	ldr	r4, [pc, #24]	; (10010f6c <_sbrk_r+0x20>)
10010f52:	0005      	movs	r5, r0
10010f54:	0008      	movs	r0, r1
10010f56:	6023      	str	r3, [r4, #0]
10010f58:	f7f8 fcc4 	bl	100098e4 <_sbrk>
10010f5c:	1c43      	adds	r3, r0, #1
10010f5e:	d103      	bne.n	10010f68 <_sbrk_r+0x1c>
10010f60:	6823      	ldr	r3, [r4, #0]
10010f62:	2b00      	cmp	r3, #0
10010f64:	d000      	beq.n	10010f68 <_sbrk_r+0x1c>
10010f66:	602b      	str	r3, [r5, #0]
10010f68:	bd70      	pop	{r4, r5, r6, pc}
10010f6a:	46c0      	nop			; (mov r8, r8)
10010f6c:	10014194 	.word	0x10014194

10010f70 <__sread>:
10010f70:	b570      	push	{r4, r5, r6, lr}
10010f72:	000c      	movs	r4, r1
10010f74:	250e      	movs	r5, #14
10010f76:	5f49      	ldrsh	r1, [r1, r5]
10010f78:	f000 f8b0 	bl	100110dc <_read_r>
10010f7c:	2800      	cmp	r0, #0
10010f7e:	db03      	blt.n	10010f88 <__sread+0x18>
10010f80:	6d63      	ldr	r3, [r4, #84]	; 0x54
10010f82:	181b      	adds	r3, r3, r0
10010f84:	6563      	str	r3, [r4, #84]	; 0x54
10010f86:	e003      	b.n	10010f90 <__sread+0x20>
10010f88:	89a2      	ldrh	r2, [r4, #12]
10010f8a:	4b02      	ldr	r3, [pc, #8]	; (10010f94 <__sread+0x24>)
10010f8c:	4013      	ands	r3, r2
10010f8e:	81a3      	strh	r3, [r4, #12]
10010f90:	bd70      	pop	{r4, r5, r6, pc}
10010f92:	46c0      	nop			; (mov r8, r8)
10010f94:	ffffefff 	.word	0xffffefff

10010f98 <__swrite>:
10010f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f9a:	001f      	movs	r7, r3
10010f9c:	898b      	ldrh	r3, [r1, #12]
10010f9e:	0005      	movs	r5, r0
10010fa0:	000c      	movs	r4, r1
10010fa2:	0016      	movs	r6, r2
10010fa4:	05db      	lsls	r3, r3, #23
10010fa6:	d505      	bpl.n	10010fb4 <__swrite+0x1c>
10010fa8:	230e      	movs	r3, #14
10010faa:	5ec9      	ldrsh	r1, [r1, r3]
10010fac:	2200      	movs	r2, #0
10010fae:	2302      	movs	r3, #2
10010fb0:	f000 f874 	bl	1001109c <_lseek_r>
10010fb4:	89a2      	ldrh	r2, [r4, #12]
10010fb6:	4b05      	ldr	r3, [pc, #20]	; (10010fcc <__swrite+0x34>)
10010fb8:	0028      	movs	r0, r5
10010fba:	4013      	ands	r3, r2
10010fbc:	81a3      	strh	r3, [r4, #12]
10010fbe:	0032      	movs	r2, r6
10010fc0:	230e      	movs	r3, #14
10010fc2:	5ee1      	ldrsh	r1, [r4, r3]
10010fc4:	003b      	movs	r3, r7
10010fc6:	f000 f81f 	bl	10011008 <_write_r>
10010fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010fcc:	ffffefff 	.word	0xffffefff

10010fd0 <__sseek>:
10010fd0:	b570      	push	{r4, r5, r6, lr}
10010fd2:	000c      	movs	r4, r1
10010fd4:	250e      	movs	r5, #14
10010fd6:	5f49      	ldrsh	r1, [r1, r5]
10010fd8:	f000 f860 	bl	1001109c <_lseek_r>
10010fdc:	89a3      	ldrh	r3, [r4, #12]
10010fde:	1c42      	adds	r2, r0, #1
10010fe0:	d103      	bne.n	10010fea <__sseek+0x1a>
10010fe2:	4a05      	ldr	r2, [pc, #20]	; (10010ff8 <__sseek+0x28>)
10010fe4:	4013      	ands	r3, r2
10010fe6:	81a3      	strh	r3, [r4, #12]
10010fe8:	e004      	b.n	10010ff4 <__sseek+0x24>
10010fea:	2280      	movs	r2, #128	; 0x80
10010fec:	0152      	lsls	r2, r2, #5
10010fee:	4313      	orrs	r3, r2
10010ff0:	81a3      	strh	r3, [r4, #12]
10010ff2:	6560      	str	r0, [r4, #84]	; 0x54
10010ff4:	bd70      	pop	{r4, r5, r6, pc}
10010ff6:	46c0      	nop			; (mov r8, r8)
10010ff8:	ffffefff 	.word	0xffffefff

10010ffc <__sclose>:
10010ffc:	b510      	push	{r4, lr}
10010ffe:	230e      	movs	r3, #14
10011000:	5ec9      	ldrsh	r1, [r1, r3]
10011002:	f000 f815 	bl	10011030 <_close_r>
10011006:	bd10      	pop	{r4, pc}

10011008 <_write_r>:
10011008:	b570      	push	{r4, r5, r6, lr}
1001100a:	0005      	movs	r5, r0
1001100c:	0008      	movs	r0, r1
1001100e:	0011      	movs	r1, r2
10011010:	2200      	movs	r2, #0
10011012:	4c06      	ldr	r4, [pc, #24]	; (1001102c <_write_r+0x24>)
10011014:	6022      	str	r2, [r4, #0]
10011016:	001a      	movs	r2, r3
10011018:	f7f8 fc3c 	bl	10009894 <_write>
1001101c:	1c43      	adds	r3, r0, #1
1001101e:	d103      	bne.n	10011028 <_write_r+0x20>
10011020:	6823      	ldr	r3, [r4, #0]
10011022:	2b00      	cmp	r3, #0
10011024:	d000      	beq.n	10011028 <_write_r+0x20>
10011026:	602b      	str	r3, [r5, #0]
10011028:	bd70      	pop	{r4, r5, r6, pc}
1001102a:	46c0      	nop			; (mov r8, r8)
1001102c:	10014194 	.word	0x10014194

10011030 <_close_r>:
10011030:	2300      	movs	r3, #0
10011032:	b570      	push	{r4, r5, r6, lr}
10011034:	4c06      	ldr	r4, [pc, #24]	; (10011050 <_close_r+0x20>)
10011036:	0005      	movs	r5, r0
10011038:	0008      	movs	r0, r1
1001103a:	6023      	str	r3, [r4, #0]
1001103c:	f7f8 fc64 	bl	10009908 <_close>
10011040:	1c43      	adds	r3, r0, #1
10011042:	d103      	bne.n	1001104c <_close_r+0x1c>
10011044:	6823      	ldr	r3, [r4, #0]
10011046:	2b00      	cmp	r3, #0
10011048:	d000      	beq.n	1001104c <_close_r+0x1c>
1001104a:	602b      	str	r3, [r5, #0]
1001104c:	bd70      	pop	{r4, r5, r6, pc}
1001104e:	46c0      	nop			; (mov r8, r8)
10011050:	10014194 	.word	0x10014194

10011054 <_fstat_r>:
10011054:	2300      	movs	r3, #0
10011056:	b570      	push	{r4, r5, r6, lr}
10011058:	4c06      	ldr	r4, [pc, #24]	; (10011074 <_fstat_r+0x20>)
1001105a:	0005      	movs	r5, r0
1001105c:	0008      	movs	r0, r1
1001105e:	0011      	movs	r1, r2
10011060:	6023      	str	r3, [r4, #0]
10011062:	f7f8 fc55 	bl	10009910 <_fstat>
10011066:	1c43      	adds	r3, r0, #1
10011068:	d103      	bne.n	10011072 <_fstat_r+0x1e>
1001106a:	6823      	ldr	r3, [r4, #0]
1001106c:	2b00      	cmp	r3, #0
1001106e:	d000      	beq.n	10011072 <_fstat_r+0x1e>
10011070:	602b      	str	r3, [r5, #0]
10011072:	bd70      	pop	{r4, r5, r6, pc}
10011074:	10014194 	.word	0x10014194

10011078 <_isatty_r>:
10011078:	2300      	movs	r3, #0
1001107a:	b570      	push	{r4, r5, r6, lr}
1001107c:	4c06      	ldr	r4, [pc, #24]	; (10011098 <_isatty_r+0x20>)
1001107e:	0005      	movs	r5, r0
10011080:	0008      	movs	r0, r1
10011082:	6023      	str	r3, [r4, #0]
10011084:	f7f8 fc4a 	bl	1000991c <_isatty>
10011088:	1c43      	adds	r3, r0, #1
1001108a:	d103      	bne.n	10011094 <_isatty_r+0x1c>
1001108c:	6823      	ldr	r3, [r4, #0]
1001108e:	2b00      	cmp	r3, #0
10011090:	d000      	beq.n	10011094 <_isatty_r+0x1c>
10011092:	602b      	str	r3, [r5, #0]
10011094:	bd70      	pop	{r4, r5, r6, pc}
10011096:	46c0      	nop			; (mov r8, r8)
10011098:	10014194 	.word	0x10014194

1001109c <_lseek_r>:
1001109c:	b570      	push	{r4, r5, r6, lr}
1001109e:	0005      	movs	r5, r0
100110a0:	0008      	movs	r0, r1
100110a2:	0011      	movs	r1, r2
100110a4:	2200      	movs	r2, #0
100110a6:	4c06      	ldr	r4, [pc, #24]	; (100110c0 <_lseek_r+0x24>)
100110a8:	6022      	str	r2, [r4, #0]
100110aa:	001a      	movs	r2, r3
100110ac:	f7f8 fc38 	bl	10009920 <_lseek>
100110b0:	1c43      	adds	r3, r0, #1
100110b2:	d103      	bne.n	100110bc <_lseek_r+0x20>
100110b4:	6823      	ldr	r3, [r4, #0]
100110b6:	2b00      	cmp	r3, #0
100110b8:	d000      	beq.n	100110bc <_lseek_r+0x20>
100110ba:	602b      	str	r3, [r5, #0]
100110bc:	bd70      	pop	{r4, r5, r6, pc}
100110be:	46c0      	nop			; (mov r8, r8)
100110c0:	10014194 	.word	0x10014194

100110c4 <memchr>:
100110c4:	b2c9      	uxtb	r1, r1
100110c6:	1882      	adds	r2, r0, r2
100110c8:	4290      	cmp	r0, r2
100110ca:	d004      	beq.n	100110d6 <memchr+0x12>
100110cc:	7803      	ldrb	r3, [r0, #0]
100110ce:	428b      	cmp	r3, r1
100110d0:	d002      	beq.n	100110d8 <memchr+0x14>
100110d2:	3001      	adds	r0, #1
100110d4:	e7f8      	b.n	100110c8 <memchr+0x4>
100110d6:	2000      	movs	r0, #0
100110d8:	4770      	bx	lr
	...

100110dc <_read_r>:
100110dc:	b570      	push	{r4, r5, r6, lr}
100110de:	0005      	movs	r5, r0
100110e0:	0008      	movs	r0, r1
100110e2:	0011      	movs	r1, r2
100110e4:	2200      	movs	r2, #0
100110e6:	4c06      	ldr	r4, [pc, #24]	; (10011100 <_read_r+0x24>)
100110e8:	6022      	str	r2, [r4, #0]
100110ea:	001a      	movs	r2, r3
100110ec:	f7f8 fbb2 	bl	10009854 <_read>
100110f0:	1c43      	adds	r3, r0, #1
100110f2:	d103      	bne.n	100110fc <_read_r+0x20>
100110f4:	6823      	ldr	r3, [r4, #0]
100110f6:	2b00      	cmp	r3, #0
100110f8:	d000      	beq.n	100110fc <_read_r+0x20>
100110fa:	602b      	str	r3, [r5, #0]
100110fc:	bd70      	pop	{r4, r5, r6, pc}
100110fe:	46c0      	nop			; (mov r8, r8)
10011100:	10014194 	.word	0x10014194

10011104 <__aeabi_lmul>:
10011104:	b5f0      	push	{r4, r5, r6, r7, lr}
10011106:	464f      	mov	r7, r9
10011108:	4646      	mov	r6, r8
1001110a:	b4c0      	push	{r6, r7}
1001110c:	0416      	lsls	r6, r2, #16
1001110e:	0c36      	lsrs	r6, r6, #16
10011110:	4699      	mov	r9, r3
10011112:	0033      	movs	r3, r6
10011114:	0405      	lsls	r5, r0, #16
10011116:	0c2c      	lsrs	r4, r5, #16
10011118:	0c07      	lsrs	r7, r0, #16
1001111a:	0c15      	lsrs	r5, r2, #16
1001111c:	4363      	muls	r3, r4
1001111e:	437e      	muls	r6, r7
10011120:	436f      	muls	r7, r5
10011122:	4365      	muls	r5, r4
10011124:	0c1c      	lsrs	r4, r3, #16
10011126:	19ad      	adds	r5, r5, r6
10011128:	1964      	adds	r4, r4, r5
1001112a:	469c      	mov	ip, r3
1001112c:	42a6      	cmp	r6, r4
1001112e:	d903      	bls.n	10011138 <__aeabi_lmul+0x34>
10011130:	2380      	movs	r3, #128	; 0x80
10011132:	025b      	lsls	r3, r3, #9
10011134:	4698      	mov	r8, r3
10011136:	4447      	add	r7, r8
10011138:	4663      	mov	r3, ip
1001113a:	0c25      	lsrs	r5, r4, #16
1001113c:	19ef      	adds	r7, r5, r7
1001113e:	041d      	lsls	r5, r3, #16
10011140:	464b      	mov	r3, r9
10011142:	434a      	muls	r2, r1
10011144:	4343      	muls	r3, r0
10011146:	0c2d      	lsrs	r5, r5, #16
10011148:	0424      	lsls	r4, r4, #16
1001114a:	1964      	adds	r4, r4, r5
1001114c:	1899      	adds	r1, r3, r2
1001114e:	19c9      	adds	r1, r1, r7
10011150:	0020      	movs	r0, r4
10011152:	bc0c      	pop	{r2, r3}
10011154:	4690      	mov	r8, r2
10011156:	4699      	mov	r9, r3
10011158:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001115a:	46c0      	nop			; (mov r8, r8)
1001115c:	1000887c 	.word	0x1000887c
10011160:	1000888a 	.word	0x1000888a
10011164:	10008898 	.word	0x10008898
10011168:	100088a6 	.word	0x100088a6
1001116c:	100088b4 	.word	0x100088b4
10011170:	100088c2 	.word	0x100088c2
10011174:	100088d0 	.word	0x100088d0
10011178:	100088e0 	.word	0x100088e0
1001117c:	100088f0 	.word	0x100088f0
10011180:	10008900 	.word	0x10008900
10011184:	10008910 	.word	0x10008910
10011188:	10008920 	.word	0x10008920
1001118c:	10008930 	.word	0x10008930
10011190:	10008940 	.word	0x10008940
10011194:	10008950 	.word	0x10008950
10011198:	10008960 	.word	0x10008960
1001119c:	10008970 	.word	0x10008970
100111a0:	10008980 	.word	0x10008980
100111a4:	10008990 	.word	0x10008990
100111a8:	100089a0 	.word	0x100089a0
100111ac:	100089b0 	.word	0x100089b0
100111b0:	100089c0 	.word	0x100089c0
100111b4:	100089d0 	.word	0x100089d0
100111b8:	100089e0 	.word	0x100089e0
100111bc:	100089f0 	.word	0x100089f0
100111c0:	10008a00 	.word	0x10008a00
100111c4:	10008a10 	.word	0x10008a10
100111c8:	10008a20 	.word	0x10008a20
100111cc:	10008a2e 	.word	0x10008a2e
100111d0:	10008a3c 	.word	0x10008a3c
100111d4:	10008a4a 	.word	0x10008a4a
100111d8:	10008a58 	.word	0x10008a58
100111dc:	10008a66 	.word	0x10008a66
100111e0:	10008a74 	.word	0x10008a74
100111e4:	10008a82 	.word	0x10008a82
100111e8:	10008a90 	.word	0x10008a90
100111ec:	10008aa0 	.word	0x10008aa0
100111f0:	10008ab0 	.word	0x10008ab0
100111f4:	10008ac0 	.word	0x10008ac0
100111f8:	10008ad0 	.word	0x10008ad0
100111fc:	10008ae0 	.word	0x10008ae0
10011200:	10008af0 	.word	0x10008af0
10011204:	10008b00 	.word	0x10008b00
10011208:	10008b10 	.word	0x10008b10
1001120c:	10008b20 	.word	0x10008b20
10011210:	10008b30 	.word	0x10008b30
10011214:	10008b40 	.word	0x10008b40
10011218:	10008b50 	.word	0x10008b50
1001121c:	10008b60 	.word	0x10008b60
10011220:	10008b70 	.word	0x10008b70
10011224:	10008b80 	.word	0x10008b80
10011228:	10008b90 	.word	0x10008b90
1001122c:	10008b9e 	.word	0x10008b9e
10011230:	10008bac 	.word	0x10008bac
10011234:	10008bd8 	.word	0x10008bd8
10011238:	10008be6 	.word	0x10008be6
1001123c:	10008bf4 	.word	0x10008bf4
10011240:	10008c02 	.word	0x10008c02
10011244:	10008c10 	.word	0x10008c10
10011248:	10008c1e 	.word	0x10008c1e
1001124c:	10008c2c 	.word	0x10008c2c
10011250:	10008c3a 	.word	0x10008c3a
10011254:	10008c48 	.word	0x10008c48
10011258:	10008c56 	.word	0x10008c56
1001125c:	10008c64 	.word	0x10008c64
10011260:	10008c72 	.word	0x10008c72
10011264:	10008c80 	.word	0x10008c80
10011268:	10008c8e 	.word	0x10008c8e
1001126c:	10008c9c 	.word	0x10008c9c
10011270:	10008caa 	.word	0x10008caa
10011274:	10008cb8 	.word	0x10008cb8
10011278:	10008cc6 	.word	0x10008cc6
1001127c:	10008cd4 	.word	0x10008cd4
10011280:	10008ce2 	.word	0x10008ce2
10011284:	10008cf0 	.word	0x10008cf0
10011288:	10008cfe 	.word	0x10008cfe
1001128c:	10008d0c 	.word	0x10008d0c
10011290:	10008d1a 	.word	0x10008d1a
10011294:	10008d28 	.word	0x10008d28
10011298:	10008d36 	.word	0x10008d36
1001129c:	10008d44 	.word	0x10008d44
100112a0:	10008d52 	.word	0x10008d52
100112a4:	10008d60 	.word	0x10008d60
100112a8:	10008d6e 	.word	0x10008d6e
100112ac:	10008d7c 	.word	0x10008d7c
100112b0:	10008d8a 	.word	0x10008d8a
100112b4:	10008d98 	.word	0x10008d98
100112b8:	10008da6 	.word	0x10008da6
100112bc:	10008db4 	.word	0x10008db4
100112c0:	10008dc2 	.word	0x10008dc2
100112c4:	10008dd0 	.word	0x10008dd0
100112c8:	10008dde 	.word	0x10008dde
100112cc:	10008dec 	.word	0x10008dec
100112d0:	10008dfa 	.word	0x10008dfa
100112d4:	10008e08 	.word	0x10008e08
100112d8:	10008e16 	.word	0x10008e16
100112dc:	10008e24 	.word	0x10008e24
100112e0:	10008e32 	.word	0x10008e32
100112e4:	10008e40 	.word	0x10008e40
100112e8:	10008e4e 	.word	0x10008e4e
100112ec:	10008e5c 	.word	0x10008e5c
100112f0:	10008e6a 	.word	0x10008e6a
100112f4:	10008e78 	.word	0x10008e78
100112f8:	10008e86 	.word	0x10008e86
100112fc:	10008e94 	.word	0x10008e94
10011300:	10008ea2 	.word	0x10008ea2
10011304:	10008eb0 	.word	0x10008eb0
10011308:	10008ebe 	.word	0x10008ebe
1001130c:	10008f58 	.word	0x10008f58
10011310:	10008f80 	.word	0x10008f80
10011314:	10008fa8 	.word	0x10008fa8
10011318:	10008fd0 	.word	0x10008fd0
1001131c:	10009210 	.word	0x10009210
10011320:	10009000 	.word	0x10009000
10011324:	10009018 	.word	0x10009018
10011328:	10009090 	.word	0x10009090
1001132c:	100090a8 	.word	0x100090a8
10011330:	10009030 	.word	0x10009030
10011334:	10009048 	.word	0x10009048
10011338:	10009060 	.word	0x10009060
1001133c:	10009078 	.word	0x10009078
10011340:	100090c0 	.word	0x100090c0
10011344:	10009384 	.word	0x10009384
10011348:	10009384 	.word	0x10009384
1001134c:	10009384 	.word	0x10009384
10011350:	10009384 	.word	0x10009384
10011354:	10009384 	.word	0x10009384
10011358:	10009384 	.word	0x10009384
1001135c:	10009384 	.word	0x10009384
10011360:	10009384 	.word	0x10009384
10011364:	10009168 	.word	0x10009168
10011368:	10009180 	.word	0x10009180
1001136c:	10009198 	.word	0x10009198
10011370:	10009226 	.word	0x10009226
10011374:	100090f0 	.word	0x100090f0
10011378:	10009384 	.word	0x10009384
1001137c:	10009384 	.word	0x10009384
10011380:	10009384 	.word	0x10009384
10011384:	10009384 	.word	0x10009384
10011388:	10009384 	.word	0x10009384
1001138c:	10009384 	.word	0x10009384
10011390:	100091b0 	.word	0x100091b0
10011394:	100091c8 	.word	0x100091c8
10011398:	100091e0 	.word	0x100091e0
1001139c:	100091f8 	.word	0x100091f8
100113a0:	10009384 	.word	0x10009384
100113a4:	1000933c 	.word	0x1000933c
100113a8:	10009354 	.word	0x10009354
100113ac:	10009384 	.word	0x10009384
100113b0:	10009384 	.word	0x10009384
100113b4:	10009252 	.word	0x10009252
100113b8:	10009268 	.word	0x10009268
100113bc:	1000927e 	.word	0x1000927e
100113c0:	10009294 	.word	0x10009294
100113c4:	10009384 	.word	0x10009384
100113c8:	10009384 	.word	0x10009384
100113cc:	10009384 	.word	0x10009384
100113d0:	10009384 	.word	0x10009384
100113d4:	10009384 	.word	0x10009384
100113d8:	10009384 	.word	0x10009384
100113dc:	10009384 	.word	0x10009384
100113e0:	10009384 	.word	0x10009384
100113e4:	10008f44 	.word	0x10008f44
100113e8:	10008f6c 	.word	0x10008f6c
100113ec:	10008f94 	.word	0x10008f94
100113f0:	10008fbc 	.word	0x10008fbc
100113f4:	10008fe8 	.word	0x10008fe8
100113f8:	100090d8 	.word	0x100090d8
100113fc:	10009108 	.word	0x10009108
10011400:	10009120 	.word	0x10009120
10011404:	10009138 	.word	0x10009138
10011408:	10009150 	.word	0x10009150
1001140c:	1000923c 	.word	0x1000923c
10011410:	100092aa 	.word	0x100092aa
10011414:	10009324 	.word	0x10009324
10011418:	1000936c 	.word	0x1000936c
1001141c:	0000000d 	.word	0x0000000d
10011420:	6b6e696c 	.word	0x6b6e696c
10011424:	736f6c20 	.word	0x736f6c20
10011428:	65732073 	.word	0x65732073
1001142c:	63697672 	.word	0x63697672
10011430:	69642065 	.word	0x69642065
10011434:	766f6373 	.word	0x766f6373
10011438:	64657265 	.word	0x64657265
1001143c:	00000000 	.word	0x00000000
10011440:	656d6d49 	.word	0x656d6d49
10011444:	74616964 	.word	0x74616964
10011448:	6c412065 	.word	0x6c412065
1001144c:	20747265 	.word	0x20747265
10011450:	76726573 	.word	0x76726573
10011454:	20656369 	.word	0x20656369
10011458:	63736964 	.word	0x63736964
1001145c:	7265766f 	.word	0x7265766f
10011460:	00006465 	.word	0x00006465
10011464:	70207854 	.word	0x70207854
10011468:	7265776f 	.word	0x7265776f
1001146c:	72657320 	.word	0x72657320
10011470:	65636976 	.word	0x65636976
10011474:	73696420 	.word	0x73696420
10011478:	65766f63 	.word	0x65766f63
1001147c:	00646572 	.word	0x00646572
10011480:	63736964 	.word	0x63736964
10011484:	7265766f 	.word	0x7265766f
10011488:	6d6f6320 	.word	0x6d6f6320
1001148c:	74656c70 	.word	0x74656c70
10011490:	706f2065 	.word	0x706f2065
10011494:	74617265 	.word	0x74617265
10011498:	206e6f69 	.word	0x206e6f69
1001149c:	61206425 	.word	0x61206425
100114a0:	2520646e 	.word	0x2520646e
100114a4:	00000064 	.word	0x00000064
100114a8:	43207854 	.word	0x43207854
100114ac:	61726168 	.word	0x61726168
100114b0:	72657463 	.word	0x72657463
100114b4:	69747369 	.word	0x69747369
100114b8:	69442063 	.word	0x69442063
100114bc:	766f6373 	.word	0x766f6373
100114c0:	20797265 	.word	0x20797265
100114c4:	72617453 	.word	0x72617453
100114c8:	00646574 	.word	0x00646574
100114cc:	43207854 	.word	0x43207854
100114d0:	61726168 	.word	0x61726168
100114d4:	72657463 	.word	0x72657463
100114d8:	69747369 	.word	0x69747369
100114dc:	69442063 	.word	0x69442063
100114e0:	766f6373 	.word	0x766f6373
100114e4:	20797265 	.word	0x20797265
100114e8:	6c696146 	.word	0x6c696146
100114ec:	00006465 	.word	0x00006465
100114f0:	50207854 	.word	0x50207854
100114f4:	7265776f 	.word	0x7265776f
100114f8:	72655320 	.word	0x72655320
100114fc:	65636976 	.word	0x65636976
10011500:	746f6e20 	.word	0x746f6e20
10011504:	756f4620 	.word	0x756f4620
10011508:	0000646e 	.word	0x0000646e
1001150c:	6b6e694c 	.word	0x6b6e694c
10011510:	736f4c20 	.word	0x736f4c20
10011514:	68432073 	.word	0x68432073
10011518:	63617261 	.word	0x63617261
1001151c:	69726574 	.word	0x69726574
10011520:	63697473 	.word	0x63697473
10011524:	73694420 	.word	0x73694420
10011528:	65766f63 	.word	0x65766f63
1001152c:	53207972 	.word	0x53207972
10011530:	74726174 	.word	0x74726174
10011534:	00006465 	.word	0x00006465
10011538:	6b6e694c 	.word	0x6b6e694c
1001153c:	736f4c20 	.word	0x736f4c20
10011540:	68432073 	.word	0x68432073
10011544:	63617261 	.word	0x63617261
10011548:	69726574 	.word	0x69726574
1001154c:	63697473 	.word	0x63697473
10011550:	73694420 	.word	0x73694420
10011554:	65766f63 	.word	0x65766f63
10011558:	46207972 	.word	0x46207972
1001155c:	656c6961 	.word	0x656c6961
10011560:	00000064 	.word	0x00000064
10011564:	6b6e694c 	.word	0x6b6e694c
10011568:	736f4c20 	.word	0x736f4c20
1001156c:	65532073 	.word	0x65532073
10011570:	63697672 	.word	0x63697672
10011574:	6f6e2065 	.word	0x6f6e2065
10011578:	76412074 	.word	0x76412074
1001157c:	616c6961 	.word	0x616c6961
10011580:	00656c62 	.word	0x00656c62
10011584:	656d6d49 	.word	0x656d6d49
10011588:	74616964 	.word	0x74616964
1001158c:	68432065 	.word	0x68432065
10011590:	63617261 	.word	0x63617261
10011594:	69726574 	.word	0x69726574
10011598:	63697473 	.word	0x63697473
1001159c:	73694420 	.word	0x73694420
100115a0:	65766f63 	.word	0x65766f63
100115a4:	53207972 	.word	0x53207972
100115a8:	74726174 	.word	0x74726174
100115ac:	00006465 	.word	0x00006465
100115b0:	656d6d49 	.word	0x656d6d49
100115b4:	74616964 	.word	0x74616964
100115b8:	68432065 	.word	0x68432065
100115bc:	63617261 	.word	0x63617261
100115c0:	69726574 	.word	0x69726574
100115c4:	63697473 	.word	0x63697473
100115c8:	73694420 	.word	0x73694420
100115cc:	65766f63 	.word	0x65766f63
100115d0:	46207972 	.word	0x46207972
100115d4:	656c6961 	.word	0x656c6961
100115d8:	00000064 	.word	0x00000064
100115dc:	656d6d49 	.word	0x656d6d49
100115e0:	74616964 	.word	0x74616964
100115e4:	6c412065 	.word	0x6c412065
100115e8:	20747265 	.word	0x20747265
100115ec:	76726553 	.word	0x76726553
100115f0:	20656369 	.word	0x20656369
100115f4:	20746f6e 	.word	0x20746f6e
100115f8:	69617641 	.word	0x69617641
100115fc:	6c62616c 	.word	0x6c62616c
10011600:	00000065 	.word	0x00000065
10011604:	584f5250 	.word	0x584f5250
10011608:	54494d49 	.word	0x54494d49
1001160c:	52502059 	.word	0x52502059
10011610:	4c49464f 	.word	0x4c49464f
10011614:	4f4e2045 	.word	0x4f4e2045
10011618:	55532054 	.word	0x55532054
1001161c:	524f5050 	.word	0x524f5050
10011620:	00444554 	.word	0x00444554
10011624:	54544147 	.word	0x54544147
10011628:	61686320 	.word	0x61686320
1001162c:	74636172 	.word	0x74636172
10011630:	73697265 	.word	0x73697265
10011634:	20636974 	.word	0x20636974
10011638:	63736964 	.word	0x63736964
1001163c:	7265766f 	.word	0x7265766f
10011640:	6f632079 	.word	0x6f632079
10011644:	656c706d 	.word	0x656c706d
10011648:	00646574 	.word	0x00646574
1001164c:	6b6e694c 	.word	0x6b6e694c
10011650:	736f4c20 	.word	0x736f4c20
10011654:	72772073 	.word	0x72772073
10011658:	20657469 	.word	0x20657469
1001165c:	72616863 	.word	0x72616863
10011660:	65746361 	.word	0x65746361
10011664:	74736972 	.word	0x74736972
10011668:	20736369 	.word	0x20736369
1001166c:	6c696166 	.word	0x6c696166
10011670:	00006465 	.word	0x00006465
10011674:	72616843 	.word	0x72616843
10011678:	65746361 	.word	0x65746361
1001167c:	74736972 	.word	0x74736972
10011680:	52206369 	.word	0x52206369
10011684:	20646165 	.word	0x20646165
10011688:	75716552 	.word	0x75716552
1001168c:	20747365 	.word	0x20747365
10011690:	6c696166 	.word	0x6c696166
10011694:	00006465 	.word	0x00006465
10011698:	72617453 	.word	0x72617453
1001169c:	676e6974 	.word	0x676e6974
100116a0:	6d697420 	.word	0x6d697420
100116a4:	00007265 	.word	0x00007265
100116a8:	68676948 	.word	0x68676948
100116ac:	656c4120 	.word	0x656c4120
100116b0:	52207472 	.word	0x52207472
100116b4:	20495353 	.word	0x20495353
100116b8:	676e6172 	.word	0x676e6172
100116bc:	25203a65 	.word	0x25203a65
100116c0:	6d426464 	.word	0x6d426464
100116c4:	646e6120 	.word	0x646e6120
100116c8:	6f626120 	.word	0x6f626120
100116cc:	00006576 	.word	0x00006576
100116d0:	646c694d 	.word	0x646c694d
100116d4:	656c4120 	.word	0x656c4120
100116d8:	52207472 	.word	0x52207472
100116dc:	20495353 	.word	0x20495353
100116e0:	676e6172 	.word	0x676e6172
100116e4:	25203a65 	.word	0x25203a65
100116e8:	6d426464 	.word	0x6d426464
100116ec:	206f7420 	.word	0x206f7420
100116f0:	42646425 	.word	0x42646425
100116f4:	0000006d 	.word	0x0000006d
100116f8:	41206f4e 	.word	0x41206f4e
100116fc:	7472656c 	.word	0x7472656c
10011700:	53535220 	.word	0x53535220
10011704:	61722049 	.word	0x61722049
10011708:	3a65676e 	.word	0x3a65676e
1001170c:	25202020 	.word	0x25202020
10011710:	6d426464 	.word	0x6d426464
10011714:	646e6120 	.word	0x646e6120
10011718:	6c656220 	.word	0x6c656220
1001171c:	0000776f 	.word	0x0000776f
10011720:	20505850 	.word	0x20505850
10011724:	6e6e6f43 	.word	0x6e6e6f43
10011728:	20746365 	.word	0x20746365
1001172c:	75716572 	.word	0x75716572
10011730:	20747365 	.word	0x20747365
10011734:	746e6573 	.word	0x746e6573
10011738:	00000000 	.word	0x00000000
1001173c:	20505850 	.word	0x20505850
10011740:	6e6e6f43 	.word	0x6e6e6f43
10011744:	20746365 	.word	0x20746365
10011748:	75716572 	.word	0x75716572
1001174c:	20747365 	.word	0x20747365
10011750:	646e6573 	.word	0x646e6573
10011754:	69616620 	.word	0x69616620
10011758:	0064656c 	.word	0x0064656c
1001175c:	6f666e49 	.word	0x6f666e49
10011760:	6544203a 	.word	0x6544203a
10011764:	65636976 	.word	0x65636976
10011768:	756f6620 	.word	0x756f6620
1001176c:	6120646e 	.word	0x6120646e
10011770:	65726464 	.word	0x65726464
10011774:	5b207373 	.word	0x5b207373
10011778:	205d6425 	.word	0x205d6425
1001177c:	25783020 	.word	0x25783020
10011780:	25583230 	.word	0x25583230
10011784:	25583230 	.word	0x25583230
10011788:	25583230 	.word	0x25583230
1001178c:	25583230 	.word	0x25583230
10011790:	25583230 	.word	0x25583230
10011794:	20583230 	.word	0x20583230
10011798:	00000000 	.word	0x00000000
1001179c:	502d2d2d 	.word	0x502d2d2d
100117a0:	00005058 	.word	0x00005058
100117a4:	656c6553 	.word	0x656c6553
100117a8:	49207463 	.word	0x49207463
100117ac:	7865646e 	.word	0x7865646e
100117b0:	6d756e20 	.word	0x6d756e20
100117b4:	20726562 	.word	0x20726562
100117b8:	43206f74 	.word	0x43206f74
100117bc:	656e6e6f 	.word	0x656e6e6f
100117c0:	6f207463 	.word	0x6f207463
100117c4:	735b2072 	.word	0x735b2072
100117c8:	6f74205d 	.word	0x6f74205d
100117cc:	61637320 	.word	0x61637320
100117d0:	0000006e 	.word	0x0000006e
100117d4:	656c6553 	.word	0x656c6553
100117d8:	5b207463 	.word	0x5b207463
100117dc:	74205d73 	.word	0x74205d73
100117e0:	6373206f 	.word	0x6373206f
100117e4:	61206e61 	.word	0x61206e61
100117e8:	6e696167 	.word	0x6e696167
100117ec:	00000000 	.word	0x00000000
100117f0:	786f7250 	.word	0x786f7250
100117f4:	74696d69 	.word	0x74696d69
100117f8:	72502079 	.word	0x72502079
100117fc:	6c69666f 	.word	0x6c69666f
10011800:	75732065 	.word	0x75732065
10011804:	726f7070 	.word	0x726f7070
10011808:	20646574 	.word	0x20646574
1001180c:	69766564 	.word	0x69766564
10011810:	6e206563 	.word	0x6e206563
10011814:	6620746f 	.word	0x6620746f
10011818:	646e756f 	.word	0x646e756f
1001181c:	00000020 	.word	0x00000020
10011820:	69726550 	.word	0x69726550
10011824:	72656870 	.word	0x72656870
10011828:	69206c61 	.word	0x69206c61
1001182c:	6c612073 	.word	0x6c612073
10011830:	64616572 	.word	0x64616572
10011834:	64412079 	.word	0x64412079
10011838:	74726576 	.word	0x74726576
1001183c:	6e697369 	.word	0x6e697369
10011840:	53202e67 	.word	0x53202e67
10011844:	206e6163 	.word	0x206e6163
10011848:	20746f6e 	.word	0x20746f6e
1001184c:	6d726570 	.word	0x6d726570
10011850:	65747469 	.word	0x65747469
10011854:	00000064 	.word	0x00000064
10011858:	656c6553 	.word	0x656c6553
1001185c:	5b207463 	.word	0x5b207463
10011860:	74205d72 	.word	0x74205d72
10011864:	6552206f 	.word	0x6552206f
10011868:	6e6e6f63 	.word	0x6e6e6f63
1001186c:	20746365 	.word	0x20746365
10011870:	5b20726f 	.word	0x5b20726f
10011874:	53205d73 	.word	0x53205d73
10011878:	006e6163 	.word	0x006e6163
1001187c:	20505850 	.word	0x20505850
10011880:	432d6552 	.word	0x432d6552
10011884:	656e6e6f 	.word	0x656e6e6f
10011888:	72207463 	.word	0x72207463
1001188c:	65757165 	.word	0x65757165
10011890:	73207473 	.word	0x73207473
10011894:	00746e65 	.word	0x00746e65
10011898:	20505850 	.word	0x20505850
1001189c:	432d6552 	.word	0x432d6552
100118a0:	656e6e6f 	.word	0x656e6e6f
100118a4:	72207463 	.word	0x72207463
100118a8:	65757165 	.word	0x65757165
100118ac:	73207473 	.word	0x73207473
100118b0:	20646e65 	.word	0x20646e65
100118b4:	6c696166 	.word	0x6c696166
100118b8:	00006465 	.word	0x00006465
100118bc:	69726550 	.word	0x69726550
100118c0:	72656870 	.word	0x72656870
100118c4:	69206c61 	.word	0x69206c61
100118c8:	6c612073 	.word	0x6c612073
100118cc:	64616572 	.word	0x64616572
100118d0:	64412079 	.word	0x64412079
100118d4:	74726576 	.word	0x74726576
100118d8:	6e697369 	.word	0x6e697369
100118dc:	63532c67 	.word	0x63532c67
100118e0:	6e206e61 	.word	0x6e206e61
100118e4:	7020746f 	.word	0x7020746f
100118e8:	696d7265 	.word	0x696d7265
100118ec:	64657474 	.word	0x64657474
100118f0:	00000000 	.word	0x00000000
100118f4:	54544147 	.word	0x54544147
100118f8:	73694420 	.word	0x73694420
100118fc:	65766f63 	.word	0x65766f63
10011900:	72207972 	.word	0x72207972
10011904:	65757165 	.word	0x65757165
10011908:	73207473 	.word	0x73207473
1001190c:	74726174 	.word	0x74726174
10011910:	00206465 	.word	0x00206465
10011914:	54544147 	.word	0x54544147
10011918:	73694420 	.word	0x73694420
1001191c:	65766f63 	.word	0x65766f63
10011920:	72207972 	.word	0x72207972
10011924:	65757165 	.word	0x65757165
10011928:	66207473 	.word	0x66207473
1001192c:	656c6961 	.word	0x656c6961
10011930:	00000064 	.word	0x00000064
10011934:	10009b06 	.word	0x10009b06
10011938:	10009b18 	.word	0x10009b18
1001193c:	10009aee 	.word	0x10009aee
10011940:	10009aee 	.word	0x10009aee
10011944:	10009aee 	.word	0x10009aee
10011948:	10009b06 	.word	0x10009b06
1001194c:	10009aee 	.word	0x10009aee
10011950:	10009aee 	.word	0x10009aee
10011954:	1000a842 	.word	0x1000a842
10011958:	1000a8b6 	.word	0x1000a8b6
1001195c:	1000a82a 	.word	0x1000a82a
10011960:	1000a8bc 	.word	0x1000a8bc
10011964:	1000a830 	.word	0x1000a830
10011968:	1000a836 	.word	0x1000a836
1001196c:	1000a83c 	.word	0x1000a83c
10011970:	34333231 	.word	0x34333231
10011974:	00003635 	.word	0x00003635
10011978:	efcdab00 	.word	0xefcdab00
1001197c:	00efcdab 	.word	0x00efcdab
10011980:	b2d60600 	.word	0xb2d60600
10011984:	f8f005f0 	.word	0xf8f005f0
10011988:	00000000 	.word	0x00000000

1001198c <ble_mgr_gatt_server_handle>:
	...
100119a4:	10009a01 10009a29 10009a71 00000000     ....)...q.......
100119b4:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100119c4:	65636552 64657669 00000000 6e616353     Received....Scan
100119d4:	676e696e 61662020 64656c69 00000000     ning  failed....
100119e4:	2d454c42 2055544d 6e616843 2c646567     BLE-MTU Changed,
100119f4:	6e6f4320 7463656e 206e6f69 646e6148      Connection Hand
10011a04:	203a656c 202c6425 2077654e 756c6156     le: %d, New Valu
10011a14:	25203a65 00000064 2055544d 6e616843     e: %d...MTU Chan
10011a24:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10011a34:	646e6148 253a656c 4f202c64 61726570     Handle:%d, Opera
10011a44:	6e6f6974 0064253a 2055544d 6e616843     tion:%d.MTU Chan
10011a54:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10011a64:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10011a74:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10011a84:	72616843 69725720 43206574 4320646d     Char Write Cmd C
10011a94:	6c706d6f 2c657465 6e6f4320 7463656e     omplete, Connect
10011aa4:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10011ab4:	61726570 6e6f6974 0064253a 72616843     peration:%d.Char
10011ac4:	69725720 43206574 4620646d 656c6961      Write Cmd Faile
10011ad4:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
10011ae4:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
10011af4:	253a6e6f 00000064 74617453 6f4e2065     on:%d...State No
10011b04:	61482074 656c646e 64252064 00000000     t Handled %d....
10011b14:	69766544 64206563 6f637369 63656e6e     Device disconnec
10011b24:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10011b34:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10011b44:	425f5441 435f454c 5f4e4e4f 41524150     AT_BLE_CONN_PARA
10011b54:	50555f4d 45544144 00000020 72636e45     M_UPDATE ...Encr
10011b64:	69747079 66206e6f 656c6961 00000064     yption failed...
10011b74:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10011b84:	64657465 63757320 73736563 6c6c7566     eted successfull
10011b94:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10011ba4:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10011bb4:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10011bc4:	7665443a 20656369 6e756f66 64612064     :Device found ad
10011bd4:	73657264 255b2073 20205d64 30257830     dress [%d]  0x%0
10011be4:	30255832 30255832 30255832 30255832     2X%02X%02X%02X%0
10011bf4:	30255832 00205832 6f666e49 78616d3a     2X%02X .Info:max
10011c04:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
10011c14:	69766564 72206563 68636165 2e2e6465     device reached..
10011c24:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
10011c34:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10011c44:	6e6e6163 00676e69 69766544 69206563     canning.Device i
10011c54:	253a7864 00000064 23232323 23232323     dx:%d...########
10011c64:	65442323 65636976 756f4620 0000646e     ##Device Found..
10011c74:	23232323 23232323 65442323 65636976     ##########Device
10011c84:	746f4e20 756f4620 0000646e 6e6e6f43      Not Found..Conn
10011c94:	65746365 6f742064 65657020 65642072     ected to peer de
10011ca4:	65636976 74697720 64612068 73657264     vice with addres
10011cb4:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10011cc4:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10011cd4:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10011ce4:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10011cf4:	61522067 6d6f646e 64646120 73736572     g Random address
10011d04:	63757320 73736563 00002a2a 6f736552      success**..Reso
10011d14:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10011d24:	73736572 69616620 2a64656c 0000002a     ress failed**...
10011d34:	2078614d 626d756e 6f207265 6f632066     Max number of co
10011d44:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10011d54:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10011d64:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10011d74:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10011d84:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10011d94:	00000064 30257830 202c5832 00000000     d...0x%02X, ....
10011da4:	4b525343 0000203a 3a4b5249 00000000     CSRK: ..IRK:....
10011db4:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10011dc4:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10011dd4:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10011de4:	46207473 656c6961 00000064 72696150     st Failed...Pair
10011df4:	20676e69 636f7270 72756465 6f632065     ing procedure co
10011e04:	656c706d 20646574 63637573 66737365     mpleted successf
10011e14:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10011e24:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10011e34:	726f7473 68742065 61702065 6e697269     store the pairin
10011e44:	6e692067 00006f66 3a4b544c 00000020     g info..LTK: ...
10011e54:	72636e45 69747079 4e206e6f 7320746f     Encryption Not s
10011e64:	74726174 00006465 76616c53 65532065     tarted..Slave Se
10011e74:	69727563 52207974 2d207165 74754120     curity Req - Aut
10011e84:	746e6568 74616369 206e6f69 6c696146     hentication Fail
10011e94:	00006465 656e6547 65746172 544c2064     ed..Generated LT
10011ea4:	00203a4b 30257830 00205832 646e6553     K: .0x%02X .Send
10011eb4:	20676e69 72696170 20676e69 70736572     ing pairing resp
10011ec4:	65736e6f 00000000 72696150 71655220     onse....Pair Req
10011ed4:	74736575 41202d20 65687475 6369746e     uest - Authentic
10011ee4:	6f697461 6146206e 64656c69 00000000     ation Failed....
10011ef4:	65746e45 68742072 61502065 656b7373     Enter the Passke
10011f04:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10011f14:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10011f24:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10011f34:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10011f44:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10011f54:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10011f64:	6568746f 65442072 65636976 00003a29     other Device):..
10011f74:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10011f84:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10011f94:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10011fa4:	00000064 65746e45 20646572 73736150     d...Entered Pass
10011fb4:	646f632d 00003a65 2d434e45 3a716552     -code:..ENC-Req:
10011fc4:	6e6f4320 6148206e 656c646e 76654420      Conn Handle Dev
10011fd4:	20656369 6e756f46 64683a64 64253a6c     ice Found:hdl:%d
10011fe4:	00000000 74736f68 76656420 20656369     ....host device 
10011ff4:	76696465 00782520 72656570 76656420     ediv %x.peer dev
10012004:	20656369 76696465 00782520 5f636e65     ice ediv %x.enc_
10012014:	20716572 76696465 00782520 20656854     req ediv %x.The 
10012024:	65646e69 73692078 00642520 2d434e45     index is %d.ENC-
10012034:	3a716552 79654b20 756f4620 0000646e     Req: Key Found..
10012044:	72696150 20676e69 6f666e69 74616d72     Pairing informat
10012054:	206e6f69 7020666f 20726565 69766564     ion of peer devi
10012064:	69206563 6f6e2073 76612074 616c6961     ce is not availa
10012074:	2e656c62 00000000 61656c50 75206573     ble.....Please u
10012084:	6961706e 68742072 65642065 65636976     npair the device
10012094:	6f726620 6570206d 64207265 63697665      from peer devic
100120a4:	6f6d2865 656c6962 65732029 6e697474     e(mobile) settin
100120b4:	6d207367 20756e65 20646e61 72617473     gs menu and star
100120c4:	61702074 6e697269 67612067 006e6961     t pairing again.
100120d4:	72636e45 69747079 52206e6f 65757165     Encryption Reque
100120e4:	52207473 796c7065 69614620 0064656c     st Reply Failed.
100120f4:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10012104:	52207473 796c7065 00000000 74696e49     st Reply....Init
10012114:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10012124:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10012134:	6f697461 6166206e 64656c69 00000000     ation failed....
10012144:	61656c50 63206573 6b636568 65687420     Please check the
10012154:	776f7020 61207265 6320646e 656e6e6f      power and conne
10012164:	6f697463 202f206e 64726168 65726177     ction / hardware
10012174:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10012184:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10012194:	20656d61 20746573 6c696166 00006465     ame set failed..
100121a4:	61204442 65726464 67207373 66207465     BD address get f
100121b4:	656c6961 00000064 41204442 65726464     ailed...BD Addre
100121c4:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
100121d4:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
100121e4:	65726464 54207373 3a657079 00006425     ddress Type:%d..
100121f4:	20746553 20454c42 69766544 63206563     Set BLE Device c
10012204:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10012214:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10012224:	41206563 65726464 66207373 656c6961     ce Address faile
10012234:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10012244:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10012254:	76616c53 65732065 69727563 72207974     Slave security r
10012264:	65757165 73207473 65636375 75667373     equest successfu
10012274:	0000006c 76616c53 65732065 69727563     l...Slave securi
10012284:	72207974 65757165 66207473 656c6961     ty request faile
10012294:	00000064 2d454c42 6e657645 64253a74     d...BLE-Event:%d
100122a4:	00000000 54544147 7265535f 20726576     ....GATT_Server 
100122b4:	6e657645 64253a74 00000000 2d454c42     Event:%d....BLE-
100122c4:	616e614d 3a726567 6e6b6e55 206e776f     Manager:Unknown 
100122d4:	6e657645 78303d74 00005825 20454c42     Event=0x%X..BLE 
100122e4:	65766441 73697472 6e656d65 61642074     Advertisement da
100122f4:	73206174 66207465 656c6961 00000064     ta set failed...
10012304:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10012314:	61642074 73206174 73207465 65636375     t data set succe
10012324:	00007373                                ss..

10012328 <ble_mgr_gap_handle>:
10012328:	100099b5 10009c3d 100099d9 00000000     ....=...........
10012338:	00000000 10009df9 10009ab9 10009b55     ............U...
10012348:	1000a1d1 1000a021 1000a3d1 1000a1e9     ....!...........
10012358:	1000a55d 1000a6a1 10009b79 10009ce9     ].......y.......
	...
10012374:	656d6954 74203272 67676972 0a0d7265     Timer2 trigger..
10012384:	00000000                                ....

10012388 <sms_gateway_app_gap_cb>:
	...
10012390:	1000bc9d 00000000 00000000 1000bc5d     ............]...
100123a0:	1000b729 00000000 00000000 1000bf21     )...........!...
	...
100123d4:	72616843 65746361 74736972 77206369     Characteristic w
100123e4:	65746972 73657220 736e6f70 00000065     rite response...
100123f4:	72616843 65746361 74736972 72206369     Characteristic r
10012404:	20646165 6d207962 69746c75 20656c70     ead by multiple 
10012414:	20454c42 70736572 65736e6f 00000073     BLE responses...
10012424:	72616843 65746361 74736972 72206369     Characteristic r
10012434:	20646165 75207962 20646975 70736572     ead by uuid resp
10012444:	65736e6f 00000000 63736944 7265766f     onse....Discover
10012454:	6f632079 656c706d 2e2e6574 0000002e     y complete......
10012464:	69726550 72656870 23206c61 00006425     Peripheral #%d..
10012474:	69202d20 64252064 00000000 63202d20      - id %d.... - c
10012484:	206e6e6f 646e6168 3020656c 34302578     onn handle 0x%04
10012494:	00000078 73202d20 69767265 64256563     x... - service%d
100124a4:	6425203a 00000000 63202d20 20726168     : %d.... - char 
100124b4:	676e6172 25203a65 202d2064 00006425     range: %d - %d..
100124c4:	63736544 74706972 6620726f 646e756f     Descriptor found
100124d4:	00000000 72616843 65746361 74736972     ....Characterist
100124e4:	66206369 646e756f 00000000 6d697250     ic found....Prim
100124f4:	20797261 76726573 20656369 6e756f66     ary service foun
10012504:	00000064 736d735b 7461675f 79617765     d...[sms_gateway
10012514:	7265735f 65636976 756f665f 205d646e     _service_found] 
10012524:	72657320 65636976 61686320 74636172      service charact
10012534:	73697265 73636974 0000003a 65732020     eristics:...  se
10012544:	63697672 79742065 203a6570 00006425     rvice type: %d..
10012554:	65732020 63697672 75752065 203a6469       service uuid: 
10012564:	00007830 6f632020 7620706d 203a6c61     0x..  comp val: 
10012574:	30257830 00007834 74732020 20747261     0x%04x..  start 
10012584:	646e6168 203a656c 00006425 6e652020     handle: %d..  en
10012594:	61682064 656c646e 6425203a 00000000     d handle: %d....
100125a4:	75622020 6e6f7474 72657320 65636976       button service
100125b4:	00000021 72702020 75737365 73206572     !...  pressure s
100125c4:	69767265 00216563 706d2020 65732075     ervice!.  mpu se
100125d4:	63697672 00002165 204e5442 203a6425     rvice!..BTN %d: 
100125e4:	30257830 00007832 52500909 20535345     0x%02x....PRESS 
100125f4:	203a6425 00007830 09090909 20554d49     %d: 0x......IMU 
10012604:	203a6425 00007830 3a746e63 00642520     %d: 0x..cnt: %d.
10012614:	736d735b 7461675f 79617765 746f6e5f     [sms_gateway_not
10012624:	63696669 6f697461 65725f6e 76696563     ification_receiv
10012634:	095d6465 69746f4e 61636966 6e6f6974     ed].Notification
10012644:	63657220 65766965 2e2e2e64 202d0a0d      received.....- 
10012654:	6e6e6f63 6e616820 3a656c64 25783020     conn handle: 0x%
10012664:	0d783430 63202d0a 20726168 646e6168     04x..- char hand
10012674:	203a656c 30257830 0a0d7834 6863202d     le: 0x%04x..- ch
10012684:	6c207261 203a6e65 0a0d6425 6863202d     ar len: %d..- ch
10012694:	76207261 65756c61 7830203a 00000000     ar value: 0x....
100126a4:	69726550 72656870 25206c61 73202c64     Peripheral %d, s
100126b4:	69767265 25206563 6c202c64 74676e65     ervice %d, lengt
100126c4:	64252068 00000000 61746144 00783020     h %d....Data 0x.
100126d4:	78323025 00000020 69766544 63206563     %02x ...Device c
100126e4:	656e6e6f 64657463 002e2e2e 20202020     onnected....    
100126f4:	202d2020 65766461 73697472 64206465       - advertised d
10012704:	3a617461 20783020 00000000 78323025     ata: 0x ....%02x
10012714:	202e2e2e 6b6f6f6c 20676e69 20726f66     ... looking for 
10012724:	78323025 00000000 554f4620 2021444e     %02x.... FOUND! 
10012734:	692e2e2e 7865646e 6425203a 00000000     ...index: %d....
10012744:	54544150 314e5245 54414d20 4e494843     PATTERN1 MATCHIN
10012754:	21212147 00000000 706d6f43 62697461     G!!!....Compatib
10012764:	6420656c 63697665 6f662065 00646e75     le device found.
10012774:	63204f4e 61706d6f 6c626974 65642065     NO compatible de
10012784:	65636976 756f6620 0000646e 68746f4e     vice found..Noth
10012794:	20676e69 6e756f66 00000064 54544147     ing found...GATT
100127a4:	72657320 65636976 73696420 65766f63      service discove
100127b4:	72207972 65757165 66207473 656c6961     ry request faile
100127c4:	00000064 54544147 72657320 65636976     d...GATT service
100127d4:	73696420 65766f63 72207972 65757165      discovery reque
100127e4:	73207473 74726174 00006465 69766544     st started..Devi
100127f4:	20736563 72696170 2e2e6465 0000002e     ces paired......
10012804:	69676552 72657473 20676e69 73726966     Registering firs
10012814:	65702074 68706972 6c617265 00000000     t peripheral....
10012824:	6978614d 206d756d 756f6d61 6f20746e     Maximum amount o
10012834:	65702066 68706972 6c617265 65722073     f peripherals re
10012844:	65686361 00002164 72636e49 69736165     ached!..Increasi
10012854:	7020676e 70697265 61726568 6f63206c     ng peripheral co
10012864:	65746e75 25203a72 00000064 626f7250     unter: %d...Prob
10012874:	206d656c 6c696877 65732065 6e697474     lem while settin
10012884:	70672067 70206f69 00006e69 74696e49     g gpio pin..Init
10012894:	696c6169 676e697a 454c4220 70704120     ializing BLE App
100128a4:	6163696c 6e6f6974 00000000 3a5d305b     lication....[0]:
100128b4:	202c3020 3a5d315b 2c642520 5d325b20      0, [1]: %d, [2]
100128c4:	6425203a 335b202c 00203a5d 00206425     : %d, [3]: .%d .
100128d4:	3a5d305b 202c3420 3a5d315b 2c642520     [0]: 4, [1]: %d,
100128e4:	5d325b20 6425203a 00000000               [2]: %d....

100128f0 <sms_gateway_app_gatt_client_cb>:
100128f0:	1000b8b9 00000000 1000b895 1000b871     ............q...
10012900:	1000b7b1 1000b78d 1000b769 1000b745     ........i...E...
10012910:	1000bb1d 1000ba59 656d7441 6f43206c     ....Y...Atmel Co
10012920:	002e7072                                         rp.

10012923 <CSWTCH.51>:
10012923:	03010300 03030303 03030303 00020303     ................
10012933:	00f17000 00f03010 00f03010 00f02e10     .p...0...0......
10012943:	00f14810 00f14810 00f13a10 00f02e10     .H...H...:......
10012953:	00f14810 00f13a10 00f14810 00f02e10     .H...:...H......
10012963:	00f15010 00f15010 00f15010 00f35010     .P...P...P...P..
10012973:	00004310 012a3800                                .C...

10012978 <_global_impure_ptr>:
10012978:	10012a38                                8*..

1001297c <__sf_fake_stdin>:
	...

1001299c <__sf_fake_stdout>:
	...

100129bc <__sf_fake_stderr>:
	...
100129dc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100129ec:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100129fc:	31300046 35343332 39383736 64636261     F.0123456789abcd
10012a0c:	00006665                                ef..

10012a10 <_init>:
10012a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012a12:	46c0      	nop			; (mov r8, r8)
10012a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012a16:	bc08      	pop	{r3}
10012a18:	469e      	mov	lr, r3
10012a1a:	4770      	bx	lr

10012a1c <__init_array_start>:
10012a1c:	100080b1 	.word	0x100080b1

10012a20 <_fini>:
10012a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012a22:	46c0      	nop			; (mov r8, r8)
10012a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012a26:	bc08      	pop	{r3}
10012a28:	469e      	mov	lr, r3
10012a2a:	4770      	bx	lr

10012a2c <__fini_array_start>:
10012a2c:	10008089 	.word	0x10008089
