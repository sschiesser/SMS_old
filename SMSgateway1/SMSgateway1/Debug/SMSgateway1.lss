
SMSgateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a3a8  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  100123a8  100123a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001698  10012414  10012414  00012414  2**2
                  ALLOC
  3 .stack        00000804  10013aac  10013aac  00012414  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012414  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  0001243c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002469d  00000000  00000000  000124f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b4a  00000000  00000000  00036b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006238  00000000  00000000  000396d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000768  00000000  00000000  0003f90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007f8  00000000  00000000  00040077  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000073d9  00000000  00000000  0004086f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bece  00000000  00000000  00047c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010a68b  00000000  00000000  00053b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d68  00000000  00000000  0015e1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100123a8 	.word	0x100123a8
10008068:	100123a8 	.word	0x100123a8
1000806c:	10012414 	.word	0x10012414
10008070:	10013aac 	.word	0x10013aac
10008074:	10012414 	.word	0x10012414
10008078:	100123ac 	.word	0x100123ac
1000807c:	10012418 	.word	0x10012418
10008080:	1000f8ed 	.word	0x1000f8ed
10008084:	1000bba9 	.word	0x1000bba9

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012414 	.word	0x10012414
100080a8:	00000000 	.word	0x00000000
100080ac:	100123a8 	.word	0x100123a8

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012418 	.word	0x10012418
100080dc:	100123a8 	.word	0x100123a8
100080e0:	100123a8 	.word	0x100123a8
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
100080e8:	2800      	cmp	r0, #0
100080ea:	d107      	bne.n	100080fc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080ec:	2900      	cmp	r1, #0
100080ee:	d102      	bne.n	100080f6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
100080f0:	4b06      	ldr	r3, [pc, #24]	; (1000810c <dualtimer_set_counter+0x24>)
100080f2:	601a      	str	r2, [r3, #0]
100080f4:	e009      	b.n	1000810a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
100080f6:	4b05      	ldr	r3, [pc, #20]	; (1000810c <dualtimer_set_counter+0x24>)
100080f8:	619a      	str	r2, [r3, #24]
100080fa:	e006      	b.n	1000810a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080fc:	2900      	cmp	r1, #0
100080fe:	d102      	bne.n	10008106 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008100:	4b02      	ldr	r3, [pc, #8]	; (1000810c <dualtimer_set_counter+0x24>)
10008102:	621a      	str	r2, [r3, #32]
10008104:	e001      	b.n	1000810a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008106:	4b01      	ldr	r3, [pc, #4]	; (1000810c <dualtimer_set_counter+0x24>)
10008108:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000810a:	4770      	bx	lr
1000810c:	40001000 	.word	0x40001000

10008110 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008110:	2800      	cmp	r0, #0
10008112:	d105      	bne.n	10008120 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008114:	4a06      	ldr	r2, [pc, #24]	; (10008130 <dualtimer_enable+0x20>)
10008116:	7a11      	ldrb	r1, [r2, #8]
10008118:	2380      	movs	r3, #128	; 0x80
1000811a:	430b      	orrs	r3, r1
1000811c:	7213      	strb	r3, [r2, #8]
1000811e:	e005      	b.n	1000812c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008120:	4903      	ldr	r1, [pc, #12]	; (10008130 <dualtimer_enable+0x20>)
10008122:	2228      	movs	r2, #40	; 0x28
10008124:	5c88      	ldrb	r0, [r1, r2]
10008126:	2380      	movs	r3, #128	; 0x80
10008128:	4303      	orrs	r3, r0
1000812a:	548b      	strb	r3, [r1, r2]
	}
}
1000812c:	4770      	bx	lr
1000812e:	46c0      	nop			; (mov r8, r8)
10008130:	40001000 	.word	0x40001000

10008134 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008134:	2800      	cmp	r0, #0
10008136:	d105      	bne.n	10008144 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008138:	4a06      	ldr	r2, [pc, #24]	; (10008154 <dualtimer_disable+0x20>)
1000813a:	7a11      	ldrb	r1, [r2, #8]
1000813c:	237f      	movs	r3, #127	; 0x7f
1000813e:	400b      	ands	r3, r1
10008140:	7213      	strb	r3, [r2, #8]
10008142:	e005      	b.n	10008150 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008144:	4903      	ldr	r1, [pc, #12]	; (10008154 <dualtimer_disable+0x20>)
10008146:	2228      	movs	r2, #40	; 0x28
10008148:	5c88      	ldrb	r0, [r1, r2]
1000814a:	237f      	movs	r3, #127	; 0x7f
1000814c:	4003      	ands	r3, r0
1000814e:	548b      	strb	r3, [r1, r2]
	}
}
10008150:	4770      	bx	lr
10008152:	46c0      	nop			; (mov r8, r8)
10008154:	40001000 	.word	0x40001000

10008158 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008158:	2800      	cmp	r0, #0
1000815a:	d102      	bne.n	10008162 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000815c:	4b02      	ldr	r3, [pc, #8]	; (10008168 <dualtimer_register_callback+0x10>)
1000815e:	6019      	str	r1, [r3, #0]
10008160:	e001      	b.n	10008166 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008162:	4b02      	ldr	r3, [pc, #8]	; (1000816c <dualtimer_register_callback+0x14>)
10008164:	6019      	str	r1, [r3, #0]
	}
}
10008166:	4770      	bx	lr
10008168:	10012430 	.word	0x10012430
1000816c:	10012434 	.word	0x10012434

10008170 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008170:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10008172:	4b17      	ldr	r3, [pc, #92]	; (100081d0 <gpio_port0_isr_handler+0x60>)
10008174:	681d      	ldr	r5, [r3, #0]
10008176:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008178:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000817a:	07cb      	lsls	r3, r1, #31
1000817c:	d407      	bmi.n	1000818e <gpio_port0_isr_handler+0x1e>
1000817e:	2301      	movs	r3, #1
10008180:	2401      	movs	r4, #1
10008182:	0018      	movs	r0, r3
10008184:	0022      	movs	r2, r4
10008186:	409a      	lsls	r2, r3
10008188:	4211      	tst	r1, r2
1000818a:	d016      	beq.n	100081ba <gpio_port0_isr_handler+0x4a>
1000818c:	e001      	b.n	10008192 <gpio_port0_isr_handler+0x22>
1000818e:	2201      	movs	r2, #1
10008190:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
10008192:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
10008194:	431a      	orrs	r2, r3
10008196:	b292      	uxth	r2, r2
10008198:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000819a:	2346      	movs	r3, #70	; 0x46
1000819c:	4a0c      	ldr	r2, [pc, #48]	; (100081d0 <gpio_port0_isr_handler+0x60>)
1000819e:	5ad3      	ldrh	r3, [r2, r3]
100081a0:	4103      	asrs	r3, r0
100081a2:	07db      	lsls	r3, r3, #31
100081a4:	d50c      	bpl.n	100081c0 <gpio_port0_isr_handler+0x50>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
100081a6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
100081a8:	5ad3      	ldrh	r3, [r2, r3]
100081aa:	4103      	asrs	r3, r0
100081ac:	07db      	lsls	r3, r3, #31
100081ae:	d507      	bpl.n	100081c0 <gpio_port0_isr_handler+0x50>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
100081b0:	0080      	lsls	r0, r0, #2
100081b2:	1810      	adds	r0, r2, r0
100081b4:	6843      	ldr	r3, [r0, #4]
100081b6:	4798      	blx	r3
100081b8:	e002      	b.n	100081c0 <gpio_port0_isr_handler+0x50>
100081ba:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100081bc:	2b10      	cmp	r3, #16
100081be:	d1e0      	bne.n	10008182 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100081c0:	2180      	movs	r1, #128	; 0x80
100081c2:	0409      	lsls	r1, r1, #16
100081c4:	23c0      	movs	r3, #192	; 0xc0
100081c6:	005b      	lsls	r3, r3, #1
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <gpio_port0_isr_handler+0x64>)
100081ca:	50d1      	str	r1, [r2, r3]
			_gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
100081cc:	bd70      	pop	{r4, r5, r6, pc}
100081ce:	46c0      	nop			; (mov r8, r8)
100081d0:	1001268c 	.word	0x1001268c
100081d4:	e000e100 	.word	0xe000e100

100081d8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
100081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
100081da:	4b19      	ldr	r3, [pc, #100]	; (10008240 <gpio_port1_isr_handler+0x68>)
100081dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100081de:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
100081e0:	b2b6      	uxth	r6, r6
100081e2:	0037      	movs	r7, r6
100081e4:	2500      	movs	r5, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081e6:	0b76      	lsrs	r6, r6, #13
100081e8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100081ea:	4c15      	ldr	r4, [pc, #84]	; (10008240 <gpio_port1_isr_handler+0x68>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081ec:	2e00      	cmp	r6, #0
100081ee:	d001      	beq.n	100081f4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
100081f0:	4b14      	ldr	r3, [pc, #80]	; (10008244 <gpio_port1_isr_handler+0x6c>)
100081f2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100081f4:	002a      	movs	r2, r5
100081f6:	2301      	movs	r3, #1
100081f8:	40ab      	lsls	r3, r5
100081fa:	421f      	tst	r7, r3
100081fc:	d015      	beq.n	1000822a <gpio_port1_isr_handler+0x52>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100081fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
10008200:	8f08      	ldrh	r0, [r1, #56]	; 0x38
10008202:	4303      	orrs	r3, r0
10008204:	b29b      	uxth	r3, r3
10008206:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008208:	238e      	movs	r3, #142	; 0x8e
1000820a:	5ae3      	ldrh	r3, [r4, r3]
1000820c:	412b      	asrs	r3, r5
1000820e:	07db      	lsls	r3, r3, #31
10008210:	d50b      	bpl.n	1000822a <gpio_port1_isr_handler+0x52>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10008212:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008214:	490a      	ldr	r1, [pc, #40]	; (10008240 <gpio_port1_isr_handler+0x68>)
10008216:	5acb      	ldrh	r3, [r1, r3]
10008218:	412b      	asrs	r3, r5
1000821a:	07db      	lsls	r3, r3, #31
1000821c:	d505      	bpl.n	1000822a <gpio_port1_isr_handler+0x52>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000821e:	3212      	adds	r2, #18
10008220:	0092      	lsls	r2, r2, #2
10008222:	188a      	adds	r2, r1, r2
10008224:	6853      	ldr	r3, [r2, #4]
10008226:	4798      	blx	r3
				break;
10008228:	e002      	b.n	10008230 <gpio_port1_isr_handler+0x58>
1000822a:	3501      	adds	r5, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000822c:	2d10      	cmp	r5, #16
1000822e:	d1dd      	bne.n	100081ec <gpio_port1_isr_handler+0x14>
10008230:	2180      	movs	r1, #128	; 0x80
10008232:	0449      	lsls	r1, r1, #17
10008234:	23c0      	movs	r3, #192	; 0xc0
10008236:	005b      	lsls	r3, r3, #1
10008238:	4a03      	ldr	r2, [pc, #12]	; (10008248 <gpio_port1_isr_handler+0x70>)
1000823a:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000823e:	46c0      	nop			; (mov r8, r8)
10008240:	1001268c 	.word	0x1001268c
10008244:	0001bc51 	.word	0x0001bc51
10008248:	e000e100 	.word	0xe000e100

1000824c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000824c:	2300      	movs	r3, #0
1000824e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008250:	2201      	movs	r2, #1
10008252:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008254:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008256:	70c3      	strb	r3, [r0, #3]
}
10008258:	4770      	bx	lr
1000825a:	46c0      	nop			; (mov r8, r8)

1000825c <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000825c:	b530      	push	{r4, r5, lr}
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1) || \
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
1000825e:	2317      	movs	r3, #23

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008260:	2801      	cmp	r0, #1
10008262:	d800      	bhi.n	10008266 <gpio_pin_set_config+0xa>
10008264:	e0a2      	b.n	100083ac <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_1) || \
10008266:	280e      	cmp	r0, #14
10008268:	d100      	bne.n	1000826c <gpio_pin_set_config+0x10>
1000826a:	e09f      	b.n	100083ac <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000826c:	2807      	cmp	r0, #7
1000826e:	d809      	bhi.n	10008284 <gpio_pin_set_config+0x28>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008270:	4d4f      	ldr	r5, [pc, #316]	; (100083b0 <gpio_pin_set_config+0x154>)
10008272:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008274:	3b10      	subs	r3, #16
10008276:	4003      	ands	r3, r0
10008278:	009b      	lsls	r3, r3, #2
1000827a:	2407      	movs	r4, #7
1000827c:	409c      	lsls	r4, r3
1000827e:	43a2      	bics	r2, r4
10008280:	646a      	str	r2, [r5, #68]	; 0x44
10008282:	e016      	b.n	100082b2 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 15) {
10008284:	280f      	cmp	r0, #15
10008286:	d809      	bhi.n	1000829c <gpio_pin_set_config+0x40>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008288:	4d49      	ldr	r5, [pc, #292]	; (100083b0 <gpio_pin_set_config+0x154>)
1000828a:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000828c:	2307      	movs	r3, #7
1000828e:	4003      	ands	r3, r0
10008290:	009b      	lsls	r3, r3, #2
10008292:	2407      	movs	r4, #7
10008294:	409c      	lsls	r4, r3
10008296:	43a2      	bics	r2, r4
10008298:	64aa      	str	r2, [r5, #72]	; 0x48
1000829a:	e00a      	b.n	100082b2 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 23) {
1000829c:	2817      	cmp	r0, #23
1000829e:	d808      	bhi.n	100082b2 <gpio_pin_set_config+0x56>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100082a0:	4d43      	ldr	r5, [pc, #268]	; (100083b0 <gpio_pin_set_config+0x154>)
100082a2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100082a4:	2307      	movs	r3, #7
100082a6:	4003      	ands	r3, r0
100082a8:	009b      	lsls	r3, r3, #2
100082aa:	2407      	movs	r4, #7
100082ac:	409c      	lsls	r4, r3
100082ae:	43a2      	bics	r2, r4
100082b0:	64ea      	str	r2, [r5, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100082b2:	0003      	movs	r3, r0
100082b4:	3b1d      	subs	r3, #29
100082b6:	2b02      	cmp	r3, #2
100082b8:	d829      	bhi.n	1000830e <gpio_pin_set_config+0xb2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100082ba:	784b      	ldrb	r3, [r1, #1]
100082bc:	2b01      	cmp	r3, #1
100082be:	d108      	bne.n	100082d2 <gpio_pin_set_config+0x76>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100082c0:	4d3c      	ldr	r5, [pc, #240]	; (100083b4 <gpio_pin_set_config+0x158>)
100082c2:	7d2b      	ldrb	r3, [r5, #20]
100082c4:	241f      	movs	r4, #31
100082c6:	1a24      	subs	r4, r4, r0
100082c8:	2201      	movs	r2, #1
100082ca:	40a2      	lsls	r2, r4
100082cc:	4393      	bics	r3, r2
100082ce:	752b      	strb	r3, [r5, #20]
100082d0:	e008      	b.n	100082e4 <gpio_pin_set_config+0x88>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100082d2:	4c38      	ldr	r4, [pc, #224]	; (100083b4 <gpio_pin_set_config+0x158>)
100082d4:	7d25      	ldrb	r5, [r4, #20]
100082d6:	221f      	movs	r2, #31
100082d8:	1a12      	subs	r2, r2, r0
100082da:	2301      	movs	r3, #1
100082dc:	4093      	lsls	r3, r2
100082de:	432b      	orrs	r3, r5
100082e0:	b2db      	uxtb	r3, r3
100082e2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100082e4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100082e6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100082e8:	2a00      	cmp	r2, #0
100082ea:	d05f      	beq.n	100083ac <gpio_pin_set_config+0x150>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100082ec:	4931      	ldr	r1, [pc, #196]	; (100083b4 <gpio_pin_set_config+0x158>)
100082ee:	880c      	ldrh	r4, [r1, #0]
100082f0:	221f      	movs	r2, #31
100082f2:	1a10      	subs	r0, r2, r0
100082f4:	0080      	lsls	r0, r0, #2
100082f6:	3301      	adds	r3, #1
100082f8:	4083      	lsls	r3, r0
100082fa:	4323      	orrs	r3, r4
100082fc:	b29b      	uxth	r3, r3
100082fe:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008300:	4a2d      	ldr	r2, [pc, #180]	; (100083b8 <gpio_pin_set_config+0x15c>)
10008302:	7811      	ldrb	r1, [r2, #0]
10008304:	2302      	movs	r3, #2
10008306:	430b      	orrs	r3, r1
10008308:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000830a:	2300      	movs	r3, #0
1000830c:	e04e      	b.n	100083ac <gpio_pin_set_config+0x150>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000830e:	780a      	ldrb	r2, [r1, #0]
10008310:	2a00      	cmp	r2, #0
10008312:	d131      	bne.n	10008378 <gpio_pin_set_config+0x11c>
				if(gpio_pin < 16) {
10008314:	280f      	cmp	r0, #15
10008316:	d805      	bhi.n	10008324 <gpio_pin_set_config+0xc8>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008318:	2301      	movs	r3, #1
1000831a:	4083      	lsls	r3, r0
1000831c:	b29b      	uxth	r3, r3
1000831e:	4a27      	ldr	r2, [pc, #156]	; (100083bc <gpio_pin_set_config+0x160>)
10008320:	8293      	strh	r3, [r2, #20]
10008322:	e006      	b.n	10008332 <gpio_pin_set_config+0xd6>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008324:	220f      	movs	r2, #15
10008326:	4002      	ands	r2, r0
10008328:	2301      	movs	r3, #1
1000832a:	4093      	lsls	r3, r2
1000832c:	b29b      	uxth	r3, r3
1000832e:	4a24      	ldr	r2, [pc, #144]	; (100083c0 <gpio_pin_set_config+0x164>)
10008330:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
10008332:	784b      	ldrb	r3, [r1, #1]
10008334:	2b01      	cmp	r3, #1
10008336:	d00c      	beq.n	10008352 <gpio_pin_set_config+0xf6>
10008338:	2b00      	cmp	r3, #0
1000833a:	d002      	beq.n	10008342 <gpio_pin_set_config+0xe6>
1000833c:	2b02      	cmp	r3, #2
1000833e:	d010      	beq.n	10008362 <gpio_pin_set_config+0x106>
10008340:	e033      	b.n	100083aa <gpio_pin_set_config+0x14e>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008342:	491b      	ldr	r1, [pc, #108]	; (100083b0 <gpio_pin_set_config+0x154>)
10008344:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008346:	2301      	movs	r3, #1
10008348:	4083      	lsls	r3, r0
1000834a:	4313      	orrs	r3, r2
1000834c:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000834e:	2300      	movs	r3, #0
				}
				/* pull_enable. */
				switch(config->input_pull) {
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
10008350:	e02c      	b.n	100083ac <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008352:	4917      	ldr	r1, [pc, #92]	; (100083b0 <gpio_pin_set_config+0x154>)
10008354:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008356:	2201      	movs	r2, #1
10008358:	4082      	lsls	r2, r0
1000835a:	4393      	bics	r3, r2
1000835c:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000835e:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008360:	e024      	b.n	100083ac <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008362:	4b13      	ldr	r3, [pc, #76]	; (100083b0 <gpio_pin_set_config+0x154>)
10008364:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008366:	2201      	movs	r2, #1
10008368:	4082      	lsls	r2, r0
1000836a:	4311      	orrs	r1, r2
1000836c:	6559      	str	r1, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000836e:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008370:	4391      	bics	r1, r2
10008372:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008374:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008376:	e019      	b.n	100083ac <gpio_pin_set_config+0x150>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008378:	2300      	movs	r3, #0
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
						break;
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000837a:	2a01      	cmp	r2, #1
1000837c:	d116      	bne.n	100083ac <gpio_pin_set_config+0x150>
				if (gpio_pin < 16) {
1000837e:	280f      	cmp	r0, #15
10008380:	d808      	bhi.n	10008394 <gpio_pin_set_config+0x138>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
10008382:	4a0e      	ldr	r2, [pc, #56]	; (100083bc <gpio_pin_set_config+0x160>)
10008384:	8a11      	ldrh	r1, [r2, #16]
10008386:	3301      	adds	r3, #1
10008388:	4083      	lsls	r3, r0
1000838a:	430b      	orrs	r3, r1
1000838c:	b29b      	uxth	r3, r3
1000838e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008390:	2300      	movs	r3, #0
10008392:	e00b      	b.n	100083ac <gpio_pin_set_config+0x150>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
10008394:	4a0a      	ldr	r2, [pc, #40]	; (100083c0 <gpio_pin_set_config+0x164>)
10008396:	8a11      	ldrh	r1, [r2, #16]
10008398:	230f      	movs	r3, #15
1000839a:	4018      	ands	r0, r3
1000839c:	3b0e      	subs	r3, #14
1000839e:	4083      	lsls	r3, r0
100083a0:	430b      	orrs	r3, r1
100083a2:	b29b      	uxth	r3, r3
100083a4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083a6:	2300      	movs	r3, #0
100083a8:	e000      	b.n	100083ac <gpio_pin_set_config+0x150>
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
100083aa:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100083ac:	0018      	movs	r0, r3
100083ae:	bd30      	pop	{r4, r5, pc}
100083b0:	4000b000 	.word	0x4000b000
100083b4:	4000f000 	.word	0x4000f000
100083b8:	4000e000 	.word	0x4000e000
100083bc:	40010000 	.word	0x40010000
100083c0:	40011000 	.word	0x40011000

100083c4 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100083c4:	b510      	push	{r4, lr}
	if(gpio_pin < 16) {
100083c6:	280f      	cmp	r0, #15
100083c8:	d810      	bhi.n	100083ec <gpio_pin_set_output_level+0x28>
		if(level) {
100083ca:	2900      	cmp	r1, #0
100083cc:	d007      	beq.n	100083de <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100083ce:	4a12      	ldr	r2, [pc, #72]	; (10008418 <gpio_pin_set_output_level+0x54>)
100083d0:	8891      	ldrh	r1, [r2, #4]
100083d2:	2301      	movs	r3, #1
100083d4:	4083      	lsls	r3, r0
100083d6:	430b      	orrs	r3, r1
100083d8:	b29b      	uxth	r3, r3
100083da:	8093      	strh	r3, [r2, #4]
100083dc:	e01a      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100083de:	490e      	ldr	r1, [pc, #56]	; (10008418 <gpio_pin_set_output_level+0x54>)
100083e0:	888b      	ldrh	r3, [r1, #4]
100083e2:	2201      	movs	r2, #1
100083e4:	4082      	lsls	r2, r0
100083e6:	4393      	bics	r3, r2
100083e8:	808b      	strh	r3, [r1, #4]
100083ea:	e013      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		}
	} else {
		if(level) {
100083ec:	2900      	cmp	r1, #0
100083ee:	d009      	beq.n	10008404 <gpio_pin_set_output_level+0x40>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
100083f0:	490a      	ldr	r1, [pc, #40]	; (1000841c <gpio_pin_set_output_level+0x58>)
100083f2:	888c      	ldrh	r4, [r1, #4]
100083f4:	220f      	movs	r2, #15
100083f6:	4010      	ands	r0, r2
100083f8:	2301      	movs	r3, #1
100083fa:	4083      	lsls	r3, r0
100083fc:	4323      	orrs	r3, r4
100083fe:	b29b      	uxth	r3, r3
10008400:	808b      	strh	r3, [r1, #4]
10008402:	e007      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008404:	4905      	ldr	r1, [pc, #20]	; (1000841c <gpio_pin_set_output_level+0x58>)
10008406:	888b      	ldrh	r3, [r1, #4]
10008408:	220f      	movs	r2, #15
1000840a:	4010      	ands	r0, r2
1000840c:	3a0e      	subs	r2, #14
1000840e:	4082      	lsls	r2, r0
10008410:	4393      	bics	r3, r2
10008412:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008414:	bd10      	pop	{r4, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40010000 	.word	0x40010000
1000841c:	40011000 	.word	0x40011000

10008420 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008420:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008422:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008424:	23ff      	movs	r3, #255	; 0xff
10008426:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008428:	2807      	cmp	r0, #7
1000842a:	d833      	bhi.n	10008494 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000842c:	4a4e      	ldr	r2, [pc, #312]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000842e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008430:	3bf8      	subs	r3, #248	; 0xf8
10008432:	4003      	ands	r3, r0
10008434:	009b      	lsls	r3, r3, #2
10008436:	2607      	movs	r6, #7
10008438:	409e      	lsls	r6, r3
1000843a:	43b4      	bics	r4, r6
1000843c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000843e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008440:	000e      	movs	r6, r1
10008442:	409e      	lsls	r6, r3
10008444:	0033      	movs	r3, r6
10008446:	4323      	orrs	r3, r4
10008448:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000844a:	2901      	cmp	r1, #1
1000844c:	d000      	beq.n	10008450 <gpio_pinmux_cofiguration+0x30>
1000844e:	e08a      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008450:	2803      	cmp	r0, #3
10008452:	d80f      	bhi.n	10008474 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008454:	0011      	movs	r1, r2
10008456:	22d0      	movs	r2, #208	; 0xd0
10008458:	0052      	lsls	r2, r2, #1
1000845a:	588c      	ldr	r4, [r1, r2]
1000845c:	2303      	movs	r3, #3
1000845e:	4018      	ands	r0, r3
10008460:	00c0      	lsls	r0, r0, #3
10008462:	333c      	adds	r3, #60	; 0x3c
10008464:	4083      	lsls	r3, r0
10008466:	439c      	bics	r4, r3
10008468:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000846a:	588b      	ldr	r3, [r1, r2]
1000846c:	4085      	lsls	r5, r0
1000846e:	431d      	orrs	r5, r3
10008470:	508d      	str	r5, [r1, r2]
10008472:	e078      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008474:	493c      	ldr	r1, [pc, #240]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
10008476:	22d2      	movs	r2, #210	; 0xd2
10008478:	0052      	lsls	r2, r2, #1
1000847a:	588c      	ldr	r4, [r1, r2]
1000847c:	2303      	movs	r3, #3
1000847e:	4018      	ands	r0, r3
10008480:	00c0      	lsls	r0, r0, #3
10008482:	333c      	adds	r3, #60	; 0x3c
10008484:	4083      	lsls	r3, r0
10008486:	439c      	bics	r4, r3
10008488:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000848a:	588b      	ldr	r3, [r1, r2]
1000848c:	4085      	lsls	r5, r0
1000848e:	431d      	orrs	r5, r3
10008490:	508d      	str	r5, [r1, r2]
10008492:	e068      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008494:	280f      	cmp	r0, #15
10008496:	d832      	bhi.n	100084fe <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008498:	4a33      	ldr	r2, [pc, #204]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000849a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000849c:	2307      	movs	r3, #7
1000849e:	4003      	ands	r3, r0
100084a0:	009b      	lsls	r3, r3, #2
100084a2:	2607      	movs	r6, #7
100084a4:	409e      	lsls	r6, r3
100084a6:	43b4      	bics	r4, r6
100084a8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100084aa:	6c94      	ldr	r4, [r2, #72]	; 0x48
100084ac:	000e      	movs	r6, r1
100084ae:	409e      	lsls	r6, r3
100084b0:	0033      	movs	r3, r6
100084b2:	4323      	orrs	r3, r4
100084b4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100084b6:	2901      	cmp	r1, #1
100084b8:	d155      	bne.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100084ba:	280b      	cmp	r0, #11
100084bc:	d80f      	bhi.n	100084de <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084be:	0011      	movs	r1, r2
100084c0:	22d4      	movs	r2, #212	; 0xd4
100084c2:	0052      	lsls	r2, r2, #1
100084c4:	588c      	ldr	r4, [r1, r2]
100084c6:	2303      	movs	r3, #3
100084c8:	4018      	ands	r0, r3
100084ca:	00c0      	lsls	r0, r0, #3
100084cc:	333c      	adds	r3, #60	; 0x3c
100084ce:	4083      	lsls	r3, r0
100084d0:	439c      	bics	r4, r3
100084d2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084d4:	588b      	ldr	r3, [r1, r2]
100084d6:	4085      	lsls	r5, r0
100084d8:	431d      	orrs	r5, r3
100084da:	508d      	str	r5, [r1, r2]
100084dc:	e043      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084de:	4922      	ldr	r1, [pc, #136]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
100084e0:	22d6      	movs	r2, #214	; 0xd6
100084e2:	0052      	lsls	r2, r2, #1
100084e4:	588c      	ldr	r4, [r1, r2]
100084e6:	2303      	movs	r3, #3
100084e8:	4018      	ands	r0, r3
100084ea:	00c0      	lsls	r0, r0, #3
100084ec:	333c      	adds	r3, #60	; 0x3c
100084ee:	4083      	lsls	r3, r0
100084f0:	439c      	bics	r4, r3
100084f2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084f4:	588b      	ldr	r3, [r1, r2]
100084f6:	4085      	lsls	r5, r0
100084f8:	431d      	orrs	r5, r3
100084fa:	508d      	str	r5, [r1, r2]
100084fc:	e033      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100084fe:	2817      	cmp	r0, #23
10008500:	d831      	bhi.n	10008566 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008502:	4a19      	ldr	r2, [pc, #100]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
10008504:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008506:	2307      	movs	r3, #7
10008508:	4003      	ands	r3, r0
1000850a:	009b      	lsls	r3, r3, #2
1000850c:	2607      	movs	r6, #7
1000850e:	409e      	lsls	r6, r3
10008510:	43b4      	bics	r4, r6
10008512:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008514:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008516:	000e      	movs	r6, r1
10008518:	409e      	lsls	r6, r3
1000851a:	0033      	movs	r3, r6
1000851c:	4323      	orrs	r3, r4
1000851e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008520:	2901      	cmp	r1, #1
10008522:	d120      	bne.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008524:	2813      	cmp	r0, #19
10008526:	d80f      	bhi.n	10008548 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008528:	0011      	movs	r1, r2
1000852a:	22d8      	movs	r2, #216	; 0xd8
1000852c:	0052      	lsls	r2, r2, #1
1000852e:	588c      	ldr	r4, [r1, r2]
10008530:	2303      	movs	r3, #3
10008532:	4018      	ands	r0, r3
10008534:	00c0      	lsls	r0, r0, #3
10008536:	333c      	adds	r3, #60	; 0x3c
10008538:	4083      	lsls	r3, r0
1000853a:	439c      	bics	r4, r3
1000853c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000853e:	588b      	ldr	r3, [r1, r2]
10008540:	4085      	lsls	r5, r0
10008542:	431d      	orrs	r5, r3
10008544:	508d      	str	r5, [r1, r2]
10008546:	e00e      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008548:	4a07      	ldr	r2, [pc, #28]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000854a:	23da      	movs	r3, #218	; 0xda
1000854c:	005b      	lsls	r3, r3, #1
1000854e:	58d1      	ldr	r1, [r2, r3]
10008550:	2403      	movs	r4, #3
10008552:	4020      	ands	r0, r4
10008554:	00c0      	lsls	r0, r0, #3
10008556:	343c      	adds	r4, #60	; 0x3c
10008558:	4084      	lsls	r4, r0
1000855a:	43a1      	bics	r1, r4
1000855c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000855e:	58d1      	ldr	r1, [r2, r3]
10008560:	4085      	lsls	r5, r0
10008562:	430d      	orrs	r5, r1
10008564:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008566:	bd70      	pop	{r4, r5, r6, pc}
10008568:	4000b000 	.word	0x4000b000

1000856c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000856c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(callback_func);
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000856e:	230f      	movs	r3, #15
10008570:	4283      	cmp	r3, r0
10008572:	419b      	sbcs	r3, r3
10008574:	425b      	negs	r3, r3
		gpio_port = 0;
	} else {
		gpio_port = 1;
	}
	switch (callback_type) {
10008576:	2a01      	cmp	r2, #1
10008578:	d01e      	beq.n	100085b8 <gpio_register_callback+0x4c>
1000857a:	2a00      	cmp	r2, #0
1000857c:	d004      	beq.n	10008588 <gpio_register_callback+0x1c>
1000857e:	2a02      	cmp	r2, #2
10008580:	d032      	beq.n	100085e8 <gpio_register_callback+0x7c>
10008582:	2a03      	cmp	r2, #3
10008584:	d048      	beq.n	10008618 <gpio_register_callback+0xac>
10008586:	e05e      	b.n	10008646 <gpio_register_callback+0xda>
		case GPIO_CALLBACK_LOW:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
10008588:	4e39      	ldr	r6, [pc, #228]	; (10008670 <gpio_register_callback+0x104>)
1000858a:	00dc      	lsls	r4, r3, #3
1000858c:	18e2      	adds	r2, r4, r3
1000858e:	00d2      	lsls	r2, r2, #3
10008590:	5992      	ldr	r2, [r2, r6]
10008592:	4694      	mov	ip, r2
10008594:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
10008596:	270f      	movs	r7, #15
10008598:	4007      	ands	r7, r0
1000859a:	2201      	movs	r2, #1
1000859c:	40ba      	lsls	r2, r7
1000859e:	b212      	sxth	r2, r2
100085a0:	4315      	orrs	r5, r2
100085a2:	b2ad      	uxth	r5, r5
100085a4:	4667      	mov	r7, ip
100085a6:	85bd      	strh	r5, [r7, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= 1 << (gpio_pin % 16);
100085a8:	18e4      	adds	r4, r4, r3
100085aa:	00e4      	lsls	r4, r4, #3
100085ac:	59a4      	ldr	r4, [r4, r6]
100085ae:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
100085b0:	432a      	orrs	r2, r5
100085b2:	b292      	uxth	r2, r2
100085b4:	86a2      	strh	r2, [r4, #52]	; 0x34
			break;
100085b6:	e046      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_HIGH:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
100085b8:	4e2d      	ldr	r6, [pc, #180]	; (10008670 <gpio_register_callback+0x104>)
100085ba:	00dc      	lsls	r4, r3, #3
100085bc:	18e2      	adds	r2, r4, r3
100085be:	00d2      	lsls	r2, r2, #3
100085c0:	5992      	ldr	r2, [r2, r6]
100085c2:	4694      	mov	ip, r2
100085c4:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
100085c6:	270f      	movs	r7, #15
100085c8:	4007      	ands	r7, r0
100085ca:	2201      	movs	r2, #1
100085cc:	40ba      	lsls	r2, r7
100085ce:	b212      	sxth	r2, r2
100085d0:	4315      	orrs	r5, r2
100085d2:	b2ad      	uxth	r5, r5
100085d4:	4667      	mov	r7, ip
100085d6:	85bd      	strh	r5, [r7, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
100085d8:	18e4      	adds	r4, r4, r3
100085da:	00e4      	lsls	r4, r4, #3
100085dc:	59a4      	ldr	r4, [r4, r6]
100085de:	8e25      	ldrh	r5, [r4, #48]	; 0x30
100085e0:	432a      	orrs	r2, r5
100085e2:	b292      	uxth	r2, r2
100085e4:	8622      	strh	r2, [r4, #48]	; 0x30
			break;
100085e6:	e02e      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_RISING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
100085e8:	4e21      	ldr	r6, [pc, #132]	; (10008670 <gpio_register_callback+0x104>)
100085ea:	00dc      	lsls	r4, r3, #3
100085ec:	18e2      	adds	r2, r4, r3
100085ee:	00d2      	lsls	r2, r2, #3
100085f0:	5992      	ldr	r2, [r2, r6]
100085f2:	4694      	mov	ip, r2
100085f4:	8d15      	ldrh	r5, [r2, #40]	; 0x28
100085f6:	270f      	movs	r7, #15
100085f8:	4007      	ands	r7, r0
100085fa:	2201      	movs	r2, #1
100085fc:	40ba      	lsls	r2, r7
100085fe:	b212      	sxth	r2, r2
10008600:	4315      	orrs	r5, r2
10008602:	b2ad      	uxth	r5, r5
10008604:	4667      	mov	r7, ip
10008606:	853d      	strh	r5, [r7, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
10008608:	18e4      	adds	r4, r4, r3
1000860a:	00e4      	lsls	r4, r4, #3
1000860c:	59a4      	ldr	r4, [r4, r6]
1000860e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
10008610:	432a      	orrs	r2, r5
10008612:	b292      	uxth	r2, r2
10008614:	8622      	strh	r2, [r4, #48]	; 0x30
			break;
10008616:	e016      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_FALLING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
10008618:	4e15      	ldr	r6, [pc, #84]	; (10008670 <gpio_register_callback+0x104>)
1000861a:	00dc      	lsls	r4, r3, #3
1000861c:	18e2      	adds	r2, r4, r3
1000861e:	00d2      	lsls	r2, r2, #3
10008620:	5992      	ldr	r2, [r2, r6]
10008622:	4694      	mov	ip, r2
10008624:	8d15      	ldrh	r5, [r2, #40]	; 0x28
10008626:	270f      	movs	r7, #15
10008628:	4007      	ands	r7, r0
1000862a:	2201      	movs	r2, #1
1000862c:	40ba      	lsls	r2, r7
1000862e:	b212      	sxth	r2, r2
10008630:	4315      	orrs	r5, r2
10008632:	b2ad      	uxth	r5, r5
10008634:	4667      	mov	r7, ip
10008636:	853d      	strh	r5, [r7, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= (1 << (gpio_pin % 16));
10008638:	18e4      	adds	r4, r4, r3
1000863a:	00e4      	lsls	r4, r4, #3
1000863c:	59a4      	ldr	r4, [r4, r6]
1000863e:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
10008640:	432a      	orrs	r2, r5
10008642:	b292      	uxth	r2, r2
10008644:	86a2      	strh	r2, [r4, #52]	; 0x34

		case GPIO_CALLBACK_N:
			break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
10008646:	220f      	movs	r2, #15
10008648:	4010      	ands	r0, r2
1000864a:	4c09      	ldr	r4, [pc, #36]	; (10008670 <gpio_register_callback+0x104>)
1000864c:	00dd      	lsls	r5, r3, #3
1000864e:	18ea      	adds	r2, r5, r3
10008650:	0052      	lsls	r2, r2, #1
10008652:	1812      	adds	r2, r2, r0
10008654:	0092      	lsls	r2, r2, #2
10008656:	18a2      	adds	r2, r4, r2
10008658:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000865a:	18ea      	adds	r2, r5, r3
1000865c:	00d2      	lsls	r2, r2, #3
1000865e:	18a2      	adds	r2, r4, r2
10008660:	3244      	adds	r2, #68	; 0x44
10008662:	2101      	movs	r1, #1
10008664:	4081      	lsls	r1, r0
10008666:	8813      	ldrh	r3, [r2, #0]
10008668:	430b      	orrs	r3, r1
1000866a:	8013      	strh	r3, [r2, #0]
}
1000866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000866e:	46c0      	nop			; (mov r8, r8)
10008670:	1001268c 	.word	0x1001268c

10008674 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
10008674:	b530      	push	{r4, r5, lr}
	} else {
		gpio_port = 1;
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10008676:	230f      	movs	r3, #15
10008678:	4283      	cmp	r3, r0
1000867a:	419b      	sbcs	r3, r3
1000867c:	425b      	negs	r3, r3
1000867e:	220f      	movs	r2, #15
10008680:	4010      	ands	r0, r2
10008682:	3a0e      	subs	r2, #14
10008684:	4082      	lsls	r2, r0
10008686:	b212      	sxth	r2, r2
10008688:	4c08      	ldr	r4, [pc, #32]	; (100086ac <gpio_enable_callback+0x38>)
1000868a:	00dd      	lsls	r5, r3, #3
1000868c:	18e9      	adds	r1, r5, r3
1000868e:	00c9      	lsls	r1, r1, #3
10008690:	1861      	adds	r1, r4, r1
10008692:	3146      	adds	r1, #70	; 0x46
10008694:	8808      	ldrh	r0, [r1, #0]
10008696:	4310      	orrs	r0, r2
10008698:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg |= (1 << (gpio_pin % 16));
1000869a:	18eb      	adds	r3, r5, r3
1000869c:	00db      	lsls	r3, r3, #3
1000869e:	591b      	ldr	r3, [r3, r4]
100086a0:	8c19      	ldrh	r1, [r3, #32]
100086a2:	430a      	orrs	r2, r1
100086a4:	b292      	uxth	r2, r2
100086a6:	841a      	strh	r2, [r3, #32]
}
100086a8:	bd30      	pop	{r4, r5, pc}
100086aa:	46c0      	nop			; (mov r8, r8)
100086ac:	1001268c 	.word	0x1001268c

100086b0 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
100086b0:	b510      	push	{r4, lr}
100086b2:	4b13      	ldr	r3, [pc, #76]	; (10008700 <gpio_init+0x50>)
100086b4:	0019      	movs	r1, r3
100086b6:	3140      	adds	r1, #64	; 0x40
100086b8:	001a      	movs	r2, r3
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100086ba:	2000      	movs	r0, #0
100086bc:	6050      	str	r0, [r2, #4]
100086be:	3204      	adds	r2, #4
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
100086c0:	428a      	cmp	r2, r1
100086c2:	d1fb      	bne.n	100086bc <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100086c4:	4a0e      	ldr	r2, [pc, #56]	; (10008700 <gpio_init+0x50>)
100086c6:	2000      	movs	r0, #0
100086c8:	2446      	movs	r4, #70	; 0x46
100086ca:	5310      	strh	r0, [r2, r4]
		_gpio_instances[i].callback_reg_mask = 0;
100086cc:	3c02      	subs	r4, #2
100086ce:	5310      	strh	r0, [r2, r4]
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100086d0:	2200      	movs	r2, #0
100086d2:	64da      	str	r2, [r3, #76]	; 0x4c
100086d4:	3304      	adds	r3, #4
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
100086d6:	428b      	cmp	r3, r1
100086d8:	d1fb      	bne.n	100086d2 <gpio_init+0x22>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100086da:	4b09      	ldr	r3, [pc, #36]	; (10008700 <gpio_init+0x50>)
100086dc:	2200      	movs	r2, #0
100086de:	218e      	movs	r1, #142	; 0x8e
100086e0:	525a      	strh	r2, [r3, r1]
		_gpio_instances[i].callback_reg_mask = 0;
100086e2:	3902      	subs	r1, #2
100086e4:	525a      	strh	r2, [r3, r1]
	}
	_gpio_instances[0].hw = (void *)GPIO0;
100086e6:	4a07      	ldr	r2, [pc, #28]	; (10008704 <gpio_init+0x54>)
100086e8:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
100086ea:	4a07      	ldr	r2, [pc, #28]	; (10008708 <gpio_init+0x58>)
100086ec:	649a      	str	r2, [r3, #72]	; 0x48
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
100086ee:	4907      	ldr	r1, [pc, #28]	; (1000870c <gpio_init+0x5c>)
100086f0:	2027      	movs	r0, #39	; 0x27
100086f2:	4c07      	ldr	r4, [pc, #28]	; (10008710 <gpio_init+0x60>)
100086f4:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
100086f6:	4907      	ldr	r1, [pc, #28]	; (10008714 <gpio_init+0x64>)
100086f8:	2028      	movs	r0, #40	; 0x28
100086fa:	47a0      	blx	r4
}
100086fc:	bd10      	pop	{r4, pc}
100086fe:	46c0      	nop			; (mov r8, r8)
10008700:	1001268c 	.word	0x1001268c
10008704:	40010000 	.word	0x40010000
10008708:	40011000 	.word	0x40011000
1000870c:	10008171 	.word	0x10008171
10008710:	10008f6d 	.word	0x10008f6d
10008714:	100081d9 	.word	0x100081d9

10008718 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008718:	2801      	cmp	r0, #1
1000871a:	d00d      	beq.n	10008738 <system_clock_config+0x20>
1000871c:	2800      	cmp	r0, #0
1000871e:	d002      	beq.n	10008726 <system_clock_config+0xe>
10008720:	2802      	cmp	r0, #2
10008722:	d01c      	beq.n	1000875e <system_clock_config+0x46>
10008724:	e02e      	b.n	10008784 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008726:	4a18      	ldr	r2, [pc, #96]	; (10008788 <system_clock_config+0x70>)
10008728:	6990      	ldr	r0, [r2, #24]
1000872a:	230c      	movs	r3, #12
1000872c:	4303      	orrs	r3, r0
1000872e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008730:	4a16      	ldr	r2, [pc, #88]	; (1000878c <system_clock_config+0x74>)
10008732:	4b17      	ldr	r3, [pc, #92]	; (10008790 <system_clock_config+0x78>)
10008734:	601a      	str	r2, [r3, #0]
			break;
10008736:	e01a      	b.n	1000876e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008738:	4b13      	ldr	r3, [pc, #76]	; (10008788 <system_clock_config+0x70>)
1000873a:	6998      	ldr	r0, [r3, #24]
1000873c:	2208      	movs	r2, #8
1000873e:	4302      	orrs	r2, r0
10008740:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008742:	699a      	ldr	r2, [r3, #24]
10008744:	2004      	movs	r0, #4
10008746:	4382      	bics	r2, r0
10008748:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000874a:	4a12      	ldr	r2, [pc, #72]	; (10008794 <system_clock_config+0x7c>)
1000874c:	6853      	ldr	r3, [r2, #4]
1000874e:	2080      	movs	r0, #128	; 0x80
10008750:	0300      	lsls	r0, r0, #12
10008752:	4303      	orrs	r3, r0
10008754:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008756:	4a10      	ldr	r2, [pc, #64]	; (10008798 <system_clock_config+0x80>)
10008758:	4b0d      	ldr	r3, [pc, #52]	; (10008790 <system_clock_config+0x78>)
1000875a:	601a      	str	r2, [r3, #0]
			break;
1000875c:	e007      	b.n	1000876e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000875e:	4a0a      	ldr	r2, [pc, #40]	; (10008788 <system_clock_config+0x70>)
10008760:	6993      	ldr	r3, [r2, #24]
10008762:	200c      	movs	r0, #12
10008764:	4383      	bics	r3, r0
10008766:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008768:	4a08      	ldr	r2, [pc, #32]	; (1000878c <system_clock_config+0x74>)
1000876a:	4b09      	ldr	r3, [pc, #36]	; (10008790 <system_clock_config+0x78>)
1000876c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000876e:	4b06      	ldr	r3, [pc, #24]	; (10008788 <system_clock_config+0x70>)
10008770:	699a      	ldr	r2, [r3, #24]
10008772:	2003      	movs	r0, #3
10008774:	4382      	bics	r2, r0
10008776:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008778:	699a      	ldr	r2, [r3, #24]
1000877a:	4001      	ands	r1, r0
1000877c:	4311      	orrs	r1, r2
1000877e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008780:	2000      	movs	r0, #0
10008782:	e000      	b.n	10008786 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008784:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008786:	4770      	bx	lr
10008788:	4000b000 	.word	0x4000b000
1000878c:	018cba80 	.word	0x018cba80
10008790:	1001271c 	.word	0x1001271c
10008794:	4000f000 	.word	0x4000f000
10008798:	001e8480 	.word	0x001e8480

1000879c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000879c:	4b01      	ldr	r3, [pc, #4]	; (100087a4 <system_clock_get_value+0x8>)
1000879e:	6818      	ldr	r0, [r3, #0]
}
100087a0:	4770      	bx	lr
100087a2:	46c0      	nop			; (mov r8, r8)
100087a4:	1001271c 	.word	0x1001271c

100087a8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100087a8:	b500      	push	{lr}
	switch (peripheral) {
100087aa:	2835      	cmp	r0, #53	; 0x35
100087ac:	d900      	bls.n	100087b0 <system_clock_peripheral_enable+0x8>
100087ae:	e1a2      	b.n	10008af6 <system_clock_peripheral_enable+0x34e>
100087b0:	0080      	lsls	r0, r0, #2
100087b2:	4bd2      	ldr	r3, [pc, #840]	; (10008afc <system_clock_peripheral_enable+0x354>)
100087b4:	581b      	ldr	r3, [r3, r0]
100087b6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087b8:	4ad1      	ldr	r2, [pc, #836]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087ba:	68d1      	ldr	r1, [r2, #12]
100087bc:	2302      	movs	r3, #2
100087be:	430b      	orrs	r3, r1
100087c0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087c2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
100087c4:	e198      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087c6:	4ace      	ldr	r2, [pc, #824]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087c8:	68d1      	ldr	r1, [r2, #12]
100087ca:	2304      	movs	r3, #4
100087cc:	430b      	orrs	r3, r1
100087ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
100087d2:	e191      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087d4:	4aca      	ldr	r2, [pc, #808]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087d6:	68d1      	ldr	r1, [r2, #12]
100087d8:	2308      	movs	r3, #8
100087da:	430b      	orrs	r3, r1
100087dc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
100087e0:	e18a      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087e2:	4ac7      	ldr	r2, [pc, #796]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087e4:	68d1      	ldr	r1, [r2, #12]
100087e6:	2310      	movs	r3, #16
100087e8:	430b      	orrs	r3, r1
100087ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
100087ee:	e183      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087f0:	4ac3      	ldr	r2, [pc, #780]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100087f2:	68d1      	ldr	r1, [r2, #12]
100087f4:	2320      	movs	r3, #32
100087f6:	430b      	orrs	r3, r1
100087f8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
100087fc:	e17c      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100087fe:	4ac0      	ldr	r2, [pc, #768]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008800:	68d1      	ldr	r1, [r2, #12]
10008802:	2380      	movs	r3, #128	; 0x80
10008804:	430b      	orrs	r3, r1
10008806:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000880a:	e175      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000880c:	4abc      	ldr	r2, [pc, #752]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000880e:	68d3      	ldr	r3, [r2, #12]
10008810:	2180      	movs	r1, #128	; 0x80
10008812:	0049      	lsls	r1, r1, #1
10008814:	430b      	orrs	r3, r1
10008816:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000881a:	e16d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000881c:	4ab8      	ldr	r2, [pc, #736]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000881e:	68d3      	ldr	r3, [r2, #12]
10008820:	2180      	movs	r1, #128	; 0x80
10008822:	0109      	lsls	r1, r1, #4
10008824:	430b      	orrs	r3, r1
10008826:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000882a:	e165      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000882c:	4ab4      	ldr	r2, [pc, #720]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000882e:	68d3      	ldr	r3, [r2, #12]
10008830:	2180      	movs	r1, #128	; 0x80
10008832:	0149      	lsls	r1, r1, #5
10008834:	430b      	orrs	r3, r1
10008836:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000883a:	e15d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000883c:	4ab0      	ldr	r2, [pc, #704]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000883e:	68d3      	ldr	r3, [r2, #12]
10008840:	2180      	movs	r1, #128	; 0x80
10008842:	0189      	lsls	r1, r1, #6
10008844:	430b      	orrs	r3, r1
10008846:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000884a:	e155      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000884c:	4aac      	ldr	r2, [pc, #688]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000884e:	68d3      	ldr	r3, [r2, #12]
10008850:	2180      	movs	r1, #128	; 0x80
10008852:	01c9      	lsls	r1, r1, #7
10008854:	430b      	orrs	r3, r1
10008856:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000885a:	e14d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000885c:	4aa8      	ldr	r2, [pc, #672]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000885e:	68d3      	ldr	r3, [r2, #12]
10008860:	2180      	movs	r1, #128	; 0x80
10008862:	0209      	lsls	r1, r1, #8
10008864:	430b      	orrs	r3, r1
10008866:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000886a:	e145      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000886c:	4aa4      	ldr	r2, [pc, #656]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000886e:	68d3      	ldr	r3, [r2, #12]
10008870:	2180      	movs	r1, #128	; 0x80
10008872:	0249      	lsls	r1, r1, #9
10008874:	430b      	orrs	r3, r1
10008876:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008878:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000887a:	e13d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000887c:	4aa0      	ldr	r2, [pc, #640]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000887e:	68d3      	ldr	r3, [r2, #12]
10008880:	2180      	movs	r1, #128	; 0x80
10008882:	0289      	lsls	r1, r1, #10
10008884:	430b      	orrs	r3, r1
10008886:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008888:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000888a:	e135      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000888c:	4a9c      	ldr	r2, [pc, #624]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000888e:	68d3      	ldr	r3, [r2, #12]
10008890:	2180      	movs	r1, #128	; 0x80
10008892:	02c9      	lsls	r1, r1, #11
10008894:	430b      	orrs	r3, r1
10008896:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000889a:	e12d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000889c:	4a98      	ldr	r2, [pc, #608]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000889e:	68d3      	ldr	r3, [r2, #12]
100088a0:	2180      	movs	r1, #128	; 0x80
100088a2:	0309      	lsls	r1, r1, #12
100088a4:	430b      	orrs	r3, r1
100088a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100088aa:	e125      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088ac:	4a94      	ldr	r2, [pc, #592]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088ae:	68d3      	ldr	r3, [r2, #12]
100088b0:	2180      	movs	r1, #128	; 0x80
100088b2:	0349      	lsls	r1, r1, #13
100088b4:	430b      	orrs	r3, r1
100088b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100088ba:	e11d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088bc:	4a90      	ldr	r2, [pc, #576]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088be:	68d3      	ldr	r3, [r2, #12]
100088c0:	2180      	movs	r1, #128	; 0x80
100088c2:	0389      	lsls	r1, r1, #14
100088c4:	430b      	orrs	r3, r1
100088c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100088ca:	e115      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088cc:	4a8c      	ldr	r2, [pc, #560]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088ce:	68d3      	ldr	r3, [r2, #12]
100088d0:	2180      	movs	r1, #128	; 0x80
100088d2:	03c9      	lsls	r1, r1, #15
100088d4:	430b      	orrs	r3, r1
100088d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100088da:	e10d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088dc:	4a88      	ldr	r2, [pc, #544]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088de:	68d3      	ldr	r3, [r2, #12]
100088e0:	2180      	movs	r1, #128	; 0x80
100088e2:	0409      	lsls	r1, r1, #16
100088e4:	430b      	orrs	r3, r1
100088e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100088ea:	e105      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088ec:	4a84      	ldr	r2, [pc, #528]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088ee:	68d3      	ldr	r3, [r2, #12]
100088f0:	2180      	movs	r1, #128	; 0x80
100088f2:	0449      	lsls	r1, r1, #17
100088f4:	430b      	orrs	r3, r1
100088f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100088fa:	e0fd      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088fc:	4a80      	ldr	r2, [pc, #512]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100088fe:	68d3      	ldr	r3, [r2, #12]
10008900:	2180      	movs	r1, #128	; 0x80
10008902:	0489      	lsls	r1, r1, #18
10008904:	430b      	orrs	r3, r1
10008906:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008908:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000890a:	e0f5      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000890c:	4a7c      	ldr	r2, [pc, #496]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000890e:	68d3      	ldr	r3, [r2, #12]
10008910:	2180      	movs	r1, #128	; 0x80
10008912:	04c9      	lsls	r1, r1, #19
10008914:	430b      	orrs	r3, r1
10008916:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008918:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000891a:	e0ed      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000891c:	4a78      	ldr	r2, [pc, #480]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000891e:	68d3      	ldr	r3, [r2, #12]
10008920:	2180      	movs	r1, #128	; 0x80
10008922:	0509      	lsls	r1, r1, #20
10008924:	430b      	orrs	r3, r1
10008926:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008928:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000892a:	e0e5      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000892c:	4a74      	ldr	r2, [pc, #464]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000892e:	68d3      	ldr	r3, [r2, #12]
10008930:	2180      	movs	r1, #128	; 0x80
10008932:	0549      	lsls	r1, r1, #21
10008934:	430b      	orrs	r3, r1
10008936:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000893a:	e0dd      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000893c:	4a70      	ldr	r2, [pc, #448]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000893e:	68d3      	ldr	r3, [r2, #12]
10008940:	2180      	movs	r1, #128	; 0x80
10008942:	0589      	lsls	r1, r1, #22
10008944:	430b      	orrs	r3, r1
10008946:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008948:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000894a:	e0d5      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000894c:	4a6c      	ldr	r2, [pc, #432]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000894e:	68d3      	ldr	r3, [r2, #12]
10008950:	2180      	movs	r1, #128	; 0x80
10008952:	05c9      	lsls	r1, r1, #23
10008954:	430b      	orrs	r3, r1
10008956:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000895a:	e0cd      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000895c:	4a68      	ldr	r2, [pc, #416]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000895e:	6911      	ldr	r1, [r2, #16]
10008960:	2301      	movs	r3, #1
10008962:	430b      	orrs	r3, r1
10008964:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008966:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008968:	e0c6      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000896a:	4a65      	ldr	r2, [pc, #404]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000896c:	6911      	ldr	r1, [r2, #16]
1000896e:	2302      	movs	r3, #2
10008970:	430b      	orrs	r3, r1
10008972:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008974:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008976:	e0bf      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008978:	4a61      	ldr	r2, [pc, #388]	; (10008b00 <system_clock_peripheral_enable+0x358>)
1000897a:	6911      	ldr	r1, [r2, #16]
1000897c:	2304      	movs	r3, #4
1000897e:	430b      	orrs	r3, r1
10008980:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008982:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008984:	e0b8      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008986:	4a5e      	ldr	r2, [pc, #376]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008988:	6911      	ldr	r1, [r2, #16]
1000898a:	2308      	movs	r3, #8
1000898c:	430b      	orrs	r3, r1
1000898e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008990:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008992:	e0b1      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008994:	4a5a      	ldr	r2, [pc, #360]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008996:	6911      	ldr	r1, [r2, #16]
10008998:	2310      	movs	r3, #16
1000899a:	430b      	orrs	r3, r1
1000899c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000899e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
100089a0:	e0aa      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089a2:	4a57      	ldr	r2, [pc, #348]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089a4:	6911      	ldr	r1, [r2, #16]
100089a6:	2320      	movs	r3, #32
100089a8:	430b      	orrs	r3, r1
100089aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
100089ae:	e0a3      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089b0:	4a53      	ldr	r2, [pc, #332]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089b2:	6911      	ldr	r1, [r2, #16]
100089b4:	2340      	movs	r3, #64	; 0x40
100089b6:	430b      	orrs	r3, r1
100089b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
100089bc:	e09c      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089be:	4a50      	ldr	r2, [pc, #320]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089c0:	6911      	ldr	r1, [r2, #16]
100089c2:	2380      	movs	r3, #128	; 0x80
100089c4:	430b      	orrs	r3, r1
100089c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
100089ca:	e095      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089cc:	4a4c      	ldr	r2, [pc, #304]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089ce:	6913      	ldr	r3, [r2, #16]
100089d0:	2180      	movs	r1, #128	; 0x80
100089d2:	0049      	lsls	r1, r1, #1
100089d4:	430b      	orrs	r3, r1
100089d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
100089da:	e08d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089dc:	4a48      	ldr	r2, [pc, #288]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089de:	6913      	ldr	r3, [r2, #16]
100089e0:	2180      	movs	r1, #128	; 0x80
100089e2:	0089      	lsls	r1, r1, #2
100089e4:	430b      	orrs	r3, r1
100089e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
100089ea:	e085      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089ec:	4a44      	ldr	r2, [pc, #272]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089ee:	6913      	ldr	r3, [r2, #16]
100089f0:	2180      	movs	r1, #128	; 0x80
100089f2:	00c9      	lsls	r1, r1, #3
100089f4:	430b      	orrs	r3, r1
100089f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
100089fa:	e07d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100089fc:	4a40      	ldr	r2, [pc, #256]	; (10008b00 <system_clock_peripheral_enable+0x358>)
100089fe:	6913      	ldr	r3, [r2, #16]
10008a00:	2180      	movs	r1, #128	; 0x80
10008a02:	0109      	lsls	r1, r1, #4
10008a04:	430b      	orrs	r3, r1
10008a06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008a0a:	e075      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a0c:	4a3c      	ldr	r2, [pc, #240]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a0e:	6913      	ldr	r3, [r2, #16]
10008a10:	2180      	movs	r1, #128	; 0x80
10008a12:	0149      	lsls	r1, r1, #5
10008a14:	430b      	orrs	r3, r1
10008a16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008a1a:	e06d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a1c:	4a38      	ldr	r2, [pc, #224]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a1e:	6913      	ldr	r3, [r2, #16]
10008a20:	2180      	movs	r1, #128	; 0x80
10008a22:	0189      	lsls	r1, r1, #6
10008a24:	430b      	orrs	r3, r1
10008a26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008a2a:	e065      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a2c:	4a34      	ldr	r2, [pc, #208]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a2e:	6913      	ldr	r3, [r2, #16]
10008a30:	2180      	movs	r1, #128	; 0x80
10008a32:	01c9      	lsls	r1, r1, #7
10008a34:	430b      	orrs	r3, r1
10008a36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008a3a:	e05d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a3c:	4a30      	ldr	r2, [pc, #192]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a3e:	6913      	ldr	r3, [r2, #16]
10008a40:	2180      	movs	r1, #128	; 0x80
10008a42:	0209      	lsls	r1, r1, #8
10008a44:	430b      	orrs	r3, r1
10008a46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008a4a:	e055      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a4c:	4a2c      	ldr	r2, [pc, #176]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a4e:	6913      	ldr	r3, [r2, #16]
10008a50:	2180      	movs	r1, #128	; 0x80
10008a52:	0249      	lsls	r1, r1, #9
10008a54:	430b      	orrs	r3, r1
10008a56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008a5a:	e04d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a5c:	4a28      	ldr	r2, [pc, #160]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a5e:	6913      	ldr	r3, [r2, #16]
10008a60:	2180      	movs	r1, #128	; 0x80
10008a62:	0289      	lsls	r1, r1, #10
10008a64:	430b      	orrs	r3, r1
10008a66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008a6a:	e045      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a6c:	4a24      	ldr	r2, [pc, #144]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a6e:	6913      	ldr	r3, [r2, #16]
10008a70:	2180      	movs	r1, #128	; 0x80
10008a72:	02c9      	lsls	r1, r1, #11
10008a74:	430b      	orrs	r3, r1
10008a76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008a7a:	e03d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a7c:	4a20      	ldr	r2, [pc, #128]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a7e:	6913      	ldr	r3, [r2, #16]
10008a80:	2180      	movs	r1, #128	; 0x80
10008a82:	0309      	lsls	r1, r1, #12
10008a84:	430b      	orrs	r3, r1
10008a86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008a8a:	e035      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a8c:	4a1c      	ldr	r2, [pc, #112]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a8e:	6913      	ldr	r3, [r2, #16]
10008a90:	2180      	movs	r1, #128	; 0x80
10008a92:	0349      	lsls	r1, r1, #13
10008a94:	430b      	orrs	r3, r1
10008a96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008a9a:	e02d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a9c:	4a18      	ldr	r2, [pc, #96]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008a9e:	6913      	ldr	r3, [r2, #16]
10008aa0:	2180      	movs	r1, #128	; 0x80
10008aa2:	0389      	lsls	r1, r1, #14
10008aa4:	430b      	orrs	r3, r1
10008aa6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008aaa:	e025      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aac:	4a14      	ldr	r2, [pc, #80]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008aae:	6913      	ldr	r3, [r2, #16]
10008ab0:	2180      	movs	r1, #128	; 0x80
10008ab2:	03c9      	lsls	r1, r1, #15
10008ab4:	430b      	orrs	r3, r1
10008ab6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ab8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008aba:	e01d      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008abc:	4a10      	ldr	r2, [pc, #64]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008abe:	6913      	ldr	r3, [r2, #16]
10008ac0:	2180      	movs	r1, #128	; 0x80
10008ac2:	0409      	lsls	r1, r1, #16
10008ac4:	430b      	orrs	r3, r1
10008ac6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ac8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008aca:	e015      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008acc:	4a0c      	ldr	r2, [pc, #48]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008ace:	7d11      	ldrb	r1, [r2, #20]
10008ad0:	2301      	movs	r3, #1
10008ad2:	430b      	orrs	r3, r1
10008ad4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ad6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008ad8:	e00e      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008ada:	4a09      	ldr	r2, [pc, #36]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008adc:	7d11      	ldrb	r1, [r2, #20]
10008ade:	2302      	movs	r3, #2
10008ae0:	430b      	orrs	r3, r1
10008ae2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008ae6:	e007      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008ae8:	4a05      	ldr	r2, [pc, #20]	; (10008b00 <system_clock_peripheral_enable+0x358>)
10008aea:	7d11      	ldrb	r1, [r2, #20]
10008aec:	2304      	movs	r3, #4
10008aee:	430b      	orrs	r3, r1
10008af0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008af4:	e000      	b.n	10008af8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008af6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008af8:	bd00      	pop	{pc}
10008afa:	46c0      	nop			; (mov r8, r8)
10008afc:	10010b7c 	.word	0x10010b7c
10008b00:	4000b000 	.word	0x4000b000

10008b04 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008b04:	b500      	push	{lr}
	switch (peripheral) {
10008b06:	2843      	cmp	r0, #67	; 0x43
10008b08:	d900      	bls.n	10008b0c <system_peripheral_reset+0x8>
10008b0a:	e223      	b.n	10008f54 <system_peripheral_reset+0x450>
10008b0c:	0080      	lsls	r0, r0, #2
10008b0e:	4be0      	ldr	r3, [pc, #896]	; (10008e90 <system_peripheral_reset+0x38c>)
10008b10:	581b      	ldr	r3, [r3, r0]
10008b12:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b14:	4bdf      	ldr	r3, [pc, #892]	; (10008e94 <system_peripheral_reset+0x390>)
10008b16:	6859      	ldr	r1, [r3, #4]
10008b18:	2202      	movs	r2, #2
10008b1a:	4391      	bics	r1, r2
10008b1c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b1e:	6859      	ldr	r1, [r3, #4]
10008b20:	430a      	orrs	r2, r1
10008b22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b24:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008b26:	e216      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b28:	4bda      	ldr	r3, [pc, #872]	; (10008e94 <system_peripheral_reset+0x390>)
10008b2a:	6859      	ldr	r1, [r3, #4]
10008b2c:	2204      	movs	r2, #4
10008b2e:	4391      	bics	r1, r2
10008b30:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b32:	6859      	ldr	r1, [r3, #4]
10008b34:	430a      	orrs	r2, r1
10008b36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10008b3a:	e20c      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b3c:	4bd5      	ldr	r3, [pc, #852]	; (10008e94 <system_peripheral_reset+0x390>)
10008b3e:	6859      	ldr	r1, [r3, #4]
10008b40:	2208      	movs	r2, #8
10008b42:	4391      	bics	r1, r2
10008b44:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b46:	6859      	ldr	r1, [r3, #4]
10008b48:	430a      	orrs	r2, r1
10008b4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b4c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10008b4e:	e202      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b50:	4bd0      	ldr	r3, [pc, #832]	; (10008e94 <system_peripheral_reset+0x390>)
10008b52:	6859      	ldr	r1, [r3, #4]
10008b54:	2210      	movs	r2, #16
10008b56:	4391      	bics	r1, r2
10008b58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b5a:	6859      	ldr	r1, [r3, #4]
10008b5c:	430a      	orrs	r2, r1
10008b5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10008b62:	e1f8      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b64:	4bcb      	ldr	r3, [pc, #812]	; (10008e94 <system_peripheral_reset+0x390>)
10008b66:	6859      	ldr	r1, [r3, #4]
10008b68:	2220      	movs	r2, #32
10008b6a:	4391      	bics	r1, r2
10008b6c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b6e:	6859      	ldr	r1, [r3, #4]
10008b70:	430a      	orrs	r2, r1
10008b72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b74:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10008b76:	e1ee      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b78:	4bc6      	ldr	r3, [pc, #792]	; (10008e94 <system_peripheral_reset+0x390>)
10008b7a:	6859      	ldr	r1, [r3, #4]
10008b7c:	2240      	movs	r2, #64	; 0x40
10008b7e:	4391      	bics	r1, r2
10008b80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b82:	6859      	ldr	r1, [r3, #4]
10008b84:	430a      	orrs	r2, r1
10008b86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b88:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10008b8a:	e1e4      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b8c:	4bc1      	ldr	r3, [pc, #772]	; (10008e94 <system_peripheral_reset+0x390>)
10008b8e:	6859      	ldr	r1, [r3, #4]
10008b90:	2280      	movs	r2, #128	; 0x80
10008b92:	4391      	bics	r1, r2
10008b94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b96:	6859      	ldr	r1, [r3, #4]
10008b98:	430a      	orrs	r2, r1
10008b9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10008b9e:	e1da      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ba0:	4bbc      	ldr	r3, [pc, #752]	; (10008e94 <system_peripheral_reset+0x390>)
10008ba2:	6859      	ldr	r1, [r3, #4]
10008ba4:	4abc      	ldr	r2, [pc, #752]	; (10008e98 <system_peripheral_reset+0x394>)
10008ba6:	400a      	ands	r2, r1
10008ba8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008baa:	685a      	ldr	r2, [r3, #4]
10008bac:	2180      	movs	r1, #128	; 0x80
10008bae:	0049      	lsls	r1, r1, #1
10008bb0:	430a      	orrs	r2, r1
10008bb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bb4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10008bb6:	e1ce      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008bb8:	4bb6      	ldr	r3, [pc, #728]	; (10008e94 <system_peripheral_reset+0x390>)
10008bba:	6859      	ldr	r1, [r3, #4]
10008bbc:	4ab7      	ldr	r2, [pc, #732]	; (10008e9c <system_peripheral_reset+0x398>)
10008bbe:	400a      	ands	r2, r1
10008bc0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bc2:	685a      	ldr	r2, [r3, #4]
10008bc4:	2180      	movs	r1, #128	; 0x80
10008bc6:	0089      	lsls	r1, r1, #2
10008bc8:	430a      	orrs	r2, r1
10008bca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10008bce:	e1c2      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008bd0:	4bb0      	ldr	r3, [pc, #704]	; (10008e94 <system_peripheral_reset+0x390>)
10008bd2:	6859      	ldr	r1, [r3, #4]
10008bd4:	4ab2      	ldr	r2, [pc, #712]	; (10008ea0 <system_peripheral_reset+0x39c>)
10008bd6:	400a      	ands	r2, r1
10008bd8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bda:	685a      	ldr	r2, [r3, #4]
10008bdc:	2180      	movs	r1, #128	; 0x80
10008bde:	00c9      	lsls	r1, r1, #3
10008be0:	430a      	orrs	r2, r1
10008be2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008be4:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008be6:	e1b6      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008be8:	4baa      	ldr	r3, [pc, #680]	; (10008e94 <system_peripheral_reset+0x390>)
10008bea:	6859      	ldr	r1, [r3, #4]
10008bec:	4aad      	ldr	r2, [pc, #692]	; (10008ea4 <system_peripheral_reset+0x3a0>)
10008bee:	400a      	ands	r2, r1
10008bf0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bf2:	685a      	ldr	r2, [r3, #4]
10008bf4:	2180      	movs	r1, #128	; 0x80
10008bf6:	0109      	lsls	r1, r1, #4
10008bf8:	430a      	orrs	r2, r1
10008bfa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfc:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10008bfe:	e1aa      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c00:	4ba4      	ldr	r3, [pc, #656]	; (10008e94 <system_peripheral_reset+0x390>)
10008c02:	6859      	ldr	r1, [r3, #4]
10008c04:	4aa8      	ldr	r2, [pc, #672]	; (10008ea8 <system_peripheral_reset+0x3a4>)
10008c06:	400a      	ands	r2, r1
10008c08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c0a:	685a      	ldr	r2, [r3, #4]
10008c0c:	2180      	movs	r1, #128	; 0x80
10008c0e:	0149      	lsls	r1, r1, #5
10008c10:	430a      	orrs	r2, r1
10008c12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c14:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10008c16:	e19e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c18:	4b9e      	ldr	r3, [pc, #632]	; (10008e94 <system_peripheral_reset+0x390>)
10008c1a:	6859      	ldr	r1, [r3, #4]
10008c1c:	4aa3      	ldr	r2, [pc, #652]	; (10008eac <system_peripheral_reset+0x3a8>)
10008c1e:	400a      	ands	r2, r1
10008c20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c22:	685a      	ldr	r2, [r3, #4]
10008c24:	2180      	movs	r1, #128	; 0x80
10008c26:	0189      	lsls	r1, r1, #6
10008c28:	430a      	orrs	r2, r1
10008c2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c2c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10008c2e:	e192      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c30:	4b98      	ldr	r3, [pc, #608]	; (10008e94 <system_peripheral_reset+0x390>)
10008c32:	6859      	ldr	r1, [r3, #4]
10008c34:	4a9e      	ldr	r2, [pc, #632]	; (10008eb0 <system_peripheral_reset+0x3ac>)
10008c36:	400a      	ands	r2, r1
10008c38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c3a:	685a      	ldr	r2, [r3, #4]
10008c3c:	2180      	movs	r1, #128	; 0x80
10008c3e:	01c9      	lsls	r1, r1, #7
10008c40:	430a      	orrs	r2, r1
10008c42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c44:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10008c46:	e186      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c48:	4b92      	ldr	r3, [pc, #584]	; (10008e94 <system_peripheral_reset+0x390>)
10008c4a:	6859      	ldr	r1, [r3, #4]
10008c4c:	4a99      	ldr	r2, [pc, #612]	; (10008eb4 <system_peripheral_reset+0x3b0>)
10008c4e:	400a      	ands	r2, r1
10008c50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c52:	685a      	ldr	r2, [r3, #4]
10008c54:	2180      	movs	r1, #128	; 0x80
10008c56:	0209      	lsls	r1, r1, #8
10008c58:	430a      	orrs	r2, r1
10008c5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c5c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
10008c5e:	e17a      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c60:	4b8c      	ldr	r3, [pc, #560]	; (10008e94 <system_peripheral_reset+0x390>)
10008c62:	6859      	ldr	r1, [r3, #4]
10008c64:	4a94      	ldr	r2, [pc, #592]	; (10008eb8 <system_peripheral_reset+0x3b4>)
10008c66:	400a      	ands	r2, r1
10008c68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c6a:	685a      	ldr	r2, [r3, #4]
10008c6c:	2180      	movs	r1, #128	; 0x80
10008c6e:	0249      	lsls	r1, r1, #9
10008c70:	430a      	orrs	r2, r1
10008c72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c74:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10008c76:	e16e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c78:	4b86      	ldr	r3, [pc, #536]	; (10008e94 <system_peripheral_reset+0x390>)
10008c7a:	6859      	ldr	r1, [r3, #4]
10008c7c:	4a8f      	ldr	r2, [pc, #572]	; (10008ebc <system_peripheral_reset+0x3b8>)
10008c7e:	400a      	ands	r2, r1
10008c80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c82:	685a      	ldr	r2, [r3, #4]
10008c84:	2180      	movs	r1, #128	; 0x80
10008c86:	0289      	lsls	r1, r1, #10
10008c88:	430a      	orrs	r2, r1
10008c8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
10008c8e:	e162      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c90:	4b80      	ldr	r3, [pc, #512]	; (10008e94 <system_peripheral_reset+0x390>)
10008c92:	6859      	ldr	r1, [r3, #4]
10008c94:	4a8a      	ldr	r2, [pc, #552]	; (10008ec0 <system_peripheral_reset+0x3bc>)
10008c96:	400a      	ands	r2, r1
10008c98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c9a:	685a      	ldr	r2, [r3, #4]
10008c9c:	2180      	movs	r1, #128	; 0x80
10008c9e:	02c9      	lsls	r1, r1, #11
10008ca0:	430a      	orrs	r2, r1
10008ca2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ca4:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008ca6:	e156      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ca8:	4b7a      	ldr	r3, [pc, #488]	; (10008e94 <system_peripheral_reset+0x390>)
10008caa:	6859      	ldr	r1, [r3, #4]
10008cac:	4a85      	ldr	r2, [pc, #532]	; (10008ec4 <system_peripheral_reset+0x3c0>)
10008cae:	400a      	ands	r2, r1
10008cb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cb2:	685a      	ldr	r2, [r3, #4]
10008cb4:	2180      	movs	r1, #128	; 0x80
10008cb6:	0309      	lsls	r1, r1, #12
10008cb8:	430a      	orrs	r2, r1
10008cba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cbc:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008cbe:	e14a      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cc0:	4b74      	ldr	r3, [pc, #464]	; (10008e94 <system_peripheral_reset+0x390>)
10008cc2:	6859      	ldr	r1, [r3, #4]
10008cc4:	4a80      	ldr	r2, [pc, #512]	; (10008ec8 <system_peripheral_reset+0x3c4>)
10008cc6:	400a      	ands	r2, r1
10008cc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cca:	685a      	ldr	r2, [r3, #4]
10008ccc:	2180      	movs	r1, #128	; 0x80
10008cce:	0349      	lsls	r1, r1, #13
10008cd0:	430a      	orrs	r2, r1
10008cd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008cd6:	e13e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cd8:	4b6e      	ldr	r3, [pc, #440]	; (10008e94 <system_peripheral_reset+0x390>)
10008cda:	6859      	ldr	r1, [r3, #4]
10008cdc:	4a7b      	ldr	r2, [pc, #492]	; (10008ecc <system_peripheral_reset+0x3c8>)
10008cde:	400a      	ands	r2, r1
10008ce0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ce2:	685a      	ldr	r2, [r3, #4]
10008ce4:	2180      	movs	r1, #128	; 0x80
10008ce6:	0389      	lsls	r1, r1, #14
10008ce8:	430a      	orrs	r2, r1
10008cea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cec:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008cee:	e132      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cf0:	4b68      	ldr	r3, [pc, #416]	; (10008e94 <system_peripheral_reset+0x390>)
10008cf2:	6859      	ldr	r1, [r3, #4]
10008cf4:	4a76      	ldr	r2, [pc, #472]	; (10008ed0 <system_peripheral_reset+0x3cc>)
10008cf6:	400a      	ands	r2, r1
10008cf8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cfa:	685a      	ldr	r2, [r3, #4]
10008cfc:	2180      	movs	r1, #128	; 0x80
10008cfe:	03c9      	lsls	r1, r1, #15
10008d00:	430a      	orrs	r2, r1
10008d02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d04:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008d06:	e126      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d08:	4b62      	ldr	r3, [pc, #392]	; (10008e94 <system_peripheral_reset+0x390>)
10008d0a:	6859      	ldr	r1, [r3, #4]
10008d0c:	4a71      	ldr	r2, [pc, #452]	; (10008ed4 <system_peripheral_reset+0x3d0>)
10008d0e:	400a      	ands	r2, r1
10008d10:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d12:	685a      	ldr	r2, [r3, #4]
10008d14:	2180      	movs	r1, #128	; 0x80
10008d16:	0409      	lsls	r1, r1, #16
10008d18:	430a      	orrs	r2, r1
10008d1a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d1c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008d1e:	e11a      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d20:	4b5c      	ldr	r3, [pc, #368]	; (10008e94 <system_peripheral_reset+0x390>)
10008d22:	6859      	ldr	r1, [r3, #4]
10008d24:	4a6c      	ldr	r2, [pc, #432]	; (10008ed8 <system_peripheral_reset+0x3d4>)
10008d26:	400a      	ands	r2, r1
10008d28:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d2a:	685a      	ldr	r2, [r3, #4]
10008d2c:	2180      	movs	r1, #128	; 0x80
10008d2e:	0449      	lsls	r1, r1, #17
10008d30:	430a      	orrs	r2, r1
10008d32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d34:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008d36:	e10e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d38:	4b56      	ldr	r3, [pc, #344]	; (10008e94 <system_peripheral_reset+0x390>)
10008d3a:	6859      	ldr	r1, [r3, #4]
10008d3c:	4a67      	ldr	r2, [pc, #412]	; (10008edc <system_peripheral_reset+0x3d8>)
10008d3e:	400a      	ands	r2, r1
10008d40:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d42:	685a      	ldr	r2, [r3, #4]
10008d44:	2180      	movs	r1, #128	; 0x80
10008d46:	0489      	lsls	r1, r1, #18
10008d48:	430a      	orrs	r2, r1
10008d4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d4c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10008d4e:	e102      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d50:	4b50      	ldr	r3, [pc, #320]	; (10008e94 <system_peripheral_reset+0x390>)
10008d52:	6859      	ldr	r1, [r3, #4]
10008d54:	4a62      	ldr	r2, [pc, #392]	; (10008ee0 <system_peripheral_reset+0x3dc>)
10008d56:	400a      	ands	r2, r1
10008d58:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d5a:	685a      	ldr	r2, [r3, #4]
10008d5c:	2180      	movs	r1, #128	; 0x80
10008d5e:	04c9      	lsls	r1, r1, #19
10008d60:	430a      	orrs	r2, r1
10008d62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d64:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10008d66:	e0f6      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d68:	4b4a      	ldr	r3, [pc, #296]	; (10008e94 <system_peripheral_reset+0x390>)
10008d6a:	6859      	ldr	r1, [r3, #4]
10008d6c:	4a5d      	ldr	r2, [pc, #372]	; (10008ee4 <system_peripheral_reset+0x3e0>)
10008d6e:	400a      	ands	r2, r1
10008d70:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d72:	685a      	ldr	r2, [r3, #4]
10008d74:	2180      	movs	r1, #128	; 0x80
10008d76:	0509      	lsls	r1, r1, #20
10008d78:	430a      	orrs	r2, r1
10008d7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d7c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10008d7e:	e0ea      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d80:	4b44      	ldr	r3, [pc, #272]	; (10008e94 <system_peripheral_reset+0x390>)
10008d82:	6859      	ldr	r1, [r3, #4]
10008d84:	4a58      	ldr	r2, [pc, #352]	; (10008ee8 <system_peripheral_reset+0x3e4>)
10008d86:	400a      	ands	r2, r1
10008d88:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d8a:	685a      	ldr	r2, [r3, #4]
10008d8c:	2180      	movs	r1, #128	; 0x80
10008d8e:	0549      	lsls	r1, r1, #21
10008d90:	430a      	orrs	r2, r1
10008d92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d94:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10008d96:	e0de      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d98:	4b3e      	ldr	r3, [pc, #248]	; (10008e94 <system_peripheral_reset+0x390>)
10008d9a:	6859      	ldr	r1, [r3, #4]
10008d9c:	4a53      	ldr	r2, [pc, #332]	; (10008eec <system_peripheral_reset+0x3e8>)
10008d9e:	400a      	ands	r2, r1
10008da0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008da2:	685a      	ldr	r2, [r3, #4]
10008da4:	2180      	movs	r1, #128	; 0x80
10008da6:	0589      	lsls	r1, r1, #22
10008da8:	430a      	orrs	r2, r1
10008daa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dac:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10008dae:	e0d2      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008db0:	4b38      	ldr	r3, [pc, #224]	; (10008e94 <system_peripheral_reset+0x390>)
10008db2:	6859      	ldr	r1, [r3, #4]
10008db4:	4a4e      	ldr	r2, [pc, #312]	; (10008ef0 <system_peripheral_reset+0x3ec>)
10008db6:	400a      	ands	r2, r1
10008db8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dba:	685a      	ldr	r2, [r3, #4]
10008dbc:	2180      	movs	r1, #128	; 0x80
10008dbe:	05c9      	lsls	r1, r1, #23
10008dc0:	430a      	orrs	r2, r1
10008dc2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dc4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10008dc6:	e0c6      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dc8:	4a32      	ldr	r2, [pc, #200]	; (10008e94 <system_peripheral_reset+0x390>)
10008dca:	6853      	ldr	r3, [r2, #4]
10008dcc:	005b      	lsls	r3, r3, #1
10008dce:	085b      	lsrs	r3, r3, #1
10008dd0:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dd2:	6853      	ldr	r3, [r2, #4]
10008dd4:	2180      	movs	r1, #128	; 0x80
10008dd6:	0609      	lsls	r1, r1, #24
10008dd8:	430b      	orrs	r3, r1
10008dda:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ddc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10008dde:	e0ba      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008de0:	4b2c      	ldr	r3, [pc, #176]	; (10008e94 <system_peripheral_reset+0x390>)
10008de2:	891a      	ldrh	r2, [r3, #8]
10008de4:	2101      	movs	r1, #1
10008de6:	438a      	bics	r2, r1
10008de8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008dea:	8919      	ldrh	r1, [r3, #8]
10008dec:	2201      	movs	r2, #1
10008dee:	430a      	orrs	r2, r1
10008df0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008df2:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10008df4:	e0af      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008df6:	4b27      	ldr	r3, [pc, #156]	; (10008e94 <system_peripheral_reset+0x390>)
10008df8:	891a      	ldrh	r2, [r3, #8]
10008dfa:	2102      	movs	r1, #2
10008dfc:	438a      	bics	r2, r1
10008dfe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e00:	8919      	ldrh	r1, [r3, #8]
10008e02:	2202      	movs	r2, #2
10008e04:	430a      	orrs	r2, r1
10008e06:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e08:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10008e0a:	e0a4      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e0c:	4b21      	ldr	r3, [pc, #132]	; (10008e94 <system_peripheral_reset+0x390>)
10008e0e:	891a      	ldrh	r2, [r3, #8]
10008e10:	2104      	movs	r1, #4
10008e12:	438a      	bics	r2, r1
10008e14:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e16:	8919      	ldrh	r1, [r3, #8]
10008e18:	2204      	movs	r2, #4
10008e1a:	430a      	orrs	r2, r1
10008e1c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e1e:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10008e20:	e099      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e22:	4b1c      	ldr	r3, [pc, #112]	; (10008e94 <system_peripheral_reset+0x390>)
10008e24:	891a      	ldrh	r2, [r3, #8]
10008e26:	2108      	movs	r1, #8
10008e28:	438a      	bics	r2, r1
10008e2a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e2c:	8919      	ldrh	r1, [r3, #8]
10008e2e:	2208      	movs	r2, #8
10008e30:	430a      	orrs	r2, r1
10008e32:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e34:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008e36:	e08e      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e38:	4b16      	ldr	r3, [pc, #88]	; (10008e94 <system_peripheral_reset+0x390>)
10008e3a:	891a      	ldrh	r2, [r3, #8]
10008e3c:	2110      	movs	r1, #16
10008e3e:	438a      	bics	r2, r1
10008e40:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e42:	8919      	ldrh	r1, [r3, #8]
10008e44:	2210      	movs	r2, #16
10008e46:	430a      	orrs	r2, r1
10008e48:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008e4c:	e083      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e4e:	4b11      	ldr	r3, [pc, #68]	; (10008e94 <system_peripheral_reset+0x390>)
10008e50:	891a      	ldrh	r2, [r3, #8]
10008e52:	2120      	movs	r1, #32
10008e54:	438a      	bics	r2, r1
10008e56:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e58:	8919      	ldrh	r1, [r3, #8]
10008e5a:	2220      	movs	r2, #32
10008e5c:	430a      	orrs	r2, r1
10008e5e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e60:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008e62:	e078      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e64:	4b0b      	ldr	r3, [pc, #44]	; (10008e94 <system_peripheral_reset+0x390>)
10008e66:	891a      	ldrh	r2, [r3, #8]
10008e68:	2140      	movs	r1, #64	; 0x40
10008e6a:	438a      	bics	r2, r1
10008e6c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e6e:	8919      	ldrh	r1, [r3, #8]
10008e70:	2240      	movs	r2, #64	; 0x40
10008e72:	430a      	orrs	r2, r1
10008e74:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e76:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10008e78:	e06d      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008e7a:	4b06      	ldr	r3, [pc, #24]	; (10008e94 <system_peripheral_reset+0x390>)
10008e7c:	891a      	ldrh	r2, [r3, #8]
10008e7e:	2180      	movs	r1, #128	; 0x80
10008e80:	438a      	bics	r2, r1
10008e82:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008e84:	8919      	ldrh	r1, [r3, #8]
10008e86:	2280      	movs	r2, #128	; 0x80
10008e88:	430a      	orrs	r2, r1
10008e8a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e8c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
10008e8e:	e062      	b.n	10008f56 <system_peripheral_reset+0x452>
10008e90:	10010c54 	.word	0x10010c54
10008e94:	4000b000 	.word	0x4000b000
10008e98:	fffffeff 	.word	0xfffffeff
10008e9c:	fffffdff 	.word	0xfffffdff
10008ea0:	fffffbff 	.word	0xfffffbff
10008ea4:	fffff7ff 	.word	0xfffff7ff
10008ea8:	ffffefff 	.word	0xffffefff
10008eac:	ffffdfff 	.word	0xffffdfff
10008eb0:	ffffbfff 	.word	0xffffbfff
10008eb4:	ffff7fff 	.word	0xffff7fff
10008eb8:	fffeffff 	.word	0xfffeffff
10008ebc:	fffdffff 	.word	0xfffdffff
10008ec0:	fffbffff 	.word	0xfffbffff
10008ec4:	fff7ffff 	.word	0xfff7ffff
10008ec8:	ffefffff 	.word	0xffefffff
10008ecc:	ffdfffff 	.word	0xffdfffff
10008ed0:	ffbfffff 	.word	0xffbfffff
10008ed4:	ff7fffff 	.word	0xff7fffff
10008ed8:	feffffff 	.word	0xfeffffff
10008edc:	fdffffff 	.word	0xfdffffff
10008ee0:	fbffffff 	.word	0xfbffffff
10008ee4:	f7ffffff 	.word	0xf7ffffff
10008ee8:	efffffff 	.word	0xefffffff
10008eec:	dfffffff 	.word	0xdfffffff
10008ef0:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008ef4:	4b18      	ldr	r3, [pc, #96]	; (10008f58 <system_peripheral_reset+0x454>)
10008ef6:	8919      	ldrh	r1, [r3, #8]
10008ef8:	4a18      	ldr	r2, [pc, #96]	; (10008f5c <system_peripheral_reset+0x458>)
10008efa:	400a      	ands	r2, r1
10008efc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008efe:	8919      	ldrh	r1, [r3, #8]
10008f00:	2280      	movs	r2, #128	; 0x80
10008f02:	0052      	lsls	r2, r2, #1
10008f04:	430a      	orrs	r2, r1
10008f06:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f08:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
10008f0a:	e024      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f0c:	4b12      	ldr	r3, [pc, #72]	; (10008f58 <system_peripheral_reset+0x454>)
10008f0e:	8919      	ldrh	r1, [r3, #8]
10008f10:	4a13      	ldr	r2, [pc, #76]	; (10008f60 <system_peripheral_reset+0x45c>)
10008f12:	400a      	ands	r2, r1
10008f14:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f16:	8919      	ldrh	r1, [r3, #8]
10008f18:	2280      	movs	r2, #128	; 0x80
10008f1a:	0092      	lsls	r2, r2, #2
10008f1c:	430a      	orrs	r2, r1
10008f1e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f20:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10008f22:	e018      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f24:	4b0c      	ldr	r3, [pc, #48]	; (10008f58 <system_peripheral_reset+0x454>)
10008f26:	8919      	ldrh	r1, [r3, #8]
10008f28:	4a0e      	ldr	r2, [pc, #56]	; (10008f64 <system_peripheral_reset+0x460>)
10008f2a:	400a      	ands	r2, r1
10008f2c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f2e:	8919      	ldrh	r1, [r3, #8]
10008f30:	2280      	movs	r2, #128	; 0x80
10008f32:	00d2      	lsls	r2, r2, #3
10008f34:	430a      	orrs	r2, r1
10008f36:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10008f3a:	e00c      	b.n	10008f56 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f3c:	4b06      	ldr	r3, [pc, #24]	; (10008f58 <system_peripheral_reset+0x454>)
10008f3e:	8919      	ldrh	r1, [r3, #8]
10008f40:	4a09      	ldr	r2, [pc, #36]	; (10008f68 <system_peripheral_reset+0x464>)
10008f42:	400a      	ands	r2, r1
10008f44:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f46:	8919      	ldrh	r1, [r3, #8]
10008f48:	2280      	movs	r2, #128	; 0x80
10008f4a:	0112      	lsls	r2, r2, #4
10008f4c:	430a      	orrs	r2, r1
10008f4e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f50:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10008f52:	e000      	b.n	10008f56 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10008f54:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008f56:	bd00      	pop	{pc}
10008f58:	4000b000 	.word	0x4000b000
10008f5c:	fffffeff 	.word	0xfffffeff
10008f60:	fffffdff 	.word	0xfffffdff
10008f64:	fffffbff 	.word	0xfffffbff
10008f68:	fffff7ff 	.word	0xfffff7ff

10008f6c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10008f6c:	2380      	movs	r3, #128	; 0x80
10008f6e:	04db      	lsls	r3, r3, #19
10008f70:	469c      	mov	ip, r3
10008f72:	4460      	add	r0, ip
10008f74:	0080      	lsls	r0, r0, #2
10008f76:	6001      	str	r1, [r0, #0]
}
10008f78:	4770      	bx	lr
10008f7a:	46c0      	nop			; (mov r8, r8)

10008f7c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10008f7c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10008f7e:	4b20      	ldr	r3, [pc, #128]	; (10009000 <uart_rx0_isr_handler+0x84>)
10008f80:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008f82:	6823      	ldr	r3, [r4, #0]
10008f84:	7d1d      	ldrb	r5, [r3, #20]
10008f86:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10008f88:	066a      	lsls	r2, r5, #25
10008f8a:	d513      	bpl.n	10008fb4 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10008f8c:	211e      	movs	r1, #30
10008f8e:	2222      	movs	r2, #34	; 0x22
10008f90:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10008f92:	7e1a      	ldrb	r2, [r3, #24]
10008f94:	3123      	adds	r1, #35	; 0x23
10008f96:	438a      	bics	r2, r1
10008f98:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008f9a:	2321      	movs	r3, #33	; 0x21
10008f9c:	5ce3      	ldrb	r3, [r4, r3]
10008f9e:	071b      	lsls	r3, r3, #28
10008fa0:	d506      	bpl.n	10008fb0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10008fa2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008fa4:	5ce3      	ldrb	r3, [r4, r3]
10008fa6:	071b      	lsls	r3, r3, #28
10008fa8:	d502      	bpl.n	10008fb0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10008faa:	0020      	movs	r0, r4
10008fac:	6923      	ldr	r3, [r4, #16]
10008fae:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10008fb0:	6823      	ldr	r3, [r4, #0]
10008fb2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008fb4:	07eb      	lsls	r3, r5, #31
10008fb6:	d522      	bpl.n	10008ffe <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10008fb8:	6823      	ldr	r3, [r4, #0]
10008fba:	7c1b      	ldrb	r3, [r3, #16]
10008fbc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008fbe:	6962      	ldr	r2, [r4, #20]
10008fc0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008fc2:	6963      	ldr	r3, [r4, #20]
10008fc4:	3301      	adds	r3, #1
10008fc6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008fc8:	8ba3      	ldrh	r3, [r4, #28]
10008fca:	3b01      	subs	r3, #1
10008fcc:	b29b      	uxth	r3, r3
10008fce:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10008fd0:	8ba3      	ldrh	r3, [r4, #28]
10008fd2:	b29b      	uxth	r3, r3
10008fd4:	2b00      	cmp	r3, #0
10008fd6:	d112      	bne.n	10008ffe <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008fd8:	3321      	adds	r3, #33	; 0x21
10008fda:	5ce3      	ldrb	r3, [r4, r3]
10008fdc:	075b      	lsls	r3, r3, #29
10008fde:	d50e      	bpl.n	10008ffe <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10008fe0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008fe2:	5ce3      	ldrb	r3, [r4, r3]
10008fe4:	075b      	lsls	r3, r3, #29
10008fe6:	d50a      	bpl.n	10008ffe <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10008fe8:	2200      	movs	r2, #0
10008fea:	2322      	movs	r3, #34	; 0x22
10008fec:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10008fee:	6822      	ldr	r2, [r4, #0]
10008ff0:	7e13      	ldrb	r3, [r2, #24]
10008ff2:	2101      	movs	r1, #1
10008ff4:	438b      	bics	r3, r1
10008ff6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10008ff8:	68e3      	ldr	r3, [r4, #12]
10008ffa:	0020      	movs	r0, r4
10008ffc:	4798      	blx	r3
			}
		}
	}
}
10008ffe:	bd70      	pop	{r4, r5, r6, pc}
10009000:	10012720 	.word	0x10012720

10009004 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009004:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009006:	4b21      	ldr	r3, [pc, #132]	; (1000908c <uart_tx0_isr_handler+0x88>)
10009008:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000900a:	6823      	ldr	r3, [r4, #0]
1000900c:	791d      	ldrb	r5, [r3, #4]
1000900e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009010:	07ea      	lsls	r2, r5, #31
10009012:	d517      	bpl.n	10009044 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009014:	69a2      	ldr	r2, [r4, #24]
10009016:	7811      	ldrb	r1, [r2, #0]
10009018:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000901a:	3201      	adds	r2, #1
1000901c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000901e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009020:	8be3      	ldrh	r3, [r4, #30]
10009022:	3b01      	subs	r3, #1
10009024:	b29b      	uxth	r3, r3
10009026:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009028:	8be3      	ldrh	r3, [r4, #30]
1000902a:	b29b      	uxth	r3, r3
1000902c:	2b00      	cmp	r3, #0
1000902e:	d109      	bne.n	10009044 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009030:	6822      	ldr	r2, [r4, #0]
10009032:	7a13      	ldrb	r3, [r2, #8]
10009034:	2101      	movs	r1, #1
10009036:	438b      	bics	r3, r1
10009038:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000903a:	6822      	ldr	r2, [r4, #0]
1000903c:	7a11      	ldrb	r1, [r2, #8]
1000903e:	2310      	movs	r3, #16
10009040:	430b      	orrs	r3, r1
10009042:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009044:	06eb      	lsls	r3, r5, #27
10009046:	d512      	bpl.n	1000906e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009048:	2321      	movs	r3, #33	; 0x21
1000904a:	5ce3      	ldrb	r3, [r4, r3]
1000904c:	07db      	lsls	r3, r3, #31
1000904e:	d50e      	bpl.n	1000906e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009050:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009052:	5ce3      	ldrb	r3, [r4, r3]
10009054:	07db      	lsls	r3, r3, #31
10009056:	d50a      	bpl.n	1000906e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009058:	2200      	movs	r2, #0
1000905a:	2322      	movs	r3, #34	; 0x22
1000905c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000905e:	6822      	ldr	r2, [r4, #0]
10009060:	7a13      	ldrb	r3, [r2, #8]
10009062:	2110      	movs	r1, #16
10009064:	438b      	bics	r3, r1
10009066:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009068:	0020      	movs	r0, r4
1000906a:	6863      	ldr	r3, [r4, #4]
1000906c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000906e:	06ab      	lsls	r3, r5, #26
10009070:	d50a      	bpl.n	10009088 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009072:	2321      	movs	r3, #33	; 0x21
10009074:	5ce3      	ldrb	r3, [r4, r3]
10009076:	079b      	lsls	r3, r3, #30
10009078:	d506      	bpl.n	10009088 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000907a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000907c:	5ce3      	ldrb	r3, [r4, r3]
1000907e:	079b      	lsls	r3, r3, #30
10009080:	d502      	bpl.n	10009088 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009082:	68a3      	ldr	r3, [r4, #8]
10009084:	0020      	movs	r0, r4
10009086:	4798      	blx	r3
		}

	}
}
10009088:	bd70      	pop	{r4, r5, r6, pc}
1000908a:	46c0      	nop			; (mov r8, r8)
1000908c:	10012720 	.word	0x10012720

10009090 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009090:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009092:	4b20      	ldr	r3, [pc, #128]	; (10009114 <uart_rx1_isr_handler+0x84>)
10009094:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009096:	6823      	ldr	r3, [r4, #0]
10009098:	7d1d      	ldrb	r5, [r3, #20]
1000909a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000909c:	066a      	lsls	r2, r5, #25
1000909e:	d513      	bpl.n	100090c8 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100090a0:	211e      	movs	r1, #30
100090a2:	2222      	movs	r2, #34	; 0x22
100090a4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100090a6:	7e1a      	ldrb	r2, [r3, #24]
100090a8:	3123      	adds	r1, #35	; 0x23
100090aa:	438a      	bics	r2, r1
100090ac:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100090ae:	2321      	movs	r3, #33	; 0x21
100090b0:	5ce3      	ldrb	r3, [r4, r3]
100090b2:	071b      	lsls	r3, r3, #28
100090b4:	d506      	bpl.n	100090c4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100090b6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100090b8:	5ce3      	ldrb	r3, [r4, r3]
100090ba:	071b      	lsls	r3, r3, #28
100090bc:	d502      	bpl.n	100090c4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100090be:	0020      	movs	r0, r4
100090c0:	6923      	ldr	r3, [r4, #16]
100090c2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100090c4:	6823      	ldr	r3, [r4, #0]
100090c6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100090c8:	07eb      	lsls	r3, r5, #31
100090ca:	d522      	bpl.n	10009112 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100090cc:	6823      	ldr	r3, [r4, #0]
100090ce:	7c1b      	ldrb	r3, [r3, #16]
100090d0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100090d2:	6962      	ldr	r2, [r4, #20]
100090d4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100090d6:	6963      	ldr	r3, [r4, #20]
100090d8:	3301      	adds	r3, #1
100090da:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100090dc:	8ba3      	ldrh	r3, [r4, #28]
100090de:	3b01      	subs	r3, #1
100090e0:	b29b      	uxth	r3, r3
100090e2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100090e4:	8ba3      	ldrh	r3, [r4, #28]
100090e6:	b29b      	uxth	r3, r3
100090e8:	2b00      	cmp	r3, #0
100090ea:	d112      	bne.n	10009112 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100090ec:	3321      	adds	r3, #33	; 0x21
100090ee:	5ce3      	ldrb	r3, [r4, r3]
100090f0:	075b      	lsls	r3, r3, #29
100090f2:	d50e      	bpl.n	10009112 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100090f4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100090f6:	5ce3      	ldrb	r3, [r4, r3]
100090f8:	075b      	lsls	r3, r3, #29
100090fa:	d50a      	bpl.n	10009112 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100090fc:	2200      	movs	r2, #0
100090fe:	2322      	movs	r3, #34	; 0x22
10009100:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009102:	6822      	ldr	r2, [r4, #0]
10009104:	7e13      	ldrb	r3, [r2, #24]
10009106:	2101      	movs	r1, #1
10009108:	438b      	bics	r3, r1
1000910a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000910c:	68e3      	ldr	r3, [r4, #12]
1000910e:	0020      	movs	r0, r4
10009110:	4798      	blx	r3
			}
		}
	}
}
10009112:	bd70      	pop	{r4, r5, r6, pc}
10009114:	10012720 	.word	0x10012720

10009118 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009118:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000911a:	4b21      	ldr	r3, [pc, #132]	; (100091a0 <uart_tx1_isr_handler+0x88>)
1000911c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000911e:	6823      	ldr	r3, [r4, #0]
10009120:	791d      	ldrb	r5, [r3, #4]
10009122:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009124:	07ea      	lsls	r2, r5, #31
10009126:	d517      	bpl.n	10009158 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009128:	69a2      	ldr	r2, [r4, #24]
1000912a:	7811      	ldrb	r1, [r2, #0]
1000912c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000912e:	3201      	adds	r2, #1
10009130:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009132:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009134:	8be3      	ldrh	r3, [r4, #30]
10009136:	3b01      	subs	r3, #1
10009138:	b29b      	uxth	r3, r3
1000913a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000913c:	8be3      	ldrh	r3, [r4, #30]
1000913e:	b29b      	uxth	r3, r3
10009140:	2b00      	cmp	r3, #0
10009142:	d109      	bne.n	10009158 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009144:	6822      	ldr	r2, [r4, #0]
10009146:	7a13      	ldrb	r3, [r2, #8]
10009148:	2101      	movs	r1, #1
1000914a:	438b      	bics	r3, r1
1000914c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000914e:	6822      	ldr	r2, [r4, #0]
10009150:	7a11      	ldrb	r1, [r2, #8]
10009152:	2310      	movs	r3, #16
10009154:	430b      	orrs	r3, r1
10009156:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009158:	06eb      	lsls	r3, r5, #27
1000915a:	d512      	bpl.n	10009182 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000915c:	2321      	movs	r3, #33	; 0x21
1000915e:	5ce3      	ldrb	r3, [r4, r3]
10009160:	07db      	lsls	r3, r3, #31
10009162:	d50e      	bpl.n	10009182 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009164:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009166:	5ce3      	ldrb	r3, [r4, r3]
10009168:	07db      	lsls	r3, r3, #31
1000916a:	d50a      	bpl.n	10009182 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000916c:	2200      	movs	r2, #0
1000916e:	2322      	movs	r3, #34	; 0x22
10009170:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009172:	6822      	ldr	r2, [r4, #0]
10009174:	7a13      	ldrb	r3, [r2, #8]
10009176:	2110      	movs	r1, #16
10009178:	438b      	bics	r3, r1
1000917a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000917c:	0020      	movs	r0, r4
1000917e:	6863      	ldr	r3, [r4, #4]
10009180:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009182:	06ab      	lsls	r3, r5, #26
10009184:	d50a      	bpl.n	1000919c <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009186:	2321      	movs	r3, #33	; 0x21
10009188:	5ce3      	ldrb	r3, [r4, r3]
1000918a:	079b      	lsls	r3, r3, #30
1000918c:	d506      	bpl.n	1000919c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000918e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009190:	5ce3      	ldrb	r3, [r4, r3]
10009192:	079b      	lsls	r3, r3, #30
10009194:	d502      	bpl.n	1000919c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009196:	68a3      	ldr	r3, [r4, #8]
10009198:	0020      	movs	r0, r4
1000919a:	4798      	blx	r3
		}

	}
}
1000919c:	bd70      	pop	{r4, r5, r6, pc}
1000919e:	46c0      	nop			; (mov r8, r8)
100091a0:	10012720 	.word	0x10012720

100091a4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
100091a4:	23e1      	movs	r3, #225	; 0xe1
100091a6:	025b      	lsls	r3, r3, #9
100091a8:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
100091aa:	2300      	movs	r3, #0
100091ac:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
100091ae:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
100091b0:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
100091b2:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
100091b4:	3302      	adds	r3, #2
100091b6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
100091b8:	2203      	movs	r2, #3
100091ba:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
100091bc:	3201      	adds	r2, #1
100091be:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
100091c0:	3201      	adds	r2, #1
100091c2:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
100091c4:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
100091c6:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
100091c8:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
100091ca:	6243      	str	r3, [r0, #36]	; 0x24
}
100091cc:	4770      	bx	lr
100091ce:	46c0      	nop			; (mov r8, r8)

100091d0 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100091d2:	464f      	mov	r7, r9
100091d4:	4646      	mov	r6, r8
100091d6:	b4c0      	push	{r6, r7}
100091d8:	0005      	movs	r5, r0
100091da:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
100091dc:	6001      	str	r1, [r0, #0]

	if (hw == UART0) {
100091de:	4b55      	ldr	r3, [pc, #340]	; (10009334 <uart_init+0x164>)
100091e0:	4299      	cmp	r1, r3
100091e2:	d118      	bne.n	10009216 <uart_init+0x46>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
100091e4:	2009      	movs	r0, #9
100091e6:	4c54      	ldr	r4, [pc, #336]	; (10009338 <uart_init+0x168>)
100091e8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
100091ea:	200a      	movs	r0, #10
100091ec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
100091ee:	2009      	movs	r0, #9
100091f0:	4c52      	ldr	r4, [pc, #328]	; (1000933c <uart_init+0x16c>)
100091f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
100091f4:	200a      	movs	r0, #10
100091f6:	47a0      	blx	r4
		_uart_instances[0] = module;
100091f8:	4b51      	ldr	r3, [pc, #324]	; (10009340 <uart_init+0x170>)
100091fa:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
100091fc:	4951      	ldr	r1, [pc, #324]	; (10009344 <uart_init+0x174>)
100091fe:	2010      	movs	r0, #16
10009200:	4c51      	ldr	r4, [pc, #324]	; (10009348 <uart_init+0x178>)
10009202:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009204:	4951      	ldr	r1, [pc, #324]	; (1000934c <uart_init+0x17c>)
10009206:	2011      	movs	r0, #17
10009208:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000920a:	4b51      	ldr	r3, [pc, #324]	; (10009350 <uart_init+0x180>)
1000920c:	2201      	movs	r2, #1
1000920e:	601a      	str	r2, [r3, #0]
10009210:	3201      	adds	r2, #1
10009212:	601a      	str	r2, [r3, #0]
10009214:	e01a      	b.n	1000924c <uart_init+0x7c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009216:	4b4f      	ldr	r3, [pc, #316]	; (10009354 <uart_init+0x184>)
10009218:	4299      	cmp	r1, r3
1000921a:	d117      	bne.n	1000924c <uart_init+0x7c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000921c:	200b      	movs	r0, #11
1000921e:	4c46      	ldr	r4, [pc, #280]	; (10009338 <uart_init+0x168>)
10009220:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009222:	200c      	movs	r0, #12
10009224:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009226:	200b      	movs	r0, #11
10009228:	4c44      	ldr	r4, [pc, #272]	; (1000933c <uart_init+0x16c>)
1000922a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000922c:	200c      	movs	r0, #12
1000922e:	47a0      	blx	r4
		_uart_instances[1] = module;
10009230:	4b43      	ldr	r3, [pc, #268]	; (10009340 <uart_init+0x170>)
10009232:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009234:	4948      	ldr	r1, [pc, #288]	; (10009358 <uart_init+0x188>)
10009236:	2012      	movs	r0, #18
10009238:	4c43      	ldr	r4, [pc, #268]	; (10009348 <uart_init+0x178>)
1000923a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000923c:	4947      	ldr	r1, [pc, #284]	; (1000935c <uart_init+0x18c>)
1000923e:	2013      	movs	r0, #19
10009240:	47a0      	blx	r4
10009242:	4b43      	ldr	r3, [pc, #268]	; (10009350 <uart_init+0x180>)
10009244:	2204      	movs	r2, #4
10009246:	601a      	str	r2, [r3, #0]
10009248:	3204      	adds	r2, #4
1000924a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000924c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000924e:	2204      	movs	r2, #4
10009250:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009252:	2b00      	cmp	r3, #0
10009254:	d152      	bne.n	100092fc <uart_init+0x12c>
		index = 4;
	} else {
		index = 2;
10009256:	3302      	adds	r3, #2
10009258:	4698      	mov	r8, r3
1000925a:	e04f      	b.n	100092fc <uart_init+0x12c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000925c:	8a31      	ldrh	r1, [r6, #16]
1000925e:	ce01      	ldmia	r6!, {r0}
10009260:	b2c0      	uxtb	r0, r0
10009262:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009264:	3401      	adds	r4, #1
10009266:	b2e4      	uxtb	r4, r4
10009268:	4544      	cmp	r4, r8
1000926a:	d3f7      	bcc.n	1000925c <uart_init+0x8c>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000926c:	682b      	ldr	r3, [r5, #0]
1000926e:	7d1a      	ldrb	r2, [r3, #20]
10009270:	07d2      	lsls	r2, r2, #31
10009272:	d504      	bpl.n	1000927e <uart_init+0xae>
10009274:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009276:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009278:	7d1a      	ldrb	r2, [r3, #20]
1000927a:	420a      	tst	r2, r1
1000927c:	d1fb      	bne.n	10009276 <uart_init+0xa6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000927e:	2100      	movs	r1, #0
10009280:	2220      	movs	r2, #32
10009282:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009284:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009286:	1e59      	subs	r1, r3, #1
10009288:	418b      	sbcs	r3, r1
1000928a:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000928c:	793b      	ldrb	r3, [r7, #4]
1000928e:	797a      	ldrb	r2, [r7, #5]
10009290:	4313      	orrs	r3, r2
10009292:	430b      	orrs	r3, r1
	switch(config->parity) {
10009294:	79ba      	ldrb	r2, [r7, #6]
10009296:	2a02      	cmp	r2, #2
10009298:	d00d      	beq.n	100092b6 <uart_init+0xe6>
1000929a:	b2d1      	uxtb	r1, r2
1000929c:	2902      	cmp	r1, #2
1000929e:	d802      	bhi.n	100092a6 <uart_init+0xd6>
100092a0:	2a01      	cmp	r2, #1
100092a2:	d005      	beq.n	100092b0 <uart_init+0xe0>
100092a4:	e00f      	b.n	100092c6 <uart_init+0xf6>
100092a6:	2a03      	cmp	r2, #3
100092a8:	d008      	beq.n	100092bc <uart_init+0xec>
100092aa:	2a04      	cmp	r2, #4
100092ac:	d009      	beq.n	100092c2 <uart_init+0xf2>
100092ae:	e00a      	b.n	100092c6 <uart_init+0xf6>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100092b0:	2202      	movs	r2, #2
100092b2:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
100092b4:	e007      	b.n	100092c6 <uart_init+0xf6>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
100092b6:	2206      	movs	r2, #6
100092b8:	4313      	orrs	r3, r2
			break;
100092ba:	e004      	b.n	100092c6 <uart_init+0xf6>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
100092bc:	220a      	movs	r2, #10
100092be:	4313      	orrs	r3, r2
			break;
100092c0:	e001      	b.n	100092c6 <uart_init+0xf6>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
100092c2:	220e      	movs	r2, #14
100092c4:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
100092c6:	2220      	movs	r2, #32
100092c8:	6829      	ldr	r1, [r5, #0]
100092ca:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
100092cc:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
100092ce:	4b24      	ldr	r3, [pc, #144]	; (10009360 <uart_init+0x190>)
100092d0:	4798      	blx	r3
100092d2:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
100092d4:	0031      	movs	r1, r6
100092d6:	4b23      	ldr	r3, [pc, #140]	; (10009364 <uart_init+0x194>)
100092d8:	4798      	blx	r3
100092da:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
100092dc:	0400      	lsls	r0, r0, #16
100092de:	0c00      	lsrs	r0, r0, #16
100092e0:	4370      	muls	r0, r6
100092e2:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
100092e4:	0931      	lsrs	r1, r6, #4
100092e6:	4288      	cmp	r0, r1
100092e8:	d906      	bls.n	100092f8 <uart_init+0x128>
100092ea:	2300      	movs	r3, #0
		i++;
100092ec:	3301      	adds	r3, #1
100092ee:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
100092f0:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
100092f2:	4288      	cmp	r0, r1
100092f4:	d8fa      	bhi.n	100092ec <uart_init+0x11c>
100092f6:	e007      	b.n	10009308 <uart_init+0x138>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
100092f8:	2300      	movs	r3, #0
100092fa:	e005      	b.n	10009308 <uart_init+0x138>
100092fc:	003e      	movs	r6, r7
100092fe:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009300:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009302:	4b19      	ldr	r3, [pc, #100]	; (10009368 <uart_init+0x198>)
10009304:	4699      	mov	r9, r3
10009306:	e7a9      	b.n	1000925c <uart_init+0x8c>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009308:	2100      	movs	r1, #0
1000930a:	2028      	movs	r0, #40	; 0x28
1000930c:	682c      	ldr	r4, [r5, #0]
1000930e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009310:	3301      	adds	r3, #1
10009312:	071b      	lsls	r3, r3, #28
10009314:	0f5b      	lsrs	r3, r3, #29
10009316:	00d2      	lsls	r2, r2, #3
10009318:	4313      	orrs	r3, r2
1000931a:	b29b      	uxth	r3, r3
1000931c:	682a      	ldr	r2, [r5, #0]
1000931e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009320:	682b      	ldr	r3, [r5, #0]
10009322:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009324:	682b      	ldr	r3, [r5, #0]
10009326:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009328:	2000      	movs	r0, #0
1000932a:	bc0c      	pop	{r2, r3}
1000932c:	4690      	mov	r8, r2
1000932e:	4699      	mov	r9, r3
10009330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009332:	46c0      	nop			; (mov r8, r8)
10009334:	40004000 	.word	0x40004000
10009338:	10008b05 	.word	0x10008b05
1000933c:	100087a9 	.word	0x100087a9
10009340:	10012720 	.word	0x10012720
10009344:	10008f7d 	.word	0x10008f7d
10009348:	10008f6d 	.word	0x10008f6d
1000934c:	10009005 	.word	0x10009005
10009350:	e000e100 	.word	0xe000e100
10009354:	40005000 	.word	0x40005000
10009358:	10009091 	.word	0x10009091
1000935c:	10009119 	.word	0x10009119
10009360:	1000879d 	.word	0x1000879d
10009364:	1000e84d 	.word	0x1000e84d
10009368:	10008421 	.word	0x10008421

1000936c <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000936c:	6802      	ldr	r2, [r0, #0]
1000936e:	2001      	movs	r0, #1
10009370:	7913      	ldrb	r3, [r2, #4]
10009372:	4203      	tst	r3, r0
10009374:	d0fc      	beq.n	10009370 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009376:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009378:	2000      	movs	r0, #0
1000937a:	4770      	bx	lr

1000937c <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000937c:	6802      	ldr	r2, [r0, #0]
1000937e:	2001      	movs	r0, #1
10009380:	7d13      	ldrb	r3, [r2, #20]
10009382:	4203      	tst	r3, r0
10009384:	d0fc      	beq.n	10009380 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009386:	7c13      	ldrb	r3, [r2, #16]
10009388:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000938a:	2000      	movs	r0, #0
1000938c:	4770      	bx	lr
1000938e:	46c0      	nop			; (mov r8, r8)

10009390 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009390:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009392:	2a00      	cmp	r2, #0
10009394:	d00d      	beq.n	100093b2 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009396:	330b      	adds	r3, #11
10009398:	5cc3      	ldrb	r3, [r0, r3]
1000939a:	b2db      	uxtb	r3, r3
1000939c:	2b05      	cmp	r3, #5
1000939e:	d008      	beq.n	100093b2 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
100093a0:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
100093a2:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
100093a4:	2205      	movs	r2, #5
100093a6:	2322      	movs	r3, #34	; 0x22
100093a8:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
100093aa:	6803      	ldr	r3, [r0, #0]
100093ac:	3a04      	subs	r2, #4
100093ae:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
100093b0:	2300      	movs	r3, #0
}
100093b2:	0018      	movs	r0, r3
100093b4:	4770      	bx	lr
100093b6:	46c0      	nop			; (mov r8, r8)

100093b8 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100093b8:	0093      	lsls	r3, r2, #2
100093ba:	18c3      	adds	r3, r0, r3
100093bc:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100093be:	2120      	movs	r1, #32
100093c0:	2301      	movs	r3, #1
100093c2:	4093      	lsls	r3, r2
100093c4:	5c42      	ldrb	r2, [r0, r1]
100093c6:	4313      	orrs	r3, r2
100093c8:	5443      	strb	r3, [r0, r1]
}
100093ca:	4770      	bx	lr

100093cc <uart_unregister_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
100093cc:	008b      	lsls	r3, r1, #2
100093ce:	18c3      	adds	r3, r0, r3
100093d0:	2200      	movs	r2, #0
100093d2:	605a      	str	r2, [r3, #4]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
100093d4:	3201      	adds	r2, #1
100093d6:	408a      	lsls	r2, r1
100093d8:	2120      	movs	r1, #32
100093da:	5c43      	ldrb	r3, [r0, r1]
100093dc:	4393      	bics	r3, r2
100093de:	5443      	strb	r3, [r0, r1]
}
100093e0:	4770      	bx	lr
100093e2:	46c0      	nop			; (mov r8, r8)

100093e4 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
100093e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
100093e6:	2221      	movs	r2, #33	; 0x21
100093e8:	2301      	movs	r3, #1
100093ea:	408b      	lsls	r3, r1
100093ec:	5c84      	ldrb	r4, [r0, r2]
100093ee:	4323      	orrs	r3, r4
100093f0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
100093f2:	2901      	cmp	r1, #1
100093f4:	d104      	bne.n	10009400 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100093f6:	6802      	ldr	r2, [r0, #0]
100093f8:	7a11      	ldrb	r1, [r2, #8]
100093fa:	2320      	movs	r3, #32
100093fc:	430b      	orrs	r3, r1
100093fe:	7213      	strb	r3, [r2, #8]
	}
}
10009400:	bd10      	pop	{r4, pc}
10009402:	46c0      	nop			; (mov r8, r8)

10009404 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009404:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009406:	2201      	movs	r2, #1
10009408:	408a      	lsls	r2, r1
1000940a:	2421      	movs	r4, #33	; 0x21
1000940c:	5d03      	ldrb	r3, [r0, r4]
1000940e:	4393      	bics	r3, r2
10009410:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009412:	2901      	cmp	r1, #1
10009414:	d104      	bne.n	10009420 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009416:	6802      	ldr	r2, [r0, #0]
10009418:	7a13      	ldrb	r3, [r2, #8]
1000941a:	311f      	adds	r1, #31
1000941c:	438b      	bics	r3, r1
1000941e:	7213      	strb	r3, [r2, #8]
	}

}
10009420:	bd10      	pop	{r4, pc}
10009422:	46c0      	nop			; (mov r8, r8)

10009424 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009424:	b5f0      	push	{r4, r5, r6, r7, lr}
10009426:	4647      	mov	r7, r8
10009428:	b480      	push	{r7}
1000942a:	000c      	movs	r4, r1
1000942c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000942e:	2800      	cmp	r0, #0
10009430:	d10d      	bne.n	1000944e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009432:	2a00      	cmp	r2, #0
10009434:	dd0e      	ble.n	10009454 <_read+0x30>
10009436:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009438:	4e08      	ldr	r6, [pc, #32]	; (1000945c <_read+0x38>)
1000943a:	4d09      	ldr	r5, [pc, #36]	; (10009460 <_read+0x3c>)
1000943c:	6830      	ldr	r0, [r6, #0]
1000943e:	0021      	movs	r1, r4
10009440:	682b      	ldr	r3, [r5, #0]
10009442:	4798      	blx	r3
		ptr++;
10009444:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009446:	42a7      	cmp	r7, r4
10009448:	d1f8      	bne.n	1000943c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000944a:	4640      	mov	r0, r8
1000944c:	e003      	b.n	10009456 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000944e:	2001      	movs	r0, #1
10009450:	4240      	negs	r0, r0
10009452:	e000      	b.n	10009456 <_read+0x32>
	}

	for (; len > 0; --len) {
10009454:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009456:	bc04      	pop	{r2}
10009458:	4690      	mov	r8, r2
1000945a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000945c:	10012730 	.word	0x10012730
10009460:	10012728 	.word	0x10012728

10009464 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009464:	b5f0      	push	{r4, r5, r6, r7, lr}
10009466:	4647      	mov	r7, r8
10009468:	b480      	push	{r7}
1000946a:	000e      	movs	r6, r1
1000946c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000946e:	3801      	subs	r0, #1
10009470:	2802      	cmp	r0, #2
10009472:	d811      	bhi.n	10009498 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009474:	2a00      	cmp	r2, #0
10009476:	d012      	beq.n	1000949e <_write+0x3a>
10009478:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000947a:	4b0c      	ldr	r3, [pc, #48]	; (100094ac <_write+0x48>)
1000947c:	4698      	mov	r8, r3
1000947e:	4f0c      	ldr	r7, [pc, #48]	; (100094b0 <_write+0x4c>)
10009480:	4643      	mov	r3, r8
10009482:	6818      	ldr	r0, [r3, #0]
10009484:	5d31      	ldrb	r1, [r6, r4]
10009486:	683b      	ldr	r3, [r7, #0]
10009488:	4798      	blx	r3
1000948a:	2800      	cmp	r0, #0
1000948c:	db09      	blt.n	100094a2 <_write+0x3e>
			return -1;
		}
		++nChars;
1000948e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009490:	42a5      	cmp	r5, r4
10009492:	d1f5      	bne.n	10009480 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009494:	0020      	movs	r0, r4
10009496:	e006      	b.n	100094a6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009498:	2001      	movs	r0, #1
1000949a:	4240      	negs	r0, r0
1000949c:	e003      	b.n	100094a6 <_write+0x42>
	}

	for (; len != 0; --len) {
1000949e:	2000      	movs	r0, #0
100094a0:	e001      	b.n	100094a6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100094a2:	2001      	movs	r0, #1
100094a4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100094a6:	bc04      	pop	{r2}
100094a8:	4690      	mov	r8, r2
100094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100094ac:	10012730 	.word	0x10012730
100094b0:	1001272c 	.word	0x1001272c

100094b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100094b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100094b6:	4a06      	ldr	r2, [pc, #24]	; (100094d0 <_sbrk+0x1c>)
100094b8:	6812      	ldr	r2, [r2, #0]
100094ba:	2a00      	cmp	r2, #0
100094bc:	d102      	bne.n	100094c4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100094be:	4905      	ldr	r1, [pc, #20]	; (100094d4 <_sbrk+0x20>)
100094c0:	4a03      	ldr	r2, [pc, #12]	; (100094d0 <_sbrk+0x1c>)
100094c2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100094c4:	4a02      	ldr	r2, [pc, #8]	; (100094d0 <_sbrk+0x1c>)
100094c6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100094c8:	18c3      	adds	r3, r0, r3
100094ca:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100094cc:	4770      	bx	lr
100094ce:	46c0      	nop			; (mov r8, r8)
100094d0:	10012438 	.word	0x10012438
100094d4:	100142b0 	.word	0x100142b0

100094d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
100094d8:	2001      	movs	r0, #1
100094da:	4240      	negs	r0, r0
100094dc:	4770      	bx	lr
100094de:	46c0      	nop			; (mov r8, r8)

100094e0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
100094e0:	2380      	movs	r3, #128	; 0x80
100094e2:	019b      	lsls	r3, r3, #6
100094e4:	604b      	str	r3, [r1, #4]

	return 0;
}
100094e6:	2000      	movs	r0, #0
100094e8:	4770      	bx	lr
100094ea:	46c0      	nop			; (mov r8, r8)

100094ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
100094ec:	2001      	movs	r0, #1
100094ee:	4770      	bx	lr

100094f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100094f0:	2000      	movs	r0, #0
100094f2:	4770      	bx	lr

100094f4 <pxp_monitor_connect_request>:
* @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_connect_request(at_ble_scan_info_t *scan_buffer,
uint8_t index)
{
100094f4:	b510      	push	{r4, lr}
	memcpy((uint8_t *)&pxp_reporter_address,
100094f6:	4c13      	ldr	r4, [pc, #76]	; (10009544 <pxp_monitor_connect_request+0x50>)
100094f8:	008b      	lsls	r3, r1, #2
100094fa:	185b      	adds	r3, r3, r1
100094fc:	00db      	lsls	r3, r3, #3
100094fe:	1859      	adds	r1, r3, r1
10009500:	1841      	adds	r1, r0, r1
10009502:	3101      	adds	r1, #1
10009504:	2207      	movs	r2, #7
10009506:	0020      	movs	r0, r4
10009508:	4b0f      	ldr	r3, [pc, #60]	; (10009548 <pxp_monitor_connect_request+0x54>)
1000950a:	4798      	blx	r3
	(uint8_t *)&scan_buffer[index].dev_addr,
	sizeof(at_ble_addr_t));

	if (gap_dev_connect(&pxp_reporter_address) == AT_BLE_SUCCESS) {
1000950c:	0020      	movs	r0, r4
1000950e:	4b0f      	ldr	r3, [pc, #60]	; (1000954c <pxp_monitor_connect_request+0x58>)
10009510:	4798      	blx	r3
10009512:	1e04      	subs	r4, r0, #0
10009514:	d10d      	bne.n	10009532 <pxp_monitor_connect_request+0x3e>
		DBG_LOG("PXP Connect request sent");
10009516:	480e      	ldr	r0, [pc, #56]	; (10009550 <pxp_monitor_connect_request+0x5c>)
10009518:	4b0e      	ldr	r3, [pc, #56]	; (10009554 <pxp_monitor_connect_request+0x60>)
1000951a:	4798      	blx	r3
1000951c:	480e      	ldr	r0, [pc, #56]	; (10009558 <pxp_monitor_connect_request+0x64>)
1000951e:	4b0f      	ldr	r3, [pc, #60]	; (1000955c <pxp_monitor_connect_request+0x68>)
10009520:	4798      	blx	r3
		pxp_connect_request_flag = PXP_DEV_CONNECTING;
10009522:	2201      	movs	r2, #1
10009524:	4b0e      	ldr	r3, [pc, #56]	; (10009560 <pxp_monitor_connect_request+0x6c>)
10009526:	701a      	strb	r2, [r3, #0]
		hw_timer_start_func_cb(PXP_CONNECT_REQ_INTERVAL);
10009528:	4b0e      	ldr	r3, [pc, #56]	; (10009564 <pxp_monitor_connect_request+0x70>)
1000952a:	681b      	ldr	r3, [r3, #0]
1000952c:	2014      	movs	r0, #20
1000952e:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10009530:	e006      	b.n	10009540 <pxp_monitor_connect_request+0x4c>
	}
    else {
		DBG_LOG("PXP Connect request send failed");
10009532:	4807      	ldr	r0, [pc, #28]	; (10009550 <pxp_monitor_connect_request+0x5c>)
10009534:	4b07      	ldr	r3, [pc, #28]	; (10009554 <pxp_monitor_connect_request+0x60>)
10009536:	4798      	blx	r3
10009538:	480b      	ldr	r0, [pc, #44]	; (10009568 <pxp_monitor_connect_request+0x74>)
1000953a:	4b08      	ldr	r3, [pc, #32]	; (1000955c <pxp_monitor_connect_request+0x68>)
1000953c:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
1000953e:	24e2      	movs	r4, #226	; 0xe2
}
10009540:	0020      	movs	r0, r4
10009542:	bd10      	pop	{r4, pc}
10009544:	10012750 	.word	0x10012750
10009548:	1000f957 	.word	0x1000f957
1000954c:	1000a715 	.word	0x1000a715
10009550:	10010d64 	.word	0x10010d64
10009554:	1000fa99 	.word	0x1000fa99
10009558:	10011068 	.word	0x10011068
1000955c:	1000f979 	.word	0x1000f979
10009560:	10012440 	.word	0x10012440
10009564:	10012444 	.word	0x10012444
10009568:	10011084 	.word	0x10011084

1000956c <register_hw_timer_start_func_cb>:
*
* @return none.
*/
void register_hw_timer_start_func_cb(hw_timer_start_func_cb_t timer_start_fn)
{
	hw_timer_start_func_cb = timer_start_fn;
1000956c:	4b01      	ldr	r3, [pc, #4]	; (10009574 <register_hw_timer_start_func_cb+0x8>)
1000956e:	6018      	str	r0, [r3, #0]
}
10009570:	4770      	bx	lr
10009572:	46c0      	nop			; (mov r8, r8)
10009574:	10012444 	.word	0x10012444

10009578 <register_hw_timer_stop_func_cb>:
*
* @return none.
*/
void register_hw_timer_stop_func_cb(hw_timer_stop_func_cb_t timer_stop_fn)
{
	hw_timer_stop_func_cb = timer_stop_fn;
10009578:	4b01      	ldr	r3, [pc, #4]	; (10009580 <register_hw_timer_stop_func_cb+0x8>)
1000957a:	6018      	str	r0, [r3, #0]
}
1000957c:	4770      	bx	lr
1000957e:	46c0      	nop			; (mov r8, r8)
10009580:	1001243c 	.word	0x1001243c

10009584 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
10009584:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
10009586:	4804      	ldr	r0, [pc, #16]	; (10009598 <ble_undefined_event_handler+0x14>)
10009588:	4b04      	ldr	r3, [pc, #16]	; (1000959c <ble_undefined_event_handler+0x18>)
1000958a:	4798      	blx	r3
1000958c:	4804      	ldr	r0, [pc, #16]	; (100095a0 <ble_undefined_event_handler+0x1c>)
1000958e:	4b05      	ldr	r3, [pc, #20]	; (100095a4 <ble_undefined_event_handler+0x20>)
10009590:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009592:	2000      	movs	r0, #0
10009594:	bd10      	pop	{r4, pc}
10009596:	46c0      	nop			; (mov r8, r8)
10009598:	10010d64 	.word	0x10010d64
1000959c:	1000fa99 	.word	0x1000fa99
100095a0:	100113ec 	.word	0x100113ec
100095a4:	1000f979 	.word	0x1000f979

100095a8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
100095a8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
100095aa:	7800      	ldrb	r0, [r0, #0]
100095ac:	2800      	cmp	r0, #0
100095ae:	d006      	beq.n	100095be <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
100095b0:	4803      	ldr	r0, [pc, #12]	; (100095c0 <ble_scan_report_handler+0x18>)
100095b2:	4b04      	ldr	r3, [pc, #16]	; (100095c4 <ble_scan_report_handler+0x1c>)
100095b4:	4798      	blx	r3
100095b6:	4804      	ldr	r0, [pc, #16]	; (100095c8 <ble_scan_report_handler+0x20>)
100095b8:	4b04      	ldr	r3, [pc, #16]	; (100095cc <ble_scan_report_handler+0x24>)
100095ba:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100095bc:	20e2      	movs	r0, #226	; 0xe2
}
100095be:	bd10      	pop	{r4, pc}
100095c0:	10010d64 	.word	0x10010d64
100095c4:	1000fa99 	.word	0x1000fa99
100095c8:	10011408 	.word	0x10011408
100095cc:	1000f979 	.word	0x1000f979

100095d0 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
100095d0:	b510      	push	{r4, lr}
100095d2:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
100095d4:	4804      	ldr	r0, [pc, #16]	; (100095e8 <ble_mtu_changed_indication_handler+0x18>)
100095d6:	4b05      	ldr	r3, [pc, #20]	; (100095ec <ble_mtu_changed_indication_handler+0x1c>)
100095d8:	4798      	blx	r3
100095da:	8862      	ldrh	r2, [r4, #2]
100095dc:	8821      	ldrh	r1, [r4, #0]
100095de:	4804      	ldr	r0, [pc, #16]	; (100095f0 <ble_mtu_changed_indication_handler+0x20>)
100095e0:	4b04      	ldr	r3, [pc, #16]	; (100095f4 <ble_mtu_changed_indication_handler+0x24>)
100095e2:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
100095e4:	2000      	movs	r0, #0
100095e6:	bd10      	pop	{r4, pc}
100095e8:	10010d64 	.word	0x10010d64
100095ec:	1000fa99 	.word	0x1000fa99
100095f0:	1001141c 	.word	0x1001141c
100095f4:	1000f979 	.word	0x1000f979

100095f8 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
100095f8:	b570      	push	{r4, r5, r6, lr}
100095fa:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100095fc:	78c5      	ldrb	r5, [r0, #3]
100095fe:	2d00      	cmp	r5, #0
10009600:	d108      	bne.n	10009614 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
10009602:	480a      	ldr	r0, [pc, #40]	; (1000962c <ble_mtu_changed_cmd_complete_handler+0x34>)
10009604:	4b0a      	ldr	r3, [pc, #40]	; (10009630 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009606:	4798      	blx	r3
10009608:	78a2      	ldrb	r2, [r4, #2]
1000960a:	8821      	ldrh	r1, [r4, #0]
1000960c:	4809      	ldr	r0, [pc, #36]	; (10009634 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000960e:	4b0a      	ldr	r3, [pc, #40]	; (10009638 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009610:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009612:	e008      	b.n	10009626 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009614:	4805      	ldr	r0, [pc, #20]	; (1000962c <ble_mtu_changed_cmd_complete_handler+0x34>)
10009616:	4b06      	ldr	r3, [pc, #24]	; (10009630 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009618:	4798      	blx	r3
1000961a:	78a2      	ldrb	r2, [r4, #2]
1000961c:	8821      	ldrh	r1, [r4, #0]
1000961e:	4807      	ldr	r0, [pc, #28]	; (1000963c <ble_mtu_changed_cmd_complete_handler+0x44>)
10009620:	4b05      	ldr	r3, [pc, #20]	; (10009638 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009622:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009624:	25e2      	movs	r5, #226	; 0xe2
}
10009626:	0028      	movs	r0, r5
10009628:	bd70      	pop	{r4, r5, r6, pc}
1000962a:	46c0      	nop			; (mov r8, r8)
1000962c:	10010d64 	.word	0x10010d64
10009630:	1000fa99 	.word	0x1000fa99
10009634:	10011454 	.word	0x10011454
10009638:	1000f979 	.word	0x1000f979
1000963c:	10011484 	.word	0x10011484

10009640 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
10009640:	b570      	push	{r4, r5, r6, lr}
10009642:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009644:	78c5      	ldrb	r5, [r0, #3]
10009646:	2d00      	cmp	r5, #0
10009648:	d108      	bne.n	1000965c <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000964a:	480a      	ldr	r0, [pc, #40]	; (10009674 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000964c:	4b0a      	ldr	r3, [pc, #40]	; (10009678 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000964e:	4798      	blx	r3
10009650:	78a2      	ldrb	r2, [r4, #2]
10009652:	8821      	ldrh	r1, [r4, #0]
10009654:	4809      	ldr	r0, [pc, #36]	; (1000967c <ble_characteristic_write_cmd_complete_handler+0x3c>)
10009656:	4b0a      	ldr	r3, [pc, #40]	; (10009680 <ble_characteristic_write_cmd_complete_handler+0x40>)
10009658:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000965a:	e008      	b.n	1000966e <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000965c:	4805      	ldr	r0, [pc, #20]	; (10009674 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000965e:	4b06      	ldr	r3, [pc, #24]	; (10009678 <ble_characteristic_write_cmd_complete_handler+0x38>)
10009660:	4798      	blx	r3
10009662:	78a2      	ldrb	r2, [r4, #2]
10009664:	8821      	ldrh	r1, [r4, #0]
10009666:	4807      	ldr	r0, [pc, #28]	; (10009684 <ble_characteristic_write_cmd_complete_handler+0x44>)
10009668:	4b05      	ldr	r3, [pc, #20]	; (10009680 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000966a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000966c:	25e2      	movs	r5, #226	; 0xe2
}
1000966e:	0028      	movs	r0, r5
10009670:	bd70      	pop	{r4, r5, r6, pc}
10009672:	46c0      	nop			; (mov r8, r8)
10009674:	10010d64 	.word	0x10010d64
10009678:	1000fa99 	.word	0x1000fa99
1000967c:	100114bc 	.word	0x100114bc
10009680:	1000f979 	.word	0x1000f979
10009684:	100114f8 	.word	0x100114f8

10009688 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000968a:	0006      	movs	r6, r0
1000968c:	4c1d      	ldr	r4, [pc, #116]	; (10009704 <ble_disconnected_state_handler+0x7c>)
1000968e:	239b      	movs	r3, #155	; 0x9b
10009690:	009b      	lsls	r3, r3, #2
10009692:	18e7      	adds	r7, r4, r3
10009694:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009696:	0023      	movs	r3, r4
10009698:	3b56      	subs	r3, #86	; 0x56
1000969a:	881a      	ldrh	r2, [r3, #0]
1000969c:	8833      	ldrh	r3, [r6, #0]
1000969e:	429a      	cmp	r2, r3
100096a0:	d122      	bne.n	100096e8 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100096a2:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
100096a4:	2b05      	cmp	r3, #5
100096a6:	d001      	beq.n	100096ac <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100096a8:	2b08      	cmp	r3, #8
100096aa:	d102      	bne.n	100096b2 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
100096ac:	2301      	movs	r3, #1
100096ae:	702b      	strb	r3, [r5, #0]
100096b0:	e01a      	b.n	100096e8 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
100096b2:	2b07      	cmp	r3, #7
100096b4:	d80f      	bhi.n	100096d6 <ble_disconnected_state_handler+0x4e>
100096b6:	009b      	lsls	r3, r3, #2
100096b8:	4a13      	ldr	r2, [pc, #76]	; (10009708 <ble_disconnected_state_handler+0x80>)
100096ba:	58d3      	ldr	r3, [r2, r3]
100096bc:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100096be:	2300      	movs	r3, #0
100096c0:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
100096c2:	4b12      	ldr	r3, [pc, #72]	; (1000970c <ble_disconnected_state_handler+0x84>)
100096c4:	781b      	ldrb	r3, [r3, #0]
100096c6:	2b00      	cmp	r3, #0
100096c8:	d00e      	beq.n	100096e8 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
100096ca:	4a10      	ldr	r2, [pc, #64]	; (1000970c <ble_disconnected_state_handler+0x84>)
100096cc:	7813      	ldrb	r3, [r2, #0]
100096ce:	3b01      	subs	r3, #1
100096d0:	b2db      	uxtb	r3, r3
100096d2:	7013      	strb	r3, [r2, #0]
100096d4:	e008      	b.n	100096e8 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
100096d6:	480e      	ldr	r0, [pc, #56]	; (10009710 <ble_disconnected_state_handler+0x88>)
100096d8:	4b0e      	ldr	r3, [pc, #56]	; (10009714 <ble_disconnected_state_handler+0x8c>)
100096da:	4798      	blx	r3
100096dc:	7829      	ldrb	r1, [r5, #0]
100096de:	480e      	ldr	r0, [pc, #56]	; (10009718 <ble_disconnected_state_handler+0x90>)
100096e0:	4b0e      	ldr	r3, [pc, #56]	; (1000971c <ble_disconnected_state_handler+0x94>)
100096e2:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100096e4:	2300      	movs	r3, #0
100096e6:	702b      	strb	r3, [r5, #0]
100096e8:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100096ea:	42bc      	cmp	r4, r7
100096ec:	d1d2      	bne.n	10009694 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
100096ee:	4808      	ldr	r0, [pc, #32]	; (10009710 <ble_disconnected_state_handler+0x88>)
100096f0:	4b08      	ldr	r3, [pc, #32]	; (10009714 <ble_disconnected_state_handler+0x8c>)
100096f2:	4798      	blx	r3
100096f4:	8832      	ldrh	r2, [r6, #0]
100096f6:	78b1      	ldrb	r1, [r6, #2]
100096f8:	4809      	ldr	r0, [pc, #36]	; (10009720 <ble_disconnected_state_handler+0x98>)
100096fa:	4b08      	ldr	r3, [pc, #32]	; (1000971c <ble_disconnected_state_handler+0x94>)
100096fc:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100096fe:	2000      	movs	r0, #0
10009700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009702:	46c0      	nop			; (mov r8, r8)
10009704:	100127d2 	.word	0x100127d2
10009708:	1001127c 	.word	0x1001127c
1000970c:	100129e0 	.word	0x100129e0
10009710:	10010d64 	.word	0x10010d64
10009714:	1000fa99 	.word	0x1000fa99
10009718:	10011534 	.word	0x10011534
1000971c:	1000f979 	.word	0x1000f979
10009720:	1001154c 	.word	0x1001154c

10009724 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
10009724:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
10009726:	4804      	ldr	r0, [pc, #16]	; (10009738 <ble_conn_param_update+0x14>)
10009728:	4b04      	ldr	r3, [pc, #16]	; (1000973c <ble_conn_param_update+0x18>)
1000972a:	4798      	blx	r3
1000972c:	4804      	ldr	r0, [pc, #16]	; (10009740 <ble_conn_param_update+0x1c>)
1000972e:	4b05      	ldr	r3, [pc, #20]	; (10009744 <ble_conn_param_update+0x20>)
10009730:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009732:	2000      	movs	r0, #0
10009734:	bd10      	pop	{r4, pc}
10009736:	46c0      	nop			; (mov r8, r8)
10009738:	10010d64 	.word	0x10010d64
1000973c:	1000fa99 	.word	0x1000fa99
10009740:	1001157c 	.word	0x1001157c
10009744:	1000f979 	.word	0x1000f979

10009748 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000974a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000974c:	8801      	ldrh	r1, [r0, #0]
1000974e:	4b28      	ldr	r3, [pc, #160]	; (100097f0 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009750:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009752:	891a      	ldrh	r2, [r3, #8]
10009754:	428a      	cmp	r2, r1
10009756:	d104      	bne.n	10009762 <ble_encryption_status_change_handler+0x1a>
10009758:	001a      	movs	r2, r3
1000975a:	325e      	adds	r2, #94	; 0x5e
1000975c:	7812      	ldrb	r2, [r2, #0]
1000975e:	2a06      	cmp	r2, #6
10009760:	d02e      	beq.n	100097c0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009762:	3401      	adds	r4, #1
10009764:	b2e4      	uxtb	r4, r4
10009766:	337c      	adds	r3, #124	; 0x7c
10009768:	2c05      	cmp	r4, #5
1000976a:	d1f2      	bne.n	10009752 <ble_encryption_status_change_handler+0xa>
1000976c:	e039      	b.n	100097e2 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000976e:	4920      	ldr	r1, [pc, #128]	; (100097f0 <ble_encryption_status_change_handler+0xa8>)
10009770:	0163      	lsls	r3, r4, #5
10009772:	1b1a      	subs	r2, r3, r4
10009774:	0092      	lsls	r2, r2, #2
10009776:	188a      	adds	r2, r1, r2
10009778:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000977a:	0014      	movs	r4, r2
1000977c:	345e      	adds	r4, #94	; 0x5e
1000977e:	2307      	movs	r3, #7
10009780:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009782:	481c      	ldr	r0, [pc, #112]	; (100097f4 <ble_encryption_status_change_handler+0xac>)
10009784:	4b1c      	ldr	r3, [pc, #112]	; (100097f8 <ble_encryption_status_change_handler+0xb0>)
10009786:	4798      	blx	r3
10009788:	481c      	ldr	r0, [pc, #112]	; (100097fc <ble_encryption_status_change_handler+0xb4>)
1000978a:	4b1d      	ldr	r3, [pc, #116]	; (10009800 <ble_encryption_status_change_handler+0xb8>)
1000978c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000978e:	25e2      	movs	r5, #226	; 0xe2
10009790:	e02b      	b.n	100097ea <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009792:	4818      	ldr	r0, [pc, #96]	; (100097f4 <ble_encryption_status_change_handler+0xac>)
10009794:	4b18      	ldr	r3, [pc, #96]	; (100097f8 <ble_encryption_status_change_handler+0xb0>)
10009796:	4798      	blx	r3
10009798:	481a      	ldr	r0, [pc, #104]	; (10009804 <ble_encryption_status_change_handler+0xbc>)
1000979a:	4b19      	ldr	r3, [pc, #100]	; (10009800 <ble_encryption_status_change_handler+0xb8>)
1000979c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000979e:	4914      	ldr	r1, [pc, #80]	; (100097f0 <ble_encryption_status_change_handler+0xa8>)
100097a0:	0163      	lsls	r3, r4, #5
100097a2:	1b1a      	subs	r2, r3, r4
100097a4:	0092      	lsls	r2, r2, #2
100097a6:	188a      	adds	r2, r1, r2
100097a8:	0010      	movs	r0, r2
100097aa:	305e      	adds	r0, #94	; 0x5e
100097ac:	2708      	movs	r7, #8
100097ae:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
100097b0:	78f0      	ldrb	r0, [r6, #3]
100097b2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
100097b4:	78b2      	ldrb	r2, [r6, #2]
100097b6:	1b1c      	subs	r4, r3, r4
100097b8:	00a4      	lsls	r4, r4, #2
100097ba:	190c      	adds	r4, r1, r4
100097bc:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
100097be:	e014      	b.n	100097ea <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
100097c0:	78b5      	ldrb	r5, [r6, #2]
100097c2:	2d00      	cmp	r5, #0
100097c4:	d0e5      	beq.n	10009792 <ble_encryption_status_change_handler+0x4a>
100097c6:	e7d2      	b.n	1000976e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
100097c8:	4e0a      	ldr	r6, [pc, #40]	; (100097f4 <ble_encryption_status_change_handler+0xac>)
100097ca:	0030      	movs	r0, r6
100097cc:	4d0a      	ldr	r5, [pc, #40]	; (100097f8 <ble_encryption_status_change_handler+0xb0>)
100097ce:	47a8      	blx	r5
100097d0:	480c      	ldr	r0, [pc, #48]	; (10009804 <ble_encryption_status_change_handler+0xbc>)
100097d2:	4c0b      	ldr	r4, [pc, #44]	; (10009800 <ble_encryption_status_change_handler+0xb8>)
100097d4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
100097d6:	0030      	movs	r0, r6
100097d8:	47a8      	blx	r5
100097da:	480b      	ldr	r0, [pc, #44]	; (10009808 <ble_encryption_status_change_handler+0xc0>)
100097dc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
100097de:	25e2      	movs	r5, #226	; 0xe2
100097e0:	e003      	b.n	100097ea <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
100097e2:	78b5      	ldrb	r5, [r6, #2]
100097e4:	2d00      	cmp	r5, #0
100097e6:	d1c2      	bne.n	1000976e <ble_encryption_status_change_handler+0x26>
100097e8:	e7ee      	b.n	100097c8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
100097ea:	0028      	movs	r0, r5
100097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100097ee:	46c0      	nop			; (mov r8, r8)
100097f0:	10012774 	.word	0x10012774
100097f4:	10010d64 	.word	0x10010d64
100097f8:	1000fa99 	.word	0x1000fa99
100097fc:	10011598 	.word	0x10011598
10009800:	1000f979 	.word	0x1000f979
10009804:	100115ac 	.word	0x100115ac
10009808:	100115d0 	.word	0x100115d0

1000980c <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000980c:	b530      	push	{r4, r5, lr}
1000980e:	b085      	sub	sp, #20
10009810:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009812:	4b1f      	ldr	r3, [pc, #124]	; (10009890 <ble_scan_info_handler+0x84>)
10009814:	781b      	ldrb	r3, [r3, #0]
10009816:	b2db      	uxtb	r3, r3
10009818:	2b13      	cmp	r3, #19
1000981a:	d824      	bhi.n	10009866 <ble_scan_info_handler+0x5a>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000981c:	4d1c      	ldr	r5, [pc, #112]	; (10009890 <ble_scan_info_handler+0x84>)
1000981e:	782b      	ldrb	r3, [r5, #0]
10009820:	b2db      	uxtb	r3, r3
10009822:	0098      	lsls	r0, r3, #2
10009824:	18c0      	adds	r0, r0, r3
10009826:	00c0      	lsls	r0, r0, #3
10009828:	18c3      	adds	r3, r0, r3
1000982a:	481a      	ldr	r0, [pc, #104]	; (10009894 <ble_scan_info_handler+0x88>)
1000982c:	1818      	adds	r0, r3, r0
1000982e:	2229      	movs	r2, #41	; 0x29
10009830:	0021      	movs	r1, r4
10009832:	4b19      	ldr	r3, [pc, #100]	; (10009898 <ble_scan_info_handler+0x8c>)
10009834:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009836:	4819      	ldr	r0, [pc, #100]	; (1000989c <ble_scan_info_handler+0x90>)
10009838:	4b19      	ldr	r3, [pc, #100]	; (100098a0 <ble_scan_info_handler+0x94>)
1000983a:	4798      	blx	r3
1000983c:	7829      	ldrb	r1, [r5, #0]
1000983e:	b2c9      	uxtb	r1, r1
10009840:	79a3      	ldrb	r3, [r4, #6]
10009842:	79e2      	ldrb	r2, [r4, #7]
10009844:	78a0      	ldrb	r0, [r4, #2]
10009846:	9003      	str	r0, [sp, #12]
10009848:	78e0      	ldrb	r0, [r4, #3]
1000984a:	9002      	str	r0, [sp, #8]
1000984c:	7920      	ldrb	r0, [r4, #4]
1000984e:	9001      	str	r0, [sp, #4]
10009850:	7960      	ldrb	r0, [r4, #5]
10009852:	9000      	str	r0, [sp, #0]
10009854:	4813      	ldr	r0, [pc, #76]	; (100098a4 <ble_scan_info_handler+0x98>)
10009856:	4c14      	ldr	r4, [pc, #80]	; (100098a8 <ble_scan_info_handler+0x9c>)
10009858:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000985a:	782b      	ldrb	r3, [r5, #0]
1000985c:	3301      	adds	r3, #1
1000985e:	b2db      	uxtb	r3, r3
10009860:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
10009862:	2300      	movs	r3, #0
10009864:	e011      	b.n	1000988a <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009866:	480d      	ldr	r0, [pc, #52]	; (1000989c <ble_scan_info_handler+0x90>)
10009868:	4b0d      	ldr	r3, [pc, #52]	; (100098a0 <ble_scan_info_handler+0x94>)
1000986a:	4798      	blx	r3
1000986c:	480f      	ldr	r0, [pc, #60]	; (100098ac <ble_scan_info_handler+0xa0>)
1000986e:	4b0e      	ldr	r3, [pc, #56]	; (100098a8 <ble_scan_info_handler+0x9c>)
10009870:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009872:	4b0f      	ldr	r3, [pc, #60]	; (100098b0 <ble_scan_info_handler+0xa4>)
10009874:	4798      	blx	r3
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
10009876:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009878:	2800      	cmp	r0, #0
1000987a:	d006      	beq.n	1000988a <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000987c:	4807      	ldr	r0, [pc, #28]	; (1000989c <ble_scan_info_handler+0x90>)
1000987e:	4b08      	ldr	r3, [pc, #32]	; (100098a0 <ble_scan_info_handler+0x94>)
10009880:	4798      	blx	r3
10009882:	480c      	ldr	r0, [pc, #48]	; (100098b4 <ble_scan_info_handler+0xa8>)
10009884:	4b08      	ldr	r3, [pc, #32]	; (100098a8 <ble_scan_info_handler+0x9c>)
10009886:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
10009888:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000988a:	0018      	movs	r0, r3
1000988c:	b005      	add	sp, #20
1000988e:	bd30      	pop	{r4, r5, pc}
10009890:	10012450 	.word	0x10012450
10009894:	10012a48 	.word	0x10012a48
10009898:	1000f957 	.word	0x1000f957
1000989c:	10010d64 	.word	0x10010d64
100098a0:	1000fa99 	.word	0x1000fa99
100098a4:	100115f8 	.word	0x100115f8
100098a8:	1000f979 	.word	0x1000f979
100098ac:	10011634 	.word	0x10011634
100098b0:	1000c871 	.word	0x1000c871
100098b4:	1001166c 	.word	0x1001166c

100098b8 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
100098b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100098ba:	4647      	mov	r7, r8
100098bc:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
100098be:	7803      	ldrb	r3, [r0, #0]
100098c0:	2b00      	cmp	r3, #0
100098c2:	d14d      	bne.n	10009960 <ble_resolv_rand_addr_handler+0xa8>
100098c4:	4d33      	ldr	r5, [pc, #204]	; (10009994 <ble_resolv_rand_addr_handler+0xdc>)
100098c6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
100098c8:	1c46      	adds	r6, r0, #1
100098ca:	4f33      	ldr	r7, [pc, #204]	; (10009998 <ble_resolv_rand_addr_handler+0xe0>)
100098cc:	2210      	movs	r2, #16
100098ce:	0029      	movs	r1, r5
100098d0:	0030      	movs	r0, r6
100098d2:	47b8      	blx	r7
100098d4:	2800      	cmp	r0, #0
100098d6:	d02c      	beq.n	10009932 <ble_resolv_rand_addr_handler+0x7a>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100098d8:	3401      	adds	r4, #1
100098da:	b2e4      	uxtb	r4, r4
100098dc:	357c      	adds	r5, #124	; 0x7c
100098de:	2c05      	cmp	r4, #5
100098e0:	d1f4      	bne.n	100098cc <ble_resolv_rand_addr_handler+0x14>
100098e2:	e03d      	b.n	10009960 <ble_resolv_rand_addr_handler+0xa8>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
100098e4:	001d      	movs	r5, r3
100098e6:	7811      	ldrb	r1, [r2, #0]
100098e8:	2900      	cmp	r1, #0
100098ea:	d11b      	bne.n	10009924 <ble_resolv_rand_addr_handler+0x6c>
100098ec:	e001      	b.n	100098f2 <ble_resolv_rand_addr_handler+0x3a>
100098ee:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100098f0:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
100098f2:	4b2a      	ldr	r3, [pc, #168]	; (1000999c <ble_resolv_rand_addr_handler+0xe4>)
100098f4:	4698      	mov	r8, r3
100098f6:	016e      	lsls	r6, r5, #5
100098f8:	1b77      	subs	r7, r6, r5
100098fa:	00bf      	lsls	r7, r7, #2
100098fc:	4447      	add	r7, r8
100098fe:	2212      	movs	r2, #18
10009900:	4927      	ldr	r1, [pc, #156]	; (100099a0 <ble_resolv_rand_addr_handler+0xe8>)
10009902:	0038      	movs	r0, r7
10009904:	4b27      	ldr	r3, [pc, #156]	; (100099a4 <ble_resolv_rand_addr_handler+0xec>)
10009906:	4798      	blx	r3
				ble_device_count++;
10009908:	4a27      	ldr	r2, [pc, #156]	; (100099a8 <ble_resolv_rand_addr_handler+0xf0>)
1000990a:	7813      	ldrb	r3, [r2, #0]
1000990c:	3301      	adds	r3, #1
1000990e:	b2db      	uxtb	r3, r3
10009910:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009912:	375e      	adds	r7, #94	; 0x5e
10009914:	2302      	movs	r3, #2
10009916:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009918:	1b75      	subs	r5, r6, r5
1000991a:	00ad      	lsls	r5, r5, #2
1000991c:	4445      	add	r5, r8
1000991e:	3308      	adds	r3, #8
10009920:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
10009922:	e02c      	b.n	1000997e <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009924:	3401      	adds	r4, #1
10009926:	b2e4      	uxtb	r4, r4
10009928:	3301      	adds	r3, #1
1000992a:	327c      	adds	r2, #124	; 0x7c
1000992c:	2c05      	cmp	r4, #5
1000992e:	d1d9      	bne.n	100098e4 <ble_resolv_rand_addr_handler+0x2c>
10009930:	e025      	b.n	1000997e <ble_resolv_rand_addr_handler+0xc6>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
10009932:	481e      	ldr	r0, [pc, #120]	; (100099ac <ble_resolv_rand_addr_handler+0xf4>)
10009934:	4b1e      	ldr	r3, [pc, #120]	; (100099b0 <ble_resolv_rand_addr_handler+0xf8>)
10009936:	4798      	blx	r3
10009938:	481e      	ldr	r0, [pc, #120]	; (100099b4 <ble_resolv_rand_addr_handler+0xfc>)
1000993a:	4b1f      	ldr	r3, [pc, #124]	; (100099b8 <ble_resolv_rand_addr_handler+0x100>)
1000993c:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000993e:	4817      	ldr	r0, [pc, #92]	; (1000999c <ble_resolv_rand_addr_handler+0xe4>)
10009940:	0163      	lsls	r3, r4, #5
10009942:	1b1a      	subs	r2, r3, r4
10009944:	0092      	lsls	r2, r2, #2
10009946:	1882      	adds	r2, r0, r2
10009948:	0011      	movs	r1, r2
1000994a:	315e      	adds	r1, #94	; 0x5e
1000994c:	2502      	movs	r5, #2
1000994e:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009950:	210a      	movs	r1, #10
10009952:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10009954:	0010      	movs	r0, r2
10009956:	2212      	movs	r2, #18
10009958:	4911      	ldr	r1, [pc, #68]	; (100099a0 <ble_resolv_rand_addr_handler+0xe8>)
1000995a:	4b12      	ldr	r3, [pc, #72]	; (100099a4 <ble_resolv_rand_addr_handler+0xec>)
1000995c:	4798      	blx	r3
1000995e:	e00e      	b.n	1000997e <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
10009960:	4812      	ldr	r0, [pc, #72]	; (100099ac <ble_resolv_rand_addr_handler+0xf4>)
10009962:	4b13      	ldr	r3, [pc, #76]	; (100099b0 <ble_resolv_rand_addr_handler+0xf8>)
10009964:	4798      	blx	r3
10009966:	4815      	ldr	r0, [pc, #84]	; (100099bc <ble_resolv_rand_addr_handler+0x104>)
10009968:	4b13      	ldr	r3, [pc, #76]	; (100099b8 <ble_resolv_rand_addr_handler+0x100>)
1000996a:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000996c:	235e      	movs	r3, #94	; 0x5e
1000996e:	4a0b      	ldr	r2, [pc, #44]	; (1000999c <ble_resolv_rand_addr_handler+0xe4>)
10009970:	5cd3      	ldrb	r3, [r2, r3]
10009972:	2b00      	cmp	r3, #0
10009974:	d0bb      	beq.n	100098ee <ble_resolv_rand_addr_handler+0x36>
10009976:	4a12      	ldr	r2, [pc, #72]	; (100099c0 <ble_resolv_rand_addr_handler+0x108>)
10009978:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000997a:	2401      	movs	r4, #1
1000997c:	e7b2      	b.n	100098e4 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000997e:	480b      	ldr	r0, [pc, #44]	; (100099ac <ble_resolv_rand_addr_handler+0xf4>)
10009980:	4b0b      	ldr	r3, [pc, #44]	; (100099b0 <ble_resolv_rand_addr_handler+0xf8>)
10009982:	4798      	blx	r3
10009984:	0021      	movs	r1, r4
10009986:	480f      	ldr	r0, [pc, #60]	; (100099c4 <ble_resolv_rand_addr_handler+0x10c>)
10009988:	4b0b      	ldr	r3, [pc, #44]	; (100099b8 <ble_resolv_rand_addr_handler+0x100>)
1000998a:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000998c:	2000      	movs	r0, #0
1000998e:	bc04      	pop	{r2}
10009990:	4690      	mov	r8, r2
10009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009994:	100127ba 	.word	0x100127ba
10009998:	1000f939 	.word	0x1000f939
1000999c:	10012774 	.word	0x10012774
100099a0:	10012a20 	.word	0x10012a20
100099a4:	1000f957 	.word	0x1000f957
100099a8:	100129e0 	.word	0x100129e0
100099ac:	10010d64 	.word	0x10010d64
100099b0:	1000fa99 	.word	0x1000fa99
100099b4:	10011694 	.word	0x10011694
100099b8:	1000f979 	.word	0x1000f979
100099bc:	100116ac 	.word	0x100116ac
100099c0:	1001284e 	.word	0x1001284e
100099c4:	10011684 	.word	0x10011684

100099c8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
100099c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100099ca:	465f      	mov	r7, fp
100099cc:	464e      	mov	r6, r9
100099ce:	4645      	mov	r5, r8
100099d0:	b4e0      	push	{r5, r6, r7}
100099d2:	b09a      	sub	sp, #104	; 0x68
100099d4:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
100099d6:	7a86      	ldrb	r6, [r0, #10]
100099d8:	2e00      	cmp	r6, #0
100099da:	d000      	beq.n	100099de <ble_connected_state_handler+0x16>
100099dc:	e0bc      	b.n	10009b58 <ble_connected_state_handler+0x190>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
100099de:	4870      	ldr	r0, [pc, #448]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
100099e0:	4f70      	ldr	r7, [pc, #448]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
100099e2:	47b8      	blx	r7
100099e4:	792b      	ldrb	r3, [r5, #4]
100099e6:	796a      	ldrb	r2, [r5, #5]
100099e8:	79a9      	ldrb	r1, [r5, #6]
100099ea:	7868      	ldrb	r0, [r5, #1]
100099ec:	9002      	str	r0, [sp, #8]
100099ee:	78a8      	ldrb	r0, [r5, #2]
100099f0:	9001      	str	r0, [sp, #4]
100099f2:	78e8      	ldrb	r0, [r5, #3]
100099f4:	9000      	str	r0, [sp, #0]
100099f6:	486c      	ldr	r0, [pc, #432]	; (10009ba8 <ble_connected_state_handler+0x1e0>)
100099f8:	4c6c      	ldr	r4, [pc, #432]	; (10009bac <ble_connected_state_handler+0x1e4>)
100099fa:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
100099fc:	4868      	ldr	r0, [pc, #416]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
100099fe:	47b8      	blx	r7
10009a00:	8929      	ldrh	r1, [r5, #8]
10009a02:	486b      	ldr	r0, [pc, #428]	; (10009bb0 <ble_connected_state_handler+0x1e8>)
10009a04:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
10009a06:	2212      	movs	r2, #18
10009a08:	0029      	movs	r1, r5
10009a0a:	486a      	ldr	r0, [pc, #424]	; (10009bb4 <ble_connected_state_handler+0x1ec>)
10009a0c:	4b6a      	ldr	r3, [pc, #424]	; (10009bb8 <ble_connected_state_handler+0x1f0>)
10009a0e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009a10:	9504      	str	r5, [sp, #16]
10009a12:	2207      	movs	r2, #7
10009a14:	0029      	movs	r1, r5
10009a16:	4869      	ldr	r0, [pc, #420]	; (10009bbc <ble_connected_state_handler+0x1f4>)
10009a18:	4b69      	ldr	r3, [pc, #420]	; (10009bc0 <ble_connected_state_handler+0x1f8>)
10009a1a:	4798      	blx	r3
10009a1c:	2800      	cmp	r0, #0
10009a1e:	d100      	bne.n	10009a22 <ble_connected_state_handler+0x5a>
10009a20:	e0a3      	b.n	10009b6a <ble_connected_state_handler+0x1a2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
10009a22:	782b      	ldrb	r3, [r5, #0]
10009a24:	2b02      	cmp	r3, #2
10009a26:	d000      	beq.n	10009a2a <ble_connected_state_handler+0x62>
10009a28:	e09f      	b.n	10009b6a <ble_connected_state_handler+0x1a2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
10009a2a:	2250      	movs	r2, #80	; 0x50
10009a2c:	2100      	movs	r1, #0
10009a2e:	a806      	add	r0, sp, #24
10009a30:	4b64      	ldr	r3, [pc, #400]	; (10009bc4 <ble_connected_state_handler+0x1fc>)
10009a32:	4798      	blx	r3
10009a34:	4f64      	ldr	r7, [pc, #400]	; (10009bc8 <ble_connected_state_handler+0x200>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
10009a36:	2300      	movs	r3, #0
10009a38:	e00b      	b.n	10009a52 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009a3a:	1c59      	adds	r1, r3, #1
10009a3c:	7814      	ldrb	r4, [r2, #0]
10009a3e:	a806      	add	r0, sp, #24
10009a40:	54c4      	strb	r4, [r0, r3]
10009a42:	3201      	adds	r2, #1
10009a44:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
10009a46:	42b3      	cmp	r3, r6
10009a48:	d1f7      	bne.n	10009a3a <ble_connected_state_handler+0x72>
10009a4a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009a4c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
10009a4e:	2b50      	cmp	r3, #80	; 0x50
10009a50:	d004      	beq.n	10009a5c <ble_connected_state_handler+0x94>
10009a52:	001e      	movs	r6, r3
10009a54:	3610      	adds	r6, #16
10009a56:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009a58:	003a      	movs	r2, r7
10009a5a:	e7ee      	b.n	10009a3a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
10009a5c:	aa06      	add	r2, sp, #24
10009a5e:	0029      	movs	r1, r5
10009a60:	2005      	movs	r0, #5
10009a62:	4b5a      	ldr	r3, [pc, #360]	; (10009bcc <ble_connected_state_handler+0x204>)
10009a64:	4798      	blx	r3
10009a66:	1e06      	subs	r6, r0, #0
10009a68:	d106      	bne.n	10009a78 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
10009a6a:	484d      	ldr	r0, [pc, #308]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009a6c:	4b4d      	ldr	r3, [pc, #308]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009a6e:	4798      	blx	r3
10009a70:	4857      	ldr	r0, [pc, #348]	; (10009bd0 <ble_connected_state_handler+0x208>)
10009a72:	4b4e      	ldr	r3, [pc, #312]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009a74:	4798      	blx	r3
						return AT_BLE_SUCCESS;
10009a76:	e08c      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
10009a78:	4849      	ldr	r0, [pc, #292]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009a7a:	4b4a      	ldr	r3, [pc, #296]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009a7c:	4798      	blx	r3
10009a7e:	4855      	ldr	r0, [pc, #340]	; (10009bd4 <ble_connected_state_handler+0x20c>)
10009a80:	4b4a      	ldr	r3, [pc, #296]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009a82:	4798      	blx	r3
						return AT_BLE_FAILURE;
10009a84:	26e2      	movs	r6, #226	; 0xe2
10009a86:	e084      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
10009a88:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009a8a:	9405      	str	r4, [sp, #20]
10009a8c:	2207      	movs	r2, #7
10009a8e:	9904      	ldr	r1, [sp, #16]
10009a90:	4648      	mov	r0, r9
10009a92:	47d8      	blx	fp
10009a94:	2800      	cmp	r0, #0
10009a96:	d109      	bne.n	10009aac <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009a98:	9a05      	ldr	r2, [sp, #20]
10009a9a:	0153      	lsls	r3, r2, #5
10009a9c:	1a9b      	subs	r3, r3, r2
10009a9e:	009a      	lsls	r2, r3, #2
10009aa0:	4b4d      	ldr	r3, [pc, #308]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009aa2:	189b      	adds	r3, r3, r2
10009aa4:	335e      	adds	r3, #94	; 0x5e
10009aa6:	2202      	movs	r2, #2
10009aa8:	701a      	strb	r2, [r3, #0]
10009aaa:	e02b      	b.n	10009b04 <ble_connected_state_handler+0x13c>
10009aac:	3401      	adds	r4, #1
10009aae:	237c      	movs	r3, #124	; 0x7c
10009ab0:	469c      	mov	ip, r3
10009ab2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ab4:	2c05      	cmp	r4, #5
10009ab6:	d1e7      	bne.n	10009a88 <ble_connected_state_handler+0xc0>
10009ab8:	e062      	b.n	10009b80 <ble_connected_state_handler+0x1b8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009aba:	001c      	movs	r4, r3
10009abc:	7811      	ldrb	r1, [r2, #0]
10009abe:	2900      	cmp	r1, #0
10009ac0:	d11a      	bne.n	10009af8 <ble_connected_state_handler+0x130>
10009ac2:	e001      	b.n	10009ac8 <ble_connected_state_handler+0x100>
10009ac4:	2400      	movs	r4, #0
10009ac6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
10009ac8:	0163      	lsls	r3, r4, #5
10009aca:	4699      	mov	r9, r3
10009acc:	1b18      	subs	r0, r3, r4
10009ace:	0080      	lsls	r0, r0, #2
10009ad0:	4b41      	ldr	r3, [pc, #260]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009ad2:	4698      	mov	r8, r3
10009ad4:	4440      	add	r0, r8
10009ad6:	2212      	movs	r2, #18
10009ad8:	0029      	movs	r1, r5
10009ada:	4b37      	ldr	r3, [pc, #220]	; (10009bb8 <ble_connected_state_handler+0x1f0>)
10009adc:	4798      	blx	r3
						ble_device_count++;
10009ade:	4a3f      	ldr	r2, [pc, #252]	; (10009bdc <ble_connected_state_handler+0x214>)
10009ae0:	7813      	ldrb	r3, [r2, #0]
10009ae2:	3301      	adds	r3, #1
10009ae4:	b2db      	uxtb	r3, r3
10009ae6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009ae8:	464b      	mov	r3, r9
10009aea:	1b1b      	subs	r3, r3, r4
10009aec:	009b      	lsls	r3, r3, #2
10009aee:	4443      	add	r3, r8
10009af0:	335e      	adds	r3, #94	; 0x5e
10009af2:	2202      	movs	r2, #2
10009af4:	701a      	strb	r2, [r3, #0]
						break;
10009af6:	e005      	b.n	10009b04 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009af8:	1c79      	adds	r1, r7, #1
10009afa:	b2cf      	uxtb	r7, r1
10009afc:	3301      	adds	r3, #1
10009afe:	327c      	adds	r2, #124	; 0x7c
10009b00:	2f05      	cmp	r7, #5
10009b02:	d1da      	bne.n	10009aba <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009b04:	2207      	movs	r2, #7
10009b06:	0029      	movs	r1, r5
10009b08:	482c      	ldr	r0, [pc, #176]	; (10009bbc <ble_connected_state_handler+0x1f4>)
10009b0a:	4b2d      	ldr	r3, [pc, #180]	; (10009bc0 <ble_connected_state_handler+0x1f8>)
10009b0c:	4798      	blx	r3
10009b0e:	2800      	cmp	r0, #0
10009b10:	d107      	bne.n	10009b22 <ble_connected_state_handler+0x15a>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
10009b12:	017b      	lsls	r3, r7, #5
10009b14:	1bdb      	subs	r3, r3, r7
10009b16:	009b      	lsls	r3, r3, #2
10009b18:	4a2f      	ldr	r2, [pc, #188]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b1a:	18d3      	adds	r3, r2, r3
10009b1c:	2205      	movs	r2, #5
10009b1e:	749a      	strb	r2, [r3, #18]
10009b20:	e006      	b.n	10009b30 <ble_connected_state_handler+0x168>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009b22:	017b      	lsls	r3, r7, #5
10009b24:	1bdb      	subs	r3, r3, r7
10009b26:	009b      	lsls	r3, r3, #2
10009b28:	4a2b      	ldr	r2, [pc, #172]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b2a:	18d3      	adds	r3, r2, r3
10009b2c:	220a      	movs	r2, #10
10009b2e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009b30:	2207      	movs	r2, #7
10009b32:	2100      	movs	r1, #0
10009b34:	4821      	ldr	r0, [pc, #132]	; (10009bbc <ble_connected_state_handler+0x1f4>)
10009b36:	4b23      	ldr	r3, [pc, #140]	; (10009bc4 <ble_connected_state_handler+0x1fc>)
10009b38:	4798      	blx	r3
10009b3a:	e02a      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
10009b3c:	4818      	ldr	r0, [pc, #96]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009b3e:	4b19      	ldr	r3, [pc, #100]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009b40:	4798      	blx	r3
10009b42:	4b26      	ldr	r3, [pc, #152]	; (10009bdc <ble_connected_state_handler+0x214>)
10009b44:	7819      	ldrb	r1, [r3, #0]
10009b46:	b2c9      	uxtb	r1, r1
10009b48:	4825      	ldr	r0, [pc, #148]	; (10009be0 <ble_connected_state_handler+0x218>)
10009b4a:	4b18      	ldr	r3, [pc, #96]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009b4c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
10009b4e:	8928      	ldrh	r0, [r5, #8]
10009b50:	2113      	movs	r1, #19
10009b52:	4b24      	ldr	r3, [pc, #144]	; (10009be4 <ble_connected_state_handler+0x21c>)
10009b54:	4798      	blx	r3
10009b56:	e01c      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
10009b58:	4811      	ldr	r0, [pc, #68]	; (10009ba0 <ble_connected_state_handler+0x1d8>)
10009b5a:	4b12      	ldr	r3, [pc, #72]	; (10009ba4 <ble_connected_state_handler+0x1dc>)
10009b5c:	4798      	blx	r3
10009b5e:	7aa9      	ldrb	r1, [r5, #10]
10009b60:	4821      	ldr	r0, [pc, #132]	; (10009be8 <ble_connected_state_handler+0x220>)
10009b62:	4b12      	ldr	r3, [pc, #72]	; (10009bac <ble_connected_state_handler+0x1e4>)
10009b64:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
10009b66:	2600      	movs	r6, #0
10009b68:	e013      	b.n	10009b92 <ble_connected_state_handler+0x1ca>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
10009b6a:	4b1c      	ldr	r3, [pc, #112]	; (10009bdc <ble_connected_state_handler+0x214>)
10009b6c:	781b      	ldrb	r3, [r3, #0]
10009b6e:	b2db      	uxtb	r3, r3
10009b70:	2b04      	cmp	r3, #4
10009b72:	d8e3      	bhi.n	10009b3c <ble_connected_state_handler+0x174>
10009b74:	4b18      	ldr	r3, [pc, #96]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b76:	4699      	mov	r9, r3
10009b78:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009b7a:	4b11      	ldr	r3, [pc, #68]	; (10009bc0 <ble_connected_state_handler+0x1f8>)
10009b7c:	469b      	mov	fp, r3
10009b7e:	e783      	b.n	10009a88 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009b80:	235e      	movs	r3, #94	; 0x5e
10009b82:	4a15      	ldr	r2, [pc, #84]	; (10009bd8 <ble_connected_state_handler+0x210>)
10009b84:	5cd3      	ldrb	r3, [r2, r3]
10009b86:	2b00      	cmp	r3, #0
10009b88:	d09c      	beq.n	10009ac4 <ble_connected_state_handler+0xfc>
10009b8a:	4a18      	ldr	r2, [pc, #96]	; (10009bec <ble_connected_state_handler+0x224>)
10009b8c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b8e:	2701      	movs	r7, #1
10009b90:	e793      	b.n	10009aba <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
10009b92:	0030      	movs	r0, r6
10009b94:	b01a      	add	sp, #104	; 0x68
10009b96:	bc1c      	pop	{r2, r3, r4}
10009b98:	4690      	mov	r8, r2
10009b9a:	4699      	mov	r9, r3
10009b9c:	46a3      	mov	fp, r4
10009b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ba0:	10010d64 	.word	0x10010d64
10009ba4:	1000fa99 	.word	0x1000fa99
10009ba8:	100116c8 	.word	0x100116c8
10009bac:	1000f979 	.word	0x1000f979
10009bb0:	1001170c 	.word	0x1001170c
10009bb4:	10012a20 	.word	0x10012a20
10009bb8:	1000f957 	.word	0x1000f957
10009bbc:	10012454 	.word	0x10012454
10009bc0:	1000f939 	.word	0x1000f939
10009bc4:	1000f969 	.word	0x1000f969
10009bc8:	100127ba 	.word	0x100127ba
10009bcc:	1000c995 	.word	0x1000c995
10009bd0:	10011724 	.word	0x10011724
10009bd4:	10011748 	.word	0x10011748
10009bd8:	10012774 	.word	0x10012774
10009bdc:	100129e0 	.word	0x100129e0
10009be0:	1001176c 	.word	0x1001176c
10009be4:	1000c969 	.word	0x1000c969
10009be8:	100117a8 	.word	0x100117a8
10009bec:	1001284e 	.word	0x1001284e

10009bf0 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bf2:	465f      	mov	r7, fp
10009bf4:	4656      	mov	r6, sl
10009bf6:	464d      	mov	r5, r9
10009bf8:	4644      	mov	r4, r8
10009bfa:	b4f0      	push	{r4, r5, r6, r7}
10009bfc:	b083      	sub	sp, #12
10009bfe:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009c00:	8841      	ldrh	r1, [r0, #2]
10009c02:	4b59      	ldr	r3, [pc, #356]	; (10009d68 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c04:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009c06:	891a      	ldrh	r2, [r3, #8]
10009c08:	428a      	cmp	r2, r1
10009c0a:	d105      	bne.n	10009c18 <ble_pair_done_handler+0x28>
10009c0c:	001a      	movs	r2, r3
10009c0e:	325e      	adds	r2, #94	; 0x5e
10009c10:	7812      	ldrb	r2, [r2, #0]
10009c12:	2a03      	cmp	r2, #3
10009c14:	d100      	bne.n	10009c18 <ble_pair_done_handler+0x28>
10009c16:	e09a      	b.n	10009d4e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c18:	3401      	adds	r4, #1
10009c1a:	b2e4      	uxtb	r4, r4
10009c1c:	337c      	adds	r3, #124	; 0x7c
10009c1e:	2c05      	cmp	r4, #5
10009c20:	d1f1      	bne.n	10009c06 <ble_pair_done_handler+0x16>
10009c22:	e057      	b.n	10009cd4 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
10009c24:	7821      	ldrb	r1, [r4, #0]
10009c26:	0030      	movs	r0, r6
10009c28:	47b8      	blx	r7
10009c2a:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
10009c2c:	454c      	cmp	r4, r9
10009c2e:	d1f9      	bne.n	10009c24 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
10009c30:	484e      	ldr	r0, [pc, #312]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009c32:	4b4f      	ldr	r3, [pc, #316]	; (10009d70 <ble_pair_done_handler+0x180>)
10009c34:	4798      	blx	r3
10009c36:	484f      	ldr	r0, [pc, #316]	; (10009d74 <ble_pair_done_handler+0x184>)
10009c38:	4b4f      	ldr	r3, [pc, #316]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c3a:	4798      	blx	r3
10009c3c:	002e      	movs	r6, r5
10009c3e:	3622      	adds	r6, #34	; 0x22
10009c40:	002c      	movs	r4, r5
10009c42:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
10009c44:	4f4c      	ldr	r7, [pc, #304]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c46:	7831      	ldrb	r1, [r6, #0]
10009c48:	484c      	ldr	r0, [pc, #304]	; (10009d7c <ble_pair_done_handler+0x18c>)
10009c4a:	47b8      	blx	r7
10009c4c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
10009c4e:	42a6      	cmp	r6, r4
10009c50:	d1f9      	bne.n	10009c46 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
10009c52:	4846      	ldr	r0, [pc, #280]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009c54:	4b46      	ldr	r3, [pc, #280]	; (10009d70 <ble_pair_done_handler+0x180>)
10009c56:	4798      	blx	r3
10009c58:	4849      	ldr	r0, [pc, #292]	; (10009d80 <ble_pair_done_handler+0x190>)
10009c5a:	4b47      	ldr	r3, [pc, #284]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c5c:	4798      	blx	r3
10009c5e:	3542      	adds	r5, #66	; 0x42
10009c60:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
10009c62:	4e46      	ldr	r6, [pc, #280]	; (10009d7c <ble_pair_done_handler+0x18c>)
10009c64:	4d44      	ldr	r5, [pc, #272]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c66:	7821      	ldrb	r1, [r4, #0]
10009c68:	0030      	movs	r0, r6
10009c6a:	47a8      	blx	r5
10009c6c:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
10009c6e:	42bc      	cmp	r4, r7
10009c70:	d1f9      	bne.n	10009c66 <ble_pair_done_handler+0x76>
10009c72:	e071      	b.n	10009d58 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009c74:	0163      	lsls	r3, r4, #5
10009c76:	1b1c      	subs	r4, r3, r4
10009c78:	00a4      	lsls	r4, r4, #2
10009c7a:	4b3b      	ldr	r3, [pc, #236]	; (10009d68 <ble_pair_done_handler+0x178>)
10009c7c:	191c      	adds	r4, r3, r4
10009c7e:	345e      	adds	r4, #94	; 0x5e
10009c80:	7823      	ldrb	r3, [r4, #0]
10009c82:	2b01      	cmp	r3, #1
10009c84:	d915      	bls.n	10009cb2 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
10009c86:	4839      	ldr	r0, [pc, #228]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009c88:	4b39      	ldr	r3, [pc, #228]	; (10009d70 <ble_pair_done_handler+0x180>)
10009c8a:	4798      	blx	r3
10009c8c:	483d      	ldr	r0, [pc, #244]	; (10009d84 <ble_pair_done_handler+0x194>)
10009c8e:	4b3a      	ldr	r3, [pc, #232]	; (10009d78 <ble_pair_done_handler+0x188>)
10009c90:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009c92:	8868      	ldrh	r0, [r5, #2]
10009c94:	2113      	movs	r1, #19
10009c96:	4b3c      	ldr	r3, [pc, #240]	; (10009d88 <ble_pair_done_handler+0x198>)
10009c98:	4798      	blx	r3
10009c9a:	9001      	str	r0, [sp, #4]
10009c9c:	2800      	cmp	r0, #0
10009c9e:	d05b      	beq.n	10009d58 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
10009ca0:	4832      	ldr	r0, [pc, #200]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009ca2:	4b33      	ldr	r3, [pc, #204]	; (10009d70 <ble_pair_done_handler+0x180>)
10009ca4:	4798      	blx	r3
10009ca6:	4839      	ldr	r0, [pc, #228]	; (10009d8c <ble_pair_done_handler+0x19c>)
10009ca8:	4b33      	ldr	r3, [pc, #204]	; (10009d78 <ble_pair_done_handler+0x188>)
10009caa:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009cac:	23e2      	movs	r3, #226	; 0xe2
10009cae:	9301      	str	r3, [sp, #4]
10009cb0:	e052      	b.n	10009d58 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009cb2:	2300      	movs	r3, #0
10009cb4:	9301      	str	r3, [sp, #4]
10009cb6:	e04f      	b.n	10009d58 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009cb8:	4e2c      	ldr	r6, [pc, #176]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009cba:	0030      	movs	r0, r6
10009cbc:	4d2c      	ldr	r5, [pc, #176]	; (10009d70 <ble_pair_done_handler+0x180>)
10009cbe:	47a8      	blx	r5
10009cc0:	4833      	ldr	r0, [pc, #204]	; (10009d90 <ble_pair_done_handler+0x1a0>)
10009cc2:	4c2d      	ldr	r4, [pc, #180]	; (10009d78 <ble_pair_done_handler+0x188>)
10009cc4:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009cc6:	0030      	movs	r0, r6
10009cc8:	47a8      	blx	r5
10009cca:	4832      	ldr	r0, [pc, #200]	; (10009d94 <ble_pair_done_handler+0x1a4>)
10009ccc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009cce:	23e2      	movs	r3, #226	; 0xe2
10009cd0:	9301      	str	r3, [sp, #4]
10009cd2:	e041      	b.n	10009d58 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009cd4:	792b      	ldrb	r3, [r5, #4]
10009cd6:	2b00      	cmp	r3, #0
10009cd8:	d1cc      	bne.n	10009c74 <ble_pair_done_handler+0x84>
10009cda:	e7ed      	b.n	10009cb8 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009cdc:	4823      	ldr	r0, [pc, #140]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009cde:	4b24      	ldr	r3, [pc, #144]	; (10009d70 <ble_pair_done_handler+0x180>)
10009ce0:	469b      	mov	fp, r3
10009ce2:	4798      	blx	r3
10009ce4:	482a      	ldr	r0, [pc, #168]	; (10009d90 <ble_pair_done_handler+0x1a0>)
10009ce6:	4b24      	ldr	r3, [pc, #144]	; (10009d78 <ble_pair_done_handler+0x188>)
10009ce8:	469a      	mov	sl, r3
10009cea:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009cec:	782a      	ldrb	r2, [r5, #0]
10009cee:	4b1e      	ldr	r3, [pc, #120]	; (10009d68 <ble_pair_done_handler+0x178>)
10009cf0:	4698      	mov	r8, r3
10009cf2:	0167      	lsls	r7, r4, #5
10009cf4:	1b3b      	subs	r3, r7, r4
10009cf6:	009b      	lsls	r3, r3, #2
10009cf8:	4443      	add	r3, r8
10009cfa:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009cfc:	792a      	ldrb	r2, [r5, #4]
10009cfe:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009d00:	335e      	adds	r3, #94	; 0x5e
10009d02:	2205      	movs	r2, #5
10009d04:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009d06:	1b38      	subs	r0, r7, r4
10009d08:	0080      	lsls	r0, r0, #2
10009d0a:	4440      	add	r0, r8
10009d0c:	3036      	adds	r0, #54	; 0x36
10009d0e:	320b      	adds	r2, #11
10009d10:	0029      	movs	r1, r5
10009d12:	3122      	adds	r1, #34	; 0x22
10009d14:	4b20      	ldr	r3, [pc, #128]	; (10009d98 <ble_pair_done_handler+0x1a8>)
10009d16:	4699      	mov	r9, r3
10009d18:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009d1a:	1b38      	subs	r0, r7, r4
10009d1c:	0080      	lsls	r0, r0, #2
10009d1e:	4440      	add	r0, r8
10009d20:	3046      	adds	r0, #70	; 0x46
10009d22:	2217      	movs	r2, #23
10009d24:	0029      	movs	r1, r5
10009d26:	3132      	adds	r1, #50	; 0x32
10009d28:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009d2a:	1b38      	subs	r0, r7, r4
10009d2c:	0080      	lsls	r0, r0, #2
10009d2e:	4440      	add	r0, r8
10009d30:	301a      	adds	r0, #26
10009d32:	1dac      	adds	r4, r5, #6
10009d34:	221c      	movs	r2, #28
10009d36:	0021      	movs	r1, r4
10009d38:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
10009d3a:	480c      	ldr	r0, [pc, #48]	; (10009d6c <ble_pair_done_handler+0x17c>)
10009d3c:	47d8      	blx	fp
10009d3e:	4817      	ldr	r0, [pc, #92]	; (10009d9c <ble_pair_done_handler+0x1ac>)
10009d40:	47d0      	blx	sl
10009d42:	2316      	movs	r3, #22
10009d44:	4699      	mov	r9, r3
10009d46:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
10009d48:	4e0c      	ldr	r6, [pc, #48]	; (10009d7c <ble_pair_done_handler+0x18c>)
10009d4a:	4f0b      	ldr	r7, [pc, #44]	; (10009d78 <ble_pair_done_handler+0x188>)
10009d4c:	e76a      	b.n	10009c24 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009d4e:	792b      	ldrb	r3, [r5, #4]
10009d50:	9301      	str	r3, [sp, #4]
10009d52:	2b00      	cmp	r3, #0
10009d54:	d0c2      	beq.n	10009cdc <ble_pair_done_handler+0xec>
10009d56:	e78d      	b.n	10009c74 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009d58:	9801      	ldr	r0, [sp, #4]
10009d5a:	b003      	add	sp, #12
10009d5c:	bc3c      	pop	{r2, r3, r4, r5}
10009d5e:	4690      	mov	r8, r2
10009d60:	4699      	mov	r9, r3
10009d62:	46a2      	mov	sl, r4
10009d64:	46ab      	mov	fp, r5
10009d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d68:	10012774 	.word	0x10012774
10009d6c:	10010d64 	.word	0x10010d64
10009d70:	1000fa99 	.word	0x1000fa99
10009d74:	100117dc 	.word	0x100117dc
10009d78:	1000f979 	.word	0x1000f979
10009d7c:	100117d0 	.word	0x100117d0
10009d80:	100117e4 	.word	0x100117e4
10009d84:	100117ec 	.word	0x100117ec
10009d88:	1000c969 	.word	0x1000c969
10009d8c:	1001180c 	.word	0x1001180c
10009d90:	10011828 	.word	0x10011828
10009d94:	10011854 	.word	0x10011854
10009d98:	1000f957 	.word	0x1000f957
10009d9c:	10011884 	.word	0x10011884

10009da0 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009da0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009da2:	8800      	ldrh	r0, [r0, #0]
10009da4:	2378      	movs	r3, #120	; 0x78
10009da6:	2201      	movs	r2, #1
10009da8:	2101      	movs	r1, #1
10009daa:	4c02      	ldr	r4, [pc, #8]	; (10009db4 <ble_conn_param_update_req+0x14>)
10009dac:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009dae:	2000      	movs	r0, #0
10009db0:	bd10      	pop	{r4, pc}
10009db2:	46c0      	nop			; (mov r8, r8)
10009db4:	1000c989 	.word	0x1000c989

10009db8 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dba:	4657      	mov	r7, sl
10009dbc:	464e      	mov	r6, r9
10009dbe:	4645      	mov	r5, r8
10009dc0:	b4e0      	push	{r5, r6, r7}
10009dc2:	b084      	sub	sp, #16
10009dc4:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009dc6:	2209      	movs	r2, #9
10009dc8:	2100      	movs	r1, #0
10009dca:	a801      	add	r0, sp, #4
10009dcc:	4b6a      	ldr	r3, [pc, #424]	; (10009f78 <ble_slave_security_request_handler+0x1c0>)
10009dce:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009dd0:	8825      	ldrh	r5, [r4, #0]
10009dd2:	496a      	ldr	r1, [pc, #424]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009dd4:	000a      	movs	r2, r1
10009dd6:	2300      	movs	r3, #0
10009dd8:	8910      	ldrh	r0, [r2, #8]
10009dda:	42a8      	cmp	r0, r5
10009ddc:	d116      	bne.n	10009e0c <ble_slave_security_request_handler+0x54>
10009dde:	0010      	movs	r0, r2
10009de0:	305e      	adds	r0, #94	; 0x5e
10009de2:	7800      	ldrb	r0, [r0, #0]
10009de4:	2802      	cmp	r0, #2
10009de6:	d111      	bne.n	10009e0c <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009de8:	4864      	ldr	r0, [pc, #400]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009dea:	015a      	lsls	r2, r3, #5
10009dec:	1ad6      	subs	r6, r2, r3
10009dee:	00b6      	lsls	r6, r6, #2
10009df0:	1986      	adds	r6, r0, r6
10009df2:	365e      	adds	r6, #94	; 0x5e
10009df4:	2206      	movs	r2, #6
10009df6:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009df8:	32f9      	adds	r2, #249	; 0xf9
10009dfa:	4013      	ands	r3, r2
10009dfc:	015a      	lsls	r2, r3, #5
10009dfe:	1ad2      	subs	r2, r2, r3
10009e00:	0092      	lsls	r2, r2, #2
10009e02:	1882      	adds	r2, r0, r2
10009e04:	7d12      	ldrb	r2, [r2, #20]
10009e06:	07d0      	lsls	r0, r2, #31
10009e08:	d405      	bmi.n	10009e16 <ble_slave_security_request_handler+0x5e>
10009e0a:	e01b      	b.n	10009e44 <ble_slave_security_request_handler+0x8c>
10009e0c:	3301      	adds	r3, #1
10009e0e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e10:	2b05      	cmp	r3, #5
10009e12:	d1e1      	bne.n	10009dd8 <ble_slave_security_request_handler+0x20>
10009e14:	e01e      	b.n	10009e54 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009e16:	78e0      	ldrb	r0, [r4, #3]
10009e18:	2800      	cmp	r0, #0
10009e1a:	d013      	beq.n	10009e44 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009e1c:	0159      	lsls	r1, r3, #5
10009e1e:	1ac9      	subs	r1, r1, r3
10009e20:	008b      	lsls	r3, r1, #2
10009e22:	4956      	ldr	r1, [pc, #344]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009e24:	18c9      	adds	r1, r1, r3
10009e26:	311a      	adds	r1, #26
10009e28:	8820      	ldrh	r0, [r4, #0]
10009e2a:	4b55      	ldr	r3, [pc, #340]	; (10009f80 <ble_slave_security_request_handler+0x1c8>)
10009e2c:	4798      	blx	r3
10009e2e:	2800      	cmp	r0, #0
10009e30:	d100      	bne.n	10009e34 <ble_slave_security_request_handler+0x7c>
10009e32:	e09b      	b.n	10009f6c <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009e34:	4853      	ldr	r0, [pc, #332]	; (10009f84 <ble_slave_security_request_handler+0x1cc>)
10009e36:	4b54      	ldr	r3, [pc, #336]	; (10009f88 <ble_slave_security_request_handler+0x1d0>)
10009e38:	4798      	blx	r3
10009e3a:	4854      	ldr	r0, [pc, #336]	; (10009f8c <ble_slave_security_request_handler+0x1d4>)
10009e3c:	4b54      	ldr	r3, [pc, #336]	; (10009f90 <ble_slave_security_request_handler+0x1d8>)
10009e3e:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009e40:	20e2      	movs	r0, #226	; 0xe2
10009e42:	e093      	b.n	10009f6c <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009e44:	015a      	lsls	r2, r3, #5
10009e46:	1ad3      	subs	r3, r2, r3
10009e48:	009b      	lsls	r3, r3, #2
10009e4a:	4a4c      	ldr	r2, [pc, #304]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009e4c:	18d3      	adds	r3, r2, r3
10009e4e:	335e      	adds	r3, #94	; 0x5e
10009e50:	2202      	movs	r2, #2
10009e52:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e54:	8825      	ldrh	r5, [r4, #0]
10009e56:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e58:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e5a:	0016      	movs	r6, r2
10009e5c:	8908      	ldrh	r0, [r1, #8]
10009e5e:	42a8      	cmp	r0, r5
10009e60:	d10d      	bne.n	10009e7e <ble_slave_security_request_handler+0xc6>
10009e62:	0008      	movs	r0, r1
10009e64:	305e      	adds	r0, #94	; 0x5e
10009e66:	7800      	ldrb	r0, [r0, #0]
10009e68:	2802      	cmp	r0, #2
10009e6a:	d108      	bne.n	10009e7e <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009e6c:	0152      	lsls	r2, r2, #5
10009e6e:	1b92      	subs	r2, r2, r6
10009e70:	0096      	lsls	r6, r2, #2
10009e72:	4a42      	ldr	r2, [pc, #264]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009e74:	1992      	adds	r2, r2, r6
10009e76:	325e      	adds	r2, #94	; 0x5e
10009e78:	2103      	movs	r1, #3
10009e7a:	7011      	strb	r1, [r2, #0]
			break;
10009e7c:	e005      	b.n	10009e8a <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e7e:	3301      	adds	r3, #1
10009e80:	b2db      	uxtb	r3, r3
10009e82:	3201      	adds	r2, #1
10009e84:	317c      	adds	r1, #124	; 0x7c
10009e86:	2b05      	cmp	r3, #5
10009e88:	d1e7      	bne.n	10009e5a <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
10009e8a:	aa01      	add	r2, sp, #4
10009e8c:	78e1      	ldrb	r1, [r4, #3]
10009e8e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009e90:	2101      	movs	r1, #1
10009e92:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009e94:	3103      	adds	r1, #3
10009e96:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009e98:	001f      	movs	r7, r3
10009e9a:	015a      	lsls	r2, r3, #5
10009e9c:	1ad2      	subs	r2, r2, r3
10009e9e:	0092      	lsls	r2, r2, #2
10009ea0:	4936      	ldr	r1, [pc, #216]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009ea2:	5c52      	ldrb	r2, [r2, r1]
10009ea4:	2a02      	cmp	r2, #2
10009ea6:	d104      	bne.n	10009eb2 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009ea8:	aa01      	add	r2, sp, #4
10009eaa:	2103      	movs	r1, #3
10009eac:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009eae:	71d1      	strb	r1, [r2, #7]
10009eb0:	e003      	b.n	10009eba <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009eb2:	aa01      	add	r2, sp, #4
10009eb4:	2101      	movs	r1, #1
10009eb6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009eb8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
10009eba:	aa01      	add	r2, sp, #4
10009ebc:	2110      	movs	r1, #16
10009ebe:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009ec0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009ec2:	017a      	lsls	r2, r7, #5
10009ec4:	1bd2      	subs	r2, r2, r7
10009ec6:	0092      	lsls	r2, r2, #2
10009ec8:	492c      	ldr	r1, [pc, #176]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009eca:	188a      	adds	r2, r1, r2
10009ecc:	7e12      	ldrb	r2, [r2, #24]
10009ece:	2a40      	cmp	r2, #64	; 0x40
10009ed0:	d134      	bne.n	10009f3c <ble_slave_security_request_handler+0x184>
10009ed2:	015a      	lsls	r2, r3, #5
10009ed4:	1ad3      	subs	r3, r2, r3
10009ed6:	009b      	lsls	r3, r3, #2
10009ed8:	469a      	mov	sl, r3
10009eda:	001e      	movs	r6, r3
10009edc:	3660      	adds	r6, #96	; 0x60
10009ede:	1876      	adds	r6, r6, r1
10009ee0:	4655      	mov	r5, sl
10009ee2:	3568      	adds	r5, #104	; 0x68
10009ee4:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009ee6:	4b2b      	ldr	r3, [pc, #172]	; (10009f94 <ble_slave_security_request_handler+0x1dc>)
10009ee8:	4699      	mov	r9, r3
10009eea:	230f      	movs	r3, #15
10009eec:	4698      	mov	r8, r3
10009eee:	47c8      	blx	r9
10009ef0:	4643      	mov	r3, r8
10009ef2:	4018      	ands	r0, r3
10009ef4:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009ef6:	47c8      	blx	r9
10009ef8:	4643      	mov	r3, r8
10009efa:	4018      	ands	r0, r3
10009efc:	74b0      	strb	r0, [r6, #18]
10009efe:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009f00:	42ae      	cmp	r6, r5
10009f02:	d1f4      	bne.n	10009eee <ble_slave_security_request_handler+0x136>
10009f04:	4656      	mov	r6, sl
10009f06:	3670      	adds	r6, #112	; 0x70
10009f08:	4a1c      	ldr	r2, [pc, #112]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009f0a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009f0c:	4b21      	ldr	r3, [pc, #132]	; (10009f94 <ble_slave_security_request_handler+0x1dc>)
10009f0e:	4699      	mov	r9, r3
10009f10:	230f      	movs	r3, #15
10009f12:	4698      	mov	r8, r3
10009f14:	47c8      	blx	r9
10009f16:	4643      	mov	r3, r8
10009f18:	4018      	ands	r0, r3
10009f1a:	7028      	strb	r0, [r5, #0]
10009f1c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009f1e:	42b5      	cmp	r5, r6
10009f20:	d1f8      	bne.n	10009f14 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009f22:	4b1c      	ldr	r3, [pc, #112]	; (10009f94 <ble_slave_security_request_handler+0x1dc>)
10009f24:	4798      	blx	r3
10009f26:	017b      	lsls	r3, r7, #5
10009f28:	1bdb      	subs	r3, r3, r7
10009f2a:	009b      	lsls	r3, r3, #2
10009f2c:	4a13      	ldr	r2, [pc, #76]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009f2e:	18d3      	adds	r3, r2, r3
10009f30:	001a      	movs	r2, r3
10009f32:	3270      	adds	r2, #112	; 0x70
10009f34:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009f36:	337a      	adds	r3, #122	; 0x7a
10009f38:	2210      	movs	r2, #16
10009f3a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009f3c:	017a      	lsls	r2, r7, #5
10009f3e:	1bd7      	subs	r7, r2, r7
10009f40:	00bf      	lsls	r7, r7, #2
10009f42:	3760      	adds	r7, #96	; 0x60
10009f44:	4a0d      	ldr	r2, [pc, #52]	; (10009f7c <ble_slave_security_request_handler+0x1c4>)
10009f46:	18ba      	adds	r2, r7, r2
10009f48:	8820      	ldrh	r0, [r4, #0]
10009f4a:	2300      	movs	r3, #0
10009f4c:	a901      	add	r1, sp, #4
10009f4e:	4c12      	ldr	r4, [pc, #72]	; (10009f98 <ble_slave_security_request_handler+0x1e0>)
10009f50:	47a0      	blx	r4
10009f52:	2800      	cmp	r0, #0
10009f54:	d00a      	beq.n	10009f6c <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
10009f56:	ab01      	add	r3, sp, #4
10009f58:	2200      	movs	r2, #0
10009f5a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009f5c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009f5e:	4809      	ldr	r0, [pc, #36]	; (10009f84 <ble_slave_security_request_handler+0x1cc>)
10009f60:	4b09      	ldr	r3, [pc, #36]	; (10009f88 <ble_slave_security_request_handler+0x1d0>)
10009f62:	4798      	blx	r3
10009f64:	480d      	ldr	r0, [pc, #52]	; (10009f9c <ble_slave_security_request_handler+0x1e4>)
10009f66:	4b0a      	ldr	r3, [pc, #40]	; (10009f90 <ble_slave_security_request_handler+0x1d8>)
10009f68:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009f6a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009f6c:	b004      	add	sp, #16
10009f6e:	bc1c      	pop	{r2, r3, r4}
10009f70:	4690      	mov	r8, r2
10009f72:	4699      	mov	r9, r3
10009f74:	46a2      	mov	sl, r4
10009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f78:	1000f969 	.word	0x1000f969
10009f7c:	10012774 	.word	0x10012774
10009f80:	1000cea1 	.word	0x1000cea1
10009f84:	10010d64 	.word	0x10010d64
10009f88:	1000fa99 	.word	0x1000fa99
10009f8c:	1001188c 	.word	0x1001188c
10009f90:	1000f979 	.word	0x1000f979
10009f94:	1000faad 	.word	0x1000faad
10009f98:	1000ccf5 	.word	0x1000ccf5
10009f9c:	100118a4 	.word	0x100118a4

10009fa0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fa2:	465f      	mov	r7, fp
10009fa4:	4656      	mov	r6, sl
10009fa6:	464d      	mov	r5, r9
10009fa8:	4644      	mov	r4, r8
10009faa:	b4f0      	push	{r4, r5, r6, r7}
10009fac:	b085      	sub	sp, #20
10009fae:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fb0:	8804      	ldrh	r4, [r0, #0]
10009fb2:	4a54      	ldr	r2, [pc, #336]	; (1000a104 <ble_pair_request_handler+0x164>)
10009fb4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fb6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fb8:	8910      	ldrh	r0, [r2, #8]
10009fba:	42a0      	cmp	r0, r4
10009fbc:	d10d      	bne.n	10009fda <ble_pair_request_handler+0x3a>
10009fbe:	0010      	movs	r0, r2
10009fc0:	305e      	adds	r0, #94	; 0x5e
10009fc2:	7800      	ldrb	r0, [r0, #0]
10009fc4:	2802      	cmp	r0, #2
10009fc6:	d108      	bne.n	10009fda <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009fc8:	014a      	lsls	r2, r1, #5
10009fca:	1a52      	subs	r2, r2, r1
10009fcc:	0095      	lsls	r5, r2, #2
10009fce:	4a4d      	ldr	r2, [pc, #308]	; (1000a104 <ble_pair_request_handler+0x164>)
10009fd0:	1952      	adds	r2, r2, r5
10009fd2:	325e      	adds	r2, #94	; 0x5e
10009fd4:	2103      	movs	r1, #3
10009fd6:	7011      	strb	r1, [r2, #0]
			break;
10009fd8:	e005      	b.n	10009fe6 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fda:	3301      	adds	r3, #1
10009fdc:	b2db      	uxtb	r3, r3
10009fde:	3101      	adds	r1, #1
10009fe0:	327c      	adds	r2, #124	; 0x7c
10009fe2:	2b05      	cmp	r3, #5
10009fe4:	d1e8      	bne.n	10009fb8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009fe6:	aa01      	add	r2, sp, #4
10009fe8:	2100      	movs	r1, #0
10009fea:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
10009fec:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009fee:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009ff0:	2003      	movs	r0, #3
10009ff2:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009ff4:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009ff6:	001e      	movs	r6, r3
10009ff8:	015a      	lsls	r2, r3, #5
10009ffa:	1ad2      	subs	r2, r2, r3
10009ffc:	0092      	lsls	r2, r2, #2
10009ffe:	4941      	ldr	r1, [pc, #260]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a000:	5c52      	ldrb	r2, [r2, r1]
1000a002:	2a02      	cmp	r2, #2
1000a004:	d104      	bne.n	1000a010 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a006:	aa01      	add	r2, sp, #4
1000a008:	2103      	movs	r1, #3
1000a00a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a00c:	71d1      	strb	r1, [r2, #7]
1000a00e:	e003      	b.n	1000a018 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a010:	aa01      	add	r2, sp, #4
1000a012:	2101      	movs	r1, #1
1000a014:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a016:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a018:	aa01      	add	r2, sp, #4
1000a01a:	2110      	movs	r1, #16
1000a01c:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a01e:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a020:	0172      	lsls	r2, r6, #5
1000a022:	1b92      	subs	r2, r2, r6
1000a024:	0092      	lsls	r2, r2, #2
1000a026:	4937      	ldr	r1, [pc, #220]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a028:	188a      	adds	r2, r1, r2
1000a02a:	7e12      	ldrb	r2, [r2, #24]
1000a02c:	2a40      	cmp	r2, #64	; 0x40
1000a02e:	d142      	bne.n	1000a0b6 <ble_pair_request_handler+0x116>
1000a030:	015f      	lsls	r7, r3, #5
1000a032:	1afb      	subs	r3, r7, r3
1000a034:	009b      	lsls	r3, r3, #2
1000a036:	469b      	mov	fp, r3
1000a038:	001c      	movs	r4, r3
1000a03a:	3460      	adds	r4, #96	; 0x60
1000a03c:	1864      	adds	r4, r4, r1
1000a03e:	465d      	mov	r5, fp
1000a040:	3568      	adds	r5, #104	; 0x68
1000a042:	186d      	adds	r5, r5, r1
1000a044:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a046:	4b30      	ldr	r3, [pc, #192]	; (1000a108 <ble_pair_request_handler+0x168>)
1000a048:	469a      	mov	sl, r3
1000a04a:	230f      	movs	r3, #15
1000a04c:	4699      	mov	r9, r3
1000a04e:	47d0      	blx	sl
1000a050:	464b      	mov	r3, r9
1000a052:	4018      	ands	r0, r3
1000a054:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a056:	47d0      	blx	sl
1000a058:	464b      	mov	r3, r9
1000a05a:	4018      	ands	r0, r3
1000a05c:	74b8      	strb	r0, [r7, #18]
1000a05e:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a060:	42af      	cmp	r7, r5
1000a062:	d1f4      	bne.n	1000a04e <ble_pair_request_handler+0xae>
1000a064:	465b      	mov	r3, fp
1000a066:	3370      	adds	r3, #112	; 0x70
1000a068:	4f26      	ldr	r7, [pc, #152]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a06a:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a06c:	4b26      	ldr	r3, [pc, #152]	; (1000a108 <ble_pair_request_handler+0x168>)
1000a06e:	469a      	mov	sl, r3
1000a070:	230f      	movs	r3, #15
1000a072:	4699      	mov	r9, r3
1000a074:	47d0      	blx	sl
1000a076:	464b      	mov	r3, r9
1000a078:	4018      	ands	r0, r3
1000a07a:	7028      	strb	r0, [r5, #0]
1000a07c:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a07e:	42bd      	cmp	r5, r7
1000a080:	d1f8      	bne.n	1000a074 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000a082:	4822      	ldr	r0, [pc, #136]	; (1000a10c <ble_pair_request_handler+0x16c>)
1000a084:	4b22      	ldr	r3, [pc, #136]	; (1000a110 <ble_pair_request_handler+0x170>)
1000a086:	4798      	blx	r3
1000a088:	4822      	ldr	r0, [pc, #136]	; (1000a114 <ble_pair_request_handler+0x174>)
1000a08a:	4b23      	ldr	r3, [pc, #140]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a08c:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000a08e:	4d22      	ldr	r5, [pc, #136]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a090:	7821      	ldrb	r1, [r4, #0]
1000a092:	4822      	ldr	r0, [pc, #136]	; (1000a11c <ble_pair_request_handler+0x17c>)
1000a094:	47a8      	blx	r5
1000a096:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000a098:	42bc      	cmp	r4, r7
1000a09a:	d1f9      	bne.n	1000a090 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a09c:	4b1a      	ldr	r3, [pc, #104]	; (1000a108 <ble_pair_request_handler+0x168>)
1000a09e:	4798      	blx	r3
1000a0a0:	0173      	lsls	r3, r6, #5
1000a0a2:	1b9b      	subs	r3, r3, r6
1000a0a4:	009b      	lsls	r3, r3, #2
1000a0a6:	4a17      	ldr	r2, [pc, #92]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a0a8:	18d3      	adds	r3, r2, r3
1000a0aa:	001a      	movs	r2, r3
1000a0ac:	3270      	adds	r2, #112	; 0x70
1000a0ae:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a0b0:	337a      	adds	r3, #122	; 0x7a
1000a0b2:	2210      	movs	r2, #16
1000a0b4:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000a0b6:	4815      	ldr	r0, [pc, #84]	; (1000a10c <ble_pair_request_handler+0x16c>)
1000a0b8:	4b15      	ldr	r3, [pc, #84]	; (1000a110 <ble_pair_request_handler+0x170>)
1000a0ba:	4798      	blx	r3
1000a0bc:	4818      	ldr	r0, [pc, #96]	; (1000a120 <ble_pair_request_handler+0x180>)
1000a0be:	4b16      	ldr	r3, [pc, #88]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a0c0:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a0c2:	0173      	lsls	r3, r6, #5
1000a0c4:	1b9b      	subs	r3, r3, r6
1000a0c6:	009b      	lsls	r3, r3, #2
1000a0c8:	3360      	adds	r3, #96	; 0x60
1000a0ca:	4a0e      	ldr	r2, [pc, #56]	; (1000a104 <ble_pair_request_handler+0x164>)
1000a0cc:	189a      	adds	r2, r3, r2
1000a0ce:	4643      	mov	r3, r8
1000a0d0:	8818      	ldrh	r0, [r3, #0]
1000a0d2:	2300      	movs	r3, #0
1000a0d4:	a901      	add	r1, sp, #4
1000a0d6:	4c13      	ldr	r4, [pc, #76]	; (1000a124 <ble_pair_request_handler+0x184>)
1000a0d8:	47a0      	blx	r4
1000a0da:	2800      	cmp	r0, #0
1000a0dc:	d00a      	beq.n	1000a0f4 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000a0de:	ab01      	add	r3, sp, #4
1000a0e0:	2200      	movs	r2, #0
1000a0e2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a0e4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a0e6:	4809      	ldr	r0, [pc, #36]	; (1000a10c <ble_pair_request_handler+0x16c>)
1000a0e8:	4b09      	ldr	r3, [pc, #36]	; (1000a110 <ble_pair_request_handler+0x170>)
1000a0ea:	4798      	blx	r3
1000a0ec:	480e      	ldr	r0, [pc, #56]	; (1000a128 <ble_pair_request_handler+0x188>)
1000a0ee:	4b0a      	ldr	r3, [pc, #40]	; (1000a118 <ble_pair_request_handler+0x178>)
1000a0f0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a0f2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a0f4:	b005      	add	sp, #20
1000a0f6:	bc3c      	pop	{r2, r3, r4, r5}
1000a0f8:	4690      	mov	r8, r2
1000a0fa:	4699      	mov	r9, r3
1000a0fc:	46a2      	mov	sl, r4
1000a0fe:	46ab      	mov	fp, r5
1000a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a102:	46c0      	nop			; (mov r8, r8)
1000a104:	10012774 	.word	0x10012774
1000a108:	1000faad 	.word	0x1000faad
1000a10c:	10010d64 	.word	0x10010d64
1000a110:	1000fa99 	.word	0x1000fa99
1000a114:	100118d0 	.word	0x100118d0
1000a118:	1000f979 	.word	0x1000f979
1000a11c:	100118e0 	.word	0x100118e0
1000a120:	100118e8 	.word	0x100118e8
1000a124:	1000ccf5 	.word	0x1000ccf5
1000a128:	10011904 	.word	0x10011904

1000a12c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a12c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a12e:	b085      	sub	sp, #20
1000a130:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a132:	2206      	movs	r2, #6
1000a134:	493d      	ldr	r1, [pc, #244]	; (1000a22c <ble_pair_key_request_handler+0x100>)
1000a136:	a802      	add	r0, sp, #8
1000a138:	4e3d      	ldr	r6, [pc, #244]	; (1000a230 <ble_pair_key_request_handler+0x104>)
1000a13a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a13c:	ac01      	add	r4, sp, #4
1000a13e:	2204      	movs	r2, #4
1000a140:	0029      	movs	r1, r5
1000a142:	0020      	movs	r0, r4
1000a144:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a146:	78e3      	ldrb	r3, [r4, #3]
1000a148:	2b00      	cmp	r3, #0
1000a14a:	d162      	bne.n	1000a212 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a14c:	4839      	ldr	r0, [pc, #228]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a14e:	4b3a      	ldr	r3, [pc, #232]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a150:	4798      	blx	r3
1000a152:	483a      	ldr	r0, [pc, #232]	; (1000a23c <ble_pair_key_request_handler+0x110>)
1000a154:	4b3a      	ldr	r3, [pc, #232]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a156:	4798      	blx	r3
1000a158:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a15a:	4c3a      	ldr	r4, [pc, #232]	; (1000a244 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a15c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a15e:	201e      	movs	r0, #30
1000a160:	47a0      	blx	r4
1000a162:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a164:	2b00      	cmp	r3, #0
1000a166:	d11a      	bne.n	1000a19e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a168:	4f32      	ldr	r7, [pc, #200]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a16a:	0038      	movs	r0, r7
1000a16c:	4e32      	ldr	r6, [pc, #200]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a16e:	47b0      	blx	r6
1000a170:	4835      	ldr	r0, [pc, #212]	; (1000a248 <ble_pair_key_request_handler+0x11c>)
1000a172:	4c33      	ldr	r4, [pc, #204]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a174:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a176:	0038      	movs	r0, r7
1000a178:	47b0      	blx	r6
1000a17a:	4834      	ldr	r0, [pc, #208]	; (1000a24c <ble_pair_key_request_handler+0x120>)
1000a17c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a17e:	8828      	ldrh	r0, [r5, #0]
1000a180:	2113      	movs	r1, #19
1000a182:	4b33      	ldr	r3, [pc, #204]	; (1000a250 <ble_pair_key_request_handler+0x124>)
1000a184:	4798      	blx	r3
1000a186:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a188:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a18a:	2b00      	cmp	r3, #0
1000a18c:	d04c      	beq.n	1000a228 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a18e:	4829      	ldr	r0, [pc, #164]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a190:	4b29      	ldr	r3, [pc, #164]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a192:	4798      	blx	r3
1000a194:	482f      	ldr	r0, [pc, #188]	; (1000a254 <ble_pair_key_request_handler+0x128>)
1000a196:	4b2a      	ldr	r3, [pc, #168]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a198:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a19a:	20e2      	movs	r0, #226	; 0xe2
1000a19c:	e044      	b.n	1000a228 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a19e:	001a      	movs	r2, r3
1000a1a0:	3a30      	subs	r2, #48	; 0x30
1000a1a2:	2a09      	cmp	r2, #9
1000a1a4:	d8db      	bhi.n	1000a15e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a1a6:	aa02      	add	r2, sp, #8
1000a1a8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a1aa:	4038      	ands	r0, r7
1000a1ac:	4b2a      	ldr	r3, [pc, #168]	; (1000a258 <ble_pair_key_request_handler+0x12c>)
1000a1ae:	4798      	blx	r3
1000a1b0:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a1b2:	2e06      	cmp	r6, #6
1000a1b4:	d026      	beq.n	1000a204 <ble_pair_key_request_handler+0xd8>
1000a1b6:	e7d2      	b.n	1000a15e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a1b8:	481e      	ldr	r0, [pc, #120]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a1ba:	4b1f      	ldr	r3, [pc, #124]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a1bc:	4798      	blx	r3
1000a1be:	4827      	ldr	r0, [pc, #156]	; (1000a25c <ble_pair_key_request_handler+0x130>)
1000a1c0:	4b1f      	ldr	r3, [pc, #124]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a1c2:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a1c4:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a1c6:	4e24      	ldr	r6, [pc, #144]	; (1000a258 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a1c8:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a1ca:	5ce0      	ldrb	r0, [r4, r3]
1000a1cc:	47b0      	blx	r6
1000a1ce:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a1d0:	2c06      	cmp	r4, #6
1000a1d2:	d1f9      	bne.n	1000a1c8 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a1d4:	ab01      	add	r3, sp, #4
1000a1d6:	7899      	ldrb	r1, [r3, #2]
1000a1d8:	8828      	ldrh	r0, [r5, #0]
1000a1da:	aa02      	add	r2, sp, #8
1000a1dc:	4b20      	ldr	r3, [pc, #128]	; (1000a260 <ble_pair_key_request_handler+0x134>)
1000a1de:	4798      	blx	r3
1000a1e0:	2800      	cmp	r0, #0
1000a1e2:	d021      	beq.n	1000a228 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a1e4:	4813      	ldr	r0, [pc, #76]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a1e6:	4b14      	ldr	r3, [pc, #80]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a1e8:	4798      	blx	r3
1000a1ea:	481e      	ldr	r0, [pc, #120]	; (1000a264 <ble_pair_key_request_handler+0x138>)
1000a1ec:	4b14      	ldr	r3, [pc, #80]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a1ee:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a1f0:	2000      	movs	r0, #0
1000a1f2:	e019      	b.n	1000a228 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a1f4:	480f      	ldr	r0, [pc, #60]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a1f6:	4b10      	ldr	r3, [pc, #64]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a1f8:	4798      	blx	r3
1000a1fa:	481b      	ldr	r0, [pc, #108]	; (1000a268 <ble_pair_key_request_handler+0x13c>)
1000a1fc:	4b10      	ldr	r3, [pc, #64]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a1fe:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a200:	2000      	movs	r0, #0
1000a202:	e011      	b.n	1000a228 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a204:	480b      	ldr	r0, [pc, #44]	; (1000a234 <ble_pair_key_request_handler+0x108>)
1000a206:	4b0c      	ldr	r3, [pc, #48]	; (1000a238 <ble_pair_key_request_handler+0x10c>)
1000a208:	4798      	blx	r3
1000a20a:	4818      	ldr	r0, [pc, #96]	; (1000a26c <ble_pair_key_request_handler+0x140>)
1000a20c:	4b0c      	ldr	r3, [pc, #48]	; (1000a240 <ble_pair_key_request_handler+0x114>)
1000a20e:	4798      	blx	r3
1000a210:	e7d8      	b.n	1000a1c4 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a212:	ab01      	add	r3, sp, #4
1000a214:	885a      	ldrh	r2, [r3, #2]
1000a216:	2380      	movs	r3, #128	; 0x80
1000a218:	005b      	lsls	r3, r3, #1
1000a21a:	429a      	cmp	r2, r3
1000a21c:	d0cc      	beq.n	1000a1b8 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a21e:	ab01      	add	r3, sp, #4
1000a220:	789b      	ldrb	r3, [r3, #2]
1000a222:	2b01      	cmp	r3, #1
1000a224:	d0e6      	beq.n	1000a1f4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a226:	2000      	movs	r0, #0
}
1000a228:	b005      	add	sp, #20
1000a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a22c:	100113a8 	.word	0x100113a8
1000a230:	1000f957 	.word	0x1000f957
1000a234:	10010d64 	.word	0x10010d64
1000a238:	1000fa99 	.word	0x1000fa99
1000a23c:	1001192c 	.word	0x1001192c
1000a240:	1000f979 	.word	0x1000f979
1000a244:	1000ac1d 	.word	0x1000ac1d
1000a248:	10011954 	.word	0x10011954
1000a24c:	10011960 	.word	0x10011960
1000a250:	1000c969 	.word	0x1000c969
1000a254:	1001180c 	.word	0x1001180c
1000a258:	1000f9ad 	.word	0x1000f9ad
1000a25c:	10011974 	.word	0x10011974
1000a260:	1000ce25 	.word	0x1000ce25
1000a264:	100119ac 	.word	0x100119ac
1000a268:	100119c4 	.word	0x100119c4
1000a26c:	100119e0 	.word	0x100119e0

1000a270 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a270:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a272:	465f      	mov	r7, fp
1000a274:	4656      	mov	r6, sl
1000a276:	464d      	mov	r5, r9
1000a278:	b4e0      	push	{r5, r6, r7}
1000a27a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a27c:	8800      	ldrh	r0, [r0, #0]
1000a27e:	4b49      	ldr	r3, [pc, #292]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a280:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a282:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a284:	8919      	ldrh	r1, [r3, #8]
1000a286:	4281      	cmp	r1, r0
1000a288:	d137      	bne.n	1000a2fa <ble_encryption_request_handler+0x8a>
1000a28a:	0019      	movs	r1, r3
1000a28c:	315e      	adds	r1, #94	; 0x5e
1000a28e:	7809      	ldrb	r1, [r1, #0]
1000a290:	2901      	cmp	r1, #1
1000a292:	d932      	bls.n	1000a2fa <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a294:	4f43      	ldr	r7, [pc, #268]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a296:	0153      	lsls	r3, r2, #5
1000a298:	1a9d      	subs	r5, r3, r2
1000a29a:	00ad      	lsls	r5, r5, #2
1000a29c:	197d      	adds	r5, r7, r5
1000a29e:	355e      	adds	r5, #94	; 0x5e
1000a2a0:	2306      	movs	r3, #6
1000a2a2:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000a2a4:	4840      	ldr	r0, [pc, #256]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2a6:	4b41      	ldr	r3, [pc, #260]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a2a8:	469a      	mov	sl, r3
1000a2aa:	4798      	blx	r3
1000a2ac:	8831      	ldrh	r1, [r6, #0]
1000a2ae:	4840      	ldr	r0, [pc, #256]	; (1000a3b0 <ble_encryption_request_handler+0x140>)
1000a2b0:	4b40      	ldr	r3, [pc, #256]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a2b2:	4699      	mov	r9, r3
1000a2b4:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000a2b6:	483c      	ldr	r0, [pc, #240]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2b8:	47d0      	blx	sl
1000a2ba:	0163      	lsls	r3, r4, #5
1000a2bc:	1b1b      	subs	r3, r3, r4
1000a2be:	009b      	lsls	r3, r3, #2
1000a2c0:	18ff      	adds	r7, r7, r3
1000a2c2:	2370      	movs	r3, #112	; 0x70
1000a2c4:	469b      	mov	fp, r3
1000a2c6:	44bb      	add	fp, r7
1000a2c8:	465b      	mov	r3, fp
1000a2ca:	8819      	ldrh	r1, [r3, #0]
1000a2cc:	483a      	ldr	r0, [pc, #232]	; (1000a3b8 <ble_encryption_request_handler+0x148>)
1000a2ce:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000a2d0:	4835      	ldr	r0, [pc, #212]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2d2:	47d0      	blx	sl
1000a2d4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000a2d6:	4839      	ldr	r0, [pc, #228]	; (1000a3bc <ble_encryption_request_handler+0x14c>)
1000a2d8:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000a2da:	4833      	ldr	r0, [pc, #204]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2dc:	47d0      	blx	sl
1000a2de:	8871      	ldrh	r1, [r6, #2]
1000a2e0:	4837      	ldr	r0, [pc, #220]	; (1000a3c0 <ble_encryption_request_handler+0x150>)
1000a2e2:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000a2e4:	4830      	ldr	r0, [pc, #192]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a2e6:	47d0      	blx	sl
1000a2e8:	0021      	movs	r1, r4
1000a2ea:	4836      	ldr	r0, [pc, #216]	; (1000a3c4 <ble_encryption_request_handler+0x154>)
1000a2ec:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a2ee:	465b      	mov	r3, fp
1000a2f0:	881a      	ldrh	r2, [r3, #0]
1000a2f2:	8873      	ldrh	r3, [r6, #2]
1000a2f4:	429a      	cmp	r2, r3
1000a2f6:	d12a      	bne.n	1000a34e <ble_encryption_request_handler+0xde>
1000a2f8:	e006      	b.n	1000a308 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2fa:	3401      	adds	r4, #1
1000a2fc:	b2e4      	uxtb	r4, r4
1000a2fe:	3201      	adds	r2, #1
1000a300:	337c      	adds	r3, #124	; 0x7c
1000a302:	2c05      	cmp	r4, #5
1000a304:	d1be      	bne.n	1000a284 <ble_encryption_request_handler+0x14>
1000a306:	e022      	b.n	1000a34e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a308:	0161      	lsls	r1, r4, #5
1000a30a:	1b09      	subs	r1, r1, r4
1000a30c:	0089      	lsls	r1, r1, #2
1000a30e:	4b25      	ldr	r3, [pc, #148]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a310:	1859      	adds	r1, r3, r1
1000a312:	3172      	adds	r1, #114	; 0x72
1000a314:	1d30      	adds	r0, r6, #4
1000a316:	2208      	movs	r2, #8
1000a318:	4b2b      	ldr	r3, [pc, #172]	; (1000a3c8 <ble_encryption_request_handler+0x158>)
1000a31a:	4798      	blx	r3
1000a31c:	2800      	cmp	r0, #0
1000a31e:	d116      	bne.n	1000a34e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000a320:	4821      	ldr	r0, [pc, #132]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a322:	4b22      	ldr	r3, [pc, #136]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a324:	4798      	blx	r3
1000a326:	4829      	ldr	r0, [pc, #164]	; (1000a3cc <ble_encryption_request_handler+0x15c>)
1000a328:	4b22      	ldr	r3, [pc, #136]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a32a:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a32c:	0162      	lsls	r2, r4, #5
1000a32e:	1b13      	subs	r3, r2, r4
1000a330:	009b      	lsls	r3, r3, #2
1000a332:	3360      	adds	r3, #96	; 0x60
1000a334:	491b      	ldr	r1, [pc, #108]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a336:	185b      	adds	r3, r3, r1
1000a338:	1b12      	subs	r2, r2, r4
1000a33a:	0092      	lsls	r2, r2, #2
1000a33c:	188a      	adds	r2, r1, r2
1000a33e:	7d11      	ldrb	r1, [r2, #20]
1000a340:	8830      	ldrh	r0, [r6, #0]
1000a342:	2201      	movs	r2, #1
1000a344:	4c22      	ldr	r4, [pc, #136]	; (1000a3d0 <ble_encryption_request_handler+0x160>)
1000a346:	47a0      	blx	r4
1000a348:	1e04      	subs	r4, r0, #0
1000a34a:	d01e      	beq.n	1000a38a <ble_encryption_request_handler+0x11a>
1000a34c:	e015      	b.n	1000a37a <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a34e:	4f16      	ldr	r7, [pc, #88]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a350:	0038      	movs	r0, r7
1000a352:	4e16      	ldr	r6, [pc, #88]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a354:	47b0      	blx	r6
1000a356:	481f      	ldr	r0, [pc, #124]	; (1000a3d4 <ble_encryption_request_handler+0x164>)
1000a358:	4d16      	ldr	r5, [pc, #88]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a35a:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a35c:	0038      	movs	r0, r7
1000a35e:	47b0      	blx	r6
1000a360:	481d      	ldr	r0, [pc, #116]	; (1000a3d8 <ble_encryption_request_handler+0x168>)
1000a362:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a364:	0163      	lsls	r3, r4, #5
1000a366:	1b1c      	subs	r4, r3, r4
1000a368:	00a4      	lsls	r4, r4, #2
1000a36a:	4b0e      	ldr	r3, [pc, #56]	; (1000a3a4 <ble_encryption_request_handler+0x134>)
1000a36c:	191c      	adds	r4, r3, r4
1000a36e:	8920      	ldrh	r0, [r4, #8]
1000a370:	2105      	movs	r1, #5
1000a372:	4b1a      	ldr	r3, [pc, #104]	; (1000a3dc <ble_encryption_request_handler+0x16c>)
1000a374:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a376:	24e2      	movs	r4, #226	; 0xe2
1000a378:	e00d      	b.n	1000a396 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a37a:	480b      	ldr	r0, [pc, #44]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a37c:	4b0b      	ldr	r3, [pc, #44]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a37e:	4798      	blx	r3
1000a380:	4817      	ldr	r0, [pc, #92]	; (1000a3e0 <ble_encryption_request_handler+0x170>)
1000a382:	4b0c      	ldr	r3, [pc, #48]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a384:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a386:	2400      	movs	r4, #0
1000a388:	e005      	b.n	1000a396 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000a38a:	4807      	ldr	r0, [pc, #28]	; (1000a3a8 <ble_encryption_request_handler+0x138>)
1000a38c:	4b07      	ldr	r3, [pc, #28]	; (1000a3ac <ble_encryption_request_handler+0x13c>)
1000a38e:	4798      	blx	r3
1000a390:	4814      	ldr	r0, [pc, #80]	; (1000a3e4 <ble_encryption_request_handler+0x174>)
1000a392:	4b08      	ldr	r3, [pc, #32]	; (1000a3b4 <ble_encryption_request_handler+0x144>)
1000a394:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000a396:	0020      	movs	r0, r4
1000a398:	bc1c      	pop	{r2, r3, r4}
1000a39a:	4691      	mov	r9, r2
1000a39c:	469a      	mov	sl, r3
1000a39e:	46a3      	mov	fp, r4
1000a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3a2:	46c0      	nop			; (mov r8, r8)
1000a3a4:	10012774 	.word	0x10012774
1000a3a8:	10010d64 	.word	0x10010d64
1000a3ac:	1000fa99 	.word	0x1000fa99
1000a3b0:	100119f4 	.word	0x100119f4
1000a3b4:	1000f979 	.word	0x1000f979
1000a3b8:	10011a20 	.word	0x10011a20
1000a3bc:	10011a34 	.word	0x10011a34
1000a3c0:	10011a48 	.word	0x10011a48
1000a3c4:	10011a58 	.word	0x10011a58
1000a3c8:	1000f939 	.word	0x1000f939
1000a3cc:	10011a68 	.word	0x10011a68
1000a3d0:	1000cf19 	.word	0x1000cf19
1000a3d4:	10011a7c 	.word	0x10011a7c
1000a3d8:	10011ab4 	.word	0x10011ab4
1000a3dc:	1000c969 	.word	0x1000c969
1000a3e0:	10011b0c 	.word	0x10011b0c
1000a3e4:	10011b2c 	.word	0x10011b2c

1000a3e8 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a3e8:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a3ea:	2a00      	cmp	r2, #0
1000a3ec:	d047      	beq.n	1000a47e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a3ee:	2906      	cmp	r1, #6
1000a3f0:	d847      	bhi.n	1000a482 <ble_mgr_events_callback_handler+0x9a>
1000a3f2:	0089      	lsls	r1, r1, #2
1000a3f4:	4b28      	ldr	r3, [pc, #160]	; (1000a498 <ble_mgr_events_callback_handler+0xb0>)
1000a3f6:	585b      	ldr	r3, [r3, r1]
1000a3f8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a3fa:	4b28      	ldr	r3, [pc, #160]	; (1000a49c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a3fc:	2405      	movs	r4, #5
1000a3fe:	e00a      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a400:	4b27      	ldr	r3, [pc, #156]	; (1000a4a0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a402:	2401      	movs	r4, #1
			}
			break;
1000a404:	e007      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a406:	4b27      	ldr	r3, [pc, #156]	; (1000a4a4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a408:	2405      	movs	r4, #5
			}
			break;
1000a40a:	e004      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a40c:	4b26      	ldr	r3, [pc, #152]	; (1000a4a8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a40e:	2401      	movs	r4, #1
			}
			break;
1000a410:	e001      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a412:	4b26      	ldr	r3, [pc, #152]	; (1000a4ac <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a414:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a416:	2800      	cmp	r0, #0
1000a418:	d116      	bne.n	1000a448 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a41a:	6819      	ldr	r1, [r3, #0]
1000a41c:	2900      	cmp	r1, #0
1000a41e:	d10b      	bne.n	1000a438 <ble_mgr_events_callback_handler+0x50>
1000a420:	e006      	b.n	1000a430 <ble_mgr_events_callback_handler+0x48>
1000a422:	001d      	movs	r5, r3
1000a424:	3304      	adds	r3, #4
1000a426:	1f18      	subs	r0, r3, #4
1000a428:	6800      	ldr	r0, [r0, #0]
1000a42a:	2800      	cmp	r0, #0
1000a42c:	d106      	bne.n	1000a43c <ble_mgr_events_callback_handler+0x54>
1000a42e:	e000      	b.n	1000a432 <ble_mgr_events_callback_handler+0x4a>
1000a430:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a432:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a434:	2101      	movs	r1, #1
						break;
1000a436:	e02c      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
1000a438:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a43a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a43c:	3101      	adds	r1, #1
1000a43e:	b2c9      	uxtb	r1, r1
1000a440:	42a1      	cmp	r1, r4
1000a442:	d3ee      	bcc.n	1000a422 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a444:	2100      	movs	r1, #0
1000a446:	e024      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
1000a448:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a44a:	2801      	cmp	r0, #1
1000a44c:	d121      	bne.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a44e:	6819      	ldr	r1, [r3, #0]
1000a450:	428a      	cmp	r2, r1
1000a452:	d10c      	bne.n	1000a46e <ble_mgr_events_callback_handler+0x86>
1000a454:	e006      	b.n	1000a464 <ble_mgr_events_callback_handler+0x7c>
1000a456:	001d      	movs	r5, r3
1000a458:	3304      	adds	r3, #4
1000a45a:	1f18      	subs	r0, r3, #4
1000a45c:	6800      	ldr	r0, [r0, #0]
1000a45e:	4282      	cmp	r2, r0
1000a460:	d107      	bne.n	1000a472 <ble_mgr_events_callback_handler+0x8a>
1000a462:	e000      	b.n	1000a466 <ble_mgr_events_callback_handler+0x7e>
1000a464:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a466:	2300      	movs	r3, #0
1000a468:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a46a:	2101      	movs	r1, #1
						break;
1000a46c:	e011      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
1000a46e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a470:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a472:	3101      	adds	r1, #1
1000a474:	b2c9      	uxtb	r1, r1
1000a476:	42a1      	cmp	r1, r4
1000a478:	d3ed      	bcc.n	1000a456 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a47a:	2100      	movs	r1, #0
1000a47c:	e009      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a47e:	2100      	movs	r1, #0
1000a480:	e007      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a482:	2100      	movs	r1, #0
1000a484:	e005      	b.n	1000a492 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a486:	4b0a      	ldr	r3, [pc, #40]	; (1000a4b0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a488:	2405      	movs	r4, #5
1000a48a:	e7c4      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a48c:	4b09      	ldr	r3, [pc, #36]	; (1000a4b4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a48e:	2401      	movs	r4, #1
1000a490:	e7c1      	b.n	1000a416 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a492:	0008      	movs	r0, r1
1000a494:	bd30      	pop	{r4, r5, pc}
1000a496:	46c0      	nop			; (mov r8, r8)
1000a498:	1001129c 	.word	0x1001129c
1000a49c:	10012760 	.word	0x10012760
1000a4a0:	1001275c 	.word	0x1001275c
1000a4a4:	100129e4 	.word	0x100129e4
1000a4a8:	10012f88 	.word	0x10012f88
1000a4ac:	100129f8 	.word	0x100129f8
1000a4b0:	10012a0c 	.word	0x10012a0c
1000a4b4:	10012a44 	.word	0x10012a44

1000a4b8 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4ba:	4647      	mov	r7, r8
1000a4bc:	b480      	push	{r7}
1000a4be:	b090      	sub	sp, #64	; 0x40
1000a4c0:	0005      	movs	r5, r0
/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a4c2:	2400      	movs	r4, #0
1000a4c4:	4b6a      	ldr	r3, [pc, #424]	; (1000a670 <ble_device_init+0x1b8>)
1000a4c6:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a4c8:	2207      	movs	r2, #7
1000a4ca:	2100      	movs	r1, #0
1000a4cc:	4869      	ldr	r0, [pc, #420]	; (1000a674 <ble_device_init+0x1bc>)
1000a4ce:	4e6a      	ldr	r6, [pc, #424]	; (1000a678 <ble_device_init+0x1c0>)
1000a4d0:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a4d2:	2212      	movs	r2, #18
1000a4d4:	2100      	movs	r1, #0
1000a4d6:	4869      	ldr	r0, [pc, #420]	; (1000a67c <ble_device_init+0x1c4>)
1000a4d8:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a4da:	4b69      	ldr	r3, [pc, #420]	; (1000a680 <ble_device_init+0x1c8>)
1000a4dc:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a4de:	22cd      	movs	r2, #205	; 0xcd
1000a4e0:	0092      	lsls	r2, r2, #2
1000a4e2:	2100      	movs	r1, #0
1000a4e4:	4867      	ldr	r0, [pc, #412]	; (1000a684 <ble_device_init+0x1cc>)
1000a4e6:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a4e8:	4b67      	ldr	r3, [pc, #412]	; (1000a688 <ble_device_init+0x1d0>)
1000a4ea:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a4ec:	2283      	movs	r2, #131	; 0x83
1000a4ee:	0092      	lsls	r2, r2, #2
1000a4f0:	2100      	movs	r1, #0
1000a4f2:	4866      	ldr	r0, [pc, #408]	; (1000a68c <ble_device_init+0x1d4>)
1000a4f4:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a4f6:	220c      	movs	r2, #12
1000a4f8:	2100      	movs	r1, #0
1000a4fa:	4865      	ldr	r0, [pc, #404]	; (1000a690 <ble_device_init+0x1d8>)
1000a4fc:	47b0      	blx	r6

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a4fe:	4b65      	ldr	r3, [pc, #404]	; (1000a694 <ble_device_init+0x1dc>)
1000a500:	601c      	str	r4, [r3, #0]
1000a502:	605c      	str	r4, [r3, #4]
1000a504:	609c      	str	r4, [r3, #8]
1000a506:	60dc      	str	r4, [r3, #12]
1000a508:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a50a:	4b63      	ldr	r3, [pc, #396]	; (1000a698 <ble_device_init+0x1e0>)
1000a50c:	601c      	str	r4, [r3, #0]
1000a50e:	605c      	str	r4, [r3, #4]
1000a510:	609c      	str	r4, [r3, #8]
1000a512:	60dc      	str	r4, [r3, #12]
1000a514:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a516:	4b61      	ldr	r3, [pc, #388]	; (1000a69c <ble_device_init+0x1e4>)
1000a518:	601c      	str	r4, [r3, #0]
1000a51a:	605c      	str	r4, [r3, #4]
1000a51c:	609c      	str	r4, [r3, #8]
1000a51e:	60dc      	str	r4, [r3, #12]
1000a520:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a522:	4b5f      	ldr	r3, [pc, #380]	; (1000a6a0 <ble_device_init+0x1e8>)
1000a524:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a526:	4b5f      	ldr	r3, [pc, #380]	; (1000a6a4 <ble_device_init+0x1ec>)
1000a528:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a52a:	4b5f      	ldr	r3, [pc, #380]	; (1000a6a8 <ble_device_init+0x1f0>)
1000a52c:	601c      	str	r4, [r3, #0]
1000a52e:	605c      	str	r4, [r3, #4]
1000a530:	609c      	str	r4, [r3, #8]
1000a532:	60dc      	str	r4, [r3, #12]
1000a534:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a536:	4b5d      	ldr	r3, [pc, #372]	; (1000a6ac <ble_device_init+0x1f4>)
1000a538:	601c      	str	r4, [r3, #0]
1000a53a:	4c5d      	ldr	r4, [pc, #372]	; (1000a6b0 <ble_device_init+0x1f8>)
1000a53c:	239b      	movs	r3, #155	; 0x9b
1000a53e:	009b      	lsls	r3, r3, #2
1000a540:	4698      	mov	r8, r3
1000a542:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a544:	4f4c      	ldr	r7, [pc, #304]	; (1000a678 <ble_device_init+0x1c0>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a546:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a548:	227c      	movs	r2, #124	; 0x7c
1000a54a:	2100      	movs	r1, #0
1000a54c:	0020      	movs	r0, r4
1000a54e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a550:	0023      	movs	r3, r4
1000a552:	335e      	adds	r3, #94	; 0x5e
1000a554:	2200      	movs	r2, #0
1000a556:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a558:	7626      	strb	r6, [r4, #24]
1000a55a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a55c:	45a0      	cmp	r8, r4
1000a55e:	d1f3      	bne.n	1000a548 <ble_device_init+0x90>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a560:	4b54      	ldr	r3, [pc, #336]	; (1000a6b4 <ble_device_init+0x1fc>)
1000a562:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a564:	4854      	ldr	r0, [pc, #336]	; (1000a6b8 <ble_device_init+0x200>)
1000a566:	4b55      	ldr	r3, [pc, #340]	; (1000a6bc <ble_device_init+0x204>)
1000a568:	4798      	blx	r3
1000a56a:	4855      	ldr	r0, [pc, #340]	; (1000a6c0 <ble_device_init+0x208>)
1000a56c:	4b55      	ldr	r3, [pc, #340]	; (1000a6c4 <ble_device_init+0x20c>)
1000a56e:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a570:	4847      	ldr	r0, [pc, #284]	; (1000a690 <ble_device_init+0x1d8>)
1000a572:	4b55      	ldr	r3, [pc, #340]	; (1000a6c8 <ble_device_init+0x210>)
1000a574:	4798      	blx	r3
1000a576:	2800      	cmp	r0, #0
1000a578:	d00b      	beq.n	1000a592 <ble_device_init+0xda>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a57a:	4e4f      	ldr	r6, [pc, #316]	; (1000a6b8 <ble_device_init+0x200>)
1000a57c:	0030      	movs	r0, r6
1000a57e:	4d4f      	ldr	r5, [pc, #316]	; (1000a6bc <ble_device_init+0x204>)
1000a580:	47a8      	blx	r5
1000a582:	4852      	ldr	r0, [pc, #328]	; (1000a6cc <ble_device_init+0x214>)
1000a584:	4c4f      	ldr	r4, [pc, #316]	; (1000a6c4 <ble_device_init+0x20c>)
1000a586:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a588:	0030      	movs	r0, r6
1000a58a:	47a8      	blx	r5
1000a58c:	4850      	ldr	r0, [pc, #320]	; (1000a6d0 <ble_device_init+0x218>)
1000a58e:	47a0      	blx	r4
1000a590:	e7fe      	b.n	1000a590 <ble_device_init+0xd8>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a592:	4a50      	ldr	r2, [pc, #320]	; (1000a6d4 <ble_device_init+0x21c>)
1000a594:	2100      	movs	r1, #0
1000a596:	2000      	movs	r0, #0
1000a598:	4c4f      	ldr	r4, [pc, #316]	; (1000a6d8 <ble_device_init+0x220>)
1000a59a:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a59c:	4a4f      	ldr	r2, [pc, #316]	; (1000a6dc <ble_device_init+0x224>)
1000a59e:	2102      	movs	r1, #2
1000a5a0:	2000      	movs	r0, #0
1000a5a2:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a5a4:	2109      	movs	r1, #9
1000a5a6:	484e      	ldr	r0, [pc, #312]	; (1000a6e0 <ble_device_init+0x228>)
1000a5a8:	4b4e      	ldr	r3, [pc, #312]	; (1000a6e4 <ble_device_init+0x22c>)
1000a5aa:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a5ac:	2800      	cmp	r0, #0
1000a5ae:	d005      	beq.n	1000a5bc <ble_device_init+0x104>
	{
		DBG_LOG("Device name set failed");
1000a5b0:	4841      	ldr	r0, [pc, #260]	; (1000a6b8 <ble_device_init+0x200>)
1000a5b2:	4b42      	ldr	r3, [pc, #264]	; (1000a6bc <ble_device_init+0x204>)
1000a5b4:	4798      	blx	r3
1000a5b6:	484c      	ldr	r0, [pc, #304]	; (1000a6e8 <ble_device_init+0x230>)
1000a5b8:	4b42      	ldr	r3, [pc, #264]	; (1000a6c4 <ble_device_init+0x20c>)
1000a5ba:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a5bc:	2207      	movs	r2, #7
1000a5be:	494b      	ldr	r1, [pc, #300]	; (1000a6ec <ble_device_init+0x234>)
1000a5c0:	3108      	adds	r1, #8
1000a5c2:	a804      	add	r0, sp, #16
1000a5c4:	4b4a      	ldr	r3, [pc, #296]	; (1000a6f0 <ble_device_init+0x238>)
1000a5c6:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a5c8:	2226      	movs	r2, #38	; 0x26
1000a5ca:	2100      	movs	r1, #0
1000a5cc:	a806      	add	r0, sp, #24
1000a5ce:	4b2a      	ldr	r3, [pc, #168]	; (1000a678 <ble_device_init+0x1c0>)
1000a5d0:	4798      	blx	r3
	
	if (addr == NULL)
1000a5d2:	2d00      	cmp	r5, #0
1000a5d4:	d10c      	bne.n	1000a5f0 <ble_device_init+0x138>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a5d6:	a804      	add	r0, sp, #16
1000a5d8:	4b46      	ldr	r3, [pc, #280]	; (1000a6f4 <ble_device_init+0x23c>)
1000a5da:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a5dc:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a5de:	2800      	cmp	r0, #0
1000a5e0:	d006      	beq.n	1000a5f0 <ble_device_init+0x138>
		{
			DBG_LOG("BD address get failed");
1000a5e2:	4835      	ldr	r0, [pc, #212]	; (1000a6b8 <ble_device_init+0x200>)
1000a5e4:	4b35      	ldr	r3, [pc, #212]	; (1000a6bc <ble_device_init+0x204>)
1000a5e6:	4798      	blx	r3
1000a5e8:	4843      	ldr	r0, [pc, #268]	; (1000a6f8 <ble_device_init+0x240>)
1000a5ea:	4b36      	ldr	r3, [pc, #216]	; (1000a6c4 <ble_device_init+0x20c>)
1000a5ec:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a5ee:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a5f0:	4831      	ldr	r0, [pc, #196]	; (1000a6b8 <ble_device_init+0x200>)
1000a5f2:	4b32      	ldr	r3, [pc, #200]	; (1000a6bc <ble_device_init+0x204>)
1000a5f4:	4798      	blx	r3
1000a5f6:	792b      	ldrb	r3, [r5, #4]
1000a5f8:	796a      	ldrb	r2, [r5, #5]
1000a5fa:	79a9      	ldrb	r1, [r5, #6]
1000a5fc:	7828      	ldrb	r0, [r5, #0]
1000a5fe:	9003      	str	r0, [sp, #12]
1000a600:	7868      	ldrb	r0, [r5, #1]
1000a602:	9002      	str	r0, [sp, #8]
1000a604:	78a8      	ldrb	r0, [r5, #2]
1000a606:	9001      	str	r0, [sp, #4]
1000a608:	78e8      	ldrb	r0, [r5, #3]
1000a60a:	9000      	str	r0, [sp, #0]
1000a60c:	483b      	ldr	r0, [pc, #236]	; (1000a6fc <ble_device_init+0x244>)
1000a60e:	4c2d      	ldr	r4, [pc, #180]	; (1000a6c4 <ble_device_init+0x20c>)
1000a610:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a612:	ac06      	add	r4, sp, #24
1000a614:	2305      	movs	r3, #5
1000a616:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a618:	4b39      	ldr	r3, [pc, #228]	; (1000a700 <ble_device_init+0x248>)
1000a61a:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a61c:	2207      	movs	r2, #7
1000a61e:	0029      	movs	r1, r5
1000a620:	a807      	add	r0, sp, #28
1000a622:	4b33      	ldr	r3, [pc, #204]	; (1000a6f0 <ble_device_init+0x238>)
1000a624:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a626:	2300      	movs	r3, #0
1000a628:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a62a:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a62c:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a62e:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a630:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a632:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a634:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a636:	2380      	movs	r3, #128	; 0x80
1000a638:	009b      	lsls	r3, r3, #2
1000a63a:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a63c:	0020      	movs	r0, r4
1000a63e:	4b31      	ldr	r3, [pc, #196]	; (1000a704 <ble_device_init+0x24c>)
1000a640:	4798      	blx	r3
1000a642:	2800      	cmp	r0, #0
1000a644:	d005      	beq.n	1000a652 <ble_device_init+0x19a>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a646:	481c      	ldr	r0, [pc, #112]	; (1000a6b8 <ble_device_init+0x200>)
1000a648:	4b1c      	ldr	r3, [pc, #112]	; (1000a6bc <ble_device_init+0x204>)
1000a64a:	4798      	blx	r3
1000a64c:	482e      	ldr	r0, [pc, #184]	; (1000a708 <ble_device_init+0x250>)
1000a64e:	4b1d      	ldr	r3, [pc, #116]	; (1000a6c4 <ble_device_init+0x20c>)
1000a650:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a652:	0028      	movs	r0, r5
1000a654:	4b2d      	ldr	r3, [pc, #180]	; (1000a70c <ble_device_init+0x254>)
1000a656:	4798      	blx	r3
1000a658:	2800      	cmp	r0, #0
1000a65a:	d005      	beq.n	1000a668 <ble_device_init+0x1b0>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a65c:	4816      	ldr	r0, [pc, #88]	; (1000a6b8 <ble_device_init+0x200>)
1000a65e:	4b17      	ldr	r3, [pc, #92]	; (1000a6bc <ble_device_init+0x204>)
1000a660:	4798      	blx	r3
1000a662:	482b      	ldr	r0, [pc, #172]	; (1000a710 <ble_device_init+0x258>)
1000a664:	4b17      	ldr	r3, [pc, #92]	; (1000a6c4 <ble_device_init+0x20c>)
1000a666:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a668:	b010      	add	sp, #64	; 0x40
1000a66a:	bc04      	pop	{r2}
1000a66c:	4690      	mov	r8, r2
1000a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a670:	1001244c 	.word	0x1001244c
1000a674:	10012454 	.word	0x10012454
1000a678:	1000f969 	.word	0x1000f969
1000a67c:	10012a20 	.word	0x10012a20
1000a680:	10012450 	.word	0x10012450
1000a684:	10012a48 	.word	0x10012a48
1000a688:	10012a40 	.word	0x10012a40
1000a68c:	10012d7c 	.word	0x10012d7c
1000a690:	10012a34 	.word	0x10012a34
1000a694:	100129f8 	.word	0x100129f8
1000a698:	10012a0c 	.word	0x10012a0c
1000a69c:	10012760 	.word	0x10012760
1000a6a0:	10012a44 	.word	0x10012a44
1000a6a4:	1001275c 	.word	0x1001275c
1000a6a8:	100129e4 	.word	0x100129e4
1000a6ac:	10012f88 	.word	0x10012f88
1000a6b0:	10012774 	.word	0x10012774
1000a6b4:	100129e0 	.word	0x100129e0
1000a6b8:	10010d64 	.word	0x10010d64
1000a6bc:	1000fa99 	.word	0x1000fa99
1000a6c0:	10011b48 	.word	0x10011b48
1000a6c4:	1000f979 	.word	0x1000f979
1000a6c8:	1000c5f5 	.word	0x1000c5f5
1000a6cc:	10011b5c 	.word	0x10011b5c
1000a6d0:	10011b7c 	.word	0x10011b7c
1000a6d4:	10011d60 	.word	0x10011d60
1000a6d8:	1000a3e9 	.word	0x1000a3e9
1000a6dc:	100113c4 	.word	0x100113c4
1000a6e0:	10011bb8 	.word	0x10011bb8
1000a6e4:	1000c50d 	.word	0x1000c50d
1000a6e8:	10011bc4 	.word	0x10011bc4
1000a6ec:	100113a8 	.word	0x100113a8
1000a6f0:	1000f957 	.word	0x1000f957
1000a6f4:	1000c541 	.word	0x1000c541
1000a6f8:	10011bdc 	.word	0x10011bdc
1000a6fc:	10011bf4 	.word	0x10011bf4
1000a700:	00003a98 	.word	0x00003a98
1000a704:	1000c565 	.word	0x1000c565
1000a708:	10011c2c 	.word	0x10011c2c
1000a70c:	1000c78d 	.word	0x1000c78d
1000a710:	10011c50 	.word	0x10011c50

1000a714 <gap_dev_connect>:
	return AT_BLE_SUCCESS;
}

/** @brief request the peer device for connection */
at_ble_status_t gap_dev_connect(at_ble_addr_t *dev_addr)
{
1000a714:	b510      	push	{r4, lr}
1000a716:	b086      	sub	sp, #24
1000a718:	0004      	movs	r4, r0
	at_ble_connection_params_t gap_conn_parameter;
	
	memcpy((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)dev_addr, sizeof(at_ble_addr_t));
1000a71a:	2207      	movs	r2, #7
1000a71c:	0001      	movs	r1, r0
1000a71e:	480c      	ldr	r0, [pc, #48]	; (1000a750 <gap_dev_connect+0x3c>)
1000a720:	4b0c      	ldr	r3, [pc, #48]	; (1000a754 <gap_dev_connect+0x40>)
1000a722:	4798      	blx	r3

	gap_conn_parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
1000a724:	ab03      	add	r3, sp, #12
1000a726:	2208      	movs	r2, #8
1000a728:	801a      	strh	r2, [r3, #0]
	gap_conn_parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
1000a72a:	3202      	adds	r2, #2
1000a72c:	805a      	strh	r2, [r3, #2]
	gap_conn_parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
1000a72e:	3a06      	subs	r2, #6
1000a730:	809a      	strh	r2, [r3, #4]
	gap_conn_parameter.ce_len_min = GAP_CE_LEN_MIN;
1000a732:	2200      	movs	r2, #0
1000a734:	811a      	strh	r2, [r3, #8]
	gap_conn_parameter.ce_len_max = GAP_CE_LEN_MAX;
1000a736:	815a      	strh	r2, [r3, #10]
	gap_conn_parameter.superv_to = GAP_SUPERVISION_TIMOUT;
1000a738:	22fa      	movs	r2, #250	; 0xfa
1000a73a:	00d2      	lsls	r2, r2, #3
1000a73c:	80da      	strh	r2, [r3, #6]

	return (at_ble_connect(dev_addr, GAP_CONNECT_PEER_COUNT, SCAN_INTERVAL, SCAN_WINDOW, &gap_conn_parameter));
1000a73e:	9300      	str	r3, [sp, #0]
1000a740:	2360      	movs	r3, #96	; 0x60
1000a742:	2260      	movs	r2, #96	; 0x60
1000a744:	2101      	movs	r1, #1
1000a746:	0020      	movs	r0, r4
1000a748:	4c03      	ldr	r4, [pc, #12]	; (1000a758 <gap_dev_connect+0x44>)
1000a74a:	47a0      	blx	r4
}
1000a74c:	b006      	add	sp, #24
1000a74e:	bd10      	pop	{r4, pc}
1000a750:	10012454 	.word	0x10012454
1000a754:	1000f957 	.word	0x1000f957
1000a758:	1000c891 	.word	0x1000c891

1000a75c <gap_dev_scan>:

/** @brief instructs device to start scanning */
at_ble_status_t gap_dev_scan(void)
{
1000a75c:	b510      	push	{r4, lr}
1000a75e:	b084      	sub	sp, #16
	/* Device Scan discover started*/
	DBG_LOG("Scanning...Please wait...");
1000a760:	480a      	ldr	r0, [pc, #40]	; (1000a78c <gap_dev_scan+0x30>)
1000a762:	4b0b      	ldr	r3, [pc, #44]	; (1000a790 <gap_dev_scan+0x34>)
1000a764:	4798      	blx	r3
1000a766:	480b      	ldr	r0, [pc, #44]	; (1000a794 <gap_dev_scan+0x38>)
1000a768:	4b0b      	ldr	r3, [pc, #44]	; (1000a798 <gap_dev_scan+0x3c>)
1000a76a:	4798      	blx	r3
	/* make service discover counter to zero*/
	scan_response_count = 0;
1000a76c:	2300      	movs	r3, #0
1000a76e:	4a0b      	ldr	r2, [pc, #44]	; (1000a79c <gap_dev_scan+0x40>)
1000a770:	7013      	strb	r3, [r2, #0]
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
1000a772:	2201      	movs	r2, #1
1000a774:	9202      	str	r2, [sp, #8]
1000a776:	9301      	str	r3, [sp, #4]
1000a778:	9300      	str	r3, [sp, #0]
1000a77a:	3301      	adds	r3, #1
1000a77c:	2200      	movs	r2, #0
1000a77e:	2160      	movs	r1, #96	; 0x60
1000a780:	2060      	movs	r0, #96	; 0x60
1000a782:	4c07      	ldr	r4, [pc, #28]	; (1000a7a0 <gap_dev_scan+0x44>)
1000a784:	47a0      	blx	r4
}
1000a786:	b004      	add	sp, #16
1000a788:	bd10      	pop	{r4, pc}
1000a78a:	46c0      	nop			; (mov r8, r8)
1000a78c:	10010d64 	.word	0x10010d64
1000a790:	1000fa99 	.word	0x1000fa99
1000a794:	10011c70 	.word	0x10011c70
1000a798:	1000f979 	.word	0x1000f979
1000a79c:	10012450 	.word	0x10012450
1000a7a0:	1000c7e1 	.word	0x1000c7e1

1000a7a4 <scan_info_parse>:
}

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
1000a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7a6:	465f      	mov	r7, fp
1000a7a8:	4656      	mov	r6, sl
1000a7aa:	464d      	mov	r5, r9
1000a7ac:	4644      	mov	r4, r8
1000a7ae:	b4f0      	push	{r4, r5, r6, r7}
1000a7b0:	b087      	sub	sp, #28
1000a7b2:	4681      	mov	r9, r0
1000a7b4:	9101      	str	r1, [sp, #4]
1000a7b6:	4693      	mov	fp, r2
	if (scan_info_data->adv_data_len) {
1000a7b8:	2327      	movs	r3, #39	; 0x27
1000a7ba:	5cc6      	ldrb	r6, [r0, r3]
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000a7bc:	20e2      	movs	r0, #226	; 0xe2

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
	if (scan_info_data->adv_data_len) {
1000a7be:	2e00      	cmp	r6, #0
1000a7c0:	d062      	beq.n	1000a888 <scan_info_parse+0xe4>
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
1000a7c2:	2200      	movs	r2, #0
1000a7c4:	ab04      	add	r3, sp, #16
1000a7c6:	701a      	strb	r2, [r3, #0]
1000a7c8:	2500      	movs	r5, #0
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000a7ca:	2301      	movs	r3, #1
1000a7cc:	425b      	negs	r3, r3
1000a7ce:	4698      	mov	r8, r3
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000a7d0:	000b      	movs	r3, r1
1000a7d2:	3301      	adds	r3, #1
1000a7d4:	9300      	str	r3, [sp, #0]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000a7d6:	4b30      	ldr	r3, [pc, #192]	; (1000a898 <scan_info_parse+0xf4>)
1000a7d8:	469a      	mov	sl, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
1000a7da:	464b      	mov	r3, r9
1000a7dc:	195a      	adds	r2, r3, r5
1000a7de:	7a11      	ldrb	r1, [r2, #8]
1000a7e0:	ab04      	add	r3, sp, #16
1000a7e2:	7019      	strb	r1, [r3, #0]
			adv_element_data.type
			= scan_info_data->adv_data[index + 1];
1000a7e4:	7a52      	ldrb	r2, [r2, #9]
1000a7e6:	705a      	strb	r2, [r3, #1]
			adv_element_data.data
			= &scan_info_data->adv_data[index + 2];
1000a7e8:	002a      	movs	r2, r5
1000a7ea:	320a      	adds	r2, #10
1000a7ec:	444a      	add	r2, r9
1000a7ee:	9205      	str	r2, [sp, #20]
			adv_element_p = &adv_element_data;

			if (adv_element_p->type == adv_type) {
1000a7f0:	785b      	ldrb	r3, [r3, #1]
1000a7f2:	b2db      	uxtb	r3, r3
1000a7f4:	455b      	cmp	r3, fp
1000a7f6:	d136      	bne.n	1000a866 <scan_info_parse+0xc2>
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
1000a7f8:	ab04      	add	r3, sp, #16
1000a7fa:	781c      	ldrb	r4, [r3, #0]
				/* actual size of the data	*/
				adv_type_size -= 1;
1000a7fc:	3c01      	subs	r4, #1
1000a7fe:	b2e4      	uxtb	r4, r4
				while (adv_type_size) {
1000a800:	2c00      	cmp	r4, #0
1000a802:	d030      	beq.n	1000a866 <scan_info_parse+0xc2>
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
1000a804:	9b01      	ldr	r3, [sp, #4]
1000a806:	781f      	ldrb	r7, [r3, #0]
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000a808:	4643      	mov	r3, r8
1000a80a:	9303      	str	r3, [sp, #12]
					if (ble_service_uuid->type ==
1000a80c:	2f00      	cmp	r7, #0
1000a80e:	d10a      	bne.n	1000a826 <scan_info_parse+0x82>
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000a810:	9805      	ldr	r0, [sp, #20]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000a812:	2202      	movs	r2, #2
1000a814:	9900      	ldr	r1, [sp, #0]
1000a816:	47d0      	blx	sl
1000a818:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_16_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
1000a81a:	9b05      	ldr	r3, [sp, #20]
1000a81c:	3302      	adds	r3, #2
1000a81e:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
1000a820:	3c02      	subs	r4, #2
1000a822:	b2e4      	uxtb	r4, r4
1000a824:	e01a      	b.n	1000a85c <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000a826:	2f01      	cmp	r7, #1
1000a828:	d10b      	bne.n	1000a842 <scan_info_parse+0x9e>
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000a82a:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_16_LEN;
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
1000a82c:	2204      	movs	r2, #4
1000a82e:	9900      	ldr	r1, [sp, #0]
1000a830:	4b19      	ldr	r3, [pc, #100]	; (1000a898 <scan_info_parse+0xf4>)
1000a832:	4798      	blx	r3
1000a834:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_32_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
1000a836:	9b05      	ldr	r3, [sp, #20]
1000a838:	3304      	adds	r3, #4
1000a83a:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000a83c:	3c04      	subs	r4, #4
1000a83e:	b2e4      	uxtb	r4, r4
1000a840:	e00c      	b.n	1000a85c <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000a842:	2f02      	cmp	r7, #2
1000a844:	d10a      	bne.n	1000a85c <scan_info_parse+0xb8>
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000a846:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000a848:	2210      	movs	r2, #16
1000a84a:	9900      	ldr	r1, [sp, #0]
1000a84c:	4b12      	ldr	r3, [pc, #72]	; (1000a898 <scan_info_parse+0xf4>)
1000a84e:	4798      	blx	r3
1000a850:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_128_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
1000a852:	9b05      	ldr	r3, [sp, #20]
1000a854:	3310      	adds	r3, #16
1000a856:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000a858:	3c04      	subs	r4, #4
1000a85a:	b2e4      	uxtb	r4, r4
					}

					if (cmp_status == 0) {
1000a85c:	9b03      	ldr	r3, [sp, #12]
1000a85e:	2b00      	cmp	r3, #0
1000a860:	d011      	beq.n	1000a886 <scan_info_parse+0xe2>
			if (adv_element_p->type == adv_type) {
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
1000a862:	2c00      	cmp	r4, #0
1000a864:	d1d0      	bne.n	1000a808 <scan_info_parse+0x64>
						return AT_BLE_SUCCESS;
					}
				}
			}

			index += (adv_element_data.len + 1);
1000a866:	aa04      	add	r2, sp, #16
1000a868:	7813      	ldrb	r3, [r2, #0]
1000a86a:	3301      	adds	r3, #1
1000a86c:	18ed      	adds	r5, r5, r3
1000a86e:	b2ed      	uxtb	r5, r5
			adv_element_data.len += 1;
1000a870:	7813      	ldrb	r3, [r2, #0]
1000a872:	3301      	adds	r3, #1
1000a874:	b2db      	uxtb	r3, r3
1000a876:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
1000a878:	7813      	ldrb	r3, [r2, #0]
1000a87a:	1af6      	subs	r6, r6, r3
1000a87c:	b2f6      	uxtb	r6, r6
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
1000a87e:	2e00      	cmp	r6, #0
1000a880:	d1ab      	bne.n	1000a7da <scan_info_parse+0x36>
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000a882:	20e2      	movs	r0, #226	; 0xe2
1000a884:	e000      	b.n	1000a888 <scan_info_parse+0xe4>
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					}

					if (cmp_status == 0) {
						return AT_BLE_SUCCESS;
1000a886:	2000      	movs	r0, #0
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
}
1000a888:	b007      	add	sp, #28
1000a88a:	bc3c      	pop	{r2, r3, r4, r5}
1000a88c:	4690      	mov	r8, r2
1000a88e:	4699      	mov	r9, r3
1000a890:	46a2      	mov	sl, r4
1000a892:	46ab      	mov	fp, r5
1000a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a896:	46c0      	nop			; (mov r8, r8)
1000a898:	1000f939 	.word	0x1000f939

1000a89c <ble_connected_device_role>:
	}
	return false;
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000a89c:	b530      	push	{r4, r5, lr}
1000a89e:	4a0d      	ldr	r2, [pc, #52]	; (1000a8d4 <ble_connected_device_role+0x38>)
1000a8a0:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
1000a8a2:	001d      	movs	r5, r3
1000a8a4:	0014      	movs	r4, r2
1000a8a6:	345e      	adds	r4, #94	; 0x5e
1000a8a8:	7824      	ldrb	r4, [r4, #0]
1000a8aa:	2c01      	cmp	r4, #1
1000a8ac:	d90b      	bls.n	1000a8c6 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a8ae:	8914      	ldrh	r4, [r2, #8]
1000a8b0:	4284      	cmp	r4, r0
1000a8b2:	d108      	bne.n	1000a8c6 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000a8b4:	015b      	lsls	r3, r3, #5
1000a8b6:	1b5d      	subs	r5, r3, r5
1000a8b8:	00ad      	lsls	r5, r5, #2
1000a8ba:	4b06      	ldr	r3, [pc, #24]	; (1000a8d4 <ble_connected_device_role+0x38>)
1000a8bc:	195d      	adds	r5, r3, r5
1000a8be:	7cab      	ldrb	r3, [r5, #18]
1000a8c0:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000a8c2:	2000      	movs	r0, #0
			break;
1000a8c4:	e004      	b.n	1000a8d0 <ble_connected_device_role+0x34>
1000a8c6:	3301      	adds	r3, #1
1000a8c8:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a8ca:	2b05      	cmp	r3, #5
1000a8cc:	d1e9      	bne.n	1000a8a2 <ble_connected_device_role+0x6>
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000a8ce:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000a8d0:	bd30      	pop	{r4, r5, pc}
1000a8d2:	46c0      	nop			; (mov r8, r8)
1000a8d4:	10012774 	.word	0x10012774

1000a8d8 <ble_check_iscentral>:
	}
	return false;
}

bool ble_check_iscentral(at_ble_handle_t handle)
{
1000a8d8:	b500      	push	{lr}
1000a8da:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
1000a8dc:	466b      	mov	r3, sp
1000a8de:	1dd9      	adds	r1, r3, #7
1000a8e0:	2300      	movs	r3, #0
1000a8e2:	700b      	strb	r3, [r1, #0]
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000a8e4:	4b07      	ldr	r3, [pc, #28]	; (1000a904 <ble_check_iscentral+0x2c>)
1000a8e6:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000a8e8:	2300      	movs	r3, #0

bool ble_check_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000a8ea:	2800      	cmp	r0, #0
1000a8ec:	d106      	bne.n	1000a8fc <ble_check_iscentral+0x24>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000a8ee:	466b      	mov	r3, sp
1000a8f0:	3307      	adds	r3, #7
1000a8f2:	781b      	ldrb	r3, [r3, #0]
1000a8f4:	3b05      	subs	r3, #5
1000a8f6:	4258      	negs	r0, r3
1000a8f8:	4143      	adcs	r3, r0
1000a8fa:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000a8fc:	0018      	movs	r0, r3
1000a8fe:	b003      	add	sp, #12
1000a900:	bd00      	pop	{pc}
1000a902:	46c0      	nop			; (mov r8, r8)
1000a904:	1000a89d 	.word	0x1000a89d

1000a908 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a90a:	0004      	movs	r4, r0
1000a90c:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000a90e:	4848      	ldr	r0, [pc, #288]	; (1000aa30 <ble_event_manager+0x128>)
1000a910:	4b48      	ldr	r3, [pc, #288]	; (1000aa34 <ble_event_manager+0x12c>)
1000a912:	4798      	blx	r3
1000a914:	0021      	movs	r1, r4
1000a916:	4848      	ldr	r0, [pc, #288]	; (1000aa38 <ble_event_manager+0x130>)
1000a918:	4b48      	ldr	r3, [pc, #288]	; (1000aa3c <ble_event_manager+0x134>)
1000a91a:	4798      	blx	r3
	switch(events)
1000a91c:	2c3b      	cmp	r4, #59	; 0x3b
1000a91e:	d879      	bhi.n	1000aa14 <ble_event_manager+0x10c>
1000a920:	00a3      	lsls	r3, r4, #2
1000a922:	4a47      	ldr	r2, [pc, #284]	; (1000aa40 <ble_event_manager+0x138>)
1000a924:	58d3      	ldr	r3, [r2, r3]
1000a926:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a928:	00a4      	lsls	r4, r4, #2
1000a92a:	2600      	movs	r6, #0
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a92c:	4f45      	ldr	r7, [pc, #276]	; (1000aa44 <ble_event_manager+0x13c>)
1000a92e:	59bb      	ldr	r3, [r7, r6]
1000a930:	2b00      	cmp	r3, #0
1000a932:	d004      	beq.n	1000a93e <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a934:	591b      	ldr	r3, [r3, r4]
1000a936:	2b00      	cmp	r3, #0
1000a938:	d001      	beq.n	1000a93e <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);
1000a93a:	0028      	movs	r0, r5
1000a93c:	4798      	blx	r3
1000a93e:	3604      	adds	r6, #4
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a940:	2e14      	cmp	r6, #20
1000a942:	d1f4      	bne.n	1000a92e <ble_event_manager+0x26>
1000a944:	e072      	b.n	1000aa2c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a946:	3c13      	subs	r4, #19
1000a948:	b2e4      	uxtb	r4, r4
1000a94a:	00a4      	lsls	r4, r4, #2
1000a94c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a94e:	4f3e      	ldr	r7, [pc, #248]	; (1000aa48 <ble_event_manager+0x140>)
1000a950:	59bb      	ldr	r3, [r7, r6]
1000a952:	2b00      	cmp	r3, #0
1000a954:	d004      	beq.n	1000a960 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a956:	591b      	ldr	r3, [r3, r4]
1000a958:	2b00      	cmp	r3, #0
1000a95a:	d001      	beq.n	1000a960 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000a95c:	0028      	movs	r0, r5
1000a95e:	4798      	blx	r3
1000a960:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a962:	2e14      	cmp	r6, #20
1000a964:	d1f4      	bne.n	1000a950 <ble_event_manager+0x48>
1000a966:	e061      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000a968:	3c1d      	subs	r4, #29
1000a96a:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000a96c:	4830      	ldr	r0, [pc, #192]	; (1000aa30 <ble_event_manager+0x128>)
1000a96e:	4b31      	ldr	r3, [pc, #196]	; (1000aa34 <ble_event_manager+0x12c>)
1000a970:	4798      	blx	r3
1000a972:	0021      	movs	r1, r4
1000a974:	4835      	ldr	r0, [pc, #212]	; (1000aa4c <ble_event_manager+0x144>)
1000a976:	4b31      	ldr	r3, [pc, #196]	; (1000aa3c <ble_event_manager+0x134>)
1000a978:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a97a:	00a4      	lsls	r4, r4, #2
1000a97c:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a97e:	4f34      	ldr	r7, [pc, #208]	; (1000aa50 <ble_event_manager+0x148>)
1000a980:	59bb      	ldr	r3, [r7, r6]
1000a982:	2b00      	cmp	r3, #0
1000a984:	d004      	beq.n	1000a990 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a986:	591b      	ldr	r3, [r3, r4]
1000a988:	2b00      	cmp	r3, #0
1000a98a:	d001      	beq.n	1000a990 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000a98c:	0028      	movs	r0, r5
1000a98e:	4798      	blx	r3
1000a990:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a992:	2e14      	cmp	r6, #20
1000a994:	d1f4      	bne.n	1000a980 <ble_event_manager+0x78>
1000a996:	e049      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a998:	3c27      	subs	r4, #39	; 0x27
1000a99a:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a99c:	4b2d      	ldr	r3, [pc, #180]	; (1000aa54 <ble_event_manager+0x14c>)
1000a99e:	681b      	ldr	r3, [r3, #0]
1000a9a0:	2b00      	cmp	r3, #0
1000a9a2:	d043      	beq.n	1000aa2c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9a4:	00a4      	lsls	r4, r4, #2
1000a9a6:	58e3      	ldr	r3, [r4, r3]
1000a9a8:	2b00      	cmp	r3, #0
1000a9aa:	d03f      	beq.n	1000aa2c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000a9ac:	0028      	movs	r0, r5
1000a9ae:	4798      	blx	r3
1000a9b0:	e03c      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a9b2:	3c2d      	subs	r4, #45	; 0x2d
1000a9b4:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a9b6:	4b28      	ldr	r3, [pc, #160]	; (1000aa58 <ble_event_manager+0x150>)
1000a9b8:	681b      	ldr	r3, [r3, #0]
1000a9ba:	2b00      	cmp	r3, #0
1000a9bc:	d036      	beq.n	1000aa2c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9be:	00a4      	lsls	r4, r4, #2
1000a9c0:	58e3      	ldr	r3, [r4, r3]
1000a9c2:	2b00      	cmp	r3, #0
1000a9c4:	d032      	beq.n	1000aa2c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000a9c6:	0028      	movs	r0, r5
1000a9c8:	4798      	blx	r3
1000a9ca:	e02f      	b.n	1000aa2c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9cc:	3c36      	subs	r4, #54	; 0x36
1000a9ce:	b2e4      	uxtb	r4, r4
1000a9d0:	00a4      	lsls	r4, r4, #2
1000a9d2:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a9d4:	4f21      	ldr	r7, [pc, #132]	; (1000aa5c <ble_event_manager+0x154>)
1000a9d6:	59bb      	ldr	r3, [r7, r6]
1000a9d8:	2b00      	cmp	r3, #0
1000a9da:	d004      	beq.n	1000a9e6 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9dc:	591b      	ldr	r3, [r3, r4]
1000a9de:	2b00      	cmp	r3, #0
1000a9e0:	d001      	beq.n	1000a9e6 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000a9e2:	0028      	movs	r0, r5
1000a9e4:	4798      	blx	r3
1000a9e6:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a9e8:	2e14      	cmp	r6, #20
1000a9ea:	d1f4      	bne.n	1000a9d6 <ble_event_manager+0xce>
1000a9ec:	e01e      	b.n	1000aa2c <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a9ee:	3c38      	subs	r4, #56	; 0x38
1000a9f0:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a9f2:	4b1b      	ldr	r3, [pc, #108]	; (1000aa60 <ble_event_manager+0x158>)
1000a9f4:	681b      	ldr	r3, [r3, #0]
1000a9f6:	2b00      	cmp	r3, #0
1000a9f8:	d018      	beq.n	1000aa2c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9fa:	00a4      	lsls	r4, r4, #2
1000a9fc:	58e3      	ldr	r3, [r4, r3]
1000a9fe:	2b00      	cmp	r3, #0
1000aa00:	d014      	beq.n	1000aa2c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000aa02:	0028      	movs	r0, r5
1000aa04:	4798      	blx	r3
1000aa06:	e011      	b.n	1000aa2c <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000aa08:	4b16      	ldr	r3, [pc, #88]	; (1000aa64 <ble_event_manager+0x15c>)
1000aa0a:	681b      	ldr	r3, [r3, #0]
1000aa0c:	2b00      	cmp	r3, #0
1000aa0e:	d00d      	beq.n	1000aa2c <ble_event_manager+0x124>
			ble_user_event_cb();
1000aa10:	4798      	blx	r3
1000aa12:	e00b      	b.n	1000aa2c <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000aa14:	4e06      	ldr	r6, [pc, #24]	; (1000aa30 <ble_event_manager+0x128>)
1000aa16:	0030      	movs	r0, r6
1000aa18:	4d06      	ldr	r5, [pc, #24]	; (1000aa34 <ble_event_manager+0x12c>)
1000aa1a:	47a8      	blx	r5
1000aa1c:	0021      	movs	r1, r4
1000aa1e:	4812      	ldr	r0, [pc, #72]	; (1000aa68 <ble_event_manager+0x160>)
1000aa20:	4b06      	ldr	r3, [pc, #24]	; (1000aa3c <ble_event_manager+0x134>)
1000aa22:	4798      	blx	r3
		DBG_LOG("\r\n");
1000aa24:	0030      	movs	r0, r6
1000aa26:	47a8      	blx	r5
1000aa28:	0030      	movs	r0, r6
1000aa2a:	47a8      	blx	r5
	}
	break;		
	}
}
1000aa2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa2e:	46c0      	nop			; (mov r8, r8)
1000aa30:	10010d64 	.word	0x10010d64
1000aa34:	1000fa99 	.word	0x1000fa99
1000aa38:	10011cd0 	.word	0x10011cd0
1000aa3c:	1000f979 	.word	0x1000f979
1000aa40:	100112b8 	.word	0x100112b8
1000aa44:	100129f8 	.word	0x100129f8
1000aa48:	10012a0c 	.word	0x10012a0c
1000aa4c:	10011ce0 	.word	0x10011ce0
1000aa50:	10012760 	.word	0x10012760
1000aa54:	10012a44 	.word	0x10012a44
1000aa58:	1001275c 	.word	0x1001275c
1000aa5c:	100129e4 	.word	0x100129e4
1000aa60:	10012f88 	.word	0x10012f88
1000aa64:	1001244c 	.word	0x1001244c
1000aa68:	10011cf8 	.word	0x10011cf8

1000aa6c <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000aa6c:	b510      	push	{r4, lr}
1000aa6e:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000aa70:	4906      	ldr	r1, [pc, #24]	; (1000aa8c <ble_event_task+0x20>)
1000aa72:	4807      	ldr	r0, [pc, #28]	; (1000aa90 <ble_event_task+0x24>)
1000aa74:	4b07      	ldr	r3, [pc, #28]	; (1000aa94 <ble_event_task+0x28>)
1000aa76:	4798      	blx	r3
1000aa78:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000aa7a:	d104      	bne.n	1000aa86 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000aa7c:	4b04      	ldr	r3, [pc, #16]	; (1000aa90 <ble_event_task+0x24>)
1000aa7e:	7818      	ldrb	r0, [r3, #0]
1000aa80:	4902      	ldr	r1, [pc, #8]	; (1000aa8c <ble_event_task+0x20>)
1000aa82:	4b05      	ldr	r3, [pc, #20]	; (1000aa98 <ble_event_task+0x2c>)
1000aa84:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000aa86:	0020      	movs	r0, r4
1000aa88:	bd10      	pop	{r4, pc}
1000aa8a:	46c0      	nop			; (mov r8, r8)
1000aa8c:	10012d7c 	.word	0x10012d7c
1000aa90:	10012a40 	.word	0x10012a40
1000aa94:	1000be4d 	.word	0x1000be4d
1000aa98:	1000a909 	.word	0x1000a909

1000aa9c <button_init>:
#include <asf.h>
#include "button.h"

void button_init(button_callback_t callback)
{
1000aa9c:	b530      	push	{r4, r5, lr}
1000aa9e:	b083      	sub	sp, #12
1000aaa0:	0005      	movs	r5, r0
	struct gpio_config config_gpio_pin;

	gpio_get_config_defaults(&config_gpio_pin);
1000aaa2:	ac01      	add	r4, sp, #4
1000aaa4:	0020      	movs	r0, r4
1000aaa6:	4b0a      	ldr	r3, [pc, #40]	; (1000aad0 <button_init+0x34>)
1000aaa8:	4798      	blx	r3

	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000aaaa:	2300      	movs	r3, #0
1000aaac:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000aaae:	7063      	strb	r3, [r4, #1]

	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000aab0:	0021      	movs	r1, r4
1000aab2:	2017      	movs	r0, #23
1000aab4:	4b07      	ldr	r3, [pc, #28]	; (1000aad4 <button_init+0x38>)
1000aab6:	4798      	blx	r3
	gpio_init();
1000aab8:	4b07      	ldr	r3, [pc, #28]	; (1000aad8 <button_init+0x3c>)
1000aaba:	4798      	blx	r3
	gpio_register_callback(BUTTON_0_PIN, callback, GPIO_CALLBACK_RISING);
1000aabc:	2202      	movs	r2, #2
1000aabe:	0029      	movs	r1, r5
1000aac0:	2017      	movs	r0, #23
1000aac2:	4b06      	ldr	r3, [pc, #24]	; (1000aadc <button_init+0x40>)
1000aac4:	4798      	blx	r3
	gpio_enable_callback(BUTTON_0_PIN);
1000aac6:	2017      	movs	r0, #23
1000aac8:	4b05      	ldr	r3, [pc, #20]	; (1000aae0 <button_init+0x44>)
1000aaca:	4798      	blx	r3
}
1000aacc:	b003      	add	sp, #12
1000aace:	bd30      	pop	{r4, r5, pc}
1000aad0:	1000824d 	.word	0x1000824d
1000aad4:	1000825d 	.word	0x1000825d
1000aad8:	100086b1 	.word	0x100086b1
1000aadc:	1000856d 	.word	0x1000856d
1000aae0:	10008675 	.word	0x10008675

1000aae4 <uart_read_complete_callback>:
void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	read_complete_flag = true;
1000aae4:	2201      	movs	r2, #1
1000aae6:	4b01      	ldr	r3, [pc, #4]	; (1000aaec <uart_read_complete_callback+0x8>)
1000aae8:	701a      	strb	r2, [r3, #0]
}
1000aaea:	4770      	bx	lr
1000aaec:	1001245b 	.word	0x1001245b

1000aaf0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000aaf0:	b570      	push	{r4, r5, r6, lr}
1000aaf2:	0006      	movs	r6, r0
1000aaf4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000aaf6:	4c03      	ldr	r4, [pc, #12]	; (1000ab04 <usart_serial_getchar+0x14>)
1000aaf8:	0029      	movs	r1, r5
1000aafa:	0030      	movs	r0, r6
1000aafc:	47a0      	blx	r4
1000aafe:	2800      	cmp	r0, #0
1000ab00:	d1fa      	bne.n	1000aaf8 <usart_serial_getchar+0x8>
}
1000ab02:	bd70      	pop	{r4, r5, r6, pc}
1000ab04:	1000937d 	.word	0x1000937d

1000ab08 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ab08:	b570      	push	{r4, r5, r6, lr}
1000ab0a:	0006      	movs	r6, r0
1000ab0c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ab0e:	4c03      	ldr	r4, [pc, #12]	; (1000ab1c <usart_serial_putchar+0x14>)
1000ab10:	0029      	movs	r1, r5
1000ab12:	0030      	movs	r0, r6
1000ab14:	47a0      	blx	r4
1000ab16:	2800      	cmp	r0, #0
1000ab18:	d1fa      	bne.n	1000ab10 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ab1a:	bd70      	pop	{r4, r5, r6, pc}
1000ab1c:	1000936d 	.word	0x1000936d

1000ab20 <serial_console_init>:

void serial_console_init(void)
{
1000ab20:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ab22:	2100      	movs	r1, #0
1000ab24:	2000      	movs	r0, #0
1000ab26:	4b16      	ldr	r3, [pc, #88]	; (1000ab80 <serial_console_init+0x60>)
1000ab28:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ab2a:	4c16      	ldr	r4, [pc, #88]	; (1000ab84 <serial_console_init+0x64>)
1000ab2c:	0020      	movs	r0, r4
1000ab2e:	4b16      	ldr	r3, [pc, #88]	; (1000ab88 <serial_console_init+0x68>)
1000ab30:	4798      	blx	r3

	config_uart.baud_rate = 115200;
1000ab32:	23e1      	movs	r3, #225	; 0xe1
1000ab34:	025b      	lsls	r3, r3, #9
1000ab36:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000ab38:	2302      	movs	r3, #2
1000ab3a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000ab3c:	2203      	movs	r2, #3
1000ab3e:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000ab40:	3201      	adds	r2, #1
1000ab42:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000ab44:	3201      	adds	r2, #1
1000ab46:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000ab48:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000ab4a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000ab4c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000ab4e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ab50:	480e      	ldr	r0, [pc, #56]	; (1000ab8c <serial_console_init+0x6c>)
1000ab52:	4b0f      	ldr	r3, [pc, #60]	; (1000ab90 <serial_console_init+0x70>)
1000ab54:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ab56:	4a0f      	ldr	r2, [pc, #60]	; (1000ab94 <serial_console_init+0x74>)
1000ab58:	4b0f      	ldr	r3, [pc, #60]	; (1000ab98 <serial_console_init+0x78>)
1000ab5a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ab5c:	4a0f      	ldr	r2, [pc, #60]	; (1000ab9c <serial_console_init+0x7c>)
1000ab5e:	4b10      	ldr	r3, [pc, #64]	; (1000aba0 <serial_console_init+0x80>)
1000ab60:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ab62:	0022      	movs	r2, r4
1000ab64:	490f      	ldr	r1, [pc, #60]	; (1000aba4 <serial_console_init+0x84>)
1000ab66:	4b10      	ldr	r3, [pc, #64]	; (1000aba8 <serial_console_init+0x88>)
1000ab68:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ab6a:	4d10      	ldr	r5, [pc, #64]	; (1000abac <serial_console_init+0x8c>)
1000ab6c:	682b      	ldr	r3, [r5, #0]
1000ab6e:	6898      	ldr	r0, [r3, #8]
1000ab70:	2100      	movs	r1, #0
1000ab72:	4c0f      	ldr	r4, [pc, #60]	; (1000abb0 <serial_console_init+0x90>)
1000ab74:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ab76:	682b      	ldr	r3, [r5, #0]
1000ab78:	6858      	ldr	r0, [r3, #4]
1000ab7a:	2100      	movs	r1, #0
1000ab7c:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
}
1000ab7e:	bd70      	pop	{r4, r5, r6, pc}
1000ab80:	10008719 	.word	0x10008719
1000ab84:	10012fb0 	.word	0x10012fb0
1000ab88:	100091a5 	.word	0x100091a5
1000ab8c:	10012f8c 	.word	0x10012f8c
1000ab90:	10012730 	.word	0x10012730
1000ab94:	1000ab09 	.word	0x1000ab09
1000ab98:	1001272c 	.word	0x1001272c
1000ab9c:	1000aaf1 	.word	0x1000aaf1
1000aba0:	10012728 	.word	0x10012728
1000aba4:	40004000 	.word	0x40004000
1000aba8:	100091d1 	.word	0x100091d1
1000abac:	10012410 	.word	0x10012410
1000abb0:	1000fb25 	.word	0x1000fb25

1000abb4 <_time_start>:

void _time_start(unsigned int sec)
{
1000abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abb6:	b083      	sub	sp, #12
1000abb8:	0005      	movs	r5, r0
	system_clock_get_value();
1000abba:	4c0d      	ldr	r4, [pc, #52]	; (1000abf0 <_time_start+0x3c>)
1000abbc:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000abbe:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000abc0:	4f0c      	ldr	r7, [pc, #48]	; (1000abf4 <_time_start+0x40>)
1000abc2:	47b8      	blx	r7
1000abc4:	4e0c      	ldr	r6, [pc, #48]	; (1000abf8 <_time_start+0x44>)
1000abc6:	4a0d      	ldr	r2, [pc, #52]	; (1000abfc <_time_start+0x48>)
1000abc8:	4b0d      	ldr	r3, [pc, #52]	; (1000ac00 <_time_start+0x4c>)
1000abca:	47b0      	blx	r6
1000abcc:	9000      	str	r0, [sp, #0]
1000abce:	9101      	str	r1, [sp, #4]
1000abd0:	20fa      	movs	r0, #250	; 0xfa
1000abd2:	0080      	lsls	r0, r0, #2
1000abd4:	4368      	muls	r0, r5
1000abd6:	47b8      	blx	r7
1000abd8:	0002      	movs	r2, r0
1000abda:	000b      	movs	r3, r1
1000abdc:	9800      	ldr	r0, [sp, #0]
1000abde:	9901      	ldr	r1, [sp, #4]
1000abe0:	47b0      	blx	r6
1000abe2:	4b08      	ldr	r3, [pc, #32]	; (1000ac04 <_time_start+0x50>)
1000abe4:	4798      	blx	r3
1000abe6:	4b08      	ldr	r3, [pc, #32]	; (1000ac08 <_time_start+0x54>)
1000abe8:	6018      	str	r0, [r3, #0]
}
1000abea:	b003      	add	sp, #12
1000abec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abee:	46c0      	nop			; (mov r8, r8)
1000abf0:	1000879d 	.word	0x1000879d
1000abf4:	1000f5a9 	.word	0x1000f5a9
1000abf8:	1000e9a1 	.word	0x1000e9a1
1000abfc:	19feaec7 	.word	0x19feaec7
1000ac00:	3f09d8ef 	.word	0x3f09d8ef
1000ac04:	1000e965 	.word	0x1000e965
1000ac08:	1001245c 	.word	0x1001245c

1000ac0c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ac0c:	4b02      	ldr	r3, [pc, #8]	; (1000ac18 <_time_done+0xc>)
1000ac0e:	681a      	ldr	r2, [r3, #0]
1000ac10:	1e50      	subs	r0, r2, #1
1000ac12:	6018      	str	r0, [r3, #0]
}
1000ac14:	4770      	bx	lr
1000ac16:	46c0      	nop			; (mov r8, r8)
1000ac18:	1001245c 	.word	0x1001245c

1000ac1c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ac1c:	b570      	push	{r4, r5, r6, lr}
	
	read_complete_flag = false;
1000ac1e:	2400      	movs	r4, #0
1000ac20:	4b16      	ldr	r3, [pc, #88]	; (1000ac7c <getchar_b11_timeout+0x60>)
1000ac22:	701c      	strb	r4, [r3, #0]
	_time_start(sec);
1000ac24:	4b16      	ldr	r3, [pc, #88]	; (1000ac80 <getchar_b11_timeout+0x64>)
1000ac26:	4798      	blx	r3
	
	string_input[0] = 0;
1000ac28:	4d16      	ldr	r5, [pc, #88]	; (1000ac84 <getchar_b11_timeout+0x68>)
1000ac2a:	702c      	strb	r4, [r5, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ac2c:	4c16      	ldr	r4, [pc, #88]	; (1000ac88 <getchar_b11_timeout+0x6c>)
1000ac2e:	2202      	movs	r2, #2
1000ac30:	4916      	ldr	r1, [pc, #88]	; (1000ac8c <getchar_b11_timeout+0x70>)
1000ac32:	0020      	movs	r0, r4
1000ac34:	4b16      	ldr	r3, [pc, #88]	; (1000ac90 <getchar_b11_timeout+0x74>)
1000ac36:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ac38:	2102      	movs	r1, #2
1000ac3a:	0020      	movs	r0, r4
1000ac3c:	4b15      	ldr	r3, [pc, #84]	; (1000ac94 <getchar_b11_timeout+0x78>)
1000ac3e:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ac40:	2201      	movs	r2, #1
1000ac42:	0029      	movs	r1, r5
1000ac44:	0020      	movs	r0, r4
1000ac46:	4b14      	ldr	r3, [pc, #80]	; (1000ac98 <getchar_b11_timeout+0x7c>)
1000ac48:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
1000ac4a:	4c0c      	ldr	r4, [pc, #48]	; (1000ac7c <getchar_b11_timeout+0x60>)
1000ac4c:	4d13      	ldr	r5, [pc, #76]	; (1000ac9c <getchar_b11_timeout+0x80>)
1000ac4e:	7823      	ldrb	r3, [r4, #0]
1000ac50:	2b00      	cmp	r3, #0
1000ac52:	d102      	bne.n	1000ac5a <getchar_b11_timeout+0x3e>
1000ac54:	47a8      	blx	r5
1000ac56:	2800      	cmp	r0, #0
1000ac58:	d1f9      	bne.n	1000ac4e <getchar_b11_timeout+0x32>
	
	if( tick == 0 )
1000ac5a:	4b11      	ldr	r3, [pc, #68]	; (1000aca0 <getchar_b11_timeout+0x84>)
1000ac5c:	681b      	ldr	r3, [r3, #0]
1000ac5e:	2b00      	cmp	r3, #0
1000ac60:	d108      	bne.n	1000ac74 <getchar_b11_timeout+0x58>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
1000ac62:	4c09      	ldr	r4, [pc, #36]	; (1000ac88 <getchar_b11_timeout+0x6c>)
1000ac64:	2102      	movs	r1, #2
1000ac66:	0020      	movs	r0, r4
1000ac68:	4b0e      	ldr	r3, [pc, #56]	; (1000aca4 <getchar_b11_timeout+0x88>)
1000ac6a:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ac6c:	2102      	movs	r1, #2
1000ac6e:	0020      	movs	r0, r4
1000ac70:	4b0d      	ldr	r3, [pc, #52]	; (1000aca8 <getchar_b11_timeout+0x8c>)
1000ac72:	4798      	blx	r3
	}
	return string_input[0];
1000ac74:	4b03      	ldr	r3, [pc, #12]	; (1000ac84 <getchar_b11_timeout+0x68>)
1000ac76:	7818      	ldrb	r0, [r3, #0]
}
1000ac78:	bd70      	pop	{r4, r5, r6, pc}
1000ac7a:	46c0      	nop			; (mov r8, r8)
1000ac7c:	1001245b 	.word	0x1001245b
1000ac80:	1000abb5 	.word	0x1000abb5
1000ac84:	10012460 	.word	0x10012460
1000ac88:	10012f8c 	.word	0x10012f8c
1000ac8c:	1000aae5 	.word	0x1000aae5
1000ac90:	100093b9 	.word	0x100093b9
1000ac94:	100093e5 	.word	0x100093e5
1000ac98:	10009391 	.word	0x10009391
1000ac9c:	1000ac0d 	.word	0x1000ac0d
1000aca0:	1001245c 	.word	0x1001245c
1000aca4:	100093cd 	.word	0x100093cd
1000aca8:	10009405 	.word	0x10009405

1000acac <dualtimer_callback2>:
#include "conf_dualtimer.h"

extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
1000acac:	b510      	push	{r4, lr}
	puts("Timer2 trigger\r\n");
1000acae:	4802      	ldr	r0, [pc, #8]	; (1000acb8 <dualtimer_callback2+0xc>)
1000acb0:	4b02      	ldr	r3, [pc, #8]	; (1000acbc <dualtimer_callback2+0x10>)
1000acb2:	4798      	blx	r3
}
1000acb4:	bd10      	pop	{r4, pc}
1000acb6:	46c0      	nop			; (mov r8, r8)
1000acb8:	10011dac 	.word	0x10011dac
1000acbc:	1000fa99 	.word	0x1000fa99

1000acc0 <hw_timer_register_callback>:

	dualtimer_init(&config_dualtimer);
}

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000acc0:	b510      	push	{r4, lr}
1000acc2:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000acc4:	2000      	movs	r0, #0
1000acc6:	4c07      	ldr	r4, [pc, #28]	; (1000ace4 <hw_timer_register_callback+0x24>)
1000acc8:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000acca:	4907      	ldr	r1, [pc, #28]	; (1000ace8 <hw_timer_register_callback+0x28>)
1000accc:	2001      	movs	r0, #1
1000acce:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000acd0:	2000      	movs	r0, #0
1000acd2:	4c06      	ldr	r4, [pc, #24]	; (1000acec <hw_timer_register_callback+0x2c>)
1000acd4:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000acd6:	2001      	movs	r0, #1
1000acd8:	47a0      	blx	r4
1000acda:	2280      	movs	r2, #128	; 0x80
1000acdc:	01d2      	lsls	r2, r2, #7
1000acde:	4b04      	ldr	r3, [pc, #16]	; (1000acf0 <hw_timer_register_callback+0x30>)
1000ace0:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ace2:	bd10      	pop	{r4, pc}
1000ace4:	10008159 	.word	0x10008159
1000ace8:	1000acad 	.word	0x1000acad
1000acec:	10008135 	.word	0x10008135
1000acf0:	e000e100 	.word	0xe000e100

1000acf4 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000acf4:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000acf6:	2800      	cmp	r0, #0
1000acf8:	d100      	bne.n	1000acfc <hw_timer_start+0x8>
		delay = 1;
1000acfa:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000acfc:	4b05      	ldr	r3, [pc, #20]	; (1000ad14 <hw_timer_start+0x20>)
1000acfe:	4343      	muls	r3, r0
1000ad00:	001a      	movs	r2, r3
1000ad02:	2100      	movs	r1, #0
1000ad04:	2000      	movs	r0, #0
1000ad06:	4b04      	ldr	r3, [pc, #16]	; (1000ad18 <hw_timer_start+0x24>)
1000ad08:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000ad0a:	2000      	movs	r0, #0
1000ad0c:	4b03      	ldr	r3, [pc, #12]	; (1000ad1c <hw_timer_start+0x28>)
1000ad0e:	4798      	blx	r3
}
1000ad10:	bd10      	pop	{r4, pc}
1000ad12:	46c0      	nop			; (mov r8, r8)
1000ad14:	018cba80 	.word	0x018cba80
1000ad18:	100080e9 	.word	0x100080e9
1000ad1c:	10008111 	.word	0x10008111

1000ad20 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000ad20:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000ad22:	2000      	movs	r0, #0
1000ad24:	4b01      	ldr	r3, [pc, #4]	; (1000ad2c <hw_timer_stop+0xc>)
1000ad26:	4798      	blx	r3
}
1000ad28:	bd10      	pop	{r4, pc}
1000ad2a:	46c0      	nop			; (mov r8, r8)
1000ad2c:	10008135 	.word	0x10008135

1000ad30 <platform_event_free>:
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ad30:	4b02      	ldr	r3, [pc, #8]	; (1000ad3c <platform_event_free+0xc>)
1000ad32:	681a      	ldr	r2, [r3, #0]
1000ad34:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ad36:	6018      	str	r0, [r3, #0]
}
1000ad38:	4770      	bx	lr
1000ad3a:	46c0      	nop			; (mov r8, r8)
1000ad3c:	10012468 	.word	0x10012468

1000ad40 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ad40:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ad42:	4b0b      	ldr	r3, [pc, #44]	; (1000ad70 <platform_event_post+0x30>)
1000ad44:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ad46:	2c00      	cmp	r4, #0
1000ad48:	d011      	beq.n	1000ad6e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ad4a:	6825      	ldr	r5, [r4, #0]
1000ad4c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ad4e:	2300      	movs	r3, #0
1000ad50:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000ad52:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000ad54:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ad56:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ad58:	4b06      	ldr	r3, [pc, #24]	; (1000ad74 <platform_event_post+0x34>)
1000ad5a:	681a      	ldr	r2, [r3, #0]
1000ad5c:	2a00      	cmp	r2, #0
1000ad5e:	d102      	bne.n	1000ad66 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ad60:	601c      	str	r4, [r3, #0]
1000ad62:	e004      	b.n	1000ad6e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ad64:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ad66:	6813      	ldr	r3, [r2, #0]
1000ad68:	2b00      	cmp	r3, #0
1000ad6a:	d1fb      	bne.n	1000ad64 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ad6c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ad6e:	bd30      	pop	{r4, r5, pc}
1000ad70:	10012468 	.word	0x10012468
1000ad74:	10012464 	.word	0x10012464

1000ad78 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000ad78:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ad7a:	2300      	movs	r3, #0
1000ad7c:	4a06      	ldr	r2, [pc, #24]	; (1000ad98 <platform_event_init+0x20>)
1000ad7e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ad80:	4a06      	ldr	r2, [pc, #24]	; (1000ad9c <platform_event_init+0x24>)
1000ad82:	6013      	str	r3, [r2, #0]
1000ad84:	4c06      	ldr	r4, [pc, #24]	; (1000ada0 <platform_event_init+0x28>)
1000ad86:	0026      	movs	r6, r4
1000ad88:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ad8a:	4d06      	ldr	r5, [pc, #24]	; (1000ada4 <platform_event_init+0x2c>)
1000ad8c:	0020      	movs	r0, r4
1000ad8e:	47a8      	blx	r5
1000ad90:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ad92:	42b4      	cmp	r4, r6
1000ad94:	d1fa      	bne.n	1000ad8c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ad96:	bd70      	pop	{r4, r5, r6, pc}
1000ad98:	10012468 	.word	0x10012468
1000ad9c:	10012464 	.word	0x10012464
1000ada0:	1001246c 	.word	0x1001246c
1000ada4:	1000ad31 	.word	0x1000ad31

1000ada8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ada8:	b510      	push	{r4, lr}
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000adaa:	4b11      	ldr	r3, [pc, #68]	; (1000adf0 <at_ke_msg_send+0x48>)
1000adac:	681c      	ldr	r4, [r3, #0]
	ke_msg_send(param_ptr);
1000adae:	4b11      	ldr	r3, [pc, #68]	; (1000adf4 <at_ke_msg_send+0x4c>)
1000adb0:	681b      	ldr	r3, [r3, #0]
1000adb2:	4798      	blx	r3
	if(osc_en == 0)
1000adb4:	07e3      	lsls	r3, r4, #31
1000adb6:	d414      	bmi.n	1000ade2 <at_ke_msg_send+0x3a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000adb8:	4b0f      	ldr	r3, [pc, #60]	; (1000adf8 <at_ke_msg_send+0x50>)
1000adba:	681b      	ldr	r3, [r3, #0]
1000adbc:	2002      	movs	r0, #2
1000adbe:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000adc0:	4b0e      	ldr	r3, [pc, #56]	; (1000adfc <at_ke_msg_send+0x54>)
1000adc2:	681b      	ldr	r3, [r3, #0]
1000adc4:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000adc6:	4c0e      	ldr	r4, [pc, #56]	; (1000ae00 <at_ke_msg_send+0x58>)
1000adc8:	2003      	movs	r0, #3
1000adca:	6823      	ldr	r3, [r4, #0]
1000adcc:	4798      	blx	r3
1000adce:	2800      	cmp	r0, #0
1000add0:	d1fa      	bne.n	1000adc8 <at_ke_msg_send+0x20>
		pwr_disable_arm_wakeup(1<<1);
1000add2:	4b0c      	ldr	r3, [pc, #48]	; (1000ae04 <at_ke_msg_send+0x5c>)
1000add4:	681b      	ldr	r3, [r3, #0]
1000add6:	3002      	adds	r0, #2
1000add8:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000adda:	2201      	movs	r2, #1
1000addc:	4b0a      	ldr	r3, [pc, #40]	; (1000ae08 <at_ke_msg_send+0x60>)
1000adde:	601a      	str	r2, [r3, #0]
1000ade0:	e004      	b.n	1000adec <at_ke_msg_send+0x44>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
1000ade2:	4b0a      	ldr	r3, [pc, #40]	; (1000ae0c <at_ke_msg_send+0x64>)
1000ade4:	6818      	ldr	r0, [r3, #0]
1000ade6:	4b0a      	ldr	r3, [pc, #40]	; (1000ae10 <at_ke_msg_send+0x68>)
1000ade8:	681b      	ldr	r3, [r3, #0]
1000adea:	4798      	blx	r3
	}
}
1000adec:	bd10      	pop	{r4, pc}
1000adee:	46c0      	nop			; (mov r8, r8)
1000adf0:	4000b1ec 	.word	0x4000b1ec
1000adf4:	10012510 	.word	0x10012510
1000adf8:	10012508 	.word	0x10012508
1000adfc:	10012520 	.word	0x10012520
1000ae00:	100124f4 	.word	0x100124f4
1000ae04:	100124fc 	.word	0x100124fc
1000ae08:	4000b020 	.word	0x4000b020
1000ae0c:	10012500 	.word	0x10012500
1000ae10:	100124f0 	.word	0x100124f0

1000ae14 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ae14:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ae16:	4b06      	ldr	r3, [pc, #24]	; (1000ae30 <samb11_plf_resume_callback+0x1c>)
1000ae18:	4a06      	ldr	r2, [pc, #24]	; (1000ae34 <samb11_plf_resume_callback+0x20>)
1000ae1a:	6819      	ldr	r1, [r3, #0]
1000ae1c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ae1e:	685a      	ldr	r2, [r3, #4]
1000ae20:	4b05      	ldr	r3, [pc, #20]	; (1000ae38 <samb11_plf_resume_callback+0x24>)
1000ae22:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ae24:	4b05      	ldr	r3, [pc, #20]	; (1000ae3c <samb11_plf_resume_callback+0x28>)
1000ae26:	681b      	ldr	r3, [r3, #0]
1000ae28:	2b00      	cmp	r3, #0
1000ae2a:	d000      	beq.n	1000ae2e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ae2c:	4798      	blx	r3
	}
}
1000ae2e:	bd10      	pop	{r4, pc}
1000ae30:	10012fd8 	.word	0x10012fd8
1000ae34:	4000b00c 	.word	0x4000b00c
1000ae38:	4000b010 	.word	0x4000b010
1000ae3c:	100132ac 	.word	0x100132ac

1000ae40 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ae40:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ae42:	2232      	movs	r2, #50	; 0x32
1000ae44:	2100      	movs	r1, #0
1000ae46:	480f      	ldr	r0, [pc, #60]	; (1000ae84 <init_port_list+0x44>)
1000ae48:	4b0f      	ldr	r3, [pc, #60]	; (1000ae88 <init_port_list+0x48>)
1000ae4a:	4798      	blx	r3
1000ae4c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ae4e:	480d      	ldr	r0, [pc, #52]	; (1000ae84 <init_port_list+0x44>)
		port_list[i].bit.available = 1;
1000ae50:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ae52:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ae54:	004a      	lsls	r2, r1, #1
1000ae56:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ae58:	1882      	adds	r2, r0, r2
1000ae5a:	7853      	ldrb	r3, [r2, #1]
1000ae5c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ae5e:	b2db      	uxtb	r3, r3
1000ae60:	43a3      	bics	r3, r4
1000ae62:	7053      	strb	r3, [r2, #1]
1000ae64:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ae66:	2919      	cmp	r1, #25
1000ae68:	d1f4      	bne.n	1000ae54 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ae6a:	4b06      	ldr	r3, [pc, #24]	; (1000ae84 <init_port_list+0x44>)
1000ae6c:	785a      	ldrb	r2, [r3, #1]
1000ae6e:	3918      	subs	r1, #24
1000ae70:	438a      	bics	r2, r1
1000ae72:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000ae74:	78da      	ldrb	r2, [r3, #3]
1000ae76:	438a      	bics	r2, r1
1000ae78:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1000ae7a:	7f5a      	ldrb	r2, [r3, #29]
1000ae7c:	438a      	bics	r2, r1
1000ae7e:	775a      	strb	r2, [r3, #29]
}
1000ae80:	bd70      	pop	{r4, r5, r6, pc}
1000ae82:	46c0      	nop			; (mov r8, r8)
1000ae84:	10012ff0 	.word	0x10012ff0
1000ae88:	1000f969 	.word	0x1000f969

1000ae8c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ae8c:	4a06      	ldr	r2, [pc, #24]	; (1000aea8 <init_clock+0x1c>)
1000ae8e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ae90:	4b06      	ldr	r3, [pc, #24]	; (1000aeac <init_clock+0x20>)
1000ae92:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000ae94:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000ae96:	4a06      	ldr	r2, [pc, #24]	; (1000aeb0 <init_clock+0x24>)
1000ae98:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ae9a:	4906      	ldr	r1, [pc, #24]	; (1000aeb4 <init_clock+0x28>)
1000ae9c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ae9e:	4b06      	ldr	r3, [pc, #24]	; (1000aeb8 <init_clock+0x2c>)
1000aea0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000aea2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000aea4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000aea6:	4770      	bx	lr
1000aea8:	4000b00c 	.word	0x4000b00c
1000aeac:	fffe0fd3 	.word	0xfffe0fd3
1000aeb0:	10012fd8 	.word	0x10012fd8
1000aeb4:	4000b010 	.word	0x4000b010
1000aeb8:	ffffe7c0 	.word	0xffffe7c0

1000aebc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aebe:	464f      	mov	r7, r9
1000aec0:	4646      	mov	r6, r8
1000aec2:	b4c0      	push	{r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000aec4:	4b44      	ldr	r3, [pc, #272]	; (1000afd8 <platform_driver_init+0x11c>)
1000aec6:	781b      	ldrb	r3, [r3, #0]
1000aec8:	2b00      	cmp	r3, #0
1000aeca:	d003      	beq.n	1000aed4 <platform_driver_init+0x18>
1000aecc:	4b42      	ldr	r3, [pc, #264]	; (1000afd8 <platform_driver_init+0x11c>)
1000aece:	781b      	ldrb	r3, [r3, #0]
1000aed0:	2b01      	cmp	r3, #1
1000aed2:	d079      	beq.n	1000afc8 <platform_driver_init+0x10c>
		init_port_list();
1000aed4:	4b41      	ldr	r3, [pc, #260]	; (1000afdc <platform_driver_init+0x120>)
1000aed6:	4798      	blx	r3
		init_clock();
1000aed8:	4b41      	ldr	r3, [pc, #260]	; (1000afe0 <platform_driver_init+0x124>)
1000aeda:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000aedc:	2700      	movs	r7, #0
1000aede:	4b41      	ldr	r3, [pc, #260]	; (1000afe4 <platform_driver_init+0x128>)
1000aee0:	601f      	str	r7, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aee2:	4c41      	ldr	r4, [pc, #260]	; (1000afe8 <platform_driver_init+0x12c>)
1000aee4:	2380      	movs	r3, #128	; 0x80
1000aee6:	2280      	movs	r2, #128	; 0x80
1000aee8:	0412      	lsls	r2, r2, #16
1000aeea:	4691      	mov	r9, r2
1000aeec:	50e2      	str	r2, [r4, r3]
1000aeee:	2280      	movs	r2, #128	; 0x80
1000aef0:	0452      	lsls	r2, r2, #17
1000aef2:	4690      	mov	r8, r2
1000aef4:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000aef6:	4d3d      	ldr	r5, [pc, #244]	; (1000afec <platform_driver_init+0x130>)
1000aef8:	4b3d      	ldr	r3, [pc, #244]	; (1000aff0 <platform_driver_init+0x134>)
1000aefa:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000aefc:	4b3d      	ldr	r3, [pc, #244]	; (1000aff4 <platform_driver_init+0x138>)
1000aefe:	4a3e      	ldr	r2, [pc, #248]	; (1000aff8 <platform_driver_init+0x13c>)
1000af00:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000af02:	493e      	ldr	r1, [pc, #248]	; (1000affc <platform_driver_init+0x140>)
1000af04:	4a3e      	ldr	r2, [pc, #248]	; (1000b000 <platform_driver_init+0x144>)
1000af06:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000af08:	4a3e      	ldr	r2, [pc, #248]	; (1000b004 <platform_driver_init+0x148>)
1000af0a:	6811      	ldr	r1, [r2, #0]
1000af0c:	4a3e      	ldr	r2, [pc, #248]	; (1000b008 <platform_driver_init+0x14c>)
1000af0e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000af10:	4a3e      	ldr	r2, [pc, #248]	; (1000b00c <platform_driver_init+0x150>)
1000af12:	6811      	ldr	r1, [r2, #0]
1000af14:	4a3e      	ldr	r2, [pc, #248]	; (1000b010 <platform_driver_init+0x154>)
1000af16:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000af18:	493e      	ldr	r1, [pc, #248]	; (1000b014 <platform_driver_init+0x158>)
1000af1a:	4a3f      	ldr	r2, [pc, #252]	; (1000b018 <platform_driver_init+0x15c>)
1000af1c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000af1e:	493f      	ldr	r1, [pc, #252]	; (1000b01c <platform_driver_init+0x160>)
1000af20:	4a3f      	ldr	r2, [pc, #252]	; (1000b020 <platform_driver_init+0x164>)
1000af22:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000af24:	4e3f      	ldr	r6, [pc, #252]	; (1000b024 <platform_driver_init+0x168>)
1000af26:	4a40      	ldr	r2, [pc, #256]	; (1000b028 <platform_driver_init+0x16c>)
1000af28:	6032      	str	r2, [r6, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000af2a:	4940      	ldr	r1, [pc, #256]	; (1000b02c <platform_driver_init+0x170>)
1000af2c:	4a40      	ldr	r2, [pc, #256]	; (1000b030 <platform_driver_init+0x174>)
1000af2e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000af30:	4940      	ldr	r1, [pc, #256]	; (1000b034 <platform_driver_init+0x178>)
1000af32:	4a41      	ldr	r2, [pc, #260]	; (1000b038 <platform_driver_init+0x17c>)
1000af34:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000af36:	4941      	ldr	r1, [pc, #260]	; (1000b03c <platform_driver_init+0x180>)
1000af38:	4a41      	ldr	r2, [pc, #260]	; (1000b040 <platform_driver_init+0x184>)
1000af3a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000af3c:	4941      	ldr	r1, [pc, #260]	; (1000b044 <platform_driver_init+0x188>)
1000af3e:	4a42      	ldr	r2, [pc, #264]	; (1000b048 <platform_driver_init+0x18c>)
1000af40:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000af42:	4942      	ldr	r1, [pc, #264]	; (1000b04c <platform_driver_init+0x190>)
1000af44:	4a42      	ldr	r2, [pc, #264]	; (1000b050 <platform_driver_init+0x194>)
1000af46:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000af48:	4942      	ldr	r1, [pc, #264]	; (1000b054 <platform_driver_init+0x198>)
1000af4a:	4a43      	ldr	r2, [pc, #268]	; (1000b058 <platform_driver_init+0x19c>)
1000af4c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000af4e:	2028      	movs	r0, #40	; 0x28
1000af50:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000af52:	4942      	ldr	r1, [pc, #264]	; (1000b05c <platform_driver_init+0x1a0>)
1000af54:	2028      	movs	r0, #40	; 0x28
1000af56:	682b      	ldr	r3, [r5, #0]
1000af58:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000af5a:	682b      	ldr	r3, [r5, #0]
1000af5c:	4940      	ldr	r1, [pc, #256]	; (1000b060 <platform_driver_init+0x1a4>)
1000af5e:	2027      	movs	r0, #39	; 0x27
1000af60:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000af62:	4b40      	ldr	r3, [pc, #256]	; (1000b064 <platform_driver_init+0x1a8>)
1000af64:	681a      	ldr	r2, [r3, #0]
1000af66:	4b40      	ldr	r3, [pc, #256]	; (1000b068 <platform_driver_init+0x1ac>)
1000af68:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000af6a:	4a40      	ldr	r2, [pc, #256]	; (1000b06c <platform_driver_init+0x1b0>)
1000af6c:	4b40      	ldr	r3, [pc, #256]	; (1000b070 <platform_driver_init+0x1b4>)
1000af6e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000af70:	4a40      	ldr	r2, [pc, #256]	; (1000b074 <platform_driver_init+0x1b8>)
1000af72:	4b41      	ldr	r3, [pc, #260]	; (1000b078 <platform_driver_init+0x1bc>)
1000af74:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000af76:	4a41      	ldr	r2, [pc, #260]	; (1000b07c <platform_driver_init+0x1c0>)
1000af78:	4b41      	ldr	r3, [pc, #260]	; (1000b080 <platform_driver_init+0x1c4>)
1000af7a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000af7c:	4a41      	ldr	r2, [pc, #260]	; (1000b084 <platform_driver_init+0x1c8>)
1000af7e:	4b42      	ldr	r3, [pc, #264]	; (1000b088 <platform_driver_init+0x1cc>)
1000af80:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000af82:	4a42      	ldr	r2, [pc, #264]	; (1000b08c <platform_driver_init+0x1d0>)
1000af84:	4b42      	ldr	r3, [pc, #264]	; (1000b090 <platform_driver_init+0x1d4>)
1000af86:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000af88:	4a42      	ldr	r2, [pc, #264]	; (1000b094 <platform_driver_init+0x1d8>)
1000af8a:	4b43      	ldr	r3, [pc, #268]	; (1000b098 <platform_driver_init+0x1dc>)
1000af8c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000af8e:	4a43      	ldr	r2, [pc, #268]	; (1000b09c <platform_driver_init+0x1e0>)
1000af90:	4b43      	ldr	r3, [pc, #268]	; (1000b0a0 <platform_driver_init+0x1e4>)
1000af92:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000af94:	22a0      	movs	r2, #160	; 0xa0
1000af96:	0092      	lsls	r2, r2, #2
1000af98:	2100      	movs	r1, #0
1000af9a:	4842      	ldr	r0, [pc, #264]	; (1000b0a4 <platform_driver_init+0x1e8>)
1000af9c:	4b42      	ldr	r3, [pc, #264]	; (1000b0a8 <platform_driver_init+0x1ec>)
1000af9e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000afa0:	2280      	movs	r2, #128	; 0x80
1000afa2:	0092      	lsls	r2, r2, #2
1000afa4:	4b41      	ldr	r3, [pc, #260]	; (1000b0ac <platform_driver_init+0x1f0>)
1000afa6:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000afa8:	4b41      	ldr	r3, [pc, #260]	; (1000b0b0 <platform_driver_init+0x1f4>)
1000afaa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000afac:	464b      	mov	r3, r9
1000afae:	6023      	str	r3, [r4, #0]
1000afb0:	4643      	mov	r3, r8
1000afb2:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000afb4:	4b3f      	ldr	r3, [pc, #252]	; (1000b0b4 <platform_driver_init+0x1f8>)
1000afb6:	601f      	str	r7, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000afb8:	6833      	ldr	r3, [r6, #0]
1000afba:	4a3f      	ldr	r2, [pc, #252]	; (1000b0b8 <platform_driver_init+0x1fc>)
1000afbc:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1000afbe:	2201      	movs	r2, #1
1000afc0:	4b05      	ldr	r3, [pc, #20]	; (1000afd8 <platform_driver_init+0x11c>)
1000afc2:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000afc4:	2000      	movs	r0, #0
1000afc6:	e003      	b.n	1000afd0 <platform_driver_init+0x114>
	}
	else {
		platform_initialized = 1;
1000afc8:	2201      	movs	r2, #1
1000afca:	4b03      	ldr	r3, [pc, #12]	; (1000afd8 <platform_driver_init+0x11c>)
1000afcc:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000afce:	2001      	movs	r0, #1
	}
	return status;
}
1000afd0:	bc0c      	pop	{r2, r3}
1000afd2:	4690      	mov	r8, r2
1000afd4:	4699      	mov	r9, r3
1000afd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000afd8:	100124f8 	.word	0x100124f8
1000afdc:	1000ae41 	.word	0x1000ae41
1000afe0:	1000ae8d 	.word	0x1000ae8d
1000afe4:	1001251c 	.word	0x1001251c
1000afe8:	e000e100 	.word	0xe000e100
1000afec:	100132a4 	.word	0x100132a4
1000aff0:	000007d7 	.word	0x000007d7
1000aff4:	000007bd 	.word	0x000007bd
1000aff8:	10012fe4 	.word	0x10012fe4
1000affc:	0001bc51 	.word	0x0001bc51
1000b000:	100132a8 	.word	0x100132a8
1000b004:	100400bc 	.word	0x100400bc
1000b008:	100124ec 	.word	0x100124ec
1000b00c:	100400b8 	.word	0x100400b8
1000b010:	100124e8 	.word	0x100124e8
1000b014:	0001b99f 	.word	0x0001b99f
1000b018:	10012fe0 	.word	0x10012fe0
1000b01c:	0001b9db 	.word	0x0001b9db
1000b020:	10012fe8 	.word	0x10012fe8
1000b024:	100132b4 	.word	0x100132b4
1000b028:	1004003c 	.word	0x1004003c
1000b02c:	10041fc0 	.word	0x10041fc0
1000b030:	10012fec 	.word	0x10012fec
1000b034:	10041fc4 	.word	0x10041fc4
1000b038:	100132b0 	.word	0x100132b0
1000b03c:	0001cbe9 	.word	0x0001cbe9
1000b040:	10012508 	.word	0x10012508
1000b044:	0001cd8f 	.word	0x0001cd8f
1000b048:	100124fc 	.word	0x100124fc
1000b04c:	0001cea3 	.word	0x0001cea3
1000b050:	10012520 	.word	0x10012520
1000b054:	0001cbcf 	.word	0x0001cbcf
1000b058:	100124f4 	.word	0x100124f4
1000b05c:	1000b531 	.word	0x1000b531
1000b060:	1000b4c5 	.word	0x1000b4c5
1000b064:	100400e4 	.word	0x100400e4
1000b068:	10012510 	.word	0x10012510
1000b06c:	00019fe9 	.word	0x00019fe9
1000b070:	10012524 	.word	0x10012524
1000b074:	0001dbdd 	.word	0x0001dbdd
1000b078:	100124f0 	.word	0x100124f0
1000b07c:	0001dc5b 	.word	0x0001dc5b
1000b080:	10012504 	.word	0x10012504
1000b084:	100405ec 	.word	0x100405ec
1000b088:	10012500 	.word	0x10012500
1000b08c:	0001d5e3 	.word	0x0001d5e3
1000b090:	1001250c 	.word	0x1001250c
1000b094:	10040c20 	.word	0x10040c20
1000b098:	10012528 	.word	0x10012528
1000b09c:	00019f09 	.word	0x00019f09
1000b0a0:	100124e4 	.word	0x100124e4
1000b0a4:	10013024 	.word	0x10013024
1000b0a8:	1000f969 	.word	0x1000f969
1000b0ac:	100132b8 	.word	0x100132b8
1000b0b0:	1000ad79 	.word	0x1000ad79
1000b0b4:	100132ac 	.word	0x100132ac
1000b0b8:	1000ae15 	.word	0x1000ae15

1000b0bc <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b0bc:	4b04      	ldr	r3, [pc, #16]	; (1000b0d0 <platform_register_ble_msg_handler+0x14>)
1000b0be:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b0c0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b0c2:	2a01      	cmp	r2, #1
1000b0c4:	d102      	bne.n	1000b0cc <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b0c6:	4b03      	ldr	r3, [pc, #12]	; (1000b0d4 <platform_register_ble_msg_handler+0x18>)
1000b0c8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b0ca:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b0cc:	0018      	movs	r0, r3
1000b0ce:	4770      	bx	lr
1000b0d0:	100124f8 	.word	0x100124f8
1000b0d4:	1001251c 	.word	0x1001251c

1000b0d8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b0d8:	b570      	push	{r4, r5, r6, lr}
1000b0da:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b0dc:	4b0e      	ldr	r3, [pc, #56]	; (1000b118 <platform_interface_send+0x40>)
1000b0de:	681b      	ldr	r3, [r3, #0]
1000b0e0:	2b00      	cmp	r3, #0
1000b0e2:	d002      	beq.n	1000b0ea <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b0e4:	8840      	ldrh	r0, [r0, #2]
1000b0e6:	4798      	blx	r3
1000b0e8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b0ea:	88e3      	ldrh	r3, [r4, #6]
1000b0ec:	88a2      	ldrh	r2, [r4, #4]
1000b0ee:	8861      	ldrh	r1, [r4, #2]
1000b0f0:	8820      	ldrh	r0, [r4, #0]
1000b0f2:	4d0a      	ldr	r5, [pc, #40]	; (1000b11c <platform_interface_send+0x44>)
1000b0f4:	682d      	ldr	r5, [r5, #0]
1000b0f6:	47a8      	blx	r5
1000b0f8:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b0fa:	88e2      	ldrh	r2, [r4, #6]
1000b0fc:	2a00      	cmp	r2, #0
1000b0fe:	d102      	bne.n	1000b106 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b100:	4b07      	ldr	r3, [pc, #28]	; (1000b120 <platform_interface_send+0x48>)
1000b102:	4798      	blx	r3
1000b104:	e006      	b.n	1000b114 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b106:	0021      	movs	r1, r4
1000b108:	3108      	adds	r1, #8
1000b10a:	4b06      	ldr	r3, [pc, #24]	; (1000b124 <platform_interface_send+0x4c>)
1000b10c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b10e:	0028      	movs	r0, r5
1000b110:	4b03      	ldr	r3, [pc, #12]	; (1000b120 <platform_interface_send+0x48>)
1000b112:	4798      	blx	r3
	}
}
1000b114:	bd70      	pop	{r4, r5, r6, pc}
1000b116:	46c0      	nop			; (mov r8, r8)
1000b118:	100124ec 	.word	0x100124ec
1000b11c:	10012524 	.word	0x10012524
1000b120:	1000ada9 	.word	0x1000ada9
1000b124:	1000f957 	.word	0x1000f957

1000b128 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b12a:	0004      	movs	r4, r0
1000b12c:	000f      	movs	r7, r1
1000b12e:	0016      	movs	r6, r2
1000b130:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
1000b132:	4b0e      	ldr	r3, [pc, #56]	; (1000b16c <send_plf_int_msg_ind+0x44>)
1000b134:	6818      	ldr	r0, [r3, #0]
1000b136:	4b0e      	ldr	r3, [pc, #56]	; (1000b170 <send_plf_int_msg_ind+0x48>)
1000b138:	681b      	ldr	r3, [r3, #0]
1000b13a:	4798      	blx	r3
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b13c:	023a      	lsls	r2, r7, #8
1000b13e:	4322      	orrs	r2, r4
1000b140:	4b0c      	ldr	r3, [pc, #48]	; (1000b174 <send_plf_int_msg_ind+0x4c>)
1000b142:	681c      	ldr	r4, [r3, #0]
1000b144:	002b      	movs	r3, r5
1000b146:	2105      	movs	r1, #5
1000b148:	20a0      	movs	r0, #160	; 0xa0
1000b14a:	00c0      	lsls	r0, r0, #3
1000b14c:	47a0      	blx	r4
1000b14e:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000b150:	d00a      	beq.n	1000b168 <send_plf_int_msg_ind+0x40>
		if((data_len != 0) && (NULL != data))
1000b152:	2d00      	cmp	r5, #0
1000b154:	d005      	beq.n	1000b162 <send_plf_int_msg_ind+0x3a>
1000b156:	2e00      	cmp	r6, #0
1000b158:	d003      	beq.n	1000b162 <send_plf_int_msg_ind+0x3a>
		{
			//copy params
			memcpy(params, data, data_len);
1000b15a:	002a      	movs	r2, r5
1000b15c:	0031      	movs	r1, r6
1000b15e:	4b06      	ldr	r3, [pc, #24]	; (1000b178 <send_plf_int_msg_ind+0x50>)
1000b160:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b162:	0020      	movs	r0, r4
1000b164:	4b05      	ldr	r3, [pc, #20]	; (1000b17c <send_plf_int_msg_ind+0x54>)
1000b166:	4798      	blx	r3
	}
}
1000b168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b16a:	46c0      	nop			; (mov r8, r8)
1000b16c:	10012500 	.word	0x10012500
1000b170:	100124f0 	.word	0x100124f0
1000b174:	10012524 	.word	0x10012524
1000b178:	1000f957 	.word	0x1000f957
1000b17c:	1000ada9 	.word	0x1000ada9

1000b180 <platform_event_wait>:
	
	platform_interface_send(msg, u16TxLen);
}

plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b180:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b182:	465f      	mov	r7, fp
1000b184:	4656      	mov	r6, sl
1000b186:	464d      	mov	r5, r9
1000b188:	4644      	mov	r4, r8
1000b18a:	b4f0      	push	{r4, r5, r6, r7}
1000b18c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b18e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b190:	2300      	movs	r3, #0
1000b192:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b194:	1ce3      	adds	r3, r4, #3
1000b196:	d81c      	bhi.n	1000b1d2 <platform_event_wait+0x52>
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b198:	220d      	movs	r2, #13
1000b19a:	2100      	movs	r1, #0
1000b19c:	a802      	add	r0, sp, #8
1000b19e:	4b82      	ldr	r3, [pc, #520]	; (1000b3a8 <platform_event_wait+0x228>)
1000b1a0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b1a2:	2319      	movs	r3, #25
1000b1a4:	aa02      	add	r2, sp, #8
1000b1a6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b1a8:	3b16      	subs	r3, #22
1000b1aa:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b1ac:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b1ae:	3302      	adds	r3, #2
1000b1b0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b1b2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b1b4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b1b6:	0a23      	lsrs	r3, r4, #8
1000b1b8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b1ba:	0c23      	lsrs	r3, r4, #16
1000b1bc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b1be:	0e24      	lsrs	r4, r4, #24
1000b1c0:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b1c2:	2301      	movs	r3, #1
1000b1c4:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b1c6:	210d      	movs	r1, #13
1000b1c8:	0010      	movs	r0, r2
1000b1ca:	4b78      	ldr	r3, [pc, #480]	; (1000b3ac <platform_event_wait+0x22c>)
1000b1cc:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b1ce:	2301      	movs	r3, #1
1000b1d0:	4699      	mov	r9, r3
1000b1d2:	2400      	movs	r4, #0
1000b1d4:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b1d6:	4f76      	ldr	r7, [pc, #472]	; (1000b3b0 <platform_event_wait+0x230>)
1000b1d8:	4e76      	ldr	r6, [pc, #472]	; (1000b3b4 <platform_event_wait+0x234>)
1000b1da:	4977      	ldr	r1, [pc, #476]	; (1000b3b8 <platform_event_wait+0x238>)
1000b1dc:	6838      	ldr	r0, [r7, #0]
1000b1de:	6833      	ldr	r3, [r6, #0]
1000b1e0:	4798      	blx	r3
1000b1e2:	2800      	cmp	r0, #0
1000b1e4:	d000      	beq.n	1000b1e8 <platform_event_wait+0x68>
1000b1e6:	e088      	b.n	1000b2fa <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b1e8:	4b73      	ldr	r3, [pc, #460]	; (1000b3b8 <platform_event_wait+0x238>)
1000b1ea:	681c      	ldr	r4, [r3, #0]
1000b1ec:	88a3      	ldrh	r3, [r4, #4]
1000b1ee:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b1f0:	23cd      	movs	r3, #205	; 0xcd
1000b1f2:	009b      	lsls	r3, r3, #2
1000b1f4:	459a      	cmp	sl, r3
1000b1f6:	d100      	bne.n	1000b1fa <platform_event_wait+0x7a>
1000b1f8:	e0c7      	b.n	1000b38a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b1fa:	8923      	ldrh	r3, [r4, #8]
1000b1fc:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b1fe:	8963      	ldrh	r3, [r4, #10]
1000b200:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b202:	464b      	mov	r3, r9
1000b204:	2b00      	cmp	r3, #0
1000b206:	d011      	beq.n	1000b22c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b208:	220d      	movs	r2, #13
1000b20a:	2100      	movs	r1, #0
1000b20c:	a802      	add	r0, sp, #8
1000b20e:	4b66      	ldr	r3, [pc, #408]	; (1000b3a8 <platform_event_wait+0x228>)
1000b210:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b212:	2319      	movs	r3, #25
1000b214:	aa02      	add	r2, sp, #8
1000b216:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b218:	3b16      	subs	r3, #22
1000b21a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b21c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b21e:	3302      	adds	r3, #2
1000b220:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b222:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b224:	210d      	movs	r1, #13
1000b226:	0010      	movs	r0, r2
1000b228:	4b60      	ldr	r3, [pc, #384]	; (1000b3ac <platform_event_wait+0x22c>)
1000b22a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b22c:	23a0      	movs	r3, #160	; 0xa0
1000b22e:	00db      	lsls	r3, r3, #3
1000b230:	459a      	cmp	sl, r3
1000b232:	d121      	bne.n	1000b278 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b234:	4b61      	ldr	r3, [pc, #388]	; (1000b3bc <platform_event_wait+0x23c>)
1000b236:	881b      	ldrh	r3, [r3, #0]
1000b238:	4443      	add	r3, r8
1000b23a:	22a0      	movs	r2, #160	; 0xa0
1000b23c:	0092      	lsls	r2, r2, #2
1000b23e:	4293      	cmp	r3, r2
1000b240:	dd02      	ble.n	1000b248 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b242:	3a80      	subs	r2, #128	; 0x80
1000b244:	4b5d      	ldr	r3, [pc, #372]	; (1000b3bc <platform_event_wait+0x23c>)
1000b246:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b248:	4b5c      	ldr	r3, [pc, #368]	; (1000b3bc <platform_event_wait+0x23c>)
1000b24a:	469a      	mov	sl, r3
1000b24c:	881d      	ldrh	r5, [r3, #0]
1000b24e:	4b5c      	ldr	r3, [pc, #368]	; (1000b3c0 <platform_event_wait+0x240>)
1000b250:	18ed      	adds	r5, r5, r3
1000b252:	0021      	movs	r1, r4
1000b254:	310c      	adds	r1, #12
1000b256:	4642      	mov	r2, r8
1000b258:	0028      	movs	r0, r5
1000b25a:	4b5a      	ldr	r3, [pc, #360]	; (1000b3c4 <platform_event_wait+0x244>)
1000b25c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b25e:	4642      	mov	r2, r8
1000b260:	0029      	movs	r1, r5
1000b262:	4658      	mov	r0, fp
1000b264:	4b58      	ldr	r3, [pc, #352]	; (1000b3c8 <platform_event_wait+0x248>)
1000b266:	4798      	blx	r3
				plf_event_buff_index += len;
1000b268:	4653      	mov	r3, sl
1000b26a:	881b      	ldrh	r3, [r3, #0]
1000b26c:	4443      	add	r3, r8
1000b26e:	4652      	mov	r2, sl
1000b270:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b272:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b274:	2502      	movs	r5, #2
1000b276:	e03a      	b.n	1000b2ee <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b278:	4b54      	ldr	r3, [pc, #336]	; (1000b3cc <platform_event_wait+0x24c>)
1000b27a:	681b      	ldr	r3, [r3, #0]
1000b27c:	2b00      	cmp	r3, #0
1000b27e:	d032      	beq.n	1000b2e6 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b280:	4b4d      	ldr	r3, [pc, #308]	; (1000b3b8 <platform_event_wait+0x238>)
1000b282:	681a      	ldr	r2, [r3, #0]
1000b284:	8893      	ldrh	r3, [r2, #4]
1000b286:	21cd      	movs	r1, #205	; 0xcd
1000b288:	0089      	lsls	r1, r1, #2
1000b28a:	428b      	cmp	r3, r1
1000b28c:	d104      	bne.n	1000b298 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b28e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b290:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b292:	2b00      	cmp	r3, #0
1000b294:	d02b      	beq.n	1000b2ee <platform_event_wait+0x16e>
1000b296:	e028      	b.n	1000b2ea <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b298:	4c4d      	ldr	r4, [pc, #308]	; (1000b3d0 <platform_event_wait+0x250>)
1000b29a:	4d49      	ldr	r5, [pc, #292]	; (1000b3c0 <platform_event_wait+0x240>)
1000b29c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b29e:	702b      	strb	r3, [r5, #0]
1000b2a0:	0a1b      	lsrs	r3, r3, #8
1000b2a2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b2a4:	8910      	ldrh	r0, [r2, #8]
1000b2a6:	4b4b      	ldr	r3, [pc, #300]	; (1000b3d4 <platform_event_wait+0x254>)
1000b2a8:	681b      	ldr	r3, [r3, #0]
1000b2aa:	4798      	blx	r3
1000b2ac:	7128      	strb	r0, [r5, #4]
1000b2ae:	0a00      	lsrs	r0, r0, #8
1000b2b0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b2b2:	6820      	ldr	r0, [r4, #0]
1000b2b4:	4b40      	ldr	r3, [pc, #256]	; (1000b3b8 <platform_event_wait+0x238>)
1000b2b6:	681a      	ldr	r2, [r3, #0]
1000b2b8:	88d2      	ldrh	r2, [r2, #6]
1000b2ba:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b2bc:	681d      	ldr	r5, [r3, #0]
1000b2be:	896b      	ldrh	r3, [r5, #10]
1000b2c0:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b2c2:	3008      	adds	r0, #8
1000b2c4:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b2c6:	896a      	ldrh	r2, [r5, #10]
1000b2c8:	2a00      	cmp	r2, #0
1000b2ca:	d003      	beq.n	1000b2d4 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b2cc:	0029      	movs	r1, r5
1000b2ce:	310c      	adds	r1, #12
1000b2d0:	4b3c      	ldr	r3, [pc, #240]	; (1000b3c4 <platform_event_wait+0x244>)
1000b2d2:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b2d4:	8969      	ldrh	r1, [r5, #10]
1000b2d6:	3108      	adds	r1, #8
1000b2d8:	4b3c      	ldr	r3, [pc, #240]	; (1000b3cc <platform_event_wait+0x24c>)
1000b2da:	681b      	ldr	r3, [r3, #0]
1000b2dc:	4838      	ldr	r0, [pc, #224]	; (1000b3c0 <platform_event_wait+0x240>)
1000b2de:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b2e0:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b2e2:	2503      	movs	r5, #3
1000b2e4:	e003      	b.n	1000b2ee <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b2e6:	2400      	movs	r4, #0
1000b2e8:	e001      	b.n	1000b2ee <platform_event_wait+0x16e>
1000b2ea:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b2ec:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b2ee:	4b32      	ldr	r3, [pc, #200]	; (1000b3b8 <platform_event_wait+0x238>)
1000b2f0:	6818      	ldr	r0, [r3, #0]
1000b2f2:	4b39      	ldr	r3, [pc, #228]	; (1000b3d8 <platform_event_wait+0x258>)
1000b2f4:	681b      	ldr	r3, [r3, #0]
1000b2f6:	4798      	blx	r3
1000b2f8:	e000      	b.n	1000b2fc <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b2fa:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b2fc:	2c00      	cmp	r4, #0
1000b2fe:	d000      	beq.n	1000b302 <platform_event_wait+0x182>
1000b300:	e76b      	b.n	1000b1da <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b302:	464b      	mov	r3, r9
1000b304:	2b00      	cmp	r3, #0
1000b306:	d046      	beq.n	1000b396 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b308:	4b29      	ldr	r3, [pc, #164]	; (1000b3b0 <platform_event_wait+0x230>)
1000b30a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b30c:	2e00      	cmp	r6, #0
1000b30e:	d104      	bne.n	1000b31a <platform_event_wait+0x19a>
1000b310:	2300      	movs	r3, #0
1000b312:	6a1c      	ldr	r4, [r3, #32]
1000b314:	2c00      	cmp	r4, #0
1000b316:	d131      	bne.n	1000b37c <platform_event_wait+0x1fc>
1000b318:	e03d      	b.n	1000b396 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b31a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b31c:	2314      	movs	r3, #20
1000b31e:	469c      	mov	ip, r3
1000b320:	44b4      	add	ip, r6
1000b322:	4663      	mov	r3, ip
1000b324:	4660      	mov	r0, ip
1000b326:	9300      	str	r3, [sp, #0]
1000b328:	4b2c      	ldr	r3, [pc, #176]	; (1000b3dc <platform_event_wait+0x25c>)
1000b32a:	681b      	ldr	r3, [r3, #0]
1000b32c:	4798      	blx	r3
	while(NULL != current)
1000b32e:	2c00      	cmp	r4, #0
1000b330:	d01f      	beq.n	1000b372 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b332:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b334:	23cd      	movs	r3, #205	; 0xcd
1000b336:	009b      	lsls	r3, r3, #2
1000b338:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b33a:	4b27      	ldr	r3, [pc, #156]	; (1000b3d8 <platform_event_wait+0x258>)
1000b33c:	469a      	mov	sl, r3
1000b33e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b340:	6803      	ldr	r3, [r0, #0]
1000b342:	889b      	ldrh	r3, [r3, #4]
1000b344:	4543      	cmp	r3, r8
1000b346:	d110      	bne.n	1000b36a <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b348:	2f00      	cmp	r7, #0
1000b34a:	d006      	beq.n	1000b35a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b34c:	6883      	ldr	r3, [r0, #8]
1000b34e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b350:	4653      	mov	r3, sl
1000b352:	681b      	ldr	r3, [r3, #0]
1000b354:	4798      	blx	r3
				current = prev->pstrNext;
1000b356:	68b8      	ldr	r0, [r7, #8]
1000b358:	e009      	b.n	1000b36e <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b35a:	6883      	ldr	r3, [r0, #8]
1000b35c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b35e:	4b1e      	ldr	r3, [pc, #120]	; (1000b3d8 <platform_event_wait+0x258>)
1000b360:	681b      	ldr	r3, [r3, #0]
1000b362:	9301      	str	r3, [sp, #4]
1000b364:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b366:	6a30      	ldr	r0, [r6, #32]
1000b368:	e001      	b.n	1000b36e <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b36a:	0007      	movs	r7, r0
1000b36c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b36e:	2800      	cmp	r0, #0
1000b370:	d1e6      	bne.n	1000b340 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b372:	4b1b      	ldr	r3, [pc, #108]	; (1000b3e0 <platform_event_wait+0x260>)
1000b374:	681b      	ldr	r3, [r3, #0]
1000b376:	9800      	ldr	r0, [sp, #0]
1000b378:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b37a:	e00c      	b.n	1000b396 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b37c:	2314      	movs	r3, #20
1000b37e:	9300      	str	r3, [sp, #0]
1000b380:	4b16      	ldr	r3, [pc, #88]	; (1000b3dc <platform_event_wait+0x25c>)
1000b382:	681b      	ldr	r3, [r3, #0]
1000b384:	2014      	movs	r0, #20
1000b386:	4798      	blx	r3
1000b388:	e7d3      	b.n	1000b332 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b38a:	4b10      	ldr	r3, [pc, #64]	; (1000b3cc <platform_event_wait+0x24c>)
1000b38c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b38e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b390:	2b00      	cmp	r3, #0
1000b392:	d0ac      	beq.n	1000b2ee <platform_event_wait+0x16e>
1000b394:	e77b      	b.n	1000b28e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b396:	0028      	movs	r0, r5
1000b398:	b007      	add	sp, #28
1000b39a:	bc3c      	pop	{r2, r3, r4, r5}
1000b39c:	4690      	mov	r8, r2
1000b39e:	4699      	mov	r9, r3
1000b3a0:	46a2      	mov	sl, r4
1000b3a2:	46ab      	mov	fp, r5
1000b3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b3a6:	46c0      	nop			; (mov r8, r8)
1000b3a8:	1000f969 	.word	0x1000f969
1000b3ac:	1000b0d9 	.word	0x1000b0d9
1000b3b0:	10012528 	.word	0x10012528
1000b3b4:	1001250c 	.word	0x1001250c
1000b3b8:	10012518 	.word	0x10012518
1000b3bc:	100132b8 	.word	0x100132b8
1000b3c0:	10013024 	.word	0x10013024
1000b3c4:	1000f957 	.word	0x1000f957
1000b3c8:	1000ad41 	.word	0x1000ad41
1000b3cc:	1001251c 	.word	0x1001251c
1000b3d0:	10012514 	.word	0x10012514
1000b3d4:	100124e8 	.word	0x100124e8
1000b3d8:	100124e4 	.word	0x100124e4
1000b3dc:	10012504 	.word	0x10012504
1000b3e0:	100124f0 	.word	0x100124f0

1000b3e4 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b3e4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b3e6:	4b12      	ldr	r3, [pc, #72]	; (1000b430 <acquire_sleep_lock+0x4c>)
1000b3e8:	681c      	ldr	r4, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b3ea:	4b12      	ldr	r3, [pc, #72]	; (1000b434 <acquire_sleep_lock+0x50>)
1000b3ec:	681b      	ldr	r3, [r3, #0]
1000b3ee:	2080      	movs	r0, #128	; 0x80
1000b3f0:	0200      	lsls	r0, r0, #8
1000b3f2:	4798      	blx	r3
	if(osc_en == 0)
1000b3f4:	07e3      	lsls	r3, r4, #31
1000b3f6:	d414      	bmi.n	1000b422 <acquire_sleep_lock+0x3e>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000b3f8:	4b0f      	ldr	r3, [pc, #60]	; (1000b438 <acquire_sleep_lock+0x54>)
1000b3fa:	681b      	ldr	r3, [r3, #0]
1000b3fc:	2002      	movs	r0, #2
1000b3fe:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000b400:	4b0e      	ldr	r3, [pc, #56]	; (1000b43c <acquire_sleep_lock+0x58>)
1000b402:	681b      	ldr	r3, [r3, #0]
1000b404:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000b406:	4c0e      	ldr	r4, [pc, #56]	; (1000b440 <acquire_sleep_lock+0x5c>)
1000b408:	2003      	movs	r0, #3
1000b40a:	6823      	ldr	r3, [r4, #0]
1000b40c:	4798      	blx	r3
1000b40e:	2800      	cmp	r0, #0
1000b410:	d1fa      	bne.n	1000b408 <acquire_sleep_lock+0x24>
		pwr_disable_arm_wakeup(1<<1);
1000b412:	4b0c      	ldr	r3, [pc, #48]	; (1000b444 <acquire_sleep_lock+0x60>)
1000b414:	681b      	ldr	r3, [r3, #0]
1000b416:	3002      	adds	r0, #2
1000b418:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000b41a:	2201      	movs	r2, #1
1000b41c:	4b0a      	ldr	r3, [pc, #40]	; (1000b448 <acquire_sleep_lock+0x64>)
1000b41e:	601a      	str	r2, [r3, #0]
1000b420:	e004      	b.n	1000b42c <acquire_sleep_lock+0x48>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
1000b422:	4b0a      	ldr	r3, [pc, #40]	; (1000b44c <acquire_sleep_lock+0x68>)
1000b424:	6818      	ldr	r0, [r3, #0]
1000b426:	4b0a      	ldr	r3, [pc, #40]	; (1000b450 <acquire_sleep_lock+0x6c>)
1000b428:	681b      	ldr	r3, [r3, #0]
1000b42a:	4798      	blx	r3
	}
	return status;
}
1000b42c:	2008      	movs	r0, #8
1000b42e:	bd10      	pop	{r4, pc}
1000b430:	4000b1ec 	.word	0x4000b1ec
1000b434:	10012fe0 	.word	0x10012fe0
1000b438:	10012508 	.word	0x10012508
1000b43c:	10012520 	.word	0x10012520
1000b440:	100124f4 	.word	0x100124f4
1000b444:	100124fc 	.word	0x100124fc
1000b448:	4000b020 	.word	0x4000b020
1000b44c:	10012500 	.word	0x10012500
1000b450:	100124f0 	.word	0x100124f0

1000b454 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
1000b454:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b456:	4a18      	ldr	r2, [pc, #96]	; (1000b4b8 <gpio1_combined_isr_handler+0x64>)
1000b458:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b45a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b45c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b45e:	2180      	movs	r1, #128	; 0x80
1000b460:	0209      	lsls	r1, r1, #8
1000b462:	4301      	orrs	r1, r0
1000b464:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b466:	0010      	movs	r0, r2
1000b468:	4d14      	ldr	r5, [pc, #80]	; (1000b4bc <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b46a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b46c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b46e:	05db      	lsls	r3, r3, #23
1000b470:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b472:	d011      	beq.n	1000b498 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b474:	b2db      	uxtb	r3, r3
1000b476:	4259      	negs	r1, r3
1000b478:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b47a:	2b01      	cmp	r3, #1
1000b47c:	d006      	beq.n	1000b48c <gpio1_combined_isr_handler+0x38>
1000b47e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b480:	085b      	lsrs	r3, r3, #1
				index++;
1000b482:	3101      	adds	r1, #1
1000b484:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b486:	2b01      	cmp	r3, #1
1000b488:	d1fa      	bne.n	1000b480 <gpio1_combined_isr_handler+0x2c>
1000b48a:	e000      	b.n	1000b48e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b48c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b48e:	0023      	movs	r3, r4
1000b490:	408b      	lsls	r3, r1
1000b492:	b29b      	uxth	r3, r3
1000b494:	8703      	strh	r3, [r0, #56]	; 0x38
1000b496:	e003      	b.n	1000b4a0 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b498:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b49a:	432b      	orrs	r3, r5
1000b49c:	b29b      	uxth	r3, r3
1000b49e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b4a0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b4a2:	05db      	lsls	r3, r3, #23
1000b4a4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b4a6:	d1e2      	bne.n	1000b46e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b4a8:	2180      	movs	r1, #128	; 0x80
1000b4aa:	0049      	lsls	r1, r1, #1
1000b4ac:	3381      	adds	r3, #129	; 0x81
1000b4ae:	33ff      	adds	r3, #255	; 0xff
1000b4b0:	4a03      	ldr	r2, [pc, #12]	; (1000b4c0 <gpio1_combined_isr_handler+0x6c>)
1000b4b2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b4b4:	bd30      	pop	{r4, r5, pc}
1000b4b6:	46c0      	nop			; (mov r8, r8)
1000b4b8:	40011000 	.word	0x40011000
1000b4bc:	ffff8000 	.word	0xffff8000
1000b4c0:	e000e100 	.word	0xe000e100

1000b4c4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b4c4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b4c6:	4a17      	ldr	r2, [pc, #92]	; (1000b524 <gpio0_combined_isr_handler+0x60>)
1000b4c8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b4ca:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b4cc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b4ce:	2180      	movs	r1, #128	; 0x80
1000b4d0:	0209      	lsls	r1, r1, #8
1000b4d2:	4301      	orrs	r1, r0
1000b4d4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b4d6:	0010      	movs	r0, r2
1000b4d8:	4d13      	ldr	r5, [pc, #76]	; (1000b528 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b4da:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b4dc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b4de:	05db      	lsls	r3, r3, #23
1000b4e0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b4e2:	d011      	beq.n	1000b508 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b4e4:	b2db      	uxtb	r3, r3
1000b4e6:	4259      	negs	r1, r3
1000b4e8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b4ea:	2b01      	cmp	r3, #1
1000b4ec:	d006      	beq.n	1000b4fc <gpio0_combined_isr_handler+0x38>
1000b4ee:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b4f0:	085b      	lsrs	r3, r3, #1
				index++;
1000b4f2:	3101      	adds	r1, #1
1000b4f4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b4f6:	2b01      	cmp	r3, #1
1000b4f8:	d1fa      	bne.n	1000b4f0 <gpio0_combined_isr_handler+0x2c>
1000b4fa:	e000      	b.n	1000b4fe <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b4fc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b4fe:	0023      	movs	r3, r4
1000b500:	408b      	lsls	r3, r1
1000b502:	b29b      	uxth	r3, r3
1000b504:	8703      	strh	r3, [r0, #56]	; 0x38
1000b506:	e003      	b.n	1000b510 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b508:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b50a:	432b      	orrs	r3, r5
1000b50c:	b29b      	uxth	r3, r3
1000b50e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b510:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b512:	05db      	lsls	r3, r3, #23
1000b514:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b516:	d1e2      	bne.n	1000b4de <gpio0_combined_isr_handler+0x1a>
1000b518:	2180      	movs	r1, #128	; 0x80
1000b51a:	3381      	adds	r3, #129	; 0x81
1000b51c:	33ff      	adds	r3, #255	; 0xff
1000b51e:	4a03      	ldr	r2, [pc, #12]	; (1000b52c <gpio0_combined_isr_handler+0x68>)
1000b520:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b522:	bd30      	pop	{r4, r5, pc}
1000b524:	40010000 	.word	0x40010000
1000b528:	ffff8000 	.word	0xffff8000
1000b52c:	e000e100 	.word	0xe000e100

1000b530 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b530:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b532:	4b0c      	ldr	r3, [pc, #48]	; (1000b564 <PORT1_COMB_Handler+0x34>)
1000b534:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b536:	0b5b      	lsrs	r3, r3, #13
1000b538:	d010      	beq.n	1000b55c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b53a:	4b0b      	ldr	r3, [pc, #44]	; (1000b568 <PORT1_COMB_Handler+0x38>)
1000b53c:	681b      	ldr	r3, [r3, #0]
1000b53e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b540:	4a08      	ldr	r2, [pc, #32]	; (1000b564 <PORT1_COMB_Handler+0x34>)
1000b542:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b544:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b546:	0b5b      	lsrs	r3, r3, #13
1000b548:	035b      	lsls	r3, r3, #13
1000b54a:	430b      	orrs	r3, r1
1000b54c:	8713      	strh	r3, [r2, #56]	; 0x38
1000b54e:	2180      	movs	r1, #128	; 0x80
1000b550:	0049      	lsls	r1, r1, #1
1000b552:	23c0      	movs	r3, #192	; 0xc0
1000b554:	005b      	lsls	r3, r3, #1
1000b556:	4a05      	ldr	r2, [pc, #20]	; (1000b56c <PORT1_COMB_Handler+0x3c>)
1000b558:	50d1      	str	r1, [r2, r3]
1000b55a:	e001      	b.n	1000b560 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b55c:	4b04      	ldr	r3, [pc, #16]	; (1000b570 <PORT1_COMB_Handler+0x40>)
1000b55e:	4798      	blx	r3
	}
}
1000b560:	bd10      	pop	{r4, pc}
1000b562:	46c0      	nop			; (mov r8, r8)
1000b564:	40011000 	.word	0x40011000
1000b568:	100132a8 	.word	0x100132a8
1000b56c:	e000e100 	.word	0xe000e100
1000b570:	1000b455 	.word	0x1000b455

1000b574 <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *params)
{
    ALL_UNUSED(params);
    app_state = SMS_DISCONNECTED;
1000b574:	2203      	movs	r2, #3
1000b576:	4b02      	ldr	r3, [pc, #8]	; (1000b580 <ble_disconnected_app_event+0xc>)
1000b578:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
}
1000b57a:	2000      	movs	r0, #0
1000b57c:	4770      	bx	lr
1000b57e:	46c0      	nop			; (mov r8, r8)
1000b580:	100132bc 	.word	0x100132bc

1000b584 <timer_callback_fn>:


/* timer callback function */
static void timer_callback_fn(void)
{
    app_state = SMS_INT_TIMER1;
1000b584:	2206      	movs	r2, #6
1000b586:	4b01      	ldr	r3, [pc, #4]	; (1000b58c <timer_callback_fn+0x8>)
1000b588:	701a      	strb	r2, [r3, #0]
    /* Add timer callback functionality here */
}
1000b58a:	4770      	bx	lr
1000b58c:	100132bc 	.word	0x100132bc

1000b590 <sms_gateway_char_write_resp>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_WRITE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_write_resp(void *params)
{
1000b590:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic write response");
1000b592:	4804      	ldr	r0, [pc, #16]	; (1000b5a4 <sms_gateway_char_write_resp+0x14>)
1000b594:	4b04      	ldr	r3, [pc, #16]	; (1000b5a8 <sms_gateway_char_write_resp+0x18>)
1000b596:	4798      	blx	r3
1000b598:	4804      	ldr	r0, [pc, #16]	; (1000b5ac <sms_gateway_char_write_resp+0x1c>)
1000b59a:	4b05      	ldr	r3, [pc, #20]	; (1000b5b0 <sms_gateway_char_write_resp+0x20>)
1000b59c:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b59e:	2000      	movs	r0, #0
1000b5a0:	bd10      	pop	{r4, pc}
1000b5a2:	46c0      	nop			; (mov r8, r8)
1000b5a4:	10010d64 	.word	0x10010d64
1000b5a8:	1000fa99 	.word	0x1000fa99
1000b5ac:	10011e2c 	.word	0x10011e2c
1000b5b0:	1000f979 	.word	0x1000f979

1000b5b4 <sms_gateway_char_read_multiple>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_MULTIBLE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_read_multiple(void *params)
{
1000b5b4:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by multiple BLE responses");
1000b5b6:	4804      	ldr	r0, [pc, #16]	; (1000b5c8 <sms_gateway_char_read_multiple+0x14>)
1000b5b8:	4b04      	ldr	r3, [pc, #16]	; (1000b5cc <sms_gateway_char_read_multiple+0x18>)
1000b5ba:	4798      	blx	r3
1000b5bc:	4804      	ldr	r0, [pc, #16]	; (1000b5d0 <sms_gateway_char_read_multiple+0x1c>)
1000b5be:	4b05      	ldr	r3, [pc, #20]	; (1000b5d4 <sms_gateway_char_read_multiple+0x20>)
1000b5c0:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b5c2:	2000      	movs	r0, #0
1000b5c4:	bd10      	pop	{r4, pc}
1000b5c6:	46c0      	nop			; (mov r8, r8)
1000b5c8:	10010d64 	.word	0x10010d64
1000b5cc:	1000fa99 	.word	0x1000fa99
1000b5d0:	10011e4c 	.word	0x10011e4c
1000b5d4:	1000f979 	.word	0x1000f979

1000b5d8 <sms_gateway_char_read_by_uuid>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_BY_UUID_RESPONSE event from stack */
static at_ble_status_t 	sms_gateway_char_read_by_uuid(void *params)
{
1000b5d8:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by uuid response");
1000b5da:	4804      	ldr	r0, [pc, #16]	; (1000b5ec <sms_gateway_char_read_by_uuid+0x14>)
1000b5dc:	4b04      	ldr	r3, [pc, #16]	; (1000b5f0 <sms_gateway_char_read_by_uuid+0x18>)
1000b5de:	4798      	blx	r3
1000b5e0:	4804      	ldr	r0, [pc, #16]	; (1000b5f4 <sms_gateway_char_read_by_uuid+0x1c>)
1000b5e2:	4b05      	ldr	r3, [pc, #20]	; (1000b5f8 <sms_gateway_char_read_by_uuid+0x20>)
1000b5e4:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b5e6:	2000      	movs	r0, #0
1000b5e8:	bd10      	pop	{r4, pc}
1000b5ea:	46c0      	nop			; (mov r8, r8)
1000b5ec:	10010d64 	.word	0x10010d64
1000b5f0:	1000fa99 	.word	0x1000fa99
1000b5f4:	10011e7c 	.word	0x10011e7c
1000b5f8:	1000f979 	.word	0x1000f979

1000b5fc <sms_gateway_discovery_complete>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE (#23) event from stack */
static at_ble_status_t sms_gateway_discovery_complete(void *params)
{
1000b5fc:	b510      	push	{r4, lr}
    DBG_LOG("Discovery complete");
1000b5fe:	4804      	ldr	r0, [pc, #16]	; (1000b610 <sms_gateway_discovery_complete+0x14>)
1000b600:	4b04      	ldr	r3, [pc, #16]	; (1000b614 <sms_gateway_discovery_complete+0x18>)
1000b602:	4798      	blx	r3
1000b604:	4804      	ldr	r0, [pc, #16]	; (1000b618 <sms_gateway_discovery_complete+0x1c>)
1000b606:	4b05      	ldr	r3, [pc, #20]	; (1000b61c <sms_gateway_discovery_complete+0x20>)
1000b608:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b60a:	2000      	movs	r0, #0
1000b60c:	bd10      	pop	{r4, pc}
1000b60e:	46c0      	nop			; (mov r8, r8)
1000b610:	10010d64 	.word	0x10010d64
1000b614:	1000fa99 	.word	0x1000fa99
1000b618:	10011ea4 	.word	0x10011ea4
1000b61c:	1000f979 	.word	0x1000f979

1000b620 <sms_gateway_descr_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DESCRIPTOR_FOUND event from stack */
static at_ble_status_t sms_gateway_descr_found(void *params)
{
1000b620:	b510      	push	{r4, lr}
    DBG_LOG("Descriptor found");
1000b622:	4804      	ldr	r0, [pc, #16]	; (1000b634 <sms_gateway_descr_found+0x14>)
1000b624:	4b04      	ldr	r3, [pc, #16]	; (1000b638 <sms_gateway_descr_found+0x18>)
1000b626:	4798      	blx	r3
1000b628:	4804      	ldr	r0, [pc, #16]	; (1000b63c <sms_gateway_descr_found+0x1c>)
1000b62a:	4b05      	ldr	r3, [pc, #20]	; (1000b640 <sms_gateway_descr_found+0x20>)
1000b62c:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b62e:	2000      	movs	r0, #0
1000b630:	bd10      	pop	{r4, pc}
1000b632:	46c0      	nop			; (mov r8, r8)
1000b634:	10010d64 	.word	0x10010d64
1000b638:	1000fa99 	.word	0x1000fa99
1000b63c:	10011eb8 	.word	0x10011eb8
1000b640:	1000f979 	.word	0x1000f979

1000b644 <sms_gateway_char_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_FOUND event from stack */
static at_ble_status_t sms_gateway_char_found(void *params)
{
1000b644:	b510      	push	{r4, lr}
    DBG_LOG_DEV("Characteristic found");
1000b646:	4804      	ldr	r0, [pc, #16]	; (1000b658 <sms_gateway_char_found+0x14>)
1000b648:	4b04      	ldr	r3, [pc, #16]	; (1000b65c <sms_gateway_char_found+0x18>)
1000b64a:	4798      	blx	r3
1000b64c:	4804      	ldr	r0, [pc, #16]	; (1000b660 <sms_gateway_char_found+0x1c>)
1000b64e:	4b05      	ldr	r3, [pc, #20]	; (1000b664 <sms_gateway_char_found+0x20>)
1000b650:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000b652:	2000      	movs	r0, #0
1000b654:	bd10      	pop	{r4, pc}
1000b656:	46c0      	nop			; (mov r8, r8)
1000b658:	10010d64 	.word	0x10010d64
1000b65c:	1000fa99 	.word	0x1000fa99
1000b660:	10011ecc 	.word	0x10011ecc
1000b664:	1000f979 	.word	0x1000f979

1000b668 <sms_gateway_service_found>:
/* .... */

/* GATT CLIENT */
/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND (#19) event from stack */
static at_ble_status_t sms_gateway_service_found(void *params)
{
1000b668:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b66a:	4647      	mov	r7, r8
1000b66c:	b480      	push	{r7}
1000b66e:	4680      	mov	r8, r0
    DBG_LOG_DEV("Primary service found");
1000b670:	4e19      	ldr	r6, [pc, #100]	; (1000b6d8 <sms_gateway_service_found+0x70>)
1000b672:	0030      	movs	r0, r6
1000b674:	4d19      	ldr	r5, [pc, #100]	; (1000b6dc <sms_gateway_service_found+0x74>)
1000b676:	47a8      	blx	r5
1000b678:	4819      	ldr	r0, [pc, #100]	; (1000b6e0 <sms_gateway_service_found+0x78>)
1000b67a:	4c1a      	ldr	r4, [pc, #104]	; (1000b6e4 <sms_gateway_service_found+0x7c>)
1000b67c:	47a0      	blx	r4
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
1000b67e:	0030      	movs	r0, r6
1000b680:	47a8      	blx	r5
1000b682:	4819      	ldr	r0, [pc, #100]	; (1000b6e8 <sms_gateway_service_found+0x80>)
1000b684:	47a0      	blx	r4
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
1000b686:	0030      	movs	r0, r6
1000b688:	47a8      	blx	r5
1000b68a:	4643      	mov	r3, r8
1000b68c:	7999      	ldrb	r1, [r3, #6]
1000b68e:	4817      	ldr	r0, [pc, #92]	; (1000b6ec <sms_gateway_service_found+0x84>)
1000b690:	47a0      	blx	r4
    DBG_LOG_DEV("  service uuid: 0x");
1000b692:	0030      	movs	r0, r6
1000b694:	47a8      	blx	r5
1000b696:	4816      	ldr	r0, [pc, #88]	; (1000b6f0 <sms_gateway_service_found+0x88>)
1000b698:	47a0      	blx	r4
1000b69a:	4643      	mov	r3, r8
1000b69c:	1ddc      	adds	r4, r3, #7
1000b69e:	4647      	mov	r7, r8
1000b6a0:	3717      	adds	r7, #23
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        DBG_LOG_CONT_DEV("%x", service->service_uuid.uuid[i]);
1000b6a2:	4e14      	ldr	r6, [pc, #80]	; (1000b6f4 <sms_gateway_service_found+0x8c>)
1000b6a4:	4d0f      	ldr	r5, [pc, #60]	; (1000b6e4 <sms_gateway_service_found+0x7c>)
1000b6a6:	7821      	ldrb	r1, [r4, #0]
1000b6a8:	0030      	movs	r0, r6
1000b6aa:	47a8      	blx	r5
1000b6ac:	3401      	adds	r4, #1
    DBG_LOG_DEV("Primary service found");
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
    DBG_LOG_DEV("  service uuid: 0x");
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
1000b6ae:	42bc      	cmp	r4, r7
1000b6b0:	d1f9      	bne.n	1000b6a6 <sms_gateway_service_found+0x3e>
        DBG_LOG_CONT_DEV("%x", service->service_uuid.uuid[i]);
    }
    DBG_LOG_DEV("  start handle: %d", service->start_handle);
1000b6b2:	4e09      	ldr	r6, [pc, #36]	; (1000b6d8 <sms_gateway_service_found+0x70>)
1000b6b4:	0030      	movs	r0, r6
1000b6b6:	4d09      	ldr	r5, [pc, #36]	; (1000b6dc <sms_gateway_service_found+0x74>)
1000b6b8:	47a8      	blx	r5
1000b6ba:	4643      	mov	r3, r8
1000b6bc:	8859      	ldrh	r1, [r3, #2]
1000b6be:	480e      	ldr	r0, [pc, #56]	; (1000b6f8 <sms_gateway_service_found+0x90>)
1000b6c0:	4c08      	ldr	r4, [pc, #32]	; (1000b6e4 <sms_gateway_service_found+0x7c>)
1000b6c2:	47a0      	blx	r4
    DBG_LOG_DEV("  end handle: %d", service->end_handle);
1000b6c4:	0030      	movs	r0, r6
1000b6c6:	47a8      	blx	r5
1000b6c8:	4643      	mov	r3, r8
1000b6ca:	8899      	ldrh	r1, [r3, #4]
1000b6cc:	480b      	ldr	r0, [pc, #44]	; (1000b6fc <sms_gateway_service_found+0x94>)
1000b6ce:	47a0      	blx	r4
    return AT_BLE_SUCCESS;
}
1000b6d0:	2000      	movs	r0, #0
1000b6d2:	bc04      	pop	{r2}
1000b6d4:	4690      	mov	r8, r2
1000b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6d8:	10010d64 	.word	0x10010d64
1000b6dc:	1000fa99 	.word	0x1000fa99
1000b6e0:	10011ee4 	.word	0x10011ee4
1000b6e4:	1000f979 	.word	0x1000f979
1000b6e8:	10011efc 	.word	0x10011efc
1000b6ec:	10011f34 	.word	0x10011f34
1000b6f0:	10011f48 	.word	0x10011f48
1000b6f4:	10011f5c 	.word	0x10011f5c
1000b6f8:	10011f60 	.word	0x10011f60
1000b6fc:	10011f74 	.word	0x10011f74

1000b700 <sms_gateway_indication_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_INDICATION_RECIEVED event from stack */
static at_ble_status_t sms_gateway_indication_received(void *param)
{
1000b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b702:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000b704:	4b23      	ldr	r3, [pc, #140]	; (1000b794 <sms_gateway_indication_received+0x94>)
1000b706:	7818      	ldrb	r0, [r3, #0]
1000b708:	2101      	movs	r1, #1
1000b70a:	4b23      	ldr	r3, [pc, #140]	; (1000b798 <sms_gateway_indication_received+0x98>)
1000b70c:	4798      	blx	r3

    at_ble_indication_recieved_t *indication = (at_ble_indication_recieved_t *)param;
    static uint16_t btn_ind_cnt = 0;
    static uint16_t press_ind_cnt = 0;
    static uint16_t imu_ind_cnt = 0;
    switch(indication->char_len) {
1000b70e:	78ab      	ldrb	r3, [r5, #2]
1000b710:	2b08      	cmp	r3, #8
1000b712:	d00f      	beq.n	1000b734 <sms_gateway_indication_received+0x34>
1000b714:	2b0c      	cmp	r3, #12
1000b716:	d022      	beq.n	1000b75e <sms_gateway_indication_received+0x5e>
1000b718:	2b01      	cmp	r3, #1
1000b71a:	d134      	bne.n	1000b786 <sms_gateway_indication_received+0x86>
        case 1:
        DBG_LOG_DEV("BTN %d: 0x%02x", btn_ind_cnt++, indication->char_value[0]);
1000b71c:	481f      	ldr	r0, [pc, #124]	; (1000b79c <sms_gateway_indication_received+0x9c>)
1000b71e:	4b20      	ldr	r3, [pc, #128]	; (1000b7a0 <sms_gateway_indication_received+0xa0>)
1000b720:	4798      	blx	r3
1000b722:	4b20      	ldr	r3, [pc, #128]	; (1000b7a4 <sms_gateway_indication_received+0xa4>)
1000b724:	8819      	ldrh	r1, [r3, #0]
1000b726:	1c4a      	adds	r2, r1, #1
1000b728:	801a      	strh	r2, [r3, #0]
1000b72a:	79aa      	ldrb	r2, [r5, #6]
1000b72c:	481e      	ldr	r0, [pc, #120]	; (1000b7a8 <sms_gateway_indication_received+0xa8>)
1000b72e:	4b1f      	ldr	r3, [pc, #124]	; (1000b7ac <sms_gateway_indication_received+0xac>)
1000b730:	4798      	blx	r3
        break;
1000b732:	e028      	b.n	1000b786 <sms_gateway_indication_received+0x86>
        
        case 8:
        DBG_LOG_DEV("\t\tPRESS %d: 0x", press_ind_cnt++);
1000b734:	4819      	ldr	r0, [pc, #100]	; (1000b79c <sms_gateway_indication_received+0x9c>)
1000b736:	4b1a      	ldr	r3, [pc, #104]	; (1000b7a0 <sms_gateway_indication_received+0xa0>)
1000b738:	4798      	blx	r3
1000b73a:	4b1d      	ldr	r3, [pc, #116]	; (1000b7b0 <sms_gateway_indication_received+0xb0>)
1000b73c:	8819      	ldrh	r1, [r3, #0]
1000b73e:	1c4a      	adds	r2, r1, #1
1000b740:	801a      	strh	r2, [r3, #0]
1000b742:	481c      	ldr	r0, [pc, #112]	; (1000b7b4 <sms_gateway_indication_received+0xb4>)
1000b744:	4b19      	ldr	r3, [pc, #100]	; (1000b7ac <sms_gateway_indication_received+0xac>)
1000b746:	4798      	blx	r3
1000b748:	1dac      	adds	r4, r5, #6
1000b74a:	350e      	adds	r5, #14
        for(uint8_t i = 0; i < 8; i++) {
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
1000b74c:	4f1a      	ldr	r7, [pc, #104]	; (1000b7b8 <sms_gateway_indication_received+0xb8>)
1000b74e:	4e17      	ldr	r6, [pc, #92]	; (1000b7ac <sms_gateway_indication_received+0xac>)
1000b750:	7821      	ldrb	r1, [r4, #0]
1000b752:	0038      	movs	r0, r7
1000b754:	47b0      	blx	r6
1000b756:	3401      	adds	r4, #1
        DBG_LOG_DEV("BTN %d: 0x%02x", btn_ind_cnt++, indication->char_value[0]);
        break;
        
        case 8:
        DBG_LOG_DEV("\t\tPRESS %d: 0x", press_ind_cnt++);
        for(uint8_t i = 0; i < 8; i++) {
1000b758:	42ac      	cmp	r4, r5
1000b75a:	d1f9      	bne.n	1000b750 <sms_gateway_indication_received+0x50>
1000b75c:	e013      	b.n	1000b786 <sms_gateway_indication_received+0x86>
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
        }
        break;
        
        case 12:
        DBG_LOG_DEV("\t\t\t\tIMU %d: 0x", imu_ind_cnt++);
1000b75e:	480f      	ldr	r0, [pc, #60]	; (1000b79c <sms_gateway_indication_received+0x9c>)
1000b760:	4b0f      	ldr	r3, [pc, #60]	; (1000b7a0 <sms_gateway_indication_received+0xa0>)
1000b762:	4798      	blx	r3
1000b764:	4b15      	ldr	r3, [pc, #84]	; (1000b7bc <sms_gateway_indication_received+0xbc>)
1000b766:	8819      	ldrh	r1, [r3, #0]
1000b768:	1c4a      	adds	r2, r1, #1
1000b76a:	801a      	strh	r2, [r3, #0]
1000b76c:	4814      	ldr	r0, [pc, #80]	; (1000b7c0 <sms_gateway_indication_received+0xc0>)
1000b76e:	4b0f      	ldr	r3, [pc, #60]	; (1000b7ac <sms_gateway_indication_received+0xac>)
1000b770:	4798      	blx	r3
1000b772:	1dac      	adds	r4, r5, #6
1000b774:	3512      	adds	r5, #18
        for(uint8_t i = 0; i < 12; i++) {
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
1000b776:	4e10      	ldr	r6, [pc, #64]	; (1000b7b8 <sms_gateway_indication_received+0xb8>)
1000b778:	4f0c      	ldr	r7, [pc, #48]	; (1000b7ac <sms_gateway_indication_received+0xac>)
1000b77a:	7821      	ldrb	r1, [r4, #0]
1000b77c:	0030      	movs	r0, r6
1000b77e:	47b8      	blx	r7
1000b780:	3401      	adds	r4, #1
        }
        break;
        
        case 12:
        DBG_LOG_DEV("\t\t\t\tIMU %d: 0x", imu_ind_cnt++);
        for(uint8_t i = 0; i < 12; i++) {
1000b782:	42ac      	cmp	r4, r5
1000b784:	d1f9      	bne.n	1000b77a <sms_gateway_indication_received+0x7a>
    //DBG_LOG_DEV("Indication received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d", indication->conn_handle, indication->char_handle, indication->char_len);
    //for(uint8_t i = 0; i < indication->char_len; i++) {
        //DBG_LOG_CONT_DEV("\r\n- char value[%d]: 0x%02x", i, indication->char_value[i]);
    //}
 
    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000b786:	4b03      	ldr	r3, [pc, #12]	; (1000b794 <sms_gateway_indication_received+0x94>)
1000b788:	7818      	ldrb	r0, [r3, #0]
1000b78a:	2100      	movs	r1, #0
1000b78c:	4b02      	ldr	r3, [pc, #8]	; (1000b798 <sms_gateway_indication_received+0x98>)
1000b78e:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000b790:	2000      	movs	r0, #0
1000b792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b794:	100123a8 	.word	0x100123a8
1000b798:	100083c5 	.word	0x100083c5
1000b79c:	10010d64 	.word	0x10010d64
1000b7a0:	1000fa99 	.word	0x1000fa99
1000b7a4:	1001252e 	.word	0x1001252e
1000b7a8:	10011f88 	.word	0x10011f88
1000b7ac:	1000f979 	.word	0x1000f979
1000b7b0:	1001252c 	.word	0x1001252c
1000b7b4:	10011f98 	.word	0x10011f98
1000b7b8:	10012098 	.word	0x10012098
1000b7bc:	10012532 	.word	0x10012532
1000b7c0:	10011fa8 	.word	0x10011fa8

1000b7c4 <sms_gateway_notification_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_NOTIFICATION_RECIEVED (#27) event from stack */
static at_ble_status_t sms_gateway_notification_received(void *params)
{
1000b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b7c6:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000b7c8:	4b16      	ldr	r3, [pc, #88]	; (1000b824 <sms_gateway_notification_received+0x60>)
1000b7ca:	7818      	ldrb	r0, [r3, #0]
1000b7cc:	2101      	movs	r1, #1
1000b7ce:	4b16      	ldr	r3, [pc, #88]	; (1000b828 <sms_gateway_notification_received+0x64>)
1000b7d0:	4798      	blx	r3

    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
1000b7d2:	4c16      	ldr	r4, [pc, #88]	; (1000b82c <sms_gateway_notification_received+0x68>)
1000b7d4:	8823      	ldrh	r3, [r4, #0]
1000b7d6:	3301      	adds	r3, #1
1000b7d8:	8023      	strh	r3, [r4, #0]
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
1000b7da:	4e15      	ldr	r6, [pc, #84]	; (1000b830 <sms_gateway_notification_received+0x6c>)
1000b7dc:	0030      	movs	r0, r6
1000b7de:	4f15      	ldr	r7, [pc, #84]	; (1000b834 <sms_gateway_notification_received+0x70>)
1000b7e0:	47b8      	blx	r7
1000b7e2:	8821      	ldrh	r1, [r4, #0]
1000b7e4:	4814      	ldr	r0, [pc, #80]	; (1000b838 <sms_gateway_notification_received+0x74>)
1000b7e6:	4c15      	ldr	r4, [pc, #84]	; (1000b83c <sms_gateway_notification_received+0x78>)
1000b7e8:	47a0      	blx	r4
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
1000b7ea:	0030      	movs	r0, r6
1000b7ec:	47b8      	blx	r7
1000b7ee:	78ab      	ldrb	r3, [r5, #2]
1000b7f0:	88aa      	ldrh	r2, [r5, #4]
1000b7f2:	8829      	ldrh	r1, [r5, #0]
1000b7f4:	4812      	ldr	r0, [pc, #72]	; (1000b840 <sms_gateway_notification_received+0x7c>)
1000b7f6:	47a0      	blx	r4
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000b7f8:	78ab      	ldrb	r3, [r5, #2]
1000b7fa:	2b00      	cmp	r3, #0
1000b7fc:	d00b      	beq.n	1000b816 <sms_gateway_notification_received+0x52>
1000b7fe:	2400      	movs	r4, #0
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
1000b800:	4e10      	ldr	r6, [pc, #64]	; (1000b844 <sms_gateway_notification_received+0x80>)
1000b802:	4f0e      	ldr	r7, [pc, #56]	; (1000b83c <sms_gateway_notification_received+0x78>)
1000b804:	192b      	adds	r3, r5, r4
1000b806:	7999      	ldrb	r1, [r3, #6]
1000b808:	0030      	movs	r0, r6
1000b80a:	47b8      	blx	r7
    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000b80c:	3401      	adds	r4, #1
1000b80e:	b2e4      	uxtb	r4, r4
1000b810:	78ab      	ldrb	r3, [r5, #2]
1000b812:	42a3      	cmp	r3, r4
1000b814:	d8f6      	bhi.n	1000b804 <sms_gateway_notification_received+0x40>
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
    }

    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000b816:	4b03      	ldr	r3, [pc, #12]	; (1000b824 <sms_gateway_notification_received+0x60>)
1000b818:	7818      	ldrb	r0, [r3, #0]
1000b81a:	2100      	movs	r1, #0
1000b81c:	4b02      	ldr	r3, [pc, #8]	; (1000b828 <sms_gateway_notification_received+0x64>)
1000b81e:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000b820:	2000      	movs	r0, #0
1000b822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b824:	100123a8 	.word	0x100123a8
1000b828:	100083c5 	.word	0x100083c5
1000b82c:	10012534 	.word	0x10012534
1000b830:	10010d64 	.word	0x10010d64
1000b834:	1000fa99 	.word	0x1000fa99
1000b838:	10011fb8 	.word	0x10011fb8
1000b83c:	1000f979 	.word	0x1000f979
1000b840:	10011fc0 	.word	0x10011fc0
1000b844:	10012098 	.word	0x10012098

1000b848 <ble_connected_app_event>:
    return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
1000b848:	b510      	push	{r4, lr}
1000b84a:	0004      	movs	r4, r0
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000b84c:	8900      	ldrh	r0, [r0, #8]
1000b84e:	4b08      	ldr	r3, [pc, #32]	; (1000b870 <ble_connected_app_event+0x28>)
1000b850:	4798      	blx	r3
    {
        return AT_BLE_FAILURE;
1000b852:	23e2      	movs	r3, #226	; 0xe2
static at_ble_status_t ble_connected_app_event(void *params)
{
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000b854:	2800      	cmp	r0, #0
1000b856:	d009      	beq.n	1000b86c <ble_connected_app_event+0x24>
    {
        return AT_BLE_FAILURE;
    }
    
    DBG_LOG_DEV("Device connected...");
1000b858:	4806      	ldr	r0, [pc, #24]	; (1000b874 <ble_connected_app_event+0x2c>)
1000b85a:	4b07      	ldr	r3, [pc, #28]	; (1000b878 <ble_connected_app_event+0x30>)
1000b85c:	4798      	blx	r3
1000b85e:	4807      	ldr	r0, [pc, #28]	; (1000b87c <ble_connected_app_event+0x34>)
1000b860:	4b07      	ldr	r3, [pc, #28]	; (1000b880 <ble_connected_app_event+0x38>)
1000b862:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_CONNECTED;
1000b864:	2202      	movs	r2, #2
1000b866:	4b07      	ldr	r3, [pc, #28]	; (1000b884 <ble_connected_app_event+0x3c>)
1000b868:	701a      	strb	r2, [r3, #0]
    return conn_params->conn_status;
1000b86a:	7aa3      	ldrb	r3, [r4, #10]
}
1000b86c:	0018      	movs	r0, r3
1000b86e:	bd10      	pop	{r4, pc}
1000b870:	1000a8d9 	.word	0x1000a8d9
1000b874:	10010d64 	.word	0x10010d64
1000b878:	1000fa99 	.word	0x1000fa99
1000b87c:	10012050 	.word	0x10012050
1000b880:	1000f979 	.word	0x1000f979
1000b884:	10012536 	.word	0x10012536

1000b888 <ble_scan_data_app_event>:
/* ------------------ */

/* GAP */
/* Callback registered for AT_BLE_SCAN_REPORT (#2) event from stack */
static at_ble_status_t ble_scan_data_app_event(void *param)
{
1000b888:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b88a:	465f      	mov	r7, fp
1000b88c:	4656      	mov	r6, sl
1000b88e:	464d      	mov	r5, r9
1000b890:	4644      	mov	r4, r8
1000b892:	b4f0      	push	{r4, r5, r6, r7}
1000b894:	b097      	sub	sp, #92	; 0x5c
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
1000b896:	4b73      	ldr	r3, [pc, #460]	; (1000ba64 <ble_scan_data_app_event+0x1dc>)
1000b898:	781c      	ldrb	r4, [r3, #0]
1000b89a:	b2e4      	uxtb	r4, r4
    scan_index = 0;
1000b89c:	2200      	movs	r2, #0
1000b89e:	4b72      	ldr	r3, [pc, #456]	; (1000ba68 <ble_scan_data_app_event+0x1e0>)
1000b8a0:	701a      	strb	r2, [r3, #0]
    bool device_identified = false;
    uint8_t device_index = 0;
    char search_pattern1[strlen(SMS_ID_PATTERN1)];
    char search_pattern2[strlen(SMS_ID_PATTERN2)];
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
1000b8a2:	3214      	adds	r2, #20
1000b8a4:	2100      	movs	r1, #0
1000b8a6:	a80e      	add	r0, sp, #56	; 0x38
1000b8a8:	4b70      	ldr	r3, [pc, #448]	; (1000ba6c <ble_scan_data_app_event+0x1e4>)
1000b8aa:	4798      	blx	r3
    if (scanned_dev_count) {
1000b8ac:	2c00      	cmp	r4, #0
1000b8ae:	d100      	bne.n	1000b8b2 <ble_scan_data_app_event+0x2a>
1000b8b0:	e0c0      	b.n	1000ba34 <ble_scan_data_app_event+0x1ac>
1000b8b2:	4a6f      	ldr	r2, [pc, #444]	; (1000ba70 <ble_scan_data_app_event+0x1e8>)
1000b8b4:	2300      	movs	r3, #0
1000b8b6:	2100      	movs	r1, #0
1000b8b8:	0008      	movs	r0, r1
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
            /* Display only the connectible devices*/
            if((scan_buffer[index].type == AT_BLE_ADV_TYPE_DIRECTED)
1000b8ba:	7811      	ldrb	r1, [r2, #0]
1000b8bc:	2901      	cmp	r1, #1
1000b8be:	d803      	bhi.n	1000b8c8 <ble_scan_data_app_event+0x40>
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
1000b8c0:	1c41      	adds	r1, r0, #1
1000b8c2:	ad0e      	add	r5, sp, #56	; 0x38
1000b8c4:	542b      	strb	r3, [r5, r0]
1000b8c6:	b2c8      	uxtb	r0, r1
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
    if (scanned_dev_count) {
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
1000b8c8:	3301      	adds	r3, #1
1000b8ca:	b2db      	uxtb	r3, r3
1000b8cc:	3229      	adds	r2, #41	; 0x29
1000b8ce:	429c      	cmp	r4, r3
1000b8d0:	d1f3      	bne.n	1000b8ba <ble_scan_data_app_event+0x32>
1000b8d2:	9007      	str	r0, [sp, #28]
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
            }
        }
        
        if (scan_device_count) {
1000b8d4:	2800      	cmp	r0, #0
1000b8d6:	d100      	bne.n	1000b8da <ble_scan_data_app_event+0x52>
1000b8d8:	e083      	b.n	1000b9e2 <ble_scan_data_app_event+0x15a>
            /* Service type to be searched */
            service_uuid.type = AT_BLE_UUID_16;
1000b8da:	ab09      	add	r3, sp, #36	; 0x24
1000b8dc:	2200      	movs	r2, #0
1000b8de:	701a      	strb	r2, [r3, #0]

            /* Service UUID */
            service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
1000b8e0:	3218      	adds	r2, #24
1000b8e2:	709a      	strb	r2, [r3, #2]
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
1000b8e4:	3a15      	subs	r2, #21
1000b8e6:	705a      	strb	r2, [r3, #1]
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
1000b8e8:	aa13      	add	r2, sp, #76	; 0x4c
1000b8ea:	4b62      	ldr	r3, [pc, #392]	; (1000ba74 <ble_scan_data_app_event+0x1ec>)
1000b8ec:	cb03      	ldmia	r3!, {r0, r1}
1000b8ee:	c203      	stmia	r2!, {r0, r1}
1000b8f0:	781b      	ldrb	r3, [r3, #0]
1000b8f2:	7013      	strb	r3, [r2, #0]
1000b8f4:	9b07      	ldr	r3, [sp, #28]
1000b8f6:	3b01      	subs	r3, #1
1000b8f8:	b2db      	uxtb	r3, r3
1000b8fa:	3301      	adds	r3, #1
1000b8fc:	9304      	str	r3, [sp, #16]
1000b8fe:	2300      	movs	r3, #0
1000b900:	4699      	mov	r9, r3
1000b902:	9306      	str	r3, [sp, #24]
1000b904:	9305      	str	r3, [sp, #20]
1000b906:	464c      	mov	r4, r9
1000b908:	b2e3      	uxtb	r3, r4
1000b90a:	469b      	mov	fp, r3
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b90c:	485a      	ldr	r0, [pc, #360]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000b90e:	4b5b      	ldr	r3, [pc, #364]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000b910:	4798      	blx	r3
                index,
                scan_buffer[scan_device[index]].dev_addr.addr[5],
1000b912:	ab0e      	add	r3, sp, #56	; 0x38
1000b914:	5ce3      	ldrb	r3, [r4, r3]
1000b916:	009a      	lsls	r2, r3, #2
1000b918:	18d2      	adds	r2, r2, r3
1000b91a:	00d2      	lsls	r2, r2, #3
1000b91c:	18d3      	adds	r3, r2, r3
1000b91e:	4a54      	ldr	r2, [pc, #336]	; (1000ba70 <ble_scan_data_app_event+0x1e8>)
1000b920:	4690      	mov	r8, r2
1000b922:	4498      	add	r8, r3
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b924:	4643      	mov	r3, r8
1000b926:	799b      	ldrb	r3, [r3, #6]
1000b928:	4642      	mov	r2, r8
1000b92a:	79d2      	ldrb	r2, [r2, #7]
1000b92c:	4641      	mov	r1, r8
1000b92e:	7889      	ldrb	r1, [r1, #2]
1000b930:	9103      	str	r1, [sp, #12]
1000b932:	4641      	mov	r1, r8
1000b934:	78c9      	ldrb	r1, [r1, #3]
1000b936:	9102      	str	r1, [sp, #8]
1000b938:	4641      	mov	r1, r8
1000b93a:	7909      	ldrb	r1, [r1, #4]
1000b93c:	9101      	str	r1, [sp, #4]
1000b93e:	4641      	mov	r1, r8
1000b940:	7949      	ldrb	r1, [r1, #5]
1000b942:	9100      	str	r1, [sp, #0]
1000b944:	4649      	mov	r1, r9
1000b946:	484e      	ldr	r0, [pc, #312]	; (1000ba80 <ble_scan_data_app_event+0x1f8>)
1000b948:	4c4e      	ldr	r4, [pc, #312]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000b94a:	47a0      	blx	r4
                scan_buffer[scan_device[index]].dev_addr.addr[3],
                scan_buffer[scan_device[index]].dev_addr.addr[2],
                scan_buffer[scan_device[index]].dev_addr.addr[1],
                scan_buffer[scan_device[index]].dev_addr.addr[0]);

                DBG_LOG_DEV("      - advertised data: 0x ");
1000b94c:	484a      	ldr	r0, [pc, #296]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000b94e:	4b4b      	ldr	r3, [pc, #300]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000b950:	4798      	blx	r3
1000b952:	484d      	ldr	r0, [pc, #308]	; (1000ba88 <ble_scan_data_app_event+0x200>)
1000b954:	47a0      	blx	r4
1000b956:	4644      	mov	r4, r8
1000b958:	3408      	adds	r4, #8
1000b95a:	2327      	movs	r3, #39	; 0x27
1000b95c:	4443      	add	r3, r8
1000b95e:	469a      	mov	sl, r3
                uint8_t i = 0;
                uint8_t search_index = 0;
1000b960:	2600      	movs	r6, #0
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
                    if(id1) {
                        DBG_LOG_DEV("%02x... looking for %02x", scan_buffer[scan_device[index]].adv_data[i], search_pattern1[search_index]);
1000b962:	4f46      	ldr	r7, [pc, #280]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000b964:	4844      	ldr	r0, [pc, #272]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000b966:	47b8      	blx	r7
1000b968:	ab13      	add	r3, sp, #76	; 0x4c
1000b96a:	5d9d      	ldrb	r5, [r3, r6]
1000b96c:	7821      	ldrb	r1, [r4, #0]
1000b96e:	002a      	movs	r2, r5
1000b970:	4846      	ldr	r0, [pc, #280]	; (1000ba8c <ble_scan_data_app_event+0x204>)
1000b972:	4b44      	ldr	r3, [pc, #272]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000b974:	4798      	blx	r3
                        if(scan_buffer[scan_device[index]].adv_data[i] == search_pattern1[search_index]) {
1000b976:	7823      	ldrb	r3, [r4, #0]
1000b978:	42ab      	cmp	r3, r5
1000b97a:	d113      	bne.n	1000b9a4 <ble_scan_data_app_event+0x11c>
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
1000b97c:	0031      	movs	r1, r6
1000b97e:	4844      	ldr	r0, [pc, #272]	; (1000ba90 <ble_scan_data_app_event+0x208>)
1000b980:	4b40      	ldr	r3, [pc, #256]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000b982:	4798      	blx	r3
                            if(search_index < (sizeof(search_pattern1)-1)) {
1000b984:	2e07      	cmp	r6, #7
1000b986:	d802      	bhi.n	1000b98e <ble_scan_data_app_event+0x106>
                                search_index += 1;
1000b988:	3601      	adds	r6, #1
1000b98a:	b2f6      	uxtb	r6, r6
1000b98c:	e00a      	b.n	1000b9a4 <ble_scan_data_app_event+0x11c>
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
1000b98e:	483a      	ldr	r0, [pc, #232]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000b990:	4b3a      	ldr	r3, [pc, #232]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000b992:	4798      	blx	r3
1000b994:	483f      	ldr	r0, [pc, #252]	; (1000ba94 <ble_scan_data_app_event+0x20c>)
1000b996:	4b3b      	ldr	r3, [pc, #236]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000b998:	4798      	blx	r3
                                device_identified = true;
                                device_index = index;
                                break;
1000b99a:	465b      	mov	r3, fp
1000b99c:	9306      	str	r3, [sp, #24]
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
                            if(search_index < (sizeof(search_pattern1)-1)) {
                                search_index += 1;
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
                                device_identified = true;
1000b99e:	2301      	movs	r3, #1
1000b9a0:	9305      	str	r3, [sp, #20]
                                device_index = index;
                                break;
1000b9a2:	e002      	b.n	1000b9aa <ble_scan_data_app_event+0x122>
1000b9a4:	3401      	adds	r4, #1
                DBG_LOG_DEV("      - advertised data: 0x ");
                uint8_t i = 0;
                uint8_t search_index = 0;
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
1000b9a6:	4554      	cmp	r4, sl
1000b9a8:	d1dc      	bne.n	1000b964 <ble_scan_data_app_event+0xdc>
                            }
                        }
                    }
                }
                
                if (scan_info_parse(&scan_buffer[scan_device[index]], &service_uuid, AD_TYPE_COMPLETE_LIST_UUID) == AT_BLE_SUCCESS) {
1000b9aa:	2203      	movs	r2, #3
1000b9ac:	a909      	add	r1, sp, #36	; 0x24
1000b9ae:	4640      	mov	r0, r8
1000b9b0:	4b39      	ldr	r3, [pc, #228]	; (1000ba98 <ble_scan_data_app_event+0x210>)
1000b9b2:	4798      	blx	r3
1000b9b4:	2800      	cmp	r0, #0
1000b9b6:	d109      	bne.n	1000b9cc <ble_scan_data_app_event+0x144>
                    /* Device Service UUID  matched */
                    supp_scan_index[scan_index++] = index;
1000b9b8:	4a2b      	ldr	r2, [pc, #172]	; (1000ba68 <ble_scan_data_app_event+0x1e0>)
1000b9ba:	7813      	ldrb	r3, [r2, #0]
1000b9bc:	1c59      	adds	r1, r3, #1
1000b9be:	7011      	strb	r1, [r2, #0]
1000b9c0:	4a36      	ldr	r2, [pc, #216]	; (1000ba9c <ble_scan_data_app_event+0x214>)
1000b9c2:	4659      	mov	r1, fp
1000b9c4:	54d1      	strb	r1, [r2, r3]
                    DBG_LOG_CONT("---PXP");
1000b9c6:	4836      	ldr	r0, [pc, #216]	; (1000baa0 <ble_scan_data_app_event+0x218>)
1000b9c8:	4b2e      	ldr	r3, [pc, #184]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000b9ca:	4798      	blx	r3
1000b9cc:	464b      	mov	r3, r9
1000b9ce:	3301      	adds	r3, #1
1000b9d0:	4699      	mov	r9, r3
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
1000b9d2:	9a04      	ldr	r2, [sp, #16]
1000b9d4:	429a      	cmp	r2, r3
1000b9d6:	d196      	bne.n	1000b906 <ble_scan_data_app_event+0x7e>
                    DBG_LOG_CONT("---PXP");
                }
            }
        }

        if (!scan_index)  {
1000b9d8:	4b23      	ldr	r3, [pc, #140]	; (1000ba68 <ble_scan_data_app_event+0x1e0>)
1000b9da:	781b      	ldrb	r3, [r3, #0]
1000b9dc:	2b00      	cmp	r3, #0
1000b9de:	d134      	bne.n	1000ba4a <ble_scan_data_app_event+0x1c2>
1000b9e0:	e002      	b.n	1000b9e8 <ble_scan_data_app_event+0x160>
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
    uint8_t device_index = 0;
1000b9e2:	2300      	movs	r3, #0
1000b9e4:	9306      	str	r3, [sp, #24]
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
1000b9e6:	9305      	str	r3, [sp, #20]
                }
            }
        }

        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
1000b9e8:	4823      	ldr	r0, [pc, #140]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000b9ea:	4b24      	ldr	r3, [pc, #144]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000b9ec:	4798      	blx	r3
1000b9ee:	482d      	ldr	r0, [pc, #180]	; (1000baa4 <ble_scan_data_app_event+0x21c>)
1000b9f0:	4b24      	ldr	r3, [pc, #144]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000b9f2:	4798      	blx	r3
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000b9f4:	4b2c      	ldr	r3, [pc, #176]	; (1000baa8 <ble_scan_data_app_event+0x220>)
1000b9f6:	4798      	blx	r3
        
        if(device_identified) {
1000b9f8:	9b05      	ldr	r3, [sp, #20]
1000b9fa:	2b00      	cmp	r3, #0
1000b9fc:	d00c      	beq.n	1000ba18 <ble_scan_data_app_event+0x190>
            DBG_LOG_DEV("Compatible device found");
1000b9fe:	481e      	ldr	r0, [pc, #120]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000ba00:	4b1e      	ldr	r3, [pc, #120]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000ba02:	4798      	blx	r3
1000ba04:	4829      	ldr	r0, [pc, #164]	; (1000baac <ble_scan_data_app_event+0x224>)
1000ba06:	4b1f      	ldr	r3, [pc, #124]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000ba08:	4798      	blx	r3
            return pxp_monitor_connect_request(scan_buffer, scan_device[device_index]);
1000ba0a:	ab0e      	add	r3, sp, #56	; 0x38
1000ba0c:	9a06      	ldr	r2, [sp, #24]
1000ba0e:	5c99      	ldrb	r1, [r3, r2]
1000ba10:	4817      	ldr	r0, [pc, #92]	; (1000ba70 <ble_scan_data_app_event+0x1e8>)
1000ba12:	4b27      	ldr	r3, [pc, #156]	; (1000bab0 <ble_scan_data_app_event+0x228>)
1000ba14:	4798      	blx	r3
1000ba16:	e01e      	b.n	1000ba56 <ble_scan_data_app_event+0x1ce>
        }
        /*Updating the index pointer to connect */
        else if(scan_device_count) {
1000ba18:	9b07      	ldr	r3, [sp, #28]
1000ba1a:	2b00      	cmp	r3, #0
1000ba1c:	d008      	beq.n	1000ba30 <ble_scan_data_app_event+0x1a8>
            /* Successful device found event*/
            DBG_LOG_DEV("NO compatible device found");
1000ba1e:	4816      	ldr	r0, [pc, #88]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000ba20:	4b16      	ldr	r3, [pc, #88]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000ba22:	4798      	blx	r3
1000ba24:	4823      	ldr	r0, [pc, #140]	; (1000bab4 <ble_scan_data_app_event+0x22c>)
1000ba26:	4b17      	ldr	r3, [pc, #92]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000ba28:	4798      	blx	r3
            app_state = SMS_RUNNING;
1000ba2a:	2202      	movs	r2, #2
1000ba2c:	4b22      	ldr	r3, [pc, #136]	; (1000bab8 <ble_scan_data_app_event+0x230>)
1000ba2e:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000ba30:	20e2      	movs	r0, #226	; 0xe2
1000ba32:	e010      	b.n	1000ba56 <ble_scan_data_app_event+0x1ce>
            //}
        }
    }
    else {
        /* from no device found event*/
        DBG_LOG_DEV("Nothing found");
1000ba34:	4810      	ldr	r0, [pc, #64]	; (1000ba78 <ble_scan_data_app_event+0x1f0>)
1000ba36:	4b11      	ldr	r3, [pc, #68]	; (1000ba7c <ble_scan_data_app_event+0x1f4>)
1000ba38:	4798      	blx	r3
1000ba3a:	4820      	ldr	r0, [pc, #128]	; (1000babc <ble_scan_data_app_event+0x234>)
1000ba3c:	4b11      	ldr	r3, [pc, #68]	; (1000ba84 <ble_scan_data_app_event+0x1fc>)
1000ba3e:	4798      	blx	r3
        app_state = SMS_RUNNING;
1000ba40:	2202      	movs	r2, #2
1000ba42:	4b1d      	ldr	r3, [pc, #116]	; (1000bab8 <ble_scan_data_app_event+0x230>)
1000ba44:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000ba46:	20e2      	movs	r0, #226	; 0xe2
1000ba48:	e005      	b.n	1000ba56 <ble_scan_data_app_event+0x1ce>
        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000ba4a:	4b17      	ldr	r3, [pc, #92]	; (1000baa8 <ble_scan_data_app_event+0x220>)
1000ba4c:	4798      	blx	r3
        
        if(device_identified) {
1000ba4e:	9b05      	ldr	r3, [sp, #20]
1000ba50:	2b00      	cmp	r3, #0
1000ba52:	d0e4      	beq.n	1000ba1e <ble_scan_data_app_event+0x196>
1000ba54:	e7d3      	b.n	1000b9fe <ble_scan_data_app_event+0x176>
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
}
1000ba56:	b017      	add	sp, #92	; 0x5c
1000ba58:	bc3c      	pop	{r2, r3, r4, r5}
1000ba5a:	4690      	mov	r8, r2
1000ba5c:	4699      	mov	r9, r3
1000ba5e:	46a2      	mov	sl, r4
1000ba60:	46ab      	mov	fp, r5
1000ba62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba64:	10012450 	.word	0x10012450
1000ba68:	10012448 	.word	0x10012448
1000ba6c:	1000f969 	.word	0x1000f969
1000ba70:	10012a48 	.word	0x10012a48
1000ba74:	10011bb8 	.word	0x10011bb8
1000ba78:	10010d64 	.word	0x10010d64
1000ba7c:	1000fa99 	.word	0x1000fa99
1000ba80:	100110a4 	.word	0x100110a4
1000ba84:	1000f979 	.word	0x1000f979
1000ba88:	10012064 	.word	0x10012064
1000ba8c:	10012084 	.word	0x10012084
1000ba90:	100120a0 	.word	0x100120a0
1000ba94:	100120b8 	.word	0x100120b8
1000ba98:	1000a7a5 	.word	0x1000a7a5
1000ba9c:	100132c0 	.word	0x100132c0
1000baa0:	100110e4 	.word	0x100110e4
1000baa4:	10011138 	.word	0x10011138
1000baa8:	1000c871 	.word	0x1000c871
1000baac:	100120d0 	.word	0x100120d0
1000bab0:	100094f5 	.word	0x100094f5
1000bab4:	100120e8 	.word	0x100120e8
1000bab8:	100132bc 	.word	0x100132bc
1000babc:	10012104 	.word	0x10012104

1000bac0 <button_cb>:
    app_state = SMS_INT_TIMER1;
    /* Add timer callback functionality here */
}

static void button_cb(void)
{
1000bac0:	b510      	push	{r4, lr}
    /* Add button callback functionality here */
    app_state = SMS_INT_BUTTON2;
1000bac2:	2205      	movs	r2, #5
1000bac4:	4b04      	ldr	r3, [pc, #16]	; (1000bad8 <button_cb+0x18>)
1000bac6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(BUTTON_0_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000bac8:	2300      	movs	r3, #0
1000baca:	2200      	movs	r2, #0
1000bacc:	2102      	movs	r1, #2
1000bace:	2017      	movs	r0, #23
1000bad0:	4c02      	ldr	r4, [pc, #8]	; (1000badc <button_cb+0x1c>)
1000bad2:	47a0      	blx	r4
}
1000bad4:	bd10      	pop	{r4, pc}
1000bad6:	46c0      	nop			; (mov r8, r8)
1000bad8:	100132bc 	.word	0x100132bc
1000badc:	1000b129 	.word	0x1000b129

1000bae0 <sms_gateway_init>:

static void sms_gateway_init(void)
{
1000bae0:	b510      	push	{r4, lr}
    at_ble_status_t scan_status;

    scan_status = gap_dev_scan();
1000bae2:	4b0a      	ldr	r3, [pc, #40]	; (1000bb0c <sms_gateway_init+0x2c>)
1000bae4:	4798      	blx	r3

    if(scan_status == AT_BLE_INVALID_PARAM) {
1000bae6:	28cf      	cmp	r0, #207	; 0xcf
1000bae8:	d106      	bne.n	1000baf8 <sms_gateway_init+0x18>
        DBG_LOG("Scan parameters are invalid");
1000baea:	4809      	ldr	r0, [pc, #36]	; (1000bb10 <sms_gateway_init+0x30>)
1000baec:	4b09      	ldr	r3, [pc, #36]	; (1000bb14 <sms_gateway_init+0x34>)
1000baee:	4798      	blx	r3
1000baf0:	4809      	ldr	r0, [pc, #36]	; (1000bb18 <sms_gateway_init+0x38>)
1000baf2:	4b0a      	ldr	r3, [pc, #40]	; (1000bb1c <sms_gateway_init+0x3c>)
1000baf4:	4798      	blx	r3
1000baf6:	e007      	b.n	1000bb08 <sms_gateway_init+0x28>
        } else if(scan_status == AT_BLE_FAILURE) {
1000baf8:	28e2      	cmp	r0, #226	; 0xe2
1000bafa:	d105      	bne.n	1000bb08 <sms_gateway_init+0x28>
        DBG_LOG("Scanning failed generic error");
1000bafc:	4804      	ldr	r0, [pc, #16]	; (1000bb10 <sms_gateway_init+0x30>)
1000bafe:	4b05      	ldr	r3, [pc, #20]	; (1000bb14 <sms_gateway_init+0x34>)
1000bb00:	4798      	blx	r3
1000bb02:	4807      	ldr	r0, [pc, #28]	; (1000bb20 <sms_gateway_init+0x40>)
1000bb04:	4b05      	ldr	r3, [pc, #20]	; (1000bb1c <sms_gateway_init+0x3c>)
1000bb06:	4798      	blx	r3
    }
}
1000bb08:	bd10      	pop	{r4, pc}
1000bb0a:	46c0      	nop			; (mov r8, r8)
1000bb0c:	1000a75d 	.word	0x1000a75d
1000bb10:	10010d64 	.word	0x10010d64
1000bb14:	1000fa99 	.word	0x1000fa99
1000bb18:	10012114 	.word	0x10012114
1000bb1c:	1000f979 	.word	0x1000f979
1000bb20:	10012130 	.word	0x10012130

1000bb24 <sms_gateway_discover_services>:

at_ble_status_t sms_gateway_discover_services(at_ble_handle_t handle)
{
1000bb24:	b510      	push	{r4, lr}
    at_ble_status_t status;
    status = at_ble_primary_service_discover_all(handle, GATT_DISCOVERY_STARTING_HANDLE, GATT_DISCOVERY_ENDING_HANDLE);
1000bb26:	4a0b      	ldr	r2, [pc, #44]	; (1000bb54 <sms_gateway_discover_services+0x30>)
1000bb28:	2101      	movs	r1, #1
1000bb2a:	4b0b      	ldr	r3, [pc, #44]	; (1000bb58 <sms_gateway_discover_services+0x34>)
1000bb2c:	4798      	blx	r3
    if(status != AT_BLE_SUCCESS) {
1000bb2e:	2800      	cmp	r0, #0
1000bb30:	d007      	beq.n	1000bb42 <sms_gateway_discover_services+0x1e>
        DBG_LOG("GATT service discovery request failed");
1000bb32:	480a      	ldr	r0, [pc, #40]	; (1000bb5c <sms_gateway_discover_services+0x38>)
1000bb34:	4b0a      	ldr	r3, [pc, #40]	; (1000bb60 <sms_gateway_discover_services+0x3c>)
1000bb36:	4798      	blx	r3
1000bb38:	480a      	ldr	r0, [pc, #40]	; (1000bb64 <sms_gateway_discover_services+0x40>)
1000bb3a:	4b0b      	ldr	r3, [pc, #44]	; (1000bb68 <sms_gateway_discover_services+0x44>)
1000bb3c:	4798      	blx	r3
        return AT_BLE_FAILURE;
1000bb3e:	20e2      	movs	r0, #226	; 0xe2
1000bb40:	e006      	b.n	1000bb50 <sms_gateway_discover_services+0x2c>
        } else {
        DBG_LOG_DEV("GATT service discovery request started");
1000bb42:	4806      	ldr	r0, [pc, #24]	; (1000bb5c <sms_gateway_discover_services+0x38>)
1000bb44:	4b06      	ldr	r3, [pc, #24]	; (1000bb60 <sms_gateway_discover_services+0x3c>)
1000bb46:	4798      	blx	r3
1000bb48:	4808      	ldr	r0, [pc, #32]	; (1000bb6c <sms_gateway_discover_services+0x48>)
1000bb4a:	4b07      	ldr	r3, [pc, #28]	; (1000bb68 <sms_gateway_discover_services+0x44>)
1000bb4c:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000bb4e:	2000      	movs	r0, #0
    }
}
1000bb50:	bd10      	pop	{r4, pc}
1000bb52:	46c0      	nop			; (mov r8, r8)
1000bb54:	0000ffff 	.word	0x0000ffff
1000bb58:	1000c9dd 	.word	0x1000c9dd
1000bb5c:	10010d64 	.word	0x10010d64
1000bb60:	1000fa99 	.word	0x1000fa99
1000bb64:	10012150 	.word	0x10012150
1000bb68:	1000f979 	.word	0x1000f979
1000bb6c:	10012178 	.word	0x10012178

1000bb70 <ble_paired_app_event>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *params)
{
1000bb70:	b510      	push	{r4, lr}
1000bb72:	0004      	movs	r4, r0
    DBG_LOG_DEV("Devices paired...");
1000bb74:	4806      	ldr	r0, [pc, #24]	; (1000bb90 <ble_paired_app_event+0x20>)
1000bb76:	4b07      	ldr	r3, [pc, #28]	; (1000bb94 <ble_paired_app_event+0x24>)
1000bb78:	4798      	blx	r3
1000bb7a:	4807      	ldr	r0, [pc, #28]	; (1000bb98 <ble_paired_app_event+0x28>)
1000bb7c:	4b07      	ldr	r3, [pc, #28]	; (1000bb9c <ble_paired_app_event+0x2c>)
1000bb7e:	4798      	blx	r3
    at_ble_status_t discovery_status = AT_BLE_FAILURE;
    at_ble_pair_done_t *pair_done_val;
    pair_done_val = (at_ble_pair_done_t *)params;

    discovery_status = sms_gateway_discover_services(pair_done_val->handle);
1000bb80:	8860      	ldrh	r0, [r4, #2]
1000bb82:	4b07      	ldr	r3, [pc, #28]	; (1000bba0 <ble_paired_app_event+0x30>)
1000bb84:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_PAIRED;
1000bb86:	2203      	movs	r2, #3
1000bb88:	4b06      	ldr	r3, [pc, #24]	; (1000bba4 <ble_paired_app_event+0x34>)
1000bb8a:	701a      	strb	r2, [r3, #0]

    return discovery_status;
}
1000bb8c:	bd10      	pop	{r4, pc}
1000bb8e:	46c0      	nop			; (mov r8, r8)
1000bb90:	10010d64 	.word	0x10010d64
1000bb94:	1000fa99 	.word	0x1000fa99
1000bb98:	100121a0 	.word	0x100121a0
1000bb9c:	1000f979 	.word	0x1000f979
1000bba0:	1000bb25 	.word	0x1000bb25
1000bba4:	10012536 	.word	0x10012536

1000bba8 <main>:
{
    app_state = SMS_RUNNING;
}

int main(void)
{
1000bba8:	b570      	push	{r4, r5, r6, lr}
1000bbaa:	b082      	sub	sp, #8
    app_state = SMS_STARTING;
1000bbac:	2200      	movs	r2, #0
1000bbae:	4b45      	ldr	r3, [pc, #276]	; (1000bcc4 <main+0x11c>)
1000bbb0:	701a      	strb	r2, [r3, #0]

    platform_driver_init();
1000bbb2:	4b45      	ldr	r3, [pc, #276]	; (1000bcc8 <main+0x120>)
1000bbb4:	4798      	blx	r3
    acquire_sleep_lock();
1000bbb6:	4b45      	ldr	r3, [pc, #276]	; (1000bccc <main+0x124>)
1000bbb8:	4798      	blx	r3

    /* Initialize serial console */
    serial_console_init();
1000bbba:	4b45      	ldr	r3, [pc, #276]	; (1000bcd0 <main+0x128>)
1000bbbc:	4798      	blx	r3
    //hw_timer_init();
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
    
    /* button initialization */
    button_init(button_cb);
1000bbbe:	4845      	ldr	r0, [pc, #276]	; (1000bcd4 <main+0x12c>)
1000bbc0:	4b45      	ldr	r3, [pc, #276]	; (1000bcd8 <main+0x130>)
1000bbc2:	4798      	blx	r3
}

static void sms_gpio_init(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000bbc4:	ac01      	add	r4, sp, #4
1000bbc6:	0020      	movs	r0, r4
1000bbc8:	4b44      	ldr	r3, [pc, #272]	; (1000bcdc <main+0x134>)
1000bbca:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000bbcc:	2301      	movs	r3, #1
1000bbce:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(dbg_gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000bbd0:	4b43      	ldr	r3, [pc, #268]	; (1000bce0 <main+0x138>)
1000bbd2:	7818      	ldrb	r0, [r3, #0]
1000bbd4:	0021      	movs	r1, r4
1000bbd6:	4b43      	ldr	r3, [pc, #268]	; (1000bce4 <main+0x13c>)
1000bbd8:	4798      	blx	r3
1000bbda:	2800      	cmp	r0, #0
1000bbdc:	d005      	beq.n	1000bbea <main+0x42>
        DBG_LOG("Problem while setting gpio pin");
1000bbde:	4842      	ldr	r0, [pc, #264]	; (1000bce8 <main+0x140>)
1000bbe0:	4b42      	ldr	r3, [pc, #264]	; (1000bcec <main+0x144>)
1000bbe2:	4798      	blx	r3
1000bbe4:	4842      	ldr	r0, [pc, #264]	; (1000bcf0 <main+0x148>)
1000bbe6:	4b43      	ldr	r3, [pc, #268]	; (1000bcf4 <main+0x14c>)
1000bbe8:	4798      	blx	r3
    }
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
1000bbea:	4b43      	ldr	r3, [pc, #268]	; (1000bcf8 <main+0x150>)
1000bbec:	7819      	ldrb	r1, [r3, #0]
1000bbee:	b2c9      	uxtb	r1, r1
1000bbf0:	4b3b      	ldr	r3, [pc, #236]	; (1000bce0 <main+0x138>)
1000bbf2:	7818      	ldrb	r0, [r3, #0]
1000bbf4:	4b41      	ldr	r3, [pc, #260]	; (1000bcfc <main+0x154>)
1000bbf6:	4798      	blx	r3
    /* button initialization */
    button_init(button_cb);

    sms_gpio_init();
    
    hw_timer_register_callback(timer_callback_fn);
1000bbf8:	4841      	ldr	r0, [pc, #260]	; (1000bd00 <main+0x158>)
1000bbfa:	4b42      	ldr	r3, [pc, #264]	; (1000bd04 <main+0x15c>)
1000bbfc:	4798      	blx	r3

    DBG_LOG("Initializing BLE Application");
1000bbfe:	483a      	ldr	r0, [pc, #232]	; (1000bce8 <main+0x140>)
1000bc00:	4b3a      	ldr	r3, [pc, #232]	; (1000bcec <main+0x144>)
1000bc02:	4798      	blx	r3
1000bc04:	4840      	ldr	r0, [pc, #256]	; (1000bd08 <main+0x160>)
1000bc06:	4b3b      	ldr	r3, [pc, #236]	; (1000bcf4 <main+0x14c>)
1000bc08:	4798      	blx	r3
    
    /* initialize the BLE chip and Set the Device Address */
    ble_device_init(NULL);
1000bc0a:	2000      	movs	r0, #0
1000bc0c:	4b3f      	ldr	r3, [pc, #252]	; (1000bd0c <main+0x164>)
1000bc0e:	4798      	blx	r3

    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_gateway_app_gap_cb);
1000bc10:	4a3f      	ldr	r2, [pc, #252]	; (1000bd10 <main+0x168>)
1000bc12:	2100      	movs	r1, #0
1000bc14:	2000      	movs	r0, #0
1000bc16:	4c3f      	ldr	r4, [pc, #252]	; (1000bd14 <main+0x16c>)
1000bc18:	47a0      	blx	r4
    

    /* Register callbacks for GATT CLIENT related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_CLIENT_EVENT_TYPE, sms_gateway_app_gatt_client_cb);
1000bc1a:	4a3f      	ldr	r2, [pc, #252]	; (1000bd18 <main+0x170>)
1000bc1c:	2101      	movs	r1, #1
1000bc1e:	2000      	movs	r0, #0
1000bc20:	47a0      	blx	r4
    
    //while(app_state != SMS_INT_BUTTON2);;
    //
    //app_state = SMS_RUNNING;

    sms_gateway_init();
1000bc22:	4b3e      	ldr	r3, [pc, #248]	; (1000bd1c <main+0x174>)
1000bc24:	4798      	blx	r3

    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
1000bc26:	483e      	ldr	r0, [pc, #248]	; (1000bd20 <main+0x178>)
1000bc28:	4b3e      	ldr	r3, [pc, #248]	; (1000bd24 <main+0x17c>)
1000bc2a:	4798      	blx	r3
    register_hw_timer_stop_func_cb(hw_timer_stop);
1000bc2c:	483e      	ldr	r0, [pc, #248]	; (1000bd28 <main+0x180>)
1000bc2e:	4b3f      	ldr	r3, [pc, #252]	; (1000bd2c <main+0x184>)
1000bc30:	4798      	blx	r3
    
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000bc32:	4d3f      	ldr	r5, [pc, #252]	; (1000bd30 <main+0x188>)
        
        switch(app_state) {
1000bc34:	4c23      	ldr	r4, [pc, #140]	; (1000bcc4 <main+0x11c>)
1000bc36:	4e3f      	ldr	r6, [pc, #252]	; (1000bd34 <main+0x18c>)
    
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000bc38:	2001      	movs	r0, #1
1000bc3a:	4240      	negs	r0, r0
1000bc3c:	47a8      	blx	r5
        
        switch(app_state) {
1000bc3e:	7823      	ldrb	r3, [r4, #0]
1000bc40:	b2db      	uxtb	r3, r3
1000bc42:	2b07      	cmp	r3, #7
1000bc44:	d8f8      	bhi.n	1000bc38 <main+0x90>
1000bc46:	009b      	lsls	r3, r3, #2
1000bc48:	58f3      	ldr	r3, [r6, r3]
1000bc4a:	469f      	mov	pc, r3

            case SMS_CONNECTING:
            break;

            case SMS_RUNNING:
            DBG_LOG_DEV("SMS_RUNNING...");
1000bc4c:	4826      	ldr	r0, [pc, #152]	; (1000bce8 <main+0x140>)
1000bc4e:	4b27      	ldr	r3, [pc, #156]	; (1000bcec <main+0x144>)
1000bc50:	4798      	blx	r3
1000bc52:	4839      	ldr	r0, [pc, #228]	; (1000bd38 <main+0x190>)
1000bc54:	4b27      	ldr	r3, [pc, #156]	; (1000bcf4 <main+0x14c>)
1000bc56:	4798      	blx	r3
            break;
1000bc58:	e7ee      	b.n	1000bc38 <main+0x90>

            case SMS_DISCONNECTED:
            DBG_LOG_DEV("SMS_DISCONNECTED...");
1000bc5a:	4823      	ldr	r0, [pc, #140]	; (1000bce8 <main+0x140>)
1000bc5c:	4b23      	ldr	r3, [pc, #140]	; (1000bcec <main+0x144>)
1000bc5e:	4798      	blx	r3
1000bc60:	4836      	ldr	r0, [pc, #216]	; (1000bd3c <main+0x194>)
1000bc62:	4b24      	ldr	r3, [pc, #144]	; (1000bcf4 <main+0x14c>)
1000bc64:	4798      	blx	r3
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
}

static void sms_disconnected_fn(void)
{
    app_state = SMS_RUNNING;
1000bc66:	2202      	movs	r2, #2
1000bc68:	4b16      	ldr	r3, [pc, #88]	; (1000bcc4 <main+0x11c>)
1000bc6a:	701a      	strb	r2, [r3, #0]
1000bc6c:	e7e4      	b.n	1000bc38 <main+0x90>
            DBG_LOG_DEV("SMS_DISCONNECTED...");
            sms_disconnected_fn();
            break;

            case SMS_INT_BUTTON1:
            DBG_LOG_DEV("SMS_INT_BUTTON1...");
1000bc6e:	481e      	ldr	r0, [pc, #120]	; (1000bce8 <main+0x140>)
1000bc70:	4b1e      	ldr	r3, [pc, #120]	; (1000bcec <main+0x144>)
1000bc72:	4798      	blx	r3
1000bc74:	4832      	ldr	r0, [pc, #200]	; (1000bd40 <main+0x198>)
1000bc76:	4b1f      	ldr	r3, [pc, #124]	; (1000bcf4 <main+0x14c>)
1000bc78:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_button1_fn(void)
{
    app_state = SMS_RUNNING;
1000bc7a:	2202      	movs	r2, #2
1000bc7c:	4b11      	ldr	r3, [pc, #68]	; (1000bcc4 <main+0x11c>)
1000bc7e:	701a      	strb	r2, [r3, #0]
1000bc80:	e7da      	b.n	1000bc38 <main+0x90>
            DBG_LOG_DEV("SMS_INT_BUTTON1...");
            sms_int_button1_fn();
            break;

            case SMS_INT_BUTTON2:
            DBG_LOG_DEV("SMS_INT_BUTTON2...");
1000bc82:	4819      	ldr	r0, [pc, #100]	; (1000bce8 <main+0x140>)
1000bc84:	4b19      	ldr	r3, [pc, #100]	; (1000bcec <main+0x144>)
1000bc86:	4798      	blx	r3
1000bc88:	482e      	ldr	r0, [pc, #184]	; (1000bd44 <main+0x19c>)
1000bc8a:	4b1a      	ldr	r3, [pc, #104]	; (1000bcf4 <main+0x14c>)
1000bc8c:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_button2_fn(void)
{
    sms_gateway_init();
1000bc8e:	4b23      	ldr	r3, [pc, #140]	; (1000bd1c <main+0x174>)
1000bc90:	4798      	blx	r3
    app_state = SMS_RUNNING;
1000bc92:	2202      	movs	r2, #2
1000bc94:	4b0b      	ldr	r3, [pc, #44]	; (1000bcc4 <main+0x11c>)
1000bc96:	701a      	strb	r2, [r3, #0]
1000bc98:	e7ce      	b.n	1000bc38 <main+0x90>
            DBG_LOG_DEV("SMS_INT_BUTTON2...");
            sms_int_button2_fn();
            break;

            case SMS_INT_TIMER1:
            DBG_LOG_DEV("SMS_INT_TIMER1...");
1000bc9a:	4813      	ldr	r0, [pc, #76]	; (1000bce8 <main+0x140>)
1000bc9c:	4b13      	ldr	r3, [pc, #76]	; (1000bcec <main+0x144>)
1000bc9e:	4798      	blx	r3
1000bca0:	4829      	ldr	r0, [pc, #164]	; (1000bd48 <main+0x1a0>)
1000bca2:	4b14      	ldr	r3, [pc, #80]	; (1000bcf4 <main+0x14c>)
1000bca4:	4798      	blx	r3
    //DBG_LOG("Unable to connect with device");
    //}
    //} else if(sms_gateway_connection_flag == SMS_DEV_SERVICE_FOUND) {
    //hw_timer_start(PXP_RSSI_UPDATE_INTERVAL);
    //}
    app_state = SMS_RUNNING;
1000bca6:	2202      	movs	r2, #2
1000bca8:	4b06      	ldr	r3, [pc, #24]	; (1000bcc4 <main+0x11c>)
1000bcaa:	701a      	strb	r2, [r3, #0]
1000bcac:	e7c4      	b.n	1000bc38 <main+0x90>
            DBG_LOG_DEV("SMS_INT_TIMER1...");
            sms_int_timer1_fn();
            break;

            case SMS_INT_TIMER2:
            DBG_LOG_DEV("SMS_INT_TIMER2...");
1000bcae:	480e      	ldr	r0, [pc, #56]	; (1000bce8 <main+0x140>)
1000bcb0:	4b0e      	ldr	r3, [pc, #56]	; (1000bcec <main+0x144>)
1000bcb2:	4798      	blx	r3
1000bcb4:	4825      	ldr	r0, [pc, #148]	; (1000bd4c <main+0x1a4>)
1000bcb6:	4b0f      	ldr	r3, [pc, #60]	; (1000bcf4 <main+0x14c>)
1000bcb8:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_timer2_fn(void)
{
    app_state = SMS_RUNNING;
1000bcba:	2202      	movs	r2, #2
1000bcbc:	4b01      	ldr	r3, [pc, #4]	; (1000bcc4 <main+0x11c>)
1000bcbe:	701a      	strb	r2, [r3, #0]
1000bcc0:	e7ba      	b.n	1000bc38 <main+0x90>
1000bcc2:	46c0      	nop			; (mov r8, r8)
1000bcc4:	100132bc 	.word	0x100132bc
1000bcc8:	1000aebd 	.word	0x1000aebd
1000bccc:	1000b3e5 	.word	0x1000b3e5
1000bcd0:	1000ab21 	.word	0x1000ab21
1000bcd4:	1000bac1 	.word	0x1000bac1
1000bcd8:	1000aa9d 	.word	0x1000aa9d
1000bcdc:	1000824d 	.word	0x1000824d
1000bce0:	100123a8 	.word	0x100123a8
1000bce4:	1000825d 	.word	0x1000825d
1000bce8:	10010d64 	.word	0x10010d64
1000bcec:	1000fa99 	.word	0x1000fa99
1000bcf0:	100121b4 	.word	0x100121b4
1000bcf4:	1000f979 	.word	0x1000f979
1000bcf8:	10012530 	.word	0x10012530
1000bcfc:	100083c5 	.word	0x100083c5
1000bd00:	1000b585 	.word	0x1000b585
1000bd04:	1000acc1 	.word	0x1000acc1
1000bd08:	100121d4 	.word	0x100121d4
1000bd0c:	1000a4b9 	.word	0x1000a4b9
1000bd10:	10011de0 	.word	0x10011de0
1000bd14:	1000a3e9 	.word	0x1000a3e9
1000bd18:	10012268 	.word	0x10012268
1000bd1c:	1000bae1 	.word	0x1000bae1
1000bd20:	1000acf5 	.word	0x1000acf5
1000bd24:	1000956d 	.word	0x1000956d
1000bd28:	1000ad21 	.word	0x1000ad21
1000bd2c:	10009579 	.word	0x10009579
1000bd30:	1000aa6d 	.word	0x1000aa6d
1000bd34:	10011dc0 	.word	0x10011dc0
1000bd38:	100121f4 	.word	0x100121f4
1000bd3c:	10012204 	.word	0x10012204
1000bd40:	10012218 	.word	0x10012218
1000bd44:	1001222c 	.word	0x1001222c
1000bd48:	10012240 	.word	0x10012240
1000bd4c:	10012254 	.word	0x10012254

1000bd50 <internal_event_post>:
1000bd50:	b570      	push	{r4, r5, r6, lr}
1000bd52:	4d0c      	ldr	r5, [pc, #48]	; (1000bd84 <internal_event_post+0x34>)
1000bd54:	682c      	ldr	r4, [r5, #0]
1000bd56:	2c00      	cmp	r4, #0
1000bd58:	d013      	beq.n	1000bd82 <internal_event_post+0x32>
1000bd5a:	6826      	ldr	r6, [r4, #0]
1000bd5c:	60e2      	str	r2, [r4, #12]
1000bd5e:	602e      	str	r6, [r5, #0]
1000bd60:	2500      	movs	r5, #0
1000bd62:	4a09      	ldr	r2, [pc, #36]	; (1000bd88 <internal_event_post+0x38>)
1000bd64:	8123      	strh	r3, [r4, #8]
1000bd66:	6813      	ldr	r3, [r2, #0]
1000bd68:	6025      	str	r5, [r4, #0]
1000bd6a:	80a0      	strh	r0, [r4, #4]
1000bd6c:	80e1      	strh	r1, [r4, #6]
1000bd6e:	42ab      	cmp	r3, r5
1000bd70:	d101      	bne.n	1000bd76 <internal_event_post+0x26>
1000bd72:	6014      	str	r4, [r2, #0]
1000bd74:	e005      	b.n	1000bd82 <internal_event_post+0x32>
1000bd76:	681a      	ldr	r2, [r3, #0]
1000bd78:	2a00      	cmp	r2, #0
1000bd7a:	d001      	beq.n	1000bd80 <internal_event_post+0x30>
1000bd7c:	1c13      	adds	r3, r2, #0
1000bd7e:	e7fa      	b.n	1000bd76 <internal_event_post+0x26>
1000bd80:	601c      	str	r4, [r3, #0]
1000bd82:	bd70      	pop	{r4, r5, r6, pc}
1000bd84:	100125dc 	.word	0x100125dc
1000bd88:	100125d8 	.word	0x100125d8

1000bd8c <internal_event_init>:
1000bd8c:	4b08      	ldr	r3, [pc, #32]	; (1000bdb0 <internal_event_init+0x24>)
1000bd8e:	2200      	movs	r2, #0
1000bd90:	1c19      	adds	r1, r3, #0
1000bd92:	b510      	push	{r4, lr}
1000bd94:	6818      	ldr	r0, [r3, #0]
1000bd96:	4b07      	ldr	r3, [pc, #28]	; (1000bdb4 <internal_event_init+0x28>)
1000bd98:	189c      	adds	r4, r3, r2
1000bd9a:	50d0      	str	r0, [r2, r3]
1000bd9c:	3210      	adds	r2, #16
1000bd9e:	1c20      	adds	r0, r4, #0
1000bda0:	2aa0      	cmp	r2, #160	; 0xa0
1000bda2:	d1f8      	bne.n	1000bd96 <internal_event_init+0xa>
1000bda4:	2200      	movs	r2, #0
1000bda6:	3390      	adds	r3, #144	; 0x90
1000bda8:	600b      	str	r3, [r1, #0]
1000bdaa:	4b03      	ldr	r3, [pc, #12]	; (1000bdb8 <internal_event_init+0x2c>)
1000bdac:	601a      	str	r2, [r3, #0]
1000bdae:	bd10      	pop	{r4, pc}
1000bdb0:	100125dc 	.word	0x100125dc
1000bdb4:	10012538 	.word	0x10012538
1000bdb8:	100125d8 	.word	0x100125d8

1000bdbc <special_events_handler>:
1000bdbc:	b538      	push	{r3, r4, r5, lr}
1000bdbe:	4c1b      	ldr	r4, [pc, #108]	; (1000be2c <special_events_handler+0x70>)
1000bdc0:	1c03      	adds	r3, r0, #0
1000bdc2:	8825      	ldrh	r5, [r4, #0]
1000bdc4:	1c08      	adds	r0, r1, #0
1000bdc6:	1c21      	adds	r1, r4, #0
1000bdc8:	429d      	cmp	r5, r3
1000bdca:	d107      	bne.n	1000bddc <special_events_handler+0x20>
1000bdcc:	88a5      	ldrh	r5, [r4, #4]
1000bdce:	4285      	cmp	r5, r0
1000bdd0:	d104      	bne.n	1000bddc <special_events_handler+0x20>
1000bdd2:	2301      	movs	r3, #1
1000bdd4:	425b      	negs	r3, r3
1000bdd6:	8023      	strh	r3, [r4, #0]
1000bdd8:	60a2      	str	r2, [r4, #8]
1000bdda:	e009      	b.n	1000bdf0 <special_events_handler+0x34>
1000bddc:	884c      	ldrh	r4, [r1, #2]
1000bdde:	429c      	cmp	r4, r3
1000bde0:	d10a      	bne.n	1000bdf8 <special_events_handler+0x3c>
1000bde2:	888c      	ldrh	r4, [r1, #4]
1000bde4:	4284      	cmp	r4, r0
1000bde6:	d107      	bne.n	1000bdf8 <special_events_handler+0x3c>
1000bde8:	2301      	movs	r3, #1
1000bdea:	425b      	negs	r3, r3
1000bdec:	804b      	strh	r3, [r1, #2]
1000bdee:	608a      	str	r2, [r1, #8]
1000bdf0:	4b0f      	ldr	r3, [pc, #60]	; (1000be30 <special_events_handler+0x74>)
1000bdf2:	4798      	blx	r3
1000bdf4:	2001      	movs	r0, #1
1000bdf6:	e017      	b.n	1000be28 <special_events_handler+0x6c>
1000bdf8:	490e      	ldr	r1, [pc, #56]	; (1000be34 <special_events_handler+0x78>)
1000bdfa:	428b      	cmp	r3, r1
1000bdfc:	d00e      	beq.n	1000be1c <special_events_handler+0x60>
1000bdfe:	490e      	ldr	r1, [pc, #56]	; (1000be38 <special_events_handler+0x7c>)
1000be00:	428b      	cmp	r3, r1
1000be02:	d007      	beq.n	1000be14 <special_events_handler+0x58>
1000be04:	490d      	ldr	r1, [pc, #52]	; (1000be3c <special_events_handler+0x80>)
1000be06:	2000      	movs	r0, #0
1000be08:	428b      	cmp	r3, r1
1000be0a:	d10d      	bne.n	1000be28 <special_events_handler+0x6c>
1000be0c:	1c10      	adds	r0, r2, #0
1000be0e:	4b0c      	ldr	r3, [pc, #48]	; (1000be40 <special_events_handler+0x84>)
1000be10:	4798      	blx	r3
1000be12:	e7ef      	b.n	1000bdf4 <special_events_handler+0x38>
1000be14:	1c11      	adds	r1, r2, #0
1000be16:	4b0b      	ldr	r3, [pc, #44]	; (1000be44 <special_events_handler+0x88>)
1000be18:	2200      	movs	r2, #0
1000be1a:	e002      	b.n	1000be22 <special_events_handler+0x66>
1000be1c:	1c11      	adds	r1, r2, #0
1000be1e:	2200      	movs	r2, #0
1000be20:	4b09      	ldr	r3, [pc, #36]	; (1000be48 <special_events_handler+0x8c>)
1000be22:	4798      	blx	r3
1000be24:	4243      	negs	r3, r0
1000be26:	4158      	adcs	r0, r3
1000be28:	bd38      	pop	{r3, r4, r5, pc}
1000be2a:	46c0      	nop			; (mov r8, r8)
1000be2c:	100132d4 	.word	0x100132d4
1000be30:	1000d025 	.word	0x1000d025
1000be34:	00000e13 	.word	0x00000e13
1000be38:	00000e15 	.word	0x00000e15
1000be3c:	00000e01 	.word	0x00000e01
1000be40:	1000d395 	.word	0x1000d395
1000be44:	1000d555 	.word	0x1000d555
1000be48:	1000d62d 	.word	0x1000d62d

1000be4c <at_ble_event_get>:
1000be4c:	2300      	movs	r3, #0
1000be4e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be50:	b085      	sub	sp, #20
1000be52:	9202      	str	r2, [sp, #8]
1000be54:	7003      	strb	r3, [r0, #0]
1000be56:	9b02      	ldr	r3, [sp, #8]
1000be58:	9001      	str	r0, [sp, #4]
1000be5a:	3b01      	subs	r3, #1
1000be5c:	1c0d      	adds	r5, r1, #0
1000be5e:	9303      	str	r3, [sp, #12]
1000be60:	3303      	adds	r3, #3
1000be62:	d802      	bhi.n	1000be6a <at_ble_event_get+0x1e>
1000be64:	9802      	ldr	r0, [sp, #8]
1000be66:	4bad      	ldr	r3, [pc, #692]	; (1000c11c <at_ble_event_get+0x2d0>)
1000be68:	4798      	blx	r3
1000be6a:	9b03      	ldr	r3, [sp, #12]
1000be6c:	4fac      	ldr	r7, [pc, #688]	; (1000c120 <at_ble_event_get+0x2d4>)
1000be6e:	2400      	movs	r4, #0
1000be70:	3303      	adds	r3, #3
1000be72:	d812      	bhi.n	1000be9a <at_ble_event_get+0x4e>
1000be74:	683b      	ldr	r3, [r7, #0]
1000be76:	2b00      	cmp	r3, #0
1000be78:	d112      	bne.n	1000bea0 <at_ble_event_get+0x54>
1000be7a:	2cd0      	cmp	r4, #208	; 0xd0
1000be7c:	d100      	bne.n	1000be80 <at_ble_event_get+0x34>
1000be7e:	e29c      	b.n	1000c3ba <at_ble_event_get+0x56e>
1000be80:	9802      	ldr	r0, [sp, #8]
1000be82:	4ba8      	ldr	r3, [pc, #672]	; (1000c124 <at_ble_event_get+0x2d8>)
1000be84:	4798      	blx	r3
1000be86:	1e04      	subs	r4, r0, #0
1000be88:	2c02      	cmp	r4, #2
1000be8a:	d1f3      	bne.n	1000be74 <at_ble_event_get+0x28>
1000be8c:	e025      	b.n	1000beda <at_ble_event_get+0x8e>
1000be8e:	9802      	ldr	r0, [sp, #8]
1000be90:	4ba4      	ldr	r3, [pc, #656]	; (1000c124 <at_ble_event_get+0x2d8>)
1000be92:	4798      	blx	r3
1000be94:	1e04      	subs	r4, r0, #0
1000be96:	2c02      	cmp	r4, #2
1000be98:	d01f      	beq.n	1000beda <at_ble_event_get+0x8e>
1000be9a:	683b      	ldr	r3, [r7, #0]
1000be9c:	2b00      	cmp	r3, #0
1000be9e:	d0f6      	beq.n	1000be8e <at_ble_event_get+0x42>
1000bea0:	2cd0      	cmp	r4, #208	; 0xd0
1000bea2:	d100      	bne.n	1000bea6 <at_ble_event_get+0x5a>
1000bea4:	e289      	b.n	1000c3ba <at_ble_event_get+0x56e>
1000bea6:	1ee3      	subs	r3, r4, #3
1000bea8:	1e5a      	subs	r2, r3, #1
1000beaa:	4193      	sbcs	r3, r2
1000beac:	6838      	ldr	r0, [r7, #0]
1000beae:	425b      	negs	r3, r3
1000beb0:	401c      	ands	r4, r3
1000beb2:	2800      	cmp	r0, #0
1000beb4:	d100      	bne.n	1000beb8 <at_ble_event_get+0x6c>
1000beb6:	e286      	b.n	1000c3c6 <at_ble_event_get+0x57a>
1000beb8:	6803      	ldr	r3, [r0, #0]
1000beba:	68c1      	ldr	r1, [r0, #12]
1000bebc:	603b      	str	r3, [r7, #0]
1000bebe:	4f9a      	ldr	r7, [pc, #616]	; (1000c128 <at_ble_event_get+0x2dc>)
1000bec0:	88c2      	ldrh	r2, [r0, #6]
1000bec2:	683e      	ldr	r6, [r7, #0]
1000bec4:	8883      	ldrh	r3, [r0, #4]
1000bec6:	6006      	str	r6, [r0, #0]
1000bec8:	6038      	str	r0, [r7, #0]
1000beca:	2c00      	cmp	r4, #0
1000becc:	d112      	bne.n	1000bef4 <at_ble_event_get+0xa8>
1000bece:	4897      	ldr	r0, [pc, #604]	; (1000c12c <at_ble_event_get+0x2e0>)
1000bed0:	4283      	cmp	r3, r0
1000bed2:	d008      	beq.n	1000bee6 <at_ble_event_get+0x9a>
1000bed4:	4896      	ldr	r0, [pc, #600]	; (1000c130 <at_ble_event_get+0x2e4>)
1000bed6:	4283      	cmp	r3, r0
1000bed8:	d11d      	bne.n	1000bf16 <at_ble_event_get+0xca>
1000beda:	233a      	movs	r3, #58	; 0x3a
1000bedc:	2400      	movs	r4, #0
1000bede:	9a01      	ldr	r2, [sp, #4]
1000bee0:	1c25      	adds	r5, r4, #0
1000bee2:	7013      	strb	r3, [r2, #0]
1000bee4:	e006      	b.n	1000bef4 <at_ble_event_get+0xa8>
1000bee6:	429a      	cmp	r2, r3
1000bee8:	d000      	beq.n	1000beec <at_ble_event_get+0xa0>
1000beea:	e268      	b.n	1000c3be <at_ble_event_get+0x572>
1000beec:	2338      	movs	r3, #56	; 0x38
1000beee:	9a01      	ldr	r2, [sp, #4]
1000bef0:	7013      	strb	r3, [r2, #0]
1000bef2:	6029      	str	r1, [r5, #0]
1000bef4:	9b01      	ldr	r3, [sp, #4]
1000bef6:	781b      	ldrb	r3, [r3, #0]
1000bef8:	2b3b      	cmp	r3, #59	; 0x3b
1000befa:	d003      	beq.n	1000bf04 <at_ble_event_get+0xb8>
1000befc:	9b03      	ldr	r3, [sp, #12]
1000befe:	3303      	adds	r3, #3
1000bf00:	d903      	bls.n	1000bf0a <at_ble_event_get+0xbe>
1000bf02:	e264      	b.n	1000c3ce <at_ble_event_get+0x582>
1000bf04:	2c00      	cmp	r4, #0
1000bf06:	d0b0      	beq.n	1000be6a <at_ble_event_get+0x1e>
1000bf08:	e7f8      	b.n	1000befc <at_ble_event_get+0xb0>
1000bf0a:	2cd0      	cmp	r4, #208	; 0xd0
1000bf0c:	d100      	bne.n	1000bf10 <at_ble_event_get+0xc4>
1000bf0e:	e25e      	b.n	1000c3ce <at_ble_event_get+0x582>
1000bf10:	4b88      	ldr	r3, [pc, #544]	; (1000c134 <at_ble_event_get+0x2e8>)
1000bf12:	4798      	blx	r3
1000bf14:	e25b      	b.n	1000c3ce <at_ble_event_get+0x582>
1000bf16:	2abb      	cmp	r2, #187	; 0xbb
1000bf18:	d123      	bne.n	1000bf62 <at_ble_event_get+0x116>
1000bf1a:	2bbb      	cmp	r3, #187	; 0xbb
1000bf1c:	d121      	bne.n	1000bf62 <at_ble_event_get+0x116>
1000bf1e:	80ac      	strh	r4, [r5, #4]
1000bf20:	788b      	ldrb	r3, [r1, #2]
1000bf22:	784a      	ldrb	r2, [r1, #1]
1000bf24:	021b      	lsls	r3, r3, #8
1000bf26:	78cf      	ldrb	r7, [r1, #3]
1000bf28:	7908      	ldrb	r0, [r1, #4]
1000bf2a:	4313      	orrs	r3, r2
1000bf2c:	794a      	ldrb	r2, [r1, #5]
1000bf2e:	4982      	ldr	r1, [pc, #520]	; (1000c138 <at_ble_event_get+0x2ec>)
1000bf30:	70af      	strb	r7, [r5, #2]
1000bf32:	802b      	strh	r3, [r5, #0]
1000bf34:	428b      	cmp	r3, r1
1000bf36:	d806      	bhi.n	1000bf46 <at_ble_event_get+0xfa>
1000bf38:	4a80      	ldr	r2, [pc, #512]	; (1000c13c <at_ble_event_get+0x2f0>)
1000bf3a:	4293      	cmp	r3, r2
1000bf3c:	d20b      	bcs.n	1000bf56 <at_ble_event_get+0x10a>
1000bf3e:	4a80      	ldr	r2, [pc, #512]	; (1000c140 <at_ble_event_get+0x2f4>)
1000bf40:	4293      	cmp	r3, r2
1000bf42:	d008      	beq.n	1000bf56 <at_ble_event_get+0x10a>
1000bf44:	e009      	b.n	1000bf5a <at_ble_event_get+0x10e>
1000bf46:	497f      	ldr	r1, [pc, #508]	; (1000c144 <at_ble_event_get+0x2f8>)
1000bf48:	428b      	cmp	r3, r1
1000bf4a:	d106      	bne.n	1000bf5a <at_ble_event_get+0x10e>
1000bf4c:	0213      	lsls	r3, r2, #8
1000bf4e:	4303      	orrs	r3, r0
1000bf50:	80ab      	strh	r3, [r5, #4]
1000bf52:	2337      	movs	r3, #55	; 0x37
1000bf54:	e002      	b.n	1000bf5c <at_ble_event_get+0x110>
1000bf56:	2336      	movs	r3, #54	; 0x36
1000bf58:	e000      	b.n	1000bf5c <at_ble_event_get+0x110>
1000bf5a:	2300      	movs	r3, #0
1000bf5c:	9a01      	ldr	r2, [sp, #4]
1000bf5e:	7013      	strb	r3, [r2, #0]
1000bf60:	e7c8      	b.n	1000bef4 <at_ble_event_get+0xa8>
1000bf62:	4879      	ldr	r0, [pc, #484]	; (1000c148 <at_ble_event_get+0x2fc>)
1000bf64:	4283      	cmp	r3, r0
1000bf66:	d100      	bne.n	1000bf6a <at_ble_event_get+0x11e>
1000bf68:	e14c      	b.n	1000c204 <at_ble_event_get+0x3b8>
1000bf6a:	d864      	bhi.n	1000c036 <at_ble_event_get+0x1ea>
1000bf6c:	4877      	ldr	r0, [pc, #476]	; (1000c14c <at_ble_event_get+0x300>)
1000bf6e:	4283      	cmp	r3, r0
1000bf70:	d100      	bne.n	1000bf74 <at_ble_event_get+0x128>
1000bf72:	e1cd      	b.n	1000c310 <at_ble_event_get+0x4c4>
1000bf74:	d82f      	bhi.n	1000bfd6 <at_ble_event_get+0x18a>
1000bf76:	4876      	ldr	r0, [pc, #472]	; (1000c150 <at_ble_event_get+0x304>)
1000bf78:	4283      	cmp	r3, r0
1000bf7a:	d100      	bne.n	1000bf7e <at_ble_event_get+0x132>
1000bf7c:	e1d6      	b.n	1000c32c <at_ble_event_get+0x4e0>
1000bf7e:	d813      	bhi.n	1000bfa8 <at_ble_event_get+0x15c>
1000bf80:	4874      	ldr	r0, [pc, #464]	; (1000c154 <at_ble_event_get+0x308>)
1000bf82:	4283      	cmp	r3, r0
1000bf84:	d100      	bne.n	1000bf88 <at_ble_event_get+0x13c>
1000bf86:	e19f      	b.n	1000c2c8 <at_ble_event_get+0x47c>
1000bf88:	d804      	bhi.n	1000bf94 <at_ble_event_get+0x148>
1000bf8a:	2438      	movs	r4, #56	; 0x38
1000bf8c:	42a3      	cmp	r3, r4
1000bf8e:	d100      	bne.n	1000bf92 <at_ble_event_get+0x146>
1000bf90:	e20f      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000bf92:	e0b6      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000bf94:	4870      	ldr	r0, [pc, #448]	; (1000c158 <at_ble_event_get+0x30c>)
1000bf96:	4283      	cmp	r3, r0
1000bf98:	d100      	bne.n	1000bf9c <at_ble_event_get+0x150>
1000bf9a:	e19b      	b.n	1000c2d4 <at_ble_event_get+0x488>
1000bf9c:	30fe      	adds	r0, #254	; 0xfe
1000bf9e:	30ff      	adds	r0, #255	; 0xff
1000bfa0:	4283      	cmp	r3, r0
1000bfa2:	d100      	bne.n	1000bfa6 <at_ble_event_get+0x15a>
1000bfa4:	e1c8      	b.n	1000c338 <at_ble_event_get+0x4ec>
1000bfa6:	e0ac      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000bfa8:	486c      	ldr	r0, [pc, #432]	; (1000c15c <at_ble_event_get+0x310>)
1000bfaa:	4283      	cmp	r3, r0
1000bfac:	d100      	bne.n	1000bfb0 <at_ble_event_get+0x164>
1000bfae:	e1a3      	b.n	1000c2f8 <at_ble_event_get+0x4ac>
1000bfb0:	d808      	bhi.n	1000bfc4 <at_ble_event_get+0x178>
1000bfb2:	486b      	ldr	r0, [pc, #428]	; (1000c160 <at_ble_event_get+0x314>)
1000bfb4:	4283      	cmp	r3, r0
1000bfb6:	d100      	bne.n	1000bfba <at_ble_event_get+0x16e>
1000bfb8:	e192      	b.n	1000c2e0 <at_ble_event_get+0x494>
1000bfba:	486a      	ldr	r0, [pc, #424]	; (1000c164 <at_ble_event_get+0x318>)
1000bfbc:	4283      	cmp	r3, r0
1000bfbe:	d100      	bne.n	1000bfc2 <at_ble_event_get+0x176>
1000bfc0:	e194      	b.n	1000c2ec <at_ble_event_get+0x4a0>
1000bfc2:	e09e      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000bfc4:	4868      	ldr	r0, [pc, #416]	; (1000c168 <at_ble_event_get+0x31c>)
1000bfc6:	4283      	cmp	r3, r0
1000bfc8:	d100      	bne.n	1000bfcc <at_ble_event_get+0x180>
1000bfca:	e19b      	b.n	1000c304 <at_ble_event_get+0x4b8>
1000bfcc:	4867      	ldr	r0, [pc, #412]	; (1000c16c <at_ble_event_get+0x320>)
1000bfce:	4283      	cmp	r3, r0
1000bfd0:	d100      	bne.n	1000bfd4 <at_ble_event_get+0x188>
1000bfd2:	e1c5      	b.n	1000c360 <at_ble_event_get+0x514>
1000bfd4:	e095      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000bfd6:	4866      	ldr	r0, [pc, #408]	; (1000c170 <at_ble_event_get+0x324>)
1000bfd8:	4283      	cmp	r3, r0
1000bfda:	d100      	bne.n	1000bfde <at_ble_event_get+0x192>
1000bfdc:	e1ba      	b.n	1000c354 <at_ble_event_get+0x508>
1000bfde:	d812      	bhi.n	1000c006 <at_ble_event_get+0x1ba>
1000bfe0:	4864      	ldr	r0, [pc, #400]	; (1000c174 <at_ble_event_get+0x328>)
1000bfe2:	4283      	cmp	r3, r0
1000bfe4:	d100      	bne.n	1000bfe8 <at_ble_event_get+0x19c>
1000bfe6:	e1c1      	b.n	1000c36c <at_ble_event_get+0x520>
1000bfe8:	d804      	bhi.n	1000bff4 <at_ble_event_get+0x1a8>
1000bfea:	4863      	ldr	r0, [pc, #396]	; (1000c178 <at_ble_event_get+0x32c>)
1000bfec:	4283      	cmp	r3, r0
1000bfee:	d100      	bne.n	1000bff2 <at_ble_event_get+0x1a6>
1000bff0:	e192      	b.n	1000c318 <at_ble_event_get+0x4cc>
1000bff2:	e086      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000bff4:	4861      	ldr	r0, [pc, #388]	; (1000c17c <at_ble_event_get+0x330>)
1000bff6:	4283      	cmp	r3, r0
1000bff8:	d100      	bne.n	1000bffc <at_ble_event_get+0x1b0>
1000bffa:	e1a1      	b.n	1000c340 <at_ble_event_get+0x4f4>
1000bffc:	4860      	ldr	r0, [pc, #384]	; (1000c180 <at_ble_event_get+0x334>)
1000bffe:	4283      	cmp	r3, r0
1000c000:	d100      	bne.n	1000c004 <at_ble_event_get+0x1b8>
1000c002:	e1a3      	b.n	1000c34c <at_ble_event_get+0x500>
1000c004:	e07d      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c006:	4a5f      	ldr	r2, [pc, #380]	; (1000c184 <at_ble_event_get+0x338>)
1000c008:	4293      	cmp	r3, r2
1000c00a:	d100      	bne.n	1000c00e <at_ble_event_get+0x1c2>
1000c00c:	e07f      	b.n	1000c10e <at_ble_event_get+0x2c2>
1000c00e:	d808      	bhi.n	1000c022 <at_ble_event_get+0x1d6>
1000c010:	3a08      	subs	r2, #8
1000c012:	4293      	cmp	r3, r2
1000c014:	d077      	beq.n	1000c106 <at_ble_event_get+0x2ba>
1000c016:	4a5c      	ldr	r2, [pc, #368]	; (1000c188 <at_ble_event_get+0x33c>)
1000c018:	2439      	movs	r4, #57	; 0x39
1000c01a:	4293      	cmp	r3, r2
1000c01c:	d100      	bne.n	1000c020 <at_ble_event_get+0x1d4>
1000c01e:	e1c8      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c020:	e06f      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c022:	22d1      	movs	r2, #209	; 0xd1
1000c024:	0112      	lsls	r2, r2, #4
1000c026:	4293      	cmp	r3, r2
1000c028:	d100      	bne.n	1000c02c <at_ble_event_get+0x1e0>
1000c02a:	e0df      	b.n	1000c1ec <at_ble_event_get+0x3a0>
1000c02c:	4a57      	ldr	r2, [pc, #348]	; (1000c18c <at_ble_event_get+0x340>)
1000c02e:	4293      	cmp	r3, r2
1000c030:	d100      	bne.n	1000c034 <at_ble_event_get+0x1e8>
1000c032:	e0e1      	b.n	1000c1f8 <at_ble_event_get+0x3ac>
1000c034:	e065      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c036:	4856      	ldr	r0, [pc, #344]	; (1000c190 <at_ble_event_get+0x344>)
1000c038:	4283      	cmp	r3, r0
1000c03a:	d100      	bne.n	1000c03e <at_ble_event_get+0x1f2>
1000c03c:	e118      	b.n	1000c270 <at_ble_event_get+0x424>
1000c03e:	d82e      	bhi.n	1000c09e <at_ble_event_get+0x252>
1000c040:	4854      	ldr	r0, [pc, #336]	; (1000c194 <at_ble_event_get+0x348>)
1000c042:	4283      	cmp	r3, r0
1000c044:	d100      	bne.n	1000c048 <at_ble_event_get+0x1fc>
1000c046:	e13b      	b.n	1000c2c0 <at_ble_event_get+0x474>
1000c048:	d812      	bhi.n	1000c070 <at_ble_event_get+0x224>
1000c04a:	4853      	ldr	r0, [pc, #332]	; (1000c198 <at_ble_event_get+0x34c>)
1000c04c:	4283      	cmp	r3, r0
1000c04e:	d100      	bne.n	1000c052 <at_ble_event_get+0x206>
1000c050:	e0ee      	b.n	1000c230 <at_ble_event_get+0x3e4>
1000c052:	d804      	bhi.n	1000c05e <at_ble_event_get+0x212>
1000c054:	3803      	subs	r0, #3
1000c056:	4283      	cmp	r3, r0
1000c058:	d100      	bne.n	1000c05c <at_ble_event_get+0x210>
1000c05a:	e0d9      	b.n	1000c210 <at_ble_event_get+0x3c4>
1000c05c:	e051      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c05e:	484f      	ldr	r0, [pc, #316]	; (1000c19c <at_ble_event_get+0x350>)
1000c060:	4283      	cmp	r3, r0
1000c062:	d100      	bne.n	1000c066 <at_ble_event_get+0x21a>
1000c064:	e0d8      	b.n	1000c218 <at_ble_event_get+0x3cc>
1000c066:	484e      	ldr	r0, [pc, #312]	; (1000c1a0 <at_ble_event_get+0x354>)
1000c068:	4283      	cmp	r3, r0
1000c06a:	d100      	bne.n	1000c06e <at_ble_event_get+0x222>
1000c06c:	e0fb      	b.n	1000c266 <at_ble_event_get+0x41a>
1000c06e:	e048      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c070:	484c      	ldr	r0, [pc, #304]	; (1000c1a4 <at_ble_event_get+0x358>)
1000c072:	4283      	cmp	r3, r0
1000c074:	d100      	bne.n	1000c078 <at_ble_event_get+0x22c>
1000c076:	e0e1      	b.n	1000c23c <at_ble_event_get+0x3f0>
1000c078:	d808      	bhi.n	1000c08c <at_ble_event_get+0x240>
1000c07a:	484b      	ldr	r0, [pc, #300]	; (1000c1a8 <at_ble_event_get+0x35c>)
1000c07c:	4283      	cmp	r3, r0
1000c07e:	d100      	bne.n	1000c082 <at_ble_event_get+0x236>
1000c080:	e11a      	b.n	1000c2b8 <at_ble_event_get+0x46c>
1000c082:	484a      	ldr	r0, [pc, #296]	; (1000c1ac <at_ble_event_get+0x360>)
1000c084:	4283      	cmp	r3, r0
1000c086:	d100      	bne.n	1000c08a <at_ble_event_get+0x23e>
1000c088:	e0dd      	b.n	1000c246 <at_ble_event_get+0x3fa>
1000c08a:	e03a      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c08c:	4848      	ldr	r0, [pc, #288]	; (1000c1b0 <at_ble_event_get+0x364>)
1000c08e:	4283      	cmp	r3, r0
1000c090:	d100      	bne.n	1000c094 <at_ble_event_get+0x248>
1000c092:	e0dc      	b.n	1000c24e <at_ble_event_get+0x402>
1000c094:	4847      	ldr	r0, [pc, #284]	; (1000c1b4 <at_ble_event_get+0x368>)
1000c096:	4283      	cmp	r3, r0
1000c098:	d100      	bne.n	1000c09c <at_ble_event_get+0x250>
1000c09a:	e0de      	b.n	1000c25a <at_ble_event_get+0x40e>
1000c09c:	e031      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c09e:	4846      	ldr	r0, [pc, #280]	; (1000c1b8 <at_ble_event_get+0x36c>)
1000c0a0:	4283      	cmp	r3, r0
1000c0a2:	d100      	bne.n	1000c0a6 <at_ble_event_get+0x25a>
1000c0a4:	e0f6      	b.n	1000c294 <at_ble_event_get+0x448>
1000c0a6:	d816      	bhi.n	1000c0d6 <at_ble_event_get+0x28a>
1000c0a8:	4844      	ldr	r0, [pc, #272]	; (1000c1bc <at_ble_event_get+0x370>)
1000c0aa:	4283      	cmp	r3, r0
1000c0ac:	d100      	bne.n	1000c0b0 <at_ble_event_get+0x264>
1000c0ae:	e0f7      	b.n	1000c2a0 <at_ble_event_get+0x454>
1000c0b0:	d808      	bhi.n	1000c0c4 <at_ble_event_get+0x278>
1000c0b2:	4843      	ldr	r0, [pc, #268]	; (1000c1c0 <at_ble_event_get+0x374>)
1000c0b4:	4283      	cmp	r3, r0
1000c0b6:	d100      	bne.n	1000c0ba <at_ble_event_get+0x26e>
1000c0b8:	e0e0      	b.n	1000c27c <at_ble_event_get+0x430>
1000c0ba:	4842      	ldr	r0, [pc, #264]	; (1000c1c4 <at_ble_event_get+0x378>)
1000c0bc:	4283      	cmp	r3, r0
1000c0be:	d100      	bne.n	1000c0c2 <at_ble_event_get+0x276>
1000c0c0:	e0b0      	b.n	1000c224 <at_ble_event_get+0x3d8>
1000c0c2:	e01e      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c0c4:	4a40      	ldr	r2, [pc, #256]	; (1000c1c8 <at_ble_event_get+0x37c>)
1000c0c6:	4293      	cmp	r3, r2
1000c0c8:	d100      	bne.n	1000c0cc <at_ble_event_get+0x280>
1000c0ca:	e0dd      	b.n	1000c288 <at_ble_event_get+0x43c>
1000c0cc:	4a3f      	ldr	r2, [pc, #252]	; (1000c1cc <at_ble_event_get+0x380>)
1000c0ce:	4293      	cmp	r3, r2
1000c0d0:	d100      	bne.n	1000c0d4 <at_ble_event_get+0x288>
1000c0d2:	e0eb      	b.n	1000c2ac <at_ble_event_get+0x460>
1000c0d4:	e015      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c0d6:	483e      	ldr	r0, [pc, #248]	; (1000c1d0 <at_ble_event_get+0x384>)
1000c0d8:	4283      	cmp	r3, r0
1000c0da:	d100      	bne.n	1000c0de <at_ble_event_get+0x292>
1000c0dc:	e158      	b.n	1000c390 <at_ble_event_get+0x544>
1000c0de:	d808      	bhi.n	1000c0f2 <at_ble_event_get+0x2a6>
1000c0e0:	483c      	ldr	r0, [pc, #240]	; (1000c1d4 <at_ble_event_get+0x388>)
1000c0e2:	4283      	cmp	r3, r0
1000c0e4:	d100      	bne.n	1000c0e8 <at_ble_event_get+0x29c>
1000c0e6:	e147      	b.n	1000c378 <at_ble_event_get+0x52c>
1000c0e8:	483b      	ldr	r0, [pc, #236]	; (1000c1d8 <at_ble_event_get+0x38c>)
1000c0ea:	4283      	cmp	r3, r0
1000c0ec:	d100      	bne.n	1000c0f0 <at_ble_event_get+0x2a4>
1000c0ee:	e149      	b.n	1000c384 <at_ble_event_get+0x538>
1000c0f0:	e007      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c0f2:	483a      	ldr	r0, [pc, #232]	; (1000c1dc <at_ble_event_get+0x390>)
1000c0f4:	4283      	cmp	r3, r0
1000c0f6:	d100      	bne.n	1000c0fa <at_ble_event_get+0x2ae>
1000c0f8:	e150      	b.n	1000c39c <at_ble_event_get+0x550>
1000c0fa:	4839      	ldr	r0, [pc, #228]	; (1000c1e0 <at_ble_event_get+0x394>)
1000c0fc:	4283      	cmp	r3, r0
1000c0fe:	d100      	bne.n	1000c102 <at_ble_event_get+0x2b6>
1000c100:	e152      	b.n	1000c3a8 <at_ble_event_get+0x55c>
1000c102:	2400      	movs	r4, #0
1000c104:	e155      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c106:	1c08      	adds	r0, r1, #0
1000c108:	4b36      	ldr	r3, [pc, #216]	; (1000c1e4 <at_ble_event_get+0x398>)
1000c10a:	1c29      	adds	r1, r5, #0
1000c10c:	e07d      	b.n	1000c20a <at_ble_event_get+0x3be>
1000c10e:	1c08      	adds	r0, r1, #0
1000c110:	4b35      	ldr	r3, [pc, #212]	; (1000c1e8 <at_ble_event_get+0x39c>)
1000c112:	1c29      	adds	r1, r5, #0
1000c114:	4798      	blx	r3
1000c116:	2404      	movs	r4, #4
1000c118:	e14b      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c11a:	46c0      	nop			; (mov r8, r8)
1000c11c:	1000d05d 	.word	0x1000d05d
1000c120:	100125d8 	.word	0x100125d8
1000c124:	1000b181 	.word	0x1000b181
1000c128:	100125dc 	.word	0x100125dc
1000c12c:	0000ffff 	.word	0x0000ffff
1000c130:	0000fffe 	.word	0x0000fffe
1000c134:	1000d05f 	.word	0x1000d05f
1000c138:	0000201e 	.word	0x0000201e
1000c13c:	0000201d 	.word	0x0000201d
1000c140:	00000c03 	.word	0x00000c03
1000c144:	0000201f 	.word	0x0000201f
1000c148:	00000d1c 	.word	0x00000d1c
1000c14c:	00000c0c 	.word	0x00000c0c
1000c150:	00000c02 	.word	0x00000c02
1000c154:	00000a02 	.word	0x00000a02
1000c158:	00000a03 	.word	0x00000a03
1000c15c:	00000c06 	.word	0x00000c06
1000c160:	00000c04 	.word	0x00000c04
1000c164:	00000c05 	.word	0x00000c05
1000c168:	00000c07 	.word	0x00000c07
1000c16c:	00000c09 	.word	0x00000c09
1000c170:	00000c17 	.word	0x00000c17
1000c174:	00000c12 	.word	0x00000c12
1000c178:	00000c0d 	.word	0x00000c0d
1000c17c:	00000c13 	.word	0x00000c13
1000c180:	00000c15 	.word	0x00000c15
1000c184:	00000d08 	.word	0x00000d08
1000c188:	00000d01 	.word	0x00000d01
1000c18c:	00000d15 	.word	0x00000d15
1000c190:	00000e1b 	.word	0x00000e1b
1000c194:	00000e0f 	.word	0x00000e0f
1000c198:	00000e03 	.word	0x00000e03
1000c19c:	00000e06 	.word	0x00000e06
1000c1a0:	00000e0a 	.word	0x00000e0a
1000c1a4:	00000e15 	.word	0x00000e15
1000c1a8:	00000e11 	.word	0x00000e11
1000c1ac:	00000e13 	.word	0x00000e13
1000c1b0:	00000e17 	.word	0x00000e17
1000c1b4:	00000e19 	.word	0x00000e19
1000c1b8:	00000e27 	.word	0x00000e27
1000c1bc:	00000e21 	.word	0x00000e21
1000c1c0:	00000e1c 	.word	0x00000e1c
1000c1c4:	00000e1d 	.word	0x00000e1d
1000c1c8:	00000e22 	.word	0x00000e22
1000c1cc:	00000e25 	.word	0x00000e25
1000c1d0:	00001b05 	.word	0x00001b05
1000c1d4:	00001b01 	.word	0x00001b01
1000c1d8:	00001b03 	.word	0x00001b03
1000c1dc:	00001b06 	.word	0x00001b06
1000c1e0:	00001b08 	.word	0x00001b08
1000c1e4:	1000de49 	.word	0x1000de49
1000c1e8:	1000de2d 	.word	0x1000de2d
1000c1ec:	1c08      	adds	r0, r1, #0
1000c1ee:	4b79      	ldr	r3, [pc, #484]	; (1000c3d4 <at_ble_event_get+0x588>)
1000c1f0:	1c29      	adds	r1, r5, #0
1000c1f2:	4798      	blx	r3
1000c1f4:	2401      	movs	r4, #1
1000c1f6:	e0dc      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c1f8:	1c08      	adds	r0, r1, #0
1000c1fa:	4b77      	ldr	r3, [pc, #476]	; (1000c3d8 <at_ble_event_get+0x58c>)
1000c1fc:	1c29      	adds	r1, r5, #0
1000c1fe:	4798      	blx	r3
1000c200:	240f      	movs	r4, #15
1000c202:	e0d6      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c204:	1c08      	adds	r0, r1, #0
1000c206:	1c29      	adds	r1, r5, #0
1000c208:	4b74      	ldr	r3, [pc, #464]	; (1000c3dc <at_ble_event_get+0x590>)
1000c20a:	4798      	blx	r3
1000c20c:	1c04      	adds	r4, r0, #0
1000c20e:	e0d0      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c210:	1c10      	adds	r0, r2, #0
1000c212:	4b73      	ldr	r3, [pc, #460]	; (1000c3e0 <at_ble_event_get+0x594>)
1000c214:	1c2a      	adds	r2, r5, #0
1000c216:	e014      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c218:	1c10      	adds	r0, r2, #0
1000c21a:	4b72      	ldr	r3, [pc, #456]	; (1000c3e4 <at_ble_event_get+0x598>)
1000c21c:	1c2a      	adds	r2, r5, #0
1000c21e:	4798      	blx	r3
1000c220:	2411      	movs	r4, #17
1000c222:	e0c6      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c224:	1c10      	adds	r0, r2, #0
1000c226:	4b70      	ldr	r3, [pc, #448]	; (1000c3e8 <at_ble_event_get+0x59c>)
1000c228:	1c2a      	adds	r2, r5, #0
1000c22a:	4798      	blx	r3
1000c22c:	2412      	movs	r4, #18
1000c22e:	e0c0      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c230:	1c08      	adds	r0, r1, #0
1000c232:	4b6e      	ldr	r3, [pc, #440]	; (1000c3ec <at_ble_event_get+0x5a0>)
1000c234:	1c29      	adds	r1, r5, #0
1000c236:	4798      	blx	r3
1000c238:	2406      	movs	r4, #6
1000c23a:	e0ba      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c23c:	1c10      	adds	r0, r2, #0
1000c23e:	1c2a      	adds	r2, r5, #0
1000c240:	4b6b      	ldr	r3, [pc, #428]	; (1000c3f0 <at_ble_event_get+0x5a4>)
1000c242:	4798      	blx	r3
1000c244:	e7e2      	b.n	1000c20c <at_ble_event_get+0x3c0>
1000c246:	1c10      	adds	r0, r2, #0
1000c248:	4b6a      	ldr	r3, [pc, #424]	; (1000c3f4 <at_ble_event_get+0x5a8>)
1000c24a:	1c2a      	adds	r2, r5, #0
1000c24c:	e7f9      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c24e:	1c10      	adds	r0, r2, #0
1000c250:	4b69      	ldr	r3, [pc, #420]	; (1000c3f8 <at_ble_event_get+0x5ac>)
1000c252:	1c2a      	adds	r2, r5, #0
1000c254:	4798      	blx	r3
1000c256:	240d      	movs	r4, #13
1000c258:	e0ab      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c25a:	1c10      	adds	r0, r2, #0
1000c25c:	4b67      	ldr	r3, [pc, #412]	; (1000c3fc <at_ble_event_get+0x5b0>)
1000c25e:	1c2a      	adds	r2, r5, #0
1000c260:	4798      	blx	r3
1000c262:	240e      	movs	r4, #14
1000c264:	e0a5      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c266:	1c10      	adds	r0, r2, #0
1000c268:	4b65      	ldr	r3, [pc, #404]	; (1000c400 <at_ble_event_get+0x5b4>)
1000c26a:	1c2a      	adds	r2, r5, #0
1000c26c:	4798      	blx	r3
1000c26e:	e075      	b.n	1000c35c <at_ble_event_get+0x510>
1000c270:	1c10      	adds	r0, r2, #0
1000c272:	4b64      	ldr	r3, [pc, #400]	; (1000c404 <at_ble_event_get+0x5b8>)
1000c274:	1c2a      	adds	r2, r5, #0
1000c276:	4798      	blx	r3
1000c278:	240b      	movs	r4, #11
1000c27a:	e09a      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c27c:	1c10      	adds	r0, r2, #0
1000c27e:	4b62      	ldr	r3, [pc, #392]	; (1000c408 <at_ble_event_get+0x5bc>)
1000c280:	1c2a      	adds	r2, r5, #0
1000c282:	4798      	blx	r3
1000c284:	2410      	movs	r4, #16
1000c286:	e094      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c288:	1c08      	adds	r0, r1, #0
1000c28a:	4b60      	ldr	r3, [pc, #384]	; (1000c40c <at_ble_event_get+0x5c0>)
1000c28c:	1c29      	adds	r1, r5, #0
1000c28e:	4798      	blx	r3
1000c290:	2428      	movs	r4, #40	; 0x28
1000c292:	e08e      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c294:	1c08      	adds	r0, r1, #0
1000c296:	4b5e      	ldr	r3, [pc, #376]	; (1000c410 <at_ble_event_get+0x5c4>)
1000c298:	1c29      	adds	r1, r5, #0
1000c29a:	4798      	blx	r3
1000c29c:	2429      	movs	r4, #41	; 0x29
1000c29e:	e088      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2a0:	1c08      	adds	r0, r1, #0
1000c2a2:	4b5c      	ldr	r3, [pc, #368]	; (1000c414 <at_ble_event_get+0x5c8>)
1000c2a4:	1c29      	adds	r1, r5, #0
1000c2a6:	4798      	blx	r3
1000c2a8:	2427      	movs	r4, #39	; 0x27
1000c2aa:	e082      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2ac:	1c08      	adds	r0, r1, #0
1000c2ae:	4b5a      	ldr	r3, [pc, #360]	; (1000c418 <at_ble_event_get+0x5cc>)
1000c2b0:	1c29      	adds	r1, r5, #0
1000c2b2:	4798      	blx	r3
1000c2b4:	242a      	movs	r4, #42	; 0x2a
1000c2b6:	e07c      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2b8:	1c10      	adds	r0, r2, #0
1000c2ba:	4b58      	ldr	r3, [pc, #352]	; (1000c41c <at_ble_event_get+0x5d0>)
1000c2bc:	1c2a      	adds	r2, r5, #0
1000c2be:	e7c0      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c2c0:	1c10      	adds	r0, r2, #0
1000c2c2:	4b57      	ldr	r3, [pc, #348]	; (1000c420 <at_ble_event_get+0x5d4>)
1000c2c4:	1c2a      	adds	r2, r5, #0
1000c2c6:	e7bc      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c2c8:	1c08      	adds	r0, r1, #0
1000c2ca:	4b56      	ldr	r3, [pc, #344]	; (1000c424 <at_ble_event_get+0x5d8>)
1000c2cc:	1c29      	adds	r1, r5, #0
1000c2ce:	4798      	blx	r3
1000c2d0:	242b      	movs	r4, #43	; 0x2b
1000c2d2:	e06e      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2d4:	1c08      	adds	r0, r1, #0
1000c2d6:	4b54      	ldr	r3, [pc, #336]	; (1000c428 <at_ble_event_get+0x5dc>)
1000c2d8:	1c29      	adds	r1, r5, #0
1000c2da:	4798      	blx	r3
1000c2dc:	242c      	movs	r4, #44	; 0x2c
1000c2de:	e068      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2e0:	1c10      	adds	r0, r2, #0
1000c2e2:	4b52      	ldr	r3, [pc, #328]	; (1000c42c <at_ble_event_get+0x5e0>)
1000c2e4:	1c2a      	adds	r2, r5, #0
1000c2e6:	4798      	blx	r3
1000c2e8:	2413      	movs	r4, #19
1000c2ea:	e062      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2ec:	1c10      	adds	r0, r2, #0
1000c2ee:	4b50      	ldr	r3, [pc, #320]	; (1000c430 <at_ble_event_get+0x5e4>)
1000c2f0:	1c2a      	adds	r2, r5, #0
1000c2f2:	4798      	blx	r3
1000c2f4:	2414      	movs	r4, #20
1000c2f6:	e05c      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c2f8:	1c10      	adds	r0, r2, #0
1000c2fa:	4b4e      	ldr	r3, [pc, #312]	; (1000c434 <at_ble_event_get+0x5e8>)
1000c2fc:	1c2a      	adds	r2, r5, #0
1000c2fe:	4798      	blx	r3
1000c300:	2415      	movs	r4, #21
1000c302:	e056      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c304:	1c10      	adds	r0, r2, #0
1000c306:	4b4c      	ldr	r3, [pc, #304]	; (1000c438 <at_ble_event_get+0x5ec>)
1000c308:	1c2a      	adds	r2, r5, #0
1000c30a:	4798      	blx	r3
1000c30c:	2416      	movs	r4, #22
1000c30e:	e050      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c310:	1c10      	adds	r0, r2, #0
1000c312:	4b4a      	ldr	r3, [pc, #296]	; (1000c43c <at_ble_event_get+0x5f0>)
1000c314:	1c2a      	adds	r2, r5, #0
1000c316:	e794      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c318:	1c10      	adds	r0, r2, #0
1000c31a:	4b48      	ldr	r3, [pc, #288]	; (1000c43c <at_ble_event_get+0x5f0>)
1000c31c:	1c2a      	adds	r2, r5, #0
1000c31e:	4798      	blx	r3
1000c320:	88a9      	ldrh	r1, [r5, #4]
1000c322:	1c04      	adds	r4, r0, #0
1000c324:	4b46      	ldr	r3, [pc, #280]	; (1000c440 <at_ble_event_get+0x5f4>)
1000c326:	8828      	ldrh	r0, [r5, #0]
1000c328:	4798      	blx	r3
1000c32a:	e042      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c32c:	1c10      	adds	r0, r2, #0
1000c32e:	4b45      	ldr	r3, [pc, #276]	; (1000c444 <at_ble_event_get+0x5f8>)
1000c330:	1c2a      	adds	r2, r5, #0
1000c332:	4798      	blx	r3
1000c334:	2423      	movs	r4, #35	; 0x23
1000c336:	e03c      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c338:	1c10      	adds	r0, r2, #0
1000c33a:	4b43      	ldr	r3, [pc, #268]	; (1000c448 <at_ble_event_get+0x5fc>)
1000c33c:	1c2a      	adds	r2, r5, #0
1000c33e:	e780      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c340:	0a12      	lsrs	r2, r2, #8
1000c342:	1c08      	adds	r0, r1, #0
1000c344:	802a      	strh	r2, [r5, #0]
1000c346:	1c29      	adds	r1, r5, #0
1000c348:	4b40      	ldr	r3, [pc, #256]	; (1000c44c <at_ble_event_get+0x600>)
1000c34a:	e75e      	b.n	1000c20a <at_ble_event_get+0x3be>
1000c34c:	1c10      	adds	r0, r2, #0
1000c34e:	4b40      	ldr	r3, [pc, #256]	; (1000c450 <at_ble_event_get+0x604>)
1000c350:	1c2a      	adds	r2, r5, #0
1000c352:	e776      	b.n	1000c242 <at_ble_event_get+0x3f6>
1000c354:	1c08      	adds	r0, r1, #0
1000c356:	4b3f      	ldr	r3, [pc, #252]	; (1000c454 <at_ble_event_get+0x608>)
1000c358:	1c29      	adds	r1, r5, #0
1000c35a:	4798      	blx	r3
1000c35c:	243b      	movs	r4, #59	; 0x3b
1000c35e:	e028      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c360:	1c10      	adds	r0, r2, #0
1000c362:	4b3d      	ldr	r3, [pc, #244]	; (1000c458 <at_ble_event_get+0x60c>)
1000c364:	1c2a      	adds	r2, r5, #0
1000c366:	4798      	blx	r3
1000c368:	2418      	movs	r4, #24
1000c36a:	e022      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c36c:	1c10      	adds	r0, r2, #0
1000c36e:	4b3b      	ldr	r3, [pc, #236]	; (1000c45c <at_ble_event_get+0x610>)
1000c370:	1c2a      	adds	r2, r5, #0
1000c372:	4798      	blx	r3
1000c374:	2420      	movs	r4, #32
1000c376:	e01c      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c378:	1c10      	adds	r0, r2, #0
1000c37a:	4b39      	ldr	r3, [pc, #228]	; (1000c460 <at_ble_event_get+0x614>)
1000c37c:	1c2a      	adds	r2, r5, #0
1000c37e:	4798      	blx	r3
1000c380:	2433      	movs	r4, #51	; 0x33
1000c382:	e016      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c384:	1c10      	adds	r0, r2, #0
1000c386:	4b37      	ldr	r3, [pc, #220]	; (1000c464 <at_ble_event_get+0x618>)
1000c388:	1c2a      	adds	r2, r5, #0
1000c38a:	4798      	blx	r3
1000c38c:	2430      	movs	r4, #48	; 0x30
1000c38e:	e010      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c390:	1c10      	adds	r0, r2, #0
1000c392:	4b35      	ldr	r3, [pc, #212]	; (1000c468 <at_ble_event_get+0x61c>)
1000c394:	1c2a      	adds	r2, r5, #0
1000c396:	4798      	blx	r3
1000c398:	2434      	movs	r4, #52	; 0x34
1000c39a:	e00a      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c39c:	1c10      	adds	r0, r2, #0
1000c39e:	4b33      	ldr	r3, [pc, #204]	; (1000c46c <at_ble_event_get+0x620>)
1000c3a0:	1c2a      	adds	r2, r5, #0
1000c3a2:	4798      	blx	r3
1000c3a4:	2435      	movs	r4, #53	; 0x35
1000c3a6:	e004      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c3a8:	1c10      	adds	r0, r2, #0
1000c3aa:	4b31      	ldr	r3, [pc, #196]	; (1000c470 <at_ble_event_get+0x624>)
1000c3ac:	1c2a      	adds	r2, r5, #0
1000c3ae:	4798      	blx	r3
1000c3b0:	2432      	movs	r4, #50	; 0x32
1000c3b2:	9b01      	ldr	r3, [sp, #4]
1000c3b4:	701c      	strb	r4, [r3, #0]
1000c3b6:	2400      	movs	r4, #0
1000c3b8:	e59c      	b.n	1000bef4 <at_ble_event_get+0xa8>
1000c3ba:	24d0      	movs	r4, #208	; 0xd0
1000c3bc:	e59a      	b.n	1000bef4 <at_ble_event_get+0xa8>
1000c3be:	2abb      	cmp	r2, #187	; 0xbb
1000c3c0:	d000      	beq.n	1000c3c4 <at_ble_event_get+0x578>
1000c3c2:	e69e      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c3c4:	e7f5      	b.n	1000c3b2 <at_ble_event_get+0x566>
1000c3c6:	2c00      	cmp	r4, #0
1000c3c8:	d000      	beq.n	1000c3cc <at_ble_event_get+0x580>
1000c3ca:	e593      	b.n	1000bef4 <at_ble_event_get+0xa8>
1000c3cc:	e699      	b.n	1000c102 <at_ble_event_get+0x2b6>
1000c3ce:	1c20      	adds	r0, r4, #0
1000c3d0:	b005      	add	sp, #20
1000c3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c3d4:	1000e041 	.word	0x1000e041
1000c3d8:	1000e24d 	.word	0x1000e24d
1000c3dc:	1000e271 	.word	0x1000e271
1000c3e0:	1000d201 	.word	0x1000d201
1000c3e4:	1000da41 	.word	0x1000da41
1000c3e8:	1000dabd 	.word	0x1000dabd
1000c3ec:	1000d4b9 	.word	0x1000d4b9
1000c3f0:	1000d555 	.word	0x1000d555
1000c3f4:	1000d62d 	.word	0x1000d62d
1000c3f8:	1000d875 	.word	0x1000d875
1000c3fc:	1000d915 	.word	0x1000d915
1000c400:	1000d9cd 	.word	0x1000d9cd
1000c404:	1000d9f5 	.word	0x1000d9f5
1000c408:	1000da0b 	.word	0x1000da0b
1000c40c:	1000dad5 	.word	0x1000dad5
1000c410:	1000db03 	.word	0x1000db03
1000c414:	1000db19 	.word	0x1000db19
1000c418:	1000db43 	.word	0x1000db43
1000c41c:	1000d971 	.word	0x1000d971
1000c420:	1000d99b 	.word	0x1000d99b
1000c424:	1000cc99 	.word	0x1000cc99
1000c428:	1000ccc5 	.word	0x1000ccc5
1000c42c:	1000e4a9 	.word	0x1000e4a9
1000c430:	1000e4e5 	.word	0x1000e4e5
1000c434:	1000e52d 	.word	0x1000e52d
1000c438:	1000e571 	.word	0x1000e571
1000c43c:	1000e5a5 	.word	0x1000e5a5
1000c440:	1000e469 	.word	0x1000e469
1000c444:	1000e671 	.word	0x1000e671
1000c448:	1000e5f9 	.word	0x1000e5f9
1000c44c:	1000cbf1 	.word	0x1000cbf1
1000c450:	1000cc5d 	.word	0x1000cc5d
1000c454:	1000cc21 	.word	0x1000cc21
1000c458:	1000e681 	.word	0x1000e681
1000c45c:	1000e6c1 	.word	0x1000e6c1
1000c460:	1000e80d 	.word	0x1000e80d
1000c464:	1000e817 	.word	0x1000e817
1000c468:	1000e81d 	.word	0x1000e81d
1000c46c:	1000e823 	.word	0x1000e823
1000c470:	1000e82f 	.word	0x1000e82f

1000c474 <internal_event_flush>:
1000c474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c476:	490e      	ldr	r1, [pc, #56]	; (1000c4b0 <internal_event_flush+0x3c>)
1000c478:	2400      	movs	r4, #0
1000c47a:	680b      	ldr	r3, [r1, #0]
1000c47c:	1c0f      	adds	r7, r1, #0
1000c47e:	1c1e      	adds	r6, r3, #0
1000c480:	4a0c      	ldr	r2, [pc, #48]	; (1000c4b4 <internal_event_flush+0x40>)
1000c482:	6815      	ldr	r5, [r2, #0]
1000c484:	9201      	str	r2, [sp, #4]
1000c486:	2b00      	cmp	r3, #0
1000c488:	d00e      	beq.n	1000c4a8 <internal_event_flush+0x34>
1000c48a:	889a      	ldrh	r2, [r3, #4]
1000c48c:	6819      	ldr	r1, [r3, #0]
1000c48e:	4282      	cmp	r2, r0
1000c490:	d107      	bne.n	1000c4a2 <internal_event_flush+0x2e>
1000c492:	2c00      	cmp	r4, #0
1000c494:	d001      	beq.n	1000c49a <internal_event_flush+0x26>
1000c496:	6021      	str	r1, [r4, #0]
1000c498:	e000      	b.n	1000c49c <internal_event_flush+0x28>
1000c49a:	1c0e      	adds	r6, r1, #0
1000c49c:	601d      	str	r5, [r3, #0]
1000c49e:	1c1d      	adds	r5, r3, #0
1000c4a0:	1c23      	adds	r3, r4, #0
1000c4a2:	1c1c      	adds	r4, r3, #0
1000c4a4:	1c0b      	adds	r3, r1, #0
1000c4a6:	e7ee      	b.n	1000c486 <internal_event_flush+0x12>
1000c4a8:	9b01      	ldr	r3, [sp, #4]
1000c4aa:	603e      	str	r6, [r7, #0]
1000c4ac:	601d      	str	r5, [r3, #0]
1000c4ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c4b0:	100125d8 	.word	0x100125d8
1000c4b4:	100125dc 	.word	0x100125dc

1000c4b8 <internal_conn_flush>:
1000c4b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c4ba:	4a12      	ldr	r2, [pc, #72]	; (1000c504 <internal_conn_flush+0x4c>)
1000c4bc:	9000      	str	r0, [sp, #0]
1000c4be:	6813      	ldr	r3, [r2, #0]
1000c4c0:	4811      	ldr	r0, [pc, #68]	; (1000c508 <internal_conn_flush+0x50>)
1000c4c2:	1c1f      	adds	r7, r3, #0
1000c4c4:	2100      	movs	r1, #0
1000c4c6:	4684      	mov	ip, r0
1000c4c8:	6804      	ldr	r4, [r0, #0]
1000c4ca:	9201      	str	r2, [sp, #4]
1000c4cc:	2b00      	cmp	r3, #0
1000c4ce:	d014      	beq.n	1000c4fa <internal_conn_flush+0x42>
1000c4d0:	88d8      	ldrh	r0, [r3, #6]
1000c4d2:	9a00      	ldr	r2, [sp, #0]
1000c4d4:	681d      	ldr	r5, [r3, #0]
1000c4d6:	0a06      	lsrs	r6, r0, #8
1000c4d8:	4296      	cmp	r6, r2
1000c4da:	d10b      	bne.n	1000c4f4 <internal_conn_flush+0x3c>
1000c4dc:	26fd      	movs	r6, #253	; 0xfd
1000c4de:	4006      	ands	r6, r0
1000c4e0:	2e0c      	cmp	r6, #12
1000c4e2:	d107      	bne.n	1000c4f4 <internal_conn_flush+0x3c>
1000c4e4:	2900      	cmp	r1, #0
1000c4e6:	d001      	beq.n	1000c4ec <internal_conn_flush+0x34>
1000c4e8:	600d      	str	r5, [r1, #0]
1000c4ea:	e000      	b.n	1000c4ee <internal_conn_flush+0x36>
1000c4ec:	1c2f      	adds	r7, r5, #0
1000c4ee:	601c      	str	r4, [r3, #0]
1000c4f0:	1c1c      	adds	r4, r3, #0
1000c4f2:	1c0b      	adds	r3, r1, #0
1000c4f4:	1c19      	adds	r1, r3, #0
1000c4f6:	1c2b      	adds	r3, r5, #0
1000c4f8:	e7e8      	b.n	1000c4cc <internal_conn_flush+0x14>
1000c4fa:	9b01      	ldr	r3, [sp, #4]
1000c4fc:	601f      	str	r7, [r3, #0]
1000c4fe:	4663      	mov	r3, ip
1000c500:	601c      	str	r4, [r3, #0]
1000c502:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c504:	100125d8 	.word	0x100125d8
1000c508:	100125dc 	.word	0x100125dc

1000c50c <at_ble_device_name_set>:
1000c50c:	b530      	push	{r4, r5, lr}
1000c50e:	23cf      	movs	r3, #207	; 0xcf
1000c510:	2800      	cmp	r0, #0
1000c512:	d010      	beq.n	1000c536 <at_ble_device_name_set+0x2a>
1000c514:	1e4a      	subs	r2, r1, #1
1000c516:	2a1f      	cmp	r2, #31
1000c518:	d80d      	bhi.n	1000c536 <at_ble_device_name_set+0x2a>
1000c51a:	4a08      	ldr	r2, [pc, #32]	; (1000c53c <at_ble_device_name_set+0x30>)
1000c51c:	1c13      	adds	r3, r2, #0
1000c51e:	33aa      	adds	r3, #170	; 0xaa
1000c520:	8019      	strh	r1, [r3, #0]
1000c522:	2300      	movs	r3, #0
1000c524:	1c1c      	adds	r4, r3, #0
1000c526:	5cc5      	ldrb	r5, [r0, r3]
1000c528:	34ac      	adds	r4, #172	; 0xac
1000c52a:	3301      	adds	r3, #1
1000c52c:	5515      	strb	r5, [r2, r4]
1000c52e:	b2dc      	uxtb	r4, r3
1000c530:	428c      	cmp	r4, r1
1000c532:	d3f7      	bcc.n	1000c524 <at_ble_device_name_set+0x18>
1000c534:	2300      	movs	r3, #0
1000c536:	1c18      	adds	r0, r3, #0
1000c538:	bd30      	pop	{r4, r5, pc}
1000c53a:	46c0      	nop			; (mov r8, r8)
1000c53c:	10013372 	.word	0x10013372

1000c540 <at_ble_addr_get>:
1000c540:	b510      	push	{r4, lr}
1000c542:	1c04      	adds	r4, r0, #0
1000c544:	20cf      	movs	r0, #207	; 0xcf
1000c546:	2c00      	cmp	r4, #0
1000c548:	d006      	beq.n	1000c558 <at_ble_addr_get+0x18>
1000c54a:	4b04      	ldr	r3, [pc, #16]	; (1000c55c <at_ble_addr_get+0x1c>)
1000c54c:	38ce      	subs	r0, #206	; 0xce
1000c54e:	1c21      	adds	r1, r4, #0
1000c550:	4798      	blx	r3
1000c552:	4b03      	ldr	r3, [pc, #12]	; (1000c560 <at_ble_addr_get+0x20>)
1000c554:	791b      	ldrb	r3, [r3, #4]
1000c556:	7023      	strb	r3, [r4, #0]
1000c558:	bd10      	pop	{r4, pc}
1000c55a:	46c0      	nop			; (mov r8, r8)
1000c55c:	1000dcdd 	.word	0x1000dcdd
1000c560:	10013372 	.word	0x10013372

1000c564 <at_ble_set_dev_config>:
1000c564:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c566:	7906      	ldrb	r6, [r0, #4]
1000c568:	b089      	sub	sp, #36	; 0x24
1000c56a:	25cf      	movs	r5, #207	; 0xcf
1000c56c:	2e03      	cmp	r6, #3
1000c56e:	d838      	bhi.n	1000c5e2 <at_ble_set_dev_config+0x7e>
1000c570:	7803      	ldrb	r3, [r0, #0]
1000c572:	3511      	adds	r5, #17
1000c574:	2b0f      	cmp	r3, #15
1000c576:	d834      	bhi.n	1000c5e2 <at_ble_set_dev_config+0x7e>
1000c578:	2380      	movs	r3, #128	; 0x80
1000c57a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c57c:	3d11      	subs	r5, #17
1000c57e:	009b      	lsls	r3, r3, #2
1000c580:	429f      	cmp	r7, r3
1000c582:	d82e      	bhi.n	1000c5e2 <at_ble_set_dev_config+0x7e>
1000c584:	7fc5      	ldrb	r5, [r0, #31]
1000c586:	7f83      	ldrb	r3, [r0, #30]
1000c588:	01ad      	lsls	r5, r5, #6
1000c58a:	015b      	lsls	r3, r3, #5
1000c58c:	431d      	orrs	r5, r3
1000c58e:	7ec3      	ldrb	r3, [r0, #27]
1000c590:	431d      	orrs	r5, r3
1000c592:	7f43      	ldrb	r3, [r0, #29]
1000c594:	011b      	lsls	r3, r3, #4
1000c596:	431d      	orrs	r5, r3
1000c598:	7f03      	ldrb	r3, [r0, #28]
1000c59a:	009b      	lsls	r3, r3, #2
1000c59c:	431d      	orrs	r5, r3
1000c59e:	4b12      	ldr	r3, [pc, #72]	; (1000c5e8 <at_ble_set_dev_config+0x84>)
1000c5a0:	b2ed      	uxtb	r5, r5
1000c5a2:	711e      	strb	r6, [r3, #4]
1000c5a4:	7903      	ldrb	r3, [r0, #4]
1000c5a6:	3b02      	subs	r3, #2
1000c5a8:	2b01      	cmp	r3, #1
1000c5aa:	d801      	bhi.n	1000c5b0 <at_ble_set_dev_config+0x4c>
1000c5ac:	2302      	movs	r3, #2
1000c5ae:	7103      	strb	r3, [r0, #4]
1000c5b0:	1c04      	adds	r4, r0, #0
1000c5b2:	1c23      	adds	r3, r4, #0
1000c5b4:	330b      	adds	r3, #11
1000c5b6:	8861      	ldrh	r1, [r4, #2]
1000c5b8:	9307      	str	r3, [sp, #28]
1000c5ba:	7923      	ldrb	r3, [r4, #4]
1000c5bc:	7800      	ldrb	r0, [r0, #0]
1000c5be:	9300      	str	r3, [sp, #0]
1000c5c0:	9501      	str	r5, [sp, #4]
1000c5c2:	8c25      	ldrh	r5, [r4, #32]
1000c5c4:	1d62      	adds	r2, r4, #5
1000c5c6:	9502      	str	r5, [sp, #8]
1000c5c8:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c5ca:	9b07      	ldr	r3, [sp, #28]
1000c5cc:	9503      	str	r5, [sp, #12]
1000c5ce:	9704      	str	r7, [sp, #16]
1000c5d0:	4d06      	ldr	r5, [pc, #24]	; (1000c5ec <at_ble_set_dev_config+0x88>)
1000c5d2:	47a8      	blx	r5
1000c5d4:	7126      	strb	r6, [r4, #4]
1000c5d6:	1c05      	adds	r5, r0, #0
1000c5d8:	1c21      	adds	r1, r4, #0
1000c5da:	4803      	ldr	r0, [pc, #12]	; (1000c5e8 <at_ble_set_dev_config+0x84>)
1000c5dc:	2226      	movs	r2, #38	; 0x26
1000c5de:	4b04      	ldr	r3, [pc, #16]	; (1000c5f0 <at_ble_set_dev_config+0x8c>)
1000c5e0:	4798      	blx	r3
1000c5e2:	1c28      	adds	r0, r5, #0
1000c5e4:	b009      	add	sp, #36	; 0x24
1000c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5e8:	10013372 	.word	0x10013372
1000c5ec:	1000dbd5 	.word	0x1000dbd5
1000c5f0:	1000f957 	.word	0x1000f957

1000c5f4 <at_ble_init>:
1000c5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5f6:	b087      	sub	sp, #28
1000c5f8:	af03      	add	r7, sp, #12
1000c5fa:	494d      	ldr	r1, [pc, #308]	; (1000c730 <at_ble_init+0x13c>)
1000c5fc:	1c04      	adds	r4, r0, #0
1000c5fe:	220b      	movs	r2, #11
1000c600:	4b4c      	ldr	r3, [pc, #304]	; (1000c734 <at_ble_init+0x140>)
1000c602:	1c38      	adds	r0, r7, #0
1000c604:	4798      	blx	r3
1000c606:	2205      	movs	r2, #5
1000c608:	4b4b      	ldr	r3, [pc, #300]	; (1000c738 <at_ble_init+0x144>)
1000c60a:	801a      	strh	r2, [r3, #0]
1000c60c:	2300      	movs	r3, #0
1000c60e:	4a4b      	ldr	r2, [pc, #300]	; (1000c73c <at_ble_init+0x148>)
1000c610:	6013      	str	r3, [r2, #0]
1000c612:	4a4b      	ldr	r2, [pc, #300]	; (1000c740 <at_ble_init+0x14c>)
1000c614:	7013      	strb	r3, [r2, #0]
1000c616:	4a4b      	ldr	r2, [pc, #300]	; (1000c744 <at_ble_init+0x150>)
1000c618:	7013      	strb	r3, [r2, #0]
1000c61a:	4b4b      	ldr	r3, [pc, #300]	; (1000c748 <at_ble_init+0x154>)
1000c61c:	4798      	blx	r3
1000c61e:	4b4b      	ldr	r3, [pc, #300]	; (1000c74c <at_ble_init+0x158>)
1000c620:	4798      	blx	r3
1000c622:	4b4b      	ldr	r3, [pc, #300]	; (1000c750 <at_ble_init+0x15c>)
1000c624:	4798      	blx	r3
1000c626:	4b4b      	ldr	r3, [pc, #300]	; (1000c754 <at_ble_init+0x160>)
1000c628:	4798      	blx	r3
1000c62a:	2c00      	cmp	r4, #0
1000c62c:	d009      	beq.n	1000c642 <at_ble_init+0x4e>
1000c62e:	6820      	ldr	r0, [r4, #0]
1000c630:	2800      	cmp	r0, #0
1000c632:	d006      	beq.n	1000c642 <at_ble_init+0x4e>
1000c634:	6861      	ldr	r1, [r4, #4]
1000c636:	2900      	cmp	r1, #0
1000c638:	d101      	bne.n	1000c63e <at_ble_init+0x4a>
1000c63a:	26e2      	movs	r6, #226	; 0xe2
1000c63c:	e075      	b.n	1000c72a <at_ble_init+0x136>
1000c63e:	4b46      	ldr	r3, [pc, #280]	; (1000c758 <at_ble_init+0x164>)
1000c640:	4798      	blx	r3
1000c642:	4b46      	ldr	r3, [pc, #280]	; (1000c75c <at_ble_init+0x168>)
1000c644:	4798      	blx	r3
1000c646:	2801      	cmp	r0, #1
1000c648:	d8f7      	bhi.n	1000c63a <at_ble_init+0x46>
1000c64a:	4845      	ldr	r0, [pc, #276]	; (1000c760 <at_ble_init+0x16c>)
1000c64c:	4b45      	ldr	r3, [pc, #276]	; (1000c764 <at_ble_init+0x170>)
1000c64e:	4798      	blx	r3
1000c650:	2800      	cmp	r0, #0
1000c652:	d1f2      	bne.n	1000c63a <at_ble_init+0x46>
1000c654:	4b44      	ldr	r3, [pc, #272]	; (1000c768 <at_ble_init+0x174>)
1000c656:	4798      	blx	r3
1000c658:	4b44      	ldr	r3, [pc, #272]	; (1000c76c <at_ble_init+0x178>)
1000c65a:	4798      	blx	r3
1000c65c:	466b      	mov	r3, sp
1000c65e:	2201      	movs	r2, #1
1000c660:	1cdc      	adds	r4, r3, #3
1000c662:	1c20      	adds	r0, r4, #0
1000c664:	a901      	add	r1, sp, #4
1000c666:	4252      	negs	r2, r2
1000c668:	4b41      	ldr	r3, [pc, #260]	; (1000c770 <at_ble_init+0x17c>)
1000c66a:	4798      	blx	r3
1000c66c:	2800      	cmp	r0, #0
1000c66e:	d102      	bne.n	1000c676 <at_ble_init+0x82>
1000c670:	7823      	ldrb	r3, [r4, #0]
1000c672:	2b39      	cmp	r3, #57	; 0x39
1000c674:	d1f2      	bne.n	1000c65c <at_ble_init+0x68>
1000c676:	4b3f      	ldr	r3, [pc, #252]	; (1000c774 <at_ble_init+0x180>)
1000c678:	4798      	blx	r3
1000c67a:	1e06      	subs	r6, r0, #0
1000c67c:	d155      	bne.n	1000c72a <at_ble_init+0x136>
1000c67e:	1c03      	adds	r3, r0, #0
1000c680:	2101      	movs	r1, #1
1000c682:	4a3d      	ldr	r2, [pc, #244]	; (1000c778 <at_ble_init+0x184>)
1000c684:	4249      	negs	r1, r1
1000c686:	189a      	adds	r2, r3, r2
1000c688:	3312      	adds	r3, #18
1000c68a:	8151      	strh	r1, [r2, #10]
1000c68c:	2b90      	cmp	r3, #144	; 0x90
1000c68e:	d1f7      	bne.n	1000c680 <at_ble_init+0x8c>
1000c690:	4c3a      	ldr	r4, [pc, #232]	; (1000c77c <at_ble_init+0x188>)
1000c692:	3b81      	subs	r3, #129	; 0x81
1000c694:	7023      	strb	r3, [r4, #0]
1000c696:	4b3a      	ldr	r3, [pc, #232]	; (1000c780 <at_ble_init+0x18c>)
1000c698:	4a3a      	ldr	r2, [pc, #232]	; (1000c784 <at_ble_init+0x190>)
1000c69a:	8063      	strh	r3, [r4, #2]
1000c69c:	2300      	movs	r3, #0
1000c69e:	7123      	strb	r3, [r4, #4]
1000c6a0:	3301      	adds	r3, #1
1000c6a2:	1e58      	subs	r0, r3, #1
1000c6a4:	0119      	lsls	r1, r3, #4
1000c6a6:	4301      	orrs	r1, r0
1000c6a8:	3302      	adds	r3, #2
1000c6aa:	7011      	strb	r1, [r2, #0]
1000c6ac:	3201      	adds	r2, #1
1000c6ae:	2b21      	cmp	r3, #33	; 0x21
1000c6b0:	d1f7      	bne.n	1000c6a2 <at_ble_init+0xae>
1000c6b2:	33e0      	adds	r3, #224	; 0xe0
1000c6b4:	33ff      	adds	r3, #255	; 0xff
1000c6b6:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c6b8:	1c23      	adds	r3, r4, #0
1000c6ba:	2500      	movs	r5, #0
1000c6bc:	3373      	adds	r3, #115	; 0x73
1000c6be:	701d      	strb	r5, [r3, #0]
1000c6c0:	1c23      	adds	r3, r4, #0
1000c6c2:	3372      	adds	r3, #114	; 0x72
1000c6c4:	701d      	strb	r5, [r3, #0]
1000c6c6:	1c23      	adds	r3, r4, #0
1000c6c8:	3376      	adds	r3, #118	; 0x76
1000c6ca:	701d      	strb	r5, [r3, #0]
1000c6cc:	1c23      	adds	r3, r4, #0
1000c6ce:	33cc      	adds	r3, #204	; 0xcc
1000c6d0:	801d      	strh	r5, [r3, #0]
1000c6d2:	1c22      	adds	r2, r4, #0
1000c6d4:	23a0      	movs	r3, #160	; 0xa0
1000c6d6:	32d0      	adds	r2, #208	; 0xd0
1000c6d8:	005b      	lsls	r3, r3, #1
1000c6da:	8013      	strh	r3, [r2, #0]
1000c6dc:	1c22      	adds	r2, r4, #0
1000c6de:	32ce      	adds	r2, #206	; 0xce
1000c6e0:	8013      	strh	r3, [r2, #0]
1000c6e2:	1c23      	adds	r3, r4, #0
1000c6e4:	33d2      	adds	r3, #210	; 0xd2
1000c6e6:	801d      	strh	r5, [r3, #0]
1000c6e8:	22fa      	movs	r2, #250	; 0xfa
1000c6ea:	1c23      	adds	r3, r4, #0
1000c6ec:	0052      	lsls	r2, r2, #1
1000c6ee:	33d4      	adds	r3, #212	; 0xd4
1000c6f0:	801a      	strh	r2, [r3, #0]
1000c6f2:	1c23      	adds	r3, r4, #0
1000c6f4:	33d6      	adds	r3, #214	; 0xd6
1000c6f6:	701d      	strb	r5, [r3, #0]
1000c6f8:	1c20      	adds	r0, r4, #0
1000c6fa:	4b23      	ldr	r3, [pc, #140]	; (1000c788 <at_ble_init+0x194>)
1000c6fc:	76e5      	strb	r5, [r4, #27]
1000c6fe:	7725      	strb	r5, [r4, #28]
1000c700:	7765      	strb	r5, [r4, #29]
1000c702:	77a5      	strb	r5, [r4, #30]
1000c704:	77e5      	strb	r5, [r4, #31]
1000c706:	8425      	strh	r5, [r4, #32]
1000c708:	8465      	strh	r5, [r4, #34]	; 0x22
1000c70a:	4798      	blx	r3
1000c70c:	1c23      	adds	r3, r4, #0
1000c70e:	2207      	movs	r2, #7
1000c710:	3374      	adds	r3, #116	; 0x74
1000c712:	701a      	strb	r2, [r3, #0]
1000c714:	1c23      	adds	r3, r4, #0
1000c716:	3204      	adds	r2, #4
1000c718:	33aa      	adds	r3, #170	; 0xaa
1000c71a:	801a      	strh	r2, [r3, #0]
1000c71c:	1c2b      	adds	r3, r5, #0
1000c71e:	5d7a      	ldrb	r2, [r7, r5]
1000c720:	33ac      	adds	r3, #172	; 0xac
1000c722:	3501      	adds	r5, #1
1000c724:	54e2      	strb	r2, [r4, r3]
1000c726:	2d0b      	cmp	r5, #11
1000c728:	d1f8      	bne.n	1000c71c <at_ble_init+0x128>
1000c72a:	1c30      	adds	r0, r6, #0
1000c72c:	b007      	add	sp, #28
1000c72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c730:	10012290 	.word	0x10012290
1000c734:	1000f957 	.word	0x1000f957
1000c738:	100132e0 	.word	0x100132e0
1000c73c:	10012680 	.word	0x10012680
1000c740:	100125e8 	.word	0x100125e8
1000c744:	100123a9 	.word	0x100123a9
1000c748:	1000e6d1 	.word	0x1000e6d1
1000c74c:	1000c9d1 	.word	0x1000c9d1
1000c750:	1000ca75 	.word	0x1000ca75
1000c754:	1000cc8d 	.word	0x1000cc8d
1000c758:	1000caa9 	.word	0x1000caa9
1000c75c:	1000aebd 	.word	0x1000aebd
1000c760:	1000cf4d 	.word	0x1000cf4d
1000c764:	1000b0bd 	.word	0x1000b0bd
1000c768:	1000cfe5 	.word	0x1000cfe5
1000c76c:	1000bd8d 	.word	0x1000bd8d
1000c770:	1000be4d 	.word	0x1000be4d
1000c774:	1000db65 	.word	0x1000db65
1000c778:	100132e2 	.word	0x100132e2
1000c77c:	10013372 	.word	0x10013372
1000c780:	00003a98 	.word	0x00003a98
1000c784:	1001337d 	.word	0x1001337d
1000c788:	1000c565 	.word	0x1000c565

1000c78c <at_ble_addr_set>:
1000c78c:	b538      	push	{r3, r4, r5, lr}
1000c78e:	1c45      	adds	r5, r0, #1
1000c790:	1c03      	adds	r3, r0, #0
1000c792:	20cf      	movs	r0, #207	; 0xcf
1000c794:	2d00      	cmp	r5, #0
1000c796:	d018      	beq.n	1000c7ca <at_ble_addr_set+0x3e>
1000c798:	781a      	ldrb	r2, [r3, #0]
1000c79a:	2a03      	cmp	r2, #3
1000c79c:	d815      	bhi.n	1000c7ca <at_ble_addr_set+0x3e>
1000c79e:	2a01      	cmp	r2, #1
1000c7a0:	d102      	bne.n	1000c7a8 <at_ble_addr_set+0x1c>
1000c7a2:	785a      	ldrb	r2, [r3, #1]
1000c7a4:	2a00      	cmp	r2, #0
1000c7a6:	d010      	beq.n	1000c7ca <at_ble_addr_set+0x3e>
1000c7a8:	1c1c      	adds	r4, r3, #0
1000c7aa:	1c29      	adds	r1, r5, #0
1000c7ac:	2206      	movs	r2, #6
1000c7ae:	4b07      	ldr	r3, [pc, #28]	; (1000c7cc <at_ble_addr_set+0x40>)
1000c7b0:	4807      	ldr	r0, [pc, #28]	; (1000c7d0 <at_ble_addr_set+0x44>)
1000c7b2:	4798      	blx	r3
1000c7b4:	7823      	ldrb	r3, [r4, #0]
1000c7b6:	4807      	ldr	r0, [pc, #28]	; (1000c7d4 <at_ble_addr_set+0x48>)
1000c7b8:	7103      	strb	r3, [r0, #4]
1000c7ba:	4b07      	ldr	r3, [pc, #28]	; (1000c7d8 <at_ble_addr_set+0x4c>)
1000c7bc:	4798      	blx	r3
1000c7be:	7823      	ldrb	r3, [r4, #0]
1000c7c0:	2b00      	cmp	r3, #0
1000c7c2:	d102      	bne.n	1000c7ca <at_ble_addr_set+0x3e>
1000c7c4:	1c28      	adds	r0, r5, #0
1000c7c6:	4b05      	ldr	r3, [pc, #20]	; (1000c7dc <at_ble_addr_set+0x50>)
1000c7c8:	4798      	blx	r3
1000c7ca:	bd38      	pop	{r3, r4, r5, pc}
1000c7cc:	1000f957 	.word	0x1000f957
1000c7d0:	10013377 	.word	0x10013377
1000c7d4:	10013372 	.word	0x10013372
1000c7d8:	1000c565 	.word	0x1000c565
1000c7dc:	1000d061 	.word	0x1000d061

1000c7e0 <at_ble_scan_start>:
1000c7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7e2:	b08d      	sub	sp, #52	; 0x34
1000c7e4:	1c06      	adds	r6, r0, #0
1000c7e6:	a812      	add	r0, sp, #72	; 0x48
1000c7e8:	7807      	ldrb	r7, [r0, #0]
1000c7ea:	a813      	add	r0, sp, #76	; 0x4c
1000c7ec:	7800      	ldrb	r0, [r0, #0]
1000c7ee:	9007      	str	r0, [sp, #28]
1000c7f0:	a814      	add	r0, sp, #80	; 0x50
1000c7f2:	7800      	ldrb	r0, [r0, #0]
1000c7f4:	9008      	str	r0, [sp, #32]
1000c7f6:	20cf      	movs	r0, #207	; 0xcf
1000c7f8:	2f02      	cmp	r7, #2
1000c7fa:	d82e      	bhi.n	1000c85a <at_ble_scan_start+0x7a>
1000c7fc:	42b1      	cmp	r1, r6
1000c7fe:	d82c      	bhi.n	1000c85a <at_ble_scan_start+0x7a>
1000c800:	2b01      	cmp	r3, #1
1000c802:	d82a      	bhi.n	1000c85a <at_ble_scan_start+0x7a>
1000c804:	1f0c      	subs	r4, r1, #4
1000c806:	4d16      	ldr	r5, [pc, #88]	; (1000c860 <at_ble_scan_start+0x80>)
1000c808:	b2a4      	uxth	r4, r4
1000c80a:	42ac      	cmp	r4, r5
1000c80c:	d825      	bhi.n	1000c85a <at_ble_scan_start+0x7a>
1000c80e:	1f34      	subs	r4, r6, #4
1000c810:	b2a4      	uxth	r4, r4
1000c812:	42ac      	cmp	r4, r5
1000c814:	d821      	bhi.n	1000c85a <at_ble_scan_start+0x7a>
1000c816:	9c07      	ldr	r4, [sp, #28]
1000c818:	2c00      	cmp	r4, #0
1000c81a:	d001      	beq.n	1000c820 <at_ble_scan_start+0x40>
1000c81c:	2f02      	cmp	r7, #2
1000c81e:	d11c      	bne.n	1000c85a <at_ble_scan_start+0x7a>
1000c820:	1c1c      	adds	r4, r3, #0
1000c822:	4b10      	ldr	r3, [pc, #64]	; (1000c864 <at_ble_scan_start+0x84>)
1000c824:	1c0d      	adds	r5, r1, #0
1000c826:	9209      	str	r2, [sp, #36]	; 0x24
1000c828:	4798      	blx	r3
1000c82a:	4b0f      	ldr	r3, [pc, #60]	; (1000c868 <at_ble_scan_start+0x88>)
1000c82c:	1c01      	adds	r1, r0, #0
1000c82e:	885a      	ldrh	r2, [r3, #2]
1000c830:	9b07      	ldr	r3, [sp, #28]
1000c832:	4260      	negs	r0, r4
1000c834:	4160      	adcs	r0, r4
1000c836:	9303      	str	r3, [sp, #12]
1000c838:	9b08      	ldr	r3, [sp, #32]
1000c83a:	9702      	str	r7, [sp, #8]
1000c83c:	9304      	str	r3, [sp, #16]
1000c83e:	2364      	movs	r3, #100	; 0x64
1000c840:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000c842:	ac04      	add	r4, sp, #16
1000c844:	435f      	muls	r7, r3
1000c846:	3b4b      	subs	r3, #75	; 0x4b
1000c848:	b2bf      	uxth	r7, r7
1000c84a:	3011      	adds	r0, #17
1000c84c:	191b      	adds	r3, r3, r4
1000c84e:	9600      	str	r6, [sp, #0]
1000c850:	9501      	str	r5, [sp, #4]
1000c852:	9705      	str	r7, [sp, #20]
1000c854:	4c05      	ldr	r4, [pc, #20]	; (1000c86c <at_ble_scan_start+0x8c>)
1000c856:	47a0      	blx	r4
1000c858:	2000      	movs	r0, #0
1000c85a:	b00d      	add	sp, #52	; 0x34
1000c85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c85e:	46c0      	nop			; (mov r8, r8)
1000c860:	00003ffc 	.word	0x00003ffc
1000c864:	1000df91 	.word	0x1000df91
1000c868:	10013372 	.word	0x10013372
1000c86c:	1000dfa9 	.word	0x1000dfa9

1000c870 <at_ble_scan_stop>:
1000c870:	b510      	push	{r4, lr}
1000c872:	4b05      	ldr	r3, [pc, #20]	; (1000c888 <at_ble_scan_stop+0x18>)
1000c874:	4798      	blx	r3
1000c876:	1e04      	subs	r4, r0, #0
1000c878:	d103      	bne.n	1000c882 <at_ble_scan_stop+0x12>
1000c87a:	20d1      	movs	r0, #209	; 0xd1
1000c87c:	4b03      	ldr	r3, [pc, #12]	; (1000c88c <at_ble_scan_stop+0x1c>)
1000c87e:	0100      	lsls	r0, r0, #4
1000c880:	4798      	blx	r3
1000c882:	1c20      	adds	r0, r4, #0
1000c884:	bd10      	pop	{r4, pc}
1000c886:	46c0      	nop			; (mov r8, r8)
1000c888:	1000ddbd 	.word	0x1000ddbd
1000c88c:	1000c475 	.word	0x1000c475

1000c890 <at_ble_connect>:
1000c890:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c892:	b091      	sub	sp, #68	; 0x44
1000c894:	930d      	str	r3, [sp, #52]	; 0x34
1000c896:	4b2d      	ldr	r3, [pc, #180]	; (1000c94c <at_ble_connect+0xbc>)
1000c898:	900a      	str	r0, [sp, #40]	; 0x28
1000c89a:	910b      	str	r1, [sp, #44]	; 0x2c
1000c89c:	920c      	str	r2, [sp, #48]	; 0x30
1000c89e:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000c8a0:	4798      	blx	r3
1000c8a2:	254b      	movs	r5, #75	; 0x4b
1000c8a4:	2807      	cmp	r0, #7
1000c8a6:	d84d      	bhi.n	1000c944 <at_ble_connect+0xb4>
1000c8a8:	8863      	ldrh	r3, [r4, #2]
1000c8aa:	4a29      	ldr	r2, [pc, #164]	; (1000c950 <at_ble_connect+0xc0>)
1000c8ac:	3b06      	subs	r3, #6
1000c8ae:	b29b      	uxth	r3, r3
1000c8b0:	3584      	adds	r5, #132	; 0x84
1000c8b2:	4293      	cmp	r3, r2
1000c8b4:	d846      	bhi.n	1000c944 <at_ble_connect+0xb4>
1000c8b6:	8823      	ldrh	r3, [r4, #0]
1000c8b8:	3b06      	subs	r3, #6
1000c8ba:	b29b      	uxth	r3, r3
1000c8bc:	4293      	cmp	r3, r2
1000c8be:	d841      	bhi.n	1000c944 <at_ble_connect+0xb4>
1000c8c0:	88e3      	ldrh	r3, [r4, #6]
1000c8c2:	4a24      	ldr	r2, [pc, #144]	; (1000c954 <at_ble_connect+0xc4>)
1000c8c4:	3b0a      	subs	r3, #10
1000c8c6:	b29b      	uxth	r3, r3
1000c8c8:	4293      	cmp	r3, r2
1000c8ca:	d83b      	bhi.n	1000c944 <at_ble_connect+0xb4>
1000c8cc:	23f4      	movs	r3, #244	; 0xf4
1000c8ce:	88a2      	ldrh	r2, [r4, #4]
1000c8d0:	33ff      	adds	r3, #255	; 0xff
1000c8d2:	429a      	cmp	r2, r3
1000c8d4:	d836      	bhi.n	1000c944 <at_ble_connect+0xb4>
1000c8d6:	af0e      	add	r7, sp, #56	; 0x38
1000c8d8:	4b1f      	ldr	r3, [pc, #124]	; (1000c958 <at_ble_connect+0xc8>)
1000c8da:	2001      	movs	r0, #1
1000c8dc:	1c39      	adds	r1, r7, #0
1000c8de:	4798      	blx	r3
1000c8e0:	4e1e      	ldr	r6, [pc, #120]	; (1000c95c <at_ble_connect+0xcc>)
1000c8e2:	1c05      	adds	r5, r0, #0
1000c8e4:	7933      	ldrb	r3, [r6, #4]
1000c8e6:	703b      	strb	r3, [r7, #0]
1000c8e8:	2800      	cmp	r0, #0
1000c8ea:	d12a      	bne.n	1000c942 <at_ble_connect+0xb2>
1000c8ec:	4b1c      	ldr	r3, [pc, #112]	; (1000c960 <at_ble_connect+0xd0>)
1000c8ee:	4798      	blx	r3
1000c8f0:	3675      	adds	r6, #117	; 0x75
1000c8f2:	7833      	ldrb	r3, [r6, #0]
1000c8f4:	1c01      	adds	r1, r0, #0
1000c8f6:	3b01      	subs	r3, #1
1000c8f8:	2b01      	cmp	r3, #1
1000c8fa:	d901      	bls.n	1000c900 <at_ble_connect+0x70>
1000c8fc:	2302      	movs	r3, #2
1000c8fe:	7033      	strb	r3, [r6, #0]
1000c900:	4b16      	ldr	r3, [pc, #88]	; (1000c95c <at_ble_connect+0xcc>)
1000c902:	1c1a      	adds	r2, r3, #0
1000c904:	3275      	adds	r2, #117	; 0x75
1000c906:	7810      	ldrb	r0, [r2, #0]
1000c908:	885a      	ldrh	r2, [r3, #2]
1000c90a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000c90c:	3012      	adds	r0, #18
1000c90e:	9300      	str	r3, [sp, #0]
1000c910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c912:	b2c0      	uxtb	r0, r0
1000c914:	9301      	str	r3, [sp, #4]
1000c916:	8823      	ldrh	r3, [r4, #0]
1000c918:	9302      	str	r3, [sp, #8]
1000c91a:	8863      	ldrh	r3, [r4, #2]
1000c91c:	9303      	str	r3, [sp, #12]
1000c91e:	88a3      	ldrh	r3, [r4, #4]
1000c920:	9304      	str	r3, [sp, #16]
1000c922:	88e3      	ldrh	r3, [r4, #6]
1000c924:	9305      	str	r3, [sp, #20]
1000c926:	8923      	ldrh	r3, [r4, #8]
1000c928:	9306      	str	r3, [sp, #24]
1000c92a:	8963      	ldrh	r3, [r4, #10]
1000c92c:	ac04      	add	r4, sp, #16
1000c92e:	9307      	str	r3, [sp, #28]
1000c930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c932:	9308      	str	r3, [sp, #32]
1000c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c936:	9309      	str	r3, [sp, #36]	; 0x24
1000c938:	2329      	movs	r3, #41	; 0x29
1000c93a:	191b      	adds	r3, r3, r4
1000c93c:	4c09      	ldr	r4, [pc, #36]	; (1000c964 <at_ble_connect+0xd4>)
1000c93e:	47a0      	blx	r4
1000c940:	e000      	b.n	1000c944 <at_ble_connect+0xb4>
1000c942:	25e2      	movs	r5, #226	; 0xe2
1000c944:	1c28      	adds	r0, r5, #0
1000c946:	b011      	add	sp, #68	; 0x44
1000c948:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c94a:	46c0      	nop			; (mov r8, r8)
1000c94c:	1000d1d9 	.word	0x1000d1d9
1000c950:	00000c7a 	.word	0x00000c7a
1000c954:	00000c76 	.word	0x00000c76
1000c958:	1000dcdd 	.word	0x1000dcdd
1000c95c:	10013372 	.word	0x10013372
1000c960:	1000df91 	.word	0x1000df91
1000c964:	1000e0c9 	.word	0x1000e0c9

1000c968 <at_ble_disconnect>:
1000c968:	b538      	push	{r3, r4, r5, lr}
1000c96a:	1c04      	adds	r4, r0, #0
1000c96c:	4b04      	ldr	r3, [pc, #16]	; (1000c980 <at_ble_disconnect+0x18>)
1000c96e:	1c08      	adds	r0, r1, #0
1000c970:	1c21      	adds	r1, r4, #0
1000c972:	4798      	blx	r3
1000c974:	1c05      	adds	r5, r0, #0
1000c976:	4b03      	ldr	r3, [pc, #12]	; (1000c984 <at_ble_disconnect+0x1c>)
1000c978:	1c20      	adds	r0, r4, #0
1000c97a:	4798      	blx	r3
1000c97c:	1c28      	adds	r0, r5, #0
1000c97e:	bd38      	pop	{r3, r4, r5, pc}
1000c980:	1000d475 	.word	0x1000d475
1000c984:	1000c4b9 	.word	0x1000c4b9

1000c988 <at_ble_conn_update_reply>:
1000c988:	b510      	push	{r4, lr}
1000c98a:	4c01      	ldr	r4, [pc, #4]	; (1000c990 <at_ble_conn_update_reply+0x8>)
1000c98c:	47a0      	blx	r4
1000c98e:	bd10      	pop	{r4, pc}
1000c990:	1000d925 	.word	0x1000d925

1000c994 <at_ble_random_address_resolve>:
1000c994:	b510      	push	{r4, lr}
1000c996:	23cf      	movs	r3, #207	; 0xcf
1000c998:	2800      	cmp	r0, #0
1000c99a:	d00a      	beq.n	1000c9b2 <at_ble_random_address_resolve+0x1e>
1000c99c:	2900      	cmp	r1, #0
1000c99e:	d008      	beq.n	1000c9b2 <at_ble_random_address_resolve+0x1e>
1000c9a0:	2a00      	cmp	r2, #0
1000c9a2:	d006      	beq.n	1000c9b2 <at_ble_random_address_resolve+0x1e>
1000c9a4:	780c      	ldrb	r4, [r1, #0]
1000c9a6:	2c02      	cmp	r4, #2
1000c9a8:	d103      	bne.n	1000c9b2 <at_ble_random_address_resolve+0x1e>
1000c9aa:	4b03      	ldr	r3, [pc, #12]	; (1000c9b8 <at_ble_random_address_resolve+0x24>)
1000c9ac:	3101      	adds	r1, #1
1000c9ae:	4798      	blx	r3
1000c9b0:	2300      	movs	r3, #0
1000c9b2:	1c18      	adds	r0, r3, #0
1000c9b4:	bd10      	pop	{r4, pc}
1000c9b6:	46c0      	nop			; (mov r8, r8)
1000c9b8:	1000e1e5 	.word	0x1000e1e5

1000c9bc <at_ble_uuid_len2type>:
1000c9bc:	1e83      	subs	r3, r0, #2
1000c9be:	b2db      	uxtb	r3, r3
1000c9c0:	2003      	movs	r0, #3
1000c9c2:	2b0e      	cmp	r3, #14
1000c9c4:	d801      	bhi.n	1000c9ca <at_ble_uuid_len2type+0xe>
1000c9c6:	4a01      	ldr	r2, [pc, #4]	; (1000c9cc <at_ble_uuid_len2type+0x10>)
1000c9c8:	5cd0      	ldrb	r0, [r2, r3]
1000c9ca:	4770      	bx	lr
1000c9cc:	1001229b 	.word	0x1001229b

1000c9d0 <init_gatt_client_module>:
1000c9d0:	2200      	movs	r2, #0
1000c9d2:	4b01      	ldr	r3, [pc, #4]	; (1000c9d8 <init_gatt_client_module+0x8>)
1000c9d4:	801a      	strh	r2, [r3, #0]
1000c9d6:	4770      	bx	lr
1000c9d8:	100125e0 	.word	0x100125e0

1000c9dc <at_ble_primary_service_discover_all>:
1000c9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c9de:	24cf      	movs	r4, #207	; 0xcf
1000c9e0:	2900      	cmp	r1, #0
1000c9e2:	d00a      	beq.n	1000c9fa <at_ble_primary_service_discover_all+0x1e>
1000c9e4:	428a      	cmp	r2, r1
1000c9e6:	d308      	bcc.n	1000c9fa <at_ble_primary_service_discover_all+0x1e>
1000c9e8:	2400      	movs	r4, #0
1000c9ea:	1c13      	adds	r3, r2, #0
1000c9ec:	9001      	str	r0, [sp, #4]
1000c9ee:	1c0a      	adds	r2, r1, #0
1000c9f0:	9400      	str	r4, [sp, #0]
1000c9f2:	2002      	movs	r0, #2
1000c9f4:	1c21      	adds	r1, r4, #0
1000c9f6:	4d02      	ldr	r5, [pc, #8]	; (1000ca00 <at_ble_primary_service_discover_all+0x24>)
1000c9f8:	47a8      	blx	r5
1000c9fa:	1c20      	adds	r0, r4, #0
1000c9fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c9fe:	46c0      	nop			; (mov r8, r8)
1000ca00:	1000e3d9 	.word	0x1000e3d9

1000ca04 <db_searchATT>:
1000ca04:	b570      	push	{r4, r5, r6, lr}
1000ca06:	1c05      	adds	r5, r0, #0
1000ca08:	2400      	movs	r4, #0
1000ca0a:	4b0c      	ldr	r3, [pc, #48]	; (1000ca3c <db_searchATT+0x38>)
1000ca0c:	6819      	ldr	r1, [r3, #0]
1000ca0e:	4b0c      	ldr	r3, [pc, #48]	; (1000ca40 <db_searchATT+0x3c>)
1000ca10:	681e      	ldr	r6, [r3, #0]
1000ca12:	428c      	cmp	r4, r1
1000ca14:	dc10      	bgt.n	1000ca38 <db_searchATT+0x34>
1000ca16:	200c      	movs	r0, #12
1000ca18:	1863      	adds	r3, r4, r1
1000ca1a:	0fda      	lsrs	r2, r3, #31
1000ca1c:	18d3      	adds	r3, r2, r3
1000ca1e:	1c02      	adds	r2, r0, #0
1000ca20:	105b      	asrs	r3, r3, #1
1000ca22:	435a      	muls	r2, r3
1000ca24:	18b0      	adds	r0, r6, r2
1000ca26:	8802      	ldrh	r2, [r0, #0]
1000ca28:	42aa      	cmp	r2, r5
1000ca2a:	d201      	bcs.n	1000ca30 <db_searchATT+0x2c>
1000ca2c:	1e59      	subs	r1, r3, #1
1000ca2e:	e7f0      	b.n	1000ca12 <db_searchATT+0xe>
1000ca30:	42aa      	cmp	r2, r5
1000ca32:	d902      	bls.n	1000ca3a <db_searchATT+0x36>
1000ca34:	1c5c      	adds	r4, r3, #1
1000ca36:	e7ec      	b.n	1000ca12 <db_searchATT+0xe>
1000ca38:	2000      	movs	r0, #0
1000ca3a:	bd70      	pop	{r4, r5, r6, pc}
1000ca3c:	100125f4 	.word	0x100125f4
1000ca40:	100125ec 	.word	0x100125ec

1000ca44 <at_ble_read_authorize_reply.part.2>:
1000ca44:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ca46:	4b09      	ldr	r3, [pc, #36]	; (1000ca6c <at_ble_read_authorize_reply.part.2+0x28>)
1000ca48:	1c05      	adds	r5, r0, #0
1000ca4a:	1c08      	adds	r0, r1, #0
1000ca4c:	1c0c      	adds	r4, r1, #0
1000ca4e:	4798      	blx	r3
1000ca50:	2800      	cmp	r0, #0
1000ca52:	d009      	beq.n	1000ca68 <at_ble_read_authorize_reply.part.2+0x24>
1000ca54:	6882      	ldr	r2, [r0, #8]
1000ca56:	2a00      	cmp	r2, #0
1000ca58:	d006      	beq.n	1000ca68 <at_ble_read_authorize_reply.part.2+0x24>
1000ca5a:	8883      	ldrh	r3, [r0, #4]
1000ca5c:	1c29      	adds	r1, r5, #0
1000ca5e:	9200      	str	r2, [sp, #0]
1000ca60:	1c20      	adds	r0, r4, #0
1000ca62:	2200      	movs	r2, #0
1000ca64:	4c02      	ldr	r4, [pc, #8]	; (1000ca70 <at_ble_read_authorize_reply.part.2+0x2c>)
1000ca66:	47a0      	blx	r4
1000ca68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ca6a:	46c0      	nop			; (mov r8, r8)
1000ca6c:	1000ca05 	.word	0x1000ca05
1000ca70:	1000e2e1 	.word	0x1000e2e1

1000ca74 <initi_gatt_server_module>:
1000ca74:	2300      	movs	r3, #0
1000ca76:	4a06      	ldr	r2, [pc, #24]	; (1000ca90 <initi_gatt_server_module+0x1c>)
1000ca78:	7013      	strb	r3, [r2, #0]
1000ca7a:	4a06      	ldr	r2, [pc, #24]	; (1000ca94 <initi_gatt_server_module+0x20>)
1000ca7c:	6013      	str	r3, [r2, #0]
1000ca7e:	4a06      	ldr	r2, [pc, #24]	; (1000ca98 <initi_gatt_server_module+0x24>)
1000ca80:	6013      	str	r3, [r2, #0]
1000ca82:	4a06      	ldr	r2, [pc, #24]	; (1000ca9c <initi_gatt_server_module+0x28>)
1000ca84:	6013      	str	r3, [r2, #0]
1000ca86:	4a06      	ldr	r2, [pc, #24]	; (1000caa0 <initi_gatt_server_module+0x2c>)
1000ca88:	6013      	str	r3, [r2, #0]
1000ca8a:	4a06      	ldr	r2, [pc, #24]	; (1000caa4 <initi_gatt_server_module+0x30>)
1000ca8c:	6013      	str	r3, [r2, #0]
1000ca8e:	4770      	bx	lr
1000ca90:	100125e8 	.word	0x100125e8
1000ca94:	100125f8 	.word	0x100125f8
1000ca98:	100125f4 	.word	0x100125f4
1000ca9c:	100125e4 	.word	0x100125e4
1000caa0:	100125f0 	.word	0x100125f0
1000caa4:	100125ec 	.word	0x100125ec

1000caa8 <db_init>:
1000caa8:	4b0a      	ldr	r3, [pc, #40]	; (1000cad4 <db_init+0x2c>)
1000caaa:	4a0b      	ldr	r2, [pc, #44]	; (1000cad8 <db_init+0x30>)
1000caac:	6018      	str	r0, [r3, #0]
1000caae:	084b      	lsrs	r3, r1, #1
1000cab0:	6013      	str	r3, [r2, #0]
1000cab2:	4a0a      	ldr	r2, [pc, #40]	; (1000cadc <db_init+0x34>)
1000cab4:	18c3      	adds	r3, r0, r3
1000cab6:	6013      	str	r3, [r2, #0]
1000cab8:	4a09      	ldr	r2, [pc, #36]	; (1000cae0 <db_init+0x38>)
1000caba:	1841      	adds	r1, r0, r1
1000cabc:	6013      	str	r3, [r2, #0]
1000cabe:	2303      	movs	r3, #3
1000cac0:	2200      	movs	r2, #0
1000cac2:	3103      	adds	r1, #3
1000cac4:	4399      	bics	r1, r3
1000cac6:	4b07      	ldr	r3, [pc, #28]	; (1000cae4 <db_init+0x3c>)
1000cac8:	3904      	subs	r1, #4
1000caca:	6019      	str	r1, [r3, #0]
1000cacc:	4b06      	ldr	r3, [pc, #24]	; (1000cae8 <db_init+0x40>)
1000cace:	601a      	str	r2, [r3, #0]
1000cad0:	4770      	bx	lr
1000cad2:	46c0      	nop			; (mov r8, r8)
1000cad4:	100125fc 	.word	0x100125fc
1000cad8:	100125f8 	.word	0x100125f8
1000cadc:	100125e4 	.word	0x100125e4
1000cae0:	100125f0 	.word	0x100125f0
1000cae4:	100125ec 	.word	0x100125ec
1000cae8:	100125f4 	.word	0x100125f4

1000caec <at_ble_characteristic_value_set>:
1000caec:	b570      	push	{r4, r5, r6, lr}
1000caee:	4b0b      	ldr	r3, [pc, #44]	; (1000cb1c <at_ble_characteristic_value_set+0x30>)
1000caf0:	1c06      	adds	r6, r0, #0
1000caf2:	1c0c      	adds	r4, r1, #0
1000caf4:	1c15      	adds	r5, r2, #0
1000caf6:	4798      	blx	r3
1000caf8:	2800      	cmp	r0, #0
1000cafa:	d008      	beq.n	1000cb0e <at_ble_characteristic_value_set+0x22>
1000cafc:	6880      	ldr	r0, [r0, #8]
1000cafe:	2800      	cmp	r0, #0
1000cb00:	d005      	beq.n	1000cb0e <at_ble_characteristic_value_set+0x22>
1000cb02:	1c21      	adds	r1, r4, #0
1000cb04:	1c2a      	adds	r2, r5, #0
1000cb06:	4b06      	ldr	r3, [pc, #24]	; (1000cb20 <at_ble_characteristic_value_set+0x34>)
1000cb08:	4798      	blx	r3
1000cb0a:	2000      	movs	r0, #0
1000cb0c:	e004      	b.n	1000cb18 <at_ble_characteristic_value_set+0x2c>
1000cb0e:	1c30      	adds	r0, r6, #0
1000cb10:	1c29      	adds	r1, r5, #0
1000cb12:	1c22      	adds	r2, r4, #0
1000cb14:	4b03      	ldr	r3, [pc, #12]	; (1000cb24 <at_ble_characteristic_value_set+0x38>)
1000cb16:	4798      	blx	r3
1000cb18:	bd70      	pop	{r4, r5, r6, pc}
1000cb1a:	46c0      	nop			; (mov r8, r8)
1000cb1c:	1000ca05 	.word	0x1000ca05
1000cb20:	1000f957 	.word	0x1000f957
1000cb24:	1000e6e5 	.word	0x1000e6e5

1000cb28 <at_ble_characteristic_value_get>:
1000cb28:	b570      	push	{r4, r5, r6, lr}
1000cb2a:	4b0c      	ldr	r3, [pc, #48]	; (1000cb5c <at_ble_characteristic_value_get+0x34>)
1000cb2c:	1c06      	adds	r6, r0, #0
1000cb2e:	1c0c      	adds	r4, r1, #0
1000cb30:	1c15      	adds	r5, r2, #0
1000cb32:	4798      	blx	r3
1000cb34:	2800      	cmp	r0, #0
1000cb36:	d00b      	beq.n	1000cb50 <at_ble_characteristic_value_get+0x28>
1000cb38:	6883      	ldr	r3, [r0, #8]
1000cb3a:	2b00      	cmp	r3, #0
1000cb3c:	d008      	beq.n	1000cb50 <at_ble_characteristic_value_get+0x28>
1000cb3e:	8883      	ldrh	r3, [r0, #4]
1000cb40:	802b      	strh	r3, [r5, #0]
1000cb42:	8882      	ldrh	r2, [r0, #4]
1000cb44:	6881      	ldr	r1, [r0, #8]
1000cb46:	4b06      	ldr	r3, [pc, #24]	; (1000cb60 <at_ble_characteristic_value_get+0x38>)
1000cb48:	1c20      	adds	r0, r4, #0
1000cb4a:	4798      	blx	r3
1000cb4c:	2000      	movs	r0, #0
1000cb4e:	e004      	b.n	1000cb5a <at_ble_characteristic_value_get+0x32>
1000cb50:	1c30      	adds	r0, r6, #0
1000cb52:	1c29      	adds	r1, r5, #0
1000cb54:	1c22      	adds	r2, r4, #0
1000cb56:	4b03      	ldr	r3, [pc, #12]	; (1000cb64 <at_ble_characteristic_value_get+0x3c>)
1000cb58:	4798      	blx	r3
1000cb5a:	bd70      	pop	{r4, r5, r6, pc}
1000cb5c:	1000ca05 	.word	0x1000ca05
1000cb60:	1000f957 	.word	0x1000f957
1000cb64:	1000e771 	.word	0x1000e771

1000cb68 <at_ble_write_authorize_reply>:
1000cb68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb6a:	b085      	sub	sp, #20
1000cb6c:	1c04      	adds	r4, r0, #0
1000cb6e:	9101      	str	r1, [sp, #4]
1000cb70:	2900      	cmp	r1, #0
1000cb72:	d128      	bne.n	1000cbc6 <at_ble_write_authorize_reply+0x5e>
1000cb74:	8843      	ldrh	r3, [r0, #2]
1000cb76:	1c27      	adds	r7, r4, #0
1000cb78:	9300      	str	r3, [sp, #0]
1000cb7a:	1c18      	adds	r0, r3, #0
1000cb7c:	4b16      	ldr	r3, [pc, #88]	; (1000cbd8 <at_ble_write_authorize_reply+0x70>)
1000cb7e:	4798      	blx	r3
1000cb80:	3708      	adds	r7, #8
1000cb82:	2800      	cmp	r0, #0
1000cb84:	d009      	beq.n	1000cb9a <at_ble_write_authorize_reply+0x32>
1000cb86:	6880      	ldr	r0, [r0, #8]
1000cb88:	2800      	cmp	r0, #0
1000cb8a:	d006      	beq.n	1000cb9a <at_ble_write_authorize_reply+0x32>
1000cb8c:	88a3      	ldrh	r3, [r4, #4]
1000cb8e:	88e2      	ldrh	r2, [r4, #6]
1000cb90:	18c0      	adds	r0, r0, r3
1000cb92:	1c39      	adds	r1, r7, #0
1000cb94:	4b11      	ldr	r3, [pc, #68]	; (1000cbdc <at_ble_write_authorize_reply+0x74>)
1000cb96:	4798      	blx	r3
1000cb98:	e015      	b.n	1000cbc6 <at_ble_write_authorize_reply+0x5e>
1000cb9a:	ab02      	add	r3, sp, #8
1000cb9c:	1d9e      	adds	r6, r3, #6
1000cb9e:	2300      	movs	r3, #0
1000cba0:	4d0f      	ldr	r5, [pc, #60]	; (1000cbe0 <at_ble_write_authorize_reply+0x78>)
1000cba2:	8033      	strh	r3, [r6, #0]
1000cba4:	6829      	ldr	r1, [r5, #0]
1000cba6:	1c32      	adds	r2, r6, #0
1000cba8:	4b0e      	ldr	r3, [pc, #56]	; (1000cbe4 <at_ble_write_authorize_reply+0x7c>)
1000cbaa:	9800      	ldr	r0, [sp, #0]
1000cbac:	4798      	blx	r3
1000cbae:	682b      	ldr	r3, [r5, #0]
1000cbb0:	88a0      	ldrh	r0, [r4, #4]
1000cbb2:	88e2      	ldrh	r2, [r4, #6]
1000cbb4:	1818      	adds	r0, r3, r0
1000cbb6:	1c39      	adds	r1, r7, #0
1000cbb8:	4b08      	ldr	r3, [pc, #32]	; (1000cbdc <at_ble_write_authorize_reply+0x74>)
1000cbba:	4798      	blx	r3
1000cbbc:	8860      	ldrh	r0, [r4, #2]
1000cbbe:	8832      	ldrh	r2, [r6, #0]
1000cbc0:	6829      	ldr	r1, [r5, #0]
1000cbc2:	4b09      	ldr	r3, [pc, #36]	; (1000cbe8 <at_ble_write_authorize_reply+0x80>)
1000cbc4:	4798      	blx	r3
1000cbc6:	8860      	ldrh	r0, [r4, #2]
1000cbc8:	8821      	ldrh	r1, [r4, #0]
1000cbca:	9a01      	ldr	r2, [sp, #4]
1000cbcc:	4b07      	ldr	r3, [pc, #28]	; (1000cbec <at_ble_write_authorize_reply+0x84>)
1000cbce:	4798      	blx	r3
1000cbd0:	2000      	movs	r0, #0
1000cbd2:	b005      	add	sp, #20
1000cbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbd6:	46c0      	nop			; (mov r8, r8)
1000cbd8:	1000ca05 	.word	0x1000ca05
1000cbdc:	1000f957 	.word	0x1000f957
1000cbe0:	100123ac 	.word	0x100123ac
1000cbe4:	1000cb29 	.word	0x1000cb29
1000cbe8:	1000caed 	.word	0x1000caed
1000cbec:	1000e34d 	.word	0x1000e34d

1000cbf0 <gatts_handle_read_req>:
1000cbf0:	b538      	push	{r3, r4, r5, lr}
1000cbf2:	1c0c      	adds	r4, r1, #0
1000cbf4:	4b07      	ldr	r3, [pc, #28]	; (1000cc14 <gatts_handle_read_req+0x24>)
1000cbf6:	4798      	blx	r3
1000cbf8:	8865      	ldrh	r5, [r4, #2]
1000cbfa:	4b07      	ldr	r3, [pc, #28]	; (1000cc18 <gatts_handle_read_req+0x28>)
1000cbfc:	1c28      	adds	r0, r5, #0
1000cbfe:	4798      	blx	r3
1000cc00:	7883      	ldrb	r3, [r0, #2]
1000cc02:	2026      	movs	r0, #38	; 0x26
1000cc04:	07db      	lsls	r3, r3, #31
1000cc06:	d404      	bmi.n	1000cc12 <gatts_handle_read_req+0x22>
1000cc08:	8820      	ldrh	r0, [r4, #0]
1000cc0a:	1c29      	adds	r1, r5, #0
1000cc0c:	4b03      	ldr	r3, [pc, #12]	; (1000cc1c <gatts_handle_read_req+0x2c>)
1000cc0e:	4798      	blx	r3
1000cc10:	203b      	movs	r0, #59	; 0x3b
1000cc12:	bd38      	pop	{r3, r4, r5, pc}
1000cc14:	1000e291 	.word	0x1000e291
1000cc18:	1000ca05 	.word	0x1000ca05
1000cc1c:	1000ca45 	.word	0x1000ca45

1000cc20 <gatts_handle_att_info_req>:
1000cc20:	b538      	push	{r3, r4, r5, lr}
1000cc22:	1c0d      	adds	r5, r1, #0
1000cc24:	4b0a      	ldr	r3, [pc, #40]	; (1000cc50 <gatts_handle_att_info_req+0x30>)
1000cc26:	1c14      	adds	r4, r2, #0
1000cc28:	4798      	blx	r3
1000cc2a:	882d      	ldrh	r5, [r5, #0]
1000cc2c:	4b09      	ldr	r3, [pc, #36]	; (1000cc54 <gatts_handle_att_info_req+0x34>)
1000cc2e:	1c28      	adds	r0, r5, #0
1000cc30:	4798      	blx	r3
1000cc32:	0a22      	lsrs	r2, r4, #8
1000cc34:	1c03      	adds	r3, r0, #0
1000cc36:	4c08      	ldr	r4, [pc, #32]	; (1000cc58 <gatts_handle_att_info_req+0x38>)
1000cc38:	b291      	uxth	r1, r2
1000cc3a:	2800      	cmp	r0, #0
1000cc3c:	d003      	beq.n	1000cc46 <gatts_handle_att_info_req+0x26>
1000cc3e:	8882      	ldrh	r2, [r0, #4]
1000cc40:	2300      	movs	r3, #0
1000cc42:	1c28      	adds	r0, r5, #0
1000cc44:	e001      	b.n	1000cc4a <gatts_handle_att_info_req+0x2a>
1000cc46:	1c28      	adds	r0, r5, #0
1000cc48:	2201      	movs	r2, #1
1000cc4a:	47a0      	blx	r4
1000cc4c:	203b      	movs	r0, #59	; 0x3b
1000cc4e:	bd38      	pop	{r3, r4, r5, pc}
1000cc50:	1000e2d5 	.word	0x1000e2d5
1000cc54:	1000ca05 	.word	0x1000ca05
1000cc58:	1000e391 	.word	0x1000e391

1000cc5c <gatts_handle_write_req>:
1000cc5c:	b510      	push	{r4, lr}
1000cc5e:	1c14      	adds	r4, r2, #0
1000cc60:	4b07      	ldr	r3, [pc, #28]	; (1000cc80 <gatts_handle_write_req+0x24>)
1000cc62:	4798      	blx	r3
1000cc64:	4b07      	ldr	r3, [pc, #28]	; (1000cc84 <gatts_handle_write_req+0x28>)
1000cc66:	8860      	ldrh	r0, [r4, #2]
1000cc68:	4798      	blx	r3
1000cc6a:	2302      	movs	r3, #2
1000cc6c:	7881      	ldrb	r1, [r0, #2]
1000cc6e:	2022      	movs	r0, #34	; 0x22
1000cc70:	4019      	ands	r1, r3
1000cc72:	d103      	bne.n	1000cc7c <gatts_handle_write_req+0x20>
1000cc74:	1c20      	adds	r0, r4, #0
1000cc76:	4b04      	ldr	r3, [pc, #16]	; (1000cc88 <gatts_handle_write_req+0x2c>)
1000cc78:	4798      	blx	r3
1000cc7a:	201f      	movs	r0, #31
1000cc7c:	bd10      	pop	{r4, pc}
1000cc7e:	46c0      	nop			; (mov r8, r8)
1000cc80:	1000e29d 	.word	0x1000e29d
1000cc84:	1000ca05 	.word	0x1000ca05
1000cc88:	1000cb69 	.word	0x1000cb69

1000cc8c <init_l2cc_task_module>:
1000cc8c:	220a      	movs	r2, #10
1000cc8e:	4b01      	ldr	r3, [pc, #4]	; (1000cc94 <init_l2cc_task_module+0x8>)
1000cc90:	701a      	strb	r2, [r3, #0]
1000cc92:	4770      	bx	lr
1000cc94:	100123a9 	.word	0x100123a9

1000cc98 <l2cc_data_send_rsp_handler>:
1000cc98:	b510      	push	{r4, lr}
1000cc9a:	7802      	ldrb	r2, [r0, #0]
1000cc9c:	700a      	strb	r2, [r1, #0]
1000cc9e:	7883      	ldrb	r3, [r0, #2]
1000cca0:	7844      	ldrb	r4, [r0, #1]
1000cca2:	021b      	lsls	r3, r3, #8
1000cca4:	4323      	orrs	r3, r4
1000cca6:	804b      	strh	r3, [r1, #2]
1000cca8:	7903      	ldrb	r3, [r0, #4]
1000ccaa:	78c0      	ldrb	r0, [r0, #3]
1000ccac:	021b      	lsls	r3, r3, #8
1000ccae:	4303      	orrs	r3, r0
1000ccb0:	808b      	strh	r3, [r1, #4]
1000ccb2:	2a00      	cmp	r2, #0
1000ccb4:	d103      	bne.n	1000ccbe <l2cc_data_send_rsp_handler+0x26>
1000ccb6:	4a02      	ldr	r2, [pc, #8]	; (1000ccc0 <l2cc_data_send_rsp_handler+0x28>)
1000ccb8:	7813      	ldrb	r3, [r2, #0]
1000ccba:	3301      	adds	r3, #1
1000ccbc:	7013      	strb	r3, [r2, #0]
1000ccbe:	bd10      	pop	{r4, pc}
1000ccc0:	100123a9 	.word	0x100123a9

1000ccc4 <l2cc_data_received_handler>:
1000ccc4:	b508      	push	{r3, lr}
1000ccc6:	1c03      	adds	r3, r0, #0
1000ccc8:	7842      	ldrb	r2, [r0, #1]
1000ccca:	7800      	ldrb	r0, [r0, #0]
1000cccc:	0212      	lsls	r2, r2, #8
1000ccce:	4302      	orrs	r2, r0
1000ccd0:	800a      	strh	r2, [r1, #0]
1000ccd2:	78da      	ldrb	r2, [r3, #3]
1000ccd4:	7898      	ldrb	r0, [r3, #2]
1000ccd6:	0212      	lsls	r2, r2, #8
1000ccd8:	4302      	orrs	r2, r0
1000ccda:	804a      	strh	r2, [r1, #2]
1000ccdc:	795a      	ldrb	r2, [r3, #5]
1000ccde:	7918      	ldrb	r0, [r3, #4]
1000cce0:	0212      	lsls	r2, r2, #8
1000cce2:	4302      	orrs	r2, r0
1000cce4:	808a      	strh	r2, [r1, #4]
1000cce6:	1d88      	adds	r0, r1, #6
1000cce8:	1d99      	adds	r1, r3, #6
1000ccea:	4b01      	ldr	r3, [pc, #4]	; (1000ccf0 <l2cc_data_received_handler+0x2c>)
1000ccec:	4798      	blx	r3
1000ccee:	bd08      	pop	{r3, pc}
1000ccf0:	1000f957 	.word	0x1000f957

1000ccf4 <at_ble_authenticate>:
1000ccf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccf6:	1c0c      	adds	r4, r1, #0
1000ccf8:	211f      	movs	r1, #31
1000ccfa:	b08b      	sub	sp, #44	; 0x2c
1000ccfc:	9307      	str	r3, [sp, #28]
1000ccfe:	ab02      	add	r3, sp, #8
1000cd00:	18c9      	adds	r1, r1, r3
1000cd02:	230f      	movs	r3, #15
1000cd04:	700b      	strb	r3, [r1, #0]
1000cd06:	4b40      	ldr	r3, [pc, #256]	; (1000ce08 <at_ble_authenticate+0x114>)
1000cd08:	1c05      	adds	r5, r0, #0
1000cd0a:	1c16      	adds	r6, r2, #0
1000cd0c:	4798      	blx	r3
1000cd0e:	1c07      	adds	r7, r0, #0
1000cd10:	2001      	movs	r0, #1
1000cd12:	2f07      	cmp	r7, #7
1000cd14:	d875      	bhi.n	1000ce02 <at_ble_authenticate+0x10e>
1000cd16:	2c00      	cmp	r4, #0
1000cd18:	d113      	bne.n	1000cd42 <at_ble_authenticate+0x4e>
1000cd1a:	2312      	movs	r3, #18
1000cd1c:	435f      	muls	r7, r3
1000cd1e:	4b3b      	ldr	r3, [pc, #236]	; (1000ce0c <at_ble_authenticate+0x118>)
1000cd20:	5cfb      	ldrb	r3, [r7, r3]
1000cd22:	4283      	cmp	r3, r0
1000cd24:	d001      	beq.n	1000cd2a <at_ble_authenticate+0x36>
1000cd26:	20cf      	movs	r0, #207	; 0xcf
1000cd28:	e06b      	b.n	1000ce02 <at_ble_authenticate+0x10e>
1000cd2a:	9504      	str	r5, [sp, #16]
1000cd2c:	9400      	str	r4, [sp, #0]
1000cd2e:	9401      	str	r4, [sp, #4]
1000cd30:	9402      	str	r4, [sp, #8]
1000cd32:	9403      	str	r4, [sp, #12]
1000cd34:	1c20      	adds	r0, r4, #0
1000cd36:	1c21      	adds	r1, r4, #0
1000cd38:	1c22      	adds	r2, r4, #0
1000cd3a:	1c23      	adds	r3, r4, #0
1000cd3c:	4d34      	ldr	r5, [pc, #208]	; (1000ce10 <at_ble_authenticate+0x11c>)
1000cd3e:	47a8      	blx	r5
1000cd40:	e05e      	b.n	1000ce00 <at_ble_authenticate+0x10c>
1000cd42:	7922      	ldrb	r2, [r4, #4]
1000cd44:	2a06      	cmp	r2, #6
1000cd46:	d9ee      	bls.n	1000cd26 <at_ble_authenticate+0x32>
1000cd48:	7963      	ldrb	r3, [r4, #5]
1000cd4a:	2b10      	cmp	r3, #16
1000cd4c:	d8eb      	bhi.n	1000cd26 <at_ble_authenticate+0x32>
1000cd4e:	429a      	cmp	r2, r3
1000cd50:	d8e9      	bhi.n	1000cd26 <at_ble_authenticate+0x32>
1000cd52:	7a23      	ldrb	r3, [r4, #8]
1000cd54:	2b04      	cmp	r3, #4
1000cd56:	d8e6      	bhi.n	1000cd26 <at_ble_authenticate+0x32>
1000cd58:	79a3      	ldrb	r3, [r4, #6]
1000cd5a:	2b07      	cmp	r3, #7
1000cd5c:	d8e3      	bhi.n	1000cd26 <at_ble_authenticate+0x32>
1000cd5e:	79e3      	ldrb	r3, [r4, #7]
1000cd60:	2b07      	cmp	r3, #7
1000cd62:	d8e0      	bhi.n	1000cd26 <at_ble_authenticate+0x32>
1000cd64:	78a3      	ldrb	r3, [r4, #2]
1000cd66:	2b00      	cmp	r3, #0
1000cd68:	d006      	beq.n	1000cd78 <at_ble_authenticate+0x84>
1000cd6a:	2e00      	cmp	r6, #0
1000cd6c:	d0db      	beq.n	1000cd26 <at_ble_authenticate+0x32>
1000cd6e:	4829      	ldr	r0, [pc, #164]	; (1000ce14 <at_ble_authenticate+0x120>)
1000cd70:	1c31      	adds	r1, r6, #0
1000cd72:	221c      	movs	r2, #28
1000cd74:	4b28      	ldr	r3, [pc, #160]	; (1000ce18 <at_ble_authenticate+0x124>)
1000cd76:	4798      	blx	r3
1000cd78:	9b07      	ldr	r3, [sp, #28]
1000cd7a:	2b00      	cmp	r3, #0
1000cd7c:	d005      	beq.n	1000cd8a <at_ble_authenticate+0x96>
1000cd7e:	4827      	ldr	r0, [pc, #156]	; (1000ce1c <at_ble_authenticate+0x128>)
1000cd80:	1c19      	adds	r1, r3, #0
1000cd82:	309a      	adds	r0, #154	; 0x9a
1000cd84:	2210      	movs	r2, #16
1000cd86:	4b24      	ldr	r3, [pc, #144]	; (1000ce18 <at_ble_authenticate+0x124>)
1000cd88:	4798      	blx	r3
1000cd8a:	7863      	ldrb	r3, [r4, #1]
1000cd8c:	78a2      	ldrb	r2, [r4, #2]
1000cd8e:	009b      	lsls	r3, r3, #2
1000cd90:	4313      	orrs	r3, r2
1000cd92:	2212      	movs	r2, #18
1000cd94:	4357      	muls	r7, r2
1000cd96:	4a1d      	ldr	r2, [pc, #116]	; (1000ce0c <at_ble_authenticate+0x118>)
1000cd98:	b2db      	uxtb	r3, r3
1000cd9a:	5cba      	ldrb	r2, [r7, r2]
1000cd9c:	2a00      	cmp	r2, #0
1000cd9e:	d116      	bne.n	1000cdce <at_ble_authenticate+0xda>
1000cda0:	79a0      	ldrb	r0, [r4, #6]
1000cda2:	0742      	lsls	r2, r0, #29
1000cda4:	d502      	bpl.n	1000cdac <at_ble_authenticate+0xb8>
1000cda6:	9a07      	ldr	r2, [sp, #28]
1000cda8:	2a00      	cmp	r2, #0
1000cdaa:	d0bc      	beq.n	1000cd26 <at_ble_authenticate+0x32>
1000cdac:	07c2      	lsls	r2, r0, #31
1000cdae:	d501      	bpl.n	1000cdb4 <at_ble_authenticate+0xc0>
1000cdb0:	2e00      	cmp	r6, #0
1000cdb2:	d0b8      	beq.n	1000cd26 <at_ble_authenticate+0x32>
1000cdb4:	7966      	ldrb	r6, [r4, #5]
1000cdb6:	7821      	ldrb	r1, [r4, #0]
1000cdb8:	78e2      	ldrb	r2, [r4, #3]
1000cdba:	9600      	str	r6, [sp, #0]
1000cdbc:	9001      	str	r0, [sp, #4]
1000cdbe:	79e0      	ldrb	r0, [r4, #7]
1000cdc0:	9002      	str	r0, [sp, #8]
1000cdc2:	7a20      	ldrb	r0, [r4, #8]
1000cdc4:	4c16      	ldr	r4, [pc, #88]	; (1000ce20 <at_ble_authenticate+0x12c>)
1000cdc6:	9003      	str	r0, [sp, #12]
1000cdc8:	1c28      	adds	r0, r5, #0
1000cdca:	47a0      	blx	r4
1000cdcc:	e018      	b.n	1000ce00 <at_ble_authenticate+0x10c>
1000cdce:	2a01      	cmp	r2, #1
1000cdd0:	d1a9      	bne.n	1000cd26 <at_ble_authenticate+0x32>
1000cdd2:	79e0      	ldrb	r0, [r4, #7]
1000cdd4:	0742      	lsls	r2, r0, #29
1000cdd6:	d502      	bpl.n	1000cdde <at_ble_authenticate+0xea>
1000cdd8:	9a07      	ldr	r2, [sp, #28]
1000cdda:	2a00      	cmp	r2, #0
1000cddc:	d0a3      	beq.n	1000cd26 <at_ble_authenticate+0x32>
1000cdde:	07c2      	lsls	r2, r0, #31
1000cde0:	d501      	bpl.n	1000cde6 <at_ble_authenticate+0xf2>
1000cde2:	2e00      	cmp	r6, #0
1000cde4:	d09f      	beq.n	1000cd26 <at_ble_authenticate+0x32>
1000cde6:	7966      	ldrb	r6, [r4, #5]
1000cde8:	7821      	ldrb	r1, [r4, #0]
1000cdea:	78e2      	ldrb	r2, [r4, #3]
1000cdec:	9600      	str	r6, [sp, #0]
1000cdee:	79a6      	ldrb	r6, [r4, #6]
1000cdf0:	9002      	str	r0, [sp, #8]
1000cdf2:	9601      	str	r6, [sp, #4]
1000cdf4:	7a20      	ldrb	r0, [r4, #8]
1000cdf6:	9504      	str	r5, [sp, #16]
1000cdf8:	9003      	str	r0, [sp, #12]
1000cdfa:	4c05      	ldr	r4, [pc, #20]	; (1000ce10 <at_ble_authenticate+0x11c>)
1000cdfc:	2001      	movs	r0, #1
1000cdfe:	47a0      	blx	r4
1000ce00:	2000      	movs	r0, #0
1000ce02:	b00b      	add	sp, #44	; 0x2c
1000ce04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce06:	46c0      	nop			; (mov r8, r8)
1000ce08:	1000d19d 	.word	0x1000d19d
1000ce0c:	100132e2 	.word	0x100132e2
1000ce10:	1000d70d 	.word	0x1000d70d
1000ce14:	100133f0 	.word	0x100133f0
1000ce18:	1000f957 	.word	0x1000f957
1000ce1c:	10013372 	.word	0x10013372
1000ce20:	1000d4ed 	.word	0x1000d4ed

1000ce24 <at_ble_pair_key_reply>:
1000ce24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce26:	b085      	sub	sp, #20
1000ce28:	1c05      	adds	r5, r0, #0
1000ce2a:	1c0c      	adds	r4, r1, #0
1000ce2c:	1c16      	adds	r6, r2, #0
1000ce2e:	2100      	movs	r1, #0
1000ce30:	4668      	mov	r0, sp
1000ce32:	2210      	movs	r2, #16
1000ce34:	4b18      	ldr	r3, [pc, #96]	; (1000ce98 <at_ble_pair_key_reply+0x74>)
1000ce36:	4798      	blx	r3
1000ce38:	2101      	movs	r1, #1
1000ce3a:	2e00      	cmp	r6, #0
1000ce3c:	d101      	bne.n	1000ce42 <at_ble_pair_key_reply+0x1e>
1000ce3e:	1c31      	adds	r1, r6, #0
1000ce40:	466e      	mov	r6, sp
1000ce42:	2c00      	cmp	r4, #0
1000ce44:	d116      	bne.n	1000ce74 <at_ble_pair_key_reply+0x50>
1000ce46:	2701      	movs	r7, #1
1000ce48:	1c23      	adds	r3, r4, #0
1000ce4a:	1d70      	adds	r0, r6, #5
1000ce4c:	3e01      	subs	r6, #1
1000ce4e:	7802      	ldrb	r2, [r0, #0]
1000ce50:	3801      	subs	r0, #1
1000ce52:	3a30      	subs	r2, #48	; 0x30
1000ce54:	437a      	muls	r2, r7
1000ce56:	189b      	adds	r3, r3, r2
1000ce58:	220a      	movs	r2, #10
1000ce5a:	4357      	muls	r7, r2
1000ce5c:	42b0      	cmp	r0, r6
1000ce5e:	d1f6      	bne.n	1000ce4e <at_ble_pair_key_reply+0x2a>
1000ce60:	466a      	mov	r2, sp
1000ce62:	4668      	mov	r0, sp
1000ce64:	7013      	strb	r3, [r2, #0]
1000ce66:	0a1a      	lsrs	r2, r3, #8
1000ce68:	7042      	strb	r2, [r0, #1]
1000ce6a:	0c1a      	lsrs	r2, r3, #16
1000ce6c:	0e1b      	lsrs	r3, r3, #24
1000ce6e:	7082      	strb	r2, [r0, #2]
1000ce70:	70c3      	strb	r3, [r0, #3]
1000ce72:	e009      	b.n	1000ce88 <at_ble_pair_key_reply+0x64>
1000ce74:	20cf      	movs	r0, #207	; 0xcf
1000ce76:	2c01      	cmp	r4, #1
1000ce78:	d10c      	bne.n	1000ce94 <at_ble_pair_key_reply+0x70>
1000ce7a:	2300      	movs	r3, #0
1000ce7c:	4668      	mov	r0, sp
1000ce7e:	5cf2      	ldrb	r2, [r6, r3]
1000ce80:	54c2      	strb	r2, [r0, r3]
1000ce82:	3301      	adds	r3, #1
1000ce84:	2b10      	cmp	r3, #16
1000ce86:	d1f9      	bne.n	1000ce7c <at_ble_pair_key_reply+0x58>
1000ce88:	2004      	movs	r0, #4
1000ce8a:	466a      	mov	r2, sp
1000ce8c:	1c2b      	adds	r3, r5, #0
1000ce8e:	4c03      	ldr	r4, [pc, #12]	; (1000ce9c <at_ble_pair_key_reply+0x78>)
1000ce90:	47a0      	blx	r4
1000ce92:	2000      	movs	r0, #0
1000ce94:	b005      	add	sp, #20
1000ce96:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce98:	1000f969 	.word	0x1000f969
1000ce9c:	1000d789 	.word	0x1000d789

1000cea0 <at_ble_encryption_start>:
1000cea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cea2:	23cf      	movs	r3, #207	; 0xcf
1000cea4:	2900      	cmp	r1, #0
1000cea6:	d02b      	beq.n	1000cf00 <at_ble_encryption_start+0x60>
1000cea8:	2a05      	cmp	r2, #5
1000ceaa:	d829      	bhi.n	1000cf00 <at_ble_encryption_start+0x60>
1000ceac:	2701      	movs	r7, #1
1000ceae:	1c3d      	adds	r5, r7, #0
1000ceb0:	2433      	movs	r4, #51	; 0x33
1000ceb2:	4095      	lsls	r5, r2
1000ceb4:	4225      	tst	r5, r4
1000ceb6:	d023      	beq.n	1000cf00 <at_ble_encryption_start+0x60>
1000ceb8:	7e8c      	ldrb	r4, [r1, #26]
1000ceba:	3c07      	subs	r4, #7
1000cebc:	2c09      	cmp	r4, #9
1000cebe:	d81f      	bhi.n	1000cf00 <at_ble_encryption_start+0x60>
1000cec0:	4b10      	ldr	r3, [pc, #64]	; (1000cf04 <at_ble_encryption_start+0x64>)
1000cec2:	1c0c      	adds	r4, r1, #0
1000cec4:	2100      	movs	r1, #0
1000cec6:	1c15      	adds	r5, r2, #0
1000cec8:	1c06      	adds	r6, r0, #0
1000ceca:	4798      	blx	r3
1000cecc:	1c3b      	adds	r3, r7, #0
1000cece:	2807      	cmp	r0, #7
1000ced0:	d816      	bhi.n	1000cf00 <at_ble_encryption_start+0x60>
1000ced2:	2312      	movs	r3, #18
1000ced4:	4358      	muls	r0, r3
1000ced6:	4b0c      	ldr	r3, [pc, #48]	; (1000cf08 <at_ble_encryption_start+0x68>)
1000ced8:	5cc7      	ldrb	r7, [r0, r3]
1000ceda:	23e0      	movs	r3, #224	; 0xe0
1000cedc:	2f00      	cmp	r7, #0
1000cede:	d10f      	bne.n	1000cf00 <at_ble_encryption_start+0x60>
1000cee0:	1c21      	adds	r1, r4, #0
1000cee2:	221c      	movs	r2, #28
1000cee4:	4b09      	ldr	r3, [pc, #36]	; (1000cf0c <at_ble_encryption_start+0x6c>)
1000cee6:	480a      	ldr	r0, [pc, #40]	; (1000cf10 <at_ble_encryption_start+0x70>)
1000cee8:	4798      	blx	r3
1000ceea:	1c23      	adds	r3, r4, #0
1000ceec:	7ea1      	ldrb	r1, [r4, #26]
1000ceee:	8a22      	ldrh	r2, [r4, #16]
1000cef0:	3312      	adds	r3, #18
1000cef2:	9100      	str	r1, [sp, #0]
1000cef4:	9501      	str	r5, [sp, #4]
1000cef6:	1c21      	adds	r1, r4, #0
1000cef8:	1c30      	adds	r0, r6, #0
1000cefa:	4c06      	ldr	r4, [pc, #24]	; (1000cf14 <at_ble_encryption_start+0x74>)
1000cefc:	47a0      	blx	r4
1000cefe:	1c3b      	adds	r3, r7, #0
1000cf00:	1c18      	adds	r0, r3, #0
1000cf02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000cf04:	1000d19d 	.word	0x1000d19d
1000cf08:	100132e2 	.word	0x100132e2
1000cf0c:	1000f957 	.word	0x1000f957
1000cf10:	100133f0 	.word	0x100133f0
1000cf14:	1000d7d9 	.word	0x1000d7d9

1000cf18 <at_ble_encryption_request_reply>:
1000cf18:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000cf1a:	24cf      	movs	r4, #207	; 0xcf
1000cf1c:	2b00      	cmp	r3, #0
1000cf1e:	d011      	beq.n	1000cf44 <at_ble_encryption_request_reply+0x2c>
1000cf20:	2a00      	cmp	r2, #0
1000cf22:	d00a      	beq.n	1000cf3a <at_ble_encryption_request_reply+0x22>
1000cf24:	2905      	cmp	r1, #5
1000cf26:	d80d      	bhi.n	1000cf44 <at_ble_encryption_request_reply+0x2c>
1000cf28:	2501      	movs	r5, #1
1000cf2a:	2633      	movs	r6, #51	; 0x33
1000cf2c:	408d      	lsls	r5, r1
1000cf2e:	4235      	tst	r5, r6
1000cf30:	d008      	beq.n	1000cf44 <at_ble_encryption_request_reply+0x2c>
1000cf32:	7e9d      	ldrb	r5, [r3, #26]
1000cf34:	3d07      	subs	r5, #7
1000cf36:	2d09      	cmp	r5, #9
1000cf38:	d804      	bhi.n	1000cf44 <at_ble_encryption_request_reply+0x2c>
1000cf3a:	7e9c      	ldrb	r4, [r3, #26]
1000cf3c:	9400      	str	r4, [sp, #0]
1000cf3e:	4c02      	ldr	r4, [pc, #8]	; (1000cf48 <at_ble_encryption_request_reply+0x30>)
1000cf40:	47a0      	blx	r4
1000cf42:	2400      	movs	r4, #0
1000cf44:	1c20      	adds	r0, r4, #0
1000cf46:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000cf48:	1000d895 	.word	0x1000d895

1000cf4c <rx_callback>:
1000cf4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cf4e:	88c5      	ldrh	r5, [r0, #6]
1000cf50:	8807      	ldrh	r7, [r0, #0]
1000cf52:	8886      	ldrh	r6, [r0, #4]
1000cf54:	2d00      	cmp	r5, #0
1000cf56:	d10c      	bne.n	1000cf72 <rx_callback+0x26>
1000cf58:	4b19      	ldr	r3, [pc, #100]	; (1000cfc0 <rx_callback+0x74>)
1000cf5a:	1c38      	adds	r0, r7, #0
1000cf5c:	1c31      	adds	r1, r6, #0
1000cf5e:	1c2a      	adds	r2, r5, #0
1000cf60:	4798      	blx	r3
1000cf62:	1e03      	subs	r3, r0, #0
1000cf64:	d12a      	bne.n	1000cfbc <rx_callback+0x70>
1000cf66:	1c38      	adds	r0, r7, #0
1000cf68:	1c31      	adds	r1, r6, #0
1000cf6a:	1c1a      	adds	r2, r3, #0
1000cf6c:	4c15      	ldr	r4, [pc, #84]	; (1000cfc4 <rx_callback+0x78>)
1000cf6e:	47a0      	blx	r4
1000cf70:	e024      	b.n	1000cfbc <rx_callback+0x70>
1000cf72:	2296      	movs	r2, #150	; 0x96
1000cf74:	4c14      	ldr	r4, [pc, #80]	; (1000cfc8 <rx_callback+0x7c>)
1000cf76:	0092      	lsls	r2, r2, #2
1000cf78:	8823      	ldrh	r3, [r4, #0]
1000cf7a:	195b      	adds	r3, r3, r5
1000cf7c:	4293      	cmp	r3, r2
1000cf7e:	dd01      	ble.n	1000cf84 <rx_callback+0x38>
1000cf80:	2300      	movs	r3, #0
1000cf82:	8023      	strh	r3, [r4, #0]
1000cf84:	1c01      	adds	r1, r0, #0
1000cf86:	4a11      	ldr	r2, [pc, #68]	; (1000cfcc <rx_callback+0x80>)
1000cf88:	8823      	ldrh	r3, [r4, #0]
1000cf8a:	3108      	adds	r1, #8
1000cf8c:	189b      	adds	r3, r3, r2
1000cf8e:	9301      	str	r3, [sp, #4]
1000cf90:	1c18      	adds	r0, r3, #0
1000cf92:	1c2a      	adds	r2, r5, #0
1000cf94:	4b0e      	ldr	r3, [pc, #56]	; (1000cfd0 <rx_callback+0x84>)
1000cf96:	4798      	blx	r3
1000cf98:	1c38      	adds	r0, r7, #0
1000cf9a:	1c31      	adds	r1, r6, #0
1000cf9c:	9a01      	ldr	r2, [sp, #4]
1000cf9e:	4b08      	ldr	r3, [pc, #32]	; (1000cfc0 <rx_callback+0x74>)
1000cfa0:	4798      	blx	r3
1000cfa2:	2800      	cmp	r0, #0
1000cfa4:	d10a      	bne.n	1000cfbc <rx_callback+0x70>
1000cfa6:	4b09      	ldr	r3, [pc, #36]	; (1000cfcc <rx_callback+0x80>)
1000cfa8:	8822      	ldrh	r2, [r4, #0]
1000cfaa:	1c31      	adds	r1, r6, #0
1000cfac:	18d2      	adds	r2, r2, r3
1000cfae:	1c38      	adds	r0, r7, #0
1000cfb0:	1c2b      	adds	r3, r5, #0
1000cfb2:	4e04      	ldr	r6, [pc, #16]	; (1000cfc4 <rx_callback+0x78>)
1000cfb4:	47b0      	blx	r6
1000cfb6:	8823      	ldrh	r3, [r4, #0]
1000cfb8:	18ed      	adds	r5, r5, r3
1000cfba:	8025      	strh	r5, [r4, #0]
1000cfbc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cfbe:	46c0      	nop			; (mov r8, r8)
1000cfc0:	1000bdbd 	.word	0x1000bdbd
1000cfc4:	1000bd51 	.word	0x1000bd51
1000cfc8:	1001344c 	.word	0x1001344c
1000cfcc:	10013850 	.word	0x10013850
1000cfd0:	1000f957 	.word	0x1000f957

1000cfd4 <interface_send>:
1000cfd4:	b508      	push	{r3, lr}
1000cfd6:	4b02      	ldr	r3, [pc, #8]	; (1000cfe0 <interface_send+0xc>)
1000cfd8:	4798      	blx	r3
1000cfda:	2000      	movs	r0, #0
1000cfdc:	bd08      	pop	{r3, pc}
1000cfde:	46c0      	nop			; (mov r8, r8)
1000cfe0:	1000b0d9 	.word	0x1000b0d9

1000cfe4 <interface_init>:
1000cfe4:	2280      	movs	r2, #128	; 0x80
1000cfe6:	b510      	push	{r4, lr}
1000cfe8:	2100      	movs	r1, #0
1000cfea:	4c08      	ldr	r4, [pc, #32]	; (1000d00c <interface_init+0x28>)
1000cfec:	0092      	lsls	r2, r2, #2
1000cfee:	4808      	ldr	r0, [pc, #32]	; (1000d010 <interface_init+0x2c>)
1000cff0:	47a0      	blx	r4
1000cff2:	2296      	movs	r2, #150	; 0x96
1000cff4:	2100      	movs	r1, #0
1000cff6:	0092      	lsls	r2, r2, #2
1000cff8:	4806      	ldr	r0, [pc, #24]	; (1000d014 <interface_init+0x30>)
1000cffa:	47a0      	blx	r4
1000cffc:	2200      	movs	r2, #0
1000cffe:	4b06      	ldr	r3, [pc, #24]	; (1000d018 <interface_init+0x34>)
1000d000:	801a      	strh	r2, [r3, #0]
1000d002:	4a06      	ldr	r2, [pc, #24]	; (1000d01c <interface_init+0x38>)
1000d004:	4b06      	ldr	r3, [pc, #24]	; (1000d020 <interface_init+0x3c>)
1000d006:	601a      	str	r2, [r3, #0]
1000d008:	bd10      	pop	{r4, pc}
1000d00a:	46c0      	nop			; (mov r8, r8)
1000d00c:	1000f969 	.word	0x1000f969
1000d010:	10013650 	.word	0x10013650
1000d014:	10013850 	.word	0x10013850
1000d018:	1001344c 	.word	0x1001344c
1000d01c:	10013450 	.word	0x10013450
1000d020:	100123ac 	.word	0x100123ac

1000d024 <platform_cmd_cmpl_signal>:
1000d024:	2201      	movs	r2, #1
1000d026:	4b01      	ldr	r3, [pc, #4]	; (1000d02c <platform_cmd_cmpl_signal+0x8>)
1000d028:	601a      	str	r2, [r3, #0]
1000d02a:	4770      	bx	lr
1000d02c:	10012600 	.word	0x10012600

1000d030 <platform_cmd_cmpl_wait>:
1000d030:	b510      	push	{r4, lr}
1000d032:	1c04      	adds	r4, r0, #0
1000d034:	4b07      	ldr	r3, [pc, #28]	; (1000d054 <platform_cmd_cmpl_wait+0x24>)
1000d036:	681a      	ldr	r2, [r3, #0]
1000d038:	2a01      	cmp	r2, #1
1000d03a:	d003      	beq.n	1000d044 <platform_cmd_cmpl_wait+0x14>
1000d03c:	4b06      	ldr	r3, [pc, #24]	; (1000d058 <platform_cmd_cmpl_wait+0x28>)
1000d03e:	2000      	movs	r0, #0
1000d040:	4798      	blx	r3
1000d042:	e7f7      	b.n	1000d034 <platform_cmd_cmpl_wait+0x4>
1000d044:	6819      	ldr	r1, [r3, #0]
1000d046:	2901      	cmp	r1, #1
1000d048:	d102      	bne.n	1000d050 <platform_cmd_cmpl_wait+0x20>
1000d04a:	2200      	movs	r2, #0
1000d04c:	601a      	str	r2, [r3, #0]
1000d04e:	e000      	b.n	1000d052 <platform_cmd_cmpl_wait+0x22>
1000d050:	7022      	strb	r2, [r4, #0]
1000d052:	bd10      	pop	{r4, pc}
1000d054:	10012600 	.word	0x10012600
1000d058:	1000b181 	.word	0x1000b181

1000d05c <start_timer>:
1000d05c:	4770      	bx	lr

1000d05e <stop_timer>:
1000d05e:	4770      	bx	lr

1000d060 <dbg_le_set_bd_addr_req_handler>:
1000d060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d062:	466b      	mov	r3, sp
1000d064:	1dde      	adds	r6, r3, #7
1000d066:	2300      	movs	r3, #0
1000d068:	7033      	strb	r3, [r6, #0]
1000d06a:	230f      	movs	r3, #15
1000d06c:	4c13      	ldr	r4, [pc, #76]	; (1000d0bc <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d06e:	2703      	movs	r7, #3
1000d070:	7023      	strb	r3, [r4, #0]
1000d072:	2300      	movs	r3, #0
1000d074:	70e3      	strb	r3, [r4, #3]
1000d076:	4b12      	ldr	r3, [pc, #72]	; (1000d0c0 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d078:	1c01      	adds	r1, r0, #0
1000d07a:	881a      	ldrh	r2, [r3, #0]
1000d07c:	881b      	ldrh	r3, [r3, #0]
1000d07e:	7122      	strb	r2, [r4, #4]
1000d080:	0a1b      	lsrs	r3, r3, #8
1000d082:	2206      	movs	r2, #6
1000d084:	7163      	strb	r3, [r4, #5]
1000d086:	480f      	ldr	r0, [pc, #60]	; (1000d0c4 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d088:	4b0f      	ldr	r3, [pc, #60]	; (1000d0c8 <dbg_le_set_bd_addr_req_handler+0x68>)
1000d08a:	7067      	strb	r7, [r4, #1]
1000d08c:	70a7      	strb	r7, [r4, #2]
1000d08e:	4798      	blx	r3
1000d090:	4d0e      	ldr	r5, [pc, #56]	; (1000d0cc <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d092:	4b0f      	ldr	r3, [pc, #60]	; (1000d0d0 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d094:	210e      	movs	r1, #14
1000d096:	802b      	strh	r3, [r5, #0]
1000d098:	2306      	movs	r3, #6
1000d09a:	71a3      	strb	r3, [r4, #6]
1000d09c:	2300      	movs	r3, #0
1000d09e:	1c20      	adds	r0, r4, #0
1000d0a0:	71e3      	strb	r3, [r4, #7]
1000d0a2:	4b0c      	ldr	r3, [pc, #48]	; (1000d0d4 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d0a4:	80af      	strh	r7, [r5, #4]
1000d0a6:	4798      	blx	r3
1000d0a8:	1c30      	adds	r0, r6, #0
1000d0aa:	4b0b      	ldr	r3, [pc, #44]	; (1000d0d8 <dbg_le_set_bd_addr_req_handler+0x78>)
1000d0ac:	4798      	blx	r3
1000d0ae:	7833      	ldrb	r3, [r6, #0]
1000d0b0:	20e2      	movs	r0, #226	; 0xe2
1000d0b2:	2b00      	cmp	r3, #0
1000d0b4:	d101      	bne.n	1000d0ba <dbg_le_set_bd_addr_req_handler+0x5a>
1000d0b6:	68ab      	ldr	r3, [r5, #8]
1000d0b8:	7818      	ldrb	r0, [r3, #0]
1000d0ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d0bc:	10013650 	.word	0x10013650
1000d0c0:	100132e0 	.word	0x100132e0
1000d0c4:	10013658 	.word	0x10013658
1000d0c8:	1000f957 	.word	0x1000f957
1000d0cc:	100132d4 	.word	0x100132d4
1000d0d0:	00000329 	.word	0x00000329
1000d0d4:	1000cfd5 	.word	0x1000cfd5
1000d0d8:	1000d031 	.word	0x1000d031

1000d0dc <gapc_get_dev_info_cfm.constprop.1>:
1000d0dc:	b538      	push	{r3, r4, r5, lr}
1000d0de:	230b      	movs	r3, #11
1000d0e0:	4c27      	ldr	r4, [pc, #156]	; (1000d180 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d0e2:	7023      	strb	r3, [r4, #0]
1000d0e4:	3303      	adds	r3, #3
1000d0e6:	7063      	strb	r3, [r4, #1]
1000d0e8:	3329      	adds	r3, #41	; 0x29
1000d0ea:	70a3      	strb	r3, [r4, #2]
1000d0ec:	4b25      	ldr	r3, [pc, #148]	; (1000d184 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d0ee:	70e1      	strb	r1, [r4, #3]
1000d0f0:	881a      	ldrh	r2, [r3, #0]
1000d0f2:	881b      	ldrh	r3, [r3, #0]
1000d0f4:	7122      	strb	r2, [r4, #4]
1000d0f6:	0a1b      	lsrs	r3, r3, #8
1000d0f8:	7163      	strb	r3, [r4, #5]
1000d0fa:	2300      	movs	r3, #0
1000d0fc:	7220      	strb	r0, [r4, #8]
1000d0fe:	7263      	strb	r3, [r4, #9]
1000d100:	2801      	cmp	r0, #1
1000d102:	d02b      	beq.n	1000d15c <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d104:	4298      	cmp	r0, r3
1000d106:	d01b      	beq.n	1000d140 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d108:	2802      	cmp	r0, #2
1000d10a:	d12f      	bne.n	1000d16c <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d10c:	4b1e      	ldr	r3, [pc, #120]	; (1000d188 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d10e:	2112      	movs	r1, #18
1000d110:	1c1a      	adds	r2, r3, #0
1000d112:	32ce      	adds	r2, #206	; 0xce
1000d114:	8812      	ldrh	r2, [r2, #0]
1000d116:	72a2      	strb	r2, [r4, #10]
1000d118:	0a12      	lsrs	r2, r2, #8
1000d11a:	72e2      	strb	r2, [r4, #11]
1000d11c:	1c1a      	adds	r2, r3, #0
1000d11e:	32d0      	adds	r2, #208	; 0xd0
1000d120:	8812      	ldrh	r2, [r2, #0]
1000d122:	7322      	strb	r2, [r4, #12]
1000d124:	0a12      	lsrs	r2, r2, #8
1000d126:	7362      	strb	r2, [r4, #13]
1000d128:	1c1a      	adds	r2, r3, #0
1000d12a:	32d2      	adds	r2, #210	; 0xd2
1000d12c:	8812      	ldrh	r2, [r2, #0]
1000d12e:	33d4      	adds	r3, #212	; 0xd4
1000d130:	73a2      	strb	r2, [r4, #14]
1000d132:	0a12      	lsrs	r2, r2, #8
1000d134:	73e2      	strb	r2, [r4, #15]
1000d136:	881b      	ldrh	r3, [r3, #0]
1000d138:	7423      	strb	r3, [r4, #16]
1000d13a:	0a1b      	lsrs	r3, r3, #8
1000d13c:	7463      	strb	r3, [r4, #17]
1000d13e:	e016      	b.n	1000d16e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d140:	4b11      	ldr	r3, [pc, #68]	; (1000d188 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d142:	4912      	ldr	r1, [pc, #72]	; (1000d18c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d144:	33aa      	adds	r3, #170	; 0xaa
1000d146:	881d      	ldrh	r5, [r3, #0]
1000d148:	4811      	ldr	r0, [pc, #68]	; (1000d190 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d14a:	0a2b      	lsrs	r3, r5, #8
1000d14c:	72a5      	strb	r5, [r4, #10]
1000d14e:	72e3      	strb	r3, [r4, #11]
1000d150:	1c2a      	adds	r2, r5, #0
1000d152:	4b10      	ldr	r3, [pc, #64]	; (1000d194 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d154:	350c      	adds	r5, #12
1000d156:	4798      	blx	r3
1000d158:	b2a9      	uxth	r1, r5
1000d15a:	e008      	b.n	1000d16e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d15c:	4b0a      	ldr	r3, [pc, #40]	; (1000d188 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d15e:	210c      	movs	r1, #12
1000d160:	33cc      	adds	r3, #204	; 0xcc
1000d162:	881b      	ldrh	r3, [r3, #0]
1000d164:	72a3      	strb	r3, [r4, #10]
1000d166:	0a1b      	lsrs	r3, r3, #8
1000d168:	72e3      	strb	r3, [r4, #11]
1000d16a:	e000      	b.n	1000d16e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d16c:	210a      	movs	r1, #10
1000d16e:	1c0b      	adds	r3, r1, #0
1000d170:	3b08      	subs	r3, #8
1000d172:	71a3      	strb	r3, [r4, #6]
1000d174:	121b      	asrs	r3, r3, #8
1000d176:	71e3      	strb	r3, [r4, #7]
1000d178:	1c20      	adds	r0, r4, #0
1000d17a:	4b07      	ldr	r3, [pc, #28]	; (1000d198 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d17c:	4798      	blx	r3
1000d17e:	bd38      	pop	{r3, r4, r5, pc}
1000d180:	10013650 	.word	0x10013650
1000d184:	100132e0 	.word	0x100132e0
1000d188:	10013372 	.word	0x10013372
1000d18c:	1001341e 	.word	0x1001341e
1000d190:	1001365c 	.word	0x1001365c
1000d194:	1000f957 	.word	0x1000f957
1000d198:	1000cfd5 	.word	0x1000cfd5

1000d19c <check_ConnData_idx_role>:
1000d19c:	4b0c      	ldr	r3, [pc, #48]	; (1000d1d0 <check_ConnData_idx_role+0x34>)
1000d19e:	b570      	push	{r4, r5, r6, lr}
1000d1a0:	1c04      	adds	r4, r0, #0
1000d1a2:	2008      	movs	r0, #8
1000d1a4:	429c      	cmp	r4, r3
1000d1a6:	d011      	beq.n	1000d1cc <check_ConnData_idx_role+0x30>
1000d1a8:	2300      	movs	r3, #0
1000d1aa:	2212      	movs	r2, #18
1000d1ac:	435a      	muls	r2, r3
1000d1ae:	4d09      	ldr	r5, [pc, #36]	; (1000d1d4 <check_ConnData_idx_role+0x38>)
1000d1b0:	b2d8      	uxtb	r0, r3
1000d1b2:	1956      	adds	r6, r2, r5
1000d1b4:	8976      	ldrh	r6, [r6, #10]
1000d1b6:	42a6      	cmp	r6, r4
1000d1b8:	d104      	bne.n	1000d1c4 <check_ConnData_idx_role+0x28>
1000d1ba:	2900      	cmp	r1, #0
1000d1bc:	d006      	beq.n	1000d1cc <check_ConnData_idx_role+0x30>
1000d1be:	5d53      	ldrb	r3, [r2, r5]
1000d1c0:	700b      	strb	r3, [r1, #0]
1000d1c2:	e003      	b.n	1000d1cc <check_ConnData_idx_role+0x30>
1000d1c4:	3301      	adds	r3, #1
1000d1c6:	2b08      	cmp	r3, #8
1000d1c8:	d1ef      	bne.n	1000d1aa <check_ConnData_idx_role+0xe>
1000d1ca:	1c18      	adds	r0, r3, #0
1000d1cc:	bd70      	pop	{r4, r5, r6, pc}
1000d1ce:	46c0      	nop			; (mov r8, r8)
1000d1d0:	0000ffff 	.word	0x0000ffff
1000d1d4:	100132e2 	.word	0x100132e2

1000d1d8 <check_ConnData_emptyEntry>:
1000d1d8:	2300      	movs	r3, #0
1000d1da:	2212      	movs	r2, #18
1000d1dc:	435a      	muls	r2, r3
1000d1de:	4906      	ldr	r1, [pc, #24]	; (1000d1f8 <check_ConnData_emptyEntry+0x20>)
1000d1e0:	b2d8      	uxtb	r0, r3
1000d1e2:	1852      	adds	r2, r2, r1
1000d1e4:	8951      	ldrh	r1, [r2, #10]
1000d1e6:	4a05      	ldr	r2, [pc, #20]	; (1000d1fc <check_ConnData_emptyEntry+0x24>)
1000d1e8:	4291      	cmp	r1, r2
1000d1ea:	d003      	beq.n	1000d1f4 <check_ConnData_emptyEntry+0x1c>
1000d1ec:	3301      	adds	r3, #1
1000d1ee:	2b08      	cmp	r3, #8
1000d1f0:	d1f3      	bne.n	1000d1da <check_ConnData_emptyEntry+0x2>
1000d1f2:	1c18      	adds	r0, r3, #0
1000d1f4:	4770      	bx	lr
1000d1f6:	46c0      	nop			; (mov r8, r8)
1000d1f8:	100132e2 	.word	0x100132e2
1000d1fc:	0000ffff 	.word	0x0000ffff

1000d200 <gapc_cmp_evt>:
1000d200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d202:	780b      	ldrb	r3, [r1, #0]
1000d204:	1c05      	adds	r5, r0, #0
1000d206:	1e58      	subs	r0, r3, #1
1000d208:	784e      	ldrb	r6, [r1, #1]
1000d20a:	280f      	cmp	r0, #15
1000d20c:	d85a      	bhi.n	1000d2c4 <gapc_cmp_evt+0xc4>
1000d20e:	1c14      	adds	r4, r2, #0
1000d210:	f001 fb12 	bl	1000e838 <__gnu_thumb1_case_uqi>
1000d214:	5858440a 	.word	0x5858440a
1000d218:	4b584444 	.word	0x4b584444
1000d21c:	0825122d 	.word	0x0825122d
1000d220:	3e395858 	.word	0x3e395858
1000d224:	203b      	movs	r0, #59	; 0x3b
1000d226:	e04e      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d228:	203b      	movs	r0, #59	; 0x3b
1000d22a:	2e00      	cmp	r6, #0
1000d22c:	d04b      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d22e:	0a2d      	lsrs	r5, r5, #8
1000d230:	8015      	strh	r5, [r2, #0]
1000d232:	7096      	strb	r6, [r2, #2]
1000d234:	3835      	subs	r0, #53	; 0x35
1000d236:	e046      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d238:	466b      	mov	r3, sp
1000d23a:	1ddf      	adds	r7, r3, #7
1000d23c:	2301      	movs	r3, #1
1000d23e:	0a2d      	lsrs	r5, r5, #8
1000d240:	703b      	strb	r3, [r7, #0]
1000d242:	1c28      	adds	r0, r5, #0
1000d244:	1c39      	adds	r1, r7, #0
1000d246:	4b20      	ldr	r3, [pc, #128]	; (1000d2c8 <gapc_cmp_evt+0xc8>)
1000d248:	4798      	blx	r3
1000d24a:	2807      	cmp	r0, #7
1000d24c:	d803      	bhi.n	1000d256 <gapc_cmp_evt+0x56>
1000d24e:	783b      	ldrb	r3, [r7, #0]
1000d250:	203b      	movs	r0, #59	; 0x3b
1000d252:	2b00      	cmp	r3, #0
1000d254:	d037      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d256:	8065      	strh	r5, [r4, #2]
1000d258:	7126      	strb	r6, [r4, #4]
1000d25a:	2009      	movs	r0, #9
1000d25c:	e033      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d25e:	203b      	movs	r0, #59	; 0x3b
1000d260:	2e00      	cmp	r6, #0
1000d262:	d030      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d264:	0a2d      	lsrs	r5, r5, #8
1000d266:	8015      	strh	r5, [r2, #0]
1000d268:	7096      	strb	r6, [r2, #2]
1000d26a:	382d      	subs	r0, #45	; 0x2d
1000d26c:	e02b      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d26e:	203b      	movs	r0, #59	; 0x3b
1000d270:	2e00      	cmp	r6, #0
1000d272:	d028      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d274:	2300      	movs	r3, #0
1000d276:	0a2d      	lsrs	r5, r5, #8
1000d278:	8015      	strh	r5, [r2, #0]
1000d27a:	7096      	strb	r6, [r2, #2]
1000d27c:	8093      	strh	r3, [r2, #4]
1000d27e:	80d3      	strh	r3, [r2, #6]
1000d280:	8113      	strh	r3, [r2, #8]
1000d282:	3834      	subs	r0, #52	; 0x34
1000d284:	e01f      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d286:	203b      	movs	r0, #59	; 0x3b
1000d288:	2e00      	cmp	r6, #0
1000d28a:	d01c      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d28c:	7216      	strb	r6, [r2, #8]
1000d28e:	e003      	b.n	1000d298 <gapc_cmp_evt+0x98>
1000d290:	203b      	movs	r0, #59	; 0x3b
1000d292:	2e00      	cmp	r6, #0
1000d294:	d017      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d296:	7116      	strb	r6, [r2, #4]
1000d298:	3812      	subs	r0, #18
1000d29a:	e014      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d29c:	203b      	movs	r0, #59	; 0x3b
1000d29e:	2e00      	cmp	r6, #0
1000d2a0:	d011      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d2a2:	7093      	strb	r3, [r2, #2]
1000d2a4:	70d6      	strb	r6, [r2, #3]
1000d2a6:	382a      	subs	r0, #42	; 0x2a
1000d2a8:	e00d      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d2aa:	203b      	movs	r0, #59	; 0x3b
1000d2ac:	2e00      	cmp	r6, #0
1000d2ae:	d00a      	beq.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d2b0:	0a2d      	lsrs	r5, r5, #8
1000d2b2:	7016      	strb	r6, [r2, #0]
1000d2b4:	8055      	strh	r5, [r2, #2]
1000d2b6:	1d10      	adds	r0, r2, #4
1000d2b8:	2100      	movs	r1, #0
1000d2ba:	2205      	movs	r2, #5
1000d2bc:	4b03      	ldr	r3, [pc, #12]	; (1000d2cc <gapc_cmp_evt+0xcc>)
1000d2be:	4798      	blx	r3
1000d2c0:	2012      	movs	r0, #18
1000d2c2:	e000      	b.n	1000d2c6 <gapc_cmp_evt+0xc6>
1000d2c4:	2000      	movs	r0, #0
1000d2c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d2c8:	1000d19d 	.word	0x1000d19d
1000d2cc:	1000f969 	.word	0x1000f969

1000d2d0 <gapc_connection_cfm_handler>:
1000d2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2d2:	b085      	sub	sp, #20
1000d2d4:	1c1d      	adds	r5, r3, #0
1000d2d6:	ab0a      	add	r3, sp, #40	; 0x28
1000d2d8:	781b      	ldrb	r3, [r3, #0]
1000d2da:	9201      	str	r2, [sp, #4]
1000d2dc:	9302      	str	r3, [sp, #8]
1000d2de:	ab0b      	add	r3, sp, #44	; 0x2c
1000d2e0:	781b      	ldrb	r3, [r3, #0]
1000d2e2:	1c07      	adds	r7, r0, #0
1000d2e4:	9303      	str	r3, [sp, #12]
1000d2e6:	ab0c      	add	r3, sp, #48	; 0x30
1000d2e8:	881a      	ldrh	r2, [r3, #0]
1000d2ea:	2302      	movs	r3, #2
1000d2ec:	1c0e      	adds	r6, r1, #0
1000d2ee:	4c23      	ldr	r4, [pc, #140]	; (1000d37c <gapc_connection_cfm_handler+0xac>)
1000d2f0:	1c39      	adds	r1, r7, #0
1000d2f2:	7023      	strb	r3, [r4, #0]
1000d2f4:	330c      	adds	r3, #12
1000d2f6:	7063      	strb	r3, [r4, #1]
1000d2f8:	70a3      	strb	r3, [r4, #2]
1000d2fa:	4b21      	ldr	r3, [pc, #132]	; (1000d380 <gapc_connection_cfm_handler+0xb0>)
1000d2fc:	70e2      	strb	r2, [r4, #3]
1000d2fe:	881a      	ldrh	r2, [r3, #0]
1000d300:	881b      	ldrh	r3, [r3, #0]
1000d302:	7122      	strb	r2, [r4, #4]
1000d304:	0a1b      	lsrs	r3, r3, #8
1000d306:	4f1f      	ldr	r7, [pc, #124]	; (1000d384 <gapc_connection_cfm_handler+0xb4>)
1000d308:	2210      	movs	r2, #16
1000d30a:	481f      	ldr	r0, [pc, #124]	; (1000d388 <gapc_connection_cfm_handler+0xb8>)
1000d30c:	7163      	strb	r3, [r4, #5]
1000d30e:	47b8      	blx	r7
1000d310:	0a33      	lsrs	r3, r6, #8
1000d312:	7626      	strb	r6, [r4, #24]
1000d314:	7663      	strb	r3, [r4, #25]
1000d316:	9901      	ldr	r1, [sp, #4]
1000d318:	0c33      	lsrs	r3, r6, #16
1000d31a:	2210      	movs	r2, #16
1000d31c:	0e36      	lsrs	r6, r6, #24
1000d31e:	481b      	ldr	r0, [pc, #108]	; (1000d38c <gapc_connection_cfm_handler+0xbc>)
1000d320:	76a3      	strb	r3, [r4, #26]
1000d322:	76e6      	strb	r6, [r4, #27]
1000d324:	47b8      	blx	r7
1000d326:	1c23      	adds	r3, r4, #0
1000d328:	332c      	adds	r3, #44	; 0x2c
1000d32a:	701d      	strb	r5, [r3, #0]
1000d32c:	1c23      	adds	r3, r4, #0
1000d32e:	0a2a      	lsrs	r2, r5, #8
1000d330:	332d      	adds	r3, #45	; 0x2d
1000d332:	701a      	strb	r2, [r3, #0]
1000d334:	1c23      	adds	r3, r4, #0
1000d336:	0c2a      	lsrs	r2, r5, #16
1000d338:	332e      	adds	r3, #46	; 0x2e
1000d33a:	701a      	strb	r2, [r3, #0]
1000d33c:	1c23      	adds	r3, r4, #0
1000d33e:	0e2d      	lsrs	r5, r5, #24
1000d340:	332f      	adds	r3, #47	; 0x2f
1000d342:	466a      	mov	r2, sp
1000d344:	701d      	strb	r5, [r3, #0]
1000d346:	1c23      	adds	r3, r4, #0
1000d348:	7a12      	ldrb	r2, [r2, #8]
1000d34a:	3330      	adds	r3, #48	; 0x30
1000d34c:	701a      	strb	r2, [r3, #0]
1000d34e:	1c23      	adds	r3, r4, #0
1000d350:	2500      	movs	r5, #0
1000d352:	3331      	adds	r3, #49	; 0x31
1000d354:	466a      	mov	r2, sp
1000d356:	701d      	strb	r5, [r3, #0]
1000d358:	1c23      	adds	r3, r4, #0
1000d35a:	7b12      	ldrb	r2, [r2, #12]
1000d35c:	3332      	adds	r3, #50	; 0x32
1000d35e:	701a      	strb	r2, [r3, #0]
1000d360:	1c23      	adds	r3, r4, #0
1000d362:	3333      	adds	r3, #51	; 0x33
1000d364:	701d      	strb	r5, [r3, #0]
1000d366:	232c      	movs	r3, #44	; 0x2c
1000d368:	1c20      	adds	r0, r4, #0
1000d36a:	71a3      	strb	r3, [r4, #6]
1000d36c:	2134      	movs	r1, #52	; 0x34
1000d36e:	4b08      	ldr	r3, [pc, #32]	; (1000d390 <gapc_connection_cfm_handler+0xc0>)
1000d370:	71e5      	strb	r5, [r4, #7]
1000d372:	4798      	blx	r3
1000d374:	1c28      	adds	r0, r5, #0
1000d376:	b005      	add	sp, #20
1000d378:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d37a:	46c0      	nop			; (mov r8, r8)
1000d37c:	10013650 	.word	0x10013650
1000d380:	100132e0 	.word	0x100132e0
1000d384:	1000f957 	.word	0x1000f957
1000d388:	10013658 	.word	0x10013658
1000d38c:	1001366c 	.word	0x1001366c
1000d390:	1000cfd5 	.word	0x1000cfd5

1000d394 <gapc_con_req_ind>:
1000d394:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d396:	7845      	ldrb	r5, [r0, #1]
1000d398:	7803      	ldrb	r3, [r0, #0]
1000d39a:	4c30      	ldr	r4, [pc, #192]	; (1000d45c <gapc_con_req_ind+0xc8>)
1000d39c:	022d      	lsls	r5, r5, #8
1000d39e:	431d      	orrs	r5, r3
1000d3a0:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d3a2:	78c3      	ldrb	r3, [r0, #3]
1000d3a4:	7882      	ldrb	r2, [r0, #2]
1000d3a6:	b08b      	sub	sp, #44	; 0x2c
1000d3a8:	021b      	lsls	r3, r3, #8
1000d3aa:	431a      	orrs	r2, r3
1000d3ac:	466b      	mov	r3, sp
1000d3ae:	9205      	str	r2, [sp, #20]
1000d3b0:	8a9b      	ldrh	r3, [r3, #20]
1000d3b2:	2120      	movs	r1, #32
1000d3b4:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d3b6:	7943      	ldrb	r3, [r0, #5]
1000d3b8:	7902      	ldrb	r2, [r0, #4]
1000d3ba:	021b      	lsls	r3, r3, #8
1000d3bc:	431a      	orrs	r2, r3
1000d3be:	466b      	mov	r3, sp
1000d3c0:	9206      	str	r2, [sp, #24]
1000d3c2:	8b1b      	ldrh	r3, [r3, #24]
1000d3c4:	1c06      	adds	r6, r0, #0
1000d3c6:	8623      	strh	r3, [r4, #48]	; 0x30
1000d3c8:	79c3      	ldrb	r3, [r0, #7]
1000d3ca:	7982      	ldrb	r2, [r0, #6]
1000d3cc:	021b      	lsls	r3, r3, #8
1000d3ce:	431a      	orrs	r2, r3
1000d3d0:	466b      	mov	r3, sp
1000d3d2:	9207      	str	r2, [sp, #28]
1000d3d4:	466a      	mov	r2, sp
1000d3d6:	8b9b      	ldrh	r3, [r3, #28]
1000d3d8:	1852      	adds	r2, r2, r1
1000d3da:	8663      	strh	r3, [r4, #50]	; 0x32
1000d3dc:	7a43      	ldrb	r3, [r0, #9]
1000d3de:	1c01      	adds	r1, r0, #0
1000d3e0:	9308      	str	r3, [sp, #32]
1000d3e2:	1c23      	adds	r3, r4, #0
1000d3e4:	7812      	ldrb	r2, [r2, #0]
1000d3e6:	3377      	adds	r3, #119	; 0x77
1000d3e8:	3478      	adds	r4, #120	; 0x78
1000d3ea:	701a      	strb	r2, [r3, #0]
1000d3ec:	310a      	adds	r1, #10
1000d3ee:	2206      	movs	r2, #6
1000d3f0:	4b1b      	ldr	r3, [pc, #108]	; (1000d460 <gapc_con_req_ind+0xcc>)
1000d3f2:	1c20      	adds	r0, r4, #0
1000d3f4:	4798      	blx	r3
1000d3f6:	7c33      	ldrb	r3, [r6, #16]
1000d3f8:	9309      	str	r3, [sp, #36]	; 0x24
1000d3fa:	4b1a      	ldr	r3, [pc, #104]	; (1000d464 <gapc_con_req_ind+0xd0>)
1000d3fc:	4798      	blx	r3
1000d3fe:	4e1a      	ldr	r6, [pc, #104]	; (1000d468 <gapc_con_req_ind+0xd4>)
1000d400:	1e07      	subs	r7, r0, #0
1000d402:	2f07      	cmp	r7, #7
1000d404:	d81b      	bhi.n	1000d43e <gapc_con_req_ind+0xaa>
1000d406:	2312      	movs	r3, #18
1000d408:	4343      	muls	r3, r0
1000d40a:	18f0      	adds	r0, r6, r3
1000d40c:	8145      	strh	r5, [r0, #10]
1000d40e:	4669      	mov	r1, sp
1000d410:	2524      	movs	r5, #36	; 0x24
1000d412:	1949      	adds	r1, r1, r5
1000d414:	7809      	ldrb	r1, [r1, #0]
1000d416:	2206      	movs	r2, #6
1000d418:	54f1      	strb	r1, [r6, r3]
1000d41a:	2120      	movs	r1, #32
1000d41c:	466b      	mov	r3, sp
1000d41e:	185b      	adds	r3, r3, r1
1000d420:	781b      	ldrb	r3, [r3, #0]
1000d422:	1c21      	adds	r1, r4, #0
1000d424:	7043      	strb	r3, [r0, #1]
1000d426:	466b      	mov	r3, sp
1000d428:	8a9b      	ldrh	r3, [r3, #20]
1000d42a:	3002      	adds	r0, #2
1000d42c:	8143      	strh	r3, [r0, #10]
1000d42e:	466b      	mov	r3, sp
1000d430:	8b1b      	ldrh	r3, [r3, #24]
1000d432:	8183      	strh	r3, [r0, #12]
1000d434:	466b      	mov	r3, sp
1000d436:	8b9b      	ldrh	r3, [r3, #28]
1000d438:	81c3      	strh	r3, [r0, #14]
1000d43a:	4b09      	ldr	r3, [pc, #36]	; (1000d460 <gapc_con_req_ind+0xcc>)
1000d43c:	4798      	blx	r3
1000d43e:	2112      	movs	r1, #18
1000d440:	2300      	movs	r3, #0
1000d442:	434f      	muls	r7, r1
1000d444:	9300      	str	r3, [sp, #0]
1000d446:	9301      	str	r3, [sp, #4]
1000d448:	19f6      	adds	r6, r6, r7
1000d44a:	8971      	ldrh	r1, [r6, #10]
1000d44c:	4a07      	ldr	r2, [pc, #28]	; (1000d46c <gapc_con_req_ind+0xd8>)
1000d44e:	9102      	str	r1, [sp, #8]
1000d450:	1c10      	adds	r0, r2, #0
1000d452:	1c19      	adds	r1, r3, #0
1000d454:	4c06      	ldr	r4, [pc, #24]	; (1000d470 <gapc_con_req_ind+0xdc>)
1000d456:	47a0      	blx	r4
1000d458:	b00b      	add	sp, #44	; 0x2c
1000d45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d45c:	10013372 	.word	0x10013372
1000d460:	1000f957 	.word	0x1000f957
1000d464:	1000d1d9 	.word	0x1000d1d9
1000d468:	100132e2 	.word	0x100132e2
1000d46c:	1001266a 	.word	0x1001266a
1000d470:	1000d2d1 	.word	0x1000d2d1

1000d474 <gapc_disconnect_cmd_handler>:
1000d474:	2204      	movs	r2, #4
1000d476:	b510      	push	{r4, lr}
1000d478:	4b0c      	ldr	r3, [pc, #48]	; (1000d4ac <gapc_disconnect_cmd_handler+0x38>)
1000d47a:	2400      	movs	r4, #0
1000d47c:	701a      	strb	r2, [r3, #0]
1000d47e:	320a      	adds	r2, #10
1000d480:	705a      	strb	r2, [r3, #1]
1000d482:	709a      	strb	r2, [r3, #2]
1000d484:	4a0a      	ldr	r2, [pc, #40]	; (1000d4b0 <gapc_disconnect_cmd_handler+0x3c>)
1000d486:	70d9      	strb	r1, [r3, #3]
1000d488:	8811      	ldrh	r1, [r2, #0]
1000d48a:	8812      	ldrh	r2, [r2, #0]
1000d48c:	7119      	strb	r1, [r3, #4]
1000d48e:	0a12      	lsrs	r2, r2, #8
1000d490:	715a      	strb	r2, [r3, #5]
1000d492:	2201      	movs	r2, #1
1000d494:	721a      	strb	r2, [r3, #8]
1000d496:	1892      	adds	r2, r2, r2
1000d498:	7258      	strb	r0, [r3, #9]
1000d49a:	719a      	strb	r2, [r3, #6]
1000d49c:	71dc      	strb	r4, [r3, #7]
1000d49e:	1c18      	adds	r0, r3, #0
1000d4a0:	210a      	movs	r1, #10
1000d4a2:	4b04      	ldr	r3, [pc, #16]	; (1000d4b4 <gapc_disconnect_cmd_handler+0x40>)
1000d4a4:	4798      	blx	r3
1000d4a6:	1c20      	adds	r0, r4, #0
1000d4a8:	bd10      	pop	{r4, pc}
1000d4aa:	46c0      	nop			; (mov r8, r8)
1000d4ac:	10013650 	.word	0x10013650
1000d4b0:	100132e0 	.word	0x100132e0
1000d4b4:	1000cfd5 	.word	0x1000cfd5

1000d4b8 <gapc_disconnect_ind>:
1000d4b8:	1c02      	adds	r2, r0, #0
1000d4ba:	b508      	push	{r3, lr}
1000d4bc:	7843      	ldrb	r3, [r0, #1]
1000d4be:	7800      	ldrb	r0, [r0, #0]
1000d4c0:	021b      	lsls	r3, r3, #8
1000d4c2:	4318      	orrs	r0, r3
1000d4c4:	8008      	strh	r0, [r1, #0]
1000d4c6:	7893      	ldrb	r3, [r2, #2]
1000d4c8:	708b      	strb	r3, [r1, #2]
1000d4ca:	2100      	movs	r1, #0
1000d4cc:	4b05      	ldr	r3, [pc, #20]	; (1000d4e4 <gapc_disconnect_ind+0x2c>)
1000d4ce:	4798      	blx	r3
1000d4d0:	2807      	cmp	r0, #7
1000d4d2:	d806      	bhi.n	1000d4e2 <gapc_disconnect_ind+0x2a>
1000d4d4:	2312      	movs	r3, #18
1000d4d6:	4358      	muls	r0, r3
1000d4d8:	4b03      	ldr	r3, [pc, #12]	; (1000d4e8 <gapc_disconnect_ind+0x30>)
1000d4da:	1818      	adds	r0, r3, r0
1000d4dc:	2301      	movs	r3, #1
1000d4de:	425b      	negs	r3, r3
1000d4e0:	8143      	strh	r3, [r0, #10]
1000d4e2:	bd08      	pop	{r3, pc}
1000d4e4:	1000d19d 	.word	0x1000d19d
1000d4e8:	100132e2 	.word	0x100132e2

1000d4ec <gapc_bond_cmd_handler>:
1000d4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d4ee:	9300      	str	r3, [sp, #0]
1000d4f0:	2312      	movs	r3, #18
1000d4f2:	1c04      	adds	r4, r0, #0
1000d4f4:	a808      	add	r0, sp, #32
1000d4f6:	7807      	ldrb	r7, [r0, #0]
1000d4f8:	a809      	add	r0, sp, #36	; 0x24
1000d4fa:	7806      	ldrb	r6, [r0, #0]
1000d4fc:	a80a      	add	r0, sp, #40	; 0x28
1000d4fe:	7805      	ldrb	r5, [r0, #0]
1000d500:	a80b      	add	r0, sp, #44	; 0x2c
1000d502:	7800      	ldrb	r0, [r0, #0]
1000d504:	9001      	str	r0, [sp, #4]
1000d506:	4810      	ldr	r0, [pc, #64]	; (1000d548 <gapc_bond_cmd_handler+0x5c>)
1000d508:	7003      	strb	r3, [r0, #0]
1000d50a:	230e      	movs	r3, #14
1000d50c:	70c4      	strb	r4, [r0, #3]
1000d50e:	4c0f      	ldr	r4, [pc, #60]	; (1000d54c <gapc_bond_cmd_handler+0x60>)
1000d510:	7043      	strb	r3, [r0, #1]
1000d512:	7083      	strb	r3, [r0, #2]
1000d514:	8823      	ldrh	r3, [r4, #0]
1000d516:	8824      	ldrh	r4, [r4, #0]
1000d518:	7103      	strb	r3, [r0, #4]
1000d51a:	466b      	mov	r3, sp
1000d51c:	781b      	ldrb	r3, [r3, #0]
1000d51e:	0a24      	lsrs	r4, r4, #8
1000d520:	72c3      	strb	r3, [r0, #11]
1000d522:	466b      	mov	r3, sp
1000d524:	791b      	ldrb	r3, [r3, #4]
1000d526:	7144      	strb	r4, [r0, #5]
1000d528:	73c3      	strb	r3, [r0, #15]
1000d52a:	2308      	movs	r3, #8
1000d52c:	7183      	strb	r3, [r0, #6]
1000d52e:	2300      	movs	r3, #0
1000d530:	240a      	movs	r4, #10
1000d532:	7241      	strb	r1, [r0, #9]
1000d534:	71c3      	strb	r3, [r0, #7]
1000d536:	2110      	movs	r1, #16
1000d538:	4b05      	ldr	r3, [pc, #20]	; (1000d550 <gapc_bond_cmd_handler+0x64>)
1000d53a:	7307      	strb	r7, [r0, #12]
1000d53c:	7346      	strb	r6, [r0, #13]
1000d53e:	7385      	strb	r5, [r0, #14]
1000d540:	7204      	strb	r4, [r0, #8]
1000d542:	7282      	strb	r2, [r0, #10]
1000d544:	4798      	blx	r3
1000d546:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d548:	10013650 	.word	0x10013650
1000d54c:	100132e0 	.word	0x100132e0
1000d550:	1000cfd5 	.word	0x1000cfd5

1000d554 <gapc_bond_ind>:
1000d554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d556:	780e      	ldrb	r6, [r1, #0]
1000d558:	1c03      	adds	r3, r0, #0
1000d55a:	1eb0      	subs	r0, r6, #2
1000d55c:	2805      	cmp	r0, #5
1000d55e:	d85d      	bhi.n	1000d61c <gapc_bond_ind+0xc8>
1000d560:	1c15      	adds	r5, r2, #0
1000d562:	1c0c      	adds	r4, r1, #0
1000d564:	f001 f968 	bl	1000e838 <__gnu_thumb1_case_uqi>
1000d568:	2f5a030d 	.word	0x2f5a030d
1000d56c:	4740      	.short	0x4740
1000d56e:	2009      	movs	r0, #9
1000d570:	2a00      	cmp	r2, #0
1000d572:	d054      	beq.n	1000d61e <gapc_bond_ind+0xca>
1000d574:	0a1b      	lsrs	r3, r3, #8
1000d576:	8053      	strh	r3, [r2, #2]
1000d578:	788b      	ldrb	r3, [r1, #2]
1000d57a:	4829      	ldr	r0, [pc, #164]	; (1000d620 <gapc_bond_ind+0xcc>)
1000d57c:	7113      	strb	r3, [r2, #4]
1000d57e:	2100      	movs	r1, #0
1000d580:	e01c      	b.n	1000d5bc <gapc_bond_ind+0x68>
1000d582:	2009      	movs	r0, #9
1000d584:	2a00      	cmp	r2, #0
1000d586:	d04a      	beq.n	1000d61e <gapc_bond_ind+0xca>
1000d588:	4c25      	ldr	r4, [pc, #148]	; (1000d620 <gapc_bond_ind+0xcc>)
1000d58a:	0a1b      	lsrs	r3, r3, #8
1000d58c:	8053      	strh	r3, [r2, #2]
1000d58e:	788b      	ldrb	r3, [r1, #2]
1000d590:	2700      	movs	r7, #0
1000d592:	1c10      	adds	r0, r2, #0
1000d594:	1c21      	adds	r1, r4, #0
1000d596:	7013      	strb	r3, [r2, #0]
1000d598:	4e22      	ldr	r6, [pc, #136]	; (1000d624 <gapc_bond_ind+0xd0>)
1000d59a:	7117      	strb	r7, [r2, #4]
1000d59c:	312e      	adds	r1, #46	; 0x2e
1000d59e:	2217      	movs	r2, #23
1000d5a0:	3032      	adds	r0, #50	; 0x32
1000d5a2:	47b0      	blx	r6
1000d5a4:	1c28      	adds	r0, r5, #0
1000d5a6:	1c21      	adds	r1, r4, #0
1000d5a8:	2210      	movs	r2, #16
1000d5aa:	311e      	adds	r1, #30
1000d5ac:	3022      	adds	r0, #34	; 0x22
1000d5ae:	47b0      	blx	r6
1000d5b0:	1ca1      	adds	r1, r4, #2
1000d5b2:	1da8      	adds	r0, r5, #6
1000d5b4:	221c      	movs	r2, #28
1000d5b6:	47b0      	blx	r6
1000d5b8:	1c20      	adds	r0, r4, #0
1000d5ba:	1c39      	adds	r1, r7, #0
1000d5bc:	2246      	movs	r2, #70	; 0x46
1000d5be:	4b1a      	ldr	r3, [pc, #104]	; (1000d628 <gapc_bond_ind+0xd4>)
1000d5c0:	4798      	blx	r3
1000d5c2:	2009      	movs	r0, #9
1000d5c4:	e02b      	b.n	1000d61e <gapc_bond_ind+0xca>
1000d5c6:	4d16      	ldr	r5, [pc, #88]	; (1000d620 <gapc_bond_ind+0xcc>)
1000d5c8:	3102      	adds	r1, #2
1000d5ca:	1c28      	adds	r0, r5, #0
1000d5cc:	2210      	movs	r2, #16
1000d5ce:	4e15      	ldr	r6, [pc, #84]	; (1000d624 <gapc_bond_ind+0xd0>)
1000d5d0:	302e      	adds	r0, #46	; 0x2e
1000d5d2:	47b0      	blx	r6
1000d5d4:	1c28      	adds	r0, r5, #0
1000d5d6:	1c21      	adds	r1, r4, #0
1000d5d8:	303f      	adds	r0, #63	; 0x3f
1000d5da:	3112      	adds	r1, #18
1000d5dc:	2206      	movs	r2, #6
1000d5de:	47b0      	blx	r6
1000d5e0:	7e23      	ldrb	r3, [r4, #24]
1000d5e2:	353e      	adds	r5, #62	; 0x3e
1000d5e4:	702b      	strb	r3, [r5, #0]
1000d5e6:	e019      	b.n	1000d61c <gapc_bond_ind+0xc8>
1000d5e8:	480d      	ldr	r0, [pc, #52]	; (1000d620 <gapc_bond_ind+0xcc>)
1000d5ea:	3102      	adds	r1, #2
1000d5ec:	2210      	movs	r2, #16
1000d5ee:	4b0d      	ldr	r3, [pc, #52]	; (1000d624 <gapc_bond_ind+0xd0>)
1000d5f0:	301e      	adds	r0, #30
1000d5f2:	4798      	blx	r3
1000d5f4:	e012      	b.n	1000d61c <gapc_bond_ind+0xc8>
1000d5f6:	4d0a      	ldr	r5, [pc, #40]	; (1000d620 <gapc_bond_ind+0xcc>)
1000d5f8:	3102      	adds	r1, #2
1000d5fa:	2210      	movs	r2, #16
1000d5fc:	4e09      	ldr	r6, [pc, #36]	; (1000d624 <gapc_bond_ind+0xd0>)
1000d5fe:	1ca8      	adds	r0, r5, #2
1000d600:	47b0      	blx	r6
1000d602:	1c28      	adds	r0, r5, #0
1000d604:	1c21      	adds	r1, r4, #0
1000d606:	7ce3      	ldrb	r3, [r4, #19]
1000d608:	7ca2      	ldrb	r2, [r4, #18]
1000d60a:	021b      	lsls	r3, r3, #8
1000d60c:	4313      	orrs	r3, r2
1000d60e:	3014      	adds	r0, #20
1000d610:	3114      	adds	r1, #20
1000d612:	2208      	movs	r2, #8
1000d614:	826b      	strh	r3, [r5, #18]
1000d616:	47b0      	blx	r6
1000d618:	7f23      	ldrb	r3, [r4, #28]
1000d61a:	772b      	strb	r3, [r5, #28]
1000d61c:	2000      	movs	r0, #0
1000d61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d620:	10012624 	.word	0x10012624
1000d624:	1000f957 	.word	0x1000f957
1000d628:	1000f969 	.word	0x1000f969

1000d62c <gapc_bond_req_ind>:
1000d62c:	b570      	push	{r4, r5, r6, lr}
1000d62e:	780c      	ldrb	r4, [r1, #0]
1000d630:	1c03      	adds	r3, r0, #0
1000d632:	7849      	ldrb	r1, [r1, #1]
1000d634:	2c07      	cmp	r4, #7
1000d636:	d85c      	bhi.n	1000d6f2 <gapc_bond_req_ind+0xc6>
1000d638:	1c20      	adds	r0, r4, #0
1000d63a:	f001 f8fd 	bl	1000e838 <__gnu_thumb1_case_uqi>
1000d63e:	5a04      	.short	0x5a04
1000d640:	5a0b5a5a 	.word	0x5a0b5a5a
1000d644:	1f1f      	.short	0x1f1f
1000d646:	200a      	movs	r0, #10
1000d648:	2a00      	cmp	r2, #0
1000d64a:	d053      	beq.n	1000d6f4 <gapc_bond_req_ind+0xc8>
1000d64c:	0a1b      	lsrs	r3, r3, #8
1000d64e:	8013      	strh	r3, [r2, #0]
1000d650:	7091      	strb	r1, [r2, #2]
1000d652:	e04f      	b.n	1000d6f4 <gapc_bond_req_ind+0xc8>
1000d654:	2a00      	cmp	r2, #0
1000d656:	d00b      	beq.n	1000d670 <gapc_bond_req_ind+0x44>
1000d658:	0a1b      	lsrs	r3, r3, #8
1000d65a:	8013      	strh	r3, [r2, #0]
1000d65c:	2900      	cmp	r1, #0
1000d65e:	d102      	bne.n	1000d666 <gapc_bond_req_ind+0x3a>
1000d660:	2301      	movs	r3, #1
1000d662:	7093      	strb	r3, [r2, #2]
1000d664:	e004      	b.n	1000d670 <gapc_bond_req_ind+0x44>
1000d666:	2300      	movs	r3, #0
1000d668:	7093      	strb	r3, [r2, #2]
1000d66a:	2902      	cmp	r1, #2
1000d66c:	d102      	bne.n	1000d674 <gapc_bond_req_ind+0x48>
1000d66e:	70d3      	strb	r3, [r2, #3]
1000d670:	200c      	movs	r0, #12
1000d672:	e03f      	b.n	1000d6f4 <gapc_bond_req_ind+0xc8>
1000d674:	2901      	cmp	r1, #1
1000d676:	d1fb      	bne.n	1000d670 <gapc_bond_req_ind+0x44>
1000d678:	70d1      	strb	r1, [r2, #3]
1000d67a:	e7f9      	b.n	1000d670 <gapc_bond_req_ind+0x44>
1000d67c:	2214      	movs	r2, #20
1000d67e:	481e      	ldr	r0, [pc, #120]	; (1000d6f8 <gapc_bond_req_ind+0xcc>)
1000d680:	0a1b      	lsrs	r3, r3, #8
1000d682:	70c3      	strb	r3, [r0, #3]
1000d684:	4b1d      	ldr	r3, [pc, #116]	; (1000d6fc <gapc_bond_req_ind+0xd0>)
1000d686:	7002      	strb	r2, [r0, #0]
1000d688:	3a06      	subs	r2, #6
1000d68a:	7042      	strb	r2, [r0, #1]
1000d68c:	7082      	strb	r2, [r0, #2]
1000d68e:	881a      	ldrh	r2, [r3, #0]
1000d690:	881b      	ldrh	r3, [r3, #0]
1000d692:	4e1b      	ldr	r6, [pc, #108]	; (1000d700 <gapc_bond_req_ind+0xd4>)
1000d694:	0a1b      	lsrs	r3, r3, #8
1000d696:	7143      	strb	r3, [r0, #5]
1000d698:	2301      	movs	r3, #1
1000d69a:	7102      	strb	r2, [r0, #4]
1000d69c:	7204      	strb	r4, [r0, #8]
1000d69e:	7243      	strb	r3, [r0, #9]
1000d6a0:	1c05      	adds	r5, r0, #0
1000d6a2:	1c31      	adds	r1, r6, #0
1000d6a4:	300a      	adds	r0, #10
1000d6a6:	2c07      	cmp	r4, #7
1000d6a8:	d116      	bne.n	1000d6d8 <gapc_bond_req_ind+0xac>
1000d6aa:	317e      	adds	r1, #126	; 0x7e
1000d6ac:	2210      	movs	r2, #16
1000d6ae:	4c15      	ldr	r4, [pc, #84]	; (1000d704 <gapc_bond_req_ind+0xd8>)
1000d6b0:	47a0      	blx	r4
1000d6b2:	1c33      	adds	r3, r6, #0
1000d6b4:	1c31      	adds	r1, r6, #0
1000d6b6:	1c28      	adds	r0, r5, #0
1000d6b8:	338e      	adds	r3, #142	; 0x8e
1000d6ba:	881b      	ldrh	r3, [r3, #0]
1000d6bc:	3190      	adds	r1, #144	; 0x90
1000d6be:	76ab      	strb	r3, [r5, #26]
1000d6c0:	2208      	movs	r2, #8
1000d6c2:	0a1b      	lsrs	r3, r3, #8
1000d6c4:	301c      	adds	r0, #28
1000d6c6:	76eb      	strb	r3, [r5, #27]
1000d6c8:	47a0      	blx	r4
1000d6ca:	1c31      	adds	r1, r6, #0
1000d6cc:	3198      	adds	r1, #152	; 0x98
1000d6ce:	780a      	ldrb	r2, [r1, #0]
1000d6d0:	1d6b      	adds	r3, r5, #5
1000d6d2:	77da      	strb	r2, [r3, #31]
1000d6d4:	2125      	movs	r1, #37	; 0x25
1000d6d6:	e004      	b.n	1000d6e2 <gapc_bond_req_ind+0xb6>
1000d6d8:	319a      	adds	r1, #154	; 0x9a
1000d6da:	2210      	movs	r2, #16
1000d6dc:	4b09      	ldr	r3, [pc, #36]	; (1000d704 <gapc_bond_req_ind+0xd8>)
1000d6de:	4798      	blx	r3
1000d6e0:	211a      	movs	r1, #26
1000d6e2:	1c0b      	adds	r3, r1, #0
1000d6e4:	2400      	movs	r4, #0
1000d6e6:	3b08      	subs	r3, #8
1000d6e8:	71ab      	strb	r3, [r5, #6]
1000d6ea:	1c28      	adds	r0, r5, #0
1000d6ec:	4b06      	ldr	r3, [pc, #24]	; (1000d708 <gapc_bond_req_ind+0xdc>)
1000d6ee:	71ec      	strb	r4, [r5, #7]
1000d6f0:	4798      	blx	r3
1000d6f2:	2000      	movs	r0, #0
1000d6f4:	bd70      	pop	{r4, r5, r6, pc}
1000d6f6:	46c0      	nop			; (mov r8, r8)
1000d6f8:	10013650 	.word	0x10013650
1000d6fc:	100132e0 	.word	0x100132e0
1000d700:	10013372 	.word	0x10013372
1000d704:	1000f957 	.word	0x1000f957
1000d708:	1000cfd5 	.word	0x1000cfd5

1000d70c <gapc_bond_cfm_handler_pair_resp>:
1000d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d70e:	b085      	sub	sp, #20
1000d710:	1c07      	adds	r7, r0, #0
1000d712:	a80a      	add	r0, sp, #40	; 0x28
1000d714:	7806      	ldrb	r6, [r0, #0]
1000d716:	a80b      	add	r0, sp, #44	; 0x2c
1000d718:	7805      	ldrb	r5, [r0, #0]
1000d71a:	a80c      	add	r0, sp, #48	; 0x30
1000d71c:	7800      	ldrb	r0, [r0, #0]
1000d71e:	2414      	movs	r4, #20
1000d720:	9002      	str	r0, [sp, #8]
1000d722:	a80d      	add	r0, sp, #52	; 0x34
1000d724:	7800      	ldrb	r0, [r0, #0]
1000d726:	9301      	str	r3, [sp, #4]
1000d728:	9003      	str	r0, [sp, #12]
1000d72a:	a80e      	add	r0, sp, #56	; 0x38
1000d72c:	8800      	ldrh	r0, [r0, #0]
1000d72e:	4684      	mov	ip, r0
1000d730:	4812      	ldr	r0, [pc, #72]	; (1000d77c <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d732:	7004      	strb	r4, [r0, #0]
1000d734:	3c06      	subs	r4, #6
1000d736:	7044      	strb	r4, [r0, #1]
1000d738:	7084      	strb	r4, [r0, #2]
1000d73a:	4664      	mov	r4, ip
1000d73c:	70c4      	strb	r4, [r0, #3]
1000d73e:	4c10      	ldr	r4, [pc, #64]	; (1000d780 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d740:	7247      	strb	r7, [r0, #9]
1000d742:	8823      	ldrh	r3, [r4, #0]
1000d744:	8824      	ldrh	r4, [r4, #0]
1000d746:	7103      	strb	r3, [r0, #4]
1000d748:	466b      	mov	r3, sp
1000d74a:	791b      	ldrb	r3, [r3, #4]
1000d74c:	0a24      	lsrs	r4, r4, #8
1000d74e:	7303      	strb	r3, [r0, #12]
1000d750:	466b      	mov	r3, sp
1000d752:	7a1b      	ldrb	r3, [r3, #8]
1000d754:	7144      	strb	r4, [r0, #5]
1000d756:	73c3      	strb	r3, [r0, #15]
1000d758:	466b      	mov	r3, sp
1000d75a:	7b1b      	ldrb	r3, [r3, #12]
1000d75c:	2401      	movs	r4, #1
1000d75e:	7403      	strb	r3, [r0, #16]
1000d760:	2309      	movs	r3, #9
1000d762:	7183      	strb	r3, [r0, #6]
1000d764:	2300      	movs	r3, #0
1000d766:	7204      	strb	r4, [r0, #8]
1000d768:	7281      	strb	r1, [r0, #10]
1000d76a:	72c2      	strb	r2, [r0, #11]
1000d76c:	7346      	strb	r6, [r0, #13]
1000d76e:	7385      	strb	r5, [r0, #14]
1000d770:	71c3      	strb	r3, [r0, #7]
1000d772:	2111      	movs	r1, #17
1000d774:	4b03      	ldr	r3, [pc, #12]	; (1000d784 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d776:	4798      	blx	r3
1000d778:	b005      	add	sp, #20
1000d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d77c:	10013650 	.word	0x10013650
1000d780:	100132e0 	.word	0x100132e0
1000d784:	1000cfd5 	.word	0x1000cfd5

1000d788 <gapc_bond_cfm_handler_key_exch>:
1000d788:	b538      	push	{r3, r4, r5, lr}
1000d78a:	2514      	movs	r5, #20
1000d78c:	4c0d      	ldr	r4, [pc, #52]	; (1000d7c4 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d78e:	70e3      	strb	r3, [r4, #3]
1000d790:	4b0d      	ldr	r3, [pc, #52]	; (1000d7c8 <gapc_bond_cfm_handler_key_exch+0x40>)
1000d792:	7025      	strb	r5, [r4, #0]
1000d794:	3d06      	subs	r5, #6
1000d796:	7065      	strb	r5, [r4, #1]
1000d798:	70a5      	strb	r5, [r4, #2]
1000d79a:	881d      	ldrh	r5, [r3, #0]
1000d79c:	881b      	ldrh	r3, [r3, #0]
1000d79e:	7220      	strb	r0, [r4, #8]
1000d7a0:	0a1b      	lsrs	r3, r3, #8
1000d7a2:	7163      	strb	r3, [r4, #5]
1000d7a4:	7261      	strb	r1, [r4, #9]
1000d7a6:	4b09      	ldr	r3, [pc, #36]	; (1000d7cc <gapc_bond_cfm_handler_key_exch+0x44>)
1000d7a8:	1c11      	adds	r1, r2, #0
1000d7aa:	4809      	ldr	r0, [pc, #36]	; (1000d7d0 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d7ac:	2210      	movs	r2, #16
1000d7ae:	7125      	strb	r5, [r4, #4]
1000d7b0:	4798      	blx	r3
1000d7b2:	2312      	movs	r3, #18
1000d7b4:	71a3      	strb	r3, [r4, #6]
1000d7b6:	2300      	movs	r3, #0
1000d7b8:	1c20      	adds	r0, r4, #0
1000d7ba:	71e3      	strb	r3, [r4, #7]
1000d7bc:	211a      	movs	r1, #26
1000d7be:	4b05      	ldr	r3, [pc, #20]	; (1000d7d4 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d7c0:	4798      	blx	r3
1000d7c2:	bd38      	pop	{r3, r4, r5, pc}
1000d7c4:	10013650 	.word	0x10013650
1000d7c8:	100132e0 	.word	0x100132e0
1000d7cc:	1000f957 	.word	0x1000f957
1000d7d0:	1001365a 	.word	0x1001365a
1000d7d4:	1000cfd5 	.word	0x1000cfd5

1000d7d8 <gapc_encrypt_cmd_handler>:
1000d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7da:	2500      	movs	r5, #0
1000d7dc:	b089      	sub	sp, #36	; 0x24
1000d7de:	9306      	str	r3, [sp, #24]
1000d7e0:	ab0e      	add	r3, sp, #56	; 0x38
1000d7e2:	781b      	ldrb	r3, [r3, #0]
1000d7e4:	1c17      	adds	r7, r2, #0
1000d7e6:	9307      	str	r3, [sp, #28]
1000d7e8:	ab0f      	add	r3, sp, #60	; 0x3c
1000d7ea:	781b      	ldrb	r3, [r3, #0]
1000d7ec:	4a19      	ldr	r2, [pc, #100]	; (1000d854 <gapc_encrypt_cmd_handler+0x7c>)
1000d7ee:	1c06      	adds	r6, r0, #0
1000d7f0:	9105      	str	r1, [sp, #20]
1000d7f2:	9300      	str	r3, [sp, #0]
1000d7f4:	9002      	str	r0, [sp, #8]
1000d7f6:	1c29      	adds	r1, r5, #0
1000d7f8:	1c2b      	adds	r3, r5, #0
1000d7fa:	9501      	str	r5, [sp, #4]
1000d7fc:	1c10      	adds	r0, r2, #0
1000d7fe:	4c16      	ldr	r4, [pc, #88]	; (1000d858 <gapc_encrypt_cmd_handler+0x80>)
1000d800:	47a0      	blx	r4
1000d802:	2316      	movs	r3, #22
1000d804:	4c15      	ldr	r4, [pc, #84]	; (1000d85c <gapc_encrypt_cmd_handler+0x84>)
1000d806:	9905      	ldr	r1, [sp, #20]
1000d808:	7023      	strb	r3, [r4, #0]
1000d80a:	3b08      	subs	r3, #8
1000d80c:	7063      	strb	r3, [r4, #1]
1000d80e:	70a3      	strb	r3, [r4, #2]
1000d810:	4b13      	ldr	r3, [pc, #76]	; (1000d860 <gapc_encrypt_cmd_handler+0x88>)
1000d812:	70e6      	strb	r6, [r4, #3]
1000d814:	881a      	ldrh	r2, [r3, #0]
1000d816:	881b      	ldrh	r3, [r3, #0]
1000d818:	7122      	strb	r2, [r4, #4]
1000d81a:	0a1b      	lsrs	r3, r3, #8
1000d81c:	7163      	strb	r3, [r4, #5]
1000d81e:	230b      	movs	r3, #11
1000d820:	4e10      	ldr	r6, [pc, #64]	; (1000d864 <gapc_encrypt_cmd_handler+0x8c>)
1000d822:	2210      	movs	r2, #16
1000d824:	4810      	ldr	r0, [pc, #64]	; (1000d868 <gapc_encrypt_cmd_handler+0x90>)
1000d826:	7223      	strb	r3, [r4, #8]
1000d828:	7265      	strb	r5, [r4, #9]
1000d82a:	47b0      	blx	r6
1000d82c:	0a3b      	lsrs	r3, r7, #8
1000d82e:	9906      	ldr	r1, [sp, #24]
1000d830:	2208      	movs	r2, #8
1000d832:	480e      	ldr	r0, [pc, #56]	; (1000d86c <gapc_encrypt_cmd_handler+0x94>)
1000d834:	76e3      	strb	r3, [r4, #27]
1000d836:	76a7      	strb	r7, [r4, #26]
1000d838:	47b0      	blx	r6
1000d83a:	466a      	mov	r2, sp
1000d83c:	7f12      	ldrb	r2, [r2, #28]
1000d83e:	1d63      	adds	r3, r4, #5
1000d840:	77da      	strb	r2, [r3, #31]
1000d842:	231d      	movs	r3, #29
1000d844:	1c20      	adds	r0, r4, #0
1000d846:	71a3      	strb	r3, [r4, #6]
1000d848:	2125      	movs	r1, #37	; 0x25
1000d84a:	4b09      	ldr	r3, [pc, #36]	; (1000d870 <gapc_encrypt_cmd_handler+0x98>)
1000d84c:	71e5      	strb	r5, [r4, #7]
1000d84e:	4798      	blx	r3
1000d850:	b009      	add	sp, #36	; 0x24
1000d852:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d854:	10012604 	.word	0x10012604
1000d858:	1000d2d1 	.word	0x1000d2d1
1000d85c:	10013650 	.word	0x10013650
1000d860:	100132e0 	.word	0x100132e0
1000d864:	1000f957 	.word	0x1000f957
1000d868:	1001365a 	.word	0x1001365a
1000d86c:	1001366c 	.word	0x1001366c
1000d870:	1000cfd5 	.word	0x1000cfd5

1000d874 <gapc_encrypt_req_ind>:
1000d874:	b508      	push	{r3, lr}
1000d876:	0a00      	lsrs	r0, r0, #8
1000d878:	8010      	strh	r0, [r2, #0]
1000d87a:	784b      	ldrb	r3, [r1, #1]
1000d87c:	7808      	ldrb	r0, [r1, #0]
1000d87e:	021b      	lsls	r3, r3, #8
1000d880:	4303      	orrs	r3, r0
1000d882:	8053      	strh	r3, [r2, #2]
1000d884:	1d10      	adds	r0, r2, #4
1000d886:	3102      	adds	r1, #2
1000d888:	2208      	movs	r2, #8
1000d88a:	4b01      	ldr	r3, [pc, #4]	; (1000d890 <gapc_encrypt_req_ind+0x1c>)
1000d88c:	4798      	blx	r3
1000d88e:	bd08      	pop	{r3, pc}
1000d890:	1000f957 	.word	0x1000f957

1000d894 <gapc_encrypt_cfm_handler>:
1000d894:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d896:	2500      	movs	r5, #0
1000d898:	b087      	sub	sp, #28
1000d89a:	9304      	str	r3, [sp, #16]
1000d89c:	ab0c      	add	r3, sp, #48	; 0x30
1000d89e:	781b      	ldrb	r3, [r3, #0]
1000d8a0:	1c17      	adds	r7, r2, #0
1000d8a2:	4a15      	ldr	r2, [pc, #84]	; (1000d8f8 <gapc_encrypt_cfm_handler+0x64>)
1000d8a4:	1c06      	adds	r6, r0, #0
1000d8a6:	9305      	str	r3, [sp, #20]
1000d8a8:	9100      	str	r1, [sp, #0]
1000d8aa:	9002      	str	r0, [sp, #8]
1000d8ac:	1c29      	adds	r1, r5, #0
1000d8ae:	1c2b      	adds	r3, r5, #0
1000d8b0:	9501      	str	r5, [sp, #4]
1000d8b2:	1c10      	adds	r0, r2, #0
1000d8b4:	4c11      	ldr	r4, [pc, #68]	; (1000d8fc <gapc_encrypt_cfm_handler+0x68>)
1000d8b6:	47a0      	blx	r4
1000d8b8:	2318      	movs	r3, #24
1000d8ba:	4c11      	ldr	r4, [pc, #68]	; (1000d900 <gapc_encrypt_cfm_handler+0x6c>)
1000d8bc:	9904      	ldr	r1, [sp, #16]
1000d8be:	7023      	strb	r3, [r4, #0]
1000d8c0:	3b0a      	subs	r3, #10
1000d8c2:	7063      	strb	r3, [r4, #1]
1000d8c4:	70a3      	strb	r3, [r4, #2]
1000d8c6:	4b0f      	ldr	r3, [pc, #60]	; (1000d904 <gapc_encrypt_cfm_handler+0x70>)
1000d8c8:	480f      	ldr	r0, [pc, #60]	; (1000d908 <gapc_encrypt_cfm_handler+0x74>)
1000d8ca:	881a      	ldrh	r2, [r3, #0]
1000d8cc:	881b      	ldrh	r3, [r3, #0]
1000d8ce:	7122      	strb	r2, [r4, #4]
1000d8d0:	0a1b      	lsrs	r3, r3, #8
1000d8d2:	7163      	strb	r3, [r4, #5]
1000d8d4:	2210      	movs	r2, #16
1000d8d6:	4b0d      	ldr	r3, [pc, #52]	; (1000d90c <gapc_encrypt_cfm_handler+0x78>)
1000d8d8:	70e6      	strb	r6, [r4, #3]
1000d8da:	7227      	strb	r7, [r4, #8]
1000d8dc:	4798      	blx	r3
1000d8de:	466b      	mov	r3, sp
1000d8e0:	7d1b      	ldrb	r3, [r3, #20]
1000d8e2:	1c20      	adds	r0, r4, #0
1000d8e4:	7663      	strb	r3, [r4, #25]
1000d8e6:	2312      	movs	r3, #18
1000d8e8:	211a      	movs	r1, #26
1000d8ea:	71a3      	strb	r3, [r4, #6]
1000d8ec:	4b08      	ldr	r3, [pc, #32]	; (1000d910 <gapc_encrypt_cfm_handler+0x7c>)
1000d8ee:	71e5      	strb	r5, [r4, #7]
1000d8f0:	4798      	blx	r3
1000d8f2:	b007      	add	sp, #28
1000d8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8f6:	46c0      	nop			; (mov r8, r8)
1000d8f8:	10012614 	.word	0x10012614
1000d8fc:	1000d2d1 	.word	0x1000d2d1
1000d900:	10013650 	.word	0x10013650
1000d904:	100132e0 	.word	0x100132e0
1000d908:	10013659 	.word	0x10013659
1000d90c:	1000f957 	.word	0x1000f957
1000d910:	1000cfd5 	.word	0x1000cfd5

1000d914 <gapc_encrypt_ind>:
1000d914:	780b      	ldrb	r3, [r1, #0]
1000d916:	0a00      	lsrs	r0, r0, #8
1000d918:	70d3      	strb	r3, [r2, #3]
1000d91a:	2300      	movs	r3, #0
1000d91c:	8010      	strh	r0, [r2, #0]
1000d91e:	7093      	strb	r3, [r2, #2]
1000d920:	4770      	bx	lr
	...

1000d924 <gapc_param_update_cfm_handler>:
1000d924:	b538      	push	{r3, r4, r5, lr}
1000d926:	2410      	movs	r4, #16
1000d928:	1c05      	adds	r5, r0, #0
1000d92a:	480e      	ldr	r0, [pc, #56]	; (1000d964 <gapc_param_update_cfm_handler+0x40>)
1000d92c:	7004      	strb	r4, [r0, #0]
1000d92e:	3c02      	subs	r4, #2
1000d930:	7044      	strb	r4, [r0, #1]
1000d932:	7084      	strb	r4, [r0, #2]
1000d934:	4c0c      	ldr	r4, [pc, #48]	; (1000d968 <gapc_param_update_cfm_handler+0x44>)
1000d936:	70c5      	strb	r5, [r0, #3]
1000d938:	8825      	ldrh	r5, [r4, #0]
1000d93a:	8824      	ldrh	r4, [r4, #0]
1000d93c:	72c3      	strb	r3, [r0, #11]
1000d93e:	0a1b      	lsrs	r3, r3, #8
1000d940:	0a24      	lsrs	r4, r4, #8
1000d942:	7303      	strb	r3, [r0, #12]
1000d944:	2305      	movs	r3, #5
1000d946:	7144      	strb	r4, [r0, #5]
1000d948:	2400      	movs	r4, #0
1000d94a:	7201      	strb	r1, [r0, #8]
1000d94c:	7242      	strb	r2, [r0, #9]
1000d94e:	7183      	strb	r3, [r0, #6]
1000d950:	0a12      	lsrs	r2, r2, #8
1000d952:	210d      	movs	r1, #13
1000d954:	4b05      	ldr	r3, [pc, #20]	; (1000d96c <gapc_param_update_cfm_handler+0x48>)
1000d956:	7105      	strb	r5, [r0, #4]
1000d958:	7282      	strb	r2, [r0, #10]
1000d95a:	71c4      	strb	r4, [r0, #7]
1000d95c:	4798      	blx	r3
1000d95e:	1c20      	adds	r0, r4, #0
1000d960:	bd38      	pop	{r3, r4, r5, pc}
1000d962:	46c0      	nop			; (mov r8, r8)
1000d964:	10013650 	.word	0x10013650
1000d968:	100132e0 	.word	0x100132e0
1000d96c:	1000cfd5 	.word	0x1000cfd5

1000d970 <gapc_param_updated_ind>:
1000d970:	2300      	movs	r3, #0
1000d972:	0a00      	lsrs	r0, r0, #8
1000d974:	8010      	strh	r0, [r2, #0]
1000d976:	7093      	strb	r3, [r2, #2]
1000d978:	784b      	ldrb	r3, [r1, #1]
1000d97a:	7808      	ldrb	r0, [r1, #0]
1000d97c:	021b      	lsls	r3, r3, #8
1000d97e:	4303      	orrs	r3, r0
1000d980:	8093      	strh	r3, [r2, #4]
1000d982:	78cb      	ldrb	r3, [r1, #3]
1000d984:	7888      	ldrb	r0, [r1, #2]
1000d986:	021b      	lsls	r3, r3, #8
1000d988:	4303      	orrs	r3, r0
1000d98a:	80d3      	strh	r3, [r2, #6]
1000d98c:	794b      	ldrb	r3, [r1, #5]
1000d98e:	7909      	ldrb	r1, [r1, #4]
1000d990:	021b      	lsls	r3, r3, #8
1000d992:	430b      	orrs	r3, r1
1000d994:	2007      	movs	r0, #7
1000d996:	8113      	strh	r3, [r2, #8]
1000d998:	4770      	bx	lr

1000d99a <gapc_param_updated_req_ind>:
1000d99a:	0a00      	lsrs	r0, r0, #8
1000d99c:	8010      	strh	r0, [r2, #0]
1000d99e:	784b      	ldrb	r3, [r1, #1]
1000d9a0:	7808      	ldrb	r0, [r1, #0]
1000d9a2:	021b      	lsls	r3, r3, #8
1000d9a4:	4303      	orrs	r3, r0
1000d9a6:	8053      	strh	r3, [r2, #2]
1000d9a8:	78cb      	ldrb	r3, [r1, #3]
1000d9aa:	7888      	ldrb	r0, [r1, #2]
1000d9ac:	021b      	lsls	r3, r3, #8
1000d9ae:	4303      	orrs	r3, r0
1000d9b0:	8093      	strh	r3, [r2, #4]
1000d9b2:	794b      	ldrb	r3, [r1, #5]
1000d9b4:	7908      	ldrb	r0, [r1, #4]
1000d9b6:	021b      	lsls	r3, r3, #8
1000d9b8:	4303      	orrs	r3, r0
1000d9ba:	80d3      	strh	r3, [r2, #6]
1000d9bc:	79cb      	ldrb	r3, [r1, #7]
1000d9be:	7989      	ldrb	r1, [r1, #6]
1000d9c0:	021b      	lsls	r3, r3, #8
1000d9c2:	430b      	orrs	r3, r1
1000d9c4:	2008      	movs	r0, #8
1000d9c6:	8113      	strh	r3, [r2, #8]
1000d9c8:	4770      	bx	lr
	...

1000d9cc <gapc_dev_info_req_ind_handler>:
1000d9cc:	b508      	push	{r3, lr}
1000d9ce:	1c0b      	adds	r3, r1, #0
1000d9d0:	0a01      	lsrs	r1, r0, #8
1000d9d2:	8011      	strh	r1, [r2, #0]
1000d9d4:	7818      	ldrb	r0, [r3, #0]
1000d9d6:	7090      	strb	r0, [r2, #2]
1000d9d8:	2800      	cmp	r0, #0
1000d9da:	d104      	bne.n	1000d9e6 <gapc_dev_info_req_ind_handler+0x1a>
1000d9dc:	4b03      	ldr	r3, [pc, #12]	; (1000d9ec <gapc_dev_info_req_ind_handler+0x20>)
1000d9de:	33aa      	adds	r3, #170	; 0xaa
1000d9e0:	881b      	ldrh	r3, [r3, #0]
1000d9e2:	2b00      	cmp	r3, #0
1000d9e4:	d001      	beq.n	1000d9ea <gapc_dev_info_req_ind_handler+0x1e>
1000d9e6:	4b02      	ldr	r3, [pc, #8]	; (1000d9f0 <gapc_dev_info_req_ind_handler+0x24>)
1000d9e8:	4798      	blx	r3
1000d9ea:	bd08      	pop	{r3, pc}
1000d9ec:	10013372 	.word	0x10013372
1000d9f0:	1000d0dd 	.word	0x1000d0dd

1000d9f4 <gapc_sec_req_ind>:
1000d9f4:	0a00      	lsrs	r0, r0, #8
1000d9f6:	8010      	strh	r0, [r2, #0]
1000d9f8:	7809      	ldrb	r1, [r1, #0]
1000d9fa:	2301      	movs	r3, #1
1000d9fc:	1c08      	adds	r0, r1, #0
1000d9fe:	0889      	lsrs	r1, r1, #2
1000da00:	4018      	ands	r0, r3
1000da02:	400b      	ands	r3, r1
1000da04:	70d0      	strb	r0, [r2, #3]
1000da06:	7113      	strb	r3, [r2, #4]
1000da08:	4770      	bx	lr

1000da0a <gapc_sign_counter_ind_handler>:
1000da0a:	0a00      	lsrs	r0, r0, #8
1000da0c:	8010      	strh	r0, [r2, #0]
1000da0e:	784b      	ldrb	r3, [r1, #1]
1000da10:	0218      	lsls	r0, r3, #8
1000da12:	788b      	ldrb	r3, [r1, #2]
1000da14:	041b      	lsls	r3, r3, #16
1000da16:	4303      	orrs	r3, r0
1000da18:	7808      	ldrb	r0, [r1, #0]
1000da1a:	4303      	orrs	r3, r0
1000da1c:	78c8      	ldrb	r0, [r1, #3]
1000da1e:	0600      	lsls	r0, r0, #24
1000da20:	4303      	orrs	r3, r0
1000da22:	6053      	str	r3, [r2, #4]
1000da24:	794b      	ldrb	r3, [r1, #5]
1000da26:	0218      	lsls	r0, r3, #8
1000da28:	798b      	ldrb	r3, [r1, #6]
1000da2a:	041b      	lsls	r3, r3, #16
1000da2c:	4303      	orrs	r3, r0
1000da2e:	7908      	ldrb	r0, [r1, #4]
1000da30:	79c9      	ldrb	r1, [r1, #7]
1000da32:	4303      	orrs	r3, r0
1000da34:	0609      	lsls	r1, r1, #24
1000da36:	430b      	orrs	r3, r1
1000da38:	2000      	movs	r0, #0
1000da3a:	6093      	str	r3, [r2, #8]
1000da3c:	4770      	bx	lr
	...

1000da40 <gapc_peer_att_info_ind_handler>:
1000da40:	b510      	push	{r4, lr}
1000da42:	0a00      	lsrs	r0, r0, #8
1000da44:	8010      	strh	r0, [r2, #0]
1000da46:	7808      	ldrb	r0, [r1, #0]
1000da48:	7090      	strb	r0, [r2, #2]
1000da4a:	788b      	ldrb	r3, [r1, #2]
1000da4c:	784c      	ldrb	r4, [r1, #1]
1000da4e:	021b      	lsls	r3, r3, #8
1000da50:	4323      	orrs	r3, r4
1000da52:	8093      	strh	r3, [r2, #4]
1000da54:	2801      	cmp	r0, #1
1000da56:	d027      	beq.n	1000daa8 <gapc_peer_att_info_ind_handler+0x68>
1000da58:	2800      	cmp	r0, #0
1000da5a:	d017      	beq.n	1000da8c <gapc_peer_att_info_ind_handler+0x4c>
1000da5c:	2802      	cmp	r0, #2
1000da5e:	d12a      	bne.n	1000dab6 <gapc_peer_att_info_ind_handler+0x76>
1000da60:	790b      	ldrb	r3, [r1, #4]
1000da62:	78c8      	ldrb	r0, [r1, #3]
1000da64:	021b      	lsls	r3, r3, #8
1000da66:	4303      	orrs	r3, r0
1000da68:	8113      	strh	r3, [r2, #8]
1000da6a:	798b      	ldrb	r3, [r1, #6]
1000da6c:	7948      	ldrb	r0, [r1, #5]
1000da6e:	021b      	lsls	r3, r3, #8
1000da70:	4303      	orrs	r3, r0
1000da72:	80d3      	strh	r3, [r2, #6]
1000da74:	7a0b      	ldrb	r3, [r1, #8]
1000da76:	79c8      	ldrb	r0, [r1, #7]
1000da78:	021b      	lsls	r3, r3, #8
1000da7a:	4303      	orrs	r3, r0
1000da7c:	8193      	strh	r3, [r2, #12]
1000da7e:	7a8b      	ldrb	r3, [r1, #10]
1000da80:	7a49      	ldrb	r1, [r1, #9]
1000da82:	021b      	lsls	r3, r3, #8
1000da84:	430b      	orrs	r3, r1
1000da86:	8153      	strh	r3, [r2, #10]
1000da88:	2306      	movs	r3, #6
1000da8a:	e013      	b.n	1000dab4 <gapc_peer_att_info_ind_handler+0x74>
1000da8c:	1c14      	adds	r4, r2, #0
1000da8e:	1c20      	adds	r0, r4, #0
1000da90:	790a      	ldrb	r2, [r1, #4]
1000da92:	78cb      	ldrb	r3, [r1, #3]
1000da94:	0212      	lsls	r2, r2, #8
1000da96:	431a      	orrs	r2, r3
1000da98:	80e2      	strh	r2, [r4, #6]
1000da9a:	4b07      	ldr	r3, [pc, #28]	; (1000dab8 <gapc_peer_att_info_ind_handler+0x78>)
1000da9c:	3008      	adds	r0, #8
1000da9e:	3105      	adds	r1, #5
1000daa0:	4798      	blx	r3
1000daa2:	2302      	movs	r3, #2
1000daa4:	70a3      	strb	r3, [r4, #2]
1000daa6:	e006      	b.n	1000dab6 <gapc_peer_att_info_ind_handler+0x76>
1000daa8:	790b      	ldrb	r3, [r1, #4]
1000daaa:	78c9      	ldrb	r1, [r1, #3]
1000daac:	021b      	lsls	r3, r3, #8
1000daae:	430b      	orrs	r3, r1
1000dab0:	80d3      	strh	r3, [r2, #6]
1000dab2:	2305      	movs	r3, #5
1000dab4:	7093      	strb	r3, [r2, #2]
1000dab6:	bd10      	pop	{r4, pc}
1000dab8:	1000f957 	.word	0x1000f957

1000dabc <gapc_con_channel_map_ind_handler>:
1000dabc:	b508      	push	{r3, lr}
1000dabe:	2300      	movs	r3, #0
1000dac0:	0a00      	lsrs	r0, r0, #8
1000dac2:	7013      	strb	r3, [r2, #0]
1000dac4:	8050      	strh	r0, [r2, #2]
1000dac6:	4b02      	ldr	r3, [pc, #8]	; (1000dad0 <gapc_con_channel_map_ind_handler+0x14>)
1000dac8:	1d10      	adds	r0, r2, #4
1000daca:	2205      	movs	r2, #5
1000dacc:	4798      	blx	r3
1000dace:	bd08      	pop	{r3, pc}
1000dad0:	1000f957 	.word	0x1000f957

1000dad4 <gapc_lecb_connected>:
1000dad4:	7843      	ldrb	r3, [r0, #1]
1000dad6:	7802      	ldrb	r2, [r0, #0]
1000dad8:	021b      	lsls	r3, r3, #8
1000dada:	4313      	orrs	r3, r2
1000dadc:	800b      	strh	r3, [r1, #0]
1000dade:	78c3      	ldrb	r3, [r0, #3]
1000dae0:	7882      	ldrb	r2, [r0, #2]
1000dae2:	021b      	lsls	r3, r3, #8
1000dae4:	4313      	orrs	r3, r2
1000dae6:	804b      	strh	r3, [r1, #2]
1000dae8:	7943      	ldrb	r3, [r0, #5]
1000daea:	7902      	ldrb	r2, [r0, #4]
1000daec:	021b      	lsls	r3, r3, #8
1000daee:	4313      	orrs	r3, r2
1000daf0:	808b      	strh	r3, [r1, #4]
1000daf2:	79c3      	ldrb	r3, [r0, #7]
1000daf4:	7982      	ldrb	r2, [r0, #6]
1000daf6:	021b      	lsls	r3, r3, #8
1000daf8:	4313      	orrs	r3, r2
1000dafa:	80cb      	strh	r3, [r1, #6]
1000dafc:	2300      	movs	r3, #0
1000dafe:	720b      	strb	r3, [r1, #8]
1000db00:	4770      	bx	lr

1000db02 <gapc_lecb_disconnected>:
1000db02:	7843      	ldrb	r3, [r0, #1]
1000db04:	7802      	ldrb	r2, [r0, #0]
1000db06:	021b      	lsls	r3, r3, #8
1000db08:	4313      	orrs	r3, r2
1000db0a:	800b      	strh	r3, [r1, #0]
1000db0c:	78c3      	ldrb	r3, [r0, #3]
1000db0e:	7882      	ldrb	r2, [r0, #2]
1000db10:	021b      	lsls	r3, r3, #8
1000db12:	4313      	orrs	r3, r2
1000db14:	804b      	strh	r3, [r1, #2]
1000db16:	4770      	bx	lr

1000db18 <gapc_lecb_connect_req_ind>:
1000db18:	7843      	ldrb	r3, [r0, #1]
1000db1a:	7802      	ldrb	r2, [r0, #0]
1000db1c:	021b      	lsls	r3, r3, #8
1000db1e:	4313      	orrs	r3, r2
1000db20:	800b      	strh	r3, [r1, #0]
1000db22:	78c3      	ldrb	r3, [r0, #3]
1000db24:	7882      	ldrb	r2, [r0, #2]
1000db26:	021b      	lsls	r3, r3, #8
1000db28:	4313      	orrs	r3, r2
1000db2a:	804b      	strh	r3, [r1, #2]
1000db2c:	7943      	ldrb	r3, [r0, #5]
1000db2e:	7902      	ldrb	r2, [r0, #4]
1000db30:	021b      	lsls	r3, r3, #8
1000db32:	4313      	orrs	r3, r2
1000db34:	808b      	strh	r3, [r1, #4]
1000db36:	79c3      	ldrb	r3, [r0, #7]
1000db38:	7982      	ldrb	r2, [r0, #6]
1000db3a:	021b      	lsls	r3, r3, #8
1000db3c:	4313      	orrs	r3, r2
1000db3e:	80cb      	strh	r3, [r1, #6]
1000db40:	4770      	bx	lr

1000db42 <gapc_lecb_add_credit_resp_handler>:
1000db42:	7843      	ldrb	r3, [r0, #1]
1000db44:	7802      	ldrb	r2, [r0, #0]
1000db46:	021b      	lsls	r3, r3, #8
1000db48:	4313      	orrs	r3, r2
1000db4a:	800b      	strh	r3, [r1, #0]
1000db4c:	78c3      	ldrb	r3, [r0, #3]
1000db4e:	7882      	ldrb	r2, [r0, #2]
1000db50:	021b      	lsls	r3, r3, #8
1000db52:	4313      	orrs	r3, r2
1000db54:	804b      	strh	r3, [r1, #2]
1000db56:	7943      	ldrb	r3, [r0, #5]
1000db58:	7902      	ldrb	r2, [r0, #4]
1000db5a:	021b      	lsls	r3, r3, #8
1000db5c:	4313      	orrs	r3, r2
1000db5e:	808b      	strh	r3, [r1, #4]
1000db60:	4770      	bx	lr
	...

1000db64 <gapm_reset_req_handler>:
1000db64:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000db66:	466b      	mov	r3, sp
1000db68:	4915      	ldr	r1, [pc, #84]	; (1000dbc0 <gapm_reset_req_handler+0x5c>)
1000db6a:	4816      	ldr	r0, [pc, #88]	; (1000dbc4 <gapm_reset_req_handler+0x60>)
1000db6c:	880c      	ldrh	r4, [r1, #0]
1000db6e:	8809      	ldrh	r1, [r1, #0]
1000db70:	1ddd      	adds	r5, r3, #7
1000db72:	0a09      	lsrs	r1, r1, #8
1000db74:	2300      	movs	r3, #0
1000db76:	2202      	movs	r2, #2
1000db78:	7141      	strb	r1, [r0, #5]
1000db7a:	26d0      	movs	r6, #208	; 0xd0
1000db7c:	2101      	movs	r1, #1
1000db7e:	7104      	strb	r4, [r0, #4]
1000db80:	4c11      	ldr	r4, [pc, #68]	; (1000dbc8 <gapm_reset_req_handler+0x64>)
1000db82:	702b      	strb	r3, [r5, #0]
1000db84:	7002      	strb	r2, [r0, #0]
1000db86:	70c3      	strb	r3, [r0, #3]
1000db88:	320b      	adds	r2, #11
1000db8a:	7201      	strb	r1, [r0, #8]
1000db8c:	7181      	strb	r1, [r0, #6]
1000db8e:	71c3      	strb	r3, [r0, #7]
1000db90:	3108      	adds	r1, #8
1000db92:	4b0e      	ldr	r3, [pc, #56]	; (1000dbcc <gapm_reset_req_handler+0x68>)
1000db94:	0136      	lsls	r6, r6, #4
1000db96:	7042      	strb	r2, [r0, #1]
1000db98:	7082      	strb	r2, [r0, #2]
1000db9a:	80a2      	strh	r2, [r4, #4]
1000db9c:	8026      	strh	r6, [r4, #0]
1000db9e:	4798      	blx	r3
1000dba0:	1c28      	adds	r0, r5, #0
1000dba2:	4b0b      	ldr	r3, [pc, #44]	; (1000dbd0 <gapm_reset_req_handler+0x6c>)
1000dba4:	4798      	blx	r3
1000dba6:	782b      	ldrb	r3, [r5, #0]
1000dba8:	20e2      	movs	r0, #226	; 0xe2
1000dbaa:	2b00      	cmp	r3, #0
1000dbac:	d106      	bne.n	1000dbbc <gapm_reset_req_handler+0x58>
1000dbae:	68a3      	ldr	r3, [r4, #8]
1000dbb0:	20e2      	movs	r0, #226	; 0xe2
1000dbb2:	781a      	ldrb	r2, [r3, #0]
1000dbb4:	785b      	ldrb	r3, [r3, #1]
1000dbb6:	2a01      	cmp	r2, #1
1000dbb8:	d100      	bne.n	1000dbbc <gapm_reset_req_handler+0x58>
1000dbba:	1c18      	adds	r0, r3, #0
1000dbbc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000dbbe:	46c0      	nop			; (mov r8, r8)
1000dbc0:	100132e0 	.word	0x100132e0
1000dbc4:	10013650 	.word	0x10013650
1000dbc8:	100132d4 	.word	0x100132d4
1000dbcc:	1000cfd5 	.word	0x1000cfd5
1000dbd0:	1000d031 	.word	0x1000d031

1000dbd4 <gapm_set_dev_config_cmd_handler>:
1000dbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbd6:	b089      	sub	sp, #36	; 0x24
1000dbd8:	9303      	str	r3, [sp, #12]
1000dbda:	ab0e      	add	r3, sp, #56	; 0x38
1000dbdc:	781b      	ldrb	r3, [r3, #0]
1000dbde:	4c37      	ldr	r4, [pc, #220]	; (1000dcbc <gapm_set_dev_config_cmd_handler+0xe8>)
1000dbe0:	9304      	str	r3, [sp, #16]
1000dbe2:	ab0f      	add	r3, sp, #60	; 0x3c
1000dbe4:	781b      	ldrb	r3, [r3, #0]
1000dbe6:	270d      	movs	r7, #13
1000dbe8:	9305      	str	r3, [sp, #20]
1000dbea:	ab10      	add	r3, sp, #64	; 0x40
1000dbec:	881b      	ldrh	r3, [r3, #0]
1000dbee:	72a1      	strb	r1, [r4, #10]
1000dbf0:	9300      	str	r3, [sp, #0]
1000dbf2:	ab11      	add	r3, sp, #68	; 0x44
1000dbf4:	881b      	ldrh	r3, [r3, #0]
1000dbf6:	0a09      	lsrs	r1, r1, #8
1000dbf8:	9301      	str	r3, [sp, #4]
1000dbfa:	ab12      	add	r3, sp, #72	; 0x48
1000dbfc:	881b      	ldrh	r3, [r3, #0]
1000dbfe:	7260      	strb	r0, [r4, #9]
1000dc00:	9302      	str	r3, [sp, #8]
1000dc02:	ab06      	add	r3, sp, #24
1000dc04:	1dde      	adds	r6, r3, #7
1000dc06:	2300      	movs	r3, #0
1000dc08:	7033      	strb	r3, [r6, #0]
1000dc0a:	2304      	movs	r3, #4
1000dc0c:	7023      	strb	r3, [r4, #0]
1000dc0e:	2300      	movs	r3, #0
1000dc10:	70e3      	strb	r3, [r4, #3]
1000dc12:	4b2b      	ldr	r3, [pc, #172]	; (1000dcc0 <gapm_set_dev_config_cmd_handler+0xec>)
1000dc14:	72e1      	strb	r1, [r4, #11]
1000dc16:	881d      	ldrh	r5, [r3, #0]
1000dc18:	881b      	ldrh	r3, [r3, #0]
1000dc1a:	1c11      	adds	r1, r2, #0
1000dc1c:	0a1b      	lsrs	r3, r3, #8
1000dc1e:	7163      	strb	r3, [r4, #5]
1000dc20:	2303      	movs	r3, #3
1000dc22:	7125      	strb	r5, [r4, #4]
1000dc24:	2206      	movs	r2, #6
1000dc26:	4d27      	ldr	r5, [pc, #156]	; (1000dcc4 <gapm_set_dev_config_cmd_handler+0xf0>)
1000dc28:	4827      	ldr	r0, [pc, #156]	; (1000dcc8 <gapm_set_dev_config_cmd_handler+0xf4>)
1000dc2a:	7223      	strb	r3, [r4, #8]
1000dc2c:	7067      	strb	r7, [r4, #1]
1000dc2e:	70a7      	strb	r7, [r4, #2]
1000dc30:	47a8      	blx	r5
1000dc32:	9903      	ldr	r1, [sp, #12]
1000dc34:	2210      	movs	r2, #16
1000dc36:	4825      	ldr	r0, [pc, #148]	; (1000dccc <gapm_set_dev_config_cmd_handler+0xf8>)
1000dc38:	47a8      	blx	r5
1000dc3a:	466a      	mov	r2, sp
1000dc3c:	7c12      	ldrb	r2, [r2, #16]
1000dc3e:	1ce3      	adds	r3, r4, #3
1000dc40:	77da      	strb	r2, [r3, #31]
1000dc42:	466a      	mov	r2, sp
1000dc44:	7d12      	ldrb	r2, [r2, #20]
1000dc46:	1d23      	adds	r3, r4, #4
1000dc48:	77da      	strb	r2, [r3, #31]
1000dc4a:	466a      	mov	r2, sp
1000dc4c:	7812      	ldrb	r2, [r2, #0]
1000dc4e:	1d63      	adds	r3, r4, #5
1000dc50:	77da      	strb	r2, [r3, #31]
1000dc52:	9b00      	ldr	r3, [sp, #0]
1000dc54:	1da2      	adds	r2, r4, #6
1000dc56:	0a1b      	lsrs	r3, r3, #8
1000dc58:	77d3      	strb	r3, [r2, #31]
1000dc5a:	466a      	mov	r2, sp
1000dc5c:	7912      	ldrb	r2, [r2, #4]
1000dc5e:	1de3      	adds	r3, r4, #7
1000dc60:	77da      	strb	r2, [r3, #31]
1000dc62:	1c22      	adds	r2, r4, #0
1000dc64:	9b01      	ldr	r3, [sp, #4]
1000dc66:	3208      	adds	r2, #8
1000dc68:	0a1b      	lsrs	r3, r3, #8
1000dc6a:	77d3      	strb	r3, [r2, #31]
1000dc6c:	466a      	mov	r2, sp
1000dc6e:	1c23      	adds	r3, r4, #0
1000dc70:	7a12      	ldrb	r2, [r2, #8]
1000dc72:	3328      	adds	r3, #40	; 0x28
1000dc74:	701a      	strb	r2, [r3, #0]
1000dc76:	1c22      	adds	r2, r4, #0
1000dc78:	9b02      	ldr	r3, [sp, #8]
1000dc7a:	3229      	adds	r2, #41	; 0x29
1000dc7c:	0a1b      	lsrs	r3, r3, #8
1000dc7e:	7013      	strb	r3, [r2, #0]
1000dc80:	23d0      	movs	r3, #208	; 0xd0
1000dc82:	4d13      	ldr	r5, [pc, #76]	; (1000dcd0 <gapm_set_dev_config_cmd_handler+0xfc>)
1000dc84:	011b      	lsls	r3, r3, #4
1000dc86:	802b      	strh	r3, [r5, #0]
1000dc88:	2322      	movs	r3, #34	; 0x22
1000dc8a:	71a3      	strb	r3, [r4, #6]
1000dc8c:	2300      	movs	r3, #0
1000dc8e:	212a      	movs	r1, #42	; 0x2a
1000dc90:	71e3      	strb	r3, [r4, #7]
1000dc92:	1c20      	adds	r0, r4, #0
1000dc94:	4b0f      	ldr	r3, [pc, #60]	; (1000dcd4 <gapm_set_dev_config_cmd_handler+0x100>)
1000dc96:	80af      	strh	r7, [r5, #4]
1000dc98:	4798      	blx	r3
1000dc9a:	1c30      	adds	r0, r6, #0
1000dc9c:	4b0e      	ldr	r3, [pc, #56]	; (1000dcd8 <gapm_set_dev_config_cmd_handler+0x104>)
1000dc9e:	4798      	blx	r3
1000dca0:	7833      	ldrb	r3, [r6, #0]
1000dca2:	20e2      	movs	r0, #226	; 0xe2
1000dca4:	2b00      	cmp	r3, #0
1000dca6:	d106      	bne.n	1000dcb6 <gapm_set_dev_config_cmd_handler+0xe2>
1000dca8:	68ab      	ldr	r3, [r5, #8]
1000dcaa:	20e2      	movs	r0, #226	; 0xe2
1000dcac:	781a      	ldrb	r2, [r3, #0]
1000dcae:	785b      	ldrb	r3, [r3, #1]
1000dcb0:	2a03      	cmp	r2, #3
1000dcb2:	d100      	bne.n	1000dcb6 <gapm_set_dev_config_cmd_handler+0xe2>
1000dcb4:	1c18      	adds	r0, r3, #0
1000dcb6:	b009      	add	sp, #36	; 0x24
1000dcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcba:	46c0      	nop			; (mov r8, r8)
1000dcbc:	10013650 	.word	0x10013650
1000dcc0:	100132e0 	.word	0x100132e0
1000dcc4:	1000f957 	.word	0x1000f957
1000dcc8:	1001365c 	.word	0x1001365c
1000dccc:	10013662 	.word	0x10013662
1000dcd0:	100132d4 	.word	0x100132d4
1000dcd4:	1000cfd5 	.word	0x1000cfd5
1000dcd8:	1000d031 	.word	0x1000d031

1000dcdc <gapm_get_dev_config_cmd_handler>:
1000dcdc:	4684      	mov	ip, r0
1000dcde:	4663      	mov	r3, ip
1000dce0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dce2:	b085      	sub	sp, #20
1000dce4:	9100      	str	r1, [sp, #0]
1000dce6:	20cf      	movs	r0, #207	; 0xcf
1000dce8:	2b01      	cmp	r3, #1
1000dcea:	d854      	bhi.n	1000dd96 <gapm_get_dev_config_cmd_handler+0xba>
1000dcec:	2900      	cmp	r1, #0
1000dcee:	d052      	beq.n	1000dd96 <gapm_get_dev_config_cmd_handler+0xba>
1000dcf0:	2200      	movs	r2, #0
1000dcf2:	492a      	ldr	r1, [pc, #168]	; (1000dd9c <gapm_get_dev_config_cmd_handler+0xc0>)
1000dcf4:	ab02      	add	r3, sp, #8
1000dcf6:	880c      	ldrh	r4, [r1, #0]
1000dcf8:	8809      	ldrh	r1, [r1, #0]
1000dcfa:	1d9f      	adds	r7, r3, #6
1000dcfc:	719a      	strb	r2, [r3, #6]
1000dcfe:	4b28      	ldr	r3, [pc, #160]	; (1000dda0 <gapm_get_dev_config_cmd_handler+0xc4>)
1000dd00:	0a09      	lsrs	r1, r1, #8
1000dd02:	250d      	movs	r5, #13
1000dd04:	2606      	movs	r6, #6
1000dd06:	7159      	strb	r1, [r3, #5]
1000dd08:	4661      	mov	r1, ip
1000dd0a:	701e      	strb	r6, [r3, #0]
1000dd0c:	705d      	strb	r5, [r3, #1]
1000dd0e:	709d      	strb	r5, [r3, #2]
1000dd10:	70da      	strb	r2, [r3, #3]
1000dd12:	711c      	strb	r4, [r3, #4]
1000dd14:	2901      	cmp	r1, #1
1000dd16:	d13e      	bne.n	1000dd96 <gapm_get_dev_config_cmd_handler+0xba>
1000dd18:	21d0      	movs	r1, #208	; 0xd0
1000dd1a:	4c22      	ldr	r4, [pc, #136]	; (1000dda4 <gapm_get_dev_config_cmd_handler+0xc8>)
1000dd1c:	0109      	lsls	r1, r1, #4
1000dd1e:	8061      	strh	r1, [r4, #2]
1000dd20:	4921      	ldr	r1, [pc, #132]	; (1000dda8 <gapm_get_dev_config_cmd_handler+0xcc>)
1000dd22:	71da      	strb	r2, [r3, #7]
1000dd24:	8021      	strh	r1, [r4, #0]
1000dd26:	4661      	mov	r1, ip
1000dd28:	721e      	strb	r6, [r3, #8]
1000dd2a:	7199      	strb	r1, [r3, #6]
1000dd2c:	1c18      	adds	r0, r3, #0
1000dd2e:	2109      	movs	r1, #9
1000dd30:	4b1e      	ldr	r3, [pc, #120]	; (1000ddac <gapm_get_dev_config_cmd_handler+0xd0>)
1000dd32:	80a5      	strh	r5, [r4, #4]
1000dd34:	4798      	blx	r3
1000dd36:	1c38      	adds	r0, r7, #0
1000dd38:	4b1d      	ldr	r3, [pc, #116]	; (1000ddb0 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd3a:	4798      	blx	r3
1000dd3c:	783b      	ldrb	r3, [r7, #0]
1000dd3e:	20e2      	movs	r0, #226	; 0xe2
1000dd40:	9301      	str	r3, [sp, #4]
1000dd42:	2b00      	cmp	r3, #0
1000dd44:	d127      	bne.n	1000dd96 <gapm_get_dev_config_cmd_handler+0xba>
1000dd46:	8821      	ldrh	r1, [r4, #0]
1000dd48:	4a1a      	ldr	r2, [pc, #104]	; (1000ddb4 <gapm_get_dev_config_cmd_handler+0xd8>)
1000dd4a:	68a7      	ldr	r7, [r4, #8]
1000dd4c:	3b01      	subs	r3, #1
1000dd4e:	4291      	cmp	r1, r2
1000dd50:	d001      	beq.n	1000dd56 <gapm_get_dev_config_cmd_handler+0x7a>
1000dd52:	8023      	strh	r3, [r4, #0]
1000dd54:	e01a      	b.n	1000dd8c <gapm_get_dev_config_cmd_handler+0xb0>
1000dd56:	8063      	strh	r3, [r4, #2]
1000dd58:	9b00      	ldr	r3, [sp, #0]
1000dd5a:	1c39      	adds	r1, r7, #0
1000dd5c:	1c58      	adds	r0, r3, #1
1000dd5e:	1c32      	adds	r2, r6, #0
1000dd60:	4b15      	ldr	r3, [pc, #84]	; (1000ddb8 <gapm_get_dev_config_cmd_handler+0xdc>)
1000dd62:	4798      	blx	r3
1000dd64:	79bb      	ldrb	r3, [r7, #6]
1000dd66:	9a00      	ldr	r2, [sp, #0]
1000dd68:	7013      	strb	r3, [r2, #0]
1000dd6a:	23d0      	movs	r3, #208	; 0xd0
1000dd6c:	011b      	lsls	r3, r3, #4
1000dd6e:	8023      	strh	r3, [r4, #0]
1000dd70:	ab02      	add	r3, sp, #8
1000dd72:	80a5      	strh	r5, [r4, #4]
1000dd74:	1ddd      	adds	r5, r3, #7
1000dd76:	466b      	mov	r3, sp
1000dd78:	791b      	ldrb	r3, [r3, #4]
1000dd7a:	1c28      	adds	r0, r5, #0
1000dd7c:	702b      	strb	r3, [r5, #0]
1000dd7e:	4b0c      	ldr	r3, [pc, #48]	; (1000ddb0 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd80:	4798      	blx	r3
1000dd82:	782b      	ldrb	r3, [r5, #0]
1000dd84:	20d0      	movs	r0, #208	; 0xd0
1000dd86:	2b00      	cmp	r3, #0
1000dd88:	d105      	bne.n	1000dd96 <gapm_get_dev_config_cmd_handler+0xba>
1000dd8a:	68a7      	ldr	r7, [r4, #8]
1000dd8c:	783b      	ldrb	r3, [r7, #0]
1000dd8e:	7878      	ldrb	r0, [r7, #1]
1000dd90:	2b06      	cmp	r3, #6
1000dd92:	d000      	beq.n	1000dd96 <gapm_get_dev_config_cmd_handler+0xba>
1000dd94:	20e2      	movs	r0, #226	; 0xe2
1000dd96:	b005      	add	sp, #20
1000dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd9a:	46c0      	nop			; (mov r8, r8)
1000dd9c:	100132e0 	.word	0x100132e0
1000dda0:	10013650 	.word	0x10013650
1000dda4:	100132d4 	.word	0x100132d4
1000dda8:	00000d08 	.word	0x00000d08
1000ddac:	1000cfd5 	.word	0x1000cfd5
1000ddb0:	1000d031 	.word	0x1000d031
1000ddb4:	0000ffff 	.word	0x0000ffff
1000ddb8:	1000f957 	.word	0x1000f957

1000ddbc <gapm_cancel_cmd_handler>:
1000ddbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ddbe:	4916      	ldr	r1, [pc, #88]	; (1000de18 <gapm_cancel_cmd_handler+0x5c>)
1000ddc0:	4816      	ldr	r0, [pc, #88]	; (1000de1c <gapm_cancel_cmd_handler+0x60>)
1000ddc2:	880c      	ldrh	r4, [r1, #0]
1000ddc4:	8809      	ldrh	r1, [r1, #0]
1000ddc6:	466b      	mov	r3, sp
1000ddc8:	0a09      	lsrs	r1, r1, #8
1000ddca:	7141      	strb	r1, [r0, #5]
1000ddcc:	2102      	movs	r1, #2
1000ddce:	2203      	movs	r2, #3
1000ddd0:	7201      	strb	r1, [r0, #8]
1000ddd2:	21d0      	movs	r1, #208	; 0xd0
1000ddd4:	1ddd      	adds	r5, r3, #7
1000ddd6:	2300      	movs	r3, #0
1000ddd8:	7104      	strb	r4, [r0, #4]
1000ddda:	4c11      	ldr	r4, [pc, #68]	; (1000de20 <gapm_cancel_cmd_handler+0x64>)
1000dddc:	7002      	strb	r2, [r0, #0]
1000ddde:	0109      	lsls	r1, r1, #4
1000dde0:	320a      	adds	r2, #10
1000dde2:	702b      	strb	r3, [r5, #0]
1000dde4:	7042      	strb	r2, [r0, #1]
1000dde6:	7082      	strb	r2, [r0, #2]
1000dde8:	70c3      	strb	r3, [r0, #3]
1000ddea:	8021      	strh	r1, [r4, #0]
1000ddec:	80a2      	strh	r2, [r4, #4]
1000ddee:	71c3      	strb	r3, [r0, #7]
1000ddf0:	3a0c      	subs	r2, #12
1000ddf2:	2109      	movs	r1, #9
1000ddf4:	4b0b      	ldr	r3, [pc, #44]	; (1000de24 <gapm_cancel_cmd_handler+0x68>)
1000ddf6:	7182      	strb	r2, [r0, #6]
1000ddf8:	4798      	blx	r3
1000ddfa:	1c28      	adds	r0, r5, #0
1000ddfc:	4b0a      	ldr	r3, [pc, #40]	; (1000de28 <gapm_cancel_cmd_handler+0x6c>)
1000ddfe:	4798      	blx	r3
1000de00:	7828      	ldrb	r0, [r5, #0]
1000de02:	2800      	cmp	r0, #0
1000de04:	d001      	beq.n	1000de0a <gapm_cancel_cmd_handler+0x4e>
1000de06:	20e2      	movs	r0, #226	; 0xe2
1000de08:	e004      	b.n	1000de14 <gapm_cancel_cmd_handler+0x58>
1000de0a:	68a3      	ldr	r3, [r4, #8]
1000de0c:	785b      	ldrb	r3, [r3, #1]
1000de0e:	2b44      	cmp	r3, #68	; 0x44
1000de10:	d000      	beq.n	1000de14 <gapm_cancel_cmd_handler+0x58>
1000de12:	1c18      	adds	r0, r3, #0
1000de14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000de16:	46c0      	nop			; (mov r8, r8)
1000de18:	100132e0 	.word	0x100132e0
1000de1c:	10013650 	.word	0x10013650
1000de20:	100132d4 	.word	0x100132d4
1000de24:	1000cfd5 	.word	0x1000cfd5
1000de28:	1000d031 	.word	0x1000d031

1000de2c <gapm_dev_bdaddr_ind_handler>:
1000de2c:	b538      	push	{r3, r4, r5, lr}
1000de2e:	1c05      	adds	r5, r0, #0
1000de30:	1c0c      	adds	r4, r1, #0
1000de32:	1c48      	adds	r0, r1, #1
1000de34:	2206      	movs	r2, #6
1000de36:	1c29      	adds	r1, r5, #0
1000de38:	4b02      	ldr	r3, [pc, #8]	; (1000de44 <gapm_dev_bdaddr_ind_handler+0x18>)
1000de3a:	4798      	blx	r3
1000de3c:	79ab      	ldrb	r3, [r5, #6]
1000de3e:	2000      	movs	r0, #0
1000de40:	7023      	strb	r3, [r4, #0]
1000de42:	bd38      	pop	{r3, r4, r5, pc}
1000de44:	1000f957 	.word	0x1000f957

1000de48 <gapm_cmp_evt>:
1000de48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de4a:	7803      	ldrb	r3, [r0, #0]
1000de4c:	7845      	ldrb	r5, [r0, #1]
1000de4e:	3b0c      	subs	r3, #12
1000de50:	1e18      	subs	r0, r3, #0
1000de52:	280b      	cmp	r0, #11
1000de54:	d900      	bls.n	1000de58 <gapm_cmp_evt+0x10>
1000de56:	e08d      	b.n	1000df74 <gapm_cmp_evt+0x12c>
1000de58:	1c0c      	adds	r4, r1, #0
1000de5a:	f000 fced 	bl	1000e838 <__gnu_thumb1_case_uqi>
1000de5e:	1952      	.short	0x1952
1000de60:	068b1919 	.word	0x068b1919
1000de64:	8b595906 	.word	0x8b595906
1000de68:	0d8b      	.short	0x0d8b
1000de6a:	2300      	movs	r3, #0
1000de6c:	2d45      	cmp	r5, #69	; 0x45
1000de6e:	d000      	beq.n	1000de72 <gapm_cmp_evt+0x2a>
1000de70:	1c2b      	adds	r3, r5, #0
1000de72:	7023      	strb	r3, [r4, #0]
1000de74:	2002      	movs	r0, #2
1000de76:	e07e      	b.n	1000df76 <gapm_cmp_evt+0x12e>
1000de78:	203b      	movs	r0, #59	; 0x3b
1000de7a:	2d00      	cmp	r5, #0
1000de7c:	d100      	bne.n	1000de80 <gapm_cmp_evt+0x38>
1000de7e:	e07a      	b.n	1000df76 <gapm_cmp_evt+0x12e>
1000de80:	700d      	strb	r5, [r1, #0]
1000de82:	1c48      	adds	r0, r1, #1
1000de84:	2210      	movs	r2, #16
1000de86:	2100      	movs	r1, #0
1000de88:	4b3b      	ldr	r3, [pc, #236]	; (1000df78 <gapm_cmp_evt+0x130>)
1000de8a:	4798      	blx	r3
1000de8c:	200f      	movs	r0, #15
1000de8e:	e072      	b.n	1000df76 <gapm_cmp_evt+0x12e>
1000de90:	2d00      	cmp	r5, #0
1000de92:	d134      	bne.n	1000defe <gapm_cmp_evt+0xb6>
1000de94:	4b39      	ldr	r3, [pc, #228]	; (1000df7c <gapm_cmp_evt+0x134>)
1000de96:	4798      	blx	r3
1000de98:	1e43      	subs	r3, r0, #1
1000de9a:	b2db      	uxtb	r3, r3
1000de9c:	1c28      	adds	r0, r5, #0
1000de9e:	2b06      	cmp	r3, #6
1000dea0:	d869      	bhi.n	1000df76 <gapm_cmp_evt+0x12e>
1000dea2:	466b      	mov	r3, sp
1000dea4:	4e36      	ldr	r6, [pc, #216]	; (1000df80 <gapm_cmp_evt+0x138>)
1000dea6:	1dd9      	adds	r1, r3, #7
1000dea8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000deaa:	4b36      	ldr	r3, [pc, #216]	; (1000df84 <gapm_cmp_evt+0x13c>)
1000deac:	4798      	blx	r3
1000deae:	2312      	movs	r3, #18
1000deb0:	4358      	muls	r0, r3
1000deb2:	4935      	ldr	r1, [pc, #212]	; (1000df88 <gapm_cmp_evt+0x140>)
1000deb4:	1809      	adds	r1, r1, r0
1000deb6:	1c0b      	adds	r3, r1, #0
1000deb8:	894a      	ldrh	r2, [r1, #10]
1000deba:	3308      	adds	r3, #8
1000debc:	8122      	strh	r2, [r4, #8]
1000debe:	784f      	ldrb	r7, [r1, #1]
1000dec0:	72a5      	strb	r5, [r4, #10]
1000dec2:	7027      	strb	r7, [r4, #0]
1000dec4:	898a      	ldrh	r2, [r1, #12]
1000dec6:	1c60      	adds	r0, r4, #1
1000dec8:	81a2      	strh	r2, [r4, #12]
1000deca:	88db      	ldrh	r3, [r3, #6]
1000decc:	3102      	adds	r1, #2
1000dece:	81e3      	strh	r3, [r4, #14]
1000ded0:	89cb      	ldrh	r3, [r1, #14]
1000ded2:	2206      	movs	r2, #6
1000ded4:	8223      	strh	r3, [r4, #16]
1000ded6:	4b2d      	ldr	r3, [pc, #180]	; (1000df8c <gapm_cmp_evt+0x144>)
1000ded8:	4798      	blx	r3
1000deda:	2f00      	cmp	r7, #0
1000dedc:	d00a      	beq.n	1000def4 <gapm_cmp_evt+0xac>
1000dede:	79a3      	ldrb	r3, [r4, #6]
1000dee0:	223f      	movs	r2, #63	; 0x3f
1000dee2:	1c19      	adds	r1, r3, #0
1000dee4:	3501      	adds	r5, #1
1000dee6:	4391      	bics	r1, r2
1000dee8:	29c0      	cmp	r1, #192	; 0xc0
1000deea:	d003      	beq.n	1000def4 <gapm_cmp_evt+0xac>
1000deec:	065b      	lsls	r3, r3, #25
1000deee:	0fdb      	lsrs	r3, r3, #31
1000def0:	3502      	adds	r5, #2
1000def2:	1aed      	subs	r5, r5, r3
1000def4:	2301      	movs	r3, #1
1000def6:	425b      	negs	r3, r3
1000def8:	7025      	strb	r5, [r4, #0]
1000defa:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000defc:	e038      	b.n	1000df70 <gapm_cmp_evt+0x128>
1000defe:	700d      	strb	r5, [r1, #0]
1000df00:	e004      	b.n	1000df0c <gapm_cmp_evt+0xc4>
1000df02:	2300      	movs	r3, #0
1000df04:	2d45      	cmp	r5, #69	; 0x45
1000df06:	d000      	beq.n	1000df0a <gapm_cmp_evt+0xc2>
1000df08:	1c2b      	adds	r3, r5, #0
1000df0a:	7023      	strb	r3, [r4, #0]
1000df0c:	2003      	movs	r0, #3
1000df0e:	e032      	b.n	1000df76 <gapm_cmp_evt+0x12e>
1000df10:	4e1b      	ldr	r6, [pc, #108]	; (1000df80 <gapm_cmp_evt+0x138>)
1000df12:	2100      	movs	r1, #0
1000df14:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000df16:	4b1b      	ldr	r3, [pc, #108]	; (1000df84 <gapm_cmp_evt+0x13c>)
1000df18:	4798      	blx	r3
1000df1a:	2807      	cmp	r0, #7
1000df1c:	d818      	bhi.n	1000df50 <gapm_cmp_evt+0x108>
1000df1e:	2301      	movs	r3, #1
1000df20:	425b      	negs	r3, r3
1000df22:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000df24:	3313      	adds	r3, #19
1000df26:	4358      	muls	r0, r3
1000df28:	4917      	ldr	r1, [pc, #92]	; (1000df88 <gapm_cmp_evt+0x140>)
1000df2a:	1809      	adds	r1, r1, r0
1000df2c:	1c0b      	adds	r3, r1, #0
1000df2e:	894a      	ldrh	r2, [r1, #10]
1000df30:	3308      	adds	r3, #8
1000df32:	8122      	strh	r2, [r4, #8]
1000df34:	784a      	ldrb	r2, [r1, #1]
1000df36:	72a5      	strb	r5, [r4, #10]
1000df38:	7022      	strb	r2, [r4, #0]
1000df3a:	898a      	ldrh	r2, [r1, #12]
1000df3c:	1c60      	adds	r0, r4, #1
1000df3e:	81a2      	strh	r2, [r4, #12]
1000df40:	88db      	ldrh	r3, [r3, #6]
1000df42:	3102      	adds	r1, #2
1000df44:	81e3      	strh	r3, [r4, #14]
1000df46:	89cb      	ldrh	r3, [r1, #14]
1000df48:	2206      	movs	r2, #6
1000df4a:	8223      	strh	r3, [r4, #16]
1000df4c:	4b0f      	ldr	r3, [pc, #60]	; (1000df8c <gapm_cmp_evt+0x144>)
1000df4e:	4798      	blx	r3
1000df50:	2200      	movs	r2, #0
1000df52:	7823      	ldrb	r3, [r4, #0]
1000df54:	4293      	cmp	r3, r2
1000df56:	d00a      	beq.n	1000df6e <gapm_cmp_evt+0x126>
1000df58:	79a3      	ldrb	r3, [r4, #6]
1000df5a:	323f      	adds	r2, #63	; 0x3f
1000df5c:	1c19      	adds	r1, r3, #0
1000df5e:	4391      	bics	r1, r2
1000df60:	3a3e      	subs	r2, #62	; 0x3e
1000df62:	29c0      	cmp	r1, #192	; 0xc0
1000df64:	d003      	beq.n	1000df6e <gapm_cmp_evt+0x126>
1000df66:	065b      	lsls	r3, r3, #25
1000df68:	0fdb      	lsrs	r3, r3, #31
1000df6a:	3202      	adds	r2, #2
1000df6c:	1ad2      	subs	r2, r2, r3
1000df6e:	7022      	strb	r2, [r4, #0]
1000df70:	2005      	movs	r0, #5
1000df72:	e000      	b.n	1000df76 <gapm_cmp_evt+0x12e>
1000df74:	2000      	movs	r0, #0
1000df76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000df78:	1000f969 	.word	0x1000f969
1000df7c:	1000d1d9 	.word	0x1000d1d9
1000df80:	10013372 	.word	0x10013372
1000df84:	1000d19d 	.word	0x1000d19d
1000df88:	100132e2 	.word	0x100132e2
1000df8c:	1000f957 	.word	0x1000f957

1000df90 <get_gap_local_addr_type>:
1000df90:	4b04      	ldr	r3, [pc, #16]	; (1000dfa4 <get_gap_local_addr_type+0x14>)
1000df92:	2001      	movs	r0, #1
1000df94:	791b      	ldrb	r3, [r3, #4]
1000df96:	2b02      	cmp	r3, #2
1000df98:	d003      	beq.n	1000dfa2 <get_gap_local_addr_type+0x12>
1000df9a:	3b03      	subs	r3, #3
1000df9c:	4258      	negs	r0, r3
1000df9e:	4158      	adcs	r0, r3
1000dfa0:	0040      	lsls	r0, r0, #1
1000dfa2:	4770      	bx	lr
1000dfa4:	10013372 	.word	0x10013372

1000dfa8 <gapm_start_scan_cmd_handler>:
1000dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfaa:	b085      	sub	sp, #20
1000dfac:	ab0a      	add	r3, sp, #40	; 0x28
1000dfae:	881e      	ldrh	r6, [r3, #0]
1000dfb0:	ab0b      	add	r3, sp, #44	; 0x2c
1000dfb2:	881d      	ldrh	r5, [r3, #0]
1000dfb4:	ab0c      	add	r3, sp, #48	; 0x30
1000dfb6:	781b      	ldrb	r3, [r3, #0]
1000dfb8:	4f1e      	ldr	r7, [pc, #120]	; (1000e034 <gapm_start_scan_cmd_handler+0x8c>)
1000dfba:	9301      	str	r3, [sp, #4]
1000dfbc:	ab0d      	add	r3, sp, #52	; 0x34
1000dfbe:	781b      	ldrb	r3, [r3, #0]
1000dfc0:	9100      	str	r1, [sp, #0]
1000dfc2:	9302      	str	r3, [sp, #8]
1000dfc4:	ab0e      	add	r3, sp, #56	; 0x38
1000dfc6:	781b      	ldrb	r3, [r3, #0]
1000dfc8:	8839      	ldrh	r1, [r7, #0]
1000dfca:	9303      	str	r3, [sp, #12]
1000dfcc:	ab0f      	add	r3, sp, #60	; 0x3c
1000dfce:	881c      	ldrh	r4, [r3, #0]
1000dfd0:	4b19      	ldr	r3, [pc, #100]	; (1000e038 <gapm_start_scan_cmd_handler+0x90>)
1000dfd2:	220f      	movs	r2, #15
1000dfd4:	7119      	strb	r1, [r3, #4]
1000dfd6:	4669      	mov	r1, sp
1000dfd8:	7809      	ldrb	r1, [r1, #0]
1000dfda:	701a      	strb	r2, [r3, #0]
1000dfdc:	7259      	strb	r1, [r3, #9]
1000dfde:	4669      	mov	r1, sp
1000dfe0:	7909      	ldrb	r1, [r1, #4]
1000dfe2:	3a02      	subs	r2, #2
1000dfe4:	7419      	strb	r1, [r3, #16]
1000dfe6:	4669      	mov	r1, sp
1000dfe8:	705a      	strb	r2, [r3, #1]
1000dfea:	709a      	strb	r2, [r3, #2]
1000dfec:	2200      	movs	r2, #0
1000dfee:	883f      	ldrh	r7, [r7, #0]
1000dff0:	7a09      	ldrb	r1, [r1, #8]
1000dff2:	731e      	strb	r6, [r3, #12]
1000dff4:	739d      	strb	r5, [r3, #14]
1000dff6:	0a3f      	lsrs	r7, r7, #8
1000dff8:	0a36      	lsrs	r6, r6, #8
1000dffa:	0a2d      	lsrs	r5, r5, #8
1000dffc:	70da      	strb	r2, [r3, #3]
1000dffe:	729a      	strb	r2, [r3, #10]
1000e000:	72da      	strb	r2, [r3, #11]
1000e002:	715f      	strb	r7, [r3, #5]
1000e004:	7218      	strb	r0, [r3, #8]
1000e006:	735e      	strb	r6, [r3, #13]
1000e008:	73dd      	strb	r5, [r3, #15]
1000e00a:	7459      	strb	r1, [r3, #17]
1000e00c:	4669      	mov	r1, sp
1000e00e:	7b09      	ldrb	r1, [r1, #12]
1000e010:	759c      	strb	r4, [r3, #22]
1000e012:	7499      	strb	r1, [r3, #18]
1000e014:	21a5      	movs	r1, #165	; 0xa5
1000e016:	0a24      	lsrs	r4, r4, #8
1000e018:	7519      	strb	r1, [r3, #20]
1000e01a:	7559      	strb	r1, [r3, #21]
1000e01c:	3995      	subs	r1, #149	; 0x95
1000e01e:	74da      	strb	r2, [r3, #19]
1000e020:	75dc      	strb	r4, [r3, #23]
1000e022:	7199      	strb	r1, [r3, #6]
1000e024:	71da      	strb	r2, [r3, #7]
1000e026:	1c18      	adds	r0, r3, #0
1000e028:	3108      	adds	r1, #8
1000e02a:	4b04      	ldr	r3, [pc, #16]	; (1000e03c <gapm_start_scan_cmd_handler+0x94>)
1000e02c:	4798      	blx	r3
1000e02e:	b005      	add	sp, #20
1000e030:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e032:	46c0      	nop			; (mov r8, r8)
1000e034:	100132e0 	.word	0x100132e0
1000e038:	10013650 	.word	0x10013650
1000e03c:	1000cfd5 	.word	0x1000cfd5

1000e040 <gapm_adv_report_evt_handler>:
1000e040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e042:	7843      	ldrb	r3, [r0, #1]
1000e044:	1c05      	adds	r5, r0, #0
1000e046:	9301      	str	r3, [sp, #4]
1000e048:	466b      	mov	r3, sp
1000e04a:	1c0c      	adds	r4, r1, #0
1000e04c:	791b      	ldrb	r3, [r3, #4]
1000e04e:	7806      	ldrb	r6, [r0, #0]
1000e050:	2206      	movs	r2, #6
1000e052:	704b      	strb	r3, [r1, #1]
1000e054:	1c88      	adds	r0, r1, #2
1000e056:	4f1b      	ldr	r7, [pc, #108]	; (1000e0c4 <gapm_adv_report_evt_handler+0x84>)
1000e058:	1ca9      	adds	r1, r5, #2
1000e05a:	47b8      	blx	r7
1000e05c:	1c20      	adds	r0, r4, #0
1000e05e:	1c29      	adds	r1, r5, #0
1000e060:	7a2a      	ldrb	r2, [r5, #8]
1000e062:	3008      	adds	r0, #8
1000e064:	77c2      	strb	r2, [r0, #31]
1000e066:	3109      	adds	r1, #9
1000e068:	3528      	adds	r5, #40	; 0x28
1000e06a:	47b8      	blx	r7
1000e06c:	782b      	ldrb	r3, [r5, #0]
1000e06e:	b25a      	sxtb	r2, r3
1000e070:	2a00      	cmp	r2, #0
1000e072:	da01      	bge.n	1000e078 <gapm_adv_report_evt_handler+0x38>
1000e074:	3301      	adds	r3, #1
1000e076:	b2db      	uxtb	r3, r3
1000e078:	1c22      	adds	r2, r4, #0
1000e07a:	3228      	adds	r2, #40	; 0x28
1000e07c:	7013      	strb	r3, [r2, #0]
1000e07e:	2200      	movs	r2, #0
1000e080:	9b01      	ldr	r3, [sp, #4]
1000e082:	4293      	cmp	r3, r2
1000e084:	d00a      	beq.n	1000e09c <gapm_adv_report_evt_handler+0x5c>
1000e086:	79e3      	ldrb	r3, [r4, #7]
1000e088:	323f      	adds	r2, #63	; 0x3f
1000e08a:	1c19      	adds	r1, r3, #0
1000e08c:	4391      	bics	r1, r2
1000e08e:	3a3e      	subs	r2, #62	; 0x3e
1000e090:	29c0      	cmp	r1, #192	; 0xc0
1000e092:	d003      	beq.n	1000e09c <gapm_adv_report_evt_handler+0x5c>
1000e094:	065b      	lsls	r3, r3, #25
1000e096:	0fdb      	lsrs	r3, r3, #31
1000e098:	3202      	adds	r2, #2
1000e09a:	1ad2      	subs	r2, r2, r3
1000e09c:	7062      	strb	r2, [r4, #1]
1000e09e:	2e04      	cmp	r6, #4
1000e0a0:	d80f      	bhi.n	1000e0c2 <gapm_adv_report_evt_handler+0x82>
1000e0a2:	1c30      	adds	r0, r6, #0
1000e0a4:	f000 fbc8 	bl	1000e838 <__gnu_thumb1_case_uqi>
1000e0a8:	09070503 	.word	0x09070503
1000e0ac:	0b          	.byte	0x0b
1000e0ad:	00          	.byte	0x00
1000e0ae:	2300      	movs	r3, #0
1000e0b0:	e006      	b.n	1000e0c0 <gapm_adv_report_evt_handler+0x80>
1000e0b2:	2301      	movs	r3, #1
1000e0b4:	e004      	b.n	1000e0c0 <gapm_adv_report_evt_handler+0x80>
1000e0b6:	2302      	movs	r3, #2
1000e0b8:	e002      	b.n	1000e0c0 <gapm_adv_report_evt_handler+0x80>
1000e0ba:	2303      	movs	r3, #3
1000e0bc:	e000      	b.n	1000e0c0 <gapm_adv_report_evt_handler+0x80>
1000e0be:	2305      	movs	r3, #5
1000e0c0:	7023      	strb	r3, [r4, #0]
1000e0c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e0c4:	1000f957 	.word	0x1000f957

1000e0c8 <gapm_start_connection_cmd_handler>:
1000e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0ca:	b089      	sub	sp, #36	; 0x24
1000e0cc:	aa0f      	add	r2, sp, #60	; 0x3c
1000e0ce:	8812      	ldrh	r2, [r2, #0]
1000e0d0:	9107      	str	r1, [sp, #28]
1000e0d2:	4694      	mov	ip, r2
1000e0d4:	aa10      	add	r2, sp, #64	; 0x40
1000e0d6:	8812      	ldrh	r2, [r2, #0]
1000e0d8:	a908      	add	r1, sp, #32
1000e0da:	9202      	str	r2, [sp, #8]
1000e0dc:	aa11      	add	r2, sp, #68	; 0x44
1000e0de:	8812      	ldrh	r2, [r2, #0]
1000e0e0:	4e3b      	ldr	r6, [pc, #236]	; (1000e1d0 <gapm_start_connection_cmd_handler+0x108>)
1000e0e2:	9203      	str	r2, [sp, #12]
1000e0e4:	aa12      	add	r2, sp, #72	; 0x48
1000e0e6:	8812      	ldrh	r2, [r2, #0]
1000e0e8:	4c3a      	ldr	r4, [pc, #232]	; (1000e1d4 <gapm_start_connection_cmd_handler+0x10c>)
1000e0ea:	9204      	str	r2, [sp, #16]
1000e0ec:	aa13      	add	r2, sp, #76	; 0x4c
1000e0ee:	8812      	ldrh	r2, [r2, #0]
1000e0f0:	ab0e      	add	r3, sp, #56	; 0x38
1000e0f2:	9205      	str	r2, [sp, #20]
1000e0f4:	aa14      	add	r2, sp, #80	; 0x50
1000e0f6:	8812      	ldrh	r2, [r2, #0]
1000e0f8:	881b      	ldrh	r3, [r3, #0]
1000e0fa:	9206      	str	r2, [sp, #24]
1000e0fc:	aa15      	add	r2, sp, #84	; 0x54
1000e0fe:	8817      	ldrh	r7, [r2, #0]
1000e100:	2219      	movs	r2, #25
1000e102:	1852      	adds	r2, r2, r1
1000e104:	7fd2      	ldrb	r2, [r2, #31]
1000e106:	8831      	ldrh	r1, [r6, #0]
1000e108:	9201      	str	r2, [sp, #4]
1000e10a:	2211      	movs	r2, #17
1000e10c:	7121      	strb	r1, [r4, #4]
1000e10e:	4669      	mov	r1, sp
1000e110:	7022      	strb	r2, [r4, #0]
1000e112:	3a04      	subs	r2, #4
1000e114:	7062      	strb	r2, [r4, #1]
1000e116:	70a2      	strb	r2, [r4, #2]
1000e118:	2200      	movs	r2, #0
1000e11a:	8836      	ldrh	r6, [r6, #0]
1000e11c:	7f09      	ldrb	r1, [r1, #28]
1000e11e:	0a36      	lsrs	r6, r6, #8
1000e120:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000e122:	7166      	strb	r6, [r4, #5]
1000e124:	70e2      	strb	r2, [r4, #3]
1000e126:	7220      	strb	r0, [r4, #8]
1000e128:	7261      	strb	r1, [r4, #9]
1000e12a:	72a2      	strb	r2, [r4, #10]
1000e12c:	72e2      	strb	r2, [r4, #11]
1000e12e:	7323      	strb	r3, [r4, #12]
1000e130:	0a1b      	lsrs	r3, r3, #8
1000e132:	7363      	strb	r3, [r4, #13]
1000e134:	4663      	mov	r3, ip
1000e136:	73a3      	strb	r3, [r4, #14]
1000e138:	4663      	mov	r3, ip
1000e13a:	0a1b      	lsrs	r3, r3, #8
1000e13c:	73e3      	strb	r3, [r4, #15]
1000e13e:	466b      	mov	r3, sp
1000e140:	7a1b      	ldrb	r3, [r3, #8]
1000e142:	2607      	movs	r6, #7
1000e144:	7423      	strb	r3, [r4, #16]
1000e146:	9b02      	ldr	r3, [sp, #8]
1000e148:	76a7      	strb	r7, [r4, #26]
1000e14a:	0a1b      	lsrs	r3, r3, #8
1000e14c:	7463      	strb	r3, [r4, #17]
1000e14e:	466b      	mov	r3, sp
1000e150:	7b1b      	ldrb	r3, [r3, #12]
1000e152:	74a3      	strb	r3, [r4, #18]
1000e154:	9b03      	ldr	r3, [sp, #12]
1000e156:	0a1b      	lsrs	r3, r3, #8
1000e158:	74e3      	strb	r3, [r4, #19]
1000e15a:	466b      	mov	r3, sp
1000e15c:	7c1b      	ldrb	r3, [r3, #16]
1000e15e:	7523      	strb	r3, [r4, #20]
1000e160:	9b04      	ldr	r3, [sp, #16]
1000e162:	0a1b      	lsrs	r3, r3, #8
1000e164:	7563      	strb	r3, [r4, #21]
1000e166:	466b      	mov	r3, sp
1000e168:	7d1b      	ldrb	r3, [r3, #20]
1000e16a:	75a3      	strb	r3, [r4, #22]
1000e16c:	9b05      	ldr	r3, [sp, #20]
1000e16e:	0a1b      	lsrs	r3, r3, #8
1000e170:	75e3      	strb	r3, [r4, #23]
1000e172:	466b      	mov	r3, sp
1000e174:	7e1b      	ldrb	r3, [r3, #24]
1000e176:	7623      	strb	r3, [r4, #24]
1000e178:	9b06      	ldr	r3, [sp, #24]
1000e17a:	0a1b      	lsrs	r3, r3, #8
1000e17c:	7663      	strb	r3, [r4, #25]
1000e17e:	0a3b      	lsrs	r3, r7, #8
1000e180:	76e3      	strb	r3, [r4, #27]
1000e182:	466b      	mov	r3, sp
1000e184:	791b      	ldrb	r3, [r3, #4]
1000e186:	4f14      	ldr	r7, [pc, #80]	; (1000e1d8 <gapm_start_connection_cmd_handler+0x110>)
1000e188:	7723      	strb	r3, [r4, #28]
1000e18a:	9b01      	ldr	r3, [sp, #4]
1000e18c:	435e      	muls	r6, r3
1000e18e:	19ae      	adds	r6, r5, r6
1000e190:	42b5      	cmp	r5, r6
1000e192:	d00f      	beq.n	1000e1b4 <gapm_start_connection_cmd_handler+0xec>
1000e194:	1c69      	adds	r1, r5, #1
1000e196:	1c38      	adds	r0, r7, #0
1000e198:	2206      	movs	r2, #6
1000e19a:	4b10      	ldr	r3, [pc, #64]	; (1000e1dc <gapm_start_connection_cmd_handler+0x114>)
1000e19c:	4798      	blx	r3
1000e19e:	2200      	movs	r2, #0
1000e1a0:	2102      	movs	r1, #2
1000e1a2:	782b      	ldrb	r3, [r5, #0]
1000e1a4:	3507      	adds	r5, #7
1000e1a6:	3b01      	subs	r3, #1
1000e1a8:	b2db      	uxtb	r3, r3
1000e1aa:	4299      	cmp	r1, r3
1000e1ac:	4152      	adcs	r2, r2
1000e1ae:	71ba      	strb	r2, [r7, #6]
1000e1b0:	3707      	adds	r7, #7
1000e1b2:	e7ed      	b.n	1000e190 <gapm_start_connection_cmd_handler+0xc8>
1000e1b4:	2107      	movs	r1, #7
1000e1b6:	9b01      	ldr	r3, [sp, #4]
1000e1b8:	1c20      	adds	r0, r4, #0
1000e1ba:	4359      	muls	r1, r3
1000e1bc:	311d      	adds	r1, #29
1000e1be:	1c0b      	adds	r3, r1, #0
1000e1c0:	3b08      	subs	r3, #8
1000e1c2:	71a3      	strb	r3, [r4, #6]
1000e1c4:	121b      	asrs	r3, r3, #8
1000e1c6:	71e3      	strb	r3, [r4, #7]
1000e1c8:	4b05      	ldr	r3, [pc, #20]	; (1000e1e0 <gapm_start_connection_cmd_handler+0x118>)
1000e1ca:	4798      	blx	r3
1000e1cc:	b009      	add	sp, #36	; 0x24
1000e1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1d0:	100132e0 	.word	0x100132e0
1000e1d4:	10013650 	.word	0x10013650
1000e1d8:	1001366d 	.word	0x1001366d
1000e1dc:	1000f957 	.word	0x1000f957
1000e1e0:	1000cfd5 	.word	0x1000cfd5

1000e1e4 <gapm_resolv_addr_cmd_handler>:
1000e1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e1e6:	2314      	movs	r3, #20
1000e1e8:	4c12      	ldr	r4, [pc, #72]	; (1000e234 <gapm_resolv_addr_cmd_handler+0x50>)
1000e1ea:	1c17      	adds	r7, r2, #0
1000e1ec:	7023      	strb	r3, [r4, #0]
1000e1ee:	3b07      	subs	r3, #7
1000e1f0:	7063      	strb	r3, [r4, #1]
1000e1f2:	70a3      	strb	r3, [r4, #2]
1000e1f4:	2300      	movs	r3, #0
1000e1f6:	70e3      	strb	r3, [r4, #3]
1000e1f8:	4b0f      	ldr	r3, [pc, #60]	; (1000e238 <gapm_resolv_addr_cmd_handler+0x54>)
1000e1fa:	1c05      	adds	r5, r0, #0
1000e1fc:	881a      	ldrh	r2, [r3, #0]
1000e1fe:	881b      	ldrh	r3, [r3, #0]
1000e200:	4e0e      	ldr	r6, [pc, #56]	; (1000e23c <gapm_resolv_addr_cmd_handler+0x58>)
1000e202:	0a1b      	lsrs	r3, r3, #8
1000e204:	7163      	strb	r3, [r4, #5]
1000e206:	2317      	movs	r3, #23
1000e208:	012d      	lsls	r5, r5, #4
1000e20a:	7122      	strb	r2, [r4, #4]
1000e20c:	7260      	strb	r0, [r4, #9]
1000e20e:	2206      	movs	r2, #6
1000e210:	480b      	ldr	r0, [pc, #44]	; (1000e240 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e212:	7223      	strb	r3, [r4, #8]
1000e214:	47b0      	blx	r6
1000e216:	1c39      	adds	r1, r7, #0
1000e218:	1c2a      	adds	r2, r5, #0
1000e21a:	480a      	ldr	r0, [pc, #40]	; (1000e244 <gapm_resolv_addr_cmd_handler+0x60>)
1000e21c:	47b0      	blx	r6
1000e21e:	1c29      	adds	r1, r5, #0
1000e220:	3110      	adds	r1, #16
1000e222:	1c0b      	adds	r3, r1, #0
1000e224:	3b08      	subs	r3, #8
1000e226:	71a3      	strb	r3, [r4, #6]
1000e228:	121b      	asrs	r3, r3, #8
1000e22a:	71e3      	strb	r3, [r4, #7]
1000e22c:	1c20      	adds	r0, r4, #0
1000e22e:	4b06      	ldr	r3, [pc, #24]	; (1000e248 <gapm_resolv_addr_cmd_handler+0x64>)
1000e230:	4798      	blx	r3
1000e232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e234:	10013650 	.word	0x10013650
1000e238:	100132e0 	.word	0x100132e0
1000e23c:	1000f957 	.word	0x1000f957
1000e240:	1001365a 	.word	0x1001365a
1000e244:	10013660 	.word	0x10013660
1000e248:	1000cfd5 	.word	0x1000cfd5

1000e24c <gapm_addr_solved_ind_handler>:
1000e24c:	b570      	push	{r4, r5, r6, lr}
1000e24e:	1c04      	adds	r4, r0, #0
1000e250:	1c08      	adds	r0, r1, #0
1000e252:	1c0d      	adds	r5, r1, #0
1000e254:	4e05      	ldr	r6, [pc, #20]	; (1000e26c <gapm_addr_solved_ind_handler+0x20>)
1000e256:	1c21      	adds	r1, r4, #0
1000e258:	2206      	movs	r2, #6
1000e25a:	3011      	adds	r0, #17
1000e25c:	47b0      	blx	r6
1000e25e:	1c68      	adds	r0, r5, #1
1000e260:	1da1      	adds	r1, r4, #6
1000e262:	2210      	movs	r2, #16
1000e264:	47b0      	blx	r6
1000e266:	2300      	movs	r3, #0
1000e268:	702b      	strb	r3, [r5, #0]
1000e26a:	bd70      	pop	{r4, r5, r6, pc}
1000e26c:	1000f957 	.word	0x1000f957

1000e270 <gapm_profile_added_ind_handler>:
1000e270:	b510      	push	{r4, lr}
1000e272:	7843      	ldrb	r3, [r0, #1]
1000e274:	7902      	ldrb	r2, [r0, #4]
1000e276:	7944      	ldrb	r4, [r0, #5]
1000e278:	7800      	ldrb	r0, [r0, #0]
1000e27a:	021b      	lsls	r3, r3, #8
1000e27c:	4303      	orrs	r3, r0
1000e27e:	2b1b      	cmp	r3, #27
1000e280:	d104      	bne.n	1000e28c <gapm_profile_added_ind_handler+0x1c>
1000e282:	2300      	movs	r3, #0
1000e284:	700b      	strb	r3, [r1, #0]
1000e286:	0223      	lsls	r3, r4, #8
1000e288:	4313      	orrs	r3, r2
1000e28a:	804b      	strh	r3, [r1, #2]
1000e28c:	203b      	movs	r0, #59	; 0x3b
1000e28e:	bd10      	pop	{r4, pc}

1000e290 <gattc_read_req_ind_parser>:
1000e290:	7843      	ldrb	r3, [r0, #1]
1000e292:	7802      	ldrb	r2, [r0, #0]
1000e294:	021b      	lsls	r3, r3, #8
1000e296:	4313      	orrs	r3, r2
1000e298:	804b      	strh	r3, [r1, #2]
1000e29a:	4770      	bx	lr

1000e29c <gattc_write_req_ind_parser>:
1000e29c:	b508      	push	{r3, lr}
1000e29e:	1c13      	adds	r3, r2, #0
1000e2a0:	0a00      	lsrs	r0, r0, #8
1000e2a2:	8010      	strh	r0, [r2, #0]
1000e2a4:	784a      	ldrb	r2, [r1, #1]
1000e2a6:	7808      	ldrb	r0, [r1, #0]
1000e2a8:	0212      	lsls	r2, r2, #8
1000e2aa:	4302      	orrs	r2, r0
1000e2ac:	805a      	strh	r2, [r3, #2]
1000e2ae:	78ca      	ldrb	r2, [r1, #3]
1000e2b0:	7888      	ldrb	r0, [r1, #2]
1000e2b2:	0212      	lsls	r2, r2, #8
1000e2b4:	4302      	orrs	r2, r0
1000e2b6:	809a      	strh	r2, [r3, #4]
1000e2b8:	794a      	ldrb	r2, [r1, #5]
1000e2ba:	7908      	ldrb	r0, [r1, #4]
1000e2bc:	0212      	lsls	r2, r2, #8
1000e2be:	4302      	orrs	r2, r0
1000e2c0:	80da      	strh	r2, [r3, #6]
1000e2c2:	3308      	adds	r3, #8
1000e2c4:	1c18      	adds	r0, r3, #0
1000e2c6:	3106      	adds	r1, #6
1000e2c8:	4b01      	ldr	r3, [pc, #4]	; (1000e2d0 <gattc_write_req_ind_parser+0x34>)
1000e2ca:	4798      	blx	r3
1000e2cc:	bd08      	pop	{r3, pc}
1000e2ce:	46c0      	nop			; (mov r8, r8)
1000e2d0:	1000f957 	.word	0x1000f957

1000e2d4 <gattc_att_info_req_parser>:
1000e2d4:	7843      	ldrb	r3, [r0, #1]
1000e2d6:	7802      	ldrb	r2, [r0, #0]
1000e2d8:	021b      	lsls	r3, r3, #8
1000e2da:	4313      	orrs	r3, r2
1000e2dc:	800b      	strh	r3, [r1, #0]
1000e2de:	4770      	bx	lr

1000e2e0 <gattc_read_cfm>:
1000e2e0:	b538      	push	{r3, r4, r5, lr}
1000e2e2:	2514      	movs	r5, #20
1000e2e4:	1c1c      	adds	r4, r3, #0
1000e2e6:	4b14      	ldr	r3, [pc, #80]	; (1000e338 <gattc_read_cfm+0x58>)
1000e2e8:	70d9      	strb	r1, [r3, #3]
1000e2ea:	4914      	ldr	r1, [pc, #80]	; (1000e33c <gattc_read_cfm+0x5c>)
1000e2ec:	701d      	strb	r5, [r3, #0]
1000e2ee:	3d08      	subs	r5, #8
1000e2f0:	705d      	strb	r5, [r3, #1]
1000e2f2:	709d      	strb	r5, [r3, #2]
1000e2f4:	880d      	ldrh	r5, [r1, #0]
1000e2f6:	8809      	ldrh	r1, [r1, #0]
1000e2f8:	7218      	strb	r0, [r3, #8]
1000e2fa:	0a09      	lsrs	r1, r1, #8
1000e2fc:	7159      	strb	r1, [r3, #5]
1000e2fe:	0a00      	lsrs	r0, r0, #8
1000e300:	0a21      	lsrs	r1, r4, #8
1000e302:	711d      	strb	r5, [r3, #4]
1000e304:	7258      	strb	r0, [r3, #9]
1000e306:	729c      	strb	r4, [r3, #10]
1000e308:	72d9      	strb	r1, [r3, #11]
1000e30a:	731a      	strb	r2, [r3, #12]
1000e30c:	1c1d      	adds	r5, r3, #0
1000e30e:	2c00      	cmp	r4, #0
1000e310:	d007      	beq.n	1000e322 <gattc_read_cfm+0x42>
1000e312:	9904      	ldr	r1, [sp, #16]
1000e314:	1c22      	adds	r2, r4, #0
1000e316:	480a      	ldr	r0, [pc, #40]	; (1000e340 <gattc_read_cfm+0x60>)
1000e318:	4b0a      	ldr	r3, [pc, #40]	; (1000e344 <gattc_read_cfm+0x64>)
1000e31a:	340d      	adds	r4, #13
1000e31c:	4798      	blx	r3
1000e31e:	b2a1      	uxth	r1, r4
1000e320:	e001      	b.n	1000e326 <gattc_read_cfm+0x46>
1000e322:	210e      	movs	r1, #14
1000e324:	735c      	strb	r4, [r3, #13]
1000e326:	1c0b      	adds	r3, r1, #0
1000e328:	3b08      	subs	r3, #8
1000e32a:	71ab      	strb	r3, [r5, #6]
1000e32c:	121b      	asrs	r3, r3, #8
1000e32e:	71eb      	strb	r3, [r5, #7]
1000e330:	1c28      	adds	r0, r5, #0
1000e332:	4b05      	ldr	r3, [pc, #20]	; (1000e348 <gattc_read_cfm+0x68>)
1000e334:	4798      	blx	r3
1000e336:	bd38      	pop	{r3, r4, r5, pc}
1000e338:	10013650 	.word	0x10013650
1000e33c:	100132e0 	.word	0x100132e0
1000e340:	1001365d 	.word	0x1001365d
1000e344:	1000f957 	.word	0x1000f957
1000e348:	1000cfd5 	.word	0x1000cfd5

1000e34c <gattc_write_cfm>:
1000e34c:	4b0d      	ldr	r3, [pc, #52]	; (1000e384 <gattc_write_cfm+0x38>)
1000e34e:	b510      	push	{r4, lr}
1000e350:	729a      	strb	r2, [r3, #10]
1000e352:	2203      	movs	r2, #3
1000e354:	2416      	movs	r4, #22
1000e356:	719a      	strb	r2, [r3, #6]
1000e358:	2200      	movs	r2, #0
1000e35a:	70d9      	strb	r1, [r3, #3]
1000e35c:	490a      	ldr	r1, [pc, #40]	; (1000e388 <gattc_write_cfm+0x3c>)
1000e35e:	701c      	strb	r4, [r3, #0]
1000e360:	3c0a      	subs	r4, #10
1000e362:	705c      	strb	r4, [r3, #1]
1000e364:	709c      	strb	r4, [r3, #2]
1000e366:	880c      	ldrh	r4, [r1, #0]
1000e368:	8809      	ldrh	r1, [r1, #0]
1000e36a:	7218      	strb	r0, [r3, #8]
1000e36c:	0a09      	lsrs	r1, r1, #8
1000e36e:	0a00      	lsrs	r0, r0, #8
1000e370:	711c      	strb	r4, [r3, #4]
1000e372:	7159      	strb	r1, [r3, #5]
1000e374:	7258      	strb	r0, [r3, #9]
1000e376:	71da      	strb	r2, [r3, #7]
1000e378:	1c18      	adds	r0, r3, #0
1000e37a:	210b      	movs	r1, #11
1000e37c:	4b03      	ldr	r3, [pc, #12]	; (1000e38c <gattc_write_cfm+0x40>)
1000e37e:	4798      	blx	r3
1000e380:	bd10      	pop	{r4, pc}
1000e382:	46c0      	nop			; (mov r8, r8)
1000e384:	10013650 	.word	0x10013650
1000e388:	100132e0 	.word	0x100132e0
1000e38c:	1000cfd5 	.word	0x1000cfd5

1000e390 <gattc_att_info_cfm>:
1000e390:	b538      	push	{r3, r4, r5, lr}
1000e392:	4c0e      	ldr	r4, [pc, #56]	; (1000e3cc <gattc_att_info_cfm+0x3c>)
1000e394:	2518      	movs	r5, #24
1000e396:	7323      	strb	r3, [r4, #12]
1000e398:	2305      	movs	r3, #5
1000e39a:	71a3      	strb	r3, [r4, #6]
1000e39c:	2300      	movs	r3, #0
1000e39e:	70e1      	strb	r1, [r4, #3]
1000e3a0:	490b      	ldr	r1, [pc, #44]	; (1000e3d0 <gattc_att_info_cfm+0x40>)
1000e3a2:	7025      	strb	r5, [r4, #0]
1000e3a4:	3d0c      	subs	r5, #12
1000e3a6:	7065      	strb	r5, [r4, #1]
1000e3a8:	70a5      	strb	r5, [r4, #2]
1000e3aa:	880d      	ldrh	r5, [r1, #0]
1000e3ac:	8809      	ldrh	r1, [r1, #0]
1000e3ae:	7220      	strb	r0, [r4, #8]
1000e3b0:	0a09      	lsrs	r1, r1, #8
1000e3b2:	0a00      	lsrs	r0, r0, #8
1000e3b4:	7161      	strb	r1, [r4, #5]
1000e3b6:	7260      	strb	r0, [r4, #9]
1000e3b8:	72a2      	strb	r2, [r4, #10]
1000e3ba:	71e3      	strb	r3, [r4, #7]
1000e3bc:	0a12      	lsrs	r2, r2, #8
1000e3be:	1c20      	adds	r0, r4, #0
1000e3c0:	210d      	movs	r1, #13
1000e3c2:	4b04      	ldr	r3, [pc, #16]	; (1000e3d4 <gattc_att_info_cfm+0x44>)
1000e3c4:	7125      	strb	r5, [r4, #4]
1000e3c6:	72e2      	strb	r2, [r4, #11]
1000e3c8:	4798      	blx	r3
1000e3ca:	bd38      	pop	{r3, r4, r5, pc}
1000e3cc:	10013650 	.word	0x10013650
1000e3d0:	100132e0 	.word	0x100132e0
1000e3d4:	1000cfd5 	.word	0x1000cfd5

1000e3d8 <gattc_disc_cmd_handler>:
1000e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e3da:	2603      	movs	r6, #3
1000e3dc:	ac06      	add	r4, sp, #24
1000e3de:	1c0d      	adds	r5, r1, #0
1000e3e0:	cc02      	ldmia	r4!, {r1}
1000e3e2:	8827      	ldrh	r7, [r4, #0]
1000e3e4:	4c1a      	ldr	r4, [pc, #104]	; (1000e450 <gattc_disc_cmd_handler+0x78>)
1000e3e6:	7026      	strb	r6, [r4, #0]
1000e3e8:	3609      	adds	r6, #9
1000e3ea:	7066      	strb	r6, [r4, #1]
1000e3ec:	70a6      	strb	r6, [r4, #2]
1000e3ee:	4e19      	ldr	r6, [pc, #100]	; (1000e454 <gattc_disc_cmd_handler+0x7c>)
1000e3f0:	70e7      	strb	r7, [r4, #3]
1000e3f2:	8837      	ldrh	r7, [r6, #0]
1000e3f4:	8836      	ldrh	r6, [r6, #0]
1000e3f6:	7127      	strb	r7, [r4, #4]
1000e3f8:	0a36      	lsrs	r6, r6, #8
1000e3fa:	7166      	strb	r6, [r4, #5]
1000e3fc:	7220      	strb	r0, [r4, #8]
1000e3fe:	2900      	cmp	r1, #0
1000e400:	d102      	bne.n	1000e408 <gattc_disc_cmd_handler+0x30>
1000e402:	2002      	movs	r0, #2
1000e404:	7260      	strb	r0, [r4, #9]
1000e406:	e000      	b.n	1000e40a <gattc_disc_cmd_handler+0x32>
1000e408:	7265      	strb	r5, [r4, #9]
1000e40a:	4e13      	ldr	r6, [pc, #76]	; (1000e458 <gattc_disc_cmd_handler+0x80>)
1000e40c:	7322      	strb	r2, [r4, #12]
1000e40e:	8830      	ldrh	r0, [r6, #0]
1000e410:	0a12      	lsrs	r2, r2, #8
1000e412:	0a07      	lsrs	r7, r0, #8
1000e414:	72a0      	strb	r0, [r4, #10]
1000e416:	73a3      	strb	r3, [r4, #14]
1000e418:	3001      	adds	r0, #1
1000e41a:	0a1b      	lsrs	r3, r3, #8
1000e41c:	72e7      	strb	r7, [r4, #11]
1000e41e:	8030      	strh	r0, [r6, #0]
1000e420:	7362      	strb	r2, [r4, #13]
1000e422:	73e3      	strb	r3, [r4, #15]
1000e424:	2900      	cmp	r1, #0
1000e426:	d103      	bne.n	1000e430 <gattc_disc_cmd_handler+0x58>
1000e428:	7421      	strb	r1, [r4, #16]
1000e42a:	7461      	strb	r1, [r4, #17]
1000e42c:	3112      	adds	r1, #18
1000e42e:	e005      	b.n	1000e43c <gattc_disc_cmd_handler+0x64>
1000e430:	480a      	ldr	r0, [pc, #40]	; (1000e45c <gattc_disc_cmd_handler+0x84>)
1000e432:	1c2a      	adds	r2, r5, #0
1000e434:	4b0a      	ldr	r3, [pc, #40]	; (1000e460 <gattc_disc_cmd_handler+0x88>)
1000e436:	4798      	blx	r3
1000e438:	1c29      	adds	r1, r5, #0
1000e43a:	3110      	adds	r1, #16
1000e43c:	1c0b      	adds	r3, r1, #0
1000e43e:	3b08      	subs	r3, #8
1000e440:	71a3      	strb	r3, [r4, #6]
1000e442:	121b      	asrs	r3, r3, #8
1000e444:	71e3      	strb	r3, [r4, #7]
1000e446:	1c20      	adds	r0, r4, #0
1000e448:	4b06      	ldr	r3, [pc, #24]	; (1000e464 <gattc_disc_cmd_handler+0x8c>)
1000e44a:	4798      	blx	r3
1000e44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e44e:	46c0      	nop			; (mov r8, r8)
1000e450:	10013650 	.word	0x10013650
1000e454:	100132e0 	.word	0x100132e0
1000e458:	1001267a 	.word	0x1001267a
1000e45c:	10013660 	.word	0x10013660
1000e460:	1000f957 	.word	0x1000f957
1000e464:	1000cfd5 	.word	0x1000cfd5

1000e468 <gattc_event_cfm_handler>:
1000e468:	220e      	movs	r2, #14
1000e46a:	b508      	push	{r3, lr}
1000e46c:	4b0b      	ldr	r3, [pc, #44]	; (1000e49c <gattc_event_cfm_handler+0x34>)
1000e46e:	701a      	strb	r2, [r3, #0]
1000e470:	3a02      	subs	r2, #2
1000e472:	705a      	strb	r2, [r3, #1]
1000e474:	709a      	strb	r2, [r3, #2]
1000e476:	4a0a      	ldr	r2, [pc, #40]	; (1000e4a0 <gattc_event_cfm_handler+0x38>)
1000e478:	70d8      	strb	r0, [r3, #3]
1000e47a:	8810      	ldrh	r0, [r2, #0]
1000e47c:	8812      	ldrh	r2, [r2, #0]
1000e47e:	7219      	strb	r1, [r3, #8]
1000e480:	0a12      	lsrs	r2, r2, #8
1000e482:	715a      	strb	r2, [r3, #5]
1000e484:	2202      	movs	r2, #2
1000e486:	719a      	strb	r2, [r3, #6]
1000e488:	2200      	movs	r2, #0
1000e48a:	0a09      	lsrs	r1, r1, #8
1000e48c:	7118      	strb	r0, [r3, #4]
1000e48e:	7259      	strb	r1, [r3, #9]
1000e490:	71da      	strb	r2, [r3, #7]
1000e492:	1c18      	adds	r0, r3, #0
1000e494:	210a      	movs	r1, #10
1000e496:	4b03      	ldr	r3, [pc, #12]	; (1000e4a4 <gattc_event_cfm_handler+0x3c>)
1000e498:	4798      	blx	r3
1000e49a:	bd08      	pop	{r3, pc}
1000e49c:	10013650 	.word	0x10013650
1000e4a0:	100132e0 	.word	0x100132e0
1000e4a4:	1000cfd5 	.word	0x1000cfd5

1000e4a8 <gattc_disc_svc_ind_parser>:
1000e4a8:	b570      	push	{r4, r5, r6, lr}
1000e4aa:	1c15      	adds	r5, r2, #0
1000e4ac:	0a00      	lsrs	r0, r0, #8
1000e4ae:	8010      	strh	r0, [r2, #0]
1000e4b0:	784b      	ldrb	r3, [r1, #1]
1000e4b2:	780a      	ldrb	r2, [r1, #0]
1000e4b4:	021b      	lsls	r3, r3, #8
1000e4b6:	4313      	orrs	r3, r2
1000e4b8:	806b      	strh	r3, [r5, #2]
1000e4ba:	78cb      	ldrb	r3, [r1, #3]
1000e4bc:	788a      	ldrb	r2, [r1, #2]
1000e4be:	021b      	lsls	r3, r3, #8
1000e4c0:	4313      	orrs	r3, r2
1000e4c2:	80ab      	strh	r3, [r5, #4]
1000e4c4:	790e      	ldrb	r6, [r1, #4]
1000e4c6:	4b05      	ldr	r3, [pc, #20]	; (1000e4dc <gattc_disc_svc_ind_parser+0x34>)
1000e4c8:	1c30      	adds	r0, r6, #0
1000e4ca:	1c0c      	adds	r4, r1, #0
1000e4cc:	4798      	blx	r3
1000e4ce:	1c32      	adds	r2, r6, #0
1000e4d0:	71a8      	strb	r0, [r5, #6]
1000e4d2:	1d61      	adds	r1, r4, #5
1000e4d4:	1de8      	adds	r0, r5, #7
1000e4d6:	4b02      	ldr	r3, [pc, #8]	; (1000e4e0 <gattc_disc_svc_ind_parser+0x38>)
1000e4d8:	4798      	blx	r3
1000e4da:	bd70      	pop	{r4, r5, r6, pc}
1000e4dc:	1000c9bd 	.word	0x1000c9bd
1000e4e0:	1000f957 	.word	0x1000f957

1000e4e4 <gattc_disc_svc_incl_ind_parser>:
1000e4e4:	b570      	push	{r4, r5, r6, lr}
1000e4e6:	1c15      	adds	r5, r2, #0
1000e4e8:	0a00      	lsrs	r0, r0, #8
1000e4ea:	8010      	strh	r0, [r2, #0]
1000e4ec:	784b      	ldrb	r3, [r1, #1]
1000e4ee:	780a      	ldrb	r2, [r1, #0]
1000e4f0:	021b      	lsls	r3, r3, #8
1000e4f2:	4313      	orrs	r3, r2
1000e4f4:	806b      	strh	r3, [r5, #2]
1000e4f6:	78cb      	ldrb	r3, [r1, #3]
1000e4f8:	788a      	ldrb	r2, [r1, #2]
1000e4fa:	021b      	lsls	r3, r3, #8
1000e4fc:	4313      	orrs	r3, r2
1000e4fe:	80ab      	strh	r3, [r5, #4]
1000e500:	794b      	ldrb	r3, [r1, #5]
1000e502:	790a      	ldrb	r2, [r1, #4]
1000e504:	021b      	lsls	r3, r3, #8
1000e506:	4313      	orrs	r3, r2
1000e508:	80eb      	strh	r3, [r5, #6]
1000e50a:	798e      	ldrb	r6, [r1, #6]
1000e50c:	4b05      	ldr	r3, [pc, #20]	; (1000e524 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e50e:	1c30      	adds	r0, r6, #0
1000e510:	1c0c      	adds	r4, r1, #0
1000e512:	4798      	blx	r3
1000e514:	7228      	strb	r0, [r5, #8]
1000e516:	1c28      	adds	r0, r5, #0
1000e518:	1c32      	adds	r2, r6, #0
1000e51a:	1de1      	adds	r1, r4, #7
1000e51c:	4b02      	ldr	r3, [pc, #8]	; (1000e528 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e51e:	3009      	adds	r0, #9
1000e520:	4798      	blx	r3
1000e522:	bd70      	pop	{r4, r5, r6, pc}
1000e524:	1000c9bd 	.word	0x1000c9bd
1000e528:	1000f957 	.word	0x1000f957

1000e52c <gattc_disc_char_ind_parser>:
1000e52c:	b570      	push	{r4, r5, r6, lr}
1000e52e:	1c15      	adds	r5, r2, #0
1000e530:	0a00      	lsrs	r0, r0, #8
1000e532:	8010      	strh	r0, [r2, #0]
1000e534:	784b      	ldrb	r3, [r1, #1]
1000e536:	780a      	ldrb	r2, [r1, #0]
1000e538:	021b      	lsls	r3, r3, #8
1000e53a:	4313      	orrs	r3, r2
1000e53c:	806b      	strh	r3, [r5, #2]
1000e53e:	78cb      	ldrb	r3, [r1, #3]
1000e540:	788a      	ldrb	r2, [r1, #2]
1000e542:	021b      	lsls	r3, r3, #8
1000e544:	4313      	orrs	r3, r2
1000e546:	80ab      	strh	r3, [r5, #4]
1000e548:	790b      	ldrb	r3, [r1, #4]
1000e54a:	1c0c      	adds	r4, r1, #0
1000e54c:	71ab      	strb	r3, [r5, #6]
1000e54e:	794e      	ldrb	r6, [r1, #5]
1000e550:	4b05      	ldr	r3, [pc, #20]	; (1000e568 <gattc_disc_char_ind_parser+0x3c>)
1000e552:	1c30      	adds	r0, r6, #0
1000e554:	4798      	blx	r3
1000e556:	71e8      	strb	r0, [r5, #7]
1000e558:	1c28      	adds	r0, r5, #0
1000e55a:	1c32      	adds	r2, r6, #0
1000e55c:	1da1      	adds	r1, r4, #6
1000e55e:	4b03      	ldr	r3, [pc, #12]	; (1000e56c <gattc_disc_char_ind_parser+0x40>)
1000e560:	3008      	adds	r0, #8
1000e562:	4798      	blx	r3
1000e564:	bd70      	pop	{r4, r5, r6, pc}
1000e566:	46c0      	nop			; (mov r8, r8)
1000e568:	1000c9bd 	.word	0x1000c9bd
1000e56c:	1000f957 	.word	0x1000f957

1000e570 <gattc_disc_char_desc_ind_parser>:
1000e570:	b570      	push	{r4, r5, r6, lr}
1000e572:	1c15      	adds	r5, r2, #0
1000e574:	0a00      	lsrs	r0, r0, #8
1000e576:	8010      	strh	r0, [r2, #0]
1000e578:	784b      	ldrb	r3, [r1, #1]
1000e57a:	780a      	ldrb	r2, [r1, #0]
1000e57c:	021b      	lsls	r3, r3, #8
1000e57e:	4313      	orrs	r3, r2
1000e580:	806b      	strh	r3, [r5, #2]
1000e582:	788e      	ldrb	r6, [r1, #2]
1000e584:	4b05      	ldr	r3, [pc, #20]	; (1000e59c <gattc_disc_char_desc_ind_parser+0x2c>)
1000e586:	1c30      	adds	r0, r6, #0
1000e588:	1c0c      	adds	r4, r1, #0
1000e58a:	4798      	blx	r3
1000e58c:	1c32      	adds	r2, r6, #0
1000e58e:	7128      	strb	r0, [r5, #4]
1000e590:	1ce1      	adds	r1, r4, #3
1000e592:	1d68      	adds	r0, r5, #5
1000e594:	4b02      	ldr	r3, [pc, #8]	; (1000e5a0 <gattc_disc_char_desc_ind_parser+0x30>)
1000e596:	4798      	blx	r3
1000e598:	bd70      	pop	{r4, r5, r6, pc}
1000e59a:	46c0      	nop			; (mov r8, r8)
1000e59c:	1000c9bd 	.word	0x1000c9bd
1000e5a0:	1000f957 	.word	0x1000f957

1000e5a4 <gattc_event_ind_and_notification_parser>:
1000e5a4:	b510      	push	{r4, lr}
1000e5a6:	780c      	ldrb	r4, [r1, #0]
1000e5a8:	1c13      	adds	r3, r2, #0
1000e5aa:	2c12      	cmp	r4, #18
1000e5ac:	d10e      	bne.n	1000e5cc <gattc_event_ind_and_notification_parser+0x28>
1000e5ae:	0a00      	lsrs	r0, r0, #8
1000e5b0:	8010      	strh	r0, [r2, #0]
1000e5b2:	788a      	ldrb	r2, [r1, #2]
1000e5b4:	709a      	strb	r2, [r3, #2]
1000e5b6:	7948      	ldrb	r0, [r1, #5]
1000e5b8:	790c      	ldrb	r4, [r1, #4]
1000e5ba:	0200      	lsls	r0, r0, #8
1000e5bc:	4320      	orrs	r0, r4
1000e5be:	8098      	strh	r0, [r3, #4]
1000e5c0:	3106      	adds	r1, #6
1000e5c2:	1d98      	adds	r0, r3, #6
1000e5c4:	4b0b      	ldr	r3, [pc, #44]	; (1000e5f4 <gattc_event_ind_and_notification_parser+0x50>)
1000e5c6:	4798      	blx	r3
1000e5c8:	221b      	movs	r2, #27
1000e5ca:	e010      	b.n	1000e5ee <gattc_event_ind_and_notification_parser+0x4a>
1000e5cc:	2200      	movs	r2, #0
1000e5ce:	2c13      	cmp	r4, #19
1000e5d0:	d10d      	bne.n	1000e5ee <gattc_event_ind_and_notification_parser+0x4a>
1000e5d2:	0a00      	lsrs	r0, r0, #8
1000e5d4:	8018      	strh	r0, [r3, #0]
1000e5d6:	788a      	ldrb	r2, [r1, #2]
1000e5d8:	709a      	strb	r2, [r3, #2]
1000e5da:	7908      	ldrb	r0, [r1, #4]
1000e5dc:	78cc      	ldrb	r4, [r1, #3]
1000e5de:	0200      	lsls	r0, r0, #8
1000e5e0:	4320      	orrs	r0, r4
1000e5e2:	8098      	strh	r0, [r3, #4]
1000e5e4:	3106      	adds	r1, #6
1000e5e6:	1d98      	adds	r0, r3, #6
1000e5e8:	4b02      	ldr	r3, [pc, #8]	; (1000e5f4 <gattc_event_ind_and_notification_parser+0x50>)
1000e5ea:	4798      	blx	r3
1000e5ec:	221c      	movs	r2, #28
1000e5ee:	1c10      	adds	r0, r2, #0
1000e5f0:	bd10      	pop	{r4, pc}
1000e5f2:	46c0      	nop			; (mov r8, r8)
1000e5f4:	1000f957 	.word	0x1000f957

1000e5f8 <gattc_complete_evt_handler>:
1000e5f8:	b500      	push	{lr}
1000e5fa:	0a00      	lsrs	r0, r0, #8
1000e5fc:	8010      	strh	r0, [r2, #0]
1000e5fe:	7808      	ldrb	r0, [r1, #0]
1000e600:	7090      	strb	r0, [r2, #2]
1000e602:	784b      	ldrb	r3, [r1, #1]
1000e604:	3801      	subs	r0, #1
1000e606:	70d3      	strb	r3, [r2, #3]
1000e608:	2813      	cmp	r0, #19
1000e60a:	d82c      	bhi.n	1000e666 <gattc_complete_evt_handler+0x6e>
1000e60c:	f000 f914 	bl	1000e838 <__gnu_thumb1_case_uqi>
1000e610:	0a0a0a0c 	.word	0x0a0a0a0c
1000e614:	210a0a0a 	.word	0x210a0a0a
1000e618:	111f2121 	.word	0x111f2121
1000e61c:	2b111111 	.word	0x2b111111
1000e620:	2919132b 	.word	0x2919132b
1000e624:	2017      	movs	r0, #23
1000e626:	e01f      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e628:	2024      	movs	r0, #36	; 0x24
1000e62a:	2b00      	cmp	r3, #0
1000e62c:	d11c      	bne.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e62e:	3017      	adds	r0, #23
1000e630:	e01a      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e632:	2025      	movs	r0, #37	; 0x25
1000e634:	e018      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e636:	4a0d      	ldr	r2, [pc, #52]	; (1000e66c <gattc_complete_evt_handler+0x74>)
1000e638:	201d      	movs	r0, #29
1000e63a:	6813      	ldr	r3, [r2, #0]
1000e63c:	3b01      	subs	r3, #1
1000e63e:	6013      	str	r3, [r2, #0]
1000e640:	e012      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e642:	4a0a      	ldr	r2, [pc, #40]	; (1000e66c <gattc_complete_evt_handler+0x74>)
1000e644:	201e      	movs	r0, #30
1000e646:	6813      	ldr	r3, [r2, #0]
1000e648:	3b01      	subs	r3, #1
1000e64a:	6013      	str	r3, [r2, #0]
1000e64c:	e00c      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e64e:	2019      	movs	r0, #25
1000e650:	e00a      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e652:	203b      	movs	r0, #59	; 0x3b
1000e654:	2b00      	cmp	r3, #0
1000e656:	d007      	beq.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e658:	2182      	movs	r1, #130	; 0x82
1000e65a:	0089      	lsls	r1, r1, #2
1000e65c:	5453      	strb	r3, [r2, r1]
1000e65e:	3823      	subs	r0, #35	; 0x23
1000e660:	e002      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e662:	2021      	movs	r0, #33	; 0x21
1000e664:	e000      	b.n	1000e668 <gattc_complete_evt_handler+0x70>
1000e666:	2000      	movs	r0, #0
1000e668:	bd00      	pop	{pc}
1000e66a:	46c0      	nop			; (mov r8, r8)
1000e66c:	10012680 	.word	0x10012680

1000e670 <gattc_event_mtu_changed_ind_parser>:
1000e670:	0a00      	lsrs	r0, r0, #8
1000e672:	8010      	strh	r0, [r2, #0]
1000e674:	784b      	ldrb	r3, [r1, #1]
1000e676:	7809      	ldrb	r1, [r1, #0]
1000e678:	021b      	lsls	r3, r3, #8
1000e67a:	430b      	orrs	r3, r1
1000e67c:	8053      	strh	r3, [r2, #2]
1000e67e:	4770      	bx	lr

1000e680 <gattc_read_ind_parser>:
1000e680:	0a00      	lsrs	r0, r0, #8
1000e682:	b508      	push	{r3, lr}
1000e684:	8010      	strh	r0, [r2, #0]
1000e686:	1c13      	adds	r3, r2, #0
1000e688:	2282      	movs	r2, #130	; 0x82
1000e68a:	2000      	movs	r0, #0
1000e68c:	0092      	lsls	r2, r2, #2
1000e68e:	5498      	strb	r0, [r3, r2]
1000e690:	784a      	ldrb	r2, [r1, #1]
1000e692:	7808      	ldrb	r0, [r1, #0]
1000e694:	0212      	lsls	r2, r2, #8
1000e696:	4302      	orrs	r2, r0
1000e698:	805a      	strh	r2, [r3, #2]
1000e69a:	78ca      	ldrb	r2, [r1, #3]
1000e69c:	7888      	ldrb	r0, [r1, #2]
1000e69e:	0212      	lsls	r2, r2, #8
1000e6a0:	4302      	orrs	r2, r0
1000e6a2:	80da      	strh	r2, [r3, #6]
1000e6a4:	794a      	ldrb	r2, [r1, #5]
1000e6a6:	7908      	ldrb	r0, [r1, #4]
1000e6a8:	0212      	lsls	r2, r2, #8
1000e6aa:	4302      	orrs	r2, r0
1000e6ac:	809a      	strh	r2, [r3, #4]
1000e6ae:	3308      	adds	r3, #8
1000e6b0:	1c18      	adds	r0, r3, #0
1000e6b2:	3106      	adds	r1, #6
1000e6b4:	4b01      	ldr	r3, [pc, #4]	; (1000e6bc <gattc_read_ind_parser+0x3c>)
1000e6b6:	4798      	blx	r3
1000e6b8:	bd08      	pop	{r3, pc}
1000e6ba:	46c0      	nop			; (mov r8, r8)
1000e6bc:	1000f957 	.word	0x1000f957

1000e6c0 <gattc_svc_changed_cfg_ind_parser>:
1000e6c0:	0a00      	lsrs	r0, r0, #8
1000e6c2:	8010      	strh	r0, [r2, #0]
1000e6c4:	784b      	ldrb	r3, [r1, #1]
1000e6c6:	7809      	ldrb	r1, [r1, #0]
1000e6c8:	021b      	lsls	r3, r3, #8
1000e6ca:	430b      	orrs	r3, r1
1000e6cc:	8053      	strh	r3, [r2, #2]
1000e6ce:	4770      	bx	lr

1000e6d0 <init_gattc_task_module>:
1000e6d0:	2300      	movs	r3, #0
1000e6d2:	4a02      	ldr	r2, [pc, #8]	; (1000e6dc <init_gattc_task_module+0xc>)
1000e6d4:	8013      	strh	r3, [r2, #0]
1000e6d6:	4a02      	ldr	r2, [pc, #8]	; (1000e6e0 <init_gattc_task_module+0x10>)
1000e6d8:	8013      	strh	r3, [r2, #0]
1000e6da:	4770      	bx	lr
1000e6dc:	1001267a 	.word	0x1001267a
1000e6e0:	1001267c 	.word	0x1001267c

1000e6e4 <gattm_att_set_value_req_handler>:
1000e6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e6e6:	466b      	mov	r3, sp
1000e6e8:	1dde      	adds	r6, r3, #7
1000e6ea:	2300      	movs	r3, #0
1000e6ec:	1c0d      	adds	r5, r1, #0
1000e6ee:	210c      	movs	r1, #12
1000e6f0:	270b      	movs	r7, #11
1000e6f2:	4c17      	ldr	r4, [pc, #92]	; (1000e750 <gattm_att_set_value_req_handler+0x6c>)
1000e6f4:	7033      	strb	r3, [r6, #0]
1000e6f6:	70e3      	strb	r3, [r4, #3]
1000e6f8:	4b16      	ldr	r3, [pc, #88]	; (1000e754 <gattm_att_set_value_req_handler+0x70>)
1000e6fa:	7021      	strb	r1, [r4, #0]
1000e6fc:	8819      	ldrh	r1, [r3, #0]
1000e6fe:	881b      	ldrh	r3, [r3, #0]
1000e700:	7220      	strb	r0, [r4, #8]
1000e702:	0a1b      	lsrs	r3, r3, #8
1000e704:	7163      	strb	r3, [r4, #5]
1000e706:	0a00      	lsrs	r0, r0, #8
1000e708:	0a2b      	lsrs	r3, r5, #8
1000e70a:	7121      	strb	r1, [r4, #4]
1000e70c:	7260      	strb	r0, [r4, #9]
1000e70e:	1c11      	adds	r1, r2, #0
1000e710:	72a5      	strb	r5, [r4, #10]
1000e712:	1c2a      	adds	r2, r5, #0
1000e714:	72e3      	strb	r3, [r4, #11]
1000e716:	350c      	adds	r5, #12
1000e718:	4b0f      	ldr	r3, [pc, #60]	; (1000e758 <gattm_att_set_value_req_handler+0x74>)
1000e71a:	4810      	ldr	r0, [pc, #64]	; (1000e75c <gattm_att_set_value_req_handler+0x78>)
1000e71c:	7067      	strb	r7, [r4, #1]
1000e71e:	70a7      	strb	r7, [r4, #2]
1000e720:	4798      	blx	r3
1000e722:	b2a9      	uxth	r1, r5
1000e724:	4b0e      	ldr	r3, [pc, #56]	; (1000e760 <gattm_att_set_value_req_handler+0x7c>)
1000e726:	4d0f      	ldr	r5, [pc, #60]	; (1000e764 <gattm_att_set_value_req_handler+0x80>)
1000e728:	1c20      	adds	r0, r4, #0
1000e72a:	802b      	strh	r3, [r5, #0]
1000e72c:	1c0b      	adds	r3, r1, #0
1000e72e:	3b08      	subs	r3, #8
1000e730:	71a3      	strb	r3, [r4, #6]
1000e732:	121b      	asrs	r3, r3, #8
1000e734:	71e3      	strb	r3, [r4, #7]
1000e736:	4b0c      	ldr	r3, [pc, #48]	; (1000e768 <gattm_att_set_value_req_handler+0x84>)
1000e738:	80af      	strh	r7, [r5, #4]
1000e73a:	4798      	blx	r3
1000e73c:	1c30      	adds	r0, r6, #0
1000e73e:	4b0b      	ldr	r3, [pc, #44]	; (1000e76c <gattm_att_set_value_req_handler+0x88>)
1000e740:	4798      	blx	r3
1000e742:	7833      	ldrb	r3, [r6, #0]
1000e744:	20e2      	movs	r0, #226	; 0xe2
1000e746:	2b00      	cmp	r3, #0
1000e748:	d101      	bne.n	1000e74e <gattm_att_set_value_req_handler+0x6a>
1000e74a:	68ab      	ldr	r3, [r5, #8]
1000e74c:	7898      	ldrb	r0, [r3, #2]
1000e74e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e750:	10013650 	.word	0x10013650
1000e754:	100132e0 	.word	0x100132e0
1000e758:	1000f957 	.word	0x1000f957
1000e75c:	1001365c 	.word	0x1001365c
1000e760:	00000b0d 	.word	0x00000b0d
1000e764:	100132d4 	.word	0x100132d4
1000e768:	1000cfd5 	.word	0x1000cfd5
1000e76c:	1000d031 	.word	0x1000d031

1000e770 <gattm_att_get_value_req_handler>:
1000e770:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e772:	b085      	sub	sp, #20
1000e774:	9201      	str	r2, [sp, #4]
1000e776:	220a      	movs	r2, #10
1000e778:	1c04      	adds	r4, r0, #0
1000e77a:	481d      	ldr	r0, [pc, #116]	; (1000e7f0 <gattm_att_get_value_req_handler+0x80>)
1000e77c:	ab02      	add	r3, sp, #8
1000e77e:	1dde      	adds	r6, r3, #7
1000e780:	7002      	strb	r2, [r0, #0]
1000e782:	2300      	movs	r3, #0
1000e784:	220b      	movs	r2, #11
1000e786:	4d1b      	ldr	r5, [pc, #108]	; (1000e7f4 <gattm_att_get_value_req_handler+0x84>)
1000e788:	1c0f      	adds	r7, r1, #0
1000e78a:	8829      	ldrh	r1, [r5, #0]
1000e78c:	882d      	ldrh	r5, [r5, #0]
1000e78e:	7101      	strb	r1, [r0, #4]
1000e790:	0a2d      	lsrs	r5, r5, #8
1000e792:	7145      	strb	r5, [r0, #5]
1000e794:	0a25      	lsrs	r5, r4, #8
1000e796:	7245      	strb	r5, [r0, #9]
1000e798:	4917      	ldr	r1, [pc, #92]	; (1000e7f8 <gattm_att_get_value_req_handler+0x88>)
1000e79a:	4d18      	ldr	r5, [pc, #96]	; (1000e7fc <gattm_att_get_value_req_handler+0x8c>)
1000e79c:	7033      	strb	r3, [r6, #0]
1000e79e:	7042      	strb	r2, [r0, #1]
1000e7a0:	7082      	strb	r2, [r0, #2]
1000e7a2:	70c3      	strb	r3, [r0, #3]
1000e7a4:	8029      	strh	r1, [r5, #0]
1000e7a6:	80aa      	strh	r2, [r5, #4]
1000e7a8:	71c3      	strb	r3, [r0, #7]
1000e7aa:	3a09      	subs	r2, #9
1000e7ac:	210a      	movs	r1, #10
1000e7ae:	4b14      	ldr	r3, [pc, #80]	; (1000e800 <gattm_att_get_value_req_handler+0x90>)
1000e7b0:	7182      	strb	r2, [r0, #6]
1000e7b2:	7204      	strb	r4, [r0, #8]
1000e7b4:	4798      	blx	r3
1000e7b6:	1c30      	adds	r0, r6, #0
1000e7b8:	4b12      	ldr	r3, [pc, #72]	; (1000e804 <gattm_att_get_value_req_handler+0x94>)
1000e7ba:	4798      	blx	r3
1000e7bc:	7833      	ldrb	r3, [r6, #0]
1000e7be:	20e2      	movs	r0, #226	; 0xe2
1000e7c0:	2b00      	cmp	r3, #0
1000e7c2:	d112      	bne.n	1000e7ea <gattm_att_get_value_req_handler+0x7a>
1000e7c4:	68a9      	ldr	r1, [r5, #8]
1000e7c6:	9801      	ldr	r0, [sp, #4]
1000e7c8:	784d      	ldrb	r5, [r1, #1]
1000e7ca:	780b      	ldrb	r3, [r1, #0]
1000e7cc:	78ca      	ldrb	r2, [r1, #3]
1000e7ce:	022d      	lsls	r5, r5, #8
1000e7d0:	431d      	orrs	r5, r3
1000e7d2:	788b      	ldrb	r3, [r1, #2]
1000e7d4:	0212      	lsls	r2, r2, #8
1000e7d6:	431a      	orrs	r2, r3
1000e7d8:	803a      	strh	r2, [r7, #0]
1000e7da:	790e      	ldrb	r6, [r1, #4]
1000e7dc:	4b0a      	ldr	r3, [pc, #40]	; (1000e808 <gattm_att_get_value_req_handler+0x98>)
1000e7de:	3105      	adds	r1, #5
1000e7e0:	4798      	blx	r3
1000e7e2:	20e2      	movs	r0, #226	; 0xe2
1000e7e4:	42ac      	cmp	r4, r5
1000e7e6:	d100      	bne.n	1000e7ea <gattm_att_get_value_req_handler+0x7a>
1000e7e8:	1c30      	adds	r0, r6, #0
1000e7ea:	b005      	add	sp, #20
1000e7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7ee:	46c0      	nop			; (mov r8, r8)
1000e7f0:	10013650 	.word	0x10013650
1000e7f4:	100132e0 	.word	0x100132e0
1000e7f8:	00000b0b 	.word	0x00000b0b
1000e7fc:	100132d4 	.word	0x100132d4
1000e800:	1000cfd5 	.word	0x1000cfd5
1000e804:	1000d031 	.word	0x1000d031
1000e808:	1000f957 	.word	0x1000f957

1000e80c <htpt_enable_rsp_handler>:
1000e80c:	780b      	ldrb	r3, [r1, #0]
1000e80e:	7013      	strb	r3, [r2, #0]
1000e810:	784b      	ldrb	r3, [r1, #1]
1000e812:	7053      	strb	r3, [r2, #1]
1000e814:	4770      	bx	lr

1000e816 <htpt_temp_send_rsp_handler>:
1000e816:	780b      	ldrb	r3, [r1, #0]
1000e818:	7013      	strb	r3, [r2, #0]
1000e81a:	4770      	bx	lr

1000e81c <htpt_meas_intv_upd_rsp_handler>:
1000e81c:	780b      	ldrb	r3, [r1, #0]
1000e81e:	7013      	strb	r3, [r2, #0]
1000e820:	4770      	bx	lr

1000e822 <htpt_meas_intv_chg_req_ind_handler>:
1000e822:	78cb      	ldrb	r3, [r1, #3]
1000e824:	7889      	ldrb	r1, [r1, #2]
1000e826:	021b      	lsls	r3, r3, #8
1000e828:	430b      	orrs	r3, r1
1000e82a:	8013      	strh	r3, [r2, #0]
1000e82c:	4770      	bx	lr

1000e82e <htpt_cfg_indntf_ind_handler>:
1000e82e:	780b      	ldrb	r3, [r1, #0]
1000e830:	7013      	strb	r3, [r2, #0]
1000e832:	784b      	ldrb	r3, [r1, #1]
1000e834:	7053      	strb	r3, [r2, #1]
1000e836:	4770      	bx	lr

1000e838 <__gnu_thumb1_case_uqi>:
1000e838:	b402      	push	{r1}
1000e83a:	4671      	mov	r1, lr
1000e83c:	0849      	lsrs	r1, r1, #1
1000e83e:	0049      	lsls	r1, r1, #1
1000e840:	5c09      	ldrb	r1, [r1, r0]
1000e842:	0049      	lsls	r1, r1, #1
1000e844:	448e      	add	lr, r1
1000e846:	bc02      	pop	{r1}
1000e848:	4770      	bx	lr
1000e84a:	46c0      	nop			; (mov r8, r8)

1000e84c <__aeabi_uidiv>:
1000e84c:	2200      	movs	r2, #0
1000e84e:	0843      	lsrs	r3, r0, #1
1000e850:	428b      	cmp	r3, r1
1000e852:	d374      	bcc.n	1000e93e <__aeabi_uidiv+0xf2>
1000e854:	0903      	lsrs	r3, r0, #4
1000e856:	428b      	cmp	r3, r1
1000e858:	d35f      	bcc.n	1000e91a <__aeabi_uidiv+0xce>
1000e85a:	0a03      	lsrs	r3, r0, #8
1000e85c:	428b      	cmp	r3, r1
1000e85e:	d344      	bcc.n	1000e8ea <__aeabi_uidiv+0x9e>
1000e860:	0b03      	lsrs	r3, r0, #12
1000e862:	428b      	cmp	r3, r1
1000e864:	d328      	bcc.n	1000e8b8 <__aeabi_uidiv+0x6c>
1000e866:	0c03      	lsrs	r3, r0, #16
1000e868:	428b      	cmp	r3, r1
1000e86a:	d30d      	bcc.n	1000e888 <__aeabi_uidiv+0x3c>
1000e86c:	22ff      	movs	r2, #255	; 0xff
1000e86e:	0209      	lsls	r1, r1, #8
1000e870:	ba12      	rev	r2, r2
1000e872:	0c03      	lsrs	r3, r0, #16
1000e874:	428b      	cmp	r3, r1
1000e876:	d302      	bcc.n	1000e87e <__aeabi_uidiv+0x32>
1000e878:	1212      	asrs	r2, r2, #8
1000e87a:	0209      	lsls	r1, r1, #8
1000e87c:	d065      	beq.n	1000e94a <__aeabi_uidiv+0xfe>
1000e87e:	0b03      	lsrs	r3, r0, #12
1000e880:	428b      	cmp	r3, r1
1000e882:	d319      	bcc.n	1000e8b8 <__aeabi_uidiv+0x6c>
1000e884:	e000      	b.n	1000e888 <__aeabi_uidiv+0x3c>
1000e886:	0a09      	lsrs	r1, r1, #8
1000e888:	0bc3      	lsrs	r3, r0, #15
1000e88a:	428b      	cmp	r3, r1
1000e88c:	d301      	bcc.n	1000e892 <__aeabi_uidiv+0x46>
1000e88e:	03cb      	lsls	r3, r1, #15
1000e890:	1ac0      	subs	r0, r0, r3
1000e892:	4152      	adcs	r2, r2
1000e894:	0b83      	lsrs	r3, r0, #14
1000e896:	428b      	cmp	r3, r1
1000e898:	d301      	bcc.n	1000e89e <__aeabi_uidiv+0x52>
1000e89a:	038b      	lsls	r3, r1, #14
1000e89c:	1ac0      	subs	r0, r0, r3
1000e89e:	4152      	adcs	r2, r2
1000e8a0:	0b43      	lsrs	r3, r0, #13
1000e8a2:	428b      	cmp	r3, r1
1000e8a4:	d301      	bcc.n	1000e8aa <__aeabi_uidiv+0x5e>
1000e8a6:	034b      	lsls	r3, r1, #13
1000e8a8:	1ac0      	subs	r0, r0, r3
1000e8aa:	4152      	adcs	r2, r2
1000e8ac:	0b03      	lsrs	r3, r0, #12
1000e8ae:	428b      	cmp	r3, r1
1000e8b0:	d301      	bcc.n	1000e8b6 <__aeabi_uidiv+0x6a>
1000e8b2:	030b      	lsls	r3, r1, #12
1000e8b4:	1ac0      	subs	r0, r0, r3
1000e8b6:	4152      	adcs	r2, r2
1000e8b8:	0ac3      	lsrs	r3, r0, #11
1000e8ba:	428b      	cmp	r3, r1
1000e8bc:	d301      	bcc.n	1000e8c2 <__aeabi_uidiv+0x76>
1000e8be:	02cb      	lsls	r3, r1, #11
1000e8c0:	1ac0      	subs	r0, r0, r3
1000e8c2:	4152      	adcs	r2, r2
1000e8c4:	0a83      	lsrs	r3, r0, #10
1000e8c6:	428b      	cmp	r3, r1
1000e8c8:	d301      	bcc.n	1000e8ce <__aeabi_uidiv+0x82>
1000e8ca:	028b      	lsls	r3, r1, #10
1000e8cc:	1ac0      	subs	r0, r0, r3
1000e8ce:	4152      	adcs	r2, r2
1000e8d0:	0a43      	lsrs	r3, r0, #9
1000e8d2:	428b      	cmp	r3, r1
1000e8d4:	d301      	bcc.n	1000e8da <__aeabi_uidiv+0x8e>
1000e8d6:	024b      	lsls	r3, r1, #9
1000e8d8:	1ac0      	subs	r0, r0, r3
1000e8da:	4152      	adcs	r2, r2
1000e8dc:	0a03      	lsrs	r3, r0, #8
1000e8de:	428b      	cmp	r3, r1
1000e8e0:	d301      	bcc.n	1000e8e6 <__aeabi_uidiv+0x9a>
1000e8e2:	020b      	lsls	r3, r1, #8
1000e8e4:	1ac0      	subs	r0, r0, r3
1000e8e6:	4152      	adcs	r2, r2
1000e8e8:	d2cd      	bcs.n	1000e886 <__aeabi_uidiv+0x3a>
1000e8ea:	09c3      	lsrs	r3, r0, #7
1000e8ec:	428b      	cmp	r3, r1
1000e8ee:	d301      	bcc.n	1000e8f4 <__aeabi_uidiv+0xa8>
1000e8f0:	01cb      	lsls	r3, r1, #7
1000e8f2:	1ac0      	subs	r0, r0, r3
1000e8f4:	4152      	adcs	r2, r2
1000e8f6:	0983      	lsrs	r3, r0, #6
1000e8f8:	428b      	cmp	r3, r1
1000e8fa:	d301      	bcc.n	1000e900 <__aeabi_uidiv+0xb4>
1000e8fc:	018b      	lsls	r3, r1, #6
1000e8fe:	1ac0      	subs	r0, r0, r3
1000e900:	4152      	adcs	r2, r2
1000e902:	0943      	lsrs	r3, r0, #5
1000e904:	428b      	cmp	r3, r1
1000e906:	d301      	bcc.n	1000e90c <__aeabi_uidiv+0xc0>
1000e908:	014b      	lsls	r3, r1, #5
1000e90a:	1ac0      	subs	r0, r0, r3
1000e90c:	4152      	adcs	r2, r2
1000e90e:	0903      	lsrs	r3, r0, #4
1000e910:	428b      	cmp	r3, r1
1000e912:	d301      	bcc.n	1000e918 <__aeabi_uidiv+0xcc>
1000e914:	010b      	lsls	r3, r1, #4
1000e916:	1ac0      	subs	r0, r0, r3
1000e918:	4152      	adcs	r2, r2
1000e91a:	08c3      	lsrs	r3, r0, #3
1000e91c:	428b      	cmp	r3, r1
1000e91e:	d301      	bcc.n	1000e924 <__aeabi_uidiv+0xd8>
1000e920:	00cb      	lsls	r3, r1, #3
1000e922:	1ac0      	subs	r0, r0, r3
1000e924:	4152      	adcs	r2, r2
1000e926:	0883      	lsrs	r3, r0, #2
1000e928:	428b      	cmp	r3, r1
1000e92a:	d301      	bcc.n	1000e930 <__aeabi_uidiv+0xe4>
1000e92c:	008b      	lsls	r3, r1, #2
1000e92e:	1ac0      	subs	r0, r0, r3
1000e930:	4152      	adcs	r2, r2
1000e932:	0843      	lsrs	r3, r0, #1
1000e934:	428b      	cmp	r3, r1
1000e936:	d301      	bcc.n	1000e93c <__aeabi_uidiv+0xf0>
1000e938:	004b      	lsls	r3, r1, #1
1000e93a:	1ac0      	subs	r0, r0, r3
1000e93c:	4152      	adcs	r2, r2
1000e93e:	1a41      	subs	r1, r0, r1
1000e940:	d200      	bcs.n	1000e944 <__aeabi_uidiv+0xf8>
1000e942:	4601      	mov	r1, r0
1000e944:	4152      	adcs	r2, r2
1000e946:	4610      	mov	r0, r2
1000e948:	4770      	bx	lr
1000e94a:	e7ff      	b.n	1000e94c <__aeabi_uidiv+0x100>
1000e94c:	b501      	push	{r0, lr}
1000e94e:	2000      	movs	r0, #0
1000e950:	f000 f806 	bl	1000e960 <__aeabi_idiv0>
1000e954:	bd02      	pop	{r1, pc}
1000e956:	46c0      	nop			; (mov r8, r8)

1000e958 <__aeabi_uidivmod>:
1000e958:	2900      	cmp	r1, #0
1000e95a:	d0f7      	beq.n	1000e94c <__aeabi_uidiv+0x100>
1000e95c:	e776      	b.n	1000e84c <__aeabi_uidiv>
1000e95e:	4770      	bx	lr

1000e960 <__aeabi_idiv0>:
1000e960:	4770      	bx	lr
1000e962:	46c0      	nop			; (mov r8, r8)

1000e964 <__aeabi_d2uiz>:
1000e964:	b570      	push	{r4, r5, r6, lr}
1000e966:	2200      	movs	r2, #0
1000e968:	4b0c      	ldr	r3, [pc, #48]	; (1000e99c <__aeabi_d2uiz+0x38>)
1000e96a:	0004      	movs	r4, r0
1000e96c:	000d      	movs	r5, r1
1000e96e:	f000 fe87 	bl	1000f680 <__aeabi_dcmpge>
1000e972:	2800      	cmp	r0, #0
1000e974:	d104      	bne.n	1000e980 <__aeabi_d2uiz+0x1c>
1000e976:	0020      	movs	r0, r4
1000e978:	0029      	movs	r1, r5
1000e97a:	f000 fddf 	bl	1000f53c <__aeabi_d2iz>
1000e97e:	bd70      	pop	{r4, r5, r6, pc}
1000e980:	4b06      	ldr	r3, [pc, #24]	; (1000e99c <__aeabi_d2uiz+0x38>)
1000e982:	2200      	movs	r2, #0
1000e984:	0020      	movs	r0, r4
1000e986:	0029      	movs	r1, r5
1000e988:	f000 fa84 	bl	1000ee94 <__aeabi_dsub>
1000e98c:	f000 fdd6 	bl	1000f53c <__aeabi_d2iz>
1000e990:	2380      	movs	r3, #128	; 0x80
1000e992:	061b      	lsls	r3, r3, #24
1000e994:	469c      	mov	ip, r3
1000e996:	4460      	add	r0, ip
1000e998:	e7f1      	b.n	1000e97e <__aeabi_d2uiz+0x1a>
1000e99a:	46c0      	nop			; (mov r8, r8)
1000e99c:	41e00000 	.word	0x41e00000

1000e9a0 <__aeabi_dmul>:
1000e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9a2:	465f      	mov	r7, fp
1000e9a4:	4656      	mov	r6, sl
1000e9a6:	464d      	mov	r5, r9
1000e9a8:	4644      	mov	r4, r8
1000e9aa:	b4f0      	push	{r4, r5, r6, r7}
1000e9ac:	030d      	lsls	r5, r1, #12
1000e9ae:	4699      	mov	r9, r3
1000e9b0:	004e      	lsls	r6, r1, #1
1000e9b2:	0b2b      	lsrs	r3, r5, #12
1000e9b4:	b087      	sub	sp, #28
1000e9b6:	0007      	movs	r7, r0
1000e9b8:	4692      	mov	sl, r2
1000e9ba:	4680      	mov	r8, r0
1000e9bc:	469b      	mov	fp, r3
1000e9be:	0d76      	lsrs	r6, r6, #21
1000e9c0:	0fcc      	lsrs	r4, r1, #31
1000e9c2:	2e00      	cmp	r6, #0
1000e9c4:	d069      	beq.n	1000ea9a <__aeabi_dmul+0xfa>
1000e9c6:	4b6d      	ldr	r3, [pc, #436]	; (1000eb7c <__aeabi_dmul+0x1dc>)
1000e9c8:	429e      	cmp	r6, r3
1000e9ca:	d035      	beq.n	1000ea38 <__aeabi_dmul+0x98>
1000e9cc:	465b      	mov	r3, fp
1000e9ce:	2280      	movs	r2, #128	; 0x80
1000e9d0:	00dd      	lsls	r5, r3, #3
1000e9d2:	0412      	lsls	r2, r2, #16
1000e9d4:	0f43      	lsrs	r3, r0, #29
1000e9d6:	4313      	orrs	r3, r2
1000e9d8:	432b      	orrs	r3, r5
1000e9da:	469b      	mov	fp, r3
1000e9dc:	00c3      	lsls	r3, r0, #3
1000e9de:	4698      	mov	r8, r3
1000e9e0:	4b67      	ldr	r3, [pc, #412]	; (1000eb80 <__aeabi_dmul+0x1e0>)
1000e9e2:	2700      	movs	r7, #0
1000e9e4:	469c      	mov	ip, r3
1000e9e6:	2300      	movs	r3, #0
1000e9e8:	4466      	add	r6, ip
1000e9ea:	9301      	str	r3, [sp, #4]
1000e9ec:	464a      	mov	r2, r9
1000e9ee:	0315      	lsls	r5, r2, #12
1000e9f0:	0050      	lsls	r0, r2, #1
1000e9f2:	0fd2      	lsrs	r2, r2, #31
1000e9f4:	4653      	mov	r3, sl
1000e9f6:	0b2d      	lsrs	r5, r5, #12
1000e9f8:	0d40      	lsrs	r0, r0, #21
1000e9fa:	4691      	mov	r9, r2
1000e9fc:	d100      	bne.n	1000ea00 <__aeabi_dmul+0x60>
1000e9fe:	e076      	b.n	1000eaee <__aeabi_dmul+0x14e>
1000ea00:	4a5e      	ldr	r2, [pc, #376]	; (1000eb7c <__aeabi_dmul+0x1dc>)
1000ea02:	4290      	cmp	r0, r2
1000ea04:	d06c      	beq.n	1000eae0 <__aeabi_dmul+0x140>
1000ea06:	2280      	movs	r2, #128	; 0x80
1000ea08:	0f5b      	lsrs	r3, r3, #29
1000ea0a:	0412      	lsls	r2, r2, #16
1000ea0c:	4313      	orrs	r3, r2
1000ea0e:	4a5c      	ldr	r2, [pc, #368]	; (1000eb80 <__aeabi_dmul+0x1e0>)
1000ea10:	00ed      	lsls	r5, r5, #3
1000ea12:	4694      	mov	ip, r2
1000ea14:	431d      	orrs	r5, r3
1000ea16:	4653      	mov	r3, sl
1000ea18:	2200      	movs	r2, #0
1000ea1a:	00db      	lsls	r3, r3, #3
1000ea1c:	4460      	add	r0, ip
1000ea1e:	4649      	mov	r1, r9
1000ea20:	1836      	adds	r6, r6, r0
1000ea22:	1c70      	adds	r0, r6, #1
1000ea24:	4061      	eors	r1, r4
1000ea26:	9002      	str	r0, [sp, #8]
1000ea28:	4317      	orrs	r7, r2
1000ea2a:	2f0f      	cmp	r7, #15
1000ea2c:	d900      	bls.n	1000ea30 <__aeabi_dmul+0x90>
1000ea2e:	e0af      	b.n	1000eb90 <__aeabi_dmul+0x1f0>
1000ea30:	4854      	ldr	r0, [pc, #336]	; (1000eb84 <__aeabi_dmul+0x1e4>)
1000ea32:	00bf      	lsls	r7, r7, #2
1000ea34:	59c7      	ldr	r7, [r0, r7]
1000ea36:	46bf      	mov	pc, r7
1000ea38:	465b      	mov	r3, fp
1000ea3a:	431f      	orrs	r7, r3
1000ea3c:	d000      	beq.n	1000ea40 <__aeabi_dmul+0xa0>
1000ea3e:	e088      	b.n	1000eb52 <__aeabi_dmul+0x1b2>
1000ea40:	2300      	movs	r3, #0
1000ea42:	469b      	mov	fp, r3
1000ea44:	4698      	mov	r8, r3
1000ea46:	3302      	adds	r3, #2
1000ea48:	2708      	movs	r7, #8
1000ea4a:	9301      	str	r3, [sp, #4]
1000ea4c:	e7ce      	b.n	1000e9ec <__aeabi_dmul+0x4c>
1000ea4e:	4649      	mov	r1, r9
1000ea50:	2a02      	cmp	r2, #2
1000ea52:	d06a      	beq.n	1000eb2a <__aeabi_dmul+0x18a>
1000ea54:	2a03      	cmp	r2, #3
1000ea56:	d100      	bne.n	1000ea5a <__aeabi_dmul+0xba>
1000ea58:	e209      	b.n	1000ee6e <__aeabi_dmul+0x4ce>
1000ea5a:	2a01      	cmp	r2, #1
1000ea5c:	d000      	beq.n	1000ea60 <__aeabi_dmul+0xc0>
1000ea5e:	e1bb      	b.n	1000edd8 <__aeabi_dmul+0x438>
1000ea60:	4011      	ands	r1, r2
1000ea62:	2200      	movs	r2, #0
1000ea64:	2300      	movs	r3, #0
1000ea66:	2500      	movs	r5, #0
1000ea68:	4690      	mov	r8, r2
1000ea6a:	b2cc      	uxtb	r4, r1
1000ea6c:	2100      	movs	r1, #0
1000ea6e:	032d      	lsls	r5, r5, #12
1000ea70:	0d0a      	lsrs	r2, r1, #20
1000ea72:	0512      	lsls	r2, r2, #20
1000ea74:	0b2d      	lsrs	r5, r5, #12
1000ea76:	4315      	orrs	r5, r2
1000ea78:	4a43      	ldr	r2, [pc, #268]	; (1000eb88 <__aeabi_dmul+0x1e8>)
1000ea7a:	051b      	lsls	r3, r3, #20
1000ea7c:	4015      	ands	r5, r2
1000ea7e:	431d      	orrs	r5, r3
1000ea80:	006d      	lsls	r5, r5, #1
1000ea82:	07e4      	lsls	r4, r4, #31
1000ea84:	086d      	lsrs	r5, r5, #1
1000ea86:	4325      	orrs	r5, r4
1000ea88:	4640      	mov	r0, r8
1000ea8a:	0029      	movs	r1, r5
1000ea8c:	b007      	add	sp, #28
1000ea8e:	bc3c      	pop	{r2, r3, r4, r5}
1000ea90:	4690      	mov	r8, r2
1000ea92:	4699      	mov	r9, r3
1000ea94:	46a2      	mov	sl, r4
1000ea96:	46ab      	mov	fp, r5
1000ea98:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea9a:	4303      	orrs	r3, r0
1000ea9c:	d052      	beq.n	1000eb44 <__aeabi_dmul+0x1a4>
1000ea9e:	465b      	mov	r3, fp
1000eaa0:	2b00      	cmp	r3, #0
1000eaa2:	d100      	bne.n	1000eaa6 <__aeabi_dmul+0x106>
1000eaa4:	e18a      	b.n	1000edbc <__aeabi_dmul+0x41c>
1000eaa6:	4658      	mov	r0, fp
1000eaa8:	f000 fdf4 	bl	1000f694 <__clzsi2>
1000eaac:	0003      	movs	r3, r0
1000eaae:	3b0b      	subs	r3, #11
1000eab0:	2b1c      	cmp	r3, #28
1000eab2:	dd00      	ble.n	1000eab6 <__aeabi_dmul+0x116>
1000eab4:	e17b      	b.n	1000edae <__aeabi_dmul+0x40e>
1000eab6:	221d      	movs	r2, #29
1000eab8:	1ad3      	subs	r3, r2, r3
1000eaba:	003a      	movs	r2, r7
1000eabc:	0001      	movs	r1, r0
1000eabe:	465d      	mov	r5, fp
1000eac0:	40da      	lsrs	r2, r3
1000eac2:	3908      	subs	r1, #8
1000eac4:	408d      	lsls	r5, r1
1000eac6:	0013      	movs	r3, r2
1000eac8:	408f      	lsls	r7, r1
1000eaca:	432b      	orrs	r3, r5
1000eacc:	469b      	mov	fp, r3
1000eace:	46b8      	mov	r8, r7
1000ead0:	4b2e      	ldr	r3, [pc, #184]	; (1000eb8c <__aeabi_dmul+0x1ec>)
1000ead2:	2700      	movs	r7, #0
1000ead4:	469c      	mov	ip, r3
1000ead6:	2300      	movs	r3, #0
1000ead8:	4460      	add	r0, ip
1000eada:	4246      	negs	r6, r0
1000eadc:	9301      	str	r3, [sp, #4]
1000eade:	e785      	b.n	1000e9ec <__aeabi_dmul+0x4c>
1000eae0:	4652      	mov	r2, sl
1000eae2:	432a      	orrs	r2, r5
1000eae4:	d12c      	bne.n	1000eb40 <__aeabi_dmul+0x1a0>
1000eae6:	2500      	movs	r5, #0
1000eae8:	2300      	movs	r3, #0
1000eaea:	2202      	movs	r2, #2
1000eaec:	e797      	b.n	1000ea1e <__aeabi_dmul+0x7e>
1000eaee:	4652      	mov	r2, sl
1000eaf0:	432a      	orrs	r2, r5
1000eaf2:	d021      	beq.n	1000eb38 <__aeabi_dmul+0x198>
1000eaf4:	2d00      	cmp	r5, #0
1000eaf6:	d100      	bne.n	1000eafa <__aeabi_dmul+0x15a>
1000eaf8:	e154      	b.n	1000eda4 <__aeabi_dmul+0x404>
1000eafa:	0028      	movs	r0, r5
1000eafc:	f000 fdca 	bl	1000f694 <__clzsi2>
1000eb00:	0003      	movs	r3, r0
1000eb02:	3b0b      	subs	r3, #11
1000eb04:	2b1c      	cmp	r3, #28
1000eb06:	dd00      	ble.n	1000eb0a <__aeabi_dmul+0x16a>
1000eb08:	e146      	b.n	1000ed98 <__aeabi_dmul+0x3f8>
1000eb0a:	211d      	movs	r1, #29
1000eb0c:	1acb      	subs	r3, r1, r3
1000eb0e:	4651      	mov	r1, sl
1000eb10:	0002      	movs	r2, r0
1000eb12:	40d9      	lsrs	r1, r3
1000eb14:	4653      	mov	r3, sl
1000eb16:	3a08      	subs	r2, #8
1000eb18:	4095      	lsls	r5, r2
1000eb1a:	4093      	lsls	r3, r2
1000eb1c:	430d      	orrs	r5, r1
1000eb1e:	4a1b      	ldr	r2, [pc, #108]	; (1000eb8c <__aeabi_dmul+0x1ec>)
1000eb20:	4694      	mov	ip, r2
1000eb22:	4460      	add	r0, ip
1000eb24:	4240      	negs	r0, r0
1000eb26:	2200      	movs	r2, #0
1000eb28:	e779      	b.n	1000ea1e <__aeabi_dmul+0x7e>
1000eb2a:	2401      	movs	r4, #1
1000eb2c:	2200      	movs	r2, #0
1000eb2e:	400c      	ands	r4, r1
1000eb30:	4b12      	ldr	r3, [pc, #72]	; (1000eb7c <__aeabi_dmul+0x1dc>)
1000eb32:	2500      	movs	r5, #0
1000eb34:	4690      	mov	r8, r2
1000eb36:	e799      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000eb38:	2500      	movs	r5, #0
1000eb3a:	2300      	movs	r3, #0
1000eb3c:	2201      	movs	r2, #1
1000eb3e:	e76e      	b.n	1000ea1e <__aeabi_dmul+0x7e>
1000eb40:	2203      	movs	r2, #3
1000eb42:	e76c      	b.n	1000ea1e <__aeabi_dmul+0x7e>
1000eb44:	2300      	movs	r3, #0
1000eb46:	469b      	mov	fp, r3
1000eb48:	4698      	mov	r8, r3
1000eb4a:	3301      	adds	r3, #1
1000eb4c:	2704      	movs	r7, #4
1000eb4e:	9301      	str	r3, [sp, #4]
1000eb50:	e74c      	b.n	1000e9ec <__aeabi_dmul+0x4c>
1000eb52:	2303      	movs	r3, #3
1000eb54:	270c      	movs	r7, #12
1000eb56:	9301      	str	r3, [sp, #4]
1000eb58:	e748      	b.n	1000e9ec <__aeabi_dmul+0x4c>
1000eb5a:	2300      	movs	r3, #0
1000eb5c:	2580      	movs	r5, #128	; 0x80
1000eb5e:	4698      	mov	r8, r3
1000eb60:	2400      	movs	r4, #0
1000eb62:	032d      	lsls	r5, r5, #12
1000eb64:	4b05      	ldr	r3, [pc, #20]	; (1000eb7c <__aeabi_dmul+0x1dc>)
1000eb66:	e781      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000eb68:	465d      	mov	r5, fp
1000eb6a:	4643      	mov	r3, r8
1000eb6c:	9a01      	ldr	r2, [sp, #4]
1000eb6e:	e76f      	b.n	1000ea50 <__aeabi_dmul+0xb0>
1000eb70:	465d      	mov	r5, fp
1000eb72:	4643      	mov	r3, r8
1000eb74:	0021      	movs	r1, r4
1000eb76:	9a01      	ldr	r2, [sp, #4]
1000eb78:	e76a      	b.n	1000ea50 <__aeabi_dmul+0xb0>
1000eb7a:	46c0      	nop			; (mov r8, r8)
1000eb7c:	000007ff 	.word	0x000007ff
1000eb80:	fffffc01 	.word	0xfffffc01
1000eb84:	100122ac 	.word	0x100122ac
1000eb88:	800fffff 	.word	0x800fffff
1000eb8c:	000003f3 	.word	0x000003f3
1000eb90:	4642      	mov	r2, r8
1000eb92:	0c12      	lsrs	r2, r2, #16
1000eb94:	4691      	mov	r9, r2
1000eb96:	0c1a      	lsrs	r2, r3, #16
1000eb98:	4694      	mov	ip, r2
1000eb9a:	4642      	mov	r2, r8
1000eb9c:	0417      	lsls	r7, r2, #16
1000eb9e:	464a      	mov	r2, r9
1000eba0:	041b      	lsls	r3, r3, #16
1000eba2:	0c1b      	lsrs	r3, r3, #16
1000eba4:	435a      	muls	r2, r3
1000eba6:	4660      	mov	r0, ip
1000eba8:	4690      	mov	r8, r2
1000ebaa:	464a      	mov	r2, r9
1000ebac:	4342      	muls	r2, r0
1000ebae:	0010      	movs	r0, r2
1000ebb0:	9203      	str	r2, [sp, #12]
1000ebb2:	4662      	mov	r2, ip
1000ebb4:	001c      	movs	r4, r3
1000ebb6:	0c3f      	lsrs	r7, r7, #16
1000ebb8:	437a      	muls	r2, r7
1000ebba:	437c      	muls	r4, r7
1000ebbc:	4442      	add	r2, r8
1000ebbe:	9201      	str	r2, [sp, #4]
1000ebc0:	0c22      	lsrs	r2, r4, #16
1000ebc2:	4692      	mov	sl, r2
1000ebc4:	9a01      	ldr	r2, [sp, #4]
1000ebc6:	4452      	add	r2, sl
1000ebc8:	4590      	cmp	r8, r2
1000ebca:	d906      	bls.n	1000ebda <__aeabi_dmul+0x23a>
1000ebcc:	4682      	mov	sl, r0
1000ebce:	2080      	movs	r0, #128	; 0x80
1000ebd0:	0240      	lsls	r0, r0, #9
1000ebd2:	4680      	mov	r8, r0
1000ebd4:	44c2      	add	sl, r8
1000ebd6:	4650      	mov	r0, sl
1000ebd8:	9003      	str	r0, [sp, #12]
1000ebda:	0c10      	lsrs	r0, r2, #16
1000ebdc:	9004      	str	r0, [sp, #16]
1000ebde:	4648      	mov	r0, r9
1000ebe0:	0424      	lsls	r4, r4, #16
1000ebe2:	0c24      	lsrs	r4, r4, #16
1000ebe4:	0412      	lsls	r2, r2, #16
1000ebe6:	1912      	adds	r2, r2, r4
1000ebe8:	9205      	str	r2, [sp, #20]
1000ebea:	0c2a      	lsrs	r2, r5, #16
1000ebec:	042d      	lsls	r5, r5, #16
1000ebee:	0c2d      	lsrs	r5, r5, #16
1000ebf0:	4368      	muls	r0, r5
1000ebf2:	002c      	movs	r4, r5
1000ebf4:	4682      	mov	sl, r0
1000ebf6:	4648      	mov	r0, r9
1000ebf8:	437c      	muls	r4, r7
1000ebfa:	4350      	muls	r0, r2
1000ebfc:	4681      	mov	r9, r0
1000ebfe:	0c20      	lsrs	r0, r4, #16
1000ec00:	4680      	mov	r8, r0
1000ec02:	4357      	muls	r7, r2
1000ec04:	4457      	add	r7, sl
1000ec06:	4447      	add	r7, r8
1000ec08:	45ba      	cmp	sl, r7
1000ec0a:	d903      	bls.n	1000ec14 <__aeabi_dmul+0x274>
1000ec0c:	2080      	movs	r0, #128	; 0x80
1000ec0e:	0240      	lsls	r0, r0, #9
1000ec10:	4680      	mov	r8, r0
1000ec12:	44c1      	add	r9, r8
1000ec14:	0c38      	lsrs	r0, r7, #16
1000ec16:	043f      	lsls	r7, r7, #16
1000ec18:	46b8      	mov	r8, r7
1000ec1a:	4448      	add	r0, r9
1000ec1c:	0424      	lsls	r4, r4, #16
1000ec1e:	0c24      	lsrs	r4, r4, #16
1000ec20:	9001      	str	r0, [sp, #4]
1000ec22:	9804      	ldr	r0, [sp, #16]
1000ec24:	44a0      	add	r8, r4
1000ec26:	4440      	add	r0, r8
1000ec28:	9004      	str	r0, [sp, #16]
1000ec2a:	4658      	mov	r0, fp
1000ec2c:	0c00      	lsrs	r0, r0, #16
1000ec2e:	4681      	mov	r9, r0
1000ec30:	4658      	mov	r0, fp
1000ec32:	0404      	lsls	r4, r0, #16
1000ec34:	0c20      	lsrs	r0, r4, #16
1000ec36:	4682      	mov	sl, r0
1000ec38:	0007      	movs	r7, r0
1000ec3a:	4648      	mov	r0, r9
1000ec3c:	435f      	muls	r7, r3
1000ec3e:	464c      	mov	r4, r9
1000ec40:	4343      	muls	r3, r0
1000ec42:	4660      	mov	r0, ip
1000ec44:	4360      	muls	r0, r4
1000ec46:	4664      	mov	r4, ip
1000ec48:	4683      	mov	fp, r0
1000ec4a:	4650      	mov	r0, sl
1000ec4c:	4344      	muls	r4, r0
1000ec4e:	0c38      	lsrs	r0, r7, #16
1000ec50:	4684      	mov	ip, r0
1000ec52:	18e4      	adds	r4, r4, r3
1000ec54:	4464      	add	r4, ip
1000ec56:	42a3      	cmp	r3, r4
1000ec58:	d903      	bls.n	1000ec62 <__aeabi_dmul+0x2c2>
1000ec5a:	2380      	movs	r3, #128	; 0x80
1000ec5c:	025b      	lsls	r3, r3, #9
1000ec5e:	469c      	mov	ip, r3
1000ec60:	44e3      	add	fp, ip
1000ec62:	4648      	mov	r0, r9
1000ec64:	043f      	lsls	r7, r7, #16
1000ec66:	0c23      	lsrs	r3, r4, #16
1000ec68:	0c3f      	lsrs	r7, r7, #16
1000ec6a:	0424      	lsls	r4, r4, #16
1000ec6c:	19e4      	adds	r4, r4, r7
1000ec6e:	4657      	mov	r7, sl
1000ec70:	4368      	muls	r0, r5
1000ec72:	436f      	muls	r7, r5
1000ec74:	4684      	mov	ip, r0
1000ec76:	464d      	mov	r5, r9
1000ec78:	4650      	mov	r0, sl
1000ec7a:	4355      	muls	r5, r2
1000ec7c:	4342      	muls	r2, r0
1000ec7e:	0c38      	lsrs	r0, r7, #16
1000ec80:	4681      	mov	r9, r0
1000ec82:	4462      	add	r2, ip
1000ec84:	444a      	add	r2, r9
1000ec86:	445b      	add	r3, fp
1000ec88:	4594      	cmp	ip, r2
1000ec8a:	d903      	bls.n	1000ec94 <__aeabi_dmul+0x2f4>
1000ec8c:	2080      	movs	r0, #128	; 0x80
1000ec8e:	0240      	lsls	r0, r0, #9
1000ec90:	4684      	mov	ip, r0
1000ec92:	4465      	add	r5, ip
1000ec94:	9803      	ldr	r0, [sp, #12]
1000ec96:	043f      	lsls	r7, r7, #16
1000ec98:	4683      	mov	fp, r0
1000ec9a:	9804      	ldr	r0, [sp, #16]
1000ec9c:	0c3f      	lsrs	r7, r7, #16
1000ec9e:	4684      	mov	ip, r0
1000eca0:	44e3      	add	fp, ip
1000eca2:	45c3      	cmp	fp, r8
1000eca4:	4180      	sbcs	r0, r0
1000eca6:	4240      	negs	r0, r0
1000eca8:	4682      	mov	sl, r0
1000ecaa:	0410      	lsls	r0, r2, #16
1000ecac:	4684      	mov	ip, r0
1000ecae:	9801      	ldr	r0, [sp, #4]
1000ecb0:	4467      	add	r7, ip
1000ecb2:	4684      	mov	ip, r0
1000ecb4:	4467      	add	r7, ip
1000ecb6:	44a3      	add	fp, r4
1000ecb8:	46bc      	mov	ip, r7
1000ecba:	45a3      	cmp	fp, r4
1000ecbc:	41a4      	sbcs	r4, r4
1000ecbe:	4699      	mov	r9, r3
1000ecc0:	44d4      	add	ip, sl
1000ecc2:	4264      	negs	r4, r4
1000ecc4:	4287      	cmp	r7, r0
1000ecc6:	41bf      	sbcs	r7, r7
1000ecc8:	45d4      	cmp	ip, sl
1000ecca:	4180      	sbcs	r0, r0
1000eccc:	44e1      	add	r9, ip
1000ecce:	46a0      	mov	r8, r4
1000ecd0:	4599      	cmp	r9, r3
1000ecd2:	419b      	sbcs	r3, r3
1000ecd4:	427f      	negs	r7, r7
1000ecd6:	4240      	negs	r0, r0
1000ecd8:	44c8      	add	r8, r9
1000ecda:	4307      	orrs	r7, r0
1000ecdc:	0c12      	lsrs	r2, r2, #16
1000ecde:	18ba      	adds	r2, r7, r2
1000ece0:	45a0      	cmp	r8, r4
1000ece2:	41a4      	sbcs	r4, r4
1000ece4:	425f      	negs	r7, r3
1000ece6:	003b      	movs	r3, r7
1000ece8:	4264      	negs	r4, r4
1000ecea:	4323      	orrs	r3, r4
1000ecec:	18d7      	adds	r7, r2, r3
1000ecee:	4643      	mov	r3, r8
1000ecf0:	197d      	adds	r5, r7, r5
1000ecf2:	0ddb      	lsrs	r3, r3, #23
1000ecf4:	026d      	lsls	r5, r5, #9
1000ecf6:	431d      	orrs	r5, r3
1000ecf8:	465b      	mov	r3, fp
1000ecfa:	025a      	lsls	r2, r3, #9
1000ecfc:	9b05      	ldr	r3, [sp, #20]
1000ecfe:	431a      	orrs	r2, r3
1000ed00:	1e53      	subs	r3, r2, #1
1000ed02:	419a      	sbcs	r2, r3
1000ed04:	465b      	mov	r3, fp
1000ed06:	0ddb      	lsrs	r3, r3, #23
1000ed08:	431a      	orrs	r2, r3
1000ed0a:	4643      	mov	r3, r8
1000ed0c:	025b      	lsls	r3, r3, #9
1000ed0e:	4313      	orrs	r3, r2
1000ed10:	01ea      	lsls	r2, r5, #7
1000ed12:	d507      	bpl.n	1000ed24 <__aeabi_dmul+0x384>
1000ed14:	2201      	movs	r2, #1
1000ed16:	085c      	lsrs	r4, r3, #1
1000ed18:	4013      	ands	r3, r2
1000ed1a:	4323      	orrs	r3, r4
1000ed1c:	07ea      	lsls	r2, r5, #31
1000ed1e:	9e02      	ldr	r6, [sp, #8]
1000ed20:	4313      	orrs	r3, r2
1000ed22:	086d      	lsrs	r5, r5, #1
1000ed24:	4a57      	ldr	r2, [pc, #348]	; (1000ee84 <__aeabi_dmul+0x4e4>)
1000ed26:	18b2      	adds	r2, r6, r2
1000ed28:	2a00      	cmp	r2, #0
1000ed2a:	dd4b      	ble.n	1000edc4 <__aeabi_dmul+0x424>
1000ed2c:	0758      	lsls	r0, r3, #29
1000ed2e:	d009      	beq.n	1000ed44 <__aeabi_dmul+0x3a4>
1000ed30:	200f      	movs	r0, #15
1000ed32:	4018      	ands	r0, r3
1000ed34:	2804      	cmp	r0, #4
1000ed36:	d005      	beq.n	1000ed44 <__aeabi_dmul+0x3a4>
1000ed38:	1d18      	adds	r0, r3, #4
1000ed3a:	4298      	cmp	r0, r3
1000ed3c:	419b      	sbcs	r3, r3
1000ed3e:	425b      	negs	r3, r3
1000ed40:	18ed      	adds	r5, r5, r3
1000ed42:	0003      	movs	r3, r0
1000ed44:	01e8      	lsls	r0, r5, #7
1000ed46:	d504      	bpl.n	1000ed52 <__aeabi_dmul+0x3b2>
1000ed48:	4a4f      	ldr	r2, [pc, #316]	; (1000ee88 <__aeabi_dmul+0x4e8>)
1000ed4a:	4015      	ands	r5, r2
1000ed4c:	2280      	movs	r2, #128	; 0x80
1000ed4e:	00d2      	lsls	r2, r2, #3
1000ed50:	18b2      	adds	r2, r6, r2
1000ed52:	484e      	ldr	r0, [pc, #312]	; (1000ee8c <__aeabi_dmul+0x4ec>)
1000ed54:	4282      	cmp	r2, r0
1000ed56:	dd00      	ble.n	1000ed5a <__aeabi_dmul+0x3ba>
1000ed58:	e6e7      	b.n	1000eb2a <__aeabi_dmul+0x18a>
1000ed5a:	2401      	movs	r4, #1
1000ed5c:	08db      	lsrs	r3, r3, #3
1000ed5e:	0768      	lsls	r0, r5, #29
1000ed60:	4318      	orrs	r0, r3
1000ed62:	026d      	lsls	r5, r5, #9
1000ed64:	0553      	lsls	r3, r2, #21
1000ed66:	4680      	mov	r8, r0
1000ed68:	0b2d      	lsrs	r5, r5, #12
1000ed6a:	0d5b      	lsrs	r3, r3, #21
1000ed6c:	400c      	ands	r4, r1
1000ed6e:	e67d      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000ed70:	2280      	movs	r2, #128	; 0x80
1000ed72:	4659      	mov	r1, fp
1000ed74:	0312      	lsls	r2, r2, #12
1000ed76:	4211      	tst	r1, r2
1000ed78:	d008      	beq.n	1000ed8c <__aeabi_dmul+0x3ec>
1000ed7a:	4215      	tst	r5, r2
1000ed7c:	d106      	bne.n	1000ed8c <__aeabi_dmul+0x3ec>
1000ed7e:	4315      	orrs	r5, r2
1000ed80:	032d      	lsls	r5, r5, #12
1000ed82:	4698      	mov	r8, r3
1000ed84:	0b2d      	lsrs	r5, r5, #12
1000ed86:	464c      	mov	r4, r9
1000ed88:	4b41      	ldr	r3, [pc, #260]	; (1000ee90 <__aeabi_dmul+0x4f0>)
1000ed8a:	e66f      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000ed8c:	465d      	mov	r5, fp
1000ed8e:	4315      	orrs	r5, r2
1000ed90:	032d      	lsls	r5, r5, #12
1000ed92:	0b2d      	lsrs	r5, r5, #12
1000ed94:	4b3e      	ldr	r3, [pc, #248]	; (1000ee90 <__aeabi_dmul+0x4f0>)
1000ed96:	e669      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000ed98:	0003      	movs	r3, r0
1000ed9a:	4655      	mov	r5, sl
1000ed9c:	3b28      	subs	r3, #40	; 0x28
1000ed9e:	409d      	lsls	r5, r3
1000eda0:	2300      	movs	r3, #0
1000eda2:	e6bc      	b.n	1000eb1e <__aeabi_dmul+0x17e>
1000eda4:	4650      	mov	r0, sl
1000eda6:	f000 fc75 	bl	1000f694 <__clzsi2>
1000edaa:	3020      	adds	r0, #32
1000edac:	e6a8      	b.n	1000eb00 <__aeabi_dmul+0x160>
1000edae:	0003      	movs	r3, r0
1000edb0:	3b28      	subs	r3, #40	; 0x28
1000edb2:	409f      	lsls	r7, r3
1000edb4:	2300      	movs	r3, #0
1000edb6:	46bb      	mov	fp, r7
1000edb8:	4698      	mov	r8, r3
1000edba:	e689      	b.n	1000ead0 <__aeabi_dmul+0x130>
1000edbc:	f000 fc6a 	bl	1000f694 <__clzsi2>
1000edc0:	3020      	adds	r0, #32
1000edc2:	e673      	b.n	1000eaac <__aeabi_dmul+0x10c>
1000edc4:	2401      	movs	r4, #1
1000edc6:	1aa6      	subs	r6, r4, r2
1000edc8:	2e38      	cmp	r6, #56	; 0x38
1000edca:	dd07      	ble.n	1000eddc <__aeabi_dmul+0x43c>
1000edcc:	2200      	movs	r2, #0
1000edce:	400c      	ands	r4, r1
1000edd0:	2300      	movs	r3, #0
1000edd2:	2500      	movs	r5, #0
1000edd4:	4690      	mov	r8, r2
1000edd6:	e649      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000edd8:	9e02      	ldr	r6, [sp, #8]
1000edda:	e7a3      	b.n	1000ed24 <__aeabi_dmul+0x384>
1000eddc:	2e1f      	cmp	r6, #31
1000edde:	dc20      	bgt.n	1000ee22 <__aeabi_dmul+0x482>
1000ede0:	2220      	movs	r2, #32
1000ede2:	002c      	movs	r4, r5
1000ede4:	0018      	movs	r0, r3
1000ede6:	1b92      	subs	r2, r2, r6
1000ede8:	40f0      	lsrs	r0, r6
1000edea:	4094      	lsls	r4, r2
1000edec:	4093      	lsls	r3, r2
1000edee:	4304      	orrs	r4, r0
1000edf0:	1e58      	subs	r0, r3, #1
1000edf2:	4183      	sbcs	r3, r0
1000edf4:	431c      	orrs	r4, r3
1000edf6:	40f5      	lsrs	r5, r6
1000edf8:	0763      	lsls	r3, r4, #29
1000edfa:	d009      	beq.n	1000ee10 <__aeabi_dmul+0x470>
1000edfc:	230f      	movs	r3, #15
1000edfe:	4023      	ands	r3, r4
1000ee00:	2b04      	cmp	r3, #4
1000ee02:	d005      	beq.n	1000ee10 <__aeabi_dmul+0x470>
1000ee04:	0023      	movs	r3, r4
1000ee06:	1d1c      	adds	r4, r3, #4
1000ee08:	429c      	cmp	r4, r3
1000ee0a:	4192      	sbcs	r2, r2
1000ee0c:	4252      	negs	r2, r2
1000ee0e:	18ad      	adds	r5, r5, r2
1000ee10:	022b      	lsls	r3, r5, #8
1000ee12:	d51f      	bpl.n	1000ee54 <__aeabi_dmul+0x4b4>
1000ee14:	2401      	movs	r4, #1
1000ee16:	2200      	movs	r2, #0
1000ee18:	400c      	ands	r4, r1
1000ee1a:	2301      	movs	r3, #1
1000ee1c:	2500      	movs	r5, #0
1000ee1e:	4690      	mov	r8, r2
1000ee20:	e624      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000ee22:	201f      	movs	r0, #31
1000ee24:	002c      	movs	r4, r5
1000ee26:	4240      	negs	r0, r0
1000ee28:	1a82      	subs	r2, r0, r2
1000ee2a:	40d4      	lsrs	r4, r2
1000ee2c:	2e20      	cmp	r6, #32
1000ee2e:	d01c      	beq.n	1000ee6a <__aeabi_dmul+0x4ca>
1000ee30:	2240      	movs	r2, #64	; 0x40
1000ee32:	1b96      	subs	r6, r2, r6
1000ee34:	40b5      	lsls	r5, r6
1000ee36:	432b      	orrs	r3, r5
1000ee38:	1e58      	subs	r0, r3, #1
1000ee3a:	4183      	sbcs	r3, r0
1000ee3c:	2007      	movs	r0, #7
1000ee3e:	4323      	orrs	r3, r4
1000ee40:	4018      	ands	r0, r3
1000ee42:	2500      	movs	r5, #0
1000ee44:	2800      	cmp	r0, #0
1000ee46:	d009      	beq.n	1000ee5c <__aeabi_dmul+0x4bc>
1000ee48:	220f      	movs	r2, #15
1000ee4a:	2500      	movs	r5, #0
1000ee4c:	401a      	ands	r2, r3
1000ee4e:	001c      	movs	r4, r3
1000ee50:	2a04      	cmp	r2, #4
1000ee52:	d1d8      	bne.n	1000ee06 <__aeabi_dmul+0x466>
1000ee54:	0023      	movs	r3, r4
1000ee56:	0768      	lsls	r0, r5, #29
1000ee58:	026d      	lsls	r5, r5, #9
1000ee5a:	0b2d      	lsrs	r5, r5, #12
1000ee5c:	2401      	movs	r4, #1
1000ee5e:	08db      	lsrs	r3, r3, #3
1000ee60:	4303      	orrs	r3, r0
1000ee62:	4698      	mov	r8, r3
1000ee64:	400c      	ands	r4, r1
1000ee66:	2300      	movs	r3, #0
1000ee68:	e600      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000ee6a:	2500      	movs	r5, #0
1000ee6c:	e7e3      	b.n	1000ee36 <__aeabi_dmul+0x496>
1000ee6e:	2280      	movs	r2, #128	; 0x80
1000ee70:	2401      	movs	r4, #1
1000ee72:	0312      	lsls	r2, r2, #12
1000ee74:	4315      	orrs	r5, r2
1000ee76:	032d      	lsls	r5, r5, #12
1000ee78:	4698      	mov	r8, r3
1000ee7a:	0b2d      	lsrs	r5, r5, #12
1000ee7c:	400c      	ands	r4, r1
1000ee7e:	4b04      	ldr	r3, [pc, #16]	; (1000ee90 <__aeabi_dmul+0x4f0>)
1000ee80:	e5f4      	b.n	1000ea6c <__aeabi_dmul+0xcc>
1000ee82:	46c0      	nop			; (mov r8, r8)
1000ee84:	000003ff 	.word	0x000003ff
1000ee88:	feffffff 	.word	0xfeffffff
1000ee8c:	000007fe 	.word	0x000007fe
1000ee90:	000007ff 	.word	0x000007ff

1000ee94 <__aeabi_dsub>:
1000ee94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee96:	4657      	mov	r7, sl
1000ee98:	464e      	mov	r6, r9
1000ee9a:	4645      	mov	r5, r8
1000ee9c:	b4e0      	push	{r5, r6, r7}
1000ee9e:	000e      	movs	r6, r1
1000eea0:	0011      	movs	r1, r2
1000eea2:	0ff2      	lsrs	r2, r6, #31
1000eea4:	4692      	mov	sl, r2
1000eea6:	00c5      	lsls	r5, r0, #3
1000eea8:	0f42      	lsrs	r2, r0, #29
1000eeaa:	0318      	lsls	r0, r3, #12
1000eeac:	0337      	lsls	r7, r6, #12
1000eeae:	0074      	lsls	r4, r6, #1
1000eeb0:	0a40      	lsrs	r0, r0, #9
1000eeb2:	0f4e      	lsrs	r6, r1, #29
1000eeb4:	0a7f      	lsrs	r7, r7, #9
1000eeb6:	4330      	orrs	r0, r6
1000eeb8:	4ecf      	ldr	r6, [pc, #828]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000eeba:	4317      	orrs	r7, r2
1000eebc:	005a      	lsls	r2, r3, #1
1000eebe:	0d64      	lsrs	r4, r4, #21
1000eec0:	0d52      	lsrs	r2, r2, #21
1000eec2:	0fdb      	lsrs	r3, r3, #31
1000eec4:	00c9      	lsls	r1, r1, #3
1000eec6:	42b2      	cmp	r2, r6
1000eec8:	d100      	bne.n	1000eecc <__aeabi_dsub+0x38>
1000eeca:	e0e5      	b.n	1000f098 <__aeabi_dsub+0x204>
1000eecc:	2601      	movs	r6, #1
1000eece:	4073      	eors	r3, r6
1000eed0:	1aa6      	subs	r6, r4, r2
1000eed2:	46b4      	mov	ip, r6
1000eed4:	4553      	cmp	r3, sl
1000eed6:	d100      	bne.n	1000eeda <__aeabi_dsub+0x46>
1000eed8:	e0af      	b.n	1000f03a <__aeabi_dsub+0x1a6>
1000eeda:	2e00      	cmp	r6, #0
1000eedc:	dc00      	bgt.n	1000eee0 <__aeabi_dsub+0x4c>
1000eede:	e10d      	b.n	1000f0fc <__aeabi_dsub+0x268>
1000eee0:	2a00      	cmp	r2, #0
1000eee2:	d13a      	bne.n	1000ef5a <__aeabi_dsub+0xc6>
1000eee4:	0003      	movs	r3, r0
1000eee6:	430b      	orrs	r3, r1
1000eee8:	d000      	beq.n	1000eeec <__aeabi_dsub+0x58>
1000eeea:	e0e4      	b.n	1000f0b6 <__aeabi_dsub+0x222>
1000eeec:	076b      	lsls	r3, r5, #29
1000eeee:	d009      	beq.n	1000ef04 <__aeabi_dsub+0x70>
1000eef0:	230f      	movs	r3, #15
1000eef2:	402b      	ands	r3, r5
1000eef4:	2b04      	cmp	r3, #4
1000eef6:	d005      	beq.n	1000ef04 <__aeabi_dsub+0x70>
1000eef8:	1d2b      	adds	r3, r5, #4
1000eefa:	42ab      	cmp	r3, r5
1000eefc:	41ad      	sbcs	r5, r5
1000eefe:	426d      	negs	r5, r5
1000ef00:	197f      	adds	r7, r7, r5
1000ef02:	001d      	movs	r5, r3
1000ef04:	023b      	lsls	r3, r7, #8
1000ef06:	d400      	bmi.n	1000ef0a <__aeabi_dsub+0x76>
1000ef08:	e088      	b.n	1000f01c <__aeabi_dsub+0x188>
1000ef0a:	4bbb      	ldr	r3, [pc, #748]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000ef0c:	3401      	adds	r4, #1
1000ef0e:	429c      	cmp	r4, r3
1000ef10:	d100      	bne.n	1000ef14 <__aeabi_dsub+0x80>
1000ef12:	e110      	b.n	1000f136 <__aeabi_dsub+0x2a2>
1000ef14:	003a      	movs	r2, r7
1000ef16:	4bb9      	ldr	r3, [pc, #740]	; (1000f1fc <__aeabi_dsub+0x368>)
1000ef18:	4651      	mov	r1, sl
1000ef1a:	401a      	ands	r2, r3
1000ef1c:	2301      	movs	r3, #1
1000ef1e:	0750      	lsls	r0, r2, #29
1000ef20:	08ed      	lsrs	r5, r5, #3
1000ef22:	0252      	lsls	r2, r2, #9
1000ef24:	0564      	lsls	r4, r4, #21
1000ef26:	4305      	orrs	r5, r0
1000ef28:	0b12      	lsrs	r2, r2, #12
1000ef2a:	0d64      	lsrs	r4, r4, #21
1000ef2c:	400b      	ands	r3, r1
1000ef2e:	2100      	movs	r1, #0
1000ef30:	0028      	movs	r0, r5
1000ef32:	0312      	lsls	r2, r2, #12
1000ef34:	0d0d      	lsrs	r5, r1, #20
1000ef36:	0b12      	lsrs	r2, r2, #12
1000ef38:	0564      	lsls	r4, r4, #21
1000ef3a:	052d      	lsls	r5, r5, #20
1000ef3c:	4315      	orrs	r5, r2
1000ef3e:	0862      	lsrs	r2, r4, #1
1000ef40:	4caf      	ldr	r4, [pc, #700]	; (1000f200 <__aeabi_dsub+0x36c>)
1000ef42:	07db      	lsls	r3, r3, #31
1000ef44:	402c      	ands	r4, r5
1000ef46:	4314      	orrs	r4, r2
1000ef48:	0064      	lsls	r4, r4, #1
1000ef4a:	0864      	lsrs	r4, r4, #1
1000ef4c:	431c      	orrs	r4, r3
1000ef4e:	0021      	movs	r1, r4
1000ef50:	bc1c      	pop	{r2, r3, r4}
1000ef52:	4690      	mov	r8, r2
1000ef54:	4699      	mov	r9, r3
1000ef56:	46a2      	mov	sl, r4
1000ef58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef5a:	4ba7      	ldr	r3, [pc, #668]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000ef5c:	429c      	cmp	r4, r3
1000ef5e:	d0c5      	beq.n	1000eeec <__aeabi_dsub+0x58>
1000ef60:	2380      	movs	r3, #128	; 0x80
1000ef62:	041b      	lsls	r3, r3, #16
1000ef64:	4318      	orrs	r0, r3
1000ef66:	4663      	mov	r3, ip
1000ef68:	2b38      	cmp	r3, #56	; 0x38
1000ef6a:	dd00      	ble.n	1000ef6e <__aeabi_dsub+0xda>
1000ef6c:	e0fd      	b.n	1000f16a <__aeabi_dsub+0x2d6>
1000ef6e:	2b1f      	cmp	r3, #31
1000ef70:	dd00      	ble.n	1000ef74 <__aeabi_dsub+0xe0>
1000ef72:	e130      	b.n	1000f1d6 <__aeabi_dsub+0x342>
1000ef74:	4662      	mov	r2, ip
1000ef76:	2320      	movs	r3, #32
1000ef78:	1a9b      	subs	r3, r3, r2
1000ef7a:	0002      	movs	r2, r0
1000ef7c:	409a      	lsls	r2, r3
1000ef7e:	4666      	mov	r6, ip
1000ef80:	4690      	mov	r8, r2
1000ef82:	000a      	movs	r2, r1
1000ef84:	4099      	lsls	r1, r3
1000ef86:	40f2      	lsrs	r2, r6
1000ef88:	4646      	mov	r6, r8
1000ef8a:	1e4b      	subs	r3, r1, #1
1000ef8c:	4199      	sbcs	r1, r3
1000ef8e:	4332      	orrs	r2, r6
1000ef90:	4311      	orrs	r1, r2
1000ef92:	4663      	mov	r3, ip
1000ef94:	0002      	movs	r2, r0
1000ef96:	40da      	lsrs	r2, r3
1000ef98:	1a69      	subs	r1, r5, r1
1000ef9a:	428d      	cmp	r5, r1
1000ef9c:	419b      	sbcs	r3, r3
1000ef9e:	000d      	movs	r5, r1
1000efa0:	1aba      	subs	r2, r7, r2
1000efa2:	425b      	negs	r3, r3
1000efa4:	1ad7      	subs	r7, r2, r3
1000efa6:	023b      	lsls	r3, r7, #8
1000efa8:	d535      	bpl.n	1000f016 <__aeabi_dsub+0x182>
1000efaa:	027a      	lsls	r2, r7, #9
1000efac:	0a53      	lsrs	r3, r2, #9
1000efae:	4698      	mov	r8, r3
1000efb0:	4643      	mov	r3, r8
1000efb2:	2b00      	cmp	r3, #0
1000efb4:	d100      	bne.n	1000efb8 <__aeabi_dsub+0x124>
1000efb6:	e0c4      	b.n	1000f142 <__aeabi_dsub+0x2ae>
1000efb8:	4640      	mov	r0, r8
1000efba:	f000 fb6b 	bl	1000f694 <__clzsi2>
1000efbe:	0003      	movs	r3, r0
1000efc0:	3b08      	subs	r3, #8
1000efc2:	2b1f      	cmp	r3, #31
1000efc4:	dd00      	ble.n	1000efc8 <__aeabi_dsub+0x134>
1000efc6:	e0c5      	b.n	1000f154 <__aeabi_dsub+0x2c0>
1000efc8:	2220      	movs	r2, #32
1000efca:	0029      	movs	r1, r5
1000efcc:	1ad2      	subs	r2, r2, r3
1000efce:	4647      	mov	r7, r8
1000efd0:	40d1      	lsrs	r1, r2
1000efd2:	409f      	lsls	r7, r3
1000efd4:	000a      	movs	r2, r1
1000efd6:	409d      	lsls	r5, r3
1000efd8:	433a      	orrs	r2, r7
1000efda:	429c      	cmp	r4, r3
1000efdc:	dd00      	ble.n	1000efe0 <__aeabi_dsub+0x14c>
1000efde:	e0c0      	b.n	1000f162 <__aeabi_dsub+0x2ce>
1000efe0:	1b1c      	subs	r4, r3, r4
1000efe2:	1c63      	adds	r3, r4, #1
1000efe4:	2b1f      	cmp	r3, #31
1000efe6:	dd00      	ble.n	1000efea <__aeabi_dsub+0x156>
1000efe8:	e0e4      	b.n	1000f1b4 <__aeabi_dsub+0x320>
1000efea:	2120      	movs	r1, #32
1000efec:	0014      	movs	r4, r2
1000efee:	0028      	movs	r0, r5
1000eff0:	1ac9      	subs	r1, r1, r3
1000eff2:	40d8      	lsrs	r0, r3
1000eff4:	408c      	lsls	r4, r1
1000eff6:	408d      	lsls	r5, r1
1000eff8:	4304      	orrs	r4, r0
1000effa:	40da      	lsrs	r2, r3
1000effc:	1e68      	subs	r0, r5, #1
1000effe:	4185      	sbcs	r5, r0
1000f000:	0017      	movs	r7, r2
1000f002:	4325      	orrs	r5, r4
1000f004:	2400      	movs	r4, #0
1000f006:	e771      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f008:	4642      	mov	r2, r8
1000f00a:	4663      	mov	r3, ip
1000f00c:	431a      	orrs	r2, r3
1000f00e:	d100      	bne.n	1000f012 <__aeabi_dsub+0x17e>
1000f010:	e24c      	b.n	1000f4ac <__aeabi_dsub+0x618>
1000f012:	4667      	mov	r7, ip
1000f014:	4645      	mov	r5, r8
1000f016:	076b      	lsls	r3, r5, #29
1000f018:	d000      	beq.n	1000f01c <__aeabi_dsub+0x188>
1000f01a:	e769      	b.n	1000eef0 <__aeabi_dsub+0x5c>
1000f01c:	2301      	movs	r3, #1
1000f01e:	4651      	mov	r1, sl
1000f020:	0778      	lsls	r0, r7, #29
1000f022:	08ed      	lsrs	r5, r5, #3
1000f024:	08fa      	lsrs	r2, r7, #3
1000f026:	400b      	ands	r3, r1
1000f028:	4305      	orrs	r5, r0
1000f02a:	4973      	ldr	r1, [pc, #460]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000f02c:	428c      	cmp	r4, r1
1000f02e:	d038      	beq.n	1000f0a2 <__aeabi_dsub+0x20e>
1000f030:	0312      	lsls	r2, r2, #12
1000f032:	0564      	lsls	r4, r4, #21
1000f034:	0b12      	lsrs	r2, r2, #12
1000f036:	0d64      	lsrs	r4, r4, #21
1000f038:	e779      	b.n	1000ef2e <__aeabi_dsub+0x9a>
1000f03a:	2e00      	cmp	r6, #0
1000f03c:	dc00      	bgt.n	1000f040 <__aeabi_dsub+0x1ac>
1000f03e:	e09a      	b.n	1000f176 <__aeabi_dsub+0x2e2>
1000f040:	2a00      	cmp	r2, #0
1000f042:	d047      	beq.n	1000f0d4 <__aeabi_dsub+0x240>
1000f044:	4a6c      	ldr	r2, [pc, #432]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000f046:	4294      	cmp	r4, r2
1000f048:	d100      	bne.n	1000f04c <__aeabi_dsub+0x1b8>
1000f04a:	e74f      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f04c:	2280      	movs	r2, #128	; 0x80
1000f04e:	0412      	lsls	r2, r2, #16
1000f050:	4310      	orrs	r0, r2
1000f052:	4662      	mov	r2, ip
1000f054:	2a38      	cmp	r2, #56	; 0x38
1000f056:	dc00      	bgt.n	1000f05a <__aeabi_dsub+0x1c6>
1000f058:	e108      	b.n	1000f26c <__aeabi_dsub+0x3d8>
1000f05a:	4301      	orrs	r1, r0
1000f05c:	1e48      	subs	r0, r1, #1
1000f05e:	4181      	sbcs	r1, r0
1000f060:	2200      	movs	r2, #0
1000f062:	b2c9      	uxtb	r1, r1
1000f064:	1949      	adds	r1, r1, r5
1000f066:	19d2      	adds	r2, r2, r7
1000f068:	42a9      	cmp	r1, r5
1000f06a:	41bf      	sbcs	r7, r7
1000f06c:	000d      	movs	r5, r1
1000f06e:	427f      	negs	r7, r7
1000f070:	18bf      	adds	r7, r7, r2
1000f072:	023a      	lsls	r2, r7, #8
1000f074:	d400      	bmi.n	1000f078 <__aeabi_dsub+0x1e4>
1000f076:	e142      	b.n	1000f2fe <__aeabi_dsub+0x46a>
1000f078:	4a5f      	ldr	r2, [pc, #380]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000f07a:	3401      	adds	r4, #1
1000f07c:	4294      	cmp	r4, r2
1000f07e:	d100      	bne.n	1000f082 <__aeabi_dsub+0x1ee>
1000f080:	e14e      	b.n	1000f320 <__aeabi_dsub+0x48c>
1000f082:	2001      	movs	r0, #1
1000f084:	4a5d      	ldr	r2, [pc, #372]	; (1000f1fc <__aeabi_dsub+0x368>)
1000f086:	0869      	lsrs	r1, r5, #1
1000f088:	403a      	ands	r2, r7
1000f08a:	4028      	ands	r0, r5
1000f08c:	4308      	orrs	r0, r1
1000f08e:	07d5      	lsls	r5, r2, #31
1000f090:	4305      	orrs	r5, r0
1000f092:	0857      	lsrs	r7, r2, #1
1000f094:	469a      	mov	sl, r3
1000f096:	e729      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f098:	0006      	movs	r6, r0
1000f09a:	430e      	orrs	r6, r1
1000f09c:	d000      	beq.n	1000f0a0 <__aeabi_dsub+0x20c>
1000f09e:	e717      	b.n	1000eed0 <__aeabi_dsub+0x3c>
1000f0a0:	e714      	b.n	1000eecc <__aeabi_dsub+0x38>
1000f0a2:	0029      	movs	r1, r5
1000f0a4:	4311      	orrs	r1, r2
1000f0a6:	d100      	bne.n	1000f0aa <__aeabi_dsub+0x216>
1000f0a8:	e1f9      	b.n	1000f49e <__aeabi_dsub+0x60a>
1000f0aa:	2180      	movs	r1, #128	; 0x80
1000f0ac:	0309      	lsls	r1, r1, #12
1000f0ae:	430a      	orrs	r2, r1
1000f0b0:	0312      	lsls	r2, r2, #12
1000f0b2:	0b12      	lsrs	r2, r2, #12
1000f0b4:	e73b      	b.n	1000ef2e <__aeabi_dsub+0x9a>
1000f0b6:	2301      	movs	r3, #1
1000f0b8:	425b      	negs	r3, r3
1000f0ba:	4698      	mov	r8, r3
1000f0bc:	44c4      	add	ip, r8
1000f0be:	4663      	mov	r3, ip
1000f0c0:	2b00      	cmp	r3, #0
1000f0c2:	d172      	bne.n	1000f1aa <__aeabi_dsub+0x316>
1000f0c4:	1a69      	subs	r1, r5, r1
1000f0c6:	428d      	cmp	r5, r1
1000f0c8:	419b      	sbcs	r3, r3
1000f0ca:	1a3f      	subs	r7, r7, r0
1000f0cc:	425b      	negs	r3, r3
1000f0ce:	1aff      	subs	r7, r7, r3
1000f0d0:	000d      	movs	r5, r1
1000f0d2:	e768      	b.n	1000efa6 <__aeabi_dsub+0x112>
1000f0d4:	0002      	movs	r2, r0
1000f0d6:	430a      	orrs	r2, r1
1000f0d8:	d100      	bne.n	1000f0dc <__aeabi_dsub+0x248>
1000f0da:	e707      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f0dc:	2201      	movs	r2, #1
1000f0de:	4252      	negs	r2, r2
1000f0e0:	4690      	mov	r8, r2
1000f0e2:	44c4      	add	ip, r8
1000f0e4:	4662      	mov	r2, ip
1000f0e6:	2a00      	cmp	r2, #0
1000f0e8:	d000      	beq.n	1000f0ec <__aeabi_dsub+0x258>
1000f0ea:	e0e6      	b.n	1000f2ba <__aeabi_dsub+0x426>
1000f0ec:	1869      	adds	r1, r5, r1
1000f0ee:	42a9      	cmp	r1, r5
1000f0f0:	41b6      	sbcs	r6, r6
1000f0f2:	183f      	adds	r7, r7, r0
1000f0f4:	4276      	negs	r6, r6
1000f0f6:	19f7      	adds	r7, r6, r7
1000f0f8:	000d      	movs	r5, r1
1000f0fa:	e7ba      	b.n	1000f072 <__aeabi_dsub+0x1de>
1000f0fc:	2e00      	cmp	r6, #0
1000f0fe:	d000      	beq.n	1000f102 <__aeabi_dsub+0x26e>
1000f100:	e080      	b.n	1000f204 <__aeabi_dsub+0x370>
1000f102:	1c62      	adds	r2, r4, #1
1000f104:	0552      	lsls	r2, r2, #21
1000f106:	0d52      	lsrs	r2, r2, #21
1000f108:	2a01      	cmp	r2, #1
1000f10a:	dc00      	bgt.n	1000f10e <__aeabi_dsub+0x27a>
1000f10c:	e0f9      	b.n	1000f302 <__aeabi_dsub+0x46e>
1000f10e:	1a6a      	subs	r2, r5, r1
1000f110:	4691      	mov	r9, r2
1000f112:	454d      	cmp	r5, r9
1000f114:	41b6      	sbcs	r6, r6
1000f116:	1a3a      	subs	r2, r7, r0
1000f118:	4276      	negs	r6, r6
1000f11a:	1b92      	subs	r2, r2, r6
1000f11c:	4690      	mov	r8, r2
1000f11e:	0212      	lsls	r2, r2, #8
1000f120:	d400      	bmi.n	1000f124 <__aeabi_dsub+0x290>
1000f122:	e099      	b.n	1000f258 <__aeabi_dsub+0x3c4>
1000f124:	1b4d      	subs	r5, r1, r5
1000f126:	42a9      	cmp	r1, r5
1000f128:	4189      	sbcs	r1, r1
1000f12a:	1bc7      	subs	r7, r0, r7
1000f12c:	4249      	negs	r1, r1
1000f12e:	1a7a      	subs	r2, r7, r1
1000f130:	4690      	mov	r8, r2
1000f132:	469a      	mov	sl, r3
1000f134:	e73c      	b.n	1000efb0 <__aeabi_dsub+0x11c>
1000f136:	4652      	mov	r2, sl
1000f138:	2301      	movs	r3, #1
1000f13a:	2500      	movs	r5, #0
1000f13c:	4013      	ands	r3, r2
1000f13e:	2200      	movs	r2, #0
1000f140:	e6f5      	b.n	1000ef2e <__aeabi_dsub+0x9a>
1000f142:	0028      	movs	r0, r5
1000f144:	f000 faa6 	bl	1000f694 <__clzsi2>
1000f148:	3020      	adds	r0, #32
1000f14a:	0003      	movs	r3, r0
1000f14c:	3b08      	subs	r3, #8
1000f14e:	2b1f      	cmp	r3, #31
1000f150:	dc00      	bgt.n	1000f154 <__aeabi_dsub+0x2c0>
1000f152:	e739      	b.n	1000efc8 <__aeabi_dsub+0x134>
1000f154:	002a      	movs	r2, r5
1000f156:	3828      	subs	r0, #40	; 0x28
1000f158:	4082      	lsls	r2, r0
1000f15a:	2500      	movs	r5, #0
1000f15c:	429c      	cmp	r4, r3
1000f15e:	dc00      	bgt.n	1000f162 <__aeabi_dsub+0x2ce>
1000f160:	e73e      	b.n	1000efe0 <__aeabi_dsub+0x14c>
1000f162:	4f26      	ldr	r7, [pc, #152]	; (1000f1fc <__aeabi_dsub+0x368>)
1000f164:	1ae4      	subs	r4, r4, r3
1000f166:	4017      	ands	r7, r2
1000f168:	e6c0      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f16a:	4301      	orrs	r1, r0
1000f16c:	1e48      	subs	r0, r1, #1
1000f16e:	4181      	sbcs	r1, r0
1000f170:	2200      	movs	r2, #0
1000f172:	b2c9      	uxtb	r1, r1
1000f174:	e710      	b.n	1000ef98 <__aeabi_dsub+0x104>
1000f176:	2e00      	cmp	r6, #0
1000f178:	d000      	beq.n	1000f17c <__aeabi_dsub+0x2e8>
1000f17a:	e0f1      	b.n	1000f360 <__aeabi_dsub+0x4cc>
1000f17c:	1c62      	adds	r2, r4, #1
1000f17e:	4694      	mov	ip, r2
1000f180:	0552      	lsls	r2, r2, #21
1000f182:	0d52      	lsrs	r2, r2, #21
1000f184:	2a01      	cmp	r2, #1
1000f186:	dc00      	bgt.n	1000f18a <__aeabi_dsub+0x2f6>
1000f188:	e0a0      	b.n	1000f2cc <__aeabi_dsub+0x438>
1000f18a:	4a1b      	ldr	r2, [pc, #108]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000f18c:	4594      	cmp	ip, r2
1000f18e:	d100      	bne.n	1000f192 <__aeabi_dsub+0x2fe>
1000f190:	e0c5      	b.n	1000f31e <__aeabi_dsub+0x48a>
1000f192:	1869      	adds	r1, r5, r1
1000f194:	42a9      	cmp	r1, r5
1000f196:	4192      	sbcs	r2, r2
1000f198:	183f      	adds	r7, r7, r0
1000f19a:	4252      	negs	r2, r2
1000f19c:	19d2      	adds	r2, r2, r7
1000f19e:	0849      	lsrs	r1, r1, #1
1000f1a0:	07d5      	lsls	r5, r2, #31
1000f1a2:	430d      	orrs	r5, r1
1000f1a4:	0857      	lsrs	r7, r2, #1
1000f1a6:	4664      	mov	r4, ip
1000f1a8:	e6a0      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f1aa:	4b13      	ldr	r3, [pc, #76]	; (1000f1f8 <__aeabi_dsub+0x364>)
1000f1ac:	429c      	cmp	r4, r3
1000f1ae:	d000      	beq.n	1000f1b2 <__aeabi_dsub+0x31e>
1000f1b0:	e6d9      	b.n	1000ef66 <__aeabi_dsub+0xd2>
1000f1b2:	e69b      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f1b4:	0011      	movs	r1, r2
1000f1b6:	3c1f      	subs	r4, #31
1000f1b8:	40e1      	lsrs	r1, r4
1000f1ba:	000c      	movs	r4, r1
1000f1bc:	2b20      	cmp	r3, #32
1000f1be:	d100      	bne.n	1000f1c2 <__aeabi_dsub+0x32e>
1000f1c0:	e080      	b.n	1000f2c4 <__aeabi_dsub+0x430>
1000f1c2:	2140      	movs	r1, #64	; 0x40
1000f1c4:	1acb      	subs	r3, r1, r3
1000f1c6:	409a      	lsls	r2, r3
1000f1c8:	4315      	orrs	r5, r2
1000f1ca:	1e6a      	subs	r2, r5, #1
1000f1cc:	4195      	sbcs	r5, r2
1000f1ce:	2700      	movs	r7, #0
1000f1d0:	4325      	orrs	r5, r4
1000f1d2:	2400      	movs	r4, #0
1000f1d4:	e71f      	b.n	1000f016 <__aeabi_dsub+0x182>
1000f1d6:	4663      	mov	r3, ip
1000f1d8:	0002      	movs	r2, r0
1000f1da:	3b20      	subs	r3, #32
1000f1dc:	40da      	lsrs	r2, r3
1000f1de:	4663      	mov	r3, ip
1000f1e0:	2b20      	cmp	r3, #32
1000f1e2:	d071      	beq.n	1000f2c8 <__aeabi_dsub+0x434>
1000f1e4:	2340      	movs	r3, #64	; 0x40
1000f1e6:	4666      	mov	r6, ip
1000f1e8:	1b9b      	subs	r3, r3, r6
1000f1ea:	4098      	lsls	r0, r3
1000f1ec:	4301      	orrs	r1, r0
1000f1ee:	1e48      	subs	r0, r1, #1
1000f1f0:	4181      	sbcs	r1, r0
1000f1f2:	4311      	orrs	r1, r2
1000f1f4:	2200      	movs	r2, #0
1000f1f6:	e6cf      	b.n	1000ef98 <__aeabi_dsub+0x104>
1000f1f8:	000007ff 	.word	0x000007ff
1000f1fc:	ff7fffff 	.word	0xff7fffff
1000f200:	800fffff 	.word	0x800fffff
1000f204:	2c00      	cmp	r4, #0
1000f206:	d048      	beq.n	1000f29a <__aeabi_dsub+0x406>
1000f208:	4cca      	ldr	r4, [pc, #808]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f20a:	42a2      	cmp	r2, r4
1000f20c:	d100      	bne.n	1000f210 <__aeabi_dsub+0x37c>
1000f20e:	e0a2      	b.n	1000f356 <__aeabi_dsub+0x4c2>
1000f210:	4274      	negs	r4, r6
1000f212:	46a1      	mov	r9, r4
1000f214:	2480      	movs	r4, #128	; 0x80
1000f216:	0424      	lsls	r4, r4, #16
1000f218:	4327      	orrs	r7, r4
1000f21a:	464c      	mov	r4, r9
1000f21c:	2c38      	cmp	r4, #56	; 0x38
1000f21e:	dd00      	ble.n	1000f222 <__aeabi_dsub+0x38e>
1000f220:	e0db      	b.n	1000f3da <__aeabi_dsub+0x546>
1000f222:	2c1f      	cmp	r4, #31
1000f224:	dd00      	ble.n	1000f228 <__aeabi_dsub+0x394>
1000f226:	e144      	b.n	1000f4b2 <__aeabi_dsub+0x61e>
1000f228:	464e      	mov	r6, r9
1000f22a:	2420      	movs	r4, #32
1000f22c:	1ba4      	subs	r4, r4, r6
1000f22e:	003e      	movs	r6, r7
1000f230:	40a6      	lsls	r6, r4
1000f232:	46a2      	mov	sl, r4
1000f234:	46b0      	mov	r8, r6
1000f236:	464c      	mov	r4, r9
1000f238:	002e      	movs	r6, r5
1000f23a:	40e6      	lsrs	r6, r4
1000f23c:	46b4      	mov	ip, r6
1000f23e:	4646      	mov	r6, r8
1000f240:	4664      	mov	r4, ip
1000f242:	4326      	orrs	r6, r4
1000f244:	4654      	mov	r4, sl
1000f246:	40a5      	lsls	r5, r4
1000f248:	1e6c      	subs	r4, r5, #1
1000f24a:	41a5      	sbcs	r5, r4
1000f24c:	0034      	movs	r4, r6
1000f24e:	432c      	orrs	r4, r5
1000f250:	464d      	mov	r5, r9
1000f252:	40ef      	lsrs	r7, r5
1000f254:	1b0d      	subs	r5, r1, r4
1000f256:	e028      	b.n	1000f2aa <__aeabi_dsub+0x416>
1000f258:	464a      	mov	r2, r9
1000f25a:	4643      	mov	r3, r8
1000f25c:	464d      	mov	r5, r9
1000f25e:	431a      	orrs	r2, r3
1000f260:	d000      	beq.n	1000f264 <__aeabi_dsub+0x3d0>
1000f262:	e6a5      	b.n	1000efb0 <__aeabi_dsub+0x11c>
1000f264:	2300      	movs	r3, #0
1000f266:	2400      	movs	r4, #0
1000f268:	2500      	movs	r5, #0
1000f26a:	e6de      	b.n	1000f02a <__aeabi_dsub+0x196>
1000f26c:	2a1f      	cmp	r2, #31
1000f26e:	dc5a      	bgt.n	1000f326 <__aeabi_dsub+0x492>
1000f270:	4666      	mov	r6, ip
1000f272:	2220      	movs	r2, #32
1000f274:	1b92      	subs	r2, r2, r6
1000f276:	0006      	movs	r6, r0
1000f278:	4096      	lsls	r6, r2
1000f27a:	4691      	mov	r9, r2
1000f27c:	46b0      	mov	r8, r6
1000f27e:	4662      	mov	r2, ip
1000f280:	000e      	movs	r6, r1
1000f282:	40d6      	lsrs	r6, r2
1000f284:	4642      	mov	r2, r8
1000f286:	4316      	orrs	r6, r2
1000f288:	464a      	mov	r2, r9
1000f28a:	4091      	lsls	r1, r2
1000f28c:	1e4a      	subs	r2, r1, #1
1000f28e:	4191      	sbcs	r1, r2
1000f290:	0002      	movs	r2, r0
1000f292:	4660      	mov	r0, ip
1000f294:	4331      	orrs	r1, r6
1000f296:	40c2      	lsrs	r2, r0
1000f298:	e6e4      	b.n	1000f064 <__aeabi_dsub+0x1d0>
1000f29a:	003c      	movs	r4, r7
1000f29c:	432c      	orrs	r4, r5
1000f29e:	d05a      	beq.n	1000f356 <__aeabi_dsub+0x4c2>
1000f2a0:	43f4      	mvns	r4, r6
1000f2a2:	46a1      	mov	r9, r4
1000f2a4:	2c00      	cmp	r4, #0
1000f2a6:	d152      	bne.n	1000f34e <__aeabi_dsub+0x4ba>
1000f2a8:	1b4d      	subs	r5, r1, r5
1000f2aa:	42a9      	cmp	r1, r5
1000f2ac:	4189      	sbcs	r1, r1
1000f2ae:	1bc7      	subs	r7, r0, r7
1000f2b0:	4249      	negs	r1, r1
1000f2b2:	1a7f      	subs	r7, r7, r1
1000f2b4:	0014      	movs	r4, r2
1000f2b6:	469a      	mov	sl, r3
1000f2b8:	e675      	b.n	1000efa6 <__aeabi_dsub+0x112>
1000f2ba:	4a9e      	ldr	r2, [pc, #632]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f2bc:	4294      	cmp	r4, r2
1000f2be:	d000      	beq.n	1000f2c2 <__aeabi_dsub+0x42e>
1000f2c0:	e6c7      	b.n	1000f052 <__aeabi_dsub+0x1be>
1000f2c2:	e613      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f2c4:	2200      	movs	r2, #0
1000f2c6:	e77f      	b.n	1000f1c8 <__aeabi_dsub+0x334>
1000f2c8:	2000      	movs	r0, #0
1000f2ca:	e78f      	b.n	1000f1ec <__aeabi_dsub+0x358>
1000f2cc:	2c00      	cmp	r4, #0
1000f2ce:	d000      	beq.n	1000f2d2 <__aeabi_dsub+0x43e>
1000f2d0:	e0c8      	b.n	1000f464 <__aeabi_dsub+0x5d0>
1000f2d2:	003b      	movs	r3, r7
1000f2d4:	432b      	orrs	r3, r5
1000f2d6:	d100      	bne.n	1000f2da <__aeabi_dsub+0x446>
1000f2d8:	e10f      	b.n	1000f4fa <__aeabi_dsub+0x666>
1000f2da:	0003      	movs	r3, r0
1000f2dc:	430b      	orrs	r3, r1
1000f2de:	d100      	bne.n	1000f2e2 <__aeabi_dsub+0x44e>
1000f2e0:	e604      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f2e2:	1869      	adds	r1, r5, r1
1000f2e4:	42a9      	cmp	r1, r5
1000f2e6:	419b      	sbcs	r3, r3
1000f2e8:	183f      	adds	r7, r7, r0
1000f2ea:	425b      	negs	r3, r3
1000f2ec:	19df      	adds	r7, r3, r7
1000f2ee:	023b      	lsls	r3, r7, #8
1000f2f0:	d400      	bmi.n	1000f2f4 <__aeabi_dsub+0x460>
1000f2f2:	e11a      	b.n	1000f52a <__aeabi_dsub+0x696>
1000f2f4:	4b90      	ldr	r3, [pc, #576]	; (1000f538 <__aeabi_dsub+0x6a4>)
1000f2f6:	000d      	movs	r5, r1
1000f2f8:	401f      	ands	r7, r3
1000f2fa:	4664      	mov	r4, ip
1000f2fc:	e5f6      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f2fe:	469a      	mov	sl, r3
1000f300:	e689      	b.n	1000f016 <__aeabi_dsub+0x182>
1000f302:	003a      	movs	r2, r7
1000f304:	432a      	orrs	r2, r5
1000f306:	2c00      	cmp	r4, #0
1000f308:	d15c      	bne.n	1000f3c4 <__aeabi_dsub+0x530>
1000f30a:	2a00      	cmp	r2, #0
1000f30c:	d175      	bne.n	1000f3fa <__aeabi_dsub+0x566>
1000f30e:	0002      	movs	r2, r0
1000f310:	430a      	orrs	r2, r1
1000f312:	d100      	bne.n	1000f316 <__aeabi_dsub+0x482>
1000f314:	e0ca      	b.n	1000f4ac <__aeabi_dsub+0x618>
1000f316:	0007      	movs	r7, r0
1000f318:	000d      	movs	r5, r1
1000f31a:	469a      	mov	sl, r3
1000f31c:	e5e6      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f31e:	4664      	mov	r4, ip
1000f320:	2200      	movs	r2, #0
1000f322:	2500      	movs	r5, #0
1000f324:	e681      	b.n	1000f02a <__aeabi_dsub+0x196>
1000f326:	4662      	mov	r2, ip
1000f328:	0006      	movs	r6, r0
1000f32a:	3a20      	subs	r2, #32
1000f32c:	40d6      	lsrs	r6, r2
1000f32e:	4662      	mov	r2, ip
1000f330:	46b0      	mov	r8, r6
1000f332:	2a20      	cmp	r2, #32
1000f334:	d100      	bne.n	1000f338 <__aeabi_dsub+0x4a4>
1000f336:	e0b7      	b.n	1000f4a8 <__aeabi_dsub+0x614>
1000f338:	2240      	movs	r2, #64	; 0x40
1000f33a:	4666      	mov	r6, ip
1000f33c:	1b92      	subs	r2, r2, r6
1000f33e:	4090      	lsls	r0, r2
1000f340:	4301      	orrs	r1, r0
1000f342:	4642      	mov	r2, r8
1000f344:	1e48      	subs	r0, r1, #1
1000f346:	4181      	sbcs	r1, r0
1000f348:	4311      	orrs	r1, r2
1000f34a:	2200      	movs	r2, #0
1000f34c:	e68a      	b.n	1000f064 <__aeabi_dsub+0x1d0>
1000f34e:	4c79      	ldr	r4, [pc, #484]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f350:	42a2      	cmp	r2, r4
1000f352:	d000      	beq.n	1000f356 <__aeabi_dsub+0x4c2>
1000f354:	e761      	b.n	1000f21a <__aeabi_dsub+0x386>
1000f356:	0007      	movs	r7, r0
1000f358:	000d      	movs	r5, r1
1000f35a:	0014      	movs	r4, r2
1000f35c:	469a      	mov	sl, r3
1000f35e:	e5c5      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f360:	2c00      	cmp	r4, #0
1000f362:	d141      	bne.n	1000f3e8 <__aeabi_dsub+0x554>
1000f364:	003c      	movs	r4, r7
1000f366:	432c      	orrs	r4, r5
1000f368:	d078      	beq.n	1000f45c <__aeabi_dsub+0x5c8>
1000f36a:	43f4      	mvns	r4, r6
1000f36c:	46a1      	mov	r9, r4
1000f36e:	2c00      	cmp	r4, #0
1000f370:	d020      	beq.n	1000f3b4 <__aeabi_dsub+0x520>
1000f372:	4c70      	ldr	r4, [pc, #448]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f374:	42a2      	cmp	r2, r4
1000f376:	d071      	beq.n	1000f45c <__aeabi_dsub+0x5c8>
1000f378:	464c      	mov	r4, r9
1000f37a:	2c38      	cmp	r4, #56	; 0x38
1000f37c:	dd00      	ble.n	1000f380 <__aeabi_dsub+0x4ec>
1000f37e:	e0b2      	b.n	1000f4e6 <__aeabi_dsub+0x652>
1000f380:	2c1f      	cmp	r4, #31
1000f382:	dd00      	ble.n	1000f386 <__aeabi_dsub+0x4f2>
1000f384:	e0bc      	b.n	1000f500 <__aeabi_dsub+0x66c>
1000f386:	2620      	movs	r6, #32
1000f388:	1b34      	subs	r4, r6, r4
1000f38a:	46a2      	mov	sl, r4
1000f38c:	003c      	movs	r4, r7
1000f38e:	4656      	mov	r6, sl
1000f390:	40b4      	lsls	r4, r6
1000f392:	464e      	mov	r6, r9
1000f394:	46a0      	mov	r8, r4
1000f396:	002c      	movs	r4, r5
1000f398:	40f4      	lsrs	r4, r6
1000f39a:	46a4      	mov	ip, r4
1000f39c:	4644      	mov	r4, r8
1000f39e:	4666      	mov	r6, ip
1000f3a0:	4334      	orrs	r4, r6
1000f3a2:	46a4      	mov	ip, r4
1000f3a4:	4654      	mov	r4, sl
1000f3a6:	40a5      	lsls	r5, r4
1000f3a8:	4664      	mov	r4, ip
1000f3aa:	1e6e      	subs	r6, r5, #1
1000f3ac:	41b5      	sbcs	r5, r6
1000f3ae:	4325      	orrs	r5, r4
1000f3b0:	464c      	mov	r4, r9
1000f3b2:	40e7      	lsrs	r7, r4
1000f3b4:	186d      	adds	r5, r5, r1
1000f3b6:	428d      	cmp	r5, r1
1000f3b8:	4189      	sbcs	r1, r1
1000f3ba:	183f      	adds	r7, r7, r0
1000f3bc:	4249      	negs	r1, r1
1000f3be:	19cf      	adds	r7, r1, r7
1000f3c0:	0014      	movs	r4, r2
1000f3c2:	e656      	b.n	1000f072 <__aeabi_dsub+0x1de>
1000f3c4:	2a00      	cmp	r2, #0
1000f3c6:	d12f      	bne.n	1000f428 <__aeabi_dsub+0x594>
1000f3c8:	0002      	movs	r2, r0
1000f3ca:	430a      	orrs	r2, r1
1000f3cc:	d100      	bne.n	1000f3d0 <__aeabi_dsub+0x53c>
1000f3ce:	e084      	b.n	1000f4da <__aeabi_dsub+0x646>
1000f3d0:	0007      	movs	r7, r0
1000f3d2:	000d      	movs	r5, r1
1000f3d4:	469a      	mov	sl, r3
1000f3d6:	4c57      	ldr	r4, [pc, #348]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f3d8:	e588      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f3da:	433d      	orrs	r5, r7
1000f3dc:	1e6f      	subs	r7, r5, #1
1000f3de:	41bd      	sbcs	r5, r7
1000f3e0:	b2ec      	uxtb	r4, r5
1000f3e2:	2700      	movs	r7, #0
1000f3e4:	1b0d      	subs	r5, r1, r4
1000f3e6:	e760      	b.n	1000f2aa <__aeabi_dsub+0x416>
1000f3e8:	4c52      	ldr	r4, [pc, #328]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f3ea:	42a2      	cmp	r2, r4
1000f3ec:	d036      	beq.n	1000f45c <__aeabi_dsub+0x5c8>
1000f3ee:	4274      	negs	r4, r6
1000f3f0:	2680      	movs	r6, #128	; 0x80
1000f3f2:	0436      	lsls	r6, r6, #16
1000f3f4:	46a1      	mov	r9, r4
1000f3f6:	4337      	orrs	r7, r6
1000f3f8:	e7be      	b.n	1000f378 <__aeabi_dsub+0x4e4>
1000f3fa:	0002      	movs	r2, r0
1000f3fc:	430a      	orrs	r2, r1
1000f3fe:	d100      	bne.n	1000f402 <__aeabi_dsub+0x56e>
1000f400:	e574      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f402:	1a6a      	subs	r2, r5, r1
1000f404:	4690      	mov	r8, r2
1000f406:	4545      	cmp	r5, r8
1000f408:	41b6      	sbcs	r6, r6
1000f40a:	1a3a      	subs	r2, r7, r0
1000f40c:	4276      	negs	r6, r6
1000f40e:	1b92      	subs	r2, r2, r6
1000f410:	4694      	mov	ip, r2
1000f412:	0212      	lsls	r2, r2, #8
1000f414:	d400      	bmi.n	1000f418 <__aeabi_dsub+0x584>
1000f416:	e5f7      	b.n	1000f008 <__aeabi_dsub+0x174>
1000f418:	1b4d      	subs	r5, r1, r5
1000f41a:	42a9      	cmp	r1, r5
1000f41c:	4189      	sbcs	r1, r1
1000f41e:	1bc7      	subs	r7, r0, r7
1000f420:	4249      	negs	r1, r1
1000f422:	1a7f      	subs	r7, r7, r1
1000f424:	469a      	mov	sl, r3
1000f426:	e561      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f428:	0002      	movs	r2, r0
1000f42a:	430a      	orrs	r2, r1
1000f42c:	d03a      	beq.n	1000f4a4 <__aeabi_dsub+0x610>
1000f42e:	08ed      	lsrs	r5, r5, #3
1000f430:	077c      	lsls	r4, r7, #29
1000f432:	432c      	orrs	r4, r5
1000f434:	2580      	movs	r5, #128	; 0x80
1000f436:	08fa      	lsrs	r2, r7, #3
1000f438:	032d      	lsls	r5, r5, #12
1000f43a:	422a      	tst	r2, r5
1000f43c:	d008      	beq.n	1000f450 <__aeabi_dsub+0x5bc>
1000f43e:	08c7      	lsrs	r7, r0, #3
1000f440:	422f      	tst	r7, r5
1000f442:	d105      	bne.n	1000f450 <__aeabi_dsub+0x5bc>
1000f444:	0745      	lsls	r5, r0, #29
1000f446:	002c      	movs	r4, r5
1000f448:	003a      	movs	r2, r7
1000f44a:	469a      	mov	sl, r3
1000f44c:	08c9      	lsrs	r1, r1, #3
1000f44e:	430c      	orrs	r4, r1
1000f450:	0f67      	lsrs	r7, r4, #29
1000f452:	00d2      	lsls	r2, r2, #3
1000f454:	00e5      	lsls	r5, r4, #3
1000f456:	4317      	orrs	r7, r2
1000f458:	4c36      	ldr	r4, [pc, #216]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f45a:	e547      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f45c:	0007      	movs	r7, r0
1000f45e:	000d      	movs	r5, r1
1000f460:	0014      	movs	r4, r2
1000f462:	e543      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f464:	003a      	movs	r2, r7
1000f466:	432a      	orrs	r2, r5
1000f468:	d043      	beq.n	1000f4f2 <__aeabi_dsub+0x65e>
1000f46a:	0002      	movs	r2, r0
1000f46c:	430a      	orrs	r2, r1
1000f46e:	d019      	beq.n	1000f4a4 <__aeabi_dsub+0x610>
1000f470:	08ed      	lsrs	r5, r5, #3
1000f472:	077c      	lsls	r4, r7, #29
1000f474:	432c      	orrs	r4, r5
1000f476:	2580      	movs	r5, #128	; 0x80
1000f478:	08fa      	lsrs	r2, r7, #3
1000f47a:	032d      	lsls	r5, r5, #12
1000f47c:	422a      	tst	r2, r5
1000f47e:	d007      	beq.n	1000f490 <__aeabi_dsub+0x5fc>
1000f480:	08c6      	lsrs	r6, r0, #3
1000f482:	422e      	tst	r6, r5
1000f484:	d104      	bne.n	1000f490 <__aeabi_dsub+0x5fc>
1000f486:	0747      	lsls	r7, r0, #29
1000f488:	003c      	movs	r4, r7
1000f48a:	0032      	movs	r2, r6
1000f48c:	08c9      	lsrs	r1, r1, #3
1000f48e:	430c      	orrs	r4, r1
1000f490:	00d7      	lsls	r7, r2, #3
1000f492:	0f62      	lsrs	r2, r4, #29
1000f494:	00e5      	lsls	r5, r4, #3
1000f496:	4317      	orrs	r7, r2
1000f498:	469a      	mov	sl, r3
1000f49a:	4c26      	ldr	r4, [pc, #152]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f49c:	e526      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f49e:	2200      	movs	r2, #0
1000f4a0:	2500      	movs	r5, #0
1000f4a2:	e544      	b.n	1000ef2e <__aeabi_dsub+0x9a>
1000f4a4:	4c23      	ldr	r4, [pc, #140]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f4a6:	e521      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f4a8:	2000      	movs	r0, #0
1000f4aa:	e749      	b.n	1000f340 <__aeabi_dsub+0x4ac>
1000f4ac:	2300      	movs	r3, #0
1000f4ae:	2500      	movs	r5, #0
1000f4b0:	e5bb      	b.n	1000f02a <__aeabi_dsub+0x196>
1000f4b2:	464c      	mov	r4, r9
1000f4b4:	003e      	movs	r6, r7
1000f4b6:	3c20      	subs	r4, #32
1000f4b8:	40e6      	lsrs	r6, r4
1000f4ba:	464c      	mov	r4, r9
1000f4bc:	46b4      	mov	ip, r6
1000f4be:	2c20      	cmp	r4, #32
1000f4c0:	d031      	beq.n	1000f526 <__aeabi_dsub+0x692>
1000f4c2:	2440      	movs	r4, #64	; 0x40
1000f4c4:	464e      	mov	r6, r9
1000f4c6:	1ba6      	subs	r6, r4, r6
1000f4c8:	40b7      	lsls	r7, r6
1000f4ca:	433d      	orrs	r5, r7
1000f4cc:	1e6c      	subs	r4, r5, #1
1000f4ce:	41a5      	sbcs	r5, r4
1000f4d0:	4664      	mov	r4, ip
1000f4d2:	432c      	orrs	r4, r5
1000f4d4:	2700      	movs	r7, #0
1000f4d6:	1b0d      	subs	r5, r1, r4
1000f4d8:	e6e7      	b.n	1000f2aa <__aeabi_dsub+0x416>
1000f4da:	2280      	movs	r2, #128	; 0x80
1000f4dc:	2300      	movs	r3, #0
1000f4de:	0312      	lsls	r2, r2, #12
1000f4e0:	4c14      	ldr	r4, [pc, #80]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f4e2:	2500      	movs	r5, #0
1000f4e4:	e5a1      	b.n	1000f02a <__aeabi_dsub+0x196>
1000f4e6:	433d      	orrs	r5, r7
1000f4e8:	1e6f      	subs	r7, r5, #1
1000f4ea:	41bd      	sbcs	r5, r7
1000f4ec:	2700      	movs	r7, #0
1000f4ee:	b2ed      	uxtb	r5, r5
1000f4f0:	e760      	b.n	1000f3b4 <__aeabi_dsub+0x520>
1000f4f2:	0007      	movs	r7, r0
1000f4f4:	000d      	movs	r5, r1
1000f4f6:	4c0f      	ldr	r4, [pc, #60]	; (1000f534 <__aeabi_dsub+0x6a0>)
1000f4f8:	e4f8      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f4fa:	0007      	movs	r7, r0
1000f4fc:	000d      	movs	r5, r1
1000f4fe:	e4f5      	b.n	1000eeec <__aeabi_dsub+0x58>
1000f500:	464e      	mov	r6, r9
1000f502:	003c      	movs	r4, r7
1000f504:	3e20      	subs	r6, #32
1000f506:	40f4      	lsrs	r4, r6
1000f508:	46a0      	mov	r8, r4
1000f50a:	464c      	mov	r4, r9
1000f50c:	2c20      	cmp	r4, #32
1000f50e:	d00e      	beq.n	1000f52e <__aeabi_dsub+0x69a>
1000f510:	2440      	movs	r4, #64	; 0x40
1000f512:	464e      	mov	r6, r9
1000f514:	1ba4      	subs	r4, r4, r6
1000f516:	40a7      	lsls	r7, r4
1000f518:	433d      	orrs	r5, r7
1000f51a:	1e6f      	subs	r7, r5, #1
1000f51c:	41bd      	sbcs	r5, r7
1000f51e:	4644      	mov	r4, r8
1000f520:	2700      	movs	r7, #0
1000f522:	4325      	orrs	r5, r4
1000f524:	e746      	b.n	1000f3b4 <__aeabi_dsub+0x520>
1000f526:	2700      	movs	r7, #0
1000f528:	e7cf      	b.n	1000f4ca <__aeabi_dsub+0x636>
1000f52a:	000d      	movs	r5, r1
1000f52c:	e573      	b.n	1000f016 <__aeabi_dsub+0x182>
1000f52e:	2700      	movs	r7, #0
1000f530:	e7f2      	b.n	1000f518 <__aeabi_dsub+0x684>
1000f532:	46c0      	nop			; (mov r8, r8)
1000f534:	000007ff 	.word	0x000007ff
1000f538:	ff7fffff 	.word	0xff7fffff

1000f53c <__aeabi_d2iz>:
1000f53c:	030b      	lsls	r3, r1, #12
1000f53e:	b530      	push	{r4, r5, lr}
1000f540:	4d13      	ldr	r5, [pc, #76]	; (1000f590 <__aeabi_d2iz+0x54>)
1000f542:	0b1a      	lsrs	r2, r3, #12
1000f544:	004b      	lsls	r3, r1, #1
1000f546:	0d5b      	lsrs	r3, r3, #21
1000f548:	0fc9      	lsrs	r1, r1, #31
1000f54a:	2400      	movs	r4, #0
1000f54c:	42ab      	cmp	r3, r5
1000f54e:	dd11      	ble.n	1000f574 <__aeabi_d2iz+0x38>
1000f550:	4c10      	ldr	r4, [pc, #64]	; (1000f594 <__aeabi_d2iz+0x58>)
1000f552:	42a3      	cmp	r3, r4
1000f554:	dc10      	bgt.n	1000f578 <__aeabi_d2iz+0x3c>
1000f556:	2480      	movs	r4, #128	; 0x80
1000f558:	0364      	lsls	r4, r4, #13
1000f55a:	4322      	orrs	r2, r4
1000f55c:	4c0e      	ldr	r4, [pc, #56]	; (1000f598 <__aeabi_d2iz+0x5c>)
1000f55e:	1ae4      	subs	r4, r4, r3
1000f560:	2c1f      	cmp	r4, #31
1000f562:	dd0c      	ble.n	1000f57e <__aeabi_d2iz+0x42>
1000f564:	480d      	ldr	r0, [pc, #52]	; (1000f59c <__aeabi_d2iz+0x60>)
1000f566:	1ac3      	subs	r3, r0, r3
1000f568:	40da      	lsrs	r2, r3
1000f56a:	0013      	movs	r3, r2
1000f56c:	425c      	negs	r4, r3
1000f56e:	2900      	cmp	r1, #0
1000f570:	d100      	bne.n	1000f574 <__aeabi_d2iz+0x38>
1000f572:	001c      	movs	r4, r3
1000f574:	0020      	movs	r0, r4
1000f576:	bd30      	pop	{r4, r5, pc}
1000f578:	4b09      	ldr	r3, [pc, #36]	; (1000f5a0 <__aeabi_d2iz+0x64>)
1000f57a:	18cc      	adds	r4, r1, r3
1000f57c:	e7fa      	b.n	1000f574 <__aeabi_d2iz+0x38>
1000f57e:	40e0      	lsrs	r0, r4
1000f580:	4c08      	ldr	r4, [pc, #32]	; (1000f5a4 <__aeabi_d2iz+0x68>)
1000f582:	46a4      	mov	ip, r4
1000f584:	4463      	add	r3, ip
1000f586:	409a      	lsls	r2, r3
1000f588:	0013      	movs	r3, r2
1000f58a:	4303      	orrs	r3, r0
1000f58c:	e7ee      	b.n	1000f56c <__aeabi_d2iz+0x30>
1000f58e:	46c0      	nop			; (mov r8, r8)
1000f590:	000003fe 	.word	0x000003fe
1000f594:	0000041d 	.word	0x0000041d
1000f598:	00000433 	.word	0x00000433
1000f59c:	00000413 	.word	0x00000413
1000f5a0:	7fffffff 	.word	0x7fffffff
1000f5a4:	fffffbed 	.word	0xfffffbed

1000f5a8 <__aeabi_ui2d>:
1000f5a8:	b570      	push	{r4, r5, r6, lr}
1000f5aa:	1e05      	subs	r5, r0, #0
1000f5ac:	d028      	beq.n	1000f600 <__aeabi_ui2d+0x58>
1000f5ae:	f000 f871 	bl	1000f694 <__clzsi2>
1000f5b2:	4b15      	ldr	r3, [pc, #84]	; (1000f608 <__aeabi_ui2d+0x60>)
1000f5b4:	4a15      	ldr	r2, [pc, #84]	; (1000f60c <__aeabi_ui2d+0x64>)
1000f5b6:	1a1b      	subs	r3, r3, r0
1000f5b8:	1ad2      	subs	r2, r2, r3
1000f5ba:	2a1f      	cmp	r2, #31
1000f5bc:	dd16      	ble.n	1000f5ec <__aeabi_ui2d+0x44>
1000f5be:	002c      	movs	r4, r5
1000f5c0:	4a13      	ldr	r2, [pc, #76]	; (1000f610 <__aeabi_ui2d+0x68>)
1000f5c2:	2500      	movs	r5, #0
1000f5c4:	1ad2      	subs	r2, r2, r3
1000f5c6:	4094      	lsls	r4, r2
1000f5c8:	055a      	lsls	r2, r3, #21
1000f5ca:	0324      	lsls	r4, r4, #12
1000f5cc:	0b24      	lsrs	r4, r4, #12
1000f5ce:	0d52      	lsrs	r2, r2, #21
1000f5d0:	2100      	movs	r1, #0
1000f5d2:	0324      	lsls	r4, r4, #12
1000f5d4:	0d0b      	lsrs	r3, r1, #20
1000f5d6:	0b24      	lsrs	r4, r4, #12
1000f5d8:	051b      	lsls	r3, r3, #20
1000f5da:	4323      	orrs	r3, r4
1000f5dc:	4c0d      	ldr	r4, [pc, #52]	; (1000f614 <__aeabi_ui2d+0x6c>)
1000f5de:	0512      	lsls	r2, r2, #20
1000f5e0:	4023      	ands	r3, r4
1000f5e2:	4313      	orrs	r3, r2
1000f5e4:	005b      	lsls	r3, r3, #1
1000f5e6:	0028      	movs	r0, r5
1000f5e8:	0859      	lsrs	r1, r3, #1
1000f5ea:	bd70      	pop	{r4, r5, r6, pc}
1000f5ec:	210b      	movs	r1, #11
1000f5ee:	002c      	movs	r4, r5
1000f5f0:	1a08      	subs	r0, r1, r0
1000f5f2:	40c4      	lsrs	r4, r0
1000f5f4:	4095      	lsls	r5, r2
1000f5f6:	0324      	lsls	r4, r4, #12
1000f5f8:	055a      	lsls	r2, r3, #21
1000f5fa:	0b24      	lsrs	r4, r4, #12
1000f5fc:	0d52      	lsrs	r2, r2, #21
1000f5fe:	e7e7      	b.n	1000f5d0 <__aeabi_ui2d+0x28>
1000f600:	2200      	movs	r2, #0
1000f602:	2400      	movs	r4, #0
1000f604:	e7e4      	b.n	1000f5d0 <__aeabi_ui2d+0x28>
1000f606:	46c0      	nop			; (mov r8, r8)
1000f608:	0000041e 	.word	0x0000041e
1000f60c:	00000433 	.word	0x00000433
1000f610:	00000413 	.word	0x00000413
1000f614:	800fffff 	.word	0x800fffff

1000f618 <__aeabi_cdrcmple>:
1000f618:	4684      	mov	ip, r0
1000f61a:	1c10      	adds	r0, r2, #0
1000f61c:	4662      	mov	r2, ip
1000f61e:	468c      	mov	ip, r1
1000f620:	1c19      	adds	r1, r3, #0
1000f622:	4663      	mov	r3, ip
1000f624:	e000      	b.n	1000f628 <__aeabi_cdcmpeq>
1000f626:	46c0      	nop			; (mov r8, r8)

1000f628 <__aeabi_cdcmpeq>:
1000f628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f62a:	f000 f8f5 	bl	1000f818 <__ledf2>
1000f62e:	2800      	cmp	r0, #0
1000f630:	d401      	bmi.n	1000f636 <__aeabi_cdcmpeq+0xe>
1000f632:	2100      	movs	r1, #0
1000f634:	42c8      	cmn	r0, r1
1000f636:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f638 <__aeabi_dcmpeq>:
1000f638:	b510      	push	{r4, lr}
1000f63a:	f000 f849 	bl	1000f6d0 <__eqdf2>
1000f63e:	4240      	negs	r0, r0
1000f640:	3001      	adds	r0, #1
1000f642:	bd10      	pop	{r4, pc}

1000f644 <__aeabi_dcmplt>:
1000f644:	b510      	push	{r4, lr}
1000f646:	f000 f8e7 	bl	1000f818 <__ledf2>
1000f64a:	2800      	cmp	r0, #0
1000f64c:	db01      	blt.n	1000f652 <__aeabi_dcmplt+0xe>
1000f64e:	2000      	movs	r0, #0
1000f650:	bd10      	pop	{r4, pc}
1000f652:	2001      	movs	r0, #1
1000f654:	bd10      	pop	{r4, pc}
1000f656:	46c0      	nop			; (mov r8, r8)

1000f658 <__aeabi_dcmple>:
1000f658:	b510      	push	{r4, lr}
1000f65a:	f000 f8dd 	bl	1000f818 <__ledf2>
1000f65e:	2800      	cmp	r0, #0
1000f660:	dd01      	ble.n	1000f666 <__aeabi_dcmple+0xe>
1000f662:	2000      	movs	r0, #0
1000f664:	bd10      	pop	{r4, pc}
1000f666:	2001      	movs	r0, #1
1000f668:	bd10      	pop	{r4, pc}
1000f66a:	46c0      	nop			; (mov r8, r8)

1000f66c <__aeabi_dcmpgt>:
1000f66c:	b510      	push	{r4, lr}
1000f66e:	f000 f86f 	bl	1000f750 <__gedf2>
1000f672:	2800      	cmp	r0, #0
1000f674:	dc01      	bgt.n	1000f67a <__aeabi_dcmpgt+0xe>
1000f676:	2000      	movs	r0, #0
1000f678:	bd10      	pop	{r4, pc}
1000f67a:	2001      	movs	r0, #1
1000f67c:	bd10      	pop	{r4, pc}
1000f67e:	46c0      	nop			; (mov r8, r8)

1000f680 <__aeabi_dcmpge>:
1000f680:	b510      	push	{r4, lr}
1000f682:	f000 f865 	bl	1000f750 <__gedf2>
1000f686:	2800      	cmp	r0, #0
1000f688:	da01      	bge.n	1000f68e <__aeabi_dcmpge+0xe>
1000f68a:	2000      	movs	r0, #0
1000f68c:	bd10      	pop	{r4, pc}
1000f68e:	2001      	movs	r0, #1
1000f690:	bd10      	pop	{r4, pc}
1000f692:	46c0      	nop			; (mov r8, r8)

1000f694 <__clzsi2>:
1000f694:	211c      	movs	r1, #28
1000f696:	2301      	movs	r3, #1
1000f698:	041b      	lsls	r3, r3, #16
1000f69a:	4298      	cmp	r0, r3
1000f69c:	d301      	bcc.n	1000f6a2 <__clzsi2+0xe>
1000f69e:	0c00      	lsrs	r0, r0, #16
1000f6a0:	3910      	subs	r1, #16
1000f6a2:	0a1b      	lsrs	r3, r3, #8
1000f6a4:	4298      	cmp	r0, r3
1000f6a6:	d301      	bcc.n	1000f6ac <__clzsi2+0x18>
1000f6a8:	0a00      	lsrs	r0, r0, #8
1000f6aa:	3908      	subs	r1, #8
1000f6ac:	091b      	lsrs	r3, r3, #4
1000f6ae:	4298      	cmp	r0, r3
1000f6b0:	d301      	bcc.n	1000f6b6 <__clzsi2+0x22>
1000f6b2:	0900      	lsrs	r0, r0, #4
1000f6b4:	3904      	subs	r1, #4
1000f6b6:	a202      	add	r2, pc, #8	; (adr r2, 1000f6c0 <__clzsi2+0x2c>)
1000f6b8:	5c10      	ldrb	r0, [r2, r0]
1000f6ba:	1840      	adds	r0, r0, r1
1000f6bc:	4770      	bx	lr
1000f6be:	46c0      	nop			; (mov r8, r8)
1000f6c0:	02020304 	.word	0x02020304
1000f6c4:	01010101 	.word	0x01010101
	...

1000f6d0 <__eqdf2>:
1000f6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6d2:	465f      	mov	r7, fp
1000f6d4:	4656      	mov	r6, sl
1000f6d6:	464d      	mov	r5, r9
1000f6d8:	4644      	mov	r4, r8
1000f6da:	b4f0      	push	{r4, r5, r6, r7}
1000f6dc:	031f      	lsls	r7, r3, #12
1000f6de:	005c      	lsls	r4, r3, #1
1000f6e0:	0fdb      	lsrs	r3, r3, #31
1000f6e2:	469a      	mov	sl, r3
1000f6e4:	4b19      	ldr	r3, [pc, #100]	; (1000f74c <__eqdf2+0x7c>)
1000f6e6:	030e      	lsls	r6, r1, #12
1000f6e8:	004d      	lsls	r5, r1, #1
1000f6ea:	0fc9      	lsrs	r1, r1, #31
1000f6ec:	4680      	mov	r8, r0
1000f6ee:	0b36      	lsrs	r6, r6, #12
1000f6f0:	0d6d      	lsrs	r5, r5, #21
1000f6f2:	468b      	mov	fp, r1
1000f6f4:	4691      	mov	r9, r2
1000f6f6:	0b3f      	lsrs	r7, r7, #12
1000f6f8:	0d64      	lsrs	r4, r4, #21
1000f6fa:	429d      	cmp	r5, r3
1000f6fc:	d019      	beq.n	1000f732 <__eqdf2+0x62>
1000f6fe:	4b13      	ldr	r3, [pc, #76]	; (1000f74c <__eqdf2+0x7c>)
1000f700:	429c      	cmp	r4, r3
1000f702:	d01b      	beq.n	1000f73c <__eqdf2+0x6c>
1000f704:	2301      	movs	r3, #1
1000f706:	42a5      	cmp	r5, r4
1000f708:	d006      	beq.n	1000f718 <__eqdf2+0x48>
1000f70a:	0018      	movs	r0, r3
1000f70c:	bc3c      	pop	{r2, r3, r4, r5}
1000f70e:	4690      	mov	r8, r2
1000f710:	4699      	mov	r9, r3
1000f712:	46a2      	mov	sl, r4
1000f714:	46ab      	mov	fp, r5
1000f716:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f718:	42be      	cmp	r6, r7
1000f71a:	d1f6      	bne.n	1000f70a <__eqdf2+0x3a>
1000f71c:	45c8      	cmp	r8, r9
1000f71e:	d1f4      	bne.n	1000f70a <__eqdf2+0x3a>
1000f720:	45d3      	cmp	fp, sl
1000f722:	d010      	beq.n	1000f746 <__eqdf2+0x76>
1000f724:	2d00      	cmp	r5, #0
1000f726:	d1f0      	bne.n	1000f70a <__eqdf2+0x3a>
1000f728:	4330      	orrs	r0, r6
1000f72a:	0003      	movs	r3, r0
1000f72c:	1e5a      	subs	r2, r3, #1
1000f72e:	4193      	sbcs	r3, r2
1000f730:	e7eb      	b.n	1000f70a <__eqdf2+0x3a>
1000f732:	0031      	movs	r1, r6
1000f734:	2301      	movs	r3, #1
1000f736:	4301      	orrs	r1, r0
1000f738:	d1e7      	bne.n	1000f70a <__eqdf2+0x3a>
1000f73a:	e7e0      	b.n	1000f6fe <__eqdf2+0x2e>
1000f73c:	433a      	orrs	r2, r7
1000f73e:	2301      	movs	r3, #1
1000f740:	2a00      	cmp	r2, #0
1000f742:	d1e2      	bne.n	1000f70a <__eqdf2+0x3a>
1000f744:	e7de      	b.n	1000f704 <__eqdf2+0x34>
1000f746:	2300      	movs	r3, #0
1000f748:	e7df      	b.n	1000f70a <__eqdf2+0x3a>
1000f74a:	46c0      	nop			; (mov r8, r8)
1000f74c:	000007ff 	.word	0x000007ff

1000f750 <__gedf2>:
1000f750:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f752:	465f      	mov	r7, fp
1000f754:	4644      	mov	r4, r8
1000f756:	4656      	mov	r6, sl
1000f758:	464d      	mov	r5, r9
1000f75a:	b4f0      	push	{r4, r5, r6, r7}
1000f75c:	031f      	lsls	r7, r3, #12
1000f75e:	0b3c      	lsrs	r4, r7, #12
1000f760:	4f2c      	ldr	r7, [pc, #176]	; (1000f814 <__gedf2+0xc4>)
1000f762:	030e      	lsls	r6, r1, #12
1000f764:	004d      	lsls	r5, r1, #1
1000f766:	46a3      	mov	fp, r4
1000f768:	005c      	lsls	r4, r3, #1
1000f76a:	4684      	mov	ip, r0
1000f76c:	0b36      	lsrs	r6, r6, #12
1000f76e:	0d6d      	lsrs	r5, r5, #21
1000f770:	0fc9      	lsrs	r1, r1, #31
1000f772:	4690      	mov	r8, r2
1000f774:	0d64      	lsrs	r4, r4, #21
1000f776:	0fdb      	lsrs	r3, r3, #31
1000f778:	42bd      	cmp	r5, r7
1000f77a:	d02b      	beq.n	1000f7d4 <__gedf2+0x84>
1000f77c:	4f25      	ldr	r7, [pc, #148]	; (1000f814 <__gedf2+0xc4>)
1000f77e:	42bc      	cmp	r4, r7
1000f780:	d02e      	beq.n	1000f7e0 <__gedf2+0x90>
1000f782:	2d00      	cmp	r5, #0
1000f784:	d10e      	bne.n	1000f7a4 <__gedf2+0x54>
1000f786:	4330      	orrs	r0, r6
1000f788:	0007      	movs	r7, r0
1000f78a:	4681      	mov	r9, r0
1000f78c:	4278      	negs	r0, r7
1000f78e:	4178      	adcs	r0, r7
1000f790:	2c00      	cmp	r4, #0
1000f792:	d117      	bne.n	1000f7c4 <__gedf2+0x74>
1000f794:	465f      	mov	r7, fp
1000f796:	433a      	orrs	r2, r7
1000f798:	d114      	bne.n	1000f7c4 <__gedf2+0x74>
1000f79a:	464b      	mov	r3, r9
1000f79c:	2000      	movs	r0, #0
1000f79e:	2b00      	cmp	r3, #0
1000f7a0:	d00a      	beq.n	1000f7b8 <__gedf2+0x68>
1000f7a2:	e006      	b.n	1000f7b2 <__gedf2+0x62>
1000f7a4:	2c00      	cmp	r4, #0
1000f7a6:	d102      	bne.n	1000f7ae <__gedf2+0x5e>
1000f7a8:	4658      	mov	r0, fp
1000f7aa:	4302      	orrs	r2, r0
1000f7ac:	d001      	beq.n	1000f7b2 <__gedf2+0x62>
1000f7ae:	4299      	cmp	r1, r3
1000f7b0:	d01a      	beq.n	1000f7e8 <__gedf2+0x98>
1000f7b2:	2301      	movs	r3, #1
1000f7b4:	4248      	negs	r0, r1
1000f7b6:	4318      	orrs	r0, r3
1000f7b8:	bc3c      	pop	{r2, r3, r4, r5}
1000f7ba:	4690      	mov	r8, r2
1000f7bc:	4699      	mov	r9, r3
1000f7be:	46a2      	mov	sl, r4
1000f7c0:	46ab      	mov	fp, r5
1000f7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7c4:	2800      	cmp	r0, #0
1000f7c6:	d0f2      	beq.n	1000f7ae <__gedf2+0x5e>
1000f7c8:	4258      	negs	r0, r3
1000f7ca:	4158      	adcs	r0, r3
1000f7cc:	2201      	movs	r2, #1
1000f7ce:	4240      	negs	r0, r0
1000f7d0:	4310      	orrs	r0, r2
1000f7d2:	e7f1      	b.n	1000f7b8 <__gedf2+0x68>
1000f7d4:	0037      	movs	r7, r6
1000f7d6:	4307      	orrs	r7, r0
1000f7d8:	d0d0      	beq.n	1000f77c <__gedf2+0x2c>
1000f7da:	2002      	movs	r0, #2
1000f7dc:	4240      	negs	r0, r0
1000f7de:	e7eb      	b.n	1000f7b8 <__gedf2+0x68>
1000f7e0:	465f      	mov	r7, fp
1000f7e2:	4317      	orrs	r7, r2
1000f7e4:	d0cd      	beq.n	1000f782 <__gedf2+0x32>
1000f7e6:	e7f8      	b.n	1000f7da <__gedf2+0x8a>
1000f7e8:	42a5      	cmp	r5, r4
1000f7ea:	dce2      	bgt.n	1000f7b2 <__gedf2+0x62>
1000f7ec:	db05      	blt.n	1000f7fa <__gedf2+0xaa>
1000f7ee:	455e      	cmp	r6, fp
1000f7f0:	d8df      	bhi.n	1000f7b2 <__gedf2+0x62>
1000f7f2:	d008      	beq.n	1000f806 <__gedf2+0xb6>
1000f7f4:	2000      	movs	r0, #0
1000f7f6:	455e      	cmp	r6, fp
1000f7f8:	d2de      	bcs.n	1000f7b8 <__gedf2+0x68>
1000f7fa:	4248      	negs	r0, r1
1000f7fc:	4148      	adcs	r0, r1
1000f7fe:	2301      	movs	r3, #1
1000f800:	4240      	negs	r0, r0
1000f802:	4318      	orrs	r0, r3
1000f804:	e7d8      	b.n	1000f7b8 <__gedf2+0x68>
1000f806:	45c4      	cmp	ip, r8
1000f808:	d8d3      	bhi.n	1000f7b2 <__gedf2+0x62>
1000f80a:	2000      	movs	r0, #0
1000f80c:	45c4      	cmp	ip, r8
1000f80e:	d3f4      	bcc.n	1000f7fa <__gedf2+0xaa>
1000f810:	e7d2      	b.n	1000f7b8 <__gedf2+0x68>
1000f812:	46c0      	nop			; (mov r8, r8)
1000f814:	000007ff 	.word	0x000007ff

1000f818 <__ledf2>:
1000f818:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f81a:	465f      	mov	r7, fp
1000f81c:	464d      	mov	r5, r9
1000f81e:	4644      	mov	r4, r8
1000f820:	4656      	mov	r6, sl
1000f822:	b4f0      	push	{r4, r5, r6, r7}
1000f824:	031c      	lsls	r4, r3, #12
1000f826:	0b24      	lsrs	r4, r4, #12
1000f828:	46a4      	mov	ip, r4
1000f82a:	4c2f      	ldr	r4, [pc, #188]	; (1000f8e8 <__ledf2+0xd0>)
1000f82c:	030f      	lsls	r7, r1, #12
1000f82e:	004d      	lsls	r5, r1, #1
1000f830:	005e      	lsls	r6, r3, #1
1000f832:	0fc9      	lsrs	r1, r1, #31
1000f834:	4680      	mov	r8, r0
1000f836:	0b3f      	lsrs	r7, r7, #12
1000f838:	0d6d      	lsrs	r5, r5, #21
1000f83a:	468b      	mov	fp, r1
1000f83c:	4691      	mov	r9, r2
1000f83e:	0d76      	lsrs	r6, r6, #21
1000f840:	0fdb      	lsrs	r3, r3, #31
1000f842:	42a5      	cmp	r5, r4
1000f844:	d020      	beq.n	1000f888 <__ledf2+0x70>
1000f846:	4c28      	ldr	r4, [pc, #160]	; (1000f8e8 <__ledf2+0xd0>)
1000f848:	42a6      	cmp	r6, r4
1000f84a:	d022      	beq.n	1000f892 <__ledf2+0x7a>
1000f84c:	2d00      	cmp	r5, #0
1000f84e:	d112      	bne.n	1000f876 <__ledf2+0x5e>
1000f850:	4338      	orrs	r0, r7
1000f852:	4244      	negs	r4, r0
1000f854:	4144      	adcs	r4, r0
1000f856:	2e00      	cmp	r6, #0
1000f858:	d020      	beq.n	1000f89c <__ledf2+0x84>
1000f85a:	2c00      	cmp	r4, #0
1000f85c:	d00d      	beq.n	1000f87a <__ledf2+0x62>
1000f85e:	425c      	negs	r4, r3
1000f860:	4163      	adcs	r3, r4
1000f862:	2401      	movs	r4, #1
1000f864:	425b      	negs	r3, r3
1000f866:	431c      	orrs	r4, r3
1000f868:	0020      	movs	r0, r4
1000f86a:	bc3c      	pop	{r2, r3, r4, r5}
1000f86c:	4690      	mov	r8, r2
1000f86e:	4699      	mov	r9, r3
1000f870:	46a2      	mov	sl, r4
1000f872:	46ab      	mov	fp, r5
1000f874:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f876:	2e00      	cmp	r6, #0
1000f878:	d017      	beq.n	1000f8aa <__ledf2+0x92>
1000f87a:	455b      	cmp	r3, fp
1000f87c:	d019      	beq.n	1000f8b2 <__ledf2+0x9a>
1000f87e:	465b      	mov	r3, fp
1000f880:	425c      	negs	r4, r3
1000f882:	2301      	movs	r3, #1
1000f884:	431c      	orrs	r4, r3
1000f886:	e7ef      	b.n	1000f868 <__ledf2+0x50>
1000f888:	0039      	movs	r1, r7
1000f88a:	2402      	movs	r4, #2
1000f88c:	4301      	orrs	r1, r0
1000f88e:	d1eb      	bne.n	1000f868 <__ledf2+0x50>
1000f890:	e7d9      	b.n	1000f846 <__ledf2+0x2e>
1000f892:	4661      	mov	r1, ip
1000f894:	2402      	movs	r4, #2
1000f896:	4311      	orrs	r1, r2
1000f898:	d1e6      	bne.n	1000f868 <__ledf2+0x50>
1000f89a:	e7d7      	b.n	1000f84c <__ledf2+0x34>
1000f89c:	4661      	mov	r1, ip
1000f89e:	430a      	orrs	r2, r1
1000f8a0:	d1db      	bne.n	1000f85a <__ledf2+0x42>
1000f8a2:	2400      	movs	r4, #0
1000f8a4:	2800      	cmp	r0, #0
1000f8a6:	d0df      	beq.n	1000f868 <__ledf2+0x50>
1000f8a8:	e7e9      	b.n	1000f87e <__ledf2+0x66>
1000f8aa:	4661      	mov	r1, ip
1000f8ac:	430a      	orrs	r2, r1
1000f8ae:	d1e4      	bne.n	1000f87a <__ledf2+0x62>
1000f8b0:	e7e5      	b.n	1000f87e <__ledf2+0x66>
1000f8b2:	42b5      	cmp	r5, r6
1000f8b4:	dd03      	ble.n	1000f8be <__ledf2+0xa6>
1000f8b6:	2201      	movs	r2, #1
1000f8b8:	425c      	negs	r4, r3
1000f8ba:	4314      	orrs	r4, r2
1000f8bc:	e7d4      	b.n	1000f868 <__ledf2+0x50>
1000f8be:	42b5      	cmp	r5, r6
1000f8c0:	dbcd      	blt.n	1000f85e <__ledf2+0x46>
1000f8c2:	4567      	cmp	r7, ip
1000f8c4:	d8db      	bhi.n	1000f87e <__ledf2+0x66>
1000f8c6:	d009      	beq.n	1000f8dc <__ledf2+0xc4>
1000f8c8:	2400      	movs	r4, #0
1000f8ca:	4567      	cmp	r7, ip
1000f8cc:	d2cc      	bcs.n	1000f868 <__ledf2+0x50>
1000f8ce:	4659      	mov	r1, fp
1000f8d0:	424c      	negs	r4, r1
1000f8d2:	4161      	adcs	r1, r4
1000f8d4:	2401      	movs	r4, #1
1000f8d6:	4249      	negs	r1, r1
1000f8d8:	430c      	orrs	r4, r1
1000f8da:	e7c5      	b.n	1000f868 <__ledf2+0x50>
1000f8dc:	45c8      	cmp	r8, r9
1000f8de:	d8ce      	bhi.n	1000f87e <__ledf2+0x66>
1000f8e0:	2400      	movs	r4, #0
1000f8e2:	45c8      	cmp	r8, r9
1000f8e4:	d3f3      	bcc.n	1000f8ce <__ledf2+0xb6>
1000f8e6:	e7bf      	b.n	1000f868 <__ledf2+0x50>
1000f8e8:	000007ff 	.word	0x000007ff

1000f8ec <__libc_init_array>:
1000f8ec:	4b0e      	ldr	r3, [pc, #56]	; (1000f928 <__libc_init_array+0x3c>)
1000f8ee:	b570      	push	{r4, r5, r6, lr}
1000f8f0:	2500      	movs	r5, #0
1000f8f2:	001e      	movs	r6, r3
1000f8f4:	4c0d      	ldr	r4, [pc, #52]	; (1000f92c <__libc_init_array+0x40>)
1000f8f6:	1ae4      	subs	r4, r4, r3
1000f8f8:	10a4      	asrs	r4, r4, #2
1000f8fa:	42a5      	cmp	r5, r4
1000f8fc:	d004      	beq.n	1000f908 <__libc_init_array+0x1c>
1000f8fe:	00ab      	lsls	r3, r5, #2
1000f900:	58f3      	ldr	r3, [r6, r3]
1000f902:	4798      	blx	r3
1000f904:	3501      	adds	r5, #1
1000f906:	e7f8      	b.n	1000f8fa <__libc_init_array+0xe>
1000f908:	f002 fd3e 	bl	10012388 <_init>
1000f90c:	4b08      	ldr	r3, [pc, #32]	; (1000f930 <__libc_init_array+0x44>)
1000f90e:	2500      	movs	r5, #0
1000f910:	001e      	movs	r6, r3
1000f912:	4c08      	ldr	r4, [pc, #32]	; (1000f934 <__libc_init_array+0x48>)
1000f914:	1ae4      	subs	r4, r4, r3
1000f916:	10a4      	asrs	r4, r4, #2
1000f918:	42a5      	cmp	r5, r4
1000f91a:	d004      	beq.n	1000f926 <__libc_init_array+0x3a>
1000f91c:	00ab      	lsls	r3, r5, #2
1000f91e:	58f3      	ldr	r3, [r6, r3]
1000f920:	4798      	blx	r3
1000f922:	3501      	adds	r5, #1
1000f924:	e7f8      	b.n	1000f918 <__libc_init_array+0x2c>
1000f926:	bd70      	pop	{r4, r5, r6, pc}
1000f928:	10012394 	.word	0x10012394
1000f92c:	10012394 	.word	0x10012394
1000f930:	10012394 	.word	0x10012394
1000f934:	10012398 	.word	0x10012398

1000f938 <memcmp>:
1000f938:	b530      	push	{r4, r5, lr}
1000f93a:	2400      	movs	r4, #0
1000f93c:	42a2      	cmp	r2, r4
1000f93e:	d008      	beq.n	1000f952 <memcmp+0x1a>
1000f940:	5d03      	ldrb	r3, [r0, r4]
1000f942:	1c65      	adds	r5, r4, #1
1000f944:	5d0c      	ldrb	r4, [r1, r4]
1000f946:	42a3      	cmp	r3, r4
1000f948:	d001      	beq.n	1000f94e <memcmp+0x16>
1000f94a:	1b18      	subs	r0, r3, r4
1000f94c:	e002      	b.n	1000f954 <memcmp+0x1c>
1000f94e:	002c      	movs	r4, r5
1000f950:	e7f4      	b.n	1000f93c <memcmp+0x4>
1000f952:	2000      	movs	r0, #0
1000f954:	bd30      	pop	{r4, r5, pc}

1000f956 <memcpy>:
1000f956:	2300      	movs	r3, #0
1000f958:	b510      	push	{r4, lr}
1000f95a:	429a      	cmp	r2, r3
1000f95c:	d003      	beq.n	1000f966 <memcpy+0x10>
1000f95e:	5ccc      	ldrb	r4, [r1, r3]
1000f960:	54c4      	strb	r4, [r0, r3]
1000f962:	3301      	adds	r3, #1
1000f964:	e7f9      	b.n	1000f95a <memcpy+0x4>
1000f966:	bd10      	pop	{r4, pc}

1000f968 <memset>:
1000f968:	0003      	movs	r3, r0
1000f96a:	1882      	adds	r2, r0, r2
1000f96c:	4293      	cmp	r3, r2
1000f96e:	d002      	beq.n	1000f976 <memset+0xe>
1000f970:	7019      	strb	r1, [r3, #0]
1000f972:	3301      	adds	r3, #1
1000f974:	e7fa      	b.n	1000f96c <memset+0x4>
1000f976:	4770      	bx	lr

1000f978 <iprintf>:
1000f978:	b40f      	push	{r0, r1, r2, r3}
1000f97a:	4b0b      	ldr	r3, [pc, #44]	; (1000f9a8 <iprintf+0x30>)
1000f97c:	b513      	push	{r0, r1, r4, lr}
1000f97e:	681c      	ldr	r4, [r3, #0]
1000f980:	2c00      	cmp	r4, #0
1000f982:	d005      	beq.n	1000f990 <iprintf+0x18>
1000f984:	69a3      	ldr	r3, [r4, #24]
1000f986:	2b00      	cmp	r3, #0
1000f988:	d102      	bne.n	1000f990 <iprintf+0x18>
1000f98a:	0020      	movs	r0, r4
1000f98c:	f000 fb46 	bl	1001001c <__sinit>
1000f990:	ab05      	add	r3, sp, #20
1000f992:	9a04      	ldr	r2, [sp, #16]
1000f994:	68a1      	ldr	r1, [r4, #8]
1000f996:	0020      	movs	r0, r4
1000f998:	9301      	str	r3, [sp, #4]
1000f99a:	f000 fd05 	bl	100103a8 <_vfiprintf_r>
1000f99e:	bc16      	pop	{r1, r2, r4}
1000f9a0:	bc08      	pop	{r3}
1000f9a2:	b004      	add	sp, #16
1000f9a4:	4718      	bx	r3
1000f9a6:	46c0      	nop			; (mov r8, r8)
1000f9a8:	10012410 	.word	0x10012410

1000f9ac <putchar>:
1000f9ac:	4b08      	ldr	r3, [pc, #32]	; (1000f9d0 <putchar+0x24>)
1000f9ae:	b570      	push	{r4, r5, r6, lr}
1000f9b0:	681c      	ldr	r4, [r3, #0]
1000f9b2:	0005      	movs	r5, r0
1000f9b4:	2c00      	cmp	r4, #0
1000f9b6:	d005      	beq.n	1000f9c4 <putchar+0x18>
1000f9b8:	69a3      	ldr	r3, [r4, #24]
1000f9ba:	2b00      	cmp	r3, #0
1000f9bc:	d102      	bne.n	1000f9c4 <putchar+0x18>
1000f9be:	0020      	movs	r0, r4
1000f9c0:	f000 fb2c 	bl	1001001c <__sinit>
1000f9c4:	0029      	movs	r1, r5
1000f9c6:	68a2      	ldr	r2, [r4, #8]
1000f9c8:	0020      	movs	r0, r4
1000f9ca:	f000 ff99 	bl	10010900 <_putc_r>
1000f9ce:	bd70      	pop	{r4, r5, r6, pc}
1000f9d0:	10012410 	.word	0x10012410

1000f9d4 <_puts_r>:
1000f9d4:	b570      	push	{r4, r5, r6, lr}
1000f9d6:	0005      	movs	r5, r0
1000f9d8:	000e      	movs	r6, r1
1000f9da:	2800      	cmp	r0, #0
1000f9dc:	d004      	beq.n	1000f9e8 <_puts_r+0x14>
1000f9de:	6983      	ldr	r3, [r0, #24]
1000f9e0:	2b00      	cmp	r3, #0
1000f9e2:	d101      	bne.n	1000f9e8 <_puts_r+0x14>
1000f9e4:	f000 fb1a 	bl	1001001c <__sinit>
1000f9e8:	69ab      	ldr	r3, [r5, #24]
1000f9ea:	68ac      	ldr	r4, [r5, #8]
1000f9ec:	2b00      	cmp	r3, #0
1000f9ee:	d102      	bne.n	1000f9f6 <_puts_r+0x22>
1000f9f0:	0028      	movs	r0, r5
1000f9f2:	f000 fb13 	bl	1001001c <__sinit>
1000f9f6:	4b25      	ldr	r3, [pc, #148]	; (1000fa8c <_puts_r+0xb8>)
1000f9f8:	429c      	cmp	r4, r3
1000f9fa:	d101      	bne.n	1000fa00 <_puts_r+0x2c>
1000f9fc:	686c      	ldr	r4, [r5, #4]
1000f9fe:	e008      	b.n	1000fa12 <_puts_r+0x3e>
1000fa00:	4b23      	ldr	r3, [pc, #140]	; (1000fa90 <_puts_r+0xbc>)
1000fa02:	429c      	cmp	r4, r3
1000fa04:	d101      	bne.n	1000fa0a <_puts_r+0x36>
1000fa06:	68ac      	ldr	r4, [r5, #8]
1000fa08:	e003      	b.n	1000fa12 <_puts_r+0x3e>
1000fa0a:	4b22      	ldr	r3, [pc, #136]	; (1000fa94 <_puts_r+0xc0>)
1000fa0c:	429c      	cmp	r4, r3
1000fa0e:	d100      	bne.n	1000fa12 <_puts_r+0x3e>
1000fa10:	68ec      	ldr	r4, [r5, #12]
1000fa12:	89a3      	ldrh	r3, [r4, #12]
1000fa14:	071b      	lsls	r3, r3, #28
1000fa16:	d502      	bpl.n	1000fa1e <_puts_r+0x4a>
1000fa18:	6923      	ldr	r3, [r4, #16]
1000fa1a:	2b00      	cmp	r3, #0
1000fa1c:	d111      	bne.n	1000fa42 <_puts_r+0x6e>
1000fa1e:	0021      	movs	r1, r4
1000fa20:	0028      	movs	r0, r5
1000fa22:	f000 f991 	bl	1000fd48 <__swsetup_r>
1000fa26:	2800      	cmp	r0, #0
1000fa28:	d00b      	beq.n	1000fa42 <_puts_r+0x6e>
1000fa2a:	2001      	movs	r0, #1
1000fa2c:	4240      	negs	r0, r0
1000fa2e:	e02b      	b.n	1000fa88 <_puts_r+0xb4>
1000fa30:	3b01      	subs	r3, #1
1000fa32:	3601      	adds	r6, #1
1000fa34:	60a3      	str	r3, [r4, #8]
1000fa36:	2b00      	cmp	r3, #0
1000fa38:	db08      	blt.n	1000fa4c <_puts_r+0x78>
1000fa3a:	6823      	ldr	r3, [r4, #0]
1000fa3c:	1c5a      	adds	r2, r3, #1
1000fa3e:	6022      	str	r2, [r4, #0]
1000fa40:	7019      	strb	r1, [r3, #0]
1000fa42:	7831      	ldrb	r1, [r6, #0]
1000fa44:	68a3      	ldr	r3, [r4, #8]
1000fa46:	2900      	cmp	r1, #0
1000fa48:	d1f2      	bne.n	1000fa30 <_puts_r+0x5c>
1000fa4a:	e00b      	b.n	1000fa64 <_puts_r+0x90>
1000fa4c:	69a2      	ldr	r2, [r4, #24]
1000fa4e:	4293      	cmp	r3, r2
1000fa50:	db01      	blt.n	1000fa56 <_puts_r+0x82>
1000fa52:	290a      	cmp	r1, #10
1000fa54:	d1f1      	bne.n	1000fa3a <_puts_r+0x66>
1000fa56:	0022      	movs	r2, r4
1000fa58:	0028      	movs	r0, r5
1000fa5a:	f000 f91d 	bl	1000fc98 <__swbuf_r>
1000fa5e:	1c43      	adds	r3, r0, #1
1000fa60:	d1ef      	bne.n	1000fa42 <_puts_r+0x6e>
1000fa62:	e7e2      	b.n	1000fa2a <_puts_r+0x56>
1000fa64:	3b01      	subs	r3, #1
1000fa66:	60a3      	str	r3, [r4, #8]
1000fa68:	2b00      	cmp	r3, #0
1000fa6a:	da08      	bge.n	1000fa7e <_puts_r+0xaa>
1000fa6c:	0022      	movs	r2, r4
1000fa6e:	310a      	adds	r1, #10
1000fa70:	0028      	movs	r0, r5
1000fa72:	f000 f911 	bl	1000fc98 <__swbuf_r>
1000fa76:	1c43      	adds	r3, r0, #1
1000fa78:	d0d7      	beq.n	1000fa2a <_puts_r+0x56>
1000fa7a:	200a      	movs	r0, #10
1000fa7c:	e004      	b.n	1000fa88 <_puts_r+0xb4>
1000fa7e:	200a      	movs	r0, #10
1000fa80:	6823      	ldr	r3, [r4, #0]
1000fa82:	1c5a      	adds	r2, r3, #1
1000fa84:	6022      	str	r2, [r4, #0]
1000fa86:	7018      	strb	r0, [r3, #0]
1000fa88:	bd70      	pop	{r4, r5, r6, pc}
1000fa8a:	46c0      	nop			; (mov r8, r8)
1000fa8c:	100122f4 	.word	0x100122f4
1000fa90:	10012314 	.word	0x10012314
1000fa94:	10012334 	.word	0x10012334

1000fa98 <puts>:
1000fa98:	b510      	push	{r4, lr}
1000fa9a:	4b03      	ldr	r3, [pc, #12]	; (1000faa8 <puts+0x10>)
1000fa9c:	0001      	movs	r1, r0
1000fa9e:	6818      	ldr	r0, [r3, #0]
1000faa0:	f7ff ff98 	bl	1000f9d4 <_puts_r>
1000faa4:	bd10      	pop	{r4, pc}
1000faa6:	46c0      	nop			; (mov r8, r8)
1000faa8:	10012410 	.word	0x10012410

1000faac <rand>:
1000faac:	4b15      	ldr	r3, [pc, #84]	; (1000fb04 <rand+0x58>)
1000faae:	b510      	push	{r4, lr}
1000fab0:	681c      	ldr	r4, [r3, #0]
1000fab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000fab4:	2b00      	cmp	r3, #0
1000fab6:	d115      	bne.n	1000fae4 <rand+0x38>
1000fab8:	2018      	movs	r0, #24
1000faba:	f000 fba7 	bl	1001020c <malloc>
1000fabe:	4b12      	ldr	r3, [pc, #72]	; (1000fb08 <rand+0x5c>)
1000fac0:	63a0      	str	r0, [r4, #56]	; 0x38
1000fac2:	8003      	strh	r3, [r0, #0]
1000fac4:	4b11      	ldr	r3, [pc, #68]	; (1000fb0c <rand+0x60>)
1000fac6:	2201      	movs	r2, #1
1000fac8:	8043      	strh	r3, [r0, #2]
1000faca:	4b11      	ldr	r3, [pc, #68]	; (1000fb10 <rand+0x64>)
1000facc:	8083      	strh	r3, [r0, #4]
1000face:	4b11      	ldr	r3, [pc, #68]	; (1000fb14 <rand+0x68>)
1000fad0:	80c3      	strh	r3, [r0, #6]
1000fad2:	4b11      	ldr	r3, [pc, #68]	; (1000fb18 <rand+0x6c>)
1000fad4:	8103      	strh	r3, [r0, #8]
1000fad6:	2305      	movs	r3, #5
1000fad8:	8143      	strh	r3, [r0, #10]
1000fada:	3306      	adds	r3, #6
1000fadc:	8183      	strh	r3, [r0, #12]
1000fade:	2300      	movs	r3, #0
1000fae0:	6102      	str	r2, [r0, #16]
1000fae2:	6143      	str	r3, [r0, #20]
1000fae4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1000fae6:	4a0d      	ldr	r2, [pc, #52]	; (1000fb1c <rand+0x70>)
1000fae8:	6920      	ldr	r0, [r4, #16]
1000faea:	6961      	ldr	r1, [r4, #20]
1000faec:	4b0c      	ldr	r3, [pc, #48]	; (1000fb20 <rand+0x74>)
1000faee:	f001 f819 	bl	10010b24 <__aeabi_lmul>
1000faf2:	2201      	movs	r2, #1
1000faf4:	2300      	movs	r3, #0
1000faf6:	1880      	adds	r0, r0, r2
1000faf8:	4159      	adcs	r1, r3
1000fafa:	6120      	str	r0, [r4, #16]
1000fafc:	6161      	str	r1, [r4, #20]
1000fafe:	0048      	lsls	r0, r1, #1
1000fb00:	0840      	lsrs	r0, r0, #1
1000fb02:	bd10      	pop	{r4, pc}
1000fb04:	10012410 	.word	0x10012410
1000fb08:	0000330e 	.word	0x0000330e
1000fb0c:	ffffabcd 	.word	0xffffabcd
1000fb10:	00001234 	.word	0x00001234
1000fb14:	ffffe66d 	.word	0xffffe66d
1000fb18:	ffffdeec 	.word	0xffffdeec
1000fb1c:	4c957f2d 	.word	0x4c957f2d
1000fb20:	5851f42d 	.word	0x5851f42d

1000fb24 <setbuf>:
1000fb24:	424a      	negs	r2, r1
1000fb26:	414a      	adcs	r2, r1
1000fb28:	2380      	movs	r3, #128	; 0x80
1000fb2a:	b510      	push	{r4, lr}
1000fb2c:	0052      	lsls	r2, r2, #1
1000fb2e:	00db      	lsls	r3, r3, #3
1000fb30:	f000 f802 	bl	1000fb38 <setvbuf>
1000fb34:	bd10      	pop	{r4, pc}
	...

1000fb38 <setvbuf>:
1000fb38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb3a:	001d      	movs	r5, r3
1000fb3c:	4b51      	ldr	r3, [pc, #324]	; (1000fc84 <setvbuf+0x14c>)
1000fb3e:	b085      	sub	sp, #20
1000fb40:	681e      	ldr	r6, [r3, #0]
1000fb42:	0004      	movs	r4, r0
1000fb44:	000f      	movs	r7, r1
1000fb46:	9200      	str	r2, [sp, #0]
1000fb48:	2e00      	cmp	r6, #0
1000fb4a:	d005      	beq.n	1000fb58 <setvbuf+0x20>
1000fb4c:	69b3      	ldr	r3, [r6, #24]
1000fb4e:	2b00      	cmp	r3, #0
1000fb50:	d102      	bne.n	1000fb58 <setvbuf+0x20>
1000fb52:	0030      	movs	r0, r6
1000fb54:	f000 fa62 	bl	1001001c <__sinit>
1000fb58:	4b4b      	ldr	r3, [pc, #300]	; (1000fc88 <setvbuf+0x150>)
1000fb5a:	429c      	cmp	r4, r3
1000fb5c:	d101      	bne.n	1000fb62 <setvbuf+0x2a>
1000fb5e:	6874      	ldr	r4, [r6, #4]
1000fb60:	e008      	b.n	1000fb74 <setvbuf+0x3c>
1000fb62:	4b4a      	ldr	r3, [pc, #296]	; (1000fc8c <setvbuf+0x154>)
1000fb64:	429c      	cmp	r4, r3
1000fb66:	d101      	bne.n	1000fb6c <setvbuf+0x34>
1000fb68:	68b4      	ldr	r4, [r6, #8]
1000fb6a:	e003      	b.n	1000fb74 <setvbuf+0x3c>
1000fb6c:	4b48      	ldr	r3, [pc, #288]	; (1000fc90 <setvbuf+0x158>)
1000fb6e:	429c      	cmp	r4, r3
1000fb70:	d100      	bne.n	1000fb74 <setvbuf+0x3c>
1000fb72:	68f4      	ldr	r4, [r6, #12]
1000fb74:	9b00      	ldr	r3, [sp, #0]
1000fb76:	2b02      	cmp	r3, #2
1000fb78:	d005      	beq.n	1000fb86 <setvbuf+0x4e>
1000fb7a:	2b01      	cmp	r3, #1
1000fb7c:	d900      	bls.n	1000fb80 <setvbuf+0x48>
1000fb7e:	e07c      	b.n	1000fc7a <setvbuf+0x142>
1000fb80:	2d00      	cmp	r5, #0
1000fb82:	da00      	bge.n	1000fb86 <setvbuf+0x4e>
1000fb84:	e079      	b.n	1000fc7a <setvbuf+0x142>
1000fb86:	0021      	movs	r1, r4
1000fb88:	0030      	movs	r0, r6
1000fb8a:	f000 f9d9 	bl	1000ff40 <_fflush_r>
1000fb8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fb90:	2900      	cmp	r1, #0
1000fb92:	d008      	beq.n	1000fba6 <setvbuf+0x6e>
1000fb94:	0023      	movs	r3, r4
1000fb96:	3344      	adds	r3, #68	; 0x44
1000fb98:	4299      	cmp	r1, r3
1000fb9a:	d002      	beq.n	1000fba2 <setvbuf+0x6a>
1000fb9c:	0030      	movs	r0, r6
1000fb9e:	f000 fb3f 	bl	10010220 <_free_r>
1000fba2:	2300      	movs	r3, #0
1000fba4:	6363      	str	r3, [r4, #52]	; 0x34
1000fba6:	2300      	movs	r3, #0
1000fba8:	61a3      	str	r3, [r4, #24]
1000fbaa:	6063      	str	r3, [r4, #4]
1000fbac:	89a3      	ldrh	r3, [r4, #12]
1000fbae:	061b      	lsls	r3, r3, #24
1000fbb0:	d503      	bpl.n	1000fbba <setvbuf+0x82>
1000fbb2:	6921      	ldr	r1, [r4, #16]
1000fbb4:	0030      	movs	r0, r6
1000fbb6:	f000 fb33 	bl	10010220 <_free_r>
1000fbba:	89a2      	ldrh	r2, [r4, #12]
1000fbbc:	4b35      	ldr	r3, [pc, #212]	; (1000fc94 <setvbuf+0x15c>)
1000fbbe:	4013      	ands	r3, r2
1000fbc0:	81a3      	strh	r3, [r4, #12]
1000fbc2:	9b00      	ldr	r3, [sp, #0]
1000fbc4:	2b02      	cmp	r3, #2
1000fbc6:	d021      	beq.n	1000fc0c <setvbuf+0xd4>
1000fbc8:	ab03      	add	r3, sp, #12
1000fbca:	aa02      	add	r2, sp, #8
1000fbcc:	0021      	movs	r1, r4
1000fbce:	0030      	movs	r0, r6
1000fbd0:	f000 fab8 	bl	10010144 <__swhatbuf_r>
1000fbd4:	89a3      	ldrh	r3, [r4, #12]
1000fbd6:	4318      	orrs	r0, r3
1000fbd8:	81a0      	strh	r0, [r4, #12]
1000fbda:	2d00      	cmp	r5, #0
1000fbdc:	d101      	bne.n	1000fbe2 <setvbuf+0xaa>
1000fbde:	9d02      	ldr	r5, [sp, #8]
1000fbe0:	e001      	b.n	1000fbe6 <setvbuf+0xae>
1000fbe2:	2f00      	cmp	r7, #0
1000fbe4:	d125      	bne.n	1000fc32 <setvbuf+0xfa>
1000fbe6:	0028      	movs	r0, r5
1000fbe8:	f000 fb10 	bl	1001020c <malloc>
1000fbec:	9501      	str	r5, [sp, #4]
1000fbee:	1e07      	subs	r7, r0, #0
1000fbf0:	d11a      	bne.n	1000fc28 <setvbuf+0xf0>
1000fbf2:	9b02      	ldr	r3, [sp, #8]
1000fbf4:	9301      	str	r3, [sp, #4]
1000fbf6:	42ab      	cmp	r3, r5
1000fbf8:	d102      	bne.n	1000fc00 <setvbuf+0xc8>
1000fbfa:	2001      	movs	r0, #1
1000fbfc:	4240      	negs	r0, r0
1000fbfe:	e006      	b.n	1000fc0e <setvbuf+0xd6>
1000fc00:	9801      	ldr	r0, [sp, #4]
1000fc02:	f000 fb03 	bl	1001020c <malloc>
1000fc06:	1e07      	subs	r7, r0, #0
1000fc08:	d10e      	bne.n	1000fc28 <setvbuf+0xf0>
1000fc0a:	e7f6      	b.n	1000fbfa <setvbuf+0xc2>
1000fc0c:	2000      	movs	r0, #0
1000fc0e:	2202      	movs	r2, #2
1000fc10:	89a3      	ldrh	r3, [r4, #12]
1000fc12:	4313      	orrs	r3, r2
1000fc14:	81a3      	strh	r3, [r4, #12]
1000fc16:	2300      	movs	r3, #0
1000fc18:	60a3      	str	r3, [r4, #8]
1000fc1a:	0023      	movs	r3, r4
1000fc1c:	3347      	adds	r3, #71	; 0x47
1000fc1e:	6023      	str	r3, [r4, #0]
1000fc20:	6123      	str	r3, [r4, #16]
1000fc22:	2301      	movs	r3, #1
1000fc24:	6163      	str	r3, [r4, #20]
1000fc26:	e02a      	b.n	1000fc7e <setvbuf+0x146>
1000fc28:	2280      	movs	r2, #128	; 0x80
1000fc2a:	89a3      	ldrh	r3, [r4, #12]
1000fc2c:	9d01      	ldr	r5, [sp, #4]
1000fc2e:	4313      	orrs	r3, r2
1000fc30:	81a3      	strh	r3, [r4, #12]
1000fc32:	69b3      	ldr	r3, [r6, #24]
1000fc34:	2b00      	cmp	r3, #0
1000fc36:	d102      	bne.n	1000fc3e <setvbuf+0x106>
1000fc38:	0030      	movs	r0, r6
1000fc3a:	f000 f9ef 	bl	1001001c <__sinit>
1000fc3e:	9b00      	ldr	r3, [sp, #0]
1000fc40:	2b01      	cmp	r3, #1
1000fc42:	d103      	bne.n	1000fc4c <setvbuf+0x114>
1000fc44:	89a3      	ldrh	r3, [r4, #12]
1000fc46:	9a00      	ldr	r2, [sp, #0]
1000fc48:	431a      	orrs	r2, r3
1000fc4a:	81a2      	strh	r2, [r4, #12]
1000fc4c:	2308      	movs	r3, #8
1000fc4e:	89a2      	ldrh	r2, [r4, #12]
1000fc50:	6027      	str	r7, [r4, #0]
1000fc52:	4013      	ands	r3, r2
1000fc54:	6127      	str	r7, [r4, #16]
1000fc56:	6165      	str	r5, [r4, #20]
1000fc58:	1e18      	subs	r0, r3, #0
1000fc5a:	d00c      	beq.n	1000fc76 <setvbuf+0x13e>
1000fc5c:	2301      	movs	r3, #1
1000fc5e:	401a      	ands	r2, r3
1000fc60:	2300      	movs	r3, #0
1000fc62:	1e10      	subs	r0, r2, #0
1000fc64:	4298      	cmp	r0, r3
1000fc66:	d004      	beq.n	1000fc72 <setvbuf+0x13a>
1000fc68:	426d      	negs	r5, r5
1000fc6a:	60a3      	str	r3, [r4, #8]
1000fc6c:	61a5      	str	r5, [r4, #24]
1000fc6e:	0018      	movs	r0, r3
1000fc70:	e005      	b.n	1000fc7e <setvbuf+0x146>
1000fc72:	60a5      	str	r5, [r4, #8]
1000fc74:	e003      	b.n	1000fc7e <setvbuf+0x146>
1000fc76:	60a3      	str	r3, [r4, #8]
1000fc78:	e001      	b.n	1000fc7e <setvbuf+0x146>
1000fc7a:	2001      	movs	r0, #1
1000fc7c:	4240      	negs	r0, r0
1000fc7e:	b005      	add	sp, #20
1000fc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc82:	46c0      	nop			; (mov r8, r8)
1000fc84:	10012410 	.word	0x10012410
1000fc88:	100122f4 	.word	0x100122f4
1000fc8c:	10012314 	.word	0x10012314
1000fc90:	10012334 	.word	0x10012334
1000fc94:	fffff35c 	.word	0xfffff35c

1000fc98 <__swbuf_r>:
1000fc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fc9a:	0005      	movs	r5, r0
1000fc9c:	000f      	movs	r7, r1
1000fc9e:	0014      	movs	r4, r2
1000fca0:	2800      	cmp	r0, #0
1000fca2:	d004      	beq.n	1000fcae <__swbuf_r+0x16>
1000fca4:	6983      	ldr	r3, [r0, #24]
1000fca6:	2b00      	cmp	r3, #0
1000fca8:	d101      	bne.n	1000fcae <__swbuf_r+0x16>
1000fcaa:	f000 f9b7 	bl	1001001c <__sinit>
1000fcae:	4b23      	ldr	r3, [pc, #140]	; (1000fd3c <__swbuf_r+0xa4>)
1000fcb0:	429c      	cmp	r4, r3
1000fcb2:	d101      	bne.n	1000fcb8 <__swbuf_r+0x20>
1000fcb4:	686c      	ldr	r4, [r5, #4]
1000fcb6:	e008      	b.n	1000fcca <__swbuf_r+0x32>
1000fcb8:	4b21      	ldr	r3, [pc, #132]	; (1000fd40 <__swbuf_r+0xa8>)
1000fcba:	429c      	cmp	r4, r3
1000fcbc:	d101      	bne.n	1000fcc2 <__swbuf_r+0x2a>
1000fcbe:	68ac      	ldr	r4, [r5, #8]
1000fcc0:	e003      	b.n	1000fcca <__swbuf_r+0x32>
1000fcc2:	4b20      	ldr	r3, [pc, #128]	; (1000fd44 <__swbuf_r+0xac>)
1000fcc4:	429c      	cmp	r4, r3
1000fcc6:	d100      	bne.n	1000fcca <__swbuf_r+0x32>
1000fcc8:	68ec      	ldr	r4, [r5, #12]
1000fcca:	69a3      	ldr	r3, [r4, #24]
1000fccc:	60a3      	str	r3, [r4, #8]
1000fcce:	89a3      	ldrh	r3, [r4, #12]
1000fcd0:	071b      	lsls	r3, r3, #28
1000fcd2:	d50a      	bpl.n	1000fcea <__swbuf_r+0x52>
1000fcd4:	6923      	ldr	r3, [r4, #16]
1000fcd6:	2b00      	cmp	r3, #0
1000fcd8:	d007      	beq.n	1000fcea <__swbuf_r+0x52>
1000fcda:	6823      	ldr	r3, [r4, #0]
1000fcdc:	6922      	ldr	r2, [r4, #16]
1000fcde:	b2fe      	uxtb	r6, r7
1000fce0:	1a98      	subs	r0, r3, r2
1000fce2:	6963      	ldr	r3, [r4, #20]
1000fce4:	4298      	cmp	r0, r3
1000fce6:	db0f      	blt.n	1000fd08 <__swbuf_r+0x70>
1000fce8:	e008      	b.n	1000fcfc <__swbuf_r+0x64>
1000fcea:	0021      	movs	r1, r4
1000fcec:	0028      	movs	r0, r5
1000fcee:	f000 f82b 	bl	1000fd48 <__swsetup_r>
1000fcf2:	2800      	cmp	r0, #0
1000fcf4:	d0f1      	beq.n	1000fcda <__swbuf_r+0x42>
1000fcf6:	2001      	movs	r0, #1
1000fcf8:	4240      	negs	r0, r0
1000fcfa:	e01d      	b.n	1000fd38 <__swbuf_r+0xa0>
1000fcfc:	0021      	movs	r1, r4
1000fcfe:	0028      	movs	r0, r5
1000fd00:	f000 f91e 	bl	1000ff40 <_fflush_r>
1000fd04:	2800      	cmp	r0, #0
1000fd06:	d1f6      	bne.n	1000fcf6 <__swbuf_r+0x5e>
1000fd08:	68a3      	ldr	r3, [r4, #8]
1000fd0a:	3001      	adds	r0, #1
1000fd0c:	3b01      	subs	r3, #1
1000fd0e:	60a3      	str	r3, [r4, #8]
1000fd10:	6823      	ldr	r3, [r4, #0]
1000fd12:	1c5a      	adds	r2, r3, #1
1000fd14:	6022      	str	r2, [r4, #0]
1000fd16:	701f      	strb	r7, [r3, #0]
1000fd18:	6963      	ldr	r3, [r4, #20]
1000fd1a:	4298      	cmp	r0, r3
1000fd1c:	d005      	beq.n	1000fd2a <__swbuf_r+0x92>
1000fd1e:	89a3      	ldrh	r3, [r4, #12]
1000fd20:	0030      	movs	r0, r6
1000fd22:	07db      	lsls	r3, r3, #31
1000fd24:	d508      	bpl.n	1000fd38 <__swbuf_r+0xa0>
1000fd26:	2e0a      	cmp	r6, #10
1000fd28:	d106      	bne.n	1000fd38 <__swbuf_r+0xa0>
1000fd2a:	0021      	movs	r1, r4
1000fd2c:	0028      	movs	r0, r5
1000fd2e:	f000 f907 	bl	1000ff40 <_fflush_r>
1000fd32:	2800      	cmp	r0, #0
1000fd34:	d1df      	bne.n	1000fcf6 <__swbuf_r+0x5e>
1000fd36:	0030      	movs	r0, r6
1000fd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fd3a:	46c0      	nop			; (mov r8, r8)
1000fd3c:	100122f4 	.word	0x100122f4
1000fd40:	10012314 	.word	0x10012314
1000fd44:	10012334 	.word	0x10012334

1000fd48 <__swsetup_r>:
1000fd48:	4b36      	ldr	r3, [pc, #216]	; (1000fe24 <__swsetup_r+0xdc>)
1000fd4a:	b570      	push	{r4, r5, r6, lr}
1000fd4c:	681d      	ldr	r5, [r3, #0]
1000fd4e:	0006      	movs	r6, r0
1000fd50:	000c      	movs	r4, r1
1000fd52:	2d00      	cmp	r5, #0
1000fd54:	d005      	beq.n	1000fd62 <__swsetup_r+0x1a>
1000fd56:	69ab      	ldr	r3, [r5, #24]
1000fd58:	2b00      	cmp	r3, #0
1000fd5a:	d102      	bne.n	1000fd62 <__swsetup_r+0x1a>
1000fd5c:	0028      	movs	r0, r5
1000fd5e:	f000 f95d 	bl	1001001c <__sinit>
1000fd62:	4b31      	ldr	r3, [pc, #196]	; (1000fe28 <__swsetup_r+0xe0>)
1000fd64:	429c      	cmp	r4, r3
1000fd66:	d101      	bne.n	1000fd6c <__swsetup_r+0x24>
1000fd68:	686c      	ldr	r4, [r5, #4]
1000fd6a:	e008      	b.n	1000fd7e <__swsetup_r+0x36>
1000fd6c:	4b2f      	ldr	r3, [pc, #188]	; (1000fe2c <__swsetup_r+0xe4>)
1000fd6e:	429c      	cmp	r4, r3
1000fd70:	d101      	bne.n	1000fd76 <__swsetup_r+0x2e>
1000fd72:	68ac      	ldr	r4, [r5, #8]
1000fd74:	e003      	b.n	1000fd7e <__swsetup_r+0x36>
1000fd76:	4b2e      	ldr	r3, [pc, #184]	; (1000fe30 <__swsetup_r+0xe8>)
1000fd78:	429c      	cmp	r4, r3
1000fd7a:	d100      	bne.n	1000fd7e <__swsetup_r+0x36>
1000fd7c:	68ec      	ldr	r4, [r5, #12]
1000fd7e:	220c      	movs	r2, #12
1000fd80:	5ea3      	ldrsh	r3, [r4, r2]
1000fd82:	b29a      	uxth	r2, r3
1000fd84:	0711      	lsls	r1, r2, #28
1000fd86:	d423      	bmi.n	1000fdd0 <__swsetup_r+0x88>
1000fd88:	06d1      	lsls	r1, r2, #27
1000fd8a:	d407      	bmi.n	1000fd9c <__swsetup_r+0x54>
1000fd8c:	2209      	movs	r2, #9
1000fd8e:	2001      	movs	r0, #1
1000fd90:	6032      	str	r2, [r6, #0]
1000fd92:	3237      	adds	r2, #55	; 0x37
1000fd94:	4313      	orrs	r3, r2
1000fd96:	81a3      	strh	r3, [r4, #12]
1000fd98:	4240      	negs	r0, r0
1000fd9a:	e042      	b.n	1000fe22 <__swsetup_r+0xda>
1000fd9c:	0753      	lsls	r3, r2, #29
1000fd9e:	d513      	bpl.n	1000fdc8 <__swsetup_r+0x80>
1000fda0:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fda2:	2900      	cmp	r1, #0
1000fda4:	d008      	beq.n	1000fdb8 <__swsetup_r+0x70>
1000fda6:	0023      	movs	r3, r4
1000fda8:	3344      	adds	r3, #68	; 0x44
1000fdaa:	4299      	cmp	r1, r3
1000fdac:	d002      	beq.n	1000fdb4 <__swsetup_r+0x6c>
1000fdae:	0030      	movs	r0, r6
1000fdb0:	f000 fa36 	bl	10010220 <_free_r>
1000fdb4:	2300      	movs	r3, #0
1000fdb6:	6363      	str	r3, [r4, #52]	; 0x34
1000fdb8:	2224      	movs	r2, #36	; 0x24
1000fdba:	89a3      	ldrh	r3, [r4, #12]
1000fdbc:	4393      	bics	r3, r2
1000fdbe:	81a3      	strh	r3, [r4, #12]
1000fdc0:	2300      	movs	r3, #0
1000fdc2:	6063      	str	r3, [r4, #4]
1000fdc4:	6923      	ldr	r3, [r4, #16]
1000fdc6:	6023      	str	r3, [r4, #0]
1000fdc8:	2208      	movs	r2, #8
1000fdca:	89a3      	ldrh	r3, [r4, #12]
1000fdcc:	4313      	orrs	r3, r2
1000fdce:	81a3      	strh	r3, [r4, #12]
1000fdd0:	6923      	ldr	r3, [r4, #16]
1000fdd2:	2b00      	cmp	r3, #0
1000fdd4:	d10b      	bne.n	1000fdee <__swsetup_r+0xa6>
1000fdd6:	23a0      	movs	r3, #160	; 0xa0
1000fdd8:	89a2      	ldrh	r2, [r4, #12]
1000fdda:	009b      	lsls	r3, r3, #2
1000fddc:	4013      	ands	r3, r2
1000fdde:	2280      	movs	r2, #128	; 0x80
1000fde0:	0092      	lsls	r2, r2, #2
1000fde2:	4293      	cmp	r3, r2
1000fde4:	d003      	beq.n	1000fdee <__swsetup_r+0xa6>
1000fde6:	0021      	movs	r1, r4
1000fde8:	0030      	movs	r0, r6
1000fdea:	f000 f9d1 	bl	10010190 <__smakebuf_r>
1000fdee:	2301      	movs	r3, #1
1000fdf0:	89a2      	ldrh	r2, [r4, #12]
1000fdf2:	4013      	ands	r3, r2
1000fdf4:	d005      	beq.n	1000fe02 <__swsetup_r+0xba>
1000fdf6:	2300      	movs	r3, #0
1000fdf8:	60a3      	str	r3, [r4, #8]
1000fdfa:	6963      	ldr	r3, [r4, #20]
1000fdfc:	425b      	negs	r3, r3
1000fdfe:	61a3      	str	r3, [r4, #24]
1000fe00:	e003      	b.n	1000fe0a <__swsetup_r+0xc2>
1000fe02:	0792      	lsls	r2, r2, #30
1000fe04:	d400      	bmi.n	1000fe08 <__swsetup_r+0xc0>
1000fe06:	6963      	ldr	r3, [r4, #20]
1000fe08:	60a3      	str	r3, [r4, #8]
1000fe0a:	2000      	movs	r0, #0
1000fe0c:	6923      	ldr	r3, [r4, #16]
1000fe0e:	4283      	cmp	r3, r0
1000fe10:	d107      	bne.n	1000fe22 <__swsetup_r+0xda>
1000fe12:	220c      	movs	r2, #12
1000fe14:	5ea3      	ldrsh	r3, [r4, r2]
1000fe16:	061a      	lsls	r2, r3, #24
1000fe18:	d503      	bpl.n	1000fe22 <__swsetup_r+0xda>
1000fe1a:	2240      	movs	r2, #64	; 0x40
1000fe1c:	4313      	orrs	r3, r2
1000fe1e:	81a3      	strh	r3, [r4, #12]
1000fe20:	3801      	subs	r0, #1
1000fe22:	bd70      	pop	{r4, r5, r6, pc}
1000fe24:	10012410 	.word	0x10012410
1000fe28:	100122f4 	.word	0x100122f4
1000fe2c:	10012314 	.word	0x10012314
1000fe30:	10012334 	.word	0x10012334

1000fe34 <__sflush_r>:
1000fe34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe36:	898a      	ldrh	r2, [r1, #12]
1000fe38:	0005      	movs	r5, r0
1000fe3a:	000c      	movs	r4, r1
1000fe3c:	0713      	lsls	r3, r2, #28
1000fe3e:	d45a      	bmi.n	1000fef6 <__sflush_r+0xc2>
1000fe40:	684b      	ldr	r3, [r1, #4]
1000fe42:	2b00      	cmp	r3, #0
1000fe44:	dc02      	bgt.n	1000fe4c <__sflush_r+0x18>
1000fe46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000fe48:	2b00      	cmp	r3, #0
1000fe4a:	dd19      	ble.n	1000fe80 <__sflush_r+0x4c>
1000fe4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fe4e:	2f00      	cmp	r7, #0
1000fe50:	d016      	beq.n	1000fe80 <__sflush_r+0x4c>
1000fe52:	2300      	movs	r3, #0
1000fe54:	682e      	ldr	r6, [r5, #0]
1000fe56:	602b      	str	r3, [r5, #0]
1000fe58:	2380      	movs	r3, #128	; 0x80
1000fe5a:	015b      	lsls	r3, r3, #5
1000fe5c:	401a      	ands	r2, r3
1000fe5e:	d001      	beq.n	1000fe64 <__sflush_r+0x30>
1000fe60:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000fe62:	e014      	b.n	1000fe8e <__sflush_r+0x5a>
1000fe64:	2301      	movs	r3, #1
1000fe66:	6a21      	ldr	r1, [r4, #32]
1000fe68:	0028      	movs	r0, r5
1000fe6a:	47b8      	blx	r7
1000fe6c:	1c43      	adds	r3, r0, #1
1000fe6e:	d10e      	bne.n	1000fe8e <__sflush_r+0x5a>
1000fe70:	682b      	ldr	r3, [r5, #0]
1000fe72:	2b00      	cmp	r3, #0
1000fe74:	d00b      	beq.n	1000fe8e <__sflush_r+0x5a>
1000fe76:	2b1d      	cmp	r3, #29
1000fe78:	d001      	beq.n	1000fe7e <__sflush_r+0x4a>
1000fe7a:	2b16      	cmp	r3, #22
1000fe7c:	d102      	bne.n	1000fe84 <__sflush_r+0x50>
1000fe7e:	602e      	str	r6, [r5, #0]
1000fe80:	2000      	movs	r0, #0
1000fe82:	e05a      	b.n	1000ff3a <__sflush_r+0x106>
1000fe84:	2240      	movs	r2, #64	; 0x40
1000fe86:	89a3      	ldrh	r3, [r4, #12]
1000fe88:	4313      	orrs	r3, r2
1000fe8a:	81a3      	strh	r3, [r4, #12]
1000fe8c:	e055      	b.n	1000ff3a <__sflush_r+0x106>
1000fe8e:	89a3      	ldrh	r3, [r4, #12]
1000fe90:	075b      	lsls	r3, r3, #29
1000fe92:	d506      	bpl.n	1000fea2 <__sflush_r+0x6e>
1000fe94:	6863      	ldr	r3, [r4, #4]
1000fe96:	1ac0      	subs	r0, r0, r3
1000fe98:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000fe9a:	2b00      	cmp	r3, #0
1000fe9c:	d001      	beq.n	1000fea2 <__sflush_r+0x6e>
1000fe9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000fea0:	1ac0      	subs	r0, r0, r3
1000fea2:	2300      	movs	r3, #0
1000fea4:	0002      	movs	r2, r0
1000fea6:	6a21      	ldr	r1, [r4, #32]
1000fea8:	0028      	movs	r0, r5
1000feaa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000feac:	47b8      	blx	r7
1000feae:	89a3      	ldrh	r3, [r4, #12]
1000feb0:	1c42      	adds	r2, r0, #1
1000feb2:	d106      	bne.n	1000fec2 <__sflush_r+0x8e>
1000feb4:	6829      	ldr	r1, [r5, #0]
1000feb6:	291d      	cmp	r1, #29
1000feb8:	d83a      	bhi.n	1000ff30 <__sflush_r+0xfc>
1000feba:	4a20      	ldr	r2, [pc, #128]	; (1000ff3c <__sflush_r+0x108>)
1000febc:	40ca      	lsrs	r2, r1
1000febe:	07d2      	lsls	r2, r2, #31
1000fec0:	d536      	bpl.n	1000ff30 <__sflush_r+0xfc>
1000fec2:	2200      	movs	r2, #0
1000fec4:	6062      	str	r2, [r4, #4]
1000fec6:	6922      	ldr	r2, [r4, #16]
1000fec8:	6022      	str	r2, [r4, #0]
1000feca:	04db      	lsls	r3, r3, #19
1000fecc:	d505      	bpl.n	1000feda <__sflush_r+0xa6>
1000fece:	1c43      	adds	r3, r0, #1
1000fed0:	d102      	bne.n	1000fed8 <__sflush_r+0xa4>
1000fed2:	682b      	ldr	r3, [r5, #0]
1000fed4:	2b00      	cmp	r3, #0
1000fed6:	d100      	bne.n	1000feda <__sflush_r+0xa6>
1000fed8:	6560      	str	r0, [r4, #84]	; 0x54
1000feda:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fedc:	602e      	str	r6, [r5, #0]
1000fede:	2900      	cmp	r1, #0
1000fee0:	d0ce      	beq.n	1000fe80 <__sflush_r+0x4c>
1000fee2:	0023      	movs	r3, r4
1000fee4:	3344      	adds	r3, #68	; 0x44
1000fee6:	4299      	cmp	r1, r3
1000fee8:	d002      	beq.n	1000fef0 <__sflush_r+0xbc>
1000feea:	0028      	movs	r0, r5
1000feec:	f000 f998 	bl	10010220 <_free_r>
1000fef0:	2000      	movs	r0, #0
1000fef2:	6360      	str	r0, [r4, #52]	; 0x34
1000fef4:	e021      	b.n	1000ff3a <__sflush_r+0x106>
1000fef6:	690f      	ldr	r7, [r1, #16]
1000fef8:	2f00      	cmp	r7, #0
1000fefa:	d0c1      	beq.n	1000fe80 <__sflush_r+0x4c>
1000fefc:	680b      	ldr	r3, [r1, #0]
1000fefe:	600f      	str	r7, [r1, #0]
1000ff00:	1bdb      	subs	r3, r3, r7
1000ff02:	9301      	str	r3, [sp, #4]
1000ff04:	2300      	movs	r3, #0
1000ff06:	0792      	lsls	r2, r2, #30
1000ff08:	d100      	bne.n	1000ff0c <__sflush_r+0xd8>
1000ff0a:	694b      	ldr	r3, [r1, #20]
1000ff0c:	60a3      	str	r3, [r4, #8]
1000ff0e:	e003      	b.n	1000ff18 <__sflush_r+0xe4>
1000ff10:	9b01      	ldr	r3, [sp, #4]
1000ff12:	183f      	adds	r7, r7, r0
1000ff14:	1a1b      	subs	r3, r3, r0
1000ff16:	9301      	str	r3, [sp, #4]
1000ff18:	9b01      	ldr	r3, [sp, #4]
1000ff1a:	2b00      	cmp	r3, #0
1000ff1c:	ddb0      	ble.n	1000fe80 <__sflush_r+0x4c>
1000ff1e:	9b01      	ldr	r3, [sp, #4]
1000ff20:	003a      	movs	r2, r7
1000ff22:	6a21      	ldr	r1, [r4, #32]
1000ff24:	0028      	movs	r0, r5
1000ff26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000ff28:	47b0      	blx	r6
1000ff2a:	2800      	cmp	r0, #0
1000ff2c:	dcf0      	bgt.n	1000ff10 <__sflush_r+0xdc>
1000ff2e:	89a3      	ldrh	r3, [r4, #12]
1000ff30:	2240      	movs	r2, #64	; 0x40
1000ff32:	2001      	movs	r0, #1
1000ff34:	4313      	orrs	r3, r2
1000ff36:	81a3      	strh	r3, [r4, #12]
1000ff38:	4240      	negs	r0, r0
1000ff3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ff3c:	20400001 	.word	0x20400001

1000ff40 <_fflush_r>:
1000ff40:	690b      	ldr	r3, [r1, #16]
1000ff42:	b570      	push	{r4, r5, r6, lr}
1000ff44:	0005      	movs	r5, r0
1000ff46:	000c      	movs	r4, r1
1000ff48:	2b00      	cmp	r3, #0
1000ff4a:	d101      	bne.n	1000ff50 <_fflush_r+0x10>
1000ff4c:	2000      	movs	r0, #0
1000ff4e:	e01c      	b.n	1000ff8a <_fflush_r+0x4a>
1000ff50:	2800      	cmp	r0, #0
1000ff52:	d004      	beq.n	1000ff5e <_fflush_r+0x1e>
1000ff54:	6983      	ldr	r3, [r0, #24]
1000ff56:	2b00      	cmp	r3, #0
1000ff58:	d101      	bne.n	1000ff5e <_fflush_r+0x1e>
1000ff5a:	f000 f85f 	bl	1001001c <__sinit>
1000ff5e:	4b0b      	ldr	r3, [pc, #44]	; (1000ff8c <_fflush_r+0x4c>)
1000ff60:	429c      	cmp	r4, r3
1000ff62:	d101      	bne.n	1000ff68 <_fflush_r+0x28>
1000ff64:	686c      	ldr	r4, [r5, #4]
1000ff66:	e008      	b.n	1000ff7a <_fflush_r+0x3a>
1000ff68:	4b09      	ldr	r3, [pc, #36]	; (1000ff90 <_fflush_r+0x50>)
1000ff6a:	429c      	cmp	r4, r3
1000ff6c:	d101      	bne.n	1000ff72 <_fflush_r+0x32>
1000ff6e:	68ac      	ldr	r4, [r5, #8]
1000ff70:	e003      	b.n	1000ff7a <_fflush_r+0x3a>
1000ff72:	4b08      	ldr	r3, [pc, #32]	; (1000ff94 <_fflush_r+0x54>)
1000ff74:	429c      	cmp	r4, r3
1000ff76:	d100      	bne.n	1000ff7a <_fflush_r+0x3a>
1000ff78:	68ec      	ldr	r4, [r5, #12]
1000ff7a:	220c      	movs	r2, #12
1000ff7c:	5ea3      	ldrsh	r3, [r4, r2]
1000ff7e:	2b00      	cmp	r3, #0
1000ff80:	d0e4      	beq.n	1000ff4c <_fflush_r+0xc>
1000ff82:	0021      	movs	r1, r4
1000ff84:	0028      	movs	r0, r5
1000ff86:	f7ff ff55 	bl	1000fe34 <__sflush_r>
1000ff8a:	bd70      	pop	{r4, r5, r6, pc}
1000ff8c:	100122f4 	.word	0x100122f4
1000ff90:	10012314 	.word	0x10012314
1000ff94:	10012334 	.word	0x10012334

1000ff98 <_cleanup_r>:
1000ff98:	b510      	push	{r4, lr}
1000ff9a:	4902      	ldr	r1, [pc, #8]	; (1000ffa4 <_cleanup_r+0xc>)
1000ff9c:	f000 f8b0 	bl	10010100 <_fwalk_reent>
1000ffa0:	bd10      	pop	{r4, pc}
1000ffa2:	46c0      	nop			; (mov r8, r8)
1000ffa4:	1000ff41 	.word	0x1000ff41

1000ffa8 <std.isra.0>:
1000ffa8:	2300      	movs	r3, #0
1000ffaa:	b510      	push	{r4, lr}
1000ffac:	0004      	movs	r4, r0
1000ffae:	6003      	str	r3, [r0, #0]
1000ffb0:	6043      	str	r3, [r0, #4]
1000ffb2:	6083      	str	r3, [r0, #8]
1000ffb4:	8181      	strh	r1, [r0, #12]
1000ffb6:	6643      	str	r3, [r0, #100]	; 0x64
1000ffb8:	81c2      	strh	r2, [r0, #14]
1000ffba:	6103      	str	r3, [r0, #16]
1000ffbc:	6143      	str	r3, [r0, #20]
1000ffbe:	6183      	str	r3, [r0, #24]
1000ffc0:	0019      	movs	r1, r3
1000ffc2:	2208      	movs	r2, #8
1000ffc4:	305c      	adds	r0, #92	; 0x5c
1000ffc6:	f7ff fccf 	bl	1000f968 <memset>
1000ffca:	4b05      	ldr	r3, [pc, #20]	; (1000ffe0 <std.isra.0+0x38>)
1000ffcc:	6224      	str	r4, [r4, #32]
1000ffce:	6263      	str	r3, [r4, #36]	; 0x24
1000ffd0:	4b04      	ldr	r3, [pc, #16]	; (1000ffe4 <std.isra.0+0x3c>)
1000ffd2:	62a3      	str	r3, [r4, #40]	; 0x28
1000ffd4:	4b04      	ldr	r3, [pc, #16]	; (1000ffe8 <std.isra.0+0x40>)
1000ffd6:	62e3      	str	r3, [r4, #44]	; 0x2c
1000ffd8:	4b04      	ldr	r3, [pc, #16]	; (1000ffec <std.isra.0+0x44>)
1000ffda:	6323      	str	r3, [r4, #48]	; 0x30
1000ffdc:	bd10      	pop	{r4, pc}
1000ffde:	46c0      	nop			; (mov r8, r8)
1000ffe0:	10010991 	.word	0x10010991
1000ffe4:	100109b9 	.word	0x100109b9
1000ffe8:	100109f1 	.word	0x100109f1
1000ffec:	10010a1d 	.word	0x10010a1d

1000fff0 <__sfmoreglue>:
1000fff0:	b570      	push	{r4, r5, r6, lr}
1000fff2:	2568      	movs	r5, #104	; 0x68
1000fff4:	1e4b      	subs	r3, r1, #1
1000fff6:	435d      	muls	r5, r3
1000fff8:	000e      	movs	r6, r1
1000fffa:	0029      	movs	r1, r5
1000fffc:	3174      	adds	r1, #116	; 0x74
1000fffe:	f000 f955 	bl	100102ac <_malloc_r>
10010002:	1e04      	subs	r4, r0, #0
10010004:	d008      	beq.n	10010018 <__sfmoreglue+0x28>
10010006:	2100      	movs	r1, #0
10010008:	002a      	movs	r2, r5
1001000a:	6001      	str	r1, [r0, #0]
1001000c:	6046      	str	r6, [r0, #4]
1001000e:	300c      	adds	r0, #12
10010010:	60a0      	str	r0, [r4, #8]
10010012:	3268      	adds	r2, #104	; 0x68
10010014:	f7ff fca8 	bl	1000f968 <memset>
10010018:	0020      	movs	r0, r4
1001001a:	bd70      	pop	{r4, r5, r6, pc}

1001001c <__sinit>:
1001001c:	6983      	ldr	r3, [r0, #24]
1001001e:	b513      	push	{r0, r1, r4, lr}
10010020:	0004      	movs	r4, r0
10010022:	2b00      	cmp	r3, #0
10010024:	d128      	bne.n	10010078 <__sinit+0x5c>
10010026:	6483      	str	r3, [r0, #72]	; 0x48
10010028:	64c3      	str	r3, [r0, #76]	; 0x4c
1001002a:	6503      	str	r3, [r0, #80]	; 0x50
1001002c:	4b13      	ldr	r3, [pc, #76]	; (1001007c <__sinit+0x60>)
1001002e:	4a14      	ldr	r2, [pc, #80]	; (10010080 <__sinit+0x64>)
10010030:	681b      	ldr	r3, [r3, #0]
10010032:	6282      	str	r2, [r0, #40]	; 0x28
10010034:	9301      	str	r3, [sp, #4]
10010036:	4298      	cmp	r0, r3
10010038:	d101      	bne.n	1001003e <__sinit+0x22>
1001003a:	2301      	movs	r3, #1
1001003c:	6183      	str	r3, [r0, #24]
1001003e:	0020      	movs	r0, r4
10010040:	f000 f820 	bl	10010084 <__sfp>
10010044:	6060      	str	r0, [r4, #4]
10010046:	0020      	movs	r0, r4
10010048:	f000 f81c 	bl	10010084 <__sfp>
1001004c:	60a0      	str	r0, [r4, #8]
1001004e:	0020      	movs	r0, r4
10010050:	f000 f818 	bl	10010084 <__sfp>
10010054:	2200      	movs	r2, #0
10010056:	60e0      	str	r0, [r4, #12]
10010058:	2104      	movs	r1, #4
1001005a:	6860      	ldr	r0, [r4, #4]
1001005c:	f7ff ffa4 	bl	1000ffa8 <std.isra.0>
10010060:	2201      	movs	r2, #1
10010062:	2109      	movs	r1, #9
10010064:	68a0      	ldr	r0, [r4, #8]
10010066:	f7ff ff9f 	bl	1000ffa8 <std.isra.0>
1001006a:	2202      	movs	r2, #2
1001006c:	2112      	movs	r1, #18
1001006e:	68e0      	ldr	r0, [r4, #12]
10010070:	f7ff ff9a 	bl	1000ffa8 <std.isra.0>
10010074:	2301      	movs	r3, #1
10010076:	61a3      	str	r3, [r4, #24]
10010078:	bd13      	pop	{r0, r1, r4, pc}
1001007a:	46c0      	nop			; (mov r8, r8)
1001007c:	100122f0 	.word	0x100122f0
10010080:	1000ff99 	.word	0x1000ff99

10010084 <__sfp>:
10010084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010086:	4b1d      	ldr	r3, [pc, #116]	; (100100fc <__sfp+0x78>)
10010088:	0006      	movs	r6, r0
1001008a:	681d      	ldr	r5, [r3, #0]
1001008c:	69ab      	ldr	r3, [r5, #24]
1001008e:	2b00      	cmp	r3, #0
10010090:	d102      	bne.n	10010098 <__sfp+0x14>
10010092:	0028      	movs	r0, r5
10010094:	f7ff ffc2 	bl	1001001c <__sinit>
10010098:	3548      	adds	r5, #72	; 0x48
1001009a:	68ac      	ldr	r4, [r5, #8]
1001009c:	686b      	ldr	r3, [r5, #4]
1001009e:	3b01      	subs	r3, #1
100100a0:	d405      	bmi.n	100100ae <__sfp+0x2a>
100100a2:	220c      	movs	r2, #12
100100a4:	5ea7      	ldrsh	r7, [r4, r2]
100100a6:	2f00      	cmp	r7, #0
100100a8:	d010      	beq.n	100100cc <__sfp+0x48>
100100aa:	3468      	adds	r4, #104	; 0x68
100100ac:	e7f7      	b.n	1001009e <__sfp+0x1a>
100100ae:	682b      	ldr	r3, [r5, #0]
100100b0:	2b00      	cmp	r3, #0
100100b2:	d001      	beq.n	100100b8 <__sfp+0x34>
100100b4:	682d      	ldr	r5, [r5, #0]
100100b6:	e7f0      	b.n	1001009a <__sfp+0x16>
100100b8:	2104      	movs	r1, #4
100100ba:	0030      	movs	r0, r6
100100bc:	f7ff ff98 	bl	1000fff0 <__sfmoreglue>
100100c0:	6028      	str	r0, [r5, #0]
100100c2:	2800      	cmp	r0, #0
100100c4:	d1f6      	bne.n	100100b4 <__sfp+0x30>
100100c6:	230c      	movs	r3, #12
100100c8:	6033      	str	r3, [r6, #0]
100100ca:	e016      	b.n	100100fa <__sfp+0x76>
100100cc:	2301      	movs	r3, #1
100100ce:	0020      	movs	r0, r4
100100d0:	425b      	negs	r3, r3
100100d2:	81e3      	strh	r3, [r4, #14]
100100d4:	3302      	adds	r3, #2
100100d6:	81a3      	strh	r3, [r4, #12]
100100d8:	6667      	str	r7, [r4, #100]	; 0x64
100100da:	6027      	str	r7, [r4, #0]
100100dc:	60a7      	str	r7, [r4, #8]
100100de:	6067      	str	r7, [r4, #4]
100100e0:	6127      	str	r7, [r4, #16]
100100e2:	6167      	str	r7, [r4, #20]
100100e4:	61a7      	str	r7, [r4, #24]
100100e6:	305c      	adds	r0, #92	; 0x5c
100100e8:	2208      	movs	r2, #8
100100ea:	0039      	movs	r1, r7
100100ec:	f7ff fc3c 	bl	1000f968 <memset>
100100f0:	0020      	movs	r0, r4
100100f2:	6367      	str	r7, [r4, #52]	; 0x34
100100f4:	63a7      	str	r7, [r4, #56]	; 0x38
100100f6:	64a7      	str	r7, [r4, #72]	; 0x48
100100f8:	64e7      	str	r7, [r4, #76]	; 0x4c
100100fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100100fc:	100122f0 	.word	0x100122f0

10010100 <_fwalk_reent>:
10010100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010102:	0004      	movs	r4, r0
10010104:	0007      	movs	r7, r0
10010106:	2600      	movs	r6, #0
10010108:	9101      	str	r1, [sp, #4]
1001010a:	3448      	adds	r4, #72	; 0x48
1001010c:	2c00      	cmp	r4, #0
1001010e:	d016      	beq.n	1001013e <_fwalk_reent+0x3e>
10010110:	6863      	ldr	r3, [r4, #4]
10010112:	68a5      	ldr	r5, [r4, #8]
10010114:	9300      	str	r3, [sp, #0]
10010116:	9b00      	ldr	r3, [sp, #0]
10010118:	3b01      	subs	r3, #1
1001011a:	9300      	str	r3, [sp, #0]
1001011c:	d40d      	bmi.n	1001013a <_fwalk_reent+0x3a>
1001011e:	89ab      	ldrh	r3, [r5, #12]
10010120:	2b01      	cmp	r3, #1
10010122:	d908      	bls.n	10010136 <_fwalk_reent+0x36>
10010124:	220e      	movs	r2, #14
10010126:	5eab      	ldrsh	r3, [r5, r2]
10010128:	3301      	adds	r3, #1
1001012a:	d004      	beq.n	10010136 <_fwalk_reent+0x36>
1001012c:	0029      	movs	r1, r5
1001012e:	0038      	movs	r0, r7
10010130:	9b01      	ldr	r3, [sp, #4]
10010132:	4798      	blx	r3
10010134:	4306      	orrs	r6, r0
10010136:	3568      	adds	r5, #104	; 0x68
10010138:	e7ed      	b.n	10010116 <_fwalk_reent+0x16>
1001013a:	6824      	ldr	r4, [r4, #0]
1001013c:	e7e6      	b.n	1001010c <_fwalk_reent+0xc>
1001013e:	0030      	movs	r0, r6
10010140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010144 <__swhatbuf_r>:
10010144:	b570      	push	{r4, r5, r6, lr}
10010146:	000e      	movs	r6, r1
10010148:	001d      	movs	r5, r3
1001014a:	230e      	movs	r3, #14
1001014c:	5ec9      	ldrsh	r1, [r1, r3]
1001014e:	b090      	sub	sp, #64	; 0x40
10010150:	0014      	movs	r4, r2
10010152:	2900      	cmp	r1, #0
10010154:	da06      	bge.n	10010164 <__swhatbuf_r+0x20>
10010156:	2300      	movs	r3, #0
10010158:	602b      	str	r3, [r5, #0]
1001015a:	89b3      	ldrh	r3, [r6, #12]
1001015c:	061b      	lsls	r3, r3, #24
1001015e:	d50f      	bpl.n	10010180 <__swhatbuf_r+0x3c>
10010160:	2340      	movs	r3, #64	; 0x40
10010162:	e00f      	b.n	10010184 <__swhatbuf_r+0x40>
10010164:	aa01      	add	r2, sp, #4
10010166:	f000 fc85 	bl	10010a74 <_fstat_r>
1001016a:	2800      	cmp	r0, #0
1001016c:	dbf3      	blt.n	10010156 <__swhatbuf_r+0x12>
1001016e:	23f0      	movs	r3, #240	; 0xf0
10010170:	9a02      	ldr	r2, [sp, #8]
10010172:	021b      	lsls	r3, r3, #8
10010174:	4013      	ands	r3, r2
10010176:	4a05      	ldr	r2, [pc, #20]	; (1001018c <__swhatbuf_r+0x48>)
10010178:	189b      	adds	r3, r3, r2
1001017a:	425a      	negs	r2, r3
1001017c:	4153      	adcs	r3, r2
1001017e:	602b      	str	r3, [r5, #0]
10010180:	2380      	movs	r3, #128	; 0x80
10010182:	00db      	lsls	r3, r3, #3
10010184:	2000      	movs	r0, #0
10010186:	6023      	str	r3, [r4, #0]
10010188:	b010      	add	sp, #64	; 0x40
1001018a:	bd70      	pop	{r4, r5, r6, pc}
1001018c:	ffffe000 	.word	0xffffe000

10010190 <__smakebuf_r>:
10010190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010192:	2602      	movs	r6, #2
10010194:	898b      	ldrh	r3, [r1, #12]
10010196:	0005      	movs	r5, r0
10010198:	000c      	movs	r4, r1
1001019a:	4233      	tst	r3, r6
1001019c:	d110      	bne.n	100101c0 <__smakebuf_r+0x30>
1001019e:	ab01      	add	r3, sp, #4
100101a0:	466a      	mov	r2, sp
100101a2:	f7ff ffcf 	bl	10010144 <__swhatbuf_r>
100101a6:	9900      	ldr	r1, [sp, #0]
100101a8:	0007      	movs	r7, r0
100101aa:	0028      	movs	r0, r5
100101ac:	f000 f87e 	bl	100102ac <_malloc_r>
100101b0:	2800      	cmp	r0, #0
100101b2:	d10c      	bne.n	100101ce <__smakebuf_r+0x3e>
100101b4:	220c      	movs	r2, #12
100101b6:	5ea3      	ldrsh	r3, [r4, r2]
100101b8:	059a      	lsls	r2, r3, #22
100101ba:	d423      	bmi.n	10010204 <__smakebuf_r+0x74>
100101bc:	4333      	orrs	r3, r6
100101be:	81a3      	strh	r3, [r4, #12]
100101c0:	0023      	movs	r3, r4
100101c2:	3347      	adds	r3, #71	; 0x47
100101c4:	6023      	str	r3, [r4, #0]
100101c6:	6123      	str	r3, [r4, #16]
100101c8:	2301      	movs	r3, #1
100101ca:	6163      	str	r3, [r4, #20]
100101cc:	e01a      	b.n	10010204 <__smakebuf_r+0x74>
100101ce:	2280      	movs	r2, #128	; 0x80
100101d0:	4b0d      	ldr	r3, [pc, #52]	; (10010208 <__smakebuf_r+0x78>)
100101d2:	62ab      	str	r3, [r5, #40]	; 0x28
100101d4:	89a3      	ldrh	r3, [r4, #12]
100101d6:	6020      	str	r0, [r4, #0]
100101d8:	4313      	orrs	r3, r2
100101da:	81a3      	strh	r3, [r4, #12]
100101dc:	9b00      	ldr	r3, [sp, #0]
100101de:	6120      	str	r0, [r4, #16]
100101e0:	6163      	str	r3, [r4, #20]
100101e2:	9b01      	ldr	r3, [sp, #4]
100101e4:	2b00      	cmp	r3, #0
100101e6:	d00a      	beq.n	100101fe <__smakebuf_r+0x6e>
100101e8:	230e      	movs	r3, #14
100101ea:	5ee1      	ldrsh	r1, [r4, r3]
100101ec:	0028      	movs	r0, r5
100101ee:	f000 fc53 	bl	10010a98 <_isatty_r>
100101f2:	2800      	cmp	r0, #0
100101f4:	d003      	beq.n	100101fe <__smakebuf_r+0x6e>
100101f6:	2201      	movs	r2, #1
100101f8:	89a3      	ldrh	r3, [r4, #12]
100101fa:	4313      	orrs	r3, r2
100101fc:	81a3      	strh	r3, [r4, #12]
100101fe:	89a3      	ldrh	r3, [r4, #12]
10010200:	431f      	orrs	r7, r3
10010202:	81a7      	strh	r7, [r4, #12]
10010204:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010206:	46c0      	nop			; (mov r8, r8)
10010208:	1000ff99 	.word	0x1000ff99

1001020c <malloc>:
1001020c:	b510      	push	{r4, lr}
1001020e:	4b03      	ldr	r3, [pc, #12]	; (1001021c <malloc+0x10>)
10010210:	0001      	movs	r1, r0
10010212:	6818      	ldr	r0, [r3, #0]
10010214:	f000 f84a 	bl	100102ac <_malloc_r>
10010218:	bd10      	pop	{r4, pc}
1001021a:	46c0      	nop			; (mov r8, r8)
1001021c:	10012410 	.word	0x10012410

10010220 <_free_r>:
10010220:	b530      	push	{r4, r5, lr}
10010222:	2900      	cmp	r1, #0
10010224:	d03e      	beq.n	100102a4 <_free_r+0x84>
10010226:	3904      	subs	r1, #4
10010228:	680b      	ldr	r3, [r1, #0]
1001022a:	2b00      	cmp	r3, #0
1001022c:	da00      	bge.n	10010230 <_free_r+0x10>
1001022e:	18c9      	adds	r1, r1, r3
10010230:	4a1d      	ldr	r2, [pc, #116]	; (100102a8 <_free_r+0x88>)
10010232:	6813      	ldr	r3, [r2, #0]
10010234:	0014      	movs	r4, r2
10010236:	2b00      	cmp	r3, #0
10010238:	d102      	bne.n	10010240 <_free_r+0x20>
1001023a:	604b      	str	r3, [r1, #4]
1001023c:	6011      	str	r1, [r2, #0]
1001023e:	e031      	b.n	100102a4 <_free_r+0x84>
10010240:	428b      	cmp	r3, r1
10010242:	d90d      	bls.n	10010260 <_free_r+0x40>
10010244:	680a      	ldr	r2, [r1, #0]
10010246:	1888      	adds	r0, r1, r2
10010248:	4283      	cmp	r3, r0
1001024a:	d103      	bne.n	10010254 <_free_r+0x34>
1001024c:	6818      	ldr	r0, [r3, #0]
1001024e:	685b      	ldr	r3, [r3, #4]
10010250:	1882      	adds	r2, r0, r2
10010252:	600a      	str	r2, [r1, #0]
10010254:	604b      	str	r3, [r1, #4]
10010256:	6021      	str	r1, [r4, #0]
10010258:	e024      	b.n	100102a4 <_free_r+0x84>
1001025a:	428a      	cmp	r2, r1
1001025c:	d803      	bhi.n	10010266 <_free_r+0x46>
1001025e:	0013      	movs	r3, r2
10010260:	685a      	ldr	r2, [r3, #4]
10010262:	2a00      	cmp	r2, #0
10010264:	d1f9      	bne.n	1001025a <_free_r+0x3a>
10010266:	681d      	ldr	r5, [r3, #0]
10010268:	195c      	adds	r4, r3, r5
1001026a:	428c      	cmp	r4, r1
1001026c:	d10b      	bne.n	10010286 <_free_r+0x66>
1001026e:	6809      	ldr	r1, [r1, #0]
10010270:	1869      	adds	r1, r5, r1
10010272:	1858      	adds	r0, r3, r1
10010274:	6019      	str	r1, [r3, #0]
10010276:	4282      	cmp	r2, r0
10010278:	d114      	bne.n	100102a4 <_free_r+0x84>
1001027a:	6810      	ldr	r0, [r2, #0]
1001027c:	6852      	ldr	r2, [r2, #4]
1001027e:	1841      	adds	r1, r0, r1
10010280:	6019      	str	r1, [r3, #0]
10010282:	605a      	str	r2, [r3, #4]
10010284:	e00e      	b.n	100102a4 <_free_r+0x84>
10010286:	428c      	cmp	r4, r1
10010288:	d902      	bls.n	10010290 <_free_r+0x70>
1001028a:	230c      	movs	r3, #12
1001028c:	6003      	str	r3, [r0, #0]
1001028e:	e009      	b.n	100102a4 <_free_r+0x84>
10010290:	6808      	ldr	r0, [r1, #0]
10010292:	180c      	adds	r4, r1, r0
10010294:	42a2      	cmp	r2, r4
10010296:	d103      	bne.n	100102a0 <_free_r+0x80>
10010298:	6814      	ldr	r4, [r2, #0]
1001029a:	6852      	ldr	r2, [r2, #4]
1001029c:	1820      	adds	r0, r4, r0
1001029e:	6008      	str	r0, [r1, #0]
100102a0:	604a      	str	r2, [r1, #4]
100102a2:	6059      	str	r1, [r3, #4]
100102a4:	bd30      	pop	{r4, r5, pc}
100102a6:	46c0      	nop			; (mov r8, r8)
100102a8:	10012688 	.word	0x10012688

100102ac <_malloc_r>:
100102ac:	2303      	movs	r3, #3
100102ae:	b570      	push	{r4, r5, r6, lr}
100102b0:	1ccd      	adds	r5, r1, #3
100102b2:	439d      	bics	r5, r3
100102b4:	3508      	adds	r5, #8
100102b6:	0006      	movs	r6, r0
100102b8:	2d0c      	cmp	r5, #12
100102ba:	d201      	bcs.n	100102c0 <_malloc_r+0x14>
100102bc:	250c      	movs	r5, #12
100102be:	e005      	b.n	100102cc <_malloc_r+0x20>
100102c0:	2d00      	cmp	r5, #0
100102c2:	da03      	bge.n	100102cc <_malloc_r+0x20>
100102c4:	230c      	movs	r3, #12
100102c6:	2000      	movs	r0, #0
100102c8:	6033      	str	r3, [r6, #0]
100102ca:	e040      	b.n	1001034e <_malloc_r+0xa2>
100102cc:	42a9      	cmp	r1, r5
100102ce:	d8f9      	bhi.n	100102c4 <_malloc_r+0x18>
100102d0:	4b1f      	ldr	r3, [pc, #124]	; (10010350 <_malloc_r+0xa4>)
100102d2:	681c      	ldr	r4, [r3, #0]
100102d4:	001a      	movs	r2, r3
100102d6:	0021      	movs	r1, r4
100102d8:	2900      	cmp	r1, #0
100102da:	d013      	beq.n	10010304 <_malloc_r+0x58>
100102dc:	680b      	ldr	r3, [r1, #0]
100102de:	1b5b      	subs	r3, r3, r5
100102e0:	d40d      	bmi.n	100102fe <_malloc_r+0x52>
100102e2:	2b0b      	cmp	r3, #11
100102e4:	d902      	bls.n	100102ec <_malloc_r+0x40>
100102e6:	600b      	str	r3, [r1, #0]
100102e8:	18cc      	adds	r4, r1, r3
100102ea:	e01e      	b.n	1001032a <_malloc_r+0x7e>
100102ec:	428c      	cmp	r4, r1
100102ee:	d102      	bne.n	100102f6 <_malloc_r+0x4a>
100102f0:	6863      	ldr	r3, [r4, #4]
100102f2:	6013      	str	r3, [r2, #0]
100102f4:	e01a      	b.n	1001032c <_malloc_r+0x80>
100102f6:	684b      	ldr	r3, [r1, #4]
100102f8:	6063      	str	r3, [r4, #4]
100102fa:	000c      	movs	r4, r1
100102fc:	e016      	b.n	1001032c <_malloc_r+0x80>
100102fe:	000c      	movs	r4, r1
10010300:	6849      	ldr	r1, [r1, #4]
10010302:	e7e9      	b.n	100102d8 <_malloc_r+0x2c>
10010304:	4c13      	ldr	r4, [pc, #76]	; (10010354 <_malloc_r+0xa8>)
10010306:	6823      	ldr	r3, [r4, #0]
10010308:	2b00      	cmp	r3, #0
1001030a:	d103      	bne.n	10010314 <_malloc_r+0x68>
1001030c:	0030      	movs	r0, r6
1001030e:	f000 fb2d 	bl	1001096c <_sbrk_r>
10010312:	6020      	str	r0, [r4, #0]
10010314:	0029      	movs	r1, r5
10010316:	0030      	movs	r0, r6
10010318:	f000 fb28 	bl	1001096c <_sbrk_r>
1001031c:	1c43      	adds	r3, r0, #1
1001031e:	d0d1      	beq.n	100102c4 <_malloc_r+0x18>
10010320:	2303      	movs	r3, #3
10010322:	1cc4      	adds	r4, r0, #3
10010324:	439c      	bics	r4, r3
10010326:	42a0      	cmp	r0, r4
10010328:	d10a      	bne.n	10010340 <_malloc_r+0x94>
1001032a:	6025      	str	r5, [r4, #0]
1001032c:	0020      	movs	r0, r4
1001032e:	2207      	movs	r2, #7
10010330:	300b      	adds	r0, #11
10010332:	1d23      	adds	r3, r4, #4
10010334:	4390      	bics	r0, r2
10010336:	1ac3      	subs	r3, r0, r3
10010338:	d009      	beq.n	1001034e <_malloc_r+0xa2>
1001033a:	425a      	negs	r2, r3
1001033c:	50e2      	str	r2, [r4, r3]
1001033e:	e006      	b.n	1001034e <_malloc_r+0xa2>
10010340:	1a21      	subs	r1, r4, r0
10010342:	0030      	movs	r0, r6
10010344:	f000 fb12 	bl	1001096c <_sbrk_r>
10010348:	1c43      	adds	r3, r0, #1
1001034a:	d1ee      	bne.n	1001032a <_malloc_r+0x7e>
1001034c:	e7ba      	b.n	100102c4 <_malloc_r+0x18>
1001034e:	bd70      	pop	{r4, r5, r6, pc}
10010350:	10012688 	.word	0x10012688
10010354:	10012684 	.word	0x10012684

10010358 <__sfputc_r>:
10010358:	6893      	ldr	r3, [r2, #8]
1001035a:	b510      	push	{r4, lr}
1001035c:	3b01      	subs	r3, #1
1001035e:	6093      	str	r3, [r2, #8]
10010360:	2b00      	cmp	r3, #0
10010362:	da05      	bge.n	10010370 <__sfputc_r+0x18>
10010364:	6994      	ldr	r4, [r2, #24]
10010366:	42a3      	cmp	r3, r4
10010368:	db08      	blt.n	1001037c <__sfputc_r+0x24>
1001036a:	b2cb      	uxtb	r3, r1
1001036c:	2b0a      	cmp	r3, #10
1001036e:	d005      	beq.n	1001037c <__sfputc_r+0x24>
10010370:	6813      	ldr	r3, [r2, #0]
10010372:	1c58      	adds	r0, r3, #1
10010374:	6010      	str	r0, [r2, #0]
10010376:	7019      	strb	r1, [r3, #0]
10010378:	b2c8      	uxtb	r0, r1
1001037a:	e001      	b.n	10010380 <__sfputc_r+0x28>
1001037c:	f7ff fc8c 	bl	1000fc98 <__swbuf_r>
10010380:	bd10      	pop	{r4, pc}

10010382 <__sfputs_r>:
10010382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010384:	0006      	movs	r6, r0
10010386:	000f      	movs	r7, r1
10010388:	0014      	movs	r4, r2
1001038a:	18d5      	adds	r5, r2, r3
1001038c:	42ac      	cmp	r4, r5
1001038e:	d008      	beq.n	100103a2 <__sfputs_r+0x20>
10010390:	7821      	ldrb	r1, [r4, #0]
10010392:	003a      	movs	r2, r7
10010394:	0030      	movs	r0, r6
10010396:	f7ff ffdf 	bl	10010358 <__sfputc_r>
1001039a:	3401      	adds	r4, #1
1001039c:	1c43      	adds	r3, r0, #1
1001039e:	d1f5      	bne.n	1001038c <__sfputs_r+0xa>
100103a0:	e000      	b.n	100103a4 <__sfputs_r+0x22>
100103a2:	2000      	movs	r0, #0
100103a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100103a8 <_vfiprintf_r>:
100103a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100103aa:	b09f      	sub	sp, #124	; 0x7c
100103ac:	0006      	movs	r6, r0
100103ae:	000f      	movs	r7, r1
100103b0:	9202      	str	r2, [sp, #8]
100103b2:	9305      	str	r3, [sp, #20]
100103b4:	2800      	cmp	r0, #0
100103b6:	d004      	beq.n	100103c2 <_vfiprintf_r+0x1a>
100103b8:	6983      	ldr	r3, [r0, #24]
100103ba:	2b00      	cmp	r3, #0
100103bc:	d101      	bne.n	100103c2 <_vfiprintf_r+0x1a>
100103be:	f7ff fe2d 	bl	1001001c <__sinit>
100103c2:	4b7f      	ldr	r3, [pc, #508]	; (100105c0 <_vfiprintf_r+0x218>)
100103c4:	429f      	cmp	r7, r3
100103c6:	d101      	bne.n	100103cc <_vfiprintf_r+0x24>
100103c8:	6877      	ldr	r7, [r6, #4]
100103ca:	e008      	b.n	100103de <_vfiprintf_r+0x36>
100103cc:	4b7d      	ldr	r3, [pc, #500]	; (100105c4 <_vfiprintf_r+0x21c>)
100103ce:	429f      	cmp	r7, r3
100103d0:	d101      	bne.n	100103d6 <_vfiprintf_r+0x2e>
100103d2:	68b7      	ldr	r7, [r6, #8]
100103d4:	e003      	b.n	100103de <_vfiprintf_r+0x36>
100103d6:	4b7c      	ldr	r3, [pc, #496]	; (100105c8 <_vfiprintf_r+0x220>)
100103d8:	429f      	cmp	r7, r3
100103da:	d100      	bne.n	100103de <_vfiprintf_r+0x36>
100103dc:	68f7      	ldr	r7, [r6, #12]
100103de:	89bb      	ldrh	r3, [r7, #12]
100103e0:	071b      	lsls	r3, r3, #28
100103e2:	d50a      	bpl.n	100103fa <_vfiprintf_r+0x52>
100103e4:	693b      	ldr	r3, [r7, #16]
100103e6:	2b00      	cmp	r3, #0
100103e8:	d007      	beq.n	100103fa <_vfiprintf_r+0x52>
100103ea:	2300      	movs	r3, #0
100103ec:	ad06      	add	r5, sp, #24
100103ee:	616b      	str	r3, [r5, #20]
100103f0:	3320      	adds	r3, #32
100103f2:	766b      	strb	r3, [r5, #25]
100103f4:	3310      	adds	r3, #16
100103f6:	76ab      	strb	r3, [r5, #26]
100103f8:	e03d      	b.n	10010476 <_vfiprintf_r+0xce>
100103fa:	0039      	movs	r1, r7
100103fc:	0030      	movs	r0, r6
100103fe:	f7ff fca3 	bl	1000fd48 <__swsetup_r>
10010402:	2800      	cmp	r0, #0
10010404:	d0f1      	beq.n	100103ea <_vfiprintf_r+0x42>
10010406:	2001      	movs	r0, #1
10010408:	4240      	negs	r0, r0
1001040a:	e0d6      	b.n	100105ba <_vfiprintf_r+0x212>
1001040c:	9a05      	ldr	r2, [sp, #20]
1001040e:	1d11      	adds	r1, r2, #4
10010410:	6812      	ldr	r2, [r2, #0]
10010412:	9105      	str	r1, [sp, #20]
10010414:	2a00      	cmp	r2, #0
10010416:	da00      	bge.n	1001041a <_vfiprintf_r+0x72>
10010418:	e07f      	b.n	1001051a <_vfiprintf_r+0x172>
1001041a:	9209      	str	r2, [sp, #36]	; 0x24
1001041c:	3401      	adds	r4, #1
1001041e:	7823      	ldrb	r3, [r4, #0]
10010420:	2b2e      	cmp	r3, #46	; 0x2e
10010422:	d100      	bne.n	10010426 <_vfiprintf_r+0x7e>
10010424:	e08d      	b.n	10010542 <_vfiprintf_r+0x19a>
10010426:	7821      	ldrb	r1, [r4, #0]
10010428:	2203      	movs	r2, #3
1001042a:	4868      	ldr	r0, [pc, #416]	; (100105cc <_vfiprintf_r+0x224>)
1001042c:	f000 fb5a 	bl	10010ae4 <memchr>
10010430:	2800      	cmp	r0, #0
10010432:	d007      	beq.n	10010444 <_vfiprintf_r+0x9c>
10010434:	4b65      	ldr	r3, [pc, #404]	; (100105cc <_vfiprintf_r+0x224>)
10010436:	682a      	ldr	r2, [r5, #0]
10010438:	1ac0      	subs	r0, r0, r3
1001043a:	2340      	movs	r3, #64	; 0x40
1001043c:	4083      	lsls	r3, r0
1001043e:	4313      	orrs	r3, r2
10010440:	602b      	str	r3, [r5, #0]
10010442:	3401      	adds	r4, #1
10010444:	7821      	ldrb	r1, [r4, #0]
10010446:	1c63      	adds	r3, r4, #1
10010448:	2206      	movs	r2, #6
1001044a:	4861      	ldr	r0, [pc, #388]	; (100105d0 <_vfiprintf_r+0x228>)
1001044c:	9302      	str	r3, [sp, #8]
1001044e:	7629      	strb	r1, [r5, #24]
10010450:	f000 fb48 	bl	10010ae4 <memchr>
10010454:	2800      	cmp	r0, #0
10010456:	d100      	bne.n	1001045a <_vfiprintf_r+0xb2>
10010458:	e09d      	b.n	10010596 <_vfiprintf_r+0x1ee>
1001045a:	4b5e      	ldr	r3, [pc, #376]	; (100105d4 <_vfiprintf_r+0x22c>)
1001045c:	2b00      	cmp	r3, #0
1001045e:	d000      	beq.n	10010462 <_vfiprintf_r+0xba>
10010460:	e090      	b.n	10010584 <_vfiprintf_r+0x1dc>
10010462:	2207      	movs	r2, #7
10010464:	9b05      	ldr	r3, [sp, #20]
10010466:	3307      	adds	r3, #7
10010468:	4393      	bics	r3, r2
1001046a:	3308      	adds	r3, #8
1001046c:	9305      	str	r3, [sp, #20]
1001046e:	696b      	ldr	r3, [r5, #20]
10010470:	9a03      	ldr	r2, [sp, #12]
10010472:	189b      	adds	r3, r3, r2
10010474:	616b      	str	r3, [r5, #20]
10010476:	9c02      	ldr	r4, [sp, #8]
10010478:	7823      	ldrb	r3, [r4, #0]
1001047a:	2b00      	cmp	r3, #0
1001047c:	d104      	bne.n	10010488 <_vfiprintf_r+0xe0>
1001047e:	9b02      	ldr	r3, [sp, #8]
10010480:	1ae3      	subs	r3, r4, r3
10010482:	9304      	str	r3, [sp, #16]
10010484:	d012      	beq.n	100104ac <_vfiprintf_r+0x104>
10010486:	e003      	b.n	10010490 <_vfiprintf_r+0xe8>
10010488:	2b25      	cmp	r3, #37	; 0x25
1001048a:	d0f8      	beq.n	1001047e <_vfiprintf_r+0xd6>
1001048c:	3401      	adds	r4, #1
1001048e:	e7f3      	b.n	10010478 <_vfiprintf_r+0xd0>
10010490:	9b04      	ldr	r3, [sp, #16]
10010492:	9a02      	ldr	r2, [sp, #8]
10010494:	0039      	movs	r1, r7
10010496:	0030      	movs	r0, r6
10010498:	f7ff ff73 	bl	10010382 <__sfputs_r>
1001049c:	1c43      	adds	r3, r0, #1
1001049e:	d100      	bne.n	100104a2 <_vfiprintf_r+0xfa>
100104a0:	e086      	b.n	100105b0 <_vfiprintf_r+0x208>
100104a2:	696a      	ldr	r2, [r5, #20]
100104a4:	9b04      	ldr	r3, [sp, #16]
100104a6:	4694      	mov	ip, r2
100104a8:	4463      	add	r3, ip
100104aa:	616b      	str	r3, [r5, #20]
100104ac:	7823      	ldrb	r3, [r4, #0]
100104ae:	2b00      	cmp	r3, #0
100104b0:	d07e      	beq.n	100105b0 <_vfiprintf_r+0x208>
100104b2:	2201      	movs	r2, #1
100104b4:	2300      	movs	r3, #0
100104b6:	4252      	negs	r2, r2
100104b8:	606a      	str	r2, [r5, #4]
100104ba:	a902      	add	r1, sp, #8
100104bc:	3254      	adds	r2, #84	; 0x54
100104be:	1852      	adds	r2, r2, r1
100104c0:	3401      	adds	r4, #1
100104c2:	602b      	str	r3, [r5, #0]
100104c4:	60eb      	str	r3, [r5, #12]
100104c6:	60ab      	str	r3, [r5, #8]
100104c8:	7013      	strb	r3, [r2, #0]
100104ca:	65ab      	str	r3, [r5, #88]	; 0x58
100104cc:	7821      	ldrb	r1, [r4, #0]
100104ce:	2205      	movs	r2, #5
100104d0:	4841      	ldr	r0, [pc, #260]	; (100105d8 <_vfiprintf_r+0x230>)
100104d2:	f000 fb07 	bl	10010ae4 <memchr>
100104d6:	2800      	cmp	r0, #0
100104d8:	d008      	beq.n	100104ec <_vfiprintf_r+0x144>
100104da:	4b3f      	ldr	r3, [pc, #252]	; (100105d8 <_vfiprintf_r+0x230>)
100104dc:	682a      	ldr	r2, [r5, #0]
100104de:	1ac0      	subs	r0, r0, r3
100104e0:	2301      	movs	r3, #1
100104e2:	4083      	lsls	r3, r0
100104e4:	4313      	orrs	r3, r2
100104e6:	602b      	str	r3, [r5, #0]
100104e8:	3401      	adds	r4, #1
100104ea:	e7ef      	b.n	100104cc <_vfiprintf_r+0x124>
100104ec:	682b      	ldr	r3, [r5, #0]
100104ee:	06da      	lsls	r2, r3, #27
100104f0:	d504      	bpl.n	100104fc <_vfiprintf_r+0x154>
100104f2:	2253      	movs	r2, #83	; 0x53
100104f4:	2120      	movs	r1, #32
100104f6:	a802      	add	r0, sp, #8
100104f8:	1812      	adds	r2, r2, r0
100104fa:	7011      	strb	r1, [r2, #0]
100104fc:	071a      	lsls	r2, r3, #28
100104fe:	d504      	bpl.n	1001050a <_vfiprintf_r+0x162>
10010500:	2253      	movs	r2, #83	; 0x53
10010502:	212b      	movs	r1, #43	; 0x2b
10010504:	a802      	add	r0, sp, #8
10010506:	1812      	adds	r2, r2, r0
10010508:	7011      	strb	r1, [r2, #0]
1001050a:	7822      	ldrb	r2, [r4, #0]
1001050c:	2a2a      	cmp	r2, #42	; 0x2a
1001050e:	d100      	bne.n	10010512 <_vfiprintf_r+0x16a>
10010510:	e77c      	b.n	1001040c <_vfiprintf_r+0x64>
10010512:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010514:	2000      	movs	r0, #0
10010516:	210a      	movs	r1, #10
10010518:	e005      	b.n	10010526 <_vfiprintf_r+0x17e>
1001051a:	4252      	negs	r2, r2
1001051c:	60ea      	str	r2, [r5, #12]
1001051e:	2202      	movs	r2, #2
10010520:	4313      	orrs	r3, r2
10010522:	602b      	str	r3, [r5, #0]
10010524:	e77a      	b.n	1001041c <_vfiprintf_r+0x74>
10010526:	7822      	ldrb	r2, [r4, #0]
10010528:	3a30      	subs	r2, #48	; 0x30
1001052a:	2a09      	cmp	r2, #9
1001052c:	d804      	bhi.n	10010538 <_vfiprintf_r+0x190>
1001052e:	434b      	muls	r3, r1
10010530:	3401      	adds	r4, #1
10010532:	189b      	adds	r3, r3, r2
10010534:	2001      	movs	r0, #1
10010536:	e7f6      	b.n	10010526 <_vfiprintf_r+0x17e>
10010538:	2800      	cmp	r0, #0
1001053a:	d100      	bne.n	1001053e <_vfiprintf_r+0x196>
1001053c:	e76f      	b.n	1001041e <_vfiprintf_r+0x76>
1001053e:	9309      	str	r3, [sp, #36]	; 0x24
10010540:	e76d      	b.n	1001041e <_vfiprintf_r+0x76>
10010542:	7863      	ldrb	r3, [r4, #1]
10010544:	2b2a      	cmp	r3, #42	; 0x2a
10010546:	d10a      	bne.n	1001055e <_vfiprintf_r+0x1b6>
10010548:	9b05      	ldr	r3, [sp, #20]
1001054a:	3402      	adds	r4, #2
1001054c:	1d1a      	adds	r2, r3, #4
1001054e:	681b      	ldr	r3, [r3, #0]
10010550:	9205      	str	r2, [sp, #20]
10010552:	2b00      	cmp	r3, #0
10010554:	da01      	bge.n	1001055a <_vfiprintf_r+0x1b2>
10010556:	2301      	movs	r3, #1
10010558:	425b      	negs	r3, r3
1001055a:	9307      	str	r3, [sp, #28]
1001055c:	e763      	b.n	10010426 <_vfiprintf_r+0x7e>
1001055e:	2300      	movs	r3, #0
10010560:	200a      	movs	r0, #10
10010562:	001a      	movs	r2, r3
10010564:	3401      	adds	r4, #1
10010566:	606b      	str	r3, [r5, #4]
10010568:	7821      	ldrb	r1, [r4, #0]
1001056a:	3930      	subs	r1, #48	; 0x30
1001056c:	2909      	cmp	r1, #9
1001056e:	d804      	bhi.n	1001057a <_vfiprintf_r+0x1d2>
10010570:	4342      	muls	r2, r0
10010572:	3401      	adds	r4, #1
10010574:	1852      	adds	r2, r2, r1
10010576:	2301      	movs	r3, #1
10010578:	e7f6      	b.n	10010568 <_vfiprintf_r+0x1c0>
1001057a:	2b00      	cmp	r3, #0
1001057c:	d100      	bne.n	10010580 <_vfiprintf_r+0x1d8>
1001057e:	e752      	b.n	10010426 <_vfiprintf_r+0x7e>
10010580:	9207      	str	r2, [sp, #28]
10010582:	e750      	b.n	10010426 <_vfiprintf_r+0x7e>
10010584:	ab05      	add	r3, sp, #20
10010586:	9300      	str	r3, [sp, #0]
10010588:	003a      	movs	r2, r7
1001058a:	4b14      	ldr	r3, [pc, #80]	; (100105dc <_vfiprintf_r+0x234>)
1001058c:	0029      	movs	r1, r5
1001058e:	0030      	movs	r0, r6
10010590:	e000      	b.n	10010594 <_vfiprintf_r+0x1ec>
10010592:	bf00      	nop
10010594:	e007      	b.n	100105a6 <_vfiprintf_r+0x1fe>
10010596:	ab05      	add	r3, sp, #20
10010598:	9300      	str	r3, [sp, #0]
1001059a:	003a      	movs	r2, r7
1001059c:	4b0f      	ldr	r3, [pc, #60]	; (100105dc <_vfiprintf_r+0x234>)
1001059e:	0029      	movs	r1, r5
100105a0:	0030      	movs	r0, r6
100105a2:	f000 f88b 	bl	100106bc <_printf_i>
100105a6:	9003      	str	r0, [sp, #12]
100105a8:	9b03      	ldr	r3, [sp, #12]
100105aa:	3301      	adds	r3, #1
100105ac:	d000      	beq.n	100105b0 <_vfiprintf_r+0x208>
100105ae:	e75e      	b.n	1001046e <_vfiprintf_r+0xc6>
100105b0:	89bb      	ldrh	r3, [r7, #12]
100105b2:	065b      	lsls	r3, r3, #25
100105b4:	d500      	bpl.n	100105b8 <_vfiprintf_r+0x210>
100105b6:	e726      	b.n	10010406 <_vfiprintf_r+0x5e>
100105b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100105ba:	b01f      	add	sp, #124	; 0x7c
100105bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105be:	46c0      	nop			; (mov r8, r8)
100105c0:	100122f4 	.word	0x100122f4
100105c4:	10012314 	.word	0x10012314
100105c8:	10012334 	.word	0x10012334
100105cc:	1001235a 	.word	0x1001235a
100105d0:	1001235e 	.word	0x1001235e
100105d4:	00000000 	.word	0x00000000
100105d8:	10012354 	.word	0x10012354
100105dc:	10010383 	.word	0x10010383

100105e0 <_printf_common>:
100105e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100105e2:	0017      	movs	r7, r2
100105e4:	9301      	str	r3, [sp, #4]
100105e6:	688a      	ldr	r2, [r1, #8]
100105e8:	690b      	ldr	r3, [r1, #16]
100105ea:	9000      	str	r0, [sp, #0]
100105ec:	000c      	movs	r4, r1
100105ee:	4293      	cmp	r3, r2
100105f0:	da00      	bge.n	100105f4 <_printf_common+0x14>
100105f2:	0013      	movs	r3, r2
100105f4:	0022      	movs	r2, r4
100105f6:	603b      	str	r3, [r7, #0]
100105f8:	3243      	adds	r2, #67	; 0x43
100105fa:	7812      	ldrb	r2, [r2, #0]
100105fc:	2a00      	cmp	r2, #0
100105fe:	d001      	beq.n	10010604 <_printf_common+0x24>
10010600:	3301      	adds	r3, #1
10010602:	603b      	str	r3, [r7, #0]
10010604:	6823      	ldr	r3, [r4, #0]
10010606:	069b      	lsls	r3, r3, #26
10010608:	d502      	bpl.n	10010610 <_printf_common+0x30>
1001060a:	683b      	ldr	r3, [r7, #0]
1001060c:	3302      	adds	r3, #2
1001060e:	603b      	str	r3, [r7, #0]
10010610:	2506      	movs	r5, #6
10010612:	6823      	ldr	r3, [r4, #0]
10010614:	401d      	ands	r5, r3
10010616:	d01e      	beq.n	10010656 <_printf_common+0x76>
10010618:	0023      	movs	r3, r4
1001061a:	3343      	adds	r3, #67	; 0x43
1001061c:	781b      	ldrb	r3, [r3, #0]
1001061e:	1e5a      	subs	r2, r3, #1
10010620:	4193      	sbcs	r3, r2
10010622:	6822      	ldr	r2, [r4, #0]
10010624:	0692      	lsls	r2, r2, #26
10010626:	d51c      	bpl.n	10010662 <_printf_common+0x82>
10010628:	2030      	movs	r0, #48	; 0x30
1001062a:	18e1      	adds	r1, r4, r3
1001062c:	3143      	adds	r1, #67	; 0x43
1001062e:	7008      	strb	r0, [r1, #0]
10010630:	0021      	movs	r1, r4
10010632:	1c5a      	adds	r2, r3, #1
10010634:	3145      	adds	r1, #69	; 0x45
10010636:	7809      	ldrb	r1, [r1, #0]
10010638:	18a2      	adds	r2, r4, r2
1001063a:	3243      	adds	r2, #67	; 0x43
1001063c:	3302      	adds	r3, #2
1001063e:	7011      	strb	r1, [r2, #0]
10010640:	e00f      	b.n	10010662 <_printf_common+0x82>
10010642:	0022      	movs	r2, r4
10010644:	2301      	movs	r3, #1
10010646:	3219      	adds	r2, #25
10010648:	9901      	ldr	r1, [sp, #4]
1001064a:	9800      	ldr	r0, [sp, #0]
1001064c:	9e08      	ldr	r6, [sp, #32]
1001064e:	47b0      	blx	r6
10010650:	1c43      	adds	r3, r0, #1
10010652:	d00e      	beq.n	10010672 <_printf_common+0x92>
10010654:	3501      	adds	r5, #1
10010656:	68e3      	ldr	r3, [r4, #12]
10010658:	683a      	ldr	r2, [r7, #0]
1001065a:	1a9b      	subs	r3, r3, r2
1001065c:	429d      	cmp	r5, r3
1001065e:	dbf0      	blt.n	10010642 <_printf_common+0x62>
10010660:	e7da      	b.n	10010618 <_printf_common+0x38>
10010662:	0022      	movs	r2, r4
10010664:	9901      	ldr	r1, [sp, #4]
10010666:	3243      	adds	r2, #67	; 0x43
10010668:	9800      	ldr	r0, [sp, #0]
1001066a:	9d08      	ldr	r5, [sp, #32]
1001066c:	47a8      	blx	r5
1001066e:	1c43      	adds	r3, r0, #1
10010670:	d102      	bne.n	10010678 <_printf_common+0x98>
10010672:	2001      	movs	r0, #1
10010674:	4240      	negs	r0, r0
10010676:	e020      	b.n	100106ba <_printf_common+0xda>
10010678:	2306      	movs	r3, #6
1001067a:	6820      	ldr	r0, [r4, #0]
1001067c:	68e1      	ldr	r1, [r4, #12]
1001067e:	683a      	ldr	r2, [r7, #0]
10010680:	4003      	ands	r3, r0
10010682:	2500      	movs	r5, #0
10010684:	2b04      	cmp	r3, #4
10010686:	d103      	bne.n	10010690 <_printf_common+0xb0>
10010688:	1a8d      	subs	r5, r1, r2
1001068a:	43eb      	mvns	r3, r5
1001068c:	17db      	asrs	r3, r3, #31
1001068e:	401d      	ands	r5, r3
10010690:	68a3      	ldr	r3, [r4, #8]
10010692:	6922      	ldr	r2, [r4, #16]
10010694:	4293      	cmp	r3, r2
10010696:	dd01      	ble.n	1001069c <_printf_common+0xbc>
10010698:	1a9b      	subs	r3, r3, r2
1001069a:	18ed      	adds	r5, r5, r3
1001069c:	2700      	movs	r7, #0
1001069e:	42bd      	cmp	r5, r7
100106a0:	d00a      	beq.n	100106b8 <_printf_common+0xd8>
100106a2:	0022      	movs	r2, r4
100106a4:	2301      	movs	r3, #1
100106a6:	321a      	adds	r2, #26
100106a8:	9901      	ldr	r1, [sp, #4]
100106aa:	9800      	ldr	r0, [sp, #0]
100106ac:	9e08      	ldr	r6, [sp, #32]
100106ae:	47b0      	blx	r6
100106b0:	1c43      	adds	r3, r0, #1
100106b2:	d0de      	beq.n	10010672 <_printf_common+0x92>
100106b4:	3701      	adds	r7, #1
100106b6:	e7f2      	b.n	1001069e <_printf_common+0xbe>
100106b8:	2000      	movs	r0, #0
100106ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100106bc <_printf_i>:
100106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100106be:	b08b      	sub	sp, #44	; 0x2c
100106c0:	9206      	str	r2, [sp, #24]
100106c2:	000a      	movs	r2, r1
100106c4:	3243      	adds	r2, #67	; 0x43
100106c6:	9307      	str	r3, [sp, #28]
100106c8:	9005      	str	r0, [sp, #20]
100106ca:	9204      	str	r2, [sp, #16]
100106cc:	7e0a      	ldrb	r2, [r1, #24]
100106ce:	000c      	movs	r4, r1
100106d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100106d2:	2a6e      	cmp	r2, #110	; 0x6e
100106d4:	d100      	bne.n	100106d8 <_printf_i+0x1c>
100106d6:	e0ab      	b.n	10010830 <_printf_i+0x174>
100106d8:	d811      	bhi.n	100106fe <_printf_i+0x42>
100106da:	2a63      	cmp	r2, #99	; 0x63
100106dc:	d022      	beq.n	10010724 <_printf_i+0x68>
100106de:	d809      	bhi.n	100106f4 <_printf_i+0x38>
100106e0:	2a00      	cmp	r2, #0
100106e2:	d100      	bne.n	100106e6 <_printf_i+0x2a>
100106e4:	e0b5      	b.n	10010852 <_printf_i+0x196>
100106e6:	2a58      	cmp	r2, #88	; 0x58
100106e8:	d000      	beq.n	100106ec <_printf_i+0x30>
100106ea:	e0c5      	b.n	10010878 <_printf_i+0x1bc>
100106ec:	3145      	adds	r1, #69	; 0x45
100106ee:	700a      	strb	r2, [r1, #0]
100106f0:	4a81      	ldr	r2, [pc, #516]	; (100108f8 <_printf_i+0x23c>)
100106f2:	e04f      	b.n	10010794 <_printf_i+0xd8>
100106f4:	2a64      	cmp	r2, #100	; 0x64
100106f6:	d01d      	beq.n	10010734 <_printf_i+0x78>
100106f8:	2a69      	cmp	r2, #105	; 0x69
100106fa:	d01b      	beq.n	10010734 <_printf_i+0x78>
100106fc:	e0bc      	b.n	10010878 <_printf_i+0x1bc>
100106fe:	2a73      	cmp	r2, #115	; 0x73
10010700:	d100      	bne.n	10010704 <_printf_i+0x48>
10010702:	e0aa      	b.n	1001085a <_printf_i+0x19e>
10010704:	d809      	bhi.n	1001071a <_printf_i+0x5e>
10010706:	2a6f      	cmp	r2, #111	; 0x6f
10010708:	d029      	beq.n	1001075e <_printf_i+0xa2>
1001070a:	2a70      	cmp	r2, #112	; 0x70
1001070c:	d000      	beq.n	10010710 <_printf_i+0x54>
1001070e:	e0b3      	b.n	10010878 <_printf_i+0x1bc>
10010710:	2220      	movs	r2, #32
10010712:	6809      	ldr	r1, [r1, #0]
10010714:	430a      	orrs	r2, r1
10010716:	6022      	str	r2, [r4, #0]
10010718:	e037      	b.n	1001078a <_printf_i+0xce>
1001071a:	2a75      	cmp	r2, #117	; 0x75
1001071c:	d01f      	beq.n	1001075e <_printf_i+0xa2>
1001071e:	2a78      	cmp	r2, #120	; 0x78
10010720:	d033      	beq.n	1001078a <_printf_i+0xce>
10010722:	e0a9      	b.n	10010878 <_printf_i+0x1bc>
10010724:	000e      	movs	r6, r1
10010726:	681a      	ldr	r2, [r3, #0]
10010728:	3642      	adds	r6, #66	; 0x42
1001072a:	1d11      	adds	r1, r2, #4
1001072c:	6019      	str	r1, [r3, #0]
1001072e:	6813      	ldr	r3, [r2, #0]
10010730:	7033      	strb	r3, [r6, #0]
10010732:	e0a4      	b.n	1001087e <_printf_i+0x1c2>
10010734:	6821      	ldr	r1, [r4, #0]
10010736:	681a      	ldr	r2, [r3, #0]
10010738:	0608      	lsls	r0, r1, #24
1001073a:	d406      	bmi.n	1001074a <_printf_i+0x8e>
1001073c:	0649      	lsls	r1, r1, #25
1001073e:	d504      	bpl.n	1001074a <_printf_i+0x8e>
10010740:	1d11      	adds	r1, r2, #4
10010742:	6019      	str	r1, [r3, #0]
10010744:	2300      	movs	r3, #0
10010746:	5ed5      	ldrsh	r5, [r2, r3]
10010748:	e002      	b.n	10010750 <_printf_i+0x94>
1001074a:	1d11      	adds	r1, r2, #4
1001074c:	6019      	str	r1, [r3, #0]
1001074e:	6815      	ldr	r5, [r2, #0]
10010750:	2d00      	cmp	r5, #0
10010752:	da3b      	bge.n	100107cc <_printf_i+0x110>
10010754:	232d      	movs	r3, #45	; 0x2d
10010756:	9a04      	ldr	r2, [sp, #16]
10010758:	426d      	negs	r5, r5
1001075a:	7013      	strb	r3, [r2, #0]
1001075c:	e036      	b.n	100107cc <_printf_i+0x110>
1001075e:	6821      	ldr	r1, [r4, #0]
10010760:	681a      	ldr	r2, [r3, #0]
10010762:	0608      	lsls	r0, r1, #24
10010764:	d406      	bmi.n	10010774 <_printf_i+0xb8>
10010766:	0649      	lsls	r1, r1, #25
10010768:	d504      	bpl.n	10010774 <_printf_i+0xb8>
1001076a:	6815      	ldr	r5, [r2, #0]
1001076c:	1d11      	adds	r1, r2, #4
1001076e:	6019      	str	r1, [r3, #0]
10010770:	b2ad      	uxth	r5, r5
10010772:	e002      	b.n	1001077a <_printf_i+0xbe>
10010774:	1d11      	adds	r1, r2, #4
10010776:	6019      	str	r1, [r3, #0]
10010778:	6815      	ldr	r5, [r2, #0]
1001077a:	4b5f      	ldr	r3, [pc, #380]	; (100108f8 <_printf_i+0x23c>)
1001077c:	7e22      	ldrb	r2, [r4, #24]
1001077e:	9303      	str	r3, [sp, #12]
10010780:	2708      	movs	r7, #8
10010782:	2a6f      	cmp	r2, #111	; 0x6f
10010784:	d01d      	beq.n	100107c2 <_printf_i+0x106>
10010786:	270a      	movs	r7, #10
10010788:	e01b      	b.n	100107c2 <_printf_i+0x106>
1001078a:	0022      	movs	r2, r4
1001078c:	2178      	movs	r1, #120	; 0x78
1001078e:	3245      	adds	r2, #69	; 0x45
10010790:	7011      	strb	r1, [r2, #0]
10010792:	4a5a      	ldr	r2, [pc, #360]	; (100108fc <_printf_i+0x240>)
10010794:	6819      	ldr	r1, [r3, #0]
10010796:	9203      	str	r2, [sp, #12]
10010798:	1d08      	adds	r0, r1, #4
1001079a:	6822      	ldr	r2, [r4, #0]
1001079c:	6018      	str	r0, [r3, #0]
1001079e:	680d      	ldr	r5, [r1, #0]
100107a0:	0610      	lsls	r0, r2, #24
100107a2:	d402      	bmi.n	100107aa <_printf_i+0xee>
100107a4:	0650      	lsls	r0, r2, #25
100107a6:	d500      	bpl.n	100107aa <_printf_i+0xee>
100107a8:	b2ad      	uxth	r5, r5
100107aa:	07d3      	lsls	r3, r2, #31
100107ac:	d502      	bpl.n	100107b4 <_printf_i+0xf8>
100107ae:	2320      	movs	r3, #32
100107b0:	431a      	orrs	r2, r3
100107b2:	6022      	str	r2, [r4, #0]
100107b4:	2710      	movs	r7, #16
100107b6:	2d00      	cmp	r5, #0
100107b8:	d103      	bne.n	100107c2 <_printf_i+0x106>
100107ba:	2320      	movs	r3, #32
100107bc:	6822      	ldr	r2, [r4, #0]
100107be:	439a      	bics	r2, r3
100107c0:	6022      	str	r2, [r4, #0]
100107c2:	0023      	movs	r3, r4
100107c4:	2200      	movs	r2, #0
100107c6:	3343      	adds	r3, #67	; 0x43
100107c8:	701a      	strb	r2, [r3, #0]
100107ca:	e002      	b.n	100107d2 <_printf_i+0x116>
100107cc:	270a      	movs	r7, #10
100107ce:	4b4a      	ldr	r3, [pc, #296]	; (100108f8 <_printf_i+0x23c>)
100107d0:	9303      	str	r3, [sp, #12]
100107d2:	6863      	ldr	r3, [r4, #4]
100107d4:	60a3      	str	r3, [r4, #8]
100107d6:	2b00      	cmp	r3, #0
100107d8:	db09      	blt.n	100107ee <_printf_i+0x132>
100107da:	2204      	movs	r2, #4
100107dc:	6821      	ldr	r1, [r4, #0]
100107de:	4391      	bics	r1, r2
100107e0:	6021      	str	r1, [r4, #0]
100107e2:	2d00      	cmp	r5, #0
100107e4:	d105      	bne.n	100107f2 <_printf_i+0x136>
100107e6:	9e04      	ldr	r6, [sp, #16]
100107e8:	2b00      	cmp	r3, #0
100107ea:	d011      	beq.n	10010810 <_printf_i+0x154>
100107ec:	e07b      	b.n	100108e6 <_printf_i+0x22a>
100107ee:	2d00      	cmp	r5, #0
100107f0:	d079      	beq.n	100108e6 <_printf_i+0x22a>
100107f2:	9e04      	ldr	r6, [sp, #16]
100107f4:	0028      	movs	r0, r5
100107f6:	0039      	movs	r1, r7
100107f8:	f7fe f8ae 	bl	1000e958 <__aeabi_uidivmod>
100107fc:	9b03      	ldr	r3, [sp, #12]
100107fe:	3e01      	subs	r6, #1
10010800:	5c5b      	ldrb	r3, [r3, r1]
10010802:	0028      	movs	r0, r5
10010804:	7033      	strb	r3, [r6, #0]
10010806:	0039      	movs	r1, r7
10010808:	f7fe f820 	bl	1000e84c <__aeabi_uidiv>
1001080c:	1e05      	subs	r5, r0, #0
1001080e:	d1f1      	bne.n	100107f4 <_printf_i+0x138>
10010810:	2f08      	cmp	r7, #8
10010812:	d109      	bne.n	10010828 <_printf_i+0x16c>
10010814:	6823      	ldr	r3, [r4, #0]
10010816:	07db      	lsls	r3, r3, #31
10010818:	d506      	bpl.n	10010828 <_printf_i+0x16c>
1001081a:	6863      	ldr	r3, [r4, #4]
1001081c:	6922      	ldr	r2, [r4, #16]
1001081e:	4293      	cmp	r3, r2
10010820:	dc02      	bgt.n	10010828 <_printf_i+0x16c>
10010822:	2330      	movs	r3, #48	; 0x30
10010824:	3e01      	subs	r6, #1
10010826:	7033      	strb	r3, [r6, #0]
10010828:	9b04      	ldr	r3, [sp, #16]
1001082a:	1b9b      	subs	r3, r3, r6
1001082c:	6123      	str	r3, [r4, #16]
1001082e:	e02b      	b.n	10010888 <_printf_i+0x1cc>
10010830:	6809      	ldr	r1, [r1, #0]
10010832:	681a      	ldr	r2, [r3, #0]
10010834:	0608      	lsls	r0, r1, #24
10010836:	d407      	bmi.n	10010848 <_printf_i+0x18c>
10010838:	0649      	lsls	r1, r1, #25
1001083a:	d505      	bpl.n	10010848 <_printf_i+0x18c>
1001083c:	1d11      	adds	r1, r2, #4
1001083e:	6019      	str	r1, [r3, #0]
10010840:	6813      	ldr	r3, [r2, #0]
10010842:	8aa2      	ldrh	r2, [r4, #20]
10010844:	801a      	strh	r2, [r3, #0]
10010846:	e004      	b.n	10010852 <_printf_i+0x196>
10010848:	1d11      	adds	r1, r2, #4
1001084a:	6019      	str	r1, [r3, #0]
1001084c:	6813      	ldr	r3, [r2, #0]
1001084e:	6962      	ldr	r2, [r4, #20]
10010850:	601a      	str	r2, [r3, #0]
10010852:	2300      	movs	r3, #0
10010854:	9e04      	ldr	r6, [sp, #16]
10010856:	6123      	str	r3, [r4, #16]
10010858:	e016      	b.n	10010888 <_printf_i+0x1cc>
1001085a:	681a      	ldr	r2, [r3, #0]
1001085c:	1d11      	adds	r1, r2, #4
1001085e:	6019      	str	r1, [r3, #0]
10010860:	6816      	ldr	r6, [r2, #0]
10010862:	2100      	movs	r1, #0
10010864:	6862      	ldr	r2, [r4, #4]
10010866:	0030      	movs	r0, r6
10010868:	f000 f93c 	bl	10010ae4 <memchr>
1001086c:	2800      	cmp	r0, #0
1001086e:	d001      	beq.n	10010874 <_printf_i+0x1b8>
10010870:	1b80      	subs	r0, r0, r6
10010872:	6060      	str	r0, [r4, #4]
10010874:	6863      	ldr	r3, [r4, #4]
10010876:	e003      	b.n	10010880 <_printf_i+0x1c4>
10010878:	0026      	movs	r6, r4
1001087a:	3642      	adds	r6, #66	; 0x42
1001087c:	7032      	strb	r2, [r6, #0]
1001087e:	2301      	movs	r3, #1
10010880:	6123      	str	r3, [r4, #16]
10010882:	2300      	movs	r3, #0
10010884:	9a04      	ldr	r2, [sp, #16]
10010886:	7013      	strb	r3, [r2, #0]
10010888:	9b07      	ldr	r3, [sp, #28]
1001088a:	aa09      	add	r2, sp, #36	; 0x24
1001088c:	9300      	str	r3, [sp, #0]
1001088e:	0021      	movs	r1, r4
10010890:	9b06      	ldr	r3, [sp, #24]
10010892:	9805      	ldr	r0, [sp, #20]
10010894:	f7ff fea4 	bl	100105e0 <_printf_common>
10010898:	1c43      	adds	r3, r0, #1
1001089a:	d102      	bne.n	100108a2 <_printf_i+0x1e6>
1001089c:	2001      	movs	r0, #1
1001089e:	4240      	negs	r0, r0
100108a0:	e027      	b.n	100108f2 <_printf_i+0x236>
100108a2:	6923      	ldr	r3, [r4, #16]
100108a4:	0032      	movs	r2, r6
100108a6:	9906      	ldr	r1, [sp, #24]
100108a8:	9805      	ldr	r0, [sp, #20]
100108aa:	9d07      	ldr	r5, [sp, #28]
100108ac:	47a8      	blx	r5
100108ae:	1c43      	adds	r3, r0, #1
100108b0:	d0f4      	beq.n	1001089c <_printf_i+0x1e0>
100108b2:	6823      	ldr	r3, [r4, #0]
100108b4:	2500      	movs	r5, #0
100108b6:	079b      	lsls	r3, r3, #30
100108b8:	d40f      	bmi.n	100108da <_printf_i+0x21e>
100108ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
100108bc:	68e0      	ldr	r0, [r4, #12]
100108be:	4298      	cmp	r0, r3
100108c0:	da17      	bge.n	100108f2 <_printf_i+0x236>
100108c2:	0018      	movs	r0, r3
100108c4:	e015      	b.n	100108f2 <_printf_i+0x236>
100108c6:	0022      	movs	r2, r4
100108c8:	2301      	movs	r3, #1
100108ca:	3219      	adds	r2, #25
100108cc:	9906      	ldr	r1, [sp, #24]
100108ce:	9805      	ldr	r0, [sp, #20]
100108d0:	9e07      	ldr	r6, [sp, #28]
100108d2:	47b0      	blx	r6
100108d4:	1c43      	adds	r3, r0, #1
100108d6:	d0e1      	beq.n	1001089c <_printf_i+0x1e0>
100108d8:	3501      	adds	r5, #1
100108da:	68e3      	ldr	r3, [r4, #12]
100108dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
100108de:	1a9b      	subs	r3, r3, r2
100108e0:	429d      	cmp	r5, r3
100108e2:	dbf0      	blt.n	100108c6 <_printf_i+0x20a>
100108e4:	e7e9      	b.n	100108ba <_printf_i+0x1fe>
100108e6:	0026      	movs	r6, r4
100108e8:	9b03      	ldr	r3, [sp, #12]
100108ea:	3642      	adds	r6, #66	; 0x42
100108ec:	781b      	ldrb	r3, [r3, #0]
100108ee:	7033      	strb	r3, [r6, #0]
100108f0:	e78e      	b.n	10010810 <_printf_i+0x154>
100108f2:	b00b      	add	sp, #44	; 0x2c
100108f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108f6:	46c0      	nop			; (mov r8, r8)
100108f8:	10012365 	.word	0x10012365
100108fc:	10012376 	.word	0x10012376

10010900 <_putc_r>:
10010900:	b570      	push	{r4, r5, r6, lr}
10010902:	0006      	movs	r6, r0
10010904:	000d      	movs	r5, r1
10010906:	0014      	movs	r4, r2
10010908:	2800      	cmp	r0, #0
1001090a:	d004      	beq.n	10010916 <_putc_r+0x16>
1001090c:	6983      	ldr	r3, [r0, #24]
1001090e:	2b00      	cmp	r3, #0
10010910:	d101      	bne.n	10010916 <_putc_r+0x16>
10010912:	f7ff fb83 	bl	1001001c <__sinit>
10010916:	4b12      	ldr	r3, [pc, #72]	; (10010960 <_putc_r+0x60>)
10010918:	429c      	cmp	r4, r3
1001091a:	d101      	bne.n	10010920 <_putc_r+0x20>
1001091c:	6874      	ldr	r4, [r6, #4]
1001091e:	e008      	b.n	10010932 <_putc_r+0x32>
10010920:	4b10      	ldr	r3, [pc, #64]	; (10010964 <_putc_r+0x64>)
10010922:	429c      	cmp	r4, r3
10010924:	d101      	bne.n	1001092a <_putc_r+0x2a>
10010926:	68b4      	ldr	r4, [r6, #8]
10010928:	e003      	b.n	10010932 <_putc_r+0x32>
1001092a:	4b0f      	ldr	r3, [pc, #60]	; (10010968 <_putc_r+0x68>)
1001092c:	429c      	cmp	r4, r3
1001092e:	d100      	bne.n	10010932 <_putc_r+0x32>
10010930:	68f4      	ldr	r4, [r6, #12]
10010932:	68a3      	ldr	r3, [r4, #8]
10010934:	3b01      	subs	r3, #1
10010936:	60a3      	str	r3, [r4, #8]
10010938:	2b00      	cmp	r3, #0
1001093a:	da05      	bge.n	10010948 <_putc_r+0x48>
1001093c:	69a2      	ldr	r2, [r4, #24]
1001093e:	4293      	cmp	r3, r2
10010940:	db08      	blt.n	10010954 <_putc_r+0x54>
10010942:	b2eb      	uxtb	r3, r5
10010944:	2b0a      	cmp	r3, #10
10010946:	d005      	beq.n	10010954 <_putc_r+0x54>
10010948:	6823      	ldr	r3, [r4, #0]
1001094a:	b2e8      	uxtb	r0, r5
1001094c:	1c5a      	adds	r2, r3, #1
1001094e:	6022      	str	r2, [r4, #0]
10010950:	701d      	strb	r5, [r3, #0]
10010952:	e004      	b.n	1001095e <_putc_r+0x5e>
10010954:	0022      	movs	r2, r4
10010956:	0029      	movs	r1, r5
10010958:	0030      	movs	r0, r6
1001095a:	f7ff f99d 	bl	1000fc98 <__swbuf_r>
1001095e:	bd70      	pop	{r4, r5, r6, pc}
10010960:	100122f4 	.word	0x100122f4
10010964:	10012314 	.word	0x10012314
10010968:	10012334 	.word	0x10012334

1001096c <_sbrk_r>:
1001096c:	2300      	movs	r3, #0
1001096e:	b570      	push	{r4, r5, r6, lr}
10010970:	4c06      	ldr	r4, [pc, #24]	; (1001098c <_sbrk_r+0x20>)
10010972:	0005      	movs	r5, r0
10010974:	0008      	movs	r0, r1
10010976:	6023      	str	r3, [r4, #0]
10010978:	f7f8 fd9c 	bl	100094b4 <_sbrk>
1001097c:	1c43      	adds	r3, r0, #1
1001097e:	d103      	bne.n	10010988 <_sbrk_r+0x1c>
10010980:	6823      	ldr	r3, [r4, #0]
10010982:	2b00      	cmp	r3, #0
10010984:	d000      	beq.n	10010988 <_sbrk_r+0x1c>
10010986:	602b      	str	r3, [r5, #0]
10010988:	bd70      	pop	{r4, r5, r6, pc}
1001098a:	46c0      	nop			; (mov r8, r8)
1001098c:	10013aa8 	.word	0x10013aa8

10010990 <__sread>:
10010990:	b570      	push	{r4, r5, r6, lr}
10010992:	000c      	movs	r4, r1
10010994:	250e      	movs	r5, #14
10010996:	5f49      	ldrsh	r1, [r1, r5]
10010998:	f000 f8b0 	bl	10010afc <_read_r>
1001099c:	2800      	cmp	r0, #0
1001099e:	db03      	blt.n	100109a8 <__sread+0x18>
100109a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
100109a2:	181b      	adds	r3, r3, r0
100109a4:	6563      	str	r3, [r4, #84]	; 0x54
100109a6:	e003      	b.n	100109b0 <__sread+0x20>
100109a8:	89a2      	ldrh	r2, [r4, #12]
100109aa:	4b02      	ldr	r3, [pc, #8]	; (100109b4 <__sread+0x24>)
100109ac:	4013      	ands	r3, r2
100109ae:	81a3      	strh	r3, [r4, #12]
100109b0:	bd70      	pop	{r4, r5, r6, pc}
100109b2:	46c0      	nop			; (mov r8, r8)
100109b4:	ffffefff 	.word	0xffffefff

100109b8 <__swrite>:
100109b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100109ba:	001f      	movs	r7, r3
100109bc:	898b      	ldrh	r3, [r1, #12]
100109be:	0005      	movs	r5, r0
100109c0:	000c      	movs	r4, r1
100109c2:	0016      	movs	r6, r2
100109c4:	05db      	lsls	r3, r3, #23
100109c6:	d505      	bpl.n	100109d4 <__swrite+0x1c>
100109c8:	230e      	movs	r3, #14
100109ca:	5ec9      	ldrsh	r1, [r1, r3]
100109cc:	2200      	movs	r2, #0
100109ce:	2302      	movs	r3, #2
100109d0:	f000 f874 	bl	10010abc <_lseek_r>
100109d4:	89a2      	ldrh	r2, [r4, #12]
100109d6:	4b05      	ldr	r3, [pc, #20]	; (100109ec <__swrite+0x34>)
100109d8:	0028      	movs	r0, r5
100109da:	4013      	ands	r3, r2
100109dc:	81a3      	strh	r3, [r4, #12]
100109de:	0032      	movs	r2, r6
100109e0:	230e      	movs	r3, #14
100109e2:	5ee1      	ldrsh	r1, [r4, r3]
100109e4:	003b      	movs	r3, r7
100109e6:	f000 f81f 	bl	10010a28 <_write_r>
100109ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100109ec:	ffffefff 	.word	0xffffefff

100109f0 <__sseek>:
100109f0:	b570      	push	{r4, r5, r6, lr}
100109f2:	000c      	movs	r4, r1
100109f4:	250e      	movs	r5, #14
100109f6:	5f49      	ldrsh	r1, [r1, r5]
100109f8:	f000 f860 	bl	10010abc <_lseek_r>
100109fc:	89a3      	ldrh	r3, [r4, #12]
100109fe:	1c42      	adds	r2, r0, #1
10010a00:	d103      	bne.n	10010a0a <__sseek+0x1a>
10010a02:	4a05      	ldr	r2, [pc, #20]	; (10010a18 <__sseek+0x28>)
10010a04:	4013      	ands	r3, r2
10010a06:	81a3      	strh	r3, [r4, #12]
10010a08:	e004      	b.n	10010a14 <__sseek+0x24>
10010a0a:	2280      	movs	r2, #128	; 0x80
10010a0c:	0152      	lsls	r2, r2, #5
10010a0e:	4313      	orrs	r3, r2
10010a10:	81a3      	strh	r3, [r4, #12]
10010a12:	6560      	str	r0, [r4, #84]	; 0x54
10010a14:	bd70      	pop	{r4, r5, r6, pc}
10010a16:	46c0      	nop			; (mov r8, r8)
10010a18:	ffffefff 	.word	0xffffefff

10010a1c <__sclose>:
10010a1c:	b510      	push	{r4, lr}
10010a1e:	230e      	movs	r3, #14
10010a20:	5ec9      	ldrsh	r1, [r1, r3]
10010a22:	f000 f815 	bl	10010a50 <_close_r>
10010a26:	bd10      	pop	{r4, pc}

10010a28 <_write_r>:
10010a28:	b570      	push	{r4, r5, r6, lr}
10010a2a:	0005      	movs	r5, r0
10010a2c:	0008      	movs	r0, r1
10010a2e:	0011      	movs	r1, r2
10010a30:	2200      	movs	r2, #0
10010a32:	4c06      	ldr	r4, [pc, #24]	; (10010a4c <_write_r+0x24>)
10010a34:	6022      	str	r2, [r4, #0]
10010a36:	001a      	movs	r2, r3
10010a38:	f7f8 fd14 	bl	10009464 <_write>
10010a3c:	1c43      	adds	r3, r0, #1
10010a3e:	d103      	bne.n	10010a48 <_write_r+0x20>
10010a40:	6823      	ldr	r3, [r4, #0]
10010a42:	2b00      	cmp	r3, #0
10010a44:	d000      	beq.n	10010a48 <_write_r+0x20>
10010a46:	602b      	str	r3, [r5, #0]
10010a48:	bd70      	pop	{r4, r5, r6, pc}
10010a4a:	46c0      	nop			; (mov r8, r8)
10010a4c:	10013aa8 	.word	0x10013aa8

10010a50 <_close_r>:
10010a50:	2300      	movs	r3, #0
10010a52:	b570      	push	{r4, r5, r6, lr}
10010a54:	4c06      	ldr	r4, [pc, #24]	; (10010a70 <_close_r+0x20>)
10010a56:	0005      	movs	r5, r0
10010a58:	0008      	movs	r0, r1
10010a5a:	6023      	str	r3, [r4, #0]
10010a5c:	f7f8 fd3c 	bl	100094d8 <_close>
10010a60:	1c43      	adds	r3, r0, #1
10010a62:	d103      	bne.n	10010a6c <_close_r+0x1c>
10010a64:	6823      	ldr	r3, [r4, #0]
10010a66:	2b00      	cmp	r3, #0
10010a68:	d000      	beq.n	10010a6c <_close_r+0x1c>
10010a6a:	602b      	str	r3, [r5, #0]
10010a6c:	bd70      	pop	{r4, r5, r6, pc}
10010a6e:	46c0      	nop			; (mov r8, r8)
10010a70:	10013aa8 	.word	0x10013aa8

10010a74 <_fstat_r>:
10010a74:	2300      	movs	r3, #0
10010a76:	b570      	push	{r4, r5, r6, lr}
10010a78:	4c06      	ldr	r4, [pc, #24]	; (10010a94 <_fstat_r+0x20>)
10010a7a:	0005      	movs	r5, r0
10010a7c:	0008      	movs	r0, r1
10010a7e:	0011      	movs	r1, r2
10010a80:	6023      	str	r3, [r4, #0]
10010a82:	f7f8 fd2d 	bl	100094e0 <_fstat>
10010a86:	1c43      	adds	r3, r0, #1
10010a88:	d103      	bne.n	10010a92 <_fstat_r+0x1e>
10010a8a:	6823      	ldr	r3, [r4, #0]
10010a8c:	2b00      	cmp	r3, #0
10010a8e:	d000      	beq.n	10010a92 <_fstat_r+0x1e>
10010a90:	602b      	str	r3, [r5, #0]
10010a92:	bd70      	pop	{r4, r5, r6, pc}
10010a94:	10013aa8 	.word	0x10013aa8

10010a98 <_isatty_r>:
10010a98:	2300      	movs	r3, #0
10010a9a:	b570      	push	{r4, r5, r6, lr}
10010a9c:	4c06      	ldr	r4, [pc, #24]	; (10010ab8 <_isatty_r+0x20>)
10010a9e:	0005      	movs	r5, r0
10010aa0:	0008      	movs	r0, r1
10010aa2:	6023      	str	r3, [r4, #0]
10010aa4:	f7f8 fd22 	bl	100094ec <_isatty>
10010aa8:	1c43      	adds	r3, r0, #1
10010aaa:	d103      	bne.n	10010ab4 <_isatty_r+0x1c>
10010aac:	6823      	ldr	r3, [r4, #0]
10010aae:	2b00      	cmp	r3, #0
10010ab0:	d000      	beq.n	10010ab4 <_isatty_r+0x1c>
10010ab2:	602b      	str	r3, [r5, #0]
10010ab4:	bd70      	pop	{r4, r5, r6, pc}
10010ab6:	46c0      	nop			; (mov r8, r8)
10010ab8:	10013aa8 	.word	0x10013aa8

10010abc <_lseek_r>:
10010abc:	b570      	push	{r4, r5, r6, lr}
10010abe:	0005      	movs	r5, r0
10010ac0:	0008      	movs	r0, r1
10010ac2:	0011      	movs	r1, r2
10010ac4:	2200      	movs	r2, #0
10010ac6:	4c06      	ldr	r4, [pc, #24]	; (10010ae0 <_lseek_r+0x24>)
10010ac8:	6022      	str	r2, [r4, #0]
10010aca:	001a      	movs	r2, r3
10010acc:	f7f8 fd10 	bl	100094f0 <_lseek>
10010ad0:	1c43      	adds	r3, r0, #1
10010ad2:	d103      	bne.n	10010adc <_lseek_r+0x20>
10010ad4:	6823      	ldr	r3, [r4, #0]
10010ad6:	2b00      	cmp	r3, #0
10010ad8:	d000      	beq.n	10010adc <_lseek_r+0x20>
10010ada:	602b      	str	r3, [r5, #0]
10010adc:	bd70      	pop	{r4, r5, r6, pc}
10010ade:	46c0      	nop			; (mov r8, r8)
10010ae0:	10013aa8 	.word	0x10013aa8

10010ae4 <memchr>:
10010ae4:	b2c9      	uxtb	r1, r1
10010ae6:	1882      	adds	r2, r0, r2
10010ae8:	4290      	cmp	r0, r2
10010aea:	d004      	beq.n	10010af6 <memchr+0x12>
10010aec:	7803      	ldrb	r3, [r0, #0]
10010aee:	428b      	cmp	r3, r1
10010af0:	d002      	beq.n	10010af8 <memchr+0x14>
10010af2:	3001      	adds	r0, #1
10010af4:	e7f8      	b.n	10010ae8 <memchr+0x4>
10010af6:	2000      	movs	r0, #0
10010af8:	4770      	bx	lr
	...

10010afc <_read_r>:
10010afc:	b570      	push	{r4, r5, r6, lr}
10010afe:	0005      	movs	r5, r0
10010b00:	0008      	movs	r0, r1
10010b02:	0011      	movs	r1, r2
10010b04:	2200      	movs	r2, #0
10010b06:	4c06      	ldr	r4, [pc, #24]	; (10010b20 <_read_r+0x24>)
10010b08:	6022      	str	r2, [r4, #0]
10010b0a:	001a      	movs	r2, r3
10010b0c:	f7f8 fc8a 	bl	10009424 <_read>
10010b10:	1c43      	adds	r3, r0, #1
10010b12:	d103      	bne.n	10010b1c <_read_r+0x20>
10010b14:	6823      	ldr	r3, [r4, #0]
10010b16:	2b00      	cmp	r3, #0
10010b18:	d000      	beq.n	10010b1c <_read_r+0x20>
10010b1a:	602b      	str	r3, [r5, #0]
10010b1c:	bd70      	pop	{r4, r5, r6, pc}
10010b1e:	46c0      	nop			; (mov r8, r8)
10010b20:	10013aa8 	.word	0x10013aa8

10010b24 <__aeabi_lmul>:
10010b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b26:	464f      	mov	r7, r9
10010b28:	4646      	mov	r6, r8
10010b2a:	b4c0      	push	{r6, r7}
10010b2c:	0416      	lsls	r6, r2, #16
10010b2e:	0c36      	lsrs	r6, r6, #16
10010b30:	4699      	mov	r9, r3
10010b32:	0033      	movs	r3, r6
10010b34:	0405      	lsls	r5, r0, #16
10010b36:	0c2c      	lsrs	r4, r5, #16
10010b38:	0c07      	lsrs	r7, r0, #16
10010b3a:	0c15      	lsrs	r5, r2, #16
10010b3c:	4363      	muls	r3, r4
10010b3e:	437e      	muls	r6, r7
10010b40:	436f      	muls	r7, r5
10010b42:	4365      	muls	r5, r4
10010b44:	0c1c      	lsrs	r4, r3, #16
10010b46:	19ad      	adds	r5, r5, r6
10010b48:	1964      	adds	r4, r4, r5
10010b4a:	469c      	mov	ip, r3
10010b4c:	42a6      	cmp	r6, r4
10010b4e:	d903      	bls.n	10010b58 <__aeabi_lmul+0x34>
10010b50:	2380      	movs	r3, #128	; 0x80
10010b52:	025b      	lsls	r3, r3, #9
10010b54:	4698      	mov	r8, r3
10010b56:	4447      	add	r7, r8
10010b58:	4663      	mov	r3, ip
10010b5a:	0c25      	lsrs	r5, r4, #16
10010b5c:	19ef      	adds	r7, r5, r7
10010b5e:	041d      	lsls	r5, r3, #16
10010b60:	464b      	mov	r3, r9
10010b62:	434a      	muls	r2, r1
10010b64:	4343      	muls	r3, r0
10010b66:	0c2d      	lsrs	r5, r5, #16
10010b68:	0424      	lsls	r4, r4, #16
10010b6a:	1964      	adds	r4, r4, r5
10010b6c:	1899      	adds	r1, r3, r2
10010b6e:	19c9      	adds	r1, r1, r7
10010b70:	0020      	movs	r0, r4
10010b72:	bc0c      	pop	{r2, r3}
10010b74:	4690      	mov	r8, r2
10010b76:	4699      	mov	r9, r3
10010b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b7a:	46c0      	nop			; (mov r8, r8)
10010b7c:	100087b8 	.word	0x100087b8
10010b80:	100087c6 	.word	0x100087c6
10010b84:	100087d4 	.word	0x100087d4
10010b88:	100087e2 	.word	0x100087e2
10010b8c:	100087f0 	.word	0x100087f0
10010b90:	100087fe 	.word	0x100087fe
10010b94:	1000880c 	.word	0x1000880c
10010b98:	1000881c 	.word	0x1000881c
10010b9c:	1000882c 	.word	0x1000882c
10010ba0:	1000883c 	.word	0x1000883c
10010ba4:	1000884c 	.word	0x1000884c
10010ba8:	1000885c 	.word	0x1000885c
10010bac:	1000886c 	.word	0x1000886c
10010bb0:	1000887c 	.word	0x1000887c
10010bb4:	1000888c 	.word	0x1000888c
10010bb8:	1000889c 	.word	0x1000889c
10010bbc:	100088ac 	.word	0x100088ac
10010bc0:	100088bc 	.word	0x100088bc
10010bc4:	100088cc 	.word	0x100088cc
10010bc8:	100088dc 	.word	0x100088dc
10010bcc:	100088ec 	.word	0x100088ec
10010bd0:	100088fc 	.word	0x100088fc
10010bd4:	1000890c 	.word	0x1000890c
10010bd8:	1000891c 	.word	0x1000891c
10010bdc:	1000892c 	.word	0x1000892c
10010be0:	1000893c 	.word	0x1000893c
10010be4:	1000894c 	.word	0x1000894c
10010be8:	1000895c 	.word	0x1000895c
10010bec:	1000896a 	.word	0x1000896a
10010bf0:	10008978 	.word	0x10008978
10010bf4:	10008986 	.word	0x10008986
10010bf8:	10008994 	.word	0x10008994
10010bfc:	100089a2 	.word	0x100089a2
10010c00:	100089b0 	.word	0x100089b0
10010c04:	100089be 	.word	0x100089be
10010c08:	100089cc 	.word	0x100089cc
10010c0c:	100089dc 	.word	0x100089dc
10010c10:	100089ec 	.word	0x100089ec
10010c14:	100089fc 	.word	0x100089fc
10010c18:	10008a0c 	.word	0x10008a0c
10010c1c:	10008a1c 	.word	0x10008a1c
10010c20:	10008a2c 	.word	0x10008a2c
10010c24:	10008a3c 	.word	0x10008a3c
10010c28:	10008a4c 	.word	0x10008a4c
10010c2c:	10008a5c 	.word	0x10008a5c
10010c30:	10008a6c 	.word	0x10008a6c
10010c34:	10008a7c 	.word	0x10008a7c
10010c38:	10008a8c 	.word	0x10008a8c
10010c3c:	10008a9c 	.word	0x10008a9c
10010c40:	10008aac 	.word	0x10008aac
10010c44:	10008abc 	.word	0x10008abc
10010c48:	10008acc 	.word	0x10008acc
10010c4c:	10008ada 	.word	0x10008ada
10010c50:	10008ae8 	.word	0x10008ae8
10010c54:	10008b28 	.word	0x10008b28
10010c58:	10008b50 	.word	0x10008b50
10010c5c:	10008b78 	.word	0x10008b78
10010c60:	10008ba0 	.word	0x10008ba0
10010c64:	10008de0 	.word	0x10008de0
10010c68:	10008bd0 	.word	0x10008bd0
10010c6c:	10008be8 	.word	0x10008be8
10010c70:	10008c60 	.word	0x10008c60
10010c74:	10008c78 	.word	0x10008c78
10010c78:	10008c00 	.word	0x10008c00
10010c7c:	10008c18 	.word	0x10008c18
10010c80:	10008c30 	.word	0x10008c30
10010c84:	10008c48 	.word	0x10008c48
10010c88:	10008c90 	.word	0x10008c90
10010c8c:	10008f54 	.word	0x10008f54
10010c90:	10008f54 	.word	0x10008f54
10010c94:	10008f54 	.word	0x10008f54
10010c98:	10008f54 	.word	0x10008f54
10010c9c:	10008f54 	.word	0x10008f54
10010ca0:	10008f54 	.word	0x10008f54
10010ca4:	10008f54 	.word	0x10008f54
10010ca8:	10008f54 	.word	0x10008f54
10010cac:	10008d38 	.word	0x10008d38
10010cb0:	10008d50 	.word	0x10008d50
10010cb4:	10008d68 	.word	0x10008d68
10010cb8:	10008df6 	.word	0x10008df6
10010cbc:	10008cc0 	.word	0x10008cc0
10010cc0:	10008f54 	.word	0x10008f54
10010cc4:	10008f54 	.word	0x10008f54
10010cc8:	10008f54 	.word	0x10008f54
10010ccc:	10008f54 	.word	0x10008f54
10010cd0:	10008f54 	.word	0x10008f54
10010cd4:	10008f54 	.word	0x10008f54
10010cd8:	10008d80 	.word	0x10008d80
10010cdc:	10008d98 	.word	0x10008d98
10010ce0:	10008db0 	.word	0x10008db0
10010ce4:	10008dc8 	.word	0x10008dc8
10010ce8:	10008f54 	.word	0x10008f54
10010cec:	10008f0c 	.word	0x10008f0c
10010cf0:	10008f24 	.word	0x10008f24
10010cf4:	10008f54 	.word	0x10008f54
10010cf8:	10008f54 	.word	0x10008f54
10010cfc:	10008e22 	.word	0x10008e22
10010d00:	10008e38 	.word	0x10008e38
10010d04:	10008e4e 	.word	0x10008e4e
10010d08:	10008e64 	.word	0x10008e64
10010d0c:	10008f54 	.word	0x10008f54
10010d10:	10008f54 	.word	0x10008f54
10010d14:	10008f54 	.word	0x10008f54
10010d18:	10008f54 	.word	0x10008f54
10010d1c:	10008f54 	.word	0x10008f54
10010d20:	10008f54 	.word	0x10008f54
10010d24:	10008f54 	.word	0x10008f54
10010d28:	10008f54 	.word	0x10008f54
10010d2c:	10008b14 	.word	0x10008b14
10010d30:	10008b3c 	.word	0x10008b3c
10010d34:	10008b64 	.word	0x10008b64
10010d38:	10008b8c 	.word	0x10008b8c
10010d3c:	10008bb8 	.word	0x10008bb8
10010d40:	10008ca8 	.word	0x10008ca8
10010d44:	10008cd8 	.word	0x10008cd8
10010d48:	10008cf0 	.word	0x10008cf0
10010d4c:	10008d08 	.word	0x10008d08
10010d50:	10008d20 	.word	0x10008d20
10010d54:	10008e0c 	.word	0x10008e0c
10010d58:	10008e7a 	.word	0x10008e7a
10010d5c:	10008ef4 	.word	0x10008ef4
10010d60:	10008f3c 	.word	0x10008f3c
10010d64:	0000000d 	.word	0x0000000d
10010d68:	6b6e696c 	.word	0x6b6e696c
10010d6c:	736f6c20 	.word	0x736f6c20
10010d70:	65732073 	.word	0x65732073
10010d74:	63697672 	.word	0x63697672
10010d78:	69642065 	.word	0x69642065
10010d7c:	766f6373 	.word	0x766f6373
10010d80:	64657265 	.word	0x64657265
10010d84:	00000000 	.word	0x00000000
10010d88:	656d6d49 	.word	0x656d6d49
10010d8c:	74616964 	.word	0x74616964
10010d90:	6c412065 	.word	0x6c412065
10010d94:	20747265 	.word	0x20747265
10010d98:	76726573 	.word	0x76726573
10010d9c:	20656369 	.word	0x20656369
10010da0:	63736964 	.word	0x63736964
10010da4:	7265766f 	.word	0x7265766f
10010da8:	00006465 	.word	0x00006465
10010dac:	70207854 	.word	0x70207854
10010db0:	7265776f 	.word	0x7265776f
10010db4:	72657320 	.word	0x72657320
10010db8:	65636976 	.word	0x65636976
10010dbc:	73696420 	.word	0x73696420
10010dc0:	65766f63 	.word	0x65766f63
10010dc4:	00646572 	.word	0x00646572
10010dc8:	63736964 	.word	0x63736964
10010dcc:	7265766f 	.word	0x7265766f
10010dd0:	6d6f6320 	.word	0x6d6f6320
10010dd4:	74656c70 	.word	0x74656c70
10010dd8:	706f2065 	.word	0x706f2065
10010ddc:	74617265 	.word	0x74617265
10010de0:	206e6f69 	.word	0x206e6f69
10010de4:	61206425 	.word	0x61206425
10010de8:	2520646e 	.word	0x2520646e
10010dec:	00000064 	.word	0x00000064
10010df0:	43207854 	.word	0x43207854
10010df4:	61726168 	.word	0x61726168
10010df8:	72657463 	.word	0x72657463
10010dfc:	69747369 	.word	0x69747369
10010e00:	69442063 	.word	0x69442063
10010e04:	766f6373 	.word	0x766f6373
10010e08:	20797265 	.word	0x20797265
10010e0c:	72617453 	.word	0x72617453
10010e10:	00646574 	.word	0x00646574
10010e14:	43207854 	.word	0x43207854
10010e18:	61726168 	.word	0x61726168
10010e1c:	72657463 	.word	0x72657463
10010e20:	69747369 	.word	0x69747369
10010e24:	69442063 	.word	0x69442063
10010e28:	766f6373 	.word	0x766f6373
10010e2c:	20797265 	.word	0x20797265
10010e30:	6c696146 	.word	0x6c696146
10010e34:	00006465 	.word	0x00006465
10010e38:	50207854 	.word	0x50207854
10010e3c:	7265776f 	.word	0x7265776f
10010e40:	72655320 	.word	0x72655320
10010e44:	65636976 	.word	0x65636976
10010e48:	746f6e20 	.word	0x746f6e20
10010e4c:	756f4620 	.word	0x756f4620
10010e50:	0000646e 	.word	0x0000646e
10010e54:	6b6e694c 	.word	0x6b6e694c
10010e58:	736f4c20 	.word	0x736f4c20
10010e5c:	68432073 	.word	0x68432073
10010e60:	63617261 	.word	0x63617261
10010e64:	69726574 	.word	0x69726574
10010e68:	63697473 	.word	0x63697473
10010e6c:	73694420 	.word	0x73694420
10010e70:	65766f63 	.word	0x65766f63
10010e74:	53207972 	.word	0x53207972
10010e78:	74726174 	.word	0x74726174
10010e7c:	00006465 	.word	0x00006465
10010e80:	6b6e694c 	.word	0x6b6e694c
10010e84:	736f4c20 	.word	0x736f4c20
10010e88:	68432073 	.word	0x68432073
10010e8c:	63617261 	.word	0x63617261
10010e90:	69726574 	.word	0x69726574
10010e94:	63697473 	.word	0x63697473
10010e98:	73694420 	.word	0x73694420
10010e9c:	65766f63 	.word	0x65766f63
10010ea0:	46207972 	.word	0x46207972
10010ea4:	656c6961 	.word	0x656c6961
10010ea8:	00000064 	.word	0x00000064
10010eac:	6b6e694c 	.word	0x6b6e694c
10010eb0:	736f4c20 	.word	0x736f4c20
10010eb4:	65532073 	.word	0x65532073
10010eb8:	63697672 	.word	0x63697672
10010ebc:	6f6e2065 	.word	0x6f6e2065
10010ec0:	76412074 	.word	0x76412074
10010ec4:	616c6961 	.word	0x616c6961
10010ec8:	00656c62 	.word	0x00656c62
10010ecc:	656d6d49 	.word	0x656d6d49
10010ed0:	74616964 	.word	0x74616964
10010ed4:	68432065 	.word	0x68432065
10010ed8:	63617261 	.word	0x63617261
10010edc:	69726574 	.word	0x69726574
10010ee0:	63697473 	.word	0x63697473
10010ee4:	73694420 	.word	0x73694420
10010ee8:	65766f63 	.word	0x65766f63
10010eec:	53207972 	.word	0x53207972
10010ef0:	74726174 	.word	0x74726174
10010ef4:	00006465 	.word	0x00006465
10010ef8:	656d6d49 	.word	0x656d6d49
10010efc:	74616964 	.word	0x74616964
10010f00:	68432065 	.word	0x68432065
10010f04:	63617261 	.word	0x63617261
10010f08:	69726574 	.word	0x69726574
10010f0c:	63697473 	.word	0x63697473
10010f10:	73694420 	.word	0x73694420
10010f14:	65766f63 	.word	0x65766f63
10010f18:	46207972 	.word	0x46207972
10010f1c:	656c6961 	.word	0x656c6961
10010f20:	00000064 	.word	0x00000064
10010f24:	656d6d49 	.word	0x656d6d49
10010f28:	74616964 	.word	0x74616964
10010f2c:	6c412065 	.word	0x6c412065
10010f30:	20747265 	.word	0x20747265
10010f34:	76726553 	.word	0x76726553
10010f38:	20656369 	.word	0x20656369
10010f3c:	20746f6e 	.word	0x20746f6e
10010f40:	69617641 	.word	0x69617641
10010f44:	6c62616c 	.word	0x6c62616c
10010f48:	00000065 	.word	0x00000065
10010f4c:	584f5250 	.word	0x584f5250
10010f50:	54494d49 	.word	0x54494d49
10010f54:	52502059 	.word	0x52502059
10010f58:	4c49464f 	.word	0x4c49464f
10010f5c:	4f4e2045 	.word	0x4f4e2045
10010f60:	55532054 	.word	0x55532054
10010f64:	524f5050 	.word	0x524f5050
10010f68:	00444554 	.word	0x00444554
10010f6c:	54544147 	.word	0x54544147
10010f70:	61686320 	.word	0x61686320
10010f74:	74636172 	.word	0x74636172
10010f78:	73697265 	.word	0x73697265
10010f7c:	20636974 	.word	0x20636974
10010f80:	63736964 	.word	0x63736964
10010f84:	7265766f 	.word	0x7265766f
10010f88:	6f632079 	.word	0x6f632079
10010f8c:	656c706d 	.word	0x656c706d
10010f90:	00646574 	.word	0x00646574
10010f94:	6b6e694c 	.word	0x6b6e694c
10010f98:	736f4c20 	.word	0x736f4c20
10010f9c:	72772073 	.word	0x72772073
10010fa0:	20657469 	.word	0x20657469
10010fa4:	72616863 	.word	0x72616863
10010fa8:	65746361 	.word	0x65746361
10010fac:	74736972 	.word	0x74736972
10010fb0:	20736369 	.word	0x20736369
10010fb4:	6c696166 	.word	0x6c696166
10010fb8:	00006465 	.word	0x00006465
10010fbc:	72616843 	.word	0x72616843
10010fc0:	65746361 	.word	0x65746361
10010fc4:	74736972 	.word	0x74736972
10010fc8:	52206369 	.word	0x52206369
10010fcc:	20646165 	.word	0x20646165
10010fd0:	75716552 	.word	0x75716552
10010fd4:	20747365 	.word	0x20747365
10010fd8:	6c696166 	.word	0x6c696166
10010fdc:	00006465 	.word	0x00006465
10010fe0:	72617453 	.word	0x72617453
10010fe4:	676e6974 	.word	0x676e6974
10010fe8:	6d697420 	.word	0x6d697420
10010fec:	00007265 	.word	0x00007265
10010ff0:	68676948 	.word	0x68676948
10010ff4:	656c4120 	.word	0x656c4120
10010ff8:	52207472 	.word	0x52207472
10010ffc:	20495353 	.word	0x20495353
10011000:	676e6172 	.word	0x676e6172
10011004:	25203a65 	.word	0x25203a65
10011008:	6d426464 	.word	0x6d426464
1001100c:	646e6120 	.word	0x646e6120
10011010:	6f626120 	.word	0x6f626120
10011014:	00006576 	.word	0x00006576
10011018:	646c694d 	.word	0x646c694d
1001101c:	656c4120 	.word	0x656c4120
10011020:	52207472 	.word	0x52207472
10011024:	20495353 	.word	0x20495353
10011028:	676e6172 	.word	0x676e6172
1001102c:	25203a65 	.word	0x25203a65
10011030:	6d426464 	.word	0x6d426464
10011034:	206f7420 	.word	0x206f7420
10011038:	42646425 	.word	0x42646425
1001103c:	0000006d 	.word	0x0000006d
10011040:	41206f4e 	.word	0x41206f4e
10011044:	7472656c 	.word	0x7472656c
10011048:	53535220 	.word	0x53535220
1001104c:	61722049 	.word	0x61722049
10011050:	3a65676e 	.word	0x3a65676e
10011054:	25202020 	.word	0x25202020
10011058:	6d426464 	.word	0x6d426464
1001105c:	646e6120 	.word	0x646e6120
10011060:	6c656220 	.word	0x6c656220
10011064:	0000776f 	.word	0x0000776f
10011068:	20505850 	.word	0x20505850
1001106c:	6e6e6f43 	.word	0x6e6e6f43
10011070:	20746365 	.word	0x20746365
10011074:	75716572 	.word	0x75716572
10011078:	20747365 	.word	0x20747365
1001107c:	746e6573 	.word	0x746e6573
10011080:	00000000 	.word	0x00000000
10011084:	20505850 	.word	0x20505850
10011088:	6e6e6f43 	.word	0x6e6e6f43
1001108c:	20746365 	.word	0x20746365
10011090:	75716572 	.word	0x75716572
10011094:	20747365 	.word	0x20747365
10011098:	646e6573 	.word	0x646e6573
1001109c:	69616620 	.word	0x69616620
100110a0:	0064656c 	.word	0x0064656c
100110a4:	6f666e49 	.word	0x6f666e49
100110a8:	6544203a 	.word	0x6544203a
100110ac:	65636976 	.word	0x65636976
100110b0:	756f6620 	.word	0x756f6620
100110b4:	6120646e 	.word	0x6120646e
100110b8:	65726464 	.word	0x65726464
100110bc:	5b207373 	.word	0x5b207373
100110c0:	205d6425 	.word	0x205d6425
100110c4:	25783020 	.word	0x25783020
100110c8:	25583230 	.word	0x25583230
100110cc:	25583230 	.word	0x25583230
100110d0:	25583230 	.word	0x25583230
100110d4:	25583230 	.word	0x25583230
100110d8:	25583230 	.word	0x25583230
100110dc:	20583230 	.word	0x20583230
100110e0:	00000000 	.word	0x00000000
100110e4:	502d2d2d 	.word	0x502d2d2d
100110e8:	00005058 	.word	0x00005058
100110ec:	656c6553 	.word	0x656c6553
100110f0:	49207463 	.word	0x49207463
100110f4:	7865646e 	.word	0x7865646e
100110f8:	6d756e20 	.word	0x6d756e20
100110fc:	20726562 	.word	0x20726562
10011100:	43206f74 	.word	0x43206f74
10011104:	656e6e6f 	.word	0x656e6e6f
10011108:	6f207463 	.word	0x6f207463
1001110c:	735b2072 	.word	0x735b2072
10011110:	6f74205d 	.word	0x6f74205d
10011114:	61637320 	.word	0x61637320
10011118:	0000006e 	.word	0x0000006e
1001111c:	656c6553 	.word	0x656c6553
10011120:	5b207463 	.word	0x5b207463
10011124:	74205d73 	.word	0x74205d73
10011128:	6373206f 	.word	0x6373206f
1001112c:	61206e61 	.word	0x61206e61
10011130:	6e696167 	.word	0x6e696167
10011134:	00000000 	.word	0x00000000
10011138:	786f7250 	.word	0x786f7250
1001113c:	74696d69 	.word	0x74696d69
10011140:	72502079 	.word	0x72502079
10011144:	6c69666f 	.word	0x6c69666f
10011148:	75732065 	.word	0x75732065
1001114c:	726f7070 	.word	0x726f7070
10011150:	20646574 	.word	0x20646574
10011154:	69766564 	.word	0x69766564
10011158:	6e206563 	.word	0x6e206563
1001115c:	6620746f 	.word	0x6620746f
10011160:	646e756f 	.word	0x646e756f
10011164:	00000020 	.word	0x00000020
10011168:	69726550 	.word	0x69726550
1001116c:	72656870 	.word	0x72656870
10011170:	69206c61 	.word	0x69206c61
10011174:	6c612073 	.word	0x6c612073
10011178:	64616572 	.word	0x64616572
1001117c:	64412079 	.word	0x64412079
10011180:	74726576 	.word	0x74726576
10011184:	6e697369 	.word	0x6e697369
10011188:	53202e67 	.word	0x53202e67
1001118c:	206e6163 	.word	0x206e6163
10011190:	20746f6e 	.word	0x20746f6e
10011194:	6d726570 	.word	0x6d726570
10011198:	65747469 	.word	0x65747469
1001119c:	00000064 	.word	0x00000064
100111a0:	656c6553 	.word	0x656c6553
100111a4:	5b207463 	.word	0x5b207463
100111a8:	74205d72 	.word	0x74205d72
100111ac:	6552206f 	.word	0x6552206f
100111b0:	6e6e6f63 	.word	0x6e6e6f63
100111b4:	20746365 	.word	0x20746365
100111b8:	5b20726f 	.word	0x5b20726f
100111bc:	53205d73 	.word	0x53205d73
100111c0:	006e6163 	.word	0x006e6163
100111c4:	20505850 	.word	0x20505850
100111c8:	432d6552 	.word	0x432d6552
100111cc:	656e6e6f 	.word	0x656e6e6f
100111d0:	72207463 	.word	0x72207463
100111d4:	65757165 	.word	0x65757165
100111d8:	73207473 	.word	0x73207473
100111dc:	00746e65 	.word	0x00746e65
100111e0:	20505850 	.word	0x20505850
100111e4:	432d6552 	.word	0x432d6552
100111e8:	656e6e6f 	.word	0x656e6e6f
100111ec:	72207463 	.word	0x72207463
100111f0:	65757165 	.word	0x65757165
100111f4:	73207473 	.word	0x73207473
100111f8:	20646e65 	.word	0x20646e65
100111fc:	6c696166 	.word	0x6c696166
10011200:	00006465 	.word	0x00006465
10011204:	69726550 	.word	0x69726550
10011208:	72656870 	.word	0x72656870
1001120c:	69206c61 	.word	0x69206c61
10011210:	6c612073 	.word	0x6c612073
10011214:	64616572 	.word	0x64616572
10011218:	64412079 	.word	0x64412079
1001121c:	74726576 	.word	0x74726576
10011220:	6e697369 	.word	0x6e697369
10011224:	63532c67 	.word	0x63532c67
10011228:	6e206e61 	.word	0x6e206e61
1001122c:	7020746f 	.word	0x7020746f
10011230:	696d7265 	.word	0x696d7265
10011234:	64657474 	.word	0x64657474
10011238:	00000000 	.word	0x00000000
1001123c:	54544147 	.word	0x54544147
10011240:	73694420 	.word	0x73694420
10011244:	65766f63 	.word	0x65766f63
10011248:	72207972 	.word	0x72207972
1001124c:	65757165 	.word	0x65757165
10011250:	73207473 	.word	0x73207473
10011254:	74726174 	.word	0x74726174
10011258:	00206465 	.word	0x00206465
1001125c:	54544147 	.word	0x54544147
10011260:	73694420 	.word	0x73694420
10011264:	65766f63 	.word	0x65766f63
10011268:	72207972 	.word	0x72207972
1001126c:	65757165 	.word	0x65757165
10011270:	66207473 	.word	0x66207473
10011274:	656c6961 	.word	0x656c6961
10011278:	00000064 	.word	0x00000064
1001127c:	100096d6 	.word	0x100096d6
10011280:	100096e8 	.word	0x100096e8
10011284:	100096be 	.word	0x100096be
10011288:	100096be 	.word	0x100096be
1001128c:	100096be 	.word	0x100096be
10011290:	100096d6 	.word	0x100096d6
10011294:	100096be 	.word	0x100096be
10011298:	100096be 	.word	0x100096be
1001129c:	1000a412 	.word	0x1000a412
100112a0:	1000a486 	.word	0x1000a486
100112a4:	1000a3fa 	.word	0x1000a3fa
100112a8:	1000a48c 	.word	0x1000a48c
100112ac:	1000a400 	.word	0x1000a400
100112b0:	1000a406 	.word	0x1000a406
100112b4:	1000a40c 	.word	0x1000a40c
100112b8:	1000a928 	.word	0x1000a928
100112bc:	1000a928 	.word	0x1000a928
100112c0:	1000a928 	.word	0x1000a928
100112c4:	1000a928 	.word	0x1000a928
100112c8:	1000a928 	.word	0x1000a928
100112cc:	1000a928 	.word	0x1000a928
100112d0:	1000a928 	.word	0x1000a928
100112d4:	1000a928 	.word	0x1000a928
100112d8:	1000a928 	.word	0x1000a928
100112dc:	1000a928 	.word	0x1000a928
100112e0:	1000a928 	.word	0x1000a928
100112e4:	1000a928 	.word	0x1000a928
100112e8:	1000a928 	.word	0x1000a928
100112ec:	1000a928 	.word	0x1000a928
100112f0:	1000a928 	.word	0x1000a928
100112f4:	1000a928 	.word	0x1000a928
100112f8:	1000a928 	.word	0x1000a928
100112fc:	1000a928 	.word	0x1000a928
10011300:	1000a928 	.word	0x1000a928
10011304:	1000a946 	.word	0x1000a946
10011308:	1000a946 	.word	0x1000a946
1001130c:	1000a946 	.word	0x1000a946
10011310:	1000a946 	.word	0x1000a946
10011314:	1000a946 	.word	0x1000a946
10011318:	1000a946 	.word	0x1000a946
1001131c:	1000a946 	.word	0x1000a946
10011320:	1000a946 	.word	0x1000a946
10011324:	1000a946 	.word	0x1000a946
10011328:	1000a946 	.word	0x1000a946
1001132c:	1000a968 	.word	0x1000a968
10011330:	1000a968 	.word	0x1000a968
10011334:	1000a968 	.word	0x1000a968
10011338:	1000a968 	.word	0x1000a968
1001133c:	1000a968 	.word	0x1000a968
10011340:	1000a968 	.word	0x1000a968
10011344:	1000a968 	.word	0x1000a968
10011348:	1000a968 	.word	0x1000a968
1001134c:	1000a968 	.word	0x1000a968
10011350:	1000a968 	.word	0x1000a968
10011354:	1000a998 	.word	0x1000a998
10011358:	1000a998 	.word	0x1000a998
1001135c:	1000a998 	.word	0x1000a998
10011360:	1000a998 	.word	0x1000a998
10011364:	1000a998 	.word	0x1000a998
10011368:	1000a998 	.word	0x1000a998
1001136c:	1000a9b2 	.word	0x1000a9b2
10011370:	1000a9b2 	.word	0x1000a9b2
10011374:	1000a9b2 	.word	0x1000a9b2
10011378:	1000a9b2 	.word	0x1000a9b2
1001137c:	1000a9b2 	.word	0x1000a9b2
10011380:	1000a9b2 	.word	0x1000a9b2
10011384:	1000a9b2 	.word	0x1000a9b2
10011388:	1000a9b2 	.word	0x1000a9b2
1001138c:	1000a9b2 	.word	0x1000a9b2
10011390:	1000a9cc 	.word	0x1000a9cc
10011394:	1000a9cc 	.word	0x1000a9cc
10011398:	1000a9ee 	.word	0x1000a9ee
1001139c:	1000a9ee 	.word	0x1000a9ee
100113a0:	1000aa08 	.word	0x1000aa08
100113a4:	1000a9ee 	.word	0x1000a9ee
100113a8:	34333231 	.word	0x34333231
100113ac:	00003635 	.word	0x00003635
100113b0:	efcdab00 	.word	0xefcdab00
100113b4:	00efcdab 	.word	0x00efcdab
100113b8:	b2d60600 	.word	0xb2d60600
100113bc:	f8f005f0 	.word	0xf8f005f0
100113c0:	00000000 	.word	0x00000000

100113c4 <ble_mgr_gatt_server_handle>:
	...
100113dc:	100095d1 100095f9 10009641 00000000     ........A.......
100113ec:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100113fc:	65636552 64657669 00000000 6e616353     Received....Scan
1001140c:	676e696e 61662020 64656c69 00000000     ning  failed....
1001141c:	2d454c42 2055544d 6e616843 2c646567     BLE-MTU Changed,
1001142c:	6e6f4320 7463656e 206e6f69 646e6148      Connection Hand
1001143c:	203a656c 202c6425 2077654e 756c6156     le: %d, New Valu
1001144c:	25203a65 00000064 2055544d 6e616843     e: %d...MTU Chan
1001145c:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
1001146c:	646e6148 253a656c 4f202c64 61726570     Handle:%d, Opera
1001147c:	6e6f6974 0064253a 2055544d 6e616843     tion:%d.MTU Chan
1001148c:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
1001149c:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
100114ac:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
100114bc:	72616843 69725720 43206574 4320646d     Char Write Cmd C
100114cc:	6c706d6f 2c657465 6e6f4320 7463656e     omplete, Connect
100114dc:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
100114ec:	61726570 6e6f6974 0064253a 72616843     peration:%d.Char
100114fc:	69725720 43206574 4620646d 656c6961      Write Cmd Faile
1001150c:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
1001151c:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
1001152c:	253a6e6f 00000064 74617453 6f4e2065     on:%d...State No
1001153c:	61482074 656c646e 64252064 00000000     t Handled %d....
1001154c:	69766544 64206563 6f637369 63656e6e     Device disconnec
1001155c:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
1001156c:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
1001157c:	425f5441 435f454c 5f4e4e4f 41524150     AT_BLE_CONN_PARA
1001158c:	50555f4d 45544144 00000020 72636e45     M_UPDATE ...Encr
1001159c:	69747079 66206e6f 656c6961 00000064     yption failed...
100115ac:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
100115bc:	64657465 63757320 73736563 6c6c7566     eted successfull
100115cc:	00000079 20454c42 69766544 6e206563     y...BLE Device n
100115dc:	6620746f 646e756f 636e6520 74707972     ot found encrypt
100115ec:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
100115fc:	7665443a 20656369 6e756f66 64612064     :Device found ad
1001160c:	73657264 255b2073 20205d64 30257830     dress [%d]  0x%0
1001161c:	30255832 30255832 30255832 30255832     2X%02X%02X%02X%0
1001162c:	30255832 00205832 6f666e49 78616d3a     2X%02X .Info:max
1001163c:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
1001164c:	69766564 72206563 68636165 2e2e6465     device reached..
1001165c:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
1001166c:	6c696146 74206465 7473206f 7320706f     Failed to stop s
1001167c:	6e6e6163 00676e69 69766544 69206563     canning.Device i
1001168c:	253a7864 00000064 23232323 23232323     dx:%d...########
1001169c:	65442323 65636976 756f4620 0000646e     ##Device Found..
100116ac:	23232323 23232323 65442323 65636976     ##########Device
100116bc:	746f4e20 756f4620 0000646e 6e6e6f43      Not Found..Conn
100116cc:	65746365 6f742064 65657020 65642072     ected to peer de
100116dc:	65636976 74697720 64612068 73657264     vice with addres
100116ec:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100116fc:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001170c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001171c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001172c:	61522067 6d6f646e 64646120 73736572     g Random address
1001173c:	63757320 73736563 00002a2a 6f736552      success**..Reso
1001174c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
1001175c:	73736572 69616620 2a64656c 0000002a     ress failed**...
1001176c:	2078614d 626d756e 6f207265 6f632066     Max number of co
1001177c:	63656e6e 6e6f6974 61657220 64656863     nnection reached
1001178c:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
1001179c:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
100117ac:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
100117bc:	64656c69 53202d20 75746174 25203a73     iled - Status: %
100117cc:	00000064 30257830 202c5832 00000000     d...0x%02X, ....
100117dc:	4b525343 0000203a 3a4b5249 00000000     CSRK: ..IRK:....
100117ec:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100117fc:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
1001180c:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
1001181c:	46207473 656c6961 00000064 72696150     st Failed...Pair
1001182c:	20676e69 636f7270 72756465 6f632065     ing procedure co
1001183c:	656c706d 20646574 63637573 66737365     mpleted successf
1001184c:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
1001185c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
1001186c:	726f7473 68742065 61702065 6e697269     store the pairin
1001187c:	6e692067 00006f66 3a4b544c 00000020     g info..LTK: ...
1001188c:	72636e45 69747079 4e206e6f 7320746f     Encryption Not s
1001189c:	74726174 00006465 76616c53 65532065     tarted..Slave Se
100118ac:	69727563 52207974 2d207165 74754120     curity Req - Aut
100118bc:	746e6568 74616369 206e6f69 6c696146     hentication Fail
100118cc:	00006465 656e6547 65746172 544c2064     ed..Generated LT
100118dc:	00203a4b 30257830 00205832 646e6553     K: .0x%02X .Send
100118ec:	20676e69 72696170 20676e69 70736572     ing pairing resp
100118fc:	65736e6f 00000000 72696150 71655220     onse....Pair Req
1001190c:	74736575 41202d20 65687475 6369746e     uest - Authentic
1001191c:	6f697461 6146206e 64656c69 00000000     ation Failed....
1001192c:	65746e45 68742072 61502065 656b7373     Enter the Passke
1001193c:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
1001194c:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
1001195c:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
1001196c:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
1001197c:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
1001198c:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
1001199c:	6568746f 65442072 65636976 00003a29     other Device):..
100119ac:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
100119bc:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
100119cc:	20657275 20746f4e 70707573 6574726f     ure Not supporte
100119dc:	00000064 65746e45 20646572 73736150     d...Entered Pass
100119ec:	646f632d 00003a65 2d434e45 3a716552     -code:..ENC-Req:
100119fc:	6e6f4320 6148206e 656c646e 76654420      Conn Handle Dev
10011a0c:	20656369 6e756f46 64683a64 64253a6c     ice Found:hdl:%d
10011a1c:	00000000 74736f68 76656420 20656369     ....host device 
10011a2c:	76696465 00782520 72656570 76656420     ediv %x.peer dev
10011a3c:	20656369 76696465 00782520 5f636e65     ice ediv %x.enc_
10011a4c:	20716572 76696465 00782520 20656854     req ediv %x.The 
10011a5c:	65646e69 73692078 00642520 2d434e45     index is %d.ENC-
10011a6c:	3a716552 79654b20 756f4620 0000646e     Req: Key Found..
10011a7c:	72696150 20676e69 6f666e69 74616d72     Pairing informat
10011a8c:	206e6f69 7020666f 20726565 69766564     ion of peer devi
10011a9c:	69206563 6f6e2073 76612074 616c6961     ce is not availa
10011aac:	2e656c62 00000000 61656c50 75206573     ble.....Please u
10011abc:	6961706e 68742072 65642065 65636976     npair the device
10011acc:	6f726620 6570206d 64207265 63697665      from peer devic
10011adc:	6f6d2865 656c6962 65732029 6e697474     e(mobile) settin
10011aec:	6d207367 20756e65 20646e61 72617473     gs menu and star
10011afc:	61702074 6e697269 67612067 006e6961     t pairing again.
10011b0c:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10011b1c:	52207473 796c7065 69614620 0064656c     st Reply Failed.
10011b2c:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10011b3c:	52207473 796c7065 00000000 74696e49     st Reply....Init
10011b4c:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10011b5c:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10011b6c:	6f697461 6166206e 64656c69 00000000     ation failed....
10011b7c:	61656c50 63206573 6b636568 65687420     Please check the
10011b8c:	776f7020 61207265 6320646e 656e6e6f      power and conne
10011b9c:	6f697463 202f206e 64726168 65726177     ction / hardware
10011bac:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10011bbc:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10011bcc:	20656d61 20746573 6c696166 00006465     ame set failed..
10011bdc:	61204442 65726464 67207373 66207465     BD address get f
10011bec:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10011bfc:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10011c0c:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10011c1c:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10011c2c:	20746553 20454c42 69766544 63206563     Set BLE Device c
10011c3c:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10011c4c:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10011c5c:	41206563 65726464 66207373 656c6961     ce Address faile
10011c6c:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10011c7c:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10011c8c:	76616c53 65732065 69727563 72207974     Slave security r
10011c9c:	65757165 73207473 65636375 75667373     equest successfu
10011cac:	0000006c 76616c53 65732065 69727563     l...Slave securi
10011cbc:	72207974 65757165 66207473 656c6961     ty request faile
10011ccc:	00000064 2d454c42 6e657645 64253a74     d...BLE-Event:%d
10011cdc:	00000000 54544147 7265535f 20726576     ....GATT_Server 
10011cec:	6e657645 64253a74 00000000 2d454c42     Event:%d....BLE-
10011cfc:	616e614d 3a726567 6e6b6e55 206e776f     Manager:Unknown 
10011d0c:	6e657645 78303d74 00005825 20454c42     Event=0x%X..BLE 
10011d1c:	65766441 73697472 6e656d65 61642074     Advertisement da
10011d2c:	73206174 66207465 656c6961 00000064     ta set failed...
10011d3c:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10011d4c:	61642074 73206174 73207465 65636375     t data set succe
10011d5c:	00007373                                ss..

10011d60 <ble_mgr_gap_handle>:
10011d60:	10009585 1000980d 100095a9 00000000     ................
10011d70:	00000000 100099c9 10009689 10009725     ............%...
10011d80:	10009da1 10009bf1 10009fa1 10009db9     ................
10011d90:	1000a12d 1000a271 10009749 100098b9     -...q...I.......
	...
10011dac:	656d6954 74203272 67676972 0a0d7265     Timer2 trigger..
10011dbc:	00000000 1000bc38 1000bc38 1000bc4c     ....8...8...L...
10011dcc:	1000bc5a 1000bc6e 1000bc82 1000bc9a     Z...n...........
10011ddc:	1000bcae                                ....

10011de0 <sms_gateway_app_gap_cb>:
	...
10011de8:	1000b889 00000000 00000000 1000b849     ............I...
10011df8:	1000b575 00000000 00000000 1000bb71     u...........q...
	...
10011e2c:	72616843 65746361 74736972 77206369     Characteristic w
10011e3c:	65746972 73657220 736e6f70 00000065     rite response...
10011e4c:	72616843 65746361 74736972 72206369     Characteristic r
10011e5c:	20646165 6d207962 69746c75 20656c70     ead by multiple 
10011e6c:	20454c42 70736572 65736e6f 00000073     BLE responses...
10011e7c:	72616843 65746361 74736972 72206369     Characteristic r
10011e8c:	20646165 75207962 20646975 70736572     ead by uuid resp
10011e9c:	65736e6f 00000000 63736944 7265766f     onse....Discover
10011eac:	6f632079 656c706d 00006574 63736544     y complete..Desc
10011ebc:	74706972 6620726f 646e756f 00000000     riptor found....
10011ecc:	72616843 65746361 74736972 66206369     Characteristic f
10011edc:	646e756f 00000000 6d697250 20797261     ound....Primary 
10011eec:	76726573 20656369 6e756f66 00000064     service found...
10011efc:	736d735b 7461675f 79617765 7265735f     [sms_gateway_ser
10011f0c:	65636976 756f665f 205d646e 72657320     vice_found]  ser
10011f1c:	65636976 61686320 74636172 73697265     vice characteris
10011f2c:	73636974 0000003a 65732020 63697672     tics:...  servic
10011f3c:	79742065 203a6570 00006425 65732020     e type: %d..  se
10011f4c:	63697672 75752065 203a6469 00007830     rvice uuid: 0x..
10011f5c:	00007825 74732020 20747261 646e6168     %x..  start hand
10011f6c:	203a656c 00006425 6e652020 61682064     le: %d..  end ha
10011f7c:	656c646e 6425203a 00000000 204e5442     ndle: %d....BTN 
10011f8c:	203a6425 30257830 00007832 52500909     %d: 0x%02x....PR
10011f9c:	20535345 203a6425 00007830 09090909     ESS %d: 0x......
10011fac:	20554d49 203a6425 00007830 3a746e63     IMU %d: 0x..cnt:
10011fbc:	00642520 736d735b 7461675f 79617765      %d.[sms_gateway
10011fcc:	746f6e5f 63696669 6f697461 65725f6e     _notification_re
10011fdc:	76696563 095d6465 69746f4e 61636966     ceived].Notifica
10011fec:	6e6f6974 63657220 65766965 2e2e2e64     tion received...
10011ffc:	202d0a0d 6e6e6f63 6e616820 3a656c64     ..- conn handle:
1001200c:	25783020 0d783430 63202d0a 20726168      0x%04x..- char 
1001201c:	646e6168 203a656c 30257830 0a0d7834     handle: 0x%04x..
1001202c:	6863202d 6c207261 203a6e65 0a0d6425     - char len: %d..
1001203c:	6863202d 76207261 65756c61 7830203a     - char value: 0x
1001204c:	00000000 69766544 63206563 656e6e6f     ....Device conne
1001205c:	64657463 002e2e2e 20202020 202d2020     cted....      - 
1001206c:	65766461 73697472 64206465 3a617461     advertised data:
1001207c:	20783020 00000000 78323025 202e2e2e      0x ....%02x... 
1001208c:	6b6f6f6c 20676e69 20726f66 78323025     looking for %02x
1001209c:	00000000 554f4620 2021444e 692e2e2e     .... FOUND! ...i
100120ac:	7865646e 6425203a 00000000 54544150     ndex: %d....PATT
100120bc:	314e5245 54414d20 4e494843 21212147     ERN1 MATCHING!!!
100120cc:	00000000 706d6f43 62697461 6420656c     ....Compatible d
100120dc:	63697665 6f662065 00646e75 63204f4e     evice found.NO c
100120ec:	61706d6f 6c626974 65642065 65636976     ompatible device
100120fc:	756f6620 0000646e 68746f4e 20676e69      found..Nothing 
1001210c:	6e756f66 00000064 6e616353 72617020     found...Scan par
1001211c:	74656d61 20737265 20657261 61766e69     ameters are inva
1001212c:	0064696c 6e616353 676e696e 69616620     lid.Scanning fai
1001213c:	2064656c 656e6567 20636972 6f727265     led generic erro
1001214c:	00000072 54544147 72657320 65636976     r...GATT service
1001215c:	73696420 65766f63 72207972 65757165      discovery reque
1001216c:	66207473 656c6961 00000064 54544147     st failed...GATT
1001217c:	72657320 65636976 73696420 65766f63      service discove
1001218c:	72207972 65757165 73207473 74726174     ry request start
1001219c:	00006465 69766544 20736563 72696170     ed..Devices pair
100121ac:	2e2e6465 0000002e 626f7250 206d656c     ed......Problem 
100121bc:	6c696877 65732065 6e697474 70672067     while setting gp
100121cc:	70206f69 00006e69 74696e49 696c6169     io pin..Initiali
100121dc:	676e697a 454c4220 70704120 6163696c     zing BLE Applica
100121ec:	6e6f6974 00000000 5f534d53 4e4e5552     tion....SMS_RUNN
100121fc:	2e474e49 00002e2e 5f534d53 43534944     ING.....SMS_DISC
1001220c:	454e4e4f 44455443 002e2e2e 5f534d53     ONNECTED....SMS_
1001221c:	5f544e49 54545542 2e314e4f 00002e2e     INT_BUTTON1.....
1001222c:	5f534d53 5f544e49 54545542 2e324e4f     SMS_INT_BUTTON2.
1001223c:	00002e2e 5f534d53 5f544e49 454d4954     ....SMS_INT_TIME
1001224c:	2e2e3152 0000002e 5f534d53 5f544e49     R1......SMS_INT_
1001225c:	454d4954 2e2e3252 0000002e              TIMER2......

10012268 <sms_gateway_app_gatt_client_cb>:
10012268:	1000b669 00000000 1000b645 1000b621     i.......E...!...
10012278:	1000b5fd 1000b5d9 1000b5b5 1000b591     ................
10012288:	1000b7c5 1000b701 656d7441 6f43206c     ........Atmel Co
10012298:	002e7072                                         rp.

1001229b <CSWTCH.51>:
1001229b:	03010300 03030303 03030303 00020303     ................
100122ab:	00eb9000 00ea5010 00ea5010 00ea4e10     .....P...P...N..
100122bb:	00eb6810 00eb6810 00eb5a10 00ea4e10     .h...h...Z...N..
100122cb:	00eb6810 00eb5a10 00eb6810 00ea4e10     .h...Z...h...N..
100122db:	00eb7010 00eb7010 00eb7010 00ed7010     .p...p...p...p..
100122eb:	00004310 0123b000                                .C...

100122f0 <_global_impure_ptr>:
100122f0:	100123b0                                .#..

100122f4 <__sf_fake_stdin>:
	...

10012314 <__sf_fake_stdout>:
	...

10012334 <__sf_fake_stderr>:
	...
10012354:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10012364:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10012374:	31300046 35343332 39383736 64636261     F.0123456789abcd
10012384:	00006665                                ef..

10012388 <_init>:
10012388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001238a:	46c0      	nop			; (mov r8, r8)
1001238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001238e:	bc08      	pop	{r3}
10012390:	469e      	mov	lr, r3
10012392:	4770      	bx	lr

10012394 <__init_array_start>:
10012394:	100080b1 	.word	0x100080b1

10012398 <_fini>:
10012398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001239a:	46c0      	nop			; (mov r8, r8)
1001239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001239e:	bc08      	pop	{r3}
100123a0:	469e      	mov	lr, r3
100123a2:	4770      	bx	lr

100123a4 <__fini_array_start>:
100123a4:	10008089 	.word	0x10008089
