
SMSgateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aeb8  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10012eb8  10012eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000178c  10012f24  10012f24  00012f24  2**2
                  ALLOC
  3 .stack        00000800  100146b0  100146b0  00012f24  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012f24  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00012f4c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026dbc  00000000  00000000  00013000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ec2  00000000  00000000  00039dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c9b  00000000  00000000  0003cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007f8  00000000  00000000  00043919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000890  00000000  00000000  00044111  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000079f8  00000000  00000000  000449a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc27  00000000  00000000  0004c399  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010b021  00000000  00000000  00058fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ef0  00000000  00000000  00163fe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10012eb8 	.word	0x10012eb8
10008068:	10012eb8 	.word	0x10012eb8
1000806c:	10012f24 	.word	0x10012f24
10008070:	100146b0 	.word	0x100146b0
10008074:	10012f24 	.word	0x10012f24
10008078:	10012ebc 	.word	0x10012ebc
1000807c:	10012f28 	.word	0x10012f28
10008080:	100101f5 	.word	0x100101f5
10008084:	1000c471 	.word	0x1000c471

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012f24 	.word	0x10012f24
100080a8:	00000000 	.word	0x00000000
100080ac:	10012eb8 	.word	0x10012eb8

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012f28 	.word	0x10012f28
100080dc:	10012eb8 	.word	0x10012eb8
100080e0:	10012eb8 	.word	0x10012eb8
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
100080e8:	2800      	cmp	r0, #0
100080ea:	d107      	bne.n	100080fc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080ec:	2900      	cmp	r1, #0
100080ee:	d102      	bne.n	100080f6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
100080f0:	4b06      	ldr	r3, [pc, #24]	; (1000810c <dualtimer_set_counter+0x24>)
100080f2:	601a      	str	r2, [r3, #0]
100080f4:	e009      	b.n	1000810a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
100080f6:	4b05      	ldr	r3, [pc, #20]	; (1000810c <dualtimer_set_counter+0x24>)
100080f8:	619a      	str	r2, [r3, #24]
100080fa:	e006      	b.n	1000810a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100080fc:	2900      	cmp	r1, #0
100080fe:	d102      	bne.n	10008106 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008100:	4b02      	ldr	r3, [pc, #8]	; (1000810c <dualtimer_set_counter+0x24>)
10008102:	621a      	str	r2, [r3, #32]
10008104:	e001      	b.n	1000810a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008106:	4b01      	ldr	r3, [pc, #4]	; (1000810c <dualtimer_set_counter+0x24>)
10008108:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000810a:	4770      	bx	lr
1000810c:	40001000 	.word	0x40001000

10008110 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008110:	2800      	cmp	r0, #0
10008112:	d105      	bne.n	10008120 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008114:	4a06      	ldr	r2, [pc, #24]	; (10008130 <dualtimer_enable+0x20>)
10008116:	7a11      	ldrb	r1, [r2, #8]
10008118:	2380      	movs	r3, #128	; 0x80
1000811a:	430b      	orrs	r3, r1
1000811c:	7213      	strb	r3, [r2, #8]
1000811e:	e005      	b.n	1000812c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008120:	4903      	ldr	r1, [pc, #12]	; (10008130 <dualtimer_enable+0x20>)
10008122:	2228      	movs	r2, #40	; 0x28
10008124:	5c88      	ldrb	r0, [r1, r2]
10008126:	2380      	movs	r3, #128	; 0x80
10008128:	4303      	orrs	r3, r0
1000812a:	548b      	strb	r3, [r1, r2]
	}
}
1000812c:	4770      	bx	lr
1000812e:	46c0      	nop			; (mov r8, r8)
10008130:	40001000 	.word	0x40001000

10008134 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008134:	2800      	cmp	r0, #0
10008136:	d105      	bne.n	10008144 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008138:	4a06      	ldr	r2, [pc, #24]	; (10008154 <dualtimer_disable+0x20>)
1000813a:	7a11      	ldrb	r1, [r2, #8]
1000813c:	237f      	movs	r3, #127	; 0x7f
1000813e:	400b      	ands	r3, r1
10008140:	7213      	strb	r3, [r2, #8]
10008142:	e005      	b.n	10008150 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008144:	4903      	ldr	r1, [pc, #12]	; (10008154 <dualtimer_disable+0x20>)
10008146:	2228      	movs	r2, #40	; 0x28
10008148:	5c88      	ldrb	r0, [r1, r2]
1000814a:	237f      	movs	r3, #127	; 0x7f
1000814c:	4003      	ands	r3, r0
1000814e:	548b      	strb	r3, [r1, r2]
	}
}
10008150:	4770      	bx	lr
10008152:	46c0      	nop			; (mov r8, r8)
10008154:	40001000 	.word	0x40001000

10008158 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008158:	2800      	cmp	r0, #0
1000815a:	d102      	bne.n	10008162 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000815c:	4b02      	ldr	r3, [pc, #8]	; (10008168 <dualtimer_register_callback+0x10>)
1000815e:	6019      	str	r1, [r3, #0]
10008160:	e001      	b.n	10008166 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008162:	4b02      	ldr	r3, [pc, #8]	; (1000816c <dualtimer_register_callback+0x14>)
10008164:	6019      	str	r1, [r3, #0]
	}
}
10008166:	4770      	bx	lr
10008168:	10012f40 	.word	0x10012f40
1000816c:	10012f44 	.word	0x10012f44

10008170 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008170:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10008172:	4b17      	ldr	r3, [pc, #92]	; (100081d0 <gpio_port0_isr_handler+0x60>)
10008174:	681d      	ldr	r5, [r3, #0]
10008176:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008178:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000817a:	07cb      	lsls	r3, r1, #31
1000817c:	d407      	bmi.n	1000818e <gpio_port0_isr_handler+0x1e>
1000817e:	2301      	movs	r3, #1
10008180:	2401      	movs	r4, #1
10008182:	0018      	movs	r0, r3
10008184:	0022      	movs	r2, r4
10008186:	409a      	lsls	r2, r3
10008188:	4211      	tst	r1, r2
1000818a:	d016      	beq.n	100081ba <gpio_port0_isr_handler+0x4a>
1000818c:	e001      	b.n	10008192 <gpio_port0_isr_handler+0x22>
1000818e:	2201      	movs	r2, #1
10008190:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
10008192:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
10008194:	431a      	orrs	r2, r3
10008196:	b292      	uxth	r2, r2
10008198:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000819a:	2346      	movs	r3, #70	; 0x46
1000819c:	4a0c      	ldr	r2, [pc, #48]	; (100081d0 <gpio_port0_isr_handler+0x60>)
1000819e:	5ad3      	ldrh	r3, [r2, r3]
100081a0:	4103      	asrs	r3, r0
100081a2:	07db      	lsls	r3, r3, #31
100081a4:	d50c      	bpl.n	100081c0 <gpio_port0_isr_handler+0x50>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
100081a6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
100081a8:	5ad3      	ldrh	r3, [r2, r3]
100081aa:	4103      	asrs	r3, r0
100081ac:	07db      	lsls	r3, r3, #31
100081ae:	d507      	bpl.n	100081c0 <gpio_port0_isr_handler+0x50>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
100081b0:	0080      	lsls	r0, r0, #2
100081b2:	1810      	adds	r0, r2, r0
100081b4:	6843      	ldr	r3, [r0, #4]
100081b6:	4798      	blx	r3
100081b8:	e002      	b.n	100081c0 <gpio_port0_isr_handler+0x50>
100081ba:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100081bc:	2b10      	cmp	r3, #16
100081be:	d1e0      	bne.n	10008182 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100081c0:	2180      	movs	r1, #128	; 0x80
100081c2:	0409      	lsls	r1, r1, #16
100081c4:	23c0      	movs	r3, #192	; 0xc0
100081c6:	005b      	lsls	r3, r3, #1
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <gpio_port0_isr_handler+0x64>)
100081ca:	50d1      	str	r1, [r2, r3]
			_gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
100081cc:	bd70      	pop	{r4, r5, r6, pc}
100081ce:	46c0      	nop			; (mov r8, r8)
100081d0:	100131dc 	.word	0x100131dc
100081d4:	e000e100 	.word	0xe000e100

100081d8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
100081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
100081da:	4b19      	ldr	r3, [pc, #100]	; (10008240 <gpio_port1_isr_handler+0x68>)
100081dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100081de:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
100081e0:	b2b6      	uxth	r6, r6
100081e2:	0037      	movs	r7, r6
100081e4:	2500      	movs	r5, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081e6:	0b76      	lsrs	r6, r6, #13
100081e8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100081ea:	4c15      	ldr	r4, [pc, #84]	; (10008240 <gpio_port1_isr_handler+0x68>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081ec:	2e00      	cmp	r6, #0
100081ee:	d001      	beq.n	100081f4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
100081f0:	4b14      	ldr	r3, [pc, #80]	; (10008244 <gpio_port1_isr_handler+0x6c>)
100081f2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100081f4:	002a      	movs	r2, r5
100081f6:	2301      	movs	r3, #1
100081f8:	40ab      	lsls	r3, r5
100081fa:	421f      	tst	r7, r3
100081fc:	d015      	beq.n	1000822a <gpio_port1_isr_handler+0x52>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100081fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
10008200:	8f08      	ldrh	r0, [r1, #56]	; 0x38
10008202:	4303      	orrs	r3, r0
10008204:	b29b      	uxth	r3, r3
10008206:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008208:	238e      	movs	r3, #142	; 0x8e
1000820a:	5ae3      	ldrh	r3, [r4, r3]
1000820c:	412b      	asrs	r3, r5
1000820e:	07db      	lsls	r3, r3, #31
10008210:	d50b      	bpl.n	1000822a <gpio_port1_isr_handler+0x52>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10008212:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008214:	490a      	ldr	r1, [pc, #40]	; (10008240 <gpio_port1_isr_handler+0x68>)
10008216:	5acb      	ldrh	r3, [r1, r3]
10008218:	412b      	asrs	r3, r5
1000821a:	07db      	lsls	r3, r3, #31
1000821c:	d505      	bpl.n	1000822a <gpio_port1_isr_handler+0x52>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000821e:	3212      	adds	r2, #18
10008220:	0092      	lsls	r2, r2, #2
10008222:	188a      	adds	r2, r1, r2
10008224:	6853      	ldr	r3, [r2, #4]
10008226:	4798      	blx	r3
				break;
10008228:	e002      	b.n	10008230 <gpio_port1_isr_handler+0x58>
1000822a:	3501      	adds	r5, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000822c:	2d10      	cmp	r5, #16
1000822e:	d1dd      	bne.n	100081ec <gpio_port1_isr_handler+0x14>
10008230:	2180      	movs	r1, #128	; 0x80
10008232:	0449      	lsls	r1, r1, #17
10008234:	23c0      	movs	r3, #192	; 0xc0
10008236:	005b      	lsls	r3, r3, #1
10008238:	4a03      	ldr	r2, [pc, #12]	; (10008248 <gpio_port1_isr_handler+0x70>)
1000823a:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000823e:	46c0      	nop			; (mov r8, r8)
10008240:	100131dc 	.word	0x100131dc
10008244:	0001bc51 	.word	0x0001bc51
10008248:	e000e100 	.word	0xe000e100

1000824c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000824c:	2300      	movs	r3, #0
1000824e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008250:	2201      	movs	r2, #1
10008252:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008254:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008256:	70c3      	strb	r3, [r0, #3]
}
10008258:	4770      	bx	lr
1000825a:	46c0      	nop			; (mov r8, r8)

1000825c <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000825c:	b530      	push	{r4, r5, lr}
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1) || \
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
1000825e:	2317      	movs	r3, #23

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008260:	2801      	cmp	r0, #1
10008262:	d800      	bhi.n	10008266 <gpio_pin_set_config+0xa>
10008264:	e0a2      	b.n	100083ac <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_1) || \
10008266:	280e      	cmp	r0, #14
10008268:	d100      	bne.n	1000826c <gpio_pin_set_config+0x10>
1000826a:	e09f      	b.n	100083ac <gpio_pin_set_config+0x150>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000826c:	2807      	cmp	r0, #7
1000826e:	d809      	bhi.n	10008284 <gpio_pin_set_config+0x28>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008270:	4d4f      	ldr	r5, [pc, #316]	; (100083b0 <gpio_pin_set_config+0x154>)
10008272:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008274:	3b10      	subs	r3, #16
10008276:	4003      	ands	r3, r0
10008278:	009b      	lsls	r3, r3, #2
1000827a:	2407      	movs	r4, #7
1000827c:	409c      	lsls	r4, r3
1000827e:	43a2      	bics	r2, r4
10008280:	646a      	str	r2, [r5, #68]	; 0x44
10008282:	e016      	b.n	100082b2 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 15) {
10008284:	280f      	cmp	r0, #15
10008286:	d809      	bhi.n	1000829c <gpio_pin_set_config+0x40>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008288:	4d49      	ldr	r5, [pc, #292]	; (100083b0 <gpio_pin_set_config+0x154>)
1000828a:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000828c:	2307      	movs	r3, #7
1000828e:	4003      	ands	r3, r0
10008290:	009b      	lsls	r3, r3, #2
10008292:	2407      	movs	r4, #7
10008294:	409c      	lsls	r4, r3
10008296:	43a2      	bics	r2, r4
10008298:	64aa      	str	r2, [r5, #72]	; 0x48
1000829a:	e00a      	b.n	100082b2 <gpio_pin_set_config+0x56>
		} else if (gpio_pin <= 23) {
1000829c:	2817      	cmp	r0, #23
1000829e:	d808      	bhi.n	100082b2 <gpio_pin_set_config+0x56>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100082a0:	4d43      	ldr	r5, [pc, #268]	; (100083b0 <gpio_pin_set_config+0x154>)
100082a2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100082a4:	2307      	movs	r3, #7
100082a6:	4003      	ands	r3, r0
100082a8:	009b      	lsls	r3, r3, #2
100082aa:	2407      	movs	r4, #7
100082ac:	409c      	lsls	r4, r3
100082ae:	43a2      	bics	r2, r4
100082b0:	64ea      	str	r2, [r5, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100082b2:	0003      	movs	r3, r0
100082b4:	3b1d      	subs	r3, #29
100082b6:	2b02      	cmp	r3, #2
100082b8:	d829      	bhi.n	1000830e <gpio_pin_set_config+0xb2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100082ba:	784b      	ldrb	r3, [r1, #1]
100082bc:	2b01      	cmp	r3, #1
100082be:	d108      	bne.n	100082d2 <gpio_pin_set_config+0x76>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100082c0:	4d3c      	ldr	r5, [pc, #240]	; (100083b4 <gpio_pin_set_config+0x158>)
100082c2:	7d2b      	ldrb	r3, [r5, #20]
100082c4:	241f      	movs	r4, #31
100082c6:	1a24      	subs	r4, r4, r0
100082c8:	2201      	movs	r2, #1
100082ca:	40a2      	lsls	r2, r4
100082cc:	4393      	bics	r3, r2
100082ce:	752b      	strb	r3, [r5, #20]
100082d0:	e008      	b.n	100082e4 <gpio_pin_set_config+0x88>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100082d2:	4c38      	ldr	r4, [pc, #224]	; (100083b4 <gpio_pin_set_config+0x158>)
100082d4:	7d25      	ldrb	r5, [r4, #20]
100082d6:	221f      	movs	r2, #31
100082d8:	1a12      	subs	r2, r2, r0
100082da:	2301      	movs	r3, #1
100082dc:	4093      	lsls	r3, r2
100082de:	432b      	orrs	r3, r5
100082e0:	b2db      	uxtb	r3, r3
100082e2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100082e4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100082e6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100082e8:	2a00      	cmp	r2, #0
100082ea:	d05f      	beq.n	100083ac <gpio_pin_set_config+0x150>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100082ec:	4931      	ldr	r1, [pc, #196]	; (100083b4 <gpio_pin_set_config+0x158>)
100082ee:	880c      	ldrh	r4, [r1, #0]
100082f0:	221f      	movs	r2, #31
100082f2:	1a10      	subs	r0, r2, r0
100082f4:	0080      	lsls	r0, r0, #2
100082f6:	3301      	adds	r3, #1
100082f8:	4083      	lsls	r3, r0
100082fa:	4323      	orrs	r3, r4
100082fc:	b29b      	uxth	r3, r3
100082fe:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008300:	4a2d      	ldr	r2, [pc, #180]	; (100083b8 <gpio_pin_set_config+0x15c>)
10008302:	7811      	ldrb	r1, [r2, #0]
10008304:	2302      	movs	r3, #2
10008306:	430b      	orrs	r3, r1
10008308:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000830a:	2300      	movs	r3, #0
1000830c:	e04e      	b.n	100083ac <gpio_pin_set_config+0x150>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000830e:	780a      	ldrb	r2, [r1, #0]
10008310:	2a00      	cmp	r2, #0
10008312:	d131      	bne.n	10008378 <gpio_pin_set_config+0x11c>
				if(gpio_pin < 16) {
10008314:	280f      	cmp	r0, #15
10008316:	d805      	bhi.n	10008324 <gpio_pin_set_config+0xc8>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008318:	2301      	movs	r3, #1
1000831a:	4083      	lsls	r3, r0
1000831c:	b29b      	uxth	r3, r3
1000831e:	4a27      	ldr	r2, [pc, #156]	; (100083bc <gpio_pin_set_config+0x160>)
10008320:	8293      	strh	r3, [r2, #20]
10008322:	e006      	b.n	10008332 <gpio_pin_set_config+0xd6>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008324:	220f      	movs	r2, #15
10008326:	4002      	ands	r2, r0
10008328:	2301      	movs	r3, #1
1000832a:	4093      	lsls	r3, r2
1000832c:	b29b      	uxth	r3, r3
1000832e:	4a24      	ldr	r2, [pc, #144]	; (100083c0 <gpio_pin_set_config+0x164>)
10008330:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
10008332:	784b      	ldrb	r3, [r1, #1]
10008334:	2b01      	cmp	r3, #1
10008336:	d00c      	beq.n	10008352 <gpio_pin_set_config+0xf6>
10008338:	2b00      	cmp	r3, #0
1000833a:	d002      	beq.n	10008342 <gpio_pin_set_config+0xe6>
1000833c:	2b02      	cmp	r3, #2
1000833e:	d010      	beq.n	10008362 <gpio_pin_set_config+0x106>
10008340:	e033      	b.n	100083aa <gpio_pin_set_config+0x14e>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008342:	491b      	ldr	r1, [pc, #108]	; (100083b0 <gpio_pin_set_config+0x154>)
10008344:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008346:	2301      	movs	r3, #1
10008348:	4083      	lsls	r3, r0
1000834a:	4313      	orrs	r3, r2
1000834c:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000834e:	2300      	movs	r3, #0
				}
				/* pull_enable. */
				switch(config->input_pull) {
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
10008350:	e02c      	b.n	100083ac <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008352:	4917      	ldr	r1, [pc, #92]	; (100083b0 <gpio_pin_set_config+0x154>)
10008354:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008356:	2201      	movs	r2, #1
10008358:	4082      	lsls	r2, r0
1000835a:	4393      	bics	r3, r2
1000835c:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000835e:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
						break;
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008360:	e024      	b.n	100083ac <gpio_pin_set_config+0x150>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008362:	4b13      	ldr	r3, [pc, #76]	; (100083b0 <gpio_pin_set_config+0x154>)
10008364:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008366:	2201      	movs	r2, #1
10008368:	4082      	lsls	r2, r0
1000836a:	4311      	orrs	r1, r2
1000836c:	6559      	str	r1, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000836e:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008370:	4391      	bics	r1, r2
10008372:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008374:	2300      	movs	r3, #0
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
10008376:	e019      	b.n	100083ac <gpio_pin_set_config+0x150>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008378:	2300      	movs	r3, #0
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
						break;
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000837a:	2a01      	cmp	r2, #1
1000837c:	d116      	bne.n	100083ac <gpio_pin_set_config+0x150>
				if (gpio_pin < 16) {
1000837e:	280f      	cmp	r0, #15
10008380:	d808      	bhi.n	10008394 <gpio_pin_set_config+0x138>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
10008382:	4a0e      	ldr	r2, [pc, #56]	; (100083bc <gpio_pin_set_config+0x160>)
10008384:	8a11      	ldrh	r1, [r2, #16]
10008386:	3301      	adds	r3, #1
10008388:	4083      	lsls	r3, r0
1000838a:	430b      	orrs	r3, r1
1000838c:	b29b      	uxth	r3, r3
1000838e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008390:	2300      	movs	r3, #0
10008392:	e00b      	b.n	100083ac <gpio_pin_set_config+0x150>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
10008394:	4a0a      	ldr	r2, [pc, #40]	; (100083c0 <gpio_pin_set_config+0x164>)
10008396:	8a11      	ldrh	r1, [r2, #16]
10008398:	230f      	movs	r3, #15
1000839a:	4018      	ands	r0, r3
1000839c:	3b0e      	subs	r3, #14
1000839e:	4083      	lsls	r3, r0
100083a0:	430b      	orrs	r3, r1
100083a2:	b29b      	uxth	r3, r3
100083a4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083a6:	2300      	movs	r3, #0
100083a8:	e000      	b.n	100083ac <gpio_pin_set_config+0x150>
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
						break;
					default:
						status = STATUS_ERR_INVALID_ARG;
100083aa:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100083ac:	0018      	movs	r0, r3
100083ae:	bd30      	pop	{r4, r5, pc}
100083b0:	4000b000 	.word	0x4000b000
100083b4:	4000f000 	.word	0x4000f000
100083b8:	4000e000 	.word	0x4000e000
100083bc:	40010000 	.word	0x40010000
100083c0:	40011000 	.word	0x40011000

100083c4 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100083c4:	b510      	push	{r4, lr}
	if(gpio_pin < 16) {
100083c6:	280f      	cmp	r0, #15
100083c8:	d810      	bhi.n	100083ec <gpio_pin_set_output_level+0x28>
		if(level) {
100083ca:	2900      	cmp	r1, #0
100083cc:	d007      	beq.n	100083de <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100083ce:	4a12      	ldr	r2, [pc, #72]	; (10008418 <gpio_pin_set_output_level+0x54>)
100083d0:	8891      	ldrh	r1, [r2, #4]
100083d2:	2301      	movs	r3, #1
100083d4:	4083      	lsls	r3, r0
100083d6:	430b      	orrs	r3, r1
100083d8:	b29b      	uxth	r3, r3
100083da:	8093      	strh	r3, [r2, #4]
100083dc:	e01a      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100083de:	490e      	ldr	r1, [pc, #56]	; (10008418 <gpio_pin_set_output_level+0x54>)
100083e0:	888b      	ldrh	r3, [r1, #4]
100083e2:	2201      	movs	r2, #1
100083e4:	4082      	lsls	r2, r0
100083e6:	4393      	bics	r3, r2
100083e8:	808b      	strh	r3, [r1, #4]
100083ea:	e013      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		}
	} else {
		if(level) {
100083ec:	2900      	cmp	r1, #0
100083ee:	d009      	beq.n	10008404 <gpio_pin_set_output_level+0x40>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
100083f0:	490a      	ldr	r1, [pc, #40]	; (1000841c <gpio_pin_set_output_level+0x58>)
100083f2:	888c      	ldrh	r4, [r1, #4]
100083f4:	220f      	movs	r2, #15
100083f6:	4010      	ands	r0, r2
100083f8:	2301      	movs	r3, #1
100083fa:	4083      	lsls	r3, r0
100083fc:	4323      	orrs	r3, r4
100083fe:	b29b      	uxth	r3, r3
10008400:	808b      	strh	r3, [r1, #4]
10008402:	e007      	b.n	10008414 <gpio_pin_set_output_level+0x50>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008404:	4905      	ldr	r1, [pc, #20]	; (1000841c <gpio_pin_set_output_level+0x58>)
10008406:	888b      	ldrh	r3, [r1, #4]
10008408:	220f      	movs	r2, #15
1000840a:	4010      	ands	r0, r2
1000840c:	3a0e      	subs	r2, #14
1000840e:	4082      	lsls	r2, r0
10008410:	4393      	bics	r3, r2
10008412:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008414:	bd10      	pop	{r4, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40010000 	.word	0x40010000
1000841c:	40011000 	.word	0x40011000

10008420 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008420:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008422:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008424:	23ff      	movs	r3, #255	; 0xff
10008426:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008428:	2807      	cmp	r0, #7
1000842a:	d833      	bhi.n	10008494 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000842c:	4a4e      	ldr	r2, [pc, #312]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000842e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008430:	3bf8      	subs	r3, #248	; 0xf8
10008432:	4003      	ands	r3, r0
10008434:	009b      	lsls	r3, r3, #2
10008436:	2607      	movs	r6, #7
10008438:	409e      	lsls	r6, r3
1000843a:	43b4      	bics	r4, r6
1000843c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000843e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008440:	000e      	movs	r6, r1
10008442:	409e      	lsls	r6, r3
10008444:	0033      	movs	r3, r6
10008446:	4323      	orrs	r3, r4
10008448:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000844a:	2901      	cmp	r1, #1
1000844c:	d000      	beq.n	10008450 <gpio_pinmux_cofiguration+0x30>
1000844e:	e08a      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008450:	2803      	cmp	r0, #3
10008452:	d80f      	bhi.n	10008474 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008454:	0011      	movs	r1, r2
10008456:	22d0      	movs	r2, #208	; 0xd0
10008458:	0052      	lsls	r2, r2, #1
1000845a:	588c      	ldr	r4, [r1, r2]
1000845c:	2303      	movs	r3, #3
1000845e:	4018      	ands	r0, r3
10008460:	00c0      	lsls	r0, r0, #3
10008462:	333c      	adds	r3, #60	; 0x3c
10008464:	4083      	lsls	r3, r0
10008466:	439c      	bics	r4, r3
10008468:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000846a:	588b      	ldr	r3, [r1, r2]
1000846c:	4085      	lsls	r5, r0
1000846e:	431d      	orrs	r5, r3
10008470:	508d      	str	r5, [r1, r2]
10008472:	e078      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008474:	493c      	ldr	r1, [pc, #240]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
10008476:	22d2      	movs	r2, #210	; 0xd2
10008478:	0052      	lsls	r2, r2, #1
1000847a:	588c      	ldr	r4, [r1, r2]
1000847c:	2303      	movs	r3, #3
1000847e:	4018      	ands	r0, r3
10008480:	00c0      	lsls	r0, r0, #3
10008482:	333c      	adds	r3, #60	; 0x3c
10008484:	4083      	lsls	r3, r0
10008486:	439c      	bics	r4, r3
10008488:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000848a:	588b      	ldr	r3, [r1, r2]
1000848c:	4085      	lsls	r5, r0
1000848e:	431d      	orrs	r5, r3
10008490:	508d      	str	r5, [r1, r2]
10008492:	e068      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008494:	280f      	cmp	r0, #15
10008496:	d832      	bhi.n	100084fe <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008498:	4a33      	ldr	r2, [pc, #204]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000849a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000849c:	2307      	movs	r3, #7
1000849e:	4003      	ands	r3, r0
100084a0:	009b      	lsls	r3, r3, #2
100084a2:	2607      	movs	r6, #7
100084a4:	409e      	lsls	r6, r3
100084a6:	43b4      	bics	r4, r6
100084a8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100084aa:	6c94      	ldr	r4, [r2, #72]	; 0x48
100084ac:	000e      	movs	r6, r1
100084ae:	409e      	lsls	r6, r3
100084b0:	0033      	movs	r3, r6
100084b2:	4323      	orrs	r3, r4
100084b4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100084b6:	2901      	cmp	r1, #1
100084b8:	d155      	bne.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100084ba:	280b      	cmp	r0, #11
100084bc:	d80f      	bhi.n	100084de <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084be:	0011      	movs	r1, r2
100084c0:	22d4      	movs	r2, #212	; 0xd4
100084c2:	0052      	lsls	r2, r2, #1
100084c4:	588c      	ldr	r4, [r1, r2]
100084c6:	2303      	movs	r3, #3
100084c8:	4018      	ands	r0, r3
100084ca:	00c0      	lsls	r0, r0, #3
100084cc:	333c      	adds	r3, #60	; 0x3c
100084ce:	4083      	lsls	r3, r0
100084d0:	439c      	bics	r4, r3
100084d2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084d4:	588b      	ldr	r3, [r1, r2]
100084d6:	4085      	lsls	r5, r0
100084d8:	431d      	orrs	r5, r3
100084da:	508d      	str	r5, [r1, r2]
100084dc:	e043      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084de:	4922      	ldr	r1, [pc, #136]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
100084e0:	22d6      	movs	r2, #214	; 0xd6
100084e2:	0052      	lsls	r2, r2, #1
100084e4:	588c      	ldr	r4, [r1, r2]
100084e6:	2303      	movs	r3, #3
100084e8:	4018      	ands	r0, r3
100084ea:	00c0      	lsls	r0, r0, #3
100084ec:	333c      	adds	r3, #60	; 0x3c
100084ee:	4083      	lsls	r3, r0
100084f0:	439c      	bics	r4, r3
100084f2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084f4:	588b      	ldr	r3, [r1, r2]
100084f6:	4085      	lsls	r5, r0
100084f8:	431d      	orrs	r5, r3
100084fa:	508d      	str	r5, [r1, r2]
100084fc:	e033      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100084fe:	2817      	cmp	r0, #23
10008500:	d831      	bhi.n	10008566 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008502:	4a19      	ldr	r2, [pc, #100]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
10008504:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008506:	2307      	movs	r3, #7
10008508:	4003      	ands	r3, r0
1000850a:	009b      	lsls	r3, r3, #2
1000850c:	2607      	movs	r6, #7
1000850e:	409e      	lsls	r6, r3
10008510:	43b4      	bics	r4, r6
10008512:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008514:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008516:	000e      	movs	r6, r1
10008518:	409e      	lsls	r6, r3
1000851a:	0033      	movs	r3, r6
1000851c:	4323      	orrs	r3, r4
1000851e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008520:	2901      	cmp	r1, #1
10008522:	d120      	bne.n	10008566 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008524:	2813      	cmp	r0, #19
10008526:	d80f      	bhi.n	10008548 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008528:	0011      	movs	r1, r2
1000852a:	22d8      	movs	r2, #216	; 0xd8
1000852c:	0052      	lsls	r2, r2, #1
1000852e:	588c      	ldr	r4, [r1, r2]
10008530:	2303      	movs	r3, #3
10008532:	4018      	ands	r0, r3
10008534:	00c0      	lsls	r0, r0, #3
10008536:	333c      	adds	r3, #60	; 0x3c
10008538:	4083      	lsls	r3, r0
1000853a:	439c      	bics	r4, r3
1000853c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000853e:	588b      	ldr	r3, [r1, r2]
10008540:	4085      	lsls	r5, r0
10008542:	431d      	orrs	r5, r3
10008544:	508d      	str	r5, [r1, r2]
10008546:	e00e      	b.n	10008566 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008548:	4a07      	ldr	r2, [pc, #28]	; (10008568 <gpio_pinmux_cofiguration+0x148>)
1000854a:	23da      	movs	r3, #218	; 0xda
1000854c:	005b      	lsls	r3, r3, #1
1000854e:	58d1      	ldr	r1, [r2, r3]
10008550:	2403      	movs	r4, #3
10008552:	4020      	ands	r0, r4
10008554:	00c0      	lsls	r0, r0, #3
10008556:	343c      	adds	r4, #60	; 0x3c
10008558:	4084      	lsls	r4, r0
1000855a:	43a1      	bics	r1, r4
1000855c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000855e:	58d1      	ldr	r1, [r2, r3]
10008560:	4085      	lsls	r5, r0
10008562:	430d      	orrs	r5, r1
10008564:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008566:	bd70      	pop	{r4, r5, r6, pc}
10008568:	4000b000 	.word	0x4000b000

1000856c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000856c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(callback_func);
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000856e:	230f      	movs	r3, #15
10008570:	4283      	cmp	r3, r0
10008572:	419b      	sbcs	r3, r3
10008574:	425b      	negs	r3, r3
		gpio_port = 0;
	} else {
		gpio_port = 1;
	}
	switch (callback_type) {
10008576:	2a01      	cmp	r2, #1
10008578:	d01e      	beq.n	100085b8 <gpio_register_callback+0x4c>
1000857a:	2a00      	cmp	r2, #0
1000857c:	d004      	beq.n	10008588 <gpio_register_callback+0x1c>
1000857e:	2a02      	cmp	r2, #2
10008580:	d032      	beq.n	100085e8 <gpio_register_callback+0x7c>
10008582:	2a03      	cmp	r2, #3
10008584:	d048      	beq.n	10008618 <gpio_register_callback+0xac>
10008586:	e05e      	b.n	10008646 <gpio_register_callback+0xda>
		case GPIO_CALLBACK_LOW:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
10008588:	4e39      	ldr	r6, [pc, #228]	; (10008670 <gpio_register_callback+0x104>)
1000858a:	00dc      	lsls	r4, r3, #3
1000858c:	18e2      	adds	r2, r4, r3
1000858e:	00d2      	lsls	r2, r2, #3
10008590:	5992      	ldr	r2, [r2, r6]
10008592:	4694      	mov	ip, r2
10008594:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
10008596:	270f      	movs	r7, #15
10008598:	4007      	ands	r7, r0
1000859a:	2201      	movs	r2, #1
1000859c:	40ba      	lsls	r2, r7
1000859e:	b212      	sxth	r2, r2
100085a0:	4315      	orrs	r5, r2
100085a2:	b2ad      	uxth	r5, r5
100085a4:	4667      	mov	r7, ip
100085a6:	85bd      	strh	r5, [r7, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= 1 << (gpio_pin % 16);
100085a8:	18e4      	adds	r4, r4, r3
100085aa:	00e4      	lsls	r4, r4, #3
100085ac:	59a4      	ldr	r4, [r4, r6]
100085ae:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
100085b0:	432a      	orrs	r2, r5
100085b2:	b292      	uxth	r2, r2
100085b4:	86a2      	strh	r2, [r4, #52]	; 0x34
			break;
100085b6:	e046      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_HIGH:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
100085b8:	4e2d      	ldr	r6, [pc, #180]	; (10008670 <gpio_register_callback+0x104>)
100085ba:	00dc      	lsls	r4, r3, #3
100085bc:	18e2      	adds	r2, r4, r3
100085be:	00d2      	lsls	r2, r2, #3
100085c0:	5992      	ldr	r2, [r2, r6]
100085c2:	4694      	mov	ip, r2
100085c4:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
100085c6:	270f      	movs	r7, #15
100085c8:	4007      	ands	r7, r0
100085ca:	2201      	movs	r2, #1
100085cc:	40ba      	lsls	r2, r7
100085ce:	b212      	sxth	r2, r2
100085d0:	4315      	orrs	r5, r2
100085d2:	b2ad      	uxth	r5, r5
100085d4:	4667      	mov	r7, ip
100085d6:	85bd      	strh	r5, [r7, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
100085d8:	18e4      	adds	r4, r4, r3
100085da:	00e4      	lsls	r4, r4, #3
100085dc:	59a4      	ldr	r4, [r4, r6]
100085de:	8e25      	ldrh	r5, [r4, #48]	; 0x30
100085e0:	432a      	orrs	r2, r5
100085e2:	b292      	uxth	r2, r2
100085e4:	8622      	strh	r2, [r4, #48]	; 0x30
			break;
100085e6:	e02e      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_RISING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
100085e8:	4e21      	ldr	r6, [pc, #132]	; (10008670 <gpio_register_callback+0x104>)
100085ea:	00dc      	lsls	r4, r3, #3
100085ec:	18e2      	adds	r2, r4, r3
100085ee:	00d2      	lsls	r2, r2, #3
100085f0:	5992      	ldr	r2, [r2, r6]
100085f2:	4694      	mov	ip, r2
100085f4:	8d15      	ldrh	r5, [r2, #40]	; 0x28
100085f6:	270f      	movs	r7, #15
100085f8:	4007      	ands	r7, r0
100085fa:	2201      	movs	r2, #1
100085fc:	40ba      	lsls	r2, r7
100085fe:	b212      	sxth	r2, r2
10008600:	4315      	orrs	r5, r2
10008602:	b2ad      	uxth	r5, r5
10008604:	4667      	mov	r7, ip
10008606:	853d      	strh	r5, [r7, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
10008608:	18e4      	adds	r4, r4, r3
1000860a:	00e4      	lsls	r4, r4, #3
1000860c:	59a4      	ldr	r4, [r4, r6]
1000860e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
10008610:	432a      	orrs	r2, r5
10008612:	b292      	uxth	r2, r2
10008614:	8622      	strh	r2, [r4, #48]	; 0x30
			break;
10008616:	e016      	b.n	10008646 <gpio_register_callback+0xda>

		case GPIO_CALLBACK_FALLING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
10008618:	4e15      	ldr	r6, [pc, #84]	; (10008670 <gpio_register_callback+0x104>)
1000861a:	00dc      	lsls	r4, r3, #3
1000861c:	18e2      	adds	r2, r4, r3
1000861e:	00d2      	lsls	r2, r2, #3
10008620:	5992      	ldr	r2, [r2, r6]
10008622:	4694      	mov	ip, r2
10008624:	8d15      	ldrh	r5, [r2, #40]	; 0x28
10008626:	270f      	movs	r7, #15
10008628:	4007      	ands	r7, r0
1000862a:	2201      	movs	r2, #1
1000862c:	40ba      	lsls	r2, r7
1000862e:	b212      	sxth	r2, r2
10008630:	4315      	orrs	r5, r2
10008632:	b2ad      	uxth	r5, r5
10008634:	4667      	mov	r7, ip
10008636:	853d      	strh	r5, [r7, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= (1 << (gpio_pin % 16));
10008638:	18e4      	adds	r4, r4, r3
1000863a:	00e4      	lsls	r4, r4, #3
1000863c:	59a4      	ldr	r4, [r4, r6]
1000863e:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
10008640:	432a      	orrs	r2, r5
10008642:	b292      	uxth	r2, r2
10008644:	86a2      	strh	r2, [r4, #52]	; 0x34

		case GPIO_CALLBACK_N:
			break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
10008646:	220f      	movs	r2, #15
10008648:	4010      	ands	r0, r2
1000864a:	4c09      	ldr	r4, [pc, #36]	; (10008670 <gpio_register_callback+0x104>)
1000864c:	00dd      	lsls	r5, r3, #3
1000864e:	18ea      	adds	r2, r5, r3
10008650:	0052      	lsls	r2, r2, #1
10008652:	1812      	adds	r2, r2, r0
10008654:	0092      	lsls	r2, r2, #2
10008656:	18a2      	adds	r2, r4, r2
10008658:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000865a:	18ea      	adds	r2, r5, r3
1000865c:	00d2      	lsls	r2, r2, #3
1000865e:	18a2      	adds	r2, r4, r2
10008660:	3244      	adds	r2, #68	; 0x44
10008662:	2101      	movs	r1, #1
10008664:	4081      	lsls	r1, r0
10008666:	8813      	ldrh	r3, [r2, #0]
10008668:	430b      	orrs	r3, r1
1000866a:	8013      	strh	r3, [r2, #0]
}
1000866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000866e:	46c0      	nop			; (mov r8, r8)
10008670:	100131dc 	.word	0x100131dc

10008674 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
10008674:	b530      	push	{r4, r5, lr}
	} else {
		gpio_port = 1;
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10008676:	230f      	movs	r3, #15
10008678:	4283      	cmp	r3, r0
1000867a:	419b      	sbcs	r3, r3
1000867c:	425b      	negs	r3, r3
1000867e:	220f      	movs	r2, #15
10008680:	4010      	ands	r0, r2
10008682:	3a0e      	subs	r2, #14
10008684:	4082      	lsls	r2, r0
10008686:	b212      	sxth	r2, r2
10008688:	4c08      	ldr	r4, [pc, #32]	; (100086ac <gpio_enable_callback+0x38>)
1000868a:	00dd      	lsls	r5, r3, #3
1000868c:	18e9      	adds	r1, r5, r3
1000868e:	00c9      	lsls	r1, r1, #3
10008690:	1861      	adds	r1, r4, r1
10008692:	3146      	adds	r1, #70	; 0x46
10008694:	8808      	ldrh	r0, [r1, #0]
10008696:	4310      	orrs	r0, r2
10008698:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg |= (1 << (gpio_pin % 16));
1000869a:	18eb      	adds	r3, r5, r3
1000869c:	00db      	lsls	r3, r3, #3
1000869e:	591b      	ldr	r3, [r3, r4]
100086a0:	8c19      	ldrh	r1, [r3, #32]
100086a2:	430a      	orrs	r2, r1
100086a4:	b292      	uxth	r2, r2
100086a6:	841a      	strh	r2, [r3, #32]
}
100086a8:	bd30      	pop	{r4, r5, pc}
100086aa:	46c0      	nop			; (mov r8, r8)
100086ac:	100131dc 	.word	0x100131dc

100086b0 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
100086b0:	b510      	push	{r4, lr}
100086b2:	4b13      	ldr	r3, [pc, #76]	; (10008700 <gpio_init+0x50>)
100086b4:	0019      	movs	r1, r3
100086b6:	3140      	adds	r1, #64	; 0x40
100086b8:	001a      	movs	r2, r3
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100086ba:	2000      	movs	r0, #0
100086bc:	6050      	str	r0, [r2, #4]
100086be:	3204      	adds	r2, #4
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
100086c0:	428a      	cmp	r2, r1
100086c2:	d1fb      	bne.n	100086bc <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100086c4:	4a0e      	ldr	r2, [pc, #56]	; (10008700 <gpio_init+0x50>)
100086c6:	2000      	movs	r0, #0
100086c8:	2446      	movs	r4, #70	; 0x46
100086ca:	5310      	strh	r0, [r2, r4]
		_gpio_instances[i].callback_reg_mask = 0;
100086cc:	3c02      	subs	r4, #2
100086ce:	5310      	strh	r0, [r2, r4]
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100086d0:	2200      	movs	r2, #0
100086d2:	64da      	str	r2, [r3, #76]	; 0x4c
100086d4:	3304      	adds	r3, #4
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
100086d6:	428b      	cmp	r3, r1
100086d8:	d1fb      	bne.n	100086d2 <gpio_init+0x22>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100086da:	4b09      	ldr	r3, [pc, #36]	; (10008700 <gpio_init+0x50>)
100086dc:	2200      	movs	r2, #0
100086de:	218e      	movs	r1, #142	; 0x8e
100086e0:	525a      	strh	r2, [r3, r1]
		_gpio_instances[i].callback_reg_mask = 0;
100086e2:	3902      	subs	r1, #2
100086e4:	525a      	strh	r2, [r3, r1]
	}
	_gpio_instances[0].hw = (void *)GPIO0;
100086e6:	4a07      	ldr	r2, [pc, #28]	; (10008704 <gpio_init+0x54>)
100086e8:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
100086ea:	4a07      	ldr	r2, [pc, #28]	; (10008708 <gpio_init+0x58>)
100086ec:	649a      	str	r2, [r3, #72]	; 0x48
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
100086ee:	4907      	ldr	r1, [pc, #28]	; (1000870c <gpio_init+0x5c>)
100086f0:	2027      	movs	r0, #39	; 0x27
100086f2:	4c07      	ldr	r4, [pc, #28]	; (10008710 <gpio_init+0x60>)
100086f4:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
100086f6:	4907      	ldr	r1, [pc, #28]	; (10008714 <gpio_init+0x64>)
100086f8:	2028      	movs	r0, #40	; 0x28
100086fa:	47a0      	blx	r4
}
100086fc:	bd10      	pop	{r4, pc}
100086fe:	46c0      	nop			; (mov r8, r8)
10008700:	100131dc 	.word	0x100131dc
10008704:	40010000 	.word	0x40010000
10008708:	40011000 	.word	0x40011000
1000870c:	10008171 	.word	0x10008171
10008710:	100095f1 	.word	0x100095f1
10008714:	100081d9 	.word	0x100081d9

10008718 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10008718:	230c      	movs	r3, #12
1000871a:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000871c:	2300      	movs	r3, #0
1000871e:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10008720:	7083      	strb	r3, [r0, #2]
}
10008722:	4770      	bx	lr

10008724 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10008724:	2301      	movs	r3, #1
10008726:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10008728:	2300      	movs	r3, #0
1000872a:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000872c:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000872e:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10008730:	3381      	adds	r3, #129	; 0x81
10008732:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10_MUX2_SPI0_SCK;
10008734:	3b77      	subs	r3, #119	; 0x77
10008736:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11_MUX2_SPI0_MOSI;
10008738:	3301      	adds	r3, #1
1000873a:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12_MUX2_SPI0_SSN;
1000873c:	3301      	adds	r3, #1
1000873e:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13_MUX2_SPI0_MISO;
10008740:	3301      	adds	r3, #1
10008742:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_MUX2_SPI0_SCK;
10008744:	3b0b      	subs	r3, #11
10008746:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_MUX2_SPI0_MOSI;
10008748:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_MUX2_SPI0_SSN;
1000874a:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_MUX2_SPI0_MISO;
1000874c:	6243      	str	r3, [r0, #36]	; 0x24
};
1000874e:	4770      	bx	lr

10008750 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10008750:	b530      	push	{r4, r5, lr}
10008752:	b083      	sub	sp, #12
10008754:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10008756:	780b      	ldrb	r3, [r1, #0]
10008758:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000875a:	784b      	ldrb	r3, [r1, #1]
1000875c:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000875e:	788b      	ldrb	r3, [r1, #2]
10008760:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008762:	ad01      	add	r5, sp, #4
10008764:	0028      	movs	r0, r5
10008766:	4b07      	ldr	r3, [pc, #28]	; (10008784 <spi_attach_slave+0x34>)
10008768:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000876a:	2301      	movs	r3, #1
1000876c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000876e:	7820      	ldrb	r0, [r4, #0]
10008770:	0029      	movs	r1, r5
10008772:	4b05      	ldr	r3, [pc, #20]	; (10008788 <spi_attach_slave+0x38>)
10008774:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10008776:	7820      	ldrb	r0, [r4, #0]
10008778:	2101      	movs	r1, #1
1000877a:	4b04      	ldr	r3, [pc, #16]	; (1000878c <spi_attach_slave+0x3c>)
1000877c:	4798      	blx	r3
}
1000877e:	b003      	add	sp, #12
10008780:	bd30      	pop	{r4, r5, pc}
10008782:	46c0      	nop			; (mov r8, r8)
10008784:	1000824d 	.word	0x1000824d
10008788:	1000825d 	.word	0x1000825d
1000878c:	100083c5 	.word	0x100083c5

10008790 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10008790:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_SPI_MODULE_ENABLE_ENABLE;
10008792:	2201      	movs	r2, #1
10008794:	761a      	strb	r2, [r3, #24]
}
10008796:	4770      	bx	lr

10008798 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10008798:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
1000879a:	2300      	movs	r3, #0
1000879c:	6802      	ldr	r2, [r0, #0]
1000879e:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
100087a0:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
100087a2:	4a0d      	ldr	r2, [pc, #52]	; (100087d8 <spi_disable+0x40>)
100087a4:	4293      	cmp	r3, r2
100087a6:	d109      	bne.n	100087bc <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
100087a8:	2041      	movs	r0, #65	; 0x41
100087aa:	4c0c      	ldr	r4, [pc, #48]	; (100087dc <spi_disable+0x44>)
100087ac:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
100087ae:	2026      	movs	r0, #38	; 0x26
100087b0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
100087b2:	2038      	movs	r0, #56	; 0x38
100087b4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
100087b6:	2001      	movs	r0, #1
100087b8:	47a0      	blx	r4
100087ba:	e00b      	b.n	100087d4 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
100087bc:	4a08      	ldr	r2, [pc, #32]	; (100087e0 <spi_disable+0x48>)
100087be:	4293      	cmp	r3, r2
100087c0:	d108      	bne.n	100087d4 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
100087c2:	2042      	movs	r0, #66	; 0x42
100087c4:	4c05      	ldr	r4, [pc, #20]	; (100087dc <spi_disable+0x44>)
100087c6:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
100087c8:	2027      	movs	r0, #39	; 0x27
100087ca:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
100087cc:	2039      	movs	r0, #57	; 0x39
100087ce:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
100087d0:	2002      	movs	r0, #2
100087d2:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
100087d4:	bd10      	pop	{r4, pc}
100087d6:	46c0      	nop			; (mov r8, r8)
100087d8:	40006000 	.word	0x40006000
100087dc:	10008e1d 	.word	0x10008e1d
100087e0:	40007000 	.word	0x40007000

100087e4 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
100087e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
100087e6:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
100087e8:	4b09      	ldr	r3, [pc, #36]	; (10008810 <spi_reset+0x2c>)
100087ea:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
100087ec:	4b09      	ldr	r3, [pc, #36]	; (10008814 <spi_reset+0x30>)
100087ee:	429c      	cmp	r4, r3
100087f0:	d105      	bne.n	100087fe <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
100087f2:	2001      	movs	r0, #1
100087f4:	4c08      	ldr	r4, [pc, #32]	; (10008818 <spi_reset+0x34>)
100087f6:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
100087f8:	2038      	movs	r0, #56	; 0x38
100087fa:	47a0      	blx	r4
100087fc:	e007      	b.n	1000880e <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
100087fe:	4b07      	ldr	r3, [pc, #28]	; (1000881c <spi_reset+0x38>)
10008800:	429c      	cmp	r4, r3
10008802:	d104      	bne.n	1000880e <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10008804:	2002      	movs	r0, #2
10008806:	4c04      	ldr	r4, [pc, #16]	; (10008818 <spi_reset+0x34>)
10008808:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000880a:	2039      	movs	r0, #57	; 0x39
1000880c:	47a0      	blx	r4
	}
}
1000880e:	bd10      	pop	{r4, pc}
10008810:	10008799 	.word	0x10008799
10008814:	40006000 	.word	0x40006000
10008818:	10009189 	.word	0x10009189
1000881c:	40007000 	.word	0x40007000

10008820 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10008820:	b5f0      	push	{r4, r5, r6, r7, lr}
10008822:	4657      	mov	r7, sl
10008824:	4646      	mov	r6, r8
10008826:	b4c0      	push	{r6, r7}
10008828:	b083      	sub	sp, #12
1000882a:	0006      	movs	r6, r0
1000882c:	4688      	mov	r8, r1
1000882e:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10008830:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_SPI_MODULE_ENABLE_MASK) {
10008832:	7e0b      	ldrb	r3, [r1, #24]
10008834:	07db      	lsls	r3, r3, #31
10008836:	d501      	bpl.n	1000883c <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
10008838:	2300      	movs	r3, #0
1000883a:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000883c:	0030      	movs	r0, r6
1000883e:	4b48      	ldr	r3, [pc, #288]	; (10008960 <spi_init+0x140>)
10008840:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10008842:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10008844:	4a47      	ldr	r2, [pc, #284]	; (10008964 <spi_init+0x144>)
10008846:	4293      	cmp	r3, r2
10008848:	d109      	bne.n	1000885e <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000884a:	2041      	movs	r0, #65	; 0x41
1000884c:	4c46      	ldr	r4, [pc, #280]	; (10008968 <spi_init+0x148>)
1000884e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10008850:	2026      	movs	r0, #38	; 0x26
10008852:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10008854:	2038      	movs	r0, #56	; 0x38
10008856:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10008858:	2001      	movs	r0, #1
1000885a:	47a0      	blx	r4
1000885c:	e00b      	b.n	10008876 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000885e:	4a43      	ldr	r2, [pc, #268]	; (1000896c <spi_init+0x14c>)
10008860:	4293      	cmp	r3, r2
10008862:	d108      	bne.n	10008876 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10008864:	2042      	movs	r0, #66	; 0x42
10008866:	4c40      	ldr	r4, [pc, #256]	; (10008968 <spi_init+0x148>)
10008868:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000886a:	2027      	movs	r0, #39	; 0x27
1000886c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000886e:	2039      	movs	r0, #57	; 0x39
10008870:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10008872:	2002      	movs	r0, #2
10008874:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008876:	a801      	add	r0, sp, #4
10008878:	4b3d      	ldr	r3, [pc, #244]	; (10008970 <spi_init+0x150>)
1000887a:	4798      	blx	r3
1000887c:	002c      	movs	r4, r5
1000887e:	3408      	adds	r4, #8
10008880:	2318      	movs	r3, #24
10008882:	469a      	mov	sl, r3
10008884:	44aa      	add	sl, r5
10008886:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10008888:	6820      	ldr	r0, [r4, #0]
1000888a:	1c43      	adds	r3, r0, #1
1000888c:	d011      	beq.n	100088b2 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000888e:	782b      	ldrb	r3, [r5, #0]
10008890:	2b01      	cmp	r3, #1
10008892:	d102      	bne.n	1000889a <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008894:	466a      	mov	r2, sp
10008896:	7113      	strb	r3, [r2, #4]
10008898:	e003      	b.n	100088a2 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000889a:	2b00      	cmp	r3, #0
1000889c:	d101      	bne.n	100088a2 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000889e:	466a      	mov	r2, sp
100088a0:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
100088a2:	b2c0      	uxtb	r0, r0
100088a4:	a901      	add	r1, sp, #4
100088a6:	4b33      	ldr	r3, [pc, #204]	; (10008974 <spi_init+0x154>)
100088a8:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
100088aa:	8a39      	ldrh	r1, [r7, #16]
100088ac:	7838      	ldrb	r0, [r7, #0]
100088ae:	4b32      	ldr	r3, [pc, #200]	; (10008978 <spi_init+0x158>)
100088b0:	4798      	blx	r3
100088b2:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
100088b4:	4554      	cmp	r4, sl
100088b6:	d1e6      	bne.n	10008886 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100088b8:	78eb      	ldrb	r3, [r5, #3]
100088ba:	4642      	mov	r2, r8
100088bc:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
100088be:	782b      	ldrb	r3, [r5, #0]
100088c0:	2b01      	cmp	r3, #1
100088c2:	d100      	bne.n	100088c6 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
100088c4:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
100088c6:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
100088c8:	782a      	ldrb	r2, [r5, #0]
100088ca:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
100088cc:	782a      	ldrb	r2, [r5, #0]
100088ce:	2a01      	cmp	r2, #1
100088d0:	d101      	bne.n	100088d6 <spi_init+0xb6>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
100088d2:	792a      	ldrb	r2, [r5, #4]
100088d4:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
100088d6:	786a      	ldrb	r2, [r5, #1]
100088d8:	2a04      	cmp	r2, #4
100088da:	d104      	bne.n	100088e6 <spi_init+0xc6>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
100088dc:	2124      	movs	r1, #36	; 0x24
100088de:	5c58      	ldrb	r0, [r3, r1]
100088e0:	4302      	orrs	r2, r0
100088e2:	545a      	strb	r2, [r3, r1]
100088e4:	e004      	b.n	100088f0 <spi_init+0xd0>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
100088e6:	2124      	movs	r1, #36	; 0x24
100088e8:	5c5a      	ldrb	r2, [r3, r1]
100088ea:	2004      	movs	r0, #4
100088ec:	4382      	bics	r2, r0
100088ee:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
100088f0:	78aa      	ldrb	r2, [r5, #2]
100088f2:	2a01      	cmp	r2, #1
100088f4:	d01a      	beq.n	1000892c <spi_init+0x10c>
100088f6:	2a00      	cmp	r2, #0
100088f8:	d004      	beq.n	10008904 <spi_init+0xe4>
100088fa:	2a02      	cmp	r2, #2
100088fc:	d00c      	beq.n	10008918 <spi_init+0xf8>
100088fe:	2a03      	cmp	r2, #3
10008900:	d01e      	beq.n	10008940 <spi_init+0x120>
10008902:	e026      	b.n	10008952 <spi_init+0x132>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008904:	2224      	movs	r2, #36	; 0x24
10008906:	5c99      	ldrb	r1, [r3, r2]
10008908:	2002      	movs	r0, #2
1000890a:	4381      	bics	r1, r0
1000890c:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000890e:	5c99      	ldrb	r1, [r3, r2]
10008910:	3801      	subs	r0, #1
10008912:	4381      	bics	r1, r0
10008914:	5499      	strb	r1, [r3, r2]
10008916:	e01c      	b.n	10008952 <spi_init+0x132>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008918:	2224      	movs	r2, #36	; 0x24
1000891a:	5c98      	ldrb	r0, [r3, r2]
1000891c:	2102      	movs	r1, #2
1000891e:	4301      	orrs	r1, r0
10008920:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008922:	5c99      	ldrb	r1, [r3, r2]
10008924:	2001      	movs	r0, #1
10008926:	4381      	bics	r1, r0
10008928:	5499      	strb	r1, [r3, r2]
1000892a:	e012      	b.n	10008952 <spi_init+0x132>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000892c:	2224      	movs	r2, #36	; 0x24
1000892e:	5c99      	ldrb	r1, [r3, r2]
10008930:	2002      	movs	r0, #2
10008932:	4381      	bics	r1, r0
10008934:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008936:	5c98      	ldrb	r0, [r3, r2]
10008938:	2101      	movs	r1, #1
1000893a:	4301      	orrs	r1, r0
1000893c:	5499      	strb	r1, [r3, r2]
1000893e:	e008      	b.n	10008952 <spi_init+0x132>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008940:	2224      	movs	r2, #36	; 0x24
10008942:	5c98      	ldrb	r0, [r3, r2]
10008944:	2102      	movs	r1, #2
10008946:	4301      	orrs	r1, r0
10008948:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000894a:	5c98      	ldrb	r0, [r3, r2]
1000894c:	2101      	movs	r1, #1
1000894e:	4301      	orrs	r1, r0
10008950:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10008952:	2000      	movs	r0, #0
10008954:	b003      	add	sp, #12
10008956:	bc0c      	pop	{r2, r3}
10008958:	4690      	mov	r8, r2
1000895a:	469a      	mov	sl, r3
1000895c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000895e:	46c0      	nop			; (mov r8, r8)
10008960:	100087e5 	.word	0x100087e5
10008964:	40006000 	.word	0x40006000
10008968:	10008ac1 	.word	0x10008ac1
1000896c:	40007000 	.word	0x40007000
10008970:	1000824d 	.word	0x1000824d
10008974:	1000825d 	.word	0x1000825d
10008978:	10008421 	.word	0x10008421

1000897c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000897c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000897e:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10008980:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10008982:	2600      	movs	r6, #0
10008984:	466d      	mov	r5, sp
10008986:	71ee      	strb	r6, [r5, #7]
10008988:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000898a:	2c00      	cmp	r4, #0
1000898c:	d034      	beq.n	100089f8 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000898e:	2900      	cmp	r1, #0
10008990:	d104      	bne.n	1000899c <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10008992:	0029      	movs	r1, r5
10008994:	7980      	ldrb	r0, [r0, #6]
10008996:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10008998:	2701      	movs	r7, #1
1000899a:	e00b      	b.n	100089b4 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000899c:	2a00      	cmp	r2, #0
1000899e:	d005      	beq.n	100089ac <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
100089a0:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
100089a2:	2b00      	cmp	r3, #0
100089a4:	d029      	beq.n	100089fa <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
100089a6:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
100089a8:	2700      	movs	r7, #0
100089aa:	e003      	b.n	100089b4 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
100089ac:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
100089ae:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
100089b0:	466a      	mov	r2, sp
100089b2:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
100089b4:	2528      	movs	r5, #40	; 0x28
100089b6:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
100089b8:	07c0      	lsls	r0, r0, #31
100089ba:	d4fc      	bmi.n	100089b6 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
100089bc:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
100089be:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
100089c0:	2b00      	cmp	r3, #0
100089c2:	d014      	beq.n	100089ee <spi_transceive_buffer_wait+0x72>
100089c4:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
100089c6:	4278      	negs	r0, r7
100089c8:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
100089ca:	4270      	negs	r0, r6
100089cc:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
100089ce:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
100089d0:	07c0      	lsls	r0, r0, #31
100089d2:	d5fc      	bpl.n	100089ce <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
100089d4:	7808      	ldrb	r0, [r1, #0]
100089d6:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
100089d8:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
100089da:	07c0      	lsls	r0, r0, #31
100089dc:	d5fc      	bpl.n	100089d8 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
100089de:	7920      	ldrb	r0, [r4, #4]
100089e0:	7010      	strb	r0, [r2, #0]
		transfer_len++;
100089e2:	3501      	adds	r5, #1
100089e4:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
100089e6:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
100089e8:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
100089ea:	42ab      	cmp	r3, r5
100089ec:	d1ef      	bne.n	100089ce <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
100089ee:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
100089f0:	06db      	lsls	r3, r3, #27
100089f2:	d5fc      	bpl.n	100089ee <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
100089f4:	2000      	movs	r0, #0
100089f6:	e000      	b.n	100089fa <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
100089f8:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
100089fa:	b003      	add	sp, #12
100089fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100089fe:	46c0      	nop			; (mov r8, r8)

10008a00 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
10008a00:	b510      	push	{r4, lr}
10008a02:	0013      	movs	r3, r2
	return spi_transceive_buffer_wait(module, tx_data, NULL, length);
10008a04:	2200      	movs	r2, #0
10008a06:	4c01      	ldr	r4, [pc, #4]	; (10008a0c <spi_write_buffer_wait+0xc>)
10008a08:	47a0      	blx	r4
}
10008a0a:	bd10      	pop	{r4, pc}
10008a0c:	1000897d 	.word	0x1000897d

10008a10 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
10008a10:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
10008a12:	7808      	ldrb	r0, [r1, #0]
	if(select) {
10008a14:	2a00      	cmp	r2, #0
10008a16:	d003      	beq.n	10008a20 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
10008a18:	2100      	movs	r1, #0
10008a1a:	4b04      	ldr	r3, [pc, #16]	; (10008a2c <spi_select_slave+0x1c>)
10008a1c:	4798      	blx	r3
10008a1e:	e002      	b.n	10008a26 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
10008a20:	2101      	movs	r1, #1
10008a22:	4b02      	ldr	r3, [pc, #8]	; (10008a2c <spi_select_slave+0x1c>)
10008a24:	4798      	blx	r3
	}

	return STATUS_OK;
}
10008a26:	2000      	movs	r0, #0
10008a28:	bd10      	pop	{r4, pc}
10008a2a:	46c0      	nop			; (mov r8, r8)
10008a2c:	100083c5 	.word	0x100083c5

10008a30 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008a30:	2801      	cmp	r0, #1
10008a32:	d00d      	beq.n	10008a50 <system_clock_config+0x20>
10008a34:	2800      	cmp	r0, #0
10008a36:	d002      	beq.n	10008a3e <system_clock_config+0xe>
10008a38:	2802      	cmp	r0, #2
10008a3a:	d01c      	beq.n	10008a76 <system_clock_config+0x46>
10008a3c:	e02e      	b.n	10008a9c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008a3e:	4a18      	ldr	r2, [pc, #96]	; (10008aa0 <system_clock_config+0x70>)
10008a40:	6990      	ldr	r0, [r2, #24]
10008a42:	230c      	movs	r3, #12
10008a44:	4303      	orrs	r3, r0
10008a46:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008a48:	4a16      	ldr	r2, [pc, #88]	; (10008aa4 <system_clock_config+0x74>)
10008a4a:	4b17      	ldr	r3, [pc, #92]	; (10008aa8 <system_clock_config+0x78>)
10008a4c:	601a      	str	r2, [r3, #0]
			break;
10008a4e:	e01a      	b.n	10008a86 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008a50:	4b13      	ldr	r3, [pc, #76]	; (10008aa0 <system_clock_config+0x70>)
10008a52:	6998      	ldr	r0, [r3, #24]
10008a54:	2208      	movs	r2, #8
10008a56:	4302      	orrs	r2, r0
10008a58:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008a5a:	699a      	ldr	r2, [r3, #24]
10008a5c:	2004      	movs	r0, #4
10008a5e:	4382      	bics	r2, r0
10008a60:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008a62:	4a12      	ldr	r2, [pc, #72]	; (10008aac <system_clock_config+0x7c>)
10008a64:	6853      	ldr	r3, [r2, #4]
10008a66:	2080      	movs	r0, #128	; 0x80
10008a68:	0300      	lsls	r0, r0, #12
10008a6a:	4303      	orrs	r3, r0
10008a6c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008a6e:	4a10      	ldr	r2, [pc, #64]	; (10008ab0 <system_clock_config+0x80>)
10008a70:	4b0d      	ldr	r3, [pc, #52]	; (10008aa8 <system_clock_config+0x78>)
10008a72:	601a      	str	r2, [r3, #0]
			break;
10008a74:	e007      	b.n	10008a86 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008a76:	4a0a      	ldr	r2, [pc, #40]	; (10008aa0 <system_clock_config+0x70>)
10008a78:	6993      	ldr	r3, [r2, #24]
10008a7a:	200c      	movs	r0, #12
10008a7c:	4383      	bics	r3, r0
10008a7e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008a80:	4a08      	ldr	r2, [pc, #32]	; (10008aa4 <system_clock_config+0x74>)
10008a82:	4b09      	ldr	r3, [pc, #36]	; (10008aa8 <system_clock_config+0x78>)
10008a84:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008a86:	4b06      	ldr	r3, [pc, #24]	; (10008aa0 <system_clock_config+0x70>)
10008a88:	699a      	ldr	r2, [r3, #24]
10008a8a:	2003      	movs	r0, #3
10008a8c:	4382      	bics	r2, r0
10008a8e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008a90:	699a      	ldr	r2, [r3, #24]
10008a92:	4001      	ands	r1, r0
10008a94:	4311      	orrs	r1, r2
10008a96:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008a98:	2000      	movs	r0, #0
10008a9a:	e000      	b.n	10008a9e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008a9c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008a9e:	4770      	bx	lr
10008aa0:	4000b000 	.word	0x4000b000
10008aa4:	018cba80 	.word	0x018cba80
10008aa8:	1001326c 	.word	0x1001326c
10008aac:	4000f000 	.word	0x4000f000
10008ab0:	001e8480 	.word	0x001e8480

10008ab4 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008ab4:	4b01      	ldr	r3, [pc, #4]	; (10008abc <system_clock_get_value+0x8>)
10008ab6:	6818      	ldr	r0, [r3, #0]
}
10008ab8:	4770      	bx	lr
10008aba:	46c0      	nop			; (mov r8, r8)
10008abc:	1001326c 	.word	0x1001326c

10008ac0 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008ac0:	b500      	push	{lr}
	switch (peripheral) {
10008ac2:	2835      	cmp	r0, #53	; 0x35
10008ac4:	d900      	bls.n	10008ac8 <system_clock_peripheral_enable+0x8>
10008ac6:	e1a2      	b.n	10008e0e <system_clock_peripheral_enable+0x34e>
10008ac8:	0080      	lsls	r0, r0, #2
10008aca:	4bd2      	ldr	r3, [pc, #840]	; (10008e14 <system_clock_peripheral_enable+0x354>)
10008acc:	581b      	ldr	r3, [r3, r0]
10008ace:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ad0:	4ad1      	ldr	r2, [pc, #836]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008ad2:	68d1      	ldr	r1, [r2, #12]
10008ad4:	2302      	movs	r3, #2
10008ad6:	430b      	orrs	r3, r1
10008ad8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ada:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008adc:	e198      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ade:	4ace      	ldr	r2, [pc, #824]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008ae0:	68d1      	ldr	r1, [r2, #12]
10008ae2:	2304      	movs	r3, #4
10008ae4:	430b      	orrs	r3, r1
10008ae6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008aea:	e191      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008aec:	4aca      	ldr	r2, [pc, #808]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008aee:	68d1      	ldr	r1, [r2, #12]
10008af0:	2308      	movs	r3, #8
10008af2:	430b      	orrs	r3, r1
10008af4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008af8:	e18a      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008afa:	4ac7      	ldr	r2, [pc, #796]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008afc:	68d1      	ldr	r1, [r2, #12]
10008afe:	2310      	movs	r3, #16
10008b00:	430b      	orrs	r3, r1
10008b02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008b06:	e183      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b08:	4ac3      	ldr	r2, [pc, #780]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b0a:	68d1      	ldr	r1, [r2, #12]
10008b0c:	2320      	movs	r3, #32
10008b0e:	430b      	orrs	r3, r1
10008b10:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008b14:	e17c      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b16:	4ac0      	ldr	r2, [pc, #768]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b18:	68d1      	ldr	r1, [r2, #12]
10008b1a:	2380      	movs	r3, #128	; 0x80
10008b1c:	430b      	orrs	r3, r1
10008b1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008b22:	e175      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b24:	4abc      	ldr	r2, [pc, #752]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b26:	68d3      	ldr	r3, [r2, #12]
10008b28:	2180      	movs	r1, #128	; 0x80
10008b2a:	0049      	lsls	r1, r1, #1
10008b2c:	430b      	orrs	r3, r1
10008b2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008b32:	e16d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b34:	4ab8      	ldr	r2, [pc, #736]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b36:	68d3      	ldr	r3, [r2, #12]
10008b38:	2180      	movs	r1, #128	; 0x80
10008b3a:	0109      	lsls	r1, r1, #4
10008b3c:	430b      	orrs	r3, r1
10008b3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008b42:	e165      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b44:	4ab4      	ldr	r2, [pc, #720]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b46:	68d3      	ldr	r3, [r2, #12]
10008b48:	2180      	movs	r1, #128	; 0x80
10008b4a:	0149      	lsls	r1, r1, #5
10008b4c:	430b      	orrs	r3, r1
10008b4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008b52:	e15d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b54:	4ab0      	ldr	r2, [pc, #704]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b56:	68d3      	ldr	r3, [r2, #12]
10008b58:	2180      	movs	r1, #128	; 0x80
10008b5a:	0189      	lsls	r1, r1, #6
10008b5c:	430b      	orrs	r3, r1
10008b5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008b62:	e155      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b64:	4aac      	ldr	r2, [pc, #688]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b66:	68d3      	ldr	r3, [r2, #12]
10008b68:	2180      	movs	r1, #128	; 0x80
10008b6a:	01c9      	lsls	r1, r1, #7
10008b6c:	430b      	orrs	r3, r1
10008b6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008b72:	e14d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b74:	4aa8      	ldr	r2, [pc, #672]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b76:	68d3      	ldr	r3, [r2, #12]
10008b78:	2180      	movs	r1, #128	; 0x80
10008b7a:	0209      	lsls	r1, r1, #8
10008b7c:	430b      	orrs	r3, r1
10008b7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008b82:	e145      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b84:	4aa4      	ldr	r2, [pc, #656]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b86:	68d3      	ldr	r3, [r2, #12]
10008b88:	2180      	movs	r1, #128	; 0x80
10008b8a:	0249      	lsls	r1, r1, #9
10008b8c:	430b      	orrs	r3, r1
10008b8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008b92:	e13d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008b94:	4aa0      	ldr	r2, [pc, #640]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008b96:	68d3      	ldr	r3, [r2, #12]
10008b98:	2180      	movs	r1, #128	; 0x80
10008b9a:	0289      	lsls	r1, r1, #10
10008b9c:	430b      	orrs	r3, r1
10008b9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ba0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008ba2:	e135      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ba4:	4a9c      	ldr	r2, [pc, #624]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008ba6:	68d3      	ldr	r3, [r2, #12]
10008ba8:	2180      	movs	r1, #128	; 0x80
10008baa:	02c9      	lsls	r1, r1, #11
10008bac:	430b      	orrs	r3, r1
10008bae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008bb2:	e12d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008bb4:	4a98      	ldr	r2, [pc, #608]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008bb6:	68d3      	ldr	r3, [r2, #12]
10008bb8:	2180      	movs	r1, #128	; 0x80
10008bba:	0309      	lsls	r1, r1, #12
10008bbc:	430b      	orrs	r3, r1
10008bbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008bc2:	e125      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008bc4:	4a94      	ldr	r2, [pc, #592]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008bc6:	68d3      	ldr	r3, [r2, #12]
10008bc8:	2180      	movs	r1, #128	; 0x80
10008bca:	0349      	lsls	r1, r1, #13
10008bcc:	430b      	orrs	r3, r1
10008bce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008bd2:	e11d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008bd4:	4a90      	ldr	r2, [pc, #576]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008bd6:	68d3      	ldr	r3, [r2, #12]
10008bd8:	2180      	movs	r1, #128	; 0x80
10008bda:	0389      	lsls	r1, r1, #14
10008bdc:	430b      	orrs	r3, r1
10008bde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008be0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008be2:	e115      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008be4:	4a8c      	ldr	r2, [pc, #560]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008be6:	68d3      	ldr	r3, [r2, #12]
10008be8:	2180      	movs	r1, #128	; 0x80
10008bea:	03c9      	lsls	r1, r1, #15
10008bec:	430b      	orrs	r3, r1
10008bee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008bf2:	e10d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008bf4:	4a88      	ldr	r2, [pc, #544]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008bf6:	68d3      	ldr	r3, [r2, #12]
10008bf8:	2180      	movs	r1, #128	; 0x80
10008bfa:	0409      	lsls	r1, r1, #16
10008bfc:	430b      	orrs	r3, r1
10008bfe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008c02:	e105      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c04:	4a84      	ldr	r2, [pc, #528]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c06:	68d3      	ldr	r3, [r2, #12]
10008c08:	2180      	movs	r1, #128	; 0x80
10008c0a:	0449      	lsls	r1, r1, #17
10008c0c:	430b      	orrs	r3, r1
10008c0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008c12:	e0fd      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c14:	4a80      	ldr	r2, [pc, #512]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c16:	68d3      	ldr	r3, [r2, #12]
10008c18:	2180      	movs	r1, #128	; 0x80
10008c1a:	0489      	lsls	r1, r1, #18
10008c1c:	430b      	orrs	r3, r1
10008c1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008c22:	e0f5      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c24:	4a7c      	ldr	r2, [pc, #496]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c26:	68d3      	ldr	r3, [r2, #12]
10008c28:	2180      	movs	r1, #128	; 0x80
10008c2a:	04c9      	lsls	r1, r1, #19
10008c2c:	430b      	orrs	r3, r1
10008c2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008c32:	e0ed      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c34:	4a78      	ldr	r2, [pc, #480]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c36:	68d3      	ldr	r3, [r2, #12]
10008c38:	2180      	movs	r1, #128	; 0x80
10008c3a:	0509      	lsls	r1, r1, #20
10008c3c:	430b      	orrs	r3, r1
10008c3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008c42:	e0e5      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c44:	4a74      	ldr	r2, [pc, #464]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c46:	68d3      	ldr	r3, [r2, #12]
10008c48:	2180      	movs	r1, #128	; 0x80
10008c4a:	0549      	lsls	r1, r1, #21
10008c4c:	430b      	orrs	r3, r1
10008c4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008c52:	e0dd      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c54:	4a70      	ldr	r2, [pc, #448]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c56:	68d3      	ldr	r3, [r2, #12]
10008c58:	2180      	movs	r1, #128	; 0x80
10008c5a:	0589      	lsls	r1, r1, #22
10008c5c:	430b      	orrs	r3, r1
10008c5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008c62:	e0d5      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008c64:	4a6c      	ldr	r2, [pc, #432]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c66:	68d3      	ldr	r3, [r2, #12]
10008c68:	2180      	movs	r1, #128	; 0x80
10008c6a:	05c9      	lsls	r1, r1, #23
10008c6c:	430b      	orrs	r3, r1
10008c6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008c72:	e0cd      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c74:	4a68      	ldr	r2, [pc, #416]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c76:	6911      	ldr	r1, [r2, #16]
10008c78:	2301      	movs	r3, #1
10008c7a:	430b      	orrs	r3, r1
10008c7c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008c80:	e0c6      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c82:	4a65      	ldr	r2, [pc, #404]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c84:	6911      	ldr	r1, [r2, #16]
10008c86:	2302      	movs	r3, #2
10008c88:	430b      	orrs	r3, r1
10008c8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008c8e:	e0bf      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c90:	4a61      	ldr	r2, [pc, #388]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008c92:	6911      	ldr	r1, [r2, #16]
10008c94:	2304      	movs	r3, #4
10008c96:	430b      	orrs	r3, r1
10008c98:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008c9c:	e0b8      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c9e:	4a5e      	ldr	r2, [pc, #376]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008ca0:	6911      	ldr	r1, [r2, #16]
10008ca2:	2308      	movs	r3, #8
10008ca4:	430b      	orrs	r3, r1
10008ca6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ca8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008caa:	e0b1      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008cac:	4a5a      	ldr	r2, [pc, #360]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008cae:	6911      	ldr	r1, [r2, #16]
10008cb0:	2310      	movs	r3, #16
10008cb2:	430b      	orrs	r3, r1
10008cb4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008cb8:	e0aa      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008cba:	4a57      	ldr	r2, [pc, #348]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008cbc:	6911      	ldr	r1, [r2, #16]
10008cbe:	2320      	movs	r3, #32
10008cc0:	430b      	orrs	r3, r1
10008cc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008cc6:	e0a3      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008cc8:	4a53      	ldr	r2, [pc, #332]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008cca:	6911      	ldr	r1, [r2, #16]
10008ccc:	2340      	movs	r3, #64	; 0x40
10008cce:	430b      	orrs	r3, r1
10008cd0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10008cd4:	e09c      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008cd6:	4a50      	ldr	r2, [pc, #320]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008cd8:	6911      	ldr	r1, [r2, #16]
10008cda:	2380      	movs	r3, #128	; 0x80
10008cdc:	430b      	orrs	r3, r1
10008cde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ce0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10008ce2:	e095      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ce4:	4a4c      	ldr	r2, [pc, #304]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008ce6:	6913      	ldr	r3, [r2, #16]
10008ce8:	2180      	movs	r1, #128	; 0x80
10008cea:	0049      	lsls	r1, r1, #1
10008cec:	430b      	orrs	r3, r1
10008cee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10008cf2:	e08d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008cf4:	4a48      	ldr	r2, [pc, #288]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008cf6:	6913      	ldr	r3, [r2, #16]
10008cf8:	2180      	movs	r1, #128	; 0x80
10008cfa:	0089      	lsls	r1, r1, #2
10008cfc:	430b      	orrs	r3, r1
10008cfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10008d02:	e085      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d04:	4a44      	ldr	r2, [pc, #272]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d06:	6913      	ldr	r3, [r2, #16]
10008d08:	2180      	movs	r1, #128	; 0x80
10008d0a:	00c9      	lsls	r1, r1, #3
10008d0c:	430b      	orrs	r3, r1
10008d0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008d12:	e07d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d14:	4a40      	ldr	r2, [pc, #256]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d16:	6913      	ldr	r3, [r2, #16]
10008d18:	2180      	movs	r1, #128	; 0x80
10008d1a:	0109      	lsls	r1, r1, #4
10008d1c:	430b      	orrs	r3, r1
10008d1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008d22:	e075      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d24:	4a3c      	ldr	r2, [pc, #240]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d26:	6913      	ldr	r3, [r2, #16]
10008d28:	2180      	movs	r1, #128	; 0x80
10008d2a:	0149      	lsls	r1, r1, #5
10008d2c:	430b      	orrs	r3, r1
10008d2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008d32:	e06d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d34:	4a38      	ldr	r2, [pc, #224]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d36:	6913      	ldr	r3, [r2, #16]
10008d38:	2180      	movs	r1, #128	; 0x80
10008d3a:	0189      	lsls	r1, r1, #6
10008d3c:	430b      	orrs	r3, r1
10008d3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008d42:	e065      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d44:	4a34      	ldr	r2, [pc, #208]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d46:	6913      	ldr	r3, [r2, #16]
10008d48:	2180      	movs	r1, #128	; 0x80
10008d4a:	01c9      	lsls	r1, r1, #7
10008d4c:	430b      	orrs	r3, r1
10008d4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10008d52:	e05d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d54:	4a30      	ldr	r2, [pc, #192]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d56:	6913      	ldr	r3, [r2, #16]
10008d58:	2180      	movs	r1, #128	; 0x80
10008d5a:	0209      	lsls	r1, r1, #8
10008d5c:	430b      	orrs	r3, r1
10008d5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008d62:	e055      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d64:	4a2c      	ldr	r2, [pc, #176]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d66:	6913      	ldr	r3, [r2, #16]
10008d68:	2180      	movs	r1, #128	; 0x80
10008d6a:	0249      	lsls	r1, r1, #9
10008d6c:	430b      	orrs	r3, r1
10008d6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008d72:	e04d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d74:	4a28      	ldr	r2, [pc, #160]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d76:	6913      	ldr	r3, [r2, #16]
10008d78:	2180      	movs	r1, #128	; 0x80
10008d7a:	0289      	lsls	r1, r1, #10
10008d7c:	430b      	orrs	r3, r1
10008d7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008d82:	e045      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d84:	4a24      	ldr	r2, [pc, #144]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d86:	6913      	ldr	r3, [r2, #16]
10008d88:	2180      	movs	r1, #128	; 0x80
10008d8a:	02c9      	lsls	r1, r1, #11
10008d8c:	430b      	orrs	r3, r1
10008d8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008d92:	e03d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008d94:	4a20      	ldr	r2, [pc, #128]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008d96:	6913      	ldr	r3, [r2, #16]
10008d98:	2180      	movs	r1, #128	; 0x80
10008d9a:	0309      	lsls	r1, r1, #12
10008d9c:	430b      	orrs	r3, r1
10008d9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008da2:	e035      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008da4:	4a1c      	ldr	r2, [pc, #112]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008da6:	6913      	ldr	r3, [r2, #16]
10008da8:	2180      	movs	r1, #128	; 0x80
10008daa:	0349      	lsls	r1, r1, #13
10008dac:	430b      	orrs	r3, r1
10008dae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008db0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008db2:	e02d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008db4:	4a18      	ldr	r2, [pc, #96]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008db6:	6913      	ldr	r3, [r2, #16]
10008db8:	2180      	movs	r1, #128	; 0x80
10008dba:	0389      	lsls	r1, r1, #14
10008dbc:	430b      	orrs	r3, r1
10008dbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008dc2:	e025      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008dc4:	4a14      	ldr	r2, [pc, #80]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008dc6:	6913      	ldr	r3, [r2, #16]
10008dc8:	2180      	movs	r1, #128	; 0x80
10008dca:	03c9      	lsls	r1, r1, #15
10008dcc:	430b      	orrs	r3, r1
10008dce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008dd2:	e01d      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008dd4:	4a10      	ldr	r2, [pc, #64]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008dd6:	6913      	ldr	r3, [r2, #16]
10008dd8:	2180      	movs	r1, #128	; 0x80
10008dda:	0409      	lsls	r1, r1, #16
10008ddc:	430b      	orrs	r3, r1
10008dde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008de0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008de2:	e015      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008de4:	4a0c      	ldr	r2, [pc, #48]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008de6:	7d11      	ldrb	r1, [r2, #20]
10008de8:	2301      	movs	r3, #1
10008dea:	430b      	orrs	r3, r1
10008dec:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10008df0:	e00e      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008df2:	4a09      	ldr	r2, [pc, #36]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008df4:	7d11      	ldrb	r1, [r2, #20]
10008df6:	2302      	movs	r3, #2
10008df8:	430b      	orrs	r3, r1
10008dfa:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10008dfe:	e007      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10008e00:	4a05      	ldr	r2, [pc, #20]	; (10008e18 <system_clock_peripheral_enable+0x358>)
10008e02:	7d11      	ldrb	r1, [r2, #20]
10008e04:	2304      	movs	r3, #4
10008e06:	430b      	orrs	r3, r1
10008e08:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10008e0c:	e000      	b.n	10008e10 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008e0e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008e10:	bd00      	pop	{pc}
10008e12:	46c0      	nop			; (mov r8, r8)
10008e14:	10011484 	.word	0x10011484
10008e18:	4000b000 	.word	0x4000b000

10008e1c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
10008e1c:	b500      	push	{lr}
	switch (peripheral) {
10008e1e:	2835      	cmp	r0, #53	; 0x35
10008e20:	d900      	bls.n	10008e24 <system_clock_peripheral_disable+0x8>
10008e22:	e17d      	b.n	10009120 <system_clock_peripheral_disable+0x304>
10008e24:	0080      	lsls	r0, r0, #2
10008e26:	4bbf      	ldr	r3, [pc, #764]	; (10009124 <system_clock_peripheral_disable+0x308>)
10008e28:	581b      	ldr	r3, [r3, r0]
10008e2a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e2c:	4abe      	ldr	r2, [pc, #760]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e2e:	68d3      	ldr	r3, [r2, #12]
10008e30:	2102      	movs	r1, #2
10008e32:	438b      	bics	r3, r1
10008e34:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e36:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008e38:	e173      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e3a:	4abb      	ldr	r2, [pc, #748]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e3c:	68d3      	ldr	r3, [r2, #12]
10008e3e:	2104      	movs	r1, #4
10008e40:	438b      	bics	r3, r1
10008e42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008e46:	e16c      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e48:	4ab7      	ldr	r2, [pc, #732]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e4a:	68d3      	ldr	r3, [r2, #12]
10008e4c:	2108      	movs	r1, #8
10008e4e:	438b      	bics	r3, r1
10008e50:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e52:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008e54:	e165      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e56:	4ab4      	ldr	r2, [pc, #720]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e58:	68d3      	ldr	r3, [r2, #12]
10008e5a:	2110      	movs	r1, #16
10008e5c:	438b      	bics	r3, r1
10008e5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008e62:	e15e      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e64:	4ab0      	ldr	r2, [pc, #704]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e66:	68d3      	ldr	r3, [r2, #12]
10008e68:	2120      	movs	r1, #32
10008e6a:	438b      	bics	r3, r1
10008e6c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e6e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008e70:	e157      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e72:	4aad      	ldr	r2, [pc, #692]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e74:	68d3      	ldr	r3, [r2, #12]
10008e76:	2180      	movs	r1, #128	; 0x80
10008e78:	438b      	bics	r3, r1
10008e7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008e7e:	e150      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e80:	4aa9      	ldr	r2, [pc, #676]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e82:	68d1      	ldr	r1, [r2, #12]
10008e84:	4ba9      	ldr	r3, [pc, #676]	; (1000912c <system_clock_peripheral_disable+0x310>)
10008e86:	400b      	ands	r3, r1
10008e88:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e8a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008e8c:	e149      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e8e:	4aa6      	ldr	r2, [pc, #664]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e90:	68d1      	ldr	r1, [r2, #12]
10008e92:	4ba7      	ldr	r3, [pc, #668]	; (10009130 <system_clock_peripheral_disable+0x314>)
10008e94:	400b      	ands	r3, r1
10008e96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008e9a:	e142      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008e9c:	4aa2      	ldr	r2, [pc, #648]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008e9e:	68d1      	ldr	r1, [r2, #12]
10008ea0:	4ba4      	ldr	r3, [pc, #656]	; (10009134 <system_clock_peripheral_disable+0x318>)
10008ea2:	400b      	ands	r3, r1
10008ea4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008ea8:	e13b      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008eaa:	4a9f      	ldr	r2, [pc, #636]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008eac:	68d1      	ldr	r1, [r2, #12]
10008eae:	4ba2      	ldr	r3, [pc, #648]	; (10009138 <system_clock_peripheral_disable+0x31c>)
10008eb0:	400b      	ands	r3, r1
10008eb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008eb6:	e134      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008eb8:	4a9b      	ldr	r2, [pc, #620]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008eba:	68d1      	ldr	r1, [r2, #12]
10008ebc:	4b9f      	ldr	r3, [pc, #636]	; (1000913c <system_clock_peripheral_disable+0x320>)
10008ebe:	400b      	ands	r3, r1
10008ec0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008ec4:	e12d      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008ec6:	4a98      	ldr	r2, [pc, #608]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008ec8:	68d1      	ldr	r1, [r2, #12]
10008eca:	4b9d      	ldr	r3, [pc, #628]	; (10009140 <system_clock_peripheral_disable+0x324>)
10008ecc:	400b      	ands	r3, r1
10008ece:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008ed2:	e126      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008ed4:	4a94      	ldr	r2, [pc, #592]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008ed6:	68d1      	ldr	r1, [r2, #12]
10008ed8:	4b9a      	ldr	r3, [pc, #616]	; (10009144 <system_clock_peripheral_disable+0x328>)
10008eda:	400b      	ands	r3, r1
10008edc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ede:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008ee0:	e11f      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008ee2:	4a91      	ldr	r2, [pc, #580]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008ee4:	68d1      	ldr	r1, [r2, #12]
10008ee6:	4b98      	ldr	r3, [pc, #608]	; (10009148 <system_clock_peripheral_disable+0x32c>)
10008ee8:	400b      	ands	r3, r1
10008eea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008eee:	e118      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008ef0:	4a8d      	ldr	r2, [pc, #564]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008ef2:	68d1      	ldr	r1, [r2, #12]
10008ef4:	4b95      	ldr	r3, [pc, #596]	; (1000914c <system_clock_peripheral_disable+0x330>)
10008ef6:	400b      	ands	r3, r1
10008ef8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008efa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008efc:	e111      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008efe:	4a8a      	ldr	r2, [pc, #552]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f00:	68d1      	ldr	r1, [r2, #12]
10008f02:	4b93      	ldr	r3, [pc, #588]	; (10009150 <system_clock_peripheral_disable+0x334>)
10008f04:	400b      	ands	r3, r1
10008f06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008f0a:	e10a      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f0c:	4a86      	ldr	r2, [pc, #536]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f0e:	68d1      	ldr	r1, [r2, #12]
10008f10:	4b90      	ldr	r3, [pc, #576]	; (10009154 <system_clock_peripheral_disable+0x338>)
10008f12:	400b      	ands	r3, r1
10008f14:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008f18:	e103      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f1a:	4a83      	ldr	r2, [pc, #524]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f1c:	68d1      	ldr	r1, [r2, #12]
10008f1e:	4b8e      	ldr	r3, [pc, #568]	; (10009158 <system_clock_peripheral_disable+0x33c>)
10008f20:	400b      	ands	r3, r1
10008f22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008f26:	e0fc      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f28:	4a7f      	ldr	r2, [pc, #508]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f2a:	68d1      	ldr	r1, [r2, #12]
10008f2c:	4b8b      	ldr	r3, [pc, #556]	; (1000915c <system_clock_peripheral_disable+0x340>)
10008f2e:	400b      	ands	r3, r1
10008f30:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008f34:	e0f5      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f36:	4a7c      	ldr	r2, [pc, #496]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f38:	68d1      	ldr	r1, [r2, #12]
10008f3a:	4b89      	ldr	r3, [pc, #548]	; (10009160 <system_clock_peripheral_disable+0x344>)
10008f3c:	400b      	ands	r3, r1
10008f3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008f42:	e0ee      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f44:	4a78      	ldr	r2, [pc, #480]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f46:	68d1      	ldr	r1, [r2, #12]
10008f48:	4b86      	ldr	r3, [pc, #536]	; (10009164 <system_clock_peripheral_disable+0x348>)
10008f4a:	400b      	ands	r3, r1
10008f4c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008f50:	e0e7      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f52:	4a75      	ldr	r2, [pc, #468]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f54:	68d1      	ldr	r1, [r2, #12]
10008f56:	4b84      	ldr	r3, [pc, #528]	; (10009168 <system_clock_peripheral_disable+0x34c>)
10008f58:	400b      	ands	r3, r1
10008f5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008f5e:	e0e0      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f60:	4a71      	ldr	r2, [pc, #452]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f62:	68d1      	ldr	r1, [r2, #12]
10008f64:	4b81      	ldr	r3, [pc, #516]	; (1000916c <system_clock_peripheral_disable+0x350>)
10008f66:	400b      	ands	r3, r1
10008f68:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008f6c:	e0d9      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f6e:	4a6e      	ldr	r2, [pc, #440]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f70:	68d1      	ldr	r1, [r2, #12]
10008f72:	4b7f      	ldr	r3, [pc, #508]	; (10009170 <system_clock_peripheral_disable+0x354>)
10008f74:	400b      	ands	r3, r1
10008f76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008f7a:	e0d2      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f7c:	4a6a      	ldr	r2, [pc, #424]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f7e:	68d1      	ldr	r1, [r2, #12]
10008f80:	4b7c      	ldr	r3, [pc, #496]	; (10009174 <system_clock_peripheral_disable+0x358>)
10008f82:	400b      	ands	r3, r1
10008f84:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008f88:	e0cb      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f8a:	4a67      	ldr	r2, [pc, #412]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f8c:	68d1      	ldr	r1, [r2, #12]
10008f8e:	4b7a      	ldr	r3, [pc, #488]	; (10009178 <system_clock_peripheral_disable+0x35c>)
10008f90:	400b      	ands	r3, r1
10008f92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008f96:	e0c4      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10008f98:	4a63      	ldr	r2, [pc, #396]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008f9a:	68d1      	ldr	r1, [r2, #12]
10008f9c:	4b77      	ldr	r3, [pc, #476]	; (1000917c <system_clock_peripheral_disable+0x360>)
10008f9e:	400b      	ands	r3, r1
10008fa0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008fa4:	e0bd      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008fa6:	4a60      	ldr	r2, [pc, #384]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008fa8:	6913      	ldr	r3, [r2, #16]
10008faa:	2101      	movs	r1, #1
10008fac:	438b      	bics	r3, r1
10008fae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008fb2:	e0b6      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008fb4:	4a5c      	ldr	r2, [pc, #368]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008fb6:	6913      	ldr	r3, [r2, #16]
10008fb8:	2102      	movs	r1, #2
10008fba:	438b      	bics	r3, r1
10008fbc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008fc0:	e0af      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008fc2:	4a59      	ldr	r2, [pc, #356]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008fc4:	6913      	ldr	r3, [r2, #16]
10008fc6:	2104      	movs	r1, #4
10008fc8:	438b      	bics	r3, r1
10008fca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008fce:	e0a8      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008fd0:	4a55      	ldr	r2, [pc, #340]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008fd2:	6913      	ldr	r3, [r2, #16]
10008fd4:	2108      	movs	r1, #8
10008fd6:	438b      	bics	r3, r1
10008fd8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008fdc:	e0a1      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008fde:	4a52      	ldr	r2, [pc, #328]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008fe0:	6913      	ldr	r3, [r2, #16]
10008fe2:	2110      	movs	r1, #16
10008fe4:	438b      	bics	r3, r1
10008fe6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fe8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10008fea:	e09a      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008fec:	4a4e      	ldr	r2, [pc, #312]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008fee:	6913      	ldr	r3, [r2, #16]
10008ff0:	2120      	movs	r1, #32
10008ff2:	438b      	bics	r3, r1
10008ff4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10008ff8:	e093      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10008ffa:	4a4b      	ldr	r2, [pc, #300]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10008ffc:	6913      	ldr	r3, [r2, #16]
10008ffe:	2140      	movs	r1, #64	; 0x40
10009000:	438b      	bics	r3, r1
10009002:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009004:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10009006:	e08c      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009008:	4a47      	ldr	r2, [pc, #284]	; (10009128 <system_clock_peripheral_disable+0x30c>)
1000900a:	6913      	ldr	r3, [r2, #16]
1000900c:	2180      	movs	r1, #128	; 0x80
1000900e:	438b      	bics	r3, r1
10009010:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009012:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10009014:	e085      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009016:	4a44      	ldr	r2, [pc, #272]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009018:	6911      	ldr	r1, [r2, #16]
1000901a:	4b44      	ldr	r3, [pc, #272]	; (1000912c <system_clock_peripheral_disable+0x310>)
1000901c:	400b      	ands	r3, r1
1000901e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009020:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10009022:	e07e      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009024:	4a40      	ldr	r2, [pc, #256]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009026:	6911      	ldr	r1, [r2, #16]
10009028:	4b55      	ldr	r3, [pc, #340]	; (10009180 <system_clock_peripheral_disable+0x364>)
1000902a:	400b      	ands	r3, r1
1000902c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000902e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10009030:	e077      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009032:	4a3d      	ldr	r2, [pc, #244]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009034:	6911      	ldr	r1, [r2, #16]
10009036:	4b53      	ldr	r3, [pc, #332]	; (10009184 <system_clock_peripheral_disable+0x368>)
10009038:	400b      	ands	r3, r1
1000903a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000903c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000903e:	e070      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009040:	4a39      	ldr	r2, [pc, #228]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009042:	6911      	ldr	r1, [r2, #16]
10009044:	4b3a      	ldr	r3, [pc, #232]	; (10009130 <system_clock_peripheral_disable+0x314>)
10009046:	400b      	ands	r3, r1
10009048:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000904a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000904c:	e069      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000904e:	4a36      	ldr	r2, [pc, #216]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009050:	6911      	ldr	r1, [r2, #16]
10009052:	4b38      	ldr	r3, [pc, #224]	; (10009134 <system_clock_peripheral_disable+0x318>)
10009054:	400b      	ands	r3, r1
10009056:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009058:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000905a:	e062      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000905c:	4a32      	ldr	r2, [pc, #200]	; (10009128 <system_clock_peripheral_disable+0x30c>)
1000905e:	6911      	ldr	r1, [r2, #16]
10009060:	4b35      	ldr	r3, [pc, #212]	; (10009138 <system_clock_peripheral_disable+0x31c>)
10009062:	400b      	ands	r3, r1
10009064:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009066:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009068:	e05b      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000906a:	4a2f      	ldr	r2, [pc, #188]	; (10009128 <system_clock_peripheral_disable+0x30c>)
1000906c:	6911      	ldr	r1, [r2, #16]
1000906e:	4b33      	ldr	r3, [pc, #204]	; (1000913c <system_clock_peripheral_disable+0x320>)
10009070:	400b      	ands	r3, r1
10009072:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009074:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10009076:	e054      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009078:	4a2b      	ldr	r2, [pc, #172]	; (10009128 <system_clock_peripheral_disable+0x30c>)
1000907a:	6911      	ldr	r1, [r2, #16]
1000907c:	4b30      	ldr	r3, [pc, #192]	; (10009140 <system_clock_peripheral_disable+0x324>)
1000907e:	400b      	ands	r3, r1
10009080:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009082:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009084:	e04d      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009086:	4a28      	ldr	r2, [pc, #160]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009088:	6911      	ldr	r1, [r2, #16]
1000908a:	4b2e      	ldr	r3, [pc, #184]	; (10009144 <system_clock_peripheral_disable+0x328>)
1000908c:	400b      	ands	r3, r1
1000908e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009090:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009092:	e046      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009094:	4a24      	ldr	r2, [pc, #144]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009096:	6911      	ldr	r1, [r2, #16]
10009098:	4b2b      	ldr	r3, [pc, #172]	; (10009148 <system_clock_peripheral_disable+0x32c>)
1000909a:	400b      	ands	r3, r1
1000909c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000909e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100090a0:	e03f      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100090a2:	4a21      	ldr	r2, [pc, #132]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090a4:	6911      	ldr	r1, [r2, #16]
100090a6:	4b29      	ldr	r3, [pc, #164]	; (1000914c <system_clock_peripheral_disable+0x330>)
100090a8:	400b      	ands	r3, r1
100090aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100090ae:	e038      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100090b0:	4a1d      	ldr	r2, [pc, #116]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090b2:	6911      	ldr	r1, [r2, #16]
100090b4:	4b26      	ldr	r3, [pc, #152]	; (10009150 <system_clock_peripheral_disable+0x334>)
100090b6:	400b      	ands	r3, r1
100090b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100090bc:	e031      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100090be:	4a1a      	ldr	r2, [pc, #104]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090c0:	6911      	ldr	r1, [r2, #16]
100090c2:	4b24      	ldr	r3, [pc, #144]	; (10009154 <system_clock_peripheral_disable+0x338>)
100090c4:	400b      	ands	r3, r1
100090c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100090ca:	e02a      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100090cc:	4a16      	ldr	r2, [pc, #88]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090ce:	6911      	ldr	r1, [r2, #16]
100090d0:	4b21      	ldr	r3, [pc, #132]	; (10009158 <system_clock_peripheral_disable+0x33c>)
100090d2:	400b      	ands	r3, r1
100090d4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100090d8:	e023      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100090da:	4a13      	ldr	r2, [pc, #76]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090dc:	6911      	ldr	r1, [r2, #16]
100090de:	4b1f      	ldr	r3, [pc, #124]	; (1000915c <system_clock_peripheral_disable+0x340>)
100090e0:	400b      	ands	r3, r1
100090e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100090e6:	e01c      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100090e8:	4a0f      	ldr	r2, [pc, #60]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090ea:	6911      	ldr	r1, [r2, #16]
100090ec:	4b1c      	ldr	r3, [pc, #112]	; (10009160 <system_clock_peripheral_disable+0x344>)
100090ee:	400b      	ands	r3, r1
100090f0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
100090f4:	e015      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
100090f6:	4a0c      	ldr	r2, [pc, #48]	; (10009128 <system_clock_peripheral_disable+0x30c>)
100090f8:	7d13      	ldrb	r3, [r2, #20]
100090fa:	2101      	movs	r1, #1
100090fc:	438b      	bics	r3, r1
100090fe:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009100:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10009102:	e00e      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
10009104:	4a08      	ldr	r2, [pc, #32]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009106:	7d13      	ldrb	r3, [r2, #20]
10009108:	2102      	movs	r1, #2
1000910a:	438b      	bics	r3, r1
1000910c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000910e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10009110:	e007      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
10009112:	4a05      	ldr	r2, [pc, #20]	; (10009128 <system_clock_peripheral_disable+0x30c>)
10009114:	7d13      	ldrb	r3, [r2, #20]
10009116:	2104      	movs	r1, #4
10009118:	438b      	bics	r3, r1
1000911a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000911c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
1000911e:	e000      	b.n	10009122 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
10009120:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009122:	bd00      	pop	{pc}
10009124:	1001155c 	.word	0x1001155c
10009128:	4000b000 	.word	0x4000b000
1000912c:	fffffeff 	.word	0xfffffeff
10009130:	fffff7ff 	.word	0xfffff7ff
10009134:	ffffefff 	.word	0xffffefff
10009138:	ffffdfff 	.word	0xffffdfff
1000913c:	ffffbfff 	.word	0xffffbfff
10009140:	ffff7fff 	.word	0xffff7fff
10009144:	fffeffff 	.word	0xfffeffff
10009148:	fffdffff 	.word	0xfffdffff
1000914c:	fffbffff 	.word	0xfffbffff
10009150:	fff7ffff 	.word	0xfff7ffff
10009154:	ffefffff 	.word	0xffefffff
10009158:	ffdfffff 	.word	0xffdfffff
1000915c:	ffbfffff 	.word	0xffbfffff
10009160:	ff7fffff 	.word	0xff7fffff
10009164:	feffffff 	.word	0xfeffffff
10009168:	fdffffff 	.word	0xfdffffff
1000916c:	fbffffff 	.word	0xfbffffff
10009170:	f7ffffff 	.word	0xf7ffffff
10009174:	efffffff 	.word	0xefffffff
10009178:	dfffffff 	.word	0xdfffffff
1000917c:	bfffffff 	.word	0xbfffffff
10009180:	fffffdff 	.word	0xfffffdff
10009184:	fffffbff 	.word	0xfffffbff

10009188 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009188:	b500      	push	{lr}
	switch (peripheral) {
1000918a:	2843      	cmp	r0, #67	; 0x43
1000918c:	d900      	bls.n	10009190 <system_peripheral_reset+0x8>
1000918e:	e223      	b.n	100095d8 <system_peripheral_reset+0x450>
10009190:	0080      	lsls	r0, r0, #2
10009192:	4be0      	ldr	r3, [pc, #896]	; (10009514 <system_peripheral_reset+0x38c>)
10009194:	581b      	ldr	r3, [r3, r0]
10009196:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009198:	4bdf      	ldr	r3, [pc, #892]	; (10009518 <system_peripheral_reset+0x390>)
1000919a:	6859      	ldr	r1, [r3, #4]
1000919c:	2202      	movs	r2, #2
1000919e:	4391      	bics	r1, r2
100091a0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091a2:	6859      	ldr	r1, [r3, #4]
100091a4:	430a      	orrs	r2, r1
100091a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091a8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
100091aa:	e216      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091ac:	4bda      	ldr	r3, [pc, #872]	; (10009518 <system_peripheral_reset+0x390>)
100091ae:	6859      	ldr	r1, [r3, #4]
100091b0:	2204      	movs	r2, #4
100091b2:	4391      	bics	r1, r2
100091b4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091b6:	6859      	ldr	r1, [r3, #4]
100091b8:	430a      	orrs	r2, r1
100091ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091bc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
100091be:	e20c      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091c0:	4bd5      	ldr	r3, [pc, #852]	; (10009518 <system_peripheral_reset+0x390>)
100091c2:	6859      	ldr	r1, [r3, #4]
100091c4:	2208      	movs	r2, #8
100091c6:	4391      	bics	r1, r2
100091c8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ca:	6859      	ldr	r1, [r3, #4]
100091cc:	430a      	orrs	r2, r1
100091ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091d0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
100091d2:	e202      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091d4:	4bd0      	ldr	r3, [pc, #832]	; (10009518 <system_peripheral_reset+0x390>)
100091d6:	6859      	ldr	r1, [r3, #4]
100091d8:	2210      	movs	r2, #16
100091da:	4391      	bics	r1, r2
100091dc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091de:	6859      	ldr	r1, [r3, #4]
100091e0:	430a      	orrs	r2, r1
100091e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091e4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
100091e6:	e1f8      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091e8:	4bcb      	ldr	r3, [pc, #812]	; (10009518 <system_peripheral_reset+0x390>)
100091ea:	6859      	ldr	r1, [r3, #4]
100091ec:	2220      	movs	r2, #32
100091ee:	4391      	bics	r1, r2
100091f0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091f2:	6859      	ldr	r1, [r3, #4]
100091f4:	430a      	orrs	r2, r1
100091f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091f8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
100091fa:	e1ee      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091fc:	4bc6      	ldr	r3, [pc, #792]	; (10009518 <system_peripheral_reset+0x390>)
100091fe:	6859      	ldr	r1, [r3, #4]
10009200:	2240      	movs	r2, #64	; 0x40
10009202:	4391      	bics	r1, r2
10009204:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009206:	6859      	ldr	r1, [r3, #4]
10009208:	430a      	orrs	r2, r1
1000920a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000920c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
1000920e:	e1e4      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009210:	4bc1      	ldr	r3, [pc, #772]	; (10009518 <system_peripheral_reset+0x390>)
10009212:	6859      	ldr	r1, [r3, #4]
10009214:	2280      	movs	r2, #128	; 0x80
10009216:	4391      	bics	r1, r2
10009218:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000921a:	6859      	ldr	r1, [r3, #4]
1000921c:	430a      	orrs	r2, r1
1000921e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009220:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10009222:	e1da      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009224:	4bbc      	ldr	r3, [pc, #752]	; (10009518 <system_peripheral_reset+0x390>)
10009226:	6859      	ldr	r1, [r3, #4]
10009228:	4abc      	ldr	r2, [pc, #752]	; (1000951c <system_peripheral_reset+0x394>)
1000922a:	400a      	ands	r2, r1
1000922c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000922e:	685a      	ldr	r2, [r3, #4]
10009230:	2180      	movs	r1, #128	; 0x80
10009232:	0049      	lsls	r1, r1, #1
10009234:	430a      	orrs	r2, r1
10009236:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009238:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
1000923a:	e1ce      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000923c:	4bb6      	ldr	r3, [pc, #728]	; (10009518 <system_peripheral_reset+0x390>)
1000923e:	6859      	ldr	r1, [r3, #4]
10009240:	4ab7      	ldr	r2, [pc, #732]	; (10009520 <system_peripheral_reset+0x398>)
10009242:	400a      	ands	r2, r1
10009244:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009246:	685a      	ldr	r2, [r3, #4]
10009248:	2180      	movs	r1, #128	; 0x80
1000924a:	0089      	lsls	r1, r1, #2
1000924c:	430a      	orrs	r2, r1
1000924e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009250:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10009252:	e1c2      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009254:	4bb0      	ldr	r3, [pc, #704]	; (10009518 <system_peripheral_reset+0x390>)
10009256:	6859      	ldr	r1, [r3, #4]
10009258:	4ab2      	ldr	r2, [pc, #712]	; (10009524 <system_peripheral_reset+0x39c>)
1000925a:	400a      	ands	r2, r1
1000925c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000925e:	685a      	ldr	r2, [r3, #4]
10009260:	2180      	movs	r1, #128	; 0x80
10009262:	00c9      	lsls	r1, r1, #3
10009264:	430a      	orrs	r2, r1
10009266:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009268:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000926a:	e1b6      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000926c:	4baa      	ldr	r3, [pc, #680]	; (10009518 <system_peripheral_reset+0x390>)
1000926e:	6859      	ldr	r1, [r3, #4]
10009270:	4aad      	ldr	r2, [pc, #692]	; (10009528 <system_peripheral_reset+0x3a0>)
10009272:	400a      	ands	r2, r1
10009274:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009276:	685a      	ldr	r2, [r3, #4]
10009278:	2180      	movs	r1, #128	; 0x80
1000927a:	0109      	lsls	r1, r1, #4
1000927c:	430a      	orrs	r2, r1
1000927e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009280:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10009282:	e1aa      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009284:	4ba4      	ldr	r3, [pc, #656]	; (10009518 <system_peripheral_reset+0x390>)
10009286:	6859      	ldr	r1, [r3, #4]
10009288:	4aa8      	ldr	r2, [pc, #672]	; (1000952c <system_peripheral_reset+0x3a4>)
1000928a:	400a      	ands	r2, r1
1000928c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000928e:	685a      	ldr	r2, [r3, #4]
10009290:	2180      	movs	r1, #128	; 0x80
10009292:	0149      	lsls	r1, r1, #5
10009294:	430a      	orrs	r2, r1
10009296:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009298:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000929a:	e19e      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000929c:	4b9e      	ldr	r3, [pc, #632]	; (10009518 <system_peripheral_reset+0x390>)
1000929e:	6859      	ldr	r1, [r3, #4]
100092a0:	4aa3      	ldr	r2, [pc, #652]	; (10009530 <system_peripheral_reset+0x3a8>)
100092a2:	400a      	ands	r2, r1
100092a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092a6:	685a      	ldr	r2, [r3, #4]
100092a8:	2180      	movs	r1, #128	; 0x80
100092aa:	0189      	lsls	r1, r1, #6
100092ac:	430a      	orrs	r2, r1
100092ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092b0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
100092b2:	e192      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092b4:	4b98      	ldr	r3, [pc, #608]	; (10009518 <system_peripheral_reset+0x390>)
100092b6:	6859      	ldr	r1, [r3, #4]
100092b8:	4a9e      	ldr	r2, [pc, #632]	; (10009534 <system_peripheral_reset+0x3ac>)
100092ba:	400a      	ands	r2, r1
100092bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092be:	685a      	ldr	r2, [r3, #4]
100092c0:	2180      	movs	r1, #128	; 0x80
100092c2:	01c9      	lsls	r1, r1, #7
100092c4:	430a      	orrs	r2, r1
100092c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092c8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
100092ca:	e186      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092cc:	4b92      	ldr	r3, [pc, #584]	; (10009518 <system_peripheral_reset+0x390>)
100092ce:	6859      	ldr	r1, [r3, #4]
100092d0:	4a99      	ldr	r2, [pc, #612]	; (10009538 <system_peripheral_reset+0x3b0>)
100092d2:	400a      	ands	r2, r1
100092d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092d6:	685a      	ldr	r2, [r3, #4]
100092d8:	2180      	movs	r1, #128	; 0x80
100092da:	0209      	lsls	r1, r1, #8
100092dc:	430a      	orrs	r2, r1
100092de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092e0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
100092e2:	e17a      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092e4:	4b8c      	ldr	r3, [pc, #560]	; (10009518 <system_peripheral_reset+0x390>)
100092e6:	6859      	ldr	r1, [r3, #4]
100092e8:	4a94      	ldr	r2, [pc, #592]	; (1000953c <system_peripheral_reset+0x3b4>)
100092ea:	400a      	ands	r2, r1
100092ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092ee:	685a      	ldr	r2, [r3, #4]
100092f0:	2180      	movs	r1, #128	; 0x80
100092f2:	0249      	lsls	r1, r1, #9
100092f4:	430a      	orrs	r2, r1
100092f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092f8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
100092fa:	e16e      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092fc:	4b86      	ldr	r3, [pc, #536]	; (10009518 <system_peripheral_reset+0x390>)
100092fe:	6859      	ldr	r1, [r3, #4]
10009300:	4a8f      	ldr	r2, [pc, #572]	; (10009540 <system_peripheral_reset+0x3b8>)
10009302:	400a      	ands	r2, r1
10009304:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009306:	685a      	ldr	r2, [r3, #4]
10009308:	2180      	movs	r1, #128	; 0x80
1000930a:	0289      	lsls	r1, r1, #10
1000930c:	430a      	orrs	r2, r1
1000930e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009310:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
10009312:	e162      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009314:	4b80      	ldr	r3, [pc, #512]	; (10009518 <system_peripheral_reset+0x390>)
10009316:	6859      	ldr	r1, [r3, #4]
10009318:	4a8a      	ldr	r2, [pc, #552]	; (10009544 <system_peripheral_reset+0x3bc>)
1000931a:	400a      	ands	r2, r1
1000931c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000931e:	685a      	ldr	r2, [r3, #4]
10009320:	2180      	movs	r1, #128	; 0x80
10009322:	02c9      	lsls	r1, r1, #11
10009324:	430a      	orrs	r2, r1
10009326:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009328:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000932a:	e156      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000932c:	4b7a      	ldr	r3, [pc, #488]	; (10009518 <system_peripheral_reset+0x390>)
1000932e:	6859      	ldr	r1, [r3, #4]
10009330:	4a85      	ldr	r2, [pc, #532]	; (10009548 <system_peripheral_reset+0x3c0>)
10009332:	400a      	ands	r2, r1
10009334:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009336:	685a      	ldr	r2, [r3, #4]
10009338:	2180      	movs	r1, #128	; 0x80
1000933a:	0309      	lsls	r1, r1, #12
1000933c:	430a      	orrs	r2, r1
1000933e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009340:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10009342:	e14a      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009344:	4b74      	ldr	r3, [pc, #464]	; (10009518 <system_peripheral_reset+0x390>)
10009346:	6859      	ldr	r1, [r3, #4]
10009348:	4a80      	ldr	r2, [pc, #512]	; (1000954c <system_peripheral_reset+0x3c4>)
1000934a:	400a      	ands	r2, r1
1000934c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000934e:	685a      	ldr	r2, [r3, #4]
10009350:	2180      	movs	r1, #128	; 0x80
10009352:	0349      	lsls	r1, r1, #13
10009354:	430a      	orrs	r2, r1
10009356:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009358:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000935a:	e13e      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000935c:	4b6e      	ldr	r3, [pc, #440]	; (10009518 <system_peripheral_reset+0x390>)
1000935e:	6859      	ldr	r1, [r3, #4]
10009360:	4a7b      	ldr	r2, [pc, #492]	; (10009550 <system_peripheral_reset+0x3c8>)
10009362:	400a      	ands	r2, r1
10009364:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009366:	685a      	ldr	r2, [r3, #4]
10009368:	2180      	movs	r1, #128	; 0x80
1000936a:	0389      	lsls	r1, r1, #14
1000936c:	430a      	orrs	r2, r1
1000936e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009370:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10009372:	e132      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009374:	4b68      	ldr	r3, [pc, #416]	; (10009518 <system_peripheral_reset+0x390>)
10009376:	6859      	ldr	r1, [r3, #4]
10009378:	4a76      	ldr	r2, [pc, #472]	; (10009554 <system_peripheral_reset+0x3cc>)
1000937a:	400a      	ands	r2, r1
1000937c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000937e:	685a      	ldr	r2, [r3, #4]
10009380:	2180      	movs	r1, #128	; 0x80
10009382:	03c9      	lsls	r1, r1, #15
10009384:	430a      	orrs	r2, r1
10009386:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009388:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000938a:	e126      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000938c:	4b62      	ldr	r3, [pc, #392]	; (10009518 <system_peripheral_reset+0x390>)
1000938e:	6859      	ldr	r1, [r3, #4]
10009390:	4a71      	ldr	r2, [pc, #452]	; (10009558 <system_peripheral_reset+0x3d0>)
10009392:	400a      	ands	r2, r1
10009394:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009396:	685a      	ldr	r2, [r3, #4]
10009398:	2180      	movs	r1, #128	; 0x80
1000939a:	0409      	lsls	r1, r1, #16
1000939c:	430a      	orrs	r2, r1
1000939e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093a0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
100093a2:	e11a      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093a4:	4b5c      	ldr	r3, [pc, #368]	; (10009518 <system_peripheral_reset+0x390>)
100093a6:	6859      	ldr	r1, [r3, #4]
100093a8:	4a6c      	ldr	r2, [pc, #432]	; (1000955c <system_peripheral_reset+0x3d4>)
100093aa:	400a      	ands	r2, r1
100093ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093ae:	685a      	ldr	r2, [r3, #4]
100093b0:	2180      	movs	r1, #128	; 0x80
100093b2:	0449      	lsls	r1, r1, #17
100093b4:	430a      	orrs	r2, r1
100093b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093b8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
100093ba:	e10e      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093bc:	4b56      	ldr	r3, [pc, #344]	; (10009518 <system_peripheral_reset+0x390>)
100093be:	6859      	ldr	r1, [r3, #4]
100093c0:	4a67      	ldr	r2, [pc, #412]	; (10009560 <system_peripheral_reset+0x3d8>)
100093c2:	400a      	ands	r2, r1
100093c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093c6:	685a      	ldr	r2, [r3, #4]
100093c8:	2180      	movs	r1, #128	; 0x80
100093ca:	0489      	lsls	r1, r1, #18
100093cc:	430a      	orrs	r2, r1
100093ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
100093d2:	e102      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093d4:	4b50      	ldr	r3, [pc, #320]	; (10009518 <system_peripheral_reset+0x390>)
100093d6:	6859      	ldr	r1, [r3, #4]
100093d8:	4a62      	ldr	r2, [pc, #392]	; (10009564 <system_peripheral_reset+0x3dc>)
100093da:	400a      	ands	r2, r1
100093dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093de:	685a      	ldr	r2, [r3, #4]
100093e0:	2180      	movs	r1, #128	; 0x80
100093e2:	04c9      	lsls	r1, r1, #19
100093e4:	430a      	orrs	r2, r1
100093e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
100093ea:	e0f6      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093ec:	4b4a      	ldr	r3, [pc, #296]	; (10009518 <system_peripheral_reset+0x390>)
100093ee:	6859      	ldr	r1, [r3, #4]
100093f0:	4a5d      	ldr	r2, [pc, #372]	; (10009568 <system_peripheral_reset+0x3e0>)
100093f2:	400a      	ands	r2, r1
100093f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093f6:	685a      	ldr	r2, [r3, #4]
100093f8:	2180      	movs	r1, #128	; 0x80
100093fa:	0509      	lsls	r1, r1, #20
100093fc:	430a      	orrs	r2, r1
100093fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009400:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10009402:	e0ea      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009404:	4b44      	ldr	r3, [pc, #272]	; (10009518 <system_peripheral_reset+0x390>)
10009406:	6859      	ldr	r1, [r3, #4]
10009408:	4a58      	ldr	r2, [pc, #352]	; (1000956c <system_peripheral_reset+0x3e4>)
1000940a:	400a      	ands	r2, r1
1000940c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000940e:	685a      	ldr	r2, [r3, #4]
10009410:	2180      	movs	r1, #128	; 0x80
10009412:	0549      	lsls	r1, r1, #21
10009414:	430a      	orrs	r2, r1
10009416:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009418:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
1000941a:	e0de      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000941c:	4b3e      	ldr	r3, [pc, #248]	; (10009518 <system_peripheral_reset+0x390>)
1000941e:	6859      	ldr	r1, [r3, #4]
10009420:	4a53      	ldr	r2, [pc, #332]	; (10009570 <system_peripheral_reset+0x3e8>)
10009422:	400a      	ands	r2, r1
10009424:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009426:	685a      	ldr	r2, [r3, #4]
10009428:	2180      	movs	r1, #128	; 0x80
1000942a:	0589      	lsls	r1, r1, #22
1000942c:	430a      	orrs	r2, r1
1000942e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009430:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10009432:	e0d2      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009434:	4b38      	ldr	r3, [pc, #224]	; (10009518 <system_peripheral_reset+0x390>)
10009436:	6859      	ldr	r1, [r3, #4]
10009438:	4a4e      	ldr	r2, [pc, #312]	; (10009574 <system_peripheral_reset+0x3ec>)
1000943a:	400a      	ands	r2, r1
1000943c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000943e:	685a      	ldr	r2, [r3, #4]
10009440:	2180      	movs	r1, #128	; 0x80
10009442:	05c9      	lsls	r1, r1, #23
10009444:	430a      	orrs	r2, r1
10009446:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009448:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
1000944a:	e0c6      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000944c:	4a32      	ldr	r2, [pc, #200]	; (10009518 <system_peripheral_reset+0x390>)
1000944e:	6853      	ldr	r3, [r2, #4]
10009450:	005b      	lsls	r3, r3, #1
10009452:	085b      	lsrs	r3, r3, #1
10009454:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009456:	6853      	ldr	r3, [r2, #4]
10009458:	2180      	movs	r1, #128	; 0x80
1000945a:	0609      	lsls	r1, r1, #24
1000945c:	430b      	orrs	r3, r1
1000945e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009460:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10009462:	e0ba      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009464:	4b2c      	ldr	r3, [pc, #176]	; (10009518 <system_peripheral_reset+0x390>)
10009466:	891a      	ldrh	r2, [r3, #8]
10009468:	2101      	movs	r1, #1
1000946a:	438a      	bics	r2, r1
1000946c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000946e:	8919      	ldrh	r1, [r3, #8]
10009470:	2201      	movs	r2, #1
10009472:	430a      	orrs	r2, r1
10009474:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009476:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10009478:	e0af      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000947a:	4b27      	ldr	r3, [pc, #156]	; (10009518 <system_peripheral_reset+0x390>)
1000947c:	891a      	ldrh	r2, [r3, #8]
1000947e:	2102      	movs	r1, #2
10009480:	438a      	bics	r2, r1
10009482:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009484:	8919      	ldrh	r1, [r3, #8]
10009486:	2202      	movs	r2, #2
10009488:	430a      	orrs	r2, r1
1000948a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000948c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
1000948e:	e0a4      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009490:	4b21      	ldr	r3, [pc, #132]	; (10009518 <system_peripheral_reset+0x390>)
10009492:	891a      	ldrh	r2, [r3, #8]
10009494:	2104      	movs	r1, #4
10009496:	438a      	bics	r2, r1
10009498:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000949a:	8919      	ldrh	r1, [r3, #8]
1000949c:	2204      	movs	r2, #4
1000949e:	430a      	orrs	r2, r1
100094a0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a2:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
100094a4:	e099      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094a6:	4b1c      	ldr	r3, [pc, #112]	; (10009518 <system_peripheral_reset+0x390>)
100094a8:	891a      	ldrh	r2, [r3, #8]
100094aa:	2108      	movs	r1, #8
100094ac:	438a      	bics	r2, r1
100094ae:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094b0:	8919      	ldrh	r1, [r3, #8]
100094b2:	2208      	movs	r2, #8
100094b4:	430a      	orrs	r2, r1
100094b6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b8:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
100094ba:	e08e      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094bc:	4b16      	ldr	r3, [pc, #88]	; (10009518 <system_peripheral_reset+0x390>)
100094be:	891a      	ldrh	r2, [r3, #8]
100094c0:	2110      	movs	r1, #16
100094c2:	438a      	bics	r2, r1
100094c4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094c6:	8919      	ldrh	r1, [r3, #8]
100094c8:	2210      	movs	r2, #16
100094ca:	430a      	orrs	r2, r1
100094cc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094ce:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
100094d0:	e083      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094d2:	4b11      	ldr	r3, [pc, #68]	; (10009518 <system_peripheral_reset+0x390>)
100094d4:	891a      	ldrh	r2, [r3, #8]
100094d6:	2120      	movs	r1, #32
100094d8:	438a      	bics	r2, r1
100094da:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094dc:	8919      	ldrh	r1, [r3, #8]
100094de:	2220      	movs	r2, #32
100094e0:	430a      	orrs	r2, r1
100094e2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094e4:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
100094e6:	e078      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094e8:	4b0b      	ldr	r3, [pc, #44]	; (10009518 <system_peripheral_reset+0x390>)
100094ea:	891a      	ldrh	r2, [r3, #8]
100094ec:	2140      	movs	r1, #64	; 0x40
100094ee:	438a      	bics	r2, r1
100094f0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094f2:	8919      	ldrh	r1, [r3, #8]
100094f4:	2240      	movs	r2, #64	; 0x40
100094f6:	430a      	orrs	r2, r1
100094f8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094fa:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
100094fc:	e06d      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094fe:	4b06      	ldr	r3, [pc, #24]	; (10009518 <system_peripheral_reset+0x390>)
10009500:	891a      	ldrh	r2, [r3, #8]
10009502:	2180      	movs	r1, #128	; 0x80
10009504:	438a      	bics	r2, r1
10009506:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009508:	8919      	ldrh	r1, [r3, #8]
1000950a:	2280      	movs	r2, #128	; 0x80
1000950c:	430a      	orrs	r2, r1
1000950e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009510:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
10009512:	e062      	b.n	100095da <system_peripheral_reset+0x452>
10009514:	10011634 	.word	0x10011634
10009518:	4000b000 	.word	0x4000b000
1000951c:	fffffeff 	.word	0xfffffeff
10009520:	fffffdff 	.word	0xfffffdff
10009524:	fffffbff 	.word	0xfffffbff
10009528:	fffff7ff 	.word	0xfffff7ff
1000952c:	ffffefff 	.word	0xffffefff
10009530:	ffffdfff 	.word	0xffffdfff
10009534:	ffffbfff 	.word	0xffffbfff
10009538:	ffff7fff 	.word	0xffff7fff
1000953c:	fffeffff 	.word	0xfffeffff
10009540:	fffdffff 	.word	0xfffdffff
10009544:	fffbffff 	.word	0xfffbffff
10009548:	fff7ffff 	.word	0xfff7ffff
1000954c:	ffefffff 	.word	0xffefffff
10009550:	ffdfffff 	.word	0xffdfffff
10009554:	ffbfffff 	.word	0xffbfffff
10009558:	ff7fffff 	.word	0xff7fffff
1000955c:	feffffff 	.word	0xfeffffff
10009560:	fdffffff 	.word	0xfdffffff
10009564:	fbffffff 	.word	0xfbffffff
10009568:	f7ffffff 	.word	0xf7ffffff
1000956c:	efffffff 	.word	0xefffffff
10009570:	dfffffff 	.word	0xdfffffff
10009574:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009578:	4b18      	ldr	r3, [pc, #96]	; (100095dc <system_peripheral_reset+0x454>)
1000957a:	8919      	ldrh	r1, [r3, #8]
1000957c:	4a18      	ldr	r2, [pc, #96]	; (100095e0 <system_peripheral_reset+0x458>)
1000957e:	400a      	ands	r2, r1
10009580:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009582:	8919      	ldrh	r1, [r3, #8]
10009584:	2280      	movs	r2, #128	; 0x80
10009586:	0052      	lsls	r2, r2, #1
10009588:	430a      	orrs	r2, r1
1000958a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000958c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000958e:	e024      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009590:	4b12      	ldr	r3, [pc, #72]	; (100095dc <system_peripheral_reset+0x454>)
10009592:	8919      	ldrh	r1, [r3, #8]
10009594:	4a13      	ldr	r2, [pc, #76]	; (100095e4 <system_peripheral_reset+0x45c>)
10009596:	400a      	ands	r2, r1
10009598:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000959a:	8919      	ldrh	r1, [r3, #8]
1000959c:	2280      	movs	r2, #128	; 0x80
1000959e:	0092      	lsls	r2, r2, #2
100095a0:	430a      	orrs	r2, r1
100095a2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
100095a6:	e018      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095a8:	4b0c      	ldr	r3, [pc, #48]	; (100095dc <system_peripheral_reset+0x454>)
100095aa:	8919      	ldrh	r1, [r3, #8]
100095ac:	4a0e      	ldr	r2, [pc, #56]	; (100095e8 <system_peripheral_reset+0x460>)
100095ae:	400a      	ands	r2, r1
100095b0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095b2:	8919      	ldrh	r1, [r3, #8]
100095b4:	2280      	movs	r2, #128	; 0x80
100095b6:	00d2      	lsls	r2, r2, #3
100095b8:	430a      	orrs	r2, r1
100095ba:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095bc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
100095be:	e00c      	b.n	100095da <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095c0:	4b06      	ldr	r3, [pc, #24]	; (100095dc <system_peripheral_reset+0x454>)
100095c2:	8919      	ldrh	r1, [r3, #8]
100095c4:	4a09      	ldr	r2, [pc, #36]	; (100095ec <system_peripheral_reset+0x464>)
100095c6:	400a      	ands	r2, r1
100095c8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095ca:	8919      	ldrh	r1, [r3, #8]
100095cc:	2280      	movs	r2, #128	; 0x80
100095ce:	0112      	lsls	r2, r2, #4
100095d0:	430a      	orrs	r2, r1
100095d2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d4:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
100095d6:	e000      	b.n	100095da <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
100095d8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100095da:	bd00      	pop	{pc}
100095dc:	4000b000 	.word	0x4000b000
100095e0:	fffffeff 	.word	0xfffffeff
100095e4:	fffffdff 	.word	0xfffffdff
100095e8:	fffffbff 	.word	0xfffffbff
100095ec:	fffff7ff 	.word	0xfffff7ff

100095f0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100095f0:	2380      	movs	r3, #128	; 0x80
100095f2:	04db      	lsls	r3, r3, #19
100095f4:	469c      	mov	ip, r3
100095f6:	4460      	add	r0, ip
100095f8:	0080      	lsls	r0, r0, #2
100095fa:	6001      	str	r1, [r0, #0]
}
100095fc:	4770      	bx	lr
100095fe:	46c0      	nop			; (mov r8, r8)

10009600 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009600:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009602:	4b20      	ldr	r3, [pc, #128]	; (10009684 <uart_rx0_isr_handler+0x84>)
10009604:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009606:	6823      	ldr	r3, [r4, #0]
10009608:	7d1d      	ldrb	r5, [r3, #20]
1000960a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000960c:	066a      	lsls	r2, r5, #25
1000960e:	d513      	bpl.n	10009638 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009610:	211e      	movs	r1, #30
10009612:	2222      	movs	r2, #34	; 0x22
10009614:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009616:	7e1a      	ldrb	r2, [r3, #24]
10009618:	3123      	adds	r1, #35	; 0x23
1000961a:	438a      	bics	r2, r1
1000961c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000961e:	2321      	movs	r3, #33	; 0x21
10009620:	5ce3      	ldrb	r3, [r4, r3]
10009622:	071b      	lsls	r3, r3, #28
10009624:	d506      	bpl.n	10009634 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009626:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009628:	5ce3      	ldrb	r3, [r4, r3]
1000962a:	071b      	lsls	r3, r3, #28
1000962c:	d502      	bpl.n	10009634 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000962e:	0020      	movs	r0, r4
10009630:	6923      	ldr	r3, [r4, #16]
10009632:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009634:	6823      	ldr	r3, [r4, #0]
10009636:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009638:	07eb      	lsls	r3, r5, #31
1000963a:	d522      	bpl.n	10009682 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000963c:	6823      	ldr	r3, [r4, #0]
1000963e:	7c1b      	ldrb	r3, [r3, #16]
10009640:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009642:	6962      	ldr	r2, [r4, #20]
10009644:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009646:	6963      	ldr	r3, [r4, #20]
10009648:	3301      	adds	r3, #1
1000964a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000964c:	8ba3      	ldrh	r3, [r4, #28]
1000964e:	3b01      	subs	r3, #1
10009650:	b29b      	uxth	r3, r3
10009652:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009654:	8ba3      	ldrh	r3, [r4, #28]
10009656:	b29b      	uxth	r3, r3
10009658:	2b00      	cmp	r3, #0
1000965a:	d112      	bne.n	10009682 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000965c:	3321      	adds	r3, #33	; 0x21
1000965e:	5ce3      	ldrb	r3, [r4, r3]
10009660:	075b      	lsls	r3, r3, #29
10009662:	d50e      	bpl.n	10009682 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009664:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009666:	5ce3      	ldrb	r3, [r4, r3]
10009668:	075b      	lsls	r3, r3, #29
1000966a:	d50a      	bpl.n	10009682 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000966c:	2200      	movs	r2, #0
1000966e:	2322      	movs	r3, #34	; 0x22
10009670:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009672:	6822      	ldr	r2, [r4, #0]
10009674:	7e13      	ldrb	r3, [r2, #24]
10009676:	2101      	movs	r1, #1
10009678:	438b      	bics	r3, r1
1000967a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000967c:	68e3      	ldr	r3, [r4, #12]
1000967e:	0020      	movs	r0, r4
10009680:	4798      	blx	r3
			}
		}
	}
}
10009682:	bd70      	pop	{r4, r5, r6, pc}
10009684:	10013270 	.word	0x10013270

10009688 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009688:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000968a:	4b21      	ldr	r3, [pc, #132]	; (10009710 <uart_tx0_isr_handler+0x88>)
1000968c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000968e:	6823      	ldr	r3, [r4, #0]
10009690:	791d      	ldrb	r5, [r3, #4]
10009692:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009694:	07ea      	lsls	r2, r5, #31
10009696:	d517      	bpl.n	100096c8 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009698:	69a2      	ldr	r2, [r4, #24]
1000969a:	7811      	ldrb	r1, [r2, #0]
1000969c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000969e:	3201      	adds	r2, #1
100096a0:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100096a2:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100096a4:	8be3      	ldrh	r3, [r4, #30]
100096a6:	3b01      	subs	r3, #1
100096a8:	b29b      	uxth	r3, r3
100096aa:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100096ac:	8be3      	ldrh	r3, [r4, #30]
100096ae:	b29b      	uxth	r3, r3
100096b0:	2b00      	cmp	r3, #0
100096b2:	d109      	bne.n	100096c8 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100096b4:	6822      	ldr	r2, [r4, #0]
100096b6:	7a13      	ldrb	r3, [r2, #8]
100096b8:	2101      	movs	r1, #1
100096ba:	438b      	bics	r3, r1
100096bc:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100096be:	6822      	ldr	r2, [r4, #0]
100096c0:	7a11      	ldrb	r1, [r2, #8]
100096c2:	2310      	movs	r3, #16
100096c4:	430b      	orrs	r3, r1
100096c6:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100096c8:	06eb      	lsls	r3, r5, #27
100096ca:	d512      	bpl.n	100096f2 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096cc:	2321      	movs	r3, #33	; 0x21
100096ce:	5ce3      	ldrb	r3, [r4, r3]
100096d0:	07db      	lsls	r3, r3, #31
100096d2:	d50e      	bpl.n	100096f2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100096d4:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096d6:	5ce3      	ldrb	r3, [r4, r3]
100096d8:	07db      	lsls	r3, r3, #31
100096da:	d50a      	bpl.n	100096f2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100096dc:	2200      	movs	r2, #0
100096de:	2322      	movs	r3, #34	; 0x22
100096e0:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100096e2:	6822      	ldr	r2, [r4, #0]
100096e4:	7a13      	ldrb	r3, [r2, #8]
100096e6:	2110      	movs	r1, #16
100096e8:	438b      	bics	r3, r1
100096ea:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100096ec:	0020      	movs	r0, r4
100096ee:	6863      	ldr	r3, [r4, #4]
100096f0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100096f2:	06ab      	lsls	r3, r5, #26
100096f4:	d50a      	bpl.n	1000970c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100096f6:	2321      	movs	r3, #33	; 0x21
100096f8:	5ce3      	ldrb	r3, [r4, r3]
100096fa:	079b      	lsls	r3, r3, #30
100096fc:	d506      	bpl.n	1000970c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100096fe:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009700:	5ce3      	ldrb	r3, [r4, r3]
10009702:	079b      	lsls	r3, r3, #30
10009704:	d502      	bpl.n	1000970c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009706:	68a3      	ldr	r3, [r4, #8]
10009708:	0020      	movs	r0, r4
1000970a:	4798      	blx	r3
		}

	}
}
1000970c:	bd70      	pop	{r4, r5, r6, pc}
1000970e:	46c0      	nop			; (mov r8, r8)
10009710:	10013270 	.word	0x10013270

10009714 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009714:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009716:	4b20      	ldr	r3, [pc, #128]	; (10009798 <uart_rx1_isr_handler+0x84>)
10009718:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000971a:	6823      	ldr	r3, [r4, #0]
1000971c:	7d1d      	ldrb	r5, [r3, #20]
1000971e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009720:	066a      	lsls	r2, r5, #25
10009722:	d513      	bpl.n	1000974c <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009724:	211e      	movs	r1, #30
10009726:	2222      	movs	r2, #34	; 0x22
10009728:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000972a:	7e1a      	ldrb	r2, [r3, #24]
1000972c:	3123      	adds	r1, #35	; 0x23
1000972e:	438a      	bics	r2, r1
10009730:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009732:	2321      	movs	r3, #33	; 0x21
10009734:	5ce3      	ldrb	r3, [r4, r3]
10009736:	071b      	lsls	r3, r3, #28
10009738:	d506      	bpl.n	10009748 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000973a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000973c:	5ce3      	ldrb	r3, [r4, r3]
1000973e:	071b      	lsls	r3, r3, #28
10009740:	d502      	bpl.n	10009748 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009742:	0020      	movs	r0, r4
10009744:	6923      	ldr	r3, [r4, #16]
10009746:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009748:	6823      	ldr	r3, [r4, #0]
1000974a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000974c:	07eb      	lsls	r3, r5, #31
1000974e:	d522      	bpl.n	10009796 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009750:	6823      	ldr	r3, [r4, #0]
10009752:	7c1b      	ldrb	r3, [r3, #16]
10009754:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009756:	6962      	ldr	r2, [r4, #20]
10009758:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000975a:	6963      	ldr	r3, [r4, #20]
1000975c:	3301      	adds	r3, #1
1000975e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009760:	8ba3      	ldrh	r3, [r4, #28]
10009762:	3b01      	subs	r3, #1
10009764:	b29b      	uxth	r3, r3
10009766:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009768:	8ba3      	ldrh	r3, [r4, #28]
1000976a:	b29b      	uxth	r3, r3
1000976c:	2b00      	cmp	r3, #0
1000976e:	d112      	bne.n	10009796 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009770:	3321      	adds	r3, #33	; 0x21
10009772:	5ce3      	ldrb	r3, [r4, r3]
10009774:	075b      	lsls	r3, r3, #29
10009776:	d50e      	bpl.n	10009796 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009778:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000977a:	5ce3      	ldrb	r3, [r4, r3]
1000977c:	075b      	lsls	r3, r3, #29
1000977e:	d50a      	bpl.n	10009796 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009780:	2200      	movs	r2, #0
10009782:	2322      	movs	r3, #34	; 0x22
10009784:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009786:	6822      	ldr	r2, [r4, #0]
10009788:	7e13      	ldrb	r3, [r2, #24]
1000978a:	2101      	movs	r1, #1
1000978c:	438b      	bics	r3, r1
1000978e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009790:	68e3      	ldr	r3, [r4, #12]
10009792:	0020      	movs	r0, r4
10009794:	4798      	blx	r3
			}
		}
	}
}
10009796:	bd70      	pop	{r4, r5, r6, pc}
10009798:	10013270 	.word	0x10013270

1000979c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000979c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000979e:	4b21      	ldr	r3, [pc, #132]	; (10009824 <uart_tx1_isr_handler+0x88>)
100097a0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100097a2:	6823      	ldr	r3, [r4, #0]
100097a4:	791d      	ldrb	r5, [r3, #4]
100097a6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100097a8:	07ea      	lsls	r2, r5, #31
100097aa:	d517      	bpl.n	100097dc <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100097ac:	69a2      	ldr	r2, [r4, #24]
100097ae:	7811      	ldrb	r1, [r2, #0]
100097b0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100097b2:	3201      	adds	r2, #1
100097b4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100097b6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100097b8:	8be3      	ldrh	r3, [r4, #30]
100097ba:	3b01      	subs	r3, #1
100097bc:	b29b      	uxth	r3, r3
100097be:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100097c0:	8be3      	ldrh	r3, [r4, #30]
100097c2:	b29b      	uxth	r3, r3
100097c4:	2b00      	cmp	r3, #0
100097c6:	d109      	bne.n	100097dc <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100097c8:	6822      	ldr	r2, [r4, #0]
100097ca:	7a13      	ldrb	r3, [r2, #8]
100097cc:	2101      	movs	r1, #1
100097ce:	438b      	bics	r3, r1
100097d0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100097d2:	6822      	ldr	r2, [r4, #0]
100097d4:	7a11      	ldrb	r1, [r2, #8]
100097d6:	2310      	movs	r3, #16
100097d8:	430b      	orrs	r3, r1
100097da:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100097dc:	06eb      	lsls	r3, r5, #27
100097de:	d512      	bpl.n	10009806 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097e0:	2321      	movs	r3, #33	; 0x21
100097e2:	5ce3      	ldrb	r3, [r4, r3]
100097e4:	07db      	lsls	r3, r3, #31
100097e6:	d50e      	bpl.n	10009806 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100097e8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097ea:	5ce3      	ldrb	r3, [r4, r3]
100097ec:	07db      	lsls	r3, r3, #31
100097ee:	d50a      	bpl.n	10009806 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100097f0:	2200      	movs	r2, #0
100097f2:	2322      	movs	r3, #34	; 0x22
100097f4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100097f6:	6822      	ldr	r2, [r4, #0]
100097f8:	7a13      	ldrb	r3, [r2, #8]
100097fa:	2110      	movs	r1, #16
100097fc:	438b      	bics	r3, r1
100097fe:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009800:	0020      	movs	r0, r4
10009802:	6863      	ldr	r3, [r4, #4]
10009804:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009806:	06ab      	lsls	r3, r5, #26
10009808:	d50a      	bpl.n	10009820 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000980a:	2321      	movs	r3, #33	; 0x21
1000980c:	5ce3      	ldrb	r3, [r4, r3]
1000980e:	079b      	lsls	r3, r3, #30
10009810:	d506      	bpl.n	10009820 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009812:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009814:	5ce3      	ldrb	r3, [r4, r3]
10009816:	079b      	lsls	r3, r3, #30
10009818:	d502      	bpl.n	10009820 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000981a:	68a3      	ldr	r3, [r4, #8]
1000981c:	0020      	movs	r0, r4
1000981e:	4798      	blx	r3
		}

	}
}
10009820:	bd70      	pop	{r4, r5, r6, pc}
10009822:	46c0      	nop			; (mov r8, r8)
10009824:	10013270 	.word	0x10013270

10009828 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009828:	23e1      	movs	r3, #225	; 0xe1
1000982a:	025b      	lsls	r3, r3, #9
1000982c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000982e:	2300      	movs	r3, #0
10009830:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009832:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009834:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009836:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009838:	3302      	adds	r3, #2
1000983a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
1000983c:	2203      	movs	r2, #3
1000983e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009840:	3201      	adds	r2, #1
10009842:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009844:	3201      	adds	r2, #1
10009846:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009848:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
1000984a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
1000984c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000984e:	6243      	str	r3, [r0, #36]	; 0x24
}
10009850:	4770      	bx	lr
10009852:	46c0      	nop			; (mov r8, r8)

10009854 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009856:	464f      	mov	r7, r9
10009858:	4646      	mov	r6, r8
1000985a:	b4c0      	push	{r6, r7}
1000985c:	0005      	movs	r5, r0
1000985e:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009860:	6001      	str	r1, [r0, #0]

	if (hw == UART0) {
10009862:	4b55      	ldr	r3, [pc, #340]	; (100099b8 <uart_init+0x164>)
10009864:	4299      	cmp	r1, r3
10009866:	d118      	bne.n	1000989a <uart_init+0x46>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009868:	2009      	movs	r0, #9
1000986a:	4c54      	ldr	r4, [pc, #336]	; (100099bc <uart_init+0x168>)
1000986c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000986e:	200a      	movs	r0, #10
10009870:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009872:	2009      	movs	r0, #9
10009874:	4c52      	ldr	r4, [pc, #328]	; (100099c0 <uart_init+0x16c>)
10009876:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009878:	200a      	movs	r0, #10
1000987a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000987c:	4b51      	ldr	r3, [pc, #324]	; (100099c4 <uart_init+0x170>)
1000987e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009880:	4951      	ldr	r1, [pc, #324]	; (100099c8 <uart_init+0x174>)
10009882:	2010      	movs	r0, #16
10009884:	4c51      	ldr	r4, [pc, #324]	; (100099cc <uart_init+0x178>)
10009886:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009888:	4951      	ldr	r1, [pc, #324]	; (100099d0 <uart_init+0x17c>)
1000988a:	2011      	movs	r0, #17
1000988c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000988e:	4b51      	ldr	r3, [pc, #324]	; (100099d4 <uart_init+0x180>)
10009890:	2201      	movs	r2, #1
10009892:	601a      	str	r2, [r3, #0]
10009894:	3201      	adds	r2, #1
10009896:	601a      	str	r2, [r3, #0]
10009898:	e01a      	b.n	100098d0 <uart_init+0x7c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000989a:	4b4f      	ldr	r3, [pc, #316]	; (100099d8 <uart_init+0x184>)
1000989c:	4299      	cmp	r1, r3
1000989e:	d117      	bne.n	100098d0 <uart_init+0x7c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
100098a0:	200b      	movs	r0, #11
100098a2:	4c46      	ldr	r4, [pc, #280]	; (100099bc <uart_init+0x168>)
100098a4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
100098a6:	200c      	movs	r0, #12
100098a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
100098aa:	200b      	movs	r0, #11
100098ac:	4c44      	ldr	r4, [pc, #272]	; (100099c0 <uart_init+0x16c>)
100098ae:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
100098b0:	200c      	movs	r0, #12
100098b2:	47a0      	blx	r4
		_uart_instances[1] = module;
100098b4:	4b43      	ldr	r3, [pc, #268]	; (100099c4 <uart_init+0x170>)
100098b6:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
100098b8:	4948      	ldr	r1, [pc, #288]	; (100099dc <uart_init+0x188>)
100098ba:	2012      	movs	r0, #18
100098bc:	4c43      	ldr	r4, [pc, #268]	; (100099cc <uart_init+0x178>)
100098be:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100098c0:	4947      	ldr	r1, [pc, #284]	; (100099e0 <uart_init+0x18c>)
100098c2:	2013      	movs	r0, #19
100098c4:	47a0      	blx	r4
100098c6:	4b43      	ldr	r3, [pc, #268]	; (100099d4 <uart_init+0x180>)
100098c8:	2204      	movs	r2, #4
100098ca:	601a      	str	r2, [r3, #0]
100098cc:	3204      	adds	r2, #4
100098ce:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100098d0:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
100098d2:	2204      	movs	r2, #4
100098d4:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100098d6:	2b00      	cmp	r3, #0
100098d8:	d152      	bne.n	10009980 <uart_init+0x12c>
		index = 4;
	} else {
		index = 2;
100098da:	3302      	adds	r3, #2
100098dc:	4698      	mov	r8, r3
100098de:	e04f      	b.n	10009980 <uart_init+0x12c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100098e0:	8a31      	ldrh	r1, [r6, #16]
100098e2:	ce01      	ldmia	r6!, {r0}
100098e4:	b2c0      	uxtb	r0, r0
100098e6:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
100098e8:	3401      	adds	r4, #1
100098ea:	b2e4      	uxtb	r4, r4
100098ec:	4544      	cmp	r4, r8
100098ee:	d3f7      	bcc.n	100098e0 <uart_init+0x8c>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100098f0:	682b      	ldr	r3, [r5, #0]
100098f2:	7d1a      	ldrb	r2, [r3, #20]
100098f4:	07d2      	lsls	r2, r2, #31
100098f6:	d504      	bpl.n	10009902 <uart_init+0xae>
100098f8:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
100098fa:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100098fc:	7d1a      	ldrb	r2, [r3, #20]
100098fe:	420a      	tst	r2, r1
10009900:	d1fb      	bne.n	100098fa <uart_init+0xa6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009902:	2100      	movs	r1, #0
10009904:	2220      	movs	r2, #32
10009906:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009908:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
1000990a:	1e59      	subs	r1, r3, #1
1000990c:	418b      	sbcs	r3, r1
1000990e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009910:	793b      	ldrb	r3, [r7, #4]
10009912:	797a      	ldrb	r2, [r7, #5]
10009914:	4313      	orrs	r3, r2
10009916:	430b      	orrs	r3, r1
	switch(config->parity) {
10009918:	79ba      	ldrb	r2, [r7, #6]
1000991a:	2a02      	cmp	r2, #2
1000991c:	d00d      	beq.n	1000993a <uart_init+0xe6>
1000991e:	b2d1      	uxtb	r1, r2
10009920:	2902      	cmp	r1, #2
10009922:	d802      	bhi.n	1000992a <uart_init+0xd6>
10009924:	2a01      	cmp	r2, #1
10009926:	d005      	beq.n	10009934 <uart_init+0xe0>
10009928:	e00f      	b.n	1000994a <uart_init+0xf6>
1000992a:	2a03      	cmp	r2, #3
1000992c:	d008      	beq.n	10009940 <uart_init+0xec>
1000992e:	2a04      	cmp	r2, #4
10009930:	d009      	beq.n	10009946 <uart_init+0xf2>
10009932:	e00a      	b.n	1000994a <uart_init+0xf6>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009934:	2202      	movs	r2, #2
10009936:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009938:	e007      	b.n	1000994a <uart_init+0xf6>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
1000993a:	2206      	movs	r2, #6
1000993c:	4313      	orrs	r3, r2
			break;
1000993e:	e004      	b.n	1000994a <uart_init+0xf6>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10009940:	220a      	movs	r2, #10
10009942:	4313      	orrs	r3, r2
			break;
10009944:	e001      	b.n	1000994a <uart_init+0xf6>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10009946:	220e      	movs	r2, #14
10009948:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000994a:	2220      	movs	r2, #32
1000994c:	6829      	ldr	r1, [r5, #0]
1000994e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009950:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009952:	4b24      	ldr	r3, [pc, #144]	; (100099e4 <uart_init+0x190>)
10009954:	4798      	blx	r3
10009956:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009958:	0031      	movs	r1, r6
1000995a:	4b23      	ldr	r3, [pc, #140]	; (100099e8 <uart_init+0x194>)
1000995c:	4798      	blx	r3
1000995e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009960:	0400      	lsls	r0, r0, #16
10009962:	0c00      	lsrs	r0, r0, #16
10009964:	4370      	muls	r0, r6
10009966:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009968:	0931      	lsrs	r1, r6, #4
1000996a:	4288      	cmp	r0, r1
1000996c:	d906      	bls.n	1000997c <uart_init+0x128>
1000996e:	2300      	movs	r3, #0
		i++;
10009970:	3301      	adds	r3, #1
10009972:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009974:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009976:	4288      	cmp	r0, r1
10009978:	d8fa      	bhi.n	10009970 <uart_init+0x11c>
1000997a:	e007      	b.n	1000998c <uart_init+0x138>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000997c:	2300      	movs	r3, #0
1000997e:	e005      	b.n	1000998c <uart_init+0x138>
10009980:	003e      	movs	r6, r7
10009982:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009984:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009986:	4b19      	ldr	r3, [pc, #100]	; (100099ec <uart_init+0x198>)
10009988:	4699      	mov	r9, r3
1000998a:	e7a9      	b.n	100098e0 <uart_init+0x8c>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000998c:	2100      	movs	r1, #0
1000998e:	2028      	movs	r0, #40	; 0x28
10009990:	682c      	ldr	r4, [r5, #0]
10009992:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009994:	3301      	adds	r3, #1
10009996:	071b      	lsls	r3, r3, #28
10009998:	0f5b      	lsrs	r3, r3, #29
1000999a:	00d2      	lsls	r2, r2, #3
1000999c:	4313      	orrs	r3, r2
1000999e:	b29b      	uxth	r3, r3
100099a0:	682a      	ldr	r2, [r5, #0]
100099a2:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
100099a4:	682b      	ldr	r3, [r5, #0]
100099a6:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
100099a8:	682b      	ldr	r3, [r5, #0]
100099aa:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
100099ac:	2000      	movs	r0, #0
100099ae:	bc0c      	pop	{r2, r3}
100099b0:	4690      	mov	r8, r2
100099b2:	4699      	mov	r9, r3
100099b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100099b6:	46c0      	nop			; (mov r8, r8)
100099b8:	40004000 	.word	0x40004000
100099bc:	10009189 	.word	0x10009189
100099c0:	10008ac1 	.word	0x10008ac1
100099c4:	10013270 	.word	0x10013270
100099c8:	10009601 	.word	0x10009601
100099cc:	100095f1 	.word	0x100095f1
100099d0:	10009689 	.word	0x10009689
100099d4:	e000e100 	.word	0xe000e100
100099d8:	40005000 	.word	0x40005000
100099dc:	10009715 	.word	0x10009715
100099e0:	1000979d 	.word	0x1000979d
100099e4:	10008ab5 	.word	0x10008ab5
100099e8:	1000f155 	.word	0x1000f155
100099ec:	10008421 	.word	0x10008421

100099f0 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
100099f0:	6802      	ldr	r2, [r0, #0]
100099f2:	2001      	movs	r0, #1
100099f4:	7913      	ldrb	r3, [r2, #4]
100099f6:	4203      	tst	r3, r0
100099f8:	d0fc      	beq.n	100099f4 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
100099fa:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
100099fc:	2000      	movs	r0, #0
100099fe:	4770      	bx	lr

10009a00 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009a00:	6802      	ldr	r2, [r0, #0]
10009a02:	2001      	movs	r0, #1
10009a04:	7d13      	ldrb	r3, [r2, #20]
10009a06:	4203      	tst	r3, r0
10009a08:	d0fc      	beq.n	10009a04 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009a0a:	7c13      	ldrb	r3, [r2, #16]
10009a0c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009a0e:	2000      	movs	r0, #0
10009a10:	4770      	bx	lr
10009a12:	46c0      	nop			; (mov r8, r8)

10009a14 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009a14:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009a16:	2a00      	cmp	r2, #0
10009a18:	d00d      	beq.n	10009a36 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009a1a:	330b      	adds	r3, #11
10009a1c:	5cc3      	ldrb	r3, [r0, r3]
10009a1e:	b2db      	uxtb	r3, r3
10009a20:	2b05      	cmp	r3, #5
10009a22:	d008      	beq.n	10009a36 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009a24:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009a26:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009a28:	2205      	movs	r2, #5
10009a2a:	2322      	movs	r3, #34	; 0x22
10009a2c:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009a2e:	6803      	ldr	r3, [r0, #0]
10009a30:	3a04      	subs	r2, #4
10009a32:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009a34:	2300      	movs	r3, #0
}
10009a36:	0018      	movs	r0, r3
10009a38:	4770      	bx	lr
10009a3a:	46c0      	nop			; (mov r8, r8)

10009a3c <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009a3c:	0093      	lsls	r3, r2, #2
10009a3e:	18c3      	adds	r3, r0, r3
10009a40:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009a42:	2120      	movs	r1, #32
10009a44:	2301      	movs	r3, #1
10009a46:	4093      	lsls	r3, r2
10009a48:	5c42      	ldrb	r2, [r0, r1]
10009a4a:	4313      	orrs	r3, r2
10009a4c:	5443      	strb	r3, [r0, r1]
}
10009a4e:	4770      	bx	lr

10009a50 <uart_unregister_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
10009a50:	008b      	lsls	r3, r1, #2
10009a52:	18c3      	adds	r3, r0, r3
10009a54:	2200      	movs	r2, #0
10009a56:	605a      	str	r2, [r3, #4]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
10009a58:	3201      	adds	r2, #1
10009a5a:	408a      	lsls	r2, r1
10009a5c:	2120      	movs	r1, #32
10009a5e:	5c43      	ldrb	r3, [r0, r1]
10009a60:	4393      	bics	r3, r2
10009a62:	5443      	strb	r3, [r0, r1]
}
10009a64:	4770      	bx	lr
10009a66:	46c0      	nop			; (mov r8, r8)

10009a68 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009a6a:	2221      	movs	r2, #33	; 0x21
10009a6c:	2301      	movs	r3, #1
10009a6e:	408b      	lsls	r3, r1
10009a70:	5c84      	ldrb	r4, [r0, r2]
10009a72:	4323      	orrs	r3, r4
10009a74:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009a76:	2901      	cmp	r1, #1
10009a78:	d104      	bne.n	10009a84 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a7a:	6802      	ldr	r2, [r0, #0]
10009a7c:	7a11      	ldrb	r1, [r2, #8]
10009a7e:	2320      	movs	r3, #32
10009a80:	430b      	orrs	r3, r1
10009a82:	7213      	strb	r3, [r2, #8]
	}
}
10009a84:	bd10      	pop	{r4, pc}
10009a86:	46c0      	nop			; (mov r8, r8)

10009a88 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a88:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009a8a:	2201      	movs	r2, #1
10009a8c:	408a      	lsls	r2, r1
10009a8e:	2421      	movs	r4, #33	; 0x21
10009a90:	5d03      	ldrb	r3, [r0, r4]
10009a92:	4393      	bics	r3, r2
10009a94:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009a96:	2901      	cmp	r1, #1
10009a98:	d104      	bne.n	10009aa4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a9a:	6802      	ldr	r2, [r0, #0]
10009a9c:	7a13      	ldrb	r3, [r2, #8]
10009a9e:	311f      	adds	r1, #31
10009aa0:	438b      	bics	r3, r1
10009aa2:	7213      	strb	r3, [r2, #8]
	}

}
10009aa4:	bd10      	pop	{r4, pc}
10009aa6:	46c0      	nop			; (mov r8, r8)

10009aa8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009aaa:	4647      	mov	r7, r8
10009aac:	b480      	push	{r7}
10009aae:	000c      	movs	r4, r1
10009ab0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009ab2:	2800      	cmp	r0, #0
10009ab4:	d10d      	bne.n	10009ad2 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009ab6:	2a00      	cmp	r2, #0
10009ab8:	dd0e      	ble.n	10009ad8 <_read+0x30>
10009aba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009abc:	4e08      	ldr	r6, [pc, #32]	; (10009ae0 <_read+0x38>)
10009abe:	4d09      	ldr	r5, [pc, #36]	; (10009ae4 <_read+0x3c>)
10009ac0:	6830      	ldr	r0, [r6, #0]
10009ac2:	0021      	movs	r1, r4
10009ac4:	682b      	ldr	r3, [r5, #0]
10009ac6:	4798      	blx	r3
		ptr++;
10009ac8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009aca:	42a7      	cmp	r7, r4
10009acc:	d1f8      	bne.n	10009ac0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009ace:	4640      	mov	r0, r8
10009ad0:	e003      	b.n	10009ada <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009ad2:	2001      	movs	r0, #1
10009ad4:	4240      	negs	r0, r0
10009ad6:	e000      	b.n	10009ada <_read+0x32>
	}

	for (; len > 0; --len) {
10009ad8:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009ada:	bc04      	pop	{r2}
10009adc:	4690      	mov	r8, r2
10009ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ae0:	10013280 	.word	0x10013280
10009ae4:	10013278 	.word	0x10013278

10009ae8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009aea:	4647      	mov	r7, r8
10009aec:	b480      	push	{r7}
10009aee:	000e      	movs	r6, r1
10009af0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009af2:	3801      	subs	r0, #1
10009af4:	2802      	cmp	r0, #2
10009af6:	d811      	bhi.n	10009b1c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009af8:	2a00      	cmp	r2, #0
10009afa:	d012      	beq.n	10009b22 <_write+0x3a>
10009afc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009afe:	4b0c      	ldr	r3, [pc, #48]	; (10009b30 <_write+0x48>)
10009b00:	4698      	mov	r8, r3
10009b02:	4f0c      	ldr	r7, [pc, #48]	; (10009b34 <_write+0x4c>)
10009b04:	4643      	mov	r3, r8
10009b06:	6818      	ldr	r0, [r3, #0]
10009b08:	5d31      	ldrb	r1, [r6, r4]
10009b0a:	683b      	ldr	r3, [r7, #0]
10009b0c:	4798      	blx	r3
10009b0e:	2800      	cmp	r0, #0
10009b10:	db09      	blt.n	10009b26 <_write+0x3e>
			return -1;
		}
		++nChars;
10009b12:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009b14:	42a5      	cmp	r5, r4
10009b16:	d1f5      	bne.n	10009b04 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009b18:	0020      	movs	r0, r4
10009b1a:	e006      	b.n	10009b2a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009b1c:	2001      	movs	r0, #1
10009b1e:	4240      	negs	r0, r0
10009b20:	e003      	b.n	10009b2a <_write+0x42>
	}

	for (; len != 0; --len) {
10009b22:	2000      	movs	r0, #0
10009b24:	e001      	b.n	10009b2a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009b26:	2001      	movs	r0, #1
10009b28:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009b2a:	bc04      	pop	{r2}
10009b2c:	4690      	mov	r8, r2
10009b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b30:	10013280 	.word	0x10013280
10009b34:	1001327c 	.word	0x1001327c

10009b38 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009b38:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009b3a:	4a06      	ldr	r2, [pc, #24]	; (10009b54 <_sbrk+0x1c>)
10009b3c:	6812      	ldr	r2, [r2, #0]
10009b3e:	2a00      	cmp	r2, #0
10009b40:	d102      	bne.n	10009b48 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009b42:	4905      	ldr	r1, [pc, #20]	; (10009b58 <_sbrk+0x20>)
10009b44:	4a03      	ldr	r2, [pc, #12]	; (10009b54 <_sbrk+0x1c>)
10009b46:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009b48:	4a02      	ldr	r2, [pc, #8]	; (10009b54 <_sbrk+0x1c>)
10009b4a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009b4c:	18c3      	adds	r3, r0, r3
10009b4e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009b50:	4770      	bx	lr
10009b52:	46c0      	nop			; (mov r8, r8)
10009b54:	10012f48 	.word	0x10012f48
10009b58:	10014eb0 	.word	0x10014eb0

10009b5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009b5c:	2001      	movs	r0, #1
10009b5e:	4240      	negs	r0, r0
10009b60:	4770      	bx	lr
10009b62:	46c0      	nop			; (mov r8, r8)

10009b64 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009b64:	2380      	movs	r3, #128	; 0x80
10009b66:	019b      	lsls	r3, r3, #6
10009b68:	604b      	str	r3, [r1, #4]

	return 0;
}
10009b6a:	2000      	movs	r0, #0
10009b6c:	4770      	bx	lr
10009b6e:	46c0      	nop			; (mov r8, r8)

10009b70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009b70:	2001      	movs	r0, #1
10009b72:	4770      	bx	lr

10009b74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009b74:	2000      	movs	r0, #0
10009b76:	4770      	bx	lr

10009b78 <pxp_monitor_connect_request>:
* @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_connect_request(at_ble_scan_info_t *scan_buffer,
uint8_t index)
{
10009b78:	b510      	push	{r4, lr}
	memcpy((uint8_t *)&pxp_reporter_address,
10009b7a:	4c13      	ldr	r4, [pc, #76]	; (10009bc8 <pxp_monitor_connect_request+0x50>)
10009b7c:	008b      	lsls	r3, r1, #2
10009b7e:	185b      	adds	r3, r3, r1
10009b80:	00db      	lsls	r3, r3, #3
10009b82:	1859      	adds	r1, r3, r1
10009b84:	1841      	adds	r1, r0, r1
10009b86:	3101      	adds	r1, #1
10009b88:	2207      	movs	r2, #7
10009b8a:	0020      	movs	r0, r4
10009b8c:	4b0f      	ldr	r3, [pc, #60]	; (10009bcc <pxp_monitor_connect_request+0x54>)
10009b8e:	4798      	blx	r3
	(uint8_t *)&scan_buffer[index].dev_addr,
	sizeof(at_ble_addr_t));

	if (gap_dev_connect(&pxp_reporter_address) == AT_BLE_SUCCESS) {
10009b90:	0020      	movs	r0, r4
10009b92:	4b0f      	ldr	r3, [pc, #60]	; (10009bd0 <pxp_monitor_connect_request+0x58>)
10009b94:	4798      	blx	r3
10009b96:	1e04      	subs	r4, r0, #0
10009b98:	d10d      	bne.n	10009bb6 <pxp_monitor_connect_request+0x3e>
		DBG_LOG("PXP Connect request sent");
10009b9a:	480e      	ldr	r0, [pc, #56]	; (10009bd4 <pxp_monitor_connect_request+0x5c>)
10009b9c:	4b0e      	ldr	r3, [pc, #56]	; (10009bd8 <pxp_monitor_connect_request+0x60>)
10009b9e:	4798      	blx	r3
10009ba0:	480e      	ldr	r0, [pc, #56]	; (10009bdc <pxp_monitor_connect_request+0x64>)
10009ba2:	4b0f      	ldr	r3, [pc, #60]	; (10009be0 <pxp_monitor_connect_request+0x68>)
10009ba4:	4798      	blx	r3
		pxp_connect_request_flag = PXP_DEV_CONNECTING;
10009ba6:	2201      	movs	r2, #1
10009ba8:	4b0e      	ldr	r3, [pc, #56]	; (10009be4 <pxp_monitor_connect_request+0x6c>)
10009baa:	701a      	strb	r2, [r3, #0]
		hw_timer_start_func_cb(PXP_CONNECT_REQ_INTERVAL);
10009bac:	4b0e      	ldr	r3, [pc, #56]	; (10009be8 <pxp_monitor_connect_request+0x70>)
10009bae:	681b      	ldr	r3, [r3, #0]
10009bb0:	2014      	movs	r0, #20
10009bb2:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10009bb4:	e006      	b.n	10009bc4 <pxp_monitor_connect_request+0x4c>
	}
    else {
		DBG_LOG("PXP Connect request send failed");
10009bb6:	4807      	ldr	r0, [pc, #28]	; (10009bd4 <pxp_monitor_connect_request+0x5c>)
10009bb8:	4b07      	ldr	r3, [pc, #28]	; (10009bd8 <pxp_monitor_connect_request+0x60>)
10009bba:	4798      	blx	r3
10009bbc:	480b      	ldr	r0, [pc, #44]	; (10009bec <pxp_monitor_connect_request+0x74>)
10009bbe:	4b08      	ldr	r3, [pc, #32]	; (10009be0 <pxp_monitor_connect_request+0x68>)
10009bc0:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
10009bc2:	24e2      	movs	r4, #226	; 0xe2
}
10009bc4:	0020      	movs	r0, r4
10009bc6:	bd10      	pop	{r4, pc}
10009bc8:	100132a0 	.word	0x100132a0
10009bcc:	1001025f 	.word	0x1001025f
10009bd0:	1000ad99 	.word	0x1000ad99
10009bd4:	10011744 	.word	0x10011744
10009bd8:	100103a1 	.word	0x100103a1
10009bdc:	10011a48 	.word	0x10011a48
10009be0:	10010281 	.word	0x10010281
10009be4:	10012f50 	.word	0x10012f50
10009be8:	10012f54 	.word	0x10012f54
10009bec:	10011a64 	.word	0x10011a64

10009bf0 <register_hw_timer_start_func_cb>:
*
* @return none.
*/
void register_hw_timer_start_func_cb(hw_timer_start_func_cb_t timer_start_fn)
{
	hw_timer_start_func_cb = timer_start_fn;
10009bf0:	4b01      	ldr	r3, [pc, #4]	; (10009bf8 <register_hw_timer_start_func_cb+0x8>)
10009bf2:	6018      	str	r0, [r3, #0]
}
10009bf4:	4770      	bx	lr
10009bf6:	46c0      	nop			; (mov r8, r8)
10009bf8:	10012f54 	.word	0x10012f54

10009bfc <register_hw_timer_stop_func_cb>:
*
* @return none.
*/
void register_hw_timer_stop_func_cb(hw_timer_stop_func_cb_t timer_stop_fn)
{
	hw_timer_stop_func_cb = timer_stop_fn;
10009bfc:	4b01      	ldr	r3, [pc, #4]	; (10009c04 <register_hw_timer_stop_func_cb+0x8>)
10009bfe:	6018      	str	r0, [r3, #0]
}
10009c00:	4770      	bx	lr
10009c02:	46c0      	nop			; (mov r8, r8)
10009c04:	10012f4c 	.word	0x10012f4c

10009c08 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
10009c08:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
10009c0a:	4804      	ldr	r0, [pc, #16]	; (10009c1c <ble_undefined_event_handler+0x14>)
10009c0c:	4b04      	ldr	r3, [pc, #16]	; (10009c20 <ble_undefined_event_handler+0x18>)
10009c0e:	4798      	blx	r3
10009c10:	4804      	ldr	r0, [pc, #16]	; (10009c24 <ble_undefined_event_handler+0x1c>)
10009c12:	4b05      	ldr	r3, [pc, #20]	; (10009c28 <ble_undefined_event_handler+0x20>)
10009c14:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009c16:	2000      	movs	r0, #0
10009c18:	bd10      	pop	{r4, pc}
10009c1a:	46c0      	nop			; (mov r8, r8)
10009c1c:	10011744 	.word	0x10011744
10009c20:	100103a1 	.word	0x100103a1
10009c24:	10011dcc 	.word	0x10011dcc
10009c28:	10010281 	.word	0x10010281

10009c2c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009c2c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009c2e:	7800      	ldrb	r0, [r0, #0]
10009c30:	2800      	cmp	r0, #0
10009c32:	d006      	beq.n	10009c42 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009c34:	4803      	ldr	r0, [pc, #12]	; (10009c44 <ble_scan_report_handler+0x18>)
10009c36:	4b04      	ldr	r3, [pc, #16]	; (10009c48 <ble_scan_report_handler+0x1c>)
10009c38:	4798      	blx	r3
10009c3a:	4804      	ldr	r0, [pc, #16]	; (10009c4c <ble_scan_report_handler+0x20>)
10009c3c:	4b04      	ldr	r3, [pc, #16]	; (10009c50 <ble_scan_report_handler+0x24>)
10009c3e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009c40:	20e2      	movs	r0, #226	; 0xe2
}
10009c42:	bd10      	pop	{r4, pc}
10009c44:	10011744 	.word	0x10011744
10009c48:	100103a1 	.word	0x100103a1
10009c4c:	10011de8 	.word	0x10011de8
10009c50:	10010281 	.word	0x10010281

10009c54 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
10009c54:	b510      	push	{r4, lr}
10009c56:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
10009c58:	4804      	ldr	r0, [pc, #16]	; (10009c6c <ble_mtu_changed_indication_handler+0x18>)
10009c5a:	4b05      	ldr	r3, [pc, #20]	; (10009c70 <ble_mtu_changed_indication_handler+0x1c>)
10009c5c:	4798      	blx	r3
10009c5e:	8862      	ldrh	r2, [r4, #2]
10009c60:	8821      	ldrh	r1, [r4, #0]
10009c62:	4804      	ldr	r0, [pc, #16]	; (10009c74 <ble_mtu_changed_indication_handler+0x20>)
10009c64:	4b04      	ldr	r3, [pc, #16]	; (10009c78 <ble_mtu_changed_indication_handler+0x24>)
10009c66:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009c68:	2000      	movs	r0, #0
10009c6a:	bd10      	pop	{r4, pc}
10009c6c:	10011744 	.word	0x10011744
10009c70:	100103a1 	.word	0x100103a1
10009c74:	10011dfc 	.word	0x10011dfc
10009c78:	10010281 	.word	0x10010281

10009c7c <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009c7c:	b570      	push	{r4, r5, r6, lr}
10009c7e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009c80:	78c5      	ldrb	r5, [r0, #3]
10009c82:	2d00      	cmp	r5, #0
10009c84:	d108      	bne.n	10009c98 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
10009c86:	480a      	ldr	r0, [pc, #40]	; (10009cb0 <ble_mtu_changed_cmd_complete_handler+0x34>)
10009c88:	4b0a      	ldr	r3, [pc, #40]	; (10009cb4 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009c8a:	4798      	blx	r3
10009c8c:	78a2      	ldrb	r2, [r4, #2]
10009c8e:	8821      	ldrh	r1, [r4, #0]
10009c90:	4809      	ldr	r0, [pc, #36]	; (10009cb8 <ble_mtu_changed_cmd_complete_handler+0x3c>)
10009c92:	4b0a      	ldr	r3, [pc, #40]	; (10009cbc <ble_mtu_changed_cmd_complete_handler+0x40>)
10009c94:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009c96:	e008      	b.n	10009caa <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009c98:	4805      	ldr	r0, [pc, #20]	; (10009cb0 <ble_mtu_changed_cmd_complete_handler+0x34>)
10009c9a:	4b06      	ldr	r3, [pc, #24]	; (10009cb4 <ble_mtu_changed_cmd_complete_handler+0x38>)
10009c9c:	4798      	blx	r3
10009c9e:	78a2      	ldrb	r2, [r4, #2]
10009ca0:	8821      	ldrh	r1, [r4, #0]
10009ca2:	4807      	ldr	r0, [pc, #28]	; (10009cc0 <ble_mtu_changed_cmd_complete_handler+0x44>)
10009ca4:	4b05      	ldr	r3, [pc, #20]	; (10009cbc <ble_mtu_changed_cmd_complete_handler+0x40>)
10009ca6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009ca8:	25e2      	movs	r5, #226	; 0xe2
}
10009caa:	0028      	movs	r0, r5
10009cac:	bd70      	pop	{r4, r5, r6, pc}
10009cae:	46c0      	nop			; (mov r8, r8)
10009cb0:	10011744 	.word	0x10011744
10009cb4:	100103a1 	.word	0x100103a1
10009cb8:	10011e34 	.word	0x10011e34
10009cbc:	10010281 	.word	0x10010281
10009cc0:	10011e64 	.word	0x10011e64

10009cc4 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
10009cc4:	b570      	push	{r4, r5, r6, lr}
10009cc6:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009cc8:	78c5      	ldrb	r5, [r0, #3]
10009cca:	2d00      	cmp	r5, #0
10009ccc:	d108      	bne.n	10009ce0 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
10009cce:	480a      	ldr	r0, [pc, #40]	; (10009cf8 <ble_characteristic_write_cmd_complete_handler+0x34>)
10009cd0:	4b0a      	ldr	r3, [pc, #40]	; (10009cfc <ble_characteristic_write_cmd_complete_handler+0x38>)
10009cd2:	4798      	blx	r3
10009cd4:	78a2      	ldrb	r2, [r4, #2]
10009cd6:	8821      	ldrh	r1, [r4, #0]
10009cd8:	4809      	ldr	r0, [pc, #36]	; (10009d00 <ble_characteristic_write_cmd_complete_handler+0x3c>)
10009cda:	4b0a      	ldr	r3, [pc, #40]	; (10009d04 <ble_characteristic_write_cmd_complete_handler+0x40>)
10009cdc:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009cde:	e008      	b.n	10009cf2 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
10009ce0:	4805      	ldr	r0, [pc, #20]	; (10009cf8 <ble_characteristic_write_cmd_complete_handler+0x34>)
10009ce2:	4b06      	ldr	r3, [pc, #24]	; (10009cfc <ble_characteristic_write_cmd_complete_handler+0x38>)
10009ce4:	4798      	blx	r3
10009ce6:	78a2      	ldrb	r2, [r4, #2]
10009ce8:	8821      	ldrh	r1, [r4, #0]
10009cea:	4807      	ldr	r0, [pc, #28]	; (10009d08 <ble_characteristic_write_cmd_complete_handler+0x44>)
10009cec:	4b05      	ldr	r3, [pc, #20]	; (10009d04 <ble_characteristic_write_cmd_complete_handler+0x40>)
10009cee:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009cf0:	25e2      	movs	r5, #226	; 0xe2
}
10009cf2:	0028      	movs	r0, r5
10009cf4:	bd70      	pop	{r4, r5, r6, pc}
10009cf6:	46c0      	nop			; (mov r8, r8)
10009cf8:	10011744 	.word	0x10011744
10009cfc:	100103a1 	.word	0x100103a1
10009d00:	10011e9c 	.word	0x10011e9c
10009d04:	10010281 	.word	0x10010281
10009d08:	10011ed8 	.word	0x10011ed8

10009d0c <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009d0e:	0006      	movs	r6, r0
10009d10:	4c1d      	ldr	r4, [pc, #116]	; (10009d88 <ble_disconnected_state_handler+0x7c>)
10009d12:	239b      	movs	r3, #155	; 0x9b
10009d14:	009b      	lsls	r3, r3, #2
10009d16:	18e7      	adds	r7, r4, r3
10009d18:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009d1a:	0023      	movs	r3, r4
10009d1c:	3b56      	subs	r3, #86	; 0x56
10009d1e:	881a      	ldrh	r2, [r3, #0]
10009d20:	8833      	ldrh	r3, [r6, #0]
10009d22:	429a      	cmp	r2, r3
10009d24:	d122      	bne.n	10009d6c <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009d26:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009d28:	2b05      	cmp	r3, #5
10009d2a:	d001      	beq.n	10009d30 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009d2c:	2b08      	cmp	r3, #8
10009d2e:	d102      	bne.n	10009d36 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009d30:	2301      	movs	r3, #1
10009d32:	702b      	strb	r3, [r5, #0]
10009d34:	e01a      	b.n	10009d6c <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009d36:	2b07      	cmp	r3, #7
10009d38:	d80f      	bhi.n	10009d5a <ble_disconnected_state_handler+0x4e>
10009d3a:	009b      	lsls	r3, r3, #2
10009d3c:	4a13      	ldr	r2, [pc, #76]	; (10009d8c <ble_disconnected_state_handler+0x80>)
10009d3e:	58d3      	ldr	r3, [r2, r3]
10009d40:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009d42:	2300      	movs	r3, #0
10009d44:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
10009d46:	4b12      	ldr	r3, [pc, #72]	; (10009d90 <ble_disconnected_state_handler+0x84>)
10009d48:	781b      	ldrb	r3, [r3, #0]
10009d4a:	2b00      	cmp	r3, #0
10009d4c:	d00e      	beq.n	10009d6c <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
10009d4e:	4a10      	ldr	r2, [pc, #64]	; (10009d90 <ble_disconnected_state_handler+0x84>)
10009d50:	7813      	ldrb	r3, [r2, #0]
10009d52:	3b01      	subs	r3, #1
10009d54:	b2db      	uxtb	r3, r3
10009d56:	7013      	strb	r3, [r2, #0]
10009d58:	e008      	b.n	10009d6c <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
10009d5a:	480e      	ldr	r0, [pc, #56]	; (10009d94 <ble_disconnected_state_handler+0x88>)
10009d5c:	4b0e      	ldr	r3, [pc, #56]	; (10009d98 <ble_disconnected_state_handler+0x8c>)
10009d5e:	4798      	blx	r3
10009d60:	7829      	ldrb	r1, [r5, #0]
10009d62:	480e      	ldr	r0, [pc, #56]	; (10009d9c <ble_disconnected_state_handler+0x90>)
10009d64:	4b0e      	ldr	r3, [pc, #56]	; (10009da0 <ble_disconnected_state_handler+0x94>)
10009d66:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009d68:	2300      	movs	r3, #0
10009d6a:	702b      	strb	r3, [r5, #0]
10009d6c:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d6e:	42bc      	cmp	r4, r7
10009d70:	d1d2      	bne.n	10009d18 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009d72:	4808      	ldr	r0, [pc, #32]	; (10009d94 <ble_disconnected_state_handler+0x88>)
10009d74:	4b08      	ldr	r3, [pc, #32]	; (10009d98 <ble_disconnected_state_handler+0x8c>)
10009d76:	4798      	blx	r3
10009d78:	8832      	ldrh	r2, [r6, #0]
10009d7a:	78b1      	ldrb	r1, [r6, #2]
10009d7c:	4809      	ldr	r0, [pc, #36]	; (10009da4 <ble_disconnected_state_handler+0x98>)
10009d7e:	4b08      	ldr	r3, [pc, #32]	; (10009da0 <ble_disconnected_state_handler+0x94>)
10009d80:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009d82:	2000      	movs	r0, #0
10009d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d86:	46c0      	nop			; (mov r8, r8)
10009d88:	10013322 	.word	0x10013322
10009d8c:	10011c5c 	.word	0x10011c5c
10009d90:	10013530 	.word	0x10013530
10009d94:	10011744 	.word	0x10011744
10009d98:	100103a1 	.word	0x100103a1
10009d9c:	10011f14 	.word	0x10011f14
10009da0:	10010281 	.word	0x10010281
10009da4:	10011f2c 	.word	0x10011f2c

10009da8 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
10009da8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
10009daa:	4804      	ldr	r0, [pc, #16]	; (10009dbc <ble_conn_param_update+0x14>)
10009dac:	4b04      	ldr	r3, [pc, #16]	; (10009dc0 <ble_conn_param_update+0x18>)
10009dae:	4798      	blx	r3
10009db0:	4804      	ldr	r0, [pc, #16]	; (10009dc4 <ble_conn_param_update+0x1c>)
10009db2:	4b05      	ldr	r3, [pc, #20]	; (10009dc8 <ble_conn_param_update+0x20>)
10009db4:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009db6:	2000      	movs	r0, #0
10009db8:	bd10      	pop	{r4, pc}
10009dba:	46c0      	nop			; (mov r8, r8)
10009dbc:	10011744 	.word	0x10011744
10009dc0:	100103a1 	.word	0x100103a1
10009dc4:	10011f5c 	.word	0x10011f5c
10009dc8:	10010281 	.word	0x10010281

10009dcc <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009dce:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009dd0:	8801      	ldrh	r1, [r0, #0]
10009dd2:	4b28      	ldr	r3, [pc, #160]	; (10009e74 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009dd4:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009dd6:	891a      	ldrh	r2, [r3, #8]
10009dd8:	428a      	cmp	r2, r1
10009dda:	d104      	bne.n	10009de6 <ble_encryption_status_change_handler+0x1a>
10009ddc:	001a      	movs	r2, r3
10009dde:	325e      	adds	r2, #94	; 0x5e
10009de0:	7812      	ldrb	r2, [r2, #0]
10009de2:	2a06      	cmp	r2, #6
10009de4:	d02e      	beq.n	10009e44 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009de6:	3401      	adds	r4, #1
10009de8:	b2e4      	uxtb	r4, r4
10009dea:	337c      	adds	r3, #124	; 0x7c
10009dec:	2c05      	cmp	r4, #5
10009dee:	d1f2      	bne.n	10009dd6 <ble_encryption_status_change_handler+0xa>
10009df0:	e039      	b.n	10009e66 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009df2:	4920      	ldr	r1, [pc, #128]	; (10009e74 <ble_encryption_status_change_handler+0xa8>)
10009df4:	0163      	lsls	r3, r4, #5
10009df6:	1b1a      	subs	r2, r3, r4
10009df8:	0092      	lsls	r2, r2, #2
10009dfa:	188a      	adds	r2, r1, r2
10009dfc:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009dfe:	0014      	movs	r4, r2
10009e00:	345e      	adds	r4, #94	; 0x5e
10009e02:	2307      	movs	r3, #7
10009e04:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009e06:	481c      	ldr	r0, [pc, #112]	; (10009e78 <ble_encryption_status_change_handler+0xac>)
10009e08:	4b1c      	ldr	r3, [pc, #112]	; (10009e7c <ble_encryption_status_change_handler+0xb0>)
10009e0a:	4798      	blx	r3
10009e0c:	481c      	ldr	r0, [pc, #112]	; (10009e80 <ble_encryption_status_change_handler+0xb4>)
10009e0e:	4b1d      	ldr	r3, [pc, #116]	; (10009e84 <ble_encryption_status_change_handler+0xb8>)
10009e10:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009e12:	25e2      	movs	r5, #226	; 0xe2
10009e14:	e02b      	b.n	10009e6e <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009e16:	4818      	ldr	r0, [pc, #96]	; (10009e78 <ble_encryption_status_change_handler+0xac>)
10009e18:	4b18      	ldr	r3, [pc, #96]	; (10009e7c <ble_encryption_status_change_handler+0xb0>)
10009e1a:	4798      	blx	r3
10009e1c:	481a      	ldr	r0, [pc, #104]	; (10009e88 <ble_encryption_status_change_handler+0xbc>)
10009e1e:	4b19      	ldr	r3, [pc, #100]	; (10009e84 <ble_encryption_status_change_handler+0xb8>)
10009e20:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009e22:	4914      	ldr	r1, [pc, #80]	; (10009e74 <ble_encryption_status_change_handler+0xa8>)
10009e24:	0163      	lsls	r3, r4, #5
10009e26:	1b1a      	subs	r2, r3, r4
10009e28:	0092      	lsls	r2, r2, #2
10009e2a:	188a      	adds	r2, r1, r2
10009e2c:	0010      	movs	r0, r2
10009e2e:	305e      	adds	r0, #94	; 0x5e
10009e30:	2708      	movs	r7, #8
10009e32:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009e34:	78f0      	ldrb	r0, [r6, #3]
10009e36:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009e38:	78b2      	ldrb	r2, [r6, #2]
10009e3a:	1b1c      	subs	r4, r3, r4
10009e3c:	00a4      	lsls	r4, r4, #2
10009e3e:	190c      	adds	r4, r1, r4
10009e40:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009e42:	e014      	b.n	10009e6e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009e44:	78b5      	ldrb	r5, [r6, #2]
10009e46:	2d00      	cmp	r5, #0
10009e48:	d0e5      	beq.n	10009e16 <ble_encryption_status_change_handler+0x4a>
10009e4a:	e7d2      	b.n	10009df2 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009e4c:	4e0a      	ldr	r6, [pc, #40]	; (10009e78 <ble_encryption_status_change_handler+0xac>)
10009e4e:	0030      	movs	r0, r6
10009e50:	4d0a      	ldr	r5, [pc, #40]	; (10009e7c <ble_encryption_status_change_handler+0xb0>)
10009e52:	47a8      	blx	r5
10009e54:	480c      	ldr	r0, [pc, #48]	; (10009e88 <ble_encryption_status_change_handler+0xbc>)
10009e56:	4c0b      	ldr	r4, [pc, #44]	; (10009e84 <ble_encryption_status_change_handler+0xb8>)
10009e58:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009e5a:	0030      	movs	r0, r6
10009e5c:	47a8      	blx	r5
10009e5e:	480b      	ldr	r0, [pc, #44]	; (10009e8c <ble_encryption_status_change_handler+0xc0>)
10009e60:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009e62:	25e2      	movs	r5, #226	; 0xe2
10009e64:	e003      	b.n	10009e6e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009e66:	78b5      	ldrb	r5, [r6, #2]
10009e68:	2d00      	cmp	r5, #0
10009e6a:	d1c2      	bne.n	10009df2 <ble_encryption_status_change_handler+0x26>
10009e6c:	e7ee      	b.n	10009e4c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009e6e:	0028      	movs	r0, r5
10009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009e72:	46c0      	nop			; (mov r8, r8)
10009e74:	100132c4 	.word	0x100132c4
10009e78:	10011744 	.word	0x10011744
10009e7c:	100103a1 	.word	0x100103a1
10009e80:	10011f78 	.word	0x10011f78
10009e84:	10010281 	.word	0x10010281
10009e88:	10011f8c 	.word	0x10011f8c
10009e8c:	10011fb0 	.word	0x10011fb0

10009e90 <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009e90:	b530      	push	{r4, r5, lr}
10009e92:	b085      	sub	sp, #20
10009e94:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009e96:	4b1f      	ldr	r3, [pc, #124]	; (10009f14 <ble_scan_info_handler+0x84>)
10009e98:	781b      	ldrb	r3, [r3, #0]
10009e9a:	b2db      	uxtb	r3, r3
10009e9c:	2b13      	cmp	r3, #19
10009e9e:	d824      	bhi.n	10009eea <ble_scan_info_handler+0x5a>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009ea0:	4d1c      	ldr	r5, [pc, #112]	; (10009f14 <ble_scan_info_handler+0x84>)
10009ea2:	782b      	ldrb	r3, [r5, #0]
10009ea4:	b2db      	uxtb	r3, r3
10009ea6:	0098      	lsls	r0, r3, #2
10009ea8:	18c0      	adds	r0, r0, r3
10009eaa:	00c0      	lsls	r0, r0, #3
10009eac:	18c3      	adds	r3, r0, r3
10009eae:	481a      	ldr	r0, [pc, #104]	; (10009f18 <ble_scan_info_handler+0x88>)
10009eb0:	1818      	adds	r0, r3, r0
10009eb2:	2229      	movs	r2, #41	; 0x29
10009eb4:	0021      	movs	r1, r4
10009eb6:	4b19      	ldr	r3, [pc, #100]	; (10009f1c <ble_scan_info_handler+0x8c>)
10009eb8:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009eba:	4819      	ldr	r0, [pc, #100]	; (10009f20 <ble_scan_info_handler+0x90>)
10009ebc:	4b19      	ldr	r3, [pc, #100]	; (10009f24 <ble_scan_info_handler+0x94>)
10009ebe:	4798      	blx	r3
10009ec0:	7829      	ldrb	r1, [r5, #0]
10009ec2:	b2c9      	uxtb	r1, r1
10009ec4:	79a3      	ldrb	r3, [r4, #6]
10009ec6:	79e2      	ldrb	r2, [r4, #7]
10009ec8:	78a0      	ldrb	r0, [r4, #2]
10009eca:	9003      	str	r0, [sp, #12]
10009ecc:	78e0      	ldrb	r0, [r4, #3]
10009ece:	9002      	str	r0, [sp, #8]
10009ed0:	7920      	ldrb	r0, [r4, #4]
10009ed2:	9001      	str	r0, [sp, #4]
10009ed4:	7960      	ldrb	r0, [r4, #5]
10009ed6:	9000      	str	r0, [sp, #0]
10009ed8:	4813      	ldr	r0, [pc, #76]	; (10009f28 <ble_scan_info_handler+0x98>)
10009eda:	4c14      	ldr	r4, [pc, #80]	; (10009f2c <ble_scan_info_handler+0x9c>)
10009edc:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009ede:	782b      	ldrb	r3, [r5, #0]
10009ee0:	3301      	adds	r3, #1
10009ee2:	b2db      	uxtb	r3, r3
10009ee4:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
10009ee6:	2300      	movs	r3, #0
10009ee8:	e011      	b.n	10009f0e <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009eea:	480d      	ldr	r0, [pc, #52]	; (10009f20 <ble_scan_info_handler+0x90>)
10009eec:	4b0d      	ldr	r3, [pc, #52]	; (10009f24 <ble_scan_info_handler+0x94>)
10009eee:	4798      	blx	r3
10009ef0:	480f      	ldr	r0, [pc, #60]	; (10009f30 <ble_scan_info_handler+0xa0>)
10009ef2:	4b0e      	ldr	r3, [pc, #56]	; (10009f2c <ble_scan_info_handler+0x9c>)
10009ef4:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009ef6:	4b0f      	ldr	r3, [pc, #60]	; (10009f34 <ble_scan_info_handler+0xa4>)
10009ef8:	4798      	blx	r3
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
10009efa:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009efc:	2800      	cmp	r0, #0
10009efe:	d006      	beq.n	10009f0e <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
10009f00:	4807      	ldr	r0, [pc, #28]	; (10009f20 <ble_scan_info_handler+0x90>)
10009f02:	4b08      	ldr	r3, [pc, #32]	; (10009f24 <ble_scan_info_handler+0x94>)
10009f04:	4798      	blx	r3
10009f06:	480c      	ldr	r0, [pc, #48]	; (10009f38 <ble_scan_info_handler+0xa8>)
10009f08:	4b08      	ldr	r3, [pc, #32]	; (10009f2c <ble_scan_info_handler+0x9c>)
10009f0a:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
10009f0c:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009f0e:	0018      	movs	r0, r3
10009f10:	b005      	add	sp, #20
10009f12:	bd30      	pop	{r4, r5, pc}
10009f14:	10012f60 	.word	0x10012f60
10009f18:	10013598 	.word	0x10013598
10009f1c:	1001025f 	.word	0x1001025f
10009f20:	10011744 	.word	0x10011744
10009f24:	100103a1 	.word	0x100103a1
10009f28:	10011fd8 	.word	0x10011fd8
10009f2c:	10010281 	.word	0x10010281
10009f30:	10012014 	.word	0x10012014
10009f34:	1000d211 	.word	0x1000d211
10009f38:	1001204c 	.word	0x1001204c

10009f3c <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
10009f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f3e:	4647      	mov	r7, r8
10009f40:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
10009f42:	7803      	ldrb	r3, [r0, #0]
10009f44:	2b00      	cmp	r3, #0
10009f46:	d14d      	bne.n	10009fe4 <ble_resolv_rand_addr_handler+0xa8>
10009f48:	4d33      	ldr	r5, [pc, #204]	; (1000a018 <ble_resolv_rand_addr_handler+0xdc>)
10009f4a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
10009f4c:	1c46      	adds	r6, r0, #1
10009f4e:	4f33      	ldr	r7, [pc, #204]	; (1000a01c <ble_resolv_rand_addr_handler+0xe0>)
10009f50:	2210      	movs	r2, #16
10009f52:	0029      	movs	r1, r5
10009f54:	0030      	movs	r0, r6
10009f56:	47b8      	blx	r7
10009f58:	2800      	cmp	r0, #0
10009f5a:	d02c      	beq.n	10009fb6 <ble_resolv_rand_addr_handler+0x7a>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f5c:	3401      	adds	r4, #1
10009f5e:	b2e4      	uxtb	r4, r4
10009f60:	357c      	adds	r5, #124	; 0x7c
10009f62:	2c05      	cmp	r4, #5
10009f64:	d1f4      	bne.n	10009f50 <ble_resolv_rand_addr_handler+0x14>
10009f66:	e03d      	b.n	10009fe4 <ble_resolv_rand_addr_handler+0xa8>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009f68:	001d      	movs	r5, r3
10009f6a:	7811      	ldrb	r1, [r2, #0]
10009f6c:	2900      	cmp	r1, #0
10009f6e:	d11b      	bne.n	10009fa8 <ble_resolv_rand_addr_handler+0x6c>
10009f70:	e001      	b.n	10009f76 <ble_resolv_rand_addr_handler+0x3a>
10009f72:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f74:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10009f76:	4b2a      	ldr	r3, [pc, #168]	; (1000a020 <ble_resolv_rand_addr_handler+0xe4>)
10009f78:	4698      	mov	r8, r3
10009f7a:	016e      	lsls	r6, r5, #5
10009f7c:	1b77      	subs	r7, r6, r5
10009f7e:	00bf      	lsls	r7, r7, #2
10009f80:	4447      	add	r7, r8
10009f82:	2212      	movs	r2, #18
10009f84:	4927      	ldr	r1, [pc, #156]	; (1000a024 <ble_resolv_rand_addr_handler+0xe8>)
10009f86:	0038      	movs	r0, r7
10009f88:	4b27      	ldr	r3, [pc, #156]	; (1000a028 <ble_resolv_rand_addr_handler+0xec>)
10009f8a:	4798      	blx	r3
				ble_device_count++;
10009f8c:	4a27      	ldr	r2, [pc, #156]	; (1000a02c <ble_resolv_rand_addr_handler+0xf0>)
10009f8e:	7813      	ldrb	r3, [r2, #0]
10009f90:	3301      	adds	r3, #1
10009f92:	b2db      	uxtb	r3, r3
10009f94:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009f96:	375e      	adds	r7, #94	; 0x5e
10009f98:	2302      	movs	r3, #2
10009f9a:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009f9c:	1b75      	subs	r5, r6, r5
10009f9e:	00ad      	lsls	r5, r5, #2
10009fa0:	4445      	add	r5, r8
10009fa2:	3308      	adds	r3, #8
10009fa4:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
10009fa6:	e02c      	b.n	1000a002 <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fa8:	3401      	adds	r4, #1
10009faa:	b2e4      	uxtb	r4, r4
10009fac:	3301      	adds	r3, #1
10009fae:	327c      	adds	r2, #124	; 0x7c
10009fb0:	2c05      	cmp	r4, #5
10009fb2:	d1d9      	bne.n	10009f68 <ble_resolv_rand_addr_handler+0x2c>
10009fb4:	e025      	b.n	1000a002 <ble_resolv_rand_addr_handler+0xc6>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
10009fb6:	481e      	ldr	r0, [pc, #120]	; (1000a030 <ble_resolv_rand_addr_handler+0xf4>)
10009fb8:	4b1e      	ldr	r3, [pc, #120]	; (1000a034 <ble_resolv_rand_addr_handler+0xf8>)
10009fba:	4798      	blx	r3
10009fbc:	481e      	ldr	r0, [pc, #120]	; (1000a038 <ble_resolv_rand_addr_handler+0xfc>)
10009fbe:	4b1f      	ldr	r3, [pc, #124]	; (1000a03c <ble_resolv_rand_addr_handler+0x100>)
10009fc0:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009fc2:	4817      	ldr	r0, [pc, #92]	; (1000a020 <ble_resolv_rand_addr_handler+0xe4>)
10009fc4:	0163      	lsls	r3, r4, #5
10009fc6:	1b1a      	subs	r2, r3, r4
10009fc8:	0092      	lsls	r2, r2, #2
10009fca:	1882      	adds	r2, r0, r2
10009fcc:	0011      	movs	r1, r2
10009fce:	315e      	adds	r1, #94	; 0x5e
10009fd0:	2502      	movs	r5, #2
10009fd2:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10009fd4:	210a      	movs	r1, #10
10009fd6:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10009fd8:	0010      	movs	r0, r2
10009fda:	2212      	movs	r2, #18
10009fdc:	4911      	ldr	r1, [pc, #68]	; (1000a024 <ble_resolv_rand_addr_handler+0xe8>)
10009fde:	4b12      	ldr	r3, [pc, #72]	; (1000a028 <ble_resolv_rand_addr_handler+0xec>)
10009fe0:	4798      	blx	r3
10009fe2:	e00e      	b.n	1000a002 <ble_resolv_rand_addr_handler+0xc6>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
10009fe4:	4812      	ldr	r0, [pc, #72]	; (1000a030 <ble_resolv_rand_addr_handler+0xf4>)
10009fe6:	4b13      	ldr	r3, [pc, #76]	; (1000a034 <ble_resolv_rand_addr_handler+0xf8>)
10009fe8:	4798      	blx	r3
10009fea:	4815      	ldr	r0, [pc, #84]	; (1000a040 <ble_resolv_rand_addr_handler+0x104>)
10009fec:	4b13      	ldr	r3, [pc, #76]	; (1000a03c <ble_resolv_rand_addr_handler+0x100>)
10009fee:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009ff0:	235e      	movs	r3, #94	; 0x5e
10009ff2:	4a0b      	ldr	r2, [pc, #44]	; (1000a020 <ble_resolv_rand_addr_handler+0xe4>)
10009ff4:	5cd3      	ldrb	r3, [r2, r3]
10009ff6:	2b00      	cmp	r3, #0
10009ff8:	d0bb      	beq.n	10009f72 <ble_resolv_rand_addr_handler+0x36>
10009ffa:	4a12      	ldr	r2, [pc, #72]	; (1000a044 <ble_resolv_rand_addr_handler+0x108>)
10009ffc:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ffe:	2401      	movs	r4, #1
1000a000:	e7b2      	b.n	10009f68 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000a002:	480b      	ldr	r0, [pc, #44]	; (1000a030 <ble_resolv_rand_addr_handler+0xf4>)
1000a004:	4b0b      	ldr	r3, [pc, #44]	; (1000a034 <ble_resolv_rand_addr_handler+0xf8>)
1000a006:	4798      	blx	r3
1000a008:	0021      	movs	r1, r4
1000a00a:	480f      	ldr	r0, [pc, #60]	; (1000a048 <ble_resolv_rand_addr_handler+0x10c>)
1000a00c:	4b0b      	ldr	r3, [pc, #44]	; (1000a03c <ble_resolv_rand_addr_handler+0x100>)
1000a00e:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a010:	2000      	movs	r0, #0
1000a012:	bc04      	pop	{r2}
1000a014:	4690      	mov	r8, r2
1000a016:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a018:	1001330a 	.word	0x1001330a
1000a01c:	10010241 	.word	0x10010241
1000a020:	100132c4 	.word	0x100132c4
1000a024:	10013570 	.word	0x10013570
1000a028:	1001025f 	.word	0x1001025f
1000a02c:	10013530 	.word	0x10013530
1000a030:	10011744 	.word	0x10011744
1000a034:	100103a1 	.word	0x100103a1
1000a038:	10012074 	.word	0x10012074
1000a03c:	10010281 	.word	0x10010281
1000a040:	1001208c 	.word	0x1001208c
1000a044:	1001339e 	.word	0x1001339e
1000a048:	10012064 	.word	0x10012064

1000a04c <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a04e:	465f      	mov	r7, fp
1000a050:	464e      	mov	r6, r9
1000a052:	4645      	mov	r5, r8
1000a054:	b4e0      	push	{r5, r6, r7}
1000a056:	b09a      	sub	sp, #104	; 0x68
1000a058:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a05a:	7a86      	ldrb	r6, [r0, #10]
1000a05c:	2e00      	cmp	r6, #0
1000a05e:	d000      	beq.n	1000a062 <ble_connected_state_handler+0x16>
1000a060:	e0bc      	b.n	1000a1dc <ble_connected_state_handler+0x190>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a062:	4870      	ldr	r0, [pc, #448]	; (1000a224 <ble_connected_state_handler+0x1d8>)
1000a064:	4f70      	ldr	r7, [pc, #448]	; (1000a228 <ble_connected_state_handler+0x1dc>)
1000a066:	47b8      	blx	r7
1000a068:	792b      	ldrb	r3, [r5, #4]
1000a06a:	796a      	ldrb	r2, [r5, #5]
1000a06c:	79a9      	ldrb	r1, [r5, #6]
1000a06e:	7868      	ldrb	r0, [r5, #1]
1000a070:	9002      	str	r0, [sp, #8]
1000a072:	78a8      	ldrb	r0, [r5, #2]
1000a074:	9001      	str	r0, [sp, #4]
1000a076:	78e8      	ldrb	r0, [r5, #3]
1000a078:	9000      	str	r0, [sp, #0]
1000a07a:	486c      	ldr	r0, [pc, #432]	; (1000a22c <ble_connected_state_handler+0x1e0>)
1000a07c:	4c6c      	ldr	r4, [pc, #432]	; (1000a230 <ble_connected_state_handler+0x1e4>)
1000a07e:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a080:	4868      	ldr	r0, [pc, #416]	; (1000a224 <ble_connected_state_handler+0x1d8>)
1000a082:	47b8      	blx	r7
1000a084:	8929      	ldrh	r1, [r5, #8]
1000a086:	486b      	ldr	r0, [pc, #428]	; (1000a234 <ble_connected_state_handler+0x1e8>)
1000a088:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a08a:	2212      	movs	r2, #18
1000a08c:	0029      	movs	r1, r5
1000a08e:	486a      	ldr	r0, [pc, #424]	; (1000a238 <ble_connected_state_handler+0x1ec>)
1000a090:	4b6a      	ldr	r3, [pc, #424]	; (1000a23c <ble_connected_state_handler+0x1f0>)
1000a092:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a094:	9504      	str	r5, [sp, #16]
1000a096:	2207      	movs	r2, #7
1000a098:	0029      	movs	r1, r5
1000a09a:	4869      	ldr	r0, [pc, #420]	; (1000a240 <ble_connected_state_handler+0x1f4>)
1000a09c:	4b69      	ldr	r3, [pc, #420]	; (1000a244 <ble_connected_state_handler+0x1f8>)
1000a09e:	4798      	blx	r3
1000a0a0:	2800      	cmp	r0, #0
1000a0a2:	d100      	bne.n	1000a0a6 <ble_connected_state_handler+0x5a>
1000a0a4:	e0a3      	b.n	1000a1ee <ble_connected_state_handler+0x1a2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a0a6:	782b      	ldrb	r3, [r5, #0]
1000a0a8:	2b02      	cmp	r3, #2
1000a0aa:	d000      	beq.n	1000a0ae <ble_connected_state_handler+0x62>
1000a0ac:	e09f      	b.n	1000a1ee <ble_connected_state_handler+0x1a2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a0ae:	2250      	movs	r2, #80	; 0x50
1000a0b0:	2100      	movs	r1, #0
1000a0b2:	a806      	add	r0, sp, #24
1000a0b4:	4b64      	ldr	r3, [pc, #400]	; (1000a248 <ble_connected_state_handler+0x1fc>)
1000a0b6:	4798      	blx	r3
1000a0b8:	4f64      	ldr	r7, [pc, #400]	; (1000a24c <ble_connected_state_handler+0x200>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a0ba:	2300      	movs	r3, #0
1000a0bc:	e00b      	b.n	1000a0d6 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a0be:	1c59      	adds	r1, r3, #1
1000a0c0:	7814      	ldrb	r4, [r2, #0]
1000a0c2:	a806      	add	r0, sp, #24
1000a0c4:	54c4      	strb	r4, [r0, r3]
1000a0c6:	3201      	adds	r2, #1
1000a0c8:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a0ca:	42b3      	cmp	r3, r6
1000a0cc:	d1f7      	bne.n	1000a0be <ble_connected_state_handler+0x72>
1000a0ce:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a0d0:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a0d2:	2b50      	cmp	r3, #80	; 0x50
1000a0d4:	d004      	beq.n	1000a0e0 <ble_connected_state_handler+0x94>
1000a0d6:	001e      	movs	r6, r3
1000a0d8:	3610      	adds	r6, #16
1000a0da:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a0dc:	003a      	movs	r2, r7
1000a0de:	e7ee      	b.n	1000a0be <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a0e0:	aa06      	add	r2, sp, #24
1000a0e2:	0029      	movs	r1, r5
1000a0e4:	2005      	movs	r0, #5
1000a0e6:	4b5a      	ldr	r3, [pc, #360]	; (1000a250 <ble_connected_state_handler+0x204>)
1000a0e8:	4798      	blx	r3
1000a0ea:	1e06      	subs	r6, r0, #0
1000a0ec:	d106      	bne.n	1000a0fc <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000a0ee:	484d      	ldr	r0, [pc, #308]	; (1000a224 <ble_connected_state_handler+0x1d8>)
1000a0f0:	4b4d      	ldr	r3, [pc, #308]	; (1000a228 <ble_connected_state_handler+0x1dc>)
1000a0f2:	4798      	blx	r3
1000a0f4:	4857      	ldr	r0, [pc, #348]	; (1000a254 <ble_connected_state_handler+0x208>)
1000a0f6:	4b4e      	ldr	r3, [pc, #312]	; (1000a230 <ble_connected_state_handler+0x1e4>)
1000a0f8:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000a0fa:	e08c      	b.n	1000a216 <ble_connected_state_handler+0x1ca>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a0fc:	4849      	ldr	r0, [pc, #292]	; (1000a224 <ble_connected_state_handler+0x1d8>)
1000a0fe:	4b4a      	ldr	r3, [pc, #296]	; (1000a228 <ble_connected_state_handler+0x1dc>)
1000a100:	4798      	blx	r3
1000a102:	4855      	ldr	r0, [pc, #340]	; (1000a258 <ble_connected_state_handler+0x20c>)
1000a104:	4b4a      	ldr	r3, [pc, #296]	; (1000a230 <ble_connected_state_handler+0x1e4>)
1000a106:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a108:	26e2      	movs	r6, #226	; 0xe2
1000a10a:	e084      	b.n	1000a216 <ble_connected_state_handler+0x1ca>
1000a10c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a10e:	9405      	str	r4, [sp, #20]
1000a110:	2207      	movs	r2, #7
1000a112:	9904      	ldr	r1, [sp, #16]
1000a114:	4648      	mov	r0, r9
1000a116:	47d8      	blx	fp
1000a118:	2800      	cmp	r0, #0
1000a11a:	d109      	bne.n	1000a130 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a11c:	9a05      	ldr	r2, [sp, #20]
1000a11e:	0153      	lsls	r3, r2, #5
1000a120:	1a9b      	subs	r3, r3, r2
1000a122:	009a      	lsls	r2, r3, #2
1000a124:	4b4d      	ldr	r3, [pc, #308]	; (1000a25c <ble_connected_state_handler+0x210>)
1000a126:	189b      	adds	r3, r3, r2
1000a128:	335e      	adds	r3, #94	; 0x5e
1000a12a:	2202      	movs	r2, #2
1000a12c:	701a      	strb	r2, [r3, #0]
1000a12e:	e02b      	b.n	1000a188 <ble_connected_state_handler+0x13c>
1000a130:	3401      	adds	r4, #1
1000a132:	237c      	movs	r3, #124	; 0x7c
1000a134:	469c      	mov	ip, r3
1000a136:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a138:	2c05      	cmp	r4, #5
1000a13a:	d1e7      	bne.n	1000a10c <ble_connected_state_handler+0xc0>
1000a13c:	e062      	b.n	1000a204 <ble_connected_state_handler+0x1b8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a13e:	001c      	movs	r4, r3
1000a140:	7811      	ldrb	r1, [r2, #0]
1000a142:	2900      	cmp	r1, #0
1000a144:	d11a      	bne.n	1000a17c <ble_connected_state_handler+0x130>
1000a146:	e001      	b.n	1000a14c <ble_connected_state_handler+0x100>
1000a148:	2400      	movs	r4, #0
1000a14a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a14c:	0163      	lsls	r3, r4, #5
1000a14e:	4699      	mov	r9, r3
1000a150:	1b18      	subs	r0, r3, r4
1000a152:	0080      	lsls	r0, r0, #2
1000a154:	4b41      	ldr	r3, [pc, #260]	; (1000a25c <ble_connected_state_handler+0x210>)
1000a156:	4698      	mov	r8, r3
1000a158:	4440      	add	r0, r8
1000a15a:	2212      	movs	r2, #18
1000a15c:	0029      	movs	r1, r5
1000a15e:	4b37      	ldr	r3, [pc, #220]	; (1000a23c <ble_connected_state_handler+0x1f0>)
1000a160:	4798      	blx	r3
						ble_device_count++;
1000a162:	4a3f      	ldr	r2, [pc, #252]	; (1000a260 <ble_connected_state_handler+0x214>)
1000a164:	7813      	ldrb	r3, [r2, #0]
1000a166:	3301      	adds	r3, #1
1000a168:	b2db      	uxtb	r3, r3
1000a16a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a16c:	464b      	mov	r3, r9
1000a16e:	1b1b      	subs	r3, r3, r4
1000a170:	009b      	lsls	r3, r3, #2
1000a172:	4443      	add	r3, r8
1000a174:	335e      	adds	r3, #94	; 0x5e
1000a176:	2202      	movs	r2, #2
1000a178:	701a      	strb	r2, [r3, #0]
						break;
1000a17a:	e005      	b.n	1000a188 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a17c:	1c79      	adds	r1, r7, #1
1000a17e:	b2cf      	uxtb	r7, r1
1000a180:	3301      	adds	r3, #1
1000a182:	327c      	adds	r2, #124	; 0x7c
1000a184:	2f05      	cmp	r7, #5
1000a186:	d1da      	bne.n	1000a13e <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a188:	2207      	movs	r2, #7
1000a18a:	0029      	movs	r1, r5
1000a18c:	482c      	ldr	r0, [pc, #176]	; (1000a240 <ble_connected_state_handler+0x1f4>)
1000a18e:	4b2d      	ldr	r3, [pc, #180]	; (1000a244 <ble_connected_state_handler+0x1f8>)
1000a190:	4798      	blx	r3
1000a192:	2800      	cmp	r0, #0
1000a194:	d107      	bne.n	1000a1a6 <ble_connected_state_handler+0x15a>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a196:	017b      	lsls	r3, r7, #5
1000a198:	1bdb      	subs	r3, r3, r7
1000a19a:	009b      	lsls	r3, r3, #2
1000a19c:	4a2f      	ldr	r2, [pc, #188]	; (1000a25c <ble_connected_state_handler+0x210>)
1000a19e:	18d3      	adds	r3, r2, r3
1000a1a0:	2205      	movs	r2, #5
1000a1a2:	749a      	strb	r2, [r3, #18]
1000a1a4:	e006      	b.n	1000a1b4 <ble_connected_state_handler+0x168>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a1a6:	017b      	lsls	r3, r7, #5
1000a1a8:	1bdb      	subs	r3, r3, r7
1000a1aa:	009b      	lsls	r3, r3, #2
1000a1ac:	4a2b      	ldr	r2, [pc, #172]	; (1000a25c <ble_connected_state_handler+0x210>)
1000a1ae:	18d3      	adds	r3, r2, r3
1000a1b0:	220a      	movs	r2, #10
1000a1b2:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a1b4:	2207      	movs	r2, #7
1000a1b6:	2100      	movs	r1, #0
1000a1b8:	4821      	ldr	r0, [pc, #132]	; (1000a240 <ble_connected_state_handler+0x1f4>)
1000a1ba:	4b23      	ldr	r3, [pc, #140]	; (1000a248 <ble_connected_state_handler+0x1fc>)
1000a1bc:	4798      	blx	r3
1000a1be:	e02a      	b.n	1000a216 <ble_connected_state_handler+0x1ca>
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a1c0:	4818      	ldr	r0, [pc, #96]	; (1000a224 <ble_connected_state_handler+0x1d8>)
1000a1c2:	4b19      	ldr	r3, [pc, #100]	; (1000a228 <ble_connected_state_handler+0x1dc>)
1000a1c4:	4798      	blx	r3
1000a1c6:	4b26      	ldr	r3, [pc, #152]	; (1000a260 <ble_connected_state_handler+0x214>)
1000a1c8:	7819      	ldrb	r1, [r3, #0]
1000a1ca:	b2c9      	uxtb	r1, r1
1000a1cc:	4825      	ldr	r0, [pc, #148]	; (1000a264 <ble_connected_state_handler+0x218>)
1000a1ce:	4b18      	ldr	r3, [pc, #96]	; (1000a230 <ble_connected_state_handler+0x1e4>)
1000a1d0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a1d2:	8928      	ldrh	r0, [r5, #8]
1000a1d4:	2113      	movs	r1, #19
1000a1d6:	4b24      	ldr	r3, [pc, #144]	; (1000a268 <ble_connected_state_handler+0x21c>)
1000a1d8:	4798      	blx	r3
1000a1da:	e01c      	b.n	1000a216 <ble_connected_state_handler+0x1ca>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a1dc:	4811      	ldr	r0, [pc, #68]	; (1000a224 <ble_connected_state_handler+0x1d8>)
1000a1de:	4b12      	ldr	r3, [pc, #72]	; (1000a228 <ble_connected_state_handler+0x1dc>)
1000a1e0:	4798      	blx	r3
1000a1e2:	7aa9      	ldrb	r1, [r5, #10]
1000a1e4:	4821      	ldr	r0, [pc, #132]	; (1000a26c <ble_connected_state_handler+0x220>)
1000a1e6:	4b12      	ldr	r3, [pc, #72]	; (1000a230 <ble_connected_state_handler+0x1e4>)
1000a1e8:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a1ea:	2600      	movs	r6, #0
1000a1ec:	e013      	b.n	1000a216 <ble_connected_state_handler+0x1ca>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a1ee:	4b1c      	ldr	r3, [pc, #112]	; (1000a260 <ble_connected_state_handler+0x214>)
1000a1f0:	781b      	ldrb	r3, [r3, #0]
1000a1f2:	b2db      	uxtb	r3, r3
1000a1f4:	2b04      	cmp	r3, #4
1000a1f6:	d8e3      	bhi.n	1000a1c0 <ble_connected_state_handler+0x174>
1000a1f8:	4b18      	ldr	r3, [pc, #96]	; (1000a25c <ble_connected_state_handler+0x210>)
1000a1fa:	4699      	mov	r9, r3
1000a1fc:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a1fe:	4b11      	ldr	r3, [pc, #68]	; (1000a244 <ble_connected_state_handler+0x1f8>)
1000a200:	469b      	mov	fp, r3
1000a202:	e783      	b.n	1000a10c <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a204:	235e      	movs	r3, #94	; 0x5e
1000a206:	4a15      	ldr	r2, [pc, #84]	; (1000a25c <ble_connected_state_handler+0x210>)
1000a208:	5cd3      	ldrb	r3, [r2, r3]
1000a20a:	2b00      	cmp	r3, #0
1000a20c:	d09c      	beq.n	1000a148 <ble_connected_state_handler+0xfc>
1000a20e:	4a18      	ldr	r2, [pc, #96]	; (1000a270 <ble_connected_state_handler+0x224>)
1000a210:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a212:	2701      	movs	r7, #1
1000a214:	e793      	b.n	1000a13e <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a216:	0030      	movs	r0, r6
1000a218:	b01a      	add	sp, #104	; 0x68
1000a21a:	bc1c      	pop	{r2, r3, r4}
1000a21c:	4690      	mov	r8, r2
1000a21e:	4699      	mov	r9, r3
1000a220:	46a3      	mov	fp, r4
1000a222:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a224:	10011744 	.word	0x10011744
1000a228:	100103a1 	.word	0x100103a1
1000a22c:	100120a8 	.word	0x100120a8
1000a230:	10010281 	.word	0x10010281
1000a234:	100120ec 	.word	0x100120ec
1000a238:	10013570 	.word	0x10013570
1000a23c:	1001025f 	.word	0x1001025f
1000a240:	10012f64 	.word	0x10012f64
1000a244:	10010241 	.word	0x10010241
1000a248:	10010271 	.word	0x10010271
1000a24c:	1001330a 	.word	0x1001330a
1000a250:	1000d335 	.word	0x1000d335
1000a254:	10012104 	.word	0x10012104
1000a258:	10012128 	.word	0x10012128
1000a25c:	100132c4 	.word	0x100132c4
1000a260:	10013530 	.word	0x10013530
1000a264:	1001214c 	.word	0x1001214c
1000a268:	1000d309 	.word	0x1000d309
1000a26c:	10012188 	.word	0x10012188
1000a270:	1001339e 	.word	0x1001339e

1000a274 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a274:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a276:	465f      	mov	r7, fp
1000a278:	4656      	mov	r6, sl
1000a27a:	464d      	mov	r5, r9
1000a27c:	4644      	mov	r4, r8
1000a27e:	b4f0      	push	{r4, r5, r6, r7}
1000a280:	b083      	sub	sp, #12
1000a282:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a284:	8841      	ldrh	r1, [r0, #2]
1000a286:	4b59      	ldr	r3, [pc, #356]	; (1000a3ec <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a288:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a28a:	891a      	ldrh	r2, [r3, #8]
1000a28c:	428a      	cmp	r2, r1
1000a28e:	d105      	bne.n	1000a29c <ble_pair_done_handler+0x28>
1000a290:	001a      	movs	r2, r3
1000a292:	325e      	adds	r2, #94	; 0x5e
1000a294:	7812      	ldrb	r2, [r2, #0]
1000a296:	2a03      	cmp	r2, #3
1000a298:	d100      	bne.n	1000a29c <ble_pair_done_handler+0x28>
1000a29a:	e09a      	b.n	1000a3d2 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a29c:	3401      	adds	r4, #1
1000a29e:	b2e4      	uxtb	r4, r4
1000a2a0:	337c      	adds	r3, #124	; 0x7c
1000a2a2:	2c05      	cmp	r4, #5
1000a2a4:	d1f1      	bne.n	1000a28a <ble_pair_done_handler+0x16>
1000a2a6:	e057      	b.n	1000a358 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a2a8:	7821      	ldrb	r1, [r4, #0]
1000a2aa:	0030      	movs	r0, r6
1000a2ac:	47b8      	blx	r7
1000a2ae:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000a2b0:	454c      	cmp	r4, r9
1000a2b2:	d1f9      	bne.n	1000a2a8 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000a2b4:	484e      	ldr	r0, [pc, #312]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a2b6:	4b4f      	ldr	r3, [pc, #316]	; (1000a3f4 <ble_pair_done_handler+0x180>)
1000a2b8:	4798      	blx	r3
1000a2ba:	484f      	ldr	r0, [pc, #316]	; (1000a3f8 <ble_pair_done_handler+0x184>)
1000a2bc:	4b4f      	ldr	r3, [pc, #316]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a2be:	4798      	blx	r3
1000a2c0:	002e      	movs	r6, r5
1000a2c2:	3622      	adds	r6, #34	; 0x22
1000a2c4:	002c      	movs	r4, r5
1000a2c6:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000a2c8:	4f4c      	ldr	r7, [pc, #304]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a2ca:	7831      	ldrb	r1, [r6, #0]
1000a2cc:	484c      	ldr	r0, [pc, #304]	; (1000a400 <ble_pair_done_handler+0x18c>)
1000a2ce:	47b8      	blx	r7
1000a2d0:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000a2d2:	42a6      	cmp	r6, r4
1000a2d4:	d1f9      	bne.n	1000a2ca <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000a2d6:	4846      	ldr	r0, [pc, #280]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a2d8:	4b46      	ldr	r3, [pc, #280]	; (1000a3f4 <ble_pair_done_handler+0x180>)
1000a2da:	4798      	blx	r3
1000a2dc:	4849      	ldr	r0, [pc, #292]	; (1000a404 <ble_pair_done_handler+0x190>)
1000a2de:	4b47      	ldr	r3, [pc, #284]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a2e0:	4798      	blx	r3
1000a2e2:	3542      	adds	r5, #66	; 0x42
1000a2e4:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000a2e6:	4e46      	ldr	r6, [pc, #280]	; (1000a400 <ble_pair_done_handler+0x18c>)
1000a2e8:	4d44      	ldr	r5, [pc, #272]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a2ea:	7821      	ldrb	r1, [r4, #0]
1000a2ec:	0030      	movs	r0, r6
1000a2ee:	47a8      	blx	r5
1000a2f0:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000a2f2:	42bc      	cmp	r4, r7
1000a2f4:	d1f9      	bne.n	1000a2ea <ble_pair_done_handler+0x76>
1000a2f6:	e071      	b.n	1000a3dc <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a2f8:	0163      	lsls	r3, r4, #5
1000a2fa:	1b1c      	subs	r4, r3, r4
1000a2fc:	00a4      	lsls	r4, r4, #2
1000a2fe:	4b3b      	ldr	r3, [pc, #236]	; (1000a3ec <ble_pair_done_handler+0x178>)
1000a300:	191c      	adds	r4, r3, r4
1000a302:	345e      	adds	r4, #94	; 0x5e
1000a304:	7823      	ldrb	r3, [r4, #0]
1000a306:	2b01      	cmp	r3, #1
1000a308:	d915      	bls.n	1000a336 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000a30a:	4839      	ldr	r0, [pc, #228]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a30c:	4b39      	ldr	r3, [pc, #228]	; (1000a3f4 <ble_pair_done_handler+0x180>)
1000a30e:	4798      	blx	r3
1000a310:	483d      	ldr	r0, [pc, #244]	; (1000a408 <ble_pair_done_handler+0x194>)
1000a312:	4b3a      	ldr	r3, [pc, #232]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a314:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a316:	8868      	ldrh	r0, [r5, #2]
1000a318:	2113      	movs	r1, #19
1000a31a:	4b3c      	ldr	r3, [pc, #240]	; (1000a40c <ble_pair_done_handler+0x198>)
1000a31c:	4798      	blx	r3
1000a31e:	9001      	str	r0, [sp, #4]
1000a320:	2800      	cmp	r0, #0
1000a322:	d05b      	beq.n	1000a3dc <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000a324:	4832      	ldr	r0, [pc, #200]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a326:	4b33      	ldr	r3, [pc, #204]	; (1000a3f4 <ble_pair_done_handler+0x180>)
1000a328:	4798      	blx	r3
1000a32a:	4839      	ldr	r0, [pc, #228]	; (1000a410 <ble_pair_done_handler+0x19c>)
1000a32c:	4b33      	ldr	r3, [pc, #204]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a32e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a330:	23e2      	movs	r3, #226	; 0xe2
1000a332:	9301      	str	r3, [sp, #4]
1000a334:	e052      	b.n	1000a3dc <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a336:	2300      	movs	r3, #0
1000a338:	9301      	str	r3, [sp, #4]
1000a33a:	e04f      	b.n	1000a3dc <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a33c:	4e2c      	ldr	r6, [pc, #176]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a33e:	0030      	movs	r0, r6
1000a340:	4d2c      	ldr	r5, [pc, #176]	; (1000a3f4 <ble_pair_done_handler+0x180>)
1000a342:	47a8      	blx	r5
1000a344:	4833      	ldr	r0, [pc, #204]	; (1000a414 <ble_pair_done_handler+0x1a0>)
1000a346:	4c2d      	ldr	r4, [pc, #180]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a348:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a34a:	0030      	movs	r0, r6
1000a34c:	47a8      	blx	r5
1000a34e:	4832      	ldr	r0, [pc, #200]	; (1000a418 <ble_pair_done_handler+0x1a4>)
1000a350:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a352:	23e2      	movs	r3, #226	; 0xe2
1000a354:	9301      	str	r3, [sp, #4]
1000a356:	e041      	b.n	1000a3dc <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a358:	792b      	ldrb	r3, [r5, #4]
1000a35a:	2b00      	cmp	r3, #0
1000a35c:	d1cc      	bne.n	1000a2f8 <ble_pair_done_handler+0x84>
1000a35e:	e7ed      	b.n	1000a33c <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a360:	4823      	ldr	r0, [pc, #140]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a362:	4b24      	ldr	r3, [pc, #144]	; (1000a3f4 <ble_pair_done_handler+0x180>)
1000a364:	469b      	mov	fp, r3
1000a366:	4798      	blx	r3
1000a368:	482a      	ldr	r0, [pc, #168]	; (1000a414 <ble_pair_done_handler+0x1a0>)
1000a36a:	4b24      	ldr	r3, [pc, #144]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a36c:	469a      	mov	sl, r3
1000a36e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a370:	782a      	ldrb	r2, [r5, #0]
1000a372:	4b1e      	ldr	r3, [pc, #120]	; (1000a3ec <ble_pair_done_handler+0x178>)
1000a374:	4698      	mov	r8, r3
1000a376:	0167      	lsls	r7, r4, #5
1000a378:	1b3b      	subs	r3, r7, r4
1000a37a:	009b      	lsls	r3, r3, #2
1000a37c:	4443      	add	r3, r8
1000a37e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a380:	792a      	ldrb	r2, [r5, #4]
1000a382:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a384:	335e      	adds	r3, #94	; 0x5e
1000a386:	2205      	movs	r2, #5
1000a388:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a38a:	1b38      	subs	r0, r7, r4
1000a38c:	0080      	lsls	r0, r0, #2
1000a38e:	4440      	add	r0, r8
1000a390:	3036      	adds	r0, #54	; 0x36
1000a392:	320b      	adds	r2, #11
1000a394:	0029      	movs	r1, r5
1000a396:	3122      	adds	r1, #34	; 0x22
1000a398:	4b20      	ldr	r3, [pc, #128]	; (1000a41c <ble_pair_done_handler+0x1a8>)
1000a39a:	4699      	mov	r9, r3
1000a39c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a39e:	1b38      	subs	r0, r7, r4
1000a3a0:	0080      	lsls	r0, r0, #2
1000a3a2:	4440      	add	r0, r8
1000a3a4:	3046      	adds	r0, #70	; 0x46
1000a3a6:	2217      	movs	r2, #23
1000a3a8:	0029      	movs	r1, r5
1000a3aa:	3132      	adds	r1, #50	; 0x32
1000a3ac:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a3ae:	1b38      	subs	r0, r7, r4
1000a3b0:	0080      	lsls	r0, r0, #2
1000a3b2:	4440      	add	r0, r8
1000a3b4:	301a      	adds	r0, #26
1000a3b6:	1dac      	adds	r4, r5, #6
1000a3b8:	221c      	movs	r2, #28
1000a3ba:	0021      	movs	r1, r4
1000a3bc:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000a3be:	480c      	ldr	r0, [pc, #48]	; (1000a3f0 <ble_pair_done_handler+0x17c>)
1000a3c0:	47d8      	blx	fp
1000a3c2:	4817      	ldr	r0, [pc, #92]	; (1000a420 <ble_pair_done_handler+0x1ac>)
1000a3c4:	47d0      	blx	sl
1000a3c6:	2316      	movs	r3, #22
1000a3c8:	4699      	mov	r9, r3
1000a3ca:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a3cc:	4e0c      	ldr	r6, [pc, #48]	; (1000a400 <ble_pair_done_handler+0x18c>)
1000a3ce:	4f0b      	ldr	r7, [pc, #44]	; (1000a3fc <ble_pair_done_handler+0x188>)
1000a3d0:	e76a      	b.n	1000a2a8 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a3d2:	792b      	ldrb	r3, [r5, #4]
1000a3d4:	9301      	str	r3, [sp, #4]
1000a3d6:	2b00      	cmp	r3, #0
1000a3d8:	d0c2      	beq.n	1000a360 <ble_pair_done_handler+0xec>
1000a3da:	e78d      	b.n	1000a2f8 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a3dc:	9801      	ldr	r0, [sp, #4]
1000a3de:	b003      	add	sp, #12
1000a3e0:	bc3c      	pop	{r2, r3, r4, r5}
1000a3e2:	4690      	mov	r8, r2
1000a3e4:	4699      	mov	r9, r3
1000a3e6:	46a2      	mov	sl, r4
1000a3e8:	46ab      	mov	fp, r5
1000a3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3ec:	100132c4 	.word	0x100132c4
1000a3f0:	10011744 	.word	0x10011744
1000a3f4:	100103a1 	.word	0x100103a1
1000a3f8:	100121bc 	.word	0x100121bc
1000a3fc:	10010281 	.word	0x10010281
1000a400:	100121b0 	.word	0x100121b0
1000a404:	100121c4 	.word	0x100121c4
1000a408:	100121cc 	.word	0x100121cc
1000a40c:	1000d309 	.word	0x1000d309
1000a410:	100121ec 	.word	0x100121ec
1000a414:	10012208 	.word	0x10012208
1000a418:	10012234 	.word	0x10012234
1000a41c:	1001025f 	.word	0x1001025f
1000a420:	10012264 	.word	0x10012264

1000a424 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a424:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a426:	8800      	ldrh	r0, [r0, #0]
1000a428:	2378      	movs	r3, #120	; 0x78
1000a42a:	2201      	movs	r2, #1
1000a42c:	2101      	movs	r1, #1
1000a42e:	4c02      	ldr	r4, [pc, #8]	; (1000a438 <ble_conn_param_update_req+0x14>)
1000a430:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a432:	2000      	movs	r0, #0
1000a434:	bd10      	pop	{r4, pc}
1000a436:	46c0      	nop			; (mov r8, r8)
1000a438:	1000d329 	.word	0x1000d329

1000a43c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a43e:	4657      	mov	r7, sl
1000a440:	464e      	mov	r6, r9
1000a442:	4645      	mov	r5, r8
1000a444:	b4e0      	push	{r5, r6, r7}
1000a446:	b084      	sub	sp, #16
1000a448:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a44a:	2209      	movs	r2, #9
1000a44c:	2100      	movs	r1, #0
1000a44e:	a801      	add	r0, sp, #4
1000a450:	4b6a      	ldr	r3, [pc, #424]	; (1000a5fc <ble_slave_security_request_handler+0x1c0>)
1000a452:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a454:	8825      	ldrh	r5, [r4, #0]
1000a456:	496a      	ldr	r1, [pc, #424]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a458:	000a      	movs	r2, r1
1000a45a:	2300      	movs	r3, #0
1000a45c:	8910      	ldrh	r0, [r2, #8]
1000a45e:	42a8      	cmp	r0, r5
1000a460:	d116      	bne.n	1000a490 <ble_slave_security_request_handler+0x54>
1000a462:	0010      	movs	r0, r2
1000a464:	305e      	adds	r0, #94	; 0x5e
1000a466:	7800      	ldrb	r0, [r0, #0]
1000a468:	2802      	cmp	r0, #2
1000a46a:	d111      	bne.n	1000a490 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a46c:	4864      	ldr	r0, [pc, #400]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a46e:	015a      	lsls	r2, r3, #5
1000a470:	1ad6      	subs	r6, r2, r3
1000a472:	00b6      	lsls	r6, r6, #2
1000a474:	1986      	adds	r6, r0, r6
1000a476:	365e      	adds	r6, #94	; 0x5e
1000a478:	2206      	movs	r2, #6
1000a47a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a47c:	32f9      	adds	r2, #249	; 0xf9
1000a47e:	4013      	ands	r3, r2
1000a480:	015a      	lsls	r2, r3, #5
1000a482:	1ad2      	subs	r2, r2, r3
1000a484:	0092      	lsls	r2, r2, #2
1000a486:	1882      	adds	r2, r0, r2
1000a488:	7d12      	ldrb	r2, [r2, #20]
1000a48a:	07d0      	lsls	r0, r2, #31
1000a48c:	d405      	bmi.n	1000a49a <ble_slave_security_request_handler+0x5e>
1000a48e:	e01b      	b.n	1000a4c8 <ble_slave_security_request_handler+0x8c>
1000a490:	3301      	adds	r3, #1
1000a492:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a494:	2b05      	cmp	r3, #5
1000a496:	d1e1      	bne.n	1000a45c <ble_slave_security_request_handler+0x20>
1000a498:	e01e      	b.n	1000a4d8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a49a:	78e0      	ldrb	r0, [r4, #3]
1000a49c:	2800      	cmp	r0, #0
1000a49e:	d013      	beq.n	1000a4c8 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a4a0:	0159      	lsls	r1, r3, #5
1000a4a2:	1ac9      	subs	r1, r1, r3
1000a4a4:	008b      	lsls	r3, r1, #2
1000a4a6:	4956      	ldr	r1, [pc, #344]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a4a8:	18c9      	adds	r1, r1, r3
1000a4aa:	311a      	adds	r1, #26
1000a4ac:	8820      	ldrh	r0, [r4, #0]
1000a4ae:	4b55      	ldr	r3, [pc, #340]	; (1000a604 <ble_slave_security_request_handler+0x1c8>)
1000a4b0:	4798      	blx	r3
1000a4b2:	2800      	cmp	r0, #0
1000a4b4:	d100      	bne.n	1000a4b8 <ble_slave_security_request_handler+0x7c>
1000a4b6:	e09b      	b.n	1000a5f0 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a4b8:	4853      	ldr	r0, [pc, #332]	; (1000a608 <ble_slave_security_request_handler+0x1cc>)
1000a4ba:	4b54      	ldr	r3, [pc, #336]	; (1000a60c <ble_slave_security_request_handler+0x1d0>)
1000a4bc:	4798      	blx	r3
1000a4be:	4854      	ldr	r0, [pc, #336]	; (1000a610 <ble_slave_security_request_handler+0x1d4>)
1000a4c0:	4b54      	ldr	r3, [pc, #336]	; (1000a614 <ble_slave_security_request_handler+0x1d8>)
1000a4c2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a4c4:	20e2      	movs	r0, #226	; 0xe2
1000a4c6:	e093      	b.n	1000a5f0 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a4c8:	015a      	lsls	r2, r3, #5
1000a4ca:	1ad3      	subs	r3, r2, r3
1000a4cc:	009b      	lsls	r3, r3, #2
1000a4ce:	4a4c      	ldr	r2, [pc, #304]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a4d0:	18d3      	adds	r3, r2, r3
1000a4d2:	335e      	adds	r3, #94	; 0x5e
1000a4d4:	2202      	movs	r2, #2
1000a4d6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a4d8:	8825      	ldrh	r5, [r4, #0]
1000a4da:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a4dc:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a4de:	0016      	movs	r6, r2
1000a4e0:	8908      	ldrh	r0, [r1, #8]
1000a4e2:	42a8      	cmp	r0, r5
1000a4e4:	d10d      	bne.n	1000a502 <ble_slave_security_request_handler+0xc6>
1000a4e6:	0008      	movs	r0, r1
1000a4e8:	305e      	adds	r0, #94	; 0x5e
1000a4ea:	7800      	ldrb	r0, [r0, #0]
1000a4ec:	2802      	cmp	r0, #2
1000a4ee:	d108      	bne.n	1000a502 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a4f0:	0152      	lsls	r2, r2, #5
1000a4f2:	1b92      	subs	r2, r2, r6
1000a4f4:	0096      	lsls	r6, r2, #2
1000a4f6:	4a42      	ldr	r2, [pc, #264]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a4f8:	1992      	adds	r2, r2, r6
1000a4fa:	325e      	adds	r2, #94	; 0x5e
1000a4fc:	2103      	movs	r1, #3
1000a4fe:	7011      	strb	r1, [r2, #0]
			break;
1000a500:	e005      	b.n	1000a50e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a502:	3301      	adds	r3, #1
1000a504:	b2db      	uxtb	r3, r3
1000a506:	3201      	adds	r2, #1
1000a508:	317c      	adds	r1, #124	; 0x7c
1000a50a:	2b05      	cmp	r3, #5
1000a50c:	d1e7      	bne.n	1000a4de <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000a50e:	aa01      	add	r2, sp, #4
1000a510:	78e1      	ldrb	r1, [r4, #3]
1000a512:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a514:	2101      	movs	r1, #1
1000a516:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a518:	3103      	adds	r1, #3
1000a51a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a51c:	001f      	movs	r7, r3
1000a51e:	015a      	lsls	r2, r3, #5
1000a520:	1ad2      	subs	r2, r2, r3
1000a522:	0092      	lsls	r2, r2, #2
1000a524:	4936      	ldr	r1, [pc, #216]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a526:	5c52      	ldrb	r2, [r2, r1]
1000a528:	2a02      	cmp	r2, #2
1000a52a:	d104      	bne.n	1000a536 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a52c:	aa01      	add	r2, sp, #4
1000a52e:	2103      	movs	r1, #3
1000a530:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a532:	71d1      	strb	r1, [r2, #7]
1000a534:	e003      	b.n	1000a53e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a536:	aa01      	add	r2, sp, #4
1000a538:	2101      	movs	r1, #1
1000a53a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a53c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a53e:	aa01      	add	r2, sp, #4
1000a540:	2110      	movs	r1, #16
1000a542:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a544:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a546:	017a      	lsls	r2, r7, #5
1000a548:	1bd2      	subs	r2, r2, r7
1000a54a:	0092      	lsls	r2, r2, #2
1000a54c:	492c      	ldr	r1, [pc, #176]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a54e:	188a      	adds	r2, r1, r2
1000a550:	7e12      	ldrb	r2, [r2, #24]
1000a552:	2a40      	cmp	r2, #64	; 0x40
1000a554:	d134      	bne.n	1000a5c0 <ble_slave_security_request_handler+0x184>
1000a556:	015a      	lsls	r2, r3, #5
1000a558:	1ad3      	subs	r3, r2, r3
1000a55a:	009b      	lsls	r3, r3, #2
1000a55c:	469a      	mov	sl, r3
1000a55e:	001e      	movs	r6, r3
1000a560:	3660      	adds	r6, #96	; 0x60
1000a562:	1876      	adds	r6, r6, r1
1000a564:	4655      	mov	r5, sl
1000a566:	3568      	adds	r5, #104	; 0x68
1000a568:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a56a:	4b2b      	ldr	r3, [pc, #172]	; (1000a618 <ble_slave_security_request_handler+0x1dc>)
1000a56c:	4699      	mov	r9, r3
1000a56e:	230f      	movs	r3, #15
1000a570:	4698      	mov	r8, r3
1000a572:	47c8      	blx	r9
1000a574:	4643      	mov	r3, r8
1000a576:	4018      	ands	r0, r3
1000a578:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a57a:	47c8      	blx	r9
1000a57c:	4643      	mov	r3, r8
1000a57e:	4018      	ands	r0, r3
1000a580:	74b0      	strb	r0, [r6, #18]
1000a582:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a584:	42ae      	cmp	r6, r5
1000a586:	d1f4      	bne.n	1000a572 <ble_slave_security_request_handler+0x136>
1000a588:	4656      	mov	r6, sl
1000a58a:	3670      	adds	r6, #112	; 0x70
1000a58c:	4a1c      	ldr	r2, [pc, #112]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a58e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a590:	4b21      	ldr	r3, [pc, #132]	; (1000a618 <ble_slave_security_request_handler+0x1dc>)
1000a592:	4699      	mov	r9, r3
1000a594:	230f      	movs	r3, #15
1000a596:	4698      	mov	r8, r3
1000a598:	47c8      	blx	r9
1000a59a:	4643      	mov	r3, r8
1000a59c:	4018      	ands	r0, r3
1000a59e:	7028      	strb	r0, [r5, #0]
1000a5a0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a5a2:	42b5      	cmp	r5, r6
1000a5a4:	d1f8      	bne.n	1000a598 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a5a6:	4b1c      	ldr	r3, [pc, #112]	; (1000a618 <ble_slave_security_request_handler+0x1dc>)
1000a5a8:	4798      	blx	r3
1000a5aa:	017b      	lsls	r3, r7, #5
1000a5ac:	1bdb      	subs	r3, r3, r7
1000a5ae:	009b      	lsls	r3, r3, #2
1000a5b0:	4a13      	ldr	r2, [pc, #76]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a5b2:	18d3      	adds	r3, r2, r3
1000a5b4:	001a      	movs	r2, r3
1000a5b6:	3270      	adds	r2, #112	; 0x70
1000a5b8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a5ba:	337a      	adds	r3, #122	; 0x7a
1000a5bc:	2210      	movs	r2, #16
1000a5be:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a5c0:	017a      	lsls	r2, r7, #5
1000a5c2:	1bd7      	subs	r7, r2, r7
1000a5c4:	00bf      	lsls	r7, r7, #2
1000a5c6:	3760      	adds	r7, #96	; 0x60
1000a5c8:	4a0d      	ldr	r2, [pc, #52]	; (1000a600 <ble_slave_security_request_handler+0x1c4>)
1000a5ca:	18ba      	adds	r2, r7, r2
1000a5cc:	8820      	ldrh	r0, [r4, #0]
1000a5ce:	2300      	movs	r3, #0
1000a5d0:	a901      	add	r1, sp, #4
1000a5d2:	4c12      	ldr	r4, [pc, #72]	; (1000a61c <ble_slave_security_request_handler+0x1e0>)
1000a5d4:	47a0      	blx	r4
1000a5d6:	2800      	cmp	r0, #0
1000a5d8:	d00a      	beq.n	1000a5f0 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000a5da:	ab01      	add	r3, sp, #4
1000a5dc:	2200      	movs	r2, #0
1000a5de:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a5e0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a5e2:	4809      	ldr	r0, [pc, #36]	; (1000a608 <ble_slave_security_request_handler+0x1cc>)
1000a5e4:	4b09      	ldr	r3, [pc, #36]	; (1000a60c <ble_slave_security_request_handler+0x1d0>)
1000a5e6:	4798      	blx	r3
1000a5e8:	480d      	ldr	r0, [pc, #52]	; (1000a620 <ble_slave_security_request_handler+0x1e4>)
1000a5ea:	4b0a      	ldr	r3, [pc, #40]	; (1000a614 <ble_slave_security_request_handler+0x1d8>)
1000a5ec:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a5ee:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a5f0:	b004      	add	sp, #16
1000a5f2:	bc1c      	pop	{r2, r3, r4}
1000a5f4:	4690      	mov	r8, r2
1000a5f6:	4699      	mov	r9, r3
1000a5f8:	46a2      	mov	sl, r4
1000a5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5fc:	10010271 	.word	0x10010271
1000a600:	100132c4 	.word	0x100132c4
1000a604:	1000d841 	.word	0x1000d841
1000a608:	10011744 	.word	0x10011744
1000a60c:	100103a1 	.word	0x100103a1
1000a610:	1001226c 	.word	0x1001226c
1000a614:	10010281 	.word	0x10010281
1000a618:	100103b5 	.word	0x100103b5
1000a61c:	1000d695 	.word	0x1000d695
1000a620:	10012284 	.word	0x10012284

1000a624 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a624:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a626:	465f      	mov	r7, fp
1000a628:	4656      	mov	r6, sl
1000a62a:	464d      	mov	r5, r9
1000a62c:	4644      	mov	r4, r8
1000a62e:	b4f0      	push	{r4, r5, r6, r7}
1000a630:	b085      	sub	sp, #20
1000a632:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a634:	8804      	ldrh	r4, [r0, #0]
1000a636:	4a54      	ldr	r2, [pc, #336]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a638:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a63a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a63c:	8910      	ldrh	r0, [r2, #8]
1000a63e:	42a0      	cmp	r0, r4
1000a640:	d10d      	bne.n	1000a65e <ble_pair_request_handler+0x3a>
1000a642:	0010      	movs	r0, r2
1000a644:	305e      	adds	r0, #94	; 0x5e
1000a646:	7800      	ldrb	r0, [r0, #0]
1000a648:	2802      	cmp	r0, #2
1000a64a:	d108      	bne.n	1000a65e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a64c:	014a      	lsls	r2, r1, #5
1000a64e:	1a52      	subs	r2, r2, r1
1000a650:	0095      	lsls	r5, r2, #2
1000a652:	4a4d      	ldr	r2, [pc, #308]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a654:	1952      	adds	r2, r2, r5
1000a656:	325e      	adds	r2, #94	; 0x5e
1000a658:	2103      	movs	r1, #3
1000a65a:	7011      	strb	r1, [r2, #0]
			break;
1000a65c:	e005      	b.n	1000a66a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a65e:	3301      	adds	r3, #1
1000a660:	b2db      	uxtb	r3, r3
1000a662:	3101      	adds	r1, #1
1000a664:	327c      	adds	r2, #124	; 0x7c
1000a666:	2b05      	cmp	r3, #5
1000a668:	d1e8      	bne.n	1000a63c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a66a:	aa01      	add	r2, sp, #4
1000a66c:	2100      	movs	r1, #0
1000a66e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a670:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a672:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a674:	2003      	movs	r0, #3
1000a676:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a678:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a67a:	001e      	movs	r6, r3
1000a67c:	015a      	lsls	r2, r3, #5
1000a67e:	1ad2      	subs	r2, r2, r3
1000a680:	0092      	lsls	r2, r2, #2
1000a682:	4941      	ldr	r1, [pc, #260]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a684:	5c52      	ldrb	r2, [r2, r1]
1000a686:	2a02      	cmp	r2, #2
1000a688:	d104      	bne.n	1000a694 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a68a:	aa01      	add	r2, sp, #4
1000a68c:	2103      	movs	r1, #3
1000a68e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a690:	71d1      	strb	r1, [r2, #7]
1000a692:	e003      	b.n	1000a69c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a694:	aa01      	add	r2, sp, #4
1000a696:	2101      	movs	r1, #1
1000a698:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a69a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a69c:	aa01      	add	r2, sp, #4
1000a69e:	2110      	movs	r1, #16
1000a6a0:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a6a2:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a6a4:	0172      	lsls	r2, r6, #5
1000a6a6:	1b92      	subs	r2, r2, r6
1000a6a8:	0092      	lsls	r2, r2, #2
1000a6aa:	4937      	ldr	r1, [pc, #220]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a6ac:	188a      	adds	r2, r1, r2
1000a6ae:	7e12      	ldrb	r2, [r2, #24]
1000a6b0:	2a40      	cmp	r2, #64	; 0x40
1000a6b2:	d142      	bne.n	1000a73a <ble_pair_request_handler+0x116>
1000a6b4:	015f      	lsls	r7, r3, #5
1000a6b6:	1afb      	subs	r3, r7, r3
1000a6b8:	009b      	lsls	r3, r3, #2
1000a6ba:	469b      	mov	fp, r3
1000a6bc:	001c      	movs	r4, r3
1000a6be:	3460      	adds	r4, #96	; 0x60
1000a6c0:	1864      	adds	r4, r4, r1
1000a6c2:	465d      	mov	r5, fp
1000a6c4:	3568      	adds	r5, #104	; 0x68
1000a6c6:	186d      	adds	r5, r5, r1
1000a6c8:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a6ca:	4b30      	ldr	r3, [pc, #192]	; (1000a78c <ble_pair_request_handler+0x168>)
1000a6cc:	469a      	mov	sl, r3
1000a6ce:	230f      	movs	r3, #15
1000a6d0:	4699      	mov	r9, r3
1000a6d2:	47d0      	blx	sl
1000a6d4:	464b      	mov	r3, r9
1000a6d6:	4018      	ands	r0, r3
1000a6d8:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a6da:	47d0      	blx	sl
1000a6dc:	464b      	mov	r3, r9
1000a6de:	4018      	ands	r0, r3
1000a6e0:	74b8      	strb	r0, [r7, #18]
1000a6e2:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a6e4:	42af      	cmp	r7, r5
1000a6e6:	d1f4      	bne.n	1000a6d2 <ble_pair_request_handler+0xae>
1000a6e8:	465b      	mov	r3, fp
1000a6ea:	3370      	adds	r3, #112	; 0x70
1000a6ec:	4f26      	ldr	r7, [pc, #152]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a6ee:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a6f0:	4b26      	ldr	r3, [pc, #152]	; (1000a78c <ble_pair_request_handler+0x168>)
1000a6f2:	469a      	mov	sl, r3
1000a6f4:	230f      	movs	r3, #15
1000a6f6:	4699      	mov	r9, r3
1000a6f8:	47d0      	blx	sl
1000a6fa:	464b      	mov	r3, r9
1000a6fc:	4018      	ands	r0, r3
1000a6fe:	7028      	strb	r0, [r5, #0]
1000a700:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a702:	42bd      	cmp	r5, r7
1000a704:	d1f8      	bne.n	1000a6f8 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000a706:	4822      	ldr	r0, [pc, #136]	; (1000a790 <ble_pair_request_handler+0x16c>)
1000a708:	4b22      	ldr	r3, [pc, #136]	; (1000a794 <ble_pair_request_handler+0x170>)
1000a70a:	4798      	blx	r3
1000a70c:	4822      	ldr	r0, [pc, #136]	; (1000a798 <ble_pair_request_handler+0x174>)
1000a70e:	4b23      	ldr	r3, [pc, #140]	; (1000a79c <ble_pair_request_handler+0x178>)
1000a710:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000a712:	4d22      	ldr	r5, [pc, #136]	; (1000a79c <ble_pair_request_handler+0x178>)
1000a714:	7821      	ldrb	r1, [r4, #0]
1000a716:	4822      	ldr	r0, [pc, #136]	; (1000a7a0 <ble_pair_request_handler+0x17c>)
1000a718:	47a8      	blx	r5
1000a71a:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000a71c:	42bc      	cmp	r4, r7
1000a71e:	d1f9      	bne.n	1000a714 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a720:	4b1a      	ldr	r3, [pc, #104]	; (1000a78c <ble_pair_request_handler+0x168>)
1000a722:	4798      	blx	r3
1000a724:	0173      	lsls	r3, r6, #5
1000a726:	1b9b      	subs	r3, r3, r6
1000a728:	009b      	lsls	r3, r3, #2
1000a72a:	4a17      	ldr	r2, [pc, #92]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a72c:	18d3      	adds	r3, r2, r3
1000a72e:	001a      	movs	r2, r3
1000a730:	3270      	adds	r2, #112	; 0x70
1000a732:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a734:	337a      	adds	r3, #122	; 0x7a
1000a736:	2210      	movs	r2, #16
1000a738:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000a73a:	4815      	ldr	r0, [pc, #84]	; (1000a790 <ble_pair_request_handler+0x16c>)
1000a73c:	4b15      	ldr	r3, [pc, #84]	; (1000a794 <ble_pair_request_handler+0x170>)
1000a73e:	4798      	blx	r3
1000a740:	4818      	ldr	r0, [pc, #96]	; (1000a7a4 <ble_pair_request_handler+0x180>)
1000a742:	4b16      	ldr	r3, [pc, #88]	; (1000a79c <ble_pair_request_handler+0x178>)
1000a744:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a746:	0173      	lsls	r3, r6, #5
1000a748:	1b9b      	subs	r3, r3, r6
1000a74a:	009b      	lsls	r3, r3, #2
1000a74c:	3360      	adds	r3, #96	; 0x60
1000a74e:	4a0e      	ldr	r2, [pc, #56]	; (1000a788 <ble_pair_request_handler+0x164>)
1000a750:	189a      	adds	r2, r3, r2
1000a752:	4643      	mov	r3, r8
1000a754:	8818      	ldrh	r0, [r3, #0]
1000a756:	2300      	movs	r3, #0
1000a758:	a901      	add	r1, sp, #4
1000a75a:	4c13      	ldr	r4, [pc, #76]	; (1000a7a8 <ble_pair_request_handler+0x184>)
1000a75c:	47a0      	blx	r4
1000a75e:	2800      	cmp	r0, #0
1000a760:	d00a      	beq.n	1000a778 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000a762:	ab01      	add	r3, sp, #4
1000a764:	2200      	movs	r2, #0
1000a766:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a768:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a76a:	4809      	ldr	r0, [pc, #36]	; (1000a790 <ble_pair_request_handler+0x16c>)
1000a76c:	4b09      	ldr	r3, [pc, #36]	; (1000a794 <ble_pair_request_handler+0x170>)
1000a76e:	4798      	blx	r3
1000a770:	480e      	ldr	r0, [pc, #56]	; (1000a7ac <ble_pair_request_handler+0x188>)
1000a772:	4b0a      	ldr	r3, [pc, #40]	; (1000a79c <ble_pair_request_handler+0x178>)
1000a774:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a776:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a778:	b005      	add	sp, #20
1000a77a:	bc3c      	pop	{r2, r3, r4, r5}
1000a77c:	4690      	mov	r8, r2
1000a77e:	4699      	mov	r9, r3
1000a780:	46a2      	mov	sl, r4
1000a782:	46ab      	mov	fp, r5
1000a784:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a786:	46c0      	nop			; (mov r8, r8)
1000a788:	100132c4 	.word	0x100132c4
1000a78c:	100103b5 	.word	0x100103b5
1000a790:	10011744 	.word	0x10011744
1000a794:	100103a1 	.word	0x100103a1
1000a798:	100122b0 	.word	0x100122b0
1000a79c:	10010281 	.word	0x10010281
1000a7a0:	100122c0 	.word	0x100122c0
1000a7a4:	100122c8 	.word	0x100122c8
1000a7a8:	1000d695 	.word	0x1000d695
1000a7ac:	100122e4 	.word	0x100122e4

1000a7b0 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7b2:	b085      	sub	sp, #20
1000a7b4:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a7b6:	2206      	movs	r2, #6
1000a7b8:	493d      	ldr	r1, [pc, #244]	; (1000a8b0 <ble_pair_key_request_handler+0x100>)
1000a7ba:	a802      	add	r0, sp, #8
1000a7bc:	4e3d      	ldr	r6, [pc, #244]	; (1000a8b4 <ble_pair_key_request_handler+0x104>)
1000a7be:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a7c0:	ac01      	add	r4, sp, #4
1000a7c2:	2204      	movs	r2, #4
1000a7c4:	0029      	movs	r1, r5
1000a7c6:	0020      	movs	r0, r4
1000a7c8:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a7ca:	78e3      	ldrb	r3, [r4, #3]
1000a7cc:	2b00      	cmp	r3, #0
1000a7ce:	d162      	bne.n	1000a896 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a7d0:	4839      	ldr	r0, [pc, #228]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a7d2:	4b3a      	ldr	r3, [pc, #232]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a7d4:	4798      	blx	r3
1000a7d6:	483a      	ldr	r0, [pc, #232]	; (1000a8c0 <ble_pair_key_request_handler+0x110>)
1000a7d8:	4b3a      	ldr	r3, [pc, #232]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a7da:	4798      	blx	r3
1000a7dc:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a7de:	4c3a      	ldr	r4, [pc, #232]	; (1000a8c8 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a7e0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a7e2:	201e      	movs	r0, #30
1000a7e4:	47a0      	blx	r4
1000a7e6:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a7e8:	2b00      	cmp	r3, #0
1000a7ea:	d11a      	bne.n	1000a822 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a7ec:	4f32      	ldr	r7, [pc, #200]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a7ee:	0038      	movs	r0, r7
1000a7f0:	4e32      	ldr	r6, [pc, #200]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a7f2:	47b0      	blx	r6
1000a7f4:	4835      	ldr	r0, [pc, #212]	; (1000a8cc <ble_pair_key_request_handler+0x11c>)
1000a7f6:	4c33      	ldr	r4, [pc, #204]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a7f8:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a7fa:	0038      	movs	r0, r7
1000a7fc:	47b0      	blx	r6
1000a7fe:	4834      	ldr	r0, [pc, #208]	; (1000a8d0 <ble_pair_key_request_handler+0x120>)
1000a800:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a802:	8828      	ldrh	r0, [r5, #0]
1000a804:	2113      	movs	r1, #19
1000a806:	4b33      	ldr	r3, [pc, #204]	; (1000a8d4 <ble_pair_key_request_handler+0x124>)
1000a808:	4798      	blx	r3
1000a80a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a80c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a80e:	2b00      	cmp	r3, #0
1000a810:	d04c      	beq.n	1000a8ac <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a812:	4829      	ldr	r0, [pc, #164]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a814:	4b29      	ldr	r3, [pc, #164]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a816:	4798      	blx	r3
1000a818:	482f      	ldr	r0, [pc, #188]	; (1000a8d8 <ble_pair_key_request_handler+0x128>)
1000a81a:	4b2a      	ldr	r3, [pc, #168]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a81c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a81e:	20e2      	movs	r0, #226	; 0xe2
1000a820:	e044      	b.n	1000a8ac <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a822:	001a      	movs	r2, r3
1000a824:	3a30      	subs	r2, #48	; 0x30
1000a826:	2a09      	cmp	r2, #9
1000a828:	d8db      	bhi.n	1000a7e2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a82a:	aa02      	add	r2, sp, #8
1000a82c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a82e:	4038      	ands	r0, r7
1000a830:	4b2a      	ldr	r3, [pc, #168]	; (1000a8dc <ble_pair_key_request_handler+0x12c>)
1000a832:	4798      	blx	r3
1000a834:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a836:	2e06      	cmp	r6, #6
1000a838:	d026      	beq.n	1000a888 <ble_pair_key_request_handler+0xd8>
1000a83a:	e7d2      	b.n	1000a7e2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a83c:	481e      	ldr	r0, [pc, #120]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a83e:	4b1f      	ldr	r3, [pc, #124]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a840:	4798      	blx	r3
1000a842:	4827      	ldr	r0, [pc, #156]	; (1000a8e0 <ble_pair_key_request_handler+0x130>)
1000a844:	4b1f      	ldr	r3, [pc, #124]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a846:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a848:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a84a:	4e24      	ldr	r6, [pc, #144]	; (1000a8dc <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a84c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a84e:	5ce0      	ldrb	r0, [r4, r3]
1000a850:	47b0      	blx	r6
1000a852:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a854:	2c06      	cmp	r4, #6
1000a856:	d1f9      	bne.n	1000a84c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a858:	ab01      	add	r3, sp, #4
1000a85a:	7899      	ldrb	r1, [r3, #2]
1000a85c:	8828      	ldrh	r0, [r5, #0]
1000a85e:	aa02      	add	r2, sp, #8
1000a860:	4b20      	ldr	r3, [pc, #128]	; (1000a8e4 <ble_pair_key_request_handler+0x134>)
1000a862:	4798      	blx	r3
1000a864:	2800      	cmp	r0, #0
1000a866:	d021      	beq.n	1000a8ac <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a868:	4813      	ldr	r0, [pc, #76]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a86a:	4b14      	ldr	r3, [pc, #80]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a86c:	4798      	blx	r3
1000a86e:	481e      	ldr	r0, [pc, #120]	; (1000a8e8 <ble_pair_key_request_handler+0x138>)
1000a870:	4b14      	ldr	r3, [pc, #80]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a872:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a874:	2000      	movs	r0, #0
1000a876:	e019      	b.n	1000a8ac <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a878:	480f      	ldr	r0, [pc, #60]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a87a:	4b10      	ldr	r3, [pc, #64]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a87c:	4798      	blx	r3
1000a87e:	481b      	ldr	r0, [pc, #108]	; (1000a8ec <ble_pair_key_request_handler+0x13c>)
1000a880:	4b10      	ldr	r3, [pc, #64]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a882:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a884:	2000      	movs	r0, #0
1000a886:	e011      	b.n	1000a8ac <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a888:	480b      	ldr	r0, [pc, #44]	; (1000a8b8 <ble_pair_key_request_handler+0x108>)
1000a88a:	4b0c      	ldr	r3, [pc, #48]	; (1000a8bc <ble_pair_key_request_handler+0x10c>)
1000a88c:	4798      	blx	r3
1000a88e:	4818      	ldr	r0, [pc, #96]	; (1000a8f0 <ble_pair_key_request_handler+0x140>)
1000a890:	4b0c      	ldr	r3, [pc, #48]	; (1000a8c4 <ble_pair_key_request_handler+0x114>)
1000a892:	4798      	blx	r3
1000a894:	e7d8      	b.n	1000a848 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a896:	ab01      	add	r3, sp, #4
1000a898:	885a      	ldrh	r2, [r3, #2]
1000a89a:	2380      	movs	r3, #128	; 0x80
1000a89c:	005b      	lsls	r3, r3, #1
1000a89e:	429a      	cmp	r2, r3
1000a8a0:	d0cc      	beq.n	1000a83c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a8a2:	ab01      	add	r3, sp, #4
1000a8a4:	789b      	ldrb	r3, [r3, #2]
1000a8a6:	2b01      	cmp	r3, #1
1000a8a8:	d0e6      	beq.n	1000a878 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a8aa:	2000      	movs	r0, #0
}
1000a8ac:	b005      	add	sp, #20
1000a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8b0:	10011d88 	.word	0x10011d88
1000a8b4:	1001025f 	.word	0x1001025f
1000a8b8:	10011744 	.word	0x10011744
1000a8bc:	100103a1 	.word	0x100103a1
1000a8c0:	1001230c 	.word	0x1001230c
1000a8c4:	10010281 	.word	0x10010281
1000a8c8:	1000b259 	.word	0x1000b259
1000a8cc:	10012334 	.word	0x10012334
1000a8d0:	10012340 	.word	0x10012340
1000a8d4:	1000d309 	.word	0x1000d309
1000a8d8:	100121ec 	.word	0x100121ec
1000a8dc:	100102b5 	.word	0x100102b5
1000a8e0:	10012354 	.word	0x10012354
1000a8e4:	1000d7c5 	.word	0x1000d7c5
1000a8e8:	1001238c 	.word	0x1001238c
1000a8ec:	100123a4 	.word	0x100123a4
1000a8f0:	100123c0 	.word	0x100123c0

1000a8f4 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8f6:	465f      	mov	r7, fp
1000a8f8:	4656      	mov	r6, sl
1000a8fa:	464d      	mov	r5, r9
1000a8fc:	b4e0      	push	{r5, r6, r7}
1000a8fe:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a900:	8800      	ldrh	r0, [r0, #0]
1000a902:	4b49      	ldr	r3, [pc, #292]	; (1000aa28 <ble_encryption_request_handler+0x134>)
1000a904:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a906:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a908:	8919      	ldrh	r1, [r3, #8]
1000a90a:	4281      	cmp	r1, r0
1000a90c:	d137      	bne.n	1000a97e <ble_encryption_request_handler+0x8a>
1000a90e:	0019      	movs	r1, r3
1000a910:	315e      	adds	r1, #94	; 0x5e
1000a912:	7809      	ldrb	r1, [r1, #0]
1000a914:	2901      	cmp	r1, #1
1000a916:	d932      	bls.n	1000a97e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a918:	4f43      	ldr	r7, [pc, #268]	; (1000aa28 <ble_encryption_request_handler+0x134>)
1000a91a:	0153      	lsls	r3, r2, #5
1000a91c:	1a9d      	subs	r5, r3, r2
1000a91e:	00ad      	lsls	r5, r5, #2
1000a920:	197d      	adds	r5, r7, r5
1000a922:	355e      	adds	r5, #94	; 0x5e
1000a924:	2306      	movs	r3, #6
1000a926:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000a928:	4840      	ldr	r0, [pc, #256]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a92a:	4b41      	ldr	r3, [pc, #260]	; (1000aa30 <ble_encryption_request_handler+0x13c>)
1000a92c:	469a      	mov	sl, r3
1000a92e:	4798      	blx	r3
1000a930:	8831      	ldrh	r1, [r6, #0]
1000a932:	4840      	ldr	r0, [pc, #256]	; (1000aa34 <ble_encryption_request_handler+0x140>)
1000a934:	4b40      	ldr	r3, [pc, #256]	; (1000aa38 <ble_encryption_request_handler+0x144>)
1000a936:	4699      	mov	r9, r3
1000a938:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000a93a:	483c      	ldr	r0, [pc, #240]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a93c:	47d0      	blx	sl
1000a93e:	0163      	lsls	r3, r4, #5
1000a940:	1b1b      	subs	r3, r3, r4
1000a942:	009b      	lsls	r3, r3, #2
1000a944:	18ff      	adds	r7, r7, r3
1000a946:	2370      	movs	r3, #112	; 0x70
1000a948:	469b      	mov	fp, r3
1000a94a:	44bb      	add	fp, r7
1000a94c:	465b      	mov	r3, fp
1000a94e:	8819      	ldrh	r1, [r3, #0]
1000a950:	483a      	ldr	r0, [pc, #232]	; (1000aa3c <ble_encryption_request_handler+0x148>)
1000a952:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000a954:	4835      	ldr	r0, [pc, #212]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a956:	47d0      	blx	sl
1000a958:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000a95a:	4839      	ldr	r0, [pc, #228]	; (1000aa40 <ble_encryption_request_handler+0x14c>)
1000a95c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000a95e:	4833      	ldr	r0, [pc, #204]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a960:	47d0      	blx	sl
1000a962:	8871      	ldrh	r1, [r6, #2]
1000a964:	4837      	ldr	r0, [pc, #220]	; (1000aa44 <ble_encryption_request_handler+0x150>)
1000a966:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000a968:	4830      	ldr	r0, [pc, #192]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a96a:	47d0      	blx	sl
1000a96c:	0021      	movs	r1, r4
1000a96e:	4836      	ldr	r0, [pc, #216]	; (1000aa48 <ble_encryption_request_handler+0x154>)
1000a970:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a972:	465b      	mov	r3, fp
1000a974:	881a      	ldrh	r2, [r3, #0]
1000a976:	8873      	ldrh	r3, [r6, #2]
1000a978:	429a      	cmp	r2, r3
1000a97a:	d12a      	bne.n	1000a9d2 <ble_encryption_request_handler+0xde>
1000a97c:	e006      	b.n	1000a98c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a97e:	3401      	adds	r4, #1
1000a980:	b2e4      	uxtb	r4, r4
1000a982:	3201      	adds	r2, #1
1000a984:	337c      	adds	r3, #124	; 0x7c
1000a986:	2c05      	cmp	r4, #5
1000a988:	d1be      	bne.n	1000a908 <ble_encryption_request_handler+0x14>
1000a98a:	e022      	b.n	1000a9d2 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a98c:	0161      	lsls	r1, r4, #5
1000a98e:	1b09      	subs	r1, r1, r4
1000a990:	0089      	lsls	r1, r1, #2
1000a992:	4b25      	ldr	r3, [pc, #148]	; (1000aa28 <ble_encryption_request_handler+0x134>)
1000a994:	1859      	adds	r1, r3, r1
1000a996:	3172      	adds	r1, #114	; 0x72
1000a998:	1d30      	adds	r0, r6, #4
1000a99a:	2208      	movs	r2, #8
1000a99c:	4b2b      	ldr	r3, [pc, #172]	; (1000aa4c <ble_encryption_request_handler+0x158>)
1000a99e:	4798      	blx	r3
1000a9a0:	2800      	cmp	r0, #0
1000a9a2:	d116      	bne.n	1000a9d2 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000a9a4:	4821      	ldr	r0, [pc, #132]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a9a6:	4b22      	ldr	r3, [pc, #136]	; (1000aa30 <ble_encryption_request_handler+0x13c>)
1000a9a8:	4798      	blx	r3
1000a9aa:	4829      	ldr	r0, [pc, #164]	; (1000aa50 <ble_encryption_request_handler+0x15c>)
1000a9ac:	4b22      	ldr	r3, [pc, #136]	; (1000aa38 <ble_encryption_request_handler+0x144>)
1000a9ae:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a9b0:	0162      	lsls	r2, r4, #5
1000a9b2:	1b13      	subs	r3, r2, r4
1000a9b4:	009b      	lsls	r3, r3, #2
1000a9b6:	3360      	adds	r3, #96	; 0x60
1000a9b8:	491b      	ldr	r1, [pc, #108]	; (1000aa28 <ble_encryption_request_handler+0x134>)
1000a9ba:	185b      	adds	r3, r3, r1
1000a9bc:	1b12      	subs	r2, r2, r4
1000a9be:	0092      	lsls	r2, r2, #2
1000a9c0:	188a      	adds	r2, r1, r2
1000a9c2:	7d11      	ldrb	r1, [r2, #20]
1000a9c4:	8830      	ldrh	r0, [r6, #0]
1000a9c6:	2201      	movs	r2, #1
1000a9c8:	4c22      	ldr	r4, [pc, #136]	; (1000aa54 <ble_encryption_request_handler+0x160>)
1000a9ca:	47a0      	blx	r4
1000a9cc:	1e04      	subs	r4, r0, #0
1000a9ce:	d01e      	beq.n	1000aa0e <ble_encryption_request_handler+0x11a>
1000a9d0:	e015      	b.n	1000a9fe <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a9d2:	4f16      	ldr	r7, [pc, #88]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000a9d4:	0038      	movs	r0, r7
1000a9d6:	4e16      	ldr	r6, [pc, #88]	; (1000aa30 <ble_encryption_request_handler+0x13c>)
1000a9d8:	47b0      	blx	r6
1000a9da:	481f      	ldr	r0, [pc, #124]	; (1000aa58 <ble_encryption_request_handler+0x164>)
1000a9dc:	4d16      	ldr	r5, [pc, #88]	; (1000aa38 <ble_encryption_request_handler+0x144>)
1000a9de:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a9e0:	0038      	movs	r0, r7
1000a9e2:	47b0      	blx	r6
1000a9e4:	481d      	ldr	r0, [pc, #116]	; (1000aa5c <ble_encryption_request_handler+0x168>)
1000a9e6:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a9e8:	0163      	lsls	r3, r4, #5
1000a9ea:	1b1c      	subs	r4, r3, r4
1000a9ec:	00a4      	lsls	r4, r4, #2
1000a9ee:	4b0e      	ldr	r3, [pc, #56]	; (1000aa28 <ble_encryption_request_handler+0x134>)
1000a9f0:	191c      	adds	r4, r3, r4
1000a9f2:	8920      	ldrh	r0, [r4, #8]
1000a9f4:	2105      	movs	r1, #5
1000a9f6:	4b1a      	ldr	r3, [pc, #104]	; (1000aa60 <ble_encryption_request_handler+0x16c>)
1000a9f8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a9fa:	24e2      	movs	r4, #226	; 0xe2
1000a9fc:	e00d      	b.n	1000aa1a <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a9fe:	480b      	ldr	r0, [pc, #44]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000aa00:	4b0b      	ldr	r3, [pc, #44]	; (1000aa30 <ble_encryption_request_handler+0x13c>)
1000aa02:	4798      	blx	r3
1000aa04:	4817      	ldr	r0, [pc, #92]	; (1000aa64 <ble_encryption_request_handler+0x170>)
1000aa06:	4b0c      	ldr	r3, [pc, #48]	; (1000aa38 <ble_encryption_request_handler+0x144>)
1000aa08:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000aa0a:	2400      	movs	r4, #0
1000aa0c:	e005      	b.n	1000aa1a <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000aa0e:	4807      	ldr	r0, [pc, #28]	; (1000aa2c <ble_encryption_request_handler+0x138>)
1000aa10:	4b07      	ldr	r3, [pc, #28]	; (1000aa30 <ble_encryption_request_handler+0x13c>)
1000aa12:	4798      	blx	r3
1000aa14:	4814      	ldr	r0, [pc, #80]	; (1000aa68 <ble_encryption_request_handler+0x174>)
1000aa16:	4b08      	ldr	r3, [pc, #32]	; (1000aa38 <ble_encryption_request_handler+0x144>)
1000aa18:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000aa1a:	0020      	movs	r0, r4
1000aa1c:	bc1c      	pop	{r2, r3, r4}
1000aa1e:	4691      	mov	r9, r2
1000aa20:	469a      	mov	sl, r3
1000aa22:	46a3      	mov	fp, r4
1000aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa26:	46c0      	nop			; (mov r8, r8)
1000aa28:	100132c4 	.word	0x100132c4
1000aa2c:	10011744 	.word	0x10011744
1000aa30:	100103a1 	.word	0x100103a1
1000aa34:	100123d4 	.word	0x100123d4
1000aa38:	10010281 	.word	0x10010281
1000aa3c:	10012400 	.word	0x10012400
1000aa40:	10012414 	.word	0x10012414
1000aa44:	10012428 	.word	0x10012428
1000aa48:	10012438 	.word	0x10012438
1000aa4c:	10010241 	.word	0x10010241
1000aa50:	10012448 	.word	0x10012448
1000aa54:	1000d8b9 	.word	0x1000d8b9
1000aa58:	1001245c 	.word	0x1001245c
1000aa5c:	10012494 	.word	0x10012494
1000aa60:	1000d309 	.word	0x1000d309
1000aa64:	100124ec 	.word	0x100124ec
1000aa68:	1001250c 	.word	0x1001250c

1000aa6c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000aa6c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000aa6e:	2a00      	cmp	r2, #0
1000aa70:	d047      	beq.n	1000ab02 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000aa72:	2906      	cmp	r1, #6
1000aa74:	d847      	bhi.n	1000ab06 <ble_mgr_events_callback_handler+0x9a>
1000aa76:	0089      	lsls	r1, r1, #2
1000aa78:	4b28      	ldr	r3, [pc, #160]	; (1000ab1c <ble_mgr_events_callback_handler+0xb0>)
1000aa7a:	585b      	ldr	r3, [r3, r1]
1000aa7c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000aa7e:	4b28      	ldr	r3, [pc, #160]	; (1000ab20 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000aa80:	2405      	movs	r4, #5
1000aa82:	e00a      	b.n	1000aa9a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000aa84:	4b27      	ldr	r3, [pc, #156]	; (1000ab24 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000aa86:	2401      	movs	r4, #1
			}
			break;
1000aa88:	e007      	b.n	1000aa9a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000aa8a:	4b27      	ldr	r3, [pc, #156]	; (1000ab28 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000aa8c:	2405      	movs	r4, #5
			}
			break;
1000aa8e:	e004      	b.n	1000aa9a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000aa90:	4b26      	ldr	r3, [pc, #152]	; (1000ab2c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000aa92:	2401      	movs	r4, #1
			}
			break;
1000aa94:	e001      	b.n	1000aa9a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000aa96:	4b26      	ldr	r3, [pc, #152]	; (1000ab30 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000aa98:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000aa9a:	2800      	cmp	r0, #0
1000aa9c:	d116      	bne.n	1000aacc <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000aa9e:	6819      	ldr	r1, [r3, #0]
1000aaa0:	2900      	cmp	r1, #0
1000aaa2:	d10b      	bne.n	1000aabc <ble_mgr_events_callback_handler+0x50>
1000aaa4:	e006      	b.n	1000aab4 <ble_mgr_events_callback_handler+0x48>
1000aaa6:	001d      	movs	r5, r3
1000aaa8:	3304      	adds	r3, #4
1000aaaa:	1f18      	subs	r0, r3, #4
1000aaac:	6800      	ldr	r0, [r0, #0]
1000aaae:	2800      	cmp	r0, #0
1000aab0:	d106      	bne.n	1000aac0 <ble_mgr_events_callback_handler+0x54>
1000aab2:	e000      	b.n	1000aab6 <ble_mgr_events_callback_handler+0x4a>
1000aab4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000aab6:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000aab8:	2101      	movs	r1, #1
						break;
1000aaba:	e02c      	b.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
1000aabc:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000aabe:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000aac0:	3101      	adds	r1, #1
1000aac2:	b2c9      	uxtb	r1, r1
1000aac4:	42a1      	cmp	r1, r4
1000aac6:	d3ee      	bcc.n	1000aaa6 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000aac8:	2100      	movs	r1, #0
1000aaca:	e024      	b.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
1000aacc:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000aace:	2801      	cmp	r0, #1
1000aad0:	d121      	bne.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000aad2:	6819      	ldr	r1, [r3, #0]
1000aad4:	428a      	cmp	r2, r1
1000aad6:	d10c      	bne.n	1000aaf2 <ble_mgr_events_callback_handler+0x86>
1000aad8:	e006      	b.n	1000aae8 <ble_mgr_events_callback_handler+0x7c>
1000aada:	001d      	movs	r5, r3
1000aadc:	3304      	adds	r3, #4
1000aade:	1f18      	subs	r0, r3, #4
1000aae0:	6800      	ldr	r0, [r0, #0]
1000aae2:	4282      	cmp	r2, r0
1000aae4:	d107      	bne.n	1000aaf6 <ble_mgr_events_callback_handler+0x8a>
1000aae6:	e000      	b.n	1000aaea <ble_mgr_events_callback_handler+0x7e>
1000aae8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000aaea:	2300      	movs	r3, #0
1000aaec:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000aaee:	2101      	movs	r1, #1
						break;
1000aaf0:	e011      	b.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
1000aaf2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000aaf4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000aaf6:	3101      	adds	r1, #1
1000aaf8:	b2c9      	uxtb	r1, r1
1000aafa:	42a1      	cmp	r1, r4
1000aafc:	d3ed      	bcc.n	1000aada <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000aafe:	2100      	movs	r1, #0
1000ab00:	e009      	b.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000ab02:	2100      	movs	r1, #0
1000ab04:	e007      	b.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000ab06:	2100      	movs	r1, #0
1000ab08:	e005      	b.n	1000ab16 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000ab0a:	4b0a      	ldr	r3, [pc, #40]	; (1000ab34 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000ab0c:	2405      	movs	r4, #5
1000ab0e:	e7c4      	b.n	1000aa9a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000ab10:	4b09      	ldr	r3, [pc, #36]	; (1000ab38 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000ab12:	2401      	movs	r4, #1
1000ab14:	e7c1      	b.n	1000aa9a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000ab16:	0008      	movs	r0, r1
1000ab18:	bd30      	pop	{r4, r5, pc}
1000ab1a:	46c0      	nop			; (mov r8, r8)
1000ab1c:	10011c7c 	.word	0x10011c7c
1000ab20:	100132b0 	.word	0x100132b0
1000ab24:	100132ac 	.word	0x100132ac
1000ab28:	10013534 	.word	0x10013534
1000ab2c:	10013ad8 	.word	0x10013ad8
1000ab30:	10013548 	.word	0x10013548
1000ab34:	1001355c 	.word	0x1001355c
1000ab38:	10013594 	.word	0x10013594

1000ab3c <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab3e:	4647      	mov	r7, r8
1000ab40:	b480      	push	{r7}
1000ab42:	b090      	sub	sp, #64	; 0x40
1000ab44:	0005      	movs	r5, r0
/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000ab46:	2400      	movs	r4, #0
1000ab48:	4b6a      	ldr	r3, [pc, #424]	; (1000acf4 <ble_device_init+0x1b8>)
1000ab4a:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ab4c:	2207      	movs	r2, #7
1000ab4e:	2100      	movs	r1, #0
1000ab50:	4869      	ldr	r0, [pc, #420]	; (1000acf8 <ble_device_init+0x1bc>)
1000ab52:	4e6a      	ldr	r6, [pc, #424]	; (1000acfc <ble_device_init+0x1c0>)
1000ab54:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000ab56:	2212      	movs	r2, #18
1000ab58:	2100      	movs	r1, #0
1000ab5a:	4869      	ldr	r0, [pc, #420]	; (1000ad00 <ble_device_init+0x1c4>)
1000ab5c:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000ab5e:	4b69      	ldr	r3, [pc, #420]	; (1000ad04 <ble_device_init+0x1c8>)
1000ab60:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ab62:	22cd      	movs	r2, #205	; 0xcd
1000ab64:	0092      	lsls	r2, r2, #2
1000ab66:	2100      	movs	r1, #0
1000ab68:	4867      	ldr	r0, [pc, #412]	; (1000ad08 <ble_device_init+0x1cc>)
1000ab6a:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000ab6c:	4b67      	ldr	r3, [pc, #412]	; (1000ad0c <ble_device_init+0x1d0>)
1000ab6e:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000ab70:	2283      	movs	r2, #131	; 0x83
1000ab72:	0092      	lsls	r2, r2, #2
1000ab74:	2100      	movs	r1, #0
1000ab76:	4866      	ldr	r0, [pc, #408]	; (1000ad10 <ble_device_init+0x1d4>)
1000ab78:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000ab7a:	220c      	movs	r2, #12
1000ab7c:	2100      	movs	r1, #0
1000ab7e:	4865      	ldr	r0, [pc, #404]	; (1000ad14 <ble_device_init+0x1d8>)
1000ab80:	47b0      	blx	r6

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ab82:	4b65      	ldr	r3, [pc, #404]	; (1000ad18 <ble_device_init+0x1dc>)
1000ab84:	601c      	str	r4, [r3, #0]
1000ab86:	605c      	str	r4, [r3, #4]
1000ab88:	609c      	str	r4, [r3, #8]
1000ab8a:	60dc      	str	r4, [r3, #12]
1000ab8c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ab8e:	4b63      	ldr	r3, [pc, #396]	; (1000ad1c <ble_device_init+0x1e0>)
1000ab90:	601c      	str	r4, [r3, #0]
1000ab92:	605c      	str	r4, [r3, #4]
1000ab94:	609c      	str	r4, [r3, #8]
1000ab96:	60dc      	str	r4, [r3, #12]
1000ab98:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ab9a:	4b61      	ldr	r3, [pc, #388]	; (1000ad20 <ble_device_init+0x1e4>)
1000ab9c:	601c      	str	r4, [r3, #0]
1000ab9e:	605c      	str	r4, [r3, #4]
1000aba0:	609c      	str	r4, [r3, #8]
1000aba2:	60dc      	str	r4, [r3, #12]
1000aba4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000aba6:	4b5f      	ldr	r3, [pc, #380]	; (1000ad24 <ble_device_init+0x1e8>)
1000aba8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000abaa:	4b5f      	ldr	r3, [pc, #380]	; (1000ad28 <ble_device_init+0x1ec>)
1000abac:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000abae:	4b5f      	ldr	r3, [pc, #380]	; (1000ad2c <ble_device_init+0x1f0>)
1000abb0:	601c      	str	r4, [r3, #0]
1000abb2:	605c      	str	r4, [r3, #4]
1000abb4:	609c      	str	r4, [r3, #8]
1000abb6:	60dc      	str	r4, [r3, #12]
1000abb8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000abba:	4b5d      	ldr	r3, [pc, #372]	; (1000ad30 <ble_device_init+0x1f4>)
1000abbc:	601c      	str	r4, [r3, #0]
1000abbe:	4c5d      	ldr	r4, [pc, #372]	; (1000ad34 <ble_device_init+0x1f8>)
1000abc0:	239b      	movs	r3, #155	; 0x9b
1000abc2:	009b      	lsls	r3, r3, #2
1000abc4:	4698      	mov	r8, r3
1000abc6:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000abc8:	4f4c      	ldr	r7, [pc, #304]	; (1000acfc <ble_device_init+0x1c0>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000abca:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000abcc:	227c      	movs	r2, #124	; 0x7c
1000abce:	2100      	movs	r1, #0
1000abd0:	0020      	movs	r0, r4
1000abd2:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000abd4:	0023      	movs	r3, r4
1000abd6:	335e      	adds	r3, #94	; 0x5e
1000abd8:	2200      	movs	r2, #0
1000abda:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000abdc:	7626      	strb	r6, [r4, #24]
1000abde:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000abe0:	45a0      	cmp	r8, r4
1000abe2:	d1f3      	bne.n	1000abcc <ble_device_init+0x90>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000abe4:	4b54      	ldr	r3, [pc, #336]	; (1000ad38 <ble_device_init+0x1fc>)
1000abe6:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000abe8:	4854      	ldr	r0, [pc, #336]	; (1000ad3c <ble_device_init+0x200>)
1000abea:	4b55      	ldr	r3, [pc, #340]	; (1000ad40 <ble_device_init+0x204>)
1000abec:	4798      	blx	r3
1000abee:	4855      	ldr	r0, [pc, #340]	; (1000ad44 <ble_device_init+0x208>)
1000abf0:	4b55      	ldr	r3, [pc, #340]	; (1000ad48 <ble_device_init+0x20c>)
1000abf2:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000abf4:	4847      	ldr	r0, [pc, #284]	; (1000ad14 <ble_device_init+0x1d8>)
1000abf6:	4b55      	ldr	r3, [pc, #340]	; (1000ad4c <ble_device_init+0x210>)
1000abf8:	4798      	blx	r3
1000abfa:	2800      	cmp	r0, #0
1000abfc:	d00b      	beq.n	1000ac16 <ble_device_init+0xda>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000abfe:	4e4f      	ldr	r6, [pc, #316]	; (1000ad3c <ble_device_init+0x200>)
1000ac00:	0030      	movs	r0, r6
1000ac02:	4d4f      	ldr	r5, [pc, #316]	; (1000ad40 <ble_device_init+0x204>)
1000ac04:	47a8      	blx	r5
1000ac06:	4852      	ldr	r0, [pc, #328]	; (1000ad50 <ble_device_init+0x214>)
1000ac08:	4c4f      	ldr	r4, [pc, #316]	; (1000ad48 <ble_device_init+0x20c>)
1000ac0a:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000ac0c:	0030      	movs	r0, r6
1000ac0e:	47a8      	blx	r5
1000ac10:	4850      	ldr	r0, [pc, #320]	; (1000ad54 <ble_device_init+0x218>)
1000ac12:	47a0      	blx	r4
1000ac14:	e7fe      	b.n	1000ac14 <ble_device_init+0xd8>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ac16:	4a50      	ldr	r2, [pc, #320]	; (1000ad58 <ble_device_init+0x21c>)
1000ac18:	2100      	movs	r1, #0
1000ac1a:	2000      	movs	r0, #0
1000ac1c:	4c4f      	ldr	r4, [pc, #316]	; (1000ad5c <ble_device_init+0x220>)
1000ac1e:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ac20:	4a4f      	ldr	r2, [pc, #316]	; (1000ad60 <ble_device_init+0x224>)
1000ac22:	2102      	movs	r1, #2
1000ac24:	2000      	movs	r0, #0
1000ac26:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ac28:	2109      	movs	r1, #9
1000ac2a:	484e      	ldr	r0, [pc, #312]	; (1000ad64 <ble_device_init+0x228>)
1000ac2c:	4b4e      	ldr	r3, [pc, #312]	; (1000ad68 <ble_device_init+0x22c>)
1000ac2e:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ac30:	2800      	cmp	r0, #0
1000ac32:	d005      	beq.n	1000ac40 <ble_device_init+0x104>
	{
		DBG_LOG("Device name set failed");
1000ac34:	4841      	ldr	r0, [pc, #260]	; (1000ad3c <ble_device_init+0x200>)
1000ac36:	4b42      	ldr	r3, [pc, #264]	; (1000ad40 <ble_device_init+0x204>)
1000ac38:	4798      	blx	r3
1000ac3a:	484c      	ldr	r0, [pc, #304]	; (1000ad6c <ble_device_init+0x230>)
1000ac3c:	4b42      	ldr	r3, [pc, #264]	; (1000ad48 <ble_device_init+0x20c>)
1000ac3e:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ac40:	2207      	movs	r2, #7
1000ac42:	494b      	ldr	r1, [pc, #300]	; (1000ad70 <ble_device_init+0x234>)
1000ac44:	3108      	adds	r1, #8
1000ac46:	a804      	add	r0, sp, #16
1000ac48:	4b4a      	ldr	r3, [pc, #296]	; (1000ad74 <ble_device_init+0x238>)
1000ac4a:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ac4c:	2226      	movs	r2, #38	; 0x26
1000ac4e:	2100      	movs	r1, #0
1000ac50:	a806      	add	r0, sp, #24
1000ac52:	4b2a      	ldr	r3, [pc, #168]	; (1000acfc <ble_device_init+0x1c0>)
1000ac54:	4798      	blx	r3
	
	if (addr == NULL)
1000ac56:	2d00      	cmp	r5, #0
1000ac58:	d10c      	bne.n	1000ac74 <ble_device_init+0x138>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ac5a:	a804      	add	r0, sp, #16
1000ac5c:	4b46      	ldr	r3, [pc, #280]	; (1000ad78 <ble_device_init+0x23c>)
1000ac5e:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ac60:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ac62:	2800      	cmp	r0, #0
1000ac64:	d006      	beq.n	1000ac74 <ble_device_init+0x138>
		{
			DBG_LOG("BD address get failed");
1000ac66:	4835      	ldr	r0, [pc, #212]	; (1000ad3c <ble_device_init+0x200>)
1000ac68:	4b35      	ldr	r3, [pc, #212]	; (1000ad40 <ble_device_init+0x204>)
1000ac6a:	4798      	blx	r3
1000ac6c:	4843      	ldr	r0, [pc, #268]	; (1000ad7c <ble_device_init+0x240>)
1000ac6e:	4b36      	ldr	r3, [pc, #216]	; (1000ad48 <ble_device_init+0x20c>)
1000ac70:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ac72:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ac74:	4831      	ldr	r0, [pc, #196]	; (1000ad3c <ble_device_init+0x200>)
1000ac76:	4b32      	ldr	r3, [pc, #200]	; (1000ad40 <ble_device_init+0x204>)
1000ac78:	4798      	blx	r3
1000ac7a:	792b      	ldrb	r3, [r5, #4]
1000ac7c:	796a      	ldrb	r2, [r5, #5]
1000ac7e:	79a9      	ldrb	r1, [r5, #6]
1000ac80:	7828      	ldrb	r0, [r5, #0]
1000ac82:	9003      	str	r0, [sp, #12]
1000ac84:	7868      	ldrb	r0, [r5, #1]
1000ac86:	9002      	str	r0, [sp, #8]
1000ac88:	78a8      	ldrb	r0, [r5, #2]
1000ac8a:	9001      	str	r0, [sp, #4]
1000ac8c:	78e8      	ldrb	r0, [r5, #3]
1000ac8e:	9000      	str	r0, [sp, #0]
1000ac90:	483b      	ldr	r0, [pc, #236]	; (1000ad80 <ble_device_init+0x244>)
1000ac92:	4c2d      	ldr	r4, [pc, #180]	; (1000ad48 <ble_device_init+0x20c>)
1000ac94:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000ac96:	ac06      	add	r4, sp, #24
1000ac98:	2305      	movs	r3, #5
1000ac9a:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000ac9c:	4b39      	ldr	r3, [pc, #228]	; (1000ad84 <ble_device_init+0x248>)
1000ac9e:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000aca0:	2207      	movs	r2, #7
1000aca2:	0029      	movs	r1, r5
1000aca4:	a807      	add	r0, sp, #28
1000aca6:	4b33      	ldr	r3, [pc, #204]	; (1000ad74 <ble_device_init+0x238>)
1000aca8:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000acaa:	2300      	movs	r3, #0
1000acac:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000acae:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000acb0:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000acb2:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000acb4:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000acb6:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000acb8:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000acba:	2380      	movs	r3, #128	; 0x80
1000acbc:	009b      	lsls	r3, r3, #2
1000acbe:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000acc0:	0020      	movs	r0, r4
1000acc2:	4b31      	ldr	r3, [pc, #196]	; (1000ad88 <ble_device_init+0x24c>)
1000acc4:	4798      	blx	r3
1000acc6:	2800      	cmp	r0, #0
1000acc8:	d005      	beq.n	1000acd6 <ble_device_init+0x19a>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000acca:	481c      	ldr	r0, [pc, #112]	; (1000ad3c <ble_device_init+0x200>)
1000accc:	4b1c      	ldr	r3, [pc, #112]	; (1000ad40 <ble_device_init+0x204>)
1000acce:	4798      	blx	r3
1000acd0:	482e      	ldr	r0, [pc, #184]	; (1000ad8c <ble_device_init+0x250>)
1000acd2:	4b1d      	ldr	r3, [pc, #116]	; (1000ad48 <ble_device_init+0x20c>)
1000acd4:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000acd6:	0028      	movs	r0, r5
1000acd8:	4b2d      	ldr	r3, [pc, #180]	; (1000ad90 <ble_device_init+0x254>)
1000acda:	4798      	blx	r3
1000acdc:	2800      	cmp	r0, #0
1000acde:	d005      	beq.n	1000acec <ble_device_init+0x1b0>
	{
		DBG_LOG("Set BLE Device Address failed");
1000ace0:	4816      	ldr	r0, [pc, #88]	; (1000ad3c <ble_device_init+0x200>)
1000ace2:	4b17      	ldr	r3, [pc, #92]	; (1000ad40 <ble_device_init+0x204>)
1000ace4:	4798      	blx	r3
1000ace6:	482b      	ldr	r0, [pc, #172]	; (1000ad94 <ble_device_init+0x258>)
1000ace8:	4b17      	ldr	r3, [pc, #92]	; (1000ad48 <ble_device_init+0x20c>)
1000acea:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000acec:	b010      	add	sp, #64	; 0x40
1000acee:	bc04      	pop	{r2}
1000acf0:	4690      	mov	r8, r2
1000acf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000acf4:	10012f5c 	.word	0x10012f5c
1000acf8:	10012f64 	.word	0x10012f64
1000acfc:	10010271 	.word	0x10010271
1000ad00:	10013570 	.word	0x10013570
1000ad04:	10012f60 	.word	0x10012f60
1000ad08:	10013598 	.word	0x10013598
1000ad0c:	10013590 	.word	0x10013590
1000ad10:	100138cc 	.word	0x100138cc
1000ad14:	10013584 	.word	0x10013584
1000ad18:	10013548 	.word	0x10013548
1000ad1c:	1001355c 	.word	0x1001355c
1000ad20:	100132b0 	.word	0x100132b0
1000ad24:	10013594 	.word	0x10013594
1000ad28:	100132ac 	.word	0x100132ac
1000ad2c:	10013534 	.word	0x10013534
1000ad30:	10013ad8 	.word	0x10013ad8
1000ad34:	100132c4 	.word	0x100132c4
1000ad38:	10013530 	.word	0x10013530
1000ad3c:	10011744 	.word	0x10011744
1000ad40:	100103a1 	.word	0x100103a1
1000ad44:	10012528 	.word	0x10012528
1000ad48:	10010281 	.word	0x10010281
1000ad4c:	1000d025 	.word	0x1000d025
1000ad50:	1001253c 	.word	0x1001253c
1000ad54:	1001255c 	.word	0x1001255c
1000ad58:	10012740 	.word	0x10012740
1000ad5c:	1000aa6d 	.word	0x1000aa6d
1000ad60:	10011da4 	.word	0x10011da4
1000ad64:	10012598 	.word	0x10012598
1000ad68:	1000cf3d 	.word	0x1000cf3d
1000ad6c:	100125a4 	.word	0x100125a4
1000ad70:	10011d88 	.word	0x10011d88
1000ad74:	1001025f 	.word	0x1001025f
1000ad78:	1000cf71 	.word	0x1000cf71
1000ad7c:	100125bc 	.word	0x100125bc
1000ad80:	100125d4 	.word	0x100125d4
1000ad84:	00003a98 	.word	0x00003a98
1000ad88:	1000cf95 	.word	0x1000cf95
1000ad8c:	1001260c 	.word	0x1001260c
1000ad90:	1000d1bd 	.word	0x1000d1bd
1000ad94:	10012630 	.word	0x10012630

1000ad98 <gap_dev_connect>:
	return AT_BLE_SUCCESS;
}

/** @brief request the peer device for connection */
at_ble_status_t gap_dev_connect(at_ble_addr_t *dev_addr)
{
1000ad98:	b510      	push	{r4, lr}
1000ad9a:	b086      	sub	sp, #24
1000ad9c:	0004      	movs	r4, r0
	at_ble_connection_params_t gap_conn_parameter;
	
	memcpy((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)dev_addr, sizeof(at_ble_addr_t));
1000ad9e:	2207      	movs	r2, #7
1000ada0:	0001      	movs	r1, r0
1000ada2:	480c      	ldr	r0, [pc, #48]	; (1000add4 <gap_dev_connect+0x3c>)
1000ada4:	4b0c      	ldr	r3, [pc, #48]	; (1000add8 <gap_dev_connect+0x40>)
1000ada6:	4798      	blx	r3

	gap_conn_parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
1000ada8:	ab03      	add	r3, sp, #12
1000adaa:	2208      	movs	r2, #8
1000adac:	801a      	strh	r2, [r3, #0]
	gap_conn_parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
1000adae:	3202      	adds	r2, #2
1000adb0:	805a      	strh	r2, [r3, #2]
	gap_conn_parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
1000adb2:	3a06      	subs	r2, #6
1000adb4:	809a      	strh	r2, [r3, #4]
	gap_conn_parameter.ce_len_min = GAP_CE_LEN_MIN;
1000adb6:	2200      	movs	r2, #0
1000adb8:	811a      	strh	r2, [r3, #8]
	gap_conn_parameter.ce_len_max = GAP_CE_LEN_MAX;
1000adba:	815a      	strh	r2, [r3, #10]
	gap_conn_parameter.superv_to = GAP_SUPERVISION_TIMOUT;
1000adbc:	22fa      	movs	r2, #250	; 0xfa
1000adbe:	00d2      	lsls	r2, r2, #3
1000adc0:	80da      	strh	r2, [r3, #6]

	return (at_ble_connect(dev_addr, GAP_CONNECT_PEER_COUNT, SCAN_INTERVAL, SCAN_WINDOW, &gap_conn_parameter));
1000adc2:	9300      	str	r3, [sp, #0]
1000adc4:	2360      	movs	r3, #96	; 0x60
1000adc6:	2260      	movs	r2, #96	; 0x60
1000adc8:	2101      	movs	r1, #1
1000adca:	0020      	movs	r0, r4
1000adcc:	4c03      	ldr	r4, [pc, #12]	; (1000addc <gap_dev_connect+0x44>)
1000adce:	47a0      	blx	r4
}
1000add0:	b006      	add	sp, #24
1000add2:	bd10      	pop	{r4, pc}
1000add4:	10012f64 	.word	0x10012f64
1000add8:	1001025f 	.word	0x1001025f
1000addc:	1000d231 	.word	0x1000d231

1000ade0 <scan_info_parse>:
}

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
1000ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ade2:	465f      	mov	r7, fp
1000ade4:	4656      	mov	r6, sl
1000ade6:	464d      	mov	r5, r9
1000ade8:	4644      	mov	r4, r8
1000adea:	b4f0      	push	{r4, r5, r6, r7}
1000adec:	b087      	sub	sp, #28
1000adee:	4681      	mov	r9, r0
1000adf0:	9101      	str	r1, [sp, #4]
1000adf2:	4693      	mov	fp, r2
	if (scan_info_data->adv_data_len) {
1000adf4:	2327      	movs	r3, #39	; 0x27
1000adf6:	5cc6      	ldrb	r6, [r0, r3]
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000adf8:	20e2      	movs	r0, #226	; 0xe2

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
	if (scan_info_data->adv_data_len) {
1000adfa:	2e00      	cmp	r6, #0
1000adfc:	d062      	beq.n	1000aec4 <scan_info_parse+0xe4>
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
1000adfe:	2200      	movs	r2, #0
1000ae00:	ab04      	add	r3, sp, #16
1000ae02:	701a      	strb	r2, [r3, #0]
1000ae04:	2500      	movs	r5, #0
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000ae06:	2301      	movs	r3, #1
1000ae08:	425b      	negs	r3, r3
1000ae0a:	4698      	mov	r8, r3
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000ae0c:	000b      	movs	r3, r1
1000ae0e:	3301      	adds	r3, #1
1000ae10:	9300      	str	r3, [sp, #0]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000ae12:	4b30      	ldr	r3, [pc, #192]	; (1000aed4 <scan_info_parse+0xf4>)
1000ae14:	469a      	mov	sl, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
1000ae16:	464b      	mov	r3, r9
1000ae18:	195a      	adds	r2, r3, r5
1000ae1a:	7a11      	ldrb	r1, [r2, #8]
1000ae1c:	ab04      	add	r3, sp, #16
1000ae1e:	7019      	strb	r1, [r3, #0]
			adv_element_data.type
			= scan_info_data->adv_data[index + 1];
1000ae20:	7a52      	ldrb	r2, [r2, #9]
1000ae22:	705a      	strb	r2, [r3, #1]
			adv_element_data.data
			= &scan_info_data->adv_data[index + 2];
1000ae24:	002a      	movs	r2, r5
1000ae26:	320a      	adds	r2, #10
1000ae28:	444a      	add	r2, r9
1000ae2a:	9205      	str	r2, [sp, #20]
			adv_element_p = &adv_element_data;

			if (adv_element_p->type == adv_type) {
1000ae2c:	785b      	ldrb	r3, [r3, #1]
1000ae2e:	b2db      	uxtb	r3, r3
1000ae30:	455b      	cmp	r3, fp
1000ae32:	d136      	bne.n	1000aea2 <scan_info_parse+0xc2>
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
1000ae34:	ab04      	add	r3, sp, #16
1000ae36:	781c      	ldrb	r4, [r3, #0]
				/* actual size of the data	*/
				adv_type_size -= 1;
1000ae38:	3c01      	subs	r4, #1
1000ae3a:	b2e4      	uxtb	r4, r4
				while (adv_type_size) {
1000ae3c:	2c00      	cmp	r4, #0
1000ae3e:	d030      	beq.n	1000aea2 <scan_info_parse+0xc2>
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
1000ae40:	9b01      	ldr	r3, [sp, #4]
1000ae42:	781f      	ldrb	r7, [r3, #0]
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000ae44:	4643      	mov	r3, r8
1000ae46:	9303      	str	r3, [sp, #12]
					if (ble_service_uuid->type ==
1000ae48:	2f00      	cmp	r7, #0
1000ae4a:	d10a      	bne.n	1000ae62 <scan_info_parse+0x82>
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000ae4c:	9805      	ldr	r0, [sp, #20]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000ae4e:	2202      	movs	r2, #2
1000ae50:	9900      	ldr	r1, [sp, #0]
1000ae52:	47d0      	blx	sl
1000ae54:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_16_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
1000ae56:	9b05      	ldr	r3, [sp, #20]
1000ae58:	3302      	adds	r3, #2
1000ae5a:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
1000ae5c:	3c02      	subs	r4, #2
1000ae5e:	b2e4      	uxtb	r4, r4
1000ae60:	e01a      	b.n	1000ae98 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000ae62:	2f01      	cmp	r7, #1
1000ae64:	d10b      	bne.n	1000ae7e <scan_info_parse+0x9e>
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000ae66:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_16_LEN;
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
1000ae68:	2204      	movs	r2, #4
1000ae6a:	9900      	ldr	r1, [sp, #0]
1000ae6c:	4b19      	ldr	r3, [pc, #100]	; (1000aed4 <scan_info_parse+0xf4>)
1000ae6e:	4798      	blx	r3
1000ae70:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_32_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
1000ae72:	9b05      	ldr	r3, [sp, #20]
1000ae74:	3304      	adds	r3, #4
1000ae76:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000ae78:	3c04      	subs	r4, #4
1000ae7a:	b2e4      	uxtb	r4, r4
1000ae7c:	e00c      	b.n	1000ae98 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000ae7e:	2f02      	cmp	r7, #2
1000ae80:	d10a      	bne.n	1000ae98 <scan_info_parse+0xb8>
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000ae82:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000ae84:	2210      	movs	r2, #16
1000ae86:	9900      	ldr	r1, [sp, #0]
1000ae88:	4b12      	ldr	r3, [pc, #72]	; (1000aed4 <scan_info_parse+0xf4>)
1000ae8a:	4798      	blx	r3
1000ae8c:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_128_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
1000ae8e:	9b05      	ldr	r3, [sp, #20]
1000ae90:	3310      	adds	r3, #16
1000ae92:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000ae94:	3c04      	subs	r4, #4
1000ae96:	b2e4      	uxtb	r4, r4
					}

					if (cmp_status == 0) {
1000ae98:	9b03      	ldr	r3, [sp, #12]
1000ae9a:	2b00      	cmp	r3, #0
1000ae9c:	d011      	beq.n	1000aec2 <scan_info_parse+0xe2>
			if (adv_element_p->type == adv_type) {
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
1000ae9e:	2c00      	cmp	r4, #0
1000aea0:	d1d0      	bne.n	1000ae44 <scan_info_parse+0x64>
						return AT_BLE_SUCCESS;
					}
				}
			}

			index += (adv_element_data.len + 1);
1000aea2:	aa04      	add	r2, sp, #16
1000aea4:	7813      	ldrb	r3, [r2, #0]
1000aea6:	3301      	adds	r3, #1
1000aea8:	18ed      	adds	r5, r5, r3
1000aeaa:	b2ed      	uxtb	r5, r5
			adv_element_data.len += 1;
1000aeac:	7813      	ldrb	r3, [r2, #0]
1000aeae:	3301      	adds	r3, #1
1000aeb0:	b2db      	uxtb	r3, r3
1000aeb2:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
1000aeb4:	7813      	ldrb	r3, [r2, #0]
1000aeb6:	1af6      	subs	r6, r6, r3
1000aeb8:	b2f6      	uxtb	r6, r6
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
1000aeba:	2e00      	cmp	r6, #0
1000aebc:	d1ab      	bne.n	1000ae16 <scan_info_parse+0x36>
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000aebe:	20e2      	movs	r0, #226	; 0xe2
1000aec0:	e000      	b.n	1000aec4 <scan_info_parse+0xe4>
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					}

					if (cmp_status == 0) {
						return AT_BLE_SUCCESS;
1000aec2:	2000      	movs	r0, #0
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
}
1000aec4:	b007      	add	sp, #28
1000aec6:	bc3c      	pop	{r2, r3, r4, r5}
1000aec8:	4690      	mov	r8, r2
1000aeca:	4699      	mov	r9, r3
1000aecc:	46a2      	mov	sl, r4
1000aece:	46ab      	mov	fp, r5
1000aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aed2:	46c0      	nop			; (mov r8, r8)
1000aed4:	10010241 	.word	0x10010241

1000aed8 <ble_connected_device_role>:
	}
	return false;
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000aed8:	b530      	push	{r4, r5, lr}
1000aeda:	4a0d      	ldr	r2, [pc, #52]	; (1000af10 <ble_connected_device_role+0x38>)
1000aedc:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
1000aede:	001d      	movs	r5, r3
1000aee0:	0014      	movs	r4, r2
1000aee2:	345e      	adds	r4, #94	; 0x5e
1000aee4:	7824      	ldrb	r4, [r4, #0]
1000aee6:	2c01      	cmp	r4, #1
1000aee8:	d90b      	bls.n	1000af02 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000aeea:	8914      	ldrh	r4, [r2, #8]
1000aeec:	4284      	cmp	r4, r0
1000aeee:	d108      	bne.n	1000af02 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000aef0:	015b      	lsls	r3, r3, #5
1000aef2:	1b5d      	subs	r5, r3, r5
1000aef4:	00ad      	lsls	r5, r5, #2
1000aef6:	4b06      	ldr	r3, [pc, #24]	; (1000af10 <ble_connected_device_role+0x38>)
1000aef8:	195d      	adds	r5, r3, r5
1000aefa:	7cab      	ldrb	r3, [r5, #18]
1000aefc:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000aefe:	2000      	movs	r0, #0
			break;
1000af00:	e004      	b.n	1000af0c <ble_connected_device_role+0x34>
1000af02:	3301      	adds	r3, #1
1000af04:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af06:	2b05      	cmp	r3, #5
1000af08:	d1e9      	bne.n	1000aede <ble_connected_device_role+0x6>
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000af0a:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000af0c:	bd30      	pop	{r4, r5, pc}
1000af0e:	46c0      	nop			; (mov r8, r8)
1000af10:	100132c4 	.word	0x100132c4

1000af14 <ble_check_iscentral>:
	}
	return false;
}

bool ble_check_iscentral(at_ble_handle_t handle)
{
1000af14:	b500      	push	{lr}
1000af16:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
1000af18:	466b      	mov	r3, sp
1000af1a:	1dd9      	adds	r1, r3, #7
1000af1c:	2300      	movs	r3, #0
1000af1e:	700b      	strb	r3, [r1, #0]
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000af20:	4b07      	ldr	r3, [pc, #28]	; (1000af40 <ble_check_iscentral+0x2c>)
1000af22:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000af24:	2300      	movs	r3, #0

bool ble_check_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000af26:	2800      	cmp	r0, #0
1000af28:	d106      	bne.n	1000af38 <ble_check_iscentral+0x24>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000af2a:	466b      	mov	r3, sp
1000af2c:	3307      	adds	r3, #7
1000af2e:	781b      	ldrb	r3, [r3, #0]
1000af30:	3b05      	subs	r3, #5
1000af32:	4258      	negs	r0, r3
1000af34:	4143      	adcs	r3, r0
1000af36:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000af38:	0018      	movs	r0, r3
1000af3a:	b003      	add	sp, #12
1000af3c:	bd00      	pop	{pc}
1000af3e:	46c0      	nop			; (mov r8, r8)
1000af40:	1000aed9 	.word	0x1000aed9

1000af44 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000af46:	0004      	movs	r4, r0
1000af48:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000af4a:	4848      	ldr	r0, [pc, #288]	; (1000b06c <ble_event_manager+0x128>)
1000af4c:	4b48      	ldr	r3, [pc, #288]	; (1000b070 <ble_event_manager+0x12c>)
1000af4e:	4798      	blx	r3
1000af50:	0021      	movs	r1, r4
1000af52:	4848      	ldr	r0, [pc, #288]	; (1000b074 <ble_event_manager+0x130>)
1000af54:	4b48      	ldr	r3, [pc, #288]	; (1000b078 <ble_event_manager+0x134>)
1000af56:	4798      	blx	r3
	switch(events)
1000af58:	2c3b      	cmp	r4, #59	; 0x3b
1000af5a:	d879      	bhi.n	1000b050 <ble_event_manager+0x10c>
1000af5c:	00a3      	lsls	r3, r4, #2
1000af5e:	4a47      	ldr	r2, [pc, #284]	; (1000b07c <ble_event_manager+0x138>)
1000af60:	58d3      	ldr	r3, [r2, r3]
1000af62:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000af64:	00a4      	lsls	r4, r4, #2
1000af66:	2600      	movs	r6, #0
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000af68:	4f45      	ldr	r7, [pc, #276]	; (1000b080 <ble_event_manager+0x13c>)
1000af6a:	59bb      	ldr	r3, [r7, r6]
1000af6c:	2b00      	cmp	r3, #0
1000af6e:	d004      	beq.n	1000af7a <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000af70:	591b      	ldr	r3, [r3, r4]
1000af72:	2b00      	cmp	r3, #0
1000af74:	d001      	beq.n	1000af7a <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);
1000af76:	0028      	movs	r0, r5
1000af78:	4798      	blx	r3
1000af7a:	3604      	adds	r6, #4
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000af7c:	2e14      	cmp	r6, #20
1000af7e:	d1f4      	bne.n	1000af6a <ble_event_manager+0x26>
1000af80:	e072      	b.n	1000b068 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000af82:	3c13      	subs	r4, #19
1000af84:	b2e4      	uxtb	r4, r4
1000af86:	00a4      	lsls	r4, r4, #2
1000af88:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000af8a:	4f3e      	ldr	r7, [pc, #248]	; (1000b084 <ble_event_manager+0x140>)
1000af8c:	59bb      	ldr	r3, [r7, r6]
1000af8e:	2b00      	cmp	r3, #0
1000af90:	d004      	beq.n	1000af9c <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000af92:	591b      	ldr	r3, [r3, r4]
1000af94:	2b00      	cmp	r3, #0
1000af96:	d001      	beq.n	1000af9c <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000af98:	0028      	movs	r0, r5
1000af9a:	4798      	blx	r3
1000af9c:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000af9e:	2e14      	cmp	r6, #20
1000afa0:	d1f4      	bne.n	1000af8c <ble_event_manager+0x48>
1000afa2:	e061      	b.n	1000b068 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000afa4:	3c1d      	subs	r4, #29
1000afa6:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000afa8:	4830      	ldr	r0, [pc, #192]	; (1000b06c <ble_event_manager+0x128>)
1000afaa:	4b31      	ldr	r3, [pc, #196]	; (1000b070 <ble_event_manager+0x12c>)
1000afac:	4798      	blx	r3
1000afae:	0021      	movs	r1, r4
1000afb0:	4835      	ldr	r0, [pc, #212]	; (1000b088 <ble_event_manager+0x144>)
1000afb2:	4b31      	ldr	r3, [pc, #196]	; (1000b078 <ble_event_manager+0x134>)
1000afb4:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000afb6:	00a4      	lsls	r4, r4, #2
1000afb8:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000afba:	4f34      	ldr	r7, [pc, #208]	; (1000b08c <ble_event_manager+0x148>)
1000afbc:	59bb      	ldr	r3, [r7, r6]
1000afbe:	2b00      	cmp	r3, #0
1000afc0:	d004      	beq.n	1000afcc <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000afc2:	591b      	ldr	r3, [r3, r4]
1000afc4:	2b00      	cmp	r3, #0
1000afc6:	d001      	beq.n	1000afcc <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000afc8:	0028      	movs	r0, r5
1000afca:	4798      	blx	r3
1000afcc:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000afce:	2e14      	cmp	r6, #20
1000afd0:	d1f4      	bne.n	1000afbc <ble_event_manager+0x78>
1000afd2:	e049      	b.n	1000b068 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000afd4:	3c27      	subs	r4, #39	; 0x27
1000afd6:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000afd8:	4b2d      	ldr	r3, [pc, #180]	; (1000b090 <ble_event_manager+0x14c>)
1000afda:	681b      	ldr	r3, [r3, #0]
1000afdc:	2b00      	cmp	r3, #0
1000afde:	d043      	beq.n	1000b068 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000afe0:	00a4      	lsls	r4, r4, #2
1000afe2:	58e3      	ldr	r3, [r4, r3]
1000afe4:	2b00      	cmp	r3, #0
1000afe6:	d03f      	beq.n	1000b068 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000afe8:	0028      	movs	r0, r5
1000afea:	4798      	blx	r3
1000afec:	e03c      	b.n	1000b068 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000afee:	3c2d      	subs	r4, #45	; 0x2d
1000aff0:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000aff2:	4b28      	ldr	r3, [pc, #160]	; (1000b094 <ble_event_manager+0x150>)
1000aff4:	681b      	ldr	r3, [r3, #0]
1000aff6:	2b00      	cmp	r3, #0
1000aff8:	d036      	beq.n	1000b068 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000affa:	00a4      	lsls	r4, r4, #2
1000affc:	58e3      	ldr	r3, [r4, r3]
1000affe:	2b00      	cmp	r3, #0
1000b000:	d032      	beq.n	1000b068 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000b002:	0028      	movs	r0, r5
1000b004:	4798      	blx	r3
1000b006:	e02f      	b.n	1000b068 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b008:	3c36      	subs	r4, #54	; 0x36
1000b00a:	b2e4      	uxtb	r4, r4
1000b00c:	00a4      	lsls	r4, r4, #2
1000b00e:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000b010:	4f21      	ldr	r7, [pc, #132]	; (1000b098 <ble_event_manager+0x154>)
1000b012:	59bb      	ldr	r3, [r7, r6]
1000b014:	2b00      	cmp	r3, #0
1000b016:	d004      	beq.n	1000b022 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b018:	591b      	ldr	r3, [r3, r4]
1000b01a:	2b00      	cmp	r3, #0
1000b01c:	d001      	beq.n	1000b022 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000b01e:	0028      	movs	r0, r5
1000b020:	4798      	blx	r3
1000b022:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b024:	2e14      	cmp	r6, #20
1000b026:	d1f4      	bne.n	1000b012 <ble_event_manager+0xce>
1000b028:	e01e      	b.n	1000b068 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b02a:	3c38      	subs	r4, #56	; 0x38
1000b02c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b02e:	4b1b      	ldr	r3, [pc, #108]	; (1000b09c <ble_event_manager+0x158>)
1000b030:	681b      	ldr	r3, [r3, #0]
1000b032:	2b00      	cmp	r3, #0
1000b034:	d018      	beq.n	1000b068 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b036:	00a4      	lsls	r4, r4, #2
1000b038:	58e3      	ldr	r3, [r4, r3]
1000b03a:	2b00      	cmp	r3, #0
1000b03c:	d014      	beq.n	1000b068 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000b03e:	0028      	movs	r0, r5
1000b040:	4798      	blx	r3
1000b042:	e011      	b.n	1000b068 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000b044:	4b16      	ldr	r3, [pc, #88]	; (1000b0a0 <ble_event_manager+0x15c>)
1000b046:	681b      	ldr	r3, [r3, #0]
1000b048:	2b00      	cmp	r3, #0
1000b04a:	d00d      	beq.n	1000b068 <ble_event_manager+0x124>
			ble_user_event_cb();
1000b04c:	4798      	blx	r3
1000b04e:	e00b      	b.n	1000b068 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000b050:	4e06      	ldr	r6, [pc, #24]	; (1000b06c <ble_event_manager+0x128>)
1000b052:	0030      	movs	r0, r6
1000b054:	4d06      	ldr	r5, [pc, #24]	; (1000b070 <ble_event_manager+0x12c>)
1000b056:	47a8      	blx	r5
1000b058:	0021      	movs	r1, r4
1000b05a:	4812      	ldr	r0, [pc, #72]	; (1000b0a4 <ble_event_manager+0x160>)
1000b05c:	4b06      	ldr	r3, [pc, #24]	; (1000b078 <ble_event_manager+0x134>)
1000b05e:	4798      	blx	r3
		DBG_LOG("\r\n");
1000b060:	0030      	movs	r0, r6
1000b062:	47a8      	blx	r5
1000b064:	0030      	movs	r0, r6
1000b066:	47a8      	blx	r5
	}
	break;		
	}
}
1000b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b06a:	46c0      	nop			; (mov r8, r8)
1000b06c:	10011744 	.word	0x10011744
1000b070:	100103a1 	.word	0x100103a1
1000b074:	100126b0 	.word	0x100126b0
1000b078:	10010281 	.word	0x10010281
1000b07c:	10011c98 	.word	0x10011c98
1000b080:	10013548 	.word	0x10013548
1000b084:	1001355c 	.word	0x1001355c
1000b088:	100126c0 	.word	0x100126c0
1000b08c:	100132b0 	.word	0x100132b0
1000b090:	10013594 	.word	0x10013594
1000b094:	100132ac 	.word	0x100132ac
1000b098:	10013534 	.word	0x10013534
1000b09c:	10013ad8 	.word	0x10013ad8
1000b0a0:	10012f5c 	.word	0x10012f5c
1000b0a4:	100126d8 	.word	0x100126d8

1000b0a8 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b0a8:	b510      	push	{r4, lr}
1000b0aa:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000b0ac:	4906      	ldr	r1, [pc, #24]	; (1000b0c8 <ble_event_task+0x20>)
1000b0ae:	4807      	ldr	r0, [pc, #28]	; (1000b0cc <ble_event_task+0x24>)
1000b0b0:	4b07      	ldr	r3, [pc, #28]	; (1000b0d0 <ble_event_task+0x28>)
1000b0b2:	4798      	blx	r3
1000b0b4:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000b0b6:	d104      	bne.n	1000b0c2 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000b0b8:	4b04      	ldr	r3, [pc, #16]	; (1000b0cc <ble_event_task+0x24>)
1000b0ba:	7818      	ldrb	r0, [r3, #0]
1000b0bc:	4902      	ldr	r1, [pc, #8]	; (1000b0c8 <ble_event_task+0x20>)
1000b0be:	4b05      	ldr	r3, [pc, #20]	; (1000b0d4 <ble_event_task+0x2c>)
1000b0c0:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000b0c2:	0020      	movs	r0, r4
1000b0c4:	bd10      	pop	{r4, pc}
1000b0c6:	46c0      	nop			; (mov r8, r8)
1000b0c8:	100138cc 	.word	0x100138cc
1000b0cc:	10013590 	.word	0x10013590
1000b0d0:	1000c87d 	.word	0x1000c87d
1000b0d4:	1000af45 	.word	0x1000af45

1000b0d8 <button_init>:
#include <asf.h>
#include "button.h"

void button_init(button_callback_t callback)
{
1000b0d8:	b530      	push	{r4, r5, lr}
1000b0da:	b083      	sub	sp, #12
1000b0dc:	0005      	movs	r5, r0
	struct gpio_config config_gpio_pin;

	gpio_get_config_defaults(&config_gpio_pin);
1000b0de:	ac01      	add	r4, sp, #4
1000b0e0:	0020      	movs	r0, r4
1000b0e2:	4b0a      	ldr	r3, [pc, #40]	; (1000b10c <button_init+0x34>)
1000b0e4:	4798      	blx	r3

	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000b0e6:	2300      	movs	r3, #0
1000b0e8:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000b0ea:	7063      	strb	r3, [r4, #1]

	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000b0ec:	0021      	movs	r1, r4
1000b0ee:	2017      	movs	r0, #23
1000b0f0:	4b07      	ldr	r3, [pc, #28]	; (1000b110 <button_init+0x38>)
1000b0f2:	4798      	blx	r3
	gpio_init();
1000b0f4:	4b07      	ldr	r3, [pc, #28]	; (1000b114 <button_init+0x3c>)
1000b0f6:	4798      	blx	r3
	gpio_register_callback(BUTTON_0_PIN, callback, GPIO_CALLBACK_RISING);
1000b0f8:	2202      	movs	r2, #2
1000b0fa:	0029      	movs	r1, r5
1000b0fc:	2017      	movs	r0, #23
1000b0fe:	4b06      	ldr	r3, [pc, #24]	; (1000b118 <button_init+0x40>)
1000b100:	4798      	blx	r3
	gpio_enable_callback(BUTTON_0_PIN);
1000b102:	2017      	movs	r0, #23
1000b104:	4b05      	ldr	r3, [pc, #20]	; (1000b11c <button_init+0x44>)
1000b106:	4798      	blx	r3
}
1000b108:	b003      	add	sp, #12
1000b10a:	bd30      	pop	{r4, r5, pc}
1000b10c:	1000824d 	.word	0x1000824d
1000b110:	1000825d 	.word	0x1000825d
1000b114:	100086b1 	.word	0x100086b1
1000b118:	1000856d 	.word	0x1000856d
1000b11c:	10008675 	.word	0x10008675

1000b120 <uart_read_complete_callback>:
void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	read_complete_flag = true;
1000b120:	2201      	movs	r2, #1
1000b122:	4b01      	ldr	r3, [pc, #4]	; (1000b128 <uart_read_complete_callback+0x8>)
1000b124:	701a      	strb	r2, [r3, #0]
}
1000b126:	4770      	bx	lr
1000b128:	10012f6b 	.word	0x10012f6b

1000b12c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000b12c:	b570      	push	{r4, r5, r6, lr}
1000b12e:	0006      	movs	r6, r0
1000b130:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000b132:	4c03      	ldr	r4, [pc, #12]	; (1000b140 <usart_serial_getchar+0x14>)
1000b134:	0029      	movs	r1, r5
1000b136:	0030      	movs	r0, r6
1000b138:	47a0      	blx	r4
1000b13a:	2800      	cmp	r0, #0
1000b13c:	d1fa      	bne.n	1000b134 <usart_serial_getchar+0x8>
}
1000b13e:	bd70      	pop	{r4, r5, r6, pc}
1000b140:	10009a01 	.word	0x10009a01

1000b144 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000b144:	b570      	push	{r4, r5, r6, lr}
1000b146:	0006      	movs	r6, r0
1000b148:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000b14a:	4c03      	ldr	r4, [pc, #12]	; (1000b158 <usart_serial_putchar+0x14>)
1000b14c:	0029      	movs	r1, r5
1000b14e:	0030      	movs	r0, r6
1000b150:	47a0      	blx	r4
1000b152:	2800      	cmp	r0, #0
1000b154:	d1fa      	bne.n	1000b14c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000b156:	bd70      	pop	{r4, r5, r6, pc}
1000b158:	100099f1 	.word	0x100099f1

1000b15c <serial_console_init>:

void serial_console_init(void)
{
1000b15c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000b15e:	2100      	movs	r1, #0
1000b160:	2000      	movs	r0, #0
1000b162:	4b16      	ldr	r3, [pc, #88]	; (1000b1bc <serial_console_init+0x60>)
1000b164:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000b166:	4c16      	ldr	r4, [pc, #88]	; (1000b1c0 <serial_console_init+0x64>)
1000b168:	0020      	movs	r0, r4
1000b16a:	4b16      	ldr	r3, [pc, #88]	; (1000b1c4 <serial_console_init+0x68>)
1000b16c:	4798      	blx	r3

	config_uart.baud_rate = 115200;
1000b16e:	23e1      	movs	r3, #225	; 0xe1
1000b170:	025b      	lsls	r3, r3, #9
1000b172:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000b174:	2302      	movs	r3, #2
1000b176:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000b178:	2203      	movs	r2, #3
1000b17a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000b17c:	3201      	adds	r2, #1
1000b17e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000b180:	3201      	adds	r2, #1
1000b182:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000b184:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000b186:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000b188:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000b18a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000b18c:	480e      	ldr	r0, [pc, #56]	; (1000b1c8 <serial_console_init+0x6c>)
1000b18e:	4b0f      	ldr	r3, [pc, #60]	; (1000b1cc <serial_console_init+0x70>)
1000b190:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000b192:	4a0f      	ldr	r2, [pc, #60]	; (1000b1d0 <serial_console_init+0x74>)
1000b194:	4b0f      	ldr	r3, [pc, #60]	; (1000b1d4 <serial_console_init+0x78>)
1000b196:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000b198:	4a0f      	ldr	r2, [pc, #60]	; (1000b1d8 <serial_console_init+0x7c>)
1000b19a:	4b10      	ldr	r3, [pc, #64]	; (1000b1dc <serial_console_init+0x80>)
1000b19c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000b19e:	0022      	movs	r2, r4
1000b1a0:	490f      	ldr	r1, [pc, #60]	; (1000b1e0 <serial_console_init+0x84>)
1000b1a2:	4b10      	ldr	r3, [pc, #64]	; (1000b1e4 <serial_console_init+0x88>)
1000b1a4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000b1a6:	4d10      	ldr	r5, [pc, #64]	; (1000b1e8 <serial_console_init+0x8c>)
1000b1a8:	682b      	ldr	r3, [r5, #0]
1000b1aa:	6898      	ldr	r0, [r3, #8]
1000b1ac:	2100      	movs	r1, #0
1000b1ae:	4c0f      	ldr	r4, [pc, #60]	; (1000b1ec <serial_console_init+0x90>)
1000b1b0:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000b1b2:	682b      	ldr	r3, [r5, #0]
1000b1b4:	6858      	ldr	r0, [r3, #4]
1000b1b6:	2100      	movs	r1, #0
1000b1b8:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
}
1000b1ba:	bd70      	pop	{r4, r5, r6, pc}
1000b1bc:	10008a31 	.word	0x10008a31
1000b1c0:	10013b00 	.word	0x10013b00
1000b1c4:	10009829 	.word	0x10009829
1000b1c8:	10013adc 	.word	0x10013adc
1000b1cc:	10013280 	.word	0x10013280
1000b1d0:	1000b145 	.word	0x1000b145
1000b1d4:	1001327c 	.word	0x1001327c
1000b1d8:	1000b12d 	.word	0x1000b12d
1000b1dc:	10013278 	.word	0x10013278
1000b1e0:	40004000 	.word	0x40004000
1000b1e4:	10009855 	.word	0x10009855
1000b1e8:	10012f20 	.word	0x10012f20
1000b1ec:	1001042d 	.word	0x1001042d

1000b1f0 <_time_start>:

void _time_start(unsigned int sec)
{
1000b1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b1f2:	b083      	sub	sp, #12
1000b1f4:	0005      	movs	r5, r0
	system_clock_get_value();
1000b1f6:	4c0d      	ldr	r4, [pc, #52]	; (1000b22c <_time_start+0x3c>)
1000b1f8:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000b1fa:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000b1fc:	4f0c      	ldr	r7, [pc, #48]	; (1000b230 <_time_start+0x40>)
1000b1fe:	47b8      	blx	r7
1000b200:	4e0c      	ldr	r6, [pc, #48]	; (1000b234 <_time_start+0x44>)
1000b202:	4a0d      	ldr	r2, [pc, #52]	; (1000b238 <_time_start+0x48>)
1000b204:	4b0d      	ldr	r3, [pc, #52]	; (1000b23c <_time_start+0x4c>)
1000b206:	47b0      	blx	r6
1000b208:	9000      	str	r0, [sp, #0]
1000b20a:	9101      	str	r1, [sp, #4]
1000b20c:	20fa      	movs	r0, #250	; 0xfa
1000b20e:	0080      	lsls	r0, r0, #2
1000b210:	4368      	muls	r0, r5
1000b212:	47b8      	blx	r7
1000b214:	0002      	movs	r2, r0
1000b216:	000b      	movs	r3, r1
1000b218:	9800      	ldr	r0, [sp, #0]
1000b21a:	9901      	ldr	r1, [sp, #4]
1000b21c:	47b0      	blx	r6
1000b21e:	4b08      	ldr	r3, [pc, #32]	; (1000b240 <_time_start+0x50>)
1000b220:	4798      	blx	r3
1000b222:	4b08      	ldr	r3, [pc, #32]	; (1000b244 <_time_start+0x54>)
1000b224:	6018      	str	r0, [r3, #0]
}
1000b226:	b003      	add	sp, #12
1000b228:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b22a:	46c0      	nop			; (mov r8, r8)
1000b22c:	10008ab5 	.word	0x10008ab5
1000b230:	1000feb1 	.word	0x1000feb1
1000b234:	1000f2a9 	.word	0x1000f2a9
1000b238:	19feaec7 	.word	0x19feaec7
1000b23c:	3f09d8ef 	.word	0x3f09d8ef
1000b240:	1000f26d 	.word	0x1000f26d
1000b244:	10012f6c 	.word	0x10012f6c

1000b248 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000b248:	4b02      	ldr	r3, [pc, #8]	; (1000b254 <_time_done+0xc>)
1000b24a:	681a      	ldr	r2, [r3, #0]
1000b24c:	1e50      	subs	r0, r2, #1
1000b24e:	6018      	str	r0, [r3, #0]
}
1000b250:	4770      	bx	lr
1000b252:	46c0      	nop			; (mov r8, r8)
1000b254:	10012f6c 	.word	0x10012f6c

1000b258 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000b258:	b570      	push	{r4, r5, r6, lr}
	
	read_complete_flag = false;
1000b25a:	2400      	movs	r4, #0
1000b25c:	4b16      	ldr	r3, [pc, #88]	; (1000b2b8 <getchar_b11_timeout+0x60>)
1000b25e:	701c      	strb	r4, [r3, #0]
	_time_start(sec);
1000b260:	4b16      	ldr	r3, [pc, #88]	; (1000b2bc <getchar_b11_timeout+0x64>)
1000b262:	4798      	blx	r3
	
	string_input[0] = 0;
1000b264:	4d16      	ldr	r5, [pc, #88]	; (1000b2c0 <getchar_b11_timeout+0x68>)
1000b266:	702c      	strb	r4, [r5, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000b268:	4c16      	ldr	r4, [pc, #88]	; (1000b2c4 <getchar_b11_timeout+0x6c>)
1000b26a:	2202      	movs	r2, #2
1000b26c:	4916      	ldr	r1, [pc, #88]	; (1000b2c8 <getchar_b11_timeout+0x70>)
1000b26e:	0020      	movs	r0, r4
1000b270:	4b16      	ldr	r3, [pc, #88]	; (1000b2cc <getchar_b11_timeout+0x74>)
1000b272:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000b274:	2102      	movs	r1, #2
1000b276:	0020      	movs	r0, r4
1000b278:	4b15      	ldr	r3, [pc, #84]	; (1000b2d0 <getchar_b11_timeout+0x78>)
1000b27a:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b27c:	2201      	movs	r2, #1
1000b27e:	0029      	movs	r1, r5
1000b280:	0020      	movs	r0, r4
1000b282:	4b14      	ldr	r3, [pc, #80]	; (1000b2d4 <getchar_b11_timeout+0x7c>)
1000b284:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
1000b286:	4c0c      	ldr	r4, [pc, #48]	; (1000b2b8 <getchar_b11_timeout+0x60>)
1000b288:	4d13      	ldr	r5, [pc, #76]	; (1000b2d8 <getchar_b11_timeout+0x80>)
1000b28a:	7823      	ldrb	r3, [r4, #0]
1000b28c:	2b00      	cmp	r3, #0
1000b28e:	d102      	bne.n	1000b296 <getchar_b11_timeout+0x3e>
1000b290:	47a8      	blx	r5
1000b292:	2800      	cmp	r0, #0
1000b294:	d1f9      	bne.n	1000b28a <getchar_b11_timeout+0x32>
	
	if( tick == 0 )
1000b296:	4b11      	ldr	r3, [pc, #68]	; (1000b2dc <getchar_b11_timeout+0x84>)
1000b298:	681b      	ldr	r3, [r3, #0]
1000b29a:	2b00      	cmp	r3, #0
1000b29c:	d108      	bne.n	1000b2b0 <getchar_b11_timeout+0x58>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
1000b29e:	4c09      	ldr	r4, [pc, #36]	; (1000b2c4 <getchar_b11_timeout+0x6c>)
1000b2a0:	2102      	movs	r1, #2
1000b2a2:	0020      	movs	r0, r4
1000b2a4:	4b0e      	ldr	r3, [pc, #56]	; (1000b2e0 <getchar_b11_timeout+0x88>)
1000b2a6:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000b2a8:	2102      	movs	r1, #2
1000b2aa:	0020      	movs	r0, r4
1000b2ac:	4b0d      	ldr	r3, [pc, #52]	; (1000b2e4 <getchar_b11_timeout+0x8c>)
1000b2ae:	4798      	blx	r3
	}
	return string_input[0];
1000b2b0:	4b03      	ldr	r3, [pc, #12]	; (1000b2c0 <getchar_b11_timeout+0x68>)
1000b2b2:	7818      	ldrb	r0, [r3, #0]
}
1000b2b4:	bd70      	pop	{r4, r5, r6, pc}
1000b2b6:	46c0      	nop			; (mov r8, r8)
1000b2b8:	10012f6b 	.word	0x10012f6b
1000b2bc:	1000b1f1 	.word	0x1000b1f1
1000b2c0:	10012f70 	.word	0x10012f70
1000b2c4:	10013adc 	.word	0x10013adc
1000b2c8:	1000b121 	.word	0x1000b121
1000b2cc:	10009a3d 	.word	0x10009a3d
1000b2d0:	10009a69 	.word	0x10009a69
1000b2d4:	10009a15 	.word	0x10009a15
1000b2d8:	1000b249 	.word	0x1000b249
1000b2dc:	10012f6c 	.word	0x10012f6c
1000b2e0:	10009a51 	.word	0x10009a51
1000b2e4:	10009a89 	.word	0x10009a89

1000b2e8 <dualtimer_callback2>:
#include "conf_dualtimer.h"

extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
1000b2e8:	b510      	push	{r4, lr}
	puts("Timer2 trigger\r\n");
1000b2ea:	4802      	ldr	r0, [pc, #8]	; (1000b2f4 <dualtimer_callback2+0xc>)
1000b2ec:	4b02      	ldr	r3, [pc, #8]	; (1000b2f8 <dualtimer_callback2+0x10>)
1000b2ee:	4798      	blx	r3
}
1000b2f0:	bd10      	pop	{r4, pc}
1000b2f2:	46c0      	nop			; (mov r8, r8)
1000b2f4:	1001278c 	.word	0x1001278c
1000b2f8:	100103a1 	.word	0x100103a1

1000b2fc <hw_timer_register_callback>:

	dualtimer_init(&config_dualtimer);
}

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000b2fc:	b510      	push	{r4, lr}
1000b2fe:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000b300:	2000      	movs	r0, #0
1000b302:	4c07      	ldr	r4, [pc, #28]	; (1000b320 <hw_timer_register_callback+0x24>)
1000b304:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000b306:	4907      	ldr	r1, [pc, #28]	; (1000b324 <hw_timer_register_callback+0x28>)
1000b308:	2001      	movs	r0, #1
1000b30a:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000b30c:	2000      	movs	r0, #0
1000b30e:	4c06      	ldr	r4, [pc, #24]	; (1000b328 <hw_timer_register_callback+0x2c>)
1000b310:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000b312:	2001      	movs	r0, #1
1000b314:	47a0      	blx	r4
1000b316:	2280      	movs	r2, #128	; 0x80
1000b318:	01d2      	lsls	r2, r2, #7
1000b31a:	4b04      	ldr	r3, [pc, #16]	; (1000b32c <hw_timer_register_callback+0x30>)
1000b31c:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b31e:	bd10      	pop	{r4, pc}
1000b320:	10008159 	.word	0x10008159
1000b324:	1000b2e9 	.word	0x1000b2e9
1000b328:	10008135 	.word	0x10008135
1000b32c:	e000e100 	.word	0xe000e100

1000b330 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000b330:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000b332:	2800      	cmp	r0, #0
1000b334:	d100      	bne.n	1000b338 <hw_timer_start+0x8>
		delay = 1;
1000b336:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000b338:	4b05      	ldr	r3, [pc, #20]	; (1000b350 <hw_timer_start+0x20>)
1000b33a:	4343      	muls	r3, r0
1000b33c:	001a      	movs	r2, r3
1000b33e:	2100      	movs	r1, #0
1000b340:	2000      	movs	r0, #0
1000b342:	4b04      	ldr	r3, [pc, #16]	; (1000b354 <hw_timer_start+0x24>)
1000b344:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000b346:	2000      	movs	r0, #0
1000b348:	4b03      	ldr	r3, [pc, #12]	; (1000b358 <hw_timer_start+0x28>)
1000b34a:	4798      	blx	r3
}
1000b34c:	bd10      	pop	{r4, pc}
1000b34e:	46c0      	nop			; (mov r8, r8)
1000b350:	018cba80 	.word	0x018cba80
1000b354:	100080e9 	.word	0x100080e9
1000b358:	10008111 	.word	0x10008111

1000b35c <hw_timer_stop>:

void hw_timer_stop(void)
{
1000b35c:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000b35e:	2000      	movs	r0, #0
1000b360:	4b01      	ldr	r3, [pc, #4]	; (1000b368 <hw_timer_stop+0xc>)
1000b362:	4798      	blx	r3
}
1000b364:	bd10      	pop	{r4, pc}
1000b366:	46c0      	nop			; (mov r8, r8)
1000b368:	10008135 	.word	0x10008135

1000b36c <platform_event_free>:
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b36c:	4b02      	ldr	r3, [pc, #8]	; (1000b378 <platform_event_free+0xc>)
1000b36e:	681a      	ldr	r2, [r3, #0]
1000b370:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b372:	6018      	str	r0, [r3, #0]
}
1000b374:	4770      	bx	lr
1000b376:	46c0      	nop			; (mov r8, r8)
1000b378:	10012f78 	.word	0x10012f78

1000b37c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b37c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b37e:	4b0b      	ldr	r3, [pc, #44]	; (1000b3ac <platform_event_post+0x30>)
1000b380:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b382:	2c00      	cmp	r4, #0
1000b384:	d011      	beq.n	1000b3aa <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b386:	6825      	ldr	r5, [r4, #0]
1000b388:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b38a:	2300      	movs	r3, #0
1000b38c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b38e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b390:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b392:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b394:	4b06      	ldr	r3, [pc, #24]	; (1000b3b0 <platform_event_post+0x34>)
1000b396:	681a      	ldr	r2, [r3, #0]
1000b398:	2a00      	cmp	r2, #0
1000b39a:	d102      	bne.n	1000b3a2 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b39c:	601c      	str	r4, [r3, #0]
1000b39e:	e004      	b.n	1000b3aa <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b3a0:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b3a2:	6813      	ldr	r3, [r2, #0]
1000b3a4:	2b00      	cmp	r3, #0
1000b3a6:	d1fb      	bne.n	1000b3a0 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b3a8:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b3aa:	bd30      	pop	{r4, r5, pc}
1000b3ac:	10012f78 	.word	0x10012f78
1000b3b0:	10012f74 	.word	0x10012f74

1000b3b4 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b3b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b3b6:	2300      	movs	r3, #0
1000b3b8:	4a06      	ldr	r2, [pc, #24]	; (1000b3d4 <platform_event_init+0x20>)
1000b3ba:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b3bc:	4a06      	ldr	r2, [pc, #24]	; (1000b3d8 <platform_event_init+0x24>)
1000b3be:	6013      	str	r3, [r2, #0]
1000b3c0:	4c06      	ldr	r4, [pc, #24]	; (1000b3dc <platform_event_init+0x28>)
1000b3c2:	0026      	movs	r6, r4
1000b3c4:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b3c6:	4d06      	ldr	r5, [pc, #24]	; (1000b3e0 <platform_event_init+0x2c>)
1000b3c8:	0020      	movs	r0, r4
1000b3ca:	47a8      	blx	r5
1000b3cc:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b3ce:	42b4      	cmp	r4, r6
1000b3d0:	d1fa      	bne.n	1000b3c8 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b3d2:	bd70      	pop	{r4, r5, r6, pc}
1000b3d4:	10012f78 	.word	0x10012f78
1000b3d8:	10012f74 	.word	0x10012f74
1000b3dc:	10012f7c 	.word	0x10012f7c
1000b3e0:	1000b36d 	.word	0x1000b36d

1000b3e4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b3e4:	b510      	push	{r4, lr}
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b3e6:	4b11      	ldr	r3, [pc, #68]	; (1000b42c <at_ke_msg_send+0x48>)
1000b3e8:	681c      	ldr	r4, [r3, #0]
	ke_msg_send(param_ptr);
1000b3ea:	4b11      	ldr	r3, [pc, #68]	; (1000b430 <at_ke_msg_send+0x4c>)
1000b3ec:	681b      	ldr	r3, [r3, #0]
1000b3ee:	4798      	blx	r3
	if(osc_en == 0)
1000b3f0:	07e3      	lsls	r3, r4, #31
1000b3f2:	d414      	bmi.n	1000b41e <at_ke_msg_send+0x3a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000b3f4:	4b0f      	ldr	r3, [pc, #60]	; (1000b434 <at_ke_msg_send+0x50>)
1000b3f6:	681b      	ldr	r3, [r3, #0]
1000b3f8:	2002      	movs	r0, #2
1000b3fa:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000b3fc:	4b0e      	ldr	r3, [pc, #56]	; (1000b438 <at_ke_msg_send+0x54>)
1000b3fe:	681b      	ldr	r3, [r3, #0]
1000b400:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000b402:	4c0e      	ldr	r4, [pc, #56]	; (1000b43c <at_ke_msg_send+0x58>)
1000b404:	2003      	movs	r0, #3
1000b406:	6823      	ldr	r3, [r4, #0]
1000b408:	4798      	blx	r3
1000b40a:	2800      	cmp	r0, #0
1000b40c:	d1fa      	bne.n	1000b404 <at_ke_msg_send+0x20>
		pwr_disable_arm_wakeup(1<<1);
1000b40e:	4b0c      	ldr	r3, [pc, #48]	; (1000b440 <at_ke_msg_send+0x5c>)
1000b410:	681b      	ldr	r3, [r3, #0]
1000b412:	3002      	adds	r0, #2
1000b414:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000b416:	2201      	movs	r2, #1
1000b418:	4b0a      	ldr	r3, [pc, #40]	; (1000b444 <at_ke_msg_send+0x60>)
1000b41a:	601a      	str	r2, [r3, #0]
1000b41c:	e004      	b.n	1000b428 <at_ke_msg_send+0x44>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
1000b41e:	4b0a      	ldr	r3, [pc, #40]	; (1000b448 <at_ke_msg_send+0x64>)
1000b420:	6818      	ldr	r0, [r3, #0]
1000b422:	4b0a      	ldr	r3, [pc, #40]	; (1000b44c <at_ke_msg_send+0x68>)
1000b424:	681b      	ldr	r3, [r3, #0]
1000b426:	4798      	blx	r3
	}
}
1000b428:	bd10      	pop	{r4, pc}
1000b42a:	46c0      	nop			; (mov r8, r8)
1000b42c:	4000b1ec 	.word	0x4000b1ec
1000b430:	10013020 	.word	0x10013020
1000b434:	10013018 	.word	0x10013018
1000b438:	10013030 	.word	0x10013030
1000b43c:	10013004 	.word	0x10013004
1000b440:	1001300c 	.word	0x1001300c
1000b444:	4000b020 	.word	0x4000b020
1000b448:	10013010 	.word	0x10013010
1000b44c:	10013000 	.word	0x10013000

1000b450 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b450:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b452:	4b06      	ldr	r3, [pc, #24]	; (1000b46c <samb11_plf_resume_callback+0x1c>)
1000b454:	4a06      	ldr	r2, [pc, #24]	; (1000b470 <samb11_plf_resume_callback+0x20>)
1000b456:	6819      	ldr	r1, [r3, #0]
1000b458:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b45a:	685a      	ldr	r2, [r3, #4]
1000b45c:	4b05      	ldr	r3, [pc, #20]	; (1000b474 <samb11_plf_resume_callback+0x24>)
1000b45e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b460:	4b05      	ldr	r3, [pc, #20]	; (1000b478 <samb11_plf_resume_callback+0x28>)
1000b462:	681b      	ldr	r3, [r3, #0]
1000b464:	2b00      	cmp	r3, #0
1000b466:	d000      	beq.n	1000b46a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b468:	4798      	blx	r3
	}
}
1000b46a:	bd10      	pop	{r4, pc}
1000b46c:	10013b28 	.word	0x10013b28
1000b470:	4000b00c 	.word	0x4000b00c
1000b474:	4000b010 	.word	0x4000b010
1000b478:	10013dfc 	.word	0x10013dfc

1000b47c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b47c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b47e:	2232      	movs	r2, #50	; 0x32
1000b480:	2100      	movs	r1, #0
1000b482:	480f      	ldr	r0, [pc, #60]	; (1000b4c0 <init_port_list+0x44>)
1000b484:	4b0f      	ldr	r3, [pc, #60]	; (1000b4c4 <init_port_list+0x48>)
1000b486:	4798      	blx	r3
1000b488:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b48a:	480d      	ldr	r0, [pc, #52]	; (1000b4c0 <init_port_list+0x44>)
		port_list[i].bit.available = 1;
1000b48c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b48e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b490:	004a      	lsls	r2, r1, #1
1000b492:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b494:	1882      	adds	r2, r0, r2
1000b496:	7853      	ldrb	r3, [r2, #1]
1000b498:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b49a:	b2db      	uxtb	r3, r3
1000b49c:	43a3      	bics	r3, r4
1000b49e:	7053      	strb	r3, [r2, #1]
1000b4a0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b4a2:	2919      	cmp	r1, #25
1000b4a4:	d1f4      	bne.n	1000b490 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b4a6:	4b06      	ldr	r3, [pc, #24]	; (1000b4c0 <init_port_list+0x44>)
1000b4a8:	785a      	ldrb	r2, [r3, #1]
1000b4aa:	3918      	subs	r1, #24
1000b4ac:	438a      	bics	r2, r1
1000b4ae:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b4b0:	78da      	ldrb	r2, [r3, #3]
1000b4b2:	438a      	bics	r2, r1
1000b4b4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1000b4b6:	7f5a      	ldrb	r2, [r3, #29]
1000b4b8:	438a      	bics	r2, r1
1000b4ba:	775a      	strb	r2, [r3, #29]
}
1000b4bc:	bd70      	pop	{r4, r5, r6, pc}
1000b4be:	46c0      	nop			; (mov r8, r8)
1000b4c0:	10013b40 	.word	0x10013b40
1000b4c4:	10010271 	.word	0x10010271

1000b4c8 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b4c8:	4a06      	ldr	r2, [pc, #24]	; (1000b4e4 <init_clock+0x1c>)
1000b4ca:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b4cc:	4b06      	ldr	r3, [pc, #24]	; (1000b4e8 <init_clock+0x20>)
1000b4ce:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b4d0:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b4d2:	4a06      	ldr	r2, [pc, #24]	; (1000b4ec <init_clock+0x24>)
1000b4d4:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b4d6:	4906      	ldr	r1, [pc, #24]	; (1000b4f0 <init_clock+0x28>)
1000b4d8:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b4da:	4b06      	ldr	r3, [pc, #24]	; (1000b4f4 <init_clock+0x2c>)
1000b4dc:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b4de:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b4e0:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b4e2:	4770      	bx	lr
1000b4e4:	4000b00c 	.word	0x4000b00c
1000b4e8:	fffe0fd3 	.word	0xfffe0fd3
1000b4ec:	10013b28 	.word	0x10013b28
1000b4f0:	4000b010 	.word	0x4000b010
1000b4f4:	ffffe7c0 	.word	0xffffe7c0

1000b4f8 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b4fa:	464f      	mov	r7, r9
1000b4fc:	4646      	mov	r6, r8
1000b4fe:	b4c0      	push	{r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b500:	4b44      	ldr	r3, [pc, #272]	; (1000b614 <platform_driver_init+0x11c>)
1000b502:	781b      	ldrb	r3, [r3, #0]
1000b504:	2b00      	cmp	r3, #0
1000b506:	d003      	beq.n	1000b510 <platform_driver_init+0x18>
1000b508:	4b42      	ldr	r3, [pc, #264]	; (1000b614 <platform_driver_init+0x11c>)
1000b50a:	781b      	ldrb	r3, [r3, #0]
1000b50c:	2b01      	cmp	r3, #1
1000b50e:	d079      	beq.n	1000b604 <platform_driver_init+0x10c>
		init_port_list();
1000b510:	4b41      	ldr	r3, [pc, #260]	; (1000b618 <platform_driver_init+0x120>)
1000b512:	4798      	blx	r3
		init_clock();
1000b514:	4b41      	ldr	r3, [pc, #260]	; (1000b61c <platform_driver_init+0x124>)
1000b516:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b518:	2700      	movs	r7, #0
1000b51a:	4b41      	ldr	r3, [pc, #260]	; (1000b620 <platform_driver_init+0x128>)
1000b51c:	601f      	str	r7, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b51e:	4c41      	ldr	r4, [pc, #260]	; (1000b624 <platform_driver_init+0x12c>)
1000b520:	2380      	movs	r3, #128	; 0x80
1000b522:	2280      	movs	r2, #128	; 0x80
1000b524:	0412      	lsls	r2, r2, #16
1000b526:	4691      	mov	r9, r2
1000b528:	50e2      	str	r2, [r4, r3]
1000b52a:	2280      	movs	r2, #128	; 0x80
1000b52c:	0452      	lsls	r2, r2, #17
1000b52e:	4690      	mov	r8, r2
1000b530:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b532:	4d3d      	ldr	r5, [pc, #244]	; (1000b628 <platform_driver_init+0x130>)
1000b534:	4b3d      	ldr	r3, [pc, #244]	; (1000b62c <platform_driver_init+0x134>)
1000b536:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b538:	4b3d      	ldr	r3, [pc, #244]	; (1000b630 <platform_driver_init+0x138>)
1000b53a:	4a3e      	ldr	r2, [pc, #248]	; (1000b634 <platform_driver_init+0x13c>)
1000b53c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b53e:	493e      	ldr	r1, [pc, #248]	; (1000b638 <platform_driver_init+0x140>)
1000b540:	4a3e      	ldr	r2, [pc, #248]	; (1000b63c <platform_driver_init+0x144>)
1000b542:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b544:	4a3e      	ldr	r2, [pc, #248]	; (1000b640 <platform_driver_init+0x148>)
1000b546:	6811      	ldr	r1, [r2, #0]
1000b548:	4a3e      	ldr	r2, [pc, #248]	; (1000b644 <platform_driver_init+0x14c>)
1000b54a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b54c:	4a3e      	ldr	r2, [pc, #248]	; (1000b648 <platform_driver_init+0x150>)
1000b54e:	6811      	ldr	r1, [r2, #0]
1000b550:	4a3e      	ldr	r2, [pc, #248]	; (1000b64c <platform_driver_init+0x154>)
1000b552:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b554:	493e      	ldr	r1, [pc, #248]	; (1000b650 <platform_driver_init+0x158>)
1000b556:	4a3f      	ldr	r2, [pc, #252]	; (1000b654 <platform_driver_init+0x15c>)
1000b558:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b55a:	493f      	ldr	r1, [pc, #252]	; (1000b658 <platform_driver_init+0x160>)
1000b55c:	4a3f      	ldr	r2, [pc, #252]	; (1000b65c <platform_driver_init+0x164>)
1000b55e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b560:	4e3f      	ldr	r6, [pc, #252]	; (1000b660 <platform_driver_init+0x168>)
1000b562:	4a40      	ldr	r2, [pc, #256]	; (1000b664 <platform_driver_init+0x16c>)
1000b564:	6032      	str	r2, [r6, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b566:	4940      	ldr	r1, [pc, #256]	; (1000b668 <platform_driver_init+0x170>)
1000b568:	4a40      	ldr	r2, [pc, #256]	; (1000b66c <platform_driver_init+0x174>)
1000b56a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b56c:	4940      	ldr	r1, [pc, #256]	; (1000b670 <platform_driver_init+0x178>)
1000b56e:	4a41      	ldr	r2, [pc, #260]	; (1000b674 <platform_driver_init+0x17c>)
1000b570:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b572:	4941      	ldr	r1, [pc, #260]	; (1000b678 <platform_driver_init+0x180>)
1000b574:	4a41      	ldr	r2, [pc, #260]	; (1000b67c <platform_driver_init+0x184>)
1000b576:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b578:	4941      	ldr	r1, [pc, #260]	; (1000b680 <platform_driver_init+0x188>)
1000b57a:	4a42      	ldr	r2, [pc, #264]	; (1000b684 <platform_driver_init+0x18c>)
1000b57c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b57e:	4942      	ldr	r1, [pc, #264]	; (1000b688 <platform_driver_init+0x190>)
1000b580:	4a42      	ldr	r2, [pc, #264]	; (1000b68c <platform_driver_init+0x194>)
1000b582:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b584:	4942      	ldr	r1, [pc, #264]	; (1000b690 <platform_driver_init+0x198>)
1000b586:	4a43      	ldr	r2, [pc, #268]	; (1000b694 <platform_driver_init+0x19c>)
1000b588:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b58a:	2028      	movs	r0, #40	; 0x28
1000b58c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b58e:	4942      	ldr	r1, [pc, #264]	; (1000b698 <platform_driver_init+0x1a0>)
1000b590:	2028      	movs	r0, #40	; 0x28
1000b592:	682b      	ldr	r3, [r5, #0]
1000b594:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b596:	682b      	ldr	r3, [r5, #0]
1000b598:	4940      	ldr	r1, [pc, #256]	; (1000b69c <platform_driver_init+0x1a4>)
1000b59a:	2027      	movs	r0, #39	; 0x27
1000b59c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b59e:	4b40      	ldr	r3, [pc, #256]	; (1000b6a0 <platform_driver_init+0x1a8>)
1000b5a0:	681a      	ldr	r2, [r3, #0]
1000b5a2:	4b40      	ldr	r3, [pc, #256]	; (1000b6a4 <platform_driver_init+0x1ac>)
1000b5a4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b5a6:	4a40      	ldr	r2, [pc, #256]	; (1000b6a8 <platform_driver_init+0x1b0>)
1000b5a8:	4b40      	ldr	r3, [pc, #256]	; (1000b6ac <platform_driver_init+0x1b4>)
1000b5aa:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b5ac:	4a40      	ldr	r2, [pc, #256]	; (1000b6b0 <platform_driver_init+0x1b8>)
1000b5ae:	4b41      	ldr	r3, [pc, #260]	; (1000b6b4 <platform_driver_init+0x1bc>)
1000b5b0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b5b2:	4a41      	ldr	r2, [pc, #260]	; (1000b6b8 <platform_driver_init+0x1c0>)
1000b5b4:	4b41      	ldr	r3, [pc, #260]	; (1000b6bc <platform_driver_init+0x1c4>)
1000b5b6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b5b8:	4a41      	ldr	r2, [pc, #260]	; (1000b6c0 <platform_driver_init+0x1c8>)
1000b5ba:	4b42      	ldr	r3, [pc, #264]	; (1000b6c4 <platform_driver_init+0x1cc>)
1000b5bc:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b5be:	4a42      	ldr	r2, [pc, #264]	; (1000b6c8 <platform_driver_init+0x1d0>)
1000b5c0:	4b42      	ldr	r3, [pc, #264]	; (1000b6cc <platform_driver_init+0x1d4>)
1000b5c2:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b5c4:	4a42      	ldr	r2, [pc, #264]	; (1000b6d0 <platform_driver_init+0x1d8>)
1000b5c6:	4b43      	ldr	r3, [pc, #268]	; (1000b6d4 <platform_driver_init+0x1dc>)
1000b5c8:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b5ca:	4a43      	ldr	r2, [pc, #268]	; (1000b6d8 <platform_driver_init+0x1e0>)
1000b5cc:	4b43      	ldr	r3, [pc, #268]	; (1000b6dc <platform_driver_init+0x1e4>)
1000b5ce:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b5d0:	22a0      	movs	r2, #160	; 0xa0
1000b5d2:	0092      	lsls	r2, r2, #2
1000b5d4:	2100      	movs	r1, #0
1000b5d6:	4842      	ldr	r0, [pc, #264]	; (1000b6e0 <platform_driver_init+0x1e8>)
1000b5d8:	4b42      	ldr	r3, [pc, #264]	; (1000b6e4 <platform_driver_init+0x1ec>)
1000b5da:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b5dc:	2280      	movs	r2, #128	; 0x80
1000b5de:	0092      	lsls	r2, r2, #2
1000b5e0:	4b41      	ldr	r3, [pc, #260]	; (1000b6e8 <platform_driver_init+0x1f0>)
1000b5e2:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b5e4:	4b41      	ldr	r3, [pc, #260]	; (1000b6ec <platform_driver_init+0x1f4>)
1000b5e6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b5e8:	464b      	mov	r3, r9
1000b5ea:	6023      	str	r3, [r4, #0]
1000b5ec:	4643      	mov	r3, r8
1000b5ee:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b5f0:	4b3f      	ldr	r3, [pc, #252]	; (1000b6f0 <platform_driver_init+0x1f8>)
1000b5f2:	601f      	str	r7, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b5f4:	6833      	ldr	r3, [r6, #0]
1000b5f6:	4a3f      	ldr	r2, [pc, #252]	; (1000b6f4 <platform_driver_init+0x1fc>)
1000b5f8:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1000b5fa:	2201      	movs	r2, #1
1000b5fc:	4b05      	ldr	r3, [pc, #20]	; (1000b614 <platform_driver_init+0x11c>)
1000b5fe:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b600:	2000      	movs	r0, #0
1000b602:	e003      	b.n	1000b60c <platform_driver_init+0x114>
	}
	else {
		platform_initialized = 1;
1000b604:	2201      	movs	r2, #1
1000b606:	4b03      	ldr	r3, [pc, #12]	; (1000b614 <platform_driver_init+0x11c>)
1000b608:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b60a:	2001      	movs	r0, #1
	}
	return status;
}
1000b60c:	bc0c      	pop	{r2, r3}
1000b60e:	4690      	mov	r8, r2
1000b610:	4699      	mov	r9, r3
1000b612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b614:	10013008 	.word	0x10013008
1000b618:	1000b47d 	.word	0x1000b47d
1000b61c:	1000b4c9 	.word	0x1000b4c9
1000b620:	1001302c 	.word	0x1001302c
1000b624:	e000e100 	.word	0xe000e100
1000b628:	10013df4 	.word	0x10013df4
1000b62c:	000007d7 	.word	0x000007d7
1000b630:	000007bd 	.word	0x000007bd
1000b634:	10013b34 	.word	0x10013b34
1000b638:	0001bc51 	.word	0x0001bc51
1000b63c:	10013df8 	.word	0x10013df8
1000b640:	100400bc 	.word	0x100400bc
1000b644:	10012ffc 	.word	0x10012ffc
1000b648:	100400b8 	.word	0x100400b8
1000b64c:	10012ff8 	.word	0x10012ff8
1000b650:	0001b99f 	.word	0x0001b99f
1000b654:	10013b30 	.word	0x10013b30
1000b658:	0001b9db 	.word	0x0001b9db
1000b65c:	10013b38 	.word	0x10013b38
1000b660:	10013e04 	.word	0x10013e04
1000b664:	1004003c 	.word	0x1004003c
1000b668:	10041fc0 	.word	0x10041fc0
1000b66c:	10013b3c 	.word	0x10013b3c
1000b670:	10041fc4 	.word	0x10041fc4
1000b674:	10013e00 	.word	0x10013e00
1000b678:	0001cbe9 	.word	0x0001cbe9
1000b67c:	10013018 	.word	0x10013018
1000b680:	0001cd8f 	.word	0x0001cd8f
1000b684:	1001300c 	.word	0x1001300c
1000b688:	0001cea3 	.word	0x0001cea3
1000b68c:	10013030 	.word	0x10013030
1000b690:	0001cbcf 	.word	0x0001cbcf
1000b694:	10013004 	.word	0x10013004
1000b698:	1000bb6d 	.word	0x1000bb6d
1000b69c:	1000bb01 	.word	0x1000bb01
1000b6a0:	100400e4 	.word	0x100400e4
1000b6a4:	10013020 	.word	0x10013020
1000b6a8:	00019fe9 	.word	0x00019fe9
1000b6ac:	10013034 	.word	0x10013034
1000b6b0:	0001dbdd 	.word	0x0001dbdd
1000b6b4:	10013000 	.word	0x10013000
1000b6b8:	0001dc5b 	.word	0x0001dc5b
1000b6bc:	10013014 	.word	0x10013014
1000b6c0:	100405ec 	.word	0x100405ec
1000b6c4:	10013010 	.word	0x10013010
1000b6c8:	0001d5e3 	.word	0x0001d5e3
1000b6cc:	1001301c 	.word	0x1001301c
1000b6d0:	10040c20 	.word	0x10040c20
1000b6d4:	10013038 	.word	0x10013038
1000b6d8:	00019f09 	.word	0x00019f09
1000b6dc:	10012ff4 	.word	0x10012ff4
1000b6e0:	10013b74 	.word	0x10013b74
1000b6e4:	10010271 	.word	0x10010271
1000b6e8:	10013e08 	.word	0x10013e08
1000b6ec:	1000b3b5 	.word	0x1000b3b5
1000b6f0:	10013dfc 	.word	0x10013dfc
1000b6f4:	1000b451 	.word	0x1000b451

1000b6f8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b6f8:	4b04      	ldr	r3, [pc, #16]	; (1000b70c <platform_register_ble_msg_handler+0x14>)
1000b6fa:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b6fc:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b6fe:	2a01      	cmp	r2, #1
1000b700:	d102      	bne.n	1000b708 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b702:	4b03      	ldr	r3, [pc, #12]	; (1000b710 <platform_register_ble_msg_handler+0x18>)
1000b704:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b706:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b708:	0018      	movs	r0, r3
1000b70a:	4770      	bx	lr
1000b70c:	10013008 	.word	0x10013008
1000b710:	1001302c 	.word	0x1001302c

1000b714 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b714:	b570      	push	{r4, r5, r6, lr}
1000b716:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b718:	4b0e      	ldr	r3, [pc, #56]	; (1000b754 <platform_interface_send+0x40>)
1000b71a:	681b      	ldr	r3, [r3, #0]
1000b71c:	2b00      	cmp	r3, #0
1000b71e:	d002      	beq.n	1000b726 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b720:	8840      	ldrh	r0, [r0, #2]
1000b722:	4798      	blx	r3
1000b724:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b726:	88e3      	ldrh	r3, [r4, #6]
1000b728:	88a2      	ldrh	r2, [r4, #4]
1000b72a:	8861      	ldrh	r1, [r4, #2]
1000b72c:	8820      	ldrh	r0, [r4, #0]
1000b72e:	4d0a      	ldr	r5, [pc, #40]	; (1000b758 <platform_interface_send+0x44>)
1000b730:	682d      	ldr	r5, [r5, #0]
1000b732:	47a8      	blx	r5
1000b734:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b736:	88e2      	ldrh	r2, [r4, #6]
1000b738:	2a00      	cmp	r2, #0
1000b73a:	d102      	bne.n	1000b742 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b73c:	4b07      	ldr	r3, [pc, #28]	; (1000b75c <platform_interface_send+0x48>)
1000b73e:	4798      	blx	r3
1000b740:	e006      	b.n	1000b750 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b742:	0021      	movs	r1, r4
1000b744:	3108      	adds	r1, #8
1000b746:	4b06      	ldr	r3, [pc, #24]	; (1000b760 <platform_interface_send+0x4c>)
1000b748:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b74a:	0028      	movs	r0, r5
1000b74c:	4b03      	ldr	r3, [pc, #12]	; (1000b75c <platform_interface_send+0x48>)
1000b74e:	4798      	blx	r3
	}
}
1000b750:	bd70      	pop	{r4, r5, r6, pc}
1000b752:	46c0      	nop			; (mov r8, r8)
1000b754:	10012ffc 	.word	0x10012ffc
1000b758:	10013034 	.word	0x10013034
1000b75c:	1000b3e5 	.word	0x1000b3e5
1000b760:	1001025f 	.word	0x1001025f

1000b764 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b766:	0004      	movs	r4, r0
1000b768:	000f      	movs	r7, r1
1000b76a:	0016      	movs	r6, r2
1000b76c:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
1000b76e:	4b0e      	ldr	r3, [pc, #56]	; (1000b7a8 <send_plf_int_msg_ind+0x44>)
1000b770:	6818      	ldr	r0, [r3, #0]
1000b772:	4b0e      	ldr	r3, [pc, #56]	; (1000b7ac <send_plf_int_msg_ind+0x48>)
1000b774:	681b      	ldr	r3, [r3, #0]
1000b776:	4798      	blx	r3
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b778:	023a      	lsls	r2, r7, #8
1000b77a:	4322      	orrs	r2, r4
1000b77c:	4b0c      	ldr	r3, [pc, #48]	; (1000b7b0 <send_plf_int_msg_ind+0x4c>)
1000b77e:	681c      	ldr	r4, [r3, #0]
1000b780:	002b      	movs	r3, r5
1000b782:	2105      	movs	r1, #5
1000b784:	20a0      	movs	r0, #160	; 0xa0
1000b786:	00c0      	lsls	r0, r0, #3
1000b788:	47a0      	blx	r4
1000b78a:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000b78c:	d00a      	beq.n	1000b7a4 <send_plf_int_msg_ind+0x40>
		if((data_len != 0) && (NULL != data))
1000b78e:	2d00      	cmp	r5, #0
1000b790:	d005      	beq.n	1000b79e <send_plf_int_msg_ind+0x3a>
1000b792:	2e00      	cmp	r6, #0
1000b794:	d003      	beq.n	1000b79e <send_plf_int_msg_ind+0x3a>
		{
			//copy params
			memcpy(params, data, data_len);
1000b796:	002a      	movs	r2, r5
1000b798:	0031      	movs	r1, r6
1000b79a:	4b06      	ldr	r3, [pc, #24]	; (1000b7b4 <send_plf_int_msg_ind+0x50>)
1000b79c:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b79e:	0020      	movs	r0, r4
1000b7a0:	4b05      	ldr	r3, [pc, #20]	; (1000b7b8 <send_plf_int_msg_ind+0x54>)
1000b7a2:	4798      	blx	r3
	}
}
1000b7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b7a6:	46c0      	nop			; (mov r8, r8)
1000b7a8:	10013010 	.word	0x10013010
1000b7ac:	10013000 	.word	0x10013000
1000b7b0:	10013034 	.word	0x10013034
1000b7b4:	1001025f 	.word	0x1001025f
1000b7b8:	1000b3e5 	.word	0x1000b3e5

1000b7bc <platform_event_wait>:
	
	platform_interface_send(msg, u16TxLen);
}

plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7be:	465f      	mov	r7, fp
1000b7c0:	4656      	mov	r6, sl
1000b7c2:	464d      	mov	r5, r9
1000b7c4:	4644      	mov	r4, r8
1000b7c6:	b4f0      	push	{r4, r5, r6, r7}
1000b7c8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b7ca:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b7cc:	2300      	movs	r3, #0
1000b7ce:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b7d0:	1ce3      	adds	r3, r4, #3
1000b7d2:	d81c      	bhi.n	1000b80e <platform_event_wait+0x52>
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b7d4:	220d      	movs	r2, #13
1000b7d6:	2100      	movs	r1, #0
1000b7d8:	a802      	add	r0, sp, #8
1000b7da:	4b82      	ldr	r3, [pc, #520]	; (1000b9e4 <platform_event_wait+0x228>)
1000b7dc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b7de:	2319      	movs	r3, #25
1000b7e0:	aa02      	add	r2, sp, #8
1000b7e2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b7e4:	3b16      	subs	r3, #22
1000b7e6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b7e8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b7ea:	3302      	adds	r3, #2
1000b7ec:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b7ee:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b7f0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b7f2:	0a23      	lsrs	r3, r4, #8
1000b7f4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b7f6:	0c23      	lsrs	r3, r4, #16
1000b7f8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b7fa:	0e24      	lsrs	r4, r4, #24
1000b7fc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b7fe:	2301      	movs	r3, #1
1000b800:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b802:	210d      	movs	r1, #13
1000b804:	0010      	movs	r0, r2
1000b806:	4b78      	ldr	r3, [pc, #480]	; (1000b9e8 <platform_event_wait+0x22c>)
1000b808:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b80a:	2301      	movs	r3, #1
1000b80c:	4699      	mov	r9, r3
1000b80e:	2400      	movs	r4, #0
1000b810:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b812:	4f76      	ldr	r7, [pc, #472]	; (1000b9ec <platform_event_wait+0x230>)
1000b814:	4e76      	ldr	r6, [pc, #472]	; (1000b9f0 <platform_event_wait+0x234>)
1000b816:	4977      	ldr	r1, [pc, #476]	; (1000b9f4 <platform_event_wait+0x238>)
1000b818:	6838      	ldr	r0, [r7, #0]
1000b81a:	6833      	ldr	r3, [r6, #0]
1000b81c:	4798      	blx	r3
1000b81e:	2800      	cmp	r0, #0
1000b820:	d000      	beq.n	1000b824 <platform_event_wait+0x68>
1000b822:	e088      	b.n	1000b936 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b824:	4b73      	ldr	r3, [pc, #460]	; (1000b9f4 <platform_event_wait+0x238>)
1000b826:	681c      	ldr	r4, [r3, #0]
1000b828:	88a3      	ldrh	r3, [r4, #4]
1000b82a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b82c:	23cd      	movs	r3, #205	; 0xcd
1000b82e:	009b      	lsls	r3, r3, #2
1000b830:	459a      	cmp	sl, r3
1000b832:	d100      	bne.n	1000b836 <platform_event_wait+0x7a>
1000b834:	e0c7      	b.n	1000b9c6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b836:	8923      	ldrh	r3, [r4, #8]
1000b838:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b83a:	8963      	ldrh	r3, [r4, #10]
1000b83c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b83e:	464b      	mov	r3, r9
1000b840:	2b00      	cmp	r3, #0
1000b842:	d011      	beq.n	1000b868 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b844:	220d      	movs	r2, #13
1000b846:	2100      	movs	r1, #0
1000b848:	a802      	add	r0, sp, #8
1000b84a:	4b66      	ldr	r3, [pc, #408]	; (1000b9e4 <platform_event_wait+0x228>)
1000b84c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b84e:	2319      	movs	r3, #25
1000b850:	aa02      	add	r2, sp, #8
1000b852:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b854:	3b16      	subs	r3, #22
1000b856:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b858:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b85a:	3302      	adds	r3, #2
1000b85c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b85e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b860:	210d      	movs	r1, #13
1000b862:	0010      	movs	r0, r2
1000b864:	4b60      	ldr	r3, [pc, #384]	; (1000b9e8 <platform_event_wait+0x22c>)
1000b866:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b868:	23a0      	movs	r3, #160	; 0xa0
1000b86a:	00db      	lsls	r3, r3, #3
1000b86c:	459a      	cmp	sl, r3
1000b86e:	d121      	bne.n	1000b8b4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b870:	4b61      	ldr	r3, [pc, #388]	; (1000b9f8 <platform_event_wait+0x23c>)
1000b872:	881b      	ldrh	r3, [r3, #0]
1000b874:	4443      	add	r3, r8
1000b876:	22a0      	movs	r2, #160	; 0xa0
1000b878:	0092      	lsls	r2, r2, #2
1000b87a:	4293      	cmp	r3, r2
1000b87c:	dd02      	ble.n	1000b884 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b87e:	3a80      	subs	r2, #128	; 0x80
1000b880:	4b5d      	ldr	r3, [pc, #372]	; (1000b9f8 <platform_event_wait+0x23c>)
1000b882:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b884:	4b5c      	ldr	r3, [pc, #368]	; (1000b9f8 <platform_event_wait+0x23c>)
1000b886:	469a      	mov	sl, r3
1000b888:	881d      	ldrh	r5, [r3, #0]
1000b88a:	4b5c      	ldr	r3, [pc, #368]	; (1000b9fc <platform_event_wait+0x240>)
1000b88c:	18ed      	adds	r5, r5, r3
1000b88e:	0021      	movs	r1, r4
1000b890:	310c      	adds	r1, #12
1000b892:	4642      	mov	r2, r8
1000b894:	0028      	movs	r0, r5
1000b896:	4b5a      	ldr	r3, [pc, #360]	; (1000ba00 <platform_event_wait+0x244>)
1000b898:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b89a:	4642      	mov	r2, r8
1000b89c:	0029      	movs	r1, r5
1000b89e:	4658      	mov	r0, fp
1000b8a0:	4b58      	ldr	r3, [pc, #352]	; (1000ba04 <platform_event_wait+0x248>)
1000b8a2:	4798      	blx	r3
				plf_event_buff_index += len;
1000b8a4:	4653      	mov	r3, sl
1000b8a6:	881b      	ldrh	r3, [r3, #0]
1000b8a8:	4443      	add	r3, r8
1000b8aa:	4652      	mov	r2, sl
1000b8ac:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b8ae:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b8b0:	2502      	movs	r5, #2
1000b8b2:	e03a      	b.n	1000b92a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b8b4:	4b54      	ldr	r3, [pc, #336]	; (1000ba08 <platform_event_wait+0x24c>)
1000b8b6:	681b      	ldr	r3, [r3, #0]
1000b8b8:	2b00      	cmp	r3, #0
1000b8ba:	d032      	beq.n	1000b922 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b8bc:	4b4d      	ldr	r3, [pc, #308]	; (1000b9f4 <platform_event_wait+0x238>)
1000b8be:	681a      	ldr	r2, [r3, #0]
1000b8c0:	8893      	ldrh	r3, [r2, #4]
1000b8c2:	21cd      	movs	r1, #205	; 0xcd
1000b8c4:	0089      	lsls	r1, r1, #2
1000b8c6:	428b      	cmp	r3, r1
1000b8c8:	d104      	bne.n	1000b8d4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b8ca:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b8cc:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b8ce:	2b00      	cmp	r3, #0
1000b8d0:	d02b      	beq.n	1000b92a <platform_event_wait+0x16e>
1000b8d2:	e028      	b.n	1000b926 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b8d4:	4c4d      	ldr	r4, [pc, #308]	; (1000ba0c <platform_event_wait+0x250>)
1000b8d6:	4d49      	ldr	r5, [pc, #292]	; (1000b9fc <platform_event_wait+0x240>)
1000b8d8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b8da:	702b      	strb	r3, [r5, #0]
1000b8dc:	0a1b      	lsrs	r3, r3, #8
1000b8de:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b8e0:	8910      	ldrh	r0, [r2, #8]
1000b8e2:	4b4b      	ldr	r3, [pc, #300]	; (1000ba10 <platform_event_wait+0x254>)
1000b8e4:	681b      	ldr	r3, [r3, #0]
1000b8e6:	4798      	blx	r3
1000b8e8:	7128      	strb	r0, [r5, #4]
1000b8ea:	0a00      	lsrs	r0, r0, #8
1000b8ec:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b8ee:	6820      	ldr	r0, [r4, #0]
1000b8f0:	4b40      	ldr	r3, [pc, #256]	; (1000b9f4 <platform_event_wait+0x238>)
1000b8f2:	681a      	ldr	r2, [r3, #0]
1000b8f4:	88d2      	ldrh	r2, [r2, #6]
1000b8f6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b8f8:	681d      	ldr	r5, [r3, #0]
1000b8fa:	896b      	ldrh	r3, [r5, #10]
1000b8fc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b8fe:	3008      	adds	r0, #8
1000b900:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b902:	896a      	ldrh	r2, [r5, #10]
1000b904:	2a00      	cmp	r2, #0
1000b906:	d003      	beq.n	1000b910 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b908:	0029      	movs	r1, r5
1000b90a:	310c      	adds	r1, #12
1000b90c:	4b3c      	ldr	r3, [pc, #240]	; (1000ba00 <platform_event_wait+0x244>)
1000b90e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b910:	8969      	ldrh	r1, [r5, #10]
1000b912:	3108      	adds	r1, #8
1000b914:	4b3c      	ldr	r3, [pc, #240]	; (1000ba08 <platform_event_wait+0x24c>)
1000b916:	681b      	ldr	r3, [r3, #0]
1000b918:	4838      	ldr	r0, [pc, #224]	; (1000b9fc <platform_event_wait+0x240>)
1000b91a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b91c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b91e:	2503      	movs	r5, #3
1000b920:	e003      	b.n	1000b92a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b922:	2400      	movs	r4, #0
1000b924:	e001      	b.n	1000b92a <platform_event_wait+0x16e>
1000b926:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b928:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b92a:	4b32      	ldr	r3, [pc, #200]	; (1000b9f4 <platform_event_wait+0x238>)
1000b92c:	6818      	ldr	r0, [r3, #0]
1000b92e:	4b39      	ldr	r3, [pc, #228]	; (1000ba14 <platform_event_wait+0x258>)
1000b930:	681b      	ldr	r3, [r3, #0]
1000b932:	4798      	blx	r3
1000b934:	e000      	b.n	1000b938 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b936:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b938:	2c00      	cmp	r4, #0
1000b93a:	d000      	beq.n	1000b93e <platform_event_wait+0x182>
1000b93c:	e76b      	b.n	1000b816 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b93e:	464b      	mov	r3, r9
1000b940:	2b00      	cmp	r3, #0
1000b942:	d046      	beq.n	1000b9d2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b944:	4b29      	ldr	r3, [pc, #164]	; (1000b9ec <platform_event_wait+0x230>)
1000b946:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b948:	2e00      	cmp	r6, #0
1000b94a:	d104      	bne.n	1000b956 <platform_event_wait+0x19a>
1000b94c:	2300      	movs	r3, #0
1000b94e:	6a1c      	ldr	r4, [r3, #32]
1000b950:	2c00      	cmp	r4, #0
1000b952:	d131      	bne.n	1000b9b8 <platform_event_wait+0x1fc>
1000b954:	e03d      	b.n	1000b9d2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b956:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b958:	2314      	movs	r3, #20
1000b95a:	469c      	mov	ip, r3
1000b95c:	44b4      	add	ip, r6
1000b95e:	4663      	mov	r3, ip
1000b960:	4660      	mov	r0, ip
1000b962:	9300      	str	r3, [sp, #0]
1000b964:	4b2c      	ldr	r3, [pc, #176]	; (1000ba18 <platform_event_wait+0x25c>)
1000b966:	681b      	ldr	r3, [r3, #0]
1000b968:	4798      	blx	r3
	while(NULL != current)
1000b96a:	2c00      	cmp	r4, #0
1000b96c:	d01f      	beq.n	1000b9ae <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b96e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b970:	23cd      	movs	r3, #205	; 0xcd
1000b972:	009b      	lsls	r3, r3, #2
1000b974:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b976:	4b27      	ldr	r3, [pc, #156]	; (1000ba14 <platform_event_wait+0x258>)
1000b978:	469a      	mov	sl, r3
1000b97a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b97c:	6803      	ldr	r3, [r0, #0]
1000b97e:	889b      	ldrh	r3, [r3, #4]
1000b980:	4543      	cmp	r3, r8
1000b982:	d110      	bne.n	1000b9a6 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b984:	2f00      	cmp	r7, #0
1000b986:	d006      	beq.n	1000b996 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b988:	6883      	ldr	r3, [r0, #8]
1000b98a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b98c:	4653      	mov	r3, sl
1000b98e:	681b      	ldr	r3, [r3, #0]
1000b990:	4798      	blx	r3
				current = prev->pstrNext;
1000b992:	68b8      	ldr	r0, [r7, #8]
1000b994:	e009      	b.n	1000b9aa <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b996:	6883      	ldr	r3, [r0, #8]
1000b998:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b99a:	4b1e      	ldr	r3, [pc, #120]	; (1000ba14 <platform_event_wait+0x258>)
1000b99c:	681b      	ldr	r3, [r3, #0]
1000b99e:	9301      	str	r3, [sp, #4]
1000b9a0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b9a2:	6a30      	ldr	r0, [r6, #32]
1000b9a4:	e001      	b.n	1000b9aa <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b9a6:	0007      	movs	r7, r0
1000b9a8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b9aa:	2800      	cmp	r0, #0
1000b9ac:	d1e6      	bne.n	1000b97c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b9ae:	4b1b      	ldr	r3, [pc, #108]	; (1000ba1c <platform_event_wait+0x260>)
1000b9b0:	681b      	ldr	r3, [r3, #0]
1000b9b2:	9800      	ldr	r0, [sp, #0]
1000b9b4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b9b6:	e00c      	b.n	1000b9d2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b9b8:	2314      	movs	r3, #20
1000b9ba:	9300      	str	r3, [sp, #0]
1000b9bc:	4b16      	ldr	r3, [pc, #88]	; (1000ba18 <platform_event_wait+0x25c>)
1000b9be:	681b      	ldr	r3, [r3, #0]
1000b9c0:	2014      	movs	r0, #20
1000b9c2:	4798      	blx	r3
1000b9c4:	e7d3      	b.n	1000b96e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b9c6:	4b10      	ldr	r3, [pc, #64]	; (1000ba08 <platform_event_wait+0x24c>)
1000b9c8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b9ca:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b9cc:	2b00      	cmp	r3, #0
1000b9ce:	d0ac      	beq.n	1000b92a <platform_event_wait+0x16e>
1000b9d0:	e77b      	b.n	1000b8ca <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b9d2:	0028      	movs	r0, r5
1000b9d4:	b007      	add	sp, #28
1000b9d6:	bc3c      	pop	{r2, r3, r4, r5}
1000b9d8:	4690      	mov	r8, r2
1000b9da:	4699      	mov	r9, r3
1000b9dc:	46a2      	mov	sl, r4
1000b9de:	46ab      	mov	fp, r5
1000b9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9e2:	46c0      	nop			; (mov r8, r8)
1000b9e4:	10010271 	.word	0x10010271
1000b9e8:	1000b715 	.word	0x1000b715
1000b9ec:	10013038 	.word	0x10013038
1000b9f0:	1001301c 	.word	0x1001301c
1000b9f4:	10013028 	.word	0x10013028
1000b9f8:	10013e08 	.word	0x10013e08
1000b9fc:	10013b74 	.word	0x10013b74
1000ba00:	1001025f 	.word	0x1001025f
1000ba04:	1000b37d 	.word	0x1000b37d
1000ba08:	1001302c 	.word	0x1001302c
1000ba0c:	10013024 	.word	0x10013024
1000ba10:	10012ff8 	.word	0x10012ff8
1000ba14:	10012ff4 	.word	0x10012ff4
1000ba18:	10013014 	.word	0x10013014
1000ba1c:	10013000 	.word	0x10013000

1000ba20 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ba20:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ba22:	4b12      	ldr	r3, [pc, #72]	; (1000ba6c <acquire_sleep_lock+0x4c>)
1000ba24:	681c      	ldr	r4, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ba26:	4b12      	ldr	r3, [pc, #72]	; (1000ba70 <acquire_sleep_lock+0x50>)
1000ba28:	681b      	ldr	r3, [r3, #0]
1000ba2a:	2080      	movs	r0, #128	; 0x80
1000ba2c:	0200      	lsls	r0, r0, #8
1000ba2e:	4798      	blx	r3
	if(osc_en == 0)
1000ba30:	07e3      	lsls	r3, r4, #31
1000ba32:	d414      	bmi.n	1000ba5e <acquire_sleep_lock+0x3e>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000ba34:	4b0f      	ldr	r3, [pc, #60]	; (1000ba74 <acquire_sleep_lock+0x54>)
1000ba36:	681b      	ldr	r3, [r3, #0]
1000ba38:	2002      	movs	r0, #2
1000ba3a:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000ba3c:	4b0e      	ldr	r3, [pc, #56]	; (1000ba78 <acquire_sleep_lock+0x58>)
1000ba3e:	681b      	ldr	r3, [r3, #0]
1000ba40:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000ba42:	4c0e      	ldr	r4, [pc, #56]	; (1000ba7c <acquire_sleep_lock+0x5c>)
1000ba44:	2003      	movs	r0, #3
1000ba46:	6823      	ldr	r3, [r4, #0]
1000ba48:	4798      	blx	r3
1000ba4a:	2800      	cmp	r0, #0
1000ba4c:	d1fa      	bne.n	1000ba44 <acquire_sleep_lock+0x24>
		pwr_disable_arm_wakeup(1<<1);
1000ba4e:	4b0c      	ldr	r3, [pc, #48]	; (1000ba80 <acquire_sleep_lock+0x60>)
1000ba50:	681b      	ldr	r3, [r3, #0]
1000ba52:	3002      	adds	r0, #2
1000ba54:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000ba56:	2201      	movs	r2, #1
1000ba58:	4b0a      	ldr	r3, [pc, #40]	; (1000ba84 <acquire_sleep_lock+0x64>)
1000ba5a:	601a      	str	r2, [r3, #0]
1000ba5c:	e004      	b.n	1000ba68 <acquire_sleep_lock+0x48>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
1000ba5e:	4b0a      	ldr	r3, [pc, #40]	; (1000ba88 <acquire_sleep_lock+0x68>)
1000ba60:	6818      	ldr	r0, [r3, #0]
1000ba62:	4b0a      	ldr	r3, [pc, #40]	; (1000ba8c <acquire_sleep_lock+0x6c>)
1000ba64:	681b      	ldr	r3, [r3, #0]
1000ba66:	4798      	blx	r3
	}
	return status;
}
1000ba68:	2008      	movs	r0, #8
1000ba6a:	bd10      	pop	{r4, pc}
1000ba6c:	4000b1ec 	.word	0x4000b1ec
1000ba70:	10013b30 	.word	0x10013b30
1000ba74:	10013018 	.word	0x10013018
1000ba78:	10013030 	.word	0x10013030
1000ba7c:	10013004 	.word	0x10013004
1000ba80:	1001300c 	.word	0x1001300c
1000ba84:	4000b020 	.word	0x4000b020
1000ba88:	10013010 	.word	0x10013010
1000ba8c:	10013000 	.word	0x10013000

1000ba90 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
1000ba90:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ba92:	4a18      	ldr	r2, [pc, #96]	; (1000baf4 <gpio1_combined_isr_handler+0x64>)
1000ba94:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ba96:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ba98:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ba9a:	2180      	movs	r1, #128	; 0x80
1000ba9c:	0209      	lsls	r1, r1, #8
1000ba9e:	4301      	orrs	r1, r0
1000baa0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000baa2:	0010      	movs	r0, r2
1000baa4:	4d14      	ldr	r5, [pc, #80]	; (1000baf8 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000baa6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000baa8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000baaa:	05db      	lsls	r3, r3, #23
1000baac:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000baae:	d011      	beq.n	1000bad4 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000bab0:	b2db      	uxtb	r3, r3
1000bab2:	4259      	negs	r1, r3
1000bab4:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000bab6:	2b01      	cmp	r3, #1
1000bab8:	d006      	beq.n	1000bac8 <gpio1_combined_isr_handler+0x38>
1000baba:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000babc:	085b      	lsrs	r3, r3, #1
				index++;
1000babe:	3101      	adds	r1, #1
1000bac0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000bac2:	2b01      	cmp	r3, #1
1000bac4:	d1fa      	bne.n	1000babc <gpio1_combined_isr_handler+0x2c>
1000bac6:	e000      	b.n	1000baca <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bac8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000baca:	0023      	movs	r3, r4
1000bacc:	408b      	lsls	r3, r1
1000bace:	b29b      	uxth	r3, r3
1000bad0:	8703      	strh	r3, [r0, #56]	; 0x38
1000bad2:	e003      	b.n	1000badc <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bad4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000bad6:	432b      	orrs	r3, r5
1000bad8:	b29b      	uxth	r3, r3
1000bada:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000badc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bade:	05db      	lsls	r3, r3, #23
1000bae0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000bae2:	d1e2      	bne.n	1000baaa <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bae4:	2180      	movs	r1, #128	; 0x80
1000bae6:	0049      	lsls	r1, r1, #1
1000bae8:	3381      	adds	r3, #129	; 0x81
1000baea:	33ff      	adds	r3, #255	; 0xff
1000baec:	4a03      	ldr	r2, [pc, #12]	; (1000bafc <gpio1_combined_isr_handler+0x6c>)
1000baee:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000baf0:	bd30      	pop	{r4, r5, pc}
1000baf2:	46c0      	nop			; (mov r8, r8)
1000baf4:	40011000 	.word	0x40011000
1000baf8:	ffff8000 	.word	0xffff8000
1000bafc:	e000e100 	.word	0xe000e100

1000bb00 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000bb00:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000bb02:	4a17      	ldr	r2, [pc, #92]	; (1000bb60 <gpio0_combined_isr_handler+0x60>)
1000bb04:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bb06:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000bb08:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000bb0a:	2180      	movs	r1, #128	; 0x80
1000bb0c:	0209      	lsls	r1, r1, #8
1000bb0e:	4301      	orrs	r1, r0
1000bb10:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bb12:	0010      	movs	r0, r2
1000bb14:	4d13      	ldr	r5, [pc, #76]	; (1000bb64 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bb16:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bb18:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bb1a:	05db      	lsls	r3, r3, #23
1000bb1c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000bb1e:	d011      	beq.n	1000bb44 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000bb20:	b2db      	uxtb	r3, r3
1000bb22:	4259      	negs	r1, r3
1000bb24:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000bb26:	2b01      	cmp	r3, #1
1000bb28:	d006      	beq.n	1000bb38 <gpio0_combined_isr_handler+0x38>
1000bb2a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000bb2c:	085b      	lsrs	r3, r3, #1
				index++;
1000bb2e:	3101      	adds	r1, #1
1000bb30:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000bb32:	2b01      	cmp	r3, #1
1000bb34:	d1fa      	bne.n	1000bb2c <gpio0_combined_isr_handler+0x2c>
1000bb36:	e000      	b.n	1000bb3a <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bb38:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bb3a:	0023      	movs	r3, r4
1000bb3c:	408b      	lsls	r3, r1
1000bb3e:	b29b      	uxth	r3, r3
1000bb40:	8703      	strh	r3, [r0, #56]	; 0x38
1000bb42:	e003      	b.n	1000bb4c <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bb44:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000bb46:	432b      	orrs	r3, r5
1000bb48:	b29b      	uxth	r3, r3
1000bb4a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000bb4c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bb4e:	05db      	lsls	r3, r3, #23
1000bb50:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000bb52:	d1e2      	bne.n	1000bb1a <gpio0_combined_isr_handler+0x1a>
1000bb54:	2180      	movs	r1, #128	; 0x80
1000bb56:	3381      	adds	r3, #129	; 0x81
1000bb58:	33ff      	adds	r3, #255	; 0xff
1000bb5a:	4a03      	ldr	r2, [pc, #12]	; (1000bb68 <gpio0_combined_isr_handler+0x68>)
1000bb5c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000bb5e:	bd30      	pop	{r4, r5, pc}
1000bb60:	40010000 	.word	0x40010000
1000bb64:	ffff8000 	.word	0xffff8000
1000bb68:	e000e100 	.word	0xe000e100

1000bb6c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000bb6c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000bb6e:	4b0c      	ldr	r3, [pc, #48]	; (1000bba0 <PORT1_COMB_Handler+0x34>)
1000bb70:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000bb72:	0b5b      	lsrs	r3, r3, #13
1000bb74:	d010      	beq.n	1000bb98 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000bb76:	4b0b      	ldr	r3, [pc, #44]	; (1000bba4 <PORT1_COMB_Handler+0x38>)
1000bb78:	681b      	ldr	r3, [r3, #0]
1000bb7a:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000bb7c:	4a08      	ldr	r2, [pc, #32]	; (1000bba0 <PORT1_COMB_Handler+0x34>)
1000bb7e:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bb80:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000bb82:	0b5b      	lsrs	r3, r3, #13
1000bb84:	035b      	lsls	r3, r3, #13
1000bb86:	430b      	orrs	r3, r1
1000bb88:	8713      	strh	r3, [r2, #56]	; 0x38
1000bb8a:	2180      	movs	r1, #128	; 0x80
1000bb8c:	0049      	lsls	r1, r1, #1
1000bb8e:	23c0      	movs	r3, #192	; 0xc0
1000bb90:	005b      	lsls	r3, r3, #1
1000bb92:	4a05      	ldr	r2, [pc, #20]	; (1000bba8 <PORT1_COMB_Handler+0x3c>)
1000bb94:	50d1      	str	r1, [r2, r3]
1000bb96:	e001      	b.n	1000bb9c <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000bb98:	4b04      	ldr	r3, [pc, #16]	; (1000bbac <PORT1_COMB_Handler+0x40>)
1000bb9a:	4798      	blx	r3
	}
}
1000bb9c:	bd10      	pop	{r4, pc}
1000bb9e:	46c0      	nop			; (mov r8, r8)
1000bba0:	40011000 	.word	0x40011000
1000bba4:	10013df8 	.word	0x10013df8
1000bba8:	e000e100 	.word	0xe000e100
1000bbac:	1000ba91 	.word	0x1000ba91

1000bbb0 <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *params)
{
    ALL_UNUSED(params);
    app_state = SMS_DISCONNECTED;
1000bbb0:	2203      	movs	r2, #3
1000bbb2:	4b02      	ldr	r3, [pc, #8]	; (1000bbbc <ble_disconnected_app_event+0xc>)
1000bbb4:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
}
1000bbb6:	2000      	movs	r0, #0
1000bbb8:	4770      	bx	lr
1000bbba:	46c0      	nop			; (mov r8, r8)
1000bbbc:	10013e54 	.word	0x10013e54

1000bbc0 <timer_callback_fn>:


/* timer callback function */
static void timer_callback_fn(void)
{
    app_state = SMS_INT_TIMER1;
1000bbc0:	2206      	movs	r2, #6
1000bbc2:	4b01      	ldr	r3, [pc, #4]	; (1000bbc8 <timer_callback_fn+0x8>)
1000bbc4:	701a      	strb	r2, [r3, #0]
    /* Add timer callback functionality here */
}
1000bbc6:	4770      	bx	lr
1000bbc8:	10013e54 	.word	0x10013e54

1000bbcc <sms_gateway_char_write_resp>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_WRITE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_write_resp(void *params)
{
1000bbcc:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic write response");
1000bbce:	4804      	ldr	r0, [pc, #16]	; (1000bbe0 <sms_gateway_char_write_resp+0x14>)
1000bbd0:	4b04      	ldr	r3, [pc, #16]	; (1000bbe4 <sms_gateway_char_write_resp+0x18>)
1000bbd2:	4798      	blx	r3
1000bbd4:	4804      	ldr	r0, [pc, #16]	; (1000bbe8 <sms_gateway_char_write_resp+0x1c>)
1000bbd6:	4b05      	ldr	r3, [pc, #20]	; (1000bbec <sms_gateway_char_write_resp+0x20>)
1000bbd8:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000bbda:	2000      	movs	r0, #0
1000bbdc:	bd10      	pop	{r4, pc}
1000bbde:	46c0      	nop			; (mov r8, r8)
1000bbe0:	10011744 	.word	0x10011744
1000bbe4:	100103a1 	.word	0x100103a1
1000bbe8:	1001280c 	.word	0x1001280c
1000bbec:	10010281 	.word	0x10010281

1000bbf0 <sms_gateway_char_read_multiple>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_MULTIBLE_RESPONSE event from stack */
static at_ble_status_t sms_gateway_char_read_multiple(void *params)
{
1000bbf0:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by multiple BLE responses");
1000bbf2:	4804      	ldr	r0, [pc, #16]	; (1000bc04 <sms_gateway_char_read_multiple+0x14>)
1000bbf4:	4b04      	ldr	r3, [pc, #16]	; (1000bc08 <sms_gateway_char_read_multiple+0x18>)
1000bbf6:	4798      	blx	r3
1000bbf8:	4804      	ldr	r0, [pc, #16]	; (1000bc0c <sms_gateway_char_read_multiple+0x1c>)
1000bbfa:	4b05      	ldr	r3, [pc, #20]	; (1000bc10 <sms_gateway_char_read_multiple+0x20>)
1000bbfc:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000bbfe:	2000      	movs	r0, #0
1000bc00:	bd10      	pop	{r4, pc}
1000bc02:	46c0      	nop			; (mov r8, r8)
1000bc04:	10011744 	.word	0x10011744
1000bc08:	100103a1 	.word	0x100103a1
1000bc0c:	1001282c 	.word	0x1001282c
1000bc10:	10010281 	.word	0x10010281

1000bc14 <sms_gateway_char_read_by_uuid>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_READ_BY_UUID_RESPONSE event from stack */
static at_ble_status_t 	sms_gateway_char_read_by_uuid(void *params)
{
1000bc14:	b510      	push	{r4, lr}
    DBG_LOG("Characteristic read by uuid response");
1000bc16:	4804      	ldr	r0, [pc, #16]	; (1000bc28 <sms_gateway_char_read_by_uuid+0x14>)
1000bc18:	4b04      	ldr	r3, [pc, #16]	; (1000bc2c <sms_gateway_char_read_by_uuid+0x18>)
1000bc1a:	4798      	blx	r3
1000bc1c:	4804      	ldr	r0, [pc, #16]	; (1000bc30 <sms_gateway_char_read_by_uuid+0x1c>)
1000bc1e:	4b05      	ldr	r3, [pc, #20]	; (1000bc34 <sms_gateway_char_read_by_uuid+0x20>)
1000bc20:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000bc22:	2000      	movs	r0, #0
1000bc24:	bd10      	pop	{r4, pc}
1000bc26:	46c0      	nop			; (mov r8, r8)
1000bc28:	10011744 	.word	0x10011744
1000bc2c:	100103a1 	.word	0x100103a1
1000bc30:	1001285c 	.word	0x1001285c
1000bc34:	10010281 	.word	0x10010281

1000bc38 <sms_gateway_discovery_complete>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE (#23) event from stack */
static at_ble_status_t sms_gateway_discovery_complete(void *params)
{
1000bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bc3a:	465f      	mov	r7, fp
1000bc3c:	4656      	mov	r6, sl
1000bc3e:	464d      	mov	r5, r9
1000bc40:	4644      	mov	r4, r8
1000bc42:	b4f0      	push	{r4, r5, r6, r7}
    DBG_LOG("Discovery complete...");
1000bc44:	4822      	ldr	r0, [pc, #136]	; (1000bcd0 <sms_gateway_discovery_complete+0x98>)
1000bc46:	4b23      	ldr	r3, [pc, #140]	; (1000bcd4 <sms_gateway_discovery_complete+0x9c>)
1000bc48:	4798      	blx	r3
1000bc4a:	4823      	ldr	r0, [pc, #140]	; (1000bcd8 <sms_gateway_discovery_complete+0xa0>)
1000bc4c:	4b23      	ldr	r3, [pc, #140]	; (1000bcdc <sms_gateway_discovery_complete+0xa4>)
1000bc4e:	4798      	blx	r3
1000bc50:	4b23      	ldr	r3, [pc, #140]	; (1000bce0 <sms_gateway_discovery_complete+0xa8>)
1000bc52:	469a      	mov	sl, r3
1000bc54:	2300      	movs	r3, #0
1000bc56:	4699      	mov	r9, r3
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		DBG_LOG_DEV("Peripheral #%d", i);
1000bc58:	4b1e      	ldr	r3, [pc, #120]	; (1000bcd4 <sms_gateway_discovery_complete+0x9c>)
1000bc5a:	4698      	mov	r8, r3
1000bc5c:	481c      	ldr	r0, [pc, #112]	; (1000bcd0 <sms_gateway_discovery_complete+0x98>)
1000bc5e:	47c0      	blx	r8
1000bc60:	4649      	mov	r1, r9
1000bc62:	4820      	ldr	r0, [pc, #128]	; (1000bce4 <sms_gateway_discovery_complete+0xac>)
1000bc64:	4c1d      	ldr	r4, [pc, #116]	; (1000bcdc <sms_gateway_discovery_complete+0xa4>)
1000bc66:	47a0      	blx	r4
		DBG_LOG_DEV(" - id %d", periph_instance[i].id);
1000bc68:	4819      	ldr	r0, [pc, #100]	; (1000bcd0 <sms_gateway_discovery_complete+0x98>)
1000bc6a:	47c0      	blx	r8
1000bc6c:	46d3      	mov	fp, sl
1000bc6e:	4653      	mov	r3, sl
1000bc70:	7819      	ldrb	r1, [r3, #0]
1000bc72:	481d      	ldr	r0, [pc, #116]	; (1000bce8 <sms_gateway_discovery_complete+0xb0>)
1000bc74:	47a0      	blx	r4
		DBG_LOG_DEV(" - conn handle 0x%04x", periph_instance[i].conn_handle);
1000bc76:	4816      	ldr	r0, [pc, #88]	; (1000bcd0 <sms_gateway_discovery_complete+0x98>)
1000bc78:	47c0      	blx	r8
1000bc7a:	4653      	mov	r3, sl
1000bc7c:	8859      	ldrh	r1, [r3, #2]
1000bc7e:	481b      	ldr	r0, [pc, #108]	; (1000bcec <sms_gateway_discovery_complete+0xb4>)
1000bc80:	47a0      	blx	r4
1000bc82:	4655      	mov	r5, sl
1000bc84:	3508      	adds	r5, #8
1000bc86:	2400      	movs	r4, #0
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			DBG_LOG_DEV(" - service%d: %d", j, periph_instance[i].available_services[j]);
1000bc88:	4f12      	ldr	r7, [pc, #72]	; (1000bcd4 <sms_gateway_discovery_complete+0x9c>)
1000bc8a:	4811      	ldr	r0, [pc, #68]	; (1000bcd0 <sms_gateway_discovery_complete+0x98>)
1000bc8c:	47b8      	blx	r7
1000bc8e:	465b      	mov	r3, fp
1000bc90:	191b      	adds	r3, r3, r4
1000bc92:	791a      	ldrb	r2, [r3, #4]
1000bc94:	0021      	movs	r1, r4
1000bc96:	4816      	ldr	r0, [pc, #88]	; (1000bcf0 <sms_gateway_discovery_complete+0xb8>)
1000bc98:	4e10      	ldr	r6, [pc, #64]	; (1000bcdc <sms_gateway_discovery_complete+0xa4>)
1000bc9a:	47b0      	blx	r6
			DBG_LOG_DEV(" - char range: %d - %d", periph_instance[i].service_handle_range[j][0], periph_instance[i].service_handle_range[j][1]);
1000bc9c:	480c      	ldr	r0, [pc, #48]	; (1000bcd0 <sms_gateway_discovery_complete+0x98>)
1000bc9e:	47b8      	blx	r7
1000bca0:	886a      	ldrh	r2, [r5, #2]
1000bca2:	8829      	ldrh	r1, [r5, #0]
1000bca4:	4813      	ldr	r0, [pc, #76]	; (1000bcf4 <sms_gateway_discovery_complete+0xbc>)
1000bca6:	47b0      	blx	r6
1000bca8:	3401      	adds	r4, #1
1000bcaa:	3504      	adds	r5, #4
    DBG_LOG("Discovery complete...");
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		DBG_LOG_DEV("Peripheral #%d", i);
		DBG_LOG_DEV(" - id %d", periph_instance[i].id);
		DBG_LOG_DEV(" - conn handle 0x%04x", periph_instance[i].conn_handle);
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
1000bcac:	2c03      	cmp	r4, #3
1000bcae:	d1ec      	bne.n	1000bc8a <sms_gateway_discovery_complete+0x52>
1000bcb0:	2301      	movs	r3, #1
1000bcb2:	469c      	mov	ip, r3
1000bcb4:	44e1      	add	r9, ip
1000bcb6:	3313      	adds	r3, #19
1000bcb8:	469c      	mov	ip, r3
1000bcba:	44e2      	add	sl, ip

/* Callback registered for AT_BLE_DISCOVERY_COMPLETE (#23) event from stack */
static at_ble_status_t sms_gateway_discovery_complete(void *params)
{
    DBG_LOG("Discovery complete...");
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
1000bcbc:	464b      	mov	r3, r9
1000bcbe:	2b05      	cmp	r3, #5
1000bcc0:	d1cc      	bne.n	1000bc5c <sms_gateway_discovery_complete+0x24>
			DBG_LOG_DEV(" - char range: %d - %d", periph_instance[i].service_handle_range[j][0], periph_instance[i].service_handle_range[j][1]);
		}
	}
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000bcc2:	2000      	movs	r0, #0
1000bcc4:	bc3c      	pop	{r2, r3, r4, r5}
1000bcc6:	4690      	mov	r8, r2
1000bcc8:	4699      	mov	r9, r3
1000bcca:	46a2      	mov	sl, r4
1000bccc:	46ab      	mov	fp, r5
1000bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bcd0:	10011744 	.word	0x10011744
1000bcd4:	100103a1 	.word	0x100103a1
1000bcd8:	10012884 	.word	0x10012884
1000bcdc:	10010281 	.word	0x10010281
1000bce0:	10013e58 	.word	0x10013e58
1000bce4:	1001289c 	.word	0x1001289c
1000bce8:	100128ac 	.word	0x100128ac
1000bcec:	100128b8 	.word	0x100128b8
1000bcf0:	100128d0 	.word	0x100128d0
1000bcf4:	100128e4 	.word	0x100128e4

1000bcf8 <sms_gateway_descr_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DESCRIPTOR_FOUND event from stack */
static at_ble_status_t sms_gateway_descr_found(void *params)
{
1000bcf8:	b510      	push	{r4, lr}
    DBG_LOG("Descriptor found");
1000bcfa:	4804      	ldr	r0, [pc, #16]	; (1000bd0c <sms_gateway_descr_found+0x14>)
1000bcfc:	4b04      	ldr	r3, [pc, #16]	; (1000bd10 <sms_gateway_descr_found+0x18>)
1000bcfe:	4798      	blx	r3
1000bd00:	4804      	ldr	r0, [pc, #16]	; (1000bd14 <sms_gateway_descr_found+0x1c>)
1000bd02:	4b05      	ldr	r3, [pc, #20]	; (1000bd18 <sms_gateway_descr_found+0x20>)
1000bd04:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000bd06:	2000      	movs	r0, #0
1000bd08:	bd10      	pop	{r4, pc}
1000bd0a:	46c0      	nop			; (mov r8, r8)
1000bd0c:	10011744 	.word	0x10011744
1000bd10:	100103a1 	.word	0x100103a1
1000bd14:	100128fc 	.word	0x100128fc
1000bd18:	10010281 	.word	0x10010281

1000bd1c <sms_gateway_char_found>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_FOUND event from stack */
static at_ble_status_t sms_gateway_char_found(void *params)
{
1000bd1c:	b510      	push	{r4, lr}
    DBG_LOG_DEV("Characteristic found");
1000bd1e:	4804      	ldr	r0, [pc, #16]	; (1000bd30 <sms_gateway_char_found+0x14>)
1000bd20:	4b04      	ldr	r3, [pc, #16]	; (1000bd34 <sms_gateway_char_found+0x18>)
1000bd22:	4798      	blx	r3
1000bd24:	4804      	ldr	r0, [pc, #16]	; (1000bd38 <sms_gateway_char_found+0x1c>)
1000bd26:	4b05      	ldr	r3, [pc, #20]	; (1000bd3c <sms_gateway_char_found+0x20>)
1000bd28:	4798      	blx	r3
    UNUSED(params);
    return AT_BLE_SUCCESS;
}
1000bd2a:	2000      	movs	r0, #0
1000bd2c:	bd10      	pop	{r4, pc}
1000bd2e:	46c0      	nop			; (mov r8, r8)
1000bd30:	10011744 	.word	0x10011744
1000bd34:	100103a1 	.word	0x100103a1
1000bd38:	10012910 	.word	0x10012910
1000bd3c:	10010281 	.word	0x10010281

1000bd40 <sms_gateway_service_found>:
/* .... */

/* GATT CLIENT */
/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND (#19) event from stack */
static at_ble_status_t sms_gateway_service_found(void *params)
{
1000bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd42:	465f      	mov	r7, fp
1000bd44:	4646      	mov	r6, r8
1000bd46:	b4c0      	push	{r6, r7}
1000bd48:	b083      	sub	sp, #12
1000bd4a:	4680      	mov	r8, r0
	uint16_t comp_val = 0;
    DBG_LOG_DEV("Primary service found");
1000bd4c:	4e51      	ldr	r6, [pc, #324]	; (1000be94 <sms_gateway_service_found+0x154>)
1000bd4e:	0030      	movs	r0, r6
1000bd50:	4d51      	ldr	r5, [pc, #324]	; (1000be98 <sms_gateway_service_found+0x158>)
1000bd52:	47a8      	blx	r5
1000bd54:	4851      	ldr	r0, [pc, #324]	; (1000be9c <sms_gateway_service_found+0x15c>)
1000bd56:	4c52      	ldr	r4, [pc, #328]	; (1000bea0 <sms_gateway_service_found+0x160>)
1000bd58:	47a0      	blx	r4
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
1000bd5a:	0030      	movs	r0, r6
1000bd5c:	47a8      	blx	r5
1000bd5e:	4851      	ldr	r0, [pc, #324]	; (1000bea4 <sms_gateway_service_found+0x164>)
1000bd60:	47a0      	blx	r4
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
1000bd62:	0030      	movs	r0, r6
1000bd64:	47a8      	blx	r5
1000bd66:	4643      	mov	r3, r8
1000bd68:	7999      	ldrb	r1, [r3, #6]
1000bd6a:	484f      	ldr	r0, [pc, #316]	; (1000bea8 <sms_gateway_service_found+0x168>)
1000bd6c:	47a0      	blx	r4
    DBG_LOG_DEV("  service uuid: 0x");
1000bd6e:	0030      	movs	r0, r6
1000bd70:	47a8      	blx	r5
1000bd72:	484e      	ldr	r0, [pc, #312]	; (1000beac <sms_gateway_service_found+0x16c>)
1000bd74:	47a0      	blx	r4
1000bd76:	4643      	mov	r3, r8
1000bd78:	1ddd      	adds	r5, r3, #7
1000bd7a:	2401      	movs	r4, #1
1000bd7c:	2700      	movs	r7, #0

/* GATT CLIENT */
/* Callback registered for AT_BLE_PRIMARY_SERVICE_FOUND (#19) event from stack */
static at_ble_status_t sms_gateway_service_found(void *params)
{
	uint16_t comp_val = 0;
1000bd7e:	2300      	movs	r3, #0
1000bd80:	469b      	mov	fp, r3
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
    DBG_LOG_DEV("  service uuid: 0x");
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        DBG_LOG_CONT_DEV("%02x", service->service_uuid.uuid[i]);
1000bd82:	4e47      	ldr	r6, [pc, #284]	; (1000bea0 <sms_gateway_service_found+0x160>)
1000bd84:	e003      	b.n	1000bd8e <sms_gateway_service_found+0x4e>
1000bd86:	3701      	adds	r7, #1
1000bd88:	3501      	adds	r5, #1
1000bd8a:	3401      	adds	r4, #1
1000bd8c:	b2e4      	uxtb	r4, r4
1000bd8e:	9501      	str	r5, [sp, #4]
1000bd90:	7829      	ldrb	r1, [r5, #0]
1000bd92:	4847      	ldr	r0, [pc, #284]	; (1000beb0 <sms_gateway_service_found+0x170>)
1000bd94:	47b0      	blx	r6
1000bd96:	b2fb      	uxtb	r3, r7
		if(i == 6) {
1000bd98:	2b06      	cmp	r3, #6
1000bd9a:	d103      	bne.n	1000bda4 <sms_gateway_service_found+0x64>
			comp_val = service->service_uuid.uuid[i];
			comp_val = (comp_val << 8) & 0xff00;
1000bd9c:	782b      	ldrb	r3, [r5, #0]
1000bd9e:	021b      	lsls	r3, r3, #8
1000bda0:	469b      	mov	fp, r3
1000bda2:	e7f0      	b.n	1000bd86 <sms_gateway_service_found+0x46>
			//DBG_LOG_DEV("Comp val: 0x%04x", comp_val);
		}
		else if(i == 7) {
1000bda4:	2b07      	cmp	r3, #7
1000bda6:	d105      	bne.n	1000bdb4 <sms_gateway_service_found+0x74>
			comp_val |= service->service_uuid.uuid[i];
1000bda8:	9b01      	ldr	r3, [sp, #4]
1000bdaa:	781b      	ldrb	r3, [r3, #0]
1000bdac:	465a      	mov	r2, fp
1000bdae:	431a      	orrs	r2, r3
1000bdb0:	4693      	mov	fp, r2
1000bdb2:	e7e8      	b.n	1000bd86 <sms_gateway_service_found+0x46>
    DBG_LOG_DEV("Primary service found");
    at_ble_primary_service_found_t *service = (at_ble_primary_service_found_t *)params;
    DBG_LOG_DEV("[sms_gateway_service_found]  service characteristics:");
    DBG_LOG_DEV("  service type: %d", service->service_uuid.type);
    DBG_LOG_DEV("  service uuid: 0x");
    for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
1000bdb4:	2c0f      	cmp	r4, #15
1000bdb6:	d9e6      	bls.n	1000bd86 <sms_gateway_service_found+0x46>
		else if(i == 7) {
			comp_val |= service->service_uuid.uuid[i];
			//DBG_LOG_DEV("Comp val: 0x%04x", comp_val);
		}
    }
	DBG_LOG_DEV("  comp val: 0x%04x", comp_val);
1000bdb8:	4d36      	ldr	r5, [pc, #216]	; (1000be94 <sms_gateway_service_found+0x154>)
1000bdba:	0028      	movs	r0, r5
1000bdbc:	4e36      	ldr	r6, [pc, #216]	; (1000be98 <sms_gateway_service_found+0x158>)
1000bdbe:	47b0      	blx	r6
1000bdc0:	4659      	mov	r1, fp
1000bdc2:	483c      	ldr	r0, [pc, #240]	; (1000beb4 <sms_gateway_service_found+0x174>)
1000bdc4:	4c36      	ldr	r4, [pc, #216]	; (1000bea0 <sms_gateway_service_found+0x160>)
1000bdc6:	47a0      	blx	r4
    DBG_LOG_DEV("  start handle: %d", service->start_handle);
1000bdc8:	0028      	movs	r0, r5
1000bdca:	47b0      	blx	r6
1000bdcc:	4643      	mov	r3, r8
1000bdce:	8859      	ldrh	r1, [r3, #2]
1000bdd0:	4839      	ldr	r0, [pc, #228]	; (1000beb8 <sms_gateway_service_found+0x178>)
1000bdd2:	47a0      	blx	r4
    DBG_LOG_DEV("  end handle: %d", service->end_handle);
1000bdd4:	0028      	movs	r0, r5
1000bdd6:	47b0      	blx	r6
1000bdd8:	4643      	mov	r3, r8
1000bdda:	8899      	ldrh	r1, [r3, #4]
1000bddc:	4837      	ldr	r0, [pc, #220]	; (1000bebc <sms_gateway_service_found+0x17c>)
1000bdde:	47a0      	blx	r4
	
	if(comp_val == 0xbbbb) {
1000bde0:	4b37      	ldr	r3, [pc, #220]	; (1000bec0 <sms_gateway_service_found+0x180>)
1000bde2:	459b      	cmp	fp, r3
1000bde4:	d118      	bne.n	1000be18 <sms_gateway_service_found+0xd8>
		DBG_LOG_DEV("  button service!");
1000bde6:	482b      	ldr	r0, [pc, #172]	; (1000be94 <sms_gateway_service_found+0x154>)
1000bde8:	4b2b      	ldr	r3, [pc, #172]	; (1000be98 <sms_gateway_service_found+0x158>)
1000bdea:	4798      	blx	r3
1000bdec:	4835      	ldr	r0, [pc, #212]	; (1000bec4 <sms_gateway_service_found+0x184>)
1000bdee:	4b2c      	ldr	r3, [pc, #176]	; (1000bea0 <sms_gateway_service_found+0x160>)
1000bdf0:	4798      	blx	r3
		periph_instance[periph_counter].available_services[SMS_BLE_SERV_BUTTON_POS] = true;
1000bdf2:	4b35      	ldr	r3, [pc, #212]	; (1000bec8 <sms_gateway_service_found+0x188>)
1000bdf4:	781b      	ldrb	r3, [r3, #0]
1000bdf6:	4935      	ldr	r1, [pc, #212]	; (1000becc <sms_gateway_service_found+0x18c>)
1000bdf8:	0098      	lsls	r0, r3, #2
1000bdfa:	18c2      	adds	r2, r0, r3
1000bdfc:	0092      	lsls	r2, r2, #2
1000bdfe:	188a      	adds	r2, r1, r2
1000be00:	2401      	movs	r4, #1
1000be02:	7114      	strb	r4, [r2, #4]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_BUTTON_POS][0] = service->start_handle;
1000be04:	4644      	mov	r4, r8
1000be06:	8864      	ldrh	r4, [r4, #2]
1000be08:	8114      	strh	r4, [r2, #8]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_BUTTON_POS][1] = service->end_handle;
1000be0a:	4642      	mov	r2, r8
1000be0c:	8892      	ldrh	r2, [r2, #4]
1000be0e:	18c3      	adds	r3, r0, r3
1000be10:	009b      	lsls	r3, r3, #2
1000be12:	18cb      	adds	r3, r1, r3
1000be14:	815a      	strh	r2, [r3, #10]
1000be16:	e036      	b.n	1000be86 <sms_gateway_service_found+0x146>
	}
	else if(comp_val == 0xeeee) {
1000be18:	4b2d      	ldr	r3, [pc, #180]	; (1000bed0 <sms_gateway_service_found+0x190>)
1000be1a:	459b      	cmp	fp, r3
1000be1c:	d118      	bne.n	1000be50 <sms_gateway_service_found+0x110>
		DBG_LOG_DEV("  pressure service!");
1000be1e:	481d      	ldr	r0, [pc, #116]	; (1000be94 <sms_gateway_service_found+0x154>)
1000be20:	4b1d      	ldr	r3, [pc, #116]	; (1000be98 <sms_gateway_service_found+0x158>)
1000be22:	4798      	blx	r3
1000be24:	482b      	ldr	r0, [pc, #172]	; (1000bed4 <sms_gateway_service_found+0x194>)
1000be26:	4b1e      	ldr	r3, [pc, #120]	; (1000bea0 <sms_gateway_service_found+0x160>)
1000be28:	4798      	blx	r3
		periph_instance[periph_counter].available_services[SMS_BLE_SERV_PRESSURE_POS] = true;
1000be2a:	4b27      	ldr	r3, [pc, #156]	; (1000bec8 <sms_gateway_service_found+0x188>)
1000be2c:	781b      	ldrb	r3, [r3, #0]
1000be2e:	4927      	ldr	r1, [pc, #156]	; (1000becc <sms_gateway_service_found+0x18c>)
1000be30:	0098      	lsls	r0, r3, #2
1000be32:	18c2      	adds	r2, r0, r3
1000be34:	0092      	lsls	r2, r2, #2
1000be36:	188a      	adds	r2, r1, r2
1000be38:	2401      	movs	r4, #1
1000be3a:	7154      	strb	r4, [r2, #5]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_PRESSURE_POS][0] = service->start_handle;
1000be3c:	4644      	mov	r4, r8
1000be3e:	8864      	ldrh	r4, [r4, #2]
1000be40:	8194      	strh	r4, [r2, #12]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_PRESSURE_POS][1] = service->end_handle;
1000be42:	4642      	mov	r2, r8
1000be44:	8892      	ldrh	r2, [r2, #4]
1000be46:	18c3      	adds	r3, r0, r3
1000be48:	009b      	lsls	r3, r3, #2
1000be4a:	18cb      	adds	r3, r1, r3
1000be4c:	81da      	strh	r2, [r3, #14]
1000be4e:	e01a      	b.n	1000be86 <sms_gateway_service_found+0x146>
	}
	else if(comp_val == 0x1111) {
1000be50:	4b21      	ldr	r3, [pc, #132]	; (1000bed8 <sms_gateway_service_found+0x198>)
1000be52:	459b      	cmp	fp, r3
1000be54:	d117      	bne.n	1000be86 <sms_gateway_service_found+0x146>
		DBG_LOG_DEV("  mpu service!");
1000be56:	480f      	ldr	r0, [pc, #60]	; (1000be94 <sms_gateway_service_found+0x154>)
1000be58:	4b0f      	ldr	r3, [pc, #60]	; (1000be98 <sms_gateway_service_found+0x158>)
1000be5a:	4798      	blx	r3
1000be5c:	481f      	ldr	r0, [pc, #124]	; (1000bedc <sms_gateway_service_found+0x19c>)
1000be5e:	4b10      	ldr	r3, [pc, #64]	; (1000bea0 <sms_gateway_service_found+0x160>)
1000be60:	4798      	blx	r3
		periph_instance[periph_counter].available_services[SMS_BLE_SERV_MPU_POS] = true;
1000be62:	4b19      	ldr	r3, [pc, #100]	; (1000bec8 <sms_gateway_service_found+0x188>)
1000be64:	781b      	ldrb	r3, [r3, #0]
1000be66:	4919      	ldr	r1, [pc, #100]	; (1000becc <sms_gateway_service_found+0x18c>)
1000be68:	0098      	lsls	r0, r3, #2
1000be6a:	18c2      	adds	r2, r0, r3
1000be6c:	0092      	lsls	r2, r2, #2
1000be6e:	188a      	adds	r2, r1, r2
1000be70:	2401      	movs	r4, #1
1000be72:	7194      	strb	r4, [r2, #6]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_MPU_POS][0] = service->start_handle;
1000be74:	4644      	mov	r4, r8
1000be76:	8864      	ldrh	r4, [r4, #2]
1000be78:	8214      	strh	r4, [r2, #16]
		periph_instance[periph_counter].service_handle_range[SMS_BLE_SERV_MPU_POS][1] = service->end_handle;
1000be7a:	4642      	mov	r2, r8
1000be7c:	8892      	ldrh	r2, [r2, #4]
1000be7e:	18c3      	adds	r3, r0, r3
1000be80:	009b      	lsls	r3, r3, #2
1000be82:	18cb      	adds	r3, r1, r3
1000be84:	825a      	strh	r2, [r3, #18]
	}
    return AT_BLE_SUCCESS;
}
1000be86:	2000      	movs	r0, #0
1000be88:	b003      	add	sp, #12
1000be8a:	bc0c      	pop	{r2, r3}
1000be8c:	4690      	mov	r8, r2
1000be8e:	469b      	mov	fp, r3
1000be90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be92:	46c0      	nop			; (mov r8, r8)
1000be94:	10011744 	.word	0x10011744
1000be98:	100103a1 	.word	0x100103a1
1000be9c:	10012928 	.word	0x10012928
1000bea0:	10010281 	.word	0x10010281
1000bea4:	10012940 	.word	0x10012940
1000bea8:	10012978 	.word	0x10012978
1000beac:	1001298c 	.word	0x1001298c
1000beb0:	10012b54 	.word	0x10012b54
1000beb4:	100129a0 	.word	0x100129a0
1000beb8:	100129b4 	.word	0x100129b4
1000bebc:	100129c8 	.word	0x100129c8
1000bec0:	0000bbbb 	.word	0x0000bbbb
1000bec4:	100129dc 	.word	0x100129dc
1000bec8:	10013e0d 	.word	0x10013e0d
1000becc:	10013e58 	.word	0x10013e58
1000bed0:	0000eeee 	.word	0x0000eeee
1000bed4:	100129f0 	.word	0x100129f0
1000bed8:	00001111 	.word	0x00001111
1000bedc:	10012a04 	.word	0x10012a04

1000bee0 <sms_gateway_indication_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_INDICATION_RECIEVED event from stack */
static at_ble_status_t sms_gateway_indication_received(void *param)
{
1000bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bee2:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000bee4:	4b23      	ldr	r3, [pc, #140]	; (1000bf74 <sms_gateway_indication_received+0x94>)
1000bee6:	7818      	ldrb	r0, [r3, #0]
1000bee8:	2101      	movs	r1, #1
1000beea:	4b23      	ldr	r3, [pc, #140]	; (1000bf78 <sms_gateway_indication_received+0x98>)
1000beec:	4798      	blx	r3

    at_ble_indication_recieved_t *indication = (at_ble_indication_recieved_t *)param;
    static uint16_t btn_ind_cnt = 0;
    static uint16_t press_ind_cnt = 0;
    static uint16_t imu_ind_cnt = 0;
    switch(indication->char_len) {
1000beee:	78ab      	ldrb	r3, [r5, #2]
1000bef0:	2b08      	cmp	r3, #8
1000bef2:	d00f      	beq.n	1000bf14 <sms_gateway_indication_received+0x34>
1000bef4:	2b0c      	cmp	r3, #12
1000bef6:	d022      	beq.n	1000bf3e <sms_gateway_indication_received+0x5e>
1000bef8:	2b01      	cmp	r3, #1
1000befa:	d134      	bne.n	1000bf66 <sms_gateway_indication_received+0x86>
        case 1:
        DBG_LOG_DEV("BTN %d: 0x%02x", btn_ind_cnt++, indication->char_value[0]);
1000befc:	481f      	ldr	r0, [pc, #124]	; (1000bf7c <sms_gateway_indication_received+0x9c>)
1000befe:	4b20      	ldr	r3, [pc, #128]	; (1000bf80 <sms_gateway_indication_received+0xa0>)
1000bf00:	4798      	blx	r3
1000bf02:	4b20      	ldr	r3, [pc, #128]	; (1000bf84 <sms_gateway_indication_received+0xa4>)
1000bf04:	8819      	ldrh	r1, [r3, #0]
1000bf06:	1c4a      	adds	r2, r1, #1
1000bf08:	801a      	strh	r2, [r3, #0]
1000bf0a:	79aa      	ldrb	r2, [r5, #6]
1000bf0c:	481e      	ldr	r0, [pc, #120]	; (1000bf88 <sms_gateway_indication_received+0xa8>)
1000bf0e:	4b1f      	ldr	r3, [pc, #124]	; (1000bf8c <sms_gateway_indication_received+0xac>)
1000bf10:	4798      	blx	r3
        break;
1000bf12:	e028      	b.n	1000bf66 <sms_gateway_indication_received+0x86>
        
        case 8:
        DBG_LOG_DEV("\t\tPRESS %d: 0x", press_ind_cnt++);
1000bf14:	4819      	ldr	r0, [pc, #100]	; (1000bf7c <sms_gateway_indication_received+0x9c>)
1000bf16:	4b1a      	ldr	r3, [pc, #104]	; (1000bf80 <sms_gateway_indication_received+0xa0>)
1000bf18:	4798      	blx	r3
1000bf1a:	4b1d      	ldr	r3, [pc, #116]	; (1000bf90 <sms_gateway_indication_received+0xb0>)
1000bf1c:	8819      	ldrh	r1, [r3, #0]
1000bf1e:	1c4a      	adds	r2, r1, #1
1000bf20:	801a      	strh	r2, [r3, #0]
1000bf22:	481c      	ldr	r0, [pc, #112]	; (1000bf94 <sms_gateway_indication_received+0xb4>)
1000bf24:	4b19      	ldr	r3, [pc, #100]	; (1000bf8c <sms_gateway_indication_received+0xac>)
1000bf26:	4798      	blx	r3
1000bf28:	1dac      	adds	r4, r5, #6
1000bf2a:	350e      	adds	r5, #14
        for(uint8_t i = 0; i < 8; i++) {
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
1000bf2c:	4f1a      	ldr	r7, [pc, #104]	; (1000bf98 <sms_gateway_indication_received+0xb8>)
1000bf2e:	4e17      	ldr	r6, [pc, #92]	; (1000bf8c <sms_gateway_indication_received+0xac>)
1000bf30:	7821      	ldrb	r1, [r4, #0]
1000bf32:	0038      	movs	r0, r7
1000bf34:	47b0      	blx	r6
1000bf36:	3401      	adds	r4, #1
        DBG_LOG_DEV("BTN %d: 0x%02x", btn_ind_cnt++, indication->char_value[0]);
        break;
        
        case 8:
        DBG_LOG_DEV("\t\tPRESS %d: 0x", press_ind_cnt++);
        for(uint8_t i = 0; i < 8; i++) {
1000bf38:	42ac      	cmp	r4, r5
1000bf3a:	d1f9      	bne.n	1000bf30 <sms_gateway_indication_received+0x50>
1000bf3c:	e013      	b.n	1000bf66 <sms_gateway_indication_received+0x86>
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
        }
        break;
        
        case 12:
        DBG_LOG_DEV("\t\t\t\tIMU %d: 0x", imu_ind_cnt++);
1000bf3e:	480f      	ldr	r0, [pc, #60]	; (1000bf7c <sms_gateway_indication_received+0x9c>)
1000bf40:	4b0f      	ldr	r3, [pc, #60]	; (1000bf80 <sms_gateway_indication_received+0xa0>)
1000bf42:	4798      	blx	r3
1000bf44:	4b15      	ldr	r3, [pc, #84]	; (1000bf9c <sms_gateway_indication_received+0xbc>)
1000bf46:	8819      	ldrh	r1, [r3, #0]
1000bf48:	1c4a      	adds	r2, r1, #1
1000bf4a:	801a      	strh	r2, [r3, #0]
1000bf4c:	4814      	ldr	r0, [pc, #80]	; (1000bfa0 <sms_gateway_indication_received+0xc0>)
1000bf4e:	4b0f      	ldr	r3, [pc, #60]	; (1000bf8c <sms_gateway_indication_received+0xac>)
1000bf50:	4798      	blx	r3
1000bf52:	1dac      	adds	r4, r5, #6
1000bf54:	3512      	adds	r5, #18
        for(uint8_t i = 0; i < 12; i++) {
            DBG_LOG_CONT_DEV("%02x", indication->char_value[i]);
1000bf56:	4e10      	ldr	r6, [pc, #64]	; (1000bf98 <sms_gateway_indication_received+0xb8>)
1000bf58:	4f0c      	ldr	r7, [pc, #48]	; (1000bf8c <sms_gateway_indication_received+0xac>)
1000bf5a:	7821      	ldrb	r1, [r4, #0]
1000bf5c:	0030      	movs	r0, r6
1000bf5e:	47b8      	blx	r7
1000bf60:	3401      	adds	r4, #1
        }
        break;
        
        case 12:
        DBG_LOG_DEV("\t\t\t\tIMU %d: 0x", imu_ind_cnt++);
        for(uint8_t i = 0; i < 12; i++) {
1000bf62:	42ac      	cmp	r4, r5
1000bf64:	d1f9      	bne.n	1000bf5a <sms_gateway_indication_received+0x7a>
    //DBG_LOG_DEV("Indication received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d", indication->conn_handle, indication->char_handle, indication->char_len);
    //for(uint8_t i = 0; i < indication->char_len; i++) {
        //DBG_LOG_CONT_DEV("\r\n- char value[%d]: 0x%02x", i, indication->char_value[i]);
    //}
 
    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000bf66:	4b03      	ldr	r3, [pc, #12]	; (1000bf74 <sms_gateway_indication_received+0x94>)
1000bf68:	7818      	ldrb	r0, [r3, #0]
1000bf6a:	2100      	movs	r1, #0
1000bf6c:	4b02      	ldr	r3, [pc, #8]	; (1000bf78 <sms_gateway_indication_received+0x98>)
1000bf6e:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000bf70:	2000      	movs	r0, #0
1000bf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bf74:	10012eb8 	.word	0x10012eb8
1000bf78:	100083c5 	.word	0x100083c5
1000bf7c:	10011744 	.word	0x10011744
1000bf80:	100103a1 	.word	0x100103a1
1000bf84:	10013086 	.word	0x10013086
1000bf88:	10012a14 	.word	0x10012a14
1000bf8c:	10010281 	.word	0x10010281
1000bf90:	10013082 	.word	0x10013082
1000bf94:	10012a24 	.word	0x10012a24
1000bf98:	10012b54 	.word	0x10012b54
1000bf9c:	1001303e 	.word	0x1001303e
1000bfa0:	10012a34 	.word	0x10012a34

1000bfa4 <sms_gateway_notification_received>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_NOTIFICATION_RECIEVED (#27) event from stack */
static at_ble_status_t sms_gateway_notification_received(void *params)
{
1000bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bfa6:	464f      	mov	r7, r9
1000bfa8:	4646      	mov	r6, r8
1000bfaa:	b4c0      	push	{r6, r7}
1000bfac:	0005      	movs	r5, r0
    gpio_pin_set_output_level(dbg_gpio_pin, true);
1000bfae:	4b3e      	ldr	r3, [pc, #248]	; (1000c0a8 <sms_gateway_notification_received+0x104>)
1000bfb0:	7818      	ldrb	r0, [r3, #0]
1000bfb2:	2101      	movs	r1, #1
1000bfb4:	4b3d      	ldr	r3, [pc, #244]	; (1000c0ac <sms_gateway_notification_received+0x108>)
1000bfb6:	4798      	blx	r3

    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
1000bfb8:	4c3d      	ldr	r4, [pc, #244]	; (1000c0b0 <sms_gateway_notification_received+0x10c>)
1000bfba:	8823      	ldrh	r3, [r4, #0]
1000bfbc:	3301      	adds	r3, #1
1000bfbe:	8023      	strh	r3, [r4, #0]
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
1000bfc0:	4e3c      	ldr	r6, [pc, #240]	; (1000c0b4 <sms_gateway_notification_received+0x110>)
1000bfc2:	0030      	movs	r0, r6
1000bfc4:	4f3c      	ldr	r7, [pc, #240]	; (1000c0b8 <sms_gateway_notification_received+0x114>)
1000bfc6:	47b8      	blx	r7
1000bfc8:	8821      	ldrh	r1, [r4, #0]
1000bfca:	483c      	ldr	r0, [pc, #240]	; (1000c0bc <sms_gateway_notification_received+0x118>)
1000bfcc:	4c3c      	ldr	r4, [pc, #240]	; (1000c0c0 <sms_gateway_notification_received+0x11c>)
1000bfce:	47a0      	blx	r4
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
1000bfd0:	0030      	movs	r0, r6
1000bfd2:	47b8      	blx	r7
1000bfd4:	78ab      	ldrb	r3, [r5, #2]
1000bfd6:	88aa      	ldrh	r2, [r5, #4]
1000bfd8:	8829      	ldrh	r1, [r5, #0]
1000bfda:	483a      	ldr	r0, [pc, #232]	; (1000c0c4 <sms_gateway_notification_received+0x120>)
1000bfdc:	47a0      	blx	r4
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000bfde:	78ab      	ldrb	r3, [r5, #2]
1000bfe0:	2b00      	cmp	r3, #0
1000bfe2:	d00b      	beq.n	1000bffc <sms_gateway_notification_received+0x58>
1000bfe4:	2400      	movs	r4, #0
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
1000bfe6:	4e38      	ldr	r6, [pc, #224]	; (1000c0c8 <sms_gateway_notification_received+0x124>)
1000bfe8:	4f35      	ldr	r7, [pc, #212]	; (1000c0c0 <sms_gateway_notification_received+0x11c>)
1000bfea:	192b      	adds	r3, r5, r4
1000bfec:	7999      	ldrb	r1, [r3, #6]
1000bfee:	0030      	movs	r0, r6
1000bff0:	47b8      	blx	r7
    static uint16_t sms_rcv_cnt = 0;
    at_ble_notification_recieved_t *notification = (at_ble_notification_recieved_t *)params;
    sms_rcv_cnt++;
    DBG_LOG_DEV("cnt: %d", sms_rcv_cnt);
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
    for(uint8_t i = 0; i < notification->char_len; i++) {
1000bff2:	3401      	adds	r4, #1
1000bff4:	b2e4      	uxtb	r4, r4
1000bff6:	78ab      	ldrb	r3, [r5, #2]
1000bff8:	42a3      	cmp	r3, r4
1000bffa:	d8f6      	bhi.n	1000bfea <sms_gateway_notification_received+0x46>
1000bffc:	4c33      	ldr	r4, [pc, #204]	; (1000c0cc <sms_gateway_notification_received+0x128>)
1000bffe:	0026      	movs	r6, r4
1000c000:	3664      	adds	r6, #100	; 0x64
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		if(periph_instance[i].conn_handle == notification->conn_handle) {
1000c002:	8862      	ldrh	r2, [r4, #2]
1000c004:	882b      	ldrh	r3, [r5, #0]
1000c006:	429a      	cmp	r2, r3
1000c008:	d140      	bne.n	1000c08c <sms_gateway_notification_received+0xe8>
			spi_message.periph_id = periph_instance[i].id;
1000c00a:	7823      	ldrb	r3, [r4, #0]
1000c00c:	4a30      	ldr	r2, [pc, #192]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c00e:	7013      	strb	r3, [r2, #0]
			for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
				if((notification->char_handle > periph_instance[i].service_handle_range[j][0]) && (notification->char_handle < periph_instance[i].service_handle_range[j][1])) {
1000c010:	88a8      	ldrh	r0, [r5, #4]
1000c012:	0022      	movs	r2, r4
1000c014:	3208      	adds	r2, #8
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		if(periph_instance[i].conn_handle == notification->conn_handle) {
			spi_message.periph_id = periph_instance[i].id;
			for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
1000c016:	2300      	movs	r3, #0
				if((notification->char_handle > periph_instance[i].service_handle_range[j][0]) && (notification->char_handle < periph_instance[i].service_handle_range[j][1])) {
1000c018:	8811      	ldrh	r1, [r2, #0]
1000c01a:	4281      	cmp	r1, r0
1000c01c:	d231      	bcs.n	1000c082 <sms_gateway_notification_received+0xde>
1000c01e:	8851      	ldrh	r1, [r2, #2]
1000c020:	4281      	cmp	r1, r0
1000c022:	d92e      	bls.n	1000c082 <sms_gateway_notification_received+0xde>
					spi_message.service = j;
1000c024:	4a2a      	ldr	r2, [pc, #168]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c026:	7053      	strb	r3, [r2, #1]
					spi_message.length = notification->char_len;
1000c028:	78ab      	ldrb	r3, [r5, #2]
1000c02a:	7093      	strb	r3, [r2, #2]
					DBG_LOG_DEV("Peripheral %d, service %d, length %d", spi_message.periph_id, spi_message.service, spi_message.length);
1000c02c:	4821      	ldr	r0, [pc, #132]	; (1000c0b4 <sms_gateway_notification_received+0x110>)
1000c02e:	4b22      	ldr	r3, [pc, #136]	; (1000c0b8 <sms_gateway_notification_received+0x114>)
1000c030:	4698      	mov	r8, r3
1000c032:	4798      	blx	r3
1000c034:	4b26      	ldr	r3, [pc, #152]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c036:	789b      	ldrb	r3, [r3, #2]
1000c038:	4a25      	ldr	r2, [pc, #148]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c03a:	7852      	ldrb	r2, [r2, #1]
1000c03c:	4924      	ldr	r1, [pc, #144]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c03e:	7809      	ldrb	r1, [r1, #0]
1000c040:	4824      	ldr	r0, [pc, #144]	; (1000c0d4 <sms_gateway_notification_received+0x130>)
1000c042:	4f1f      	ldr	r7, [pc, #124]	; (1000c0c0 <sms_gateway_notification_received+0x11c>)
1000c044:	47b8      	blx	r7
					DBG_LOG_DEV("Data 0x");
1000c046:	481b      	ldr	r0, [pc, #108]	; (1000c0b4 <sms_gateway_notification_received+0x110>)
1000c048:	47c0      	blx	r8
1000c04a:	4823      	ldr	r0, [pc, #140]	; (1000c0d8 <sms_gateway_notification_received+0x134>)
1000c04c:	47b8      	blx	r7
					for(uint8_t k = 0; k < spi_message.length; k++) {
1000c04e:	4b20      	ldr	r3, [pc, #128]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c050:	789b      	ldrb	r3, [r3, #2]
1000c052:	2b00      	cmp	r3, #0
1000c054:	d01a      	beq.n	1000c08c <sms_gateway_notification_received+0xe8>
1000c056:	2700      	movs	r7, #0
						spi_message.data[k] = notification->char_value[k];
1000c058:	4b1d      	ldr	r3, [pc, #116]	; (1000c0d0 <sms_gateway_notification_received+0x12c>)
1000c05a:	4699      	mov	r9, r3
						DBG_LOG_CONT_DEV("%02x ", spi_message.data[k]);
1000c05c:	4b18      	ldr	r3, [pc, #96]	; (1000c0c0 <sms_gateway_notification_received+0x11c>)
1000c05e:	4698      	mov	r8, r3
					spi_message.service = j;
					spi_message.length = notification->char_len;
					DBG_LOG_DEV("Peripheral %d, service %d, length %d", spi_message.periph_id, spi_message.service, spi_message.length);
					DBG_LOG_DEV("Data 0x");
					for(uint8_t k = 0; k < spi_message.length; k++) {
						spi_message.data[k] = notification->char_value[k];
1000c060:	19eb      	adds	r3, r5, r7
1000c062:	7999      	ldrb	r1, [r3, #6]
1000c064:	464b      	mov	r3, r9
1000c066:	19db      	adds	r3, r3, r7
1000c068:	70d9      	strb	r1, [r3, #3]
						DBG_LOG_CONT_DEV("%02x ", spi_message.data[k]);
1000c06a:	481c      	ldr	r0, [pc, #112]	; (1000c0dc <sms_gateway_notification_received+0x138>)
1000c06c:	47c0      	blx	r8
						spi_send = true;
1000c06e:	2201      	movs	r2, #1
1000c070:	4b1b      	ldr	r3, [pc, #108]	; (1000c0e0 <sms_gateway_notification_received+0x13c>)
1000c072:	701a      	strb	r2, [r3, #0]
				if((notification->char_handle > periph_instance[i].service_handle_range[j][0]) && (notification->char_handle < periph_instance[i].service_handle_range[j][1])) {
					spi_message.service = j;
					spi_message.length = notification->char_len;
					DBG_LOG_DEV("Peripheral %d, service %d, length %d", spi_message.periph_id, spi_message.service, spi_message.length);
					DBG_LOG_DEV("Data 0x");
					for(uint8_t k = 0; k < spi_message.length; k++) {
1000c074:	1c7b      	adds	r3, r7, #1
1000c076:	b2df      	uxtb	r7, r3
1000c078:	464b      	mov	r3, r9
1000c07a:	789b      	ldrb	r3, [r3, #2]
1000c07c:	42bb      	cmp	r3, r7
1000c07e:	d8ef      	bhi.n	1000c060 <sms_gateway_notification_received+0xbc>
1000c080:	e004      	b.n	1000c08c <sms_gateway_notification_received+0xe8>
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		if(periph_instance[i].conn_handle == notification->conn_handle) {
			spi_message.periph_id = periph_instance[i].id;
			for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
1000c082:	3301      	adds	r3, #1
1000c084:	b2db      	uxtb	r3, r3
1000c086:	3204      	adds	r2, #4
1000c088:	2b03      	cmp	r3, #3
1000c08a:	d1c5      	bne.n	1000c018 <sms_gateway_notification_received+0x74>
1000c08c:	3414      	adds	r4, #20
    DBG_LOG("[sms_gateway_notification_received]\tNotification received...\r\n- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- char len: %d\r\n- char value: 0x", notification->conn_handle, notification->char_handle, notification->char_len);
    for(uint8_t i = 0; i < notification->char_len; i++) {
        DBG_LOG_CONT_DEV("%02x", notification->char_value[i]);
    }
	
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
1000c08e:	42b4      	cmp	r4, r6
1000c090:	d1b7      	bne.n	1000c002 <sms_gateway_notification_received+0x5e>
			}
		}
	}
	

    gpio_pin_set_output_level(dbg_gpio_pin, false);
1000c092:	4b05      	ldr	r3, [pc, #20]	; (1000c0a8 <sms_gateway_notification_received+0x104>)
1000c094:	7818      	ldrb	r0, [r3, #0]
1000c096:	2100      	movs	r1, #0
1000c098:	4b04      	ldr	r3, [pc, #16]	; (1000c0ac <sms_gateway_notification_received+0x108>)
1000c09a:	4798      	blx	r3

    return AT_BLE_SUCCESS;
}
1000c09c:	2000      	movs	r0, #0
1000c09e:	bc0c      	pop	{r2, r3}
1000c0a0:	4690      	mov	r8, r2
1000c0a2:	4699      	mov	r9, r3
1000c0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c0a6:	46c0      	nop			; (mov r8, r8)
1000c0a8:	10012eb8 	.word	0x10012eb8
1000c0ac:	100083c5 	.word	0x100083c5
1000c0b0:	10013084 	.word	0x10013084
1000c0b4:	10011744 	.word	0x10011744
1000c0b8:	100103a1 	.word	0x100103a1
1000c0bc:	10012a44 	.word	0x10012a44
1000c0c0:	10010281 	.word	0x10010281
1000c0c4:	10012a4c 	.word	0x10012a4c
1000c0c8:	10012b54 	.word	0x10012b54
1000c0cc:	10013e58 	.word	0x10013e58
1000c0d0:	10013e14 	.word	0x10013e14
1000c0d4:	10012adc 	.word	0x10012adc
1000c0d8:	10012b04 	.word	0x10012b04
1000c0dc:	10012d70 	.word	0x10012d70
1000c0e0:	10013e0c 	.word	0x10013e0c

1000c0e4 <ble_connected_app_event>:
    return AT_BLE_FAILURE;
}

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
1000c0e4:	b510      	push	{r4, lr}
1000c0e6:	0004      	movs	r4, r0
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000c0e8:	8900      	ldrh	r0, [r0, #8]
1000c0ea:	4b08      	ldr	r3, [pc, #32]	; (1000c10c <ble_connected_app_event+0x28>)
1000c0ec:	4798      	blx	r3
    {
        return AT_BLE_FAILURE;
1000c0ee:	23e2      	movs	r3, #226	; 0xe2
static at_ble_status_t ble_connected_app_event(void *params)
{
    at_ble_connected_t *conn_params;
    conn_params = (at_ble_connected_t *)params;

    if(!ble_check_iscentral(conn_params->handle))
1000c0f0:	2800      	cmp	r0, #0
1000c0f2:	d009      	beq.n	1000c108 <ble_connected_app_event+0x24>
    {
        return AT_BLE_FAILURE;
    }
    
    DBG_LOG_DEV("Device connected...");
1000c0f4:	4806      	ldr	r0, [pc, #24]	; (1000c110 <ble_connected_app_event+0x2c>)
1000c0f6:	4b07      	ldr	r3, [pc, #28]	; (1000c114 <ble_connected_app_event+0x30>)
1000c0f8:	4798      	blx	r3
1000c0fa:	4807      	ldr	r0, [pc, #28]	; (1000c118 <ble_connected_app_event+0x34>)
1000c0fc:	4b07      	ldr	r3, [pc, #28]	; (1000c11c <ble_connected_app_event+0x38>)
1000c0fe:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_CONNECTED;
1000c100:	2202      	movs	r2, #2
1000c102:	4b07      	ldr	r3, [pc, #28]	; (1000c120 <ble_connected_app_event+0x3c>)
1000c104:	701a      	strb	r2, [r3, #0]
    return conn_params->conn_status;
1000c106:	7aa3      	ldrb	r3, [r4, #10]
}
1000c108:	0018      	movs	r0, r3
1000c10a:	bd10      	pop	{r4, pc}
1000c10c:	1000af15 	.word	0x1000af15
1000c110:	10011744 	.word	0x10011744
1000c114:	100103a1 	.word	0x100103a1
1000c118:	10012b0c 	.word	0x10012b0c
1000c11c:	10010281 	.word	0x10010281
1000c120:	1001303c 	.word	0x1001303c

1000c124 <ble_scan_data_app_event>:
/* ------------------ */

/* GAP */
/* Callback registered for AT_BLE_SCAN_REPORT (#2) event from stack */
static at_ble_status_t ble_scan_data_app_event(void *param)
{
1000c124:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c126:	465f      	mov	r7, fp
1000c128:	4656      	mov	r6, sl
1000c12a:	464d      	mov	r5, r9
1000c12c:	4644      	mov	r4, r8
1000c12e:	b4f0      	push	{r4, r5, r6, r7}
1000c130:	b097      	sub	sp, #92	; 0x5c
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
1000c132:	4b73      	ldr	r3, [pc, #460]	; (1000c300 <ble_scan_data_app_event+0x1dc>)
1000c134:	781c      	ldrb	r4, [r3, #0]
1000c136:	b2e4      	uxtb	r4, r4
    scan_index = 0;
1000c138:	2200      	movs	r2, #0
1000c13a:	4b72      	ldr	r3, [pc, #456]	; (1000c304 <ble_scan_data_app_event+0x1e0>)
1000c13c:	701a      	strb	r2, [r3, #0]
    bool device_identified = false;
    uint8_t device_index = 0;
    char search_pattern1[strlen(SMS_ID_PATTERN1)];
    char search_pattern2[strlen(SMS_ID_PATTERN2)];
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
1000c13e:	3214      	adds	r2, #20
1000c140:	2100      	movs	r1, #0
1000c142:	a80e      	add	r0, sp, #56	; 0x38
1000c144:	4b70      	ldr	r3, [pc, #448]	; (1000c308 <ble_scan_data_app_event+0x1e4>)
1000c146:	4798      	blx	r3
    if (scanned_dev_count) {
1000c148:	2c00      	cmp	r4, #0
1000c14a:	d100      	bne.n	1000c14e <ble_scan_data_app_event+0x2a>
1000c14c:	e0c0      	b.n	1000c2d0 <ble_scan_data_app_event+0x1ac>
1000c14e:	4a6f      	ldr	r2, [pc, #444]	; (1000c30c <ble_scan_data_app_event+0x1e8>)
1000c150:	2300      	movs	r3, #0
1000c152:	2100      	movs	r1, #0
1000c154:	0008      	movs	r0, r1
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
            /* Display only the connectible devices*/
            if((scan_buffer[index].type == AT_BLE_ADV_TYPE_DIRECTED)
1000c156:	7811      	ldrb	r1, [r2, #0]
1000c158:	2901      	cmp	r1, #1
1000c15a:	d803      	bhi.n	1000c164 <ble_scan_data_app_event+0x40>
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
1000c15c:	1c41      	adds	r1, r0, #1
1000c15e:	ad0e      	add	r5, sp, #56	; 0x38
1000c160:	542b      	strb	r3, [r5, r0]
1000c162:	b2c8      	uxtb	r0, r1
    at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
    memset(scan_device, 0, MAX_SCAN_DEVICE);
    if (scanned_dev_count) {
        at_ble_uuid_t service_uuid;

        for (index = 0; index < scanned_dev_count; index++) {
1000c164:	3301      	adds	r3, #1
1000c166:	b2db      	uxtb	r3, r3
1000c168:	3229      	adds	r2, #41	; 0x29
1000c16a:	429c      	cmp	r4, r3
1000c16c:	d1f3      	bne.n	1000c156 <ble_scan_data_app_event+0x32>
1000c16e:	9007      	str	r0, [sp, #28]
            || (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {
                scan_device[scan_device_count++] = index;
            }
        }
        
        if (scan_device_count) {
1000c170:	2800      	cmp	r0, #0
1000c172:	d100      	bne.n	1000c176 <ble_scan_data_app_event+0x52>
1000c174:	e083      	b.n	1000c27e <ble_scan_data_app_event+0x15a>
            /* Service type to be searched */
            service_uuid.type = AT_BLE_UUID_16;
1000c176:	ab09      	add	r3, sp, #36	; 0x24
1000c178:	2200      	movs	r2, #0
1000c17a:	701a      	strb	r2, [r3, #0]

            /* Service UUID */
            service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
1000c17c:	3218      	adds	r2, #24
1000c17e:	709a      	strb	r2, [r3, #2]
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
1000c180:	3a15      	subs	r2, #21
1000c182:	705a      	strb	r2, [r3, #1]
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
1000c184:	aa13      	add	r2, sp, #76	; 0x4c
1000c186:	4b62      	ldr	r3, [pc, #392]	; (1000c310 <ble_scan_data_app_event+0x1ec>)
1000c188:	cb03      	ldmia	r3!, {r0, r1}
1000c18a:	c203      	stmia	r2!, {r0, r1}
1000c18c:	781b      	ldrb	r3, [r3, #0]
1000c18e:	7013      	strb	r3, [r2, #0]
1000c190:	9b07      	ldr	r3, [sp, #28]
1000c192:	3b01      	subs	r3, #1
1000c194:	b2db      	uxtb	r3, r3
1000c196:	3301      	adds	r3, #1
1000c198:	9304      	str	r3, [sp, #16]
1000c19a:	2300      	movs	r3, #0
1000c19c:	4699      	mov	r9, r3
1000c19e:	9306      	str	r3, [sp, #24]
1000c1a0:	9305      	str	r3, [sp, #20]
1000c1a2:	464c      	mov	r4, r9
1000c1a4:	b2e3      	uxtb	r3, r4
1000c1a6:	469b      	mov	fp, r3
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c1a8:	485a      	ldr	r0, [pc, #360]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c1aa:	4b5b      	ldr	r3, [pc, #364]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c1ac:	4798      	blx	r3
                index,
                scan_buffer[scan_device[index]].dev_addr.addr[5],
1000c1ae:	ab0e      	add	r3, sp, #56	; 0x38
1000c1b0:	5ce3      	ldrb	r3, [r4, r3]
1000c1b2:	009a      	lsls	r2, r3, #2
1000c1b4:	18d2      	adds	r2, r2, r3
1000c1b6:	00d2      	lsls	r2, r2, #3
1000c1b8:	18d3      	adds	r3, r2, r3
1000c1ba:	4a54      	ldr	r2, [pc, #336]	; (1000c30c <ble_scan_data_app_event+0x1e8>)
1000c1bc:	4690      	mov	r8, r2
1000c1be:	4498      	add	r8, r3
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
                DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c1c0:	4643      	mov	r3, r8
1000c1c2:	799b      	ldrb	r3, [r3, #6]
1000c1c4:	4642      	mov	r2, r8
1000c1c6:	79d2      	ldrb	r2, [r2, #7]
1000c1c8:	4641      	mov	r1, r8
1000c1ca:	7889      	ldrb	r1, [r1, #2]
1000c1cc:	9103      	str	r1, [sp, #12]
1000c1ce:	4641      	mov	r1, r8
1000c1d0:	78c9      	ldrb	r1, [r1, #3]
1000c1d2:	9102      	str	r1, [sp, #8]
1000c1d4:	4641      	mov	r1, r8
1000c1d6:	7909      	ldrb	r1, [r1, #4]
1000c1d8:	9101      	str	r1, [sp, #4]
1000c1da:	4641      	mov	r1, r8
1000c1dc:	7949      	ldrb	r1, [r1, #5]
1000c1de:	9100      	str	r1, [sp, #0]
1000c1e0:	4649      	mov	r1, r9
1000c1e2:	484e      	ldr	r0, [pc, #312]	; (1000c31c <ble_scan_data_app_event+0x1f8>)
1000c1e4:	4c4e      	ldr	r4, [pc, #312]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c1e6:	47a0      	blx	r4
                scan_buffer[scan_device[index]].dev_addr.addr[3],
                scan_buffer[scan_device[index]].dev_addr.addr[2],
                scan_buffer[scan_device[index]].dev_addr.addr[1],
                scan_buffer[scan_device[index]].dev_addr.addr[0]);

                DBG_LOG_DEV("      - advertised data: 0x ");
1000c1e8:	484a      	ldr	r0, [pc, #296]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c1ea:	4b4b      	ldr	r3, [pc, #300]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c1ec:	4798      	blx	r3
1000c1ee:	484d      	ldr	r0, [pc, #308]	; (1000c324 <ble_scan_data_app_event+0x200>)
1000c1f0:	47a0      	blx	r4
1000c1f2:	4644      	mov	r4, r8
1000c1f4:	3408      	adds	r4, #8
1000c1f6:	2327      	movs	r3, #39	; 0x27
1000c1f8:	4443      	add	r3, r8
1000c1fa:	469a      	mov	sl, r3
                uint8_t i = 0;
                uint8_t search_index = 0;
1000c1fc:	2600      	movs	r6, #0
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
                    if(id1) {
                        DBG_LOG_DEV("%02x... looking for %02x", scan_buffer[scan_device[index]].adv_data[i], search_pattern1[search_index]);
1000c1fe:	4f46      	ldr	r7, [pc, #280]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c200:	4844      	ldr	r0, [pc, #272]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c202:	47b8      	blx	r7
1000c204:	ab13      	add	r3, sp, #76	; 0x4c
1000c206:	5d9d      	ldrb	r5, [r3, r6]
1000c208:	7821      	ldrb	r1, [r4, #0]
1000c20a:	002a      	movs	r2, r5
1000c20c:	4846      	ldr	r0, [pc, #280]	; (1000c328 <ble_scan_data_app_event+0x204>)
1000c20e:	4b44      	ldr	r3, [pc, #272]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c210:	4798      	blx	r3
                        if(scan_buffer[scan_device[index]].adv_data[i] == search_pattern1[search_index]) {
1000c212:	7823      	ldrb	r3, [r4, #0]
1000c214:	42ab      	cmp	r3, r5
1000c216:	d113      	bne.n	1000c240 <ble_scan_data_app_event+0x11c>
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
1000c218:	0031      	movs	r1, r6
1000c21a:	4844      	ldr	r0, [pc, #272]	; (1000c32c <ble_scan_data_app_event+0x208>)
1000c21c:	4b40      	ldr	r3, [pc, #256]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c21e:	4798      	blx	r3
                            if(search_index < (sizeof(search_pattern1)-1)) {
1000c220:	2e07      	cmp	r6, #7
1000c222:	d802      	bhi.n	1000c22a <ble_scan_data_app_event+0x106>
                                search_index += 1;
1000c224:	3601      	adds	r6, #1
1000c226:	b2f6      	uxtb	r6, r6
1000c228:	e00a      	b.n	1000c240 <ble_scan_data_app_event+0x11c>
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
1000c22a:	483a      	ldr	r0, [pc, #232]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c22c:	4b3a      	ldr	r3, [pc, #232]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c22e:	4798      	blx	r3
1000c230:	483f      	ldr	r0, [pc, #252]	; (1000c330 <ble_scan_data_app_event+0x20c>)
1000c232:	4b3b      	ldr	r3, [pc, #236]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c234:	4798      	blx	r3
                                device_identified = true;
                                device_index = index;
                                break;
1000c236:	465b      	mov	r3, fp
1000c238:	9306      	str	r3, [sp, #24]
                            DBG_LOG_CONT_DEV(" FOUND! ...index: %d", search_index);
                            if(search_index < (sizeof(search_pattern1)-1)) {
                                search_index += 1;
                                } else {
                                DBG_LOG_DEV("PATTERN1 MATCHING!!!");
                                device_identified = true;
1000c23a:	2301      	movs	r3, #1
1000c23c:	9305      	str	r3, [sp, #20]
                                device_index = index;
                                break;
1000c23e:	e002      	b.n	1000c246 <ble_scan_data_app_event+0x122>
1000c240:	3401      	adds	r4, #1
                DBG_LOG_DEV("      - advertised data: 0x ");
                uint8_t i = 0;
                uint8_t search_index = 0;
                bool id1 = true;
                bool id2 = false;
                for(i = 0; i < AT_BLE_ADV_MAX_SIZE; i++) {
1000c242:	4554      	cmp	r4, sl
1000c244:	d1dc      	bne.n	1000c200 <ble_scan_data_app_event+0xdc>
                            }
                        }
                    }
                }
                
                if (scan_info_parse(&scan_buffer[scan_device[index]], &service_uuid, AD_TYPE_COMPLETE_LIST_UUID) == AT_BLE_SUCCESS) {
1000c246:	2203      	movs	r2, #3
1000c248:	a909      	add	r1, sp, #36	; 0x24
1000c24a:	4640      	mov	r0, r8
1000c24c:	4b39      	ldr	r3, [pc, #228]	; (1000c334 <ble_scan_data_app_event+0x210>)
1000c24e:	4798      	blx	r3
1000c250:	2800      	cmp	r0, #0
1000c252:	d109      	bne.n	1000c268 <ble_scan_data_app_event+0x144>
                    /* Device Service UUID  matched */
                    supp_scan_index[scan_index++] = index;
1000c254:	4a2b      	ldr	r2, [pc, #172]	; (1000c304 <ble_scan_data_app_event+0x1e0>)
1000c256:	7813      	ldrb	r3, [r2, #0]
1000c258:	1c59      	adds	r1, r3, #1
1000c25a:	7011      	strb	r1, [r2, #0]
1000c25c:	4a36      	ldr	r2, [pc, #216]	; (1000c338 <ble_scan_data_app_event+0x214>)
1000c25e:	4659      	mov	r1, fp
1000c260:	54d1      	strb	r1, [r2, r3]
                    DBG_LOG_CONT("---PXP");
1000c262:	4836      	ldr	r0, [pc, #216]	; (1000c33c <ble_scan_data_app_event+0x218>)
1000c264:	4b2e      	ldr	r3, [pc, #184]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c266:	4798      	blx	r3
1000c268:	464b      	mov	r3, r9
1000c26a:	3301      	adds	r3, #1
1000c26c:	4699      	mov	r9, r3
            service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
            
            memcpy(search_pattern1, SMS_ID_PATTERN1, strlen(SMS_ID_PATTERN1));
            memcpy(search_pattern2, SMS_ID_PATTERN2, strlen(SMS_ID_PATTERN2));

            for (index = 0; index < scan_device_count; index++) {
1000c26e:	9a04      	ldr	r2, [sp, #16]
1000c270:	429a      	cmp	r2, r3
1000c272:	d196      	bne.n	1000c1a2 <ble_scan_data_app_event+0x7e>
                    DBG_LOG_CONT("---PXP");
                }
            }
        }

        if (!scan_index)  {
1000c274:	4b23      	ldr	r3, [pc, #140]	; (1000c304 <ble_scan_data_app_event+0x1e0>)
1000c276:	781b      	ldrb	r3, [r3, #0]
1000c278:	2b00      	cmp	r3, #0
1000c27a:	d134      	bne.n	1000c2e6 <ble_scan_data_app_event+0x1c2>
1000c27c:	e002      	b.n	1000c284 <ble_scan_data_app_event+0x160>
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
    uint8_t device_index = 0;
1000c27e:	2300      	movs	r3, #0
1000c280:	9306      	str	r3, [sp, #24]
    uint8_t scan_device[MAX_SCAN_DEVICE];
    uint8_t scan_device_count = 0;
    uint8_t scanned_dev_count = scan_response_count;
    scan_index = 0;
    uint8_t index;
    bool device_identified = false;
1000c282:	9305      	str	r3, [sp, #20]
                }
            }
        }

        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
1000c284:	4823      	ldr	r0, [pc, #140]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c286:	4b24      	ldr	r3, [pc, #144]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c288:	4798      	blx	r3
1000c28a:	482d      	ldr	r0, [pc, #180]	; (1000c340 <ble_scan_data_app_event+0x21c>)
1000c28c:	4b24      	ldr	r3, [pc, #144]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c28e:	4798      	blx	r3
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000c290:	4b2c      	ldr	r3, [pc, #176]	; (1000c344 <ble_scan_data_app_event+0x220>)
1000c292:	4798      	blx	r3
        
        if(device_identified) {
1000c294:	9b05      	ldr	r3, [sp, #20]
1000c296:	2b00      	cmp	r3, #0
1000c298:	d00c      	beq.n	1000c2b4 <ble_scan_data_app_event+0x190>
            DBG_LOG_DEV("Compatible device found");
1000c29a:	481e      	ldr	r0, [pc, #120]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c29c:	4b1e      	ldr	r3, [pc, #120]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c29e:	4798      	blx	r3
1000c2a0:	4829      	ldr	r0, [pc, #164]	; (1000c348 <ble_scan_data_app_event+0x224>)
1000c2a2:	4b1f      	ldr	r3, [pc, #124]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c2a4:	4798      	blx	r3
            return pxp_monitor_connect_request(scan_buffer, scan_device[device_index]);
1000c2a6:	ab0e      	add	r3, sp, #56	; 0x38
1000c2a8:	9a06      	ldr	r2, [sp, #24]
1000c2aa:	5c99      	ldrb	r1, [r3, r2]
1000c2ac:	4817      	ldr	r0, [pc, #92]	; (1000c30c <ble_scan_data_app_event+0x1e8>)
1000c2ae:	4b27      	ldr	r3, [pc, #156]	; (1000c34c <ble_scan_data_app_event+0x228>)
1000c2b0:	4798      	blx	r3
1000c2b2:	e01e      	b.n	1000c2f2 <ble_scan_data_app_event+0x1ce>
        }
        /*Updating the index pointer to connect */
        else if(scan_device_count) {
1000c2b4:	9b07      	ldr	r3, [sp, #28]
1000c2b6:	2b00      	cmp	r3, #0
1000c2b8:	d008      	beq.n	1000c2cc <ble_scan_data_app_event+0x1a8>
            /* Successful device found event*/
            DBG_LOG_DEV("NO compatible device found");
1000c2ba:	4816      	ldr	r0, [pc, #88]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c2bc:	4b16      	ldr	r3, [pc, #88]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c2be:	4798      	blx	r3
1000c2c0:	4823      	ldr	r0, [pc, #140]	; (1000c350 <ble_scan_data_app_event+0x22c>)
1000c2c2:	4b17      	ldr	r3, [pc, #92]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c2c4:	4798      	blx	r3
            app_state = SMS_RUNNING;
1000c2c6:	2202      	movs	r2, #2
1000c2c8:	4b22      	ldr	r3, [pc, #136]	; (1000c354 <ble_scan_data_app_event+0x230>)
1000c2ca:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000c2cc:	20e2      	movs	r0, #226	; 0xe2
1000c2ce:	e010      	b.n	1000c2f2 <ble_scan_data_app_event+0x1ce>
            //}
        }
    }
    else {
        /* from no device found event*/
        DBG_LOG_DEV("Nothing found");
1000c2d0:	4810      	ldr	r0, [pc, #64]	; (1000c314 <ble_scan_data_app_event+0x1f0>)
1000c2d2:	4b11      	ldr	r3, [pc, #68]	; (1000c318 <ble_scan_data_app_event+0x1f4>)
1000c2d4:	4798      	blx	r3
1000c2d6:	4820      	ldr	r0, [pc, #128]	; (1000c358 <ble_scan_data_app_event+0x234>)
1000c2d8:	4b11      	ldr	r3, [pc, #68]	; (1000c320 <ble_scan_data_app_event+0x1fc>)
1000c2da:	4798      	blx	r3
        app_state = SMS_RUNNING;
1000c2dc:	2202      	movs	r2, #2
1000c2de:	4b1d      	ldr	r3, [pc, #116]	; (1000c354 <ble_scan_data_app_event+0x230>)
1000c2e0:	701a      	strb	r2, [r3, #0]
        //if(index == 's') {
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
1000c2e2:	20e2      	movs	r0, #226	; 0xe2
1000c2e4:	e005      	b.n	1000c2f2 <ble_scan_data_app_event+0x1ce>
        if (!scan_index)  {
            DBG_LOG("Proximity Profile supported device not found ");
        }
        
        /* Stop the current scan active */
        at_ble_scan_stop();
1000c2e6:	4b17      	ldr	r3, [pc, #92]	; (1000c344 <ble_scan_data_app_event+0x220>)
1000c2e8:	4798      	blx	r3
        
        if(device_identified) {
1000c2ea:	9b05      	ldr	r3, [sp, #20]
1000c2ec:	2b00      	cmp	r3, #0
1000c2ee:	d0e4      	beq.n	1000c2ba <ble_scan_data_app_event+0x196>
1000c2f0:	e7d3      	b.n	1000c29a <ble_scan_data_app_event+0x176>
        //return gap_dev_scan();
        //}
    }
    ALL_UNUSED(param);
    return AT_BLE_FAILURE;
}
1000c2f2:	b017      	add	sp, #92	; 0x5c
1000c2f4:	bc3c      	pop	{r2, r3, r4, r5}
1000c2f6:	4690      	mov	r8, r2
1000c2f8:	4699      	mov	r9, r3
1000c2fa:	46a2      	mov	sl, r4
1000c2fc:	46ab      	mov	fp, r5
1000c2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c300:	10012f60 	.word	0x10012f60
1000c304:	10012f58 	.word	0x10012f58
1000c308:	10010271 	.word	0x10010271
1000c30c:	10013598 	.word	0x10013598
1000c310:	10012598 	.word	0x10012598
1000c314:	10011744 	.word	0x10011744
1000c318:	100103a1 	.word	0x100103a1
1000c31c:	10011a84 	.word	0x10011a84
1000c320:	10010281 	.word	0x10010281
1000c324:	10012b20 	.word	0x10012b20
1000c328:	10012b40 	.word	0x10012b40
1000c32c:	10012b5c 	.word	0x10012b5c
1000c330:	10012b74 	.word	0x10012b74
1000c334:	1000ade1 	.word	0x1000ade1
1000c338:	10013ec4 	.word	0x10013ec4
1000c33c:	10011ac4 	.word	0x10011ac4
1000c340:	10011b18 	.word	0x10011b18
1000c344:	1000d211 	.word	0x1000d211
1000c348:	10012b8c 	.word	0x10012b8c
1000c34c:	10009b79 	.word	0x10009b79
1000c350:	10012ba4 	.word	0x10012ba4
1000c354:	10013e54 	.word	0x10013e54
1000c358:	10012bc0 	.word	0x10012bc0

1000c35c <button_cb>:
    app_state = SMS_INT_TIMER1;
    /* Add timer callback functionality here */
}

static void button_cb(void)
{
1000c35c:	b510      	push	{r4, lr}
    /* Add button callback functionality here */
    app_state = SMS_INT_BUTTON2;
1000c35e:	2205      	movs	r2, #5
1000c360:	4b04      	ldr	r3, [pc, #16]	; (1000c374 <button_cb+0x18>)
1000c362:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(BUTTON_0_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000c364:	2300      	movs	r3, #0
1000c366:	2200      	movs	r2, #0
1000c368:	2102      	movs	r1, #2
1000c36a:	2017      	movs	r0, #23
1000c36c:	4c02      	ldr	r4, [pc, #8]	; (1000c378 <button_cb+0x1c>)
1000c36e:	47a0      	blx	r4
}
1000c370:	bd10      	pop	{r4, pc}
1000c372:	46c0      	nop			; (mov r8, r8)
1000c374:	10013e54 	.word	0x10013e54
1000c378:	1000b765 	.word	0x1000b765

1000c37c <sms_gateway_discover_services>:
        DBG_LOG("Scanning failed generic error");
    }
}

at_ble_status_t sms_gateway_discover_services(at_ble_handle_t handle)
{
1000c37c:	b510      	push	{r4, lr}
    at_ble_status_t status;
    status = at_ble_primary_service_discover_all(handle, GATT_DISCOVERY_STARTING_HANDLE, GATT_DISCOVERY_ENDING_HANDLE);
1000c37e:	4a0b      	ldr	r2, [pc, #44]	; (1000c3ac <sms_gateway_discover_services+0x30>)
1000c380:	2101      	movs	r1, #1
1000c382:	4b0b      	ldr	r3, [pc, #44]	; (1000c3b0 <sms_gateway_discover_services+0x34>)
1000c384:	4798      	blx	r3
    if(status != AT_BLE_SUCCESS) {
1000c386:	2800      	cmp	r0, #0
1000c388:	d007      	beq.n	1000c39a <sms_gateway_discover_services+0x1e>
        DBG_LOG("GATT service discovery request failed");
1000c38a:	480a      	ldr	r0, [pc, #40]	; (1000c3b4 <sms_gateway_discover_services+0x38>)
1000c38c:	4b0a      	ldr	r3, [pc, #40]	; (1000c3b8 <sms_gateway_discover_services+0x3c>)
1000c38e:	4798      	blx	r3
1000c390:	480a      	ldr	r0, [pc, #40]	; (1000c3bc <sms_gateway_discover_services+0x40>)
1000c392:	4b0b      	ldr	r3, [pc, #44]	; (1000c3c0 <sms_gateway_discover_services+0x44>)
1000c394:	4798      	blx	r3
        return AT_BLE_FAILURE;
1000c396:	20e2      	movs	r0, #226	; 0xe2
1000c398:	e006      	b.n	1000c3a8 <sms_gateway_discover_services+0x2c>
        } else {
        DBG_LOG_DEV("GATT service discovery request started");
1000c39a:	4806      	ldr	r0, [pc, #24]	; (1000c3b4 <sms_gateway_discover_services+0x38>)
1000c39c:	4b06      	ldr	r3, [pc, #24]	; (1000c3b8 <sms_gateway_discover_services+0x3c>)
1000c39e:	4798      	blx	r3
1000c3a0:	4808      	ldr	r0, [pc, #32]	; (1000c3c4 <sms_gateway_discover_services+0x48>)
1000c3a2:	4b07      	ldr	r3, [pc, #28]	; (1000c3c0 <sms_gateway_discover_services+0x44>)
1000c3a4:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000c3a6:	2000      	movs	r0, #0
    }
}
1000c3a8:	bd10      	pop	{r4, pc}
1000c3aa:	46c0      	nop			; (mov r8, r8)
1000c3ac:	0000ffff 	.word	0x0000ffff
1000c3b0:	1000d37d 	.word	0x1000d37d
1000c3b4:	10011744 	.word	0x10011744
1000c3b8:	100103a1 	.word	0x100103a1
1000c3bc:	10012bd0 	.word	0x10012bd0
1000c3c0:	10010281 	.word	0x10010281
1000c3c4:	10012bf8 	.word	0x10012bf8

1000c3c8 <ble_paired_app_event>:
    return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *params)
{
1000c3c8:	b570      	push	{r4, r5, r6, lr}
1000c3ca:	0004      	movs	r4, r0
    DBG_LOG_DEV("Devices paired...");
1000c3cc:	481d      	ldr	r0, [pc, #116]	; (1000c444 <ble_paired_app_event+0x7c>)
1000c3ce:	4b1e      	ldr	r3, [pc, #120]	; (1000c448 <ble_paired_app_event+0x80>)
1000c3d0:	4798      	blx	r3
1000c3d2:	481e      	ldr	r0, [pc, #120]	; (1000c44c <ble_paired_app_event+0x84>)
1000c3d4:	4b1e      	ldr	r3, [pc, #120]	; (1000c450 <ble_paired_app_event+0x88>)
1000c3d6:	4798      	blx	r3
    at_ble_status_t discovery_status = AT_BLE_FAILURE;
    at_ble_pair_done_t *pair_done_val;
    pair_done_val = (at_ble_pair_done_t *)params;
	
	if(periph_counter == 0xff) {
1000c3d8:	4b1e      	ldr	r3, [pc, #120]	; (1000c454 <ble_paired_app_event+0x8c>)
1000c3da:	781b      	ldrb	r3, [r3, #0]
1000c3dc:	2bff      	cmp	r3, #255	; 0xff
1000c3de:	d109      	bne.n	1000c3f4 <ble_paired_app_event+0x2c>
		periph_counter = 0;
1000c3e0:	2200      	movs	r2, #0
1000c3e2:	4b1c      	ldr	r3, [pc, #112]	; (1000c454 <ble_paired_app_event+0x8c>)
1000c3e4:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("Registering first peripheral");
1000c3e6:	4817      	ldr	r0, [pc, #92]	; (1000c444 <ble_paired_app_event+0x7c>)
1000c3e8:	4b17      	ldr	r3, [pc, #92]	; (1000c448 <ble_paired_app_event+0x80>)
1000c3ea:	4798      	blx	r3
1000c3ec:	481a      	ldr	r0, [pc, #104]	; (1000c458 <ble_paired_app_event+0x90>)
1000c3ee:	4b18      	ldr	r3, [pc, #96]	; (1000c450 <ble_paired_app_event+0x88>)
1000c3f0:	4798      	blx	r3
1000c3f2:	e014      	b.n	1000c41e <ble_paired_app_event+0x56>
	}
	else if((periph_counter + 1) >= SMS_BLE_PERIPHERAL_MAX) {
1000c3f4:	1c5a      	adds	r2, r3, #1
1000c3f6:	2a04      	cmp	r2, #4
1000c3f8:	dd07      	ble.n	1000c40a <ble_paired_app_event+0x42>
		DBG_LOG_DEV("Maximum amount of peripherals reached!");
1000c3fa:	4812      	ldr	r0, [pc, #72]	; (1000c444 <ble_paired_app_event+0x7c>)
1000c3fc:	4b12      	ldr	r3, [pc, #72]	; (1000c448 <ble_paired_app_event+0x80>)
1000c3fe:	4798      	blx	r3
1000c400:	4816      	ldr	r0, [pc, #88]	; (1000c45c <ble_paired_app_event+0x94>)
1000c402:	4b13      	ldr	r3, [pc, #76]	; (1000c450 <ble_paired_app_event+0x88>)
1000c404:	4798      	blx	r3
		return AT_BLE_ATT_INSUFF_RESOURCE;
1000c406:	2011      	movs	r0, #17
1000c408:	e01b      	b.n	1000c442 <ble_paired_app_event+0x7a>
	}
	else {
		periph_counter += 1;
1000c40a:	4d12      	ldr	r5, [pc, #72]	; (1000c454 <ble_paired_app_event+0x8c>)
1000c40c:	3301      	adds	r3, #1
1000c40e:	702b      	strb	r3, [r5, #0]
		DBG_LOG_DEV("Increasing peripheral counter: %d", periph_counter);
1000c410:	480c      	ldr	r0, [pc, #48]	; (1000c444 <ble_paired_app_event+0x7c>)
1000c412:	4b0d      	ldr	r3, [pc, #52]	; (1000c448 <ble_paired_app_event+0x80>)
1000c414:	4798      	blx	r3
1000c416:	7829      	ldrb	r1, [r5, #0]
1000c418:	4811      	ldr	r0, [pc, #68]	; (1000c460 <ble_paired_app_event+0x98>)
1000c41a:	4b0d      	ldr	r3, [pc, #52]	; (1000c450 <ble_paired_app_event+0x88>)
1000c41c:	4798      	blx	r3
	}
	periph_instance[periph_counter].id = periph_counter;
1000c41e:	4b0d      	ldr	r3, [pc, #52]	; (1000c454 <ble_paired_app_event+0x8c>)
1000c420:	781b      	ldrb	r3, [r3, #0]
1000c422:	4910      	ldr	r1, [pc, #64]	; (1000c464 <ble_paired_app_event+0x9c>)
1000c424:	0098      	lsls	r0, r3, #2
1000c426:	18c2      	adds	r2, r0, r3
1000c428:	0092      	lsls	r2, r2, #2
1000c42a:	5453      	strb	r3, [r2, r1]
	periph_instance[periph_counter].conn_handle = pair_done_val->handle;
1000c42c:	8862      	ldrh	r2, [r4, #2]
1000c42e:	18c3      	adds	r3, r0, r3
1000c430:	009b      	lsls	r3, r3, #2
1000c432:	18cb      	adds	r3, r1, r3
1000c434:	805a      	strh	r2, [r3, #2]

    discovery_status = sms_gateway_discover_services(pair_done_val->handle);
1000c436:	8860      	ldrh	r0, [r4, #2]
1000c438:	4b0b      	ldr	r3, [pc, #44]	; (1000c468 <ble_paired_app_event+0xa0>)
1000c43a:	4798      	blx	r3
    //DBG_LOG_DEV("Characteristic discovering start failed!");
    //} else {
    //DBG_LOG_DEV("Characteristic discovering start successful");
    //}

    sms_gateway_connection_flag = SMS_DEV_PAIRED;
1000c43c:	2203      	movs	r2, #3
1000c43e:	4b0b      	ldr	r3, [pc, #44]	; (1000c46c <ble_paired_app_event+0xa4>)
1000c440:	701a      	strb	r2, [r3, #0]

    return discovery_status;
}
1000c442:	bd70      	pop	{r4, r5, r6, pc}
1000c444:	10011744 	.word	0x10011744
1000c448:	100103a1 	.word	0x100103a1
1000c44c:	10012c20 	.word	0x10012c20
1000c450:	10010281 	.word	0x10010281
1000c454:	10013e0d 	.word	0x10013e0d
1000c458:	10012c34 	.word	0x10012c34
1000c45c:	10012c54 	.word	0x10012c54
1000c460:	10012c7c 	.word	0x10012c7c
1000c464:	10013e58 	.word	0x10013e58
1000c468:	1000c37d 	.word	0x1000c37d
1000c46c:	1001303c 	.word	0x1001303c

1000c470 <main>:
	spi_send = false;
	spi_enable(&spi_master_instance);
}

int main(void)
{
1000c470:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c472:	464f      	mov	r7, r9
1000c474:	4646      	mov	r6, r8
1000c476:	b4c0      	push	{r6, r7}
1000c478:	b08d      	sub	sp, #52	; 0x34
    app_state = SMS_STARTING;
1000c47a:	2200      	movs	r2, #0
1000c47c:	4b8d      	ldr	r3, [pc, #564]	; (1000c6b4 <main+0x244>)
1000c47e:	701a      	strb	r2, [r3, #0]

    platform_driver_init();
1000c480:	4b8d      	ldr	r3, [pc, #564]	; (1000c6b8 <main+0x248>)
1000c482:	4798      	blx	r3
    acquire_sleep_lock();
1000c484:	4b8d      	ldr	r3, [pc, #564]	; (1000c6bc <main+0x24c>)
1000c486:	4798      	blx	r3

    /* Initialize serial console */
    serial_console_init();
1000c488:	4b8d      	ldr	r3, [pc, #564]	; (1000c6c0 <main+0x250>)
1000c48a:	4798      	blx	r3
    //hw_timer_init();
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
    
    /* button initialization */
    button_init(button_cb);
1000c48c:	488d      	ldr	r0, [pc, #564]	; (1000c6c4 <main+0x254>)
1000c48e:	4b8e      	ldr	r3, [pc, #568]	; (1000c6c8 <main+0x258>)
1000c490:	4798      	blx	r3
}

static void sms_gpio_init(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c492:	ac02      	add	r4, sp, #8
1000c494:	0020      	movs	r0, r4
1000c496:	4b8d      	ldr	r3, [pc, #564]	; (1000c6cc <main+0x25c>)
1000c498:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000c49a:	2301      	movs	r3, #1
1000c49c:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(dbg_gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000c49e:	4b8c      	ldr	r3, [pc, #560]	; (1000c6d0 <main+0x260>)
1000c4a0:	7818      	ldrb	r0, [r3, #0]
1000c4a2:	0021      	movs	r1, r4
1000c4a4:	4b8b      	ldr	r3, [pc, #556]	; (1000c6d4 <main+0x264>)
1000c4a6:	4798      	blx	r3
1000c4a8:	2800      	cmp	r0, #0
1000c4aa:	d005      	beq.n	1000c4b8 <main+0x48>
        DBG_LOG("Problem while setting gpio pin");
1000c4ac:	488a      	ldr	r0, [pc, #552]	; (1000c6d8 <main+0x268>)
1000c4ae:	4b8b      	ldr	r3, [pc, #556]	; (1000c6dc <main+0x26c>)
1000c4b0:	4798      	blx	r3
1000c4b2:	488b      	ldr	r0, [pc, #556]	; (1000c6e0 <main+0x270>)
1000c4b4:	4b8b      	ldr	r3, [pc, #556]	; (1000c6e4 <main+0x274>)
1000c4b6:	4798      	blx	r3
    }
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
1000c4b8:	4b8b      	ldr	r3, [pc, #556]	; (1000c6e8 <main+0x278>)
1000c4ba:	7819      	ldrb	r1, [r3, #0]
1000c4bc:	b2c9      	uxtb	r1, r1
1000c4be:	4b84      	ldr	r3, [pc, #528]	; (1000c6d0 <main+0x260>)
1000c4c0:	7818      	ldrb	r0, [r3, #0]
1000c4c2:	4b8a      	ldr	r3, [pc, #552]	; (1000c6ec <main+0x27c>)
1000c4c4:	4798      	blx	r3
    /* button initialization */
    button_init(button_cb);

    sms_gpio_init();
    
    hw_timer_register_callback(timer_callback_fn);
1000c4c6:	488a      	ldr	r0, [pc, #552]	; (1000c6f0 <main+0x280>)
1000c4c8:	4b8a      	ldr	r3, [pc, #552]	; (1000c6f4 <main+0x284>)
1000c4ca:	4798      	blx	r3

static void configure_spi_master(void)
{
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_slave_inst_get_config_defaults(&slave_dev_config);
1000c4cc:	ac01      	add	r4, sp, #4
1000c4ce:	0020      	movs	r0, r4
1000c4d0:	4b89      	ldr	r3, [pc, #548]	; (1000c6f8 <main+0x288>)
1000c4d2:	4798      	blx	r3
	slave_dev_config.ss_pin = CONF_SPI_PIN_SSN;
1000c4d4:	2310      	movs	r3, #16
1000c4d6:	7023      	strb	r3, [r4, #0]
	spi_attach_slave(&spi_slave, &slave_dev_config);
1000c4d8:	0021      	movs	r1, r4
1000c4da:	4888      	ldr	r0, [pc, #544]	; (1000c6fc <main+0x28c>)
1000c4dc:	4b88      	ldr	r3, [pc, #544]	; (1000c700 <main+0x290>)
1000c4de:	4798      	blx	r3
	spi_get_config_defaults(&config_spi_master);
1000c4e0:	ac02      	add	r4, sp, #8
1000c4e2:	0020      	movs	r0, r4
1000c4e4:	4b87      	ldr	r3, [pc, #540]	; (1000c704 <main+0x294>)
1000c4e6:	4798      	blx	r3
	config_spi_master.transfer_mode = CONF_SPI_TRANSFER_MODE;
1000c4e8:	2700      	movs	r7, #0
1000c4ea:	70a7      	strb	r7, [r4, #2]
	config_spi_master.clock_divider = 150;
1000c4ec:	2396      	movs	r3, #150	; 0x96
1000c4ee:	7123      	strb	r3, [r4, #4]
	config_spi_master.pin_number_pad[0] = CONF_SPI_PIN_SCK;
1000c4f0:	3b85      	subs	r3, #133	; 0x85
1000c4f2:	60a3      	str	r3, [r4, #8]
	config_spi_master.pinmux_sel_pad[0] = CONF_SPI_MUX_SCK;
1000c4f4:	3b0d      	subs	r3, #13
1000c4f6:	61a3      	str	r3, [r4, #24]
	config_spi_master.pin_number_pad[1] = CONF_SPI_PIN_MOSI;
1000c4f8:	2213      	movs	r2, #19
1000c4fa:	60e2      	str	r2, [r4, #12]
	config_spi_master.pinmux_sel_pad[1] = CONF_SPI_MUX_MOSI;
1000c4fc:	61e3      	str	r3, [r4, #28]
	config_spi_master.pin_number_pad[2] = PINMUX_UNUSED;
1000c4fe:	2501      	movs	r5, #1
1000c500:	426d      	negs	r5, r5
1000c502:	6125      	str	r5, [r4, #16]
	config_spi_master.pinmux_sel_pad[2] = PINMUX_UNUSED;
1000c504:	6225      	str	r5, [r4, #32]
	config_spi_master.pin_number_pad[3] = CONF_SPI_PIN_MISO;
1000c506:	3a01      	subs	r2, #1
1000c508:	6162      	str	r2, [r4, #20]
	config_spi_master.pinmux_sel_pad[3] = CONF_SPI_MUX_MISO;
1000c50a:	6263      	str	r3, [r4, #36]	; 0x24
	spi_init(&spi_master_instance, CONF_SPI, &config_spi_master);
1000c50c:	4e7e      	ldr	r6, [pc, #504]	; (1000c708 <main+0x298>)
1000c50e:	0022      	movs	r2, r4
1000c510:	497e      	ldr	r1, [pc, #504]	; (1000c70c <main+0x29c>)
1000c512:	0030      	movs	r0, r6
1000c514:	4b7e      	ldr	r3, [pc, #504]	; (1000c710 <main+0x2a0>)
1000c516:	4798      	blx	r3
	spi_send = false;
1000c518:	4b7e      	ldr	r3, [pc, #504]	; (1000c714 <main+0x2a4>)
1000c51a:	701f      	strb	r7, [r3, #0]
	spi_enable(&spi_master_instance);
1000c51c:	0030      	movs	r0, r6
1000c51e:	4b7e      	ldr	r3, [pc, #504]	; (1000c718 <main+0x2a8>)
1000c520:	4798      	blx	r3
    
    hw_timer_register_callback(timer_callback_fn);
	
	configure_spi_master();

    DBG_LOG("Initializing BLE Application");
1000c522:	486d      	ldr	r0, [pc, #436]	; (1000c6d8 <main+0x268>)
1000c524:	4b6d      	ldr	r3, [pc, #436]	; (1000c6dc <main+0x26c>)
1000c526:	4798      	blx	r3
1000c528:	487c      	ldr	r0, [pc, #496]	; (1000c71c <main+0x2ac>)
1000c52a:	4b6e      	ldr	r3, [pc, #440]	; (1000c6e4 <main+0x274>)
1000c52c:	4798      	blx	r3
    
    /* initialize the BLE chip and Set the Device Address */
    ble_device_init(NULL);
1000c52e:	2000      	movs	r0, #0
1000c530:	4b7b      	ldr	r3, [pc, #492]	; (1000c720 <main+0x2b0>)
1000c532:	4798      	blx	r3

    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_gateway_app_gap_cb);
1000c534:	4a7b      	ldr	r2, [pc, #492]	; (1000c724 <main+0x2b4>)
1000c536:	2100      	movs	r1, #0
1000c538:	2000      	movs	r0, #0
1000c53a:	4c7b      	ldr	r4, [pc, #492]	; (1000c728 <main+0x2b8>)
1000c53c:	47a0      	blx	r4
    

    /* Register callbacks for GATT CLIENT related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_CLIENT_EVENT_TYPE, sms_gateway_app_gatt_client_cb);
1000c53e:	4a7b      	ldr	r2, [pc, #492]	; (1000c72c <main+0x2bc>)
1000c540:	2101      	movs	r1, #1
1000c542:	2000      	movs	r0, #0
1000c544:	47a0      	blx	r4
    //
    //app_state = SMS_RUNNING;

    //sms_gateway_init();

    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
1000c546:	487a      	ldr	r0, [pc, #488]	; (1000c730 <main+0x2c0>)
1000c548:	4b7a      	ldr	r3, [pc, #488]	; (1000c734 <main+0x2c4>)
1000c54a:	4798      	blx	r3
    register_hw_timer_stop_func_cb(hw_timer_stop);
1000c54c:	487a      	ldr	r0, [pc, #488]	; (1000c738 <main+0x2c8>)
1000c54e:	4b7b      	ldr	r3, [pc, #492]	; (1000c73c <main+0x2cc>)
1000c550:	4798      	blx	r3
    
	periph_counter = 0xFF;
1000c552:	4b7b      	ldr	r3, [pc, #492]	; (1000c740 <main+0x2d0>)
1000c554:	701d      	strb	r5, [r3, #0]
1000c556:	4b7b      	ldr	r3, [pc, #492]	; (1000c744 <main+0x2d4>)
1000c558:	001d      	movs	r5, r3
1000c55a:	3564      	adds	r5, #100	; 0x64
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
1000c55c:	21ff      	movs	r1, #255	; 0xff
		periph_instance[i].conn_handle = 0xffff;
1000c55e:	2401      	movs	r4, #1
1000c560:	4264      	negs	r4, r4
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c562:	2200      	movs	r2, #0
			periph_instance[i].service_handle_range[j][0] = 0xff;
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c564:	2000      	movs	r0, #0
    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
    register_hw_timer_stop_func_cb(hw_timer_stop);
    
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
1000c566:	7019      	strb	r1, [r3, #0]
		periph_instance[i].conn_handle = 0xffff;
1000c568:	805c      	strh	r4, [r3, #2]
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c56a:	711a      	strb	r2, [r3, #4]
			periph_instance[i].service_handle_range[j][0] = 0xff;
1000c56c:	8119      	strh	r1, [r3, #8]
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c56e:	815a      	strh	r2, [r3, #10]
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
		periph_instance[i].conn_handle = 0xffff;
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c570:	7158      	strb	r0, [r3, #5]
			periph_instance[i].service_handle_range[j][0] = 0xff;
1000c572:	8199      	strh	r1, [r3, #12]
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c574:	81da      	strh	r2, [r3, #14]
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
		periph_instance[i].id = 0xff;
		periph_instance[i].conn_handle = 0xffff;
		for(uint8_t j = 0; j < SMS_BLE_SERVICE_MAX; j++) {
			periph_instance[i].available_services[j] = false;
1000c576:	7198      	strb	r0, [r3, #6]
			periph_instance[i].service_handle_range[j][0] = 0xff;
1000c578:	8219      	strh	r1, [r3, #16]
			periph_instance[i].service_handle_range[j][1] = 0x00;
1000c57a:	825a      	strh	r2, [r3, #18]
1000c57c:	3314      	adds	r3, #20

    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
    register_hw_timer_stop_func_cb(hw_timer_stop);
    
	periph_counter = 0xFF;
	for(uint8_t i = 0; i < SMS_BLE_PERIPHERAL_MAX; i++) {
1000c57e:	429d      	cmp	r5, r3
1000c580:	d1f1      	bne.n	1000c566 <main+0xf6>
	}
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000c582:	4f71      	ldr	r7, [pc, #452]	; (1000c748 <main+0x2d8>)
        
        switch(app_state) {
1000c584:	4b4b      	ldr	r3, [pc, #300]	; (1000c6b4 <main+0x244>)
1000c586:	4699      	mov	r9, r3
1000c588:	4b70      	ldr	r3, [pc, #448]	; (1000c74c <main+0x2dc>)
1000c58a:	4698      	mov	r8, r3
	}
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000c58c:	2001      	movs	r0, #1
1000c58e:	4240      	negs	r0, r0
1000c590:	47b8      	blx	r7
        
        switch(app_state) {
1000c592:	464b      	mov	r3, r9
1000c594:	781b      	ldrb	r3, [r3, #0]
1000c596:	b2db      	uxtb	r3, r3
1000c598:	2b07      	cmp	r3, #7
1000c59a:	d84f      	bhi.n	1000c63c <main+0x1cc>
1000c59c:	009b      	lsls	r3, r3, #2
1000c59e:	4642      	mov	r2, r8
1000c5a0:	58d3      	ldr	r3, [r2, r3]
1000c5a2:	469f      	mov	pc, r3

            case SMS_CONNECTING:
            break;

            case SMS_RUNNING:
            DBG_LOG_DEV("SMS_RUNNING...");
1000c5a4:	484c      	ldr	r0, [pc, #304]	; (1000c6d8 <main+0x268>)
1000c5a6:	4b4d      	ldr	r3, [pc, #308]	; (1000c6dc <main+0x26c>)
1000c5a8:	4798      	blx	r3
1000c5aa:	4869      	ldr	r0, [pc, #420]	; (1000c750 <main+0x2e0>)
1000c5ac:	4b4d      	ldr	r3, [pc, #308]	; (1000c6e4 <main+0x274>)
1000c5ae:	4798      	blx	r3
            break;
1000c5b0:	e044      	b.n	1000c63c <main+0x1cc>

            case SMS_DISCONNECTED:
            DBG_LOG_DEV("SMS_DISCONNECTED...");
1000c5b2:	4849      	ldr	r0, [pc, #292]	; (1000c6d8 <main+0x268>)
1000c5b4:	4b49      	ldr	r3, [pc, #292]	; (1000c6dc <main+0x26c>)
1000c5b6:	4798      	blx	r3
1000c5b8:	4866      	ldr	r0, [pc, #408]	; (1000c754 <main+0x2e4>)
1000c5ba:	4b4a      	ldr	r3, [pc, #296]	; (1000c6e4 <main+0x274>)
1000c5bc:	4798      	blx	r3
    gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);
}

static void sms_disconnected_fn(void)
{
    app_state = SMS_RUNNING;
1000c5be:	2202      	movs	r2, #2
1000c5c0:	4b3c      	ldr	r3, [pc, #240]	; (1000c6b4 <main+0x244>)
1000c5c2:	701a      	strb	r2, [r3, #0]
1000c5c4:	e03a      	b.n	1000c63c <main+0x1cc>
            DBG_LOG_DEV("SMS_DISCONNECTED...");
            sms_disconnected_fn();
            break;

            case SMS_INT_BUTTON1:
            DBG_LOG_DEV("SMS_INT_BUTTON1...");
1000c5c6:	4844      	ldr	r0, [pc, #272]	; (1000c6d8 <main+0x268>)
1000c5c8:	4b44      	ldr	r3, [pc, #272]	; (1000c6dc <main+0x26c>)
1000c5ca:	4798      	blx	r3
1000c5cc:	4862      	ldr	r0, [pc, #392]	; (1000c758 <main+0x2e8>)
1000c5ce:	4b45      	ldr	r3, [pc, #276]	; (1000c6e4 <main+0x274>)
1000c5d0:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_button1_fn(void)
{
    app_state = SMS_RUNNING;
1000c5d2:	2202      	movs	r2, #2
1000c5d4:	4b37      	ldr	r3, [pc, #220]	; (1000c6b4 <main+0x244>)
1000c5d6:	701a      	strb	r2, [r3, #0]
1000c5d8:	e030      	b.n	1000c63c <main+0x1cc>
            DBG_LOG_DEV("SMS_INT_BUTTON1...");
            sms_int_button1_fn();
            break;

            case SMS_INT_BUTTON2:
            DBG_LOG_DEV("SMS_INT_BUTTON2...");
1000c5da:	483f      	ldr	r0, [pc, #252]	; (1000c6d8 <main+0x268>)
1000c5dc:	4b3f      	ldr	r3, [pc, #252]	; (1000c6dc <main+0x26c>)
1000c5de:	4798      	blx	r3
1000c5e0:	485e      	ldr	r0, [pc, #376]	; (1000c75c <main+0x2ec>)
1000c5e2:	4b40      	ldr	r3, [pc, #256]	; (1000c6e4 <main+0x274>)
1000c5e4:	4798      	blx	r3
}

static void sms_int_button2_fn(void)
{
    //sms_gateway_init();
	buffer[0] = 4;
1000c5e6:	4c5e      	ldr	r4, [pc, #376]	; (1000c760 <main+0x2f0>)
1000c5e8:	2304      	movs	r3, #4
1000c5ea:	7023      	strb	r3, [r4, #0]
	buffer[1] = 2;
1000c5ec:	2602      	movs	r6, #2
1000c5ee:	7066      	strb	r6, [r4, #1]
	buffer[2] = 1;
1000c5f0:	3b03      	subs	r3, #3
1000c5f2:	70a3      	strb	r3, [r4, #2]
	spi_select_slave(&spi_master_instance, &spi_slave, true);
1000c5f4:	2201      	movs	r2, #1
1000c5f6:	4941      	ldr	r1, [pc, #260]	; (1000c6fc <main+0x28c>)
1000c5f8:	4843      	ldr	r0, [pc, #268]	; (1000c708 <main+0x298>)
1000c5fa:	4d5a      	ldr	r5, [pc, #360]	; (1000c764 <main+0x2f4>)
1000c5fc:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_master_instance, buffer, SPI_BUF_LENGTH);
1000c5fe:	2240      	movs	r2, #64	; 0x40
1000c600:	0021      	movs	r1, r4
1000c602:	4841      	ldr	r0, [pc, #260]	; (1000c708 <main+0x298>)
1000c604:	4b58      	ldr	r3, [pc, #352]	; (1000c768 <main+0x2f8>)
1000c606:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &spi_slave, false);
1000c608:	2200      	movs	r2, #0
1000c60a:	493c      	ldr	r1, [pc, #240]	; (1000c6fc <main+0x28c>)
1000c60c:	483e      	ldr	r0, [pc, #248]	; (1000c708 <main+0x298>)
1000c60e:	47a8      	blx	r5
    app_state = SMS_RUNNING;
1000c610:	4b28      	ldr	r3, [pc, #160]	; (1000c6b4 <main+0x244>)
1000c612:	701e      	strb	r6, [r3, #0]
1000c614:	e012      	b.n	1000c63c <main+0x1cc>
            DBG_LOG_DEV("SMS_INT_BUTTON2...");
            sms_int_button2_fn();
            break;

            case SMS_INT_TIMER1:
            DBG_LOG_DEV("SMS_INT_TIMER1...");
1000c616:	4830      	ldr	r0, [pc, #192]	; (1000c6d8 <main+0x268>)
1000c618:	4b30      	ldr	r3, [pc, #192]	; (1000c6dc <main+0x26c>)
1000c61a:	4798      	blx	r3
1000c61c:	4853      	ldr	r0, [pc, #332]	; (1000c76c <main+0x2fc>)
1000c61e:	4b31      	ldr	r3, [pc, #196]	; (1000c6e4 <main+0x274>)
1000c620:	4798      	blx	r3
    //DBG_LOG("Unable to connect with device");
    //}
    //} else if(sms_gateway_connection_flag == SMS_DEV_SERVICE_FOUND) {
    //hw_timer_start(PXP_RSSI_UPDATE_INTERVAL);
    //}
    app_state = SMS_RUNNING;
1000c622:	2202      	movs	r2, #2
1000c624:	4b23      	ldr	r3, [pc, #140]	; (1000c6b4 <main+0x244>)
1000c626:	701a      	strb	r2, [r3, #0]
1000c628:	e008      	b.n	1000c63c <main+0x1cc>
            DBG_LOG_DEV("SMS_INT_TIMER1...");
            sms_int_timer1_fn();
            break;

            case SMS_INT_TIMER2:
            DBG_LOG_DEV("SMS_INT_TIMER2...");
1000c62a:	482b      	ldr	r0, [pc, #172]	; (1000c6d8 <main+0x268>)
1000c62c:	4b2b      	ldr	r3, [pc, #172]	; (1000c6dc <main+0x26c>)
1000c62e:	4798      	blx	r3
1000c630:	484f      	ldr	r0, [pc, #316]	; (1000c770 <main+0x300>)
1000c632:	4b2c      	ldr	r3, [pc, #176]	; (1000c6e4 <main+0x274>)
1000c634:	4798      	blx	r3
    app_state = SMS_RUNNING;
}

static void sms_int_timer2_fn(void)
{
    app_state = SMS_RUNNING;
1000c636:	2202      	movs	r2, #2
1000c638:	4b1e      	ldr	r3, [pc, #120]	; (1000c6b4 <main+0x244>)
1000c63a:	701a      	strb	r2, [r3, #0]

            default:
            break;
        }
        /* Application Task */
		if(spi_send) {
1000c63c:	4b35      	ldr	r3, [pc, #212]	; (1000c714 <main+0x2a4>)
1000c63e:	781b      	ldrb	r3, [r3, #0]
1000c640:	2b00      	cmp	r3, #0
1000c642:	d0a3      	beq.n	1000c58c <main+0x11c>
			buffer[0] = spi_message.periph_id;
1000c644:	4b46      	ldr	r3, [pc, #280]	; (1000c760 <main+0x2f0>)
1000c646:	4c4b      	ldr	r4, [pc, #300]	; (1000c774 <main+0x304>)
1000c648:	7822      	ldrb	r2, [r4, #0]
1000c64a:	701a      	strb	r2, [r3, #0]
			buffer[1] = spi_message.service;
1000c64c:	7862      	ldrb	r2, [r4, #1]
1000c64e:	705a      	strb	r2, [r3, #1]
			buffer[2] = spi_message.length;
1000c650:	78a2      	ldrb	r2, [r4, #2]
1000c652:	709a      	strb	r2, [r3, #2]
			DBG_LOG_DEV("Sending to SPI: 0x%02x %02x %02x ", spi_message.periph_id, spi_message.service, spi_message.length);
1000c654:	4820      	ldr	r0, [pc, #128]	; (1000c6d8 <main+0x268>)
1000c656:	4b21      	ldr	r3, [pc, #132]	; (1000c6dc <main+0x26c>)
1000c658:	4798      	blx	r3
1000c65a:	78a3      	ldrb	r3, [r4, #2]
1000c65c:	7862      	ldrb	r2, [r4, #1]
1000c65e:	7821      	ldrb	r1, [r4, #0]
1000c660:	4845      	ldr	r0, [pc, #276]	; (1000c778 <main+0x308>)
1000c662:	4d20      	ldr	r5, [pc, #128]	; (1000c6e4 <main+0x274>)
1000c664:	47a8      	blx	r5
			for(uint8_t i = 0; i < spi_message.length; i++) {
1000c666:	78a3      	ldrb	r3, [r4, #2]
1000c668:	2b00      	cmp	r3, #0
1000c66a:	d00e      	beq.n	1000c68a <main+0x21a>
1000c66c:	2400      	movs	r4, #0
				buffer[i+3] = spi_message.data[i];
1000c66e:	4e41      	ldr	r6, [pc, #260]	; (1000c774 <main+0x304>)
1000c670:	4d3b      	ldr	r5, [pc, #236]	; (1000c760 <main+0x2f0>)
1000c672:	1933      	adds	r3, r6, r4
1000c674:	78d9      	ldrb	r1, [r3, #3]
1000c676:	192b      	adds	r3, r5, r4
1000c678:	70d9      	strb	r1, [r3, #3]
				DBG_LOG_CONT_DEV("%02x", spi_message.data[i]);
1000c67a:	4840      	ldr	r0, [pc, #256]	; (1000c77c <main+0x30c>)
1000c67c:	4b19      	ldr	r3, [pc, #100]	; (1000c6e4 <main+0x274>)
1000c67e:	4798      	blx	r3
		if(spi_send) {
			buffer[0] = spi_message.periph_id;
			buffer[1] = spi_message.service;
			buffer[2] = spi_message.length;
			DBG_LOG_DEV("Sending to SPI: 0x%02x %02x %02x ", spi_message.periph_id, spi_message.service, spi_message.length);
			for(uint8_t i = 0; i < spi_message.length; i++) {
1000c680:	3401      	adds	r4, #1
1000c682:	b2e4      	uxtb	r4, r4
1000c684:	78b3      	ldrb	r3, [r6, #2]
1000c686:	42a3      	cmp	r3, r4
1000c688:	d8f3      	bhi.n	1000c672 <main+0x202>
				buffer[i+3] = spi_message.data[i];
				DBG_LOG_CONT_DEV("%02x", spi_message.data[i]);
			}
			spi_select_slave(&spi_master_instance, &spi_slave, true);
1000c68a:	4e1c      	ldr	r6, [pc, #112]	; (1000c6fc <main+0x28c>)
1000c68c:	4c1e      	ldr	r4, [pc, #120]	; (1000c708 <main+0x298>)
1000c68e:	2201      	movs	r2, #1
1000c690:	0031      	movs	r1, r6
1000c692:	0020      	movs	r0, r4
1000c694:	4d33      	ldr	r5, [pc, #204]	; (1000c764 <main+0x2f4>)
1000c696:	47a8      	blx	r5
			spi_write_buffer_wait(&spi_master_instance, buffer, SPI_BUF_LENGTH);
1000c698:	2240      	movs	r2, #64	; 0x40
1000c69a:	4931      	ldr	r1, [pc, #196]	; (1000c760 <main+0x2f0>)
1000c69c:	0020      	movs	r0, r4
1000c69e:	4b32      	ldr	r3, [pc, #200]	; (1000c768 <main+0x2f8>)
1000c6a0:	4798      	blx	r3
			spi_select_slave(&spi_master_instance, &spi_slave, false);
1000c6a2:	2200      	movs	r2, #0
1000c6a4:	0031      	movs	r1, r6
1000c6a6:	0020      	movs	r0, r4
1000c6a8:	47a8      	blx	r5
			spi_send = false;
1000c6aa:	2200      	movs	r2, #0
1000c6ac:	4b19      	ldr	r3, [pc, #100]	; (1000c714 <main+0x2a4>)
1000c6ae:	701a      	strb	r2, [r3, #0]
1000c6b0:	e76c      	b.n	1000c58c <main+0x11c>
1000c6b2:	46c0      	nop			; (mov r8, r8)
1000c6b4:	10013e54 	.word	0x10013e54
1000c6b8:	1000b4f9 	.word	0x1000b4f9
1000c6bc:	1000ba21 	.word	0x1000ba21
1000c6c0:	1000b15d 	.word	0x1000b15d
1000c6c4:	1000c35d 	.word	0x1000c35d
1000c6c8:	1000b0d9 	.word	0x1000b0d9
1000c6cc:	1000824d 	.word	0x1000824d
1000c6d0:	10012eb8 	.word	0x10012eb8
1000c6d4:	1000825d 	.word	0x1000825d
1000c6d8:	10011744 	.word	0x10011744
1000c6dc:	100103a1 	.word	0x100103a1
1000c6e0:	10012ca0 	.word	0x10012ca0
1000c6e4:	10010281 	.word	0x10010281
1000c6e8:	10013080 	.word	0x10013080
1000c6ec:	100083c5 	.word	0x100083c5
1000c6f0:	1000bbc1 	.word	0x1000bbc1
1000c6f4:	1000b2fd 	.word	0x1000b2fd
1000c6f8:	10008719 	.word	0x10008719
1000c6fc:	10013e10 	.word	0x10013e10
1000c700:	10008751 	.word	0x10008751
1000c704:	10008725 	.word	0x10008725
1000c708:	10013ebc 	.word	0x10013ebc
1000c70c:	40007000 	.word	0x40007000
1000c710:	10008821 	.word	0x10008821
1000c714:	10013e0c 	.word	0x10013e0c
1000c718:	10008791 	.word	0x10008791
1000c71c:	10012cc0 	.word	0x10012cc0
1000c720:	1000ab3d 	.word	0x1000ab3d
1000c724:	100127c0 	.word	0x100127c0
1000c728:	1000aa6d 	.word	0x1000aa6d
1000c72c:	10012d78 	.word	0x10012d78
1000c730:	1000b331 	.word	0x1000b331
1000c734:	10009bf1 	.word	0x10009bf1
1000c738:	1000b35d 	.word	0x1000b35d
1000c73c:	10009bfd 	.word	0x10009bfd
1000c740:	10013e0d 	.word	0x10013e0d
1000c744:	10013e58 	.word	0x10013e58
1000c748:	1000b0a9 	.word	0x1000b0a9
1000c74c:	100127a0 	.word	0x100127a0
1000c750:	10012ce0 	.word	0x10012ce0
1000c754:	10012cf0 	.word	0x10012cf0
1000c758:	10012d04 	.word	0x10012d04
1000c75c:	10012d18 	.word	0x10012d18
1000c760:	10013040 	.word	0x10013040
1000c764:	10008a11 	.word	0x10008a11
1000c768:	10008a01 	.word	0x10008a01
1000c76c:	10012d2c 	.word	0x10012d2c
1000c770:	10012d40 	.word	0x10012d40
1000c774:	10013e14 	.word	0x10013e14
1000c778:	10012d54 	.word	0x10012d54
1000c77c:	10012b54 	.word	0x10012b54

1000c780 <internal_event_post>:
1000c780:	b570      	push	{r4, r5, r6, lr}
1000c782:	4d0c      	ldr	r5, [pc, #48]	; (1000c7b4 <internal_event_post+0x34>)
1000c784:	682c      	ldr	r4, [r5, #0]
1000c786:	2c00      	cmp	r4, #0
1000c788:	d013      	beq.n	1000c7b2 <internal_event_post+0x32>
1000c78a:	6826      	ldr	r6, [r4, #0]
1000c78c:	60e2      	str	r2, [r4, #12]
1000c78e:	602e      	str	r6, [r5, #0]
1000c790:	2500      	movs	r5, #0
1000c792:	4a09      	ldr	r2, [pc, #36]	; (1000c7b8 <internal_event_post+0x38>)
1000c794:	8123      	strh	r3, [r4, #8]
1000c796:	6813      	ldr	r3, [r2, #0]
1000c798:	6025      	str	r5, [r4, #0]
1000c79a:	80a0      	strh	r0, [r4, #4]
1000c79c:	80e1      	strh	r1, [r4, #6]
1000c79e:	42ab      	cmp	r3, r5
1000c7a0:	d101      	bne.n	1000c7a6 <internal_event_post+0x26>
1000c7a2:	6014      	str	r4, [r2, #0]
1000c7a4:	e005      	b.n	1000c7b2 <internal_event_post+0x32>
1000c7a6:	681a      	ldr	r2, [r3, #0]
1000c7a8:	2a00      	cmp	r2, #0
1000c7aa:	d001      	beq.n	1000c7b0 <internal_event_post+0x30>
1000c7ac:	1c13      	adds	r3, r2, #0
1000c7ae:	e7fa      	b.n	1000c7a6 <internal_event_post+0x26>
1000c7b0:	601c      	str	r4, [r3, #0]
1000c7b2:	bd70      	pop	{r4, r5, r6, pc}
1000c7b4:	1001312c 	.word	0x1001312c
1000c7b8:	10013128 	.word	0x10013128

1000c7bc <internal_event_init>:
1000c7bc:	4b08      	ldr	r3, [pc, #32]	; (1000c7e0 <internal_event_init+0x24>)
1000c7be:	2200      	movs	r2, #0
1000c7c0:	1c19      	adds	r1, r3, #0
1000c7c2:	b510      	push	{r4, lr}
1000c7c4:	6818      	ldr	r0, [r3, #0]
1000c7c6:	4b07      	ldr	r3, [pc, #28]	; (1000c7e4 <internal_event_init+0x28>)
1000c7c8:	189c      	adds	r4, r3, r2
1000c7ca:	50d0      	str	r0, [r2, r3]
1000c7cc:	3210      	adds	r2, #16
1000c7ce:	1c20      	adds	r0, r4, #0
1000c7d0:	2aa0      	cmp	r2, #160	; 0xa0
1000c7d2:	d1f8      	bne.n	1000c7c6 <internal_event_init+0xa>
1000c7d4:	2200      	movs	r2, #0
1000c7d6:	3390      	adds	r3, #144	; 0x90
1000c7d8:	600b      	str	r3, [r1, #0]
1000c7da:	4b03      	ldr	r3, [pc, #12]	; (1000c7e8 <internal_event_init+0x2c>)
1000c7dc:	601a      	str	r2, [r3, #0]
1000c7de:	bd10      	pop	{r4, pc}
1000c7e0:	1001312c 	.word	0x1001312c
1000c7e4:	10013088 	.word	0x10013088
1000c7e8:	10013128 	.word	0x10013128

1000c7ec <special_events_handler>:
1000c7ec:	b538      	push	{r3, r4, r5, lr}
1000c7ee:	4c1b      	ldr	r4, [pc, #108]	; (1000c85c <special_events_handler+0x70>)
1000c7f0:	1c03      	adds	r3, r0, #0
1000c7f2:	8825      	ldrh	r5, [r4, #0]
1000c7f4:	1c08      	adds	r0, r1, #0
1000c7f6:	1c21      	adds	r1, r4, #0
1000c7f8:	429d      	cmp	r5, r3
1000c7fa:	d107      	bne.n	1000c80c <special_events_handler+0x20>
1000c7fc:	88a5      	ldrh	r5, [r4, #4]
1000c7fe:	4285      	cmp	r5, r0
1000c800:	d104      	bne.n	1000c80c <special_events_handler+0x20>
1000c802:	2301      	movs	r3, #1
1000c804:	425b      	negs	r3, r3
1000c806:	8023      	strh	r3, [r4, #0]
1000c808:	60a2      	str	r2, [r4, #8]
1000c80a:	e009      	b.n	1000c820 <special_events_handler+0x34>
1000c80c:	884c      	ldrh	r4, [r1, #2]
1000c80e:	429c      	cmp	r4, r3
1000c810:	d10a      	bne.n	1000c828 <special_events_handler+0x3c>
1000c812:	888c      	ldrh	r4, [r1, #4]
1000c814:	4284      	cmp	r4, r0
1000c816:	d107      	bne.n	1000c828 <special_events_handler+0x3c>
1000c818:	2301      	movs	r3, #1
1000c81a:	425b      	negs	r3, r3
1000c81c:	804b      	strh	r3, [r1, #2]
1000c81e:	608a      	str	r2, [r1, #8]
1000c820:	4b0f      	ldr	r3, [pc, #60]	; (1000c860 <special_events_handler+0x74>)
1000c822:	4798      	blx	r3
1000c824:	2001      	movs	r0, #1
1000c826:	e017      	b.n	1000c858 <special_events_handler+0x6c>
1000c828:	490e      	ldr	r1, [pc, #56]	; (1000c864 <special_events_handler+0x78>)
1000c82a:	428b      	cmp	r3, r1
1000c82c:	d00e      	beq.n	1000c84c <special_events_handler+0x60>
1000c82e:	490e      	ldr	r1, [pc, #56]	; (1000c868 <special_events_handler+0x7c>)
1000c830:	428b      	cmp	r3, r1
1000c832:	d007      	beq.n	1000c844 <special_events_handler+0x58>
1000c834:	490d      	ldr	r1, [pc, #52]	; (1000c86c <special_events_handler+0x80>)
1000c836:	2000      	movs	r0, #0
1000c838:	428b      	cmp	r3, r1
1000c83a:	d10d      	bne.n	1000c858 <special_events_handler+0x6c>
1000c83c:	1c10      	adds	r0, r2, #0
1000c83e:	4b0c      	ldr	r3, [pc, #48]	; (1000c870 <special_events_handler+0x84>)
1000c840:	4798      	blx	r3
1000c842:	e7ef      	b.n	1000c824 <special_events_handler+0x38>
1000c844:	1c11      	adds	r1, r2, #0
1000c846:	4b0b      	ldr	r3, [pc, #44]	; (1000c874 <special_events_handler+0x88>)
1000c848:	2200      	movs	r2, #0
1000c84a:	e002      	b.n	1000c852 <special_events_handler+0x66>
1000c84c:	1c11      	adds	r1, r2, #0
1000c84e:	2200      	movs	r2, #0
1000c850:	4b09      	ldr	r3, [pc, #36]	; (1000c878 <special_events_handler+0x8c>)
1000c852:	4798      	blx	r3
1000c854:	4243      	negs	r3, r0
1000c856:	4158      	adcs	r0, r3
1000c858:	bd38      	pop	{r3, r4, r5, pc}
1000c85a:	46c0      	nop			; (mov r8, r8)
1000c85c:	10013ed8 	.word	0x10013ed8
1000c860:	1000d9c5 	.word	0x1000d9c5
1000c864:	00000e13 	.word	0x00000e13
1000c868:	00000e15 	.word	0x00000e15
1000c86c:	00000e01 	.word	0x00000e01
1000c870:	1000dd35 	.word	0x1000dd35
1000c874:	1000def5 	.word	0x1000def5
1000c878:	1000dfcd 	.word	0x1000dfcd

1000c87c <at_ble_event_get>:
1000c87c:	2300      	movs	r3, #0
1000c87e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c880:	b085      	sub	sp, #20
1000c882:	9202      	str	r2, [sp, #8]
1000c884:	7003      	strb	r3, [r0, #0]
1000c886:	9b02      	ldr	r3, [sp, #8]
1000c888:	9001      	str	r0, [sp, #4]
1000c88a:	3b01      	subs	r3, #1
1000c88c:	1c0d      	adds	r5, r1, #0
1000c88e:	9303      	str	r3, [sp, #12]
1000c890:	3303      	adds	r3, #3
1000c892:	d802      	bhi.n	1000c89a <at_ble_event_get+0x1e>
1000c894:	9802      	ldr	r0, [sp, #8]
1000c896:	4bad      	ldr	r3, [pc, #692]	; (1000cb4c <at_ble_event_get+0x2d0>)
1000c898:	4798      	blx	r3
1000c89a:	9b03      	ldr	r3, [sp, #12]
1000c89c:	4fac      	ldr	r7, [pc, #688]	; (1000cb50 <at_ble_event_get+0x2d4>)
1000c89e:	2400      	movs	r4, #0
1000c8a0:	3303      	adds	r3, #3
1000c8a2:	d812      	bhi.n	1000c8ca <at_ble_event_get+0x4e>
1000c8a4:	683b      	ldr	r3, [r7, #0]
1000c8a6:	2b00      	cmp	r3, #0
1000c8a8:	d112      	bne.n	1000c8d0 <at_ble_event_get+0x54>
1000c8aa:	2cd0      	cmp	r4, #208	; 0xd0
1000c8ac:	d100      	bne.n	1000c8b0 <at_ble_event_get+0x34>
1000c8ae:	e29c      	b.n	1000cdea <at_ble_event_get+0x56e>
1000c8b0:	9802      	ldr	r0, [sp, #8]
1000c8b2:	4ba8      	ldr	r3, [pc, #672]	; (1000cb54 <at_ble_event_get+0x2d8>)
1000c8b4:	4798      	blx	r3
1000c8b6:	1e04      	subs	r4, r0, #0
1000c8b8:	2c02      	cmp	r4, #2
1000c8ba:	d1f3      	bne.n	1000c8a4 <at_ble_event_get+0x28>
1000c8bc:	e025      	b.n	1000c90a <at_ble_event_get+0x8e>
1000c8be:	9802      	ldr	r0, [sp, #8]
1000c8c0:	4ba4      	ldr	r3, [pc, #656]	; (1000cb54 <at_ble_event_get+0x2d8>)
1000c8c2:	4798      	blx	r3
1000c8c4:	1e04      	subs	r4, r0, #0
1000c8c6:	2c02      	cmp	r4, #2
1000c8c8:	d01f      	beq.n	1000c90a <at_ble_event_get+0x8e>
1000c8ca:	683b      	ldr	r3, [r7, #0]
1000c8cc:	2b00      	cmp	r3, #0
1000c8ce:	d0f6      	beq.n	1000c8be <at_ble_event_get+0x42>
1000c8d0:	2cd0      	cmp	r4, #208	; 0xd0
1000c8d2:	d100      	bne.n	1000c8d6 <at_ble_event_get+0x5a>
1000c8d4:	e289      	b.n	1000cdea <at_ble_event_get+0x56e>
1000c8d6:	1ee3      	subs	r3, r4, #3
1000c8d8:	1e5a      	subs	r2, r3, #1
1000c8da:	4193      	sbcs	r3, r2
1000c8dc:	6838      	ldr	r0, [r7, #0]
1000c8de:	425b      	negs	r3, r3
1000c8e0:	401c      	ands	r4, r3
1000c8e2:	2800      	cmp	r0, #0
1000c8e4:	d100      	bne.n	1000c8e8 <at_ble_event_get+0x6c>
1000c8e6:	e286      	b.n	1000cdf6 <at_ble_event_get+0x57a>
1000c8e8:	6803      	ldr	r3, [r0, #0]
1000c8ea:	68c1      	ldr	r1, [r0, #12]
1000c8ec:	603b      	str	r3, [r7, #0]
1000c8ee:	4f9a      	ldr	r7, [pc, #616]	; (1000cb58 <at_ble_event_get+0x2dc>)
1000c8f0:	88c2      	ldrh	r2, [r0, #6]
1000c8f2:	683e      	ldr	r6, [r7, #0]
1000c8f4:	8883      	ldrh	r3, [r0, #4]
1000c8f6:	6006      	str	r6, [r0, #0]
1000c8f8:	6038      	str	r0, [r7, #0]
1000c8fa:	2c00      	cmp	r4, #0
1000c8fc:	d112      	bne.n	1000c924 <at_ble_event_get+0xa8>
1000c8fe:	4897      	ldr	r0, [pc, #604]	; (1000cb5c <at_ble_event_get+0x2e0>)
1000c900:	4283      	cmp	r3, r0
1000c902:	d008      	beq.n	1000c916 <at_ble_event_get+0x9a>
1000c904:	4896      	ldr	r0, [pc, #600]	; (1000cb60 <at_ble_event_get+0x2e4>)
1000c906:	4283      	cmp	r3, r0
1000c908:	d11d      	bne.n	1000c946 <at_ble_event_get+0xca>
1000c90a:	233a      	movs	r3, #58	; 0x3a
1000c90c:	2400      	movs	r4, #0
1000c90e:	9a01      	ldr	r2, [sp, #4]
1000c910:	1c25      	adds	r5, r4, #0
1000c912:	7013      	strb	r3, [r2, #0]
1000c914:	e006      	b.n	1000c924 <at_ble_event_get+0xa8>
1000c916:	429a      	cmp	r2, r3
1000c918:	d000      	beq.n	1000c91c <at_ble_event_get+0xa0>
1000c91a:	e268      	b.n	1000cdee <at_ble_event_get+0x572>
1000c91c:	2338      	movs	r3, #56	; 0x38
1000c91e:	9a01      	ldr	r2, [sp, #4]
1000c920:	7013      	strb	r3, [r2, #0]
1000c922:	6029      	str	r1, [r5, #0]
1000c924:	9b01      	ldr	r3, [sp, #4]
1000c926:	781b      	ldrb	r3, [r3, #0]
1000c928:	2b3b      	cmp	r3, #59	; 0x3b
1000c92a:	d003      	beq.n	1000c934 <at_ble_event_get+0xb8>
1000c92c:	9b03      	ldr	r3, [sp, #12]
1000c92e:	3303      	adds	r3, #3
1000c930:	d903      	bls.n	1000c93a <at_ble_event_get+0xbe>
1000c932:	e264      	b.n	1000cdfe <at_ble_event_get+0x582>
1000c934:	2c00      	cmp	r4, #0
1000c936:	d0b0      	beq.n	1000c89a <at_ble_event_get+0x1e>
1000c938:	e7f8      	b.n	1000c92c <at_ble_event_get+0xb0>
1000c93a:	2cd0      	cmp	r4, #208	; 0xd0
1000c93c:	d100      	bne.n	1000c940 <at_ble_event_get+0xc4>
1000c93e:	e25e      	b.n	1000cdfe <at_ble_event_get+0x582>
1000c940:	4b88      	ldr	r3, [pc, #544]	; (1000cb64 <at_ble_event_get+0x2e8>)
1000c942:	4798      	blx	r3
1000c944:	e25b      	b.n	1000cdfe <at_ble_event_get+0x582>
1000c946:	2abb      	cmp	r2, #187	; 0xbb
1000c948:	d123      	bne.n	1000c992 <at_ble_event_get+0x116>
1000c94a:	2bbb      	cmp	r3, #187	; 0xbb
1000c94c:	d121      	bne.n	1000c992 <at_ble_event_get+0x116>
1000c94e:	80ac      	strh	r4, [r5, #4]
1000c950:	788b      	ldrb	r3, [r1, #2]
1000c952:	784a      	ldrb	r2, [r1, #1]
1000c954:	021b      	lsls	r3, r3, #8
1000c956:	78cf      	ldrb	r7, [r1, #3]
1000c958:	7908      	ldrb	r0, [r1, #4]
1000c95a:	4313      	orrs	r3, r2
1000c95c:	794a      	ldrb	r2, [r1, #5]
1000c95e:	4982      	ldr	r1, [pc, #520]	; (1000cb68 <at_ble_event_get+0x2ec>)
1000c960:	70af      	strb	r7, [r5, #2]
1000c962:	802b      	strh	r3, [r5, #0]
1000c964:	428b      	cmp	r3, r1
1000c966:	d806      	bhi.n	1000c976 <at_ble_event_get+0xfa>
1000c968:	4a80      	ldr	r2, [pc, #512]	; (1000cb6c <at_ble_event_get+0x2f0>)
1000c96a:	4293      	cmp	r3, r2
1000c96c:	d20b      	bcs.n	1000c986 <at_ble_event_get+0x10a>
1000c96e:	4a80      	ldr	r2, [pc, #512]	; (1000cb70 <at_ble_event_get+0x2f4>)
1000c970:	4293      	cmp	r3, r2
1000c972:	d008      	beq.n	1000c986 <at_ble_event_get+0x10a>
1000c974:	e009      	b.n	1000c98a <at_ble_event_get+0x10e>
1000c976:	497f      	ldr	r1, [pc, #508]	; (1000cb74 <at_ble_event_get+0x2f8>)
1000c978:	428b      	cmp	r3, r1
1000c97a:	d106      	bne.n	1000c98a <at_ble_event_get+0x10e>
1000c97c:	0213      	lsls	r3, r2, #8
1000c97e:	4303      	orrs	r3, r0
1000c980:	80ab      	strh	r3, [r5, #4]
1000c982:	2337      	movs	r3, #55	; 0x37
1000c984:	e002      	b.n	1000c98c <at_ble_event_get+0x110>
1000c986:	2336      	movs	r3, #54	; 0x36
1000c988:	e000      	b.n	1000c98c <at_ble_event_get+0x110>
1000c98a:	2300      	movs	r3, #0
1000c98c:	9a01      	ldr	r2, [sp, #4]
1000c98e:	7013      	strb	r3, [r2, #0]
1000c990:	e7c8      	b.n	1000c924 <at_ble_event_get+0xa8>
1000c992:	4879      	ldr	r0, [pc, #484]	; (1000cb78 <at_ble_event_get+0x2fc>)
1000c994:	4283      	cmp	r3, r0
1000c996:	d100      	bne.n	1000c99a <at_ble_event_get+0x11e>
1000c998:	e14c      	b.n	1000cc34 <at_ble_event_get+0x3b8>
1000c99a:	d864      	bhi.n	1000ca66 <at_ble_event_get+0x1ea>
1000c99c:	4877      	ldr	r0, [pc, #476]	; (1000cb7c <at_ble_event_get+0x300>)
1000c99e:	4283      	cmp	r3, r0
1000c9a0:	d100      	bne.n	1000c9a4 <at_ble_event_get+0x128>
1000c9a2:	e1cd      	b.n	1000cd40 <at_ble_event_get+0x4c4>
1000c9a4:	d82f      	bhi.n	1000ca06 <at_ble_event_get+0x18a>
1000c9a6:	4876      	ldr	r0, [pc, #472]	; (1000cb80 <at_ble_event_get+0x304>)
1000c9a8:	4283      	cmp	r3, r0
1000c9aa:	d100      	bne.n	1000c9ae <at_ble_event_get+0x132>
1000c9ac:	e1d6      	b.n	1000cd5c <at_ble_event_get+0x4e0>
1000c9ae:	d813      	bhi.n	1000c9d8 <at_ble_event_get+0x15c>
1000c9b0:	4874      	ldr	r0, [pc, #464]	; (1000cb84 <at_ble_event_get+0x308>)
1000c9b2:	4283      	cmp	r3, r0
1000c9b4:	d100      	bne.n	1000c9b8 <at_ble_event_get+0x13c>
1000c9b6:	e19f      	b.n	1000ccf8 <at_ble_event_get+0x47c>
1000c9b8:	d804      	bhi.n	1000c9c4 <at_ble_event_get+0x148>
1000c9ba:	2438      	movs	r4, #56	; 0x38
1000c9bc:	42a3      	cmp	r3, r4
1000c9be:	d100      	bne.n	1000c9c2 <at_ble_event_get+0x146>
1000c9c0:	e20f      	b.n	1000cde2 <at_ble_event_get+0x566>
1000c9c2:	e0b6      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000c9c4:	4870      	ldr	r0, [pc, #448]	; (1000cb88 <at_ble_event_get+0x30c>)
1000c9c6:	4283      	cmp	r3, r0
1000c9c8:	d100      	bne.n	1000c9cc <at_ble_event_get+0x150>
1000c9ca:	e19b      	b.n	1000cd04 <at_ble_event_get+0x488>
1000c9cc:	30fe      	adds	r0, #254	; 0xfe
1000c9ce:	30ff      	adds	r0, #255	; 0xff
1000c9d0:	4283      	cmp	r3, r0
1000c9d2:	d100      	bne.n	1000c9d6 <at_ble_event_get+0x15a>
1000c9d4:	e1c8      	b.n	1000cd68 <at_ble_event_get+0x4ec>
1000c9d6:	e0ac      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000c9d8:	486c      	ldr	r0, [pc, #432]	; (1000cb8c <at_ble_event_get+0x310>)
1000c9da:	4283      	cmp	r3, r0
1000c9dc:	d100      	bne.n	1000c9e0 <at_ble_event_get+0x164>
1000c9de:	e1a3      	b.n	1000cd28 <at_ble_event_get+0x4ac>
1000c9e0:	d808      	bhi.n	1000c9f4 <at_ble_event_get+0x178>
1000c9e2:	486b      	ldr	r0, [pc, #428]	; (1000cb90 <at_ble_event_get+0x314>)
1000c9e4:	4283      	cmp	r3, r0
1000c9e6:	d100      	bne.n	1000c9ea <at_ble_event_get+0x16e>
1000c9e8:	e192      	b.n	1000cd10 <at_ble_event_get+0x494>
1000c9ea:	486a      	ldr	r0, [pc, #424]	; (1000cb94 <at_ble_event_get+0x318>)
1000c9ec:	4283      	cmp	r3, r0
1000c9ee:	d100      	bne.n	1000c9f2 <at_ble_event_get+0x176>
1000c9f0:	e194      	b.n	1000cd1c <at_ble_event_get+0x4a0>
1000c9f2:	e09e      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000c9f4:	4868      	ldr	r0, [pc, #416]	; (1000cb98 <at_ble_event_get+0x31c>)
1000c9f6:	4283      	cmp	r3, r0
1000c9f8:	d100      	bne.n	1000c9fc <at_ble_event_get+0x180>
1000c9fa:	e19b      	b.n	1000cd34 <at_ble_event_get+0x4b8>
1000c9fc:	4867      	ldr	r0, [pc, #412]	; (1000cb9c <at_ble_event_get+0x320>)
1000c9fe:	4283      	cmp	r3, r0
1000ca00:	d100      	bne.n	1000ca04 <at_ble_event_get+0x188>
1000ca02:	e1c5      	b.n	1000cd90 <at_ble_event_get+0x514>
1000ca04:	e095      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000ca06:	4866      	ldr	r0, [pc, #408]	; (1000cba0 <at_ble_event_get+0x324>)
1000ca08:	4283      	cmp	r3, r0
1000ca0a:	d100      	bne.n	1000ca0e <at_ble_event_get+0x192>
1000ca0c:	e1ba      	b.n	1000cd84 <at_ble_event_get+0x508>
1000ca0e:	d812      	bhi.n	1000ca36 <at_ble_event_get+0x1ba>
1000ca10:	4864      	ldr	r0, [pc, #400]	; (1000cba4 <at_ble_event_get+0x328>)
1000ca12:	4283      	cmp	r3, r0
1000ca14:	d100      	bne.n	1000ca18 <at_ble_event_get+0x19c>
1000ca16:	e1c1      	b.n	1000cd9c <at_ble_event_get+0x520>
1000ca18:	d804      	bhi.n	1000ca24 <at_ble_event_get+0x1a8>
1000ca1a:	4863      	ldr	r0, [pc, #396]	; (1000cba8 <at_ble_event_get+0x32c>)
1000ca1c:	4283      	cmp	r3, r0
1000ca1e:	d100      	bne.n	1000ca22 <at_ble_event_get+0x1a6>
1000ca20:	e192      	b.n	1000cd48 <at_ble_event_get+0x4cc>
1000ca22:	e086      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000ca24:	4861      	ldr	r0, [pc, #388]	; (1000cbac <at_ble_event_get+0x330>)
1000ca26:	4283      	cmp	r3, r0
1000ca28:	d100      	bne.n	1000ca2c <at_ble_event_get+0x1b0>
1000ca2a:	e1a1      	b.n	1000cd70 <at_ble_event_get+0x4f4>
1000ca2c:	4860      	ldr	r0, [pc, #384]	; (1000cbb0 <at_ble_event_get+0x334>)
1000ca2e:	4283      	cmp	r3, r0
1000ca30:	d100      	bne.n	1000ca34 <at_ble_event_get+0x1b8>
1000ca32:	e1a3      	b.n	1000cd7c <at_ble_event_get+0x500>
1000ca34:	e07d      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000ca36:	4a5f      	ldr	r2, [pc, #380]	; (1000cbb4 <at_ble_event_get+0x338>)
1000ca38:	4293      	cmp	r3, r2
1000ca3a:	d100      	bne.n	1000ca3e <at_ble_event_get+0x1c2>
1000ca3c:	e07f      	b.n	1000cb3e <at_ble_event_get+0x2c2>
1000ca3e:	d808      	bhi.n	1000ca52 <at_ble_event_get+0x1d6>
1000ca40:	3a08      	subs	r2, #8
1000ca42:	4293      	cmp	r3, r2
1000ca44:	d077      	beq.n	1000cb36 <at_ble_event_get+0x2ba>
1000ca46:	4a5c      	ldr	r2, [pc, #368]	; (1000cbb8 <at_ble_event_get+0x33c>)
1000ca48:	2439      	movs	r4, #57	; 0x39
1000ca4a:	4293      	cmp	r3, r2
1000ca4c:	d100      	bne.n	1000ca50 <at_ble_event_get+0x1d4>
1000ca4e:	e1c8      	b.n	1000cde2 <at_ble_event_get+0x566>
1000ca50:	e06f      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000ca52:	22d1      	movs	r2, #209	; 0xd1
1000ca54:	0112      	lsls	r2, r2, #4
1000ca56:	4293      	cmp	r3, r2
1000ca58:	d100      	bne.n	1000ca5c <at_ble_event_get+0x1e0>
1000ca5a:	e0df      	b.n	1000cc1c <at_ble_event_get+0x3a0>
1000ca5c:	4a57      	ldr	r2, [pc, #348]	; (1000cbbc <at_ble_event_get+0x340>)
1000ca5e:	4293      	cmp	r3, r2
1000ca60:	d100      	bne.n	1000ca64 <at_ble_event_get+0x1e8>
1000ca62:	e0e1      	b.n	1000cc28 <at_ble_event_get+0x3ac>
1000ca64:	e065      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000ca66:	4856      	ldr	r0, [pc, #344]	; (1000cbc0 <at_ble_event_get+0x344>)
1000ca68:	4283      	cmp	r3, r0
1000ca6a:	d100      	bne.n	1000ca6e <at_ble_event_get+0x1f2>
1000ca6c:	e118      	b.n	1000cca0 <at_ble_event_get+0x424>
1000ca6e:	d82e      	bhi.n	1000cace <at_ble_event_get+0x252>
1000ca70:	4854      	ldr	r0, [pc, #336]	; (1000cbc4 <at_ble_event_get+0x348>)
1000ca72:	4283      	cmp	r3, r0
1000ca74:	d100      	bne.n	1000ca78 <at_ble_event_get+0x1fc>
1000ca76:	e13b      	b.n	1000ccf0 <at_ble_event_get+0x474>
1000ca78:	d812      	bhi.n	1000caa0 <at_ble_event_get+0x224>
1000ca7a:	4853      	ldr	r0, [pc, #332]	; (1000cbc8 <at_ble_event_get+0x34c>)
1000ca7c:	4283      	cmp	r3, r0
1000ca7e:	d100      	bne.n	1000ca82 <at_ble_event_get+0x206>
1000ca80:	e0ee      	b.n	1000cc60 <at_ble_event_get+0x3e4>
1000ca82:	d804      	bhi.n	1000ca8e <at_ble_event_get+0x212>
1000ca84:	3803      	subs	r0, #3
1000ca86:	4283      	cmp	r3, r0
1000ca88:	d100      	bne.n	1000ca8c <at_ble_event_get+0x210>
1000ca8a:	e0d9      	b.n	1000cc40 <at_ble_event_get+0x3c4>
1000ca8c:	e051      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000ca8e:	484f      	ldr	r0, [pc, #316]	; (1000cbcc <at_ble_event_get+0x350>)
1000ca90:	4283      	cmp	r3, r0
1000ca92:	d100      	bne.n	1000ca96 <at_ble_event_get+0x21a>
1000ca94:	e0d8      	b.n	1000cc48 <at_ble_event_get+0x3cc>
1000ca96:	484e      	ldr	r0, [pc, #312]	; (1000cbd0 <at_ble_event_get+0x354>)
1000ca98:	4283      	cmp	r3, r0
1000ca9a:	d100      	bne.n	1000ca9e <at_ble_event_get+0x222>
1000ca9c:	e0fb      	b.n	1000cc96 <at_ble_event_get+0x41a>
1000ca9e:	e048      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000caa0:	484c      	ldr	r0, [pc, #304]	; (1000cbd4 <at_ble_event_get+0x358>)
1000caa2:	4283      	cmp	r3, r0
1000caa4:	d100      	bne.n	1000caa8 <at_ble_event_get+0x22c>
1000caa6:	e0e1      	b.n	1000cc6c <at_ble_event_get+0x3f0>
1000caa8:	d808      	bhi.n	1000cabc <at_ble_event_get+0x240>
1000caaa:	484b      	ldr	r0, [pc, #300]	; (1000cbd8 <at_ble_event_get+0x35c>)
1000caac:	4283      	cmp	r3, r0
1000caae:	d100      	bne.n	1000cab2 <at_ble_event_get+0x236>
1000cab0:	e11a      	b.n	1000cce8 <at_ble_event_get+0x46c>
1000cab2:	484a      	ldr	r0, [pc, #296]	; (1000cbdc <at_ble_event_get+0x360>)
1000cab4:	4283      	cmp	r3, r0
1000cab6:	d100      	bne.n	1000caba <at_ble_event_get+0x23e>
1000cab8:	e0dd      	b.n	1000cc76 <at_ble_event_get+0x3fa>
1000caba:	e03a      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000cabc:	4848      	ldr	r0, [pc, #288]	; (1000cbe0 <at_ble_event_get+0x364>)
1000cabe:	4283      	cmp	r3, r0
1000cac0:	d100      	bne.n	1000cac4 <at_ble_event_get+0x248>
1000cac2:	e0dc      	b.n	1000cc7e <at_ble_event_get+0x402>
1000cac4:	4847      	ldr	r0, [pc, #284]	; (1000cbe4 <at_ble_event_get+0x368>)
1000cac6:	4283      	cmp	r3, r0
1000cac8:	d100      	bne.n	1000cacc <at_ble_event_get+0x250>
1000caca:	e0de      	b.n	1000cc8a <at_ble_event_get+0x40e>
1000cacc:	e031      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000cace:	4846      	ldr	r0, [pc, #280]	; (1000cbe8 <at_ble_event_get+0x36c>)
1000cad0:	4283      	cmp	r3, r0
1000cad2:	d100      	bne.n	1000cad6 <at_ble_event_get+0x25a>
1000cad4:	e0f6      	b.n	1000ccc4 <at_ble_event_get+0x448>
1000cad6:	d816      	bhi.n	1000cb06 <at_ble_event_get+0x28a>
1000cad8:	4844      	ldr	r0, [pc, #272]	; (1000cbec <at_ble_event_get+0x370>)
1000cada:	4283      	cmp	r3, r0
1000cadc:	d100      	bne.n	1000cae0 <at_ble_event_get+0x264>
1000cade:	e0f7      	b.n	1000ccd0 <at_ble_event_get+0x454>
1000cae0:	d808      	bhi.n	1000caf4 <at_ble_event_get+0x278>
1000cae2:	4843      	ldr	r0, [pc, #268]	; (1000cbf0 <at_ble_event_get+0x374>)
1000cae4:	4283      	cmp	r3, r0
1000cae6:	d100      	bne.n	1000caea <at_ble_event_get+0x26e>
1000cae8:	e0e0      	b.n	1000ccac <at_ble_event_get+0x430>
1000caea:	4842      	ldr	r0, [pc, #264]	; (1000cbf4 <at_ble_event_get+0x378>)
1000caec:	4283      	cmp	r3, r0
1000caee:	d100      	bne.n	1000caf2 <at_ble_event_get+0x276>
1000caf0:	e0b0      	b.n	1000cc54 <at_ble_event_get+0x3d8>
1000caf2:	e01e      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000caf4:	4a40      	ldr	r2, [pc, #256]	; (1000cbf8 <at_ble_event_get+0x37c>)
1000caf6:	4293      	cmp	r3, r2
1000caf8:	d100      	bne.n	1000cafc <at_ble_event_get+0x280>
1000cafa:	e0dd      	b.n	1000ccb8 <at_ble_event_get+0x43c>
1000cafc:	4a3f      	ldr	r2, [pc, #252]	; (1000cbfc <at_ble_event_get+0x380>)
1000cafe:	4293      	cmp	r3, r2
1000cb00:	d100      	bne.n	1000cb04 <at_ble_event_get+0x288>
1000cb02:	e0eb      	b.n	1000ccdc <at_ble_event_get+0x460>
1000cb04:	e015      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000cb06:	483e      	ldr	r0, [pc, #248]	; (1000cc00 <at_ble_event_get+0x384>)
1000cb08:	4283      	cmp	r3, r0
1000cb0a:	d100      	bne.n	1000cb0e <at_ble_event_get+0x292>
1000cb0c:	e158      	b.n	1000cdc0 <at_ble_event_get+0x544>
1000cb0e:	d808      	bhi.n	1000cb22 <at_ble_event_get+0x2a6>
1000cb10:	483c      	ldr	r0, [pc, #240]	; (1000cc04 <at_ble_event_get+0x388>)
1000cb12:	4283      	cmp	r3, r0
1000cb14:	d100      	bne.n	1000cb18 <at_ble_event_get+0x29c>
1000cb16:	e147      	b.n	1000cda8 <at_ble_event_get+0x52c>
1000cb18:	483b      	ldr	r0, [pc, #236]	; (1000cc08 <at_ble_event_get+0x38c>)
1000cb1a:	4283      	cmp	r3, r0
1000cb1c:	d100      	bne.n	1000cb20 <at_ble_event_get+0x2a4>
1000cb1e:	e149      	b.n	1000cdb4 <at_ble_event_get+0x538>
1000cb20:	e007      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000cb22:	483a      	ldr	r0, [pc, #232]	; (1000cc0c <at_ble_event_get+0x390>)
1000cb24:	4283      	cmp	r3, r0
1000cb26:	d100      	bne.n	1000cb2a <at_ble_event_get+0x2ae>
1000cb28:	e150      	b.n	1000cdcc <at_ble_event_get+0x550>
1000cb2a:	4839      	ldr	r0, [pc, #228]	; (1000cc10 <at_ble_event_get+0x394>)
1000cb2c:	4283      	cmp	r3, r0
1000cb2e:	d100      	bne.n	1000cb32 <at_ble_event_get+0x2b6>
1000cb30:	e152      	b.n	1000cdd8 <at_ble_event_get+0x55c>
1000cb32:	2400      	movs	r4, #0
1000cb34:	e155      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cb36:	1c08      	adds	r0, r1, #0
1000cb38:	4b36      	ldr	r3, [pc, #216]	; (1000cc14 <at_ble_event_get+0x398>)
1000cb3a:	1c29      	adds	r1, r5, #0
1000cb3c:	e07d      	b.n	1000cc3a <at_ble_event_get+0x3be>
1000cb3e:	1c08      	adds	r0, r1, #0
1000cb40:	4b35      	ldr	r3, [pc, #212]	; (1000cc18 <at_ble_event_get+0x39c>)
1000cb42:	1c29      	adds	r1, r5, #0
1000cb44:	4798      	blx	r3
1000cb46:	2404      	movs	r4, #4
1000cb48:	e14b      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cb4a:	46c0      	nop			; (mov r8, r8)
1000cb4c:	1000d9fd 	.word	0x1000d9fd
1000cb50:	10013128 	.word	0x10013128
1000cb54:	1000b7bd 	.word	0x1000b7bd
1000cb58:	1001312c 	.word	0x1001312c
1000cb5c:	0000ffff 	.word	0x0000ffff
1000cb60:	0000fffe 	.word	0x0000fffe
1000cb64:	1000d9ff 	.word	0x1000d9ff
1000cb68:	0000201e 	.word	0x0000201e
1000cb6c:	0000201d 	.word	0x0000201d
1000cb70:	00000c03 	.word	0x00000c03
1000cb74:	0000201f 	.word	0x0000201f
1000cb78:	00000d1c 	.word	0x00000d1c
1000cb7c:	00000c0c 	.word	0x00000c0c
1000cb80:	00000c02 	.word	0x00000c02
1000cb84:	00000a02 	.word	0x00000a02
1000cb88:	00000a03 	.word	0x00000a03
1000cb8c:	00000c06 	.word	0x00000c06
1000cb90:	00000c04 	.word	0x00000c04
1000cb94:	00000c05 	.word	0x00000c05
1000cb98:	00000c07 	.word	0x00000c07
1000cb9c:	00000c09 	.word	0x00000c09
1000cba0:	00000c17 	.word	0x00000c17
1000cba4:	00000c12 	.word	0x00000c12
1000cba8:	00000c0d 	.word	0x00000c0d
1000cbac:	00000c13 	.word	0x00000c13
1000cbb0:	00000c15 	.word	0x00000c15
1000cbb4:	00000d08 	.word	0x00000d08
1000cbb8:	00000d01 	.word	0x00000d01
1000cbbc:	00000d15 	.word	0x00000d15
1000cbc0:	00000e1b 	.word	0x00000e1b
1000cbc4:	00000e0f 	.word	0x00000e0f
1000cbc8:	00000e03 	.word	0x00000e03
1000cbcc:	00000e06 	.word	0x00000e06
1000cbd0:	00000e0a 	.word	0x00000e0a
1000cbd4:	00000e15 	.word	0x00000e15
1000cbd8:	00000e11 	.word	0x00000e11
1000cbdc:	00000e13 	.word	0x00000e13
1000cbe0:	00000e17 	.word	0x00000e17
1000cbe4:	00000e19 	.word	0x00000e19
1000cbe8:	00000e27 	.word	0x00000e27
1000cbec:	00000e21 	.word	0x00000e21
1000cbf0:	00000e1c 	.word	0x00000e1c
1000cbf4:	00000e1d 	.word	0x00000e1d
1000cbf8:	00000e22 	.word	0x00000e22
1000cbfc:	00000e25 	.word	0x00000e25
1000cc00:	00001b05 	.word	0x00001b05
1000cc04:	00001b01 	.word	0x00001b01
1000cc08:	00001b03 	.word	0x00001b03
1000cc0c:	00001b06 	.word	0x00001b06
1000cc10:	00001b08 	.word	0x00001b08
1000cc14:	1000e7e9 	.word	0x1000e7e9
1000cc18:	1000e7cd 	.word	0x1000e7cd
1000cc1c:	1c08      	adds	r0, r1, #0
1000cc1e:	4b79      	ldr	r3, [pc, #484]	; (1000ce04 <at_ble_event_get+0x588>)
1000cc20:	1c29      	adds	r1, r5, #0
1000cc22:	4798      	blx	r3
1000cc24:	2401      	movs	r4, #1
1000cc26:	e0dc      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc28:	1c08      	adds	r0, r1, #0
1000cc2a:	4b77      	ldr	r3, [pc, #476]	; (1000ce08 <at_ble_event_get+0x58c>)
1000cc2c:	1c29      	adds	r1, r5, #0
1000cc2e:	4798      	blx	r3
1000cc30:	240f      	movs	r4, #15
1000cc32:	e0d6      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc34:	1c08      	adds	r0, r1, #0
1000cc36:	1c29      	adds	r1, r5, #0
1000cc38:	4b74      	ldr	r3, [pc, #464]	; (1000ce0c <at_ble_event_get+0x590>)
1000cc3a:	4798      	blx	r3
1000cc3c:	1c04      	adds	r4, r0, #0
1000cc3e:	e0d0      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc40:	1c10      	adds	r0, r2, #0
1000cc42:	4b73      	ldr	r3, [pc, #460]	; (1000ce10 <at_ble_event_get+0x594>)
1000cc44:	1c2a      	adds	r2, r5, #0
1000cc46:	e014      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000cc48:	1c10      	adds	r0, r2, #0
1000cc4a:	4b72      	ldr	r3, [pc, #456]	; (1000ce14 <at_ble_event_get+0x598>)
1000cc4c:	1c2a      	adds	r2, r5, #0
1000cc4e:	4798      	blx	r3
1000cc50:	2411      	movs	r4, #17
1000cc52:	e0c6      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc54:	1c10      	adds	r0, r2, #0
1000cc56:	4b70      	ldr	r3, [pc, #448]	; (1000ce18 <at_ble_event_get+0x59c>)
1000cc58:	1c2a      	adds	r2, r5, #0
1000cc5a:	4798      	blx	r3
1000cc5c:	2412      	movs	r4, #18
1000cc5e:	e0c0      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc60:	1c08      	adds	r0, r1, #0
1000cc62:	4b6e      	ldr	r3, [pc, #440]	; (1000ce1c <at_ble_event_get+0x5a0>)
1000cc64:	1c29      	adds	r1, r5, #0
1000cc66:	4798      	blx	r3
1000cc68:	2406      	movs	r4, #6
1000cc6a:	e0ba      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc6c:	1c10      	adds	r0, r2, #0
1000cc6e:	1c2a      	adds	r2, r5, #0
1000cc70:	4b6b      	ldr	r3, [pc, #428]	; (1000ce20 <at_ble_event_get+0x5a4>)
1000cc72:	4798      	blx	r3
1000cc74:	e7e2      	b.n	1000cc3c <at_ble_event_get+0x3c0>
1000cc76:	1c10      	adds	r0, r2, #0
1000cc78:	4b6a      	ldr	r3, [pc, #424]	; (1000ce24 <at_ble_event_get+0x5a8>)
1000cc7a:	1c2a      	adds	r2, r5, #0
1000cc7c:	e7f9      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000cc7e:	1c10      	adds	r0, r2, #0
1000cc80:	4b69      	ldr	r3, [pc, #420]	; (1000ce28 <at_ble_event_get+0x5ac>)
1000cc82:	1c2a      	adds	r2, r5, #0
1000cc84:	4798      	blx	r3
1000cc86:	240d      	movs	r4, #13
1000cc88:	e0ab      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc8a:	1c10      	adds	r0, r2, #0
1000cc8c:	4b67      	ldr	r3, [pc, #412]	; (1000ce2c <at_ble_event_get+0x5b0>)
1000cc8e:	1c2a      	adds	r2, r5, #0
1000cc90:	4798      	blx	r3
1000cc92:	240e      	movs	r4, #14
1000cc94:	e0a5      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cc96:	1c10      	adds	r0, r2, #0
1000cc98:	4b65      	ldr	r3, [pc, #404]	; (1000ce30 <at_ble_event_get+0x5b4>)
1000cc9a:	1c2a      	adds	r2, r5, #0
1000cc9c:	4798      	blx	r3
1000cc9e:	e075      	b.n	1000cd8c <at_ble_event_get+0x510>
1000cca0:	1c10      	adds	r0, r2, #0
1000cca2:	4b64      	ldr	r3, [pc, #400]	; (1000ce34 <at_ble_event_get+0x5b8>)
1000cca4:	1c2a      	adds	r2, r5, #0
1000cca6:	4798      	blx	r3
1000cca8:	240b      	movs	r4, #11
1000ccaa:	e09a      	b.n	1000cde2 <at_ble_event_get+0x566>
1000ccac:	1c10      	adds	r0, r2, #0
1000ccae:	4b62      	ldr	r3, [pc, #392]	; (1000ce38 <at_ble_event_get+0x5bc>)
1000ccb0:	1c2a      	adds	r2, r5, #0
1000ccb2:	4798      	blx	r3
1000ccb4:	2410      	movs	r4, #16
1000ccb6:	e094      	b.n	1000cde2 <at_ble_event_get+0x566>
1000ccb8:	1c08      	adds	r0, r1, #0
1000ccba:	4b60      	ldr	r3, [pc, #384]	; (1000ce3c <at_ble_event_get+0x5c0>)
1000ccbc:	1c29      	adds	r1, r5, #0
1000ccbe:	4798      	blx	r3
1000ccc0:	2428      	movs	r4, #40	; 0x28
1000ccc2:	e08e      	b.n	1000cde2 <at_ble_event_get+0x566>
1000ccc4:	1c08      	adds	r0, r1, #0
1000ccc6:	4b5e      	ldr	r3, [pc, #376]	; (1000ce40 <at_ble_event_get+0x5c4>)
1000ccc8:	1c29      	adds	r1, r5, #0
1000ccca:	4798      	blx	r3
1000cccc:	2429      	movs	r4, #41	; 0x29
1000ccce:	e088      	b.n	1000cde2 <at_ble_event_get+0x566>
1000ccd0:	1c08      	adds	r0, r1, #0
1000ccd2:	4b5c      	ldr	r3, [pc, #368]	; (1000ce44 <at_ble_event_get+0x5c8>)
1000ccd4:	1c29      	adds	r1, r5, #0
1000ccd6:	4798      	blx	r3
1000ccd8:	2427      	movs	r4, #39	; 0x27
1000ccda:	e082      	b.n	1000cde2 <at_ble_event_get+0x566>
1000ccdc:	1c08      	adds	r0, r1, #0
1000ccde:	4b5a      	ldr	r3, [pc, #360]	; (1000ce48 <at_ble_event_get+0x5cc>)
1000cce0:	1c29      	adds	r1, r5, #0
1000cce2:	4798      	blx	r3
1000cce4:	242a      	movs	r4, #42	; 0x2a
1000cce6:	e07c      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cce8:	1c10      	adds	r0, r2, #0
1000ccea:	4b58      	ldr	r3, [pc, #352]	; (1000ce4c <at_ble_event_get+0x5d0>)
1000ccec:	1c2a      	adds	r2, r5, #0
1000ccee:	e7c0      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000ccf0:	1c10      	adds	r0, r2, #0
1000ccf2:	4b57      	ldr	r3, [pc, #348]	; (1000ce50 <at_ble_event_get+0x5d4>)
1000ccf4:	1c2a      	adds	r2, r5, #0
1000ccf6:	e7bc      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000ccf8:	1c08      	adds	r0, r1, #0
1000ccfa:	4b56      	ldr	r3, [pc, #344]	; (1000ce54 <at_ble_event_get+0x5d8>)
1000ccfc:	1c29      	adds	r1, r5, #0
1000ccfe:	4798      	blx	r3
1000cd00:	242b      	movs	r4, #43	; 0x2b
1000cd02:	e06e      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd04:	1c08      	adds	r0, r1, #0
1000cd06:	4b54      	ldr	r3, [pc, #336]	; (1000ce58 <at_ble_event_get+0x5dc>)
1000cd08:	1c29      	adds	r1, r5, #0
1000cd0a:	4798      	blx	r3
1000cd0c:	242c      	movs	r4, #44	; 0x2c
1000cd0e:	e068      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd10:	1c10      	adds	r0, r2, #0
1000cd12:	4b52      	ldr	r3, [pc, #328]	; (1000ce5c <at_ble_event_get+0x5e0>)
1000cd14:	1c2a      	adds	r2, r5, #0
1000cd16:	4798      	blx	r3
1000cd18:	2413      	movs	r4, #19
1000cd1a:	e062      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd1c:	1c10      	adds	r0, r2, #0
1000cd1e:	4b50      	ldr	r3, [pc, #320]	; (1000ce60 <at_ble_event_get+0x5e4>)
1000cd20:	1c2a      	adds	r2, r5, #0
1000cd22:	4798      	blx	r3
1000cd24:	2414      	movs	r4, #20
1000cd26:	e05c      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd28:	1c10      	adds	r0, r2, #0
1000cd2a:	4b4e      	ldr	r3, [pc, #312]	; (1000ce64 <at_ble_event_get+0x5e8>)
1000cd2c:	1c2a      	adds	r2, r5, #0
1000cd2e:	4798      	blx	r3
1000cd30:	2415      	movs	r4, #21
1000cd32:	e056      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd34:	1c10      	adds	r0, r2, #0
1000cd36:	4b4c      	ldr	r3, [pc, #304]	; (1000ce68 <at_ble_event_get+0x5ec>)
1000cd38:	1c2a      	adds	r2, r5, #0
1000cd3a:	4798      	blx	r3
1000cd3c:	2416      	movs	r4, #22
1000cd3e:	e050      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd40:	1c10      	adds	r0, r2, #0
1000cd42:	4b4a      	ldr	r3, [pc, #296]	; (1000ce6c <at_ble_event_get+0x5f0>)
1000cd44:	1c2a      	adds	r2, r5, #0
1000cd46:	e794      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000cd48:	1c10      	adds	r0, r2, #0
1000cd4a:	4b48      	ldr	r3, [pc, #288]	; (1000ce6c <at_ble_event_get+0x5f0>)
1000cd4c:	1c2a      	adds	r2, r5, #0
1000cd4e:	4798      	blx	r3
1000cd50:	88a9      	ldrh	r1, [r5, #4]
1000cd52:	1c04      	adds	r4, r0, #0
1000cd54:	4b46      	ldr	r3, [pc, #280]	; (1000ce70 <at_ble_event_get+0x5f4>)
1000cd56:	8828      	ldrh	r0, [r5, #0]
1000cd58:	4798      	blx	r3
1000cd5a:	e042      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd5c:	1c10      	adds	r0, r2, #0
1000cd5e:	4b45      	ldr	r3, [pc, #276]	; (1000ce74 <at_ble_event_get+0x5f8>)
1000cd60:	1c2a      	adds	r2, r5, #0
1000cd62:	4798      	blx	r3
1000cd64:	2423      	movs	r4, #35	; 0x23
1000cd66:	e03c      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd68:	1c10      	adds	r0, r2, #0
1000cd6a:	4b43      	ldr	r3, [pc, #268]	; (1000ce78 <at_ble_event_get+0x5fc>)
1000cd6c:	1c2a      	adds	r2, r5, #0
1000cd6e:	e780      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000cd70:	0a12      	lsrs	r2, r2, #8
1000cd72:	1c08      	adds	r0, r1, #0
1000cd74:	802a      	strh	r2, [r5, #0]
1000cd76:	1c29      	adds	r1, r5, #0
1000cd78:	4b40      	ldr	r3, [pc, #256]	; (1000ce7c <at_ble_event_get+0x600>)
1000cd7a:	e75e      	b.n	1000cc3a <at_ble_event_get+0x3be>
1000cd7c:	1c10      	adds	r0, r2, #0
1000cd7e:	4b40      	ldr	r3, [pc, #256]	; (1000ce80 <at_ble_event_get+0x604>)
1000cd80:	1c2a      	adds	r2, r5, #0
1000cd82:	e776      	b.n	1000cc72 <at_ble_event_get+0x3f6>
1000cd84:	1c08      	adds	r0, r1, #0
1000cd86:	4b3f      	ldr	r3, [pc, #252]	; (1000ce84 <at_ble_event_get+0x608>)
1000cd88:	1c29      	adds	r1, r5, #0
1000cd8a:	4798      	blx	r3
1000cd8c:	243b      	movs	r4, #59	; 0x3b
1000cd8e:	e028      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd90:	1c10      	adds	r0, r2, #0
1000cd92:	4b3d      	ldr	r3, [pc, #244]	; (1000ce88 <at_ble_event_get+0x60c>)
1000cd94:	1c2a      	adds	r2, r5, #0
1000cd96:	4798      	blx	r3
1000cd98:	2418      	movs	r4, #24
1000cd9a:	e022      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cd9c:	1c10      	adds	r0, r2, #0
1000cd9e:	4b3b      	ldr	r3, [pc, #236]	; (1000ce8c <at_ble_event_get+0x610>)
1000cda0:	1c2a      	adds	r2, r5, #0
1000cda2:	4798      	blx	r3
1000cda4:	2420      	movs	r4, #32
1000cda6:	e01c      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cda8:	1c10      	adds	r0, r2, #0
1000cdaa:	4b39      	ldr	r3, [pc, #228]	; (1000ce90 <at_ble_event_get+0x614>)
1000cdac:	1c2a      	adds	r2, r5, #0
1000cdae:	4798      	blx	r3
1000cdb0:	2433      	movs	r4, #51	; 0x33
1000cdb2:	e016      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cdb4:	1c10      	adds	r0, r2, #0
1000cdb6:	4b37      	ldr	r3, [pc, #220]	; (1000ce94 <at_ble_event_get+0x618>)
1000cdb8:	1c2a      	adds	r2, r5, #0
1000cdba:	4798      	blx	r3
1000cdbc:	2430      	movs	r4, #48	; 0x30
1000cdbe:	e010      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cdc0:	1c10      	adds	r0, r2, #0
1000cdc2:	4b35      	ldr	r3, [pc, #212]	; (1000ce98 <at_ble_event_get+0x61c>)
1000cdc4:	1c2a      	adds	r2, r5, #0
1000cdc6:	4798      	blx	r3
1000cdc8:	2434      	movs	r4, #52	; 0x34
1000cdca:	e00a      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cdcc:	1c10      	adds	r0, r2, #0
1000cdce:	4b33      	ldr	r3, [pc, #204]	; (1000ce9c <at_ble_event_get+0x620>)
1000cdd0:	1c2a      	adds	r2, r5, #0
1000cdd2:	4798      	blx	r3
1000cdd4:	2435      	movs	r4, #53	; 0x35
1000cdd6:	e004      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cdd8:	1c10      	adds	r0, r2, #0
1000cdda:	4b31      	ldr	r3, [pc, #196]	; (1000cea0 <at_ble_event_get+0x624>)
1000cddc:	1c2a      	adds	r2, r5, #0
1000cdde:	4798      	blx	r3
1000cde0:	2432      	movs	r4, #50	; 0x32
1000cde2:	9b01      	ldr	r3, [sp, #4]
1000cde4:	701c      	strb	r4, [r3, #0]
1000cde6:	2400      	movs	r4, #0
1000cde8:	e59c      	b.n	1000c924 <at_ble_event_get+0xa8>
1000cdea:	24d0      	movs	r4, #208	; 0xd0
1000cdec:	e59a      	b.n	1000c924 <at_ble_event_get+0xa8>
1000cdee:	2abb      	cmp	r2, #187	; 0xbb
1000cdf0:	d000      	beq.n	1000cdf4 <at_ble_event_get+0x578>
1000cdf2:	e69e      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000cdf4:	e7f5      	b.n	1000cde2 <at_ble_event_get+0x566>
1000cdf6:	2c00      	cmp	r4, #0
1000cdf8:	d000      	beq.n	1000cdfc <at_ble_event_get+0x580>
1000cdfa:	e593      	b.n	1000c924 <at_ble_event_get+0xa8>
1000cdfc:	e699      	b.n	1000cb32 <at_ble_event_get+0x2b6>
1000cdfe:	1c20      	adds	r0, r4, #0
1000ce00:	b005      	add	sp, #20
1000ce02:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce04:	1000e949 	.word	0x1000e949
1000ce08:	1000eb55 	.word	0x1000eb55
1000ce0c:	1000eb79 	.word	0x1000eb79
1000ce10:	1000dba1 	.word	0x1000dba1
1000ce14:	1000e3e1 	.word	0x1000e3e1
1000ce18:	1000e45d 	.word	0x1000e45d
1000ce1c:	1000de59 	.word	0x1000de59
1000ce20:	1000def5 	.word	0x1000def5
1000ce24:	1000dfcd 	.word	0x1000dfcd
1000ce28:	1000e215 	.word	0x1000e215
1000ce2c:	1000e2b5 	.word	0x1000e2b5
1000ce30:	1000e36d 	.word	0x1000e36d
1000ce34:	1000e395 	.word	0x1000e395
1000ce38:	1000e3ab 	.word	0x1000e3ab
1000ce3c:	1000e475 	.word	0x1000e475
1000ce40:	1000e4a3 	.word	0x1000e4a3
1000ce44:	1000e4b9 	.word	0x1000e4b9
1000ce48:	1000e4e3 	.word	0x1000e4e3
1000ce4c:	1000e311 	.word	0x1000e311
1000ce50:	1000e33b 	.word	0x1000e33b
1000ce54:	1000d639 	.word	0x1000d639
1000ce58:	1000d665 	.word	0x1000d665
1000ce5c:	1000edb1 	.word	0x1000edb1
1000ce60:	1000eded 	.word	0x1000eded
1000ce64:	1000ee35 	.word	0x1000ee35
1000ce68:	1000ee79 	.word	0x1000ee79
1000ce6c:	1000eead 	.word	0x1000eead
1000ce70:	1000ed71 	.word	0x1000ed71
1000ce74:	1000ef79 	.word	0x1000ef79
1000ce78:	1000ef01 	.word	0x1000ef01
1000ce7c:	1000d591 	.word	0x1000d591
1000ce80:	1000d5fd 	.word	0x1000d5fd
1000ce84:	1000d5c1 	.word	0x1000d5c1
1000ce88:	1000ef89 	.word	0x1000ef89
1000ce8c:	1000efc9 	.word	0x1000efc9
1000ce90:	1000f115 	.word	0x1000f115
1000ce94:	1000f11f 	.word	0x1000f11f
1000ce98:	1000f125 	.word	0x1000f125
1000ce9c:	1000f12b 	.word	0x1000f12b
1000cea0:	1000f137 	.word	0x1000f137

1000cea4 <internal_event_flush>:
1000cea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cea6:	490e      	ldr	r1, [pc, #56]	; (1000cee0 <internal_event_flush+0x3c>)
1000cea8:	2400      	movs	r4, #0
1000ceaa:	680b      	ldr	r3, [r1, #0]
1000ceac:	1c0f      	adds	r7, r1, #0
1000ceae:	1c1e      	adds	r6, r3, #0
1000ceb0:	4a0c      	ldr	r2, [pc, #48]	; (1000cee4 <internal_event_flush+0x40>)
1000ceb2:	6815      	ldr	r5, [r2, #0]
1000ceb4:	9201      	str	r2, [sp, #4]
1000ceb6:	2b00      	cmp	r3, #0
1000ceb8:	d00e      	beq.n	1000ced8 <internal_event_flush+0x34>
1000ceba:	889a      	ldrh	r2, [r3, #4]
1000cebc:	6819      	ldr	r1, [r3, #0]
1000cebe:	4282      	cmp	r2, r0
1000cec0:	d107      	bne.n	1000ced2 <internal_event_flush+0x2e>
1000cec2:	2c00      	cmp	r4, #0
1000cec4:	d001      	beq.n	1000ceca <internal_event_flush+0x26>
1000cec6:	6021      	str	r1, [r4, #0]
1000cec8:	e000      	b.n	1000cecc <internal_event_flush+0x28>
1000ceca:	1c0e      	adds	r6, r1, #0
1000cecc:	601d      	str	r5, [r3, #0]
1000cece:	1c1d      	adds	r5, r3, #0
1000ced0:	1c23      	adds	r3, r4, #0
1000ced2:	1c1c      	adds	r4, r3, #0
1000ced4:	1c0b      	adds	r3, r1, #0
1000ced6:	e7ee      	b.n	1000ceb6 <internal_event_flush+0x12>
1000ced8:	9b01      	ldr	r3, [sp, #4]
1000ceda:	603e      	str	r6, [r7, #0]
1000cedc:	601d      	str	r5, [r3, #0]
1000cede:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cee0:	10013128 	.word	0x10013128
1000cee4:	1001312c 	.word	0x1001312c

1000cee8 <internal_conn_flush>:
1000cee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ceea:	4a12      	ldr	r2, [pc, #72]	; (1000cf34 <internal_conn_flush+0x4c>)
1000ceec:	9000      	str	r0, [sp, #0]
1000ceee:	6813      	ldr	r3, [r2, #0]
1000cef0:	4811      	ldr	r0, [pc, #68]	; (1000cf38 <internal_conn_flush+0x50>)
1000cef2:	1c1f      	adds	r7, r3, #0
1000cef4:	2100      	movs	r1, #0
1000cef6:	4684      	mov	ip, r0
1000cef8:	6804      	ldr	r4, [r0, #0]
1000cefa:	9201      	str	r2, [sp, #4]
1000cefc:	2b00      	cmp	r3, #0
1000cefe:	d014      	beq.n	1000cf2a <internal_conn_flush+0x42>
1000cf00:	88d8      	ldrh	r0, [r3, #6]
1000cf02:	9a00      	ldr	r2, [sp, #0]
1000cf04:	681d      	ldr	r5, [r3, #0]
1000cf06:	0a06      	lsrs	r6, r0, #8
1000cf08:	4296      	cmp	r6, r2
1000cf0a:	d10b      	bne.n	1000cf24 <internal_conn_flush+0x3c>
1000cf0c:	26fd      	movs	r6, #253	; 0xfd
1000cf0e:	4006      	ands	r6, r0
1000cf10:	2e0c      	cmp	r6, #12
1000cf12:	d107      	bne.n	1000cf24 <internal_conn_flush+0x3c>
1000cf14:	2900      	cmp	r1, #0
1000cf16:	d001      	beq.n	1000cf1c <internal_conn_flush+0x34>
1000cf18:	600d      	str	r5, [r1, #0]
1000cf1a:	e000      	b.n	1000cf1e <internal_conn_flush+0x36>
1000cf1c:	1c2f      	adds	r7, r5, #0
1000cf1e:	601c      	str	r4, [r3, #0]
1000cf20:	1c1c      	adds	r4, r3, #0
1000cf22:	1c0b      	adds	r3, r1, #0
1000cf24:	1c19      	adds	r1, r3, #0
1000cf26:	1c2b      	adds	r3, r5, #0
1000cf28:	e7e8      	b.n	1000cefc <internal_conn_flush+0x14>
1000cf2a:	9b01      	ldr	r3, [sp, #4]
1000cf2c:	601f      	str	r7, [r3, #0]
1000cf2e:	4663      	mov	r3, ip
1000cf30:	601c      	str	r4, [r3, #0]
1000cf32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cf34:	10013128 	.word	0x10013128
1000cf38:	1001312c 	.word	0x1001312c

1000cf3c <at_ble_device_name_set>:
1000cf3c:	b530      	push	{r4, r5, lr}
1000cf3e:	23cf      	movs	r3, #207	; 0xcf
1000cf40:	2800      	cmp	r0, #0
1000cf42:	d010      	beq.n	1000cf66 <at_ble_device_name_set+0x2a>
1000cf44:	1e4a      	subs	r2, r1, #1
1000cf46:	2a1f      	cmp	r2, #31
1000cf48:	d80d      	bhi.n	1000cf66 <at_ble_device_name_set+0x2a>
1000cf4a:	4a08      	ldr	r2, [pc, #32]	; (1000cf6c <at_ble_device_name_set+0x30>)
1000cf4c:	1c13      	adds	r3, r2, #0
1000cf4e:	33aa      	adds	r3, #170	; 0xaa
1000cf50:	8019      	strh	r1, [r3, #0]
1000cf52:	2300      	movs	r3, #0
1000cf54:	1c1c      	adds	r4, r3, #0
1000cf56:	5cc5      	ldrb	r5, [r0, r3]
1000cf58:	34ac      	adds	r4, #172	; 0xac
1000cf5a:	3301      	adds	r3, #1
1000cf5c:	5515      	strb	r5, [r2, r4]
1000cf5e:	b2dc      	uxtb	r4, r3
1000cf60:	428c      	cmp	r4, r1
1000cf62:	d3f7      	bcc.n	1000cf54 <at_ble_device_name_set+0x18>
1000cf64:	2300      	movs	r3, #0
1000cf66:	1c18      	adds	r0, r3, #0
1000cf68:	bd30      	pop	{r4, r5, pc}
1000cf6a:	46c0      	nop			; (mov r8, r8)
1000cf6c:	10013f76 	.word	0x10013f76

1000cf70 <at_ble_addr_get>:
1000cf70:	b510      	push	{r4, lr}
1000cf72:	1c04      	adds	r4, r0, #0
1000cf74:	20cf      	movs	r0, #207	; 0xcf
1000cf76:	2c00      	cmp	r4, #0
1000cf78:	d006      	beq.n	1000cf88 <at_ble_addr_get+0x18>
1000cf7a:	4b04      	ldr	r3, [pc, #16]	; (1000cf8c <at_ble_addr_get+0x1c>)
1000cf7c:	38ce      	subs	r0, #206	; 0xce
1000cf7e:	1c21      	adds	r1, r4, #0
1000cf80:	4798      	blx	r3
1000cf82:	4b03      	ldr	r3, [pc, #12]	; (1000cf90 <at_ble_addr_get+0x20>)
1000cf84:	791b      	ldrb	r3, [r3, #4]
1000cf86:	7023      	strb	r3, [r4, #0]
1000cf88:	bd10      	pop	{r4, pc}
1000cf8a:	46c0      	nop			; (mov r8, r8)
1000cf8c:	1000e67d 	.word	0x1000e67d
1000cf90:	10013f76 	.word	0x10013f76

1000cf94 <at_ble_set_dev_config>:
1000cf94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf96:	7906      	ldrb	r6, [r0, #4]
1000cf98:	b089      	sub	sp, #36	; 0x24
1000cf9a:	25cf      	movs	r5, #207	; 0xcf
1000cf9c:	2e03      	cmp	r6, #3
1000cf9e:	d838      	bhi.n	1000d012 <at_ble_set_dev_config+0x7e>
1000cfa0:	7803      	ldrb	r3, [r0, #0]
1000cfa2:	3511      	adds	r5, #17
1000cfa4:	2b0f      	cmp	r3, #15
1000cfa6:	d834      	bhi.n	1000d012 <at_ble_set_dev_config+0x7e>
1000cfa8:	2380      	movs	r3, #128	; 0x80
1000cfaa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000cfac:	3d11      	subs	r5, #17
1000cfae:	009b      	lsls	r3, r3, #2
1000cfb0:	429f      	cmp	r7, r3
1000cfb2:	d82e      	bhi.n	1000d012 <at_ble_set_dev_config+0x7e>
1000cfb4:	7fc5      	ldrb	r5, [r0, #31]
1000cfb6:	7f83      	ldrb	r3, [r0, #30]
1000cfb8:	01ad      	lsls	r5, r5, #6
1000cfba:	015b      	lsls	r3, r3, #5
1000cfbc:	431d      	orrs	r5, r3
1000cfbe:	7ec3      	ldrb	r3, [r0, #27]
1000cfc0:	431d      	orrs	r5, r3
1000cfc2:	7f43      	ldrb	r3, [r0, #29]
1000cfc4:	011b      	lsls	r3, r3, #4
1000cfc6:	431d      	orrs	r5, r3
1000cfc8:	7f03      	ldrb	r3, [r0, #28]
1000cfca:	009b      	lsls	r3, r3, #2
1000cfcc:	431d      	orrs	r5, r3
1000cfce:	4b12      	ldr	r3, [pc, #72]	; (1000d018 <at_ble_set_dev_config+0x84>)
1000cfd0:	b2ed      	uxtb	r5, r5
1000cfd2:	711e      	strb	r6, [r3, #4]
1000cfd4:	7903      	ldrb	r3, [r0, #4]
1000cfd6:	3b02      	subs	r3, #2
1000cfd8:	2b01      	cmp	r3, #1
1000cfda:	d801      	bhi.n	1000cfe0 <at_ble_set_dev_config+0x4c>
1000cfdc:	2302      	movs	r3, #2
1000cfde:	7103      	strb	r3, [r0, #4]
1000cfe0:	1c04      	adds	r4, r0, #0
1000cfe2:	1c23      	adds	r3, r4, #0
1000cfe4:	330b      	adds	r3, #11
1000cfe6:	8861      	ldrh	r1, [r4, #2]
1000cfe8:	9307      	str	r3, [sp, #28]
1000cfea:	7923      	ldrb	r3, [r4, #4]
1000cfec:	7800      	ldrb	r0, [r0, #0]
1000cfee:	9300      	str	r3, [sp, #0]
1000cff0:	9501      	str	r5, [sp, #4]
1000cff2:	8c25      	ldrh	r5, [r4, #32]
1000cff4:	1d62      	adds	r2, r4, #5
1000cff6:	9502      	str	r5, [sp, #8]
1000cff8:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000cffa:	9b07      	ldr	r3, [sp, #28]
1000cffc:	9503      	str	r5, [sp, #12]
1000cffe:	9704      	str	r7, [sp, #16]
1000d000:	4d06      	ldr	r5, [pc, #24]	; (1000d01c <at_ble_set_dev_config+0x88>)
1000d002:	47a8      	blx	r5
1000d004:	7126      	strb	r6, [r4, #4]
1000d006:	1c05      	adds	r5, r0, #0
1000d008:	1c21      	adds	r1, r4, #0
1000d00a:	4803      	ldr	r0, [pc, #12]	; (1000d018 <at_ble_set_dev_config+0x84>)
1000d00c:	2226      	movs	r2, #38	; 0x26
1000d00e:	4b04      	ldr	r3, [pc, #16]	; (1000d020 <at_ble_set_dev_config+0x8c>)
1000d010:	4798      	blx	r3
1000d012:	1c28      	adds	r0, r5, #0
1000d014:	b009      	add	sp, #36	; 0x24
1000d016:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d018:	10013f76 	.word	0x10013f76
1000d01c:	1000e575 	.word	0x1000e575
1000d020:	1001025f 	.word	0x1001025f

1000d024 <at_ble_init>:
1000d024:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d026:	b087      	sub	sp, #28
1000d028:	af03      	add	r7, sp, #12
1000d02a:	494d      	ldr	r1, [pc, #308]	; (1000d160 <at_ble_init+0x13c>)
1000d02c:	1c04      	adds	r4, r0, #0
1000d02e:	220b      	movs	r2, #11
1000d030:	4b4c      	ldr	r3, [pc, #304]	; (1000d164 <at_ble_init+0x140>)
1000d032:	1c38      	adds	r0, r7, #0
1000d034:	4798      	blx	r3
1000d036:	2205      	movs	r2, #5
1000d038:	4b4b      	ldr	r3, [pc, #300]	; (1000d168 <at_ble_init+0x144>)
1000d03a:	801a      	strh	r2, [r3, #0]
1000d03c:	2300      	movs	r3, #0
1000d03e:	4a4b      	ldr	r2, [pc, #300]	; (1000d16c <at_ble_init+0x148>)
1000d040:	6013      	str	r3, [r2, #0]
1000d042:	4a4b      	ldr	r2, [pc, #300]	; (1000d170 <at_ble_init+0x14c>)
1000d044:	7013      	strb	r3, [r2, #0]
1000d046:	4a4b      	ldr	r2, [pc, #300]	; (1000d174 <at_ble_init+0x150>)
1000d048:	7013      	strb	r3, [r2, #0]
1000d04a:	4b4b      	ldr	r3, [pc, #300]	; (1000d178 <at_ble_init+0x154>)
1000d04c:	4798      	blx	r3
1000d04e:	4b4b      	ldr	r3, [pc, #300]	; (1000d17c <at_ble_init+0x158>)
1000d050:	4798      	blx	r3
1000d052:	4b4b      	ldr	r3, [pc, #300]	; (1000d180 <at_ble_init+0x15c>)
1000d054:	4798      	blx	r3
1000d056:	4b4b      	ldr	r3, [pc, #300]	; (1000d184 <at_ble_init+0x160>)
1000d058:	4798      	blx	r3
1000d05a:	2c00      	cmp	r4, #0
1000d05c:	d009      	beq.n	1000d072 <at_ble_init+0x4e>
1000d05e:	6820      	ldr	r0, [r4, #0]
1000d060:	2800      	cmp	r0, #0
1000d062:	d006      	beq.n	1000d072 <at_ble_init+0x4e>
1000d064:	6861      	ldr	r1, [r4, #4]
1000d066:	2900      	cmp	r1, #0
1000d068:	d101      	bne.n	1000d06e <at_ble_init+0x4a>
1000d06a:	26e2      	movs	r6, #226	; 0xe2
1000d06c:	e075      	b.n	1000d15a <at_ble_init+0x136>
1000d06e:	4b46      	ldr	r3, [pc, #280]	; (1000d188 <at_ble_init+0x164>)
1000d070:	4798      	blx	r3
1000d072:	4b46      	ldr	r3, [pc, #280]	; (1000d18c <at_ble_init+0x168>)
1000d074:	4798      	blx	r3
1000d076:	2801      	cmp	r0, #1
1000d078:	d8f7      	bhi.n	1000d06a <at_ble_init+0x46>
1000d07a:	4845      	ldr	r0, [pc, #276]	; (1000d190 <at_ble_init+0x16c>)
1000d07c:	4b45      	ldr	r3, [pc, #276]	; (1000d194 <at_ble_init+0x170>)
1000d07e:	4798      	blx	r3
1000d080:	2800      	cmp	r0, #0
1000d082:	d1f2      	bne.n	1000d06a <at_ble_init+0x46>
1000d084:	4b44      	ldr	r3, [pc, #272]	; (1000d198 <at_ble_init+0x174>)
1000d086:	4798      	blx	r3
1000d088:	4b44      	ldr	r3, [pc, #272]	; (1000d19c <at_ble_init+0x178>)
1000d08a:	4798      	blx	r3
1000d08c:	466b      	mov	r3, sp
1000d08e:	2201      	movs	r2, #1
1000d090:	1cdc      	adds	r4, r3, #3
1000d092:	1c20      	adds	r0, r4, #0
1000d094:	a901      	add	r1, sp, #4
1000d096:	4252      	negs	r2, r2
1000d098:	4b41      	ldr	r3, [pc, #260]	; (1000d1a0 <at_ble_init+0x17c>)
1000d09a:	4798      	blx	r3
1000d09c:	2800      	cmp	r0, #0
1000d09e:	d102      	bne.n	1000d0a6 <at_ble_init+0x82>
1000d0a0:	7823      	ldrb	r3, [r4, #0]
1000d0a2:	2b39      	cmp	r3, #57	; 0x39
1000d0a4:	d1f2      	bne.n	1000d08c <at_ble_init+0x68>
1000d0a6:	4b3f      	ldr	r3, [pc, #252]	; (1000d1a4 <at_ble_init+0x180>)
1000d0a8:	4798      	blx	r3
1000d0aa:	1e06      	subs	r6, r0, #0
1000d0ac:	d155      	bne.n	1000d15a <at_ble_init+0x136>
1000d0ae:	1c03      	adds	r3, r0, #0
1000d0b0:	2101      	movs	r1, #1
1000d0b2:	4a3d      	ldr	r2, [pc, #244]	; (1000d1a8 <at_ble_init+0x184>)
1000d0b4:	4249      	negs	r1, r1
1000d0b6:	189a      	adds	r2, r3, r2
1000d0b8:	3312      	adds	r3, #18
1000d0ba:	8151      	strh	r1, [r2, #10]
1000d0bc:	2b90      	cmp	r3, #144	; 0x90
1000d0be:	d1f7      	bne.n	1000d0b0 <at_ble_init+0x8c>
1000d0c0:	4c3a      	ldr	r4, [pc, #232]	; (1000d1ac <at_ble_init+0x188>)
1000d0c2:	3b81      	subs	r3, #129	; 0x81
1000d0c4:	7023      	strb	r3, [r4, #0]
1000d0c6:	4b3a      	ldr	r3, [pc, #232]	; (1000d1b0 <at_ble_init+0x18c>)
1000d0c8:	4a3a      	ldr	r2, [pc, #232]	; (1000d1b4 <at_ble_init+0x190>)
1000d0ca:	8063      	strh	r3, [r4, #2]
1000d0cc:	2300      	movs	r3, #0
1000d0ce:	7123      	strb	r3, [r4, #4]
1000d0d0:	3301      	adds	r3, #1
1000d0d2:	1e58      	subs	r0, r3, #1
1000d0d4:	0119      	lsls	r1, r3, #4
1000d0d6:	4301      	orrs	r1, r0
1000d0d8:	3302      	adds	r3, #2
1000d0da:	7011      	strb	r1, [r2, #0]
1000d0dc:	3201      	adds	r2, #1
1000d0de:	2b21      	cmp	r3, #33	; 0x21
1000d0e0:	d1f7      	bne.n	1000d0d2 <at_ble_init+0xae>
1000d0e2:	33e0      	adds	r3, #224	; 0xe0
1000d0e4:	33ff      	adds	r3, #255	; 0xff
1000d0e6:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d0e8:	1c23      	adds	r3, r4, #0
1000d0ea:	2500      	movs	r5, #0
1000d0ec:	3373      	adds	r3, #115	; 0x73
1000d0ee:	701d      	strb	r5, [r3, #0]
1000d0f0:	1c23      	adds	r3, r4, #0
1000d0f2:	3372      	adds	r3, #114	; 0x72
1000d0f4:	701d      	strb	r5, [r3, #0]
1000d0f6:	1c23      	adds	r3, r4, #0
1000d0f8:	3376      	adds	r3, #118	; 0x76
1000d0fa:	701d      	strb	r5, [r3, #0]
1000d0fc:	1c23      	adds	r3, r4, #0
1000d0fe:	33cc      	adds	r3, #204	; 0xcc
1000d100:	801d      	strh	r5, [r3, #0]
1000d102:	1c22      	adds	r2, r4, #0
1000d104:	23a0      	movs	r3, #160	; 0xa0
1000d106:	32d0      	adds	r2, #208	; 0xd0
1000d108:	005b      	lsls	r3, r3, #1
1000d10a:	8013      	strh	r3, [r2, #0]
1000d10c:	1c22      	adds	r2, r4, #0
1000d10e:	32ce      	adds	r2, #206	; 0xce
1000d110:	8013      	strh	r3, [r2, #0]
1000d112:	1c23      	adds	r3, r4, #0
1000d114:	33d2      	adds	r3, #210	; 0xd2
1000d116:	801d      	strh	r5, [r3, #0]
1000d118:	22fa      	movs	r2, #250	; 0xfa
1000d11a:	1c23      	adds	r3, r4, #0
1000d11c:	0052      	lsls	r2, r2, #1
1000d11e:	33d4      	adds	r3, #212	; 0xd4
1000d120:	801a      	strh	r2, [r3, #0]
1000d122:	1c23      	adds	r3, r4, #0
1000d124:	33d6      	adds	r3, #214	; 0xd6
1000d126:	701d      	strb	r5, [r3, #0]
1000d128:	1c20      	adds	r0, r4, #0
1000d12a:	4b23      	ldr	r3, [pc, #140]	; (1000d1b8 <at_ble_init+0x194>)
1000d12c:	76e5      	strb	r5, [r4, #27]
1000d12e:	7725      	strb	r5, [r4, #28]
1000d130:	7765      	strb	r5, [r4, #29]
1000d132:	77a5      	strb	r5, [r4, #30]
1000d134:	77e5      	strb	r5, [r4, #31]
1000d136:	8425      	strh	r5, [r4, #32]
1000d138:	8465      	strh	r5, [r4, #34]	; 0x22
1000d13a:	4798      	blx	r3
1000d13c:	1c23      	adds	r3, r4, #0
1000d13e:	2207      	movs	r2, #7
1000d140:	3374      	adds	r3, #116	; 0x74
1000d142:	701a      	strb	r2, [r3, #0]
1000d144:	1c23      	adds	r3, r4, #0
1000d146:	3204      	adds	r2, #4
1000d148:	33aa      	adds	r3, #170	; 0xaa
1000d14a:	801a      	strh	r2, [r3, #0]
1000d14c:	1c2b      	adds	r3, r5, #0
1000d14e:	5d7a      	ldrb	r2, [r7, r5]
1000d150:	33ac      	adds	r3, #172	; 0xac
1000d152:	3501      	adds	r5, #1
1000d154:	54e2      	strb	r2, [r4, r3]
1000d156:	2d0b      	cmp	r5, #11
1000d158:	d1f8      	bne.n	1000d14c <at_ble_init+0x128>
1000d15a:	1c30      	adds	r0, r6, #0
1000d15c:	b007      	add	sp, #28
1000d15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d160:	10012da0 	.word	0x10012da0
1000d164:	1001025f 	.word	0x1001025f
1000d168:	10013ee4 	.word	0x10013ee4
1000d16c:	100131d0 	.word	0x100131d0
1000d170:	10013138 	.word	0x10013138
1000d174:	10012eb9 	.word	0x10012eb9
1000d178:	1000efd9 	.word	0x1000efd9
1000d17c:	1000d371 	.word	0x1000d371
1000d180:	1000d415 	.word	0x1000d415
1000d184:	1000d62d 	.word	0x1000d62d
1000d188:	1000d449 	.word	0x1000d449
1000d18c:	1000b4f9 	.word	0x1000b4f9
1000d190:	1000d8ed 	.word	0x1000d8ed
1000d194:	1000b6f9 	.word	0x1000b6f9
1000d198:	1000d985 	.word	0x1000d985
1000d19c:	1000c7bd 	.word	0x1000c7bd
1000d1a0:	1000c87d 	.word	0x1000c87d
1000d1a4:	1000e505 	.word	0x1000e505
1000d1a8:	10013ee6 	.word	0x10013ee6
1000d1ac:	10013f76 	.word	0x10013f76
1000d1b0:	00003a98 	.word	0x00003a98
1000d1b4:	10013f81 	.word	0x10013f81
1000d1b8:	1000cf95 	.word	0x1000cf95

1000d1bc <at_ble_addr_set>:
1000d1bc:	b538      	push	{r3, r4, r5, lr}
1000d1be:	1c45      	adds	r5, r0, #1
1000d1c0:	1c03      	adds	r3, r0, #0
1000d1c2:	20cf      	movs	r0, #207	; 0xcf
1000d1c4:	2d00      	cmp	r5, #0
1000d1c6:	d018      	beq.n	1000d1fa <at_ble_addr_set+0x3e>
1000d1c8:	781a      	ldrb	r2, [r3, #0]
1000d1ca:	2a03      	cmp	r2, #3
1000d1cc:	d815      	bhi.n	1000d1fa <at_ble_addr_set+0x3e>
1000d1ce:	2a01      	cmp	r2, #1
1000d1d0:	d102      	bne.n	1000d1d8 <at_ble_addr_set+0x1c>
1000d1d2:	785a      	ldrb	r2, [r3, #1]
1000d1d4:	2a00      	cmp	r2, #0
1000d1d6:	d010      	beq.n	1000d1fa <at_ble_addr_set+0x3e>
1000d1d8:	1c1c      	adds	r4, r3, #0
1000d1da:	1c29      	adds	r1, r5, #0
1000d1dc:	2206      	movs	r2, #6
1000d1de:	4b07      	ldr	r3, [pc, #28]	; (1000d1fc <at_ble_addr_set+0x40>)
1000d1e0:	4807      	ldr	r0, [pc, #28]	; (1000d200 <at_ble_addr_set+0x44>)
1000d1e2:	4798      	blx	r3
1000d1e4:	7823      	ldrb	r3, [r4, #0]
1000d1e6:	4807      	ldr	r0, [pc, #28]	; (1000d204 <at_ble_addr_set+0x48>)
1000d1e8:	7103      	strb	r3, [r0, #4]
1000d1ea:	4b07      	ldr	r3, [pc, #28]	; (1000d208 <at_ble_addr_set+0x4c>)
1000d1ec:	4798      	blx	r3
1000d1ee:	7823      	ldrb	r3, [r4, #0]
1000d1f0:	2b00      	cmp	r3, #0
1000d1f2:	d102      	bne.n	1000d1fa <at_ble_addr_set+0x3e>
1000d1f4:	1c28      	adds	r0, r5, #0
1000d1f6:	4b05      	ldr	r3, [pc, #20]	; (1000d20c <at_ble_addr_set+0x50>)
1000d1f8:	4798      	blx	r3
1000d1fa:	bd38      	pop	{r3, r4, r5, pc}
1000d1fc:	1001025f 	.word	0x1001025f
1000d200:	10013f7b 	.word	0x10013f7b
1000d204:	10013f76 	.word	0x10013f76
1000d208:	1000cf95 	.word	0x1000cf95
1000d20c:	1000da01 	.word	0x1000da01

1000d210 <at_ble_scan_stop>:
1000d210:	b510      	push	{r4, lr}
1000d212:	4b05      	ldr	r3, [pc, #20]	; (1000d228 <at_ble_scan_stop+0x18>)
1000d214:	4798      	blx	r3
1000d216:	1e04      	subs	r4, r0, #0
1000d218:	d103      	bne.n	1000d222 <at_ble_scan_stop+0x12>
1000d21a:	20d1      	movs	r0, #209	; 0xd1
1000d21c:	4b03      	ldr	r3, [pc, #12]	; (1000d22c <at_ble_scan_stop+0x1c>)
1000d21e:	0100      	lsls	r0, r0, #4
1000d220:	4798      	blx	r3
1000d222:	1c20      	adds	r0, r4, #0
1000d224:	bd10      	pop	{r4, pc}
1000d226:	46c0      	nop			; (mov r8, r8)
1000d228:	1000e75d 	.word	0x1000e75d
1000d22c:	1000cea5 	.word	0x1000cea5

1000d230 <at_ble_connect>:
1000d230:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d232:	b091      	sub	sp, #68	; 0x44
1000d234:	930d      	str	r3, [sp, #52]	; 0x34
1000d236:	4b2d      	ldr	r3, [pc, #180]	; (1000d2ec <at_ble_connect+0xbc>)
1000d238:	900a      	str	r0, [sp, #40]	; 0x28
1000d23a:	910b      	str	r1, [sp, #44]	; 0x2c
1000d23c:	920c      	str	r2, [sp, #48]	; 0x30
1000d23e:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000d240:	4798      	blx	r3
1000d242:	254b      	movs	r5, #75	; 0x4b
1000d244:	2807      	cmp	r0, #7
1000d246:	d84d      	bhi.n	1000d2e4 <at_ble_connect+0xb4>
1000d248:	8863      	ldrh	r3, [r4, #2]
1000d24a:	4a29      	ldr	r2, [pc, #164]	; (1000d2f0 <at_ble_connect+0xc0>)
1000d24c:	3b06      	subs	r3, #6
1000d24e:	b29b      	uxth	r3, r3
1000d250:	3584      	adds	r5, #132	; 0x84
1000d252:	4293      	cmp	r3, r2
1000d254:	d846      	bhi.n	1000d2e4 <at_ble_connect+0xb4>
1000d256:	8823      	ldrh	r3, [r4, #0]
1000d258:	3b06      	subs	r3, #6
1000d25a:	b29b      	uxth	r3, r3
1000d25c:	4293      	cmp	r3, r2
1000d25e:	d841      	bhi.n	1000d2e4 <at_ble_connect+0xb4>
1000d260:	88e3      	ldrh	r3, [r4, #6]
1000d262:	4a24      	ldr	r2, [pc, #144]	; (1000d2f4 <at_ble_connect+0xc4>)
1000d264:	3b0a      	subs	r3, #10
1000d266:	b29b      	uxth	r3, r3
1000d268:	4293      	cmp	r3, r2
1000d26a:	d83b      	bhi.n	1000d2e4 <at_ble_connect+0xb4>
1000d26c:	23f4      	movs	r3, #244	; 0xf4
1000d26e:	88a2      	ldrh	r2, [r4, #4]
1000d270:	33ff      	adds	r3, #255	; 0xff
1000d272:	429a      	cmp	r2, r3
1000d274:	d836      	bhi.n	1000d2e4 <at_ble_connect+0xb4>
1000d276:	af0e      	add	r7, sp, #56	; 0x38
1000d278:	4b1f      	ldr	r3, [pc, #124]	; (1000d2f8 <at_ble_connect+0xc8>)
1000d27a:	2001      	movs	r0, #1
1000d27c:	1c39      	adds	r1, r7, #0
1000d27e:	4798      	blx	r3
1000d280:	4e1e      	ldr	r6, [pc, #120]	; (1000d2fc <at_ble_connect+0xcc>)
1000d282:	1c05      	adds	r5, r0, #0
1000d284:	7933      	ldrb	r3, [r6, #4]
1000d286:	703b      	strb	r3, [r7, #0]
1000d288:	2800      	cmp	r0, #0
1000d28a:	d12a      	bne.n	1000d2e2 <at_ble_connect+0xb2>
1000d28c:	4b1c      	ldr	r3, [pc, #112]	; (1000d300 <at_ble_connect+0xd0>)
1000d28e:	4798      	blx	r3
1000d290:	3675      	adds	r6, #117	; 0x75
1000d292:	7833      	ldrb	r3, [r6, #0]
1000d294:	1c01      	adds	r1, r0, #0
1000d296:	3b01      	subs	r3, #1
1000d298:	2b01      	cmp	r3, #1
1000d29a:	d901      	bls.n	1000d2a0 <at_ble_connect+0x70>
1000d29c:	2302      	movs	r3, #2
1000d29e:	7033      	strb	r3, [r6, #0]
1000d2a0:	4b16      	ldr	r3, [pc, #88]	; (1000d2fc <at_ble_connect+0xcc>)
1000d2a2:	1c1a      	adds	r2, r3, #0
1000d2a4:	3275      	adds	r2, #117	; 0x75
1000d2a6:	7810      	ldrb	r0, [r2, #0]
1000d2a8:	885a      	ldrh	r2, [r3, #2]
1000d2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000d2ac:	3012      	adds	r0, #18
1000d2ae:	9300      	str	r3, [sp, #0]
1000d2b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d2b2:	b2c0      	uxtb	r0, r0
1000d2b4:	9301      	str	r3, [sp, #4]
1000d2b6:	8823      	ldrh	r3, [r4, #0]
1000d2b8:	9302      	str	r3, [sp, #8]
1000d2ba:	8863      	ldrh	r3, [r4, #2]
1000d2bc:	9303      	str	r3, [sp, #12]
1000d2be:	88a3      	ldrh	r3, [r4, #4]
1000d2c0:	9304      	str	r3, [sp, #16]
1000d2c2:	88e3      	ldrh	r3, [r4, #6]
1000d2c4:	9305      	str	r3, [sp, #20]
1000d2c6:	8923      	ldrh	r3, [r4, #8]
1000d2c8:	9306      	str	r3, [sp, #24]
1000d2ca:	8963      	ldrh	r3, [r4, #10]
1000d2cc:	ac04      	add	r4, sp, #16
1000d2ce:	9307      	str	r3, [sp, #28]
1000d2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000d2d2:	9308      	str	r3, [sp, #32]
1000d2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d2d6:	9309      	str	r3, [sp, #36]	; 0x24
1000d2d8:	2329      	movs	r3, #41	; 0x29
1000d2da:	191b      	adds	r3, r3, r4
1000d2dc:	4c09      	ldr	r4, [pc, #36]	; (1000d304 <at_ble_connect+0xd4>)
1000d2de:	47a0      	blx	r4
1000d2e0:	e000      	b.n	1000d2e4 <at_ble_connect+0xb4>
1000d2e2:	25e2      	movs	r5, #226	; 0xe2
1000d2e4:	1c28      	adds	r0, r5, #0
1000d2e6:	b011      	add	sp, #68	; 0x44
1000d2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2ea:	46c0      	nop			; (mov r8, r8)
1000d2ec:	1000db79 	.word	0x1000db79
1000d2f0:	00000c7a 	.word	0x00000c7a
1000d2f4:	00000c76 	.word	0x00000c76
1000d2f8:	1000e67d 	.word	0x1000e67d
1000d2fc:	10013f76 	.word	0x10013f76
1000d300:	1000e931 	.word	0x1000e931
1000d304:	1000e9d1 	.word	0x1000e9d1

1000d308 <at_ble_disconnect>:
1000d308:	b538      	push	{r3, r4, r5, lr}
1000d30a:	1c04      	adds	r4, r0, #0
1000d30c:	4b04      	ldr	r3, [pc, #16]	; (1000d320 <at_ble_disconnect+0x18>)
1000d30e:	1c08      	adds	r0, r1, #0
1000d310:	1c21      	adds	r1, r4, #0
1000d312:	4798      	blx	r3
1000d314:	1c05      	adds	r5, r0, #0
1000d316:	4b03      	ldr	r3, [pc, #12]	; (1000d324 <at_ble_disconnect+0x1c>)
1000d318:	1c20      	adds	r0, r4, #0
1000d31a:	4798      	blx	r3
1000d31c:	1c28      	adds	r0, r5, #0
1000d31e:	bd38      	pop	{r3, r4, r5, pc}
1000d320:	1000de15 	.word	0x1000de15
1000d324:	1000cee9 	.word	0x1000cee9

1000d328 <at_ble_conn_update_reply>:
1000d328:	b510      	push	{r4, lr}
1000d32a:	4c01      	ldr	r4, [pc, #4]	; (1000d330 <at_ble_conn_update_reply+0x8>)
1000d32c:	47a0      	blx	r4
1000d32e:	bd10      	pop	{r4, pc}
1000d330:	1000e2c5 	.word	0x1000e2c5

1000d334 <at_ble_random_address_resolve>:
1000d334:	b510      	push	{r4, lr}
1000d336:	23cf      	movs	r3, #207	; 0xcf
1000d338:	2800      	cmp	r0, #0
1000d33a:	d00a      	beq.n	1000d352 <at_ble_random_address_resolve+0x1e>
1000d33c:	2900      	cmp	r1, #0
1000d33e:	d008      	beq.n	1000d352 <at_ble_random_address_resolve+0x1e>
1000d340:	2a00      	cmp	r2, #0
1000d342:	d006      	beq.n	1000d352 <at_ble_random_address_resolve+0x1e>
1000d344:	780c      	ldrb	r4, [r1, #0]
1000d346:	2c02      	cmp	r4, #2
1000d348:	d103      	bne.n	1000d352 <at_ble_random_address_resolve+0x1e>
1000d34a:	4b03      	ldr	r3, [pc, #12]	; (1000d358 <at_ble_random_address_resolve+0x24>)
1000d34c:	3101      	adds	r1, #1
1000d34e:	4798      	blx	r3
1000d350:	2300      	movs	r3, #0
1000d352:	1c18      	adds	r0, r3, #0
1000d354:	bd10      	pop	{r4, pc}
1000d356:	46c0      	nop			; (mov r8, r8)
1000d358:	1000eaed 	.word	0x1000eaed

1000d35c <at_ble_uuid_len2type>:
1000d35c:	1e83      	subs	r3, r0, #2
1000d35e:	b2db      	uxtb	r3, r3
1000d360:	2003      	movs	r0, #3
1000d362:	2b0e      	cmp	r3, #14
1000d364:	d801      	bhi.n	1000d36a <at_ble_uuid_len2type+0xe>
1000d366:	4a01      	ldr	r2, [pc, #4]	; (1000d36c <at_ble_uuid_len2type+0x10>)
1000d368:	5cd0      	ldrb	r0, [r2, r3]
1000d36a:	4770      	bx	lr
1000d36c:	10012dab 	.word	0x10012dab

1000d370 <init_gatt_client_module>:
1000d370:	2200      	movs	r2, #0
1000d372:	4b01      	ldr	r3, [pc, #4]	; (1000d378 <init_gatt_client_module+0x8>)
1000d374:	801a      	strh	r2, [r3, #0]
1000d376:	4770      	bx	lr
1000d378:	10013130 	.word	0x10013130

1000d37c <at_ble_primary_service_discover_all>:
1000d37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d37e:	24cf      	movs	r4, #207	; 0xcf
1000d380:	2900      	cmp	r1, #0
1000d382:	d00a      	beq.n	1000d39a <at_ble_primary_service_discover_all+0x1e>
1000d384:	428a      	cmp	r2, r1
1000d386:	d308      	bcc.n	1000d39a <at_ble_primary_service_discover_all+0x1e>
1000d388:	2400      	movs	r4, #0
1000d38a:	1c13      	adds	r3, r2, #0
1000d38c:	9001      	str	r0, [sp, #4]
1000d38e:	1c0a      	adds	r2, r1, #0
1000d390:	9400      	str	r4, [sp, #0]
1000d392:	2002      	movs	r0, #2
1000d394:	1c21      	adds	r1, r4, #0
1000d396:	4d02      	ldr	r5, [pc, #8]	; (1000d3a0 <at_ble_primary_service_discover_all+0x24>)
1000d398:	47a8      	blx	r5
1000d39a:	1c20      	adds	r0, r4, #0
1000d39c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d39e:	46c0      	nop			; (mov r8, r8)
1000d3a0:	1000ece1 	.word	0x1000ece1

1000d3a4 <db_searchATT>:
1000d3a4:	b570      	push	{r4, r5, r6, lr}
1000d3a6:	1c05      	adds	r5, r0, #0
1000d3a8:	2400      	movs	r4, #0
1000d3aa:	4b0c      	ldr	r3, [pc, #48]	; (1000d3dc <db_searchATT+0x38>)
1000d3ac:	6819      	ldr	r1, [r3, #0]
1000d3ae:	4b0c      	ldr	r3, [pc, #48]	; (1000d3e0 <db_searchATT+0x3c>)
1000d3b0:	681e      	ldr	r6, [r3, #0]
1000d3b2:	428c      	cmp	r4, r1
1000d3b4:	dc10      	bgt.n	1000d3d8 <db_searchATT+0x34>
1000d3b6:	200c      	movs	r0, #12
1000d3b8:	1863      	adds	r3, r4, r1
1000d3ba:	0fda      	lsrs	r2, r3, #31
1000d3bc:	18d3      	adds	r3, r2, r3
1000d3be:	1c02      	adds	r2, r0, #0
1000d3c0:	105b      	asrs	r3, r3, #1
1000d3c2:	435a      	muls	r2, r3
1000d3c4:	18b0      	adds	r0, r6, r2
1000d3c6:	8802      	ldrh	r2, [r0, #0]
1000d3c8:	42aa      	cmp	r2, r5
1000d3ca:	d201      	bcs.n	1000d3d0 <db_searchATT+0x2c>
1000d3cc:	1e59      	subs	r1, r3, #1
1000d3ce:	e7f0      	b.n	1000d3b2 <db_searchATT+0xe>
1000d3d0:	42aa      	cmp	r2, r5
1000d3d2:	d902      	bls.n	1000d3da <db_searchATT+0x36>
1000d3d4:	1c5c      	adds	r4, r3, #1
1000d3d6:	e7ec      	b.n	1000d3b2 <db_searchATT+0xe>
1000d3d8:	2000      	movs	r0, #0
1000d3da:	bd70      	pop	{r4, r5, r6, pc}
1000d3dc:	10013144 	.word	0x10013144
1000d3e0:	1001313c 	.word	0x1001313c

1000d3e4 <at_ble_read_authorize_reply.part.2>:
1000d3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d3e6:	4b09      	ldr	r3, [pc, #36]	; (1000d40c <at_ble_read_authorize_reply.part.2+0x28>)
1000d3e8:	1c05      	adds	r5, r0, #0
1000d3ea:	1c08      	adds	r0, r1, #0
1000d3ec:	1c0c      	adds	r4, r1, #0
1000d3ee:	4798      	blx	r3
1000d3f0:	2800      	cmp	r0, #0
1000d3f2:	d009      	beq.n	1000d408 <at_ble_read_authorize_reply.part.2+0x24>
1000d3f4:	6882      	ldr	r2, [r0, #8]
1000d3f6:	2a00      	cmp	r2, #0
1000d3f8:	d006      	beq.n	1000d408 <at_ble_read_authorize_reply.part.2+0x24>
1000d3fa:	8883      	ldrh	r3, [r0, #4]
1000d3fc:	1c29      	adds	r1, r5, #0
1000d3fe:	9200      	str	r2, [sp, #0]
1000d400:	1c20      	adds	r0, r4, #0
1000d402:	2200      	movs	r2, #0
1000d404:	4c02      	ldr	r4, [pc, #8]	; (1000d410 <at_ble_read_authorize_reply.part.2+0x2c>)
1000d406:	47a0      	blx	r4
1000d408:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d40a:	46c0      	nop			; (mov r8, r8)
1000d40c:	1000d3a5 	.word	0x1000d3a5
1000d410:	1000ebe9 	.word	0x1000ebe9

1000d414 <initi_gatt_server_module>:
1000d414:	2300      	movs	r3, #0
1000d416:	4a06      	ldr	r2, [pc, #24]	; (1000d430 <initi_gatt_server_module+0x1c>)
1000d418:	7013      	strb	r3, [r2, #0]
1000d41a:	4a06      	ldr	r2, [pc, #24]	; (1000d434 <initi_gatt_server_module+0x20>)
1000d41c:	6013      	str	r3, [r2, #0]
1000d41e:	4a06      	ldr	r2, [pc, #24]	; (1000d438 <initi_gatt_server_module+0x24>)
1000d420:	6013      	str	r3, [r2, #0]
1000d422:	4a06      	ldr	r2, [pc, #24]	; (1000d43c <initi_gatt_server_module+0x28>)
1000d424:	6013      	str	r3, [r2, #0]
1000d426:	4a06      	ldr	r2, [pc, #24]	; (1000d440 <initi_gatt_server_module+0x2c>)
1000d428:	6013      	str	r3, [r2, #0]
1000d42a:	4a06      	ldr	r2, [pc, #24]	; (1000d444 <initi_gatt_server_module+0x30>)
1000d42c:	6013      	str	r3, [r2, #0]
1000d42e:	4770      	bx	lr
1000d430:	10013138 	.word	0x10013138
1000d434:	10013148 	.word	0x10013148
1000d438:	10013144 	.word	0x10013144
1000d43c:	10013134 	.word	0x10013134
1000d440:	10013140 	.word	0x10013140
1000d444:	1001313c 	.word	0x1001313c

1000d448 <db_init>:
1000d448:	4b0a      	ldr	r3, [pc, #40]	; (1000d474 <db_init+0x2c>)
1000d44a:	4a0b      	ldr	r2, [pc, #44]	; (1000d478 <db_init+0x30>)
1000d44c:	6018      	str	r0, [r3, #0]
1000d44e:	084b      	lsrs	r3, r1, #1
1000d450:	6013      	str	r3, [r2, #0]
1000d452:	4a0a      	ldr	r2, [pc, #40]	; (1000d47c <db_init+0x34>)
1000d454:	18c3      	adds	r3, r0, r3
1000d456:	6013      	str	r3, [r2, #0]
1000d458:	4a09      	ldr	r2, [pc, #36]	; (1000d480 <db_init+0x38>)
1000d45a:	1841      	adds	r1, r0, r1
1000d45c:	6013      	str	r3, [r2, #0]
1000d45e:	2303      	movs	r3, #3
1000d460:	2200      	movs	r2, #0
1000d462:	3103      	adds	r1, #3
1000d464:	4399      	bics	r1, r3
1000d466:	4b07      	ldr	r3, [pc, #28]	; (1000d484 <db_init+0x3c>)
1000d468:	3904      	subs	r1, #4
1000d46a:	6019      	str	r1, [r3, #0]
1000d46c:	4b06      	ldr	r3, [pc, #24]	; (1000d488 <db_init+0x40>)
1000d46e:	601a      	str	r2, [r3, #0]
1000d470:	4770      	bx	lr
1000d472:	46c0      	nop			; (mov r8, r8)
1000d474:	1001314c 	.word	0x1001314c
1000d478:	10013148 	.word	0x10013148
1000d47c:	10013134 	.word	0x10013134
1000d480:	10013140 	.word	0x10013140
1000d484:	1001313c 	.word	0x1001313c
1000d488:	10013144 	.word	0x10013144

1000d48c <at_ble_characteristic_value_set>:
1000d48c:	b570      	push	{r4, r5, r6, lr}
1000d48e:	4b0b      	ldr	r3, [pc, #44]	; (1000d4bc <at_ble_characteristic_value_set+0x30>)
1000d490:	1c06      	adds	r6, r0, #0
1000d492:	1c0c      	adds	r4, r1, #0
1000d494:	1c15      	adds	r5, r2, #0
1000d496:	4798      	blx	r3
1000d498:	2800      	cmp	r0, #0
1000d49a:	d008      	beq.n	1000d4ae <at_ble_characteristic_value_set+0x22>
1000d49c:	6880      	ldr	r0, [r0, #8]
1000d49e:	2800      	cmp	r0, #0
1000d4a0:	d005      	beq.n	1000d4ae <at_ble_characteristic_value_set+0x22>
1000d4a2:	1c21      	adds	r1, r4, #0
1000d4a4:	1c2a      	adds	r2, r5, #0
1000d4a6:	4b06      	ldr	r3, [pc, #24]	; (1000d4c0 <at_ble_characteristic_value_set+0x34>)
1000d4a8:	4798      	blx	r3
1000d4aa:	2000      	movs	r0, #0
1000d4ac:	e004      	b.n	1000d4b8 <at_ble_characteristic_value_set+0x2c>
1000d4ae:	1c30      	adds	r0, r6, #0
1000d4b0:	1c29      	adds	r1, r5, #0
1000d4b2:	1c22      	adds	r2, r4, #0
1000d4b4:	4b03      	ldr	r3, [pc, #12]	; (1000d4c4 <at_ble_characteristic_value_set+0x38>)
1000d4b6:	4798      	blx	r3
1000d4b8:	bd70      	pop	{r4, r5, r6, pc}
1000d4ba:	46c0      	nop			; (mov r8, r8)
1000d4bc:	1000d3a5 	.word	0x1000d3a5
1000d4c0:	1001025f 	.word	0x1001025f
1000d4c4:	1000efed 	.word	0x1000efed

1000d4c8 <at_ble_characteristic_value_get>:
1000d4c8:	b570      	push	{r4, r5, r6, lr}
1000d4ca:	4b0c      	ldr	r3, [pc, #48]	; (1000d4fc <at_ble_characteristic_value_get+0x34>)
1000d4cc:	1c06      	adds	r6, r0, #0
1000d4ce:	1c0c      	adds	r4, r1, #0
1000d4d0:	1c15      	adds	r5, r2, #0
1000d4d2:	4798      	blx	r3
1000d4d4:	2800      	cmp	r0, #0
1000d4d6:	d00b      	beq.n	1000d4f0 <at_ble_characteristic_value_get+0x28>
1000d4d8:	6883      	ldr	r3, [r0, #8]
1000d4da:	2b00      	cmp	r3, #0
1000d4dc:	d008      	beq.n	1000d4f0 <at_ble_characteristic_value_get+0x28>
1000d4de:	8883      	ldrh	r3, [r0, #4]
1000d4e0:	802b      	strh	r3, [r5, #0]
1000d4e2:	8882      	ldrh	r2, [r0, #4]
1000d4e4:	6881      	ldr	r1, [r0, #8]
1000d4e6:	4b06      	ldr	r3, [pc, #24]	; (1000d500 <at_ble_characteristic_value_get+0x38>)
1000d4e8:	1c20      	adds	r0, r4, #0
1000d4ea:	4798      	blx	r3
1000d4ec:	2000      	movs	r0, #0
1000d4ee:	e004      	b.n	1000d4fa <at_ble_characteristic_value_get+0x32>
1000d4f0:	1c30      	adds	r0, r6, #0
1000d4f2:	1c29      	adds	r1, r5, #0
1000d4f4:	1c22      	adds	r2, r4, #0
1000d4f6:	4b03      	ldr	r3, [pc, #12]	; (1000d504 <at_ble_characteristic_value_get+0x3c>)
1000d4f8:	4798      	blx	r3
1000d4fa:	bd70      	pop	{r4, r5, r6, pc}
1000d4fc:	1000d3a5 	.word	0x1000d3a5
1000d500:	1001025f 	.word	0x1001025f
1000d504:	1000f079 	.word	0x1000f079

1000d508 <at_ble_write_authorize_reply>:
1000d508:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d50a:	b085      	sub	sp, #20
1000d50c:	1c04      	adds	r4, r0, #0
1000d50e:	9101      	str	r1, [sp, #4]
1000d510:	2900      	cmp	r1, #0
1000d512:	d128      	bne.n	1000d566 <at_ble_write_authorize_reply+0x5e>
1000d514:	8843      	ldrh	r3, [r0, #2]
1000d516:	1c27      	adds	r7, r4, #0
1000d518:	9300      	str	r3, [sp, #0]
1000d51a:	1c18      	adds	r0, r3, #0
1000d51c:	4b16      	ldr	r3, [pc, #88]	; (1000d578 <at_ble_write_authorize_reply+0x70>)
1000d51e:	4798      	blx	r3
1000d520:	3708      	adds	r7, #8
1000d522:	2800      	cmp	r0, #0
1000d524:	d009      	beq.n	1000d53a <at_ble_write_authorize_reply+0x32>
1000d526:	6880      	ldr	r0, [r0, #8]
1000d528:	2800      	cmp	r0, #0
1000d52a:	d006      	beq.n	1000d53a <at_ble_write_authorize_reply+0x32>
1000d52c:	88a3      	ldrh	r3, [r4, #4]
1000d52e:	88e2      	ldrh	r2, [r4, #6]
1000d530:	18c0      	adds	r0, r0, r3
1000d532:	1c39      	adds	r1, r7, #0
1000d534:	4b11      	ldr	r3, [pc, #68]	; (1000d57c <at_ble_write_authorize_reply+0x74>)
1000d536:	4798      	blx	r3
1000d538:	e015      	b.n	1000d566 <at_ble_write_authorize_reply+0x5e>
1000d53a:	ab02      	add	r3, sp, #8
1000d53c:	1d9e      	adds	r6, r3, #6
1000d53e:	2300      	movs	r3, #0
1000d540:	4d0f      	ldr	r5, [pc, #60]	; (1000d580 <at_ble_write_authorize_reply+0x78>)
1000d542:	8033      	strh	r3, [r6, #0]
1000d544:	6829      	ldr	r1, [r5, #0]
1000d546:	1c32      	adds	r2, r6, #0
1000d548:	4b0e      	ldr	r3, [pc, #56]	; (1000d584 <at_ble_write_authorize_reply+0x7c>)
1000d54a:	9800      	ldr	r0, [sp, #0]
1000d54c:	4798      	blx	r3
1000d54e:	682b      	ldr	r3, [r5, #0]
1000d550:	88a0      	ldrh	r0, [r4, #4]
1000d552:	88e2      	ldrh	r2, [r4, #6]
1000d554:	1818      	adds	r0, r3, r0
1000d556:	1c39      	adds	r1, r7, #0
1000d558:	4b08      	ldr	r3, [pc, #32]	; (1000d57c <at_ble_write_authorize_reply+0x74>)
1000d55a:	4798      	blx	r3
1000d55c:	8860      	ldrh	r0, [r4, #2]
1000d55e:	8832      	ldrh	r2, [r6, #0]
1000d560:	6829      	ldr	r1, [r5, #0]
1000d562:	4b09      	ldr	r3, [pc, #36]	; (1000d588 <at_ble_write_authorize_reply+0x80>)
1000d564:	4798      	blx	r3
1000d566:	8860      	ldrh	r0, [r4, #2]
1000d568:	8821      	ldrh	r1, [r4, #0]
1000d56a:	9a01      	ldr	r2, [sp, #4]
1000d56c:	4b07      	ldr	r3, [pc, #28]	; (1000d58c <at_ble_write_authorize_reply+0x84>)
1000d56e:	4798      	blx	r3
1000d570:	2000      	movs	r0, #0
1000d572:	b005      	add	sp, #20
1000d574:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d576:	46c0      	nop			; (mov r8, r8)
1000d578:	1000d3a5 	.word	0x1000d3a5
1000d57c:	1001025f 	.word	0x1001025f
1000d580:	10012ebc 	.word	0x10012ebc
1000d584:	1000d4c9 	.word	0x1000d4c9
1000d588:	1000d48d 	.word	0x1000d48d
1000d58c:	1000ec55 	.word	0x1000ec55

1000d590 <gatts_handle_read_req>:
1000d590:	b538      	push	{r3, r4, r5, lr}
1000d592:	1c0c      	adds	r4, r1, #0
1000d594:	4b07      	ldr	r3, [pc, #28]	; (1000d5b4 <gatts_handle_read_req+0x24>)
1000d596:	4798      	blx	r3
1000d598:	8865      	ldrh	r5, [r4, #2]
1000d59a:	4b07      	ldr	r3, [pc, #28]	; (1000d5b8 <gatts_handle_read_req+0x28>)
1000d59c:	1c28      	adds	r0, r5, #0
1000d59e:	4798      	blx	r3
1000d5a0:	7883      	ldrb	r3, [r0, #2]
1000d5a2:	2026      	movs	r0, #38	; 0x26
1000d5a4:	07db      	lsls	r3, r3, #31
1000d5a6:	d404      	bmi.n	1000d5b2 <gatts_handle_read_req+0x22>
1000d5a8:	8820      	ldrh	r0, [r4, #0]
1000d5aa:	1c29      	adds	r1, r5, #0
1000d5ac:	4b03      	ldr	r3, [pc, #12]	; (1000d5bc <gatts_handle_read_req+0x2c>)
1000d5ae:	4798      	blx	r3
1000d5b0:	203b      	movs	r0, #59	; 0x3b
1000d5b2:	bd38      	pop	{r3, r4, r5, pc}
1000d5b4:	1000eb99 	.word	0x1000eb99
1000d5b8:	1000d3a5 	.word	0x1000d3a5
1000d5bc:	1000d3e5 	.word	0x1000d3e5

1000d5c0 <gatts_handle_att_info_req>:
1000d5c0:	b538      	push	{r3, r4, r5, lr}
1000d5c2:	1c0d      	adds	r5, r1, #0
1000d5c4:	4b0a      	ldr	r3, [pc, #40]	; (1000d5f0 <gatts_handle_att_info_req+0x30>)
1000d5c6:	1c14      	adds	r4, r2, #0
1000d5c8:	4798      	blx	r3
1000d5ca:	882d      	ldrh	r5, [r5, #0]
1000d5cc:	4b09      	ldr	r3, [pc, #36]	; (1000d5f4 <gatts_handle_att_info_req+0x34>)
1000d5ce:	1c28      	adds	r0, r5, #0
1000d5d0:	4798      	blx	r3
1000d5d2:	0a22      	lsrs	r2, r4, #8
1000d5d4:	1c03      	adds	r3, r0, #0
1000d5d6:	4c08      	ldr	r4, [pc, #32]	; (1000d5f8 <gatts_handle_att_info_req+0x38>)
1000d5d8:	b291      	uxth	r1, r2
1000d5da:	2800      	cmp	r0, #0
1000d5dc:	d003      	beq.n	1000d5e6 <gatts_handle_att_info_req+0x26>
1000d5de:	8882      	ldrh	r2, [r0, #4]
1000d5e0:	2300      	movs	r3, #0
1000d5e2:	1c28      	adds	r0, r5, #0
1000d5e4:	e001      	b.n	1000d5ea <gatts_handle_att_info_req+0x2a>
1000d5e6:	1c28      	adds	r0, r5, #0
1000d5e8:	2201      	movs	r2, #1
1000d5ea:	47a0      	blx	r4
1000d5ec:	203b      	movs	r0, #59	; 0x3b
1000d5ee:	bd38      	pop	{r3, r4, r5, pc}
1000d5f0:	1000ebdd 	.word	0x1000ebdd
1000d5f4:	1000d3a5 	.word	0x1000d3a5
1000d5f8:	1000ec99 	.word	0x1000ec99

1000d5fc <gatts_handle_write_req>:
1000d5fc:	b510      	push	{r4, lr}
1000d5fe:	1c14      	adds	r4, r2, #0
1000d600:	4b07      	ldr	r3, [pc, #28]	; (1000d620 <gatts_handle_write_req+0x24>)
1000d602:	4798      	blx	r3
1000d604:	4b07      	ldr	r3, [pc, #28]	; (1000d624 <gatts_handle_write_req+0x28>)
1000d606:	8860      	ldrh	r0, [r4, #2]
1000d608:	4798      	blx	r3
1000d60a:	2302      	movs	r3, #2
1000d60c:	7881      	ldrb	r1, [r0, #2]
1000d60e:	2022      	movs	r0, #34	; 0x22
1000d610:	4019      	ands	r1, r3
1000d612:	d103      	bne.n	1000d61c <gatts_handle_write_req+0x20>
1000d614:	1c20      	adds	r0, r4, #0
1000d616:	4b04      	ldr	r3, [pc, #16]	; (1000d628 <gatts_handle_write_req+0x2c>)
1000d618:	4798      	blx	r3
1000d61a:	201f      	movs	r0, #31
1000d61c:	bd10      	pop	{r4, pc}
1000d61e:	46c0      	nop			; (mov r8, r8)
1000d620:	1000eba5 	.word	0x1000eba5
1000d624:	1000d3a5 	.word	0x1000d3a5
1000d628:	1000d509 	.word	0x1000d509

1000d62c <init_l2cc_task_module>:
1000d62c:	220a      	movs	r2, #10
1000d62e:	4b01      	ldr	r3, [pc, #4]	; (1000d634 <init_l2cc_task_module+0x8>)
1000d630:	701a      	strb	r2, [r3, #0]
1000d632:	4770      	bx	lr
1000d634:	10012eb9 	.word	0x10012eb9

1000d638 <l2cc_data_send_rsp_handler>:
1000d638:	b510      	push	{r4, lr}
1000d63a:	7802      	ldrb	r2, [r0, #0]
1000d63c:	700a      	strb	r2, [r1, #0]
1000d63e:	7883      	ldrb	r3, [r0, #2]
1000d640:	7844      	ldrb	r4, [r0, #1]
1000d642:	021b      	lsls	r3, r3, #8
1000d644:	4323      	orrs	r3, r4
1000d646:	804b      	strh	r3, [r1, #2]
1000d648:	7903      	ldrb	r3, [r0, #4]
1000d64a:	78c0      	ldrb	r0, [r0, #3]
1000d64c:	021b      	lsls	r3, r3, #8
1000d64e:	4303      	orrs	r3, r0
1000d650:	808b      	strh	r3, [r1, #4]
1000d652:	2a00      	cmp	r2, #0
1000d654:	d103      	bne.n	1000d65e <l2cc_data_send_rsp_handler+0x26>
1000d656:	4a02      	ldr	r2, [pc, #8]	; (1000d660 <l2cc_data_send_rsp_handler+0x28>)
1000d658:	7813      	ldrb	r3, [r2, #0]
1000d65a:	3301      	adds	r3, #1
1000d65c:	7013      	strb	r3, [r2, #0]
1000d65e:	bd10      	pop	{r4, pc}
1000d660:	10012eb9 	.word	0x10012eb9

1000d664 <l2cc_data_received_handler>:
1000d664:	b508      	push	{r3, lr}
1000d666:	1c03      	adds	r3, r0, #0
1000d668:	7842      	ldrb	r2, [r0, #1]
1000d66a:	7800      	ldrb	r0, [r0, #0]
1000d66c:	0212      	lsls	r2, r2, #8
1000d66e:	4302      	orrs	r2, r0
1000d670:	800a      	strh	r2, [r1, #0]
1000d672:	78da      	ldrb	r2, [r3, #3]
1000d674:	7898      	ldrb	r0, [r3, #2]
1000d676:	0212      	lsls	r2, r2, #8
1000d678:	4302      	orrs	r2, r0
1000d67a:	804a      	strh	r2, [r1, #2]
1000d67c:	795a      	ldrb	r2, [r3, #5]
1000d67e:	7918      	ldrb	r0, [r3, #4]
1000d680:	0212      	lsls	r2, r2, #8
1000d682:	4302      	orrs	r2, r0
1000d684:	808a      	strh	r2, [r1, #4]
1000d686:	1d88      	adds	r0, r1, #6
1000d688:	1d99      	adds	r1, r3, #6
1000d68a:	4b01      	ldr	r3, [pc, #4]	; (1000d690 <l2cc_data_received_handler+0x2c>)
1000d68c:	4798      	blx	r3
1000d68e:	bd08      	pop	{r3, pc}
1000d690:	1001025f 	.word	0x1001025f

1000d694 <at_ble_authenticate>:
1000d694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d696:	1c0c      	adds	r4, r1, #0
1000d698:	211f      	movs	r1, #31
1000d69a:	b08b      	sub	sp, #44	; 0x2c
1000d69c:	9307      	str	r3, [sp, #28]
1000d69e:	ab02      	add	r3, sp, #8
1000d6a0:	18c9      	adds	r1, r1, r3
1000d6a2:	230f      	movs	r3, #15
1000d6a4:	700b      	strb	r3, [r1, #0]
1000d6a6:	4b40      	ldr	r3, [pc, #256]	; (1000d7a8 <at_ble_authenticate+0x114>)
1000d6a8:	1c05      	adds	r5, r0, #0
1000d6aa:	1c16      	adds	r6, r2, #0
1000d6ac:	4798      	blx	r3
1000d6ae:	1c07      	adds	r7, r0, #0
1000d6b0:	2001      	movs	r0, #1
1000d6b2:	2f07      	cmp	r7, #7
1000d6b4:	d875      	bhi.n	1000d7a2 <at_ble_authenticate+0x10e>
1000d6b6:	2c00      	cmp	r4, #0
1000d6b8:	d113      	bne.n	1000d6e2 <at_ble_authenticate+0x4e>
1000d6ba:	2312      	movs	r3, #18
1000d6bc:	435f      	muls	r7, r3
1000d6be:	4b3b      	ldr	r3, [pc, #236]	; (1000d7ac <at_ble_authenticate+0x118>)
1000d6c0:	5cfb      	ldrb	r3, [r7, r3]
1000d6c2:	4283      	cmp	r3, r0
1000d6c4:	d001      	beq.n	1000d6ca <at_ble_authenticate+0x36>
1000d6c6:	20cf      	movs	r0, #207	; 0xcf
1000d6c8:	e06b      	b.n	1000d7a2 <at_ble_authenticate+0x10e>
1000d6ca:	9504      	str	r5, [sp, #16]
1000d6cc:	9400      	str	r4, [sp, #0]
1000d6ce:	9401      	str	r4, [sp, #4]
1000d6d0:	9402      	str	r4, [sp, #8]
1000d6d2:	9403      	str	r4, [sp, #12]
1000d6d4:	1c20      	adds	r0, r4, #0
1000d6d6:	1c21      	adds	r1, r4, #0
1000d6d8:	1c22      	adds	r2, r4, #0
1000d6da:	1c23      	adds	r3, r4, #0
1000d6dc:	4d34      	ldr	r5, [pc, #208]	; (1000d7b0 <at_ble_authenticate+0x11c>)
1000d6de:	47a8      	blx	r5
1000d6e0:	e05e      	b.n	1000d7a0 <at_ble_authenticate+0x10c>
1000d6e2:	7922      	ldrb	r2, [r4, #4]
1000d6e4:	2a06      	cmp	r2, #6
1000d6e6:	d9ee      	bls.n	1000d6c6 <at_ble_authenticate+0x32>
1000d6e8:	7963      	ldrb	r3, [r4, #5]
1000d6ea:	2b10      	cmp	r3, #16
1000d6ec:	d8eb      	bhi.n	1000d6c6 <at_ble_authenticate+0x32>
1000d6ee:	429a      	cmp	r2, r3
1000d6f0:	d8e9      	bhi.n	1000d6c6 <at_ble_authenticate+0x32>
1000d6f2:	7a23      	ldrb	r3, [r4, #8]
1000d6f4:	2b04      	cmp	r3, #4
1000d6f6:	d8e6      	bhi.n	1000d6c6 <at_ble_authenticate+0x32>
1000d6f8:	79a3      	ldrb	r3, [r4, #6]
1000d6fa:	2b07      	cmp	r3, #7
1000d6fc:	d8e3      	bhi.n	1000d6c6 <at_ble_authenticate+0x32>
1000d6fe:	79e3      	ldrb	r3, [r4, #7]
1000d700:	2b07      	cmp	r3, #7
1000d702:	d8e0      	bhi.n	1000d6c6 <at_ble_authenticate+0x32>
1000d704:	78a3      	ldrb	r3, [r4, #2]
1000d706:	2b00      	cmp	r3, #0
1000d708:	d006      	beq.n	1000d718 <at_ble_authenticate+0x84>
1000d70a:	2e00      	cmp	r6, #0
1000d70c:	d0db      	beq.n	1000d6c6 <at_ble_authenticate+0x32>
1000d70e:	4829      	ldr	r0, [pc, #164]	; (1000d7b4 <at_ble_authenticate+0x120>)
1000d710:	1c31      	adds	r1, r6, #0
1000d712:	221c      	movs	r2, #28
1000d714:	4b28      	ldr	r3, [pc, #160]	; (1000d7b8 <at_ble_authenticate+0x124>)
1000d716:	4798      	blx	r3
1000d718:	9b07      	ldr	r3, [sp, #28]
1000d71a:	2b00      	cmp	r3, #0
1000d71c:	d005      	beq.n	1000d72a <at_ble_authenticate+0x96>
1000d71e:	4827      	ldr	r0, [pc, #156]	; (1000d7bc <at_ble_authenticate+0x128>)
1000d720:	1c19      	adds	r1, r3, #0
1000d722:	309a      	adds	r0, #154	; 0x9a
1000d724:	2210      	movs	r2, #16
1000d726:	4b24      	ldr	r3, [pc, #144]	; (1000d7b8 <at_ble_authenticate+0x124>)
1000d728:	4798      	blx	r3
1000d72a:	7863      	ldrb	r3, [r4, #1]
1000d72c:	78a2      	ldrb	r2, [r4, #2]
1000d72e:	009b      	lsls	r3, r3, #2
1000d730:	4313      	orrs	r3, r2
1000d732:	2212      	movs	r2, #18
1000d734:	4357      	muls	r7, r2
1000d736:	4a1d      	ldr	r2, [pc, #116]	; (1000d7ac <at_ble_authenticate+0x118>)
1000d738:	b2db      	uxtb	r3, r3
1000d73a:	5cba      	ldrb	r2, [r7, r2]
1000d73c:	2a00      	cmp	r2, #0
1000d73e:	d116      	bne.n	1000d76e <at_ble_authenticate+0xda>
1000d740:	79a0      	ldrb	r0, [r4, #6]
1000d742:	0742      	lsls	r2, r0, #29
1000d744:	d502      	bpl.n	1000d74c <at_ble_authenticate+0xb8>
1000d746:	9a07      	ldr	r2, [sp, #28]
1000d748:	2a00      	cmp	r2, #0
1000d74a:	d0bc      	beq.n	1000d6c6 <at_ble_authenticate+0x32>
1000d74c:	07c2      	lsls	r2, r0, #31
1000d74e:	d501      	bpl.n	1000d754 <at_ble_authenticate+0xc0>
1000d750:	2e00      	cmp	r6, #0
1000d752:	d0b8      	beq.n	1000d6c6 <at_ble_authenticate+0x32>
1000d754:	7966      	ldrb	r6, [r4, #5]
1000d756:	7821      	ldrb	r1, [r4, #0]
1000d758:	78e2      	ldrb	r2, [r4, #3]
1000d75a:	9600      	str	r6, [sp, #0]
1000d75c:	9001      	str	r0, [sp, #4]
1000d75e:	79e0      	ldrb	r0, [r4, #7]
1000d760:	9002      	str	r0, [sp, #8]
1000d762:	7a20      	ldrb	r0, [r4, #8]
1000d764:	4c16      	ldr	r4, [pc, #88]	; (1000d7c0 <at_ble_authenticate+0x12c>)
1000d766:	9003      	str	r0, [sp, #12]
1000d768:	1c28      	adds	r0, r5, #0
1000d76a:	47a0      	blx	r4
1000d76c:	e018      	b.n	1000d7a0 <at_ble_authenticate+0x10c>
1000d76e:	2a01      	cmp	r2, #1
1000d770:	d1a9      	bne.n	1000d6c6 <at_ble_authenticate+0x32>
1000d772:	79e0      	ldrb	r0, [r4, #7]
1000d774:	0742      	lsls	r2, r0, #29
1000d776:	d502      	bpl.n	1000d77e <at_ble_authenticate+0xea>
1000d778:	9a07      	ldr	r2, [sp, #28]
1000d77a:	2a00      	cmp	r2, #0
1000d77c:	d0a3      	beq.n	1000d6c6 <at_ble_authenticate+0x32>
1000d77e:	07c2      	lsls	r2, r0, #31
1000d780:	d501      	bpl.n	1000d786 <at_ble_authenticate+0xf2>
1000d782:	2e00      	cmp	r6, #0
1000d784:	d09f      	beq.n	1000d6c6 <at_ble_authenticate+0x32>
1000d786:	7966      	ldrb	r6, [r4, #5]
1000d788:	7821      	ldrb	r1, [r4, #0]
1000d78a:	78e2      	ldrb	r2, [r4, #3]
1000d78c:	9600      	str	r6, [sp, #0]
1000d78e:	79a6      	ldrb	r6, [r4, #6]
1000d790:	9002      	str	r0, [sp, #8]
1000d792:	9601      	str	r6, [sp, #4]
1000d794:	7a20      	ldrb	r0, [r4, #8]
1000d796:	9504      	str	r5, [sp, #16]
1000d798:	9003      	str	r0, [sp, #12]
1000d79a:	4c05      	ldr	r4, [pc, #20]	; (1000d7b0 <at_ble_authenticate+0x11c>)
1000d79c:	2001      	movs	r0, #1
1000d79e:	47a0      	blx	r4
1000d7a0:	2000      	movs	r0, #0
1000d7a2:	b00b      	add	sp, #44	; 0x2c
1000d7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7a6:	46c0      	nop			; (mov r8, r8)
1000d7a8:	1000db3d 	.word	0x1000db3d
1000d7ac:	10013ee6 	.word	0x10013ee6
1000d7b0:	1000e0ad 	.word	0x1000e0ad
1000d7b4:	10013ff4 	.word	0x10013ff4
1000d7b8:	1001025f 	.word	0x1001025f
1000d7bc:	10013f76 	.word	0x10013f76
1000d7c0:	1000de8d 	.word	0x1000de8d

1000d7c4 <at_ble_pair_key_reply>:
1000d7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7c6:	b085      	sub	sp, #20
1000d7c8:	1c05      	adds	r5, r0, #0
1000d7ca:	1c0c      	adds	r4, r1, #0
1000d7cc:	1c16      	adds	r6, r2, #0
1000d7ce:	2100      	movs	r1, #0
1000d7d0:	4668      	mov	r0, sp
1000d7d2:	2210      	movs	r2, #16
1000d7d4:	4b18      	ldr	r3, [pc, #96]	; (1000d838 <at_ble_pair_key_reply+0x74>)
1000d7d6:	4798      	blx	r3
1000d7d8:	2101      	movs	r1, #1
1000d7da:	2e00      	cmp	r6, #0
1000d7dc:	d101      	bne.n	1000d7e2 <at_ble_pair_key_reply+0x1e>
1000d7de:	1c31      	adds	r1, r6, #0
1000d7e0:	466e      	mov	r6, sp
1000d7e2:	2c00      	cmp	r4, #0
1000d7e4:	d116      	bne.n	1000d814 <at_ble_pair_key_reply+0x50>
1000d7e6:	2701      	movs	r7, #1
1000d7e8:	1c23      	adds	r3, r4, #0
1000d7ea:	1d70      	adds	r0, r6, #5
1000d7ec:	3e01      	subs	r6, #1
1000d7ee:	7802      	ldrb	r2, [r0, #0]
1000d7f0:	3801      	subs	r0, #1
1000d7f2:	3a30      	subs	r2, #48	; 0x30
1000d7f4:	437a      	muls	r2, r7
1000d7f6:	189b      	adds	r3, r3, r2
1000d7f8:	220a      	movs	r2, #10
1000d7fa:	4357      	muls	r7, r2
1000d7fc:	42b0      	cmp	r0, r6
1000d7fe:	d1f6      	bne.n	1000d7ee <at_ble_pair_key_reply+0x2a>
1000d800:	466a      	mov	r2, sp
1000d802:	4668      	mov	r0, sp
1000d804:	7013      	strb	r3, [r2, #0]
1000d806:	0a1a      	lsrs	r2, r3, #8
1000d808:	7042      	strb	r2, [r0, #1]
1000d80a:	0c1a      	lsrs	r2, r3, #16
1000d80c:	0e1b      	lsrs	r3, r3, #24
1000d80e:	7082      	strb	r2, [r0, #2]
1000d810:	70c3      	strb	r3, [r0, #3]
1000d812:	e009      	b.n	1000d828 <at_ble_pair_key_reply+0x64>
1000d814:	20cf      	movs	r0, #207	; 0xcf
1000d816:	2c01      	cmp	r4, #1
1000d818:	d10c      	bne.n	1000d834 <at_ble_pair_key_reply+0x70>
1000d81a:	2300      	movs	r3, #0
1000d81c:	4668      	mov	r0, sp
1000d81e:	5cf2      	ldrb	r2, [r6, r3]
1000d820:	54c2      	strb	r2, [r0, r3]
1000d822:	3301      	adds	r3, #1
1000d824:	2b10      	cmp	r3, #16
1000d826:	d1f9      	bne.n	1000d81c <at_ble_pair_key_reply+0x58>
1000d828:	2004      	movs	r0, #4
1000d82a:	466a      	mov	r2, sp
1000d82c:	1c2b      	adds	r3, r5, #0
1000d82e:	4c03      	ldr	r4, [pc, #12]	; (1000d83c <at_ble_pair_key_reply+0x78>)
1000d830:	47a0      	blx	r4
1000d832:	2000      	movs	r0, #0
1000d834:	b005      	add	sp, #20
1000d836:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d838:	10010271 	.word	0x10010271
1000d83c:	1000e129 	.word	0x1000e129

1000d840 <at_ble_encryption_start>:
1000d840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d842:	23cf      	movs	r3, #207	; 0xcf
1000d844:	2900      	cmp	r1, #0
1000d846:	d02b      	beq.n	1000d8a0 <at_ble_encryption_start+0x60>
1000d848:	2a05      	cmp	r2, #5
1000d84a:	d829      	bhi.n	1000d8a0 <at_ble_encryption_start+0x60>
1000d84c:	2701      	movs	r7, #1
1000d84e:	1c3d      	adds	r5, r7, #0
1000d850:	2433      	movs	r4, #51	; 0x33
1000d852:	4095      	lsls	r5, r2
1000d854:	4225      	tst	r5, r4
1000d856:	d023      	beq.n	1000d8a0 <at_ble_encryption_start+0x60>
1000d858:	7e8c      	ldrb	r4, [r1, #26]
1000d85a:	3c07      	subs	r4, #7
1000d85c:	2c09      	cmp	r4, #9
1000d85e:	d81f      	bhi.n	1000d8a0 <at_ble_encryption_start+0x60>
1000d860:	4b10      	ldr	r3, [pc, #64]	; (1000d8a4 <at_ble_encryption_start+0x64>)
1000d862:	1c0c      	adds	r4, r1, #0
1000d864:	2100      	movs	r1, #0
1000d866:	1c15      	adds	r5, r2, #0
1000d868:	1c06      	adds	r6, r0, #0
1000d86a:	4798      	blx	r3
1000d86c:	1c3b      	adds	r3, r7, #0
1000d86e:	2807      	cmp	r0, #7
1000d870:	d816      	bhi.n	1000d8a0 <at_ble_encryption_start+0x60>
1000d872:	2312      	movs	r3, #18
1000d874:	4358      	muls	r0, r3
1000d876:	4b0c      	ldr	r3, [pc, #48]	; (1000d8a8 <at_ble_encryption_start+0x68>)
1000d878:	5cc7      	ldrb	r7, [r0, r3]
1000d87a:	23e0      	movs	r3, #224	; 0xe0
1000d87c:	2f00      	cmp	r7, #0
1000d87e:	d10f      	bne.n	1000d8a0 <at_ble_encryption_start+0x60>
1000d880:	1c21      	adds	r1, r4, #0
1000d882:	221c      	movs	r2, #28
1000d884:	4b09      	ldr	r3, [pc, #36]	; (1000d8ac <at_ble_encryption_start+0x6c>)
1000d886:	480a      	ldr	r0, [pc, #40]	; (1000d8b0 <at_ble_encryption_start+0x70>)
1000d888:	4798      	blx	r3
1000d88a:	1c23      	adds	r3, r4, #0
1000d88c:	7ea1      	ldrb	r1, [r4, #26]
1000d88e:	8a22      	ldrh	r2, [r4, #16]
1000d890:	3312      	adds	r3, #18
1000d892:	9100      	str	r1, [sp, #0]
1000d894:	9501      	str	r5, [sp, #4]
1000d896:	1c21      	adds	r1, r4, #0
1000d898:	1c30      	adds	r0, r6, #0
1000d89a:	4c06      	ldr	r4, [pc, #24]	; (1000d8b4 <at_ble_encryption_start+0x74>)
1000d89c:	47a0      	blx	r4
1000d89e:	1c3b      	adds	r3, r7, #0
1000d8a0:	1c18      	adds	r0, r3, #0
1000d8a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d8a4:	1000db3d 	.word	0x1000db3d
1000d8a8:	10013ee6 	.word	0x10013ee6
1000d8ac:	1001025f 	.word	0x1001025f
1000d8b0:	10013ff4 	.word	0x10013ff4
1000d8b4:	1000e179 	.word	0x1000e179

1000d8b8 <at_ble_encryption_request_reply>:
1000d8b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d8ba:	24cf      	movs	r4, #207	; 0xcf
1000d8bc:	2b00      	cmp	r3, #0
1000d8be:	d011      	beq.n	1000d8e4 <at_ble_encryption_request_reply+0x2c>
1000d8c0:	2a00      	cmp	r2, #0
1000d8c2:	d00a      	beq.n	1000d8da <at_ble_encryption_request_reply+0x22>
1000d8c4:	2905      	cmp	r1, #5
1000d8c6:	d80d      	bhi.n	1000d8e4 <at_ble_encryption_request_reply+0x2c>
1000d8c8:	2501      	movs	r5, #1
1000d8ca:	2633      	movs	r6, #51	; 0x33
1000d8cc:	408d      	lsls	r5, r1
1000d8ce:	4235      	tst	r5, r6
1000d8d0:	d008      	beq.n	1000d8e4 <at_ble_encryption_request_reply+0x2c>
1000d8d2:	7e9d      	ldrb	r5, [r3, #26]
1000d8d4:	3d07      	subs	r5, #7
1000d8d6:	2d09      	cmp	r5, #9
1000d8d8:	d804      	bhi.n	1000d8e4 <at_ble_encryption_request_reply+0x2c>
1000d8da:	7e9c      	ldrb	r4, [r3, #26]
1000d8dc:	9400      	str	r4, [sp, #0]
1000d8de:	4c02      	ldr	r4, [pc, #8]	; (1000d8e8 <at_ble_encryption_request_reply+0x30>)
1000d8e0:	47a0      	blx	r4
1000d8e2:	2400      	movs	r4, #0
1000d8e4:	1c20      	adds	r0, r4, #0
1000d8e6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d8e8:	1000e235 	.word	0x1000e235

1000d8ec <rx_callback>:
1000d8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d8ee:	88c5      	ldrh	r5, [r0, #6]
1000d8f0:	8807      	ldrh	r7, [r0, #0]
1000d8f2:	8886      	ldrh	r6, [r0, #4]
1000d8f4:	2d00      	cmp	r5, #0
1000d8f6:	d10c      	bne.n	1000d912 <rx_callback+0x26>
1000d8f8:	4b19      	ldr	r3, [pc, #100]	; (1000d960 <rx_callback+0x74>)
1000d8fa:	1c38      	adds	r0, r7, #0
1000d8fc:	1c31      	adds	r1, r6, #0
1000d8fe:	1c2a      	adds	r2, r5, #0
1000d900:	4798      	blx	r3
1000d902:	1e03      	subs	r3, r0, #0
1000d904:	d12a      	bne.n	1000d95c <rx_callback+0x70>
1000d906:	1c38      	adds	r0, r7, #0
1000d908:	1c31      	adds	r1, r6, #0
1000d90a:	1c1a      	adds	r2, r3, #0
1000d90c:	4c15      	ldr	r4, [pc, #84]	; (1000d964 <rx_callback+0x78>)
1000d90e:	47a0      	blx	r4
1000d910:	e024      	b.n	1000d95c <rx_callback+0x70>
1000d912:	2296      	movs	r2, #150	; 0x96
1000d914:	4c14      	ldr	r4, [pc, #80]	; (1000d968 <rx_callback+0x7c>)
1000d916:	0092      	lsls	r2, r2, #2
1000d918:	8823      	ldrh	r3, [r4, #0]
1000d91a:	195b      	adds	r3, r3, r5
1000d91c:	4293      	cmp	r3, r2
1000d91e:	dd01      	ble.n	1000d924 <rx_callback+0x38>
1000d920:	2300      	movs	r3, #0
1000d922:	8023      	strh	r3, [r4, #0]
1000d924:	1c01      	adds	r1, r0, #0
1000d926:	4a11      	ldr	r2, [pc, #68]	; (1000d96c <rx_callback+0x80>)
1000d928:	8823      	ldrh	r3, [r4, #0]
1000d92a:	3108      	adds	r1, #8
1000d92c:	189b      	adds	r3, r3, r2
1000d92e:	9301      	str	r3, [sp, #4]
1000d930:	1c18      	adds	r0, r3, #0
1000d932:	1c2a      	adds	r2, r5, #0
1000d934:	4b0e      	ldr	r3, [pc, #56]	; (1000d970 <rx_callback+0x84>)
1000d936:	4798      	blx	r3
1000d938:	1c38      	adds	r0, r7, #0
1000d93a:	1c31      	adds	r1, r6, #0
1000d93c:	9a01      	ldr	r2, [sp, #4]
1000d93e:	4b08      	ldr	r3, [pc, #32]	; (1000d960 <rx_callback+0x74>)
1000d940:	4798      	blx	r3
1000d942:	2800      	cmp	r0, #0
1000d944:	d10a      	bne.n	1000d95c <rx_callback+0x70>
1000d946:	4b09      	ldr	r3, [pc, #36]	; (1000d96c <rx_callback+0x80>)
1000d948:	8822      	ldrh	r2, [r4, #0]
1000d94a:	1c31      	adds	r1, r6, #0
1000d94c:	18d2      	adds	r2, r2, r3
1000d94e:	1c38      	adds	r0, r7, #0
1000d950:	1c2b      	adds	r3, r5, #0
1000d952:	4e04      	ldr	r6, [pc, #16]	; (1000d964 <rx_callback+0x78>)
1000d954:	47b0      	blx	r6
1000d956:	8823      	ldrh	r3, [r4, #0]
1000d958:	18ed      	adds	r5, r5, r3
1000d95a:	8025      	strh	r5, [r4, #0]
1000d95c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d95e:	46c0      	nop			; (mov r8, r8)
1000d960:	1000c7ed 	.word	0x1000c7ed
1000d964:	1000c781 	.word	0x1000c781
1000d968:	10014050 	.word	0x10014050
1000d96c:	10014454 	.word	0x10014454
1000d970:	1001025f 	.word	0x1001025f

1000d974 <interface_send>:
1000d974:	b508      	push	{r3, lr}
1000d976:	4b02      	ldr	r3, [pc, #8]	; (1000d980 <interface_send+0xc>)
1000d978:	4798      	blx	r3
1000d97a:	2000      	movs	r0, #0
1000d97c:	bd08      	pop	{r3, pc}
1000d97e:	46c0      	nop			; (mov r8, r8)
1000d980:	1000b715 	.word	0x1000b715

1000d984 <interface_init>:
1000d984:	2280      	movs	r2, #128	; 0x80
1000d986:	b510      	push	{r4, lr}
1000d988:	2100      	movs	r1, #0
1000d98a:	4c08      	ldr	r4, [pc, #32]	; (1000d9ac <interface_init+0x28>)
1000d98c:	0092      	lsls	r2, r2, #2
1000d98e:	4808      	ldr	r0, [pc, #32]	; (1000d9b0 <interface_init+0x2c>)
1000d990:	47a0      	blx	r4
1000d992:	2296      	movs	r2, #150	; 0x96
1000d994:	2100      	movs	r1, #0
1000d996:	0092      	lsls	r2, r2, #2
1000d998:	4806      	ldr	r0, [pc, #24]	; (1000d9b4 <interface_init+0x30>)
1000d99a:	47a0      	blx	r4
1000d99c:	2200      	movs	r2, #0
1000d99e:	4b06      	ldr	r3, [pc, #24]	; (1000d9b8 <interface_init+0x34>)
1000d9a0:	801a      	strh	r2, [r3, #0]
1000d9a2:	4a06      	ldr	r2, [pc, #24]	; (1000d9bc <interface_init+0x38>)
1000d9a4:	4b06      	ldr	r3, [pc, #24]	; (1000d9c0 <interface_init+0x3c>)
1000d9a6:	601a      	str	r2, [r3, #0]
1000d9a8:	bd10      	pop	{r4, pc}
1000d9aa:	46c0      	nop			; (mov r8, r8)
1000d9ac:	10010271 	.word	0x10010271
1000d9b0:	10014254 	.word	0x10014254
1000d9b4:	10014454 	.word	0x10014454
1000d9b8:	10014050 	.word	0x10014050
1000d9bc:	10014054 	.word	0x10014054
1000d9c0:	10012ebc 	.word	0x10012ebc

1000d9c4 <platform_cmd_cmpl_signal>:
1000d9c4:	2201      	movs	r2, #1
1000d9c6:	4b01      	ldr	r3, [pc, #4]	; (1000d9cc <platform_cmd_cmpl_signal+0x8>)
1000d9c8:	601a      	str	r2, [r3, #0]
1000d9ca:	4770      	bx	lr
1000d9cc:	10013150 	.word	0x10013150

1000d9d0 <platform_cmd_cmpl_wait>:
1000d9d0:	b510      	push	{r4, lr}
1000d9d2:	1c04      	adds	r4, r0, #0
1000d9d4:	4b07      	ldr	r3, [pc, #28]	; (1000d9f4 <platform_cmd_cmpl_wait+0x24>)
1000d9d6:	681a      	ldr	r2, [r3, #0]
1000d9d8:	2a01      	cmp	r2, #1
1000d9da:	d003      	beq.n	1000d9e4 <platform_cmd_cmpl_wait+0x14>
1000d9dc:	4b06      	ldr	r3, [pc, #24]	; (1000d9f8 <platform_cmd_cmpl_wait+0x28>)
1000d9de:	2000      	movs	r0, #0
1000d9e0:	4798      	blx	r3
1000d9e2:	e7f7      	b.n	1000d9d4 <platform_cmd_cmpl_wait+0x4>
1000d9e4:	6819      	ldr	r1, [r3, #0]
1000d9e6:	2901      	cmp	r1, #1
1000d9e8:	d102      	bne.n	1000d9f0 <platform_cmd_cmpl_wait+0x20>
1000d9ea:	2200      	movs	r2, #0
1000d9ec:	601a      	str	r2, [r3, #0]
1000d9ee:	e000      	b.n	1000d9f2 <platform_cmd_cmpl_wait+0x22>
1000d9f0:	7022      	strb	r2, [r4, #0]
1000d9f2:	bd10      	pop	{r4, pc}
1000d9f4:	10013150 	.word	0x10013150
1000d9f8:	1000b7bd 	.word	0x1000b7bd

1000d9fc <start_timer>:
1000d9fc:	4770      	bx	lr

1000d9fe <stop_timer>:
1000d9fe:	4770      	bx	lr

1000da00 <dbg_le_set_bd_addr_req_handler>:
1000da00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000da02:	466b      	mov	r3, sp
1000da04:	1dde      	adds	r6, r3, #7
1000da06:	2300      	movs	r3, #0
1000da08:	7033      	strb	r3, [r6, #0]
1000da0a:	230f      	movs	r3, #15
1000da0c:	4c13      	ldr	r4, [pc, #76]	; (1000da5c <dbg_le_set_bd_addr_req_handler+0x5c>)
1000da0e:	2703      	movs	r7, #3
1000da10:	7023      	strb	r3, [r4, #0]
1000da12:	2300      	movs	r3, #0
1000da14:	70e3      	strb	r3, [r4, #3]
1000da16:	4b12      	ldr	r3, [pc, #72]	; (1000da60 <dbg_le_set_bd_addr_req_handler+0x60>)
1000da18:	1c01      	adds	r1, r0, #0
1000da1a:	881a      	ldrh	r2, [r3, #0]
1000da1c:	881b      	ldrh	r3, [r3, #0]
1000da1e:	7122      	strb	r2, [r4, #4]
1000da20:	0a1b      	lsrs	r3, r3, #8
1000da22:	2206      	movs	r2, #6
1000da24:	7163      	strb	r3, [r4, #5]
1000da26:	480f      	ldr	r0, [pc, #60]	; (1000da64 <dbg_le_set_bd_addr_req_handler+0x64>)
1000da28:	4b0f      	ldr	r3, [pc, #60]	; (1000da68 <dbg_le_set_bd_addr_req_handler+0x68>)
1000da2a:	7067      	strb	r7, [r4, #1]
1000da2c:	70a7      	strb	r7, [r4, #2]
1000da2e:	4798      	blx	r3
1000da30:	4d0e      	ldr	r5, [pc, #56]	; (1000da6c <dbg_le_set_bd_addr_req_handler+0x6c>)
1000da32:	4b0f      	ldr	r3, [pc, #60]	; (1000da70 <dbg_le_set_bd_addr_req_handler+0x70>)
1000da34:	210e      	movs	r1, #14
1000da36:	802b      	strh	r3, [r5, #0]
1000da38:	2306      	movs	r3, #6
1000da3a:	71a3      	strb	r3, [r4, #6]
1000da3c:	2300      	movs	r3, #0
1000da3e:	1c20      	adds	r0, r4, #0
1000da40:	71e3      	strb	r3, [r4, #7]
1000da42:	4b0c      	ldr	r3, [pc, #48]	; (1000da74 <dbg_le_set_bd_addr_req_handler+0x74>)
1000da44:	80af      	strh	r7, [r5, #4]
1000da46:	4798      	blx	r3
1000da48:	1c30      	adds	r0, r6, #0
1000da4a:	4b0b      	ldr	r3, [pc, #44]	; (1000da78 <dbg_le_set_bd_addr_req_handler+0x78>)
1000da4c:	4798      	blx	r3
1000da4e:	7833      	ldrb	r3, [r6, #0]
1000da50:	20e2      	movs	r0, #226	; 0xe2
1000da52:	2b00      	cmp	r3, #0
1000da54:	d101      	bne.n	1000da5a <dbg_le_set_bd_addr_req_handler+0x5a>
1000da56:	68ab      	ldr	r3, [r5, #8]
1000da58:	7818      	ldrb	r0, [r3, #0]
1000da5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000da5c:	10014254 	.word	0x10014254
1000da60:	10013ee4 	.word	0x10013ee4
1000da64:	1001425c 	.word	0x1001425c
1000da68:	1001025f 	.word	0x1001025f
1000da6c:	10013ed8 	.word	0x10013ed8
1000da70:	00000329 	.word	0x00000329
1000da74:	1000d975 	.word	0x1000d975
1000da78:	1000d9d1 	.word	0x1000d9d1

1000da7c <gapc_get_dev_info_cfm.constprop.1>:
1000da7c:	b538      	push	{r3, r4, r5, lr}
1000da7e:	230b      	movs	r3, #11
1000da80:	4c27      	ldr	r4, [pc, #156]	; (1000db20 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000da82:	7023      	strb	r3, [r4, #0]
1000da84:	3303      	adds	r3, #3
1000da86:	7063      	strb	r3, [r4, #1]
1000da88:	3329      	adds	r3, #41	; 0x29
1000da8a:	70a3      	strb	r3, [r4, #2]
1000da8c:	4b25      	ldr	r3, [pc, #148]	; (1000db24 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000da8e:	70e1      	strb	r1, [r4, #3]
1000da90:	881a      	ldrh	r2, [r3, #0]
1000da92:	881b      	ldrh	r3, [r3, #0]
1000da94:	7122      	strb	r2, [r4, #4]
1000da96:	0a1b      	lsrs	r3, r3, #8
1000da98:	7163      	strb	r3, [r4, #5]
1000da9a:	2300      	movs	r3, #0
1000da9c:	7220      	strb	r0, [r4, #8]
1000da9e:	7263      	strb	r3, [r4, #9]
1000daa0:	2801      	cmp	r0, #1
1000daa2:	d02b      	beq.n	1000dafc <gapc_get_dev_info_cfm.constprop.1+0x80>
1000daa4:	4298      	cmp	r0, r3
1000daa6:	d01b      	beq.n	1000dae0 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000daa8:	2802      	cmp	r0, #2
1000daaa:	d12f      	bne.n	1000db0c <gapc_get_dev_info_cfm.constprop.1+0x90>
1000daac:	4b1e      	ldr	r3, [pc, #120]	; (1000db28 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000daae:	2112      	movs	r1, #18
1000dab0:	1c1a      	adds	r2, r3, #0
1000dab2:	32ce      	adds	r2, #206	; 0xce
1000dab4:	8812      	ldrh	r2, [r2, #0]
1000dab6:	72a2      	strb	r2, [r4, #10]
1000dab8:	0a12      	lsrs	r2, r2, #8
1000daba:	72e2      	strb	r2, [r4, #11]
1000dabc:	1c1a      	adds	r2, r3, #0
1000dabe:	32d0      	adds	r2, #208	; 0xd0
1000dac0:	8812      	ldrh	r2, [r2, #0]
1000dac2:	7322      	strb	r2, [r4, #12]
1000dac4:	0a12      	lsrs	r2, r2, #8
1000dac6:	7362      	strb	r2, [r4, #13]
1000dac8:	1c1a      	adds	r2, r3, #0
1000daca:	32d2      	adds	r2, #210	; 0xd2
1000dacc:	8812      	ldrh	r2, [r2, #0]
1000dace:	33d4      	adds	r3, #212	; 0xd4
1000dad0:	73a2      	strb	r2, [r4, #14]
1000dad2:	0a12      	lsrs	r2, r2, #8
1000dad4:	73e2      	strb	r2, [r4, #15]
1000dad6:	881b      	ldrh	r3, [r3, #0]
1000dad8:	7423      	strb	r3, [r4, #16]
1000dada:	0a1b      	lsrs	r3, r3, #8
1000dadc:	7463      	strb	r3, [r4, #17]
1000dade:	e016      	b.n	1000db0e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dae0:	4b11      	ldr	r3, [pc, #68]	; (1000db28 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dae2:	4912      	ldr	r1, [pc, #72]	; (1000db2c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000dae4:	33aa      	adds	r3, #170	; 0xaa
1000dae6:	881d      	ldrh	r5, [r3, #0]
1000dae8:	4811      	ldr	r0, [pc, #68]	; (1000db30 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000daea:	0a2b      	lsrs	r3, r5, #8
1000daec:	72a5      	strb	r5, [r4, #10]
1000daee:	72e3      	strb	r3, [r4, #11]
1000daf0:	1c2a      	adds	r2, r5, #0
1000daf2:	4b10      	ldr	r3, [pc, #64]	; (1000db34 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000daf4:	350c      	adds	r5, #12
1000daf6:	4798      	blx	r3
1000daf8:	b2a9      	uxth	r1, r5
1000dafa:	e008      	b.n	1000db0e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dafc:	4b0a      	ldr	r3, [pc, #40]	; (1000db28 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dafe:	210c      	movs	r1, #12
1000db00:	33cc      	adds	r3, #204	; 0xcc
1000db02:	881b      	ldrh	r3, [r3, #0]
1000db04:	72a3      	strb	r3, [r4, #10]
1000db06:	0a1b      	lsrs	r3, r3, #8
1000db08:	72e3      	strb	r3, [r4, #11]
1000db0a:	e000      	b.n	1000db0e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000db0c:	210a      	movs	r1, #10
1000db0e:	1c0b      	adds	r3, r1, #0
1000db10:	3b08      	subs	r3, #8
1000db12:	71a3      	strb	r3, [r4, #6]
1000db14:	121b      	asrs	r3, r3, #8
1000db16:	71e3      	strb	r3, [r4, #7]
1000db18:	1c20      	adds	r0, r4, #0
1000db1a:	4b07      	ldr	r3, [pc, #28]	; (1000db38 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000db1c:	4798      	blx	r3
1000db1e:	bd38      	pop	{r3, r4, r5, pc}
1000db20:	10014254 	.word	0x10014254
1000db24:	10013ee4 	.word	0x10013ee4
1000db28:	10013f76 	.word	0x10013f76
1000db2c:	10014022 	.word	0x10014022
1000db30:	10014260 	.word	0x10014260
1000db34:	1001025f 	.word	0x1001025f
1000db38:	1000d975 	.word	0x1000d975

1000db3c <check_ConnData_idx_role>:
1000db3c:	4b0c      	ldr	r3, [pc, #48]	; (1000db70 <check_ConnData_idx_role+0x34>)
1000db3e:	b570      	push	{r4, r5, r6, lr}
1000db40:	1c04      	adds	r4, r0, #0
1000db42:	2008      	movs	r0, #8
1000db44:	429c      	cmp	r4, r3
1000db46:	d011      	beq.n	1000db6c <check_ConnData_idx_role+0x30>
1000db48:	2300      	movs	r3, #0
1000db4a:	2212      	movs	r2, #18
1000db4c:	435a      	muls	r2, r3
1000db4e:	4d09      	ldr	r5, [pc, #36]	; (1000db74 <check_ConnData_idx_role+0x38>)
1000db50:	b2d8      	uxtb	r0, r3
1000db52:	1956      	adds	r6, r2, r5
1000db54:	8976      	ldrh	r6, [r6, #10]
1000db56:	42a6      	cmp	r6, r4
1000db58:	d104      	bne.n	1000db64 <check_ConnData_idx_role+0x28>
1000db5a:	2900      	cmp	r1, #0
1000db5c:	d006      	beq.n	1000db6c <check_ConnData_idx_role+0x30>
1000db5e:	5d53      	ldrb	r3, [r2, r5]
1000db60:	700b      	strb	r3, [r1, #0]
1000db62:	e003      	b.n	1000db6c <check_ConnData_idx_role+0x30>
1000db64:	3301      	adds	r3, #1
1000db66:	2b08      	cmp	r3, #8
1000db68:	d1ef      	bne.n	1000db4a <check_ConnData_idx_role+0xe>
1000db6a:	1c18      	adds	r0, r3, #0
1000db6c:	bd70      	pop	{r4, r5, r6, pc}
1000db6e:	46c0      	nop			; (mov r8, r8)
1000db70:	0000ffff 	.word	0x0000ffff
1000db74:	10013ee6 	.word	0x10013ee6

1000db78 <check_ConnData_emptyEntry>:
1000db78:	2300      	movs	r3, #0
1000db7a:	2212      	movs	r2, #18
1000db7c:	435a      	muls	r2, r3
1000db7e:	4906      	ldr	r1, [pc, #24]	; (1000db98 <check_ConnData_emptyEntry+0x20>)
1000db80:	b2d8      	uxtb	r0, r3
1000db82:	1852      	adds	r2, r2, r1
1000db84:	8951      	ldrh	r1, [r2, #10]
1000db86:	4a05      	ldr	r2, [pc, #20]	; (1000db9c <check_ConnData_emptyEntry+0x24>)
1000db88:	4291      	cmp	r1, r2
1000db8a:	d003      	beq.n	1000db94 <check_ConnData_emptyEntry+0x1c>
1000db8c:	3301      	adds	r3, #1
1000db8e:	2b08      	cmp	r3, #8
1000db90:	d1f3      	bne.n	1000db7a <check_ConnData_emptyEntry+0x2>
1000db92:	1c18      	adds	r0, r3, #0
1000db94:	4770      	bx	lr
1000db96:	46c0      	nop			; (mov r8, r8)
1000db98:	10013ee6 	.word	0x10013ee6
1000db9c:	0000ffff 	.word	0x0000ffff

1000dba0 <gapc_cmp_evt>:
1000dba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dba2:	780b      	ldrb	r3, [r1, #0]
1000dba4:	1c05      	adds	r5, r0, #0
1000dba6:	1e58      	subs	r0, r3, #1
1000dba8:	784e      	ldrb	r6, [r1, #1]
1000dbaa:	280f      	cmp	r0, #15
1000dbac:	d85a      	bhi.n	1000dc64 <gapc_cmp_evt+0xc4>
1000dbae:	1c14      	adds	r4, r2, #0
1000dbb0:	f001 fac6 	bl	1000f140 <__gnu_thumb1_case_uqi>
1000dbb4:	5858440a 	.word	0x5858440a
1000dbb8:	4b584444 	.word	0x4b584444
1000dbbc:	0825122d 	.word	0x0825122d
1000dbc0:	3e395858 	.word	0x3e395858
1000dbc4:	203b      	movs	r0, #59	; 0x3b
1000dbc6:	e04e      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dbc8:	203b      	movs	r0, #59	; 0x3b
1000dbca:	2e00      	cmp	r6, #0
1000dbcc:	d04b      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dbce:	0a2d      	lsrs	r5, r5, #8
1000dbd0:	8015      	strh	r5, [r2, #0]
1000dbd2:	7096      	strb	r6, [r2, #2]
1000dbd4:	3835      	subs	r0, #53	; 0x35
1000dbd6:	e046      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dbd8:	466b      	mov	r3, sp
1000dbda:	1ddf      	adds	r7, r3, #7
1000dbdc:	2301      	movs	r3, #1
1000dbde:	0a2d      	lsrs	r5, r5, #8
1000dbe0:	703b      	strb	r3, [r7, #0]
1000dbe2:	1c28      	adds	r0, r5, #0
1000dbe4:	1c39      	adds	r1, r7, #0
1000dbe6:	4b20      	ldr	r3, [pc, #128]	; (1000dc68 <gapc_cmp_evt+0xc8>)
1000dbe8:	4798      	blx	r3
1000dbea:	2807      	cmp	r0, #7
1000dbec:	d803      	bhi.n	1000dbf6 <gapc_cmp_evt+0x56>
1000dbee:	783b      	ldrb	r3, [r7, #0]
1000dbf0:	203b      	movs	r0, #59	; 0x3b
1000dbf2:	2b00      	cmp	r3, #0
1000dbf4:	d037      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dbf6:	8065      	strh	r5, [r4, #2]
1000dbf8:	7126      	strb	r6, [r4, #4]
1000dbfa:	2009      	movs	r0, #9
1000dbfc:	e033      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dbfe:	203b      	movs	r0, #59	; 0x3b
1000dc00:	2e00      	cmp	r6, #0
1000dc02:	d030      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc04:	0a2d      	lsrs	r5, r5, #8
1000dc06:	8015      	strh	r5, [r2, #0]
1000dc08:	7096      	strb	r6, [r2, #2]
1000dc0a:	382d      	subs	r0, #45	; 0x2d
1000dc0c:	e02b      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc0e:	203b      	movs	r0, #59	; 0x3b
1000dc10:	2e00      	cmp	r6, #0
1000dc12:	d028      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc14:	2300      	movs	r3, #0
1000dc16:	0a2d      	lsrs	r5, r5, #8
1000dc18:	8015      	strh	r5, [r2, #0]
1000dc1a:	7096      	strb	r6, [r2, #2]
1000dc1c:	8093      	strh	r3, [r2, #4]
1000dc1e:	80d3      	strh	r3, [r2, #6]
1000dc20:	8113      	strh	r3, [r2, #8]
1000dc22:	3834      	subs	r0, #52	; 0x34
1000dc24:	e01f      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc26:	203b      	movs	r0, #59	; 0x3b
1000dc28:	2e00      	cmp	r6, #0
1000dc2a:	d01c      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc2c:	7216      	strb	r6, [r2, #8]
1000dc2e:	e003      	b.n	1000dc38 <gapc_cmp_evt+0x98>
1000dc30:	203b      	movs	r0, #59	; 0x3b
1000dc32:	2e00      	cmp	r6, #0
1000dc34:	d017      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc36:	7116      	strb	r6, [r2, #4]
1000dc38:	3812      	subs	r0, #18
1000dc3a:	e014      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc3c:	203b      	movs	r0, #59	; 0x3b
1000dc3e:	2e00      	cmp	r6, #0
1000dc40:	d011      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc42:	7093      	strb	r3, [r2, #2]
1000dc44:	70d6      	strb	r6, [r2, #3]
1000dc46:	382a      	subs	r0, #42	; 0x2a
1000dc48:	e00d      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc4a:	203b      	movs	r0, #59	; 0x3b
1000dc4c:	2e00      	cmp	r6, #0
1000dc4e:	d00a      	beq.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc50:	0a2d      	lsrs	r5, r5, #8
1000dc52:	7016      	strb	r6, [r2, #0]
1000dc54:	8055      	strh	r5, [r2, #2]
1000dc56:	1d10      	adds	r0, r2, #4
1000dc58:	2100      	movs	r1, #0
1000dc5a:	2205      	movs	r2, #5
1000dc5c:	4b03      	ldr	r3, [pc, #12]	; (1000dc6c <gapc_cmp_evt+0xcc>)
1000dc5e:	4798      	blx	r3
1000dc60:	2012      	movs	r0, #18
1000dc62:	e000      	b.n	1000dc66 <gapc_cmp_evt+0xc6>
1000dc64:	2000      	movs	r0, #0
1000dc66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dc68:	1000db3d 	.word	0x1000db3d
1000dc6c:	10010271 	.word	0x10010271

1000dc70 <gapc_connection_cfm_handler>:
1000dc70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc72:	b085      	sub	sp, #20
1000dc74:	1c1d      	adds	r5, r3, #0
1000dc76:	ab0a      	add	r3, sp, #40	; 0x28
1000dc78:	781b      	ldrb	r3, [r3, #0]
1000dc7a:	9201      	str	r2, [sp, #4]
1000dc7c:	9302      	str	r3, [sp, #8]
1000dc7e:	ab0b      	add	r3, sp, #44	; 0x2c
1000dc80:	781b      	ldrb	r3, [r3, #0]
1000dc82:	1c07      	adds	r7, r0, #0
1000dc84:	9303      	str	r3, [sp, #12]
1000dc86:	ab0c      	add	r3, sp, #48	; 0x30
1000dc88:	881a      	ldrh	r2, [r3, #0]
1000dc8a:	2302      	movs	r3, #2
1000dc8c:	1c0e      	adds	r6, r1, #0
1000dc8e:	4c23      	ldr	r4, [pc, #140]	; (1000dd1c <gapc_connection_cfm_handler+0xac>)
1000dc90:	1c39      	adds	r1, r7, #0
1000dc92:	7023      	strb	r3, [r4, #0]
1000dc94:	330c      	adds	r3, #12
1000dc96:	7063      	strb	r3, [r4, #1]
1000dc98:	70a3      	strb	r3, [r4, #2]
1000dc9a:	4b21      	ldr	r3, [pc, #132]	; (1000dd20 <gapc_connection_cfm_handler+0xb0>)
1000dc9c:	70e2      	strb	r2, [r4, #3]
1000dc9e:	881a      	ldrh	r2, [r3, #0]
1000dca0:	881b      	ldrh	r3, [r3, #0]
1000dca2:	7122      	strb	r2, [r4, #4]
1000dca4:	0a1b      	lsrs	r3, r3, #8
1000dca6:	4f1f      	ldr	r7, [pc, #124]	; (1000dd24 <gapc_connection_cfm_handler+0xb4>)
1000dca8:	2210      	movs	r2, #16
1000dcaa:	481f      	ldr	r0, [pc, #124]	; (1000dd28 <gapc_connection_cfm_handler+0xb8>)
1000dcac:	7163      	strb	r3, [r4, #5]
1000dcae:	47b8      	blx	r7
1000dcb0:	0a33      	lsrs	r3, r6, #8
1000dcb2:	7626      	strb	r6, [r4, #24]
1000dcb4:	7663      	strb	r3, [r4, #25]
1000dcb6:	9901      	ldr	r1, [sp, #4]
1000dcb8:	0c33      	lsrs	r3, r6, #16
1000dcba:	2210      	movs	r2, #16
1000dcbc:	0e36      	lsrs	r6, r6, #24
1000dcbe:	481b      	ldr	r0, [pc, #108]	; (1000dd2c <gapc_connection_cfm_handler+0xbc>)
1000dcc0:	76a3      	strb	r3, [r4, #26]
1000dcc2:	76e6      	strb	r6, [r4, #27]
1000dcc4:	47b8      	blx	r7
1000dcc6:	1c23      	adds	r3, r4, #0
1000dcc8:	332c      	adds	r3, #44	; 0x2c
1000dcca:	701d      	strb	r5, [r3, #0]
1000dccc:	1c23      	adds	r3, r4, #0
1000dcce:	0a2a      	lsrs	r2, r5, #8
1000dcd0:	332d      	adds	r3, #45	; 0x2d
1000dcd2:	701a      	strb	r2, [r3, #0]
1000dcd4:	1c23      	adds	r3, r4, #0
1000dcd6:	0c2a      	lsrs	r2, r5, #16
1000dcd8:	332e      	adds	r3, #46	; 0x2e
1000dcda:	701a      	strb	r2, [r3, #0]
1000dcdc:	1c23      	adds	r3, r4, #0
1000dcde:	0e2d      	lsrs	r5, r5, #24
1000dce0:	332f      	adds	r3, #47	; 0x2f
1000dce2:	466a      	mov	r2, sp
1000dce4:	701d      	strb	r5, [r3, #0]
1000dce6:	1c23      	adds	r3, r4, #0
1000dce8:	7a12      	ldrb	r2, [r2, #8]
1000dcea:	3330      	adds	r3, #48	; 0x30
1000dcec:	701a      	strb	r2, [r3, #0]
1000dcee:	1c23      	adds	r3, r4, #0
1000dcf0:	2500      	movs	r5, #0
1000dcf2:	3331      	adds	r3, #49	; 0x31
1000dcf4:	466a      	mov	r2, sp
1000dcf6:	701d      	strb	r5, [r3, #0]
1000dcf8:	1c23      	adds	r3, r4, #0
1000dcfa:	7b12      	ldrb	r2, [r2, #12]
1000dcfc:	3332      	adds	r3, #50	; 0x32
1000dcfe:	701a      	strb	r2, [r3, #0]
1000dd00:	1c23      	adds	r3, r4, #0
1000dd02:	3333      	adds	r3, #51	; 0x33
1000dd04:	701d      	strb	r5, [r3, #0]
1000dd06:	232c      	movs	r3, #44	; 0x2c
1000dd08:	1c20      	adds	r0, r4, #0
1000dd0a:	71a3      	strb	r3, [r4, #6]
1000dd0c:	2134      	movs	r1, #52	; 0x34
1000dd0e:	4b08      	ldr	r3, [pc, #32]	; (1000dd30 <gapc_connection_cfm_handler+0xc0>)
1000dd10:	71e5      	strb	r5, [r4, #7]
1000dd12:	4798      	blx	r3
1000dd14:	1c28      	adds	r0, r5, #0
1000dd16:	b005      	add	sp, #20
1000dd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd1a:	46c0      	nop			; (mov r8, r8)
1000dd1c:	10014254 	.word	0x10014254
1000dd20:	10013ee4 	.word	0x10013ee4
1000dd24:	1001025f 	.word	0x1001025f
1000dd28:	1001425c 	.word	0x1001425c
1000dd2c:	10014270 	.word	0x10014270
1000dd30:	1000d975 	.word	0x1000d975

1000dd34 <gapc_con_req_ind>:
1000dd34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd36:	7845      	ldrb	r5, [r0, #1]
1000dd38:	7803      	ldrb	r3, [r0, #0]
1000dd3a:	4c30      	ldr	r4, [pc, #192]	; (1000ddfc <gapc_con_req_ind+0xc8>)
1000dd3c:	022d      	lsls	r5, r5, #8
1000dd3e:	431d      	orrs	r5, r3
1000dd40:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000dd42:	78c3      	ldrb	r3, [r0, #3]
1000dd44:	7882      	ldrb	r2, [r0, #2]
1000dd46:	b08b      	sub	sp, #44	; 0x2c
1000dd48:	021b      	lsls	r3, r3, #8
1000dd4a:	431a      	orrs	r2, r3
1000dd4c:	466b      	mov	r3, sp
1000dd4e:	9205      	str	r2, [sp, #20]
1000dd50:	8a9b      	ldrh	r3, [r3, #20]
1000dd52:	2120      	movs	r1, #32
1000dd54:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000dd56:	7943      	ldrb	r3, [r0, #5]
1000dd58:	7902      	ldrb	r2, [r0, #4]
1000dd5a:	021b      	lsls	r3, r3, #8
1000dd5c:	431a      	orrs	r2, r3
1000dd5e:	466b      	mov	r3, sp
1000dd60:	9206      	str	r2, [sp, #24]
1000dd62:	8b1b      	ldrh	r3, [r3, #24]
1000dd64:	1c06      	adds	r6, r0, #0
1000dd66:	8623      	strh	r3, [r4, #48]	; 0x30
1000dd68:	79c3      	ldrb	r3, [r0, #7]
1000dd6a:	7982      	ldrb	r2, [r0, #6]
1000dd6c:	021b      	lsls	r3, r3, #8
1000dd6e:	431a      	orrs	r2, r3
1000dd70:	466b      	mov	r3, sp
1000dd72:	9207      	str	r2, [sp, #28]
1000dd74:	466a      	mov	r2, sp
1000dd76:	8b9b      	ldrh	r3, [r3, #28]
1000dd78:	1852      	adds	r2, r2, r1
1000dd7a:	8663      	strh	r3, [r4, #50]	; 0x32
1000dd7c:	7a43      	ldrb	r3, [r0, #9]
1000dd7e:	1c01      	adds	r1, r0, #0
1000dd80:	9308      	str	r3, [sp, #32]
1000dd82:	1c23      	adds	r3, r4, #0
1000dd84:	7812      	ldrb	r2, [r2, #0]
1000dd86:	3377      	adds	r3, #119	; 0x77
1000dd88:	3478      	adds	r4, #120	; 0x78
1000dd8a:	701a      	strb	r2, [r3, #0]
1000dd8c:	310a      	adds	r1, #10
1000dd8e:	2206      	movs	r2, #6
1000dd90:	4b1b      	ldr	r3, [pc, #108]	; (1000de00 <gapc_con_req_ind+0xcc>)
1000dd92:	1c20      	adds	r0, r4, #0
1000dd94:	4798      	blx	r3
1000dd96:	7c33      	ldrb	r3, [r6, #16]
1000dd98:	9309      	str	r3, [sp, #36]	; 0x24
1000dd9a:	4b1a      	ldr	r3, [pc, #104]	; (1000de04 <gapc_con_req_ind+0xd0>)
1000dd9c:	4798      	blx	r3
1000dd9e:	4e1a      	ldr	r6, [pc, #104]	; (1000de08 <gapc_con_req_ind+0xd4>)
1000dda0:	1e07      	subs	r7, r0, #0
1000dda2:	2f07      	cmp	r7, #7
1000dda4:	d81b      	bhi.n	1000ddde <gapc_con_req_ind+0xaa>
1000dda6:	2312      	movs	r3, #18
1000dda8:	4343      	muls	r3, r0
1000ddaa:	18f0      	adds	r0, r6, r3
1000ddac:	8145      	strh	r5, [r0, #10]
1000ddae:	4669      	mov	r1, sp
1000ddb0:	2524      	movs	r5, #36	; 0x24
1000ddb2:	1949      	adds	r1, r1, r5
1000ddb4:	7809      	ldrb	r1, [r1, #0]
1000ddb6:	2206      	movs	r2, #6
1000ddb8:	54f1      	strb	r1, [r6, r3]
1000ddba:	2120      	movs	r1, #32
1000ddbc:	466b      	mov	r3, sp
1000ddbe:	185b      	adds	r3, r3, r1
1000ddc0:	781b      	ldrb	r3, [r3, #0]
1000ddc2:	1c21      	adds	r1, r4, #0
1000ddc4:	7043      	strb	r3, [r0, #1]
1000ddc6:	466b      	mov	r3, sp
1000ddc8:	8a9b      	ldrh	r3, [r3, #20]
1000ddca:	3002      	adds	r0, #2
1000ddcc:	8143      	strh	r3, [r0, #10]
1000ddce:	466b      	mov	r3, sp
1000ddd0:	8b1b      	ldrh	r3, [r3, #24]
1000ddd2:	8183      	strh	r3, [r0, #12]
1000ddd4:	466b      	mov	r3, sp
1000ddd6:	8b9b      	ldrh	r3, [r3, #28]
1000ddd8:	81c3      	strh	r3, [r0, #14]
1000ddda:	4b09      	ldr	r3, [pc, #36]	; (1000de00 <gapc_con_req_ind+0xcc>)
1000dddc:	4798      	blx	r3
1000ddde:	2112      	movs	r1, #18
1000dde0:	2300      	movs	r3, #0
1000dde2:	434f      	muls	r7, r1
1000dde4:	9300      	str	r3, [sp, #0]
1000dde6:	9301      	str	r3, [sp, #4]
1000dde8:	19f6      	adds	r6, r6, r7
1000ddea:	8971      	ldrh	r1, [r6, #10]
1000ddec:	4a07      	ldr	r2, [pc, #28]	; (1000de0c <gapc_con_req_ind+0xd8>)
1000ddee:	9102      	str	r1, [sp, #8]
1000ddf0:	1c10      	adds	r0, r2, #0
1000ddf2:	1c19      	adds	r1, r3, #0
1000ddf4:	4c06      	ldr	r4, [pc, #24]	; (1000de10 <gapc_con_req_ind+0xdc>)
1000ddf6:	47a0      	blx	r4
1000ddf8:	b00b      	add	sp, #44	; 0x2c
1000ddfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddfc:	10013f76 	.word	0x10013f76
1000de00:	1001025f 	.word	0x1001025f
1000de04:	1000db79 	.word	0x1000db79
1000de08:	10013ee6 	.word	0x10013ee6
1000de0c:	100131ba 	.word	0x100131ba
1000de10:	1000dc71 	.word	0x1000dc71

1000de14 <gapc_disconnect_cmd_handler>:
1000de14:	2204      	movs	r2, #4
1000de16:	b510      	push	{r4, lr}
1000de18:	4b0c      	ldr	r3, [pc, #48]	; (1000de4c <gapc_disconnect_cmd_handler+0x38>)
1000de1a:	2400      	movs	r4, #0
1000de1c:	701a      	strb	r2, [r3, #0]
1000de1e:	320a      	adds	r2, #10
1000de20:	705a      	strb	r2, [r3, #1]
1000de22:	709a      	strb	r2, [r3, #2]
1000de24:	4a0a      	ldr	r2, [pc, #40]	; (1000de50 <gapc_disconnect_cmd_handler+0x3c>)
1000de26:	70d9      	strb	r1, [r3, #3]
1000de28:	8811      	ldrh	r1, [r2, #0]
1000de2a:	8812      	ldrh	r2, [r2, #0]
1000de2c:	7119      	strb	r1, [r3, #4]
1000de2e:	0a12      	lsrs	r2, r2, #8
1000de30:	715a      	strb	r2, [r3, #5]
1000de32:	2201      	movs	r2, #1
1000de34:	721a      	strb	r2, [r3, #8]
1000de36:	1892      	adds	r2, r2, r2
1000de38:	7258      	strb	r0, [r3, #9]
1000de3a:	719a      	strb	r2, [r3, #6]
1000de3c:	71dc      	strb	r4, [r3, #7]
1000de3e:	1c18      	adds	r0, r3, #0
1000de40:	210a      	movs	r1, #10
1000de42:	4b04      	ldr	r3, [pc, #16]	; (1000de54 <gapc_disconnect_cmd_handler+0x40>)
1000de44:	4798      	blx	r3
1000de46:	1c20      	adds	r0, r4, #0
1000de48:	bd10      	pop	{r4, pc}
1000de4a:	46c0      	nop			; (mov r8, r8)
1000de4c:	10014254 	.word	0x10014254
1000de50:	10013ee4 	.word	0x10013ee4
1000de54:	1000d975 	.word	0x1000d975

1000de58 <gapc_disconnect_ind>:
1000de58:	1c02      	adds	r2, r0, #0
1000de5a:	b508      	push	{r3, lr}
1000de5c:	7843      	ldrb	r3, [r0, #1]
1000de5e:	7800      	ldrb	r0, [r0, #0]
1000de60:	021b      	lsls	r3, r3, #8
1000de62:	4318      	orrs	r0, r3
1000de64:	8008      	strh	r0, [r1, #0]
1000de66:	7893      	ldrb	r3, [r2, #2]
1000de68:	708b      	strb	r3, [r1, #2]
1000de6a:	2100      	movs	r1, #0
1000de6c:	4b05      	ldr	r3, [pc, #20]	; (1000de84 <gapc_disconnect_ind+0x2c>)
1000de6e:	4798      	blx	r3
1000de70:	2807      	cmp	r0, #7
1000de72:	d806      	bhi.n	1000de82 <gapc_disconnect_ind+0x2a>
1000de74:	2312      	movs	r3, #18
1000de76:	4358      	muls	r0, r3
1000de78:	4b03      	ldr	r3, [pc, #12]	; (1000de88 <gapc_disconnect_ind+0x30>)
1000de7a:	1818      	adds	r0, r3, r0
1000de7c:	2301      	movs	r3, #1
1000de7e:	425b      	negs	r3, r3
1000de80:	8143      	strh	r3, [r0, #10]
1000de82:	bd08      	pop	{r3, pc}
1000de84:	1000db3d 	.word	0x1000db3d
1000de88:	10013ee6 	.word	0x10013ee6

1000de8c <gapc_bond_cmd_handler>:
1000de8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de8e:	9300      	str	r3, [sp, #0]
1000de90:	2312      	movs	r3, #18
1000de92:	1c04      	adds	r4, r0, #0
1000de94:	a808      	add	r0, sp, #32
1000de96:	7807      	ldrb	r7, [r0, #0]
1000de98:	a809      	add	r0, sp, #36	; 0x24
1000de9a:	7806      	ldrb	r6, [r0, #0]
1000de9c:	a80a      	add	r0, sp, #40	; 0x28
1000de9e:	7805      	ldrb	r5, [r0, #0]
1000dea0:	a80b      	add	r0, sp, #44	; 0x2c
1000dea2:	7800      	ldrb	r0, [r0, #0]
1000dea4:	9001      	str	r0, [sp, #4]
1000dea6:	4810      	ldr	r0, [pc, #64]	; (1000dee8 <gapc_bond_cmd_handler+0x5c>)
1000dea8:	7003      	strb	r3, [r0, #0]
1000deaa:	230e      	movs	r3, #14
1000deac:	70c4      	strb	r4, [r0, #3]
1000deae:	4c0f      	ldr	r4, [pc, #60]	; (1000deec <gapc_bond_cmd_handler+0x60>)
1000deb0:	7043      	strb	r3, [r0, #1]
1000deb2:	7083      	strb	r3, [r0, #2]
1000deb4:	8823      	ldrh	r3, [r4, #0]
1000deb6:	8824      	ldrh	r4, [r4, #0]
1000deb8:	7103      	strb	r3, [r0, #4]
1000deba:	466b      	mov	r3, sp
1000debc:	781b      	ldrb	r3, [r3, #0]
1000debe:	0a24      	lsrs	r4, r4, #8
1000dec0:	72c3      	strb	r3, [r0, #11]
1000dec2:	466b      	mov	r3, sp
1000dec4:	791b      	ldrb	r3, [r3, #4]
1000dec6:	7144      	strb	r4, [r0, #5]
1000dec8:	73c3      	strb	r3, [r0, #15]
1000deca:	2308      	movs	r3, #8
1000decc:	7183      	strb	r3, [r0, #6]
1000dece:	2300      	movs	r3, #0
1000ded0:	240a      	movs	r4, #10
1000ded2:	7241      	strb	r1, [r0, #9]
1000ded4:	71c3      	strb	r3, [r0, #7]
1000ded6:	2110      	movs	r1, #16
1000ded8:	4b05      	ldr	r3, [pc, #20]	; (1000def0 <gapc_bond_cmd_handler+0x64>)
1000deda:	7307      	strb	r7, [r0, #12]
1000dedc:	7346      	strb	r6, [r0, #13]
1000dede:	7385      	strb	r5, [r0, #14]
1000dee0:	7204      	strb	r4, [r0, #8]
1000dee2:	7282      	strb	r2, [r0, #10]
1000dee4:	4798      	blx	r3
1000dee6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dee8:	10014254 	.word	0x10014254
1000deec:	10013ee4 	.word	0x10013ee4
1000def0:	1000d975 	.word	0x1000d975

1000def4 <gapc_bond_ind>:
1000def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000def6:	780e      	ldrb	r6, [r1, #0]
1000def8:	1c03      	adds	r3, r0, #0
1000defa:	1eb0      	subs	r0, r6, #2
1000defc:	2805      	cmp	r0, #5
1000defe:	d85d      	bhi.n	1000dfbc <gapc_bond_ind+0xc8>
1000df00:	1c15      	adds	r5, r2, #0
1000df02:	1c0c      	adds	r4, r1, #0
1000df04:	f001 f91c 	bl	1000f140 <__gnu_thumb1_case_uqi>
1000df08:	2f5a030d 	.word	0x2f5a030d
1000df0c:	4740      	.short	0x4740
1000df0e:	2009      	movs	r0, #9
1000df10:	2a00      	cmp	r2, #0
1000df12:	d054      	beq.n	1000dfbe <gapc_bond_ind+0xca>
1000df14:	0a1b      	lsrs	r3, r3, #8
1000df16:	8053      	strh	r3, [r2, #2]
1000df18:	788b      	ldrb	r3, [r1, #2]
1000df1a:	4829      	ldr	r0, [pc, #164]	; (1000dfc0 <gapc_bond_ind+0xcc>)
1000df1c:	7113      	strb	r3, [r2, #4]
1000df1e:	2100      	movs	r1, #0
1000df20:	e01c      	b.n	1000df5c <gapc_bond_ind+0x68>
1000df22:	2009      	movs	r0, #9
1000df24:	2a00      	cmp	r2, #0
1000df26:	d04a      	beq.n	1000dfbe <gapc_bond_ind+0xca>
1000df28:	4c25      	ldr	r4, [pc, #148]	; (1000dfc0 <gapc_bond_ind+0xcc>)
1000df2a:	0a1b      	lsrs	r3, r3, #8
1000df2c:	8053      	strh	r3, [r2, #2]
1000df2e:	788b      	ldrb	r3, [r1, #2]
1000df30:	2700      	movs	r7, #0
1000df32:	1c10      	adds	r0, r2, #0
1000df34:	1c21      	adds	r1, r4, #0
1000df36:	7013      	strb	r3, [r2, #0]
1000df38:	4e22      	ldr	r6, [pc, #136]	; (1000dfc4 <gapc_bond_ind+0xd0>)
1000df3a:	7117      	strb	r7, [r2, #4]
1000df3c:	312e      	adds	r1, #46	; 0x2e
1000df3e:	2217      	movs	r2, #23
1000df40:	3032      	adds	r0, #50	; 0x32
1000df42:	47b0      	blx	r6
1000df44:	1c28      	adds	r0, r5, #0
1000df46:	1c21      	adds	r1, r4, #0
1000df48:	2210      	movs	r2, #16
1000df4a:	311e      	adds	r1, #30
1000df4c:	3022      	adds	r0, #34	; 0x22
1000df4e:	47b0      	blx	r6
1000df50:	1ca1      	adds	r1, r4, #2
1000df52:	1da8      	adds	r0, r5, #6
1000df54:	221c      	movs	r2, #28
1000df56:	47b0      	blx	r6
1000df58:	1c20      	adds	r0, r4, #0
1000df5a:	1c39      	adds	r1, r7, #0
1000df5c:	2246      	movs	r2, #70	; 0x46
1000df5e:	4b1a      	ldr	r3, [pc, #104]	; (1000dfc8 <gapc_bond_ind+0xd4>)
1000df60:	4798      	blx	r3
1000df62:	2009      	movs	r0, #9
1000df64:	e02b      	b.n	1000dfbe <gapc_bond_ind+0xca>
1000df66:	4d16      	ldr	r5, [pc, #88]	; (1000dfc0 <gapc_bond_ind+0xcc>)
1000df68:	3102      	adds	r1, #2
1000df6a:	1c28      	adds	r0, r5, #0
1000df6c:	2210      	movs	r2, #16
1000df6e:	4e15      	ldr	r6, [pc, #84]	; (1000dfc4 <gapc_bond_ind+0xd0>)
1000df70:	302e      	adds	r0, #46	; 0x2e
1000df72:	47b0      	blx	r6
1000df74:	1c28      	adds	r0, r5, #0
1000df76:	1c21      	adds	r1, r4, #0
1000df78:	303f      	adds	r0, #63	; 0x3f
1000df7a:	3112      	adds	r1, #18
1000df7c:	2206      	movs	r2, #6
1000df7e:	47b0      	blx	r6
1000df80:	7e23      	ldrb	r3, [r4, #24]
1000df82:	353e      	adds	r5, #62	; 0x3e
1000df84:	702b      	strb	r3, [r5, #0]
1000df86:	e019      	b.n	1000dfbc <gapc_bond_ind+0xc8>
1000df88:	480d      	ldr	r0, [pc, #52]	; (1000dfc0 <gapc_bond_ind+0xcc>)
1000df8a:	3102      	adds	r1, #2
1000df8c:	2210      	movs	r2, #16
1000df8e:	4b0d      	ldr	r3, [pc, #52]	; (1000dfc4 <gapc_bond_ind+0xd0>)
1000df90:	301e      	adds	r0, #30
1000df92:	4798      	blx	r3
1000df94:	e012      	b.n	1000dfbc <gapc_bond_ind+0xc8>
1000df96:	4d0a      	ldr	r5, [pc, #40]	; (1000dfc0 <gapc_bond_ind+0xcc>)
1000df98:	3102      	adds	r1, #2
1000df9a:	2210      	movs	r2, #16
1000df9c:	4e09      	ldr	r6, [pc, #36]	; (1000dfc4 <gapc_bond_ind+0xd0>)
1000df9e:	1ca8      	adds	r0, r5, #2
1000dfa0:	47b0      	blx	r6
1000dfa2:	1c28      	adds	r0, r5, #0
1000dfa4:	1c21      	adds	r1, r4, #0
1000dfa6:	7ce3      	ldrb	r3, [r4, #19]
1000dfa8:	7ca2      	ldrb	r2, [r4, #18]
1000dfaa:	021b      	lsls	r3, r3, #8
1000dfac:	4313      	orrs	r3, r2
1000dfae:	3014      	adds	r0, #20
1000dfb0:	3114      	adds	r1, #20
1000dfb2:	2208      	movs	r2, #8
1000dfb4:	826b      	strh	r3, [r5, #18]
1000dfb6:	47b0      	blx	r6
1000dfb8:	7f23      	ldrb	r3, [r4, #28]
1000dfba:	772b      	strb	r3, [r5, #28]
1000dfbc:	2000      	movs	r0, #0
1000dfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dfc0:	10013174 	.word	0x10013174
1000dfc4:	1001025f 	.word	0x1001025f
1000dfc8:	10010271 	.word	0x10010271

1000dfcc <gapc_bond_req_ind>:
1000dfcc:	b570      	push	{r4, r5, r6, lr}
1000dfce:	780c      	ldrb	r4, [r1, #0]
1000dfd0:	1c03      	adds	r3, r0, #0
1000dfd2:	7849      	ldrb	r1, [r1, #1]
1000dfd4:	2c07      	cmp	r4, #7
1000dfd6:	d85c      	bhi.n	1000e092 <gapc_bond_req_ind+0xc6>
1000dfd8:	1c20      	adds	r0, r4, #0
1000dfda:	f001 f8b1 	bl	1000f140 <__gnu_thumb1_case_uqi>
1000dfde:	5a04      	.short	0x5a04
1000dfe0:	5a0b5a5a 	.word	0x5a0b5a5a
1000dfe4:	1f1f      	.short	0x1f1f
1000dfe6:	200a      	movs	r0, #10
1000dfe8:	2a00      	cmp	r2, #0
1000dfea:	d053      	beq.n	1000e094 <gapc_bond_req_ind+0xc8>
1000dfec:	0a1b      	lsrs	r3, r3, #8
1000dfee:	8013      	strh	r3, [r2, #0]
1000dff0:	7091      	strb	r1, [r2, #2]
1000dff2:	e04f      	b.n	1000e094 <gapc_bond_req_ind+0xc8>
1000dff4:	2a00      	cmp	r2, #0
1000dff6:	d00b      	beq.n	1000e010 <gapc_bond_req_ind+0x44>
1000dff8:	0a1b      	lsrs	r3, r3, #8
1000dffa:	8013      	strh	r3, [r2, #0]
1000dffc:	2900      	cmp	r1, #0
1000dffe:	d102      	bne.n	1000e006 <gapc_bond_req_ind+0x3a>
1000e000:	2301      	movs	r3, #1
1000e002:	7093      	strb	r3, [r2, #2]
1000e004:	e004      	b.n	1000e010 <gapc_bond_req_ind+0x44>
1000e006:	2300      	movs	r3, #0
1000e008:	7093      	strb	r3, [r2, #2]
1000e00a:	2902      	cmp	r1, #2
1000e00c:	d102      	bne.n	1000e014 <gapc_bond_req_ind+0x48>
1000e00e:	70d3      	strb	r3, [r2, #3]
1000e010:	200c      	movs	r0, #12
1000e012:	e03f      	b.n	1000e094 <gapc_bond_req_ind+0xc8>
1000e014:	2901      	cmp	r1, #1
1000e016:	d1fb      	bne.n	1000e010 <gapc_bond_req_ind+0x44>
1000e018:	70d1      	strb	r1, [r2, #3]
1000e01a:	e7f9      	b.n	1000e010 <gapc_bond_req_ind+0x44>
1000e01c:	2214      	movs	r2, #20
1000e01e:	481e      	ldr	r0, [pc, #120]	; (1000e098 <gapc_bond_req_ind+0xcc>)
1000e020:	0a1b      	lsrs	r3, r3, #8
1000e022:	70c3      	strb	r3, [r0, #3]
1000e024:	4b1d      	ldr	r3, [pc, #116]	; (1000e09c <gapc_bond_req_ind+0xd0>)
1000e026:	7002      	strb	r2, [r0, #0]
1000e028:	3a06      	subs	r2, #6
1000e02a:	7042      	strb	r2, [r0, #1]
1000e02c:	7082      	strb	r2, [r0, #2]
1000e02e:	881a      	ldrh	r2, [r3, #0]
1000e030:	881b      	ldrh	r3, [r3, #0]
1000e032:	4e1b      	ldr	r6, [pc, #108]	; (1000e0a0 <gapc_bond_req_ind+0xd4>)
1000e034:	0a1b      	lsrs	r3, r3, #8
1000e036:	7143      	strb	r3, [r0, #5]
1000e038:	2301      	movs	r3, #1
1000e03a:	7102      	strb	r2, [r0, #4]
1000e03c:	7204      	strb	r4, [r0, #8]
1000e03e:	7243      	strb	r3, [r0, #9]
1000e040:	1c05      	adds	r5, r0, #0
1000e042:	1c31      	adds	r1, r6, #0
1000e044:	300a      	adds	r0, #10
1000e046:	2c07      	cmp	r4, #7
1000e048:	d116      	bne.n	1000e078 <gapc_bond_req_ind+0xac>
1000e04a:	317e      	adds	r1, #126	; 0x7e
1000e04c:	2210      	movs	r2, #16
1000e04e:	4c15      	ldr	r4, [pc, #84]	; (1000e0a4 <gapc_bond_req_ind+0xd8>)
1000e050:	47a0      	blx	r4
1000e052:	1c33      	adds	r3, r6, #0
1000e054:	1c31      	adds	r1, r6, #0
1000e056:	1c28      	adds	r0, r5, #0
1000e058:	338e      	adds	r3, #142	; 0x8e
1000e05a:	881b      	ldrh	r3, [r3, #0]
1000e05c:	3190      	adds	r1, #144	; 0x90
1000e05e:	76ab      	strb	r3, [r5, #26]
1000e060:	2208      	movs	r2, #8
1000e062:	0a1b      	lsrs	r3, r3, #8
1000e064:	301c      	adds	r0, #28
1000e066:	76eb      	strb	r3, [r5, #27]
1000e068:	47a0      	blx	r4
1000e06a:	1c31      	adds	r1, r6, #0
1000e06c:	3198      	adds	r1, #152	; 0x98
1000e06e:	780a      	ldrb	r2, [r1, #0]
1000e070:	1d6b      	adds	r3, r5, #5
1000e072:	77da      	strb	r2, [r3, #31]
1000e074:	2125      	movs	r1, #37	; 0x25
1000e076:	e004      	b.n	1000e082 <gapc_bond_req_ind+0xb6>
1000e078:	319a      	adds	r1, #154	; 0x9a
1000e07a:	2210      	movs	r2, #16
1000e07c:	4b09      	ldr	r3, [pc, #36]	; (1000e0a4 <gapc_bond_req_ind+0xd8>)
1000e07e:	4798      	blx	r3
1000e080:	211a      	movs	r1, #26
1000e082:	1c0b      	adds	r3, r1, #0
1000e084:	2400      	movs	r4, #0
1000e086:	3b08      	subs	r3, #8
1000e088:	71ab      	strb	r3, [r5, #6]
1000e08a:	1c28      	adds	r0, r5, #0
1000e08c:	4b06      	ldr	r3, [pc, #24]	; (1000e0a8 <gapc_bond_req_ind+0xdc>)
1000e08e:	71ec      	strb	r4, [r5, #7]
1000e090:	4798      	blx	r3
1000e092:	2000      	movs	r0, #0
1000e094:	bd70      	pop	{r4, r5, r6, pc}
1000e096:	46c0      	nop			; (mov r8, r8)
1000e098:	10014254 	.word	0x10014254
1000e09c:	10013ee4 	.word	0x10013ee4
1000e0a0:	10013f76 	.word	0x10013f76
1000e0a4:	1001025f 	.word	0x1001025f
1000e0a8:	1000d975 	.word	0x1000d975

1000e0ac <gapc_bond_cfm_handler_pair_resp>:
1000e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0ae:	b085      	sub	sp, #20
1000e0b0:	1c07      	adds	r7, r0, #0
1000e0b2:	a80a      	add	r0, sp, #40	; 0x28
1000e0b4:	7806      	ldrb	r6, [r0, #0]
1000e0b6:	a80b      	add	r0, sp, #44	; 0x2c
1000e0b8:	7805      	ldrb	r5, [r0, #0]
1000e0ba:	a80c      	add	r0, sp, #48	; 0x30
1000e0bc:	7800      	ldrb	r0, [r0, #0]
1000e0be:	2414      	movs	r4, #20
1000e0c0:	9002      	str	r0, [sp, #8]
1000e0c2:	a80d      	add	r0, sp, #52	; 0x34
1000e0c4:	7800      	ldrb	r0, [r0, #0]
1000e0c6:	9301      	str	r3, [sp, #4]
1000e0c8:	9003      	str	r0, [sp, #12]
1000e0ca:	a80e      	add	r0, sp, #56	; 0x38
1000e0cc:	8800      	ldrh	r0, [r0, #0]
1000e0ce:	4684      	mov	ip, r0
1000e0d0:	4812      	ldr	r0, [pc, #72]	; (1000e11c <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e0d2:	7004      	strb	r4, [r0, #0]
1000e0d4:	3c06      	subs	r4, #6
1000e0d6:	7044      	strb	r4, [r0, #1]
1000e0d8:	7084      	strb	r4, [r0, #2]
1000e0da:	4664      	mov	r4, ip
1000e0dc:	70c4      	strb	r4, [r0, #3]
1000e0de:	4c10      	ldr	r4, [pc, #64]	; (1000e120 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e0e0:	7247      	strb	r7, [r0, #9]
1000e0e2:	8823      	ldrh	r3, [r4, #0]
1000e0e4:	8824      	ldrh	r4, [r4, #0]
1000e0e6:	7103      	strb	r3, [r0, #4]
1000e0e8:	466b      	mov	r3, sp
1000e0ea:	791b      	ldrb	r3, [r3, #4]
1000e0ec:	0a24      	lsrs	r4, r4, #8
1000e0ee:	7303      	strb	r3, [r0, #12]
1000e0f0:	466b      	mov	r3, sp
1000e0f2:	7a1b      	ldrb	r3, [r3, #8]
1000e0f4:	7144      	strb	r4, [r0, #5]
1000e0f6:	73c3      	strb	r3, [r0, #15]
1000e0f8:	466b      	mov	r3, sp
1000e0fa:	7b1b      	ldrb	r3, [r3, #12]
1000e0fc:	2401      	movs	r4, #1
1000e0fe:	7403      	strb	r3, [r0, #16]
1000e100:	2309      	movs	r3, #9
1000e102:	7183      	strb	r3, [r0, #6]
1000e104:	2300      	movs	r3, #0
1000e106:	7204      	strb	r4, [r0, #8]
1000e108:	7281      	strb	r1, [r0, #10]
1000e10a:	72c2      	strb	r2, [r0, #11]
1000e10c:	7346      	strb	r6, [r0, #13]
1000e10e:	7385      	strb	r5, [r0, #14]
1000e110:	71c3      	strb	r3, [r0, #7]
1000e112:	2111      	movs	r1, #17
1000e114:	4b03      	ldr	r3, [pc, #12]	; (1000e124 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e116:	4798      	blx	r3
1000e118:	b005      	add	sp, #20
1000e11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e11c:	10014254 	.word	0x10014254
1000e120:	10013ee4 	.word	0x10013ee4
1000e124:	1000d975 	.word	0x1000d975

1000e128 <gapc_bond_cfm_handler_key_exch>:
1000e128:	b538      	push	{r3, r4, r5, lr}
1000e12a:	2514      	movs	r5, #20
1000e12c:	4c0d      	ldr	r4, [pc, #52]	; (1000e164 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e12e:	70e3      	strb	r3, [r4, #3]
1000e130:	4b0d      	ldr	r3, [pc, #52]	; (1000e168 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e132:	7025      	strb	r5, [r4, #0]
1000e134:	3d06      	subs	r5, #6
1000e136:	7065      	strb	r5, [r4, #1]
1000e138:	70a5      	strb	r5, [r4, #2]
1000e13a:	881d      	ldrh	r5, [r3, #0]
1000e13c:	881b      	ldrh	r3, [r3, #0]
1000e13e:	7220      	strb	r0, [r4, #8]
1000e140:	0a1b      	lsrs	r3, r3, #8
1000e142:	7163      	strb	r3, [r4, #5]
1000e144:	7261      	strb	r1, [r4, #9]
1000e146:	4b09      	ldr	r3, [pc, #36]	; (1000e16c <gapc_bond_cfm_handler_key_exch+0x44>)
1000e148:	1c11      	adds	r1, r2, #0
1000e14a:	4809      	ldr	r0, [pc, #36]	; (1000e170 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e14c:	2210      	movs	r2, #16
1000e14e:	7125      	strb	r5, [r4, #4]
1000e150:	4798      	blx	r3
1000e152:	2312      	movs	r3, #18
1000e154:	71a3      	strb	r3, [r4, #6]
1000e156:	2300      	movs	r3, #0
1000e158:	1c20      	adds	r0, r4, #0
1000e15a:	71e3      	strb	r3, [r4, #7]
1000e15c:	211a      	movs	r1, #26
1000e15e:	4b05      	ldr	r3, [pc, #20]	; (1000e174 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e160:	4798      	blx	r3
1000e162:	bd38      	pop	{r3, r4, r5, pc}
1000e164:	10014254 	.word	0x10014254
1000e168:	10013ee4 	.word	0x10013ee4
1000e16c:	1001025f 	.word	0x1001025f
1000e170:	1001425e 	.word	0x1001425e
1000e174:	1000d975 	.word	0x1000d975

1000e178 <gapc_encrypt_cmd_handler>:
1000e178:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e17a:	2500      	movs	r5, #0
1000e17c:	b089      	sub	sp, #36	; 0x24
1000e17e:	9306      	str	r3, [sp, #24]
1000e180:	ab0e      	add	r3, sp, #56	; 0x38
1000e182:	781b      	ldrb	r3, [r3, #0]
1000e184:	1c17      	adds	r7, r2, #0
1000e186:	9307      	str	r3, [sp, #28]
1000e188:	ab0f      	add	r3, sp, #60	; 0x3c
1000e18a:	781b      	ldrb	r3, [r3, #0]
1000e18c:	4a19      	ldr	r2, [pc, #100]	; (1000e1f4 <gapc_encrypt_cmd_handler+0x7c>)
1000e18e:	1c06      	adds	r6, r0, #0
1000e190:	9105      	str	r1, [sp, #20]
1000e192:	9300      	str	r3, [sp, #0]
1000e194:	9002      	str	r0, [sp, #8]
1000e196:	1c29      	adds	r1, r5, #0
1000e198:	1c2b      	adds	r3, r5, #0
1000e19a:	9501      	str	r5, [sp, #4]
1000e19c:	1c10      	adds	r0, r2, #0
1000e19e:	4c16      	ldr	r4, [pc, #88]	; (1000e1f8 <gapc_encrypt_cmd_handler+0x80>)
1000e1a0:	47a0      	blx	r4
1000e1a2:	2316      	movs	r3, #22
1000e1a4:	4c15      	ldr	r4, [pc, #84]	; (1000e1fc <gapc_encrypt_cmd_handler+0x84>)
1000e1a6:	9905      	ldr	r1, [sp, #20]
1000e1a8:	7023      	strb	r3, [r4, #0]
1000e1aa:	3b08      	subs	r3, #8
1000e1ac:	7063      	strb	r3, [r4, #1]
1000e1ae:	70a3      	strb	r3, [r4, #2]
1000e1b0:	4b13      	ldr	r3, [pc, #76]	; (1000e200 <gapc_encrypt_cmd_handler+0x88>)
1000e1b2:	70e6      	strb	r6, [r4, #3]
1000e1b4:	881a      	ldrh	r2, [r3, #0]
1000e1b6:	881b      	ldrh	r3, [r3, #0]
1000e1b8:	7122      	strb	r2, [r4, #4]
1000e1ba:	0a1b      	lsrs	r3, r3, #8
1000e1bc:	7163      	strb	r3, [r4, #5]
1000e1be:	230b      	movs	r3, #11
1000e1c0:	4e10      	ldr	r6, [pc, #64]	; (1000e204 <gapc_encrypt_cmd_handler+0x8c>)
1000e1c2:	2210      	movs	r2, #16
1000e1c4:	4810      	ldr	r0, [pc, #64]	; (1000e208 <gapc_encrypt_cmd_handler+0x90>)
1000e1c6:	7223      	strb	r3, [r4, #8]
1000e1c8:	7265      	strb	r5, [r4, #9]
1000e1ca:	47b0      	blx	r6
1000e1cc:	0a3b      	lsrs	r3, r7, #8
1000e1ce:	9906      	ldr	r1, [sp, #24]
1000e1d0:	2208      	movs	r2, #8
1000e1d2:	480e      	ldr	r0, [pc, #56]	; (1000e20c <gapc_encrypt_cmd_handler+0x94>)
1000e1d4:	76e3      	strb	r3, [r4, #27]
1000e1d6:	76a7      	strb	r7, [r4, #26]
1000e1d8:	47b0      	blx	r6
1000e1da:	466a      	mov	r2, sp
1000e1dc:	7f12      	ldrb	r2, [r2, #28]
1000e1de:	1d63      	adds	r3, r4, #5
1000e1e0:	77da      	strb	r2, [r3, #31]
1000e1e2:	231d      	movs	r3, #29
1000e1e4:	1c20      	adds	r0, r4, #0
1000e1e6:	71a3      	strb	r3, [r4, #6]
1000e1e8:	2125      	movs	r1, #37	; 0x25
1000e1ea:	4b09      	ldr	r3, [pc, #36]	; (1000e210 <gapc_encrypt_cmd_handler+0x98>)
1000e1ec:	71e5      	strb	r5, [r4, #7]
1000e1ee:	4798      	blx	r3
1000e1f0:	b009      	add	sp, #36	; 0x24
1000e1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1f4:	10013154 	.word	0x10013154
1000e1f8:	1000dc71 	.word	0x1000dc71
1000e1fc:	10014254 	.word	0x10014254
1000e200:	10013ee4 	.word	0x10013ee4
1000e204:	1001025f 	.word	0x1001025f
1000e208:	1001425e 	.word	0x1001425e
1000e20c:	10014270 	.word	0x10014270
1000e210:	1000d975 	.word	0x1000d975

1000e214 <gapc_encrypt_req_ind>:
1000e214:	b508      	push	{r3, lr}
1000e216:	0a00      	lsrs	r0, r0, #8
1000e218:	8010      	strh	r0, [r2, #0]
1000e21a:	784b      	ldrb	r3, [r1, #1]
1000e21c:	7808      	ldrb	r0, [r1, #0]
1000e21e:	021b      	lsls	r3, r3, #8
1000e220:	4303      	orrs	r3, r0
1000e222:	8053      	strh	r3, [r2, #2]
1000e224:	1d10      	adds	r0, r2, #4
1000e226:	3102      	adds	r1, #2
1000e228:	2208      	movs	r2, #8
1000e22a:	4b01      	ldr	r3, [pc, #4]	; (1000e230 <gapc_encrypt_req_ind+0x1c>)
1000e22c:	4798      	blx	r3
1000e22e:	bd08      	pop	{r3, pc}
1000e230:	1001025f 	.word	0x1001025f

1000e234 <gapc_encrypt_cfm_handler>:
1000e234:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e236:	2500      	movs	r5, #0
1000e238:	b087      	sub	sp, #28
1000e23a:	9304      	str	r3, [sp, #16]
1000e23c:	ab0c      	add	r3, sp, #48	; 0x30
1000e23e:	781b      	ldrb	r3, [r3, #0]
1000e240:	1c17      	adds	r7, r2, #0
1000e242:	4a15      	ldr	r2, [pc, #84]	; (1000e298 <gapc_encrypt_cfm_handler+0x64>)
1000e244:	1c06      	adds	r6, r0, #0
1000e246:	9305      	str	r3, [sp, #20]
1000e248:	9100      	str	r1, [sp, #0]
1000e24a:	9002      	str	r0, [sp, #8]
1000e24c:	1c29      	adds	r1, r5, #0
1000e24e:	1c2b      	adds	r3, r5, #0
1000e250:	9501      	str	r5, [sp, #4]
1000e252:	1c10      	adds	r0, r2, #0
1000e254:	4c11      	ldr	r4, [pc, #68]	; (1000e29c <gapc_encrypt_cfm_handler+0x68>)
1000e256:	47a0      	blx	r4
1000e258:	2318      	movs	r3, #24
1000e25a:	4c11      	ldr	r4, [pc, #68]	; (1000e2a0 <gapc_encrypt_cfm_handler+0x6c>)
1000e25c:	9904      	ldr	r1, [sp, #16]
1000e25e:	7023      	strb	r3, [r4, #0]
1000e260:	3b0a      	subs	r3, #10
1000e262:	7063      	strb	r3, [r4, #1]
1000e264:	70a3      	strb	r3, [r4, #2]
1000e266:	4b0f      	ldr	r3, [pc, #60]	; (1000e2a4 <gapc_encrypt_cfm_handler+0x70>)
1000e268:	480f      	ldr	r0, [pc, #60]	; (1000e2a8 <gapc_encrypt_cfm_handler+0x74>)
1000e26a:	881a      	ldrh	r2, [r3, #0]
1000e26c:	881b      	ldrh	r3, [r3, #0]
1000e26e:	7122      	strb	r2, [r4, #4]
1000e270:	0a1b      	lsrs	r3, r3, #8
1000e272:	7163      	strb	r3, [r4, #5]
1000e274:	2210      	movs	r2, #16
1000e276:	4b0d      	ldr	r3, [pc, #52]	; (1000e2ac <gapc_encrypt_cfm_handler+0x78>)
1000e278:	70e6      	strb	r6, [r4, #3]
1000e27a:	7227      	strb	r7, [r4, #8]
1000e27c:	4798      	blx	r3
1000e27e:	466b      	mov	r3, sp
1000e280:	7d1b      	ldrb	r3, [r3, #20]
1000e282:	1c20      	adds	r0, r4, #0
1000e284:	7663      	strb	r3, [r4, #25]
1000e286:	2312      	movs	r3, #18
1000e288:	211a      	movs	r1, #26
1000e28a:	71a3      	strb	r3, [r4, #6]
1000e28c:	4b08      	ldr	r3, [pc, #32]	; (1000e2b0 <gapc_encrypt_cfm_handler+0x7c>)
1000e28e:	71e5      	strb	r5, [r4, #7]
1000e290:	4798      	blx	r3
1000e292:	b007      	add	sp, #28
1000e294:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e296:	46c0      	nop			; (mov r8, r8)
1000e298:	10013164 	.word	0x10013164
1000e29c:	1000dc71 	.word	0x1000dc71
1000e2a0:	10014254 	.word	0x10014254
1000e2a4:	10013ee4 	.word	0x10013ee4
1000e2a8:	1001425d 	.word	0x1001425d
1000e2ac:	1001025f 	.word	0x1001025f
1000e2b0:	1000d975 	.word	0x1000d975

1000e2b4 <gapc_encrypt_ind>:
1000e2b4:	780b      	ldrb	r3, [r1, #0]
1000e2b6:	0a00      	lsrs	r0, r0, #8
1000e2b8:	70d3      	strb	r3, [r2, #3]
1000e2ba:	2300      	movs	r3, #0
1000e2bc:	8010      	strh	r0, [r2, #0]
1000e2be:	7093      	strb	r3, [r2, #2]
1000e2c0:	4770      	bx	lr
	...

1000e2c4 <gapc_param_update_cfm_handler>:
1000e2c4:	b538      	push	{r3, r4, r5, lr}
1000e2c6:	2410      	movs	r4, #16
1000e2c8:	1c05      	adds	r5, r0, #0
1000e2ca:	480e      	ldr	r0, [pc, #56]	; (1000e304 <gapc_param_update_cfm_handler+0x40>)
1000e2cc:	7004      	strb	r4, [r0, #0]
1000e2ce:	3c02      	subs	r4, #2
1000e2d0:	7044      	strb	r4, [r0, #1]
1000e2d2:	7084      	strb	r4, [r0, #2]
1000e2d4:	4c0c      	ldr	r4, [pc, #48]	; (1000e308 <gapc_param_update_cfm_handler+0x44>)
1000e2d6:	70c5      	strb	r5, [r0, #3]
1000e2d8:	8825      	ldrh	r5, [r4, #0]
1000e2da:	8824      	ldrh	r4, [r4, #0]
1000e2dc:	72c3      	strb	r3, [r0, #11]
1000e2de:	0a1b      	lsrs	r3, r3, #8
1000e2e0:	0a24      	lsrs	r4, r4, #8
1000e2e2:	7303      	strb	r3, [r0, #12]
1000e2e4:	2305      	movs	r3, #5
1000e2e6:	7144      	strb	r4, [r0, #5]
1000e2e8:	2400      	movs	r4, #0
1000e2ea:	7201      	strb	r1, [r0, #8]
1000e2ec:	7242      	strb	r2, [r0, #9]
1000e2ee:	7183      	strb	r3, [r0, #6]
1000e2f0:	0a12      	lsrs	r2, r2, #8
1000e2f2:	210d      	movs	r1, #13
1000e2f4:	4b05      	ldr	r3, [pc, #20]	; (1000e30c <gapc_param_update_cfm_handler+0x48>)
1000e2f6:	7105      	strb	r5, [r0, #4]
1000e2f8:	7282      	strb	r2, [r0, #10]
1000e2fa:	71c4      	strb	r4, [r0, #7]
1000e2fc:	4798      	blx	r3
1000e2fe:	1c20      	adds	r0, r4, #0
1000e300:	bd38      	pop	{r3, r4, r5, pc}
1000e302:	46c0      	nop			; (mov r8, r8)
1000e304:	10014254 	.word	0x10014254
1000e308:	10013ee4 	.word	0x10013ee4
1000e30c:	1000d975 	.word	0x1000d975

1000e310 <gapc_param_updated_ind>:
1000e310:	2300      	movs	r3, #0
1000e312:	0a00      	lsrs	r0, r0, #8
1000e314:	8010      	strh	r0, [r2, #0]
1000e316:	7093      	strb	r3, [r2, #2]
1000e318:	784b      	ldrb	r3, [r1, #1]
1000e31a:	7808      	ldrb	r0, [r1, #0]
1000e31c:	021b      	lsls	r3, r3, #8
1000e31e:	4303      	orrs	r3, r0
1000e320:	8093      	strh	r3, [r2, #4]
1000e322:	78cb      	ldrb	r3, [r1, #3]
1000e324:	7888      	ldrb	r0, [r1, #2]
1000e326:	021b      	lsls	r3, r3, #8
1000e328:	4303      	orrs	r3, r0
1000e32a:	80d3      	strh	r3, [r2, #6]
1000e32c:	794b      	ldrb	r3, [r1, #5]
1000e32e:	7909      	ldrb	r1, [r1, #4]
1000e330:	021b      	lsls	r3, r3, #8
1000e332:	430b      	orrs	r3, r1
1000e334:	2007      	movs	r0, #7
1000e336:	8113      	strh	r3, [r2, #8]
1000e338:	4770      	bx	lr

1000e33a <gapc_param_updated_req_ind>:
1000e33a:	0a00      	lsrs	r0, r0, #8
1000e33c:	8010      	strh	r0, [r2, #0]
1000e33e:	784b      	ldrb	r3, [r1, #1]
1000e340:	7808      	ldrb	r0, [r1, #0]
1000e342:	021b      	lsls	r3, r3, #8
1000e344:	4303      	orrs	r3, r0
1000e346:	8053      	strh	r3, [r2, #2]
1000e348:	78cb      	ldrb	r3, [r1, #3]
1000e34a:	7888      	ldrb	r0, [r1, #2]
1000e34c:	021b      	lsls	r3, r3, #8
1000e34e:	4303      	orrs	r3, r0
1000e350:	8093      	strh	r3, [r2, #4]
1000e352:	794b      	ldrb	r3, [r1, #5]
1000e354:	7908      	ldrb	r0, [r1, #4]
1000e356:	021b      	lsls	r3, r3, #8
1000e358:	4303      	orrs	r3, r0
1000e35a:	80d3      	strh	r3, [r2, #6]
1000e35c:	79cb      	ldrb	r3, [r1, #7]
1000e35e:	7989      	ldrb	r1, [r1, #6]
1000e360:	021b      	lsls	r3, r3, #8
1000e362:	430b      	orrs	r3, r1
1000e364:	2008      	movs	r0, #8
1000e366:	8113      	strh	r3, [r2, #8]
1000e368:	4770      	bx	lr
	...

1000e36c <gapc_dev_info_req_ind_handler>:
1000e36c:	b508      	push	{r3, lr}
1000e36e:	1c0b      	adds	r3, r1, #0
1000e370:	0a01      	lsrs	r1, r0, #8
1000e372:	8011      	strh	r1, [r2, #0]
1000e374:	7818      	ldrb	r0, [r3, #0]
1000e376:	7090      	strb	r0, [r2, #2]
1000e378:	2800      	cmp	r0, #0
1000e37a:	d104      	bne.n	1000e386 <gapc_dev_info_req_ind_handler+0x1a>
1000e37c:	4b03      	ldr	r3, [pc, #12]	; (1000e38c <gapc_dev_info_req_ind_handler+0x20>)
1000e37e:	33aa      	adds	r3, #170	; 0xaa
1000e380:	881b      	ldrh	r3, [r3, #0]
1000e382:	2b00      	cmp	r3, #0
1000e384:	d001      	beq.n	1000e38a <gapc_dev_info_req_ind_handler+0x1e>
1000e386:	4b02      	ldr	r3, [pc, #8]	; (1000e390 <gapc_dev_info_req_ind_handler+0x24>)
1000e388:	4798      	blx	r3
1000e38a:	bd08      	pop	{r3, pc}
1000e38c:	10013f76 	.word	0x10013f76
1000e390:	1000da7d 	.word	0x1000da7d

1000e394 <gapc_sec_req_ind>:
1000e394:	0a00      	lsrs	r0, r0, #8
1000e396:	8010      	strh	r0, [r2, #0]
1000e398:	7809      	ldrb	r1, [r1, #0]
1000e39a:	2301      	movs	r3, #1
1000e39c:	1c08      	adds	r0, r1, #0
1000e39e:	0889      	lsrs	r1, r1, #2
1000e3a0:	4018      	ands	r0, r3
1000e3a2:	400b      	ands	r3, r1
1000e3a4:	70d0      	strb	r0, [r2, #3]
1000e3a6:	7113      	strb	r3, [r2, #4]
1000e3a8:	4770      	bx	lr

1000e3aa <gapc_sign_counter_ind_handler>:
1000e3aa:	0a00      	lsrs	r0, r0, #8
1000e3ac:	8010      	strh	r0, [r2, #0]
1000e3ae:	784b      	ldrb	r3, [r1, #1]
1000e3b0:	0218      	lsls	r0, r3, #8
1000e3b2:	788b      	ldrb	r3, [r1, #2]
1000e3b4:	041b      	lsls	r3, r3, #16
1000e3b6:	4303      	orrs	r3, r0
1000e3b8:	7808      	ldrb	r0, [r1, #0]
1000e3ba:	4303      	orrs	r3, r0
1000e3bc:	78c8      	ldrb	r0, [r1, #3]
1000e3be:	0600      	lsls	r0, r0, #24
1000e3c0:	4303      	orrs	r3, r0
1000e3c2:	6053      	str	r3, [r2, #4]
1000e3c4:	794b      	ldrb	r3, [r1, #5]
1000e3c6:	0218      	lsls	r0, r3, #8
1000e3c8:	798b      	ldrb	r3, [r1, #6]
1000e3ca:	041b      	lsls	r3, r3, #16
1000e3cc:	4303      	orrs	r3, r0
1000e3ce:	7908      	ldrb	r0, [r1, #4]
1000e3d0:	79c9      	ldrb	r1, [r1, #7]
1000e3d2:	4303      	orrs	r3, r0
1000e3d4:	0609      	lsls	r1, r1, #24
1000e3d6:	430b      	orrs	r3, r1
1000e3d8:	2000      	movs	r0, #0
1000e3da:	6093      	str	r3, [r2, #8]
1000e3dc:	4770      	bx	lr
	...

1000e3e0 <gapc_peer_att_info_ind_handler>:
1000e3e0:	b510      	push	{r4, lr}
1000e3e2:	0a00      	lsrs	r0, r0, #8
1000e3e4:	8010      	strh	r0, [r2, #0]
1000e3e6:	7808      	ldrb	r0, [r1, #0]
1000e3e8:	7090      	strb	r0, [r2, #2]
1000e3ea:	788b      	ldrb	r3, [r1, #2]
1000e3ec:	784c      	ldrb	r4, [r1, #1]
1000e3ee:	021b      	lsls	r3, r3, #8
1000e3f0:	4323      	orrs	r3, r4
1000e3f2:	8093      	strh	r3, [r2, #4]
1000e3f4:	2801      	cmp	r0, #1
1000e3f6:	d027      	beq.n	1000e448 <gapc_peer_att_info_ind_handler+0x68>
1000e3f8:	2800      	cmp	r0, #0
1000e3fa:	d017      	beq.n	1000e42c <gapc_peer_att_info_ind_handler+0x4c>
1000e3fc:	2802      	cmp	r0, #2
1000e3fe:	d12a      	bne.n	1000e456 <gapc_peer_att_info_ind_handler+0x76>
1000e400:	790b      	ldrb	r3, [r1, #4]
1000e402:	78c8      	ldrb	r0, [r1, #3]
1000e404:	021b      	lsls	r3, r3, #8
1000e406:	4303      	orrs	r3, r0
1000e408:	8113      	strh	r3, [r2, #8]
1000e40a:	798b      	ldrb	r3, [r1, #6]
1000e40c:	7948      	ldrb	r0, [r1, #5]
1000e40e:	021b      	lsls	r3, r3, #8
1000e410:	4303      	orrs	r3, r0
1000e412:	80d3      	strh	r3, [r2, #6]
1000e414:	7a0b      	ldrb	r3, [r1, #8]
1000e416:	79c8      	ldrb	r0, [r1, #7]
1000e418:	021b      	lsls	r3, r3, #8
1000e41a:	4303      	orrs	r3, r0
1000e41c:	8193      	strh	r3, [r2, #12]
1000e41e:	7a8b      	ldrb	r3, [r1, #10]
1000e420:	7a49      	ldrb	r1, [r1, #9]
1000e422:	021b      	lsls	r3, r3, #8
1000e424:	430b      	orrs	r3, r1
1000e426:	8153      	strh	r3, [r2, #10]
1000e428:	2306      	movs	r3, #6
1000e42a:	e013      	b.n	1000e454 <gapc_peer_att_info_ind_handler+0x74>
1000e42c:	1c14      	adds	r4, r2, #0
1000e42e:	1c20      	adds	r0, r4, #0
1000e430:	790a      	ldrb	r2, [r1, #4]
1000e432:	78cb      	ldrb	r3, [r1, #3]
1000e434:	0212      	lsls	r2, r2, #8
1000e436:	431a      	orrs	r2, r3
1000e438:	80e2      	strh	r2, [r4, #6]
1000e43a:	4b07      	ldr	r3, [pc, #28]	; (1000e458 <gapc_peer_att_info_ind_handler+0x78>)
1000e43c:	3008      	adds	r0, #8
1000e43e:	3105      	adds	r1, #5
1000e440:	4798      	blx	r3
1000e442:	2302      	movs	r3, #2
1000e444:	70a3      	strb	r3, [r4, #2]
1000e446:	e006      	b.n	1000e456 <gapc_peer_att_info_ind_handler+0x76>
1000e448:	790b      	ldrb	r3, [r1, #4]
1000e44a:	78c9      	ldrb	r1, [r1, #3]
1000e44c:	021b      	lsls	r3, r3, #8
1000e44e:	430b      	orrs	r3, r1
1000e450:	80d3      	strh	r3, [r2, #6]
1000e452:	2305      	movs	r3, #5
1000e454:	7093      	strb	r3, [r2, #2]
1000e456:	bd10      	pop	{r4, pc}
1000e458:	1001025f 	.word	0x1001025f

1000e45c <gapc_con_channel_map_ind_handler>:
1000e45c:	b508      	push	{r3, lr}
1000e45e:	2300      	movs	r3, #0
1000e460:	0a00      	lsrs	r0, r0, #8
1000e462:	7013      	strb	r3, [r2, #0]
1000e464:	8050      	strh	r0, [r2, #2]
1000e466:	4b02      	ldr	r3, [pc, #8]	; (1000e470 <gapc_con_channel_map_ind_handler+0x14>)
1000e468:	1d10      	adds	r0, r2, #4
1000e46a:	2205      	movs	r2, #5
1000e46c:	4798      	blx	r3
1000e46e:	bd08      	pop	{r3, pc}
1000e470:	1001025f 	.word	0x1001025f

1000e474 <gapc_lecb_connected>:
1000e474:	7843      	ldrb	r3, [r0, #1]
1000e476:	7802      	ldrb	r2, [r0, #0]
1000e478:	021b      	lsls	r3, r3, #8
1000e47a:	4313      	orrs	r3, r2
1000e47c:	800b      	strh	r3, [r1, #0]
1000e47e:	78c3      	ldrb	r3, [r0, #3]
1000e480:	7882      	ldrb	r2, [r0, #2]
1000e482:	021b      	lsls	r3, r3, #8
1000e484:	4313      	orrs	r3, r2
1000e486:	804b      	strh	r3, [r1, #2]
1000e488:	7943      	ldrb	r3, [r0, #5]
1000e48a:	7902      	ldrb	r2, [r0, #4]
1000e48c:	021b      	lsls	r3, r3, #8
1000e48e:	4313      	orrs	r3, r2
1000e490:	808b      	strh	r3, [r1, #4]
1000e492:	79c3      	ldrb	r3, [r0, #7]
1000e494:	7982      	ldrb	r2, [r0, #6]
1000e496:	021b      	lsls	r3, r3, #8
1000e498:	4313      	orrs	r3, r2
1000e49a:	80cb      	strh	r3, [r1, #6]
1000e49c:	2300      	movs	r3, #0
1000e49e:	720b      	strb	r3, [r1, #8]
1000e4a0:	4770      	bx	lr

1000e4a2 <gapc_lecb_disconnected>:
1000e4a2:	7843      	ldrb	r3, [r0, #1]
1000e4a4:	7802      	ldrb	r2, [r0, #0]
1000e4a6:	021b      	lsls	r3, r3, #8
1000e4a8:	4313      	orrs	r3, r2
1000e4aa:	800b      	strh	r3, [r1, #0]
1000e4ac:	78c3      	ldrb	r3, [r0, #3]
1000e4ae:	7882      	ldrb	r2, [r0, #2]
1000e4b0:	021b      	lsls	r3, r3, #8
1000e4b2:	4313      	orrs	r3, r2
1000e4b4:	804b      	strh	r3, [r1, #2]
1000e4b6:	4770      	bx	lr

1000e4b8 <gapc_lecb_connect_req_ind>:
1000e4b8:	7843      	ldrb	r3, [r0, #1]
1000e4ba:	7802      	ldrb	r2, [r0, #0]
1000e4bc:	021b      	lsls	r3, r3, #8
1000e4be:	4313      	orrs	r3, r2
1000e4c0:	800b      	strh	r3, [r1, #0]
1000e4c2:	78c3      	ldrb	r3, [r0, #3]
1000e4c4:	7882      	ldrb	r2, [r0, #2]
1000e4c6:	021b      	lsls	r3, r3, #8
1000e4c8:	4313      	orrs	r3, r2
1000e4ca:	804b      	strh	r3, [r1, #2]
1000e4cc:	7943      	ldrb	r3, [r0, #5]
1000e4ce:	7902      	ldrb	r2, [r0, #4]
1000e4d0:	021b      	lsls	r3, r3, #8
1000e4d2:	4313      	orrs	r3, r2
1000e4d4:	808b      	strh	r3, [r1, #4]
1000e4d6:	79c3      	ldrb	r3, [r0, #7]
1000e4d8:	7982      	ldrb	r2, [r0, #6]
1000e4da:	021b      	lsls	r3, r3, #8
1000e4dc:	4313      	orrs	r3, r2
1000e4de:	80cb      	strh	r3, [r1, #6]
1000e4e0:	4770      	bx	lr

1000e4e2 <gapc_lecb_add_credit_resp_handler>:
1000e4e2:	7843      	ldrb	r3, [r0, #1]
1000e4e4:	7802      	ldrb	r2, [r0, #0]
1000e4e6:	021b      	lsls	r3, r3, #8
1000e4e8:	4313      	orrs	r3, r2
1000e4ea:	800b      	strh	r3, [r1, #0]
1000e4ec:	78c3      	ldrb	r3, [r0, #3]
1000e4ee:	7882      	ldrb	r2, [r0, #2]
1000e4f0:	021b      	lsls	r3, r3, #8
1000e4f2:	4313      	orrs	r3, r2
1000e4f4:	804b      	strh	r3, [r1, #2]
1000e4f6:	7943      	ldrb	r3, [r0, #5]
1000e4f8:	7902      	ldrb	r2, [r0, #4]
1000e4fa:	021b      	lsls	r3, r3, #8
1000e4fc:	4313      	orrs	r3, r2
1000e4fe:	808b      	strh	r3, [r1, #4]
1000e500:	4770      	bx	lr
	...

1000e504 <gapm_reset_req_handler>:
1000e504:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e506:	466b      	mov	r3, sp
1000e508:	4915      	ldr	r1, [pc, #84]	; (1000e560 <gapm_reset_req_handler+0x5c>)
1000e50a:	4816      	ldr	r0, [pc, #88]	; (1000e564 <gapm_reset_req_handler+0x60>)
1000e50c:	880c      	ldrh	r4, [r1, #0]
1000e50e:	8809      	ldrh	r1, [r1, #0]
1000e510:	1ddd      	adds	r5, r3, #7
1000e512:	0a09      	lsrs	r1, r1, #8
1000e514:	2300      	movs	r3, #0
1000e516:	2202      	movs	r2, #2
1000e518:	7141      	strb	r1, [r0, #5]
1000e51a:	26d0      	movs	r6, #208	; 0xd0
1000e51c:	2101      	movs	r1, #1
1000e51e:	7104      	strb	r4, [r0, #4]
1000e520:	4c11      	ldr	r4, [pc, #68]	; (1000e568 <gapm_reset_req_handler+0x64>)
1000e522:	702b      	strb	r3, [r5, #0]
1000e524:	7002      	strb	r2, [r0, #0]
1000e526:	70c3      	strb	r3, [r0, #3]
1000e528:	320b      	adds	r2, #11
1000e52a:	7201      	strb	r1, [r0, #8]
1000e52c:	7181      	strb	r1, [r0, #6]
1000e52e:	71c3      	strb	r3, [r0, #7]
1000e530:	3108      	adds	r1, #8
1000e532:	4b0e      	ldr	r3, [pc, #56]	; (1000e56c <gapm_reset_req_handler+0x68>)
1000e534:	0136      	lsls	r6, r6, #4
1000e536:	7042      	strb	r2, [r0, #1]
1000e538:	7082      	strb	r2, [r0, #2]
1000e53a:	80a2      	strh	r2, [r4, #4]
1000e53c:	8026      	strh	r6, [r4, #0]
1000e53e:	4798      	blx	r3
1000e540:	1c28      	adds	r0, r5, #0
1000e542:	4b0b      	ldr	r3, [pc, #44]	; (1000e570 <gapm_reset_req_handler+0x6c>)
1000e544:	4798      	blx	r3
1000e546:	782b      	ldrb	r3, [r5, #0]
1000e548:	20e2      	movs	r0, #226	; 0xe2
1000e54a:	2b00      	cmp	r3, #0
1000e54c:	d106      	bne.n	1000e55c <gapm_reset_req_handler+0x58>
1000e54e:	68a3      	ldr	r3, [r4, #8]
1000e550:	20e2      	movs	r0, #226	; 0xe2
1000e552:	781a      	ldrb	r2, [r3, #0]
1000e554:	785b      	ldrb	r3, [r3, #1]
1000e556:	2a01      	cmp	r2, #1
1000e558:	d100      	bne.n	1000e55c <gapm_reset_req_handler+0x58>
1000e55a:	1c18      	adds	r0, r3, #0
1000e55c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e55e:	46c0      	nop			; (mov r8, r8)
1000e560:	10013ee4 	.word	0x10013ee4
1000e564:	10014254 	.word	0x10014254
1000e568:	10013ed8 	.word	0x10013ed8
1000e56c:	1000d975 	.word	0x1000d975
1000e570:	1000d9d1 	.word	0x1000d9d1

1000e574 <gapm_set_dev_config_cmd_handler>:
1000e574:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e576:	b089      	sub	sp, #36	; 0x24
1000e578:	9303      	str	r3, [sp, #12]
1000e57a:	ab0e      	add	r3, sp, #56	; 0x38
1000e57c:	781b      	ldrb	r3, [r3, #0]
1000e57e:	4c37      	ldr	r4, [pc, #220]	; (1000e65c <gapm_set_dev_config_cmd_handler+0xe8>)
1000e580:	9304      	str	r3, [sp, #16]
1000e582:	ab0f      	add	r3, sp, #60	; 0x3c
1000e584:	781b      	ldrb	r3, [r3, #0]
1000e586:	270d      	movs	r7, #13
1000e588:	9305      	str	r3, [sp, #20]
1000e58a:	ab10      	add	r3, sp, #64	; 0x40
1000e58c:	881b      	ldrh	r3, [r3, #0]
1000e58e:	72a1      	strb	r1, [r4, #10]
1000e590:	9300      	str	r3, [sp, #0]
1000e592:	ab11      	add	r3, sp, #68	; 0x44
1000e594:	881b      	ldrh	r3, [r3, #0]
1000e596:	0a09      	lsrs	r1, r1, #8
1000e598:	9301      	str	r3, [sp, #4]
1000e59a:	ab12      	add	r3, sp, #72	; 0x48
1000e59c:	881b      	ldrh	r3, [r3, #0]
1000e59e:	7260      	strb	r0, [r4, #9]
1000e5a0:	9302      	str	r3, [sp, #8]
1000e5a2:	ab06      	add	r3, sp, #24
1000e5a4:	1dde      	adds	r6, r3, #7
1000e5a6:	2300      	movs	r3, #0
1000e5a8:	7033      	strb	r3, [r6, #0]
1000e5aa:	2304      	movs	r3, #4
1000e5ac:	7023      	strb	r3, [r4, #0]
1000e5ae:	2300      	movs	r3, #0
1000e5b0:	70e3      	strb	r3, [r4, #3]
1000e5b2:	4b2b      	ldr	r3, [pc, #172]	; (1000e660 <gapm_set_dev_config_cmd_handler+0xec>)
1000e5b4:	72e1      	strb	r1, [r4, #11]
1000e5b6:	881d      	ldrh	r5, [r3, #0]
1000e5b8:	881b      	ldrh	r3, [r3, #0]
1000e5ba:	1c11      	adds	r1, r2, #0
1000e5bc:	0a1b      	lsrs	r3, r3, #8
1000e5be:	7163      	strb	r3, [r4, #5]
1000e5c0:	2303      	movs	r3, #3
1000e5c2:	7125      	strb	r5, [r4, #4]
1000e5c4:	2206      	movs	r2, #6
1000e5c6:	4d27      	ldr	r5, [pc, #156]	; (1000e664 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e5c8:	4827      	ldr	r0, [pc, #156]	; (1000e668 <gapm_set_dev_config_cmd_handler+0xf4>)
1000e5ca:	7223      	strb	r3, [r4, #8]
1000e5cc:	7067      	strb	r7, [r4, #1]
1000e5ce:	70a7      	strb	r7, [r4, #2]
1000e5d0:	47a8      	blx	r5
1000e5d2:	9903      	ldr	r1, [sp, #12]
1000e5d4:	2210      	movs	r2, #16
1000e5d6:	4825      	ldr	r0, [pc, #148]	; (1000e66c <gapm_set_dev_config_cmd_handler+0xf8>)
1000e5d8:	47a8      	blx	r5
1000e5da:	466a      	mov	r2, sp
1000e5dc:	7c12      	ldrb	r2, [r2, #16]
1000e5de:	1ce3      	adds	r3, r4, #3
1000e5e0:	77da      	strb	r2, [r3, #31]
1000e5e2:	466a      	mov	r2, sp
1000e5e4:	7d12      	ldrb	r2, [r2, #20]
1000e5e6:	1d23      	adds	r3, r4, #4
1000e5e8:	77da      	strb	r2, [r3, #31]
1000e5ea:	466a      	mov	r2, sp
1000e5ec:	7812      	ldrb	r2, [r2, #0]
1000e5ee:	1d63      	adds	r3, r4, #5
1000e5f0:	77da      	strb	r2, [r3, #31]
1000e5f2:	9b00      	ldr	r3, [sp, #0]
1000e5f4:	1da2      	adds	r2, r4, #6
1000e5f6:	0a1b      	lsrs	r3, r3, #8
1000e5f8:	77d3      	strb	r3, [r2, #31]
1000e5fa:	466a      	mov	r2, sp
1000e5fc:	7912      	ldrb	r2, [r2, #4]
1000e5fe:	1de3      	adds	r3, r4, #7
1000e600:	77da      	strb	r2, [r3, #31]
1000e602:	1c22      	adds	r2, r4, #0
1000e604:	9b01      	ldr	r3, [sp, #4]
1000e606:	3208      	adds	r2, #8
1000e608:	0a1b      	lsrs	r3, r3, #8
1000e60a:	77d3      	strb	r3, [r2, #31]
1000e60c:	466a      	mov	r2, sp
1000e60e:	1c23      	adds	r3, r4, #0
1000e610:	7a12      	ldrb	r2, [r2, #8]
1000e612:	3328      	adds	r3, #40	; 0x28
1000e614:	701a      	strb	r2, [r3, #0]
1000e616:	1c22      	adds	r2, r4, #0
1000e618:	9b02      	ldr	r3, [sp, #8]
1000e61a:	3229      	adds	r2, #41	; 0x29
1000e61c:	0a1b      	lsrs	r3, r3, #8
1000e61e:	7013      	strb	r3, [r2, #0]
1000e620:	23d0      	movs	r3, #208	; 0xd0
1000e622:	4d13      	ldr	r5, [pc, #76]	; (1000e670 <gapm_set_dev_config_cmd_handler+0xfc>)
1000e624:	011b      	lsls	r3, r3, #4
1000e626:	802b      	strh	r3, [r5, #0]
1000e628:	2322      	movs	r3, #34	; 0x22
1000e62a:	71a3      	strb	r3, [r4, #6]
1000e62c:	2300      	movs	r3, #0
1000e62e:	212a      	movs	r1, #42	; 0x2a
1000e630:	71e3      	strb	r3, [r4, #7]
1000e632:	1c20      	adds	r0, r4, #0
1000e634:	4b0f      	ldr	r3, [pc, #60]	; (1000e674 <gapm_set_dev_config_cmd_handler+0x100>)
1000e636:	80af      	strh	r7, [r5, #4]
1000e638:	4798      	blx	r3
1000e63a:	1c30      	adds	r0, r6, #0
1000e63c:	4b0e      	ldr	r3, [pc, #56]	; (1000e678 <gapm_set_dev_config_cmd_handler+0x104>)
1000e63e:	4798      	blx	r3
1000e640:	7833      	ldrb	r3, [r6, #0]
1000e642:	20e2      	movs	r0, #226	; 0xe2
1000e644:	2b00      	cmp	r3, #0
1000e646:	d106      	bne.n	1000e656 <gapm_set_dev_config_cmd_handler+0xe2>
1000e648:	68ab      	ldr	r3, [r5, #8]
1000e64a:	20e2      	movs	r0, #226	; 0xe2
1000e64c:	781a      	ldrb	r2, [r3, #0]
1000e64e:	785b      	ldrb	r3, [r3, #1]
1000e650:	2a03      	cmp	r2, #3
1000e652:	d100      	bne.n	1000e656 <gapm_set_dev_config_cmd_handler+0xe2>
1000e654:	1c18      	adds	r0, r3, #0
1000e656:	b009      	add	sp, #36	; 0x24
1000e658:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e65a:	46c0      	nop			; (mov r8, r8)
1000e65c:	10014254 	.word	0x10014254
1000e660:	10013ee4 	.word	0x10013ee4
1000e664:	1001025f 	.word	0x1001025f
1000e668:	10014260 	.word	0x10014260
1000e66c:	10014266 	.word	0x10014266
1000e670:	10013ed8 	.word	0x10013ed8
1000e674:	1000d975 	.word	0x1000d975
1000e678:	1000d9d1 	.word	0x1000d9d1

1000e67c <gapm_get_dev_config_cmd_handler>:
1000e67c:	4684      	mov	ip, r0
1000e67e:	4663      	mov	r3, ip
1000e680:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e682:	b085      	sub	sp, #20
1000e684:	9100      	str	r1, [sp, #0]
1000e686:	20cf      	movs	r0, #207	; 0xcf
1000e688:	2b01      	cmp	r3, #1
1000e68a:	d854      	bhi.n	1000e736 <gapm_get_dev_config_cmd_handler+0xba>
1000e68c:	2900      	cmp	r1, #0
1000e68e:	d052      	beq.n	1000e736 <gapm_get_dev_config_cmd_handler+0xba>
1000e690:	2200      	movs	r2, #0
1000e692:	492a      	ldr	r1, [pc, #168]	; (1000e73c <gapm_get_dev_config_cmd_handler+0xc0>)
1000e694:	ab02      	add	r3, sp, #8
1000e696:	880c      	ldrh	r4, [r1, #0]
1000e698:	8809      	ldrh	r1, [r1, #0]
1000e69a:	1d9f      	adds	r7, r3, #6
1000e69c:	719a      	strb	r2, [r3, #6]
1000e69e:	4b28      	ldr	r3, [pc, #160]	; (1000e740 <gapm_get_dev_config_cmd_handler+0xc4>)
1000e6a0:	0a09      	lsrs	r1, r1, #8
1000e6a2:	250d      	movs	r5, #13
1000e6a4:	2606      	movs	r6, #6
1000e6a6:	7159      	strb	r1, [r3, #5]
1000e6a8:	4661      	mov	r1, ip
1000e6aa:	701e      	strb	r6, [r3, #0]
1000e6ac:	705d      	strb	r5, [r3, #1]
1000e6ae:	709d      	strb	r5, [r3, #2]
1000e6b0:	70da      	strb	r2, [r3, #3]
1000e6b2:	711c      	strb	r4, [r3, #4]
1000e6b4:	2901      	cmp	r1, #1
1000e6b6:	d13e      	bne.n	1000e736 <gapm_get_dev_config_cmd_handler+0xba>
1000e6b8:	21d0      	movs	r1, #208	; 0xd0
1000e6ba:	4c22      	ldr	r4, [pc, #136]	; (1000e744 <gapm_get_dev_config_cmd_handler+0xc8>)
1000e6bc:	0109      	lsls	r1, r1, #4
1000e6be:	8061      	strh	r1, [r4, #2]
1000e6c0:	4921      	ldr	r1, [pc, #132]	; (1000e748 <gapm_get_dev_config_cmd_handler+0xcc>)
1000e6c2:	71da      	strb	r2, [r3, #7]
1000e6c4:	8021      	strh	r1, [r4, #0]
1000e6c6:	4661      	mov	r1, ip
1000e6c8:	721e      	strb	r6, [r3, #8]
1000e6ca:	7199      	strb	r1, [r3, #6]
1000e6cc:	1c18      	adds	r0, r3, #0
1000e6ce:	2109      	movs	r1, #9
1000e6d0:	4b1e      	ldr	r3, [pc, #120]	; (1000e74c <gapm_get_dev_config_cmd_handler+0xd0>)
1000e6d2:	80a5      	strh	r5, [r4, #4]
1000e6d4:	4798      	blx	r3
1000e6d6:	1c38      	adds	r0, r7, #0
1000e6d8:	4b1d      	ldr	r3, [pc, #116]	; (1000e750 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e6da:	4798      	blx	r3
1000e6dc:	783b      	ldrb	r3, [r7, #0]
1000e6de:	20e2      	movs	r0, #226	; 0xe2
1000e6e0:	9301      	str	r3, [sp, #4]
1000e6e2:	2b00      	cmp	r3, #0
1000e6e4:	d127      	bne.n	1000e736 <gapm_get_dev_config_cmd_handler+0xba>
1000e6e6:	8821      	ldrh	r1, [r4, #0]
1000e6e8:	4a1a      	ldr	r2, [pc, #104]	; (1000e754 <gapm_get_dev_config_cmd_handler+0xd8>)
1000e6ea:	68a7      	ldr	r7, [r4, #8]
1000e6ec:	3b01      	subs	r3, #1
1000e6ee:	4291      	cmp	r1, r2
1000e6f0:	d001      	beq.n	1000e6f6 <gapm_get_dev_config_cmd_handler+0x7a>
1000e6f2:	8023      	strh	r3, [r4, #0]
1000e6f4:	e01a      	b.n	1000e72c <gapm_get_dev_config_cmd_handler+0xb0>
1000e6f6:	8063      	strh	r3, [r4, #2]
1000e6f8:	9b00      	ldr	r3, [sp, #0]
1000e6fa:	1c39      	adds	r1, r7, #0
1000e6fc:	1c58      	adds	r0, r3, #1
1000e6fe:	1c32      	adds	r2, r6, #0
1000e700:	4b15      	ldr	r3, [pc, #84]	; (1000e758 <gapm_get_dev_config_cmd_handler+0xdc>)
1000e702:	4798      	blx	r3
1000e704:	79bb      	ldrb	r3, [r7, #6]
1000e706:	9a00      	ldr	r2, [sp, #0]
1000e708:	7013      	strb	r3, [r2, #0]
1000e70a:	23d0      	movs	r3, #208	; 0xd0
1000e70c:	011b      	lsls	r3, r3, #4
1000e70e:	8023      	strh	r3, [r4, #0]
1000e710:	ab02      	add	r3, sp, #8
1000e712:	80a5      	strh	r5, [r4, #4]
1000e714:	1ddd      	adds	r5, r3, #7
1000e716:	466b      	mov	r3, sp
1000e718:	791b      	ldrb	r3, [r3, #4]
1000e71a:	1c28      	adds	r0, r5, #0
1000e71c:	702b      	strb	r3, [r5, #0]
1000e71e:	4b0c      	ldr	r3, [pc, #48]	; (1000e750 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e720:	4798      	blx	r3
1000e722:	782b      	ldrb	r3, [r5, #0]
1000e724:	20d0      	movs	r0, #208	; 0xd0
1000e726:	2b00      	cmp	r3, #0
1000e728:	d105      	bne.n	1000e736 <gapm_get_dev_config_cmd_handler+0xba>
1000e72a:	68a7      	ldr	r7, [r4, #8]
1000e72c:	783b      	ldrb	r3, [r7, #0]
1000e72e:	7878      	ldrb	r0, [r7, #1]
1000e730:	2b06      	cmp	r3, #6
1000e732:	d000      	beq.n	1000e736 <gapm_get_dev_config_cmd_handler+0xba>
1000e734:	20e2      	movs	r0, #226	; 0xe2
1000e736:	b005      	add	sp, #20
1000e738:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e73a:	46c0      	nop			; (mov r8, r8)
1000e73c:	10013ee4 	.word	0x10013ee4
1000e740:	10014254 	.word	0x10014254
1000e744:	10013ed8 	.word	0x10013ed8
1000e748:	00000d08 	.word	0x00000d08
1000e74c:	1000d975 	.word	0x1000d975
1000e750:	1000d9d1 	.word	0x1000d9d1
1000e754:	0000ffff 	.word	0x0000ffff
1000e758:	1001025f 	.word	0x1001025f

1000e75c <gapm_cancel_cmd_handler>:
1000e75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e75e:	4916      	ldr	r1, [pc, #88]	; (1000e7b8 <gapm_cancel_cmd_handler+0x5c>)
1000e760:	4816      	ldr	r0, [pc, #88]	; (1000e7bc <gapm_cancel_cmd_handler+0x60>)
1000e762:	880c      	ldrh	r4, [r1, #0]
1000e764:	8809      	ldrh	r1, [r1, #0]
1000e766:	466b      	mov	r3, sp
1000e768:	0a09      	lsrs	r1, r1, #8
1000e76a:	7141      	strb	r1, [r0, #5]
1000e76c:	2102      	movs	r1, #2
1000e76e:	2203      	movs	r2, #3
1000e770:	7201      	strb	r1, [r0, #8]
1000e772:	21d0      	movs	r1, #208	; 0xd0
1000e774:	1ddd      	adds	r5, r3, #7
1000e776:	2300      	movs	r3, #0
1000e778:	7104      	strb	r4, [r0, #4]
1000e77a:	4c11      	ldr	r4, [pc, #68]	; (1000e7c0 <gapm_cancel_cmd_handler+0x64>)
1000e77c:	7002      	strb	r2, [r0, #0]
1000e77e:	0109      	lsls	r1, r1, #4
1000e780:	320a      	adds	r2, #10
1000e782:	702b      	strb	r3, [r5, #0]
1000e784:	7042      	strb	r2, [r0, #1]
1000e786:	7082      	strb	r2, [r0, #2]
1000e788:	70c3      	strb	r3, [r0, #3]
1000e78a:	8021      	strh	r1, [r4, #0]
1000e78c:	80a2      	strh	r2, [r4, #4]
1000e78e:	71c3      	strb	r3, [r0, #7]
1000e790:	3a0c      	subs	r2, #12
1000e792:	2109      	movs	r1, #9
1000e794:	4b0b      	ldr	r3, [pc, #44]	; (1000e7c4 <gapm_cancel_cmd_handler+0x68>)
1000e796:	7182      	strb	r2, [r0, #6]
1000e798:	4798      	blx	r3
1000e79a:	1c28      	adds	r0, r5, #0
1000e79c:	4b0a      	ldr	r3, [pc, #40]	; (1000e7c8 <gapm_cancel_cmd_handler+0x6c>)
1000e79e:	4798      	blx	r3
1000e7a0:	7828      	ldrb	r0, [r5, #0]
1000e7a2:	2800      	cmp	r0, #0
1000e7a4:	d001      	beq.n	1000e7aa <gapm_cancel_cmd_handler+0x4e>
1000e7a6:	20e2      	movs	r0, #226	; 0xe2
1000e7a8:	e004      	b.n	1000e7b4 <gapm_cancel_cmd_handler+0x58>
1000e7aa:	68a3      	ldr	r3, [r4, #8]
1000e7ac:	785b      	ldrb	r3, [r3, #1]
1000e7ae:	2b44      	cmp	r3, #68	; 0x44
1000e7b0:	d000      	beq.n	1000e7b4 <gapm_cancel_cmd_handler+0x58>
1000e7b2:	1c18      	adds	r0, r3, #0
1000e7b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e7b6:	46c0      	nop			; (mov r8, r8)
1000e7b8:	10013ee4 	.word	0x10013ee4
1000e7bc:	10014254 	.word	0x10014254
1000e7c0:	10013ed8 	.word	0x10013ed8
1000e7c4:	1000d975 	.word	0x1000d975
1000e7c8:	1000d9d1 	.word	0x1000d9d1

1000e7cc <gapm_dev_bdaddr_ind_handler>:
1000e7cc:	b538      	push	{r3, r4, r5, lr}
1000e7ce:	1c05      	adds	r5, r0, #0
1000e7d0:	1c0c      	adds	r4, r1, #0
1000e7d2:	1c48      	adds	r0, r1, #1
1000e7d4:	2206      	movs	r2, #6
1000e7d6:	1c29      	adds	r1, r5, #0
1000e7d8:	4b02      	ldr	r3, [pc, #8]	; (1000e7e4 <gapm_dev_bdaddr_ind_handler+0x18>)
1000e7da:	4798      	blx	r3
1000e7dc:	79ab      	ldrb	r3, [r5, #6]
1000e7de:	2000      	movs	r0, #0
1000e7e0:	7023      	strb	r3, [r4, #0]
1000e7e2:	bd38      	pop	{r3, r4, r5, pc}
1000e7e4:	1001025f 	.word	0x1001025f

1000e7e8 <gapm_cmp_evt>:
1000e7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e7ea:	7803      	ldrb	r3, [r0, #0]
1000e7ec:	7845      	ldrb	r5, [r0, #1]
1000e7ee:	3b0c      	subs	r3, #12
1000e7f0:	1e18      	subs	r0, r3, #0
1000e7f2:	280b      	cmp	r0, #11
1000e7f4:	d900      	bls.n	1000e7f8 <gapm_cmp_evt+0x10>
1000e7f6:	e08d      	b.n	1000e914 <gapm_cmp_evt+0x12c>
1000e7f8:	1c0c      	adds	r4, r1, #0
1000e7fa:	f000 fca1 	bl	1000f140 <__gnu_thumb1_case_uqi>
1000e7fe:	1952      	.short	0x1952
1000e800:	068b1919 	.word	0x068b1919
1000e804:	8b595906 	.word	0x8b595906
1000e808:	0d8b      	.short	0x0d8b
1000e80a:	2300      	movs	r3, #0
1000e80c:	2d45      	cmp	r5, #69	; 0x45
1000e80e:	d000      	beq.n	1000e812 <gapm_cmp_evt+0x2a>
1000e810:	1c2b      	adds	r3, r5, #0
1000e812:	7023      	strb	r3, [r4, #0]
1000e814:	2002      	movs	r0, #2
1000e816:	e07e      	b.n	1000e916 <gapm_cmp_evt+0x12e>
1000e818:	203b      	movs	r0, #59	; 0x3b
1000e81a:	2d00      	cmp	r5, #0
1000e81c:	d100      	bne.n	1000e820 <gapm_cmp_evt+0x38>
1000e81e:	e07a      	b.n	1000e916 <gapm_cmp_evt+0x12e>
1000e820:	700d      	strb	r5, [r1, #0]
1000e822:	1c48      	adds	r0, r1, #1
1000e824:	2210      	movs	r2, #16
1000e826:	2100      	movs	r1, #0
1000e828:	4b3b      	ldr	r3, [pc, #236]	; (1000e918 <gapm_cmp_evt+0x130>)
1000e82a:	4798      	blx	r3
1000e82c:	200f      	movs	r0, #15
1000e82e:	e072      	b.n	1000e916 <gapm_cmp_evt+0x12e>
1000e830:	2d00      	cmp	r5, #0
1000e832:	d134      	bne.n	1000e89e <gapm_cmp_evt+0xb6>
1000e834:	4b39      	ldr	r3, [pc, #228]	; (1000e91c <gapm_cmp_evt+0x134>)
1000e836:	4798      	blx	r3
1000e838:	1e43      	subs	r3, r0, #1
1000e83a:	b2db      	uxtb	r3, r3
1000e83c:	1c28      	adds	r0, r5, #0
1000e83e:	2b06      	cmp	r3, #6
1000e840:	d869      	bhi.n	1000e916 <gapm_cmp_evt+0x12e>
1000e842:	466b      	mov	r3, sp
1000e844:	4e36      	ldr	r6, [pc, #216]	; (1000e920 <gapm_cmp_evt+0x138>)
1000e846:	1dd9      	adds	r1, r3, #7
1000e848:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e84a:	4b36      	ldr	r3, [pc, #216]	; (1000e924 <gapm_cmp_evt+0x13c>)
1000e84c:	4798      	blx	r3
1000e84e:	2312      	movs	r3, #18
1000e850:	4358      	muls	r0, r3
1000e852:	4935      	ldr	r1, [pc, #212]	; (1000e928 <gapm_cmp_evt+0x140>)
1000e854:	1809      	adds	r1, r1, r0
1000e856:	1c0b      	adds	r3, r1, #0
1000e858:	894a      	ldrh	r2, [r1, #10]
1000e85a:	3308      	adds	r3, #8
1000e85c:	8122      	strh	r2, [r4, #8]
1000e85e:	784f      	ldrb	r7, [r1, #1]
1000e860:	72a5      	strb	r5, [r4, #10]
1000e862:	7027      	strb	r7, [r4, #0]
1000e864:	898a      	ldrh	r2, [r1, #12]
1000e866:	1c60      	adds	r0, r4, #1
1000e868:	81a2      	strh	r2, [r4, #12]
1000e86a:	88db      	ldrh	r3, [r3, #6]
1000e86c:	3102      	adds	r1, #2
1000e86e:	81e3      	strh	r3, [r4, #14]
1000e870:	89cb      	ldrh	r3, [r1, #14]
1000e872:	2206      	movs	r2, #6
1000e874:	8223      	strh	r3, [r4, #16]
1000e876:	4b2d      	ldr	r3, [pc, #180]	; (1000e92c <gapm_cmp_evt+0x144>)
1000e878:	4798      	blx	r3
1000e87a:	2f00      	cmp	r7, #0
1000e87c:	d00a      	beq.n	1000e894 <gapm_cmp_evt+0xac>
1000e87e:	79a3      	ldrb	r3, [r4, #6]
1000e880:	223f      	movs	r2, #63	; 0x3f
1000e882:	1c19      	adds	r1, r3, #0
1000e884:	3501      	adds	r5, #1
1000e886:	4391      	bics	r1, r2
1000e888:	29c0      	cmp	r1, #192	; 0xc0
1000e88a:	d003      	beq.n	1000e894 <gapm_cmp_evt+0xac>
1000e88c:	065b      	lsls	r3, r3, #25
1000e88e:	0fdb      	lsrs	r3, r3, #31
1000e890:	3502      	adds	r5, #2
1000e892:	1aed      	subs	r5, r5, r3
1000e894:	2301      	movs	r3, #1
1000e896:	425b      	negs	r3, r3
1000e898:	7025      	strb	r5, [r4, #0]
1000e89a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e89c:	e038      	b.n	1000e910 <gapm_cmp_evt+0x128>
1000e89e:	700d      	strb	r5, [r1, #0]
1000e8a0:	e004      	b.n	1000e8ac <gapm_cmp_evt+0xc4>
1000e8a2:	2300      	movs	r3, #0
1000e8a4:	2d45      	cmp	r5, #69	; 0x45
1000e8a6:	d000      	beq.n	1000e8aa <gapm_cmp_evt+0xc2>
1000e8a8:	1c2b      	adds	r3, r5, #0
1000e8aa:	7023      	strb	r3, [r4, #0]
1000e8ac:	2003      	movs	r0, #3
1000e8ae:	e032      	b.n	1000e916 <gapm_cmp_evt+0x12e>
1000e8b0:	4e1b      	ldr	r6, [pc, #108]	; (1000e920 <gapm_cmp_evt+0x138>)
1000e8b2:	2100      	movs	r1, #0
1000e8b4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e8b6:	4b1b      	ldr	r3, [pc, #108]	; (1000e924 <gapm_cmp_evt+0x13c>)
1000e8b8:	4798      	blx	r3
1000e8ba:	2807      	cmp	r0, #7
1000e8bc:	d818      	bhi.n	1000e8f0 <gapm_cmp_evt+0x108>
1000e8be:	2301      	movs	r3, #1
1000e8c0:	425b      	negs	r3, r3
1000e8c2:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e8c4:	3313      	adds	r3, #19
1000e8c6:	4358      	muls	r0, r3
1000e8c8:	4917      	ldr	r1, [pc, #92]	; (1000e928 <gapm_cmp_evt+0x140>)
1000e8ca:	1809      	adds	r1, r1, r0
1000e8cc:	1c0b      	adds	r3, r1, #0
1000e8ce:	894a      	ldrh	r2, [r1, #10]
1000e8d0:	3308      	adds	r3, #8
1000e8d2:	8122      	strh	r2, [r4, #8]
1000e8d4:	784a      	ldrb	r2, [r1, #1]
1000e8d6:	72a5      	strb	r5, [r4, #10]
1000e8d8:	7022      	strb	r2, [r4, #0]
1000e8da:	898a      	ldrh	r2, [r1, #12]
1000e8dc:	1c60      	adds	r0, r4, #1
1000e8de:	81a2      	strh	r2, [r4, #12]
1000e8e0:	88db      	ldrh	r3, [r3, #6]
1000e8e2:	3102      	adds	r1, #2
1000e8e4:	81e3      	strh	r3, [r4, #14]
1000e8e6:	89cb      	ldrh	r3, [r1, #14]
1000e8e8:	2206      	movs	r2, #6
1000e8ea:	8223      	strh	r3, [r4, #16]
1000e8ec:	4b0f      	ldr	r3, [pc, #60]	; (1000e92c <gapm_cmp_evt+0x144>)
1000e8ee:	4798      	blx	r3
1000e8f0:	2200      	movs	r2, #0
1000e8f2:	7823      	ldrb	r3, [r4, #0]
1000e8f4:	4293      	cmp	r3, r2
1000e8f6:	d00a      	beq.n	1000e90e <gapm_cmp_evt+0x126>
1000e8f8:	79a3      	ldrb	r3, [r4, #6]
1000e8fa:	323f      	adds	r2, #63	; 0x3f
1000e8fc:	1c19      	adds	r1, r3, #0
1000e8fe:	4391      	bics	r1, r2
1000e900:	3a3e      	subs	r2, #62	; 0x3e
1000e902:	29c0      	cmp	r1, #192	; 0xc0
1000e904:	d003      	beq.n	1000e90e <gapm_cmp_evt+0x126>
1000e906:	065b      	lsls	r3, r3, #25
1000e908:	0fdb      	lsrs	r3, r3, #31
1000e90a:	3202      	adds	r2, #2
1000e90c:	1ad2      	subs	r2, r2, r3
1000e90e:	7022      	strb	r2, [r4, #0]
1000e910:	2005      	movs	r0, #5
1000e912:	e000      	b.n	1000e916 <gapm_cmp_evt+0x12e>
1000e914:	2000      	movs	r0, #0
1000e916:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e918:	10010271 	.word	0x10010271
1000e91c:	1000db79 	.word	0x1000db79
1000e920:	10013f76 	.word	0x10013f76
1000e924:	1000db3d 	.word	0x1000db3d
1000e928:	10013ee6 	.word	0x10013ee6
1000e92c:	1001025f 	.word	0x1001025f

1000e930 <get_gap_local_addr_type>:
1000e930:	4b04      	ldr	r3, [pc, #16]	; (1000e944 <get_gap_local_addr_type+0x14>)
1000e932:	2001      	movs	r0, #1
1000e934:	791b      	ldrb	r3, [r3, #4]
1000e936:	2b02      	cmp	r3, #2
1000e938:	d003      	beq.n	1000e942 <get_gap_local_addr_type+0x12>
1000e93a:	3b03      	subs	r3, #3
1000e93c:	4258      	negs	r0, r3
1000e93e:	4158      	adcs	r0, r3
1000e940:	0040      	lsls	r0, r0, #1
1000e942:	4770      	bx	lr
1000e944:	10013f76 	.word	0x10013f76

1000e948 <gapm_adv_report_evt_handler>:
1000e948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e94a:	7843      	ldrb	r3, [r0, #1]
1000e94c:	1c05      	adds	r5, r0, #0
1000e94e:	9301      	str	r3, [sp, #4]
1000e950:	466b      	mov	r3, sp
1000e952:	1c0c      	adds	r4, r1, #0
1000e954:	791b      	ldrb	r3, [r3, #4]
1000e956:	7806      	ldrb	r6, [r0, #0]
1000e958:	2206      	movs	r2, #6
1000e95a:	704b      	strb	r3, [r1, #1]
1000e95c:	1c88      	adds	r0, r1, #2
1000e95e:	4f1b      	ldr	r7, [pc, #108]	; (1000e9cc <gapm_adv_report_evt_handler+0x84>)
1000e960:	1ca9      	adds	r1, r5, #2
1000e962:	47b8      	blx	r7
1000e964:	1c20      	adds	r0, r4, #0
1000e966:	1c29      	adds	r1, r5, #0
1000e968:	7a2a      	ldrb	r2, [r5, #8]
1000e96a:	3008      	adds	r0, #8
1000e96c:	77c2      	strb	r2, [r0, #31]
1000e96e:	3109      	adds	r1, #9
1000e970:	3528      	adds	r5, #40	; 0x28
1000e972:	47b8      	blx	r7
1000e974:	782b      	ldrb	r3, [r5, #0]
1000e976:	b25a      	sxtb	r2, r3
1000e978:	2a00      	cmp	r2, #0
1000e97a:	da01      	bge.n	1000e980 <gapm_adv_report_evt_handler+0x38>
1000e97c:	3301      	adds	r3, #1
1000e97e:	b2db      	uxtb	r3, r3
1000e980:	1c22      	adds	r2, r4, #0
1000e982:	3228      	adds	r2, #40	; 0x28
1000e984:	7013      	strb	r3, [r2, #0]
1000e986:	2200      	movs	r2, #0
1000e988:	9b01      	ldr	r3, [sp, #4]
1000e98a:	4293      	cmp	r3, r2
1000e98c:	d00a      	beq.n	1000e9a4 <gapm_adv_report_evt_handler+0x5c>
1000e98e:	79e3      	ldrb	r3, [r4, #7]
1000e990:	323f      	adds	r2, #63	; 0x3f
1000e992:	1c19      	adds	r1, r3, #0
1000e994:	4391      	bics	r1, r2
1000e996:	3a3e      	subs	r2, #62	; 0x3e
1000e998:	29c0      	cmp	r1, #192	; 0xc0
1000e99a:	d003      	beq.n	1000e9a4 <gapm_adv_report_evt_handler+0x5c>
1000e99c:	065b      	lsls	r3, r3, #25
1000e99e:	0fdb      	lsrs	r3, r3, #31
1000e9a0:	3202      	adds	r2, #2
1000e9a2:	1ad2      	subs	r2, r2, r3
1000e9a4:	7062      	strb	r2, [r4, #1]
1000e9a6:	2e04      	cmp	r6, #4
1000e9a8:	d80f      	bhi.n	1000e9ca <gapm_adv_report_evt_handler+0x82>
1000e9aa:	1c30      	adds	r0, r6, #0
1000e9ac:	f000 fbc8 	bl	1000f140 <__gnu_thumb1_case_uqi>
1000e9b0:	09070503 	.word	0x09070503
1000e9b4:	0b          	.byte	0x0b
1000e9b5:	00          	.byte	0x00
1000e9b6:	2300      	movs	r3, #0
1000e9b8:	e006      	b.n	1000e9c8 <gapm_adv_report_evt_handler+0x80>
1000e9ba:	2301      	movs	r3, #1
1000e9bc:	e004      	b.n	1000e9c8 <gapm_adv_report_evt_handler+0x80>
1000e9be:	2302      	movs	r3, #2
1000e9c0:	e002      	b.n	1000e9c8 <gapm_adv_report_evt_handler+0x80>
1000e9c2:	2303      	movs	r3, #3
1000e9c4:	e000      	b.n	1000e9c8 <gapm_adv_report_evt_handler+0x80>
1000e9c6:	2305      	movs	r3, #5
1000e9c8:	7023      	strb	r3, [r4, #0]
1000e9ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e9cc:	1001025f 	.word	0x1001025f

1000e9d0 <gapm_start_connection_cmd_handler>:
1000e9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9d2:	b089      	sub	sp, #36	; 0x24
1000e9d4:	aa0f      	add	r2, sp, #60	; 0x3c
1000e9d6:	8812      	ldrh	r2, [r2, #0]
1000e9d8:	9107      	str	r1, [sp, #28]
1000e9da:	4694      	mov	ip, r2
1000e9dc:	aa10      	add	r2, sp, #64	; 0x40
1000e9de:	8812      	ldrh	r2, [r2, #0]
1000e9e0:	a908      	add	r1, sp, #32
1000e9e2:	9202      	str	r2, [sp, #8]
1000e9e4:	aa11      	add	r2, sp, #68	; 0x44
1000e9e6:	8812      	ldrh	r2, [r2, #0]
1000e9e8:	4e3b      	ldr	r6, [pc, #236]	; (1000ead8 <gapm_start_connection_cmd_handler+0x108>)
1000e9ea:	9203      	str	r2, [sp, #12]
1000e9ec:	aa12      	add	r2, sp, #72	; 0x48
1000e9ee:	8812      	ldrh	r2, [r2, #0]
1000e9f0:	4c3a      	ldr	r4, [pc, #232]	; (1000eadc <gapm_start_connection_cmd_handler+0x10c>)
1000e9f2:	9204      	str	r2, [sp, #16]
1000e9f4:	aa13      	add	r2, sp, #76	; 0x4c
1000e9f6:	8812      	ldrh	r2, [r2, #0]
1000e9f8:	ab0e      	add	r3, sp, #56	; 0x38
1000e9fa:	9205      	str	r2, [sp, #20]
1000e9fc:	aa14      	add	r2, sp, #80	; 0x50
1000e9fe:	8812      	ldrh	r2, [r2, #0]
1000ea00:	881b      	ldrh	r3, [r3, #0]
1000ea02:	9206      	str	r2, [sp, #24]
1000ea04:	aa15      	add	r2, sp, #84	; 0x54
1000ea06:	8817      	ldrh	r7, [r2, #0]
1000ea08:	2219      	movs	r2, #25
1000ea0a:	1852      	adds	r2, r2, r1
1000ea0c:	7fd2      	ldrb	r2, [r2, #31]
1000ea0e:	8831      	ldrh	r1, [r6, #0]
1000ea10:	9201      	str	r2, [sp, #4]
1000ea12:	2211      	movs	r2, #17
1000ea14:	7121      	strb	r1, [r4, #4]
1000ea16:	4669      	mov	r1, sp
1000ea18:	7022      	strb	r2, [r4, #0]
1000ea1a:	3a04      	subs	r2, #4
1000ea1c:	7062      	strb	r2, [r4, #1]
1000ea1e:	70a2      	strb	r2, [r4, #2]
1000ea20:	2200      	movs	r2, #0
1000ea22:	8836      	ldrh	r6, [r6, #0]
1000ea24:	7f09      	ldrb	r1, [r1, #28]
1000ea26:	0a36      	lsrs	r6, r6, #8
1000ea28:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000ea2a:	7166      	strb	r6, [r4, #5]
1000ea2c:	70e2      	strb	r2, [r4, #3]
1000ea2e:	7220      	strb	r0, [r4, #8]
1000ea30:	7261      	strb	r1, [r4, #9]
1000ea32:	72a2      	strb	r2, [r4, #10]
1000ea34:	72e2      	strb	r2, [r4, #11]
1000ea36:	7323      	strb	r3, [r4, #12]
1000ea38:	0a1b      	lsrs	r3, r3, #8
1000ea3a:	7363      	strb	r3, [r4, #13]
1000ea3c:	4663      	mov	r3, ip
1000ea3e:	73a3      	strb	r3, [r4, #14]
1000ea40:	4663      	mov	r3, ip
1000ea42:	0a1b      	lsrs	r3, r3, #8
1000ea44:	73e3      	strb	r3, [r4, #15]
1000ea46:	466b      	mov	r3, sp
1000ea48:	7a1b      	ldrb	r3, [r3, #8]
1000ea4a:	2607      	movs	r6, #7
1000ea4c:	7423      	strb	r3, [r4, #16]
1000ea4e:	9b02      	ldr	r3, [sp, #8]
1000ea50:	76a7      	strb	r7, [r4, #26]
1000ea52:	0a1b      	lsrs	r3, r3, #8
1000ea54:	7463      	strb	r3, [r4, #17]
1000ea56:	466b      	mov	r3, sp
1000ea58:	7b1b      	ldrb	r3, [r3, #12]
1000ea5a:	74a3      	strb	r3, [r4, #18]
1000ea5c:	9b03      	ldr	r3, [sp, #12]
1000ea5e:	0a1b      	lsrs	r3, r3, #8
1000ea60:	74e3      	strb	r3, [r4, #19]
1000ea62:	466b      	mov	r3, sp
1000ea64:	7c1b      	ldrb	r3, [r3, #16]
1000ea66:	7523      	strb	r3, [r4, #20]
1000ea68:	9b04      	ldr	r3, [sp, #16]
1000ea6a:	0a1b      	lsrs	r3, r3, #8
1000ea6c:	7563      	strb	r3, [r4, #21]
1000ea6e:	466b      	mov	r3, sp
1000ea70:	7d1b      	ldrb	r3, [r3, #20]
1000ea72:	75a3      	strb	r3, [r4, #22]
1000ea74:	9b05      	ldr	r3, [sp, #20]
1000ea76:	0a1b      	lsrs	r3, r3, #8
1000ea78:	75e3      	strb	r3, [r4, #23]
1000ea7a:	466b      	mov	r3, sp
1000ea7c:	7e1b      	ldrb	r3, [r3, #24]
1000ea7e:	7623      	strb	r3, [r4, #24]
1000ea80:	9b06      	ldr	r3, [sp, #24]
1000ea82:	0a1b      	lsrs	r3, r3, #8
1000ea84:	7663      	strb	r3, [r4, #25]
1000ea86:	0a3b      	lsrs	r3, r7, #8
1000ea88:	76e3      	strb	r3, [r4, #27]
1000ea8a:	466b      	mov	r3, sp
1000ea8c:	791b      	ldrb	r3, [r3, #4]
1000ea8e:	4f14      	ldr	r7, [pc, #80]	; (1000eae0 <gapm_start_connection_cmd_handler+0x110>)
1000ea90:	7723      	strb	r3, [r4, #28]
1000ea92:	9b01      	ldr	r3, [sp, #4]
1000ea94:	435e      	muls	r6, r3
1000ea96:	19ae      	adds	r6, r5, r6
1000ea98:	42b5      	cmp	r5, r6
1000ea9a:	d00f      	beq.n	1000eabc <gapm_start_connection_cmd_handler+0xec>
1000ea9c:	1c69      	adds	r1, r5, #1
1000ea9e:	1c38      	adds	r0, r7, #0
1000eaa0:	2206      	movs	r2, #6
1000eaa2:	4b10      	ldr	r3, [pc, #64]	; (1000eae4 <gapm_start_connection_cmd_handler+0x114>)
1000eaa4:	4798      	blx	r3
1000eaa6:	2200      	movs	r2, #0
1000eaa8:	2102      	movs	r1, #2
1000eaaa:	782b      	ldrb	r3, [r5, #0]
1000eaac:	3507      	adds	r5, #7
1000eaae:	3b01      	subs	r3, #1
1000eab0:	b2db      	uxtb	r3, r3
1000eab2:	4299      	cmp	r1, r3
1000eab4:	4152      	adcs	r2, r2
1000eab6:	71ba      	strb	r2, [r7, #6]
1000eab8:	3707      	adds	r7, #7
1000eaba:	e7ed      	b.n	1000ea98 <gapm_start_connection_cmd_handler+0xc8>
1000eabc:	2107      	movs	r1, #7
1000eabe:	9b01      	ldr	r3, [sp, #4]
1000eac0:	1c20      	adds	r0, r4, #0
1000eac2:	4359      	muls	r1, r3
1000eac4:	311d      	adds	r1, #29
1000eac6:	1c0b      	adds	r3, r1, #0
1000eac8:	3b08      	subs	r3, #8
1000eaca:	71a3      	strb	r3, [r4, #6]
1000eacc:	121b      	asrs	r3, r3, #8
1000eace:	71e3      	strb	r3, [r4, #7]
1000ead0:	4b05      	ldr	r3, [pc, #20]	; (1000eae8 <gapm_start_connection_cmd_handler+0x118>)
1000ead2:	4798      	blx	r3
1000ead4:	b009      	add	sp, #36	; 0x24
1000ead6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ead8:	10013ee4 	.word	0x10013ee4
1000eadc:	10014254 	.word	0x10014254
1000eae0:	10014271 	.word	0x10014271
1000eae4:	1001025f 	.word	0x1001025f
1000eae8:	1000d975 	.word	0x1000d975

1000eaec <gapm_resolv_addr_cmd_handler>:
1000eaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eaee:	2314      	movs	r3, #20
1000eaf0:	4c12      	ldr	r4, [pc, #72]	; (1000eb3c <gapm_resolv_addr_cmd_handler+0x50>)
1000eaf2:	1c17      	adds	r7, r2, #0
1000eaf4:	7023      	strb	r3, [r4, #0]
1000eaf6:	3b07      	subs	r3, #7
1000eaf8:	7063      	strb	r3, [r4, #1]
1000eafa:	70a3      	strb	r3, [r4, #2]
1000eafc:	2300      	movs	r3, #0
1000eafe:	70e3      	strb	r3, [r4, #3]
1000eb00:	4b0f      	ldr	r3, [pc, #60]	; (1000eb40 <gapm_resolv_addr_cmd_handler+0x54>)
1000eb02:	1c05      	adds	r5, r0, #0
1000eb04:	881a      	ldrh	r2, [r3, #0]
1000eb06:	881b      	ldrh	r3, [r3, #0]
1000eb08:	4e0e      	ldr	r6, [pc, #56]	; (1000eb44 <gapm_resolv_addr_cmd_handler+0x58>)
1000eb0a:	0a1b      	lsrs	r3, r3, #8
1000eb0c:	7163      	strb	r3, [r4, #5]
1000eb0e:	2317      	movs	r3, #23
1000eb10:	012d      	lsls	r5, r5, #4
1000eb12:	7122      	strb	r2, [r4, #4]
1000eb14:	7260      	strb	r0, [r4, #9]
1000eb16:	2206      	movs	r2, #6
1000eb18:	480b      	ldr	r0, [pc, #44]	; (1000eb48 <gapm_resolv_addr_cmd_handler+0x5c>)
1000eb1a:	7223      	strb	r3, [r4, #8]
1000eb1c:	47b0      	blx	r6
1000eb1e:	1c39      	adds	r1, r7, #0
1000eb20:	1c2a      	adds	r2, r5, #0
1000eb22:	480a      	ldr	r0, [pc, #40]	; (1000eb4c <gapm_resolv_addr_cmd_handler+0x60>)
1000eb24:	47b0      	blx	r6
1000eb26:	1c29      	adds	r1, r5, #0
1000eb28:	3110      	adds	r1, #16
1000eb2a:	1c0b      	adds	r3, r1, #0
1000eb2c:	3b08      	subs	r3, #8
1000eb2e:	71a3      	strb	r3, [r4, #6]
1000eb30:	121b      	asrs	r3, r3, #8
1000eb32:	71e3      	strb	r3, [r4, #7]
1000eb34:	1c20      	adds	r0, r4, #0
1000eb36:	4b06      	ldr	r3, [pc, #24]	; (1000eb50 <gapm_resolv_addr_cmd_handler+0x64>)
1000eb38:	4798      	blx	r3
1000eb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eb3c:	10014254 	.word	0x10014254
1000eb40:	10013ee4 	.word	0x10013ee4
1000eb44:	1001025f 	.word	0x1001025f
1000eb48:	1001425e 	.word	0x1001425e
1000eb4c:	10014264 	.word	0x10014264
1000eb50:	1000d975 	.word	0x1000d975

1000eb54 <gapm_addr_solved_ind_handler>:
1000eb54:	b570      	push	{r4, r5, r6, lr}
1000eb56:	1c04      	adds	r4, r0, #0
1000eb58:	1c08      	adds	r0, r1, #0
1000eb5a:	1c0d      	adds	r5, r1, #0
1000eb5c:	4e05      	ldr	r6, [pc, #20]	; (1000eb74 <gapm_addr_solved_ind_handler+0x20>)
1000eb5e:	1c21      	adds	r1, r4, #0
1000eb60:	2206      	movs	r2, #6
1000eb62:	3011      	adds	r0, #17
1000eb64:	47b0      	blx	r6
1000eb66:	1c68      	adds	r0, r5, #1
1000eb68:	1da1      	adds	r1, r4, #6
1000eb6a:	2210      	movs	r2, #16
1000eb6c:	47b0      	blx	r6
1000eb6e:	2300      	movs	r3, #0
1000eb70:	702b      	strb	r3, [r5, #0]
1000eb72:	bd70      	pop	{r4, r5, r6, pc}
1000eb74:	1001025f 	.word	0x1001025f

1000eb78 <gapm_profile_added_ind_handler>:
1000eb78:	b510      	push	{r4, lr}
1000eb7a:	7843      	ldrb	r3, [r0, #1]
1000eb7c:	7902      	ldrb	r2, [r0, #4]
1000eb7e:	7944      	ldrb	r4, [r0, #5]
1000eb80:	7800      	ldrb	r0, [r0, #0]
1000eb82:	021b      	lsls	r3, r3, #8
1000eb84:	4303      	orrs	r3, r0
1000eb86:	2b1b      	cmp	r3, #27
1000eb88:	d104      	bne.n	1000eb94 <gapm_profile_added_ind_handler+0x1c>
1000eb8a:	2300      	movs	r3, #0
1000eb8c:	700b      	strb	r3, [r1, #0]
1000eb8e:	0223      	lsls	r3, r4, #8
1000eb90:	4313      	orrs	r3, r2
1000eb92:	804b      	strh	r3, [r1, #2]
1000eb94:	203b      	movs	r0, #59	; 0x3b
1000eb96:	bd10      	pop	{r4, pc}

1000eb98 <gattc_read_req_ind_parser>:
1000eb98:	7843      	ldrb	r3, [r0, #1]
1000eb9a:	7802      	ldrb	r2, [r0, #0]
1000eb9c:	021b      	lsls	r3, r3, #8
1000eb9e:	4313      	orrs	r3, r2
1000eba0:	804b      	strh	r3, [r1, #2]
1000eba2:	4770      	bx	lr

1000eba4 <gattc_write_req_ind_parser>:
1000eba4:	b508      	push	{r3, lr}
1000eba6:	1c13      	adds	r3, r2, #0
1000eba8:	0a00      	lsrs	r0, r0, #8
1000ebaa:	8010      	strh	r0, [r2, #0]
1000ebac:	784a      	ldrb	r2, [r1, #1]
1000ebae:	7808      	ldrb	r0, [r1, #0]
1000ebb0:	0212      	lsls	r2, r2, #8
1000ebb2:	4302      	orrs	r2, r0
1000ebb4:	805a      	strh	r2, [r3, #2]
1000ebb6:	78ca      	ldrb	r2, [r1, #3]
1000ebb8:	7888      	ldrb	r0, [r1, #2]
1000ebba:	0212      	lsls	r2, r2, #8
1000ebbc:	4302      	orrs	r2, r0
1000ebbe:	809a      	strh	r2, [r3, #4]
1000ebc0:	794a      	ldrb	r2, [r1, #5]
1000ebc2:	7908      	ldrb	r0, [r1, #4]
1000ebc4:	0212      	lsls	r2, r2, #8
1000ebc6:	4302      	orrs	r2, r0
1000ebc8:	80da      	strh	r2, [r3, #6]
1000ebca:	3308      	adds	r3, #8
1000ebcc:	1c18      	adds	r0, r3, #0
1000ebce:	3106      	adds	r1, #6
1000ebd0:	4b01      	ldr	r3, [pc, #4]	; (1000ebd8 <gattc_write_req_ind_parser+0x34>)
1000ebd2:	4798      	blx	r3
1000ebd4:	bd08      	pop	{r3, pc}
1000ebd6:	46c0      	nop			; (mov r8, r8)
1000ebd8:	1001025f 	.word	0x1001025f

1000ebdc <gattc_att_info_req_parser>:
1000ebdc:	7843      	ldrb	r3, [r0, #1]
1000ebde:	7802      	ldrb	r2, [r0, #0]
1000ebe0:	021b      	lsls	r3, r3, #8
1000ebe2:	4313      	orrs	r3, r2
1000ebe4:	800b      	strh	r3, [r1, #0]
1000ebe6:	4770      	bx	lr

1000ebe8 <gattc_read_cfm>:
1000ebe8:	b538      	push	{r3, r4, r5, lr}
1000ebea:	2514      	movs	r5, #20
1000ebec:	1c1c      	adds	r4, r3, #0
1000ebee:	4b14      	ldr	r3, [pc, #80]	; (1000ec40 <gattc_read_cfm+0x58>)
1000ebf0:	70d9      	strb	r1, [r3, #3]
1000ebf2:	4914      	ldr	r1, [pc, #80]	; (1000ec44 <gattc_read_cfm+0x5c>)
1000ebf4:	701d      	strb	r5, [r3, #0]
1000ebf6:	3d08      	subs	r5, #8
1000ebf8:	705d      	strb	r5, [r3, #1]
1000ebfa:	709d      	strb	r5, [r3, #2]
1000ebfc:	880d      	ldrh	r5, [r1, #0]
1000ebfe:	8809      	ldrh	r1, [r1, #0]
1000ec00:	7218      	strb	r0, [r3, #8]
1000ec02:	0a09      	lsrs	r1, r1, #8
1000ec04:	7159      	strb	r1, [r3, #5]
1000ec06:	0a00      	lsrs	r0, r0, #8
1000ec08:	0a21      	lsrs	r1, r4, #8
1000ec0a:	711d      	strb	r5, [r3, #4]
1000ec0c:	7258      	strb	r0, [r3, #9]
1000ec0e:	729c      	strb	r4, [r3, #10]
1000ec10:	72d9      	strb	r1, [r3, #11]
1000ec12:	731a      	strb	r2, [r3, #12]
1000ec14:	1c1d      	adds	r5, r3, #0
1000ec16:	2c00      	cmp	r4, #0
1000ec18:	d007      	beq.n	1000ec2a <gattc_read_cfm+0x42>
1000ec1a:	9904      	ldr	r1, [sp, #16]
1000ec1c:	1c22      	adds	r2, r4, #0
1000ec1e:	480a      	ldr	r0, [pc, #40]	; (1000ec48 <gattc_read_cfm+0x60>)
1000ec20:	4b0a      	ldr	r3, [pc, #40]	; (1000ec4c <gattc_read_cfm+0x64>)
1000ec22:	340d      	adds	r4, #13
1000ec24:	4798      	blx	r3
1000ec26:	b2a1      	uxth	r1, r4
1000ec28:	e001      	b.n	1000ec2e <gattc_read_cfm+0x46>
1000ec2a:	210e      	movs	r1, #14
1000ec2c:	735c      	strb	r4, [r3, #13]
1000ec2e:	1c0b      	adds	r3, r1, #0
1000ec30:	3b08      	subs	r3, #8
1000ec32:	71ab      	strb	r3, [r5, #6]
1000ec34:	121b      	asrs	r3, r3, #8
1000ec36:	71eb      	strb	r3, [r5, #7]
1000ec38:	1c28      	adds	r0, r5, #0
1000ec3a:	4b05      	ldr	r3, [pc, #20]	; (1000ec50 <gattc_read_cfm+0x68>)
1000ec3c:	4798      	blx	r3
1000ec3e:	bd38      	pop	{r3, r4, r5, pc}
1000ec40:	10014254 	.word	0x10014254
1000ec44:	10013ee4 	.word	0x10013ee4
1000ec48:	10014261 	.word	0x10014261
1000ec4c:	1001025f 	.word	0x1001025f
1000ec50:	1000d975 	.word	0x1000d975

1000ec54 <gattc_write_cfm>:
1000ec54:	4b0d      	ldr	r3, [pc, #52]	; (1000ec8c <gattc_write_cfm+0x38>)
1000ec56:	b510      	push	{r4, lr}
1000ec58:	729a      	strb	r2, [r3, #10]
1000ec5a:	2203      	movs	r2, #3
1000ec5c:	2416      	movs	r4, #22
1000ec5e:	719a      	strb	r2, [r3, #6]
1000ec60:	2200      	movs	r2, #0
1000ec62:	70d9      	strb	r1, [r3, #3]
1000ec64:	490a      	ldr	r1, [pc, #40]	; (1000ec90 <gattc_write_cfm+0x3c>)
1000ec66:	701c      	strb	r4, [r3, #0]
1000ec68:	3c0a      	subs	r4, #10
1000ec6a:	705c      	strb	r4, [r3, #1]
1000ec6c:	709c      	strb	r4, [r3, #2]
1000ec6e:	880c      	ldrh	r4, [r1, #0]
1000ec70:	8809      	ldrh	r1, [r1, #0]
1000ec72:	7218      	strb	r0, [r3, #8]
1000ec74:	0a09      	lsrs	r1, r1, #8
1000ec76:	0a00      	lsrs	r0, r0, #8
1000ec78:	711c      	strb	r4, [r3, #4]
1000ec7a:	7159      	strb	r1, [r3, #5]
1000ec7c:	7258      	strb	r0, [r3, #9]
1000ec7e:	71da      	strb	r2, [r3, #7]
1000ec80:	1c18      	adds	r0, r3, #0
1000ec82:	210b      	movs	r1, #11
1000ec84:	4b03      	ldr	r3, [pc, #12]	; (1000ec94 <gattc_write_cfm+0x40>)
1000ec86:	4798      	blx	r3
1000ec88:	bd10      	pop	{r4, pc}
1000ec8a:	46c0      	nop			; (mov r8, r8)
1000ec8c:	10014254 	.word	0x10014254
1000ec90:	10013ee4 	.word	0x10013ee4
1000ec94:	1000d975 	.word	0x1000d975

1000ec98 <gattc_att_info_cfm>:
1000ec98:	b538      	push	{r3, r4, r5, lr}
1000ec9a:	4c0e      	ldr	r4, [pc, #56]	; (1000ecd4 <gattc_att_info_cfm+0x3c>)
1000ec9c:	2518      	movs	r5, #24
1000ec9e:	7323      	strb	r3, [r4, #12]
1000eca0:	2305      	movs	r3, #5
1000eca2:	71a3      	strb	r3, [r4, #6]
1000eca4:	2300      	movs	r3, #0
1000eca6:	70e1      	strb	r1, [r4, #3]
1000eca8:	490b      	ldr	r1, [pc, #44]	; (1000ecd8 <gattc_att_info_cfm+0x40>)
1000ecaa:	7025      	strb	r5, [r4, #0]
1000ecac:	3d0c      	subs	r5, #12
1000ecae:	7065      	strb	r5, [r4, #1]
1000ecb0:	70a5      	strb	r5, [r4, #2]
1000ecb2:	880d      	ldrh	r5, [r1, #0]
1000ecb4:	8809      	ldrh	r1, [r1, #0]
1000ecb6:	7220      	strb	r0, [r4, #8]
1000ecb8:	0a09      	lsrs	r1, r1, #8
1000ecba:	0a00      	lsrs	r0, r0, #8
1000ecbc:	7161      	strb	r1, [r4, #5]
1000ecbe:	7260      	strb	r0, [r4, #9]
1000ecc0:	72a2      	strb	r2, [r4, #10]
1000ecc2:	71e3      	strb	r3, [r4, #7]
1000ecc4:	0a12      	lsrs	r2, r2, #8
1000ecc6:	1c20      	adds	r0, r4, #0
1000ecc8:	210d      	movs	r1, #13
1000ecca:	4b04      	ldr	r3, [pc, #16]	; (1000ecdc <gattc_att_info_cfm+0x44>)
1000eccc:	7125      	strb	r5, [r4, #4]
1000ecce:	72e2      	strb	r2, [r4, #11]
1000ecd0:	4798      	blx	r3
1000ecd2:	bd38      	pop	{r3, r4, r5, pc}
1000ecd4:	10014254 	.word	0x10014254
1000ecd8:	10013ee4 	.word	0x10013ee4
1000ecdc:	1000d975 	.word	0x1000d975

1000ece0 <gattc_disc_cmd_handler>:
1000ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ece2:	2603      	movs	r6, #3
1000ece4:	ac06      	add	r4, sp, #24
1000ece6:	1c0d      	adds	r5, r1, #0
1000ece8:	cc02      	ldmia	r4!, {r1}
1000ecea:	8827      	ldrh	r7, [r4, #0]
1000ecec:	4c1a      	ldr	r4, [pc, #104]	; (1000ed58 <gattc_disc_cmd_handler+0x78>)
1000ecee:	7026      	strb	r6, [r4, #0]
1000ecf0:	3609      	adds	r6, #9
1000ecf2:	7066      	strb	r6, [r4, #1]
1000ecf4:	70a6      	strb	r6, [r4, #2]
1000ecf6:	4e19      	ldr	r6, [pc, #100]	; (1000ed5c <gattc_disc_cmd_handler+0x7c>)
1000ecf8:	70e7      	strb	r7, [r4, #3]
1000ecfa:	8837      	ldrh	r7, [r6, #0]
1000ecfc:	8836      	ldrh	r6, [r6, #0]
1000ecfe:	7127      	strb	r7, [r4, #4]
1000ed00:	0a36      	lsrs	r6, r6, #8
1000ed02:	7166      	strb	r6, [r4, #5]
1000ed04:	7220      	strb	r0, [r4, #8]
1000ed06:	2900      	cmp	r1, #0
1000ed08:	d102      	bne.n	1000ed10 <gattc_disc_cmd_handler+0x30>
1000ed0a:	2002      	movs	r0, #2
1000ed0c:	7260      	strb	r0, [r4, #9]
1000ed0e:	e000      	b.n	1000ed12 <gattc_disc_cmd_handler+0x32>
1000ed10:	7265      	strb	r5, [r4, #9]
1000ed12:	4e13      	ldr	r6, [pc, #76]	; (1000ed60 <gattc_disc_cmd_handler+0x80>)
1000ed14:	7322      	strb	r2, [r4, #12]
1000ed16:	8830      	ldrh	r0, [r6, #0]
1000ed18:	0a12      	lsrs	r2, r2, #8
1000ed1a:	0a07      	lsrs	r7, r0, #8
1000ed1c:	72a0      	strb	r0, [r4, #10]
1000ed1e:	73a3      	strb	r3, [r4, #14]
1000ed20:	3001      	adds	r0, #1
1000ed22:	0a1b      	lsrs	r3, r3, #8
1000ed24:	72e7      	strb	r7, [r4, #11]
1000ed26:	8030      	strh	r0, [r6, #0]
1000ed28:	7362      	strb	r2, [r4, #13]
1000ed2a:	73e3      	strb	r3, [r4, #15]
1000ed2c:	2900      	cmp	r1, #0
1000ed2e:	d103      	bne.n	1000ed38 <gattc_disc_cmd_handler+0x58>
1000ed30:	7421      	strb	r1, [r4, #16]
1000ed32:	7461      	strb	r1, [r4, #17]
1000ed34:	3112      	adds	r1, #18
1000ed36:	e005      	b.n	1000ed44 <gattc_disc_cmd_handler+0x64>
1000ed38:	480a      	ldr	r0, [pc, #40]	; (1000ed64 <gattc_disc_cmd_handler+0x84>)
1000ed3a:	1c2a      	adds	r2, r5, #0
1000ed3c:	4b0a      	ldr	r3, [pc, #40]	; (1000ed68 <gattc_disc_cmd_handler+0x88>)
1000ed3e:	4798      	blx	r3
1000ed40:	1c29      	adds	r1, r5, #0
1000ed42:	3110      	adds	r1, #16
1000ed44:	1c0b      	adds	r3, r1, #0
1000ed46:	3b08      	subs	r3, #8
1000ed48:	71a3      	strb	r3, [r4, #6]
1000ed4a:	121b      	asrs	r3, r3, #8
1000ed4c:	71e3      	strb	r3, [r4, #7]
1000ed4e:	1c20      	adds	r0, r4, #0
1000ed50:	4b06      	ldr	r3, [pc, #24]	; (1000ed6c <gattc_disc_cmd_handler+0x8c>)
1000ed52:	4798      	blx	r3
1000ed54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ed56:	46c0      	nop			; (mov r8, r8)
1000ed58:	10014254 	.word	0x10014254
1000ed5c:	10013ee4 	.word	0x10013ee4
1000ed60:	100131ca 	.word	0x100131ca
1000ed64:	10014264 	.word	0x10014264
1000ed68:	1001025f 	.word	0x1001025f
1000ed6c:	1000d975 	.word	0x1000d975

1000ed70 <gattc_event_cfm_handler>:
1000ed70:	220e      	movs	r2, #14
1000ed72:	b508      	push	{r3, lr}
1000ed74:	4b0b      	ldr	r3, [pc, #44]	; (1000eda4 <gattc_event_cfm_handler+0x34>)
1000ed76:	701a      	strb	r2, [r3, #0]
1000ed78:	3a02      	subs	r2, #2
1000ed7a:	705a      	strb	r2, [r3, #1]
1000ed7c:	709a      	strb	r2, [r3, #2]
1000ed7e:	4a0a      	ldr	r2, [pc, #40]	; (1000eda8 <gattc_event_cfm_handler+0x38>)
1000ed80:	70d8      	strb	r0, [r3, #3]
1000ed82:	8810      	ldrh	r0, [r2, #0]
1000ed84:	8812      	ldrh	r2, [r2, #0]
1000ed86:	7219      	strb	r1, [r3, #8]
1000ed88:	0a12      	lsrs	r2, r2, #8
1000ed8a:	715a      	strb	r2, [r3, #5]
1000ed8c:	2202      	movs	r2, #2
1000ed8e:	719a      	strb	r2, [r3, #6]
1000ed90:	2200      	movs	r2, #0
1000ed92:	0a09      	lsrs	r1, r1, #8
1000ed94:	7118      	strb	r0, [r3, #4]
1000ed96:	7259      	strb	r1, [r3, #9]
1000ed98:	71da      	strb	r2, [r3, #7]
1000ed9a:	1c18      	adds	r0, r3, #0
1000ed9c:	210a      	movs	r1, #10
1000ed9e:	4b03      	ldr	r3, [pc, #12]	; (1000edac <gattc_event_cfm_handler+0x3c>)
1000eda0:	4798      	blx	r3
1000eda2:	bd08      	pop	{r3, pc}
1000eda4:	10014254 	.word	0x10014254
1000eda8:	10013ee4 	.word	0x10013ee4
1000edac:	1000d975 	.word	0x1000d975

1000edb0 <gattc_disc_svc_ind_parser>:
1000edb0:	b570      	push	{r4, r5, r6, lr}
1000edb2:	1c15      	adds	r5, r2, #0
1000edb4:	0a00      	lsrs	r0, r0, #8
1000edb6:	8010      	strh	r0, [r2, #0]
1000edb8:	784b      	ldrb	r3, [r1, #1]
1000edba:	780a      	ldrb	r2, [r1, #0]
1000edbc:	021b      	lsls	r3, r3, #8
1000edbe:	4313      	orrs	r3, r2
1000edc0:	806b      	strh	r3, [r5, #2]
1000edc2:	78cb      	ldrb	r3, [r1, #3]
1000edc4:	788a      	ldrb	r2, [r1, #2]
1000edc6:	021b      	lsls	r3, r3, #8
1000edc8:	4313      	orrs	r3, r2
1000edca:	80ab      	strh	r3, [r5, #4]
1000edcc:	790e      	ldrb	r6, [r1, #4]
1000edce:	4b05      	ldr	r3, [pc, #20]	; (1000ede4 <gattc_disc_svc_ind_parser+0x34>)
1000edd0:	1c30      	adds	r0, r6, #0
1000edd2:	1c0c      	adds	r4, r1, #0
1000edd4:	4798      	blx	r3
1000edd6:	1c32      	adds	r2, r6, #0
1000edd8:	71a8      	strb	r0, [r5, #6]
1000edda:	1d61      	adds	r1, r4, #5
1000eddc:	1de8      	adds	r0, r5, #7
1000edde:	4b02      	ldr	r3, [pc, #8]	; (1000ede8 <gattc_disc_svc_ind_parser+0x38>)
1000ede0:	4798      	blx	r3
1000ede2:	bd70      	pop	{r4, r5, r6, pc}
1000ede4:	1000d35d 	.word	0x1000d35d
1000ede8:	1001025f 	.word	0x1001025f

1000edec <gattc_disc_svc_incl_ind_parser>:
1000edec:	b570      	push	{r4, r5, r6, lr}
1000edee:	1c15      	adds	r5, r2, #0
1000edf0:	0a00      	lsrs	r0, r0, #8
1000edf2:	8010      	strh	r0, [r2, #0]
1000edf4:	784b      	ldrb	r3, [r1, #1]
1000edf6:	780a      	ldrb	r2, [r1, #0]
1000edf8:	021b      	lsls	r3, r3, #8
1000edfa:	4313      	orrs	r3, r2
1000edfc:	806b      	strh	r3, [r5, #2]
1000edfe:	78cb      	ldrb	r3, [r1, #3]
1000ee00:	788a      	ldrb	r2, [r1, #2]
1000ee02:	021b      	lsls	r3, r3, #8
1000ee04:	4313      	orrs	r3, r2
1000ee06:	80ab      	strh	r3, [r5, #4]
1000ee08:	794b      	ldrb	r3, [r1, #5]
1000ee0a:	790a      	ldrb	r2, [r1, #4]
1000ee0c:	021b      	lsls	r3, r3, #8
1000ee0e:	4313      	orrs	r3, r2
1000ee10:	80eb      	strh	r3, [r5, #6]
1000ee12:	798e      	ldrb	r6, [r1, #6]
1000ee14:	4b05      	ldr	r3, [pc, #20]	; (1000ee2c <gattc_disc_svc_incl_ind_parser+0x40>)
1000ee16:	1c30      	adds	r0, r6, #0
1000ee18:	1c0c      	adds	r4, r1, #0
1000ee1a:	4798      	blx	r3
1000ee1c:	7228      	strb	r0, [r5, #8]
1000ee1e:	1c28      	adds	r0, r5, #0
1000ee20:	1c32      	adds	r2, r6, #0
1000ee22:	1de1      	adds	r1, r4, #7
1000ee24:	4b02      	ldr	r3, [pc, #8]	; (1000ee30 <gattc_disc_svc_incl_ind_parser+0x44>)
1000ee26:	3009      	adds	r0, #9
1000ee28:	4798      	blx	r3
1000ee2a:	bd70      	pop	{r4, r5, r6, pc}
1000ee2c:	1000d35d 	.word	0x1000d35d
1000ee30:	1001025f 	.word	0x1001025f

1000ee34 <gattc_disc_char_ind_parser>:
1000ee34:	b570      	push	{r4, r5, r6, lr}
1000ee36:	1c15      	adds	r5, r2, #0
1000ee38:	0a00      	lsrs	r0, r0, #8
1000ee3a:	8010      	strh	r0, [r2, #0]
1000ee3c:	784b      	ldrb	r3, [r1, #1]
1000ee3e:	780a      	ldrb	r2, [r1, #0]
1000ee40:	021b      	lsls	r3, r3, #8
1000ee42:	4313      	orrs	r3, r2
1000ee44:	806b      	strh	r3, [r5, #2]
1000ee46:	78cb      	ldrb	r3, [r1, #3]
1000ee48:	788a      	ldrb	r2, [r1, #2]
1000ee4a:	021b      	lsls	r3, r3, #8
1000ee4c:	4313      	orrs	r3, r2
1000ee4e:	80ab      	strh	r3, [r5, #4]
1000ee50:	790b      	ldrb	r3, [r1, #4]
1000ee52:	1c0c      	adds	r4, r1, #0
1000ee54:	71ab      	strb	r3, [r5, #6]
1000ee56:	794e      	ldrb	r6, [r1, #5]
1000ee58:	4b05      	ldr	r3, [pc, #20]	; (1000ee70 <gattc_disc_char_ind_parser+0x3c>)
1000ee5a:	1c30      	adds	r0, r6, #0
1000ee5c:	4798      	blx	r3
1000ee5e:	71e8      	strb	r0, [r5, #7]
1000ee60:	1c28      	adds	r0, r5, #0
1000ee62:	1c32      	adds	r2, r6, #0
1000ee64:	1da1      	adds	r1, r4, #6
1000ee66:	4b03      	ldr	r3, [pc, #12]	; (1000ee74 <gattc_disc_char_ind_parser+0x40>)
1000ee68:	3008      	adds	r0, #8
1000ee6a:	4798      	blx	r3
1000ee6c:	bd70      	pop	{r4, r5, r6, pc}
1000ee6e:	46c0      	nop			; (mov r8, r8)
1000ee70:	1000d35d 	.word	0x1000d35d
1000ee74:	1001025f 	.word	0x1001025f

1000ee78 <gattc_disc_char_desc_ind_parser>:
1000ee78:	b570      	push	{r4, r5, r6, lr}
1000ee7a:	1c15      	adds	r5, r2, #0
1000ee7c:	0a00      	lsrs	r0, r0, #8
1000ee7e:	8010      	strh	r0, [r2, #0]
1000ee80:	784b      	ldrb	r3, [r1, #1]
1000ee82:	780a      	ldrb	r2, [r1, #0]
1000ee84:	021b      	lsls	r3, r3, #8
1000ee86:	4313      	orrs	r3, r2
1000ee88:	806b      	strh	r3, [r5, #2]
1000ee8a:	788e      	ldrb	r6, [r1, #2]
1000ee8c:	4b05      	ldr	r3, [pc, #20]	; (1000eea4 <gattc_disc_char_desc_ind_parser+0x2c>)
1000ee8e:	1c30      	adds	r0, r6, #0
1000ee90:	1c0c      	adds	r4, r1, #0
1000ee92:	4798      	blx	r3
1000ee94:	1c32      	adds	r2, r6, #0
1000ee96:	7128      	strb	r0, [r5, #4]
1000ee98:	1ce1      	adds	r1, r4, #3
1000ee9a:	1d68      	adds	r0, r5, #5
1000ee9c:	4b02      	ldr	r3, [pc, #8]	; (1000eea8 <gattc_disc_char_desc_ind_parser+0x30>)
1000ee9e:	4798      	blx	r3
1000eea0:	bd70      	pop	{r4, r5, r6, pc}
1000eea2:	46c0      	nop			; (mov r8, r8)
1000eea4:	1000d35d 	.word	0x1000d35d
1000eea8:	1001025f 	.word	0x1001025f

1000eeac <gattc_event_ind_and_notification_parser>:
1000eeac:	b510      	push	{r4, lr}
1000eeae:	780c      	ldrb	r4, [r1, #0]
1000eeb0:	1c13      	adds	r3, r2, #0
1000eeb2:	2c12      	cmp	r4, #18
1000eeb4:	d10e      	bne.n	1000eed4 <gattc_event_ind_and_notification_parser+0x28>
1000eeb6:	0a00      	lsrs	r0, r0, #8
1000eeb8:	8010      	strh	r0, [r2, #0]
1000eeba:	788a      	ldrb	r2, [r1, #2]
1000eebc:	709a      	strb	r2, [r3, #2]
1000eebe:	7948      	ldrb	r0, [r1, #5]
1000eec0:	790c      	ldrb	r4, [r1, #4]
1000eec2:	0200      	lsls	r0, r0, #8
1000eec4:	4320      	orrs	r0, r4
1000eec6:	8098      	strh	r0, [r3, #4]
1000eec8:	3106      	adds	r1, #6
1000eeca:	1d98      	adds	r0, r3, #6
1000eecc:	4b0b      	ldr	r3, [pc, #44]	; (1000eefc <gattc_event_ind_and_notification_parser+0x50>)
1000eece:	4798      	blx	r3
1000eed0:	221b      	movs	r2, #27
1000eed2:	e010      	b.n	1000eef6 <gattc_event_ind_and_notification_parser+0x4a>
1000eed4:	2200      	movs	r2, #0
1000eed6:	2c13      	cmp	r4, #19
1000eed8:	d10d      	bne.n	1000eef6 <gattc_event_ind_and_notification_parser+0x4a>
1000eeda:	0a00      	lsrs	r0, r0, #8
1000eedc:	8018      	strh	r0, [r3, #0]
1000eede:	788a      	ldrb	r2, [r1, #2]
1000eee0:	709a      	strb	r2, [r3, #2]
1000eee2:	7908      	ldrb	r0, [r1, #4]
1000eee4:	78cc      	ldrb	r4, [r1, #3]
1000eee6:	0200      	lsls	r0, r0, #8
1000eee8:	4320      	orrs	r0, r4
1000eeea:	8098      	strh	r0, [r3, #4]
1000eeec:	3106      	adds	r1, #6
1000eeee:	1d98      	adds	r0, r3, #6
1000eef0:	4b02      	ldr	r3, [pc, #8]	; (1000eefc <gattc_event_ind_and_notification_parser+0x50>)
1000eef2:	4798      	blx	r3
1000eef4:	221c      	movs	r2, #28
1000eef6:	1c10      	adds	r0, r2, #0
1000eef8:	bd10      	pop	{r4, pc}
1000eefa:	46c0      	nop			; (mov r8, r8)
1000eefc:	1001025f 	.word	0x1001025f

1000ef00 <gattc_complete_evt_handler>:
1000ef00:	b500      	push	{lr}
1000ef02:	0a00      	lsrs	r0, r0, #8
1000ef04:	8010      	strh	r0, [r2, #0]
1000ef06:	7808      	ldrb	r0, [r1, #0]
1000ef08:	7090      	strb	r0, [r2, #2]
1000ef0a:	784b      	ldrb	r3, [r1, #1]
1000ef0c:	3801      	subs	r0, #1
1000ef0e:	70d3      	strb	r3, [r2, #3]
1000ef10:	2813      	cmp	r0, #19
1000ef12:	d82c      	bhi.n	1000ef6e <gattc_complete_evt_handler+0x6e>
1000ef14:	f000 f914 	bl	1000f140 <__gnu_thumb1_case_uqi>
1000ef18:	0a0a0a0c 	.word	0x0a0a0a0c
1000ef1c:	210a0a0a 	.word	0x210a0a0a
1000ef20:	111f2121 	.word	0x111f2121
1000ef24:	2b111111 	.word	0x2b111111
1000ef28:	2919132b 	.word	0x2919132b
1000ef2c:	2017      	movs	r0, #23
1000ef2e:	e01f      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef30:	2024      	movs	r0, #36	; 0x24
1000ef32:	2b00      	cmp	r3, #0
1000ef34:	d11c      	bne.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef36:	3017      	adds	r0, #23
1000ef38:	e01a      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef3a:	2025      	movs	r0, #37	; 0x25
1000ef3c:	e018      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef3e:	4a0d      	ldr	r2, [pc, #52]	; (1000ef74 <gattc_complete_evt_handler+0x74>)
1000ef40:	201d      	movs	r0, #29
1000ef42:	6813      	ldr	r3, [r2, #0]
1000ef44:	3b01      	subs	r3, #1
1000ef46:	6013      	str	r3, [r2, #0]
1000ef48:	e012      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef4a:	4a0a      	ldr	r2, [pc, #40]	; (1000ef74 <gattc_complete_evt_handler+0x74>)
1000ef4c:	201e      	movs	r0, #30
1000ef4e:	6813      	ldr	r3, [r2, #0]
1000ef50:	3b01      	subs	r3, #1
1000ef52:	6013      	str	r3, [r2, #0]
1000ef54:	e00c      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef56:	2019      	movs	r0, #25
1000ef58:	e00a      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef5a:	203b      	movs	r0, #59	; 0x3b
1000ef5c:	2b00      	cmp	r3, #0
1000ef5e:	d007      	beq.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef60:	2182      	movs	r1, #130	; 0x82
1000ef62:	0089      	lsls	r1, r1, #2
1000ef64:	5453      	strb	r3, [r2, r1]
1000ef66:	3823      	subs	r0, #35	; 0x23
1000ef68:	e002      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef6a:	2021      	movs	r0, #33	; 0x21
1000ef6c:	e000      	b.n	1000ef70 <gattc_complete_evt_handler+0x70>
1000ef6e:	2000      	movs	r0, #0
1000ef70:	bd00      	pop	{pc}
1000ef72:	46c0      	nop			; (mov r8, r8)
1000ef74:	100131d0 	.word	0x100131d0

1000ef78 <gattc_event_mtu_changed_ind_parser>:
1000ef78:	0a00      	lsrs	r0, r0, #8
1000ef7a:	8010      	strh	r0, [r2, #0]
1000ef7c:	784b      	ldrb	r3, [r1, #1]
1000ef7e:	7809      	ldrb	r1, [r1, #0]
1000ef80:	021b      	lsls	r3, r3, #8
1000ef82:	430b      	orrs	r3, r1
1000ef84:	8053      	strh	r3, [r2, #2]
1000ef86:	4770      	bx	lr

1000ef88 <gattc_read_ind_parser>:
1000ef88:	0a00      	lsrs	r0, r0, #8
1000ef8a:	b508      	push	{r3, lr}
1000ef8c:	8010      	strh	r0, [r2, #0]
1000ef8e:	1c13      	adds	r3, r2, #0
1000ef90:	2282      	movs	r2, #130	; 0x82
1000ef92:	2000      	movs	r0, #0
1000ef94:	0092      	lsls	r2, r2, #2
1000ef96:	5498      	strb	r0, [r3, r2]
1000ef98:	784a      	ldrb	r2, [r1, #1]
1000ef9a:	7808      	ldrb	r0, [r1, #0]
1000ef9c:	0212      	lsls	r2, r2, #8
1000ef9e:	4302      	orrs	r2, r0
1000efa0:	805a      	strh	r2, [r3, #2]
1000efa2:	78ca      	ldrb	r2, [r1, #3]
1000efa4:	7888      	ldrb	r0, [r1, #2]
1000efa6:	0212      	lsls	r2, r2, #8
1000efa8:	4302      	orrs	r2, r0
1000efaa:	80da      	strh	r2, [r3, #6]
1000efac:	794a      	ldrb	r2, [r1, #5]
1000efae:	7908      	ldrb	r0, [r1, #4]
1000efb0:	0212      	lsls	r2, r2, #8
1000efb2:	4302      	orrs	r2, r0
1000efb4:	809a      	strh	r2, [r3, #4]
1000efb6:	3308      	adds	r3, #8
1000efb8:	1c18      	adds	r0, r3, #0
1000efba:	3106      	adds	r1, #6
1000efbc:	4b01      	ldr	r3, [pc, #4]	; (1000efc4 <gattc_read_ind_parser+0x3c>)
1000efbe:	4798      	blx	r3
1000efc0:	bd08      	pop	{r3, pc}
1000efc2:	46c0      	nop			; (mov r8, r8)
1000efc4:	1001025f 	.word	0x1001025f

1000efc8 <gattc_svc_changed_cfg_ind_parser>:
1000efc8:	0a00      	lsrs	r0, r0, #8
1000efca:	8010      	strh	r0, [r2, #0]
1000efcc:	784b      	ldrb	r3, [r1, #1]
1000efce:	7809      	ldrb	r1, [r1, #0]
1000efd0:	021b      	lsls	r3, r3, #8
1000efd2:	430b      	orrs	r3, r1
1000efd4:	8053      	strh	r3, [r2, #2]
1000efd6:	4770      	bx	lr

1000efd8 <init_gattc_task_module>:
1000efd8:	2300      	movs	r3, #0
1000efda:	4a02      	ldr	r2, [pc, #8]	; (1000efe4 <init_gattc_task_module+0xc>)
1000efdc:	8013      	strh	r3, [r2, #0]
1000efde:	4a02      	ldr	r2, [pc, #8]	; (1000efe8 <init_gattc_task_module+0x10>)
1000efe0:	8013      	strh	r3, [r2, #0]
1000efe2:	4770      	bx	lr
1000efe4:	100131ca 	.word	0x100131ca
1000efe8:	100131cc 	.word	0x100131cc

1000efec <gattm_att_set_value_req_handler>:
1000efec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000efee:	466b      	mov	r3, sp
1000eff0:	1dde      	adds	r6, r3, #7
1000eff2:	2300      	movs	r3, #0
1000eff4:	1c0d      	adds	r5, r1, #0
1000eff6:	210c      	movs	r1, #12
1000eff8:	270b      	movs	r7, #11
1000effa:	4c17      	ldr	r4, [pc, #92]	; (1000f058 <gattm_att_set_value_req_handler+0x6c>)
1000effc:	7033      	strb	r3, [r6, #0]
1000effe:	70e3      	strb	r3, [r4, #3]
1000f000:	4b16      	ldr	r3, [pc, #88]	; (1000f05c <gattm_att_set_value_req_handler+0x70>)
1000f002:	7021      	strb	r1, [r4, #0]
1000f004:	8819      	ldrh	r1, [r3, #0]
1000f006:	881b      	ldrh	r3, [r3, #0]
1000f008:	7220      	strb	r0, [r4, #8]
1000f00a:	0a1b      	lsrs	r3, r3, #8
1000f00c:	7163      	strb	r3, [r4, #5]
1000f00e:	0a00      	lsrs	r0, r0, #8
1000f010:	0a2b      	lsrs	r3, r5, #8
1000f012:	7121      	strb	r1, [r4, #4]
1000f014:	7260      	strb	r0, [r4, #9]
1000f016:	1c11      	adds	r1, r2, #0
1000f018:	72a5      	strb	r5, [r4, #10]
1000f01a:	1c2a      	adds	r2, r5, #0
1000f01c:	72e3      	strb	r3, [r4, #11]
1000f01e:	350c      	adds	r5, #12
1000f020:	4b0f      	ldr	r3, [pc, #60]	; (1000f060 <gattm_att_set_value_req_handler+0x74>)
1000f022:	4810      	ldr	r0, [pc, #64]	; (1000f064 <gattm_att_set_value_req_handler+0x78>)
1000f024:	7067      	strb	r7, [r4, #1]
1000f026:	70a7      	strb	r7, [r4, #2]
1000f028:	4798      	blx	r3
1000f02a:	b2a9      	uxth	r1, r5
1000f02c:	4b0e      	ldr	r3, [pc, #56]	; (1000f068 <gattm_att_set_value_req_handler+0x7c>)
1000f02e:	4d0f      	ldr	r5, [pc, #60]	; (1000f06c <gattm_att_set_value_req_handler+0x80>)
1000f030:	1c20      	adds	r0, r4, #0
1000f032:	802b      	strh	r3, [r5, #0]
1000f034:	1c0b      	adds	r3, r1, #0
1000f036:	3b08      	subs	r3, #8
1000f038:	71a3      	strb	r3, [r4, #6]
1000f03a:	121b      	asrs	r3, r3, #8
1000f03c:	71e3      	strb	r3, [r4, #7]
1000f03e:	4b0c      	ldr	r3, [pc, #48]	; (1000f070 <gattm_att_set_value_req_handler+0x84>)
1000f040:	80af      	strh	r7, [r5, #4]
1000f042:	4798      	blx	r3
1000f044:	1c30      	adds	r0, r6, #0
1000f046:	4b0b      	ldr	r3, [pc, #44]	; (1000f074 <gattm_att_set_value_req_handler+0x88>)
1000f048:	4798      	blx	r3
1000f04a:	7833      	ldrb	r3, [r6, #0]
1000f04c:	20e2      	movs	r0, #226	; 0xe2
1000f04e:	2b00      	cmp	r3, #0
1000f050:	d101      	bne.n	1000f056 <gattm_att_set_value_req_handler+0x6a>
1000f052:	68ab      	ldr	r3, [r5, #8]
1000f054:	7898      	ldrb	r0, [r3, #2]
1000f056:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f058:	10014254 	.word	0x10014254
1000f05c:	10013ee4 	.word	0x10013ee4
1000f060:	1001025f 	.word	0x1001025f
1000f064:	10014260 	.word	0x10014260
1000f068:	00000b0d 	.word	0x00000b0d
1000f06c:	10013ed8 	.word	0x10013ed8
1000f070:	1000d975 	.word	0x1000d975
1000f074:	1000d9d1 	.word	0x1000d9d1

1000f078 <gattm_att_get_value_req_handler>:
1000f078:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f07a:	b085      	sub	sp, #20
1000f07c:	9201      	str	r2, [sp, #4]
1000f07e:	220a      	movs	r2, #10
1000f080:	1c04      	adds	r4, r0, #0
1000f082:	481d      	ldr	r0, [pc, #116]	; (1000f0f8 <gattm_att_get_value_req_handler+0x80>)
1000f084:	ab02      	add	r3, sp, #8
1000f086:	1dde      	adds	r6, r3, #7
1000f088:	7002      	strb	r2, [r0, #0]
1000f08a:	2300      	movs	r3, #0
1000f08c:	220b      	movs	r2, #11
1000f08e:	4d1b      	ldr	r5, [pc, #108]	; (1000f0fc <gattm_att_get_value_req_handler+0x84>)
1000f090:	1c0f      	adds	r7, r1, #0
1000f092:	8829      	ldrh	r1, [r5, #0]
1000f094:	882d      	ldrh	r5, [r5, #0]
1000f096:	7101      	strb	r1, [r0, #4]
1000f098:	0a2d      	lsrs	r5, r5, #8
1000f09a:	7145      	strb	r5, [r0, #5]
1000f09c:	0a25      	lsrs	r5, r4, #8
1000f09e:	7245      	strb	r5, [r0, #9]
1000f0a0:	4917      	ldr	r1, [pc, #92]	; (1000f100 <gattm_att_get_value_req_handler+0x88>)
1000f0a2:	4d18      	ldr	r5, [pc, #96]	; (1000f104 <gattm_att_get_value_req_handler+0x8c>)
1000f0a4:	7033      	strb	r3, [r6, #0]
1000f0a6:	7042      	strb	r2, [r0, #1]
1000f0a8:	7082      	strb	r2, [r0, #2]
1000f0aa:	70c3      	strb	r3, [r0, #3]
1000f0ac:	8029      	strh	r1, [r5, #0]
1000f0ae:	80aa      	strh	r2, [r5, #4]
1000f0b0:	71c3      	strb	r3, [r0, #7]
1000f0b2:	3a09      	subs	r2, #9
1000f0b4:	210a      	movs	r1, #10
1000f0b6:	4b14      	ldr	r3, [pc, #80]	; (1000f108 <gattm_att_get_value_req_handler+0x90>)
1000f0b8:	7182      	strb	r2, [r0, #6]
1000f0ba:	7204      	strb	r4, [r0, #8]
1000f0bc:	4798      	blx	r3
1000f0be:	1c30      	adds	r0, r6, #0
1000f0c0:	4b12      	ldr	r3, [pc, #72]	; (1000f10c <gattm_att_get_value_req_handler+0x94>)
1000f0c2:	4798      	blx	r3
1000f0c4:	7833      	ldrb	r3, [r6, #0]
1000f0c6:	20e2      	movs	r0, #226	; 0xe2
1000f0c8:	2b00      	cmp	r3, #0
1000f0ca:	d112      	bne.n	1000f0f2 <gattm_att_get_value_req_handler+0x7a>
1000f0cc:	68a9      	ldr	r1, [r5, #8]
1000f0ce:	9801      	ldr	r0, [sp, #4]
1000f0d0:	784d      	ldrb	r5, [r1, #1]
1000f0d2:	780b      	ldrb	r3, [r1, #0]
1000f0d4:	78ca      	ldrb	r2, [r1, #3]
1000f0d6:	022d      	lsls	r5, r5, #8
1000f0d8:	431d      	orrs	r5, r3
1000f0da:	788b      	ldrb	r3, [r1, #2]
1000f0dc:	0212      	lsls	r2, r2, #8
1000f0de:	431a      	orrs	r2, r3
1000f0e0:	803a      	strh	r2, [r7, #0]
1000f0e2:	790e      	ldrb	r6, [r1, #4]
1000f0e4:	4b0a      	ldr	r3, [pc, #40]	; (1000f110 <gattm_att_get_value_req_handler+0x98>)
1000f0e6:	3105      	adds	r1, #5
1000f0e8:	4798      	blx	r3
1000f0ea:	20e2      	movs	r0, #226	; 0xe2
1000f0ec:	42ac      	cmp	r4, r5
1000f0ee:	d100      	bne.n	1000f0f2 <gattm_att_get_value_req_handler+0x7a>
1000f0f0:	1c30      	adds	r0, r6, #0
1000f0f2:	b005      	add	sp, #20
1000f0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f0f6:	46c0      	nop			; (mov r8, r8)
1000f0f8:	10014254 	.word	0x10014254
1000f0fc:	10013ee4 	.word	0x10013ee4
1000f100:	00000b0b 	.word	0x00000b0b
1000f104:	10013ed8 	.word	0x10013ed8
1000f108:	1000d975 	.word	0x1000d975
1000f10c:	1000d9d1 	.word	0x1000d9d1
1000f110:	1001025f 	.word	0x1001025f

1000f114 <htpt_enable_rsp_handler>:
1000f114:	780b      	ldrb	r3, [r1, #0]
1000f116:	7013      	strb	r3, [r2, #0]
1000f118:	784b      	ldrb	r3, [r1, #1]
1000f11a:	7053      	strb	r3, [r2, #1]
1000f11c:	4770      	bx	lr

1000f11e <htpt_temp_send_rsp_handler>:
1000f11e:	780b      	ldrb	r3, [r1, #0]
1000f120:	7013      	strb	r3, [r2, #0]
1000f122:	4770      	bx	lr

1000f124 <htpt_meas_intv_upd_rsp_handler>:
1000f124:	780b      	ldrb	r3, [r1, #0]
1000f126:	7013      	strb	r3, [r2, #0]
1000f128:	4770      	bx	lr

1000f12a <htpt_meas_intv_chg_req_ind_handler>:
1000f12a:	78cb      	ldrb	r3, [r1, #3]
1000f12c:	7889      	ldrb	r1, [r1, #2]
1000f12e:	021b      	lsls	r3, r3, #8
1000f130:	430b      	orrs	r3, r1
1000f132:	8013      	strh	r3, [r2, #0]
1000f134:	4770      	bx	lr

1000f136 <htpt_cfg_indntf_ind_handler>:
1000f136:	780b      	ldrb	r3, [r1, #0]
1000f138:	7013      	strb	r3, [r2, #0]
1000f13a:	784b      	ldrb	r3, [r1, #1]
1000f13c:	7053      	strb	r3, [r2, #1]
1000f13e:	4770      	bx	lr

1000f140 <__gnu_thumb1_case_uqi>:
1000f140:	b402      	push	{r1}
1000f142:	4671      	mov	r1, lr
1000f144:	0849      	lsrs	r1, r1, #1
1000f146:	0049      	lsls	r1, r1, #1
1000f148:	5c09      	ldrb	r1, [r1, r0]
1000f14a:	0049      	lsls	r1, r1, #1
1000f14c:	448e      	add	lr, r1
1000f14e:	bc02      	pop	{r1}
1000f150:	4770      	bx	lr
1000f152:	46c0      	nop			; (mov r8, r8)

1000f154 <__aeabi_uidiv>:
1000f154:	2200      	movs	r2, #0
1000f156:	0843      	lsrs	r3, r0, #1
1000f158:	428b      	cmp	r3, r1
1000f15a:	d374      	bcc.n	1000f246 <__aeabi_uidiv+0xf2>
1000f15c:	0903      	lsrs	r3, r0, #4
1000f15e:	428b      	cmp	r3, r1
1000f160:	d35f      	bcc.n	1000f222 <__aeabi_uidiv+0xce>
1000f162:	0a03      	lsrs	r3, r0, #8
1000f164:	428b      	cmp	r3, r1
1000f166:	d344      	bcc.n	1000f1f2 <__aeabi_uidiv+0x9e>
1000f168:	0b03      	lsrs	r3, r0, #12
1000f16a:	428b      	cmp	r3, r1
1000f16c:	d328      	bcc.n	1000f1c0 <__aeabi_uidiv+0x6c>
1000f16e:	0c03      	lsrs	r3, r0, #16
1000f170:	428b      	cmp	r3, r1
1000f172:	d30d      	bcc.n	1000f190 <__aeabi_uidiv+0x3c>
1000f174:	22ff      	movs	r2, #255	; 0xff
1000f176:	0209      	lsls	r1, r1, #8
1000f178:	ba12      	rev	r2, r2
1000f17a:	0c03      	lsrs	r3, r0, #16
1000f17c:	428b      	cmp	r3, r1
1000f17e:	d302      	bcc.n	1000f186 <__aeabi_uidiv+0x32>
1000f180:	1212      	asrs	r2, r2, #8
1000f182:	0209      	lsls	r1, r1, #8
1000f184:	d065      	beq.n	1000f252 <__aeabi_uidiv+0xfe>
1000f186:	0b03      	lsrs	r3, r0, #12
1000f188:	428b      	cmp	r3, r1
1000f18a:	d319      	bcc.n	1000f1c0 <__aeabi_uidiv+0x6c>
1000f18c:	e000      	b.n	1000f190 <__aeabi_uidiv+0x3c>
1000f18e:	0a09      	lsrs	r1, r1, #8
1000f190:	0bc3      	lsrs	r3, r0, #15
1000f192:	428b      	cmp	r3, r1
1000f194:	d301      	bcc.n	1000f19a <__aeabi_uidiv+0x46>
1000f196:	03cb      	lsls	r3, r1, #15
1000f198:	1ac0      	subs	r0, r0, r3
1000f19a:	4152      	adcs	r2, r2
1000f19c:	0b83      	lsrs	r3, r0, #14
1000f19e:	428b      	cmp	r3, r1
1000f1a0:	d301      	bcc.n	1000f1a6 <__aeabi_uidiv+0x52>
1000f1a2:	038b      	lsls	r3, r1, #14
1000f1a4:	1ac0      	subs	r0, r0, r3
1000f1a6:	4152      	adcs	r2, r2
1000f1a8:	0b43      	lsrs	r3, r0, #13
1000f1aa:	428b      	cmp	r3, r1
1000f1ac:	d301      	bcc.n	1000f1b2 <__aeabi_uidiv+0x5e>
1000f1ae:	034b      	lsls	r3, r1, #13
1000f1b0:	1ac0      	subs	r0, r0, r3
1000f1b2:	4152      	adcs	r2, r2
1000f1b4:	0b03      	lsrs	r3, r0, #12
1000f1b6:	428b      	cmp	r3, r1
1000f1b8:	d301      	bcc.n	1000f1be <__aeabi_uidiv+0x6a>
1000f1ba:	030b      	lsls	r3, r1, #12
1000f1bc:	1ac0      	subs	r0, r0, r3
1000f1be:	4152      	adcs	r2, r2
1000f1c0:	0ac3      	lsrs	r3, r0, #11
1000f1c2:	428b      	cmp	r3, r1
1000f1c4:	d301      	bcc.n	1000f1ca <__aeabi_uidiv+0x76>
1000f1c6:	02cb      	lsls	r3, r1, #11
1000f1c8:	1ac0      	subs	r0, r0, r3
1000f1ca:	4152      	adcs	r2, r2
1000f1cc:	0a83      	lsrs	r3, r0, #10
1000f1ce:	428b      	cmp	r3, r1
1000f1d0:	d301      	bcc.n	1000f1d6 <__aeabi_uidiv+0x82>
1000f1d2:	028b      	lsls	r3, r1, #10
1000f1d4:	1ac0      	subs	r0, r0, r3
1000f1d6:	4152      	adcs	r2, r2
1000f1d8:	0a43      	lsrs	r3, r0, #9
1000f1da:	428b      	cmp	r3, r1
1000f1dc:	d301      	bcc.n	1000f1e2 <__aeabi_uidiv+0x8e>
1000f1de:	024b      	lsls	r3, r1, #9
1000f1e0:	1ac0      	subs	r0, r0, r3
1000f1e2:	4152      	adcs	r2, r2
1000f1e4:	0a03      	lsrs	r3, r0, #8
1000f1e6:	428b      	cmp	r3, r1
1000f1e8:	d301      	bcc.n	1000f1ee <__aeabi_uidiv+0x9a>
1000f1ea:	020b      	lsls	r3, r1, #8
1000f1ec:	1ac0      	subs	r0, r0, r3
1000f1ee:	4152      	adcs	r2, r2
1000f1f0:	d2cd      	bcs.n	1000f18e <__aeabi_uidiv+0x3a>
1000f1f2:	09c3      	lsrs	r3, r0, #7
1000f1f4:	428b      	cmp	r3, r1
1000f1f6:	d301      	bcc.n	1000f1fc <__aeabi_uidiv+0xa8>
1000f1f8:	01cb      	lsls	r3, r1, #7
1000f1fa:	1ac0      	subs	r0, r0, r3
1000f1fc:	4152      	adcs	r2, r2
1000f1fe:	0983      	lsrs	r3, r0, #6
1000f200:	428b      	cmp	r3, r1
1000f202:	d301      	bcc.n	1000f208 <__aeabi_uidiv+0xb4>
1000f204:	018b      	lsls	r3, r1, #6
1000f206:	1ac0      	subs	r0, r0, r3
1000f208:	4152      	adcs	r2, r2
1000f20a:	0943      	lsrs	r3, r0, #5
1000f20c:	428b      	cmp	r3, r1
1000f20e:	d301      	bcc.n	1000f214 <__aeabi_uidiv+0xc0>
1000f210:	014b      	lsls	r3, r1, #5
1000f212:	1ac0      	subs	r0, r0, r3
1000f214:	4152      	adcs	r2, r2
1000f216:	0903      	lsrs	r3, r0, #4
1000f218:	428b      	cmp	r3, r1
1000f21a:	d301      	bcc.n	1000f220 <__aeabi_uidiv+0xcc>
1000f21c:	010b      	lsls	r3, r1, #4
1000f21e:	1ac0      	subs	r0, r0, r3
1000f220:	4152      	adcs	r2, r2
1000f222:	08c3      	lsrs	r3, r0, #3
1000f224:	428b      	cmp	r3, r1
1000f226:	d301      	bcc.n	1000f22c <__aeabi_uidiv+0xd8>
1000f228:	00cb      	lsls	r3, r1, #3
1000f22a:	1ac0      	subs	r0, r0, r3
1000f22c:	4152      	adcs	r2, r2
1000f22e:	0883      	lsrs	r3, r0, #2
1000f230:	428b      	cmp	r3, r1
1000f232:	d301      	bcc.n	1000f238 <__aeabi_uidiv+0xe4>
1000f234:	008b      	lsls	r3, r1, #2
1000f236:	1ac0      	subs	r0, r0, r3
1000f238:	4152      	adcs	r2, r2
1000f23a:	0843      	lsrs	r3, r0, #1
1000f23c:	428b      	cmp	r3, r1
1000f23e:	d301      	bcc.n	1000f244 <__aeabi_uidiv+0xf0>
1000f240:	004b      	lsls	r3, r1, #1
1000f242:	1ac0      	subs	r0, r0, r3
1000f244:	4152      	adcs	r2, r2
1000f246:	1a41      	subs	r1, r0, r1
1000f248:	d200      	bcs.n	1000f24c <__aeabi_uidiv+0xf8>
1000f24a:	4601      	mov	r1, r0
1000f24c:	4152      	adcs	r2, r2
1000f24e:	4610      	mov	r0, r2
1000f250:	4770      	bx	lr
1000f252:	e7ff      	b.n	1000f254 <__aeabi_uidiv+0x100>
1000f254:	b501      	push	{r0, lr}
1000f256:	2000      	movs	r0, #0
1000f258:	f000 f806 	bl	1000f268 <__aeabi_idiv0>
1000f25c:	bd02      	pop	{r1, pc}
1000f25e:	46c0      	nop			; (mov r8, r8)

1000f260 <__aeabi_uidivmod>:
1000f260:	2900      	cmp	r1, #0
1000f262:	d0f7      	beq.n	1000f254 <__aeabi_uidiv+0x100>
1000f264:	e776      	b.n	1000f154 <__aeabi_uidiv>
1000f266:	4770      	bx	lr

1000f268 <__aeabi_idiv0>:
1000f268:	4770      	bx	lr
1000f26a:	46c0      	nop			; (mov r8, r8)

1000f26c <__aeabi_d2uiz>:
1000f26c:	b570      	push	{r4, r5, r6, lr}
1000f26e:	2200      	movs	r2, #0
1000f270:	4b0c      	ldr	r3, [pc, #48]	; (1000f2a4 <__aeabi_d2uiz+0x38>)
1000f272:	0004      	movs	r4, r0
1000f274:	000d      	movs	r5, r1
1000f276:	f000 fe87 	bl	1000ff88 <__aeabi_dcmpge>
1000f27a:	2800      	cmp	r0, #0
1000f27c:	d104      	bne.n	1000f288 <__aeabi_d2uiz+0x1c>
1000f27e:	0020      	movs	r0, r4
1000f280:	0029      	movs	r1, r5
1000f282:	f000 fddf 	bl	1000fe44 <__aeabi_d2iz>
1000f286:	bd70      	pop	{r4, r5, r6, pc}
1000f288:	4b06      	ldr	r3, [pc, #24]	; (1000f2a4 <__aeabi_d2uiz+0x38>)
1000f28a:	2200      	movs	r2, #0
1000f28c:	0020      	movs	r0, r4
1000f28e:	0029      	movs	r1, r5
1000f290:	f000 fa84 	bl	1000f79c <__aeabi_dsub>
1000f294:	f000 fdd6 	bl	1000fe44 <__aeabi_d2iz>
1000f298:	2380      	movs	r3, #128	; 0x80
1000f29a:	061b      	lsls	r3, r3, #24
1000f29c:	469c      	mov	ip, r3
1000f29e:	4460      	add	r0, ip
1000f2a0:	e7f1      	b.n	1000f286 <__aeabi_d2uiz+0x1a>
1000f2a2:	46c0      	nop			; (mov r8, r8)
1000f2a4:	41e00000 	.word	0x41e00000

1000f2a8 <__aeabi_dmul>:
1000f2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2aa:	465f      	mov	r7, fp
1000f2ac:	4656      	mov	r6, sl
1000f2ae:	464d      	mov	r5, r9
1000f2b0:	4644      	mov	r4, r8
1000f2b2:	b4f0      	push	{r4, r5, r6, r7}
1000f2b4:	030d      	lsls	r5, r1, #12
1000f2b6:	4699      	mov	r9, r3
1000f2b8:	004e      	lsls	r6, r1, #1
1000f2ba:	0b2b      	lsrs	r3, r5, #12
1000f2bc:	b087      	sub	sp, #28
1000f2be:	0007      	movs	r7, r0
1000f2c0:	4692      	mov	sl, r2
1000f2c2:	4680      	mov	r8, r0
1000f2c4:	469b      	mov	fp, r3
1000f2c6:	0d76      	lsrs	r6, r6, #21
1000f2c8:	0fcc      	lsrs	r4, r1, #31
1000f2ca:	2e00      	cmp	r6, #0
1000f2cc:	d069      	beq.n	1000f3a2 <__aeabi_dmul+0xfa>
1000f2ce:	4b6d      	ldr	r3, [pc, #436]	; (1000f484 <__aeabi_dmul+0x1dc>)
1000f2d0:	429e      	cmp	r6, r3
1000f2d2:	d035      	beq.n	1000f340 <__aeabi_dmul+0x98>
1000f2d4:	465b      	mov	r3, fp
1000f2d6:	2280      	movs	r2, #128	; 0x80
1000f2d8:	00dd      	lsls	r5, r3, #3
1000f2da:	0412      	lsls	r2, r2, #16
1000f2dc:	0f43      	lsrs	r3, r0, #29
1000f2de:	4313      	orrs	r3, r2
1000f2e0:	432b      	orrs	r3, r5
1000f2e2:	469b      	mov	fp, r3
1000f2e4:	00c3      	lsls	r3, r0, #3
1000f2e6:	4698      	mov	r8, r3
1000f2e8:	4b67      	ldr	r3, [pc, #412]	; (1000f488 <__aeabi_dmul+0x1e0>)
1000f2ea:	2700      	movs	r7, #0
1000f2ec:	469c      	mov	ip, r3
1000f2ee:	2300      	movs	r3, #0
1000f2f0:	4466      	add	r6, ip
1000f2f2:	9301      	str	r3, [sp, #4]
1000f2f4:	464a      	mov	r2, r9
1000f2f6:	0315      	lsls	r5, r2, #12
1000f2f8:	0050      	lsls	r0, r2, #1
1000f2fa:	0fd2      	lsrs	r2, r2, #31
1000f2fc:	4653      	mov	r3, sl
1000f2fe:	0b2d      	lsrs	r5, r5, #12
1000f300:	0d40      	lsrs	r0, r0, #21
1000f302:	4691      	mov	r9, r2
1000f304:	d100      	bne.n	1000f308 <__aeabi_dmul+0x60>
1000f306:	e076      	b.n	1000f3f6 <__aeabi_dmul+0x14e>
1000f308:	4a5e      	ldr	r2, [pc, #376]	; (1000f484 <__aeabi_dmul+0x1dc>)
1000f30a:	4290      	cmp	r0, r2
1000f30c:	d06c      	beq.n	1000f3e8 <__aeabi_dmul+0x140>
1000f30e:	2280      	movs	r2, #128	; 0x80
1000f310:	0f5b      	lsrs	r3, r3, #29
1000f312:	0412      	lsls	r2, r2, #16
1000f314:	4313      	orrs	r3, r2
1000f316:	4a5c      	ldr	r2, [pc, #368]	; (1000f488 <__aeabi_dmul+0x1e0>)
1000f318:	00ed      	lsls	r5, r5, #3
1000f31a:	4694      	mov	ip, r2
1000f31c:	431d      	orrs	r5, r3
1000f31e:	4653      	mov	r3, sl
1000f320:	2200      	movs	r2, #0
1000f322:	00db      	lsls	r3, r3, #3
1000f324:	4460      	add	r0, ip
1000f326:	4649      	mov	r1, r9
1000f328:	1836      	adds	r6, r6, r0
1000f32a:	1c70      	adds	r0, r6, #1
1000f32c:	4061      	eors	r1, r4
1000f32e:	9002      	str	r0, [sp, #8]
1000f330:	4317      	orrs	r7, r2
1000f332:	2f0f      	cmp	r7, #15
1000f334:	d900      	bls.n	1000f338 <__aeabi_dmul+0x90>
1000f336:	e0af      	b.n	1000f498 <__aeabi_dmul+0x1f0>
1000f338:	4854      	ldr	r0, [pc, #336]	; (1000f48c <__aeabi_dmul+0x1e4>)
1000f33a:	00bf      	lsls	r7, r7, #2
1000f33c:	59c7      	ldr	r7, [r0, r7]
1000f33e:	46bf      	mov	pc, r7
1000f340:	465b      	mov	r3, fp
1000f342:	431f      	orrs	r7, r3
1000f344:	d000      	beq.n	1000f348 <__aeabi_dmul+0xa0>
1000f346:	e088      	b.n	1000f45a <__aeabi_dmul+0x1b2>
1000f348:	2300      	movs	r3, #0
1000f34a:	469b      	mov	fp, r3
1000f34c:	4698      	mov	r8, r3
1000f34e:	3302      	adds	r3, #2
1000f350:	2708      	movs	r7, #8
1000f352:	9301      	str	r3, [sp, #4]
1000f354:	e7ce      	b.n	1000f2f4 <__aeabi_dmul+0x4c>
1000f356:	4649      	mov	r1, r9
1000f358:	2a02      	cmp	r2, #2
1000f35a:	d06a      	beq.n	1000f432 <__aeabi_dmul+0x18a>
1000f35c:	2a03      	cmp	r2, #3
1000f35e:	d100      	bne.n	1000f362 <__aeabi_dmul+0xba>
1000f360:	e209      	b.n	1000f776 <__aeabi_dmul+0x4ce>
1000f362:	2a01      	cmp	r2, #1
1000f364:	d000      	beq.n	1000f368 <__aeabi_dmul+0xc0>
1000f366:	e1bb      	b.n	1000f6e0 <__aeabi_dmul+0x438>
1000f368:	4011      	ands	r1, r2
1000f36a:	2200      	movs	r2, #0
1000f36c:	2300      	movs	r3, #0
1000f36e:	2500      	movs	r5, #0
1000f370:	4690      	mov	r8, r2
1000f372:	b2cc      	uxtb	r4, r1
1000f374:	2100      	movs	r1, #0
1000f376:	032d      	lsls	r5, r5, #12
1000f378:	0d0a      	lsrs	r2, r1, #20
1000f37a:	0512      	lsls	r2, r2, #20
1000f37c:	0b2d      	lsrs	r5, r5, #12
1000f37e:	4315      	orrs	r5, r2
1000f380:	4a43      	ldr	r2, [pc, #268]	; (1000f490 <__aeabi_dmul+0x1e8>)
1000f382:	051b      	lsls	r3, r3, #20
1000f384:	4015      	ands	r5, r2
1000f386:	431d      	orrs	r5, r3
1000f388:	006d      	lsls	r5, r5, #1
1000f38a:	07e4      	lsls	r4, r4, #31
1000f38c:	086d      	lsrs	r5, r5, #1
1000f38e:	4325      	orrs	r5, r4
1000f390:	4640      	mov	r0, r8
1000f392:	0029      	movs	r1, r5
1000f394:	b007      	add	sp, #28
1000f396:	bc3c      	pop	{r2, r3, r4, r5}
1000f398:	4690      	mov	r8, r2
1000f39a:	4699      	mov	r9, r3
1000f39c:	46a2      	mov	sl, r4
1000f39e:	46ab      	mov	fp, r5
1000f3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f3a2:	4303      	orrs	r3, r0
1000f3a4:	d052      	beq.n	1000f44c <__aeabi_dmul+0x1a4>
1000f3a6:	465b      	mov	r3, fp
1000f3a8:	2b00      	cmp	r3, #0
1000f3aa:	d100      	bne.n	1000f3ae <__aeabi_dmul+0x106>
1000f3ac:	e18a      	b.n	1000f6c4 <__aeabi_dmul+0x41c>
1000f3ae:	4658      	mov	r0, fp
1000f3b0:	f000 fdf4 	bl	1000ff9c <__clzsi2>
1000f3b4:	0003      	movs	r3, r0
1000f3b6:	3b0b      	subs	r3, #11
1000f3b8:	2b1c      	cmp	r3, #28
1000f3ba:	dd00      	ble.n	1000f3be <__aeabi_dmul+0x116>
1000f3bc:	e17b      	b.n	1000f6b6 <__aeabi_dmul+0x40e>
1000f3be:	221d      	movs	r2, #29
1000f3c0:	1ad3      	subs	r3, r2, r3
1000f3c2:	003a      	movs	r2, r7
1000f3c4:	0001      	movs	r1, r0
1000f3c6:	465d      	mov	r5, fp
1000f3c8:	40da      	lsrs	r2, r3
1000f3ca:	3908      	subs	r1, #8
1000f3cc:	408d      	lsls	r5, r1
1000f3ce:	0013      	movs	r3, r2
1000f3d0:	408f      	lsls	r7, r1
1000f3d2:	432b      	orrs	r3, r5
1000f3d4:	469b      	mov	fp, r3
1000f3d6:	46b8      	mov	r8, r7
1000f3d8:	4b2e      	ldr	r3, [pc, #184]	; (1000f494 <__aeabi_dmul+0x1ec>)
1000f3da:	2700      	movs	r7, #0
1000f3dc:	469c      	mov	ip, r3
1000f3de:	2300      	movs	r3, #0
1000f3e0:	4460      	add	r0, ip
1000f3e2:	4246      	negs	r6, r0
1000f3e4:	9301      	str	r3, [sp, #4]
1000f3e6:	e785      	b.n	1000f2f4 <__aeabi_dmul+0x4c>
1000f3e8:	4652      	mov	r2, sl
1000f3ea:	432a      	orrs	r2, r5
1000f3ec:	d12c      	bne.n	1000f448 <__aeabi_dmul+0x1a0>
1000f3ee:	2500      	movs	r5, #0
1000f3f0:	2300      	movs	r3, #0
1000f3f2:	2202      	movs	r2, #2
1000f3f4:	e797      	b.n	1000f326 <__aeabi_dmul+0x7e>
1000f3f6:	4652      	mov	r2, sl
1000f3f8:	432a      	orrs	r2, r5
1000f3fa:	d021      	beq.n	1000f440 <__aeabi_dmul+0x198>
1000f3fc:	2d00      	cmp	r5, #0
1000f3fe:	d100      	bne.n	1000f402 <__aeabi_dmul+0x15a>
1000f400:	e154      	b.n	1000f6ac <__aeabi_dmul+0x404>
1000f402:	0028      	movs	r0, r5
1000f404:	f000 fdca 	bl	1000ff9c <__clzsi2>
1000f408:	0003      	movs	r3, r0
1000f40a:	3b0b      	subs	r3, #11
1000f40c:	2b1c      	cmp	r3, #28
1000f40e:	dd00      	ble.n	1000f412 <__aeabi_dmul+0x16a>
1000f410:	e146      	b.n	1000f6a0 <__aeabi_dmul+0x3f8>
1000f412:	211d      	movs	r1, #29
1000f414:	1acb      	subs	r3, r1, r3
1000f416:	4651      	mov	r1, sl
1000f418:	0002      	movs	r2, r0
1000f41a:	40d9      	lsrs	r1, r3
1000f41c:	4653      	mov	r3, sl
1000f41e:	3a08      	subs	r2, #8
1000f420:	4095      	lsls	r5, r2
1000f422:	4093      	lsls	r3, r2
1000f424:	430d      	orrs	r5, r1
1000f426:	4a1b      	ldr	r2, [pc, #108]	; (1000f494 <__aeabi_dmul+0x1ec>)
1000f428:	4694      	mov	ip, r2
1000f42a:	4460      	add	r0, ip
1000f42c:	4240      	negs	r0, r0
1000f42e:	2200      	movs	r2, #0
1000f430:	e779      	b.n	1000f326 <__aeabi_dmul+0x7e>
1000f432:	2401      	movs	r4, #1
1000f434:	2200      	movs	r2, #0
1000f436:	400c      	ands	r4, r1
1000f438:	4b12      	ldr	r3, [pc, #72]	; (1000f484 <__aeabi_dmul+0x1dc>)
1000f43a:	2500      	movs	r5, #0
1000f43c:	4690      	mov	r8, r2
1000f43e:	e799      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f440:	2500      	movs	r5, #0
1000f442:	2300      	movs	r3, #0
1000f444:	2201      	movs	r2, #1
1000f446:	e76e      	b.n	1000f326 <__aeabi_dmul+0x7e>
1000f448:	2203      	movs	r2, #3
1000f44a:	e76c      	b.n	1000f326 <__aeabi_dmul+0x7e>
1000f44c:	2300      	movs	r3, #0
1000f44e:	469b      	mov	fp, r3
1000f450:	4698      	mov	r8, r3
1000f452:	3301      	adds	r3, #1
1000f454:	2704      	movs	r7, #4
1000f456:	9301      	str	r3, [sp, #4]
1000f458:	e74c      	b.n	1000f2f4 <__aeabi_dmul+0x4c>
1000f45a:	2303      	movs	r3, #3
1000f45c:	270c      	movs	r7, #12
1000f45e:	9301      	str	r3, [sp, #4]
1000f460:	e748      	b.n	1000f2f4 <__aeabi_dmul+0x4c>
1000f462:	2300      	movs	r3, #0
1000f464:	2580      	movs	r5, #128	; 0x80
1000f466:	4698      	mov	r8, r3
1000f468:	2400      	movs	r4, #0
1000f46a:	032d      	lsls	r5, r5, #12
1000f46c:	4b05      	ldr	r3, [pc, #20]	; (1000f484 <__aeabi_dmul+0x1dc>)
1000f46e:	e781      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f470:	465d      	mov	r5, fp
1000f472:	4643      	mov	r3, r8
1000f474:	9a01      	ldr	r2, [sp, #4]
1000f476:	e76f      	b.n	1000f358 <__aeabi_dmul+0xb0>
1000f478:	465d      	mov	r5, fp
1000f47a:	4643      	mov	r3, r8
1000f47c:	0021      	movs	r1, r4
1000f47e:	9a01      	ldr	r2, [sp, #4]
1000f480:	e76a      	b.n	1000f358 <__aeabi_dmul+0xb0>
1000f482:	46c0      	nop			; (mov r8, r8)
1000f484:	000007ff 	.word	0x000007ff
1000f488:	fffffc01 	.word	0xfffffc01
1000f48c:	10012dbc 	.word	0x10012dbc
1000f490:	800fffff 	.word	0x800fffff
1000f494:	000003f3 	.word	0x000003f3
1000f498:	4642      	mov	r2, r8
1000f49a:	0c12      	lsrs	r2, r2, #16
1000f49c:	4691      	mov	r9, r2
1000f49e:	0c1a      	lsrs	r2, r3, #16
1000f4a0:	4694      	mov	ip, r2
1000f4a2:	4642      	mov	r2, r8
1000f4a4:	0417      	lsls	r7, r2, #16
1000f4a6:	464a      	mov	r2, r9
1000f4a8:	041b      	lsls	r3, r3, #16
1000f4aa:	0c1b      	lsrs	r3, r3, #16
1000f4ac:	435a      	muls	r2, r3
1000f4ae:	4660      	mov	r0, ip
1000f4b0:	4690      	mov	r8, r2
1000f4b2:	464a      	mov	r2, r9
1000f4b4:	4342      	muls	r2, r0
1000f4b6:	0010      	movs	r0, r2
1000f4b8:	9203      	str	r2, [sp, #12]
1000f4ba:	4662      	mov	r2, ip
1000f4bc:	001c      	movs	r4, r3
1000f4be:	0c3f      	lsrs	r7, r7, #16
1000f4c0:	437a      	muls	r2, r7
1000f4c2:	437c      	muls	r4, r7
1000f4c4:	4442      	add	r2, r8
1000f4c6:	9201      	str	r2, [sp, #4]
1000f4c8:	0c22      	lsrs	r2, r4, #16
1000f4ca:	4692      	mov	sl, r2
1000f4cc:	9a01      	ldr	r2, [sp, #4]
1000f4ce:	4452      	add	r2, sl
1000f4d0:	4590      	cmp	r8, r2
1000f4d2:	d906      	bls.n	1000f4e2 <__aeabi_dmul+0x23a>
1000f4d4:	4682      	mov	sl, r0
1000f4d6:	2080      	movs	r0, #128	; 0x80
1000f4d8:	0240      	lsls	r0, r0, #9
1000f4da:	4680      	mov	r8, r0
1000f4dc:	44c2      	add	sl, r8
1000f4de:	4650      	mov	r0, sl
1000f4e0:	9003      	str	r0, [sp, #12]
1000f4e2:	0c10      	lsrs	r0, r2, #16
1000f4e4:	9004      	str	r0, [sp, #16]
1000f4e6:	4648      	mov	r0, r9
1000f4e8:	0424      	lsls	r4, r4, #16
1000f4ea:	0c24      	lsrs	r4, r4, #16
1000f4ec:	0412      	lsls	r2, r2, #16
1000f4ee:	1912      	adds	r2, r2, r4
1000f4f0:	9205      	str	r2, [sp, #20]
1000f4f2:	0c2a      	lsrs	r2, r5, #16
1000f4f4:	042d      	lsls	r5, r5, #16
1000f4f6:	0c2d      	lsrs	r5, r5, #16
1000f4f8:	4368      	muls	r0, r5
1000f4fa:	002c      	movs	r4, r5
1000f4fc:	4682      	mov	sl, r0
1000f4fe:	4648      	mov	r0, r9
1000f500:	437c      	muls	r4, r7
1000f502:	4350      	muls	r0, r2
1000f504:	4681      	mov	r9, r0
1000f506:	0c20      	lsrs	r0, r4, #16
1000f508:	4680      	mov	r8, r0
1000f50a:	4357      	muls	r7, r2
1000f50c:	4457      	add	r7, sl
1000f50e:	4447      	add	r7, r8
1000f510:	45ba      	cmp	sl, r7
1000f512:	d903      	bls.n	1000f51c <__aeabi_dmul+0x274>
1000f514:	2080      	movs	r0, #128	; 0x80
1000f516:	0240      	lsls	r0, r0, #9
1000f518:	4680      	mov	r8, r0
1000f51a:	44c1      	add	r9, r8
1000f51c:	0c38      	lsrs	r0, r7, #16
1000f51e:	043f      	lsls	r7, r7, #16
1000f520:	46b8      	mov	r8, r7
1000f522:	4448      	add	r0, r9
1000f524:	0424      	lsls	r4, r4, #16
1000f526:	0c24      	lsrs	r4, r4, #16
1000f528:	9001      	str	r0, [sp, #4]
1000f52a:	9804      	ldr	r0, [sp, #16]
1000f52c:	44a0      	add	r8, r4
1000f52e:	4440      	add	r0, r8
1000f530:	9004      	str	r0, [sp, #16]
1000f532:	4658      	mov	r0, fp
1000f534:	0c00      	lsrs	r0, r0, #16
1000f536:	4681      	mov	r9, r0
1000f538:	4658      	mov	r0, fp
1000f53a:	0404      	lsls	r4, r0, #16
1000f53c:	0c20      	lsrs	r0, r4, #16
1000f53e:	4682      	mov	sl, r0
1000f540:	0007      	movs	r7, r0
1000f542:	4648      	mov	r0, r9
1000f544:	435f      	muls	r7, r3
1000f546:	464c      	mov	r4, r9
1000f548:	4343      	muls	r3, r0
1000f54a:	4660      	mov	r0, ip
1000f54c:	4360      	muls	r0, r4
1000f54e:	4664      	mov	r4, ip
1000f550:	4683      	mov	fp, r0
1000f552:	4650      	mov	r0, sl
1000f554:	4344      	muls	r4, r0
1000f556:	0c38      	lsrs	r0, r7, #16
1000f558:	4684      	mov	ip, r0
1000f55a:	18e4      	adds	r4, r4, r3
1000f55c:	4464      	add	r4, ip
1000f55e:	42a3      	cmp	r3, r4
1000f560:	d903      	bls.n	1000f56a <__aeabi_dmul+0x2c2>
1000f562:	2380      	movs	r3, #128	; 0x80
1000f564:	025b      	lsls	r3, r3, #9
1000f566:	469c      	mov	ip, r3
1000f568:	44e3      	add	fp, ip
1000f56a:	4648      	mov	r0, r9
1000f56c:	043f      	lsls	r7, r7, #16
1000f56e:	0c23      	lsrs	r3, r4, #16
1000f570:	0c3f      	lsrs	r7, r7, #16
1000f572:	0424      	lsls	r4, r4, #16
1000f574:	19e4      	adds	r4, r4, r7
1000f576:	4657      	mov	r7, sl
1000f578:	4368      	muls	r0, r5
1000f57a:	436f      	muls	r7, r5
1000f57c:	4684      	mov	ip, r0
1000f57e:	464d      	mov	r5, r9
1000f580:	4650      	mov	r0, sl
1000f582:	4355      	muls	r5, r2
1000f584:	4342      	muls	r2, r0
1000f586:	0c38      	lsrs	r0, r7, #16
1000f588:	4681      	mov	r9, r0
1000f58a:	4462      	add	r2, ip
1000f58c:	444a      	add	r2, r9
1000f58e:	445b      	add	r3, fp
1000f590:	4594      	cmp	ip, r2
1000f592:	d903      	bls.n	1000f59c <__aeabi_dmul+0x2f4>
1000f594:	2080      	movs	r0, #128	; 0x80
1000f596:	0240      	lsls	r0, r0, #9
1000f598:	4684      	mov	ip, r0
1000f59a:	4465      	add	r5, ip
1000f59c:	9803      	ldr	r0, [sp, #12]
1000f59e:	043f      	lsls	r7, r7, #16
1000f5a0:	4683      	mov	fp, r0
1000f5a2:	9804      	ldr	r0, [sp, #16]
1000f5a4:	0c3f      	lsrs	r7, r7, #16
1000f5a6:	4684      	mov	ip, r0
1000f5a8:	44e3      	add	fp, ip
1000f5aa:	45c3      	cmp	fp, r8
1000f5ac:	4180      	sbcs	r0, r0
1000f5ae:	4240      	negs	r0, r0
1000f5b0:	4682      	mov	sl, r0
1000f5b2:	0410      	lsls	r0, r2, #16
1000f5b4:	4684      	mov	ip, r0
1000f5b6:	9801      	ldr	r0, [sp, #4]
1000f5b8:	4467      	add	r7, ip
1000f5ba:	4684      	mov	ip, r0
1000f5bc:	4467      	add	r7, ip
1000f5be:	44a3      	add	fp, r4
1000f5c0:	46bc      	mov	ip, r7
1000f5c2:	45a3      	cmp	fp, r4
1000f5c4:	41a4      	sbcs	r4, r4
1000f5c6:	4699      	mov	r9, r3
1000f5c8:	44d4      	add	ip, sl
1000f5ca:	4264      	negs	r4, r4
1000f5cc:	4287      	cmp	r7, r0
1000f5ce:	41bf      	sbcs	r7, r7
1000f5d0:	45d4      	cmp	ip, sl
1000f5d2:	4180      	sbcs	r0, r0
1000f5d4:	44e1      	add	r9, ip
1000f5d6:	46a0      	mov	r8, r4
1000f5d8:	4599      	cmp	r9, r3
1000f5da:	419b      	sbcs	r3, r3
1000f5dc:	427f      	negs	r7, r7
1000f5de:	4240      	negs	r0, r0
1000f5e0:	44c8      	add	r8, r9
1000f5e2:	4307      	orrs	r7, r0
1000f5e4:	0c12      	lsrs	r2, r2, #16
1000f5e6:	18ba      	adds	r2, r7, r2
1000f5e8:	45a0      	cmp	r8, r4
1000f5ea:	41a4      	sbcs	r4, r4
1000f5ec:	425f      	negs	r7, r3
1000f5ee:	003b      	movs	r3, r7
1000f5f0:	4264      	negs	r4, r4
1000f5f2:	4323      	orrs	r3, r4
1000f5f4:	18d7      	adds	r7, r2, r3
1000f5f6:	4643      	mov	r3, r8
1000f5f8:	197d      	adds	r5, r7, r5
1000f5fa:	0ddb      	lsrs	r3, r3, #23
1000f5fc:	026d      	lsls	r5, r5, #9
1000f5fe:	431d      	orrs	r5, r3
1000f600:	465b      	mov	r3, fp
1000f602:	025a      	lsls	r2, r3, #9
1000f604:	9b05      	ldr	r3, [sp, #20]
1000f606:	431a      	orrs	r2, r3
1000f608:	1e53      	subs	r3, r2, #1
1000f60a:	419a      	sbcs	r2, r3
1000f60c:	465b      	mov	r3, fp
1000f60e:	0ddb      	lsrs	r3, r3, #23
1000f610:	431a      	orrs	r2, r3
1000f612:	4643      	mov	r3, r8
1000f614:	025b      	lsls	r3, r3, #9
1000f616:	4313      	orrs	r3, r2
1000f618:	01ea      	lsls	r2, r5, #7
1000f61a:	d507      	bpl.n	1000f62c <__aeabi_dmul+0x384>
1000f61c:	2201      	movs	r2, #1
1000f61e:	085c      	lsrs	r4, r3, #1
1000f620:	4013      	ands	r3, r2
1000f622:	4323      	orrs	r3, r4
1000f624:	07ea      	lsls	r2, r5, #31
1000f626:	9e02      	ldr	r6, [sp, #8]
1000f628:	4313      	orrs	r3, r2
1000f62a:	086d      	lsrs	r5, r5, #1
1000f62c:	4a57      	ldr	r2, [pc, #348]	; (1000f78c <__aeabi_dmul+0x4e4>)
1000f62e:	18b2      	adds	r2, r6, r2
1000f630:	2a00      	cmp	r2, #0
1000f632:	dd4b      	ble.n	1000f6cc <__aeabi_dmul+0x424>
1000f634:	0758      	lsls	r0, r3, #29
1000f636:	d009      	beq.n	1000f64c <__aeabi_dmul+0x3a4>
1000f638:	200f      	movs	r0, #15
1000f63a:	4018      	ands	r0, r3
1000f63c:	2804      	cmp	r0, #4
1000f63e:	d005      	beq.n	1000f64c <__aeabi_dmul+0x3a4>
1000f640:	1d18      	adds	r0, r3, #4
1000f642:	4298      	cmp	r0, r3
1000f644:	419b      	sbcs	r3, r3
1000f646:	425b      	negs	r3, r3
1000f648:	18ed      	adds	r5, r5, r3
1000f64a:	0003      	movs	r3, r0
1000f64c:	01e8      	lsls	r0, r5, #7
1000f64e:	d504      	bpl.n	1000f65a <__aeabi_dmul+0x3b2>
1000f650:	4a4f      	ldr	r2, [pc, #316]	; (1000f790 <__aeabi_dmul+0x4e8>)
1000f652:	4015      	ands	r5, r2
1000f654:	2280      	movs	r2, #128	; 0x80
1000f656:	00d2      	lsls	r2, r2, #3
1000f658:	18b2      	adds	r2, r6, r2
1000f65a:	484e      	ldr	r0, [pc, #312]	; (1000f794 <__aeabi_dmul+0x4ec>)
1000f65c:	4282      	cmp	r2, r0
1000f65e:	dd00      	ble.n	1000f662 <__aeabi_dmul+0x3ba>
1000f660:	e6e7      	b.n	1000f432 <__aeabi_dmul+0x18a>
1000f662:	2401      	movs	r4, #1
1000f664:	08db      	lsrs	r3, r3, #3
1000f666:	0768      	lsls	r0, r5, #29
1000f668:	4318      	orrs	r0, r3
1000f66a:	026d      	lsls	r5, r5, #9
1000f66c:	0553      	lsls	r3, r2, #21
1000f66e:	4680      	mov	r8, r0
1000f670:	0b2d      	lsrs	r5, r5, #12
1000f672:	0d5b      	lsrs	r3, r3, #21
1000f674:	400c      	ands	r4, r1
1000f676:	e67d      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f678:	2280      	movs	r2, #128	; 0x80
1000f67a:	4659      	mov	r1, fp
1000f67c:	0312      	lsls	r2, r2, #12
1000f67e:	4211      	tst	r1, r2
1000f680:	d008      	beq.n	1000f694 <__aeabi_dmul+0x3ec>
1000f682:	4215      	tst	r5, r2
1000f684:	d106      	bne.n	1000f694 <__aeabi_dmul+0x3ec>
1000f686:	4315      	orrs	r5, r2
1000f688:	032d      	lsls	r5, r5, #12
1000f68a:	4698      	mov	r8, r3
1000f68c:	0b2d      	lsrs	r5, r5, #12
1000f68e:	464c      	mov	r4, r9
1000f690:	4b41      	ldr	r3, [pc, #260]	; (1000f798 <__aeabi_dmul+0x4f0>)
1000f692:	e66f      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f694:	465d      	mov	r5, fp
1000f696:	4315      	orrs	r5, r2
1000f698:	032d      	lsls	r5, r5, #12
1000f69a:	0b2d      	lsrs	r5, r5, #12
1000f69c:	4b3e      	ldr	r3, [pc, #248]	; (1000f798 <__aeabi_dmul+0x4f0>)
1000f69e:	e669      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f6a0:	0003      	movs	r3, r0
1000f6a2:	4655      	mov	r5, sl
1000f6a4:	3b28      	subs	r3, #40	; 0x28
1000f6a6:	409d      	lsls	r5, r3
1000f6a8:	2300      	movs	r3, #0
1000f6aa:	e6bc      	b.n	1000f426 <__aeabi_dmul+0x17e>
1000f6ac:	4650      	mov	r0, sl
1000f6ae:	f000 fc75 	bl	1000ff9c <__clzsi2>
1000f6b2:	3020      	adds	r0, #32
1000f6b4:	e6a8      	b.n	1000f408 <__aeabi_dmul+0x160>
1000f6b6:	0003      	movs	r3, r0
1000f6b8:	3b28      	subs	r3, #40	; 0x28
1000f6ba:	409f      	lsls	r7, r3
1000f6bc:	2300      	movs	r3, #0
1000f6be:	46bb      	mov	fp, r7
1000f6c0:	4698      	mov	r8, r3
1000f6c2:	e689      	b.n	1000f3d8 <__aeabi_dmul+0x130>
1000f6c4:	f000 fc6a 	bl	1000ff9c <__clzsi2>
1000f6c8:	3020      	adds	r0, #32
1000f6ca:	e673      	b.n	1000f3b4 <__aeabi_dmul+0x10c>
1000f6cc:	2401      	movs	r4, #1
1000f6ce:	1aa6      	subs	r6, r4, r2
1000f6d0:	2e38      	cmp	r6, #56	; 0x38
1000f6d2:	dd07      	ble.n	1000f6e4 <__aeabi_dmul+0x43c>
1000f6d4:	2200      	movs	r2, #0
1000f6d6:	400c      	ands	r4, r1
1000f6d8:	2300      	movs	r3, #0
1000f6da:	2500      	movs	r5, #0
1000f6dc:	4690      	mov	r8, r2
1000f6de:	e649      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f6e0:	9e02      	ldr	r6, [sp, #8]
1000f6e2:	e7a3      	b.n	1000f62c <__aeabi_dmul+0x384>
1000f6e4:	2e1f      	cmp	r6, #31
1000f6e6:	dc20      	bgt.n	1000f72a <__aeabi_dmul+0x482>
1000f6e8:	2220      	movs	r2, #32
1000f6ea:	002c      	movs	r4, r5
1000f6ec:	0018      	movs	r0, r3
1000f6ee:	1b92      	subs	r2, r2, r6
1000f6f0:	40f0      	lsrs	r0, r6
1000f6f2:	4094      	lsls	r4, r2
1000f6f4:	4093      	lsls	r3, r2
1000f6f6:	4304      	orrs	r4, r0
1000f6f8:	1e58      	subs	r0, r3, #1
1000f6fa:	4183      	sbcs	r3, r0
1000f6fc:	431c      	orrs	r4, r3
1000f6fe:	40f5      	lsrs	r5, r6
1000f700:	0763      	lsls	r3, r4, #29
1000f702:	d009      	beq.n	1000f718 <__aeabi_dmul+0x470>
1000f704:	230f      	movs	r3, #15
1000f706:	4023      	ands	r3, r4
1000f708:	2b04      	cmp	r3, #4
1000f70a:	d005      	beq.n	1000f718 <__aeabi_dmul+0x470>
1000f70c:	0023      	movs	r3, r4
1000f70e:	1d1c      	adds	r4, r3, #4
1000f710:	429c      	cmp	r4, r3
1000f712:	4192      	sbcs	r2, r2
1000f714:	4252      	negs	r2, r2
1000f716:	18ad      	adds	r5, r5, r2
1000f718:	022b      	lsls	r3, r5, #8
1000f71a:	d51f      	bpl.n	1000f75c <__aeabi_dmul+0x4b4>
1000f71c:	2401      	movs	r4, #1
1000f71e:	2200      	movs	r2, #0
1000f720:	400c      	ands	r4, r1
1000f722:	2301      	movs	r3, #1
1000f724:	2500      	movs	r5, #0
1000f726:	4690      	mov	r8, r2
1000f728:	e624      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f72a:	201f      	movs	r0, #31
1000f72c:	002c      	movs	r4, r5
1000f72e:	4240      	negs	r0, r0
1000f730:	1a82      	subs	r2, r0, r2
1000f732:	40d4      	lsrs	r4, r2
1000f734:	2e20      	cmp	r6, #32
1000f736:	d01c      	beq.n	1000f772 <__aeabi_dmul+0x4ca>
1000f738:	2240      	movs	r2, #64	; 0x40
1000f73a:	1b96      	subs	r6, r2, r6
1000f73c:	40b5      	lsls	r5, r6
1000f73e:	432b      	orrs	r3, r5
1000f740:	1e58      	subs	r0, r3, #1
1000f742:	4183      	sbcs	r3, r0
1000f744:	2007      	movs	r0, #7
1000f746:	4323      	orrs	r3, r4
1000f748:	4018      	ands	r0, r3
1000f74a:	2500      	movs	r5, #0
1000f74c:	2800      	cmp	r0, #0
1000f74e:	d009      	beq.n	1000f764 <__aeabi_dmul+0x4bc>
1000f750:	220f      	movs	r2, #15
1000f752:	2500      	movs	r5, #0
1000f754:	401a      	ands	r2, r3
1000f756:	001c      	movs	r4, r3
1000f758:	2a04      	cmp	r2, #4
1000f75a:	d1d8      	bne.n	1000f70e <__aeabi_dmul+0x466>
1000f75c:	0023      	movs	r3, r4
1000f75e:	0768      	lsls	r0, r5, #29
1000f760:	026d      	lsls	r5, r5, #9
1000f762:	0b2d      	lsrs	r5, r5, #12
1000f764:	2401      	movs	r4, #1
1000f766:	08db      	lsrs	r3, r3, #3
1000f768:	4303      	orrs	r3, r0
1000f76a:	4698      	mov	r8, r3
1000f76c:	400c      	ands	r4, r1
1000f76e:	2300      	movs	r3, #0
1000f770:	e600      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f772:	2500      	movs	r5, #0
1000f774:	e7e3      	b.n	1000f73e <__aeabi_dmul+0x496>
1000f776:	2280      	movs	r2, #128	; 0x80
1000f778:	2401      	movs	r4, #1
1000f77a:	0312      	lsls	r2, r2, #12
1000f77c:	4315      	orrs	r5, r2
1000f77e:	032d      	lsls	r5, r5, #12
1000f780:	4698      	mov	r8, r3
1000f782:	0b2d      	lsrs	r5, r5, #12
1000f784:	400c      	ands	r4, r1
1000f786:	4b04      	ldr	r3, [pc, #16]	; (1000f798 <__aeabi_dmul+0x4f0>)
1000f788:	e5f4      	b.n	1000f374 <__aeabi_dmul+0xcc>
1000f78a:	46c0      	nop			; (mov r8, r8)
1000f78c:	000003ff 	.word	0x000003ff
1000f790:	feffffff 	.word	0xfeffffff
1000f794:	000007fe 	.word	0x000007fe
1000f798:	000007ff 	.word	0x000007ff

1000f79c <__aeabi_dsub>:
1000f79c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f79e:	4657      	mov	r7, sl
1000f7a0:	464e      	mov	r6, r9
1000f7a2:	4645      	mov	r5, r8
1000f7a4:	b4e0      	push	{r5, r6, r7}
1000f7a6:	000e      	movs	r6, r1
1000f7a8:	0011      	movs	r1, r2
1000f7aa:	0ff2      	lsrs	r2, r6, #31
1000f7ac:	4692      	mov	sl, r2
1000f7ae:	00c5      	lsls	r5, r0, #3
1000f7b0:	0f42      	lsrs	r2, r0, #29
1000f7b2:	0318      	lsls	r0, r3, #12
1000f7b4:	0337      	lsls	r7, r6, #12
1000f7b6:	0074      	lsls	r4, r6, #1
1000f7b8:	0a40      	lsrs	r0, r0, #9
1000f7ba:	0f4e      	lsrs	r6, r1, #29
1000f7bc:	0a7f      	lsrs	r7, r7, #9
1000f7be:	4330      	orrs	r0, r6
1000f7c0:	4ecf      	ldr	r6, [pc, #828]	; (1000fb00 <__aeabi_dsub+0x364>)
1000f7c2:	4317      	orrs	r7, r2
1000f7c4:	005a      	lsls	r2, r3, #1
1000f7c6:	0d64      	lsrs	r4, r4, #21
1000f7c8:	0d52      	lsrs	r2, r2, #21
1000f7ca:	0fdb      	lsrs	r3, r3, #31
1000f7cc:	00c9      	lsls	r1, r1, #3
1000f7ce:	42b2      	cmp	r2, r6
1000f7d0:	d100      	bne.n	1000f7d4 <__aeabi_dsub+0x38>
1000f7d2:	e0e5      	b.n	1000f9a0 <__aeabi_dsub+0x204>
1000f7d4:	2601      	movs	r6, #1
1000f7d6:	4073      	eors	r3, r6
1000f7d8:	1aa6      	subs	r6, r4, r2
1000f7da:	46b4      	mov	ip, r6
1000f7dc:	4553      	cmp	r3, sl
1000f7de:	d100      	bne.n	1000f7e2 <__aeabi_dsub+0x46>
1000f7e0:	e0af      	b.n	1000f942 <__aeabi_dsub+0x1a6>
1000f7e2:	2e00      	cmp	r6, #0
1000f7e4:	dc00      	bgt.n	1000f7e8 <__aeabi_dsub+0x4c>
1000f7e6:	e10d      	b.n	1000fa04 <__aeabi_dsub+0x268>
1000f7e8:	2a00      	cmp	r2, #0
1000f7ea:	d13a      	bne.n	1000f862 <__aeabi_dsub+0xc6>
1000f7ec:	0003      	movs	r3, r0
1000f7ee:	430b      	orrs	r3, r1
1000f7f0:	d000      	beq.n	1000f7f4 <__aeabi_dsub+0x58>
1000f7f2:	e0e4      	b.n	1000f9be <__aeabi_dsub+0x222>
1000f7f4:	076b      	lsls	r3, r5, #29
1000f7f6:	d009      	beq.n	1000f80c <__aeabi_dsub+0x70>
1000f7f8:	230f      	movs	r3, #15
1000f7fa:	402b      	ands	r3, r5
1000f7fc:	2b04      	cmp	r3, #4
1000f7fe:	d005      	beq.n	1000f80c <__aeabi_dsub+0x70>
1000f800:	1d2b      	adds	r3, r5, #4
1000f802:	42ab      	cmp	r3, r5
1000f804:	41ad      	sbcs	r5, r5
1000f806:	426d      	negs	r5, r5
1000f808:	197f      	adds	r7, r7, r5
1000f80a:	001d      	movs	r5, r3
1000f80c:	023b      	lsls	r3, r7, #8
1000f80e:	d400      	bmi.n	1000f812 <__aeabi_dsub+0x76>
1000f810:	e088      	b.n	1000f924 <__aeabi_dsub+0x188>
1000f812:	4bbb      	ldr	r3, [pc, #748]	; (1000fb00 <__aeabi_dsub+0x364>)
1000f814:	3401      	adds	r4, #1
1000f816:	429c      	cmp	r4, r3
1000f818:	d100      	bne.n	1000f81c <__aeabi_dsub+0x80>
1000f81a:	e110      	b.n	1000fa3e <__aeabi_dsub+0x2a2>
1000f81c:	003a      	movs	r2, r7
1000f81e:	4bb9      	ldr	r3, [pc, #740]	; (1000fb04 <__aeabi_dsub+0x368>)
1000f820:	4651      	mov	r1, sl
1000f822:	401a      	ands	r2, r3
1000f824:	2301      	movs	r3, #1
1000f826:	0750      	lsls	r0, r2, #29
1000f828:	08ed      	lsrs	r5, r5, #3
1000f82a:	0252      	lsls	r2, r2, #9
1000f82c:	0564      	lsls	r4, r4, #21
1000f82e:	4305      	orrs	r5, r0
1000f830:	0b12      	lsrs	r2, r2, #12
1000f832:	0d64      	lsrs	r4, r4, #21
1000f834:	400b      	ands	r3, r1
1000f836:	2100      	movs	r1, #0
1000f838:	0028      	movs	r0, r5
1000f83a:	0312      	lsls	r2, r2, #12
1000f83c:	0d0d      	lsrs	r5, r1, #20
1000f83e:	0b12      	lsrs	r2, r2, #12
1000f840:	0564      	lsls	r4, r4, #21
1000f842:	052d      	lsls	r5, r5, #20
1000f844:	4315      	orrs	r5, r2
1000f846:	0862      	lsrs	r2, r4, #1
1000f848:	4caf      	ldr	r4, [pc, #700]	; (1000fb08 <__aeabi_dsub+0x36c>)
1000f84a:	07db      	lsls	r3, r3, #31
1000f84c:	402c      	ands	r4, r5
1000f84e:	4314      	orrs	r4, r2
1000f850:	0064      	lsls	r4, r4, #1
1000f852:	0864      	lsrs	r4, r4, #1
1000f854:	431c      	orrs	r4, r3
1000f856:	0021      	movs	r1, r4
1000f858:	bc1c      	pop	{r2, r3, r4}
1000f85a:	4690      	mov	r8, r2
1000f85c:	4699      	mov	r9, r3
1000f85e:	46a2      	mov	sl, r4
1000f860:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f862:	4ba7      	ldr	r3, [pc, #668]	; (1000fb00 <__aeabi_dsub+0x364>)
1000f864:	429c      	cmp	r4, r3
1000f866:	d0c5      	beq.n	1000f7f4 <__aeabi_dsub+0x58>
1000f868:	2380      	movs	r3, #128	; 0x80
1000f86a:	041b      	lsls	r3, r3, #16
1000f86c:	4318      	orrs	r0, r3
1000f86e:	4663      	mov	r3, ip
1000f870:	2b38      	cmp	r3, #56	; 0x38
1000f872:	dd00      	ble.n	1000f876 <__aeabi_dsub+0xda>
1000f874:	e0fd      	b.n	1000fa72 <__aeabi_dsub+0x2d6>
1000f876:	2b1f      	cmp	r3, #31
1000f878:	dd00      	ble.n	1000f87c <__aeabi_dsub+0xe0>
1000f87a:	e130      	b.n	1000fade <__aeabi_dsub+0x342>
1000f87c:	4662      	mov	r2, ip
1000f87e:	2320      	movs	r3, #32
1000f880:	1a9b      	subs	r3, r3, r2
1000f882:	0002      	movs	r2, r0
1000f884:	409a      	lsls	r2, r3
1000f886:	4666      	mov	r6, ip
1000f888:	4690      	mov	r8, r2
1000f88a:	000a      	movs	r2, r1
1000f88c:	4099      	lsls	r1, r3
1000f88e:	40f2      	lsrs	r2, r6
1000f890:	4646      	mov	r6, r8
1000f892:	1e4b      	subs	r3, r1, #1
1000f894:	4199      	sbcs	r1, r3
1000f896:	4332      	orrs	r2, r6
1000f898:	4311      	orrs	r1, r2
1000f89a:	4663      	mov	r3, ip
1000f89c:	0002      	movs	r2, r0
1000f89e:	40da      	lsrs	r2, r3
1000f8a0:	1a69      	subs	r1, r5, r1
1000f8a2:	428d      	cmp	r5, r1
1000f8a4:	419b      	sbcs	r3, r3
1000f8a6:	000d      	movs	r5, r1
1000f8a8:	1aba      	subs	r2, r7, r2
1000f8aa:	425b      	negs	r3, r3
1000f8ac:	1ad7      	subs	r7, r2, r3
1000f8ae:	023b      	lsls	r3, r7, #8
1000f8b0:	d535      	bpl.n	1000f91e <__aeabi_dsub+0x182>
1000f8b2:	027a      	lsls	r2, r7, #9
1000f8b4:	0a53      	lsrs	r3, r2, #9
1000f8b6:	4698      	mov	r8, r3
1000f8b8:	4643      	mov	r3, r8
1000f8ba:	2b00      	cmp	r3, #0
1000f8bc:	d100      	bne.n	1000f8c0 <__aeabi_dsub+0x124>
1000f8be:	e0c4      	b.n	1000fa4a <__aeabi_dsub+0x2ae>
1000f8c0:	4640      	mov	r0, r8
1000f8c2:	f000 fb6b 	bl	1000ff9c <__clzsi2>
1000f8c6:	0003      	movs	r3, r0
1000f8c8:	3b08      	subs	r3, #8
1000f8ca:	2b1f      	cmp	r3, #31
1000f8cc:	dd00      	ble.n	1000f8d0 <__aeabi_dsub+0x134>
1000f8ce:	e0c5      	b.n	1000fa5c <__aeabi_dsub+0x2c0>
1000f8d0:	2220      	movs	r2, #32
1000f8d2:	0029      	movs	r1, r5
1000f8d4:	1ad2      	subs	r2, r2, r3
1000f8d6:	4647      	mov	r7, r8
1000f8d8:	40d1      	lsrs	r1, r2
1000f8da:	409f      	lsls	r7, r3
1000f8dc:	000a      	movs	r2, r1
1000f8de:	409d      	lsls	r5, r3
1000f8e0:	433a      	orrs	r2, r7
1000f8e2:	429c      	cmp	r4, r3
1000f8e4:	dd00      	ble.n	1000f8e8 <__aeabi_dsub+0x14c>
1000f8e6:	e0c0      	b.n	1000fa6a <__aeabi_dsub+0x2ce>
1000f8e8:	1b1c      	subs	r4, r3, r4
1000f8ea:	1c63      	adds	r3, r4, #1
1000f8ec:	2b1f      	cmp	r3, #31
1000f8ee:	dd00      	ble.n	1000f8f2 <__aeabi_dsub+0x156>
1000f8f0:	e0e4      	b.n	1000fabc <__aeabi_dsub+0x320>
1000f8f2:	2120      	movs	r1, #32
1000f8f4:	0014      	movs	r4, r2
1000f8f6:	0028      	movs	r0, r5
1000f8f8:	1ac9      	subs	r1, r1, r3
1000f8fa:	40d8      	lsrs	r0, r3
1000f8fc:	408c      	lsls	r4, r1
1000f8fe:	408d      	lsls	r5, r1
1000f900:	4304      	orrs	r4, r0
1000f902:	40da      	lsrs	r2, r3
1000f904:	1e68      	subs	r0, r5, #1
1000f906:	4185      	sbcs	r5, r0
1000f908:	0017      	movs	r7, r2
1000f90a:	4325      	orrs	r5, r4
1000f90c:	2400      	movs	r4, #0
1000f90e:	e771      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000f910:	4642      	mov	r2, r8
1000f912:	4663      	mov	r3, ip
1000f914:	431a      	orrs	r2, r3
1000f916:	d100      	bne.n	1000f91a <__aeabi_dsub+0x17e>
1000f918:	e24c      	b.n	1000fdb4 <__aeabi_dsub+0x618>
1000f91a:	4667      	mov	r7, ip
1000f91c:	4645      	mov	r5, r8
1000f91e:	076b      	lsls	r3, r5, #29
1000f920:	d000      	beq.n	1000f924 <__aeabi_dsub+0x188>
1000f922:	e769      	b.n	1000f7f8 <__aeabi_dsub+0x5c>
1000f924:	2301      	movs	r3, #1
1000f926:	4651      	mov	r1, sl
1000f928:	0778      	lsls	r0, r7, #29
1000f92a:	08ed      	lsrs	r5, r5, #3
1000f92c:	08fa      	lsrs	r2, r7, #3
1000f92e:	400b      	ands	r3, r1
1000f930:	4305      	orrs	r5, r0
1000f932:	4973      	ldr	r1, [pc, #460]	; (1000fb00 <__aeabi_dsub+0x364>)
1000f934:	428c      	cmp	r4, r1
1000f936:	d038      	beq.n	1000f9aa <__aeabi_dsub+0x20e>
1000f938:	0312      	lsls	r2, r2, #12
1000f93a:	0564      	lsls	r4, r4, #21
1000f93c:	0b12      	lsrs	r2, r2, #12
1000f93e:	0d64      	lsrs	r4, r4, #21
1000f940:	e779      	b.n	1000f836 <__aeabi_dsub+0x9a>
1000f942:	2e00      	cmp	r6, #0
1000f944:	dc00      	bgt.n	1000f948 <__aeabi_dsub+0x1ac>
1000f946:	e09a      	b.n	1000fa7e <__aeabi_dsub+0x2e2>
1000f948:	2a00      	cmp	r2, #0
1000f94a:	d047      	beq.n	1000f9dc <__aeabi_dsub+0x240>
1000f94c:	4a6c      	ldr	r2, [pc, #432]	; (1000fb00 <__aeabi_dsub+0x364>)
1000f94e:	4294      	cmp	r4, r2
1000f950:	d100      	bne.n	1000f954 <__aeabi_dsub+0x1b8>
1000f952:	e74f      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000f954:	2280      	movs	r2, #128	; 0x80
1000f956:	0412      	lsls	r2, r2, #16
1000f958:	4310      	orrs	r0, r2
1000f95a:	4662      	mov	r2, ip
1000f95c:	2a38      	cmp	r2, #56	; 0x38
1000f95e:	dc00      	bgt.n	1000f962 <__aeabi_dsub+0x1c6>
1000f960:	e108      	b.n	1000fb74 <__aeabi_dsub+0x3d8>
1000f962:	4301      	orrs	r1, r0
1000f964:	1e48      	subs	r0, r1, #1
1000f966:	4181      	sbcs	r1, r0
1000f968:	2200      	movs	r2, #0
1000f96a:	b2c9      	uxtb	r1, r1
1000f96c:	1949      	adds	r1, r1, r5
1000f96e:	19d2      	adds	r2, r2, r7
1000f970:	42a9      	cmp	r1, r5
1000f972:	41bf      	sbcs	r7, r7
1000f974:	000d      	movs	r5, r1
1000f976:	427f      	negs	r7, r7
1000f978:	18bf      	adds	r7, r7, r2
1000f97a:	023a      	lsls	r2, r7, #8
1000f97c:	d400      	bmi.n	1000f980 <__aeabi_dsub+0x1e4>
1000f97e:	e142      	b.n	1000fc06 <__aeabi_dsub+0x46a>
1000f980:	4a5f      	ldr	r2, [pc, #380]	; (1000fb00 <__aeabi_dsub+0x364>)
1000f982:	3401      	adds	r4, #1
1000f984:	4294      	cmp	r4, r2
1000f986:	d100      	bne.n	1000f98a <__aeabi_dsub+0x1ee>
1000f988:	e14e      	b.n	1000fc28 <__aeabi_dsub+0x48c>
1000f98a:	2001      	movs	r0, #1
1000f98c:	4a5d      	ldr	r2, [pc, #372]	; (1000fb04 <__aeabi_dsub+0x368>)
1000f98e:	0869      	lsrs	r1, r5, #1
1000f990:	403a      	ands	r2, r7
1000f992:	4028      	ands	r0, r5
1000f994:	4308      	orrs	r0, r1
1000f996:	07d5      	lsls	r5, r2, #31
1000f998:	4305      	orrs	r5, r0
1000f99a:	0857      	lsrs	r7, r2, #1
1000f99c:	469a      	mov	sl, r3
1000f99e:	e729      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000f9a0:	0006      	movs	r6, r0
1000f9a2:	430e      	orrs	r6, r1
1000f9a4:	d000      	beq.n	1000f9a8 <__aeabi_dsub+0x20c>
1000f9a6:	e717      	b.n	1000f7d8 <__aeabi_dsub+0x3c>
1000f9a8:	e714      	b.n	1000f7d4 <__aeabi_dsub+0x38>
1000f9aa:	0029      	movs	r1, r5
1000f9ac:	4311      	orrs	r1, r2
1000f9ae:	d100      	bne.n	1000f9b2 <__aeabi_dsub+0x216>
1000f9b0:	e1f9      	b.n	1000fda6 <__aeabi_dsub+0x60a>
1000f9b2:	2180      	movs	r1, #128	; 0x80
1000f9b4:	0309      	lsls	r1, r1, #12
1000f9b6:	430a      	orrs	r2, r1
1000f9b8:	0312      	lsls	r2, r2, #12
1000f9ba:	0b12      	lsrs	r2, r2, #12
1000f9bc:	e73b      	b.n	1000f836 <__aeabi_dsub+0x9a>
1000f9be:	2301      	movs	r3, #1
1000f9c0:	425b      	negs	r3, r3
1000f9c2:	4698      	mov	r8, r3
1000f9c4:	44c4      	add	ip, r8
1000f9c6:	4663      	mov	r3, ip
1000f9c8:	2b00      	cmp	r3, #0
1000f9ca:	d172      	bne.n	1000fab2 <__aeabi_dsub+0x316>
1000f9cc:	1a69      	subs	r1, r5, r1
1000f9ce:	428d      	cmp	r5, r1
1000f9d0:	419b      	sbcs	r3, r3
1000f9d2:	1a3f      	subs	r7, r7, r0
1000f9d4:	425b      	negs	r3, r3
1000f9d6:	1aff      	subs	r7, r7, r3
1000f9d8:	000d      	movs	r5, r1
1000f9da:	e768      	b.n	1000f8ae <__aeabi_dsub+0x112>
1000f9dc:	0002      	movs	r2, r0
1000f9de:	430a      	orrs	r2, r1
1000f9e0:	d100      	bne.n	1000f9e4 <__aeabi_dsub+0x248>
1000f9e2:	e707      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000f9e4:	2201      	movs	r2, #1
1000f9e6:	4252      	negs	r2, r2
1000f9e8:	4690      	mov	r8, r2
1000f9ea:	44c4      	add	ip, r8
1000f9ec:	4662      	mov	r2, ip
1000f9ee:	2a00      	cmp	r2, #0
1000f9f0:	d000      	beq.n	1000f9f4 <__aeabi_dsub+0x258>
1000f9f2:	e0e6      	b.n	1000fbc2 <__aeabi_dsub+0x426>
1000f9f4:	1869      	adds	r1, r5, r1
1000f9f6:	42a9      	cmp	r1, r5
1000f9f8:	41b6      	sbcs	r6, r6
1000f9fa:	183f      	adds	r7, r7, r0
1000f9fc:	4276      	negs	r6, r6
1000f9fe:	19f7      	adds	r7, r6, r7
1000fa00:	000d      	movs	r5, r1
1000fa02:	e7ba      	b.n	1000f97a <__aeabi_dsub+0x1de>
1000fa04:	2e00      	cmp	r6, #0
1000fa06:	d000      	beq.n	1000fa0a <__aeabi_dsub+0x26e>
1000fa08:	e080      	b.n	1000fb0c <__aeabi_dsub+0x370>
1000fa0a:	1c62      	adds	r2, r4, #1
1000fa0c:	0552      	lsls	r2, r2, #21
1000fa0e:	0d52      	lsrs	r2, r2, #21
1000fa10:	2a01      	cmp	r2, #1
1000fa12:	dc00      	bgt.n	1000fa16 <__aeabi_dsub+0x27a>
1000fa14:	e0f9      	b.n	1000fc0a <__aeabi_dsub+0x46e>
1000fa16:	1a6a      	subs	r2, r5, r1
1000fa18:	4691      	mov	r9, r2
1000fa1a:	454d      	cmp	r5, r9
1000fa1c:	41b6      	sbcs	r6, r6
1000fa1e:	1a3a      	subs	r2, r7, r0
1000fa20:	4276      	negs	r6, r6
1000fa22:	1b92      	subs	r2, r2, r6
1000fa24:	4690      	mov	r8, r2
1000fa26:	0212      	lsls	r2, r2, #8
1000fa28:	d400      	bmi.n	1000fa2c <__aeabi_dsub+0x290>
1000fa2a:	e099      	b.n	1000fb60 <__aeabi_dsub+0x3c4>
1000fa2c:	1b4d      	subs	r5, r1, r5
1000fa2e:	42a9      	cmp	r1, r5
1000fa30:	4189      	sbcs	r1, r1
1000fa32:	1bc7      	subs	r7, r0, r7
1000fa34:	4249      	negs	r1, r1
1000fa36:	1a7a      	subs	r2, r7, r1
1000fa38:	4690      	mov	r8, r2
1000fa3a:	469a      	mov	sl, r3
1000fa3c:	e73c      	b.n	1000f8b8 <__aeabi_dsub+0x11c>
1000fa3e:	4652      	mov	r2, sl
1000fa40:	2301      	movs	r3, #1
1000fa42:	2500      	movs	r5, #0
1000fa44:	4013      	ands	r3, r2
1000fa46:	2200      	movs	r2, #0
1000fa48:	e6f5      	b.n	1000f836 <__aeabi_dsub+0x9a>
1000fa4a:	0028      	movs	r0, r5
1000fa4c:	f000 faa6 	bl	1000ff9c <__clzsi2>
1000fa50:	3020      	adds	r0, #32
1000fa52:	0003      	movs	r3, r0
1000fa54:	3b08      	subs	r3, #8
1000fa56:	2b1f      	cmp	r3, #31
1000fa58:	dc00      	bgt.n	1000fa5c <__aeabi_dsub+0x2c0>
1000fa5a:	e739      	b.n	1000f8d0 <__aeabi_dsub+0x134>
1000fa5c:	002a      	movs	r2, r5
1000fa5e:	3828      	subs	r0, #40	; 0x28
1000fa60:	4082      	lsls	r2, r0
1000fa62:	2500      	movs	r5, #0
1000fa64:	429c      	cmp	r4, r3
1000fa66:	dc00      	bgt.n	1000fa6a <__aeabi_dsub+0x2ce>
1000fa68:	e73e      	b.n	1000f8e8 <__aeabi_dsub+0x14c>
1000fa6a:	4f26      	ldr	r7, [pc, #152]	; (1000fb04 <__aeabi_dsub+0x368>)
1000fa6c:	1ae4      	subs	r4, r4, r3
1000fa6e:	4017      	ands	r7, r2
1000fa70:	e6c0      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fa72:	4301      	orrs	r1, r0
1000fa74:	1e48      	subs	r0, r1, #1
1000fa76:	4181      	sbcs	r1, r0
1000fa78:	2200      	movs	r2, #0
1000fa7a:	b2c9      	uxtb	r1, r1
1000fa7c:	e710      	b.n	1000f8a0 <__aeabi_dsub+0x104>
1000fa7e:	2e00      	cmp	r6, #0
1000fa80:	d000      	beq.n	1000fa84 <__aeabi_dsub+0x2e8>
1000fa82:	e0f1      	b.n	1000fc68 <__aeabi_dsub+0x4cc>
1000fa84:	1c62      	adds	r2, r4, #1
1000fa86:	4694      	mov	ip, r2
1000fa88:	0552      	lsls	r2, r2, #21
1000fa8a:	0d52      	lsrs	r2, r2, #21
1000fa8c:	2a01      	cmp	r2, #1
1000fa8e:	dc00      	bgt.n	1000fa92 <__aeabi_dsub+0x2f6>
1000fa90:	e0a0      	b.n	1000fbd4 <__aeabi_dsub+0x438>
1000fa92:	4a1b      	ldr	r2, [pc, #108]	; (1000fb00 <__aeabi_dsub+0x364>)
1000fa94:	4594      	cmp	ip, r2
1000fa96:	d100      	bne.n	1000fa9a <__aeabi_dsub+0x2fe>
1000fa98:	e0c5      	b.n	1000fc26 <__aeabi_dsub+0x48a>
1000fa9a:	1869      	adds	r1, r5, r1
1000fa9c:	42a9      	cmp	r1, r5
1000fa9e:	4192      	sbcs	r2, r2
1000faa0:	183f      	adds	r7, r7, r0
1000faa2:	4252      	negs	r2, r2
1000faa4:	19d2      	adds	r2, r2, r7
1000faa6:	0849      	lsrs	r1, r1, #1
1000faa8:	07d5      	lsls	r5, r2, #31
1000faaa:	430d      	orrs	r5, r1
1000faac:	0857      	lsrs	r7, r2, #1
1000faae:	4664      	mov	r4, ip
1000fab0:	e6a0      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fab2:	4b13      	ldr	r3, [pc, #76]	; (1000fb00 <__aeabi_dsub+0x364>)
1000fab4:	429c      	cmp	r4, r3
1000fab6:	d000      	beq.n	1000faba <__aeabi_dsub+0x31e>
1000fab8:	e6d9      	b.n	1000f86e <__aeabi_dsub+0xd2>
1000faba:	e69b      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fabc:	0011      	movs	r1, r2
1000fabe:	3c1f      	subs	r4, #31
1000fac0:	40e1      	lsrs	r1, r4
1000fac2:	000c      	movs	r4, r1
1000fac4:	2b20      	cmp	r3, #32
1000fac6:	d100      	bne.n	1000faca <__aeabi_dsub+0x32e>
1000fac8:	e080      	b.n	1000fbcc <__aeabi_dsub+0x430>
1000faca:	2140      	movs	r1, #64	; 0x40
1000facc:	1acb      	subs	r3, r1, r3
1000face:	409a      	lsls	r2, r3
1000fad0:	4315      	orrs	r5, r2
1000fad2:	1e6a      	subs	r2, r5, #1
1000fad4:	4195      	sbcs	r5, r2
1000fad6:	2700      	movs	r7, #0
1000fad8:	4325      	orrs	r5, r4
1000fada:	2400      	movs	r4, #0
1000fadc:	e71f      	b.n	1000f91e <__aeabi_dsub+0x182>
1000fade:	4663      	mov	r3, ip
1000fae0:	0002      	movs	r2, r0
1000fae2:	3b20      	subs	r3, #32
1000fae4:	40da      	lsrs	r2, r3
1000fae6:	4663      	mov	r3, ip
1000fae8:	2b20      	cmp	r3, #32
1000faea:	d071      	beq.n	1000fbd0 <__aeabi_dsub+0x434>
1000faec:	2340      	movs	r3, #64	; 0x40
1000faee:	4666      	mov	r6, ip
1000faf0:	1b9b      	subs	r3, r3, r6
1000faf2:	4098      	lsls	r0, r3
1000faf4:	4301      	orrs	r1, r0
1000faf6:	1e48      	subs	r0, r1, #1
1000faf8:	4181      	sbcs	r1, r0
1000fafa:	4311      	orrs	r1, r2
1000fafc:	2200      	movs	r2, #0
1000fafe:	e6cf      	b.n	1000f8a0 <__aeabi_dsub+0x104>
1000fb00:	000007ff 	.word	0x000007ff
1000fb04:	ff7fffff 	.word	0xff7fffff
1000fb08:	800fffff 	.word	0x800fffff
1000fb0c:	2c00      	cmp	r4, #0
1000fb0e:	d048      	beq.n	1000fba2 <__aeabi_dsub+0x406>
1000fb10:	4cca      	ldr	r4, [pc, #808]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fb12:	42a2      	cmp	r2, r4
1000fb14:	d100      	bne.n	1000fb18 <__aeabi_dsub+0x37c>
1000fb16:	e0a2      	b.n	1000fc5e <__aeabi_dsub+0x4c2>
1000fb18:	4274      	negs	r4, r6
1000fb1a:	46a1      	mov	r9, r4
1000fb1c:	2480      	movs	r4, #128	; 0x80
1000fb1e:	0424      	lsls	r4, r4, #16
1000fb20:	4327      	orrs	r7, r4
1000fb22:	464c      	mov	r4, r9
1000fb24:	2c38      	cmp	r4, #56	; 0x38
1000fb26:	dd00      	ble.n	1000fb2a <__aeabi_dsub+0x38e>
1000fb28:	e0db      	b.n	1000fce2 <__aeabi_dsub+0x546>
1000fb2a:	2c1f      	cmp	r4, #31
1000fb2c:	dd00      	ble.n	1000fb30 <__aeabi_dsub+0x394>
1000fb2e:	e144      	b.n	1000fdba <__aeabi_dsub+0x61e>
1000fb30:	464e      	mov	r6, r9
1000fb32:	2420      	movs	r4, #32
1000fb34:	1ba4      	subs	r4, r4, r6
1000fb36:	003e      	movs	r6, r7
1000fb38:	40a6      	lsls	r6, r4
1000fb3a:	46a2      	mov	sl, r4
1000fb3c:	46b0      	mov	r8, r6
1000fb3e:	464c      	mov	r4, r9
1000fb40:	002e      	movs	r6, r5
1000fb42:	40e6      	lsrs	r6, r4
1000fb44:	46b4      	mov	ip, r6
1000fb46:	4646      	mov	r6, r8
1000fb48:	4664      	mov	r4, ip
1000fb4a:	4326      	orrs	r6, r4
1000fb4c:	4654      	mov	r4, sl
1000fb4e:	40a5      	lsls	r5, r4
1000fb50:	1e6c      	subs	r4, r5, #1
1000fb52:	41a5      	sbcs	r5, r4
1000fb54:	0034      	movs	r4, r6
1000fb56:	432c      	orrs	r4, r5
1000fb58:	464d      	mov	r5, r9
1000fb5a:	40ef      	lsrs	r7, r5
1000fb5c:	1b0d      	subs	r5, r1, r4
1000fb5e:	e028      	b.n	1000fbb2 <__aeabi_dsub+0x416>
1000fb60:	464a      	mov	r2, r9
1000fb62:	4643      	mov	r3, r8
1000fb64:	464d      	mov	r5, r9
1000fb66:	431a      	orrs	r2, r3
1000fb68:	d000      	beq.n	1000fb6c <__aeabi_dsub+0x3d0>
1000fb6a:	e6a5      	b.n	1000f8b8 <__aeabi_dsub+0x11c>
1000fb6c:	2300      	movs	r3, #0
1000fb6e:	2400      	movs	r4, #0
1000fb70:	2500      	movs	r5, #0
1000fb72:	e6de      	b.n	1000f932 <__aeabi_dsub+0x196>
1000fb74:	2a1f      	cmp	r2, #31
1000fb76:	dc5a      	bgt.n	1000fc2e <__aeabi_dsub+0x492>
1000fb78:	4666      	mov	r6, ip
1000fb7a:	2220      	movs	r2, #32
1000fb7c:	1b92      	subs	r2, r2, r6
1000fb7e:	0006      	movs	r6, r0
1000fb80:	4096      	lsls	r6, r2
1000fb82:	4691      	mov	r9, r2
1000fb84:	46b0      	mov	r8, r6
1000fb86:	4662      	mov	r2, ip
1000fb88:	000e      	movs	r6, r1
1000fb8a:	40d6      	lsrs	r6, r2
1000fb8c:	4642      	mov	r2, r8
1000fb8e:	4316      	orrs	r6, r2
1000fb90:	464a      	mov	r2, r9
1000fb92:	4091      	lsls	r1, r2
1000fb94:	1e4a      	subs	r2, r1, #1
1000fb96:	4191      	sbcs	r1, r2
1000fb98:	0002      	movs	r2, r0
1000fb9a:	4660      	mov	r0, ip
1000fb9c:	4331      	orrs	r1, r6
1000fb9e:	40c2      	lsrs	r2, r0
1000fba0:	e6e4      	b.n	1000f96c <__aeabi_dsub+0x1d0>
1000fba2:	003c      	movs	r4, r7
1000fba4:	432c      	orrs	r4, r5
1000fba6:	d05a      	beq.n	1000fc5e <__aeabi_dsub+0x4c2>
1000fba8:	43f4      	mvns	r4, r6
1000fbaa:	46a1      	mov	r9, r4
1000fbac:	2c00      	cmp	r4, #0
1000fbae:	d152      	bne.n	1000fc56 <__aeabi_dsub+0x4ba>
1000fbb0:	1b4d      	subs	r5, r1, r5
1000fbb2:	42a9      	cmp	r1, r5
1000fbb4:	4189      	sbcs	r1, r1
1000fbb6:	1bc7      	subs	r7, r0, r7
1000fbb8:	4249      	negs	r1, r1
1000fbba:	1a7f      	subs	r7, r7, r1
1000fbbc:	0014      	movs	r4, r2
1000fbbe:	469a      	mov	sl, r3
1000fbc0:	e675      	b.n	1000f8ae <__aeabi_dsub+0x112>
1000fbc2:	4a9e      	ldr	r2, [pc, #632]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fbc4:	4294      	cmp	r4, r2
1000fbc6:	d000      	beq.n	1000fbca <__aeabi_dsub+0x42e>
1000fbc8:	e6c7      	b.n	1000f95a <__aeabi_dsub+0x1be>
1000fbca:	e613      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fbcc:	2200      	movs	r2, #0
1000fbce:	e77f      	b.n	1000fad0 <__aeabi_dsub+0x334>
1000fbd0:	2000      	movs	r0, #0
1000fbd2:	e78f      	b.n	1000faf4 <__aeabi_dsub+0x358>
1000fbd4:	2c00      	cmp	r4, #0
1000fbd6:	d000      	beq.n	1000fbda <__aeabi_dsub+0x43e>
1000fbd8:	e0c8      	b.n	1000fd6c <__aeabi_dsub+0x5d0>
1000fbda:	003b      	movs	r3, r7
1000fbdc:	432b      	orrs	r3, r5
1000fbde:	d100      	bne.n	1000fbe2 <__aeabi_dsub+0x446>
1000fbe0:	e10f      	b.n	1000fe02 <__aeabi_dsub+0x666>
1000fbe2:	0003      	movs	r3, r0
1000fbe4:	430b      	orrs	r3, r1
1000fbe6:	d100      	bne.n	1000fbea <__aeabi_dsub+0x44e>
1000fbe8:	e604      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fbea:	1869      	adds	r1, r5, r1
1000fbec:	42a9      	cmp	r1, r5
1000fbee:	419b      	sbcs	r3, r3
1000fbf0:	183f      	adds	r7, r7, r0
1000fbf2:	425b      	negs	r3, r3
1000fbf4:	19df      	adds	r7, r3, r7
1000fbf6:	023b      	lsls	r3, r7, #8
1000fbf8:	d400      	bmi.n	1000fbfc <__aeabi_dsub+0x460>
1000fbfa:	e11a      	b.n	1000fe32 <__aeabi_dsub+0x696>
1000fbfc:	4b90      	ldr	r3, [pc, #576]	; (1000fe40 <__aeabi_dsub+0x6a4>)
1000fbfe:	000d      	movs	r5, r1
1000fc00:	401f      	ands	r7, r3
1000fc02:	4664      	mov	r4, ip
1000fc04:	e5f6      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fc06:	469a      	mov	sl, r3
1000fc08:	e689      	b.n	1000f91e <__aeabi_dsub+0x182>
1000fc0a:	003a      	movs	r2, r7
1000fc0c:	432a      	orrs	r2, r5
1000fc0e:	2c00      	cmp	r4, #0
1000fc10:	d15c      	bne.n	1000fccc <__aeabi_dsub+0x530>
1000fc12:	2a00      	cmp	r2, #0
1000fc14:	d175      	bne.n	1000fd02 <__aeabi_dsub+0x566>
1000fc16:	0002      	movs	r2, r0
1000fc18:	430a      	orrs	r2, r1
1000fc1a:	d100      	bne.n	1000fc1e <__aeabi_dsub+0x482>
1000fc1c:	e0ca      	b.n	1000fdb4 <__aeabi_dsub+0x618>
1000fc1e:	0007      	movs	r7, r0
1000fc20:	000d      	movs	r5, r1
1000fc22:	469a      	mov	sl, r3
1000fc24:	e5e6      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fc26:	4664      	mov	r4, ip
1000fc28:	2200      	movs	r2, #0
1000fc2a:	2500      	movs	r5, #0
1000fc2c:	e681      	b.n	1000f932 <__aeabi_dsub+0x196>
1000fc2e:	4662      	mov	r2, ip
1000fc30:	0006      	movs	r6, r0
1000fc32:	3a20      	subs	r2, #32
1000fc34:	40d6      	lsrs	r6, r2
1000fc36:	4662      	mov	r2, ip
1000fc38:	46b0      	mov	r8, r6
1000fc3a:	2a20      	cmp	r2, #32
1000fc3c:	d100      	bne.n	1000fc40 <__aeabi_dsub+0x4a4>
1000fc3e:	e0b7      	b.n	1000fdb0 <__aeabi_dsub+0x614>
1000fc40:	2240      	movs	r2, #64	; 0x40
1000fc42:	4666      	mov	r6, ip
1000fc44:	1b92      	subs	r2, r2, r6
1000fc46:	4090      	lsls	r0, r2
1000fc48:	4301      	orrs	r1, r0
1000fc4a:	4642      	mov	r2, r8
1000fc4c:	1e48      	subs	r0, r1, #1
1000fc4e:	4181      	sbcs	r1, r0
1000fc50:	4311      	orrs	r1, r2
1000fc52:	2200      	movs	r2, #0
1000fc54:	e68a      	b.n	1000f96c <__aeabi_dsub+0x1d0>
1000fc56:	4c79      	ldr	r4, [pc, #484]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fc58:	42a2      	cmp	r2, r4
1000fc5a:	d000      	beq.n	1000fc5e <__aeabi_dsub+0x4c2>
1000fc5c:	e761      	b.n	1000fb22 <__aeabi_dsub+0x386>
1000fc5e:	0007      	movs	r7, r0
1000fc60:	000d      	movs	r5, r1
1000fc62:	0014      	movs	r4, r2
1000fc64:	469a      	mov	sl, r3
1000fc66:	e5c5      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fc68:	2c00      	cmp	r4, #0
1000fc6a:	d141      	bne.n	1000fcf0 <__aeabi_dsub+0x554>
1000fc6c:	003c      	movs	r4, r7
1000fc6e:	432c      	orrs	r4, r5
1000fc70:	d078      	beq.n	1000fd64 <__aeabi_dsub+0x5c8>
1000fc72:	43f4      	mvns	r4, r6
1000fc74:	46a1      	mov	r9, r4
1000fc76:	2c00      	cmp	r4, #0
1000fc78:	d020      	beq.n	1000fcbc <__aeabi_dsub+0x520>
1000fc7a:	4c70      	ldr	r4, [pc, #448]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fc7c:	42a2      	cmp	r2, r4
1000fc7e:	d071      	beq.n	1000fd64 <__aeabi_dsub+0x5c8>
1000fc80:	464c      	mov	r4, r9
1000fc82:	2c38      	cmp	r4, #56	; 0x38
1000fc84:	dd00      	ble.n	1000fc88 <__aeabi_dsub+0x4ec>
1000fc86:	e0b2      	b.n	1000fdee <__aeabi_dsub+0x652>
1000fc88:	2c1f      	cmp	r4, #31
1000fc8a:	dd00      	ble.n	1000fc8e <__aeabi_dsub+0x4f2>
1000fc8c:	e0bc      	b.n	1000fe08 <__aeabi_dsub+0x66c>
1000fc8e:	2620      	movs	r6, #32
1000fc90:	1b34      	subs	r4, r6, r4
1000fc92:	46a2      	mov	sl, r4
1000fc94:	003c      	movs	r4, r7
1000fc96:	4656      	mov	r6, sl
1000fc98:	40b4      	lsls	r4, r6
1000fc9a:	464e      	mov	r6, r9
1000fc9c:	46a0      	mov	r8, r4
1000fc9e:	002c      	movs	r4, r5
1000fca0:	40f4      	lsrs	r4, r6
1000fca2:	46a4      	mov	ip, r4
1000fca4:	4644      	mov	r4, r8
1000fca6:	4666      	mov	r6, ip
1000fca8:	4334      	orrs	r4, r6
1000fcaa:	46a4      	mov	ip, r4
1000fcac:	4654      	mov	r4, sl
1000fcae:	40a5      	lsls	r5, r4
1000fcb0:	4664      	mov	r4, ip
1000fcb2:	1e6e      	subs	r6, r5, #1
1000fcb4:	41b5      	sbcs	r5, r6
1000fcb6:	4325      	orrs	r5, r4
1000fcb8:	464c      	mov	r4, r9
1000fcba:	40e7      	lsrs	r7, r4
1000fcbc:	186d      	adds	r5, r5, r1
1000fcbe:	428d      	cmp	r5, r1
1000fcc0:	4189      	sbcs	r1, r1
1000fcc2:	183f      	adds	r7, r7, r0
1000fcc4:	4249      	negs	r1, r1
1000fcc6:	19cf      	adds	r7, r1, r7
1000fcc8:	0014      	movs	r4, r2
1000fcca:	e656      	b.n	1000f97a <__aeabi_dsub+0x1de>
1000fccc:	2a00      	cmp	r2, #0
1000fcce:	d12f      	bne.n	1000fd30 <__aeabi_dsub+0x594>
1000fcd0:	0002      	movs	r2, r0
1000fcd2:	430a      	orrs	r2, r1
1000fcd4:	d100      	bne.n	1000fcd8 <__aeabi_dsub+0x53c>
1000fcd6:	e084      	b.n	1000fde2 <__aeabi_dsub+0x646>
1000fcd8:	0007      	movs	r7, r0
1000fcda:	000d      	movs	r5, r1
1000fcdc:	469a      	mov	sl, r3
1000fcde:	4c57      	ldr	r4, [pc, #348]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fce0:	e588      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fce2:	433d      	orrs	r5, r7
1000fce4:	1e6f      	subs	r7, r5, #1
1000fce6:	41bd      	sbcs	r5, r7
1000fce8:	b2ec      	uxtb	r4, r5
1000fcea:	2700      	movs	r7, #0
1000fcec:	1b0d      	subs	r5, r1, r4
1000fcee:	e760      	b.n	1000fbb2 <__aeabi_dsub+0x416>
1000fcf0:	4c52      	ldr	r4, [pc, #328]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fcf2:	42a2      	cmp	r2, r4
1000fcf4:	d036      	beq.n	1000fd64 <__aeabi_dsub+0x5c8>
1000fcf6:	4274      	negs	r4, r6
1000fcf8:	2680      	movs	r6, #128	; 0x80
1000fcfa:	0436      	lsls	r6, r6, #16
1000fcfc:	46a1      	mov	r9, r4
1000fcfe:	4337      	orrs	r7, r6
1000fd00:	e7be      	b.n	1000fc80 <__aeabi_dsub+0x4e4>
1000fd02:	0002      	movs	r2, r0
1000fd04:	430a      	orrs	r2, r1
1000fd06:	d100      	bne.n	1000fd0a <__aeabi_dsub+0x56e>
1000fd08:	e574      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fd0a:	1a6a      	subs	r2, r5, r1
1000fd0c:	4690      	mov	r8, r2
1000fd0e:	4545      	cmp	r5, r8
1000fd10:	41b6      	sbcs	r6, r6
1000fd12:	1a3a      	subs	r2, r7, r0
1000fd14:	4276      	negs	r6, r6
1000fd16:	1b92      	subs	r2, r2, r6
1000fd18:	4694      	mov	ip, r2
1000fd1a:	0212      	lsls	r2, r2, #8
1000fd1c:	d400      	bmi.n	1000fd20 <__aeabi_dsub+0x584>
1000fd1e:	e5f7      	b.n	1000f910 <__aeabi_dsub+0x174>
1000fd20:	1b4d      	subs	r5, r1, r5
1000fd22:	42a9      	cmp	r1, r5
1000fd24:	4189      	sbcs	r1, r1
1000fd26:	1bc7      	subs	r7, r0, r7
1000fd28:	4249      	negs	r1, r1
1000fd2a:	1a7f      	subs	r7, r7, r1
1000fd2c:	469a      	mov	sl, r3
1000fd2e:	e561      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fd30:	0002      	movs	r2, r0
1000fd32:	430a      	orrs	r2, r1
1000fd34:	d03a      	beq.n	1000fdac <__aeabi_dsub+0x610>
1000fd36:	08ed      	lsrs	r5, r5, #3
1000fd38:	077c      	lsls	r4, r7, #29
1000fd3a:	432c      	orrs	r4, r5
1000fd3c:	2580      	movs	r5, #128	; 0x80
1000fd3e:	08fa      	lsrs	r2, r7, #3
1000fd40:	032d      	lsls	r5, r5, #12
1000fd42:	422a      	tst	r2, r5
1000fd44:	d008      	beq.n	1000fd58 <__aeabi_dsub+0x5bc>
1000fd46:	08c7      	lsrs	r7, r0, #3
1000fd48:	422f      	tst	r7, r5
1000fd4a:	d105      	bne.n	1000fd58 <__aeabi_dsub+0x5bc>
1000fd4c:	0745      	lsls	r5, r0, #29
1000fd4e:	002c      	movs	r4, r5
1000fd50:	003a      	movs	r2, r7
1000fd52:	469a      	mov	sl, r3
1000fd54:	08c9      	lsrs	r1, r1, #3
1000fd56:	430c      	orrs	r4, r1
1000fd58:	0f67      	lsrs	r7, r4, #29
1000fd5a:	00d2      	lsls	r2, r2, #3
1000fd5c:	00e5      	lsls	r5, r4, #3
1000fd5e:	4317      	orrs	r7, r2
1000fd60:	4c36      	ldr	r4, [pc, #216]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fd62:	e547      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fd64:	0007      	movs	r7, r0
1000fd66:	000d      	movs	r5, r1
1000fd68:	0014      	movs	r4, r2
1000fd6a:	e543      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fd6c:	003a      	movs	r2, r7
1000fd6e:	432a      	orrs	r2, r5
1000fd70:	d043      	beq.n	1000fdfa <__aeabi_dsub+0x65e>
1000fd72:	0002      	movs	r2, r0
1000fd74:	430a      	orrs	r2, r1
1000fd76:	d019      	beq.n	1000fdac <__aeabi_dsub+0x610>
1000fd78:	08ed      	lsrs	r5, r5, #3
1000fd7a:	077c      	lsls	r4, r7, #29
1000fd7c:	432c      	orrs	r4, r5
1000fd7e:	2580      	movs	r5, #128	; 0x80
1000fd80:	08fa      	lsrs	r2, r7, #3
1000fd82:	032d      	lsls	r5, r5, #12
1000fd84:	422a      	tst	r2, r5
1000fd86:	d007      	beq.n	1000fd98 <__aeabi_dsub+0x5fc>
1000fd88:	08c6      	lsrs	r6, r0, #3
1000fd8a:	422e      	tst	r6, r5
1000fd8c:	d104      	bne.n	1000fd98 <__aeabi_dsub+0x5fc>
1000fd8e:	0747      	lsls	r7, r0, #29
1000fd90:	003c      	movs	r4, r7
1000fd92:	0032      	movs	r2, r6
1000fd94:	08c9      	lsrs	r1, r1, #3
1000fd96:	430c      	orrs	r4, r1
1000fd98:	00d7      	lsls	r7, r2, #3
1000fd9a:	0f62      	lsrs	r2, r4, #29
1000fd9c:	00e5      	lsls	r5, r4, #3
1000fd9e:	4317      	orrs	r7, r2
1000fda0:	469a      	mov	sl, r3
1000fda2:	4c26      	ldr	r4, [pc, #152]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fda4:	e526      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fda6:	2200      	movs	r2, #0
1000fda8:	2500      	movs	r5, #0
1000fdaa:	e544      	b.n	1000f836 <__aeabi_dsub+0x9a>
1000fdac:	4c23      	ldr	r4, [pc, #140]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fdae:	e521      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fdb0:	2000      	movs	r0, #0
1000fdb2:	e749      	b.n	1000fc48 <__aeabi_dsub+0x4ac>
1000fdb4:	2300      	movs	r3, #0
1000fdb6:	2500      	movs	r5, #0
1000fdb8:	e5bb      	b.n	1000f932 <__aeabi_dsub+0x196>
1000fdba:	464c      	mov	r4, r9
1000fdbc:	003e      	movs	r6, r7
1000fdbe:	3c20      	subs	r4, #32
1000fdc0:	40e6      	lsrs	r6, r4
1000fdc2:	464c      	mov	r4, r9
1000fdc4:	46b4      	mov	ip, r6
1000fdc6:	2c20      	cmp	r4, #32
1000fdc8:	d031      	beq.n	1000fe2e <__aeabi_dsub+0x692>
1000fdca:	2440      	movs	r4, #64	; 0x40
1000fdcc:	464e      	mov	r6, r9
1000fdce:	1ba6      	subs	r6, r4, r6
1000fdd0:	40b7      	lsls	r7, r6
1000fdd2:	433d      	orrs	r5, r7
1000fdd4:	1e6c      	subs	r4, r5, #1
1000fdd6:	41a5      	sbcs	r5, r4
1000fdd8:	4664      	mov	r4, ip
1000fdda:	432c      	orrs	r4, r5
1000fddc:	2700      	movs	r7, #0
1000fdde:	1b0d      	subs	r5, r1, r4
1000fde0:	e6e7      	b.n	1000fbb2 <__aeabi_dsub+0x416>
1000fde2:	2280      	movs	r2, #128	; 0x80
1000fde4:	2300      	movs	r3, #0
1000fde6:	0312      	lsls	r2, r2, #12
1000fde8:	4c14      	ldr	r4, [pc, #80]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fdea:	2500      	movs	r5, #0
1000fdec:	e5a1      	b.n	1000f932 <__aeabi_dsub+0x196>
1000fdee:	433d      	orrs	r5, r7
1000fdf0:	1e6f      	subs	r7, r5, #1
1000fdf2:	41bd      	sbcs	r5, r7
1000fdf4:	2700      	movs	r7, #0
1000fdf6:	b2ed      	uxtb	r5, r5
1000fdf8:	e760      	b.n	1000fcbc <__aeabi_dsub+0x520>
1000fdfa:	0007      	movs	r7, r0
1000fdfc:	000d      	movs	r5, r1
1000fdfe:	4c0f      	ldr	r4, [pc, #60]	; (1000fe3c <__aeabi_dsub+0x6a0>)
1000fe00:	e4f8      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fe02:	0007      	movs	r7, r0
1000fe04:	000d      	movs	r5, r1
1000fe06:	e4f5      	b.n	1000f7f4 <__aeabi_dsub+0x58>
1000fe08:	464e      	mov	r6, r9
1000fe0a:	003c      	movs	r4, r7
1000fe0c:	3e20      	subs	r6, #32
1000fe0e:	40f4      	lsrs	r4, r6
1000fe10:	46a0      	mov	r8, r4
1000fe12:	464c      	mov	r4, r9
1000fe14:	2c20      	cmp	r4, #32
1000fe16:	d00e      	beq.n	1000fe36 <__aeabi_dsub+0x69a>
1000fe18:	2440      	movs	r4, #64	; 0x40
1000fe1a:	464e      	mov	r6, r9
1000fe1c:	1ba4      	subs	r4, r4, r6
1000fe1e:	40a7      	lsls	r7, r4
1000fe20:	433d      	orrs	r5, r7
1000fe22:	1e6f      	subs	r7, r5, #1
1000fe24:	41bd      	sbcs	r5, r7
1000fe26:	4644      	mov	r4, r8
1000fe28:	2700      	movs	r7, #0
1000fe2a:	4325      	orrs	r5, r4
1000fe2c:	e746      	b.n	1000fcbc <__aeabi_dsub+0x520>
1000fe2e:	2700      	movs	r7, #0
1000fe30:	e7cf      	b.n	1000fdd2 <__aeabi_dsub+0x636>
1000fe32:	000d      	movs	r5, r1
1000fe34:	e573      	b.n	1000f91e <__aeabi_dsub+0x182>
1000fe36:	2700      	movs	r7, #0
1000fe38:	e7f2      	b.n	1000fe20 <__aeabi_dsub+0x684>
1000fe3a:	46c0      	nop			; (mov r8, r8)
1000fe3c:	000007ff 	.word	0x000007ff
1000fe40:	ff7fffff 	.word	0xff7fffff

1000fe44 <__aeabi_d2iz>:
1000fe44:	030b      	lsls	r3, r1, #12
1000fe46:	b530      	push	{r4, r5, lr}
1000fe48:	4d13      	ldr	r5, [pc, #76]	; (1000fe98 <__aeabi_d2iz+0x54>)
1000fe4a:	0b1a      	lsrs	r2, r3, #12
1000fe4c:	004b      	lsls	r3, r1, #1
1000fe4e:	0d5b      	lsrs	r3, r3, #21
1000fe50:	0fc9      	lsrs	r1, r1, #31
1000fe52:	2400      	movs	r4, #0
1000fe54:	42ab      	cmp	r3, r5
1000fe56:	dd11      	ble.n	1000fe7c <__aeabi_d2iz+0x38>
1000fe58:	4c10      	ldr	r4, [pc, #64]	; (1000fe9c <__aeabi_d2iz+0x58>)
1000fe5a:	42a3      	cmp	r3, r4
1000fe5c:	dc10      	bgt.n	1000fe80 <__aeabi_d2iz+0x3c>
1000fe5e:	2480      	movs	r4, #128	; 0x80
1000fe60:	0364      	lsls	r4, r4, #13
1000fe62:	4322      	orrs	r2, r4
1000fe64:	4c0e      	ldr	r4, [pc, #56]	; (1000fea0 <__aeabi_d2iz+0x5c>)
1000fe66:	1ae4      	subs	r4, r4, r3
1000fe68:	2c1f      	cmp	r4, #31
1000fe6a:	dd0c      	ble.n	1000fe86 <__aeabi_d2iz+0x42>
1000fe6c:	480d      	ldr	r0, [pc, #52]	; (1000fea4 <__aeabi_d2iz+0x60>)
1000fe6e:	1ac3      	subs	r3, r0, r3
1000fe70:	40da      	lsrs	r2, r3
1000fe72:	0013      	movs	r3, r2
1000fe74:	425c      	negs	r4, r3
1000fe76:	2900      	cmp	r1, #0
1000fe78:	d100      	bne.n	1000fe7c <__aeabi_d2iz+0x38>
1000fe7a:	001c      	movs	r4, r3
1000fe7c:	0020      	movs	r0, r4
1000fe7e:	bd30      	pop	{r4, r5, pc}
1000fe80:	4b09      	ldr	r3, [pc, #36]	; (1000fea8 <__aeabi_d2iz+0x64>)
1000fe82:	18cc      	adds	r4, r1, r3
1000fe84:	e7fa      	b.n	1000fe7c <__aeabi_d2iz+0x38>
1000fe86:	40e0      	lsrs	r0, r4
1000fe88:	4c08      	ldr	r4, [pc, #32]	; (1000feac <__aeabi_d2iz+0x68>)
1000fe8a:	46a4      	mov	ip, r4
1000fe8c:	4463      	add	r3, ip
1000fe8e:	409a      	lsls	r2, r3
1000fe90:	0013      	movs	r3, r2
1000fe92:	4303      	orrs	r3, r0
1000fe94:	e7ee      	b.n	1000fe74 <__aeabi_d2iz+0x30>
1000fe96:	46c0      	nop			; (mov r8, r8)
1000fe98:	000003fe 	.word	0x000003fe
1000fe9c:	0000041d 	.word	0x0000041d
1000fea0:	00000433 	.word	0x00000433
1000fea4:	00000413 	.word	0x00000413
1000fea8:	7fffffff 	.word	0x7fffffff
1000feac:	fffffbed 	.word	0xfffffbed

1000feb0 <__aeabi_ui2d>:
1000feb0:	b570      	push	{r4, r5, r6, lr}
1000feb2:	1e05      	subs	r5, r0, #0
1000feb4:	d028      	beq.n	1000ff08 <__aeabi_ui2d+0x58>
1000feb6:	f000 f871 	bl	1000ff9c <__clzsi2>
1000feba:	4b15      	ldr	r3, [pc, #84]	; (1000ff10 <__aeabi_ui2d+0x60>)
1000febc:	4a15      	ldr	r2, [pc, #84]	; (1000ff14 <__aeabi_ui2d+0x64>)
1000febe:	1a1b      	subs	r3, r3, r0
1000fec0:	1ad2      	subs	r2, r2, r3
1000fec2:	2a1f      	cmp	r2, #31
1000fec4:	dd16      	ble.n	1000fef4 <__aeabi_ui2d+0x44>
1000fec6:	002c      	movs	r4, r5
1000fec8:	4a13      	ldr	r2, [pc, #76]	; (1000ff18 <__aeabi_ui2d+0x68>)
1000feca:	2500      	movs	r5, #0
1000fecc:	1ad2      	subs	r2, r2, r3
1000fece:	4094      	lsls	r4, r2
1000fed0:	055a      	lsls	r2, r3, #21
1000fed2:	0324      	lsls	r4, r4, #12
1000fed4:	0b24      	lsrs	r4, r4, #12
1000fed6:	0d52      	lsrs	r2, r2, #21
1000fed8:	2100      	movs	r1, #0
1000feda:	0324      	lsls	r4, r4, #12
1000fedc:	0d0b      	lsrs	r3, r1, #20
1000fede:	0b24      	lsrs	r4, r4, #12
1000fee0:	051b      	lsls	r3, r3, #20
1000fee2:	4323      	orrs	r3, r4
1000fee4:	4c0d      	ldr	r4, [pc, #52]	; (1000ff1c <__aeabi_ui2d+0x6c>)
1000fee6:	0512      	lsls	r2, r2, #20
1000fee8:	4023      	ands	r3, r4
1000feea:	4313      	orrs	r3, r2
1000feec:	005b      	lsls	r3, r3, #1
1000feee:	0028      	movs	r0, r5
1000fef0:	0859      	lsrs	r1, r3, #1
1000fef2:	bd70      	pop	{r4, r5, r6, pc}
1000fef4:	210b      	movs	r1, #11
1000fef6:	002c      	movs	r4, r5
1000fef8:	1a08      	subs	r0, r1, r0
1000fefa:	40c4      	lsrs	r4, r0
1000fefc:	4095      	lsls	r5, r2
1000fefe:	0324      	lsls	r4, r4, #12
1000ff00:	055a      	lsls	r2, r3, #21
1000ff02:	0b24      	lsrs	r4, r4, #12
1000ff04:	0d52      	lsrs	r2, r2, #21
1000ff06:	e7e7      	b.n	1000fed8 <__aeabi_ui2d+0x28>
1000ff08:	2200      	movs	r2, #0
1000ff0a:	2400      	movs	r4, #0
1000ff0c:	e7e4      	b.n	1000fed8 <__aeabi_ui2d+0x28>
1000ff0e:	46c0      	nop			; (mov r8, r8)
1000ff10:	0000041e 	.word	0x0000041e
1000ff14:	00000433 	.word	0x00000433
1000ff18:	00000413 	.word	0x00000413
1000ff1c:	800fffff 	.word	0x800fffff

1000ff20 <__aeabi_cdrcmple>:
1000ff20:	4684      	mov	ip, r0
1000ff22:	1c10      	adds	r0, r2, #0
1000ff24:	4662      	mov	r2, ip
1000ff26:	468c      	mov	ip, r1
1000ff28:	1c19      	adds	r1, r3, #0
1000ff2a:	4663      	mov	r3, ip
1000ff2c:	e000      	b.n	1000ff30 <__aeabi_cdcmpeq>
1000ff2e:	46c0      	nop			; (mov r8, r8)

1000ff30 <__aeabi_cdcmpeq>:
1000ff30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000ff32:	f000 f8f5 	bl	10010120 <__ledf2>
1000ff36:	2800      	cmp	r0, #0
1000ff38:	d401      	bmi.n	1000ff3e <__aeabi_cdcmpeq+0xe>
1000ff3a:	2100      	movs	r1, #0
1000ff3c:	42c8      	cmn	r0, r1
1000ff3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000ff40 <__aeabi_dcmpeq>:
1000ff40:	b510      	push	{r4, lr}
1000ff42:	f000 f849 	bl	1000ffd8 <__eqdf2>
1000ff46:	4240      	negs	r0, r0
1000ff48:	3001      	adds	r0, #1
1000ff4a:	bd10      	pop	{r4, pc}

1000ff4c <__aeabi_dcmplt>:
1000ff4c:	b510      	push	{r4, lr}
1000ff4e:	f000 f8e7 	bl	10010120 <__ledf2>
1000ff52:	2800      	cmp	r0, #0
1000ff54:	db01      	blt.n	1000ff5a <__aeabi_dcmplt+0xe>
1000ff56:	2000      	movs	r0, #0
1000ff58:	bd10      	pop	{r4, pc}
1000ff5a:	2001      	movs	r0, #1
1000ff5c:	bd10      	pop	{r4, pc}
1000ff5e:	46c0      	nop			; (mov r8, r8)

1000ff60 <__aeabi_dcmple>:
1000ff60:	b510      	push	{r4, lr}
1000ff62:	f000 f8dd 	bl	10010120 <__ledf2>
1000ff66:	2800      	cmp	r0, #0
1000ff68:	dd01      	ble.n	1000ff6e <__aeabi_dcmple+0xe>
1000ff6a:	2000      	movs	r0, #0
1000ff6c:	bd10      	pop	{r4, pc}
1000ff6e:	2001      	movs	r0, #1
1000ff70:	bd10      	pop	{r4, pc}
1000ff72:	46c0      	nop			; (mov r8, r8)

1000ff74 <__aeabi_dcmpgt>:
1000ff74:	b510      	push	{r4, lr}
1000ff76:	f000 f86f 	bl	10010058 <__gedf2>
1000ff7a:	2800      	cmp	r0, #0
1000ff7c:	dc01      	bgt.n	1000ff82 <__aeabi_dcmpgt+0xe>
1000ff7e:	2000      	movs	r0, #0
1000ff80:	bd10      	pop	{r4, pc}
1000ff82:	2001      	movs	r0, #1
1000ff84:	bd10      	pop	{r4, pc}
1000ff86:	46c0      	nop			; (mov r8, r8)

1000ff88 <__aeabi_dcmpge>:
1000ff88:	b510      	push	{r4, lr}
1000ff8a:	f000 f865 	bl	10010058 <__gedf2>
1000ff8e:	2800      	cmp	r0, #0
1000ff90:	da01      	bge.n	1000ff96 <__aeabi_dcmpge+0xe>
1000ff92:	2000      	movs	r0, #0
1000ff94:	bd10      	pop	{r4, pc}
1000ff96:	2001      	movs	r0, #1
1000ff98:	bd10      	pop	{r4, pc}
1000ff9a:	46c0      	nop			; (mov r8, r8)

1000ff9c <__clzsi2>:
1000ff9c:	211c      	movs	r1, #28
1000ff9e:	2301      	movs	r3, #1
1000ffa0:	041b      	lsls	r3, r3, #16
1000ffa2:	4298      	cmp	r0, r3
1000ffa4:	d301      	bcc.n	1000ffaa <__clzsi2+0xe>
1000ffa6:	0c00      	lsrs	r0, r0, #16
1000ffa8:	3910      	subs	r1, #16
1000ffaa:	0a1b      	lsrs	r3, r3, #8
1000ffac:	4298      	cmp	r0, r3
1000ffae:	d301      	bcc.n	1000ffb4 <__clzsi2+0x18>
1000ffb0:	0a00      	lsrs	r0, r0, #8
1000ffb2:	3908      	subs	r1, #8
1000ffb4:	091b      	lsrs	r3, r3, #4
1000ffb6:	4298      	cmp	r0, r3
1000ffb8:	d301      	bcc.n	1000ffbe <__clzsi2+0x22>
1000ffba:	0900      	lsrs	r0, r0, #4
1000ffbc:	3904      	subs	r1, #4
1000ffbe:	a202      	add	r2, pc, #8	; (adr r2, 1000ffc8 <__clzsi2+0x2c>)
1000ffc0:	5c10      	ldrb	r0, [r2, r0]
1000ffc2:	1840      	adds	r0, r0, r1
1000ffc4:	4770      	bx	lr
1000ffc6:	46c0      	nop			; (mov r8, r8)
1000ffc8:	02020304 	.word	0x02020304
1000ffcc:	01010101 	.word	0x01010101
	...

1000ffd8 <__eqdf2>:
1000ffd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffda:	465f      	mov	r7, fp
1000ffdc:	4656      	mov	r6, sl
1000ffde:	464d      	mov	r5, r9
1000ffe0:	4644      	mov	r4, r8
1000ffe2:	b4f0      	push	{r4, r5, r6, r7}
1000ffe4:	031f      	lsls	r7, r3, #12
1000ffe6:	005c      	lsls	r4, r3, #1
1000ffe8:	0fdb      	lsrs	r3, r3, #31
1000ffea:	469a      	mov	sl, r3
1000ffec:	4b19      	ldr	r3, [pc, #100]	; (10010054 <__eqdf2+0x7c>)
1000ffee:	030e      	lsls	r6, r1, #12
1000fff0:	004d      	lsls	r5, r1, #1
1000fff2:	0fc9      	lsrs	r1, r1, #31
1000fff4:	4680      	mov	r8, r0
1000fff6:	0b36      	lsrs	r6, r6, #12
1000fff8:	0d6d      	lsrs	r5, r5, #21
1000fffa:	468b      	mov	fp, r1
1000fffc:	4691      	mov	r9, r2
1000fffe:	0b3f      	lsrs	r7, r7, #12
10010000:	0d64      	lsrs	r4, r4, #21
10010002:	429d      	cmp	r5, r3
10010004:	d019      	beq.n	1001003a <__eqdf2+0x62>
10010006:	4b13      	ldr	r3, [pc, #76]	; (10010054 <__eqdf2+0x7c>)
10010008:	429c      	cmp	r4, r3
1001000a:	d01b      	beq.n	10010044 <__eqdf2+0x6c>
1001000c:	2301      	movs	r3, #1
1001000e:	42a5      	cmp	r5, r4
10010010:	d006      	beq.n	10010020 <__eqdf2+0x48>
10010012:	0018      	movs	r0, r3
10010014:	bc3c      	pop	{r2, r3, r4, r5}
10010016:	4690      	mov	r8, r2
10010018:	4699      	mov	r9, r3
1001001a:	46a2      	mov	sl, r4
1001001c:	46ab      	mov	fp, r5
1001001e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010020:	42be      	cmp	r6, r7
10010022:	d1f6      	bne.n	10010012 <__eqdf2+0x3a>
10010024:	45c8      	cmp	r8, r9
10010026:	d1f4      	bne.n	10010012 <__eqdf2+0x3a>
10010028:	45d3      	cmp	fp, sl
1001002a:	d010      	beq.n	1001004e <__eqdf2+0x76>
1001002c:	2d00      	cmp	r5, #0
1001002e:	d1f0      	bne.n	10010012 <__eqdf2+0x3a>
10010030:	4330      	orrs	r0, r6
10010032:	0003      	movs	r3, r0
10010034:	1e5a      	subs	r2, r3, #1
10010036:	4193      	sbcs	r3, r2
10010038:	e7eb      	b.n	10010012 <__eqdf2+0x3a>
1001003a:	0031      	movs	r1, r6
1001003c:	2301      	movs	r3, #1
1001003e:	4301      	orrs	r1, r0
10010040:	d1e7      	bne.n	10010012 <__eqdf2+0x3a>
10010042:	e7e0      	b.n	10010006 <__eqdf2+0x2e>
10010044:	433a      	orrs	r2, r7
10010046:	2301      	movs	r3, #1
10010048:	2a00      	cmp	r2, #0
1001004a:	d1e2      	bne.n	10010012 <__eqdf2+0x3a>
1001004c:	e7de      	b.n	1001000c <__eqdf2+0x34>
1001004e:	2300      	movs	r3, #0
10010050:	e7df      	b.n	10010012 <__eqdf2+0x3a>
10010052:	46c0      	nop			; (mov r8, r8)
10010054:	000007ff 	.word	0x000007ff

10010058 <__gedf2>:
10010058:	b5f0      	push	{r4, r5, r6, r7, lr}
1001005a:	465f      	mov	r7, fp
1001005c:	4644      	mov	r4, r8
1001005e:	4656      	mov	r6, sl
10010060:	464d      	mov	r5, r9
10010062:	b4f0      	push	{r4, r5, r6, r7}
10010064:	031f      	lsls	r7, r3, #12
10010066:	0b3c      	lsrs	r4, r7, #12
10010068:	4f2c      	ldr	r7, [pc, #176]	; (1001011c <__gedf2+0xc4>)
1001006a:	030e      	lsls	r6, r1, #12
1001006c:	004d      	lsls	r5, r1, #1
1001006e:	46a3      	mov	fp, r4
10010070:	005c      	lsls	r4, r3, #1
10010072:	4684      	mov	ip, r0
10010074:	0b36      	lsrs	r6, r6, #12
10010076:	0d6d      	lsrs	r5, r5, #21
10010078:	0fc9      	lsrs	r1, r1, #31
1001007a:	4690      	mov	r8, r2
1001007c:	0d64      	lsrs	r4, r4, #21
1001007e:	0fdb      	lsrs	r3, r3, #31
10010080:	42bd      	cmp	r5, r7
10010082:	d02b      	beq.n	100100dc <__gedf2+0x84>
10010084:	4f25      	ldr	r7, [pc, #148]	; (1001011c <__gedf2+0xc4>)
10010086:	42bc      	cmp	r4, r7
10010088:	d02e      	beq.n	100100e8 <__gedf2+0x90>
1001008a:	2d00      	cmp	r5, #0
1001008c:	d10e      	bne.n	100100ac <__gedf2+0x54>
1001008e:	4330      	orrs	r0, r6
10010090:	0007      	movs	r7, r0
10010092:	4681      	mov	r9, r0
10010094:	4278      	negs	r0, r7
10010096:	4178      	adcs	r0, r7
10010098:	2c00      	cmp	r4, #0
1001009a:	d117      	bne.n	100100cc <__gedf2+0x74>
1001009c:	465f      	mov	r7, fp
1001009e:	433a      	orrs	r2, r7
100100a0:	d114      	bne.n	100100cc <__gedf2+0x74>
100100a2:	464b      	mov	r3, r9
100100a4:	2000      	movs	r0, #0
100100a6:	2b00      	cmp	r3, #0
100100a8:	d00a      	beq.n	100100c0 <__gedf2+0x68>
100100aa:	e006      	b.n	100100ba <__gedf2+0x62>
100100ac:	2c00      	cmp	r4, #0
100100ae:	d102      	bne.n	100100b6 <__gedf2+0x5e>
100100b0:	4658      	mov	r0, fp
100100b2:	4302      	orrs	r2, r0
100100b4:	d001      	beq.n	100100ba <__gedf2+0x62>
100100b6:	4299      	cmp	r1, r3
100100b8:	d01a      	beq.n	100100f0 <__gedf2+0x98>
100100ba:	2301      	movs	r3, #1
100100bc:	4248      	negs	r0, r1
100100be:	4318      	orrs	r0, r3
100100c0:	bc3c      	pop	{r2, r3, r4, r5}
100100c2:	4690      	mov	r8, r2
100100c4:	4699      	mov	r9, r3
100100c6:	46a2      	mov	sl, r4
100100c8:	46ab      	mov	fp, r5
100100ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100cc:	2800      	cmp	r0, #0
100100ce:	d0f2      	beq.n	100100b6 <__gedf2+0x5e>
100100d0:	4258      	negs	r0, r3
100100d2:	4158      	adcs	r0, r3
100100d4:	2201      	movs	r2, #1
100100d6:	4240      	negs	r0, r0
100100d8:	4310      	orrs	r0, r2
100100da:	e7f1      	b.n	100100c0 <__gedf2+0x68>
100100dc:	0037      	movs	r7, r6
100100de:	4307      	orrs	r7, r0
100100e0:	d0d0      	beq.n	10010084 <__gedf2+0x2c>
100100e2:	2002      	movs	r0, #2
100100e4:	4240      	negs	r0, r0
100100e6:	e7eb      	b.n	100100c0 <__gedf2+0x68>
100100e8:	465f      	mov	r7, fp
100100ea:	4317      	orrs	r7, r2
100100ec:	d0cd      	beq.n	1001008a <__gedf2+0x32>
100100ee:	e7f8      	b.n	100100e2 <__gedf2+0x8a>
100100f0:	42a5      	cmp	r5, r4
100100f2:	dce2      	bgt.n	100100ba <__gedf2+0x62>
100100f4:	db05      	blt.n	10010102 <__gedf2+0xaa>
100100f6:	455e      	cmp	r6, fp
100100f8:	d8df      	bhi.n	100100ba <__gedf2+0x62>
100100fa:	d008      	beq.n	1001010e <__gedf2+0xb6>
100100fc:	2000      	movs	r0, #0
100100fe:	455e      	cmp	r6, fp
10010100:	d2de      	bcs.n	100100c0 <__gedf2+0x68>
10010102:	4248      	negs	r0, r1
10010104:	4148      	adcs	r0, r1
10010106:	2301      	movs	r3, #1
10010108:	4240      	negs	r0, r0
1001010a:	4318      	orrs	r0, r3
1001010c:	e7d8      	b.n	100100c0 <__gedf2+0x68>
1001010e:	45c4      	cmp	ip, r8
10010110:	d8d3      	bhi.n	100100ba <__gedf2+0x62>
10010112:	2000      	movs	r0, #0
10010114:	45c4      	cmp	ip, r8
10010116:	d3f4      	bcc.n	10010102 <__gedf2+0xaa>
10010118:	e7d2      	b.n	100100c0 <__gedf2+0x68>
1001011a:	46c0      	nop			; (mov r8, r8)
1001011c:	000007ff 	.word	0x000007ff

10010120 <__ledf2>:
10010120:	b5f0      	push	{r4, r5, r6, r7, lr}
10010122:	465f      	mov	r7, fp
10010124:	464d      	mov	r5, r9
10010126:	4644      	mov	r4, r8
10010128:	4656      	mov	r6, sl
1001012a:	b4f0      	push	{r4, r5, r6, r7}
1001012c:	031c      	lsls	r4, r3, #12
1001012e:	0b24      	lsrs	r4, r4, #12
10010130:	46a4      	mov	ip, r4
10010132:	4c2f      	ldr	r4, [pc, #188]	; (100101f0 <__ledf2+0xd0>)
10010134:	030f      	lsls	r7, r1, #12
10010136:	004d      	lsls	r5, r1, #1
10010138:	005e      	lsls	r6, r3, #1
1001013a:	0fc9      	lsrs	r1, r1, #31
1001013c:	4680      	mov	r8, r0
1001013e:	0b3f      	lsrs	r7, r7, #12
10010140:	0d6d      	lsrs	r5, r5, #21
10010142:	468b      	mov	fp, r1
10010144:	4691      	mov	r9, r2
10010146:	0d76      	lsrs	r6, r6, #21
10010148:	0fdb      	lsrs	r3, r3, #31
1001014a:	42a5      	cmp	r5, r4
1001014c:	d020      	beq.n	10010190 <__ledf2+0x70>
1001014e:	4c28      	ldr	r4, [pc, #160]	; (100101f0 <__ledf2+0xd0>)
10010150:	42a6      	cmp	r6, r4
10010152:	d022      	beq.n	1001019a <__ledf2+0x7a>
10010154:	2d00      	cmp	r5, #0
10010156:	d112      	bne.n	1001017e <__ledf2+0x5e>
10010158:	4338      	orrs	r0, r7
1001015a:	4244      	negs	r4, r0
1001015c:	4144      	adcs	r4, r0
1001015e:	2e00      	cmp	r6, #0
10010160:	d020      	beq.n	100101a4 <__ledf2+0x84>
10010162:	2c00      	cmp	r4, #0
10010164:	d00d      	beq.n	10010182 <__ledf2+0x62>
10010166:	425c      	negs	r4, r3
10010168:	4163      	adcs	r3, r4
1001016a:	2401      	movs	r4, #1
1001016c:	425b      	negs	r3, r3
1001016e:	431c      	orrs	r4, r3
10010170:	0020      	movs	r0, r4
10010172:	bc3c      	pop	{r2, r3, r4, r5}
10010174:	4690      	mov	r8, r2
10010176:	4699      	mov	r9, r3
10010178:	46a2      	mov	sl, r4
1001017a:	46ab      	mov	fp, r5
1001017c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001017e:	2e00      	cmp	r6, #0
10010180:	d017      	beq.n	100101b2 <__ledf2+0x92>
10010182:	455b      	cmp	r3, fp
10010184:	d019      	beq.n	100101ba <__ledf2+0x9a>
10010186:	465b      	mov	r3, fp
10010188:	425c      	negs	r4, r3
1001018a:	2301      	movs	r3, #1
1001018c:	431c      	orrs	r4, r3
1001018e:	e7ef      	b.n	10010170 <__ledf2+0x50>
10010190:	0039      	movs	r1, r7
10010192:	2402      	movs	r4, #2
10010194:	4301      	orrs	r1, r0
10010196:	d1eb      	bne.n	10010170 <__ledf2+0x50>
10010198:	e7d9      	b.n	1001014e <__ledf2+0x2e>
1001019a:	4661      	mov	r1, ip
1001019c:	2402      	movs	r4, #2
1001019e:	4311      	orrs	r1, r2
100101a0:	d1e6      	bne.n	10010170 <__ledf2+0x50>
100101a2:	e7d7      	b.n	10010154 <__ledf2+0x34>
100101a4:	4661      	mov	r1, ip
100101a6:	430a      	orrs	r2, r1
100101a8:	d1db      	bne.n	10010162 <__ledf2+0x42>
100101aa:	2400      	movs	r4, #0
100101ac:	2800      	cmp	r0, #0
100101ae:	d0df      	beq.n	10010170 <__ledf2+0x50>
100101b0:	e7e9      	b.n	10010186 <__ledf2+0x66>
100101b2:	4661      	mov	r1, ip
100101b4:	430a      	orrs	r2, r1
100101b6:	d1e4      	bne.n	10010182 <__ledf2+0x62>
100101b8:	e7e5      	b.n	10010186 <__ledf2+0x66>
100101ba:	42b5      	cmp	r5, r6
100101bc:	dd03      	ble.n	100101c6 <__ledf2+0xa6>
100101be:	2201      	movs	r2, #1
100101c0:	425c      	negs	r4, r3
100101c2:	4314      	orrs	r4, r2
100101c4:	e7d4      	b.n	10010170 <__ledf2+0x50>
100101c6:	42b5      	cmp	r5, r6
100101c8:	dbcd      	blt.n	10010166 <__ledf2+0x46>
100101ca:	4567      	cmp	r7, ip
100101cc:	d8db      	bhi.n	10010186 <__ledf2+0x66>
100101ce:	d009      	beq.n	100101e4 <__ledf2+0xc4>
100101d0:	2400      	movs	r4, #0
100101d2:	4567      	cmp	r7, ip
100101d4:	d2cc      	bcs.n	10010170 <__ledf2+0x50>
100101d6:	4659      	mov	r1, fp
100101d8:	424c      	negs	r4, r1
100101da:	4161      	adcs	r1, r4
100101dc:	2401      	movs	r4, #1
100101de:	4249      	negs	r1, r1
100101e0:	430c      	orrs	r4, r1
100101e2:	e7c5      	b.n	10010170 <__ledf2+0x50>
100101e4:	45c8      	cmp	r8, r9
100101e6:	d8ce      	bhi.n	10010186 <__ledf2+0x66>
100101e8:	2400      	movs	r4, #0
100101ea:	45c8      	cmp	r8, r9
100101ec:	d3f3      	bcc.n	100101d6 <__ledf2+0xb6>
100101ee:	e7bf      	b.n	10010170 <__ledf2+0x50>
100101f0:	000007ff 	.word	0x000007ff

100101f4 <__libc_init_array>:
100101f4:	4b0e      	ldr	r3, [pc, #56]	; (10010230 <__libc_init_array+0x3c>)
100101f6:	b570      	push	{r4, r5, r6, lr}
100101f8:	2500      	movs	r5, #0
100101fa:	001e      	movs	r6, r3
100101fc:	4c0d      	ldr	r4, [pc, #52]	; (10010234 <__libc_init_array+0x40>)
100101fe:	1ae4      	subs	r4, r4, r3
10010200:	10a4      	asrs	r4, r4, #2
10010202:	42a5      	cmp	r5, r4
10010204:	d004      	beq.n	10010210 <__libc_init_array+0x1c>
10010206:	00ab      	lsls	r3, r5, #2
10010208:	58f3      	ldr	r3, [r6, r3]
1001020a:	4798      	blx	r3
1001020c:	3501      	adds	r5, #1
1001020e:	e7f8      	b.n	10010202 <__libc_init_array+0xe>
10010210:	f002 fe42 	bl	10012e98 <_init>
10010214:	4b08      	ldr	r3, [pc, #32]	; (10010238 <__libc_init_array+0x44>)
10010216:	2500      	movs	r5, #0
10010218:	001e      	movs	r6, r3
1001021a:	4c08      	ldr	r4, [pc, #32]	; (1001023c <__libc_init_array+0x48>)
1001021c:	1ae4      	subs	r4, r4, r3
1001021e:	10a4      	asrs	r4, r4, #2
10010220:	42a5      	cmp	r5, r4
10010222:	d004      	beq.n	1001022e <__libc_init_array+0x3a>
10010224:	00ab      	lsls	r3, r5, #2
10010226:	58f3      	ldr	r3, [r6, r3]
10010228:	4798      	blx	r3
1001022a:	3501      	adds	r5, #1
1001022c:	e7f8      	b.n	10010220 <__libc_init_array+0x2c>
1001022e:	bd70      	pop	{r4, r5, r6, pc}
10010230:	10012ea4 	.word	0x10012ea4
10010234:	10012ea4 	.word	0x10012ea4
10010238:	10012ea4 	.word	0x10012ea4
1001023c:	10012ea8 	.word	0x10012ea8

10010240 <memcmp>:
10010240:	b530      	push	{r4, r5, lr}
10010242:	2400      	movs	r4, #0
10010244:	42a2      	cmp	r2, r4
10010246:	d008      	beq.n	1001025a <memcmp+0x1a>
10010248:	5d03      	ldrb	r3, [r0, r4]
1001024a:	1c65      	adds	r5, r4, #1
1001024c:	5d0c      	ldrb	r4, [r1, r4]
1001024e:	42a3      	cmp	r3, r4
10010250:	d001      	beq.n	10010256 <memcmp+0x16>
10010252:	1b18      	subs	r0, r3, r4
10010254:	e002      	b.n	1001025c <memcmp+0x1c>
10010256:	002c      	movs	r4, r5
10010258:	e7f4      	b.n	10010244 <memcmp+0x4>
1001025a:	2000      	movs	r0, #0
1001025c:	bd30      	pop	{r4, r5, pc}

1001025e <memcpy>:
1001025e:	2300      	movs	r3, #0
10010260:	b510      	push	{r4, lr}
10010262:	429a      	cmp	r2, r3
10010264:	d003      	beq.n	1001026e <memcpy+0x10>
10010266:	5ccc      	ldrb	r4, [r1, r3]
10010268:	54c4      	strb	r4, [r0, r3]
1001026a:	3301      	adds	r3, #1
1001026c:	e7f9      	b.n	10010262 <memcpy+0x4>
1001026e:	bd10      	pop	{r4, pc}

10010270 <memset>:
10010270:	0003      	movs	r3, r0
10010272:	1882      	adds	r2, r0, r2
10010274:	4293      	cmp	r3, r2
10010276:	d002      	beq.n	1001027e <memset+0xe>
10010278:	7019      	strb	r1, [r3, #0]
1001027a:	3301      	adds	r3, #1
1001027c:	e7fa      	b.n	10010274 <memset+0x4>
1001027e:	4770      	bx	lr

10010280 <iprintf>:
10010280:	b40f      	push	{r0, r1, r2, r3}
10010282:	4b0b      	ldr	r3, [pc, #44]	; (100102b0 <iprintf+0x30>)
10010284:	b513      	push	{r0, r1, r4, lr}
10010286:	681c      	ldr	r4, [r3, #0]
10010288:	2c00      	cmp	r4, #0
1001028a:	d005      	beq.n	10010298 <iprintf+0x18>
1001028c:	69a3      	ldr	r3, [r4, #24]
1001028e:	2b00      	cmp	r3, #0
10010290:	d102      	bne.n	10010298 <iprintf+0x18>
10010292:	0020      	movs	r0, r4
10010294:	f000 fb46 	bl	10010924 <__sinit>
10010298:	ab05      	add	r3, sp, #20
1001029a:	9a04      	ldr	r2, [sp, #16]
1001029c:	68a1      	ldr	r1, [r4, #8]
1001029e:	0020      	movs	r0, r4
100102a0:	9301      	str	r3, [sp, #4]
100102a2:	f000 fd05 	bl	10010cb0 <_vfiprintf_r>
100102a6:	bc16      	pop	{r1, r2, r4}
100102a8:	bc08      	pop	{r3}
100102aa:	b004      	add	sp, #16
100102ac:	4718      	bx	r3
100102ae:	46c0      	nop			; (mov r8, r8)
100102b0:	10012f20 	.word	0x10012f20

100102b4 <putchar>:
100102b4:	4b08      	ldr	r3, [pc, #32]	; (100102d8 <putchar+0x24>)
100102b6:	b570      	push	{r4, r5, r6, lr}
100102b8:	681c      	ldr	r4, [r3, #0]
100102ba:	0005      	movs	r5, r0
100102bc:	2c00      	cmp	r4, #0
100102be:	d005      	beq.n	100102cc <putchar+0x18>
100102c0:	69a3      	ldr	r3, [r4, #24]
100102c2:	2b00      	cmp	r3, #0
100102c4:	d102      	bne.n	100102cc <putchar+0x18>
100102c6:	0020      	movs	r0, r4
100102c8:	f000 fb2c 	bl	10010924 <__sinit>
100102cc:	0029      	movs	r1, r5
100102ce:	68a2      	ldr	r2, [r4, #8]
100102d0:	0020      	movs	r0, r4
100102d2:	f000 ff99 	bl	10011208 <_putc_r>
100102d6:	bd70      	pop	{r4, r5, r6, pc}
100102d8:	10012f20 	.word	0x10012f20

100102dc <_puts_r>:
100102dc:	b570      	push	{r4, r5, r6, lr}
100102de:	0005      	movs	r5, r0
100102e0:	000e      	movs	r6, r1
100102e2:	2800      	cmp	r0, #0
100102e4:	d004      	beq.n	100102f0 <_puts_r+0x14>
100102e6:	6983      	ldr	r3, [r0, #24]
100102e8:	2b00      	cmp	r3, #0
100102ea:	d101      	bne.n	100102f0 <_puts_r+0x14>
100102ec:	f000 fb1a 	bl	10010924 <__sinit>
100102f0:	69ab      	ldr	r3, [r5, #24]
100102f2:	68ac      	ldr	r4, [r5, #8]
100102f4:	2b00      	cmp	r3, #0
100102f6:	d102      	bne.n	100102fe <_puts_r+0x22>
100102f8:	0028      	movs	r0, r5
100102fa:	f000 fb13 	bl	10010924 <__sinit>
100102fe:	4b25      	ldr	r3, [pc, #148]	; (10010394 <_puts_r+0xb8>)
10010300:	429c      	cmp	r4, r3
10010302:	d101      	bne.n	10010308 <_puts_r+0x2c>
10010304:	686c      	ldr	r4, [r5, #4]
10010306:	e008      	b.n	1001031a <_puts_r+0x3e>
10010308:	4b23      	ldr	r3, [pc, #140]	; (10010398 <_puts_r+0xbc>)
1001030a:	429c      	cmp	r4, r3
1001030c:	d101      	bne.n	10010312 <_puts_r+0x36>
1001030e:	68ac      	ldr	r4, [r5, #8]
10010310:	e003      	b.n	1001031a <_puts_r+0x3e>
10010312:	4b22      	ldr	r3, [pc, #136]	; (1001039c <_puts_r+0xc0>)
10010314:	429c      	cmp	r4, r3
10010316:	d100      	bne.n	1001031a <_puts_r+0x3e>
10010318:	68ec      	ldr	r4, [r5, #12]
1001031a:	89a3      	ldrh	r3, [r4, #12]
1001031c:	071b      	lsls	r3, r3, #28
1001031e:	d502      	bpl.n	10010326 <_puts_r+0x4a>
10010320:	6923      	ldr	r3, [r4, #16]
10010322:	2b00      	cmp	r3, #0
10010324:	d111      	bne.n	1001034a <_puts_r+0x6e>
10010326:	0021      	movs	r1, r4
10010328:	0028      	movs	r0, r5
1001032a:	f000 f991 	bl	10010650 <__swsetup_r>
1001032e:	2800      	cmp	r0, #0
10010330:	d00b      	beq.n	1001034a <_puts_r+0x6e>
10010332:	2001      	movs	r0, #1
10010334:	4240      	negs	r0, r0
10010336:	e02b      	b.n	10010390 <_puts_r+0xb4>
10010338:	3b01      	subs	r3, #1
1001033a:	3601      	adds	r6, #1
1001033c:	60a3      	str	r3, [r4, #8]
1001033e:	2b00      	cmp	r3, #0
10010340:	db08      	blt.n	10010354 <_puts_r+0x78>
10010342:	6823      	ldr	r3, [r4, #0]
10010344:	1c5a      	adds	r2, r3, #1
10010346:	6022      	str	r2, [r4, #0]
10010348:	7019      	strb	r1, [r3, #0]
1001034a:	7831      	ldrb	r1, [r6, #0]
1001034c:	68a3      	ldr	r3, [r4, #8]
1001034e:	2900      	cmp	r1, #0
10010350:	d1f2      	bne.n	10010338 <_puts_r+0x5c>
10010352:	e00b      	b.n	1001036c <_puts_r+0x90>
10010354:	69a2      	ldr	r2, [r4, #24]
10010356:	4293      	cmp	r3, r2
10010358:	db01      	blt.n	1001035e <_puts_r+0x82>
1001035a:	290a      	cmp	r1, #10
1001035c:	d1f1      	bne.n	10010342 <_puts_r+0x66>
1001035e:	0022      	movs	r2, r4
10010360:	0028      	movs	r0, r5
10010362:	f000 f91d 	bl	100105a0 <__swbuf_r>
10010366:	1c43      	adds	r3, r0, #1
10010368:	d1ef      	bne.n	1001034a <_puts_r+0x6e>
1001036a:	e7e2      	b.n	10010332 <_puts_r+0x56>
1001036c:	3b01      	subs	r3, #1
1001036e:	60a3      	str	r3, [r4, #8]
10010370:	2b00      	cmp	r3, #0
10010372:	da08      	bge.n	10010386 <_puts_r+0xaa>
10010374:	0022      	movs	r2, r4
10010376:	310a      	adds	r1, #10
10010378:	0028      	movs	r0, r5
1001037a:	f000 f911 	bl	100105a0 <__swbuf_r>
1001037e:	1c43      	adds	r3, r0, #1
10010380:	d0d7      	beq.n	10010332 <_puts_r+0x56>
10010382:	200a      	movs	r0, #10
10010384:	e004      	b.n	10010390 <_puts_r+0xb4>
10010386:	200a      	movs	r0, #10
10010388:	6823      	ldr	r3, [r4, #0]
1001038a:	1c5a      	adds	r2, r3, #1
1001038c:	6022      	str	r2, [r4, #0]
1001038e:	7018      	strb	r0, [r3, #0]
10010390:	bd70      	pop	{r4, r5, r6, pc}
10010392:	46c0      	nop			; (mov r8, r8)
10010394:	10012e04 	.word	0x10012e04
10010398:	10012e24 	.word	0x10012e24
1001039c:	10012e44 	.word	0x10012e44

100103a0 <puts>:
100103a0:	b510      	push	{r4, lr}
100103a2:	4b03      	ldr	r3, [pc, #12]	; (100103b0 <puts+0x10>)
100103a4:	0001      	movs	r1, r0
100103a6:	6818      	ldr	r0, [r3, #0]
100103a8:	f7ff ff98 	bl	100102dc <_puts_r>
100103ac:	bd10      	pop	{r4, pc}
100103ae:	46c0      	nop			; (mov r8, r8)
100103b0:	10012f20 	.word	0x10012f20

100103b4 <rand>:
100103b4:	4b15      	ldr	r3, [pc, #84]	; (1001040c <rand+0x58>)
100103b6:	b510      	push	{r4, lr}
100103b8:	681c      	ldr	r4, [r3, #0]
100103ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100103bc:	2b00      	cmp	r3, #0
100103be:	d115      	bne.n	100103ec <rand+0x38>
100103c0:	2018      	movs	r0, #24
100103c2:	f000 fba7 	bl	10010b14 <malloc>
100103c6:	4b12      	ldr	r3, [pc, #72]	; (10010410 <rand+0x5c>)
100103c8:	63a0      	str	r0, [r4, #56]	; 0x38
100103ca:	8003      	strh	r3, [r0, #0]
100103cc:	4b11      	ldr	r3, [pc, #68]	; (10010414 <rand+0x60>)
100103ce:	2201      	movs	r2, #1
100103d0:	8043      	strh	r3, [r0, #2]
100103d2:	4b11      	ldr	r3, [pc, #68]	; (10010418 <rand+0x64>)
100103d4:	8083      	strh	r3, [r0, #4]
100103d6:	4b11      	ldr	r3, [pc, #68]	; (1001041c <rand+0x68>)
100103d8:	80c3      	strh	r3, [r0, #6]
100103da:	4b11      	ldr	r3, [pc, #68]	; (10010420 <rand+0x6c>)
100103dc:	8103      	strh	r3, [r0, #8]
100103de:	2305      	movs	r3, #5
100103e0:	8143      	strh	r3, [r0, #10]
100103e2:	3306      	adds	r3, #6
100103e4:	8183      	strh	r3, [r0, #12]
100103e6:	2300      	movs	r3, #0
100103e8:	6102      	str	r2, [r0, #16]
100103ea:	6143      	str	r3, [r0, #20]
100103ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100103ee:	4a0d      	ldr	r2, [pc, #52]	; (10010424 <rand+0x70>)
100103f0:	6920      	ldr	r0, [r4, #16]
100103f2:	6961      	ldr	r1, [r4, #20]
100103f4:	4b0c      	ldr	r3, [pc, #48]	; (10010428 <rand+0x74>)
100103f6:	f001 f819 	bl	1001142c <__aeabi_lmul>
100103fa:	2201      	movs	r2, #1
100103fc:	2300      	movs	r3, #0
100103fe:	1880      	adds	r0, r0, r2
10010400:	4159      	adcs	r1, r3
10010402:	6120      	str	r0, [r4, #16]
10010404:	6161      	str	r1, [r4, #20]
10010406:	0048      	lsls	r0, r1, #1
10010408:	0840      	lsrs	r0, r0, #1
1001040a:	bd10      	pop	{r4, pc}
1001040c:	10012f20 	.word	0x10012f20
10010410:	0000330e 	.word	0x0000330e
10010414:	ffffabcd 	.word	0xffffabcd
10010418:	00001234 	.word	0x00001234
1001041c:	ffffe66d 	.word	0xffffe66d
10010420:	ffffdeec 	.word	0xffffdeec
10010424:	4c957f2d 	.word	0x4c957f2d
10010428:	5851f42d 	.word	0x5851f42d

1001042c <setbuf>:
1001042c:	424a      	negs	r2, r1
1001042e:	414a      	adcs	r2, r1
10010430:	2380      	movs	r3, #128	; 0x80
10010432:	b510      	push	{r4, lr}
10010434:	0052      	lsls	r2, r2, #1
10010436:	00db      	lsls	r3, r3, #3
10010438:	f000 f802 	bl	10010440 <setvbuf>
1001043c:	bd10      	pop	{r4, pc}
	...

10010440 <setvbuf>:
10010440:	b5f0      	push	{r4, r5, r6, r7, lr}
10010442:	001d      	movs	r5, r3
10010444:	4b51      	ldr	r3, [pc, #324]	; (1001058c <setvbuf+0x14c>)
10010446:	b085      	sub	sp, #20
10010448:	681e      	ldr	r6, [r3, #0]
1001044a:	0004      	movs	r4, r0
1001044c:	000f      	movs	r7, r1
1001044e:	9200      	str	r2, [sp, #0]
10010450:	2e00      	cmp	r6, #0
10010452:	d005      	beq.n	10010460 <setvbuf+0x20>
10010454:	69b3      	ldr	r3, [r6, #24]
10010456:	2b00      	cmp	r3, #0
10010458:	d102      	bne.n	10010460 <setvbuf+0x20>
1001045a:	0030      	movs	r0, r6
1001045c:	f000 fa62 	bl	10010924 <__sinit>
10010460:	4b4b      	ldr	r3, [pc, #300]	; (10010590 <setvbuf+0x150>)
10010462:	429c      	cmp	r4, r3
10010464:	d101      	bne.n	1001046a <setvbuf+0x2a>
10010466:	6874      	ldr	r4, [r6, #4]
10010468:	e008      	b.n	1001047c <setvbuf+0x3c>
1001046a:	4b4a      	ldr	r3, [pc, #296]	; (10010594 <setvbuf+0x154>)
1001046c:	429c      	cmp	r4, r3
1001046e:	d101      	bne.n	10010474 <setvbuf+0x34>
10010470:	68b4      	ldr	r4, [r6, #8]
10010472:	e003      	b.n	1001047c <setvbuf+0x3c>
10010474:	4b48      	ldr	r3, [pc, #288]	; (10010598 <setvbuf+0x158>)
10010476:	429c      	cmp	r4, r3
10010478:	d100      	bne.n	1001047c <setvbuf+0x3c>
1001047a:	68f4      	ldr	r4, [r6, #12]
1001047c:	9b00      	ldr	r3, [sp, #0]
1001047e:	2b02      	cmp	r3, #2
10010480:	d005      	beq.n	1001048e <setvbuf+0x4e>
10010482:	2b01      	cmp	r3, #1
10010484:	d900      	bls.n	10010488 <setvbuf+0x48>
10010486:	e07c      	b.n	10010582 <setvbuf+0x142>
10010488:	2d00      	cmp	r5, #0
1001048a:	da00      	bge.n	1001048e <setvbuf+0x4e>
1001048c:	e079      	b.n	10010582 <setvbuf+0x142>
1001048e:	0021      	movs	r1, r4
10010490:	0030      	movs	r0, r6
10010492:	f000 f9d9 	bl	10010848 <_fflush_r>
10010496:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010498:	2900      	cmp	r1, #0
1001049a:	d008      	beq.n	100104ae <setvbuf+0x6e>
1001049c:	0023      	movs	r3, r4
1001049e:	3344      	adds	r3, #68	; 0x44
100104a0:	4299      	cmp	r1, r3
100104a2:	d002      	beq.n	100104aa <setvbuf+0x6a>
100104a4:	0030      	movs	r0, r6
100104a6:	f000 fb3f 	bl	10010b28 <_free_r>
100104aa:	2300      	movs	r3, #0
100104ac:	6363      	str	r3, [r4, #52]	; 0x34
100104ae:	2300      	movs	r3, #0
100104b0:	61a3      	str	r3, [r4, #24]
100104b2:	6063      	str	r3, [r4, #4]
100104b4:	89a3      	ldrh	r3, [r4, #12]
100104b6:	061b      	lsls	r3, r3, #24
100104b8:	d503      	bpl.n	100104c2 <setvbuf+0x82>
100104ba:	6921      	ldr	r1, [r4, #16]
100104bc:	0030      	movs	r0, r6
100104be:	f000 fb33 	bl	10010b28 <_free_r>
100104c2:	89a2      	ldrh	r2, [r4, #12]
100104c4:	4b35      	ldr	r3, [pc, #212]	; (1001059c <setvbuf+0x15c>)
100104c6:	4013      	ands	r3, r2
100104c8:	81a3      	strh	r3, [r4, #12]
100104ca:	9b00      	ldr	r3, [sp, #0]
100104cc:	2b02      	cmp	r3, #2
100104ce:	d021      	beq.n	10010514 <setvbuf+0xd4>
100104d0:	ab03      	add	r3, sp, #12
100104d2:	aa02      	add	r2, sp, #8
100104d4:	0021      	movs	r1, r4
100104d6:	0030      	movs	r0, r6
100104d8:	f000 fab8 	bl	10010a4c <__swhatbuf_r>
100104dc:	89a3      	ldrh	r3, [r4, #12]
100104de:	4318      	orrs	r0, r3
100104e0:	81a0      	strh	r0, [r4, #12]
100104e2:	2d00      	cmp	r5, #0
100104e4:	d101      	bne.n	100104ea <setvbuf+0xaa>
100104e6:	9d02      	ldr	r5, [sp, #8]
100104e8:	e001      	b.n	100104ee <setvbuf+0xae>
100104ea:	2f00      	cmp	r7, #0
100104ec:	d125      	bne.n	1001053a <setvbuf+0xfa>
100104ee:	0028      	movs	r0, r5
100104f0:	f000 fb10 	bl	10010b14 <malloc>
100104f4:	9501      	str	r5, [sp, #4]
100104f6:	1e07      	subs	r7, r0, #0
100104f8:	d11a      	bne.n	10010530 <setvbuf+0xf0>
100104fa:	9b02      	ldr	r3, [sp, #8]
100104fc:	9301      	str	r3, [sp, #4]
100104fe:	42ab      	cmp	r3, r5
10010500:	d102      	bne.n	10010508 <setvbuf+0xc8>
10010502:	2001      	movs	r0, #1
10010504:	4240      	negs	r0, r0
10010506:	e006      	b.n	10010516 <setvbuf+0xd6>
10010508:	9801      	ldr	r0, [sp, #4]
1001050a:	f000 fb03 	bl	10010b14 <malloc>
1001050e:	1e07      	subs	r7, r0, #0
10010510:	d10e      	bne.n	10010530 <setvbuf+0xf0>
10010512:	e7f6      	b.n	10010502 <setvbuf+0xc2>
10010514:	2000      	movs	r0, #0
10010516:	2202      	movs	r2, #2
10010518:	89a3      	ldrh	r3, [r4, #12]
1001051a:	4313      	orrs	r3, r2
1001051c:	81a3      	strh	r3, [r4, #12]
1001051e:	2300      	movs	r3, #0
10010520:	60a3      	str	r3, [r4, #8]
10010522:	0023      	movs	r3, r4
10010524:	3347      	adds	r3, #71	; 0x47
10010526:	6023      	str	r3, [r4, #0]
10010528:	6123      	str	r3, [r4, #16]
1001052a:	2301      	movs	r3, #1
1001052c:	6163      	str	r3, [r4, #20]
1001052e:	e02a      	b.n	10010586 <setvbuf+0x146>
10010530:	2280      	movs	r2, #128	; 0x80
10010532:	89a3      	ldrh	r3, [r4, #12]
10010534:	9d01      	ldr	r5, [sp, #4]
10010536:	4313      	orrs	r3, r2
10010538:	81a3      	strh	r3, [r4, #12]
1001053a:	69b3      	ldr	r3, [r6, #24]
1001053c:	2b00      	cmp	r3, #0
1001053e:	d102      	bne.n	10010546 <setvbuf+0x106>
10010540:	0030      	movs	r0, r6
10010542:	f000 f9ef 	bl	10010924 <__sinit>
10010546:	9b00      	ldr	r3, [sp, #0]
10010548:	2b01      	cmp	r3, #1
1001054a:	d103      	bne.n	10010554 <setvbuf+0x114>
1001054c:	89a3      	ldrh	r3, [r4, #12]
1001054e:	9a00      	ldr	r2, [sp, #0]
10010550:	431a      	orrs	r2, r3
10010552:	81a2      	strh	r2, [r4, #12]
10010554:	2308      	movs	r3, #8
10010556:	89a2      	ldrh	r2, [r4, #12]
10010558:	6027      	str	r7, [r4, #0]
1001055a:	4013      	ands	r3, r2
1001055c:	6127      	str	r7, [r4, #16]
1001055e:	6165      	str	r5, [r4, #20]
10010560:	1e18      	subs	r0, r3, #0
10010562:	d00c      	beq.n	1001057e <setvbuf+0x13e>
10010564:	2301      	movs	r3, #1
10010566:	401a      	ands	r2, r3
10010568:	2300      	movs	r3, #0
1001056a:	1e10      	subs	r0, r2, #0
1001056c:	4298      	cmp	r0, r3
1001056e:	d004      	beq.n	1001057a <setvbuf+0x13a>
10010570:	426d      	negs	r5, r5
10010572:	60a3      	str	r3, [r4, #8]
10010574:	61a5      	str	r5, [r4, #24]
10010576:	0018      	movs	r0, r3
10010578:	e005      	b.n	10010586 <setvbuf+0x146>
1001057a:	60a5      	str	r5, [r4, #8]
1001057c:	e003      	b.n	10010586 <setvbuf+0x146>
1001057e:	60a3      	str	r3, [r4, #8]
10010580:	e001      	b.n	10010586 <setvbuf+0x146>
10010582:	2001      	movs	r0, #1
10010584:	4240      	negs	r0, r0
10010586:	b005      	add	sp, #20
10010588:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001058a:	46c0      	nop			; (mov r8, r8)
1001058c:	10012f20 	.word	0x10012f20
10010590:	10012e04 	.word	0x10012e04
10010594:	10012e24 	.word	0x10012e24
10010598:	10012e44 	.word	0x10012e44
1001059c:	fffff35c 	.word	0xfffff35c

100105a0 <__swbuf_r>:
100105a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100105a2:	0005      	movs	r5, r0
100105a4:	000f      	movs	r7, r1
100105a6:	0014      	movs	r4, r2
100105a8:	2800      	cmp	r0, #0
100105aa:	d004      	beq.n	100105b6 <__swbuf_r+0x16>
100105ac:	6983      	ldr	r3, [r0, #24]
100105ae:	2b00      	cmp	r3, #0
100105b0:	d101      	bne.n	100105b6 <__swbuf_r+0x16>
100105b2:	f000 f9b7 	bl	10010924 <__sinit>
100105b6:	4b23      	ldr	r3, [pc, #140]	; (10010644 <__swbuf_r+0xa4>)
100105b8:	429c      	cmp	r4, r3
100105ba:	d101      	bne.n	100105c0 <__swbuf_r+0x20>
100105bc:	686c      	ldr	r4, [r5, #4]
100105be:	e008      	b.n	100105d2 <__swbuf_r+0x32>
100105c0:	4b21      	ldr	r3, [pc, #132]	; (10010648 <__swbuf_r+0xa8>)
100105c2:	429c      	cmp	r4, r3
100105c4:	d101      	bne.n	100105ca <__swbuf_r+0x2a>
100105c6:	68ac      	ldr	r4, [r5, #8]
100105c8:	e003      	b.n	100105d2 <__swbuf_r+0x32>
100105ca:	4b20      	ldr	r3, [pc, #128]	; (1001064c <__swbuf_r+0xac>)
100105cc:	429c      	cmp	r4, r3
100105ce:	d100      	bne.n	100105d2 <__swbuf_r+0x32>
100105d0:	68ec      	ldr	r4, [r5, #12]
100105d2:	69a3      	ldr	r3, [r4, #24]
100105d4:	60a3      	str	r3, [r4, #8]
100105d6:	89a3      	ldrh	r3, [r4, #12]
100105d8:	071b      	lsls	r3, r3, #28
100105da:	d50a      	bpl.n	100105f2 <__swbuf_r+0x52>
100105dc:	6923      	ldr	r3, [r4, #16]
100105de:	2b00      	cmp	r3, #0
100105e0:	d007      	beq.n	100105f2 <__swbuf_r+0x52>
100105e2:	6823      	ldr	r3, [r4, #0]
100105e4:	6922      	ldr	r2, [r4, #16]
100105e6:	b2fe      	uxtb	r6, r7
100105e8:	1a98      	subs	r0, r3, r2
100105ea:	6963      	ldr	r3, [r4, #20]
100105ec:	4298      	cmp	r0, r3
100105ee:	db0f      	blt.n	10010610 <__swbuf_r+0x70>
100105f0:	e008      	b.n	10010604 <__swbuf_r+0x64>
100105f2:	0021      	movs	r1, r4
100105f4:	0028      	movs	r0, r5
100105f6:	f000 f82b 	bl	10010650 <__swsetup_r>
100105fa:	2800      	cmp	r0, #0
100105fc:	d0f1      	beq.n	100105e2 <__swbuf_r+0x42>
100105fe:	2001      	movs	r0, #1
10010600:	4240      	negs	r0, r0
10010602:	e01d      	b.n	10010640 <__swbuf_r+0xa0>
10010604:	0021      	movs	r1, r4
10010606:	0028      	movs	r0, r5
10010608:	f000 f91e 	bl	10010848 <_fflush_r>
1001060c:	2800      	cmp	r0, #0
1001060e:	d1f6      	bne.n	100105fe <__swbuf_r+0x5e>
10010610:	68a3      	ldr	r3, [r4, #8]
10010612:	3001      	adds	r0, #1
10010614:	3b01      	subs	r3, #1
10010616:	60a3      	str	r3, [r4, #8]
10010618:	6823      	ldr	r3, [r4, #0]
1001061a:	1c5a      	adds	r2, r3, #1
1001061c:	6022      	str	r2, [r4, #0]
1001061e:	701f      	strb	r7, [r3, #0]
10010620:	6963      	ldr	r3, [r4, #20]
10010622:	4298      	cmp	r0, r3
10010624:	d005      	beq.n	10010632 <__swbuf_r+0x92>
10010626:	89a3      	ldrh	r3, [r4, #12]
10010628:	0030      	movs	r0, r6
1001062a:	07db      	lsls	r3, r3, #31
1001062c:	d508      	bpl.n	10010640 <__swbuf_r+0xa0>
1001062e:	2e0a      	cmp	r6, #10
10010630:	d106      	bne.n	10010640 <__swbuf_r+0xa0>
10010632:	0021      	movs	r1, r4
10010634:	0028      	movs	r0, r5
10010636:	f000 f907 	bl	10010848 <_fflush_r>
1001063a:	2800      	cmp	r0, #0
1001063c:	d1df      	bne.n	100105fe <__swbuf_r+0x5e>
1001063e:	0030      	movs	r0, r6
10010640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010642:	46c0      	nop			; (mov r8, r8)
10010644:	10012e04 	.word	0x10012e04
10010648:	10012e24 	.word	0x10012e24
1001064c:	10012e44 	.word	0x10012e44

10010650 <__swsetup_r>:
10010650:	4b36      	ldr	r3, [pc, #216]	; (1001072c <__swsetup_r+0xdc>)
10010652:	b570      	push	{r4, r5, r6, lr}
10010654:	681d      	ldr	r5, [r3, #0]
10010656:	0006      	movs	r6, r0
10010658:	000c      	movs	r4, r1
1001065a:	2d00      	cmp	r5, #0
1001065c:	d005      	beq.n	1001066a <__swsetup_r+0x1a>
1001065e:	69ab      	ldr	r3, [r5, #24]
10010660:	2b00      	cmp	r3, #0
10010662:	d102      	bne.n	1001066a <__swsetup_r+0x1a>
10010664:	0028      	movs	r0, r5
10010666:	f000 f95d 	bl	10010924 <__sinit>
1001066a:	4b31      	ldr	r3, [pc, #196]	; (10010730 <__swsetup_r+0xe0>)
1001066c:	429c      	cmp	r4, r3
1001066e:	d101      	bne.n	10010674 <__swsetup_r+0x24>
10010670:	686c      	ldr	r4, [r5, #4]
10010672:	e008      	b.n	10010686 <__swsetup_r+0x36>
10010674:	4b2f      	ldr	r3, [pc, #188]	; (10010734 <__swsetup_r+0xe4>)
10010676:	429c      	cmp	r4, r3
10010678:	d101      	bne.n	1001067e <__swsetup_r+0x2e>
1001067a:	68ac      	ldr	r4, [r5, #8]
1001067c:	e003      	b.n	10010686 <__swsetup_r+0x36>
1001067e:	4b2e      	ldr	r3, [pc, #184]	; (10010738 <__swsetup_r+0xe8>)
10010680:	429c      	cmp	r4, r3
10010682:	d100      	bne.n	10010686 <__swsetup_r+0x36>
10010684:	68ec      	ldr	r4, [r5, #12]
10010686:	220c      	movs	r2, #12
10010688:	5ea3      	ldrsh	r3, [r4, r2]
1001068a:	b29a      	uxth	r2, r3
1001068c:	0711      	lsls	r1, r2, #28
1001068e:	d423      	bmi.n	100106d8 <__swsetup_r+0x88>
10010690:	06d1      	lsls	r1, r2, #27
10010692:	d407      	bmi.n	100106a4 <__swsetup_r+0x54>
10010694:	2209      	movs	r2, #9
10010696:	2001      	movs	r0, #1
10010698:	6032      	str	r2, [r6, #0]
1001069a:	3237      	adds	r2, #55	; 0x37
1001069c:	4313      	orrs	r3, r2
1001069e:	81a3      	strh	r3, [r4, #12]
100106a0:	4240      	negs	r0, r0
100106a2:	e042      	b.n	1001072a <__swsetup_r+0xda>
100106a4:	0753      	lsls	r3, r2, #29
100106a6:	d513      	bpl.n	100106d0 <__swsetup_r+0x80>
100106a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
100106aa:	2900      	cmp	r1, #0
100106ac:	d008      	beq.n	100106c0 <__swsetup_r+0x70>
100106ae:	0023      	movs	r3, r4
100106b0:	3344      	adds	r3, #68	; 0x44
100106b2:	4299      	cmp	r1, r3
100106b4:	d002      	beq.n	100106bc <__swsetup_r+0x6c>
100106b6:	0030      	movs	r0, r6
100106b8:	f000 fa36 	bl	10010b28 <_free_r>
100106bc:	2300      	movs	r3, #0
100106be:	6363      	str	r3, [r4, #52]	; 0x34
100106c0:	2224      	movs	r2, #36	; 0x24
100106c2:	89a3      	ldrh	r3, [r4, #12]
100106c4:	4393      	bics	r3, r2
100106c6:	81a3      	strh	r3, [r4, #12]
100106c8:	2300      	movs	r3, #0
100106ca:	6063      	str	r3, [r4, #4]
100106cc:	6923      	ldr	r3, [r4, #16]
100106ce:	6023      	str	r3, [r4, #0]
100106d0:	2208      	movs	r2, #8
100106d2:	89a3      	ldrh	r3, [r4, #12]
100106d4:	4313      	orrs	r3, r2
100106d6:	81a3      	strh	r3, [r4, #12]
100106d8:	6923      	ldr	r3, [r4, #16]
100106da:	2b00      	cmp	r3, #0
100106dc:	d10b      	bne.n	100106f6 <__swsetup_r+0xa6>
100106de:	23a0      	movs	r3, #160	; 0xa0
100106e0:	89a2      	ldrh	r2, [r4, #12]
100106e2:	009b      	lsls	r3, r3, #2
100106e4:	4013      	ands	r3, r2
100106e6:	2280      	movs	r2, #128	; 0x80
100106e8:	0092      	lsls	r2, r2, #2
100106ea:	4293      	cmp	r3, r2
100106ec:	d003      	beq.n	100106f6 <__swsetup_r+0xa6>
100106ee:	0021      	movs	r1, r4
100106f0:	0030      	movs	r0, r6
100106f2:	f000 f9d1 	bl	10010a98 <__smakebuf_r>
100106f6:	2301      	movs	r3, #1
100106f8:	89a2      	ldrh	r2, [r4, #12]
100106fa:	4013      	ands	r3, r2
100106fc:	d005      	beq.n	1001070a <__swsetup_r+0xba>
100106fe:	2300      	movs	r3, #0
10010700:	60a3      	str	r3, [r4, #8]
10010702:	6963      	ldr	r3, [r4, #20]
10010704:	425b      	negs	r3, r3
10010706:	61a3      	str	r3, [r4, #24]
10010708:	e003      	b.n	10010712 <__swsetup_r+0xc2>
1001070a:	0792      	lsls	r2, r2, #30
1001070c:	d400      	bmi.n	10010710 <__swsetup_r+0xc0>
1001070e:	6963      	ldr	r3, [r4, #20]
10010710:	60a3      	str	r3, [r4, #8]
10010712:	2000      	movs	r0, #0
10010714:	6923      	ldr	r3, [r4, #16]
10010716:	4283      	cmp	r3, r0
10010718:	d107      	bne.n	1001072a <__swsetup_r+0xda>
1001071a:	220c      	movs	r2, #12
1001071c:	5ea3      	ldrsh	r3, [r4, r2]
1001071e:	061a      	lsls	r2, r3, #24
10010720:	d503      	bpl.n	1001072a <__swsetup_r+0xda>
10010722:	2240      	movs	r2, #64	; 0x40
10010724:	4313      	orrs	r3, r2
10010726:	81a3      	strh	r3, [r4, #12]
10010728:	3801      	subs	r0, #1
1001072a:	bd70      	pop	{r4, r5, r6, pc}
1001072c:	10012f20 	.word	0x10012f20
10010730:	10012e04 	.word	0x10012e04
10010734:	10012e24 	.word	0x10012e24
10010738:	10012e44 	.word	0x10012e44

1001073c <__sflush_r>:
1001073c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001073e:	898a      	ldrh	r2, [r1, #12]
10010740:	0005      	movs	r5, r0
10010742:	000c      	movs	r4, r1
10010744:	0713      	lsls	r3, r2, #28
10010746:	d45a      	bmi.n	100107fe <__sflush_r+0xc2>
10010748:	684b      	ldr	r3, [r1, #4]
1001074a:	2b00      	cmp	r3, #0
1001074c:	dc02      	bgt.n	10010754 <__sflush_r+0x18>
1001074e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10010750:	2b00      	cmp	r3, #0
10010752:	dd19      	ble.n	10010788 <__sflush_r+0x4c>
10010754:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10010756:	2f00      	cmp	r7, #0
10010758:	d016      	beq.n	10010788 <__sflush_r+0x4c>
1001075a:	2300      	movs	r3, #0
1001075c:	682e      	ldr	r6, [r5, #0]
1001075e:	602b      	str	r3, [r5, #0]
10010760:	2380      	movs	r3, #128	; 0x80
10010762:	015b      	lsls	r3, r3, #5
10010764:	401a      	ands	r2, r3
10010766:	d001      	beq.n	1001076c <__sflush_r+0x30>
10010768:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001076a:	e014      	b.n	10010796 <__sflush_r+0x5a>
1001076c:	2301      	movs	r3, #1
1001076e:	6a21      	ldr	r1, [r4, #32]
10010770:	0028      	movs	r0, r5
10010772:	47b8      	blx	r7
10010774:	1c43      	adds	r3, r0, #1
10010776:	d10e      	bne.n	10010796 <__sflush_r+0x5a>
10010778:	682b      	ldr	r3, [r5, #0]
1001077a:	2b00      	cmp	r3, #0
1001077c:	d00b      	beq.n	10010796 <__sflush_r+0x5a>
1001077e:	2b1d      	cmp	r3, #29
10010780:	d001      	beq.n	10010786 <__sflush_r+0x4a>
10010782:	2b16      	cmp	r3, #22
10010784:	d102      	bne.n	1001078c <__sflush_r+0x50>
10010786:	602e      	str	r6, [r5, #0]
10010788:	2000      	movs	r0, #0
1001078a:	e05a      	b.n	10010842 <__sflush_r+0x106>
1001078c:	2240      	movs	r2, #64	; 0x40
1001078e:	89a3      	ldrh	r3, [r4, #12]
10010790:	4313      	orrs	r3, r2
10010792:	81a3      	strh	r3, [r4, #12]
10010794:	e055      	b.n	10010842 <__sflush_r+0x106>
10010796:	89a3      	ldrh	r3, [r4, #12]
10010798:	075b      	lsls	r3, r3, #29
1001079a:	d506      	bpl.n	100107aa <__sflush_r+0x6e>
1001079c:	6863      	ldr	r3, [r4, #4]
1001079e:	1ac0      	subs	r0, r0, r3
100107a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
100107a2:	2b00      	cmp	r3, #0
100107a4:	d001      	beq.n	100107aa <__sflush_r+0x6e>
100107a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
100107a8:	1ac0      	subs	r0, r0, r3
100107aa:	2300      	movs	r3, #0
100107ac:	0002      	movs	r2, r0
100107ae:	6a21      	ldr	r1, [r4, #32]
100107b0:	0028      	movs	r0, r5
100107b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100107b4:	47b8      	blx	r7
100107b6:	89a3      	ldrh	r3, [r4, #12]
100107b8:	1c42      	adds	r2, r0, #1
100107ba:	d106      	bne.n	100107ca <__sflush_r+0x8e>
100107bc:	6829      	ldr	r1, [r5, #0]
100107be:	291d      	cmp	r1, #29
100107c0:	d83a      	bhi.n	10010838 <__sflush_r+0xfc>
100107c2:	4a20      	ldr	r2, [pc, #128]	; (10010844 <__sflush_r+0x108>)
100107c4:	40ca      	lsrs	r2, r1
100107c6:	07d2      	lsls	r2, r2, #31
100107c8:	d536      	bpl.n	10010838 <__sflush_r+0xfc>
100107ca:	2200      	movs	r2, #0
100107cc:	6062      	str	r2, [r4, #4]
100107ce:	6922      	ldr	r2, [r4, #16]
100107d0:	6022      	str	r2, [r4, #0]
100107d2:	04db      	lsls	r3, r3, #19
100107d4:	d505      	bpl.n	100107e2 <__sflush_r+0xa6>
100107d6:	1c43      	adds	r3, r0, #1
100107d8:	d102      	bne.n	100107e0 <__sflush_r+0xa4>
100107da:	682b      	ldr	r3, [r5, #0]
100107dc:	2b00      	cmp	r3, #0
100107de:	d100      	bne.n	100107e2 <__sflush_r+0xa6>
100107e0:	6560      	str	r0, [r4, #84]	; 0x54
100107e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100107e4:	602e      	str	r6, [r5, #0]
100107e6:	2900      	cmp	r1, #0
100107e8:	d0ce      	beq.n	10010788 <__sflush_r+0x4c>
100107ea:	0023      	movs	r3, r4
100107ec:	3344      	adds	r3, #68	; 0x44
100107ee:	4299      	cmp	r1, r3
100107f0:	d002      	beq.n	100107f8 <__sflush_r+0xbc>
100107f2:	0028      	movs	r0, r5
100107f4:	f000 f998 	bl	10010b28 <_free_r>
100107f8:	2000      	movs	r0, #0
100107fa:	6360      	str	r0, [r4, #52]	; 0x34
100107fc:	e021      	b.n	10010842 <__sflush_r+0x106>
100107fe:	690f      	ldr	r7, [r1, #16]
10010800:	2f00      	cmp	r7, #0
10010802:	d0c1      	beq.n	10010788 <__sflush_r+0x4c>
10010804:	680b      	ldr	r3, [r1, #0]
10010806:	600f      	str	r7, [r1, #0]
10010808:	1bdb      	subs	r3, r3, r7
1001080a:	9301      	str	r3, [sp, #4]
1001080c:	2300      	movs	r3, #0
1001080e:	0792      	lsls	r2, r2, #30
10010810:	d100      	bne.n	10010814 <__sflush_r+0xd8>
10010812:	694b      	ldr	r3, [r1, #20]
10010814:	60a3      	str	r3, [r4, #8]
10010816:	e003      	b.n	10010820 <__sflush_r+0xe4>
10010818:	9b01      	ldr	r3, [sp, #4]
1001081a:	183f      	adds	r7, r7, r0
1001081c:	1a1b      	subs	r3, r3, r0
1001081e:	9301      	str	r3, [sp, #4]
10010820:	9b01      	ldr	r3, [sp, #4]
10010822:	2b00      	cmp	r3, #0
10010824:	ddb0      	ble.n	10010788 <__sflush_r+0x4c>
10010826:	9b01      	ldr	r3, [sp, #4]
10010828:	003a      	movs	r2, r7
1001082a:	6a21      	ldr	r1, [r4, #32]
1001082c:	0028      	movs	r0, r5
1001082e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10010830:	47b0      	blx	r6
10010832:	2800      	cmp	r0, #0
10010834:	dcf0      	bgt.n	10010818 <__sflush_r+0xdc>
10010836:	89a3      	ldrh	r3, [r4, #12]
10010838:	2240      	movs	r2, #64	; 0x40
1001083a:	2001      	movs	r0, #1
1001083c:	4313      	orrs	r3, r2
1001083e:	81a3      	strh	r3, [r4, #12]
10010840:	4240      	negs	r0, r0
10010842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010844:	20400001 	.word	0x20400001

10010848 <_fflush_r>:
10010848:	690b      	ldr	r3, [r1, #16]
1001084a:	b570      	push	{r4, r5, r6, lr}
1001084c:	0005      	movs	r5, r0
1001084e:	000c      	movs	r4, r1
10010850:	2b00      	cmp	r3, #0
10010852:	d101      	bne.n	10010858 <_fflush_r+0x10>
10010854:	2000      	movs	r0, #0
10010856:	e01c      	b.n	10010892 <_fflush_r+0x4a>
10010858:	2800      	cmp	r0, #0
1001085a:	d004      	beq.n	10010866 <_fflush_r+0x1e>
1001085c:	6983      	ldr	r3, [r0, #24]
1001085e:	2b00      	cmp	r3, #0
10010860:	d101      	bne.n	10010866 <_fflush_r+0x1e>
10010862:	f000 f85f 	bl	10010924 <__sinit>
10010866:	4b0b      	ldr	r3, [pc, #44]	; (10010894 <_fflush_r+0x4c>)
10010868:	429c      	cmp	r4, r3
1001086a:	d101      	bne.n	10010870 <_fflush_r+0x28>
1001086c:	686c      	ldr	r4, [r5, #4]
1001086e:	e008      	b.n	10010882 <_fflush_r+0x3a>
10010870:	4b09      	ldr	r3, [pc, #36]	; (10010898 <_fflush_r+0x50>)
10010872:	429c      	cmp	r4, r3
10010874:	d101      	bne.n	1001087a <_fflush_r+0x32>
10010876:	68ac      	ldr	r4, [r5, #8]
10010878:	e003      	b.n	10010882 <_fflush_r+0x3a>
1001087a:	4b08      	ldr	r3, [pc, #32]	; (1001089c <_fflush_r+0x54>)
1001087c:	429c      	cmp	r4, r3
1001087e:	d100      	bne.n	10010882 <_fflush_r+0x3a>
10010880:	68ec      	ldr	r4, [r5, #12]
10010882:	220c      	movs	r2, #12
10010884:	5ea3      	ldrsh	r3, [r4, r2]
10010886:	2b00      	cmp	r3, #0
10010888:	d0e4      	beq.n	10010854 <_fflush_r+0xc>
1001088a:	0021      	movs	r1, r4
1001088c:	0028      	movs	r0, r5
1001088e:	f7ff ff55 	bl	1001073c <__sflush_r>
10010892:	bd70      	pop	{r4, r5, r6, pc}
10010894:	10012e04 	.word	0x10012e04
10010898:	10012e24 	.word	0x10012e24
1001089c:	10012e44 	.word	0x10012e44

100108a0 <_cleanup_r>:
100108a0:	b510      	push	{r4, lr}
100108a2:	4902      	ldr	r1, [pc, #8]	; (100108ac <_cleanup_r+0xc>)
100108a4:	f000 f8b0 	bl	10010a08 <_fwalk_reent>
100108a8:	bd10      	pop	{r4, pc}
100108aa:	46c0      	nop			; (mov r8, r8)
100108ac:	10010849 	.word	0x10010849

100108b0 <std.isra.0>:
100108b0:	2300      	movs	r3, #0
100108b2:	b510      	push	{r4, lr}
100108b4:	0004      	movs	r4, r0
100108b6:	6003      	str	r3, [r0, #0]
100108b8:	6043      	str	r3, [r0, #4]
100108ba:	6083      	str	r3, [r0, #8]
100108bc:	8181      	strh	r1, [r0, #12]
100108be:	6643      	str	r3, [r0, #100]	; 0x64
100108c0:	81c2      	strh	r2, [r0, #14]
100108c2:	6103      	str	r3, [r0, #16]
100108c4:	6143      	str	r3, [r0, #20]
100108c6:	6183      	str	r3, [r0, #24]
100108c8:	0019      	movs	r1, r3
100108ca:	2208      	movs	r2, #8
100108cc:	305c      	adds	r0, #92	; 0x5c
100108ce:	f7ff fccf 	bl	10010270 <memset>
100108d2:	4b05      	ldr	r3, [pc, #20]	; (100108e8 <std.isra.0+0x38>)
100108d4:	6224      	str	r4, [r4, #32]
100108d6:	6263      	str	r3, [r4, #36]	; 0x24
100108d8:	4b04      	ldr	r3, [pc, #16]	; (100108ec <std.isra.0+0x3c>)
100108da:	62a3      	str	r3, [r4, #40]	; 0x28
100108dc:	4b04      	ldr	r3, [pc, #16]	; (100108f0 <std.isra.0+0x40>)
100108de:	62e3      	str	r3, [r4, #44]	; 0x2c
100108e0:	4b04      	ldr	r3, [pc, #16]	; (100108f4 <std.isra.0+0x44>)
100108e2:	6323      	str	r3, [r4, #48]	; 0x30
100108e4:	bd10      	pop	{r4, pc}
100108e6:	46c0      	nop			; (mov r8, r8)
100108e8:	10011299 	.word	0x10011299
100108ec:	100112c1 	.word	0x100112c1
100108f0:	100112f9 	.word	0x100112f9
100108f4:	10011325 	.word	0x10011325

100108f8 <__sfmoreglue>:
100108f8:	b570      	push	{r4, r5, r6, lr}
100108fa:	2568      	movs	r5, #104	; 0x68
100108fc:	1e4b      	subs	r3, r1, #1
100108fe:	435d      	muls	r5, r3
10010900:	000e      	movs	r6, r1
10010902:	0029      	movs	r1, r5
10010904:	3174      	adds	r1, #116	; 0x74
10010906:	f000 f955 	bl	10010bb4 <_malloc_r>
1001090a:	1e04      	subs	r4, r0, #0
1001090c:	d008      	beq.n	10010920 <__sfmoreglue+0x28>
1001090e:	2100      	movs	r1, #0
10010910:	002a      	movs	r2, r5
10010912:	6001      	str	r1, [r0, #0]
10010914:	6046      	str	r6, [r0, #4]
10010916:	300c      	adds	r0, #12
10010918:	60a0      	str	r0, [r4, #8]
1001091a:	3268      	adds	r2, #104	; 0x68
1001091c:	f7ff fca8 	bl	10010270 <memset>
10010920:	0020      	movs	r0, r4
10010922:	bd70      	pop	{r4, r5, r6, pc}

10010924 <__sinit>:
10010924:	6983      	ldr	r3, [r0, #24]
10010926:	b513      	push	{r0, r1, r4, lr}
10010928:	0004      	movs	r4, r0
1001092a:	2b00      	cmp	r3, #0
1001092c:	d128      	bne.n	10010980 <__sinit+0x5c>
1001092e:	6483      	str	r3, [r0, #72]	; 0x48
10010930:	64c3      	str	r3, [r0, #76]	; 0x4c
10010932:	6503      	str	r3, [r0, #80]	; 0x50
10010934:	4b13      	ldr	r3, [pc, #76]	; (10010984 <__sinit+0x60>)
10010936:	4a14      	ldr	r2, [pc, #80]	; (10010988 <__sinit+0x64>)
10010938:	681b      	ldr	r3, [r3, #0]
1001093a:	6282      	str	r2, [r0, #40]	; 0x28
1001093c:	9301      	str	r3, [sp, #4]
1001093e:	4298      	cmp	r0, r3
10010940:	d101      	bne.n	10010946 <__sinit+0x22>
10010942:	2301      	movs	r3, #1
10010944:	6183      	str	r3, [r0, #24]
10010946:	0020      	movs	r0, r4
10010948:	f000 f820 	bl	1001098c <__sfp>
1001094c:	6060      	str	r0, [r4, #4]
1001094e:	0020      	movs	r0, r4
10010950:	f000 f81c 	bl	1001098c <__sfp>
10010954:	60a0      	str	r0, [r4, #8]
10010956:	0020      	movs	r0, r4
10010958:	f000 f818 	bl	1001098c <__sfp>
1001095c:	2200      	movs	r2, #0
1001095e:	60e0      	str	r0, [r4, #12]
10010960:	2104      	movs	r1, #4
10010962:	6860      	ldr	r0, [r4, #4]
10010964:	f7ff ffa4 	bl	100108b0 <std.isra.0>
10010968:	2201      	movs	r2, #1
1001096a:	2109      	movs	r1, #9
1001096c:	68a0      	ldr	r0, [r4, #8]
1001096e:	f7ff ff9f 	bl	100108b0 <std.isra.0>
10010972:	2202      	movs	r2, #2
10010974:	2112      	movs	r1, #18
10010976:	68e0      	ldr	r0, [r4, #12]
10010978:	f7ff ff9a 	bl	100108b0 <std.isra.0>
1001097c:	2301      	movs	r3, #1
1001097e:	61a3      	str	r3, [r4, #24]
10010980:	bd13      	pop	{r0, r1, r4, pc}
10010982:	46c0      	nop			; (mov r8, r8)
10010984:	10012e00 	.word	0x10012e00
10010988:	100108a1 	.word	0x100108a1

1001098c <__sfp>:
1001098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001098e:	4b1d      	ldr	r3, [pc, #116]	; (10010a04 <__sfp+0x78>)
10010990:	0006      	movs	r6, r0
10010992:	681d      	ldr	r5, [r3, #0]
10010994:	69ab      	ldr	r3, [r5, #24]
10010996:	2b00      	cmp	r3, #0
10010998:	d102      	bne.n	100109a0 <__sfp+0x14>
1001099a:	0028      	movs	r0, r5
1001099c:	f7ff ffc2 	bl	10010924 <__sinit>
100109a0:	3548      	adds	r5, #72	; 0x48
100109a2:	68ac      	ldr	r4, [r5, #8]
100109a4:	686b      	ldr	r3, [r5, #4]
100109a6:	3b01      	subs	r3, #1
100109a8:	d405      	bmi.n	100109b6 <__sfp+0x2a>
100109aa:	220c      	movs	r2, #12
100109ac:	5ea7      	ldrsh	r7, [r4, r2]
100109ae:	2f00      	cmp	r7, #0
100109b0:	d010      	beq.n	100109d4 <__sfp+0x48>
100109b2:	3468      	adds	r4, #104	; 0x68
100109b4:	e7f7      	b.n	100109a6 <__sfp+0x1a>
100109b6:	682b      	ldr	r3, [r5, #0]
100109b8:	2b00      	cmp	r3, #0
100109ba:	d001      	beq.n	100109c0 <__sfp+0x34>
100109bc:	682d      	ldr	r5, [r5, #0]
100109be:	e7f0      	b.n	100109a2 <__sfp+0x16>
100109c0:	2104      	movs	r1, #4
100109c2:	0030      	movs	r0, r6
100109c4:	f7ff ff98 	bl	100108f8 <__sfmoreglue>
100109c8:	6028      	str	r0, [r5, #0]
100109ca:	2800      	cmp	r0, #0
100109cc:	d1f6      	bne.n	100109bc <__sfp+0x30>
100109ce:	230c      	movs	r3, #12
100109d0:	6033      	str	r3, [r6, #0]
100109d2:	e016      	b.n	10010a02 <__sfp+0x76>
100109d4:	2301      	movs	r3, #1
100109d6:	0020      	movs	r0, r4
100109d8:	425b      	negs	r3, r3
100109da:	81e3      	strh	r3, [r4, #14]
100109dc:	3302      	adds	r3, #2
100109de:	81a3      	strh	r3, [r4, #12]
100109e0:	6667      	str	r7, [r4, #100]	; 0x64
100109e2:	6027      	str	r7, [r4, #0]
100109e4:	60a7      	str	r7, [r4, #8]
100109e6:	6067      	str	r7, [r4, #4]
100109e8:	6127      	str	r7, [r4, #16]
100109ea:	6167      	str	r7, [r4, #20]
100109ec:	61a7      	str	r7, [r4, #24]
100109ee:	305c      	adds	r0, #92	; 0x5c
100109f0:	2208      	movs	r2, #8
100109f2:	0039      	movs	r1, r7
100109f4:	f7ff fc3c 	bl	10010270 <memset>
100109f8:	0020      	movs	r0, r4
100109fa:	6367      	str	r7, [r4, #52]	; 0x34
100109fc:	63a7      	str	r7, [r4, #56]	; 0x38
100109fe:	64a7      	str	r7, [r4, #72]	; 0x48
10010a00:	64e7      	str	r7, [r4, #76]	; 0x4c
10010a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010a04:	10012e00 	.word	0x10012e00

10010a08 <_fwalk_reent>:
10010a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010a0a:	0004      	movs	r4, r0
10010a0c:	0007      	movs	r7, r0
10010a0e:	2600      	movs	r6, #0
10010a10:	9101      	str	r1, [sp, #4]
10010a12:	3448      	adds	r4, #72	; 0x48
10010a14:	2c00      	cmp	r4, #0
10010a16:	d016      	beq.n	10010a46 <_fwalk_reent+0x3e>
10010a18:	6863      	ldr	r3, [r4, #4]
10010a1a:	68a5      	ldr	r5, [r4, #8]
10010a1c:	9300      	str	r3, [sp, #0]
10010a1e:	9b00      	ldr	r3, [sp, #0]
10010a20:	3b01      	subs	r3, #1
10010a22:	9300      	str	r3, [sp, #0]
10010a24:	d40d      	bmi.n	10010a42 <_fwalk_reent+0x3a>
10010a26:	89ab      	ldrh	r3, [r5, #12]
10010a28:	2b01      	cmp	r3, #1
10010a2a:	d908      	bls.n	10010a3e <_fwalk_reent+0x36>
10010a2c:	220e      	movs	r2, #14
10010a2e:	5eab      	ldrsh	r3, [r5, r2]
10010a30:	3301      	adds	r3, #1
10010a32:	d004      	beq.n	10010a3e <_fwalk_reent+0x36>
10010a34:	0029      	movs	r1, r5
10010a36:	0038      	movs	r0, r7
10010a38:	9b01      	ldr	r3, [sp, #4]
10010a3a:	4798      	blx	r3
10010a3c:	4306      	orrs	r6, r0
10010a3e:	3568      	adds	r5, #104	; 0x68
10010a40:	e7ed      	b.n	10010a1e <_fwalk_reent+0x16>
10010a42:	6824      	ldr	r4, [r4, #0]
10010a44:	e7e6      	b.n	10010a14 <_fwalk_reent+0xc>
10010a46:	0030      	movs	r0, r6
10010a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010a4c <__swhatbuf_r>:
10010a4c:	b570      	push	{r4, r5, r6, lr}
10010a4e:	000e      	movs	r6, r1
10010a50:	001d      	movs	r5, r3
10010a52:	230e      	movs	r3, #14
10010a54:	5ec9      	ldrsh	r1, [r1, r3]
10010a56:	b090      	sub	sp, #64	; 0x40
10010a58:	0014      	movs	r4, r2
10010a5a:	2900      	cmp	r1, #0
10010a5c:	da06      	bge.n	10010a6c <__swhatbuf_r+0x20>
10010a5e:	2300      	movs	r3, #0
10010a60:	602b      	str	r3, [r5, #0]
10010a62:	89b3      	ldrh	r3, [r6, #12]
10010a64:	061b      	lsls	r3, r3, #24
10010a66:	d50f      	bpl.n	10010a88 <__swhatbuf_r+0x3c>
10010a68:	2340      	movs	r3, #64	; 0x40
10010a6a:	e00f      	b.n	10010a8c <__swhatbuf_r+0x40>
10010a6c:	aa01      	add	r2, sp, #4
10010a6e:	f000 fc85 	bl	1001137c <_fstat_r>
10010a72:	2800      	cmp	r0, #0
10010a74:	dbf3      	blt.n	10010a5e <__swhatbuf_r+0x12>
10010a76:	23f0      	movs	r3, #240	; 0xf0
10010a78:	9a02      	ldr	r2, [sp, #8]
10010a7a:	021b      	lsls	r3, r3, #8
10010a7c:	4013      	ands	r3, r2
10010a7e:	4a05      	ldr	r2, [pc, #20]	; (10010a94 <__swhatbuf_r+0x48>)
10010a80:	189b      	adds	r3, r3, r2
10010a82:	425a      	negs	r2, r3
10010a84:	4153      	adcs	r3, r2
10010a86:	602b      	str	r3, [r5, #0]
10010a88:	2380      	movs	r3, #128	; 0x80
10010a8a:	00db      	lsls	r3, r3, #3
10010a8c:	2000      	movs	r0, #0
10010a8e:	6023      	str	r3, [r4, #0]
10010a90:	b010      	add	sp, #64	; 0x40
10010a92:	bd70      	pop	{r4, r5, r6, pc}
10010a94:	ffffe000 	.word	0xffffe000

10010a98 <__smakebuf_r>:
10010a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010a9a:	2602      	movs	r6, #2
10010a9c:	898b      	ldrh	r3, [r1, #12]
10010a9e:	0005      	movs	r5, r0
10010aa0:	000c      	movs	r4, r1
10010aa2:	4233      	tst	r3, r6
10010aa4:	d110      	bne.n	10010ac8 <__smakebuf_r+0x30>
10010aa6:	ab01      	add	r3, sp, #4
10010aa8:	466a      	mov	r2, sp
10010aaa:	f7ff ffcf 	bl	10010a4c <__swhatbuf_r>
10010aae:	9900      	ldr	r1, [sp, #0]
10010ab0:	0007      	movs	r7, r0
10010ab2:	0028      	movs	r0, r5
10010ab4:	f000 f87e 	bl	10010bb4 <_malloc_r>
10010ab8:	2800      	cmp	r0, #0
10010aba:	d10c      	bne.n	10010ad6 <__smakebuf_r+0x3e>
10010abc:	220c      	movs	r2, #12
10010abe:	5ea3      	ldrsh	r3, [r4, r2]
10010ac0:	059a      	lsls	r2, r3, #22
10010ac2:	d423      	bmi.n	10010b0c <__smakebuf_r+0x74>
10010ac4:	4333      	orrs	r3, r6
10010ac6:	81a3      	strh	r3, [r4, #12]
10010ac8:	0023      	movs	r3, r4
10010aca:	3347      	adds	r3, #71	; 0x47
10010acc:	6023      	str	r3, [r4, #0]
10010ace:	6123      	str	r3, [r4, #16]
10010ad0:	2301      	movs	r3, #1
10010ad2:	6163      	str	r3, [r4, #20]
10010ad4:	e01a      	b.n	10010b0c <__smakebuf_r+0x74>
10010ad6:	2280      	movs	r2, #128	; 0x80
10010ad8:	4b0d      	ldr	r3, [pc, #52]	; (10010b10 <__smakebuf_r+0x78>)
10010ada:	62ab      	str	r3, [r5, #40]	; 0x28
10010adc:	89a3      	ldrh	r3, [r4, #12]
10010ade:	6020      	str	r0, [r4, #0]
10010ae0:	4313      	orrs	r3, r2
10010ae2:	81a3      	strh	r3, [r4, #12]
10010ae4:	9b00      	ldr	r3, [sp, #0]
10010ae6:	6120      	str	r0, [r4, #16]
10010ae8:	6163      	str	r3, [r4, #20]
10010aea:	9b01      	ldr	r3, [sp, #4]
10010aec:	2b00      	cmp	r3, #0
10010aee:	d00a      	beq.n	10010b06 <__smakebuf_r+0x6e>
10010af0:	230e      	movs	r3, #14
10010af2:	5ee1      	ldrsh	r1, [r4, r3]
10010af4:	0028      	movs	r0, r5
10010af6:	f000 fc53 	bl	100113a0 <_isatty_r>
10010afa:	2800      	cmp	r0, #0
10010afc:	d003      	beq.n	10010b06 <__smakebuf_r+0x6e>
10010afe:	2201      	movs	r2, #1
10010b00:	89a3      	ldrh	r3, [r4, #12]
10010b02:	4313      	orrs	r3, r2
10010b04:	81a3      	strh	r3, [r4, #12]
10010b06:	89a3      	ldrh	r3, [r4, #12]
10010b08:	431f      	orrs	r7, r3
10010b0a:	81a7      	strh	r7, [r4, #12]
10010b0c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010b0e:	46c0      	nop			; (mov r8, r8)
10010b10:	100108a1 	.word	0x100108a1

10010b14 <malloc>:
10010b14:	b510      	push	{r4, lr}
10010b16:	4b03      	ldr	r3, [pc, #12]	; (10010b24 <malloc+0x10>)
10010b18:	0001      	movs	r1, r0
10010b1a:	6818      	ldr	r0, [r3, #0]
10010b1c:	f000 f84a 	bl	10010bb4 <_malloc_r>
10010b20:	bd10      	pop	{r4, pc}
10010b22:	46c0      	nop			; (mov r8, r8)
10010b24:	10012f20 	.word	0x10012f20

10010b28 <_free_r>:
10010b28:	b530      	push	{r4, r5, lr}
10010b2a:	2900      	cmp	r1, #0
10010b2c:	d03e      	beq.n	10010bac <_free_r+0x84>
10010b2e:	3904      	subs	r1, #4
10010b30:	680b      	ldr	r3, [r1, #0]
10010b32:	2b00      	cmp	r3, #0
10010b34:	da00      	bge.n	10010b38 <_free_r+0x10>
10010b36:	18c9      	adds	r1, r1, r3
10010b38:	4a1d      	ldr	r2, [pc, #116]	; (10010bb0 <_free_r+0x88>)
10010b3a:	6813      	ldr	r3, [r2, #0]
10010b3c:	0014      	movs	r4, r2
10010b3e:	2b00      	cmp	r3, #0
10010b40:	d102      	bne.n	10010b48 <_free_r+0x20>
10010b42:	604b      	str	r3, [r1, #4]
10010b44:	6011      	str	r1, [r2, #0]
10010b46:	e031      	b.n	10010bac <_free_r+0x84>
10010b48:	428b      	cmp	r3, r1
10010b4a:	d90d      	bls.n	10010b68 <_free_r+0x40>
10010b4c:	680a      	ldr	r2, [r1, #0]
10010b4e:	1888      	adds	r0, r1, r2
10010b50:	4283      	cmp	r3, r0
10010b52:	d103      	bne.n	10010b5c <_free_r+0x34>
10010b54:	6818      	ldr	r0, [r3, #0]
10010b56:	685b      	ldr	r3, [r3, #4]
10010b58:	1882      	adds	r2, r0, r2
10010b5a:	600a      	str	r2, [r1, #0]
10010b5c:	604b      	str	r3, [r1, #4]
10010b5e:	6021      	str	r1, [r4, #0]
10010b60:	e024      	b.n	10010bac <_free_r+0x84>
10010b62:	428a      	cmp	r2, r1
10010b64:	d803      	bhi.n	10010b6e <_free_r+0x46>
10010b66:	0013      	movs	r3, r2
10010b68:	685a      	ldr	r2, [r3, #4]
10010b6a:	2a00      	cmp	r2, #0
10010b6c:	d1f9      	bne.n	10010b62 <_free_r+0x3a>
10010b6e:	681d      	ldr	r5, [r3, #0]
10010b70:	195c      	adds	r4, r3, r5
10010b72:	428c      	cmp	r4, r1
10010b74:	d10b      	bne.n	10010b8e <_free_r+0x66>
10010b76:	6809      	ldr	r1, [r1, #0]
10010b78:	1869      	adds	r1, r5, r1
10010b7a:	1858      	adds	r0, r3, r1
10010b7c:	6019      	str	r1, [r3, #0]
10010b7e:	4282      	cmp	r2, r0
10010b80:	d114      	bne.n	10010bac <_free_r+0x84>
10010b82:	6810      	ldr	r0, [r2, #0]
10010b84:	6852      	ldr	r2, [r2, #4]
10010b86:	1841      	adds	r1, r0, r1
10010b88:	6019      	str	r1, [r3, #0]
10010b8a:	605a      	str	r2, [r3, #4]
10010b8c:	e00e      	b.n	10010bac <_free_r+0x84>
10010b8e:	428c      	cmp	r4, r1
10010b90:	d902      	bls.n	10010b98 <_free_r+0x70>
10010b92:	230c      	movs	r3, #12
10010b94:	6003      	str	r3, [r0, #0]
10010b96:	e009      	b.n	10010bac <_free_r+0x84>
10010b98:	6808      	ldr	r0, [r1, #0]
10010b9a:	180c      	adds	r4, r1, r0
10010b9c:	42a2      	cmp	r2, r4
10010b9e:	d103      	bne.n	10010ba8 <_free_r+0x80>
10010ba0:	6814      	ldr	r4, [r2, #0]
10010ba2:	6852      	ldr	r2, [r2, #4]
10010ba4:	1820      	adds	r0, r4, r0
10010ba6:	6008      	str	r0, [r1, #0]
10010ba8:	604a      	str	r2, [r1, #4]
10010baa:	6059      	str	r1, [r3, #4]
10010bac:	bd30      	pop	{r4, r5, pc}
10010bae:	46c0      	nop			; (mov r8, r8)
10010bb0:	100131d8 	.word	0x100131d8

10010bb4 <_malloc_r>:
10010bb4:	2303      	movs	r3, #3
10010bb6:	b570      	push	{r4, r5, r6, lr}
10010bb8:	1ccd      	adds	r5, r1, #3
10010bba:	439d      	bics	r5, r3
10010bbc:	3508      	adds	r5, #8
10010bbe:	0006      	movs	r6, r0
10010bc0:	2d0c      	cmp	r5, #12
10010bc2:	d201      	bcs.n	10010bc8 <_malloc_r+0x14>
10010bc4:	250c      	movs	r5, #12
10010bc6:	e005      	b.n	10010bd4 <_malloc_r+0x20>
10010bc8:	2d00      	cmp	r5, #0
10010bca:	da03      	bge.n	10010bd4 <_malloc_r+0x20>
10010bcc:	230c      	movs	r3, #12
10010bce:	2000      	movs	r0, #0
10010bd0:	6033      	str	r3, [r6, #0]
10010bd2:	e040      	b.n	10010c56 <_malloc_r+0xa2>
10010bd4:	42a9      	cmp	r1, r5
10010bd6:	d8f9      	bhi.n	10010bcc <_malloc_r+0x18>
10010bd8:	4b1f      	ldr	r3, [pc, #124]	; (10010c58 <_malloc_r+0xa4>)
10010bda:	681c      	ldr	r4, [r3, #0]
10010bdc:	001a      	movs	r2, r3
10010bde:	0021      	movs	r1, r4
10010be0:	2900      	cmp	r1, #0
10010be2:	d013      	beq.n	10010c0c <_malloc_r+0x58>
10010be4:	680b      	ldr	r3, [r1, #0]
10010be6:	1b5b      	subs	r3, r3, r5
10010be8:	d40d      	bmi.n	10010c06 <_malloc_r+0x52>
10010bea:	2b0b      	cmp	r3, #11
10010bec:	d902      	bls.n	10010bf4 <_malloc_r+0x40>
10010bee:	600b      	str	r3, [r1, #0]
10010bf0:	18cc      	adds	r4, r1, r3
10010bf2:	e01e      	b.n	10010c32 <_malloc_r+0x7e>
10010bf4:	428c      	cmp	r4, r1
10010bf6:	d102      	bne.n	10010bfe <_malloc_r+0x4a>
10010bf8:	6863      	ldr	r3, [r4, #4]
10010bfa:	6013      	str	r3, [r2, #0]
10010bfc:	e01a      	b.n	10010c34 <_malloc_r+0x80>
10010bfe:	684b      	ldr	r3, [r1, #4]
10010c00:	6063      	str	r3, [r4, #4]
10010c02:	000c      	movs	r4, r1
10010c04:	e016      	b.n	10010c34 <_malloc_r+0x80>
10010c06:	000c      	movs	r4, r1
10010c08:	6849      	ldr	r1, [r1, #4]
10010c0a:	e7e9      	b.n	10010be0 <_malloc_r+0x2c>
10010c0c:	4c13      	ldr	r4, [pc, #76]	; (10010c5c <_malloc_r+0xa8>)
10010c0e:	6823      	ldr	r3, [r4, #0]
10010c10:	2b00      	cmp	r3, #0
10010c12:	d103      	bne.n	10010c1c <_malloc_r+0x68>
10010c14:	0030      	movs	r0, r6
10010c16:	f000 fb2d 	bl	10011274 <_sbrk_r>
10010c1a:	6020      	str	r0, [r4, #0]
10010c1c:	0029      	movs	r1, r5
10010c1e:	0030      	movs	r0, r6
10010c20:	f000 fb28 	bl	10011274 <_sbrk_r>
10010c24:	1c43      	adds	r3, r0, #1
10010c26:	d0d1      	beq.n	10010bcc <_malloc_r+0x18>
10010c28:	2303      	movs	r3, #3
10010c2a:	1cc4      	adds	r4, r0, #3
10010c2c:	439c      	bics	r4, r3
10010c2e:	42a0      	cmp	r0, r4
10010c30:	d10a      	bne.n	10010c48 <_malloc_r+0x94>
10010c32:	6025      	str	r5, [r4, #0]
10010c34:	0020      	movs	r0, r4
10010c36:	2207      	movs	r2, #7
10010c38:	300b      	adds	r0, #11
10010c3a:	1d23      	adds	r3, r4, #4
10010c3c:	4390      	bics	r0, r2
10010c3e:	1ac3      	subs	r3, r0, r3
10010c40:	d009      	beq.n	10010c56 <_malloc_r+0xa2>
10010c42:	425a      	negs	r2, r3
10010c44:	50e2      	str	r2, [r4, r3]
10010c46:	e006      	b.n	10010c56 <_malloc_r+0xa2>
10010c48:	1a21      	subs	r1, r4, r0
10010c4a:	0030      	movs	r0, r6
10010c4c:	f000 fb12 	bl	10011274 <_sbrk_r>
10010c50:	1c43      	adds	r3, r0, #1
10010c52:	d1ee      	bne.n	10010c32 <_malloc_r+0x7e>
10010c54:	e7ba      	b.n	10010bcc <_malloc_r+0x18>
10010c56:	bd70      	pop	{r4, r5, r6, pc}
10010c58:	100131d8 	.word	0x100131d8
10010c5c:	100131d4 	.word	0x100131d4

10010c60 <__sfputc_r>:
10010c60:	6893      	ldr	r3, [r2, #8]
10010c62:	b510      	push	{r4, lr}
10010c64:	3b01      	subs	r3, #1
10010c66:	6093      	str	r3, [r2, #8]
10010c68:	2b00      	cmp	r3, #0
10010c6a:	da05      	bge.n	10010c78 <__sfputc_r+0x18>
10010c6c:	6994      	ldr	r4, [r2, #24]
10010c6e:	42a3      	cmp	r3, r4
10010c70:	db08      	blt.n	10010c84 <__sfputc_r+0x24>
10010c72:	b2cb      	uxtb	r3, r1
10010c74:	2b0a      	cmp	r3, #10
10010c76:	d005      	beq.n	10010c84 <__sfputc_r+0x24>
10010c78:	6813      	ldr	r3, [r2, #0]
10010c7a:	1c58      	adds	r0, r3, #1
10010c7c:	6010      	str	r0, [r2, #0]
10010c7e:	7019      	strb	r1, [r3, #0]
10010c80:	b2c8      	uxtb	r0, r1
10010c82:	e001      	b.n	10010c88 <__sfputc_r+0x28>
10010c84:	f7ff fc8c 	bl	100105a0 <__swbuf_r>
10010c88:	bd10      	pop	{r4, pc}

10010c8a <__sfputs_r>:
10010c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010c8c:	0006      	movs	r6, r0
10010c8e:	000f      	movs	r7, r1
10010c90:	0014      	movs	r4, r2
10010c92:	18d5      	adds	r5, r2, r3
10010c94:	42ac      	cmp	r4, r5
10010c96:	d008      	beq.n	10010caa <__sfputs_r+0x20>
10010c98:	7821      	ldrb	r1, [r4, #0]
10010c9a:	003a      	movs	r2, r7
10010c9c:	0030      	movs	r0, r6
10010c9e:	f7ff ffdf 	bl	10010c60 <__sfputc_r>
10010ca2:	3401      	adds	r4, #1
10010ca4:	1c43      	adds	r3, r0, #1
10010ca6:	d1f5      	bne.n	10010c94 <__sfputs_r+0xa>
10010ca8:	e000      	b.n	10010cac <__sfputs_r+0x22>
10010caa:	2000      	movs	r0, #0
10010cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010cb0 <_vfiprintf_r>:
10010cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010cb2:	b09f      	sub	sp, #124	; 0x7c
10010cb4:	0006      	movs	r6, r0
10010cb6:	000f      	movs	r7, r1
10010cb8:	9202      	str	r2, [sp, #8]
10010cba:	9305      	str	r3, [sp, #20]
10010cbc:	2800      	cmp	r0, #0
10010cbe:	d004      	beq.n	10010cca <_vfiprintf_r+0x1a>
10010cc0:	6983      	ldr	r3, [r0, #24]
10010cc2:	2b00      	cmp	r3, #0
10010cc4:	d101      	bne.n	10010cca <_vfiprintf_r+0x1a>
10010cc6:	f7ff fe2d 	bl	10010924 <__sinit>
10010cca:	4b7f      	ldr	r3, [pc, #508]	; (10010ec8 <_vfiprintf_r+0x218>)
10010ccc:	429f      	cmp	r7, r3
10010cce:	d101      	bne.n	10010cd4 <_vfiprintf_r+0x24>
10010cd0:	6877      	ldr	r7, [r6, #4]
10010cd2:	e008      	b.n	10010ce6 <_vfiprintf_r+0x36>
10010cd4:	4b7d      	ldr	r3, [pc, #500]	; (10010ecc <_vfiprintf_r+0x21c>)
10010cd6:	429f      	cmp	r7, r3
10010cd8:	d101      	bne.n	10010cde <_vfiprintf_r+0x2e>
10010cda:	68b7      	ldr	r7, [r6, #8]
10010cdc:	e003      	b.n	10010ce6 <_vfiprintf_r+0x36>
10010cde:	4b7c      	ldr	r3, [pc, #496]	; (10010ed0 <_vfiprintf_r+0x220>)
10010ce0:	429f      	cmp	r7, r3
10010ce2:	d100      	bne.n	10010ce6 <_vfiprintf_r+0x36>
10010ce4:	68f7      	ldr	r7, [r6, #12]
10010ce6:	89bb      	ldrh	r3, [r7, #12]
10010ce8:	071b      	lsls	r3, r3, #28
10010cea:	d50a      	bpl.n	10010d02 <_vfiprintf_r+0x52>
10010cec:	693b      	ldr	r3, [r7, #16]
10010cee:	2b00      	cmp	r3, #0
10010cf0:	d007      	beq.n	10010d02 <_vfiprintf_r+0x52>
10010cf2:	2300      	movs	r3, #0
10010cf4:	ad06      	add	r5, sp, #24
10010cf6:	616b      	str	r3, [r5, #20]
10010cf8:	3320      	adds	r3, #32
10010cfa:	766b      	strb	r3, [r5, #25]
10010cfc:	3310      	adds	r3, #16
10010cfe:	76ab      	strb	r3, [r5, #26]
10010d00:	e03d      	b.n	10010d7e <_vfiprintf_r+0xce>
10010d02:	0039      	movs	r1, r7
10010d04:	0030      	movs	r0, r6
10010d06:	f7ff fca3 	bl	10010650 <__swsetup_r>
10010d0a:	2800      	cmp	r0, #0
10010d0c:	d0f1      	beq.n	10010cf2 <_vfiprintf_r+0x42>
10010d0e:	2001      	movs	r0, #1
10010d10:	4240      	negs	r0, r0
10010d12:	e0d6      	b.n	10010ec2 <_vfiprintf_r+0x212>
10010d14:	9a05      	ldr	r2, [sp, #20]
10010d16:	1d11      	adds	r1, r2, #4
10010d18:	6812      	ldr	r2, [r2, #0]
10010d1a:	9105      	str	r1, [sp, #20]
10010d1c:	2a00      	cmp	r2, #0
10010d1e:	da00      	bge.n	10010d22 <_vfiprintf_r+0x72>
10010d20:	e07f      	b.n	10010e22 <_vfiprintf_r+0x172>
10010d22:	9209      	str	r2, [sp, #36]	; 0x24
10010d24:	3401      	adds	r4, #1
10010d26:	7823      	ldrb	r3, [r4, #0]
10010d28:	2b2e      	cmp	r3, #46	; 0x2e
10010d2a:	d100      	bne.n	10010d2e <_vfiprintf_r+0x7e>
10010d2c:	e08d      	b.n	10010e4a <_vfiprintf_r+0x19a>
10010d2e:	7821      	ldrb	r1, [r4, #0]
10010d30:	2203      	movs	r2, #3
10010d32:	4868      	ldr	r0, [pc, #416]	; (10010ed4 <_vfiprintf_r+0x224>)
10010d34:	f000 fb5a 	bl	100113ec <memchr>
10010d38:	2800      	cmp	r0, #0
10010d3a:	d007      	beq.n	10010d4c <_vfiprintf_r+0x9c>
10010d3c:	4b65      	ldr	r3, [pc, #404]	; (10010ed4 <_vfiprintf_r+0x224>)
10010d3e:	682a      	ldr	r2, [r5, #0]
10010d40:	1ac0      	subs	r0, r0, r3
10010d42:	2340      	movs	r3, #64	; 0x40
10010d44:	4083      	lsls	r3, r0
10010d46:	4313      	orrs	r3, r2
10010d48:	602b      	str	r3, [r5, #0]
10010d4a:	3401      	adds	r4, #1
10010d4c:	7821      	ldrb	r1, [r4, #0]
10010d4e:	1c63      	adds	r3, r4, #1
10010d50:	2206      	movs	r2, #6
10010d52:	4861      	ldr	r0, [pc, #388]	; (10010ed8 <_vfiprintf_r+0x228>)
10010d54:	9302      	str	r3, [sp, #8]
10010d56:	7629      	strb	r1, [r5, #24]
10010d58:	f000 fb48 	bl	100113ec <memchr>
10010d5c:	2800      	cmp	r0, #0
10010d5e:	d100      	bne.n	10010d62 <_vfiprintf_r+0xb2>
10010d60:	e09d      	b.n	10010e9e <_vfiprintf_r+0x1ee>
10010d62:	4b5e      	ldr	r3, [pc, #376]	; (10010edc <_vfiprintf_r+0x22c>)
10010d64:	2b00      	cmp	r3, #0
10010d66:	d000      	beq.n	10010d6a <_vfiprintf_r+0xba>
10010d68:	e090      	b.n	10010e8c <_vfiprintf_r+0x1dc>
10010d6a:	2207      	movs	r2, #7
10010d6c:	9b05      	ldr	r3, [sp, #20]
10010d6e:	3307      	adds	r3, #7
10010d70:	4393      	bics	r3, r2
10010d72:	3308      	adds	r3, #8
10010d74:	9305      	str	r3, [sp, #20]
10010d76:	696b      	ldr	r3, [r5, #20]
10010d78:	9a03      	ldr	r2, [sp, #12]
10010d7a:	189b      	adds	r3, r3, r2
10010d7c:	616b      	str	r3, [r5, #20]
10010d7e:	9c02      	ldr	r4, [sp, #8]
10010d80:	7823      	ldrb	r3, [r4, #0]
10010d82:	2b00      	cmp	r3, #0
10010d84:	d104      	bne.n	10010d90 <_vfiprintf_r+0xe0>
10010d86:	9b02      	ldr	r3, [sp, #8]
10010d88:	1ae3      	subs	r3, r4, r3
10010d8a:	9304      	str	r3, [sp, #16]
10010d8c:	d012      	beq.n	10010db4 <_vfiprintf_r+0x104>
10010d8e:	e003      	b.n	10010d98 <_vfiprintf_r+0xe8>
10010d90:	2b25      	cmp	r3, #37	; 0x25
10010d92:	d0f8      	beq.n	10010d86 <_vfiprintf_r+0xd6>
10010d94:	3401      	adds	r4, #1
10010d96:	e7f3      	b.n	10010d80 <_vfiprintf_r+0xd0>
10010d98:	9b04      	ldr	r3, [sp, #16]
10010d9a:	9a02      	ldr	r2, [sp, #8]
10010d9c:	0039      	movs	r1, r7
10010d9e:	0030      	movs	r0, r6
10010da0:	f7ff ff73 	bl	10010c8a <__sfputs_r>
10010da4:	1c43      	adds	r3, r0, #1
10010da6:	d100      	bne.n	10010daa <_vfiprintf_r+0xfa>
10010da8:	e086      	b.n	10010eb8 <_vfiprintf_r+0x208>
10010daa:	696a      	ldr	r2, [r5, #20]
10010dac:	9b04      	ldr	r3, [sp, #16]
10010dae:	4694      	mov	ip, r2
10010db0:	4463      	add	r3, ip
10010db2:	616b      	str	r3, [r5, #20]
10010db4:	7823      	ldrb	r3, [r4, #0]
10010db6:	2b00      	cmp	r3, #0
10010db8:	d07e      	beq.n	10010eb8 <_vfiprintf_r+0x208>
10010dba:	2201      	movs	r2, #1
10010dbc:	2300      	movs	r3, #0
10010dbe:	4252      	negs	r2, r2
10010dc0:	606a      	str	r2, [r5, #4]
10010dc2:	a902      	add	r1, sp, #8
10010dc4:	3254      	adds	r2, #84	; 0x54
10010dc6:	1852      	adds	r2, r2, r1
10010dc8:	3401      	adds	r4, #1
10010dca:	602b      	str	r3, [r5, #0]
10010dcc:	60eb      	str	r3, [r5, #12]
10010dce:	60ab      	str	r3, [r5, #8]
10010dd0:	7013      	strb	r3, [r2, #0]
10010dd2:	65ab      	str	r3, [r5, #88]	; 0x58
10010dd4:	7821      	ldrb	r1, [r4, #0]
10010dd6:	2205      	movs	r2, #5
10010dd8:	4841      	ldr	r0, [pc, #260]	; (10010ee0 <_vfiprintf_r+0x230>)
10010dda:	f000 fb07 	bl	100113ec <memchr>
10010dde:	2800      	cmp	r0, #0
10010de0:	d008      	beq.n	10010df4 <_vfiprintf_r+0x144>
10010de2:	4b3f      	ldr	r3, [pc, #252]	; (10010ee0 <_vfiprintf_r+0x230>)
10010de4:	682a      	ldr	r2, [r5, #0]
10010de6:	1ac0      	subs	r0, r0, r3
10010de8:	2301      	movs	r3, #1
10010dea:	4083      	lsls	r3, r0
10010dec:	4313      	orrs	r3, r2
10010dee:	602b      	str	r3, [r5, #0]
10010df0:	3401      	adds	r4, #1
10010df2:	e7ef      	b.n	10010dd4 <_vfiprintf_r+0x124>
10010df4:	682b      	ldr	r3, [r5, #0]
10010df6:	06da      	lsls	r2, r3, #27
10010df8:	d504      	bpl.n	10010e04 <_vfiprintf_r+0x154>
10010dfa:	2253      	movs	r2, #83	; 0x53
10010dfc:	2120      	movs	r1, #32
10010dfe:	a802      	add	r0, sp, #8
10010e00:	1812      	adds	r2, r2, r0
10010e02:	7011      	strb	r1, [r2, #0]
10010e04:	071a      	lsls	r2, r3, #28
10010e06:	d504      	bpl.n	10010e12 <_vfiprintf_r+0x162>
10010e08:	2253      	movs	r2, #83	; 0x53
10010e0a:	212b      	movs	r1, #43	; 0x2b
10010e0c:	a802      	add	r0, sp, #8
10010e0e:	1812      	adds	r2, r2, r0
10010e10:	7011      	strb	r1, [r2, #0]
10010e12:	7822      	ldrb	r2, [r4, #0]
10010e14:	2a2a      	cmp	r2, #42	; 0x2a
10010e16:	d100      	bne.n	10010e1a <_vfiprintf_r+0x16a>
10010e18:	e77c      	b.n	10010d14 <_vfiprintf_r+0x64>
10010e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010e1c:	2000      	movs	r0, #0
10010e1e:	210a      	movs	r1, #10
10010e20:	e005      	b.n	10010e2e <_vfiprintf_r+0x17e>
10010e22:	4252      	negs	r2, r2
10010e24:	60ea      	str	r2, [r5, #12]
10010e26:	2202      	movs	r2, #2
10010e28:	4313      	orrs	r3, r2
10010e2a:	602b      	str	r3, [r5, #0]
10010e2c:	e77a      	b.n	10010d24 <_vfiprintf_r+0x74>
10010e2e:	7822      	ldrb	r2, [r4, #0]
10010e30:	3a30      	subs	r2, #48	; 0x30
10010e32:	2a09      	cmp	r2, #9
10010e34:	d804      	bhi.n	10010e40 <_vfiprintf_r+0x190>
10010e36:	434b      	muls	r3, r1
10010e38:	3401      	adds	r4, #1
10010e3a:	189b      	adds	r3, r3, r2
10010e3c:	2001      	movs	r0, #1
10010e3e:	e7f6      	b.n	10010e2e <_vfiprintf_r+0x17e>
10010e40:	2800      	cmp	r0, #0
10010e42:	d100      	bne.n	10010e46 <_vfiprintf_r+0x196>
10010e44:	e76f      	b.n	10010d26 <_vfiprintf_r+0x76>
10010e46:	9309      	str	r3, [sp, #36]	; 0x24
10010e48:	e76d      	b.n	10010d26 <_vfiprintf_r+0x76>
10010e4a:	7863      	ldrb	r3, [r4, #1]
10010e4c:	2b2a      	cmp	r3, #42	; 0x2a
10010e4e:	d10a      	bne.n	10010e66 <_vfiprintf_r+0x1b6>
10010e50:	9b05      	ldr	r3, [sp, #20]
10010e52:	3402      	adds	r4, #2
10010e54:	1d1a      	adds	r2, r3, #4
10010e56:	681b      	ldr	r3, [r3, #0]
10010e58:	9205      	str	r2, [sp, #20]
10010e5a:	2b00      	cmp	r3, #0
10010e5c:	da01      	bge.n	10010e62 <_vfiprintf_r+0x1b2>
10010e5e:	2301      	movs	r3, #1
10010e60:	425b      	negs	r3, r3
10010e62:	9307      	str	r3, [sp, #28]
10010e64:	e763      	b.n	10010d2e <_vfiprintf_r+0x7e>
10010e66:	2300      	movs	r3, #0
10010e68:	200a      	movs	r0, #10
10010e6a:	001a      	movs	r2, r3
10010e6c:	3401      	adds	r4, #1
10010e6e:	606b      	str	r3, [r5, #4]
10010e70:	7821      	ldrb	r1, [r4, #0]
10010e72:	3930      	subs	r1, #48	; 0x30
10010e74:	2909      	cmp	r1, #9
10010e76:	d804      	bhi.n	10010e82 <_vfiprintf_r+0x1d2>
10010e78:	4342      	muls	r2, r0
10010e7a:	3401      	adds	r4, #1
10010e7c:	1852      	adds	r2, r2, r1
10010e7e:	2301      	movs	r3, #1
10010e80:	e7f6      	b.n	10010e70 <_vfiprintf_r+0x1c0>
10010e82:	2b00      	cmp	r3, #0
10010e84:	d100      	bne.n	10010e88 <_vfiprintf_r+0x1d8>
10010e86:	e752      	b.n	10010d2e <_vfiprintf_r+0x7e>
10010e88:	9207      	str	r2, [sp, #28]
10010e8a:	e750      	b.n	10010d2e <_vfiprintf_r+0x7e>
10010e8c:	ab05      	add	r3, sp, #20
10010e8e:	9300      	str	r3, [sp, #0]
10010e90:	003a      	movs	r2, r7
10010e92:	4b14      	ldr	r3, [pc, #80]	; (10010ee4 <_vfiprintf_r+0x234>)
10010e94:	0029      	movs	r1, r5
10010e96:	0030      	movs	r0, r6
10010e98:	e000      	b.n	10010e9c <_vfiprintf_r+0x1ec>
10010e9a:	bf00      	nop
10010e9c:	e007      	b.n	10010eae <_vfiprintf_r+0x1fe>
10010e9e:	ab05      	add	r3, sp, #20
10010ea0:	9300      	str	r3, [sp, #0]
10010ea2:	003a      	movs	r2, r7
10010ea4:	4b0f      	ldr	r3, [pc, #60]	; (10010ee4 <_vfiprintf_r+0x234>)
10010ea6:	0029      	movs	r1, r5
10010ea8:	0030      	movs	r0, r6
10010eaa:	f000 f88b 	bl	10010fc4 <_printf_i>
10010eae:	9003      	str	r0, [sp, #12]
10010eb0:	9b03      	ldr	r3, [sp, #12]
10010eb2:	3301      	adds	r3, #1
10010eb4:	d000      	beq.n	10010eb8 <_vfiprintf_r+0x208>
10010eb6:	e75e      	b.n	10010d76 <_vfiprintf_r+0xc6>
10010eb8:	89bb      	ldrh	r3, [r7, #12]
10010eba:	065b      	lsls	r3, r3, #25
10010ebc:	d500      	bpl.n	10010ec0 <_vfiprintf_r+0x210>
10010ebe:	e726      	b.n	10010d0e <_vfiprintf_r+0x5e>
10010ec0:	980b      	ldr	r0, [sp, #44]	; 0x2c
10010ec2:	b01f      	add	sp, #124	; 0x7c
10010ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ec6:	46c0      	nop			; (mov r8, r8)
10010ec8:	10012e04 	.word	0x10012e04
10010ecc:	10012e24 	.word	0x10012e24
10010ed0:	10012e44 	.word	0x10012e44
10010ed4:	10012e6a 	.word	0x10012e6a
10010ed8:	10012e6e 	.word	0x10012e6e
10010edc:	00000000 	.word	0x00000000
10010ee0:	10012e64 	.word	0x10012e64
10010ee4:	10010c8b 	.word	0x10010c8b

10010ee8 <_printf_common>:
10010ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010eea:	0017      	movs	r7, r2
10010eec:	9301      	str	r3, [sp, #4]
10010eee:	688a      	ldr	r2, [r1, #8]
10010ef0:	690b      	ldr	r3, [r1, #16]
10010ef2:	9000      	str	r0, [sp, #0]
10010ef4:	000c      	movs	r4, r1
10010ef6:	4293      	cmp	r3, r2
10010ef8:	da00      	bge.n	10010efc <_printf_common+0x14>
10010efa:	0013      	movs	r3, r2
10010efc:	0022      	movs	r2, r4
10010efe:	603b      	str	r3, [r7, #0]
10010f00:	3243      	adds	r2, #67	; 0x43
10010f02:	7812      	ldrb	r2, [r2, #0]
10010f04:	2a00      	cmp	r2, #0
10010f06:	d001      	beq.n	10010f0c <_printf_common+0x24>
10010f08:	3301      	adds	r3, #1
10010f0a:	603b      	str	r3, [r7, #0]
10010f0c:	6823      	ldr	r3, [r4, #0]
10010f0e:	069b      	lsls	r3, r3, #26
10010f10:	d502      	bpl.n	10010f18 <_printf_common+0x30>
10010f12:	683b      	ldr	r3, [r7, #0]
10010f14:	3302      	adds	r3, #2
10010f16:	603b      	str	r3, [r7, #0]
10010f18:	2506      	movs	r5, #6
10010f1a:	6823      	ldr	r3, [r4, #0]
10010f1c:	401d      	ands	r5, r3
10010f1e:	d01e      	beq.n	10010f5e <_printf_common+0x76>
10010f20:	0023      	movs	r3, r4
10010f22:	3343      	adds	r3, #67	; 0x43
10010f24:	781b      	ldrb	r3, [r3, #0]
10010f26:	1e5a      	subs	r2, r3, #1
10010f28:	4193      	sbcs	r3, r2
10010f2a:	6822      	ldr	r2, [r4, #0]
10010f2c:	0692      	lsls	r2, r2, #26
10010f2e:	d51c      	bpl.n	10010f6a <_printf_common+0x82>
10010f30:	2030      	movs	r0, #48	; 0x30
10010f32:	18e1      	adds	r1, r4, r3
10010f34:	3143      	adds	r1, #67	; 0x43
10010f36:	7008      	strb	r0, [r1, #0]
10010f38:	0021      	movs	r1, r4
10010f3a:	1c5a      	adds	r2, r3, #1
10010f3c:	3145      	adds	r1, #69	; 0x45
10010f3e:	7809      	ldrb	r1, [r1, #0]
10010f40:	18a2      	adds	r2, r4, r2
10010f42:	3243      	adds	r2, #67	; 0x43
10010f44:	3302      	adds	r3, #2
10010f46:	7011      	strb	r1, [r2, #0]
10010f48:	e00f      	b.n	10010f6a <_printf_common+0x82>
10010f4a:	0022      	movs	r2, r4
10010f4c:	2301      	movs	r3, #1
10010f4e:	3219      	adds	r2, #25
10010f50:	9901      	ldr	r1, [sp, #4]
10010f52:	9800      	ldr	r0, [sp, #0]
10010f54:	9e08      	ldr	r6, [sp, #32]
10010f56:	47b0      	blx	r6
10010f58:	1c43      	adds	r3, r0, #1
10010f5a:	d00e      	beq.n	10010f7a <_printf_common+0x92>
10010f5c:	3501      	adds	r5, #1
10010f5e:	68e3      	ldr	r3, [r4, #12]
10010f60:	683a      	ldr	r2, [r7, #0]
10010f62:	1a9b      	subs	r3, r3, r2
10010f64:	429d      	cmp	r5, r3
10010f66:	dbf0      	blt.n	10010f4a <_printf_common+0x62>
10010f68:	e7da      	b.n	10010f20 <_printf_common+0x38>
10010f6a:	0022      	movs	r2, r4
10010f6c:	9901      	ldr	r1, [sp, #4]
10010f6e:	3243      	adds	r2, #67	; 0x43
10010f70:	9800      	ldr	r0, [sp, #0]
10010f72:	9d08      	ldr	r5, [sp, #32]
10010f74:	47a8      	blx	r5
10010f76:	1c43      	adds	r3, r0, #1
10010f78:	d102      	bne.n	10010f80 <_printf_common+0x98>
10010f7a:	2001      	movs	r0, #1
10010f7c:	4240      	negs	r0, r0
10010f7e:	e020      	b.n	10010fc2 <_printf_common+0xda>
10010f80:	2306      	movs	r3, #6
10010f82:	6820      	ldr	r0, [r4, #0]
10010f84:	68e1      	ldr	r1, [r4, #12]
10010f86:	683a      	ldr	r2, [r7, #0]
10010f88:	4003      	ands	r3, r0
10010f8a:	2500      	movs	r5, #0
10010f8c:	2b04      	cmp	r3, #4
10010f8e:	d103      	bne.n	10010f98 <_printf_common+0xb0>
10010f90:	1a8d      	subs	r5, r1, r2
10010f92:	43eb      	mvns	r3, r5
10010f94:	17db      	asrs	r3, r3, #31
10010f96:	401d      	ands	r5, r3
10010f98:	68a3      	ldr	r3, [r4, #8]
10010f9a:	6922      	ldr	r2, [r4, #16]
10010f9c:	4293      	cmp	r3, r2
10010f9e:	dd01      	ble.n	10010fa4 <_printf_common+0xbc>
10010fa0:	1a9b      	subs	r3, r3, r2
10010fa2:	18ed      	adds	r5, r5, r3
10010fa4:	2700      	movs	r7, #0
10010fa6:	42bd      	cmp	r5, r7
10010fa8:	d00a      	beq.n	10010fc0 <_printf_common+0xd8>
10010faa:	0022      	movs	r2, r4
10010fac:	2301      	movs	r3, #1
10010fae:	321a      	adds	r2, #26
10010fb0:	9901      	ldr	r1, [sp, #4]
10010fb2:	9800      	ldr	r0, [sp, #0]
10010fb4:	9e08      	ldr	r6, [sp, #32]
10010fb6:	47b0      	blx	r6
10010fb8:	1c43      	adds	r3, r0, #1
10010fba:	d0de      	beq.n	10010f7a <_printf_common+0x92>
10010fbc:	3701      	adds	r7, #1
10010fbe:	e7f2      	b.n	10010fa6 <_printf_common+0xbe>
10010fc0:	2000      	movs	r0, #0
10010fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010fc4 <_printf_i>:
10010fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fc6:	b08b      	sub	sp, #44	; 0x2c
10010fc8:	9206      	str	r2, [sp, #24]
10010fca:	000a      	movs	r2, r1
10010fcc:	3243      	adds	r2, #67	; 0x43
10010fce:	9307      	str	r3, [sp, #28]
10010fd0:	9005      	str	r0, [sp, #20]
10010fd2:	9204      	str	r2, [sp, #16]
10010fd4:	7e0a      	ldrb	r2, [r1, #24]
10010fd6:	000c      	movs	r4, r1
10010fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010fda:	2a6e      	cmp	r2, #110	; 0x6e
10010fdc:	d100      	bne.n	10010fe0 <_printf_i+0x1c>
10010fde:	e0ab      	b.n	10011138 <_printf_i+0x174>
10010fe0:	d811      	bhi.n	10011006 <_printf_i+0x42>
10010fe2:	2a63      	cmp	r2, #99	; 0x63
10010fe4:	d022      	beq.n	1001102c <_printf_i+0x68>
10010fe6:	d809      	bhi.n	10010ffc <_printf_i+0x38>
10010fe8:	2a00      	cmp	r2, #0
10010fea:	d100      	bne.n	10010fee <_printf_i+0x2a>
10010fec:	e0b5      	b.n	1001115a <_printf_i+0x196>
10010fee:	2a58      	cmp	r2, #88	; 0x58
10010ff0:	d000      	beq.n	10010ff4 <_printf_i+0x30>
10010ff2:	e0c5      	b.n	10011180 <_printf_i+0x1bc>
10010ff4:	3145      	adds	r1, #69	; 0x45
10010ff6:	700a      	strb	r2, [r1, #0]
10010ff8:	4a81      	ldr	r2, [pc, #516]	; (10011200 <_printf_i+0x23c>)
10010ffa:	e04f      	b.n	1001109c <_printf_i+0xd8>
10010ffc:	2a64      	cmp	r2, #100	; 0x64
10010ffe:	d01d      	beq.n	1001103c <_printf_i+0x78>
10011000:	2a69      	cmp	r2, #105	; 0x69
10011002:	d01b      	beq.n	1001103c <_printf_i+0x78>
10011004:	e0bc      	b.n	10011180 <_printf_i+0x1bc>
10011006:	2a73      	cmp	r2, #115	; 0x73
10011008:	d100      	bne.n	1001100c <_printf_i+0x48>
1001100a:	e0aa      	b.n	10011162 <_printf_i+0x19e>
1001100c:	d809      	bhi.n	10011022 <_printf_i+0x5e>
1001100e:	2a6f      	cmp	r2, #111	; 0x6f
10011010:	d029      	beq.n	10011066 <_printf_i+0xa2>
10011012:	2a70      	cmp	r2, #112	; 0x70
10011014:	d000      	beq.n	10011018 <_printf_i+0x54>
10011016:	e0b3      	b.n	10011180 <_printf_i+0x1bc>
10011018:	2220      	movs	r2, #32
1001101a:	6809      	ldr	r1, [r1, #0]
1001101c:	430a      	orrs	r2, r1
1001101e:	6022      	str	r2, [r4, #0]
10011020:	e037      	b.n	10011092 <_printf_i+0xce>
10011022:	2a75      	cmp	r2, #117	; 0x75
10011024:	d01f      	beq.n	10011066 <_printf_i+0xa2>
10011026:	2a78      	cmp	r2, #120	; 0x78
10011028:	d033      	beq.n	10011092 <_printf_i+0xce>
1001102a:	e0a9      	b.n	10011180 <_printf_i+0x1bc>
1001102c:	000e      	movs	r6, r1
1001102e:	681a      	ldr	r2, [r3, #0]
10011030:	3642      	adds	r6, #66	; 0x42
10011032:	1d11      	adds	r1, r2, #4
10011034:	6019      	str	r1, [r3, #0]
10011036:	6813      	ldr	r3, [r2, #0]
10011038:	7033      	strb	r3, [r6, #0]
1001103a:	e0a4      	b.n	10011186 <_printf_i+0x1c2>
1001103c:	6821      	ldr	r1, [r4, #0]
1001103e:	681a      	ldr	r2, [r3, #0]
10011040:	0608      	lsls	r0, r1, #24
10011042:	d406      	bmi.n	10011052 <_printf_i+0x8e>
10011044:	0649      	lsls	r1, r1, #25
10011046:	d504      	bpl.n	10011052 <_printf_i+0x8e>
10011048:	1d11      	adds	r1, r2, #4
1001104a:	6019      	str	r1, [r3, #0]
1001104c:	2300      	movs	r3, #0
1001104e:	5ed5      	ldrsh	r5, [r2, r3]
10011050:	e002      	b.n	10011058 <_printf_i+0x94>
10011052:	1d11      	adds	r1, r2, #4
10011054:	6019      	str	r1, [r3, #0]
10011056:	6815      	ldr	r5, [r2, #0]
10011058:	2d00      	cmp	r5, #0
1001105a:	da3b      	bge.n	100110d4 <_printf_i+0x110>
1001105c:	232d      	movs	r3, #45	; 0x2d
1001105e:	9a04      	ldr	r2, [sp, #16]
10011060:	426d      	negs	r5, r5
10011062:	7013      	strb	r3, [r2, #0]
10011064:	e036      	b.n	100110d4 <_printf_i+0x110>
10011066:	6821      	ldr	r1, [r4, #0]
10011068:	681a      	ldr	r2, [r3, #0]
1001106a:	0608      	lsls	r0, r1, #24
1001106c:	d406      	bmi.n	1001107c <_printf_i+0xb8>
1001106e:	0649      	lsls	r1, r1, #25
10011070:	d504      	bpl.n	1001107c <_printf_i+0xb8>
10011072:	6815      	ldr	r5, [r2, #0]
10011074:	1d11      	adds	r1, r2, #4
10011076:	6019      	str	r1, [r3, #0]
10011078:	b2ad      	uxth	r5, r5
1001107a:	e002      	b.n	10011082 <_printf_i+0xbe>
1001107c:	1d11      	adds	r1, r2, #4
1001107e:	6019      	str	r1, [r3, #0]
10011080:	6815      	ldr	r5, [r2, #0]
10011082:	4b5f      	ldr	r3, [pc, #380]	; (10011200 <_printf_i+0x23c>)
10011084:	7e22      	ldrb	r2, [r4, #24]
10011086:	9303      	str	r3, [sp, #12]
10011088:	2708      	movs	r7, #8
1001108a:	2a6f      	cmp	r2, #111	; 0x6f
1001108c:	d01d      	beq.n	100110ca <_printf_i+0x106>
1001108e:	270a      	movs	r7, #10
10011090:	e01b      	b.n	100110ca <_printf_i+0x106>
10011092:	0022      	movs	r2, r4
10011094:	2178      	movs	r1, #120	; 0x78
10011096:	3245      	adds	r2, #69	; 0x45
10011098:	7011      	strb	r1, [r2, #0]
1001109a:	4a5a      	ldr	r2, [pc, #360]	; (10011204 <_printf_i+0x240>)
1001109c:	6819      	ldr	r1, [r3, #0]
1001109e:	9203      	str	r2, [sp, #12]
100110a0:	1d08      	adds	r0, r1, #4
100110a2:	6822      	ldr	r2, [r4, #0]
100110a4:	6018      	str	r0, [r3, #0]
100110a6:	680d      	ldr	r5, [r1, #0]
100110a8:	0610      	lsls	r0, r2, #24
100110aa:	d402      	bmi.n	100110b2 <_printf_i+0xee>
100110ac:	0650      	lsls	r0, r2, #25
100110ae:	d500      	bpl.n	100110b2 <_printf_i+0xee>
100110b0:	b2ad      	uxth	r5, r5
100110b2:	07d3      	lsls	r3, r2, #31
100110b4:	d502      	bpl.n	100110bc <_printf_i+0xf8>
100110b6:	2320      	movs	r3, #32
100110b8:	431a      	orrs	r2, r3
100110ba:	6022      	str	r2, [r4, #0]
100110bc:	2710      	movs	r7, #16
100110be:	2d00      	cmp	r5, #0
100110c0:	d103      	bne.n	100110ca <_printf_i+0x106>
100110c2:	2320      	movs	r3, #32
100110c4:	6822      	ldr	r2, [r4, #0]
100110c6:	439a      	bics	r2, r3
100110c8:	6022      	str	r2, [r4, #0]
100110ca:	0023      	movs	r3, r4
100110cc:	2200      	movs	r2, #0
100110ce:	3343      	adds	r3, #67	; 0x43
100110d0:	701a      	strb	r2, [r3, #0]
100110d2:	e002      	b.n	100110da <_printf_i+0x116>
100110d4:	270a      	movs	r7, #10
100110d6:	4b4a      	ldr	r3, [pc, #296]	; (10011200 <_printf_i+0x23c>)
100110d8:	9303      	str	r3, [sp, #12]
100110da:	6863      	ldr	r3, [r4, #4]
100110dc:	60a3      	str	r3, [r4, #8]
100110de:	2b00      	cmp	r3, #0
100110e0:	db09      	blt.n	100110f6 <_printf_i+0x132>
100110e2:	2204      	movs	r2, #4
100110e4:	6821      	ldr	r1, [r4, #0]
100110e6:	4391      	bics	r1, r2
100110e8:	6021      	str	r1, [r4, #0]
100110ea:	2d00      	cmp	r5, #0
100110ec:	d105      	bne.n	100110fa <_printf_i+0x136>
100110ee:	9e04      	ldr	r6, [sp, #16]
100110f0:	2b00      	cmp	r3, #0
100110f2:	d011      	beq.n	10011118 <_printf_i+0x154>
100110f4:	e07b      	b.n	100111ee <_printf_i+0x22a>
100110f6:	2d00      	cmp	r5, #0
100110f8:	d079      	beq.n	100111ee <_printf_i+0x22a>
100110fa:	9e04      	ldr	r6, [sp, #16]
100110fc:	0028      	movs	r0, r5
100110fe:	0039      	movs	r1, r7
10011100:	f7fe f8ae 	bl	1000f260 <__aeabi_uidivmod>
10011104:	9b03      	ldr	r3, [sp, #12]
10011106:	3e01      	subs	r6, #1
10011108:	5c5b      	ldrb	r3, [r3, r1]
1001110a:	0028      	movs	r0, r5
1001110c:	7033      	strb	r3, [r6, #0]
1001110e:	0039      	movs	r1, r7
10011110:	f7fe f820 	bl	1000f154 <__aeabi_uidiv>
10011114:	1e05      	subs	r5, r0, #0
10011116:	d1f1      	bne.n	100110fc <_printf_i+0x138>
10011118:	2f08      	cmp	r7, #8
1001111a:	d109      	bne.n	10011130 <_printf_i+0x16c>
1001111c:	6823      	ldr	r3, [r4, #0]
1001111e:	07db      	lsls	r3, r3, #31
10011120:	d506      	bpl.n	10011130 <_printf_i+0x16c>
10011122:	6863      	ldr	r3, [r4, #4]
10011124:	6922      	ldr	r2, [r4, #16]
10011126:	4293      	cmp	r3, r2
10011128:	dc02      	bgt.n	10011130 <_printf_i+0x16c>
1001112a:	2330      	movs	r3, #48	; 0x30
1001112c:	3e01      	subs	r6, #1
1001112e:	7033      	strb	r3, [r6, #0]
10011130:	9b04      	ldr	r3, [sp, #16]
10011132:	1b9b      	subs	r3, r3, r6
10011134:	6123      	str	r3, [r4, #16]
10011136:	e02b      	b.n	10011190 <_printf_i+0x1cc>
10011138:	6809      	ldr	r1, [r1, #0]
1001113a:	681a      	ldr	r2, [r3, #0]
1001113c:	0608      	lsls	r0, r1, #24
1001113e:	d407      	bmi.n	10011150 <_printf_i+0x18c>
10011140:	0649      	lsls	r1, r1, #25
10011142:	d505      	bpl.n	10011150 <_printf_i+0x18c>
10011144:	1d11      	adds	r1, r2, #4
10011146:	6019      	str	r1, [r3, #0]
10011148:	6813      	ldr	r3, [r2, #0]
1001114a:	8aa2      	ldrh	r2, [r4, #20]
1001114c:	801a      	strh	r2, [r3, #0]
1001114e:	e004      	b.n	1001115a <_printf_i+0x196>
10011150:	1d11      	adds	r1, r2, #4
10011152:	6019      	str	r1, [r3, #0]
10011154:	6813      	ldr	r3, [r2, #0]
10011156:	6962      	ldr	r2, [r4, #20]
10011158:	601a      	str	r2, [r3, #0]
1001115a:	2300      	movs	r3, #0
1001115c:	9e04      	ldr	r6, [sp, #16]
1001115e:	6123      	str	r3, [r4, #16]
10011160:	e016      	b.n	10011190 <_printf_i+0x1cc>
10011162:	681a      	ldr	r2, [r3, #0]
10011164:	1d11      	adds	r1, r2, #4
10011166:	6019      	str	r1, [r3, #0]
10011168:	6816      	ldr	r6, [r2, #0]
1001116a:	2100      	movs	r1, #0
1001116c:	6862      	ldr	r2, [r4, #4]
1001116e:	0030      	movs	r0, r6
10011170:	f000 f93c 	bl	100113ec <memchr>
10011174:	2800      	cmp	r0, #0
10011176:	d001      	beq.n	1001117c <_printf_i+0x1b8>
10011178:	1b80      	subs	r0, r0, r6
1001117a:	6060      	str	r0, [r4, #4]
1001117c:	6863      	ldr	r3, [r4, #4]
1001117e:	e003      	b.n	10011188 <_printf_i+0x1c4>
10011180:	0026      	movs	r6, r4
10011182:	3642      	adds	r6, #66	; 0x42
10011184:	7032      	strb	r2, [r6, #0]
10011186:	2301      	movs	r3, #1
10011188:	6123      	str	r3, [r4, #16]
1001118a:	2300      	movs	r3, #0
1001118c:	9a04      	ldr	r2, [sp, #16]
1001118e:	7013      	strb	r3, [r2, #0]
10011190:	9b07      	ldr	r3, [sp, #28]
10011192:	aa09      	add	r2, sp, #36	; 0x24
10011194:	9300      	str	r3, [sp, #0]
10011196:	0021      	movs	r1, r4
10011198:	9b06      	ldr	r3, [sp, #24]
1001119a:	9805      	ldr	r0, [sp, #20]
1001119c:	f7ff fea4 	bl	10010ee8 <_printf_common>
100111a0:	1c43      	adds	r3, r0, #1
100111a2:	d102      	bne.n	100111aa <_printf_i+0x1e6>
100111a4:	2001      	movs	r0, #1
100111a6:	4240      	negs	r0, r0
100111a8:	e027      	b.n	100111fa <_printf_i+0x236>
100111aa:	6923      	ldr	r3, [r4, #16]
100111ac:	0032      	movs	r2, r6
100111ae:	9906      	ldr	r1, [sp, #24]
100111b0:	9805      	ldr	r0, [sp, #20]
100111b2:	9d07      	ldr	r5, [sp, #28]
100111b4:	47a8      	blx	r5
100111b6:	1c43      	adds	r3, r0, #1
100111b8:	d0f4      	beq.n	100111a4 <_printf_i+0x1e0>
100111ba:	6823      	ldr	r3, [r4, #0]
100111bc:	2500      	movs	r5, #0
100111be:	079b      	lsls	r3, r3, #30
100111c0:	d40f      	bmi.n	100111e2 <_printf_i+0x21e>
100111c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100111c4:	68e0      	ldr	r0, [r4, #12]
100111c6:	4298      	cmp	r0, r3
100111c8:	da17      	bge.n	100111fa <_printf_i+0x236>
100111ca:	0018      	movs	r0, r3
100111cc:	e015      	b.n	100111fa <_printf_i+0x236>
100111ce:	0022      	movs	r2, r4
100111d0:	2301      	movs	r3, #1
100111d2:	3219      	adds	r2, #25
100111d4:	9906      	ldr	r1, [sp, #24]
100111d6:	9805      	ldr	r0, [sp, #20]
100111d8:	9e07      	ldr	r6, [sp, #28]
100111da:	47b0      	blx	r6
100111dc:	1c43      	adds	r3, r0, #1
100111de:	d0e1      	beq.n	100111a4 <_printf_i+0x1e0>
100111e0:	3501      	adds	r5, #1
100111e2:	68e3      	ldr	r3, [r4, #12]
100111e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100111e6:	1a9b      	subs	r3, r3, r2
100111e8:	429d      	cmp	r5, r3
100111ea:	dbf0      	blt.n	100111ce <_printf_i+0x20a>
100111ec:	e7e9      	b.n	100111c2 <_printf_i+0x1fe>
100111ee:	0026      	movs	r6, r4
100111f0:	9b03      	ldr	r3, [sp, #12]
100111f2:	3642      	adds	r6, #66	; 0x42
100111f4:	781b      	ldrb	r3, [r3, #0]
100111f6:	7033      	strb	r3, [r6, #0]
100111f8:	e78e      	b.n	10011118 <_printf_i+0x154>
100111fa:	b00b      	add	sp, #44	; 0x2c
100111fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111fe:	46c0      	nop			; (mov r8, r8)
10011200:	10012e75 	.word	0x10012e75
10011204:	10012e86 	.word	0x10012e86

10011208 <_putc_r>:
10011208:	b570      	push	{r4, r5, r6, lr}
1001120a:	0006      	movs	r6, r0
1001120c:	000d      	movs	r5, r1
1001120e:	0014      	movs	r4, r2
10011210:	2800      	cmp	r0, #0
10011212:	d004      	beq.n	1001121e <_putc_r+0x16>
10011214:	6983      	ldr	r3, [r0, #24]
10011216:	2b00      	cmp	r3, #0
10011218:	d101      	bne.n	1001121e <_putc_r+0x16>
1001121a:	f7ff fb83 	bl	10010924 <__sinit>
1001121e:	4b12      	ldr	r3, [pc, #72]	; (10011268 <_putc_r+0x60>)
10011220:	429c      	cmp	r4, r3
10011222:	d101      	bne.n	10011228 <_putc_r+0x20>
10011224:	6874      	ldr	r4, [r6, #4]
10011226:	e008      	b.n	1001123a <_putc_r+0x32>
10011228:	4b10      	ldr	r3, [pc, #64]	; (1001126c <_putc_r+0x64>)
1001122a:	429c      	cmp	r4, r3
1001122c:	d101      	bne.n	10011232 <_putc_r+0x2a>
1001122e:	68b4      	ldr	r4, [r6, #8]
10011230:	e003      	b.n	1001123a <_putc_r+0x32>
10011232:	4b0f      	ldr	r3, [pc, #60]	; (10011270 <_putc_r+0x68>)
10011234:	429c      	cmp	r4, r3
10011236:	d100      	bne.n	1001123a <_putc_r+0x32>
10011238:	68f4      	ldr	r4, [r6, #12]
1001123a:	68a3      	ldr	r3, [r4, #8]
1001123c:	3b01      	subs	r3, #1
1001123e:	60a3      	str	r3, [r4, #8]
10011240:	2b00      	cmp	r3, #0
10011242:	da05      	bge.n	10011250 <_putc_r+0x48>
10011244:	69a2      	ldr	r2, [r4, #24]
10011246:	4293      	cmp	r3, r2
10011248:	db08      	blt.n	1001125c <_putc_r+0x54>
1001124a:	b2eb      	uxtb	r3, r5
1001124c:	2b0a      	cmp	r3, #10
1001124e:	d005      	beq.n	1001125c <_putc_r+0x54>
10011250:	6823      	ldr	r3, [r4, #0]
10011252:	b2e8      	uxtb	r0, r5
10011254:	1c5a      	adds	r2, r3, #1
10011256:	6022      	str	r2, [r4, #0]
10011258:	701d      	strb	r5, [r3, #0]
1001125a:	e004      	b.n	10011266 <_putc_r+0x5e>
1001125c:	0022      	movs	r2, r4
1001125e:	0029      	movs	r1, r5
10011260:	0030      	movs	r0, r6
10011262:	f7ff f99d 	bl	100105a0 <__swbuf_r>
10011266:	bd70      	pop	{r4, r5, r6, pc}
10011268:	10012e04 	.word	0x10012e04
1001126c:	10012e24 	.word	0x10012e24
10011270:	10012e44 	.word	0x10012e44

10011274 <_sbrk_r>:
10011274:	2300      	movs	r3, #0
10011276:	b570      	push	{r4, r5, r6, lr}
10011278:	4c06      	ldr	r4, [pc, #24]	; (10011294 <_sbrk_r+0x20>)
1001127a:	0005      	movs	r5, r0
1001127c:	0008      	movs	r0, r1
1001127e:	6023      	str	r3, [r4, #0]
10011280:	f7f8 fc5a 	bl	10009b38 <_sbrk>
10011284:	1c43      	adds	r3, r0, #1
10011286:	d103      	bne.n	10011290 <_sbrk_r+0x1c>
10011288:	6823      	ldr	r3, [r4, #0]
1001128a:	2b00      	cmp	r3, #0
1001128c:	d000      	beq.n	10011290 <_sbrk_r+0x1c>
1001128e:	602b      	str	r3, [r5, #0]
10011290:	bd70      	pop	{r4, r5, r6, pc}
10011292:	46c0      	nop			; (mov r8, r8)
10011294:	100146ac 	.word	0x100146ac

10011298 <__sread>:
10011298:	b570      	push	{r4, r5, r6, lr}
1001129a:	000c      	movs	r4, r1
1001129c:	250e      	movs	r5, #14
1001129e:	5f49      	ldrsh	r1, [r1, r5]
100112a0:	f000 f8b0 	bl	10011404 <_read_r>
100112a4:	2800      	cmp	r0, #0
100112a6:	db03      	blt.n	100112b0 <__sread+0x18>
100112a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
100112aa:	181b      	adds	r3, r3, r0
100112ac:	6563      	str	r3, [r4, #84]	; 0x54
100112ae:	e003      	b.n	100112b8 <__sread+0x20>
100112b0:	89a2      	ldrh	r2, [r4, #12]
100112b2:	4b02      	ldr	r3, [pc, #8]	; (100112bc <__sread+0x24>)
100112b4:	4013      	ands	r3, r2
100112b6:	81a3      	strh	r3, [r4, #12]
100112b8:	bd70      	pop	{r4, r5, r6, pc}
100112ba:	46c0      	nop			; (mov r8, r8)
100112bc:	ffffefff 	.word	0xffffefff

100112c0 <__swrite>:
100112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100112c2:	001f      	movs	r7, r3
100112c4:	898b      	ldrh	r3, [r1, #12]
100112c6:	0005      	movs	r5, r0
100112c8:	000c      	movs	r4, r1
100112ca:	0016      	movs	r6, r2
100112cc:	05db      	lsls	r3, r3, #23
100112ce:	d505      	bpl.n	100112dc <__swrite+0x1c>
100112d0:	230e      	movs	r3, #14
100112d2:	5ec9      	ldrsh	r1, [r1, r3]
100112d4:	2200      	movs	r2, #0
100112d6:	2302      	movs	r3, #2
100112d8:	f000 f874 	bl	100113c4 <_lseek_r>
100112dc:	89a2      	ldrh	r2, [r4, #12]
100112de:	4b05      	ldr	r3, [pc, #20]	; (100112f4 <__swrite+0x34>)
100112e0:	0028      	movs	r0, r5
100112e2:	4013      	ands	r3, r2
100112e4:	81a3      	strh	r3, [r4, #12]
100112e6:	0032      	movs	r2, r6
100112e8:	230e      	movs	r3, #14
100112ea:	5ee1      	ldrsh	r1, [r4, r3]
100112ec:	003b      	movs	r3, r7
100112ee:	f000 f81f 	bl	10011330 <_write_r>
100112f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100112f4:	ffffefff 	.word	0xffffefff

100112f8 <__sseek>:
100112f8:	b570      	push	{r4, r5, r6, lr}
100112fa:	000c      	movs	r4, r1
100112fc:	250e      	movs	r5, #14
100112fe:	5f49      	ldrsh	r1, [r1, r5]
10011300:	f000 f860 	bl	100113c4 <_lseek_r>
10011304:	89a3      	ldrh	r3, [r4, #12]
10011306:	1c42      	adds	r2, r0, #1
10011308:	d103      	bne.n	10011312 <__sseek+0x1a>
1001130a:	4a05      	ldr	r2, [pc, #20]	; (10011320 <__sseek+0x28>)
1001130c:	4013      	ands	r3, r2
1001130e:	81a3      	strh	r3, [r4, #12]
10011310:	e004      	b.n	1001131c <__sseek+0x24>
10011312:	2280      	movs	r2, #128	; 0x80
10011314:	0152      	lsls	r2, r2, #5
10011316:	4313      	orrs	r3, r2
10011318:	81a3      	strh	r3, [r4, #12]
1001131a:	6560      	str	r0, [r4, #84]	; 0x54
1001131c:	bd70      	pop	{r4, r5, r6, pc}
1001131e:	46c0      	nop			; (mov r8, r8)
10011320:	ffffefff 	.word	0xffffefff

10011324 <__sclose>:
10011324:	b510      	push	{r4, lr}
10011326:	230e      	movs	r3, #14
10011328:	5ec9      	ldrsh	r1, [r1, r3]
1001132a:	f000 f815 	bl	10011358 <_close_r>
1001132e:	bd10      	pop	{r4, pc}

10011330 <_write_r>:
10011330:	b570      	push	{r4, r5, r6, lr}
10011332:	0005      	movs	r5, r0
10011334:	0008      	movs	r0, r1
10011336:	0011      	movs	r1, r2
10011338:	2200      	movs	r2, #0
1001133a:	4c06      	ldr	r4, [pc, #24]	; (10011354 <_write_r+0x24>)
1001133c:	6022      	str	r2, [r4, #0]
1001133e:	001a      	movs	r2, r3
10011340:	f7f8 fbd2 	bl	10009ae8 <_write>
10011344:	1c43      	adds	r3, r0, #1
10011346:	d103      	bne.n	10011350 <_write_r+0x20>
10011348:	6823      	ldr	r3, [r4, #0]
1001134a:	2b00      	cmp	r3, #0
1001134c:	d000      	beq.n	10011350 <_write_r+0x20>
1001134e:	602b      	str	r3, [r5, #0]
10011350:	bd70      	pop	{r4, r5, r6, pc}
10011352:	46c0      	nop			; (mov r8, r8)
10011354:	100146ac 	.word	0x100146ac

10011358 <_close_r>:
10011358:	2300      	movs	r3, #0
1001135a:	b570      	push	{r4, r5, r6, lr}
1001135c:	4c06      	ldr	r4, [pc, #24]	; (10011378 <_close_r+0x20>)
1001135e:	0005      	movs	r5, r0
10011360:	0008      	movs	r0, r1
10011362:	6023      	str	r3, [r4, #0]
10011364:	f7f8 fbfa 	bl	10009b5c <_close>
10011368:	1c43      	adds	r3, r0, #1
1001136a:	d103      	bne.n	10011374 <_close_r+0x1c>
1001136c:	6823      	ldr	r3, [r4, #0]
1001136e:	2b00      	cmp	r3, #0
10011370:	d000      	beq.n	10011374 <_close_r+0x1c>
10011372:	602b      	str	r3, [r5, #0]
10011374:	bd70      	pop	{r4, r5, r6, pc}
10011376:	46c0      	nop			; (mov r8, r8)
10011378:	100146ac 	.word	0x100146ac

1001137c <_fstat_r>:
1001137c:	2300      	movs	r3, #0
1001137e:	b570      	push	{r4, r5, r6, lr}
10011380:	4c06      	ldr	r4, [pc, #24]	; (1001139c <_fstat_r+0x20>)
10011382:	0005      	movs	r5, r0
10011384:	0008      	movs	r0, r1
10011386:	0011      	movs	r1, r2
10011388:	6023      	str	r3, [r4, #0]
1001138a:	f7f8 fbeb 	bl	10009b64 <_fstat>
1001138e:	1c43      	adds	r3, r0, #1
10011390:	d103      	bne.n	1001139a <_fstat_r+0x1e>
10011392:	6823      	ldr	r3, [r4, #0]
10011394:	2b00      	cmp	r3, #0
10011396:	d000      	beq.n	1001139a <_fstat_r+0x1e>
10011398:	602b      	str	r3, [r5, #0]
1001139a:	bd70      	pop	{r4, r5, r6, pc}
1001139c:	100146ac 	.word	0x100146ac

100113a0 <_isatty_r>:
100113a0:	2300      	movs	r3, #0
100113a2:	b570      	push	{r4, r5, r6, lr}
100113a4:	4c06      	ldr	r4, [pc, #24]	; (100113c0 <_isatty_r+0x20>)
100113a6:	0005      	movs	r5, r0
100113a8:	0008      	movs	r0, r1
100113aa:	6023      	str	r3, [r4, #0]
100113ac:	f7f8 fbe0 	bl	10009b70 <_isatty>
100113b0:	1c43      	adds	r3, r0, #1
100113b2:	d103      	bne.n	100113bc <_isatty_r+0x1c>
100113b4:	6823      	ldr	r3, [r4, #0]
100113b6:	2b00      	cmp	r3, #0
100113b8:	d000      	beq.n	100113bc <_isatty_r+0x1c>
100113ba:	602b      	str	r3, [r5, #0]
100113bc:	bd70      	pop	{r4, r5, r6, pc}
100113be:	46c0      	nop			; (mov r8, r8)
100113c0:	100146ac 	.word	0x100146ac

100113c4 <_lseek_r>:
100113c4:	b570      	push	{r4, r5, r6, lr}
100113c6:	0005      	movs	r5, r0
100113c8:	0008      	movs	r0, r1
100113ca:	0011      	movs	r1, r2
100113cc:	2200      	movs	r2, #0
100113ce:	4c06      	ldr	r4, [pc, #24]	; (100113e8 <_lseek_r+0x24>)
100113d0:	6022      	str	r2, [r4, #0]
100113d2:	001a      	movs	r2, r3
100113d4:	f7f8 fbce 	bl	10009b74 <_lseek>
100113d8:	1c43      	adds	r3, r0, #1
100113da:	d103      	bne.n	100113e4 <_lseek_r+0x20>
100113dc:	6823      	ldr	r3, [r4, #0]
100113de:	2b00      	cmp	r3, #0
100113e0:	d000      	beq.n	100113e4 <_lseek_r+0x20>
100113e2:	602b      	str	r3, [r5, #0]
100113e4:	bd70      	pop	{r4, r5, r6, pc}
100113e6:	46c0      	nop			; (mov r8, r8)
100113e8:	100146ac 	.word	0x100146ac

100113ec <memchr>:
100113ec:	b2c9      	uxtb	r1, r1
100113ee:	1882      	adds	r2, r0, r2
100113f0:	4290      	cmp	r0, r2
100113f2:	d004      	beq.n	100113fe <memchr+0x12>
100113f4:	7803      	ldrb	r3, [r0, #0]
100113f6:	428b      	cmp	r3, r1
100113f8:	d002      	beq.n	10011400 <memchr+0x14>
100113fa:	3001      	adds	r0, #1
100113fc:	e7f8      	b.n	100113f0 <memchr+0x4>
100113fe:	2000      	movs	r0, #0
10011400:	4770      	bx	lr
	...

10011404 <_read_r>:
10011404:	b570      	push	{r4, r5, r6, lr}
10011406:	0005      	movs	r5, r0
10011408:	0008      	movs	r0, r1
1001140a:	0011      	movs	r1, r2
1001140c:	2200      	movs	r2, #0
1001140e:	4c06      	ldr	r4, [pc, #24]	; (10011428 <_read_r+0x24>)
10011410:	6022      	str	r2, [r4, #0]
10011412:	001a      	movs	r2, r3
10011414:	f7f8 fb48 	bl	10009aa8 <_read>
10011418:	1c43      	adds	r3, r0, #1
1001141a:	d103      	bne.n	10011424 <_read_r+0x20>
1001141c:	6823      	ldr	r3, [r4, #0]
1001141e:	2b00      	cmp	r3, #0
10011420:	d000      	beq.n	10011424 <_read_r+0x20>
10011422:	602b      	str	r3, [r5, #0]
10011424:	bd70      	pop	{r4, r5, r6, pc}
10011426:	46c0      	nop			; (mov r8, r8)
10011428:	100146ac 	.word	0x100146ac

1001142c <__aeabi_lmul>:
1001142c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001142e:	464f      	mov	r7, r9
10011430:	4646      	mov	r6, r8
10011432:	b4c0      	push	{r6, r7}
10011434:	0416      	lsls	r6, r2, #16
10011436:	0c36      	lsrs	r6, r6, #16
10011438:	4699      	mov	r9, r3
1001143a:	0033      	movs	r3, r6
1001143c:	0405      	lsls	r5, r0, #16
1001143e:	0c2c      	lsrs	r4, r5, #16
10011440:	0c07      	lsrs	r7, r0, #16
10011442:	0c15      	lsrs	r5, r2, #16
10011444:	4363      	muls	r3, r4
10011446:	437e      	muls	r6, r7
10011448:	436f      	muls	r7, r5
1001144a:	4365      	muls	r5, r4
1001144c:	0c1c      	lsrs	r4, r3, #16
1001144e:	19ad      	adds	r5, r5, r6
10011450:	1964      	adds	r4, r4, r5
10011452:	469c      	mov	ip, r3
10011454:	42a6      	cmp	r6, r4
10011456:	d903      	bls.n	10011460 <__aeabi_lmul+0x34>
10011458:	2380      	movs	r3, #128	; 0x80
1001145a:	025b      	lsls	r3, r3, #9
1001145c:	4698      	mov	r8, r3
1001145e:	4447      	add	r7, r8
10011460:	4663      	mov	r3, ip
10011462:	0c25      	lsrs	r5, r4, #16
10011464:	19ef      	adds	r7, r5, r7
10011466:	041d      	lsls	r5, r3, #16
10011468:	464b      	mov	r3, r9
1001146a:	434a      	muls	r2, r1
1001146c:	4343      	muls	r3, r0
1001146e:	0c2d      	lsrs	r5, r5, #16
10011470:	0424      	lsls	r4, r4, #16
10011472:	1964      	adds	r4, r4, r5
10011474:	1899      	adds	r1, r3, r2
10011476:	19c9      	adds	r1, r1, r7
10011478:	0020      	movs	r0, r4
1001147a:	bc0c      	pop	{r2, r3}
1001147c:	4690      	mov	r8, r2
1001147e:	4699      	mov	r9, r3
10011480:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011482:	46c0      	nop			; (mov r8, r8)
10011484:	10008ad0 	.word	0x10008ad0
10011488:	10008ade 	.word	0x10008ade
1001148c:	10008aec 	.word	0x10008aec
10011490:	10008afa 	.word	0x10008afa
10011494:	10008b08 	.word	0x10008b08
10011498:	10008b16 	.word	0x10008b16
1001149c:	10008b24 	.word	0x10008b24
100114a0:	10008b34 	.word	0x10008b34
100114a4:	10008b44 	.word	0x10008b44
100114a8:	10008b54 	.word	0x10008b54
100114ac:	10008b64 	.word	0x10008b64
100114b0:	10008b74 	.word	0x10008b74
100114b4:	10008b84 	.word	0x10008b84
100114b8:	10008b94 	.word	0x10008b94
100114bc:	10008ba4 	.word	0x10008ba4
100114c0:	10008bb4 	.word	0x10008bb4
100114c4:	10008bc4 	.word	0x10008bc4
100114c8:	10008bd4 	.word	0x10008bd4
100114cc:	10008be4 	.word	0x10008be4
100114d0:	10008bf4 	.word	0x10008bf4
100114d4:	10008c04 	.word	0x10008c04
100114d8:	10008c14 	.word	0x10008c14
100114dc:	10008c24 	.word	0x10008c24
100114e0:	10008c34 	.word	0x10008c34
100114e4:	10008c44 	.word	0x10008c44
100114e8:	10008c54 	.word	0x10008c54
100114ec:	10008c64 	.word	0x10008c64
100114f0:	10008c74 	.word	0x10008c74
100114f4:	10008c82 	.word	0x10008c82
100114f8:	10008c90 	.word	0x10008c90
100114fc:	10008c9e 	.word	0x10008c9e
10011500:	10008cac 	.word	0x10008cac
10011504:	10008cba 	.word	0x10008cba
10011508:	10008cc8 	.word	0x10008cc8
1001150c:	10008cd6 	.word	0x10008cd6
10011510:	10008ce4 	.word	0x10008ce4
10011514:	10008cf4 	.word	0x10008cf4
10011518:	10008d04 	.word	0x10008d04
1001151c:	10008d14 	.word	0x10008d14
10011520:	10008d24 	.word	0x10008d24
10011524:	10008d34 	.word	0x10008d34
10011528:	10008d44 	.word	0x10008d44
1001152c:	10008d54 	.word	0x10008d54
10011530:	10008d64 	.word	0x10008d64
10011534:	10008d74 	.word	0x10008d74
10011538:	10008d84 	.word	0x10008d84
1001153c:	10008d94 	.word	0x10008d94
10011540:	10008da4 	.word	0x10008da4
10011544:	10008db4 	.word	0x10008db4
10011548:	10008dc4 	.word	0x10008dc4
1001154c:	10008dd4 	.word	0x10008dd4
10011550:	10008de4 	.word	0x10008de4
10011554:	10008df2 	.word	0x10008df2
10011558:	10008e00 	.word	0x10008e00
1001155c:	10008e2c 	.word	0x10008e2c
10011560:	10008e3a 	.word	0x10008e3a
10011564:	10008e48 	.word	0x10008e48
10011568:	10008e56 	.word	0x10008e56
1001156c:	10008e64 	.word	0x10008e64
10011570:	10008e72 	.word	0x10008e72
10011574:	10008e80 	.word	0x10008e80
10011578:	10008e8e 	.word	0x10008e8e
1001157c:	10008e9c 	.word	0x10008e9c
10011580:	10008eaa 	.word	0x10008eaa
10011584:	10008eb8 	.word	0x10008eb8
10011588:	10008ec6 	.word	0x10008ec6
1001158c:	10008ed4 	.word	0x10008ed4
10011590:	10008ee2 	.word	0x10008ee2
10011594:	10008ef0 	.word	0x10008ef0
10011598:	10008efe 	.word	0x10008efe
1001159c:	10008f0c 	.word	0x10008f0c
100115a0:	10008f1a 	.word	0x10008f1a
100115a4:	10008f28 	.word	0x10008f28
100115a8:	10008f36 	.word	0x10008f36
100115ac:	10008f44 	.word	0x10008f44
100115b0:	10008f52 	.word	0x10008f52
100115b4:	10008f60 	.word	0x10008f60
100115b8:	10008f6e 	.word	0x10008f6e
100115bc:	10008f7c 	.word	0x10008f7c
100115c0:	10008f8a 	.word	0x10008f8a
100115c4:	10008f98 	.word	0x10008f98
100115c8:	10008fa6 	.word	0x10008fa6
100115cc:	10008fb4 	.word	0x10008fb4
100115d0:	10008fc2 	.word	0x10008fc2
100115d4:	10008fd0 	.word	0x10008fd0
100115d8:	10008fde 	.word	0x10008fde
100115dc:	10008fec 	.word	0x10008fec
100115e0:	10008ffa 	.word	0x10008ffa
100115e4:	10009008 	.word	0x10009008
100115e8:	10009016 	.word	0x10009016
100115ec:	10009024 	.word	0x10009024
100115f0:	10009032 	.word	0x10009032
100115f4:	10009040 	.word	0x10009040
100115f8:	1000904e 	.word	0x1000904e
100115fc:	1000905c 	.word	0x1000905c
10011600:	1000906a 	.word	0x1000906a
10011604:	10009078 	.word	0x10009078
10011608:	10009086 	.word	0x10009086
1001160c:	10009094 	.word	0x10009094
10011610:	100090a2 	.word	0x100090a2
10011614:	100090b0 	.word	0x100090b0
10011618:	100090be 	.word	0x100090be
1001161c:	100090cc 	.word	0x100090cc
10011620:	100090da 	.word	0x100090da
10011624:	100090e8 	.word	0x100090e8
10011628:	100090f6 	.word	0x100090f6
1001162c:	10009104 	.word	0x10009104
10011630:	10009112 	.word	0x10009112
10011634:	100091ac 	.word	0x100091ac
10011638:	100091d4 	.word	0x100091d4
1001163c:	100091fc 	.word	0x100091fc
10011640:	10009224 	.word	0x10009224
10011644:	10009464 	.word	0x10009464
10011648:	10009254 	.word	0x10009254
1001164c:	1000926c 	.word	0x1000926c
10011650:	100092e4 	.word	0x100092e4
10011654:	100092fc 	.word	0x100092fc
10011658:	10009284 	.word	0x10009284
1001165c:	1000929c 	.word	0x1000929c
10011660:	100092b4 	.word	0x100092b4
10011664:	100092cc 	.word	0x100092cc
10011668:	10009314 	.word	0x10009314
1001166c:	100095d8 	.word	0x100095d8
10011670:	100095d8 	.word	0x100095d8
10011674:	100095d8 	.word	0x100095d8
10011678:	100095d8 	.word	0x100095d8
1001167c:	100095d8 	.word	0x100095d8
10011680:	100095d8 	.word	0x100095d8
10011684:	100095d8 	.word	0x100095d8
10011688:	100095d8 	.word	0x100095d8
1001168c:	100093bc 	.word	0x100093bc
10011690:	100093d4 	.word	0x100093d4
10011694:	100093ec 	.word	0x100093ec
10011698:	1000947a 	.word	0x1000947a
1001169c:	10009344 	.word	0x10009344
100116a0:	100095d8 	.word	0x100095d8
100116a4:	100095d8 	.word	0x100095d8
100116a8:	100095d8 	.word	0x100095d8
100116ac:	100095d8 	.word	0x100095d8
100116b0:	100095d8 	.word	0x100095d8
100116b4:	100095d8 	.word	0x100095d8
100116b8:	10009404 	.word	0x10009404
100116bc:	1000941c 	.word	0x1000941c
100116c0:	10009434 	.word	0x10009434
100116c4:	1000944c 	.word	0x1000944c
100116c8:	100095d8 	.word	0x100095d8
100116cc:	10009590 	.word	0x10009590
100116d0:	100095a8 	.word	0x100095a8
100116d4:	100095d8 	.word	0x100095d8
100116d8:	100095d8 	.word	0x100095d8
100116dc:	100094a6 	.word	0x100094a6
100116e0:	100094bc 	.word	0x100094bc
100116e4:	100094d2 	.word	0x100094d2
100116e8:	100094e8 	.word	0x100094e8
100116ec:	100095d8 	.word	0x100095d8
100116f0:	100095d8 	.word	0x100095d8
100116f4:	100095d8 	.word	0x100095d8
100116f8:	100095d8 	.word	0x100095d8
100116fc:	100095d8 	.word	0x100095d8
10011700:	100095d8 	.word	0x100095d8
10011704:	100095d8 	.word	0x100095d8
10011708:	100095d8 	.word	0x100095d8
1001170c:	10009198 	.word	0x10009198
10011710:	100091c0 	.word	0x100091c0
10011714:	100091e8 	.word	0x100091e8
10011718:	10009210 	.word	0x10009210
1001171c:	1000923c 	.word	0x1000923c
10011720:	1000932c 	.word	0x1000932c
10011724:	1000935c 	.word	0x1000935c
10011728:	10009374 	.word	0x10009374
1001172c:	1000938c 	.word	0x1000938c
10011730:	100093a4 	.word	0x100093a4
10011734:	10009490 	.word	0x10009490
10011738:	100094fe 	.word	0x100094fe
1001173c:	10009578 	.word	0x10009578
10011740:	100095c0 	.word	0x100095c0
10011744:	0000000d 	.word	0x0000000d
10011748:	6b6e696c 	.word	0x6b6e696c
1001174c:	736f6c20 	.word	0x736f6c20
10011750:	65732073 	.word	0x65732073
10011754:	63697672 	.word	0x63697672
10011758:	69642065 	.word	0x69642065
1001175c:	766f6373 	.word	0x766f6373
10011760:	64657265 	.word	0x64657265
10011764:	00000000 	.word	0x00000000
10011768:	656d6d49 	.word	0x656d6d49
1001176c:	74616964 	.word	0x74616964
10011770:	6c412065 	.word	0x6c412065
10011774:	20747265 	.word	0x20747265
10011778:	76726573 	.word	0x76726573
1001177c:	20656369 	.word	0x20656369
10011780:	63736964 	.word	0x63736964
10011784:	7265766f 	.word	0x7265766f
10011788:	00006465 	.word	0x00006465
1001178c:	70207854 	.word	0x70207854
10011790:	7265776f 	.word	0x7265776f
10011794:	72657320 	.word	0x72657320
10011798:	65636976 	.word	0x65636976
1001179c:	73696420 	.word	0x73696420
100117a0:	65766f63 	.word	0x65766f63
100117a4:	00646572 	.word	0x00646572
100117a8:	63736964 	.word	0x63736964
100117ac:	7265766f 	.word	0x7265766f
100117b0:	6d6f6320 	.word	0x6d6f6320
100117b4:	74656c70 	.word	0x74656c70
100117b8:	706f2065 	.word	0x706f2065
100117bc:	74617265 	.word	0x74617265
100117c0:	206e6f69 	.word	0x206e6f69
100117c4:	61206425 	.word	0x61206425
100117c8:	2520646e 	.word	0x2520646e
100117cc:	00000064 	.word	0x00000064
100117d0:	43207854 	.word	0x43207854
100117d4:	61726168 	.word	0x61726168
100117d8:	72657463 	.word	0x72657463
100117dc:	69747369 	.word	0x69747369
100117e0:	69442063 	.word	0x69442063
100117e4:	766f6373 	.word	0x766f6373
100117e8:	20797265 	.word	0x20797265
100117ec:	72617453 	.word	0x72617453
100117f0:	00646574 	.word	0x00646574
100117f4:	43207854 	.word	0x43207854
100117f8:	61726168 	.word	0x61726168
100117fc:	72657463 	.word	0x72657463
10011800:	69747369 	.word	0x69747369
10011804:	69442063 	.word	0x69442063
10011808:	766f6373 	.word	0x766f6373
1001180c:	20797265 	.word	0x20797265
10011810:	6c696146 	.word	0x6c696146
10011814:	00006465 	.word	0x00006465
10011818:	50207854 	.word	0x50207854
1001181c:	7265776f 	.word	0x7265776f
10011820:	72655320 	.word	0x72655320
10011824:	65636976 	.word	0x65636976
10011828:	746f6e20 	.word	0x746f6e20
1001182c:	756f4620 	.word	0x756f4620
10011830:	0000646e 	.word	0x0000646e
10011834:	6b6e694c 	.word	0x6b6e694c
10011838:	736f4c20 	.word	0x736f4c20
1001183c:	68432073 	.word	0x68432073
10011840:	63617261 	.word	0x63617261
10011844:	69726574 	.word	0x69726574
10011848:	63697473 	.word	0x63697473
1001184c:	73694420 	.word	0x73694420
10011850:	65766f63 	.word	0x65766f63
10011854:	53207972 	.word	0x53207972
10011858:	74726174 	.word	0x74726174
1001185c:	00006465 	.word	0x00006465
10011860:	6b6e694c 	.word	0x6b6e694c
10011864:	736f4c20 	.word	0x736f4c20
10011868:	68432073 	.word	0x68432073
1001186c:	63617261 	.word	0x63617261
10011870:	69726574 	.word	0x69726574
10011874:	63697473 	.word	0x63697473
10011878:	73694420 	.word	0x73694420
1001187c:	65766f63 	.word	0x65766f63
10011880:	46207972 	.word	0x46207972
10011884:	656c6961 	.word	0x656c6961
10011888:	00000064 	.word	0x00000064
1001188c:	6b6e694c 	.word	0x6b6e694c
10011890:	736f4c20 	.word	0x736f4c20
10011894:	65532073 	.word	0x65532073
10011898:	63697672 	.word	0x63697672
1001189c:	6f6e2065 	.word	0x6f6e2065
100118a0:	76412074 	.word	0x76412074
100118a4:	616c6961 	.word	0x616c6961
100118a8:	00656c62 	.word	0x00656c62
100118ac:	656d6d49 	.word	0x656d6d49
100118b0:	74616964 	.word	0x74616964
100118b4:	68432065 	.word	0x68432065
100118b8:	63617261 	.word	0x63617261
100118bc:	69726574 	.word	0x69726574
100118c0:	63697473 	.word	0x63697473
100118c4:	73694420 	.word	0x73694420
100118c8:	65766f63 	.word	0x65766f63
100118cc:	53207972 	.word	0x53207972
100118d0:	74726174 	.word	0x74726174
100118d4:	00006465 	.word	0x00006465
100118d8:	656d6d49 	.word	0x656d6d49
100118dc:	74616964 	.word	0x74616964
100118e0:	68432065 	.word	0x68432065
100118e4:	63617261 	.word	0x63617261
100118e8:	69726574 	.word	0x69726574
100118ec:	63697473 	.word	0x63697473
100118f0:	73694420 	.word	0x73694420
100118f4:	65766f63 	.word	0x65766f63
100118f8:	46207972 	.word	0x46207972
100118fc:	656c6961 	.word	0x656c6961
10011900:	00000064 	.word	0x00000064
10011904:	656d6d49 	.word	0x656d6d49
10011908:	74616964 	.word	0x74616964
1001190c:	6c412065 	.word	0x6c412065
10011910:	20747265 	.word	0x20747265
10011914:	76726553 	.word	0x76726553
10011918:	20656369 	.word	0x20656369
1001191c:	20746f6e 	.word	0x20746f6e
10011920:	69617641 	.word	0x69617641
10011924:	6c62616c 	.word	0x6c62616c
10011928:	00000065 	.word	0x00000065
1001192c:	584f5250 	.word	0x584f5250
10011930:	54494d49 	.word	0x54494d49
10011934:	52502059 	.word	0x52502059
10011938:	4c49464f 	.word	0x4c49464f
1001193c:	4f4e2045 	.word	0x4f4e2045
10011940:	55532054 	.word	0x55532054
10011944:	524f5050 	.word	0x524f5050
10011948:	00444554 	.word	0x00444554
1001194c:	54544147 	.word	0x54544147
10011950:	61686320 	.word	0x61686320
10011954:	74636172 	.word	0x74636172
10011958:	73697265 	.word	0x73697265
1001195c:	20636974 	.word	0x20636974
10011960:	63736964 	.word	0x63736964
10011964:	7265766f 	.word	0x7265766f
10011968:	6f632079 	.word	0x6f632079
1001196c:	656c706d 	.word	0x656c706d
10011970:	00646574 	.word	0x00646574
10011974:	6b6e694c 	.word	0x6b6e694c
10011978:	736f4c20 	.word	0x736f4c20
1001197c:	72772073 	.word	0x72772073
10011980:	20657469 	.word	0x20657469
10011984:	72616863 	.word	0x72616863
10011988:	65746361 	.word	0x65746361
1001198c:	74736972 	.word	0x74736972
10011990:	20736369 	.word	0x20736369
10011994:	6c696166 	.word	0x6c696166
10011998:	00006465 	.word	0x00006465
1001199c:	72616843 	.word	0x72616843
100119a0:	65746361 	.word	0x65746361
100119a4:	74736972 	.word	0x74736972
100119a8:	52206369 	.word	0x52206369
100119ac:	20646165 	.word	0x20646165
100119b0:	75716552 	.word	0x75716552
100119b4:	20747365 	.word	0x20747365
100119b8:	6c696166 	.word	0x6c696166
100119bc:	00006465 	.word	0x00006465
100119c0:	72617453 	.word	0x72617453
100119c4:	676e6974 	.word	0x676e6974
100119c8:	6d697420 	.word	0x6d697420
100119cc:	00007265 	.word	0x00007265
100119d0:	68676948 	.word	0x68676948
100119d4:	656c4120 	.word	0x656c4120
100119d8:	52207472 	.word	0x52207472
100119dc:	20495353 	.word	0x20495353
100119e0:	676e6172 	.word	0x676e6172
100119e4:	25203a65 	.word	0x25203a65
100119e8:	6d426464 	.word	0x6d426464
100119ec:	646e6120 	.word	0x646e6120
100119f0:	6f626120 	.word	0x6f626120
100119f4:	00006576 	.word	0x00006576
100119f8:	646c694d 	.word	0x646c694d
100119fc:	656c4120 	.word	0x656c4120
10011a00:	52207472 	.word	0x52207472
10011a04:	20495353 	.word	0x20495353
10011a08:	676e6172 	.word	0x676e6172
10011a0c:	25203a65 	.word	0x25203a65
10011a10:	6d426464 	.word	0x6d426464
10011a14:	206f7420 	.word	0x206f7420
10011a18:	42646425 	.word	0x42646425
10011a1c:	0000006d 	.word	0x0000006d
10011a20:	41206f4e 	.word	0x41206f4e
10011a24:	7472656c 	.word	0x7472656c
10011a28:	53535220 	.word	0x53535220
10011a2c:	61722049 	.word	0x61722049
10011a30:	3a65676e 	.word	0x3a65676e
10011a34:	25202020 	.word	0x25202020
10011a38:	6d426464 	.word	0x6d426464
10011a3c:	646e6120 	.word	0x646e6120
10011a40:	6c656220 	.word	0x6c656220
10011a44:	0000776f 	.word	0x0000776f
10011a48:	20505850 	.word	0x20505850
10011a4c:	6e6e6f43 	.word	0x6e6e6f43
10011a50:	20746365 	.word	0x20746365
10011a54:	75716572 	.word	0x75716572
10011a58:	20747365 	.word	0x20747365
10011a5c:	746e6573 	.word	0x746e6573
10011a60:	00000000 	.word	0x00000000
10011a64:	20505850 	.word	0x20505850
10011a68:	6e6e6f43 	.word	0x6e6e6f43
10011a6c:	20746365 	.word	0x20746365
10011a70:	75716572 	.word	0x75716572
10011a74:	20747365 	.word	0x20747365
10011a78:	646e6573 	.word	0x646e6573
10011a7c:	69616620 	.word	0x69616620
10011a80:	0064656c 	.word	0x0064656c
10011a84:	6f666e49 	.word	0x6f666e49
10011a88:	6544203a 	.word	0x6544203a
10011a8c:	65636976 	.word	0x65636976
10011a90:	756f6620 	.word	0x756f6620
10011a94:	6120646e 	.word	0x6120646e
10011a98:	65726464 	.word	0x65726464
10011a9c:	5b207373 	.word	0x5b207373
10011aa0:	205d6425 	.word	0x205d6425
10011aa4:	25783020 	.word	0x25783020
10011aa8:	25583230 	.word	0x25583230
10011aac:	25583230 	.word	0x25583230
10011ab0:	25583230 	.word	0x25583230
10011ab4:	25583230 	.word	0x25583230
10011ab8:	25583230 	.word	0x25583230
10011abc:	20583230 	.word	0x20583230
10011ac0:	00000000 	.word	0x00000000
10011ac4:	502d2d2d 	.word	0x502d2d2d
10011ac8:	00005058 	.word	0x00005058
10011acc:	656c6553 	.word	0x656c6553
10011ad0:	49207463 	.word	0x49207463
10011ad4:	7865646e 	.word	0x7865646e
10011ad8:	6d756e20 	.word	0x6d756e20
10011adc:	20726562 	.word	0x20726562
10011ae0:	43206f74 	.word	0x43206f74
10011ae4:	656e6e6f 	.word	0x656e6e6f
10011ae8:	6f207463 	.word	0x6f207463
10011aec:	735b2072 	.word	0x735b2072
10011af0:	6f74205d 	.word	0x6f74205d
10011af4:	61637320 	.word	0x61637320
10011af8:	0000006e 	.word	0x0000006e
10011afc:	656c6553 	.word	0x656c6553
10011b00:	5b207463 	.word	0x5b207463
10011b04:	74205d73 	.word	0x74205d73
10011b08:	6373206f 	.word	0x6373206f
10011b0c:	61206e61 	.word	0x61206e61
10011b10:	6e696167 	.word	0x6e696167
10011b14:	00000000 	.word	0x00000000
10011b18:	786f7250 	.word	0x786f7250
10011b1c:	74696d69 	.word	0x74696d69
10011b20:	72502079 	.word	0x72502079
10011b24:	6c69666f 	.word	0x6c69666f
10011b28:	75732065 	.word	0x75732065
10011b2c:	726f7070 	.word	0x726f7070
10011b30:	20646574 	.word	0x20646574
10011b34:	69766564 	.word	0x69766564
10011b38:	6e206563 	.word	0x6e206563
10011b3c:	6620746f 	.word	0x6620746f
10011b40:	646e756f 	.word	0x646e756f
10011b44:	00000020 	.word	0x00000020
10011b48:	69726550 	.word	0x69726550
10011b4c:	72656870 	.word	0x72656870
10011b50:	69206c61 	.word	0x69206c61
10011b54:	6c612073 	.word	0x6c612073
10011b58:	64616572 	.word	0x64616572
10011b5c:	64412079 	.word	0x64412079
10011b60:	74726576 	.word	0x74726576
10011b64:	6e697369 	.word	0x6e697369
10011b68:	53202e67 	.word	0x53202e67
10011b6c:	206e6163 	.word	0x206e6163
10011b70:	20746f6e 	.word	0x20746f6e
10011b74:	6d726570 	.word	0x6d726570
10011b78:	65747469 	.word	0x65747469
10011b7c:	00000064 	.word	0x00000064
10011b80:	656c6553 	.word	0x656c6553
10011b84:	5b207463 	.word	0x5b207463
10011b88:	74205d72 	.word	0x74205d72
10011b8c:	6552206f 	.word	0x6552206f
10011b90:	6e6e6f63 	.word	0x6e6e6f63
10011b94:	20746365 	.word	0x20746365
10011b98:	5b20726f 	.word	0x5b20726f
10011b9c:	53205d73 	.word	0x53205d73
10011ba0:	006e6163 	.word	0x006e6163
10011ba4:	20505850 	.word	0x20505850
10011ba8:	432d6552 	.word	0x432d6552
10011bac:	656e6e6f 	.word	0x656e6e6f
10011bb0:	72207463 	.word	0x72207463
10011bb4:	65757165 	.word	0x65757165
10011bb8:	73207473 	.word	0x73207473
10011bbc:	00746e65 	.word	0x00746e65
10011bc0:	20505850 	.word	0x20505850
10011bc4:	432d6552 	.word	0x432d6552
10011bc8:	656e6e6f 	.word	0x656e6e6f
10011bcc:	72207463 	.word	0x72207463
10011bd0:	65757165 	.word	0x65757165
10011bd4:	73207473 	.word	0x73207473
10011bd8:	20646e65 	.word	0x20646e65
10011bdc:	6c696166 	.word	0x6c696166
10011be0:	00006465 	.word	0x00006465
10011be4:	69726550 	.word	0x69726550
10011be8:	72656870 	.word	0x72656870
10011bec:	69206c61 	.word	0x69206c61
10011bf0:	6c612073 	.word	0x6c612073
10011bf4:	64616572 	.word	0x64616572
10011bf8:	64412079 	.word	0x64412079
10011bfc:	74726576 	.word	0x74726576
10011c00:	6e697369 	.word	0x6e697369
10011c04:	63532c67 	.word	0x63532c67
10011c08:	6e206e61 	.word	0x6e206e61
10011c0c:	7020746f 	.word	0x7020746f
10011c10:	696d7265 	.word	0x696d7265
10011c14:	64657474 	.word	0x64657474
10011c18:	00000000 	.word	0x00000000
10011c1c:	54544147 	.word	0x54544147
10011c20:	73694420 	.word	0x73694420
10011c24:	65766f63 	.word	0x65766f63
10011c28:	72207972 	.word	0x72207972
10011c2c:	65757165 	.word	0x65757165
10011c30:	73207473 	.word	0x73207473
10011c34:	74726174 	.word	0x74726174
10011c38:	00206465 	.word	0x00206465
10011c3c:	54544147 	.word	0x54544147
10011c40:	73694420 	.word	0x73694420
10011c44:	65766f63 	.word	0x65766f63
10011c48:	72207972 	.word	0x72207972
10011c4c:	65757165 	.word	0x65757165
10011c50:	66207473 	.word	0x66207473
10011c54:	656c6961 	.word	0x656c6961
10011c58:	00000064 	.word	0x00000064
10011c5c:	10009d5a 	.word	0x10009d5a
10011c60:	10009d6c 	.word	0x10009d6c
10011c64:	10009d42 	.word	0x10009d42
10011c68:	10009d42 	.word	0x10009d42
10011c6c:	10009d42 	.word	0x10009d42
10011c70:	10009d5a 	.word	0x10009d5a
10011c74:	10009d42 	.word	0x10009d42
10011c78:	10009d42 	.word	0x10009d42
10011c7c:	1000aa96 	.word	0x1000aa96
10011c80:	1000ab0a 	.word	0x1000ab0a
10011c84:	1000aa7e 	.word	0x1000aa7e
10011c88:	1000ab10 	.word	0x1000ab10
10011c8c:	1000aa84 	.word	0x1000aa84
10011c90:	1000aa8a 	.word	0x1000aa8a
10011c94:	1000aa90 	.word	0x1000aa90
10011c98:	1000af64 	.word	0x1000af64
10011c9c:	1000af64 	.word	0x1000af64
10011ca0:	1000af64 	.word	0x1000af64
10011ca4:	1000af64 	.word	0x1000af64
10011ca8:	1000af64 	.word	0x1000af64
10011cac:	1000af64 	.word	0x1000af64
10011cb0:	1000af64 	.word	0x1000af64
10011cb4:	1000af64 	.word	0x1000af64
10011cb8:	1000af64 	.word	0x1000af64
10011cbc:	1000af64 	.word	0x1000af64
10011cc0:	1000af64 	.word	0x1000af64
10011cc4:	1000af64 	.word	0x1000af64
10011cc8:	1000af64 	.word	0x1000af64
10011ccc:	1000af64 	.word	0x1000af64
10011cd0:	1000af64 	.word	0x1000af64
10011cd4:	1000af64 	.word	0x1000af64
10011cd8:	1000af64 	.word	0x1000af64
10011cdc:	1000af64 	.word	0x1000af64
10011ce0:	1000af64 	.word	0x1000af64
10011ce4:	1000af82 	.word	0x1000af82
10011ce8:	1000af82 	.word	0x1000af82
10011cec:	1000af82 	.word	0x1000af82
10011cf0:	1000af82 	.word	0x1000af82
10011cf4:	1000af82 	.word	0x1000af82
10011cf8:	1000af82 	.word	0x1000af82
10011cfc:	1000af82 	.word	0x1000af82
10011d00:	1000af82 	.word	0x1000af82
10011d04:	1000af82 	.word	0x1000af82
10011d08:	1000af82 	.word	0x1000af82
10011d0c:	1000afa4 	.word	0x1000afa4
10011d10:	1000afa4 	.word	0x1000afa4
10011d14:	1000afa4 	.word	0x1000afa4
10011d18:	1000afa4 	.word	0x1000afa4
10011d1c:	1000afa4 	.word	0x1000afa4
10011d20:	1000afa4 	.word	0x1000afa4
10011d24:	1000afa4 	.word	0x1000afa4
10011d28:	1000afa4 	.word	0x1000afa4
10011d2c:	1000afa4 	.word	0x1000afa4
10011d30:	1000afa4 	.word	0x1000afa4
10011d34:	1000afd4 	.word	0x1000afd4
10011d38:	1000afd4 	.word	0x1000afd4
10011d3c:	1000afd4 	.word	0x1000afd4
10011d40:	1000afd4 	.word	0x1000afd4
10011d44:	1000afd4 	.word	0x1000afd4
10011d48:	1000afd4 	.word	0x1000afd4
10011d4c:	1000afee 	.word	0x1000afee
10011d50:	1000afee 	.word	0x1000afee
10011d54:	1000afee 	.word	0x1000afee
10011d58:	1000afee 	.word	0x1000afee
10011d5c:	1000afee 	.word	0x1000afee
10011d60:	1000afee 	.word	0x1000afee
10011d64:	1000afee 	.word	0x1000afee
10011d68:	1000afee 	.word	0x1000afee
10011d6c:	1000afee 	.word	0x1000afee
10011d70:	1000b008 	.word	0x1000b008
10011d74:	1000b008 	.word	0x1000b008
10011d78:	1000b02a 	.word	0x1000b02a
10011d7c:	1000b02a 	.word	0x1000b02a
10011d80:	1000b044 	.word	0x1000b044
10011d84:	1000b02a 	.word	0x1000b02a
10011d88:	34333231 	.word	0x34333231
10011d8c:	00003635 	.word	0x00003635
10011d90:	efcdab00 	.word	0xefcdab00
10011d94:	00efcdab 	.word	0x00efcdab
10011d98:	b2d60600 	.word	0xb2d60600
10011d9c:	f8f005f0 	.word	0xf8f005f0
10011da0:	00000000 	.word	0x00000000

10011da4 <ble_mgr_gatt_server_handle>:
	...
10011dbc:	10009c55 10009c7d 10009cc5 00000000     U...}...........
10011dcc:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10011ddc:	65636552 64657669 00000000 6e616353     Received....Scan
10011dec:	676e696e 61662020 64656c69 00000000     ning  failed....
10011dfc:	2d454c42 2055544d 6e616843 2c646567     BLE-MTU Changed,
10011e0c:	6e6f4320 7463656e 206e6f69 646e6148      Connection Hand
10011e1c:	203a656c 202c6425 2077654e 756c6156     le: %d, New Valu
10011e2c:	25203a65 00000064 2055544d 6e616843     e: %d...MTU Chan
10011e3c:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10011e4c:	646e6148 253a656c 4f202c64 61726570     Handle:%d, Opera
10011e5c:	6e6f6974 0064253a 2055544d 6e616843     tion:%d.MTU Chan
10011e6c:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10011e7c:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10011e8c:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10011e9c:	72616843 69725720 43206574 4320646d     Char Write Cmd C
10011eac:	6c706d6f 2c657465 6e6f4320 7463656e     omplete, Connect
10011ebc:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10011ecc:	61726570 6e6f6974 0064253a 72616843     peration:%d.Char
10011edc:	69725720 43206574 4620646d 656c6961      Write Cmd Faile
10011eec:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
10011efc:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
10011f0c:	253a6e6f 00000064 74617453 6f4e2065     on:%d...State No
10011f1c:	61482074 656c646e 64252064 00000000     t Handled %d....
10011f2c:	69766544 64206563 6f637369 63656e6e     Device disconnec
10011f3c:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10011f4c:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10011f5c:	425f5441 435f454c 5f4e4e4f 41524150     AT_BLE_CONN_PARA
10011f6c:	50555f4d 45544144 00000020 72636e45     M_UPDATE ...Encr
10011f7c:	69747079 66206e6f 656c6961 00000064     yption failed...
10011f8c:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10011f9c:	64657465 63757320 73736563 6c6c7566     eted successfull
10011fac:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10011fbc:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10011fcc:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10011fdc:	7665443a 20656369 6e756f66 64612064     :Device found ad
10011fec:	73657264 255b2073 20205d64 30257830     dress [%d]  0x%0
10011ffc:	30255832 30255832 30255832 30255832     2X%02X%02X%02X%0
1001200c:	30255832 00205832 6f666e49 78616d3a     2X%02X .Info:max
1001201c:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
1001202c:	69766564 72206563 68636165 2e2e6465     device reached..
1001203c:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
1001204c:	6c696146 74206465 7473206f 7320706f     Failed to stop s
1001205c:	6e6e6163 00676e69 69766544 69206563     canning.Device i
1001206c:	253a7864 00000064 23232323 23232323     dx:%d...########
1001207c:	65442323 65636976 756f4620 0000646e     ##Device Found..
1001208c:	23232323 23232323 65442323 65636976     ##########Device
1001209c:	746f4e20 756f4620 0000646e 6e6e6f43      Not Found..Conn
100120ac:	65746365 6f742064 65657020 65642072     ected to peer de
100120bc:	65636976 74697720 64612068 73657264     vice with addres
100120cc:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100120dc:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100120ec:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100120fc:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001210c:	61522067 6d6f646e 64646120 73736572     g Random address
1001211c:	63757320 73736563 00002a2a 6f736552      success**..Reso
1001212c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
1001213c:	73736572 69616620 2a64656c 0000002a     ress failed**...
1001214c:	2078614d 626d756e 6f207265 6f632066     Max number of co
1001215c:	63656e6e 6e6f6974 61657220 64656863     nnection reached
1001216c:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
1001217c:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
1001218c:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
1001219c:	64656c69 53202d20 75746174 25203a73     iled - Status: %
100121ac:	00000064 30257830 202c5832 00000000     d...0x%02X, ....
100121bc:	4b525343 0000203a 3a4b5249 00000000     CSRK: ..IRK:....
100121cc:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100121dc:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100121ec:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100121fc:	46207473 656c6961 00000064 72696150     st Failed...Pair
1001220c:	20676e69 636f7270 72756465 6f632065     ing procedure co
1001221c:	656c706d 20646574 63637573 66737365     mpleted successf
1001222c:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
1001223c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
1001224c:	726f7473 68742065 61702065 6e697269     store the pairin
1001225c:	6e692067 00006f66 3a4b544c 00000020     g info..LTK: ...
1001226c:	72636e45 69747079 4e206e6f 7320746f     Encryption Not s
1001227c:	74726174 00006465 76616c53 65532065     tarted..Slave Se
1001228c:	69727563 52207974 2d207165 74754120     curity Req - Aut
1001229c:	746e6568 74616369 206e6f69 6c696146     hentication Fail
100122ac:	00006465 656e6547 65746172 544c2064     ed..Generated LT
100122bc:	00203a4b 30257830 00205832 646e6553     K: .0x%02X .Send
100122cc:	20676e69 72696170 20676e69 70736572     ing pairing resp
100122dc:	65736e6f 00000000 72696150 71655220     onse....Pair Req
100122ec:	74736575 41202d20 65687475 6369746e     uest - Authentic
100122fc:	6f697461 6146206e 64656c69 00000000     ation Failed....
1001230c:	65746e45 68742072 61502065 656b7373     Enter the Passke
1001231c:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
1001232c:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
1001233c:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
1001234c:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
1001235c:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
1001236c:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
1001237c:	6568746f 65442072 65636976 00003a29     other Device):..
1001238c:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
1001239c:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
100123ac:	20657275 20746f4e 70707573 6574726f     ure Not supporte
100123bc:	00000064 65746e45 20646572 73736150     d...Entered Pass
100123cc:	646f632d 00003a65 2d434e45 3a716552     -code:..ENC-Req:
100123dc:	6e6f4320 6148206e 656c646e 76654420      Conn Handle Dev
100123ec:	20656369 6e756f46 64683a64 64253a6c     ice Found:hdl:%d
100123fc:	00000000 74736f68 76656420 20656369     ....host device 
1001240c:	76696465 00782520 72656570 76656420     ediv %x.peer dev
1001241c:	20656369 76696465 00782520 5f636e65     ice ediv %x.enc_
1001242c:	20716572 76696465 00782520 20656854     req ediv %x.The 
1001243c:	65646e69 73692078 00642520 2d434e45     index is %d.ENC-
1001244c:	3a716552 79654b20 756f4620 0000646e     Req: Key Found..
1001245c:	72696150 20676e69 6f666e69 74616d72     Pairing informat
1001246c:	206e6f69 7020666f 20726565 69766564     ion of peer devi
1001247c:	69206563 6f6e2073 76612074 616c6961     ce is not availa
1001248c:	2e656c62 00000000 61656c50 75206573     ble.....Please u
1001249c:	6961706e 68742072 65642065 65636976     npair the device
100124ac:	6f726620 6570206d 64207265 63697665      from peer devic
100124bc:	6f6d2865 656c6962 65732029 6e697474     e(mobile) settin
100124cc:	6d207367 20756e65 20646e61 72617473     gs menu and star
100124dc:	61702074 6e697269 67612067 006e6961     t pairing again.
100124ec:	72636e45 69747079 52206e6f 65757165     Encryption Reque
100124fc:	52207473 796c7065 69614620 0064656c     st Reply Failed.
1001250c:	72636e45 69747079 52206e6f 65757165     Encryption Reque
1001251c:	52207473 796c7065 00000000 74696e49     st Reply....Init
1001252c:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
1001253c:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
1001254c:	6f697461 6166206e 64656c69 00000000     ation failed....
1001255c:	61656c50 63206573 6b636568 65687420     Please check the
1001256c:	776f7020 61207265 6320646e 656e6e6f      power and conne
1001257c:	6f697463 202f206e 64726168 65726177     ction / hardware
1001258c:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
1001259c:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
100125ac:	20656d61 20746573 6c696166 00006465     ame set failed..
100125bc:	61204442 65726464 67207373 66207465     BD address get f
100125cc:	656c6961 00000064 41204442 65726464     ailed...BD Addre
100125dc:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
100125ec:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
100125fc:	65726464 54207373 3a657079 00006425     ddress Type:%d..
1001260c:	20746553 20454c42 69766544 63206563     Set BLE Device c
1001261c:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
1001262c:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
1001263c:	41206563 65726464 66207373 656c6961     ce Address faile
1001264c:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
1001265c:	7361656c 61772065 2e2e7469 0000002e     lease wait......
1001266c:	76616c53 65732065 69727563 72207974     Slave security r
1001267c:	65757165 73207473 65636375 75667373     equest successfu
1001268c:	0000006c 76616c53 65732065 69727563     l...Slave securi
1001269c:	72207974 65757165 66207473 656c6961     ty request faile
100126ac:	00000064 2d454c42 6e657645 64253a74     d...BLE-Event:%d
100126bc:	00000000 54544147 7265535f 20726576     ....GATT_Server 
100126cc:	6e657645 64253a74 00000000 2d454c42     Event:%d....BLE-
100126dc:	616e614d 3a726567 6e6b6e55 206e776f     Manager:Unknown 
100126ec:	6e657645 78303d74 00005825 20454c42     Event=0x%X..BLE 
100126fc:	65766441 73697472 6e656d65 61642074     Advertisement da
1001270c:	73206174 66207465 656c6961 00000064     ta set failed...
1001271c:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
1001272c:	61642074 73206174 73207465 65636375     t data set succe
1001273c:	00007373                                ss..

10012740 <ble_mgr_gap_handle>:
10012740:	10009c09 10009e91 10009c2d 00000000     ........-.......
10012750:	00000000 1000a04d 10009d0d 10009da9     ....M...........
10012760:	1000a425 1000a275 1000a625 1000a43d     %...u...%...=...
10012770:	1000a7b1 1000a8f5 10009dcd 10009f3d     ............=...
	...
1001278c:	656d6954 74203272 67676972 0a0d7265     Timer2 trigger..
1001279c:	00000000 1000c63c 1000c63c 1000c5a4     ....<...<.......
100127ac:	1000c5b2 1000c5c6 1000c5da 1000c616     ................
100127bc:	1000c62a                                *...

100127c0 <sms_gateway_app_gap_cb>:
	...
100127c8:	1000c125 00000000 00000000 1000c0e5     %...............
100127d8:	1000bbb1 00000000 00000000 1000c3c9     ................
	...
1001280c:	72616843 65746361 74736972 77206369     Characteristic w
1001281c:	65746972 73657220 736e6f70 00000065     rite response...
1001282c:	72616843 65746361 74736972 72206369     Characteristic r
1001283c:	20646165 6d207962 69746c75 20656c70     ead by multiple 
1001284c:	20454c42 70736572 65736e6f 00000073     BLE responses...
1001285c:	72616843 65746361 74736972 72206369     Characteristic r
1001286c:	20646165 75207962 20646975 70736572     ead by uuid resp
1001287c:	65736e6f 00000000 63736944 7265766f     onse....Discover
1001288c:	6f632079 656c706d 2e2e6574 0000002e     y complete......
1001289c:	69726550 72656870 23206c61 00006425     Peripheral #%d..
100128ac:	69202d20 64252064 00000000 63202d20      - id %d.... - c
100128bc:	206e6e6f 646e6168 3020656c 34302578     onn handle 0x%04
100128cc:	00000078 73202d20 69767265 64256563     x... - service%d
100128dc:	6425203a 00000000 63202d20 20726168     : %d.... - char 
100128ec:	676e6172 25203a65 202d2064 00006425     range: %d - %d..
100128fc:	63736544 74706972 6620726f 646e756f     Descriptor found
1001290c:	00000000 72616843 65746361 74736972     ....Characterist
1001291c:	66206369 646e756f 00000000 6d697250     ic found....Prim
1001292c:	20797261 76726573 20656369 6e756f66     ary service foun
1001293c:	00000064 736d735b 7461675f 79617765     d...[sms_gateway
1001294c:	7265735f 65636976 756f665f 205d646e     _service_found] 
1001295c:	72657320 65636976 61686320 74636172      service charact
1001296c:	73697265 73636974 0000003a 65732020     eristics:...  se
1001297c:	63697672 79742065 203a6570 00006425     rvice type: %d..
1001298c:	65732020 63697672 75752065 203a6469       service uuid: 
1001299c:	00007830 6f632020 7620706d 203a6c61     0x..  comp val: 
100129ac:	30257830 00007834 74732020 20747261     0x%04x..  start 
100129bc:	646e6168 203a656c 00006425 6e652020     handle: %d..  en
100129cc:	61682064 656c646e 6425203a 00000000     d handle: %d....
100129dc:	75622020 6e6f7474 72657320 65636976       button service
100129ec:	00000021 72702020 75737365 73206572     !...  pressure s
100129fc:	69767265 00216563 706d2020 65732075     ervice!.  mpu se
10012a0c:	63697672 00002165 204e5442 203a6425     rvice!..BTN %d: 
10012a1c:	30257830 00007832 52500909 20535345     0x%02x....PRESS 
10012a2c:	203a6425 00007830 09090909 20554d49     %d: 0x......IMU 
10012a3c:	203a6425 00007830 3a746e63 00642520     %d: 0x..cnt: %d.
10012a4c:	736d735b 7461675f 79617765 746f6e5f     [sms_gateway_not
10012a5c:	63696669 6f697461 65725f6e 76696563     ification_receiv
10012a6c:	095d6465 69746f4e 61636966 6e6f6974     ed].Notification
10012a7c:	63657220 65766965 2e2e2e64 202d0a0d      received.....- 
10012a8c:	6e6e6f63 6e616820 3a656c64 25783020     conn handle: 0x%
10012a9c:	0d783430 63202d0a 20726168 646e6168     04x..- char hand
10012aac:	203a656c 30257830 0a0d7834 6863202d     le: 0x%04x..- ch
10012abc:	6c207261 203a6e65 0a0d6425 6863202d     ar len: %d..- ch
10012acc:	76207261 65756c61 7830203a 00000000     ar value: 0x....
10012adc:	69726550 72656870 25206c61 73202c64     Peripheral %d, s
10012aec:	69767265 25206563 6c202c64 74676e65     ervice %d, lengt
10012afc:	64252068 00000000 61746144 00783020     h %d....Data 0x.
10012b0c:	69766544 63206563 656e6e6f 64657463     Device connected
10012b1c:	002e2e2e 20202020 202d2020 65766461     ....      - adve
10012b2c:	73697472 64206465 3a617461 20783020     rtised data: 0x 
10012b3c:	00000000 78323025 202e2e2e 6b6f6f6c     ....%02x... look
10012b4c:	20676e69 20726f66 78323025 00000000     ing for %02x....
10012b5c:	554f4620 2021444e 692e2e2e 7865646e      FOUND! ...index
10012b6c:	6425203a 00000000 54544150 314e5245     : %d....PATTERN1
10012b7c:	54414d20 4e494843 21212147 00000000      MATCHING!!!....
10012b8c:	706d6f43 62697461 6420656c 63697665     Compatible devic
10012b9c:	6f662065 00646e75 63204f4e 61706d6f     e found.NO compa
10012bac:	6c626974 65642065 65636976 756f6620     tible device fou
10012bbc:	0000646e 68746f4e 20676e69 6e756f66     nd..Nothing foun
10012bcc:	00000064 54544147 72657320 65636976     d...GATT service
10012bdc:	73696420 65766f63 72207972 65757165      discovery reque
10012bec:	66207473 656c6961 00000064 54544147     st failed...GATT
10012bfc:	72657320 65636976 73696420 65766f63      service discove
10012c0c:	72207972 65757165 73207473 74726174     ry request start
10012c1c:	00006465 69766544 20736563 72696170     ed..Devices pair
10012c2c:	2e2e6465 0000002e 69676552 72657473     ed......Register
10012c3c:	20676e69 73726966 65702074 68706972     ing first periph
10012c4c:	6c617265 00000000 6978614d 206d756d     eral....Maximum 
10012c5c:	756f6d61 6f20746e 65702066 68706972     amount of periph
10012c6c:	6c617265 65722073 65686361 00002164     erals reached!..
10012c7c:	72636e49 69736165 7020676e 70697265     Increasing perip
10012c8c:	61726568 6f63206c 65746e75 25203a72     heral counter: %
10012c9c:	00000064 626f7250 206d656c 6c696877     d...Problem whil
10012cac:	65732065 6e697474 70672067 70206f69     e setting gpio p
10012cbc:	00006e69 74696e49 696c6169 676e697a     in..Initializing
10012ccc:	454c4220 70704120 6163696c 6e6f6974      BLE Application
10012cdc:	00000000 5f534d53 4e4e5552 2e474e49     ....SMS_RUNNING.
10012cec:	00002e2e 5f534d53 43534944 454e4e4f     ....SMS_DISCONNE
10012cfc:	44455443 002e2e2e 5f534d53 5f544e49     CTED....SMS_INT_
10012d0c:	54545542 2e314e4f 00002e2e 5f534d53     BUTTON1.....SMS_
10012d1c:	5f544e49 54545542 2e324e4f 00002e2e     INT_BUTTON2.....
10012d2c:	5f534d53 5f544e49 454d4954 2e2e3152     SMS_INT_TIMER1..
10012d3c:	0000002e 5f534d53 5f544e49 454d4954     ....SMS_INT_TIME
10012d4c:	2e2e3252 0000002e 646e6553 20676e69     R2......Sending 
10012d5c:	53206f74 203a4950 30257830 25207832     to SPI: 0x%02x %
10012d6c:	20783230 78323025 00000020              02x %02x ...

10012d78 <sms_gateway_app_gatt_client_cb>:
10012d78:	1000bd41 00000000 1000bd1d 1000bcf9     A...............
10012d88:	1000bc39 1000bc15 1000bbf1 1000bbcd     9...............
10012d98:	1000bfa5 1000bee1 656d7441 6f43206c     ........Atmel Co
10012da8:	002e7072                                         rp.

10012dab <CSWTCH.51>:
10012dab:	03010300 03030303 03030303 00020303     ................
10012dbb:	00f49800 00f35810 00f35810 00f35610     .....X...X...V..
10012dcb:	00f47010 00f47010 00f46210 00f35610     .p...p...b...V..
10012ddb:	00f47010 00f46210 00f47010 00f35610     .p...b...p...V..
10012deb:	00f47810 00f47810 00f47810 00f67810     .x...x...x...x..
10012dfb:	00004310 012ec000                                .C...

10012e00 <_global_impure_ptr>:
10012e00:	10012ec0                                ....

10012e04 <__sf_fake_stdin>:
	...

10012e24 <__sf_fake_stdout>:
	...

10012e44 <__sf_fake_stderr>:
	...
10012e64:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10012e74:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10012e84:	31300046 35343332 39383736 64636261     F.0123456789abcd
10012e94:	00006665                                ef..

10012e98 <_init>:
10012e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012e9a:	46c0      	nop			; (mov r8, r8)
10012e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012e9e:	bc08      	pop	{r3}
10012ea0:	469e      	mov	lr, r3
10012ea2:	4770      	bx	lr

10012ea4 <__init_array_start>:
10012ea4:	100080b1 	.word	0x100080b1

10012ea8 <_fini>:
10012ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012eaa:	46c0      	nop			; (mov r8, r8)
10012eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012eae:	bc08      	pop	{r3}
10012eb0:	469e      	mov	lr, r3
10012eb2:	4770      	bx	lr

10012eb4 <__fini_array_start>:
10012eb4:	10008089 	.word	0x10008089
