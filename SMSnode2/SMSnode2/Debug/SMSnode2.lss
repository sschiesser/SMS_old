
SMSnode2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011a50  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  10019a50  10019a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001dac  10019b04  10019b04  00019b04  2**2
                  ALLOC
  3 .stack        00001000  1001b8b0  1001b8b0  00019b04  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00019b04  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00019b2c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00041010  00000000  00000000  00019be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004550  00000000  00000000  0005abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000533e  00000000  00000000  0005f140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ec0  00000000  00000000  0006447e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d18  00000000  00000000  0006533e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024571  00000000  00000000  00066056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018052  00000000  00000000  0008a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00116b90  00000000  00000000  000a2619  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003e8c  00000000  00000000  001b91ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b580      	push	{r7, lr}
10008002:	b082      	sub	sp, #8
10008004:	af00      	add	r7, sp, #0
    uint32_t *pSrc, *pDest;

    /* Initialize the relocate segment */
    pSrc = &_etext;
10008006:	4b14      	ldr	r3, [pc, #80]	; (10008058 <app_entry+0x58>)
10008008:	607b      	str	r3, [r7, #4]
    pDest = &_srelocate;
1000800a:	4b14      	ldr	r3, [pc, #80]	; (1000805c <app_entry+0x5c>)
1000800c:	603b      	str	r3, [r7, #0]

    if (pSrc != pDest) {
1000800e:	687a      	ldr	r2, [r7, #4]
10008010:	683b      	ldr	r3, [r7, #0]
10008012:	429a      	cmp	r2, r3
10008014:	d00c      	beq.n	10008030 <app_entry+0x30>
        for (; pDest < &_erelocate;) {
10008016:	e007      	b.n	10008028 <app_entry+0x28>
            *pDest++ = *pSrc++;
10008018:	683b      	ldr	r3, [r7, #0]
1000801a:	1d1a      	adds	r2, r3, #4
1000801c:	603a      	str	r2, [r7, #0]
1000801e:	687a      	ldr	r2, [r7, #4]
10008020:	1d11      	adds	r1, r2, #4
10008022:	6079      	str	r1, [r7, #4]
10008024:	6812      	ldr	r2, [r2, #0]
10008026:	601a      	str	r2, [r3, #0]
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008028:	683a      	ldr	r2, [r7, #0]
1000802a:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802c:	429a      	cmp	r2, r3
1000802e:	d3f3      	bcc.n	10008018 <app_entry+0x18>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008030:	4b0c      	ldr	r3, [pc, #48]	; (10008064 <app_entry+0x64>)
10008032:	603b      	str	r3, [r7, #0]
10008034:	e004      	b.n	10008040 <app_entry+0x40>
        *pDest++ = 0;
10008036:	683b      	ldr	r3, [r7, #0]
10008038:	1d1a      	adds	r2, r3, #4
1000803a:	603a      	str	r2, [r7, #0]
1000803c:	2200      	movs	r2, #0
1000803e:	601a      	str	r2, [r3, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008040:	683a      	ldr	r2, [r7, #0]
10008042:	4b09      	ldr	r3, [pc, #36]	; (10008068 <app_entry+0x68>)
10008044:	429a      	cmp	r2, r3
10008046:	d3f6      	bcc.n	10008036 <app_entry+0x36>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008048:	4b08      	ldr	r3, [pc, #32]	; (1000806c <app_entry+0x6c>)
1000804a:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804c:	4b08      	ldr	r3, [pc, #32]	; (10008070 <app_entry+0x70>)
1000804e:	4798      	blx	r3

    /* return to BLE OS*/
    return;
10008050:	46c0      	nop			; (mov r8, r8)
}
10008052:	46bd      	mov	sp, r7
10008054:	b002      	add	sp, #8
10008056:	bd80      	pop	{r7, pc}
10008058:	10019a50 	.word	0x10019a50
1000805c:	10019a50 	.word	0x10019a50
10008060:	10019b04 	.word	0x10019b04
10008064:	10019b04 	.word	0x10019b04
10008068:	1001b8b0 	.word	0x1001b8b0
1000806c:	10017299 	.word	0x10017299
10008070:	1000af19 	.word	0x1000af19

10008074 <__do_global_dtors_aux>:
10008074:	b510      	push	{r4, lr}
10008076:	4c06      	ldr	r4, [pc, #24]	; (10008090 <__do_global_dtors_aux+0x1c>)
10008078:	7823      	ldrb	r3, [r4, #0]
1000807a:	2b00      	cmp	r3, #0
1000807c:	d107      	bne.n	1000808e <__do_global_dtors_aux+0x1a>
1000807e:	4b05      	ldr	r3, [pc, #20]	; (10008094 <__do_global_dtors_aux+0x20>)
10008080:	2b00      	cmp	r3, #0
10008082:	d002      	beq.n	1000808a <__do_global_dtors_aux+0x16>
10008084:	4804      	ldr	r0, [pc, #16]	; (10008098 <__do_global_dtors_aux+0x24>)
10008086:	e000      	b.n	1000808a <__do_global_dtors_aux+0x16>
10008088:	bf00      	nop
1000808a:	2301      	movs	r3, #1
1000808c:	7023      	strb	r3, [r4, #0]
1000808e:	bd10      	pop	{r4, pc}
10008090:	10019b04 	.word	0x10019b04
10008094:	00000000 	.word	0x00000000
10008098:	10019a50 	.word	0x10019a50

1000809c <frame_dummy>:
1000809c:	4b08      	ldr	r3, [pc, #32]	; (100080c0 <frame_dummy+0x24>)
1000809e:	b510      	push	{r4, lr}
100080a0:	2b00      	cmp	r3, #0
100080a2:	d003      	beq.n	100080ac <frame_dummy+0x10>
100080a4:	4907      	ldr	r1, [pc, #28]	; (100080c4 <frame_dummy+0x28>)
100080a6:	4808      	ldr	r0, [pc, #32]	; (100080c8 <frame_dummy+0x2c>)
100080a8:	e000      	b.n	100080ac <frame_dummy+0x10>
100080aa:	bf00      	nop
100080ac:	4807      	ldr	r0, [pc, #28]	; (100080cc <frame_dummy+0x30>)
100080ae:	6803      	ldr	r3, [r0, #0]
100080b0:	2b00      	cmp	r3, #0
100080b2:	d100      	bne.n	100080b6 <frame_dummy+0x1a>
100080b4:	bd10      	pop	{r4, pc}
100080b6:	4b06      	ldr	r3, [pc, #24]	; (100080d0 <frame_dummy+0x34>)
100080b8:	2b00      	cmp	r3, #0
100080ba:	d0fb      	beq.n	100080b4 <frame_dummy+0x18>
100080bc:	4798      	blx	r3
100080be:	e7f9      	b.n	100080b4 <frame_dummy+0x18>
100080c0:	00000000 	.word	0x00000000
100080c4:	10019b08 	.word	0x10019b08
100080c8:	10019a50 	.word	0x10019a50
100080cc:	10019a50 	.word	0x10019a50
100080d0:	00000000 	.word	0x00000000

100080d4 <i2c_write>:
#define labs        abs
#define fabs(x)     (((x)>0)?(x):-(x))
#elif defined EMPL_TARGET_SAMB11
#include "app_include.h"
int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100080d4:	b590      	push	{r4, r7, lr}
100080d6:	b085      	sub	sp, #20
100080d8:	af00      	add	r7, sp, #0
100080da:	0004      	movs	r4, r0
100080dc:	0008      	movs	r0, r1
100080de:	0011      	movs	r1, r2
100080e0:	603b      	str	r3, [r7, #0]
100080e2:	1dfb      	adds	r3, r7, #7
100080e4:	1c22      	adds	r2, r4, #0
100080e6:	701a      	strb	r2, [r3, #0]
100080e8:	1dbb      	adds	r3, r7, #6
100080ea:	1c02      	adds	r2, r0, #0
100080ec:	701a      	strb	r2, [r3, #0]
100080ee:	1d7b      	adds	r3, r7, #5
100080f0:	1c0a      	adds	r2, r1, #0
100080f2:	701a      	strb	r2, [r3, #0]
    volatile uint16_t timeout = 0;
100080f4:	230c      	movs	r3, #12
100080f6:	18fb      	adds	r3, r7, r3
100080f8:	2200      	movs	r2, #0
100080fa:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.address = (uint8_t)slave_addr;
100080fc:	1dfb      	adds	r3, r7, #7
100080fe:	781b      	ldrb	r3, [r3, #0]
10008100:	b29a      	uxth	r2, r3
10008102:	4b30      	ldr	r3, [pc, #192]	; (100081c4 <i2c_write+0xf0>)
10008104:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008106:	1d7b      	adds	r3, r7, #5
10008108:	781b      	ldrb	r3, [r3, #0]
1000810a:	3301      	adds	r3, #1
1000810c:	b2db      	uxtb	r3, r3
1000810e:	b29a      	uxth	r2, r3
10008110:	4b2c      	ldr	r3, [pc, #176]	; (100081c4 <i2c_write+0xf0>)
10008112:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008114:	4b2b      	ldr	r3, [pc, #172]	; (100081c4 <i2c_write+0xf0>)
10008116:	685b      	ldr	r3, [r3, #4]
10008118:	1dba      	adds	r2, r7, #6
1000811a:	7812      	ldrb	r2, [r2, #0]
1000811c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000811e:	230f      	movs	r3, #15
10008120:	18fb      	adds	r3, r7, r3
10008122:	2200      	movs	r2, #0
10008124:	701a      	strb	r2, [r3, #0]
10008126:	e014      	b.n	10008152 <i2c_write+0x7e>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008128:	4b26      	ldr	r3, [pc, #152]	; (100081c4 <i2c_write+0xf0>)
1000812a:	685a      	ldr	r2, [r3, #4]
1000812c:	230f      	movs	r3, #15
1000812e:	18fb      	adds	r3, r7, r3
10008130:	781b      	ldrb	r3, [r3, #0]
10008132:	3301      	adds	r3, #1
10008134:	18d3      	adds	r3, r2, r3
10008136:	220f      	movs	r2, #15
10008138:	18ba      	adds	r2, r7, r2
1000813a:	7812      	ldrb	r2, [r2, #0]
1000813c:	6839      	ldr	r1, [r7, #0]
1000813e:	188a      	adds	r2, r1, r2
10008140:	7812      	ldrb	r2, [r2, #0]
10008142:	701a      	strb	r2, [r3, #0]
{
    volatile uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008144:	230f      	movs	r3, #15
10008146:	18fb      	adds	r3, r7, r3
10008148:	781a      	ldrb	r2, [r3, #0]
1000814a:	230f      	movs	r3, #15
1000814c:	18fb      	adds	r3, r7, r3
1000814e:	3201      	adds	r2, #1
10008150:	701a      	strb	r2, [r3, #0]
10008152:	230f      	movs	r3, #15
10008154:	18fa      	adds	r2, r7, r3
10008156:	1d7b      	adds	r3, r7, #5
10008158:	7812      	ldrb	r2, [r2, #0]
1000815a:	781b      	ldrb	r3, [r3, #0]
1000815c:	429a      	cmp	r2, r3
1000815e:	d3e3      	bcc.n	10008128 <i2c_write+0x54>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
    }
    i2c_write_done = false;
10008160:	4b19      	ldr	r3, [pc, #100]	; (100081c8 <i2c_write+0xf4>)
10008162:	2200      	movs	r2, #0
10008164:	701a      	strb	r2, [r3, #0]
    i2c_master_write_packet_job(&i2c_master_mpu9250_instance, &i2c_wpacket);
10008166:	4a17      	ldr	r2, [pc, #92]	; (100081c4 <i2c_write+0xf0>)
10008168:	4b18      	ldr	r3, [pc, #96]	; (100081cc <i2c_write+0xf8>)
1000816a:	0011      	movs	r1, r2
1000816c:	0018      	movs	r0, r3
1000816e:	4b18      	ldr	r3, [pc, #96]	; (100081d0 <i2c_write+0xfc>)
10008170:	4798      	blx	r3
    while(!i2c_write_done){
10008172:	e01a      	b.n	100081aa <i2c_write+0xd6>
        timeout++;
10008174:	230c      	movs	r3, #12
10008176:	18fb      	adds	r3, r7, r3
10008178:	881b      	ldrh	r3, [r3, #0]
1000817a:	b29b      	uxth	r3, r3
1000817c:	3301      	adds	r3, #1
1000817e:	b29a      	uxth	r2, r3
10008180:	230c      	movs	r3, #12
10008182:	18fb      	adds	r3, r7, r3
10008184:	801a      	strh	r2, [r3, #0]
        if(timeout >= I2C_TIMEOUT) {
10008186:	230c      	movs	r3, #12
10008188:	18fb      	adds	r3, r7, r3
1000818a:	881b      	ldrh	r3, [r3, #0]
1000818c:	b29b      	uxth	r3, r3
1000818e:	4a11      	ldr	r2, [pc, #68]	; (100081d4 <i2c_write+0x100>)
10008190:	4293      	cmp	r3, r2
10008192:	d90a      	bls.n	100081aa <i2c_write+0xd6>
            DBG_LOG("[i2c_write]  I2C TIMEOUT!!");
10008194:	4b10      	ldr	r3, [pc, #64]	; (100081d8 <i2c_write+0x104>)
10008196:	0018      	movs	r0, r3
10008198:	4b10      	ldr	r3, [pc, #64]	; (100081dc <i2c_write+0x108>)
1000819a:	4798      	blx	r3
1000819c:	4b10      	ldr	r3, [pc, #64]	; (100081e0 <i2c_write+0x10c>)
1000819e:	0018      	movs	r0, r3
100081a0:	4b10      	ldr	r3, [pc, #64]	; (100081e4 <i2c_write+0x110>)
100081a2:	4798      	blx	r3
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
100081a4:	2301      	movs	r3, #1
100081a6:	425b      	negs	r3, r3
100081a8:	e008      	b.n	100081bc <i2c_write+0xe8>
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
    }
    i2c_write_done = false;
    i2c_master_write_packet_job(&i2c_master_mpu9250_instance, &i2c_wpacket);
    while(!i2c_write_done){
100081aa:	4b07      	ldr	r3, [pc, #28]	; (100081c8 <i2c_write+0xf4>)
100081ac:	781b      	ldrb	r3, [r3, #0]
100081ae:	b2db      	uxtb	r3, r3
100081b0:	2201      	movs	r2, #1
100081b2:	4053      	eors	r3, r2
100081b4:	b2db      	uxtb	r3, r3
100081b6:	2b00      	cmp	r3, #0
100081b8:	d1dc      	bne.n	10008174 <i2c_write+0xa0>
            DBG_LOG("[i2c_write]  I2C TIMEOUT!!");
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }
    return 0;
100081ba:	2300      	movs	r3, #0
}
100081bc:	0018      	movs	r0, r3
100081be:	46bd      	mov	sp, r7
100081c0:	b005      	add	sp, #20
100081c2:	bd90      	pop	{r4, r7, pc}
100081c4:	1001a3f0 	.word	0x1001a3f0
100081c8:	1001a282 	.word	0x1001a282
100081cc:	1001a494 	.word	0x1001a494
100081d0:	1000c73d 	.word	0x1000c73d
100081d4:	000003e7 	.word	0x000003e7
100081d8:	100184e0 	.word	0x100184e0
100081dc:	10017591 	.word	0x10017591
100081e0:	100184e4 	.word	0x100184e4
100081e4:	10017471 	.word	0x10017471

100081e8 <i2c_read>:
int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100081e8:	b590      	push	{r4, r7, lr}
100081ea:	b085      	sub	sp, #20
100081ec:	af00      	add	r7, sp, #0
100081ee:	0004      	movs	r4, r0
100081f0:	0008      	movs	r0, r1
100081f2:	0011      	movs	r1, r2
100081f4:	603b      	str	r3, [r7, #0]
100081f6:	1dfb      	adds	r3, r7, #7
100081f8:	1c22      	adds	r2, r4, #0
100081fa:	701a      	strb	r2, [r3, #0]
100081fc:	1dbb      	adds	r3, r7, #6
100081fe:	1c02      	adds	r2, r0, #0
10008200:	701a      	strb	r2, [r3, #0]
10008202:	1d7b      	adds	r3, r7, #5
10008204:	1c0a      	adds	r2, r1, #0
10008206:	701a      	strb	r2, [r3, #0]
    volatile uint16_t timeout = 0;
10008208:	230c      	movs	r3, #12
1000820a:	18fb      	adds	r3, r7, r3
1000820c:	2200      	movs	r2, #0
1000820e:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.address = (uint8_t)slave_addr;
10008210:	1dfb      	adds	r3, r7, #7
10008212:	781b      	ldrb	r3, [r3, #0]
10008214:	b29a      	uxth	r2, r3
10008216:	4b50      	ldr	r3, [pc, #320]	; (10008358 <i2c_read+0x170>)
10008218:	801a      	strh	r2, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000821a:	1dfb      	adds	r3, r7, #7
1000821c:	781b      	ldrb	r3, [r3, #0]
1000821e:	b29a      	uxth	r2, r3
10008220:	4b4e      	ldr	r3, [pc, #312]	; (1000835c <i2c_read+0x174>)
10008222:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.data_length = 1;
10008224:	4b4c      	ldr	r3, [pc, #304]	; (10008358 <i2c_read+0x170>)
10008226:	2201      	movs	r2, #1
10008228:	805a      	strh	r2, [r3, #2]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000822a:	1d7b      	adds	r3, r7, #5
1000822c:	781b      	ldrb	r3, [r3, #0]
1000822e:	b29a      	uxth	r2, r3
10008230:	4b4a      	ldr	r3, [pc, #296]	; (1000835c <i2c_read+0x174>)
10008232:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008234:	4b48      	ldr	r3, [pc, #288]	; (10008358 <i2c_read+0x170>)
10008236:	685b      	ldr	r3, [r3, #4]
10008238:	1dba      	adds	r2, r7, #6
1000823a:	7812      	ldrb	r2, [r2, #0]
1000823c:	701a      	strb	r2, [r3, #0]

    i2c_write_done = false;
1000823e:	4b48      	ldr	r3, [pc, #288]	; (10008360 <i2c_read+0x178>)
10008240:	2200      	movs	r2, #0
10008242:	701a      	strb	r2, [r3, #0]
    //i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
    i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
10008244:	4a44      	ldr	r2, [pc, #272]	; (10008358 <i2c_read+0x170>)
10008246:	4b47      	ldr	r3, [pc, #284]	; (10008364 <i2c_read+0x17c>)
10008248:	0011      	movs	r1, r2
1000824a:	0018      	movs	r0, r3
1000824c:	4b46      	ldr	r3, [pc, #280]	; (10008368 <i2c_read+0x180>)
1000824e:	4798      	blx	r3
    while(!i2c_write_done){
10008250:	e01a      	b.n	10008288 <i2c_read+0xa0>
        timeout++;
10008252:	230c      	movs	r3, #12
10008254:	18fb      	adds	r3, r7, r3
10008256:	881b      	ldrh	r3, [r3, #0]
10008258:	b29b      	uxth	r3, r3
1000825a:	3301      	adds	r3, #1
1000825c:	b29a      	uxth	r2, r3
1000825e:	230c      	movs	r3, #12
10008260:	18fb      	adds	r3, r7, r3
10008262:	801a      	strh	r2, [r3, #0]
        if(timeout >= I2C_TIMEOUT) {
10008264:	230c      	movs	r3, #12
10008266:	18fb      	adds	r3, r7, r3
10008268:	881b      	ldrh	r3, [r3, #0]
1000826a:	b29b      	uxth	r3, r3
1000826c:	4a3f      	ldr	r2, [pc, #252]	; (1000836c <i2c_read+0x184>)
1000826e:	4293      	cmp	r3, r2
10008270:	d90a      	bls.n	10008288 <i2c_read+0xa0>
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
10008272:	4b3f      	ldr	r3, [pc, #252]	; (10008370 <i2c_read+0x188>)
10008274:	0018      	movs	r0, r3
10008276:	4b3f      	ldr	r3, [pc, #252]	; (10008374 <i2c_read+0x18c>)
10008278:	4798      	blx	r3
1000827a:	4b3f      	ldr	r3, [pc, #252]	; (10008378 <i2c_read+0x190>)
1000827c:	0018      	movs	r0, r3
1000827e:	4b3f      	ldr	r3, [pc, #252]	; (1000837c <i2c_read+0x194>)
10008280:	4798      	blx	r3
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
10008282:	2301      	movs	r3, #1
10008284:	425b      	negs	r3, r3
10008286:	e063      	b.n	10008350 <i2c_read+0x168>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;

    i2c_write_done = false;
    //i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
    i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
    while(!i2c_write_done){
10008288:	4b35      	ldr	r3, [pc, #212]	; (10008360 <i2c_read+0x178>)
1000828a:	781b      	ldrb	r3, [r3, #0]
1000828c:	b2db      	uxtb	r3, r3
1000828e:	2201      	movs	r2, #1
10008290:	4053      	eors	r3, r2
10008292:	b2db      	uxtb	r3, r3
10008294:	2b00      	cmp	r3, #0
10008296:	d1dc      	bne.n	10008252 <i2c_read+0x6a>
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }

    i2c_read_done = false;
10008298:	4b39      	ldr	r3, [pc, #228]	; (10008380 <i2c_read+0x198>)
1000829a:	2200      	movs	r2, #0
1000829c:	701a      	strb	r2, [r3, #0]
    //i2c_master_read_packet_wait(&i2c_master_mpu9250_instance, &i2c_rpacket);
    i2c_master_read_packet_job(&i2c_master_mpu9250_instance, &i2c_rpacket);
1000829e:	4a2f      	ldr	r2, [pc, #188]	; (1000835c <i2c_read+0x174>)
100082a0:	4b30      	ldr	r3, [pc, #192]	; (10008364 <i2c_read+0x17c>)
100082a2:	0011      	movs	r1, r2
100082a4:	0018      	movs	r0, r3
100082a6:	4b37      	ldr	r3, [pc, #220]	; (10008384 <i2c_read+0x19c>)
100082a8:	4798      	blx	r3
    while(!i2c_read_done){
100082aa:	e028      	b.n	100082fe <i2c_read+0x116>
        timeout++;
100082ac:	230c      	movs	r3, #12
100082ae:	18fb      	adds	r3, r7, r3
100082b0:	881b      	ldrh	r3, [r3, #0]
100082b2:	b29b      	uxth	r3, r3
100082b4:	3301      	adds	r3, #1
100082b6:	b29a      	uxth	r2, r3
100082b8:	230c      	movs	r3, #12
100082ba:	18fb      	adds	r3, r7, r3
100082bc:	801a      	strh	r2, [r3, #0]
        printf("%d\n\r",timeout);
100082be:	230c      	movs	r3, #12
100082c0:	18fb      	adds	r3, r7, r3
100082c2:	881b      	ldrh	r3, [r3, #0]
100082c4:	b29b      	uxth	r3, r3
100082c6:	001a      	movs	r2, r3
100082c8:	4b2f      	ldr	r3, [pc, #188]	; (10008388 <i2c_read+0x1a0>)
100082ca:	0011      	movs	r1, r2
100082cc:	0018      	movs	r0, r3
100082ce:	4b2b      	ldr	r3, [pc, #172]	; (1000837c <i2c_read+0x194>)
100082d0:	4798      	blx	r3
        if(timeout >= I2C_TIMEOUT) {
100082d2:	230c      	movs	r3, #12
100082d4:	18fb      	adds	r3, r7, r3
100082d6:	881b      	ldrh	r3, [r3, #0]
100082d8:	b29b      	uxth	r3, r3
100082da:	4a24      	ldr	r2, [pc, #144]	; (1000836c <i2c_read+0x184>)
100082dc:	4293      	cmp	r3, r2
100082de:	d90e      	bls.n	100082fe <i2c_read+0x116>
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
100082e0:	4b23      	ldr	r3, [pc, #140]	; (10008370 <i2c_read+0x188>)
100082e2:	0018      	movs	r0, r3
100082e4:	4b23      	ldr	r3, [pc, #140]	; (10008374 <i2c_read+0x18c>)
100082e6:	4798      	blx	r3
100082e8:	4b23      	ldr	r3, [pc, #140]	; (10008378 <i2c_read+0x190>)
100082ea:	0018      	movs	r0, r3
100082ec:	4b23      	ldr	r3, [pc, #140]	; (1000837c <i2c_read+0x194>)
100082ee:	4798      	blx	r3
            i2c_master_send_stop(&i2c_master_mpu9250_instance);
100082f0:	4b1c      	ldr	r3, [pc, #112]	; (10008364 <i2c_read+0x17c>)
100082f2:	0018      	movs	r0, r3
100082f4:	4b25      	ldr	r3, [pc, #148]	; (1000838c <i2c_read+0x1a4>)
100082f6:	4798      	blx	r3
            return -1;
100082f8:	2301      	movs	r3, #1
100082fa:	425b      	negs	r3, r3
100082fc:	e028      	b.n	10008350 <i2c_read+0x168>
    }

    i2c_read_done = false;
    //i2c_master_read_packet_wait(&i2c_master_mpu9250_instance, &i2c_rpacket);
    i2c_master_read_packet_job(&i2c_master_mpu9250_instance, &i2c_rpacket);
    while(!i2c_read_done){
100082fe:	4b20      	ldr	r3, [pc, #128]	; (10008380 <i2c_read+0x198>)
10008300:	781b      	ldrb	r3, [r3, #0]
10008302:	b2db      	uxtb	r3, r3
10008304:	2201      	movs	r2, #1
10008306:	4053      	eors	r3, r2
10008308:	b2db      	uxtb	r3, r3
1000830a:	2b00      	cmp	r3, #0
1000830c:	d1ce      	bne.n	100082ac <i2c_read+0xc4>
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
            i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }
    for (uint8_t i = 0; i < data_len; i++) {
1000830e:	230f      	movs	r3, #15
10008310:	18fb      	adds	r3, r7, r3
10008312:	2200      	movs	r2, #0
10008314:	701a      	strb	r2, [r3, #0]
10008316:	e013      	b.n	10008340 <i2c_read+0x158>
        data[i] = i2c_rpacket.data[i];
10008318:	230f      	movs	r3, #15
1000831a:	18fb      	adds	r3, r7, r3
1000831c:	781b      	ldrb	r3, [r3, #0]
1000831e:	683a      	ldr	r2, [r7, #0]
10008320:	18d2      	adds	r2, r2, r3
10008322:	4b0e      	ldr	r3, [pc, #56]	; (1000835c <i2c_read+0x174>)
10008324:	6859      	ldr	r1, [r3, #4]
10008326:	230f      	movs	r3, #15
10008328:	18fb      	adds	r3, r7, r3
1000832a:	781b      	ldrb	r3, [r3, #0]
1000832c:	18cb      	adds	r3, r1, r3
1000832e:	781b      	ldrb	r3, [r3, #0]
10008330:	7013      	strb	r3, [r2, #0]
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
            i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }
    for (uint8_t i = 0; i < data_len; i++) {
10008332:	230f      	movs	r3, #15
10008334:	18fb      	adds	r3, r7, r3
10008336:	781a      	ldrb	r2, [r3, #0]
10008338:	230f      	movs	r3, #15
1000833a:	18fb      	adds	r3, r7, r3
1000833c:	3201      	adds	r2, #1
1000833e:	701a      	strb	r2, [r3, #0]
10008340:	230f      	movs	r3, #15
10008342:	18fa      	adds	r2, r7, r3
10008344:	1d7b      	adds	r3, r7, #5
10008346:	7812      	ldrb	r2, [r2, #0]
10008348:	781b      	ldrb	r3, [r3, #0]
1000834a:	429a      	cmp	r2, r3
1000834c:	d3e4      	bcc.n	10008318 <i2c_read+0x130>
        data[i] = i2c_rpacket.data[i];
    }
    return 0;
1000834e:	2300      	movs	r3, #0
}
10008350:	0018      	movs	r0, r3
10008352:	46bd      	mov	sp, r7
10008354:	b005      	add	sp, #20
10008356:	bd90      	pop	{r4, r7, pc}
10008358:	1001a3f0 	.word	0x1001a3f0
1000835c:	1001a3c0 	.word	0x1001a3c0
10008360:	1001a282 	.word	0x1001a282
10008364:	1001a494 	.word	0x1001a494
10008368:	1000c775 	.word	0x1000c775
1000836c:	000003e7 	.word	0x000003e7
10008370:	100184e0 	.word	0x100184e0
10008374:	10017591 	.word	0x10017591
10008378:	10018500 	.word	0x10018500
1000837c:	10017471 	.word	0x10017471
10008380:	1001a33e 	.word	0x1001a33e
10008384:	1000c69d 	.word	0x1000c69d
10008388:	1001851c 	.word	0x1001851c
1000838c:	1000c4a9 	.word	0x1000c4a9

10008390 <reg_int_cb>:
static inline int reg_int_cb(struct int_param_s *int_param)
{
10008390:	b580      	push	{r7, lr}
10008392:	b082      	sub	sp, #8
10008394:	af00      	add	r7, sp, #0
10008396:	6078      	str	r0, [r7, #4]
    sms_imu_register_callbacks();
10008398:	4b03      	ldr	r3, [pc, #12]	; (100083a8 <reg_int_cb+0x18>)
1000839a:	4798      	blx	r3
    return 0;
1000839c:	2300      	movs	r3, #0
}
1000839e:	0018      	movs	r0, r3
100083a0:	46bd      	mov	sp, r7
100083a2:	b002      	add	sp, #8
100083a4:	bd80      	pop	{r7, pc}
100083a6:	46c0      	nop			; (mov r8, r8)
100083a8:	1000a755 	.word	0x1000a755

100083ac <set_int_enable>:
*  interrupt is used.
*  @param[in]  enable      1 to enable interrupt.
*  @return     0 if successful.
*/
static int set_int_enable(unsigned char enable)
{
100083ac:	b590      	push	{r4, r7, lr}
100083ae:	b085      	sub	sp, #20
100083b0:	af00      	add	r7, sp, #0
100083b2:	0002      	movs	r2, r0
100083b4:	1dfb      	adds	r3, r7, #7
100083b6:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083b8:	4b2f      	ldr	r3, [pc, #188]	; (10008478 <set_int_enable+0xcc>)
100083ba:	2224      	movs	r2, #36	; 0x24
100083bc:	5c9b      	ldrb	r3, [r3, r2]
100083be:	2b00      	cmp	r3, #0
100083c0:	d022      	beq.n	10008408 <set_int_enable+0x5c>
        if (enable)
100083c2:	1dfb      	adds	r3, r7, #7
100083c4:	781b      	ldrb	r3, [r3, #0]
100083c6:	2b00      	cmp	r3, #0
100083c8:	d004      	beq.n	100083d4 <set_int_enable+0x28>
        tmp = BIT_DMP_INT_EN;
100083ca:	230f      	movs	r3, #15
100083cc:	18fb      	adds	r3, r7, r3
100083ce:	2202      	movs	r2, #2
100083d0:	701a      	strb	r2, [r3, #0]
100083d2:	e003      	b.n	100083dc <set_int_enable+0x30>
        else
        tmp = 0x00;
100083d4:	230f      	movs	r3, #15
100083d6:	18fb      	adds	r3, r7, r3
100083d8:	2200      	movs	r2, #0
100083da:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100083dc:	4b26      	ldr	r3, [pc, #152]	; (10008478 <set_int_enable+0xcc>)
100083de:	685b      	ldr	r3, [r3, #4]
100083e0:	7818      	ldrb	r0, [r3, #0]
100083e2:	4b25      	ldr	r3, [pc, #148]	; (10008478 <set_int_enable+0xcc>)
100083e4:	681b      	ldr	r3, [r3, #0]
100083e6:	7c59      	ldrb	r1, [r3, #17]
100083e8:	230f      	movs	r3, #15
100083ea:	18fb      	adds	r3, r7, r3
100083ec:	2201      	movs	r2, #1
100083ee:	4c23      	ldr	r4, [pc, #140]	; (1000847c <set_int_enable+0xd0>)
100083f0:	47a0      	blx	r4
100083f2:	1e03      	subs	r3, r0, #0
100083f4:	d002      	beq.n	100083fc <set_int_enable+0x50>
        return -1;
100083f6:	2301      	movs	r3, #1
100083f8:	425b      	negs	r3, r3
100083fa:	e039      	b.n	10008470 <set_int_enable+0xc4>
        st.chip_cfg.int_enable = tmp;
100083fc:	230f      	movs	r3, #15
100083fe:	18fb      	adds	r3, r7, r3
10008400:	781a      	ldrb	r2, [r3, #0]
10008402:	4b1d      	ldr	r3, [pc, #116]	; (10008478 <set_int_enable+0xcc>)
10008404:	745a      	strb	r2, [r3, #17]
10008406:	e032      	b.n	1000846e <set_int_enable+0xc2>
        } else {
        if (!st.chip_cfg.sensors)
10008408:	4b1b      	ldr	r3, [pc, #108]	; (10008478 <set_int_enable+0xcc>)
1000840a:	7a9b      	ldrb	r3, [r3, #10]
1000840c:	2b00      	cmp	r3, #0
1000840e:	d102      	bne.n	10008416 <set_int_enable+0x6a>
        return -1;
10008410:	2301      	movs	r3, #1
10008412:	425b      	negs	r3, r3
10008414:	e02c      	b.n	10008470 <set_int_enable+0xc4>
        if (enable && st.chip_cfg.int_enable)
10008416:	1dfb      	adds	r3, r7, #7
10008418:	781b      	ldrb	r3, [r3, #0]
1000841a:	2b00      	cmp	r3, #0
1000841c:	d005      	beq.n	1000842a <set_int_enable+0x7e>
1000841e:	4b16      	ldr	r3, [pc, #88]	; (10008478 <set_int_enable+0xcc>)
10008420:	7c5b      	ldrb	r3, [r3, #17]
10008422:	2b00      	cmp	r3, #0
10008424:	d001      	beq.n	1000842a <set_int_enable+0x7e>
        return 0;
10008426:	2300      	movs	r3, #0
10008428:	e022      	b.n	10008470 <set_int_enable+0xc4>
        if (enable)
1000842a:	1dfb      	adds	r3, r7, #7
1000842c:	781b      	ldrb	r3, [r3, #0]
1000842e:	2b00      	cmp	r3, #0
10008430:	d004      	beq.n	1000843c <set_int_enable+0x90>
        tmp = BIT_DATA_RDY_EN;
10008432:	230f      	movs	r3, #15
10008434:	18fb      	adds	r3, r7, r3
10008436:	2201      	movs	r2, #1
10008438:	701a      	strb	r2, [r3, #0]
1000843a:	e003      	b.n	10008444 <set_int_enable+0x98>
        else
        tmp = 0x00;
1000843c:	230f      	movs	r3, #15
1000843e:	18fb      	adds	r3, r7, r3
10008440:	2200      	movs	r2, #0
10008442:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008444:	4b0c      	ldr	r3, [pc, #48]	; (10008478 <set_int_enable+0xcc>)
10008446:	685b      	ldr	r3, [r3, #4]
10008448:	7818      	ldrb	r0, [r3, #0]
1000844a:	4b0b      	ldr	r3, [pc, #44]	; (10008478 <set_int_enable+0xcc>)
1000844c:	681b      	ldr	r3, [r3, #0]
1000844e:	7c59      	ldrb	r1, [r3, #17]
10008450:	230f      	movs	r3, #15
10008452:	18fb      	adds	r3, r7, r3
10008454:	2201      	movs	r2, #1
10008456:	4c09      	ldr	r4, [pc, #36]	; (1000847c <set_int_enable+0xd0>)
10008458:	47a0      	blx	r4
1000845a:	1e03      	subs	r3, r0, #0
1000845c:	d002      	beq.n	10008464 <set_int_enable+0xb8>
        return -1;
1000845e:	2301      	movs	r3, #1
10008460:	425b      	negs	r3, r3
10008462:	e005      	b.n	10008470 <set_int_enable+0xc4>
        st.chip_cfg.int_enable = tmp;
10008464:	230f      	movs	r3, #15
10008466:	18fb      	adds	r3, r7, r3
10008468:	781a      	ldrb	r2, [r3, #0]
1000846a:	4b03      	ldr	r3, [pc, #12]	; (10008478 <set_int_enable+0xcc>)
1000846c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
1000846e:	2300      	movs	r3, #0
}
10008470:	0018      	movs	r0, r3
10008472:	46bd      	mov	sp, r7
10008474:	b005      	add	sp, #20
10008476:	bd90      	pop	{r4, r7, pc}
10008478:	10019a50 	.word	0x10019a50
1000847c:	100080d5 	.word	0x100080d5

10008480 <mpu_init>:
*  Data ready interrupt: Disabled, active HIGH, unlatched.
*  @param[in]  int_param   Platform-specific parameters to interrupt API.
*  @return     0 if successful.
*/
int mpu_init(struct int_param_s *int_param)
{
10008480:	b590      	push	{r4, r7, lr}
10008482:	b085      	sub	sp, #20
10008484:	af00      	add	r7, sp, #0
10008486:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008488:	2308      	movs	r3, #8
1000848a:	18fb      	adds	r3, r7, r3
1000848c:	2280      	movs	r2, #128	; 0x80
1000848e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008490:	4b5e      	ldr	r3, [pc, #376]	; (1000860c <mpu_init+0x18c>)
10008492:	685b      	ldr	r3, [r3, #4]
10008494:	7818      	ldrb	r0, [r3, #0]
10008496:	4b5d      	ldr	r3, [pc, #372]	; (1000860c <mpu_init+0x18c>)
10008498:	681b      	ldr	r3, [r3, #0]
1000849a:	7d59      	ldrb	r1, [r3, #21]
1000849c:	2308      	movs	r3, #8
1000849e:	18fb      	adds	r3, r7, r3
100084a0:	2201      	movs	r2, #1
100084a2:	4c5b      	ldr	r4, [pc, #364]	; (10008610 <mpu_init+0x190>)
100084a4:	47a0      	blx	r4
100084a6:	1e03      	subs	r3, r0, #0
100084a8:	d002      	beq.n	100084b0 <mpu_init+0x30>
    return -1;
100084aa:	2301      	movs	r3, #1
100084ac:	425b      	negs	r3, r3
100084ae:	e0a9      	b.n	10008604 <mpu_init+0x184>
    delay_ms(100);
100084b0:	2064      	movs	r0, #100	; 0x64
100084b2:	4b58      	ldr	r3, [pc, #352]	; (10008614 <mpu_init+0x194>)
100084b4:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100084b6:	2308      	movs	r3, #8
100084b8:	18fb      	adds	r3, r7, r3
100084ba:	2200      	movs	r2, #0
100084bc:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100084be:	4b53      	ldr	r3, [pc, #332]	; (1000860c <mpu_init+0x18c>)
100084c0:	685b      	ldr	r3, [r3, #4]
100084c2:	7818      	ldrb	r0, [r3, #0]
100084c4:	4b51      	ldr	r3, [pc, #324]	; (1000860c <mpu_init+0x18c>)
100084c6:	681b      	ldr	r3, [r3, #0]
100084c8:	7d59      	ldrb	r1, [r3, #21]
100084ca:	2308      	movs	r3, #8
100084cc:	18fb      	adds	r3, r7, r3
100084ce:	2201      	movs	r2, #1
100084d0:	4c4f      	ldr	r4, [pc, #316]	; (10008610 <mpu_init+0x190>)
100084d2:	47a0      	blx	r4
100084d4:	1e03      	subs	r3, r0, #0
100084d6:	d002      	beq.n	100084de <mpu_init+0x5e>
    return -1;
100084d8:	2301      	movs	r3, #1
100084da:	425b      	negs	r3, r3
100084dc:	e092      	b.n	10008604 <mpu_init+0x184>

    st.chip_cfg.accel_half = 0;
100084de:	4b4b      	ldr	r3, [pc, #300]	; (1000860c <mpu_init+0x18c>)
100084e0:	2200      	movs	r2, #0
100084e2:	74da      	strb	r2, [r3, #19]

    #ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
100084e4:	2308      	movs	r3, #8
100084e6:	18fb      	adds	r3, r7, r3
100084e8:	2248      	movs	r2, #72	; 0x48
100084ea:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100084ec:	4b47      	ldr	r3, [pc, #284]	; (1000860c <mpu_init+0x18c>)
100084ee:	685b      	ldr	r3, [r3, #4]
100084f0:	7818      	ldrb	r0, [r3, #0]
100084f2:	4b46      	ldr	r3, [pc, #280]	; (1000860c <mpu_init+0x18c>)
100084f4:	681b      	ldr	r3, [r3, #0]
100084f6:	7a19      	ldrb	r1, [r3, #8]
100084f8:	2308      	movs	r3, #8
100084fa:	18fb      	adds	r3, r7, r3
100084fc:	2201      	movs	r2, #1
100084fe:	4c44      	ldr	r4, [pc, #272]	; (10008610 <mpu_init+0x190>)
10008500:	47a0      	blx	r4
10008502:	1e03      	subs	r3, r0, #0
10008504:	d002      	beq.n	1000850c <mpu_init+0x8c>
    return -1;
10008506:	2301      	movs	r3, #1
10008508:	425b      	negs	r3, r3
1000850a:	e07b      	b.n	10008604 <mpu_init+0x184>
    #endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1000850c:	4b3f      	ldr	r3, [pc, #252]	; (1000860c <mpu_init+0x18c>)
1000850e:	22ff      	movs	r2, #255	; 0xff
10008510:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10008512:	4b3e      	ldr	r3, [pc, #248]	; (1000860c <mpu_init+0x18c>)
10008514:	22ff      	movs	r2, #255	; 0xff
10008516:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10008518:	4b3c      	ldr	r3, [pc, #240]	; (1000860c <mpu_init+0x18c>)
1000851a:	22ff      	movs	r2, #255	; 0xff
1000851c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
1000851e:	4b3b      	ldr	r3, [pc, #236]	; (1000860c <mpu_init+0x18c>)
10008520:	22ff      	movs	r2, #255	; 0xff
10008522:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10008524:	4b39      	ldr	r3, [pc, #228]	; (1000860c <mpu_init+0x18c>)
10008526:	2201      	movs	r2, #1
10008528:	4252      	negs	r2, r2
1000852a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000852c:	4b37      	ldr	r3, [pc, #220]	; (1000860c <mpu_init+0x18c>)
1000852e:	22ff      	movs	r2, #255	; 0xff
10008530:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10008532:	4b36      	ldr	r3, [pc, #216]	; (1000860c <mpu_init+0x18c>)
10008534:	22ff      	movs	r2, #255	; 0xff
10008536:	749a      	strb	r2, [r3, #18]
    #ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10008538:	4b34      	ldr	r3, [pc, #208]	; (1000860c <mpu_init+0x18c>)
1000853a:	2201      	movs	r2, #1
1000853c:	4252      	negs	r2, r2
1000853e:	851a      	strh	r2, [r3, #40]	; 0x28
    #endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10008540:	4b32      	ldr	r3, [pc, #200]	; (1000860c <mpu_init+0x18c>)
10008542:	2201      	movs	r2, #1
10008544:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0;
10008546:	4b31      	ldr	r3, [pc, #196]	; (1000860c <mpu_init+0x18c>)
10008548:	2222      	movs	r2, #34	; 0x22
1000854a:	2100      	movs	r1, #0
1000854c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.latched_int = 0;
1000854e:	4b2f      	ldr	r3, [pc, #188]	; (1000860c <mpu_init+0x18c>)
10008550:	2223      	movs	r2, #35	; 0x23
10008552:	2100      	movs	r1, #0
10008554:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.int_motion_only = 0;
10008556:	4b2d      	ldr	r3, [pc, #180]	; (1000860c <mpu_init+0x18c>)
10008558:	2200      	movs	r2, #0
1000855a:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000855c:	4b2b      	ldr	r3, [pc, #172]	; (1000860c <mpu_init+0x18c>)
1000855e:	2200      	movs	r2, #0
10008560:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008562:	4b2d      	ldr	r3, [pc, #180]	; (10008618 <mpu_init+0x198>)
10008564:	220c      	movs	r2, #12
10008566:	2100      	movs	r1, #0
10008568:	0018      	movs	r0, r3
1000856a:	4b2c      	ldr	r3, [pc, #176]	; (1000861c <mpu_init+0x19c>)
1000856c:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
1000856e:	4b27      	ldr	r3, [pc, #156]	; (1000860c <mpu_init+0x18c>)
10008570:	2224      	movs	r2, #36	; 0x24
10008572:	2100      	movs	r1, #0
10008574:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_loaded = 0;
10008576:	4b25      	ldr	r3, [pc, #148]	; (1000860c <mpu_init+0x18c>)
10008578:	2225      	movs	r2, #37	; 0x25
1000857a:	2100      	movs	r1, #0
1000857c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_sample_rate = 0;
1000857e:	4b23      	ldr	r3, [pc, #140]	; (1000860c <mpu_init+0x18c>)
10008580:	2200      	movs	r2, #0
10008582:	84da      	strh	r2, [r3, #38]	; 0x26
    mpu_set_int_level(0); // 0 --> active low disabled => active high
10008584:	2000      	movs	r0, #0
10008586:	4b26      	ldr	r3, [pc, #152]	; (10008620 <mpu_init+0x1a0>)
10008588:	4798      	blx	r3

    if (mpu_set_gyro_fsr(250)) return -1; // 1B
1000858a:	20fa      	movs	r0, #250	; 0xfa
1000858c:	4b25      	ldr	r3, [pc, #148]	; (10008624 <mpu_init+0x1a4>)
1000858e:	4798      	blx	r3
10008590:	1e03      	subs	r3, r0, #0
10008592:	d002      	beq.n	1000859a <mpu_init+0x11a>
10008594:	2301      	movs	r3, #1
10008596:	425b      	negs	r3, r3
10008598:	e034      	b.n	10008604 <mpu_init+0x184>
    if (mpu_set_accel_fsr(4)) return -1; // 1B
1000859a:	2004      	movs	r0, #4
1000859c:	4b22      	ldr	r3, [pc, #136]	; (10008628 <mpu_init+0x1a8>)
1000859e:	4798      	blx	r3
100085a0:	1e03      	subs	r3, r0, #0
100085a2:	d002      	beq.n	100085aa <mpu_init+0x12a>
100085a4:	2301      	movs	r3, #1
100085a6:	425b      	negs	r3, r3
100085a8:	e02c      	b.n	10008604 <mpu_init+0x184>
    if (mpu_set_lpf(42)) return -1; // 1B
100085aa:	202a      	movs	r0, #42	; 0x2a
100085ac:	4b1f      	ldr	r3, [pc, #124]	; (1000862c <mpu_init+0x1ac>)
100085ae:	4798      	blx	r3
100085b0:	1e03      	subs	r3, r0, #0
100085b2:	d002      	beq.n	100085ba <mpu_init+0x13a>
100085b4:	2301      	movs	r3, #1
100085b6:	425b      	negs	r3, r3
100085b8:	e024      	b.n	10008604 <mpu_init+0x184>
    if (mpu_set_sample_rate(50)) return -1;
100085ba:	2032      	movs	r0, #50	; 0x32
100085bc:	4b1c      	ldr	r3, [pc, #112]	; (10008630 <mpu_init+0x1b0>)
100085be:	4798      	blx	r3
100085c0:	1e03      	subs	r3, r0, #0
100085c2:	d002      	beq.n	100085ca <mpu_init+0x14a>
100085c4:	2301      	movs	r3, #1
100085c6:	425b      	negs	r3, r3
100085c8:	e01c      	b.n	10008604 <mpu_init+0x184>
    if (mpu_configure_fifo(0)) return -1;
100085ca:	2000      	movs	r0, #0
100085cc:	4b19      	ldr	r3, [pc, #100]	; (10008634 <mpu_init+0x1b4>)
100085ce:	4798      	blx	r3
100085d0:	1e03      	subs	r3, r0, #0
100085d2:	d002      	beq.n	100085da <mpu_init+0x15a>
100085d4:	2301      	movs	r3, #1
100085d6:	425b      	negs	r3, r3
100085d8:	e014      	b.n	10008604 <mpu_init+0x184>

    #ifndef EMPL_TARGET_STM32F4
    if (int_param)
100085da:	687b      	ldr	r3, [r7, #4]
100085dc:	2b00      	cmp	r3, #0
100085de:	d003      	beq.n	100085e8 <mpu_init+0x168>
    reg_int_cb(int_param);
100085e0:	687b      	ldr	r3, [r7, #4]
100085e2:	0018      	movs	r0, r3
100085e4:	4b14      	ldr	r3, [pc, #80]	; (10008638 <mpu_init+0x1b8>)
100085e6:	4798      	blx	r3
    #endif

    #ifdef AK89xx_SECONDARY
    setup_compass();
100085e8:	4b14      	ldr	r3, [pc, #80]	; (1000863c <mpu_init+0x1bc>)
100085ea:	4798      	blx	r3
    if (mpu_set_compass_sample_rate(10)) return -1;
100085ec:	200a      	movs	r0, #10
100085ee:	4b14      	ldr	r3, [pc, #80]	; (10008640 <mpu_init+0x1c0>)
100085f0:	4798      	blx	r3
100085f2:	1e03      	subs	r3, r0, #0
100085f4:	d002      	beq.n	100085fc <mpu_init+0x17c>
100085f6:	2301      	movs	r3, #1
100085f8:	425b      	negs	r3, r3
100085fa:	e003      	b.n	10008604 <mpu_init+0x184>
    #else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0)) return -1;
    #endif

    mpu_set_sensors(0);
100085fc:	2000      	movs	r0, #0
100085fe:	4b11      	ldr	r3, [pc, #68]	; (10008644 <mpu_init+0x1c4>)
10008600:	4798      	blx	r3
    
    return 0;
10008602:	2300      	movs	r3, #0
}
10008604:	0018      	movs	r0, r3
10008606:	46bd      	mov	sp, r7
10008608:	b005      	add	sp, #20
1000860a:	bd90      	pop	{r4, r7, pc}
1000860c:	10019a50 	.word	0x10019a50
10008610:	100080d5 	.word	0x100080d5
10008614:	1000b175 	.word	0x1000b175
10008618:	10019a66 	.word	0x10019a66
1000861c:	10017329 	.word	0x10017329
10008620:	100093b5 	.word	0x100093b5
10008624:	10008a4d 	.word	0x10008a4d
10008628:	10008b85 	.word	0x10008b85
1000862c:	10008c3d 	.word	0x10008c3d
10008630:	10008d39 	.word	0x10008d39
10008634:	10008ef5 	.word	0x10008ef5
10008638:	10008391 	.word	0x10008391
1000863c:	10009541 	.word	0x10009541
10008640:	10008e51 	.word	0x10008e51
10008644:	10008fb5 	.word	0x10008fb5

10008648 <mpu_lp_accel_mode>:
*  @param[in]  rate        Minimum sampling rate, or zero to disable LP
*                          accel mode.
*  @return     0 if successful.
*/
int mpu_lp_accel_mode(unsigned short rate)
{
10008648:	b590      	push	{r4, r7, lr}
1000864a:	b085      	sub	sp, #20
1000864c:	af00      	add	r7, sp, #0
1000864e:	0002      	movs	r2, r0
10008650:	1dbb      	adds	r3, r7, #6
10008652:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (rate > 40)
10008654:	1dbb      	adds	r3, r7, #6
10008656:	881b      	ldrh	r3, [r3, #0]
10008658:	2b28      	cmp	r3, #40	; 0x28
1000865a:	d902      	bls.n	10008662 <mpu_lp_accel_mode+0x1a>
    return -1;
1000865c:	2301      	movs	r3, #1
1000865e:	425b      	negs	r3, r3
10008660:	e0ae      	b.n	100087c0 <mpu_lp_accel_mode+0x178>

    if (!rate) {
10008662:	1dbb      	adds	r3, r7, #6
10008664:	881b      	ldrh	r3, [r3, #0]
10008666:	2b00      	cmp	r3, #0
10008668:	d11f      	bne.n	100086aa <mpu_lp_accel_mode+0x62>
        mpu_set_int_latched(0);
1000866a:	2000      	movs	r0, #0
1000866c:	4b56      	ldr	r3, [pc, #344]	; (100087c8 <mpu_lp_accel_mode+0x180>)
1000866e:	4798      	blx	r3
        tmp[0] = 0;
10008670:	230c      	movs	r3, #12
10008672:	18fb      	adds	r3, r7, r3
10008674:	2200      	movs	r2, #0
10008676:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008678:	230c      	movs	r3, #12
1000867a:	18fb      	adds	r3, r7, r3
1000867c:	2207      	movs	r2, #7
1000867e:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008680:	4b52      	ldr	r3, [pc, #328]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008682:	685b      	ldr	r3, [r3, #4]
10008684:	7818      	ldrb	r0, [r3, #0]
10008686:	4b51      	ldr	r3, [pc, #324]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008688:	681b      	ldr	r3, [r3, #0]
1000868a:	7d59      	ldrb	r1, [r3, #21]
1000868c:	230c      	movs	r3, #12
1000868e:	18fb      	adds	r3, r7, r3
10008690:	2202      	movs	r2, #2
10008692:	4c4f      	ldr	r4, [pc, #316]	; (100087d0 <mpu_lp_accel_mode+0x188>)
10008694:	47a0      	blx	r4
10008696:	1e03      	subs	r3, r0, #0
10008698:	d002      	beq.n	100086a0 <mpu_lp_accel_mode+0x58>
        return -1;
1000869a:	2301      	movs	r3, #1
1000869c:	425b      	negs	r3, r3
1000869e:	e08f      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
        st.chip_cfg.lp_accel_mode = 0;
100086a0:	4b4a      	ldr	r3, [pc, #296]	; (100087cc <mpu_lp_accel_mode+0x184>)
100086a2:	2200      	movs	r2, #0
100086a4:	751a      	strb	r2, [r3, #20]
        return 0;
100086a6:	2300      	movs	r3, #0
100086a8:	e08a      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
    * it gets a chance to deassert the interrupt pin; therefore, we shift this
    * responsibility over to the MCU.
    *
    * Any register read will clear the interrupt.
    */
    mpu_set_int_latched(1);
100086aa:	2001      	movs	r0, #1
100086ac:	4b46      	ldr	r3, [pc, #280]	; (100087c8 <mpu_lp_accel_mode+0x180>)
100086ae:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
    return -1;
    #elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
100086b0:	1dbb      	adds	r3, r7, #6
100086b2:	881b      	ldrh	r3, [r3, #0]
100086b4:	2b01      	cmp	r3, #1
100086b6:	d104      	bne.n	100086c2 <mpu_lp_accel_mode+0x7a>
    tmp[0] = INV_LPA_1_25HZ;
100086b8:	230c      	movs	r3, #12
100086ba:	18fb      	adds	r3, r7, r3
100086bc:	2202      	movs	r2, #2
100086be:	701a      	strb	r2, [r3, #0]
100086c0:	e04d      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate == 2)
100086c2:	1dbb      	adds	r3, r7, #6
100086c4:	881b      	ldrh	r3, [r3, #0]
100086c6:	2b02      	cmp	r3, #2
100086c8:	d104      	bne.n	100086d4 <mpu_lp_accel_mode+0x8c>
    tmp[0] = INV_LPA_2_5HZ;
100086ca:	230c      	movs	r3, #12
100086cc:	18fb      	adds	r3, r7, r3
100086ce:	2203      	movs	r2, #3
100086d0:	701a      	strb	r2, [r3, #0]
100086d2:	e044      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 5)
100086d4:	1dbb      	adds	r3, r7, #6
100086d6:	881b      	ldrh	r3, [r3, #0]
100086d8:	2b05      	cmp	r3, #5
100086da:	d804      	bhi.n	100086e6 <mpu_lp_accel_mode+0x9e>
    tmp[0] = INV_LPA_5HZ;
100086dc:	230c      	movs	r3, #12
100086de:	18fb      	adds	r3, r7, r3
100086e0:	2204      	movs	r2, #4
100086e2:	701a      	strb	r2, [r3, #0]
100086e4:	e03b      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 10)
100086e6:	1dbb      	adds	r3, r7, #6
100086e8:	881b      	ldrh	r3, [r3, #0]
100086ea:	2b0a      	cmp	r3, #10
100086ec:	d804      	bhi.n	100086f8 <mpu_lp_accel_mode+0xb0>
    tmp[0] = INV_LPA_10HZ;
100086ee:	230c      	movs	r3, #12
100086f0:	18fb      	adds	r3, r7, r3
100086f2:	2205      	movs	r2, #5
100086f4:	701a      	strb	r2, [r3, #0]
100086f6:	e032      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 20)
100086f8:	1dbb      	adds	r3, r7, #6
100086fa:	881b      	ldrh	r3, [r3, #0]
100086fc:	2b14      	cmp	r3, #20
100086fe:	d804      	bhi.n	1000870a <mpu_lp_accel_mode+0xc2>
    tmp[0] = INV_LPA_20HZ;
10008700:	230c      	movs	r3, #12
10008702:	18fb      	adds	r3, r7, r3
10008704:	2206      	movs	r2, #6
10008706:	701a      	strb	r2, [r3, #0]
10008708:	e029      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 40)
1000870a:	1dbb      	adds	r3, r7, #6
1000870c:	881b      	ldrh	r3, [r3, #0]
1000870e:	2b28      	cmp	r3, #40	; 0x28
10008710:	d804      	bhi.n	1000871c <mpu_lp_accel_mode+0xd4>
    tmp[0] = INV_LPA_40HZ;
10008712:	230c      	movs	r3, #12
10008714:	18fb      	adds	r3, r7, r3
10008716:	2207      	movs	r2, #7
10008718:	701a      	strb	r2, [r3, #0]
1000871a:	e020      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 80)
1000871c:	1dbb      	adds	r3, r7, #6
1000871e:	881b      	ldrh	r3, [r3, #0]
10008720:	2b50      	cmp	r3, #80	; 0x50
10008722:	d804      	bhi.n	1000872e <mpu_lp_accel_mode+0xe6>
    tmp[0] = INV_LPA_80HZ;
10008724:	230c      	movs	r3, #12
10008726:	18fb      	adds	r3, r7, r3
10008728:	2208      	movs	r2, #8
1000872a:	701a      	strb	r2, [r3, #0]
1000872c:	e017      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 160)
1000872e:	1dbb      	adds	r3, r7, #6
10008730:	881b      	ldrh	r3, [r3, #0]
10008732:	2ba0      	cmp	r3, #160	; 0xa0
10008734:	d804      	bhi.n	10008740 <mpu_lp_accel_mode+0xf8>
    tmp[0] = INV_LPA_160HZ;
10008736:	230c      	movs	r3, #12
10008738:	18fb      	adds	r3, r7, r3
1000873a:	2209      	movs	r2, #9
1000873c:	701a      	strb	r2, [r3, #0]
1000873e:	e00e      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 320)
10008740:	1dbb      	adds	r3, r7, #6
10008742:	881a      	ldrh	r2, [r3, #0]
10008744:	23a0      	movs	r3, #160	; 0xa0
10008746:	005b      	lsls	r3, r3, #1
10008748:	429a      	cmp	r2, r3
1000874a:	d804      	bhi.n	10008756 <mpu_lp_accel_mode+0x10e>
    tmp[0] = INV_LPA_320HZ;
1000874c:	230c      	movs	r3, #12
1000874e:	18fb      	adds	r3, r7, r3
10008750:	220a      	movs	r2, #10
10008752:	701a      	strb	r2, [r3, #0]
10008754:	e003      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else
    tmp[0] = INV_LPA_640HZ;
10008756:	230c      	movs	r3, #12
10008758:	18fb      	adds	r3, r7, r3
1000875a:	220b      	movs	r2, #11
1000875c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
1000875e:	4b1b      	ldr	r3, [pc, #108]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008760:	685b      	ldr	r3, [r3, #4]
10008762:	7818      	ldrb	r0, [r3, #0]
10008764:	4b19      	ldr	r3, [pc, #100]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008766:	681b      	ldr	r3, [r3, #0]
10008768:	7a59      	ldrb	r1, [r3, #9]
1000876a:	230c      	movs	r3, #12
1000876c:	18fb      	adds	r3, r7, r3
1000876e:	2201      	movs	r2, #1
10008770:	4c17      	ldr	r4, [pc, #92]	; (100087d0 <mpu_lp_accel_mode+0x188>)
10008772:	47a0      	blx	r4
10008774:	1e03      	subs	r3, r0, #0
10008776:	d002      	beq.n	1000877e <mpu_lp_accel_mode+0x136>
    return -1;
10008778:	2301      	movs	r3, #1
1000877a:	425b      	negs	r3, r3
1000877c:	e020      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
    tmp[0] = BIT_LPA_CYCLE;
1000877e:	230c      	movs	r3, #12
10008780:	18fb      	adds	r3, r7, r3
10008782:	2220      	movs	r2, #32
10008784:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008786:	4b11      	ldr	r3, [pc, #68]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008788:	685b      	ldr	r3, [r3, #4]
1000878a:	7818      	ldrb	r0, [r3, #0]
1000878c:	4b0f      	ldr	r3, [pc, #60]	; (100087cc <mpu_lp_accel_mode+0x184>)
1000878e:	681b      	ldr	r3, [r3, #0]
10008790:	7d59      	ldrb	r1, [r3, #21]
10008792:	230c      	movs	r3, #12
10008794:	18fb      	adds	r3, r7, r3
10008796:	2201      	movs	r2, #1
10008798:	4c0d      	ldr	r4, [pc, #52]	; (100087d0 <mpu_lp_accel_mode+0x188>)
1000879a:	47a0      	blx	r4
1000879c:	1e03      	subs	r3, r0, #0
1000879e:	d002      	beq.n	100087a6 <mpu_lp_accel_mode+0x15e>
    return -1;
100087a0:	2301      	movs	r3, #1
100087a2:	425b      	negs	r3, r3
100087a4:	e00c      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
    #endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
100087a6:	4b09      	ldr	r3, [pc, #36]	; (100087cc <mpu_lp_accel_mode+0x184>)
100087a8:	2208      	movs	r2, #8
100087aa:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
100087ac:	4b07      	ldr	r3, [pc, #28]	; (100087cc <mpu_lp_accel_mode+0x184>)
100087ae:	2200      	movs	r2, #0
100087b0:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
100087b2:	4b06      	ldr	r3, [pc, #24]	; (100087cc <mpu_lp_accel_mode+0x184>)
100087b4:	2201      	movs	r2, #1
100087b6:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
100087b8:	2000      	movs	r0, #0
100087ba:	4b06      	ldr	r3, [pc, #24]	; (100087d4 <mpu_lp_accel_mode+0x18c>)
100087bc:	4798      	blx	r3

    return 0;
100087be:	2300      	movs	r3, #0
}
100087c0:	0018      	movs	r0, r3
100087c2:	46bd      	mov	sp, r7
100087c4:	b005      	add	sp, #20
100087c6:	bd90      	pop	{r4, r7, pc}
100087c8:	100093d9 	.word	0x100093d9
100087cc:	10019a50 	.word	0x10019a50
100087d0:	100080d5 	.word	0x100080d5
100087d4:	10008ef5 	.word	0x10008ef5

100087d8 <mpu_reset_fifo>:
/**
*  @brief  Reset FIFO read/write pointers.
*  @return 0 if successful.
*/
int mpu_reset_fifo(void)
{
100087d8:	b590      	push	{r4, r7, lr}
100087da:	b083      	sub	sp, #12
100087dc:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087de:	4b7f      	ldr	r3, [pc, #508]	; (100089dc <mpu_reset_fifo+0x204>)
100087e0:	7a9b      	ldrb	r3, [r3, #10]
100087e2:	2b00      	cmp	r3, #0
100087e4:	d102      	bne.n	100087ec <mpu_reset_fifo+0x14>
    return -1;
100087e6:	2301      	movs	r3, #1
100087e8:	425b      	negs	r3, r3
100087ea:	e0f3      	b.n	100089d4 <mpu_reset_fifo+0x1fc>

    data = 0;
100087ec:	1dfb      	adds	r3, r7, #7
100087ee:	2200      	movs	r2, #0
100087f0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100087f2:	4b7a      	ldr	r3, [pc, #488]	; (100089dc <mpu_reset_fifo+0x204>)
100087f4:	685b      	ldr	r3, [r3, #4]
100087f6:	7818      	ldrb	r0, [r3, #0]
100087f8:	4b78      	ldr	r3, [pc, #480]	; (100089dc <mpu_reset_fifo+0x204>)
100087fa:	681b      	ldr	r3, [r3, #0]
100087fc:	7c59      	ldrb	r1, [r3, #17]
100087fe:	1dfb      	adds	r3, r7, #7
10008800:	2201      	movs	r2, #1
10008802:	4c77      	ldr	r4, [pc, #476]	; (100089e0 <mpu_reset_fifo+0x208>)
10008804:	47a0      	blx	r4
10008806:	1e03      	subs	r3, r0, #0
10008808:	d002      	beq.n	10008810 <mpu_reset_fifo+0x38>
    return -1;
1000880a:	2301      	movs	r3, #1
1000880c:	425b      	negs	r3, r3
1000880e:	e0e1      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008810:	4b72      	ldr	r3, [pc, #456]	; (100089dc <mpu_reset_fifo+0x204>)
10008812:	685b      	ldr	r3, [r3, #4]
10008814:	7818      	ldrb	r0, [r3, #0]
10008816:	4b71      	ldr	r3, [pc, #452]	; (100089dc <mpu_reset_fifo+0x204>)
10008818:	681b      	ldr	r3, [r3, #0]
1000881a:	7959      	ldrb	r1, [r3, #5]
1000881c:	1dfb      	adds	r3, r7, #7
1000881e:	2201      	movs	r2, #1
10008820:	4c6f      	ldr	r4, [pc, #444]	; (100089e0 <mpu_reset_fifo+0x208>)
10008822:	47a0      	blx	r4
10008824:	1e03      	subs	r3, r0, #0
10008826:	d002      	beq.n	1000882e <mpu_reset_fifo+0x56>
    return -1;
10008828:	2301      	movs	r3, #1
1000882a:	425b      	negs	r3, r3
1000882c:	e0d2      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000882e:	4b6b      	ldr	r3, [pc, #428]	; (100089dc <mpu_reset_fifo+0x204>)
10008830:	685b      	ldr	r3, [r3, #4]
10008832:	7818      	ldrb	r0, [r3, #0]
10008834:	4b69      	ldr	r3, [pc, #420]	; (100089dc <mpu_reset_fifo+0x204>)
10008836:	681b      	ldr	r3, [r3, #0]
10008838:	7919      	ldrb	r1, [r3, #4]
1000883a:	1dfb      	adds	r3, r7, #7
1000883c:	2201      	movs	r2, #1
1000883e:	4c68      	ldr	r4, [pc, #416]	; (100089e0 <mpu_reset_fifo+0x208>)
10008840:	47a0      	blx	r4
10008842:	1e03      	subs	r3, r0, #0
10008844:	d002      	beq.n	1000884c <mpu_reset_fifo+0x74>
    return -1;
10008846:	2301      	movs	r3, #1
10008848:	425b      	negs	r3, r3
1000884a:	e0c3      	b.n	100089d4 <mpu_reset_fifo+0x1fc>

    if (st.chip_cfg.dmp_on) {
1000884c:	4b63      	ldr	r3, [pc, #396]	; (100089dc <mpu_reset_fifo+0x204>)
1000884e:	2224      	movs	r2, #36	; 0x24
10008850:	5c9b      	ldrb	r3, [r3, r2]
10008852:	2b00      	cmp	r3, #0
10008854:	d05f      	beq.n	10008916 <mpu_reset_fifo+0x13e>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008856:	1dfb      	adds	r3, r7, #7
10008858:	220c      	movs	r2, #12
1000885a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000885c:	4b5f      	ldr	r3, [pc, #380]	; (100089dc <mpu_reset_fifo+0x204>)
1000885e:	685b      	ldr	r3, [r3, #4]
10008860:	7818      	ldrb	r0, [r3, #0]
10008862:	4b5e      	ldr	r3, [pc, #376]	; (100089dc <mpu_reset_fifo+0x204>)
10008864:	681b      	ldr	r3, [r3, #0]
10008866:	7919      	ldrb	r1, [r3, #4]
10008868:	1dfb      	adds	r3, r7, #7
1000886a:	2201      	movs	r2, #1
1000886c:	4c5c      	ldr	r4, [pc, #368]	; (100089e0 <mpu_reset_fifo+0x208>)
1000886e:	47a0      	blx	r4
10008870:	1e03      	subs	r3, r0, #0
10008872:	d002      	beq.n	1000887a <mpu_reset_fifo+0xa2>
        return -1;
10008874:	2301      	movs	r3, #1
10008876:	425b      	negs	r3, r3
10008878:	e0ac      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        delay_ms(50);
1000887a:	2032      	movs	r0, #50	; 0x32
1000887c:	4b59      	ldr	r3, [pc, #356]	; (100089e4 <mpu_reset_fifo+0x20c>)
1000887e:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008880:	1dfb      	adds	r3, r7, #7
10008882:	22c0      	movs	r2, #192	; 0xc0
10008884:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008886:	4b55      	ldr	r3, [pc, #340]	; (100089dc <mpu_reset_fifo+0x204>)
10008888:	7a9b      	ldrb	r3, [r3, #10]
1000888a:	001a      	movs	r2, r3
1000888c:	2301      	movs	r3, #1
1000888e:	4013      	ands	r3, r2
10008890:	d006      	beq.n	100088a0 <mpu_reset_fifo+0xc8>
        data |= BIT_AUX_IF_EN;
10008892:	1dfb      	adds	r3, r7, #7
10008894:	781b      	ldrb	r3, [r3, #0]
10008896:	2220      	movs	r2, #32
10008898:	4313      	orrs	r3, r2
1000889a:	b2da      	uxtb	r2, r3
1000889c:	1dfb      	adds	r3, r7, #7
1000889e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100088a0:	4b4e      	ldr	r3, [pc, #312]	; (100089dc <mpu_reset_fifo+0x204>)
100088a2:	685b      	ldr	r3, [r3, #4]
100088a4:	7818      	ldrb	r0, [r3, #0]
100088a6:	4b4d      	ldr	r3, [pc, #308]	; (100089dc <mpu_reset_fifo+0x204>)
100088a8:	681b      	ldr	r3, [r3, #0]
100088aa:	7919      	ldrb	r1, [r3, #4]
100088ac:	1dfb      	adds	r3, r7, #7
100088ae:	2201      	movs	r2, #1
100088b0:	4c4b      	ldr	r4, [pc, #300]	; (100089e0 <mpu_reset_fifo+0x208>)
100088b2:	47a0      	blx	r4
100088b4:	1e03      	subs	r3, r0, #0
100088b6:	d002      	beq.n	100088be <mpu_reset_fifo+0xe6>
        return -1;
100088b8:	2301      	movs	r3, #1
100088ba:	425b      	negs	r3, r3
100088bc:	e08a      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        if (st.chip_cfg.int_enable)
100088be:	4b47      	ldr	r3, [pc, #284]	; (100089dc <mpu_reset_fifo+0x204>)
100088c0:	7c5b      	ldrb	r3, [r3, #17]
100088c2:	2b00      	cmp	r3, #0
100088c4:	d003      	beq.n	100088ce <mpu_reset_fifo+0xf6>
        data = BIT_DMP_INT_EN;
100088c6:	1dfb      	adds	r3, r7, #7
100088c8:	2202      	movs	r2, #2
100088ca:	701a      	strb	r2, [r3, #0]
100088cc:	e002      	b.n	100088d4 <mpu_reset_fifo+0xfc>
        else
        data = 0;
100088ce:	1dfb      	adds	r3, r7, #7
100088d0:	2200      	movs	r2, #0
100088d2:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100088d4:	4b41      	ldr	r3, [pc, #260]	; (100089dc <mpu_reset_fifo+0x204>)
100088d6:	685b      	ldr	r3, [r3, #4]
100088d8:	7818      	ldrb	r0, [r3, #0]
100088da:	4b40      	ldr	r3, [pc, #256]	; (100089dc <mpu_reset_fifo+0x204>)
100088dc:	681b      	ldr	r3, [r3, #0]
100088de:	7c59      	ldrb	r1, [r3, #17]
100088e0:	1dfb      	adds	r3, r7, #7
100088e2:	2201      	movs	r2, #1
100088e4:	4c3e      	ldr	r4, [pc, #248]	; (100089e0 <mpu_reset_fifo+0x208>)
100088e6:	47a0      	blx	r4
100088e8:	1e03      	subs	r3, r0, #0
100088ea:	d002      	beq.n	100088f2 <mpu_reset_fifo+0x11a>
        return -1;
100088ec:	2301      	movs	r3, #1
100088ee:	425b      	negs	r3, r3
100088f0:	e070      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        data = 0;
100088f2:	1dfb      	adds	r3, r7, #7
100088f4:	2200      	movs	r2, #0
100088f6:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100088f8:	4b38      	ldr	r3, [pc, #224]	; (100089dc <mpu_reset_fifo+0x204>)
100088fa:	685b      	ldr	r3, [r3, #4]
100088fc:	7818      	ldrb	r0, [r3, #0]
100088fe:	4b37      	ldr	r3, [pc, #220]	; (100089dc <mpu_reset_fifo+0x204>)
10008900:	681b      	ldr	r3, [r3, #0]
10008902:	7959      	ldrb	r1, [r3, #5]
10008904:	1dfb      	adds	r3, r7, #7
10008906:	2201      	movs	r2, #1
10008908:	4c35      	ldr	r4, [pc, #212]	; (100089e0 <mpu_reset_fifo+0x208>)
1000890a:	47a0      	blx	r4
1000890c:	1e03      	subs	r3, r0, #0
1000890e:	d060      	beq.n	100089d2 <mpu_reset_fifo+0x1fa>
        return -1;
10008910:	2301      	movs	r3, #1
10008912:	425b      	negs	r3, r3
10008914:	e05e      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        } else {
        data = BIT_FIFO_RST;
10008916:	1dfb      	adds	r3, r7, #7
10008918:	2204      	movs	r2, #4
1000891a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000891c:	4b2f      	ldr	r3, [pc, #188]	; (100089dc <mpu_reset_fifo+0x204>)
1000891e:	685b      	ldr	r3, [r3, #4]
10008920:	7818      	ldrb	r0, [r3, #0]
10008922:	4b2e      	ldr	r3, [pc, #184]	; (100089dc <mpu_reset_fifo+0x204>)
10008924:	681b      	ldr	r3, [r3, #0]
10008926:	7919      	ldrb	r1, [r3, #4]
10008928:	1dfb      	adds	r3, r7, #7
1000892a:	2201      	movs	r2, #1
1000892c:	4c2c      	ldr	r4, [pc, #176]	; (100089e0 <mpu_reset_fifo+0x208>)
1000892e:	47a0      	blx	r4
10008930:	1e03      	subs	r3, r0, #0
10008932:	d002      	beq.n	1000893a <mpu_reset_fifo+0x162>
        return -1;
10008934:	2301      	movs	r3, #1
10008936:	425b      	negs	r3, r3
10008938:	e04c      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000893a:	4b28      	ldr	r3, [pc, #160]	; (100089dc <mpu_reset_fifo+0x204>)
1000893c:	7c9b      	ldrb	r3, [r3, #18]
1000893e:	2b00      	cmp	r3, #0
10008940:	d105      	bne.n	1000894e <mpu_reset_fifo+0x176>
10008942:	4b26      	ldr	r3, [pc, #152]	; (100089dc <mpu_reset_fifo+0x204>)
10008944:	7a9b      	ldrb	r3, [r3, #10]
10008946:	001a      	movs	r2, r3
10008948:	2301      	movs	r3, #1
1000894a:	4013      	ands	r3, r2
1000894c:	d103      	bne.n	10008956 <mpu_reset_fifo+0x17e>
        data = BIT_FIFO_EN;
1000894e:	1dfb      	adds	r3, r7, #7
10008950:	2240      	movs	r2, #64	; 0x40
10008952:	701a      	strb	r2, [r3, #0]
10008954:	e002      	b.n	1000895c <mpu_reset_fifo+0x184>
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008956:	1dfb      	adds	r3, r7, #7
10008958:	2260      	movs	r2, #96	; 0x60
1000895a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000895c:	4b1f      	ldr	r3, [pc, #124]	; (100089dc <mpu_reset_fifo+0x204>)
1000895e:	685b      	ldr	r3, [r3, #4]
10008960:	7818      	ldrb	r0, [r3, #0]
10008962:	4b1e      	ldr	r3, [pc, #120]	; (100089dc <mpu_reset_fifo+0x204>)
10008964:	681b      	ldr	r3, [r3, #0]
10008966:	7919      	ldrb	r1, [r3, #4]
10008968:	1dfb      	adds	r3, r7, #7
1000896a:	2201      	movs	r2, #1
1000896c:	4c1c      	ldr	r4, [pc, #112]	; (100089e0 <mpu_reset_fifo+0x208>)
1000896e:	47a0      	blx	r4
10008970:	1e03      	subs	r3, r0, #0
10008972:	d002      	beq.n	1000897a <mpu_reset_fifo+0x1a2>
        return -1;
10008974:	2301      	movs	r3, #1
10008976:	425b      	negs	r3, r3
10008978:	e02c      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        delay_ms(50);
1000897a:	2032      	movs	r0, #50	; 0x32
1000897c:	4b19      	ldr	r3, [pc, #100]	; (100089e4 <mpu_reset_fifo+0x20c>)
1000897e:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008980:	4b16      	ldr	r3, [pc, #88]	; (100089dc <mpu_reset_fifo+0x204>)
10008982:	7c5b      	ldrb	r3, [r3, #17]
10008984:	2b00      	cmp	r3, #0
10008986:	d003      	beq.n	10008990 <mpu_reset_fifo+0x1b8>
        data = BIT_DATA_RDY_EN;
10008988:	1dfb      	adds	r3, r7, #7
1000898a:	2201      	movs	r2, #1
1000898c:	701a      	strb	r2, [r3, #0]
1000898e:	e002      	b.n	10008996 <mpu_reset_fifo+0x1be>
        else
        data = 0;
10008990:	1dfb      	adds	r3, r7, #7
10008992:	2200      	movs	r2, #0
10008994:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008996:	4b11      	ldr	r3, [pc, #68]	; (100089dc <mpu_reset_fifo+0x204>)
10008998:	685b      	ldr	r3, [r3, #4]
1000899a:	7818      	ldrb	r0, [r3, #0]
1000899c:	4b0f      	ldr	r3, [pc, #60]	; (100089dc <mpu_reset_fifo+0x204>)
1000899e:	681b      	ldr	r3, [r3, #0]
100089a0:	7c59      	ldrb	r1, [r3, #17]
100089a2:	1dfb      	adds	r3, r7, #7
100089a4:	2201      	movs	r2, #1
100089a6:	4c0e      	ldr	r4, [pc, #56]	; (100089e0 <mpu_reset_fifo+0x208>)
100089a8:	47a0      	blx	r4
100089aa:	1e03      	subs	r3, r0, #0
100089ac:	d002      	beq.n	100089b4 <mpu_reset_fifo+0x1dc>
        return -1;
100089ae:	2301      	movs	r3, #1
100089b0:	425b      	negs	r3, r3
100089b2:	e00f      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100089b4:	4b09      	ldr	r3, [pc, #36]	; (100089dc <mpu_reset_fifo+0x204>)
100089b6:	685b      	ldr	r3, [r3, #4]
100089b8:	7818      	ldrb	r0, [r3, #0]
100089ba:	4b08      	ldr	r3, [pc, #32]	; (100089dc <mpu_reset_fifo+0x204>)
100089bc:	681b      	ldr	r3, [r3, #0]
100089be:	7959      	ldrb	r1, [r3, #5]
100089c0:	4b09      	ldr	r3, [pc, #36]	; (100089e8 <mpu_reset_fifo+0x210>)
100089c2:	2201      	movs	r2, #1
100089c4:	4c06      	ldr	r4, [pc, #24]	; (100089e0 <mpu_reset_fifo+0x208>)
100089c6:	47a0      	blx	r4
100089c8:	1e03      	subs	r3, r0, #0
100089ca:	d002      	beq.n	100089d2 <mpu_reset_fifo+0x1fa>
        return -1;
100089cc:	2301      	movs	r3, #1
100089ce:	425b      	negs	r3, r3
100089d0:	e000      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
    }
    return 0;
100089d2:	2300      	movs	r3, #0
}
100089d4:	0018      	movs	r0, r3
100089d6:	46bd      	mov	sp, r7
100089d8:	b003      	add	sp, #12
100089da:	bd90      	pop	{r4, r7, pc}
100089dc:	10019a50 	.word	0x10019a50
100089e0:	100080d5 	.word	0x100080d5
100089e4:	1000b175 	.word	0x1000b175
100089e8:	10019a60 	.word	0x10019a60

100089ec <mpu_get_gyro_fsr>:
*  @brief      Get the gyro full-scale range.
*  @param[out] fsr Current full-scale range.
*  @return     0 if successful.
*/
int mpu_get_gyro_fsr(unsigned short *fsr)
{
100089ec:	b580      	push	{r7, lr}
100089ee:	b082      	sub	sp, #8
100089f0:	af00      	add	r7, sp, #0
100089f2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
100089f4:	4b14      	ldr	r3, [pc, #80]	; (10008a48 <mpu_get_gyro_fsr+0x5c>)
100089f6:	7a1b      	ldrb	r3, [r3, #8]
100089f8:	2b01      	cmp	r3, #1
100089fa:	d00c      	beq.n	10008a16 <mpu_get_gyro_fsr+0x2a>
100089fc:	dc02      	bgt.n	10008a04 <mpu_get_gyro_fsr+0x18>
100089fe:	2b00      	cmp	r3, #0
10008a00:	d005      	beq.n	10008a0e <mpu_get_gyro_fsr+0x22>
10008a02:	e017      	b.n	10008a34 <mpu_get_gyro_fsr+0x48>
10008a04:	2b02      	cmp	r3, #2
10008a06:	d00b      	beq.n	10008a20 <mpu_get_gyro_fsr+0x34>
10008a08:	2b03      	cmp	r3, #3
10008a0a:	d00e      	beq.n	10008a2a <mpu_get_gyro_fsr+0x3e>
10008a0c:	e012      	b.n	10008a34 <mpu_get_gyro_fsr+0x48>
        case INV_FSR_250DPS:
        fsr[0] = 250;
10008a0e:	687b      	ldr	r3, [r7, #4]
10008a10:	22fa      	movs	r2, #250	; 0xfa
10008a12:	801a      	strh	r2, [r3, #0]
        break;
10008a14:	e012      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        case INV_FSR_500DPS:
        fsr[0] = 500;
10008a16:	687b      	ldr	r3, [r7, #4]
10008a18:	22fa      	movs	r2, #250	; 0xfa
10008a1a:	0052      	lsls	r2, r2, #1
10008a1c:	801a      	strh	r2, [r3, #0]
        break;
10008a1e:	e00d      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        case INV_FSR_1000DPS:
        fsr[0] = 1000;
10008a20:	687b      	ldr	r3, [r7, #4]
10008a22:	22fa      	movs	r2, #250	; 0xfa
10008a24:	0092      	lsls	r2, r2, #2
10008a26:	801a      	strh	r2, [r3, #0]
        break;
10008a28:	e008      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008a2a:	687b      	ldr	r3, [r7, #4]
10008a2c:	22fa      	movs	r2, #250	; 0xfa
10008a2e:	00d2      	lsls	r2, r2, #3
10008a30:	801a      	strh	r2, [r3, #0]
        break;
10008a32:	e003      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        default:
        fsr[0] = 0;
10008a34:	687b      	ldr	r3, [r7, #4]
10008a36:	2200      	movs	r2, #0
10008a38:	801a      	strh	r2, [r3, #0]
        break;
10008a3a:	46c0      	nop			; (mov r8, r8)
    }
    return 0;
10008a3c:	2300      	movs	r3, #0
}
10008a3e:	0018      	movs	r0, r3
10008a40:	46bd      	mov	sp, r7
10008a42:	b002      	add	sp, #8
10008a44:	bd80      	pop	{r7, pc}
10008a46:	46c0      	nop			; (mov r8, r8)
10008a48:	10019a50 	.word	0x10019a50

10008a4c <mpu_set_gyro_fsr>:
*  @brief      Set the gyro full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008a4c:	b590      	push	{r4, r7, lr}
10008a4e:	b085      	sub	sp, #20
10008a50:	af00      	add	r7, sp, #0
10008a52:	0002      	movs	r2, r0
10008a54:	1dbb      	adds	r3, r7, #6
10008a56:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008a58:	4b2d      	ldr	r3, [pc, #180]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008a5a:	7a9b      	ldrb	r3, [r3, #10]
10008a5c:	2b00      	cmp	r3, #0
10008a5e:	d102      	bne.n	10008a66 <mpu_set_gyro_fsr+0x1a>
    return -1;
10008a60:	2301      	movs	r3, #1
10008a62:	425b      	negs	r3, r3
10008a64:	e04f      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>

    switch (fsr) {
10008a66:	1dbb      	adds	r3, r7, #6
10008a68:	881b      	ldrh	r3, [r3, #0]
10008a6a:	22fa      	movs	r2, #250	; 0xfa
10008a6c:	0052      	lsls	r2, r2, #1
10008a6e:	4293      	cmp	r3, r2
10008a70:	d014      	beq.n	10008a9c <mpu_set_gyro_fsr+0x50>
10008a72:	22fa      	movs	r2, #250	; 0xfa
10008a74:	0052      	lsls	r2, r2, #1
10008a76:	4293      	cmp	r3, r2
10008a78:	dc02      	bgt.n	10008a80 <mpu_set_gyro_fsr+0x34>
10008a7a:	2bfa      	cmp	r3, #250	; 0xfa
10008a7c:	d009      	beq.n	10008a92 <mpu_set_gyro_fsr+0x46>
10008a7e:	e01c      	b.n	10008aba <mpu_set_gyro_fsr+0x6e>
10008a80:	22fa      	movs	r2, #250	; 0xfa
10008a82:	0092      	lsls	r2, r2, #2
10008a84:	4293      	cmp	r3, r2
10008a86:	d00e      	beq.n	10008aa6 <mpu_set_gyro_fsr+0x5a>
10008a88:	22fa      	movs	r2, #250	; 0xfa
10008a8a:	00d2      	lsls	r2, r2, #3
10008a8c:	4293      	cmp	r3, r2
10008a8e:	d00f      	beq.n	10008ab0 <mpu_set_gyro_fsr+0x64>
10008a90:	e013      	b.n	10008aba <mpu_set_gyro_fsr+0x6e>
        case 250:
        data = INV_FSR_250DPS << 3;
10008a92:	230f      	movs	r3, #15
10008a94:	18fb      	adds	r3, r7, r3
10008a96:	2200      	movs	r2, #0
10008a98:	701a      	strb	r2, [r3, #0]
        break;
10008a9a:	e011      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        case 500:
        data = INV_FSR_500DPS << 3;
10008a9c:	230f      	movs	r3, #15
10008a9e:	18fb      	adds	r3, r7, r3
10008aa0:	2208      	movs	r2, #8
10008aa2:	701a      	strb	r2, [r3, #0]
        break;
10008aa4:	e00c      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        case 1000:
        data = INV_FSR_1000DPS << 3;
10008aa6:	230f      	movs	r3, #15
10008aa8:	18fb      	adds	r3, r7, r3
10008aaa:	2210      	movs	r2, #16
10008aac:	701a      	strb	r2, [r3, #0]
        break;
10008aae:	e007      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        case 2000:
        data = INV_FSR_2000DPS << 3;
10008ab0:	230f      	movs	r3, #15
10008ab2:	18fb      	adds	r3, r7, r3
10008ab4:	2218      	movs	r2, #24
10008ab6:	701a      	strb	r2, [r3, #0]
        break;
10008ab8:	e002      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        default:
        return -1;
10008aba:	2301      	movs	r3, #1
10008abc:	425b      	negs	r3, r3
10008abe:	e022      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008ac0:	4b13      	ldr	r3, [pc, #76]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008ac2:	7a1a      	ldrb	r2, [r3, #8]
10008ac4:	230f      	movs	r3, #15
10008ac6:	18fb      	adds	r3, r7, r3
10008ac8:	781b      	ldrb	r3, [r3, #0]
10008aca:	08db      	lsrs	r3, r3, #3
10008acc:	b2db      	uxtb	r3, r3
10008ace:	429a      	cmp	r2, r3
10008ad0:	d101      	bne.n	10008ad6 <mpu_set_gyro_fsr+0x8a>
    return 0;
10008ad2:	2300      	movs	r3, #0
10008ad4:	e017      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008ad6:	4b0e      	ldr	r3, [pc, #56]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008ad8:	685b      	ldr	r3, [r3, #4]
10008ada:	7818      	ldrb	r0, [r3, #0]
10008adc:	4b0c      	ldr	r3, [pc, #48]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008ade:	681b      	ldr	r3, [r3, #0]
10008ae0:	7999      	ldrb	r1, [r3, #6]
10008ae2:	230f      	movs	r3, #15
10008ae4:	18fb      	adds	r3, r7, r3
10008ae6:	2201      	movs	r2, #1
10008ae8:	4c0a      	ldr	r4, [pc, #40]	; (10008b14 <mpu_set_gyro_fsr+0xc8>)
10008aea:	47a0      	blx	r4
10008aec:	1e03      	subs	r3, r0, #0
10008aee:	d002      	beq.n	10008af6 <mpu_set_gyro_fsr+0xaa>
    return -1;
10008af0:	2301      	movs	r3, #1
10008af2:	425b      	negs	r3, r3
10008af4:	e007      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>
    st.chip_cfg.gyro_fsr = data >> 3;
10008af6:	230f      	movs	r3, #15
10008af8:	18fb      	adds	r3, r7, r3
10008afa:	781b      	ldrb	r3, [r3, #0]
10008afc:	08db      	lsrs	r3, r3, #3
10008afe:	b2da      	uxtb	r2, r3
10008b00:	4b03      	ldr	r3, [pc, #12]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008b02:	721a      	strb	r2, [r3, #8]
    return 0;
10008b04:	2300      	movs	r3, #0
}
10008b06:	0018      	movs	r0, r3
10008b08:	46bd      	mov	sp, r7
10008b0a:	b005      	add	sp, #20
10008b0c:	bd90      	pop	{r4, r7, pc}
10008b0e:	46c0      	nop			; (mov r8, r8)
10008b10:	10019a50 	.word	0x10019a50
10008b14:	100080d5 	.word	0x100080d5

10008b18 <mpu_get_accel_fsr>:
*  @brief      Get the accel full-scale range.
*  @param[out] fsr Current full-scale range.
*  @return     0 if successful.
*/
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008b18:	b580      	push	{r7, lr}
10008b1a:	b082      	sub	sp, #8
10008b1c:	af00      	add	r7, sp, #0
10008b1e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
10008b20:	4b17      	ldr	r3, [pc, #92]	; (10008b80 <mpu_get_accel_fsr+0x68>)
10008b22:	7a5b      	ldrb	r3, [r3, #9]
10008b24:	2b01      	cmp	r3, #1
10008b26:	d00c      	beq.n	10008b42 <mpu_get_accel_fsr+0x2a>
10008b28:	dc02      	bgt.n	10008b30 <mpu_get_accel_fsr+0x18>
10008b2a:	2b00      	cmp	r3, #0
10008b2c:	d005      	beq.n	10008b3a <mpu_get_accel_fsr+0x22>
10008b2e:	e014      	b.n	10008b5a <mpu_get_accel_fsr+0x42>
10008b30:	2b02      	cmp	r3, #2
10008b32:	d00a      	beq.n	10008b4a <mpu_get_accel_fsr+0x32>
10008b34:	2b03      	cmp	r3, #3
10008b36:	d00c      	beq.n	10008b52 <mpu_get_accel_fsr+0x3a>
10008b38:	e00f      	b.n	10008b5a <mpu_get_accel_fsr+0x42>
        case INV_FSR_2G:
        fsr[0] = 2;
10008b3a:	687b      	ldr	r3, [r7, #4]
10008b3c:	2202      	movs	r2, #2
10008b3e:	701a      	strb	r2, [r3, #0]
        break;
10008b40:	e00e      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        case INV_FSR_4G:
        fsr[0] = 4;
10008b42:	687b      	ldr	r3, [r7, #4]
10008b44:	2204      	movs	r2, #4
10008b46:	701a      	strb	r2, [r3, #0]
        break;
10008b48:	e00a      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        case INV_FSR_8G:
        fsr[0] = 8;
10008b4a:	687b      	ldr	r3, [r7, #4]
10008b4c:	2208      	movs	r2, #8
10008b4e:	701a      	strb	r2, [r3, #0]
        break;
10008b50:	e006      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        case INV_FSR_16G:
        fsr[0] = 16;
10008b52:	687b      	ldr	r3, [r7, #4]
10008b54:	2210      	movs	r2, #16
10008b56:	701a      	strb	r2, [r3, #0]
        break;
10008b58:	e002      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        default:
        return -1;
10008b5a:	2301      	movs	r3, #1
10008b5c:	425b      	negs	r3, r3
10008b5e:	e00a      	b.n	10008b76 <mpu_get_accel_fsr+0x5e>
    }
    if (st.chip_cfg.accel_half)
10008b60:	4b07      	ldr	r3, [pc, #28]	; (10008b80 <mpu_get_accel_fsr+0x68>)
10008b62:	7cdb      	ldrb	r3, [r3, #19]
10008b64:	2b00      	cmp	r3, #0
10008b66:	d005      	beq.n	10008b74 <mpu_get_accel_fsr+0x5c>
    fsr[0] <<= 1;
10008b68:	687b      	ldr	r3, [r7, #4]
10008b6a:	781b      	ldrb	r3, [r3, #0]
10008b6c:	18db      	adds	r3, r3, r3
10008b6e:	b2da      	uxtb	r2, r3
10008b70:	687b      	ldr	r3, [r7, #4]
10008b72:	701a      	strb	r2, [r3, #0]
    return 0;
10008b74:	2300      	movs	r3, #0
}
10008b76:	0018      	movs	r0, r3
10008b78:	46bd      	mov	sp, r7
10008b7a:	b002      	add	sp, #8
10008b7c:	bd80      	pop	{r7, pc}
10008b7e:	46c0      	nop			; (mov r8, r8)
10008b80:	10019a50 	.word	0x10019a50

10008b84 <mpu_set_accel_fsr>:
*  @brief      Set the accel full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_accel_fsr(unsigned char fsr)
{
10008b84:	b590      	push	{r4, r7, lr}
10008b86:	b085      	sub	sp, #20
10008b88:	af00      	add	r7, sp, #0
10008b8a:	0002      	movs	r2, r0
10008b8c:	1dfb      	adds	r3, r7, #7
10008b8e:	701a      	strb	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b90:	4b28      	ldr	r3, [pc, #160]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008b92:	7a9b      	ldrb	r3, [r3, #10]
10008b94:	2b00      	cmp	r3, #0
10008b96:	d102      	bne.n	10008b9e <mpu_set_accel_fsr+0x1a>
    return -1;
10008b98:	2301      	movs	r3, #1
10008b9a:	425b      	negs	r3, r3
10008b9c:	e046      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>

    switch (fsr) {
10008b9e:	1dfb      	adds	r3, r7, #7
10008ba0:	781b      	ldrb	r3, [r3, #0]
10008ba2:	2b04      	cmp	r3, #4
10008ba4:	d00d      	beq.n	10008bc2 <mpu_set_accel_fsr+0x3e>
10008ba6:	dc02      	bgt.n	10008bae <mpu_set_accel_fsr+0x2a>
10008ba8:	2b02      	cmp	r3, #2
10008baa:	d005      	beq.n	10008bb8 <mpu_set_accel_fsr+0x34>
10008bac:	e018      	b.n	10008be0 <mpu_set_accel_fsr+0x5c>
10008bae:	2b08      	cmp	r3, #8
10008bb0:	d00c      	beq.n	10008bcc <mpu_set_accel_fsr+0x48>
10008bb2:	2b10      	cmp	r3, #16
10008bb4:	d00f      	beq.n	10008bd6 <mpu_set_accel_fsr+0x52>
10008bb6:	e013      	b.n	10008be0 <mpu_set_accel_fsr+0x5c>
        case 2:
        data = INV_FSR_2G << 3;
10008bb8:	230f      	movs	r3, #15
10008bba:	18fb      	adds	r3, r7, r3
10008bbc:	2200      	movs	r2, #0
10008bbe:	701a      	strb	r2, [r3, #0]
        break;
10008bc0:	e011      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        case 4:
        data = INV_FSR_4G << 3;
10008bc2:	230f      	movs	r3, #15
10008bc4:	18fb      	adds	r3, r7, r3
10008bc6:	2208      	movs	r2, #8
10008bc8:	701a      	strb	r2, [r3, #0]
        break;
10008bca:	e00c      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        case 8:
        data = INV_FSR_8G << 3;
10008bcc:	230f      	movs	r3, #15
10008bce:	18fb      	adds	r3, r7, r3
10008bd0:	2210      	movs	r2, #16
10008bd2:	701a      	strb	r2, [r3, #0]
        break;
10008bd4:	e007      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        case 16:
        data = INV_FSR_16G << 3;
10008bd6:	230f      	movs	r3, #15
10008bd8:	18fb      	adds	r3, r7, r3
10008bda:	2218      	movs	r2, #24
10008bdc:	701a      	strb	r2, [r3, #0]
        break;
10008bde:	e002      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        default:
        return -1;
10008be0:	2301      	movs	r3, #1
10008be2:	425b      	negs	r3, r3
10008be4:	e022      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008be6:	4b13      	ldr	r3, [pc, #76]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008be8:	7a5a      	ldrb	r2, [r3, #9]
10008bea:	230f      	movs	r3, #15
10008bec:	18fb      	adds	r3, r7, r3
10008bee:	781b      	ldrb	r3, [r3, #0]
10008bf0:	08db      	lsrs	r3, r3, #3
10008bf2:	b2db      	uxtb	r3, r3
10008bf4:	429a      	cmp	r2, r3
10008bf6:	d101      	bne.n	10008bfc <mpu_set_accel_fsr+0x78>
    return 0;
10008bf8:	2300      	movs	r3, #0
10008bfa:	e017      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008bfc:	4b0d      	ldr	r3, [pc, #52]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008bfe:	685b      	ldr	r3, [r3, #4]
10008c00:	7818      	ldrb	r0, [r3, #0]
10008c02:	4b0c      	ldr	r3, [pc, #48]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008c04:	681b      	ldr	r3, [r3, #0]
10008c06:	79d9      	ldrb	r1, [r3, #7]
10008c08:	230f      	movs	r3, #15
10008c0a:	18fb      	adds	r3, r7, r3
10008c0c:	2201      	movs	r2, #1
10008c0e:	4c0a      	ldr	r4, [pc, #40]	; (10008c38 <mpu_set_accel_fsr+0xb4>)
10008c10:	47a0      	blx	r4
10008c12:	1e03      	subs	r3, r0, #0
10008c14:	d002      	beq.n	10008c1c <mpu_set_accel_fsr+0x98>
    return -1;
10008c16:	2301      	movs	r3, #1
10008c18:	425b      	negs	r3, r3
10008c1a:	e007      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>
    st.chip_cfg.accel_fsr = data >> 3;
10008c1c:	230f      	movs	r3, #15
10008c1e:	18fb      	adds	r3, r7, r3
10008c20:	781b      	ldrb	r3, [r3, #0]
10008c22:	08db      	lsrs	r3, r3, #3
10008c24:	b2da      	uxtb	r2, r3
10008c26:	4b03      	ldr	r3, [pc, #12]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008c28:	725a      	strb	r2, [r3, #9]
    return 0;
10008c2a:	2300      	movs	r3, #0
}
10008c2c:	0018      	movs	r0, r3
10008c2e:	46bd      	mov	sp, r7
10008c30:	b005      	add	sp, #20
10008c32:	bd90      	pop	{r4, r7, pc}
10008c34:	10019a50 	.word	0x10019a50
10008c38:	100080d5 	.word	0x100080d5

10008c3c <mpu_set_lpf>:
*  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
*  @param[in]  lpf Desired LPF setting.
*  @return     0 if successful.
*/
int mpu_set_lpf(unsigned short lpf)
{
10008c3c:	b590      	push	{r4, r7, lr}
10008c3e:	b085      	sub	sp, #20
10008c40:	af00      	add	r7, sp, #0
10008c42:	0002      	movs	r2, r0
10008c44:	1dbb      	adds	r3, r7, #6
10008c46:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008c48:	4b2d      	ldr	r3, [pc, #180]	; (10008d00 <mpu_set_lpf+0xc4>)
10008c4a:	7a9b      	ldrb	r3, [r3, #10]
10008c4c:	2b00      	cmp	r3, #0
10008c4e:	d102      	bne.n	10008c56 <mpu_set_lpf+0x1a>
    return -1;
10008c50:	2301      	movs	r3, #1
10008c52:	425b      	negs	r3, r3
10008c54:	e04f      	b.n	10008cf6 <mpu_set_lpf+0xba>

    if (lpf >= 188)
10008c56:	1dbb      	adds	r3, r7, #6
10008c58:	881b      	ldrh	r3, [r3, #0]
10008c5a:	2bbb      	cmp	r3, #187	; 0xbb
10008c5c:	d904      	bls.n	10008c68 <mpu_set_lpf+0x2c>
    data = INV_FILTER_188HZ;
10008c5e:	230f      	movs	r3, #15
10008c60:	18fb      	adds	r3, r7, r3
10008c62:	2201      	movs	r2, #1
10008c64:	701a      	strb	r2, [r3, #0]
10008c66:	e027      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 98)
10008c68:	1dbb      	adds	r3, r7, #6
10008c6a:	881b      	ldrh	r3, [r3, #0]
10008c6c:	2b61      	cmp	r3, #97	; 0x61
10008c6e:	d904      	bls.n	10008c7a <mpu_set_lpf+0x3e>
    data = INV_FILTER_98HZ;
10008c70:	230f      	movs	r3, #15
10008c72:	18fb      	adds	r3, r7, r3
10008c74:	2202      	movs	r2, #2
10008c76:	701a      	strb	r2, [r3, #0]
10008c78:	e01e      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 42)
10008c7a:	1dbb      	adds	r3, r7, #6
10008c7c:	881b      	ldrh	r3, [r3, #0]
10008c7e:	2b29      	cmp	r3, #41	; 0x29
10008c80:	d904      	bls.n	10008c8c <mpu_set_lpf+0x50>
    data = INV_FILTER_42HZ;
10008c82:	230f      	movs	r3, #15
10008c84:	18fb      	adds	r3, r7, r3
10008c86:	2203      	movs	r2, #3
10008c88:	701a      	strb	r2, [r3, #0]
10008c8a:	e015      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 20)
10008c8c:	1dbb      	adds	r3, r7, #6
10008c8e:	881b      	ldrh	r3, [r3, #0]
10008c90:	2b13      	cmp	r3, #19
10008c92:	d904      	bls.n	10008c9e <mpu_set_lpf+0x62>
    data = INV_FILTER_20HZ;
10008c94:	230f      	movs	r3, #15
10008c96:	18fb      	adds	r3, r7, r3
10008c98:	2204      	movs	r2, #4
10008c9a:	701a      	strb	r2, [r3, #0]
10008c9c:	e00c      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 10)
10008c9e:	1dbb      	adds	r3, r7, #6
10008ca0:	881b      	ldrh	r3, [r3, #0]
10008ca2:	2b09      	cmp	r3, #9
10008ca4:	d904      	bls.n	10008cb0 <mpu_set_lpf+0x74>
    data = INV_FILTER_10HZ;
10008ca6:	230f      	movs	r3, #15
10008ca8:	18fb      	adds	r3, r7, r3
10008caa:	2205      	movs	r2, #5
10008cac:	701a      	strb	r2, [r3, #0]
10008cae:	e003      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else
    data = INV_FILTER_5HZ;
10008cb0:	230f      	movs	r3, #15
10008cb2:	18fb      	adds	r3, r7, r3
10008cb4:	2206      	movs	r2, #6
10008cb6:	701a      	strb	r2, [r3, #0]

    if (st.chip_cfg.lpf == data)
10008cb8:	4b11      	ldr	r3, [pc, #68]	; (10008d00 <mpu_set_lpf+0xc4>)
10008cba:	7ada      	ldrb	r2, [r3, #11]
10008cbc:	230f      	movs	r3, #15
10008cbe:	18fb      	adds	r3, r7, r3
10008cc0:	781b      	ldrb	r3, [r3, #0]
10008cc2:	429a      	cmp	r2, r3
10008cc4:	d101      	bne.n	10008cca <mpu_set_lpf+0x8e>
    return 0;
10008cc6:	2300      	movs	r3, #0
10008cc8:	e015      	b.n	10008cf6 <mpu_set_lpf+0xba>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008cca:	4b0d      	ldr	r3, [pc, #52]	; (10008d00 <mpu_set_lpf+0xc4>)
10008ccc:	685b      	ldr	r3, [r3, #4]
10008cce:	7818      	ldrb	r0, [r3, #0]
10008cd0:	4b0b      	ldr	r3, [pc, #44]	; (10008d00 <mpu_set_lpf+0xc4>)
10008cd2:	681b      	ldr	r3, [r3, #0]
10008cd4:	7899      	ldrb	r1, [r3, #2]
10008cd6:	230f      	movs	r3, #15
10008cd8:	18fb      	adds	r3, r7, r3
10008cda:	2201      	movs	r2, #1
10008cdc:	4c09      	ldr	r4, [pc, #36]	; (10008d04 <mpu_set_lpf+0xc8>)
10008cde:	47a0      	blx	r4
10008ce0:	1e03      	subs	r3, r0, #0
10008ce2:	d002      	beq.n	10008cea <mpu_set_lpf+0xae>
    return -1;
10008ce4:	2301      	movs	r3, #1
10008ce6:	425b      	negs	r3, r3
10008ce8:	e005      	b.n	10008cf6 <mpu_set_lpf+0xba>
    st.chip_cfg.lpf = data;
10008cea:	230f      	movs	r3, #15
10008cec:	18fb      	adds	r3, r7, r3
10008cee:	781a      	ldrb	r2, [r3, #0]
10008cf0:	4b03      	ldr	r3, [pc, #12]	; (10008d00 <mpu_set_lpf+0xc4>)
10008cf2:	72da      	strb	r2, [r3, #11]
    return 0;
10008cf4:	2300      	movs	r3, #0
}
10008cf6:	0018      	movs	r0, r3
10008cf8:	46bd      	mov	sp, r7
10008cfa:	b005      	add	sp, #20
10008cfc:	bd90      	pop	{r4, r7, pc}
10008cfe:	46c0      	nop			; (mov r8, r8)
10008d00:	10019a50 	.word	0x10019a50
10008d04:	100080d5 	.word	0x100080d5

10008d08 <mpu_get_sample_rate>:
*  @brief      Get sampling rate.
*  @param[out] rate    Current sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_get_sample_rate(unsigned short *rate)
{
10008d08:	b580      	push	{r7, lr}
10008d0a:	b082      	sub	sp, #8
10008d0c:	af00      	add	r7, sp, #0
10008d0e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
10008d10:	4b08      	ldr	r3, [pc, #32]	; (10008d34 <mpu_get_sample_rate+0x2c>)
10008d12:	2224      	movs	r2, #36	; 0x24
10008d14:	5c9b      	ldrb	r3, [r3, r2]
10008d16:	2b00      	cmp	r3, #0
10008d18:	d002      	beq.n	10008d20 <mpu_get_sample_rate+0x18>
    return -1;
10008d1a:	2301      	movs	r3, #1
10008d1c:	425b      	negs	r3, r3
10008d1e:	e004      	b.n	10008d2a <mpu_get_sample_rate+0x22>
    else
    rate[0] = st.chip_cfg.sample_rate;
10008d20:	4b04      	ldr	r3, [pc, #16]	; (10008d34 <mpu_get_sample_rate+0x2c>)
10008d22:	89da      	ldrh	r2, [r3, #14]
10008d24:	687b      	ldr	r3, [r7, #4]
10008d26:	801a      	strh	r2, [r3, #0]
    return 0;
10008d28:	2300      	movs	r3, #0
}
10008d2a:	0018      	movs	r0, r3
10008d2c:	46bd      	mov	sp, r7
10008d2e:	b002      	add	sp, #8
10008d30:	bd80      	pop	{r7, pc}
10008d32:	46c0      	nop			; (mov r8, r8)
10008d34:	10019a50 	.word	0x10019a50

10008d38 <mpu_set_sample_rate>:
*  Sampling rate must be between 4Hz and 1kHz.
*  @param[in]  rate    Desired sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_sample_rate(unsigned short rate)
{
10008d38:	b590      	push	{r4, r7, lr}
10008d3a:	b085      	sub	sp, #20
10008d3c:	af00      	add	r7, sp, #0
10008d3e:	0002      	movs	r2, r0
10008d40:	1dbb      	adds	r3, r7, #6
10008d42:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d44:	4b3c      	ldr	r3, [pc, #240]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008d46:	7a9b      	ldrb	r3, [r3, #10]
10008d48:	2b00      	cmp	r3, #0
10008d4a:	d102      	bne.n	10008d52 <mpu_set_sample_rate+0x1a>
    return -1;
10008d4c:	2301      	movs	r3, #1
10008d4e:	425b      	negs	r3, r3
10008d50:	e06e      	b.n	10008e30 <mpu_set_sample_rate+0xf8>

    if (st.chip_cfg.dmp_on)
10008d52:	4b39      	ldr	r3, [pc, #228]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008d54:	2224      	movs	r2, #36	; 0x24
10008d56:	5c9b      	ldrb	r3, [r3, r2]
10008d58:	2b00      	cmp	r3, #0
10008d5a:	d002      	beq.n	10008d62 <mpu_set_sample_rate+0x2a>
    return -1;
10008d5c:	2301      	movs	r3, #1
10008d5e:	425b      	negs	r3, r3
10008d60:	e066      	b.n	10008e30 <mpu_set_sample_rate+0xf8>
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d62:	4b35      	ldr	r3, [pc, #212]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008d64:	7d1b      	ldrb	r3, [r3, #20]
10008d66:	2b00      	cmp	r3, #0
10008d68:	d011      	beq.n	10008d8e <mpu_set_sample_rate+0x56>
            if (rate && (rate <= 40)) {
10008d6a:	1dbb      	adds	r3, r7, #6
10008d6c:	881b      	ldrh	r3, [r3, #0]
10008d6e:	2b00      	cmp	r3, #0
10008d70:	d00a      	beq.n	10008d88 <mpu_set_sample_rate+0x50>
10008d72:	1dbb      	adds	r3, r7, #6
10008d74:	881b      	ldrh	r3, [r3, #0]
10008d76:	2b28      	cmp	r3, #40	; 0x28
10008d78:	d806      	bhi.n	10008d88 <mpu_set_sample_rate+0x50>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d7a:	1dbb      	adds	r3, r7, #6
10008d7c:	881b      	ldrh	r3, [r3, #0]
10008d7e:	0018      	movs	r0, r3
10008d80:	4b2e      	ldr	r3, [pc, #184]	; (10008e3c <mpu_set_sample_rate+0x104>)
10008d82:	4798      	blx	r3
                return 0;
10008d84:	2300      	movs	r3, #0
10008d86:	e053      	b.n	10008e30 <mpu_set_sample_rate+0xf8>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
            * switch back to full-power mode.
            */
            mpu_lp_accel_mode(0);
10008d88:	2000      	movs	r0, #0
10008d8a:	4b2c      	ldr	r3, [pc, #176]	; (10008e3c <mpu_set_sample_rate+0x104>)
10008d8c:	4798      	blx	r3
        }
        if (rate < 4)
10008d8e:	1dbb      	adds	r3, r7, #6
10008d90:	881b      	ldrh	r3, [r3, #0]
10008d92:	2b03      	cmp	r3, #3
10008d94:	d803      	bhi.n	10008d9e <mpu_set_sample_rate+0x66>
        rate = 4;
10008d96:	1dbb      	adds	r3, r7, #6
10008d98:	2204      	movs	r2, #4
10008d9a:	801a      	strh	r2, [r3, #0]
10008d9c:	e009      	b.n	10008db2 <mpu_set_sample_rate+0x7a>
        else if (rate > 1000)
10008d9e:	1dbb      	adds	r3, r7, #6
10008da0:	881a      	ldrh	r2, [r3, #0]
10008da2:	23fa      	movs	r3, #250	; 0xfa
10008da4:	009b      	lsls	r3, r3, #2
10008da6:	429a      	cmp	r2, r3
10008da8:	d903      	bls.n	10008db2 <mpu_set_sample_rate+0x7a>
        rate = 1000;
10008daa:	1dbb      	adds	r3, r7, #6
10008dac:	22fa      	movs	r2, #250	; 0xfa
10008dae:	0092      	lsls	r2, r2, #2
10008db0:	801a      	strh	r2, [r3, #0]

        data = 1000 / rate - 1;
10008db2:	1dbb      	adds	r3, r7, #6
10008db4:	881a      	ldrh	r2, [r3, #0]
10008db6:	4b22      	ldr	r3, [pc, #136]	; (10008e40 <mpu_set_sample_rate+0x108>)
10008db8:	0011      	movs	r1, r2
10008dba:	22fa      	movs	r2, #250	; 0xfa
10008dbc:	0090      	lsls	r0, r2, #2
10008dbe:	4798      	blx	r3
10008dc0:	0003      	movs	r3, r0
10008dc2:	b2db      	uxtb	r3, r3
10008dc4:	3b01      	subs	r3, #1
10008dc6:	b2da      	uxtb	r2, r3
10008dc8:	230f      	movs	r3, #15
10008dca:	18fb      	adds	r3, r7, r3
10008dcc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dce:	4b1a      	ldr	r3, [pc, #104]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008dd0:	685b      	ldr	r3, [r3, #4]
10008dd2:	7818      	ldrb	r0, [r3, #0]
10008dd4:	4b18      	ldr	r3, [pc, #96]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008dd6:	681b      	ldr	r3, [r3, #0]
10008dd8:	7859      	ldrb	r1, [r3, #1]
10008dda:	230f      	movs	r3, #15
10008ddc:	18fb      	adds	r3, r7, r3
10008dde:	2201      	movs	r2, #1
10008de0:	4c18      	ldr	r4, [pc, #96]	; (10008e44 <mpu_set_sample_rate+0x10c>)
10008de2:	47a0      	blx	r4
10008de4:	1e03      	subs	r3, r0, #0
10008de6:	d002      	beq.n	10008dee <mpu_set_sample_rate+0xb6>
        return -1;
10008de8:	2301      	movs	r3, #1
10008dea:	425b      	negs	r3, r3
10008dec:	e020      	b.n	10008e30 <mpu_set_sample_rate+0xf8>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008dee:	230f      	movs	r3, #15
10008df0:	18fb      	adds	r3, r7, r3
10008df2:	781b      	ldrb	r3, [r3, #0]
10008df4:	1c5a      	adds	r2, r3, #1
10008df6:	4b12      	ldr	r3, [pc, #72]	; (10008e40 <mpu_set_sample_rate+0x108>)
10008df8:	0011      	movs	r1, r2
10008dfa:	22fa      	movs	r2, #250	; 0xfa
10008dfc:	0090      	lsls	r0, r2, #2
10008dfe:	4798      	blx	r3
10008e00:	0003      	movs	r3, r0
10008e02:	b29a      	uxth	r2, r3
10008e04:	4b0c      	ldr	r3, [pc, #48]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008e06:	81da      	strh	r2, [r3, #14]

        #ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e08:	4b0b      	ldr	r3, [pc, #44]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10008e0c:	1c1a      	adds	r2, r3, #0
10008e0e:	b293      	uxth	r3, r2
10008e10:	2b64      	cmp	r3, #100	; 0x64
10008e12:	d901      	bls.n	10008e18 <mpu_set_sample_rate+0xe0>
10008e14:	2364      	movs	r3, #100	; 0x64
10008e16:	1c1a      	adds	r2, r3, #0
10008e18:	b293      	uxth	r3, r2
10008e1a:	0018      	movs	r0, r3
10008e1c:	4b0a      	ldr	r3, [pc, #40]	; (10008e48 <mpu_set_sample_rate+0x110>)
10008e1e:	4798      	blx	r3
        #endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e20:	4b05      	ldr	r3, [pc, #20]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008e22:	89db      	ldrh	r3, [r3, #14]
10008e24:	085b      	lsrs	r3, r3, #1
10008e26:	b29b      	uxth	r3, r3
10008e28:	0018      	movs	r0, r3
10008e2a:	4b08      	ldr	r3, [pc, #32]	; (10008e4c <mpu_set_sample_rate+0x114>)
10008e2c:	4798      	blx	r3
        return 0;
10008e2e:	2300      	movs	r3, #0
    }
}
10008e30:	0018      	movs	r0, r3
10008e32:	46bd      	mov	sp, r7
10008e34:	b005      	add	sp, #20
10008e36:	bd90      	pop	{r4, r7, pc}
10008e38:	10019a50 	.word	0x10019a50
10008e3c:	10008649 	.word	0x10008649
10008e40:	100156b5 	.word	0x100156b5
10008e44:	100080d5 	.word	0x100080d5
10008e48:	10008e51 	.word	0x10008e51
10008e4c:	10008c3d 	.word	0x10008c3d

10008e50 <mpu_set_compass_sample_rate>:
*  mpu_get_compass_sample_rate to check the actual setting.
*  @param[in]  rate    Desired compass sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008e50:	b590      	push	{r4, r7, lr}
10008e52:	b085      	sub	sp, #20
10008e54:	af00      	add	r7, sp, #0
10008e56:	0002      	movs	r2, r0
10008e58:	1dbb      	adds	r3, r7, #6
10008e5a:	801a      	strh	r2, [r3, #0]
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008e5c:	1dbb      	adds	r3, r7, #6
10008e5e:	881b      	ldrh	r3, [r3, #0]
10008e60:	2b00      	cmp	r3, #0
10008e62:	d009      	beq.n	10008e78 <mpu_set_compass_sample_rate+0x28>
10008e64:	4b1f      	ldr	r3, [pc, #124]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008e66:	89db      	ldrh	r3, [r3, #14]
10008e68:	1dba      	adds	r2, r7, #6
10008e6a:	8812      	ldrh	r2, [r2, #0]
10008e6c:	429a      	cmp	r2, r3
10008e6e:	d803      	bhi.n	10008e78 <mpu_set_compass_sample_rate+0x28>
10008e70:	1dbb      	adds	r3, r7, #6
10008e72:	881b      	ldrh	r3, [r3, #0]
10008e74:	2b64      	cmp	r3, #100	; 0x64
10008e76:	d902      	bls.n	10008e7e <mpu_set_compass_sample_rate+0x2e>
    return -1;
10008e78:	2301      	movs	r3, #1
10008e7a:	425b      	negs	r3, r3
10008e7c:	e02e      	b.n	10008edc <mpu_set_compass_sample_rate+0x8c>

    div = st.chip_cfg.sample_rate / rate - 1;
10008e7e:	4b19      	ldr	r3, [pc, #100]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008e80:	89da      	ldrh	r2, [r3, #14]
10008e82:	1dbb      	adds	r3, r7, #6
10008e84:	8819      	ldrh	r1, [r3, #0]
10008e86:	4b18      	ldr	r3, [pc, #96]	; (10008ee8 <mpu_set_compass_sample_rate+0x98>)
10008e88:	0010      	movs	r0, r2
10008e8a:	4798      	blx	r3
10008e8c:	0003      	movs	r3, r0
10008e8e:	b29b      	uxth	r3, r3
10008e90:	b2db      	uxtb	r3, r3
10008e92:	3b01      	subs	r3, #1
10008e94:	b2da      	uxtb	r2, r3
10008e96:	230f      	movs	r3, #15
10008e98:	18fb      	adds	r3, r7, r3
10008e9a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008e9c:	4b11      	ldr	r3, [pc, #68]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008e9e:	685b      	ldr	r3, [r3, #4]
10008ea0:	7818      	ldrb	r0, [r3, #0]
10008ea2:	4b10      	ldr	r3, [pc, #64]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008ea4:	681b      	ldr	r3, [r3, #0]
10008ea6:	2224      	movs	r2, #36	; 0x24
10008ea8:	5c99      	ldrb	r1, [r3, r2]
10008eaa:	230f      	movs	r3, #15
10008eac:	18fb      	adds	r3, r7, r3
10008eae:	2201      	movs	r2, #1
10008eb0:	4c0e      	ldr	r4, [pc, #56]	; (10008eec <mpu_set_compass_sample_rate+0x9c>)
10008eb2:	47a0      	blx	r4
10008eb4:	1e03      	subs	r3, r0, #0
10008eb6:	d002      	beq.n	10008ebe <mpu_set_compass_sample_rate+0x6e>
    return -1;
10008eb8:	2301      	movs	r3, #1
10008eba:	425b      	negs	r3, r3
10008ebc:	e00e      	b.n	10008edc <mpu_set_compass_sample_rate+0x8c>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008ebe:	4b09      	ldr	r3, [pc, #36]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008ec0:	89db      	ldrh	r3, [r3, #14]
10008ec2:	0018      	movs	r0, r3
10008ec4:	230f      	movs	r3, #15
10008ec6:	18fb      	adds	r3, r7, r3
10008ec8:	781b      	ldrb	r3, [r3, #0]
10008eca:	1c5a      	adds	r2, r3, #1
10008ecc:	4b08      	ldr	r3, [pc, #32]	; (10008ef0 <mpu_set_compass_sample_rate+0xa0>)
10008ece:	0011      	movs	r1, r2
10008ed0:	4798      	blx	r3
10008ed2:	0003      	movs	r3, r0
10008ed4:	b29a      	uxth	r2, r3
10008ed6:	4b03      	ldr	r3, [pc, #12]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
10008eda:	2300      	movs	r3, #0
    #else
    return -1;
    #endif
}
10008edc:	0018      	movs	r0, r3
10008ede:	46bd      	mov	sp, r7
10008ee0:	b005      	add	sp, #20
10008ee2:	bd90      	pop	{r4, r7, pc}
10008ee4:	10019a50 	.word	0x10019a50
10008ee8:	100155a1 	.word	0x100155a1
10008eec:	100080d5 	.word	0x100080d5
10008ef0:	100156b5 	.word	0x100156b5

10008ef4 <mpu_configure_fifo>:
*  \n INV_XYZ_ACCEL
*  @param[in]  sensors Mask of sensors to push to FIFO.
*  @return     0 if successful.
*/
int mpu_configure_fifo(unsigned char sensors)
{
10008ef4:	b580      	push	{r7, lr}
10008ef6:	b084      	sub	sp, #16
10008ef8:	af00      	add	r7, sp, #0
10008efa:	0002      	movs	r2, r0
10008efc:	1dfb      	adds	r3, r7, #7
10008efe:	701a      	strb	r2, [r3, #0]
    unsigned char prev;
    int result = 0;
10008f00:	2300      	movs	r3, #0
10008f02:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008f04:	1dfb      	adds	r3, r7, #7
10008f06:	1dfa      	adds	r2, r7, #7
10008f08:	7812      	ldrb	r2, [r2, #0]
10008f0a:	2101      	movs	r1, #1
10008f0c:	438a      	bics	r2, r1
10008f0e:	701a      	strb	r2, [r3, #0]

    if (st.chip_cfg.dmp_on)
10008f10:	4b25      	ldr	r3, [pc, #148]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f12:	2224      	movs	r2, #36	; 0x24
10008f14:	5c9b      	ldrb	r3, [r3, r2]
10008f16:	2b00      	cmp	r3, #0
10008f18:	d001      	beq.n	10008f1e <mpu_configure_fifo+0x2a>
    return 0;
10008f1a:	2300      	movs	r3, #0
10008f1c:	e03f      	b.n	10008f9e <mpu_configure_fifo+0xaa>
    else {
        if (!(st.chip_cfg.sensors))
10008f1e:	4b22      	ldr	r3, [pc, #136]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f20:	7a9b      	ldrb	r3, [r3, #10]
10008f22:	2b00      	cmp	r3, #0
10008f24:	d102      	bne.n	10008f2c <mpu_configure_fifo+0x38>
        return -1;
10008f26:	2301      	movs	r3, #1
10008f28:	425b      	negs	r3, r3
10008f2a:	e038      	b.n	10008f9e <mpu_configure_fifo+0xaa>
        prev = st.chip_cfg.fifo_enable;
10008f2c:	230b      	movs	r3, #11
10008f2e:	18fb      	adds	r3, r7, r3
10008f30:	4a1d      	ldr	r2, [pc, #116]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f32:	7c12      	ldrb	r2, [r2, #16]
10008f34:	701a      	strb	r2, [r3, #0]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008f36:	4b1c      	ldr	r3, [pc, #112]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f38:	7a9b      	ldrb	r3, [r3, #10]
10008f3a:	1dfa      	adds	r2, r7, #7
10008f3c:	7812      	ldrb	r2, [r2, #0]
10008f3e:	4013      	ands	r3, r2
10008f40:	b2da      	uxtb	r2, r3
10008f42:	4b19      	ldr	r3, [pc, #100]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f44:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008f46:	4b18      	ldr	r3, [pc, #96]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f48:	7c1b      	ldrb	r3, [r3, #16]
10008f4a:	1dfa      	adds	r2, r7, #7
10008f4c:	7812      	ldrb	r2, [r2, #0]
10008f4e:	429a      	cmp	r2, r3
10008f50:	d003      	beq.n	10008f5a <mpu_configure_fifo+0x66>
        /* You're not getting what you asked for. Some sensors are
        * asleep.
        */
        result = -1;
10008f52:	2301      	movs	r3, #1
10008f54:	425b      	negs	r3, r3
10008f56:	60fb      	str	r3, [r7, #12]
10008f58:	e001      	b.n	10008f5e <mpu_configure_fifo+0x6a>
        else
        result = 0;
10008f5a:	2300      	movs	r3, #0
10008f5c:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
10008f5e:	1dfb      	adds	r3, r7, #7
10008f60:	781b      	ldrb	r3, [r3, #0]
10008f62:	2b00      	cmp	r3, #0
10008f64:	d103      	bne.n	10008f6e <mpu_configure_fifo+0x7a>
10008f66:	4b10      	ldr	r3, [pc, #64]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f68:	7d1b      	ldrb	r3, [r3, #20]
10008f6a:	2b00      	cmp	r3, #0
10008f6c:	d003      	beq.n	10008f76 <mpu_configure_fifo+0x82>
        set_int_enable(1);
10008f6e:	2001      	movs	r0, #1
10008f70:	4b0e      	ldr	r3, [pc, #56]	; (10008fac <mpu_configure_fifo+0xb8>)
10008f72:	4798      	blx	r3
10008f74:	e002      	b.n	10008f7c <mpu_configure_fifo+0x88>
        else
        set_int_enable(0);
10008f76:	2000      	movs	r0, #0
10008f78:	4b0c      	ldr	r3, [pc, #48]	; (10008fac <mpu_configure_fifo+0xb8>)
10008f7a:	4798      	blx	r3
        if (sensors) {
10008f7c:	1dfb      	adds	r3, r7, #7
10008f7e:	781b      	ldrb	r3, [r3, #0]
10008f80:	2b00      	cmp	r3, #0
10008f82:	d00b      	beq.n	10008f9c <mpu_configure_fifo+0xa8>
            if (mpu_reset_fifo()) {
10008f84:	4b0a      	ldr	r3, [pc, #40]	; (10008fb0 <mpu_configure_fifo+0xbc>)
10008f86:	4798      	blx	r3
10008f88:	1e03      	subs	r3, r0, #0
10008f8a:	d007      	beq.n	10008f9c <mpu_configure_fifo+0xa8>
                st.chip_cfg.fifo_enable = prev;
10008f8c:	4b06      	ldr	r3, [pc, #24]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f8e:	220b      	movs	r2, #11
10008f90:	18ba      	adds	r2, r7, r2
10008f92:	7812      	ldrb	r2, [r2, #0]
10008f94:	741a      	strb	r2, [r3, #16]
                return -1;
10008f96:	2301      	movs	r3, #1
10008f98:	425b      	negs	r3, r3
10008f9a:	e000      	b.n	10008f9e <mpu_configure_fifo+0xaa>
            }
        }
    }

    return result;
10008f9c:	68fb      	ldr	r3, [r7, #12]
}
10008f9e:	0018      	movs	r0, r3
10008fa0:	46bd      	mov	sp, r7
10008fa2:	b004      	add	sp, #16
10008fa4:	bd80      	pop	{r7, pc}
10008fa6:	46c0      	nop			; (mov r8, r8)
10008fa8:	10019a50 	.word	0x10019a50
10008fac:	100083ad 	.word	0x100083ad
10008fb0:	100087d9 	.word	0x100087d9

10008fb4 <mpu_set_sensors>:
*  \n INV_XYZ_COMPASS
*  @param[in]  sensors    Mask of sensors to wake.
*  @return     0 if successful.
*/
int mpu_set_sensors(unsigned char sensors)
{
10008fb4:	b590      	push	{r4, r7, lr}
10008fb6:	b085      	sub	sp, #20
10008fb8:	af00      	add	r7, sp, #0
10008fba:	0002      	movs	r2, r0
10008fbc:	1dfb      	adds	r3, r7, #7
10008fbe:	701a      	strb	r2, [r3, #0]
    unsigned char data;
    #ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
    #endif

    if (sensors & INV_XYZ_GYRO)
10008fc0:	1dfb      	adds	r3, r7, #7
10008fc2:	781b      	ldrb	r3, [r3, #0]
10008fc4:	2270      	movs	r2, #112	; 0x70
10008fc6:	4013      	ands	r3, r2
10008fc8:	d004      	beq.n	10008fd4 <mpu_set_sensors+0x20>
    data = INV_CLK_PLL;
10008fca:	230f      	movs	r3, #15
10008fcc:	18fb      	adds	r3, r7, r3
10008fce:	2201      	movs	r2, #1
10008fd0:	701a      	strb	r2, [r3, #0]
10008fd2:	e00c      	b.n	10008fee <mpu_set_sensors+0x3a>
    else if (sensors)
10008fd4:	1dfb      	adds	r3, r7, #7
10008fd6:	781b      	ldrb	r3, [r3, #0]
10008fd8:	2b00      	cmp	r3, #0
10008fda:	d004      	beq.n	10008fe6 <mpu_set_sensors+0x32>
    data = 0;
10008fdc:	230f      	movs	r3, #15
10008fde:	18fb      	adds	r3, r7, r3
10008fe0:	2200      	movs	r2, #0
10008fe2:	701a      	strb	r2, [r3, #0]
10008fe4:	e003      	b.n	10008fee <mpu_set_sensors+0x3a>
    else
    data = BIT_SLEEP;
10008fe6:	230f      	movs	r3, #15
10008fe8:	18fb      	adds	r3, r7, r3
10008fea:	2240      	movs	r2, #64	; 0x40
10008fec:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fee:	4b77      	ldr	r3, [pc, #476]	; (100091cc <mpu_set_sensors+0x218>)
10008ff0:	685b      	ldr	r3, [r3, #4]
10008ff2:	7818      	ldrb	r0, [r3, #0]
10008ff4:	4b75      	ldr	r3, [pc, #468]	; (100091cc <mpu_set_sensors+0x218>)
10008ff6:	681b      	ldr	r3, [r3, #0]
10008ff8:	7d59      	ldrb	r1, [r3, #21]
10008ffa:	230f      	movs	r3, #15
10008ffc:	18fb      	adds	r3, r7, r3
10008ffe:	2201      	movs	r2, #1
10009000:	4c73      	ldr	r4, [pc, #460]	; (100091d0 <mpu_set_sensors+0x21c>)
10009002:	47a0      	blx	r4
10009004:	1e03      	subs	r3, r0, #0
10009006:	d005      	beq.n	10009014 <mpu_set_sensors+0x60>
        st.chip_cfg.sensors = 0;
10009008:	4b70      	ldr	r3, [pc, #448]	; (100091cc <mpu_set_sensors+0x218>)
1000900a:	2200      	movs	r2, #0
1000900c:	729a      	strb	r2, [r3, #10]
        return -1;
1000900e:	2301      	movs	r3, #1
10009010:	425b      	negs	r3, r3
10009012:	e0d6      	b.n	100091c2 <mpu_set_sensors+0x20e>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009014:	230f      	movs	r3, #15
10009016:	18fb      	adds	r3, r7, r3
10009018:	781b      	ldrb	r3, [r3, #0]
1000901a:	2240      	movs	r2, #64	; 0x40
1000901c:	4393      	bics	r3, r2
1000901e:	b2da      	uxtb	r2, r3
10009020:	4b6a      	ldr	r3, [pc, #424]	; (100091cc <mpu_set_sensors+0x218>)
10009022:	731a      	strb	r2, [r3, #12]

    data = 0;
10009024:	230f      	movs	r3, #15
10009026:	18fb      	adds	r3, r7, r3
10009028:	2200      	movs	r2, #0
1000902a:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_X_GYRO))
1000902c:	1dfb      	adds	r3, r7, #7
1000902e:	781b      	ldrb	r3, [r3, #0]
10009030:	2240      	movs	r2, #64	; 0x40
10009032:	4013      	ands	r3, r2
10009034:	d108      	bne.n	10009048 <mpu_set_sensors+0x94>
    data |= BIT_STBY_XG;
10009036:	230f      	movs	r3, #15
10009038:	18fb      	adds	r3, r7, r3
1000903a:	781b      	ldrb	r3, [r3, #0]
1000903c:	2204      	movs	r2, #4
1000903e:	4313      	orrs	r3, r2
10009040:	b2da      	uxtb	r2, r3
10009042:	230f      	movs	r3, #15
10009044:	18fb      	adds	r3, r7, r3
10009046:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_Y_GYRO))
10009048:	1dfb      	adds	r3, r7, #7
1000904a:	781b      	ldrb	r3, [r3, #0]
1000904c:	2220      	movs	r2, #32
1000904e:	4013      	ands	r3, r2
10009050:	d108      	bne.n	10009064 <mpu_set_sensors+0xb0>
    data |= BIT_STBY_YG;
10009052:	230f      	movs	r3, #15
10009054:	18fb      	adds	r3, r7, r3
10009056:	781b      	ldrb	r3, [r3, #0]
10009058:	2202      	movs	r2, #2
1000905a:	4313      	orrs	r3, r2
1000905c:	b2da      	uxtb	r2, r3
1000905e:	230f      	movs	r3, #15
10009060:	18fb      	adds	r3, r7, r3
10009062:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_Z_GYRO))
10009064:	1dfb      	adds	r3, r7, #7
10009066:	781b      	ldrb	r3, [r3, #0]
10009068:	2210      	movs	r2, #16
1000906a:	4013      	ands	r3, r2
1000906c:	d108      	bne.n	10009080 <mpu_set_sensors+0xcc>
    data |= BIT_STBY_ZG;
1000906e:	230f      	movs	r3, #15
10009070:	18fb      	adds	r3, r7, r3
10009072:	781b      	ldrb	r3, [r3, #0]
10009074:	2201      	movs	r2, #1
10009076:	4313      	orrs	r3, r2
10009078:	b2da      	uxtb	r2, r3
1000907a:	230f      	movs	r3, #15
1000907c:	18fb      	adds	r3, r7, r3
1000907e:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10009080:	1dfb      	adds	r3, r7, #7
10009082:	781b      	ldrb	r3, [r3, #0]
10009084:	2208      	movs	r2, #8
10009086:	4013      	ands	r3, r2
10009088:	d108      	bne.n	1000909c <mpu_set_sensors+0xe8>
    data |= BIT_STBY_XYZA;
1000908a:	230f      	movs	r3, #15
1000908c:	18fb      	adds	r3, r7, r3
1000908e:	781b      	ldrb	r3, [r3, #0]
10009090:	2238      	movs	r2, #56	; 0x38
10009092:	4313      	orrs	r3, r2
10009094:	b2da      	uxtb	r2, r3
10009096:	230f      	movs	r3, #15
10009098:	18fb      	adds	r3, r7, r3
1000909a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
1000909c:	4b4b      	ldr	r3, [pc, #300]	; (100091cc <mpu_set_sensors+0x218>)
1000909e:	685b      	ldr	r3, [r3, #4]
100090a0:	7818      	ldrb	r0, [r3, #0]
100090a2:	4b4a      	ldr	r3, [pc, #296]	; (100091cc <mpu_set_sensors+0x218>)
100090a4:	681b      	ldr	r3, [r3, #0]
100090a6:	7d99      	ldrb	r1, [r3, #22]
100090a8:	230f      	movs	r3, #15
100090aa:	18fb      	adds	r3, r7, r3
100090ac:	2201      	movs	r2, #1
100090ae:	4c48      	ldr	r4, [pc, #288]	; (100091d0 <mpu_set_sensors+0x21c>)
100090b0:	47a0      	blx	r4
100090b2:	1e03      	subs	r3, r0, #0
100090b4:	d005      	beq.n	100090c2 <mpu_set_sensors+0x10e>
        st.chip_cfg.sensors = 0;
100090b6:	4b45      	ldr	r3, [pc, #276]	; (100091cc <mpu_set_sensors+0x218>)
100090b8:	2200      	movs	r2, #0
100090ba:	729a      	strb	r2, [r3, #10]
        return -1;
100090bc:	2301      	movs	r3, #1
100090be:	425b      	negs	r3, r3
100090c0:	e07f      	b.n	100091c2 <mpu_set_sensors+0x20e>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
100090c2:	1dfb      	adds	r3, r7, #7
100090c4:	781b      	ldrb	r3, [r3, #0]
100090c6:	2b00      	cmp	r3, #0
100090c8:	d006      	beq.n	100090d8 <mpu_set_sensors+0x124>
100090ca:	1dfb      	adds	r3, r7, #7
100090cc:	781b      	ldrb	r3, [r3, #0]
100090ce:	2b08      	cmp	r3, #8
100090d0:	d002      	beq.n	100090d8 <mpu_set_sensors+0x124>
    /* Latched interrupts only used in LP accel mode. */
    mpu_set_int_latched(0);
100090d2:	2000      	movs	r0, #0
100090d4:	4b3f      	ldr	r3, [pc, #252]	; (100091d4 <mpu_set_sensors+0x220>)
100090d6:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100090d8:	4b3c      	ldr	r3, [pc, #240]	; (100091cc <mpu_set_sensors+0x218>)
100090da:	685b      	ldr	r3, [r3, #4]
100090dc:	7818      	ldrb	r0, [r3, #0]
100090de:	4b3b      	ldr	r3, [pc, #236]	; (100091cc <mpu_set_sensors+0x218>)
100090e0:	681b      	ldr	r3, [r3, #0]
100090e2:	7919      	ldrb	r1, [r3, #4]
100090e4:	230e      	movs	r3, #14
100090e6:	18fb      	adds	r3, r7, r3
100090e8:	2201      	movs	r2, #1
100090ea:	4c3b      	ldr	r4, [pc, #236]	; (100091d8 <mpu_set_sensors+0x224>)
100090ec:	47a0      	blx	r4
100090ee:	1e03      	subs	r3, r0, #0
100090f0:	d002      	beq.n	100090f8 <mpu_set_sensors+0x144>
    return -1;
100090f2:	2301      	movs	r3, #1
100090f4:	425b      	negs	r3, r3
100090f6:	e064      	b.n	100091c2 <mpu_set_sensors+0x20e>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100090f8:	1dfb      	adds	r3, r7, #7
100090fa:	781b      	ldrb	r3, [r3, #0]
100090fc:	2201      	movs	r2, #1
100090fe:	4013      	ands	r3, r2
10009100:	d00d      	beq.n	1000911e <mpu_set_sensors+0x16a>
        data = AKM_SINGLE_MEASUREMENT;
10009102:	230f      	movs	r3, #15
10009104:	18fb      	adds	r3, r7, r3
10009106:	2211      	movs	r2, #17
10009108:	701a      	strb	r2, [r3, #0]
        user_ctrl |= BIT_AUX_IF_EN;
1000910a:	230e      	movs	r3, #14
1000910c:	18fb      	adds	r3, r7, r3
1000910e:	781b      	ldrb	r3, [r3, #0]
10009110:	2220      	movs	r2, #32
10009112:	4313      	orrs	r3, r2
10009114:	b2da      	uxtb	r2, r3
10009116:	230e      	movs	r3, #14
10009118:	18fb      	adds	r3, r7, r3
1000911a:	701a      	strb	r2, [r3, #0]
1000911c:	e00c      	b.n	10009138 <mpu_set_sensors+0x184>
        } else {
        data = AKM_POWER_DOWN;
1000911e:	230f      	movs	r3, #15
10009120:	18fb      	adds	r3, r7, r3
10009122:	2210      	movs	r2, #16
10009124:	701a      	strb	r2, [r3, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009126:	230e      	movs	r3, #14
10009128:	18fb      	adds	r3, r7, r3
1000912a:	781b      	ldrb	r3, [r3, #0]
1000912c:	2220      	movs	r2, #32
1000912e:	4393      	bics	r3, r2
10009130:	b2da      	uxtb	r2, r3
10009132:	230e      	movs	r3, #14
10009134:	18fb      	adds	r3, r7, r3
10009136:	701a      	strb	r2, [r3, #0]
    }
    if (st.chip_cfg.dmp_on)
10009138:	4b24      	ldr	r3, [pc, #144]	; (100091cc <mpu_set_sensors+0x218>)
1000913a:	2224      	movs	r2, #36	; 0x24
1000913c:	5c9b      	ldrb	r3, [r3, r2]
1000913e:	2b00      	cmp	r3, #0
10009140:	d00a      	beq.n	10009158 <mpu_set_sensors+0x1a4>
    user_ctrl |= BIT_DMP_EN;
10009142:	230e      	movs	r3, #14
10009144:	18fb      	adds	r3, r7, r3
10009146:	781b      	ldrb	r3, [r3, #0]
10009148:	2280      	movs	r2, #128	; 0x80
1000914a:	4252      	negs	r2, r2
1000914c:	4313      	orrs	r3, r2
1000914e:	b2da      	uxtb	r2, r3
10009150:	230e      	movs	r3, #14
10009152:	18fb      	adds	r3, r7, r3
10009154:	701a      	strb	r2, [r3, #0]
10009156:	e008      	b.n	1000916a <mpu_set_sensors+0x1b6>
    else
    user_ctrl &= ~BIT_DMP_EN;
10009158:	230e      	movs	r3, #14
1000915a:	18fb      	adds	r3, r7, r3
1000915c:	781b      	ldrb	r3, [r3, #0]
1000915e:	227f      	movs	r2, #127	; 0x7f
10009160:	4013      	ands	r3, r2
10009162:	b2da      	uxtb	r2, r3
10009164:	230e      	movs	r3, #14
10009166:	18fb      	adds	r3, r7, r3
10009168:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
1000916a:	4b18      	ldr	r3, [pc, #96]	; (100091cc <mpu_set_sensors+0x218>)
1000916c:	685b      	ldr	r3, [r3, #4]
1000916e:	7818      	ldrb	r0, [r3, #0]
10009170:	4b16      	ldr	r3, [pc, #88]	; (100091cc <mpu_set_sensors+0x218>)
10009172:	681b      	ldr	r3, [r3, #0]
10009174:	2226      	movs	r2, #38	; 0x26
10009176:	5c99      	ldrb	r1, [r3, r2]
10009178:	230f      	movs	r3, #15
1000917a:	18fb      	adds	r3, r7, r3
1000917c:	2201      	movs	r2, #1
1000917e:	4c14      	ldr	r4, [pc, #80]	; (100091d0 <mpu_set_sensors+0x21c>)
10009180:	47a0      	blx	r4
10009182:	1e03      	subs	r3, r0, #0
10009184:	d002      	beq.n	1000918c <mpu_set_sensors+0x1d8>
    return -1;
10009186:	2301      	movs	r3, #1
10009188:	425b      	negs	r3, r3
1000918a:	e01a      	b.n	100091c2 <mpu_set_sensors+0x20e>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000918c:	4b0f      	ldr	r3, [pc, #60]	; (100091cc <mpu_set_sensors+0x218>)
1000918e:	685b      	ldr	r3, [r3, #4]
10009190:	7818      	ldrb	r0, [r3, #0]
10009192:	4b0e      	ldr	r3, [pc, #56]	; (100091cc <mpu_set_sensors+0x218>)
10009194:	681b      	ldr	r3, [r3, #0]
10009196:	7919      	ldrb	r1, [r3, #4]
10009198:	230e      	movs	r3, #14
1000919a:	18fb      	adds	r3, r7, r3
1000919c:	2201      	movs	r2, #1
1000919e:	4c0c      	ldr	r4, [pc, #48]	; (100091d0 <mpu_set_sensors+0x21c>)
100091a0:	47a0      	blx	r4
100091a2:	1e03      	subs	r3, r0, #0
100091a4:	d002      	beq.n	100091ac <mpu_set_sensors+0x1f8>
    return -1;
100091a6:	2301      	movs	r3, #1
100091a8:	425b      	negs	r3, r3
100091aa:	e00a      	b.n	100091c2 <mpu_set_sensors+0x20e>
    #endif
    #endif

    st.chip_cfg.sensors = sensors;
100091ac:	4b07      	ldr	r3, [pc, #28]	; (100091cc <mpu_set_sensors+0x218>)
100091ae:	1dfa      	adds	r2, r7, #7
100091b0:	7812      	ldrb	r2, [r2, #0]
100091b2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
100091b4:	4b05      	ldr	r3, [pc, #20]	; (100091cc <mpu_set_sensors+0x218>)
100091b6:	2200      	movs	r2, #0
100091b8:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
100091ba:	2032      	movs	r0, #50	; 0x32
100091bc:	4b07      	ldr	r3, [pc, #28]	; (100091dc <mpu_set_sensors+0x228>)
100091be:	4798      	blx	r3
    return 0;
100091c0:	2300      	movs	r3, #0
}
100091c2:	0018      	movs	r0, r3
100091c4:	46bd      	mov	sp, r7
100091c6:	b005      	add	sp, #20
100091c8:	bd90      	pop	{r4, r7, pc}
100091ca:	46c0      	nop			; (mov r8, r8)
100091cc:	10019a50 	.word	0x10019a50
100091d0:	100080d5 	.word	0x100080d5
100091d4:	100093d9 	.word	0x100093d9
100091d8:	100081e9 	.word	0x100081e9
100091dc:	1000b175 	.word	0x1000b175

100091e0 <mpu_set_bypass>:
*  @brief      Set device to bypass mode.
*  @param[in]  bypass_on   1 to enable bypass mode.
*  @return     0 if successful.
*/
int mpu_set_bypass(unsigned char bypass_on)
{
100091e0:	b590      	push	{r4, r7, lr}
100091e2:	b085      	sub	sp, #20
100091e4:	af00      	add	r7, sp, #0
100091e6:	0002      	movs	r2, r0
100091e8:	1dfb      	adds	r3, r7, #7
100091ea:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100091ec:	4b6d      	ldr	r3, [pc, #436]	; (100093a4 <mpu_set_bypass+0x1c4>)
100091ee:	7c9b      	ldrb	r3, [r3, #18]
100091f0:	1dfa      	adds	r2, r7, #7
100091f2:	7812      	ldrb	r2, [r2, #0]
100091f4:	429a      	cmp	r2, r3
100091f6:	d101      	bne.n	100091fc <mpu_set_bypass+0x1c>
    return 0;
100091f8:	2300      	movs	r3, #0
100091fa:	e0ce      	b.n	1000939a <mpu_set_bypass+0x1ba>

    if (bypass_on) {
100091fc:	1dfb      	adds	r3, r7, #7
100091fe:	781b      	ldrb	r3, [r3, #0]
10009200:	2b00      	cmp	r3, #0
10009202:	d05d      	beq.n	100092c0 <mpu_set_bypass+0xe0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009204:	4b67      	ldr	r3, [pc, #412]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009206:	685b      	ldr	r3, [r3, #4]
10009208:	7818      	ldrb	r0, [r3, #0]
1000920a:	4b66      	ldr	r3, [pc, #408]	; (100093a4 <mpu_set_bypass+0x1c4>)
1000920c:	681b      	ldr	r3, [r3, #0]
1000920e:	7919      	ldrb	r1, [r3, #4]
10009210:	230f      	movs	r3, #15
10009212:	18fb      	adds	r3, r7, r3
10009214:	2201      	movs	r2, #1
10009216:	4c64      	ldr	r4, [pc, #400]	; (100093a8 <mpu_set_bypass+0x1c8>)
10009218:	47a0      	blx	r4
1000921a:	1e03      	subs	r3, r0, #0
1000921c:	d002      	beq.n	10009224 <mpu_set_bypass+0x44>
        return -1;
1000921e:	2301      	movs	r3, #1
10009220:	425b      	negs	r3, r3
10009222:	e0ba      	b.n	1000939a <mpu_set_bypass+0x1ba>
        tmp &= ~BIT_AUX_IF_EN;
10009224:	230f      	movs	r3, #15
10009226:	18fb      	adds	r3, r7, r3
10009228:	781b      	ldrb	r3, [r3, #0]
1000922a:	2220      	movs	r2, #32
1000922c:	4393      	bics	r3, r2
1000922e:	b2da      	uxtb	r2, r3
10009230:	230f      	movs	r3, #15
10009232:	18fb      	adds	r3, r7, r3
10009234:	701a      	strb	r2, [r3, #0]
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009236:	4b5b      	ldr	r3, [pc, #364]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009238:	685b      	ldr	r3, [r3, #4]
1000923a:	7818      	ldrb	r0, [r3, #0]
1000923c:	4b59      	ldr	r3, [pc, #356]	; (100093a4 <mpu_set_bypass+0x1c4>)
1000923e:	681b      	ldr	r3, [r3, #0]
10009240:	7919      	ldrb	r1, [r3, #4]
10009242:	230f      	movs	r3, #15
10009244:	18fb      	adds	r3, r7, r3
10009246:	2201      	movs	r2, #1
10009248:	4c58      	ldr	r4, [pc, #352]	; (100093ac <mpu_set_bypass+0x1cc>)
1000924a:	47a0      	blx	r4
1000924c:	1e03      	subs	r3, r0, #0
1000924e:	d002      	beq.n	10009256 <mpu_set_bypass+0x76>
        return -1;
10009250:	2301      	movs	r3, #1
10009252:	425b      	negs	r3, r3
10009254:	e0a1      	b.n	1000939a <mpu_set_bypass+0x1ba>
        delay_ms(3);
10009256:	2003      	movs	r0, #3
10009258:	4b55      	ldr	r3, [pc, #340]	; (100093b0 <mpu_set_bypass+0x1d0>)
1000925a:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
1000925c:	230f      	movs	r3, #15
1000925e:	18fb      	adds	r3, r7, r3
10009260:	2202      	movs	r2, #2
10009262:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.active_low_int)
10009264:	4b4f      	ldr	r3, [pc, #316]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009266:	2222      	movs	r2, #34	; 0x22
10009268:	5c9b      	ldrb	r3, [r3, r2]
1000926a:	2b00      	cmp	r3, #0
1000926c:	d009      	beq.n	10009282 <mpu_set_bypass+0xa2>
        tmp |= BIT_ACTL;
1000926e:	230f      	movs	r3, #15
10009270:	18fb      	adds	r3, r7, r3
10009272:	781b      	ldrb	r3, [r3, #0]
10009274:	2280      	movs	r2, #128	; 0x80
10009276:	4252      	negs	r2, r2
10009278:	4313      	orrs	r3, r2
1000927a:	b2da      	uxtb	r2, r3
1000927c:	230f      	movs	r3, #15
1000927e:	18fb      	adds	r3, r7, r3
10009280:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.latched_int)
10009282:	4b48      	ldr	r3, [pc, #288]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009284:	2223      	movs	r2, #35	; 0x23
10009286:	5c9b      	ldrb	r3, [r3, r2]
10009288:	2b00      	cmp	r3, #0
1000928a:	d008      	beq.n	1000929e <mpu_set_bypass+0xbe>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
1000928c:	230f      	movs	r3, #15
1000928e:	18fb      	adds	r3, r7, r3
10009290:	781b      	ldrb	r3, [r3, #0]
10009292:	2230      	movs	r2, #48	; 0x30
10009294:	4313      	orrs	r3, r2
10009296:	b2da      	uxtb	r2, r3
10009298:	230f      	movs	r3, #15
1000929a:	18fb      	adds	r3, r7, r3
1000929c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
1000929e:	4b41      	ldr	r3, [pc, #260]	; (100093a4 <mpu_set_bypass+0x1c4>)
100092a0:	685b      	ldr	r3, [r3, #4]
100092a2:	7818      	ldrb	r0, [r3, #0]
100092a4:	4b3f      	ldr	r3, [pc, #252]	; (100093a4 <mpu_set_bypass+0x1c4>)
100092a6:	681b      	ldr	r3, [r3, #0]
100092a8:	7dd9      	ldrb	r1, [r3, #23]
100092aa:	230f      	movs	r3, #15
100092ac:	18fb      	adds	r3, r7, r3
100092ae:	2201      	movs	r2, #1
100092b0:	4c3e      	ldr	r4, [pc, #248]	; (100093ac <mpu_set_bypass+0x1cc>)
100092b2:	47a0      	blx	r4
100092b4:	1e03      	subs	r3, r0, #0
100092b6:	d100      	bne.n	100092ba <mpu_set_bypass+0xda>
100092b8:	e06a      	b.n	10009390 <mpu_set_bypass+0x1b0>
        return -1;
100092ba:	2301      	movs	r3, #1
100092bc:	425b      	negs	r3, r3
100092be:	e06c      	b.n	1000939a <mpu_set_bypass+0x1ba>
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100092c0:	4b38      	ldr	r3, [pc, #224]	; (100093a4 <mpu_set_bypass+0x1c4>)
100092c2:	685b      	ldr	r3, [r3, #4]
100092c4:	7818      	ldrb	r0, [r3, #0]
100092c6:	4b37      	ldr	r3, [pc, #220]	; (100093a4 <mpu_set_bypass+0x1c4>)
100092c8:	681b      	ldr	r3, [r3, #0]
100092ca:	7919      	ldrb	r1, [r3, #4]
100092cc:	230f      	movs	r3, #15
100092ce:	18fb      	adds	r3, r7, r3
100092d0:	2201      	movs	r2, #1
100092d2:	4c35      	ldr	r4, [pc, #212]	; (100093a8 <mpu_set_bypass+0x1c8>)
100092d4:	47a0      	blx	r4
100092d6:	1e03      	subs	r3, r0, #0
100092d8:	d002      	beq.n	100092e0 <mpu_set_bypass+0x100>
        return -1;
100092da:	2301      	movs	r3, #1
100092dc:	425b      	negs	r3, r3
100092de:	e05c      	b.n	1000939a <mpu_set_bypass+0x1ba>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100092e0:	4b30      	ldr	r3, [pc, #192]	; (100093a4 <mpu_set_bypass+0x1c4>)
100092e2:	7a9b      	ldrb	r3, [r3, #10]
100092e4:	001a      	movs	r2, r3
100092e6:	2301      	movs	r3, #1
100092e8:	4013      	ands	r3, r2
100092ea:	d009      	beq.n	10009300 <mpu_set_bypass+0x120>
        tmp |= BIT_AUX_IF_EN;
100092ec:	230f      	movs	r3, #15
100092ee:	18fb      	adds	r3, r7, r3
100092f0:	781b      	ldrb	r3, [r3, #0]
100092f2:	2220      	movs	r2, #32
100092f4:	4313      	orrs	r3, r2
100092f6:	b2da      	uxtb	r2, r3
100092f8:	230f      	movs	r3, #15
100092fa:	18fb      	adds	r3, r7, r3
100092fc:	701a      	strb	r2, [r3, #0]
100092fe:	e008      	b.n	10009312 <mpu_set_bypass+0x132>
        else
        tmp &= ~BIT_AUX_IF_EN;
10009300:	230f      	movs	r3, #15
10009302:	18fb      	adds	r3, r7, r3
10009304:	781b      	ldrb	r3, [r3, #0]
10009306:	2220      	movs	r2, #32
10009308:	4393      	bics	r3, r2
1000930a:	b2da      	uxtb	r2, r3
1000930c:	230f      	movs	r3, #15
1000930e:	18fb      	adds	r3, r7, r3
10009310:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009312:	4b24      	ldr	r3, [pc, #144]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009314:	685b      	ldr	r3, [r3, #4]
10009316:	7818      	ldrb	r0, [r3, #0]
10009318:	4b22      	ldr	r3, [pc, #136]	; (100093a4 <mpu_set_bypass+0x1c4>)
1000931a:	681b      	ldr	r3, [r3, #0]
1000931c:	7919      	ldrb	r1, [r3, #4]
1000931e:	230f      	movs	r3, #15
10009320:	18fb      	adds	r3, r7, r3
10009322:	2201      	movs	r2, #1
10009324:	4c21      	ldr	r4, [pc, #132]	; (100093ac <mpu_set_bypass+0x1cc>)
10009326:	47a0      	blx	r4
10009328:	1e03      	subs	r3, r0, #0
1000932a:	d002      	beq.n	10009332 <mpu_set_bypass+0x152>
        return -1;
1000932c:	2301      	movs	r3, #1
1000932e:	425b      	negs	r3, r3
10009330:	e033      	b.n	1000939a <mpu_set_bypass+0x1ba>
        delay_ms(3);
10009332:	2003      	movs	r0, #3
10009334:	4b1e      	ldr	r3, [pc, #120]	; (100093b0 <mpu_set_bypass+0x1d0>)
10009336:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10009338:	4b1a      	ldr	r3, [pc, #104]	; (100093a4 <mpu_set_bypass+0x1c4>)
1000933a:	2222      	movs	r2, #34	; 0x22
1000933c:	5c9b      	ldrb	r3, [r3, r2]
1000933e:	2b00      	cmp	r3, #0
10009340:	d004      	beq.n	1000934c <mpu_set_bypass+0x16c>
        tmp = BIT_ACTL;
10009342:	230f      	movs	r3, #15
10009344:	18fb      	adds	r3, r7, r3
10009346:	2280      	movs	r2, #128	; 0x80
10009348:	701a      	strb	r2, [r3, #0]
1000934a:	e003      	b.n	10009354 <mpu_set_bypass+0x174>
        else
        tmp = 0;
1000934c:	230f      	movs	r3, #15
1000934e:	18fb      	adds	r3, r7, r3
10009350:	2200      	movs	r2, #0
10009352:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.latched_int)
10009354:	4b13      	ldr	r3, [pc, #76]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009356:	2223      	movs	r2, #35	; 0x23
10009358:	5c9b      	ldrb	r3, [r3, r2]
1000935a:	2b00      	cmp	r3, #0
1000935c:	d008      	beq.n	10009370 <mpu_set_bypass+0x190>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
1000935e:	230f      	movs	r3, #15
10009360:	18fb      	adds	r3, r7, r3
10009362:	781b      	ldrb	r3, [r3, #0]
10009364:	2230      	movs	r2, #48	; 0x30
10009366:	4313      	orrs	r3, r2
10009368:	b2da      	uxtb	r2, r3
1000936a:	230f      	movs	r3, #15
1000936c:	18fb      	adds	r3, r7, r3
1000936e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10009370:	4b0c      	ldr	r3, [pc, #48]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009372:	685b      	ldr	r3, [r3, #4]
10009374:	7818      	ldrb	r0, [r3, #0]
10009376:	4b0b      	ldr	r3, [pc, #44]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009378:	681b      	ldr	r3, [r3, #0]
1000937a:	7dd9      	ldrb	r1, [r3, #23]
1000937c:	230f      	movs	r3, #15
1000937e:	18fb      	adds	r3, r7, r3
10009380:	2201      	movs	r2, #1
10009382:	4c0a      	ldr	r4, [pc, #40]	; (100093ac <mpu_set_bypass+0x1cc>)
10009384:	47a0      	blx	r4
10009386:	1e03      	subs	r3, r0, #0
10009388:	d002      	beq.n	10009390 <mpu_set_bypass+0x1b0>
        return -1;
1000938a:	2301      	movs	r3, #1
1000938c:	425b      	negs	r3, r3
1000938e:	e004      	b.n	1000939a <mpu_set_bypass+0x1ba>
    }
    st.chip_cfg.bypass_mode = bypass_on;
10009390:	4b04      	ldr	r3, [pc, #16]	; (100093a4 <mpu_set_bypass+0x1c4>)
10009392:	1dfa      	adds	r2, r7, #7
10009394:	7812      	ldrb	r2, [r2, #0]
10009396:	749a      	strb	r2, [r3, #18]
    return 0;
10009398:	2300      	movs	r3, #0
}
1000939a:	0018      	movs	r0, r3
1000939c:	46bd      	mov	sp, r7
1000939e:	b005      	add	sp, #20
100093a0:	bd90      	pop	{r4, r7, pc}
100093a2:	46c0      	nop			; (mov r8, r8)
100093a4:	10019a50 	.word	0x10019a50
100093a8:	100081e9 	.word	0x100081e9
100093ac:	100080d5 	.word	0x100080d5
100093b0:	1000b175 	.word	0x1000b175

100093b4 <mpu_set_int_level>:
*  @brief      Set interrupt level.
*  @param[in]  active_low  1 for active low, 0 for active high.
*  @return     0 if successful.
*/
int mpu_set_int_level(unsigned char active_low)
{
100093b4:	b580      	push	{r7, lr}
100093b6:	b082      	sub	sp, #8
100093b8:	af00      	add	r7, sp, #0
100093ba:	0002      	movs	r2, r0
100093bc:	1dfb      	adds	r3, r7, #7
100093be:	701a      	strb	r2, [r3, #0]
    st.chip_cfg.active_low_int = active_low;
100093c0:	4b04      	ldr	r3, [pc, #16]	; (100093d4 <mpu_set_int_level+0x20>)
100093c2:	1dfa      	adds	r2, r7, #7
100093c4:	2122      	movs	r1, #34	; 0x22
100093c6:	7812      	ldrb	r2, [r2, #0]
100093c8:	545a      	strb	r2, [r3, r1]
    return 0;
100093ca:	2300      	movs	r3, #0
}
100093cc:	0018      	movs	r0, r3
100093ce:	46bd      	mov	sp, r7
100093d0:	b002      	add	sp, #8
100093d2:	bd80      	pop	{r7, pc}
100093d4:	10019a50 	.word	0x10019a50

100093d8 <mpu_set_int_latched>:
*  Any MPU register will clear the interrupt.
*  @param[in]  enable  1 to enable, 0 to disable.
*  @return     0 if successful.
*/
int mpu_set_int_latched(unsigned char enable)
{
100093d8:	b590      	push	{r4, r7, lr}
100093da:	b085      	sub	sp, #20
100093dc:	af00      	add	r7, sp, #0
100093de:	0002      	movs	r2, r0
100093e0:	1dfb      	adds	r3, r7, #7
100093e2:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
100093e4:	4b25      	ldr	r3, [pc, #148]	; (1000947c <mpu_set_int_latched+0xa4>)
100093e6:	2223      	movs	r2, #35	; 0x23
100093e8:	5c9b      	ldrb	r3, [r3, r2]
100093ea:	1dfa      	adds	r2, r7, #7
100093ec:	7812      	ldrb	r2, [r2, #0]
100093ee:	429a      	cmp	r2, r3
100093f0:	d101      	bne.n	100093f6 <mpu_set_int_latched+0x1e>
    return 0;
100093f2:	2300      	movs	r3, #0
100093f4:	e03e      	b.n	10009474 <mpu_set_int_latched+0x9c>

    if (enable)
100093f6:	1dfb      	adds	r3, r7, #7
100093f8:	781b      	ldrb	r3, [r3, #0]
100093fa:	2b00      	cmp	r3, #0
100093fc:	d004      	beq.n	10009408 <mpu_set_int_latched+0x30>
    tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
100093fe:	230f      	movs	r3, #15
10009400:	18fb      	adds	r3, r7, r3
10009402:	2230      	movs	r2, #48	; 0x30
10009404:	701a      	strb	r2, [r3, #0]
10009406:	e003      	b.n	10009410 <mpu_set_int_latched+0x38>
    else
    tmp = 0;
10009408:	230f      	movs	r3, #15
1000940a:	18fb      	adds	r3, r7, r3
1000940c:	2200      	movs	r2, #0
1000940e:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10009410:	4b1a      	ldr	r3, [pc, #104]	; (1000947c <mpu_set_int_latched+0xa4>)
10009412:	7c9b      	ldrb	r3, [r3, #18]
10009414:	2b00      	cmp	r3, #0
10009416:	d008      	beq.n	1000942a <mpu_set_int_latched+0x52>
    tmp |= BIT_BYPASS_EN;
10009418:	230f      	movs	r3, #15
1000941a:	18fb      	adds	r3, r7, r3
1000941c:	781b      	ldrb	r3, [r3, #0]
1000941e:	2202      	movs	r2, #2
10009420:	4313      	orrs	r3, r2
10009422:	b2da      	uxtb	r2, r3
10009424:	230f      	movs	r3, #15
10009426:	18fb      	adds	r3, r7, r3
10009428:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
1000942a:	4b14      	ldr	r3, [pc, #80]	; (1000947c <mpu_set_int_latched+0xa4>)
1000942c:	2222      	movs	r2, #34	; 0x22
1000942e:	5c9b      	ldrb	r3, [r3, r2]
10009430:	2b00      	cmp	r3, #0
10009432:	d009      	beq.n	10009448 <mpu_set_int_latched+0x70>
    tmp |= BIT_ACTL;
10009434:	230f      	movs	r3, #15
10009436:	18fb      	adds	r3, r7, r3
10009438:	781b      	ldrb	r3, [r3, #0]
1000943a:	2280      	movs	r2, #128	; 0x80
1000943c:	4252      	negs	r2, r2
1000943e:	4313      	orrs	r3, r2
10009440:	b2da      	uxtb	r2, r3
10009442:	230f      	movs	r3, #15
10009444:	18fb      	adds	r3, r7, r3
10009446:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10009448:	4b0c      	ldr	r3, [pc, #48]	; (1000947c <mpu_set_int_latched+0xa4>)
1000944a:	685b      	ldr	r3, [r3, #4]
1000944c:	7818      	ldrb	r0, [r3, #0]
1000944e:	4b0b      	ldr	r3, [pc, #44]	; (1000947c <mpu_set_int_latched+0xa4>)
10009450:	681b      	ldr	r3, [r3, #0]
10009452:	7dd9      	ldrb	r1, [r3, #23]
10009454:	230f      	movs	r3, #15
10009456:	18fb      	adds	r3, r7, r3
10009458:	2201      	movs	r2, #1
1000945a:	4c09      	ldr	r4, [pc, #36]	; (10009480 <mpu_set_int_latched+0xa8>)
1000945c:	47a0      	blx	r4
1000945e:	1e03      	subs	r3, r0, #0
10009460:	d002      	beq.n	10009468 <mpu_set_int_latched+0x90>
    return -1;
10009462:	2301      	movs	r3, #1
10009464:	425b      	negs	r3, r3
10009466:	e005      	b.n	10009474 <mpu_set_int_latched+0x9c>
    st.chip_cfg.latched_int = enable;
10009468:	4b04      	ldr	r3, [pc, #16]	; (1000947c <mpu_set_int_latched+0xa4>)
1000946a:	1dfa      	adds	r2, r7, #7
1000946c:	2123      	movs	r1, #35	; 0x23
1000946e:	7812      	ldrb	r2, [r2, #0]
10009470:	545a      	strb	r2, [r3, r1]
    return 0;
10009472:	2300      	movs	r3, #0
}
10009474:	0018      	movs	r0, r3
10009476:	46bd      	mov	sp, r7
10009478:	b005      	add	sp, #20
1000947a:	bd90      	pop	{r4, r7, pc}
1000947c:	10019a50 	.word	0x10019a50
10009480:	100080d5 	.word	0x100080d5

10009484 <mpu_write_mem>:
*  @param[in]  data        Bytes to write to memory.
*  @return     0 if successful.
*/
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
unsigned char *data)
{
10009484:	b590      	push	{r4, r7, lr}
10009486:	b085      	sub	sp, #20
10009488:	af00      	add	r7, sp, #0
1000948a:	603a      	str	r2, [r7, #0]
1000948c:	1dbb      	adds	r3, r7, #6
1000948e:	1c02      	adds	r2, r0, #0
10009490:	801a      	strh	r2, [r3, #0]
10009492:	1d3b      	adds	r3, r7, #4
10009494:	1c0a      	adds	r2, r1, #0
10009496:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (!data)
10009498:	683b      	ldr	r3, [r7, #0]
1000949a:	2b00      	cmp	r3, #0
1000949c:	d102      	bne.n	100094a4 <mpu_write_mem+0x20>
    return -1;
1000949e:	2301      	movs	r3, #1
100094a0:	425b      	negs	r3, r3
100094a2:	e045      	b.n	10009530 <mpu_write_mem+0xac>
    if (!st.chip_cfg.sensors)
100094a4:	4b24      	ldr	r3, [pc, #144]	; (10009538 <mpu_write_mem+0xb4>)
100094a6:	7a9b      	ldrb	r3, [r3, #10]
100094a8:	2b00      	cmp	r3, #0
100094aa:	d102      	bne.n	100094b2 <mpu_write_mem+0x2e>
    return -1;
100094ac:	2301      	movs	r3, #1
100094ae:	425b      	negs	r3, r3
100094b0:	e03e      	b.n	10009530 <mpu_write_mem+0xac>

    tmp[0] = (unsigned char)(mem_addr >> 8);
100094b2:	1dbb      	adds	r3, r7, #6
100094b4:	881b      	ldrh	r3, [r3, #0]
100094b6:	0a1b      	lsrs	r3, r3, #8
100094b8:	b29b      	uxth	r3, r3
100094ba:	b2da      	uxtb	r2, r3
100094bc:	230c      	movs	r3, #12
100094be:	18fb      	adds	r3, r7, r3
100094c0:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100094c2:	1dbb      	adds	r3, r7, #6
100094c4:	881b      	ldrh	r3, [r3, #0]
100094c6:	b2da      	uxtb	r2, r3
100094c8:	230c      	movs	r3, #12
100094ca:	18fb      	adds	r3, r7, r3
100094cc:	705a      	strb	r2, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100094ce:	230c      	movs	r3, #12
100094d0:	18fb      	adds	r3, r7, r3
100094d2:	785b      	ldrb	r3, [r3, #1]
100094d4:	001a      	movs	r2, r3
100094d6:	1d3b      	adds	r3, r7, #4
100094d8:	881b      	ldrh	r3, [r3, #0]
100094da:	18d2      	adds	r2, r2, r3
100094dc:	4b16      	ldr	r3, [pc, #88]	; (10009538 <mpu_write_mem+0xb4>)
100094de:	685b      	ldr	r3, [r3, #4]
100094e0:	895b      	ldrh	r3, [r3, #10]
100094e2:	429a      	cmp	r2, r3
100094e4:	dd02      	ble.n	100094ec <mpu_write_mem+0x68>
    return -1;
100094e6:	2301      	movs	r3, #1
100094e8:	425b      	negs	r3, r3
100094ea:	e021      	b.n	10009530 <mpu_write_mem+0xac>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100094ec:	4b12      	ldr	r3, [pc, #72]	; (10009538 <mpu_write_mem+0xb4>)
100094ee:	685b      	ldr	r3, [r3, #4]
100094f0:	7818      	ldrb	r0, [r3, #0]
100094f2:	4b11      	ldr	r3, [pc, #68]	; (10009538 <mpu_write_mem+0xb4>)
100094f4:	681b      	ldr	r3, [r3, #0]
100094f6:	7ed9      	ldrb	r1, [r3, #27]
100094f8:	230c      	movs	r3, #12
100094fa:	18fb      	adds	r3, r7, r3
100094fc:	2202      	movs	r2, #2
100094fe:	4c0f      	ldr	r4, [pc, #60]	; (1000953c <mpu_write_mem+0xb8>)
10009500:	47a0      	blx	r4
10009502:	1e03      	subs	r3, r0, #0
10009504:	d002      	beq.n	1000950c <mpu_write_mem+0x88>
    return -1;
10009506:	2301      	movs	r3, #1
10009508:	425b      	negs	r3, r3
1000950a:	e011      	b.n	10009530 <mpu_write_mem+0xac>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000950c:	4b0a      	ldr	r3, [pc, #40]	; (10009538 <mpu_write_mem+0xb4>)
1000950e:	685b      	ldr	r3, [r3, #4]
10009510:	7818      	ldrb	r0, [r3, #0]
10009512:	4b09      	ldr	r3, [pc, #36]	; (10009538 <mpu_write_mem+0xb4>)
10009514:	681b      	ldr	r3, [r3, #0]
10009516:	7e19      	ldrb	r1, [r3, #24]
10009518:	1d3b      	adds	r3, r7, #4
1000951a:	881b      	ldrh	r3, [r3, #0]
1000951c:	b2da      	uxtb	r2, r3
1000951e:	683b      	ldr	r3, [r7, #0]
10009520:	4c06      	ldr	r4, [pc, #24]	; (1000953c <mpu_write_mem+0xb8>)
10009522:	47a0      	blx	r4
10009524:	1e03      	subs	r3, r0, #0
10009526:	d002      	beq.n	1000952e <mpu_write_mem+0xaa>
    return -1;
10009528:	2301      	movs	r3, #1
1000952a:	425b      	negs	r3, r3
1000952c:	e000      	b.n	10009530 <mpu_write_mem+0xac>
    return 0;
1000952e:	2300      	movs	r3, #0
}
10009530:	0018      	movs	r0, r3
10009532:	46bd      	mov	sp, r7
10009534:	b005      	add	sp, #20
10009536:	bd90      	pop	{r4, r7, pc}
10009538:	10019a50 	.word	0x10019a50
1000953c:	100080d5 	.word	0x100080d5

10009540 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
10009540:	b590      	push	{r4, r7, lr}
10009542:	b085      	sub	sp, #20
10009544:	af00      	add	r7, sp, #0
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);
10009546:	2001      	movs	r0, #1
10009548:	4ba9      	ldr	r3, [pc, #676]	; (100097f0 <setup_compass+0x2b0>)
1000954a:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000954c:	230f      	movs	r3, #15
1000954e:	18fb      	adds	r3, r7, r3
10009550:	220c      	movs	r2, #12
10009552:	701a      	strb	r2, [r3, #0]
10009554:	e018      	b.n	10009588 <setup_compass+0x48>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009556:	1d3a      	adds	r2, r7, #4
10009558:	230f      	movs	r3, #15
1000955a:	18fb      	adds	r3, r7, r3
1000955c:	7818      	ldrb	r0, [r3, #0]
1000955e:	0013      	movs	r3, r2
10009560:	2201      	movs	r2, #1
10009562:	2100      	movs	r1, #0
10009564:	4ca3      	ldr	r4, [pc, #652]	; (100097f4 <setup_compass+0x2b4>)
10009566:	47a0      	blx	r4
10009568:	0003      	movs	r3, r0
1000956a:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
1000956c:	68bb      	ldr	r3, [r7, #8]
1000956e:	2b00      	cmp	r3, #0
10009570:	d103      	bne.n	1000957a <setup_compass+0x3a>
10009572:	1d3b      	adds	r3, r7, #4
10009574:	781b      	ldrb	r3, [r3, #0]
10009576:	2b48      	cmp	r3, #72	; 0x48
10009578:	d00c      	beq.n	10009594 <setup_compass+0x54>
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000957a:	230f      	movs	r3, #15
1000957c:	18fb      	adds	r3, r7, r3
1000957e:	781a      	ldrb	r2, [r3, #0]
10009580:	230f      	movs	r3, #15
10009582:	18fb      	adds	r3, r7, r3
10009584:	3201      	adds	r2, #1
10009586:	701a      	strb	r2, [r3, #0]
10009588:	230f      	movs	r3, #15
1000958a:	18fb      	adds	r3, r7, r3
1000958c:	781b      	ldrb	r3, [r3, #0]
1000958e:	2b0f      	cmp	r3, #15
10009590:	d9e1      	bls.n	10009556 <setup_compass+0x16>
10009592:	e000      	b.n	10009596 <setup_compass+0x56>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
        break;
10009594:	46c0      	nop			; (mov r8, r8)
    }

    if (akm_addr > 0x0F) {
10009596:	230f      	movs	r3, #15
10009598:	18fb      	adds	r3, r7, r3
1000959a:	781b      	ldrb	r3, [r3, #0]
1000959c:	2b0f      	cmp	r3, #15
1000959e:	d90a      	bls.n	100095b6 <setup_compass+0x76>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100095a0:	4b95      	ldr	r3, [pc, #596]	; (100097f8 <setup_compass+0x2b8>)
100095a2:	0018      	movs	r0, r3
100095a4:	4b95      	ldr	r3, [pc, #596]	; (100097fc <setup_compass+0x2bc>)
100095a6:	4798      	blx	r3
100095a8:	4b95      	ldr	r3, [pc, #596]	; (10009800 <setup_compass+0x2c0>)
100095aa:	0018      	movs	r0, r3
100095ac:	4b93      	ldr	r3, [pc, #588]	; (100097fc <setup_compass+0x2bc>)
100095ae:	4798      	blx	r3
        return -1;
100095b0:	2301      	movs	r3, #1
100095b2:	425b      	negs	r3, r3
100095b4:	e117      	b.n	100097e6 <setup_compass+0x2a6>
    }

    st.chip_cfg.compass_addr = akm_addr;
100095b6:	4b93      	ldr	r3, [pc, #588]	; (10009804 <setup_compass+0x2c4>)
100095b8:	220f      	movs	r2, #15
100095ba:	18ba      	adds	r2, r7, r2
100095bc:	212a      	movs	r1, #42	; 0x2a
100095be:	7812      	ldrb	r2, [r2, #0]
100095c0:	545a      	strb	r2, [r3, r1]

    data[0] = AKM_POWER_DOWN;
100095c2:	1d3b      	adds	r3, r7, #4
100095c4:	2210      	movs	r2, #16
100095c6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100095c8:	4b8e      	ldr	r3, [pc, #568]	; (10009804 <setup_compass+0x2c4>)
100095ca:	222a      	movs	r2, #42	; 0x2a
100095cc:	5c98      	ldrb	r0, [r3, r2]
100095ce:	1d3b      	adds	r3, r7, #4
100095d0:	2201      	movs	r2, #1
100095d2:	210a      	movs	r1, #10
100095d4:	4c8c      	ldr	r4, [pc, #560]	; (10009808 <setup_compass+0x2c8>)
100095d6:	47a0      	blx	r4
100095d8:	1e03      	subs	r3, r0, #0
100095da:	d002      	beq.n	100095e2 <setup_compass+0xa2>
    return -1;
100095dc:	2301      	movs	r3, #1
100095de:	425b      	negs	r3, r3
100095e0:	e101      	b.n	100097e6 <setup_compass+0x2a6>
    delay_ms(1);
100095e2:	2001      	movs	r0, #1
100095e4:	4b89      	ldr	r3, [pc, #548]	; (1000980c <setup_compass+0x2cc>)
100095e6:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
100095e8:	1d3b      	adds	r3, r7, #4
100095ea:	221f      	movs	r2, #31
100095ec:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100095ee:	4b85      	ldr	r3, [pc, #532]	; (10009804 <setup_compass+0x2c4>)
100095f0:	222a      	movs	r2, #42	; 0x2a
100095f2:	5c98      	ldrb	r0, [r3, r2]
100095f4:	1d3b      	adds	r3, r7, #4
100095f6:	2201      	movs	r2, #1
100095f8:	210a      	movs	r1, #10
100095fa:	4c83      	ldr	r4, [pc, #524]	; (10009808 <setup_compass+0x2c8>)
100095fc:	47a0      	blx	r4
100095fe:	1e03      	subs	r3, r0, #0
10009600:	d002      	beq.n	10009608 <setup_compass+0xc8>
    return -1;
10009602:	2301      	movs	r3, #1
10009604:	425b      	negs	r3, r3
10009606:	e0ee      	b.n	100097e6 <setup_compass+0x2a6>
    delay_ms(1);
10009608:	2001      	movs	r0, #1
1000960a:	4b80      	ldr	r3, [pc, #512]	; (1000980c <setup_compass+0x2cc>)
1000960c:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000960e:	4b7d      	ldr	r3, [pc, #500]	; (10009804 <setup_compass+0x2c4>)
10009610:	222a      	movs	r2, #42	; 0x2a
10009612:	5c98      	ldrb	r0, [r3, r2]
10009614:	1d3b      	adds	r3, r7, #4
10009616:	2203      	movs	r2, #3
10009618:	2110      	movs	r1, #16
1000961a:	4c76      	ldr	r4, [pc, #472]	; (100097f4 <setup_compass+0x2b4>)
1000961c:	47a0      	blx	r4
1000961e:	1e03      	subs	r3, r0, #0
10009620:	d002      	beq.n	10009628 <setup_compass+0xe8>
    return -1;
10009622:	2301      	movs	r3, #1
10009624:	425b      	negs	r3, r3
10009626:	e0de      	b.n	100097e6 <setup_compass+0x2a6>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009628:	1d3b      	adds	r3, r7, #4
1000962a:	781b      	ldrb	r3, [r3, #0]
1000962c:	b29b      	uxth	r3, r3
1000962e:	3380      	adds	r3, #128	; 0x80
10009630:	b29b      	uxth	r3, r3
10009632:	b21a      	sxth	r2, r3
10009634:	4b73      	ldr	r3, [pc, #460]	; (10009804 <setup_compass+0x2c4>)
10009636:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009638:	1d3b      	adds	r3, r7, #4
1000963a:	785b      	ldrb	r3, [r3, #1]
1000963c:	b29b      	uxth	r3, r3
1000963e:	3380      	adds	r3, #128	; 0x80
10009640:	b29b      	uxth	r3, r3
10009642:	b21a      	sxth	r2, r3
10009644:	4b6f      	ldr	r3, [pc, #444]	; (10009804 <setup_compass+0x2c4>)
10009646:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009648:	1d3b      	adds	r3, r7, #4
1000964a:	789b      	ldrb	r3, [r3, #2]
1000964c:	b29b      	uxth	r3, r3
1000964e:	3380      	adds	r3, #128	; 0x80
10009650:	b29b      	uxth	r3, r3
10009652:	b21a      	sxth	r2, r3
10009654:	4b6b      	ldr	r3, [pc, #428]	; (10009804 <setup_compass+0x2c4>)
10009656:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009658:	1d3b      	adds	r3, r7, #4
1000965a:	2210      	movs	r2, #16
1000965c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000965e:	4b69      	ldr	r3, [pc, #420]	; (10009804 <setup_compass+0x2c4>)
10009660:	222a      	movs	r2, #42	; 0x2a
10009662:	5c98      	ldrb	r0, [r3, r2]
10009664:	1d3b      	adds	r3, r7, #4
10009666:	2201      	movs	r2, #1
10009668:	210a      	movs	r1, #10
1000966a:	4c67      	ldr	r4, [pc, #412]	; (10009808 <setup_compass+0x2c8>)
1000966c:	47a0      	blx	r4
1000966e:	1e03      	subs	r3, r0, #0
10009670:	d002      	beq.n	10009678 <setup_compass+0x138>
    return -1;
10009672:	2301      	movs	r3, #1
10009674:	425b      	negs	r3, r3
10009676:	e0b6      	b.n	100097e6 <setup_compass+0x2a6>
    delay_ms(1);
10009678:	2001      	movs	r0, #1
1000967a:	4b64      	ldr	r3, [pc, #400]	; (1000980c <setup_compass+0x2cc>)
1000967c:	4798      	blx	r3

    mpu_set_bypass(0);
1000967e:	2000      	movs	r0, #0
10009680:	4b5b      	ldr	r3, [pc, #364]	; (100097f0 <setup_compass+0x2b0>)
10009682:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009684:	1d3b      	adds	r3, r7, #4
10009686:	2240      	movs	r2, #64	; 0x40
10009688:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000968a:	4b5e      	ldr	r3, [pc, #376]	; (10009804 <setup_compass+0x2c4>)
1000968c:	685b      	ldr	r3, [r3, #4]
1000968e:	7818      	ldrb	r0, [r3, #0]
10009690:	4b5c      	ldr	r3, [pc, #368]	; (10009804 <setup_compass+0x2c4>)
10009692:	681b      	ldr	r3, [r3, #0]
10009694:	7e99      	ldrb	r1, [r3, #26]
10009696:	1d3b      	adds	r3, r7, #4
10009698:	2201      	movs	r2, #1
1000969a:	4c5b      	ldr	r4, [pc, #364]	; (10009808 <setup_compass+0x2c8>)
1000969c:	47a0      	blx	r4
1000969e:	1e03      	subs	r3, r0, #0
100096a0:	d002      	beq.n	100096a8 <setup_compass+0x168>
    return -1;
100096a2:	2301      	movs	r3, #1
100096a4:	425b      	negs	r3, r3
100096a6:	e09e      	b.n	100097e6 <setup_compass+0x2a6>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100096a8:	4b56      	ldr	r3, [pc, #344]	; (10009804 <setup_compass+0x2c4>)
100096aa:	222a      	movs	r2, #42	; 0x2a
100096ac:	5c9b      	ldrb	r3, [r3, r2]
100096ae:	2280      	movs	r2, #128	; 0x80
100096b0:	4252      	negs	r2, r2
100096b2:	4313      	orrs	r3, r2
100096b4:	b2da      	uxtb	r2, r3
100096b6:	1d3b      	adds	r3, r7, #4
100096b8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100096ba:	4b52      	ldr	r3, [pc, #328]	; (10009804 <setup_compass+0x2c4>)
100096bc:	685b      	ldr	r3, [r3, #4]
100096be:	7818      	ldrb	r0, [r3, #0]
100096c0:	4b50      	ldr	r3, [pc, #320]	; (10009804 <setup_compass+0x2c4>)
100096c2:	681b      	ldr	r3, [r3, #0]
100096c4:	7f99      	ldrb	r1, [r3, #30]
100096c6:	1d3b      	adds	r3, r7, #4
100096c8:	2201      	movs	r2, #1
100096ca:	4c4f      	ldr	r4, [pc, #316]	; (10009808 <setup_compass+0x2c8>)
100096cc:	47a0      	blx	r4
100096ce:	1e03      	subs	r3, r0, #0
100096d0:	d002      	beq.n	100096d8 <setup_compass+0x198>
    return -1;
100096d2:	2301      	movs	r3, #1
100096d4:	425b      	negs	r3, r3
100096d6:	e086      	b.n	100097e6 <setup_compass+0x2a6>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100096d8:	1d3b      	adds	r3, r7, #4
100096da:	2202      	movs	r2, #2
100096dc:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100096de:	4b49      	ldr	r3, [pc, #292]	; (10009804 <setup_compass+0x2c4>)
100096e0:	685b      	ldr	r3, [r3, #4]
100096e2:	7818      	ldrb	r0, [r3, #0]
100096e4:	4b47      	ldr	r3, [pc, #284]	; (10009804 <setup_compass+0x2c4>)
100096e6:	681b      	ldr	r3, [r3, #0]
100096e8:	7fd9      	ldrb	r1, [r3, #31]
100096ea:	1d3b      	adds	r3, r7, #4
100096ec:	2201      	movs	r2, #1
100096ee:	4c46      	ldr	r4, [pc, #280]	; (10009808 <setup_compass+0x2c8>)
100096f0:	47a0      	blx	r4
100096f2:	1e03      	subs	r3, r0, #0
100096f4:	d002      	beq.n	100096fc <setup_compass+0x1bc>
    return -1;
100096f6:	2301      	movs	r3, #1
100096f8:	425b      	negs	r3, r3
100096fa:	e074      	b.n	100097e6 <setup_compass+0x2a6>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100096fc:	1d3b      	adds	r3, r7, #4
100096fe:	2288      	movs	r2, #136	; 0x88
10009700:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009702:	4b40      	ldr	r3, [pc, #256]	; (10009804 <setup_compass+0x2c4>)
10009704:	685b      	ldr	r3, [r3, #4]
10009706:	7818      	ldrb	r0, [r3, #0]
10009708:	4b3e      	ldr	r3, [pc, #248]	; (10009804 <setup_compass+0x2c4>)
1000970a:	681b      	ldr	r3, [r3, #0]
1000970c:	2220      	movs	r2, #32
1000970e:	5c99      	ldrb	r1, [r3, r2]
10009710:	1d3b      	adds	r3, r7, #4
10009712:	2201      	movs	r2, #1
10009714:	4c3c      	ldr	r4, [pc, #240]	; (10009808 <setup_compass+0x2c8>)
10009716:	47a0      	blx	r4
10009718:	1e03      	subs	r3, r0, #0
1000971a:	d002      	beq.n	10009722 <setup_compass+0x1e2>
    return -1;
1000971c:	2301      	movs	r3, #1
1000971e:	425b      	negs	r3, r3
10009720:	e061      	b.n	100097e6 <setup_compass+0x2a6>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009722:	4b38      	ldr	r3, [pc, #224]	; (10009804 <setup_compass+0x2c4>)
10009724:	222a      	movs	r2, #42	; 0x2a
10009726:	5c9a      	ldrb	r2, [r3, r2]
10009728:	1d3b      	adds	r3, r7, #4
1000972a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000972c:	4b35      	ldr	r3, [pc, #212]	; (10009804 <setup_compass+0x2c4>)
1000972e:	685b      	ldr	r3, [r3, #4]
10009730:	7818      	ldrb	r0, [r3, #0]
10009732:	4b34      	ldr	r3, [pc, #208]	; (10009804 <setup_compass+0x2c4>)
10009734:	681b      	ldr	r3, [r3, #0]
10009736:	2221      	movs	r2, #33	; 0x21
10009738:	5c99      	ldrb	r1, [r3, r2]
1000973a:	1d3b      	adds	r3, r7, #4
1000973c:	2201      	movs	r2, #1
1000973e:	4c32      	ldr	r4, [pc, #200]	; (10009808 <setup_compass+0x2c8>)
10009740:	47a0      	blx	r4
10009742:	1e03      	subs	r3, r0, #0
10009744:	d002      	beq.n	1000974c <setup_compass+0x20c>
    return -1;
10009746:	2301      	movs	r3, #1
10009748:	425b      	negs	r3, r3
1000974a:	e04c      	b.n	100097e6 <setup_compass+0x2a6>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000974c:	1d3b      	adds	r3, r7, #4
1000974e:	220a      	movs	r2, #10
10009750:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009752:	4b2c      	ldr	r3, [pc, #176]	; (10009804 <setup_compass+0x2c4>)
10009754:	685b      	ldr	r3, [r3, #4]
10009756:	7818      	ldrb	r0, [r3, #0]
10009758:	4b2a      	ldr	r3, [pc, #168]	; (10009804 <setup_compass+0x2c4>)
1000975a:	681b      	ldr	r3, [r3, #0]
1000975c:	2222      	movs	r2, #34	; 0x22
1000975e:	5c99      	ldrb	r1, [r3, r2]
10009760:	1d3b      	adds	r3, r7, #4
10009762:	2201      	movs	r2, #1
10009764:	4c28      	ldr	r4, [pc, #160]	; (10009808 <setup_compass+0x2c8>)
10009766:	47a0      	blx	r4
10009768:	1e03      	subs	r3, r0, #0
1000976a:	d002      	beq.n	10009772 <setup_compass+0x232>
    return -1;
1000976c:	2301      	movs	r3, #1
1000976e:	425b      	negs	r3, r3
10009770:	e039      	b.n	100097e6 <setup_compass+0x2a6>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009772:	1d3b      	adds	r3, r7, #4
10009774:	2281      	movs	r2, #129	; 0x81
10009776:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009778:	4b22      	ldr	r3, [pc, #136]	; (10009804 <setup_compass+0x2c4>)
1000977a:	685b      	ldr	r3, [r3, #4]
1000977c:	7818      	ldrb	r0, [r3, #0]
1000977e:	4b21      	ldr	r3, [pc, #132]	; (10009804 <setup_compass+0x2c4>)
10009780:	681b      	ldr	r3, [r3, #0]
10009782:	2223      	movs	r2, #35	; 0x23
10009784:	5c99      	ldrb	r1, [r3, r2]
10009786:	1d3b      	adds	r3, r7, #4
10009788:	2201      	movs	r2, #1
1000978a:	4c1f      	ldr	r4, [pc, #124]	; (10009808 <setup_compass+0x2c8>)
1000978c:	47a0      	blx	r4
1000978e:	1e03      	subs	r3, r0, #0
10009790:	d002      	beq.n	10009798 <setup_compass+0x258>
    return -1;
10009792:	2301      	movs	r3, #1
10009794:	425b      	negs	r3, r3
10009796:	e026      	b.n	100097e6 <setup_compass+0x2a6>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009798:	1d3b      	adds	r3, r7, #4
1000979a:	2211      	movs	r2, #17
1000979c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000979e:	4b19      	ldr	r3, [pc, #100]	; (10009804 <setup_compass+0x2c4>)
100097a0:	685b      	ldr	r3, [r3, #4]
100097a2:	7818      	ldrb	r0, [r3, #0]
100097a4:	4b17      	ldr	r3, [pc, #92]	; (10009804 <setup_compass+0x2c4>)
100097a6:	681b      	ldr	r3, [r3, #0]
100097a8:	2226      	movs	r2, #38	; 0x26
100097aa:	5c99      	ldrb	r1, [r3, r2]
100097ac:	1d3b      	adds	r3, r7, #4
100097ae:	2201      	movs	r2, #1
100097b0:	4c15      	ldr	r4, [pc, #84]	; (10009808 <setup_compass+0x2c8>)
100097b2:	47a0      	blx	r4
100097b4:	1e03      	subs	r3, r0, #0
100097b6:	d002      	beq.n	100097be <setup_compass+0x27e>
    return -1;
100097b8:	2301      	movs	r3, #1
100097ba:	425b      	negs	r3, r3
100097bc:	e013      	b.n	100097e6 <setup_compass+0x2a6>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100097be:	1d3b      	adds	r3, r7, #4
100097c0:	2203      	movs	r2, #3
100097c2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100097c4:	4b0f      	ldr	r3, [pc, #60]	; (10009804 <setup_compass+0x2c4>)
100097c6:	685b      	ldr	r3, [r3, #4]
100097c8:	7818      	ldrb	r0, [r3, #0]
100097ca:	4b0e      	ldr	r3, [pc, #56]	; (10009804 <setup_compass+0x2c4>)
100097cc:	681b      	ldr	r3, [r3, #0]
100097ce:	2227      	movs	r2, #39	; 0x27
100097d0:	5c99      	ldrb	r1, [r3, r2]
100097d2:	1d3b      	adds	r3, r7, #4
100097d4:	2201      	movs	r2, #1
100097d6:	4c0c      	ldr	r4, [pc, #48]	; (10009808 <setup_compass+0x2c8>)
100097d8:	47a0      	blx	r4
100097da:	1e03      	subs	r3, r0, #0
100097dc:	d002      	beq.n	100097e4 <setup_compass+0x2a4>
    return -1;
100097de:	2301      	movs	r3, #1
100097e0:	425b      	negs	r3, r3
100097e2:	e000      	b.n	100097e6 <setup_compass+0x2a6>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
    return -1;
    #endif

    return 0;
100097e4:	2300      	movs	r3, #0
}
100097e6:	0018      	movs	r0, r3
100097e8:	46bd      	mov	sp, r7
100097ea:	b005      	add	sp, #20
100097ec:	bd90      	pop	{r4, r7, pc}
100097ee:	46c0      	nop			; (mov r8, r8)
100097f0:	100091e1 	.word	0x100091e1
100097f4:	100081e9 	.word	0x100081e9
100097f8:	100184e0 	.word	0x100184e0
100097fc:	10017591 	.word	0x10017591
10009800:	1001896c 	.word	0x1001896c
10009804:	10019a50 	.word	0x10019a50
10009808:	100080d5 	.word	0x100080d5
1000980c:	1000b175 	.word	0x1000b175

10009810 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009810:	b590      	push	{r4, r7, lr}
10009812:	b087      	sub	sp, #28
10009814:	af00      	add	r7, sp, #0
10009816:	0002      	movs	r2, r0
10009818:	1dfb      	adds	r3, r7, #7
1000981a:	701a      	strb	r2, [r3, #0]
1000981c:	1d3b      	adds	r3, r7, #4
1000981e:	1c0a      	adds	r2, r1, #0
10009820:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009822:	1dfb      	adds	r3, r7, #7
10009824:	781b      	ldrb	r3, [r3, #0]
10009826:	2207      	movs	r2, #7
10009828:	4013      	ands	r3, r2
1000982a:	d005      	beq.n	10009838 <dmp_set_tap_thresh+0x28>
1000982c:	1d3b      	adds	r3, r7, #4
1000982e:	881a      	ldrh	r2, [r3, #0]
10009830:	23c8      	movs	r3, #200	; 0xc8
10009832:	00db      	lsls	r3, r3, #3
10009834:	429a      	cmp	r2, r3
10009836:	d902      	bls.n	1000983e <dmp_set_tap_thresh+0x2e>
        return -1;
10009838:	2301      	movs	r3, #1
1000983a:	425b      	negs	r3, r3
1000983c:	e112      	b.n	10009a64 <dmp_set_tap_thresh+0x254>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000983e:	1d3b      	adds	r3, r7, #4
10009840:	881a      	ldrh	r2, [r3, #0]
10009842:	4b8a      	ldr	r3, [pc, #552]	; (10009a6c <dmp_set_tap_thresh+0x25c>)
10009844:	0010      	movs	r0, r2
10009846:	4798      	blx	r3
10009848:	1c02      	adds	r2, r0, #0
1000984a:	4b89      	ldr	r3, [pc, #548]	; (10009a70 <dmp_set_tap_thresh+0x260>)
1000984c:	4989      	ldr	r1, [pc, #548]	; (10009a74 <dmp_set_tap_thresh+0x264>)
1000984e:	1c10      	adds	r0, r2, #0
10009850:	4798      	blx	r3
10009852:	1c03      	adds	r3, r0, #0
10009854:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
10009856:	230b      	movs	r3, #11
10009858:	18fb      	adds	r3, r7, r3
1000985a:	0018      	movs	r0, r3
1000985c:	4b86      	ldr	r3, [pc, #536]	; (10009a78 <dmp_set_tap_thresh+0x268>)
1000985e:	4798      	blx	r3
    switch (accel_fsr) {
10009860:	230b      	movs	r3, #11
10009862:	18fb      	adds	r3, r7, r3
10009864:	781b      	ldrb	r3, [r3, #0]
10009866:	2b04      	cmp	r3, #4
10009868:	d024      	beq.n	100098b4 <dmp_set_tap_thresh+0xa4>
1000986a:	dc02      	bgt.n	10009872 <dmp_set_tap_thresh+0x62>
1000986c:	2b02      	cmp	r3, #2
1000986e:	d005      	beq.n	1000987c <dmp_set_tap_thresh+0x6c>
10009870:	e074      	b.n	1000995c <dmp_set_tap_thresh+0x14c>
10009872:	2b08      	cmp	r3, #8
10009874:	d03a      	beq.n	100098ec <dmp_set_tap_thresh+0xdc>
10009876:	2b10      	cmp	r3, #16
10009878:	d054      	beq.n	10009924 <dmp_set_tap_thresh+0x114>
1000987a:	e06f      	b.n	1000995c <dmp_set_tap_thresh+0x14c>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1000987c:	4b7f      	ldr	r3, [pc, #508]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
1000987e:	218d      	movs	r1, #141	; 0x8d
10009880:	05c9      	lsls	r1, r1, #23
10009882:	6938      	ldr	r0, [r7, #16]
10009884:	4798      	blx	r3
10009886:	1c03      	adds	r3, r0, #0
10009888:	1c1a      	adds	r2, r3, #0
1000988a:	2316      	movs	r3, #22
1000988c:	18fc      	adds	r4, r7, r3
1000988e:	4b7c      	ldr	r3, [pc, #496]	; (10009a80 <dmp_set_tap_thresh+0x270>)
10009890:	1c10      	adds	r0, r2, #0
10009892:	4798      	blx	r3
10009894:	0003      	movs	r3, r0
10009896:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009898:	4b78      	ldr	r3, [pc, #480]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
1000989a:	497a      	ldr	r1, [pc, #488]	; (10009a84 <dmp_set_tap_thresh+0x274>)
1000989c:	6938      	ldr	r0, [r7, #16]
1000989e:	4798      	blx	r3
100098a0:	1c03      	adds	r3, r0, #0
100098a2:	1c1a      	adds	r2, r3, #0
100098a4:	2314      	movs	r3, #20
100098a6:	18fc      	adds	r4, r7, r3
100098a8:	4b75      	ldr	r3, [pc, #468]	; (10009a80 <dmp_set_tap_thresh+0x270>)
100098aa:	1c10      	adds	r0, r2, #0
100098ac:	4798      	blx	r3
100098ae:	0003      	movs	r3, r0
100098b0:	8023      	strh	r3, [r4, #0]
        break;
100098b2:	e056      	b.n	10009962 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100098b4:	4b71      	ldr	r3, [pc, #452]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
100098b6:	218c      	movs	r1, #140	; 0x8c
100098b8:	05c9      	lsls	r1, r1, #23
100098ba:	6938      	ldr	r0, [r7, #16]
100098bc:	4798      	blx	r3
100098be:	1c03      	adds	r3, r0, #0
100098c0:	1c1a      	adds	r2, r3, #0
100098c2:	2316      	movs	r3, #22
100098c4:	18fc      	adds	r4, r7, r3
100098c6:	4b6e      	ldr	r3, [pc, #440]	; (10009a80 <dmp_set_tap_thresh+0x270>)
100098c8:	1c10      	adds	r0, r2, #0
100098ca:	4798      	blx	r3
100098cc:	0003      	movs	r3, r0
100098ce:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100098d0:	4b6a      	ldr	r3, [pc, #424]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
100098d2:	496d      	ldr	r1, [pc, #436]	; (10009a88 <dmp_set_tap_thresh+0x278>)
100098d4:	6938      	ldr	r0, [r7, #16]
100098d6:	4798      	blx	r3
100098d8:	1c03      	adds	r3, r0, #0
100098da:	1c1a      	adds	r2, r3, #0
100098dc:	2314      	movs	r3, #20
100098de:	18fc      	adds	r4, r7, r3
100098e0:	4b67      	ldr	r3, [pc, #412]	; (10009a80 <dmp_set_tap_thresh+0x270>)
100098e2:	1c10      	adds	r0, r2, #0
100098e4:	4798      	blx	r3
100098e6:	0003      	movs	r3, r0
100098e8:	8023      	strh	r3, [r4, #0]
        break;
100098ea:	e03a      	b.n	10009962 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100098ec:	4b63      	ldr	r3, [pc, #396]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
100098ee:	218b      	movs	r1, #139	; 0x8b
100098f0:	05c9      	lsls	r1, r1, #23
100098f2:	6938      	ldr	r0, [r7, #16]
100098f4:	4798      	blx	r3
100098f6:	1c03      	adds	r3, r0, #0
100098f8:	1c1a      	adds	r2, r3, #0
100098fa:	2316      	movs	r3, #22
100098fc:	18fc      	adds	r4, r7, r3
100098fe:	4b60      	ldr	r3, [pc, #384]	; (10009a80 <dmp_set_tap_thresh+0x270>)
10009900:	1c10      	adds	r0, r2, #0
10009902:	4798      	blx	r3
10009904:	0003      	movs	r3, r0
10009906:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009908:	4b5c      	ldr	r3, [pc, #368]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
1000990a:	4960      	ldr	r1, [pc, #384]	; (10009a8c <dmp_set_tap_thresh+0x27c>)
1000990c:	6938      	ldr	r0, [r7, #16]
1000990e:	4798      	blx	r3
10009910:	1c03      	adds	r3, r0, #0
10009912:	1c1a      	adds	r2, r3, #0
10009914:	2314      	movs	r3, #20
10009916:	18fc      	adds	r4, r7, r3
10009918:	4b59      	ldr	r3, [pc, #356]	; (10009a80 <dmp_set_tap_thresh+0x270>)
1000991a:	1c10      	adds	r0, r2, #0
1000991c:	4798      	blx	r3
1000991e:	0003      	movs	r3, r0
10009920:	8023      	strh	r3, [r4, #0]
        break;
10009922:	e01e      	b.n	10009962 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009924:	4b55      	ldr	r3, [pc, #340]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
10009926:	218a      	movs	r1, #138	; 0x8a
10009928:	05c9      	lsls	r1, r1, #23
1000992a:	6938      	ldr	r0, [r7, #16]
1000992c:	4798      	blx	r3
1000992e:	1c03      	adds	r3, r0, #0
10009930:	1c1a      	adds	r2, r3, #0
10009932:	2316      	movs	r3, #22
10009934:	18fc      	adds	r4, r7, r3
10009936:	4b52      	ldr	r3, [pc, #328]	; (10009a80 <dmp_set_tap_thresh+0x270>)
10009938:	1c10      	adds	r0, r2, #0
1000993a:	4798      	blx	r3
1000993c:	0003      	movs	r3, r0
1000993e:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009940:	4b4e      	ldr	r3, [pc, #312]	; (10009a7c <dmp_set_tap_thresh+0x26c>)
10009942:	4953      	ldr	r1, [pc, #332]	; (10009a90 <dmp_set_tap_thresh+0x280>)
10009944:	6938      	ldr	r0, [r7, #16]
10009946:	4798      	blx	r3
10009948:	1c03      	adds	r3, r0, #0
1000994a:	1c1a      	adds	r2, r3, #0
1000994c:	2314      	movs	r3, #20
1000994e:	18fc      	adds	r4, r7, r3
10009950:	4b4b      	ldr	r3, [pc, #300]	; (10009a80 <dmp_set_tap_thresh+0x270>)
10009952:	1c10      	adds	r0, r2, #0
10009954:	4798      	blx	r3
10009956:	0003      	movs	r3, r0
10009958:	8023      	strh	r3, [r4, #0]
        break;
1000995a:	e002      	b.n	10009962 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
1000995c:	2301      	movs	r3, #1
1000995e:	425b      	negs	r3, r3
10009960:	e080      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009962:	2316      	movs	r3, #22
10009964:	18fb      	adds	r3, r7, r3
10009966:	881b      	ldrh	r3, [r3, #0]
10009968:	0a1b      	lsrs	r3, r3, #8
1000996a:	b29b      	uxth	r3, r3
1000996c:	b2da      	uxtb	r2, r3
1000996e:	230c      	movs	r3, #12
10009970:	18fb      	adds	r3, r7, r3
10009972:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009974:	2316      	movs	r3, #22
10009976:	18fb      	adds	r3, r7, r3
10009978:	881b      	ldrh	r3, [r3, #0]
1000997a:	b2da      	uxtb	r2, r3
1000997c:	230c      	movs	r3, #12
1000997e:	18fb      	adds	r3, r7, r3
10009980:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009982:	2314      	movs	r3, #20
10009984:	18fb      	adds	r3, r7, r3
10009986:	881b      	ldrh	r3, [r3, #0]
10009988:	0a1b      	lsrs	r3, r3, #8
1000998a:	b29b      	uxth	r3, r3
1000998c:	b2da      	uxtb	r2, r3
1000998e:	230c      	movs	r3, #12
10009990:	18fb      	adds	r3, r7, r3
10009992:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009994:	2314      	movs	r3, #20
10009996:	18fb      	adds	r3, r7, r3
10009998:	881b      	ldrh	r3, [r3, #0]
1000999a:	b2da      	uxtb	r2, r3
1000999c:	230c      	movs	r3, #12
1000999e:	18fb      	adds	r3, r7, r3
100099a0:	70da      	strb	r2, [r3, #3]

    if (axis & TAP_X) {
100099a2:	1dfb      	adds	r3, r7, #7
100099a4:	781b      	ldrb	r3, [r3, #0]
100099a6:	2201      	movs	r2, #1
100099a8:	4013      	ands	r3, r2
100099aa:	d01a      	beq.n	100099e2 <dmp_set_tap_thresh+0x1d2>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
100099ac:	230c      	movs	r3, #12
100099ae:	18fa      	adds	r2, r7, r3
100099b0:	23ea      	movs	r3, #234	; 0xea
100099b2:	005b      	lsls	r3, r3, #1
100099b4:	2102      	movs	r1, #2
100099b6:	0018      	movs	r0, r3
100099b8:	4b36      	ldr	r3, [pc, #216]	; (10009a94 <dmp_set_tap_thresh+0x284>)
100099ba:	4798      	blx	r3
100099bc:	1e03      	subs	r3, r0, #0
100099be:	d002      	beq.n	100099c6 <dmp_set_tap_thresh+0x1b6>
            return -1;
100099c0:	2301      	movs	r3, #1
100099c2:	425b      	negs	r3, r3
100099c4:	e04e      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
100099c6:	230c      	movs	r3, #12
100099c8:	18fb      	adds	r3, r7, r3
100099ca:	3302      	adds	r3, #2
100099cc:	2292      	movs	r2, #146	; 0x92
100099ce:	0050      	lsls	r0, r2, #1
100099d0:	001a      	movs	r2, r3
100099d2:	2102      	movs	r1, #2
100099d4:	4b2f      	ldr	r3, [pc, #188]	; (10009a94 <dmp_set_tap_thresh+0x284>)
100099d6:	4798      	blx	r3
100099d8:	1e03      	subs	r3, r0, #0
100099da:	d002      	beq.n	100099e2 <dmp_set_tap_thresh+0x1d2>
            return -1;
100099dc:	2301      	movs	r3, #1
100099de:	425b      	negs	r3, r3
100099e0:	e040      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
    }
    if (axis & TAP_Y) {
100099e2:	1dfb      	adds	r3, r7, #7
100099e4:	781b      	ldrb	r3, [r3, #0]
100099e6:	2202      	movs	r2, #2
100099e8:	4013      	ands	r3, r2
100099ea:	d01a      	beq.n	10009a22 <dmp_set_tap_thresh+0x212>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
100099ec:	230c      	movs	r3, #12
100099ee:	18fa      	adds	r2, r7, r3
100099f0:	23ec      	movs	r3, #236	; 0xec
100099f2:	005b      	lsls	r3, r3, #1
100099f4:	2102      	movs	r1, #2
100099f6:	0018      	movs	r0, r3
100099f8:	4b26      	ldr	r3, [pc, #152]	; (10009a94 <dmp_set_tap_thresh+0x284>)
100099fa:	4798      	blx	r3
100099fc:	1e03      	subs	r3, r0, #0
100099fe:	d002      	beq.n	10009a06 <dmp_set_tap_thresh+0x1f6>
            return -1;
10009a00:	2301      	movs	r3, #1
10009a02:	425b      	negs	r3, r3
10009a04:	e02e      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009a06:	230c      	movs	r3, #12
10009a08:	18fb      	adds	r3, r7, r3
10009a0a:	3302      	adds	r3, #2
10009a0c:	2294      	movs	r2, #148	; 0x94
10009a0e:	0050      	lsls	r0, r2, #1
10009a10:	001a      	movs	r2, r3
10009a12:	2102      	movs	r1, #2
10009a14:	4b1f      	ldr	r3, [pc, #124]	; (10009a94 <dmp_set_tap_thresh+0x284>)
10009a16:	4798      	blx	r3
10009a18:	1e03      	subs	r3, r0, #0
10009a1a:	d002      	beq.n	10009a22 <dmp_set_tap_thresh+0x212>
            return -1;
10009a1c:	2301      	movs	r3, #1
10009a1e:	425b      	negs	r3, r3
10009a20:	e020      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
    }
    if (axis & TAP_Z) {
10009a22:	1dfb      	adds	r3, r7, #7
10009a24:	781b      	ldrb	r3, [r3, #0]
10009a26:	2204      	movs	r2, #4
10009a28:	4013      	ands	r3, r2
10009a2a:	d01a      	beq.n	10009a62 <dmp_set_tap_thresh+0x252>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009a2c:	230c      	movs	r3, #12
10009a2e:	18fa      	adds	r2, r7, r3
10009a30:	23ee      	movs	r3, #238	; 0xee
10009a32:	005b      	lsls	r3, r3, #1
10009a34:	2102      	movs	r1, #2
10009a36:	0018      	movs	r0, r3
10009a38:	4b16      	ldr	r3, [pc, #88]	; (10009a94 <dmp_set_tap_thresh+0x284>)
10009a3a:	4798      	blx	r3
10009a3c:	1e03      	subs	r3, r0, #0
10009a3e:	d002      	beq.n	10009a46 <dmp_set_tap_thresh+0x236>
            return -1;
10009a40:	2301      	movs	r3, #1
10009a42:	425b      	negs	r3, r3
10009a44:	e00e      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009a46:	230c      	movs	r3, #12
10009a48:	18fb      	adds	r3, r7, r3
10009a4a:	3302      	adds	r3, #2
10009a4c:	2296      	movs	r2, #150	; 0x96
10009a4e:	0050      	lsls	r0, r2, #1
10009a50:	001a      	movs	r2, r3
10009a52:	2102      	movs	r1, #2
10009a54:	4b0f      	ldr	r3, [pc, #60]	; (10009a94 <dmp_set_tap_thresh+0x284>)
10009a56:	4798      	blx	r3
10009a58:	1e03      	subs	r3, r0, #0
10009a5a:	d002      	beq.n	10009a62 <dmp_set_tap_thresh+0x252>
            return -1;
10009a5c:	2301      	movs	r3, #1
10009a5e:	425b      	negs	r3, r3
10009a60:	e000      	b.n	10009a64 <dmp_set_tap_thresh+0x254>
    }
    return 0;
10009a62:	2300      	movs	r3, #0
}
10009a64:	0018      	movs	r0, r3
10009a66:	46bd      	mov	sp, r7
10009a68:	b007      	add	sp, #28
10009a6a:	bd90      	pop	{r4, r7, pc}
10009a6c:	1001634d 	.word	0x1001634d
10009a70:	10015a41 	.word	0x10015a41
10009a74:	43480000 	.word	0x43480000
10009a78:	10008b19 	.word	0x10008b19
10009a7c:	10015dd5 	.word	0x10015dd5
10009a80:	100159d5 	.word	0x100159d5
10009a84:	46400000 	.word	0x46400000
10009a88:	45c00000 	.word	0x45c00000
10009a8c:	45400000 	.word	0x45400000
10009a90:	44c00000 	.word	0x44c00000
10009a94:	10009485 	.word	0x10009485

10009a98 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009a98:	b580      	push	{r7, lr}
10009a9a:	b084      	sub	sp, #16
10009a9c:	af00      	add	r7, sp, #0
10009a9e:	0002      	movs	r2, r0
10009aa0:	1dfb      	adds	r3, r7, #7
10009aa2:	701a      	strb	r2, [r3, #0]
    unsigned char tmp = 0;
10009aa4:	230f      	movs	r3, #15
10009aa6:	18fb      	adds	r3, r7, r3
10009aa8:	2200      	movs	r2, #0
10009aaa:	701a      	strb	r2, [r3, #0]

    if (axis & TAP_X)
10009aac:	1dfb      	adds	r3, r7, #7
10009aae:	781b      	ldrb	r3, [r3, #0]
10009ab0:	2201      	movs	r2, #1
10009ab2:	4013      	ands	r3, r2
10009ab4:	d008      	beq.n	10009ac8 <dmp_set_tap_axes+0x30>
        tmp |= 0x30;
10009ab6:	230f      	movs	r3, #15
10009ab8:	18fb      	adds	r3, r7, r3
10009aba:	781b      	ldrb	r3, [r3, #0]
10009abc:	2230      	movs	r2, #48	; 0x30
10009abe:	4313      	orrs	r3, r2
10009ac0:	b2da      	uxtb	r2, r3
10009ac2:	230f      	movs	r3, #15
10009ac4:	18fb      	adds	r3, r7, r3
10009ac6:	701a      	strb	r2, [r3, #0]
    if (axis & TAP_Y)
10009ac8:	1dfb      	adds	r3, r7, #7
10009aca:	781b      	ldrb	r3, [r3, #0]
10009acc:	2202      	movs	r2, #2
10009ace:	4013      	ands	r3, r2
10009ad0:	d008      	beq.n	10009ae4 <dmp_set_tap_axes+0x4c>
        tmp |= 0x0C;
10009ad2:	230f      	movs	r3, #15
10009ad4:	18fb      	adds	r3, r7, r3
10009ad6:	781b      	ldrb	r3, [r3, #0]
10009ad8:	220c      	movs	r2, #12
10009ada:	4313      	orrs	r3, r2
10009adc:	b2da      	uxtb	r2, r3
10009ade:	230f      	movs	r3, #15
10009ae0:	18fb      	adds	r3, r7, r3
10009ae2:	701a      	strb	r2, [r3, #0]
    if (axis & TAP_Z)
10009ae4:	1dfb      	adds	r3, r7, #7
10009ae6:	781b      	ldrb	r3, [r3, #0]
10009ae8:	2204      	movs	r2, #4
10009aea:	4013      	ands	r3, r2
10009aec:	d008      	beq.n	10009b00 <dmp_set_tap_axes+0x68>
        tmp |= 0x03;
10009aee:	230f      	movs	r3, #15
10009af0:	18fb      	adds	r3, r7, r3
10009af2:	781b      	ldrb	r3, [r3, #0]
10009af4:	2203      	movs	r2, #3
10009af6:	4313      	orrs	r3, r2
10009af8:	b2da      	uxtb	r2, r3
10009afa:	230f      	movs	r3, #15
10009afc:	18fb      	adds	r3, r7, r3
10009afe:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009b00:	230f      	movs	r3, #15
10009b02:	18fa      	adds	r2, r7, r3
10009b04:	23a4      	movs	r3, #164	; 0xa4
10009b06:	005b      	lsls	r3, r3, #1
10009b08:	2101      	movs	r1, #1
10009b0a:	0018      	movs	r0, r3
10009b0c:	4b03      	ldr	r3, [pc, #12]	; (10009b1c <dmp_set_tap_axes+0x84>)
10009b0e:	4798      	blx	r3
10009b10:	0003      	movs	r3, r0
}
10009b12:	0018      	movs	r0, r3
10009b14:	46bd      	mov	sp, r7
10009b16:	b004      	add	sp, #16
10009b18:	bd80      	pop	{r7, pc}
10009b1a:	46c0      	nop			; (mov r8, r8)
10009b1c:	10009485 	.word	0x10009485

10009b20 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009b20:	b580      	push	{r7, lr}
10009b22:	b084      	sub	sp, #16
10009b24:	af00      	add	r7, sp, #0
10009b26:	0002      	movs	r2, r0
10009b28:	1dfb      	adds	r3, r7, #7
10009b2a:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (min_taps < 1)
10009b2c:	1dfb      	adds	r3, r7, #7
10009b2e:	781b      	ldrb	r3, [r3, #0]
10009b30:	2b00      	cmp	r3, #0
10009b32:	d103      	bne.n	10009b3c <dmp_set_tap_count+0x1c>
        min_taps = 1;
10009b34:	1dfb      	adds	r3, r7, #7
10009b36:	2201      	movs	r2, #1
10009b38:	701a      	strb	r2, [r3, #0]
10009b3a:	e006      	b.n	10009b4a <dmp_set_tap_count+0x2a>
    else if (min_taps > 4)
10009b3c:	1dfb      	adds	r3, r7, #7
10009b3e:	781b      	ldrb	r3, [r3, #0]
10009b40:	2b04      	cmp	r3, #4
10009b42:	d902      	bls.n	10009b4a <dmp_set_tap_count+0x2a>
        min_taps = 4;
10009b44:	1dfb      	adds	r3, r7, #7
10009b46:	2204      	movs	r2, #4
10009b48:	701a      	strb	r2, [r3, #0]

    tmp = min_taps - 1;
10009b4a:	1dfb      	adds	r3, r7, #7
10009b4c:	781b      	ldrb	r3, [r3, #0]
10009b4e:	3b01      	subs	r3, #1
10009b50:	b2da      	uxtb	r2, r3
10009b52:	230f      	movs	r3, #15
10009b54:	18fb      	adds	r3, r7, r3
10009b56:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009b58:	230f      	movs	r3, #15
10009b5a:	18fa      	adds	r2, r7, r3
10009b5c:	2350      	movs	r3, #80	; 0x50
10009b5e:	33ff      	adds	r3, #255	; 0xff
10009b60:	2101      	movs	r1, #1
10009b62:	0018      	movs	r0, r3
10009b64:	4b03      	ldr	r3, [pc, #12]	; (10009b74 <dmp_set_tap_count+0x54>)
10009b66:	4798      	blx	r3
10009b68:	0003      	movs	r3, r0
}
10009b6a:	0018      	movs	r0, r3
10009b6c:	46bd      	mov	sp, r7
10009b6e:	b004      	add	sp, #16
10009b70:	bd80      	pop	{r7, pc}
10009b72:	46c0      	nop			; (mov r8, r8)
10009b74:	10009485 	.word	0x10009485

10009b78 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009b78:	b590      	push	{r4, r7, lr}
10009b7a:	b085      	sub	sp, #20
10009b7c:	af00      	add	r7, sp, #0
10009b7e:	0002      	movs	r2, r0
10009b80:	1dbb      	adds	r3, r7, #6
10009b82:	801a      	strh	r2, [r3, #0]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009b84:	230e      	movs	r3, #14
10009b86:	18fc      	adds	r4, r7, r3
10009b88:	1dbb      	adds	r3, r7, #6
10009b8a:	881a      	ldrh	r2, [r3, #0]
10009b8c:	4b11      	ldr	r3, [pc, #68]	; (10009bd4 <dmp_set_tap_time+0x5c>)
10009b8e:	2105      	movs	r1, #5
10009b90:	0010      	movs	r0, r2
10009b92:	4798      	blx	r3
10009b94:	0003      	movs	r3, r0
10009b96:	8023      	strh	r3, [r4, #0]
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009b98:	230e      	movs	r3, #14
10009b9a:	18fb      	adds	r3, r7, r3
10009b9c:	881b      	ldrh	r3, [r3, #0]
10009b9e:	0a1b      	lsrs	r3, r3, #8
10009ba0:	b29b      	uxth	r3, r3
10009ba2:	b2da      	uxtb	r2, r3
10009ba4:	230c      	movs	r3, #12
10009ba6:	18fb      	adds	r3, r7, r3
10009ba8:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009baa:	230e      	movs	r3, #14
10009bac:	18fb      	adds	r3, r7, r3
10009bae:	881b      	ldrh	r3, [r3, #0]
10009bb0:	b2da      	uxtb	r2, r3
10009bb2:	230c      	movs	r3, #12
10009bb4:	18fb      	adds	r3, r7, r3
10009bb6:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009bb8:	230c      	movs	r3, #12
10009bba:	18fa      	adds	r2, r7, r3
10009bbc:	23ef      	movs	r3, #239	; 0xef
10009bbe:	005b      	lsls	r3, r3, #1
10009bc0:	2102      	movs	r1, #2
10009bc2:	0018      	movs	r0, r3
10009bc4:	4b04      	ldr	r3, [pc, #16]	; (10009bd8 <dmp_set_tap_time+0x60>)
10009bc6:	4798      	blx	r3
10009bc8:	0003      	movs	r3, r0
}
10009bca:	0018      	movs	r0, r3
10009bcc:	46bd      	mov	sp, r7
10009bce:	b005      	add	sp, #20
10009bd0:	bd90      	pop	{r4, r7, pc}
10009bd2:	46c0      	nop			; (mov r8, r8)
10009bd4:	100155a1 	.word	0x100155a1
10009bd8:	10009485 	.word	0x10009485

10009bdc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009bdc:	b590      	push	{r4, r7, lr}
10009bde:	b085      	sub	sp, #20
10009be0:	af00      	add	r7, sp, #0
10009be2:	0002      	movs	r2, r0
10009be4:	1dbb      	adds	r3, r7, #6
10009be6:	801a      	strh	r2, [r3, #0]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009be8:	230e      	movs	r3, #14
10009bea:	18fc      	adds	r4, r7, r3
10009bec:	1dbb      	adds	r3, r7, #6
10009bee:	881a      	ldrh	r2, [r3, #0]
10009bf0:	4b11      	ldr	r3, [pc, #68]	; (10009c38 <dmp_set_tap_time_multi+0x5c>)
10009bf2:	2105      	movs	r1, #5
10009bf4:	0010      	movs	r0, r2
10009bf6:	4798      	blx	r3
10009bf8:	0003      	movs	r3, r0
10009bfa:	8023      	strh	r3, [r4, #0]
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009bfc:	230e      	movs	r3, #14
10009bfe:	18fb      	adds	r3, r7, r3
10009c00:	881b      	ldrh	r3, [r3, #0]
10009c02:	0a1b      	lsrs	r3, r3, #8
10009c04:	b29b      	uxth	r3, r3
10009c06:	b2da      	uxtb	r2, r3
10009c08:	230c      	movs	r3, #12
10009c0a:	18fb      	adds	r3, r7, r3
10009c0c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009c0e:	230e      	movs	r3, #14
10009c10:	18fb      	adds	r3, r7, r3
10009c12:	881b      	ldrh	r3, [r3, #0]
10009c14:	b2da      	uxtb	r2, r3
10009c16:	230c      	movs	r3, #12
10009c18:	18fb      	adds	r3, r7, r3
10009c1a:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009c1c:	230c      	movs	r3, #12
10009c1e:	18fa      	adds	r2, r7, r3
10009c20:	23ed      	movs	r3, #237	; 0xed
10009c22:	005b      	lsls	r3, r3, #1
10009c24:	2102      	movs	r1, #2
10009c26:	0018      	movs	r0, r3
10009c28:	4b04      	ldr	r3, [pc, #16]	; (10009c3c <dmp_set_tap_time_multi+0x60>)
10009c2a:	4798      	blx	r3
10009c2c:	0003      	movs	r3, r0
}
10009c2e:	0018      	movs	r0, r3
10009c30:	46bd      	mov	sp, r7
10009c32:	b005      	add	sp, #20
10009c34:	bd90      	pop	{r4, r7, pc}
10009c36:	46c0      	nop			; (mov r8, r8)
10009c38:	100155a1 	.word	0x100155a1
10009c3c:	10009485 	.word	0x10009485

10009c40 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009c40:	b580      	push	{r7, lr}
10009c42:	b084      	sub	sp, #16
10009c44:	af00      	add	r7, sp, #0
10009c46:	6078      	str	r0, [r7, #4]
10009c48:	000a      	movs	r2, r1
10009c4a:	1cbb      	adds	r3, r7, #2
10009c4c:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009c4e:	6878      	ldr	r0, [r7, #4]
10009c50:	4b16      	ldr	r3, [pc, #88]	; (10009cac <dmp_set_shake_reject_thresh+0x6c>)
10009c52:	22fa      	movs	r2, #250	; 0xfa
10009c54:	0091      	lsls	r1, r2, #2
10009c56:	4798      	blx	r3
10009c58:	0003      	movs	r3, r0
10009c5a:	001a      	movs	r2, r3
10009c5c:	1cbb      	adds	r3, r7, #2
10009c5e:	881b      	ldrh	r3, [r3, #0]
10009c60:	4353      	muls	r3, r2
10009c62:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009c64:	68fb      	ldr	r3, [r7, #12]
10009c66:	161b      	asrs	r3, r3, #24
10009c68:	b2da      	uxtb	r2, r3
10009c6a:	2308      	movs	r3, #8
10009c6c:	18fb      	adds	r3, r7, r3
10009c6e:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009c70:	68fb      	ldr	r3, [r7, #12]
10009c72:	141b      	asrs	r3, r3, #16
10009c74:	b2da      	uxtb	r2, r3
10009c76:	2308      	movs	r3, #8
10009c78:	18fb      	adds	r3, r7, r3
10009c7a:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009c7c:	68fb      	ldr	r3, [r7, #12]
10009c7e:	121b      	asrs	r3, r3, #8
10009c80:	b2da      	uxtb	r2, r3
10009c82:	2308      	movs	r3, #8
10009c84:	18fb      	adds	r3, r7, r3
10009c86:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009c88:	68fb      	ldr	r3, [r7, #12]
10009c8a:	b2da      	uxtb	r2, r3
10009c8c:	2308      	movs	r3, #8
10009c8e:	18fb      	adds	r3, r7, r3
10009c90:	70da      	strb	r2, [r3, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009c92:	2308      	movs	r3, #8
10009c94:	18fa      	adds	r2, r7, r3
10009c96:	23ae      	movs	r3, #174	; 0xae
10009c98:	005b      	lsls	r3, r3, #1
10009c9a:	2104      	movs	r1, #4
10009c9c:	0018      	movs	r0, r3
10009c9e:	4b04      	ldr	r3, [pc, #16]	; (10009cb0 <dmp_set_shake_reject_thresh+0x70>)
10009ca0:	4798      	blx	r3
10009ca2:	0003      	movs	r3, r0
}
10009ca4:	0018      	movs	r0, r3
10009ca6:	46bd      	mov	sp, r7
10009ca8:	b004      	add	sp, #16
10009caa:	bd80      	pop	{r7, pc}
10009cac:	100156b5 	.word	0x100156b5
10009cb0:	10009485 	.word	0x10009485

10009cb4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009cb4:	b590      	push	{r4, r7, lr}
10009cb6:	b085      	sub	sp, #20
10009cb8:	af00      	add	r7, sp, #0
10009cba:	0002      	movs	r2, r0
10009cbc:	1dbb      	adds	r3, r7, #6
10009cbe:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009cc0:	1dbc      	adds	r4, r7, #6
10009cc2:	1dbb      	adds	r3, r7, #6
10009cc4:	881a      	ldrh	r2, [r3, #0]
10009cc6:	4b10      	ldr	r3, [pc, #64]	; (10009d08 <dmp_set_shake_reject_time+0x54>)
10009cc8:	2105      	movs	r1, #5
10009cca:	0010      	movs	r0, r2
10009ccc:	4798      	blx	r3
10009cce:	0003      	movs	r3, r0
10009cd0:	8023      	strh	r3, [r4, #0]
    tmp[0] = time >> 8;
10009cd2:	1dbb      	adds	r3, r7, #6
10009cd4:	881b      	ldrh	r3, [r3, #0]
10009cd6:	0a1b      	lsrs	r3, r3, #8
10009cd8:	b29b      	uxth	r3, r3
10009cda:	b2da      	uxtb	r2, r3
10009cdc:	230c      	movs	r3, #12
10009cde:	18fb      	adds	r3, r7, r3
10009ce0:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009ce2:	1dbb      	adds	r3, r7, #6
10009ce4:	881b      	ldrh	r3, [r3, #0]
10009ce6:	b2da      	uxtb	r2, r3
10009ce8:	230c      	movs	r3, #12
10009cea:	18fb      	adds	r3, r7, r3
10009cec:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009cee:	230c      	movs	r3, #12
10009cf0:	18fa      	adds	r2, r7, r3
10009cf2:	23ad      	movs	r3, #173	; 0xad
10009cf4:	005b      	lsls	r3, r3, #1
10009cf6:	2102      	movs	r1, #2
10009cf8:	0018      	movs	r0, r3
10009cfa:	4b04      	ldr	r3, [pc, #16]	; (10009d0c <dmp_set_shake_reject_time+0x58>)
10009cfc:	4798      	blx	r3
10009cfe:	0003      	movs	r3, r0
}
10009d00:	0018      	movs	r0, r3
10009d02:	46bd      	mov	sp, r7
10009d04:	b005      	add	sp, #20
10009d06:	bd90      	pop	{r4, r7, pc}
10009d08:	100155a1 	.word	0x100155a1
10009d0c:	10009485 	.word	0x10009485

10009d10 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009d10:	b590      	push	{r4, r7, lr}
10009d12:	b085      	sub	sp, #20
10009d14:	af00      	add	r7, sp, #0
10009d16:	0002      	movs	r2, r0
10009d18:	1dbb      	adds	r3, r7, #6
10009d1a:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009d1c:	1dbc      	adds	r4, r7, #6
10009d1e:	1dbb      	adds	r3, r7, #6
10009d20:	881a      	ldrh	r2, [r3, #0]
10009d22:	4b10      	ldr	r3, [pc, #64]	; (10009d64 <dmp_set_shake_reject_timeout+0x54>)
10009d24:	2105      	movs	r1, #5
10009d26:	0010      	movs	r0, r2
10009d28:	4798      	blx	r3
10009d2a:	0003      	movs	r3, r0
10009d2c:	8023      	strh	r3, [r4, #0]
    tmp[0] = time >> 8;
10009d2e:	1dbb      	adds	r3, r7, #6
10009d30:	881b      	ldrh	r3, [r3, #0]
10009d32:	0a1b      	lsrs	r3, r3, #8
10009d34:	b29b      	uxth	r3, r3
10009d36:	b2da      	uxtb	r2, r3
10009d38:	230c      	movs	r3, #12
10009d3a:	18fb      	adds	r3, r7, r3
10009d3c:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009d3e:	1dbb      	adds	r3, r7, #6
10009d40:	881b      	ldrh	r3, [r3, #0]
10009d42:	b2da      	uxtb	r2, r3
10009d44:	230c      	movs	r3, #12
10009d46:	18fb      	adds	r3, r7, r3
10009d48:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009d4a:	230c      	movs	r3, #12
10009d4c:	18fa      	adds	r2, r7, r3
10009d4e:	23ac      	movs	r3, #172	; 0xac
10009d50:	005b      	lsls	r3, r3, #1
10009d52:	2102      	movs	r1, #2
10009d54:	0018      	movs	r0, r3
10009d56:	4b04      	ldr	r3, [pc, #16]	; (10009d68 <dmp_set_shake_reject_timeout+0x58>)
10009d58:	4798      	blx	r3
10009d5a:	0003      	movs	r3, r0
}
10009d5c:	0018      	movs	r0, r3
10009d5e:	46bd      	mov	sp, r7
10009d60:	b005      	add	sp, #20
10009d62:	bd90      	pop	{r4, r7, pc}
10009d64:	100155a1 	.word	0x100155a1
10009d68:	10009485 	.word	0x10009485

10009d6c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009d6c:	b580      	push	{r7, lr}
10009d6e:	b086      	sub	sp, #24
10009d70:	af00      	add	r7, sp, #0
10009d72:	0002      	movs	r2, r0
10009d74:	1dbb      	adds	r3, r7, #6
10009d76:	801a      	strh	r2, [r3, #0]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009d78:	230c      	movs	r3, #12
10009d7a:	18fb      	adds	r3, r7, r3
10009d7c:	2202      	movs	r2, #2
10009d7e:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009d80:	230c      	movs	r3, #12
10009d82:	18fb      	adds	r3, r7, r3
10009d84:	22ca      	movs	r2, #202	; 0xca
10009d86:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009d88:	230c      	movs	r3, #12
10009d8a:	18fb      	adds	r3, r7, r3
10009d8c:	22e3      	movs	r2, #227	; 0xe3
10009d8e:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009d90:	230c      	movs	r3, #12
10009d92:	18fb      	adds	r3, r7, r3
10009d94:	2209      	movs	r2, #9
10009d96:	70da      	strb	r2, [r3, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009d98:	230c      	movs	r3, #12
10009d9a:	18fb      	adds	r3, r7, r3
10009d9c:	001a      	movs	r2, r3
10009d9e:	2104      	movs	r1, #4
10009da0:	2068      	movs	r0, #104	; 0x68
10009da2:	4ba8      	ldr	r3, [pc, #672]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009da4:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009da6:	230c      	movs	r3, #12
10009da8:	18fb      	adds	r3, r7, r3
10009daa:	22a3      	movs	r2, #163	; 0xa3
10009dac:	701a      	strb	r2, [r3, #0]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009dae:	1dbb      	adds	r3, r7, #6
10009db0:	881b      	ldrh	r3, [r3, #0]
10009db2:	2240      	movs	r2, #64	; 0x40
10009db4:	4013      	ands	r3, r2
10009db6:	d00c      	beq.n	10009dd2 <dmp_enable_feature+0x66>
        tmp[1] = 0xC0;
10009db8:	230c      	movs	r3, #12
10009dba:	18fb      	adds	r3, r7, r3
10009dbc:	22c0      	movs	r2, #192	; 0xc0
10009dbe:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009dc0:	230c      	movs	r3, #12
10009dc2:	18fb      	adds	r3, r7, r3
10009dc4:	22c8      	movs	r2, #200	; 0xc8
10009dc6:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009dc8:	230c      	movs	r3, #12
10009dca:	18fb      	adds	r3, r7, r3
10009dcc:	22c2      	movs	r2, #194	; 0xc2
10009dce:	70da      	strb	r2, [r3, #3]
10009dd0:	e00b      	b.n	10009dea <dmp_enable_feature+0x7e>
    } else {
        tmp[1] = 0xA3;
10009dd2:	230c      	movs	r3, #12
10009dd4:	18fb      	adds	r3, r7, r3
10009dd6:	22a3      	movs	r2, #163	; 0xa3
10009dd8:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009dda:	230c      	movs	r3, #12
10009ddc:	18fb      	adds	r3, r7, r3
10009dde:	22a3      	movs	r2, #163	; 0xa3
10009de0:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009de2:	230c      	movs	r3, #12
10009de4:	18fb      	adds	r3, r7, r3
10009de6:	22a3      	movs	r2, #163	; 0xa3
10009de8:	70da      	strb	r2, [r3, #3]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009dea:	1dbb      	adds	r3, r7, #6
10009dec:	881a      	ldrh	r2, [r3, #0]
10009dee:	23c0      	movs	r3, #192	; 0xc0
10009df0:	005b      	lsls	r3, r3, #1
10009df2:	4013      	ands	r3, r2
10009df4:	d00c      	beq.n	10009e10 <dmp_enable_feature+0xa4>
        tmp[4] = 0xC4;
10009df6:	230c      	movs	r3, #12
10009df8:	18fb      	adds	r3, r7, r3
10009dfa:	22c4      	movs	r2, #196	; 0xc4
10009dfc:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009dfe:	230c      	movs	r3, #12
10009e00:	18fb      	adds	r3, r7, r3
10009e02:	22cc      	movs	r2, #204	; 0xcc
10009e04:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009e06:	230c      	movs	r3, #12
10009e08:	18fb      	adds	r3, r7, r3
10009e0a:	22c6      	movs	r2, #198	; 0xc6
10009e0c:	719a      	strb	r2, [r3, #6]
10009e0e:	e00b      	b.n	10009e28 <dmp_enable_feature+0xbc>
    } else {
        tmp[4] = 0xA3;
10009e10:	230c      	movs	r3, #12
10009e12:	18fb      	adds	r3, r7, r3
10009e14:	22a3      	movs	r2, #163	; 0xa3
10009e16:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009e18:	230c      	movs	r3, #12
10009e1a:	18fb      	adds	r3, r7, r3
10009e1c:	22a3      	movs	r2, #163	; 0xa3
10009e1e:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009e20:	230c      	movs	r3, #12
10009e22:	18fb      	adds	r3, r7, r3
10009e24:	22a3      	movs	r2, #163	; 0xa3
10009e26:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009e28:	230c      	movs	r3, #12
10009e2a:	18fb      	adds	r3, r7, r3
10009e2c:	22a3      	movs	r2, #163	; 0xa3
10009e2e:	71da      	strb	r2, [r3, #7]
    tmp[8] = 0xA3;
10009e30:	230c      	movs	r3, #12
10009e32:	18fb      	adds	r3, r7, r3
10009e34:	22a3      	movs	r2, #163	; 0xa3
10009e36:	721a      	strb	r2, [r3, #8]
    tmp[9] = 0xA3;
10009e38:	230c      	movs	r3, #12
10009e3a:	18fb      	adds	r3, r7, r3
10009e3c:	22a3      	movs	r2, #163	; 0xa3
10009e3e:	725a      	strb	r2, [r3, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009e40:	230c      	movs	r3, #12
10009e42:	18fb      	adds	r3, r7, r3
10009e44:	4880      	ldr	r0, [pc, #512]	; (1000a048 <dmp_enable_feature+0x2dc>)
10009e46:	001a      	movs	r2, r3
10009e48:	210a      	movs	r1, #10
10009e4a:	4b7e      	ldr	r3, [pc, #504]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009e4c:	4798      	blx	r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009e4e:	1dbb      	adds	r3, r7, #6
10009e50:	881b      	ldrh	r3, [r3, #0]
10009e52:	2203      	movs	r2, #3
10009e54:	4013      	ands	r3, r2
10009e56:	d004      	beq.n	10009e62 <dmp_enable_feature+0xf6>
        tmp[0] = DINA20;
10009e58:	230c      	movs	r3, #12
10009e5a:	18fb      	adds	r3, r7, r3
10009e5c:	2220      	movs	r2, #32
10009e5e:	701a      	strb	r2, [r3, #0]
10009e60:	e003      	b.n	10009e6a <dmp_enable_feature+0xfe>
    else
        tmp[0] = 0xD8;
10009e62:	230c      	movs	r3, #12
10009e64:	18fb      	adds	r3, r7, r3
10009e66:	22d8      	movs	r2, #216	; 0xd8
10009e68:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009e6a:	230c      	movs	r3, #12
10009e6c:	18fb      	adds	r3, r7, r3
10009e6e:	4877      	ldr	r0, [pc, #476]	; (1000a04c <dmp_enable_feature+0x2e0>)
10009e70:	001a      	movs	r2, r3
10009e72:	2101      	movs	r1, #1
10009e74:	4b73      	ldr	r3, [pc, #460]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009e76:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009e78:	1dbb      	adds	r3, r7, #6
10009e7a:	881b      	ldrh	r3, [r3, #0]
10009e7c:	2220      	movs	r2, #32
10009e7e:	4013      	ands	r3, r2
10009e80:	d003      	beq.n	10009e8a <dmp_enable_feature+0x11e>
        dmp_enable_gyro_cal(1);
10009e82:	2001      	movs	r0, #1
10009e84:	4b72      	ldr	r3, [pc, #456]	; (1000a050 <dmp_enable_feature+0x2e4>)
10009e86:	4798      	blx	r3
10009e88:	e002      	b.n	10009e90 <dmp_enable_feature+0x124>
    else
        dmp_enable_gyro_cal(0);
10009e8a:	2000      	movs	r0, #0
10009e8c:	4b70      	ldr	r3, [pc, #448]	; (1000a050 <dmp_enable_feature+0x2e4>)
10009e8e:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009e90:	1dbb      	adds	r3, r7, #6
10009e92:	881a      	ldrh	r2, [r3, #0]
10009e94:	23c0      	movs	r3, #192	; 0xc0
10009e96:	005b      	lsls	r3, r3, #1
10009e98:	4013      	ands	r3, r2
10009e9a:	d02d      	beq.n	10009ef8 <dmp_enable_feature+0x18c>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009e9c:	1dbb      	adds	r3, r7, #6
10009e9e:	881a      	ldrh	r2, [r3, #0]
10009ea0:	2380      	movs	r3, #128	; 0x80
10009ea2:	005b      	lsls	r3, r3, #1
10009ea4:	4013      	ands	r3, r2
10009ea6:	d010      	beq.n	10009eca <dmp_enable_feature+0x15e>
            tmp[0] = 0xB2;
10009ea8:	230c      	movs	r3, #12
10009eaa:	18fb      	adds	r3, r7, r3
10009eac:	22b2      	movs	r2, #178	; 0xb2
10009eae:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009eb0:	230c      	movs	r3, #12
10009eb2:	18fb      	adds	r3, r7, r3
10009eb4:	228b      	movs	r2, #139	; 0x8b
10009eb6:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009eb8:	230c      	movs	r3, #12
10009eba:	18fb      	adds	r3, r7, r3
10009ebc:	22b6      	movs	r2, #182	; 0xb6
10009ebe:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009ec0:	230c      	movs	r3, #12
10009ec2:	18fb      	adds	r3, r7, r3
10009ec4:	229b      	movs	r2, #155	; 0x9b
10009ec6:	70da      	strb	r2, [r3, #3]
10009ec8:	e00f      	b.n	10009eea <dmp_enable_feature+0x17e>
        } else {
            tmp[0] = DINAC0;
10009eca:	230c      	movs	r3, #12
10009ecc:	18fb      	adds	r3, r7, r3
10009ece:	22b0      	movs	r2, #176	; 0xb0
10009ed0:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009ed2:	230c      	movs	r3, #12
10009ed4:	18fb      	adds	r3, r7, r3
10009ed6:	2280      	movs	r2, #128	; 0x80
10009ed8:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009eda:	230c      	movs	r3, #12
10009edc:	18fb      	adds	r3, r7, r3
10009ede:	22b4      	movs	r2, #180	; 0xb4
10009ee0:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009ee2:	230c      	movs	r3, #12
10009ee4:	18fb      	adds	r3, r7, r3
10009ee6:	2290      	movs	r2, #144	; 0x90
10009ee8:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009eea:	230c      	movs	r3, #12
10009eec:	18fb      	adds	r3, r7, r3
10009eee:	4859      	ldr	r0, [pc, #356]	; (1000a054 <dmp_enable_feature+0x2e8>)
10009ef0:	001a      	movs	r2, r3
10009ef2:	2104      	movs	r1, #4
10009ef4:	4b53      	ldr	r3, [pc, #332]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009ef6:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009ef8:	1dbb      	adds	r3, r7, #6
10009efa:	881b      	ldrh	r3, [r3, #0]
10009efc:	2201      	movs	r2, #1
10009efe:	4013      	ands	r3, r2
10009f00:	d029      	beq.n	10009f56 <dmp_enable_feature+0x1ea>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009f02:	230c      	movs	r3, #12
10009f04:	18fb      	adds	r3, r7, r3
10009f06:	22f8      	movs	r2, #248	; 0xf8
10009f08:	701a      	strb	r2, [r3, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009f0a:	230c      	movs	r3, #12
10009f0c:	18fa      	adds	r2, r7, r3
10009f0e:	238b      	movs	r3, #139	; 0x8b
10009f10:	011b      	lsls	r3, r3, #4
10009f12:	2101      	movs	r1, #1
10009f14:	0018      	movs	r0, r3
10009f16:	4b4b      	ldr	r3, [pc, #300]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009f18:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009f1a:	21fa      	movs	r1, #250	; 0xfa
10009f1c:	2007      	movs	r0, #7
10009f1e:	4b4e      	ldr	r3, [pc, #312]	; (1000a058 <dmp_enable_feature+0x2ec>)
10009f20:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009f22:	2007      	movs	r0, #7
10009f24:	4b4d      	ldr	r3, [pc, #308]	; (1000a05c <dmp_enable_feature+0x2f0>)
10009f26:	4798      	blx	r3
        dmp_set_tap_count(1);
10009f28:	2001      	movs	r0, #1
10009f2a:	4b4d      	ldr	r3, [pc, #308]	; (1000a060 <dmp_enable_feature+0x2f4>)
10009f2c:	4798      	blx	r3
        dmp_set_tap_time(100);
10009f2e:	2064      	movs	r0, #100	; 0x64
10009f30:	4b4c      	ldr	r3, [pc, #304]	; (1000a064 <dmp_enable_feature+0x2f8>)
10009f32:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009f34:	23fa      	movs	r3, #250	; 0xfa
10009f36:	005b      	lsls	r3, r3, #1
10009f38:	0018      	movs	r0, r3
10009f3a:	4b4b      	ldr	r3, [pc, #300]	; (1000a068 <dmp_enable_feature+0x2fc>)
10009f3c:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009f3e:	4b4b      	ldr	r3, [pc, #300]	; (1000a06c <dmp_enable_feature+0x300>)
10009f40:	21c8      	movs	r1, #200	; 0xc8
10009f42:	0018      	movs	r0, r3
10009f44:	4b4a      	ldr	r3, [pc, #296]	; (1000a070 <dmp_enable_feature+0x304>)
10009f46:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009f48:	2028      	movs	r0, #40	; 0x28
10009f4a:	4b4a      	ldr	r3, [pc, #296]	; (1000a074 <dmp_enable_feature+0x308>)
10009f4c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009f4e:	200a      	movs	r0, #10
10009f50:	4b49      	ldr	r3, [pc, #292]	; (1000a078 <dmp_enable_feature+0x30c>)
10009f52:	4798      	blx	r3
10009f54:	e00b      	b.n	10009f6e <dmp_enable_feature+0x202>
    } else {
        tmp[0] = 0xD8;
10009f56:	230c      	movs	r3, #12
10009f58:	18fb      	adds	r3, r7, r3
10009f5a:	22d8      	movs	r2, #216	; 0xd8
10009f5c:	701a      	strb	r2, [r3, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009f5e:	230c      	movs	r3, #12
10009f60:	18fa      	adds	r2, r7, r3
10009f62:	238b      	movs	r3, #139	; 0x8b
10009f64:	011b      	lsls	r3, r3, #4
10009f66:	2101      	movs	r1, #1
10009f68:	0018      	movs	r0, r3
10009f6a:	4b36      	ldr	r3, [pc, #216]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009f6c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009f6e:	1dbb      	adds	r3, r7, #6
10009f70:	881b      	ldrh	r3, [r3, #0]
10009f72:	2202      	movs	r2, #2
10009f74:	4013      	ands	r3, r2
10009f76:	d004      	beq.n	10009f82 <dmp_enable_feature+0x216>
        tmp[0] = 0xD9;
10009f78:	230c      	movs	r3, #12
10009f7a:	18fb      	adds	r3, r7, r3
10009f7c:	22d9      	movs	r2, #217	; 0xd9
10009f7e:	701a      	strb	r2, [r3, #0]
10009f80:	e003      	b.n	10009f8a <dmp_enable_feature+0x21e>
    } else
        tmp[0] = 0xD8;
10009f82:	230c      	movs	r3, #12
10009f84:	18fb      	adds	r3, r7, r3
10009f86:	22d8      	movs	r2, #216	; 0xd8
10009f88:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009f8a:	230c      	movs	r3, #12
10009f8c:	18fb      	adds	r3, r7, r3
10009f8e:	483b      	ldr	r0, [pc, #236]	; (1000a07c <dmp_enable_feature+0x310>)
10009f90:	001a      	movs	r2, r3
10009f92:	2101      	movs	r1, #1
10009f94:	4b2b      	ldr	r3, [pc, #172]	; (1000a044 <dmp_enable_feature+0x2d8>)
10009f96:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009f98:	1dbb      	adds	r3, r7, #6
10009f9a:	881b      	ldrh	r3, [r3, #0]
10009f9c:	2204      	movs	r2, #4
10009f9e:	4013      	ands	r3, r2
10009fa0:	d003      	beq.n	10009faa <dmp_enable_feature+0x23e>
        dmp_enable_lp_quat(1);
10009fa2:	2001      	movs	r0, #1
10009fa4:	4b36      	ldr	r3, [pc, #216]	; (1000a080 <dmp_enable_feature+0x314>)
10009fa6:	4798      	blx	r3
10009fa8:	e002      	b.n	10009fb0 <dmp_enable_feature+0x244>
    else
        dmp_enable_lp_quat(0);
10009faa:	2000      	movs	r0, #0
10009fac:	4b34      	ldr	r3, [pc, #208]	; (1000a080 <dmp_enable_feature+0x314>)
10009fae:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009fb0:	1dbb      	adds	r3, r7, #6
10009fb2:	881b      	ldrh	r3, [r3, #0]
10009fb4:	2210      	movs	r2, #16
10009fb6:	4013      	ands	r3, r2
10009fb8:	d003      	beq.n	10009fc2 <dmp_enable_feature+0x256>
        dmp_enable_6x_lp_quat(1);
10009fba:	2001      	movs	r0, #1
10009fbc:	4b31      	ldr	r3, [pc, #196]	; (1000a084 <dmp_enable_feature+0x318>)
10009fbe:	4798      	blx	r3
10009fc0:	e002      	b.n	10009fc8 <dmp_enable_feature+0x25c>
    else
        dmp_enable_6x_lp_quat(0);
10009fc2:	2000      	movs	r0, #0
10009fc4:	4b2f      	ldr	r3, [pc, #188]	; (1000a084 <dmp_enable_feature+0x318>)
10009fc6:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009fc8:	1dbb      	adds	r3, r7, #6
10009fca:	881b      	ldrh	r3, [r3, #0]
10009fcc:	2208      	movs	r2, #8
10009fce:	4313      	orrs	r3, r2
10009fd0:	b29a      	uxth	r2, r3
10009fd2:	4b2d      	ldr	r3, [pc, #180]	; (1000a088 <dmp_enable_feature+0x31c>)
10009fd4:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
10009fd6:	4b2d      	ldr	r3, [pc, #180]	; (1000a08c <dmp_enable_feature+0x320>)
10009fd8:	4798      	blx	r3

    dmp.packet_length = 0;
10009fda:	4b2b      	ldr	r3, [pc, #172]	; (1000a088 <dmp_enable_feature+0x31c>)
10009fdc:	2200      	movs	r2, #0
10009fde:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009fe0:	1dbb      	adds	r3, r7, #6
10009fe2:	881b      	ldrh	r3, [r3, #0]
10009fe4:	2240      	movs	r2, #64	; 0x40
10009fe6:	4013      	ands	r3, r2
10009fe8:	d005      	beq.n	10009ff6 <dmp_enable_feature+0x28a>
        dmp.packet_length += 6;
10009fea:	4b27      	ldr	r3, [pc, #156]	; (1000a088 <dmp_enable_feature+0x31c>)
10009fec:	7b9b      	ldrb	r3, [r3, #14]
10009fee:	3306      	adds	r3, #6
10009ff0:	b2da      	uxtb	r2, r3
10009ff2:	4b25      	ldr	r3, [pc, #148]	; (1000a088 <dmp_enable_feature+0x31c>)
10009ff4:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009ff6:	1dbb      	adds	r3, r7, #6
10009ff8:	881a      	ldrh	r2, [r3, #0]
10009ffa:	23c0      	movs	r3, #192	; 0xc0
10009ffc:	005b      	lsls	r3, r3, #1
10009ffe:	4013      	ands	r3, r2
1000a000:	d005      	beq.n	1000a00e <dmp_enable_feature+0x2a2>
        dmp.packet_length += 6;
1000a002:	4b21      	ldr	r3, [pc, #132]	; (1000a088 <dmp_enable_feature+0x31c>)
1000a004:	7b9b      	ldrb	r3, [r3, #14]
1000a006:	3306      	adds	r3, #6
1000a008:	b2da      	uxtb	r2, r3
1000a00a:	4b1f      	ldr	r3, [pc, #124]	; (1000a088 <dmp_enable_feature+0x31c>)
1000a00c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1000a00e:	1dbb      	adds	r3, r7, #6
1000a010:	881b      	ldrh	r3, [r3, #0]
1000a012:	2214      	movs	r2, #20
1000a014:	4013      	ands	r3, r2
1000a016:	d005      	beq.n	1000a024 <dmp_enable_feature+0x2b8>
        dmp.packet_length += 16;
1000a018:	4b1b      	ldr	r3, [pc, #108]	; (1000a088 <dmp_enable_feature+0x31c>)
1000a01a:	7b9b      	ldrb	r3, [r3, #14]
1000a01c:	3310      	adds	r3, #16
1000a01e:	b2da      	uxtb	r2, r3
1000a020:	4b19      	ldr	r3, [pc, #100]	; (1000a088 <dmp_enable_feature+0x31c>)
1000a022:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000a024:	1dbb      	adds	r3, r7, #6
1000a026:	881b      	ldrh	r3, [r3, #0]
1000a028:	2203      	movs	r2, #3
1000a02a:	4013      	ands	r3, r2
1000a02c:	d005      	beq.n	1000a03a <dmp_enable_feature+0x2ce>
        dmp.packet_length += 4;
1000a02e:	4b16      	ldr	r3, [pc, #88]	; (1000a088 <dmp_enable_feature+0x31c>)
1000a030:	7b9b      	ldrb	r3, [r3, #14]
1000a032:	3304      	adds	r3, #4
1000a034:	b2da      	uxtb	r2, r3
1000a036:	4b14      	ldr	r3, [pc, #80]	; (1000a088 <dmp_enable_feature+0x31c>)
1000a038:	739a      	strb	r2, [r3, #14]

    return 0;
1000a03a:	2300      	movs	r3, #0
}
1000a03c:	0018      	movs	r0, r3
1000a03e:	46bd      	mov	sp, r7
1000a040:	b006      	add	sp, #24
1000a042:	bd80      	pop	{r7, pc}
1000a044:	10009485 	.word	0x10009485
1000a048:	00000aa7 	.word	0x00000aa7
1000a04c:	00000ab6 	.word	0x00000ab6
1000a050:	1000a091 	.word	0x1000a091
1000a054:	00000aa2 	.word	0x00000aa2
1000a058:	10009811 	.word	0x10009811
1000a05c:	10009a99 	.word	0x10009a99
1000a060:	10009b21 	.word	0x10009b21
1000a064:	10009b79 	.word	0x10009b79
1000a068:	10009bdd 	.word	0x10009bdd
1000a06c:	02cae309 	.word	0x02cae309
1000a070:	10009c41 	.word	0x10009c41
1000a074:	10009cb5 	.word	0x10009cb5
1000a078:	10009d11 	.word	0x10009d11
1000a07c:	0000073d 	.word	0x0000073d
1000a080:	1000a109 	.word	0x1000a109
1000a084:	1000a179 	.word	0x1000a179
1000a088:	10019b20 	.word	0x10019b20
1000a08c:	100087d9 	.word	0x100087d9

1000a090 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
1000a090:	b580      	push	{r7, lr}
1000a092:	b088      	sub	sp, #32
1000a094:	af00      	add	r7, sp, #0
1000a096:	0002      	movs	r2, r0
1000a098:	1dfb      	adds	r3, r7, #7
1000a09a:	701a      	strb	r2, [r3, #0]
    if (enable) {
1000a09c:	1dfb      	adds	r3, r7, #7
1000a09e:	781b      	ldrb	r3, [r3, #0]
1000a0a0:	2b00      	cmp	r3, #0
1000a0a2:	d012      	beq.n	1000a0ca <dmp_enable_gyro_cal+0x3a>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000a0a4:	2314      	movs	r3, #20
1000a0a6:	18fa      	adds	r2, r7, r3
1000a0a8:	4b13      	ldr	r3, [pc, #76]	; (1000a0f8 <dmp_enable_gyro_cal+0x68>)
1000a0aa:	0010      	movs	r0, r2
1000a0ac:	0019      	movs	r1, r3
1000a0ae:	2309      	movs	r3, #9
1000a0b0:	001a      	movs	r2, r3
1000a0b2:	4b12      	ldr	r3, [pc, #72]	; (1000a0fc <dmp_enable_gyro_cal+0x6c>)
1000a0b4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000a0b6:	2314      	movs	r3, #20
1000a0b8:	18fa      	adds	r2, r7, r3
1000a0ba:	2397      	movs	r3, #151	; 0x97
1000a0bc:	00db      	lsls	r3, r3, #3
1000a0be:	2109      	movs	r1, #9
1000a0c0:	0018      	movs	r0, r3
1000a0c2:	4b0f      	ldr	r3, [pc, #60]	; (1000a100 <dmp_enable_gyro_cal+0x70>)
1000a0c4:	4798      	blx	r3
1000a0c6:	0003      	movs	r3, r0
1000a0c8:	e011      	b.n	1000a0ee <dmp_enable_gyro_cal+0x5e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1000a0ca:	2308      	movs	r3, #8
1000a0cc:	18fa      	adds	r2, r7, r3
1000a0ce:	4b0d      	ldr	r3, [pc, #52]	; (1000a104 <dmp_enable_gyro_cal+0x74>)
1000a0d0:	0010      	movs	r0, r2
1000a0d2:	0019      	movs	r1, r3
1000a0d4:	2309      	movs	r3, #9
1000a0d6:	001a      	movs	r2, r3
1000a0d8:	4b08      	ldr	r3, [pc, #32]	; (1000a0fc <dmp_enable_gyro_cal+0x6c>)
1000a0da:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000a0dc:	2308      	movs	r3, #8
1000a0de:	18fa      	adds	r2, r7, r3
1000a0e0:	2397      	movs	r3, #151	; 0x97
1000a0e2:	00db      	lsls	r3, r3, #3
1000a0e4:	2109      	movs	r1, #9
1000a0e6:	0018      	movs	r0, r3
1000a0e8:	4b05      	ldr	r3, [pc, #20]	; (1000a100 <dmp_enable_gyro_cal+0x70>)
1000a0ea:	4798      	blx	r3
1000a0ec:	0003      	movs	r3, r0
    }
}
1000a0ee:	0018      	movs	r0, r3
1000a0f0:	46bd      	mov	sp, r7
1000a0f2:	b008      	add	sp, #32
1000a0f4:	bd80      	pop	{r7, pc}
1000a0f6:	46c0      	nop			; (mov r8, r8)
1000a0f8:	10018a08 	.word	0x10018a08
1000a0fc:	10017317 	.word	0x10017317
1000a100:	10009485 	.word	0x10009485
1000a104:	10018a14 	.word	0x10018a14

1000a108 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000a108:	b580      	push	{r7, lr}
1000a10a:	b084      	sub	sp, #16
1000a10c:	af00      	add	r7, sp, #0
1000a10e:	0002      	movs	r2, r0
1000a110:	1dfb      	adds	r3, r7, #7
1000a112:	701a      	strb	r2, [r3, #0]
    unsigned char regs[4];
    if (enable) {
1000a114:	1dfb      	adds	r3, r7, #7
1000a116:	781b      	ldrb	r3, [r3, #0]
1000a118:	2b00      	cmp	r3, #0
1000a11a:	d010      	beq.n	1000a13e <dmp_enable_lp_quat+0x36>
        regs[0] = DINBC0;
1000a11c:	230c      	movs	r3, #12
1000a11e:	18fb      	adds	r3, r7, r3
1000a120:	22c0      	movs	r2, #192	; 0xc0
1000a122:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
1000a124:	230c      	movs	r3, #12
1000a126:	18fb      	adds	r3, r7, r3
1000a128:	22c2      	movs	r2, #194	; 0xc2
1000a12a:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
1000a12c:	230c      	movs	r3, #12
1000a12e:	18fb      	adds	r3, r7, r3
1000a130:	22c4      	movs	r2, #196	; 0xc4
1000a132:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
1000a134:	230c      	movs	r3, #12
1000a136:	18fb      	adds	r3, r7, r3
1000a138:	22c6      	movs	r2, #198	; 0xc6
1000a13a:	70da      	strb	r2, [r3, #3]
1000a13c:	e006      	b.n	1000a14c <dmp_enable_lp_quat+0x44>
    }
    else
        memset(regs, 0x8B, 4);
1000a13e:	230c      	movs	r3, #12
1000a140:	18fb      	adds	r3, r7, r3
1000a142:	2204      	movs	r2, #4
1000a144:	218b      	movs	r1, #139	; 0x8b
1000a146:	0018      	movs	r0, r3
1000a148:	4b07      	ldr	r3, [pc, #28]	; (1000a168 <dmp_enable_lp_quat+0x60>)
1000a14a:	4798      	blx	r3

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1000a14c:	230c      	movs	r3, #12
1000a14e:	18fb      	adds	r3, r7, r3
1000a150:	4806      	ldr	r0, [pc, #24]	; (1000a16c <dmp_enable_lp_quat+0x64>)
1000a152:	001a      	movs	r2, r3
1000a154:	2104      	movs	r1, #4
1000a156:	4b06      	ldr	r3, [pc, #24]	; (1000a170 <dmp_enable_lp_quat+0x68>)
1000a158:	4798      	blx	r3

    return mpu_reset_fifo();
1000a15a:	4b06      	ldr	r3, [pc, #24]	; (1000a174 <dmp_enable_lp_quat+0x6c>)
1000a15c:	4798      	blx	r3
1000a15e:	0003      	movs	r3, r0
}
1000a160:	0018      	movs	r0, r3
1000a162:	46bd      	mov	sp, r7
1000a164:	b004      	add	sp, #16
1000a166:	bd80      	pop	{r7, pc}
1000a168:	10017329 	.word	0x10017329
1000a16c:	00000a98 	.word	0x00000a98
1000a170:	10009485 	.word	0x10009485
1000a174:	100087d9 	.word	0x100087d9

1000a178 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
1000a178:	b580      	push	{r7, lr}
1000a17a:	b084      	sub	sp, #16
1000a17c:	af00      	add	r7, sp, #0
1000a17e:	0002      	movs	r2, r0
1000a180:	1dfb      	adds	r3, r7, #7
1000a182:	701a      	strb	r2, [r3, #0]
    unsigned char regs[4];
    if (enable) {
1000a184:	1dfb      	adds	r3, r7, #7
1000a186:	781b      	ldrb	r3, [r3, #0]
1000a188:	2b00      	cmp	r3, #0
1000a18a:	d010      	beq.n	1000a1ae <dmp_enable_6x_lp_quat+0x36>
        regs[0] = DINA20;
1000a18c:	230c      	movs	r3, #12
1000a18e:	18fb      	adds	r3, r7, r3
1000a190:	2220      	movs	r2, #32
1000a192:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
1000a194:	230c      	movs	r3, #12
1000a196:	18fb      	adds	r3, r7, r3
1000a198:	2228      	movs	r2, #40	; 0x28
1000a19a:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
1000a19c:	230c      	movs	r3, #12
1000a19e:	18fb      	adds	r3, r7, r3
1000a1a0:	2230      	movs	r2, #48	; 0x30
1000a1a2:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
1000a1a4:	230c      	movs	r3, #12
1000a1a6:	18fb      	adds	r3, r7, r3
1000a1a8:	2238      	movs	r2, #56	; 0x38
1000a1aa:	70da      	strb	r2, [r3, #3]
1000a1ac:	e006      	b.n	1000a1bc <dmp_enable_6x_lp_quat+0x44>
    } else
        memset(regs, 0xA3, 4);
1000a1ae:	230c      	movs	r3, #12
1000a1b0:	18fb      	adds	r3, r7, r3
1000a1b2:	2204      	movs	r2, #4
1000a1b4:	21a3      	movs	r1, #163	; 0xa3
1000a1b6:	0018      	movs	r0, r3
1000a1b8:	4b07      	ldr	r3, [pc, #28]	; (1000a1d8 <dmp_enable_6x_lp_quat+0x60>)
1000a1ba:	4798      	blx	r3

    mpu_write_mem(CFG_8, 4, regs);
1000a1bc:	230c      	movs	r3, #12
1000a1be:	18fb      	adds	r3, r7, r3
1000a1c0:	4806      	ldr	r0, [pc, #24]	; (1000a1dc <dmp_enable_6x_lp_quat+0x64>)
1000a1c2:	001a      	movs	r2, r3
1000a1c4:	2104      	movs	r1, #4
1000a1c6:	4b06      	ldr	r3, [pc, #24]	; (1000a1e0 <dmp_enable_6x_lp_quat+0x68>)
1000a1c8:	4798      	blx	r3

    return mpu_reset_fifo();
1000a1ca:	4b06      	ldr	r3, [pc, #24]	; (1000a1e4 <dmp_enable_6x_lp_quat+0x6c>)
1000a1cc:	4798      	blx	r3
1000a1ce:	0003      	movs	r3, r0
}
1000a1d0:	0018      	movs	r0, r3
1000a1d2:	46bd      	mov	sp, r7
1000a1d4:	b004      	add	sp, #16
1000a1d6:	bd80      	pop	{r7, pc}
1000a1d8:	10017329 	.word	0x10017329
1000a1dc:	00000a9e 	.word	0x00000a9e
1000a1e0:	10009485 	.word	0x10009485
1000a1e4:	100087d9 	.word	0x100087d9

1000a1e8 <sms_service_advertise>:
 */ 

#include "app_include.h"

at_ble_status_t sms_service_advertise(void)
 {
1000a1e8:	b5b0      	push	{r4, r5, r7, lr}
1000a1ea:	b086      	sub	sp, #24
1000a1ec:	af04      	add	r7, sp, #16
     at_ble_status_t status = AT_BLE_FAILURE;
1000a1ee:	1dfb      	adds	r3, r7, #7
1000a1f0:	22e2      	movs	r2, #226	; 0xe2
1000a1f2:	701a      	strb	r2, [r3, #0]

     /* Set the advertisement data */
     if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a1f4:	1dfc      	adds	r4, r7, #7
1000a1f6:	4b1b      	ldr	r3, [pc, #108]	; (1000a264 <sms_service_advertise+0x7c>)
1000a1f8:	4798      	blx	r3
1000a1fa:	0003      	movs	r3, r0
1000a1fc:	7023      	strb	r3, [r4, #0]
1000a1fe:	1dfb      	adds	r3, r7, #7
1000a200:	781b      	ldrb	r3, [r3, #0]
1000a202:	2b00      	cmp	r3, #0
1000a204:	d00a      	beq.n	1000a21c <sms_service_advertise+0x34>
         DBG_LOG("[sms_service_advertise]  advertisement data set failed!");
1000a206:	4b18      	ldr	r3, [pc, #96]	; (1000a268 <sms_service_advertise+0x80>)
1000a208:	0018      	movs	r0, r3
1000a20a:	4b18      	ldr	r3, [pc, #96]	; (1000a26c <sms_service_advertise+0x84>)
1000a20c:	4798      	blx	r3
1000a20e:	4b18      	ldr	r3, [pc, #96]	; (1000a270 <sms_service_advertise+0x88>)
1000a210:	0018      	movs	r0, r3
1000a212:	4b18      	ldr	r3, [pc, #96]	; (1000a274 <sms_service_advertise+0x8c>)
1000a214:	4798      	blx	r3
         return status;
1000a216:	1dfb      	adds	r3, r7, #7
1000a218:	781b      	ldrb	r3, [r3, #0]
1000a21a:	e01e      	b.n	1000a25a <sms_service_advertise+0x72>
     }

     /* Start of advertisement */
     if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a21c:	1dfc      	adds	r4, r7, #7
1000a21e:	2300      	movs	r3, #0
1000a220:	9302      	str	r3, [sp, #8]
1000a222:	231e      	movs	r3, #30
1000a224:	9301      	str	r3, [sp, #4]
1000a226:	23c8      	movs	r3, #200	; 0xc8
1000a228:	00db      	lsls	r3, r3, #3
1000a22a:	9300      	str	r3, [sp, #0]
1000a22c:	2300      	movs	r3, #0
1000a22e:	2200      	movs	r2, #0
1000a230:	2101      	movs	r1, #1
1000a232:	2000      	movs	r0, #0
1000a234:	4d10      	ldr	r5, [pc, #64]	; (1000a278 <sms_service_advertise+0x90>)
1000a236:	47a8      	blx	r5
1000a238:	0003      	movs	r3, r0
1000a23a:	7023      	strb	r3, [r4, #0]
1000a23c:	1dfb      	adds	r3, r7, #7
1000a23e:	781b      	ldrb	r3, [r3, #0]
1000a240:	2b00      	cmp	r3, #0
1000a242:	d109      	bne.n	1000a258 <sms_service_advertise+0x70>
     {
         DBG_LOG("[sms_service_advertise]  BLE Started Advertisement");
1000a244:	4b08      	ldr	r3, [pc, #32]	; (1000a268 <sms_service_advertise+0x80>)
1000a246:	0018      	movs	r0, r3
1000a248:	4b08      	ldr	r3, [pc, #32]	; (1000a26c <sms_service_advertise+0x84>)
1000a24a:	4798      	blx	r3
1000a24c:	4b0b      	ldr	r3, [pc, #44]	; (1000a27c <sms_service_advertise+0x94>)
1000a24e:	0018      	movs	r0, r3
1000a250:	4b08      	ldr	r3, [pc, #32]	; (1000a274 <sms_service_advertise+0x8c>)
1000a252:	4798      	blx	r3
         return AT_BLE_SUCCESS;
1000a254:	2300      	movs	r3, #0
1000a256:	e000      	b.n	1000a25a <sms_service_advertise+0x72>
         } else {
         //DBG_LOG("[sms_service_advertise]  BLE Advertisement start failed: reason 0x%x", status);
     }
     return AT_BLE_FAILURE;
1000a258:	23e2      	movs	r3, #226	; 0xe2
 }
1000a25a:	0018      	movs	r0, r3
1000a25c:	46bd      	mov	sp, r7
1000a25e:	b002      	add	sp, #8
1000a260:	bdb0      	pop	{r4, r5, r7, pc}
1000a262:	46c0      	nop			; (mov r8, r8)
1000a264:	10010dc9 	.word	0x10010dc9
1000a268:	10018a70 	.word	0x10018a70
1000a26c:	10017591 	.word	0x10017591
1000a270:	10018a74 	.word	0x10018a74
1000a274:	10017471 	.word	0x10017471
1000a278:	10012e95 	.word	0x10012e95
1000a27c:	10018aac 	.word	0x10018aac

1000a280 <sms_button_configure_gpio>:
volatile bool dbg_gpio_pin_state = false;


/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a280:	b580      	push	{r7, lr}
1000a282:	b082      	sub	sp, #8
1000a284:	af00      	add	r7, sp, #0
    //DBG_LOG("Problem while setting up dbg pin");
    //}
    //gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);

    /* Wake up input @ PIN_A0_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a286:	1d3b      	adds	r3, r7, #4
1000a288:	0018      	movs	r0, r3
1000a28a:	4b11      	ldr	r3, [pc, #68]	; (1000a2d0 <sms_button_configure_gpio+0x50>)
1000a28c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a28e:	1d3b      	adds	r3, r7, #4
1000a290:	2200      	movs	r2, #0
1000a292:	701a      	strb	r2, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a294:	1d3b      	adds	r3, r7, #4
1000a296:	2202      	movs	r2, #2
1000a298:	705a      	strb	r2, [r3, #1]
    config_gpio_pin.aon_wakeup = true;
1000a29a:	1d3b      	adds	r3, r7, #4
1000a29c:	2201      	movs	r2, #1
1000a29e:	70da      	strb	r2, [r3, #3]
    if(gpio_pin_set_config(PIN_AO_GPIO_0, &config_gpio_pin) != STATUS_OK) {
1000a2a0:	1d3b      	adds	r3, r7, #4
1000a2a2:	0019      	movs	r1, r3
1000a2a4:	201f      	movs	r0, #31
1000a2a6:	4b0b      	ldr	r3, [pc, #44]	; (1000a2d4 <sms_button_configure_gpio+0x54>)
1000a2a8:	4798      	blx	r3
    //else {
    //DBG_LOG_DEV("[sms_button_configure] wake-up pin set up correctly");
    //}

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a2aa:	1d3b      	adds	r3, r7, #4
1000a2ac:	0018      	movs	r0, r3
1000a2ae:	4b08      	ldr	r3, [pc, #32]	; (1000a2d0 <sms_button_configure_gpio+0x50>)
1000a2b0:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a2b2:	1d3b      	adds	r3, r7, #4
1000a2b4:	2200      	movs	r2, #0
1000a2b6:	701a      	strb	r2, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a2b8:	1d3b      	adds	r3, r7, #4
1000a2ba:	2200      	movs	r2, #0
1000a2bc:	705a      	strb	r2, [r3, #1]
    gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000a2be:	1d3b      	adds	r3, r7, #4
1000a2c0:	0019      	movs	r1, r3
1000a2c2:	2017      	movs	r0, #23
1000a2c4:	4b03      	ldr	r3, [pc, #12]	; (1000a2d4 <sms_button_configure_gpio+0x54>)
1000a2c6:	4798      	blx	r3
}
1000a2c8:	46c0      	nop			; (mov r8, r8)
1000a2ca:	46bd      	mov	sp, r7
1000a2cc:	b002      	add	sp, #8
1000a2ce:	bd80      	pop	{r7, pc}
1000a2d0:	1000b565 	.word	0x1000b565
1000a2d4:	1000b58d 	.word	0x1000b58d

1000a2d8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a2d8:	b580      	push	{r7, lr}
1000a2da:	af00      	add	r7, sp, #0
    /* Button 0 callback */
    gpio_register_callback(SMS_BUTTON_2_PIN, sms_button_bt2_callback, GPIO_CALLBACK_RISING);
1000a2dc:	4b08      	ldr	r3, [pc, #32]	; (1000a300 <sms_button_register_callbacks+0x28>)
1000a2de:	2202      	movs	r2, #2
1000a2e0:	0019      	movs	r1, r3
1000a2e2:	2017      	movs	r0, #23
1000a2e4:	4b07      	ldr	r3, [pc, #28]	; (1000a304 <sms_button_register_callbacks+0x2c>)
1000a2e6:	4798      	blx	r3
    gpio_enable_callback(SMS_BUTTON_2_PIN);
1000a2e8:	2017      	movs	r0, #23
1000a2ea:	4b07      	ldr	r3, [pc, #28]	; (1000a308 <sms_button_register_callbacks+0x30>)
1000a2ec:	4798      	blx	r3

    /* GPIO0 callback */
    gpio_register_callback(SMS_BUTTON_1_PIN, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a2ee:	4b07      	ldr	r3, [pc, #28]	; (1000a30c <sms_button_register_callbacks+0x34>)
1000a2f0:	2202      	movs	r2, #2
1000a2f2:	0019      	movs	r1, r3
1000a2f4:	201f      	movs	r0, #31
1000a2f6:	4b03      	ldr	r3, [pc, #12]	; (1000a304 <sms_button_register_callbacks+0x2c>)
1000a2f8:	4798      	blx	r3
    //gpio_enable_callback(PIN_AO_GPIO_0);
}
1000a2fa:	46c0      	nop			; (mov r8, r8)
1000a2fc:	46bd      	mov	sp, r7
1000a2fe:	bd80      	pop	{r7, pc}
1000a300:	1000a34d 	.word	0x1000a34d
1000a304:	1000bbd1 	.word	0x1000bbd1
1000a308:	1000beb9 	.word	0x1000beb9
1000a30c:	1000a311 	.word	0x1000a311

1000a310 <sms_button_bt1_callback>:

/* Callbacks --> sending interrupt message to platform */
void sms_button_bt1_callback(void)
{
1000a310:	b5b0      	push	{r4, r5, r7, lr}
1000a312:	af00      	add	r7, sp, #0
    if(conn_status) {
1000a314:	4b09      	ldr	r3, [pc, #36]	; (1000a33c <sms_button_bt1_callback+0x2c>)
1000a316:	781b      	ldrb	r3, [r3, #0]
1000a318:	2b00      	cmp	r3, #0
1000a31a:	d00b      	beq.n	1000a334 <sms_button_bt1_callback+0x24>
        gpio_disable_callback(SMS_BUTTON_1_PIN);
1000a31c:	201f      	movs	r0, #31
1000a31e:	4b08      	ldr	r3, [pc, #32]	; (1000a340 <sms_button_bt1_callback+0x30>)
1000a320:	4798      	blx	r3
        sms_plf_int_state.source = SMS_CB_BT1;
1000a322:	4b08      	ldr	r3, [pc, #32]	; (1000a344 <sms_button_bt1_callback+0x34>)
1000a324:	2201      	movs	r2, #1
1000a326:	701a      	strb	r2, [r3, #0]
        send_plf_int_msg_ind(SMS_BUTTON_1_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a328:	2300      	movs	r3, #0
1000a32a:	2200      	movs	r2, #0
1000a32c:	2102      	movs	r1, #2
1000a32e:	201f      	movs	r0, #31
1000a330:	4c05      	ldr	r4, [pc, #20]	; (1000a348 <sms_button_bt1_callback+0x38>)
1000a332:	47a0      	blx	r4
    }
}
1000a334:	46c0      	nop			; (mov r8, r8)
1000a336:	46bd      	mov	sp, r7
1000a338:	bdb0      	pop	{r4, r5, r7, pc}
1000a33a:	46c0      	nop			; (mov r8, r8)
1000a33c:	10019b54 	.word	0x10019b54
1000a340:	1000bf81 	.word	0x1000bf81
1000a344:	1001a280 	.word	0x1001a280
1000a348:	10011995 	.word	0x10011995

1000a34c <sms_button_bt2_callback>:
void sms_button_bt2_callback(void)
{
1000a34c:	b5b0      	push	{r4, r5, r7, lr}
1000a34e:	af00      	add	r7, sp, #0
    /* Add button callback functionality here */
    if(conn_status) {
1000a350:	4b09      	ldr	r3, [pc, #36]	; (1000a378 <sms_button_bt2_callback+0x2c>)
1000a352:	781b      	ldrb	r3, [r3, #0]
1000a354:	2b00      	cmp	r3, #0
1000a356:	d00b      	beq.n	1000a370 <sms_button_bt2_callback+0x24>
        gpio_disable_callback(SMS_BUTTON_2_PIN);
1000a358:	2017      	movs	r0, #23
1000a35a:	4b08      	ldr	r3, [pc, #32]	; (1000a37c <sms_button_bt2_callback+0x30>)
1000a35c:	4798      	blx	r3
        sms_plf_int_state.source = SMS_CB_BT2;
1000a35e:	4b08      	ldr	r3, [pc, #32]	; (1000a380 <sms_button_bt2_callback+0x34>)
1000a360:	2202      	movs	r2, #2
1000a362:	701a      	strb	r2, [r3, #0]
        send_plf_int_msg_ind(SMS_BUTTON_2_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a364:	2300      	movs	r3, #0
1000a366:	2200      	movs	r2, #0
1000a368:	2102      	movs	r1, #2
1000a36a:	2017      	movs	r0, #23
1000a36c:	4c05      	ldr	r4, [pc, #20]	; (1000a384 <sms_button_bt2_callback+0x38>)
1000a36e:	47a0      	blx	r4
    }
}
1000a370:	46c0      	nop			; (mov r8, r8)
1000a372:	46bd      	mov	sp, r7
1000a374:	bdb0      	pop	{r4, r5, r7, pc}
1000a376:	46c0      	nop			; (mov r8, r8)
1000a378:	10019b54 	.word	0x10019b54
1000a37c:	1000bf81 	.word	0x1000bf81
1000a380:	1001a280 	.word	0x1001a280
1000a384:	10011995 	.word	0x10011995

1000a388 <sms_button_service_init>:
    /* Enable interrupt on button 2 again */
    gpio_enable_callback(SMS_BUTTON_2_PIN);
}

void sms_button_service_init(gatt_service_handler_t *sms_button_serv, uint8_t *sms_button_value)
{
1000a388:	b580      	push	{r7, lr}
1000a38a:	b082      	sub	sp, #8
1000a38c:	af00      	add	r7, sp, #0
1000a38e:	6078      	str	r0, [r7, #4]
1000a390:	6039      	str	r1, [r7, #0]
    //SMS button service characteristic
    sms_button_serv->serv_handle = 0;
1000a392:	687b      	ldr	r3, [r7, #4]
1000a394:	2200      	movs	r2, #0
1000a396:	825a      	strh	r2, [r3, #18]
    sms_button_serv->serv_uuid.type = AT_BLE_UUID_128;
1000a398:	687b      	ldr	r3, [r7, #4]
1000a39a:	2202      	movs	r2, #2
1000a39c:	701a      	strb	r2, [r3, #0]
    sms_button_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a39e:	687b      	ldr	r3, [r7, #4]
1000a3a0:	2200      	movs	r2, #0
1000a3a2:	705a      	strb	r2, [r3, #1]
    sms_button_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a3a4:	687b      	ldr	r3, [r7, #4]
1000a3a6:	2200      	movs	r2, #0
1000a3a8:	709a      	strb	r2, [r3, #2]
    sms_button_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a3aa:	687b      	ldr	r3, [r7, #4]
1000a3ac:	2257      	movs	r2, #87	; 0x57
1000a3ae:	70da      	strb	r2, [r3, #3]
    sms_button_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a3b0:	687b      	ldr	r3, [r7, #4]
1000a3b2:	221c      	movs	r2, #28
1000a3b4:	711a      	strb	r2, [r3, #4]
    sms_button_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
1000a3b6:	687b      	ldr	r3, [r7, #4]
1000a3b8:	2200      	movs	r2, #0
1000a3ba:	715a      	strb	r2, [r3, #5]
    sms_button_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a3bc:	687b      	ldr	r3, [r7, #4]
1000a3be:	2200      	movs	r2, #0
1000a3c0:	719a      	strb	r2, [r3, #6]
    sms_button_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a3c2:	687b      	ldr	r3, [r7, #4]
1000a3c4:	22be      	movs	r2, #190	; 0xbe
1000a3c6:	71da      	strb	r2, [r3, #7]
    sms_button_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a3c8:	687b      	ldr	r3, [r7, #4]
1000a3ca:	225a      	movs	r2, #90	; 0x5a
1000a3cc:	721a      	strb	r2, [r3, #8]
    sms_button_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
1000a3ce:	687b      	ldr	r3, [r7, #4]
1000a3d0:	2200      	movs	r2, #0
1000a3d2:	725a      	strb	r2, [r3, #9]
    sms_button_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
1000a3d4:	687b      	ldr	r3, [r7, #4]
1000a3d6:	2200      	movs	r2, #0
1000a3d8:	729a      	strb	r2, [r3, #10]
    sms_button_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000a3da:	687b      	ldr	r3, [r7, #4]
1000a3dc:	2230      	movs	r2, #48	; 0x30
1000a3de:	72da      	strb	r2, [r3, #11]
    sms_button_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000a3e0:	687b      	ldr	r3, [r7, #4]
1000a3e2:	2250      	movs	r2, #80	; 0x50
1000a3e4:	731a      	strb	r2, [r3, #12]
    sms_button_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
1000a3e6:	687b      	ldr	r3, [r7, #4]
1000a3e8:	2200      	movs	r2, #0
1000a3ea:	735a      	strb	r2, [r3, #13]
    sms_button_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
1000a3ec:	687b      	ldr	r3, [r7, #4]
1000a3ee:	2200      	movs	r2, #0
1000a3f0:	739a      	strb	r2, [r3, #14]
    sms_button_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000a3f2:	687b      	ldr	r3, [r7, #4]
1000a3f4:	22bb      	movs	r2, #187	; 0xbb
1000a3f6:	73da      	strb	r2, [r3, #15]
    sms_button_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
1000a3f8:	687b      	ldr	r3, [r7, #4]
1000a3fa:	22bb      	movs	r2, #187	; 0xbb
1000a3fc:	741a      	strb	r2, [r3, #16]
    
    sms_button_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000a3fe:	687b      	ldr	r3, [r7, #4]
1000a400:	2212      	movs	r2, #18
1000a402:	851a      	strh	r2, [r3, #40]	; 0x28
    sms_button_serv->serv_chars.init_value = sms_button_value;             /* value */
1000a404:	687b      	ldr	r3, [r7, #4]
1000a406:	683a      	ldr	r2, [r7, #0]
1000a408:	62da      	str	r2, [r3, #44]	; 0x2c
    sms_button_serv->serv_chars.value_init_len = sizeof(uint8_t);
1000a40a:	687b      	ldr	r3, [r7, #4]
1000a40c:	2201      	movs	r2, #1
1000a40e:	861a      	strh	r2, [r3, #48]	; 0x30
    sms_button_serv->serv_chars.value_max_len = sizeof(uint8_t);
1000a410:	687b      	ldr	r3, [r7, #4]
1000a412:	2201      	movs	r2, #1
1000a414:	865a      	strh	r2, [r3, #50]	; 0x32
    sms_button_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
1000a416:	687b      	ldr	r3, [r7, #4]
1000a418:	2234      	movs	r2, #52	; 0x34
1000a41a:	2111      	movs	r1, #17
1000a41c:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000a41e:	687b      	ldr	r3, [r7, #4]
1000a420:	2200      	movs	r2, #0
1000a422:	639a      	str	r2, [r3, #56]	; 0x38
    sms_button_serv->serv_chars.user_desc_len = 0;
1000a424:	687b      	ldr	r3, [r7, #4]
1000a426:	2200      	movs	r2, #0
1000a428:	879a      	strh	r2, [r3, #60]	; 0x3c
    sms_button_serv->serv_chars.user_desc_max_len = 0;
1000a42a:	687b      	ldr	r3, [r7, #4]
1000a42c:	2200      	movs	r2, #0
1000a42e:	87da      	strh	r2, [r3, #62]	; 0x3e
    sms_button_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000a430:	687b      	ldr	r3, [r7, #4]
1000a432:	2244      	movs	r2, #68	; 0x44
1000a434:	2100      	movs	r1, #0
1000a436:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000a438:	687b      	ldr	r3, [r7, #4]
1000a43a:	2245      	movs	r2, #69	; 0x45
1000a43c:	2100      	movs	r1, #0
1000a43e:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000a440:	687b      	ldr	r3, [r7, #4]
1000a442:	2246      	movs	r2, #70	; 0x46
1000a444:	2100      	movs	r1, #0
1000a446:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
1000a448:	687b      	ldr	r3, [r7, #4]
1000a44a:	2248      	movs	r2, #72	; 0x48
1000a44c:	2100      	movs	r1, #0
1000a44e:	5299      	strh	r1, [r3, r2]
    sms_button_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000a450:	687b      	ldr	r3, [r7, #4]
1000a452:	224a      	movs	r2, #74	; 0x4a
1000a454:	2100      	movs	r1, #0
1000a456:	5299      	strh	r1, [r3, r2]
    sms_button_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
1000a458:	687b      	ldr	r3, [r7, #4]
1000a45a:	224c      	movs	r2, #76	; 0x4c
1000a45c:	2100      	movs	r1, #0
1000a45e:	5299      	strh	r1, [r3, r2]
    //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
    //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
    //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
    //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    
    sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */
1000a460:	687b      	ldr	r3, [r7, #4]
1000a462:	2200      	movs	r2, #0
1000a464:	641a      	str	r2, [r3, #64]	; 0x40
    //DBG_LOG("[sms_button_service_init]\n\r  setting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_button_serv->serv_uuid.uuid,
    //sms_button_serv->serv_handle,
    //sms_button_serv->serv_chars.uuid.uuid[1], sms_button_serv->serv_chars.uuid.uuid[0],
    //sms_button_serv->serv_chars.value_init_len);
}
1000a466:	46c0      	nop			; (mov r8, r8)
1000a468:	46bd      	mov	sp, r7
1000a46a:	b002      	add	sp, #8
1000a46c:	bd80      	pop	{r7, pc}
1000a46e:	46c0      	nop			; (mov r8, r8)

1000a470 <sms_button_primary_service_define>:

at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
{
1000a470:	b590      	push	{r4, r7, lr}
1000a472:	b085      	sub	sp, #20
1000a474:	af02      	add	r7, sp, #8
1000a476:	6078      	str	r0, [r7, #4]
    //DBG_LOG("[sms_button_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_service->serv_uuid.uuid,
    //sms_service->serv_handle,
    //sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
    //sms_service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
1000a478:	6878      	ldr	r0, [r7, #4]
1000a47a:	687b      	ldr	r3, [r7, #4]
1000a47c:	3312      	adds	r3, #18
1000a47e:	0019      	movs	r1, r3
1000a480:	687b      	ldr	r3, [r7, #4]
1000a482:	3314      	adds	r3, #20
1000a484:	2201      	movs	r2, #1
1000a486:	9201      	str	r2, [sp, #4]
1000a488:	9300      	str	r3, [sp, #0]
1000a48a:	2300      	movs	r3, #0
1000a48c:	2200      	movs	r2, #0
1000a48e:	4c03      	ldr	r4, [pc, #12]	; (1000a49c <sms_button_primary_service_define+0x2c>)
1000a490:	47a0      	blx	r4
1000a492:	0003      	movs	r3, r0
}
1000a494:	0018      	movs	r0, r3
1000a496:	46bd      	mov	sp, r7
1000a498:	b003      	add	sp, #12
1000a49a:	bd90      	pop	{r4, r7, pc}
1000a49c:	10013721 	.word	0x10013721

1000a4a0 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000a4a0:	b580      	push	{r7, lr}
1000a4a2:	b082      	sub	sp, #8
1000a4a4:	af00      	add	r7, sp, #0
1000a4a6:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a4a8:	46c0      	nop			; (mov r8, r8)
1000a4aa:	687b      	ldr	r3, [r7, #4]
1000a4ac:	2228      	movs	r2, #40	; 0x28
1000a4ae:	5c9b      	ldrb	r3, [r3, r2]
1000a4b0:	07db      	lsls	r3, r3, #31
1000a4b2:	0fdb      	lsrs	r3, r3, #31
1000a4b4:	b2db      	uxtb	r3, r3
1000a4b6:	2b00      	cmp	r3, #0
1000a4b8:	d1f7      	bne.n	1000a4aa <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000a4ba:	46c0      	nop			; (mov r8, r8)
1000a4bc:	46bd      	mov	sp, r7
1000a4be:	b002      	add	sp, #8
1000a4c0:	bd80      	pop	{r7, pc}
1000a4c2:	46c0      	nop			; (mov r8, r8)

1000a4c4 <i2c_enable>:
 *
 * \param[in,out] module Pointer to the driver instance to enable
 *
 */
static inline void i2c_enable(I2C *const i2c_module)
{
1000a4c4:	b580      	push	{r7, lr}
1000a4c6:	b082      	sub	sp, #8
1000a4c8:	af00      	add	r7, sp, #0
1000a4ca:	6078      	str	r0, [r7, #4]
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
1000a4cc:	687b      	ldr	r3, [r7, #4]
1000a4ce:	0018      	movs	r0, r3
1000a4d0:	4b04      	ldr	r3, [pc, #16]	; (1000a4e4 <i2c_enable+0x20>)
1000a4d2:	4798      	blx	r3
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
1000a4d4:	687b      	ldr	r3, [r7, #4]
1000a4d6:	2201      	movs	r2, #1
1000a4d8:	751a      	strb	r2, [r3, #20]
}
1000a4da:	46c0      	nop			; (mov r8, r8)
1000a4dc:	46bd      	mov	sp, r7
1000a4de:	b002      	add	sp, #8
1000a4e0:	bd80      	pop	{r7, pc}
1000a4e2:	46c0      	nop			; (mov r8, r8)
1000a4e4:	1000a4a1 	.word	0x1000a4a1

1000a4e8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
1000a4e8:	b580      	push	{r7, lr}
1000a4ea:	b082      	sub	sp, #8
1000a4ec:	af00      	add	r7, sp, #0
1000a4ee:	6078      	str	r0, [r7, #4]
1000a4f0:	000a      	movs	r2, r1
1000a4f2:	1cfb      	adds	r3, r7, #3
1000a4f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
1000a4f6:	687b      	ldr	r3, [r7, #4]
1000a4f8:	7c5b      	ldrb	r3, [r3, #17]
1000a4fa:	b2db      	uxtb	r3, r3
1000a4fc:	b25a      	sxtb	r2, r3
1000a4fe:	1cfb      	adds	r3, r7, #3
1000a500:	781b      	ldrb	r3, [r3, #0]
1000a502:	2101      	movs	r1, #1
1000a504:	4099      	lsls	r1, r3
1000a506:	000b      	movs	r3, r1
1000a508:	b25b      	sxtb	r3, r3
1000a50a:	4313      	orrs	r3, r2
1000a50c:	b25b      	sxtb	r3, r3
1000a50e:	b2da      	uxtb	r2, r3
1000a510:	687b      	ldr	r3, [r7, #4]
1000a512:	745a      	strb	r2, [r3, #17]
}
1000a514:	46c0      	nop			; (mov r8, r8)
1000a516:	46bd      	mov	sp, r7
1000a518:	b002      	add	sp, #8
1000a51a:	bd80      	pop	{r7, pc}

1000a51c <i2c_master_configure>:
*/

#include "app_include.h"

void i2c_master_configure(void)
{
1000a51c:	b580      	push	{r7, lr}
1000a51e:	b086      	sub	sp, #24
1000a520:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[i2c_master_configure]  configuring I2C master...");
1000a522:	4b2f      	ldr	r3, [pc, #188]	; (1000a5e0 <i2c_master_configure+0xc4>)
1000a524:	0018      	movs	r0, r3
1000a526:	4b2f      	ldr	r3, [pc, #188]	; (1000a5e4 <i2c_master_configure+0xc8>)
1000a528:	4798      	blx	r3
1000a52a:	4b2f      	ldr	r3, [pc, #188]	; (1000a5e8 <i2c_master_configure+0xcc>)
1000a52c:	0018      	movs	r0, r3
1000a52e:	4b2f      	ldr	r3, [pc, #188]	; (1000a5ec <i2c_master_configure+0xd0>)
1000a530:	4798      	blx	r3

    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a532:	2010      	movs	r0, #16
1000a534:	4b2e      	ldr	r3, [pc, #184]	; (1000a5f0 <i2c_master_configure+0xd4>)
1000a536:	4798      	blx	r3
1000a538:	0003      	movs	r3, r0
1000a53a:	001a      	movs	r2, r3
1000a53c:	4b2d      	ldr	r3, [pc, #180]	; (1000a5f4 <i2c_master_configure+0xd8>)
1000a53e:	605a      	str	r2, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a540:	2010      	movs	r0, #16
1000a542:	4b2b      	ldr	r3, [pc, #172]	; (1000a5f0 <i2c_master_configure+0xd4>)
1000a544:	4798      	blx	r3
1000a546:	0003      	movs	r3, r0
1000a548:	001a      	movs	r2, r3
1000a54a:	4b2b      	ldr	r3, [pc, #172]	; (1000a5f8 <i2c_master_configure+0xdc>)
1000a54c:	605a      	str	r2, [r3, #4]
    for(uint8_t i = 0; i < I2C_DATA_LENGTH; i++) {
1000a54e:	2317      	movs	r3, #23
1000a550:	18fb      	adds	r3, r7, r3
1000a552:	2200      	movs	r2, #0
1000a554:	701a      	strb	r2, [r3, #0]
1000a556:	e016      	b.n	1000a586 <i2c_master_configure+0x6a>
        i2c_wpacket.data[i] = 0;
1000a558:	4b26      	ldr	r3, [pc, #152]	; (1000a5f4 <i2c_master_configure+0xd8>)
1000a55a:	685a      	ldr	r2, [r3, #4]
1000a55c:	2317      	movs	r3, #23
1000a55e:	18fb      	adds	r3, r7, r3
1000a560:	781b      	ldrb	r3, [r3, #0]
1000a562:	18d3      	adds	r3, r2, r3
1000a564:	2200      	movs	r2, #0
1000a566:	701a      	strb	r2, [r3, #0]
        i2c_rpacket.data[i] = 0;
1000a568:	4b23      	ldr	r3, [pc, #140]	; (1000a5f8 <i2c_master_configure+0xdc>)
1000a56a:	685a      	ldr	r2, [r3, #4]
1000a56c:	2317      	movs	r3, #23
1000a56e:	18fb      	adds	r3, r7, r3
1000a570:	781b      	ldrb	r3, [r3, #0]
1000a572:	18d3      	adds	r3, r2, r3
1000a574:	2200      	movs	r2, #0
1000a576:	701a      	strb	r2, [r3, #0]
{
    DBG_LOG_DEV("[i2c_master_configure]  configuring I2C master...");

    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
    for(uint8_t i = 0; i < I2C_DATA_LENGTH; i++) {
1000a578:	2317      	movs	r3, #23
1000a57a:	18fb      	adds	r3, r7, r3
1000a57c:	781a      	ldrb	r2, [r3, #0]
1000a57e:	2317      	movs	r3, #23
1000a580:	18fb      	adds	r3, r7, r3
1000a582:	3201      	adds	r2, #1
1000a584:	701a      	strb	r2, [r3, #0]
1000a586:	2317      	movs	r3, #23
1000a588:	18fb      	adds	r3, r7, r3
1000a58a:	781b      	ldrb	r3, [r3, #0]
1000a58c:	2b0f      	cmp	r3, #15
1000a58e:	d9e3      	bls.n	1000a558 <i2c_master_configure+0x3c>
        i2c_wpacket.data[i] = 0;
        i2c_rpacket.data[i] = 0;
    }

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a590:	003b      	movs	r3, r7
1000a592:	0018      	movs	r0, r3
1000a594:	4b19      	ldr	r3, [pc, #100]	; (1000a5fc <i2c_master_configure+0xe0>)
1000a596:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_MASTER_MPU9250_CLK_SRC;
1000a598:	003b      	movs	r3, r7
1000a59a:	2203      	movs	r2, #3
1000a59c:	701a      	strb	r2, [r3, #0]
    config_i2c_master.clock_divider = I2C_MASTER_MPU9250_CLK_DIV;
1000a59e:	003b      	movs	r3, r7
1000a5a0:	2208      	movs	r2, #8
1000a5a2:	805a      	strh	r2, [r3, #2]
    config_i2c_master.pin_number_pad0 = I2C_MASTER_MPU9250_PIN_SDA;
1000a5a4:	003b      	movs	r3, r7
1000a5a6:	2208      	movs	r2, #8
1000a5a8:	605a      	str	r2, [r3, #4]
    config_i2c_master.pin_number_pad1 = I2C_MASTER_MPU9250_PIN_SCL;
1000a5aa:	003b      	movs	r3, r7
1000a5ac:	2209      	movs	r2, #9
1000a5ae:	60da      	str	r2, [r3, #12]
    config_i2c_master.pinmux_sel_pad0 = I2C_MASTER_MPU9250_MUX_SDA;
1000a5b0:	003b      	movs	r3, r7
1000a5b2:	2202      	movs	r2, #2
1000a5b4:	609a      	str	r2, [r3, #8]
    config_i2c_master.pinmux_sel_pad1 = I2C_MASTER_MPU9250_MUX_SCL;
1000a5b6:	003b      	movs	r3, r7
1000a5b8:	2202      	movs	r2, #2
1000a5ba:	611a      	str	r2, [r3, #16]
    while(i2c_master_init(&i2c_master_mpu9250_instance,I2C_MASTER_MPU9250_PORT, &config_i2c_master) != STATUS_OK);
1000a5bc:	46c0      	nop			; (mov r8, r8)
1000a5be:	003a      	movs	r2, r7
1000a5c0:	490f      	ldr	r1, [pc, #60]	; (1000a600 <i2c_master_configure+0xe4>)
1000a5c2:	4b10      	ldr	r3, [pc, #64]	; (1000a604 <i2c_master_configure+0xe8>)
1000a5c4:	0018      	movs	r0, r3
1000a5c6:	4b10      	ldr	r3, [pc, #64]	; (1000a608 <i2c_master_configure+0xec>)
1000a5c8:	4798      	blx	r3
1000a5ca:	1e03      	subs	r3, r0, #0
1000a5cc:	d1f7      	bne.n	1000a5be <i2c_master_configure+0xa2>

    i2c_enable(i2c_master_mpu9250_instance.hw);
1000a5ce:	4b0d      	ldr	r3, [pc, #52]	; (1000a604 <i2c_master_configure+0xe8>)
1000a5d0:	681b      	ldr	r3, [r3, #0]
1000a5d2:	0018      	movs	r0, r3
1000a5d4:	4b0d      	ldr	r3, [pc, #52]	; (1000a60c <i2c_master_configure+0xf0>)
1000a5d6:	4798      	blx	r3
}
1000a5d8:	46c0      	nop			; (mov r8, r8)
1000a5da:	46bd      	mov	sp, r7
1000a5dc:	b006      	add	sp, #24
1000a5de:	bd80      	pop	{r7, pc}
1000a5e0:	10018ae0 	.word	0x10018ae0
1000a5e4:	10017591 	.word	0x10017591
1000a5e8:	10018ae4 	.word	0x10018ae4
1000a5ec:	10017471 	.word	0x10017471
1000a5f0:	100172e5 	.word	0x100172e5
1000a5f4:	1001a3f0 	.word	0x1001a3f0
1000a5f8:	1001a3c0 	.word	0x1001a3c0
1000a5fc:	1000c309 	.word	0x1000c309
1000a600:	40003000 	.word	0x40003000
1000a604:	1001a494 	.word	0x1001a494
1000a608:	1000c399 	.word	0x1000c399
1000a60c:	1000a4c5 	.word	0x1000a4c5

1000a610 <i2c_master_write_callback>:

void i2c_master_write_callback(void)
{
1000a610:	b580      	push	{r7, lr}
1000a612:	af00      	add	r7, sp, #0
    i2c_write_done = true;
1000a614:	4b02      	ldr	r3, [pc, #8]	; (1000a620 <i2c_master_write_callback+0x10>)
1000a616:	2201      	movs	r2, #1
1000a618:	701a      	strb	r2, [r3, #0]
}
1000a61a:	46c0      	nop			; (mov r8, r8)
1000a61c:	46bd      	mov	sp, r7
1000a61e:	bd80      	pop	{r7, pc}
1000a620:	1001a282 	.word	0x1001a282

1000a624 <i2c_master_read_callback>:

void i2c_master_read_callback(void)
{
1000a624:	b580      	push	{r7, lr}
1000a626:	af00      	add	r7, sp, #0
    i2c_read_done = true;
1000a628:	4b02      	ldr	r3, [pc, #8]	; (1000a634 <i2c_master_read_callback+0x10>)
1000a62a:	2201      	movs	r2, #1
1000a62c:	701a      	strb	r2, [r3, #0]
}
1000a62e:	46c0      	nop			; (mov r8, r8)
1000a630:	46bd      	mov	sp, r7
1000a632:	bd80      	pop	{r7, pc}
1000a634:	1001a33e 	.word	0x1001a33e

1000a638 <i2c_master_configure_callbacks>:

void i2c_master_configure_callbacks(void)
{
1000a638:	b580      	push	{r7, lr}
1000a63a:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[i2c_master_configure_callbacks]  configuring i2c callbacks...");
1000a63c:	4b13      	ldr	r3, [pc, #76]	; (1000a68c <i2c_master_configure_callbacks+0x54>)
1000a63e:	0018      	movs	r0, r3
1000a640:	4b13      	ldr	r3, [pc, #76]	; (1000a690 <i2c_master_configure_callbacks+0x58>)
1000a642:	4798      	blx	r3
1000a644:	4b13      	ldr	r3, [pc, #76]	; (1000a694 <i2c_master_configure_callbacks+0x5c>)
1000a646:	0018      	movs	r0, r3
1000a648:	4b13      	ldr	r3, [pc, #76]	; (1000a698 <i2c_master_configure_callbacks+0x60>)
1000a64a:	4798      	blx	r3
    i2c_write_done = false;
1000a64c:	4b13      	ldr	r3, [pc, #76]	; (1000a69c <i2c_master_configure_callbacks+0x64>)
1000a64e:	2200      	movs	r2, #0
1000a650:	701a      	strb	r2, [r3, #0]
    i2c_read_done = false;
1000a652:	4b13      	ldr	r3, [pc, #76]	; (1000a6a0 <i2c_master_configure_callbacks+0x68>)
1000a654:	2200      	movs	r2, #0
1000a656:	701a      	strb	r2, [r3, #0]

    i2c_master_register_callback(&i2c_master_mpu9250_instance, i2c_master_write_callback, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
1000a658:	4912      	ldr	r1, [pc, #72]	; (1000a6a4 <i2c_master_configure_callbacks+0x6c>)
1000a65a:	4b13      	ldr	r3, [pc, #76]	; (1000a6a8 <i2c_master_configure_callbacks+0x70>)
1000a65c:	2200      	movs	r2, #0
1000a65e:	0018      	movs	r0, r3
1000a660:	4b12      	ldr	r3, [pc, #72]	; (1000a6ac <i2c_master_configure_callbacks+0x74>)
1000a662:	4798      	blx	r3
    i2c_master_register_callback(&i2c_master_mpu9250_instance, i2c_master_read_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
1000a664:	4912      	ldr	r1, [pc, #72]	; (1000a6b0 <i2c_master_configure_callbacks+0x78>)
1000a666:	4b10      	ldr	r3, [pc, #64]	; (1000a6a8 <i2c_master_configure_callbacks+0x70>)
1000a668:	2201      	movs	r2, #1
1000a66a:	0018      	movs	r0, r3
1000a66c:	4b0f      	ldr	r3, [pc, #60]	; (1000a6ac <i2c_master_configure_callbacks+0x74>)
1000a66e:	4798      	blx	r3

    i2c_master_enable_callback(&i2c_master_mpu9250_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
1000a670:	4b0d      	ldr	r3, [pc, #52]	; (1000a6a8 <i2c_master_configure_callbacks+0x70>)
1000a672:	2100      	movs	r1, #0
1000a674:	0018      	movs	r0, r3
1000a676:	4b0f      	ldr	r3, [pc, #60]	; (1000a6b4 <i2c_master_configure_callbacks+0x7c>)
1000a678:	4798      	blx	r3
    i2c_master_enable_callback(&i2c_master_mpu9250_instance, I2C_MASTER_CALLBACK_READ_COMPLETE);
1000a67a:	4b0b      	ldr	r3, [pc, #44]	; (1000a6a8 <i2c_master_configure_callbacks+0x70>)
1000a67c:	2101      	movs	r1, #1
1000a67e:	0018      	movs	r0, r3
1000a680:	4b0c      	ldr	r3, [pc, #48]	; (1000a6b4 <i2c_master_configure_callbacks+0x7c>)
1000a682:	4798      	blx	r3
}
1000a684:	46c0      	nop			; (mov r8, r8)
1000a686:	46bd      	mov	sp, r7
1000a688:	bd80      	pop	{r7, pc}
1000a68a:	46c0      	nop			; (mov r8, r8)
1000a68c:	10018ae0 	.word	0x10018ae0
1000a690:	10017591 	.word	0x10017591
1000a694:	10018b18 	.word	0x10018b18
1000a698:	10017471 	.word	0x10017471
1000a69c:	1001a282 	.word	0x1001a282
1000a6a0:	1001a33e 	.word	0x1001a33e
1000a6a4:	1000a611 	.word	0x1000a611
1000a6a8:	1001a494 	.word	0x1001a494
1000a6ac:	1000c5dd 	.word	0x1000c5dd
1000a6b0:	1000a625 	.word	0x1000a625
1000a6b4:	1000a4e9 	.word	0x1000a4e9

1000a6b8 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000a6b8:	b580      	push	{r7, lr}
1000a6ba:	b082      	sub	sp, #8
1000a6bc:	af00      	add	r7, sp, #0
1000a6be:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a6c0:	46c0      	nop			; (mov r8, r8)
1000a6c2:	687b      	ldr	r3, [r7, #4]
1000a6c4:	2228      	movs	r2, #40	; 0x28
1000a6c6:	5c9b      	ldrb	r3, [r3, r2]
1000a6c8:	07db      	lsls	r3, r3, #31
1000a6ca:	0fdb      	lsrs	r3, r3, #31
1000a6cc:	b2db      	uxtb	r3, r3
1000a6ce:	2b00      	cmp	r3, #0
1000a6d0:	d1f7      	bne.n	1000a6c2 <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000a6d2:	46c0      	nop			; (mov r8, r8)
1000a6d4:	46bd      	mov	sp, r7
1000a6d6:	b002      	add	sp, #8
1000a6d8:	bd80      	pop	{r7, pc}
1000a6da:	46c0      	nop			; (mov r8, r8)

1000a6dc <i2c_disable>:
 *
 * \param[in,out] i2c_module Pointer to the driver instance to disable
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
1000a6dc:	b580      	push	{r7, lr}
1000a6de:	b082      	sub	sp, #8
1000a6e0:	af00      	add	r7, sp, #0
1000a6e2:	6078      	str	r0, [r7, #4]
	i2c_wait_for_idle(i2c_module);
1000a6e4:	687b      	ldr	r3, [r7, #4]
1000a6e6:	0018      	movs	r0, r3
1000a6e8:	4b04      	ldr	r3, [pc, #16]	; (1000a6fc <i2c_disable+0x20>)
1000a6ea:	4798      	blx	r3
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000a6ec:	687b      	ldr	r3, [r7, #4]
1000a6ee:	2200      	movs	r2, #0
1000a6f0:	751a      	strb	r2, [r3, #20]
}
1000a6f2:	46c0      	nop			; (mov r8, r8)
1000a6f4:	46bd      	mov	sp, r7
1000a6f6:	b002      	add	sp, #8
1000a6f8:	bd80      	pop	{r7, pc}
1000a6fa:	46c0      	nop			; (mov r8, r8)
1000a6fc:	1000a6b9 	.word	0x1000a6b9

1000a700 <sms_imu_configure_gpio>:

/* Configure GPIO for IMU
* - set aon pin for IMU data ready interrupt
*/
void sms_imu_configure_gpio(void)
{
1000a700:	b580      	push	{r7, lr}
1000a702:	b082      	sub	sp, #8
1000a704:	af00      	add	r7, sp, #0
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000a706:	1d3b      	adds	r3, r7, #4
1000a708:	0018      	movs	r0, r3
1000a70a:	4b10      	ldr	r3, [pc, #64]	; (1000a74c <sms_imu_configure_gpio+0x4c>)
1000a70c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a70e:	1d3b      	adds	r3, r7, #4
1000a710:	2200      	movs	r2, #0
1000a712:	701a      	strb	r2, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a714:	1d3b      	adds	r3, r7, #4
1000a716:	2202      	movs	r2, #2
1000a718:	705a      	strb	r2, [r3, #1]
    config_gpio_pin.aon_wakeup = true;
1000a71a:	1d3b      	adds	r3, r7, #4
1000a71c:	2201      	movs	r2, #1
1000a71e:	70da      	strb	r2, [r3, #3]
    if(gpio_pin_set_config(SMS_IMU_INTERRUPT_PIN, &config_gpio_pin) != STATUS_OK) {
1000a720:	1d3b      	adds	r3, r7, #4
1000a722:	0019      	movs	r1, r3
1000a724:	201d      	movs	r0, #29
1000a726:	4b0a      	ldr	r3, [pc, #40]	; (1000a750 <sms_imu_configure_gpio+0x50>)
1000a728:	4798      	blx	r3
    else {
        //DBG_LOG_DEV("[sms_imu_configure]\n\r  IMU interrupt pin set up correctly");
    }

    /* Pin output to monitor interruption */
    gpio_get_config_defaults(&config_gpio_pin);
1000a72a:	1d3b      	adds	r3, r7, #4
1000a72c:	0018      	movs	r0, r3
1000a72e:	4b07      	ldr	r3, [pc, #28]	; (1000a74c <sms_imu_configure_gpio+0x4c>)
1000a730:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a732:	1d3b      	adds	r3, r7, #4
1000a734:	2201      	movs	r2, #1
1000a736:	701a      	strb	r2, [r3, #0]
    gpio_pin_set_config(PIN_LP_GPIO_5, &config_gpio_pin);
1000a738:	1d3b      	adds	r3, r7, #4
1000a73a:	0019      	movs	r1, r3
1000a73c:	2005      	movs	r0, #5
1000a73e:	4b04      	ldr	r3, [pc, #16]	; (1000a750 <sms_imu_configure_gpio+0x50>)
1000a740:	4798      	blx	r3
}
1000a742:	46c0      	nop			; (mov r8, r8)
1000a744:	46bd      	mov	sp, r7
1000a746:	b002      	add	sp, #8
1000a748:	bd80      	pop	{r7, pc}
1000a74a:	46c0      	nop			; (mov r8, r8)
1000a74c:	1000b565 	.word	0x1000b565
1000a750:	1000b58d 	.word	0x1000b58d

1000a754 <sms_imu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_imu_register_callbacks(void)
{
1000a754:	b580      	push	{r7, lr}
1000a756:	af00      	add	r7, sp, #0
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_IMU_INTERRUPT_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
1000a758:	4b04      	ldr	r3, [pc, #16]	; (1000a76c <sms_imu_register_callbacks+0x18>)
1000a75a:	2202      	movs	r2, #2
1000a75c:	0019      	movs	r1, r3
1000a75e:	201d      	movs	r0, #29
1000a760:	4b03      	ldr	r3, [pc, #12]	; (1000a770 <sms_imu_register_callbacks+0x1c>)
1000a762:	4798      	blx	r3
}
1000a764:	46c0      	nop			; (mov r8, r8)
1000a766:	46bd      	mov	sp, r7
1000a768:	bd80      	pop	{r7, pc}
1000a76a:	46c0      	nop			; (mov r8, r8)
1000a76c:	1000a775 	.word	0x1000a775
1000a770:	1000bbd1 	.word	0x1000bbd1

1000a774 <sms_imu_interrupt_callback>:
    gpio_unregister_callback(SMS_IMU_INTERRUPT_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_imu_interrupt_callback(void)
{
1000a774:	b5b0      	push	{r4, r5, r7, lr}
1000a776:	af00      	add	r7, sp, #0
    //if(conn_status) {
    //gpio_pin_set_output_level(PIN_LP_GPIO_5, true);
    gpio_disable_callback(SMS_IMU_INTERRUPT_PIN);
1000a778:	201d      	movs	r0, #29
1000a77a:	4b07      	ldr	r3, [pc, #28]	; (1000a798 <sms_imu_interrupt_callback+0x24>)
1000a77c:	4798      	blx	r3
    sms_plf_int_state.source = SMS_CB_IMU_DRDY;
1000a77e:	4b07      	ldr	r3, [pc, #28]	; (1000a79c <sms_imu_interrupt_callback+0x28>)
1000a780:	2203      	movs	r2, #3
1000a782:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_IMU_INTERRUPT_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a784:	2300      	movs	r3, #0
1000a786:	2200      	movs	r2, #0
1000a788:	2102      	movs	r1, #2
1000a78a:	201d      	movs	r0, #29
1000a78c:	4c04      	ldr	r4, [pc, #16]	; (1000a7a0 <sms_imu_interrupt_callback+0x2c>)
1000a78e:	47a0      	blx	r4
    //}
}
1000a790:	46c0      	nop			; (mov r8, r8)
1000a792:	46bd      	mov	sp, r7
1000a794:	bdb0      	pop	{r4, r5, r7, pc}
1000a796:	46c0      	nop			; (mov r8, r8)
1000a798:	1000bf81 	.word	0x1000bf81
1000a79c:	1001a280 	.word	0x1001a280
1000a7a0:	10011995 	.word	0x10011995

1000a7a4 <sms_imu_startup>:

void sms_imu_startup(void) {
1000a7a4:	b580      	push	{r7, lr}
1000a7a6:	af00      	add	r7, sp, #0
    /* Initialize & configure MPU-9250 IMU */
    mpu9250_device.comm_error = false;
1000a7a8:	4b10      	ldr	r3, [pc, #64]	; (1000a7ec <sms_imu_startup+0x48>)
1000a7aa:	2200      	movs	r2, #0
1000a7ac:	705a      	strb	r2, [r3, #1]
    if(sms_imu_initialize() == 0) {
1000a7ae:	4b10      	ldr	r3, [pc, #64]	; (1000a7f0 <sms_imu_startup+0x4c>)
1000a7b0:	4798      	blx	r3
1000a7b2:	1e03      	subs	r3, r0, #0
1000a7b4:	d112      	bne.n	1000a7dc <sms_imu_startup+0x38>
        mpu9250_device.init_ok = true;
1000a7b6:	4b0d      	ldr	r3, [pc, #52]	; (1000a7ec <sms_imu_startup+0x48>)
1000a7b8:	2201      	movs	r2, #1
1000a7ba:	701a      	strb	r2, [r3, #0]
        if(sms_imu_configure() != 0) {
1000a7bc:	4b0d      	ldr	r3, [pc, #52]	; (1000a7f4 <sms_imu_startup+0x50>)
1000a7be:	4798      	blx	r3
1000a7c0:	1e03      	subs	r3, r0, #0
1000a7c2:	d00f      	beq.n	1000a7e4 <sms_imu_startup+0x40>
            mpu9250_device.comm_error = true;
1000a7c4:	4b09      	ldr	r3, [pc, #36]	; (1000a7ec <sms_imu_startup+0x48>)
1000a7c6:	2201      	movs	r2, #1
1000a7c8:	705a      	strb	r2, [r3, #1]
            DBG_LOG_DEV("[sms_imu_startup]  comm_error = true");
1000a7ca:	4b0b      	ldr	r3, [pc, #44]	; (1000a7f8 <sms_imu_startup+0x54>)
1000a7cc:	0018      	movs	r0, r3
1000a7ce:	4b0b      	ldr	r3, [pc, #44]	; (1000a7fc <sms_imu_startup+0x58>)
1000a7d0:	4798      	blx	r3
1000a7d2:	4b0b      	ldr	r3, [pc, #44]	; (1000a800 <sms_imu_startup+0x5c>)
1000a7d4:	0018      	movs	r0, r3
1000a7d6:	4b0b      	ldr	r3, [pc, #44]	; (1000a804 <sms_imu_startup+0x60>)
1000a7d8:	4798      	blx	r3
    }
    else {
        i2c_disable(&i2c_master_mpu9250_instance.hw);
        //DBG_LOG("[sms_imu_startup]  MPU-9250 initialization failed");
    }
}
1000a7da:	e003      	b.n	1000a7e4 <sms_imu_startup+0x40>
            mpu9250_device.comm_error = true;
            DBG_LOG_DEV("[sms_imu_startup]  comm_error = true");
        }
    }
    else {
        i2c_disable(&i2c_master_mpu9250_instance.hw);
1000a7dc:	4b0a      	ldr	r3, [pc, #40]	; (1000a808 <sms_imu_startup+0x64>)
1000a7de:	0018      	movs	r0, r3
1000a7e0:	4b0a      	ldr	r3, [pc, #40]	; (1000a80c <sms_imu_startup+0x68>)
1000a7e2:	4798      	blx	r3
        //DBG_LOG("[sms_imu_startup]  MPU-9250 initialization failed");
    }
}
1000a7e4:	46c0      	nop			; (mov r8, r8)
1000a7e6:	46bd      	mov	sp, r7
1000a7e8:	bd80      	pop	{r7, pc}
1000a7ea:	46c0      	nop			; (mov r8, r8)
1000a7ec:	1001a36c 	.word	0x1001a36c
1000a7f0:	1000a811 	.word	0x1000a811
1000a7f4:	1000a85d 	.word	0x1000a85d
1000a7f8:	10018b64 	.word	0x10018b64
1000a7fc:	10017591 	.word	0x10017591
1000a800:	10018b68 	.word	0x10018b68
1000a804:	10017471 	.word	0x10017471
1000a808:	1001a494 	.word	0x1001a494
1000a80c:	1000a6dd 	.word	0x1000a6dd

1000a810 <sms_imu_initialize>:

/* Initialize IMU... based on Invensense API */
int sms_imu_initialize(void)
{
1000a810:	b580      	push	{r7, lr}
1000a812:	b082      	sub	sp, #8
1000a814:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[sms_imu_initialize]\n\r  initializing IMU...");
1000a816:	4b0b      	ldr	r3, [pc, #44]	; (1000a844 <sms_imu_initialize+0x34>)
1000a818:	0018      	movs	r0, r3
1000a81a:	4b0b      	ldr	r3, [pc, #44]	; (1000a848 <sms_imu_initialize+0x38>)
1000a81c:	4798      	blx	r3
1000a81e:	4b0b      	ldr	r3, [pc, #44]	; (1000a84c <sms_imu_initialize+0x3c>)
1000a820:	0018      	movs	r0, r3
1000a822:	4b0b      	ldr	r3, [pc, #44]	; (1000a850 <sms_imu_initialize+0x40>)
1000a824:	4798      	blx	r3
    
    /* Initialize MPU with default settings and register data ready interrupt */
    struct int_param_s int_param;
    int_param.cb = sms_imu_interrupt_callback;
1000a826:	003b      	movs	r3, r7
1000a828:	4a0a      	ldr	r2, [pc, #40]	; (1000a854 <sms_imu_initialize+0x44>)
1000a82a:	601a      	str	r2, [r3, #0]
    int_param.pin = SMS_IMU_INTERRUPT_PIN;
1000a82c:	003b      	movs	r3, r7
1000a82e:	221d      	movs	r2, #29
1000a830:	605a      	str	r2, [r3, #4]
    return mpu_init(&int_param);
1000a832:	003b      	movs	r3, r7
1000a834:	0018      	movs	r0, r3
1000a836:	4b08      	ldr	r3, [pc, #32]	; (1000a858 <sms_imu_initialize+0x48>)
1000a838:	4798      	blx	r3
1000a83a:	0003      	movs	r3, r0
}
1000a83c:	0018      	movs	r0, r3
1000a83e:	46bd      	mov	sp, r7
1000a840:	b002      	add	sp, #8
1000a842:	bd80      	pop	{r7, pc}
1000a844:	10018b64 	.word	0x10018b64
1000a848:	10017591 	.word	0x10017591
1000a84c:	10018b90 	.word	0x10018b90
1000a850:	10017471 	.word	0x10017471
1000a854:	1000a775 	.word	0x1000a775
1000a858:	10008481 	.word	0x10008481

1000a85c <sms_imu_configure>:
* - enable selected DMP features
* - start DMP
* - enable GPIO interrupt callback
*/
int sms_imu_configure(void)
{
1000a85c:	b580      	push	{r7, lr}
1000a85e:	b082      	sub	sp, #8
1000a860:	af00      	add	r7, sp, #0
    DBG_LOG("  configuring IMU...");
1000a862:	4b2c      	ldr	r3, [pc, #176]	; (1000a914 <sms_imu_configure+0xb8>)
1000a864:	0018      	movs	r0, r3
1000a866:	4b2c      	ldr	r3, [pc, #176]	; (1000a918 <sms_imu_configure+0xbc>)
1000a868:	4798      	blx	r3
1000a86a:	4b2c      	ldr	r3, [pc, #176]	; (1000a91c <sms_imu_configure+0xc0>)
1000a86c:	0018      	movs	r0, r3
1000a86e:	4b2c      	ldr	r3, [pc, #176]	; (1000a920 <sms_imu_configure+0xc4>)
1000a870:	4798      	blx	r3
    
    if(mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL) != 0) return -1;
1000a872:	2078      	movs	r0, #120	; 0x78
1000a874:	4b2b      	ldr	r3, [pc, #172]	; (1000a924 <sms_imu_configure+0xc8>)
1000a876:	4798      	blx	r3
1000a878:	1e03      	subs	r3, r0, #0
1000a87a:	d002      	beq.n	1000a882 <sms_imu_configure+0x26>
1000a87c:	2301      	movs	r3, #1
1000a87e:	425b      	negs	r3, r3
1000a880:	e043      	b.n	1000a90a <sms_imu_configure+0xae>
    if(mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL) != 0) return -1;
1000a882:	2078      	movs	r0, #120	; 0x78
1000a884:	4b28      	ldr	r3, [pc, #160]	; (1000a928 <sms_imu_configure+0xcc>)
1000a886:	4798      	blx	r3
1000a888:	1e03      	subs	r3, r0, #0
1000a88a:	d002      	beq.n	1000a892 <sms_imu_configure+0x36>
1000a88c:	2301      	movs	r3, #1
1000a88e:	425b      	negs	r3, r3
1000a890:	e03b      	b.n	1000a90a <sms_imu_configure+0xae>
    if(mpu_set_sample_rate(4) != 0) return -1;
1000a892:	2004      	movs	r0, #4
1000a894:	4b25      	ldr	r3, [pc, #148]	; (1000a92c <sms_imu_configure+0xd0>)
1000a896:	4798      	blx	r3
1000a898:	1e03      	subs	r3, r0, #0
1000a89a:	d002      	beq.n	1000a8a2 <sms_imu_configure+0x46>
1000a89c:	2301      	movs	r3, #1
1000a89e:	425b      	negs	r3, r3
1000a8a0:	e033      	b.n	1000a90a <sms_imu_configure+0xae>

    uint16_t gyro_rate, gyro_fsr;
    uint8_t accel_fsr;
    if(mpu_get_sample_rate(&gyro_rate) != 0) return -1;
1000a8a2:	1dbb      	adds	r3, r7, #6
1000a8a4:	0018      	movs	r0, r3
1000a8a6:	4b22      	ldr	r3, [pc, #136]	; (1000a930 <sms_imu_configure+0xd4>)
1000a8a8:	4798      	blx	r3
1000a8aa:	1e03      	subs	r3, r0, #0
1000a8ac:	d002      	beq.n	1000a8b4 <sms_imu_configure+0x58>
1000a8ae:	2301      	movs	r3, #1
1000a8b0:	425b      	negs	r3, r3
1000a8b2:	e02a      	b.n	1000a90a <sms_imu_configure+0xae>
    if(mpu_get_gyro_fsr(&gyro_fsr) != 0) return -1;
1000a8b4:	1d3b      	adds	r3, r7, #4
1000a8b6:	0018      	movs	r0, r3
1000a8b8:	4b1e      	ldr	r3, [pc, #120]	; (1000a934 <sms_imu_configure+0xd8>)
1000a8ba:	4798      	blx	r3
1000a8bc:	1e03      	subs	r3, r0, #0
1000a8be:	d002      	beq.n	1000a8c6 <sms_imu_configure+0x6a>
1000a8c0:	2301      	movs	r3, #1
1000a8c2:	425b      	negs	r3, r3
1000a8c4:	e021      	b.n	1000a90a <sms_imu_configure+0xae>
    if(mpu_get_accel_fsr(&accel_fsr) != 0) return -1;
1000a8c6:	1cfb      	adds	r3, r7, #3
1000a8c8:	0018      	movs	r0, r3
1000a8ca:	4b1b      	ldr	r3, [pc, #108]	; (1000a938 <sms_imu_configure+0xdc>)
1000a8cc:	4798      	blx	r3
1000a8ce:	1e03      	subs	r3, r0, #0
1000a8d0:	d002      	beq.n	1000a8d8 <sms_imu_configure+0x7c>
1000a8d2:	2301      	movs	r3, #1
1000a8d4:	425b      	negs	r3, r3
1000a8d6:	e018      	b.n	1000a90a <sms_imu_configure+0xae>
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);

    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
1000a8d8:	4b18      	ldr	r3, [pc, #96]	; (1000a93c <sms_imu_configure+0xe0>)
1000a8da:	22c0      	movs	r2, #192	; 0xc0
1000a8dc:	839a      	strh	r2, [r3, #28]
    if(dmp_enable_feature(hal.dmp_features) != 0) {
1000a8de:	4b17      	ldr	r3, [pc, #92]	; (1000a93c <sms_imu_configure+0xe0>)
1000a8e0:	8b9b      	ldrh	r3, [r3, #28]
1000a8e2:	0018      	movs	r0, r3
1000a8e4:	4b16      	ldr	r3, [pc, #88]	; (1000a940 <sms_imu_configure+0xe4>)
1000a8e6:	4798      	blx	r3
1000a8e8:	1e03      	subs	r3, r0, #0
1000a8ea:	d00a      	beq.n	1000a902 <sms_imu_configure+0xa6>
        DBG_LOG_DEV("[sms_imu_configure]  error while enabling dmp features");
1000a8ec:	4b09      	ldr	r3, [pc, #36]	; (1000a914 <sms_imu_configure+0xb8>)
1000a8ee:	0018      	movs	r0, r3
1000a8f0:	4b09      	ldr	r3, [pc, #36]	; (1000a918 <sms_imu_configure+0xbc>)
1000a8f2:	4798      	blx	r3
1000a8f4:	4b13      	ldr	r3, [pc, #76]	; (1000a944 <sms_imu_configure+0xe8>)
1000a8f6:	0018      	movs	r0, r3
1000a8f8:	4b09      	ldr	r3, [pc, #36]	; (1000a920 <sms_imu_configure+0xc4>)
1000a8fa:	4798      	blx	r3
        return -1;
1000a8fc:	2301      	movs	r3, #1
1000a8fe:	425b      	negs	r3, r3
1000a900:	e003      	b.n	1000a90a <sms_imu_configure+0xae>
    }        
    gpio_enable_callback(SMS_IMU_INTERRUPT_PIN);
1000a902:	201d      	movs	r0, #29
1000a904:	4b10      	ldr	r3, [pc, #64]	; (1000a948 <sms_imu_configure+0xec>)
1000a906:	4798      	blx	r3
    //if(mpu_set_dmp_state(1) != 0) {
        //DBG_LOG_DEV("[sms_imu_configure]  error while setting dmp state");
        //return -1;
    //}        

    return 0;
1000a908:	2300      	movs	r3, #0
}
1000a90a:	0018      	movs	r0, r3
1000a90c:	46bd      	mov	sp, r7
1000a90e:	b002      	add	sp, #8
1000a910:	bd80      	pop	{r7, pc}
1000a912:	46c0      	nop			; (mov r8, r8)
1000a914:	10018b64 	.word	0x10018b64
1000a918:	10017591 	.word	0x10017591
1000a91c:	10018bbc 	.word	0x10018bbc
1000a920:	10017471 	.word	0x10017471
1000a924:	10008fb5 	.word	0x10008fb5
1000a928:	10008ef5 	.word	0x10008ef5
1000a92c:	10008d39 	.word	0x10008d39
1000a930:	10008d09 	.word	0x10008d09
1000a934:	100089ed 	.word	0x100089ed
1000a938:	10008b19 	.word	0x10008b19
1000a93c:	10019b30 	.word	0x10019b30
1000a940:	10009d6d 	.word	0x10009d6d
1000a944:	10018bd4 	.word	0x10018bd4
1000a948:	1000beb9 	.word	0x1000beb9

1000a94c <sms_imu_service_init>:

    return 0;
}

void sms_imu_service_init(gatt_service_handler_t *sms_imu_serv, uint8_t *sms_imu_value)
{
1000a94c:	b580      	push	{r7, lr}
1000a94e:	b082      	sub	sp, #8
1000a950:	af00      	add	r7, sp, #0
1000a952:	6078      	str	r0, [r7, #4]
1000a954:	6039      	str	r1, [r7, #0]
    //SMS button service characteristic
    sms_imu_serv->serv_handle = 0;
1000a956:	687b      	ldr	r3, [r7, #4]
1000a958:	2200      	movs	r2, #0
1000a95a:	825a      	strh	r2, [r3, #18]
    sms_imu_serv->serv_uuid.type = AT_BLE_UUID_128;
1000a95c:	687b      	ldr	r3, [r7, #4]
1000a95e:	2202      	movs	r2, #2
1000a960:	701a      	strb	r2, [r3, #0]
    sms_imu_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
1000a962:	687b      	ldr	r3, [r7, #4]
1000a964:	2200      	movs	r2, #0
1000a966:	705a      	strb	r2, [r3, #1]
    sms_imu_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a968:	687b      	ldr	r3, [r7, #4]
1000a96a:	2200      	movs	r2, #0
1000a96c:	709a      	strb	r2, [r3, #2]
    sms_imu_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a96e:	687b      	ldr	r3, [r7, #4]
1000a970:	2257      	movs	r2, #87	; 0x57
1000a972:	70da      	strb	r2, [r3, #3]
    sms_imu_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a974:	687b      	ldr	r3, [r7, #4]
1000a976:	221c      	movs	r2, #28
1000a978:	711a      	strb	r2, [r3, #4]
    sms_imu_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2) & 0xFF);
1000a97a:	687b      	ldr	r3, [r7, #4]
1000a97c:	2200      	movs	r2, #0
1000a97e:	715a      	strb	r2, [r3, #5]
    sms_imu_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a980:	687b      	ldr	r3, [r7, #4]
1000a982:	2200      	movs	r2, #0
1000a984:	719a      	strb	r2, [r3, #6]
    sms_imu_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a986:	687b      	ldr	r3, [r7, #4]
1000a988:	22be      	movs	r2, #190	; 0xbe
1000a98a:	71da      	strb	r2, [r3, #7]
    sms_imu_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a98c:	687b      	ldr	r3, [r7, #4]
1000a98e:	225a      	movs	r2, #90	; 0x5a
1000a990:	721a      	strb	r2, [r3, #8]
    sms_imu_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3) & 0xFF);
1000a992:	687b      	ldr	r3, [r7, #4]
1000a994:	2200      	movs	r2, #0
1000a996:	725a      	strb	r2, [r3, #9]
    sms_imu_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3 >> 8) & 0xFF);
1000a998:	687b      	ldr	r3, [r7, #4]
1000a99a:	2200      	movs	r2, #0
1000a99c:	729a      	strb	r2, [r3, #10]
    sms_imu_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3 >> 16) & 0xFF);
1000a99e:	687b      	ldr	r3, [r7, #4]
1000a9a0:	2230      	movs	r2, #48	; 0x30
1000a9a2:	72da      	strb	r2, [r3, #11]
    sms_imu_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3 >> 24) & 0xFF);
1000a9a4:	687b      	ldr	r3, [r7, #4]
1000a9a6:	2250      	movs	r2, #80	; 0x50
1000a9a8:	731a      	strb	r2, [r3, #12]
    sms_imu_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
1000a9aa:	687b      	ldr	r3, [r7, #4]
1000a9ac:	2200      	movs	r2, #0
1000a9ae:	735a      	strb	r2, [r3, #13]
    sms_imu_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
1000a9b0:	687b      	ldr	r3, [r7, #4]
1000a9b2:	2200      	movs	r2, #0
1000a9b4:	739a      	strb	r2, [r3, #14]
    sms_imu_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
1000a9b6:	687b      	ldr	r3, [r7, #4]
1000a9b8:	2211      	movs	r2, #17
1000a9ba:	73da      	strb	r2, [r3, #15]
    sms_imu_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
1000a9bc:	687b      	ldr	r3, [r7, #4]
1000a9be:	2211      	movs	r2, #17
1000a9c0:	741a      	strb	r2, [r3, #16]
    
    sms_imu_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000a9c2:	687b      	ldr	r3, [r7, #4]
1000a9c4:	2212      	movs	r2, #18
1000a9c6:	851a      	strh	r2, [r3, #40]	; 0x28
    sms_imu_serv->serv_chars.init_value = sms_imu_value;             /* value */
1000a9c8:	687b      	ldr	r3, [r7, #4]
1000a9ca:	683a      	ldr	r2, [r7, #0]
1000a9cc:	62da      	str	r2, [r3, #44]	; 0x2c
    sms_imu_serv->serv_chars.value_init_len = 12 * sizeof(uint8_t);
1000a9ce:	687b      	ldr	r3, [r7, #4]
1000a9d0:	220c      	movs	r2, #12
1000a9d2:	861a      	strh	r2, [r3, #48]	; 0x30
    sms_imu_serv->serv_chars.value_max_len = 12 * sizeof(uint8_t);
1000a9d4:	687b      	ldr	r3, [r7, #4]
1000a9d6:	220c      	movs	r2, #12
1000a9d8:	865a      	strh	r2, [r3, #50]	; 0x32
    sms_imu_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
1000a9da:	687b      	ldr	r3, [r7, #4]
1000a9dc:	2234      	movs	r2, #52	; 0x34
1000a9de:	2111      	movs	r1, #17
1000a9e0:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000a9e2:	687b      	ldr	r3, [r7, #4]
1000a9e4:	2200      	movs	r2, #0
1000a9e6:	639a      	str	r2, [r3, #56]	; 0x38
    sms_imu_serv->serv_chars.user_desc_len = 0;
1000a9e8:	687b      	ldr	r3, [r7, #4]
1000a9ea:	2200      	movs	r2, #0
1000a9ec:	879a      	strh	r2, [r3, #60]	; 0x3c
    sms_imu_serv->serv_chars.user_desc_max_len = 0;
1000a9ee:	687b      	ldr	r3, [r7, #4]
1000a9f0:	2200      	movs	r2, #0
1000a9f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    sms_imu_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000a9f4:	687b      	ldr	r3, [r7, #4]
1000a9f6:	2244      	movs	r2, #68	; 0x44
1000a9f8:	2100      	movs	r1, #0
1000a9fa:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000a9fc:	687b      	ldr	r3, [r7, #4]
1000a9fe:	2245      	movs	r2, #69	; 0x45
1000aa00:	2100      	movs	r1, #0
1000aa02:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000aa04:	687b      	ldr	r3, [r7, #4]
1000aa06:	2246      	movs	r2, #70	; 0x46
1000aa08:	2100      	movs	r1, #0
1000aa0a:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
1000aa0c:	687b      	ldr	r3, [r7, #4]
1000aa0e:	2248      	movs	r2, #72	; 0x48
1000aa10:	2100      	movs	r1, #0
1000aa12:	5299      	strh	r1, [r3, r2]
    sms_imu_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000aa14:	687b      	ldr	r3, [r7, #4]
1000aa16:	224a      	movs	r2, #74	; 0x4a
1000aa18:	2100      	movs	r1, #0
1000aa1a:	5299      	strh	r1, [r3, r2]
    sms_imu_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
1000aa1c:	687b      	ldr	r3, [r7, #4]
1000aa1e:	224c      	movs	r2, #76	; 0x4c
1000aa20:	2100      	movs	r1, #0
1000aa22:	5299      	strh	r1, [r3, r2]
    //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
    //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
    //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
    //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    
    sms_imu_serv->serv_chars.presentation_format = NULL;       /* presentation format */
1000aa24:	687b      	ldr	r3, [r7, #4]
1000aa26:	2200      	movs	r2, #0
1000aa28:	641a      	str	r2, [r3, #64]	; 0x40

    //DBG_LOG("[sms_imu_service_init]\n\r  setting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)sms_imu_serv->serv_uuid.uuid, sms_imu_serv->serv_handle, sms_imu_serv->serv_chars.uuid.uuid[1], sms_imu_serv->serv_chars.uuid.uuid[0], sms_imu_serv->serv_chars.value_init_len);
}
1000aa2a:	46c0      	nop			; (mov r8, r8)
1000aa2c:	46bd      	mov	sp, r7
1000aa2e:	b002      	add	sp, #8
1000aa30:	bd80      	pop	{r7, pc}
1000aa32:	46c0      	nop			; (mov r8, r8)

1000aa34 <sms_imu_primary_service_define>:

at_ble_status_t sms_imu_primary_service_define(gatt_service_handler_t *sms_service)
{
1000aa34:	b590      	push	{r4, r7, lr}
1000aa36:	b085      	sub	sp, #20
1000aa38:	af02      	add	r7, sp, #8
1000aa3a:	6078      	str	r0, [r7, #4]
    //DBG_LOG("[sms_imu_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_service->serv_uuid.uuid,
    //sms_service->serv_handle,
    //sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
    //sms_service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
1000aa3c:	6878      	ldr	r0, [r7, #4]
1000aa3e:	687b      	ldr	r3, [r7, #4]
1000aa40:	3312      	adds	r3, #18
1000aa42:	0019      	movs	r1, r3
1000aa44:	687b      	ldr	r3, [r7, #4]
1000aa46:	3314      	adds	r3, #20
1000aa48:	2201      	movs	r2, #1
1000aa4a:	9201      	str	r2, [sp, #4]
1000aa4c:	9300      	str	r3, [sp, #0]
1000aa4e:	2300      	movs	r3, #0
1000aa50:	2200      	movs	r2, #0
1000aa52:	4c03      	ldr	r4, [pc, #12]	; (1000aa60 <sms_imu_primary_service_define+0x2c>)
1000aa54:	47a0      	blx	r4
1000aa56:	0003      	movs	r3, r0
}
1000aa58:	0018      	movs	r0, r3
1000aa5a:	46bd      	mov	sp, r7
1000aa5c:	b003      	add	sp, #12
1000aa5e:	bd90      	pop	{r4, r7, pc}
1000aa60:	10013721 	.word	0x10013721

1000aa64 <sms_pressure_service_init>:
    }
}


void sms_pressure_service_init(gatt_service_handler_t *sms_pressure_serv, uint8_t *sms_pressure_value)
{
1000aa64:	b580      	push	{r7, lr}
1000aa66:	b082      	sub	sp, #8
1000aa68:	af00      	add	r7, sp, #0
1000aa6a:	6078      	str	r0, [r7, #4]
1000aa6c:	6039      	str	r1, [r7, #0]
    //SMS button service characteristic
    sms_pressure_serv->serv_handle = 0;
1000aa6e:	687b      	ldr	r3, [r7, #4]
1000aa70:	2200      	movs	r2, #0
1000aa72:	825a      	strh	r2, [r3, #18]
    sms_pressure_serv->serv_uuid.type = AT_BLE_UUID_128;
1000aa74:	687b      	ldr	r3, [r7, #4]
1000aa76:	2202      	movs	r2, #2
1000aa78:	701a      	strb	r2, [r3, #0]
    sms_pressure_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000aa7a:	687b      	ldr	r3, [r7, #4]
1000aa7c:	2200      	movs	r2, #0
1000aa7e:	705a      	strb	r2, [r3, #1]
    sms_pressure_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000aa80:	687b      	ldr	r3, [r7, #4]
1000aa82:	2200      	movs	r2, #0
1000aa84:	709a      	strb	r2, [r3, #2]
    sms_pressure_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000aa86:	687b      	ldr	r3, [r7, #4]
1000aa88:	2257      	movs	r2, #87	; 0x57
1000aa8a:	70da      	strb	r2, [r3, #3]
    sms_pressure_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000aa8c:	687b      	ldr	r3, [r7, #4]
1000aa8e:	221c      	movs	r2, #28
1000aa90:	711a      	strb	r2, [r3, #4]
    sms_pressure_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
1000aa92:	687b      	ldr	r3, [r7, #4]
1000aa94:	2200      	movs	r2, #0
1000aa96:	715a      	strb	r2, [r3, #5]
    sms_pressure_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000aa98:	687b      	ldr	r3, [r7, #4]
1000aa9a:	2200      	movs	r2, #0
1000aa9c:	719a      	strb	r2, [r3, #6]
    sms_pressure_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000aa9e:	687b      	ldr	r3, [r7, #4]
1000aaa0:	22be      	movs	r2, #190	; 0xbe
1000aaa2:	71da      	strb	r2, [r3, #7]
    sms_pressure_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000aaa4:	687b      	ldr	r3, [r7, #4]
1000aaa6:	225a      	movs	r2, #90	; 0x5a
1000aaa8:	721a      	strb	r2, [r3, #8]
    sms_pressure_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
1000aaaa:	687b      	ldr	r3, [r7, #4]
1000aaac:	2200      	movs	r2, #0
1000aaae:	725a      	strb	r2, [r3, #9]
    sms_pressure_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
1000aab0:	687b      	ldr	r3, [r7, #4]
1000aab2:	2200      	movs	r2, #0
1000aab4:	729a      	strb	r2, [r3, #10]
    sms_pressure_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000aab6:	687b      	ldr	r3, [r7, #4]
1000aab8:	2230      	movs	r2, #48	; 0x30
1000aaba:	72da      	strb	r2, [r3, #11]
    sms_pressure_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000aabc:	687b      	ldr	r3, [r7, #4]
1000aabe:	2250      	movs	r2, #80	; 0x50
1000aac0:	731a      	strb	r2, [r3, #12]
    sms_pressure_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
1000aac2:	687b      	ldr	r3, [r7, #4]
1000aac4:	2200      	movs	r2, #0
1000aac6:	735a      	strb	r2, [r3, #13]
    sms_pressure_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
1000aac8:	687b      	ldr	r3, [r7, #4]
1000aaca:	2200      	movs	r2, #0
1000aacc:	739a      	strb	r2, [r3, #14]
    sms_pressure_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000aace:	687b      	ldr	r3, [r7, #4]
1000aad0:	22ee      	movs	r2, #238	; 0xee
1000aad2:	73da      	strb	r2, [r3, #15]
    sms_pressure_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
1000aad4:	687b      	ldr	r3, [r7, #4]
1000aad6:	22ee      	movs	r2, #238	; 0xee
1000aad8:	741a      	strb	r2, [r3, #16]
    
    sms_pressure_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000aada:	687b      	ldr	r3, [r7, #4]
1000aadc:	2212      	movs	r2, #18
1000aade:	851a      	strh	r2, [r3, #40]	; 0x28
    sms_pressure_serv->serv_chars.init_value = sms_pressure_value;             /* value */
1000aae0:	687b      	ldr	r3, [r7, #4]
1000aae2:	683a      	ldr	r2, [r7, #0]
1000aae4:	62da      	str	r2, [r3, #44]	; 0x2c
    sms_pressure_serv->serv_chars.value_init_len = 8 * sizeof(uint8_t);
1000aae6:	687b      	ldr	r3, [r7, #4]
1000aae8:	2208      	movs	r2, #8
1000aaea:	861a      	strh	r2, [r3, #48]	; 0x30
    sms_pressure_serv->serv_chars.value_max_len = 8 * sizeof(uint8_t);
1000aaec:	687b      	ldr	r3, [r7, #4]
1000aaee:	2208      	movs	r2, #8
1000aaf0:	865a      	strh	r2, [r3, #50]	; 0x32
    sms_pressure_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
1000aaf2:	687b      	ldr	r3, [r7, #4]
1000aaf4:	2234      	movs	r2, #52	; 0x34
1000aaf6:	2111      	movs	r1, #17
1000aaf8:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000aafa:	687b      	ldr	r3, [r7, #4]
1000aafc:	2200      	movs	r2, #0
1000aafe:	639a      	str	r2, [r3, #56]	; 0x38
    sms_pressure_serv->serv_chars.user_desc_len = 0;
1000ab00:	687b      	ldr	r3, [r7, #4]
1000ab02:	2200      	movs	r2, #0
1000ab04:	879a      	strh	r2, [r3, #60]	; 0x3c
    sms_pressure_serv->serv_chars.user_desc_max_len = 0;
1000ab06:	687b      	ldr	r3, [r7, #4]
1000ab08:	2200      	movs	r2, #0
1000ab0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    sms_pressure_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000ab0c:	687b      	ldr	r3, [r7, #4]
1000ab0e:	2244      	movs	r2, #68	; 0x44
1000ab10:	2100      	movs	r1, #0
1000ab12:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000ab14:	687b      	ldr	r3, [r7, #4]
1000ab16:	2245      	movs	r2, #69	; 0x45
1000ab18:	2100      	movs	r1, #0
1000ab1a:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000ab1c:	687b      	ldr	r3, [r7, #4]
1000ab1e:	2246      	movs	r2, #70	; 0x46
1000ab20:	2100      	movs	r1, #0
1000ab22:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
1000ab24:	687b      	ldr	r3, [r7, #4]
1000ab26:	2248      	movs	r2, #72	; 0x48
1000ab28:	2100      	movs	r1, #0
1000ab2a:	5299      	strh	r1, [r3, r2]
    sms_pressure_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000ab2c:	687b      	ldr	r3, [r7, #4]
1000ab2e:	224a      	movs	r2, #74	; 0x4a
1000ab30:	2100      	movs	r1, #0
1000ab32:	5299      	strh	r1, [r3, r2]
    sms_pressure_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
1000ab34:	687b      	ldr	r3, [r7, #4]
1000ab36:	224c      	movs	r2, #76	; 0x4c
1000ab38:	2100      	movs	r1, #0
1000ab3a:	5299      	strh	r1, [r3, r2]
    //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
    //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
    //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
    //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    
    sms_pressure_serv->serv_chars.presentation_format = NULL;       /* presentation format */
1000ab3c:	687b      	ldr	r3, [r7, #4]
1000ab3e:	2200      	movs	r2, #0
1000ab40:	641a      	str	r2, [r3, #64]	; 0x40
    //DBG_LOG("[sms_imu_service_init]  setting primary service");
    //DBG_LOG("  - uuid: 0x%02x", (unsigned int)sms_pressure_serv->serv_uuid.uuid);
    //DBG_LOG("  - handle: 0x%02x", sms_pressure_serv->serv_handle);
    //DBG_LOG("  - char uuid: 0x%02x%02x", sms_pressure_serv->serv_chars.uuid.uuid[1], sms_pressure_serv->serv_chars.uuid.uuid[0]);
    //DBG_LOG("  - char init length: %d", sms_pressure_serv->serv_chars.value_init_len);
}
1000ab42:	46c0      	nop			; (mov r8, r8)
1000ab44:	46bd      	mov	sp, r7
1000ab46:	b002      	add	sp, #8
1000ab48:	bd80      	pop	{r7, pc}
1000ab4a:	46c0      	nop			; (mov r8, r8)

1000ab4c <sms_pressure_primary_service_define>:

at_ble_status_t sms_pressure_primary_service_define(gatt_service_handler_t *sms_service)
{
1000ab4c:	b590      	push	{r4, r7, lr}
1000ab4e:	b085      	sub	sp, #20
1000ab50:	af02      	add	r7, sp, #8
1000ab52:	6078      	str	r0, [r7, #4]
    //DBG_LOG("[sms_imu_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_service->serv_uuid.uuid,
    //sms_service->serv_handle,
    //sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
    //sms_service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
1000ab54:	6878      	ldr	r0, [r7, #4]
1000ab56:	687b      	ldr	r3, [r7, #4]
1000ab58:	3312      	adds	r3, #18
1000ab5a:	0019      	movs	r1, r3
1000ab5c:	687b      	ldr	r3, [r7, #4]
1000ab5e:	3314      	adds	r3, #20
1000ab60:	2201      	movs	r2, #1
1000ab62:	9201      	str	r2, [sp, #4]
1000ab64:	9300      	str	r3, [sp, #0]
1000ab66:	2300      	movs	r3, #0
1000ab68:	2200      	movs	r2, #0
1000ab6a:	4c03      	ldr	r4, [pc, #12]	; (1000ab78 <sms_pressure_primary_service_define+0x2c>)
1000ab6c:	47a0      	blx	r4
1000ab6e:	0003      	movs	r3, r0
}
1000ab70:	0018      	movs	r0, r3
1000ab72:	46bd      	mov	sp, r7
1000ab74:	b003      	add	sp, #12
1000ab76:	bd90      	pop	{r4, r7, pc}
1000ab78:	10013721 	.word	0x10013721

1000ab7c <spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void spi_master_configure(void)
{
1000ab7c:	b580      	push	{r7, lr}
1000ab7e:	b08c      	sub	sp, #48	; 0x30
1000ab80:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[spi_master_configure]  configuring SPI masters and attaching slaves...");
1000ab82:	4b29      	ldr	r3, [pc, #164]	; (1000ac28 <spi_master_configure+0xac>)
1000ab84:	0018      	movs	r0, r3
1000ab86:	4b29      	ldr	r3, [pc, #164]	; (1000ac2c <spi_master_configure+0xb0>)
1000ab88:	4798      	blx	r3
1000ab8a:	4b29      	ldr	r3, [pc, #164]	; (1000ac30 <spi_master_configure+0xb4>)
1000ab8c:	0018      	movs	r0, r3
1000ab8e:	4b29      	ldr	r3, [pc, #164]	; (1000ac34 <spi_master_configure+0xb8>)
1000ab90:	4798      	blx	r3

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000ab92:	1d3b      	adds	r3, r7, #4
1000ab94:	0018      	movs	r0, r3
1000ab96:	4b28      	ldr	r3, [pc, #160]	; (1000ac38 <spi_master_configure+0xbc>)
1000ab98:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SPI_SLAVE_MS58_SS_PIN;
1000ab9a:	1d3b      	adds	r3, r7, #4
1000ab9c:	2210      	movs	r2, #16
1000ab9e:	701a      	strb	r2, [r3, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000aba0:	1d3a      	adds	r2, r7, #4
1000aba2:	4b26      	ldr	r3, [pc, #152]	; (1000ac3c <spi_master_configure+0xc0>)
1000aba4:	0011      	movs	r1, r2
1000aba6:	0018      	movs	r0, r3
1000aba8:	4b25      	ldr	r3, [pc, #148]	; (1000ac40 <spi_master_configure+0xc4>)
1000abaa:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000abac:	2308      	movs	r3, #8
1000abae:	18fb      	adds	r3, r7, r3
1000abb0:	0018      	movs	r0, r3
1000abb2:	4b24      	ldr	r3, [pc, #144]	; (1000ac44 <spi_master_configure+0xc8>)
1000abb4:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000abb6:	2308      	movs	r3, #8
1000abb8:	18fb      	adds	r3, r7, r3
1000abba:	2268      	movs	r2, #104	; 0x68
1000abbc:	711a      	strb	r2, [r3, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000abbe:	2308      	movs	r3, #8
1000abc0:	18fb      	adds	r3, r7, r3
1000abc2:	2200      	movs	r2, #0
1000abc4:	709a      	strb	r2, [r3, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000abc6:	2308      	movs	r3, #8
1000abc8:	18fb      	adds	r3, r7, r3
1000abca:	2211      	movs	r2, #17
1000abcc:	609a      	str	r2, [r3, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000abce:	2308      	movs	r3, #8
1000abd0:	18fb      	adds	r3, r7, r3
1000abd2:	2204      	movs	r2, #4
1000abd4:	619a      	str	r2, [r3, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000abd6:	2308      	movs	r3, #8
1000abd8:	18fb      	adds	r3, r7, r3
1000abda:	2213      	movs	r2, #19
1000abdc:	60da      	str	r2, [r3, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000abde:	2308      	movs	r3, #8
1000abe0:	18fb      	adds	r3, r7, r3
1000abe2:	2204      	movs	r2, #4
1000abe4:	61da      	str	r2, [r3, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000abe6:	2308      	movs	r3, #8
1000abe8:	18fb      	adds	r3, r7, r3
1000abea:	2201      	movs	r2, #1
1000abec:	4252      	negs	r2, r2
1000abee:	611a      	str	r2, [r3, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000abf0:	2308      	movs	r3, #8
1000abf2:	18fb      	adds	r3, r7, r3
1000abf4:	2201      	movs	r2, #1
1000abf6:	4252      	negs	r2, r2
1000abf8:	621a      	str	r2, [r3, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000abfa:	2308      	movs	r3, #8
1000abfc:	18fb      	adds	r3, r7, r3
1000abfe:	2212      	movs	r2, #18
1000ac00:	615a      	str	r2, [r3, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000ac02:	2308      	movs	r3, #8
1000ac04:	18fb      	adds	r3, r7, r3
1000ac06:	2204      	movs	r2, #4
1000ac08:	625a      	str	r2, [r3, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000ac0a:	2308      	movs	r3, #8
1000ac0c:	18fa      	adds	r2, r7, r3
1000ac0e:	490e      	ldr	r1, [pc, #56]	; (1000ac48 <spi_master_configure+0xcc>)
1000ac10:	4b0e      	ldr	r3, [pc, #56]	; (1000ac4c <spi_master_configure+0xd0>)
1000ac12:	0018      	movs	r0, r3
1000ac14:	4b0e      	ldr	r3, [pc, #56]	; (1000ac50 <spi_master_configure+0xd4>)
1000ac16:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000ac18:	4b0c      	ldr	r3, [pc, #48]	; (1000ac4c <spi_master_configure+0xd0>)
1000ac1a:	0018      	movs	r0, r3
1000ac1c:	4b0d      	ldr	r3, [pc, #52]	; (1000ac54 <spi_master_configure+0xd8>)
1000ac1e:	4798      	blx	r3
}
1000ac20:	46c0      	nop			; (mov r8, r8)
1000ac22:	46bd      	mov	sp, r7
1000ac24:	b00c      	add	sp, #48	; 0x30
1000ac26:	bd80      	pop	{r7, pc}
1000ac28:	10018cf4 	.word	0x10018cf4
1000ac2c:	10017591 	.word	0x10017591
1000ac30:	10018cf8 	.word	0x10018cf8
1000ac34:	10017471 	.word	0x10017471
1000ac38:	1000cb65 	.word	0x1000cb65
1000ac3c:	1001a3d4 	.word	0x1001a3d4
1000ac40:	1000cbe9 	.word	0x1000cbe9
1000ac44:	1000cb89 	.word	0x1000cb89
1000ac48:	40007000 	.word	0x40007000
1000ac4c:	1001a3f8 	.word	0x1001a3f8
1000ac50:	1000cca9 	.word	0x1000cca9
1000ac54:	1000cea5 	.word	0x1000cea5

1000ac58 <spi_master_transceived_callback>:

/* SPI master transceive callback:
 * - set spi_transceived_done flag
 */
void spi_master_transceived_callback(struct spi_module *const module)
{
1000ac58:	b580      	push	{r7, lr}
1000ac5a:	b082      	sub	sp, #8
1000ac5c:	af00      	add	r7, sp, #0
1000ac5e:	6078      	str	r0, [r7, #4]
    spi_transceived_done = true;
1000ac60:	4b03      	ldr	r3, [pc, #12]	; (1000ac70 <spi_master_transceived_callback+0x18>)
1000ac62:	2201      	movs	r2, #1
1000ac64:	701a      	strb	r2, [r3, #0]
}
1000ac66:	46c0      	nop			; (mov r8, r8)
1000ac68:	46bd      	mov	sp, r7
1000ac6a:	b002      	add	sp, #8
1000ac6c:	bd80      	pop	{r7, pc}
1000ac6e:	46c0      	nop			; (mov r8, r8)
1000ac70:	1001a295 	.word	0x1001a295

1000ac74 <spi_master_configure_callbacks>:
/* Configure SPI master callbacks:
 * - register buffer transceive callback for each spi master instance
 * - enable callbacks
 */
void spi_master_configure_callbacks(void)
{
1000ac74:	b580      	push	{r7, lr}
1000ac76:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[spi_master_configure_callbacks]  configuring SPI callbacks...");
1000ac78:	4b11      	ldr	r3, [pc, #68]	; (1000acc0 <spi_master_configure_callbacks+0x4c>)
1000ac7a:	0018      	movs	r0, r3
1000ac7c:	4b11      	ldr	r3, [pc, #68]	; (1000acc4 <spi_master_configure_callbacks+0x50>)
1000ac7e:	4798      	blx	r3
1000ac80:	4b11      	ldr	r3, [pc, #68]	; (1000acc8 <spi_master_configure_callbacks+0x54>)
1000ac82:	0018      	movs	r0, r3
1000ac84:	4b11      	ldr	r3, [pc, #68]	; (1000accc <spi_master_configure_callbacks+0x58>)
1000ac86:	4798      	blx	r3
    spi_transceived_done = false;
1000ac88:	4b11      	ldr	r3, [pc, #68]	; (1000acd0 <spi_master_configure_callbacks+0x5c>)
1000ac8a:	2200      	movs	r2, #0
1000ac8c:	701a      	strb	r2, [r3, #0]

    spi_register_callback(&spi_master_ms58_instance, spi_master_transceived_callback, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000ac8e:	4911      	ldr	r1, [pc, #68]	; (1000acd4 <spi_master_configure_callbacks+0x60>)
1000ac90:	4b11      	ldr	r3, [pc, #68]	; (1000acd8 <spi_master_configure_callbacks+0x64>)
1000ac92:	2202      	movs	r2, #2
1000ac94:	0018      	movs	r0, r3
1000ac96:	4b11      	ldr	r3, [pc, #68]	; (1000acdc <spi_master_configure_callbacks+0x68>)
1000ac98:	4798      	blx	r3
    spi_register_callback(&spi_master_mpu9250_instance, spi_master_transceived_callback, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000ac9a:	490e      	ldr	r1, [pc, #56]	; (1000acd4 <spi_master_configure_callbacks+0x60>)
1000ac9c:	4b10      	ldr	r3, [pc, #64]	; (1000ace0 <spi_master_configure_callbacks+0x6c>)
1000ac9e:	2202      	movs	r2, #2
1000aca0:	0018      	movs	r0, r3
1000aca2:	4b0e      	ldr	r3, [pc, #56]	; (1000acdc <spi_master_configure_callbacks+0x68>)
1000aca4:	4798      	blx	r3

    spi_enable_callback(&spi_master_ms58_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000aca6:	4b0c      	ldr	r3, [pc, #48]	; (1000acd8 <spi_master_configure_callbacks+0x64>)
1000aca8:	2102      	movs	r1, #2
1000acaa:	0018      	movs	r0, r3
1000acac:	4b0d      	ldr	r3, [pc, #52]	; (1000ace4 <spi_master_configure_callbacks+0x70>)
1000acae:	4798      	blx	r3
    spi_enable_callback(&spi_master_mpu9250_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000acb0:	4b0b      	ldr	r3, [pc, #44]	; (1000ace0 <spi_master_configure_callbacks+0x6c>)
1000acb2:	2102      	movs	r1, #2
1000acb4:	0018      	movs	r0, r3
1000acb6:	4b0b      	ldr	r3, [pc, #44]	; (1000ace4 <spi_master_configure_callbacks+0x70>)
1000acb8:	4798      	blx	r3
}
1000acba:	46c0      	nop			; (mov r8, r8)
1000acbc:	46bd      	mov	sp, r7
1000acbe:	bd80      	pop	{r7, pc}
1000acc0:	10018cf4 	.word	0x10018cf4
1000acc4:	10017591 	.word	0x10017591
1000acc8:	10018d40 	.word	0x10018d40
1000accc:	10017471 	.word	0x10017471
1000acd0:	1001a295 	.word	0x1001a295
1000acd4:	1000ac59 	.word	0x1000ac59
1000acd8:	1001a3f8 	.word	0x1001a3f8
1000acdc:	1000d765 	.word	0x1000d765
1000ace0:	1001a340 	.word	0x1001a340
1000ace4:	1000d7a9 	.word	0x1000d7a9

1000ace8 <sms_dualtimer_init>:
}


/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000ace8:	b580      	push	{r7, lr}
1000acea:	b088      	sub	sp, #32
1000acec:	af00      	add	r7, sp, #0
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000acee:	1d3b      	adds	r3, r7, #4
1000acf0:	0018      	movs	r0, r3
1000acf2:	4b0b      	ldr	r3, [pc, #44]	; (1000ad20 <sms_dualtimer_init+0x38>)
1000acf4:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_TIMER_DUAL_T1_LOAD;
1000acf6:	1d3b      	adds	r3, r7, #4
1000acf8:	4a0a      	ldr	r2, [pc, #40]	; (1000ad24 <sms_dualtimer_init+0x3c>)
1000acfa:	609a      	str	r2, [r3, #8]
    config_dualtimer.timer2.load_value = SMS_TIMER_DUAL_T2_LOAD;
1000acfc:	1d3b      	adds	r3, r7, #4
1000acfe:	4a09      	ldr	r2, [pc, #36]	; (1000ad24 <sms_dualtimer_init+0x3c>)
1000ad00:	615a      	str	r2, [r3, #20]

    dualtimer_init(&config_dualtimer);
1000ad02:	1d3b      	adds	r3, r7, #4
1000ad04:	0018      	movs	r0, r3
1000ad06:	4b08      	ldr	r3, [pc, #32]	; (1000ad28 <sms_dualtimer_init+0x40>)
1000ad08:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000ad0a:	2000      	movs	r0, #0
1000ad0c:	4b07      	ldr	r3, [pc, #28]	; (1000ad2c <sms_dualtimer_init+0x44>)
1000ad0e:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER2);
1000ad10:	2001      	movs	r0, #1
1000ad12:	4b06      	ldr	r3, [pc, #24]	; (1000ad2c <sms_dualtimer_init+0x44>)
1000ad14:	4798      	blx	r3
}
1000ad16:	46c0      	nop			; (mov r8, r8)
1000ad18:	46bd      	mov	sp, r7
1000ad1a:	b008      	add	sp, #32
1000ad1c:	bd80      	pop	{r7, pc}
1000ad1e:	46c0      	nop			; (mov r8, r8)
1000ad20:	1000b1a5 	.word	0x1000b1a5
1000ad24:	00006590 	.word	0x00006590
1000ad28:	1000b351 	.word	0x1000b351
1000ad2c:	1000b2b1 	.word	0x1000b2b1

1000ad30 <ble_adv_report_event>:
* BLE callback functions
* ---------------------- */

/* Callback registered for AT_BLE_ADV_REPORT (#3) event from stack */
static at_ble_status_t ble_adv_report_event(void *params)
{
1000ad30:	b580      	push	{r7, lr}
1000ad32:	b082      	sub	sp, #8
1000ad34:	af00      	add	r7, sp, #0
1000ad36:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("[ble_adv_report_event]  advertisement timeout");
1000ad38:	4b0b      	ldr	r3, [pc, #44]	; (1000ad68 <ble_adv_report_event+0x38>)
1000ad3a:	0018      	movs	r0, r3
1000ad3c:	4b0b      	ldr	r3, [pc, #44]	; (1000ad6c <ble_adv_report_event+0x3c>)
1000ad3e:	4798      	blx	r3
1000ad40:	4b0b      	ldr	r3, [pc, #44]	; (1000ad70 <ble_adv_report_event+0x40>)
1000ad42:	0018      	movs	r0, r3
1000ad44:	4b0b      	ldr	r3, [pc, #44]	; (1000ad74 <ble_adv_report_event+0x44>)
1000ad46:	4798      	blx	r3
    DBG_LOG_DEV("Going to sleep...");
1000ad48:	4b07      	ldr	r3, [pc, #28]	; (1000ad68 <ble_adv_report_event+0x38>)
1000ad4a:	0018      	movs	r0, r3
1000ad4c:	4b07      	ldr	r3, [pc, #28]	; (1000ad6c <ble_adv_report_event+0x3c>)
1000ad4e:	4798      	blx	r3
1000ad50:	4b09      	ldr	r3, [pc, #36]	; (1000ad78 <ble_adv_report_event+0x48>)
1000ad52:	0018      	movs	r0, r3
1000ad54:	4b07      	ldr	r3, [pc, #28]	; (1000ad74 <ble_adv_report_event+0x44>)
1000ad56:	4798      	blx	r3
    release_sleep_lock();
1000ad58:	4b08      	ldr	r3, [pc, #32]	; (1000ad7c <ble_adv_report_event+0x4c>)
1000ad5a:	4798      	blx	r3

    return AT_BLE_SUCCESS;
1000ad5c:	2300      	movs	r3, #0
}
1000ad5e:	0018      	movs	r0, r3
1000ad60:	46bd      	mov	sp, r7
1000ad62:	b002      	add	sp, #8
1000ad64:	bd80      	pop	{r7, pc}
1000ad66:	46c0      	nop			; (mov r8, r8)
1000ad68:	10018d80 	.word	0x10018d80
1000ad6c:	10017591 	.word	0x10017591
1000ad70:	10018d84 	.word	0x10018d84
1000ad74:	10017471 	.word	0x10017471
1000ad78:	10018db4 	.word	0x10018db4
1000ad7c:	100120d5 	.word	0x100120d5

1000ad80 <ble_connected_app_event>:

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
1000ad80:	b580      	push	{r7, lr}
1000ad82:	b084      	sub	sp, #16
1000ad84:	af00      	add	r7, sp, #0
1000ad86:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("[ble_connected_app_event] devices connected");
1000ad88:	4b0a      	ldr	r3, [pc, #40]	; (1000adb4 <ble_connected_app_event+0x34>)
1000ad8a:	0018      	movs	r0, r3
1000ad8c:	4b0a      	ldr	r3, [pc, #40]	; (1000adb8 <ble_connected_app_event+0x38>)
1000ad8e:	4798      	blx	r3
1000ad90:	4b0a      	ldr	r3, [pc, #40]	; (1000adbc <ble_connected_app_event+0x3c>)
1000ad92:	0018      	movs	r0, r3
1000ad94:	4b0a      	ldr	r3, [pc, #40]	; (1000adc0 <ble_connected_app_event+0x40>)
1000ad96:	4798      	blx	r3
    at_ble_connected_t *connected = (at_ble_connected_t *)params;
1000ad98:	687b      	ldr	r3, [r7, #4]
1000ad9a:	60fb      	str	r3, [r7, #12]
    sms_connection_handle = connected->handle;
1000ad9c:	68fb      	ldr	r3, [r7, #12]
1000ad9e:	891a      	ldrh	r2, [r3, #8]
1000ada0:	4b08      	ldr	r3, [pc, #32]	; (1000adc4 <ble_connected_app_event+0x44>)
1000ada2:	801a      	strh	r2, [r3, #0]
    conn_status = 1;
1000ada4:	4b08      	ldr	r3, [pc, #32]	; (1000adc8 <ble_connected_app_event+0x48>)
1000ada6:	2201      	movs	r2, #1
1000ada8:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
1000adaa:	2300      	movs	r3, #0
}
1000adac:	0018      	movs	r0, r3
1000adae:	46bd      	mov	sp, r7
1000adb0:	b004      	add	sp, #16
1000adb2:	bd80      	pop	{r7, pc}
1000adb4:	10018d80 	.word	0x10018d80
1000adb8:	10017591 	.word	0x10017591
1000adbc:	10018dc8 	.word	0x10018dc8
1000adc0:	10017471 	.word	0x10017471
1000adc4:	1001a33c 	.word	0x1001a33c
1000adc8:	10019b54 	.word	0x10019b54

1000adcc <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000adcc:	b580      	push	{r7, lr}
1000adce:	b082      	sub	sp, #8
1000add0:	af00      	add	r7, sp, #0
1000add2:	6078      	str	r0, [r7, #4]
    conn_status = 0;
1000add4:	4b0d      	ldr	r3, [pc, #52]	; (1000ae0c <ble_disconnected_app_event+0x40>)
1000add6:	2200      	movs	r2, #0
1000add8:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[ble_disconnected_app_event] peer disconnected...");
1000adda:	4b0d      	ldr	r3, [pc, #52]	; (1000ae10 <ble_disconnected_app_event+0x44>)
1000addc:	0018      	movs	r0, r3
1000adde:	4b0d      	ldr	r3, [pc, #52]	; (1000ae14 <ble_disconnected_app_event+0x48>)
1000ade0:	4798      	blx	r3
1000ade2:	4b0d      	ldr	r3, [pc, #52]	; (1000ae18 <ble_disconnected_app_event+0x4c>)
1000ade4:	0018      	movs	r0, r3
1000ade6:	4b0d      	ldr	r3, [pc, #52]	; (1000ae1c <ble_disconnected_app_event+0x50>)
1000ade8:	4798      	blx	r3
    switch(sms_working_mode) {
1000adea:	4b0d      	ldr	r3, [pc, #52]	; (1000ae20 <ble_disconnected_app_event+0x54>)
1000adec:	781b      	ldrb	r3, [r3, #0]
1000adee:	2b07      	cmp	r3, #7
1000adf0:	d804      	bhi.n	1000adfc <ble_disconnected_app_event+0x30>
1000adf2:	009a      	lsls	r2, r3, #2
1000adf4:	4b0b      	ldr	r3, [pc, #44]	; (1000ae24 <ble_disconnected_app_event+0x58>)
1000adf6:	18d3      	adds	r3, r2, r3
1000adf8:	681b      	ldr	r3, [r3, #0]
1000adfa:	469f      	mov	pc, r3
        case SMS_MODE_COMPLETE:
        // disable AO GPIO interrupt
        break;
        
        default:
        break;
1000adfc:	46c0      	nop			; (mov r8, r8)
    }
    // enable ~30s counter for advertisement, then go to sleep
    sms_service_advertise();
1000adfe:	4b0a      	ldr	r3, [pc, #40]	; (1000ae28 <ble_disconnected_app_event+0x5c>)
1000ae00:	4798      	blx	r3
    ALL_UNUSED(param);
    return AT_BLE_SUCCESS;
1000ae02:	2300      	movs	r3, #0
}
1000ae04:	0018      	movs	r0, r3
1000ae06:	46bd      	mov	sp, r7
1000ae08:	b002      	add	sp, #8
1000ae0a:	bd80      	pop	{r7, pc}
1000ae0c:	10019b54 	.word	0x10019b54
1000ae10:	10018d80 	.word	0x10018d80
1000ae14:	10017591 	.word	0x10017591
1000ae18:	10018df4 	.word	0x10018df4
1000ae1c:	10017471 	.word	0x10017471
1000ae20:	1001a29b 	.word	0x1001a29b
1000ae24:	10018edc 	.word	0x10018edc
1000ae28:	1000a1e9 	.word	0x1000a1e9

1000ae2c <ble_paired_app_event>:

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
1000ae2c:	b580      	push	{r7, lr}
1000ae2e:	b082      	sub	sp, #8
1000ae30:	af00      	add	r7, sp, #0
1000ae32:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("[ble_paired_app_event] Devices paired...");
1000ae34:	4b08      	ldr	r3, [pc, #32]	; (1000ae58 <ble_paired_app_event+0x2c>)
1000ae36:	0018      	movs	r0, r3
1000ae38:	4b08      	ldr	r3, [pc, #32]	; (1000ae5c <ble_paired_app_event+0x30>)
1000ae3a:	4798      	blx	r3
1000ae3c:	4b08      	ldr	r3, [pc, #32]	; (1000ae60 <ble_paired_app_event+0x34>)
1000ae3e:	0018      	movs	r0, r3
1000ae40:	4b08      	ldr	r3, [pc, #32]	; (1000ae64 <ble_paired_app_event+0x38>)
1000ae42:	4798      	blx	r3
    DBG_LOG_CONT_DEV(" enabling sleep.");
1000ae44:	4b08      	ldr	r3, [pc, #32]	; (1000ae68 <ble_paired_app_event+0x3c>)
1000ae46:	0018      	movs	r0, r3
1000ae48:	4b06      	ldr	r3, [pc, #24]	; (1000ae64 <ble_paired_app_event+0x38>)
1000ae4a:	4798      	blx	r3
    //release_sleep_lock();
    ALL_UNUSED(param);
    return AT_BLE_SUCCESS;
1000ae4c:	2300      	movs	r3, #0
}
1000ae4e:	0018      	movs	r0, r3
1000ae50:	46bd      	mov	sp, r7
1000ae52:	b002      	add	sp, #8
1000ae54:	bd80      	pop	{r7, pc}
1000ae56:	46c0      	nop			; (mov r8, r8)
1000ae58:	10018d80 	.word	0x10018d80
1000ae5c:	10017591 	.word	0x10017591
1000ae60:	10018e28 	.word	0x10018e28
1000ae64:	10017471 	.word	0x10017471
1000ae68:	10018e54 	.word	0x10018e54

1000ae6c <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED (#29) event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
1000ae6c:	b580      	push	{r7, lr}
1000ae6e:	b084      	sub	sp, #16
1000ae70:	af00      	add	r7, sp, #0
1000ae72:	6078      	str	r0, [r7, #4]
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
1000ae74:	687b      	ldr	r3, [r7, #4]
1000ae76:	60fb      	str	r3, [r7, #12]
    if(!notification_status->status)
1000ae78:	68fb      	ldr	r3, [r7, #12]
1000ae7a:	78db      	ldrb	r3, [r3, #3]
1000ae7c:	2b00      	cmp	r3, #0
1000ae7e:	d109      	bne.n	1000ae94 <ble_notification_confirmed_app_event+0x28>
    {
        DBG_LOG_DEV("[ble_notification_confirmed_app_event] notification sent successfully");
1000ae80:	4b07      	ldr	r3, [pc, #28]	; (1000aea0 <ble_notification_confirmed_app_event+0x34>)
1000ae82:	0018      	movs	r0, r3
1000ae84:	4b07      	ldr	r3, [pc, #28]	; (1000aea4 <ble_notification_confirmed_app_event+0x38>)
1000ae86:	4798      	blx	r3
1000ae88:	4b07      	ldr	r3, [pc, #28]	; (1000aea8 <ble_notification_confirmed_app_event+0x3c>)
1000ae8a:	0018      	movs	r0, r3
1000ae8c:	4b07      	ldr	r3, [pc, #28]	; (1000aeac <ble_notification_confirmed_app_event+0x40>)
1000ae8e:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000ae90:	2300      	movs	r3, #0
1000ae92:	e000      	b.n	1000ae96 <ble_notification_confirmed_app_event+0x2a>
    }
    return AT_BLE_FAILURE;
1000ae94:	23e2      	movs	r3, #226	; 0xe2
}
1000ae96:	0018      	movs	r0, r3
1000ae98:	46bd      	mov	sp, r7
1000ae9a:	b004      	add	sp, #16
1000ae9c:	bd80      	pop	{r7, pc}
1000ae9e:	46c0      	nop			; (mov r8, r8)
1000aea0:	10018d80 	.word	0x10018d80
1000aea4:	10017591 	.word	0x10017591
1000aea8:	10018e68 	.word	0x10018e68
1000aeac:	10017471 	.word	0x10017471

1000aeb0 <ble_char_changed_app_event>:

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED (#31) event from stack */
static at_ble_status_t ble_char_changed_app_event(void *params)
{
1000aeb0:	b580      	push	{r7, lr}
1000aeb2:	b082      	sub	sp, #8
1000aeb4:	af00      	add	r7, sp, #0
1000aeb6:	6078      	str	r0, [r7, #4]
    ALL_UNUSED(params);
    return AT_BLE_SUCCESS;
1000aeb8:	2300      	movs	r3, #0
}
1000aeba:	0018      	movs	r0, r3
1000aebc:	46bd      	mov	sp, r7
1000aebe:	b002      	add	sp, #8
1000aec0:	bd80      	pop	{r7, pc}
1000aec2:	46c0      	nop			; (mov r8, r8)

1000aec4 <sms_plf_event_cb>:

/* Callback registered for AT_PLATFORM_EVENT (#58) event */
static void sms_plf_event_cb(void)
{
1000aec4:	b580      	push	{r7, lr}
1000aec6:	af00      	add	r7, sp, #0
    sms_plf_int_state.int_on = true;
1000aec8:	4b02      	ldr	r3, [pc, #8]	; (1000aed4 <sms_plf_event_cb+0x10>)
1000aeca:	2201      	movs	r2, #1
1000aecc:	705a      	strb	r2, [r3, #1]
}
1000aece:	46c0      	nop			; (mov r8, r8)
1000aed0:	46bd      	mov	sp, r7
1000aed2:	bd80      	pop	{r7, pc}
1000aed4:	1001a280 	.word	0x1001a280

1000aed8 <resume_cb>:

/* -------------------------
* Resume callback functions
* ------------------------- */
static void resume_cb(void)
{
1000aed8:	b580      	push	{r7, lr}
1000aeda:	af00      	add	r7, sp, #0
    init_port_list(); // Re-initialize all ports
1000aedc:	4b08      	ldr	r3, [pc, #32]	; (1000af00 <resume_cb+0x28>)
1000aede:	4798      	blx	r3
    serial_console_init(); // UART GPIO for the console
1000aee0:	4b08      	ldr	r3, [pc, #32]	; (1000af04 <resume_cb+0x2c>)
1000aee2:	4798      	blx	r3
    sms_dualtimer_init(); // dualtimer
1000aee4:	4b08      	ldr	r3, [pc, #32]	; (1000af08 <resume_cb+0x30>)
1000aee6:	4798      	blx	r3
    if(sms_device == SMS_DEVICE_NODE_FULL) {
1000aee8:	4b08      	ldr	r3, [pc, #32]	; (1000af0c <resume_cb+0x34>)
1000aeea:	781b      	ldrb	r3, [r3, #0]
1000aeec:	2b01      	cmp	r3, #1
1000aeee:	d103      	bne.n	1000aef8 <resume_cb+0x20>
        ///* GPIO interrupt (AO_GPIO_2) for IMU data ready */
        //sms_imu_configure_gpio();
        spi_master_configure(); // SPI GPIO
1000aef0:	4b07      	ldr	r3, [pc, #28]	; (1000af10 <resume_cb+0x38>)
1000aef2:	4798      	blx	r3
        //spi_master_configure_callbacks();
        i2c_master_configure(); // I2C GPIO
1000aef4:	4b07      	ldr	r3, [pc, #28]	; (1000af14 <resume_cb+0x3c>)
1000aef6:	4798      	blx	r3
    }
    
    //hw_timer_register_callback(hw_timer1_callback_fn);
    //sms_button_configure_gpio(); // GPIO for the AO button interrupts
    //sms_button_register_callbacks();
}
1000aef8:	46c0      	nop			; (mov r8, r8)
1000aefa:	46bd      	mov	sp, r7
1000aefc:	bd80      	pop	{r7, pc}
1000aefe:	46c0      	nop			; (mov r8, r8)
1000af00:	10011499 	.word	0x10011499
1000af04:	10011181 	.word	0x10011181
1000af08:	1000ace9 	.word	0x1000ace9
1000af0c:	10019a88 	.word	0x10019a88
1000af10:	1000ab7d 	.word	0x1000ab7d
1000af14:	1000a51d 	.word	0x1000a51d

1000af18 <main>:

/**@brief Initialize the service with its included service, characteristics, and descriptors
*/

int main(void)
{
1000af18:	b590      	push	{r4, r7, lr}
1000af1a:	b083      	sub	sp, #12
1000af1c:	af00      	add	r7, sp, #0
    at_ble_status_t status;
    app_state = SMS_APP_STARTING;
1000af1e:	4b48      	ldr	r3, [pc, #288]	; (1000b040 <main+0x128>)
1000af20:	2200      	movs	r2, #0
1000af22:	701a      	strb	r2, [r3, #0]
    sms_plf_int_state.source = SMS_CB_NONE;
1000af24:	4b47      	ldr	r3, [pc, #284]	; (1000b044 <main+0x12c>)
1000af26:	2200      	movs	r2, #0
1000af28:	701a      	strb	r2, [r3, #0]
    sms_plf_int_state.int_on = false;
1000af2a:	4b46      	ldr	r3, [pc, #280]	; (1000b044 <main+0x12c>)
1000af2c:	2200      	movs	r2, #0
1000af2e:	705a      	strb	r2, [r3, #1]
    mpu9250_device.init_ok = false;
1000af30:	4b45      	ldr	r3, [pc, #276]	; (1000b048 <main+0x130>)
1000af32:	2200      	movs	r2, #0
1000af34:	701a      	strb	r2, [r3, #0]
    mpu9250_device.comm_error = false;
1000af36:	4b44      	ldr	r3, [pc, #272]	; (1000b048 <main+0x130>)
1000af38:	2200      	movs	r2, #0
1000af3a:	705a      	strb	r2, [r3, #1]


    /* Initialize platform */
    platform_driver_init();
1000af3c:	4b43      	ldr	r3, [pc, #268]	; (1000b04c <main+0x134>)
1000af3e:	4798      	blx	r3
    /* Initialize gpio */
    gpio_init();
1000af40:	4b43      	ldr	r3, [pc, #268]	; (1000b050 <main+0x138>)
1000af42:	4798      	blx	r3
    /* Prevent sleep mode */
    acquire_sleep_lock();
1000af44:	4b43      	ldr	r3, [pc, #268]	; (1000b054 <main+0x13c>)
1000af46:	4798      	blx	r3
    /* Initialize serial console */
    serial_console_init();
1000af48:	4b43      	ldr	r3, [pc, #268]	; (1000b058 <main+0x140>)
1000af4a:	4798      	blx	r3
    //break;
    //}
    //DBG_LOG_DEV("********************************\n\r"\
    //"********************************\n\r");
    /* Initialize the BLE chip and Set the Device Address */
    DBG_LOG("[main] initializing BLE application");
1000af4c:	4b43      	ldr	r3, [pc, #268]	; (1000b05c <main+0x144>)
1000af4e:	0018      	movs	r0, r3
1000af50:	4b43      	ldr	r3, [pc, #268]	; (1000b060 <main+0x148>)
1000af52:	4798      	blx	r3
1000af54:	4b43      	ldr	r3, [pc, #268]	; (1000b064 <main+0x14c>)
1000af56:	0018      	movs	r0, r3
1000af58:	4b43      	ldr	r3, [pc, #268]	; (1000b068 <main+0x150>)
1000af5a:	4798      	blx	r3
    ble_device_init(NULL);
1000af5c:	2000      	movs	r0, #0
1000af5e:	4b43      	ldr	r3, [pc, #268]	; (1000b06c <main+0x154>)
1000af60:	4798      	blx	r3

    /* Hardware timer for BLE use */
    sms_dualtimer_init(); // initialize dualtimer with both ms counter
1000af62:	4b43      	ldr	r3, [pc, #268]	; (1000b070 <main+0x158>)
1000af64:	4798      	blx	r3


    delay_init();
1000af66:	4b43      	ldr	r3, [pc, #268]	; (1000b074 <main+0x15c>)
1000af68:	4798      	blx	r3
    
    /* SMS button on AO_GPIO */
    sms_button_configure_gpio(); // configure 2 AO GPIO as input with wake-up enabled
1000af6a:	4b43      	ldr	r3, [pc, #268]	; (1000b078 <main+0x160>)
1000af6c:	4798      	blx	r3
    sms_button_register_callbacks(); // set GPIO interrupt callbacks
1000af6e:	4b43      	ldr	r3, [pc, #268]	; (1000b07c <main+0x164>)
1000af70:	4798      	blx	r3

    if(sms_device == SMS_DEVICE_NODE_FULL) {
1000af72:	4b43      	ldr	r3, [pc, #268]	; (1000b080 <main+0x168>)
1000af74:	781b      	ldrb	r3, [r3, #0]
1000af76:	2b01      	cmp	r3, #1
1000af78:	d109      	bne.n	1000af8e <main+0x76>
        /* GPIO interrupt (AO_GPIO_2) for IMU data ready */
        sms_imu_configure_gpio();
1000af7a:	4b42      	ldr	r3, [pc, #264]	; (1000b084 <main+0x16c>)
1000af7c:	4798      	blx	r3
        /* SPI config --> MS58 pressure sensor */
        spi_master_configure();
1000af7e:	4b42      	ldr	r3, [pc, #264]	; (1000b088 <main+0x170>)
1000af80:	4798      	blx	r3
        spi_master_configure_callbacks();
1000af82:	4b42      	ldr	r3, [pc, #264]	; (1000b08c <main+0x174>)
1000af84:	4798      	blx	r3
        /* I2C config --> MPU-9250 IMU */
        i2c_master_configure();
1000af86:	4b42      	ldr	r3, [pc, #264]	; (1000b090 <main+0x178>)
1000af88:	4798      	blx	r3
        i2c_master_configure_callbacks();
1000af8a:	4b42      	ldr	r3, [pc, #264]	; (1000b094 <main+0x17c>)
1000af8c:	4798      	blx	r3
    }
    
    /* Register sleep resume callback */
    register_resume_callback(resume_cb);
1000af8e:	4b42      	ldr	r3, [pc, #264]	; (1000b098 <main+0x180>)
1000af90:	0018      	movs	r0, r3
1000af92:	4b42      	ldr	r3, [pc, #264]	; (1000b09c <main+0x184>)
1000af94:	4798      	blx	r3
    
    /* Initialize & define primary BLE button service */
    sms_button_char_init_value = 0;
1000af96:	4b42      	ldr	r3, [pc, #264]	; (1000b0a0 <main+0x188>)
1000af98:	2200      	movs	r2, #0
1000af9a:	701a      	strb	r2, [r3, #0]
    sms_button_service_init(&sms_button_service_handler, &sms_button_char_init_value);
1000af9c:	4a40      	ldr	r2, [pc, #256]	; (1000b0a0 <main+0x188>)
1000af9e:	4b41      	ldr	r3, [pc, #260]	; (1000b0a4 <main+0x18c>)
1000afa0:	0011      	movs	r1, r2
1000afa2:	0018      	movs	r0, r3
1000afa4:	4b40      	ldr	r3, [pc, #256]	; (1000b0a8 <main+0x190>)
1000afa6:	4798      	blx	r3
    if((status = sms_button_primary_service_define(&sms_button_service_handler)) != AT_BLE_SUCCESS) {
1000afa8:	1dbc      	adds	r4, r7, #6
1000afaa:	4b3e      	ldr	r3, [pc, #248]	; (1000b0a4 <main+0x18c>)
1000afac:	0018      	movs	r0, r3
1000afae:	4b3f      	ldr	r3, [pc, #252]	; (1000b0ac <main+0x194>)
1000afb0:	4798      	blx	r3
1000afb2:	0003      	movs	r3, r0
1000afb4:	7023      	strb	r3, [r4, #0]
    else {
        //DBG_LOG_DEV("[main] SMS primary service defined, sms button handle %d", sms_button_service_handler.serv_handle);
    }

    /* Stuff for full-featured SMS device */
    if(sms_device == SMS_DEVICE_NODE_FULL) {
1000afb6:	4b32      	ldr	r3, [pc, #200]	; (1000b080 <main+0x168>)
1000afb8:	781b      	ldrb	r3, [r3, #0]
1000afba:	2b01      	cmp	r3, #1
1000afbc:	d129      	bne.n	1000b012 <main+0xfa>
        for(uint8_t i = 0; i < 12; i++) {
1000afbe:	1dfb      	adds	r3, r7, #7
1000afc0:	2200      	movs	r2, #0
1000afc2:	701a      	strb	r2, [r3, #0]
1000afc4:	e009      	b.n	1000afda <main+0xc2>
            sms_imu_char_init_values[i] = 0;
1000afc6:	1dfb      	adds	r3, r7, #7
1000afc8:	781b      	ldrb	r3, [r3, #0]
1000afca:	4a39      	ldr	r2, [pc, #228]	; (1000b0b0 <main+0x198>)
1000afcc:	2100      	movs	r1, #0
1000afce:	54d1      	strb	r1, [r2, r3]
        //DBG_LOG_DEV("[main] SMS primary service defined, sms button handle %d", sms_button_service_handler.serv_handle);
    }

    /* Stuff for full-featured SMS device */
    if(sms_device == SMS_DEVICE_NODE_FULL) {
        for(uint8_t i = 0; i < 12; i++) {
1000afd0:	1dfb      	adds	r3, r7, #7
1000afd2:	781a      	ldrb	r2, [r3, #0]
1000afd4:	1dfb      	adds	r3, r7, #7
1000afd6:	3201      	adds	r2, #1
1000afd8:	701a      	strb	r2, [r3, #0]
1000afda:	1dfb      	adds	r3, r7, #7
1000afdc:	781b      	ldrb	r3, [r3, #0]
1000afde:	2b0b      	cmp	r3, #11
1000afe0:	d9f1      	bls.n	1000afc6 <main+0xae>
            sms_imu_char_init_values[i] = 0;
        }
        sms_imu_service_init(&sms_imu_service_handler, 0);
1000afe2:	4b34      	ldr	r3, [pc, #208]	; (1000b0b4 <main+0x19c>)
1000afe4:	2100      	movs	r1, #0
1000afe6:	0018      	movs	r0, r3
1000afe8:	4b33      	ldr	r3, [pc, #204]	; (1000b0b8 <main+0x1a0>)
1000afea:	4798      	blx	r3
        if((status = sms_imu_primary_service_define(&sms_imu_service_handler)) != AT_BLE_SUCCESS) {
1000afec:	1dbc      	adds	r4, r7, #6
1000afee:	4b31      	ldr	r3, [pc, #196]	; (1000b0b4 <main+0x19c>)
1000aff0:	0018      	movs	r0, r3
1000aff2:	4b32      	ldr	r3, [pc, #200]	; (1000b0bc <main+0x1a4>)
1000aff4:	4798      	blx	r3
1000aff6:	0003      	movs	r3, r0
1000aff8:	7023      	strb	r3, [r4, #0]
        }
        else {
            //DBG_LOG_DEV("[main]  SMS primary service defined, sms imu handle %d", sms_imu_service_handler.serv_handle);
        }
        
        sms_pressure_service_init(&sms_pressure_service_handler, 0);
1000affa:	4b31      	ldr	r3, [pc, #196]	; (1000b0c0 <main+0x1a8>)
1000affc:	2100      	movs	r1, #0
1000affe:	0018      	movs	r0, r3
1000b000:	4b30      	ldr	r3, [pc, #192]	; (1000b0c4 <main+0x1ac>)
1000b002:	4798      	blx	r3
        if((status = sms_pressure_primary_service_define(&sms_pressure_service_handler)) != AT_BLE_SUCCESS) {
1000b004:	1dbc      	adds	r4, r7, #6
1000b006:	4b2e      	ldr	r3, [pc, #184]	; (1000b0c0 <main+0x1a8>)
1000b008:	0018      	movs	r0, r3
1000b00a:	4b2f      	ldr	r3, [pc, #188]	; (1000b0c8 <main+0x1b0>)
1000b00c:	4798      	blx	r3
1000b00e:	0003      	movs	r3, r0
1000b010:	7023      	strb	r3, [r4, #0]
            //DBG_LOG_DEV("[main]  SMS primary service defined, sms pressure handle %d", sms_pressure_service_handler.serv_handle);
        }
    }
    
    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, startup_template_app_gap_cb);
1000b012:	4b2e      	ldr	r3, [pc, #184]	; (1000b0cc <main+0x1b4>)
1000b014:	001a      	movs	r2, r3
1000b016:	2100      	movs	r1, #0
1000b018:	2000      	movs	r0, #0
1000b01a:	4b2d      	ldr	r3, [pc, #180]	; (1000b0d0 <main+0x1b8>)
1000b01c:	4798      	blx	r3
    /* Register callbacks for GATT SERVER related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, startup_template_app_gatt_server_cb);
1000b01e:	4b2d      	ldr	r3, [pc, #180]	; (1000b0d4 <main+0x1bc>)
1000b020:	001a      	movs	r2, r3
1000b022:	2102      	movs	r1, #2
1000b024:	2000      	movs	r0, #0
1000b026:	4b2a      	ldr	r3, [pc, #168]	; (1000b0d0 <main+0x1b8>)
1000b028:	4798      	blx	r3
    /* Register user-defined callback */
    register_ble_user_event_cb(sms_plf_event_cb);
1000b02a:	4b2b      	ldr	r3, [pc, #172]	; (1000b0d8 <main+0x1c0>)
1000b02c:	0018      	movs	r0, r3
1000b02e:	4b2b      	ldr	r3, [pc, #172]	; (1000b0dc <main+0x1c4>)
1000b030:	4798      	blx	r3
    
    sms_imu_startup();
1000b032:	4b2b      	ldr	r3, [pc, #172]	; (1000b0e0 <main+0x1c8>)
1000b034:	4798      	blx	r3
    DBG_LOG_CONT(" done!");
1000b036:	4b2b      	ldr	r3, [pc, #172]	; (1000b0e4 <main+0x1cc>)
1000b038:	0018      	movs	r0, r3
1000b03a:	4b0b      	ldr	r3, [pc, #44]	; (1000b068 <main+0x150>)
1000b03c:	4798      	blx	r3
    while(1){}
1000b03e:	e7fe      	b.n	1000b03e <main+0x126>
1000b040:	1001a3d0 	.word	0x1001a3d0
1000b044:	1001a280 	.word	0x1001a280
1000b048:	1001a36c 	.word	0x1001a36c
1000b04c:	100115fd 	.word	0x100115fd
1000b050:	1000c1cd 	.word	0x1000c1cd
1000b054:	1001203d 	.word	0x1001203d
1000b058:	10011181 	.word	0x10011181
1000b05c:	10018d80 	.word	0x10018d80
1000b060:	10017591 	.word	0x10017591
1000b064:	10018eb0 	.word	0x10018eb0
1000b068:	10017471 	.word	0x10017471
1000b06c:	1000f169 	.word	0x1000f169
1000b070:	1000ace9 	.word	0x1000ace9
1000b074:	1000b11d 	.word	0x1000b11d
1000b078:	1000a281 	.word	0x1000a281
1000b07c:	1000a2d9 	.word	0x1000a2d9
1000b080:	10019a88 	.word	0x10019a88
1000b084:	1000a701 	.word	0x1000a701
1000b088:	1000ab7d 	.word	0x1000ab7d
1000b08c:	1000ac75 	.word	0x1000ac75
1000b090:	1000a51d 	.word	0x1000a51d
1000b094:	1000a639 	.word	0x1000a639
1000b098:	1000aed9 	.word	0x1000aed9
1000b09c:	10012135 	.word	0x10012135
1000b0a0:	1001a33f 	.word	0x1001a33f
1000b0a4:	1001a29c 	.word	0x1001a29c
1000b0a8:	1000a389 	.word	0x1000a389
1000b0ac:	1000a471 	.word	0x1000a471
1000b0b0:	1001a47c 	.word	0x1001a47c
1000b0b4:	1001a2ec 	.word	0x1001a2ec
1000b0b8:	1000a94d 	.word	0x1000a94d
1000b0bc:	1000aa35 	.word	0x1000aa35
1000b0c0:	1001a42c 	.word	0x1001a42c
1000b0c4:	1000aa65 	.word	0x1000aa65
1000b0c8:	1000ab4d 	.word	0x1000ab4d
1000b0cc:	10018efc 	.word	0x10018efc
1000b0d0:	1000f531 	.word	0x1000f531
1000b0d4:	10018f48 	.word	0x10018f48
1000b0d8:	1000aec5 	.word	0x1000aec5
1000b0dc:	10011051 	.word	0x10011051
1000b0e0:	1000a7a5 	.word	0x1000a7a5
1000b0e4:	10018ed4 	.word	0x10018ed4

1000b0e8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
1000b0e8:	b580      	push	{r7, lr}
1000b0ea:	b082      	sub	sp, #8
1000b0ec:	af00      	add	r7, sp, #0
1000b0ee:	6078      	str	r0, [r7, #4]
	if (n > 0) {
1000b0f0:	687b      	ldr	r3, [r7, #4]
1000b0f2:	2b00      	cmp	r3, #0
1000b0f4:	d00c      	beq.n	1000b110 <delay_cycles+0x28>
		SysTick->LOAD = n;
1000b0f6:	4b08      	ldr	r3, [pc, #32]	; (1000b118 <delay_cycles+0x30>)
1000b0f8:	687a      	ldr	r2, [r7, #4]
1000b0fa:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
1000b0fc:	4b06      	ldr	r3, [pc, #24]	; (1000b118 <delay_cycles+0x30>)
1000b0fe:	2200      	movs	r2, #0
1000b100:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000b102:	46c0      	nop			; (mov r8, r8)
1000b104:	4b04      	ldr	r3, [pc, #16]	; (1000b118 <delay_cycles+0x30>)
1000b106:	681a      	ldr	r2, [r3, #0]
1000b108:	2380      	movs	r3, #128	; 0x80
1000b10a:	025b      	lsls	r3, r3, #9
1000b10c:	4013      	ands	r3, r2
1000b10e:	d0f9      	beq.n	1000b104 <delay_cycles+0x1c>
		};
	}
}
1000b110:	46c0      	nop			; (mov r8, r8)
1000b112:	46bd      	mov	sp, r7
1000b114:	b002      	add	sp, #8
1000b116:	bd80      	pop	{r7, pc}
1000b118:	e000e010 	.word	0xe000e010

1000b11c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
1000b11c:	b580      	push	{r7, lr}
1000b11e:	af00      	add	r7, sp, #0
	cycles_per_ms = system_clock_get_value();
1000b120:	4b0f      	ldr	r3, [pc, #60]	; (1000b160 <delay_init+0x44>)
1000b122:	4798      	blx	r3
1000b124:	0002      	movs	r2, r0
1000b126:	4b0f      	ldr	r3, [pc, #60]	; (1000b164 <delay_init+0x48>)
1000b128:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
1000b12a:	4b0e      	ldr	r3, [pc, #56]	; (1000b164 <delay_init+0x48>)
1000b12c:	6818      	ldr	r0, [r3, #0]
1000b12e:	4b0e      	ldr	r3, [pc, #56]	; (1000b168 <delay_init+0x4c>)
1000b130:	22fa      	movs	r2, #250	; 0xfa
1000b132:	0091      	lsls	r1, r2, #2
1000b134:	4798      	blx	r3
1000b136:	0003      	movs	r3, r0
1000b138:	001a      	movs	r2, r3
1000b13a:	4b0a      	ldr	r3, [pc, #40]	; (1000b164 <delay_init+0x48>)
1000b13c:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
1000b13e:	4b09      	ldr	r3, [pc, #36]	; (1000b164 <delay_init+0x48>)
1000b140:	6818      	ldr	r0, [r3, #0]
1000b142:	4b09      	ldr	r3, [pc, #36]	; (1000b168 <delay_init+0x4c>)
1000b144:	22fa      	movs	r2, #250	; 0xfa
1000b146:	0091      	lsls	r1, r2, #2
1000b148:	4798      	blx	r3
1000b14a:	0003      	movs	r3, r0
1000b14c:	001a      	movs	r2, r3
1000b14e:	4b07      	ldr	r3, [pc, #28]	; (1000b16c <delay_init+0x50>)
1000b150:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
1000b152:	4b07      	ldr	r3, [pc, #28]	; (1000b170 <delay_init+0x54>)
1000b154:	2205      	movs	r2, #5
1000b156:	601a      	str	r2, [r3, #0]
}
1000b158:	46c0      	nop			; (mov r8, r8)
1000b15a:	46bd      	mov	sp, r7
1000b15c:	bd80      	pop	{r7, pc}
1000b15e:	46c0      	nop			; (mov r8, r8)
1000b160:	1000d899 	.word	0x1000d899
1000b164:	10019a8c 	.word	0x10019a8c
1000b168:	100155a1 	.word	0x100155a1
1000b16c:	10019a90 	.word	0x10019a90
1000b170:	e000e010 	.word	0xe000e010

1000b174 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000b174:	b580      	push	{r7, lr}
1000b176:	b082      	sub	sp, #8
1000b178:	af00      	add	r7, sp, #0
1000b17a:	6078      	str	r0, [r7, #4]
	while (n--) {
1000b17c:	e004      	b.n	1000b188 <delay_cycles_ms+0x14>
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000b17e:	4b07      	ldr	r3, [pc, #28]	; (1000b19c <delay_cycles_ms+0x28>)
1000b180:	681b      	ldr	r3, [r3, #0]
1000b182:	0018      	movs	r0, r3
1000b184:	4b06      	ldr	r3, [pc, #24]	; (1000b1a0 <delay_cycles_ms+0x2c>)
1000b186:	4798      	blx	r3
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000b188:	687b      	ldr	r3, [r7, #4]
1000b18a:	1e5a      	subs	r2, r3, #1
1000b18c:	607a      	str	r2, [r7, #4]
1000b18e:	2b00      	cmp	r3, #0
1000b190:	d1f5      	bne.n	1000b17e <delay_cycles_ms+0xa>
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000b192:	46c0      	nop			; (mov r8, r8)
1000b194:	46bd      	mov	sp, r7
1000b196:	b002      	add	sp, #8
1000b198:	bd80      	pop	{r7, pc}
1000b19a:	46c0      	nop			; (mov r8, r8)
1000b19c:	10019a8c 	.word	0x10019a8c
1000b1a0:	1000b0e9 	.word	0x1000b0e9

1000b1a4 <dualtimer_get_config_defaults>:
 * modified by the user application.
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
1000b1a4:	b580      	push	{r7, lr}
1000b1a6:	b082      	sub	sp, #8
1000b1a8:	af00      	add	r7, sp, #0
1000b1aa:	6078      	str	r0, [r7, #4]
	config->timer1.timer_enable = true;
1000b1ac:	687b      	ldr	r3, [r7, #4]
1000b1ae:	2201      	movs	r2, #1
1000b1b0:	701a      	strb	r2, [r3, #0]
	config->timer2.timer_enable = true;
1000b1b2:	687b      	ldr	r3, [r7, #4]
1000b1b4:	2201      	movs	r2, #1
1000b1b6:	731a      	strb	r2, [r3, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b1b8:	687b      	ldr	r3, [r7, #4]
1000b1ba:	2202      	movs	r2, #2
1000b1bc:	705a      	strb	r2, [r3, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b1be:	687b      	ldr	r3, [r7, #4]
1000b1c0:	2202      	movs	r2, #2
1000b1c2:	735a      	strb	r2, [r3, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b1c4:	687b      	ldr	r3, [r7, #4]
1000b1c6:	2201      	movs	r2, #1
1000b1c8:	709a      	strb	r2, [r3, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b1ca:	687b      	ldr	r3, [r7, #4]
1000b1cc:	2201      	movs	r2, #1
1000b1ce:	739a      	strb	r2, [r3, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b1d0:	687b      	ldr	r3, [r7, #4]
1000b1d2:	2200      	movs	r2, #0
1000b1d4:	70da      	strb	r2, [r3, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b1d6:	687b      	ldr	r3, [r7, #4]
1000b1d8:	2200      	movs	r2, #0
1000b1da:	73da      	strb	r2, [r3, #15]

	config->timer1.interrup_enable = true;
1000b1dc:	687b      	ldr	r3, [r7, #4]
1000b1de:	2201      	movs	r2, #1
1000b1e0:	711a      	strb	r2, [r3, #4]
	config->timer2.interrup_enable = true;
1000b1e2:	687b      	ldr	r3, [r7, #4]
1000b1e4:	2201      	movs	r2, #1
1000b1e6:	741a      	strb	r2, [r3, #16]

	config->timer1.load_value = 0;
1000b1e8:	687b      	ldr	r3, [r7, #4]
1000b1ea:	2200      	movs	r2, #0
1000b1ec:	609a      	str	r2, [r3, #8]
	config->timer2.load_value = 0;
1000b1ee:	687b      	ldr	r3, [r7, #4]
1000b1f0:	2200      	movs	r2, #0
1000b1f2:	615a      	str	r2, [r3, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b1f4:	687b      	ldr	r3, [r7, #4]
1000b1f6:	2200      	movs	r2, #0
1000b1f8:	761a      	strb	r2, [r3, #24]
}
1000b1fa:	46c0      	nop			; (mov r8, r8)
1000b1fc:	46bd      	mov	sp, r7
1000b1fe:	b002      	add	sp, #8
1000b200:	bd80      	pop	{r7, pc}
1000b202:	46c0      	nop			; (mov r8, r8)

1000b204 <dualtimer_get_interrupt_status>:
 * \param[in]     timer        Timer1/Timer2
 *
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
1000b204:	b580      	push	{r7, lr}
1000b206:	b082      	sub	sp, #8
1000b208:	af00      	add	r7, sp, #0
1000b20a:	0002      	movs	r2, r0
1000b20c:	1dfb      	adds	r3, r7, #7
1000b20e:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000b210:	1dfb      	adds	r3, r7, #7
1000b212:	781b      	ldrb	r3, [r3, #0]
1000b214:	2b00      	cmp	r3, #0
1000b216:	d103      	bne.n	1000b220 <dualtimer_get_interrupt_status+0x1c>
		return DUALTIMER0->TIMER1MIS.reg;
1000b218:	4b05      	ldr	r3, [pc, #20]	; (1000b230 <dualtimer_get_interrupt_status+0x2c>)
1000b21a:	7d1b      	ldrb	r3, [r3, #20]
1000b21c:	b2db      	uxtb	r3, r3
1000b21e:	e003      	b.n	1000b228 <dualtimer_get_interrupt_status+0x24>
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b220:	4a03      	ldr	r2, [pc, #12]	; (1000b230 <dualtimer_get_interrupt_status+0x2c>)
1000b222:	2334      	movs	r3, #52	; 0x34
1000b224:	5cd3      	ldrb	r3, [r2, r3]
1000b226:	b2db      	uxtb	r3, r3
	}
}
1000b228:	0018      	movs	r0, r3
1000b22a:	46bd      	mov	sp, r7
1000b22c:	b002      	add	sp, #8
1000b22e:	bd80      	pop	{r7, pc}
1000b230:	40001000 	.word	0x40001000

1000b234 <dualtimer_clear_interrupt_status>:
 * Clear the Dualtimer module timer1/timer2 interrupt status
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
1000b234:	b580      	push	{r7, lr}
1000b236:	b082      	sub	sp, #8
1000b238:	af00      	add	r7, sp, #0
1000b23a:	0002      	movs	r2, r0
1000b23c:	1dfb      	adds	r3, r7, #7
1000b23e:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000b240:	1dfb      	adds	r3, r7, #7
1000b242:	781b      	ldrb	r3, [r3, #0]
1000b244:	2b00      	cmp	r3, #0
1000b246:	d103      	bne.n	1000b250 <dualtimer_clear_interrupt_status+0x1c>
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b248:	4b05      	ldr	r3, [pc, #20]	; (1000b260 <dualtimer_clear_interrupt_status+0x2c>)
1000b24a:	2201      	movs	r2, #1
1000b24c:	731a      	strb	r2, [r3, #12]
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
	}
}
1000b24e:	e003      	b.n	1000b258 <dualtimer_clear_interrupt_status+0x24>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b250:	4a03      	ldr	r2, [pc, #12]	; (1000b260 <dualtimer_clear_interrupt_status+0x2c>)
1000b252:	232c      	movs	r3, #44	; 0x2c
1000b254:	2101      	movs	r1, #1
1000b256:	54d1      	strb	r1, [r2, r3]
	}
}
1000b258:	46c0      	nop			; (mov r8, r8)
1000b25a:	46bd      	mov	sp, r7
1000b25c:	b002      	add	sp, #8
1000b25e:	bd80      	pop	{r7, pc}
1000b260:	40001000 	.word	0x40001000

1000b264 <dualtimer_enable>:
 * Enable the Dualtimer module timer1/timer2
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
1000b264:	b580      	push	{r7, lr}
1000b266:	b082      	sub	sp, #8
1000b268:	af00      	add	r7, sp, #0
1000b26a:	0002      	movs	r2, r0
1000b26c:	1dfb      	adds	r3, r7, #7
1000b26e:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000b270:	1dfb      	adds	r3, r7, #7
1000b272:	781b      	ldrb	r3, [r3, #0]
1000b274:	2b00      	cmp	r3, #0
1000b276:	d109      	bne.n	1000b28c <dualtimer_enable+0x28>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b278:	490c      	ldr	r1, [pc, #48]	; (1000b2ac <dualtimer_enable+0x48>)
1000b27a:	4b0c      	ldr	r3, [pc, #48]	; (1000b2ac <dualtimer_enable+0x48>)
1000b27c:	7a1b      	ldrb	r3, [r3, #8]
1000b27e:	b2db      	uxtb	r3, r3
1000b280:	2280      	movs	r2, #128	; 0x80
1000b282:	4252      	negs	r2, r2
1000b284:	4313      	orrs	r3, r2
1000b286:	b2db      	uxtb	r3, r3
1000b288:	720b      	strb	r3, [r1, #8]
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
	}
}
1000b28a:	e00a      	b.n	1000b2a2 <dualtimer_enable+0x3e>
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b28c:	4907      	ldr	r1, [pc, #28]	; (1000b2ac <dualtimer_enable+0x48>)
1000b28e:	4a07      	ldr	r2, [pc, #28]	; (1000b2ac <dualtimer_enable+0x48>)
1000b290:	2328      	movs	r3, #40	; 0x28
1000b292:	5cd3      	ldrb	r3, [r2, r3]
1000b294:	b2db      	uxtb	r3, r3
1000b296:	2280      	movs	r2, #128	; 0x80
1000b298:	4252      	negs	r2, r2
1000b29a:	4313      	orrs	r3, r2
1000b29c:	b2da      	uxtb	r2, r3
1000b29e:	2328      	movs	r3, #40	; 0x28
1000b2a0:	54ca      	strb	r2, [r1, r3]
	}
}
1000b2a2:	46c0      	nop			; (mov r8, r8)
1000b2a4:	46bd      	mov	sp, r7
1000b2a6:	b002      	add	sp, #8
1000b2a8:	bd80      	pop	{r7, pc}
1000b2aa:	46c0      	nop			; (mov r8, r8)
1000b2ac:	40001000 	.word	0x40001000

1000b2b0 <dualtimer_disable>:
 * Disable the Dualtimer module timer1/timer2
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
1000b2b0:	b580      	push	{r7, lr}
1000b2b2:	b082      	sub	sp, #8
1000b2b4:	af00      	add	r7, sp, #0
1000b2b6:	0002      	movs	r2, r0
1000b2b8:	1dfb      	adds	r3, r7, #7
1000b2ba:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000b2bc:	1dfb      	adds	r3, r7, #7
1000b2be:	781b      	ldrb	r3, [r3, #0]
1000b2c0:	2b00      	cmp	r3, #0
1000b2c2:	d108      	bne.n	1000b2d6 <dualtimer_disable+0x26>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b2c4:	4a0b      	ldr	r2, [pc, #44]	; (1000b2f4 <dualtimer_disable+0x44>)
1000b2c6:	4b0b      	ldr	r3, [pc, #44]	; (1000b2f4 <dualtimer_disable+0x44>)
1000b2c8:	7a1b      	ldrb	r3, [r3, #8]
1000b2ca:	b2db      	uxtb	r3, r3
1000b2cc:	217f      	movs	r1, #127	; 0x7f
1000b2ce:	400b      	ands	r3, r1
1000b2d0:	b2db      	uxtb	r3, r3
1000b2d2:	7213      	strb	r3, [r2, #8]
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
	}
}
1000b2d4:	e009      	b.n	1000b2ea <dualtimer_disable+0x3a>
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b2d6:	4a07      	ldr	r2, [pc, #28]	; (1000b2f4 <dualtimer_disable+0x44>)
1000b2d8:	4906      	ldr	r1, [pc, #24]	; (1000b2f4 <dualtimer_disable+0x44>)
1000b2da:	2328      	movs	r3, #40	; 0x28
1000b2dc:	5ccb      	ldrb	r3, [r1, r3]
1000b2de:	b2db      	uxtb	r3, r3
1000b2e0:	217f      	movs	r1, #127	; 0x7f
1000b2e2:	400b      	ands	r3, r1
1000b2e4:	b2d9      	uxtb	r1, r3
1000b2e6:	2328      	movs	r3, #40	; 0x28
1000b2e8:	54d1      	strb	r1, [r2, r3]
	}
}
1000b2ea:	46c0      	nop			; (mov r8, r8)
1000b2ec:	46bd      	mov	sp, r7
1000b2ee:	b002      	add	sp, #8
1000b2f0:	bd80      	pop	{r7, pc}
1000b2f2:	46c0      	nop			; (mov r8, r8)
1000b2f4:	40001000 	.word	0x40001000

1000b2f8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b2f8:	b580      	push	{r7, lr}
1000b2fa:	af00      	add	r7, sp, #0
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b2fc:	2000      	movs	r0, #0
1000b2fe:	4b10      	ldr	r3, [pc, #64]	; (1000b340 <dualtimer_isr_handler+0x48>)
1000b300:	4798      	blx	r3
1000b302:	1e03      	subs	r3, r0, #0
1000b304:	d009      	beq.n	1000b31a <dualtimer_isr_handler+0x22>
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
1000b306:	2000      	movs	r0, #0
1000b308:	4b0e      	ldr	r3, [pc, #56]	; (1000b344 <dualtimer_isr_handler+0x4c>)
1000b30a:	4798      	blx	r3
		if (dualtimer_callback_timer1)
1000b30c:	4b0e      	ldr	r3, [pc, #56]	; (1000b348 <dualtimer_isr_handler+0x50>)
1000b30e:	681b      	ldr	r3, [r3, #0]
1000b310:	2b00      	cmp	r3, #0
1000b312:	d002      	beq.n	1000b31a <dualtimer_isr_handler+0x22>
			dualtimer_callback_timer1();
1000b314:	4b0c      	ldr	r3, [pc, #48]	; (1000b348 <dualtimer_isr_handler+0x50>)
1000b316:	681b      	ldr	r3, [r3, #0]
1000b318:	4798      	blx	r3
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b31a:	2001      	movs	r0, #1
1000b31c:	4b08      	ldr	r3, [pc, #32]	; (1000b340 <dualtimer_isr_handler+0x48>)
1000b31e:	4798      	blx	r3
1000b320:	1e03      	subs	r3, r0, #0
1000b322:	d009      	beq.n	1000b338 <dualtimer_isr_handler+0x40>
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
1000b324:	2001      	movs	r0, #1
1000b326:	4b07      	ldr	r3, [pc, #28]	; (1000b344 <dualtimer_isr_handler+0x4c>)
1000b328:	4798      	blx	r3
		if (dualtimer_callback_timer2)
1000b32a:	4b08      	ldr	r3, [pc, #32]	; (1000b34c <dualtimer_isr_handler+0x54>)
1000b32c:	681b      	ldr	r3, [r3, #0]
1000b32e:	2b00      	cmp	r3, #0
1000b330:	d002      	beq.n	1000b338 <dualtimer_isr_handler+0x40>
			dualtimer_callback_timer2();
1000b332:	4b06      	ldr	r3, [pc, #24]	; (1000b34c <dualtimer_isr_handler+0x54>)
1000b334:	681b      	ldr	r3, [r3, #0]
1000b336:	4798      	blx	r3
	}
}
1000b338:	46c0      	nop			; (mov r8, r8)
1000b33a:	46bd      	mov	sp, r7
1000b33c:	bd80      	pop	{r7, pc}
1000b33e:	46c0      	nop			; (mov r8, r8)
1000b340:	1000b205 	.word	0x1000b205
1000b344:	1000b235 	.word	0x1000b235
1000b348:	10019b58 	.word	0x10019b58
1000b34c:	10019b5c 	.word	0x10019b5c

1000b350 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b350:	b580      	push	{r7, lr}
1000b352:	b084      	sub	sp, #16
1000b354:	af00      	add	r7, sp, #0
1000b356:	6078      	str	r0, [r7, #4]
	uint8_t regval = 0;
1000b358:	230f      	movs	r3, #15
1000b35a:	18fb      	adds	r3, r7, r3
1000b35c:	2200      	movs	r2, #0
1000b35e:	701a      	strb	r2, [r3, #0]

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b360:	2004      	movs	r0, #4
1000b362:	4b6d      	ldr	r3, [pc, #436]	; (1000b518 <dualtimer_init+0x1c8>)
1000b364:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b366:	687b      	ldr	r3, [r7, #4]
1000b368:	781b      	ldrb	r3, [r3, #0]
1000b36a:	2b00      	cmp	r3, #0
1000b36c:	d103      	bne.n	1000b376 <dualtimer_init+0x26>
1000b36e:	687b      	ldr	r3, [r7, #4]
1000b370:	7b1b      	ldrb	r3, [r3, #12]
1000b372:	2b00      	cmp	r3, #0
1000b374:	d014      	beq.n	1000b3a0 <dualtimer_init+0x50>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b376:	4b69      	ldr	r3, [pc, #420]	; (1000b51c <dualtimer_init+0x1cc>)
1000b378:	4a68      	ldr	r2, [pc, #416]	; (1000b51c <dualtimer_init+0x1cc>)
1000b37a:	68d2      	ldr	r2, [r2, #12]
1000b37c:	2120      	movs	r1, #32
1000b37e:	430a      	orrs	r2, r1
1000b380:	60da      	str	r2, [r3, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
1000b382:	4a66      	ldr	r2, [pc, #408]	; (1000b51c <dualtimer_init+0x1cc>)
1000b384:	687b      	ldr	r3, [r7, #4]
1000b386:	7e1b      	ldrb	r3, [r3, #24]
1000b388:	1c19      	adds	r1, r3, #0
1000b38a:	2303      	movs	r3, #3
1000b38c:	400b      	ands	r3, r1
1000b38e:	b2d9      	uxtb	r1, r3
1000b390:	6993      	ldr	r3, [r2, #24]
1000b392:	2003      	movs	r0, #3
1000b394:	4001      	ands	r1, r0
1000b396:	0109      	lsls	r1, r1, #4
1000b398:	2030      	movs	r0, #48	; 0x30
1000b39a:	4383      	bics	r3, r0
1000b39c:	430b      	orrs	r3, r1
1000b39e:	6193      	str	r3, [r2, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000b3a0:	687b      	ldr	r3, [r7, #4]
1000b3a2:	781b      	ldrb	r3, [r3, #0]
1000b3a4:	2b00      	cmp	r3, #0
1000b3a6:	d054      	beq.n	1000b452 <dualtimer_init+0x102>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b3a8:	687b      	ldr	r3, [r7, #4]
1000b3aa:	785b      	ldrb	r3, [r3, #1]
1000b3ac:	2b00      	cmp	r3, #0
1000b3ae:	d104      	bne.n	1000b3ba <dualtimer_init+0x6a>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b3b0:	230f      	movs	r3, #15
1000b3b2:	18fb      	adds	r3, r7, r3
1000b3b4:	2201      	movs	r2, #1
1000b3b6:	701a      	strb	r2, [r3, #0]
1000b3b8:	e010      	b.n	1000b3dc <dualtimer_init+0x8c>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b3ba:	687b      	ldr	r3, [r7, #4]
1000b3bc:	785b      	ldrb	r3, [r3, #1]
1000b3be:	2b01      	cmp	r3, #1
1000b3c0:	d104      	bne.n	1000b3cc <dualtimer_init+0x7c>
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
1000b3c2:	230f      	movs	r3, #15
1000b3c4:	18fb      	adds	r3, r7, r3
1000b3c6:	2200      	movs	r2, #0
1000b3c8:	701a      	strb	r2, [r3, #0]
1000b3ca:	e007      	b.n	1000b3dc <dualtimer_init+0x8c>
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b3cc:	687b      	ldr	r3, [r7, #4]
1000b3ce:	785b      	ldrb	r3, [r3, #1]
1000b3d0:	2b02      	cmp	r3, #2
1000b3d2:	d103      	bne.n	1000b3dc <dualtimer_init+0x8c>
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b3d4:	230f      	movs	r3, #15
1000b3d6:	18fb      	adds	r3, r7, r3
1000b3d8:	2240      	movs	r2, #64	; 0x40
1000b3da:	701a      	strb	r2, [r3, #0]
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
1000b3dc:	687b      	ldr	r3, [r7, #4]
1000b3de:	789b      	ldrb	r3, [r3, #2]
1000b3e0:	18db      	adds	r3, r3, r3
1000b3e2:	b2db      	uxtb	r3, r3
1000b3e4:	2202      	movs	r2, #2
1000b3e6:	4013      	ands	r3, r2
1000b3e8:	b2da      	uxtb	r2, r3
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
1000b3ea:	687b      	ldr	r3, [r7, #4]
1000b3ec:	78db      	ldrb	r3, [r3, #3]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
1000b3ee:	009b      	lsls	r3, r3, #2
1000b3f0:	b2db      	uxtb	r3, r3
1000b3f2:	210c      	movs	r1, #12
1000b3f4:	400b      	ands	r3, r1
1000b3f6:	b2db      	uxtb	r3, r3
1000b3f8:	4313      	orrs	r3, r2
1000b3fa:	b2d9      	uxtb	r1, r3
1000b3fc:	230f      	movs	r3, #15
1000b3fe:	18fb      	adds	r3, r7, r3
1000b400:	220f      	movs	r2, #15
1000b402:	18ba      	adds	r2, r7, r2
1000b404:	7812      	ldrb	r2, [r2, #0]
1000b406:	430a      	orrs	r2, r1
1000b408:	701a      	strb	r2, [r3, #0]
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b40a:	687b      	ldr	r3, [r7, #4]
1000b40c:	791b      	ldrb	r3, [r3, #4]
1000b40e:	2b00      	cmp	r3, #0
1000b410:	d007      	beq.n	1000b422 <dualtimer_init+0xd2>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b412:	230f      	movs	r3, #15
1000b414:	18fb      	adds	r3, r7, r3
1000b416:	220f      	movs	r2, #15
1000b418:	18ba      	adds	r2, r7, r2
1000b41a:	7812      	ldrb	r2, [r2, #0]
1000b41c:	2120      	movs	r1, #32
1000b41e:	430a      	orrs	r2, r1
1000b420:	701a      	strb	r2, [r3, #0]
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b422:	4a3f      	ldr	r2, [pc, #252]	; (1000b520 <dualtimer_init+0x1d0>)
1000b424:	687b      	ldr	r3, [r7, #4]
1000b426:	689b      	ldr	r3, [r3, #8]
1000b428:	6013      	str	r3, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b42a:	4a3d      	ldr	r2, [pc, #244]	; (1000b520 <dualtimer_init+0x1d0>)
1000b42c:	230f      	movs	r3, #15
1000b42e:	18fb      	adds	r3, r7, r3
1000b430:	781b      	ldrb	r3, [r3, #0]
1000b432:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
1000b434:	4a39      	ldr	r2, [pc, #228]	; (1000b51c <dualtimer_init+0x1cc>)
1000b436:	4939      	ldr	r1, [pc, #228]	; (1000b51c <dualtimer_init+0x1cc>)
1000b438:	23c4      	movs	r3, #196	; 0xc4
1000b43a:	005b      	lsls	r3, r3, #1
1000b43c:	5ccb      	ldrb	r3, [r1, r3]
1000b43e:	b2db      	uxtb	r3, r3
1000b440:	2101      	movs	r1, #1
1000b442:	430b      	orrs	r3, r1
1000b444:	b2d9      	uxtb	r1, r3
1000b446:	23c4      	movs	r3, #196	; 0xc4
1000b448:	005b      	lsls	r3, r3, #1
1000b44a:	54d1      	strb	r1, [r2, r3]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b44c:	2000      	movs	r0, #0
1000b44e:	4b35      	ldr	r3, [pc, #212]	; (1000b524 <dualtimer_init+0x1d4>)
1000b450:	4798      	blx	r3
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b452:	687b      	ldr	r3, [r7, #4]
1000b454:	7b1b      	ldrb	r3, [r3, #12]
1000b456:	2b00      	cmp	r3, #0
1000b458:	d055      	beq.n	1000b506 <dualtimer_init+0x1b6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b45a:	687b      	ldr	r3, [r7, #4]
1000b45c:	7b5b      	ldrb	r3, [r3, #13]
1000b45e:	2b00      	cmp	r3, #0
1000b460:	d104      	bne.n	1000b46c <dualtimer_init+0x11c>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b462:	230f      	movs	r3, #15
1000b464:	18fb      	adds	r3, r7, r3
1000b466:	2201      	movs	r2, #1
1000b468:	701a      	strb	r2, [r3, #0]
1000b46a:	e010      	b.n	1000b48e <dualtimer_init+0x13e>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b46c:	687b      	ldr	r3, [r7, #4]
1000b46e:	7b5b      	ldrb	r3, [r3, #13]
1000b470:	2b01      	cmp	r3, #1
1000b472:	d104      	bne.n	1000b47e <dualtimer_init+0x12e>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b474:	230f      	movs	r3, #15
1000b476:	18fb      	adds	r3, r7, r3
1000b478:	2200      	movs	r2, #0
1000b47a:	701a      	strb	r2, [r3, #0]
1000b47c:	e007      	b.n	1000b48e <dualtimer_init+0x13e>
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b47e:	687b      	ldr	r3, [r7, #4]
1000b480:	7b5b      	ldrb	r3, [r3, #13]
1000b482:	2b02      	cmp	r3, #2
1000b484:	d103      	bne.n	1000b48e <dualtimer_init+0x13e>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b486:	230f      	movs	r3, #15
1000b488:	18fb      	adds	r3, r7, r3
1000b48a:	2240      	movs	r2, #64	; 0x40
1000b48c:	701a      	strb	r2, [r3, #0]
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
1000b48e:	687b      	ldr	r3, [r7, #4]
1000b490:	7b9b      	ldrb	r3, [r3, #14]
1000b492:	18db      	adds	r3, r3, r3
1000b494:	b2db      	uxtb	r3, r3
1000b496:	2202      	movs	r2, #2
1000b498:	4013      	ands	r3, r2
1000b49a:	b2da      	uxtb	r2, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
1000b49c:	687b      	ldr	r3, [r7, #4]
1000b49e:	7bdb      	ldrb	r3, [r3, #15]
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
1000b4a0:	009b      	lsls	r3, r3, #2
1000b4a2:	b2db      	uxtb	r3, r3
1000b4a4:	210c      	movs	r1, #12
1000b4a6:	400b      	ands	r3, r1
1000b4a8:	b2db      	uxtb	r3, r3
1000b4aa:	4313      	orrs	r3, r2
1000b4ac:	b2d9      	uxtb	r1, r3
1000b4ae:	230f      	movs	r3, #15
1000b4b0:	18fb      	adds	r3, r7, r3
1000b4b2:	220f      	movs	r2, #15
1000b4b4:	18ba      	adds	r2, r7, r2
1000b4b6:	7812      	ldrb	r2, [r2, #0]
1000b4b8:	430a      	orrs	r2, r1
1000b4ba:	701a      	strb	r2, [r3, #0]
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b4bc:	687b      	ldr	r3, [r7, #4]
1000b4be:	7c1b      	ldrb	r3, [r3, #16]
1000b4c0:	2b00      	cmp	r3, #0
1000b4c2:	d007      	beq.n	1000b4d4 <dualtimer_init+0x184>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b4c4:	230f      	movs	r3, #15
1000b4c6:	18fb      	adds	r3, r7, r3
1000b4c8:	220f      	movs	r2, #15
1000b4ca:	18ba      	adds	r2, r7, r2
1000b4cc:	7812      	ldrb	r2, [r2, #0]
1000b4ce:	2120      	movs	r1, #32
1000b4d0:	430a      	orrs	r2, r1
1000b4d2:	701a      	strb	r2, [r3, #0]
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b4d4:	4a12      	ldr	r2, [pc, #72]	; (1000b520 <dualtimer_init+0x1d0>)
1000b4d6:	687b      	ldr	r3, [r7, #4]
1000b4d8:	695b      	ldr	r3, [r3, #20]
1000b4da:	6213      	str	r3, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b4dc:	4910      	ldr	r1, [pc, #64]	; (1000b520 <dualtimer_init+0x1d0>)
1000b4de:	230f      	movs	r3, #15
1000b4e0:	18fb      	adds	r3, r7, r3
1000b4e2:	2228      	movs	r2, #40	; 0x28
1000b4e4:	781b      	ldrb	r3, [r3, #0]
1000b4e6:	548b      	strb	r3, [r1, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
1000b4e8:	4a0c      	ldr	r2, [pc, #48]	; (1000b51c <dualtimer_init+0x1cc>)
1000b4ea:	490c      	ldr	r1, [pc, #48]	; (1000b51c <dualtimer_init+0x1cc>)
1000b4ec:	23c4      	movs	r3, #196	; 0xc4
1000b4ee:	005b      	lsls	r3, r3, #1
1000b4f0:	5ccb      	ldrb	r3, [r1, r3]
1000b4f2:	b2db      	uxtb	r3, r3
1000b4f4:	2102      	movs	r1, #2
1000b4f6:	430b      	orrs	r3, r1
1000b4f8:	b2d9      	uxtb	r1, r3
1000b4fa:	23c4      	movs	r3, #196	; 0xc4
1000b4fc:	005b      	lsls	r3, r3, #1
1000b4fe:	54d1      	strb	r1, [r2, r3]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b500:	2001      	movs	r0, #1
1000b502:	4b08      	ldr	r3, [pc, #32]	; (1000b524 <dualtimer_init+0x1d4>)
1000b504:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b506:	4b08      	ldr	r3, [pc, #32]	; (1000b528 <dualtimer_init+0x1d8>)
1000b508:	0019      	movs	r1, r3
1000b50a:	201e      	movs	r0, #30
1000b50c:	4b07      	ldr	r3, [pc, #28]	; (1000b52c <dualtimer_init+0x1dc>)
1000b50e:	4798      	blx	r3
}
1000b510:	46c0      	nop			; (mov r8, r8)
1000b512:	46bd      	mov	sp, r7
1000b514:	b004      	add	sp, #16
1000b516:	bd80      	pop	{r7, pc}
1000b518:	1000dfc1 	.word	0x1000dfc1
1000b51c:	4000b000 	.word	0x4000b000
1000b520:	40001000 	.word	0x40001000
1000b524:	1000b265 	.word	0x1000b265
1000b528:	1000b2f9 	.word	0x1000b2f9
1000b52c:	1000e561 	.word	0x1000e561

1000b530 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
1000b530:	b580      	push	{r7, lr}
1000b532:	b082      	sub	sp, #8
1000b534:	af00      	add	r7, sp, #0
1000b536:	0002      	movs	r2, r0
1000b538:	1dfb      	adds	r3, r7, #7
1000b53a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b53c:	4a08      	ldr	r2, [pc, #32]	; (1000b560 <NVIC_ClearPendingIRQ+0x30>)
1000b53e:	1dfb      	adds	r3, r7, #7
1000b540:	781b      	ldrb	r3, [r3, #0]
1000b542:	0019      	movs	r1, r3
1000b544:	231f      	movs	r3, #31
1000b546:	400b      	ands	r3, r1
1000b548:	2101      	movs	r1, #1
1000b54a:	4099      	lsls	r1, r3
1000b54c:	000b      	movs	r3, r1
1000b54e:	0019      	movs	r1, r3
1000b550:	23c0      	movs	r3, #192	; 0xc0
1000b552:	005b      	lsls	r3, r3, #1
1000b554:	50d1      	str	r1, [r2, r3]
}
1000b556:	46c0      	nop			; (mov r8, r8)
1000b558:	46bd      	mov	sp, r7
1000b55a:	b002      	add	sp, #8
1000b55c:	bd80      	pop	{r7, pc}
1000b55e:	46c0      	nop			; (mov r8, r8)
1000b560:	e000e100 	.word	0xe000e100

1000b564 <gpio_get_config_defaults>:
 *   \li Input mode with internal pullup enabled
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
1000b564:	b580      	push	{r7, lr}
1000b566:	b082      	sub	sp, #8
1000b568:	af00      	add	r7, sp, #0
1000b56a:	6078      	str	r0, [r7, #4]
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b56c:	687b      	ldr	r3, [r7, #4]
1000b56e:	2200      	movs	r2, #0
1000b570:	701a      	strb	r2, [r3, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b572:	687b      	ldr	r3, [r7, #4]
1000b574:	2201      	movs	r2, #1
1000b576:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
1000b578:	687b      	ldr	r3, [r7, #4]
1000b57a:	2200      	movs	r2, #0
1000b57c:	709a      	strb	r2, [r3, #2]
	config->aon_wakeup = false;
1000b57e:	687b      	ldr	r3, [r7, #4]
1000b580:	2200      	movs	r2, #0
1000b582:	70da      	strb	r2, [r3, #3]
}
1000b584:	46c0      	nop			; (mov r8, r8)
1000b586:	46bd      	mov	sp, r7
1000b588:	b002      	add	sp, #8
1000b58a:	bd80      	pop	{r7, pc}

1000b58c <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b58c:	b580      	push	{r7, lr}
1000b58e:	b084      	sub	sp, #16
1000b590:	af00      	add	r7, sp, #0
1000b592:	0002      	movs	r2, r0
1000b594:	6039      	str	r1, [r7, #0]
1000b596:	1dfb      	adds	r3, r7, #7
1000b598:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
1000b59a:	230f      	movs	r3, #15
1000b59c:	18fb      	adds	r3, r7, r3
1000b59e:	2200      	movs	r2, #0
1000b5a0:	701a      	strb	r2, [r3, #0]

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b5a2:	1dfb      	adds	r3, r7, #7
1000b5a4:	781b      	ldrb	r3, [r3, #0]
1000b5a6:	2b00      	cmp	r3, #0
1000b5a8:	d007      	beq.n	1000b5ba <gpio_pin_set_config+0x2e>
1000b5aa:	1dfb      	adds	r3, r7, #7
1000b5ac:	781b      	ldrb	r3, [r3, #0]
1000b5ae:	2b01      	cmp	r3, #1
1000b5b0:	d003      	beq.n	1000b5ba <gpio_pin_set_config+0x2e>
		(gpio_pin == PIN_LP_GPIO_1) || \
1000b5b2:	1dfb      	adds	r3, r7, #7
1000b5b4:	781b      	ldrb	r3, [r3, #0]
1000b5b6:	2b0e      	cmp	r3, #14
1000b5b8:	d104      	bne.n	1000b5c4 <gpio_pin_set_config+0x38>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b5ba:	230f      	movs	r3, #15
1000b5bc:	18fb      	adds	r3, r7, r3
1000b5be:	2217      	movs	r2, #23
1000b5c0:	701a      	strb	r2, [r3, #0]
1000b5c2:	e108      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
	} else {
		if (gpio_pin <= 7) {
1000b5c4:	1dfb      	adds	r3, r7, #7
1000b5c6:	781b      	ldrb	r3, [r3, #0]
1000b5c8:	2b07      	cmp	r3, #7
1000b5ca:	d80e      	bhi.n	1000b5ea <gpio_pin_set_config+0x5e>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5cc:	4b85      	ldr	r3, [pc, #532]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b5ce:	4a85      	ldr	r2, [pc, #532]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b5d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
1000b5d2:	1df9      	adds	r1, r7, #7
1000b5d4:	7809      	ldrb	r1, [r1, #0]
1000b5d6:	2007      	movs	r0, #7
1000b5d8:	4001      	ands	r1, r0
1000b5da:	0089      	lsls	r1, r1, #2
1000b5dc:	2007      	movs	r0, #7
1000b5de:	4088      	lsls	r0, r1
1000b5e0:	0001      	movs	r1, r0
1000b5e2:	43c9      	mvns	r1, r1
1000b5e4:	400a      	ands	r2, r1
1000b5e6:	645a      	str	r2, [r3, #68]	; 0x44
1000b5e8:	e024      	b.n	1000b634 <gpio_pin_set_config+0xa8>
		} else if (gpio_pin <= 15) {
1000b5ea:	1dfb      	adds	r3, r7, #7
1000b5ec:	781b      	ldrb	r3, [r3, #0]
1000b5ee:	2b0f      	cmp	r3, #15
1000b5f0:	d80e      	bhi.n	1000b610 <gpio_pin_set_config+0x84>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5f2:	4b7c      	ldr	r3, [pc, #496]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b5f4:	4a7b      	ldr	r2, [pc, #492]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b5f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000b5f8:	1df9      	adds	r1, r7, #7
1000b5fa:	7809      	ldrb	r1, [r1, #0]
1000b5fc:	2007      	movs	r0, #7
1000b5fe:	4001      	ands	r1, r0
1000b600:	0089      	lsls	r1, r1, #2
1000b602:	2007      	movs	r0, #7
1000b604:	4088      	lsls	r0, r1
1000b606:	0001      	movs	r1, r0
1000b608:	43c9      	mvns	r1, r1
1000b60a:	400a      	ands	r2, r1
1000b60c:	649a      	str	r2, [r3, #72]	; 0x48
1000b60e:	e011      	b.n	1000b634 <gpio_pin_set_config+0xa8>
		} else if (gpio_pin <= 23) {
1000b610:	1dfb      	adds	r3, r7, #7
1000b612:	781b      	ldrb	r3, [r3, #0]
1000b614:	2b17      	cmp	r3, #23
1000b616:	d80d      	bhi.n	1000b634 <gpio_pin_set_config+0xa8>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b618:	4b72      	ldr	r3, [pc, #456]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b61a:	4a72      	ldr	r2, [pc, #456]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b61c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000b61e:	1df9      	adds	r1, r7, #7
1000b620:	7809      	ldrb	r1, [r1, #0]
1000b622:	2007      	movs	r0, #7
1000b624:	4001      	ands	r1, r0
1000b626:	0089      	lsls	r1, r1, #2
1000b628:	2007      	movs	r0, #7
1000b62a:	4088      	lsls	r0, r1
1000b62c:	0001      	movs	r1, r0
1000b62e:	43c9      	mvns	r1, r1
1000b630:	400a      	ands	r2, r1
1000b632:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b634:	1dfb      	adds	r3, r7, #7
1000b636:	781b      	ldrb	r3, [r3, #0]
1000b638:	2b1f      	cmp	r3, #31
1000b63a:	d007      	beq.n	1000b64c <gpio_pin_set_config+0xc0>
1000b63c:	1dfb      	adds	r3, r7, #7
1000b63e:	781b      	ldrb	r3, [r3, #0]
1000b640:	2b1e      	cmp	r3, #30
1000b642:	d003      	beq.n	1000b64c <gpio_pin_set_config+0xc0>
1000b644:	1dfb      	adds	r3, r7, #7
1000b646:	781b      	ldrb	r3, [r3, #0]
1000b648:	2b1d      	cmp	r3, #29
1000b64a:	d145      	bne.n	1000b6d8 <gpio_pin_set_config+0x14c>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b64c:	683b      	ldr	r3, [r7, #0]
1000b64e:	785b      	ldrb	r3, [r3, #1]
1000b650:	2b01      	cmp	r3, #1
1000b652:	d113      	bne.n	1000b67c <gpio_pin_set_config+0xf0>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b654:	4964      	ldr	r1, [pc, #400]	; (1000b7e8 <gpio_pin_set_config+0x25c>)
1000b656:	4b64      	ldr	r3, [pc, #400]	; (1000b7e8 <gpio_pin_set_config+0x25c>)
1000b658:	7d1b      	ldrb	r3, [r3, #20]
1000b65a:	b2db      	uxtb	r3, r3
1000b65c:	b25b      	sxtb	r3, r3
1000b65e:	1dfa      	adds	r2, r7, #7
1000b660:	7812      	ldrb	r2, [r2, #0]
1000b662:	201f      	movs	r0, #31
1000b664:	1a82      	subs	r2, r0, r2
1000b666:	2001      	movs	r0, #1
1000b668:	4090      	lsls	r0, r2
1000b66a:	0002      	movs	r2, r0
1000b66c:	b252      	sxtb	r2, r2
1000b66e:	43d2      	mvns	r2, r2
1000b670:	b252      	sxtb	r2, r2
1000b672:	4013      	ands	r3, r2
1000b674:	b25b      	sxtb	r3, r3
1000b676:	b2db      	uxtb	r3, r3
1000b678:	750b      	strb	r3, [r1, #20]
1000b67a:	e010      	b.n	1000b69e <gpio_pin_set_config+0x112>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b67c:	495a      	ldr	r1, [pc, #360]	; (1000b7e8 <gpio_pin_set_config+0x25c>)
1000b67e:	4b5a      	ldr	r3, [pc, #360]	; (1000b7e8 <gpio_pin_set_config+0x25c>)
1000b680:	7d1b      	ldrb	r3, [r3, #20]
1000b682:	b2db      	uxtb	r3, r3
1000b684:	b25a      	sxtb	r2, r3
1000b686:	1dfb      	adds	r3, r7, #7
1000b688:	781b      	ldrb	r3, [r3, #0]
1000b68a:	201f      	movs	r0, #31
1000b68c:	1ac3      	subs	r3, r0, r3
1000b68e:	2001      	movs	r0, #1
1000b690:	4098      	lsls	r0, r3
1000b692:	0003      	movs	r3, r0
1000b694:	b25b      	sxtb	r3, r3
1000b696:	4313      	orrs	r3, r2
1000b698:	b25b      	sxtb	r3, r3
1000b69a:	b2db      	uxtb	r3, r3
1000b69c:	750b      	strb	r3, [r1, #20]
			}
			if (config->aon_wakeup) {
1000b69e:	683b      	ldr	r3, [r7, #0]
1000b6a0:	78db      	ldrb	r3, [r3, #3]
1000b6a2:	2b00      	cmp	r3, #0
1000b6a4:	d100      	bne.n	1000b6a8 <gpio_pin_set_config+0x11c>
1000b6a6:	e096      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b6a8:	494f      	ldr	r1, [pc, #316]	; (1000b7e8 <gpio_pin_set_config+0x25c>)
1000b6aa:	4b4f      	ldr	r3, [pc, #316]	; (1000b7e8 <gpio_pin_set_config+0x25c>)
1000b6ac:	881b      	ldrh	r3, [r3, #0]
1000b6ae:	b29b      	uxth	r3, r3
1000b6b0:	b21a      	sxth	r2, r3
1000b6b2:	1dfb      	adds	r3, r7, #7
1000b6b4:	781b      	ldrb	r3, [r3, #0]
1000b6b6:	201f      	movs	r0, #31
1000b6b8:	1ac3      	subs	r3, r0, r3
1000b6ba:	009b      	lsls	r3, r3, #2
1000b6bc:	2001      	movs	r0, #1
1000b6be:	4098      	lsls	r0, r3
1000b6c0:	0003      	movs	r3, r0
1000b6c2:	b21b      	sxth	r3, r3
1000b6c4:	4313      	orrs	r3, r2
1000b6c6:	b21b      	sxth	r3, r3
1000b6c8:	b29b      	uxth	r3, r3
1000b6ca:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b6cc:	4a47      	ldr	r2, [pc, #284]	; (1000b7ec <gpio_pin_set_config+0x260>)
1000b6ce:	7813      	ldrb	r3, [r2, #0]
1000b6d0:	2102      	movs	r1, #2
1000b6d2:	430b      	orrs	r3, r1
1000b6d4:	7013      	strb	r3, [r2, #0]
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b6d6:	e07e      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b6d8:	683b      	ldr	r3, [r7, #0]
1000b6da:	781b      	ldrb	r3, [r3, #0]
1000b6dc:	2b00      	cmp	r3, #0
1000b6de:	d151      	bne.n	1000b784 <gpio_pin_set_config+0x1f8>
				if(gpio_pin < 16) {
1000b6e0:	1dfb      	adds	r3, r7, #7
1000b6e2:	781b      	ldrb	r3, [r3, #0]
1000b6e4:	2b0f      	cmp	r3, #15
1000b6e6:	d808      	bhi.n	1000b6fa <gpio_pin_set_config+0x16e>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b6e8:	4a41      	ldr	r2, [pc, #260]	; (1000b7f0 <gpio_pin_set_config+0x264>)
1000b6ea:	1dfb      	adds	r3, r7, #7
1000b6ec:	781b      	ldrb	r3, [r3, #0]
1000b6ee:	2101      	movs	r1, #1
1000b6f0:	4099      	lsls	r1, r3
1000b6f2:	000b      	movs	r3, r1
1000b6f4:	b29b      	uxth	r3, r3
1000b6f6:	8293      	strh	r3, [r2, #20]
1000b6f8:	e009      	b.n	1000b70e <gpio_pin_set_config+0x182>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b6fa:	4a3e      	ldr	r2, [pc, #248]	; (1000b7f4 <gpio_pin_set_config+0x268>)
1000b6fc:	1dfb      	adds	r3, r7, #7
1000b6fe:	781b      	ldrb	r3, [r3, #0]
1000b700:	210f      	movs	r1, #15
1000b702:	400b      	ands	r3, r1
1000b704:	2101      	movs	r1, #1
1000b706:	4099      	lsls	r1, r3
1000b708:	000b      	movs	r3, r1
1000b70a:	b29b      	uxth	r3, r3
1000b70c:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
1000b70e:	683b      	ldr	r3, [r7, #0]
1000b710:	785b      	ldrb	r3, [r3, #1]
1000b712:	2b01      	cmp	r3, #1
1000b714:	d00e      	beq.n	1000b734 <gpio_pin_set_config+0x1a8>
1000b716:	2b02      	cmp	r3, #2
1000b718:	d018      	beq.n	1000b74c <gpio_pin_set_config+0x1c0>
1000b71a:	2b00      	cmp	r3, #0
1000b71c:	d12c      	bne.n	1000b778 <gpio_pin_set_config+0x1ec>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b71e:	4b31      	ldr	r3, [pc, #196]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b720:	4a30      	ldr	r2, [pc, #192]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b722:	6d12      	ldr	r2, [r2, #80]	; 0x50
1000b724:	1df9      	adds	r1, r7, #7
1000b726:	7809      	ldrb	r1, [r1, #0]
1000b728:	2001      	movs	r0, #1
1000b72a:	4088      	lsls	r0, r1
1000b72c:	0001      	movs	r1, r0
1000b72e:	430a      	orrs	r2, r1
1000b730:	651a      	str	r2, [r3, #80]	; 0x50
						break;
1000b732:	e050      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b734:	4b2b      	ldr	r3, [pc, #172]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b736:	4a2b      	ldr	r2, [pc, #172]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b738:	6d12      	ldr	r2, [r2, #80]	; 0x50
1000b73a:	1df9      	adds	r1, r7, #7
1000b73c:	7809      	ldrb	r1, [r1, #0]
1000b73e:	2001      	movs	r0, #1
1000b740:	4088      	lsls	r0, r1
1000b742:	0001      	movs	r1, r0
1000b744:	43c9      	mvns	r1, r1
1000b746:	400a      	ands	r2, r1
1000b748:	651a      	str	r2, [r3, #80]	; 0x50
						break;
1000b74a:	e044      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b74c:	4b25      	ldr	r3, [pc, #148]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b74e:	4a25      	ldr	r2, [pc, #148]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b750:	6d52      	ldr	r2, [r2, #84]	; 0x54
1000b752:	1df9      	adds	r1, r7, #7
1000b754:	7809      	ldrb	r1, [r1, #0]
1000b756:	2001      	movs	r0, #1
1000b758:	4088      	lsls	r0, r1
1000b75a:	0001      	movs	r1, r0
1000b75c:	430a      	orrs	r2, r1
1000b75e:	655a      	str	r2, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b760:	4b20      	ldr	r3, [pc, #128]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b762:	4a20      	ldr	r2, [pc, #128]	; (1000b7e4 <gpio_pin_set_config+0x258>)
1000b764:	6d12      	ldr	r2, [r2, #80]	; 0x50
1000b766:	1df9      	adds	r1, r7, #7
1000b768:	7809      	ldrb	r1, [r1, #0]
1000b76a:	2001      	movs	r0, #1
1000b76c:	4088      	lsls	r0, r1
1000b76e:	0001      	movs	r1, r0
1000b770:	43c9      	mvns	r1, r1
1000b772:	400a      	ands	r2, r1
1000b774:	651a      	str	r2, [r3, #80]	; 0x50
						break;
1000b776:	e02e      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
					default:
						status = STATUS_ERR_INVALID_ARG;
1000b778:	230f      	movs	r3, #15
1000b77a:	18fb      	adds	r3, r7, r3
1000b77c:	2217      	movs	r2, #23
1000b77e:	701a      	strb	r2, [r3, #0]
						break;
1000b780:	46c0      	nop			; (mov r8, r8)
1000b782:	e028      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b784:	683b      	ldr	r3, [r7, #0]
1000b786:	781b      	ldrb	r3, [r3, #0]
1000b788:	2b01      	cmp	r3, #1
1000b78a:	d124      	bne.n	1000b7d6 <gpio_pin_set_config+0x24a>
				if (gpio_pin < 16) {
1000b78c:	1dfb      	adds	r3, r7, #7
1000b78e:	781b      	ldrb	r3, [r3, #0]
1000b790:	2b0f      	cmp	r3, #15
1000b792:	d80f      	bhi.n	1000b7b4 <gpio_pin_set_config+0x228>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
1000b794:	4916      	ldr	r1, [pc, #88]	; (1000b7f0 <gpio_pin_set_config+0x264>)
1000b796:	4b16      	ldr	r3, [pc, #88]	; (1000b7f0 <gpio_pin_set_config+0x264>)
1000b798:	8a1b      	ldrh	r3, [r3, #16]
1000b79a:	b29b      	uxth	r3, r3
1000b79c:	b21a      	sxth	r2, r3
1000b79e:	1dfb      	adds	r3, r7, #7
1000b7a0:	781b      	ldrb	r3, [r3, #0]
1000b7a2:	2001      	movs	r0, #1
1000b7a4:	4098      	lsls	r0, r3
1000b7a6:	0003      	movs	r3, r0
1000b7a8:	b21b      	sxth	r3, r3
1000b7aa:	4313      	orrs	r3, r2
1000b7ac:	b21b      	sxth	r3, r3
1000b7ae:	b29b      	uxth	r3, r3
1000b7b0:	820b      	strh	r3, [r1, #16]
1000b7b2:	e010      	b.n	1000b7d6 <gpio_pin_set_config+0x24a>
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
1000b7b4:	490f      	ldr	r1, [pc, #60]	; (1000b7f4 <gpio_pin_set_config+0x268>)
1000b7b6:	4b0f      	ldr	r3, [pc, #60]	; (1000b7f4 <gpio_pin_set_config+0x268>)
1000b7b8:	8a1b      	ldrh	r3, [r3, #16]
1000b7ba:	b29b      	uxth	r3, r3
1000b7bc:	b21a      	sxth	r2, r3
1000b7be:	1dfb      	adds	r3, r7, #7
1000b7c0:	781b      	ldrb	r3, [r3, #0]
1000b7c2:	200f      	movs	r0, #15
1000b7c4:	4003      	ands	r3, r0
1000b7c6:	2001      	movs	r0, #1
1000b7c8:	4098      	lsls	r0, r3
1000b7ca:	0003      	movs	r3, r0
1000b7cc:	b21b      	sxth	r3, r3
1000b7ce:	4313      	orrs	r3, r2
1000b7d0:	b21b      	sxth	r3, r3
1000b7d2:	b29b      	uxth	r3, r3
1000b7d4:	820b      	strh	r3, [r1, #16]
				}
			}
		}
	}
	return status;
1000b7d6:	230f      	movs	r3, #15
1000b7d8:	18fb      	adds	r3, r7, r3
1000b7da:	781b      	ldrb	r3, [r3, #0]
}
1000b7dc:	0018      	movs	r0, r3
1000b7de:	46bd      	mov	sp, r7
1000b7e0:	b004      	add	sp, #16
1000b7e2:	bd80      	pop	{r7, pc}
1000b7e4:	4000b000 	.word	0x4000b000
1000b7e8:	4000f000 	.word	0x4000f000
1000b7ec:	4000e000 	.word	0x4000e000
1000b7f0:	40010000 	.word	0x40010000
1000b7f4:	40011000 	.word	0x40011000

1000b7f8 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b7f8:	b580      	push	{r7, lr}
1000b7fa:	b082      	sub	sp, #8
1000b7fc:	af00      	add	r7, sp, #0
1000b7fe:	0002      	movs	r2, r0
1000b800:	1dfb      	adds	r3, r7, #7
1000b802:	701a      	strb	r2, [r3, #0]
1000b804:	1dbb      	adds	r3, r7, #6
1000b806:	1c0a      	adds	r2, r1, #0
1000b808:	701a      	strb	r2, [r3, #0]
	if(gpio_pin < 16) {
1000b80a:	1dfb      	adds	r3, r7, #7
1000b80c:	781b      	ldrb	r3, [r3, #0]
1000b80e:	2b0f      	cmp	r3, #15
1000b810:	d825      	bhi.n	1000b85e <gpio_pin_set_output_level+0x66>
		if(level) {
1000b812:	1dbb      	adds	r3, r7, #6
1000b814:	781b      	ldrb	r3, [r3, #0]
1000b816:	2b00      	cmp	r3, #0
1000b818:	d00f      	beq.n	1000b83a <gpio_pin_set_output_level+0x42>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b81a:	4927      	ldr	r1, [pc, #156]	; (1000b8b8 <gpio_pin_set_output_level+0xc0>)
1000b81c:	4b26      	ldr	r3, [pc, #152]	; (1000b8b8 <gpio_pin_set_output_level+0xc0>)
1000b81e:	889b      	ldrh	r3, [r3, #4]
1000b820:	b29b      	uxth	r3, r3
1000b822:	b21a      	sxth	r2, r3
1000b824:	1dfb      	adds	r3, r7, #7
1000b826:	781b      	ldrb	r3, [r3, #0]
1000b828:	2001      	movs	r0, #1
1000b82a:	4098      	lsls	r0, r3
1000b82c:	0003      	movs	r3, r0
1000b82e:	b21b      	sxth	r3, r3
1000b830:	4313      	orrs	r3, r2
1000b832:	b21b      	sxth	r3, r3
1000b834:	b29b      	uxth	r3, r3
1000b836:	808b      	strh	r3, [r1, #4]
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
		}
	}
}
1000b838:	e03a      	b.n	1000b8b0 <gpio_pin_set_output_level+0xb8>
{
	if(gpio_pin < 16) {
		if(level) {
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b83a:	491f      	ldr	r1, [pc, #124]	; (1000b8b8 <gpio_pin_set_output_level+0xc0>)
1000b83c:	4b1e      	ldr	r3, [pc, #120]	; (1000b8b8 <gpio_pin_set_output_level+0xc0>)
1000b83e:	889b      	ldrh	r3, [r3, #4]
1000b840:	b29b      	uxth	r3, r3
1000b842:	b21b      	sxth	r3, r3
1000b844:	1dfa      	adds	r2, r7, #7
1000b846:	7812      	ldrb	r2, [r2, #0]
1000b848:	2001      	movs	r0, #1
1000b84a:	4090      	lsls	r0, r2
1000b84c:	0002      	movs	r2, r0
1000b84e:	b212      	sxth	r2, r2
1000b850:	43d2      	mvns	r2, r2
1000b852:	b212      	sxth	r2, r2
1000b854:	4013      	ands	r3, r2
1000b856:	b21b      	sxth	r3, r3
1000b858:	b29b      	uxth	r3, r3
1000b85a:	808b      	strh	r3, [r1, #4]
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
		}
	}
}
1000b85c:	e028      	b.n	1000b8b0 <gpio_pin_set_output_level+0xb8>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
		}
	} else {
		if(level) {
1000b85e:	1dbb      	adds	r3, r7, #6
1000b860:	781b      	ldrb	r3, [r3, #0]
1000b862:	2b00      	cmp	r3, #0
1000b864:	d011      	beq.n	1000b88a <gpio_pin_set_output_level+0x92>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b866:	4915      	ldr	r1, [pc, #84]	; (1000b8bc <gpio_pin_set_output_level+0xc4>)
1000b868:	4b14      	ldr	r3, [pc, #80]	; (1000b8bc <gpio_pin_set_output_level+0xc4>)
1000b86a:	889b      	ldrh	r3, [r3, #4]
1000b86c:	b29b      	uxth	r3, r3
1000b86e:	b21a      	sxth	r2, r3
1000b870:	1dfb      	adds	r3, r7, #7
1000b872:	781b      	ldrb	r3, [r3, #0]
1000b874:	200f      	movs	r0, #15
1000b876:	4003      	ands	r3, r0
1000b878:	2001      	movs	r0, #1
1000b87a:	4098      	lsls	r0, r3
1000b87c:	0003      	movs	r3, r0
1000b87e:	b21b      	sxth	r3, r3
1000b880:	4313      	orrs	r3, r2
1000b882:	b21b      	sxth	r3, r3
1000b884:	b29b      	uxth	r3, r3
1000b886:	808b      	strh	r3, [r1, #4]
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
		}
	}
}
1000b888:	e012      	b.n	1000b8b0 <gpio_pin_set_output_level+0xb8>
		}
	} else {
		if(level) {
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b88a:	490c      	ldr	r1, [pc, #48]	; (1000b8bc <gpio_pin_set_output_level+0xc4>)
1000b88c:	4b0b      	ldr	r3, [pc, #44]	; (1000b8bc <gpio_pin_set_output_level+0xc4>)
1000b88e:	889b      	ldrh	r3, [r3, #4]
1000b890:	b29b      	uxth	r3, r3
1000b892:	b21b      	sxth	r3, r3
1000b894:	1dfa      	adds	r2, r7, #7
1000b896:	7812      	ldrb	r2, [r2, #0]
1000b898:	200f      	movs	r0, #15
1000b89a:	4002      	ands	r2, r0
1000b89c:	2001      	movs	r0, #1
1000b89e:	4090      	lsls	r0, r2
1000b8a0:	0002      	movs	r2, r0
1000b8a2:	b212      	sxth	r2, r2
1000b8a4:	43d2      	mvns	r2, r2
1000b8a6:	b212      	sxth	r2, r2
1000b8a8:	4013      	ands	r3, r2
1000b8aa:	b21b      	sxth	r3, r3
1000b8ac:	b29b      	uxth	r3, r3
1000b8ae:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b8b0:	46c0      	nop			; (mov r8, r8)
1000b8b2:	46bd      	mov	sp, r7
1000b8b4:	b002      	add	sp, #8
1000b8b6:	bd80      	pop	{r7, pc}
1000b8b8:	40010000 	.word	0x40010000
1000b8bc:	40011000 	.word	0x40011000

1000b8c0 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b8c0:	b590      	push	{r4, r7, lr}
1000b8c2:	b085      	sub	sp, #20
1000b8c4:	af00      	add	r7, sp, #0
1000b8c6:	0002      	movs	r2, r0
1000b8c8:	1dfb      	adds	r3, r7, #7
1000b8ca:	701a      	strb	r2, [r3, #0]
1000b8cc:	1d3b      	adds	r3, r7, #4
1000b8ce:	1c0a      	adds	r2, r1, #0
1000b8d0:	801a      	strh	r2, [r3, #0]
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b8d2:	1d3b      	adds	r3, r7, #4
1000b8d4:	881b      	ldrh	r3, [r3, #0]
1000b8d6:	0a1b      	lsrs	r3, r3, #8
1000b8d8:	b29a      	uxth	r2, r3
1000b8da:	230f      	movs	r3, #15
1000b8dc:	18fb      	adds	r3, r7, r3
1000b8de:	701a      	strb	r2, [r3, #0]

	pinmux_sel &= 0xFF;
1000b8e0:	1d3b      	adds	r3, r7, #4
1000b8e2:	1d3a      	adds	r2, r7, #4
1000b8e4:	8812      	ldrh	r2, [r2, #0]
1000b8e6:	21ff      	movs	r1, #255	; 0xff
1000b8e8:	400a      	ands	r2, r1
1000b8ea:	801a      	strh	r2, [r3, #0]

	if (gpio_pin <= 7) {
1000b8ec:	1dfb      	adds	r3, r7, #7
1000b8ee:	781b      	ldrb	r3, [r3, #0]
1000b8f0:	2b07      	cmp	r3, #7
1000b8f2:	d875      	bhi.n	1000b9e0 <gpio_pinmux_cofiguration+0x120>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b8f4:	4bb5      	ldr	r3, [pc, #724]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b8f6:	4ab5      	ldr	r2, [pc, #724]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b8f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
1000b8fa:	1df9      	adds	r1, r7, #7
1000b8fc:	7809      	ldrb	r1, [r1, #0]
1000b8fe:	2007      	movs	r0, #7
1000b900:	4001      	ands	r1, r0
1000b902:	0089      	lsls	r1, r1, #2
1000b904:	2007      	movs	r0, #7
1000b906:	4088      	lsls	r0, r1
1000b908:	0001      	movs	r1, r0
1000b90a:	43c9      	mvns	r1, r1
1000b90c:	400a      	ands	r2, r1
1000b90e:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b910:	4bae      	ldr	r3, [pc, #696]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b912:	4aae      	ldr	r2, [pc, #696]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b914:	6c52      	ldr	r2, [r2, #68]	; 0x44
1000b916:	1d39      	adds	r1, r7, #4
1000b918:	8808      	ldrh	r0, [r1, #0]
1000b91a:	1df9      	adds	r1, r7, #7
1000b91c:	7809      	ldrb	r1, [r1, #0]
1000b91e:	2407      	movs	r4, #7
1000b920:	4021      	ands	r1, r4
1000b922:	0089      	lsls	r1, r1, #2
1000b924:	4088      	lsls	r0, r1
1000b926:	0001      	movs	r1, r0
1000b928:	430a      	orrs	r2, r1
1000b92a:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b92c:	1d3b      	adds	r3, r7, #4
1000b92e:	881b      	ldrh	r3, [r3, #0]
1000b930:	2b01      	cmp	r3, #1
1000b932:	d000      	beq.n	1000b936 <gpio_pinmux_cofiguration+0x76>
1000b934:	e145      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 3) {
1000b936:	1dfb      	adds	r3, r7, #7
1000b938:	781b      	ldrb	r3, [r3, #0]
1000b93a:	2b03      	cmp	r3, #3
1000b93c:	d825      	bhi.n	1000b98a <gpio_pinmux_cofiguration+0xca>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b93e:	49a3      	ldr	r1, [pc, #652]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b940:	4aa2      	ldr	r2, [pc, #648]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b942:	23d0      	movs	r3, #208	; 0xd0
1000b944:	005b      	lsls	r3, r3, #1
1000b946:	58d3      	ldr	r3, [r2, r3]
1000b948:	1dfa      	adds	r2, r7, #7
1000b94a:	7812      	ldrb	r2, [r2, #0]
1000b94c:	2003      	movs	r0, #3
1000b94e:	4002      	ands	r2, r0
1000b950:	00d2      	lsls	r2, r2, #3
1000b952:	203f      	movs	r0, #63	; 0x3f
1000b954:	4090      	lsls	r0, r2
1000b956:	0002      	movs	r2, r0
1000b958:	43d2      	mvns	r2, r2
1000b95a:	401a      	ands	r2, r3
1000b95c:	23d0      	movs	r3, #208	; 0xd0
1000b95e:	005b      	lsls	r3, r3, #1
1000b960:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b962:	489a      	ldr	r0, [pc, #616]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b964:	4a99      	ldr	r2, [pc, #612]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b966:	23d0      	movs	r3, #208	; 0xd0
1000b968:	005b      	lsls	r3, r3, #1
1000b96a:	58d3      	ldr	r3, [r2, r3]
1000b96c:	220f      	movs	r2, #15
1000b96e:	18ba      	adds	r2, r7, r2
1000b970:	7811      	ldrb	r1, [r2, #0]
1000b972:	1dfa      	adds	r2, r7, #7
1000b974:	7812      	ldrb	r2, [r2, #0]
1000b976:	2403      	movs	r4, #3
1000b978:	4022      	ands	r2, r4
1000b97a:	00d2      	lsls	r2, r2, #3
1000b97c:	4091      	lsls	r1, r2
1000b97e:	000a      	movs	r2, r1
1000b980:	431a      	orrs	r2, r3
1000b982:	23d0      	movs	r3, #208	; 0xd0
1000b984:	005b      	lsls	r3, r3, #1
1000b986:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000b988:	e11b      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
1000b98a:	1dfb      	adds	r3, r7, #7
1000b98c:	781b      	ldrb	r3, [r3, #0]
1000b98e:	2b07      	cmp	r3, #7
1000b990:	d900      	bls.n	1000b994 <gpio_pinmux_cofiguration+0xd4>
1000b992:	e116      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b994:	498d      	ldr	r1, [pc, #564]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b996:	4a8d      	ldr	r2, [pc, #564]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b998:	23d2      	movs	r3, #210	; 0xd2
1000b99a:	005b      	lsls	r3, r3, #1
1000b99c:	58d3      	ldr	r3, [r2, r3]
1000b99e:	1dfa      	adds	r2, r7, #7
1000b9a0:	7812      	ldrb	r2, [r2, #0]
1000b9a2:	2003      	movs	r0, #3
1000b9a4:	4002      	ands	r2, r0
1000b9a6:	00d2      	lsls	r2, r2, #3
1000b9a8:	203f      	movs	r0, #63	; 0x3f
1000b9aa:	4090      	lsls	r0, r2
1000b9ac:	0002      	movs	r2, r0
1000b9ae:	43d2      	mvns	r2, r2
1000b9b0:	401a      	ands	r2, r3
1000b9b2:	23d2      	movs	r3, #210	; 0xd2
1000b9b4:	005b      	lsls	r3, r3, #1
1000b9b6:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b9b8:	4884      	ldr	r0, [pc, #528]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b9ba:	4a84      	ldr	r2, [pc, #528]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b9bc:	23d2      	movs	r3, #210	; 0xd2
1000b9be:	005b      	lsls	r3, r3, #1
1000b9c0:	58d3      	ldr	r3, [r2, r3]
1000b9c2:	220f      	movs	r2, #15
1000b9c4:	18ba      	adds	r2, r7, r2
1000b9c6:	7811      	ldrb	r1, [r2, #0]
1000b9c8:	1dfa      	adds	r2, r7, #7
1000b9ca:	7812      	ldrb	r2, [r2, #0]
1000b9cc:	2403      	movs	r4, #3
1000b9ce:	4022      	ands	r2, r4
1000b9d0:	00d2      	lsls	r2, r2, #3
1000b9d2:	4091      	lsls	r1, r2
1000b9d4:	000a      	movs	r2, r1
1000b9d6:	431a      	orrs	r2, r3
1000b9d8:	23d2      	movs	r3, #210	; 0xd2
1000b9da:	005b      	lsls	r3, r3, #1
1000b9dc:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000b9de:	e0f0      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000b9e0:	1dfb      	adds	r3, r7, #7
1000b9e2:	781b      	ldrb	r3, [r3, #0]
1000b9e4:	2b0f      	cmp	r3, #15
1000b9e6:	d875      	bhi.n	1000bad4 <gpio_pinmux_cofiguration+0x214>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b9e8:	4b78      	ldr	r3, [pc, #480]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b9ea:	4a78      	ldr	r2, [pc, #480]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000b9ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000b9ee:	1df9      	adds	r1, r7, #7
1000b9f0:	7809      	ldrb	r1, [r1, #0]
1000b9f2:	2007      	movs	r0, #7
1000b9f4:	4001      	ands	r1, r0
1000b9f6:	0089      	lsls	r1, r1, #2
1000b9f8:	2007      	movs	r0, #7
1000b9fa:	4088      	lsls	r0, r1
1000b9fc:	0001      	movs	r1, r0
1000b9fe:	43c9      	mvns	r1, r1
1000ba00:	400a      	ands	r2, r1
1000ba02:	649a      	str	r2, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ba04:	4b71      	ldr	r3, [pc, #452]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba06:	4a71      	ldr	r2, [pc, #452]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba08:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000ba0a:	1d39      	adds	r1, r7, #4
1000ba0c:	8808      	ldrh	r0, [r1, #0]
1000ba0e:	1df9      	adds	r1, r7, #7
1000ba10:	7809      	ldrb	r1, [r1, #0]
1000ba12:	2407      	movs	r4, #7
1000ba14:	4021      	ands	r1, r4
1000ba16:	0089      	lsls	r1, r1, #2
1000ba18:	4088      	lsls	r0, r1
1000ba1a:	0001      	movs	r1, r0
1000ba1c:	430a      	orrs	r2, r1
1000ba1e:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000ba20:	1d3b      	adds	r3, r7, #4
1000ba22:	881b      	ldrh	r3, [r3, #0]
1000ba24:	2b01      	cmp	r3, #1
1000ba26:	d000      	beq.n	1000ba2a <gpio_pinmux_cofiguration+0x16a>
1000ba28:	e0cb      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 11) {
1000ba2a:	1dfb      	adds	r3, r7, #7
1000ba2c:	781b      	ldrb	r3, [r3, #0]
1000ba2e:	2b0b      	cmp	r3, #11
1000ba30:	d825      	bhi.n	1000ba7e <gpio_pinmux_cofiguration+0x1be>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba32:	4966      	ldr	r1, [pc, #408]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba34:	4a65      	ldr	r2, [pc, #404]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba36:	23d4      	movs	r3, #212	; 0xd4
1000ba38:	005b      	lsls	r3, r3, #1
1000ba3a:	58d3      	ldr	r3, [r2, r3]
1000ba3c:	1dfa      	adds	r2, r7, #7
1000ba3e:	7812      	ldrb	r2, [r2, #0]
1000ba40:	2003      	movs	r0, #3
1000ba42:	4002      	ands	r2, r0
1000ba44:	00d2      	lsls	r2, r2, #3
1000ba46:	203f      	movs	r0, #63	; 0x3f
1000ba48:	4090      	lsls	r0, r2
1000ba4a:	0002      	movs	r2, r0
1000ba4c:	43d2      	mvns	r2, r2
1000ba4e:	401a      	ands	r2, r3
1000ba50:	23d4      	movs	r3, #212	; 0xd4
1000ba52:	005b      	lsls	r3, r3, #1
1000ba54:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba56:	485d      	ldr	r0, [pc, #372]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba58:	4a5c      	ldr	r2, [pc, #368]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba5a:	23d4      	movs	r3, #212	; 0xd4
1000ba5c:	005b      	lsls	r3, r3, #1
1000ba5e:	58d3      	ldr	r3, [r2, r3]
1000ba60:	220f      	movs	r2, #15
1000ba62:	18ba      	adds	r2, r7, r2
1000ba64:	7811      	ldrb	r1, [r2, #0]
1000ba66:	1dfa      	adds	r2, r7, #7
1000ba68:	7812      	ldrb	r2, [r2, #0]
1000ba6a:	2403      	movs	r4, #3
1000ba6c:	4022      	ands	r2, r4
1000ba6e:	00d2      	lsls	r2, r2, #3
1000ba70:	4091      	lsls	r1, r2
1000ba72:	000a      	movs	r2, r1
1000ba74:	431a      	orrs	r2, r3
1000ba76:	23d4      	movs	r3, #212	; 0xd4
1000ba78:	005b      	lsls	r3, r3, #1
1000ba7a:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000ba7c:	e0a1      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
1000ba7e:	1dfb      	adds	r3, r7, #7
1000ba80:	781b      	ldrb	r3, [r3, #0]
1000ba82:	2b0f      	cmp	r3, #15
1000ba84:	d900      	bls.n	1000ba88 <gpio_pinmux_cofiguration+0x1c8>
1000ba86:	e09c      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba88:	4950      	ldr	r1, [pc, #320]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba8a:	4a50      	ldr	r2, [pc, #320]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000ba8c:	23d6      	movs	r3, #214	; 0xd6
1000ba8e:	005b      	lsls	r3, r3, #1
1000ba90:	58d3      	ldr	r3, [r2, r3]
1000ba92:	1dfa      	adds	r2, r7, #7
1000ba94:	7812      	ldrb	r2, [r2, #0]
1000ba96:	2003      	movs	r0, #3
1000ba98:	4002      	ands	r2, r0
1000ba9a:	00d2      	lsls	r2, r2, #3
1000ba9c:	203f      	movs	r0, #63	; 0x3f
1000ba9e:	4090      	lsls	r0, r2
1000baa0:	0002      	movs	r2, r0
1000baa2:	43d2      	mvns	r2, r2
1000baa4:	401a      	ands	r2, r3
1000baa6:	23d6      	movs	r3, #214	; 0xd6
1000baa8:	005b      	lsls	r3, r3, #1
1000baaa:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000baac:	4847      	ldr	r0, [pc, #284]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000baae:	4a47      	ldr	r2, [pc, #284]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bab0:	23d6      	movs	r3, #214	; 0xd6
1000bab2:	005b      	lsls	r3, r3, #1
1000bab4:	58d3      	ldr	r3, [r2, r3]
1000bab6:	220f      	movs	r2, #15
1000bab8:	18ba      	adds	r2, r7, r2
1000baba:	7811      	ldrb	r1, [r2, #0]
1000babc:	1dfa      	adds	r2, r7, #7
1000babe:	7812      	ldrb	r2, [r2, #0]
1000bac0:	2403      	movs	r4, #3
1000bac2:	4022      	ands	r2, r4
1000bac4:	00d2      	lsls	r2, r2, #3
1000bac6:	4091      	lsls	r1, r2
1000bac8:	000a      	movs	r2, r1
1000baca:	431a      	orrs	r2, r3
1000bacc:	23d6      	movs	r3, #214	; 0xd6
1000bace:	005b      	lsls	r3, r3, #1
1000bad0:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000bad2:	e076      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000bad4:	1dfb      	adds	r3, r7, #7
1000bad6:	781b      	ldrb	r3, [r3, #0]
1000bad8:	2b17      	cmp	r3, #23
1000bada:	d872      	bhi.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000badc:	4b3b      	ldr	r3, [pc, #236]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bade:	4a3b      	ldr	r2, [pc, #236]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bae0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000bae2:	1df9      	adds	r1, r7, #7
1000bae4:	7809      	ldrb	r1, [r1, #0]
1000bae6:	2007      	movs	r0, #7
1000bae8:	4001      	ands	r1, r0
1000baea:	0089      	lsls	r1, r1, #2
1000baec:	2007      	movs	r0, #7
1000baee:	4088      	lsls	r0, r1
1000baf0:	0001      	movs	r1, r0
1000baf2:	43c9      	mvns	r1, r1
1000baf4:	400a      	ands	r2, r1
1000baf6:	64da      	str	r2, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000baf8:	4b34      	ldr	r3, [pc, #208]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bafa:	4a34      	ldr	r2, [pc, #208]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bafc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000bafe:	1d39      	adds	r1, r7, #4
1000bb00:	8808      	ldrh	r0, [r1, #0]
1000bb02:	1df9      	adds	r1, r7, #7
1000bb04:	7809      	ldrb	r1, [r1, #0]
1000bb06:	2407      	movs	r4, #7
1000bb08:	4021      	ands	r1, r4
1000bb0a:	0089      	lsls	r1, r1, #2
1000bb0c:	4088      	lsls	r0, r1
1000bb0e:	0001      	movs	r1, r0
1000bb10:	430a      	orrs	r2, r1
1000bb12:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000bb14:	1d3b      	adds	r3, r7, #4
1000bb16:	881b      	ldrh	r3, [r3, #0]
1000bb18:	2b01      	cmp	r3, #1
1000bb1a:	d152      	bne.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 19) {
1000bb1c:	1dfb      	adds	r3, r7, #7
1000bb1e:	781b      	ldrb	r3, [r3, #0]
1000bb20:	2b13      	cmp	r3, #19
1000bb22:	d825      	bhi.n	1000bb70 <gpio_pinmux_cofiguration+0x2b0>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bb24:	4929      	ldr	r1, [pc, #164]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb26:	4a29      	ldr	r2, [pc, #164]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb28:	23d8      	movs	r3, #216	; 0xd8
1000bb2a:	005b      	lsls	r3, r3, #1
1000bb2c:	58d3      	ldr	r3, [r2, r3]
1000bb2e:	1dfa      	adds	r2, r7, #7
1000bb30:	7812      	ldrb	r2, [r2, #0]
1000bb32:	2003      	movs	r0, #3
1000bb34:	4002      	ands	r2, r0
1000bb36:	00d2      	lsls	r2, r2, #3
1000bb38:	203f      	movs	r0, #63	; 0x3f
1000bb3a:	4090      	lsls	r0, r2
1000bb3c:	0002      	movs	r2, r0
1000bb3e:	43d2      	mvns	r2, r2
1000bb40:	401a      	ands	r2, r3
1000bb42:	23d8      	movs	r3, #216	; 0xd8
1000bb44:	005b      	lsls	r3, r3, #1
1000bb46:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bb48:	4820      	ldr	r0, [pc, #128]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb4a:	4a20      	ldr	r2, [pc, #128]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb4c:	23d8      	movs	r3, #216	; 0xd8
1000bb4e:	005b      	lsls	r3, r3, #1
1000bb50:	58d3      	ldr	r3, [r2, r3]
1000bb52:	220f      	movs	r2, #15
1000bb54:	18ba      	adds	r2, r7, r2
1000bb56:	7811      	ldrb	r1, [r2, #0]
1000bb58:	1dfa      	adds	r2, r7, #7
1000bb5a:	7812      	ldrb	r2, [r2, #0]
1000bb5c:	2403      	movs	r4, #3
1000bb5e:	4022      	ands	r2, r4
1000bb60:	00d2      	lsls	r2, r2, #3
1000bb62:	4091      	lsls	r1, r2
1000bb64:	000a      	movs	r2, r1
1000bb66:	431a      	orrs	r2, r3
1000bb68:	23d8      	movs	r3, #216	; 0xd8
1000bb6a:	005b      	lsls	r3, r3, #1
1000bb6c:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000bb6e:	e028      	b.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
1000bb70:	1dfb      	adds	r3, r7, #7
1000bb72:	781b      	ldrb	r3, [r3, #0]
1000bb74:	2b17      	cmp	r3, #23
1000bb76:	d824      	bhi.n	1000bbc2 <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bb78:	4914      	ldr	r1, [pc, #80]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb7a:	4a14      	ldr	r2, [pc, #80]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb7c:	23da      	movs	r3, #218	; 0xda
1000bb7e:	005b      	lsls	r3, r3, #1
1000bb80:	58d3      	ldr	r3, [r2, r3]
1000bb82:	1dfa      	adds	r2, r7, #7
1000bb84:	7812      	ldrb	r2, [r2, #0]
1000bb86:	2003      	movs	r0, #3
1000bb88:	4002      	ands	r2, r0
1000bb8a:	00d2      	lsls	r2, r2, #3
1000bb8c:	203f      	movs	r0, #63	; 0x3f
1000bb8e:	4090      	lsls	r0, r2
1000bb90:	0002      	movs	r2, r0
1000bb92:	43d2      	mvns	r2, r2
1000bb94:	401a      	ands	r2, r3
1000bb96:	23da      	movs	r3, #218	; 0xda
1000bb98:	005b      	lsls	r3, r3, #1
1000bb9a:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bb9c:	480b      	ldr	r0, [pc, #44]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bb9e:	4a0b      	ldr	r2, [pc, #44]	; (1000bbcc <gpio_pinmux_cofiguration+0x30c>)
1000bba0:	23da      	movs	r3, #218	; 0xda
1000bba2:	005b      	lsls	r3, r3, #1
1000bba4:	58d3      	ldr	r3, [r2, r3]
1000bba6:	220f      	movs	r2, #15
1000bba8:	18ba      	adds	r2, r7, r2
1000bbaa:	7811      	ldrb	r1, [r2, #0]
1000bbac:	1dfa      	adds	r2, r7, #7
1000bbae:	7812      	ldrb	r2, [r2, #0]
1000bbb0:	2403      	movs	r4, #3
1000bbb2:	4022      	ands	r2, r4
1000bbb4:	00d2      	lsls	r2, r2, #3
1000bbb6:	4091      	lsls	r1, r2
1000bbb8:	000a      	movs	r2, r1
1000bbba:	431a      	orrs	r2, r3
1000bbbc:	23da      	movs	r3, #218	; 0xda
1000bbbe:	005b      	lsls	r3, r3, #1
1000bbc0:	50c2      	str	r2, [r0, r3]
			}
		}
	}
}
1000bbc2:	46c0      	nop			; (mov r8, r8)
1000bbc4:	46bd      	mov	sp, r7
1000bbc6:	b005      	add	sp, #20
1000bbc8:	bd90      	pop	{r4, r7, pc}
1000bbca:	46c0      	nop			; (mov r8, r8)
1000bbcc:	4000b000 	.word	0x4000b000

1000bbd0 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bbd0:	b590      	push	{r4, r7, lr}
1000bbd2:	b085      	sub	sp, #20
1000bbd4:	af00      	add	r7, sp, #0
1000bbd6:	6039      	str	r1, [r7, #0]
1000bbd8:	0011      	movs	r1, r2
1000bbda:	1dfb      	adds	r3, r7, #7
1000bbdc:	1c02      	adds	r2, r0, #0
1000bbde:	701a      	strb	r2, [r3, #0]
1000bbe0:	1dbb      	adds	r3, r7, #6
1000bbe2:	1c0a      	adds	r2, r1, #0
1000bbe4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback_func);
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000bbe6:	230f      	movs	r3, #15
1000bbe8:	18fb      	adds	r3, r7, r3
1000bbea:	2200      	movs	r2, #0
1000bbec:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
1000bbee:	1dfb      	adds	r3, r7, #7
1000bbf0:	781b      	ldrb	r3, [r3, #0]
1000bbf2:	2b0f      	cmp	r3, #15
1000bbf4:	d804      	bhi.n	1000bc00 <gpio_register_callback+0x30>
		gpio_port = 0;
1000bbf6:	230f      	movs	r3, #15
1000bbf8:	18fb      	adds	r3, r7, r3
1000bbfa:	2200      	movs	r2, #0
1000bbfc:	701a      	strb	r2, [r3, #0]
1000bbfe:	e003      	b.n	1000bc08 <gpio_register_callback+0x38>
	} else {
		gpio_port = 1;
1000bc00:	230f      	movs	r3, #15
1000bc02:	18fb      	adds	r3, r7, r3
1000bc04:	2201      	movs	r2, #1
1000bc06:	701a      	strb	r2, [r3, #0]
	}
	switch (callback_type) {
1000bc08:	1dbb      	adds	r3, r7, #6
1000bc0a:	781b      	ldrb	r3, [r3, #0]
1000bc0c:	2b04      	cmp	r3, #4
1000bc0e:	d900      	bls.n	1000bc12 <gpio_register_callback+0x42>
1000bc10:	e111      	b.n	1000be36 <gpio_register_callback+0x266>
1000bc12:	009a      	lsls	r2, r3, #2
1000bc14:	4ba6      	ldr	r3, [pc, #664]	; (1000beb0 <gpio_register_callback+0x2e0>)
1000bc16:	18d3      	adds	r3, r2, r3
1000bc18:	681b      	ldr	r3, [r3, #0]
1000bc1a:	469f      	mov	pc, r3
		case GPIO_CALLBACK_LOW:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
1000bc1c:	230f      	movs	r3, #15
1000bc1e:	18fb      	adds	r3, r7, r3
1000bc20:	781a      	ldrb	r2, [r3, #0]
1000bc22:	49a4      	ldr	r1, [pc, #656]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bc24:	0013      	movs	r3, r2
1000bc26:	00db      	lsls	r3, r3, #3
1000bc28:	189b      	adds	r3, r3, r2
1000bc2a:	00db      	lsls	r3, r3, #3
1000bc2c:	5859      	ldr	r1, [r3, r1]
1000bc2e:	230f      	movs	r3, #15
1000bc30:	18fb      	adds	r3, r7, r3
1000bc32:	781a      	ldrb	r2, [r3, #0]
1000bc34:	489f      	ldr	r0, [pc, #636]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bc36:	0013      	movs	r3, r2
1000bc38:	00db      	lsls	r3, r3, #3
1000bc3a:	189b      	adds	r3, r3, r2
1000bc3c:	00db      	lsls	r3, r3, #3
1000bc3e:	581b      	ldr	r3, [r3, r0]
1000bc40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
1000bc42:	b29b      	uxth	r3, r3
1000bc44:	b21a      	sxth	r2, r3
1000bc46:	1dfb      	adds	r3, r7, #7
1000bc48:	781b      	ldrb	r3, [r3, #0]
1000bc4a:	200f      	movs	r0, #15
1000bc4c:	4003      	ands	r3, r0
1000bc4e:	2001      	movs	r0, #1
1000bc50:	4098      	lsls	r0, r3
1000bc52:	0003      	movs	r3, r0
1000bc54:	b21b      	sxth	r3, r3
1000bc56:	4313      	orrs	r3, r2
1000bc58:	b21b      	sxth	r3, r3
1000bc5a:	b29b      	uxth	r3, r3
1000bc5c:	858b      	strh	r3, [r1, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= 1 << (gpio_pin % 16);
1000bc5e:	230f      	movs	r3, #15
1000bc60:	18fb      	adds	r3, r7, r3
1000bc62:	781a      	ldrb	r2, [r3, #0]
1000bc64:	4993      	ldr	r1, [pc, #588]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bc66:	0013      	movs	r3, r2
1000bc68:	00db      	lsls	r3, r3, #3
1000bc6a:	189b      	adds	r3, r3, r2
1000bc6c:	00db      	lsls	r3, r3, #3
1000bc6e:	5859      	ldr	r1, [r3, r1]
1000bc70:	230f      	movs	r3, #15
1000bc72:	18fb      	adds	r3, r7, r3
1000bc74:	781a      	ldrb	r2, [r3, #0]
1000bc76:	488f      	ldr	r0, [pc, #572]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bc78:	0013      	movs	r3, r2
1000bc7a:	00db      	lsls	r3, r3, #3
1000bc7c:	189b      	adds	r3, r3, r2
1000bc7e:	00db      	lsls	r3, r3, #3
1000bc80:	581b      	ldr	r3, [r3, r0]
1000bc82:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
1000bc84:	b29b      	uxth	r3, r3
1000bc86:	b21a      	sxth	r2, r3
1000bc88:	1dfb      	adds	r3, r7, #7
1000bc8a:	781b      	ldrb	r3, [r3, #0]
1000bc8c:	200f      	movs	r0, #15
1000bc8e:	4003      	ands	r3, r0
1000bc90:	2001      	movs	r0, #1
1000bc92:	4098      	lsls	r0, r3
1000bc94:	0003      	movs	r3, r0
1000bc96:	b21b      	sxth	r3, r3
1000bc98:	4313      	orrs	r3, r2
1000bc9a:	b21b      	sxth	r3, r3
1000bc9c:	b29b      	uxth	r3, r3
1000bc9e:	868b      	strh	r3, [r1, #52]	; 0x34
			break;
1000bca0:	e0c9      	b.n	1000be36 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_HIGH:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
1000bca2:	230f      	movs	r3, #15
1000bca4:	18fb      	adds	r3, r7, r3
1000bca6:	781a      	ldrb	r2, [r3, #0]
1000bca8:	4982      	ldr	r1, [pc, #520]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bcaa:	0013      	movs	r3, r2
1000bcac:	00db      	lsls	r3, r3, #3
1000bcae:	189b      	adds	r3, r3, r2
1000bcb0:	00db      	lsls	r3, r3, #3
1000bcb2:	5859      	ldr	r1, [r3, r1]
1000bcb4:	230f      	movs	r3, #15
1000bcb6:	18fb      	adds	r3, r7, r3
1000bcb8:	781a      	ldrb	r2, [r3, #0]
1000bcba:	487e      	ldr	r0, [pc, #504]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bcbc:	0013      	movs	r3, r2
1000bcbe:	00db      	lsls	r3, r3, #3
1000bcc0:	189b      	adds	r3, r3, r2
1000bcc2:	00db      	lsls	r3, r3, #3
1000bcc4:	581b      	ldr	r3, [r3, r0]
1000bcc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
1000bcc8:	b29b      	uxth	r3, r3
1000bcca:	b21a      	sxth	r2, r3
1000bccc:	1dfb      	adds	r3, r7, #7
1000bcce:	781b      	ldrb	r3, [r3, #0]
1000bcd0:	200f      	movs	r0, #15
1000bcd2:	4003      	ands	r3, r0
1000bcd4:	2001      	movs	r0, #1
1000bcd6:	4098      	lsls	r0, r3
1000bcd8:	0003      	movs	r3, r0
1000bcda:	b21b      	sxth	r3, r3
1000bcdc:	4313      	orrs	r3, r2
1000bcde:	b21b      	sxth	r3, r3
1000bce0:	b29b      	uxth	r3, r3
1000bce2:	858b      	strh	r3, [r1, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
1000bce4:	230f      	movs	r3, #15
1000bce6:	18fb      	adds	r3, r7, r3
1000bce8:	781a      	ldrb	r2, [r3, #0]
1000bcea:	4972      	ldr	r1, [pc, #456]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bcec:	0013      	movs	r3, r2
1000bcee:	00db      	lsls	r3, r3, #3
1000bcf0:	189b      	adds	r3, r3, r2
1000bcf2:	00db      	lsls	r3, r3, #3
1000bcf4:	5859      	ldr	r1, [r3, r1]
1000bcf6:	230f      	movs	r3, #15
1000bcf8:	18fb      	adds	r3, r7, r3
1000bcfa:	781a      	ldrb	r2, [r3, #0]
1000bcfc:	486d      	ldr	r0, [pc, #436]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bcfe:	0013      	movs	r3, r2
1000bd00:	00db      	lsls	r3, r3, #3
1000bd02:	189b      	adds	r3, r3, r2
1000bd04:	00db      	lsls	r3, r3, #3
1000bd06:	581b      	ldr	r3, [r3, r0]
1000bd08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000bd0a:	b29b      	uxth	r3, r3
1000bd0c:	b21a      	sxth	r2, r3
1000bd0e:	1dfb      	adds	r3, r7, #7
1000bd10:	781b      	ldrb	r3, [r3, #0]
1000bd12:	200f      	movs	r0, #15
1000bd14:	4003      	ands	r3, r0
1000bd16:	2001      	movs	r0, #1
1000bd18:	4098      	lsls	r0, r3
1000bd1a:	0003      	movs	r3, r0
1000bd1c:	b21b      	sxth	r3, r3
1000bd1e:	4313      	orrs	r3, r2
1000bd20:	b21b      	sxth	r3, r3
1000bd22:	b29b      	uxth	r3, r3
1000bd24:	860b      	strh	r3, [r1, #48]	; 0x30
			break;
1000bd26:	e086      	b.n	1000be36 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_RISING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
1000bd28:	230f      	movs	r3, #15
1000bd2a:	18fb      	adds	r3, r7, r3
1000bd2c:	781a      	ldrb	r2, [r3, #0]
1000bd2e:	4961      	ldr	r1, [pc, #388]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bd30:	0013      	movs	r3, r2
1000bd32:	00db      	lsls	r3, r3, #3
1000bd34:	189b      	adds	r3, r3, r2
1000bd36:	00db      	lsls	r3, r3, #3
1000bd38:	5859      	ldr	r1, [r3, r1]
1000bd3a:	230f      	movs	r3, #15
1000bd3c:	18fb      	adds	r3, r7, r3
1000bd3e:	781a      	ldrb	r2, [r3, #0]
1000bd40:	485c      	ldr	r0, [pc, #368]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bd42:	0013      	movs	r3, r2
1000bd44:	00db      	lsls	r3, r3, #3
1000bd46:	189b      	adds	r3, r3, r2
1000bd48:	00db      	lsls	r3, r3, #3
1000bd4a:	581b      	ldr	r3, [r3, r0]
1000bd4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000bd4e:	b29b      	uxth	r3, r3
1000bd50:	b21a      	sxth	r2, r3
1000bd52:	1dfb      	adds	r3, r7, #7
1000bd54:	781b      	ldrb	r3, [r3, #0]
1000bd56:	200f      	movs	r0, #15
1000bd58:	4003      	ands	r3, r0
1000bd5a:	2001      	movs	r0, #1
1000bd5c:	4098      	lsls	r0, r3
1000bd5e:	0003      	movs	r3, r0
1000bd60:	b21b      	sxth	r3, r3
1000bd62:	4313      	orrs	r3, r2
1000bd64:	b21b      	sxth	r3, r3
1000bd66:	b29b      	uxth	r3, r3
1000bd68:	850b      	strh	r3, [r1, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
1000bd6a:	230f      	movs	r3, #15
1000bd6c:	18fb      	adds	r3, r7, r3
1000bd6e:	781a      	ldrb	r2, [r3, #0]
1000bd70:	4950      	ldr	r1, [pc, #320]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bd72:	0013      	movs	r3, r2
1000bd74:	00db      	lsls	r3, r3, #3
1000bd76:	189b      	adds	r3, r3, r2
1000bd78:	00db      	lsls	r3, r3, #3
1000bd7a:	5859      	ldr	r1, [r3, r1]
1000bd7c:	230f      	movs	r3, #15
1000bd7e:	18fb      	adds	r3, r7, r3
1000bd80:	781a      	ldrb	r2, [r3, #0]
1000bd82:	484c      	ldr	r0, [pc, #304]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bd84:	0013      	movs	r3, r2
1000bd86:	00db      	lsls	r3, r3, #3
1000bd88:	189b      	adds	r3, r3, r2
1000bd8a:	00db      	lsls	r3, r3, #3
1000bd8c:	581b      	ldr	r3, [r3, r0]
1000bd8e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000bd90:	b29b      	uxth	r3, r3
1000bd92:	b21a      	sxth	r2, r3
1000bd94:	1dfb      	adds	r3, r7, #7
1000bd96:	781b      	ldrb	r3, [r3, #0]
1000bd98:	200f      	movs	r0, #15
1000bd9a:	4003      	ands	r3, r0
1000bd9c:	2001      	movs	r0, #1
1000bd9e:	4098      	lsls	r0, r3
1000bda0:	0003      	movs	r3, r0
1000bda2:	b21b      	sxth	r3, r3
1000bda4:	4313      	orrs	r3, r2
1000bda6:	b21b      	sxth	r3, r3
1000bda8:	b29b      	uxth	r3, r3
1000bdaa:	860b      	strh	r3, [r1, #48]	; 0x30
			break;
1000bdac:	e043      	b.n	1000be36 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_FALLING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
1000bdae:	230f      	movs	r3, #15
1000bdb0:	18fb      	adds	r3, r7, r3
1000bdb2:	781a      	ldrb	r2, [r3, #0]
1000bdb4:	493f      	ldr	r1, [pc, #252]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bdb6:	0013      	movs	r3, r2
1000bdb8:	00db      	lsls	r3, r3, #3
1000bdba:	189b      	adds	r3, r3, r2
1000bdbc:	00db      	lsls	r3, r3, #3
1000bdbe:	5859      	ldr	r1, [r3, r1]
1000bdc0:	230f      	movs	r3, #15
1000bdc2:	18fb      	adds	r3, r7, r3
1000bdc4:	781a      	ldrb	r2, [r3, #0]
1000bdc6:	483b      	ldr	r0, [pc, #236]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bdc8:	0013      	movs	r3, r2
1000bdca:	00db      	lsls	r3, r3, #3
1000bdcc:	189b      	adds	r3, r3, r2
1000bdce:	00db      	lsls	r3, r3, #3
1000bdd0:	581b      	ldr	r3, [r3, r0]
1000bdd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000bdd4:	b29b      	uxth	r3, r3
1000bdd6:	b21a      	sxth	r2, r3
1000bdd8:	1dfb      	adds	r3, r7, #7
1000bdda:	781b      	ldrb	r3, [r3, #0]
1000bddc:	200f      	movs	r0, #15
1000bdde:	4003      	ands	r3, r0
1000bde0:	2001      	movs	r0, #1
1000bde2:	4098      	lsls	r0, r3
1000bde4:	0003      	movs	r3, r0
1000bde6:	b21b      	sxth	r3, r3
1000bde8:	4313      	orrs	r3, r2
1000bdea:	b21b      	sxth	r3, r3
1000bdec:	b29b      	uxth	r3, r3
1000bdee:	850b      	strh	r3, [r1, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= (1 << (gpio_pin % 16));
1000bdf0:	230f      	movs	r3, #15
1000bdf2:	18fb      	adds	r3, r7, r3
1000bdf4:	781a      	ldrb	r2, [r3, #0]
1000bdf6:	492f      	ldr	r1, [pc, #188]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000bdf8:	0013      	movs	r3, r2
1000bdfa:	00db      	lsls	r3, r3, #3
1000bdfc:	189b      	adds	r3, r3, r2
1000bdfe:	00db      	lsls	r3, r3, #3
1000be00:	5859      	ldr	r1, [r3, r1]
1000be02:	230f      	movs	r3, #15
1000be04:	18fb      	adds	r3, r7, r3
1000be06:	781a      	ldrb	r2, [r3, #0]
1000be08:	482a      	ldr	r0, [pc, #168]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000be0a:	0013      	movs	r3, r2
1000be0c:	00db      	lsls	r3, r3, #3
1000be0e:	189b      	adds	r3, r3, r2
1000be10:	00db      	lsls	r3, r3, #3
1000be12:	581b      	ldr	r3, [r3, r0]
1000be14:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
1000be16:	b29b      	uxth	r3, r3
1000be18:	b21a      	sxth	r2, r3
1000be1a:	1dfb      	adds	r3, r7, #7
1000be1c:	781b      	ldrb	r3, [r3, #0]
1000be1e:	200f      	movs	r0, #15
1000be20:	4003      	ands	r3, r0
1000be22:	2001      	movs	r0, #1
1000be24:	4098      	lsls	r0, r3
1000be26:	0003      	movs	r3, r0
1000be28:	b21b      	sxth	r3, r3
1000be2a:	4313      	orrs	r3, r2
1000be2c:	b21b      	sxth	r3, r3
1000be2e:	b29b      	uxth	r3, r3
1000be30:	868b      	strh	r3, [r1, #52]	; 0x34
			break;
1000be32:	e000      	b.n	1000be36 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_N:
			break;
1000be34:	46c0      	nop			; (mov r8, r8)
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000be36:	230f      	movs	r3, #15
1000be38:	18fb      	adds	r3, r7, r3
1000be3a:	781a      	ldrb	r2, [r3, #0]
1000be3c:	1dfb      	adds	r3, r7, #7
1000be3e:	781b      	ldrb	r3, [r3, #0]
1000be40:	210f      	movs	r1, #15
1000be42:	400b      	ands	r3, r1
1000be44:	0018      	movs	r0, r3
1000be46:	491b      	ldr	r1, [pc, #108]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000be48:	0013      	movs	r3, r2
1000be4a:	00db      	lsls	r3, r3, #3
1000be4c:	189b      	adds	r3, r3, r2
1000be4e:	005b      	lsls	r3, r3, #1
1000be50:	181b      	adds	r3, r3, r0
1000be52:	009b      	lsls	r3, r3, #2
1000be54:	18cb      	adds	r3, r1, r3
1000be56:	3304      	adds	r3, #4
1000be58:	683a      	ldr	r2, [r7, #0]
1000be5a:	601a      	str	r2, [r3, #0]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000be5c:	230f      	movs	r3, #15
1000be5e:	18fb      	adds	r3, r7, r3
1000be60:	781a      	ldrb	r2, [r3, #0]
1000be62:	230f      	movs	r3, #15
1000be64:	18fb      	adds	r3, r7, r3
1000be66:	7819      	ldrb	r1, [r3, #0]
1000be68:	4812      	ldr	r0, [pc, #72]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000be6a:	2444      	movs	r4, #68	; 0x44
1000be6c:	000b      	movs	r3, r1
1000be6e:	00db      	lsls	r3, r3, #3
1000be70:	185b      	adds	r3, r3, r1
1000be72:	00db      	lsls	r3, r3, #3
1000be74:	18c3      	adds	r3, r0, r3
1000be76:	191b      	adds	r3, r3, r4
1000be78:	881b      	ldrh	r3, [r3, #0]
1000be7a:	b219      	sxth	r1, r3
1000be7c:	1dfb      	adds	r3, r7, #7
1000be7e:	781b      	ldrb	r3, [r3, #0]
1000be80:	200f      	movs	r0, #15
1000be82:	4003      	ands	r3, r0
1000be84:	2001      	movs	r0, #1
1000be86:	4098      	lsls	r0, r3
1000be88:	0003      	movs	r3, r0
1000be8a:	b21b      	sxth	r3, r3
1000be8c:	430b      	orrs	r3, r1
1000be8e:	b21b      	sxth	r3, r3
1000be90:	b29c      	uxth	r4, r3
1000be92:	4908      	ldr	r1, [pc, #32]	; (1000beb4 <gpio_register_callback+0x2e4>)
1000be94:	2044      	movs	r0, #68	; 0x44
1000be96:	0013      	movs	r3, r2
1000be98:	00db      	lsls	r3, r3, #3
1000be9a:	189b      	adds	r3, r3, r2
1000be9c:	00db      	lsls	r3, r3, #3
1000be9e:	18cb      	adds	r3, r1, r3
1000bea0:	181b      	adds	r3, r3, r0
1000bea2:	1c22      	adds	r2, r4, #0
1000bea4:	801a      	strh	r2, [r3, #0]
}
1000bea6:	46c0      	nop			; (mov r8, r8)
1000bea8:	46bd      	mov	sp, r7
1000beaa:	b005      	add	sp, #20
1000beac:	bd90      	pop	{r4, r7, pc}
1000beae:	46c0      	nop			; (mov r8, r8)
1000beb0:	10018f70 	.word	0x10018f70
1000beb4:	1001a4c4 	.word	0x1001a4c4

1000beb8 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000beb8:	b590      	push	{r4, r7, lr}
1000beba:	b085      	sub	sp, #20
1000bebc:	af00      	add	r7, sp, #0
1000bebe:	0002      	movs	r2, r0
1000bec0:	1dfb      	adds	r3, r7, #7
1000bec2:	701a      	strb	r2, [r3, #0]
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000bec4:	230f      	movs	r3, #15
1000bec6:	18fb      	adds	r3, r7, r3
1000bec8:	2200      	movs	r2, #0
1000beca:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
1000becc:	1dfb      	adds	r3, r7, #7
1000bece:	781b      	ldrb	r3, [r3, #0]
1000bed0:	2b0f      	cmp	r3, #15
1000bed2:	d804      	bhi.n	1000bede <gpio_enable_callback+0x26>
		gpio_port = 0;
1000bed4:	230f      	movs	r3, #15
1000bed6:	18fb      	adds	r3, r7, r3
1000bed8:	2200      	movs	r2, #0
1000beda:	701a      	strb	r2, [r3, #0]
1000bedc:	e003      	b.n	1000bee6 <gpio_enable_callback+0x2e>
	} else {
		gpio_port = 1;
1000bede:	230f      	movs	r3, #15
1000bee0:	18fb      	adds	r3, r7, r3
1000bee2:	2201      	movs	r2, #1
1000bee4:	701a      	strb	r2, [r3, #0]
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bee6:	230f      	movs	r3, #15
1000bee8:	18fb      	adds	r3, r7, r3
1000beea:	781a      	ldrb	r2, [r3, #0]
1000beec:	230f      	movs	r3, #15
1000beee:	18fb      	adds	r3, r7, r3
1000bef0:	7819      	ldrb	r1, [r3, #0]
1000bef2:	4822      	ldr	r0, [pc, #136]	; (1000bf7c <gpio_enable_callback+0xc4>)
1000bef4:	2446      	movs	r4, #70	; 0x46
1000bef6:	000b      	movs	r3, r1
1000bef8:	00db      	lsls	r3, r3, #3
1000befa:	185b      	adds	r3, r3, r1
1000befc:	00db      	lsls	r3, r3, #3
1000befe:	18c3      	adds	r3, r0, r3
1000bf00:	191b      	adds	r3, r3, r4
1000bf02:	881b      	ldrh	r3, [r3, #0]
1000bf04:	b219      	sxth	r1, r3
1000bf06:	1dfb      	adds	r3, r7, #7
1000bf08:	781b      	ldrb	r3, [r3, #0]
1000bf0a:	200f      	movs	r0, #15
1000bf0c:	4003      	ands	r3, r0
1000bf0e:	2001      	movs	r0, #1
1000bf10:	4098      	lsls	r0, r3
1000bf12:	0003      	movs	r3, r0
1000bf14:	b21b      	sxth	r3, r3
1000bf16:	430b      	orrs	r3, r1
1000bf18:	b21b      	sxth	r3, r3
1000bf1a:	b29c      	uxth	r4, r3
1000bf1c:	4917      	ldr	r1, [pc, #92]	; (1000bf7c <gpio_enable_callback+0xc4>)
1000bf1e:	2046      	movs	r0, #70	; 0x46
1000bf20:	0013      	movs	r3, r2
1000bf22:	00db      	lsls	r3, r3, #3
1000bf24:	189b      	adds	r3, r3, r2
1000bf26:	00db      	lsls	r3, r3, #3
1000bf28:	18cb      	adds	r3, r1, r3
1000bf2a:	181b      	adds	r3, r3, r0
1000bf2c:	1c22      	adds	r2, r4, #0
1000bf2e:	801a      	strh	r2, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg |= (1 << (gpio_pin % 16));
1000bf30:	230f      	movs	r3, #15
1000bf32:	18fb      	adds	r3, r7, r3
1000bf34:	781a      	ldrb	r2, [r3, #0]
1000bf36:	4911      	ldr	r1, [pc, #68]	; (1000bf7c <gpio_enable_callback+0xc4>)
1000bf38:	0013      	movs	r3, r2
1000bf3a:	00db      	lsls	r3, r3, #3
1000bf3c:	189b      	adds	r3, r3, r2
1000bf3e:	00db      	lsls	r3, r3, #3
1000bf40:	5859      	ldr	r1, [r3, r1]
1000bf42:	230f      	movs	r3, #15
1000bf44:	18fb      	adds	r3, r7, r3
1000bf46:	781a      	ldrb	r2, [r3, #0]
1000bf48:	480c      	ldr	r0, [pc, #48]	; (1000bf7c <gpio_enable_callback+0xc4>)
1000bf4a:	0013      	movs	r3, r2
1000bf4c:	00db      	lsls	r3, r3, #3
1000bf4e:	189b      	adds	r3, r3, r2
1000bf50:	00db      	lsls	r3, r3, #3
1000bf52:	581b      	ldr	r3, [r3, r0]
1000bf54:	8c1b      	ldrh	r3, [r3, #32]
1000bf56:	b29b      	uxth	r3, r3
1000bf58:	b21a      	sxth	r2, r3
1000bf5a:	1dfb      	adds	r3, r7, #7
1000bf5c:	781b      	ldrb	r3, [r3, #0]
1000bf5e:	200f      	movs	r0, #15
1000bf60:	4003      	ands	r3, r0
1000bf62:	2001      	movs	r0, #1
1000bf64:	4098      	lsls	r0, r3
1000bf66:	0003      	movs	r3, r0
1000bf68:	b21b      	sxth	r3, r3
1000bf6a:	4313      	orrs	r3, r2
1000bf6c:	b21b      	sxth	r3, r3
1000bf6e:	b29b      	uxth	r3, r3
1000bf70:	840b      	strh	r3, [r1, #32]
}
1000bf72:	46c0      	nop			; (mov r8, r8)
1000bf74:	46bd      	mov	sp, r7
1000bf76:	b005      	add	sp, #20
1000bf78:	bd90      	pop	{r4, r7, pc}
1000bf7a:	46c0      	nop			; (mov r8, r8)
1000bf7c:	1001a4c4 	.word	0x1001a4c4

1000bf80 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000bf80:	b590      	push	{r4, r7, lr}
1000bf82:	b085      	sub	sp, #20
1000bf84:	af00      	add	r7, sp, #0
1000bf86:	0002      	movs	r2, r0
1000bf88:	1dfb      	adds	r3, r7, #7
1000bf8a:	701a      	strb	r2, [r3, #0]
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000bf8c:	230f      	movs	r3, #15
1000bf8e:	18fb      	adds	r3, r7, r3
1000bf90:	2200      	movs	r2, #0
1000bf92:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
1000bf94:	1dfb      	adds	r3, r7, #7
1000bf96:	781b      	ldrb	r3, [r3, #0]
1000bf98:	2b0f      	cmp	r3, #15
1000bf9a:	d804      	bhi.n	1000bfa6 <gpio_disable_callback+0x26>
		gpio_port = 0;
1000bf9c:	230f      	movs	r3, #15
1000bf9e:	18fb      	adds	r3, r7, r3
1000bfa0:	2200      	movs	r2, #0
1000bfa2:	701a      	strb	r2, [r3, #0]
1000bfa4:	e003      	b.n	1000bfae <gpio_disable_callback+0x2e>
	} else {
		gpio_port = 1;
1000bfa6:	230f      	movs	r3, #15
1000bfa8:	18fb      	adds	r3, r7, r3
1000bfaa:	2201      	movs	r2, #1
1000bfac:	701a      	strb	r2, [r3, #0]
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000bfae:	230f      	movs	r3, #15
1000bfb0:	18fb      	adds	r3, r7, r3
1000bfb2:	781a      	ldrb	r2, [r3, #0]
1000bfb4:	230f      	movs	r3, #15
1000bfb6:	18fb      	adds	r3, r7, r3
1000bfb8:	7819      	ldrb	r1, [r3, #0]
1000bfba:	4823      	ldr	r0, [pc, #140]	; (1000c048 <gpio_disable_callback+0xc8>)
1000bfbc:	2446      	movs	r4, #70	; 0x46
1000bfbe:	000b      	movs	r3, r1
1000bfc0:	00db      	lsls	r3, r3, #3
1000bfc2:	185b      	adds	r3, r3, r1
1000bfc4:	00db      	lsls	r3, r3, #3
1000bfc6:	18c3      	adds	r3, r0, r3
1000bfc8:	191b      	adds	r3, r3, r4
1000bfca:	881b      	ldrh	r3, [r3, #0]
1000bfcc:	b21b      	sxth	r3, r3
1000bfce:	1df9      	adds	r1, r7, #7
1000bfd0:	7809      	ldrb	r1, [r1, #0]
1000bfd2:	200f      	movs	r0, #15
1000bfd4:	4001      	ands	r1, r0
1000bfd6:	2001      	movs	r0, #1
1000bfd8:	4088      	lsls	r0, r1
1000bfda:	0001      	movs	r1, r0
1000bfdc:	b209      	sxth	r1, r1
1000bfde:	43c9      	mvns	r1, r1
1000bfe0:	b209      	sxth	r1, r1
1000bfe2:	400b      	ands	r3, r1
1000bfe4:	b21b      	sxth	r3, r3
1000bfe6:	b29c      	uxth	r4, r3
1000bfe8:	4917      	ldr	r1, [pc, #92]	; (1000c048 <gpio_disable_callback+0xc8>)
1000bfea:	2046      	movs	r0, #70	; 0x46
1000bfec:	0013      	movs	r3, r2
1000bfee:	00db      	lsls	r3, r3, #3
1000bff0:	189b      	adds	r3, r3, r2
1000bff2:	00db      	lsls	r3, r3, #3
1000bff4:	18cb      	adds	r3, r1, r3
1000bff6:	181b      	adds	r3, r3, r0
1000bff8:	1c22      	adds	r2, r4, #0
1000bffa:	801a      	strh	r2, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg |= (1 << (gpio_pin % 16));
1000bffc:	230f      	movs	r3, #15
1000bffe:	18fb      	adds	r3, r7, r3
1000c000:	781a      	ldrb	r2, [r3, #0]
1000c002:	4911      	ldr	r1, [pc, #68]	; (1000c048 <gpio_disable_callback+0xc8>)
1000c004:	0013      	movs	r3, r2
1000c006:	00db      	lsls	r3, r3, #3
1000c008:	189b      	adds	r3, r3, r2
1000c00a:	00db      	lsls	r3, r3, #3
1000c00c:	5859      	ldr	r1, [r3, r1]
1000c00e:	230f      	movs	r3, #15
1000c010:	18fb      	adds	r3, r7, r3
1000c012:	781a      	ldrb	r2, [r3, #0]
1000c014:	480c      	ldr	r0, [pc, #48]	; (1000c048 <gpio_disable_callback+0xc8>)
1000c016:	0013      	movs	r3, r2
1000c018:	00db      	lsls	r3, r3, #3
1000c01a:	189b      	adds	r3, r3, r2
1000c01c:	00db      	lsls	r3, r3, #3
1000c01e:	581b      	ldr	r3, [r3, r0]
1000c020:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000c022:	b29b      	uxth	r3, r3
1000c024:	b21a      	sxth	r2, r3
1000c026:	1dfb      	adds	r3, r7, #7
1000c028:	781b      	ldrb	r3, [r3, #0]
1000c02a:	200f      	movs	r0, #15
1000c02c:	4003      	ands	r3, r0
1000c02e:	2001      	movs	r0, #1
1000c030:	4098      	lsls	r0, r3
1000c032:	0003      	movs	r3, r0
1000c034:	b21b      	sxth	r3, r3
1000c036:	4313      	orrs	r3, r2
1000c038:	b21b      	sxth	r3, r3
1000c03a:	b29b      	uxth	r3, r3
1000c03c:	848b      	strh	r3, [r1, #36]	; 0x24
}
1000c03e:	46c0      	nop			; (mov r8, r8)
1000c040:	46bd      	mov	sp, r7
1000c042:	b005      	add	sp, #20
1000c044:	bd90      	pop	{r4, r7, pc}
1000c046:	46c0      	nop			; (mov r8, r8)
1000c048:	1001a4c4 	.word	0x1001a4c4

1000c04c <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000c04c:	b580      	push	{r7, lr}
1000c04e:	b082      	sub	sp, #8
1000c050:	af00      	add	r7, sp, #0
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000c052:	4b2a      	ldr	r3, [pc, #168]	; (1000c0fc <gpio_port0_isr_handler+0xb0>)
1000c054:	681b      	ldr	r3, [r3, #0]
1000c056:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c058:	b29b      	uxth	r3, r3
1000c05a:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < 16; i++){
1000c05c:	1dfb      	adds	r3, r7, #7
1000c05e:	2200      	movs	r2, #0
1000c060:	701a      	strb	r2, [r3, #0]
1000c062:	e03d      	b.n	1000c0e0 <gpio_port0_isr_handler+0x94>
		if (flag & (1 << i)) {
1000c064:	1dfb      	adds	r3, r7, #7
1000c066:	781b      	ldrb	r3, [r3, #0]
1000c068:	2201      	movs	r2, #1
1000c06a:	409a      	lsls	r2, r3
1000c06c:	0013      	movs	r3, r2
1000c06e:	001a      	movs	r2, r3
1000c070:	683b      	ldr	r3, [r7, #0]
1000c072:	4013      	ands	r3, r2
1000c074:	d02f      	beq.n	1000c0d6 <gpio_port0_isr_handler+0x8a>
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
1000c076:	4b21      	ldr	r3, [pc, #132]	; (1000c0fc <gpio_port0_isr_handler+0xb0>)
1000c078:	681a      	ldr	r2, [r3, #0]
1000c07a:	4b20      	ldr	r3, [pc, #128]	; (1000c0fc <gpio_port0_isr_handler+0xb0>)
1000c07c:	681b      	ldr	r3, [r3, #0]
1000c07e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c080:	b29b      	uxth	r3, r3
1000c082:	b219      	sxth	r1, r3
1000c084:	1dfb      	adds	r3, r7, #7
1000c086:	781b      	ldrb	r3, [r3, #0]
1000c088:	2001      	movs	r0, #1
1000c08a:	4098      	lsls	r0, r3
1000c08c:	0003      	movs	r3, r0
1000c08e:	b21b      	sxth	r3, r3
1000c090:	430b      	orrs	r3, r1
1000c092:	b21b      	sxth	r3, r3
1000c094:	b29b      	uxth	r3, r3
1000c096:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000c098:	4b18      	ldr	r3, [pc, #96]	; (1000c0fc <gpio_port0_isr_handler+0xb0>)
1000c09a:	2246      	movs	r2, #70	; 0x46
1000c09c:	5a9b      	ldrh	r3, [r3, r2]
1000c09e:	001a      	movs	r2, r3
1000c0a0:	1dfb      	adds	r3, r7, #7
1000c0a2:	781b      	ldrb	r3, [r3, #0]
1000c0a4:	411a      	asrs	r2, r3
1000c0a6:	0013      	movs	r3, r2
1000c0a8:	2201      	movs	r2, #1
1000c0aa:	4013      	ands	r3, r2
1000c0ac:	d01d      	beq.n	1000c0ea <gpio_port0_isr_handler+0x9e>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
1000c0ae:	4b13      	ldr	r3, [pc, #76]	; (1000c0fc <gpio_port0_isr_handler+0xb0>)
1000c0b0:	2244      	movs	r2, #68	; 0x44
1000c0b2:	5a9b      	ldrh	r3, [r3, r2]

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000c0b4:	001a      	movs	r2, r3
1000c0b6:	1dfb      	adds	r3, r7, #7
1000c0b8:	781b      	ldrb	r3, [r3, #0]
1000c0ba:	411a      	asrs	r2, r3
1000c0bc:	0013      	movs	r3, r2
1000c0be:	2201      	movs	r2, #1
1000c0c0:	4013      	ands	r3, r2
1000c0c2:	d012      	beq.n	1000c0ea <gpio_port0_isr_handler+0x9e>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
1000c0c4:	1dfb      	adds	r3, r7, #7
1000c0c6:	781b      	ldrb	r3, [r3, #0]
1000c0c8:	4a0c      	ldr	r2, [pc, #48]	; (1000c0fc <gpio_port0_isr_handler+0xb0>)
1000c0ca:	009b      	lsls	r3, r3, #2
1000c0cc:	18d3      	adds	r3, r2, r3
1000c0ce:	3304      	adds	r3, #4
1000c0d0:	681b      	ldr	r3, [r3, #0]
1000c0d2:	4798      	blx	r3
			break;
1000c0d4:	e009      	b.n	1000c0ea <gpio_port0_isr_handler+0x9e>
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c0d6:	1dfb      	adds	r3, r7, #7
1000c0d8:	781a      	ldrb	r2, [r3, #0]
1000c0da:	1dfb      	adds	r3, r7, #7
1000c0dc:	3201      	adds	r2, #1
1000c0de:	701a      	strb	r2, [r3, #0]
1000c0e0:	1dfb      	adds	r3, r7, #7
1000c0e2:	781b      	ldrb	r3, [r3, #0]
1000c0e4:	2b0f      	cmp	r3, #15
1000c0e6:	d9bd      	bls.n	1000c064 <gpio_port0_isr_handler+0x18>
1000c0e8:	e000      	b.n	1000c0ec <gpio_port0_isr_handler+0xa0>
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
			break;
1000c0ea:	46c0      	nop			; (mov r8, r8)
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
1000c0ec:	2017      	movs	r0, #23
1000c0ee:	4b04      	ldr	r3, [pc, #16]	; (1000c100 <gpio_port0_isr_handler+0xb4>)
1000c0f0:	4798      	blx	r3
}
1000c0f2:	46c0      	nop			; (mov r8, r8)
1000c0f4:	46bd      	mov	sp, r7
1000c0f6:	b002      	add	sp, #8
1000c0f8:	bd80      	pop	{r7, pc}
1000c0fa:	46c0      	nop			; (mov r8, r8)
1000c0fc:	1001a4c4 	.word	0x1001a4c4
1000c100:	1000b531 	.word	0x1000b531

1000c104 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000c104:	b580      	push	{r7, lr}
1000c106:	b082      	sub	sp, #8
1000c108:	af00      	add	r7, sp, #0
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000c10a:	4b2d      	ldr	r3, [pc, #180]	; (1000c1c0 <gpio_port1_isr_handler+0xbc>)
1000c10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000c10e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c110:	b29b      	uxth	r3, r3
1000c112:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < 16; i++){
1000c114:	1dfb      	adds	r3, r7, #7
1000c116:	2200      	movs	r2, #0
1000c118:	701a      	strb	r2, [r3, #0]
1000c11a:	e046      	b.n	1000c1aa <gpio_port1_isr_handler+0xa6>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c11c:	683a      	ldr	r2, [r7, #0]
1000c11e:	23e0      	movs	r3, #224	; 0xe0
1000c120:	021b      	lsls	r3, r3, #8
1000c122:	4013      	ands	r3, r2
1000c124:	d002      	beq.n	1000c12c <gpio_port1_isr_handler+0x28>
			aon_handle_ext_wakeup_isr();
1000c126:	4b27      	ldr	r3, [pc, #156]	; (1000c1c4 <gpio_port1_isr_handler+0xc0>)
1000c128:	681b      	ldr	r3, [r3, #0]
1000c12a:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000c12c:	1dfb      	adds	r3, r7, #7
1000c12e:	781b      	ldrb	r3, [r3, #0]
1000c130:	2201      	movs	r2, #1
1000c132:	409a      	lsls	r2, r3
1000c134:	0013      	movs	r3, r2
1000c136:	001a      	movs	r2, r3
1000c138:	683b      	ldr	r3, [r7, #0]
1000c13a:	4013      	ands	r3, r2
1000c13c:	d030      	beq.n	1000c1a0 <gpio_port1_isr_handler+0x9c>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
1000c13e:	4b20      	ldr	r3, [pc, #128]	; (1000c1c0 <gpio_port1_isr_handler+0xbc>)
1000c140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000c142:	4b1f      	ldr	r3, [pc, #124]	; (1000c1c0 <gpio_port1_isr_handler+0xbc>)
1000c144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000c146:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c148:	b29b      	uxth	r3, r3
1000c14a:	b219      	sxth	r1, r3
1000c14c:	1dfb      	adds	r3, r7, #7
1000c14e:	781b      	ldrb	r3, [r3, #0]
1000c150:	2001      	movs	r0, #1
1000c152:	4098      	lsls	r0, r3
1000c154:	0003      	movs	r3, r0
1000c156:	b21b      	sxth	r3, r3
1000c158:	430b      	orrs	r3, r1
1000c15a:	b21b      	sxth	r3, r3
1000c15c:	b29b      	uxth	r3, r3
1000c15e:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c160:	4b17      	ldr	r3, [pc, #92]	; (1000c1c0 <gpio_port1_isr_handler+0xbc>)
1000c162:	228e      	movs	r2, #142	; 0x8e
1000c164:	5a9b      	ldrh	r3, [r3, r2]
1000c166:	001a      	movs	r2, r3
1000c168:	1dfb      	adds	r3, r7, #7
1000c16a:	781b      	ldrb	r3, [r3, #0]
1000c16c:	411a      	asrs	r2, r3
1000c16e:	0013      	movs	r3, r2
1000c170:	2201      	movs	r2, #1
1000c172:	4013      	ands	r3, r2
1000c174:	d014      	beq.n	1000c1a0 <gpio_port1_isr_handler+0x9c>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000c176:	4b12      	ldr	r3, [pc, #72]	; (1000c1c0 <gpio_port1_isr_handler+0xbc>)
1000c178:	228c      	movs	r2, #140	; 0x8c
1000c17a:	5a9b      	ldrh	r3, [r3, r2]
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c17c:	001a      	movs	r2, r3
1000c17e:	1dfb      	adds	r3, r7, #7
1000c180:	781b      	ldrb	r3, [r3, #0]
1000c182:	411a      	asrs	r2, r3
1000c184:	0013      	movs	r3, r2
1000c186:	2201      	movs	r2, #1
1000c188:	4013      	ands	r3, r2
1000c18a:	d009      	beq.n	1000c1a0 <gpio_port1_isr_handler+0x9c>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000c18c:	1dfb      	adds	r3, r7, #7
1000c18e:	781b      	ldrb	r3, [r3, #0]
1000c190:	4a0b      	ldr	r2, [pc, #44]	; (1000c1c0 <gpio_port1_isr_handler+0xbc>)
1000c192:	3312      	adds	r3, #18
1000c194:	009b      	lsls	r3, r3, #2
1000c196:	18d3      	adds	r3, r2, r3
1000c198:	3304      	adds	r3, #4
1000c19a:	681b      	ldr	r3, [r3, #0]
1000c19c:	4798      	blx	r3
				break;
1000c19e:	e008      	b.n	1000c1b2 <gpio_port1_isr_handler+0xae>
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c1a0:	1dfb      	adds	r3, r7, #7
1000c1a2:	781a      	ldrb	r2, [r3, #0]
1000c1a4:	1dfb      	adds	r3, r7, #7
1000c1a6:	3201      	adds	r2, #1
1000c1a8:	701a      	strb	r2, [r3, #0]
1000c1aa:	1dfb      	adds	r3, r7, #7
1000c1ac:	781b      	ldrb	r3, [r3, #0]
1000c1ae:	2b0f      	cmp	r3, #15
1000c1b0:	d9b4      	bls.n	1000c11c <gpio_port1_isr_handler+0x18>
				_gpio_instances[1].callback[i]();
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
1000c1b2:	2018      	movs	r0, #24
1000c1b4:	4b04      	ldr	r3, [pc, #16]	; (1000c1c8 <gpio_port1_isr_handler+0xc4>)
1000c1b6:	4798      	blx	r3
}
1000c1b8:	46c0      	nop			; (mov r8, r8)
1000c1ba:	46bd      	mov	sp, r7
1000c1bc:	b002      	add	sp, #8
1000c1be:	bd80      	pop	{r7, pc}
1000c1c0:	1001a4c4 	.word	0x1001a4c4
1000c1c4:	10019a94 	.word	0x10019a94
1000c1c8:	1000b531 	.word	0x1000b531

1000c1cc <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c1cc:	b580      	push	{r7, lr}
1000c1ce:	b082      	sub	sp, #8
1000c1d0:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
1000c1d2:	1dfb      	adds	r3, r7, #7
1000c1d4:	2200      	movs	r2, #0
1000c1d6:	701a      	strb	r2, [r3, #0]
1000c1d8:	e038      	b.n	1000c24c <gpio_init+0x80>
		for(j = 0; j < 16; j++) {
1000c1da:	1dbb      	adds	r3, r7, #6
1000c1dc:	2200      	movs	r2, #0
1000c1de:	701a      	strb	r2, [r3, #0]
1000c1e0:	e013      	b.n	1000c20a <gpio_init+0x3e>
			_gpio_instances[i].callback[j] = NULL;
1000c1e2:	1dfb      	adds	r3, r7, #7
1000c1e4:	781a      	ldrb	r2, [r3, #0]
1000c1e6:	1dbb      	adds	r3, r7, #6
1000c1e8:	7818      	ldrb	r0, [r3, #0]
1000c1ea:	4924      	ldr	r1, [pc, #144]	; (1000c27c <gpio_init+0xb0>)
1000c1ec:	0013      	movs	r3, r2
1000c1ee:	00db      	lsls	r3, r3, #3
1000c1f0:	189b      	adds	r3, r3, r2
1000c1f2:	005b      	lsls	r3, r3, #1
1000c1f4:	181b      	adds	r3, r3, r0
1000c1f6:	009b      	lsls	r3, r3, #2
1000c1f8:	18cb      	adds	r3, r1, r3
1000c1fa:	3304      	adds	r3, #4
1000c1fc:	2200      	movs	r2, #0
1000c1fe:	601a      	str	r2, [r3, #0]
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
1000c200:	1dbb      	adds	r3, r7, #6
1000c202:	781a      	ldrb	r2, [r3, #0]
1000c204:	1dbb      	adds	r3, r7, #6
1000c206:	3201      	adds	r2, #1
1000c208:	701a      	strb	r2, [r3, #0]
1000c20a:	1dbb      	adds	r3, r7, #6
1000c20c:	781b      	ldrb	r3, [r3, #0]
1000c20e:	2b0f      	cmp	r3, #15
1000c210:	d9e7      	bls.n	1000c1e2 <gpio_init+0x16>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c212:	1dfb      	adds	r3, r7, #7
1000c214:	781a      	ldrb	r2, [r3, #0]
1000c216:	4919      	ldr	r1, [pc, #100]	; (1000c27c <gpio_init+0xb0>)
1000c218:	2046      	movs	r0, #70	; 0x46
1000c21a:	0013      	movs	r3, r2
1000c21c:	00db      	lsls	r3, r3, #3
1000c21e:	189b      	adds	r3, r3, r2
1000c220:	00db      	lsls	r3, r3, #3
1000c222:	18cb      	adds	r3, r1, r3
1000c224:	181b      	adds	r3, r3, r0
1000c226:	2200      	movs	r2, #0
1000c228:	801a      	strh	r2, [r3, #0]
		_gpio_instances[i].callback_reg_mask = 0;
1000c22a:	1dfb      	adds	r3, r7, #7
1000c22c:	781a      	ldrb	r2, [r3, #0]
1000c22e:	4913      	ldr	r1, [pc, #76]	; (1000c27c <gpio_init+0xb0>)
1000c230:	2044      	movs	r0, #68	; 0x44
1000c232:	0013      	movs	r3, r2
1000c234:	00db      	lsls	r3, r3, #3
1000c236:	189b      	adds	r3, r3, r2
1000c238:	00db      	lsls	r3, r3, #3
1000c23a:	18cb      	adds	r3, r1, r3
1000c23c:	181b      	adds	r3, r3, r0
1000c23e:	2200      	movs	r2, #0
1000c240:	801a      	strh	r2, [r3, #0]
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
1000c242:	1dfb      	adds	r3, r7, #7
1000c244:	781a      	ldrb	r2, [r3, #0]
1000c246:	1dfb      	adds	r3, r7, #7
1000c248:	3201      	adds	r2, #1
1000c24a:	701a      	strb	r2, [r3, #0]
1000c24c:	1dfb      	adds	r3, r7, #7
1000c24e:	781b      	ldrb	r3, [r3, #0]
1000c250:	2b01      	cmp	r3, #1
1000c252:	d9c2      	bls.n	1000c1da <gpio_init+0xe>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c254:	4b09      	ldr	r3, [pc, #36]	; (1000c27c <gpio_init+0xb0>)
1000c256:	4a0a      	ldr	r2, [pc, #40]	; (1000c280 <gpio_init+0xb4>)
1000c258:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c25a:	4b08      	ldr	r3, [pc, #32]	; (1000c27c <gpio_init+0xb0>)
1000c25c:	4a09      	ldr	r2, [pc, #36]	; (1000c284 <gpio_init+0xb8>)
1000c25e:	649a      	str	r2, [r3, #72]	; 0x48
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c260:	4b09      	ldr	r3, [pc, #36]	; (1000c288 <gpio_init+0xbc>)
1000c262:	0019      	movs	r1, r3
1000c264:	2027      	movs	r0, #39	; 0x27
1000c266:	4b09      	ldr	r3, [pc, #36]	; (1000c28c <gpio_init+0xc0>)
1000c268:	4798      	blx	r3
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c26a:	4b09      	ldr	r3, [pc, #36]	; (1000c290 <gpio_init+0xc4>)
1000c26c:	0019      	movs	r1, r3
1000c26e:	2028      	movs	r0, #40	; 0x28
1000c270:	4b06      	ldr	r3, [pc, #24]	; (1000c28c <gpio_init+0xc0>)
1000c272:	4798      	blx	r3
}
1000c274:	46c0      	nop			; (mov r8, r8)
1000c276:	46bd      	mov	sp, r7
1000c278:	b002      	add	sp, #8
1000c27a:	bd80      	pop	{r7, pc}
1000c27c:	1001a4c4 	.word	0x1001a4c4
1000c280:	40010000 	.word	0x40010000
1000c284:	40011000 	.word	0x40011000
1000c288:	1000c04d 	.word	0x1000c04d
1000c28c:	1000e561 	.word	0x1000e561
1000c290:	1000c105 	.word	0x1000c105

1000c294 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000c294:	b580      	push	{r7, lr}
1000c296:	b082      	sub	sp, #8
1000c298:	af00      	add	r7, sp, #0
1000c29a:	0002      	movs	r2, r0
1000c29c:	1dfb      	adds	r3, r7, #7
1000c29e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c2a0:	4b06      	ldr	r3, [pc, #24]	; (1000c2bc <NVIC_EnableIRQ+0x28>)
1000c2a2:	1dfa      	adds	r2, r7, #7
1000c2a4:	7812      	ldrb	r2, [r2, #0]
1000c2a6:	0011      	movs	r1, r2
1000c2a8:	221f      	movs	r2, #31
1000c2aa:	400a      	ands	r2, r1
1000c2ac:	2101      	movs	r1, #1
1000c2ae:	4091      	lsls	r1, r2
1000c2b0:	000a      	movs	r2, r1
1000c2b2:	601a      	str	r2, [r3, #0]
}
1000c2b4:	46c0      	nop			; (mov r8, r8)
1000c2b6:	46bd      	mov	sp, r7
1000c2b8:	b002      	add	sp, #8
1000c2ba:	bd80      	pop	{r7, pc}
1000c2bc:	e000e100 	.word	0xe000e100

1000c2c0 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000c2c0:	b580      	push	{r7, lr}
1000c2c2:	b082      	sub	sp, #8
1000c2c4:	af00      	add	r7, sp, #0
1000c2c6:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c2c8:	46c0      	nop			; (mov r8, r8)
1000c2ca:	687b      	ldr	r3, [r7, #4]
1000c2cc:	2228      	movs	r2, #40	; 0x28
1000c2ce:	5c9b      	ldrb	r3, [r3, r2]
1000c2d0:	07db      	lsls	r3, r3, #31
1000c2d2:	0fdb      	lsrs	r3, r3, #31
1000c2d4:	b2db      	uxtb	r3, r3
1000c2d6:	2b00      	cmp	r3, #0
1000c2d8:	d1f7      	bne.n	1000c2ca <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000c2da:	46c0      	nop			; (mov r8, r8)
1000c2dc:	46bd      	mov	sp, r7
1000c2de:	b002      	add	sp, #8
1000c2e0:	bd80      	pop	{r7, pc}
1000c2e2:	46c0      	nop			; (mov r8, r8)

1000c2e4 <i2c_disable>:
 *
 * \param[in,out] i2c_module Pointer to the driver instance to disable
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
1000c2e4:	b580      	push	{r7, lr}
1000c2e6:	b082      	sub	sp, #8
1000c2e8:	af00      	add	r7, sp, #0
1000c2ea:	6078      	str	r0, [r7, #4]
	i2c_wait_for_idle(i2c_module);
1000c2ec:	687b      	ldr	r3, [r7, #4]
1000c2ee:	0018      	movs	r0, r3
1000c2f0:	4b04      	ldr	r3, [pc, #16]	; (1000c304 <i2c_disable+0x20>)
1000c2f2:	4798      	blx	r3
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000c2f4:	687b      	ldr	r3, [r7, #4]
1000c2f6:	2200      	movs	r2, #0
1000c2f8:	751a      	strb	r2, [r3, #20]
}
1000c2fa:	46c0      	nop			; (mov r8, r8)
1000c2fc:	46bd      	mov	sp, r7
1000c2fe:	b002      	add	sp, #8
1000c300:	bd80      	pop	{r7, pc}
1000c302:	46c0      	nop			; (mov r8, r8)
1000c304:	1000c2c1 	.word	0x1000c2c1

1000c308 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
1000c308:	b580      	push	{r7, lr}
1000c30a:	b082      	sub	sp, #8
1000c30c:	af00      	add	r7, sp, #0
1000c30e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000c310:	687b      	ldr	r3, [r7, #4]
1000c312:	2203      	movs	r2, #3
1000c314:	701a      	strb	r2, [r3, #0]
	config->clock_divider   = 0x10;
1000c316:	687b      	ldr	r3, [r7, #4]
1000c318:	2210      	movs	r2, #16
1000c31a:	805a      	strh	r2, [r3, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
1000c31c:	687b      	ldr	r3, [r7, #4]
1000c31e:	2208      	movs	r2, #8
1000c320:	605a      	str	r2, [r3, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
1000c322:	687b      	ldr	r3, [r7, #4]
1000c324:	2209      	movs	r2, #9
1000c326:	60da      	str	r2, [r3, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
1000c328:	687b      	ldr	r3, [r7, #4]
1000c32a:	2202      	movs	r2, #2
1000c32c:	609a      	str	r2, [r3, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
1000c32e:	687b      	ldr	r3, [r7, #4]
1000c330:	2202      	movs	r2, #2
1000c332:	611a      	str	r2, [r3, #16]
}
1000c334:	46c0      	nop			; (mov r8, r8)
1000c336:	46bd      	mov	sp, r7
1000c338:	b002      	add	sp, #8
1000c33a:	bd80      	pop	{r7, pc}

1000c33c <_i2c_master_set_config>:
 *
 */
static void _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
1000c33c:	b580      	push	{r7, lr}
1000c33e:	b084      	sub	sp, #16
1000c340:	af00      	add	r7, sp, #0
1000c342:	6078      	str	r0, [r7, #4]
1000c344:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000c346:	687b      	ldr	r3, [r7, #4]
1000c348:	681b      	ldr	r3, [r3, #0]
1000c34a:	60fb      	str	r3, [r7, #12]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000c34c:	683b      	ldr	r3, [r7, #0]
1000c34e:	685b      	ldr	r3, [r3, #4]
1000c350:	b2da      	uxtb	r2, r3
1000c352:	683b      	ldr	r3, [r7, #0]
1000c354:	689b      	ldr	r3, [r3, #8]
1000c356:	b29b      	uxth	r3, r3
1000c358:	0019      	movs	r1, r3
1000c35a:	0010      	movs	r0, r2
1000c35c:	4b0d      	ldr	r3, [pc, #52]	; (1000c394 <_i2c_master_set_config+0x58>)
1000c35e:	4798      	blx	r3
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000c360:	683b      	ldr	r3, [r7, #0]
1000c362:	68db      	ldr	r3, [r3, #12]
1000c364:	b2da      	uxtb	r2, r3
1000c366:	683b      	ldr	r3, [r7, #0]
1000c368:	691b      	ldr	r3, [r3, #16]
1000c36a:	b29b      	uxth	r3, r3
1000c36c:	0019      	movs	r1, r3
1000c36e:	0010      	movs	r0, r2
1000c370:	4b08      	ldr	r3, [pc, #32]	; (1000c394 <_i2c_master_set_config+0x58>)
1000c372:	4798      	blx	r3
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000c374:	683b      	ldr	r3, [r7, #0]
1000c376:	781a      	ldrb	r2, [r3, #0]
1000c378:	68fb      	ldr	r3, [r7, #12]
1000c37a:	741a      	strb	r2, [r3, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000c37c:	683b      	ldr	r3, [r7, #0]
1000c37e:	885a      	ldrh	r2, [r3, #2]
1000c380:	68fb      	ldr	r3, [r7, #12]
1000c382:	831a      	strh	r2, [r3, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
1000c384:	68fb      	ldr	r3, [r7, #12]
1000c386:	2201      	movs	r2, #1
1000c388:	771a      	strb	r2, [r3, #28]
}
1000c38a:	46c0      	nop			; (mov r8, r8)
1000c38c:	46bd      	mov	sp, r7
1000c38e:	b004      	add	sp, #16
1000c390:	bd80      	pop	{r7, pc}
1000c392:	46c0      	nop			; (mov r8, r8)
1000c394:	1000b8c1 	.word	0x1000b8c1

1000c398 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
1000c398:	b580      	push	{r7, lr}
1000c39a:	b084      	sub	sp, #16
1000c39c:	af00      	add	r7, sp, #0
1000c39e:	60f8      	str	r0, [r7, #12]
1000c3a0:	60b9      	str	r1, [r7, #8]
1000c3a2:	607a      	str	r2, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000c3a4:	68fb      	ldr	r3, [r7, #12]
1000c3a6:	68ba      	ldr	r2, [r7, #8]
1000c3a8:	601a      	str	r2, [r3, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000c3aa:	68fb      	ldr	r3, [r7, #12]
1000c3ac:	2b00      	cmp	r3, #0
1000c3ae:	d002      	beq.n	1000c3b6 <i2c_master_init+0x1e>
1000c3b0:	687b      	ldr	r3, [r7, #4]
1000c3b2:	2b00      	cmp	r3, #0
1000c3b4:	d101      	bne.n	1000c3ba <i2c_master_init+0x22>
		return STATUS_ERR_INVALID_ARG;
1000c3b6:	2317      	movs	r3, #23
1000c3b8:	e05f      	b.n	1000c47a <i2c_master_init+0xe2>

	i2c_disable(module->hw);
1000c3ba:	68fb      	ldr	r3, [r7, #12]
1000c3bc:	681b      	ldr	r3, [r3, #0]
1000c3be:	0018      	movs	r0, r3
1000c3c0:	4b30      	ldr	r3, [pc, #192]	; (1000c484 <i2c_master_init+0xec>)
1000c3c2:	4798      	blx	r3
	if (module->hw == I2C0) {
1000c3c4:	68fb      	ldr	r3, [r7, #12]
1000c3c6:	681b      	ldr	r3, [r3, #0]
1000c3c8:	4a2f      	ldr	r2, [pc, #188]	; (1000c488 <i2c_master_init+0xf0>)
1000c3ca:	4293      	cmp	r3, r2
1000c3cc:	d103      	bne.n	1000c3d6 <i2c_master_init+0x3e>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000c3ce:	2003      	movs	r0, #3
1000c3d0:	4b2e      	ldr	r3, [pc, #184]	; (1000c48c <i2c_master_init+0xf4>)
1000c3d2:	4798      	blx	r3
1000c3d4:	e00a      	b.n	1000c3ec <i2c_master_init+0x54>
	} else if (module->hw == I2C1) {
1000c3d6:	68fb      	ldr	r3, [r7, #12]
1000c3d8:	681b      	ldr	r3, [r3, #0]
1000c3da:	4a2d      	ldr	r2, [pc, #180]	; (1000c490 <i2c_master_init+0xf8>)
1000c3dc:	4293      	cmp	r3, r2
1000c3de:	d103      	bne.n	1000c3e8 <i2c_master_init+0x50>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000c3e0:	2019      	movs	r0, #25
1000c3e2:	4b2a      	ldr	r3, [pc, #168]	; (1000c48c <i2c_master_init+0xf4>)
1000c3e4:	4798      	blx	r3
1000c3e6:	e001      	b.n	1000c3ec <i2c_master_init+0x54>
	} else {
		return STATUS_ERR_INVALID_ARG;
1000c3e8:	2317      	movs	r3, #23
1000c3ea:	e046      	b.n	1000c47a <i2c_master_init+0xe2>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
1000c3ec:	68fb      	ldr	r3, [r7, #12]
1000c3ee:	2200      	movs	r2, #0
1000c3f0:	741a      	strb	r2, [r3, #16]
	module->enabled_callback    = 0;
1000c3f2:	68fb      	ldr	r3, [r7, #12]
1000c3f4:	2200      	movs	r2, #0
1000c3f6:	745a      	strb	r2, [r3, #17]
	module->buffer_length       = 0;
1000c3f8:	68fb      	ldr	r3, [r7, #12]
1000c3fa:	2200      	movs	r2, #0
1000c3fc:	825a      	strh	r2, [r3, #18]
	module->buffer_remaining    = 0;
1000c3fe:	68fb      	ldr	r3, [r7, #12]
1000c400:	2200      	movs	r2, #0
1000c402:	829a      	strh	r2, [r3, #20]
	module->status              = STATUS_OK;
1000c404:	68fb      	ldr	r3, [r7, #12]
1000c406:	2200      	movs	r2, #0
1000c408:	775a      	strb	r2, [r3, #29]
	module->buffer              = NULL;
1000c40a:	68fb      	ldr	r3, [r7, #12]
1000c40c:	2200      	movs	r2, #0
1000c40e:	619a      	str	r2, [r3, #24]

	_i2c_instances = (void*)module;
1000c410:	4b20      	ldr	r3, [pc, #128]	; (1000c494 <i2c_master_init+0xfc>)
1000c412:	68fa      	ldr	r2, [r7, #12]
1000c414:	601a      	str	r2, [r3, #0]
	if (module->hw == I2C0) {
1000c416:	68fb      	ldr	r3, [r7, #12]
1000c418:	681b      	ldr	r3, [r3, #0]
1000c41a:	4a1b      	ldr	r2, [pc, #108]	; (1000c488 <i2c_master_init+0xf0>)
1000c41c:	4293      	cmp	r3, r2
1000c41e:	d110      	bne.n	1000c442 <i2c_master_init+0xaa>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
1000c420:	4b1d      	ldr	r3, [pc, #116]	; (1000c498 <i2c_master_init+0x100>)
1000c422:	0019      	movs	r1, r3
1000c424:	2018      	movs	r0, #24
1000c426:	4b1d      	ldr	r3, [pc, #116]	; (1000c49c <i2c_master_init+0x104>)
1000c428:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
1000c42a:	4b1b      	ldr	r3, [pc, #108]	; (1000c498 <i2c_master_init+0x100>)
1000c42c:	0019      	movs	r1, r3
1000c42e:	2019      	movs	r0, #25
1000c430:	4b1a      	ldr	r3, [pc, #104]	; (1000c49c <i2c_master_init+0x104>)
1000c432:	4798      	blx	r3
		NVIC_EnableIRQ(I2C0_RX_IRQn);
1000c434:	2008      	movs	r0, #8
1000c436:	4b1a      	ldr	r3, [pc, #104]	; (1000c4a0 <i2c_master_init+0x108>)
1000c438:	4798      	blx	r3
		NVIC_EnableIRQ(I2C0_TX_IRQn);
1000c43a:	2009      	movs	r0, #9
1000c43c:	4b18      	ldr	r3, [pc, #96]	; (1000c4a0 <i2c_master_init+0x108>)
1000c43e:	4798      	blx	r3
1000c440:	e014      	b.n	1000c46c <i2c_master_init+0xd4>
	} else if (module->hw == I2C1) {
1000c442:	68fb      	ldr	r3, [r7, #12]
1000c444:	681b      	ldr	r3, [r3, #0]
1000c446:	4a12      	ldr	r2, [pc, #72]	; (1000c490 <i2c_master_init+0xf8>)
1000c448:	4293      	cmp	r3, r2
1000c44a:	d10f      	bne.n	1000c46c <i2c_master_init+0xd4>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000c44c:	4b12      	ldr	r3, [pc, #72]	; (1000c498 <i2c_master_init+0x100>)
1000c44e:	0019      	movs	r1, r3
1000c450:	201a      	movs	r0, #26
1000c452:	4b12      	ldr	r3, [pc, #72]	; (1000c49c <i2c_master_init+0x104>)
1000c454:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000c456:	4b10      	ldr	r3, [pc, #64]	; (1000c498 <i2c_master_init+0x100>)
1000c458:	0019      	movs	r1, r3
1000c45a:	201b      	movs	r0, #27
1000c45c:	4b0f      	ldr	r3, [pc, #60]	; (1000c49c <i2c_master_init+0x104>)
1000c45e:	4798      	blx	r3
		NVIC_EnableIRQ(I2C1_RX_IRQn);
1000c460:	200a      	movs	r0, #10
1000c462:	4b0f      	ldr	r3, [pc, #60]	; (1000c4a0 <i2c_master_init+0x108>)
1000c464:	4798      	blx	r3
		NVIC_EnableIRQ(I2C1_TX_IRQn);
1000c466:	200b      	movs	r0, #11
1000c468:	4b0d      	ldr	r3, [pc, #52]	; (1000c4a0 <i2c_master_init+0x108>)
1000c46a:	4798      	blx	r3
	}
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);
1000c46c:	687a      	ldr	r2, [r7, #4]
1000c46e:	68fb      	ldr	r3, [r7, #12]
1000c470:	0011      	movs	r1, r2
1000c472:	0018      	movs	r0, r3
1000c474:	4b0b      	ldr	r3, [pc, #44]	; (1000c4a4 <i2c_master_init+0x10c>)
1000c476:	4798      	blx	r3

	return STATUS_OK;
1000c478:	2300      	movs	r3, #0
}
1000c47a:	0018      	movs	r0, r3
1000c47c:	46bd      	mov	sp, r7
1000c47e:	b004      	add	sp, #16
1000c480:	bd80      	pop	{r7, pc}
1000c482:	46c0      	nop			; (mov r8, r8)
1000c484:	1000c2e5 	.word	0x1000c2e5
1000c488:	40003000 	.word	0x40003000
1000c48c:	1000dfc1 	.word	0x1000dfc1
1000c490:	40003400 	.word	0x40003400
1000c494:	1001a554 	.word	0x1001a554
1000c498:	1000c7ad 	.word	0x1000c7ad
1000c49c:	1000e561 	.word	0x1000e561
1000c4a0:	1000c295 	.word	0x1000c295
1000c4a4:	1000c33d 	.word	0x1000c33d

1000c4a8 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
1000c4a8:	b580      	push	{r7, lr}
1000c4aa:	b084      	sub	sp, #16
1000c4ac:	af00      	add	r7, sp, #0
1000c4ae:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	
	I2C *const i2c_module = (module->hw);
1000c4b0:	687b      	ldr	r3, [r7, #4]
1000c4b2:	681b      	ldr	r3, [r3, #0]
1000c4b4:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	i2c_wait_for_idle(i2c_module);
1000c4b6:	68fb      	ldr	r3, [r7, #12]
1000c4b8:	0018      	movs	r0, r3
1000c4ba:	4b05      	ldr	r3, [pc, #20]	; (1000c4d0 <i2c_master_send_stop+0x28>)
1000c4bc:	4798      	blx	r3

	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000c4be:	68fb      	ldr	r3, [r7, #12]
1000c4c0:	2220      	movs	r2, #32
1000c4c2:	2100      	movs	r1, #0
1000c4c4:	5499      	strb	r1, [r3, r2]
}
1000c4c6:	46c0      	nop			; (mov r8, r8)
1000c4c8:	46bd      	mov	sp, r7
1000c4ca:	b004      	add	sp, #16
1000c4cc:	bd80      	pop	{r7, pc}
1000c4ce:	46c0      	nop			; (mov r8, r8)
1000c4d0:	1000c2c1 	.word	0x1000c2c1

1000c4d4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
1000c4d4:	b580      	push	{r7, lr}
1000c4d6:	b082      	sub	sp, #8
1000c4d8:	af00      	add	r7, sp, #0
1000c4da:	0002      	movs	r2, r0
1000c4dc:	1dfb      	adds	r3, r7, #7
1000c4de:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c4e0:	4a08      	ldr	r2, [pc, #32]	; (1000c504 <NVIC_ClearPendingIRQ+0x30>)
1000c4e2:	1dfb      	adds	r3, r7, #7
1000c4e4:	781b      	ldrb	r3, [r3, #0]
1000c4e6:	0019      	movs	r1, r3
1000c4e8:	231f      	movs	r3, #31
1000c4ea:	400b      	ands	r3, r1
1000c4ec:	2101      	movs	r1, #1
1000c4ee:	4099      	lsls	r1, r3
1000c4f0:	000b      	movs	r3, r1
1000c4f2:	0019      	movs	r1, r3
1000c4f4:	23c0      	movs	r3, #192	; 0xc0
1000c4f6:	005b      	lsls	r3, r3, #1
1000c4f8:	50d1      	str	r1, [r2, r3]
}
1000c4fa:	46c0      	nop			; (mov r8, r8)
1000c4fc:	46bd      	mov	sp, r7
1000c4fe:	b002      	add	sp, #8
1000c500:	bd80      	pop	{r7, pc}
1000c502:	46c0      	nop			; (mov r8, r8)
1000c504:	e000e100 	.word	0xe000e100

1000c508 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000c508:	b580      	push	{r7, lr}
1000c50a:	b082      	sub	sp, #8
1000c50c:	af00      	add	r7, sp, #0
1000c50e:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c510:	46c0      	nop			; (mov r8, r8)
1000c512:	687b      	ldr	r3, [r7, #4]
1000c514:	2228      	movs	r2, #40	; 0x28
1000c516:	5c9b      	ldrb	r3, [r3, r2]
1000c518:	07db      	lsls	r3, r3, #31
1000c51a:	0fdb      	lsrs	r3, r3, #31
1000c51c:	b2db      	uxtb	r3, r3
1000c51e:	2b00      	cmp	r3, #0
1000c520:	d1f7      	bne.n	1000c512 <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000c522:	46c0      	nop			; (mov r8, r8)
1000c524:	46bd      	mov	sp, r7
1000c526:	b002      	add	sp, #8
1000c528:	bd80      	pop	{r7, pc}
1000c52a:	46c0      	nop			; (mov r8, r8)

1000c52c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
1000c52c:	b580      	push	{r7, lr}
1000c52e:	b084      	sub	sp, #16
1000c530:	af00      	add	r7, sp, #0
1000c532:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	I2C *const i2c_module = module->hw;
1000c534:	687b      	ldr	r3, [r7, #4]
1000c536:	681b      	ldr	r3, [r3, #0]
1000c538:	60fb      	str	r3, [r7, #12]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000c53a:	687b      	ldr	r3, [r7, #4]
1000c53c:	8a5b      	ldrh	r3, [r3, #18]
1000c53e:	b299      	uxth	r1, r3
1000c540:	687b      	ldr	r3, [r7, #4]
1000c542:	8a9b      	ldrh	r3, [r3, #20]
1000c544:	b29a      	uxth	r2, r3
1000c546:	230a      	movs	r3, #10
1000c548:	18fb      	adds	r3, r7, r3
1000c54a:	1a8a      	subs	r2, r1, r2
1000c54c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
1000c54e:	687b      	ldr	r3, [r7, #4]
1000c550:	8a9b      	ldrh	r3, [r3, #20]
1000c552:	b29b      	uxth	r3, r3
1000c554:	3b01      	subs	r3, #1
1000c556:	b29a      	uxth	r2, r3
1000c558:	687b      	ldr	r3, [r7, #4]
1000c55a:	829a      	strh	r2, [r3, #20]

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
1000c55c:	687b      	ldr	r3, [r7, #4]
1000c55e:	699a      	ldr	r2, [r3, #24]
1000c560:	230a      	movs	r3, #10
1000c562:	18fb      	adds	r3, r7, r3
1000c564:	881b      	ldrh	r3, [r3, #0]
1000c566:	18d3      	adds	r3, r2, r3
1000c568:	68fa      	ldr	r2, [r7, #12]
1000c56a:	7912      	ldrb	r2, [r2, #4]
1000c56c:	b2d2      	uxtb	r2, r2
1000c56e:	701a      	strb	r2, [r3, #0]
}
1000c570:	46c0      	nop			; (mov r8, r8)
1000c572:	46bd      	mov	sp, r7
1000c574:	b004      	add	sp, #16
1000c576:	bd80      	pop	{r7, pc}

1000c578 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
1000c578:	b580      	push	{r7, lr}
1000c57a:	b084      	sub	sp, #16
1000c57c:	af00      	add	r7, sp, #0
1000c57e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	I2C *const i2c_module = module->hw;
1000c580:	687b      	ldr	r3, [r7, #4]
1000c582:	681b      	ldr	r3, [r3, #0]
1000c584:	60fb      	str	r3, [r7, #12]

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000c586:	687b      	ldr	r3, [r7, #4]
1000c588:	8a5b      	ldrh	r3, [r3, #18]
1000c58a:	b29a      	uxth	r2, r3
1000c58c:	687b      	ldr	r3, [r7, #4]
1000c58e:	8a9b      	ldrh	r3, [r3, #20]
1000c590:	b29b      	uxth	r3, r3
1000c592:	1ad3      	subs	r3, r2, r3
1000c594:	b29a      	uxth	r2, r3
1000c596:	230a      	movs	r3, #10
1000c598:	18fb      	adds	r3, r7, r3
1000c59a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
1000c59c:	687b      	ldr	r3, [r7, #4]
1000c59e:	8a9b      	ldrh	r3, [r3, #20]
1000c5a0:	b29b      	uxth	r3, r3
1000c5a2:	3b01      	subs	r3, #1
1000c5a4:	b29a      	uxth	r2, r3
1000c5a6:	687b      	ldr	r3, [r7, #4]
1000c5a8:	829a      	strh	r2, [r3, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
1000c5aa:	687b      	ldr	r3, [r7, #4]
1000c5ac:	699b      	ldr	r3, [r3, #24]
1000c5ae:	220a      	movs	r2, #10
1000c5b0:	18ba      	adds	r2, r7, r2
1000c5b2:	8812      	ldrh	r2, [r2, #0]
1000c5b4:	b292      	uxth	r2, r2
1000c5b6:	189b      	adds	r3, r3, r2
1000c5b8:	781b      	ldrb	r3, [r3, #0]
1000c5ba:	b2db      	uxtb	r3, r3
1000c5bc:	b29a      	uxth	r2, r3
1000c5be:	68fb      	ldr	r3, [r7, #12]
1000c5c0:	801a      	strh	r2, [r3, #0]
	
	if (module->buffer_remaining <= 0) {
1000c5c2:	687b      	ldr	r3, [r7, #4]
1000c5c4:	8a9b      	ldrh	r3, [r3, #20]
1000c5c6:	b29b      	uxth	r3, r3
1000c5c8:	2b00      	cmp	r3, #0
1000c5ca:	d103      	bne.n	1000c5d4 <_i2c_master_write+0x5c>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
1000c5cc:	68fb      	ldr	r3, [r7, #12]
1000c5ce:	222c      	movs	r2, #44	; 0x2c
1000c5d0:	2110      	movs	r1, #16
1000c5d2:	5499      	strb	r1, [r3, r2]
	}
}
1000c5d4:	46c0      	nop			; (mov r8, r8)
1000c5d6:	46bd      	mov	sp, r7
1000c5d8:	b004      	add	sp, #16
1000c5da:	bd80      	pop	{r7, pc}

1000c5dc <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
1000c5dc:	b580      	push	{r7, lr}
1000c5de:	b084      	sub	sp, #16
1000c5e0:	af00      	add	r7, sp, #0
1000c5e2:	60f8      	str	r0, [r7, #12]
1000c5e4:	60b9      	str	r1, [r7, #8]
1000c5e6:	1dfb      	adds	r3, r7, #7
1000c5e8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
1000c5ea:	1dfb      	adds	r3, r7, #7
1000c5ec:	781a      	ldrb	r2, [r3, #0]
1000c5ee:	68fb      	ldr	r3, [r7, #12]
1000c5f0:	3202      	adds	r2, #2
1000c5f2:	0092      	lsls	r2, r2, #2
1000c5f4:	68b9      	ldr	r1, [r7, #8]
1000c5f6:	50d1      	str	r1, [r2, r3]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
1000c5f8:	68fb      	ldr	r3, [r7, #12]
1000c5fa:	7c1b      	ldrb	r3, [r3, #16]
1000c5fc:	b2db      	uxtb	r3, r3
1000c5fe:	b25a      	sxtb	r2, r3
1000c600:	1dfb      	adds	r3, r7, #7
1000c602:	781b      	ldrb	r3, [r3, #0]
1000c604:	2101      	movs	r1, #1
1000c606:	4099      	lsls	r1, r3
1000c608:	000b      	movs	r3, r1
1000c60a:	b25b      	sxtb	r3, r3
1000c60c:	4313      	orrs	r3, r2
1000c60e:	b25b      	sxtb	r3, r3
1000c610:	b2da      	uxtb	r2, r3
1000c612:	68fb      	ldr	r3, [r7, #12]
1000c614:	741a      	strb	r2, [r3, #16]
}
1000c616:	46c0      	nop			; (mov r8, r8)
1000c618:	46bd      	mov	sp, r7
1000c61a:	b004      	add	sp, #16
1000c61c:	bd80      	pop	{r7, pc}
1000c61e:	46c0      	nop			; (mov r8, r8)

1000c620 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c620:	b580      	push	{r7, lr}
1000c622:	b084      	sub	sp, #16
1000c624:	af00      	add	r7, sp, #0
1000c626:	6078      	str	r0, [r7, #4]
1000c628:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	I2C *const i2c_module = module->hw;
1000c62a:	687b      	ldr	r3, [r7, #4]
1000c62c:	681b      	ldr	r3, [r3, #0]
1000c62e:	60fb      	str	r3, [r7, #12]

	/* Save packet to software module */
	module->buffer             = packet->data;
1000c630:	683b      	ldr	r3, [r7, #0]
1000c632:	685a      	ldr	r2, [r3, #4]
1000c634:	687b      	ldr	r3, [r7, #4]
1000c636:	619a      	str	r2, [r3, #24]
	module->buffer_remaining   = packet->data_length;
1000c638:	683b      	ldr	r3, [r7, #0]
1000c63a:	885a      	ldrh	r2, [r3, #2]
1000c63c:	687b      	ldr	r3, [r7, #4]
1000c63e:	829a      	strh	r2, [r3, #20]
	module->transfer_direction = I2C_TRANSFER_READ;
1000c640:	687b      	ldr	r3, [r7, #4]
1000c642:	2201      	movs	r2, #1
1000c644:	771a      	strb	r2, [r3, #28]
	module->status             = STATUS_BUSY;
1000c646:	687b      	ldr	r3, [r7, #4]
1000c648:	2205      	movs	r2, #5
1000c64a:	775a      	strb	r2, [r3, #29]
	
	i2c_wait_for_idle(i2c_module);
1000c64c:	68fb      	ldr	r3, [r7, #12]
1000c64e:	0018      	movs	r0, r3
1000c650:	4b11      	ldr	r3, [pc, #68]	; (1000c698 <_i2c_master_read_packet+0x78>)
1000c652:	4798      	blx	r3
	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000c654:	68fb      	ldr	r3, [r7, #12]
1000c656:	2234      	movs	r2, #52	; 0x34
1000c658:	2101      	movs	r1, #1
1000c65a:	5499      	strb	r1, [r3, r2]
	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000c65c:	68fb      	ldr	r3, [r7, #12]
1000c65e:	2220      	movs	r2, #32
1000c660:	2101      	movs	r1, #1
1000c662:	5499      	strb	r1, [r3, r2]
	/* Set address and direction bit. Will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | module->transfer_direction;
1000c664:	683b      	ldr	r3, [r7, #0]
1000c666:	881b      	ldrh	r3, [r3, #0]
	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit. Will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000c668:	18db      	adds	r3, r3, r3
1000c66a:	b29a      	uxth	r2, r3
			(packet->address << 1) | module->transfer_direction;
1000c66c:	687b      	ldr	r3, [r7, #4]
1000c66e:	7f1b      	ldrb	r3, [r3, #28]
1000c670:	b2db      	uxtb	r3, r3
	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit. Will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000c672:	b29b      	uxth	r3, r3
1000c674:	4313      	orrs	r3, r2
1000c676:	b29b      	uxth	r3, r3
1000c678:	2280      	movs	r2, #128	; 0x80
1000c67a:	0052      	lsls	r2, r2, #1
1000c67c:	4313      	orrs	r3, r2
1000c67e:	b29a      	uxth	r2, r3
1000c680:	68fb      	ldr	r3, [r7, #12]
1000c682:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | module->transfer_direction;
	/* Enable interrupts */
	i2c_module->RX_INTERRUPT_MASK.reg = I2C_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c684:	68fb      	ldr	r3, [r7, #12]
1000c686:	2230      	movs	r2, #48	; 0x30
1000c688:	2101      	movs	r1, #1
1000c68a:	5499      	strb	r1, [r3, r2]
	
	return STATUS_OK;
1000c68c:	2300      	movs	r3, #0
}
1000c68e:	0018      	movs	r0, r3
1000c690:	46bd      	mov	sp, r7
1000c692:	b004      	add	sp, #16
1000c694:	bd80      	pop	{r7, pc}
1000c696:	46c0      	nop			; (mov r8, r8)
1000c698:	1000c509 	.word	0x1000c509

1000c69c <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c69c:	b580      	push	{r7, lr}
1000c69e:	b082      	sub	sp, #8
1000c6a0:	af00      	add	r7, sp, #0
1000c6a2:	6078      	str	r0, [r7, #4]
1000c6a4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
1000c6a6:	687b      	ldr	r3, [r7, #4]
1000c6a8:	8a9b      	ldrh	r3, [r3, #20]
1000c6aa:	b29b      	uxth	r3, r3
1000c6ac:	2b00      	cmp	r3, #0
1000c6ae:	d001      	beq.n	1000c6b4 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
1000c6b0:	2305      	movs	r3, #5
1000c6b2:	e009      	b.n	1000c6c8 <i2c_master_read_packet_job+0x2c>
	}

	/* Make sure we send STOP */
	module->no_stop = false;
1000c6b4:	687b      	ldr	r3, [r7, #4]
1000c6b6:	2200      	movs	r2, #0
1000c6b8:	715a      	strb	r2, [r3, #5]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
1000c6ba:	683a      	ldr	r2, [r7, #0]
1000c6bc:	687b      	ldr	r3, [r7, #4]
1000c6be:	0011      	movs	r1, r2
1000c6c0:	0018      	movs	r0, r3
1000c6c2:	4b03      	ldr	r3, [pc, #12]	; (1000c6d0 <i2c_master_read_packet_job+0x34>)
1000c6c4:	4798      	blx	r3
1000c6c6:	0003      	movs	r3, r0
}
1000c6c8:	0018      	movs	r0, r3
1000c6ca:	46bd      	mov	sp, r7
1000c6cc:	b002      	add	sp, #8
1000c6ce:	bd80      	pop	{r7, pc}
1000c6d0:	1000c621 	.word	0x1000c621

1000c6d4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c6d4:	b580      	push	{r7, lr}
1000c6d6:	b084      	sub	sp, #16
1000c6d8:	af00      	add	r7, sp, #0
1000c6da:	6078      	str	r0, [r7, #4]
1000c6dc:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	I2C *const i2c_module = module->hw;
1000c6de:	687b      	ldr	r3, [r7, #4]
1000c6e0:	681b      	ldr	r3, [r3, #0]
1000c6e2:	60fb      	str	r3, [r7, #12]

	/* Save packet to software module */
	module->buffer             = packet->data;
1000c6e4:	683b      	ldr	r3, [r7, #0]
1000c6e6:	685a      	ldr	r2, [r3, #4]
1000c6e8:	687b      	ldr	r3, [r7, #4]
1000c6ea:	619a      	str	r2, [r3, #24]
	module->buffer_remaining   = packet->data_length;
1000c6ec:	683b      	ldr	r3, [r7, #0]
1000c6ee:	885a      	ldrh	r2, [r3, #2]
1000c6f0:	687b      	ldr	r3, [r7, #4]
1000c6f2:	829a      	strh	r2, [r3, #20]
	module->transfer_direction = I2C_TRANSFER_WRITE;
1000c6f4:	687b      	ldr	r3, [r7, #4]
1000c6f6:	2200      	movs	r2, #0
1000c6f8:	771a      	strb	r2, [r3, #28]
	module->status             = STATUS_BUSY;
1000c6fa:	687b      	ldr	r3, [r7, #4]
1000c6fc:	2205      	movs	r2, #5
1000c6fe:	775a      	strb	r2, [r3, #29]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000c700:	68fb      	ldr	r3, [r7, #12]
1000c702:	2220      	movs	r2, #32
1000c704:	2101      	movs	r1, #1
1000c706:	5499      	strb	r1, [r3, r2]
	/* Set address and direction bit, will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | module->transfer_direction;
1000c708:	683b      	ldr	r3, [r7, #0]
1000c70a:	881b      	ldrh	r3, [r3, #0]
	module->status             = STATUS_BUSY;

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit, will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000c70c:	18db      	adds	r3, r3, r3
1000c70e:	b29a      	uxth	r2, r3
			(packet->address << 1) | module->transfer_direction;
1000c710:	687b      	ldr	r3, [r7, #4]
1000c712:	7f1b      	ldrb	r3, [r3, #28]
1000c714:	b2db      	uxtb	r3, r3
	module->status             = STATUS_BUSY;

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit, will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000c716:	b29b      	uxth	r3, r3
1000c718:	4313      	orrs	r3, r2
1000c71a:	b29b      	uxth	r3, r3
1000c71c:	2280      	movs	r2, #128	; 0x80
1000c71e:	0052      	lsls	r2, r2, #1
1000c720:	4313      	orrs	r3, r2
1000c722:	b29a      	uxth	r2, r3
1000c724:	68fb      	ldr	r3, [r7, #12]
1000c726:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | module->transfer_direction;
	/* Enable interrupts */
	i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
1000c728:	68fb      	ldr	r3, [r7, #12]
1000c72a:	222c      	movs	r2, #44	; 0x2c
1000c72c:	2110      	movs	r1, #16
1000c72e:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
1000c730:	2300      	movs	r3, #0
}
1000c732:	0018      	movs	r0, r3
1000c734:	46bd      	mov	sp, r7
1000c736:	b004      	add	sp, #16
1000c738:	bd80      	pop	{r7, pc}
1000c73a:	46c0      	nop			; (mov r8, r8)

1000c73c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c73c:	b580      	push	{r7, lr}
1000c73e:	b082      	sub	sp, #8
1000c740:	af00      	add	r7, sp, #0
1000c742:	6078      	str	r0, [r7, #4]
1000c744:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
1000c746:	687b      	ldr	r3, [r7, #4]
1000c748:	8a9b      	ldrh	r3, [r3, #20]
1000c74a:	b29b      	uxth	r3, r3
1000c74c:	2b00      	cmp	r3, #0
1000c74e:	d001      	beq.n	1000c754 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
1000c750:	2305      	movs	r3, #5
1000c752:	e009      	b.n	1000c768 <i2c_master_write_packet_job+0x2c>
	}

	/* Make sure we send STOP at end*/
	module->no_stop = false;
1000c754:	687b      	ldr	r3, [r7, #4]
1000c756:	2200      	movs	r2, #0
1000c758:	715a      	strb	r2, [r3, #5]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
1000c75a:	683a      	ldr	r2, [r7, #0]
1000c75c:	687b      	ldr	r3, [r7, #4]
1000c75e:	0011      	movs	r1, r2
1000c760:	0018      	movs	r0, r3
1000c762:	4b03      	ldr	r3, [pc, #12]	; (1000c770 <i2c_master_write_packet_job+0x34>)
1000c764:	4798      	blx	r3
1000c766:	0003      	movs	r3, r0
}
1000c768:	0018      	movs	r0, r3
1000c76a:	46bd      	mov	sp, r7
1000c76c:	b002      	add	sp, #8
1000c76e:	bd80      	pop	{r7, pc}
1000c770:	1000c6d5 	.word	0x1000c6d5

1000c774 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c774:	b580      	push	{r7, lr}
1000c776:	b082      	sub	sp, #8
1000c778:	af00      	add	r7, sp, #0
1000c77a:	6078      	str	r0, [r7, #4]
1000c77c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
1000c77e:	687b      	ldr	r3, [r7, #4]
1000c780:	8a9b      	ldrh	r3, [r3, #20]
1000c782:	b29b      	uxth	r3, r3
1000c784:	2b00      	cmp	r3, #0
1000c786:	d001      	beq.n	1000c78c <i2c_master_write_packet_job_no_stop+0x18>
		return STATUS_BUSY;
1000c788:	2305      	movs	r3, #5
1000c78a:	e009      	b.n	1000c7a0 <i2c_master_write_packet_job_no_stop+0x2c>
	}

	/* Do not send stop condition when done */
	module->no_stop = true;
1000c78c:	687b      	ldr	r3, [r7, #4]
1000c78e:	2201      	movs	r2, #1
1000c790:	715a      	strb	r2, [r3, #5]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
1000c792:	683a      	ldr	r2, [r7, #0]
1000c794:	687b      	ldr	r3, [r7, #4]
1000c796:	0011      	movs	r1, r2
1000c798:	0018      	movs	r0, r3
1000c79a:	4b03      	ldr	r3, [pc, #12]	; (1000c7a8 <i2c_master_write_packet_job_no_stop+0x34>)
1000c79c:	4798      	blx	r3
1000c79e:	0003      	movs	r3, r0
}
1000c7a0:	0018      	movs	r0, r3
1000c7a2:	46bd      	mov	sp, r7
1000c7a4:	b002      	add	sp, #8
1000c7a6:	bd80      	pop	{r7, pc}
1000c7a8:	1000c6d5 	.word	0x1000c6d5

1000c7ac <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
1000c7ac:	b580      	push	{r7, lr}
1000c7ae:	b084      	sub	sp, #16
1000c7b0:	af00      	add	r7, sp, #0
	/* Get software module for callback handling */
	struct i2c_master_module *module =
1000c7b2:	4b67      	ldr	r3, [pc, #412]	; (1000c950 <_i2c_master_isr_handler+0x1a4>)
1000c7b4:	681b      	ldr	r3, [r3, #0]
1000c7b6:	60fb      	str	r3, [r7, #12]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
1000c7b8:	68fb      	ldr	r3, [r7, #12]
1000c7ba:	681b      	ldr	r3, [r3, #0]
1000c7bc:	60bb      	str	r3, [r7, #8]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000c7be:	68fb      	ldr	r3, [r7, #12]
1000c7c0:	7c5b      	ldrb	r3, [r3, #17]
1000c7c2:	b2da      	uxtb	r2, r3
			module->registered_callback;
1000c7c4:	68fb      	ldr	r3, [r7, #12]
1000c7c6:	7c1b      	ldrb	r3, [r3, #16]
1000c7c8:	b2d9      	uxtb	r1, r3
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000c7ca:	1dfb      	adds	r3, r7, #7
1000c7cc:	400a      	ands	r2, r1
1000c7ce:	701a      	strb	r2, [r3, #0]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
1000c7d0:	68fb      	ldr	r3, [r7, #12]
1000c7d2:	8a5b      	ldrh	r3, [r3, #18]
1000c7d4:	b29b      	uxth	r3, r3
1000c7d6:	2b00      	cmp	r3, #0
1000c7d8:	d10a      	bne.n	1000c7f0 <_i2c_master_isr_handler+0x44>
1000c7da:	68fb      	ldr	r3, [r7, #12]
1000c7dc:	8a9b      	ldrh	r3, [r3, #20]
1000c7de:	b29b      	uxth	r3, r3
1000c7e0:	2b00      	cmp	r3, #0
1000c7e2:	d005      	beq.n	1000c7f0 <_i2c_master_isr_handler+0x44>
		module->buffer_length = module->buffer_remaining;
1000c7e4:	68fb      	ldr	r3, [r7, #12]
1000c7e6:	8a9b      	ldrh	r3, [r3, #20]
1000c7e8:	b29a      	uxth	r2, r3
1000c7ea:	68fb      	ldr	r3, [r7, #12]
1000c7ec:	825a      	strh	r2, [r3, #18]
1000c7ee:	e04b      	b.n	1000c888 <_i2c_master_isr_handler+0xdc>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000c7f0:	68fb      	ldr	r3, [r7, #12]
1000c7f2:	8a5b      	ldrh	r3, [r3, #18]
1000c7f4:	b29b      	uxth	r3, r3
1000c7f6:	2b00      	cmp	r3, #0
1000c7f8:	d02e      	beq.n	1000c858 <_i2c_master_isr_handler+0xac>
1000c7fa:	68fb      	ldr	r3, [r7, #12]
1000c7fc:	8a9b      	ldrh	r3, [r3, #20]
1000c7fe:	b29b      	uxth	r3, r3
1000c800:	2b00      	cmp	r3, #0
1000c802:	d129      	bne.n	1000c858 <_i2c_master_isr_handler+0xac>
			(module->status == STATUS_BUSY) &&
1000c804:	68fb      	ldr	r3, [r7, #12]
1000c806:	7f5b      	ldrb	r3, [r3, #29]
1000c808:	b2db      	uxtb	r3, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000c80a:	2b05      	cmp	r3, #5
1000c80c:	d124      	bne.n	1000c858 <_i2c_master_isr_handler+0xac>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
1000c80e:	68fb      	ldr	r3, [r7, #12]
1000c810:	7f1b      	ldrb	r3, [r3, #28]
1000c812:	b2db      	uxtb	r3, r3

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
1000c814:	2b00      	cmp	r3, #0
1000c816:	d11f      	bne.n	1000c858 <_i2c_master_isr_handler+0xac>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
1000c818:	68bb      	ldr	r3, [r7, #8]
1000c81a:	222c      	movs	r2, #44	; 0x2c
1000c81c:	2100      	movs	r1, #0
1000c81e:	5499      	strb	r1, [r3, r2]

		module->buffer_length = 0;
1000c820:	68fb      	ldr	r3, [r7, #12]
1000c822:	2200      	movs	r2, #0
1000c824:	825a      	strh	r2, [r3, #18]
		module->status        = STATUS_OK;
1000c826:	68fb      	ldr	r3, [r7, #12]
1000c828:	2200      	movs	r2, #0
1000c82a:	775a      	strb	r2, [r3, #29]

		if (!module->no_stop) {
1000c82c:	68fb      	ldr	r3, [r7, #12]
1000c82e:	795b      	ldrb	r3, [r3, #5]
1000c830:	2201      	movs	r2, #1
1000c832:	4053      	eors	r3, r2
1000c834:	b2db      	uxtb	r3, r3
1000c836:	2b00      	cmp	r3, #0
1000c838:	d003      	beq.n	1000c842 <_i2c_master_isr_handler+0x96>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000c83a:	68bb      	ldr	r3, [r7, #8]
1000c83c:	2220      	movs	r2, #32
1000c83e:	2100      	movs	r1, #0
1000c840:	5499      	strb	r1, [r3, r2]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000c842:	1dfb      	adds	r3, r7, #7
1000c844:	781b      	ldrb	r3, [r3, #0]
1000c846:	2201      	movs	r2, #1
1000c848:	4013      	ands	r3, r2
1000c84a:	d01d      	beq.n	1000c888 <_i2c_master_isr_handler+0xdc>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
1000c84c:	68fb      	ldr	r3, [r7, #12]
1000c84e:	689b      	ldr	r3, [r3, #8]
1000c850:	68fa      	ldr	r2, [r7, #12]
1000c852:	0010      	movs	r0, r2
1000c854:	4798      	blx	r3
		if (!module->no_stop) {
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000c856:	e017      	b.n	1000c888 <_i2c_master_isr_handler+0xdc>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
1000c858:	68fb      	ldr	r3, [r7, #12]
1000c85a:	8a5b      	ldrh	r3, [r3, #18]
1000c85c:	b29b      	uxth	r3, r3
1000c85e:	2b00      	cmp	r3, #0
1000c860:	d012      	beq.n	1000c888 <_i2c_master_isr_handler+0xdc>
1000c862:	68fb      	ldr	r3, [r7, #12]
1000c864:	8a9b      	ldrh	r3, [r3, #20]
1000c866:	b29b      	uxth	r3, r3
1000c868:	2b00      	cmp	r3, #0
1000c86a:	d00d      	beq.n	1000c888 <_i2c_master_isr_handler+0xdc>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
1000c86c:	68fb      	ldr	r3, [r7, #12]
1000c86e:	7f1b      	ldrb	r3, [r3, #28]
1000c870:	b2db      	uxtb	r3, r3
1000c872:	2b00      	cmp	r3, #0
1000c874:	d104      	bne.n	1000c880 <_i2c_master_isr_handler+0xd4>
			_i2c_master_write(module);
1000c876:	68fb      	ldr	r3, [r7, #12]
1000c878:	0018      	movs	r0, r3
1000c87a:	4b36      	ldr	r3, [pc, #216]	; (1000c954 <_i2c_master_isr_handler+0x1a8>)
1000c87c:	4798      	blx	r3
1000c87e:	e003      	b.n	1000c888 <_i2c_master_isr_handler+0xdc>
		} else {
			_i2c_master_read(module);
1000c880:	68fb      	ldr	r3, [r7, #12]
1000c882:	0018      	movs	r0, r3
1000c884:	4b34      	ldr	r3, [pc, #208]	; (1000c958 <_i2c_master_isr_handler+0x1ac>)
1000c886:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000c888:	68fb      	ldr	r3, [r7, #12]
1000c88a:	8a5b      	ldrh	r3, [r3, #18]
1000c88c:	b29b      	uxth	r3, r3
1000c88e:	2b00      	cmp	r3, #0
1000c890:	d032      	beq.n	1000c8f8 <_i2c_master_isr_handler+0x14c>
1000c892:	68fb      	ldr	r3, [r7, #12]
1000c894:	8a9b      	ldrh	r3, [r3, #20]
1000c896:	b29b      	uxth	r3, r3
1000c898:	2b00      	cmp	r3, #0
1000c89a:	d12d      	bne.n	1000c8f8 <_i2c_master_isr_handler+0x14c>
			(module->status == STATUS_BUSY) &&
1000c89c:	68fb      	ldr	r3, [r7, #12]
1000c89e:	7f5b      	ldrb	r3, [r3, #29]
1000c8a0:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000c8a2:	2b05      	cmp	r3, #5
1000c8a4:	d128      	bne.n	1000c8f8 <_i2c_master_isr_handler+0x14c>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
1000c8a6:	68fb      	ldr	r3, [r7, #12]
1000c8a8:	7f1b      	ldrb	r3, [r3, #28]
1000c8aa:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
1000c8ac:	2b01      	cmp	r3, #1
1000c8ae:	d123      	bne.n	1000c8f8 <_i2c_master_isr_handler+0x14c>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
1000c8b0:	68bb      	ldr	r3, [r7, #8]
1000c8b2:	2230      	movs	r2, #48	; 0x30
1000c8b4:	2100      	movs	r1, #0
1000c8b6:	5499      	strb	r1, [r3, r2]

		module->buffer_length = 0;
1000c8b8:	68fb      	ldr	r3, [r7, #12]
1000c8ba:	2200      	movs	r2, #0
1000c8bc:	825a      	strh	r2, [r3, #18]
		module->status        = STATUS_OK;
1000c8be:	68fb      	ldr	r3, [r7, #12]
1000c8c0:	2200      	movs	r2, #0
1000c8c2:	775a      	strb	r2, [r3, #29]

		if (!module->no_stop) {
1000c8c4:	68fb      	ldr	r3, [r7, #12]
1000c8c6:	795b      	ldrb	r3, [r3, #5]
1000c8c8:	2201      	movs	r2, #1
1000c8ca:	4053      	eors	r3, r2
1000c8cc:	b2db      	uxtb	r3, r3
1000c8ce:	2b00      	cmp	r3, #0
1000c8d0:	d003      	beq.n	1000c8da <_i2c_master_isr_handler+0x12e>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000c8d2:	68bb      	ldr	r3, [r7, #8]
1000c8d4:	2220      	movs	r2, #32
1000c8d6:	2100      	movs	r1, #0
1000c8d8:	5499      	strb	r1, [r3, r2]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
1000c8da:	1dfb      	adds	r3, r7, #7
1000c8dc:	781b      	ldrb	r3, [r3, #0]
1000c8de:	2202      	movs	r2, #2
1000c8e0:	4013      	ands	r3, r2
1000c8e2:	d009      	beq.n	1000c8f8 <_i2c_master_isr_handler+0x14c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
1000c8e4:	68fb      	ldr	r3, [r7, #12]
1000c8e6:	7f1b      	ldrb	r3, [r3, #28]
1000c8e8:	b2db      	uxtb	r3, r3
1000c8ea:	2b01      	cmp	r3, #1
1000c8ec:	d104      	bne.n	1000c8f8 <_i2c_master_isr_handler+0x14c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
1000c8ee:	68fb      	ldr	r3, [r7, #12]
1000c8f0:	68db      	ldr	r3, [r3, #12]
1000c8f2:	68fa      	ldr	r2, [r7, #12]
1000c8f4:	0010      	movs	r0, r2
1000c8f6:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
1000c8f8:	68fb      	ldr	r3, [r7, #12]
1000c8fa:	7f1b      	ldrb	r3, [r3, #28]
1000c8fc:	b2db      	uxtb	r3, r3
1000c8fe:	2b01      	cmp	r3, #1
1000c900:	d111      	bne.n	1000c926 <_i2c_master_isr_handler+0x17a>
		if (module->hw == I2C0) {
1000c902:	68fb      	ldr	r3, [r7, #12]
1000c904:	681b      	ldr	r3, [r3, #0]
1000c906:	4a15      	ldr	r2, [pc, #84]	; (1000c95c <_i2c_master_isr_handler+0x1b0>)
1000c908:	4293      	cmp	r3, r2
1000c90a:	d103      	bne.n	1000c914 <_i2c_master_isr_handler+0x168>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
1000c90c:	2008      	movs	r0, #8
1000c90e:	4b14      	ldr	r3, [pc, #80]	; (1000c960 <_i2c_master_isr_handler+0x1b4>)
1000c910:	4798      	blx	r3
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
1000c912:	e019      	b.n	1000c948 <_i2c_master_isr_handler+0x19c>
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
		if (module->hw == I2C0) {
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
1000c914:	68fb      	ldr	r3, [r7, #12]
1000c916:	681b      	ldr	r3, [r3, #0]
1000c918:	4a12      	ldr	r2, [pc, #72]	; (1000c964 <_i2c_master_isr_handler+0x1b8>)
1000c91a:	4293      	cmp	r3, r2
1000c91c:	d114      	bne.n	1000c948 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
1000c91e:	200a      	movs	r0, #10
1000c920:	4b0f      	ldr	r3, [pc, #60]	; (1000c960 <_i2c_master_isr_handler+0x1b4>)
1000c922:	4798      	blx	r3
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
1000c924:	e010      	b.n	1000c948 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
1000c926:	68fb      	ldr	r3, [r7, #12]
1000c928:	681b      	ldr	r3, [r3, #0]
1000c92a:	4a0c      	ldr	r2, [pc, #48]	; (1000c95c <_i2c_master_isr_handler+0x1b0>)
1000c92c:	4293      	cmp	r3, r2
1000c92e:	d103      	bne.n	1000c938 <_i2c_master_isr_handler+0x18c>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
1000c930:	2009      	movs	r0, #9
1000c932:	4b0b      	ldr	r3, [pc, #44]	; (1000c960 <_i2c_master_isr_handler+0x1b4>)
1000c934:	4798      	blx	r3
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
1000c936:	e007      	b.n	1000c948 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
1000c938:	68fb      	ldr	r3, [r7, #12]
1000c93a:	681b      	ldr	r3, [r3, #0]
1000c93c:	4a09      	ldr	r2, [pc, #36]	; (1000c964 <_i2c_master_isr_handler+0x1b8>)
1000c93e:	4293      	cmp	r3, r2
1000c940:	d102      	bne.n	1000c948 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
1000c942:	200b      	movs	r0, #11
1000c944:	4b06      	ldr	r3, [pc, #24]	; (1000c960 <_i2c_master_isr_handler+0x1b4>)
1000c946:	4798      	blx	r3
		}
	}
}
1000c948:	46c0      	nop			; (mov r8, r8)
1000c94a:	46bd      	mov	sp, r7
1000c94c:	b004      	add	sp, #16
1000c94e:	bd80      	pop	{r7, pc}
1000c950:	1001a554 	.word	0x1001a554
1000c954:	1000c579 	.word	0x1000c579
1000c958:	1000c52d 	.word	0x1000c52d
1000c95c:	40003000 	.word	0x40003000
1000c960:	1000c4d5 	.word	0x1000c4d5
1000c964:	40003400 	.word	0x40003400

1000c968 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000c968:	b580      	push	{r7, lr}
1000c96a:	b082      	sub	sp, #8
1000c96c:	af00      	add	r7, sp, #0
1000c96e:	0002      	movs	r2, r0
1000c970:	1dfb      	adds	r3, r7, #7
1000c972:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c974:	4b06      	ldr	r3, [pc, #24]	; (1000c990 <NVIC_EnableIRQ+0x28>)
1000c976:	1dfa      	adds	r2, r7, #7
1000c978:	7812      	ldrb	r2, [r2, #0]
1000c97a:	0011      	movs	r1, r2
1000c97c:	221f      	movs	r2, #31
1000c97e:	400a      	ands	r2, r1
1000c980:	2101      	movs	r1, #1
1000c982:	4091      	lsls	r1, r2
1000c984:	000a      	movs	r2, r1
1000c986:	601a      	str	r2, [r3, #0]
}
1000c988:	46c0      	nop			; (mov r8, r8)
1000c98a:	46bd      	mov	sp, r7
1000c98c:	b002      	add	sp, #8
1000c98e:	bd80      	pop	{r7, pc}
1000c990:	e000e100 	.word	0xe000e100

1000c994 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
1000c994:	b580      	push	{r7, lr}
1000c996:	b082      	sub	sp, #8
1000c998:	af00      	add	r7, sp, #0
1000c99a:	0002      	movs	r2, r0
1000c99c:	1dfb      	adds	r3, r7, #7
1000c99e:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c9a0:	4a07      	ldr	r2, [pc, #28]	; (1000c9c0 <NVIC_DisableIRQ+0x2c>)
1000c9a2:	1dfb      	adds	r3, r7, #7
1000c9a4:	781b      	ldrb	r3, [r3, #0]
1000c9a6:	0019      	movs	r1, r3
1000c9a8:	231f      	movs	r3, #31
1000c9aa:	400b      	ands	r3, r1
1000c9ac:	2101      	movs	r1, #1
1000c9ae:	4099      	lsls	r1, r3
1000c9b0:	000b      	movs	r3, r1
1000c9b2:	0019      	movs	r1, r3
1000c9b4:	2380      	movs	r3, #128	; 0x80
1000c9b6:	50d1      	str	r1, [r2, r3]
}
1000c9b8:	46c0      	nop			; (mov r8, r8)
1000c9ba:	46bd      	mov	sp, r7
1000c9bc:	b002      	add	sp, #8
1000c9be:	bd80      	pop	{r7, pc}
1000c9c0:	e000e100 	.word	0xe000e100

1000c9c4 <_spi_clock_enable>:
 * This function will enable SPI clock.
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clock_enable(struct spi_module *const module)
{
1000c9c4:	b580      	push	{r7, lr}
1000c9c6:	b084      	sub	sp, #16
1000c9c8:	af00      	add	r7, sp, #0
1000c9ca:	6078      	str	r0, [r7, #4]
	Assert(module);

	Spi *const spi_module = (module->hw);
1000c9cc:	687b      	ldr	r3, [r7, #4]
1000c9ce:	681b      	ldr	r3, [r3, #0]
1000c9d0:	60fb      	str	r3, [r7, #12]

	if (spi_module == (void *)SPI0) {
1000c9d2:	68fb      	ldr	r3, [r7, #12]
1000c9d4:	4a11      	ldr	r2, [pc, #68]	; (1000ca1c <_spi_clock_enable+0x58>)
1000c9d6:	4293      	cmp	r3, r2
1000c9d8:	d10c      	bne.n	1000c9f4 <_spi_clock_enable+0x30>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000c9da:	2041      	movs	r0, #65	; 0x41
1000c9dc:	4b10      	ldr	r3, [pc, #64]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000c9de:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000c9e0:	2026      	movs	r0, #38	; 0x26
1000c9e2:	4b0f      	ldr	r3, [pc, #60]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000c9e4:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000c9e6:	2038      	movs	r0, #56	; 0x38
1000c9e8:	4b0d      	ldr	r3, [pc, #52]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000c9ea:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000c9ec:	2001      	movs	r0, #1
1000c9ee:	4b0c      	ldr	r3, [pc, #48]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000c9f0:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
	}
}
1000c9f2:	e00f      	b.n	1000ca14 <_spi_clock_enable+0x50>
	if (spi_module == (void *)SPI0) {
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
	} else if (spi_module == (void *)SPI1) {
1000c9f4:	68fb      	ldr	r3, [r7, #12]
1000c9f6:	4a0b      	ldr	r2, [pc, #44]	; (1000ca24 <_spi_clock_enable+0x60>)
1000c9f8:	4293      	cmp	r3, r2
1000c9fa:	d10b      	bne.n	1000ca14 <_spi_clock_enable+0x50>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000c9fc:	2042      	movs	r0, #66	; 0x42
1000c9fe:	4b08      	ldr	r3, [pc, #32]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000ca00:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000ca02:	2027      	movs	r0, #39	; 0x27
1000ca04:	4b06      	ldr	r3, [pc, #24]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000ca06:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000ca08:	2039      	movs	r0, #57	; 0x39
1000ca0a:	4b05      	ldr	r3, [pc, #20]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000ca0c:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000ca0e:	2002      	movs	r0, #2
1000ca10:	4b03      	ldr	r3, [pc, #12]	; (1000ca20 <_spi_clock_enable+0x5c>)
1000ca12:	4798      	blx	r3
	}
}
1000ca14:	46c0      	nop			; (mov r8, r8)
1000ca16:	46bd      	mov	sp, r7
1000ca18:	b004      	add	sp, #16
1000ca1a:	bd80      	pop	{r7, pc}
1000ca1c:	40006000 	.word	0x40006000
1000ca20:	1000d8ad 	.word	0x1000d8ad
1000ca24:	40007000 	.word	0x40007000

1000ca28 <_spi_clock_disable>:
 * This function will disable SPI clock.
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clock_disable(struct spi_module *const module)
{
1000ca28:	b580      	push	{r7, lr}
1000ca2a:	b084      	sub	sp, #16
1000ca2c:	af00      	add	r7, sp, #0
1000ca2e:	6078      	str	r0, [r7, #4]
	Assert(module);

	Spi *const spi_module = (module->hw);
1000ca30:	687b      	ldr	r3, [r7, #4]
1000ca32:	681b      	ldr	r3, [r3, #0]
1000ca34:	60fb      	str	r3, [r7, #12]

	if (spi_module == (void *)SPI0) {
1000ca36:	68fb      	ldr	r3, [r7, #12]
1000ca38:	4a11      	ldr	r2, [pc, #68]	; (1000ca80 <_spi_clock_disable+0x58>)
1000ca3a:	4293      	cmp	r3, r2
1000ca3c:	d10c      	bne.n	1000ca58 <_spi_clock_disable+0x30>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000ca3e:	2041      	movs	r0, #65	; 0x41
1000ca40:	4b10      	ldr	r3, [pc, #64]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca42:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000ca44:	2026      	movs	r0, #38	; 0x26
1000ca46:	4b0f      	ldr	r3, [pc, #60]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca48:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000ca4a:	2038      	movs	r0, #56	; 0x38
1000ca4c:	4b0d      	ldr	r3, [pc, #52]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca4e:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000ca50:	2001      	movs	r0, #1
1000ca52:	4b0c      	ldr	r3, [pc, #48]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca54:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
	}
}
1000ca56:	e00f      	b.n	1000ca78 <_spi_clock_disable+0x50>
	if (spi_module == (void *)SPI0) {
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
	} else if (spi_module == (void *)SPI1) {
1000ca58:	68fb      	ldr	r3, [r7, #12]
1000ca5a:	4a0b      	ldr	r2, [pc, #44]	; (1000ca88 <_spi_clock_disable+0x60>)
1000ca5c:	4293      	cmp	r3, r2
1000ca5e:	d10b      	bne.n	1000ca78 <_spi_clock_disable+0x50>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000ca60:	2042      	movs	r0, #66	; 0x42
1000ca62:	4b08      	ldr	r3, [pc, #32]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca64:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000ca66:	2027      	movs	r0, #39	; 0x27
1000ca68:	4b06      	ldr	r3, [pc, #24]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca6a:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000ca6c:	2039      	movs	r0, #57	; 0x39
1000ca6e:	4b05      	ldr	r3, [pc, #20]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca70:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000ca72:	2002      	movs	r0, #2
1000ca74:	4b03      	ldr	r3, [pc, #12]	; (1000ca84 <_spi_clock_disable+0x5c>)
1000ca76:	4798      	blx	r3
	}
}
1000ca78:	46c0      	nop			; (mov r8, r8)
1000ca7a:	46bd      	mov	sp, r7
1000ca7c:	b004      	add	sp, #16
1000ca7e:	bd80      	pop	{r7, pc}
1000ca80:	40006000 	.word	0x40006000
1000ca84:	1000dc2d 	.word	0x1000dc2d
1000ca88:	40007000 	.word	0x40007000

1000ca8c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
1000ca8c:	b580      	push	{r7, lr}
1000ca8e:	b084      	sub	sp, #16
1000ca90:	af00      	add	r7, sp, #0
1000ca92:	6078      	str	r0, [r7, #4]
1000ca94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000ca96:	687b      	ldr	r3, [r7, #4]
1000ca98:	681b      	ldr	r3, [r3, #0]
1000ca9a:	60fb      	str	r3, [r7, #12]

	module->mode  = config->mode;
1000ca9c:	683b      	ldr	r3, [r7, #0]
1000ca9e:	781a      	ldrb	r2, [r3, #0]
1000caa0:	687b      	ldr	r3, [r7, #4]
1000caa2:	715a      	strb	r2, [r3, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000caa4:	683b      	ldr	r3, [r7, #0]
1000caa6:	781b      	ldrb	r3, [r3, #0]
1000caa8:	2b01      	cmp	r3, #1
1000caaa:	d104      	bne.n	1000cab6 <_spi_set_config+0x2a>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000caac:	683b      	ldr	r3, [r7, #0]
1000caae:	791b      	ldrb	r3, [r3, #4]
1000cab0:	b29a      	uxth	r2, r3
1000cab2:	68fb      	ldr	r3, [r7, #12]
1000cab4:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000cab6:	683b      	ldr	r3, [r7, #0]
1000cab8:	785b      	ldrb	r3, [r3, #1]
1000caba:	2b04      	cmp	r3, #4
1000cabc:	d106      	bne.n	1000cacc <_spi_set_config+0x40>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000cabe:	68fa      	ldr	r2, [r7, #12]
1000cac0:	2124      	movs	r1, #36	; 0x24
1000cac2:	5c53      	ldrb	r3, [r2, r1]
1000cac4:	2004      	movs	r0, #4
1000cac6:	4303      	orrs	r3, r0
1000cac8:	5453      	strb	r3, [r2, r1]
1000caca:	e005      	b.n	1000cad8 <_spi_set_config+0x4c>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000cacc:	68fa      	ldr	r2, [r7, #12]
1000cace:	2124      	movs	r1, #36	; 0x24
1000cad0:	5c53      	ldrb	r3, [r2, r1]
1000cad2:	2004      	movs	r0, #4
1000cad4:	4383      	bics	r3, r0
1000cad6:	5453      	strb	r3, [r2, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000cad8:	683b      	ldr	r3, [r7, #0]
1000cada:	789b      	ldrb	r3, [r3, #2]
1000cadc:	2b01      	cmp	r3, #1
1000cade:	d022      	beq.n	1000cb26 <_spi_set_config+0x9a>
1000cae0:	dc02      	bgt.n	1000cae8 <_spi_set_config+0x5c>
1000cae2:	2b00      	cmp	r3, #0
1000cae4:	d005      	beq.n	1000caf2 <_spi_set_config+0x66>
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
			break;
		default:
			break;
1000cae6:	e038      	b.n	1000cb5a <_spi_set_config+0xce>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000cae8:	2b02      	cmp	r3, #2
1000caea:	d00f      	beq.n	1000cb0c <_spi_set_config+0x80>
1000caec:	2b03      	cmp	r3, #3
1000caee:	d027      	beq.n	1000cb40 <_spi_set_config+0xb4>
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
			break;
		default:
			break;
1000caf0:	e033      	b.n	1000cb5a <_spi_set_config+0xce>

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000caf2:	68fa      	ldr	r2, [r7, #12]
1000caf4:	2124      	movs	r1, #36	; 0x24
1000caf6:	5c53      	ldrb	r3, [r2, r1]
1000caf8:	2002      	movs	r0, #2
1000cafa:	4383      	bics	r3, r0
1000cafc:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000cafe:	68fa      	ldr	r2, [r7, #12]
1000cb00:	2124      	movs	r1, #36	; 0x24
1000cb02:	5c53      	ldrb	r3, [r2, r1]
1000cb04:	2001      	movs	r0, #1
1000cb06:	4383      	bics	r3, r0
1000cb08:	5453      	strb	r3, [r2, r1]
			break;
1000cb0a:	e026      	b.n	1000cb5a <_spi_set_config+0xce>
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000cb0c:	68fa      	ldr	r2, [r7, #12]
1000cb0e:	2124      	movs	r1, #36	; 0x24
1000cb10:	5c53      	ldrb	r3, [r2, r1]
1000cb12:	2002      	movs	r0, #2
1000cb14:	4303      	orrs	r3, r0
1000cb16:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000cb18:	68fa      	ldr	r2, [r7, #12]
1000cb1a:	2124      	movs	r1, #36	; 0x24
1000cb1c:	5c53      	ldrb	r3, [r2, r1]
1000cb1e:	2001      	movs	r0, #1
1000cb20:	4383      	bics	r3, r0
1000cb22:	5453      	strb	r3, [r2, r1]
			break;
1000cb24:	e019      	b.n	1000cb5a <_spi_set_config+0xce>
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000cb26:	68fa      	ldr	r2, [r7, #12]
1000cb28:	2124      	movs	r1, #36	; 0x24
1000cb2a:	5c53      	ldrb	r3, [r2, r1]
1000cb2c:	2002      	movs	r0, #2
1000cb2e:	4383      	bics	r3, r0
1000cb30:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000cb32:	68fa      	ldr	r2, [r7, #12]
1000cb34:	2124      	movs	r1, #36	; 0x24
1000cb36:	5c53      	ldrb	r3, [r2, r1]
1000cb38:	2001      	movs	r0, #1
1000cb3a:	4303      	orrs	r3, r0
1000cb3c:	5453      	strb	r3, [r2, r1]
			break;
1000cb3e:	e00c      	b.n	1000cb5a <_spi_set_config+0xce>
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000cb40:	68fa      	ldr	r2, [r7, #12]
1000cb42:	2124      	movs	r1, #36	; 0x24
1000cb44:	5c53      	ldrb	r3, [r2, r1]
1000cb46:	2002      	movs	r0, #2
1000cb48:	4303      	orrs	r3, r0
1000cb4a:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000cb4c:	68fa      	ldr	r2, [r7, #12]
1000cb4e:	2124      	movs	r1, #36	; 0x24
1000cb50:	5c53      	ldrb	r3, [r2, r1]
1000cb52:	2001      	movs	r0, #1
1000cb54:	4303      	orrs	r3, r0
1000cb56:	5453      	strb	r3, [r2, r1]
			break;
1000cb58:	46c0      	nop			; (mov r8, r8)
		default:
			break;
	}

	return STATUS_OK;
1000cb5a:	2300      	movs	r3, #0
}
1000cb5c:	0018      	movs	r0, r3
1000cb5e:	46bd      	mov	sp, r7
1000cb60:	b004      	add	sp, #16
1000cb62:	bd80      	pop	{r7, pc}

1000cb64 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
1000cb64:	b580      	push	{r7, lr}
1000cb66:	b082      	sub	sp, #8
1000cb68:	af00      	add	r7, sp, #0
1000cb6a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000cb6c:	687b      	ldr	r3, [r7, #4]
1000cb6e:	220c      	movs	r2, #12
1000cb70:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
1000cb72:	687b      	ldr	r3, [r7, #4]
1000cb74:	2200      	movs	r2, #0
1000cb76:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
1000cb78:	687b      	ldr	r3, [r7, #4]
1000cb7a:	2200      	movs	r2, #0
1000cb7c:	709a      	strb	r2, [r3, #2]
}
1000cb7e:	46c0      	nop			; (mov r8, r8)
1000cb80:	46bd      	mov	sp, r7
1000cb82:	b002      	add	sp, #8
1000cb84:	bd80      	pop	{r7, pc}
1000cb86:	46c0      	nop			; (mov r8, r8)

1000cb88 <spi_get_config_defaults>:
 *
 * \param[in,out] config  Configuration structure to initialize to default values
 */
void spi_get_config_defaults(
		struct spi_config *const config)
{
1000cb88:	b580      	push	{r7, lr}
1000cb8a:	b082      	sub	sp, #8
1000cb8c:	af00      	add	r7, sp, #0
1000cb8e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000cb90:	687b      	ldr	r3, [r7, #4]
1000cb92:	2201      	movs	r2, #1
1000cb94:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000cb96:	687b      	ldr	r3, [r7, #4]
1000cb98:	2200      	movs	r2, #0
1000cb9a:	705a      	strb	r2, [r3, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000cb9c:	687b      	ldr	r3, [r7, #4]
1000cb9e:	2200      	movs	r2, #0
1000cba0:	709a      	strb	r2, [r3, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000cba2:	687b      	ldr	r3, [r7, #4]
1000cba4:	2200      	movs	r2, #0
1000cba6:	70da      	strb	r2, [r3, #3]
	config->clock_divider    = 129;
1000cba8:	687b      	ldr	r3, [r7, #4]
1000cbaa:	2281      	movs	r2, #129	; 0x81
1000cbac:	711a      	strb	r2, [r3, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10_MUX2_SPI0_SCK;
1000cbae:	687b      	ldr	r3, [r7, #4]
1000cbb0:	220a      	movs	r2, #10
1000cbb2:	609a      	str	r2, [r3, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11_MUX2_SPI0_MOSI;
1000cbb4:	687b      	ldr	r3, [r7, #4]
1000cbb6:	220b      	movs	r2, #11
1000cbb8:	60da      	str	r2, [r3, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12_MUX2_SPI0_SSN;
1000cbba:	687b      	ldr	r3, [r7, #4]
1000cbbc:	220c      	movs	r2, #12
1000cbbe:	611a      	str	r2, [r3, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13_MUX2_SPI0_MISO;
1000cbc0:	687b      	ldr	r3, [r7, #4]
1000cbc2:	220d      	movs	r2, #13
1000cbc4:	615a      	str	r2, [r3, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_MUX2_SPI0_SCK;
1000cbc6:	687b      	ldr	r3, [r7, #4]
1000cbc8:	2202      	movs	r2, #2
1000cbca:	619a      	str	r2, [r3, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_MUX2_SPI0_MOSI;
1000cbcc:	687b      	ldr	r3, [r7, #4]
1000cbce:	2202      	movs	r2, #2
1000cbd0:	61da      	str	r2, [r3, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_MUX2_SPI0_SSN;
1000cbd2:	687b      	ldr	r3, [r7, #4]
1000cbd4:	2202      	movs	r2, #2
1000cbd6:	621a      	str	r2, [r3, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_MUX2_SPI0_MISO;
1000cbd8:	687b      	ldr	r3, [r7, #4]
1000cbda:	2202      	movs	r2, #2
1000cbdc:	625a      	str	r2, [r3, #36]	; 0x24
};
1000cbde:	46c0      	nop			; (mov r8, r8)
1000cbe0:	46bd      	mov	sp, r7
1000cbe2:	b002      	add	sp, #8
1000cbe4:	bd80      	pop	{r7, pc}
1000cbe6:	46c0      	nop			; (mov r8, r8)

1000cbe8 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000cbe8:	b580      	push	{r7, lr}
1000cbea:	b084      	sub	sp, #16
1000cbec:	af00      	add	r7, sp, #0
1000cbee:	6078      	str	r0, [r7, #4]
1000cbf0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000cbf2:	683b      	ldr	r3, [r7, #0]
1000cbf4:	781a      	ldrb	r2, [r3, #0]
1000cbf6:	687b      	ldr	r3, [r7, #4]
1000cbf8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
1000cbfa:	683b      	ldr	r3, [r7, #0]
1000cbfc:	785b      	ldrb	r3, [r3, #1]
1000cbfe:	001a      	movs	r2, r3
1000cc00:	687b      	ldr	r3, [r7, #4]
1000cc02:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
1000cc04:	683b      	ldr	r3, [r7, #0]
1000cc06:	789a      	ldrb	r2, [r3, #2]
1000cc08:	687b      	ldr	r3, [r7, #4]
1000cc0a:	709a      	strb	r2, [r3, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000cc0c:	230c      	movs	r3, #12
1000cc0e:	18fb      	adds	r3, r7, r3
1000cc10:	0018      	movs	r0, r3
1000cc12:	4b0c      	ldr	r3, [pc, #48]	; (1000cc44 <spi_attach_slave+0x5c>)
1000cc14:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000cc16:	230c      	movs	r3, #12
1000cc18:	18fb      	adds	r3, r7, r3
1000cc1a:	2201      	movs	r2, #1
1000cc1c:	701a      	strb	r2, [r3, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000cc1e:	687b      	ldr	r3, [r7, #4]
1000cc20:	781b      	ldrb	r3, [r3, #0]
1000cc22:	220c      	movs	r2, #12
1000cc24:	18ba      	adds	r2, r7, r2
1000cc26:	0011      	movs	r1, r2
1000cc28:	0018      	movs	r0, r3
1000cc2a:	4b07      	ldr	r3, [pc, #28]	; (1000cc48 <spi_attach_slave+0x60>)
1000cc2c:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000cc2e:	687b      	ldr	r3, [r7, #4]
1000cc30:	781b      	ldrb	r3, [r3, #0]
1000cc32:	2101      	movs	r1, #1
1000cc34:	0018      	movs	r0, r3
1000cc36:	4b05      	ldr	r3, [pc, #20]	; (1000cc4c <spi_attach_slave+0x64>)
1000cc38:	4798      	blx	r3
}
1000cc3a:	46c0      	nop			; (mov r8, r8)
1000cc3c:	46bd      	mov	sp, r7
1000cc3e:	b004      	add	sp, #16
1000cc40:	bd80      	pop	{r7, pc}
1000cc42:	46c0      	nop			; (mov r8, r8)
1000cc44:	1000b565 	.word	0x1000b565
1000cc48:	1000b58d 	.word	0x1000b58d
1000cc4c:	1000b7f9 	.word	0x1000b7f9

1000cc50 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000cc50:	b580      	push	{r7, lr}
1000cc52:	b084      	sub	sp, #16
1000cc54:	af00      	add	r7, sp, #0
1000cc56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000cc58:	687b      	ldr	r3, [r7, #4]
1000cc5a:	681b      	ldr	r3, [r3, #0]
1000cc5c:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
1000cc5e:	687b      	ldr	r3, [r7, #4]
1000cc60:	0018      	movs	r0, r3
1000cc62:	4b0d      	ldr	r3, [pc, #52]	; (1000cc98 <spi_reset+0x48>)
1000cc64:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000cc66:	68fb      	ldr	r3, [r7, #12]
1000cc68:	4a0c      	ldr	r2, [pc, #48]	; (1000cc9c <spi_reset+0x4c>)
1000cc6a:	4293      	cmp	r3, r2
1000cc6c:	d106      	bne.n	1000cc7c <spi_reset+0x2c>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000cc6e:	2001      	movs	r0, #1
1000cc70:	4b0b      	ldr	r3, [pc, #44]	; (1000cca0 <spi_reset+0x50>)
1000cc72:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000cc74:	2038      	movs	r0, #56	; 0x38
1000cc76:	4b0a      	ldr	r3, [pc, #40]	; (1000cca0 <spi_reset+0x50>)
1000cc78:	4798      	blx	r3
	} else if (spi_module == (void *)SPI1) {
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
	}
}
1000cc7a:	e009      	b.n	1000cc90 <spi_reset+0x40>

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
	} else if (spi_module == (void *)SPI1) {
1000cc7c:	68fb      	ldr	r3, [r7, #12]
1000cc7e:	4a09      	ldr	r2, [pc, #36]	; (1000cca4 <spi_reset+0x54>)
1000cc80:	4293      	cmp	r3, r2
1000cc82:	d105      	bne.n	1000cc90 <spi_reset+0x40>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000cc84:	2002      	movs	r0, #2
1000cc86:	4b06      	ldr	r3, [pc, #24]	; (1000cca0 <spi_reset+0x50>)
1000cc88:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000cc8a:	2039      	movs	r0, #57	; 0x39
1000cc8c:	4b04      	ldr	r3, [pc, #16]	; (1000cca0 <spi_reset+0x50>)
1000cc8e:	4798      	blx	r3
	}
}
1000cc90:	46c0      	nop			; (mov r8, r8)
1000cc92:	46bd      	mov	sp, r7
1000cc94:	b004      	add	sp, #16
1000cc96:	bd80      	pop	{r7, pc}
1000cc98:	1000cef9 	.word	0x1000cef9
1000cc9c:	40006000 	.word	0x40006000
1000cca0:	1000dfc1 	.word	0x1000dfc1
1000cca4:	40007000 	.word	0x40007000

1000cca8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000cca8:	b580      	push	{r7, lr}
1000ccaa:	b088      	sub	sp, #32
1000ccac:	af00      	add	r7, sp, #0
1000ccae:	60f8      	str	r0, [r7, #12]
1000ccb0:	60b9      	str	r1, [r7, #8]
1000ccb2:	607a      	str	r2, [r7, #4]
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000ccb4:	68fb      	ldr	r3, [r7, #12]
1000ccb6:	68ba      	ldr	r2, [r7, #8]
1000ccb8:	601a      	str	r2, [r3, #0]

	Spi *const spi_module = (module->hw);
1000ccba:	68fb      	ldr	r3, [r7, #12]
1000ccbc:	681b      	ldr	r3, [r3, #0]
1000ccbe:	61bb      	str	r3, [r7, #24]

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_SPI_MODULE_ENABLE_MASK) {
1000ccc0:	69bb      	ldr	r3, [r7, #24]
1000ccc2:	7e1b      	ldrb	r3, [r3, #24]
1000ccc4:	b2db      	uxtb	r3, r3
1000ccc6:	001a      	movs	r2, r3
1000ccc8:	2301      	movs	r3, #1
1000ccca:	4013      	ands	r3, r2
1000cccc:	d002      	beq.n	1000ccd4 <spi_init+0x2c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
1000ccce:	69bb      	ldr	r3, [r7, #24]
1000ccd0:	2200      	movs	r2, #0
1000ccd2:	761a      	strb	r2, [r3, #24]
	}

	spi_reset(module);
1000ccd4:	68fb      	ldr	r3, [r7, #12]
1000ccd6:	0018      	movs	r0, r3
1000ccd8:	4b64      	ldr	r3, [pc, #400]	; (1000ce6c <spi_init+0x1c4>)
1000ccda:	4798      	blx	r3
	_spi_clock_enable(module);
1000ccdc:	68fb      	ldr	r3, [r7, #12]
1000ccde:	0018      	movs	r0, r3
1000cce0:	4b63      	ldr	r3, [pc, #396]	; (1000ce70 <spi_init+0x1c8>)
1000cce2:	4798      	blx	r3

#if SPI_CALLBACK_MODE == true
	if (module->hw == SPI0) {
1000cce4:	68fb      	ldr	r3, [r7, #12]
1000cce6:	681b      	ldr	r3, [r3, #0]
1000cce8:	4a62      	ldr	r2, [pc, #392]	; (1000ce74 <spi_init+0x1cc>)
1000ccea:	4293      	cmp	r3, r2
1000ccec:	d10d      	bne.n	1000cd0a <spi_init+0x62>
		_spi_instances[0] = module;
1000ccee:	4b62      	ldr	r3, [pc, #392]	; (1000ce78 <spi_init+0x1d0>)
1000ccf0:	68fa      	ldr	r2, [r7, #12]
1000ccf2:	601a      	str	r2, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_SPIRX0_INDEX, (uint32_t)spi_rx0_isr_handler);
1000ccf4:	4b61      	ldr	r3, [pc, #388]	; (1000ce7c <spi_init+0x1d4>)
1000ccf6:	0019      	movs	r1, r3
1000ccf8:	2014      	movs	r0, #20
1000ccfa:	4b61      	ldr	r3, [pc, #388]	; (1000ce80 <spi_init+0x1d8>)
1000ccfc:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_SPITX0_INDEX, (uint32_t)spi_tx0_isr_handler);
1000ccfe:	4b61      	ldr	r3, [pc, #388]	; (1000ce84 <spi_init+0x1dc>)
1000cd00:	0019      	movs	r1, r3
1000cd02:	2015      	movs	r0, #21
1000cd04:	4b5e      	ldr	r3, [pc, #376]	; (1000ce80 <spi_init+0x1d8>)
1000cd06:	4798      	blx	r3
1000cd08:	e011      	b.n	1000cd2e <spi_init+0x86>
	} else if (module->hw == SPI1) {
1000cd0a:	68fb      	ldr	r3, [r7, #12]
1000cd0c:	681b      	ldr	r3, [r3, #0]
1000cd0e:	4a5e      	ldr	r2, [pc, #376]	; (1000ce88 <spi_init+0x1e0>)
1000cd10:	4293      	cmp	r3, r2
1000cd12:	d10c      	bne.n	1000cd2e <spi_init+0x86>
		_spi_instances[1] = module;
1000cd14:	4b58      	ldr	r3, [pc, #352]	; (1000ce78 <spi_init+0x1d0>)
1000cd16:	68fa      	ldr	r2, [r7, #12]
1000cd18:	605a      	str	r2, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_SPIRX1_INDEX, (uint32_t)spi_rx1_isr_handler);
1000cd1a:	4b5c      	ldr	r3, [pc, #368]	; (1000ce8c <spi_init+0x1e4>)
1000cd1c:	0019      	movs	r1, r3
1000cd1e:	2016      	movs	r0, #22
1000cd20:	4b57      	ldr	r3, [pc, #348]	; (1000ce80 <spi_init+0x1d8>)
1000cd22:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_SPITX1_INDEX, (uint32_t)spi_tx1_isr_handler);
1000cd24:	4b5a      	ldr	r3, [pc, #360]	; (1000ce90 <spi_init+0x1e8>)
1000cd26:	0019      	movs	r1, r3
1000cd28:	2017      	movs	r0, #23
1000cd2a:	4b55      	ldr	r3, [pc, #340]	; (1000ce80 <spi_init+0x1d8>)
1000cd2c:	4798      	blx	r3
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000cd2e:	2314      	movs	r3, #20
1000cd30:	18fb      	adds	r3, r7, r3
1000cd32:	0018      	movs	r0, r3
1000cd34:	4b57      	ldr	r3, [pc, #348]	; (1000ce94 <spi_init+0x1ec>)
1000cd36:	4798      	blx	r3

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000cd38:	231f      	movs	r3, #31
1000cd3a:	18fb      	adds	r3, r7, r3
1000cd3c:	2200      	movs	r2, #0
1000cd3e:	701a      	strb	r2, [r3, #0]
1000cd40:	e041      	b.n	1000cdc6 <spi_init+0x11e>
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000cd42:	231f      	movs	r3, #31
1000cd44:	18fb      	adds	r3, r7, r3
1000cd46:	781a      	ldrb	r2, [r3, #0]
1000cd48:	687b      	ldr	r3, [r7, #4]
1000cd4a:	3202      	adds	r2, #2
1000cd4c:	0092      	lsls	r2, r2, #2
1000cd4e:	58d3      	ldr	r3, [r2, r3]
1000cd50:	3301      	adds	r3, #1
1000cd52:	d031      	beq.n	1000cdb8 <spi_init+0x110>
			if (config->mode == SPI_MODE_MASTER) {
1000cd54:	687b      	ldr	r3, [r7, #4]
1000cd56:	781b      	ldrb	r3, [r3, #0]
1000cd58:	2b01      	cmp	r3, #1
1000cd5a:	d104      	bne.n	1000cd66 <spi_init+0xbe>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000cd5c:	2314      	movs	r3, #20
1000cd5e:	18fb      	adds	r3, r7, r3
1000cd60:	2201      	movs	r2, #1
1000cd62:	701a      	strb	r2, [r3, #0]
1000cd64:	e007      	b.n	1000cd76 <spi_init+0xce>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000cd66:	687b      	ldr	r3, [r7, #4]
1000cd68:	781b      	ldrb	r3, [r3, #0]
1000cd6a:	2b00      	cmp	r3, #0
1000cd6c:	d103      	bne.n	1000cd76 <spi_init+0xce>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000cd6e:	2314      	movs	r3, #20
1000cd70:	18fb      	adds	r3, r7, r3
1000cd72:	2200      	movs	r2, #0
1000cd74:	701a      	strb	r2, [r3, #0]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000cd76:	231f      	movs	r3, #31
1000cd78:	18fb      	adds	r3, r7, r3
1000cd7a:	781a      	ldrb	r2, [r3, #0]
1000cd7c:	687b      	ldr	r3, [r7, #4]
1000cd7e:	3202      	adds	r2, #2
1000cd80:	0092      	lsls	r2, r2, #2
1000cd82:	58d3      	ldr	r3, [r2, r3]
1000cd84:	b2db      	uxtb	r3, r3
1000cd86:	2214      	movs	r2, #20
1000cd88:	18ba      	adds	r2, r7, r2
1000cd8a:	0011      	movs	r1, r2
1000cd8c:	0018      	movs	r0, r3
1000cd8e:	4b42      	ldr	r3, [pc, #264]	; (1000ce98 <spi_init+0x1f0>)
1000cd90:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000cd92:	231f      	movs	r3, #31
1000cd94:	18fb      	adds	r3, r7, r3
1000cd96:	781a      	ldrb	r2, [r3, #0]
1000cd98:	687b      	ldr	r3, [r7, #4]
1000cd9a:	3202      	adds	r2, #2
1000cd9c:	0092      	lsls	r2, r2, #2
1000cd9e:	58d3      	ldr	r3, [r2, r3]
1000cda0:	b2d8      	uxtb	r0, r3
						(uint16_t)(config->pinmux_sel_pad[idx]));
1000cda2:	231f      	movs	r3, #31
1000cda4:	18fb      	adds	r3, r7, r3
1000cda6:	781a      	ldrb	r2, [r3, #0]
1000cda8:	687b      	ldr	r3, [r7, #4]
1000cdaa:	3206      	adds	r2, #6
1000cdac:	0092      	lsls	r2, r2, #2
1000cdae:	58d3      	ldr	r3, [r2, r3]
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
			} else if (config->mode == SPI_MODE_SLAVE) {
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000cdb0:	b29b      	uxth	r3, r3
1000cdb2:	0019      	movs	r1, r3
1000cdb4:	4b39      	ldr	r3, [pc, #228]	; (1000ce9c <spi_init+0x1f4>)
1000cdb6:	4798      	blx	r3
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000cdb8:	231f      	movs	r3, #31
1000cdba:	18fb      	adds	r3, r7, r3
1000cdbc:	781a      	ldrb	r2, [r3, #0]
1000cdbe:	231f      	movs	r3, #31
1000cdc0:	18fb      	adds	r3, r7, r3
1000cdc2:	3201      	adds	r2, #1
1000cdc4:	701a      	strb	r2, [r3, #0]
1000cdc6:	231f      	movs	r3, #31
1000cdc8:	18fb      	adds	r3, r7, r3
1000cdca:	781b      	ldrb	r3, [r3, #0]
1000cdcc:	2b03      	cmp	r3, #3
1000cdce:	d9b8      	bls.n	1000cd42 <spi_init+0x9a>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000cdd0:	687b      	ldr	r3, [r7, #4]
1000cdd2:	78da      	ldrb	r2, [r3, #3]
1000cdd4:	69bb      	ldr	r3, [r7, #24]
1000cdd6:	741a      	strb	r2, [r3, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000cdd8:	687b      	ldr	r3, [r7, #4]
1000cdda:	781b      	ldrb	r3, [r3, #0]
1000cddc:	2b01      	cmp	r3, #1
1000cdde:	d102      	bne.n	1000cde6 <spi_init+0x13e>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000cde0:	69bb      	ldr	r3, [r7, #24]
1000cde2:	2201      	movs	r2, #1
1000cde4:	771a      	strb	r2, [r3, #28]
#if SPI_CALLBACK_MODE == true
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
1000cde6:	231e      	movs	r3, #30
1000cde8:	18fb      	adds	r3, r7, r3
1000cdea:	2200      	movs	r2, #0
1000cdec:	701a      	strb	r2, [r3, #0]
1000cdee:	e00e      	b.n	1000ce0e <spi_init+0x166>
		module->callback[i]        = NULL;
1000cdf0:	231e      	movs	r3, #30
1000cdf2:	18fb      	adds	r3, r7, r3
1000cdf4:	781a      	ldrb	r2, [r3, #0]
1000cdf6:	68fb      	ldr	r3, [r7, #12]
1000cdf8:	3202      	adds	r2, #2
1000cdfa:	0092      	lsls	r2, r2, #2
1000cdfc:	2100      	movs	r1, #0
1000cdfe:	50d1      	str	r1, [r2, r3]
#if SPI_CALLBACK_MODE == true
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
1000ce00:	231e      	movs	r3, #30
1000ce02:	18fb      	adds	r3, r7, r3
1000ce04:	781a      	ldrb	r2, [r3, #0]
1000ce06:	231e      	movs	r3, #30
1000ce08:	18fb      	adds	r3, r7, r3
1000ce0a:	3201      	adds	r2, #1
1000ce0c:	701a      	strb	r2, [r3, #0]
1000ce0e:	231e      	movs	r3, #30
1000ce10:	18fb      	adds	r3, r7, r3
1000ce12:	781b      	ldrb	r3, [r3, #0]
1000ce14:	2b03      	cmp	r3, #3
1000ce16:	d9eb      	bls.n	1000cdf0 <spi_init+0x148>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
1000ce18:	68fb      	ldr	r3, [r7, #12]
1000ce1a:	2200      	movs	r2, #0
1000ce1c:	61da      	str	r2, [r3, #28]
	module->rx_buffer_ptr              = NULL;
1000ce1e:	68fb      	ldr	r3, [r7, #12]
1000ce20:	2200      	movs	r2, #0
1000ce22:	619a      	str	r2, [r3, #24]
	module->remaining_tx_buffer_length = 0x0000;
1000ce24:	68fb      	ldr	r3, [r7, #12]
1000ce26:	2200      	movs	r2, #0
1000ce28:	849a      	strh	r2, [r3, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
1000ce2a:	68fb      	ldr	r3, [r7, #12]
1000ce2c:	2200      	movs	r2, #0
1000ce2e:	841a      	strh	r2, [r3, #32]
	module->registered_callback        = 0x00;
1000ce30:	68fb      	ldr	r3, [r7, #12]
1000ce32:	2226      	movs	r2, #38	; 0x26
1000ce34:	2100      	movs	r1, #0
1000ce36:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
1000ce38:	68fb      	ldr	r3, [r7, #12]
1000ce3a:	2227      	movs	r2, #39	; 0x27
1000ce3c:	2100      	movs	r1, #0
1000ce3e:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
1000ce40:	68fb      	ldr	r3, [r7, #12]
1000ce42:	2228      	movs	r2, #40	; 0x28
1000ce44:	2100      	movs	r1, #0
1000ce46:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
1000ce48:	68fb      	ldr	r3, [r7, #12]
1000ce4a:	2203      	movs	r2, #3
1000ce4c:	71da      	strb	r2, [r3, #7]
	module->locked                     = 0;
1000ce4e:	68fb      	ldr	r3, [r7, #12]
1000ce50:	2200      	movs	r2, #0
1000ce52:	711a      	strb	r2, [r3, #4]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
1000ce54:	687a      	ldr	r2, [r7, #4]
1000ce56:	68fb      	ldr	r3, [r7, #12]
1000ce58:	0011      	movs	r1, r2
1000ce5a:	0018      	movs	r0, r3
1000ce5c:	4b10      	ldr	r3, [pc, #64]	; (1000cea0 <spi_init+0x1f8>)
1000ce5e:	4798      	blx	r3
1000ce60:	0003      	movs	r3, r0
}
1000ce62:	0018      	movs	r0, r3
1000ce64:	46bd      	mov	sp, r7
1000ce66:	b008      	add	sp, #32
1000ce68:	bd80      	pop	{r7, pc}
1000ce6a:	46c0      	nop			; (mov r8, r8)
1000ce6c:	1000cc51 	.word	0x1000cc51
1000ce70:	1000c9c5 	.word	0x1000c9c5
1000ce74:	40006000 	.word	0x40006000
1000ce78:	1001a558 	.word	0x1001a558
1000ce7c:	1000d055 	.word	0x1000d055
1000ce80:	1000e561 	.word	0x1000e561
1000ce84:	1000d245 	.word	0x1000d245
1000ce88:	40007000 	.word	0x40007000
1000ce8c:	1000d3dd 	.word	0x1000d3dd
1000ce90:	1000d5cd 	.word	0x1000d5cd
1000ce94:	1000b565 	.word	0x1000b565
1000ce98:	1000b58d 	.word	0x1000b58d
1000ce9c:	1000b8c1 	.word	0x1000b8c1
1000cea0:	1000ca8d 	.word	0x1000ca8d

1000cea4 <spi_enable>:
 * This function will enable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
1000cea4:	b580      	push	{r7, lr}
1000cea6:	b084      	sub	sp, #16
1000cea8:	af00      	add	r7, sp, #0
1000ceaa:	6078      	str	r0, [r7, #4]
	Spi *const spi_module = (module->hw);
1000ceac:	687b      	ldr	r3, [r7, #4]
1000ceae:	681b      	ldr	r3, [r3, #0]
1000ceb0:	60fb      	str	r3, [r7, #12]

#if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
1000ceb2:	68fb      	ldr	r3, [r7, #12]
1000ceb4:	4a0d      	ldr	r2, [pc, #52]	; (1000ceec <spi_enable+0x48>)
1000ceb6:	4293      	cmp	r3, r2
1000ceb8:	d106      	bne.n	1000cec8 <spi_enable+0x24>
		NVIC_EnableIRQ(SPI0_RX_IRQn);
1000ceba:	2004      	movs	r0, #4
1000cebc:	4b0c      	ldr	r3, [pc, #48]	; (1000cef0 <spi_enable+0x4c>)
1000cebe:	4798      	blx	r3
		NVIC_EnableIRQ(SPI0_TX_IRQn);
1000cec0:	2005      	movs	r0, #5
1000cec2:	4b0b      	ldr	r3, [pc, #44]	; (1000cef0 <spi_enable+0x4c>)
1000cec4:	4798      	blx	r3
1000cec6:	e009      	b.n	1000cedc <spi_enable+0x38>
	} else if(spi_module == SPI1) {
1000cec8:	68fb      	ldr	r3, [r7, #12]
1000ceca:	4a0a      	ldr	r2, [pc, #40]	; (1000cef4 <spi_enable+0x50>)
1000cecc:	4293      	cmp	r3, r2
1000cece:	d105      	bne.n	1000cedc <spi_enable+0x38>
		NVIC_EnableIRQ(SPI1_RX_IRQn);
1000ced0:	2006      	movs	r0, #6
1000ced2:	4b07      	ldr	r3, [pc, #28]	; (1000cef0 <spi_enable+0x4c>)
1000ced4:	4798      	blx	r3
		NVIC_EnableIRQ(SPI1_TX_IRQn);
1000ced6:	2007      	movs	r0, #7
1000ced8:	4b05      	ldr	r3, [pc, #20]	; (1000cef0 <spi_enable+0x4c>)
1000ceda:	4798      	blx	r3
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_SPI_MODULE_ENABLE_ENABLE;
1000cedc:	68fb      	ldr	r3, [r7, #12]
1000cede:	2201      	movs	r2, #1
1000cee0:	761a      	strb	r2, [r3, #24]
}
1000cee2:	46c0      	nop			; (mov r8, r8)
1000cee4:	46bd      	mov	sp, r7
1000cee6:	b004      	add	sp, #16
1000cee8:	bd80      	pop	{r7, pc}
1000ceea:	46c0      	nop			; (mov r8, r8)
1000ceec:	40006000 	.word	0x40006000
1000cef0:	1000c969 	.word	0x1000c969
1000cef4:	40007000 	.word	0x40007000

1000cef8 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000cef8:	b580      	push	{r7, lr}
1000cefa:	b084      	sub	sp, #16
1000cefc:	af00      	add	r7, sp, #0
1000cefe:	6078      	str	r0, [r7, #4]
	Spi *const spi_module = (module->hw);
1000cf00:	687b      	ldr	r3, [r7, #4]
1000cf02:	681b      	ldr	r3, [r3, #0]
1000cf04:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
1000cf06:	68fb      	ldr	r3, [r7, #12]
1000cf08:	4a0f      	ldr	r2, [pc, #60]	; (1000cf48 <spi_disable+0x50>)
1000cf0a:	4293      	cmp	r3, r2
1000cf0c:	d106      	bne.n	1000cf1c <spi_disable+0x24>
		NVIC_DisableIRQ(SPI0_RX_IRQn);
1000cf0e:	2004      	movs	r0, #4
1000cf10:	4b0e      	ldr	r3, [pc, #56]	; (1000cf4c <spi_disable+0x54>)
1000cf12:	4798      	blx	r3
		NVIC_DisableIRQ(SPI0_TX_IRQn);
1000cf14:	2005      	movs	r0, #5
1000cf16:	4b0d      	ldr	r3, [pc, #52]	; (1000cf4c <spi_disable+0x54>)
1000cf18:	4798      	blx	r3
1000cf1a:	e009      	b.n	1000cf30 <spi_disable+0x38>
	} else if(spi_module == SPI1) {
1000cf1c:	68fb      	ldr	r3, [r7, #12]
1000cf1e:	4a0c      	ldr	r2, [pc, #48]	; (1000cf50 <spi_disable+0x58>)
1000cf20:	4293      	cmp	r3, r2
1000cf22:	d105      	bne.n	1000cf30 <spi_disable+0x38>
		NVIC_DisableIRQ(SPI1_RX_IRQn);
1000cf24:	2006      	movs	r0, #6
1000cf26:	4b09      	ldr	r3, [pc, #36]	; (1000cf4c <spi_disable+0x54>)
1000cf28:	4798      	blx	r3
		NVIC_DisableIRQ(SPI1_TX_IRQn);
1000cf2a:	2007      	movs	r0, #7
1000cf2c:	4b07      	ldr	r3, [pc, #28]	; (1000cf4c <spi_disable+0x54>)
1000cf2e:	4798      	blx	r3
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
1000cf30:	68fb      	ldr	r3, [r7, #12]
1000cf32:	2200      	movs	r2, #0
1000cf34:	761a      	strb	r2, [r3, #24]
	_spi_clock_disable(module);
1000cf36:	687b      	ldr	r3, [r7, #4]
1000cf38:	0018      	movs	r0, r3
1000cf3a:	4b06      	ldr	r3, [pc, #24]	; (1000cf54 <spi_disable+0x5c>)
1000cf3c:	4798      	blx	r3
}
1000cf3e:	46c0      	nop			; (mov r8, r8)
1000cf40:	46bd      	mov	sp, r7
1000cf42:	b004      	add	sp, #16
1000cf44:	bd80      	pop	{r7, pc}
1000cf46:	46c0      	nop			; (mov r8, r8)
1000cf48:	40006000 	.word	0x40006000
1000cf4c:	1000c995 	.word	0x1000c995
1000cf50:	40007000 	.word	0x40007000
1000cf54:	1000ca29 	.word	0x1000ca29

1000cf58 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
1000cf58:	b580      	push	{r7, lr}
1000cf5a:	b084      	sub	sp, #16
1000cf5c:	af00      	add	r7, sp, #0
1000cf5e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000cf60:	687b      	ldr	r3, [r7, #4]
1000cf62:	681b      	ldr	r3, [r3, #0]
1000cf64:	60fb      	str	r3, [r7, #12]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
1000cf66:	687b      	ldr	r3, [r7, #4]
1000cf68:	69db      	ldr	r3, [r3, #28]
1000cf6a:	781b      	ldrb	r3, [r3, #0]
1000cf6c:	b2da      	uxtb	r2, r3
1000cf6e:	230a      	movs	r3, #10
1000cf70:	18fb      	adds	r3, r7, r3
1000cf72:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cf74:	687b      	ldr	r3, [r7, #4]
1000cf76:	69db      	ldr	r3, [r3, #28]
1000cf78:	1c5a      	adds	r2, r3, #1
1000cf7a:	687b      	ldr	r3, [r7, #4]
1000cf7c:	61da      	str	r2, [r3, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
1000cf7e:	230a      	movs	r3, #10
1000cf80:	18fb      	adds	r3, r7, r3
1000cf82:	881b      	ldrh	r3, [r3, #0]
1000cf84:	b2da      	uxtb	r2, r3
1000cf86:	68fb      	ldr	r3, [r7, #12]
1000cf88:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cf8a:	687b      	ldr	r3, [r7, #4]
1000cf8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000cf8e:	b29b      	uxth	r3, r3
1000cf90:	3b01      	subs	r3, #1
1000cf92:	b29a      	uxth	r2, r3
1000cf94:	687b      	ldr	r3, [r7, #4]
1000cf96:	849a      	strh	r2, [r3, #36]	; 0x24
}
1000cf98:	46c0      	nop			; (mov r8, r8)
1000cf9a:	46bd      	mov	sp, r7
1000cf9c:	b004      	add	sp, #16
1000cf9e:	bd80      	pop	{r7, pc}

1000cfa0 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
1000cfa0:	b580      	push	{r7, lr}
1000cfa2:	b084      	sub	sp, #16
1000cfa4:	af00      	add	r7, sp, #0
1000cfa6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000cfa8:	687b      	ldr	r3, [r7, #4]
1000cfaa:	681b      	ldr	r3, [r3, #0]
1000cfac:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
1000cfae:	68fb      	ldr	r3, [r7, #12]
1000cfb0:	791b      	ldrb	r3, [r3, #4]
1000cfb2:	b2da      	uxtb	r2, r3
1000cfb4:	230a      	movs	r3, #10
1000cfb6:	18fb      	adds	r3, r7, r3
1000cfb8:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cfba:	687b      	ldr	r3, [r7, #4]
1000cfbc:	699b      	ldr	r3, [r3, #24]
1000cfbe:	220a      	movs	r2, #10
1000cfc0:	18ba      	adds	r2, r7, r2
1000cfc2:	8812      	ldrh	r2, [r2, #0]
1000cfc4:	b2d2      	uxtb	r2, r2
1000cfc6:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cfc8:	687b      	ldr	r3, [r7, #4]
1000cfca:	699b      	ldr	r3, [r3, #24]
1000cfcc:	1c5a      	adds	r2, r3, #1
1000cfce:	687b      	ldr	r3, [r7, #4]
1000cfd0:	619a      	str	r2, [r3, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cfd2:	687b      	ldr	r3, [r7, #4]
1000cfd4:	8c1b      	ldrh	r3, [r3, #32]
1000cfd6:	b29b      	uxth	r3, r3
1000cfd8:	3b01      	subs	r3, #1
1000cfda:	b29a      	uxth	r2, r3
1000cfdc:	687b      	ldr	r3, [r7, #4]
1000cfde:	841a      	strh	r2, [r3, #32]
}
1000cfe0:	46c0      	nop			; (mov r8, r8)
1000cfe2:	46bd      	mov	sp, r7
1000cfe4:	b004      	add	sp, #16
1000cfe6:	bd80      	pop	{r7, pc}

1000cfe8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
1000cfe8:	b580      	push	{r7, lr}
1000cfea:	b084      	sub	sp, #16
1000cfec:	af00      	add	r7, sp, #0
1000cfee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000cff0:	687b      	ldr	r3, [r7, #4]
1000cff2:	681b      	ldr	r3, [r3, #0]
1000cff4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
1000cff6:	4b08      	ldr	r3, [pc, #32]	; (1000d018 <_spi_write_dummy+0x30>)
1000cff8:	881b      	ldrh	r3, [r3, #0]
1000cffa:	b2da      	uxtb	r2, r3
1000cffc:	68fb      	ldr	r3, [r7, #12]
1000cffe:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000d000:	687b      	ldr	r3, [r7, #4]
1000d002:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000d004:	b29b      	uxth	r3, r3
1000d006:	3b01      	subs	r3, #1
1000d008:	b29a      	uxth	r2, r3
1000d00a:	687b      	ldr	r3, [r7, #4]
1000d00c:	845a      	strh	r2, [r3, #34]	; 0x22
}
1000d00e:	46c0      	nop			; (mov r8, r8)
1000d010:	46bd      	mov	sp, r7
1000d012:	b004      	add	sp, #16
1000d014:	bd80      	pop	{r7, pc}
1000d016:	46c0      	nop			; (mov r8, r8)
1000d018:	10019b60 	.word	0x10019b60

1000d01c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
1000d01c:	b580      	push	{r7, lr}
1000d01e:	b084      	sub	sp, #16
1000d020:	af00      	add	r7, sp, #0
1000d022:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000d024:	687b      	ldr	r3, [r7, #4]
1000d026:	681b      	ldr	r3, [r3, #0]
1000d028:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
1000d02a:	230a      	movs	r3, #10
1000d02c:	18fb      	adds	r3, r7, r3
1000d02e:	2200      	movs	r2, #0
1000d030:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
1000d032:	68fb      	ldr	r3, [r7, #12]
1000d034:	791b      	ldrb	r3, [r3, #4]
1000d036:	b2da      	uxtb	r2, r3
1000d038:	230a      	movs	r3, #10
1000d03a:	18fb      	adds	r3, r7, r3
1000d03c:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000d03e:	687b      	ldr	r3, [r7, #4]
1000d040:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000d042:	b29b      	uxth	r3, r3
1000d044:	3b01      	subs	r3, #1
1000d046:	b29a      	uxth	r2, r3
1000d048:	687b      	ldr	r3, [r7, #4]
1000d04a:	845a      	strh	r2, [r3, #34]	; 0x22
}
1000d04c:	46c0      	nop			; (mov r8, r8)
1000d04e:	46bd      	mov	sp, r7
1000d050:	b004      	add	sp, #16
1000d052:	bd80      	pop	{r7, pc}

1000d054 <spi_rx0_isr_handler>:

void spi_rx0_isr_handler(void)
{
1000d054:	b580      	push	{r7, lr}
1000d056:	b084      	sub	sp, #16
1000d058:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[0];
1000d05a:	4b76      	ldr	r3, [pc, #472]	; (1000d234 <spi_rx0_isr_handler+0x1e0>)
1000d05c:	681b      	ldr	r3, [r3, #0]
1000d05e:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d060:	68fb      	ldr	r3, [r7, #12]
1000d062:	681b      	ldr	r3, [r3, #0]
1000d064:	7b1b      	ldrb	r3, [r3, #12]
1000d066:	b2db      	uxtb	r3, r3
1000d068:	60bb      	str	r3, [r7, #8]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
1000d06a:	68fb      	ldr	r3, [r7, #12]
1000d06c:	681b      	ldr	r3, [r3, #0]
1000d06e:	2230      	movs	r2, #48	; 0x30
1000d070:	5c9b      	ldrb	r3, [r3, r2]
1000d072:	b2db      	uxtb	r3, r3
1000d074:	001a      	movs	r2, r3
1000d076:	68bb      	ldr	r3, [r7, #8]
1000d078:	4013      	ands	r3, r2
1000d07a:	60bb      	str	r3, [r7, #8]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d07c:	68bb      	ldr	r3, [r7, #8]
1000d07e:	2201      	movs	r2, #1
1000d080:	4013      	ands	r3, r2
1000d082:	d100      	bne.n	1000d086 <spi_rx0_isr_handler+0x32>
1000d084:	e0d1      	b.n	1000d22a <spi_rx0_isr_handler+0x1d6>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d086:	68fb      	ldr	r3, [r7, #12]
1000d088:	681b      	ldr	r3, [r3, #0]
1000d08a:	7b1b      	ldrb	r3, [r3, #12]
1000d08c:	b2db      	uxtb	r3, r3
1000d08e:	001a      	movs	r2, r3
1000d090:	2320      	movs	r3, #32
1000d092:	4013      	ands	r3, r2
1000d094:	d041      	beq.n	1000d11a <spi_rx0_isr_handler+0xc6>
			if (module->dir != SPI_DIRECTION_WRITE) {
1000d096:	68fb      	ldr	r3, [r7, #12]
1000d098:	79db      	ldrb	r3, [r3, #7]
1000d09a:	b2db      	uxtb	r3, r3
1000d09c:	2b01      	cmp	r3, #1
1000d09e:	d035      	beq.n	1000d10c <spi_rx0_isr_handler+0xb8>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
1000d0a0:	68fb      	ldr	r3, [r7, #12]
1000d0a2:	2228      	movs	r2, #40	; 0x28
1000d0a4:	211e      	movs	r1, #30
1000d0a6:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
1000d0a8:	68fb      	ldr	r3, [r7, #12]
1000d0aa:	2203      	movs	r2, #3
1000d0ac:	71da      	strb	r2, [r3, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
1000d0ae:	68fb      	ldr	r3, [r7, #12]
1000d0b0:	681a      	ldr	r2, [r3, #0]
1000d0b2:	68fb      	ldr	r3, [r7, #12]
1000d0b4:	681b      	ldr	r3, [r3, #0]
1000d0b6:	2130      	movs	r1, #48	; 0x30
1000d0b8:	5c5b      	ldrb	r3, [r3, r1]
1000d0ba:	b2db      	uxtb	r3, r3
1000d0bc:	2121      	movs	r1, #33	; 0x21
1000d0be:	438b      	bics	r3, r1
1000d0c0:	b2d9      	uxtb	r1, r3
1000d0c2:	2330      	movs	r3, #48	; 0x30
1000d0c4:	54d1      	strb	r1, [r2, r3]
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000d0c6:	68fb      	ldr	r3, [r7, #12]
1000d0c8:	2227      	movs	r2, #39	; 0x27
1000d0ca:	5c9b      	ldrb	r3, [r3, r2]
1000d0cc:	001a      	movs	r2, r3
1000d0ce:	2308      	movs	r3, #8
1000d0d0:	4013      	ands	r3, r2
1000d0d2:	d01b      	beq.n	1000d10c <spi_rx0_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
1000d0d4:	68fb      	ldr	r3, [r7, #12]
1000d0d6:	2226      	movs	r2, #38	; 0x26
1000d0d8:	5c9b      	ldrb	r3, [r3, r2]
1000d0da:	001a      	movs	r2, r3
1000d0dc:	2308      	movs	r3, #8
1000d0de:	4013      	ands	r3, r2

				module->hw->RX_INTERRUPT_MASK.reg &=
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000d0e0:	d014      	beq.n	1000d10c <spi_rx0_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
1000d0e2:	68fb      	ldr	r3, [r7, #12]
1000d0e4:	2228      	movs	r2, #40	; 0x28
1000d0e6:	211e      	movs	r1, #30
1000d0e8:	5499      	strb	r1, [r3, r2]
					module->hw->RX_INTERRUPT_MASK.reg &=
1000d0ea:	68fb      	ldr	r3, [r7, #12]
1000d0ec:	681a      	ldr	r2, [r3, #0]
1000d0ee:	68fb      	ldr	r3, [r7, #12]
1000d0f0:	681b      	ldr	r3, [r3, #0]
1000d0f2:	2130      	movs	r1, #48	; 0x30
1000d0f4:	5c5b      	ldrb	r3, [r3, r1]
1000d0f6:	b2db      	uxtb	r3, r3
1000d0f8:	2120      	movs	r1, #32
1000d0fa:	438b      	bics	r3, r1
1000d0fc:	b2d9      	uxtb	r1, r3
1000d0fe:	2330      	movs	r3, #48	; 0x30
1000d100:	54d1      	strb	r1, [r2, r3]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
1000d102:	68fb      	ldr	r3, [r7, #12]
1000d104:	695b      	ldr	r3, [r3, #20]
1000d106:	68fa      	ldr	r2, [r7, #12]
1000d108:	0010      	movs	r0, r2
1000d10a:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
1000d10c:	68fb      	ldr	r3, [r7, #12]
1000d10e:	681b      	ldr	r3, [r3, #0]
1000d110:	791b      	ldrb	r3, [r3, #4]
1000d112:	b2da      	uxtb	r2, r3
1000d114:	1dbb      	adds	r3, r7, #6
1000d116:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000d118:	e087      	b.n	1000d22a <spi_rx0_isr_handler+0x1d6>
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
1000d11a:	68fb      	ldr	r3, [r7, #12]
1000d11c:	79db      	ldrb	r3, [r3, #7]
1000d11e:	b2db      	uxtb	r3, r3
1000d120:	2b01      	cmp	r3, #1
1000d122:	d11d      	bne.n	1000d160 <spi_rx0_isr_handler+0x10c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
1000d124:	68fb      	ldr	r3, [r7, #12]
1000d126:	0018      	movs	r0, r3
1000d128:	4b43      	ldr	r3, [pc, #268]	; (1000d238 <spi_rx0_isr_handler+0x1e4>)
1000d12a:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
1000d12c:	68fb      	ldr	r3, [r7, #12]
1000d12e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000d130:	b29b      	uxth	r3, r3
1000d132:	2b00      	cmp	r3, #0
1000d134:	d000      	beq.n	1000d138 <spi_rx0_isr_handler+0xe4>
1000d136:	e078      	b.n	1000d22a <spi_rx0_isr_handler+0x1d6>
					module->hw->RX_INTERRUPT_MASK.reg &=
1000d138:	68fb      	ldr	r3, [r7, #12]
1000d13a:	681a      	ldr	r2, [r3, #0]
1000d13c:	68fb      	ldr	r3, [r7, #12]
1000d13e:	681b      	ldr	r3, [r3, #0]
1000d140:	2130      	movs	r1, #48	; 0x30
1000d142:	5c5b      	ldrb	r3, [r3, r1]
1000d144:	b2db      	uxtb	r3, r3
1000d146:	2120      	movs	r1, #32
1000d148:	438b      	bics	r3, r1
1000d14a:	b2d9      	uxtb	r1, r3
1000d14c:	2330      	movs	r3, #48	; 0x30
1000d14e:	54d1      	strb	r1, [r2, r3]
						~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
1000d150:	68fb      	ldr	r3, [r7, #12]
1000d152:	2228      	movs	r2, #40	; 0x28
1000d154:	2100      	movs	r1, #0
1000d156:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
1000d158:	68fb      	ldr	r3, [r7, #12]
1000d15a:	2203      	movs	r2, #3
1000d15c:	71da      	strb	r2, [r3, #7]
					}
				}
			}
		}
	}
}
1000d15e:	e064      	b.n	1000d22a <spi_rx0_isr_handler+0x1d6>
						//(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
						//(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
					//}
				}
			} else {
				_spi_read(module);
1000d160:	68fb      	ldr	r3, [r7, #12]
1000d162:	0018      	movs	r0, r3
1000d164:	4b35      	ldr	r3, [pc, #212]	; (1000d23c <spi_rx0_isr_handler+0x1e8>)
1000d166:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
1000d168:	68fb      	ldr	r3, [r7, #12]
1000d16a:	8c1b      	ldrh	r3, [r3, #32]
1000d16c:	b29b      	uxth	r3, r3
1000d16e:	2b00      	cmp	r3, #0
1000d170:	d15b      	bne.n	1000d22a <spi_rx0_isr_handler+0x1d6>
					if(module->dir == SPI_DIRECTION_READ) {
1000d172:	68fb      	ldr	r3, [r7, #12]
1000d174:	79db      	ldrb	r3, [r3, #7]
1000d176:	b2db      	uxtb	r3, r3
1000d178:	2b00      	cmp	r3, #0
1000d17a:	d123      	bne.n	1000d1c4 <spi_rx0_isr_handler+0x170>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000d17c:	68fb      	ldr	r3, [r7, #12]
1000d17e:	2227      	movs	r2, #39	; 0x27
1000d180:	5c9b      	ldrb	r3, [r3, r2]
1000d182:	001a      	movs	r2, r3
1000d184:	2302      	movs	r3, #2
1000d186:	4013      	ands	r3, r2
1000d188:	d04f      	beq.n	1000d22a <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
1000d18a:	68fb      	ldr	r3, [r7, #12]
1000d18c:	2226      	movs	r2, #38	; 0x26
1000d18e:	5c9b      	ldrb	r3, [r3, r2]
1000d190:	001a      	movs	r2, r3
1000d192:	2302      	movs	r3, #2
1000d194:	4013      	ands	r3, r2
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000d196:	d048      	beq.n	1000d22a <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
1000d198:	68fb      	ldr	r3, [r7, #12]
1000d19a:	2228      	movs	r2, #40	; 0x28
1000d19c:	2100      	movs	r1, #0
1000d19e:	5499      	strb	r1, [r3, r2]
							module->hw->RX_INTERRUPT_MASK.reg &=
1000d1a0:	68fb      	ldr	r3, [r7, #12]
1000d1a2:	681a      	ldr	r2, [r3, #0]
1000d1a4:	68fb      	ldr	r3, [r7, #12]
1000d1a6:	681b      	ldr	r3, [r3, #0]
1000d1a8:	2130      	movs	r1, #48	; 0x30
1000d1aa:	5c5b      	ldrb	r3, [r3, r1]
1000d1ac:	b2db      	uxtb	r3, r3
1000d1ae:	2101      	movs	r1, #1
1000d1b0:	438b      	bics	r3, r1
1000d1b2:	b2d9      	uxtb	r1, r3
1000d1b4:	2330      	movs	r3, #48	; 0x30
1000d1b6:	54d1      	strb	r1, [r2, r3]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
1000d1b8:	68fb      	ldr	r3, [r7, #12]
1000d1ba:	68db      	ldr	r3, [r3, #12]
1000d1bc:	68fa      	ldr	r2, [r7, #12]
1000d1be:	0010      	movs	r0, r2
1000d1c0:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000d1c2:	e032      	b.n	1000d22a <spi_rx0_isr_handler+0x1d6>
							module->status = STATUS_OK;
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
1000d1c4:	68fb      	ldr	r3, [r7, #12]
1000d1c6:	79db      	ldrb	r3, [r3, #7]
1000d1c8:	b2db      	uxtb	r3, r3
1000d1ca:	2b02      	cmp	r3, #2
1000d1cc:	d12d      	bne.n	1000d22a <spi_rx0_isr_handler+0x1d6>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d1ce:	68fb      	ldr	r3, [r7, #12]
1000d1d0:	2227      	movs	r2, #39	; 0x27
1000d1d2:	5c9b      	ldrb	r3, [r3, r2]
1000d1d4:	001a      	movs	r2, r3
1000d1d6:	2304      	movs	r3, #4
1000d1d8:	4013      	ands	r3, r2
1000d1da:	d026      	beq.n	1000d22a <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000d1dc:	68fb      	ldr	r3, [r7, #12]
1000d1de:	2226      	movs	r2, #38	; 0x26
1000d1e0:	5c9b      	ldrb	r3, [r3, r2]
1000d1e2:	001a      	movs	r2, r3
1000d1e4:	2304      	movs	r3, #4
1000d1e6:	4013      	ands	r3, r2
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d1e8:	d01f      	beq.n	1000d22a <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
								module->hw->RX_INTERRUPT_MASK.reg &=
1000d1ea:	68fb      	ldr	r3, [r7, #12]
1000d1ec:	681a      	ldr	r2, [r3, #0]
1000d1ee:	68fb      	ldr	r3, [r7, #12]
1000d1f0:	681b      	ldr	r3, [r3, #0]
1000d1f2:	2130      	movs	r1, #48	; 0x30
1000d1f4:	5c5b      	ldrb	r3, [r3, r1]
1000d1f6:	b2db      	uxtb	r3, r3
1000d1f8:	2101      	movs	r1, #1
1000d1fa:	438b      	bics	r3, r1
1000d1fc:	b2d9      	uxtb	r1, r3
1000d1fe:	2330      	movs	r3, #48	; 0x30
1000d200:	54d1      	strb	r1, [r2, r3]
										~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
								if (flag_direction_both[0]) {
1000d202:	4b0f      	ldr	r3, [pc, #60]	; (1000d240 <spi_rx0_isr_handler+0x1ec>)
1000d204:	781b      	ldrb	r3, [r3, #0]
1000d206:	2b00      	cmp	r3, #0
1000d208:	d00c      	beq.n	1000d224 <spi_rx0_isr_handler+0x1d0>
									module->status = STATUS_OK;
1000d20a:	68fb      	ldr	r3, [r7, #12]
1000d20c:	2228      	movs	r2, #40	; 0x28
1000d20e:	2100      	movs	r1, #0
1000d210:	5499      	strb	r1, [r3, r2]
									flag_direction_both[0] = false;
1000d212:	4b0b      	ldr	r3, [pc, #44]	; (1000d240 <spi_rx0_isr_handler+0x1ec>)
1000d214:	2200      	movs	r2, #0
1000d216:	701a      	strb	r2, [r3, #0]
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000d218:	68fb      	ldr	r3, [r7, #12]
1000d21a:	691b      	ldr	r3, [r3, #16]
1000d21c:	68fa      	ldr	r2, [r7, #12]
1000d21e:	0010      	movs	r0, r2
1000d220:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000d222:	e002      	b.n	1000d22a <spi_rx0_isr_handler+0x1d6>
								if (flag_direction_both[0]) {
									module->status = STATUS_OK;
									flag_direction_both[0] = false;
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
								} else {
									flag_direction_both[0] = true;
1000d224:	4b06      	ldr	r3, [pc, #24]	; (1000d240 <spi_rx0_isr_handler+0x1ec>)
1000d226:	2201      	movs	r2, #1
1000d228:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000d22a:	46c0      	nop			; (mov r8, r8)
1000d22c:	46bd      	mov	sp, r7
1000d22e:	b004      	add	sp, #16
1000d230:	bd80      	pop	{r7, pc}
1000d232:	46c0      	nop			; (mov r8, r8)
1000d234:	1001a558 	.word	0x1001a558
1000d238:	1000d01d 	.word	0x1000d01d
1000d23c:	1000cfa1 	.word	0x1000cfa1
1000d240:	10019b64 	.word	0x10019b64

1000d244 <spi_tx0_isr_handler>:

void spi_tx0_isr_handler(void)
{
1000d244:	b580      	push	{r7, lr}
1000d246:	b082      	sub	sp, #8
1000d248:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[0];
1000d24a:	4b60      	ldr	r3, [pc, #384]	; (1000d3cc <spi_tx0_isr_handler+0x188>)
1000d24c:	681b      	ldr	r3, [r3, #0]
1000d24e:	607b      	str	r3, [r7, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d250:	687b      	ldr	r3, [r7, #4]
1000d252:	681b      	ldr	r3, [r3, #0]
1000d254:	7a1b      	ldrb	r3, [r3, #8]
1000d256:	b2db      	uxtb	r3, r3
1000d258:	603b      	str	r3, [r7, #0]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
1000d25a:	687b      	ldr	r3, [r7, #4]
1000d25c:	681b      	ldr	r3, [r3, #0]
1000d25e:	222c      	movs	r2, #44	; 0x2c
1000d260:	5c9b      	ldrb	r3, [r3, r2]
1000d262:	b2db      	uxtb	r3, r3
1000d264:	001a      	movs	r2, r3
1000d266:	683b      	ldr	r3, [r7, #0]
1000d268:	4013      	ands	r3, r2
1000d26a:	603b      	str	r3, [r7, #0]

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
1000d26c:	683b      	ldr	r3, [r7, #0]
1000d26e:	2201      	movs	r2, #1
1000d270:	4013      	ands	r3, r2
1000d272:	d047      	beq.n	1000d304 <spi_tx0_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000d274:	687b      	ldr	r3, [r7, #4]
1000d276:	795b      	ldrb	r3, [r3, #5]
1000d278:	2b01      	cmp	r3, #1
1000d27a:	d119      	bne.n	1000d2b0 <spi_tx0_isr_handler+0x6c>
			(module->dir == SPI_DIRECTION_READ)) {
1000d27c:	687b      	ldr	r3, [r7, #4]
1000d27e:	79db      	ldrb	r3, [r3, #7]
1000d280:	b2db      	uxtb	r3, r3
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000d282:	2b00      	cmp	r3, #0
1000d284:	d114      	bne.n	1000d2b0 <spi_tx0_isr_handler+0x6c>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
1000d286:	687b      	ldr	r3, [r7, #4]
1000d288:	0018      	movs	r0, r3
1000d28a:	4b51      	ldr	r3, [pc, #324]	; (1000d3d0 <spi_tx0_isr_handler+0x18c>)
1000d28c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
1000d28e:	687b      	ldr	r3, [r7, #4]
1000d290:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000d292:	b29b      	uxth	r3, r3
1000d294:	2b00      	cmp	r3, #0
1000d296:	d10b      	bne.n	1000d2b0 <spi_tx0_isr_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000d298:	687b      	ldr	r3, [r7, #4]
1000d29a:	681a      	ldr	r2, [r3, #0]
1000d29c:	687b      	ldr	r3, [r7, #4]
1000d29e:	681b      	ldr	r3, [r3, #0]
1000d2a0:	212c      	movs	r1, #44	; 0x2c
1000d2a2:	5c5b      	ldrb	r3, [r3, r1]
1000d2a4:	b2db      	uxtb	r3, r3
1000d2a6:	2101      	movs	r1, #1
1000d2a8:	438b      	bics	r3, r1
1000d2aa:	b2d9      	uxtb	r1, r3
1000d2ac:	232c      	movs	r3, #44	; 0x2c
1000d2ae:	54d1      	strb	r1, [r2, r3]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000d2b0:	687b      	ldr	r3, [r7, #4]
1000d2b2:	795b      	ldrb	r3, [r3, #5]
				module->hw->TX_INTERRUPT_MASK.reg &=
					~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
1000d2b4:	2b01      	cmp	r3, #1
1000d2b6:	d125      	bne.n	1000d304 <spi_tx0_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
1000d2b8:	687b      	ldr	r3, [r7, #4]
1000d2ba:	79db      	ldrb	r3, [r3, #7]
1000d2bc:	b2db      	uxtb	r3, r3
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000d2be:	2b00      	cmp	r3, #0
1000d2c0:	d020      	beq.n	1000d304 <spi_tx0_isr_handler+0xc0>
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
1000d2c2:	687b      	ldr	r3, [r7, #4]
1000d2c4:	0018      	movs	r0, r3
1000d2c6:	4b43      	ldr	r3, [pc, #268]	; (1000d3d4 <spi_tx0_isr_handler+0x190>)
1000d2c8:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
1000d2ca:	687b      	ldr	r3, [r7, #4]
1000d2cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000d2ce:	b29b      	uxth	r3, r3
1000d2d0:	2b00      	cmp	r3, #0
1000d2d2:	d117      	bne.n	1000d304 <spi_tx0_isr_handler+0xc0>
				module->hw->TX_INTERRUPT_MASK.reg &=
1000d2d4:	687b      	ldr	r3, [r7, #4]
1000d2d6:	681a      	ldr	r2, [r3, #0]
1000d2d8:	687b      	ldr	r3, [r7, #4]
1000d2da:	681b      	ldr	r3, [r3, #0]
1000d2dc:	212c      	movs	r1, #44	; 0x2c
1000d2de:	5c5b      	ldrb	r3, [r3, r1]
1000d2e0:	b2db      	uxtb	r3, r3
1000d2e2:	2101      	movs	r1, #1
1000d2e4:	438b      	bics	r3, r1
1000d2e6:	b2d9      	uxtb	r1, r3
1000d2e8:	232c      	movs	r3, #44	; 0x2c
1000d2ea:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
1000d2ec:	687b      	ldr	r3, [r7, #4]
1000d2ee:	681a      	ldr	r2, [r3, #0]
1000d2f0:	687b      	ldr	r3, [r7, #4]
1000d2f2:	681b      	ldr	r3, [r3, #0]
1000d2f4:	212c      	movs	r1, #44	; 0x2c
1000d2f6:	5c5b      	ldrb	r3, [r3, r1]
1000d2f8:	b2db      	uxtb	r3, r3
1000d2fa:	2110      	movs	r1, #16
1000d2fc:	430b      	orrs	r3, r1
1000d2fe:	b2d9      	uxtb	r1, r3
1000d300:	232c      	movs	r3, #44	; 0x2c
1000d302:	54d1      	strb	r1, [r2, r3]
						SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d304:	683b      	ldr	r3, [r7, #0]
1000d306:	2210      	movs	r2, #16
1000d308:	4013      	ands	r3, r2
1000d30a:	d05b      	beq.n	1000d3c4 <spi_tx0_isr_handler+0x180>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000d30c:	687b      	ldr	r3, [r7, #4]
1000d30e:	79db      	ldrb	r3, [r3, #7]
1000d310:	b2db      	uxtb	r3, r3
1000d312:	2b01      	cmp	r3, #1
1000d314:	d123      	bne.n	1000d35e <spi_tx0_isr_handler+0x11a>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000d316:	687b      	ldr	r3, [r7, #4]
1000d318:	2227      	movs	r2, #39	; 0x27
1000d31a:	5c9b      	ldrb	r3, [r3, r2]
1000d31c:	001a      	movs	r2, r3
1000d31e:	2301      	movs	r3, #1
1000d320:	4013      	ands	r3, r2
1000d322:	d04f      	beq.n	1000d3c4 <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
1000d324:	687b      	ldr	r3, [r7, #4]
1000d326:	2226      	movs	r2, #38	; 0x26
1000d328:	5c9b      	ldrb	r3, [r3, r2]
1000d32a:	001a      	movs	r2, r3
1000d32c:	2301      	movs	r3, #1
1000d32e:	4013      	ands	r3, r2
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000d330:	d048      	beq.n	1000d3c4 <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
					module->status = STATUS_OK;
1000d332:	687b      	ldr	r3, [r7, #4]
1000d334:	2228      	movs	r2, #40	; 0x28
1000d336:	2100      	movs	r1, #0
1000d338:	5499      	strb	r1, [r3, r2]
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
1000d33a:	687b      	ldr	r3, [r7, #4]
1000d33c:	681a      	ldr	r2, [r3, #0]
1000d33e:	687b      	ldr	r3, [r7, #4]
1000d340:	681b      	ldr	r3, [r3, #0]
1000d342:	212c      	movs	r1, #44	; 0x2c
1000d344:	5c5b      	ldrb	r3, [r3, r1]
1000d346:	b2db      	uxtb	r3, r3
1000d348:	2110      	movs	r1, #16
1000d34a:	438b      	bics	r3, r1
1000d34c:	b2d9      	uxtb	r1, r3
1000d34e:	232c      	movs	r3, #44	; 0x2c
1000d350:	54d1      	strb	r1, [r2, r3]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
1000d352:	687b      	ldr	r3, [r7, #4]
1000d354:	689b      	ldr	r3, [r3, #8]
1000d356:	687a      	ldr	r2, [r7, #4]
1000d358:	0010      	movs	r0, r2
1000d35a:	4798      	blx	r3
						flag_direction_both[0] = true;
					}
			}
		}
	}
}
1000d35c:	e032      	b.n	1000d3c4 <spi_tx0_isr_handler+0x180>
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
1000d35e:	687b      	ldr	r3, [r7, #4]
1000d360:	79db      	ldrb	r3, [r3, #7]
1000d362:	b2db      	uxtb	r3, r3
1000d364:	2b02      	cmp	r3, #2
1000d366:	d12d      	bne.n	1000d3c4 <spi_tx0_isr_handler+0x180>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d368:	687b      	ldr	r3, [r7, #4]
1000d36a:	2227      	movs	r2, #39	; 0x27
1000d36c:	5c9b      	ldrb	r3, [r3, r2]
1000d36e:	001a      	movs	r2, r3
1000d370:	2304      	movs	r3, #4
1000d372:	4013      	ands	r3, r2
1000d374:	d026      	beq.n	1000d3c4 <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000d376:	687b      	ldr	r3, [r7, #4]
1000d378:	2226      	movs	r2, #38	; 0x26
1000d37a:	5c9b      	ldrb	r3, [r3, r2]
1000d37c:	001a      	movs	r2, r3
1000d37e:	2304      	movs	r3, #4
1000d380:	4013      	ands	r3, r2
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d382:	d01f      	beq.n	1000d3c4 <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
1000d384:	687b      	ldr	r3, [r7, #4]
1000d386:	681a      	ldr	r2, [r3, #0]
1000d388:	687b      	ldr	r3, [r7, #4]
1000d38a:	681b      	ldr	r3, [r3, #0]
1000d38c:	212c      	movs	r1, #44	; 0x2c
1000d38e:	5c5b      	ldrb	r3, [r3, r1]
1000d390:	b2db      	uxtb	r3, r3
1000d392:	2110      	movs	r1, #16
1000d394:	438b      	bics	r3, r1
1000d396:	b2d9      	uxtb	r1, r3
1000d398:	232c      	movs	r3, #44	; 0x2c
1000d39a:	54d1      	strb	r1, [r2, r3]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					if (flag_direction_both[0]) {
1000d39c:	4b0e      	ldr	r3, [pc, #56]	; (1000d3d8 <spi_tx0_isr_handler+0x194>)
1000d39e:	781b      	ldrb	r3, [r3, #0]
1000d3a0:	2b00      	cmp	r3, #0
1000d3a2:	d00c      	beq.n	1000d3be <spi_tx0_isr_handler+0x17a>
						module->status = STATUS_OK;
1000d3a4:	687b      	ldr	r3, [r7, #4]
1000d3a6:	2228      	movs	r2, #40	; 0x28
1000d3a8:	2100      	movs	r1, #0
1000d3aa:	5499      	strb	r1, [r3, r2]
						flag_direction_both[0] = false;
1000d3ac:	4b0a      	ldr	r3, [pc, #40]	; (1000d3d8 <spi_tx0_isr_handler+0x194>)
1000d3ae:	2200      	movs	r2, #0
1000d3b0:	701a      	strb	r2, [r3, #0]
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000d3b2:	687b      	ldr	r3, [r7, #4]
1000d3b4:	691b      	ldr	r3, [r3, #16]
1000d3b6:	687a      	ldr	r2, [r7, #4]
1000d3b8:	0010      	movs	r0, r2
1000d3ba:	4798      	blx	r3
						flag_direction_both[0] = true;
					}
			}
		}
	}
}
1000d3bc:	e002      	b.n	1000d3c4 <spi_tx0_isr_handler+0x180>
					if (flag_direction_both[0]) {
						module->status = STATUS_OK;
						flag_direction_both[0] = false;
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
					} else {
						flag_direction_both[0] = true;
1000d3be:	4b06      	ldr	r3, [pc, #24]	; (1000d3d8 <spi_tx0_isr_handler+0x194>)
1000d3c0:	2201      	movs	r2, #1
1000d3c2:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
1000d3c4:	46c0      	nop			; (mov r8, r8)
1000d3c6:	46bd      	mov	sp, r7
1000d3c8:	b002      	add	sp, #8
1000d3ca:	bd80      	pop	{r7, pc}
1000d3cc:	1001a558 	.word	0x1001a558
1000d3d0:	1000cfe9 	.word	0x1000cfe9
1000d3d4:	1000cf59 	.word	0x1000cf59
1000d3d8:	10019b64 	.word	0x10019b64

1000d3dc <spi_rx1_isr_handler>:

void spi_rx1_isr_handler(void)
{
1000d3dc:	b580      	push	{r7, lr}
1000d3de:	b084      	sub	sp, #16
1000d3e0:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[1];
1000d3e2:	4b76      	ldr	r3, [pc, #472]	; (1000d5bc <spi_rx1_isr_handler+0x1e0>)
1000d3e4:	685b      	ldr	r3, [r3, #4]
1000d3e6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d3e8:	68fb      	ldr	r3, [r7, #12]
1000d3ea:	681b      	ldr	r3, [r3, #0]
1000d3ec:	7b1b      	ldrb	r3, [r3, #12]
1000d3ee:	b2db      	uxtb	r3, r3
1000d3f0:	60bb      	str	r3, [r7, #8]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
1000d3f2:	68fb      	ldr	r3, [r7, #12]
1000d3f4:	681b      	ldr	r3, [r3, #0]
1000d3f6:	2230      	movs	r2, #48	; 0x30
1000d3f8:	5c9b      	ldrb	r3, [r3, r2]
1000d3fa:	b2db      	uxtb	r3, r3
1000d3fc:	001a      	movs	r2, r3
1000d3fe:	68bb      	ldr	r3, [r7, #8]
1000d400:	4013      	ands	r3, r2
1000d402:	60bb      	str	r3, [r7, #8]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d404:	68bb      	ldr	r3, [r7, #8]
1000d406:	2201      	movs	r2, #1
1000d408:	4013      	ands	r3, r2
1000d40a:	d100      	bne.n	1000d40e <spi_rx1_isr_handler+0x32>
1000d40c:	e0d1      	b.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d40e:	68fb      	ldr	r3, [r7, #12]
1000d410:	681b      	ldr	r3, [r3, #0]
1000d412:	7b1b      	ldrb	r3, [r3, #12]
1000d414:	b2db      	uxtb	r3, r3
1000d416:	001a      	movs	r2, r3
1000d418:	2320      	movs	r3, #32
1000d41a:	4013      	ands	r3, r2
1000d41c:	d041      	beq.n	1000d4a2 <spi_rx1_isr_handler+0xc6>
			if (module->dir != SPI_DIRECTION_WRITE) {
1000d41e:	68fb      	ldr	r3, [r7, #12]
1000d420:	79db      	ldrb	r3, [r3, #7]
1000d422:	b2db      	uxtb	r3, r3
1000d424:	2b01      	cmp	r3, #1
1000d426:	d035      	beq.n	1000d494 <spi_rx1_isr_handler+0xb8>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
1000d428:	68fb      	ldr	r3, [r7, #12]
1000d42a:	2228      	movs	r2, #40	; 0x28
1000d42c:	211e      	movs	r1, #30
1000d42e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
1000d430:	68fb      	ldr	r3, [r7, #12]
1000d432:	2203      	movs	r2, #3
1000d434:	71da      	strb	r2, [r3, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
1000d436:	68fb      	ldr	r3, [r7, #12]
1000d438:	681a      	ldr	r2, [r3, #0]
1000d43a:	68fb      	ldr	r3, [r7, #12]
1000d43c:	681b      	ldr	r3, [r3, #0]
1000d43e:	2130      	movs	r1, #48	; 0x30
1000d440:	5c5b      	ldrb	r3, [r3, r1]
1000d442:	b2db      	uxtb	r3, r3
1000d444:	2121      	movs	r1, #33	; 0x21
1000d446:	438b      	bics	r3, r1
1000d448:	b2d9      	uxtb	r1, r3
1000d44a:	2330      	movs	r3, #48	; 0x30
1000d44c:	54d1      	strb	r1, [r2, r3]
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000d44e:	68fb      	ldr	r3, [r7, #12]
1000d450:	2227      	movs	r2, #39	; 0x27
1000d452:	5c9b      	ldrb	r3, [r3, r2]
1000d454:	001a      	movs	r2, r3
1000d456:	2308      	movs	r3, #8
1000d458:	4013      	ands	r3, r2
1000d45a:	d01b      	beq.n	1000d494 <spi_rx1_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
1000d45c:	68fb      	ldr	r3, [r7, #12]
1000d45e:	2226      	movs	r2, #38	; 0x26
1000d460:	5c9b      	ldrb	r3, [r3, r2]
1000d462:	001a      	movs	r2, r3
1000d464:	2308      	movs	r3, #8
1000d466:	4013      	ands	r3, r2

				module->hw->RX_INTERRUPT_MASK.reg &=
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000d468:	d014      	beq.n	1000d494 <spi_rx1_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
1000d46a:	68fb      	ldr	r3, [r7, #12]
1000d46c:	2228      	movs	r2, #40	; 0x28
1000d46e:	211e      	movs	r1, #30
1000d470:	5499      	strb	r1, [r3, r2]
					module->hw->RX_INTERRUPT_MASK.reg &=
1000d472:	68fb      	ldr	r3, [r7, #12]
1000d474:	681a      	ldr	r2, [r3, #0]
1000d476:	68fb      	ldr	r3, [r7, #12]
1000d478:	681b      	ldr	r3, [r3, #0]
1000d47a:	2130      	movs	r1, #48	; 0x30
1000d47c:	5c5b      	ldrb	r3, [r3, r1]
1000d47e:	b2db      	uxtb	r3, r3
1000d480:	2120      	movs	r1, #32
1000d482:	438b      	bics	r3, r1
1000d484:	b2d9      	uxtb	r1, r3
1000d486:	2330      	movs	r3, #48	; 0x30
1000d488:	54d1      	strb	r1, [r2, r3]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
1000d48a:	68fb      	ldr	r3, [r7, #12]
1000d48c:	695b      	ldr	r3, [r3, #20]
1000d48e:	68fa      	ldr	r2, [r7, #12]
1000d490:	0010      	movs	r0, r2
1000d492:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
1000d494:	68fb      	ldr	r3, [r7, #12]
1000d496:	681b      	ldr	r3, [r3, #0]
1000d498:	791b      	ldrb	r3, [r3, #4]
1000d49a:	b2da      	uxtb	r2, r3
1000d49c:	1dbb      	adds	r3, r7, #6
1000d49e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000d4a0:	e087      	b.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
1000d4a2:	68fb      	ldr	r3, [r7, #12]
1000d4a4:	79db      	ldrb	r3, [r3, #7]
1000d4a6:	b2db      	uxtb	r3, r3
1000d4a8:	2b01      	cmp	r3, #1
1000d4aa:	d11d      	bne.n	1000d4e8 <spi_rx1_isr_handler+0x10c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
1000d4ac:	68fb      	ldr	r3, [r7, #12]
1000d4ae:	0018      	movs	r0, r3
1000d4b0:	4b43      	ldr	r3, [pc, #268]	; (1000d5c0 <spi_rx1_isr_handler+0x1e4>)
1000d4b2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
1000d4b4:	68fb      	ldr	r3, [r7, #12]
1000d4b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000d4b8:	b29b      	uxth	r3, r3
1000d4ba:	2b00      	cmp	r3, #0
1000d4bc:	d000      	beq.n	1000d4c0 <spi_rx1_isr_handler+0xe4>
1000d4be:	e078      	b.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
					module->hw->RX_INTERRUPT_MASK.reg &=
1000d4c0:	68fb      	ldr	r3, [r7, #12]
1000d4c2:	681a      	ldr	r2, [r3, #0]
1000d4c4:	68fb      	ldr	r3, [r7, #12]
1000d4c6:	681b      	ldr	r3, [r3, #0]
1000d4c8:	2130      	movs	r1, #48	; 0x30
1000d4ca:	5c5b      	ldrb	r3, [r3, r1]
1000d4cc:	b2db      	uxtb	r3, r3
1000d4ce:	2120      	movs	r1, #32
1000d4d0:	438b      	bics	r3, r1
1000d4d2:	b2d9      	uxtb	r1, r3
1000d4d4:	2330      	movs	r3, #48	; 0x30
1000d4d6:	54d1      	strb	r1, [r2, r3]
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
1000d4d8:	68fb      	ldr	r3, [r7, #12]
1000d4da:	2228      	movs	r2, #40	; 0x28
1000d4dc:	2100      	movs	r1, #0
1000d4de:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
1000d4e0:	68fb      	ldr	r3, [r7, #12]
1000d4e2:	2203      	movs	r2, #3
1000d4e4:	71da      	strb	r2, [r3, #7]
					}
				}
			}
		}
	}
}
1000d4e6:	e064      	b.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
					module->dir = SPI_DIRECTION_IDLE;
				}
			} else {
				_spi_read(module);
1000d4e8:	68fb      	ldr	r3, [r7, #12]
1000d4ea:	0018      	movs	r0, r3
1000d4ec:	4b35      	ldr	r3, [pc, #212]	; (1000d5c4 <spi_rx1_isr_handler+0x1e8>)
1000d4ee:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
1000d4f0:	68fb      	ldr	r3, [r7, #12]
1000d4f2:	8c1b      	ldrh	r3, [r3, #32]
1000d4f4:	b29b      	uxth	r3, r3
1000d4f6:	2b00      	cmp	r3, #0
1000d4f8:	d15b      	bne.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
					if(module->dir == SPI_DIRECTION_READ) {
1000d4fa:	68fb      	ldr	r3, [r7, #12]
1000d4fc:	79db      	ldrb	r3, [r3, #7]
1000d4fe:	b2db      	uxtb	r3, r3
1000d500:	2b00      	cmp	r3, #0
1000d502:	d123      	bne.n	1000d54c <spi_rx1_isr_handler+0x170>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000d504:	68fb      	ldr	r3, [r7, #12]
1000d506:	2227      	movs	r2, #39	; 0x27
1000d508:	5c9b      	ldrb	r3, [r3, r2]
1000d50a:	001a      	movs	r2, r3
1000d50c:	2302      	movs	r3, #2
1000d50e:	4013      	ands	r3, r2
1000d510:	d04f      	beq.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
1000d512:	68fb      	ldr	r3, [r7, #12]
1000d514:	2226      	movs	r2, #38	; 0x26
1000d516:	5c9b      	ldrb	r3, [r3, r2]
1000d518:	001a      	movs	r2, r3
1000d51a:	2302      	movs	r3, #2
1000d51c:	4013      	ands	r3, r2
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000d51e:	d048      	beq.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
1000d520:	68fb      	ldr	r3, [r7, #12]
1000d522:	2228      	movs	r2, #40	; 0x28
1000d524:	2100      	movs	r1, #0
1000d526:	5499      	strb	r1, [r3, r2]
							module->hw->RX_INTERRUPT_MASK.reg &=
1000d528:	68fb      	ldr	r3, [r7, #12]
1000d52a:	681a      	ldr	r2, [r3, #0]
1000d52c:	68fb      	ldr	r3, [r7, #12]
1000d52e:	681b      	ldr	r3, [r3, #0]
1000d530:	2130      	movs	r1, #48	; 0x30
1000d532:	5c5b      	ldrb	r3, [r3, r1]
1000d534:	b2db      	uxtb	r3, r3
1000d536:	2101      	movs	r1, #1
1000d538:	438b      	bics	r3, r1
1000d53a:	b2d9      	uxtb	r1, r3
1000d53c:	2330      	movs	r3, #48	; 0x30
1000d53e:	54d1      	strb	r1, [r2, r3]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
1000d540:	68fb      	ldr	r3, [r7, #12]
1000d542:	68db      	ldr	r3, [r3, #12]
1000d544:	68fa      	ldr	r2, [r7, #12]
1000d546:	0010      	movs	r0, r2
1000d548:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000d54a:	e032      	b.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							module->status = STATUS_OK;
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
1000d54c:	68fb      	ldr	r3, [r7, #12]
1000d54e:	79db      	ldrb	r3, [r3, #7]
1000d550:	b2db      	uxtb	r3, r3
1000d552:	2b02      	cmp	r3, #2
1000d554:	d12d      	bne.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d556:	68fb      	ldr	r3, [r7, #12]
1000d558:	2227      	movs	r2, #39	; 0x27
1000d55a:	5c9b      	ldrb	r3, [r3, r2]
1000d55c:	001a      	movs	r2, r3
1000d55e:	2304      	movs	r3, #4
1000d560:	4013      	ands	r3, r2
1000d562:	d026      	beq.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000d564:	68fb      	ldr	r3, [r7, #12]
1000d566:	2226      	movs	r2, #38	; 0x26
1000d568:	5c9b      	ldrb	r3, [r3, r2]
1000d56a:	001a      	movs	r2, r3
1000d56c:	2304      	movs	r3, #4
1000d56e:	4013      	ands	r3, r2
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d570:	d01f      	beq.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
							module->hw->RX_INTERRUPT_MASK.reg &=
1000d572:	68fb      	ldr	r3, [r7, #12]
1000d574:	681a      	ldr	r2, [r3, #0]
1000d576:	68fb      	ldr	r3, [r7, #12]
1000d578:	681b      	ldr	r3, [r3, #0]
1000d57a:	2130      	movs	r1, #48	; 0x30
1000d57c:	5c5b      	ldrb	r3, [r3, r1]
1000d57e:	b2db      	uxtb	r3, r3
1000d580:	2101      	movs	r1, #1
1000d582:	438b      	bics	r3, r1
1000d584:	b2d9      	uxtb	r1, r3
1000d586:	2330      	movs	r3, #48	; 0x30
1000d588:	54d1      	strb	r1, [r2, r3]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							if (flag_direction_both[1]) {
1000d58a:	4b0f      	ldr	r3, [pc, #60]	; (1000d5c8 <spi_rx1_isr_handler+0x1ec>)
1000d58c:	785b      	ldrb	r3, [r3, #1]
1000d58e:	2b00      	cmp	r3, #0
1000d590:	d00c      	beq.n	1000d5ac <spi_rx1_isr_handler+0x1d0>
								module->status = STATUS_OK;
1000d592:	68fb      	ldr	r3, [r7, #12]
1000d594:	2228      	movs	r2, #40	; 0x28
1000d596:	2100      	movs	r1, #0
1000d598:	5499      	strb	r1, [r3, r2]
								flag_direction_both[1] = false;
1000d59a:	4b0b      	ldr	r3, [pc, #44]	; (1000d5c8 <spi_rx1_isr_handler+0x1ec>)
1000d59c:	2200      	movs	r2, #0
1000d59e:	705a      	strb	r2, [r3, #1]
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000d5a0:	68fb      	ldr	r3, [r7, #12]
1000d5a2:	691b      	ldr	r3, [r3, #16]
1000d5a4:	68fa      	ldr	r2, [r7, #12]
1000d5a6:	0010      	movs	r0, r2
1000d5a8:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000d5aa:	e002      	b.n	1000d5b2 <spi_rx1_isr_handler+0x1d6>
							if (flag_direction_both[1]) {
								module->status = STATUS_OK;
								flag_direction_both[1] = false;
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
							} else {
								flag_direction_both[1] = true;
1000d5ac:	4b06      	ldr	r3, [pc, #24]	; (1000d5c8 <spi_rx1_isr_handler+0x1ec>)
1000d5ae:	2201      	movs	r2, #1
1000d5b0:	705a      	strb	r2, [r3, #1]
					}
				}
			}
		}
	}
}
1000d5b2:	46c0      	nop			; (mov r8, r8)
1000d5b4:	46bd      	mov	sp, r7
1000d5b6:	b004      	add	sp, #16
1000d5b8:	bd80      	pop	{r7, pc}
1000d5ba:	46c0      	nop			; (mov r8, r8)
1000d5bc:	1001a558 	.word	0x1001a558
1000d5c0:	1000d01d 	.word	0x1000d01d
1000d5c4:	1000cfa1 	.word	0x1000cfa1
1000d5c8:	10019b64 	.word	0x10019b64

1000d5cc <spi_tx1_isr_handler>:

void spi_tx1_isr_handler(void)
{
1000d5cc:	b580      	push	{r7, lr}
1000d5ce:	b082      	sub	sp, #8
1000d5d0:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[1];
1000d5d2:	4b60      	ldr	r3, [pc, #384]	; (1000d754 <spi_tx1_isr_handler+0x188>)
1000d5d4:	685b      	ldr	r3, [r3, #4]
1000d5d6:	607b      	str	r3, [r7, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d5d8:	687b      	ldr	r3, [r7, #4]
1000d5da:	681b      	ldr	r3, [r3, #0]
1000d5dc:	7a1b      	ldrb	r3, [r3, #8]
1000d5de:	b2db      	uxtb	r3, r3
1000d5e0:	603b      	str	r3, [r7, #0]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
1000d5e2:	687b      	ldr	r3, [r7, #4]
1000d5e4:	681b      	ldr	r3, [r3, #0]
1000d5e6:	222c      	movs	r2, #44	; 0x2c
1000d5e8:	5c9b      	ldrb	r3, [r3, r2]
1000d5ea:	b2db      	uxtb	r3, r3
1000d5ec:	001a      	movs	r2, r3
1000d5ee:	683b      	ldr	r3, [r7, #0]
1000d5f0:	4013      	ands	r3, r2
1000d5f2:	603b      	str	r3, [r7, #0]

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
1000d5f4:	683b      	ldr	r3, [r7, #0]
1000d5f6:	2201      	movs	r2, #1
1000d5f8:	4013      	ands	r3, r2
1000d5fa:	d047      	beq.n	1000d68c <spi_tx1_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000d5fc:	687b      	ldr	r3, [r7, #4]
1000d5fe:	795b      	ldrb	r3, [r3, #5]
1000d600:	2b01      	cmp	r3, #1
1000d602:	d119      	bne.n	1000d638 <spi_tx1_isr_handler+0x6c>
		(module->dir == SPI_DIRECTION_READ)) {
1000d604:	687b      	ldr	r3, [r7, #4]
1000d606:	79db      	ldrb	r3, [r3, #7]
1000d608:	b2db      	uxtb	r3, r3
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000d60a:	2b00      	cmp	r3, #0
1000d60c:	d114      	bne.n	1000d638 <spi_tx1_isr_handler+0x6c>
		(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
1000d60e:	687b      	ldr	r3, [r7, #4]
1000d610:	0018      	movs	r0, r3
1000d612:	4b51      	ldr	r3, [pc, #324]	; (1000d758 <spi_tx1_isr_handler+0x18c>)
1000d614:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
1000d616:	687b      	ldr	r3, [r7, #4]
1000d618:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000d61a:	b29b      	uxth	r3, r3
1000d61c:	2b00      	cmp	r3, #0
1000d61e:	d10b      	bne.n	1000d638 <spi_tx1_isr_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000d620:	687b      	ldr	r3, [r7, #4]
1000d622:	681a      	ldr	r2, [r3, #0]
1000d624:	687b      	ldr	r3, [r7, #4]
1000d626:	681b      	ldr	r3, [r3, #0]
1000d628:	212c      	movs	r1, #44	; 0x2c
1000d62a:	5c5b      	ldrb	r3, [r3, r1]
1000d62c:	b2db      	uxtb	r3, r3
1000d62e:	2101      	movs	r1, #1
1000d630:	438b      	bics	r3, r1
1000d632:	b2d9      	uxtb	r1, r3
1000d634:	232c      	movs	r3, #44	; 0x2c
1000d636:	54d1      	strb	r1, [r2, r3]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000d638:	687b      	ldr	r3, [r7, #4]
1000d63a:	795b      	ldrb	r3, [r3, #5]
				module->hw->TX_INTERRUPT_MASK.reg &=
				~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
1000d63c:	2b01      	cmp	r3, #1
1000d63e:	d125      	bne.n	1000d68c <spi_tx1_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
1000d640:	687b      	ldr	r3, [r7, #4]
1000d642:	79db      	ldrb	r3, [r3, #7]
1000d644:	b2db      	uxtb	r3, r3
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000d646:	2b00      	cmp	r3, #0
1000d648:	d020      	beq.n	1000d68c <spi_tx1_isr_handler+0xc0>
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
1000d64a:	687b      	ldr	r3, [r7, #4]
1000d64c:	0018      	movs	r0, r3
1000d64e:	4b43      	ldr	r3, [pc, #268]	; (1000d75c <spi_tx1_isr_handler+0x190>)
1000d650:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
1000d652:	687b      	ldr	r3, [r7, #4]
1000d654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000d656:	b29b      	uxth	r3, r3
1000d658:	2b00      	cmp	r3, #0
1000d65a:	d117      	bne.n	1000d68c <spi_tx1_isr_handler+0xc0>
				module->hw->TX_INTERRUPT_MASK.reg &=
1000d65c:	687b      	ldr	r3, [r7, #4]
1000d65e:	681a      	ldr	r2, [r3, #0]
1000d660:	687b      	ldr	r3, [r7, #4]
1000d662:	681b      	ldr	r3, [r3, #0]
1000d664:	212c      	movs	r1, #44	; 0x2c
1000d666:	5c5b      	ldrb	r3, [r3, r1]
1000d668:	b2db      	uxtb	r3, r3
1000d66a:	2101      	movs	r1, #1
1000d66c:	438b      	bics	r3, r1
1000d66e:	b2d9      	uxtb	r1, r3
1000d670:	232c      	movs	r3, #44	; 0x2c
1000d672:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
1000d674:	687b      	ldr	r3, [r7, #4]
1000d676:	681a      	ldr	r2, [r3, #0]
1000d678:	687b      	ldr	r3, [r7, #4]
1000d67a:	681b      	ldr	r3, [r3, #0]
1000d67c:	212c      	movs	r1, #44	; 0x2c
1000d67e:	5c5b      	ldrb	r3, [r3, r1]
1000d680:	b2db      	uxtb	r3, r3
1000d682:	2110      	movs	r1, #16
1000d684:	430b      	orrs	r3, r1
1000d686:	b2d9      	uxtb	r1, r3
1000d688:	232c      	movs	r3, #44	; 0x2c
1000d68a:	54d1      	strb	r1, [r2, r3]
				SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d68c:	683b      	ldr	r3, [r7, #0]
1000d68e:	2210      	movs	r2, #16
1000d690:	4013      	ands	r3, r2
1000d692:	d05b      	beq.n	1000d74c <spi_tx1_isr_handler+0x180>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000d694:	687b      	ldr	r3, [r7, #4]
1000d696:	79db      	ldrb	r3, [r3, #7]
1000d698:	b2db      	uxtb	r3, r3
1000d69a:	2b01      	cmp	r3, #1
1000d69c:	d123      	bne.n	1000d6e6 <spi_tx1_isr_handler+0x11a>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000d69e:	687b      	ldr	r3, [r7, #4]
1000d6a0:	2227      	movs	r2, #39	; 0x27
1000d6a2:	5c9b      	ldrb	r3, [r3, r2]
1000d6a4:	001a      	movs	r2, r3
1000d6a6:	2301      	movs	r3, #1
1000d6a8:	4013      	ands	r3, r2
1000d6aa:	d04f      	beq.n	1000d74c <spi_tx1_isr_handler+0x180>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
1000d6ac:	687b      	ldr	r3, [r7, #4]
1000d6ae:	2226      	movs	r2, #38	; 0x26
1000d6b0:	5c9b      	ldrb	r3, [r3, r2]
1000d6b2:	001a      	movs	r2, r3
1000d6b4:	2301      	movs	r3, #1
1000d6b6:	4013      	ands	r3, r2
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000d6b8:	d048      	beq.n	1000d74c <spi_tx1_isr_handler+0x180>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
				module->status = STATUS_OK;
1000d6ba:	687b      	ldr	r3, [r7, #4]
1000d6bc:	2228      	movs	r2, #40	; 0x28
1000d6be:	2100      	movs	r1, #0
1000d6c0:	5499      	strb	r1, [r3, r2]
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000d6c2:	687b      	ldr	r3, [r7, #4]
1000d6c4:	681a      	ldr	r2, [r3, #0]
1000d6c6:	687b      	ldr	r3, [r7, #4]
1000d6c8:	681b      	ldr	r3, [r3, #0]
1000d6ca:	212c      	movs	r1, #44	; 0x2c
1000d6cc:	5c5b      	ldrb	r3, [r3, r1]
1000d6ce:	b2db      	uxtb	r3, r3
1000d6d0:	2110      	movs	r1, #16
1000d6d2:	438b      	bics	r3, r1
1000d6d4:	b2d9      	uxtb	r1, r3
1000d6d6:	232c      	movs	r3, #44	; 0x2c
1000d6d8:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
1000d6da:	687b      	ldr	r3, [r7, #4]
1000d6dc:	689b      	ldr	r3, [r3, #8]
1000d6de:	687a      	ldr	r2, [r7, #4]
1000d6e0:	0010      	movs	r0, r2
1000d6e2:	4798      	blx	r3
					flag_direction_both[1] = true;
				}
			}
		}
	}
}
1000d6e4:	e032      	b.n	1000d74c <spi_tx1_isr_handler+0x180>
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
1000d6e6:	687b      	ldr	r3, [r7, #4]
1000d6e8:	79db      	ldrb	r3, [r3, #7]
1000d6ea:	b2db      	uxtb	r3, r3
1000d6ec:	2b02      	cmp	r3, #2
1000d6ee:	d12d      	bne.n	1000d74c <spi_tx1_isr_handler+0x180>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d6f0:	687b      	ldr	r3, [r7, #4]
1000d6f2:	2227      	movs	r2, #39	; 0x27
1000d6f4:	5c9b      	ldrb	r3, [r3, r2]
1000d6f6:	001a      	movs	r2, r3
1000d6f8:	2304      	movs	r3, #4
1000d6fa:	4013      	ands	r3, r2
1000d6fc:	d026      	beq.n	1000d74c <spi_tx1_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000d6fe:	687b      	ldr	r3, [r7, #4]
1000d700:	2226      	movs	r2, #38	; 0x26
1000d702:	5c9b      	ldrb	r3, [r3, r2]
1000d704:	001a      	movs	r2, r3
1000d706:	2304      	movs	r3, #4
1000d708:	4013      	ands	r3, r2
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000d70a:	d01f      	beq.n	1000d74c <spi_tx1_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000d70c:	687b      	ldr	r3, [r7, #4]
1000d70e:	681a      	ldr	r2, [r3, #0]
1000d710:	687b      	ldr	r3, [r7, #4]
1000d712:	681b      	ldr	r3, [r3, #0]
1000d714:	212c      	movs	r1, #44	; 0x2c
1000d716:	5c5b      	ldrb	r3, [r3, r1]
1000d718:	b2db      	uxtb	r3, r3
1000d71a:	2110      	movs	r1, #16
1000d71c:	438b      	bics	r3, r1
1000d71e:	b2d9      	uxtb	r1, r3
1000d720:	232c      	movs	r3, #44	; 0x2c
1000d722:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				if (flag_direction_both[1]) {
1000d724:	4b0e      	ldr	r3, [pc, #56]	; (1000d760 <spi_tx1_isr_handler+0x194>)
1000d726:	785b      	ldrb	r3, [r3, #1]
1000d728:	2b00      	cmp	r3, #0
1000d72a:	d00c      	beq.n	1000d746 <spi_tx1_isr_handler+0x17a>
					module->status = STATUS_OK;
1000d72c:	687b      	ldr	r3, [r7, #4]
1000d72e:	2228      	movs	r2, #40	; 0x28
1000d730:	2100      	movs	r1, #0
1000d732:	5499      	strb	r1, [r3, r2]
					flag_direction_both[1] = false;
1000d734:	4b0a      	ldr	r3, [pc, #40]	; (1000d760 <spi_tx1_isr_handler+0x194>)
1000d736:	2200      	movs	r2, #0
1000d738:	705a      	strb	r2, [r3, #1]
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000d73a:	687b      	ldr	r3, [r7, #4]
1000d73c:	691b      	ldr	r3, [r3, #16]
1000d73e:	687a      	ldr	r2, [r7, #4]
1000d740:	0010      	movs	r0, r2
1000d742:	4798      	blx	r3
					flag_direction_both[1] = true;
				}
			}
		}
	}
}
1000d744:	e002      	b.n	1000d74c <spi_tx1_isr_handler+0x180>
				if (flag_direction_both[1]) {
					module->status = STATUS_OK;
					flag_direction_both[1] = false;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
				} else {
					flag_direction_both[1] = true;
1000d746:	4b06      	ldr	r3, [pc, #24]	; (1000d760 <spi_tx1_isr_handler+0x194>)
1000d748:	2201      	movs	r2, #1
1000d74a:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}
}
1000d74c:	46c0      	nop			; (mov r8, r8)
1000d74e:	46bd      	mov	sp, r7
1000d750:	b002      	add	sp, #8
1000d752:	bd80      	pop	{r7, pc}
1000d754:	1001a558 	.word	0x1001a558
1000d758:	1000cfe9 	.word	0x1000cfe9
1000d75c:	1000cf59 	.word	0x1000cf59
1000d760:	10019b64 	.word	0x10019b64

1000d764 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
1000d764:	b580      	push	{r7, lr}
1000d766:	b084      	sub	sp, #16
1000d768:	af00      	add	r7, sp, #0
1000d76a:	60f8      	str	r0, [r7, #12]
1000d76c:	60b9      	str	r1, [r7, #8]
1000d76e:	1dfb      	adds	r3, r7, #7
1000d770:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d772:	1dfb      	adds	r3, r7, #7
1000d774:	781a      	ldrb	r2, [r3, #0]
1000d776:	68fb      	ldr	r3, [r7, #12]
1000d778:	3202      	adds	r2, #2
1000d77a:	0092      	lsls	r2, r2, #2
1000d77c:	68b9      	ldr	r1, [r7, #8]
1000d77e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
1000d780:	68fb      	ldr	r3, [r7, #12]
1000d782:	2226      	movs	r2, #38	; 0x26
1000d784:	5c9b      	ldrb	r3, [r3, r2]
1000d786:	b25a      	sxtb	r2, r3
1000d788:	1dfb      	adds	r3, r7, #7
1000d78a:	781b      	ldrb	r3, [r3, #0]
1000d78c:	2101      	movs	r1, #1
1000d78e:	4099      	lsls	r1, r3
1000d790:	000b      	movs	r3, r1
1000d792:	b25b      	sxtb	r3, r3
1000d794:	4313      	orrs	r3, r2
1000d796:	b25b      	sxtb	r3, r3
1000d798:	b2d9      	uxtb	r1, r3
1000d79a:	68fb      	ldr	r3, [r7, #12]
1000d79c:	2226      	movs	r2, #38	; 0x26
1000d79e:	5499      	strb	r1, [r3, r2]
}
1000d7a0:	46c0      	nop			; (mov r8, r8)
1000d7a2:	46bd      	mov	sp, r7
1000d7a4:	b004      	add	sp, #16
1000d7a6:	bd80      	pop	{r7, pc}

1000d7a8 <spi_enable_callback>:
 * \param[in]  module         Pointer to SPI software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void spi_enable_callback(struct spi_module *const module,
		enum spi_callback callback_type)
{
1000d7a8:	b580      	push	{r7, lr}
1000d7aa:	b082      	sub	sp, #8
1000d7ac:	af00      	add	r7, sp, #0
1000d7ae:	6078      	str	r0, [r7, #4]
1000d7b0:	000a      	movs	r2, r1
1000d7b2:	1cfb      	adds	r3, r7, #3
1000d7b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
1000d7b6:	687b      	ldr	r3, [r7, #4]
1000d7b8:	2227      	movs	r2, #39	; 0x27
1000d7ba:	5c9b      	ldrb	r3, [r3, r2]
1000d7bc:	b25a      	sxtb	r2, r3
1000d7be:	1cfb      	adds	r3, r7, #3
1000d7c0:	781b      	ldrb	r3, [r3, #0]
1000d7c2:	2101      	movs	r1, #1
1000d7c4:	4099      	lsls	r1, r3
1000d7c6:	000b      	movs	r3, r1
1000d7c8:	b25b      	sxtb	r3, r3
1000d7ca:	4313      	orrs	r3, r2
1000d7cc:	b25b      	sxtb	r3, r3
1000d7ce:	b2d9      	uxtb	r1, r3
1000d7d0:	687b      	ldr	r3, [r7, #4]
1000d7d2:	2227      	movs	r2, #39	; 0x27
1000d7d4:	5499      	strb	r1, [r3, r2]
}
1000d7d6:	46c0      	nop			; (mov r8, r8)
1000d7d8:	46bd      	mov	sp, r7
1000d7da:	b002      	add	sp, #8
1000d7dc:	bd80      	pop	{r7, pc}
1000d7de:	46c0      	nop			; (mov r8, r8)

1000d7e0 <system_clock_config>:
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
1000d7e0:	b580      	push	{r7, lr}
1000d7e2:	b082      	sub	sp, #8
1000d7e4:	af00      	add	r7, sp, #0
1000d7e6:	0002      	movs	r2, r0
1000d7e8:	1dfb      	adds	r3, r7, #7
1000d7ea:	701a      	strb	r2, [r3, #0]
1000d7ec:	1dbb      	adds	r3, r7, #6
1000d7ee:	1c0a      	adds	r2, r1, #0
1000d7f0:	701a      	strb	r2, [r3, #0]
	switch (resoure) {
1000d7f2:	1dfb      	adds	r3, r7, #7
1000d7f4:	781b      	ldrb	r3, [r3, #0]
1000d7f6:	2b01      	cmp	r3, #1
1000d7f8:	d00d      	beq.n	1000d816 <system_clock_config+0x36>
1000d7fa:	2b02      	cmp	r3, #2
1000d7fc:	d022      	beq.n	1000d844 <system_clock_config+0x64>
1000d7fe:	2b00      	cmp	r3, #0
1000d800:	d12a      	bne.n	1000d858 <system_clock_config+0x78>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000d802:	4b20      	ldr	r3, [pc, #128]	; (1000d884 <system_clock_config+0xa4>)
1000d804:	4a1f      	ldr	r2, [pc, #124]	; (1000d884 <system_clock_config+0xa4>)
1000d806:	6992      	ldr	r2, [r2, #24]
1000d808:	210c      	movs	r1, #12
1000d80a:	430a      	orrs	r2, r1
1000d80c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000d80e:	4b1e      	ldr	r3, [pc, #120]	; (1000d888 <system_clock_config+0xa8>)
1000d810:	4a1e      	ldr	r2, [pc, #120]	; (1000d88c <system_clock_config+0xac>)
1000d812:	601a      	str	r2, [r3, #0]
			break;
1000d814:	e022      	b.n	1000d85c <system_clock_config+0x7c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000d816:	4b1b      	ldr	r3, [pc, #108]	; (1000d884 <system_clock_config+0xa4>)
1000d818:	4a1a      	ldr	r2, [pc, #104]	; (1000d884 <system_clock_config+0xa4>)
1000d81a:	6992      	ldr	r2, [r2, #24]
1000d81c:	2108      	movs	r1, #8
1000d81e:	430a      	orrs	r2, r1
1000d820:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000d822:	4b18      	ldr	r3, [pc, #96]	; (1000d884 <system_clock_config+0xa4>)
1000d824:	4a17      	ldr	r2, [pc, #92]	; (1000d884 <system_clock_config+0xa4>)
1000d826:	6992      	ldr	r2, [r2, #24]
1000d828:	2104      	movs	r1, #4
1000d82a:	438a      	bics	r2, r1
1000d82c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d82e:	4b18      	ldr	r3, [pc, #96]	; (1000d890 <system_clock_config+0xb0>)
1000d830:	4a17      	ldr	r2, [pc, #92]	; (1000d890 <system_clock_config+0xb0>)
1000d832:	6852      	ldr	r2, [r2, #4]
1000d834:	2180      	movs	r1, #128	; 0x80
1000d836:	0309      	lsls	r1, r1, #12
1000d838:	430a      	orrs	r2, r1
1000d83a:	605a      	str	r2, [r3, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000d83c:	4b12      	ldr	r3, [pc, #72]	; (1000d888 <system_clock_config+0xa8>)
1000d83e:	4a15      	ldr	r2, [pc, #84]	; (1000d894 <system_clock_config+0xb4>)
1000d840:	601a      	str	r2, [r3, #0]
			break;
1000d842:	e00b      	b.n	1000d85c <system_clock_config+0x7c>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000d844:	4b0f      	ldr	r3, [pc, #60]	; (1000d884 <system_clock_config+0xa4>)
1000d846:	4a0f      	ldr	r2, [pc, #60]	; (1000d884 <system_clock_config+0xa4>)
1000d848:	6992      	ldr	r2, [r2, #24]
1000d84a:	210c      	movs	r1, #12
1000d84c:	438a      	bics	r2, r1
1000d84e:	619a      	str	r2, [r3, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000d850:	4b0d      	ldr	r3, [pc, #52]	; (1000d888 <system_clock_config+0xa8>)
1000d852:	4a0e      	ldr	r2, [pc, #56]	; (1000d88c <system_clock_config+0xac>)
1000d854:	601a      	str	r2, [r3, #0]
			break;
1000d856:	e001      	b.n	1000d85c <system_clock_config+0x7c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d858:	2317      	movs	r3, #23
1000d85a:	e00f      	b.n	1000d87c <system_clock_config+0x9c>
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000d85c:	4b09      	ldr	r3, [pc, #36]	; (1000d884 <system_clock_config+0xa4>)
1000d85e:	4a09      	ldr	r2, [pc, #36]	; (1000d884 <system_clock_config+0xa4>)
1000d860:	6992      	ldr	r2, [r2, #24]
1000d862:	2103      	movs	r1, #3
1000d864:	438a      	bics	r2, r1
1000d866:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000d868:	4b06      	ldr	r3, [pc, #24]	; (1000d884 <system_clock_config+0xa4>)
1000d86a:	4a06      	ldr	r2, [pc, #24]	; (1000d884 <system_clock_config+0xa4>)
1000d86c:	6991      	ldr	r1, [r2, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);
1000d86e:	1dba      	adds	r2, r7, #6
1000d870:	7812      	ldrb	r2, [r2, #0]
1000d872:	2003      	movs	r0, #3
1000d874:	4002      	ands	r2, r0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000d876:	430a      	orrs	r2, r1
1000d878:	619a      	str	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d87a:	2300      	movs	r3, #0
}
1000d87c:	0018      	movs	r0, r3
1000d87e:	46bd      	mov	sp, r7
1000d880:	b002      	add	sp, #8
1000d882:	bd80      	pop	{r7, pc}
1000d884:	4000b000 	.word	0x4000b000
1000d888:	1001a560 	.word	0x1001a560
1000d88c:	018cba80 	.word	0x018cba80
1000d890:	4000f000 	.word	0x4000f000
1000d894:	001e8480 	.word	0x001e8480

1000d898 <system_clock_get_value>:
 * Use this function to get system clock value.
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
1000d898:	b580      	push	{r7, lr}
1000d89a:	af00      	add	r7, sp, #0
	return system_clock_value;
1000d89c:	4b02      	ldr	r3, [pc, #8]	; (1000d8a8 <system_clock_get_value+0x10>)
1000d89e:	681b      	ldr	r3, [r3, #0]
}
1000d8a0:	0018      	movs	r0, r3
1000d8a2:	46bd      	mov	sp, r7
1000d8a4:	bd80      	pop	{r7, pc}
1000d8a6:	46c0      	nop			; (mov r8, r8)
1000d8a8:	1001a560 	.word	0x1001a560

1000d8ac <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000d8ac:	b580      	push	{r7, lr}
1000d8ae:	b082      	sub	sp, #8
1000d8b0:	af00      	add	r7, sp, #0
1000d8b2:	0002      	movs	r2, r0
1000d8b4:	1dfb      	adds	r3, r7, #7
1000d8b6:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000d8b8:	1dfb      	adds	r3, r7, #7
1000d8ba:	781b      	ldrb	r3, [r3, #0]
1000d8bc:	2b35      	cmp	r3, #53	; 0x35
1000d8be:	d900      	bls.n	1000d8c2 <system_clock_peripheral_enable+0x16>
1000d8c0:	e1a9      	b.n	1000dc16 <system_clock_peripheral_enable+0x36a>
1000d8c2:	009a      	lsls	r2, r3, #2
1000d8c4:	4bd7      	ldr	r3, [pc, #860]	; (1000dc24 <system_clock_peripheral_enable+0x378>)
1000d8c6:	18d3      	adds	r3, r2, r3
1000d8c8:	681b      	ldr	r3, [r3, #0]
1000d8ca:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8cc:	4bd6      	ldr	r3, [pc, #856]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8ce:	4ad6      	ldr	r2, [pc, #856]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8d0:	68d2      	ldr	r2, [r2, #12]
1000d8d2:	2102      	movs	r1, #2
1000d8d4:	430a      	orrs	r2, r1
1000d8d6:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
1000d8d8:	e19f      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8da:	4bd3      	ldr	r3, [pc, #844]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8dc:	4ad2      	ldr	r2, [pc, #840]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8de:	68d2      	ldr	r2, [r2, #12]
1000d8e0:	2104      	movs	r1, #4
1000d8e2:	430a      	orrs	r2, r1
1000d8e4:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
1000d8e6:	e198      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8e8:	4bcf      	ldr	r3, [pc, #828]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8ea:	4acf      	ldr	r2, [pc, #828]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8ec:	68d2      	ldr	r2, [r2, #12]
1000d8ee:	2108      	movs	r1, #8
1000d8f0:	430a      	orrs	r2, r1
1000d8f2:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
1000d8f4:	e191      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8f6:	4bcc      	ldr	r3, [pc, #816]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8f8:	4acb      	ldr	r2, [pc, #812]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d8fa:	68d2      	ldr	r2, [r2, #12]
1000d8fc:	2110      	movs	r1, #16
1000d8fe:	430a      	orrs	r2, r1
1000d900:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000d902:	e18a      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d904:	4bc8      	ldr	r3, [pc, #800]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d906:	4ac8      	ldr	r2, [pc, #800]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d908:	68d2      	ldr	r2, [r2, #12]
1000d90a:	2120      	movs	r1, #32
1000d90c:	430a      	orrs	r2, r1
1000d90e:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
1000d910:	e183      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d912:	4bc5      	ldr	r3, [pc, #788]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d914:	4ac4      	ldr	r2, [pc, #784]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d916:	68d2      	ldr	r2, [r2, #12]
1000d918:	2180      	movs	r1, #128	; 0x80
1000d91a:	430a      	orrs	r2, r1
1000d91c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000d91e:	e17c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d920:	4bc1      	ldr	r3, [pc, #772]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d922:	4ac1      	ldr	r2, [pc, #772]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d924:	68d2      	ldr	r2, [r2, #12]
1000d926:	2180      	movs	r1, #128	; 0x80
1000d928:	0049      	lsls	r1, r1, #1
1000d92a:	430a      	orrs	r2, r1
1000d92c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000d92e:	e174      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d930:	4bbd      	ldr	r3, [pc, #756]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d932:	4abd      	ldr	r2, [pc, #756]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d934:	68d2      	ldr	r2, [r2, #12]
1000d936:	2180      	movs	r1, #128	; 0x80
1000d938:	0109      	lsls	r1, r1, #4
1000d93a:	430a      	orrs	r2, r1
1000d93c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000d93e:	e16c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d940:	4bb9      	ldr	r3, [pc, #740]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d942:	4ab9      	ldr	r2, [pc, #740]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d944:	68d2      	ldr	r2, [r2, #12]
1000d946:	2180      	movs	r1, #128	; 0x80
1000d948:	0149      	lsls	r1, r1, #5
1000d94a:	430a      	orrs	r2, r1
1000d94c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000d94e:	e164      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d950:	4bb5      	ldr	r3, [pc, #724]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d952:	4ab5      	ldr	r2, [pc, #724]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d954:	68d2      	ldr	r2, [r2, #12]
1000d956:	2180      	movs	r1, #128	; 0x80
1000d958:	0189      	lsls	r1, r1, #6
1000d95a:	430a      	orrs	r2, r1
1000d95c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000d95e:	e15c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d960:	4bb1      	ldr	r3, [pc, #708]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d962:	4ab1      	ldr	r2, [pc, #708]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d964:	68d2      	ldr	r2, [r2, #12]
1000d966:	2180      	movs	r1, #128	; 0x80
1000d968:	01c9      	lsls	r1, r1, #7
1000d96a:	430a      	orrs	r2, r1
1000d96c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000d96e:	e154      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d970:	4bad      	ldr	r3, [pc, #692]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d972:	4aad      	ldr	r2, [pc, #692]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d974:	68d2      	ldr	r2, [r2, #12]
1000d976:	2180      	movs	r1, #128	; 0x80
1000d978:	0209      	lsls	r1, r1, #8
1000d97a:	430a      	orrs	r2, r1
1000d97c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000d97e:	e14c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d980:	4ba9      	ldr	r3, [pc, #676]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d982:	4aa9      	ldr	r2, [pc, #676]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d984:	68d2      	ldr	r2, [r2, #12]
1000d986:	2180      	movs	r1, #128	; 0x80
1000d988:	0249      	lsls	r1, r1, #9
1000d98a:	430a      	orrs	r2, r1
1000d98c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000d98e:	e144      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d990:	4ba5      	ldr	r3, [pc, #660]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d992:	4aa5      	ldr	r2, [pc, #660]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d994:	68d2      	ldr	r2, [r2, #12]
1000d996:	2180      	movs	r1, #128	; 0x80
1000d998:	0289      	lsls	r1, r1, #10
1000d99a:	430a      	orrs	r2, r1
1000d99c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000d99e:	e13c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d9a0:	4ba1      	ldr	r3, [pc, #644]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9a2:	4aa1      	ldr	r2, [pc, #644]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9a4:	68d2      	ldr	r2, [r2, #12]
1000d9a6:	2180      	movs	r1, #128	; 0x80
1000d9a8:	02c9      	lsls	r1, r1, #11
1000d9aa:	430a      	orrs	r2, r1
1000d9ac:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000d9ae:	e134      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d9b0:	4b9d      	ldr	r3, [pc, #628]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9b2:	4a9d      	ldr	r2, [pc, #628]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9b4:	68d2      	ldr	r2, [r2, #12]
1000d9b6:	2180      	movs	r1, #128	; 0x80
1000d9b8:	0309      	lsls	r1, r1, #12
1000d9ba:	430a      	orrs	r2, r1
1000d9bc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000d9be:	e12c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d9c0:	4b99      	ldr	r3, [pc, #612]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9c2:	4a99      	ldr	r2, [pc, #612]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9c4:	68d2      	ldr	r2, [r2, #12]
1000d9c6:	2180      	movs	r1, #128	; 0x80
1000d9c8:	0349      	lsls	r1, r1, #13
1000d9ca:	430a      	orrs	r2, r1
1000d9cc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000d9ce:	e124      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d9d0:	4b95      	ldr	r3, [pc, #596]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9d2:	4a95      	ldr	r2, [pc, #596]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9d4:	68d2      	ldr	r2, [r2, #12]
1000d9d6:	2180      	movs	r1, #128	; 0x80
1000d9d8:	0389      	lsls	r1, r1, #14
1000d9da:	430a      	orrs	r2, r1
1000d9dc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000d9de:	e11c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d9e0:	4b91      	ldr	r3, [pc, #580]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9e2:	4a91      	ldr	r2, [pc, #580]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9e4:	68d2      	ldr	r2, [r2, #12]
1000d9e6:	2180      	movs	r1, #128	; 0x80
1000d9e8:	03c9      	lsls	r1, r1, #15
1000d9ea:	430a      	orrs	r2, r1
1000d9ec:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000d9ee:	e114      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d9f0:	4b8d      	ldr	r3, [pc, #564]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9f2:	4a8d      	ldr	r2, [pc, #564]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000d9f4:	68d2      	ldr	r2, [r2, #12]
1000d9f6:	2180      	movs	r1, #128	; 0x80
1000d9f8:	0409      	lsls	r1, r1, #16
1000d9fa:	430a      	orrs	r2, r1
1000d9fc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000d9fe:	e10c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da00:	4b89      	ldr	r3, [pc, #548]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da02:	4a89      	ldr	r2, [pc, #548]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da04:	68d2      	ldr	r2, [r2, #12]
1000da06:	2180      	movs	r1, #128	; 0x80
1000da08:	0449      	lsls	r1, r1, #17
1000da0a:	430a      	orrs	r2, r1
1000da0c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000da0e:	e104      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da10:	4b85      	ldr	r3, [pc, #532]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da12:	4a85      	ldr	r2, [pc, #532]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da14:	68d2      	ldr	r2, [r2, #12]
1000da16:	2180      	movs	r1, #128	; 0x80
1000da18:	0489      	lsls	r1, r1, #18
1000da1a:	430a      	orrs	r2, r1
1000da1c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000da1e:	e0fc      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da20:	4b81      	ldr	r3, [pc, #516]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da22:	4a81      	ldr	r2, [pc, #516]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da24:	68d2      	ldr	r2, [r2, #12]
1000da26:	2180      	movs	r1, #128	; 0x80
1000da28:	04c9      	lsls	r1, r1, #19
1000da2a:	430a      	orrs	r2, r1
1000da2c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000da2e:	e0f4      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da30:	4b7d      	ldr	r3, [pc, #500]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da32:	4a7d      	ldr	r2, [pc, #500]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da34:	68d2      	ldr	r2, [r2, #12]
1000da36:	2180      	movs	r1, #128	; 0x80
1000da38:	0509      	lsls	r1, r1, #20
1000da3a:	430a      	orrs	r2, r1
1000da3c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000da3e:	e0ec      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da40:	4b79      	ldr	r3, [pc, #484]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da42:	4a79      	ldr	r2, [pc, #484]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da44:	68d2      	ldr	r2, [r2, #12]
1000da46:	2180      	movs	r1, #128	; 0x80
1000da48:	0549      	lsls	r1, r1, #21
1000da4a:	430a      	orrs	r2, r1
1000da4c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000da4e:	e0e4      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da50:	4b75      	ldr	r3, [pc, #468]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da52:	4a75      	ldr	r2, [pc, #468]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da54:	68d2      	ldr	r2, [r2, #12]
1000da56:	2180      	movs	r1, #128	; 0x80
1000da58:	0589      	lsls	r1, r1, #22
1000da5a:	430a      	orrs	r2, r1
1000da5c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000da5e:	e0dc      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da60:	4b71      	ldr	r3, [pc, #452]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da62:	4a71      	ldr	r2, [pc, #452]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da64:	68d2      	ldr	r2, [r2, #12]
1000da66:	2180      	movs	r1, #128	; 0x80
1000da68:	05c9      	lsls	r1, r1, #23
1000da6a:	430a      	orrs	r2, r1
1000da6c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000da6e:	e0d4      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000da70:	4b6d      	ldr	r3, [pc, #436]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da72:	4a6d      	ldr	r2, [pc, #436]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da74:	6912      	ldr	r2, [r2, #16]
1000da76:	2101      	movs	r1, #1
1000da78:	430a      	orrs	r2, r1
1000da7a:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
1000da7c:	e0cd      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000da7e:	4b6a      	ldr	r3, [pc, #424]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da80:	4a69      	ldr	r2, [pc, #420]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da82:	6912      	ldr	r2, [r2, #16]
1000da84:	2102      	movs	r1, #2
1000da86:	430a      	orrs	r2, r1
1000da88:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
1000da8a:	e0c6      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000da8c:	4b66      	ldr	r3, [pc, #408]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da8e:	4a66      	ldr	r2, [pc, #408]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da90:	6912      	ldr	r2, [r2, #16]
1000da92:	2104      	movs	r1, #4
1000da94:	430a      	orrs	r2, r1
1000da96:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
1000da98:	e0bf      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000da9a:	4b63      	ldr	r3, [pc, #396]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da9c:	4a62      	ldr	r2, [pc, #392]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000da9e:	6912      	ldr	r2, [r2, #16]
1000daa0:	2108      	movs	r1, #8
1000daa2:	430a      	orrs	r2, r1
1000daa4:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
1000daa6:	e0b8      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000daa8:	4b5f      	ldr	r3, [pc, #380]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000daaa:	4a5f      	ldr	r2, [pc, #380]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000daac:	6912      	ldr	r2, [r2, #16]
1000daae:	2110      	movs	r1, #16
1000dab0:	430a      	orrs	r2, r1
1000dab2:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
1000dab4:	e0b1      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dab6:	4b5c      	ldr	r3, [pc, #368]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dab8:	4a5b      	ldr	r2, [pc, #364]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000daba:	6912      	ldr	r2, [r2, #16]
1000dabc:	2120      	movs	r1, #32
1000dabe:	430a      	orrs	r2, r1
1000dac0:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
1000dac2:	e0aa      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dac4:	4b58      	ldr	r3, [pc, #352]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dac6:	4a58      	ldr	r2, [pc, #352]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dac8:	6912      	ldr	r2, [r2, #16]
1000daca:	2140      	movs	r1, #64	; 0x40
1000dacc:	430a      	orrs	r2, r1
1000dace:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
1000dad0:	e0a3      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dad2:	4b55      	ldr	r3, [pc, #340]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dad4:	4a54      	ldr	r2, [pc, #336]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dad6:	6912      	ldr	r2, [r2, #16]
1000dad8:	2180      	movs	r1, #128	; 0x80
1000dada:	430a      	orrs	r2, r1
1000dadc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
1000dade:	e09c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dae0:	4b51      	ldr	r3, [pc, #324]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dae2:	4a51      	ldr	r2, [pc, #324]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dae4:	6912      	ldr	r2, [r2, #16]
1000dae6:	2180      	movs	r1, #128	; 0x80
1000dae8:	0049      	lsls	r1, r1, #1
1000daea:	430a      	orrs	r2, r1
1000daec:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
1000daee:	e094      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000daf0:	4b4d      	ldr	r3, [pc, #308]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000daf2:	4a4d      	ldr	r2, [pc, #308]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000daf4:	6912      	ldr	r2, [r2, #16]
1000daf6:	2180      	movs	r1, #128	; 0x80
1000daf8:	0089      	lsls	r1, r1, #2
1000dafa:	430a      	orrs	r2, r1
1000dafc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
1000dafe:	e08c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db00:	4b49      	ldr	r3, [pc, #292]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db02:	4a49      	ldr	r2, [pc, #292]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db04:	6912      	ldr	r2, [r2, #16]
1000db06:	2180      	movs	r1, #128	; 0x80
1000db08:	00c9      	lsls	r1, r1, #3
1000db0a:	430a      	orrs	r2, r1
1000db0c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000db0e:	e084      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db10:	4b45      	ldr	r3, [pc, #276]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db12:	4a45      	ldr	r2, [pc, #276]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db14:	6912      	ldr	r2, [r2, #16]
1000db16:	2180      	movs	r1, #128	; 0x80
1000db18:	0109      	lsls	r1, r1, #4
1000db1a:	430a      	orrs	r2, r1
1000db1c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000db1e:	e07c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db20:	4b41      	ldr	r3, [pc, #260]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db22:	4a41      	ldr	r2, [pc, #260]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db24:	6912      	ldr	r2, [r2, #16]
1000db26:	2180      	movs	r1, #128	; 0x80
1000db28:	0149      	lsls	r1, r1, #5
1000db2a:	430a      	orrs	r2, r1
1000db2c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000db2e:	e074      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db30:	4b3d      	ldr	r3, [pc, #244]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db32:	4a3d      	ldr	r2, [pc, #244]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db34:	6912      	ldr	r2, [r2, #16]
1000db36:	2180      	movs	r1, #128	; 0x80
1000db38:	0189      	lsls	r1, r1, #6
1000db3a:	430a      	orrs	r2, r1
1000db3c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000db3e:	e06c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db40:	4b39      	ldr	r3, [pc, #228]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db42:	4a39      	ldr	r2, [pc, #228]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db44:	6912      	ldr	r2, [r2, #16]
1000db46:	2180      	movs	r1, #128	; 0x80
1000db48:	01c9      	lsls	r1, r1, #7
1000db4a:	430a      	orrs	r2, r1
1000db4c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
1000db4e:	e064      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db50:	4b35      	ldr	r3, [pc, #212]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db52:	4a35      	ldr	r2, [pc, #212]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db54:	6912      	ldr	r2, [r2, #16]
1000db56:	2180      	movs	r1, #128	; 0x80
1000db58:	0209      	lsls	r1, r1, #8
1000db5a:	430a      	orrs	r2, r1
1000db5c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000db5e:	e05c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db60:	4b31      	ldr	r3, [pc, #196]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db62:	4a31      	ldr	r2, [pc, #196]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db64:	6912      	ldr	r2, [r2, #16]
1000db66:	2180      	movs	r1, #128	; 0x80
1000db68:	0249      	lsls	r1, r1, #9
1000db6a:	430a      	orrs	r2, r1
1000db6c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000db6e:	e054      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db70:	4b2d      	ldr	r3, [pc, #180]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db72:	4a2d      	ldr	r2, [pc, #180]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db74:	6912      	ldr	r2, [r2, #16]
1000db76:	2180      	movs	r1, #128	; 0x80
1000db78:	0289      	lsls	r1, r1, #10
1000db7a:	430a      	orrs	r2, r1
1000db7c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000db7e:	e04c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db80:	4b29      	ldr	r3, [pc, #164]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db82:	4a29      	ldr	r2, [pc, #164]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db84:	6912      	ldr	r2, [r2, #16]
1000db86:	2180      	movs	r1, #128	; 0x80
1000db88:	02c9      	lsls	r1, r1, #11
1000db8a:	430a      	orrs	r2, r1
1000db8c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000db8e:	e044      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db90:	4b25      	ldr	r3, [pc, #148]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db92:	4a25      	ldr	r2, [pc, #148]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000db94:	6912      	ldr	r2, [r2, #16]
1000db96:	2180      	movs	r1, #128	; 0x80
1000db98:	0309      	lsls	r1, r1, #12
1000db9a:	430a      	orrs	r2, r1
1000db9c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000db9e:	e03c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dba0:	4b21      	ldr	r3, [pc, #132]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dba2:	4a21      	ldr	r2, [pc, #132]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dba4:	6912      	ldr	r2, [r2, #16]
1000dba6:	2180      	movs	r1, #128	; 0x80
1000dba8:	0349      	lsls	r1, r1, #13
1000dbaa:	430a      	orrs	r2, r1
1000dbac:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000dbae:	e034      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbb0:	4b1d      	ldr	r3, [pc, #116]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbb2:	4a1d      	ldr	r2, [pc, #116]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbb4:	6912      	ldr	r2, [r2, #16]
1000dbb6:	2180      	movs	r1, #128	; 0x80
1000dbb8:	0389      	lsls	r1, r1, #14
1000dbba:	430a      	orrs	r2, r1
1000dbbc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000dbbe:	e02c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbc0:	4b19      	ldr	r3, [pc, #100]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbc2:	4a19      	ldr	r2, [pc, #100]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbc4:	6912      	ldr	r2, [r2, #16]
1000dbc6:	2180      	movs	r1, #128	; 0x80
1000dbc8:	03c9      	lsls	r1, r1, #15
1000dbca:	430a      	orrs	r2, r1
1000dbcc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000dbce:	e024      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbd0:	4b15      	ldr	r3, [pc, #84]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbd2:	4a15      	ldr	r2, [pc, #84]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbd4:	6912      	ldr	r2, [r2, #16]
1000dbd6:	2180      	movs	r1, #128	; 0x80
1000dbd8:	0409      	lsls	r1, r1, #16
1000dbda:	430a      	orrs	r2, r1
1000dbdc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000dbde:	e01c      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000dbe0:	4a11      	ldr	r2, [pc, #68]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbe2:	4b11      	ldr	r3, [pc, #68]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbe4:	7d1b      	ldrb	r3, [r3, #20]
1000dbe6:	b2db      	uxtb	r3, r3
1000dbe8:	2101      	movs	r1, #1
1000dbea:	430b      	orrs	r3, r1
1000dbec:	b2db      	uxtb	r3, r3
1000dbee:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
1000dbf0:	e013      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000dbf2:	4a0d      	ldr	r2, [pc, #52]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbf4:	4b0c      	ldr	r3, [pc, #48]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dbf6:	7d1b      	ldrb	r3, [r3, #20]
1000dbf8:	b2db      	uxtb	r3, r3
1000dbfa:	2102      	movs	r1, #2
1000dbfc:	430b      	orrs	r3, r1
1000dbfe:	b2db      	uxtb	r3, r3
1000dc00:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
1000dc02:	e00a      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000dc04:	4a08      	ldr	r2, [pc, #32]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dc06:	4b08      	ldr	r3, [pc, #32]	; (1000dc28 <system_clock_peripheral_enable+0x37c>)
1000dc08:	7d1b      	ldrb	r3, [r3, #20]
1000dc0a:	b2db      	uxtb	r3, r3
1000dc0c:	2104      	movs	r1, #4
1000dc0e:	430b      	orrs	r3, r1
1000dc10:	b2db      	uxtb	r3, r3
1000dc12:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
1000dc14:	e001      	b.n	1000dc1a <system_clock_peripheral_enable+0x36e>

		default:
			return STATUS_ERR_INVALID_ARG;
1000dc16:	2317      	movs	r3, #23
1000dc18:	e000      	b.n	1000dc1c <system_clock_peripheral_enable+0x370>
	}

	return STATUS_OK;
1000dc1a:	2300      	movs	r3, #0
}
1000dc1c:	0018      	movs	r0, r3
1000dc1e:	46bd      	mov	sp, r7
1000dc20:	b002      	add	sp, #8
1000dc22:	bd80      	pop	{r7, pc}
1000dc24:	10018f84 	.word	0x10018f84
1000dc28:	4000b000 	.word	0x4000b000

1000dc2c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000dc2c:	b580      	push	{r7, lr}
1000dc2e:	b082      	sub	sp, #8
1000dc30:	af00      	add	r7, sp, #0
1000dc32:	0002      	movs	r2, r0
1000dc34:	1dfb      	adds	r3, r7, #7
1000dc36:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000dc38:	1dfb      	adds	r3, r7, #7
1000dc3a:	781b      	ldrb	r3, [r3, #0]
1000dc3c:	2b35      	cmp	r3, #53	; 0x35
1000dc3e:	d900      	bls.n	1000dc42 <system_clock_peripheral_disable+0x16>
1000dc40:	e184      	b.n	1000df4c <system_clock_peripheral_disable+0x320>
1000dc42:	009a      	lsls	r2, r3, #2
1000dc44:	4bc5      	ldr	r3, [pc, #788]	; (1000df5c <system_clock_peripheral_disable+0x330>)
1000dc46:	18d3      	adds	r3, r2, r3
1000dc48:	681b      	ldr	r3, [r3, #0]
1000dc4a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dc4c:	4bc4      	ldr	r3, [pc, #784]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc4e:	4ac4      	ldr	r2, [pc, #784]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc50:	68d2      	ldr	r2, [r2, #12]
1000dc52:	2102      	movs	r1, #2
1000dc54:	438a      	bics	r2, r1
1000dc56:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
1000dc58:	e17a      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dc5a:	4bc1      	ldr	r3, [pc, #772]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc5c:	4ac0      	ldr	r2, [pc, #768]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc5e:	68d2      	ldr	r2, [r2, #12]
1000dc60:	2104      	movs	r1, #4
1000dc62:	438a      	bics	r2, r1
1000dc64:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
1000dc66:	e173      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dc68:	4bbd      	ldr	r3, [pc, #756]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc6a:	4abd      	ldr	r2, [pc, #756]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc6c:	68d2      	ldr	r2, [r2, #12]
1000dc6e:	2108      	movs	r1, #8
1000dc70:	438a      	bics	r2, r1
1000dc72:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
1000dc74:	e16c      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dc76:	4bba      	ldr	r3, [pc, #744]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc78:	4ab9      	ldr	r2, [pc, #740]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc7a:	68d2      	ldr	r2, [r2, #12]
1000dc7c:	2110      	movs	r1, #16
1000dc7e:	438a      	bics	r2, r1
1000dc80:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000dc82:	e165      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dc84:	4bb6      	ldr	r3, [pc, #728]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc86:	4ab6      	ldr	r2, [pc, #728]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc88:	68d2      	ldr	r2, [r2, #12]
1000dc8a:	2120      	movs	r1, #32
1000dc8c:	438a      	bics	r2, r1
1000dc8e:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
1000dc90:	e15e      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dc92:	4bb3      	ldr	r3, [pc, #716]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc94:	4ab2      	ldr	r2, [pc, #712]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dc96:	68d2      	ldr	r2, [r2, #12]
1000dc98:	2180      	movs	r1, #128	; 0x80
1000dc9a:	438a      	bics	r2, r1
1000dc9c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000dc9e:	e157      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dca0:	4baf      	ldr	r3, [pc, #700]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dca2:	4aaf      	ldr	r2, [pc, #700]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dca4:	68d2      	ldr	r2, [r2, #12]
1000dca6:	49af      	ldr	r1, [pc, #700]	; (1000df64 <system_clock_peripheral_disable+0x338>)
1000dca8:	400a      	ands	r2, r1
1000dcaa:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000dcac:	e150      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dcae:	4bac      	ldr	r3, [pc, #688]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcb0:	4aab      	ldr	r2, [pc, #684]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcb2:	68d2      	ldr	r2, [r2, #12]
1000dcb4:	49ac      	ldr	r1, [pc, #688]	; (1000df68 <system_clock_peripheral_disable+0x33c>)
1000dcb6:	400a      	ands	r2, r1
1000dcb8:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000dcba:	e149      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dcbc:	4ba8      	ldr	r3, [pc, #672]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcbe:	4aa8      	ldr	r2, [pc, #672]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcc0:	68d2      	ldr	r2, [r2, #12]
1000dcc2:	49aa      	ldr	r1, [pc, #680]	; (1000df6c <system_clock_peripheral_disable+0x340>)
1000dcc4:	400a      	ands	r2, r1
1000dcc6:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000dcc8:	e142      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dcca:	4ba5      	ldr	r3, [pc, #660]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dccc:	4aa4      	ldr	r2, [pc, #656]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcce:	68d2      	ldr	r2, [r2, #12]
1000dcd0:	49a7      	ldr	r1, [pc, #668]	; (1000df70 <system_clock_peripheral_disable+0x344>)
1000dcd2:	400a      	ands	r2, r1
1000dcd4:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000dcd6:	e13b      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dcd8:	4ba1      	ldr	r3, [pc, #644]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcda:	4aa1      	ldr	r2, [pc, #644]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcdc:	68d2      	ldr	r2, [r2, #12]
1000dcde:	49a5      	ldr	r1, [pc, #660]	; (1000df74 <system_clock_peripheral_disable+0x348>)
1000dce0:	400a      	ands	r2, r1
1000dce2:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000dce4:	e134      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dce6:	4b9e      	ldr	r3, [pc, #632]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dce8:	4a9d      	ldr	r2, [pc, #628]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcea:	68d2      	ldr	r2, [r2, #12]
1000dcec:	49a2      	ldr	r1, [pc, #648]	; (1000df78 <system_clock_peripheral_disable+0x34c>)
1000dcee:	400a      	ands	r2, r1
1000dcf0:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000dcf2:	e12d      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dcf4:	4b9a      	ldr	r3, [pc, #616]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcf6:	4a9a      	ldr	r2, [pc, #616]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dcf8:	68d2      	ldr	r2, [r2, #12]
1000dcfa:	49a0      	ldr	r1, [pc, #640]	; (1000df7c <system_clock_peripheral_disable+0x350>)
1000dcfc:	400a      	ands	r2, r1
1000dcfe:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000dd00:	e126      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd02:	4b97      	ldr	r3, [pc, #604]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd04:	4a96      	ldr	r2, [pc, #600]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd06:	68d2      	ldr	r2, [r2, #12]
1000dd08:	499d      	ldr	r1, [pc, #628]	; (1000df80 <system_clock_peripheral_disable+0x354>)
1000dd0a:	400a      	ands	r2, r1
1000dd0c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000dd0e:	e11f      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd10:	4b93      	ldr	r3, [pc, #588]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd12:	4a93      	ldr	r2, [pc, #588]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd14:	68d2      	ldr	r2, [r2, #12]
1000dd16:	499b      	ldr	r1, [pc, #620]	; (1000df84 <system_clock_peripheral_disable+0x358>)
1000dd18:	400a      	ands	r2, r1
1000dd1a:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000dd1c:	e118      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd1e:	4b90      	ldr	r3, [pc, #576]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd20:	4a8f      	ldr	r2, [pc, #572]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd22:	68d2      	ldr	r2, [r2, #12]
1000dd24:	4998      	ldr	r1, [pc, #608]	; (1000df88 <system_clock_peripheral_disable+0x35c>)
1000dd26:	400a      	ands	r2, r1
1000dd28:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000dd2a:	e111      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd2c:	4b8c      	ldr	r3, [pc, #560]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd2e:	4a8c      	ldr	r2, [pc, #560]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd30:	68d2      	ldr	r2, [r2, #12]
1000dd32:	4996      	ldr	r1, [pc, #600]	; (1000df8c <system_clock_peripheral_disable+0x360>)
1000dd34:	400a      	ands	r2, r1
1000dd36:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000dd38:	e10a      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd3a:	4b89      	ldr	r3, [pc, #548]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd3c:	4a88      	ldr	r2, [pc, #544]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd3e:	68d2      	ldr	r2, [r2, #12]
1000dd40:	4993      	ldr	r1, [pc, #588]	; (1000df90 <system_clock_peripheral_disable+0x364>)
1000dd42:	400a      	ands	r2, r1
1000dd44:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000dd46:	e103      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd48:	4b85      	ldr	r3, [pc, #532]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd4a:	4a85      	ldr	r2, [pc, #532]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd4c:	68d2      	ldr	r2, [r2, #12]
1000dd4e:	4991      	ldr	r1, [pc, #580]	; (1000df94 <system_clock_peripheral_disable+0x368>)
1000dd50:	400a      	ands	r2, r1
1000dd52:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000dd54:	e0fc      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd56:	4b82      	ldr	r3, [pc, #520]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd58:	4a81      	ldr	r2, [pc, #516]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd5a:	68d2      	ldr	r2, [r2, #12]
1000dd5c:	498e      	ldr	r1, [pc, #568]	; (1000df98 <system_clock_peripheral_disable+0x36c>)
1000dd5e:	400a      	ands	r2, r1
1000dd60:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000dd62:	e0f5      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd64:	4b7e      	ldr	r3, [pc, #504]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd66:	4a7e      	ldr	r2, [pc, #504]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd68:	68d2      	ldr	r2, [r2, #12]
1000dd6a:	498c      	ldr	r1, [pc, #560]	; (1000df9c <system_clock_peripheral_disable+0x370>)
1000dd6c:	400a      	ands	r2, r1
1000dd6e:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000dd70:	e0ee      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd72:	4b7b      	ldr	r3, [pc, #492]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd74:	4a7a      	ldr	r2, [pc, #488]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd76:	68d2      	ldr	r2, [r2, #12]
1000dd78:	4989      	ldr	r1, [pc, #548]	; (1000dfa0 <system_clock_peripheral_disable+0x374>)
1000dd7a:	400a      	ands	r2, r1
1000dd7c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000dd7e:	e0e7      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd80:	4b77      	ldr	r3, [pc, #476]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd82:	4a77      	ldr	r2, [pc, #476]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd84:	68d2      	ldr	r2, [r2, #12]
1000dd86:	4987      	ldr	r1, [pc, #540]	; (1000dfa4 <system_clock_peripheral_disable+0x378>)
1000dd88:	400a      	ands	r2, r1
1000dd8a:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000dd8c:	e0e0      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd8e:	4b74      	ldr	r3, [pc, #464]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd90:	4a73      	ldr	r2, [pc, #460]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd92:	68d2      	ldr	r2, [r2, #12]
1000dd94:	4984      	ldr	r1, [pc, #528]	; (1000dfa8 <system_clock_peripheral_disable+0x37c>)
1000dd96:	400a      	ands	r2, r1
1000dd98:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000dd9a:	e0d9      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000dd9c:	4b70      	ldr	r3, [pc, #448]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dd9e:	4a70      	ldr	r2, [pc, #448]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dda0:	68d2      	ldr	r2, [r2, #12]
1000dda2:	4982      	ldr	r1, [pc, #520]	; (1000dfac <system_clock_peripheral_disable+0x380>)
1000dda4:	400a      	ands	r2, r1
1000dda6:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000dda8:	e0d2      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ddaa:	4b6d      	ldr	r3, [pc, #436]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddac:	4a6c      	ldr	r2, [pc, #432]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddae:	68d2      	ldr	r2, [r2, #12]
1000ddb0:	497f      	ldr	r1, [pc, #508]	; (1000dfb0 <system_clock_peripheral_disable+0x384>)
1000ddb2:	400a      	ands	r2, r1
1000ddb4:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000ddb6:	e0cb      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ddb8:	4b69      	ldr	r3, [pc, #420]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddba:	4a69      	ldr	r2, [pc, #420]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddbc:	68d2      	ldr	r2, [r2, #12]
1000ddbe:	497d      	ldr	r1, [pc, #500]	; (1000dfb4 <system_clock_peripheral_disable+0x388>)
1000ddc0:	400a      	ands	r2, r1
1000ddc2:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ddc4:	e0c4      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ddc6:	4b66      	ldr	r3, [pc, #408]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddc8:	4a65      	ldr	r2, [pc, #404]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddca:	6912      	ldr	r2, [r2, #16]
1000ddcc:	2101      	movs	r1, #1
1000ddce:	438a      	bics	r2, r1
1000ddd0:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
1000ddd2:	e0bd      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ddd4:	4b62      	ldr	r3, [pc, #392]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddd6:	4a62      	ldr	r2, [pc, #392]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddd8:	6912      	ldr	r2, [r2, #16]
1000ddda:	2102      	movs	r1, #2
1000dddc:	438a      	bics	r2, r1
1000ddde:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
1000dde0:	e0b6      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000dde2:	4b5f      	ldr	r3, [pc, #380]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dde4:	4a5e      	ldr	r2, [pc, #376]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dde6:	6912      	ldr	r2, [r2, #16]
1000dde8:	2104      	movs	r1, #4
1000ddea:	438a      	bics	r2, r1
1000ddec:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
1000ddee:	e0af      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ddf0:	4b5b      	ldr	r3, [pc, #364]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddf2:	4a5b      	ldr	r2, [pc, #364]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ddf4:	6912      	ldr	r2, [r2, #16]
1000ddf6:	2108      	movs	r1, #8
1000ddf8:	438a      	bics	r2, r1
1000ddfa:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
1000ddfc:	e0a8      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ddfe:	4b58      	ldr	r3, [pc, #352]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de00:	4a57      	ldr	r2, [pc, #348]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de02:	6912      	ldr	r2, [r2, #16]
1000de04:	2110      	movs	r1, #16
1000de06:	438a      	bics	r2, r1
1000de08:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
1000de0a:	e0a1      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de0c:	4b54      	ldr	r3, [pc, #336]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de0e:	4a54      	ldr	r2, [pc, #336]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de10:	6912      	ldr	r2, [r2, #16]
1000de12:	2120      	movs	r1, #32
1000de14:	438a      	bics	r2, r1
1000de16:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
1000de18:	e09a      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de1a:	4b51      	ldr	r3, [pc, #324]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de1c:	4a50      	ldr	r2, [pc, #320]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de1e:	6912      	ldr	r2, [r2, #16]
1000de20:	2140      	movs	r1, #64	; 0x40
1000de22:	438a      	bics	r2, r1
1000de24:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
1000de26:	e093      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de28:	4b4d      	ldr	r3, [pc, #308]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de2a:	4a4d      	ldr	r2, [pc, #308]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de2c:	6912      	ldr	r2, [r2, #16]
1000de2e:	2180      	movs	r1, #128	; 0x80
1000de30:	438a      	bics	r2, r1
1000de32:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
1000de34:	e08c      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de36:	4b4a      	ldr	r3, [pc, #296]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de38:	4a49      	ldr	r2, [pc, #292]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de3a:	6912      	ldr	r2, [r2, #16]
1000de3c:	4949      	ldr	r1, [pc, #292]	; (1000df64 <system_clock_peripheral_disable+0x338>)
1000de3e:	400a      	ands	r2, r1
1000de40:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
1000de42:	e085      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de44:	4b46      	ldr	r3, [pc, #280]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de46:	4a46      	ldr	r2, [pc, #280]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de48:	6912      	ldr	r2, [r2, #16]
1000de4a:	495b      	ldr	r1, [pc, #364]	; (1000dfb8 <system_clock_peripheral_disable+0x38c>)
1000de4c:	400a      	ands	r2, r1
1000de4e:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
1000de50:	e07e      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de52:	4b43      	ldr	r3, [pc, #268]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de54:	4a42      	ldr	r2, [pc, #264]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de56:	6912      	ldr	r2, [r2, #16]
1000de58:	4958      	ldr	r1, [pc, #352]	; (1000dfbc <system_clock_peripheral_disable+0x390>)
1000de5a:	400a      	ands	r2, r1
1000de5c:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000de5e:	e077      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de60:	4b3f      	ldr	r3, [pc, #252]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de62:	4a3f      	ldr	r2, [pc, #252]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de64:	6912      	ldr	r2, [r2, #16]
1000de66:	4940      	ldr	r1, [pc, #256]	; (1000df68 <system_clock_peripheral_disable+0x33c>)
1000de68:	400a      	ands	r2, r1
1000de6a:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000de6c:	e070      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de6e:	4b3c      	ldr	r3, [pc, #240]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de70:	4a3b      	ldr	r2, [pc, #236]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de72:	6912      	ldr	r2, [r2, #16]
1000de74:	493d      	ldr	r1, [pc, #244]	; (1000df6c <system_clock_peripheral_disable+0x340>)
1000de76:	400a      	ands	r2, r1
1000de78:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000de7a:	e069      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de7c:	4b38      	ldr	r3, [pc, #224]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de7e:	4a38      	ldr	r2, [pc, #224]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de80:	6912      	ldr	r2, [r2, #16]
1000de82:	493b      	ldr	r1, [pc, #236]	; (1000df70 <system_clock_peripheral_disable+0x344>)
1000de84:	400a      	ands	r2, r1
1000de86:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000de88:	e062      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de8a:	4b35      	ldr	r3, [pc, #212]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de8c:	4a34      	ldr	r2, [pc, #208]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de8e:	6912      	ldr	r2, [r2, #16]
1000de90:	4938      	ldr	r1, [pc, #224]	; (1000df74 <system_clock_peripheral_disable+0x348>)
1000de92:	400a      	ands	r2, r1
1000de94:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
1000de96:	e05b      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000de98:	4b31      	ldr	r3, [pc, #196]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de9a:	4a31      	ldr	r2, [pc, #196]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000de9c:	6912      	ldr	r2, [r2, #16]
1000de9e:	4936      	ldr	r1, [pc, #216]	; (1000df78 <system_clock_peripheral_disable+0x34c>)
1000dea0:	400a      	ands	r2, r1
1000dea2:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000dea4:	e054      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000dea6:	4b2e      	ldr	r3, [pc, #184]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dea8:	4a2d      	ldr	r2, [pc, #180]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000deaa:	6912      	ldr	r2, [r2, #16]
1000deac:	4933      	ldr	r1, [pc, #204]	; (1000df7c <system_clock_peripheral_disable+0x350>)
1000deae:	400a      	ands	r2, r1
1000deb0:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000deb2:	e04d      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000deb4:	4b2a      	ldr	r3, [pc, #168]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000deb6:	4a2a      	ldr	r2, [pc, #168]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000deb8:	6912      	ldr	r2, [r2, #16]
1000deba:	4931      	ldr	r1, [pc, #196]	; (1000df80 <system_clock_peripheral_disable+0x354>)
1000debc:	400a      	ands	r2, r1
1000debe:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000dec0:	e046      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000dec2:	4b27      	ldr	r3, [pc, #156]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dec4:	4a26      	ldr	r2, [pc, #152]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dec6:	6912      	ldr	r2, [r2, #16]
1000dec8:	492e      	ldr	r1, [pc, #184]	; (1000df84 <system_clock_peripheral_disable+0x358>)
1000deca:	400a      	ands	r2, r1
1000decc:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000dece:	e03f      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ded0:	4b23      	ldr	r3, [pc, #140]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ded2:	4a23      	ldr	r2, [pc, #140]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000ded4:	6912      	ldr	r2, [r2, #16]
1000ded6:	492c      	ldr	r1, [pc, #176]	; (1000df88 <system_clock_peripheral_disable+0x35c>)
1000ded8:	400a      	ands	r2, r1
1000deda:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000dedc:	e038      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000dede:	4b20      	ldr	r3, [pc, #128]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dee0:	4a1f      	ldr	r2, [pc, #124]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000dee2:	6912      	ldr	r2, [r2, #16]
1000dee4:	4929      	ldr	r1, [pc, #164]	; (1000df8c <system_clock_peripheral_disable+0x360>)
1000dee6:	400a      	ands	r2, r1
1000dee8:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000deea:	e031      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000deec:	4b1c      	ldr	r3, [pc, #112]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000deee:	4a1c      	ldr	r2, [pc, #112]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000def0:	6912      	ldr	r2, [r2, #16]
1000def2:	4927      	ldr	r1, [pc, #156]	; (1000df90 <system_clock_peripheral_disable+0x364>)
1000def4:	400a      	ands	r2, r1
1000def6:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000def8:	e02a      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000defa:	4b19      	ldr	r3, [pc, #100]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000defc:	4a18      	ldr	r2, [pc, #96]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000defe:	6912      	ldr	r2, [r2, #16]
1000df00:	4924      	ldr	r1, [pc, #144]	; (1000df94 <system_clock_peripheral_disable+0x368>)
1000df02:	400a      	ands	r2, r1
1000df04:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000df06:	e023      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000df08:	4b15      	ldr	r3, [pc, #84]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df0a:	4a15      	ldr	r2, [pc, #84]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df0c:	6912      	ldr	r2, [r2, #16]
1000df0e:	4922      	ldr	r1, [pc, #136]	; (1000df98 <system_clock_peripheral_disable+0x36c>)
1000df10:	400a      	ands	r2, r1
1000df12:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000df14:	e01c      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
1000df16:	4a12      	ldr	r2, [pc, #72]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df18:	4b11      	ldr	r3, [pc, #68]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df1a:	7d1b      	ldrb	r3, [r3, #20]
1000df1c:	b2db      	uxtb	r3, r3
1000df1e:	2101      	movs	r1, #1
1000df20:	438b      	bics	r3, r1
1000df22:	b2db      	uxtb	r3, r3
1000df24:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
1000df26:	e013      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
1000df28:	4a0d      	ldr	r2, [pc, #52]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df2a:	4b0d      	ldr	r3, [pc, #52]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df2c:	7d1b      	ldrb	r3, [r3, #20]
1000df2e:	b2db      	uxtb	r3, r3
1000df30:	2102      	movs	r1, #2
1000df32:	438b      	bics	r3, r1
1000df34:	b2db      	uxtb	r3, r3
1000df36:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
1000df38:	e00a      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
1000df3a:	4a09      	ldr	r2, [pc, #36]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df3c:	4b08      	ldr	r3, [pc, #32]	; (1000df60 <system_clock_peripheral_disable+0x334>)
1000df3e:	7d1b      	ldrb	r3, [r3, #20]
1000df40:	b2db      	uxtb	r3, r3
1000df42:	2104      	movs	r1, #4
1000df44:	438b      	bics	r3, r1
1000df46:	b2db      	uxtb	r3, r3
1000df48:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
1000df4a:	e001      	b.n	1000df50 <system_clock_peripheral_disable+0x324>

		default:
			return STATUS_ERR_INVALID_ARG;
1000df4c:	2317      	movs	r3, #23
1000df4e:	e000      	b.n	1000df52 <system_clock_peripheral_disable+0x326>
	}

	return STATUS_OK;
1000df50:	2300      	movs	r3, #0
}
1000df52:	0018      	movs	r0, r3
1000df54:	46bd      	mov	sp, r7
1000df56:	b002      	add	sp, #8
1000df58:	bd80      	pop	{r7, pc}
1000df5a:	46c0      	nop			; (mov r8, r8)
1000df5c:	1001905c 	.word	0x1001905c
1000df60:	4000b000 	.word	0x4000b000
1000df64:	fffffeff 	.word	0xfffffeff
1000df68:	fffff7ff 	.word	0xfffff7ff
1000df6c:	ffffefff 	.word	0xffffefff
1000df70:	ffffdfff 	.word	0xffffdfff
1000df74:	ffffbfff 	.word	0xffffbfff
1000df78:	ffff7fff 	.word	0xffff7fff
1000df7c:	fffeffff 	.word	0xfffeffff
1000df80:	fffdffff 	.word	0xfffdffff
1000df84:	fffbffff 	.word	0xfffbffff
1000df88:	fff7ffff 	.word	0xfff7ffff
1000df8c:	ffefffff 	.word	0xffefffff
1000df90:	ffdfffff 	.word	0xffdfffff
1000df94:	ffbfffff 	.word	0xffbfffff
1000df98:	ff7fffff 	.word	0xff7fffff
1000df9c:	feffffff 	.word	0xfeffffff
1000dfa0:	fdffffff 	.word	0xfdffffff
1000dfa4:	fbffffff 	.word	0xfbffffff
1000dfa8:	f7ffffff 	.word	0xf7ffffff
1000dfac:	efffffff 	.word	0xefffffff
1000dfb0:	dfffffff 	.word	0xdfffffff
1000dfb4:	bfffffff 	.word	0xbfffffff
1000dfb8:	fffffdff 	.word	0xfffffdff
1000dfbc:	fffffbff 	.word	0xfffffbff

1000dfc0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000dfc0:	b580      	push	{r7, lr}
1000dfc2:	b082      	sub	sp, #8
1000dfc4:	af00      	add	r7, sp, #0
1000dfc6:	0002      	movs	r2, r0
1000dfc8:	1dfb      	adds	r3, r7, #7
1000dfca:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000dfcc:	1dfb      	adds	r3, r7, #7
1000dfce:	781b      	ldrb	r3, [r3, #0]
1000dfd0:	2b43      	cmp	r3, #67	; 0x43
1000dfd2:	d900      	bls.n	1000dfd6 <system_peripheral_reset+0x16>
1000dfd4:	e2b2      	b.n	1000e53c <system_peripheral_reset+0x57c>
1000dfd6:	009a      	lsls	r2, r3, #2
1000dfd8:	4be8      	ldr	r3, [pc, #928]	; (1000e37c <system_peripheral_reset+0x3bc>)
1000dfda:	18d3      	adds	r3, r2, r3
1000dfdc:	681b      	ldr	r3, [r3, #0]
1000dfde:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfe0:	4be7      	ldr	r3, [pc, #924]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000dfe2:	4ae7      	ldr	r2, [pc, #924]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000dfe4:	6852      	ldr	r2, [r2, #4]
1000dfe6:	2102      	movs	r1, #2
1000dfe8:	438a      	bics	r2, r1
1000dfea:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfec:	4be4      	ldr	r3, [pc, #912]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000dfee:	4ae4      	ldr	r2, [pc, #912]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000dff0:	6852      	ldr	r2, [r2, #4]
1000dff2:	2102      	movs	r1, #2
1000dff4:	430a      	orrs	r2, r1
1000dff6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000dff8:	e2a2      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dffa:	4be1      	ldr	r3, [pc, #900]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000dffc:	4ae0      	ldr	r2, [pc, #896]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000dffe:	6852      	ldr	r2, [r2, #4]
1000e000:	2104      	movs	r1, #4
1000e002:	438a      	bics	r2, r1
1000e004:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e006:	4bde      	ldr	r3, [pc, #888]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e008:	4add      	ldr	r2, [pc, #884]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e00a:	6852      	ldr	r2, [r2, #4]
1000e00c:	2104      	movs	r1, #4
1000e00e:	430a      	orrs	r2, r1
1000e010:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
1000e012:	e295      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e014:	4bda      	ldr	r3, [pc, #872]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e016:	4ada      	ldr	r2, [pc, #872]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e018:	6852      	ldr	r2, [r2, #4]
1000e01a:	2108      	movs	r1, #8
1000e01c:	438a      	bics	r2, r1
1000e01e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e020:	4bd7      	ldr	r3, [pc, #860]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e022:	4ad7      	ldr	r2, [pc, #860]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e024:	6852      	ldr	r2, [r2, #4]
1000e026:	2108      	movs	r1, #8
1000e028:	430a      	orrs	r2, r1
1000e02a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
1000e02c:	e288      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e02e:	4bd4      	ldr	r3, [pc, #848]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e030:	4ad3      	ldr	r2, [pc, #844]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e032:	6852      	ldr	r2, [r2, #4]
1000e034:	2110      	movs	r1, #16
1000e036:	438a      	bics	r2, r1
1000e038:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e03a:	4bd1      	ldr	r3, [pc, #836]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e03c:	4ad0      	ldr	r2, [pc, #832]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e03e:	6852      	ldr	r2, [r2, #4]
1000e040:	2110      	movs	r1, #16
1000e042:	430a      	orrs	r2, r1
1000e044:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
1000e046:	e27b      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e048:	4bcd      	ldr	r3, [pc, #820]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e04a:	4acd      	ldr	r2, [pc, #820]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e04c:	6852      	ldr	r2, [r2, #4]
1000e04e:	2120      	movs	r1, #32
1000e050:	438a      	bics	r2, r1
1000e052:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e054:	4bca      	ldr	r3, [pc, #808]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e056:	4aca      	ldr	r2, [pc, #808]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e058:	6852      	ldr	r2, [r2, #4]
1000e05a:	2120      	movs	r1, #32
1000e05c:	430a      	orrs	r2, r1
1000e05e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
1000e060:	e26e      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e062:	4bc7      	ldr	r3, [pc, #796]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e064:	4ac6      	ldr	r2, [pc, #792]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e066:	6852      	ldr	r2, [r2, #4]
1000e068:	2140      	movs	r1, #64	; 0x40
1000e06a:	438a      	bics	r2, r1
1000e06c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e06e:	4bc4      	ldr	r3, [pc, #784]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e070:	4ac3      	ldr	r2, [pc, #780]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e072:	6852      	ldr	r2, [r2, #4]
1000e074:	2140      	movs	r1, #64	; 0x40
1000e076:	430a      	orrs	r2, r1
1000e078:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
1000e07a:	e261      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e07c:	4bc0      	ldr	r3, [pc, #768]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e07e:	4ac0      	ldr	r2, [pc, #768]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e080:	6852      	ldr	r2, [r2, #4]
1000e082:	2180      	movs	r1, #128	; 0x80
1000e084:	438a      	bics	r2, r1
1000e086:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e088:	4bbd      	ldr	r3, [pc, #756]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e08a:	4abd      	ldr	r2, [pc, #756]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e08c:	6852      	ldr	r2, [r2, #4]
1000e08e:	2180      	movs	r1, #128	; 0x80
1000e090:	430a      	orrs	r2, r1
1000e092:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
1000e094:	e254      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e096:	4bba      	ldr	r3, [pc, #744]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e098:	4ab9      	ldr	r2, [pc, #740]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e09a:	6852      	ldr	r2, [r2, #4]
1000e09c:	49b9      	ldr	r1, [pc, #740]	; (1000e384 <system_peripheral_reset+0x3c4>)
1000e09e:	400a      	ands	r2, r1
1000e0a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0a2:	4bb7      	ldr	r3, [pc, #732]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0a4:	4ab6      	ldr	r2, [pc, #728]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0a6:	6852      	ldr	r2, [r2, #4]
1000e0a8:	2180      	movs	r1, #128	; 0x80
1000e0aa:	0049      	lsls	r1, r1, #1
1000e0ac:	430a      	orrs	r2, r1
1000e0ae:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
1000e0b0:	e246      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0b2:	4bb3      	ldr	r3, [pc, #716]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0b4:	4ab2      	ldr	r2, [pc, #712]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0b6:	6852      	ldr	r2, [r2, #4]
1000e0b8:	49b3      	ldr	r1, [pc, #716]	; (1000e388 <system_peripheral_reset+0x3c8>)
1000e0ba:	400a      	ands	r2, r1
1000e0bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0be:	4bb0      	ldr	r3, [pc, #704]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0c0:	4aaf      	ldr	r2, [pc, #700]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0c2:	6852      	ldr	r2, [r2, #4]
1000e0c4:	2180      	movs	r1, #128	; 0x80
1000e0c6:	0089      	lsls	r1, r1, #2
1000e0c8:	430a      	orrs	r2, r1
1000e0ca:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000e0cc:	e238      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0ce:	4bac      	ldr	r3, [pc, #688]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0d0:	4aab      	ldr	r2, [pc, #684]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0d2:	6852      	ldr	r2, [r2, #4]
1000e0d4:	49ad      	ldr	r1, [pc, #692]	; (1000e38c <system_peripheral_reset+0x3cc>)
1000e0d6:	400a      	ands	r2, r1
1000e0d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0da:	4ba9      	ldr	r3, [pc, #676]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0dc:	4aa8      	ldr	r2, [pc, #672]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0de:	6852      	ldr	r2, [r2, #4]
1000e0e0:	2180      	movs	r1, #128	; 0x80
1000e0e2:	00c9      	lsls	r1, r1, #3
1000e0e4:	430a      	orrs	r2, r1
1000e0e6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000e0e8:	e22a      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0ea:	4ba5      	ldr	r3, [pc, #660]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0ec:	4aa4      	ldr	r2, [pc, #656]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0ee:	6852      	ldr	r2, [r2, #4]
1000e0f0:	49a7      	ldr	r1, [pc, #668]	; (1000e390 <system_peripheral_reset+0x3d0>)
1000e0f2:	400a      	ands	r2, r1
1000e0f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0f6:	4ba2      	ldr	r3, [pc, #648]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0f8:	4aa1      	ldr	r2, [pc, #644]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e0fa:	6852      	ldr	r2, [r2, #4]
1000e0fc:	2180      	movs	r1, #128	; 0x80
1000e0fe:	0109      	lsls	r1, r1, #4
1000e100:	430a      	orrs	r2, r1
1000e102:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000e104:	e21c      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e106:	4b9e      	ldr	r3, [pc, #632]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e108:	4a9d      	ldr	r2, [pc, #628]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e10a:	6852      	ldr	r2, [r2, #4]
1000e10c:	49a1      	ldr	r1, [pc, #644]	; (1000e394 <system_peripheral_reset+0x3d4>)
1000e10e:	400a      	ands	r2, r1
1000e110:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e112:	4b9b      	ldr	r3, [pc, #620]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e114:	4a9a      	ldr	r2, [pc, #616]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e116:	6852      	ldr	r2, [r2, #4]
1000e118:	2180      	movs	r1, #128	; 0x80
1000e11a:	0149      	lsls	r1, r1, #5
1000e11c:	430a      	orrs	r2, r1
1000e11e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000e120:	e20e      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e122:	4b97      	ldr	r3, [pc, #604]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e124:	4a96      	ldr	r2, [pc, #600]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e126:	6852      	ldr	r2, [r2, #4]
1000e128:	499b      	ldr	r1, [pc, #620]	; (1000e398 <system_peripheral_reset+0x3d8>)
1000e12a:	400a      	ands	r2, r1
1000e12c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e12e:	4b94      	ldr	r3, [pc, #592]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e130:	4a93      	ldr	r2, [pc, #588]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e132:	6852      	ldr	r2, [r2, #4]
1000e134:	2180      	movs	r1, #128	; 0x80
1000e136:	0189      	lsls	r1, r1, #6
1000e138:	430a      	orrs	r2, r1
1000e13a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
1000e13c:	e200      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e13e:	4b90      	ldr	r3, [pc, #576]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e140:	4a8f      	ldr	r2, [pc, #572]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e142:	6852      	ldr	r2, [r2, #4]
1000e144:	4995      	ldr	r1, [pc, #596]	; (1000e39c <system_peripheral_reset+0x3dc>)
1000e146:	400a      	ands	r2, r1
1000e148:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e14a:	4b8d      	ldr	r3, [pc, #564]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e14c:	4a8c      	ldr	r2, [pc, #560]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e14e:	6852      	ldr	r2, [r2, #4]
1000e150:	2180      	movs	r1, #128	; 0x80
1000e152:	01c9      	lsls	r1, r1, #7
1000e154:	430a      	orrs	r2, r1
1000e156:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
1000e158:	e1f2      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e15a:	4b89      	ldr	r3, [pc, #548]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e15c:	4a88      	ldr	r2, [pc, #544]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e15e:	6852      	ldr	r2, [r2, #4]
1000e160:	498f      	ldr	r1, [pc, #572]	; (1000e3a0 <system_peripheral_reset+0x3e0>)
1000e162:	400a      	ands	r2, r1
1000e164:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e166:	4b86      	ldr	r3, [pc, #536]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e168:	4a85      	ldr	r2, [pc, #532]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e16a:	6852      	ldr	r2, [r2, #4]
1000e16c:	2180      	movs	r1, #128	; 0x80
1000e16e:	0209      	lsls	r1, r1, #8
1000e170:	430a      	orrs	r2, r1
1000e172:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000e174:	e1e4      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e176:	4b82      	ldr	r3, [pc, #520]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e178:	4a81      	ldr	r2, [pc, #516]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e17a:	6852      	ldr	r2, [r2, #4]
1000e17c:	4989      	ldr	r1, [pc, #548]	; (1000e3a4 <system_peripheral_reset+0x3e4>)
1000e17e:	400a      	ands	r2, r1
1000e180:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e182:	4b7f      	ldr	r3, [pc, #508]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e184:	4a7e      	ldr	r2, [pc, #504]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e186:	6852      	ldr	r2, [r2, #4]
1000e188:	2180      	movs	r1, #128	; 0x80
1000e18a:	0249      	lsls	r1, r1, #9
1000e18c:	430a      	orrs	r2, r1
1000e18e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
1000e190:	e1d6      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e192:	4b7b      	ldr	r3, [pc, #492]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e194:	4a7a      	ldr	r2, [pc, #488]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e196:	6852      	ldr	r2, [r2, #4]
1000e198:	4983      	ldr	r1, [pc, #524]	; (1000e3a8 <system_peripheral_reset+0x3e8>)
1000e19a:	400a      	ands	r2, r1
1000e19c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e19e:	4b78      	ldr	r3, [pc, #480]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1a0:	4a77      	ldr	r2, [pc, #476]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1a2:	6852      	ldr	r2, [r2, #4]
1000e1a4:	2180      	movs	r1, #128	; 0x80
1000e1a6:	0289      	lsls	r1, r1, #10
1000e1a8:	430a      	orrs	r2, r1
1000e1aa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
1000e1ac:	e1c8      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e1ae:	4b74      	ldr	r3, [pc, #464]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1b0:	4a73      	ldr	r2, [pc, #460]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1b2:	6852      	ldr	r2, [r2, #4]
1000e1b4:	497d      	ldr	r1, [pc, #500]	; (1000e3ac <system_peripheral_reset+0x3ec>)
1000e1b6:	400a      	ands	r2, r1
1000e1b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e1ba:	4b71      	ldr	r3, [pc, #452]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1bc:	4a70      	ldr	r2, [pc, #448]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1be:	6852      	ldr	r2, [r2, #4]
1000e1c0:	2180      	movs	r1, #128	; 0x80
1000e1c2:	02c9      	lsls	r1, r1, #11
1000e1c4:	430a      	orrs	r2, r1
1000e1c6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000e1c8:	e1ba      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e1ca:	4b6d      	ldr	r3, [pc, #436]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1cc:	4a6c      	ldr	r2, [pc, #432]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1ce:	6852      	ldr	r2, [r2, #4]
1000e1d0:	4977      	ldr	r1, [pc, #476]	; (1000e3b0 <system_peripheral_reset+0x3f0>)
1000e1d2:	400a      	ands	r2, r1
1000e1d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e1d6:	4b6a      	ldr	r3, [pc, #424]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1d8:	4a69      	ldr	r2, [pc, #420]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1da:	6852      	ldr	r2, [r2, #4]
1000e1dc:	2180      	movs	r1, #128	; 0x80
1000e1de:	0309      	lsls	r1, r1, #12
1000e1e0:	430a      	orrs	r2, r1
1000e1e2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000e1e4:	e1ac      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e1e6:	4b66      	ldr	r3, [pc, #408]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1e8:	4a65      	ldr	r2, [pc, #404]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1ea:	6852      	ldr	r2, [r2, #4]
1000e1ec:	4971      	ldr	r1, [pc, #452]	; (1000e3b4 <system_peripheral_reset+0x3f4>)
1000e1ee:	400a      	ands	r2, r1
1000e1f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e1f2:	4b63      	ldr	r3, [pc, #396]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1f4:	4a62      	ldr	r2, [pc, #392]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e1f6:	6852      	ldr	r2, [r2, #4]
1000e1f8:	2180      	movs	r1, #128	; 0x80
1000e1fa:	0349      	lsls	r1, r1, #13
1000e1fc:	430a      	orrs	r2, r1
1000e1fe:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000e200:	e19e      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e202:	4b5f      	ldr	r3, [pc, #380]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e204:	4a5e      	ldr	r2, [pc, #376]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e206:	6852      	ldr	r2, [r2, #4]
1000e208:	496b      	ldr	r1, [pc, #428]	; (1000e3b8 <system_peripheral_reset+0x3f8>)
1000e20a:	400a      	ands	r2, r1
1000e20c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e20e:	4b5c      	ldr	r3, [pc, #368]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e210:	4a5b      	ldr	r2, [pc, #364]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e212:	6852      	ldr	r2, [r2, #4]
1000e214:	2180      	movs	r1, #128	; 0x80
1000e216:	0389      	lsls	r1, r1, #14
1000e218:	430a      	orrs	r2, r1
1000e21a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000e21c:	e190      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e21e:	4b58      	ldr	r3, [pc, #352]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e220:	4a57      	ldr	r2, [pc, #348]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e222:	6852      	ldr	r2, [r2, #4]
1000e224:	4965      	ldr	r1, [pc, #404]	; (1000e3bc <system_peripheral_reset+0x3fc>)
1000e226:	400a      	ands	r2, r1
1000e228:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e22a:	4b55      	ldr	r3, [pc, #340]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e22c:	4a54      	ldr	r2, [pc, #336]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e22e:	6852      	ldr	r2, [r2, #4]
1000e230:	2180      	movs	r1, #128	; 0x80
1000e232:	03c9      	lsls	r1, r1, #15
1000e234:	430a      	orrs	r2, r1
1000e236:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000e238:	e182      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e23a:	4b51      	ldr	r3, [pc, #324]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e23c:	4a50      	ldr	r2, [pc, #320]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e23e:	6852      	ldr	r2, [r2, #4]
1000e240:	495f      	ldr	r1, [pc, #380]	; (1000e3c0 <system_peripheral_reset+0x400>)
1000e242:	400a      	ands	r2, r1
1000e244:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e246:	4b4e      	ldr	r3, [pc, #312]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e248:	4a4d      	ldr	r2, [pc, #308]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e24a:	6852      	ldr	r2, [r2, #4]
1000e24c:	2180      	movs	r1, #128	; 0x80
1000e24e:	0409      	lsls	r1, r1, #16
1000e250:	430a      	orrs	r2, r1
1000e252:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000e254:	e174      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e256:	4b4a      	ldr	r3, [pc, #296]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e258:	4a49      	ldr	r2, [pc, #292]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e25a:	6852      	ldr	r2, [r2, #4]
1000e25c:	4959      	ldr	r1, [pc, #356]	; (1000e3c4 <system_peripheral_reset+0x404>)
1000e25e:	400a      	ands	r2, r1
1000e260:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e262:	4b47      	ldr	r3, [pc, #284]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e264:	4a46      	ldr	r2, [pc, #280]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e266:	6852      	ldr	r2, [r2, #4]
1000e268:	2180      	movs	r1, #128	; 0x80
1000e26a:	0449      	lsls	r1, r1, #17
1000e26c:	430a      	orrs	r2, r1
1000e26e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000e270:	e166      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e272:	4b43      	ldr	r3, [pc, #268]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e274:	4a42      	ldr	r2, [pc, #264]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e276:	6852      	ldr	r2, [r2, #4]
1000e278:	4953      	ldr	r1, [pc, #332]	; (1000e3c8 <system_peripheral_reset+0x408>)
1000e27a:	400a      	ands	r2, r1
1000e27c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e27e:	4b40      	ldr	r3, [pc, #256]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e280:	4a3f      	ldr	r2, [pc, #252]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e282:	6852      	ldr	r2, [r2, #4]
1000e284:	2180      	movs	r1, #128	; 0x80
1000e286:	0489      	lsls	r1, r1, #18
1000e288:	430a      	orrs	r2, r1
1000e28a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
1000e28c:	e158      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e28e:	4b3c      	ldr	r3, [pc, #240]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e290:	4a3b      	ldr	r2, [pc, #236]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e292:	6852      	ldr	r2, [r2, #4]
1000e294:	494d      	ldr	r1, [pc, #308]	; (1000e3cc <system_peripheral_reset+0x40c>)
1000e296:	400a      	ands	r2, r1
1000e298:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e29a:	4b39      	ldr	r3, [pc, #228]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e29c:	4a38      	ldr	r2, [pc, #224]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e29e:	6852      	ldr	r2, [r2, #4]
1000e2a0:	2180      	movs	r1, #128	; 0x80
1000e2a2:	04c9      	lsls	r1, r1, #19
1000e2a4:	430a      	orrs	r2, r1
1000e2a6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
1000e2a8:	e14a      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e2aa:	4b35      	ldr	r3, [pc, #212]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2ac:	4a34      	ldr	r2, [pc, #208]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2ae:	6852      	ldr	r2, [r2, #4]
1000e2b0:	4947      	ldr	r1, [pc, #284]	; (1000e3d0 <system_peripheral_reset+0x410>)
1000e2b2:	400a      	ands	r2, r1
1000e2b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e2b6:	4b32      	ldr	r3, [pc, #200]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2b8:	4a31      	ldr	r2, [pc, #196]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2ba:	6852      	ldr	r2, [r2, #4]
1000e2bc:	2180      	movs	r1, #128	; 0x80
1000e2be:	0509      	lsls	r1, r1, #20
1000e2c0:	430a      	orrs	r2, r1
1000e2c2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
1000e2c4:	e13c      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e2c6:	4b2e      	ldr	r3, [pc, #184]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2c8:	4a2d      	ldr	r2, [pc, #180]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2ca:	6852      	ldr	r2, [r2, #4]
1000e2cc:	4941      	ldr	r1, [pc, #260]	; (1000e3d4 <system_peripheral_reset+0x414>)
1000e2ce:	400a      	ands	r2, r1
1000e2d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e2d2:	4b2b      	ldr	r3, [pc, #172]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2d4:	4a2a      	ldr	r2, [pc, #168]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2d6:	6852      	ldr	r2, [r2, #4]
1000e2d8:	2180      	movs	r1, #128	; 0x80
1000e2da:	0549      	lsls	r1, r1, #21
1000e2dc:	430a      	orrs	r2, r1
1000e2de:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
1000e2e0:	e12e      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e2e2:	4b27      	ldr	r3, [pc, #156]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2e4:	4a26      	ldr	r2, [pc, #152]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2e6:	6852      	ldr	r2, [r2, #4]
1000e2e8:	493b      	ldr	r1, [pc, #236]	; (1000e3d8 <system_peripheral_reset+0x418>)
1000e2ea:	400a      	ands	r2, r1
1000e2ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e2ee:	4b24      	ldr	r3, [pc, #144]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2f0:	4a23      	ldr	r2, [pc, #140]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e2f2:	6852      	ldr	r2, [r2, #4]
1000e2f4:	2180      	movs	r1, #128	; 0x80
1000e2f6:	0589      	lsls	r1, r1, #22
1000e2f8:	430a      	orrs	r2, r1
1000e2fa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
1000e2fc:	e120      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e2fe:	4b20      	ldr	r3, [pc, #128]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e300:	4a1f      	ldr	r2, [pc, #124]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e302:	6852      	ldr	r2, [r2, #4]
1000e304:	4935      	ldr	r1, [pc, #212]	; (1000e3dc <system_peripheral_reset+0x41c>)
1000e306:	400a      	ands	r2, r1
1000e308:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e30a:	4b1d      	ldr	r3, [pc, #116]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e30c:	4a1c      	ldr	r2, [pc, #112]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e30e:	6852      	ldr	r2, [r2, #4]
1000e310:	2180      	movs	r1, #128	; 0x80
1000e312:	05c9      	lsls	r1, r1, #23
1000e314:	430a      	orrs	r2, r1
1000e316:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
1000e318:	e112      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e31a:	4b19      	ldr	r3, [pc, #100]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e31c:	4a18      	ldr	r2, [pc, #96]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e31e:	6852      	ldr	r2, [r2, #4]
1000e320:	0052      	lsls	r2, r2, #1
1000e322:	0852      	lsrs	r2, r2, #1
1000e324:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e326:	4b16      	ldr	r3, [pc, #88]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e328:	4a15      	ldr	r2, [pc, #84]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e32a:	6852      	ldr	r2, [r2, #4]
1000e32c:	2180      	movs	r1, #128	; 0x80
1000e32e:	0609      	lsls	r1, r1, #24
1000e330:	430a      	orrs	r2, r1
1000e332:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000e334:	e104      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e336:	4a12      	ldr	r2, [pc, #72]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e338:	4b11      	ldr	r3, [pc, #68]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e33a:	891b      	ldrh	r3, [r3, #8]
1000e33c:	b29b      	uxth	r3, r3
1000e33e:	2101      	movs	r1, #1
1000e340:	438b      	bics	r3, r1
1000e342:	b29b      	uxth	r3, r3
1000e344:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e346:	4a0e      	ldr	r2, [pc, #56]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e348:	4b0d      	ldr	r3, [pc, #52]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e34a:	891b      	ldrh	r3, [r3, #8]
1000e34c:	b29b      	uxth	r3, r3
1000e34e:	2101      	movs	r1, #1
1000e350:	430b      	orrs	r3, r1
1000e352:	b29b      	uxth	r3, r3
1000e354:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
1000e356:	e0f3      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e358:	4a09      	ldr	r2, [pc, #36]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e35a:	4b09      	ldr	r3, [pc, #36]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e35c:	891b      	ldrh	r3, [r3, #8]
1000e35e:	b29b      	uxth	r3, r3
1000e360:	2102      	movs	r1, #2
1000e362:	438b      	bics	r3, r1
1000e364:	b29b      	uxth	r3, r3
1000e366:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e368:	4a05      	ldr	r2, [pc, #20]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e36a:	4b05      	ldr	r3, [pc, #20]	; (1000e380 <system_peripheral_reset+0x3c0>)
1000e36c:	891b      	ldrh	r3, [r3, #8]
1000e36e:	b29b      	uxth	r3, r3
1000e370:	2102      	movs	r1, #2
1000e372:	430b      	orrs	r3, r1
1000e374:	b29b      	uxth	r3, r3
1000e376:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
1000e378:	e0e2      	b.n	1000e540 <system_peripheral_reset+0x580>
1000e37a:	46c0      	nop			; (mov r8, r8)
1000e37c:	10019134 	.word	0x10019134
1000e380:	4000b000 	.word	0x4000b000
1000e384:	fffffeff 	.word	0xfffffeff
1000e388:	fffffdff 	.word	0xfffffdff
1000e38c:	fffffbff 	.word	0xfffffbff
1000e390:	fffff7ff 	.word	0xfffff7ff
1000e394:	ffffefff 	.word	0xffffefff
1000e398:	ffffdfff 	.word	0xffffdfff
1000e39c:	ffffbfff 	.word	0xffffbfff
1000e3a0:	ffff7fff 	.word	0xffff7fff
1000e3a4:	fffeffff 	.word	0xfffeffff
1000e3a8:	fffdffff 	.word	0xfffdffff
1000e3ac:	fffbffff 	.word	0xfffbffff
1000e3b0:	fff7ffff 	.word	0xfff7ffff
1000e3b4:	ffefffff 	.word	0xffefffff
1000e3b8:	ffdfffff 	.word	0xffdfffff
1000e3bc:	ffbfffff 	.word	0xffbfffff
1000e3c0:	ff7fffff 	.word	0xff7fffff
1000e3c4:	feffffff 	.word	0xfeffffff
1000e3c8:	fdffffff 	.word	0xfdffffff
1000e3cc:	fbffffff 	.word	0xfbffffff
1000e3d0:	f7ffffff 	.word	0xf7ffffff
1000e3d4:	efffffff 	.word	0xefffffff
1000e3d8:	dfffffff 	.word	0xdfffffff
1000e3dc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e3e0:	4a5a      	ldr	r2, [pc, #360]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e3e2:	4b5a      	ldr	r3, [pc, #360]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e3e4:	891b      	ldrh	r3, [r3, #8]
1000e3e6:	b29b      	uxth	r3, r3
1000e3e8:	2104      	movs	r1, #4
1000e3ea:	438b      	bics	r3, r1
1000e3ec:	b29b      	uxth	r3, r3
1000e3ee:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e3f0:	4a56      	ldr	r2, [pc, #344]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e3f2:	4b56      	ldr	r3, [pc, #344]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e3f4:	891b      	ldrh	r3, [r3, #8]
1000e3f6:	b29b      	uxth	r3, r3
1000e3f8:	2104      	movs	r1, #4
1000e3fa:	430b      	orrs	r3, r1
1000e3fc:	b29b      	uxth	r3, r3
1000e3fe:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
1000e400:	e09e      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e402:	4a52      	ldr	r2, [pc, #328]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e404:	4b51      	ldr	r3, [pc, #324]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e406:	891b      	ldrh	r3, [r3, #8]
1000e408:	b29b      	uxth	r3, r3
1000e40a:	2108      	movs	r1, #8
1000e40c:	438b      	bics	r3, r1
1000e40e:	b29b      	uxth	r3, r3
1000e410:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e412:	4a4e      	ldr	r2, [pc, #312]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e414:	4b4d      	ldr	r3, [pc, #308]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e416:	891b      	ldrh	r3, [r3, #8]
1000e418:	b29b      	uxth	r3, r3
1000e41a:	2108      	movs	r1, #8
1000e41c:	430b      	orrs	r3, r1
1000e41e:	b29b      	uxth	r3, r3
1000e420:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000e422:	e08d      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e424:	4a49      	ldr	r2, [pc, #292]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e426:	4b49      	ldr	r3, [pc, #292]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e428:	891b      	ldrh	r3, [r3, #8]
1000e42a:	b29b      	uxth	r3, r3
1000e42c:	2110      	movs	r1, #16
1000e42e:	438b      	bics	r3, r1
1000e430:	b29b      	uxth	r3, r3
1000e432:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e434:	4a45      	ldr	r2, [pc, #276]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e436:	4b45      	ldr	r3, [pc, #276]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e438:	891b      	ldrh	r3, [r3, #8]
1000e43a:	b29b      	uxth	r3, r3
1000e43c:	2110      	movs	r1, #16
1000e43e:	430b      	orrs	r3, r1
1000e440:	b29b      	uxth	r3, r3
1000e442:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000e444:	e07c      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e446:	4a41      	ldr	r2, [pc, #260]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e448:	4b40      	ldr	r3, [pc, #256]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e44a:	891b      	ldrh	r3, [r3, #8]
1000e44c:	b29b      	uxth	r3, r3
1000e44e:	2120      	movs	r1, #32
1000e450:	438b      	bics	r3, r1
1000e452:	b29b      	uxth	r3, r3
1000e454:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e456:	4a3d      	ldr	r2, [pc, #244]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e458:	4b3c      	ldr	r3, [pc, #240]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e45a:	891b      	ldrh	r3, [r3, #8]
1000e45c:	b29b      	uxth	r3, r3
1000e45e:	2120      	movs	r1, #32
1000e460:	430b      	orrs	r3, r1
1000e462:	b29b      	uxth	r3, r3
1000e464:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000e466:	e06b      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e468:	4a38      	ldr	r2, [pc, #224]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e46a:	4b38      	ldr	r3, [pc, #224]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e46c:	891b      	ldrh	r3, [r3, #8]
1000e46e:	b29b      	uxth	r3, r3
1000e470:	2140      	movs	r1, #64	; 0x40
1000e472:	438b      	bics	r3, r1
1000e474:	b29b      	uxth	r3, r3
1000e476:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e478:	4a34      	ldr	r2, [pc, #208]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e47a:	4b34      	ldr	r3, [pc, #208]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e47c:	891b      	ldrh	r3, [r3, #8]
1000e47e:	b29b      	uxth	r3, r3
1000e480:	2140      	movs	r1, #64	; 0x40
1000e482:	430b      	orrs	r3, r1
1000e484:	b29b      	uxth	r3, r3
1000e486:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000e488:	e05a      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e48a:	4a30      	ldr	r2, [pc, #192]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e48c:	4b2f      	ldr	r3, [pc, #188]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e48e:	891b      	ldrh	r3, [r3, #8]
1000e490:	b29b      	uxth	r3, r3
1000e492:	2180      	movs	r1, #128	; 0x80
1000e494:	438b      	bics	r3, r1
1000e496:	b29b      	uxth	r3, r3
1000e498:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e49a:	4a2c      	ldr	r2, [pc, #176]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e49c:	4b2b      	ldr	r3, [pc, #172]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e49e:	891b      	ldrh	r3, [r3, #8]
1000e4a0:	b29b      	uxth	r3, r3
1000e4a2:	2180      	movs	r1, #128	; 0x80
1000e4a4:	430b      	orrs	r3, r1
1000e4a6:	b29b      	uxth	r3, r3
1000e4a8:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000e4aa:	e049      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e4ac:	4a27      	ldr	r2, [pc, #156]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4ae:	4b27      	ldr	r3, [pc, #156]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4b0:	891b      	ldrh	r3, [r3, #8]
1000e4b2:	b29b      	uxth	r3, r3
1000e4b4:	4926      	ldr	r1, [pc, #152]	; (1000e550 <system_peripheral_reset+0x590>)
1000e4b6:	400b      	ands	r3, r1
1000e4b8:	b29b      	uxth	r3, r3
1000e4ba:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e4bc:	4923      	ldr	r1, [pc, #140]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4be:	4b23      	ldr	r3, [pc, #140]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4c0:	891b      	ldrh	r3, [r3, #8]
1000e4c2:	b29b      	uxth	r3, r3
1000e4c4:	2280      	movs	r2, #128	; 0x80
1000e4c6:	0052      	lsls	r2, r2, #1
1000e4c8:	4313      	orrs	r3, r2
1000e4ca:	b29b      	uxth	r3, r3
1000e4cc:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000e4ce:	e037      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e4d0:	4a1e      	ldr	r2, [pc, #120]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4d2:	4b1e      	ldr	r3, [pc, #120]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4d4:	891b      	ldrh	r3, [r3, #8]
1000e4d6:	b29b      	uxth	r3, r3
1000e4d8:	491e      	ldr	r1, [pc, #120]	; (1000e554 <system_peripheral_reset+0x594>)
1000e4da:	400b      	ands	r3, r1
1000e4dc:	b29b      	uxth	r3, r3
1000e4de:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e4e0:	491a      	ldr	r1, [pc, #104]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4e2:	4b1a      	ldr	r3, [pc, #104]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4e4:	891b      	ldrh	r3, [r3, #8]
1000e4e6:	b29b      	uxth	r3, r3
1000e4e8:	2280      	movs	r2, #128	; 0x80
1000e4ea:	0092      	lsls	r2, r2, #2
1000e4ec:	4313      	orrs	r3, r2
1000e4ee:	b29b      	uxth	r3, r3
1000e4f0:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000e4f2:	e025      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e4f4:	4a15      	ldr	r2, [pc, #84]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4f6:	4b15      	ldr	r3, [pc, #84]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e4f8:	891b      	ldrh	r3, [r3, #8]
1000e4fa:	b29b      	uxth	r3, r3
1000e4fc:	4916      	ldr	r1, [pc, #88]	; (1000e558 <system_peripheral_reset+0x598>)
1000e4fe:	400b      	ands	r3, r1
1000e500:	b29b      	uxth	r3, r3
1000e502:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e504:	4911      	ldr	r1, [pc, #68]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e506:	4b11      	ldr	r3, [pc, #68]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e508:	891b      	ldrh	r3, [r3, #8]
1000e50a:	b29b      	uxth	r3, r3
1000e50c:	2280      	movs	r2, #128	; 0x80
1000e50e:	00d2      	lsls	r2, r2, #3
1000e510:	4313      	orrs	r3, r2
1000e512:	b29b      	uxth	r3, r3
1000e514:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000e516:	e013      	b.n	1000e540 <system_peripheral_reset+0x580>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e518:	4a0c      	ldr	r2, [pc, #48]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e51a:	4b0c      	ldr	r3, [pc, #48]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e51c:	891b      	ldrh	r3, [r3, #8]
1000e51e:	b29b      	uxth	r3, r3
1000e520:	490e      	ldr	r1, [pc, #56]	; (1000e55c <system_peripheral_reset+0x59c>)
1000e522:	400b      	ands	r3, r1
1000e524:	b29b      	uxth	r3, r3
1000e526:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e528:	4908      	ldr	r1, [pc, #32]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e52a:	4b08      	ldr	r3, [pc, #32]	; (1000e54c <system_peripheral_reset+0x58c>)
1000e52c:	891b      	ldrh	r3, [r3, #8]
1000e52e:	b29b      	uxth	r3, r3
1000e530:	2280      	movs	r2, #128	; 0x80
1000e532:	0112      	lsls	r2, r2, #4
1000e534:	4313      	orrs	r3, r2
1000e536:	b29b      	uxth	r3, r3
1000e538:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
1000e53a:	e001      	b.n	1000e540 <system_peripheral_reset+0x580>

		default:
			return STATUS_ERR_INVALID_ARG;
1000e53c:	2317      	movs	r3, #23
1000e53e:	e000      	b.n	1000e542 <system_peripheral_reset+0x582>
	}

	return STATUS_OK;
1000e540:	2300      	movs	r3, #0
}
1000e542:	0018      	movs	r0, r3
1000e544:	46bd      	mov	sp, r7
1000e546:	b002      	add	sp, #8
1000e548:	bd80      	pop	{r7, pc}
1000e54a:	46c0      	nop			; (mov r8, r8)
1000e54c:	4000b000 	.word	0x4000b000
1000e550:	fffffeff 	.word	0xfffffeff
1000e554:	fffffdff 	.word	0xfffffdff
1000e558:	fffffbff 	.word	0xfffffbff
1000e55c:	fffff7ff 	.word	0xfffff7ff

1000e560 <system_register_isr>:
 * \param[in] isr_address Address of the ISR
 *
 */
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
1000e560:	b580      	push	{r7, lr}
1000e562:	b084      	sub	sp, #16
1000e564:	af00      	add	r7, sp, #0
1000e566:	0002      	movs	r2, r0
1000e568:	6039      	str	r1, [r7, #0]
1000e56a:	1dfb      	adds	r3, r7, #7
1000e56c:	701a      	strb	r2, [r3, #0]
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
1000e56e:	1dfb      	adds	r3, r7, #7
1000e570:	781b      	ldrb	r3, [r3, #0]
1000e572:	2280      	movs	r2, #128	; 0x80
1000e574:	04d2      	lsls	r2, r2, #19
1000e576:	4694      	mov	ip, r2
1000e578:	4463      	add	r3, ip
1000e57a:	009b      	lsls	r3, r3, #2
1000e57c:	60fb      	str	r3, [r7, #12]
	*temp = isr_address;
1000e57e:	68fb      	ldr	r3, [r7, #12]
1000e580:	683a      	ldr	r2, [r7, #0]
1000e582:	601a      	str	r2, [r3, #0]
}
1000e584:	46c0      	nop			; (mov r8, r8)
1000e586:	46bd      	mov	sp, r7
1000e588:	b004      	add	sp, #16
1000e58a:	bd80      	pop	{r7, pc}

1000e58c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000e58c:	b580      	push	{r7, lr}
1000e58e:	b082      	sub	sp, #8
1000e590:	af00      	add	r7, sp, #0
1000e592:	0002      	movs	r2, r0
1000e594:	1dfb      	adds	r3, r7, #7
1000e596:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e598:	4b06      	ldr	r3, [pc, #24]	; (1000e5b4 <NVIC_EnableIRQ+0x28>)
1000e59a:	1dfa      	adds	r2, r7, #7
1000e59c:	7812      	ldrb	r2, [r2, #0]
1000e59e:	0011      	movs	r1, r2
1000e5a0:	221f      	movs	r2, #31
1000e5a2:	400a      	ands	r2, r1
1000e5a4:	2101      	movs	r1, #1
1000e5a6:	4091      	lsls	r1, r2
1000e5a8:	000a      	movs	r2, r1
1000e5aa:	601a      	str	r2, [r3, #0]
}
1000e5ac:	46c0      	nop			; (mov r8, r8)
1000e5ae:	46bd      	mov	sp, r7
1000e5b0:	b002      	add	sp, #8
1000e5b2:	bd80      	pop	{r7, pc}
1000e5b4:	e000e100 	.word	0xe000e100

1000e5b8 <_uart_write>:
 * Writes a character from the TX buffer to the Data register.
 *
 * \param[in,out]  module  Pointer to UART software instance struct
 */
static void _uart_write(struct uart_module *const module)
{
1000e5b8:	b580      	push	{r7, lr}
1000e5ba:	b084      	sub	sp, #16
1000e5bc:	af00      	add	r7, sp, #0
1000e5be:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;
1000e5c0:	687b      	ldr	r3, [r7, #4]
1000e5c2:	681b      	ldr	r3, [r3, #0]
1000e5c4:	60fb      	str	r3, [r7, #12]

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000e5c6:	687b      	ldr	r3, [r7, #4]
1000e5c8:	699a      	ldr	r2, [r3, #24]
1000e5ca:	230b      	movs	r3, #11
1000e5cc:	18fb      	adds	r3, r7, r3
1000e5ce:	7812      	ldrb	r2, [r2, #0]
1000e5d0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000e5d2:	687b      	ldr	r3, [r7, #4]
1000e5d4:	699b      	ldr	r3, [r3, #24]
1000e5d6:	1c5a      	adds	r2, r3, #1
1000e5d8:	687b      	ldr	r3, [r7, #4]
1000e5da:	619a      	str	r2, [r3, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000e5dc:	68fb      	ldr	r3, [r7, #12]
1000e5de:	220b      	movs	r2, #11
1000e5e0:	18ba      	adds	r2, r7, r2
1000e5e2:	7812      	ldrb	r2, [r2, #0]
1000e5e4:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000e5e6:	687b      	ldr	r3, [r7, #4]
1000e5e8:	8bdb      	ldrh	r3, [r3, #30]
1000e5ea:	b29b      	uxth	r3, r3
1000e5ec:	3b01      	subs	r3, #1
1000e5ee:	b29a      	uxth	r2, r3
1000e5f0:	687b      	ldr	r3, [r7, #4]
1000e5f2:	83da      	strh	r2, [r3, #30]
}
1000e5f4:	46c0      	nop			; (mov r8, r8)
1000e5f6:	46bd      	mov	sp, r7
1000e5f8:	b004      	add	sp, #16
1000e5fa:	bd80      	pop	{r7, pc}

1000e5fc <_uart_read>:
 *
 * \param[in,out]  module  Pointer to UART software instance struct
 */
static void _uart_read(
		struct uart_module *const module)
{
1000e5fc:	b580      	push	{r7, lr}
1000e5fe:	b084      	sub	sp, #16
1000e600:	af00      	add	r7, sp, #0
1000e602:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;
1000e604:	687b      	ldr	r3, [r7, #4]
1000e606:	681b      	ldr	r3, [r3, #0]
1000e608:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000e60a:	68fb      	ldr	r3, [r7, #12]
1000e60c:	7c1b      	ldrb	r3, [r3, #16]
1000e60e:	b2da      	uxtb	r2, r3
1000e610:	230a      	movs	r3, #10
1000e612:	18fb      	adds	r3, r7, r3
1000e614:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000e616:	687b      	ldr	r3, [r7, #4]
1000e618:	695b      	ldr	r3, [r3, #20]
1000e61a:	220a      	movs	r2, #10
1000e61c:	18ba      	adds	r2, r7, r2
1000e61e:	8812      	ldrh	r2, [r2, #0]
1000e620:	b2d2      	uxtb	r2, r2
1000e622:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000e624:	687b      	ldr	r3, [r7, #4]
1000e626:	695b      	ldr	r3, [r3, #20]
1000e628:	1c5a      	adds	r2, r3, #1
1000e62a:	687b      	ldr	r3, [r7, #4]
1000e62c:	615a      	str	r2, [r3, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000e62e:	687b      	ldr	r3, [r7, #4]
1000e630:	8b9b      	ldrh	r3, [r3, #28]
1000e632:	b29b      	uxth	r3, r3
1000e634:	3b01      	subs	r3, #1
1000e636:	b29a      	uxth	r2, r3
1000e638:	687b      	ldr	r3, [r7, #4]
1000e63a:	839a      	strh	r2, [r3, #28]
}
1000e63c:	46c0      	nop			; (mov r8, r8)
1000e63e:	46bd      	mov	sp, r7
1000e640:	b004      	add	sp, #16
1000e642:	bd80      	pop	{r7, pc}

1000e644 <uart_rx0_isr_handler>:

static void uart_rx0_isr_handler(void)
{
1000e644:	b580      	push	{r7, lr}
1000e646:	b084      	sub	sp, #16
1000e648:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[0];
1000e64a:	4b32      	ldr	r3, [pc, #200]	; (1000e714 <uart_rx0_isr_handler+0xd0>)
1000e64c:	681b      	ldr	r3, [r3, #0]
1000e64e:	60fb      	str	r3, [r7, #12]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000e650:	68fb      	ldr	r3, [r7, #12]
1000e652:	681b      	ldr	r3, [r3, #0]
1000e654:	7d1b      	ldrb	r3, [r3, #20]
1000e656:	b2db      	uxtb	r3, r3
1000e658:	60bb      	str	r3, [r7, #8]
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000e65a:	68bb      	ldr	r3, [r7, #8]
1000e65c:	2240      	movs	r2, #64	; 0x40
1000e65e:	4013      	ands	r3, r2
1000e660:	d025      	beq.n	1000e6ae <uart_rx0_isr_handler+0x6a>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000e662:	68fb      	ldr	r3, [r7, #12]
1000e664:	2222      	movs	r2, #34	; 0x22
1000e666:	211e      	movs	r1, #30
1000e668:	5499      	strb	r1, [r3, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000e66a:	68fb      	ldr	r3, [r7, #12]
1000e66c:	681a      	ldr	r2, [r3, #0]
1000e66e:	68fb      	ldr	r3, [r7, #12]
1000e670:	681b      	ldr	r3, [r3, #0]
1000e672:	7e1b      	ldrb	r3, [r3, #24]
1000e674:	b2db      	uxtb	r3, r3
1000e676:	2141      	movs	r1, #65	; 0x41
1000e678:	438b      	bics	r3, r1
1000e67a:	b2db      	uxtb	r3, r3
1000e67c:	7613      	strb	r3, [r2, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000e67e:	68fb      	ldr	r3, [r7, #12]
1000e680:	2221      	movs	r2, #33	; 0x21
1000e682:	5c9b      	ldrb	r3, [r3, r2]
1000e684:	001a      	movs	r2, r3
1000e686:	2308      	movs	r3, #8
1000e688:	4013      	ands	r3, r2
1000e68a:	d00b      	beq.n	1000e6a4 <uart_rx0_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000e68c:	68fb      	ldr	r3, [r7, #12]
1000e68e:	2220      	movs	r2, #32
1000e690:	5c9b      	ldrb	r3, [r3, r2]
1000e692:	001a      	movs	r2, r3
1000e694:	2308      	movs	r3, #8
1000e696:	4013      	ands	r3, r2
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000e698:	d004      	beq.n	1000e6a4 <uart_rx0_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000e69a:	68fb      	ldr	r3, [r7, #12]
1000e69c:	691b      	ldr	r3, [r3, #16]
1000e69e:	68fa      	ldr	r2, [r7, #12]
1000e6a0:	0010      	movs	r0, r2
1000e6a2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000e6a4:	68fb      	ldr	r3, [r7, #12]
1000e6a6:	681a      	ldr	r2, [r3, #0]
1000e6a8:	1dfb      	adds	r3, r7, #7
1000e6aa:	7c12      	ldrb	r2, [r2, #16]
1000e6ac:	701a      	strb	r2, [r3, #0]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000e6ae:	68bb      	ldr	r3, [r7, #8]
1000e6b0:	2201      	movs	r2, #1
1000e6b2:	4013      	ands	r3, r2
1000e6b4:	d029      	beq.n	1000e70a <uart_rx0_isr_handler+0xc6>
		_uart_read(module);
1000e6b6:	68fb      	ldr	r3, [r7, #12]
1000e6b8:	0018      	movs	r0, r3
1000e6ba:	4b17      	ldr	r3, [pc, #92]	; (1000e718 <uart_rx0_isr_handler+0xd4>)
1000e6bc:	4798      	blx	r3
		if (module->remaining_rx_buffer_length == 0) {
1000e6be:	68fb      	ldr	r3, [r7, #12]
1000e6c0:	8b9b      	ldrh	r3, [r3, #28]
1000e6c2:	b29b      	uxth	r3, r3
1000e6c4:	2b00      	cmp	r3, #0
1000e6c6:	d120      	bne.n	1000e70a <uart_rx0_isr_handler+0xc6>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000e6c8:	68fb      	ldr	r3, [r7, #12]
1000e6ca:	2221      	movs	r2, #33	; 0x21
1000e6cc:	5c9b      	ldrb	r3, [r3, r2]
1000e6ce:	001a      	movs	r2, r3
1000e6d0:	2304      	movs	r3, #4
1000e6d2:	4013      	ands	r3, r2
1000e6d4:	d019      	beq.n	1000e70a <uart_rx0_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000e6d6:	68fb      	ldr	r3, [r7, #12]
1000e6d8:	2220      	movs	r2, #32
1000e6da:	5c9b      	ldrb	r3, [r3, r2]
1000e6dc:	001a      	movs	r2, r3
1000e6de:	2304      	movs	r3, #4
1000e6e0:	4013      	ands	r3, r2
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000e6e2:	d012      	beq.n	1000e70a <uart_rx0_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000e6e4:	68fb      	ldr	r3, [r7, #12]
1000e6e6:	2222      	movs	r2, #34	; 0x22
1000e6e8:	2100      	movs	r1, #0
1000e6ea:	5499      	strb	r1, [r3, r2]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000e6ec:	68fb      	ldr	r3, [r7, #12]
1000e6ee:	681a      	ldr	r2, [r3, #0]
1000e6f0:	68fb      	ldr	r3, [r7, #12]
1000e6f2:	681b      	ldr	r3, [r3, #0]
1000e6f4:	7e1b      	ldrb	r3, [r3, #24]
1000e6f6:	b2db      	uxtb	r3, r3
1000e6f8:	2101      	movs	r1, #1
1000e6fa:	438b      	bics	r3, r1
1000e6fc:	b2db      	uxtb	r3, r3
1000e6fe:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000e700:	68fb      	ldr	r3, [r7, #12]
1000e702:	68db      	ldr	r3, [r3, #12]
1000e704:	68fa      	ldr	r2, [r7, #12]
1000e706:	0010      	movs	r0, r2
1000e708:	4798      	blx	r3
			}
		}
	}
}
1000e70a:	46c0      	nop			; (mov r8, r8)
1000e70c:	46bd      	mov	sp, r7
1000e70e:	b004      	add	sp, #16
1000e710:	bd80      	pop	{r7, pc}
1000e712:	46c0      	nop			; (mov r8, r8)
1000e714:	1001a564 	.word	0x1001a564
1000e718:	1000e5fd 	.word	0x1000e5fd

1000e71c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000e71c:	b580      	push	{r7, lr}
1000e71e:	b082      	sub	sp, #8
1000e720:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[0];
1000e722:	4b34      	ldr	r3, [pc, #208]	; (1000e7f4 <uart_tx0_isr_handler+0xd8>)
1000e724:	681b      	ldr	r3, [r3, #0]
1000e726:	607b      	str	r3, [r7, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000e728:	687b      	ldr	r3, [r7, #4]
1000e72a:	681b      	ldr	r3, [r3, #0]
1000e72c:	791b      	ldrb	r3, [r3, #4]
1000e72e:	b2db      	uxtb	r3, r3
1000e730:	603b      	str	r3, [r7, #0]
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000e732:	683b      	ldr	r3, [r7, #0]
1000e734:	2201      	movs	r2, #1
1000e736:	4013      	ands	r3, r2
1000e738:	d01c      	beq.n	1000e774 <uart_tx0_isr_handler+0x58>
		_uart_write(module);
1000e73a:	687b      	ldr	r3, [r7, #4]
1000e73c:	0018      	movs	r0, r3
1000e73e:	4b2e      	ldr	r3, [pc, #184]	; (1000e7f8 <uart_tx0_isr_handler+0xdc>)
1000e740:	4798      	blx	r3
		if (module->remaining_tx_buffer_length == 0) {
1000e742:	687b      	ldr	r3, [r7, #4]
1000e744:	8bdb      	ldrh	r3, [r3, #30]
1000e746:	b29b      	uxth	r3, r3
1000e748:	2b00      	cmp	r3, #0
1000e74a:	d113      	bne.n	1000e774 <uart_tx0_isr_handler+0x58>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000e74c:	687b      	ldr	r3, [r7, #4]
1000e74e:	681a      	ldr	r2, [r3, #0]
1000e750:	687b      	ldr	r3, [r7, #4]
1000e752:	681b      	ldr	r3, [r3, #0]
1000e754:	7a1b      	ldrb	r3, [r3, #8]
1000e756:	b2db      	uxtb	r3, r3
1000e758:	2101      	movs	r1, #1
1000e75a:	438b      	bics	r3, r1
1000e75c:	b2db      	uxtb	r3, r3
1000e75e:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000e760:	687b      	ldr	r3, [r7, #4]
1000e762:	681a      	ldr	r2, [r3, #0]
1000e764:	687b      	ldr	r3, [r7, #4]
1000e766:	681b      	ldr	r3, [r3, #0]
1000e768:	7a1b      	ldrb	r3, [r3, #8]
1000e76a:	b2db      	uxtb	r3, r3
1000e76c:	2110      	movs	r1, #16
1000e76e:	430b      	orrs	r3, r1
1000e770:	b2db      	uxtb	r3, r3
1000e772:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000e774:	683b      	ldr	r3, [r7, #0]
1000e776:	2210      	movs	r2, #16
1000e778:	4013      	ands	r3, r2
1000e77a:	d020      	beq.n	1000e7be <uart_tx0_isr_handler+0xa2>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000e77c:	687b      	ldr	r3, [r7, #4]
1000e77e:	2221      	movs	r2, #33	; 0x21
1000e780:	5c9b      	ldrb	r3, [r3, r2]
1000e782:	001a      	movs	r2, r3
1000e784:	2301      	movs	r3, #1
1000e786:	4013      	ands	r3, r2
1000e788:	d019      	beq.n	1000e7be <uart_tx0_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000e78a:	687b      	ldr	r3, [r7, #4]
1000e78c:	2220      	movs	r2, #32
1000e78e:	5c9b      	ldrb	r3, [r3, r2]
1000e790:	001a      	movs	r2, r3
1000e792:	2301      	movs	r3, #1
1000e794:	4013      	ands	r3, r2
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000e796:	d012      	beq.n	1000e7be <uart_tx0_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000e798:	687b      	ldr	r3, [r7, #4]
1000e79a:	2222      	movs	r2, #34	; 0x22
1000e79c:	2100      	movs	r1, #0
1000e79e:	5499      	strb	r1, [r3, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000e7a0:	687b      	ldr	r3, [r7, #4]
1000e7a2:	681a      	ldr	r2, [r3, #0]
1000e7a4:	687b      	ldr	r3, [r7, #4]
1000e7a6:	681b      	ldr	r3, [r3, #0]
1000e7a8:	7a1b      	ldrb	r3, [r3, #8]
1000e7aa:	b2db      	uxtb	r3, r3
1000e7ac:	2110      	movs	r1, #16
1000e7ae:	438b      	bics	r3, r1
1000e7b0:	b2db      	uxtb	r3, r3
1000e7b2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000e7b4:	687b      	ldr	r3, [r7, #4]
1000e7b6:	685b      	ldr	r3, [r3, #4]
1000e7b8:	687a      	ldr	r2, [r7, #4]
1000e7ba:	0010      	movs	r0, r2
1000e7bc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000e7be:	683b      	ldr	r3, [r7, #0]
1000e7c0:	2220      	movs	r2, #32
1000e7c2:	4013      	ands	r3, r2
1000e7c4:	d012      	beq.n	1000e7ec <uart_tx0_isr_handler+0xd0>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000e7c6:	687b      	ldr	r3, [r7, #4]
1000e7c8:	2221      	movs	r2, #33	; 0x21
1000e7ca:	5c9b      	ldrb	r3, [r3, r2]
1000e7cc:	001a      	movs	r2, r3
1000e7ce:	2302      	movs	r3, #2
1000e7d0:	4013      	ands	r3, r2
1000e7d2:	d00b      	beq.n	1000e7ec <uart_tx0_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000e7d4:	687b      	ldr	r3, [r7, #4]
1000e7d6:	2220      	movs	r2, #32
1000e7d8:	5c9b      	ldrb	r3, [r3, r2]
1000e7da:	001a      	movs	r2, r3
1000e7dc:	2302      	movs	r3, #2
1000e7de:	4013      	ands	r3, r2
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000e7e0:	d004      	beq.n	1000e7ec <uart_tx0_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000e7e2:	687b      	ldr	r3, [r7, #4]
1000e7e4:	689b      	ldr	r3, [r3, #8]
1000e7e6:	687a      	ldr	r2, [r7, #4]
1000e7e8:	0010      	movs	r0, r2
1000e7ea:	4798      	blx	r3
		}

	}
}
1000e7ec:	46c0      	nop			; (mov r8, r8)
1000e7ee:	46bd      	mov	sp, r7
1000e7f0:	b002      	add	sp, #8
1000e7f2:	bd80      	pop	{r7, pc}
1000e7f4:	1001a564 	.word	0x1001a564
1000e7f8:	1000e5b9 	.word	0x1000e5b9

1000e7fc <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000e7fc:	b580      	push	{r7, lr}
1000e7fe:	b084      	sub	sp, #16
1000e800:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[1];
1000e802:	4b32      	ldr	r3, [pc, #200]	; (1000e8cc <uart_rx1_isr_handler+0xd0>)
1000e804:	685b      	ldr	r3, [r3, #4]
1000e806:	60fb      	str	r3, [r7, #12]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000e808:	68fb      	ldr	r3, [r7, #12]
1000e80a:	681b      	ldr	r3, [r3, #0]
1000e80c:	7d1b      	ldrb	r3, [r3, #20]
1000e80e:	b2db      	uxtb	r3, r3
1000e810:	60bb      	str	r3, [r7, #8]
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000e812:	68bb      	ldr	r3, [r7, #8]
1000e814:	2240      	movs	r2, #64	; 0x40
1000e816:	4013      	ands	r3, r2
1000e818:	d025      	beq.n	1000e866 <uart_rx1_isr_handler+0x6a>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000e81a:	68fb      	ldr	r3, [r7, #12]
1000e81c:	2222      	movs	r2, #34	; 0x22
1000e81e:	211e      	movs	r1, #30
1000e820:	5499      	strb	r1, [r3, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000e822:	68fb      	ldr	r3, [r7, #12]
1000e824:	681a      	ldr	r2, [r3, #0]
1000e826:	68fb      	ldr	r3, [r7, #12]
1000e828:	681b      	ldr	r3, [r3, #0]
1000e82a:	7e1b      	ldrb	r3, [r3, #24]
1000e82c:	b2db      	uxtb	r3, r3
1000e82e:	2141      	movs	r1, #65	; 0x41
1000e830:	438b      	bics	r3, r1
1000e832:	b2db      	uxtb	r3, r3
1000e834:	7613      	strb	r3, [r2, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000e836:	68fb      	ldr	r3, [r7, #12]
1000e838:	2221      	movs	r2, #33	; 0x21
1000e83a:	5c9b      	ldrb	r3, [r3, r2]
1000e83c:	001a      	movs	r2, r3
1000e83e:	2308      	movs	r3, #8
1000e840:	4013      	ands	r3, r2
1000e842:	d00b      	beq.n	1000e85c <uart_rx1_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000e844:	68fb      	ldr	r3, [r7, #12]
1000e846:	2220      	movs	r2, #32
1000e848:	5c9b      	ldrb	r3, [r3, r2]
1000e84a:	001a      	movs	r2, r3
1000e84c:	2308      	movs	r3, #8
1000e84e:	4013      	ands	r3, r2
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000e850:	d004      	beq.n	1000e85c <uart_rx1_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000e852:	68fb      	ldr	r3, [r7, #12]
1000e854:	691b      	ldr	r3, [r3, #16]
1000e856:	68fa      	ldr	r2, [r7, #12]
1000e858:	0010      	movs	r0, r2
1000e85a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000e85c:	68fb      	ldr	r3, [r7, #12]
1000e85e:	681a      	ldr	r2, [r3, #0]
1000e860:	1dfb      	adds	r3, r7, #7
1000e862:	7c12      	ldrb	r2, [r2, #16]
1000e864:	701a      	strb	r2, [r3, #0]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000e866:	68bb      	ldr	r3, [r7, #8]
1000e868:	2201      	movs	r2, #1
1000e86a:	4013      	ands	r3, r2
1000e86c:	d029      	beq.n	1000e8c2 <uart_rx1_isr_handler+0xc6>
		_uart_read(module);
1000e86e:	68fb      	ldr	r3, [r7, #12]
1000e870:	0018      	movs	r0, r3
1000e872:	4b17      	ldr	r3, [pc, #92]	; (1000e8d0 <uart_rx1_isr_handler+0xd4>)
1000e874:	4798      	blx	r3
		if (module->remaining_rx_buffer_length == 0) {
1000e876:	68fb      	ldr	r3, [r7, #12]
1000e878:	8b9b      	ldrh	r3, [r3, #28]
1000e87a:	b29b      	uxth	r3, r3
1000e87c:	2b00      	cmp	r3, #0
1000e87e:	d120      	bne.n	1000e8c2 <uart_rx1_isr_handler+0xc6>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000e880:	68fb      	ldr	r3, [r7, #12]
1000e882:	2221      	movs	r2, #33	; 0x21
1000e884:	5c9b      	ldrb	r3, [r3, r2]
1000e886:	001a      	movs	r2, r3
1000e888:	2304      	movs	r3, #4
1000e88a:	4013      	ands	r3, r2
1000e88c:	d019      	beq.n	1000e8c2 <uart_rx1_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000e88e:	68fb      	ldr	r3, [r7, #12]
1000e890:	2220      	movs	r2, #32
1000e892:	5c9b      	ldrb	r3, [r3, r2]
1000e894:	001a      	movs	r2, r3
1000e896:	2304      	movs	r3, #4
1000e898:	4013      	ands	r3, r2
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000e89a:	d012      	beq.n	1000e8c2 <uart_rx1_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000e89c:	68fb      	ldr	r3, [r7, #12]
1000e89e:	2222      	movs	r2, #34	; 0x22
1000e8a0:	2100      	movs	r1, #0
1000e8a2:	5499      	strb	r1, [r3, r2]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000e8a4:	68fb      	ldr	r3, [r7, #12]
1000e8a6:	681a      	ldr	r2, [r3, #0]
1000e8a8:	68fb      	ldr	r3, [r7, #12]
1000e8aa:	681b      	ldr	r3, [r3, #0]
1000e8ac:	7e1b      	ldrb	r3, [r3, #24]
1000e8ae:	b2db      	uxtb	r3, r3
1000e8b0:	2101      	movs	r1, #1
1000e8b2:	438b      	bics	r3, r1
1000e8b4:	b2db      	uxtb	r3, r3
1000e8b6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000e8b8:	68fb      	ldr	r3, [r7, #12]
1000e8ba:	68db      	ldr	r3, [r3, #12]
1000e8bc:	68fa      	ldr	r2, [r7, #12]
1000e8be:	0010      	movs	r0, r2
1000e8c0:	4798      	blx	r3
			}
		}
	}
}
1000e8c2:	46c0      	nop			; (mov r8, r8)
1000e8c4:	46bd      	mov	sp, r7
1000e8c6:	b004      	add	sp, #16
1000e8c8:	bd80      	pop	{r7, pc}
1000e8ca:	46c0      	nop			; (mov r8, r8)
1000e8cc:	1001a564 	.word	0x1001a564
1000e8d0:	1000e5fd 	.word	0x1000e5fd

1000e8d4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000e8d4:	b580      	push	{r7, lr}
1000e8d6:	b082      	sub	sp, #8
1000e8d8:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[1];
1000e8da:	4b34      	ldr	r3, [pc, #208]	; (1000e9ac <uart_tx1_isr_handler+0xd8>)
1000e8dc:	685b      	ldr	r3, [r3, #4]
1000e8de:	607b      	str	r3, [r7, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000e8e0:	687b      	ldr	r3, [r7, #4]
1000e8e2:	681b      	ldr	r3, [r3, #0]
1000e8e4:	791b      	ldrb	r3, [r3, #4]
1000e8e6:	b2db      	uxtb	r3, r3
1000e8e8:	603b      	str	r3, [r7, #0]
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000e8ea:	683b      	ldr	r3, [r7, #0]
1000e8ec:	2201      	movs	r2, #1
1000e8ee:	4013      	ands	r3, r2
1000e8f0:	d01c      	beq.n	1000e92c <uart_tx1_isr_handler+0x58>
		_uart_write(module);
1000e8f2:	687b      	ldr	r3, [r7, #4]
1000e8f4:	0018      	movs	r0, r3
1000e8f6:	4b2e      	ldr	r3, [pc, #184]	; (1000e9b0 <uart_tx1_isr_handler+0xdc>)
1000e8f8:	4798      	blx	r3
		if (module->remaining_tx_buffer_length == 0) {
1000e8fa:	687b      	ldr	r3, [r7, #4]
1000e8fc:	8bdb      	ldrh	r3, [r3, #30]
1000e8fe:	b29b      	uxth	r3, r3
1000e900:	2b00      	cmp	r3, #0
1000e902:	d113      	bne.n	1000e92c <uart_tx1_isr_handler+0x58>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000e904:	687b      	ldr	r3, [r7, #4]
1000e906:	681a      	ldr	r2, [r3, #0]
1000e908:	687b      	ldr	r3, [r7, #4]
1000e90a:	681b      	ldr	r3, [r3, #0]
1000e90c:	7a1b      	ldrb	r3, [r3, #8]
1000e90e:	b2db      	uxtb	r3, r3
1000e910:	2101      	movs	r1, #1
1000e912:	438b      	bics	r3, r1
1000e914:	b2db      	uxtb	r3, r3
1000e916:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000e918:	687b      	ldr	r3, [r7, #4]
1000e91a:	681a      	ldr	r2, [r3, #0]
1000e91c:	687b      	ldr	r3, [r7, #4]
1000e91e:	681b      	ldr	r3, [r3, #0]
1000e920:	7a1b      	ldrb	r3, [r3, #8]
1000e922:	b2db      	uxtb	r3, r3
1000e924:	2110      	movs	r1, #16
1000e926:	430b      	orrs	r3, r1
1000e928:	b2db      	uxtb	r3, r3
1000e92a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000e92c:	683b      	ldr	r3, [r7, #0]
1000e92e:	2210      	movs	r2, #16
1000e930:	4013      	ands	r3, r2
1000e932:	d020      	beq.n	1000e976 <uart_tx1_isr_handler+0xa2>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000e934:	687b      	ldr	r3, [r7, #4]
1000e936:	2221      	movs	r2, #33	; 0x21
1000e938:	5c9b      	ldrb	r3, [r3, r2]
1000e93a:	001a      	movs	r2, r3
1000e93c:	2301      	movs	r3, #1
1000e93e:	4013      	ands	r3, r2
1000e940:	d019      	beq.n	1000e976 <uart_tx1_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000e942:	687b      	ldr	r3, [r7, #4]
1000e944:	2220      	movs	r2, #32
1000e946:	5c9b      	ldrb	r3, [r3, r2]
1000e948:	001a      	movs	r2, r3
1000e94a:	2301      	movs	r3, #1
1000e94c:	4013      	ands	r3, r2
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000e94e:	d012      	beq.n	1000e976 <uart_tx1_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000e950:	687b      	ldr	r3, [r7, #4]
1000e952:	2222      	movs	r2, #34	; 0x22
1000e954:	2100      	movs	r1, #0
1000e956:	5499      	strb	r1, [r3, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000e958:	687b      	ldr	r3, [r7, #4]
1000e95a:	681a      	ldr	r2, [r3, #0]
1000e95c:	687b      	ldr	r3, [r7, #4]
1000e95e:	681b      	ldr	r3, [r3, #0]
1000e960:	7a1b      	ldrb	r3, [r3, #8]
1000e962:	b2db      	uxtb	r3, r3
1000e964:	2110      	movs	r1, #16
1000e966:	438b      	bics	r3, r1
1000e968:	b2db      	uxtb	r3, r3
1000e96a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000e96c:	687b      	ldr	r3, [r7, #4]
1000e96e:	685b      	ldr	r3, [r3, #4]
1000e970:	687a      	ldr	r2, [r7, #4]
1000e972:	0010      	movs	r0, r2
1000e974:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000e976:	683b      	ldr	r3, [r7, #0]
1000e978:	2220      	movs	r2, #32
1000e97a:	4013      	ands	r3, r2
1000e97c:	d012      	beq.n	1000e9a4 <uart_tx1_isr_handler+0xd0>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000e97e:	687b      	ldr	r3, [r7, #4]
1000e980:	2221      	movs	r2, #33	; 0x21
1000e982:	5c9b      	ldrb	r3, [r3, r2]
1000e984:	001a      	movs	r2, r3
1000e986:	2302      	movs	r3, #2
1000e988:	4013      	ands	r3, r2
1000e98a:	d00b      	beq.n	1000e9a4 <uart_tx1_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000e98c:	687b      	ldr	r3, [r7, #4]
1000e98e:	2220      	movs	r2, #32
1000e990:	5c9b      	ldrb	r3, [r3, r2]
1000e992:	001a      	movs	r2, r3
1000e994:	2302      	movs	r3, #2
1000e996:	4013      	ands	r3, r2
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000e998:	d004      	beq.n	1000e9a4 <uart_tx1_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000e99a:	687b      	ldr	r3, [r7, #4]
1000e99c:	689b      	ldr	r3, [r3, #8]
1000e99e:	687a      	ldr	r2, [r7, #4]
1000e9a0:	0010      	movs	r0, r2
1000e9a2:	4798      	blx	r3
		}

	}
}
1000e9a4:	46c0      	nop			; (mov r8, r8)
1000e9a6:	46bd      	mov	sp, r7
1000e9a8:	b002      	add	sp, #8
1000e9aa:	bd80      	pop	{r7, pc}
1000e9ac:	1001a564 	.word	0x1001a564
1000e9b0:	1000e5b9 	.word	0x1000e5b9

1000e9b4 <uart_set_baudrate>:

static void uart_set_baudrate(struct uart_module *const module,
		const uint32_t baud_rate)
{
1000e9b4:	b580      	push	{r7, lr}
1000e9b6:	b086      	sub	sp, #24
1000e9b8:	af00      	add	r7, sp, #0
1000e9ba:	6078      	str	r0, [r7, #4]
1000e9bc:	6039      	str	r1, [r7, #0]
	uint32_t clock;
	uint16_t integerpart = 0;
1000e9be:	2310      	movs	r3, #16
1000e9c0:	18fb      	adds	r3, r7, r3
1000e9c2:	2200      	movs	r2, #0
1000e9c4:	801a      	strh	r2, [r3, #0]
	uint8_t fractionalpart = 0;
1000e9c6:	230f      	movs	r3, #15
1000e9c8:	18fb      	adds	r3, r7, r3
1000e9ca:	2200      	movs	r2, #0
1000e9cc:	701a      	strb	r2, [r3, #0]
	uint32_t diff;
	uint8_t i = 0;
1000e9ce:	2313      	movs	r3, #19
1000e9d0:	18fb      	adds	r3, r7, r3
1000e9d2:	2200      	movs	r2, #0
1000e9d4:	701a      	strb	r2, [r3, #0]

	clock = system_clock_get_value();
1000e9d6:	4b28      	ldr	r3, [pc, #160]	; (1000ea78 <uart_set_baudrate+0xc4>)
1000e9d8:	4798      	blx	r3
1000e9da:	0003      	movs	r3, r0
1000e9dc:	60bb      	str	r3, [r7, #8]
	integerpart = clock / baud_rate;
1000e9de:	4b27      	ldr	r3, [pc, #156]	; (1000ea7c <uart_set_baudrate+0xc8>)
1000e9e0:	6839      	ldr	r1, [r7, #0]
1000e9e2:	68b8      	ldr	r0, [r7, #8]
1000e9e4:	4798      	blx	r3
1000e9e6:	0003      	movs	r3, r0
1000e9e8:	001a      	movs	r2, r3
1000e9ea:	2310      	movs	r3, #16
1000e9ec:	18fb      	adds	r3, r7, r3
1000e9ee:	801a      	strh	r2, [r3, #0]
	diff = clock - (baud_rate * integerpart);
1000e9f0:	2310      	movs	r3, #16
1000e9f2:	18fb      	adds	r3, r7, r3
1000e9f4:	881b      	ldrh	r3, [r3, #0]
1000e9f6:	683a      	ldr	r2, [r7, #0]
1000e9f8:	4353      	muls	r3, r2
1000e9fa:	68ba      	ldr	r2, [r7, #8]
1000e9fc:	1ad3      	subs	r3, r2, r3
1000e9fe:	617b      	str	r3, [r7, #20]
	i = 0;
1000ea00:	2313      	movs	r3, #19
1000ea02:	18fb      	adds	r3, r7, r3
1000ea04:	2200      	movs	r2, #0
1000ea06:	701a      	strb	r2, [r3, #0]
	while(diff > (baud_rate / 16)) {
1000ea08:	e00b      	b.n	1000ea22 <uart_set_baudrate+0x6e>
		i++;
1000ea0a:	2313      	movs	r3, #19
1000ea0c:	18fb      	adds	r3, r7, r3
1000ea0e:	781a      	ldrb	r2, [r3, #0]
1000ea10:	2313      	movs	r3, #19
1000ea12:	18fb      	adds	r3, r7, r3
1000ea14:	3201      	adds	r2, #1
1000ea16:	701a      	strb	r2, [r3, #0]
		diff -= (baud_rate / 16);
1000ea18:	683b      	ldr	r3, [r7, #0]
1000ea1a:	091b      	lsrs	r3, r3, #4
1000ea1c:	697a      	ldr	r2, [r7, #20]
1000ea1e:	1ad3      	subs	r3, r2, r3
1000ea20:	617b      	str	r3, [r7, #20]

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000ea22:	683b      	ldr	r3, [r7, #0]
1000ea24:	091a      	lsrs	r2, r3, #4
1000ea26:	697b      	ldr	r3, [r7, #20]
1000ea28:	429a      	cmp	r2, r3
1000ea2a:	d3ee      	bcc.n	1000ea0a <uart_set_baudrate+0x56>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;
1000ea2c:	2313      	movs	r3, #19
1000ea2e:	18fb      	adds	r3, r7, r3
1000ea30:	781b      	ldrb	r3, [r3, #0]
1000ea32:	3301      	adds	r3, #1
1000ea34:	2b00      	cmp	r3, #0
1000ea36:	da00      	bge.n	1000ea3a <uart_set_baudrate+0x86>
1000ea38:	3301      	adds	r3, #1
1000ea3a:	105b      	asrs	r3, r3, #1
1000ea3c:	001a      	movs	r2, r3
1000ea3e:	230f      	movs	r3, #15
1000ea40:	18fb      	adds	r3, r7, r3
1000ea42:	701a      	strb	r2, [r3, #0]

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000ea44:	687b      	ldr	r3, [r7, #4]
1000ea46:	681b      	ldr	r3, [r3, #0]
1000ea48:	2228      	movs	r2, #40	; 0x28
1000ea4a:	2100      	movs	r1, #0
1000ea4c:	5499      	strb	r1, [r3, r2]
	module->hw->UART_BAUD_RATE.reg =
1000ea4e:	687b      	ldr	r3, [r7, #4]
1000ea50:	681b      	ldr	r3, [r3, #0]
1000ea52:	2210      	movs	r2, #16
1000ea54:	18ba      	adds	r2, r7, r2
1000ea56:	8812      	ldrh	r2, [r2, #0]
1000ea58:	00d2      	lsls	r2, r2, #3
1000ea5a:	b291      	uxth	r1, r2
1000ea5c:	220f      	movs	r2, #15
1000ea5e:	18ba      	adds	r2, r7, r2
1000ea60:	7812      	ldrb	r2, [r2, #0]
1000ea62:	b292      	uxth	r2, r2
1000ea64:	2007      	movs	r0, #7
1000ea66:	4002      	ands	r2, r0
1000ea68:	b292      	uxth	r2, r2
1000ea6a:	430a      	orrs	r2, r1
1000ea6c:	b292      	uxth	r2, r2
1000ea6e:	849a      	strh	r2, [r3, #36]	; 0x24
		UART_UART_BAUD_RATE_INTEGER_DIVISION(integerpart) |
		UART_UART_BAUD_RATE_FRACTIONAL_DIVISION(fractionalpart);
}
1000ea70:	46c0      	nop			; (mov r8, r8)
1000ea72:	46bd      	mov	sp, r7
1000ea74:	b006      	add	sp, #24
1000ea76:	bd80      	pop	{r7, pc}
1000ea78:	1000d899 	.word	0x1000d899
1000ea7c:	100155a1 	.word	0x100155a1

1000ea80 <uart_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
1000ea80:	b580      	push	{r7, lr}
1000ea82:	b082      	sub	sp, #8
1000ea84:	af00      	add	r7, sp, #0
1000ea86:	6078      	str	r0, [r7, #4]
	config->baud_rate = 115200;
1000ea88:	687b      	ldr	r3, [r7, #4]
1000ea8a:	22e1      	movs	r2, #225	; 0xe1
1000ea8c:	0252      	lsls	r2, r2, #9
1000ea8e:	601a      	str	r2, [r3, #0]
	config->data_bits = UART_8_BITS;
1000ea90:	687b      	ldr	r3, [r7, #4]
1000ea92:	2200      	movs	r2, #0
1000ea94:	711a      	strb	r2, [r3, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000ea96:	687b      	ldr	r3, [r7, #4]
1000ea98:	2200      	movs	r2, #0
1000ea9a:	715a      	strb	r2, [r3, #5]
	config->parity = UART_NO_PARITY;
1000ea9c:	687b      	ldr	r3, [r7, #4]
1000ea9e:	2200      	movs	r2, #0
1000eaa0:	719a      	strb	r2, [r3, #6]
	config->flow_control = false;
1000eaa2:	687b      	ldr	r3, [r7, #4]
1000eaa4:	2200      	movs	r2, #0
1000eaa6:	71da      	strb	r2, [r3, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
1000eaa8:	687b      	ldr	r3, [r7, #4]
1000eaaa:	2202      	movs	r2, #2
1000eaac:	609a      	str	r2, [r3, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
1000eaae:	687b      	ldr	r3, [r7, #4]
1000eab0:	2203      	movs	r2, #3
1000eab2:	60da      	str	r2, [r3, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
1000eab4:	687b      	ldr	r3, [r7, #4]
1000eab6:	2204      	movs	r2, #4
1000eab8:	611a      	str	r2, [r3, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
1000eaba:	687b      	ldr	r3, [r7, #4]
1000eabc:	2205      	movs	r2, #5
1000eabe:	615a      	str	r2, [r3, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
1000eac0:	687b      	ldr	r3, [r7, #4]
1000eac2:	2202      	movs	r2, #2
1000eac4:	619a      	str	r2, [r3, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
1000eac6:	687b      	ldr	r3, [r7, #4]
1000eac8:	2202      	movs	r2, #2
1000eaca:	61da      	str	r2, [r3, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
1000eacc:	687b      	ldr	r3, [r7, #4]
1000eace:	2202      	movs	r2, #2
1000ead0:	621a      	str	r2, [r3, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000ead2:	687b      	ldr	r3, [r7, #4]
1000ead4:	2202      	movs	r2, #2
1000ead6:	625a      	str	r2, [r3, #36]	; 0x24
}
1000ead8:	46c0      	nop			; (mov r8, r8)
1000eada:	46bd      	mov	sp, r7
1000eadc:	b002      	add	sp, #8
1000eade:	bd80      	pop	{r7, pc}

1000eae0 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000eae0:	b580      	push	{r7, lr}
1000eae2:	b086      	sub	sp, #24
1000eae4:	af00      	add	r7, sp, #0
1000eae6:	60f8      	str	r0, [r7, #12]
1000eae8:	60b9      	str	r1, [r7, #8]
1000eaea:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000eaec:	2317      	movs	r3, #23
1000eaee:	18fb      	adds	r3, r7, r3
1000eaf0:	2200      	movs	r2, #0
1000eaf2:	701a      	strb	r2, [r3, #0]
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000eaf4:	68fb      	ldr	r3, [r7, #12]
1000eaf6:	68ba      	ldr	r2, [r7, #8]
1000eaf8:	601a      	str	r2, [r3, #0]

	if (hw == UART0) {
1000eafa:	68bb      	ldr	r3, [r7, #8]
1000eafc:	4a8c      	ldr	r2, [pc, #560]	; (1000ed30 <uart_init+0x250>)
1000eafe:	4293      	cmp	r3, r2
1000eb00:	d11f      	bne.n	1000eb42 <uart_init+0x62>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000eb02:	2009      	movs	r0, #9
1000eb04:	4b8b      	ldr	r3, [pc, #556]	; (1000ed34 <uart_init+0x254>)
1000eb06:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000eb08:	200a      	movs	r0, #10
1000eb0a:	4b8a      	ldr	r3, [pc, #552]	; (1000ed34 <uart_init+0x254>)
1000eb0c:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000eb0e:	2009      	movs	r0, #9
1000eb10:	4b89      	ldr	r3, [pc, #548]	; (1000ed38 <uart_init+0x258>)
1000eb12:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000eb14:	200a      	movs	r0, #10
1000eb16:	4b88      	ldr	r3, [pc, #544]	; (1000ed38 <uart_init+0x258>)
1000eb18:	4798      	blx	r3
		_uart_instances[0] = module;
1000eb1a:	4b88      	ldr	r3, [pc, #544]	; (1000ed3c <uart_init+0x25c>)
1000eb1c:	68fa      	ldr	r2, [r7, #12]
1000eb1e:	601a      	str	r2, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000eb20:	4b87      	ldr	r3, [pc, #540]	; (1000ed40 <uart_init+0x260>)
1000eb22:	0019      	movs	r1, r3
1000eb24:	2010      	movs	r0, #16
1000eb26:	4b87      	ldr	r3, [pc, #540]	; (1000ed44 <uart_init+0x264>)
1000eb28:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000eb2a:	4b87      	ldr	r3, [pc, #540]	; (1000ed48 <uart_init+0x268>)
1000eb2c:	0019      	movs	r1, r3
1000eb2e:	2011      	movs	r0, #17
1000eb30:	4b84      	ldr	r3, [pc, #528]	; (1000ed44 <uart_init+0x264>)
1000eb32:	4798      	blx	r3
		NVIC_EnableIRQ(UART0_RX_IRQn);
1000eb34:	2000      	movs	r0, #0
1000eb36:	4b85      	ldr	r3, [pc, #532]	; (1000ed4c <uart_init+0x26c>)
1000eb38:	4798      	blx	r3
		NVIC_EnableIRQ(UART0_TX_IRQn);
1000eb3a:	2001      	movs	r0, #1
1000eb3c:	4b83      	ldr	r3, [pc, #524]	; (1000ed4c <uart_init+0x26c>)
1000eb3e:	4798      	blx	r3
1000eb40:	e022      	b.n	1000eb88 <uart_init+0xa8>
	} else if (hw == UART1) {
1000eb42:	68bb      	ldr	r3, [r7, #8]
1000eb44:	4a82      	ldr	r2, [pc, #520]	; (1000ed50 <uart_init+0x270>)
1000eb46:	4293      	cmp	r3, r2
1000eb48:	d11e      	bne.n	1000eb88 <uart_init+0xa8>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000eb4a:	200b      	movs	r0, #11
1000eb4c:	4b79      	ldr	r3, [pc, #484]	; (1000ed34 <uart_init+0x254>)
1000eb4e:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000eb50:	200c      	movs	r0, #12
1000eb52:	4b78      	ldr	r3, [pc, #480]	; (1000ed34 <uart_init+0x254>)
1000eb54:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000eb56:	200b      	movs	r0, #11
1000eb58:	4b77      	ldr	r3, [pc, #476]	; (1000ed38 <uart_init+0x258>)
1000eb5a:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000eb5c:	200c      	movs	r0, #12
1000eb5e:	4b76      	ldr	r3, [pc, #472]	; (1000ed38 <uart_init+0x258>)
1000eb60:	4798      	blx	r3
		_uart_instances[1] = module;
1000eb62:	4b76      	ldr	r3, [pc, #472]	; (1000ed3c <uart_init+0x25c>)
1000eb64:	68fa      	ldr	r2, [r7, #12]
1000eb66:	605a      	str	r2, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000eb68:	4b7a      	ldr	r3, [pc, #488]	; (1000ed54 <uart_init+0x274>)
1000eb6a:	0019      	movs	r1, r3
1000eb6c:	2012      	movs	r0, #18
1000eb6e:	4b75      	ldr	r3, [pc, #468]	; (1000ed44 <uart_init+0x264>)
1000eb70:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000eb72:	4b79      	ldr	r3, [pc, #484]	; (1000ed58 <uart_init+0x278>)
1000eb74:	0019      	movs	r1, r3
1000eb76:	2013      	movs	r0, #19
1000eb78:	4b72      	ldr	r3, [pc, #456]	; (1000ed44 <uart_init+0x264>)
1000eb7a:	4798      	blx	r3
		NVIC_EnableIRQ(UART1_RX_IRQn);
1000eb7c:	2002      	movs	r0, #2
1000eb7e:	4b73      	ldr	r3, [pc, #460]	; (1000ed4c <uart_init+0x26c>)
1000eb80:	4798      	blx	r3
		NVIC_EnableIRQ(UART1_TX_IRQn);
1000eb82:	2003      	movs	r0, #3
1000eb84:	4b71      	ldr	r3, [pc, #452]	; (1000ed4c <uart_init+0x26c>)
1000eb86:	4798      	blx	r3
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000eb88:	687b      	ldr	r3, [r7, #4]
1000eb8a:	79db      	ldrb	r3, [r3, #7]
1000eb8c:	2b00      	cmp	r3, #0
1000eb8e:	d004      	beq.n	1000eb9a <uart_init+0xba>
		index = 4;
1000eb90:	2315      	movs	r3, #21
1000eb92:	18fb      	adds	r3, r7, r3
1000eb94:	2204      	movs	r2, #4
1000eb96:	701a      	strb	r2, [r3, #0]
1000eb98:	e003      	b.n	1000eba2 <uart_init+0xc2>
	} else {
		index = 2;
1000eb9a:	2315      	movs	r3, #21
1000eb9c:	18fb      	adds	r3, r7, r3
1000eb9e:	2202      	movs	r2, #2
1000eba0:	701a      	strb	r2, [r3, #0]
	}
	for(i = 0; i < index; i++) {
1000eba2:	2316      	movs	r3, #22
1000eba4:	18fb      	adds	r3, r7, r3
1000eba6:	2200      	movs	r2, #0
1000eba8:	701a      	strb	r2, [r3, #0]
1000ebaa:	e019      	b.n	1000ebe0 <uart_init+0x100>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000ebac:	2316      	movs	r3, #22
1000ebae:	18fb      	adds	r3, r7, r3
1000ebb0:	781a      	ldrb	r2, [r3, #0]
1000ebb2:	687b      	ldr	r3, [r7, #4]
1000ebb4:	3202      	adds	r2, #2
1000ebb6:	0092      	lsls	r2, r2, #2
1000ebb8:	58d3      	ldr	r3, [r2, r3]
1000ebba:	b2d8      	uxtb	r0, r3
								(uint16_t)(config->pinmux_sel_pad[i]));
1000ebbc:	2316      	movs	r3, #22
1000ebbe:	18fb      	adds	r3, r7, r3
1000ebc0:	781a      	ldrb	r2, [r3, #0]
1000ebc2:	687b      	ldr	r3, [r7, #4]
1000ebc4:	3206      	adds	r2, #6
1000ebc6:	0092      	lsls	r2, r2, #2
1000ebc8:	58d3      	ldr	r3, [r2, r3]
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000ebca:	b29b      	uxth	r3, r3
1000ebcc:	0019      	movs	r1, r3
1000ebce:	4b63      	ldr	r3, [pc, #396]	; (1000ed5c <uart_init+0x27c>)
1000ebd0:	4798      	blx	r3
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
1000ebd2:	2316      	movs	r3, #22
1000ebd4:	18fb      	adds	r3, r7, r3
1000ebd6:	781a      	ldrb	r2, [r3, #0]
1000ebd8:	2316      	movs	r3, #22
1000ebda:	18fb      	adds	r3, r7, r3
1000ebdc:	3201      	adds	r2, #1
1000ebde:	701a      	strb	r2, [r3, #0]
1000ebe0:	2316      	movs	r3, #22
1000ebe2:	18fa      	adds	r2, r7, r3
1000ebe4:	2315      	movs	r3, #21
1000ebe6:	18fb      	adds	r3, r7, r3
1000ebe8:	7812      	ldrb	r2, [r2, #0]
1000ebea:	781b      	ldrb	r3, [r3, #0]
1000ebec:	429a      	cmp	r2, r3
1000ebee:	d3dd      	bcc.n	1000ebac <uart_init+0xcc>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ebf0:	e005      	b.n	1000ebfe <uart_init+0x11e>
		i = module->hw->RECEIVE_DATA.reg;
1000ebf2:	68fb      	ldr	r3, [r7, #12]
1000ebf4:	681a      	ldr	r2, [r3, #0]
1000ebf6:	2316      	movs	r3, #22
1000ebf8:	18fb      	adds	r3, r7, r3
1000ebfa:	7c12      	ldrb	r2, [r2, #16]
1000ebfc:	701a      	strb	r2, [r3, #0]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ebfe:	68fb      	ldr	r3, [r7, #12]
1000ec00:	681b      	ldr	r3, [r3, #0]
1000ec02:	7d1b      	ldrb	r3, [r3, #20]
1000ec04:	b2db      	uxtb	r3, r3
1000ec06:	001a      	movs	r2, r3
1000ec08:	2301      	movs	r3, #1
1000ec0a:	4013      	ands	r3, r2
1000ec0c:	d1f1      	bne.n	1000ebf2 <uart_init+0x112>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000ec0e:	68fb      	ldr	r3, [r7, #12]
1000ec10:	681b      	ldr	r3, [r3, #0]
1000ec12:	2220      	movs	r2, #32
1000ec14:	2100      	movs	r1, #0
1000ec16:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000ec18:	687b      	ldr	r3, [r7, #4]
1000ec1a:	79db      	ldrb	r3, [r3, #7]
1000ec1c:	2b00      	cmp	r3, #0
1000ec1e:	d007      	beq.n	1000ec30 <uart_init+0x150>
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
1000ec20:	2317      	movs	r3, #23
1000ec22:	18fb      	adds	r3, r7, r3
1000ec24:	2217      	movs	r2, #23
1000ec26:	18ba      	adds	r2, r7, r2
1000ec28:	7812      	ldrb	r2, [r2, #0]
1000ec2a:	2120      	movs	r1, #32
1000ec2c:	430a      	orrs	r2, r1
1000ec2e:	701a      	strb	r2, [r3, #0]
	}
	config_temp |= config->data_bits;
1000ec30:	687b      	ldr	r3, [r7, #4]
1000ec32:	7919      	ldrb	r1, [r3, #4]
1000ec34:	2317      	movs	r3, #23
1000ec36:	18fb      	adds	r3, r7, r3
1000ec38:	2217      	movs	r2, #23
1000ec3a:	18ba      	adds	r2, r7, r2
1000ec3c:	7812      	ldrb	r2, [r2, #0]
1000ec3e:	430a      	orrs	r2, r1
1000ec40:	701a      	strb	r2, [r3, #0]
	config_temp |= config->stop_bits;
1000ec42:	687b      	ldr	r3, [r7, #4]
1000ec44:	7959      	ldrb	r1, [r3, #5]
1000ec46:	2317      	movs	r3, #23
1000ec48:	18fb      	adds	r3, r7, r3
1000ec4a:	2217      	movs	r2, #23
1000ec4c:	18ba      	adds	r2, r7, r2
1000ec4e:	7812      	ldrb	r2, [r2, #0]
1000ec50:	430a      	orrs	r2, r1
1000ec52:	701a      	strb	r2, [r3, #0]
	switch(config->parity) {
1000ec54:	687b      	ldr	r3, [r7, #4]
1000ec56:	799b      	ldrb	r3, [r3, #6]
1000ec58:	2b04      	cmp	r3, #4
1000ec5a:	d84d      	bhi.n	1000ecf8 <uart_init+0x218>
1000ec5c:	009a      	lsls	r2, r3, #2
1000ec5e:	4b40      	ldr	r3, [pc, #256]	; (1000ed60 <uart_init+0x280>)
1000ec60:	18d3      	adds	r3, r2, r3
1000ec62:	681b      	ldr	r3, [r3, #0]
1000ec64:	469f      	mov	pc, r3
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
1000ec66:	2317      	movs	r3, #23
1000ec68:	18fb      	adds	r3, r7, r3
1000ec6a:	2217      	movs	r2, #23
1000ec6c:	18ba      	adds	r2, r7, r2
1000ec6e:	7812      	ldrb	r2, [r2, #0]
1000ec70:	701a      	strb	r2, [r3, #0]
			break;
1000ec72:	e042      	b.n	1000ecfa <uart_init+0x21a>

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ec74:	2317      	movs	r3, #23
1000ec76:	18fb      	adds	r3, r7, r3
1000ec78:	2217      	movs	r2, #23
1000ec7a:	18ba      	adds	r2, r7, r2
1000ec7c:	7812      	ldrb	r2, [r2, #0]
1000ec7e:	2102      	movs	r1, #2
1000ec80:	430a      	orrs	r2, r1
1000ec82:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
1000ec84:	2317      	movs	r3, #23
1000ec86:	18fb      	adds	r3, r7, r3
1000ec88:	2217      	movs	r2, #23
1000ec8a:	18ba      	adds	r2, r7, r2
1000ec8c:	7812      	ldrb	r2, [r2, #0]
1000ec8e:	701a      	strb	r2, [r3, #0]
			break;
1000ec90:	e033      	b.n	1000ecfa <uart_init+0x21a>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ec92:	2317      	movs	r3, #23
1000ec94:	18fb      	adds	r3, r7, r3
1000ec96:	2217      	movs	r2, #23
1000ec98:	18ba      	adds	r2, r7, r2
1000ec9a:	7812      	ldrb	r2, [r2, #0]
1000ec9c:	2102      	movs	r1, #2
1000ec9e:	430a      	orrs	r2, r1
1000eca0:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
1000eca2:	2317      	movs	r3, #23
1000eca4:	18fb      	adds	r3, r7, r3
1000eca6:	2217      	movs	r2, #23
1000eca8:	18ba      	adds	r2, r7, r2
1000ecaa:	7812      	ldrb	r2, [r2, #0]
1000ecac:	2104      	movs	r1, #4
1000ecae:	430a      	orrs	r2, r1
1000ecb0:	701a      	strb	r2, [r3, #0]
			break;
1000ecb2:	e022      	b.n	1000ecfa <uart_init+0x21a>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ecb4:	2317      	movs	r3, #23
1000ecb6:	18fb      	adds	r3, r7, r3
1000ecb8:	2217      	movs	r2, #23
1000ecba:	18ba      	adds	r2, r7, r2
1000ecbc:	7812      	ldrb	r2, [r2, #0]
1000ecbe:	2102      	movs	r1, #2
1000ecc0:	430a      	orrs	r2, r1
1000ecc2:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
1000ecc4:	2317      	movs	r3, #23
1000ecc6:	18fb      	adds	r3, r7, r3
1000ecc8:	2217      	movs	r2, #23
1000ecca:	18ba      	adds	r2, r7, r2
1000eccc:	7812      	ldrb	r2, [r2, #0]
1000ecce:	2108      	movs	r1, #8
1000ecd0:	430a      	orrs	r2, r1
1000ecd2:	701a      	strb	r2, [r3, #0]
			break;
1000ecd4:	e011      	b.n	1000ecfa <uart_init+0x21a>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ecd6:	2317      	movs	r3, #23
1000ecd8:	18fb      	adds	r3, r7, r3
1000ecda:	2217      	movs	r2, #23
1000ecdc:	18ba      	adds	r2, r7, r2
1000ecde:	7812      	ldrb	r2, [r2, #0]
1000ece0:	2102      	movs	r1, #2
1000ece2:	430a      	orrs	r2, r1
1000ece4:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
1000ece6:	2317      	movs	r3, #23
1000ece8:	18fb      	adds	r3, r7, r3
1000ecea:	2217      	movs	r2, #23
1000ecec:	18ba      	adds	r2, r7, r2
1000ecee:	7812      	ldrb	r2, [r2, #0]
1000ecf0:	210c      	movs	r1, #12
1000ecf2:	430a      	orrs	r2, r1
1000ecf4:	701a      	strb	r2, [r3, #0]
			break;
1000ecf6:	e000      	b.n	1000ecfa <uart_init+0x21a>

		default:
			break;
1000ecf8:	46c0      	nop			; (mov r8, r8)
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000ecfa:	68fb      	ldr	r3, [r7, #12]
1000ecfc:	681b      	ldr	r3, [r3, #0]
1000ecfe:	2217      	movs	r2, #23
1000ed00:	18ba      	adds	r2, r7, r2
1000ed02:	2120      	movs	r1, #32
1000ed04:	7812      	ldrb	r2, [r2, #0]
1000ed06:	545a      	strb	r2, [r3, r1]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000ed08:	687b      	ldr	r3, [r7, #4]
1000ed0a:	681a      	ldr	r2, [r3, #0]
1000ed0c:	68fb      	ldr	r3, [r7, #12]
1000ed0e:	0011      	movs	r1, r2
1000ed10:	0018      	movs	r0, r3
1000ed12:	4b14      	ldr	r3, [pc, #80]	; (1000ed64 <uart_init+0x284>)
1000ed14:	4798      	blx	r3

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000ed16:	68fb      	ldr	r3, [r7, #12]
1000ed18:	681b      	ldr	r3, [r3, #0]
1000ed1a:	2200      	movs	r2, #0
1000ed1c:	761a      	strb	r2, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000ed1e:	68fb      	ldr	r3, [r7, #12]
1000ed20:	681b      	ldr	r3, [r3, #0]
1000ed22:	2200      	movs	r2, #0
1000ed24:	721a      	strb	r2, [r3, #8]
	
	return STATUS_OK;
1000ed26:	2300      	movs	r3, #0
}
1000ed28:	0018      	movs	r0, r3
1000ed2a:	46bd      	mov	sp, r7
1000ed2c:	b006      	add	sp, #24
1000ed2e:	bd80      	pop	{r7, pc}
1000ed30:	40004000 	.word	0x40004000
1000ed34:	1000dfc1 	.word	0x1000dfc1
1000ed38:	1000d8ad 	.word	0x1000d8ad
1000ed3c:	1001a564 	.word	0x1001a564
1000ed40:	1000e645 	.word	0x1000e645
1000ed44:	1000e561 	.word	0x1000e561
1000ed48:	1000e71d 	.word	0x1000e71d
1000ed4c:	1000e58d 	.word	0x1000e58d
1000ed50:	40005000 	.word	0x40005000
1000ed54:	1000e7fd 	.word	0x1000e7fd
1000ed58:	1000e8d5 	.word	0x1000e8d5
1000ed5c:	1000b8c1 	.word	0x1000b8c1
1000ed60:	10019244 	.word	0x10019244
1000ed64:	1000e9b5 	.word	0x1000e9b5

1000ed68 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000ed68:	b580      	push	{r7, lr}
1000ed6a:	b082      	sub	sp, #8
1000ed6c:	af00      	add	r7, sp, #0
1000ed6e:	6078      	str	r0, [r7, #4]
1000ed70:	000a      	movs	r2, r1
1000ed72:	1cfb      	adds	r3, r7, #3
1000ed74:	701a      	strb	r2, [r3, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000ed76:	46c0      	nop			; (mov r8, r8)
1000ed78:	687b      	ldr	r3, [r7, #4]
1000ed7a:	681b      	ldr	r3, [r3, #0]
1000ed7c:	791b      	ldrb	r3, [r3, #4]
1000ed7e:	b2db      	uxtb	r3, r3
1000ed80:	001a      	movs	r2, r3
1000ed82:	2301      	movs	r3, #1
1000ed84:	4013      	ands	r3, r2
1000ed86:	d0f7      	beq.n	1000ed78 <uart_write_wait+0x10>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000ed88:	687b      	ldr	r3, [r7, #4]
1000ed8a:	681b      	ldr	r3, [r3, #0]
1000ed8c:	1cfa      	adds	r2, r7, #3
1000ed8e:	7812      	ldrb	r2, [r2, #0]
1000ed90:	701a      	strb	r2, [r3, #0]
	
	return STATUS_OK;
1000ed92:	2300      	movs	r3, #0
}
1000ed94:	0018      	movs	r0, r3
1000ed96:	46bd      	mov	sp, r7
1000ed98:	b002      	add	sp, #8
1000ed9a:	bd80      	pop	{r7, pc}

1000ed9c <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000ed9c:	b580      	push	{r7, lr}
1000ed9e:	b082      	sub	sp, #8
1000eda0:	af00      	add	r7, sp, #0
1000eda2:	6078      	str	r0, [r7, #4]
1000eda4:	6039      	str	r1, [r7, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000eda6:	46c0      	nop			; (mov r8, r8)
1000eda8:	687b      	ldr	r3, [r7, #4]
1000edaa:	681b      	ldr	r3, [r3, #0]
1000edac:	7d1b      	ldrb	r3, [r3, #20]
1000edae:	b2db      	uxtb	r3, r3
1000edb0:	001a      	movs	r2, r3
1000edb2:	2301      	movs	r3, #1
1000edb4:	4013      	ands	r3, r2
1000edb6:	d0f7      	beq.n	1000eda8 <uart_read_wait+0xc>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000edb8:	687b      	ldr	r3, [r7, #4]
1000edba:	681b      	ldr	r3, [r3, #0]
1000edbc:	7c1b      	ldrb	r3, [r3, #16]
1000edbe:	b2da      	uxtb	r2, r3
1000edc0:	683b      	ldr	r3, [r7, #0]
1000edc2:	701a      	strb	r2, [r3, #0]
	
	return STATUS_OK;
1000edc4:	2300      	movs	r3, #0
}
1000edc6:	0018      	movs	r0, r3
1000edc8:	46bd      	mov	sp, r7
1000edca:	b002      	add	sp, #8
1000edcc:	bd80      	pop	{r7, pc}
1000edce:	46c0      	nop			; (mov r8, r8)

1000edd0 <_uart_read_buffer>:
 */
static void _uart_read_buffer(
		struct uart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
1000edd0:	b580      	push	{r7, lr}
1000edd2:	b084      	sub	sp, #16
1000edd4:	af00      	add	r7, sp, #0
1000edd6:	60f8      	str	r0, [r7, #12]
1000edd8:	60b9      	str	r1, [r7, #8]
1000edda:	1dbb      	adds	r3, r7, #6
1000eddc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000edde:	68fb      	ldr	r3, [r7, #12]
1000ede0:	1dba      	adds	r2, r7, #6
1000ede2:	8812      	ldrh	r2, [r2, #0]
1000ede4:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr = rx_data;
1000ede6:	68fb      	ldr	r3, [r7, #12]
1000ede8:	68ba      	ldr	r2, [r7, #8]
1000edea:	615a      	str	r2, [r3, #20]
	module->status = STATUS_BUSY;
1000edec:	68fb      	ldr	r3, [r7, #12]
1000edee:	2222      	movs	r2, #34	; 0x22
1000edf0:	2105      	movs	r1, #5
1000edf2:	5499      	strb	r1, [r3, r2]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000edf4:	68fb      	ldr	r3, [r7, #12]
1000edf6:	681b      	ldr	r3, [r3, #0]
1000edf8:	2201      	movs	r2, #1
1000edfa:	761a      	strb	r2, [r3, #24]
}
1000edfc:	46c0      	nop			; (mov r8, r8)
1000edfe:	46bd      	mov	sp, r7
1000ee00:	b004      	add	sp, #16
1000ee02:	bd80      	pop	{r7, pc}

1000ee04 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000ee04:	b580      	push	{r7, lr}
1000ee06:	b084      	sub	sp, #16
1000ee08:	af00      	add	r7, sp, #0
1000ee0a:	60f8      	str	r0, [r7, #12]
1000ee0c:	60b9      	str	r1, [r7, #8]
1000ee0e:	1dbb      	adds	r3, r7, #6
1000ee10:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000ee12:	1dbb      	adds	r3, r7, #6
1000ee14:	881b      	ldrh	r3, [r3, #0]
1000ee16:	2b00      	cmp	r3, #0
1000ee18:	d101      	bne.n	1000ee1e <uart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
1000ee1a:	2317      	movs	r3, #23
1000ee1c:	e00f      	b.n	1000ee3e <uart_read_buffer_job+0x3a>
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000ee1e:	68fb      	ldr	r3, [r7, #12]
1000ee20:	2222      	movs	r2, #34	; 0x22
1000ee22:	5c9b      	ldrb	r3, [r3, r2]
1000ee24:	b2db      	uxtb	r3, r3
1000ee26:	2b05      	cmp	r3, #5
1000ee28:	d101      	bne.n	1000ee2e <uart_read_buffer_job+0x2a>
		return STATUS_BUSY;
1000ee2a:	2305      	movs	r3, #5
1000ee2c:	e007      	b.n	1000ee3e <uart_read_buffer_job+0x3a>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
1000ee2e:	1dbb      	adds	r3, r7, #6
1000ee30:	881a      	ldrh	r2, [r3, #0]
1000ee32:	68b9      	ldr	r1, [r7, #8]
1000ee34:	68fb      	ldr	r3, [r7, #12]
1000ee36:	0018      	movs	r0, r3
1000ee38:	4b03      	ldr	r3, [pc, #12]	; (1000ee48 <uart_read_buffer_job+0x44>)
1000ee3a:	4798      	blx	r3
	return STATUS_OK;
1000ee3c:	2300      	movs	r3, #0
}
1000ee3e:	0018      	movs	r0, r3
1000ee40:	46bd      	mov	sp, r7
1000ee42:	b004      	add	sp, #16
1000ee44:	bd80      	pop	{r7, pc}
1000ee46:	46c0      	nop			; (mov r8, r8)
1000ee48:	1000edd1 	.word	0x1000edd1

1000ee4c <uart_register_callback>:
 *
 */
void uart_register_callback(struct uart_module *const module,
		uart_callback_t callback_func,
		enum uart_callback callback_type)
{
1000ee4c:	b580      	push	{r7, lr}
1000ee4e:	b084      	sub	sp, #16
1000ee50:	af00      	add	r7, sp, #0
1000ee52:	60f8      	str	r0, [r7, #12]
1000ee54:	60b9      	str	r1, [r7, #8]
1000ee56:	1dfb      	adds	r3, r7, #7
1000ee58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000ee5a:	1dfb      	adds	r3, r7, #7
1000ee5c:	781b      	ldrb	r3, [r3, #0]
1000ee5e:	68fa      	ldr	r2, [r7, #12]
1000ee60:	009b      	lsls	r3, r3, #2
1000ee62:	18d3      	adds	r3, r2, r3
1000ee64:	3304      	adds	r3, #4
1000ee66:	68ba      	ldr	r2, [r7, #8]
1000ee68:	601a      	str	r2, [r3, #0]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000ee6a:	68fb      	ldr	r3, [r7, #12]
1000ee6c:	2220      	movs	r2, #32
1000ee6e:	5c9b      	ldrb	r3, [r3, r2]
1000ee70:	b25a      	sxtb	r2, r3
1000ee72:	1dfb      	adds	r3, r7, #7
1000ee74:	781b      	ldrb	r3, [r3, #0]
1000ee76:	2101      	movs	r1, #1
1000ee78:	4099      	lsls	r1, r3
1000ee7a:	000b      	movs	r3, r1
1000ee7c:	b25b      	sxtb	r3, r3
1000ee7e:	4313      	orrs	r3, r2
1000ee80:	b25b      	sxtb	r3, r3
1000ee82:	b2d9      	uxtb	r1, r3
1000ee84:	68fb      	ldr	r3, [r7, #12]
1000ee86:	2220      	movs	r2, #32
1000ee88:	5499      	strb	r1, [r3, r2]
}
1000ee8a:	46c0      	nop			; (mov r8, r8)
1000ee8c:	46bd      	mov	sp, r7
1000ee8e:	b004      	add	sp, #16
1000ee90:	bd80      	pop	{r7, pc}
1000ee92:	46c0      	nop			; (mov r8, r8)

1000ee94 <uart_unregister_callback>:
 * \param[in]      callback_type  Callback type given by an enum
 *
 */
void uart_unregister_callback(struct uart_module *module,
		enum uart_callback callback_type)
{
1000ee94:	b580      	push	{r7, lr}
1000ee96:	b082      	sub	sp, #8
1000ee98:	af00      	add	r7, sp, #0
1000ee9a:	6078      	str	r0, [r7, #4]
1000ee9c:	000a      	movs	r2, r1
1000ee9e:	1cfb      	adds	r3, r7, #3
1000eea0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
1000eea2:	1cfb      	adds	r3, r7, #3
1000eea4:	781b      	ldrb	r3, [r3, #0]
1000eea6:	687a      	ldr	r2, [r7, #4]
1000eea8:	009b      	lsls	r3, r3, #2
1000eeaa:	18d3      	adds	r3, r2, r3
1000eeac:	3304      	adds	r3, #4
1000eeae:	2200      	movs	r2, #0
1000eeb0:	601a      	str	r2, [r3, #0]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
1000eeb2:	687b      	ldr	r3, [r7, #4]
1000eeb4:	2220      	movs	r2, #32
1000eeb6:	5c9b      	ldrb	r3, [r3, r2]
1000eeb8:	b25b      	sxtb	r3, r3
1000eeba:	1cfa      	adds	r2, r7, #3
1000eebc:	7812      	ldrb	r2, [r2, #0]
1000eebe:	2101      	movs	r1, #1
1000eec0:	4091      	lsls	r1, r2
1000eec2:	000a      	movs	r2, r1
1000eec4:	b252      	sxtb	r2, r2
1000eec6:	43d2      	mvns	r2, r2
1000eec8:	b252      	sxtb	r2, r2
1000eeca:	4013      	ands	r3, r2
1000eecc:	b25b      	sxtb	r3, r3
1000eece:	b2d9      	uxtb	r1, r3
1000eed0:	687b      	ldr	r3, [r7, #4]
1000eed2:	2220      	movs	r2, #32
1000eed4:	5499      	strb	r1, [r3, r2]
}
1000eed6:	46c0      	nop			; (mov r8, r8)
1000eed8:	46bd      	mov	sp, r7
1000eeda:	b002      	add	sp, #8
1000eedc:	bd80      	pop	{r7, pc}
1000eede:	46c0      	nop			; (mov r8, r8)

1000eee0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000eee0:	b580      	push	{r7, lr}
1000eee2:	b082      	sub	sp, #8
1000eee4:	af00      	add	r7, sp, #0
1000eee6:	6078      	str	r0, [r7, #4]
1000eee8:	000a      	movs	r2, r1
1000eeea:	1cfb      	adds	r3, r7, #3
1000eeec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000eeee:	687b      	ldr	r3, [r7, #4]
1000eef0:	2221      	movs	r2, #33	; 0x21
1000eef2:	5c9b      	ldrb	r3, [r3, r2]
1000eef4:	b25a      	sxtb	r2, r3
1000eef6:	1cfb      	adds	r3, r7, #3
1000eef8:	781b      	ldrb	r3, [r3, #0]
1000eefa:	2101      	movs	r1, #1
1000eefc:	4099      	lsls	r1, r3
1000eefe:	000b      	movs	r3, r1
1000ef00:	b25b      	sxtb	r3, r3
1000ef02:	4313      	orrs	r3, r2
1000ef04:	b25b      	sxtb	r3, r3
1000ef06:	b2d9      	uxtb	r1, r3
1000ef08:	687b      	ldr	r3, [r7, #4]
1000ef0a:	2221      	movs	r2, #33	; 0x21
1000ef0c:	5499      	strb	r1, [r3, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000ef0e:	1cfb      	adds	r3, r7, #3
1000ef10:	781b      	ldrb	r3, [r3, #0]
1000ef12:	2b01      	cmp	r3, #1
1000ef14:	d109      	bne.n	1000ef2a <uart_enable_callback+0x4a>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000ef16:	687b      	ldr	r3, [r7, #4]
1000ef18:	681a      	ldr	r2, [r3, #0]
1000ef1a:	687b      	ldr	r3, [r7, #4]
1000ef1c:	681b      	ldr	r3, [r3, #0]
1000ef1e:	7a1b      	ldrb	r3, [r3, #8]
1000ef20:	b2db      	uxtb	r3, r3
1000ef22:	2120      	movs	r1, #32
1000ef24:	430b      	orrs	r3, r1
1000ef26:	b2db      	uxtb	r3, r3
1000ef28:	7213      	strb	r3, [r2, #8]
	}
}
1000ef2a:	46c0      	nop			; (mov r8, r8)
1000ef2c:	46bd      	mov	sp, r7
1000ef2e:	b002      	add	sp, #8
1000ef30:	bd80      	pop	{r7, pc}
1000ef32:	46c0      	nop			; (mov r8, r8)

1000ef34 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000ef34:	b580      	push	{r7, lr}
1000ef36:	b082      	sub	sp, #8
1000ef38:	af00      	add	r7, sp, #0
1000ef3a:	6078      	str	r0, [r7, #4]
1000ef3c:	000a      	movs	r2, r1
1000ef3e:	1cfb      	adds	r3, r7, #3
1000ef40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000ef42:	687b      	ldr	r3, [r7, #4]
1000ef44:	2221      	movs	r2, #33	; 0x21
1000ef46:	5c9b      	ldrb	r3, [r3, r2]
1000ef48:	b25b      	sxtb	r3, r3
1000ef4a:	1cfa      	adds	r2, r7, #3
1000ef4c:	7812      	ldrb	r2, [r2, #0]
1000ef4e:	2101      	movs	r1, #1
1000ef50:	4091      	lsls	r1, r2
1000ef52:	000a      	movs	r2, r1
1000ef54:	b252      	sxtb	r2, r2
1000ef56:	43d2      	mvns	r2, r2
1000ef58:	b252      	sxtb	r2, r2
1000ef5a:	4013      	ands	r3, r2
1000ef5c:	b25b      	sxtb	r3, r3
1000ef5e:	b2d9      	uxtb	r1, r3
1000ef60:	687b      	ldr	r3, [r7, #4]
1000ef62:	2221      	movs	r2, #33	; 0x21
1000ef64:	5499      	strb	r1, [r3, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000ef66:	1cfb      	adds	r3, r7, #3
1000ef68:	781b      	ldrb	r3, [r3, #0]
1000ef6a:	2b01      	cmp	r3, #1
1000ef6c:	d109      	bne.n	1000ef82 <uart_disable_callback+0x4e>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000ef6e:	687b      	ldr	r3, [r7, #4]
1000ef70:	681a      	ldr	r2, [r3, #0]
1000ef72:	687b      	ldr	r3, [r7, #4]
1000ef74:	681b      	ldr	r3, [r3, #0]
1000ef76:	7a1b      	ldrb	r3, [r3, #8]
1000ef78:	b2db      	uxtb	r3, r3
1000ef7a:	2120      	movs	r1, #32
1000ef7c:	438b      	bics	r3, r1
1000ef7e:	b2db      	uxtb	r3, r3
1000ef80:	7213      	strb	r3, [r2, #8]
	}

}
1000ef82:	46c0      	nop			; (mov r8, r8)
1000ef84:	46bd      	mov	sp, r7
1000ef86:	b002      	add	sp, #8
1000ef88:	bd80      	pop	{r7, pc}
1000ef8a:	46c0      	nop			; (mov r8, r8)

1000ef8c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000ef8c:	b580      	push	{r7, lr}
1000ef8e:	b086      	sub	sp, #24
1000ef90:	af00      	add	r7, sp, #0
1000ef92:	60f8      	str	r0, [r7, #12]
1000ef94:	60b9      	str	r1, [r7, #8]
1000ef96:	607a      	str	r2, [r7, #4]
	int nChars = 0;
1000ef98:	2300      	movs	r3, #0
1000ef9a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
1000ef9c:	68fb      	ldr	r3, [r7, #12]
1000ef9e:	2b00      	cmp	r3, #0
1000efa0:	d012      	beq.n	1000efc8 <_read+0x3c>
		return -1;
1000efa2:	2301      	movs	r3, #1
1000efa4:	425b      	negs	r3, r3
1000efa6:	e013      	b.n	1000efd0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000efa8:	4b0b      	ldr	r3, [pc, #44]	; (1000efd8 <_read+0x4c>)
1000efaa:	681a      	ldr	r2, [r3, #0]
1000efac:	4b0b      	ldr	r3, [pc, #44]	; (1000efdc <_read+0x50>)
1000efae:	681b      	ldr	r3, [r3, #0]
1000efb0:	68b9      	ldr	r1, [r7, #8]
1000efb2:	0018      	movs	r0, r3
1000efb4:	4790      	blx	r2
		ptr++;
1000efb6:	68bb      	ldr	r3, [r7, #8]
1000efb8:	3301      	adds	r3, #1
1000efba:	60bb      	str	r3, [r7, #8]
		nChars++;
1000efbc:	697b      	ldr	r3, [r7, #20]
1000efbe:	3301      	adds	r3, #1
1000efc0:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000efc2:	687b      	ldr	r3, [r7, #4]
1000efc4:	3b01      	subs	r3, #1
1000efc6:	607b      	str	r3, [r7, #4]
1000efc8:	687b      	ldr	r3, [r7, #4]
1000efca:	2b00      	cmp	r3, #0
1000efcc:	dcec      	bgt.n	1000efa8 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
1000efce:	697b      	ldr	r3, [r7, #20]
}
1000efd0:	0018      	movs	r0, r3
1000efd2:	46bd      	mov	sp, r7
1000efd4:	b006      	add	sp, #24
1000efd6:	bd80      	pop	{r7, pc}
1000efd8:	1001a56c 	.word	0x1001a56c
1000efdc:	1001a574 	.word	0x1001a574

1000efe0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000efe0:	b580      	push	{r7, lr}
1000efe2:	b086      	sub	sp, #24
1000efe4:	af00      	add	r7, sp, #0
1000efe6:	60f8      	str	r0, [r7, #12]
1000efe8:	60b9      	str	r1, [r7, #8]
1000efea:	607a      	str	r2, [r7, #4]
	int nChars = 0;
1000efec:	2300      	movs	r3, #0
1000efee:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
1000eff0:	68fb      	ldr	r3, [r7, #12]
1000eff2:	2b01      	cmp	r3, #1
1000eff4:	d01d      	beq.n	1000f032 <_write+0x52>
1000eff6:	68fb      	ldr	r3, [r7, #12]
1000eff8:	2b02      	cmp	r3, #2
1000effa:	d01a      	beq.n	1000f032 <_write+0x52>
1000effc:	68fb      	ldr	r3, [r7, #12]
1000effe:	2b03      	cmp	r3, #3
1000f000:	d017      	beq.n	1000f032 <_write+0x52>
		return -1;
1000f002:	2301      	movs	r3, #1
1000f004:	425b      	negs	r3, r3
1000f006:	e018      	b.n	1000f03a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000f008:	4b0e      	ldr	r3, [pc, #56]	; (1000f044 <_write+0x64>)
1000f00a:	681a      	ldr	r2, [r3, #0]
1000f00c:	4b0e      	ldr	r3, [pc, #56]	; (1000f048 <_write+0x68>)
1000f00e:	6818      	ldr	r0, [r3, #0]
1000f010:	68bb      	ldr	r3, [r7, #8]
1000f012:	1c59      	adds	r1, r3, #1
1000f014:	60b9      	str	r1, [r7, #8]
1000f016:	781b      	ldrb	r3, [r3, #0]
1000f018:	0019      	movs	r1, r3
1000f01a:	4790      	blx	r2
1000f01c:	1e03      	subs	r3, r0, #0
1000f01e:	da02      	bge.n	1000f026 <_write+0x46>
			return -1;
1000f020:	2301      	movs	r3, #1
1000f022:	425b      	negs	r3, r3
1000f024:	e009      	b.n	1000f03a <_write+0x5a>
		}
		++nChars;
1000f026:	697b      	ldr	r3, [r7, #20]
1000f028:	3301      	adds	r3, #1
1000f02a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000f02c:	687b      	ldr	r3, [r7, #4]
1000f02e:	3b01      	subs	r3, #1
1000f030:	607b      	str	r3, [r7, #4]
1000f032:	687b      	ldr	r3, [r7, #4]
1000f034:	2b00      	cmp	r3, #0
1000f036:	d1e7      	bne.n	1000f008 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
1000f038:	697b      	ldr	r3, [r7, #20]
}
1000f03a:	0018      	movs	r0, r3
1000f03c:	46bd      	mov	sp, r7
1000f03e:	b006      	add	sp, #24
1000f040:	bd80      	pop	{r7, pc}
1000f042:	46c0      	nop			; (mov r8, r8)
1000f044:	1001a570 	.word	0x1001a570
1000f048:	1001a574 	.word	0x1001a574

1000f04c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000f04c:	b580      	push	{r7, lr}
1000f04e:	b084      	sub	sp, #16
1000f050:	af00      	add	r7, sp, #0
1000f052:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000f054:	4b0a      	ldr	r3, [pc, #40]	; (1000f080 <_sbrk+0x34>)
1000f056:	681b      	ldr	r3, [r3, #0]
1000f058:	2b00      	cmp	r3, #0
1000f05a:	d102      	bne.n	1000f062 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
1000f05c:	4b08      	ldr	r3, [pc, #32]	; (1000f080 <_sbrk+0x34>)
1000f05e:	4a09      	ldr	r2, [pc, #36]	; (1000f084 <_sbrk+0x38>)
1000f060:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
1000f062:	4b07      	ldr	r3, [pc, #28]	; (1000f080 <_sbrk+0x34>)
1000f064:	681b      	ldr	r3, [r3, #0]
1000f066:	60fb      	str	r3, [r7, #12]

	heap += incr;
1000f068:	4b05      	ldr	r3, [pc, #20]	; (1000f080 <_sbrk+0x34>)
1000f06a:	681a      	ldr	r2, [r3, #0]
1000f06c:	687b      	ldr	r3, [r7, #4]
1000f06e:	18d2      	adds	r2, r2, r3
1000f070:	4b03      	ldr	r3, [pc, #12]	; (1000f080 <_sbrk+0x34>)
1000f072:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
1000f074:	68fb      	ldr	r3, [r7, #12]
}
1000f076:	0018      	movs	r0, r3
1000f078:	46bd      	mov	sp, r7
1000f07a:	b004      	add	sp, #16
1000f07c:	bd80      	pop	{r7, pc}
1000f07e:	46c0      	nop			; (mov r8, r8)
1000f080:	10019b68 	.word	0x10019b68
1000f084:	1001c8b0 	.word	0x1001c8b0

1000f088 <_close>:
{
	return -1;
}

extern int _close(int file)
{
1000f088:	b580      	push	{r7, lr}
1000f08a:	b082      	sub	sp, #8
1000f08c:	af00      	add	r7, sp, #0
1000f08e:	6078      	str	r0, [r7, #4]
	return -1;
1000f090:	2301      	movs	r3, #1
1000f092:	425b      	negs	r3, r3
}
1000f094:	0018      	movs	r0, r3
1000f096:	46bd      	mov	sp, r7
1000f098:	b002      	add	sp, #8
1000f09a:	bd80      	pop	{r7, pc}

1000f09c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
1000f09c:	b580      	push	{r7, lr}
1000f09e:	b082      	sub	sp, #8
1000f0a0:	af00      	add	r7, sp, #0
1000f0a2:	6078      	str	r0, [r7, #4]
1000f0a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
1000f0a6:	683b      	ldr	r3, [r7, #0]
1000f0a8:	2280      	movs	r2, #128	; 0x80
1000f0aa:	0192      	lsls	r2, r2, #6
1000f0ac:	605a      	str	r2, [r3, #4]

	return 0;
1000f0ae:	2300      	movs	r3, #0
}
1000f0b0:	0018      	movs	r0, r3
1000f0b2:	46bd      	mov	sp, r7
1000f0b4:	b002      	add	sp, #8
1000f0b6:	bd80      	pop	{r7, pc}

1000f0b8 <_isatty>:

extern int _isatty(int file)
{
1000f0b8:	b580      	push	{r7, lr}
1000f0ba:	b082      	sub	sp, #8
1000f0bc:	af00      	add	r7, sp, #0
1000f0be:	6078      	str	r0, [r7, #4]
	return 1;
1000f0c0:	2301      	movs	r3, #1
}
1000f0c2:	0018      	movs	r0, r3
1000f0c4:	46bd      	mov	sp, r7
1000f0c6:	b002      	add	sp, #8
1000f0c8:	bd80      	pop	{r7, pc}
1000f0ca:	46c0      	nop			; (mov r8, r8)

1000f0cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
1000f0cc:	b580      	push	{r7, lr}
1000f0ce:	b084      	sub	sp, #16
1000f0d0:	af00      	add	r7, sp, #0
1000f0d2:	60f8      	str	r0, [r7, #12]
1000f0d4:	60b9      	str	r1, [r7, #8]
1000f0d6:	607a      	str	r2, [r7, #4]
	return 0;
1000f0d8:	2300      	movs	r3, #0
}
1000f0da:	0018      	movs	r0, r3
1000f0dc:	46bd      	mov	sp, r7
1000f0de:	b004      	add	sp, #16
1000f0e0:	bd80      	pop	{r7, pc}
1000f0e2:	46c0      	nop			; (mov r8, r8)

1000f0e4 <init_global_var>:

/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
1000f0e4:	b580      	push	{r7, lr}
1000f0e6:	af00      	add	r7, sp, #0
	ble_user_event_cb = 0;
1000f0e8:	4b15      	ldr	r3, [pc, #84]	; (1000f140 <init_global_var+0x5c>)
1000f0ea:	2200      	movs	r2, #0
1000f0ec:	601a      	str	r2, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000f0ee:	4b15      	ldr	r3, [pc, #84]	; (1000f144 <init_global_var+0x60>)
1000f0f0:	2207      	movs	r2, #7
1000f0f2:	2100      	movs	r1, #0
1000f0f4:	0018      	movs	r0, r3
1000f0f6:	4b14      	ldr	r3, [pc, #80]	; (1000f148 <init_global_var+0x64>)
1000f0f8:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000f0fa:	4b14      	ldr	r3, [pc, #80]	; (1000f14c <init_global_var+0x68>)
1000f0fc:	2212      	movs	r2, #18
1000f0fe:	2100      	movs	r1, #0
1000f100:	0018      	movs	r0, r3
1000f102:	4b11      	ldr	r3, [pc, #68]	; (1000f148 <init_global_var+0x64>)
1000f104:	4798      	blx	r3
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000f106:	4a12      	ldr	r2, [pc, #72]	; (1000f150 <init_global_var+0x6c>)
1000f108:	4b12      	ldr	r3, [pc, #72]	; (1000f154 <init_global_var+0x70>)
1000f10a:	2100      	movs	r1, #0
1000f10c:	0018      	movs	r0, r3
1000f10e:	4b0e      	ldr	r3, [pc, #56]	; (1000f148 <init_global_var+0x64>)
1000f110:	4798      	blx	r3
#endif

	scan_response_count = 0;
1000f112:	4b11      	ldr	r3, [pc, #68]	; (1000f158 <init_global_var+0x74>)
1000f114:	2200      	movs	r2, #0
1000f116:	701a      	strb	r2, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000f118:	23cd      	movs	r3, #205	; 0xcd
1000f11a:	009a      	lsls	r2, r3, #2
1000f11c:	4b0f      	ldr	r3, [pc, #60]	; (1000f15c <init_global_var+0x78>)
1000f11e:	2100      	movs	r1, #0
1000f120:	0018      	movs	r0, r3
1000f122:	4b09      	ldr	r3, [pc, #36]	; (1000f148 <init_global_var+0x64>)
1000f124:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
1000f126:	4b0e      	ldr	r3, [pc, #56]	; (1000f160 <init_global_var+0x7c>)
1000f128:	2200      	movs	r2, #0
1000f12a:	701a      	strb	r2, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000f12c:	2383      	movs	r3, #131	; 0x83
1000f12e:	009a      	lsls	r2, r3, #2
1000f130:	4b0c      	ldr	r3, [pc, #48]	; (1000f164 <init_global_var+0x80>)
1000f132:	2100      	movs	r1, #0
1000f134:	0018      	movs	r0, r3
1000f136:	4b04      	ldr	r3, [pc, #16]	; (1000f148 <init_global_var+0x64>)
1000f138:	4798      	blx	r3
}
1000f13a:	46c0      	nop			; (mov r8, r8)
1000f13c:	46bd      	mov	sp, r7
1000f13e:	bd80      	pop	{r7, pc}
1000f140:	1001a054 	.word	0x1001a054
1000f144:	1001a04c 	.word	0x1001a04c
1000f148:	10017329 	.word	0x10017329
1000f14c:	1001a83c 	.word	0x1001a83c
1000f150:	000004e2 	.word	0x000004e2
1000f154:	10019b6c 	.word	0x10019b6c
1000f158:	1001a058 	.word	0x1001a058
1000f15c:	1001a864 	.word	0x1001a864
1000f160:	1001a85c 	.word	0x1001a85c
1000f164:	1001ab98 	.word	0x1001ab98

1000f168 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000f168:	b580      	push	{r7, lr}
1000f16a:	b084      	sub	sp, #16
1000f16c:	af00      	add	r7, sp, #0
1000f16e:	6078      	str	r0, [r7, #4]
	uint8_t idx;	
	char *dev_name = NULL;
1000f170:	2300      	movs	r3, #0
1000f172:	60bb      	str	r3, [r7, #8]
	init_global_var();
1000f174:	4b8a      	ldr	r3, [pc, #552]	; (1000f3a0 <ble_device_init+0x238>)
1000f176:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000f178:	4b8a      	ldr	r3, [pc, #552]	; (1000f3a4 <ble_device_init+0x23c>)
1000f17a:	220c      	movs	r2, #12
1000f17c:	2100      	movs	r1, #0
1000f17e:	0018      	movs	r0, r3
1000f180:	4b89      	ldr	r3, [pc, #548]	; (1000f3a8 <ble_device_init+0x240>)
1000f182:	4798      	blx	r3

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000f184:	230f      	movs	r3, #15
1000f186:	18fb      	adds	r3, r7, r3
1000f188:	2200      	movs	r2, #0
1000f18a:	701a      	strb	r2, [r3, #0]
1000f18c:	e00d      	b.n	1000f1aa <ble_device_init+0x42>
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000f18e:	230f      	movs	r3, #15
1000f190:	18fb      	adds	r3, r7, r3
1000f192:	781a      	ldrb	r2, [r3, #0]
1000f194:	4b85      	ldr	r3, [pc, #532]	; (1000f3ac <ble_device_init+0x244>)
1000f196:	0092      	lsls	r2, r2, #2
1000f198:	2100      	movs	r1, #0
1000f19a:	50d1      	str	r1, [r2, r3]
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000f19c:	230f      	movs	r3, #15
1000f19e:	18fb      	adds	r3, r7, r3
1000f1a0:	781a      	ldrb	r2, [r3, #0]
1000f1a2:	230f      	movs	r3, #15
1000f1a4:	18fb      	adds	r3, r7, r3
1000f1a6:	3201      	adds	r2, #1
1000f1a8:	701a      	strb	r2, [r3, #0]
1000f1aa:	230f      	movs	r3, #15
1000f1ac:	18fb      	adds	r3, r7, r3
1000f1ae:	781b      	ldrb	r3, [r3, #0]
1000f1b0:	2b04      	cmp	r3, #4
1000f1b2:	d9ec      	bls.n	1000f18e <ble_device_init+0x26>
	{
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000f1b4:	230f      	movs	r3, #15
1000f1b6:	18fb      	adds	r3, r7, r3
1000f1b8:	2200      	movs	r2, #0
1000f1ba:	701a      	strb	r2, [r3, #0]
1000f1bc:	e00d      	b.n	1000f1da <ble_device_init+0x72>
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000f1be:	230f      	movs	r3, #15
1000f1c0:	18fb      	adds	r3, r7, r3
1000f1c2:	781a      	ldrb	r2, [r3, #0]
1000f1c4:	4b7a      	ldr	r3, [pc, #488]	; (1000f3b0 <ble_device_init+0x248>)
1000f1c6:	0092      	lsls	r2, r2, #2
1000f1c8:	2100      	movs	r1, #0
1000f1ca:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000f1cc:	230f      	movs	r3, #15
1000f1ce:	18fb      	adds	r3, r7, r3
1000f1d0:	781a      	ldrb	r2, [r3, #0]
1000f1d2:	230f      	movs	r3, #15
1000f1d4:	18fb      	adds	r3, r7, r3
1000f1d6:	3201      	adds	r2, #1
1000f1d8:	701a      	strb	r2, [r3, #0]
1000f1da:	230f      	movs	r3, #15
1000f1dc:	18fb      	adds	r3, r7, r3
1000f1de:	781b      	ldrb	r3, [r3, #0]
1000f1e0:	2b04      	cmp	r3, #4
1000f1e2:	d9ec      	bls.n	1000f1be <ble_device_init+0x56>
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000f1e4:	230f      	movs	r3, #15
1000f1e6:	18fb      	adds	r3, r7, r3
1000f1e8:	2200      	movs	r2, #0
1000f1ea:	701a      	strb	r2, [r3, #0]
1000f1ec:	e00d      	b.n	1000f20a <ble_device_init+0xa2>
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000f1ee:	230f      	movs	r3, #15
1000f1f0:	18fb      	adds	r3, r7, r3
1000f1f2:	781a      	ldrb	r2, [r3, #0]
1000f1f4:	4b6f      	ldr	r3, [pc, #444]	; (1000f3b4 <ble_device_init+0x24c>)
1000f1f6:	0092      	lsls	r2, r2, #2
1000f1f8:	2100      	movs	r1, #0
1000f1fa:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000f1fc:	230f      	movs	r3, #15
1000f1fe:	18fb      	adds	r3, r7, r3
1000f200:	781a      	ldrb	r2, [r3, #0]
1000f202:	230f      	movs	r3, #15
1000f204:	18fb      	adds	r3, r7, r3
1000f206:	3201      	adds	r2, #1
1000f208:	701a      	strb	r2, [r3, #0]
1000f20a:	230f      	movs	r3, #15
1000f20c:	18fb      	adds	r3, r7, r3
1000f20e:	781b      	ldrb	r3, [r3, #0]
1000f210:	2b04      	cmp	r3, #4
1000f212:	d9ec      	bls.n	1000f1ee <ble_device_init+0x86>
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
1000f214:	230f      	movs	r3, #15
1000f216:	18fb      	adds	r3, r7, r3
1000f218:	2200      	movs	r2, #0
1000f21a:	701a      	strb	r2, [r3, #0]
1000f21c:	e00d      	b.n	1000f23a <ble_device_init+0xd2>
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000f21e:	230f      	movs	r3, #15
1000f220:	18fb      	adds	r3, r7, r3
1000f222:	781a      	ldrb	r2, [r3, #0]
1000f224:	4b64      	ldr	r3, [pc, #400]	; (1000f3b8 <ble_device_init+0x250>)
1000f226:	0092      	lsls	r2, r2, #2
1000f228:	2100      	movs	r1, #0
1000f22a:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
1000f22c:	230f      	movs	r3, #15
1000f22e:	18fb      	adds	r3, r7, r3
1000f230:	781a      	ldrb	r2, [r3, #0]
1000f232:	230f      	movs	r3, #15
1000f234:	18fb      	adds	r3, r7, r3
1000f236:	3201      	adds	r2, #1
1000f238:	701a      	strb	r2, [r3, #0]
1000f23a:	230f      	movs	r3, #15
1000f23c:	18fb      	adds	r3, r7, r3
1000f23e:	781b      	ldrb	r3, [r3, #0]
1000f240:	2b00      	cmp	r3, #0
1000f242:	d0ec      	beq.n	1000f21e <ble_device_init+0xb6>
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1000f244:	230f      	movs	r3, #15
1000f246:	18fb      	adds	r3, r7, r3
1000f248:	2200      	movs	r2, #0
1000f24a:	701a      	strb	r2, [r3, #0]
1000f24c:	e00d      	b.n	1000f26a <ble_device_init+0x102>
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000f24e:	230f      	movs	r3, #15
1000f250:	18fb      	adds	r3, r7, r3
1000f252:	781a      	ldrb	r2, [r3, #0]
1000f254:	4b59      	ldr	r3, [pc, #356]	; (1000f3bc <ble_device_init+0x254>)
1000f256:	0092      	lsls	r2, r2, #2
1000f258:	2100      	movs	r1, #0
1000f25a:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1000f25c:	230f      	movs	r3, #15
1000f25e:	18fb      	adds	r3, r7, r3
1000f260:	781a      	ldrb	r2, [r3, #0]
1000f262:	230f      	movs	r3, #15
1000f264:	18fb      	adds	r3, r7, r3
1000f266:	3201      	adds	r2, #1
1000f268:	701a      	strb	r2, [r3, #0]
1000f26a:	230f      	movs	r3, #15
1000f26c:	18fb      	adds	r3, r7, r3
1000f26e:	781b      	ldrb	r3, [r3, #0]
1000f270:	2b00      	cmp	r3, #0
1000f272:	d0ec      	beq.n	1000f24e <ble_device_init+0xe6>
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000f274:	230f      	movs	r3, #15
1000f276:	18fb      	adds	r3, r7, r3
1000f278:	2200      	movs	r2, #0
1000f27a:	701a      	strb	r2, [r3, #0]
1000f27c:	e00d      	b.n	1000f29a <ble_device_init+0x132>
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000f27e:	230f      	movs	r3, #15
1000f280:	18fb      	adds	r3, r7, r3
1000f282:	781a      	ldrb	r2, [r3, #0]
1000f284:	4b4e      	ldr	r3, [pc, #312]	; (1000f3c0 <ble_device_init+0x258>)
1000f286:	0092      	lsls	r2, r2, #2
1000f288:	2100      	movs	r1, #0
1000f28a:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000f28c:	230f      	movs	r3, #15
1000f28e:	18fb      	adds	r3, r7, r3
1000f290:	781a      	ldrb	r2, [r3, #0]
1000f292:	230f      	movs	r3, #15
1000f294:	18fb      	adds	r3, r7, r3
1000f296:	3201      	adds	r2, #1
1000f298:	701a      	strb	r2, [r3, #0]
1000f29a:	230f      	movs	r3, #15
1000f29c:	18fb      	adds	r3, r7, r3
1000f29e:	781b      	ldrb	r3, [r3, #0]
1000f2a0:	2b04      	cmp	r3, #4
1000f2a2:	d9ec      	bls.n	1000f27e <ble_device_init+0x116>
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
1000f2a4:	230f      	movs	r3, #15
1000f2a6:	18fb      	adds	r3, r7, r3
1000f2a8:	2200      	movs	r2, #0
1000f2aa:	701a      	strb	r2, [r3, #0]
1000f2ac:	e00d      	b.n	1000f2ca <ble_device_init+0x162>
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000f2ae:	230f      	movs	r3, #15
1000f2b0:	18fb      	adds	r3, r7, r3
1000f2b2:	781a      	ldrb	r2, [r3, #0]
1000f2b4:	4b43      	ldr	r3, [pc, #268]	; (1000f3c4 <ble_device_init+0x25c>)
1000f2b6:	0092      	lsls	r2, r2, #2
1000f2b8:	2100      	movs	r1, #0
1000f2ba:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
1000f2bc:	230f      	movs	r3, #15
1000f2be:	18fb      	adds	r3, r7, r3
1000f2c0:	781a      	ldrb	r2, [r3, #0]
1000f2c2:	230f      	movs	r3, #15
1000f2c4:	18fb      	adds	r3, r7, r3
1000f2c6:	3201      	adds	r2, #1
1000f2c8:	701a      	strb	r2, [r3, #0]
1000f2ca:	230f      	movs	r3, #15
1000f2cc:	18fb      	adds	r3, r7, r3
1000f2ce:	781b      	ldrb	r3, [r3, #0]
1000f2d0:	2b00      	cmp	r3, #0
1000f2d2:	d0ec      	beq.n	1000f2ae <ble_device_init+0x146>
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000f2d4:	230f      	movs	r3, #15
1000f2d6:	18fb      	adds	r3, r7, r3
1000f2d8:	2200      	movs	r2, #0
1000f2da:	701a      	strb	r2, [r3, #0]
1000f2dc:	e02d      	b.n	1000f33a <ble_device_init+0x1d2>
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000f2de:	230f      	movs	r3, #15
1000f2e0:	18fb      	adds	r3, r7, r3
1000f2e2:	781a      	ldrb	r2, [r3, #0]
1000f2e4:	0013      	movs	r3, r2
1000f2e6:	015b      	lsls	r3, r3, #5
1000f2e8:	1a9b      	subs	r3, r3, r2
1000f2ea:	009b      	lsls	r3, r3, #2
1000f2ec:	4a36      	ldr	r2, [pc, #216]	; (1000f3c8 <ble_device_init+0x260>)
1000f2ee:	189b      	adds	r3, r3, r2
1000f2f0:	227c      	movs	r2, #124	; 0x7c
1000f2f2:	2100      	movs	r1, #0
1000f2f4:	0018      	movs	r0, r3
1000f2f6:	4b2c      	ldr	r3, [pc, #176]	; (1000f3a8 <ble_device_init+0x240>)
1000f2f8:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000f2fa:	230f      	movs	r3, #15
1000f2fc:	18fb      	adds	r3, r7, r3
1000f2fe:	781a      	ldrb	r2, [r3, #0]
1000f300:	4931      	ldr	r1, [pc, #196]	; (1000f3c8 <ble_device_init+0x260>)
1000f302:	205e      	movs	r0, #94	; 0x5e
1000f304:	0013      	movs	r3, r2
1000f306:	015b      	lsls	r3, r3, #5
1000f308:	1a9b      	subs	r3, r3, r2
1000f30a:	009b      	lsls	r3, r3, #2
1000f30c:	18cb      	adds	r3, r1, r3
1000f30e:	181b      	adds	r3, r3, r0
1000f310:	2200      	movs	r2, #0
1000f312:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000f314:	230f      	movs	r3, #15
1000f316:	18fb      	adds	r3, r7, r3
1000f318:	781a      	ldrb	r2, [r3, #0]
1000f31a:	492b      	ldr	r1, [pc, #172]	; (1000f3c8 <ble_device_init+0x260>)
1000f31c:	0013      	movs	r3, r2
1000f31e:	015b      	lsls	r3, r3, #5
1000f320:	1a9b      	subs	r3, r3, r2
1000f322:	009b      	lsls	r3, r3, #2
1000f324:	18cb      	adds	r3, r1, r3
1000f326:	3318      	adds	r3, #24
1000f328:	2240      	movs	r2, #64	; 0x40
1000f32a:	701a      	strb	r2, [r3, #0]
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000f32c:	230f      	movs	r3, #15
1000f32e:	18fb      	adds	r3, r7, r3
1000f330:	781a      	ldrb	r2, [r3, #0]
1000f332:	230f      	movs	r3, #15
1000f334:	18fb      	adds	r3, r7, r3
1000f336:	3201      	adds	r2, #1
1000f338:	701a      	strb	r2, [r3, #0]
1000f33a:	230f      	movs	r3, #15
1000f33c:	18fb      	adds	r3, r7, r3
1000f33e:	781b      	ldrb	r3, [r3, #0]
1000f340:	2b04      	cmp	r3, #4
1000f342:	d9cc      	bls.n	1000f2de <ble_device_init+0x176>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000f344:	4b21      	ldr	r3, [pc, #132]	; (1000f3cc <ble_device_init+0x264>)
1000f346:	2200      	movs	r2, #0
1000f348:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000f34a:	4b16      	ldr	r3, [pc, #88]	; (1000f3a4 <ble_device_init+0x23c>)
1000f34c:	4a20      	ldr	r2, [pc, #128]	; (1000f3d0 <ble_device_init+0x268>)
1000f34e:	605a      	str	r2, [r3, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
1000f350:	4b14      	ldr	r3, [pc, #80]	; (1000f3a4 <ble_device_init+0x23c>)
1000f352:	4a20      	ldr	r2, [pc, #128]	; (1000f3d4 <ble_device_init+0x26c>)
1000f354:	601a      	str	r2, [r3, #0]
#else
	pf_cfg.memPool.memSize = 0;
	pf_cfg.memPool.memStartAdd = NULL;
#endif
	
	ble_init(&pf_cfg);
1000f356:	4b13      	ldr	r3, [pc, #76]	; (1000f3a4 <ble_device_init+0x23c>)
1000f358:	0018      	movs	r0, r3
1000f35a:	4b1f      	ldr	r3, [pc, #124]	; (1000f3d8 <ble_device_init+0x270>)
1000f35c:	4798      	blx	r3

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000f35e:	4b1f      	ldr	r3, [pc, #124]	; (1000f3dc <ble_device_init+0x274>)
1000f360:	001a      	movs	r2, r3
1000f362:	2100      	movs	r1, #0
1000f364:	2000      	movs	r0, #0
1000f366:	4b1e      	ldr	r3, [pc, #120]	; (1000f3e0 <ble_device_init+0x278>)
1000f368:	4798      	blx	r3
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000f36a:	4b1e      	ldr	r3, [pc, #120]	; (1000f3e4 <ble_device_init+0x27c>)
1000f36c:	001a      	movs	r2, r3
1000f36e:	2102      	movs	r1, #2
1000f370:	2000      	movs	r0, #0
1000f372:	4b1b      	ldr	r3, [pc, #108]	; (1000f3e0 <ble_device_init+0x278>)
1000f374:	4798      	blx	r3
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
1000f376:	4b1c      	ldr	r3, [pc, #112]	; (1000f3e8 <ble_device_init+0x280>)
1000f378:	60bb      	str	r3, [r7, #8]
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000f37a:	68bb      	ldr	r3, [r7, #8]
1000f37c:	0018      	movs	r0, r3
1000f37e:	4b1b      	ldr	r3, [pc, #108]	; (1000f3ec <ble_device_init+0x284>)
1000f380:	4798      	blx	r3
1000f382:	0003      	movs	r3, r0
1000f384:	b2da      	uxtb	r2, r3
1000f386:	68bb      	ldr	r3, [r7, #8]
1000f388:	0011      	movs	r1, r2
1000f38a:	0018      	movs	r0, r3
1000f38c:	4b18      	ldr	r3, [pc, #96]	; (1000f3f0 <ble_device_init+0x288>)
1000f38e:	4798      	blx	r3
	{
		//DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
1000f390:	687b      	ldr	r3, [r7, #4]
1000f392:	0018      	movs	r0, r3
1000f394:	4b17      	ldr	r3, [pc, #92]	; (1000f3f4 <ble_device_init+0x28c>)
1000f396:	4798      	blx	r3
}
1000f398:	46c0      	nop			; (mov r8, r8)
1000f39a:	46bd      	mov	sp, r7
1000f39c:	b004      	add	sp, #16
1000f39e:	bd80      	pop	{r7, pc}
1000f3a0:	1000f0e5 	.word	0x1000f0e5
1000f3a4:	1001a850 	.word	0x1001a850
1000f3a8:	10017329 	.word	0x10017329
1000f3ac:	1001a814 	.word	0x1001a814
1000f3b0:	1001a828 	.word	0x1001a828
1000f3b4:	1001a57c 	.word	0x1001a57c
1000f3b8:	1001a860 	.word	0x1001a860
1000f3bc:	1001a578 	.word	0x1001a578
1000f3c0:	1001a800 	.word	0x1001a800
1000f3c4:	1001ada4 	.word	0x1001ada4
1000f3c8:	1001a590 	.word	0x1001a590
1000f3cc:	1001a7fc 	.word	0x1001a7fc
1000f3d0:	000004e2 	.word	0x000004e2
1000f3d4:	10019b6c 	.word	0x10019b6c
1000f3d8:	1000f435 	.word	0x1000f435
1000f3dc:	10019258 	.word	0x10019258
1000f3e0:	1000f531 	.word	0x1000f531
1000f3e4:	100192a4 	.word	0x100192a4
1000f3e8:	100192cc 	.word	0x100192cc
1000f3ec:	100177b5 	.word	0x100177b5
1000f3f0:	1000f3f9 	.word	0x1000f3f9
1000f3f4:	1000f459 	.word	0x1000f459

1000f3f8 <ble_set_device_name>:

/** @brief set device name to BLE Device*/
at_ble_status_t ble_set_device_name(uint8_t *name, uint8_t name_len)
{
1000f3f8:	b580      	push	{r7, lr}
1000f3fa:	b082      	sub	sp, #8
1000f3fc:	af00      	add	r7, sp, #0
1000f3fe:	6078      	str	r0, [r7, #4]
1000f400:	000a      	movs	r2, r1
1000f402:	1cfb      	adds	r3, r7, #3
1000f404:	701a      	strb	r2, [r3, #0]
	if ((name == NULL) || (name_len < 1))
1000f406:	687b      	ldr	r3, [r7, #4]
1000f408:	2b00      	cmp	r3, #0
1000f40a:	d003      	beq.n	1000f414 <ble_set_device_name+0x1c>
1000f40c:	1cfb      	adds	r3, r7, #3
1000f40e:	781b      	ldrb	r3, [r3, #0]
1000f410:	2b00      	cmp	r3, #0
1000f412:	d101      	bne.n	1000f418 <ble_set_device_name+0x20>
	{
		return AT_BLE_INVALID_PARAM;
1000f414:	23cf      	movs	r3, #207	; 0xcf
1000f416:	e007      	b.n	1000f428 <ble_set_device_name+0x30>
	}
	return at_ble_device_name_set(name, name_len);
1000f418:	1cfb      	adds	r3, r7, #3
1000f41a:	781a      	ldrb	r2, [r3, #0]
1000f41c:	687b      	ldr	r3, [r7, #4]
1000f41e:	0011      	movs	r1, r2
1000f420:	0018      	movs	r0, r3
1000f422:	4b03      	ldr	r3, [pc, #12]	; (1000f430 <ble_set_device_name+0x38>)
1000f424:	4798      	blx	r3
1000f426:	0003      	movs	r3, r0
}
1000f428:	0018      	movs	r0, r3
1000f42a:	46bd      	mov	sp, r7
1000f42c:	b002      	add	sp, #8
1000f42e:	bd80      	pop	{r7, pc}
1000f430:	10012b3d 	.word	0x10012b3d

1000f434 <ble_init>:

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
1000f434:	b580      	push	{r7, lr}
1000f436:	b082      	sub	sp, #8
1000f438:	af00      	add	r7, sp, #0
1000f43a:	6078      	str	r0, [r7, #4]
	/* Initialize the platform */
	//DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000f43c:	687b      	ldr	r3, [r7, #4]
1000f43e:	0018      	movs	r0, r3
1000f440:	4b04      	ldr	r3, [pc, #16]	; (1000f454 <ble_init+0x20>)
1000f442:	4798      	blx	r3
1000f444:	1e03      	subs	r3, r0, #0
1000f446:	d000      	beq.n	1000f44a <ble_init+0x16>
	{
		//DBG_LOG("SAMB11 Initialization failed");
		//DBG_LOG("Please check the power and connection / hardware connector");	
		while(1);
1000f448:	e7fe      	b.n	1000f448 <ble_init+0x14>
	}
}
1000f44a:	46c0      	nop			; (mov r8, r8)
1000f44c:	46bd      	mov	sp, r7
1000f44e:	b002      	add	sp, #8
1000f450:	bd80      	pop	{r7, pc}
1000f452:	46c0      	nop			; (mov r8, r8)
1000f454:	10012c25 	.word	0x10012c25

1000f458 <ble_set_dev_config>:


/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
1000f458:	b580      	push	{r7, lr}
1000f45a:	b08e      	sub	sp, #56	; 0x38
1000f45c:	af00      	add	r7, sp, #0
1000f45e:	6078      	str	r0, [r7, #4]
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000f460:	2308      	movs	r3, #8
1000f462:	18fa      	adds	r2, r7, r3
1000f464:	4b2b      	ldr	r3, [pc, #172]	; (1000f514 <ble_set_dev_config+0xbc>)
1000f466:	0010      	movs	r0, r2
1000f468:	0019      	movs	r1, r3
1000f46a:	2307      	movs	r3, #7
1000f46c:	001a      	movs	r2, r3
1000f46e:	4b2a      	ldr	r3, [pc, #168]	; (1000f518 <ble_set_dev_config+0xc0>)
1000f470:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000f472:	2310      	movs	r3, #16
1000f474:	18fb      	adds	r3, r7, r3
1000f476:	2226      	movs	r2, #38	; 0x26
1000f478:	2100      	movs	r1, #0
1000f47a:	0018      	movs	r0, r3
1000f47c:	4b27      	ldr	r3, [pc, #156]	; (1000f51c <ble_set_dev_config+0xc4>)
1000f47e:	4798      	blx	r3
	
	if (addr == NULL)
1000f480:	687b      	ldr	r3, [r7, #4]
1000f482:	2b00      	cmp	r3, #0
1000f484:	d107      	bne.n	1000f496 <ble_set_dev_config+0x3e>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000f486:	2308      	movs	r3, #8
1000f488:	18fb      	adds	r3, r7, r3
1000f48a:	0018      	movs	r0, r3
1000f48c:	4b24      	ldr	r3, [pc, #144]	; (1000f520 <ble_set_dev_config+0xc8>)
1000f48e:	4798      	blx	r3
		{
			//DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000f490:	2308      	movs	r3, #8
1000f492:	18fb      	adds	r3, r7, r3
1000f494:	607b      	str	r3, [r7, #4]
	//addr->addr[1],
	//addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000f496:	2310      	movs	r3, #16
1000f498:	18fb      	adds	r3, r7, r3
1000f49a:	220a      	movs	r2, #10
1000f49c:	701a      	strb	r2, [r3, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000f49e:	2310      	movs	r3, #16
1000f4a0:	18fb      	adds	r3, r7, r3
1000f4a2:	4a20      	ldr	r2, [pc, #128]	; (1000f524 <ble_set_dev_config+0xcc>)
1000f4a4:	805a      	strh	r2, [r3, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000f4a6:	2310      	movs	r3, #16
1000f4a8:	18fb      	adds	r3, r7, r3
1000f4aa:	687a      	ldr	r2, [r7, #4]
1000f4ac:	3304      	adds	r3, #4
1000f4ae:	0011      	movs	r1, r2
1000f4b0:	2207      	movs	r2, #7
1000f4b2:	0018      	movs	r0, r3
1000f4b4:	4b18      	ldr	r3, [pc, #96]	; (1000f518 <ble_set_dev_config+0xc0>)
1000f4b6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000f4b8:	2310      	movs	r3, #16
1000f4ba:	18fb      	adds	r3, r7, r3
1000f4bc:	2200      	movs	r2, #0
1000f4be:	76da      	strb	r2, [r3, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000f4c0:	2310      	movs	r3, #16
1000f4c2:	18fb      	adds	r3, r7, r3
1000f4c4:	2200      	movs	r2, #0
1000f4c6:	771a      	strb	r2, [r3, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000f4c8:	2310      	movs	r3, #16
1000f4ca:	18fb      	adds	r3, r7, r3
1000f4cc:	2200      	movs	r2, #0
1000f4ce:	775a      	strb	r2, [r3, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000f4d0:	2310      	movs	r3, #16
1000f4d2:	18fb      	adds	r3, r7, r3
1000f4d4:	2200      	movs	r2, #0
1000f4d6:	779a      	strb	r2, [r3, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000f4d8:	2310      	movs	r3, #16
1000f4da:	18fb      	adds	r3, r7, r3
1000f4dc:	2200      	movs	r2, #0
1000f4de:	77da      	strb	r2, [r3, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000f4e0:	2310      	movs	r3, #16
1000f4e2:	18fb      	adds	r3, r7, r3
1000f4e4:	2200      	movs	r2, #0
1000f4e6:	841a      	strh	r2, [r3, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000f4e8:	2310      	movs	r3, #16
1000f4ea:	18fb      	adds	r3, r7, r3
1000f4ec:	2200      	movs	r2, #0
1000f4ee:	845a      	strh	r2, [r3, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000f4f0:	2310      	movs	r3, #16
1000f4f2:	18fb      	adds	r3, r7, r3
1000f4f4:	2280      	movs	r2, #128	; 0x80
1000f4f6:	0092      	lsls	r2, r2, #2
1000f4f8:	849a      	strh	r2, [r3, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000f4fa:	2310      	movs	r3, #16
1000f4fc:	18fb      	adds	r3, r7, r3
1000f4fe:	0018      	movs	r0, r3
1000f500:	4b09      	ldr	r3, [pc, #36]	; (1000f528 <ble_set_dev_config+0xd0>)
1000f502:	4798      	blx	r3
	{
		//DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000f504:	687b      	ldr	r3, [r7, #4]
1000f506:	0018      	movs	r0, r3
1000f508:	4b08      	ldr	r3, [pc, #32]	; (1000f52c <ble_set_dev_config+0xd4>)
1000f50a:	4798      	blx	r3
	{
		//DBG_LOG("Set BLE Device Address failed");
	}
}
1000f50c:	46c0      	nop			; (mov r8, r8)
1000f50e:	46bd      	mov	sp, r7
1000f510:	b00e      	add	sp, #56	; 0x38
1000f512:	bd80      	pop	{r7, pc}
1000f514:	100192d8 	.word	0x100192d8
1000f518:	10017317 	.word	0x10017317
1000f51c:	10017329 	.word	0x10017329
1000f520:	10012b71 	.word	0x10012b71
1000f524:	00003a98 	.word	0x00003a98
1000f528:	10012b95 	.word	0x10012b95
1000f52c:	10012dbd 	.word	0x10012dbd

1000f530 <ble_mgr_events_callback_handler>:

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000f530:	b580      	push	{r7, lr}
1000f532:	b084      	sub	sp, #16
1000f534:	af00      	add	r7, sp, #0
1000f536:	603a      	str	r2, [r7, #0]
1000f538:	1dfb      	adds	r3, r7, #7
1000f53a:	1c02      	adds	r2, r0, #0
1000f53c:	701a      	strb	r2, [r3, #0]
1000f53e:	1dbb      	adds	r3, r7, #6
1000f540:	1c0a      	adds	r2, r1, #0
1000f542:	701a      	strb	r2, [r3, #0]
	uint8_t idx;
	uint8_t max_event_handler = 0;
1000f544:	230e      	movs	r3, #14
1000f546:	18fb      	adds	r3, r7, r3
1000f548:	2200      	movs	r2, #0
1000f54a:	701a      	strb	r2, [r3, #0]
	bool status = true;
1000f54c:	230d      	movs	r3, #13
1000f54e:	18fb      	adds	r3, r7, r3
1000f550:	2201      	movs	r2, #1
1000f552:	701a      	strb	r2, [r3, #0]
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
1000f554:	2300      	movs	r3, #0
1000f556:	60bb      	str	r3, [r7, #8]
	if (ble_event_handler != NULL)
1000f558:	683b      	ldr	r3, [r7, #0]
1000f55a:	2b00      	cmp	r3, #0
1000f55c:	d100      	bne.n	1000f560 <ble_mgr_events_callback_handler+0x30>
1000f55e:	e0a6      	b.n	1000f6ae <ble_mgr_events_callback_handler+0x17e>
	{
		switch(event_type)
1000f560:	1dbb      	adds	r3, r7, #6
1000f562:	781b      	ldrb	r3, [r3, #0]
1000f564:	2b06      	cmp	r3, #6
1000f566:	d835      	bhi.n	1000f5d4 <ble_mgr_events_callback_handler+0xa4>
1000f568:	009a      	lsls	r2, r3, #2
1000f56a:	4b56      	ldr	r3, [pc, #344]	; (1000f6c4 <ble_mgr_events_callback_handler+0x194>)
1000f56c:	18d3      	adds	r3, r2, r3
1000f56e:	681b      	ldr	r3, [r3, #0]
1000f570:	469f      	mov	pc, r3
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000f572:	4b55      	ldr	r3, [pc, #340]	; (1000f6c8 <ble_mgr_events_callback_handler+0x198>)
1000f574:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000f576:	230e      	movs	r3, #14
1000f578:	18fb      	adds	r3, r7, r3
1000f57a:	2205      	movs	r2, #5
1000f57c:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f57e:	e02e      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000f580:	4b52      	ldr	r3, [pc, #328]	; (1000f6cc <ble_mgr_events_callback_handler+0x19c>)
1000f582:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000f584:	230e      	movs	r3, #14
1000f586:	18fb      	adds	r3, r7, r3
1000f588:	2205      	movs	r2, #5
1000f58a:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f58c:	e027      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000f58e:	4b50      	ldr	r3, [pc, #320]	; (1000f6d0 <ble_mgr_events_callback_handler+0x1a0>)
1000f590:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000f592:	230e      	movs	r3, #14
1000f594:	18fb      	adds	r3, r7, r3
1000f596:	2205      	movs	r2, #5
1000f598:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f59a:	e020      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000f59c:	4b4d      	ldr	r3, [pc, #308]	; (1000f6d4 <ble_mgr_events_callback_handler+0x1a4>)
1000f59e:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000f5a0:	230e      	movs	r3, #14
1000f5a2:	18fb      	adds	r3, r7, r3
1000f5a4:	2201      	movs	r2, #1
1000f5a6:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f5a8:	e019      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000f5aa:	4b4b      	ldr	r3, [pc, #300]	; (1000f6d8 <ble_mgr_events_callback_handler+0x1a8>)
1000f5ac:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000f5ae:	230e      	movs	r3, #14
1000f5b0:	18fb      	adds	r3, r7, r3
1000f5b2:	2201      	movs	r2, #1
1000f5b4:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f5b6:	e012      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000f5b8:	4b48      	ldr	r3, [pc, #288]	; (1000f6dc <ble_mgr_events_callback_handler+0x1ac>)
1000f5ba:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000f5bc:	230e      	movs	r3, #14
1000f5be:	18fb      	adds	r3, r7, r3
1000f5c0:	2205      	movs	r2, #5
1000f5c2:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f5c4:	e00b      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000f5c6:	4b46      	ldr	r3, [pc, #280]	; (1000f6e0 <ble_mgr_events_callback_handler+0x1b0>)
1000f5c8:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000f5ca:	230e      	movs	r3, #14
1000f5cc:	18fb      	adds	r3, r7, r3
1000f5ce:	2201      	movs	r2, #1
1000f5d0:	701a      	strb	r2, [r3, #0]
			}
			break;
1000f5d2:	e004      	b.n	1000f5de <ble_mgr_events_callback_handler+0xae>
			
			default:
			{
				status = false; //Invalid Parameter
1000f5d4:	230d      	movs	r3, #13
1000f5d6:	18fb      	adds	r3, r7, r3
1000f5d8:	2200      	movs	r2, #0
1000f5da:	701a      	strb	r2, [r3, #0]
			}			
			break;
1000f5dc:	46c0      	nop			; (mov r8, r8)
		}
		
		if (status)
1000f5de:	230d      	movs	r3, #13
1000f5e0:	18fb      	adds	r3, r7, r3
1000f5e2:	781b      	ldrb	r3, [r3, #0]
1000f5e4:	2b00      	cmp	r3, #0
1000f5e6:	d066      	beq.n	1000f6b6 <ble_mgr_events_callback_handler+0x186>
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000f5e8:	230d      	movs	r3, #13
1000f5ea:	18fb      	adds	r3, r7, r3
1000f5ec:	2200      	movs	r2, #0
1000f5ee:	701a      	strb	r2, [r3, #0]
			if (event_cb_type == REGISTER_CALL_BACK)
1000f5f0:	1dfb      	adds	r3, r7, #7
1000f5f2:	781b      	ldrb	r3, [r3, #0]
1000f5f4:	2b00      	cmp	r3, #0
1000f5f6:	d12a      	bne.n	1000f64e <ble_mgr_events_callback_handler+0x11e>
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000f5f8:	230f      	movs	r3, #15
1000f5fa:	18fb      	adds	r3, r7, r3
1000f5fc:	2200      	movs	r2, #0
1000f5fe:	701a      	strb	r2, [r3, #0]
1000f600:	e01c      	b.n	1000f63c <ble_mgr_events_callback_handler+0x10c>
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000f602:	230f      	movs	r3, #15
1000f604:	18fb      	adds	r3, r7, r3
1000f606:	781b      	ldrb	r3, [r3, #0]
1000f608:	009b      	lsls	r3, r3, #2
1000f60a:	68ba      	ldr	r2, [r7, #8]
1000f60c:	18d3      	adds	r3, r2, r3
1000f60e:	681b      	ldr	r3, [r3, #0]
1000f610:	2b00      	cmp	r3, #0
1000f612:	d10c      	bne.n	1000f62e <ble_mgr_events_callback_handler+0xfe>
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000f614:	230f      	movs	r3, #15
1000f616:	18fb      	adds	r3, r7, r3
1000f618:	781b      	ldrb	r3, [r3, #0]
1000f61a:	009b      	lsls	r3, r3, #2
1000f61c:	68ba      	ldr	r2, [r7, #8]
1000f61e:	18d3      	adds	r3, r2, r3
1000f620:	683a      	ldr	r2, [r7, #0]
1000f622:	601a      	str	r2, [r3, #0]
						status = true; //Successfully registered to table
1000f624:	230d      	movs	r3, #13
1000f626:	18fb      	adds	r3, r7, r3
1000f628:	2201      	movs	r2, #1
1000f62a:	701a      	strb	r2, [r3, #0]
						break;
1000f62c:	e043      	b.n	1000f6b6 <ble_mgr_events_callback_handler+0x186>
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000f62e:	230f      	movs	r3, #15
1000f630:	18fb      	adds	r3, r7, r3
1000f632:	781a      	ldrb	r2, [r3, #0]
1000f634:	230f      	movs	r3, #15
1000f636:	18fb      	adds	r3, r7, r3
1000f638:	3201      	adds	r2, #1
1000f63a:	701a      	strb	r2, [r3, #0]
1000f63c:	230f      	movs	r3, #15
1000f63e:	18fa      	adds	r2, r7, r3
1000f640:	230e      	movs	r3, #14
1000f642:	18fb      	adds	r3, r7, r3
1000f644:	7812      	ldrb	r2, [r2, #0]
1000f646:	781b      	ldrb	r3, [r3, #0]
1000f648:	429a      	cmp	r2, r3
1000f64a:	d3da      	bcc.n	1000f602 <ble_mgr_events_callback_handler+0xd2>
1000f64c:	e033      	b.n	1000f6b6 <ble_mgr_events_callback_handler+0x186>
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000f64e:	1dfb      	adds	r3, r7, #7
1000f650:	781b      	ldrb	r3, [r3, #0]
1000f652:	2b01      	cmp	r3, #1
1000f654:	d12f      	bne.n	1000f6b6 <ble_mgr_events_callback_handler+0x186>
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000f656:	230f      	movs	r3, #15
1000f658:	18fb      	adds	r3, r7, r3
1000f65a:	2200      	movs	r2, #0
1000f65c:	701a      	strb	r2, [r3, #0]
1000f65e:	e01d      	b.n	1000f69c <ble_mgr_events_callback_handler+0x16c>
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000f660:	230f      	movs	r3, #15
1000f662:	18fb      	adds	r3, r7, r3
1000f664:	781b      	ldrb	r3, [r3, #0]
1000f666:	009b      	lsls	r3, r3, #2
1000f668:	68ba      	ldr	r2, [r7, #8]
1000f66a:	18d3      	adds	r3, r2, r3
1000f66c:	681a      	ldr	r2, [r3, #0]
1000f66e:	683b      	ldr	r3, [r7, #0]
1000f670:	429a      	cmp	r2, r3
1000f672:	d10c      	bne.n	1000f68e <ble_mgr_events_callback_handler+0x15e>
					{
						ble_event_cb_ptr[idx] = NULL;
1000f674:	230f      	movs	r3, #15
1000f676:	18fb      	adds	r3, r7, r3
1000f678:	781b      	ldrb	r3, [r3, #0]
1000f67a:	009b      	lsls	r3, r3, #2
1000f67c:	68ba      	ldr	r2, [r7, #8]
1000f67e:	18d3      	adds	r3, r2, r3
1000f680:	2200      	movs	r2, #0
1000f682:	601a      	str	r2, [r3, #0]
						status = true;//Successfully unregistered from table
1000f684:	230d      	movs	r3, #13
1000f686:	18fb      	adds	r3, r7, r3
1000f688:	2201      	movs	r2, #1
1000f68a:	701a      	strb	r2, [r3, #0]
						break;
1000f68c:	e013      	b.n	1000f6b6 <ble_mgr_events_callback_handler+0x186>
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000f68e:	230f      	movs	r3, #15
1000f690:	18fb      	adds	r3, r7, r3
1000f692:	781a      	ldrb	r2, [r3, #0]
1000f694:	230f      	movs	r3, #15
1000f696:	18fb      	adds	r3, r7, r3
1000f698:	3201      	adds	r2, #1
1000f69a:	701a      	strb	r2, [r3, #0]
1000f69c:	230f      	movs	r3, #15
1000f69e:	18fa      	adds	r2, r7, r3
1000f6a0:	230e      	movs	r3, #14
1000f6a2:	18fb      	adds	r3, r7, r3
1000f6a4:	7812      	ldrb	r2, [r2, #0]
1000f6a6:	781b      	ldrb	r3, [r3, #0]
1000f6a8:	429a      	cmp	r2, r3
1000f6aa:	d3d9      	bcc.n	1000f660 <ble_mgr_events_callback_handler+0x130>
1000f6ac:	e003      	b.n	1000f6b6 <ble_mgr_events_callback_handler+0x186>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000f6ae:	230d      	movs	r3, #13
1000f6b0:	18fb      	adds	r3, r7, r3
1000f6b2:	2200      	movs	r2, #0
1000f6b4:	701a      	strb	r2, [r3, #0]
	}
	return status;
1000f6b6:	230d      	movs	r3, #13
1000f6b8:	18fb      	adds	r3, r7, r3
1000f6ba:	781b      	ldrb	r3, [r3, #0]
}
1000f6bc:	0018      	movs	r0, r3
1000f6be:	46bd      	mov	sp, r7
1000f6c0:	b004      	add	sp, #16
1000f6c2:	bd80      	pop	{r7, pc}
1000f6c4:	1001982c 	.word	0x1001982c
1000f6c8:	1001a814 	.word	0x1001a814
1000f6cc:	1001a828 	.word	0x1001a828
1000f6d0:	1001a57c 	.word	0x1001a57c
1000f6d4:	1001a860 	.word	0x1001a860
1000f6d8:	1001a578 	.word	0x1001a578
1000f6dc:	1001a800 	.word	0x1001a800
1000f6e0:	1001ada4 	.word	0x1001ada4

1000f6e4 <ble_undefined_event_handler>:

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000f6e4:	b580      	push	{r7, lr}
1000f6e6:	b082      	sub	sp, #8
1000f6e8:	af00      	add	r7, sp, #0
1000f6ea:	6078      	str	r0, [r7, #4]
	DBG_LOG_DEV("Undefined Event Received");
1000f6ec:	4b06      	ldr	r3, [pc, #24]	; (1000f708 <ble_undefined_event_handler+0x24>)
1000f6ee:	0018      	movs	r0, r3
1000f6f0:	4b06      	ldr	r3, [pc, #24]	; (1000f70c <ble_undefined_event_handler+0x28>)
1000f6f2:	4798      	blx	r3
1000f6f4:	4b06      	ldr	r3, [pc, #24]	; (1000f710 <ble_undefined_event_handler+0x2c>)
1000f6f6:	0018      	movs	r0, r3
1000f6f8:	4b06      	ldr	r3, [pc, #24]	; (1000f714 <ble_undefined_event_handler+0x30>)
1000f6fa:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
1000f6fc:	2300      	movs	r3, #0
}
1000f6fe:	0018      	movs	r0, r3
1000f700:	46bd      	mov	sp, r7
1000f702:	b002      	add	sp, #8
1000f704:	bd80      	pop	{r7, pc}
1000f706:	46c0      	nop			; (mov r8, r8)
1000f708:	100192e0 	.word	0x100192e0
1000f70c:	10017591 	.word	0x10017591
1000f710:	100192e4 	.word	0x100192e4
1000f714:	10017471 	.word	0x10017471

1000f718 <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000f718:	b580      	push	{r7, lr}
1000f71a:	b084      	sub	sp, #16
1000f71c:	af00      	add	r7, sp, #0
1000f71e:	6078      	str	r0, [r7, #4]
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
1000f720:	687b      	ldr	r3, [r7, #4]
1000f722:	60fb      	str	r3, [r7, #12]
	if(scan_response_count < MAX_SCAN_DEVICE)
1000f724:	4b12      	ldr	r3, [pc, #72]	; (1000f770 <ble_scan_info_handler+0x58>)
1000f726:	781b      	ldrb	r3, [r3, #0]
1000f728:	b2db      	uxtb	r3, r3
1000f72a:	2b13      	cmp	r3, #19
1000f72c:	d818      	bhi.n	1000f760 <ble_scan_info_handler+0x48>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000f72e:	4b10      	ldr	r3, [pc, #64]	; (1000f770 <ble_scan_info_handler+0x58>)
1000f730:	781b      	ldrb	r3, [r3, #0]
1000f732:	b2db      	uxtb	r3, r3
1000f734:	001a      	movs	r2, r3
1000f736:	0013      	movs	r3, r2
1000f738:	009b      	lsls	r3, r3, #2
1000f73a:	189b      	adds	r3, r3, r2
1000f73c:	00db      	lsls	r3, r3, #3
1000f73e:	189b      	adds	r3, r3, r2
1000f740:	4a0c      	ldr	r2, [pc, #48]	; (1000f774 <ble_scan_info_handler+0x5c>)
1000f742:	189b      	adds	r3, r3, r2
1000f744:	68f9      	ldr	r1, [r7, #12]
1000f746:	2229      	movs	r2, #41	; 0x29
1000f748:	0018      	movs	r0, r3
1000f74a:	4b0b      	ldr	r3, [pc, #44]	; (1000f778 <ble_scan_info_handler+0x60>)
1000f74c:	4798      	blx	r3
		//scan_param->dev_addr.addr[4],
		//scan_param->dev_addr.addr[3],
		//scan_param->dev_addr.addr[2],
		//scan_param->dev_addr.addr[1],
		//scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000f74e:	4b08      	ldr	r3, [pc, #32]	; (1000f770 <ble_scan_info_handler+0x58>)
1000f750:	781b      	ldrb	r3, [r3, #0]
1000f752:	b2db      	uxtb	r3, r3
1000f754:	3301      	adds	r3, #1
1000f756:	b2da      	uxtb	r2, r3
1000f758:	4b05      	ldr	r3, [pc, #20]	; (1000f770 <ble_scan_info_handler+0x58>)
1000f75a:	701a      	strb	r2, [r3, #0]
		return AT_BLE_SUCCESS;
1000f75c:	2300      	movs	r3, #0
1000f75e:	e002      	b.n	1000f766 <ble_scan_info_handler+0x4e>
	}
	else
	{
		//DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000f760:	4b06      	ldr	r3, [pc, #24]	; (1000f77c <ble_scan_info_handler+0x64>)
1000f762:	4798      	blx	r3
		{
			//DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
1000f764:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000f766:	0018      	movs	r0, r3
1000f768:	46bd      	mov	sp, r7
1000f76a:	b004      	add	sp, #16
1000f76c:	bd80      	pop	{r7, pc}
1000f76e:	46c0      	nop			; (mov r8, r8)
1000f770:	1001a058 	.word	0x1001a058
1000f774:	1001a864 	.word	0x1001a864
1000f778:	10017317 	.word	0x10017317
1000f77c:	10012fd1 	.word	0x10012fd1

1000f780 <ble_scan_report_handler>:

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000f780:	b580      	push	{r7, lr}
1000f782:	b084      	sub	sp, #16
1000f784:	af00      	add	r7, sp, #0
1000f786:	6078      	str	r0, [r7, #4]
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
1000f788:	687b      	ldr	r3, [r7, #4]
1000f78a:	60fb      	str	r3, [r7, #12]
	if (scan_report->status == AT_BLE_SUCCESS)
1000f78c:	68fb      	ldr	r3, [r7, #12]
1000f78e:	781b      	ldrb	r3, [r3, #0]
1000f790:	2b00      	cmp	r3, #0
1000f792:	d101      	bne.n	1000f798 <ble_scan_report_handler+0x18>
	{
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
1000f794:	2300      	movs	r3, #0
1000f796:	e000      	b.n	1000f79a <ble_scan_report_handler+0x1a>
	}
	else
	{
		//DBG_LOG("Scanning  failed");
	}
	return AT_BLE_FAILURE;
1000f798:	23e2      	movs	r3, #226	; 0xe2
}
1000f79a:	0018      	movs	r0, r3
1000f79c:	46bd      	mov	sp, r7
1000f79e:	b004      	add	sp, #16
1000f7a0:	bd80      	pop	{r7, pc}
1000f7a2:	46c0      	nop			; (mov r8, r8)

1000f7a4 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000f7a4:	b580      	push	{r7, lr}
1000f7a6:	b082      	sub	sp, #8
1000f7a8:	af00      	add	r7, sp, #0
1000f7aa:	0002      	movs	r2, r0
1000f7ac:	1dbb      	adds	r3, r7, #6
1000f7ae:	801a      	strh	r2, [r3, #0]
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000f7b0:	1dbb      	adds	r3, r7, #6
1000f7b2:	881b      	ldrh	r3, [r3, #0]
1000f7b4:	2200      	movs	r2, #0
1000f7b6:	2100      	movs	r1, #0
1000f7b8:	0018      	movs	r0, r3
1000f7ba:	4b05      	ldr	r3, [pc, #20]	; (1000f7d0 <ble_send_slave_sec_request+0x2c>)
1000f7bc:	4798      	blx	r3
1000f7be:	1e03      	subs	r3, r0, #0
1000f7c0:	d101      	bne.n	1000f7c6 <ble_send_slave_sec_request+0x22>
		{
			//DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
1000f7c2:	2300      	movs	r3, #0
1000f7c4:	e000      	b.n	1000f7c8 <ble_send_slave_sec_request+0x24>
		else
		{
			//DBG_LOG("Slave security request failed");
		}
	#endif
	return AT_BLE_FAILURE;
1000f7c6:	23e2      	movs	r3, #226	; 0xe2
}
1000f7c8:	0018      	movs	r0, r3
1000f7ca:	46bd      	mov	sp, r7
1000f7cc:	b002      	add	sp, #8
1000f7ce:	bd80      	pop	{r7, pc}
1000f7d0:	10013b09 	.word	0x10013b09

1000f7d4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000f7d4:	b5b0      	push	{r4, r5, r7, lr}
1000f7d6:	b09a      	sub	sp, #104	; 0x68
1000f7d8:	af00      	add	r7, sp, #0
1000f7da:	6078      	str	r0, [r7, #4]
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
1000f7dc:	2367      	movs	r3, #103	; 0x67
1000f7de:	18fb      	adds	r3, r7, r3
1000f7e0:	2200      	movs	r2, #0
1000f7e2:	701a      	strb	r2, [r3, #0]
	conn_params = (at_ble_connected_t *)params;
1000f7e4:	687b      	ldr	r3, [r7, #4]
1000f7e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	bool peripheral_device_added = false;
1000f7e8:	2366      	movs	r3, #102	; 0x66
1000f7ea:	18fb      	adds	r3, r7, r3
1000f7ec:	2200      	movs	r2, #0
1000f7ee:	701a      	strb	r2, [r3, #0]
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000f7f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000f7f2:	7a9b      	ldrb	r3, [r3, #10]
1000f7f4:	2b00      	cmp	r3, #0
1000f7f6:	d000      	beq.n	1000f7fa <ble_connected_state_handler+0x26>
1000f7f8:	e168      	b.n	1000facc <ble_connected_state_handler+0x2f8>
		//conn_params->peer_addr.addr[1],
		//conn_params->peer_addr.addr[0]);
		
		//DBG_LOG("Connection Handle %d", conn_params->handle);
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000f7fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
1000f7fc:	4bbc      	ldr	r3, [pc, #752]	; (1000faf0 <ble_connected_state_handler+0x31c>)
1000f7fe:	2212      	movs	r2, #18
1000f800:	0018      	movs	r0, r3
1000f802:	4bbc      	ldr	r3, [pc, #752]	; (1000faf4 <ble_connected_state_handler+0x320>)
1000f804:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000f806:	6df9      	ldr	r1, [r7, #92]	; 0x5c
1000f808:	4bbb      	ldr	r3, [pc, #748]	; (1000faf8 <ble_connected_state_handler+0x324>)
1000f80a:	2207      	movs	r2, #7
1000f80c:	0018      	movs	r0, r3
1000f80e:	4bbb      	ldr	r3, [pc, #748]	; (1000fafc <ble_connected_state_handler+0x328>)
1000f810:	4798      	blx	r3
1000f812:	1e03      	subs	r3, r0, #0
1000f814:	d100      	bne.n	1000f818 <ble_connected_state_handler+0x44>
1000f816:	e07b      	b.n	1000f910 <ble_connected_state_handler+0x13c>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000f818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000f81a:	781b      	ldrb	r3, [r3, #0]
1000f81c:	2b02      	cmp	r3, #2
1000f81e:	d000      	beq.n	1000f822 <ble_connected_state_handler+0x4e>
1000f820:	e076      	b.n	1000f910 <ble_connected_state_handler+0x13c>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000f822:	2362      	movs	r3, #98	; 0x62
1000f824:	18fb      	adds	r3, r7, r3
1000f826:	2200      	movs	r2, #0
1000f828:	801a      	strh	r2, [r3, #0]
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
1000f82a:	235b      	movs	r3, #91	; 0x5b
1000f82c:	18fb      	adds	r3, r7, r3
1000f82e:	2205      	movs	r2, #5
1000f830:	701a      	strb	r2, [r3, #0]
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000f832:	2308      	movs	r3, #8
1000f834:	18fb      	adds	r3, r7, r3
1000f836:	0018      	movs	r0, r3
1000f838:	2350      	movs	r3, #80	; 0x50
1000f83a:	001a      	movs	r2, r3
1000f83c:	2100      	movs	r1, #0
1000f83e:	4bb0      	ldr	r3, [pc, #704]	; (1000fb00 <ble_connected_state_handler+0x32c>)
1000f840:	4798      	blx	r3
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000f842:	2365      	movs	r3, #101	; 0x65
1000f844:	18fb      	adds	r3, r7, r3
1000f846:	2200      	movs	r2, #0
1000f848:	701a      	strb	r2, [r3, #0]
1000f84a:	e032      	b.n	1000f8b2 <ble_connected_state_handler+0xde>
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000f84c:	2364      	movs	r3, #100	; 0x64
1000f84e:	18fb      	adds	r3, r7, r3
1000f850:	2200      	movs	r2, #0
1000f852:	701a      	strb	r2, [r3, #0]
1000f854:	e021      	b.n	1000f89a <ble_connected_state_handler+0xc6>
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000f856:	2362      	movs	r3, #98	; 0x62
1000f858:	18fb      	adds	r3, r7, r3
1000f85a:	881b      	ldrh	r3, [r3, #0]
1000f85c:	2262      	movs	r2, #98	; 0x62
1000f85e:	18ba      	adds	r2, r7, r2
1000f860:	1c59      	adds	r1, r3, #1
1000f862:	8011      	strh	r1, [r2, #0]
1000f864:	001d      	movs	r5, r3
1000f866:	2365      	movs	r3, #101	; 0x65
1000f868:	18fb      	adds	r3, r7, r3
1000f86a:	781a      	ldrb	r2, [r3, #0]
1000f86c:	2364      	movs	r3, #100	; 0x64
1000f86e:	18fb      	adds	r3, r7, r3
1000f870:	7819      	ldrb	r1, [r3, #0]
1000f872:	48a4      	ldr	r0, [pc, #656]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000f874:	2446      	movs	r4, #70	; 0x46
1000f876:	0013      	movs	r3, r2
1000f878:	015b      	lsls	r3, r3, #5
1000f87a:	1a9b      	subs	r3, r3, r2
1000f87c:	009b      	lsls	r3, r3, #2
1000f87e:	18c3      	adds	r3, r0, r3
1000f880:	185b      	adds	r3, r3, r1
1000f882:	191b      	adds	r3, r3, r4
1000f884:	781a      	ldrb	r2, [r3, #0]
1000f886:	2308      	movs	r3, #8
1000f888:	18fb      	adds	r3, r7, r3
1000f88a:	555a      	strb	r2, [r3, r5]
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000f88c:	2364      	movs	r3, #100	; 0x64
1000f88e:	18fb      	adds	r3, r7, r3
1000f890:	781a      	ldrb	r2, [r3, #0]
1000f892:	2364      	movs	r3, #100	; 0x64
1000f894:	18fb      	adds	r3, r7, r3
1000f896:	3201      	adds	r2, #1
1000f898:	701a      	strb	r2, [r3, #0]
1000f89a:	2364      	movs	r3, #100	; 0x64
1000f89c:	18fb      	adds	r3, r7, r3
1000f89e:	781b      	ldrb	r3, [r3, #0]
1000f8a0:	2b0f      	cmp	r3, #15
1000f8a2:	d9d8      	bls.n	1000f856 <ble_connected_state_handler+0x82>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000f8a4:	2365      	movs	r3, #101	; 0x65
1000f8a6:	18fb      	adds	r3, r7, r3
1000f8a8:	781a      	ldrb	r2, [r3, #0]
1000f8aa:	2365      	movs	r3, #101	; 0x65
1000f8ac:	18fb      	adds	r3, r7, r3
1000f8ae:	3201      	adds	r2, #1
1000f8b0:	701a      	strb	r2, [r3, #0]
1000f8b2:	2365      	movs	r3, #101	; 0x65
1000f8b4:	18fb      	adds	r3, r7, r3
1000f8b6:	781b      	ldrb	r3, [r3, #0]
1000f8b8:	2b04      	cmp	r3, #4
1000f8ba:	d9c7      	bls.n	1000f84c <ble_connected_state_handler+0x78>
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
					}
					
				}
				if (nb_keys)
1000f8bc:	235b      	movs	r3, #91	; 0x5b
1000f8be:	18fb      	adds	r3, r7, r3
1000f8c0:	781b      	ldrb	r3, [r3, #0]
1000f8c2:	2b00      	cmp	r3, #0
1000f8c4:	d01c      	beq.n	1000f900 <ble_connected_state_handler+0x12c>
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000f8c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000f8c8:	2208      	movs	r2, #8
1000f8ca:	18ba      	adds	r2, r7, r2
1000f8cc:	0019      	movs	r1, r3
1000f8ce:	2005      	movs	r0, #5
1000f8d0:	4b8d      	ldr	r3, [pc, #564]	; (1000fb08 <ble_connected_state_handler+0x334>)
1000f8d2:	4798      	blx	r3
1000f8d4:	1e03      	subs	r3, r0, #0
1000f8d6:	d109      	bne.n	1000f8ec <ble_connected_state_handler+0x118>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000f8d8:	4b8c      	ldr	r3, [pc, #560]	; (1000fb0c <ble_connected_state_handler+0x338>)
1000f8da:	0018      	movs	r0, r3
1000f8dc:	4b8c      	ldr	r3, [pc, #560]	; (1000fb10 <ble_connected_state_handler+0x33c>)
1000f8de:	4798      	blx	r3
1000f8e0:	4b8c      	ldr	r3, [pc, #560]	; (1000fb14 <ble_connected_state_handler+0x340>)
1000f8e2:	0018      	movs	r0, r3
1000f8e4:	4b8c      	ldr	r3, [pc, #560]	; (1000fb18 <ble_connected_state_handler+0x344>)
1000f8e6:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000f8e8:	2300      	movs	r3, #0
1000f8ea:	e0fc      	b.n	1000fae6 <ble_connected_state_handler+0x312>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000f8ec:	4b87      	ldr	r3, [pc, #540]	; (1000fb0c <ble_connected_state_handler+0x338>)
1000f8ee:	0018      	movs	r0, r3
1000f8f0:	4b87      	ldr	r3, [pc, #540]	; (1000fb10 <ble_connected_state_handler+0x33c>)
1000f8f2:	4798      	blx	r3
1000f8f4:	4b89      	ldr	r3, [pc, #548]	; (1000fb1c <ble_connected_state_handler+0x348>)
1000f8f6:	0018      	movs	r0, r3
1000f8f8:	4b87      	ldr	r3, [pc, #540]	; (1000fb18 <ble_connected_state_handler+0x344>)
1000f8fa:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000f8fc:	23e2      	movs	r3, #226	; 0xe2
1000f8fe:	e0f2      	b.n	1000fae6 <ble_connected_state_handler+0x312>
					}					
				}
				else
				{
					DBG_LOG_DEV("New Connection");
1000f900:	4b82      	ldr	r3, [pc, #520]	; (1000fb0c <ble_connected_state_handler+0x338>)
1000f902:	0018      	movs	r0, r3
1000f904:	4b82      	ldr	r3, [pc, #520]	; (1000fb10 <ble_connected_state_handler+0x33c>)
1000f906:	4798      	blx	r3
1000f908:	4b85      	ldr	r3, [pc, #532]	; (1000fb20 <ble_connected_state_handler+0x34c>)
1000f90a:	0018      	movs	r0, r3
1000f90c:	4b82      	ldr	r3, [pc, #520]	; (1000fb18 <ble_connected_state_handler+0x344>)
1000f90e:	4798      	blx	r3
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000f910:	4b84      	ldr	r3, [pc, #528]	; (1000fb24 <ble_connected_state_handler+0x350>)
1000f912:	781b      	ldrb	r3, [r3, #0]
1000f914:	b2db      	uxtb	r3, r3
1000f916:	2b04      	cmp	r3, #4
1000f918:	d900      	bls.n	1000f91c <ble_connected_state_handler+0x148>
1000f91a:	e0ac      	b.n	1000fa76 <ble_connected_state_handler+0x2a2>
		{
			bool conn_exists = false;
1000f91c:	2361      	movs	r3, #97	; 0x61
1000f91e:	18fb      	adds	r3, r7, r3
1000f920:	2200      	movs	r2, #0
1000f922:	701a      	strb	r2, [r3, #0]
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000f924:	2367      	movs	r3, #103	; 0x67
1000f926:	18fb      	adds	r3, r7, r3
1000f928:	2200      	movs	r2, #0
1000f92a:	701a      	strb	r2, [r3, #0]
1000f92c:	e028      	b.n	1000f980 <ble_connected_state_handler+0x1ac>
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000f92e:	2367      	movs	r3, #103	; 0x67
1000f930:	18fb      	adds	r3, r7, r3
1000f932:	781a      	ldrb	r2, [r3, #0]
1000f934:	0013      	movs	r3, r2
1000f936:	015b      	lsls	r3, r3, #5
1000f938:	1a9b      	subs	r3, r3, r2
1000f93a:	009b      	lsls	r3, r3, #2
1000f93c:	4a71      	ldr	r2, [pc, #452]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000f93e:	189b      	adds	r3, r3, r2
1000f940:	6df9      	ldr	r1, [r7, #92]	; 0x5c
1000f942:	2207      	movs	r2, #7
1000f944:	0018      	movs	r0, r3
1000f946:	4b6d      	ldr	r3, [pc, #436]	; (1000fafc <ble_connected_state_handler+0x328>)
1000f948:	4798      	blx	r3
1000f94a:	1e03      	subs	r3, r0, #0
1000f94c:	d111      	bne.n	1000f972 <ble_connected_state_handler+0x19e>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000f94e:	2367      	movs	r3, #103	; 0x67
1000f950:	18fb      	adds	r3, r7, r3
1000f952:	781a      	ldrb	r2, [r3, #0]
1000f954:	496b      	ldr	r1, [pc, #428]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000f956:	205e      	movs	r0, #94	; 0x5e
1000f958:	0013      	movs	r3, r2
1000f95a:	015b      	lsls	r3, r3, #5
1000f95c:	1a9b      	subs	r3, r3, r2
1000f95e:	009b      	lsls	r3, r3, #2
1000f960:	18cb      	adds	r3, r1, r3
1000f962:	181b      	adds	r3, r3, r0
1000f964:	2202      	movs	r2, #2
1000f966:	701a      	strb	r2, [r3, #0]
					conn_exists = true;
1000f968:	2361      	movs	r3, #97	; 0x61
1000f96a:	18fb      	adds	r3, r7, r3
1000f96c:	2201      	movs	r2, #1
1000f96e:	701a      	strb	r2, [r3, #0]
					break;
1000f970:	e00b      	b.n	1000f98a <ble_connected_state_handler+0x1b6>
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000f972:	2367      	movs	r3, #103	; 0x67
1000f974:	18fb      	adds	r3, r7, r3
1000f976:	781a      	ldrb	r2, [r3, #0]
1000f978:	2367      	movs	r3, #103	; 0x67
1000f97a:	18fb      	adds	r3, r7, r3
1000f97c:	3201      	adds	r2, #1
1000f97e:	701a      	strb	r2, [r3, #0]
1000f980:	2367      	movs	r3, #103	; 0x67
1000f982:	18fb      	adds	r3, r7, r3
1000f984:	781b      	ldrb	r3, [r3, #0]
1000f986:	2b04      	cmp	r3, #4
1000f988:	d9d1      	bls.n	1000f92e <ble_connected_state_handler+0x15a>
					conn_exists = true;
					break;
				}
			}
			
			if (!conn_exists)
1000f98a:	2361      	movs	r3, #97	; 0x61
1000f98c:	18fb      	adds	r3, r7, r3
1000f98e:	781b      	ldrb	r3, [r3, #0]
1000f990:	2201      	movs	r2, #1
1000f992:	4053      	eors	r3, r2
1000f994:	b2db      	uxtb	r3, r3
1000f996:	2b00      	cmp	r3, #0
1000f998:	d041      	beq.n	1000fa1e <ble_connected_state_handler+0x24a>
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000f99a:	2367      	movs	r3, #103	; 0x67
1000f99c:	18fb      	adds	r3, r7, r3
1000f99e:	2200      	movs	r2, #0
1000f9a0:	701a      	strb	r2, [r3, #0]
1000f9a2:	e037      	b.n	1000fa14 <ble_connected_state_handler+0x240>
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000f9a4:	2367      	movs	r3, #103	; 0x67
1000f9a6:	18fb      	adds	r3, r7, r3
1000f9a8:	781a      	ldrb	r2, [r3, #0]
1000f9aa:	4956      	ldr	r1, [pc, #344]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000f9ac:	205e      	movs	r0, #94	; 0x5e
1000f9ae:	0013      	movs	r3, r2
1000f9b0:	015b      	lsls	r3, r3, #5
1000f9b2:	1a9b      	subs	r3, r3, r2
1000f9b4:	009b      	lsls	r3, r3, #2
1000f9b6:	18cb      	adds	r3, r1, r3
1000f9b8:	181b      	adds	r3, r3, r0
1000f9ba:	781b      	ldrb	r3, [r3, #0]
1000f9bc:	2b00      	cmp	r3, #0
1000f9be:	d122      	bne.n	1000fa06 <ble_connected_state_handler+0x232>
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000f9c0:	2367      	movs	r3, #103	; 0x67
1000f9c2:	18fb      	adds	r3, r7, r3
1000f9c4:	781a      	ldrb	r2, [r3, #0]
1000f9c6:	0013      	movs	r3, r2
1000f9c8:	015b      	lsls	r3, r3, #5
1000f9ca:	1a9b      	subs	r3, r3, r2
1000f9cc:	009b      	lsls	r3, r3, #2
1000f9ce:	4a4d      	ldr	r2, [pc, #308]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000f9d0:	189b      	adds	r3, r3, r2
1000f9d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
1000f9d4:	2212      	movs	r2, #18
1000f9d6:	0018      	movs	r0, r3
1000f9d8:	4b46      	ldr	r3, [pc, #280]	; (1000faf4 <ble_connected_state_handler+0x320>)
1000f9da:	4798      	blx	r3
						ble_device_count++;
1000f9dc:	4b51      	ldr	r3, [pc, #324]	; (1000fb24 <ble_connected_state_handler+0x350>)
1000f9de:	781b      	ldrb	r3, [r3, #0]
1000f9e0:	b2db      	uxtb	r3, r3
1000f9e2:	3301      	adds	r3, #1
1000f9e4:	b2da      	uxtb	r2, r3
1000f9e6:	4b4f      	ldr	r3, [pc, #316]	; (1000fb24 <ble_connected_state_handler+0x350>)
1000f9e8:	701a      	strb	r2, [r3, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000f9ea:	2367      	movs	r3, #103	; 0x67
1000f9ec:	18fb      	adds	r3, r7, r3
1000f9ee:	781a      	ldrb	r2, [r3, #0]
1000f9f0:	4944      	ldr	r1, [pc, #272]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000f9f2:	205e      	movs	r0, #94	; 0x5e
1000f9f4:	0013      	movs	r3, r2
1000f9f6:	015b      	lsls	r3, r3, #5
1000f9f8:	1a9b      	subs	r3, r3, r2
1000f9fa:	009b      	lsls	r3, r3, #2
1000f9fc:	18cb      	adds	r3, r1, r3
1000f9fe:	181b      	adds	r3, r3, r0
1000fa00:	2202      	movs	r2, #2
1000fa02:	701a      	strb	r2, [r3, #0]
						break;
1000fa04:	e00b      	b.n	1000fa1e <ble_connected_state_handler+0x24a>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000fa06:	2367      	movs	r3, #103	; 0x67
1000fa08:	18fb      	adds	r3, r7, r3
1000fa0a:	781a      	ldrb	r2, [r3, #0]
1000fa0c:	2367      	movs	r3, #103	; 0x67
1000fa0e:	18fb      	adds	r3, r7, r3
1000fa10:	3201      	adds	r2, #1
1000fa12:	701a      	strb	r2, [r3, #0]
1000fa14:	2367      	movs	r3, #103	; 0x67
1000fa16:	18fb      	adds	r3, r7, r3
1000fa18:	781b      	ldrb	r3, [r3, #0]
1000fa1a:	2b04      	cmp	r3, #4
1000fa1c:	d9c2      	bls.n	1000f9a4 <ble_connected_state_handler+0x1d0>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000fa1e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
1000fa20:	4b35      	ldr	r3, [pc, #212]	; (1000faf8 <ble_connected_state_handler+0x324>)
1000fa22:	2207      	movs	r2, #7
1000fa24:	0018      	movs	r0, r3
1000fa26:	4b35      	ldr	r3, [pc, #212]	; (1000fafc <ble_connected_state_handler+0x328>)
1000fa28:	4798      	blx	r3
1000fa2a:	1e03      	subs	r3, r0, #0
1000fa2c:	d10c      	bne.n	1000fa48 <ble_connected_state_handler+0x274>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000fa2e:	2367      	movs	r3, #103	; 0x67
1000fa30:	18fb      	adds	r3, r7, r3
1000fa32:	781a      	ldrb	r2, [r3, #0]
1000fa34:	4933      	ldr	r1, [pc, #204]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000fa36:	0013      	movs	r3, r2
1000fa38:	015b      	lsls	r3, r3, #5
1000fa3a:	1a9b      	subs	r3, r3, r2
1000fa3c:	009b      	lsls	r3, r3, #2
1000fa3e:	18cb      	adds	r3, r1, r3
1000fa40:	3312      	adds	r3, #18
1000fa42:	2205      	movs	r2, #5
1000fa44:	701a      	strb	r2, [r3, #0]
1000fa46:	e00f      	b.n	1000fa68 <ble_connected_state_handler+0x294>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000fa48:	2367      	movs	r3, #103	; 0x67
1000fa4a:	18fb      	adds	r3, r7, r3
1000fa4c:	781a      	ldrb	r2, [r3, #0]
1000fa4e:	492d      	ldr	r1, [pc, #180]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000fa50:	0013      	movs	r3, r2
1000fa52:	015b      	lsls	r3, r3, #5
1000fa54:	1a9b      	subs	r3, r3, r2
1000fa56:	009b      	lsls	r3, r3, #2
1000fa58:	18cb      	adds	r3, r1, r3
1000fa5a:	3312      	adds	r3, #18
1000fa5c:	220a      	movs	r2, #10
1000fa5e:	701a      	strb	r2, [r3, #0]
				peripheral_device_added = true;
1000fa60:	2366      	movs	r3, #102	; 0x66
1000fa62:	18fb      	adds	r3, r7, r3
1000fa64:	2201      	movs	r2, #1
1000fa66:	701a      	strb	r2, [r3, #0]
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000fa68:	4b23      	ldr	r3, [pc, #140]	; (1000faf8 <ble_connected_state_handler+0x324>)
1000fa6a:	2207      	movs	r2, #7
1000fa6c:	2100      	movs	r1, #0
1000fa6e:	0018      	movs	r0, r3
1000fa70:	4b23      	ldr	r3, [pc, #140]	; (1000fb00 <ble_connected_state_handler+0x32c>)
1000fa72:	4798      	blx	r3
1000fa74:	e012      	b.n	1000fa9c <ble_connected_state_handler+0x2c8>
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000fa76:	4b25      	ldr	r3, [pc, #148]	; (1000fb0c <ble_connected_state_handler+0x338>)
1000fa78:	0018      	movs	r0, r3
1000fa7a:	4b25      	ldr	r3, [pc, #148]	; (1000fb10 <ble_connected_state_handler+0x33c>)
1000fa7c:	4798      	blx	r3
1000fa7e:	4b29      	ldr	r3, [pc, #164]	; (1000fb24 <ble_connected_state_handler+0x350>)
1000fa80:	781b      	ldrb	r3, [r3, #0]
1000fa82:	b2db      	uxtb	r3, r3
1000fa84:	001a      	movs	r2, r3
1000fa86:	4b28      	ldr	r3, [pc, #160]	; (1000fb28 <ble_connected_state_handler+0x354>)
1000fa88:	0011      	movs	r1, r2
1000fa8a:	0018      	movs	r0, r3
1000fa8c:	4b22      	ldr	r3, [pc, #136]	; (1000fb18 <ble_connected_state_handler+0x344>)
1000fa8e:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000fa90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000fa92:	891b      	ldrh	r3, [r3, #8]
1000fa94:	2113      	movs	r1, #19
1000fa96:	0018      	movs	r0, r3
1000fa98:	4b24      	ldr	r3, [pc, #144]	; (1000fb2c <ble_connected_state_handler+0x358>)
1000fa9a:	4798      	blx	r3
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000fa9c:	2367      	movs	r3, #103	; 0x67
1000fa9e:	18fb      	adds	r3, r7, r3
1000faa0:	781a      	ldrb	r2, [r3, #0]
1000faa2:	4918      	ldr	r1, [pc, #96]	; (1000fb04 <ble_connected_state_handler+0x330>)
1000faa4:	0013      	movs	r3, r2
1000faa6:	015b      	lsls	r3, r3, #5
1000faa8:	1a9b      	subs	r3, r3, r2
1000faaa:	009b      	lsls	r3, r3, #2
1000faac:	18cb      	adds	r3, r1, r3
1000faae:	3312      	adds	r3, #18
1000fab0:	781b      	ldrb	r3, [r3, #0]
1000fab2:	2b0a      	cmp	r3, #10
1000fab4:	d116      	bne.n	1000fae4 <ble_connected_state_handler+0x310>
1000fab6:	2366      	movs	r3, #102	; 0x66
1000fab8:	18fb      	adds	r3, r7, r3
1000faba:	781b      	ldrb	r3, [r3, #0]
1000fabc:	2b00      	cmp	r3, #0
1000fabe:	d011      	beq.n	1000fae4 <ble_connected_state_handler+0x310>
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000fac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000fac2:	891b      	ldrh	r3, [r3, #8]
1000fac4:	0018      	movs	r0, r3
1000fac6:	4b1a      	ldr	r3, [pc, #104]	; (1000fb30 <ble_connected_state_handler+0x35c>)
1000fac8:	4798      	blx	r3
1000faca:	e00b      	b.n	1000fae4 <ble_connected_state_handler+0x310>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000facc:	4b0f      	ldr	r3, [pc, #60]	; (1000fb0c <ble_connected_state_handler+0x338>)
1000face:	0018      	movs	r0, r3
1000fad0:	4b0f      	ldr	r3, [pc, #60]	; (1000fb10 <ble_connected_state_handler+0x33c>)
1000fad2:	4798      	blx	r3
1000fad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000fad6:	7a9b      	ldrb	r3, [r3, #10]
1000fad8:	001a      	movs	r2, r3
1000fada:	4b16      	ldr	r3, [pc, #88]	; (1000fb34 <ble_connected_state_handler+0x360>)
1000fadc:	0011      	movs	r1, r2
1000fade:	0018      	movs	r0, r3
1000fae0:	4b0d      	ldr	r3, [pc, #52]	; (1000fb18 <ble_connected_state_handler+0x344>)
1000fae2:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000fae4:	2300      	movs	r3, #0
}
1000fae6:	0018      	movs	r0, r3
1000fae8:	46bd      	mov	sp, r7
1000faea:	b01a      	add	sp, #104	; 0x68
1000faec:	bdb0      	pop	{r4, r5, r7, pc}
1000faee:	46c0      	nop			; (mov r8, r8)
1000faf0:	1001a83c 	.word	0x1001a83c
1000faf4:	10017317 	.word	0x10017317
1000faf8:	1001a04c 	.word	0x1001a04c
1000fafc:	100172f9 	.word	0x100172f9
1000fb00:	10017329 	.word	0x10017329
1000fb04:	1001a590 	.word	0x1001a590
1000fb08:	1001301d 	.word	0x1001301d
1000fb0c:	100192e0 	.word	0x100192e0
1000fb10:	10017591 	.word	0x10017591
1000fb14:	10019300 	.word	0x10019300
1000fb18:	10017471 	.word	0x10017471
1000fb1c:	10019324 	.word	0x10019324
1000fb20:	10019348 	.word	0x10019348
1000fb24:	1001a7fc 	.word	0x1001a7fc
1000fb28:	10019358 	.word	0x10019358
1000fb2c:	10012ff1 	.word	0x10012ff1
1000fb30:	1000f7a5 	.word	0x1000f7a5
1000fb34:	10019394 	.word	0x10019394

1000fb38 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000fb38:	b580      	push	{r7, lr}
1000fb3a:	b084      	sub	sp, #16
1000fb3c:	af00      	add	r7, sp, #0
1000fb3e:	6078      	str	r0, [r7, #4]
	at_ble_resolv_rand_addr_status_t *ble_resolv_rand_addr_status;
	uint8_t idx;	
	bool device_found = false;
1000fb40:	230e      	movs	r3, #14
1000fb42:	18fb      	adds	r3, r7, r3
1000fb44:	2200      	movs	r2, #0
1000fb46:	701a      	strb	r2, [r3, #0]
	bool peripheral_device_added = false;
1000fb48:	230d      	movs	r3, #13
1000fb4a:	18fb      	adds	r3, r7, r3
1000fb4c:	2200      	movs	r2, #0
1000fb4e:	701a      	strb	r2, [r3, #0]
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
1000fb50:	687b      	ldr	r3, [r7, #4]
1000fb52:	60bb      	str	r3, [r7, #8]
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000fb54:	68bb      	ldr	r3, [r7, #8]
1000fb56:	781b      	ldrb	r3, [r3, #0]
1000fb58:	2b00      	cmp	r3, #0
1000fb5a:	d129      	bne.n	1000fbb0 <ble_resolv_rand_addr_handler+0x78>
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000fb5c:	230f      	movs	r3, #15
1000fb5e:	18fb      	adds	r3, r7, r3
1000fb60:	2200      	movs	r2, #0
1000fb62:	701a      	strb	r2, [r3, #0]
1000fb64:	e01f      	b.n	1000fba6 <ble_resolv_rand_addr_handler+0x6e>
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000fb66:	68bb      	ldr	r3, [r7, #8]
1000fb68:	1c58      	adds	r0, r3, #1
1000fb6a:	230f      	movs	r3, #15
1000fb6c:	18fb      	adds	r3, r7, r3
1000fb6e:	781a      	ldrb	r2, [r3, #0]
1000fb70:	0013      	movs	r3, r2
1000fb72:	015b      	lsls	r3, r3, #5
1000fb74:	1a9b      	subs	r3, r3, r2
1000fb76:	009b      	lsls	r3, r3, #2
1000fb78:	3340      	adds	r3, #64	; 0x40
1000fb7a:	001a      	movs	r2, r3
1000fb7c:	4b6a      	ldr	r3, [pc, #424]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fb7e:	18d3      	adds	r3, r2, r3
1000fb80:	3306      	adds	r3, #6
1000fb82:	2210      	movs	r2, #16
1000fb84:	0019      	movs	r1, r3
1000fb86:	4b69      	ldr	r3, [pc, #420]	; (1000fd2c <ble_resolv_rand_addr_handler+0x1f4>)
1000fb88:	4798      	blx	r3
1000fb8a:	1e03      	subs	r3, r0, #0
1000fb8c:	d104      	bne.n	1000fb98 <ble_resolv_rand_addr_handler+0x60>
			{
				device_found = true;
1000fb8e:	230e      	movs	r3, #14
1000fb90:	18fb      	adds	r3, r7, r3
1000fb92:	2201      	movs	r2, #1
1000fb94:	701a      	strb	r2, [r3, #0]
				break;
1000fb96:	e00b      	b.n	1000fbb0 <ble_resolv_rand_addr_handler+0x78>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000fb98:	230f      	movs	r3, #15
1000fb9a:	18fb      	adds	r3, r7, r3
1000fb9c:	781a      	ldrb	r2, [r3, #0]
1000fb9e:	230f      	movs	r3, #15
1000fba0:	18fb      	adds	r3, r7, r3
1000fba2:	3201      	adds	r2, #1
1000fba4:	701a      	strb	r2, [r3, #0]
1000fba6:	230f      	movs	r3, #15
1000fba8:	18fb      	adds	r3, r7, r3
1000fbaa:	781b      	ldrb	r3, [r3, #0]
1000fbac:	2b04      	cmp	r3, #4
1000fbae:	d9da      	bls.n	1000fb66 <ble_resolv_rand_addr_handler+0x2e>
			}
		}	
		
	}
	
	if (device_found)
1000fbb0:	230e      	movs	r3, #14
1000fbb2:	18fb      	adds	r3, r7, r3
1000fbb4:	781b      	ldrb	r3, [r3, #0]
1000fbb6:	2b00      	cmp	r3, #0
1000fbb8:	d033      	beq.n	1000fc22 <ble_resolv_rand_addr_handler+0xea>
	{
		DBG_LOG_DEV("##########Device Found");
1000fbba:	4b5d      	ldr	r3, [pc, #372]	; (1000fd30 <ble_resolv_rand_addr_handler+0x1f8>)
1000fbbc:	0018      	movs	r0, r3
1000fbbe:	4b5d      	ldr	r3, [pc, #372]	; (1000fd34 <ble_resolv_rand_addr_handler+0x1fc>)
1000fbc0:	4798      	blx	r3
1000fbc2:	4b5d      	ldr	r3, [pc, #372]	; (1000fd38 <ble_resolv_rand_addr_handler+0x200>)
1000fbc4:	0018      	movs	r0, r3
1000fbc6:	4b5d      	ldr	r3, [pc, #372]	; (1000fd3c <ble_resolv_rand_addr_handler+0x204>)
1000fbc8:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000fbca:	230f      	movs	r3, #15
1000fbcc:	18fb      	adds	r3, r7, r3
1000fbce:	781a      	ldrb	r2, [r3, #0]
1000fbd0:	4955      	ldr	r1, [pc, #340]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fbd2:	205e      	movs	r0, #94	; 0x5e
1000fbd4:	0013      	movs	r3, r2
1000fbd6:	015b      	lsls	r3, r3, #5
1000fbd8:	1a9b      	subs	r3, r3, r2
1000fbda:	009b      	lsls	r3, r3, #2
1000fbdc:	18cb      	adds	r3, r1, r3
1000fbde:	181b      	adds	r3, r3, r0
1000fbe0:	2202      	movs	r2, #2
1000fbe2:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000fbe4:	230f      	movs	r3, #15
1000fbe6:	18fb      	adds	r3, r7, r3
1000fbe8:	781a      	ldrb	r2, [r3, #0]
1000fbea:	494f      	ldr	r1, [pc, #316]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fbec:	0013      	movs	r3, r2
1000fbee:	015b      	lsls	r3, r3, #5
1000fbf0:	1a9b      	subs	r3, r3, r2
1000fbf2:	009b      	lsls	r3, r3, #2
1000fbf4:	18cb      	adds	r3, r1, r3
1000fbf6:	3312      	adds	r3, #18
1000fbf8:	220a      	movs	r2, #10
1000fbfa:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000fbfc:	230f      	movs	r3, #15
1000fbfe:	18fb      	adds	r3, r7, r3
1000fc00:	781a      	ldrb	r2, [r3, #0]
1000fc02:	0013      	movs	r3, r2
1000fc04:	015b      	lsls	r3, r3, #5
1000fc06:	1a9b      	subs	r3, r3, r2
1000fc08:	009b      	lsls	r3, r3, #2
1000fc0a:	4a47      	ldr	r2, [pc, #284]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fc0c:	189b      	adds	r3, r3, r2
1000fc0e:	494c      	ldr	r1, [pc, #304]	; (1000fd40 <ble_resolv_rand_addr_handler+0x208>)
1000fc10:	2212      	movs	r2, #18
1000fc12:	0018      	movs	r0, r3
1000fc14:	4b4b      	ldr	r3, [pc, #300]	; (1000fd44 <ble_resolv_rand_addr_handler+0x20c>)
1000fc16:	4798      	blx	r3
		peripheral_device_added = true;
1000fc18:	230d      	movs	r3, #13
1000fc1a:	18fb      	adds	r3, r7, r3
1000fc1c:	2201      	movs	r2, #1
1000fc1e:	701a      	strb	r2, [r3, #0]
1000fc20:	e059      	b.n	1000fcd6 <ble_resolv_rand_addr_handler+0x19e>
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000fc22:	4b43      	ldr	r3, [pc, #268]	; (1000fd30 <ble_resolv_rand_addr_handler+0x1f8>)
1000fc24:	0018      	movs	r0, r3
1000fc26:	4b43      	ldr	r3, [pc, #268]	; (1000fd34 <ble_resolv_rand_addr_handler+0x1fc>)
1000fc28:	4798      	blx	r3
1000fc2a:	4b47      	ldr	r3, [pc, #284]	; (1000fd48 <ble_resolv_rand_addr_handler+0x210>)
1000fc2c:	0018      	movs	r0, r3
1000fc2e:	4b43      	ldr	r3, [pc, #268]	; (1000fd3c <ble_resolv_rand_addr_handler+0x204>)
1000fc30:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000fc32:	230f      	movs	r3, #15
1000fc34:	18fb      	adds	r3, r7, r3
1000fc36:	2200      	movs	r2, #0
1000fc38:	701a      	strb	r2, [r3, #0]
1000fc3a:	e047      	b.n	1000fccc <ble_resolv_rand_addr_handler+0x194>
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000fc3c:	230f      	movs	r3, #15
1000fc3e:	18fb      	adds	r3, r7, r3
1000fc40:	781a      	ldrb	r2, [r3, #0]
1000fc42:	4939      	ldr	r1, [pc, #228]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fc44:	205e      	movs	r0, #94	; 0x5e
1000fc46:	0013      	movs	r3, r2
1000fc48:	015b      	lsls	r3, r3, #5
1000fc4a:	1a9b      	subs	r3, r3, r2
1000fc4c:	009b      	lsls	r3, r3, #2
1000fc4e:	18cb      	adds	r3, r1, r3
1000fc50:	181b      	adds	r3, r3, r0
1000fc52:	781b      	ldrb	r3, [r3, #0]
1000fc54:	2b00      	cmp	r3, #0
1000fc56:	d132      	bne.n	1000fcbe <ble_resolv_rand_addr_handler+0x186>
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000fc58:	230f      	movs	r3, #15
1000fc5a:	18fb      	adds	r3, r7, r3
1000fc5c:	781a      	ldrb	r2, [r3, #0]
1000fc5e:	0013      	movs	r3, r2
1000fc60:	015b      	lsls	r3, r3, #5
1000fc62:	1a9b      	subs	r3, r3, r2
1000fc64:	009b      	lsls	r3, r3, #2
1000fc66:	4a30      	ldr	r2, [pc, #192]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fc68:	189b      	adds	r3, r3, r2
1000fc6a:	4935      	ldr	r1, [pc, #212]	; (1000fd40 <ble_resolv_rand_addr_handler+0x208>)
1000fc6c:	2212      	movs	r2, #18
1000fc6e:	0018      	movs	r0, r3
1000fc70:	4b34      	ldr	r3, [pc, #208]	; (1000fd44 <ble_resolv_rand_addr_handler+0x20c>)
1000fc72:	4798      	blx	r3
				ble_device_count++;
1000fc74:	4b35      	ldr	r3, [pc, #212]	; (1000fd4c <ble_resolv_rand_addr_handler+0x214>)
1000fc76:	781b      	ldrb	r3, [r3, #0]
1000fc78:	b2db      	uxtb	r3, r3
1000fc7a:	3301      	adds	r3, #1
1000fc7c:	b2da      	uxtb	r2, r3
1000fc7e:	4b33      	ldr	r3, [pc, #204]	; (1000fd4c <ble_resolv_rand_addr_handler+0x214>)
1000fc80:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000fc82:	230f      	movs	r3, #15
1000fc84:	18fb      	adds	r3, r7, r3
1000fc86:	781a      	ldrb	r2, [r3, #0]
1000fc88:	4927      	ldr	r1, [pc, #156]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fc8a:	205e      	movs	r0, #94	; 0x5e
1000fc8c:	0013      	movs	r3, r2
1000fc8e:	015b      	lsls	r3, r3, #5
1000fc90:	1a9b      	subs	r3, r3, r2
1000fc92:	009b      	lsls	r3, r3, #2
1000fc94:	18cb      	adds	r3, r1, r3
1000fc96:	181b      	adds	r3, r3, r0
1000fc98:	2202      	movs	r2, #2
1000fc9a:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000fc9c:	230f      	movs	r3, #15
1000fc9e:	18fb      	adds	r3, r7, r3
1000fca0:	781a      	ldrb	r2, [r3, #0]
1000fca2:	4921      	ldr	r1, [pc, #132]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fca4:	0013      	movs	r3, r2
1000fca6:	015b      	lsls	r3, r3, #5
1000fca8:	1a9b      	subs	r3, r3, r2
1000fcaa:	009b      	lsls	r3, r3, #2
1000fcac:	18cb      	adds	r3, r1, r3
1000fcae:	3312      	adds	r3, #18
1000fcb0:	220a      	movs	r2, #10
1000fcb2:	701a      	strb	r2, [r3, #0]
				peripheral_device_added = true;
1000fcb4:	230d      	movs	r3, #13
1000fcb6:	18fb      	adds	r3, r7, r3
1000fcb8:	2201      	movs	r2, #1
1000fcba:	701a      	strb	r2, [r3, #0]
				break;
1000fcbc:	e00b      	b.n	1000fcd6 <ble_resolv_rand_addr_handler+0x19e>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000fcbe:	230f      	movs	r3, #15
1000fcc0:	18fb      	adds	r3, r7, r3
1000fcc2:	781a      	ldrb	r2, [r3, #0]
1000fcc4:	230f      	movs	r3, #15
1000fcc6:	18fb      	adds	r3, r7, r3
1000fcc8:	3201      	adds	r2, #1
1000fcca:	701a      	strb	r2, [r3, #0]
1000fccc:	230f      	movs	r3, #15
1000fcce:	18fb      	adds	r3, r7, r3
1000fcd0:	781b      	ldrb	r3, [r3, #0]
1000fcd2:	2b04      	cmp	r3, #4
1000fcd4:	d9b2      	bls.n	1000fc3c <ble_resolv_rand_addr_handler+0x104>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000fcd6:	4b16      	ldr	r3, [pc, #88]	; (1000fd30 <ble_resolv_rand_addr_handler+0x1f8>)
1000fcd8:	0018      	movs	r0, r3
1000fcda:	4b16      	ldr	r3, [pc, #88]	; (1000fd34 <ble_resolv_rand_addr_handler+0x1fc>)
1000fcdc:	4798      	blx	r3
1000fcde:	230f      	movs	r3, #15
1000fce0:	18fb      	adds	r3, r7, r3
1000fce2:	781a      	ldrb	r2, [r3, #0]
1000fce4:	4b1a      	ldr	r3, [pc, #104]	; (1000fd50 <ble_resolv_rand_addr_handler+0x218>)
1000fce6:	0011      	movs	r1, r2
1000fce8:	0018      	movs	r0, r3
1000fcea:	4b14      	ldr	r3, [pc, #80]	; (1000fd3c <ble_resolv_rand_addr_handler+0x204>)
1000fcec:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000fcee:	230f      	movs	r3, #15
1000fcf0:	18fb      	adds	r3, r7, r3
1000fcf2:	781a      	ldrb	r2, [r3, #0]
1000fcf4:	490c      	ldr	r1, [pc, #48]	; (1000fd28 <ble_resolv_rand_addr_handler+0x1f0>)
1000fcf6:	0013      	movs	r3, r2
1000fcf8:	015b      	lsls	r3, r3, #5
1000fcfa:	1a9b      	subs	r3, r3, r2
1000fcfc:	009b      	lsls	r3, r3, #2
1000fcfe:	18cb      	adds	r3, r1, r3
1000fd00:	3312      	adds	r3, #18
1000fd02:	781b      	ldrb	r3, [r3, #0]
1000fd04:	2b0a      	cmp	r3, #10
1000fd06:	d109      	bne.n	1000fd1c <ble_resolv_rand_addr_handler+0x1e4>
1000fd08:	230d      	movs	r3, #13
1000fd0a:	18fb      	adds	r3, r7, r3
1000fd0c:	781b      	ldrb	r3, [r3, #0]
1000fd0e:	2b00      	cmp	r3, #0
1000fd10:	d004      	beq.n	1000fd1c <ble_resolv_rand_addr_handler+0x1e4>
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000fd12:	4b0b      	ldr	r3, [pc, #44]	; (1000fd40 <ble_resolv_rand_addr_handler+0x208>)
1000fd14:	891b      	ldrh	r3, [r3, #8]
1000fd16:	0018      	movs	r0, r3
1000fd18:	4b0e      	ldr	r3, [pc, #56]	; (1000fd54 <ble_resolv_rand_addr_handler+0x21c>)
1000fd1a:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000fd1c:	2300      	movs	r3, #0
	
}
1000fd1e:	0018      	movs	r0, r3
1000fd20:	46bd      	mov	sp, r7
1000fd22:	b004      	add	sp, #16
1000fd24:	bd80      	pop	{r7, pc}
1000fd26:	46c0      	nop			; (mov r8, r8)
1000fd28:	1001a590 	.word	0x1001a590
1000fd2c:	100172f9 	.word	0x100172f9
1000fd30:	100192e0 	.word	0x100192e0
1000fd34:	10017591 	.word	0x10017591
1000fd38:	100193bc 	.word	0x100193bc
1000fd3c:	10017471 	.word	0x10017471
1000fd40:	1001a83c 	.word	0x1001a83c
1000fd44:	10017317 	.word	0x10017317
1000fd48:	100193d4 	.word	0x100193d4
1000fd4c:	1001a7fc 	.word	0x1001a7fc
1000fd50:	100193f0 	.word	0x100193f0
1000fd54:	1000f7a5 	.word	0x1000f7a5

1000fd58 <ble_mtu_changed_indication_handler>:

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000fd58:	b580      	push	{r7, lr}
1000fd5a:	b084      	sub	sp, #16
1000fd5c:	af00      	add	r7, sp, #0
1000fd5e:	6078      	str	r0, [r7, #4]
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
1000fd60:	687b      	ldr	r3, [r7, #4]
1000fd62:	60fb      	str	r3, [r7, #12]
	//DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										//mtu_changed_ind->conhdl, 
										//mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
1000fd64:	2300      	movs	r3, #0
}
1000fd66:	0018      	movs	r0, r3
1000fd68:	46bd      	mov	sp, r7
1000fd6a:	b004      	add	sp, #16
1000fd6c:	bd80      	pop	{r7, pc}
1000fd6e:	46c0      	nop			; (mov r8, r8)

1000fd70 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000fd70:	b580      	push	{r7, lr}
1000fd72:	b084      	sub	sp, #16
1000fd74:	af00      	add	r7, sp, #0
1000fd76:	6078      	str	r0, [r7, #4]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
1000fd78:	687b      	ldr	r3, [r7, #4]
1000fd7a:	60fb      	str	r3, [r7, #12]
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000fd7c:	68fb      	ldr	r3, [r7, #12]
1000fd7e:	78db      	ldrb	r3, [r3, #3]
1000fd80:	2b00      	cmp	r3, #0
1000fd82:	d101      	bne.n	1000fd88 <ble_mtu_changed_cmd_complete_handler+0x18>
	{
		//DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
		//cmd_complete_event->conn_handle, 
		//cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000fd84:	2300      	movs	r3, #0
1000fd86:	e000      	b.n	1000fd8a <ble_mtu_changed_cmd_complete_handler+0x1a>
	{
		//DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
		//cmd_complete_event->conn_handle,
		//cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000fd88:	23e2      	movs	r3, #226	; 0xe2
}
1000fd8a:	0018      	movs	r0, r3
1000fd8c:	46bd      	mov	sp, r7
1000fd8e:	b004      	add	sp, #16
1000fd90:	bd80      	pop	{r7, pc}
1000fd92:	46c0      	nop			; (mov r8, r8)

1000fd94 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000fd94:	b580      	push	{r7, lr}
1000fd96:	b084      	sub	sp, #16
1000fd98:	af00      	add	r7, sp, #0
1000fd9a:	6078      	str	r0, [r7, #4]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
1000fd9c:	687b      	ldr	r3, [r7, #4]
1000fd9e:	60fb      	str	r3, [r7, #12]
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000fda0:	68fb      	ldr	r3, [r7, #12]
1000fda2:	78db      	ldrb	r3, [r3, #3]
1000fda4:	2b00      	cmp	r3, #0
1000fda6:	d101      	bne.n	1000fdac <ble_characteristic_write_cmd_complete_handler+0x18>
	{
		//DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
		//cmd_complete_event->conn_handle,
		//cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000fda8:	2300      	movs	r3, #0
1000fdaa:	e000      	b.n	1000fdae <ble_characteristic_write_cmd_complete_handler+0x1a>
	{
		//DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		//cmd_complete_event->conn_handle,
		//cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000fdac:	23e2      	movs	r3, #226	; 0xe2
}
1000fdae:	0018      	movs	r0, r3
1000fdb0:	46bd      	mov	sp, r7
1000fdb2:	b004      	add	sp, #16
1000fdb4:	bd80      	pop	{r7, pc}
1000fdb6:	46c0      	nop			; (mov r8, r8)

1000fdb8 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000fdb8:	b580      	push	{r7, lr}
1000fdba:	b084      	sub	sp, #16
1000fdbc:	af00      	add	r7, sp, #0
1000fdbe:	6078      	str	r0, [r7, #4]
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
1000fdc0:	687b      	ldr	r3, [r7, #4]
1000fdc2:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000fdc4:	230f      	movs	r3, #15
1000fdc6:	18fb      	adds	r3, r7, r3
1000fdc8:	2200      	movs	r2, #0
1000fdca:	701a      	strb	r2, [r3, #0]
1000fdcc:	e0a2      	b.n	1000ff14 <ble_disconnected_state_handler+0x15c>
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000fdce:	230f      	movs	r3, #15
1000fdd0:	18fb      	adds	r3, r7, r3
1000fdd2:	781a      	ldrb	r2, [r3, #0]
1000fdd4:	495c      	ldr	r1, [pc, #368]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fdd6:	0013      	movs	r3, r2
1000fdd8:	015b      	lsls	r3, r3, #5
1000fdda:	1a9b      	subs	r3, r3, r2
1000fddc:	009b      	lsls	r3, r3, #2
1000fdde:	18cb      	adds	r3, r1, r3
1000fde0:	3308      	adds	r3, #8
1000fde2:	881a      	ldrh	r2, [r3, #0]
1000fde4:	68bb      	ldr	r3, [r7, #8]
1000fde6:	881b      	ldrh	r3, [r3, #0]
1000fde8:	429a      	cmp	r2, r3
1000fdea:	d129      	bne.n	1000fe40 <ble_disconnected_state_handler+0x88>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000fdec:	230f      	movs	r3, #15
1000fdee:	18fb      	adds	r3, r7, r3
1000fdf0:	781a      	ldrb	r2, [r3, #0]
1000fdf2:	4955      	ldr	r1, [pc, #340]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fdf4:	205e      	movs	r0, #94	; 0x5e
1000fdf6:	0013      	movs	r3, r2
1000fdf8:	015b      	lsls	r3, r3, #5
1000fdfa:	1a9b      	subs	r3, r3, r2
1000fdfc:	009b      	lsls	r3, r3, #2
1000fdfe:	18cb      	adds	r3, r1, r3
1000fe00:	181b      	adds	r3, r3, r0
1000fe02:	781b      	ldrb	r3, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000fe04:	2b05      	cmp	r3, #5
1000fe06:	d00d      	beq.n	1000fe24 <ble_disconnected_state_handler+0x6c>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000fe08:	230f      	movs	r3, #15
1000fe0a:	18fb      	adds	r3, r7, r3
1000fe0c:	781a      	ldrb	r2, [r3, #0]
1000fe0e:	494e      	ldr	r1, [pc, #312]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fe10:	205e      	movs	r0, #94	; 0x5e
1000fe12:	0013      	movs	r3, r2
1000fe14:	015b      	lsls	r3, r3, #5
1000fe16:	1a9b      	subs	r3, r3, r2
1000fe18:	009b      	lsls	r3, r3, #2
1000fe1a:	18cb      	adds	r3, r1, r3
1000fe1c:	181b      	adds	r3, r3, r0
1000fe1e:	781b      	ldrb	r3, [r3, #0]
1000fe20:	2b08      	cmp	r3, #8
1000fe22:	d10d      	bne.n	1000fe40 <ble_disconnected_state_handler+0x88>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000fe24:	230f      	movs	r3, #15
1000fe26:	18fb      	adds	r3, r7, r3
1000fe28:	781a      	ldrb	r2, [r3, #0]
1000fe2a:	4947      	ldr	r1, [pc, #284]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fe2c:	205e      	movs	r0, #94	; 0x5e
1000fe2e:	0013      	movs	r3, r2
1000fe30:	015b      	lsls	r3, r3, #5
1000fe32:	1a9b      	subs	r3, r3, r2
1000fe34:	009b      	lsls	r3, r3, #2
1000fe36:	18cb      	adds	r3, r1, r3
1000fe38:	181b      	adds	r3, r3, r0
1000fe3a:	2201      	movs	r2, #1
1000fe3c:	701a      	strb	r2, [r3, #0]
1000fe3e:	e062      	b.n	1000ff06 <ble_disconnected_state_handler+0x14e>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
1000fe40:	230f      	movs	r3, #15
1000fe42:	18fb      	adds	r3, r7, r3
1000fe44:	781a      	ldrb	r2, [r3, #0]
1000fe46:	4940      	ldr	r1, [pc, #256]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fe48:	0013      	movs	r3, r2
1000fe4a:	015b      	lsls	r3, r3, #5
1000fe4c:	1a9b      	subs	r3, r3, r2
1000fe4e:	009b      	lsls	r3, r3, #2
1000fe50:	18cb      	adds	r3, r1, r3
1000fe52:	3308      	adds	r3, #8
1000fe54:	881a      	ldrh	r2, [r3, #0]
1000fe56:	68bb      	ldr	r3, [r7, #8]
1000fe58:	881b      	ldrh	r3, [r3, #0]
1000fe5a:	429a      	cmp	r2, r3
1000fe5c:	d153      	bne.n	1000ff06 <ble_disconnected_state_handler+0x14e>
		{
			switch (ble_dev_info[idx].conn_state)
1000fe5e:	230f      	movs	r3, #15
1000fe60:	18fb      	adds	r3, r7, r3
1000fe62:	781a      	ldrb	r2, [r3, #0]
1000fe64:	4938      	ldr	r1, [pc, #224]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fe66:	205e      	movs	r0, #94	; 0x5e
1000fe68:	0013      	movs	r3, r2
1000fe6a:	015b      	lsls	r3, r3, #5
1000fe6c:	1a9b      	subs	r3, r3, r2
1000fe6e:	009b      	lsls	r3, r3, #2
1000fe70:	18cb      	adds	r3, r1, r3
1000fe72:	181b      	adds	r3, r3, r0
1000fe74:	781b      	ldrb	r3, [r3, #0]
1000fe76:	2b07      	cmp	r3, #7
1000fe78:	d81e      	bhi.n	1000feb8 <ble_disconnected_state_handler+0x100>
1000fe7a:	009a      	lsls	r2, r3, #2
1000fe7c:	4b33      	ldr	r3, [pc, #204]	; (1000ff4c <ble_disconnected_state_handler+0x194>)
1000fe7e:	18d3      	adds	r3, r2, r3
1000fe80:	681b      	ldr	r3, [r3, #0]
1000fe82:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000fe84:	230f      	movs	r3, #15
1000fe86:	18fb      	adds	r3, r7, r3
1000fe88:	781a      	ldrb	r2, [r3, #0]
1000fe8a:	492f      	ldr	r1, [pc, #188]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fe8c:	205e      	movs	r0, #94	; 0x5e
1000fe8e:	0013      	movs	r3, r2
1000fe90:	015b      	lsls	r3, r3, #5
1000fe92:	1a9b      	subs	r3, r3, r2
1000fe94:	009b      	lsls	r3, r3, #2
1000fe96:	18cb      	adds	r3, r1, r3
1000fe98:	181b      	adds	r3, r3, r0
1000fe9a:	2200      	movs	r2, #0
1000fe9c:	701a      	strb	r2, [r3, #0]
					if (ble_device_count > 0)
1000fe9e:	4b2c      	ldr	r3, [pc, #176]	; (1000ff50 <ble_disconnected_state_handler+0x198>)
1000fea0:	781b      	ldrb	r3, [r3, #0]
1000fea2:	b2db      	uxtb	r3, r3
1000fea4:	2b00      	cmp	r3, #0
1000fea6:	d02d      	beq.n	1000ff04 <ble_disconnected_state_handler+0x14c>
					{
						ble_device_count--;
1000fea8:	4b29      	ldr	r3, [pc, #164]	; (1000ff50 <ble_disconnected_state_handler+0x198>)
1000feaa:	781b      	ldrb	r3, [r3, #0]
1000feac:	b2db      	uxtb	r3, r3
1000feae:	3b01      	subs	r3, #1
1000feb0:	b2da      	uxtb	r2, r3
1000feb2:	4b27      	ldr	r3, [pc, #156]	; (1000ff50 <ble_disconnected_state_handler+0x198>)
1000feb4:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
1000feb6:	e025      	b.n	1000ff04 <ble_disconnected_state_handler+0x14c>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000feb8:	4b26      	ldr	r3, [pc, #152]	; (1000ff54 <ble_disconnected_state_handler+0x19c>)
1000feba:	0018      	movs	r0, r3
1000febc:	4b26      	ldr	r3, [pc, #152]	; (1000ff58 <ble_disconnected_state_handler+0x1a0>)
1000febe:	4798      	blx	r3
1000fec0:	230f      	movs	r3, #15
1000fec2:	18fb      	adds	r3, r7, r3
1000fec4:	781a      	ldrb	r2, [r3, #0]
1000fec6:	4920      	ldr	r1, [pc, #128]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000fec8:	205e      	movs	r0, #94	; 0x5e
1000feca:	0013      	movs	r3, r2
1000fecc:	015b      	lsls	r3, r3, #5
1000fece:	1a9b      	subs	r3, r3, r2
1000fed0:	009b      	lsls	r3, r3, #2
1000fed2:	18cb      	adds	r3, r1, r3
1000fed4:	181b      	adds	r3, r3, r0
1000fed6:	781b      	ldrb	r3, [r3, #0]
1000fed8:	001a      	movs	r2, r3
1000feda:	4b20      	ldr	r3, [pc, #128]	; (1000ff5c <ble_disconnected_state_handler+0x1a4>)
1000fedc:	0011      	movs	r1, r2
1000fede:	0018      	movs	r0, r3
1000fee0:	4b1f      	ldr	r3, [pc, #124]	; (1000ff60 <ble_disconnected_state_handler+0x1a8>)
1000fee2:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000fee4:	230f      	movs	r3, #15
1000fee6:	18fb      	adds	r3, r7, r3
1000fee8:	781a      	ldrb	r2, [r3, #0]
1000feea:	4917      	ldr	r1, [pc, #92]	; (1000ff48 <ble_disconnected_state_handler+0x190>)
1000feec:	205e      	movs	r0, #94	; 0x5e
1000feee:	0013      	movs	r3, r2
1000fef0:	015b      	lsls	r3, r3, #5
1000fef2:	1a9b      	subs	r3, r3, r2
1000fef4:	009b      	lsls	r3, r3, #2
1000fef6:	18cb      	adds	r3, r1, r3
1000fef8:	181b      	adds	r3, r3, r0
1000fefa:	2200      	movs	r2, #0
1000fefc:	701a      	strb	r2, [r3, #0]
				break;				
1000fefe:	e002      	b.n	1000ff06 <ble_disconnected_state_handler+0x14e>
					}
				}
				break;
				
				case BLE_DEVICE_DISCONNECTED:
				break;
1000ff00:	46c0      	nop			; (mov r8, r8)
1000ff02:	e000      	b.n	1000ff06 <ble_disconnected_state_handler+0x14e>
					if (ble_device_count > 0)
					{
						ble_device_count--;
					}
				}
				break;
1000ff04:	46c0      	nop			; (mov r8, r8)
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ff06:	230f      	movs	r3, #15
1000ff08:	18fb      	adds	r3, r7, r3
1000ff0a:	781a      	ldrb	r2, [r3, #0]
1000ff0c:	230f      	movs	r3, #15
1000ff0e:	18fb      	adds	r3, r7, r3
1000ff10:	3201      	adds	r2, #1
1000ff12:	701a      	strb	r2, [r3, #0]
1000ff14:	230f      	movs	r3, #15
1000ff16:	18fb      	adds	r3, r7, r3
1000ff18:	781b      	ldrb	r3, [r3, #0]
1000ff1a:	2b04      	cmp	r3, #4
1000ff1c:	d800      	bhi.n	1000ff20 <ble_disconnected_state_handler+0x168>
1000ff1e:	e756      	b.n	1000fdce <ble_disconnected_state_handler+0x16>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ff20:	4b0c      	ldr	r3, [pc, #48]	; (1000ff54 <ble_disconnected_state_handler+0x19c>)
1000ff22:	0018      	movs	r0, r3
1000ff24:	4b0c      	ldr	r3, [pc, #48]	; (1000ff58 <ble_disconnected_state_handler+0x1a0>)
1000ff26:	4798      	blx	r3
1000ff28:	68bb      	ldr	r3, [r7, #8]
1000ff2a:	789b      	ldrb	r3, [r3, #2]
1000ff2c:	0019      	movs	r1, r3
1000ff2e:	68bb      	ldr	r3, [r7, #8]
1000ff30:	881b      	ldrh	r3, [r3, #0]
1000ff32:	001a      	movs	r2, r3
1000ff34:	4b0b      	ldr	r3, [pc, #44]	; (1000ff64 <ble_disconnected_state_handler+0x1ac>)
1000ff36:	0018      	movs	r0, r3
1000ff38:	4b09      	ldr	r3, [pc, #36]	; (1000ff60 <ble_disconnected_state_handler+0x1a8>)
1000ff3a:	4798      	blx	r3
	return AT_BLE_SUCCESS;
1000ff3c:	2300      	movs	r3, #0
}
1000ff3e:	0018      	movs	r0, r3
1000ff40:	46bd      	mov	sp, r7
1000ff42:	b004      	add	sp, #16
1000ff44:	bd80      	pop	{r7, pc}
1000ff46:	46c0      	nop			; (mov r8, r8)
1000ff48:	1001a590 	.word	0x1001a590
1000ff4c:	10019848 	.word	0x10019848
1000ff50:	1001a7fc 	.word	0x1001a7fc
1000ff54:	100192e0 	.word	0x100192e0
1000ff58:	10017591 	.word	0x10017591
1000ff5c:	10019400 	.word	0x10019400
1000ff60:	10017471 	.word	0x10017471
1000ff64:	10019418 	.word	0x10019418

1000ff68 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000ff68:	b580      	push	{r7, lr}
1000ff6a:	b084      	sub	sp, #16
1000ff6c:	af00      	add	r7, sp, #0
1000ff6e:	6078      	str	r0, [r7, #4]
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
1000ff70:	687b      	ldr	r3, [r7, #4]
1000ff72:	60fb      	str	r3, [r7, #12]
	//DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
1000ff74:	2300      	movs	r3, #0
}
1000ff76:	0018      	movs	r0, r3
1000ff78:	46bd      	mov	sp, r7
1000ff7a:	b004      	add	sp, #16
1000ff7c:	bd80      	pop	{r7, pc}
1000ff7e:	46c0      	nop			; (mov r8, r8)

1000ff80 <ble_conn_param_update_req>:

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000ff80:	b590      	push	{r4, r7, lr}
1000ff82:	b085      	sub	sp, #20
1000ff84:	af00      	add	r7, sp, #0
1000ff86:	6078      	str	r0, [r7, #4]
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
1000ff88:	687b      	ldr	r3, [r7, #4]
1000ff8a:	60fb      	str	r3, [r7, #12]
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000ff8c:	68fb      	ldr	r3, [r7, #12]
1000ff8e:	8818      	ldrh	r0, [r3, #0]
1000ff90:	2378      	movs	r3, #120	; 0x78
1000ff92:	2201      	movs	r2, #1
1000ff94:	2101      	movs	r1, #1
1000ff96:	4c03      	ldr	r4, [pc, #12]	; (1000ffa4 <ble_conn_param_update_req+0x24>)
1000ff98:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
1000ff9a:	2300      	movs	r3, #0
}
1000ff9c:	0018      	movs	r0, r3
1000ff9e:	46bd      	mov	sp, r7
1000ffa0:	b005      	add	sp, #20
1000ffa2:	bd90      	pop	{r4, r7, pc}
1000ffa4:	10013011 	.word	0x10013011

1000ffa8 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000ffa8:	b5b0      	push	{r4, r5, r7, lr}
1000ffaa:	b088      	sub	sp, #32
1000ffac:	af00      	add	r7, sp, #0
1000ffae:	6078      	str	r0, [r7, #4]
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
1000ffb0:	231f      	movs	r3, #31
1000ffb2:	18fb      	adds	r3, r7, r3
1000ffb4:	2200      	movs	r2, #0
1000ffb6:	701a      	strb	r2, [r3, #0]
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
1000ffb8:	231d      	movs	r3, #29
1000ffba:	18fb      	adds	r3, r7, r3
1000ffbc:	2200      	movs	r2, #0
1000ffbe:	701a      	strb	r2, [r3, #0]
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
1000ffc0:	687b      	ldr	r3, [r7, #4]
1000ffc2:	61bb      	str	r3, [r7, #24]
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000ffc4:	230c      	movs	r3, #12
1000ffc6:	18fb      	adds	r3, r7, r3
1000ffc8:	2209      	movs	r2, #9
1000ffca:	2100      	movs	r1, #0
1000ffcc:	0018      	movs	r0, r3
1000ffce:	4bde      	ldr	r3, [pc, #888]	; (10010348 <ble_slave_security_request_handler+0x3a0>)
1000ffd0:	4798      	blx	r3
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ffd2:	231e      	movs	r3, #30
1000ffd4:	18fb      	adds	r3, r7, r3
1000ffd6:	2200      	movs	r2, #0
1000ffd8:	701a      	strb	r2, [r3, #0]
1000ffda:	e035      	b.n	10010048 <ble_slave_security_request_handler+0xa0>
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ffdc:	231e      	movs	r3, #30
1000ffde:	18fb      	adds	r3, r7, r3
1000ffe0:	781a      	ldrb	r2, [r3, #0]
1000ffe2:	49da      	ldr	r1, [pc, #872]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
1000ffe4:	0013      	movs	r3, r2
1000ffe6:	015b      	lsls	r3, r3, #5
1000ffe8:	1a9b      	subs	r3, r3, r2
1000ffea:	009b      	lsls	r3, r3, #2
1000ffec:	18cb      	adds	r3, r1, r3
1000ffee:	3308      	adds	r3, #8
1000fff0:	881a      	ldrh	r2, [r3, #0]
1000fff2:	69bb      	ldr	r3, [r7, #24]
1000fff4:	881b      	ldrh	r3, [r3, #0]
1000fff6:	429a      	cmp	r2, r3
1000fff8:	d11f      	bne.n	1001003a <ble_slave_security_request_handler+0x92>
1000fffa:	231e      	movs	r3, #30
1000fffc:	18fb      	adds	r3, r7, r3
1000fffe:	781a      	ldrb	r2, [r3, #0]
10010000:	49d2      	ldr	r1, [pc, #840]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010002:	205e      	movs	r0, #94	; 0x5e
10010004:	0013      	movs	r3, r2
10010006:	015b      	lsls	r3, r3, #5
10010008:	1a9b      	subs	r3, r3, r2
1001000a:	009b      	lsls	r3, r3, #2
1001000c:	18cb      	adds	r3, r1, r3
1001000e:	181b      	adds	r3, r3, r0
10010010:	781b      	ldrb	r3, [r3, #0]
10010012:	2b02      	cmp	r3, #2
10010014:	d111      	bne.n	1001003a <ble_slave_security_request_handler+0x92>
		{
			device_found = true;
10010016:	231d      	movs	r3, #29
10010018:	18fb      	adds	r3, r7, r3
1001001a:	2201      	movs	r2, #1
1001001c:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1001001e:	231e      	movs	r3, #30
10010020:	18fb      	adds	r3, r7, r3
10010022:	781a      	ldrb	r2, [r3, #0]
10010024:	49c9      	ldr	r1, [pc, #804]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010026:	205e      	movs	r0, #94	; 0x5e
10010028:	0013      	movs	r3, r2
1001002a:	015b      	lsls	r3, r3, #5
1001002c:	1a9b      	subs	r3, r3, r2
1001002e:	009b      	lsls	r3, r3, #2
10010030:	18cb      	adds	r3, r1, r3
10010032:	181b      	adds	r3, r3, r0
10010034:	2206      	movs	r2, #6
10010036:	701a      	strb	r2, [r3, #0]
			break;
10010038:	e00b      	b.n	10010052 <ble_slave_security_request_handler+0xaa>
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1001003a:	231e      	movs	r3, #30
1001003c:	18fb      	adds	r3, r7, r3
1001003e:	781a      	ldrb	r2, [r3, #0]
10010040:	231e      	movs	r3, #30
10010042:	18fb      	adds	r3, r7, r3
10010044:	3201      	adds	r2, #1
10010046:	701a      	strb	r2, [r3, #0]
10010048:	231e      	movs	r3, #30
1001004a:	18fb      	adds	r3, r7, r3
1001004c:	781b      	ldrb	r3, [r3, #0]
1001004e:	2b04      	cmp	r3, #4
10010050:	d9c4      	bls.n	1000ffdc <ble_slave_security_request_handler+0x34>
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
			break;
		}
	}
	
	if (device_found)
10010052:	231d      	movs	r3, #29
10010054:	18fb      	adds	r3, r7, r3
10010056:	781b      	ldrb	r3, [r3, #0]
10010058:	2b00      	cmp	r3, #0
1001005a:	d04b      	beq.n	100100f4 <ble_slave_security_request_handler+0x14c>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1001005c:	231e      	movs	r3, #30
1001005e:	18fb      	adds	r3, r7, r3
10010060:	781a      	ldrb	r2, [r3, #0]
10010062:	49ba      	ldr	r1, [pc, #744]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010064:	0013      	movs	r3, r2
10010066:	015b      	lsls	r3, r3, #5
10010068:	1a9b      	subs	r3, r3, r2
1001006a:	009b      	lsls	r3, r3, #2
1001006c:	18cb      	adds	r3, r1, r3
1001006e:	3314      	adds	r3, #20
10010070:	781b      	ldrb	r3, [r3, #0]
10010072:	001a      	movs	r2, r3
10010074:	2301      	movs	r3, #1
10010076:	4013      	ands	r3, r2
10010078:	d02f      	beq.n	100100da <ble_slave_security_request_handler+0x132>
1001007a:	69bb      	ldr	r3, [r7, #24]
1001007c:	78db      	ldrb	r3, [r3, #3]
1001007e:	2b00      	cmp	r3, #0
10010080:	d02b      	beq.n	100100da <ble_slave_security_request_handler+0x132>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10010082:	69bb      	ldr	r3, [r7, #24]
10010084:	8818      	ldrh	r0, [r3, #0]
10010086:	231e      	movs	r3, #30
10010088:	18fb      	adds	r3, r7, r3
1001008a:	781a      	ldrb	r2, [r3, #0]
1001008c:	0013      	movs	r3, r2
1001008e:	015b      	lsls	r3, r3, #5
10010090:	1a9b      	subs	r3, r3, r2
10010092:	009b      	lsls	r3, r3, #2
10010094:	3310      	adds	r3, #16
10010096:	001a      	movs	r2, r3
10010098:	4bac      	ldr	r3, [pc, #688]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
1001009a:	18d3      	adds	r3, r2, r3
1001009c:	330a      	adds	r3, #10
1001009e:	001c      	movs	r4, r3
100100a0:	231e      	movs	r3, #30
100100a2:	18fb      	adds	r3, r7, r3
100100a4:	781a      	ldrb	r2, [r3, #0]
100100a6:	49a9      	ldr	r1, [pc, #676]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
100100a8:	0013      	movs	r3, r2
100100aa:	015b      	lsls	r3, r3, #5
100100ac:	1a9b      	subs	r3, r3, r2
100100ae:	009b      	lsls	r3, r3, #2
100100b0:	18cb      	adds	r3, r1, r3
100100b2:	3314      	adds	r3, #20
100100b4:	781b      	ldrb	r3, [r3, #0]
100100b6:	001a      	movs	r2, r3
100100b8:	0021      	movs	r1, r4
100100ba:	4ba5      	ldr	r3, [pc, #660]	; (10010350 <ble_slave_security_request_handler+0x3a8>)
100100bc:	4798      	blx	r3
100100be:	1e03      	subs	r3, r0, #0
100100c0:	d101      	bne.n	100100c6 <ble_slave_security_request_handler+0x11e>
			{
				return  AT_BLE_SUCCESS;
100100c2:	2300      	movs	r3, #0
100100c4:	e153      	b.n	1001036e <ble_slave_security_request_handler+0x3c6>
			}
			else
			{
				DBG_LOG("Encryption Not started");
100100c6:	4ba3      	ldr	r3, [pc, #652]	; (10010354 <ble_slave_security_request_handler+0x3ac>)
100100c8:	0018      	movs	r0, r3
100100ca:	4ba3      	ldr	r3, [pc, #652]	; (10010358 <ble_slave_security_request_handler+0x3b0>)
100100cc:	4798      	blx	r3
100100ce:	4ba3      	ldr	r3, [pc, #652]	; (1001035c <ble_slave_security_request_handler+0x3b4>)
100100d0:	0018      	movs	r0, r3
100100d2:	4ba3      	ldr	r3, [pc, #652]	; (10010360 <ble_slave_security_request_handler+0x3b8>)
100100d4:	4798      	blx	r3
				return AT_BLE_FAILURE;
100100d6:	23e2      	movs	r3, #226	; 0xe2
100100d8:	e149      	b.n	1001036e <ble_slave_security_request_handler+0x3c6>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
100100da:	231e      	movs	r3, #30
100100dc:	18fb      	adds	r3, r7, r3
100100de:	781a      	ldrb	r2, [r3, #0]
100100e0:	499a      	ldr	r1, [pc, #616]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
100100e2:	205e      	movs	r0, #94	; 0x5e
100100e4:	0013      	movs	r3, r2
100100e6:	015b      	lsls	r3, r3, #5
100100e8:	1a9b      	subs	r3, r3, r2
100100ea:	009b      	lsls	r3, r3, #2
100100ec:	18cb      	adds	r3, r1, r3
100100ee:	181b      	adds	r3, r3, r0
100100f0:	2202      	movs	r2, #2
100100f2:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100100f4:	231e      	movs	r3, #30
100100f6:	18fb      	adds	r3, r7, r3
100100f8:	2200      	movs	r2, #0
100100fa:	701a      	strb	r2, [r3, #0]
100100fc:	e031      	b.n	10010162 <ble_slave_security_request_handler+0x1ba>
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
100100fe:	231e      	movs	r3, #30
10010100:	18fb      	adds	r3, r7, r3
10010102:	781a      	ldrb	r2, [r3, #0]
10010104:	4991      	ldr	r1, [pc, #580]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010106:	0013      	movs	r3, r2
10010108:	015b      	lsls	r3, r3, #5
1001010a:	1a9b      	subs	r3, r3, r2
1001010c:	009b      	lsls	r3, r3, #2
1001010e:	18cb      	adds	r3, r1, r3
10010110:	3308      	adds	r3, #8
10010112:	881a      	ldrh	r2, [r3, #0]
10010114:	69bb      	ldr	r3, [r7, #24]
10010116:	881b      	ldrh	r3, [r3, #0]
10010118:	429a      	cmp	r2, r3
1001011a:	d11b      	bne.n	10010154 <ble_slave_security_request_handler+0x1ac>
1001011c:	231e      	movs	r3, #30
1001011e:	18fb      	adds	r3, r7, r3
10010120:	781a      	ldrb	r2, [r3, #0]
10010122:	498a      	ldr	r1, [pc, #552]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010124:	205e      	movs	r0, #94	; 0x5e
10010126:	0013      	movs	r3, r2
10010128:	015b      	lsls	r3, r3, #5
1001012a:	1a9b      	subs	r3, r3, r2
1001012c:	009b      	lsls	r3, r3, #2
1001012e:	18cb      	adds	r3, r1, r3
10010130:	181b      	adds	r3, r3, r0
10010132:	781b      	ldrb	r3, [r3, #0]
10010134:	2b02      	cmp	r3, #2
10010136:	d10d      	bne.n	10010154 <ble_slave_security_request_handler+0x1ac>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10010138:	231e      	movs	r3, #30
1001013a:	18fb      	adds	r3, r7, r3
1001013c:	781a      	ldrb	r2, [r3, #0]
1001013e:	4983      	ldr	r1, [pc, #524]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010140:	205e      	movs	r0, #94	; 0x5e
10010142:	0013      	movs	r3, r2
10010144:	015b      	lsls	r3, r3, #5
10010146:	1a9b      	subs	r3, r3, r2
10010148:	009b      	lsls	r3, r3, #2
1001014a:	18cb      	adds	r3, r1, r3
1001014c:	181b      	adds	r3, r3, r0
1001014e:	2203      	movs	r2, #3
10010150:	701a      	strb	r2, [r3, #0]
			break;
10010152:	e00b      	b.n	1001016c <ble_slave_security_request_handler+0x1c4>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010154:	231e      	movs	r3, #30
10010156:	18fb      	adds	r3, r7, r3
10010158:	781a      	ldrb	r2, [r3, #0]
1001015a:	231e      	movs	r3, #30
1001015c:	18fb      	adds	r3, r7, r3
1001015e:	3201      	adds	r2, #1
10010160:	701a      	strb	r2, [r3, #0]
10010162:	231e      	movs	r3, #30
10010164:	18fb      	adds	r3, r7, r3
10010166:	781b      	ldrb	r3, [r3, #0]
10010168:	2b04      	cmp	r3, #4
1001016a:	d9c8      	bls.n	100100fe <ble_slave_security_request_handler+0x156>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1001016c:	230c      	movs	r3, #12
1001016e:	18fb      	adds	r3, r7, r3
10010170:	2200      	movs	r2, #0
10010172:	721a      	strb	r2, [r3, #8]
	features.bond = slave_sec_req->bond;
10010174:	69bb      	ldr	r3, [r7, #24]
10010176:	78da      	ldrb	r2, [r3, #3]
10010178:	230c      	movs	r3, #12
1001017a:	18fb      	adds	r3, r7, r3
1001017c:	709a      	strb	r2, [r3, #2]
	features.mitm_protection = true;
1001017e:	230c      	movs	r3, #12
10010180:	18fb      	adds	r3, r7, r3
10010182:	2201      	movs	r2, #1
10010184:	705a      	strb	r2, [r3, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10010186:	230c      	movs	r3, #12
10010188:	18fb      	adds	r3, r7, r3
1001018a:	2204      	movs	r2, #4
1001018c:	701a      	strb	r2, [r3, #0]

	features.oob_avaiable = false;
1001018e:	230c      	movs	r3, #12
10010190:	18fb      	adds	r3, r7, r3
10010192:	2200      	movs	r2, #0
10010194:	70da      	strb	r2, [r3, #3]
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10010196:	231e      	movs	r3, #30
10010198:	18fb      	adds	r3, r7, r3
1001019a:	781a      	ldrb	r2, [r3, #0]
1001019c:	496b      	ldr	r1, [pc, #428]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
1001019e:	0013      	movs	r3, r2
100101a0:	015b      	lsls	r3, r3, #5
100101a2:	1a9b      	subs	r3, r3, r2
100101a4:	009b      	lsls	r3, r3, #2
100101a6:	5c5b      	ldrb	r3, [r3, r1]
100101a8:	2b02      	cmp	r3, #2
100101aa:	d108      	bne.n	100101be <ble_slave_security_request_handler+0x216>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100101ac:	230c      	movs	r3, #12
100101ae:	18fb      	adds	r3, r7, r3
100101b0:	2203      	movs	r2, #3
100101b2:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100101b4:	230c      	movs	r3, #12
100101b6:	18fb      	adds	r3, r7, r3
100101b8:	2203      	movs	r2, #3
100101ba:	71da      	strb	r2, [r3, #7]
100101bc:	e007      	b.n	100101ce <ble_slave_security_request_handler+0x226>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
100101be:	230c      	movs	r3, #12
100101c0:	18fb      	adds	r3, r7, r3
100101c2:	2201      	movs	r2, #1
100101c4:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
100101c6:	230c      	movs	r3, #12
100101c8:	18fb      	adds	r3, r7, r3
100101ca:	2201      	movs	r2, #1
100101cc:	71da      	strb	r2, [r3, #7]
	}
	features.max_key_size = 16;
100101ce:	230c      	movs	r3, #12
100101d0:	18fb      	adds	r3, r7, r3
100101d2:	2210      	movs	r2, #16
100101d4:	715a      	strb	r2, [r3, #5]
	features.min_key_size = 16;
100101d6:	230c      	movs	r3, #12
100101d8:	18fb      	adds	r3, r7, r3
100101da:	2210      	movs	r2, #16
100101dc:	711a      	strb	r2, [r3, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
100101de:	231e      	movs	r3, #30
100101e0:	18fb      	adds	r3, r7, r3
100101e2:	781a      	ldrb	r2, [r3, #0]
100101e4:	4959      	ldr	r1, [pc, #356]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
100101e6:	0013      	movs	r3, r2
100101e8:	015b      	lsls	r3, r3, #5
100101ea:	1a9b      	subs	r3, r3, r2
100101ec:	009b      	lsls	r3, r3, #2
100101ee:	18cb      	adds	r3, r1, r3
100101f0:	3318      	adds	r3, #24
100101f2:	781b      	ldrb	r3, [r3, #0]
100101f4:	2b40      	cmp	r3, #64	; 0x40
100101f6:	d000      	beq.n	100101fa <ble_slave_security_request_handler+0x252>
100101f8:	e087      	b.n	1001030a <ble_slave_security_request_handler+0x362>
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
100101fa:	231f      	movs	r3, #31
100101fc:	18fb      	adds	r3, r7, r3
100101fe:	2200      	movs	r2, #0
10010200:	701a      	strb	r2, [r3, #0]
10010202:	e036      	b.n	10010272 <ble_slave_security_request_handler+0x2ca>
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10010204:	231e      	movs	r3, #30
10010206:	18fb      	adds	r3, r7, r3
10010208:	781c      	ldrb	r4, [r3, #0]
1001020a:	231f      	movs	r3, #31
1001020c:	18fb      	adds	r3, r7, r3
1001020e:	781d      	ldrb	r5, [r3, #0]
10010210:	4b54      	ldr	r3, [pc, #336]	; (10010364 <ble_slave_security_request_handler+0x3bc>)
10010212:	4798      	blx	r3
10010214:	0003      	movs	r3, r0
10010216:	b2db      	uxtb	r3, r3
10010218:	220f      	movs	r2, #15
1001021a:	4013      	ands	r3, r2
1001021c:	b2d8      	uxtb	r0, r3
1001021e:	4a4b      	ldr	r2, [pc, #300]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010220:	2160      	movs	r1, #96	; 0x60
10010222:	0023      	movs	r3, r4
10010224:	015b      	lsls	r3, r3, #5
10010226:	1b1b      	subs	r3, r3, r4
10010228:	009b      	lsls	r3, r3, #2
1001022a:	18d3      	adds	r3, r2, r3
1001022c:	195b      	adds	r3, r3, r5
1001022e:	185b      	adds	r3, r3, r1
10010230:	1c02      	adds	r2, r0, #0
10010232:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10010234:	231e      	movs	r3, #30
10010236:	18fb      	adds	r3, r7, r3
10010238:	781c      	ldrb	r4, [r3, #0]
1001023a:	231f      	movs	r3, #31
1001023c:	18fb      	adds	r3, r7, r3
1001023e:	781d      	ldrb	r5, [r3, #0]
10010240:	4b48      	ldr	r3, [pc, #288]	; (10010364 <ble_slave_security_request_handler+0x3bc>)
10010242:	4798      	blx	r3
10010244:	0003      	movs	r3, r0
10010246:	b2db      	uxtb	r3, r3
10010248:	220f      	movs	r2, #15
1001024a:	4013      	ands	r3, r2
1001024c:	b2d8      	uxtb	r0, r3
1001024e:	4a3f      	ldr	r2, [pc, #252]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010250:	2172      	movs	r1, #114	; 0x72
10010252:	0023      	movs	r3, r4
10010254:	015b      	lsls	r3, r3, #5
10010256:	1b1b      	subs	r3, r3, r4
10010258:	009b      	lsls	r3, r3, #2
1001025a:	18d3      	adds	r3, r2, r3
1001025c:	195b      	adds	r3, r3, r5
1001025e:	185b      	adds	r3, r3, r1
10010260:	1c02      	adds	r2, r0, #0
10010262:	701a      	strb	r2, [r3, #0]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10010264:	231f      	movs	r3, #31
10010266:	18fb      	adds	r3, r7, r3
10010268:	781a      	ldrb	r2, [r3, #0]
1001026a:	231f      	movs	r3, #31
1001026c:	18fb      	adds	r3, r7, r3
1001026e:	3201      	adds	r2, #1
10010270:	701a      	strb	r2, [r3, #0]
10010272:	231f      	movs	r3, #31
10010274:	18fb      	adds	r3, r7, r3
10010276:	781b      	ldrb	r3, [r3, #0]
10010278:	2b07      	cmp	r3, #7
1001027a:	d9c3      	bls.n	10010204 <ble_slave_security_request_handler+0x25c>
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1001027c:	231f      	movs	r3, #31
1001027e:	18fb      	adds	r3, r7, r3
10010280:	2208      	movs	r2, #8
10010282:	701a      	strb	r2, [r3, #0]
10010284:	e01e      	b.n	100102c4 <ble_slave_security_request_handler+0x31c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10010286:	231e      	movs	r3, #30
10010288:	18fb      	adds	r3, r7, r3
1001028a:	781c      	ldrb	r4, [r3, #0]
1001028c:	231f      	movs	r3, #31
1001028e:	18fb      	adds	r3, r7, r3
10010290:	781d      	ldrb	r5, [r3, #0]
10010292:	4b34      	ldr	r3, [pc, #208]	; (10010364 <ble_slave_security_request_handler+0x3bc>)
10010294:	4798      	blx	r3
10010296:	0003      	movs	r3, r0
10010298:	b2db      	uxtb	r3, r3
1001029a:	220f      	movs	r2, #15
1001029c:	4013      	ands	r3, r2
1001029e:	b2d8      	uxtb	r0, r3
100102a0:	4a2a      	ldr	r2, [pc, #168]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
100102a2:	2160      	movs	r1, #96	; 0x60
100102a4:	0023      	movs	r3, r4
100102a6:	015b      	lsls	r3, r3, #5
100102a8:	1b1b      	subs	r3, r3, r4
100102aa:	009b      	lsls	r3, r3, #2
100102ac:	18d3      	adds	r3, r2, r3
100102ae:	195b      	adds	r3, r3, r5
100102b0:	185b      	adds	r3, r3, r1
100102b2:	1c02      	adds	r2, r0, #0
100102b4:	701a      	strb	r2, [r3, #0]
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
100102b6:	231f      	movs	r3, #31
100102b8:	18fb      	adds	r3, r7, r3
100102ba:	781a      	ldrb	r2, [r3, #0]
100102bc:	231f      	movs	r3, #31
100102be:	18fb      	adds	r3, r7, r3
100102c0:	3201      	adds	r2, #1
100102c2:	701a      	strb	r2, [r3, #0]
100102c4:	231f      	movs	r3, #31
100102c6:	18fb      	adds	r3, r7, r3
100102c8:	781b      	ldrb	r3, [r3, #0]
100102ca:	2b0f      	cmp	r3, #15
100102cc:	d9db      	bls.n	10010286 <ble_slave_security_request_handler+0x2de>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
100102ce:	231e      	movs	r3, #30
100102d0:	18fb      	adds	r3, r7, r3
100102d2:	781c      	ldrb	r4, [r3, #0]
100102d4:	4b23      	ldr	r3, [pc, #140]	; (10010364 <ble_slave_security_request_handler+0x3bc>)
100102d6:	4798      	blx	r3
100102d8:	0003      	movs	r3, r0
100102da:	b298      	uxth	r0, r3
100102dc:	4a1b      	ldr	r2, [pc, #108]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
100102de:	2170      	movs	r1, #112	; 0x70
100102e0:	0023      	movs	r3, r4
100102e2:	015b      	lsls	r3, r3, #5
100102e4:	1b1b      	subs	r3, r3, r4
100102e6:	009b      	lsls	r3, r3, #2
100102e8:	18d3      	adds	r3, r2, r3
100102ea:	185b      	adds	r3, r3, r1
100102ec:	1c02      	adds	r2, r0, #0
100102ee:	801a      	strh	r2, [r3, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
100102f0:	231e      	movs	r3, #30
100102f2:	18fb      	adds	r3, r7, r3
100102f4:	781a      	ldrb	r2, [r3, #0]
100102f6:	4915      	ldr	r1, [pc, #84]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
100102f8:	207a      	movs	r0, #122	; 0x7a
100102fa:	0013      	movs	r3, r2
100102fc:	015b      	lsls	r3, r3, #5
100102fe:	1a9b      	subs	r3, r3, r2
10010300:	009b      	lsls	r3, r3, #2
10010302:	18cb      	adds	r3, r1, r3
10010304:	181b      	adds	r3, r3, r0
10010306:	2210      	movs	r2, #16
10010308:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1001030a:	69bb      	ldr	r3, [r7, #24]
1001030c:	8818      	ldrh	r0, [r3, #0]
1001030e:	231e      	movs	r3, #30
10010310:	18fb      	adds	r3, r7, r3
10010312:	781a      	ldrb	r2, [r3, #0]
10010314:	0013      	movs	r3, r2
10010316:	015b      	lsls	r3, r3, #5
10010318:	1a9b      	subs	r3, r3, r2
1001031a:	009b      	lsls	r3, r3, #2
1001031c:	3360      	adds	r3, #96	; 0x60
1001031e:	001a      	movs	r2, r3
10010320:	4b0a      	ldr	r3, [pc, #40]	; (1001034c <ble_slave_security_request_handler+0x3a4>)
10010322:	18d2      	adds	r2, r2, r3
10010324:	230c      	movs	r3, #12
10010326:	18f9      	adds	r1, r7, r3
10010328:	2300      	movs	r3, #0
1001032a:	4c0f      	ldr	r4, [pc, #60]	; (10010368 <ble_slave_security_request_handler+0x3c0>)
1001032c:	47a0      	blx	r4
1001032e:	1e03      	subs	r3, r0, #0
10010330:	d01c      	beq.n	1001036c <ble_slave_security_request_handler+0x3c4>
	{
		features.bond = false;
10010332:	230c      	movs	r3, #12
10010334:	18fb      	adds	r3, r7, r3
10010336:	2200      	movs	r2, #0
10010338:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1001033a:	230c      	movs	r3, #12
1001033c:	18fb      	adds	r3, r7, r3
1001033e:	2200      	movs	r2, #0
10010340:	705a      	strb	r2, [r3, #1]
		//DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
10010342:	23e2      	movs	r3, #226	; 0xe2
10010344:	e013      	b.n	1001036e <ble_slave_security_request_handler+0x3c6>
10010346:	46c0      	nop			; (mov r8, r8)
10010348:	10017329 	.word	0x10017329
1001034c:	1001a590 	.word	0x1001a590
10010350:	10013b49 	.word	0x10013b49
10010354:	100192e0 	.word	0x100192e0
10010358:	10017591 	.word	0x10017591
1001035c:	10019448 	.word	0x10019448
10010360:	10017471 	.word	0x10017471
10010364:	100175a5 	.word	0x100175a5
10010368:	1001395d 	.word	0x1001395d
	}
	return AT_BLE_SUCCESS;
1001036c:	2300      	movs	r3, #0
}
1001036e:	0018      	movs	r0, r3
10010370:	46bd      	mov	sp, r7
10010372:	b008      	add	sp, #32
10010374:	bdb0      	pop	{r4, r5, r7, pc}
10010376:	46c0      	nop			; (mov r8, r8)

10010378 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10010378:	b5b0      	push	{r4, r5, r7, lr}
1001037a:	b088      	sub	sp, #32
1001037c:	af00      	add	r7, sp, #0
1001037e:	6078      	str	r0, [r7, #4]
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
10010380:	231f      	movs	r3, #31
10010382:	18fb      	adds	r3, r7, r3
10010384:	2200      	movs	r2, #0
10010386:	701a      	strb	r2, [r3, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
10010388:	687b      	ldr	r3, [r7, #4]
1001038a:	61bb      	str	r3, [r7, #24]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1001038c:	231e      	movs	r3, #30
1001038e:	18fb      	adds	r3, r7, r3
10010390:	2200      	movs	r2, #0
10010392:	701a      	strb	r2, [r3, #0]
10010394:	e031      	b.n	100103fa <ble_pair_request_handler+0x82>
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10010396:	231e      	movs	r3, #30
10010398:	18fb      	adds	r3, r7, r3
1001039a:	781a      	ldrb	r2, [r3, #0]
1001039c:	499e      	ldr	r1, [pc, #632]	; (10010618 <ble_pair_request_handler+0x2a0>)
1001039e:	0013      	movs	r3, r2
100103a0:	015b      	lsls	r3, r3, #5
100103a2:	1a9b      	subs	r3, r3, r2
100103a4:	009b      	lsls	r3, r3, #2
100103a6:	18cb      	adds	r3, r1, r3
100103a8:	3308      	adds	r3, #8
100103aa:	881a      	ldrh	r2, [r3, #0]
100103ac:	69bb      	ldr	r3, [r7, #24]
100103ae:	881b      	ldrh	r3, [r3, #0]
100103b0:	429a      	cmp	r2, r3
100103b2:	d11b      	bne.n	100103ec <ble_pair_request_handler+0x74>
100103b4:	231e      	movs	r3, #30
100103b6:	18fb      	adds	r3, r7, r3
100103b8:	781a      	ldrb	r2, [r3, #0]
100103ba:	4997      	ldr	r1, [pc, #604]	; (10010618 <ble_pair_request_handler+0x2a0>)
100103bc:	205e      	movs	r0, #94	; 0x5e
100103be:	0013      	movs	r3, r2
100103c0:	015b      	lsls	r3, r3, #5
100103c2:	1a9b      	subs	r3, r3, r2
100103c4:	009b      	lsls	r3, r3, #2
100103c6:	18cb      	adds	r3, r1, r3
100103c8:	181b      	adds	r3, r3, r0
100103ca:	781b      	ldrb	r3, [r3, #0]
100103cc:	2b02      	cmp	r3, #2
100103ce:	d10d      	bne.n	100103ec <ble_pair_request_handler+0x74>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
100103d0:	231e      	movs	r3, #30
100103d2:	18fb      	adds	r3, r7, r3
100103d4:	781a      	ldrb	r2, [r3, #0]
100103d6:	4990      	ldr	r1, [pc, #576]	; (10010618 <ble_pair_request_handler+0x2a0>)
100103d8:	205e      	movs	r0, #94	; 0x5e
100103da:	0013      	movs	r3, r2
100103dc:	015b      	lsls	r3, r3, #5
100103de:	1a9b      	subs	r3, r3, r2
100103e0:	009b      	lsls	r3, r3, #2
100103e2:	18cb      	adds	r3, r1, r3
100103e4:	181b      	adds	r3, r3, r0
100103e6:	2203      	movs	r2, #3
100103e8:	701a      	strb	r2, [r3, #0]
			break;
100103ea:	e00b      	b.n	10010404 <ble_pair_request_handler+0x8c>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100103ec:	231e      	movs	r3, #30
100103ee:	18fb      	adds	r3, r7, r3
100103f0:	781a      	ldrb	r2, [r3, #0]
100103f2:	231e      	movs	r3, #30
100103f4:	18fb      	adds	r3, r7, r3
100103f6:	3201      	adds	r2, #1
100103f8:	701a      	strb	r2, [r3, #0]
100103fa:	231e      	movs	r3, #30
100103fc:	18fb      	adds	r3, r7, r3
100103fe:	781b      	ldrb	r3, [r3, #0]
10010400:	2b04      	cmp	r3, #4
10010402:	d9c8      	bls.n	10010396 <ble_pair_request_handler+0x1e>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10010404:	230c      	movs	r3, #12
10010406:	18fb      	adds	r3, r7, r3
10010408:	2200      	movs	r2, #0
1001040a:	721a      	strb	r2, [r3, #8]
	features.bond = BLE_BOND_REQ;
1001040c:	230c      	movs	r3, #12
1001040e:	18fb      	adds	r3, r7, r3
10010410:	2200      	movs	r2, #0
10010412:	709a      	strb	r2, [r3, #2]
	features.mitm_protection = BLE_MITM_REQ;
10010414:	230c      	movs	r3, #12
10010416:	18fb      	adds	r3, r7, r3
10010418:	2200      	movs	r2, #0
1001041a:	705a      	strb	r2, [r3, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1001041c:	230c      	movs	r3, #12
1001041e:	18fb      	adds	r3, r7, r3
10010420:	2203      	movs	r2, #3
10010422:	701a      	strb	r2, [r3, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10010424:	230c      	movs	r3, #12
10010426:	18fb      	adds	r3, r7, r3
10010428:	2200      	movs	r2, #0
1001042a:	70da      	strb	r2, [r3, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1001042c:	231e      	movs	r3, #30
1001042e:	18fb      	adds	r3, r7, r3
10010430:	781a      	ldrb	r2, [r3, #0]
10010432:	4979      	ldr	r1, [pc, #484]	; (10010618 <ble_pair_request_handler+0x2a0>)
10010434:	0013      	movs	r3, r2
10010436:	015b      	lsls	r3, r3, #5
10010438:	1a9b      	subs	r3, r3, r2
1001043a:	009b      	lsls	r3, r3, #2
1001043c:	5c5b      	ldrb	r3, [r3, r1]
1001043e:	2b02      	cmp	r3, #2
10010440:	d108      	bne.n	10010454 <ble_pair_request_handler+0xdc>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10010442:	230c      	movs	r3, #12
10010444:	18fb      	adds	r3, r7, r3
10010446:	2203      	movs	r2, #3
10010448:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1001044a:	230c      	movs	r3, #12
1001044c:	18fb      	adds	r3, r7, r3
1001044e:	2203      	movs	r2, #3
10010450:	71da      	strb	r2, [r3, #7]
10010452:	e007      	b.n	10010464 <ble_pair_request_handler+0xec>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10010454:	230c      	movs	r3, #12
10010456:	18fb      	adds	r3, r7, r3
10010458:	2201      	movs	r2, #1
1001045a:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1001045c:	230c      	movs	r3, #12
1001045e:	18fb      	adds	r3, r7, r3
10010460:	2201      	movs	r2, #1
10010462:	71da      	strb	r2, [r3, #7]
	}
			
	features.max_key_size = 16;
10010464:	230c      	movs	r3, #12
10010466:	18fb      	adds	r3, r7, r3
10010468:	2210      	movs	r2, #16
1001046a:	715a      	strb	r2, [r3, #5]
	features.min_key_size = 16;
1001046c:	230c      	movs	r3, #12
1001046e:	18fb      	adds	r3, r7, r3
10010470:	2210      	movs	r2, #16
10010472:	711a      	strb	r2, [r3, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10010474:	231e      	movs	r3, #30
10010476:	18fb      	adds	r3, r7, r3
10010478:	781a      	ldrb	r2, [r3, #0]
1001047a:	4967      	ldr	r1, [pc, #412]	; (10010618 <ble_pair_request_handler+0x2a0>)
1001047c:	0013      	movs	r3, r2
1001047e:	015b      	lsls	r3, r3, #5
10010480:	1a9b      	subs	r3, r3, r2
10010482:	009b      	lsls	r3, r3, #2
10010484:	18cb      	adds	r3, r1, r3
10010486:	3318      	adds	r3, #24
10010488:	781b      	ldrb	r3, [r3, #0]
1001048a:	2b40      	cmp	r3, #64	; 0x40
1001048c:	d000      	beq.n	10010490 <ble_pair_request_handler+0x118>
1001048e:	e098      	b.n	100105c2 <ble_pair_request_handler+0x24a>
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10010490:	231f      	movs	r3, #31
10010492:	18fb      	adds	r3, r7, r3
10010494:	2200      	movs	r2, #0
10010496:	701a      	strb	r2, [r3, #0]
10010498:	e036      	b.n	10010508 <ble_pair_request_handler+0x190>
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1001049a:	231e      	movs	r3, #30
1001049c:	18fb      	adds	r3, r7, r3
1001049e:	781c      	ldrb	r4, [r3, #0]
100104a0:	231f      	movs	r3, #31
100104a2:	18fb      	adds	r3, r7, r3
100104a4:	781d      	ldrb	r5, [r3, #0]
100104a6:	4b5d      	ldr	r3, [pc, #372]	; (1001061c <ble_pair_request_handler+0x2a4>)
100104a8:	4798      	blx	r3
100104aa:	0003      	movs	r3, r0
100104ac:	b2db      	uxtb	r3, r3
100104ae:	220f      	movs	r2, #15
100104b0:	4013      	ands	r3, r2
100104b2:	b2d8      	uxtb	r0, r3
100104b4:	4a58      	ldr	r2, [pc, #352]	; (10010618 <ble_pair_request_handler+0x2a0>)
100104b6:	2160      	movs	r1, #96	; 0x60
100104b8:	0023      	movs	r3, r4
100104ba:	015b      	lsls	r3, r3, #5
100104bc:	1b1b      	subs	r3, r3, r4
100104be:	009b      	lsls	r3, r3, #2
100104c0:	18d3      	adds	r3, r2, r3
100104c2:	195b      	adds	r3, r3, r5
100104c4:	185b      	adds	r3, r3, r1
100104c6:	1c02      	adds	r2, r0, #0
100104c8:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
100104ca:	231e      	movs	r3, #30
100104cc:	18fb      	adds	r3, r7, r3
100104ce:	781c      	ldrb	r4, [r3, #0]
100104d0:	231f      	movs	r3, #31
100104d2:	18fb      	adds	r3, r7, r3
100104d4:	781d      	ldrb	r5, [r3, #0]
100104d6:	4b51      	ldr	r3, [pc, #324]	; (1001061c <ble_pair_request_handler+0x2a4>)
100104d8:	4798      	blx	r3
100104da:	0003      	movs	r3, r0
100104dc:	b2db      	uxtb	r3, r3
100104de:	220f      	movs	r2, #15
100104e0:	4013      	ands	r3, r2
100104e2:	b2d8      	uxtb	r0, r3
100104e4:	4a4c      	ldr	r2, [pc, #304]	; (10010618 <ble_pair_request_handler+0x2a0>)
100104e6:	2172      	movs	r1, #114	; 0x72
100104e8:	0023      	movs	r3, r4
100104ea:	015b      	lsls	r3, r3, #5
100104ec:	1b1b      	subs	r3, r3, r4
100104ee:	009b      	lsls	r3, r3, #2
100104f0:	18d3      	adds	r3, r2, r3
100104f2:	195b      	adds	r3, r3, r5
100104f4:	185b      	adds	r3, r3, r1
100104f6:	1c02      	adds	r2, r0, #0
100104f8:	701a      	strb	r2, [r3, #0]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
100104fa:	231f      	movs	r3, #31
100104fc:	18fb      	adds	r3, r7, r3
100104fe:	781a      	ldrb	r2, [r3, #0]
10010500:	231f      	movs	r3, #31
10010502:	18fb      	adds	r3, r7, r3
10010504:	3201      	adds	r2, #1
10010506:	701a      	strb	r2, [r3, #0]
10010508:	231f      	movs	r3, #31
1001050a:	18fb      	adds	r3, r7, r3
1001050c:	781b      	ldrb	r3, [r3, #0]
1001050e:	2b07      	cmp	r3, #7
10010510:	d9c3      	bls.n	1001049a <ble_pair_request_handler+0x122>
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10010512:	231f      	movs	r3, #31
10010514:	18fb      	adds	r3, r7, r3
10010516:	2208      	movs	r2, #8
10010518:	701a      	strb	r2, [r3, #0]
1001051a:	e01e      	b.n	1001055a <ble_pair_request_handler+0x1e2>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1001051c:	231e      	movs	r3, #30
1001051e:	18fb      	adds	r3, r7, r3
10010520:	781c      	ldrb	r4, [r3, #0]
10010522:	231f      	movs	r3, #31
10010524:	18fb      	adds	r3, r7, r3
10010526:	781d      	ldrb	r5, [r3, #0]
10010528:	4b3c      	ldr	r3, [pc, #240]	; (1001061c <ble_pair_request_handler+0x2a4>)
1001052a:	4798      	blx	r3
1001052c:	0003      	movs	r3, r0
1001052e:	b2db      	uxtb	r3, r3
10010530:	220f      	movs	r2, #15
10010532:	4013      	ands	r3, r2
10010534:	b2d8      	uxtb	r0, r3
10010536:	4a38      	ldr	r2, [pc, #224]	; (10010618 <ble_pair_request_handler+0x2a0>)
10010538:	2160      	movs	r1, #96	; 0x60
1001053a:	0023      	movs	r3, r4
1001053c:	015b      	lsls	r3, r3, #5
1001053e:	1b1b      	subs	r3, r3, r4
10010540:	009b      	lsls	r3, r3, #2
10010542:	18d3      	adds	r3, r2, r3
10010544:	195b      	adds	r3, r3, r5
10010546:	185b      	adds	r3, r3, r1
10010548:	1c02      	adds	r2, r0, #0
1001054a:	701a      	strb	r2, [r3, #0]
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1001054c:	231f      	movs	r3, #31
1001054e:	18fb      	adds	r3, r7, r3
10010550:	781a      	ldrb	r2, [r3, #0]
10010552:	231f      	movs	r3, #31
10010554:	18fb      	adds	r3, r7, r3
10010556:	3201      	adds	r2, #1
10010558:	701a      	strb	r2, [r3, #0]
1001055a:	231f      	movs	r3, #31
1001055c:	18fb      	adds	r3, r7, r3
1001055e:	781b      	ldrb	r3, [r3, #0]
10010560:	2b0f      	cmp	r3, #15
10010562:	d9db      	bls.n	1001051c <ble_pair_request_handler+0x1a4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		//DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
10010564:	231f      	movs	r3, #31
10010566:	18fb      	adds	r3, r7, r3
10010568:	2200      	movs	r2, #0
1001056a:	701a      	strb	r2, [r3, #0]
1001056c:	e006      	b.n	1001057c <ble_pair_request_handler+0x204>
1001056e:	231f      	movs	r3, #31
10010570:	18fb      	adds	r3, r7, r3
10010572:	781a      	ldrb	r2, [r3, #0]
10010574:	231f      	movs	r3, #31
10010576:	18fb      	adds	r3, r7, r3
10010578:	3201      	adds	r2, #1
1001057a:	701a      	strb	r2, [r3, #0]
1001057c:	231f      	movs	r3, #31
1001057e:	18fb      	adds	r3, r7, r3
10010580:	781b      	ldrb	r3, [r3, #0]
10010582:	2b0f      	cmp	r3, #15
10010584:	d9f3      	bls.n	1001056e <ble_pair_request_handler+0x1f6>
		{
			//DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10010586:	231e      	movs	r3, #30
10010588:	18fb      	adds	r3, r7, r3
1001058a:	781c      	ldrb	r4, [r3, #0]
1001058c:	4b23      	ldr	r3, [pc, #140]	; (1001061c <ble_pair_request_handler+0x2a4>)
1001058e:	4798      	blx	r3
10010590:	0003      	movs	r3, r0
10010592:	b298      	uxth	r0, r3
10010594:	4a20      	ldr	r2, [pc, #128]	; (10010618 <ble_pair_request_handler+0x2a0>)
10010596:	2170      	movs	r1, #112	; 0x70
10010598:	0023      	movs	r3, r4
1001059a:	015b      	lsls	r3, r3, #5
1001059c:	1b1b      	subs	r3, r3, r4
1001059e:	009b      	lsls	r3, r3, #2
100105a0:	18d3      	adds	r3, r2, r3
100105a2:	185b      	adds	r3, r3, r1
100105a4:	1c02      	adds	r2, r0, #0
100105a6:	801a      	strh	r2, [r3, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
100105a8:	231e      	movs	r3, #30
100105aa:	18fb      	adds	r3, r7, r3
100105ac:	781a      	ldrb	r2, [r3, #0]
100105ae:	491a      	ldr	r1, [pc, #104]	; (10010618 <ble_pair_request_handler+0x2a0>)
100105b0:	207a      	movs	r0, #122	; 0x7a
100105b2:	0013      	movs	r3, r2
100105b4:	015b      	lsls	r3, r3, #5
100105b6:	1a9b      	subs	r3, r3, r2
100105b8:	009b      	lsls	r3, r3, #2
100105ba:	18cb      	adds	r3, r1, r3
100105bc:	181b      	adds	r3, r3, r0
100105be:	2210      	movs	r2, #16
100105c0:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	//DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
100105c2:	69bb      	ldr	r3, [r7, #24]
100105c4:	8818      	ldrh	r0, [r3, #0]
100105c6:	231e      	movs	r3, #30
100105c8:	18fb      	adds	r3, r7, r3
100105ca:	781a      	ldrb	r2, [r3, #0]
100105cc:	0013      	movs	r3, r2
100105ce:	015b      	lsls	r3, r3, #5
100105d0:	1a9b      	subs	r3, r3, r2
100105d2:	009b      	lsls	r3, r3, #2
100105d4:	3360      	adds	r3, #96	; 0x60
100105d6:	001a      	movs	r2, r3
100105d8:	4b0f      	ldr	r3, [pc, #60]	; (10010618 <ble_pair_request_handler+0x2a0>)
100105da:	18d2      	adds	r2, r2, r3
100105dc:	230c      	movs	r3, #12
100105de:	18f9      	adds	r1, r7, r3
100105e0:	2300      	movs	r3, #0
100105e2:	4c0f      	ldr	r4, [pc, #60]	; (10010620 <ble_pair_request_handler+0x2a8>)
100105e4:	47a0      	blx	r4
100105e6:	1e03      	subs	r3, r0, #0
100105e8:	d011      	beq.n	1001060e <ble_pair_request_handler+0x296>
	{
		features.bond = false;
100105ea:	230c      	movs	r3, #12
100105ec:	18fb      	adds	r3, r7, r3
100105ee:	2200      	movs	r2, #0
100105f0:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
100105f2:	230c      	movs	r3, #12
100105f4:	18fb      	adds	r3, r7, r3
100105f6:	2200      	movs	r2, #0
100105f8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
100105fa:	4b0a      	ldr	r3, [pc, #40]	; (10010624 <ble_pair_request_handler+0x2ac>)
100105fc:	0018      	movs	r0, r3
100105fe:	4b0a      	ldr	r3, [pc, #40]	; (10010628 <ble_pair_request_handler+0x2b0>)
10010600:	4798      	blx	r3
10010602:	4b0a      	ldr	r3, [pc, #40]	; (1001062c <ble_pair_request_handler+0x2b4>)
10010604:	0018      	movs	r0, r3
10010606:	4b0a      	ldr	r3, [pc, #40]	; (10010630 <ble_pair_request_handler+0x2b8>)
10010608:	4798      	blx	r3
		return AT_BLE_FAILURE;
1001060a:	23e2      	movs	r3, #226	; 0xe2
1001060c:	e000      	b.n	10010610 <ble_pair_request_handler+0x298>
	}
	return AT_BLE_SUCCESS;
1001060e:	2300      	movs	r3, #0
}
10010610:	0018      	movs	r0, r3
10010612:	46bd      	mov	sp, r7
10010614:	b008      	add	sp, #32
10010616:	bdb0      	pop	{r4, r5, r7, pc}
10010618:	1001a590 	.word	0x1001a590
1001061c:	100175a5 	.word	0x100175a5
10010620:	1001395d 	.word	0x1001395d
10010624:	100192e0 	.word	0x100192e0
10010628:	10017591 	.word	0x10017591
1001062c:	10019460 	.word	0x10019460
10010630:	10017471 	.word	0x10017471

10010634 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10010634:	b580      	push	{r7, lr}
10010636:	b088      	sub	sp, #32
10010638:	af00      	add	r7, sp, #0
1001063a:	6078      	str	r0, [r7, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
1001063c:	687b      	ldr	r3, [r7, #4]
1001063e:	61bb      	str	r3, [r7, #24]
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10010640:	2310      	movs	r3, #16
10010642:	18fa      	adds	r2, r7, r3
10010644:	4b79      	ldr	r3, [pc, #484]	; (1001082c <ble_pair_key_request_handler+0x1f8>)
10010646:	0010      	movs	r0, r2
10010648:	0019      	movs	r1, r3
1001064a:	2306      	movs	r3, #6
1001064c:	001a      	movs	r2, r3
1001064e:	4b78      	ldr	r3, [pc, #480]	; (10010830 <ble_pair_key_request_handler+0x1fc>)
10010650:	4798      	blx	r3
	uint8_t idx = 0;
10010652:	231f      	movs	r3, #31
10010654:	18fb      	adds	r3, r7, r3
10010656:	2200      	movs	r2, #0
10010658:	701a      	strb	r2, [r3, #0]
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1001065a:	69b9      	ldr	r1, [r7, #24]
1001065c:	230c      	movs	r3, #12
1001065e:	18fb      	adds	r3, r7, r3
10010660:	2204      	movs	r2, #4
10010662:	0018      	movs	r0, r3
10010664:	4b72      	ldr	r3, [pc, #456]	; (10010830 <ble_pair_key_request_handler+0x1fc>)
10010666:	4798      	blx	r3
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
10010668:	230c      	movs	r3, #12
1001066a:	18fb      	adds	r3, r7, r3
1001066c:	78db      	ldrb	r3, [r3, #3]
1001066e:	2b00      	cmp	r3, #0
10010670:	d169      	bne.n	10010746 <ble_pair_key_request_handler+0x112>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10010672:	4b70      	ldr	r3, [pc, #448]	; (10010834 <ble_pair_key_request_handler+0x200>)
10010674:	0018      	movs	r0, r3
10010676:	4b70      	ldr	r3, [pc, #448]	; (10010838 <ble_pair_key_request_handler+0x204>)
10010678:	4798      	blx	r3
1001067a:	4b70      	ldr	r3, [pc, #448]	; (1001083c <ble_pair_key_request_handler+0x208>)
1001067c:	0018      	movs	r0, r3
1001067e:	4b70      	ldr	r3, [pc, #448]	; (10010840 <ble_pair_key_request_handler+0x20c>)
10010680:	4798      	blx	r3
		for (idx = 0; idx < 6;) {          
10010682:	231f      	movs	r3, #31
10010684:	18fb      	adds	r3, r7, r3
10010686:	2200      	movs	r2, #0
10010688:	701a      	strb	r2, [r3, #0]
1001068a:	e057      	b.n	1001073c <ble_pair_key_request_handler+0x108>
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1001068c:	201e      	movs	r0, #30
1001068e:	4b6d      	ldr	r3, [pc, #436]	; (10010844 <ble_pair_key_request_handler+0x210>)
10010690:	4798      	blx	r3
10010692:	0002      	movs	r2, r0
10010694:	2317      	movs	r3, #23
10010696:	18fb      	adds	r3, r7, r3
10010698:	701a      	strb	r2, [r3, #0]

			if (!pin) {
1001069a:	2317      	movs	r3, #23
1001069c:	18fb      	adds	r3, r7, r3
1001069e:	781b      	ldrb	r3, [r3, #0]
100106a0:	2b00      	cmp	r3, #0
100106a2:	d121      	bne.n	100106e8 <ble_pair_key_request_handler+0xb4>
			DBG_LOG("Pin Timeout");
100106a4:	4b63      	ldr	r3, [pc, #396]	; (10010834 <ble_pair_key_request_handler+0x200>)
100106a6:	0018      	movs	r0, r3
100106a8:	4b63      	ldr	r3, [pc, #396]	; (10010838 <ble_pair_key_request_handler+0x204>)
100106aa:	4798      	blx	r3
100106ac:	4b66      	ldr	r3, [pc, #408]	; (10010848 <ble_pair_key_request_handler+0x214>)
100106ae:	0018      	movs	r0, r3
100106b0:	4b63      	ldr	r3, [pc, #396]	; (10010840 <ble_pair_key_request_handler+0x20c>)
100106b2:	4798      	blx	r3
				DBG_LOG("Disconnecting ...");
100106b4:	4b5f      	ldr	r3, [pc, #380]	; (10010834 <ble_pair_key_request_handler+0x200>)
100106b6:	0018      	movs	r0, r3
100106b8:	4b5f      	ldr	r3, [pc, #380]	; (10010838 <ble_pair_key_request_handler+0x204>)
100106ba:	4798      	blx	r3
100106bc:	4b63      	ldr	r3, [pc, #396]	; (1001084c <ble_pair_key_request_handler+0x218>)
100106be:	0018      	movs	r0, r3
100106c0:	4b5f      	ldr	r3, [pc, #380]	; (10010840 <ble_pair_key_request_handler+0x20c>)
100106c2:	4798      	blx	r3
				if (!(at_ble_disconnect(pair_key->handle,
100106c4:	69bb      	ldr	r3, [r7, #24]
100106c6:	881b      	ldrh	r3, [r3, #0]
100106c8:	2113      	movs	r1, #19
100106ca:	0018      	movs	r0, r3
100106cc:	4b60      	ldr	r3, [pc, #384]	; (10010850 <ble_pair_key_request_handler+0x21c>)
100106ce:	4798      	blx	r3
100106d0:	1e03      	subs	r3, r0, #0
100106d2:	d007      	beq.n	100106e4 <ble_pair_key_request_handler+0xb0>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
100106d4:	4b57      	ldr	r3, [pc, #348]	; (10010834 <ble_pair_key_request_handler+0x200>)
100106d6:	0018      	movs	r0, r3
100106d8:	4b57      	ldr	r3, [pc, #348]	; (10010838 <ble_pair_key_request_handler+0x204>)
100106da:	4798      	blx	r3
100106dc:	4b5d      	ldr	r3, [pc, #372]	; (10010854 <ble_pair_key_request_handler+0x220>)
100106de:	0018      	movs	r0, r3
100106e0:	4b57      	ldr	r3, [pc, #348]	; (10010840 <ble_pair_key_request_handler+0x20c>)
100106e2:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
100106e4:	23e2      	movs	r3, #226	; 0xe2
100106e6:	e09c      	b.n	10010822 <ble_pair_key_request_handler+0x1ee>
100106e8:	231f      	movs	r3, #31
100106ea:	18fb      	adds	r3, r7, r3
100106ec:	221f      	movs	r2, #31
100106ee:	18ba      	adds	r2, r7, r2
100106f0:	7812      	ldrb	r2, [r2, #0]
100106f2:	701a      	strb	r2, [r3, #0]
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
100106f4:	2317      	movs	r3, #23
100106f6:	18fb      	adds	r3, r7, r3
100106f8:	781b      	ldrb	r3, [r3, #0]
100106fa:	2b2f      	cmp	r3, #47	; 0x2f
100106fc:	d91e      	bls.n	1001073c <ble_pair_key_request_handler+0x108>
100106fe:	231f      	movs	r3, #31
10010700:	18fb      	adds	r3, r7, r3
10010702:	221f      	movs	r2, #31
10010704:	18ba      	adds	r2, r7, r2
10010706:	7812      	ldrb	r2, [r2, #0]
10010708:	701a      	strb	r2, [r3, #0]
1001070a:	2317      	movs	r3, #23
1001070c:	18fb      	adds	r3, r7, r3
1001070e:	781b      	ldrb	r3, [r3, #0]
10010710:	2b39      	cmp	r3, #57	; 0x39
10010712:	d813      	bhi.n	1001073c <ble_pair_key_request_handler+0x108>
			  passkey[idx++] = pin;
10010714:	231f      	movs	r3, #31
10010716:	18fb      	adds	r3, r7, r3
10010718:	781b      	ldrb	r3, [r3, #0]
1001071a:	221f      	movs	r2, #31
1001071c:	18ba      	adds	r2, r7, r2
1001071e:	1c59      	adds	r1, r3, #1
10010720:	7011      	strb	r1, [r2, #0]
10010722:	0019      	movs	r1, r3
10010724:	2310      	movs	r3, #16
10010726:	18fb      	adds	r3, r7, r3
10010728:	2217      	movs	r2, #23
1001072a:	18ba      	adds	r2, r7, r2
1001072c:	7812      	ldrb	r2, [r2, #0]
1001072e:	545a      	strb	r2, [r3, r1]
			  DBG_LOG_CONT("%c", pin);
10010730:	2317      	movs	r3, #23
10010732:	18fb      	adds	r3, r7, r3
10010734:	781b      	ldrb	r3, [r3, #0]
10010736:	0018      	movs	r0, r3
10010738:	4b47      	ldr	r3, [pc, #284]	; (10010858 <ble_pair_key_request_handler+0x224>)
1001073a:	4798      	blx	r3
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1001073c:	231f      	movs	r3, #31
1001073e:	18fb      	adds	r3, r7, r3
10010740:	781b      	ldrb	r3, [r3, #0]
10010742:	2b05      	cmp	r3, #5
10010744:	d9a2      	bls.n	1001068c <ble_pair_key_request_handler+0x58>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10010746:	230c      	movs	r3, #12
10010748:	18fb      	adds	r3, r7, r3
1001074a:	78db      	ldrb	r3, [r3, #3]
1001074c:	2b01      	cmp	r3, #1
1001074e:	d104      	bne.n	1001075a <ble_pair_key_request_handler+0x126>
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
10010750:	230c      	movs	r3, #12
10010752:	18fb      	adds	r3, r7, r3
10010754:	789b      	ldrb	r3, [r3, #2]
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10010756:	2b00      	cmp	r3, #0
10010758:	d004      	beq.n	10010764 <ble_pair_key_request_handler+0x130>
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
1001075a:	230c      	movs	r3, #12
1001075c:	18fb      	adds	r3, r7, r3
1001075e:	78db      	ldrb	r3, [r3, #3]
10010760:	2b00      	cmp	r3, #0
10010762:	d150      	bne.n	10010806 <ble_pair_key_request_handler+0x1d2>
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
10010764:	230c      	movs	r3, #12
10010766:	18fb      	adds	r3, r7, r3
10010768:	78db      	ldrb	r3, [r3, #3]
1001076a:	2b00      	cmp	r3, #0
1001076c:	d108      	bne.n	10010780 <ble_pair_key_request_handler+0x14c>
          {
            DBG_LOG("Entered Pass-code:");
1001076e:	4b31      	ldr	r3, [pc, #196]	; (10010834 <ble_pair_key_request_handler+0x200>)
10010770:	0018      	movs	r0, r3
10010772:	4b31      	ldr	r3, [pc, #196]	; (10010838 <ble_pair_key_request_handler+0x204>)
10010774:	4798      	blx	r3
10010776:	4b39      	ldr	r3, [pc, #228]	; (1001085c <ble_pair_key_request_handler+0x228>)
10010778:	0018      	movs	r0, r3
1001077a:	4b31      	ldr	r3, [pc, #196]	; (10010840 <ble_pair_key_request_handler+0x20c>)
1001077c:	4798      	blx	r3
1001077e:	e007      	b.n	10010790 <ble_pair_key_request_handler+0x15c>
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10010780:	4b2c      	ldr	r3, [pc, #176]	; (10010834 <ble_pair_key_request_handler+0x200>)
10010782:	0018      	movs	r0, r3
10010784:	4b2c      	ldr	r3, [pc, #176]	; (10010838 <ble_pair_key_request_handler+0x204>)
10010786:	4798      	blx	r3
10010788:	4b35      	ldr	r3, [pc, #212]	; (10010860 <ble_pair_key_request_handler+0x22c>)
1001078a:	0018      	movs	r0, r3
1001078c:	4b2c      	ldr	r3, [pc, #176]	; (10010840 <ble_pair_key_request_handler+0x20c>)
1001078e:	4798      	blx	r3
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10010790:	231f      	movs	r3, #31
10010792:	18fb      	adds	r3, r7, r3
10010794:	2200      	movs	r2, #0
10010796:	701a      	strb	r2, [r3, #0]
10010798:	e01b      	b.n	100107d2 <ble_pair_key_request_handler+0x19e>
          {
                  passkey[idx] = (passkey[idx]);
1001079a:	231f      	movs	r3, #31
1001079c:	18fb      	adds	r3, r7, r3
1001079e:	781b      	ldrb	r3, [r3, #0]
100107a0:	221f      	movs	r2, #31
100107a2:	18ba      	adds	r2, r7, r2
100107a4:	7812      	ldrb	r2, [r2, #0]
100107a6:	2110      	movs	r1, #16
100107a8:	1879      	adds	r1, r7, r1
100107aa:	5c89      	ldrb	r1, [r1, r2]
100107ac:	2210      	movs	r2, #16
100107ae:	18ba      	adds	r2, r7, r2
100107b0:	54d1      	strb	r1, [r2, r3]
                  DBG_LOG_CONT("%c",passkey[idx]);
100107b2:	231f      	movs	r3, #31
100107b4:	18fb      	adds	r3, r7, r3
100107b6:	781b      	ldrb	r3, [r3, #0]
100107b8:	2210      	movs	r2, #16
100107ba:	18ba      	adds	r2, r7, r2
100107bc:	5cd3      	ldrb	r3, [r2, r3]
100107be:	0018      	movs	r0, r3
100107c0:	4b25      	ldr	r3, [pc, #148]	; (10010858 <ble_pair_key_request_handler+0x224>)
100107c2:	4798      	blx	r3
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
100107c4:	231f      	movs	r3, #31
100107c6:	18fb      	adds	r3, r7, r3
100107c8:	781a      	ldrb	r2, [r3, #0]
100107ca:	231f      	movs	r3, #31
100107cc:	18fb      	adds	r3, r7, r3
100107ce:	3201      	adds	r2, #1
100107d0:	701a      	strb	r2, [r3, #0]
100107d2:	231f      	movs	r3, #31
100107d4:	18fb      	adds	r3, r7, r3
100107d6:	781b      	ldrb	r3, [r3, #0]
100107d8:	2b05      	cmp	r3, #5
100107da:	d9de      	bls.n	1001079a <ble_pair_key_request_handler+0x166>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
100107dc:	69bb      	ldr	r3, [r7, #24]
100107de:	8818      	ldrh	r0, [r3, #0]
100107e0:	230c      	movs	r3, #12
100107e2:	18fb      	adds	r3, r7, r3
100107e4:	789b      	ldrb	r3, [r3, #2]
100107e6:	2210      	movs	r2, #16
100107e8:	18ba      	adds	r2, r7, r2
100107ea:	0019      	movs	r1, r3
100107ec:	4b1d      	ldr	r3, [pc, #116]	; (10010864 <ble_pair_key_request_handler+0x230>)
100107ee:	4798      	blx	r3
100107f0:	1e03      	subs	r3, r0, #0
100107f2:	d015      	beq.n	10010820 <ble_pair_key_request_handler+0x1ec>
          {
                  DBG_LOG("Pair-key reply failed");
100107f4:	4b0f      	ldr	r3, [pc, #60]	; (10010834 <ble_pair_key_request_handler+0x200>)
100107f6:	0018      	movs	r0, r3
100107f8:	4b0f      	ldr	r3, [pc, #60]	; (10010838 <ble_pair_key_request_handler+0x204>)
100107fa:	4798      	blx	r3
100107fc:	4b1a      	ldr	r3, [pc, #104]	; (10010868 <ble_pair_key_request_handler+0x234>)
100107fe:	0018      	movs	r0, r3
10010800:	4b0f      	ldr	r3, [pc, #60]	; (10010840 <ble_pair_key_request_handler+0x20c>)
10010802:	4798      	blx	r3
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
10010804:	e00c      	b.n	10010820 <ble_pair_key_request_handler+0x1ec>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10010806:	230c      	movs	r3, #12
10010808:	18fb      	adds	r3, r7, r3
1001080a:	789b      	ldrb	r3, [r3, #2]
1001080c:	2b01      	cmp	r3, #1
1001080e:	d107      	bne.n	10010820 <ble_pair_key_request_handler+0x1ec>
		{
			DBG_LOG("OOB Feature Not supported");
10010810:	4b08      	ldr	r3, [pc, #32]	; (10010834 <ble_pair_key_request_handler+0x200>)
10010812:	0018      	movs	r0, r3
10010814:	4b08      	ldr	r3, [pc, #32]	; (10010838 <ble_pair_key_request_handler+0x204>)
10010816:	4798      	blx	r3
10010818:	4b14      	ldr	r3, [pc, #80]	; (1001086c <ble_pair_key_request_handler+0x238>)
1001081a:	0018      	movs	r0, r3
1001081c:	4b08      	ldr	r3, [pc, #32]	; (10010840 <ble_pair_key_request_handler+0x20c>)
1001081e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10010820:	2300      	movs	r3, #0
}
10010822:	0018      	movs	r0, r3
10010824:	46bd      	mov	sp, r7
10010826:	b008      	add	sp, #32
10010828:	bd80      	pop	{r7, pc}
1001082a:	46c0      	nop			; (mov r8, r8)
1001082c:	1001956c 	.word	0x1001956c
10010830:	10017317 	.word	0x10017317
10010834:	100192e0 	.word	0x100192e0
10010838:	10017591 	.word	0x10017591
1001083c:	10019488 	.word	0x10019488
10010840:	10017471 	.word	0x10017471
10010844:	10011295 	.word	0x10011295
10010848:	100194b0 	.word	0x100194b0
1001084c:	100194bc 	.word	0x100194bc
10010850:	10012ff1 	.word	0x10012ff1
10010854:	100194d0 	.word	0x100194d0
10010858:	100174a5 	.word	0x100174a5
1001085c:	100194ec 	.word	0x100194ec
10010860:	10019500 	.word	0x10019500
10010864:	10013a8d 	.word	0x10013a8d
10010868:	10019538 	.word	0x10019538
1001086c:	10019550 	.word	0x10019550

10010870 <ble_pair_done_handler>:

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10010870:	b580      	push	{r7, lr}
10010872:	b084      	sub	sp, #16
10010874:	af00      	add	r7, sp, #0
10010876:	6078      	str	r0, [r7, #4]
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
10010878:	230e      	movs	r3, #14
1001087a:	18fb      	adds	r3, r7, r3
1001087c:	2200      	movs	r2, #0
1001087e:	701a      	strb	r2, [r3, #0]
	pairing_params = (at_ble_pair_done_t *)params;
10010880:	687b      	ldr	r3, [r7, #4]
10010882:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010884:	230f      	movs	r3, #15
10010886:	18fb      	adds	r3, r7, r3
10010888:	2200      	movs	r2, #0
1001088a:	701a      	strb	r2, [r3, #0]
1001088c:	e028      	b.n	100108e0 <ble_pair_done_handler+0x70>
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1001088e:	230f      	movs	r3, #15
10010890:	18fb      	adds	r3, r7, r3
10010892:	781a      	ldrb	r2, [r3, #0]
10010894:	496c      	ldr	r1, [pc, #432]	; (10010a48 <ble_pair_done_handler+0x1d8>)
10010896:	0013      	movs	r3, r2
10010898:	015b      	lsls	r3, r3, #5
1001089a:	1a9b      	subs	r3, r3, r2
1001089c:	009b      	lsls	r3, r3, #2
1001089e:	18cb      	adds	r3, r1, r3
100108a0:	3308      	adds	r3, #8
100108a2:	881a      	ldrh	r2, [r3, #0]
100108a4:	68bb      	ldr	r3, [r7, #8]
100108a6:	885b      	ldrh	r3, [r3, #2]
100108a8:	429a      	cmp	r2, r3
100108aa:	d112      	bne.n	100108d2 <ble_pair_done_handler+0x62>
100108ac:	230f      	movs	r3, #15
100108ae:	18fb      	adds	r3, r7, r3
100108b0:	781a      	ldrb	r2, [r3, #0]
100108b2:	4965      	ldr	r1, [pc, #404]	; (10010a48 <ble_pair_done_handler+0x1d8>)
100108b4:	205e      	movs	r0, #94	; 0x5e
100108b6:	0013      	movs	r3, r2
100108b8:	015b      	lsls	r3, r3, #5
100108ba:	1a9b      	subs	r3, r3, r2
100108bc:	009b      	lsls	r3, r3, #2
100108be:	18cb      	adds	r3, r1, r3
100108c0:	181b      	adds	r3, r3, r0
100108c2:	781b      	ldrb	r3, [r3, #0]
100108c4:	2b03      	cmp	r3, #3
100108c6:	d104      	bne.n	100108d2 <ble_pair_done_handler+0x62>
		{
			device_found = true;
100108c8:	230e      	movs	r3, #14
100108ca:	18fb      	adds	r3, r7, r3
100108cc:	2201      	movs	r2, #1
100108ce:	701a      	strb	r2, [r3, #0]
			break;
100108d0:	e00b      	b.n	100108ea <ble_pair_done_handler+0x7a>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100108d2:	230f      	movs	r3, #15
100108d4:	18fb      	adds	r3, r7, r3
100108d6:	781a      	ldrb	r2, [r3, #0]
100108d8:	230f      	movs	r3, #15
100108da:	18fb      	adds	r3, r7, r3
100108dc:	3201      	adds	r2, #1
100108de:	701a      	strb	r2, [r3, #0]
100108e0:	230f      	movs	r3, #15
100108e2:	18fb      	adds	r3, r7, r3
100108e4:	781b      	ldrb	r3, [r3, #0]
100108e6:	2b04      	cmp	r3, #4
100108e8:	d9d1      	bls.n	1001088e <ble_pair_done_handler+0x1e>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
100108ea:	68bb      	ldr	r3, [r7, #8]
100108ec:	791b      	ldrb	r3, [r3, #4]
100108ee:	2b00      	cmp	r3, #0
100108f0:	d16f      	bne.n	100109d2 <ble_pair_done_handler+0x162>
	{
		//DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
100108f2:	230e      	movs	r3, #14
100108f4:	18fb      	adds	r3, r7, r3
100108f6:	781b      	ldrb	r3, [r3, #0]
100108f8:	2b00      	cmp	r3, #0
100108fa:	d060      	beq.n	100109be <ble_pair_done_handler+0x14e>
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
100108fc:	230f      	movs	r3, #15
100108fe:	18fb      	adds	r3, r7, r3
10010900:	781a      	ldrb	r2, [r3, #0]
10010902:	68bb      	ldr	r3, [r7, #8]
10010904:	7818      	ldrb	r0, [r3, #0]
10010906:	4950      	ldr	r1, [pc, #320]	; (10010a48 <ble_pair_done_handler+0x1d8>)
10010908:	0013      	movs	r3, r2
1001090a:	015b      	lsls	r3, r3, #5
1001090c:	1a9b      	subs	r3, r3, r2
1001090e:	009b      	lsls	r3, r3, #2
10010910:	18cb      	adds	r3, r1, r3
10010912:	3314      	adds	r3, #20
10010914:	1c02      	adds	r2, r0, #0
10010916:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10010918:	230f      	movs	r3, #15
1001091a:	18fb      	adds	r3, r7, r3
1001091c:	781a      	ldrb	r2, [r3, #0]
1001091e:	68bb      	ldr	r3, [r7, #8]
10010920:	7918      	ldrb	r0, [r3, #4]
10010922:	4949      	ldr	r1, [pc, #292]	; (10010a48 <ble_pair_done_handler+0x1d8>)
10010924:	0013      	movs	r3, r2
10010926:	015b      	lsls	r3, r3, #5
10010928:	1a9b      	subs	r3, r3, r2
1001092a:	009b      	lsls	r3, r3, #2
1001092c:	18cb      	adds	r3, r1, r3
1001092e:	3318      	adds	r3, #24
10010930:	1c02      	adds	r2, r0, #0
10010932:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10010934:	230f      	movs	r3, #15
10010936:	18fb      	adds	r3, r7, r3
10010938:	781a      	ldrb	r2, [r3, #0]
1001093a:	4943      	ldr	r1, [pc, #268]	; (10010a48 <ble_pair_done_handler+0x1d8>)
1001093c:	205e      	movs	r0, #94	; 0x5e
1001093e:	0013      	movs	r3, r2
10010940:	015b      	lsls	r3, r3, #5
10010942:	1a9b      	subs	r3, r3, r2
10010944:	009b      	lsls	r3, r3, #2
10010946:	18cb      	adds	r3, r1, r3
10010948:	181b      	adds	r3, r3, r0
1001094a:	2205      	movs	r2, #5
1001094c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1001094e:	230f      	movs	r3, #15
10010950:	18fb      	adds	r3, r7, r3
10010952:	781a      	ldrb	r2, [r3, #0]
10010954:	0013      	movs	r3, r2
10010956:	015b      	lsls	r3, r3, #5
10010958:	1a9b      	subs	r3, r3, r2
1001095a:	009b      	lsls	r3, r3, #2
1001095c:	3330      	adds	r3, #48	; 0x30
1001095e:	001a      	movs	r2, r3
10010960:	4b39      	ldr	r3, [pc, #228]	; (10010a48 <ble_pair_done_handler+0x1d8>)
10010962:	18d3      	adds	r3, r2, r3
10010964:	1d98      	adds	r0, r3, #6
10010966:	68bb      	ldr	r3, [r7, #8]
10010968:	3322      	adds	r3, #34	; 0x22
1001096a:	2210      	movs	r2, #16
1001096c:	0019      	movs	r1, r3
1001096e:	4b37      	ldr	r3, [pc, #220]	; (10010a4c <ble_pair_done_handler+0x1dc>)
10010970:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10010972:	230f      	movs	r3, #15
10010974:	18fb      	adds	r3, r7, r3
10010976:	781a      	ldrb	r2, [r3, #0]
10010978:	0013      	movs	r3, r2
1001097a:	015b      	lsls	r3, r3, #5
1001097c:	1a9b      	subs	r3, r3, r2
1001097e:	009b      	lsls	r3, r3, #2
10010980:	3340      	adds	r3, #64	; 0x40
10010982:	001a      	movs	r2, r3
10010984:	4b30      	ldr	r3, [pc, #192]	; (10010a48 <ble_pair_done_handler+0x1d8>)
10010986:	18d3      	adds	r3, r2, r3
10010988:	1d98      	adds	r0, r3, #6
1001098a:	68bb      	ldr	r3, [r7, #8]
1001098c:	3332      	adds	r3, #50	; 0x32
1001098e:	2217      	movs	r2, #23
10010990:	0019      	movs	r1, r3
10010992:	4b2e      	ldr	r3, [pc, #184]	; (10010a4c <ble_pair_done_handler+0x1dc>)
10010994:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10010996:	230f      	movs	r3, #15
10010998:	18fb      	adds	r3, r7, r3
1001099a:	781a      	ldrb	r2, [r3, #0]
1001099c:	0013      	movs	r3, r2
1001099e:	015b      	lsls	r3, r3, #5
100109a0:	1a9b      	subs	r3, r3, r2
100109a2:	009b      	lsls	r3, r3, #2
100109a4:	3310      	adds	r3, #16
100109a6:	001a      	movs	r2, r3
100109a8:	4b27      	ldr	r3, [pc, #156]	; (10010a48 <ble_pair_done_handler+0x1d8>)
100109aa:	18d3      	adds	r3, r2, r3
100109ac:	330a      	adds	r3, #10
100109ae:	0018      	movs	r0, r3
100109b0:	68bb      	ldr	r3, [r7, #8]
100109b2:	3306      	adds	r3, #6
100109b4:	221c      	movs	r2, #28
100109b6:	0019      	movs	r1, r3
100109b8:	4b24      	ldr	r3, [pc, #144]	; (10010a4c <ble_pair_done_handler+0x1dc>)
100109ba:	4798      	blx	r3
100109bc:	e03f      	b.n	10010a3e <ble_pair_done_handler+0x1ce>
				//DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
			//}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
100109be:	4b24      	ldr	r3, [pc, #144]	; (10010a50 <ble_pair_done_handler+0x1e0>)
100109c0:	0018      	movs	r0, r3
100109c2:	4b24      	ldr	r3, [pc, #144]	; (10010a54 <ble_pair_done_handler+0x1e4>)
100109c4:	4798      	blx	r3
100109c6:	4b24      	ldr	r3, [pc, #144]	; (10010a58 <ble_pair_done_handler+0x1e8>)
100109c8:	0018      	movs	r0, r3
100109ca:	4b24      	ldr	r3, [pc, #144]	; (10010a5c <ble_pair_done_handler+0x1ec>)
100109cc:	4798      	blx	r3
			return AT_BLE_FAILURE;
100109ce:	23e2      	movs	r3, #226	; 0xe2
100109d0:	e036      	b.n	10010a40 <ble_pair_done_handler+0x1d0>
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
100109d2:	230f      	movs	r3, #15
100109d4:	18fb      	adds	r3, r7, r3
100109d6:	781a      	ldrb	r2, [r3, #0]
100109d8:	491b      	ldr	r1, [pc, #108]	; (10010a48 <ble_pair_done_handler+0x1d8>)
100109da:	205e      	movs	r0, #94	; 0x5e
100109dc:	0013      	movs	r3, r2
100109de:	015b      	lsls	r3, r3, #5
100109e0:	1a9b      	subs	r3, r3, r2
100109e2:	009b      	lsls	r3, r3, #2
100109e4:	18cb      	adds	r3, r1, r3
100109e6:	181b      	adds	r3, r3, r0
100109e8:	781b      	ldrb	r3, [r3, #0]
100109ea:	2b00      	cmp	r3, #0
100109ec:	d027      	beq.n	10010a3e <ble_pair_done_handler+0x1ce>
100109ee:	230f      	movs	r3, #15
100109f0:	18fb      	adds	r3, r7, r3
100109f2:	781a      	ldrb	r2, [r3, #0]
100109f4:	4914      	ldr	r1, [pc, #80]	; (10010a48 <ble_pair_done_handler+0x1d8>)
100109f6:	205e      	movs	r0, #94	; 0x5e
100109f8:	0013      	movs	r3, r2
100109fa:	015b      	lsls	r3, r3, #5
100109fc:	1a9b      	subs	r3, r3, r2
100109fe:	009b      	lsls	r3, r3, #2
10010a00:	18cb      	adds	r3, r1, r3
10010a02:	181b      	adds	r3, r3, r0
10010a04:	781b      	ldrb	r3, [r3, #0]
10010a06:	2b01      	cmp	r3, #1
10010a08:	d019      	beq.n	10010a3e <ble_pair_done_handler+0x1ce>
			DBG_LOG("Pairing failed...Disconnecting");
10010a0a:	4b11      	ldr	r3, [pc, #68]	; (10010a50 <ble_pair_done_handler+0x1e0>)
10010a0c:	0018      	movs	r0, r3
10010a0e:	4b11      	ldr	r3, [pc, #68]	; (10010a54 <ble_pair_done_handler+0x1e4>)
10010a10:	4798      	blx	r3
10010a12:	4b13      	ldr	r3, [pc, #76]	; (10010a60 <ble_pair_done_handler+0x1f0>)
10010a14:	0018      	movs	r0, r3
10010a16:	4b11      	ldr	r3, [pc, #68]	; (10010a5c <ble_pair_done_handler+0x1ec>)
10010a18:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10010a1a:	68bb      	ldr	r3, [r7, #8]
10010a1c:	885b      	ldrh	r3, [r3, #2]
10010a1e:	2113      	movs	r1, #19
10010a20:	0018      	movs	r0, r3
10010a22:	4b10      	ldr	r3, [pc, #64]	; (10010a64 <ble_pair_done_handler+0x1f4>)
10010a24:	4798      	blx	r3
10010a26:	1e03      	subs	r3, r0, #0
10010a28:	d009      	beq.n	10010a3e <ble_pair_done_handler+0x1ce>
			{
				DBG_LOG("Disconnect Request Failed");
10010a2a:	4b09      	ldr	r3, [pc, #36]	; (10010a50 <ble_pair_done_handler+0x1e0>)
10010a2c:	0018      	movs	r0, r3
10010a2e:	4b09      	ldr	r3, [pc, #36]	; (10010a54 <ble_pair_done_handler+0x1e4>)
10010a30:	4798      	blx	r3
10010a32:	4b0d      	ldr	r3, [pc, #52]	; (10010a68 <ble_pair_done_handler+0x1f8>)
10010a34:	0018      	movs	r0, r3
10010a36:	4b09      	ldr	r3, [pc, #36]	; (10010a5c <ble_pair_done_handler+0x1ec>)
10010a38:	4798      	blx	r3
				return AT_BLE_FAILURE;
10010a3a:	23e2      	movs	r3, #226	; 0xe2
10010a3c:	e000      	b.n	10010a40 <ble_pair_done_handler+0x1d0>
			}
		}
	}
	return AT_BLE_SUCCESS;
10010a3e:	2300      	movs	r3, #0
}
10010a40:	0018      	movs	r0, r3
10010a42:	46bd      	mov	sp, r7
10010a44:	b004      	add	sp, #16
10010a46:	bd80      	pop	{r7, pc}
10010a48:	1001a590 	.word	0x1001a590
10010a4c:	10017317 	.word	0x10017317
10010a50:	100192e0 	.word	0x100192e0
10010a54:	10017591 	.word	0x10017591
10010a58:	10019574 	.word	0x10019574
10010a5c:	10017471 	.word	0x10017471
10010a60:	100195a4 	.word	0x100195a4
10010a64:	10012ff1 	.word	0x10012ff1
10010a68:	100194d0 	.word	0x100194d0

10010a6c <ble_encryption_status_change_handler>:

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10010a6c:	b580      	push	{r7, lr}
10010a6e:	b084      	sub	sp, #16
10010a70:	af00      	add	r7, sp, #0
10010a72:	6078      	str	r0, [r7, #4]
	at_ble_encryption_status_changed_t *enc_status;
	uint8_t idx;
	bool device_found = false;
10010a74:	230e      	movs	r3, #14
10010a76:	18fb      	adds	r3, r7, r3
10010a78:	2200      	movs	r2, #0
10010a7a:	701a      	strb	r2, [r3, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
10010a7c:	687b      	ldr	r3, [r7, #4]
10010a7e:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010a80:	230f      	movs	r3, #15
10010a82:	18fb      	adds	r3, r7, r3
10010a84:	2200      	movs	r2, #0
10010a86:	701a      	strb	r2, [r3, #0]
10010a88:	e028      	b.n	10010adc <ble_encryption_status_change_handler+0x70>
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10010a8a:	230f      	movs	r3, #15
10010a8c:	18fb      	adds	r3, r7, r3
10010a8e:	781a      	ldrb	r2, [r3, #0]
10010a90:	494c      	ldr	r1, [pc, #304]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010a92:	0013      	movs	r3, r2
10010a94:	015b      	lsls	r3, r3, #5
10010a96:	1a9b      	subs	r3, r3, r2
10010a98:	009b      	lsls	r3, r3, #2
10010a9a:	18cb      	adds	r3, r1, r3
10010a9c:	3308      	adds	r3, #8
10010a9e:	881a      	ldrh	r2, [r3, #0]
10010aa0:	68bb      	ldr	r3, [r7, #8]
10010aa2:	881b      	ldrh	r3, [r3, #0]
10010aa4:	429a      	cmp	r2, r3
10010aa6:	d112      	bne.n	10010ace <ble_encryption_status_change_handler+0x62>
10010aa8:	230f      	movs	r3, #15
10010aaa:	18fb      	adds	r3, r7, r3
10010aac:	781a      	ldrb	r2, [r3, #0]
10010aae:	4945      	ldr	r1, [pc, #276]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010ab0:	205e      	movs	r0, #94	; 0x5e
10010ab2:	0013      	movs	r3, r2
10010ab4:	015b      	lsls	r3, r3, #5
10010ab6:	1a9b      	subs	r3, r3, r2
10010ab8:	009b      	lsls	r3, r3, #2
10010aba:	18cb      	adds	r3, r1, r3
10010abc:	181b      	adds	r3, r3, r0
10010abe:	781b      	ldrb	r3, [r3, #0]
10010ac0:	2b06      	cmp	r3, #6
10010ac2:	d104      	bne.n	10010ace <ble_encryption_status_change_handler+0x62>
		{
			device_found = true;
10010ac4:	230e      	movs	r3, #14
10010ac6:	18fb      	adds	r3, r7, r3
10010ac8:	2201      	movs	r2, #1
10010aca:	701a      	strb	r2, [r3, #0]
			break;
10010acc:	e00b      	b.n	10010ae6 <ble_encryption_status_change_handler+0x7a>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010ace:	230f      	movs	r3, #15
10010ad0:	18fb      	adds	r3, r7, r3
10010ad2:	781a      	ldrb	r2, [r3, #0]
10010ad4:	230f      	movs	r3, #15
10010ad6:	18fb      	adds	r3, r7, r3
10010ad8:	3201      	adds	r2, #1
10010ada:	701a      	strb	r2, [r3, #0]
10010adc:	230f      	movs	r3, #15
10010ade:	18fb      	adds	r3, r7, r3
10010ae0:	781b      	ldrb	r3, [r3, #0]
10010ae2:	2b04      	cmp	r3, #4
10010ae4:	d9d1      	bls.n	10010a8a <ble_encryption_status_change_handler+0x1e>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10010ae6:	68bb      	ldr	r3, [r7, #8]
10010ae8:	789b      	ldrb	r3, [r3, #2]
10010aea:	2b00      	cmp	r3, #0
10010aec:	d141      	bne.n	10010b72 <ble_encryption_status_change_handler+0x106>
	{
		DBG_LOG("Encryption completed successfully");
10010aee:	4b36      	ldr	r3, [pc, #216]	; (10010bc8 <ble_encryption_status_change_handler+0x15c>)
10010af0:	0018      	movs	r0, r3
10010af2:	4b36      	ldr	r3, [pc, #216]	; (10010bcc <ble_encryption_status_change_handler+0x160>)
10010af4:	4798      	blx	r3
10010af6:	4b36      	ldr	r3, [pc, #216]	; (10010bd0 <ble_encryption_status_change_handler+0x164>)
10010af8:	0018      	movs	r0, r3
10010afa:	4b36      	ldr	r3, [pc, #216]	; (10010bd4 <ble_encryption_status_change_handler+0x168>)
10010afc:	4798      	blx	r3
		if (device_found)
10010afe:	230e      	movs	r3, #14
10010b00:	18fb      	adds	r3, r7, r3
10010b02:	781b      	ldrb	r3, [r3, #0]
10010b04:	2b00      	cmp	r3, #0
10010b06:	d02a      	beq.n	10010b5e <ble_encryption_status_change_handler+0xf2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10010b08:	230f      	movs	r3, #15
10010b0a:	18fb      	adds	r3, r7, r3
10010b0c:	781a      	ldrb	r2, [r3, #0]
10010b0e:	492d      	ldr	r1, [pc, #180]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010b10:	205e      	movs	r0, #94	; 0x5e
10010b12:	0013      	movs	r3, r2
10010b14:	015b      	lsls	r3, r3, #5
10010b16:	1a9b      	subs	r3, r3, r2
10010b18:	009b      	lsls	r3, r3, #2
10010b1a:	18cb      	adds	r3, r1, r3
10010b1c:	181b      	adds	r3, r3, r0
10010b1e:	2208      	movs	r2, #8
10010b20:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10010b22:	230f      	movs	r3, #15
10010b24:	18fb      	adds	r3, r7, r3
10010b26:	781a      	ldrb	r2, [r3, #0]
10010b28:	68bb      	ldr	r3, [r7, #8]
10010b2a:	78d8      	ldrb	r0, [r3, #3]
10010b2c:	4925      	ldr	r1, [pc, #148]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010b2e:	0013      	movs	r3, r2
10010b30:	015b      	lsls	r3, r3, #5
10010b32:	1a9b      	subs	r3, r3, r2
10010b34:	009b      	lsls	r3, r3, #2
10010b36:	18cb      	adds	r3, r1, r3
10010b38:	3314      	adds	r3, #20
10010b3a:	1c02      	adds	r2, r0, #0
10010b3c:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10010b3e:	230f      	movs	r3, #15
10010b40:	18fb      	adds	r3, r7, r3
10010b42:	781a      	ldrb	r2, [r3, #0]
10010b44:	68bb      	ldr	r3, [r7, #8]
10010b46:	7898      	ldrb	r0, [r3, #2]
10010b48:	491e      	ldr	r1, [pc, #120]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010b4a:	0013      	movs	r3, r2
10010b4c:	015b      	lsls	r3, r3, #5
10010b4e:	1a9b      	subs	r3, r3, r2
10010b50:	009b      	lsls	r3, r3, #2
10010b52:	18cb      	adds	r3, r1, r3
10010b54:	3318      	adds	r3, #24
10010b56:	1c02      	adds	r2, r0, #0
10010b58:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10010b5a:	2300      	movs	r3, #0
10010b5c:	e02d      	b.n	10010bba <ble_encryption_status_change_handler+0x14e>
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10010b5e:	4b1a      	ldr	r3, [pc, #104]	; (10010bc8 <ble_encryption_status_change_handler+0x15c>)
10010b60:	0018      	movs	r0, r3
10010b62:	4b1a      	ldr	r3, [pc, #104]	; (10010bcc <ble_encryption_status_change_handler+0x160>)
10010b64:	4798      	blx	r3
10010b66:	4b1c      	ldr	r3, [pc, #112]	; (10010bd8 <ble_encryption_status_change_handler+0x16c>)
10010b68:	0018      	movs	r0, r3
10010b6a:	4b1a      	ldr	r3, [pc, #104]	; (10010bd4 <ble_encryption_status_change_handler+0x168>)
10010b6c:	4798      	blx	r3
			return AT_BLE_FAILURE;
10010b6e:	23e2      	movs	r3, #226	; 0xe2
10010b70:	e023      	b.n	10010bba <ble_encryption_status_change_handler+0x14e>
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10010b72:	230f      	movs	r3, #15
10010b74:	18fb      	adds	r3, r7, r3
10010b76:	781a      	ldrb	r2, [r3, #0]
10010b78:	68bb      	ldr	r3, [r7, #8]
10010b7a:	7898      	ldrb	r0, [r3, #2]
10010b7c:	4911      	ldr	r1, [pc, #68]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010b7e:	0013      	movs	r3, r2
10010b80:	015b      	lsls	r3, r3, #5
10010b82:	1a9b      	subs	r3, r3, r2
10010b84:	009b      	lsls	r3, r3, #2
10010b86:	18cb      	adds	r3, r1, r3
10010b88:	3318      	adds	r3, #24
10010b8a:	1c02      	adds	r2, r0, #0
10010b8c:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10010b8e:	230f      	movs	r3, #15
10010b90:	18fb      	adds	r3, r7, r3
10010b92:	781a      	ldrb	r2, [r3, #0]
10010b94:	490b      	ldr	r1, [pc, #44]	; (10010bc4 <ble_encryption_status_change_handler+0x158>)
10010b96:	205e      	movs	r0, #94	; 0x5e
10010b98:	0013      	movs	r3, r2
10010b9a:	015b      	lsls	r3, r3, #5
10010b9c:	1a9b      	subs	r3, r3, r2
10010b9e:	009b      	lsls	r3, r3, #2
10010ba0:	18cb      	adds	r3, r1, r3
10010ba2:	181b      	adds	r3, r3, r0
10010ba4:	2207      	movs	r2, #7
10010ba6:	701a      	strb	r2, [r3, #0]
		DBG_LOG("Encryption failed");
10010ba8:	4b07      	ldr	r3, [pc, #28]	; (10010bc8 <ble_encryption_status_change_handler+0x15c>)
10010baa:	0018      	movs	r0, r3
10010bac:	4b07      	ldr	r3, [pc, #28]	; (10010bcc <ble_encryption_status_change_handler+0x160>)
10010bae:	4798      	blx	r3
10010bb0:	4b0a      	ldr	r3, [pc, #40]	; (10010bdc <ble_encryption_status_change_handler+0x170>)
10010bb2:	0018      	movs	r0, r3
10010bb4:	4b07      	ldr	r3, [pc, #28]	; (10010bd4 <ble_encryption_status_change_handler+0x168>)
10010bb6:	4798      	blx	r3
		return AT_BLE_FAILURE;
10010bb8:	23e2      	movs	r3, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10010bba:	0018      	movs	r0, r3
10010bbc:	46bd      	mov	sp, r7
10010bbe:	b004      	add	sp, #16
10010bc0:	bd80      	pop	{r7, pc}
10010bc2:	46c0      	nop			; (mov r8, r8)
10010bc4:	1001a590 	.word	0x1001a590
10010bc8:	100192e0 	.word	0x100192e0
10010bcc:	10017591 	.word	0x10017591
10010bd0:	100195c4 	.word	0x100195c4
10010bd4:	10017471 	.word	0x10017471
10010bd8:	100195e8 	.word	0x100195e8
10010bdc:	10019610 	.word	0x10019610

10010be0 <ble_encryption_request_handler>:

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10010be0:	b590      	push	{r4, r7, lr}
10010be2:	b085      	sub	sp, #20
10010be4:	af00      	add	r7, sp, #0
10010be6:	6078      	str	r0, [r7, #4]
	at_ble_encryption_request_t *enc_req;
	bool key_found = false;
10010be8:	230f      	movs	r3, #15
10010bea:	18fb      	adds	r3, r7, r3
10010bec:	2200      	movs	r2, #0
10010bee:	701a      	strb	r2, [r3, #0]
	bool device_found = false;
10010bf0:	230e      	movs	r3, #14
10010bf2:	18fb      	adds	r3, r7, r3
10010bf4:	2200      	movs	r2, #0
10010bf6:	701a      	strb	r2, [r3, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;
10010bf8:	687b      	ldr	r3, [r7, #4]
10010bfa:	60bb      	str	r3, [r7, #8]

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010bfc:	230d      	movs	r3, #13
10010bfe:	18fb      	adds	r3, r7, r3
10010c00:	2200      	movs	r2, #0
10010c02:	701a      	strb	r2, [r3, #0]
10010c04:	e043      	b.n	10010c8e <ble_encryption_request_handler+0xae>
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10010c06:	230d      	movs	r3, #13
10010c08:	18fb      	adds	r3, r7, r3
10010c0a:	781a      	ldrb	r2, [r3, #0]
10010c0c:	4964      	ldr	r1, [pc, #400]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010c0e:	0013      	movs	r3, r2
10010c10:	015b      	lsls	r3, r3, #5
10010c12:	1a9b      	subs	r3, r3, r2
10010c14:	009b      	lsls	r3, r3, #2
10010c16:	18cb      	adds	r3, r1, r3
10010c18:	3308      	adds	r3, #8
10010c1a:	881a      	ldrh	r2, [r3, #0]
10010c1c:	68bb      	ldr	r3, [r7, #8]
10010c1e:	881b      	ldrh	r3, [r3, #0]
10010c20:	429a      	cmp	r2, r3
10010c22:	d12d      	bne.n	10010c80 <ble_encryption_request_handler+0xa0>
10010c24:	230d      	movs	r3, #13
10010c26:	18fb      	adds	r3, r7, r3
10010c28:	781a      	ldrb	r2, [r3, #0]
10010c2a:	495d      	ldr	r1, [pc, #372]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010c2c:	205e      	movs	r0, #94	; 0x5e
10010c2e:	0013      	movs	r3, r2
10010c30:	015b      	lsls	r3, r3, #5
10010c32:	1a9b      	subs	r3, r3, r2
10010c34:	009b      	lsls	r3, r3, #2
10010c36:	18cb      	adds	r3, r1, r3
10010c38:	181b      	adds	r3, r3, r0
10010c3a:	781b      	ldrb	r3, [r3, #0]
10010c3c:	2b01      	cmp	r3, #1
10010c3e:	d01f      	beq.n	10010c80 <ble_encryption_request_handler+0xa0>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
10010c40:	230d      	movs	r3, #13
10010c42:	18fb      	adds	r3, r7, r3
10010c44:	781a      	ldrb	r2, [r3, #0]
10010c46:	4956      	ldr	r1, [pc, #344]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010c48:	205e      	movs	r0, #94	; 0x5e
10010c4a:	0013      	movs	r3, r2
10010c4c:	015b      	lsls	r3, r3, #5
10010c4e:	1a9b      	subs	r3, r3, r2
10010c50:	009b      	lsls	r3, r3, #2
10010c52:	18cb      	adds	r3, r1, r3
10010c54:	181b      	adds	r3, r3, r0
10010c56:	781b      	ldrb	r3, [r3, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10010c58:	2b00      	cmp	r3, #0
10010c5a:	d011      	beq.n	10010c80 <ble_encryption_request_handler+0xa0>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
10010c5c:	230e      	movs	r3, #14
10010c5e:	18fb      	adds	r3, r7, r3
10010c60:	2201      	movs	r2, #1
10010c62:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10010c64:	230d      	movs	r3, #13
10010c66:	18fb      	adds	r3, r7, r3
10010c68:	781a      	ldrb	r2, [r3, #0]
10010c6a:	494d      	ldr	r1, [pc, #308]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010c6c:	205e      	movs	r0, #94	; 0x5e
10010c6e:	0013      	movs	r3, r2
10010c70:	015b      	lsls	r3, r3, #5
10010c72:	1a9b      	subs	r3, r3, r2
10010c74:	009b      	lsls	r3, r3, #2
10010c76:	18cb      	adds	r3, r1, r3
10010c78:	181b      	adds	r3, r3, r0
10010c7a:	2206      	movs	r2, #6
10010c7c:	701a      	strb	r2, [r3, #0]
			//DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
			break;
10010c7e:	e00b      	b.n	10010c98 <ble_encryption_request_handler+0xb8>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010c80:	230d      	movs	r3, #13
10010c82:	18fb      	adds	r3, r7, r3
10010c84:	781a      	ldrb	r2, [r3, #0]
10010c86:	230d      	movs	r3, #13
10010c88:	18fb      	adds	r3, r7, r3
10010c8a:	3201      	adds	r2, #1
10010c8c:	701a      	strb	r2, [r3, #0]
10010c8e:	230d      	movs	r3, #13
10010c90:	18fb      	adds	r3, r7, r3
10010c92:	781b      	ldrb	r3, [r3, #0]
10010c94:	2b04      	cmp	r3, #4
10010c96:	d9b6      	bls.n	10010c06 <ble_encryption_request_handler+0x26>
			//DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
			break;
		}
	}
	
	if (device_found)
10010c98:	230e      	movs	r3, #14
10010c9a:	18fb      	adds	r3, r7, r3
10010c9c:	781b      	ldrb	r3, [r3, #0]
10010c9e:	2b00      	cmp	r3, #0
10010ca0:	d027      	beq.n	10010cf2 <ble_encryption_request_handler+0x112>
	{
		//DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		//DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		//DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		//DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10010ca2:	230d      	movs	r3, #13
10010ca4:	18fb      	adds	r3, r7, r3
10010ca6:	781a      	ldrb	r2, [r3, #0]
10010ca8:	493d      	ldr	r1, [pc, #244]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010caa:	2070      	movs	r0, #112	; 0x70
10010cac:	0013      	movs	r3, r2
10010cae:	015b      	lsls	r3, r3, #5
10010cb0:	1a9b      	subs	r3, r3, r2
10010cb2:	009b      	lsls	r3, r3, #2
10010cb4:	18cb      	adds	r3, r1, r3
10010cb6:	181b      	adds	r3, r3, r0
10010cb8:	881a      	ldrh	r2, [r3, #0]
10010cba:	68bb      	ldr	r3, [r7, #8]
10010cbc:	885b      	ldrh	r3, [r3, #2]
10010cbe:	429a      	cmp	r2, r3
10010cc0:	d117      	bne.n	10010cf2 <ble_encryption_request_handler+0x112>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10010cc2:	68bb      	ldr	r3, [r7, #8]
10010cc4:	1d18      	adds	r0, r3, #4
10010cc6:	230d      	movs	r3, #13
10010cc8:	18fb      	adds	r3, r7, r3
10010cca:	781a      	ldrb	r2, [r3, #0]
10010ccc:	0013      	movs	r3, r2
10010cce:	015b      	lsls	r3, r3, #5
10010cd0:	1a9b      	subs	r3, r3, r2
10010cd2:	009b      	lsls	r3, r3, #2
10010cd4:	3370      	adds	r3, #112	; 0x70
10010cd6:	001a      	movs	r2, r3
10010cd8:	4b31      	ldr	r3, [pc, #196]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010cda:	18d3      	adds	r3, r2, r3
10010cdc:	3302      	adds	r3, #2
10010cde:	2208      	movs	r2, #8
10010ce0:	0019      	movs	r1, r3
10010ce2:	4b30      	ldr	r3, [pc, #192]	; (10010da4 <ble_encryption_request_handler+0x1c4>)
10010ce4:	4798      	blx	r3
10010ce6:	1e03      	subs	r3, r0, #0
10010ce8:	d103      	bne.n	10010cf2 <ble_encryption_request_handler+0x112>
		{
			key_found = true;
10010cea:	230f      	movs	r3, #15
10010cec:	18fb      	adds	r3, r7, r3
10010cee:	2201      	movs	r2, #1
10010cf0:	701a      	strb	r2, [r3, #0]
			//DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10010cf2:	230f      	movs	r3, #15
10010cf4:	18fb      	adds	r3, r7, r3
10010cf6:	781b      	ldrb	r3, [r3, #0]
10010cf8:	2201      	movs	r2, #1
10010cfa:	4053      	eors	r3, r2
10010cfc:	b2db      	uxtb	r3, r3
10010cfe:	2b00      	cmp	r3, #0
10010d00:	d020      	beq.n	10010d44 <ble_encryption_request_handler+0x164>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10010d02:	4b29      	ldr	r3, [pc, #164]	; (10010da8 <ble_encryption_request_handler+0x1c8>)
10010d04:	0018      	movs	r0, r3
10010d06:	4b29      	ldr	r3, [pc, #164]	; (10010dac <ble_encryption_request_handler+0x1cc>)
10010d08:	4798      	blx	r3
10010d0a:	4b29      	ldr	r3, [pc, #164]	; (10010db0 <ble_encryption_request_handler+0x1d0>)
10010d0c:	0018      	movs	r0, r3
10010d0e:	4b29      	ldr	r3, [pc, #164]	; (10010db4 <ble_encryption_request_handler+0x1d4>)
10010d10:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10010d12:	4b25      	ldr	r3, [pc, #148]	; (10010da8 <ble_encryption_request_handler+0x1c8>)
10010d14:	0018      	movs	r0, r3
10010d16:	4b25      	ldr	r3, [pc, #148]	; (10010dac <ble_encryption_request_handler+0x1cc>)
10010d18:	4798      	blx	r3
10010d1a:	4b27      	ldr	r3, [pc, #156]	; (10010db8 <ble_encryption_request_handler+0x1d8>)
10010d1c:	0018      	movs	r0, r3
10010d1e:	4b25      	ldr	r3, [pc, #148]	; (10010db4 <ble_encryption_request_handler+0x1d4>)
10010d20:	4798      	blx	r3
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10010d22:	230d      	movs	r3, #13
10010d24:	18fb      	adds	r3, r7, r3
10010d26:	781a      	ldrb	r2, [r3, #0]
10010d28:	491d      	ldr	r1, [pc, #116]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010d2a:	0013      	movs	r3, r2
10010d2c:	015b      	lsls	r3, r3, #5
10010d2e:	1a9b      	subs	r3, r3, r2
10010d30:	009b      	lsls	r3, r3, #2
10010d32:	18cb      	adds	r3, r1, r3
10010d34:	3308      	adds	r3, #8
10010d36:	881b      	ldrh	r3, [r3, #0]
10010d38:	2105      	movs	r1, #5
10010d3a:	0018      	movs	r0, r3
10010d3c:	4b1f      	ldr	r3, [pc, #124]	; (10010dbc <ble_encryption_request_handler+0x1dc>)
10010d3e:	4798      	blx	r3
		return AT_BLE_FAILURE;
10010d40:	23e2      	movs	r3, #226	; 0xe2
10010d42:	e028      	b.n	10010d96 <ble_encryption_request_handler+0x1b6>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10010d44:	68bb      	ldr	r3, [r7, #8]
10010d46:	8818      	ldrh	r0, [r3, #0]
10010d48:	230d      	movs	r3, #13
10010d4a:	18fb      	adds	r3, r7, r3
10010d4c:	781a      	ldrb	r2, [r3, #0]
10010d4e:	4914      	ldr	r1, [pc, #80]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010d50:	0013      	movs	r3, r2
10010d52:	015b      	lsls	r3, r3, #5
10010d54:	1a9b      	subs	r3, r3, r2
10010d56:	009b      	lsls	r3, r3, #2
10010d58:	18cb      	adds	r3, r1, r3
10010d5a:	3314      	adds	r3, #20
10010d5c:	7819      	ldrb	r1, [r3, #0]
10010d5e:	230d      	movs	r3, #13
10010d60:	18fb      	adds	r3, r7, r3
10010d62:	781a      	ldrb	r2, [r3, #0]
10010d64:	0013      	movs	r3, r2
10010d66:	015b      	lsls	r3, r3, #5
10010d68:	1a9b      	subs	r3, r3, r2
10010d6a:	009b      	lsls	r3, r3, #2
10010d6c:	3360      	adds	r3, #96	; 0x60
10010d6e:	001a      	movs	r2, r3
10010d70:	4b0b      	ldr	r3, [pc, #44]	; (10010da0 <ble_encryption_request_handler+0x1c0>)
10010d72:	18d4      	adds	r4, r2, r3
10010d74:	230f      	movs	r3, #15
10010d76:	18fb      	adds	r3, r7, r3
10010d78:	781a      	ldrb	r2, [r3, #0]
10010d7a:	0023      	movs	r3, r4
10010d7c:	4c10      	ldr	r4, [pc, #64]	; (10010dc0 <ble_encryption_request_handler+0x1e0>)
10010d7e:	47a0      	blx	r4
10010d80:	1e03      	subs	r3, r0, #0
10010d82:	d007      	beq.n	10010d94 <ble_encryption_request_handler+0x1b4>
	{
		DBG_LOG("Encryption Request Reply Failed");
10010d84:	4b08      	ldr	r3, [pc, #32]	; (10010da8 <ble_encryption_request_handler+0x1c8>)
10010d86:	0018      	movs	r0, r3
10010d88:	4b08      	ldr	r3, [pc, #32]	; (10010dac <ble_encryption_request_handler+0x1cc>)
10010d8a:	4798      	blx	r3
10010d8c:	4b0d      	ldr	r3, [pc, #52]	; (10010dc4 <ble_encryption_request_handler+0x1e4>)
10010d8e:	0018      	movs	r0, r3
10010d90:	4b08      	ldr	r3, [pc, #32]	; (10010db4 <ble_encryption_request_handler+0x1d4>)
10010d92:	4798      	blx	r3
	}
	else
	{      
		//DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10010d94:	2300      	movs	r3, #0
}
10010d96:	0018      	movs	r0, r3
10010d98:	46bd      	mov	sp, r7
10010d9a:	b005      	add	sp, #20
10010d9c:	bd90      	pop	{r4, r7, pc}
10010d9e:	46c0      	nop			; (mov r8, r8)
10010da0:	1001a590 	.word	0x1001a590
10010da4:	100172f9 	.word	0x100172f9
10010da8:	100192e0 	.word	0x100192e0
10010dac:	10017591 	.word	0x10017591
10010db0:	10019624 	.word	0x10019624
10010db4:	10017471 	.word	0x10017471
10010db8:	1001965c 	.word	0x1001965c
10010dbc:	10012ff1 	.word	0x10012ff1
10010dc0:	10013bc1 	.word	0x10013bc1
10010dc4:	100196b4 	.word	0x100196b4

10010dc8 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
10010dc8:	b590      	push	{r4, r7, lr}
10010dca:	b097      	sub	sp, #92	; 0x5c
10010dcc:	af00      	add	r7, sp, #0
	uint8_t adv_buf[AT_BLE_ADV_MAX_SIZE];
	uint8_t scn_resp[AT_BLE_ADV_MAX_SIZE];
	adv_element_container_t adv_data_element = {0, NULL};
10010dce:	230c      	movs	r3, #12
10010dd0:	18fb      	adds	r3, r7, r3
10010dd2:	2200      	movs	r2, #0
10010dd4:	701a      	strb	r2, [r3, #0]
10010dd6:	230c      	movs	r3, #12
10010dd8:	18fb      	adds	r3, r7, r3
10010dda:	2200      	movs	r2, #0
10010ddc:	605a      	str	r2, [r3, #4]
	scan_resp_element_t scan_resp_data_element = {0, NULL};
10010dde:	1d3b      	adds	r3, r7, #4
10010de0:	2200      	movs	r2, #0
10010de2:	701a      	strb	r2, [r3, #0]
10010de4:	1d3b      	adds	r3, r7, #4
10010de6:	2200      	movs	r2, #0
10010de8:	605a      	str	r2, [r3, #4]
	adv_data_element.adv_ptr = adv_buf;
10010dea:	230c      	movs	r3, #12
10010dec:	18fb      	adds	r3, r7, r3
10010dee:	2234      	movs	r2, #52	; 0x34
10010df0:	18ba      	adds	r2, r7, r2
10010df2:	605a      	str	r2, [r3, #4]
	scan_resp_data_element.scn_ptr = scn_resp;
10010df4:	1d3b      	adds	r3, r7, #4
10010df6:	2214      	movs	r2, #20
10010df8:	18ba      	adds	r2, r7, r2
10010dfa:	605a      	str	r2, [r3, #4]
	at_ble_status_t status = AT_BLE_SUCCESS;
10010dfc:	2356      	movs	r3, #86	; 0x56
10010dfe:	18fb      	adds	r3, r7, r3
10010e00:	2200      	movs	r2, #0
10010e02:	701a      	strb	r2, [r3, #0]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	DBG_LOG_DEV("BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE");
10010e04:	4b83      	ldr	r3, [pc, #524]	; (10011014 <ble_advertisement_data_set+0x24c>)
10010e06:	0018      	movs	r0, r3
10010e08:	4b83      	ldr	r3, [pc, #524]	; (10011018 <ble_advertisement_data_set+0x250>)
10010e0a:	4798      	blx	r3
10010e0c:	4b83      	ldr	r3, [pc, #524]	; (1001101c <ble_advertisement_data_set+0x254>)
10010e0e:	0018      	movs	r0, r3
10010e10:	4b83      	ldr	r3, [pc, #524]	; (10011020 <ble_advertisement_data_set+0x258>)
10010e12:	4798      	blx	r3
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
10010e14:	230c      	movs	r3, #12
10010e16:	18fb      	adds	r3, r7, r3
10010e18:	781b      	ldrb	r3, [r3, #0]
10010e1a:	2b11      	cmp	r3, #17
10010e1c:	d83b      	bhi.n	10010e96 <ble_advertisement_data_set+0xce>
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
10010e1e:	230c      	movs	r3, #12
10010e20:	18fb      	adds	r3, r7, r3
10010e22:	781b      	ldrb	r3, [r3, #0]
10010e24:	1c5a      	adds	r2, r3, #1
10010e26:	b2d1      	uxtb	r1, r2
10010e28:	220c      	movs	r2, #12
10010e2a:	18ba      	adds	r2, r7, r2
10010e2c:	7011      	strb	r1, [r2, #0]
10010e2e:	001a      	movs	r2, r3
10010e30:	2334      	movs	r3, #52	; 0x34
10010e32:	18fb      	adds	r3, r7, r3
10010e34:	210a      	movs	r1, #10
10010e36:	5499      	strb	r1, [r3, r2]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
10010e38:	230c      	movs	r3, #12
10010e3a:	18fb      	adds	r3, r7, r3
10010e3c:	781b      	ldrb	r3, [r3, #0]
10010e3e:	1c5a      	adds	r2, r3, #1
10010e40:	b2d1      	uxtb	r1, r2
10010e42:	220c      	movs	r2, #12
10010e44:	18ba      	adds	r2, r7, r2
10010e46:	7011      	strb	r1, [r2, #0]
10010e48:	001a      	movs	r2, r3
10010e4a:	2334      	movs	r3, #52	; 0x34
10010e4c:	18fb      	adds	r3, r7, r3
10010e4e:	2109      	movs	r1, #9
10010e50:	5499      	strb	r1, [r3, r2]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
10010e52:	230c      	movs	r3, #12
10010e54:	18fb      	adds	r3, r7, r3
10010e56:	781b      	ldrb	r3, [r3, #0]
10010e58:	001a      	movs	r2, r3
10010e5a:	2334      	movs	r3, #52	; 0x34
10010e5c:	18fb      	adds	r3, r7, r3
10010e5e:	189b      	adds	r3, r3, r2
10010e60:	4970      	ldr	r1, [pc, #448]	; (10011024 <ble_advertisement_data_set+0x25c>)
10010e62:	2209      	movs	r2, #9
10010e64:	0018      	movs	r0, r3
10010e66:	4b70      	ldr	r3, [pc, #448]	; (10011028 <ble_advertisement_data_set+0x260>)
10010e68:	4798      	blx	r3
		adv_data_element.len += BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH;
10010e6a:	230c      	movs	r3, #12
10010e6c:	18fb      	adds	r3, r7, r3
10010e6e:	781b      	ldrb	r3, [r3, #0]
10010e70:	3309      	adds	r3, #9
10010e72:	b2da      	uxtb	r2, r3
10010e74:	230c      	movs	r3, #12
10010e76:	18fb      	adds	r3, r7, r3
10010e78:	701a      	strb	r2, [r3, #0]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	DBG_LOG_DEV("BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE");
10010e7a:	4b66      	ldr	r3, [pc, #408]	; (10011014 <ble_advertisement_data_set+0x24c>)
10010e7c:	0018      	movs	r0, r3
10010e7e:	4b66      	ldr	r3, [pc, #408]	; (10011018 <ble_advertisement_data_set+0x250>)
10010e80:	4798      	blx	r3
10010e82:	4b6a      	ldr	r3, [pc, #424]	; (1001102c <ble_advertisement_data_set+0x264>)
10010e84:	0018      	movs	r0, r3
10010e86:	4b66      	ldr	r3, [pc, #408]	; (10011020 <ble_advertisement_data_set+0x258>)
10010e88:	4798      	blx	r3
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
10010e8a:	230c      	movs	r3, #12
10010e8c:	18fb      	adds	r3, r7, r3
10010e8e:	781b      	ldrb	r3, [r3, #0]
10010e90:	2b12      	cmp	r3, #18
10010e92:	d839      	bhi.n	10010f08 <ble_advertisement_data_set+0x140>
10010e94:	e009      	b.n	10010eaa <ble_advertisement_data_set+0xe2>
	}
	#else
	if(false){}
	#endif
	else {
		DBG_LOG_ADV("Failed to add Complete local name");
10010e96:	4b66      	ldr	r3, [pc, #408]	; (10011030 <ble_advertisement_data_set+0x268>)
10010e98:	0018      	movs	r0, r3
10010e9a:	4b61      	ldr	r3, [pc, #388]	; (10011020 <ble_advertisement_data_set+0x258>)
10010e9c:	4798      	blx	r3
10010e9e:	4b65      	ldr	r3, [pc, #404]	; (10011034 <ble_advertisement_data_set+0x26c>)
10010ea0:	0018      	movs	r0, r3
10010ea2:	4b5f      	ldr	r3, [pc, #380]	; (10011020 <ble_advertisement_data_set+0x258>)
10010ea4:	4798      	blx	r3
		return AT_BLE_GAP_INVALID_PARAM;
10010ea6:	2340      	movs	r3, #64	; 0x40
10010ea8:	e0b0      	b.n	1001100c <ble_advertisement_data_set+0x244>
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	DBG_LOG_DEV("BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE");
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
10010eaa:	230c      	movs	r3, #12
10010eac:	18fb      	adds	r3, r7, r3
10010eae:	781b      	ldrb	r3, [r3, #0]
10010eb0:	1c5a      	adds	r2, r3, #1
10010eb2:	b2d1      	uxtb	r1, r2
10010eb4:	220c      	movs	r2, #12
10010eb6:	18ba      	adds	r2, r7, r2
10010eb8:	7011      	strb	r1, [r2, #0]
10010eba:	001a      	movs	r2, r3
10010ebc:	2334      	movs	r3, #52	; 0x34
10010ebe:	18fb      	adds	r3, r7, r3
10010ec0:	2109      	movs	r1, #9
10010ec2:	5499      	strb	r1, [r3, r2]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
10010ec4:	230c      	movs	r3, #12
10010ec6:	18fb      	adds	r3, r7, r3
10010ec8:	781b      	ldrb	r3, [r3, #0]
10010eca:	1c5a      	adds	r2, r3, #1
10010ecc:	b2d1      	uxtb	r1, r2
10010ece:	220c      	movs	r2, #12
10010ed0:	18ba      	adds	r2, r7, r2
10010ed2:	7011      	strb	r1, [r2, #0]
10010ed4:	001a      	movs	r2, r3
10010ed6:	2334      	movs	r3, #52	; 0x34
10010ed8:	18fb      	adds	r3, r7, r3
10010eda:	21ff      	movs	r1, #255	; 0xff
10010edc:	5499      	strb	r1, [r3, r2]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
10010ede:	230c      	movs	r3, #12
10010ee0:	18fb      	adds	r3, r7, r3
10010ee2:	781b      	ldrb	r3, [r3, #0]
10010ee4:	001a      	movs	r2, r3
10010ee6:	2334      	movs	r3, #52	; 0x34
10010ee8:	18fb      	adds	r3, r7, r3
10010eea:	189b      	adds	r3, r3, r2
10010eec:	4952      	ldr	r1, [pc, #328]	; (10011038 <ble_advertisement_data_set+0x270>)
10010eee:	2208      	movs	r2, #8
10010ef0:	0018      	movs	r0, r3
10010ef2:	4b4d      	ldr	r3, [pc, #308]	; (10011028 <ble_advertisement_data_set+0x260>)
10010ef4:	4798      	blx	r3
		adv_data_element.len += BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE;
10010ef6:	230c      	movs	r3, #12
10010ef8:	18fb      	adds	r3, r7, r3
10010efa:	781b      	ldrb	r3, [r3, #0]
10010efc:	3308      	adds	r3, #8
10010efe:	b2da      	uxtb	r2, r3
10010f00:	230c      	movs	r3, #12
10010f02:	18fb      	adds	r3, r7, r3
10010f04:	701a      	strb	r2, [r3, #0]
10010f06:	e035      	b.n	10010f74 <ble_advertisement_data_set+0x1ac>
	}
	#else
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
10010f08:	1d3b      	adds	r3, r7, #4
10010f0a:	781b      	ldrb	r3, [r3, #0]
10010f0c:	2b15      	cmp	r3, #21
10010f0e:	d827      	bhi.n	10010f60 <ble_advertisement_data_set+0x198>
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
10010f10:	1d3b      	adds	r3, r7, #4
10010f12:	781b      	ldrb	r3, [r3, #0]
10010f14:	1c5a      	adds	r2, r3, #1
10010f16:	b2d1      	uxtb	r1, r2
10010f18:	1d3a      	adds	r2, r7, #4
10010f1a:	7011      	strb	r1, [r2, #0]
10010f1c:	001a      	movs	r2, r3
10010f1e:	2314      	movs	r3, #20
10010f20:	18fb      	adds	r3, r7, r3
10010f22:	2109      	movs	r1, #9
10010f24:	5499      	strb	r1, [r3, r2]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
10010f26:	1d3b      	adds	r3, r7, #4
10010f28:	781b      	ldrb	r3, [r3, #0]
10010f2a:	1c5a      	adds	r2, r3, #1
10010f2c:	b2d1      	uxtb	r1, r2
10010f2e:	1d3a      	adds	r2, r7, #4
10010f30:	7011      	strb	r1, [r2, #0]
10010f32:	001a      	movs	r2, r3
10010f34:	2314      	movs	r3, #20
10010f36:	18fb      	adds	r3, r7, r3
10010f38:	21ff      	movs	r1, #255	; 0xff
10010f3a:	5499      	strb	r1, [r3, r2]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
10010f3c:	1d3b      	adds	r3, r7, #4
10010f3e:	781b      	ldrb	r3, [r3, #0]
10010f40:	001a      	movs	r2, r3
10010f42:	2314      	movs	r3, #20
10010f44:	18fb      	adds	r3, r7, r3
10010f46:	189b      	adds	r3, r3, r2
10010f48:	493b      	ldr	r1, [pc, #236]	; (10011038 <ble_advertisement_data_set+0x270>)
10010f4a:	2208      	movs	r2, #8
10010f4c:	0018      	movs	r0, r3
10010f4e:	4b36      	ldr	r3, [pc, #216]	; (10011028 <ble_advertisement_data_set+0x260>)
10010f50:	4798      	blx	r3
		scan_resp_data_element.len += BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE;
10010f52:	1d3b      	adds	r3, r7, #4
10010f54:	781b      	ldrb	r3, [r3, #0]
10010f56:	3308      	adds	r3, #8
10010f58:	b2da      	uxtb	r2, r3
10010f5a:	1d3b      	adds	r3, r7, #4
10010f5c:	701a      	strb	r2, [r3, #0]
10010f5e:	e009      	b.n	10010f74 <ble_advertisement_data_set+0x1ac>
	}
	#endif
	else {
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
10010f60:	4b33      	ldr	r3, [pc, #204]	; (10011030 <ble_advertisement_data_set+0x268>)
10010f62:	0018      	movs	r0, r3
10010f64:	4b2e      	ldr	r3, [pc, #184]	; (10011020 <ble_advertisement_data_set+0x258>)
10010f66:	4798      	blx	r3
10010f68:	4b34      	ldr	r3, [pc, #208]	; (1001103c <ble_advertisement_data_set+0x274>)
10010f6a:	0018      	movs	r0, r3
10010f6c:	4b2c      	ldr	r3, [pc, #176]	; (10011020 <ble_advertisement_data_set+0x258>)
10010f6e:	4798      	blx	r3
		return AT_BLE_GAP_INVALID_PARAM;
10010f70:	2340      	movs	r3, #64	; 0x40
10010f72:	e04b      	b.n	1001100c <ble_advertisement_data_set+0x244>
	}
	#endif
	

	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
10010f74:	230c      	movs	r3, #12
10010f76:	18fb      	adds	r3, r7, r3
10010f78:	7819      	ldrb	r1, [r3, #0]
10010f7a:	1d3b      	adds	r3, r7, #4
10010f7c:	781b      	ldrb	r3, [r3, #0]
10010f7e:	2214      	movs	r2, #20
10010f80:	18ba      	adds	r2, r7, r2
10010f82:	2034      	movs	r0, #52	; 0x34
10010f84:	1838      	adds	r0, r7, r0
10010f86:	4c2e      	ldr	r4, [pc, #184]	; (10011040 <ble_advertisement_data_set+0x278>)
10010f88:	47a0      	blx	r4
10010f8a:	1e03      	subs	r3, r0, #0
10010f8c:	d003      	beq.n	10010f96 <ble_advertisement_data_set+0x1ce>
							scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		//DBG_LOG("BLE Advertisement data set failed");
		return status;
10010f8e:	2356      	movs	r3, #86	; 0x56
10010f90:	18fb      	adds	r3, r7, r3
10010f92:	781b      	ldrb	r3, [r3, #0]
10010f94:	e03a      	b.n	1001100c <ble_advertisement_data_set+0x244>
	} else {
	    uint8_t i = 0;
10010f96:	2357      	movs	r3, #87	; 0x57
10010f98:	18fb      	adds	r3, r7, r3
10010f9a:	2200      	movs	r2, #0
10010f9c:	701a      	strb	r2, [r3, #0]
	    DBG_LOG_DEV("Advertisement data: 0x ");
10010f9e:	4b1d      	ldr	r3, [pc, #116]	; (10011014 <ble_advertisement_data_set+0x24c>)
10010fa0:	0018      	movs	r0, r3
10010fa2:	4b1d      	ldr	r3, [pc, #116]	; (10011018 <ble_advertisement_data_set+0x250>)
10010fa4:	4798      	blx	r3
10010fa6:	4b27      	ldr	r3, [pc, #156]	; (10011044 <ble_advertisement_data_set+0x27c>)
10010fa8:	0018      	movs	r0, r3
10010faa:	4b1d      	ldr	r3, [pc, #116]	; (10011020 <ble_advertisement_data_set+0x258>)
10010fac:	4798      	blx	r3
	    for(i = 0; i < adv_data_element.len; i++) {
10010fae:	2357      	movs	r3, #87	; 0x57
10010fb0:	18fb      	adds	r3, r7, r3
10010fb2:	2200      	movs	r2, #0
10010fb4:	701a      	strb	r2, [r3, #0]
10010fb6:	e018      	b.n	10010fea <ble_advertisement_data_set+0x222>
    	    DBG_LOG_CONT_DEV("%02x(%c) ", adv_buf[i], adv_buf[i]);
10010fb8:	2357      	movs	r3, #87	; 0x57
10010fba:	18fb      	adds	r3, r7, r3
10010fbc:	781b      	ldrb	r3, [r3, #0]
10010fbe:	2234      	movs	r2, #52	; 0x34
10010fc0:	18ba      	adds	r2, r7, r2
10010fc2:	5cd3      	ldrb	r3, [r2, r3]
10010fc4:	0019      	movs	r1, r3
10010fc6:	2357      	movs	r3, #87	; 0x57
10010fc8:	18fb      	adds	r3, r7, r3
10010fca:	781b      	ldrb	r3, [r3, #0]
10010fcc:	2234      	movs	r2, #52	; 0x34
10010fce:	18ba      	adds	r2, r7, r2
10010fd0:	5cd3      	ldrb	r3, [r2, r3]
10010fd2:	001a      	movs	r2, r3
10010fd4:	4b1c      	ldr	r3, [pc, #112]	; (10011048 <ble_advertisement_data_set+0x280>)
10010fd6:	0018      	movs	r0, r3
10010fd8:	4b11      	ldr	r3, [pc, #68]	; (10011020 <ble_advertisement_data_set+0x258>)
10010fda:	4798      	blx	r3
		//DBG_LOG("BLE Advertisement data set failed");
		return status;
	} else {
	    uint8_t i = 0;
	    DBG_LOG_DEV("Advertisement data: 0x ");
	    for(i = 0; i < adv_data_element.len; i++) {
10010fdc:	2357      	movs	r3, #87	; 0x57
10010fde:	18fb      	adds	r3, r7, r3
10010fe0:	781a      	ldrb	r2, [r3, #0]
10010fe2:	2357      	movs	r3, #87	; 0x57
10010fe4:	18fb      	adds	r3, r7, r3
10010fe6:	3201      	adds	r2, #1
10010fe8:	701a      	strb	r2, [r3, #0]
10010fea:	230c      	movs	r3, #12
10010fec:	18fb      	adds	r3, r7, r3
10010fee:	781b      	ldrb	r3, [r3, #0]
10010ff0:	2257      	movs	r2, #87	; 0x57
10010ff2:	18ba      	adds	r2, r7, r2
10010ff4:	7812      	ldrb	r2, [r2, #0]
10010ff6:	429a      	cmp	r2, r3
10010ff8:	d3de      	bcc.n	10010fb8 <ble_advertisement_data_set+0x1f0>
    	    DBG_LOG_CONT_DEV("%02x(%c) ", adv_buf[i], adv_buf[i]);
	    }
	    DBG_LOG_DEV("BLE Advertisement data set success");
10010ffa:	4b06      	ldr	r3, [pc, #24]	; (10011014 <ble_advertisement_data_set+0x24c>)
10010ffc:	0018      	movs	r0, r3
10010ffe:	4b06      	ldr	r3, [pc, #24]	; (10011018 <ble_advertisement_data_set+0x250>)
10011000:	4798      	blx	r3
10011002:	4b12      	ldr	r3, [pc, #72]	; (1001104c <ble_advertisement_data_set+0x284>)
10011004:	0018      	movs	r0, r3
10011006:	4b06      	ldr	r3, [pc, #24]	; (10011020 <ble_advertisement_data_set+0x258>)
10011008:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1001100a:	2300      	movs	r3, #0
	}
}
1001100c:	0018      	movs	r0, r3
1001100e:	46bd      	mov	sp, r7
10011010:	b017      	add	sp, #92	; 0x5c
10011012:	bd90      	pop	{r4, r7, pc}
10011014:	100192e0 	.word	0x100192e0
10011018:	10017591 	.word	0x10017591
1001101c:	100196f8 	.word	0x100196f8
10011020:	10017471 	.word	0x10017471
10011024:	100192cc 	.word	0x100192cc
10011028:	10017317 	.word	0x10017317
1001102c:	1001977c 	.word	0x1001977c
10011030:	1001974c 	.word	0x1001974c
10011034:	10019758 	.word	0x10019758
10011038:	100197ac 	.word	0x100197ac
1001103c:	100197b8 	.word	0x100197b8
10011040:	10012e11 	.word	0x10012e11
10011044:	100197e4 	.word	0x100197e4
10011048:	100197fc 	.word	0x100197fc
1001104c:	10019808 	.word	0x10019808

10011050 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
10011050:	b580      	push	{r7, lr}
10011052:	b082      	sub	sp, #8
10011054:	af00      	add	r7, sp, #0
10011056:	6078      	str	r0, [r7, #4]
	ble_user_event_cb = cb_fn;
10011058:	4b03      	ldr	r3, [pc, #12]	; (10011068 <register_ble_user_event_cb+0x18>)
1001105a:	687a      	ldr	r2, [r7, #4]
1001105c:	601a      	str	r2, [r3, #0]
}
1001105e:	46c0      	nop			; (mov r8, r8)
10011060:	46bd      	mov	sp, r7
10011062:	b002      	add	sp, #8
10011064:	bd80      	pop	{r7, pc}
10011066:	46c0      	nop			; (mov r8, r8)
10011068:	1001a054 	.word	0x1001a054

1001106c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
1001106c:	b580      	push	{r7, lr}
1001106e:	b084      	sub	sp, #16
10011070:	af00      	add	r7, sp, #0
10011072:	60f8      	str	r0, [r7, #12]
10011074:	60b9      	str	r1, [r7, #8]
10011076:	607a      	str	r2, [r7, #4]
	if (uart_init(module, hw, config) == STATUS_OK) {
10011078:	687a      	ldr	r2, [r7, #4]
1001107a:	68b9      	ldr	r1, [r7, #8]
1001107c:	68fb      	ldr	r3, [r7, #12]
1001107e:	0018      	movs	r0, r3
10011080:	4b05      	ldr	r3, [pc, #20]	; (10011098 <usart_serial_init+0x2c>)
10011082:	4798      	blx	r3
10011084:	1e03      	subs	r3, r0, #0
10011086:	d101      	bne.n	1001108c <usart_serial_init+0x20>
		return true;
10011088:	2301      	movs	r3, #1
1001108a:	e000      	b.n	1001108e <usart_serial_init+0x22>
	}
	else {
		return false;
1001108c:	2300      	movs	r3, #0
	}
}
1001108e:	0018      	movs	r0, r3
10011090:	46bd      	mov	sp, r7
10011092:	b004      	add	sp, #16
10011094:	bd80      	pop	{r7, pc}
10011096:	46c0      	nop			; (mov r8, r8)
10011098:	1000eae1 	.word	0x1000eae1

1001109c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1001109c:	b580      	push	{r7, lr}
1001109e:	b082      	sub	sp, #8
100110a0:	af00      	add	r7, sp, #0
100110a2:	6078      	str	r0, [r7, #4]
100110a4:	000a      	movs	r2, r1
100110a6:	1cfb      	adds	r3, r7, #3
100110a8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=uart_write_wait(module, c));
100110aa:	46c0      	nop			; (mov r8, r8)
100110ac:	1cfb      	adds	r3, r7, #3
100110ae:	781a      	ldrb	r2, [r3, #0]
100110b0:	687b      	ldr	r3, [r7, #4]
100110b2:	0011      	movs	r1, r2
100110b4:	0018      	movs	r0, r3
100110b6:	4b04      	ldr	r3, [pc, #16]	; (100110c8 <usart_serial_putchar+0x2c>)
100110b8:	4798      	blx	r3
100110ba:	1e03      	subs	r3, r0, #0
100110bc:	d1f6      	bne.n	100110ac <usart_serial_putchar+0x10>

	return STATUS_OK;
100110be:	2300      	movs	r3, #0
}
100110c0:	0018      	movs	r0, r3
100110c2:	46bd      	mov	sp, r7
100110c4:	b002      	add	sp, #8
100110c6:	bd80      	pop	{r7, pc}
100110c8:	1000ed69 	.word	0x1000ed69

100110cc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
100110cc:	b580      	push	{r7, lr}
100110ce:	b082      	sub	sp, #8
100110d0:	af00      	add	r7, sp, #0
100110d2:	6078      	str	r0, [r7, #4]
100110d4:	6039      	str	r1, [r7, #0]
	while(STATUS_OK != uart_read_wait(module, c));
100110d6:	46c0      	nop			; (mov r8, r8)
100110d8:	683a      	ldr	r2, [r7, #0]
100110da:	687b      	ldr	r3, [r7, #4]
100110dc:	0011      	movs	r1, r2
100110de:	0018      	movs	r0, r3
100110e0:	4b03      	ldr	r3, [pc, #12]	; (100110f0 <usart_serial_getchar+0x24>)
100110e2:	4798      	blx	r3
100110e4:	1e03      	subs	r3, r0, #0
100110e6:	d1f7      	bne.n	100110d8 <usart_serial_getchar+0xc>
}
100110e8:	46c0      	nop			; (mov r8, r8)
100110ea:	46bd      	mov	sp, r7
100110ec:	b002      	add	sp, #8
100110ee:	bd80      	pop	{r7, pc}
100110f0:	1000ed9d 	.word	0x1000ed9d

100110f4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
100110f4:	b580      	push	{r7, lr}
100110f6:	b084      	sub	sp, #16
100110f8:	af00      	add	r7, sp, #0
100110fa:	60f8      	str	r0, [r7, #12]
100110fc:	60b9      	str	r1, [r7, #8]
100110fe:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
10011100:	4b10      	ldr	r3, [pc, #64]	; (10011144 <stdio_serial_init+0x50>)
10011102:	68fa      	ldr	r2, [r7, #12]
10011104:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
10011106:	4b10      	ldr	r3, [pc, #64]	; (10011148 <stdio_serial_init+0x54>)
10011108:	4a10      	ldr	r2, [pc, #64]	; (1001114c <stdio_serial_init+0x58>)
1001110a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1001110c:	4b10      	ldr	r3, [pc, #64]	; (10011150 <stdio_serial_init+0x5c>)
1001110e:	4a11      	ldr	r2, [pc, #68]	; (10011154 <stdio_serial_init+0x60>)
10011110:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
10011112:	687a      	ldr	r2, [r7, #4]
10011114:	68b9      	ldr	r1, [r7, #8]
10011116:	68fb      	ldr	r3, [r7, #12]
10011118:	0018      	movs	r0, r3
1001111a:	4b0f      	ldr	r3, [pc, #60]	; (10011158 <stdio_serial_init+0x64>)
1001111c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1001111e:	4b0f      	ldr	r3, [pc, #60]	; (1001115c <stdio_serial_init+0x68>)
10011120:	681b      	ldr	r3, [r3, #0]
10011122:	689b      	ldr	r3, [r3, #8]
10011124:	2100      	movs	r1, #0
10011126:	0018      	movs	r0, r3
10011128:	4b0d      	ldr	r3, [pc, #52]	; (10011160 <stdio_serial_init+0x6c>)
1001112a:	4798      	blx	r3
	setbuf(stdin, NULL);
1001112c:	4b0b      	ldr	r3, [pc, #44]	; (1001115c <stdio_serial_init+0x68>)
1001112e:	681b      	ldr	r3, [r3, #0]
10011130:	685b      	ldr	r3, [r3, #4]
10011132:	2100      	movs	r1, #0
10011134:	0018      	movs	r0, r3
10011136:	4b0a      	ldr	r3, [pc, #40]	; (10011160 <stdio_serial_init+0x6c>)
10011138:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
1001113a:	46c0      	nop			; (mov r8, r8)
1001113c:	46bd      	mov	sp, r7
1001113e:	b004      	add	sp, #16
10011140:	bd80      	pop	{r7, pc}
10011142:	46c0      	nop			; (mov r8, r8)
10011144:	1001a574 	.word	0x1001a574
10011148:	1001a570 	.word	0x1001a570
1001114c:	1001109d 	.word	0x1001109d
10011150:	1001a56c 	.word	0x1001a56c
10011154:	100110cd 	.word	0x100110cd
10011158:	1001106d 	.word	0x1001106d
1001115c:	10019b00 	.word	0x10019b00
10011160:	10017641 	.word	0x10017641

10011164 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
10011164:	b580      	push	{r7, lr}
10011166:	b082      	sub	sp, #8
10011168:	af00      	add	r7, sp, #0
1001116a:	6078      	str	r0, [r7, #4]
	read_complete_flag = true;
1001116c:	4b03      	ldr	r3, [pc, #12]	; (1001117c <uart_read_complete_callback+0x18>)
1001116e:	2201      	movs	r2, #1
10011170:	701a      	strb	r2, [r3, #0]
}
10011172:	46c0      	nop			; (mov r8, r8)
10011174:	46bd      	mov	sp, r7
10011176:	b002      	add	sp, #8
10011178:	bd80      	pop	{r7, pc}
1001117a:	46c0      	nop			; (mov r8, r8)
1001117c:	1001a059 	.word	0x1001a059

10011180 <serial_console_init>:

void serial_console_init(void)
{
10011180:	b580      	push	{r7, lr}
10011182:	af00      	add	r7, sp, #0
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10011184:	2100      	movs	r1, #0
10011186:	2000      	movs	r0, #0
10011188:	4b15      	ldr	r3, [pc, #84]	; (100111e0 <serial_console_init+0x60>)
1001118a:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1001118c:	4b15      	ldr	r3, [pc, #84]	; (100111e4 <serial_console_init+0x64>)
1001118e:	0018      	movs	r0, r3
10011190:	4b15      	ldr	r3, [pc, #84]	; (100111e8 <serial_console_init+0x68>)
10011192:	4798      	blx	r3

	config_uart.baud_rate = 115200;
10011194:	4b13      	ldr	r3, [pc, #76]	; (100111e4 <serial_console_init+0x64>)
10011196:	22e1      	movs	r2, #225	; 0xe1
10011198:	0252      	lsls	r2, r2, #9
1001119a:	601a      	str	r2, [r3, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1001119c:	4b11      	ldr	r3, [pc, #68]	; (100111e4 <serial_console_init+0x64>)
1001119e:	2202      	movs	r2, #2
100111a0:	609a      	str	r2, [r3, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
100111a2:	4b10      	ldr	r3, [pc, #64]	; (100111e4 <serial_console_init+0x64>)
100111a4:	2203      	movs	r2, #3
100111a6:	60da      	str	r2, [r3, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
100111a8:	4b0e      	ldr	r3, [pc, #56]	; (100111e4 <serial_console_init+0x64>)
100111aa:	2204      	movs	r2, #4
100111ac:	611a      	str	r2, [r3, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
100111ae:	4b0d      	ldr	r3, [pc, #52]	; (100111e4 <serial_console_init+0x64>)
100111b0:	2205      	movs	r2, #5
100111b2:	615a      	str	r2, [r3, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
100111b4:	4b0b      	ldr	r3, [pc, #44]	; (100111e4 <serial_console_init+0x64>)
100111b6:	2202      	movs	r2, #2
100111b8:	619a      	str	r2, [r3, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
100111ba:	4b0a      	ldr	r3, [pc, #40]	; (100111e4 <serial_console_init+0x64>)
100111bc:	2202      	movs	r2, #2
100111be:	61da      	str	r2, [r3, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
100111c0:	4b08      	ldr	r3, [pc, #32]	; (100111e4 <serial_console_init+0x64>)
100111c2:	2202      	movs	r2, #2
100111c4:	621a      	str	r2, [r3, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
100111c6:	4b07      	ldr	r3, [pc, #28]	; (100111e4 <serial_console_init+0x64>)
100111c8:	2202      	movs	r2, #2
100111ca:	625a      	str	r2, [r3, #36]	; 0x24

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
100111cc:	4a05      	ldr	r2, [pc, #20]	; (100111e4 <serial_console_init+0x64>)
100111ce:	4907      	ldr	r1, [pc, #28]	; (100111ec <serial_console_init+0x6c>)
100111d0:	4b07      	ldr	r3, [pc, #28]	; (100111f0 <serial_console_init+0x70>)
100111d2:	0018      	movs	r0, r3
100111d4:	4b07      	ldr	r3, [pc, #28]	; (100111f4 <serial_console_init+0x74>)
100111d6:	4798      	blx	r3
}
100111d8:	46c0      	nop			; (mov r8, r8)
100111da:	46bd      	mov	sp, r7
100111dc:	bd80      	pop	{r7, pc}
100111de:	46c0      	nop			; (mov r8, r8)
100111e0:	1000d7e1 	.word	0x1000d7e1
100111e4:	1001adcc 	.word	0x1001adcc
100111e8:	1000ea81 	.word	0x1000ea81
100111ec:	40004000 	.word	0x40004000
100111f0:	1001ada8 	.word	0x1001ada8
100111f4:	100110f5 	.word	0x100110f5

100111f8 <_time_start>:

void _time_start(unsigned int sec)
{
100111f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100111fa:	b085      	sub	sp, #20
100111fc:	af00      	add	r7, sp, #0
100111fe:	6078      	str	r0, [r7, #4]
	system_clock_get_value();
10011200:	4b16      	ldr	r3, [pc, #88]	; (1001125c <_time_start+0x64>)
10011202:	4798      	blx	r3
	unsigned int main_clk = system_clock_get_value();
10011204:	4b15      	ldr	r3, [pc, #84]	; (1001125c <_time_start+0x64>)
10011206:	4798      	blx	r3
10011208:	0003      	movs	r3, r0
1001120a:	60fb      	str	r3, [r7, #12]

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1001120c:	4b14      	ldr	r3, [pc, #80]	; (10011260 <_time_start+0x68>)
1001120e:	68f8      	ldr	r0, [r7, #12]
10011210:	4798      	blx	r3
10011212:	4c14      	ldr	r4, [pc, #80]	; (10011264 <_time_start+0x6c>)
10011214:	4a14      	ldr	r2, [pc, #80]	; (10011268 <_time_start+0x70>)
10011216:	4b15      	ldr	r3, [pc, #84]	; (1001126c <_time_start+0x74>)
10011218:	47a0      	blx	r4
1001121a:	0003      	movs	r3, r0
1001121c:	000c      	movs	r4, r1
1001121e:	001d      	movs	r5, r3
10011220:	0026      	movs	r6, r4
10011222:	687b      	ldr	r3, [r7, #4]
10011224:	22fa      	movs	r2, #250	; 0xfa
10011226:	0092      	lsls	r2, r2, #2
10011228:	435a      	muls	r2, r3
1001122a:	4b0d      	ldr	r3, [pc, #52]	; (10011260 <_time_start+0x68>)
1001122c:	0010      	movs	r0, r2
1001122e:	4798      	blx	r3
10011230:	0002      	movs	r2, r0
10011232:	000b      	movs	r3, r1
10011234:	4c0b      	ldr	r4, [pc, #44]	; (10011264 <_time_start+0x6c>)
10011236:	0028      	movs	r0, r5
10011238:	0031      	movs	r1, r6
1001123a:	47a0      	blx	r4
1001123c:	0003      	movs	r3, r0
1001123e:	000c      	movs	r4, r1
10011240:	0019      	movs	r1, r3
10011242:	0022      	movs	r2, r4
10011244:	4b0a      	ldr	r3, [pc, #40]	; (10011270 <_time_start+0x78>)
10011246:	0008      	movs	r0, r1
10011248:	0011      	movs	r1, r2
1001124a:	4798      	blx	r3
1001124c:	0002      	movs	r2, r0
1001124e:	4b09      	ldr	r3, [pc, #36]	; (10011274 <_time_start+0x7c>)
10011250:	601a      	str	r2, [r3, #0]
}
10011252:	46c0      	nop			; (mov r8, r8)
10011254:	46bd      	mov	sp, r7
10011256:	b005      	add	sp, #20
10011258:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001125a:	46c0      	nop			; (mov r8, r8)
1001125c:	1000d899 	.word	0x1000d899
10011260:	100171ed 	.word	0x100171ed
10011264:	100165e5 	.word	0x100165e5
10011268:	19feaec7 	.word	0x19feaec7
1001126c:	3f09d8ef 	.word	0x3f09d8ef
10011270:	10015a05 	.word	0x10015a05
10011274:	1001a060 	.word	0x1001a060

10011278 <_time_done>:

unsigned int _time_done()
{
10011278:	b580      	push	{r7, lr}
1001127a:	af00      	add	r7, sp, #0
	return --tick;
1001127c:	4b04      	ldr	r3, [pc, #16]	; (10011290 <_time_done+0x18>)
1001127e:	681b      	ldr	r3, [r3, #0]
10011280:	1e5a      	subs	r2, r3, #1
10011282:	4b03      	ldr	r3, [pc, #12]	; (10011290 <_time_done+0x18>)
10011284:	601a      	str	r2, [r3, #0]
10011286:	4b02      	ldr	r3, [pc, #8]	; (10011290 <_time_done+0x18>)
10011288:	681b      	ldr	r3, [r3, #0]
}
1001128a:	0018      	movs	r0, r3
1001128c:	46bd      	mov	sp, r7
1001128e:	bd80      	pop	{r7, pc}
10011290:	1001a060 	.word	0x1001a060

10011294 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
10011294:	b580      	push	{r7, lr}
10011296:	b082      	sub	sp, #8
10011298:	af00      	add	r7, sp, #0
1001129a:	6078      	str	r0, [r7, #4]
	
	read_complete_flag = false;
1001129c:	4b1d      	ldr	r3, [pc, #116]	; (10011314 <getchar_b11_timeout+0x80>)
1001129e:	2200      	movs	r2, #0
100112a0:	701a      	strb	r2, [r3, #0]
	_time_start(sec);
100112a2:	687b      	ldr	r3, [r7, #4]
100112a4:	0018      	movs	r0, r3
100112a6:	4b1c      	ldr	r3, [pc, #112]	; (10011318 <getchar_b11_timeout+0x84>)
100112a8:	4798      	blx	r3
	
	string_input[0] = 0;
100112aa:	4b1c      	ldr	r3, [pc, #112]	; (1001131c <getchar_b11_timeout+0x88>)
100112ac:	2200      	movs	r2, #0
100112ae:	701a      	strb	r2, [r3, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
100112b0:	491b      	ldr	r1, [pc, #108]	; (10011320 <getchar_b11_timeout+0x8c>)
100112b2:	4b1c      	ldr	r3, [pc, #112]	; (10011324 <getchar_b11_timeout+0x90>)
100112b4:	2202      	movs	r2, #2
100112b6:	0018      	movs	r0, r3
100112b8:	4b1b      	ldr	r3, [pc, #108]	; (10011328 <getchar_b11_timeout+0x94>)
100112ba:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
100112bc:	4b19      	ldr	r3, [pc, #100]	; (10011324 <getchar_b11_timeout+0x90>)
100112be:	2102      	movs	r1, #2
100112c0:	0018      	movs	r0, r3
100112c2:	4b1a      	ldr	r3, [pc, #104]	; (1001132c <getchar_b11_timeout+0x98>)
100112c4:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
100112c6:	4915      	ldr	r1, [pc, #84]	; (1001131c <getchar_b11_timeout+0x88>)
100112c8:	4b16      	ldr	r3, [pc, #88]	; (10011324 <getchar_b11_timeout+0x90>)
100112ca:	2201      	movs	r2, #1
100112cc:	0018      	movs	r0, r3
100112ce:	4b18      	ldr	r3, [pc, #96]	; (10011330 <getchar_b11_timeout+0x9c>)
100112d0:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
100112d2:	46c0      	nop			; (mov r8, r8)
100112d4:	4b0f      	ldr	r3, [pc, #60]	; (10011314 <getchar_b11_timeout+0x80>)
100112d6:	781b      	ldrb	r3, [r3, #0]
100112d8:	b2db      	uxtb	r3, r3
100112da:	2201      	movs	r2, #1
100112dc:	4053      	eors	r3, r2
100112de:	b2db      	uxtb	r3, r3
100112e0:	2b00      	cmp	r3, #0
100112e2:	d003      	beq.n	100112ec <getchar_b11_timeout+0x58>
100112e4:	4b13      	ldr	r3, [pc, #76]	; (10011334 <getchar_b11_timeout+0xa0>)
100112e6:	4798      	blx	r3
100112e8:	1e03      	subs	r3, r0, #0
100112ea:	d1f3      	bne.n	100112d4 <getchar_b11_timeout+0x40>
	
	if( tick == 0 )
100112ec:	4b12      	ldr	r3, [pc, #72]	; (10011338 <getchar_b11_timeout+0xa4>)
100112ee:	681b      	ldr	r3, [r3, #0]
100112f0:	2b00      	cmp	r3, #0
100112f2:	d109      	bne.n	10011308 <getchar_b11_timeout+0x74>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
100112f4:	4b0b      	ldr	r3, [pc, #44]	; (10011324 <getchar_b11_timeout+0x90>)
100112f6:	2102      	movs	r1, #2
100112f8:	0018      	movs	r0, r3
100112fa:	4b10      	ldr	r3, [pc, #64]	; (1001133c <getchar_b11_timeout+0xa8>)
100112fc:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
100112fe:	4b09      	ldr	r3, [pc, #36]	; (10011324 <getchar_b11_timeout+0x90>)
10011300:	2102      	movs	r1, #2
10011302:	0018      	movs	r0, r3
10011304:	4b0e      	ldr	r3, [pc, #56]	; (10011340 <getchar_b11_timeout+0xac>)
10011306:	4798      	blx	r3
	}
	return string_input[0];
10011308:	4b04      	ldr	r3, [pc, #16]	; (1001131c <getchar_b11_timeout+0x88>)
1001130a:	781b      	ldrb	r3, [r3, #0]
}
1001130c:	0018      	movs	r0, r3
1001130e:	46bd      	mov	sp, r7
10011310:	b002      	add	sp, #8
10011312:	bd80      	pop	{r7, pc}
10011314:	1001a059 	.word	0x1001a059
10011318:	100111f9 	.word	0x100111f9
1001131c:	1001a05c 	.word	0x1001a05c
10011320:	10011165 	.word	0x10011165
10011324:	1001ada8 	.word	0x1001ada8
10011328:	1000ee4d 	.word	0x1000ee4d
1001132c:	1000eee1 	.word	0x1000eee1
10011330:	1000ee05 	.word	0x1000ee05
10011334:	10011279 	.word	0x10011279
10011338:	1001a060 	.word	0x1001a060
1001133c:	1000ee95 	.word	0x1000ee95
10011340:	1000ef35 	.word	0x1000ef35

10011344 <platform_event_free>:
static struct platform_event* platform_event_pending_list = NULL;
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
10011344:	b580      	push	{r7, lr}
10011346:	b082      	sub	sp, #8
10011348:	af00      	add	r7, sp, #0
1001134a:	6078      	str	r0, [r7, #4]
	event->next = platform_event_free_list;
1001134c:	4b05      	ldr	r3, [pc, #20]	; (10011364 <platform_event_free+0x20>)
1001134e:	681a      	ldr	r2, [r3, #0]
10011350:	687b      	ldr	r3, [r7, #4]
10011352:	601a      	str	r2, [r3, #0]
	platform_event_free_list = event;
10011354:	4b03      	ldr	r3, [pc, #12]	; (10011364 <platform_event_free+0x20>)
10011356:	687a      	ldr	r2, [r7, #4]
10011358:	601a      	str	r2, [r3, #0]
}
1001135a:	46c0      	nop			; (mov r8, r8)
1001135c:	46bd      	mov	sp, r7
1001135e:	b002      	add	sp, #8
10011360:	bd80      	pop	{r7, pc}
10011362:	46c0      	nop			; (mov r8, r8)
10011364:	1001a0dc 	.word	0x1001a0dc

10011368 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
10011368:	b580      	push	{r7, lr}
1001136a:	b084      	sub	sp, #16
1001136c:	af00      	add	r7, sp, #0
1001136e:	6039      	str	r1, [r7, #0]
10011370:	0011      	movs	r1, r2
10011372:	1dbb      	adds	r3, r7, #6
10011374:	1c02      	adds	r2, r0, #0
10011376:	801a      	strh	r2, [r3, #0]
10011378:	1d3b      	adds	r3, r7, #4
1001137a:	1c0a      	adds	r2, r1, #0
1001137c:	801a      	strh	r2, [r3, #0]
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1001137e:	4b19      	ldr	r3, [pc, #100]	; (100113e4 <platform_event_post+0x7c>)
10011380:	681b      	ldr	r3, [r3, #0]
10011382:	60bb      	str	r3, [r7, #8]
	if(evt != NULL)
10011384:	68bb      	ldr	r3, [r7, #8]
10011386:	2b00      	cmp	r3, #0
10011388:	d027      	beq.n	100113da <platform_event_post+0x72>
	{
		platform_event_free_list = evt->next;
1001138a:	68bb      	ldr	r3, [r7, #8]
1001138c:	681a      	ldr	r2, [r3, #0]
1001138e:	4b15      	ldr	r3, [pc, #84]	; (100113e4 <platform_event_post+0x7c>)
10011390:	601a      	str	r2, [r3, #0]
		
		evt->next = NULL;
10011392:	68bb      	ldr	r3, [r7, #8]
10011394:	2200      	movs	r2, #0
10011396:	601a      	str	r2, [r3, #0]
		evt->data = data;
10011398:	68bb      	ldr	r3, [r7, #8]
1001139a:	683a      	ldr	r2, [r7, #0]
1001139c:	609a      	str	r2, [r3, #8]
		evt->data_len = data_len;
1001139e:	68bb      	ldr	r3, [r7, #8]
100113a0:	1d3a      	adds	r2, r7, #4
100113a2:	8812      	ldrh	r2, [r2, #0]
100113a4:	80da      	strh	r2, [r3, #6]
		evt->event_type = event_type;
100113a6:	68bb      	ldr	r3, [r7, #8]
100113a8:	1dba      	adds	r2, r7, #6
100113aa:	8812      	ldrh	r2, [r2, #0]
100113ac:	809a      	strh	r2, [r3, #4]

		if(platform_event_pending_list == NULL)
100113ae:	4b0e      	ldr	r3, [pc, #56]	; (100113e8 <platform_event_post+0x80>)
100113b0:	681b      	ldr	r3, [r3, #0]
100113b2:	2b00      	cmp	r3, #0
100113b4:	d103      	bne.n	100113be <platform_event_post+0x56>
		{
			platform_event_pending_list = evt;
100113b6:	4b0c      	ldr	r3, [pc, #48]	; (100113e8 <platform_event_post+0x80>)
100113b8:	68ba      	ldr	r2, [r7, #8]
100113ba:	601a      	str	r2, [r3, #0]
		}
		
		//platform_event_signal();
	}
	
}
100113bc:	e00d      	b.n	100113da <platform_event_post+0x72>
		{
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
100113be:	4b0a      	ldr	r3, [pc, #40]	; (100113e8 <platform_event_post+0x80>)
100113c0:	681b      	ldr	r3, [r3, #0]
100113c2:	60fb      	str	r3, [r7, #12]
			while(cur->next != NULL)
100113c4:	e002      	b.n	100113cc <platform_event_post+0x64>
			{
				cur = cur->next;
100113c6:	68fb      	ldr	r3, [r7, #12]
100113c8:	681b      	ldr	r3, [r3, #0]
100113ca:	60fb      	str	r3, [r7, #12]
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
100113cc:	68fb      	ldr	r3, [r7, #12]
100113ce:	681b      	ldr	r3, [r3, #0]
100113d0:	2b00      	cmp	r3, #0
100113d2:	d1f8      	bne.n	100113c6 <platform_event_post+0x5e>
			{
				cur = cur->next;
			}
			cur->next = evt;
100113d4:	68fb      	ldr	r3, [r7, #12]
100113d6:	68ba      	ldr	r2, [r7, #8]
100113d8:	601a      	str	r2, [r3, #0]
		}
		
		//platform_event_signal();
	}
	
}
100113da:	46c0      	nop			; (mov r8, r8)
100113dc:	46bd      	mov	sp, r7
100113de:	b004      	add	sp, #16
100113e0:	bd80      	pop	{r7, pc}
100113e2:	46c0      	nop			; (mov r8, r8)
100113e4:	1001a0dc 	.word	0x1001a0dc
100113e8:	1001a0e0 	.word	0x1001a0e0

100113ec <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
100113ec:	b580      	push	{r7, lr}
100113ee:	b082      	sub	sp, #8
100113f0:	af00      	add	r7, sp, #0
	uint32_t i;
	platform_event_free_list = NULL;
100113f2:	4b0e      	ldr	r3, [pc, #56]	; (1001142c <platform_event_init+0x40>)
100113f4:	2200      	movs	r2, #0
100113f6:	601a      	str	r2, [r3, #0]
	platform_event_pending_list = NULL;
100113f8:	4b0d      	ldr	r3, [pc, #52]	; (10011430 <platform_event_init+0x44>)
100113fa:	2200      	movs	r2, #0
100113fc:	601a      	str	r2, [r3, #0]
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
100113fe:	2300      	movs	r3, #0
10011400:	607b      	str	r3, [r7, #4]
10011402:	e00c      	b.n	1001141e <platform_event_init+0x32>
	{
		platform_event_free(&platform_event_pool[i]);
10011404:	687a      	ldr	r2, [r7, #4]
10011406:	0013      	movs	r3, r2
10011408:	005b      	lsls	r3, r3, #1
1001140a:	189b      	adds	r3, r3, r2
1001140c:	009b      	lsls	r3, r3, #2
1001140e:	4a09      	ldr	r2, [pc, #36]	; (10011434 <platform_event_init+0x48>)
10011410:	189b      	adds	r3, r3, r2
10011412:	0018      	movs	r0, r3
10011414:	4b08      	ldr	r3, [pc, #32]	; (10011438 <platform_event_init+0x4c>)
10011416:	4798      	blx	r3
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
10011418:	687b      	ldr	r3, [r7, #4]
1001141a:	3301      	adds	r3, #1
1001141c:	607b      	str	r3, [r7, #4]
1001141e:	687b      	ldr	r3, [r7, #4]
10011420:	2b09      	cmp	r3, #9
10011422:	d9ef      	bls.n	10011404 <platform_event_init+0x18>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
10011424:	46c0      	nop			; (mov r8, r8)
10011426:	46bd      	mov	sp, r7
10011428:	b002      	add	sp, #8
1001142a:	bd80      	pop	{r7, pc}
1001142c:	1001a0dc 	.word	0x1001a0dc
10011430:	1001a0e0 	.word	0x1001a0e0
10011434:	1001a064 	.word	0x1001a064
10011438:	10011345 	.word	0x10011345

1001143c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1001143c:	b580      	push	{r7, lr}
1001143e:	b082      	sub	sp, #8
10011440:	af00      	add	r7, sp, #0
10011442:	0002      	movs	r2, r0
10011444:	1dfb      	adds	r3, r7, #7
10011446:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10011448:	4b06      	ldr	r3, [pc, #24]	; (10011464 <NVIC_EnableIRQ+0x28>)
1001144a:	1dfa      	adds	r2, r7, #7
1001144c:	7812      	ldrb	r2, [r2, #0]
1001144e:	0011      	movs	r1, r2
10011450:	221f      	movs	r2, #31
10011452:	400a      	ands	r2, r1
10011454:	2101      	movs	r1, #1
10011456:	4091      	lsls	r1, r2
10011458:	000a      	movs	r2, r1
1001145a:	601a      	str	r2, [r3, #0]
}
1001145c:	46c0      	nop			; (mov r8, r8)
1001145e:	46bd      	mov	sp, r7
10011460:	b002      	add	sp, #8
10011462:	bd80      	pop	{r7, pc}
10011464:	e000e100 	.word	0xe000e100

10011468 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
10011468:	b580      	push	{r7, lr}
1001146a:	b082      	sub	sp, #8
1001146c:	af00      	add	r7, sp, #0
1001146e:	0002      	movs	r2, r0
10011470:	1dfb      	adds	r3, r7, #7
10011472:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10011474:	4a07      	ldr	r2, [pc, #28]	; (10011494 <NVIC_DisableIRQ+0x2c>)
10011476:	1dfb      	adds	r3, r7, #7
10011478:	781b      	ldrb	r3, [r3, #0]
1001147a:	0019      	movs	r1, r3
1001147c:	231f      	movs	r3, #31
1001147e:	400b      	ands	r3, r1
10011480:	2101      	movs	r1, #1
10011482:	4099      	lsls	r1, r3
10011484:	000b      	movs	r3, r1
10011486:	0019      	movs	r1, r3
10011488:	2380      	movs	r3, #128	; 0x80
1001148a:	50d1      	str	r1, [r2, r3]
}
1001148c:	46c0      	nop			; (mov r8, r8)
1001148e:	46bd      	mov	sp, r7
10011490:	b002      	add	sp, #8
10011492:	bd80      	pop	{r7, pc}
10011494:	e000e100 	.word	0xe000e100

10011498 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
10011498:	b580      	push	{r7, lr}
1001149a:	b082      	sub	sp, #8
1001149c:	af00      	add	r7, sp, #0
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1001149e:	4b1f      	ldr	r3, [pc, #124]	; (1001151c <init_port_list+0x84>)
100114a0:	2232      	movs	r2, #50	; 0x32
100114a2:	2100      	movs	r1, #0
100114a4:	0018      	movs	r0, r3
100114a6:	4b1e      	ldr	r3, [pc, #120]	; (10011520 <init_port_list+0x88>)
100114a8:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
100114aa:	1dfb      	adds	r3, r7, #7
100114ac:	2200      	movs	r2, #0
100114ae:	701a      	strb	r2, [r3, #0]
100114b0:	e01d      	b.n	100114ee <init_port_list+0x56>
		port_list[i].bit.gpio_num = i;
100114b2:	1dfb      	adds	r3, r7, #7
100114b4:	781a      	ldrb	r2, [r3, #0]
100114b6:	4b19      	ldr	r3, [pc, #100]	; (1001151c <init_port_list+0x84>)
100114b8:	0052      	lsls	r2, r2, #1
100114ba:	1df9      	adds	r1, r7, #7
100114bc:	7809      	ldrb	r1, [r1, #0]
100114be:	54d1      	strb	r1, [r2, r3]
		port_list[i].bit.available = 1;
100114c0:	1dfb      	adds	r3, r7, #7
100114c2:	781b      	ldrb	r3, [r3, #0]
100114c4:	4a15      	ldr	r2, [pc, #84]	; (1001151c <init_port_list+0x84>)
100114c6:	005b      	lsls	r3, r3, #1
100114c8:	18d3      	adds	r3, r2, r3
100114ca:	785a      	ldrb	r2, [r3, #1]
100114cc:	2101      	movs	r1, #1
100114ce:	430a      	orrs	r2, r1
100114d0:	705a      	strb	r2, [r3, #1]
		port_list[i].bit.configured = 0;
100114d2:	1dfb      	adds	r3, r7, #7
100114d4:	781b      	ldrb	r3, [r3, #0]
100114d6:	4a11      	ldr	r2, [pc, #68]	; (1001151c <init_port_list+0x84>)
100114d8:	005b      	lsls	r3, r3, #1
100114da:	18d3      	adds	r3, r2, r3
100114dc:	785a      	ldrb	r2, [r3, #1]
100114de:	2102      	movs	r1, #2
100114e0:	438a      	bics	r2, r1
100114e2:	705a      	strb	r2, [r3, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
100114e4:	1dfb      	adds	r3, r7, #7
100114e6:	781a      	ldrb	r2, [r3, #0]
100114e8:	1dfb      	adds	r3, r7, #7
100114ea:	3201      	adds	r2, #1
100114ec:	701a      	strb	r2, [r3, #0]
100114ee:	1dfb      	adds	r3, r7, #7
100114f0:	781b      	ldrb	r3, [r3, #0]
100114f2:	2b18      	cmp	r3, #24
100114f4:	d9dd      	bls.n	100114b2 <init_port_list+0x1a>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
100114f6:	4b09      	ldr	r3, [pc, #36]	; (1001151c <init_port_list+0x84>)
100114f8:	785a      	ldrb	r2, [r3, #1]
100114fa:	2101      	movs	r1, #1
100114fc:	438a      	bics	r2, r1
100114fe:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
10011500:	4b06      	ldr	r3, [pc, #24]	; (1001151c <init_port_list+0x84>)
10011502:	78da      	ldrb	r2, [r3, #3]
10011504:	2101      	movs	r1, #1
10011506:	438a      	bics	r2, r1
10011508:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1001150a:	4b04      	ldr	r3, [pc, #16]	; (1001151c <init_port_list+0x84>)
1001150c:	7f5a      	ldrb	r2, [r3, #29]
1001150e:	2101      	movs	r1, #1
10011510:	438a      	bics	r2, r1
10011512:	775a      	strb	r2, [r3, #29]
}
10011514:	46c0      	nop			; (mov r8, r8)
10011516:	46bd      	mov	sp, r7
10011518:	b002      	add	sp, #8
1001151a:	bd80      	pop	{r7, pc}
1001151c:	1001ae0c 	.word	0x1001ae0c
10011520:	10017329 	.word	0x10017329

10011524 <init_clock>:

void init_clock(void)
{
10011524:	b580      	push	{r7, lr}
10011526:	b082      	sub	sp, #8
10011528:	af00      	add	r7, sp, #0
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1001152a:	4b2b      	ldr	r3, [pc, #172]	; (100115d8 <init_clock+0xb4>)
1001152c:	681b      	ldr	r3, [r3, #0]
1001152e:	607b      	str	r3, [r7, #4]
	//disable SPI-FLASH core clock
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN);
	//disable SPI core clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN);
10011530:	687b      	ldr	r3, [r7, #4]
10011532:	2204      	movs	r2, #4
10011534:	4393      	bics	r3, r2
10011536:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN);
10011538:	687b      	ldr	r3, [r7, #4]
1001153a:	2208      	movs	r2, #8
1001153c:	4393      	bics	r3, r2
1001153e:	607b      	str	r3, [r7, #4]
	//disable I2C0 Core clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	//disable ARM dual timer core clocks.
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN);
10011540:	687b      	ldr	r3, [r7, #4]
10011542:	2220      	movs	r2, #32
10011544:	4393      	bics	r3, r2
10011546:	607b      	str	r3, [r7, #4]
	//disable counter0 clock 
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN);
	//disable Watchdog core clocks.
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
10011548:	687b      	ldr	r3, [r7, #4]
1001154a:	4a24      	ldr	r2, [pc, #144]	; (100115dc <init_clock+0xb8>)
1001154c:	4013      	ands	r3, r2
1001154e:	607b      	str	r3, [r7, #4]
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
10011550:	687b      	ldr	r3, [r7, #4]
10011552:	4a23      	ldr	r2, [pc, #140]	; (100115e0 <init_clock+0xbc>)
10011554:	4013      	ands	r3, r2
10011556:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
10011558:	687b      	ldr	r3, [r7, #4]
1001155a:	4a22      	ldr	r2, [pc, #136]	; (100115e4 <init_clock+0xc0>)
1001155c:	4013      	ands	r3, r2
1001155e:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
10011560:	687b      	ldr	r3, [r7, #4]
10011562:	4a21      	ldr	r2, [pc, #132]	; (100115e8 <init_clock+0xc4>)
10011564:	4013      	ands	r3, r2
10011566:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
10011568:	687b      	ldr	r3, [r7, #4]
1001156a:	4a20      	ldr	r2, [pc, #128]	; (100115ec <init_clock+0xc8>)
1001156c:	4013      	ands	r3, r2
1001156e:	607b      	str	r3, [r7, #4]
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
10011570:	4b19      	ldr	r3, [pc, #100]	; (100115d8 <init_clock+0xb4>)
10011572:	687a      	ldr	r2, [r7, #4]
10011574:	601a      	str	r2, [r3, #0]
	default_samb11_clock_init[0] = regval;
10011576:	4b1e      	ldr	r3, [pc, #120]	; (100115f0 <init_clock+0xcc>)
10011578:	687a      	ldr	r2, [r7, #4]
1001157a:	601a      	str	r2, [r3, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1001157c:	4b1d      	ldr	r3, [pc, #116]	; (100115f4 <init_clock+0xd0>)
1001157e:	681b      	ldr	r3, [r3, #0]
10011580:	607b      	str	r3, [r7, #4]
	//disable efuse clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN);
10011582:	687b      	ldr	r3, [r7, #4]
10011584:	2201      	movs	r2, #1
10011586:	4393      	bics	r3, r2
10011588:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN);
1001158a:	687b      	ldr	r3, [r7, #4]
1001158c:	2202      	movs	r2, #2
1001158e:	4393      	bics	r3, r2
10011590:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN);
10011592:	687b      	ldr	r3, [r7, #4]
10011594:	2204      	movs	r2, #4
10011596:	4393      	bics	r3, r2
10011598:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
1001159a:	687b      	ldr	r3, [r7, #4]
1001159c:	2208      	movs	r2, #8
1001159e:	4393      	bics	r3, r2
100115a0:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
100115a2:	687b      	ldr	r3, [r7, #4]
100115a4:	2210      	movs	r2, #16
100115a6:	4393      	bics	r3, r2
100115a8:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
100115aa:	687b      	ldr	r3, [r7, #4]
100115ac:	2220      	movs	r2, #32
100115ae:	4393      	bics	r3, r2
100115b0:	607b      	str	r3, [r7, #4]
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
100115b2:	687b      	ldr	r3, [r7, #4]
100115b4:	4a10      	ldr	r2, [pc, #64]	; (100115f8 <init_clock+0xd4>)
100115b6:	4013      	ands	r3, r2
100115b8:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
100115ba:	687b      	ldr	r3, [r7, #4]
100115bc:	4a07      	ldr	r2, [pc, #28]	; (100115dc <init_clock+0xb8>)
100115be:	4013      	ands	r3, r2
100115c0:	607b      	str	r3, [r7, #4]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
100115c2:	4b0c      	ldr	r3, [pc, #48]	; (100115f4 <init_clock+0xd0>)
100115c4:	687a      	ldr	r2, [r7, #4]
100115c6:	601a      	str	r2, [r3, #0]
	default_samb11_clock_init[1] = regval;
100115c8:	4b09      	ldr	r3, [pc, #36]	; (100115f0 <init_clock+0xcc>)
100115ca:	687a      	ldr	r2, [r7, #4]
100115cc:	605a      	str	r2, [r3, #4]
	//ARM debugger
	
	//store default values
}
100115ce:	46c0      	nop			; (mov r8, r8)
100115d0:	46bd      	mov	sp, r7
100115d2:	b002      	add	sp, #8
100115d4:	bd80      	pop	{r7, pc}
100115d6:	46c0      	nop			; (mov r8, r8)
100115d8:	4000b00c 	.word	0x4000b00c
100115dc:	ffffefff 	.word	0xffffefff
100115e0:	ffffdfff 	.word	0xffffdfff
100115e4:	ffffbfff 	.word	0xffffbfff
100115e8:	ffff7fff 	.word	0xffff7fff
100115ec:	fffeffff 	.word	0xfffeffff
100115f0:	1001adf4 	.word	0x1001adf4
100115f4:	4000b010 	.word	0x4000b010
100115f8:	fffff7ff 	.word	0xfffff7ff

100115fc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
100115fc:	b580      	push	{r7, lr}
100115fe:	b082      	sub	sp, #8
10011600:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_NOT_INITIALIZED;
10011602:	1dfb      	adds	r3, r7, #7
10011604:	2205      	movs	r2, #5
10011606:	701a      	strb	r2, [r3, #0]
	if((platform_initialized == 0) || (platform_initialized != 1)) {
10011608:	4b4e      	ldr	r3, [pc, #312]	; (10011744 <platform_driver_init+0x148>)
1001160a:	781b      	ldrb	r3, [r3, #0]
1001160c:	b2db      	uxtb	r3, r3
1001160e:	2b00      	cmp	r3, #0
10011610:	d005      	beq.n	1001161e <platform_driver_init+0x22>
10011612:	4b4c      	ldr	r3, [pc, #304]	; (10011744 <platform_driver_init+0x148>)
10011614:	781b      	ldrb	r3, [r3, #0]
10011616:	b2db      	uxtb	r3, r3
10011618:	2b01      	cmp	r3, #1
1001161a:	d100      	bne.n	1001161e <platform_driver_init+0x22>
1001161c:	e085      	b.n	1001172a <platform_driver_init+0x12e>
		init_port_list();
1001161e:	4b4a      	ldr	r3, [pc, #296]	; (10011748 <platform_driver_init+0x14c>)
10011620:	4798      	blx	r3
		init_clock();
10011622:	4b4a      	ldr	r3, [pc, #296]	; (1001174c <platform_driver_init+0x150>)
10011624:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
10011626:	4b4a      	ldr	r3, [pc, #296]	; (10011750 <platform_driver_init+0x154>)
10011628:	2200      	movs	r2, #0
1001162a:	601a      	str	r2, [r3, #0]

#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
1001162c:	2017      	movs	r0, #23
1001162e:	4b49      	ldr	r3, [pc, #292]	; (10011754 <platform_driver_init+0x158>)
10011630:	4798      	blx	r3
		NVIC_DisableIRQ(GPIO1_IRQn);
10011632:	2018      	movs	r0, #24
10011634:	4b47      	ldr	r3, [pc, #284]	; (10011754 <platform_driver_init+0x158>)
10011636:	4798      	blx	r3
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
10011638:	4b47      	ldr	r3, [pc, #284]	; (10011758 <platform_driver_init+0x15c>)
1001163a:	4a48      	ldr	r2, [pc, #288]	; (1001175c <platform_driver_init+0x160>)
1001163c:	601a      	str	r2, [r3, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1001163e:	4b48      	ldr	r3, [pc, #288]	; (10011760 <platform_driver_init+0x164>)
10011640:	4a48      	ldr	r2, [pc, #288]	; (10011764 <platform_driver_init+0x168>)
10011642:	601a      	str	r2, [r3, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
10011644:	4b48      	ldr	r3, [pc, #288]	; (10011768 <platform_driver_init+0x16c>)
10011646:	4a49      	ldr	r2, [pc, #292]	; (1001176c <platform_driver_init+0x170>)
10011648:	601a      	str	r2, [r3, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1001164a:	4b49      	ldr	r3, [pc, #292]	; (10011770 <platform_driver_init+0x174>)
1001164c:	681b      	ldr	r3, [r3, #0]
1001164e:	001a      	movs	r2, r3
10011650:	4b48      	ldr	r3, [pc, #288]	; (10011774 <platform_driver_init+0x178>)
10011652:	601a      	str	r2, [r3, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
10011654:	4b48      	ldr	r3, [pc, #288]	; (10011778 <platform_driver_init+0x17c>)
10011656:	681b      	ldr	r3, [r3, #0]
10011658:	001a      	movs	r2, r3
1001165a:	4b48      	ldr	r3, [pc, #288]	; (1001177c <platform_driver_init+0x180>)
1001165c:	601a      	str	r2, [r3, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1001165e:	4b48      	ldr	r3, [pc, #288]	; (10011780 <platform_driver_init+0x184>)
10011660:	4a48      	ldr	r2, [pc, #288]	; (10011784 <platform_driver_init+0x188>)
10011662:	601a      	str	r2, [r3, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
10011664:	4b48      	ldr	r3, [pc, #288]	; (10011788 <platform_driver_init+0x18c>)
10011666:	4a49      	ldr	r2, [pc, #292]	; (1001178c <platform_driver_init+0x190>)
10011668:	601a      	str	r2, [r3, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1001166a:	4b49      	ldr	r3, [pc, #292]	; (10011790 <platform_driver_init+0x194>)
1001166c:	4a49      	ldr	r2, [pc, #292]	; (10011794 <platform_driver_init+0x198>)
1001166e:	601a      	str	r2, [r3, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
10011670:	4b49      	ldr	r3, [pc, #292]	; (10011798 <platform_driver_init+0x19c>)
10011672:	4a4a      	ldr	r2, [pc, #296]	; (1001179c <platform_driver_init+0x1a0>)
10011674:	601a      	str	r2, [r3, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
10011676:	4b4a      	ldr	r3, [pc, #296]	; (100117a0 <platform_driver_init+0x1a4>)
10011678:	4a4a      	ldr	r2, [pc, #296]	; (100117a4 <platform_driver_init+0x1a8>)
1001167a:	601a      	str	r2, [r3, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1001167c:	4b4a      	ldr	r3, [pc, #296]	; (100117a8 <platform_driver_init+0x1ac>)
1001167e:	4a4b      	ldr	r2, [pc, #300]	; (100117ac <platform_driver_init+0x1b0>)
10011680:	601a      	str	r2, [r3, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
10011682:	4b4b      	ldr	r3, [pc, #300]	; (100117b0 <platform_driver_init+0x1b4>)
10011684:	4a4b      	ldr	r2, [pc, #300]	; (100117b4 <platform_driver_init+0x1b8>)
10011686:	601a      	str	r2, [r3, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
10011688:	4b4b      	ldr	r3, [pc, #300]	; (100117b8 <platform_driver_init+0x1bc>)
1001168a:	4a4c      	ldr	r2, [pc, #304]	; (100117bc <platform_driver_init+0x1c0>)
1001168c:	601a      	str	r2, [r3, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1001168e:	4b4c      	ldr	r3, [pc, #304]	; (100117c0 <platform_driver_init+0x1c4>)
10011690:	4a4c      	ldr	r2, [pc, #304]	; (100117c4 <platform_driver_init+0x1c8>)
10011692:	601a      	str	r2, [r3, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
10011694:	4b32      	ldr	r3, [pc, #200]	; (10011760 <platform_driver_init+0x164>)
10011696:	681b      	ldr	r3, [r3, #0]
10011698:	2028      	movs	r0, #40	; 0x28
1001169a:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1001169c:	4b2e      	ldr	r3, [pc, #184]	; (10011758 <platform_driver_init+0x15c>)
1001169e:	681b      	ldr	r3, [r3, #0]
100116a0:	4a49      	ldr	r2, [pc, #292]	; (100117c8 <platform_driver_init+0x1cc>)
100116a2:	0011      	movs	r1, r2
100116a4:	2028      	movs	r0, #40	; 0x28
100116a6:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
100116a8:	4b2b      	ldr	r3, [pc, #172]	; (10011758 <platform_driver_init+0x15c>)
100116aa:	681b      	ldr	r3, [r3, #0]
100116ac:	4a47      	ldr	r2, [pc, #284]	; (100117cc <platform_driver_init+0x1d0>)
100116ae:	0011      	movs	r1, r2
100116b0:	2027      	movs	r0, #39	; 0x27
100116b2:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
100116b4:	4b46      	ldr	r3, [pc, #280]	; (100117d0 <platform_driver_init+0x1d4>)
100116b6:	681b      	ldr	r3, [r3, #0]
100116b8:	001a      	movs	r2, r3
100116ba:	4b46      	ldr	r3, [pc, #280]	; (100117d4 <platform_driver_init+0x1d8>)
100116bc:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
100116be:	4b46      	ldr	r3, [pc, #280]	; (100117d8 <platform_driver_init+0x1dc>)
100116c0:	4a46      	ldr	r2, [pc, #280]	; (100117dc <platform_driver_init+0x1e0>)
100116c2:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
100116c4:	4b46      	ldr	r3, [pc, #280]	; (100117e0 <platform_driver_init+0x1e4>)
100116c6:	4a47      	ldr	r2, [pc, #284]	; (100117e4 <platform_driver_init+0x1e8>)
100116c8:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
100116ca:	4b47      	ldr	r3, [pc, #284]	; (100117e8 <platform_driver_init+0x1ec>)
100116cc:	4a47      	ldr	r2, [pc, #284]	; (100117ec <platform_driver_init+0x1f0>)
100116ce:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
100116d0:	4b47      	ldr	r3, [pc, #284]	; (100117f0 <platform_driver_init+0x1f4>)
100116d2:	4a48      	ldr	r2, [pc, #288]	; (100117f4 <platform_driver_init+0x1f8>)
100116d4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
100116d6:	4b48      	ldr	r3, [pc, #288]	; (100117f8 <platform_driver_init+0x1fc>)
100116d8:	4a48      	ldr	r2, [pc, #288]	; (100117fc <platform_driver_init+0x200>)
100116da:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
100116dc:	4b48      	ldr	r3, [pc, #288]	; (10011800 <platform_driver_init+0x204>)
100116de:	4a49      	ldr	r2, [pc, #292]	; (10011804 <platform_driver_init+0x208>)
100116e0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
100116e2:	4b49      	ldr	r3, [pc, #292]	; (10011808 <platform_driver_init+0x20c>)
100116e4:	4a49      	ldr	r2, [pc, #292]	; (1001180c <platform_driver_init+0x210>)
100116e6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
100116e8:	23a0      	movs	r3, #160	; 0xa0
100116ea:	009a      	lsls	r2, r3, #2
100116ec:	4b48      	ldr	r3, [pc, #288]	; (10011810 <platform_driver_init+0x214>)
100116ee:	2100      	movs	r1, #0
100116f0:	0018      	movs	r0, r3
100116f2:	4b48      	ldr	r3, [pc, #288]	; (10011814 <platform_driver_init+0x218>)
100116f4:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
100116f6:	4b48      	ldr	r3, [pc, #288]	; (10011818 <platform_driver_init+0x21c>)
100116f8:	2280      	movs	r2, #128	; 0x80
100116fa:	0092      	lsls	r2, r2, #2
100116fc:	801a      	strh	r2, [r3, #0]
		platform_event_init();
100116fe:	4b47      	ldr	r3, [pc, #284]	; (1001181c <platform_driver_init+0x220>)
10011700:	4798      	blx	r3
		
#ifdef CHIPVERSION_B0
		/* NVIC_EnableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_EnableIRQ(PORT1_COMB_IRQn); */
		NVIC_EnableIRQ(GPIO0_IRQn);
10011702:	2017      	movs	r0, #23
10011704:	4b46      	ldr	r3, [pc, #280]	; (10011820 <platform_driver_init+0x224>)
10011706:	4798      	blx	r3
		NVIC_EnableIRQ(GPIO1_IRQn);
10011708:	2018      	movs	r0, #24
1001170a:	4b45      	ldr	r3, [pc, #276]	; (10011820 <platform_driver_init+0x224>)
1001170c:	4798      	blx	r3
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1001170e:	4b45      	ldr	r3, [pc, #276]	; (10011824 <platform_driver_init+0x228>)
10011710:	2200      	movs	r2, #0
10011712:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
10011714:	4b1e      	ldr	r3, [pc, #120]	; (10011790 <platform_driver_init+0x194>)
10011716:	681b      	ldr	r3, [r3, #0]
10011718:	4a43      	ldr	r2, [pc, #268]	; (10011828 <platform_driver_init+0x22c>)
1001171a:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1001171c:	4b09      	ldr	r3, [pc, #36]	; (10011744 <platform_driver_init+0x148>)
1001171e:	2201      	movs	r2, #1
10011720:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
10011722:	1dfb      	adds	r3, r7, #7
10011724:	2200      	movs	r2, #0
10011726:	701a      	strb	r2, [r3, #0]
10011728:	e005      	b.n	10011736 <platform_driver_init+0x13a>
	}
	else {
		platform_initialized = 1;
1001172a:	4b06      	ldr	r3, [pc, #24]	; (10011744 <platform_driver_init+0x148>)
1001172c:	2201      	movs	r2, #1
1001172e:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
10011730:	1dfb      	adds	r3, r7, #7
10011732:	2201      	movs	r2, #1
10011734:	701a      	strb	r2, [r3, #0]
	}
	return status;
10011736:	1dfb      	adds	r3, r7, #7
10011738:	781b      	ldrb	r3, [r3, #0]
}
1001173a:	0018      	movs	r0, r3
1001173c:	46bd      	mov	sp, r7
1001173e:	b002      	add	sp, #8
10011740:	bd80      	pop	{r7, pc}
10011742:	46c0      	nop			; (mov r8, r8)
10011744:	1001a11c 	.word	0x1001a11c
10011748:	10011499 	.word	0x10011499
1001174c:	10011525 	.word	0x10011525
10011750:	1001a120 	.word	0x1001a120
10011754:	10011469 	.word	0x10011469
10011758:	1001b0c0 	.word	0x1001b0c0
1001175c:	000007d7 	.word	0x000007d7
10011760:	1001ae00 	.word	0x1001ae00
10011764:	000007bd 	.word	0x000007bd
10011768:	1001b0c4 	.word	0x1001b0c4
1001176c:	0001bc51 	.word	0x0001bc51
10011770:	100400bc 	.word	0x100400bc
10011774:	1001a114 	.word	0x1001a114
10011778:	100400b8 	.word	0x100400b8
1001177c:	1001a118 	.word	0x1001a118
10011780:	1001adfc 	.word	0x1001adfc
10011784:	0001b99f 	.word	0x0001b99f
10011788:	1001ae04 	.word	0x1001ae04
1001178c:	0001b9db 	.word	0x0001b9db
10011790:	1001b0d0 	.word	0x1001b0d0
10011794:	1004003c 	.word	0x1004003c
10011798:	1001ae08 	.word	0x1001ae08
1001179c:	10041fc0 	.word	0x10041fc0
100117a0:	1001b0cc 	.word	0x1001b0cc
100117a4:	10041fc4 	.word	0x10041fc4
100117a8:	1001a0e4 	.word	0x1001a0e4
100117ac:	0001cbe9 	.word	0x0001cbe9
100117b0:	1001a0e8 	.word	0x1001a0e8
100117b4:	0001cd8f 	.word	0x0001cd8f
100117b8:	1001a0ec 	.word	0x1001a0ec
100117bc:	0001cea3 	.word	0x0001cea3
100117c0:	1001a0f0 	.word	0x1001a0f0
100117c4:	0001cbcf 	.word	0x0001cbcf
100117c8:	10012321 	.word	0x10012321
100117cc:	10012261 	.word	0x10012261
100117d0:	100400e4 	.word	0x100400e4
100117d4:	1001a0fc 	.word	0x1001a0fc
100117d8:	1001a100 	.word	0x1001a100
100117dc:	00019fe9 	.word	0x00019fe9
100117e0:	1001a104 	.word	0x1001a104
100117e4:	0001dbdd 	.word	0x0001dbdd
100117e8:	1001a108 	.word	0x1001a108
100117ec:	0001dc5b 	.word	0x0001dc5b
100117f0:	1001a0f4 	.word	0x1001a0f4
100117f4:	100405ec 	.word	0x100405ec
100117f8:	1001a10c 	.word	0x1001a10c
100117fc:	0001d5e3 	.word	0x0001d5e3
10011800:	1001a0f8 	.word	0x1001a0f8
10011804:	10040c20 	.word	0x10040c20
10011808:	1001a110 	.word	0x1001a110
1001180c:	00019f09 	.word	0x00019f09
10011810:	1001ae40 	.word	0x1001ae40
10011814:	10017329 	.word	0x10017329
10011818:	1001b0d4 	.word	0x1001b0d4
1001181c:	100113ed 	.word	0x100113ed
10011820:	1001143d 	.word	0x1001143d
10011824:	1001b0c8 	.word	0x1001b0c8
10011828:	100120fd 	.word	0x100120fd

1001182c <platform_register_ble_msg_handler>:
}
#endif	//CHIPVERSION_A4


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
1001182c:	b580      	push	{r7, lr}
1001182e:	b084      	sub	sp, #16
10011830:	af00      	add	r7, sp, #0
10011832:	6078      	str	r0, [r7, #4]
	plf_drv_status status;
	if(platform_initialized == 1) {
10011834:	4b0b      	ldr	r3, [pc, #44]	; (10011864 <platform_register_ble_msg_handler+0x38>)
10011836:	781b      	ldrb	r3, [r3, #0]
10011838:	b2db      	uxtb	r3, r3
1001183a:	2b01      	cmp	r3, #1
1001183c:	d107      	bne.n	1001184e <platform_register_ble_msg_handler+0x22>
		ble_stack_message_handler = fp;
1001183e:	4b0a      	ldr	r3, [pc, #40]	; (10011868 <platform_register_ble_msg_handler+0x3c>)
10011840:	687a      	ldr	r2, [r7, #4]
10011842:	601a      	str	r2, [r3, #0]
		status = STATUS_SUCCESS;
10011844:	230f      	movs	r3, #15
10011846:	18fb      	adds	r3, r7, r3
10011848:	2200      	movs	r2, #0
1001184a:	701a      	strb	r2, [r3, #0]
1001184c:	e003      	b.n	10011856 <platform_register_ble_msg_handler+0x2a>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1001184e:	230f      	movs	r3, #15
10011850:	18fb      	adds	r3, r7, r3
10011852:	2205      	movs	r2, #5
10011854:	701a      	strb	r2, [r3, #0]
	}
	return status;
10011856:	230f      	movs	r3, #15
10011858:	18fb      	adds	r3, r7, r3
1001185a:	781b      	ldrb	r3, [r3, #0]
}
1001185c:	0018      	movs	r0, r3
1001185e:	46bd      	mov	sp, r7
10011860:	b004      	add	sp, #16
10011862:	bd80      	pop	{r7, pc}
10011864:	1001a11c 	.word	0x1001a11c
10011868:	1001a120 	.word	0x1001a120

1001186c <at_ke_msg_send>:

static void at_ke_msg_send(void const * param_ptr)
{
1001186c:	b580      	push	{r7, lr}
1001186e:	b084      	sub	sp, #16
10011870:	af00      	add	r7, sp, #0
10011872:	6078      	str	r0, [r7, #4]
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
10011874:	4b18      	ldr	r3, [pc, #96]	; (100118d8 <at_ke_msg_send+0x6c>)
10011876:	681b      	ldr	r3, [r3, #0]
10011878:	b2da      	uxtb	r2, r3
1001187a:	230f      	movs	r3, #15
1001187c:	18fb      	adds	r3, r7, r3
1001187e:	2101      	movs	r1, #1
10011880:	400a      	ands	r2, r1
10011882:	701a      	strb	r2, [r3, #0]
	ke_msg_send(param_ptr);
10011884:	4b15      	ldr	r3, [pc, #84]	; (100118dc <at_ke_msg_send+0x70>)
10011886:	681b      	ldr	r3, [r3, #0]
10011888:	687a      	ldr	r2, [r7, #4]
1001188a:	0010      	movs	r0, r2
1001188c:	4798      	blx	r3
	if(osc_en == 0)
1001188e:	230f      	movs	r3, #15
10011890:	18fb      	adds	r3, r7, r3
10011892:	781b      	ldrb	r3, [r3, #0]
10011894:	2b00      	cmp	r3, #0
10011896:	d115      	bne.n	100118c4 <at_ke_msg_send+0x58>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
10011898:	4b11      	ldr	r3, [pc, #68]	; (100118e0 <at_ke_msg_send+0x74>)
1001189a:	681b      	ldr	r3, [r3, #0]
1001189c:	2002      	movs	r0, #2
1001189e:	4798      	blx	r3
		pwr_arm_wakeup_req();
100118a0:	4b10      	ldr	r3, [pc, #64]	; (100118e4 <at_ke_msg_send+0x78>)
100118a2:	681b      	ldr	r3, [r3, #0]
100118a4:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
100118a6:	46c0      	nop			; (mov r8, r8)
100118a8:	4b0f      	ldr	r3, [pc, #60]	; (100118e8 <at_ke_msg_send+0x7c>)
100118aa:	681b      	ldr	r3, [r3, #0]
100118ac:	2003      	movs	r0, #3
100118ae:	4798      	blx	r3
100118b0:	1e03      	subs	r3, r0, #0
100118b2:	d1f9      	bne.n	100118a8 <at_ke_msg_send+0x3c>
		pwr_disable_arm_wakeup(1<<1);
100118b4:	4b0d      	ldr	r3, [pc, #52]	; (100118ec <at_ke_msg_send+0x80>)
100118b6:	681b      	ldr	r3, [r3, #0]
100118b8:	2002      	movs	r0, #2
100118ba:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
100118bc:	4b0c      	ldr	r3, [pc, #48]	; (100118f0 <at_ke_msg_send+0x84>)
100118be:	2201      	movs	r2, #1
100118c0:	601a      	str	r2, [r3, #0]
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
	}
}
100118c2:	e005      	b.n	100118d0 <at_ke_msg_send+0x64>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
100118c4:	4b0b      	ldr	r3, [pc, #44]	; (100118f4 <at_ke_msg_send+0x88>)
100118c6:	681a      	ldr	r2, [r3, #0]
100118c8:	4b0b      	ldr	r3, [pc, #44]	; (100118f8 <at_ke_msg_send+0x8c>)
100118ca:	681b      	ldr	r3, [r3, #0]
100118cc:	0018      	movs	r0, r3
100118ce:	4790      	blx	r2
	}
}
100118d0:	46c0      	nop			; (mov r8, r8)
100118d2:	46bd      	mov	sp, r7
100118d4:	b004      	add	sp, #16
100118d6:	bd80      	pop	{r7, pc}
100118d8:	4000b1ec 	.word	0x4000b1ec
100118dc:	1001a0fc 	.word	0x1001a0fc
100118e0:	1001a0e4 	.word	0x1001a0e4
100118e4:	1001a0ec 	.word	0x1001a0ec
100118e8:	1001a0f0 	.word	0x1001a0f0
100118ec:	1001a0e8 	.word	0x1001a0e8
100118f0:	4000b020 	.word	0x4000b020
100118f4:	1001a104 	.word	0x1001a104
100118f8:	1001a0f4 	.word	0x1001a0f4

100118fc <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
100118fc:	b590      	push	{r4, r7, lr}
100118fe:	b087      	sub	sp, #28
10011900:	af00      	add	r7, sp, #0
10011902:	6078      	str	r0, [r7, #4]
10011904:	6039      	str	r1, [r7, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
10011906:	687b      	ldr	r3, [r7, #4]
10011908:	617b      	str	r3, [r7, #20]
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1001190a:	2312      	movs	r3, #18
1001190c:	18fb      	adds	r3, r7, r3
1001190e:	697a      	ldr	r2, [r7, #20]
10011910:	8852      	ldrh	r2, [r2, #2]
10011912:	801a      	strh	r2, [r3, #0]
	if(gapm_get_task_from_id != NULL)
10011914:	4b1b      	ldr	r3, [pc, #108]	; (10011984 <platform_interface_send+0x88>)
10011916:	681b      	ldr	r3, [r3, #0]
10011918:	2b00      	cmp	r3, #0
1001191a:	d00a      	beq.n	10011932 <platform_interface_send+0x36>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1001191c:	4b19      	ldr	r3, [pc, #100]	; (10011984 <platform_interface_send+0x88>)
1001191e:	681b      	ldr	r3, [r3, #0]
10011920:	2212      	movs	r2, #18
10011922:	18ba      	adds	r2, r7, r2
10011924:	8812      	ldrh	r2, [r2, #0]
10011926:	0010      	movs	r0, r2
10011928:	4798      	blx	r3
1001192a:	0003      	movs	r3, r0
1001192c:	001a      	movs	r2, r3
1001192e:	697b      	ldr	r3, [r7, #20]
10011930:	805a      	strh	r2, [r3, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
10011932:	4b15      	ldr	r3, [pc, #84]	; (10011988 <platform_interface_send+0x8c>)
10011934:	681c      	ldr	r4, [r3, #0]
10011936:	697b      	ldr	r3, [r7, #20]
10011938:	8818      	ldrh	r0, [r3, #0]
1001193a:	697b      	ldr	r3, [r7, #20]
1001193c:	8859      	ldrh	r1, [r3, #2]
1001193e:	697b      	ldr	r3, [r7, #20]
10011940:	889a      	ldrh	r2, [r3, #4]
10011942:	697b      	ldr	r3, [r7, #20]
10011944:	88db      	ldrh	r3, [r3, #6]
10011946:	47a0      	blx	r4
10011948:	0003      	movs	r3, r0
1001194a:	60fb      	str	r3, [r7, #12]
											
	//no params
	if (p_msg_hdr->param_len == 0)
1001194c:	697b      	ldr	r3, [r7, #20]
1001194e:	88db      	ldrh	r3, [r3, #6]
10011950:	2b00      	cmp	r3, #0
10011952:	d104      	bne.n	1001195e <platform_interface_send+0x62>
	{
		// Send message directly
		at_ke_msg_send(params);
10011954:	68fb      	ldr	r3, [r7, #12]
10011956:	0018      	movs	r0, r3
10011958:	4b0c      	ldr	r3, [pc, #48]	; (1001198c <platform_interface_send+0x90>)
1001195a:	4798      	blx	r3
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
		// Send the kernel message
		at_ke_msg_send(params);
	}
}
1001195c:	e00d      	b.n	1001197a <platform_interface_send+0x7e>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1001195e:	687b      	ldr	r3, [r7, #4]
10011960:	3308      	adds	r3, #8
10011962:	0019      	movs	r1, r3
10011964:	697b      	ldr	r3, [r7, #20]
10011966:	88db      	ldrh	r3, [r3, #6]
10011968:	001a      	movs	r2, r3
1001196a:	68fb      	ldr	r3, [r7, #12]
1001196c:	0018      	movs	r0, r3
1001196e:	4b08      	ldr	r3, [pc, #32]	; (10011990 <platform_interface_send+0x94>)
10011970:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
10011972:	68fb      	ldr	r3, [r7, #12]
10011974:	0018      	movs	r0, r3
10011976:	4b05      	ldr	r3, [pc, #20]	; (1001198c <platform_interface_send+0x90>)
10011978:	4798      	blx	r3
	}
}
1001197a:	46c0      	nop			; (mov r8, r8)
1001197c:	46bd      	mov	sp, r7
1001197e:	b007      	add	sp, #28
10011980:	bd90      	pop	{r4, r7, pc}
10011982:	46c0      	nop			; (mov r8, r8)
10011984:	1001a114 	.word	0x1001a114
10011988:	1001a100 	.word	0x1001a100
1001198c:	1001186d 	.word	0x1001186d
10011990:	10017317 	.word	0x10017317

10011994 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
10011994:	b590      	push	{r4, r7, lr}
10011996:	b085      	sub	sp, #20
10011998:	af00      	add	r7, sp, #0
1001199a:	0004      	movs	r4, r0
1001199c:	0008      	movs	r0, r1
1001199e:	603a      	str	r2, [r7, #0]
100119a0:	0019      	movs	r1, r3
100119a2:	1dfb      	adds	r3, r7, #7
100119a4:	1c22      	adds	r2, r4, #0
100119a6:	701a      	strb	r2, [r3, #0]
100119a8:	1dbb      	adds	r3, r7, #6
100119aa:	1c02      	adds	r2, r0, #0
100119ac:	701a      	strb	r2, [r3, #0]
100119ae:	1d3b      	adds	r3, r7, #4
100119b0:	1c0a      	adds	r2, r1, #0
100119b2:	801a      	strh	r2, [r3, #0]
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
100119b4:	4b19      	ldr	r3, [pc, #100]	; (10011a1c <send_plf_int_msg_ind+0x88>)
100119b6:	681a      	ldr	r2, [r3, #0]
100119b8:	4b19      	ldr	r3, [pc, #100]	; (10011a20 <send_plf_int_msg_ind+0x8c>)
100119ba:	681b      	ldr	r3, [r3, #0]
100119bc:	0018      	movs	r0, r3
100119be:	4790      	blx	r2
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
100119c0:	4b18      	ldr	r3, [pc, #96]	; (10011a24 <send_plf_int_msg_ind+0x90>)
100119c2:	681c      	ldr	r4, [r3, #0]
100119c4:	1dbb      	adds	r3, r7, #6
100119c6:	781b      	ldrb	r3, [r3, #0]
100119c8:	021b      	lsls	r3, r3, #8
100119ca:	b21a      	sxth	r2, r3
100119cc:	1dfb      	adds	r3, r7, #7
100119ce:	781b      	ldrb	r3, [r3, #0]
100119d0:	b21b      	sxth	r3, r3
100119d2:	4313      	orrs	r3, r2
100119d4:	b21b      	sxth	r3, r3
100119d6:	b29a      	uxth	r2, r3
100119d8:	1d3b      	adds	r3, r7, #4
100119da:	8819      	ldrh	r1, [r3, #0]
100119dc:	23a0      	movs	r3, #160	; 0xa0
100119de:	00d8      	lsls	r0, r3, #3
100119e0:	000b      	movs	r3, r1
100119e2:	2105      	movs	r1, #5
100119e4:	47a0      	blx	r4
100119e6:	0003      	movs	r3, r0
100119e8:	60fb      	str	r3, [r7, #12]
											
	//no params
	if(params != NULL) {
100119ea:	68fb      	ldr	r3, [r7, #12]
100119ec:	2b00      	cmp	r3, #0
100119ee:	d011      	beq.n	10011a14 <send_plf_int_msg_ind+0x80>
		if((data_len != 0) && (NULL != data))
100119f0:	1d3b      	adds	r3, r7, #4
100119f2:	881b      	ldrh	r3, [r3, #0]
100119f4:	2b00      	cmp	r3, #0
100119f6:	d009      	beq.n	10011a0c <send_plf_int_msg_ind+0x78>
100119f8:	683b      	ldr	r3, [r7, #0]
100119fa:	2b00      	cmp	r3, #0
100119fc:	d006      	beq.n	10011a0c <send_plf_int_msg_ind+0x78>
		{
			//copy params
			memcpy(params, data, data_len);
100119fe:	1d3b      	adds	r3, r7, #4
10011a00:	881a      	ldrh	r2, [r3, #0]
10011a02:	6839      	ldr	r1, [r7, #0]
10011a04:	68fb      	ldr	r3, [r7, #12]
10011a06:	0018      	movs	r0, r3
10011a08:	4b07      	ldr	r3, [pc, #28]	; (10011a28 <send_plf_int_msg_ind+0x94>)
10011a0a:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
10011a0c:	68fb      	ldr	r3, [r7, #12]
10011a0e:	0018      	movs	r0, r3
10011a10:	4b06      	ldr	r3, [pc, #24]	; (10011a2c <send_plf_int_msg_ind+0x98>)
10011a12:	4798      	blx	r3
	}
}
10011a14:	46c0      	nop			; (mov r8, r8)
10011a16:	46bd      	mov	sp, r7
10011a18:	b005      	add	sp, #20
10011a1a:	bd90      	pop	{r4, r7, pc}
10011a1c:	1001a104 	.word	0x1001a104
10011a20:	1001a0f4 	.word	0x1001a0f4
10011a24:	1001a100 	.word	0x1001a100
10011a28:	10017317 	.word	0x10017317
10011a2c:	1001186d 	.word	0x1001186d

10011a30 <NMI_MsgQueueDestroyOnKeID>:
	os_sem_up(&pHandle->strCriticalSection);
	return MsgQueueNoMsgs;
}
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
10011a30:	b580      	push	{r7, lr}
10011a32:	b086      	sub	sp, #24
10011a34:	af00      	add	r7, sp, #0
10011a36:	6078      	str	r0, [r7, #4]
10011a38:	000a      	movs	r2, r1
10011a3a:	1cbb      	adds	r3, r7, #2
10011a3c:	801a      	strh	r2, [r3, #0]
	int num_of_freed=0;
10011a3e:	2300      	movs	r3, #0
10011a40:	617b      	str	r3, [r7, #20]
	Message * current , *prev = NULL;
10011a42:	2300      	movs	r3, #0
10011a44:	60fb      	str	r3, [r7, #12]
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
10011a46:	687b      	ldr	r3, [r7, #4]
10011a48:	2b00      	cmp	r3, #0
10011a4a:	d105      	bne.n	10011a58 <NMI_MsgQueueDestroyOnKeID+0x28>
10011a4c:	687b      	ldr	r3, [r7, #4]
10011a4e:	6a1b      	ldr	r3, [r3, #32]
10011a50:	2b00      	cmp	r3, #0
10011a52:	d101      	bne.n	10011a58 <NMI_MsgQueueDestroyOnKeID+0x28>
	{
		return num_of_freed;
10011a54:	697b      	ldr	r3, [r7, #20]
10011a56:	e03f      	b.n	10011ad8 <NMI_MsgQueueDestroyOnKeID+0xa8>
	}

	current = pHandle->pstrMessageList;
10011a58:	687b      	ldr	r3, [r7, #4]
10011a5a:	6a1b      	ldr	r3, [r3, #32]
10011a5c:	613b      	str	r3, [r7, #16]
	os_sem_down(&pHandle->strCriticalSection);
10011a5e:	4b20      	ldr	r3, [pc, #128]	; (10011ae0 <NMI_MsgQueueDestroyOnKeID+0xb0>)
10011a60:	681b      	ldr	r3, [r3, #0]
10011a62:	687a      	ldr	r2, [r7, #4]
10011a64:	3214      	adds	r2, #20
10011a66:	0010      	movs	r0, r2
10011a68:	4798      	blx	r3
	while(NULL != current)
10011a6a:	e02b      	b.n	10011ac4 <NMI_MsgQueueDestroyOnKeID+0x94>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
10011a6c:	693b      	ldr	r3, [r7, #16]
10011a6e:	681b      	ldr	r3, [r3, #0]
10011a70:	889b      	ldrh	r3, [r3, #4]
10011a72:	1cba      	adds	r2, r7, #2
10011a74:	8812      	ldrh	r2, [r2, #0]
10011a76:	429a      	cmp	r2, r3
10011a78:	d11f      	bne.n	10011aba <NMI_MsgQueueDestroyOnKeID+0x8a>
		{
			num_of_freed++;
10011a7a:	697b      	ldr	r3, [r7, #20]
10011a7c:	3301      	adds	r3, #1
10011a7e:	617b      	str	r3, [r7, #20]
			if(NULL != prev)
10011a80:	68fb      	ldr	r3, [r7, #12]
10011a82:	2b00      	cmp	r3, #0
10011a84:	d00c      	beq.n	10011aa0 <NMI_MsgQueueDestroyOnKeID+0x70>
			{
				prev->pstrNext = current->pstrNext;
10011a86:	693b      	ldr	r3, [r7, #16]
10011a88:	689a      	ldr	r2, [r3, #8]
10011a8a:	68fb      	ldr	r3, [r7, #12]
10011a8c:	609a      	str	r2, [r3, #8]
				ke_free(current);
10011a8e:	4b15      	ldr	r3, [pc, #84]	; (10011ae4 <NMI_MsgQueueDestroyOnKeID+0xb4>)
10011a90:	681b      	ldr	r3, [r3, #0]
10011a92:	693a      	ldr	r2, [r7, #16]
10011a94:	0010      	movs	r0, r2
10011a96:	4798      	blx	r3
				current = prev->pstrNext;
10011a98:	68fb      	ldr	r3, [r7, #12]
10011a9a:	689b      	ldr	r3, [r3, #8]
10011a9c:	613b      	str	r3, [r7, #16]
10011a9e:	e011      	b.n	10011ac4 <NMI_MsgQueueDestroyOnKeID+0x94>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
10011aa0:	693b      	ldr	r3, [r7, #16]
10011aa2:	689a      	ldr	r2, [r3, #8]
10011aa4:	687b      	ldr	r3, [r7, #4]
10011aa6:	621a      	str	r2, [r3, #32]
				ke_free(current);
10011aa8:	4b0e      	ldr	r3, [pc, #56]	; (10011ae4 <NMI_MsgQueueDestroyOnKeID+0xb4>)
10011aaa:	681b      	ldr	r3, [r3, #0]
10011aac:	693a      	ldr	r2, [r7, #16]
10011aae:	0010      	movs	r0, r2
10011ab0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
10011ab2:	687b      	ldr	r3, [r7, #4]
10011ab4:	6a1b      	ldr	r3, [r3, #32]
10011ab6:	613b      	str	r3, [r7, #16]
10011ab8:	e004      	b.n	10011ac4 <NMI_MsgQueueDestroyOnKeID+0x94>
			}
		}
		else
		{
			prev = current;
10011aba:	693b      	ldr	r3, [r7, #16]
10011abc:	60fb      	str	r3, [r7, #12]
			current = current ->pstrNext;
10011abe:	693b      	ldr	r3, [r7, #16]
10011ac0:	689b      	ldr	r3, [r3, #8]
10011ac2:	613b      	str	r3, [r7, #16]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
10011ac4:	693b      	ldr	r3, [r7, #16]
10011ac6:	2b00      	cmp	r3, #0
10011ac8:	d1d0      	bne.n	10011a6c <NMI_MsgQueueDestroyOnKeID+0x3c>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
10011aca:	4b07      	ldr	r3, [pc, #28]	; (10011ae8 <NMI_MsgQueueDestroyOnKeID+0xb8>)
10011acc:	681b      	ldr	r3, [r3, #0]
10011ace:	687a      	ldr	r2, [r7, #4]
10011ad0:	3214      	adds	r2, #20
10011ad2:	0010      	movs	r0, r2
10011ad4:	4798      	blx	r3
	return num_of_freed;
10011ad6:	697b      	ldr	r3, [r7, #20]
}
10011ad8:	0018      	movs	r0, r3
10011ada:	46bd      	mov	sp, r7
10011adc:	b006      	add	sp, #24
10011ade:	bd80      	pop	{r7, pc}
10011ae0:	1001a108 	.word	0x1001a108
10011ae4:	1001a110 	.word	0x1001a110
10011ae8:	1001a104 	.word	0x1001a104

10011aec <platform_start_event_timeout>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
10011aec:	b580      	push	{r7, lr}
10011aee:	b086      	sub	sp, #24
10011af0:	af00      	add	r7, sp, #0
10011af2:	6078      	str	r0, [r7, #4]
	uint8_t msg[8+5] = {0};
10011af4:	2308      	movs	r3, #8
10011af6:	18fb      	adds	r3, r7, r3
10011af8:	0018      	movs	r0, r3
10011afa:	230d      	movs	r3, #13
10011afc:	001a      	movs	r2, r3
10011afe:	2100      	movs	r1, #0
10011b00:	4b5a      	ldr	r3, [pc, #360]	; (10011c6c <platform_start_event_timeout+0x180>)
10011b02:	4798      	blx	r3
	uint8_t u16TxLen = 0;
10011b04:	2317      	movs	r3, #23
10011b06:	18fb      	adds	r3, r7, r3
10011b08:	2200      	movs	r2, #0
10011b0a:	701a      	strb	r2, [r3, #0]

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
10011b0c:	2317      	movs	r3, #23
10011b0e:	18fb      	adds	r3, r7, r3
10011b10:	781b      	ldrb	r3, [r3, #0]
10011b12:	2217      	movs	r2, #23
10011b14:	18ba      	adds	r2, r7, r2
10011b16:	1c59      	adds	r1, r3, #1
10011b18:	7011      	strb	r1, [r2, #0]
10011b1a:	001a      	movs	r2, r3
10011b1c:	2308      	movs	r3, #8
10011b1e:	18fb      	adds	r3, r7, r3
10011b20:	2119      	movs	r1, #25
10011b22:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
10011b24:	2317      	movs	r3, #23
10011b26:	18fb      	adds	r3, r7, r3
10011b28:	781b      	ldrb	r3, [r3, #0]
10011b2a:	2217      	movs	r2, #23
10011b2c:	18ba      	adds	r2, r7, r2
10011b2e:	1c59      	adds	r1, r3, #1
10011b30:	7011      	strb	r1, [r2, #0]
10011b32:	001a      	movs	r2, r3
10011b34:	2308      	movs	r3, #8
10011b36:	18fb      	adds	r3, r7, r3
10011b38:	2103      	movs	r1, #3
10011b3a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
10011b3c:	2317      	movs	r3, #23
10011b3e:	18fb      	adds	r3, r7, r3
10011b40:	781b      	ldrb	r3, [r3, #0]
10011b42:	2217      	movs	r2, #23
10011b44:	18ba      	adds	r2, r7, r2
10011b46:	1c59      	adds	r1, r3, #1
10011b48:	7011      	strb	r1, [r2, #0]
10011b4a:	001a      	movs	r2, r3
10011b4c:	2308      	movs	r3, #8
10011b4e:	18fb      	adds	r3, r7, r3
10011b50:	2103      	movs	r1, #3
10011b52:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
10011b54:	2317      	movs	r3, #23
10011b56:	18fb      	adds	r3, r7, r3
10011b58:	781b      	ldrb	r3, [r3, #0]
10011b5a:	2217      	movs	r2, #23
10011b5c:	18ba      	adds	r2, r7, r2
10011b5e:	1c59      	adds	r1, r3, #1
10011b60:	7011      	strb	r1, [r2, #0]
10011b62:	001a      	movs	r2, r3
10011b64:	2308      	movs	r3, #8
10011b66:	18fb      	adds	r3, r7, r3
10011b68:	2100      	movs	r1, #0
10011b6a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
10011b6c:	2317      	movs	r3, #23
10011b6e:	18fb      	adds	r3, r7, r3
10011b70:	781b      	ldrb	r3, [r3, #0]
10011b72:	2217      	movs	r2, #23
10011b74:	18ba      	adds	r2, r7, r2
10011b76:	1c59      	adds	r1, r3, #1
10011b78:	7011      	strb	r1, [r2, #0]
10011b7a:	001a      	movs	r2, r3
10011b7c:	2308      	movs	r3, #8
10011b7e:	18fb      	adds	r3, r7, r3
10011b80:	2105      	movs	r1, #5
10011b82:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
10011b84:	2317      	movs	r3, #23
10011b86:	18fb      	adds	r3, r7, r3
10011b88:	781b      	ldrb	r3, [r3, #0]
10011b8a:	2217      	movs	r2, #23
10011b8c:	18ba      	adds	r2, r7, r2
10011b8e:	1c59      	adds	r1, r3, #1
10011b90:	7011      	strb	r1, [r2, #0]
10011b92:	001a      	movs	r2, r3
10011b94:	2308      	movs	r3, #8
10011b96:	18fb      	adds	r3, r7, r3
10011b98:	2100      	movs	r1, #0
10011b9a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((5) & 0x00FF );
10011b9c:	2317      	movs	r3, #23
10011b9e:	18fb      	adds	r3, r7, r3
10011ba0:	781b      	ldrb	r3, [r3, #0]
10011ba2:	2217      	movs	r2, #23
10011ba4:	18ba      	adds	r2, r7, r2
10011ba6:	1c59      	adds	r1, r3, #1
10011ba8:	7011      	strb	r1, [r2, #0]
10011baa:	001a      	movs	r2, r3
10011bac:	2308      	movs	r3, #8
10011bae:	18fb      	adds	r3, r7, r3
10011bb0:	2105      	movs	r1, #5
10011bb2:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
10011bb4:	2317      	movs	r3, #23
10011bb6:	18fb      	adds	r3, r7, r3
10011bb8:	781b      	ldrb	r3, [r3, #0]
10011bba:	2217      	movs	r2, #23
10011bbc:	18ba      	adds	r2, r7, r2
10011bbe:	1c59      	adds	r1, r3, #1
10011bc0:	7011      	strb	r1, [r2, #0]
10011bc2:	001a      	movs	r2, r3
10011bc4:	2308      	movs	r3, #8
10011bc6:	18fb      	adds	r3, r7, r3
10011bc8:	2100      	movs	r1, #0
10011bca:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
10011bcc:	2317      	movs	r3, #23
10011bce:	18fb      	adds	r3, r7, r3
10011bd0:	781b      	ldrb	r3, [r3, #0]
10011bd2:	2217      	movs	r2, #23
10011bd4:	18ba      	adds	r2, r7, r2
10011bd6:	1c59      	adds	r1, r3, #1
10011bd8:	7011      	strb	r1, [r2, #0]
10011bda:	001a      	movs	r2, r3
10011bdc:	687b      	ldr	r3, [r7, #4]
10011bde:	b2d9      	uxtb	r1, r3
10011be0:	2308      	movs	r3, #8
10011be2:	18fb      	adds	r3, r7, r3
10011be4:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
10011be6:	2317      	movs	r3, #23
10011be8:	18fb      	adds	r3, r7, r3
10011bea:	781b      	ldrb	r3, [r3, #0]
10011bec:	2217      	movs	r2, #23
10011bee:	18ba      	adds	r2, r7, r2
10011bf0:	1c59      	adds	r1, r3, #1
10011bf2:	7011      	strb	r1, [r2, #0]
10011bf4:	001a      	movs	r2, r3
10011bf6:	687b      	ldr	r3, [r7, #4]
10011bf8:	0a1b      	lsrs	r3, r3, #8
10011bfa:	b2d9      	uxtb	r1, r3
10011bfc:	2308      	movs	r3, #8
10011bfe:	18fb      	adds	r3, r7, r3
10011c00:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
10011c02:	2317      	movs	r3, #23
10011c04:	18fb      	adds	r3, r7, r3
10011c06:	781b      	ldrb	r3, [r3, #0]
10011c08:	2217      	movs	r2, #23
10011c0a:	18ba      	adds	r2, r7, r2
10011c0c:	1c59      	adds	r1, r3, #1
10011c0e:	7011      	strb	r1, [r2, #0]
10011c10:	001a      	movs	r2, r3
10011c12:	687b      	ldr	r3, [r7, #4]
10011c14:	0c1b      	lsrs	r3, r3, #16
10011c16:	b2d9      	uxtb	r1, r3
10011c18:	2308      	movs	r3, #8
10011c1a:	18fb      	adds	r3, r7, r3
10011c1c:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
10011c1e:	2317      	movs	r3, #23
10011c20:	18fb      	adds	r3, r7, r3
10011c22:	781b      	ldrb	r3, [r3, #0]
10011c24:	2217      	movs	r2, #23
10011c26:	18ba      	adds	r2, r7, r2
10011c28:	1c59      	adds	r1, r3, #1
10011c2a:	7011      	strb	r1, [r2, #0]
10011c2c:	001a      	movs	r2, r3
10011c2e:	687b      	ldr	r3, [r7, #4]
10011c30:	0e1b      	lsrs	r3, r3, #24
10011c32:	b2d9      	uxtb	r1, r3
10011c34:	2308      	movs	r3, #8
10011c36:	18fb      	adds	r3, r7, r3
10011c38:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
10011c3a:	2317      	movs	r3, #23
10011c3c:	18fb      	adds	r3, r7, r3
10011c3e:	781b      	ldrb	r3, [r3, #0]
10011c40:	2217      	movs	r2, #23
10011c42:	18ba      	adds	r2, r7, r2
10011c44:	1c59      	adds	r1, r3, #1
10011c46:	7011      	strb	r1, [r2, #0]
10011c48:	001a      	movs	r2, r3
10011c4a:	2308      	movs	r3, #8
10011c4c:	18fb      	adds	r3, r7, r3
10011c4e:	2101      	movs	r1, #1
10011c50:	5499      	strb	r1, [r3, r2]
	
	platform_interface_send(msg, u16TxLen);
10011c52:	2317      	movs	r3, #23
10011c54:	18fb      	adds	r3, r7, r3
10011c56:	781a      	ldrb	r2, [r3, #0]
10011c58:	2308      	movs	r3, #8
10011c5a:	18fb      	adds	r3, r7, r3
10011c5c:	0011      	movs	r1, r2
10011c5e:	0018      	movs	r0, r3
10011c60:	4b03      	ldr	r3, [pc, #12]	; (10011c70 <platform_start_event_timeout+0x184>)
10011c62:	4798      	blx	r3
}
10011c64:	46c0      	nop			; (mov r8, r8)
10011c66:	46bd      	mov	sp, r7
10011c68:	b006      	add	sp, #24
10011c6a:	bd80      	pop	{r7, pc}
10011c6c:	10017329 	.word	0x10017329
10011c70:	100118fd 	.word	0x100118fd

10011c74 <platform_stop_event_timeout>:

static void platform_stop_event_timeout(void)
{
10011c74:	b580      	push	{r7, lr}
10011c76:	b084      	sub	sp, #16
10011c78:	af00      	add	r7, sp, #0
	uint8_t msg[8+5] = {0};
10011c7a:	003b      	movs	r3, r7
10011c7c:	0018      	movs	r0, r3
10011c7e:	230d      	movs	r3, #13
10011c80:	001a      	movs	r2, r3
10011c82:	2100      	movs	r1, #0
10011c84:	4b50      	ldr	r3, [pc, #320]	; (10011dc8 <platform_stop_event_timeout+0x154>)
10011c86:	4798      	blx	r3
	uint8_t u16TxLen = 0;
10011c88:	230f      	movs	r3, #15
10011c8a:	18fb      	adds	r3, r7, r3
10011c8c:	2200      	movs	r2, #0
10011c8e:	701a      	strb	r2, [r3, #0]

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
10011c90:	230f      	movs	r3, #15
10011c92:	18fb      	adds	r3, r7, r3
10011c94:	781b      	ldrb	r3, [r3, #0]
10011c96:	220f      	movs	r2, #15
10011c98:	18ba      	adds	r2, r7, r2
10011c9a:	1c59      	adds	r1, r3, #1
10011c9c:	7011      	strb	r1, [r2, #0]
10011c9e:	001a      	movs	r2, r3
10011ca0:	003b      	movs	r3, r7
10011ca2:	2119      	movs	r1, #25
10011ca4:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
10011ca6:	230f      	movs	r3, #15
10011ca8:	18fb      	adds	r3, r7, r3
10011caa:	781b      	ldrb	r3, [r3, #0]
10011cac:	220f      	movs	r2, #15
10011cae:	18ba      	adds	r2, r7, r2
10011cb0:	1c59      	adds	r1, r3, #1
10011cb2:	7011      	strb	r1, [r2, #0]
10011cb4:	001a      	movs	r2, r3
10011cb6:	003b      	movs	r3, r7
10011cb8:	2103      	movs	r1, #3
10011cba:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
10011cbc:	230f      	movs	r3, #15
10011cbe:	18fb      	adds	r3, r7, r3
10011cc0:	781b      	ldrb	r3, [r3, #0]
10011cc2:	220f      	movs	r2, #15
10011cc4:	18ba      	adds	r2, r7, r2
10011cc6:	1c59      	adds	r1, r3, #1
10011cc8:	7011      	strb	r1, [r2, #0]
10011cca:	001a      	movs	r2, r3
10011ccc:	003b      	movs	r3, r7
10011cce:	2103      	movs	r1, #3
10011cd0:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
10011cd2:	230f      	movs	r3, #15
10011cd4:	18fb      	adds	r3, r7, r3
10011cd6:	781b      	ldrb	r3, [r3, #0]
10011cd8:	220f      	movs	r2, #15
10011cda:	18ba      	adds	r2, r7, r2
10011cdc:	1c59      	adds	r1, r3, #1
10011cde:	7011      	strb	r1, [r2, #0]
10011ce0:	001a      	movs	r2, r3
10011ce2:	003b      	movs	r3, r7
10011ce4:	2100      	movs	r1, #0
10011ce6:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
10011ce8:	230f      	movs	r3, #15
10011cea:	18fb      	adds	r3, r7, r3
10011cec:	781b      	ldrb	r3, [r3, #0]
10011cee:	220f      	movs	r2, #15
10011cf0:	18ba      	adds	r2, r7, r2
10011cf2:	1c59      	adds	r1, r3, #1
10011cf4:	7011      	strb	r1, [r2, #0]
10011cf6:	001a      	movs	r2, r3
10011cf8:	003b      	movs	r3, r7
10011cfa:	2105      	movs	r1, #5
10011cfc:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
10011cfe:	230f      	movs	r3, #15
10011d00:	18fb      	adds	r3, r7, r3
10011d02:	781b      	ldrb	r3, [r3, #0]
10011d04:	220f      	movs	r2, #15
10011d06:	18ba      	adds	r2, r7, r2
10011d08:	1c59      	adds	r1, r3, #1
10011d0a:	7011      	strb	r1, [r2, #0]
10011d0c:	001a      	movs	r2, r3
10011d0e:	003b      	movs	r3, r7
10011d10:	2100      	movs	r1, #0
10011d12:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((5) & 0x00FF );
10011d14:	230f      	movs	r3, #15
10011d16:	18fb      	adds	r3, r7, r3
10011d18:	781b      	ldrb	r3, [r3, #0]
10011d1a:	220f      	movs	r2, #15
10011d1c:	18ba      	adds	r2, r7, r2
10011d1e:	1c59      	adds	r1, r3, #1
10011d20:	7011      	strb	r1, [r2, #0]
10011d22:	001a      	movs	r2, r3
10011d24:	003b      	movs	r3, r7
10011d26:	2105      	movs	r1, #5
10011d28:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
10011d2a:	230f      	movs	r3, #15
10011d2c:	18fb      	adds	r3, r7, r3
10011d2e:	781b      	ldrb	r3, [r3, #0]
10011d30:	220f      	movs	r2, #15
10011d32:	18ba      	adds	r2, r7, r2
10011d34:	1c59      	adds	r1, r3, #1
10011d36:	7011      	strb	r1, [r2, #0]
10011d38:	001a      	movs	r2, r3
10011d3a:	003b      	movs	r3, r7
10011d3c:	2100      	movs	r1, #0
10011d3e:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = (uint8_t)((0) & 0x00FF );
10011d40:	230f      	movs	r3, #15
10011d42:	18fb      	adds	r3, r7, r3
10011d44:	781b      	ldrb	r3, [r3, #0]
10011d46:	220f      	movs	r2, #15
10011d48:	18ba      	adds	r2, r7, r2
10011d4a:	1c59      	adds	r1, r3, #1
10011d4c:	7011      	strb	r1, [r2, #0]
10011d4e:	001a      	movs	r2, r3
10011d50:	003b      	movs	r3, r7
10011d52:	2100      	movs	r1, #0
10011d54:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 8) & 0x00FF) ;
10011d56:	230f      	movs	r3, #15
10011d58:	18fb      	adds	r3, r7, r3
10011d5a:	781b      	ldrb	r3, [r3, #0]
10011d5c:	220f      	movs	r2, #15
10011d5e:	18ba      	adds	r2, r7, r2
10011d60:	1c59      	adds	r1, r3, #1
10011d62:	7011      	strb	r1, [r2, #0]
10011d64:	001a      	movs	r2, r3
10011d66:	003b      	movs	r3, r7
10011d68:	2100      	movs	r1, #0
10011d6a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
10011d6c:	230f      	movs	r3, #15
10011d6e:	18fb      	adds	r3, r7, r3
10011d70:	781b      	ldrb	r3, [r3, #0]
10011d72:	220f      	movs	r2, #15
10011d74:	18ba      	adds	r2, r7, r2
10011d76:	1c59      	adds	r1, r3, #1
10011d78:	7011      	strb	r1, [r2, #0]
10011d7a:	001a      	movs	r2, r3
10011d7c:	003b      	movs	r3, r7
10011d7e:	2100      	movs	r1, #0
10011d80:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
10011d82:	230f      	movs	r3, #15
10011d84:	18fb      	adds	r3, r7, r3
10011d86:	781b      	ldrb	r3, [r3, #0]
10011d88:	220f      	movs	r2, #15
10011d8a:	18ba      	adds	r2, r7, r2
10011d8c:	1c59      	adds	r1, r3, #1
10011d8e:	7011      	strb	r1, [r2, #0]
10011d90:	001a      	movs	r2, r3
10011d92:	003b      	movs	r3, r7
10011d94:	2100      	movs	r1, #0
10011d96:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = ((0) & 0x00FF );
10011d98:	230f      	movs	r3, #15
10011d9a:	18fb      	adds	r3, r7, r3
10011d9c:	781b      	ldrb	r3, [r3, #0]
10011d9e:	220f      	movs	r2, #15
10011da0:	18ba      	adds	r2, r7, r2
10011da2:	1c59      	adds	r1, r3, #1
10011da4:	7011      	strb	r1, [r2, #0]
10011da6:	001a      	movs	r2, r3
10011da8:	003b      	movs	r3, r7
10011daa:	2100      	movs	r1, #0
10011dac:	5499      	strb	r1, [r3, r2]
	
	platform_interface_send(msg, u16TxLen);
10011dae:	230f      	movs	r3, #15
10011db0:	18fb      	adds	r3, r7, r3
10011db2:	781a      	ldrb	r2, [r3, #0]
10011db4:	003b      	movs	r3, r7
10011db6:	0011      	movs	r1, r2
10011db8:	0018      	movs	r0, r3
10011dba:	4b04      	ldr	r3, [pc, #16]	; (10011dcc <platform_stop_event_timeout+0x158>)
10011dbc:	4798      	blx	r3
}
10011dbe:	46c0      	nop			; (mov r8, r8)
10011dc0:	46bd      	mov	sp, r7
10011dc2:	b004      	add	sp, #16
10011dc4:	bd80      	pop	{r7, pc}
10011dc6:	46c0      	nop			; (mov r8, r8)
10011dc8:	10017329 	.word	0x10017329
10011dcc:	100118fd 	.word	0x100118fd

10011dd0 <platform_event_wait>:

plf_drv_status platform_event_wait(uint32_t timeout)
{
10011dd0:	b590      	push	{r4, r7, lr}
10011dd2:	b087      	sub	sp, #28
10011dd4:	af00      	add	r7, sp, #0
10011dd6:	6078      	str	r0, [r7, #4]
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
10011dd8:	2317      	movs	r3, #23
10011dda:	18fb      	adds	r3, r7, r3
10011ddc:	2200      	movs	r2, #0
10011dde:	701a      	strb	r2, [r3, #0]
	uint8_t bEventTimeoutFlag = 0;
10011de0:	2316      	movs	r3, #22
10011de2:	18fb      	adds	r3, r7, r3
10011de4:	2200      	movs	r2, #0
10011de6:	701a      	strb	r2, [r3, #0]
	uint8_t bLoopAgain = 0;
10011de8:	2315      	movs	r3, #21
10011dea:	18fb      	adds	r3, r7, r3
10011dec:	2200      	movs	r2, #0
10011dee:	701a      	strb	r2, [r3, #0]
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
10011df0:	687b      	ldr	r3, [r7, #4]
10011df2:	3301      	adds	r3, #1
10011df4:	d00b      	beq.n	10011e0e <platform_event_wait+0x3e>
10011df6:	687b      	ldr	r3, [r7, #4]
10011df8:	2b00      	cmp	r3, #0
10011dfa:	d008      	beq.n	10011e0e <platform_event_wait+0x3e>
	{			
		platform_start_event_timeout(timeout-1);
10011dfc:	687b      	ldr	r3, [r7, #4]
10011dfe:	3b01      	subs	r3, #1
10011e00:	0018      	movs	r0, r3
10011e02:	4b80      	ldr	r3, [pc, #512]	; (10012004 <platform_event_wait+0x234>)
10011e04:	4798      	blx	r3
		bEventTimeoutFlag = 1;
10011e06:	2316      	movs	r3, #22
10011e08:	18fb      	adds	r3, r7, r3
10011e0a:	2201      	movs	r2, #1
10011e0c:	701a      	strb	r2, [r3, #0]
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
10011e0e:	4b7e      	ldr	r3, [pc, #504]	; (10012008 <platform_event_wait+0x238>)
10011e10:	681a      	ldr	r2, [r3, #0]
10011e12:	4b7e      	ldr	r3, [pc, #504]	; (1001200c <platform_event_wait+0x23c>)
10011e14:	681b      	ldr	r3, [r3, #0]
10011e16:	497e      	ldr	r1, [pc, #504]	; (10012010 <platform_event_wait+0x240>)
10011e18:	0018      	movs	r0, r3
10011e1a:	4790      	blx	r2
10011e1c:	1e03      	subs	r3, r0, #0
10011e1e:	d000      	beq.n	10011e22 <platform_event_wait+0x52>
10011e20:	e0cb      	b.n	10011fba <platform_event_wait+0x1ea>
		{
			uint16_t msg_id = rcv_msg->id;
10011e22:	4b7b      	ldr	r3, [pc, #492]	; (10012010 <platform_event_wait+0x240>)
10011e24:	681a      	ldr	r2, [r3, #0]
10011e26:	2312      	movs	r3, #18
10011e28:	18fb      	adds	r3, r7, r3
10011e2a:	8892      	ldrh	r2, [r2, #4]
10011e2c:	801a      	strh	r2, [r3, #0]
			uint16_t src_id = rcv_msg->src_id;
10011e2e:	4b78      	ldr	r3, [pc, #480]	; (10012010 <platform_event_wait+0x240>)
10011e30:	681a      	ldr	r2, [r3, #0]
10011e32:	2310      	movs	r3, #16
10011e34:	18fb      	adds	r3, r7, r3
10011e36:	8912      	ldrh	r2, [r2, #8]
10011e38:	801a      	strh	r2, [r3, #0]
			uint8_t* data = (uint8_t*)rcv_msg->param;
10011e3a:	4b75      	ldr	r3, [pc, #468]	; (10012010 <platform_event_wait+0x240>)
10011e3c:	681b      	ldr	r3, [r3, #0]
10011e3e:	330c      	adds	r3, #12
10011e40:	60fb      	str	r3, [r7, #12]
			uint16_t len = rcv_msg->param_len;
10011e42:	4b73      	ldr	r3, [pc, #460]	; (10012010 <platform_event_wait+0x240>)
10011e44:	681a      	ldr	r2, [r3, #0]
10011e46:	230a      	movs	r3, #10
10011e48:	18fb      	adds	r3, r7, r3
10011e4a:	8952      	ldrh	r2, [r2, #10]
10011e4c:	801a      	strh	r2, [r3, #0]
			bLoopAgain = 0;
10011e4e:	2315      	movs	r3, #21
10011e50:	18fb      	adds	r3, r7, r3
10011e52:	2200      	movs	r2, #0
10011e54:	701a      	strb	r2, [r3, #0]
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
10011e56:	4b6e      	ldr	r3, [pc, #440]	; (10012010 <platform_event_wait+0x240>)
10011e58:	681b      	ldr	r3, [r3, #0]
10011e5a:	889a      	ldrh	r2, [r3, #4]
10011e5c:	23cd      	movs	r3, #205	; 0xcd
10011e5e:	009b      	lsls	r3, r3, #2
10011e60:	429a      	cmp	r2, r3
10011e62:	d006      	beq.n	10011e72 <platform_event_wait+0xa2>
10011e64:	2316      	movs	r3, #22
10011e66:	18fb      	adds	r3, r7, r3
10011e68:	781b      	ldrb	r3, [r3, #0]
10011e6a:	2b00      	cmp	r3, #0
10011e6c:	d001      	beq.n	10011e72 <platform_event_wait+0xa2>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
10011e6e:	4b69      	ldr	r3, [pc, #420]	; (10012014 <platform_event_wait+0x244>)
10011e70:	4798      	blx	r3
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
10011e72:	2312      	movs	r3, #18
10011e74:	18fb      	adds	r3, r7, r3
10011e76:	881a      	ldrh	r2, [r3, #0]
10011e78:	23a0      	movs	r3, #160	; 0xa0
10011e7a:	00db      	lsls	r3, r3, #3
10011e7c:	429a      	cmp	r2, r3
10011e7e:	d136      	bne.n	10011eee <platform_event_wait+0x11e>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
10011e80:	4b65      	ldr	r3, [pc, #404]	; (10012018 <platform_event_wait+0x248>)
10011e82:	881b      	ldrh	r3, [r3, #0]
10011e84:	001a      	movs	r2, r3
10011e86:	230a      	movs	r3, #10
10011e88:	18fb      	adds	r3, r7, r3
10011e8a:	881b      	ldrh	r3, [r3, #0]
10011e8c:	18d2      	adds	r2, r2, r3
10011e8e:	23a0      	movs	r3, #160	; 0xa0
10011e90:	009b      	lsls	r3, r3, #2
10011e92:	429a      	cmp	r2, r3
10011e94:	dd03      	ble.n	10011e9e <platform_event_wait+0xce>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
10011e96:	4b60      	ldr	r3, [pc, #384]	; (10012018 <platform_event_wait+0x248>)
10011e98:	2280      	movs	r2, #128	; 0x80
10011e9a:	0092      	lsls	r2, r2, #2
10011e9c:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
10011e9e:	4b5e      	ldr	r3, [pc, #376]	; (10012018 <platform_event_wait+0x248>)
10011ea0:	881b      	ldrh	r3, [r3, #0]
10011ea2:	001a      	movs	r2, r3
10011ea4:	4b5d      	ldr	r3, [pc, #372]	; (1001201c <platform_event_wait+0x24c>)
10011ea6:	18d0      	adds	r0, r2, r3
10011ea8:	230a      	movs	r3, #10
10011eaa:	18fb      	adds	r3, r7, r3
10011eac:	881a      	ldrh	r2, [r3, #0]
10011eae:	68fb      	ldr	r3, [r7, #12]
10011eb0:	0019      	movs	r1, r3
10011eb2:	4b5b      	ldr	r3, [pc, #364]	; (10012020 <platform_event_wait+0x250>)
10011eb4:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
10011eb6:	4b58      	ldr	r3, [pc, #352]	; (10012018 <platform_event_wait+0x248>)
10011eb8:	881b      	ldrh	r3, [r3, #0]
10011eba:	001a      	movs	r2, r3
10011ebc:	4b57      	ldr	r3, [pc, #348]	; (1001201c <platform_event_wait+0x24c>)
10011ebe:	18d1      	adds	r1, r2, r3
10011ec0:	230a      	movs	r3, #10
10011ec2:	18fb      	adds	r3, r7, r3
10011ec4:	881a      	ldrh	r2, [r3, #0]
10011ec6:	2310      	movs	r3, #16
10011ec8:	18fb      	adds	r3, r7, r3
10011eca:	881b      	ldrh	r3, [r3, #0]
10011ecc:	0018      	movs	r0, r3
10011ece:	4b55      	ldr	r3, [pc, #340]	; (10012024 <platform_event_wait+0x254>)
10011ed0:	4798      	blx	r3
				plf_event_buff_index += len;
10011ed2:	4b51      	ldr	r3, [pc, #324]	; (10012018 <platform_event_wait+0x248>)
10011ed4:	881a      	ldrh	r2, [r3, #0]
10011ed6:	230a      	movs	r3, #10
10011ed8:	18fb      	adds	r3, r7, r3
10011eda:	881b      	ldrh	r3, [r3, #0]
10011edc:	18d3      	adds	r3, r2, r3
10011ede:	b29a      	uxth	r2, r3
10011ee0:	4b4d      	ldr	r3, [pc, #308]	; (10012018 <platform_event_wait+0x248>)
10011ee2:	801a      	strh	r2, [r3, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
10011ee4:	2317      	movs	r3, #23
10011ee6:	18fb      	adds	r3, r7, r3
10011ee8:	2202      	movs	r2, #2
10011eea:	701a      	strb	r2, [r3, #0]
10011eec:	e05e      	b.n	10011fac <platform_event_wait+0x1dc>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
10011eee:	4b4e      	ldr	r3, [pc, #312]	; (10012028 <platform_event_wait+0x258>)
10011ef0:	681b      	ldr	r3, [r3, #0]
10011ef2:	2b00      	cmp	r3, #0
10011ef4:	d05a      	beq.n	10011fac <platform_event_wait+0x1dc>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
10011ef6:	4b46      	ldr	r3, [pc, #280]	; (10012010 <platform_event_wait+0x240>)
10011ef8:	681b      	ldr	r3, [r3, #0]
10011efa:	889a      	ldrh	r2, [r3, #4]
10011efc:	23cd      	movs	r3, #205	; 0xcd
10011efe:	009b      	lsls	r3, r3, #2
10011f00:	429a      	cmp	r2, r3
10011f02:	d10e      	bne.n	10011f22 <platform_event_wait+0x152>
					{
						if(bEventTimeoutFlag)
10011f04:	2316      	movs	r3, #22
10011f06:	18fb      	adds	r3, r7, r3
10011f08:	781b      	ldrb	r3, [r3, #0]
10011f0a:	2b00      	cmp	r3, #0
10011f0c:	d004      	beq.n	10011f18 <platform_event_wait+0x148>
						{
							status = STATUS_TIMEOUT;	
10011f0e:	2317      	movs	r3, #23
10011f10:	18fb      	adds	r3, r7, r3
10011f12:	22d0      	movs	r2, #208	; 0xd0
10011f14:	701a      	strb	r2, [r3, #0]
10011f16:	e049      	b.n	10011fac <platform_event_wait+0x1dc>
						}
						else
						{
							bLoopAgain = 1;
10011f18:	2315      	movs	r3, #21
10011f1a:	18fb      	adds	r3, r7, r3
10011f1c:	2201      	movs	r2, #1
10011f1e:	701a      	strb	r2, [r3, #0]
10011f20:	e044      	b.n	10011fac <platform_event_wait+0x1dc>
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
10011f22:	4b42      	ldr	r3, [pc, #264]	; (1001202c <platform_event_wait+0x25c>)
10011f24:	4a3d      	ldr	r2, [pc, #244]	; (1001201c <platform_event_wait+0x24c>)
10011f26:	601a      	str	r2, [r3, #0]
						ke_msg_hdr->id = rcv_msg->id;
10011f28:	4b40      	ldr	r3, [pc, #256]	; (1001202c <platform_event_wait+0x25c>)
10011f2a:	681a      	ldr	r2, [r3, #0]
10011f2c:	4b38      	ldr	r3, [pc, #224]	; (10012010 <platform_event_wait+0x240>)
10011f2e:	681b      	ldr	r3, [r3, #0]
10011f30:	889b      	ldrh	r3, [r3, #4]
10011f32:	8013      	strh	r3, [r2, #0]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
10011f34:	4b3d      	ldr	r3, [pc, #244]	; (1001202c <platform_event_wait+0x25c>)
10011f36:	681c      	ldr	r4, [r3, #0]
10011f38:	4b3d      	ldr	r3, [pc, #244]	; (10012030 <platform_event_wait+0x260>)
10011f3a:	681a      	ldr	r2, [r3, #0]
10011f3c:	4b34      	ldr	r3, [pc, #208]	; (10012010 <platform_event_wait+0x240>)
10011f3e:	681b      	ldr	r3, [r3, #0]
10011f40:	891b      	ldrh	r3, [r3, #8]
10011f42:	0018      	movs	r0, r3
10011f44:	4790      	blx	r2
10011f46:	0003      	movs	r3, r0
10011f48:	80a3      	strh	r3, [r4, #4]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
10011f4a:	4b38      	ldr	r3, [pc, #224]	; (1001202c <platform_event_wait+0x25c>)
10011f4c:	681a      	ldr	r2, [r3, #0]
10011f4e:	4b30      	ldr	r3, [pc, #192]	; (10012010 <platform_event_wait+0x240>)
10011f50:	681b      	ldr	r3, [r3, #0]
10011f52:	88db      	ldrh	r3, [r3, #6]
10011f54:	8053      	strh	r3, [r2, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
10011f56:	4b35      	ldr	r3, [pc, #212]	; (1001202c <platform_event_wait+0x25c>)
10011f58:	681a      	ldr	r2, [r3, #0]
10011f5a:	4b2d      	ldr	r3, [pc, #180]	; (10012010 <platform_event_wait+0x240>)
10011f5c:	681b      	ldr	r3, [r3, #0]
10011f5e:	895b      	ldrh	r3, [r3, #10]
10011f60:	80d3      	strh	r3, [r2, #6]
						ke_msg_hdr++;
10011f62:	4b32      	ldr	r3, [pc, #200]	; (1001202c <platform_event_wait+0x25c>)
10011f64:	681b      	ldr	r3, [r3, #0]
10011f66:	3308      	adds	r3, #8
10011f68:	001a      	movs	r2, r3
10011f6a:	4b30      	ldr	r3, [pc, #192]	; (1001202c <platform_event_wait+0x25c>)
10011f6c:	601a      	str	r2, [r3, #0]
						if(rcv_msg->param_len > 0) {
10011f6e:	4b28      	ldr	r3, [pc, #160]	; (10012010 <platform_event_wait+0x240>)
10011f70:	681b      	ldr	r3, [r3, #0]
10011f72:	895b      	ldrh	r3, [r3, #10]
10011f74:	2b00      	cmp	r3, #0
10011f76:	d00b      	beq.n	10011f90 <platform_event_wait+0x1c0>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
10011f78:	4b2c      	ldr	r3, [pc, #176]	; (1001202c <platform_event_wait+0x25c>)
10011f7a:	6818      	ldr	r0, [r3, #0]
10011f7c:	4b24      	ldr	r3, [pc, #144]	; (10012010 <platform_event_wait+0x240>)
10011f7e:	681b      	ldr	r3, [r3, #0]
10011f80:	330c      	adds	r3, #12
10011f82:	0019      	movs	r1, r3
10011f84:	4b22      	ldr	r3, [pc, #136]	; (10012010 <platform_event_wait+0x240>)
10011f86:	681b      	ldr	r3, [r3, #0]
10011f88:	895b      	ldrh	r3, [r3, #10]
10011f8a:	001a      	movs	r2, r3
10011f8c:	4b24      	ldr	r3, [pc, #144]	; (10012020 <platform_event_wait+0x250>)
10011f8e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
10011f90:	4b25      	ldr	r3, [pc, #148]	; (10012028 <platform_event_wait+0x258>)
10011f92:	681a      	ldr	r2, [r3, #0]
10011f94:	4b1e      	ldr	r3, [pc, #120]	; (10012010 <platform_event_wait+0x240>)
10011f96:	681b      	ldr	r3, [r3, #0]
10011f98:	895b      	ldrh	r3, [r3, #10]
10011f9a:	3308      	adds	r3, #8
10011f9c:	0019      	movs	r1, r3
10011f9e:	4b1f      	ldr	r3, [pc, #124]	; (1001201c <platform_event_wait+0x24c>)
10011fa0:	0018      	movs	r0, r3
10011fa2:	4790      	blx	r2
						status = STATUS_RECEIVED_BLE_MSG;
10011fa4:	2317      	movs	r3, #23
10011fa6:	18fb      	adds	r3, r7, r3
10011fa8:	2203      	movs	r2, #3
10011faa:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			ke_free(rcv_msg);
10011fac:	4b21      	ldr	r3, [pc, #132]	; (10012034 <platform_event_wait+0x264>)
10011fae:	681a      	ldr	r2, [r3, #0]
10011fb0:	4b17      	ldr	r3, [pc, #92]	; (10012010 <platform_event_wait+0x240>)
10011fb2:	681b      	ldr	r3, [r3, #0]
10011fb4:	0018      	movs	r0, r3
10011fb6:	4790      	blx	r2
10011fb8:	e003      	b.n	10011fc2 <platform_event_wait+0x1f2>
		}
		else
		{
			status = STATUS_FAILURE;
10011fba:	2317      	movs	r3, #23
10011fbc:	18fb      	adds	r3, r7, r3
10011fbe:	2207      	movs	r2, #7
10011fc0:	701a      	strb	r2, [r3, #0]
10011fc2:	2316      	movs	r3, #22
10011fc4:	18fb      	adds	r3, r7, r3
10011fc6:	2216      	movs	r2, #22
10011fc8:	18ba      	adds	r2, r7, r2
10011fca:	7812      	ldrb	r2, [r2, #0]
10011fcc:	701a      	strb	r2, [r3, #0]
		}
	}while(bLoopAgain);
10011fce:	2315      	movs	r3, #21
10011fd0:	18fb      	adds	r3, r7, r3
10011fd2:	781b      	ldrb	r3, [r3, #0]
10011fd4:	2b00      	cmp	r3, #0
10011fd6:	d000      	beq.n	10011fda <platform_event_wait+0x20a>
10011fd8:	e719      	b.n	10011e0e <platform_event_wait+0x3e>
	
	if(bEventTimeoutFlag)
10011fda:	2316      	movs	r3, #22
10011fdc:	18fb      	adds	r3, r7, r3
10011fde:	781b      	ldrb	r3, [r3, #0]
10011fe0:	2b00      	cmp	r3, #0
10011fe2:	d007      	beq.n	10011ff4 <platform_event_wait+0x224>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
10011fe4:	4b09      	ldr	r3, [pc, #36]	; (1001200c <platform_event_wait+0x23c>)
10011fe6:	681a      	ldr	r2, [r3, #0]
10011fe8:	23cd      	movs	r3, #205	; 0xcd
10011fea:	009b      	lsls	r3, r3, #2
10011fec:	0019      	movs	r1, r3
10011fee:	0010      	movs	r0, r2
10011ff0:	4b11      	ldr	r3, [pc, #68]	; (10012038 <platform_event_wait+0x268>)
10011ff2:	4798      	blx	r3
	}
	return status;
10011ff4:	2317      	movs	r3, #23
10011ff6:	18fb      	adds	r3, r7, r3
10011ff8:	781b      	ldrb	r3, [r3, #0]
}
10011ffa:	0018      	movs	r0, r3
10011ffc:	46bd      	mov	sp, r7
10011ffe:	b007      	add	sp, #28
10012000:	bd90      	pop	{r4, r7, pc}
10012002:	46c0      	nop			; (mov r8, r8)
10012004:	10011aed 	.word	0x10011aed
10012008:	1001a10c 	.word	0x1001a10c
1001200c:	1001a0f8 	.word	0x1001a0f8
10012010:	1001a124 	.word	0x1001a124
10012014:	10011c75 	.word	0x10011c75
10012018:	1001b0d4 	.word	0x1001b0d4
1001201c:	1001ae40 	.word	0x1001ae40
10012020:	10017317 	.word	0x10017317
10012024:	10011369 	.word	0x10011369
10012028:	1001a120 	.word	0x1001a120
1001202c:	1001a128 	.word	0x1001a128
10012030:	1001a118 	.word	0x1001a118
10012034:	1001a110 	.word	0x1001a110
10012038:	10011a31 	.word	0x10011a31

1001203c <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1001203c:	b580      	push	{r7, lr}
1001203e:	b082      	sub	sp, #8
10012040:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_RESOURCE_BUSY;
10012042:	1dfb      	adds	r3, r7, #7
10012044:	2208      	movs	r2, #8
10012046:	701a      	strb	r2, [r3, #0]
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
10012048:	4b19      	ldr	r3, [pc, #100]	; (100120b0 <acquire_sleep_lock+0x74>)
1001204a:	681b      	ldr	r3, [r3, #0]
1001204c:	b2da      	uxtb	r2, r3
1001204e:	1dbb      	adds	r3, r7, #6
10012050:	2101      	movs	r1, #1
10012052:	400a      	ands	r2, r1
10012054:	701a      	strb	r2, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
10012056:	4b17      	ldr	r3, [pc, #92]	; (100120b4 <acquire_sleep_lock+0x78>)
10012058:	681b      	ldr	r3, [r3, #0]
1001205a:	2280      	movs	r2, #128	; 0x80
1001205c:	0212      	lsls	r2, r2, #8
1001205e:	0010      	movs	r0, r2
10012060:	4798      	blx	r3
	if(osc_en == 0)
10012062:	1dbb      	adds	r3, r7, #6
10012064:	781b      	ldrb	r3, [r3, #0]
10012066:	2b00      	cmp	r3, #0
10012068:	d115      	bne.n	10012096 <acquire_sleep_lock+0x5a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1001206a:	4b13      	ldr	r3, [pc, #76]	; (100120b8 <acquire_sleep_lock+0x7c>)
1001206c:	681b      	ldr	r3, [r3, #0]
1001206e:	2002      	movs	r0, #2
10012070:	4798      	blx	r3
		pwr_arm_wakeup_req();
10012072:	4b12      	ldr	r3, [pc, #72]	; (100120bc <acquire_sleep_lock+0x80>)
10012074:	681b      	ldr	r3, [r3, #0]
10012076:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
10012078:	46c0      	nop			; (mov r8, r8)
1001207a:	4b11      	ldr	r3, [pc, #68]	; (100120c0 <acquire_sleep_lock+0x84>)
1001207c:	681b      	ldr	r3, [r3, #0]
1001207e:	2003      	movs	r0, #3
10012080:	4798      	blx	r3
10012082:	1e03      	subs	r3, r0, #0
10012084:	d1f9      	bne.n	1001207a <acquire_sleep_lock+0x3e>
		pwr_disable_arm_wakeup(1<<1);
10012086:	4b0f      	ldr	r3, [pc, #60]	; (100120c4 <acquire_sleep_lock+0x88>)
10012088:	681b      	ldr	r3, [r3, #0]
1001208a:	2002      	movs	r0, #2
1001208c:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1001208e:	4b0e      	ldr	r3, [pc, #56]	; (100120c8 <acquire_sleep_lock+0x8c>)
10012090:	2201      	movs	r2, #1
10012092:	601a      	str	r2, [r3, #0]
10012094:	e005      	b.n	100120a2 <acquire_sleep_lock+0x66>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
10012096:	4b0d      	ldr	r3, [pc, #52]	; (100120cc <acquire_sleep_lock+0x90>)
10012098:	681a      	ldr	r2, [r3, #0]
1001209a:	4b0d      	ldr	r3, [pc, #52]	; (100120d0 <acquire_sleep_lock+0x94>)
1001209c:	681b      	ldr	r3, [r3, #0]
1001209e:	0018      	movs	r0, r3
100120a0:	4790      	blx	r2
	}
	return status;
100120a2:	1dfb      	adds	r3, r7, #7
100120a4:	781b      	ldrb	r3, [r3, #0]
}
100120a6:	0018      	movs	r0, r3
100120a8:	46bd      	mov	sp, r7
100120aa:	b002      	add	sp, #8
100120ac:	bd80      	pop	{r7, pc}
100120ae:	46c0      	nop			; (mov r8, r8)
100120b0:	4000b1ec 	.word	0x4000b1ec
100120b4:	1001adfc 	.word	0x1001adfc
100120b8:	1001a0e4 	.word	0x1001a0e4
100120bc:	1001a0ec 	.word	0x1001a0ec
100120c0:	1001a0f0 	.word	0x1001a0f0
100120c4:	1001a0e8 	.word	0x1001a0e8
100120c8:	4000b020 	.word	0x4000b020
100120cc:	1001a104 	.word	0x1001a104
100120d0:	1001a0f4 	.word	0x1001a0f4

100120d4 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
100120d4:	b580      	push	{r7, lr}
100120d6:	b082      	sub	sp, #8
100120d8:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_SUCCESS;
100120da:	1dfb      	adds	r3, r7, #7
100120dc:	2200      	movs	r2, #0
100120de:	701a      	strb	r2, [r3, #0]
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
100120e0:	4b05      	ldr	r3, [pc, #20]	; (100120f8 <release_sleep_lock+0x24>)
100120e2:	681b      	ldr	r3, [r3, #0]
100120e4:	2280      	movs	r2, #128	; 0x80
100120e6:	0212      	lsls	r2, r2, #8
100120e8:	0010      	movs	r0, r2
100120ea:	4798      	blx	r3
	return status;
100120ec:	1dfb      	adds	r3, r7, #7
100120ee:	781b      	ldrb	r3, [r3, #0]
}
100120f0:	0018      	movs	r0, r3
100120f2:	46bd      	mov	sp, r7
100120f4:	b002      	add	sp, #8
100120f6:	bd80      	pop	{r7, pc}
100120f8:	1001ae04 	.word	0x1001ae04

100120fc <samb11_plf_resume_callback>:

void samb11_plf_resume_callback(void)
{
100120fc:	b580      	push	{r7, lr}
100120fe:	af00      	add	r7, sp, #0
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
10012100:	4a08      	ldr	r2, [pc, #32]	; (10012124 <samb11_plf_resume_callback+0x28>)
10012102:	4b09      	ldr	r3, [pc, #36]	; (10012128 <samb11_plf_resume_callback+0x2c>)
10012104:	681b      	ldr	r3, [r3, #0]
10012106:	6013      	str	r3, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
10012108:	4a08      	ldr	r2, [pc, #32]	; (1001212c <samb11_plf_resume_callback+0x30>)
1001210a:	4b07      	ldr	r3, [pc, #28]	; (10012128 <samb11_plf_resume_callback+0x2c>)
1001210c:	685b      	ldr	r3, [r3, #4]
1001210e:	6013      	str	r3, [r2, #0]
	if(samb11_app_resume_cb != NULL)
10012110:	4b07      	ldr	r3, [pc, #28]	; (10012130 <samb11_plf_resume_callback+0x34>)
10012112:	681b      	ldr	r3, [r3, #0]
10012114:	2b00      	cmp	r3, #0
10012116:	d002      	beq.n	1001211e <samb11_plf_resume_callback+0x22>
	{
		samb11_app_resume_cb();
10012118:	4b05      	ldr	r3, [pc, #20]	; (10012130 <samb11_plf_resume_callback+0x34>)
1001211a:	681b      	ldr	r3, [r3, #0]
1001211c:	4798      	blx	r3
	}
}
1001211e:	46c0      	nop			; (mov r8, r8)
10012120:	46bd      	mov	sp, r7
10012122:	bd80      	pop	{r7, pc}
10012124:	4000b00c 	.word	0x4000b00c
10012128:	1001adf4 	.word	0x1001adf4
1001212c:	4000b010 	.word	0x4000b010
10012130:	1001b0c8 	.word	0x1001b0c8

10012134 <register_resume_callback>:

plf_drv_status register_resume_callback(resume_callback cb)
{
10012134:	b580      	push	{r7, lr}
10012136:	b084      	sub	sp, #16
10012138:	af00      	add	r7, sp, #0
1001213a:	6078      	str	r0, [r7, #4]
	plf_drv_status status = STATUS_SUCCESS;
1001213c:	230f      	movs	r3, #15
1001213e:	18fb      	adds	r3, r7, r3
10012140:	2200      	movs	r2, #0
10012142:	701a      	strb	r2, [r3, #0]
	if(cb == NULL)
10012144:	687b      	ldr	r3, [r7, #4]
10012146:	2b00      	cmp	r3, #0
10012148:	d104      	bne.n	10012154 <register_resume_callback+0x20>
	{
		status = STATUS_INVALID_ARGUMENT;
1001214a:	230f      	movs	r3, #15
1001214c:	18fb      	adds	r3, r7, r3
1001214e:	2209      	movs	r2, #9
10012150:	701a      	strb	r2, [r3, #0]
10012152:	e002      	b.n	1001215a <register_resume_callback+0x26>
	}
	else 
	{
		samb11_app_resume_cb = cb;
10012154:	4b04      	ldr	r3, [pc, #16]	; (10012168 <register_resume_callback+0x34>)
10012156:	687a      	ldr	r2, [r7, #4]
10012158:	601a      	str	r2, [r3, #0]
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
1001215a:	230f      	movs	r3, #15
1001215c:	18fb      	adds	r3, r7, r3
1001215e:	781b      	ldrb	r3, [r3, #0]
}
10012160:	0018      	movs	r0, r3
10012162:	46bd      	mov	sp, r7
10012164:	b004      	add	sp, #16
10012166:	bd80      	pop	{r7, pc}
10012168:	1001b0c8 	.word	0x1001b0c8

1001216c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
1001216c:	b580      	push	{r7, lr}
1001216e:	b082      	sub	sp, #8
10012170:	af00      	add	r7, sp, #0
10012172:	0002      	movs	r2, r0
10012174:	1dfb      	adds	r3, r7, #7
10012176:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10012178:	4a08      	ldr	r2, [pc, #32]	; (1001219c <NVIC_ClearPendingIRQ+0x30>)
1001217a:	1dfb      	adds	r3, r7, #7
1001217c:	781b      	ldrb	r3, [r3, #0]
1001217e:	0019      	movs	r1, r3
10012180:	231f      	movs	r3, #31
10012182:	400b      	ands	r3, r1
10012184:	2101      	movs	r1, #1
10012186:	4099      	lsls	r1, r3
10012188:	000b      	movs	r3, r1
1001218a:	0019      	movs	r1, r3
1001218c:	23c0      	movs	r3, #192	; 0xc0
1001218e:	005b      	lsls	r3, r3, #1
10012190:	50d1      	str	r1, [r2, r3]
}
10012192:	46c0      	nop			; (mov r8, r8)
10012194:	46bd      	mov	sp, r7
10012196:	b002      	add	sp, #8
10012198:	bd80      	pop	{r7, pc}
1001219a:	46c0      	nop			; (mov r8, r8)
1001219c:	e000e100 	.word	0xe000e100

100121a0 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
100121a0:	b580      	push	{r7, lr}
100121a2:	b082      	sub	sp, #8
100121a4:	af00      	add	r7, sp, #0
	uint8_t index = 0;
100121a6:	1dfb      	adds	r3, r7, #7
100121a8:	2200      	movs	r2, #0
100121aa:	701a      	strb	r2, [r3, #0]
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
100121ac:	1dbb      	adds	r3, r7, #6
100121ae:	2210      	movs	r2, #16
100121b0:	701a      	strb	r2, [r3, #0]
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
100121b2:	4b28      	ldr	r3, [pc, #160]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
100121b4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
100121b6:	b29b      	uxth	r3, r3
100121b8:	603b      	str	r3, [r7, #0]
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
100121ba:	4a26      	ldr	r2, [pc, #152]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
100121bc:	4b25      	ldr	r3, [pc, #148]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
100121be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100121c0:	b29b      	uxth	r3, r3
100121c2:	4925      	ldr	r1, [pc, #148]	; (10012258 <gpio1_combined_isr_handler+0xb8>)
100121c4:	430b      	orrs	r3, r1
100121c6:	b29b      	uxth	r3, r3
100121c8:	8513      	strh	r3, [r2, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
100121ca:	683b      	ldr	r3, [r7, #0]
100121cc:	05db      	lsls	r3, r3, #23
100121ce:	0ddb      	lsrs	r3, r3, #23
100121d0:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
100121d2:	1dfb      	adds	r3, r7, #7
100121d4:	2200      	movs	r2, #0
100121d6:	701a      	strb	r2, [r3, #0]
		if (intstatus != 0) {
100121d8:	683b      	ldr	r3, [r7, #0]
100121da:	2b00      	cmp	r3, #0
100121dc:	d020      	beq.n	10012220 <gpio1_combined_isr_handler+0x80>
			port_gpio1 = (intstatus & ~(intstatus - 1));
100121de:	683b      	ldr	r3, [r7, #0]
100121e0:	b2db      	uxtb	r3, r3
100121e2:	425b      	negs	r3, r3
100121e4:	b2da      	uxtb	r2, r3
100121e6:	683b      	ldr	r3, [r7, #0]
100121e8:	b2d9      	uxtb	r1, r3
100121ea:	1dbb      	adds	r3, r7, #6
100121ec:	400a      	ands	r2, r1
100121ee:	701a      	strb	r2, [r3, #0]
			while (!(port_gpio1 == 1)) {
100121f0:	e009      	b.n	10012206 <gpio1_combined_isr_handler+0x66>
				port_gpio1 = port_gpio1 >> 1;
100121f2:	1dbb      	adds	r3, r7, #6
100121f4:	1dba      	adds	r2, r7, #6
100121f6:	7812      	ldrb	r2, [r2, #0]
100121f8:	0852      	lsrs	r2, r2, #1
100121fa:	701a      	strb	r2, [r3, #0]
				index++;
100121fc:	1dfb      	adds	r3, r7, #7
100121fe:	781a      	ldrb	r2, [r3, #0]
10012200:	1dfb      	adds	r3, r7, #7
10012202:	3201      	adds	r2, #1
10012204:	701a      	strb	r2, [r3, #0]
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
10012206:	1dbb      	adds	r3, r7, #6
10012208:	781b      	ldrb	r3, [r3, #0]
1001220a:	2b01      	cmp	r3, #1
1001220c:	d1f1      	bne.n	100121f2 <gpio1_combined_isr_handler+0x52>
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1001220e:	4a11      	ldr	r2, [pc, #68]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
10012210:	1dfb      	adds	r3, r7, #7
10012212:	781b      	ldrb	r3, [r3, #0]
10012214:	2101      	movs	r1, #1
10012216:	4099      	lsls	r1, r3
10012218:	000b      	movs	r3, r1
1001221a:	b29b      	uxth	r3, r3
1001221c:	8713      	strh	r3, [r2, #56]	; 0x38
1001221e:	e007      	b.n	10012230 <gpio1_combined_isr_handler+0x90>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10012220:	4a0c      	ldr	r2, [pc, #48]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
10012222:	4b0c      	ldr	r3, [pc, #48]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
10012224:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10012226:	b29b      	uxth	r3, r3
10012228:	490b      	ldr	r1, [pc, #44]	; (10012258 <gpio1_combined_isr_handler+0xb8>)
1001222a:	430b      	orrs	r3, r1
1001222c:	b29b      	uxth	r3, r3
1001222e:	8713      	strh	r3, [r2, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
10012230:	4b08      	ldr	r3, [pc, #32]	; (10012254 <gpio1_combined_isr_handler+0xb4>)
10012232:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10012234:	b29b      	uxth	r3, r3
10012236:	603b      	str	r3, [r7, #0]
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10012238:	683b      	ldr	r3, [r7, #0]
1001223a:	05db      	lsls	r3, r3, #23
1001223c:	0ddb      	lsrs	r3, r3, #23
1001223e:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10012240:	683b      	ldr	r3, [r7, #0]
10012242:	2b00      	cmp	r3, #0
10012244:	d1c1      	bne.n	100121ca <gpio1_combined_isr_handler+0x2a>

	NVIC_ClearPendingIRQ(8);
10012246:	2008      	movs	r0, #8
10012248:	4b04      	ldr	r3, [pc, #16]	; (1001225c <gpio1_combined_isr_handler+0xbc>)
1001224a:	4798      	blx	r3
}
1001224c:	46c0      	nop			; (mov r8, r8)
1001224e:	46bd      	mov	sp, r7
10012250:	b002      	add	sp, #8
10012252:	bd80      	pop	{r7, pc}
10012254:	40011000 	.word	0x40011000
10012258:	ffff8000 	.word	0xffff8000
1001225c:	1001216d 	.word	0x1001216d

10012260 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
10012260:	b580      	push	{r7, lr}
10012262:	b082      	sub	sp, #8
10012264:	af00      	add	r7, sp, #0
	uint8_t index = 0;
10012266:	1dfb      	adds	r3, r7, #7
10012268:	2200      	movs	r2, #0
1001226a:	701a      	strb	r2, [r3, #0]
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
1001226c:	1dbb      	adds	r3, r7, #6
1001226e:	2200      	movs	r2, #0
10012270:	701a      	strb	r2, [r3, #0]
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
10012272:	4b28      	ldr	r3, [pc, #160]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
10012274:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10012276:	b29b      	uxth	r3, r3
10012278:	603b      	str	r3, [r7, #0]
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1001227a:	4a26      	ldr	r2, [pc, #152]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
1001227c:	4b25      	ldr	r3, [pc, #148]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
1001227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10012280:	b29b      	uxth	r3, r3
10012282:	4925      	ldr	r1, [pc, #148]	; (10012318 <gpio0_combined_isr_handler+0xb8>)
10012284:	430b      	orrs	r3, r1
10012286:	b29b      	uxth	r3, r3
10012288:	8513      	strh	r3, [r2, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1001228a:	683b      	ldr	r3, [r7, #0]
1001228c:	05db      	lsls	r3, r3, #23
1001228e:	0ddb      	lsrs	r3, r3, #23
10012290:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10012292:	1dfb      	adds	r3, r7, #7
10012294:	2200      	movs	r2, #0
10012296:	701a      	strb	r2, [r3, #0]
		if (intstatus != 0) {
10012298:	683b      	ldr	r3, [r7, #0]
1001229a:	2b00      	cmp	r3, #0
1001229c:	d020      	beq.n	100122e0 <gpio0_combined_isr_handler+0x80>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1001229e:	683b      	ldr	r3, [r7, #0]
100122a0:	b2db      	uxtb	r3, r3
100122a2:	425b      	negs	r3, r3
100122a4:	b2da      	uxtb	r2, r3
100122a6:	683b      	ldr	r3, [r7, #0]
100122a8:	b2d9      	uxtb	r1, r3
100122aa:	1dbb      	adds	r3, r7, #6
100122ac:	400a      	ands	r2, r1
100122ae:	701a      	strb	r2, [r3, #0]
			while (!(port_gpio0 == 1)) {
100122b0:	e009      	b.n	100122c6 <gpio0_combined_isr_handler+0x66>
				port_gpio0 = port_gpio0 >> 1;
100122b2:	1dbb      	adds	r3, r7, #6
100122b4:	1dba      	adds	r2, r7, #6
100122b6:	7812      	ldrb	r2, [r2, #0]
100122b8:	0852      	lsrs	r2, r2, #1
100122ba:	701a      	strb	r2, [r3, #0]
				index++;
100122bc:	1dfb      	adds	r3, r7, #7
100122be:	781a      	ldrb	r2, [r3, #0]
100122c0:	1dfb      	adds	r3, r7, #7
100122c2:	3201      	adds	r2, #1
100122c4:	701a      	strb	r2, [r3, #0]
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
100122c6:	1dbb      	adds	r3, r7, #6
100122c8:	781b      	ldrb	r3, [r3, #0]
100122ca:	2b01      	cmp	r3, #1
100122cc:	d1f1      	bne.n	100122b2 <gpio0_combined_isr_handler+0x52>
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
100122ce:	4a11      	ldr	r2, [pc, #68]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
100122d0:	1dfb      	adds	r3, r7, #7
100122d2:	781b      	ldrb	r3, [r3, #0]
100122d4:	2101      	movs	r1, #1
100122d6:	4099      	lsls	r1, r3
100122d8:	000b      	movs	r3, r1
100122da:	b29b      	uxth	r3, r3
100122dc:	8713      	strh	r3, [r2, #56]	; 0x38
100122de:	e007      	b.n	100122f0 <gpio0_combined_isr_handler+0x90>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
100122e0:	4a0c      	ldr	r2, [pc, #48]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
100122e2:	4b0c      	ldr	r3, [pc, #48]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
100122e4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
100122e6:	b29b      	uxth	r3, r3
100122e8:	490b      	ldr	r1, [pc, #44]	; (10012318 <gpio0_combined_isr_handler+0xb8>)
100122ea:	430b      	orrs	r3, r1
100122ec:	b29b      	uxth	r3, r3
100122ee:	8713      	strh	r3, [r2, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
100122f0:	4b08      	ldr	r3, [pc, #32]	; (10012314 <gpio0_combined_isr_handler+0xb4>)
100122f2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
100122f4:	b29b      	uxth	r3, r3
100122f6:	603b      	str	r3, [r7, #0]
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
100122f8:	683b      	ldr	r3, [r7, #0]
100122fa:	05db      	lsls	r3, r3, #23
100122fc:	0ddb      	lsrs	r3, r3, #23
100122fe:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10012300:	683b      	ldr	r3, [r7, #0]
10012302:	2b00      	cmp	r3, #0
10012304:	d1c1      	bne.n	1001228a <gpio0_combined_isr_handler+0x2a>

	NVIC_ClearPendingIRQ(7);
10012306:	2007      	movs	r0, #7
10012308:	4b04      	ldr	r3, [pc, #16]	; (1001231c <gpio0_combined_isr_handler+0xbc>)
1001230a:	4798      	blx	r3
}
1001230c:	46c0      	nop			; (mov r8, r8)
1001230e:	46bd      	mov	sp, r7
10012310:	b002      	add	sp, #8
10012312:	bd80      	pop	{r7, pc}
10012314:	40010000 	.word	0x40010000
10012318:	ffff8000 	.word	0xffff8000
1001231c:	1001216d 	.word	0x1001216d

10012320 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
10012320:	b580      	push	{r7, lr}
10012322:	af00      	add	r7, sp, #0
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
10012324:	4b12      	ldr	r3, [pc, #72]	; (10012370 <PORT1_COMB_Handler+0x50>)
10012326:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10012328:	b29b      	uxth	r3, r3
1001232a:	001a      	movs	r2, r3
1001232c:	23e0      	movs	r3, #224	; 0xe0
1001232e:	021b      	lsls	r3, r3, #8
10012330:	4013      	ands	r3, r2
10012332:	d018      	beq.n	10012366 <PORT1_COMB_Handler+0x46>
		handle_ext_wakeup_isr();
10012334:	4b0f      	ldr	r3, [pc, #60]	; (10012374 <PORT1_COMB_Handler+0x54>)
10012336:	681b      	ldr	r3, [r3, #0]
10012338:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1001233a:	4b0d      	ldr	r3, [pc, #52]	; (10012370 <PORT1_COMB_Handler+0x50>)
1001233c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1001233e:	b29b      	uxth	r3, r3
10012340:	001a      	movs	r2, r3
10012342:	23e0      	movs	r3, #224	; 0xe0
10012344:	021b      	lsls	r3, r3, #8
10012346:	401a      	ands	r2, r3
10012348:	0010      	movs	r0, r2
1001234a:	4909      	ldr	r1, [pc, #36]	; (10012370 <PORT1_COMB_Handler+0x50>)
1001234c:	4b08      	ldr	r3, [pc, #32]	; (10012370 <PORT1_COMB_Handler+0x50>)
1001234e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10012350:	b29b      	uxth	r3, r3
10012352:	b21a      	sxth	r2, r3
10012354:	b203      	sxth	r3, r0
10012356:	4313      	orrs	r3, r2
10012358:	b21b      	sxth	r3, r3
1001235a:	b29b      	uxth	r3, r3
1001235c:	870b      	strh	r3, [r1, #56]	; 0x38
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
1001235e:	2008      	movs	r0, #8
10012360:	4b05      	ldr	r3, [pc, #20]	; (10012378 <PORT1_COMB_Handler+0x58>)
10012362:	4798      	blx	r3
	} else {
		gpio1_combined_isr_handler();
	}
}
10012364:	e001      	b.n	1001236a <PORT1_COMB_Handler+0x4a>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
10012366:	4b05      	ldr	r3, [pc, #20]	; (1001237c <PORT1_COMB_Handler+0x5c>)
10012368:	4798      	blx	r3
	}
}
1001236a:	46c0      	nop			; (mov r8, r8)
1001236c:	46bd      	mov	sp, r7
1001236e:	bd80      	pop	{r7, pc}
10012370:	40011000 	.word	0x40011000
10012374:	1001b0c4 	.word	0x1001b0c4
10012378:	1001216d 	.word	0x1001216d
1001237c:	100121a1 	.word	0x100121a1

10012380 <internal_event_post>:
10012380:	b570      	push	{r4, r5, r6, lr}
10012382:	4d0c      	ldr	r5, [pc, #48]	; (100123b4 <internal_event_post+0x34>)
10012384:	682c      	ldr	r4, [r5, #0]
10012386:	2c00      	cmp	r4, #0
10012388:	d013      	beq.n	100123b2 <internal_event_post+0x32>
1001238a:	6826      	ldr	r6, [r4, #0]
1001238c:	60e2      	str	r2, [r4, #12]
1001238e:	602e      	str	r6, [r5, #0]
10012390:	2500      	movs	r5, #0
10012392:	4a09      	ldr	r2, [pc, #36]	; (100123b8 <internal_event_post+0x38>)
10012394:	8123      	strh	r3, [r4, #8]
10012396:	6813      	ldr	r3, [r2, #0]
10012398:	6025      	str	r5, [r4, #0]
1001239a:	80a0      	strh	r0, [r4, #4]
1001239c:	80e1      	strh	r1, [r4, #6]
1001239e:	42ab      	cmp	r3, r5
100123a0:	d101      	bne.n	100123a6 <internal_event_post+0x26>
100123a2:	6014      	str	r4, [r2, #0]
100123a4:	e005      	b.n	100123b2 <internal_event_post+0x32>
100123a6:	681a      	ldr	r2, [r3, #0]
100123a8:	2a00      	cmp	r2, #0
100123aa:	d001      	beq.n	100123b0 <internal_event_post+0x30>
100123ac:	1c13      	adds	r3, r2, #0
100123ae:	e7fa      	b.n	100123a6 <internal_event_post+0x26>
100123b0:	601c      	str	r4, [r3, #0]
100123b2:	bd70      	pop	{r4, r5, r6, pc}
100123b4:	1001a1d0 	.word	0x1001a1d0
100123b8:	1001a1cc 	.word	0x1001a1cc

100123bc <internal_event_init>:
100123bc:	4b08      	ldr	r3, [pc, #32]	; (100123e0 <internal_event_init+0x24>)
100123be:	2200      	movs	r2, #0
100123c0:	1c19      	adds	r1, r3, #0
100123c2:	b510      	push	{r4, lr}
100123c4:	6818      	ldr	r0, [r3, #0]
100123c6:	4b07      	ldr	r3, [pc, #28]	; (100123e4 <internal_event_init+0x28>)
100123c8:	189c      	adds	r4, r3, r2
100123ca:	50d0      	str	r0, [r2, r3]
100123cc:	3210      	adds	r2, #16
100123ce:	1c20      	adds	r0, r4, #0
100123d0:	2aa0      	cmp	r2, #160	; 0xa0
100123d2:	d1f8      	bne.n	100123c6 <internal_event_init+0xa>
100123d4:	2200      	movs	r2, #0
100123d6:	3390      	adds	r3, #144	; 0x90
100123d8:	600b      	str	r3, [r1, #0]
100123da:	4b03      	ldr	r3, [pc, #12]	; (100123e8 <internal_event_init+0x2c>)
100123dc:	601a      	str	r2, [r3, #0]
100123de:	bd10      	pop	{r4, pc}
100123e0:	1001a1d0 	.word	0x1001a1d0
100123e4:	1001a12c 	.word	0x1001a12c
100123e8:	1001a1cc 	.word	0x1001a1cc

100123ec <special_events_handler>:
100123ec:	b538      	push	{r3, r4, r5, lr}
100123ee:	4c1b      	ldr	r4, [pc, #108]	; (1001245c <special_events_handler+0x70>)
100123f0:	1c03      	adds	r3, r0, #0
100123f2:	8825      	ldrh	r5, [r4, #0]
100123f4:	1c08      	adds	r0, r1, #0
100123f6:	1c21      	adds	r1, r4, #0
100123f8:	429d      	cmp	r5, r3
100123fa:	d107      	bne.n	1001240c <special_events_handler+0x20>
100123fc:	88a5      	ldrh	r5, [r4, #4]
100123fe:	4285      	cmp	r5, r0
10012400:	d104      	bne.n	1001240c <special_events_handler+0x20>
10012402:	2301      	movs	r3, #1
10012404:	425b      	negs	r3, r3
10012406:	8023      	strh	r3, [r4, #0]
10012408:	60a2      	str	r2, [r4, #8]
1001240a:	e009      	b.n	10012420 <special_events_handler+0x34>
1001240c:	884c      	ldrh	r4, [r1, #2]
1001240e:	429c      	cmp	r4, r3
10012410:	d10a      	bne.n	10012428 <special_events_handler+0x3c>
10012412:	888c      	ldrh	r4, [r1, #4]
10012414:	4284      	cmp	r4, r0
10012416:	d107      	bne.n	10012428 <special_events_handler+0x3c>
10012418:	2301      	movs	r3, #1
1001241a:	425b      	negs	r3, r3
1001241c:	804b      	strh	r3, [r1, #2]
1001241e:	608a      	str	r2, [r1, #8]
10012420:	4b0f      	ldr	r3, [pc, #60]	; (10012460 <special_events_handler+0x74>)
10012422:	4798      	blx	r3
10012424:	2001      	movs	r0, #1
10012426:	e017      	b.n	10012458 <special_events_handler+0x6c>
10012428:	490e      	ldr	r1, [pc, #56]	; (10012464 <special_events_handler+0x78>)
1001242a:	428b      	cmp	r3, r1
1001242c:	d00e      	beq.n	1001244c <special_events_handler+0x60>
1001242e:	490e      	ldr	r1, [pc, #56]	; (10012468 <special_events_handler+0x7c>)
10012430:	428b      	cmp	r3, r1
10012432:	d007      	beq.n	10012444 <special_events_handler+0x58>
10012434:	490d      	ldr	r1, [pc, #52]	; (1001246c <special_events_handler+0x80>)
10012436:	2000      	movs	r0, #0
10012438:	428b      	cmp	r3, r1
1001243a:	d10d      	bne.n	10012458 <special_events_handler+0x6c>
1001243c:	1c10      	adds	r0, r2, #0
1001243e:	4b0c      	ldr	r3, [pc, #48]	; (10012470 <special_events_handler+0x84>)
10012440:	4798      	blx	r3
10012442:	e7ef      	b.n	10012424 <special_events_handler+0x38>
10012444:	1c11      	adds	r1, r2, #0
10012446:	4b0b      	ldr	r3, [pc, #44]	; (10012474 <special_events_handler+0x88>)
10012448:	2200      	movs	r2, #0
1001244a:	e002      	b.n	10012452 <special_events_handler+0x66>
1001244c:	1c11      	adds	r1, r2, #0
1001244e:	2200      	movs	r2, #0
10012450:	4b09      	ldr	r3, [pc, #36]	; (10012478 <special_events_handler+0x8c>)
10012452:	4798      	blx	r3
10012454:	4243      	negs	r3, r0
10012456:	4158      	adcs	r0, r3
10012458:	bd38      	pop	{r3, r4, r5, pc}
1001245a:	46c0      	nop			; (mov r8, r8)
1001245c:	1001b0d8 	.word	0x1001b0d8
10012460:	10013ccd 	.word	0x10013ccd
10012464:	00000e13 	.word	0x00000e13
10012468:	00000e15 	.word	0x00000e15
1001246c:	00000e01 	.word	0x00000e01
10012470:	1001403d 	.word	0x1001403d
10012474:	100141fd 	.word	0x100141fd
10012478:	100142d5 	.word	0x100142d5

1001247c <at_ble_event_get>:
1001247c:	2300      	movs	r3, #0
1001247e:	b5f0      	push	{r4, r5, r6, r7, lr}
10012480:	b085      	sub	sp, #20
10012482:	9202      	str	r2, [sp, #8]
10012484:	7003      	strb	r3, [r0, #0]
10012486:	9b02      	ldr	r3, [sp, #8]
10012488:	9001      	str	r0, [sp, #4]
1001248a:	3b01      	subs	r3, #1
1001248c:	1c0d      	adds	r5, r1, #0
1001248e:	9303      	str	r3, [sp, #12]
10012490:	3303      	adds	r3, #3
10012492:	d802      	bhi.n	1001249a <at_ble_event_get+0x1e>
10012494:	9802      	ldr	r0, [sp, #8]
10012496:	4bad      	ldr	r3, [pc, #692]	; (1001274c <at_ble_event_get+0x2d0>)
10012498:	4798      	blx	r3
1001249a:	9b03      	ldr	r3, [sp, #12]
1001249c:	4fac      	ldr	r7, [pc, #688]	; (10012750 <at_ble_event_get+0x2d4>)
1001249e:	2400      	movs	r4, #0
100124a0:	3303      	adds	r3, #3
100124a2:	d812      	bhi.n	100124ca <at_ble_event_get+0x4e>
100124a4:	683b      	ldr	r3, [r7, #0]
100124a6:	2b00      	cmp	r3, #0
100124a8:	d112      	bne.n	100124d0 <at_ble_event_get+0x54>
100124aa:	2cd0      	cmp	r4, #208	; 0xd0
100124ac:	d100      	bne.n	100124b0 <at_ble_event_get+0x34>
100124ae:	e29c      	b.n	100129ea <at_ble_event_get+0x56e>
100124b0:	9802      	ldr	r0, [sp, #8]
100124b2:	4ba8      	ldr	r3, [pc, #672]	; (10012754 <at_ble_event_get+0x2d8>)
100124b4:	4798      	blx	r3
100124b6:	1e04      	subs	r4, r0, #0
100124b8:	2c02      	cmp	r4, #2
100124ba:	d1f3      	bne.n	100124a4 <at_ble_event_get+0x28>
100124bc:	e025      	b.n	1001250a <at_ble_event_get+0x8e>
100124be:	9802      	ldr	r0, [sp, #8]
100124c0:	4ba4      	ldr	r3, [pc, #656]	; (10012754 <at_ble_event_get+0x2d8>)
100124c2:	4798      	blx	r3
100124c4:	1e04      	subs	r4, r0, #0
100124c6:	2c02      	cmp	r4, #2
100124c8:	d01f      	beq.n	1001250a <at_ble_event_get+0x8e>
100124ca:	683b      	ldr	r3, [r7, #0]
100124cc:	2b00      	cmp	r3, #0
100124ce:	d0f6      	beq.n	100124be <at_ble_event_get+0x42>
100124d0:	2cd0      	cmp	r4, #208	; 0xd0
100124d2:	d100      	bne.n	100124d6 <at_ble_event_get+0x5a>
100124d4:	e289      	b.n	100129ea <at_ble_event_get+0x56e>
100124d6:	1ee3      	subs	r3, r4, #3
100124d8:	1e5a      	subs	r2, r3, #1
100124da:	4193      	sbcs	r3, r2
100124dc:	6838      	ldr	r0, [r7, #0]
100124de:	425b      	negs	r3, r3
100124e0:	401c      	ands	r4, r3
100124e2:	2800      	cmp	r0, #0
100124e4:	d100      	bne.n	100124e8 <at_ble_event_get+0x6c>
100124e6:	e286      	b.n	100129f6 <at_ble_event_get+0x57a>
100124e8:	6803      	ldr	r3, [r0, #0]
100124ea:	68c1      	ldr	r1, [r0, #12]
100124ec:	603b      	str	r3, [r7, #0]
100124ee:	4f9a      	ldr	r7, [pc, #616]	; (10012758 <at_ble_event_get+0x2dc>)
100124f0:	88c2      	ldrh	r2, [r0, #6]
100124f2:	683e      	ldr	r6, [r7, #0]
100124f4:	8883      	ldrh	r3, [r0, #4]
100124f6:	6006      	str	r6, [r0, #0]
100124f8:	6038      	str	r0, [r7, #0]
100124fa:	2c00      	cmp	r4, #0
100124fc:	d112      	bne.n	10012524 <at_ble_event_get+0xa8>
100124fe:	4897      	ldr	r0, [pc, #604]	; (1001275c <at_ble_event_get+0x2e0>)
10012500:	4283      	cmp	r3, r0
10012502:	d008      	beq.n	10012516 <at_ble_event_get+0x9a>
10012504:	4896      	ldr	r0, [pc, #600]	; (10012760 <at_ble_event_get+0x2e4>)
10012506:	4283      	cmp	r3, r0
10012508:	d11d      	bne.n	10012546 <at_ble_event_get+0xca>
1001250a:	233a      	movs	r3, #58	; 0x3a
1001250c:	2400      	movs	r4, #0
1001250e:	9a01      	ldr	r2, [sp, #4]
10012510:	1c25      	adds	r5, r4, #0
10012512:	7013      	strb	r3, [r2, #0]
10012514:	e006      	b.n	10012524 <at_ble_event_get+0xa8>
10012516:	429a      	cmp	r2, r3
10012518:	d000      	beq.n	1001251c <at_ble_event_get+0xa0>
1001251a:	e268      	b.n	100129ee <at_ble_event_get+0x572>
1001251c:	2338      	movs	r3, #56	; 0x38
1001251e:	9a01      	ldr	r2, [sp, #4]
10012520:	7013      	strb	r3, [r2, #0]
10012522:	6029      	str	r1, [r5, #0]
10012524:	9b01      	ldr	r3, [sp, #4]
10012526:	781b      	ldrb	r3, [r3, #0]
10012528:	2b3b      	cmp	r3, #59	; 0x3b
1001252a:	d003      	beq.n	10012534 <at_ble_event_get+0xb8>
1001252c:	9b03      	ldr	r3, [sp, #12]
1001252e:	3303      	adds	r3, #3
10012530:	d903      	bls.n	1001253a <at_ble_event_get+0xbe>
10012532:	e264      	b.n	100129fe <at_ble_event_get+0x582>
10012534:	2c00      	cmp	r4, #0
10012536:	d0b0      	beq.n	1001249a <at_ble_event_get+0x1e>
10012538:	e7f8      	b.n	1001252c <at_ble_event_get+0xb0>
1001253a:	2cd0      	cmp	r4, #208	; 0xd0
1001253c:	d100      	bne.n	10012540 <at_ble_event_get+0xc4>
1001253e:	e25e      	b.n	100129fe <at_ble_event_get+0x582>
10012540:	4b88      	ldr	r3, [pc, #544]	; (10012764 <at_ble_event_get+0x2e8>)
10012542:	4798      	blx	r3
10012544:	e25b      	b.n	100129fe <at_ble_event_get+0x582>
10012546:	2abb      	cmp	r2, #187	; 0xbb
10012548:	d123      	bne.n	10012592 <at_ble_event_get+0x116>
1001254a:	2bbb      	cmp	r3, #187	; 0xbb
1001254c:	d121      	bne.n	10012592 <at_ble_event_get+0x116>
1001254e:	80ac      	strh	r4, [r5, #4]
10012550:	788b      	ldrb	r3, [r1, #2]
10012552:	784a      	ldrb	r2, [r1, #1]
10012554:	021b      	lsls	r3, r3, #8
10012556:	78cf      	ldrb	r7, [r1, #3]
10012558:	7908      	ldrb	r0, [r1, #4]
1001255a:	4313      	orrs	r3, r2
1001255c:	794a      	ldrb	r2, [r1, #5]
1001255e:	4982      	ldr	r1, [pc, #520]	; (10012768 <at_ble_event_get+0x2ec>)
10012560:	70af      	strb	r7, [r5, #2]
10012562:	802b      	strh	r3, [r5, #0]
10012564:	428b      	cmp	r3, r1
10012566:	d806      	bhi.n	10012576 <at_ble_event_get+0xfa>
10012568:	4a80      	ldr	r2, [pc, #512]	; (1001276c <at_ble_event_get+0x2f0>)
1001256a:	4293      	cmp	r3, r2
1001256c:	d20b      	bcs.n	10012586 <at_ble_event_get+0x10a>
1001256e:	4a80      	ldr	r2, [pc, #512]	; (10012770 <at_ble_event_get+0x2f4>)
10012570:	4293      	cmp	r3, r2
10012572:	d008      	beq.n	10012586 <at_ble_event_get+0x10a>
10012574:	e009      	b.n	1001258a <at_ble_event_get+0x10e>
10012576:	497f      	ldr	r1, [pc, #508]	; (10012774 <at_ble_event_get+0x2f8>)
10012578:	428b      	cmp	r3, r1
1001257a:	d106      	bne.n	1001258a <at_ble_event_get+0x10e>
1001257c:	0213      	lsls	r3, r2, #8
1001257e:	4303      	orrs	r3, r0
10012580:	80ab      	strh	r3, [r5, #4]
10012582:	2337      	movs	r3, #55	; 0x37
10012584:	e002      	b.n	1001258c <at_ble_event_get+0x110>
10012586:	2336      	movs	r3, #54	; 0x36
10012588:	e000      	b.n	1001258c <at_ble_event_get+0x110>
1001258a:	2300      	movs	r3, #0
1001258c:	9a01      	ldr	r2, [sp, #4]
1001258e:	7013      	strb	r3, [r2, #0]
10012590:	e7c8      	b.n	10012524 <at_ble_event_get+0xa8>
10012592:	4879      	ldr	r0, [pc, #484]	; (10012778 <at_ble_event_get+0x2fc>)
10012594:	4283      	cmp	r3, r0
10012596:	d100      	bne.n	1001259a <at_ble_event_get+0x11e>
10012598:	e14c      	b.n	10012834 <at_ble_event_get+0x3b8>
1001259a:	d864      	bhi.n	10012666 <at_ble_event_get+0x1ea>
1001259c:	4877      	ldr	r0, [pc, #476]	; (1001277c <at_ble_event_get+0x300>)
1001259e:	4283      	cmp	r3, r0
100125a0:	d100      	bne.n	100125a4 <at_ble_event_get+0x128>
100125a2:	e1cd      	b.n	10012940 <at_ble_event_get+0x4c4>
100125a4:	d82f      	bhi.n	10012606 <at_ble_event_get+0x18a>
100125a6:	4876      	ldr	r0, [pc, #472]	; (10012780 <at_ble_event_get+0x304>)
100125a8:	4283      	cmp	r3, r0
100125aa:	d100      	bne.n	100125ae <at_ble_event_get+0x132>
100125ac:	e1d6      	b.n	1001295c <at_ble_event_get+0x4e0>
100125ae:	d813      	bhi.n	100125d8 <at_ble_event_get+0x15c>
100125b0:	4874      	ldr	r0, [pc, #464]	; (10012784 <at_ble_event_get+0x308>)
100125b2:	4283      	cmp	r3, r0
100125b4:	d100      	bne.n	100125b8 <at_ble_event_get+0x13c>
100125b6:	e19f      	b.n	100128f8 <at_ble_event_get+0x47c>
100125b8:	d804      	bhi.n	100125c4 <at_ble_event_get+0x148>
100125ba:	2438      	movs	r4, #56	; 0x38
100125bc:	42a3      	cmp	r3, r4
100125be:	d100      	bne.n	100125c2 <at_ble_event_get+0x146>
100125c0:	e20f      	b.n	100129e2 <at_ble_event_get+0x566>
100125c2:	e0b6      	b.n	10012732 <at_ble_event_get+0x2b6>
100125c4:	4870      	ldr	r0, [pc, #448]	; (10012788 <at_ble_event_get+0x30c>)
100125c6:	4283      	cmp	r3, r0
100125c8:	d100      	bne.n	100125cc <at_ble_event_get+0x150>
100125ca:	e19b      	b.n	10012904 <at_ble_event_get+0x488>
100125cc:	30fe      	adds	r0, #254	; 0xfe
100125ce:	30ff      	adds	r0, #255	; 0xff
100125d0:	4283      	cmp	r3, r0
100125d2:	d100      	bne.n	100125d6 <at_ble_event_get+0x15a>
100125d4:	e1c8      	b.n	10012968 <at_ble_event_get+0x4ec>
100125d6:	e0ac      	b.n	10012732 <at_ble_event_get+0x2b6>
100125d8:	486c      	ldr	r0, [pc, #432]	; (1001278c <at_ble_event_get+0x310>)
100125da:	4283      	cmp	r3, r0
100125dc:	d100      	bne.n	100125e0 <at_ble_event_get+0x164>
100125de:	e1a3      	b.n	10012928 <at_ble_event_get+0x4ac>
100125e0:	d808      	bhi.n	100125f4 <at_ble_event_get+0x178>
100125e2:	486b      	ldr	r0, [pc, #428]	; (10012790 <at_ble_event_get+0x314>)
100125e4:	4283      	cmp	r3, r0
100125e6:	d100      	bne.n	100125ea <at_ble_event_get+0x16e>
100125e8:	e192      	b.n	10012910 <at_ble_event_get+0x494>
100125ea:	486a      	ldr	r0, [pc, #424]	; (10012794 <at_ble_event_get+0x318>)
100125ec:	4283      	cmp	r3, r0
100125ee:	d100      	bne.n	100125f2 <at_ble_event_get+0x176>
100125f0:	e194      	b.n	1001291c <at_ble_event_get+0x4a0>
100125f2:	e09e      	b.n	10012732 <at_ble_event_get+0x2b6>
100125f4:	4868      	ldr	r0, [pc, #416]	; (10012798 <at_ble_event_get+0x31c>)
100125f6:	4283      	cmp	r3, r0
100125f8:	d100      	bne.n	100125fc <at_ble_event_get+0x180>
100125fa:	e19b      	b.n	10012934 <at_ble_event_get+0x4b8>
100125fc:	4867      	ldr	r0, [pc, #412]	; (1001279c <at_ble_event_get+0x320>)
100125fe:	4283      	cmp	r3, r0
10012600:	d100      	bne.n	10012604 <at_ble_event_get+0x188>
10012602:	e1c5      	b.n	10012990 <at_ble_event_get+0x514>
10012604:	e095      	b.n	10012732 <at_ble_event_get+0x2b6>
10012606:	4866      	ldr	r0, [pc, #408]	; (100127a0 <at_ble_event_get+0x324>)
10012608:	4283      	cmp	r3, r0
1001260a:	d100      	bne.n	1001260e <at_ble_event_get+0x192>
1001260c:	e1ba      	b.n	10012984 <at_ble_event_get+0x508>
1001260e:	d812      	bhi.n	10012636 <at_ble_event_get+0x1ba>
10012610:	4864      	ldr	r0, [pc, #400]	; (100127a4 <at_ble_event_get+0x328>)
10012612:	4283      	cmp	r3, r0
10012614:	d100      	bne.n	10012618 <at_ble_event_get+0x19c>
10012616:	e1c1      	b.n	1001299c <at_ble_event_get+0x520>
10012618:	d804      	bhi.n	10012624 <at_ble_event_get+0x1a8>
1001261a:	4863      	ldr	r0, [pc, #396]	; (100127a8 <at_ble_event_get+0x32c>)
1001261c:	4283      	cmp	r3, r0
1001261e:	d100      	bne.n	10012622 <at_ble_event_get+0x1a6>
10012620:	e192      	b.n	10012948 <at_ble_event_get+0x4cc>
10012622:	e086      	b.n	10012732 <at_ble_event_get+0x2b6>
10012624:	4861      	ldr	r0, [pc, #388]	; (100127ac <at_ble_event_get+0x330>)
10012626:	4283      	cmp	r3, r0
10012628:	d100      	bne.n	1001262c <at_ble_event_get+0x1b0>
1001262a:	e1a1      	b.n	10012970 <at_ble_event_get+0x4f4>
1001262c:	4860      	ldr	r0, [pc, #384]	; (100127b0 <at_ble_event_get+0x334>)
1001262e:	4283      	cmp	r3, r0
10012630:	d100      	bne.n	10012634 <at_ble_event_get+0x1b8>
10012632:	e1a3      	b.n	1001297c <at_ble_event_get+0x500>
10012634:	e07d      	b.n	10012732 <at_ble_event_get+0x2b6>
10012636:	4a5f      	ldr	r2, [pc, #380]	; (100127b4 <at_ble_event_get+0x338>)
10012638:	4293      	cmp	r3, r2
1001263a:	d100      	bne.n	1001263e <at_ble_event_get+0x1c2>
1001263c:	e07f      	b.n	1001273e <at_ble_event_get+0x2c2>
1001263e:	d808      	bhi.n	10012652 <at_ble_event_get+0x1d6>
10012640:	3a08      	subs	r2, #8
10012642:	4293      	cmp	r3, r2
10012644:	d077      	beq.n	10012736 <at_ble_event_get+0x2ba>
10012646:	4a5c      	ldr	r2, [pc, #368]	; (100127b8 <at_ble_event_get+0x33c>)
10012648:	2439      	movs	r4, #57	; 0x39
1001264a:	4293      	cmp	r3, r2
1001264c:	d100      	bne.n	10012650 <at_ble_event_get+0x1d4>
1001264e:	e1c8      	b.n	100129e2 <at_ble_event_get+0x566>
10012650:	e06f      	b.n	10012732 <at_ble_event_get+0x2b6>
10012652:	22d1      	movs	r2, #209	; 0xd1
10012654:	0112      	lsls	r2, r2, #4
10012656:	4293      	cmp	r3, r2
10012658:	d100      	bne.n	1001265c <at_ble_event_get+0x1e0>
1001265a:	e0df      	b.n	1001281c <at_ble_event_get+0x3a0>
1001265c:	4a57      	ldr	r2, [pc, #348]	; (100127bc <at_ble_event_get+0x340>)
1001265e:	4293      	cmp	r3, r2
10012660:	d100      	bne.n	10012664 <at_ble_event_get+0x1e8>
10012662:	e0e1      	b.n	10012828 <at_ble_event_get+0x3ac>
10012664:	e065      	b.n	10012732 <at_ble_event_get+0x2b6>
10012666:	4856      	ldr	r0, [pc, #344]	; (100127c0 <at_ble_event_get+0x344>)
10012668:	4283      	cmp	r3, r0
1001266a:	d100      	bne.n	1001266e <at_ble_event_get+0x1f2>
1001266c:	e118      	b.n	100128a0 <at_ble_event_get+0x424>
1001266e:	d82e      	bhi.n	100126ce <at_ble_event_get+0x252>
10012670:	4854      	ldr	r0, [pc, #336]	; (100127c4 <at_ble_event_get+0x348>)
10012672:	4283      	cmp	r3, r0
10012674:	d100      	bne.n	10012678 <at_ble_event_get+0x1fc>
10012676:	e13b      	b.n	100128f0 <at_ble_event_get+0x474>
10012678:	d812      	bhi.n	100126a0 <at_ble_event_get+0x224>
1001267a:	4853      	ldr	r0, [pc, #332]	; (100127c8 <at_ble_event_get+0x34c>)
1001267c:	4283      	cmp	r3, r0
1001267e:	d100      	bne.n	10012682 <at_ble_event_get+0x206>
10012680:	e0ee      	b.n	10012860 <at_ble_event_get+0x3e4>
10012682:	d804      	bhi.n	1001268e <at_ble_event_get+0x212>
10012684:	3803      	subs	r0, #3
10012686:	4283      	cmp	r3, r0
10012688:	d100      	bne.n	1001268c <at_ble_event_get+0x210>
1001268a:	e0d9      	b.n	10012840 <at_ble_event_get+0x3c4>
1001268c:	e051      	b.n	10012732 <at_ble_event_get+0x2b6>
1001268e:	484f      	ldr	r0, [pc, #316]	; (100127cc <at_ble_event_get+0x350>)
10012690:	4283      	cmp	r3, r0
10012692:	d100      	bne.n	10012696 <at_ble_event_get+0x21a>
10012694:	e0d8      	b.n	10012848 <at_ble_event_get+0x3cc>
10012696:	484e      	ldr	r0, [pc, #312]	; (100127d0 <at_ble_event_get+0x354>)
10012698:	4283      	cmp	r3, r0
1001269a:	d100      	bne.n	1001269e <at_ble_event_get+0x222>
1001269c:	e0fb      	b.n	10012896 <at_ble_event_get+0x41a>
1001269e:	e048      	b.n	10012732 <at_ble_event_get+0x2b6>
100126a0:	484c      	ldr	r0, [pc, #304]	; (100127d4 <at_ble_event_get+0x358>)
100126a2:	4283      	cmp	r3, r0
100126a4:	d100      	bne.n	100126a8 <at_ble_event_get+0x22c>
100126a6:	e0e1      	b.n	1001286c <at_ble_event_get+0x3f0>
100126a8:	d808      	bhi.n	100126bc <at_ble_event_get+0x240>
100126aa:	484b      	ldr	r0, [pc, #300]	; (100127d8 <at_ble_event_get+0x35c>)
100126ac:	4283      	cmp	r3, r0
100126ae:	d100      	bne.n	100126b2 <at_ble_event_get+0x236>
100126b0:	e11a      	b.n	100128e8 <at_ble_event_get+0x46c>
100126b2:	484a      	ldr	r0, [pc, #296]	; (100127dc <at_ble_event_get+0x360>)
100126b4:	4283      	cmp	r3, r0
100126b6:	d100      	bne.n	100126ba <at_ble_event_get+0x23e>
100126b8:	e0dd      	b.n	10012876 <at_ble_event_get+0x3fa>
100126ba:	e03a      	b.n	10012732 <at_ble_event_get+0x2b6>
100126bc:	4848      	ldr	r0, [pc, #288]	; (100127e0 <at_ble_event_get+0x364>)
100126be:	4283      	cmp	r3, r0
100126c0:	d100      	bne.n	100126c4 <at_ble_event_get+0x248>
100126c2:	e0dc      	b.n	1001287e <at_ble_event_get+0x402>
100126c4:	4847      	ldr	r0, [pc, #284]	; (100127e4 <at_ble_event_get+0x368>)
100126c6:	4283      	cmp	r3, r0
100126c8:	d100      	bne.n	100126cc <at_ble_event_get+0x250>
100126ca:	e0de      	b.n	1001288a <at_ble_event_get+0x40e>
100126cc:	e031      	b.n	10012732 <at_ble_event_get+0x2b6>
100126ce:	4846      	ldr	r0, [pc, #280]	; (100127e8 <at_ble_event_get+0x36c>)
100126d0:	4283      	cmp	r3, r0
100126d2:	d100      	bne.n	100126d6 <at_ble_event_get+0x25a>
100126d4:	e0f6      	b.n	100128c4 <at_ble_event_get+0x448>
100126d6:	d816      	bhi.n	10012706 <at_ble_event_get+0x28a>
100126d8:	4844      	ldr	r0, [pc, #272]	; (100127ec <at_ble_event_get+0x370>)
100126da:	4283      	cmp	r3, r0
100126dc:	d100      	bne.n	100126e0 <at_ble_event_get+0x264>
100126de:	e0f7      	b.n	100128d0 <at_ble_event_get+0x454>
100126e0:	d808      	bhi.n	100126f4 <at_ble_event_get+0x278>
100126e2:	4843      	ldr	r0, [pc, #268]	; (100127f0 <at_ble_event_get+0x374>)
100126e4:	4283      	cmp	r3, r0
100126e6:	d100      	bne.n	100126ea <at_ble_event_get+0x26e>
100126e8:	e0e0      	b.n	100128ac <at_ble_event_get+0x430>
100126ea:	4842      	ldr	r0, [pc, #264]	; (100127f4 <at_ble_event_get+0x378>)
100126ec:	4283      	cmp	r3, r0
100126ee:	d100      	bne.n	100126f2 <at_ble_event_get+0x276>
100126f0:	e0b0      	b.n	10012854 <at_ble_event_get+0x3d8>
100126f2:	e01e      	b.n	10012732 <at_ble_event_get+0x2b6>
100126f4:	4a40      	ldr	r2, [pc, #256]	; (100127f8 <at_ble_event_get+0x37c>)
100126f6:	4293      	cmp	r3, r2
100126f8:	d100      	bne.n	100126fc <at_ble_event_get+0x280>
100126fa:	e0dd      	b.n	100128b8 <at_ble_event_get+0x43c>
100126fc:	4a3f      	ldr	r2, [pc, #252]	; (100127fc <at_ble_event_get+0x380>)
100126fe:	4293      	cmp	r3, r2
10012700:	d100      	bne.n	10012704 <at_ble_event_get+0x288>
10012702:	e0eb      	b.n	100128dc <at_ble_event_get+0x460>
10012704:	e015      	b.n	10012732 <at_ble_event_get+0x2b6>
10012706:	483e      	ldr	r0, [pc, #248]	; (10012800 <at_ble_event_get+0x384>)
10012708:	4283      	cmp	r3, r0
1001270a:	d100      	bne.n	1001270e <at_ble_event_get+0x292>
1001270c:	e158      	b.n	100129c0 <at_ble_event_get+0x544>
1001270e:	d808      	bhi.n	10012722 <at_ble_event_get+0x2a6>
10012710:	483c      	ldr	r0, [pc, #240]	; (10012804 <at_ble_event_get+0x388>)
10012712:	4283      	cmp	r3, r0
10012714:	d100      	bne.n	10012718 <at_ble_event_get+0x29c>
10012716:	e147      	b.n	100129a8 <at_ble_event_get+0x52c>
10012718:	483b      	ldr	r0, [pc, #236]	; (10012808 <at_ble_event_get+0x38c>)
1001271a:	4283      	cmp	r3, r0
1001271c:	d100      	bne.n	10012720 <at_ble_event_get+0x2a4>
1001271e:	e149      	b.n	100129b4 <at_ble_event_get+0x538>
10012720:	e007      	b.n	10012732 <at_ble_event_get+0x2b6>
10012722:	483a      	ldr	r0, [pc, #232]	; (1001280c <at_ble_event_get+0x390>)
10012724:	4283      	cmp	r3, r0
10012726:	d100      	bne.n	1001272a <at_ble_event_get+0x2ae>
10012728:	e150      	b.n	100129cc <at_ble_event_get+0x550>
1001272a:	4839      	ldr	r0, [pc, #228]	; (10012810 <at_ble_event_get+0x394>)
1001272c:	4283      	cmp	r3, r0
1001272e:	d100      	bne.n	10012732 <at_ble_event_get+0x2b6>
10012730:	e152      	b.n	100129d8 <at_ble_event_get+0x55c>
10012732:	2400      	movs	r4, #0
10012734:	e155      	b.n	100129e2 <at_ble_event_get+0x566>
10012736:	1c08      	adds	r0, r1, #0
10012738:	4b36      	ldr	r3, [pc, #216]	; (10012814 <at_ble_event_get+0x398>)
1001273a:	1c29      	adds	r1, r5, #0
1001273c:	e07d      	b.n	1001283a <at_ble_event_get+0x3be>
1001273e:	1c08      	adds	r0, r1, #0
10012740:	4b35      	ldr	r3, [pc, #212]	; (10012818 <at_ble_event_get+0x39c>)
10012742:	1c29      	adds	r1, r5, #0
10012744:	4798      	blx	r3
10012746:	2404      	movs	r4, #4
10012748:	e14b      	b.n	100129e2 <at_ble_event_get+0x566>
1001274a:	46c0      	nop			; (mov r8, r8)
1001274c:	10013d05 	.word	0x10013d05
10012750:	1001a1cc 	.word	0x1001a1cc
10012754:	10011dd1 	.word	0x10011dd1
10012758:	1001a1d0 	.word	0x1001a1d0
1001275c:	0000ffff 	.word	0x0000ffff
10012760:	0000fffe 	.word	0x0000fffe
10012764:	10013d07 	.word	0x10013d07
10012768:	0000201e 	.word	0x0000201e
1001276c:	0000201d 	.word	0x0000201d
10012770:	00000c03 	.word	0x00000c03
10012774:	0000201f 	.word	0x0000201f
10012778:	00000d1c 	.word	0x00000d1c
1001277c:	00000c0c 	.word	0x00000c0c
10012780:	00000c02 	.word	0x00000c02
10012784:	00000a02 	.word	0x00000a02
10012788:	00000a03 	.word	0x00000a03
1001278c:	00000c06 	.word	0x00000c06
10012790:	00000c04 	.word	0x00000c04
10012794:	00000c05 	.word	0x00000c05
10012798:	00000c07 	.word	0x00000c07
1001279c:	00000c09 	.word	0x00000c09
100127a0:	00000c17 	.word	0x00000c17
100127a4:	00000c12 	.word	0x00000c12
100127a8:	00000c0d 	.word	0x00000c0d
100127ac:	00000c13 	.word	0x00000c13
100127b0:	00000c15 	.word	0x00000c15
100127b4:	00000d08 	.word	0x00000d08
100127b8:	00000d01 	.word	0x00000d01
100127bc:	00000d15 	.word	0x00000d15
100127c0:	00000e1b 	.word	0x00000e1b
100127c4:	00000e0f 	.word	0x00000e0f
100127c8:	00000e03 	.word	0x00000e03
100127cc:	00000e06 	.word	0x00000e06
100127d0:	00000e0a 	.word	0x00000e0a
100127d4:	00000e15 	.word	0x00000e15
100127d8:	00000e11 	.word	0x00000e11
100127dc:	00000e13 	.word	0x00000e13
100127e0:	00000e17 	.word	0x00000e17
100127e4:	00000e19 	.word	0x00000e19
100127e8:	00000e27 	.word	0x00000e27
100127ec:	00000e21 	.word	0x00000e21
100127f0:	00000e1c 	.word	0x00000e1c
100127f4:	00000e1d 	.word	0x00000e1d
100127f8:	00000e22 	.word	0x00000e22
100127fc:	00000e25 	.word	0x00000e25
10012800:	00001b05 	.word	0x00001b05
10012804:	00001b01 	.word	0x00001b01
10012808:	00001b03 	.word	0x00001b03
1001280c:	00001b06 	.word	0x00001b06
10012810:	00001b08 	.word	0x00001b08
10012814:	10014b31 	.word	0x10014b31
10012818:	10014b15 	.word	0x10014b15
1001281c:	1c08      	adds	r0, r1, #0
1001281e:	4b79      	ldr	r3, [pc, #484]	; (10012a04 <at_ble_event_get+0x588>)
10012820:	1c29      	adds	r1, r5, #0
10012822:	4798      	blx	r3
10012824:	2401      	movs	r4, #1
10012826:	e0dc      	b.n	100129e2 <at_ble_event_get+0x566>
10012828:	1c08      	adds	r0, r1, #0
1001282a:	4b77      	ldr	r3, [pc, #476]	; (10012a08 <at_ble_event_get+0x58c>)
1001282c:	1c29      	adds	r1, r5, #0
1001282e:	4798      	blx	r3
10012830:	240f      	movs	r4, #15
10012832:	e0d6      	b.n	100129e2 <at_ble_event_get+0x566>
10012834:	1c08      	adds	r0, r1, #0
10012836:	1c29      	adds	r1, r5, #0
10012838:	4b74      	ldr	r3, [pc, #464]	; (10012a0c <at_ble_event_get+0x590>)
1001283a:	4798      	blx	r3
1001283c:	1c04      	adds	r4, r0, #0
1001283e:	e0d0      	b.n	100129e2 <at_ble_event_get+0x566>
10012840:	1c10      	adds	r0, r2, #0
10012842:	4b73      	ldr	r3, [pc, #460]	; (10012a10 <at_ble_event_get+0x594>)
10012844:	1c2a      	adds	r2, r5, #0
10012846:	e014      	b.n	10012872 <at_ble_event_get+0x3f6>
10012848:	1c10      	adds	r0, r2, #0
1001284a:	4b72      	ldr	r3, [pc, #456]	; (10012a14 <at_ble_event_get+0x598>)
1001284c:	1c2a      	adds	r2, r5, #0
1001284e:	4798      	blx	r3
10012850:	2411      	movs	r4, #17
10012852:	e0c6      	b.n	100129e2 <at_ble_event_get+0x566>
10012854:	1c10      	adds	r0, r2, #0
10012856:	4b70      	ldr	r3, [pc, #448]	; (10012a18 <at_ble_event_get+0x59c>)
10012858:	1c2a      	adds	r2, r5, #0
1001285a:	4798      	blx	r3
1001285c:	2412      	movs	r4, #18
1001285e:	e0c0      	b.n	100129e2 <at_ble_event_get+0x566>
10012860:	1c08      	adds	r0, r1, #0
10012862:	4b6e      	ldr	r3, [pc, #440]	; (10012a1c <at_ble_event_get+0x5a0>)
10012864:	1c29      	adds	r1, r5, #0
10012866:	4798      	blx	r3
10012868:	2406      	movs	r4, #6
1001286a:	e0ba      	b.n	100129e2 <at_ble_event_get+0x566>
1001286c:	1c10      	adds	r0, r2, #0
1001286e:	1c2a      	adds	r2, r5, #0
10012870:	4b6b      	ldr	r3, [pc, #428]	; (10012a20 <at_ble_event_get+0x5a4>)
10012872:	4798      	blx	r3
10012874:	e7e2      	b.n	1001283c <at_ble_event_get+0x3c0>
10012876:	1c10      	adds	r0, r2, #0
10012878:	4b6a      	ldr	r3, [pc, #424]	; (10012a24 <at_ble_event_get+0x5a8>)
1001287a:	1c2a      	adds	r2, r5, #0
1001287c:	e7f9      	b.n	10012872 <at_ble_event_get+0x3f6>
1001287e:	1c10      	adds	r0, r2, #0
10012880:	4b69      	ldr	r3, [pc, #420]	; (10012a28 <at_ble_event_get+0x5ac>)
10012882:	1c2a      	adds	r2, r5, #0
10012884:	4798      	blx	r3
10012886:	240d      	movs	r4, #13
10012888:	e0ab      	b.n	100129e2 <at_ble_event_get+0x566>
1001288a:	1c10      	adds	r0, r2, #0
1001288c:	4b67      	ldr	r3, [pc, #412]	; (10012a2c <at_ble_event_get+0x5b0>)
1001288e:	1c2a      	adds	r2, r5, #0
10012890:	4798      	blx	r3
10012892:	240e      	movs	r4, #14
10012894:	e0a5      	b.n	100129e2 <at_ble_event_get+0x566>
10012896:	1c10      	adds	r0, r2, #0
10012898:	4b65      	ldr	r3, [pc, #404]	; (10012a30 <at_ble_event_get+0x5b4>)
1001289a:	1c2a      	adds	r2, r5, #0
1001289c:	4798      	blx	r3
1001289e:	e075      	b.n	1001298c <at_ble_event_get+0x510>
100128a0:	1c10      	adds	r0, r2, #0
100128a2:	4b64      	ldr	r3, [pc, #400]	; (10012a34 <at_ble_event_get+0x5b8>)
100128a4:	1c2a      	adds	r2, r5, #0
100128a6:	4798      	blx	r3
100128a8:	240b      	movs	r4, #11
100128aa:	e09a      	b.n	100129e2 <at_ble_event_get+0x566>
100128ac:	1c10      	adds	r0, r2, #0
100128ae:	4b62      	ldr	r3, [pc, #392]	; (10012a38 <at_ble_event_get+0x5bc>)
100128b0:	1c2a      	adds	r2, r5, #0
100128b2:	4798      	blx	r3
100128b4:	2410      	movs	r4, #16
100128b6:	e094      	b.n	100129e2 <at_ble_event_get+0x566>
100128b8:	1c08      	adds	r0, r1, #0
100128ba:	4b60      	ldr	r3, [pc, #384]	; (10012a3c <at_ble_event_get+0x5c0>)
100128bc:	1c29      	adds	r1, r5, #0
100128be:	4798      	blx	r3
100128c0:	2428      	movs	r4, #40	; 0x28
100128c2:	e08e      	b.n	100129e2 <at_ble_event_get+0x566>
100128c4:	1c08      	adds	r0, r1, #0
100128c6:	4b5e      	ldr	r3, [pc, #376]	; (10012a40 <at_ble_event_get+0x5c4>)
100128c8:	1c29      	adds	r1, r5, #0
100128ca:	4798      	blx	r3
100128cc:	2429      	movs	r4, #41	; 0x29
100128ce:	e088      	b.n	100129e2 <at_ble_event_get+0x566>
100128d0:	1c08      	adds	r0, r1, #0
100128d2:	4b5c      	ldr	r3, [pc, #368]	; (10012a44 <at_ble_event_get+0x5c8>)
100128d4:	1c29      	adds	r1, r5, #0
100128d6:	4798      	blx	r3
100128d8:	2427      	movs	r4, #39	; 0x27
100128da:	e082      	b.n	100129e2 <at_ble_event_get+0x566>
100128dc:	1c08      	adds	r0, r1, #0
100128de:	4b5a      	ldr	r3, [pc, #360]	; (10012a48 <at_ble_event_get+0x5cc>)
100128e0:	1c29      	adds	r1, r5, #0
100128e2:	4798      	blx	r3
100128e4:	242a      	movs	r4, #42	; 0x2a
100128e6:	e07c      	b.n	100129e2 <at_ble_event_get+0x566>
100128e8:	1c10      	adds	r0, r2, #0
100128ea:	4b58      	ldr	r3, [pc, #352]	; (10012a4c <at_ble_event_get+0x5d0>)
100128ec:	1c2a      	adds	r2, r5, #0
100128ee:	e7c0      	b.n	10012872 <at_ble_event_get+0x3f6>
100128f0:	1c10      	adds	r0, r2, #0
100128f2:	4b57      	ldr	r3, [pc, #348]	; (10012a50 <at_ble_event_get+0x5d4>)
100128f4:	1c2a      	adds	r2, r5, #0
100128f6:	e7bc      	b.n	10012872 <at_ble_event_get+0x3f6>
100128f8:	1c08      	adds	r0, r1, #0
100128fa:	4b56      	ldr	r3, [pc, #344]	; (10012a54 <at_ble_event_get+0x5d8>)
100128fc:	1c29      	adds	r1, r5, #0
100128fe:	4798      	blx	r3
10012900:	242b      	movs	r4, #43	; 0x2b
10012902:	e06e      	b.n	100129e2 <at_ble_event_get+0x566>
10012904:	1c08      	adds	r0, r1, #0
10012906:	4b54      	ldr	r3, [pc, #336]	; (10012a58 <at_ble_event_get+0x5dc>)
10012908:	1c29      	adds	r1, r5, #0
1001290a:	4798      	blx	r3
1001290c:	242c      	movs	r4, #44	; 0x2c
1001290e:	e068      	b.n	100129e2 <at_ble_event_get+0x566>
10012910:	1c10      	adds	r0, r2, #0
10012912:	4b52      	ldr	r3, [pc, #328]	; (10012a5c <at_ble_event_get+0x5e0>)
10012914:	1c2a      	adds	r2, r5, #0
10012916:	4798      	blx	r3
10012918:	2413      	movs	r4, #19
1001291a:	e062      	b.n	100129e2 <at_ble_event_get+0x566>
1001291c:	1c10      	adds	r0, r2, #0
1001291e:	4b50      	ldr	r3, [pc, #320]	; (10012a60 <at_ble_event_get+0x5e4>)
10012920:	1c2a      	adds	r2, r5, #0
10012922:	4798      	blx	r3
10012924:	2414      	movs	r4, #20
10012926:	e05c      	b.n	100129e2 <at_ble_event_get+0x566>
10012928:	1c10      	adds	r0, r2, #0
1001292a:	4b4e      	ldr	r3, [pc, #312]	; (10012a64 <at_ble_event_get+0x5e8>)
1001292c:	1c2a      	adds	r2, r5, #0
1001292e:	4798      	blx	r3
10012930:	2415      	movs	r4, #21
10012932:	e056      	b.n	100129e2 <at_ble_event_get+0x566>
10012934:	1c10      	adds	r0, r2, #0
10012936:	4b4c      	ldr	r3, [pc, #304]	; (10012a68 <at_ble_event_get+0x5ec>)
10012938:	1c2a      	adds	r2, r5, #0
1001293a:	4798      	blx	r3
1001293c:	2416      	movs	r4, #22
1001293e:	e050      	b.n	100129e2 <at_ble_event_get+0x566>
10012940:	1c10      	adds	r0, r2, #0
10012942:	4b4a      	ldr	r3, [pc, #296]	; (10012a6c <at_ble_event_get+0x5f0>)
10012944:	1c2a      	adds	r2, r5, #0
10012946:	e794      	b.n	10012872 <at_ble_event_get+0x3f6>
10012948:	1c10      	adds	r0, r2, #0
1001294a:	4b48      	ldr	r3, [pc, #288]	; (10012a6c <at_ble_event_get+0x5f0>)
1001294c:	1c2a      	adds	r2, r5, #0
1001294e:	4798      	blx	r3
10012950:	88a9      	ldrh	r1, [r5, #4]
10012952:	1c04      	adds	r4, r0, #0
10012954:	4b46      	ldr	r3, [pc, #280]	; (10012a70 <at_ble_event_get+0x5f4>)
10012956:	8828      	ldrh	r0, [r5, #0]
10012958:	4798      	blx	r3
1001295a:	e042      	b.n	100129e2 <at_ble_event_get+0x566>
1001295c:	1c10      	adds	r0, r2, #0
1001295e:	4b45      	ldr	r3, [pc, #276]	; (10012a74 <at_ble_event_get+0x5f8>)
10012960:	1c2a      	adds	r2, r5, #0
10012962:	4798      	blx	r3
10012964:	2423      	movs	r4, #35	; 0x23
10012966:	e03c      	b.n	100129e2 <at_ble_event_get+0x566>
10012968:	1c10      	adds	r0, r2, #0
1001296a:	4b43      	ldr	r3, [pc, #268]	; (10012a78 <at_ble_event_get+0x5fc>)
1001296c:	1c2a      	adds	r2, r5, #0
1001296e:	e780      	b.n	10012872 <at_ble_event_get+0x3f6>
10012970:	0a12      	lsrs	r2, r2, #8
10012972:	1c08      	adds	r0, r1, #0
10012974:	802a      	strh	r2, [r5, #0]
10012976:	1c29      	adds	r1, r5, #0
10012978:	4b40      	ldr	r3, [pc, #256]	; (10012a7c <at_ble_event_get+0x600>)
1001297a:	e75e      	b.n	1001283a <at_ble_event_get+0x3be>
1001297c:	1c10      	adds	r0, r2, #0
1001297e:	4b40      	ldr	r3, [pc, #256]	; (10012a80 <at_ble_event_get+0x604>)
10012980:	1c2a      	adds	r2, r5, #0
10012982:	e776      	b.n	10012872 <at_ble_event_get+0x3f6>
10012984:	1c08      	adds	r0, r1, #0
10012986:	4b3f      	ldr	r3, [pc, #252]	; (10012a84 <at_ble_event_get+0x608>)
10012988:	1c29      	adds	r1, r5, #0
1001298a:	4798      	blx	r3
1001298c:	243b      	movs	r4, #59	; 0x3b
1001298e:	e028      	b.n	100129e2 <at_ble_event_get+0x566>
10012990:	1c10      	adds	r0, r2, #0
10012992:	4b3d      	ldr	r3, [pc, #244]	; (10012a88 <at_ble_event_get+0x60c>)
10012994:	1c2a      	adds	r2, r5, #0
10012996:	4798      	blx	r3
10012998:	2418      	movs	r4, #24
1001299a:	e022      	b.n	100129e2 <at_ble_event_get+0x566>
1001299c:	1c10      	adds	r0, r2, #0
1001299e:	4b3b      	ldr	r3, [pc, #236]	; (10012a8c <at_ble_event_get+0x610>)
100129a0:	1c2a      	adds	r2, r5, #0
100129a2:	4798      	blx	r3
100129a4:	2420      	movs	r4, #32
100129a6:	e01c      	b.n	100129e2 <at_ble_event_get+0x566>
100129a8:	1c10      	adds	r0, r2, #0
100129aa:	4b39      	ldr	r3, [pc, #228]	; (10012a90 <at_ble_event_get+0x614>)
100129ac:	1c2a      	adds	r2, r5, #0
100129ae:	4798      	blx	r3
100129b0:	2433      	movs	r4, #51	; 0x33
100129b2:	e016      	b.n	100129e2 <at_ble_event_get+0x566>
100129b4:	1c10      	adds	r0, r2, #0
100129b6:	4b37      	ldr	r3, [pc, #220]	; (10012a94 <at_ble_event_get+0x618>)
100129b8:	1c2a      	adds	r2, r5, #0
100129ba:	4798      	blx	r3
100129bc:	2430      	movs	r4, #48	; 0x30
100129be:	e010      	b.n	100129e2 <at_ble_event_get+0x566>
100129c0:	1c10      	adds	r0, r2, #0
100129c2:	4b35      	ldr	r3, [pc, #212]	; (10012a98 <at_ble_event_get+0x61c>)
100129c4:	1c2a      	adds	r2, r5, #0
100129c6:	4798      	blx	r3
100129c8:	2434      	movs	r4, #52	; 0x34
100129ca:	e00a      	b.n	100129e2 <at_ble_event_get+0x566>
100129cc:	1c10      	adds	r0, r2, #0
100129ce:	4b33      	ldr	r3, [pc, #204]	; (10012a9c <at_ble_event_get+0x620>)
100129d0:	1c2a      	adds	r2, r5, #0
100129d2:	4798      	blx	r3
100129d4:	2435      	movs	r4, #53	; 0x35
100129d6:	e004      	b.n	100129e2 <at_ble_event_get+0x566>
100129d8:	1c10      	adds	r0, r2, #0
100129da:	4b31      	ldr	r3, [pc, #196]	; (10012aa0 <at_ble_event_get+0x624>)
100129dc:	1c2a      	adds	r2, r5, #0
100129de:	4798      	blx	r3
100129e0:	2432      	movs	r4, #50	; 0x32
100129e2:	9b01      	ldr	r3, [sp, #4]
100129e4:	701c      	strb	r4, [r3, #0]
100129e6:	2400      	movs	r4, #0
100129e8:	e59c      	b.n	10012524 <at_ble_event_get+0xa8>
100129ea:	24d0      	movs	r4, #208	; 0xd0
100129ec:	e59a      	b.n	10012524 <at_ble_event_get+0xa8>
100129ee:	2abb      	cmp	r2, #187	; 0xbb
100129f0:	d000      	beq.n	100129f4 <at_ble_event_get+0x578>
100129f2:	e69e      	b.n	10012732 <at_ble_event_get+0x2b6>
100129f4:	e7f5      	b.n	100129e2 <at_ble_event_get+0x566>
100129f6:	2c00      	cmp	r4, #0
100129f8:	d000      	beq.n	100129fc <at_ble_event_get+0x580>
100129fa:	e593      	b.n	10012524 <at_ble_event_get+0xa8>
100129fc:	e699      	b.n	10012732 <at_ble_event_get+0x2b6>
100129fe:	1c20      	adds	r0, r4, #0
10012a00:	b005      	add	sp, #20
10012a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a04:	10014db1 	.word	0x10014db1
10012a08:	10014ea1 	.word	0x10014ea1
10012a0c:	10014ec5 	.word	0x10014ec5
10012a10:	10013ea9 	.word	0x10013ea9
10012a14:	10014729 	.word	0x10014729
10012a18:	100147a5 	.word	0x100147a5
10012a1c:	10014161 	.word	0x10014161
10012a20:	100141fd 	.word	0x100141fd
10012a24:	100142d5 	.word	0x100142d5
10012a28:	1001455d 	.word	0x1001455d
10012a2c:	100145fd 	.word	0x100145fd
10012a30:	100146b5 	.word	0x100146b5
10012a34:	100146dd 	.word	0x100146dd
10012a38:	100146f3 	.word	0x100146f3
10012a3c:	100147bd 	.word	0x100147bd
10012a40:	100147eb 	.word	0x100147eb
10012a44:	10014801 	.word	0x10014801
10012a48:	1001482b 	.word	0x1001482b
10012a4c:	10014659 	.word	0x10014659
10012a50:	10014683 	.word	0x10014683
10012a54:	10013901 	.word	0x10013901
10012a58:	1001392d 	.word	0x1001392d
10012a5c:	1001506d 	.word	0x1001506d
10012a60:	100150a9 	.word	0x100150a9
10012a64:	100150f1 	.word	0x100150f1
10012a68:	10015135 	.word	0x10015135
10012a6c:	10015169 	.word	0x10015169
10012a70:	1001502d 	.word	0x1001502d
10012a74:	10015235 	.word	0x10015235
10012a78:	100151bd 	.word	0x100151bd
10012a7c:	10013859 	.word	0x10013859
10012a80:	100138c5 	.word	0x100138c5
10012a84:	10013889 	.word	0x10013889
10012a88:	10015245 	.word	0x10015245
10012a8c:	10015285 	.word	0x10015285
10012a90:	1001554d 	.word	0x1001554d
10012a94:	10015557 	.word	0x10015557
10012a98:	1001555d 	.word	0x1001555d
10012a9c:	10015563 	.word	0x10015563
10012aa0:	1001556f 	.word	0x1001556f

10012aa4 <internal_event_flush>:
10012aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012aa6:	490e      	ldr	r1, [pc, #56]	; (10012ae0 <internal_event_flush+0x3c>)
10012aa8:	2400      	movs	r4, #0
10012aaa:	680b      	ldr	r3, [r1, #0]
10012aac:	1c0f      	adds	r7, r1, #0
10012aae:	1c1e      	adds	r6, r3, #0
10012ab0:	4a0c      	ldr	r2, [pc, #48]	; (10012ae4 <internal_event_flush+0x40>)
10012ab2:	6815      	ldr	r5, [r2, #0]
10012ab4:	9201      	str	r2, [sp, #4]
10012ab6:	2b00      	cmp	r3, #0
10012ab8:	d00e      	beq.n	10012ad8 <internal_event_flush+0x34>
10012aba:	889a      	ldrh	r2, [r3, #4]
10012abc:	6819      	ldr	r1, [r3, #0]
10012abe:	4282      	cmp	r2, r0
10012ac0:	d107      	bne.n	10012ad2 <internal_event_flush+0x2e>
10012ac2:	2c00      	cmp	r4, #0
10012ac4:	d001      	beq.n	10012aca <internal_event_flush+0x26>
10012ac6:	6021      	str	r1, [r4, #0]
10012ac8:	e000      	b.n	10012acc <internal_event_flush+0x28>
10012aca:	1c0e      	adds	r6, r1, #0
10012acc:	601d      	str	r5, [r3, #0]
10012ace:	1c1d      	adds	r5, r3, #0
10012ad0:	1c23      	adds	r3, r4, #0
10012ad2:	1c1c      	adds	r4, r3, #0
10012ad4:	1c0b      	adds	r3, r1, #0
10012ad6:	e7ee      	b.n	10012ab6 <internal_event_flush+0x12>
10012ad8:	9b01      	ldr	r3, [sp, #4]
10012ada:	603e      	str	r6, [r7, #0]
10012adc:	601d      	str	r5, [r3, #0]
10012ade:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012ae0:	1001a1cc 	.word	0x1001a1cc
10012ae4:	1001a1d0 	.word	0x1001a1d0

10012ae8 <internal_conn_flush>:
10012ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012aea:	4a12      	ldr	r2, [pc, #72]	; (10012b34 <internal_conn_flush+0x4c>)
10012aec:	9000      	str	r0, [sp, #0]
10012aee:	6813      	ldr	r3, [r2, #0]
10012af0:	4811      	ldr	r0, [pc, #68]	; (10012b38 <internal_conn_flush+0x50>)
10012af2:	1c1f      	adds	r7, r3, #0
10012af4:	2100      	movs	r1, #0
10012af6:	4684      	mov	ip, r0
10012af8:	6804      	ldr	r4, [r0, #0]
10012afa:	9201      	str	r2, [sp, #4]
10012afc:	2b00      	cmp	r3, #0
10012afe:	d014      	beq.n	10012b2a <internal_conn_flush+0x42>
10012b00:	88d8      	ldrh	r0, [r3, #6]
10012b02:	9a00      	ldr	r2, [sp, #0]
10012b04:	681d      	ldr	r5, [r3, #0]
10012b06:	0a06      	lsrs	r6, r0, #8
10012b08:	4296      	cmp	r6, r2
10012b0a:	d10b      	bne.n	10012b24 <internal_conn_flush+0x3c>
10012b0c:	26fd      	movs	r6, #253	; 0xfd
10012b0e:	4006      	ands	r6, r0
10012b10:	2e0c      	cmp	r6, #12
10012b12:	d107      	bne.n	10012b24 <internal_conn_flush+0x3c>
10012b14:	2900      	cmp	r1, #0
10012b16:	d001      	beq.n	10012b1c <internal_conn_flush+0x34>
10012b18:	600d      	str	r5, [r1, #0]
10012b1a:	e000      	b.n	10012b1e <internal_conn_flush+0x36>
10012b1c:	1c2f      	adds	r7, r5, #0
10012b1e:	601c      	str	r4, [r3, #0]
10012b20:	1c1c      	adds	r4, r3, #0
10012b22:	1c0b      	adds	r3, r1, #0
10012b24:	1c19      	adds	r1, r3, #0
10012b26:	1c2b      	adds	r3, r5, #0
10012b28:	e7e8      	b.n	10012afc <internal_conn_flush+0x14>
10012b2a:	9b01      	ldr	r3, [sp, #4]
10012b2c:	601f      	str	r7, [r3, #0]
10012b2e:	4663      	mov	r3, ip
10012b30:	601c      	str	r4, [r3, #0]
10012b32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012b34:	1001a1cc 	.word	0x1001a1cc
10012b38:	1001a1d0 	.word	0x1001a1d0

10012b3c <at_ble_device_name_set>:
10012b3c:	b530      	push	{r4, r5, lr}
10012b3e:	23cf      	movs	r3, #207	; 0xcf
10012b40:	2800      	cmp	r0, #0
10012b42:	d010      	beq.n	10012b66 <at_ble_device_name_set+0x2a>
10012b44:	1e4a      	subs	r2, r1, #1
10012b46:	2a1f      	cmp	r2, #31
10012b48:	d80d      	bhi.n	10012b66 <at_ble_device_name_set+0x2a>
10012b4a:	4a08      	ldr	r2, [pc, #32]	; (10012b6c <at_ble_device_name_set+0x30>)
10012b4c:	1c13      	adds	r3, r2, #0
10012b4e:	33aa      	adds	r3, #170	; 0xaa
10012b50:	8019      	strh	r1, [r3, #0]
10012b52:	2300      	movs	r3, #0
10012b54:	1c1c      	adds	r4, r3, #0
10012b56:	5cc5      	ldrb	r5, [r0, r3]
10012b58:	34ac      	adds	r4, #172	; 0xac
10012b5a:	3301      	adds	r3, #1
10012b5c:	5515      	strb	r5, [r2, r4]
10012b5e:	b2dc      	uxtb	r4, r3
10012b60:	428c      	cmp	r4, r1
10012b62:	d3f7      	bcc.n	10012b54 <at_ble_device_name_set+0x18>
10012b64:	2300      	movs	r3, #0
10012b66:	1c18      	adds	r0, r3, #0
10012b68:	bd30      	pop	{r4, r5, pc}
10012b6a:	46c0      	nop			; (mov r8, r8)
10012b6c:	1001b176 	.word	0x1001b176

10012b70 <at_ble_addr_get>:
10012b70:	b510      	push	{r4, lr}
10012b72:	1c04      	adds	r4, r0, #0
10012b74:	20cf      	movs	r0, #207	; 0xcf
10012b76:	2c00      	cmp	r4, #0
10012b78:	d006      	beq.n	10012b88 <at_ble_addr_get+0x18>
10012b7a:	4b04      	ldr	r3, [pc, #16]	; (10012b8c <at_ble_addr_get+0x1c>)
10012b7c:	38ce      	subs	r0, #206	; 0xce
10012b7e:	1c21      	adds	r1, r4, #0
10012b80:	4798      	blx	r3
10012b82:	4b03      	ldr	r3, [pc, #12]	; (10012b90 <at_ble_addr_get+0x20>)
10012b84:	791b      	ldrb	r3, [r3, #4]
10012b86:	7023      	strb	r3, [r4, #0]
10012b88:	bd10      	pop	{r4, pc}
10012b8a:	46c0      	nop			; (mov r8, r8)
10012b8c:	100149c5 	.word	0x100149c5
10012b90:	1001b176 	.word	0x1001b176

10012b94 <at_ble_set_dev_config>:
10012b94:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b96:	7906      	ldrb	r6, [r0, #4]
10012b98:	b089      	sub	sp, #36	; 0x24
10012b9a:	25cf      	movs	r5, #207	; 0xcf
10012b9c:	2e03      	cmp	r6, #3
10012b9e:	d838      	bhi.n	10012c12 <at_ble_set_dev_config+0x7e>
10012ba0:	7803      	ldrb	r3, [r0, #0]
10012ba2:	3511      	adds	r5, #17
10012ba4:	2b0f      	cmp	r3, #15
10012ba6:	d834      	bhi.n	10012c12 <at_ble_set_dev_config+0x7e>
10012ba8:	2380      	movs	r3, #128	; 0x80
10012baa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
10012bac:	3d11      	subs	r5, #17
10012bae:	009b      	lsls	r3, r3, #2
10012bb0:	429f      	cmp	r7, r3
10012bb2:	d82e      	bhi.n	10012c12 <at_ble_set_dev_config+0x7e>
10012bb4:	7fc5      	ldrb	r5, [r0, #31]
10012bb6:	7f83      	ldrb	r3, [r0, #30]
10012bb8:	01ad      	lsls	r5, r5, #6
10012bba:	015b      	lsls	r3, r3, #5
10012bbc:	431d      	orrs	r5, r3
10012bbe:	7ec3      	ldrb	r3, [r0, #27]
10012bc0:	431d      	orrs	r5, r3
10012bc2:	7f43      	ldrb	r3, [r0, #29]
10012bc4:	011b      	lsls	r3, r3, #4
10012bc6:	431d      	orrs	r5, r3
10012bc8:	7f03      	ldrb	r3, [r0, #28]
10012bca:	009b      	lsls	r3, r3, #2
10012bcc:	431d      	orrs	r5, r3
10012bce:	4b12      	ldr	r3, [pc, #72]	; (10012c18 <at_ble_set_dev_config+0x84>)
10012bd0:	b2ed      	uxtb	r5, r5
10012bd2:	711e      	strb	r6, [r3, #4]
10012bd4:	7903      	ldrb	r3, [r0, #4]
10012bd6:	3b02      	subs	r3, #2
10012bd8:	2b01      	cmp	r3, #1
10012bda:	d801      	bhi.n	10012be0 <at_ble_set_dev_config+0x4c>
10012bdc:	2302      	movs	r3, #2
10012bde:	7103      	strb	r3, [r0, #4]
10012be0:	1c04      	adds	r4, r0, #0
10012be2:	1c23      	adds	r3, r4, #0
10012be4:	330b      	adds	r3, #11
10012be6:	8861      	ldrh	r1, [r4, #2]
10012be8:	9307      	str	r3, [sp, #28]
10012bea:	7923      	ldrb	r3, [r4, #4]
10012bec:	7800      	ldrb	r0, [r0, #0]
10012bee:	9300      	str	r3, [sp, #0]
10012bf0:	9501      	str	r5, [sp, #4]
10012bf2:	8c25      	ldrh	r5, [r4, #32]
10012bf4:	1d62      	adds	r2, r4, #5
10012bf6:	9502      	str	r5, [sp, #8]
10012bf8:	8c65      	ldrh	r5, [r4, #34]	; 0x22
10012bfa:	9b07      	ldr	r3, [sp, #28]
10012bfc:	9503      	str	r5, [sp, #12]
10012bfe:	9704      	str	r7, [sp, #16]
10012c00:	4d06      	ldr	r5, [pc, #24]	; (10012c1c <at_ble_set_dev_config+0x88>)
10012c02:	47a8      	blx	r5
10012c04:	7126      	strb	r6, [r4, #4]
10012c06:	1c05      	adds	r5, r0, #0
10012c08:	1c21      	adds	r1, r4, #0
10012c0a:	4803      	ldr	r0, [pc, #12]	; (10012c18 <at_ble_set_dev_config+0x84>)
10012c0c:	2226      	movs	r2, #38	; 0x26
10012c0e:	4b04      	ldr	r3, [pc, #16]	; (10012c20 <at_ble_set_dev_config+0x8c>)
10012c10:	4798      	blx	r3
10012c12:	1c28      	adds	r0, r5, #0
10012c14:	b009      	add	sp, #36	; 0x24
10012c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c18:	1001b176 	.word	0x1001b176
10012c1c:	100148bd 	.word	0x100148bd
10012c20:	10017317 	.word	0x10017317

10012c24 <at_ble_init>:
10012c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10012c26:	b087      	sub	sp, #28
10012c28:	af03      	add	r7, sp, #12
10012c2a:	494d      	ldr	r1, [pc, #308]	; (10012d60 <at_ble_init+0x13c>)
10012c2c:	1c04      	adds	r4, r0, #0
10012c2e:	220b      	movs	r2, #11
10012c30:	4b4c      	ldr	r3, [pc, #304]	; (10012d64 <at_ble_init+0x140>)
10012c32:	1c38      	adds	r0, r7, #0
10012c34:	4798      	blx	r3
10012c36:	2205      	movs	r2, #5
10012c38:	4b4b      	ldr	r3, [pc, #300]	; (10012d68 <at_ble_init+0x144>)
10012c3a:	801a      	strh	r2, [r3, #0]
10012c3c:	2300      	movs	r3, #0
10012c3e:	4a4b      	ldr	r2, [pc, #300]	; (10012d6c <at_ble_init+0x148>)
10012c40:	6013      	str	r3, [r2, #0]
10012c42:	4a4b      	ldr	r2, [pc, #300]	; (10012d70 <at_ble_init+0x14c>)
10012c44:	7013      	strb	r3, [r2, #0]
10012c46:	4a4b      	ldr	r2, [pc, #300]	; (10012d74 <at_ble_init+0x150>)
10012c48:	7013      	strb	r3, [r2, #0]
10012c4a:	4b4b      	ldr	r3, [pc, #300]	; (10012d78 <at_ble_init+0x154>)
10012c4c:	4798      	blx	r3
10012c4e:	4b4b      	ldr	r3, [pc, #300]	; (10012d7c <at_ble_init+0x158>)
10012c50:	4798      	blx	r3
10012c52:	4b4b      	ldr	r3, [pc, #300]	; (10012d80 <at_ble_init+0x15c>)
10012c54:	4798      	blx	r3
10012c56:	4b4b      	ldr	r3, [pc, #300]	; (10012d84 <at_ble_init+0x160>)
10012c58:	4798      	blx	r3
10012c5a:	2c00      	cmp	r4, #0
10012c5c:	d009      	beq.n	10012c72 <at_ble_init+0x4e>
10012c5e:	6820      	ldr	r0, [r4, #0]
10012c60:	2800      	cmp	r0, #0
10012c62:	d006      	beq.n	10012c72 <at_ble_init+0x4e>
10012c64:	6861      	ldr	r1, [r4, #4]
10012c66:	2900      	cmp	r1, #0
10012c68:	d101      	bne.n	10012c6e <at_ble_init+0x4a>
10012c6a:	26e2      	movs	r6, #226	; 0xe2
10012c6c:	e075      	b.n	10012d5a <at_ble_init+0x136>
10012c6e:	4b46      	ldr	r3, [pc, #280]	; (10012d88 <at_ble_init+0x164>)
10012c70:	4798      	blx	r3
10012c72:	4b46      	ldr	r3, [pc, #280]	; (10012d8c <at_ble_init+0x168>)
10012c74:	4798      	blx	r3
10012c76:	2801      	cmp	r0, #1
10012c78:	d8f7      	bhi.n	10012c6a <at_ble_init+0x46>
10012c7a:	4845      	ldr	r0, [pc, #276]	; (10012d90 <at_ble_init+0x16c>)
10012c7c:	4b45      	ldr	r3, [pc, #276]	; (10012d94 <at_ble_init+0x170>)
10012c7e:	4798      	blx	r3
10012c80:	2800      	cmp	r0, #0
10012c82:	d1f2      	bne.n	10012c6a <at_ble_init+0x46>
10012c84:	4b44      	ldr	r3, [pc, #272]	; (10012d98 <at_ble_init+0x174>)
10012c86:	4798      	blx	r3
10012c88:	4b44      	ldr	r3, [pc, #272]	; (10012d9c <at_ble_init+0x178>)
10012c8a:	4798      	blx	r3
10012c8c:	466b      	mov	r3, sp
10012c8e:	2201      	movs	r2, #1
10012c90:	1cdc      	adds	r4, r3, #3
10012c92:	1c20      	adds	r0, r4, #0
10012c94:	a901      	add	r1, sp, #4
10012c96:	4252      	negs	r2, r2
10012c98:	4b41      	ldr	r3, [pc, #260]	; (10012da0 <at_ble_init+0x17c>)
10012c9a:	4798      	blx	r3
10012c9c:	2800      	cmp	r0, #0
10012c9e:	d102      	bne.n	10012ca6 <at_ble_init+0x82>
10012ca0:	7823      	ldrb	r3, [r4, #0]
10012ca2:	2b39      	cmp	r3, #57	; 0x39
10012ca4:	d1f2      	bne.n	10012c8c <at_ble_init+0x68>
10012ca6:	4b3f      	ldr	r3, [pc, #252]	; (10012da4 <at_ble_init+0x180>)
10012ca8:	4798      	blx	r3
10012caa:	1e06      	subs	r6, r0, #0
10012cac:	d155      	bne.n	10012d5a <at_ble_init+0x136>
10012cae:	1c03      	adds	r3, r0, #0
10012cb0:	2101      	movs	r1, #1
10012cb2:	4a3d      	ldr	r2, [pc, #244]	; (10012da8 <at_ble_init+0x184>)
10012cb4:	4249      	negs	r1, r1
10012cb6:	189a      	adds	r2, r3, r2
10012cb8:	3312      	adds	r3, #18
10012cba:	8151      	strh	r1, [r2, #10]
10012cbc:	2b90      	cmp	r3, #144	; 0x90
10012cbe:	d1f7      	bne.n	10012cb0 <at_ble_init+0x8c>
10012cc0:	4c3a      	ldr	r4, [pc, #232]	; (10012dac <at_ble_init+0x188>)
10012cc2:	3b81      	subs	r3, #129	; 0x81
10012cc4:	7023      	strb	r3, [r4, #0]
10012cc6:	4b3a      	ldr	r3, [pc, #232]	; (10012db0 <at_ble_init+0x18c>)
10012cc8:	4a3a      	ldr	r2, [pc, #232]	; (10012db4 <at_ble_init+0x190>)
10012cca:	8063      	strh	r3, [r4, #2]
10012ccc:	2300      	movs	r3, #0
10012cce:	7123      	strb	r3, [r4, #4]
10012cd0:	3301      	adds	r3, #1
10012cd2:	1e58      	subs	r0, r3, #1
10012cd4:	0119      	lsls	r1, r3, #4
10012cd6:	4301      	orrs	r1, r0
10012cd8:	3302      	adds	r3, #2
10012cda:	7011      	strb	r1, [r2, #0]
10012cdc:	3201      	adds	r2, #1
10012cde:	2b21      	cmp	r3, #33	; 0x21
10012ce0:	d1f7      	bne.n	10012cd2 <at_ble_init+0xae>
10012ce2:	33e0      	adds	r3, #224	; 0xe0
10012ce4:	33ff      	adds	r3, #255	; 0xff
10012ce6:	84a3      	strh	r3, [r4, #36]	; 0x24
10012ce8:	1c23      	adds	r3, r4, #0
10012cea:	2500      	movs	r5, #0
10012cec:	3373      	adds	r3, #115	; 0x73
10012cee:	701d      	strb	r5, [r3, #0]
10012cf0:	1c23      	adds	r3, r4, #0
10012cf2:	3372      	adds	r3, #114	; 0x72
10012cf4:	701d      	strb	r5, [r3, #0]
10012cf6:	1c23      	adds	r3, r4, #0
10012cf8:	3376      	adds	r3, #118	; 0x76
10012cfa:	701d      	strb	r5, [r3, #0]
10012cfc:	1c23      	adds	r3, r4, #0
10012cfe:	33cc      	adds	r3, #204	; 0xcc
10012d00:	801d      	strh	r5, [r3, #0]
10012d02:	1c22      	adds	r2, r4, #0
10012d04:	23a0      	movs	r3, #160	; 0xa0
10012d06:	32d0      	adds	r2, #208	; 0xd0
10012d08:	005b      	lsls	r3, r3, #1
10012d0a:	8013      	strh	r3, [r2, #0]
10012d0c:	1c22      	adds	r2, r4, #0
10012d0e:	32ce      	adds	r2, #206	; 0xce
10012d10:	8013      	strh	r3, [r2, #0]
10012d12:	1c23      	adds	r3, r4, #0
10012d14:	33d2      	adds	r3, #210	; 0xd2
10012d16:	801d      	strh	r5, [r3, #0]
10012d18:	22fa      	movs	r2, #250	; 0xfa
10012d1a:	1c23      	adds	r3, r4, #0
10012d1c:	0052      	lsls	r2, r2, #1
10012d1e:	33d4      	adds	r3, #212	; 0xd4
10012d20:	801a      	strh	r2, [r3, #0]
10012d22:	1c23      	adds	r3, r4, #0
10012d24:	33d6      	adds	r3, #214	; 0xd6
10012d26:	701d      	strb	r5, [r3, #0]
10012d28:	1c20      	adds	r0, r4, #0
10012d2a:	4b23      	ldr	r3, [pc, #140]	; (10012db8 <at_ble_init+0x194>)
10012d2c:	76e5      	strb	r5, [r4, #27]
10012d2e:	7725      	strb	r5, [r4, #28]
10012d30:	7765      	strb	r5, [r4, #29]
10012d32:	77a5      	strb	r5, [r4, #30]
10012d34:	77e5      	strb	r5, [r4, #31]
10012d36:	8425      	strh	r5, [r4, #32]
10012d38:	8465      	strh	r5, [r4, #34]	; 0x22
10012d3a:	4798      	blx	r3
10012d3c:	1c23      	adds	r3, r4, #0
10012d3e:	2207      	movs	r2, #7
10012d40:	3374      	adds	r3, #116	; 0x74
10012d42:	701a      	strb	r2, [r3, #0]
10012d44:	1c23      	adds	r3, r4, #0
10012d46:	3204      	adds	r2, #4
10012d48:	33aa      	adds	r3, #170	; 0xaa
10012d4a:	801a      	strh	r2, [r3, #0]
10012d4c:	1c2b      	adds	r3, r5, #0
10012d4e:	5d7a      	ldrb	r2, [r7, r5]
10012d50:	33ac      	adds	r3, #172	; 0xac
10012d52:	3501      	adds	r5, #1
10012d54:	54e2      	strb	r2, [r4, r3]
10012d56:	2d0b      	cmp	r5, #11
10012d58:	d1f8      	bne.n	10012d4c <at_ble_init+0x128>
10012d5a:	1c30      	adds	r0, r6, #0
10012d5c:	b007      	add	sp, #28
10012d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012d60:	10019868 	.word	0x10019868
10012d64:	10017317 	.word	0x10017317
10012d68:	1001b0e4 	.word	0x1001b0e4
10012d6c:	1001a274 	.word	0x1001a274
10012d70:	1001a1dc 	.word	0x1001a1dc
10012d74:	10019a98 	.word	0x10019a98
10012d78:	10015295 	.word	0x10015295
10012d7c:	1001306d 	.word	0x1001306d
10012d80:	100136a9 	.word	0x100136a9
10012d84:	100138f5 	.word	0x100138f5
10012d88:	100136dd 	.word	0x100136dd
10012d8c:	100115fd 	.word	0x100115fd
10012d90:	10013bf5 	.word	0x10013bf5
10012d94:	1001182d 	.word	0x1001182d
10012d98:	10013c8d 	.word	0x10013c8d
10012d9c:	100123bd 	.word	0x100123bd
10012da0:	1001247d 	.word	0x1001247d
10012da4:	1001484d 	.word	0x1001484d
10012da8:	1001b0e6 	.word	0x1001b0e6
10012dac:	1001b176 	.word	0x1001b176
10012db0:	00003a98 	.word	0x00003a98
10012db4:	1001b181 	.word	0x1001b181
10012db8:	10012b95 	.word	0x10012b95

10012dbc <at_ble_addr_set>:
10012dbc:	b538      	push	{r3, r4, r5, lr}
10012dbe:	1c45      	adds	r5, r0, #1
10012dc0:	1c03      	adds	r3, r0, #0
10012dc2:	20cf      	movs	r0, #207	; 0xcf
10012dc4:	2d00      	cmp	r5, #0
10012dc6:	d018      	beq.n	10012dfa <at_ble_addr_set+0x3e>
10012dc8:	781a      	ldrb	r2, [r3, #0]
10012dca:	2a03      	cmp	r2, #3
10012dcc:	d815      	bhi.n	10012dfa <at_ble_addr_set+0x3e>
10012dce:	2a01      	cmp	r2, #1
10012dd0:	d102      	bne.n	10012dd8 <at_ble_addr_set+0x1c>
10012dd2:	785a      	ldrb	r2, [r3, #1]
10012dd4:	2a00      	cmp	r2, #0
10012dd6:	d010      	beq.n	10012dfa <at_ble_addr_set+0x3e>
10012dd8:	1c1c      	adds	r4, r3, #0
10012dda:	1c29      	adds	r1, r5, #0
10012ddc:	2206      	movs	r2, #6
10012dde:	4b07      	ldr	r3, [pc, #28]	; (10012dfc <at_ble_addr_set+0x40>)
10012de0:	4807      	ldr	r0, [pc, #28]	; (10012e00 <at_ble_addr_set+0x44>)
10012de2:	4798      	blx	r3
10012de4:	7823      	ldrb	r3, [r4, #0]
10012de6:	4807      	ldr	r0, [pc, #28]	; (10012e04 <at_ble_addr_set+0x48>)
10012de8:	7103      	strb	r3, [r0, #4]
10012dea:	4b07      	ldr	r3, [pc, #28]	; (10012e08 <at_ble_addr_set+0x4c>)
10012dec:	4798      	blx	r3
10012dee:	7823      	ldrb	r3, [r4, #0]
10012df0:	2b00      	cmp	r3, #0
10012df2:	d102      	bne.n	10012dfa <at_ble_addr_set+0x3e>
10012df4:	1c28      	adds	r0, r5, #0
10012df6:	4b05      	ldr	r3, [pc, #20]	; (10012e0c <at_ble_addr_set+0x50>)
10012df8:	4798      	blx	r3
10012dfa:	bd38      	pop	{r3, r4, r5, pc}
10012dfc:	10017317 	.word	0x10017317
10012e00:	1001b17b 	.word	0x1001b17b
10012e04:	1001b176 	.word	0x1001b176
10012e08:	10012b95 	.word	0x10012b95
10012e0c:	10013d09 	.word	0x10013d09

10012e10 <at_ble_adv_data_set>:
10012e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012e12:	4684      	mov	ip, r0
10012e14:	1c0f      	adds	r7, r1, #0
10012e16:	1c16      	adds	r6, r2, #0
10012e18:	1c1c      	adds	r4, r3, #0
10012e1a:	2800      	cmp	r0, #0
10012e1c:	d102      	bne.n	10012e24 <at_ble_adv_data_set+0x14>
10012e1e:	20e2      	movs	r0, #226	; 0xe2
10012e20:	2a00      	cmp	r2, #0
10012e22:	d02b      	beq.n	10012e7c <at_ble_adv_data_set+0x6c>
10012e24:	20cf      	movs	r0, #207	; 0xcf
10012e26:	2f1f      	cmp	r7, #31
10012e28:	d828      	bhi.n	10012e7c <at_ble_adv_data_set+0x6c>
10012e2a:	2c1f      	cmp	r4, #31
10012e2c:	d826      	bhi.n	10012e7c <at_ble_adv_data_set+0x6c>
10012e2e:	4663      	mov	r3, ip
10012e30:	2b00      	cmp	r3, #0
10012e32:	d00e      	beq.n	10012e52 <at_ble_adv_data_set+0x42>
10012e34:	4812      	ldr	r0, [pc, #72]	; (10012e80 <at_ble_adv_data_set+0x70>)
10012e36:	4d13      	ldr	r5, [pc, #76]	; (10012e84 <at_ble_adv_data_set+0x74>)
10012e38:	2f00      	cmp	r7, #0
10012e3a:	d104      	bne.n	10012e46 <at_ble_adv_data_set+0x36>
10012e3c:	1c39      	adds	r1, r7, #0
10012e3e:	221f      	movs	r2, #31
10012e40:	4b11      	ldr	r3, [pc, #68]	; (10012e88 <at_ble_adv_data_set+0x78>)
10012e42:	4798      	blx	r3
10012e44:	e003      	b.n	10012e4e <at_ble_adv_data_set+0x3e>
10012e46:	4661      	mov	r1, ip
10012e48:	1c3a      	adds	r2, r7, #0
10012e4a:	4b10      	ldr	r3, [pc, #64]	; (10012e8c <at_ble_adv_data_set+0x7c>)
10012e4c:	4798      	blx	r3
10012e4e:	3572      	adds	r5, #114	; 0x72
10012e50:	702f      	strb	r7, [r5, #0]
10012e52:	1e30      	subs	r0, r6, #0
10012e54:	d012      	beq.n	10012e7c <at_ble_adv_data_set+0x6c>
10012e56:	4d0b      	ldr	r5, [pc, #44]	; (10012e84 <at_ble_adv_data_set+0x74>)
10012e58:	480d      	ldr	r0, [pc, #52]	; (10012e90 <at_ble_adv_data_set+0x80>)
10012e5a:	2c00      	cmp	r4, #0
10012e5c:	d107      	bne.n	10012e6e <at_ble_adv_data_set+0x5e>
10012e5e:	1c21      	adds	r1, r4, #0
10012e60:	221f      	movs	r2, #31
10012e62:	4b09      	ldr	r3, [pc, #36]	; (10012e88 <at_ble_adv_data_set+0x78>)
10012e64:	3573      	adds	r5, #115	; 0x73
10012e66:	4798      	blx	r3
10012e68:	702c      	strb	r4, [r5, #0]
10012e6a:	1c20      	adds	r0, r4, #0
10012e6c:	e006      	b.n	10012e7c <at_ble_adv_data_set+0x6c>
10012e6e:	1c31      	adds	r1, r6, #0
10012e70:	1c22      	adds	r2, r4, #0
10012e72:	4b06      	ldr	r3, [pc, #24]	; (10012e8c <at_ble_adv_data_set+0x7c>)
10012e74:	4798      	blx	r3
10012e76:	2000      	movs	r0, #0
10012e78:	3573      	adds	r5, #115	; 0x73
10012e7a:	702c      	strb	r4, [r5, #0]
10012e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012e7e:	46c0      	nop			; (mov r8, r8)
10012e80:	1001b1aa 	.word	0x1001b1aa
10012e84:	1001b176 	.word	0x1001b176
10012e88:	10017329 	.word	0x10017329
10012e8c:	10017317 	.word	0x10017317
10012e90:	1001b1c9 	.word	0x1001b1c9

10012e94 <at_ble_adv_start>:
10012e94:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e96:	b091      	sub	sp, #68	; 0x44
10012e98:	1c1f      	adds	r7, r3, #0
10012e9a:	ab16      	add	r3, sp, #88	; 0x58
10012e9c:	881d      	ldrh	r5, [r3, #0]
10012e9e:	ab17      	add	r3, sp, #92	; 0x5c
10012ea0:	881b      	ldrh	r3, [r3, #0]
10012ea2:	910d      	str	r1, [sp, #52]	; 0x34
10012ea4:	930e      	str	r3, [sp, #56]	; 0x38
10012ea6:	ab18      	add	r3, sp, #96	; 0x60
10012ea8:	781b      	ldrb	r3, [r3, #0]
10012eaa:	1c04      	adds	r4, r0, #0
10012eac:	930f      	str	r3, [sp, #60]	; 0x3c
10012eae:	4b42      	ldr	r3, [pc, #264]	; (10012fb8 <at_ble_adv_start+0x124>)
10012eb0:	1c16      	adds	r6, r2, #0
10012eb2:	3373      	adds	r3, #115	; 0x73
10012eb4:	781b      	ldrb	r3, [r3, #0]
10012eb6:	20cf      	movs	r0, #207	; 0xcf
10012eb8:	930c      	str	r3, [sp, #48]	; 0x30
10012eba:	2c01      	cmp	r4, #1
10012ebc:	d103      	bne.n	10012ec6 <at_ble_adv_start+0x32>
10012ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012ec0:	2b00      	cmp	r3, #0
10012ec2:	d176      	bne.n	10012fb2 <at_ble_adv_start+0x11e>
10012ec4:	e024      	b.n	10012f10 <at_ble_adv_start+0x7c>
10012ec6:	2c04      	cmp	r4, #4
10012ec8:	d873      	bhi.n	10012fb2 <at_ble_adv_start+0x11e>
10012eca:	2380      	movs	r3, #128	; 0x80
10012ecc:	01db      	lsls	r3, r3, #7
10012ece:	429d      	cmp	r5, r3
10012ed0:	d86f      	bhi.n	10012fb2 <at_ble_adv_start+0x11e>
10012ed2:	2c00      	cmp	r4, #0
10012ed4:	d102      	bne.n	10012edc <at_ble_adv_start+0x48>
10012ed6:	2d1f      	cmp	r5, #31
10012ed8:	d96b      	bls.n	10012fb2 <at_ble_adv_start+0x11e>
10012eda:	e003      	b.n	10012ee4 <at_ble_adv_start+0x50>
10012edc:	2d9f      	cmp	r5, #159	; 0x9f
10012ede:	d801      	bhi.n	10012ee4 <at_ble_adv_start+0x50>
10012ee0:	2c01      	cmp	r4, #1
10012ee2:	d166      	bne.n	10012fb2 <at_ble_adv_start+0x11e>
10012ee4:	2f00      	cmp	r7, #0
10012ee6:	d009      	beq.n	10012efc <at_ble_adv_start+0x68>
10012ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012eea:	20cf      	movs	r0, #207	; 0xcf
10012eec:	3b01      	subs	r3, #1
10012eee:	2b01      	cmp	r3, #1
10012ef0:	d95f      	bls.n	10012fb2 <at_ble_adv_start+0x11e>
10012ef2:	2c01      	cmp	r4, #1
10012ef4:	d102      	bne.n	10012efc <at_ble_adv_start+0x68>
10012ef6:	2d00      	cmp	r5, #0
10012ef8:	d100      	bne.n	10012efc <at_ble_adv_start+0x68>
10012efa:	3520      	adds	r5, #32
10012efc:	4b2f      	ldr	r3, [pc, #188]	; (10012fbc <at_ble_adv_start+0x128>)
10012efe:	4798      	blx	r3
10012f00:	1c01      	adds	r1, r0, #0
10012f02:	2e00      	cmp	r6, #0
10012f04:	d043      	beq.n	10012f8e <at_ble_adv_start+0xfa>
10012f06:	7833      	ldrb	r3, [r6, #0]
10012f08:	1e60      	subs	r0, r4, #1
10012f0a:	2b00      	cmp	r3, #0
10012f0c:	d109      	bne.n	10012f22 <at_ble_adv_start+0x8e>
10012f0e:	e03b      	b.n	10012f88 <at_ble_adv_start+0xf4>
10012f10:	2380      	movs	r3, #128	; 0x80
10012f12:	01db      	lsls	r3, r3, #7
10012f14:	429d      	cmp	r5, r3
10012f16:	d84c      	bhi.n	10012fb2 <at_ble_adv_start+0x11e>
10012f18:	2e00      	cmp	r6, #0
10012f1a:	d04a      	beq.n	10012fb2 <at_ble_adv_start+0x11e>
10012f1c:	2f00      	cmp	r7, #0
10012f1e:	d1e3      	bne.n	10012ee8 <at_ble_adv_start+0x54>
10012f20:	e02b      	b.n	10012f7a <at_ble_adv_start+0xe6>
10012f22:	2301      	movs	r3, #1
10012f24:	2803      	cmp	r0, #3
10012f26:	d93a      	bls.n	10012f9e <at_ble_adv_start+0x10a>
10012f28:	200d      	movs	r0, #13
10012f2a:	1c72      	adds	r2, r6, #1
10012f2c:	e002      	b.n	10012f34 <at_ble_adv_start+0xa0>
10012f2e:	200e      	movs	r0, #14
10012f30:	1e32      	subs	r2, r6, #0
10012f32:	d1fa      	bne.n	10012f2a <at_ble_adv_start+0x96>
10012f34:	4c20      	ldr	r4, [pc, #128]	; (10012fb8 <at_ble_adv_start+0x124>)
10012f36:	3474      	adds	r4, #116	; 0x74
10012f38:	7826      	ldrb	r6, [r4, #0]
10012f3a:	2407      	movs	r4, #7
10012f3c:	2e00      	cmp	r6, #0
10012f3e:	d000      	beq.n	10012f42 <at_ble_adv_start+0xae>
10012f40:	1c34      	adds	r4, r6, #0
10012f42:	9200      	str	r2, [sp, #0]
10012f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10012f46:	9403      	str	r4, [sp, #12]
10012f48:	9204      	str	r2, [sp, #16]
10012f4a:	4a1b      	ldr	r2, [pc, #108]	; (10012fb8 <at_ble_adv_start+0x124>)
10012f4c:	9501      	str	r5, [sp, #4]
10012f4e:	9502      	str	r5, [sp, #8]
10012f50:	9705      	str	r7, [sp, #20]
10012f52:	3272      	adds	r2, #114	; 0x72
10012f54:	7812      	ldrb	r2, [r2, #0]
10012f56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10012f58:	9206      	str	r2, [sp, #24]
10012f5a:	4a19      	ldr	r2, [pc, #100]	; (10012fc0 <at_ble_adv_start+0x12c>)
10012f5c:	9207      	str	r2, [sp, #28]
10012f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10012f60:	9208      	str	r2, [sp, #32]
10012f62:	4a18      	ldr	r2, [pc, #96]	; (10012fc4 <at_ble_adv_start+0x130>)
10012f64:	9209      	str	r2, [sp, #36]	; 0x24
10012f66:	2264      	movs	r2, #100	; 0x64
10012f68:	4362      	muls	r2, r4
10012f6a:	b292      	uxth	r2, r2
10012f6c:	920a      	str	r2, [sp, #40]	; 0x28
10012f6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10012f70:	4c15      	ldr	r4, [pc, #84]	; (10012fc8 <at_ble_adv_start+0x134>)
10012f72:	920b      	str	r2, [sp, #44]	; 0x2c
10012f74:	4a15      	ldr	r2, [pc, #84]	; (10012fcc <at_ble_adv_start+0x138>)
10012f76:	47a0      	blx	r4
10012f78:	e01b      	b.n	10012fb2 <at_ble_adv_start+0x11e>
10012f7a:	2d00      	cmp	r5, #0
10012f7c:	d1be      	bne.n	10012efc <at_ble_adv_start+0x68>
10012f7e:	4b0f      	ldr	r3, [pc, #60]	; (10012fbc <at_ble_adv_start+0x128>)
10012f80:	4798      	blx	r3
10012f82:	2520      	movs	r5, #32
10012f84:	1c01      	adds	r1, r0, #0
10012f86:	e7be      	b.n	10012f06 <at_ble_adv_start+0x72>
10012f88:	2803      	cmp	r0, #3
10012f8a:	d8cd      	bhi.n	10012f28 <at_ble_adv_start+0x94>
10012f8c:	e006      	b.n	10012f9c <at_ble_adv_start+0x108>
10012f8e:	1e60      	subs	r0, r4, #1
10012f90:	2803      	cmp	r0, #3
10012f92:	d903      	bls.n	10012f9c <at_ble_adv_start+0x108>
10012f94:	1c33      	adds	r3, r6, #0
10012f96:	200d      	movs	r0, #13
10012f98:	1c32      	adds	r2, r6, #0
10012f9a:	e7cb      	b.n	10012f34 <at_ble_adv_start+0xa0>
10012f9c:	2300      	movs	r3, #0
10012f9e:	f002 faeb 	bl	10015578 <__gnu_thumb1_case_sqi>
10012fa2:	06c6      	.short	0x06c6
10012fa4:	0204      	.short	0x0204
10012fa6:	200f      	movs	r0, #15
10012fa8:	e7c2      	b.n	10012f30 <at_ble_adv_start+0x9c>
10012faa:	2200      	movs	r2, #0
10012fac:	920c      	str	r2, [sp, #48]	; 0x30
10012fae:	200c      	movs	r0, #12
10012fb0:	e7be      	b.n	10012f30 <at_ble_adv_start+0x9c>
10012fb2:	b011      	add	sp, #68	; 0x44
10012fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012fb6:	46c0      	nop			; (mov r8, r8)
10012fb8:	1001b176 	.word	0x1001b176
10012fbc:	10014d99 	.word	0x10014d99
10012fc0:	1001b1aa 	.word	0x1001b1aa
10012fc4:	1001b1c9 	.word	0x1001b1c9
10012fc8:	10014c79 	.word	0x10014c79
10012fcc:	00003a98 	.word	0x00003a98

10012fd0 <at_ble_scan_stop>:
10012fd0:	b510      	push	{r4, lr}
10012fd2:	4b05      	ldr	r3, [pc, #20]	; (10012fe8 <at_ble_scan_stop+0x18>)
10012fd4:	4798      	blx	r3
10012fd6:	1e04      	subs	r4, r0, #0
10012fd8:	d103      	bne.n	10012fe2 <at_ble_scan_stop+0x12>
10012fda:	20d1      	movs	r0, #209	; 0xd1
10012fdc:	4b03      	ldr	r3, [pc, #12]	; (10012fec <at_ble_scan_stop+0x1c>)
10012fde:	0100      	lsls	r0, r0, #4
10012fe0:	4798      	blx	r3
10012fe2:	1c20      	adds	r0, r4, #0
10012fe4:	bd10      	pop	{r4, pc}
10012fe6:	46c0      	nop			; (mov r8, r8)
10012fe8:	10014aa5 	.word	0x10014aa5
10012fec:	10012aa5 	.word	0x10012aa5

10012ff0 <at_ble_disconnect>:
10012ff0:	b538      	push	{r3, r4, r5, lr}
10012ff2:	1c04      	adds	r4, r0, #0
10012ff4:	4b04      	ldr	r3, [pc, #16]	; (10013008 <at_ble_disconnect+0x18>)
10012ff6:	1c08      	adds	r0, r1, #0
10012ff8:	1c21      	adds	r1, r4, #0
10012ffa:	4798      	blx	r3
10012ffc:	1c05      	adds	r5, r0, #0
10012ffe:	4b03      	ldr	r3, [pc, #12]	; (1001300c <at_ble_disconnect+0x1c>)
10013000:	1c20      	adds	r0, r4, #0
10013002:	4798      	blx	r3
10013004:	1c28      	adds	r0, r5, #0
10013006:	bd38      	pop	{r3, r4, r5, pc}
10013008:	1001411d 	.word	0x1001411d
1001300c:	10012ae9 	.word	0x10012ae9

10013010 <at_ble_conn_update_reply>:
10013010:	b510      	push	{r4, lr}
10013012:	4c01      	ldr	r4, [pc, #4]	; (10013018 <at_ble_conn_update_reply+0x8>)
10013014:	47a0      	blx	r4
10013016:	bd10      	pop	{r4, pc}
10013018:	1001460d 	.word	0x1001460d

1001301c <at_ble_random_address_resolve>:
1001301c:	b510      	push	{r4, lr}
1001301e:	23cf      	movs	r3, #207	; 0xcf
10013020:	2800      	cmp	r0, #0
10013022:	d00a      	beq.n	1001303a <at_ble_random_address_resolve+0x1e>
10013024:	2900      	cmp	r1, #0
10013026:	d008      	beq.n	1001303a <at_ble_random_address_resolve+0x1e>
10013028:	2a00      	cmp	r2, #0
1001302a:	d006      	beq.n	1001303a <at_ble_random_address_resolve+0x1e>
1001302c:	780c      	ldrb	r4, [r1, #0]
1001302e:	2c02      	cmp	r4, #2
10013030:	d103      	bne.n	1001303a <at_ble_random_address_resolve+0x1e>
10013032:	4b03      	ldr	r3, [pc, #12]	; (10013040 <at_ble_random_address_resolve+0x24>)
10013034:	3101      	adds	r1, #1
10013036:	4798      	blx	r3
10013038:	2300      	movs	r3, #0
1001303a:	1c18      	adds	r0, r3, #0
1001303c:	bd10      	pop	{r4, pc}
1001303e:	46c0      	nop			; (mov r8, r8)
10013040:	10014e39 	.word	0x10014e39

10013044 <at_ble_uuid_type2len>:
10013044:	23cf      	movs	r3, #207	; 0xcf
10013046:	2802      	cmp	r0, #2
10013048:	d801      	bhi.n	1001304e <at_ble_uuid_type2len+0xa>
1001304a:	4b02      	ldr	r3, [pc, #8]	; (10013054 <at_ble_uuid_type2len+0x10>)
1001304c:	5c1b      	ldrb	r3, [r3, r0]
1001304e:	1c18      	adds	r0, r3, #0
10013050:	4770      	bx	lr
10013052:	46c0      	nop			; (mov r8, r8)
10013054:	10019882 	.word	0x10019882

10013058 <at_ble_uuid_len2type>:
10013058:	1e83      	subs	r3, r0, #2
1001305a:	b2db      	uxtb	r3, r3
1001305c:	2003      	movs	r0, #3
1001305e:	2b0e      	cmp	r3, #14
10013060:	d801      	bhi.n	10013066 <at_ble_uuid_len2type+0xe>
10013062:	4a01      	ldr	r2, [pc, #4]	; (10013068 <at_ble_uuid_len2type+0x10>)
10013064:	5cd0      	ldrb	r0, [r2, r3]
10013066:	4770      	bx	lr
10013068:	10019873 	.word	0x10019873

1001306c <init_gatt_client_module>:
1001306c:	2200      	movs	r2, #0
1001306e:	4b01      	ldr	r3, [pc, #4]	; (10013074 <init_gatt_client_module+0x8>)
10013070:	801a      	strh	r2, [r3, #0]
10013072:	4770      	bx	lr
10013074:	1001a1d4 	.word	0x1001a1d4

10013078 <db_searchATT>:
10013078:	b570      	push	{r4, r5, r6, lr}
1001307a:	1c05      	adds	r5, r0, #0
1001307c:	2400      	movs	r4, #0
1001307e:	4b0c      	ldr	r3, [pc, #48]	; (100130b0 <db_searchATT+0x38>)
10013080:	6819      	ldr	r1, [r3, #0]
10013082:	4b0c      	ldr	r3, [pc, #48]	; (100130b4 <db_searchATT+0x3c>)
10013084:	681e      	ldr	r6, [r3, #0]
10013086:	428c      	cmp	r4, r1
10013088:	dc10      	bgt.n	100130ac <db_searchATT+0x34>
1001308a:	200c      	movs	r0, #12
1001308c:	1863      	adds	r3, r4, r1
1001308e:	0fda      	lsrs	r2, r3, #31
10013090:	18d3      	adds	r3, r2, r3
10013092:	1c02      	adds	r2, r0, #0
10013094:	105b      	asrs	r3, r3, #1
10013096:	435a      	muls	r2, r3
10013098:	18b0      	adds	r0, r6, r2
1001309a:	8802      	ldrh	r2, [r0, #0]
1001309c:	42aa      	cmp	r2, r5
1001309e:	d201      	bcs.n	100130a4 <db_searchATT+0x2c>
100130a0:	1e59      	subs	r1, r3, #1
100130a2:	e7f0      	b.n	10013086 <db_searchATT+0xe>
100130a4:	42aa      	cmp	r2, r5
100130a6:	d902      	bls.n	100130ae <db_searchATT+0x36>
100130a8:	1c5c      	adds	r4, r3, #1
100130aa:	e7ec      	b.n	10013086 <db_searchATT+0xe>
100130ac:	2000      	movs	r0, #0
100130ae:	bd70      	pop	{r4, r5, r6, pc}
100130b0:	1001a1e8 	.word	0x1001a1e8
100130b4:	1001a1e0 	.word	0x1001a1e0

100130b8 <att_permissions>:
100130b8:	b530      	push	{r4, r5, lr}
100130ba:	2403      	movs	r4, #3
100130bc:	1c05      	adds	r5, r0, #0
100130be:	2301      	movs	r3, #1
100130c0:	4025      	ands	r5, r4
100130c2:	42a5      	cmp	r5, r4
100130c4:	d009      	beq.n	100130da <att_permissions+0x22>
100130c6:	1c23      	adds	r3, r4, #0
100130c8:	1924      	adds	r4, r4, r4
100130ca:	4220      	tst	r0, r4
100130cc:	d105      	bne.n	100130da <att_permissions+0x22>
100130ce:	3b02      	subs	r3, #2
100130d0:	4218      	tst	r0, r3
100130d2:	d102      	bne.n	100130da <att_permissions+0x22>
100130d4:	1e4b      	subs	r3, r1, #1
100130d6:	4199      	sbcs	r1, r3
100130d8:	b28b      	uxth	r3, r1
100130da:	2130      	movs	r1, #48	; 0x30
100130dc:	4001      	ands	r1, r0
100130de:	2930      	cmp	r1, #48	; 0x30
100130e0:	d007      	beq.n	100130f2 <att_permissions+0x3a>
100130e2:	0641      	lsls	r1, r0, #25
100130e4:	d401      	bmi.n	100130ea <att_permissions+0x32>
100130e6:	0681      	lsls	r1, r0, #26
100130e8:	d501      	bpl.n	100130ee <att_permissions+0x36>
100130ea:	4807      	ldr	r0, [pc, #28]	; (10013108 <att_permissions+0x50>)
100130ec:	e009      	b.n	10013102 <att_permissions+0x4a>
100130ee:	06c1      	lsls	r1, r0, #27
100130f0:	d501      	bpl.n	100130f6 <att_permissions+0x3e>
100130f2:	4806      	ldr	r0, [pc, #24]	; (1001310c <att_permissions+0x54>)
100130f4:	e005      	b.n	10013102 <att_permissions+0x4a>
100130f6:	2a00      	cmp	r2, #0
100130f8:	d001      	beq.n	100130fe <att_permissions+0x46>
100130fa:	2204      	movs	r2, #4
100130fc:	4313      	orrs	r3, r2
100130fe:	2080      	movs	r0, #128	; 0x80
10013100:	0180      	lsls	r0, r0, #6
10013102:	4318      	orrs	r0, r3
10013104:	bd30      	pop	{r4, r5, pc}
10013106:	46c0      	nop			; (mov r8, r8)
10013108:	0000200c 	.word	0x0000200c
1001310c:	00002004 	.word	0x00002004

10013110 <char_permissions>:
10013110:	b530      	push	{r4, r5, lr}
10013112:	2300      	movs	r3, #0
10013114:	0784      	lsls	r4, r0, #30
10013116:	d503      	bpl.n	10013120 <char_permissions+0x10>
10013118:	3301      	adds	r3, #1
1001311a:	4219      	tst	r1, r3
1001311c:	d100      	bne.n	10013120 <char_permissions+0x10>
1001311e:	3302      	adds	r3, #2
10013120:	0704      	lsls	r4, r0, #28
10013122:	d508      	bpl.n	10013136 <char_permissions+0x26>
10013124:	06cc      	lsls	r4, r1, #27
10013126:	d501      	bpl.n	1001312c <char_permissions+0x1c>
10013128:	2404      	movs	r4, #4
1001312a:	e000      	b.n	1001312e <char_permissions+0x1e>
1001312c:	240c      	movs	r4, #12
1001312e:	4323      	orrs	r3, r4
10013130:	2480      	movs	r4, #128	; 0x80
10013132:	01a4      	lsls	r4, r4, #6
10013134:	4323      	orrs	r3, r4
10013136:	0684      	lsls	r4, r0, #26
10013138:	d506      	bpl.n	10013148 <char_permissions+0x38>
1001313a:	2406      	movs	r4, #6
1001313c:	4221      	tst	r1, r4
1001313e:	d101      	bne.n	10013144 <char_permissions+0x34>
10013140:	340a      	adds	r4, #10
10013142:	e000      	b.n	10013146 <char_permissions+0x36>
10013144:	2430      	movs	r4, #48	; 0x30
10013146:	4323      	orrs	r3, r4
10013148:	06c4      	lsls	r4, r0, #27
1001314a:	d506      	bpl.n	1001315a <char_permissions+0x4a>
1001314c:	2406      	movs	r4, #6
1001314e:	4221      	tst	r1, r4
10013150:	d101      	bne.n	10013156 <char_permissions+0x46>
10013152:	343a      	adds	r4, #58	; 0x3a
10013154:	e000      	b.n	10013158 <char_permissions+0x48>
10013156:	24c0      	movs	r4, #192	; 0xc0
10013158:	4323      	orrs	r3, r4
1001315a:	2480      	movs	r4, #128	; 0x80
1001315c:	0064      	lsls	r4, r4, #1
1001315e:	4220      	tst	r0, r4
10013160:	d000      	beq.n	10013164 <char_permissions+0x54>
10013162:	4323      	orrs	r3, r4
10013164:	07c4      	lsls	r4, r0, #31
10013166:	d502      	bpl.n	1001316e <char_permissions+0x5e>
10013168:	2480      	movs	r4, #128	; 0x80
1001316a:	00a4      	lsls	r4, r4, #2
1001316c:	4323      	orrs	r3, r4
1001316e:	2404      	movs	r4, #4
10013170:	4220      	tst	r0, r4
10013172:	d006      	beq.n	10013182 <char_permissions+0x72>
10013174:	06cd      	lsls	r5, r1, #27
10013176:	d400      	bmi.n	1001317a <char_permissions+0x6a>
10013178:	240c      	movs	r4, #12
1001317a:	4323      	orrs	r3, r4
1001317c:	2480      	movs	r4, #128	; 0x80
1001317e:	0124      	lsls	r4, r4, #4
10013180:	4323      	orrs	r3, r4
10013182:	0644      	lsls	r4, r0, #25
10013184:	d501      	bpl.n	1001318a <char_permissions+0x7a>
10013186:	4c08      	ldr	r4, [pc, #32]	; (100131a8 <char_permissions+0x98>)
10013188:	4323      	orrs	r3, r4
1001318a:	0600      	lsls	r0, r0, #24
1001318c:	d507      	bpl.n	1001319e <char_permissions+0x8e>
1001318e:	2004      	movs	r0, #4
10013190:	06c9      	lsls	r1, r1, #27
10013192:	d400      	bmi.n	10013196 <char_permissions+0x86>
10013194:	200c      	movs	r0, #12
10013196:	4303      	orrs	r3, r0
10013198:	2084      	movs	r0, #132	; 0x84
1001319a:	0180      	lsls	r0, r0, #6
1001319c:	4303      	orrs	r3, r0
1001319e:	0390      	lsls	r0, r2, #14
100131a0:	4303      	orrs	r3, r0
100131a2:	b298      	uxth	r0, r3
100131a4:	bd30      	pop	{r4, r5, pc}
100131a6:	46c0      	nop			; (mov r8, r8)
100131a8:	00001004 	.word	0x00001004

100131ac <presentation_format_define>:
100131ac:	b507      	push	{r0, r1, r2, lr}
100131ae:	466a      	mov	r2, sp
100131b0:	780b      	ldrb	r3, [r1, #0]
100131b2:	7013      	strb	r3, [r2, #0]
100131b4:	784b      	ldrb	r3, [r1, #1]
100131b6:	7053      	strb	r3, [r2, #1]
100131b8:	884b      	ldrh	r3, [r1, #2]
100131ba:	7093      	strb	r3, [r2, #2]
100131bc:	0a1b      	lsrs	r3, r3, #8
100131be:	70d3      	strb	r3, [r2, #3]
100131c0:	790b      	ldrb	r3, [r1, #4]
100131c2:	7113      	strb	r3, [r2, #4]
100131c4:	88cb      	ldrh	r3, [r1, #6]
100131c6:	2107      	movs	r1, #7
100131c8:	7153      	strb	r3, [r2, #5]
100131ca:	0a1b      	lsrs	r3, r3, #8
100131cc:	7193      	strb	r3, [r2, #6]
100131ce:	4b01      	ldr	r3, [pc, #4]	; (100131d4 <presentation_format_define+0x28>)
100131d0:	4798      	blx	r3
100131d2:	bd0e      	pop	{r1, r2, r3, pc}
100131d4:	10015425 	.word	0x10015425

100131d8 <db_addATT>:
100131d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100131da:	4c29      	ldr	r4, [pc, #164]	; (10013280 <db_addATT+0xa8>)
100131dc:	1c1d      	adds	r5, r3, #0
100131de:	6823      	ldr	r3, [r4, #0]
100131e0:	9001      	str	r0, [sp, #4]
100131e2:	26d3      	movs	r6, #211	; 0xd3
100131e4:	2b00      	cmp	r3, #0
100131e6:	d048      	beq.n	1001327a <db_addATT+0xa2>
100131e8:	1c1e      	adds	r6, r3, #0
100131ea:	3e0c      	subs	r6, #12
100131ec:	6026      	str	r6, [r4, #0]
100131ee:	2900      	cmp	r1, #0
100131f0:	d005      	beq.n	100131fe <db_addATT+0x26>
100131f2:	4f24      	ldr	r7, [pc, #144]	; (10013284 <db_addATT+0xac>)
100131f4:	46bc      	mov	ip, r7
100131f6:	4660      	mov	r0, ip
100131f8:	683f      	ldr	r7, [r7, #0]
100131fa:	18bf      	adds	r7, r7, r2
100131fc:	6007      	str	r7, [r0, #0]
100131fe:	4821      	ldr	r0, [pc, #132]	; (10013284 <db_addATT+0xac>)
10013200:	6807      	ldr	r7, [r0, #0]
10013202:	4684      	mov	ip, r0
10013204:	42be      	cmp	r6, r7
10013206:	d932      	bls.n	1001326e <db_addATT+0x96>
10013208:	4668      	mov	r0, sp
1001320a:	8880      	ldrh	r0, [r0, #4]
1001320c:	3b0c      	subs	r3, #12
1001320e:	8018      	strh	r0, [r3, #0]
10013210:	6823      	ldr	r3, [r4, #0]
10013212:	2900      	cmp	r1, #0
10013214:	d009      	beq.n	1001322a <db_addATT+0x52>
10013216:	2a00      	cmp	r2, #0
10013218:	d007      	beq.n	1001322a <db_addATT+0x52>
1001321a:	4660      	mov	r0, ip
1001321c:	6800      	ldr	r0, [r0, #0]
1001321e:	809a      	strh	r2, [r3, #4]
10013220:	1a80      	subs	r0, r0, r2
10013222:	6098      	str	r0, [r3, #8]
10013224:	4b18      	ldr	r3, [pc, #96]	; (10013288 <db_addATT+0xb0>)
10013226:	4798      	blx	r3
10013228:	e002      	b.n	10013230 <db_addATT+0x58>
1001322a:	2100      	movs	r1, #0
1001322c:	809a      	strh	r2, [r3, #4]
1001322e:	6099      	str	r1, [r3, #8]
10013230:	2300      	movs	r3, #0
10013232:	6822      	ldr	r2, [r4, #0]
10013234:	7093      	strb	r3, [r2, #2]
10013236:	3303      	adds	r3, #3
10013238:	402b      	ands	r3, r5
1001323a:	2b03      	cmp	r3, #3
1001323c:	d001      	beq.n	10013242 <db_addATT+0x6a>
1001323e:	076b      	lsls	r3, r5, #29
10013240:	d504      	bpl.n	1001324c <db_addATT+0x74>
10013242:	2101      	movs	r1, #1
10013244:	6822      	ldr	r2, [r4, #0]
10013246:	7893      	ldrb	r3, [r2, #2]
10013248:	430b      	orrs	r3, r1
1001324a:	7093      	strb	r3, [r2, #2]
1001324c:	2330      	movs	r3, #48	; 0x30
1001324e:	402b      	ands	r3, r5
10013250:	2b30      	cmp	r3, #48	; 0x30
10013252:	d001      	beq.n	10013258 <db_addATT+0x80>
10013254:	066b      	lsls	r3, r5, #25
10013256:	d504      	bpl.n	10013262 <db_addATT+0x8a>
10013258:	2102      	movs	r1, #2
1001325a:	6822      	ldr	r2, [r4, #0]
1001325c:	7893      	ldrb	r3, [r2, #2]
1001325e:	430b      	orrs	r3, r1
10013260:	7093      	strb	r3, [r2, #2]
10013262:	4a0a      	ldr	r2, [pc, #40]	; (1001328c <db_addATT+0xb4>)
10013264:	2600      	movs	r6, #0
10013266:	6813      	ldr	r3, [r2, #0]
10013268:	3301      	adds	r3, #1
1001326a:	6013      	str	r3, [r2, #0]
1001326c:	e005      	b.n	1001327a <db_addATT+0xa2>
1001326e:	6023      	str	r3, [r4, #0]
10013270:	2611      	movs	r6, #17
10013272:	2900      	cmp	r1, #0
10013274:	d001      	beq.n	1001327a <db_addATT+0xa2>
10013276:	1aba      	subs	r2, r7, r2
10013278:	6002      	str	r2, [r0, #0]
1001327a:	1c30      	adds	r0, r6, #0
1001327c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001327e:	46c0      	nop			; (mov r8, r8)
10013280:	1001a1e0 	.word	0x1001a1e0
10013284:	1001a1e4 	.word	0x1001a1e4
10013288:	10017317 	.word	0x10017317
1001328c:	1001a1e8 	.word	0x1001a1e8

10013290 <user_description_define>:
10013290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013292:	1c05      	adds	r5, r0, #0
10013294:	20cf      	movs	r0, #207	; 0xcf
10013296:	2a00      	cmp	r2, #0
10013298:	d01c      	beq.n	100132d4 <user_description_define+0x44>
1001329a:	1c14      	adds	r4, r2, #0
1001329c:	2203      	movs	r2, #3
1001329e:	1c1e      	adds	r6, r3, #0
100132a0:	400a      	ands	r2, r1
100132a2:	1c0b      	adds	r3, r1, #0
100132a4:	3a03      	subs	r2, #3
100132a6:	4251      	negs	r1, r2
100132a8:	4151      	adcs	r1, r2
100132aa:	075a      	lsls	r2, r3, #29
100132ac:	0fd2      	lsrs	r2, r2, #31
100132ae:	430a      	orrs	r2, r1
100132b0:	03d2      	lsls	r2, r2, #15
100132b2:	4f09      	ldr	r7, [pc, #36]	; (100132d8 <user_description_define+0x48>)
100132b4:	1c28      	adds	r0, r5, #0
100132b6:	2a00      	cmp	r2, #0
100132b8:	d003      	beq.n	100132c2 <user_description_define+0x32>
100132ba:	1c21      	adds	r1, r4, #0
100132bc:	1c32      	adds	r2, r6, #0
100132be:	47b8      	blx	r7
100132c0:	e008      	b.n	100132d4 <user_description_define+0x44>
100132c2:	1c11      	adds	r1, r2, #0
100132c4:	47b8      	blx	r7
100132c6:	2800      	cmp	r0, #0
100132c8:	d104      	bne.n	100132d4 <user_description_define+0x44>
100132ca:	1c28      	adds	r0, r5, #0
100132cc:	1c31      	adds	r1, r6, #0
100132ce:	1c22      	adds	r2, r4, #0
100132d0:	4b02      	ldr	r3, [pc, #8]	; (100132dc <user_description_define+0x4c>)
100132d2:	4798      	blx	r3
100132d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100132d6:	46c0      	nop			; (mov r8, r8)
100132d8:	100131d9 	.word	0x100131d9
100132dc:	10015425 	.word	0x10015425

100132e0 <at_ble_read_authorize_reply.part.2>:
100132e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100132e2:	4b09      	ldr	r3, [pc, #36]	; (10013308 <at_ble_read_authorize_reply.part.2+0x28>)
100132e4:	1c05      	adds	r5, r0, #0
100132e6:	1c08      	adds	r0, r1, #0
100132e8:	1c0c      	adds	r4, r1, #0
100132ea:	4798      	blx	r3
100132ec:	2800      	cmp	r0, #0
100132ee:	d009      	beq.n	10013304 <at_ble_read_authorize_reply.part.2+0x24>
100132f0:	6882      	ldr	r2, [r0, #8]
100132f2:	2a00      	cmp	r2, #0
100132f4:	d006      	beq.n	10013304 <at_ble_read_authorize_reply.part.2+0x24>
100132f6:	8883      	ldrh	r3, [r0, #4]
100132f8:	1c29      	adds	r1, r5, #0
100132fa:	9200      	str	r2, [sp, #0]
100132fc:	1c20      	adds	r0, r4, #0
100132fe:	2200      	movs	r2, #0
10013300:	4c02      	ldr	r4, [pc, #8]	; (1001330c <at_ble_read_authorize_reply.part.2+0x2c>)
10013302:	47a0      	blx	r4
10013304:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10013306:	46c0      	nop			; (mov r8, r8)
10013308:	10013079 	.word	0x10013079
1001330c:	10014f35 	.word	0x10014f35

10013310 <internal_at_ble_service_define.part.1>:
10013310:	b5f0      	push	{r4, r5, r6, r7, lr}
10013312:	2400      	movs	r4, #0
10013314:	1c05      	adds	r5, r0, #0
10013316:	b08b      	sub	sp, #44	; 0x2c
10013318:	9304      	str	r3, [sp, #16]
1001331a:	ab10      	add	r3, sp, #64	; 0x40
1001331c:	9202      	str	r2, [sp, #8]
1001331e:	cb04      	ldmia	r3!, {r2}
10013320:	9106      	str	r1, [sp, #24]
10013322:	881b      	ldrh	r3, [r3, #0]
10013324:	1c21      	adds	r1, r4, #0
10013326:	9305      	str	r3, [sp, #20]
10013328:	ab12      	add	r3, sp, #72	; 0x48
1001332a:	781b      	ldrb	r3, [r3, #0]
1001332c:	2210      	movs	r2, #16
1001332e:	9303      	str	r3, [sp, #12]
10013330:	4bc5      	ldr	r3, [pc, #788]	; (10013648 <internal_at_ble_service_define.part.1+0x338>)
10013332:	681e      	ldr	r6, [r3, #0]
10013334:	4bc5      	ldr	r3, [pc, #788]	; (1001364c <internal_at_ble_service_define.part.1+0x33c>)
10013336:	8034      	strh	r4, [r6, #0]
10013338:	881b      	ldrh	r3, [r3, #0]
1001333a:	1db7      	adds	r7, r6, #6
1001333c:	8073      	strh	r3, [r6, #2]
1001333e:	1c38      	adds	r0, r7, #0
10013340:	4bc3      	ldr	r3, [pc, #780]	; (10013650 <internal_at_ble_service_define.part.1+0x340>)
10013342:	4798      	blx	r3
10013344:	4bc3      	ldr	r3, [pc, #780]	; (10013654 <internal_at_ble_service_define.part.1+0x344>)
10013346:	7828      	ldrb	r0, [r5, #0]
10013348:	4798      	blx	r3
1001334a:	4bc3      	ldr	r3, [pc, #780]	; (10013658 <internal_at_ble_service_define.part.1+0x348>)
1001334c:	1c02      	adds	r2, r0, #0
1001334e:	1c69      	adds	r1, r5, #1
10013350:	1c38      	adds	r0, r7, #0
10013352:	4798      	blx	r3
10013354:	2204      	movs	r2, #4
10013356:	782b      	ldrb	r3, [r5, #0]
10013358:	7174      	strb	r4, [r6, #5]
1001335a:	011b      	lsls	r3, r3, #4
1001335c:	4313      	orrs	r3, r2
1001335e:	9a03      	ldr	r2, [sp, #12]
10013360:	9c02      	ldr	r4, [sp, #8]
10013362:	0192      	lsls	r2, r2, #6
10013364:	4313      	orrs	r3, r2
10013366:	7133      	strb	r3, [r6, #4]
10013368:	2316      	movs	r3, #22
1001336a:	9a04      	ldr	r2, [sp, #16]
1001336c:	3412      	adds	r4, #18
1001336e:	4353      	muls	r3, r2
10013370:	9a02      	ldr	r2, [sp, #8]
10013372:	3312      	adds	r3, #18
10013374:	18d7      	adds	r7, r2, r3
10013376:	42bc      	cmp	r4, r7
10013378:	d00f      	beq.n	1001339a <internal_at_ble_service_define.part.1+0x8a>
1001337a:	4bb8      	ldr	r3, [pc, #736]	; (1001365c <internal_at_ble_service_define.part.1+0x34c>)
1001337c:	8821      	ldrh	r1, [r4, #0]
1001337e:	9300      	str	r3, [sp, #0]
10013380:	230e      	movs	r3, #14
10013382:	aa06      	add	r2, sp, #24
10013384:	189b      	adds	r3, r3, r2
10013386:	9301      	str	r3, [sp, #4]
10013388:	4db5      	ldr	r5, [pc, #724]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
1001338a:	1c30      	adds	r0, r6, #0
1001338c:	2201      	movs	r2, #1
1001338e:	2302      	movs	r3, #2
10013390:	47a8      	blx	r5
10013392:	3416      	adds	r4, #22
10013394:	1e05      	subs	r5, r0, #0
10013396:	d0ee      	beq.n	10013376 <internal_at_ble_service_define.part.1+0x66>
10013398:	e183      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
1001339a:	9f10      	ldr	r7, [sp, #64]	; 0x40
1001339c:	2300      	movs	r3, #0
1001339e:	3714      	adds	r7, #20
100133a0:	1c3c      	adds	r4, r7, #0
100133a2:	9302      	str	r3, [sp, #8]
100133a4:	9b02      	ldr	r3, [sp, #8]
100133a6:	9a05      	ldr	r2, [sp, #20]
100133a8:	4293      	cmp	r3, r2
100133aa:	db00      	blt.n	100133ae <internal_at_ble_service_define.part.1+0x9e>
100133ac:	e0bf      	b.n	1001352e <internal_at_ble_service_define.part.1+0x21e>
100133ae:	4bad      	ldr	r3, [pc, #692]	; (10013664 <internal_at_ble_service_define.part.1+0x354>)
100133b0:	aa06      	add	r2, sp, #24
100133b2:	9300      	str	r3, [sp, #0]
100133b4:	230e      	movs	r3, #14
100133b6:	189b      	adds	r3, r3, r2
100133b8:	9301      	str	r3, [sp, #4]
100133ba:	4da9      	ldr	r5, [pc, #676]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
100133bc:	1c30      	adds	r0, r6, #0
100133be:	2104      	movs	r1, #4
100133c0:	2201      	movs	r2, #1
100133c2:	2302      	movs	r3, #2
100133c4:	47a8      	blx	r5
100133c6:	1e05      	subs	r5, r0, #0
100133c8:	d000      	beq.n	100133cc <internal_at_ble_service_define.part.1+0xbc>
100133ca:	e16a      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
100133cc:	1c23      	adds	r3, r4, #0
100133ce:	3b12      	subs	r3, #18
100133d0:	7b25      	ldrb	r5, [r4, #12]
100133d2:	781b      	ldrb	r3, [r3, #0]
100133d4:	1c29      	adds	r1, r5, #0
100133d6:	1c1a      	adds	r2, r3, #0
100133d8:	9303      	str	r3, [sp, #12]
100133da:	8820      	ldrh	r0, [r4, #0]
100133dc:	4ba2      	ldr	r3, [pc, #648]	; (10013668 <internal_at_ble_service_define.part.1+0x358>)
100133de:	4798      	blx	r3
100133e0:	2303      	movs	r3, #3
100133e2:	402b      	ands	r3, r5
100133e4:	3b03      	subs	r3, #3
100133e6:	4259      	negs	r1, r3
100133e8:	4159      	adcs	r1, r3
100133ea:	2301      	movs	r3, #1
100133ec:	08ad      	lsrs	r5, r5, #2
100133ee:	401d      	ands	r5, r3
100133f0:	430d      	orrs	r5, r1
100133f2:	8963      	ldrh	r3, [r4, #10]
100133f4:	03ed      	lsls	r5, r5, #15
100133f6:	431d      	orrs	r5, r3
100133f8:	9007      	str	r0, [sp, #28]
100133fa:	4b96      	ldr	r3, [pc, #600]	; (10013654 <internal_at_ble_service_define.part.1+0x344>)
100133fc:	9803      	ldr	r0, [sp, #12]
100133fe:	4798      	blx	r3
10013400:	1c22      	adds	r2, r4, #0
10013402:	3a11      	subs	r2, #17
10013404:	9200      	str	r2, [sp, #0]
10013406:	3a03      	subs	r2, #3
10013408:	1c03      	adds	r3, r0, #0
1001340a:	9201      	str	r2, [sp, #4]
1001340c:	1c29      	adds	r1, r5, #0
1001340e:	1c30      	adds	r0, r6, #0
10013410:	4d93      	ldr	r5, [pc, #588]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
10013412:	9a07      	ldr	r2, [sp, #28]
10013414:	47a8      	blx	r5
10013416:	1e05      	subs	r5, r0, #0
10013418:	d000      	beq.n	1001341c <internal_at_ble_service_define.part.1+0x10c>
1001341a:	e142      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
1001341c:	22c0      	movs	r2, #192	; 0xc0
1001341e:	8823      	ldrh	r3, [r4, #0]
10013420:	0052      	lsls	r2, r2, #1
10013422:	4213      	tst	r3, r2
10013424:	d104      	bne.n	10013430 <internal_at_ble_service_define.part.1+0x120>
10013426:	8aa3      	ldrh	r3, [r4, #20]
10013428:	9303      	str	r3, [sp, #12]
1001342a:	2b00      	cmp	r3, #0
1001342c:	d116      	bne.n	1001345c <internal_at_ble_service_define.part.1+0x14c>
1001342e:	e03a      	b.n	100134a6 <internal_at_ble_service_define.part.1+0x196>
10013430:	2201      	movs	r2, #1
10013432:	09d9      	lsrs	r1, r3, #7
10013434:	4011      	ands	r1, r2
10013436:	05db      	lsls	r3, r3, #23
10013438:	d501      	bpl.n	1001343e <internal_at_ble_service_define.part.1+0x12e>
1001343a:	2302      	movs	r3, #2
1001343c:	4319      	orrs	r1, r3
1001343e:	4b8b      	ldr	r3, [pc, #556]	; (1001366c <internal_at_ble_service_define.part.1+0x35c>)
10013440:	aa06      	add	r2, sp, #24
10013442:	9300      	str	r3, [sp, #0]
10013444:	230e      	movs	r3, #14
10013446:	189b      	adds	r3, r3, r2
10013448:	9301      	str	r3, [sp, #4]
1001344a:	4d85      	ldr	r5, [pc, #532]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
1001344c:	0209      	lsls	r1, r1, #8
1001344e:	1c30      	adds	r0, r6, #0
10013450:	2201      	movs	r2, #1
10013452:	2302      	movs	r3, #2
10013454:	47a8      	blx	r5
10013456:	1e05      	subs	r5, r0, #0
10013458:	d0e5      	beq.n	10013426 <internal_at_ble_service_define.part.1+0x116>
1001345a:	e122      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
1001345c:	2380      	movs	r3, #128	; 0x80
1001345e:	8822      	ldrh	r2, [r4, #0]
10013460:	7f25      	ldrb	r5, [r4, #28]
10013462:	005b      	lsls	r3, r3, #1
10013464:	401a      	ands	r2, r3
10013466:	1c28      	adds	r0, r5, #0
10013468:	2101      	movs	r1, #1
1001346a:	2a00      	cmp	r2, #0
1001346c:	d000      	beq.n	10013470 <internal_at_ble_service_define.part.1+0x160>
1001346e:	1c0a      	adds	r2, r1, #0
10013470:	4b7f      	ldr	r3, [pc, #508]	; (10013670 <internal_at_ble_service_define.part.1+0x360>)
10013472:	4798      	blx	r3
10013474:	2203      	movs	r2, #3
10013476:	402a      	ands	r2, r5
10013478:	3a03      	subs	r2, #3
1001347a:	4251      	negs	r1, r2
1001347c:	4151      	adcs	r1, r2
1001347e:	4b7d      	ldr	r3, [pc, #500]	; (10013674 <internal_at_ble_service_define.part.1+0x364>)
10013480:	1c0a      	adds	r2, r1, #0
10013482:	9300      	str	r3, [sp, #0]
10013484:	1c23      	adds	r3, r4, #0
10013486:	076d      	lsls	r5, r5, #29
10013488:	0fed      	lsrs	r5, r5, #31
1001348a:	432a      	orrs	r2, r5
1001348c:	03d2      	lsls	r2, r2, #15
1001348e:	4310      	orrs	r0, r2
10013490:	3320      	adds	r3, #32
10013492:	b282      	uxth	r2, r0
10013494:	9301      	str	r3, [sp, #4]
10013496:	4d72      	ldr	r5, [pc, #456]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
10013498:	1c30      	adds	r0, r6, #0
1001349a:	9903      	ldr	r1, [sp, #12]
1001349c:	2302      	movs	r3, #2
1001349e:	47a8      	blx	r5
100134a0:	1e05      	subs	r5, r0, #0
100134a2:	d000      	beq.n	100134a6 <internal_at_ble_service_define.part.1+0x196>
100134a4:	e0fd      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
100134a6:	2101      	movs	r1, #1
100134a8:	8823      	ldrh	r3, [r4, #0]
100134aa:	420b      	tst	r3, r1
100134ac:	d011      	beq.n	100134d2 <internal_at_ble_service_define.part.1+0x1c2>
100134ae:	7fa0      	ldrb	r0, [r4, #30]
100134b0:	4b6f      	ldr	r3, [pc, #444]	; (10013670 <internal_at_ble_service_define.part.1+0x360>)
100134b2:	2200      	movs	r2, #0
100134b4:	4798      	blx	r3
100134b6:	4b70      	ldr	r3, [pc, #448]	; (10013678 <internal_at_ble_service_define.part.1+0x368>)
100134b8:	1c02      	adds	r2, r0, #0
100134ba:	9300      	str	r3, [sp, #0]
100134bc:	1c23      	adds	r3, r4, #0
100134be:	3324      	adds	r3, #36	; 0x24
100134c0:	9301      	str	r3, [sp, #4]
100134c2:	4d67      	ldr	r5, [pc, #412]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
100134c4:	1c30      	adds	r0, r6, #0
100134c6:	496d      	ldr	r1, [pc, #436]	; (1001367c <internal_at_ble_service_define.part.1+0x36c>)
100134c8:	2302      	movs	r3, #2
100134ca:	47a8      	blx	r5
100134cc:	1e05      	subs	r5, r0, #0
100134ce:	d000      	beq.n	100134d2 <internal_at_ble_service_define.part.1+0x1c2>
100134d0:	e0e7      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
100134d2:	2330      	movs	r3, #48	; 0x30
100134d4:	8822      	ldrh	r2, [r4, #0]
100134d6:	421a      	tst	r2, r3
100134d8:	d012      	beq.n	10013500 <internal_at_ble_service_define.part.1+0x1f0>
100134da:	2101      	movs	r1, #1
100134dc:	7f60      	ldrb	r0, [r4, #29]
100134de:	1c0a      	adds	r2, r1, #0
100134e0:	4b63      	ldr	r3, [pc, #396]	; (10013670 <internal_at_ble_service_define.part.1+0x360>)
100134e2:	4798      	blx	r3
100134e4:	4b66      	ldr	r3, [pc, #408]	; (10013680 <internal_at_ble_service_define.part.1+0x370>)
100134e6:	1c02      	adds	r2, r0, #0
100134e8:	9300      	str	r3, [sp, #0]
100134ea:	1c23      	adds	r3, r4, #0
100134ec:	3322      	adds	r3, #34	; 0x22
100134ee:	9301      	str	r3, [sp, #4]
100134f0:	4d5b      	ldr	r5, [pc, #364]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
100134f2:	1c30      	adds	r0, r6, #0
100134f4:	4961      	ldr	r1, [pc, #388]	; (1001367c <internal_at_ble_service_define.part.1+0x36c>)
100134f6:	2302      	movs	r3, #2
100134f8:	47a8      	blx	r5
100134fa:	1e05      	subs	r5, r0, #0
100134fc:	d000      	beq.n	10013500 <internal_at_ble_service_define.part.1+0x1f0>
100134fe:	e0d0      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
10013500:	69a3      	ldr	r3, [r4, #24]
10013502:	2b00      	cmp	r3, #0
10013504:	d00e      	beq.n	10013524 <internal_at_ble_service_define.part.1+0x214>
10013506:	4b5f      	ldr	r3, [pc, #380]	; (10013684 <internal_at_ble_service_define.part.1+0x374>)
10013508:	aa06      	add	r2, sp, #24
1001350a:	9300      	str	r3, [sp, #0]
1001350c:	230e      	movs	r3, #14
1001350e:	189b      	adds	r3, r3, r2
10013510:	9301      	str	r3, [sp, #4]
10013512:	4d53      	ldr	r5, [pc, #332]	; (10013660 <internal_at_ble_service_define.part.1+0x350>)
10013514:	1c30      	adds	r0, r6, #0
10013516:	2107      	movs	r1, #7
10013518:	2201      	movs	r2, #1
1001351a:	2302      	movs	r3, #2
1001351c:	47a8      	blx	r5
1001351e:	1e05      	subs	r5, r0, #0
10013520:	d000      	beq.n	10013524 <internal_at_ble_service_define.part.1+0x214>
10013522:	e0be      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
10013524:	9b02      	ldr	r3, [sp, #8]
10013526:	343c      	adds	r4, #60	; 0x3c
10013528:	3301      	adds	r3, #1
1001352a:	9302      	str	r3, [sp, #8]
1001352c:	e73a      	b.n	100133a4 <internal_at_ble_service_define.part.1+0x94>
1001352e:	1c30      	adds	r0, r6, #0
10013530:	4b55      	ldr	r3, [pc, #340]	; (10013688 <internal_at_ble_service_define.part.1+0x378>)
10013532:	4798      	blx	r3
10013534:	1e05      	subs	r5, r0, #0
10013536:	d000      	beq.n	1001353a <internal_at_ble_service_define.part.1+0x22a>
10013538:	e0b3      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
1001353a:	8833      	ldrh	r3, [r6, #0]
1001353c:	9a06      	ldr	r2, [sp, #24]
1001353e:	8013      	strh	r3, [r2, #0]
10013540:	8836      	ldrh	r6, [r6, #0]
10013542:	9b04      	ldr	r3, [sp, #16]
10013544:	9a05      	ldr	r2, [sp, #20]
10013546:	18f6      	adds	r6, r6, r3
10013548:	b2b3      	uxth	r3, r6
1001354a:	9302      	str	r3, [sp, #8]
1001354c:	233c      	movs	r3, #60	; 0x3c
1001354e:	4353      	muls	r3, r2
10013550:	9a10      	ldr	r2, [sp, #64]	; 0x40
10013552:	3314      	adds	r3, #20
10013554:	18d3      	adds	r3, r2, r3
10013556:	9304      	str	r3, [sp, #16]
10013558:	9b04      	ldr	r3, [sp, #16]
1001355a:	429f      	cmp	r7, r3
1001355c:	d100      	bne.n	10013560 <internal_at_ble_service_define.part.1+0x250>
1001355e:	e0a0      	b.n	100136a2 <internal_at_ble_service_define.part.1+0x392>
10013560:	9b02      	ldr	r3, [sp, #8]
10013562:	1c9c      	adds	r4, r3, #2
10013564:	1c3b      	adds	r3, r7, #0
10013566:	b2a4      	uxth	r4, r4
10013568:	3b14      	subs	r3, #20
1001356a:	801c      	strh	r4, [r3, #0]
1001356c:	9303      	str	r3, [sp, #12]
1001356e:	893b      	ldrh	r3, [r7, #8]
10013570:	2b00      	cmp	r3, #0
10013572:	d108      	bne.n	10013586 <internal_at_ble_service_define.part.1+0x276>
10013574:	23c0      	movs	r3, #192	; 0xc0
10013576:	883a      	ldrh	r2, [r7, #0]
10013578:	005b      	lsls	r3, r3, #1
1001357a:	421a      	tst	r2, r3
1001357c:	d026      	beq.n	100135cc <internal_at_ble_service_define.part.1+0x2bc>
1001357e:	9e02      	ldr	r6, [sp, #8]
10013580:	3603      	adds	r6, #3
10013582:	b2b4      	uxth	r4, r6
10013584:	e022      	b.n	100135cc <internal_at_ble_service_define.part.1+0x2bc>
10013586:	2103      	movs	r1, #3
10013588:	7b3b      	ldrb	r3, [r7, #12]
1001358a:	4019      	ands	r1, r3
1001358c:	3903      	subs	r1, #3
1001358e:	424a      	negs	r2, r1
10013590:	414a      	adcs	r2, r1
10013592:	0759      	lsls	r1, r3, #29
10013594:	0fc9      	lsrs	r1, r1, #31
10013596:	4311      	orrs	r1, r2
10013598:	03c9      	lsls	r1, r1, #15
1001359a:	897a      	ldrh	r2, [r7, #10]
1001359c:	2900      	cmp	r1, #0
1001359e:	d007      	beq.n	100135b0 <internal_at_ble_service_define.part.1+0x2a0>
100135a0:	6879      	ldr	r1, [r7, #4]
100135a2:	2900      	cmp	r1, #0
100135a4:	d100      	bne.n	100135a8 <internal_at_ble_service_define.part.1+0x298>
100135a6:	4939      	ldr	r1, [pc, #228]	; (1001368c <internal_at_ble_service_define.part.1+0x37c>)
100135a8:	1c20      	adds	r0, r4, #0
100135aa:	4e39      	ldr	r6, [pc, #228]	; (10013690 <internal_at_ble_service_define.part.1+0x380>)
100135ac:	47b0      	blx	r6
100135ae:	e00a      	b.n	100135c6 <internal_at_ble_service_define.part.1+0x2b6>
100135b0:	1c20      	adds	r0, r4, #0
100135b2:	4e37      	ldr	r6, [pc, #220]	; (10013690 <internal_at_ble_service_define.part.1+0x380>)
100135b4:	47b0      	blx	r6
100135b6:	2800      	cmp	r0, #0
100135b8:	d172      	bne.n	100136a0 <internal_at_ble_service_define.part.1+0x390>
100135ba:	9b03      	ldr	r3, [sp, #12]
100135bc:	8939      	ldrh	r1, [r7, #8]
100135be:	8818      	ldrh	r0, [r3, #0]
100135c0:	687a      	ldr	r2, [r7, #4]
100135c2:	4b34      	ldr	r3, [pc, #208]	; (10013694 <internal_at_ble_service_define.part.1+0x384>)
100135c4:	4798      	blx	r3
100135c6:	2800      	cmp	r0, #0
100135c8:	d0d4      	beq.n	10013574 <internal_at_ble_service_define.part.1+0x264>
100135ca:	e069      	b.n	100136a0 <internal_at_ble_service_define.part.1+0x390>
100135cc:	8abb      	ldrh	r3, [r7, #20]
100135ce:	2b00      	cmp	r3, #0
100135d0:	d00a      	beq.n	100135e8 <internal_at_ble_service_define.part.1+0x2d8>
100135d2:	3401      	adds	r4, #1
100135d4:	b2a4      	uxth	r4, r4
100135d6:	843c      	strh	r4, [r7, #32]
100135d8:	7f39      	ldrb	r1, [r7, #28]
100135da:	8afb      	ldrh	r3, [r7, #22]
100135dc:	1c20      	adds	r0, r4, #0
100135de:	693a      	ldr	r2, [r7, #16]
100135e0:	4e2d      	ldr	r6, [pc, #180]	; (10013698 <internal_at_ble_service_define.part.1+0x388>)
100135e2:	47b0      	blx	r6
100135e4:	2800      	cmp	r0, #0
100135e6:	d15b      	bne.n	100136a0 <internal_at_ble_service_define.part.1+0x390>
100135e8:	883b      	ldrh	r3, [r7, #0]
100135ea:	07db      	lsls	r3, r3, #31
100135ec:	d50d      	bpl.n	1001360a <internal_at_ble_service_define.part.1+0x2fa>
100135ee:	2200      	movs	r2, #0
100135f0:	3401      	adds	r4, #1
100135f2:	b2a4      	uxth	r4, r4
100135f4:	a909      	add	r1, sp, #36	; 0x24
100135f6:	84bc      	strh	r4, [r7, #36]	; 0x24
100135f8:	7fbb      	ldrb	r3, [r7, #30]
100135fa:	1c20      	adds	r0, r4, #0
100135fc:	700a      	strb	r2, [r1, #0]
100135fe:	704a      	strb	r2, [r1, #1]
10013600:	4e23      	ldr	r6, [pc, #140]	; (10013690 <internal_at_ble_service_define.part.1+0x380>)
10013602:	3202      	adds	r2, #2
10013604:	47b0      	blx	r6
10013606:	2800      	cmp	r0, #0
10013608:	d14a      	bne.n	100136a0 <internal_at_ble_service_define.part.1+0x390>
1001360a:	2330      	movs	r3, #48	; 0x30
1001360c:	883a      	ldrh	r2, [r7, #0]
1001360e:	421a      	tst	r2, r3
10013610:	d00d      	beq.n	1001362e <internal_at_ble_service_define.part.1+0x31e>
10013612:	2200      	movs	r2, #0
10013614:	3401      	adds	r4, #1
10013616:	b2a4      	uxth	r4, r4
10013618:	a909      	add	r1, sp, #36	; 0x24
1001361a:	847c      	strh	r4, [r7, #34]	; 0x22
1001361c:	7f7b      	ldrb	r3, [r7, #29]
1001361e:	1c20      	adds	r0, r4, #0
10013620:	700a      	strb	r2, [r1, #0]
10013622:	704a      	strb	r2, [r1, #1]
10013624:	4e1a      	ldr	r6, [pc, #104]	; (10013690 <internal_at_ble_service_define.part.1+0x380>)
10013626:	3202      	adds	r2, #2
10013628:	47b0      	blx	r6
1001362a:	2800      	cmp	r0, #0
1001362c:	d138      	bne.n	100136a0 <internal_at_ble_service_define.part.1+0x390>
1001362e:	69b9      	ldr	r1, [r7, #24]
10013630:	2900      	cmp	r1, #0
10013632:	d006      	beq.n	10013642 <internal_at_ble_service_define.part.1+0x332>
10013634:	3401      	adds	r4, #1
10013636:	b2a4      	uxth	r4, r4
10013638:	1c20      	adds	r0, r4, #0
1001363a:	4b18      	ldr	r3, [pc, #96]	; (1001369c <internal_at_ble_service_define.part.1+0x38c>)
1001363c:	4798      	blx	r3
1001363e:	2800      	cmp	r0, #0
10013640:	d12e      	bne.n	100136a0 <internal_at_ble_service_define.part.1+0x390>
10013642:	373c      	adds	r7, #60	; 0x3c
10013644:	9402      	str	r4, [sp, #8]
10013646:	e787      	b.n	10013558 <internal_at_ble_service_define.part.1+0x248>
10013648:	1001a1f0 	.word	0x1001a1f0
1001364c:	1001b0e4 	.word	0x1001b0e4
10013650:	10017329 	.word	0x10017329
10013654:	10013045 	.word	0x10013045
10013658:	10017317 	.word	0x10017317
1001365c:	1001988f 	.word	0x1001988f
10013660:	100153b5 	.word	0x100153b5
10013664:	10019891 	.word	0x10019891
10013668:	10013111 	.word	0x10013111
1001366c:	1001988d 	.word	0x1001988d
10013670:	100130b9 	.word	0x100130b9
10013674:	10019889 	.word	0x10019889
10013678:	1001988b 	.word	0x1001988b
1001367c:	00008002 	.word	0x00008002
10013680:	10019885 	.word	0x10019885
10013684:	10019887 	.word	0x10019887
10013688:	100152a9 	.word	0x100152a9
1001368c:	1001a1dc 	.word	0x1001a1dc
10013690:	100131d9 	.word	0x100131d9
10013694:	10015425 	.word	0x10015425
10013698:	10013291 	.word	0x10013291
1001369c:	100131ad 	.word	0x100131ad
100136a0:	1c05      	adds	r5, r0, #0
100136a2:	1c28      	adds	r0, r5, #0
100136a4:	b00b      	add	sp, #44	; 0x2c
100136a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100136a8 <initi_gatt_server_module>:
100136a8:	2300      	movs	r3, #0
100136aa:	4a06      	ldr	r2, [pc, #24]	; (100136c4 <initi_gatt_server_module+0x1c>)
100136ac:	7013      	strb	r3, [r2, #0]
100136ae:	4a06      	ldr	r2, [pc, #24]	; (100136c8 <initi_gatt_server_module+0x20>)
100136b0:	6013      	str	r3, [r2, #0]
100136b2:	4a06      	ldr	r2, [pc, #24]	; (100136cc <initi_gatt_server_module+0x24>)
100136b4:	6013      	str	r3, [r2, #0]
100136b6:	4a06      	ldr	r2, [pc, #24]	; (100136d0 <initi_gatt_server_module+0x28>)
100136b8:	6013      	str	r3, [r2, #0]
100136ba:	4a06      	ldr	r2, [pc, #24]	; (100136d4 <initi_gatt_server_module+0x2c>)
100136bc:	6013      	str	r3, [r2, #0]
100136be:	4a06      	ldr	r2, [pc, #24]	; (100136d8 <initi_gatt_server_module+0x30>)
100136c0:	6013      	str	r3, [r2, #0]
100136c2:	4770      	bx	lr
100136c4:	1001a1dc 	.word	0x1001a1dc
100136c8:	1001a1ec 	.word	0x1001a1ec
100136cc:	1001a1e8 	.word	0x1001a1e8
100136d0:	1001a1d8 	.word	0x1001a1d8
100136d4:	1001a1e4 	.word	0x1001a1e4
100136d8:	1001a1e0 	.word	0x1001a1e0

100136dc <db_init>:
100136dc:	4b0a      	ldr	r3, [pc, #40]	; (10013708 <db_init+0x2c>)
100136de:	4a0b      	ldr	r2, [pc, #44]	; (1001370c <db_init+0x30>)
100136e0:	6018      	str	r0, [r3, #0]
100136e2:	084b      	lsrs	r3, r1, #1
100136e4:	6013      	str	r3, [r2, #0]
100136e6:	4a0a      	ldr	r2, [pc, #40]	; (10013710 <db_init+0x34>)
100136e8:	18c3      	adds	r3, r0, r3
100136ea:	6013      	str	r3, [r2, #0]
100136ec:	4a09      	ldr	r2, [pc, #36]	; (10013714 <db_init+0x38>)
100136ee:	1841      	adds	r1, r0, r1
100136f0:	6013      	str	r3, [r2, #0]
100136f2:	2303      	movs	r3, #3
100136f4:	2200      	movs	r2, #0
100136f6:	3103      	adds	r1, #3
100136f8:	4399      	bics	r1, r3
100136fa:	4b07      	ldr	r3, [pc, #28]	; (10013718 <db_init+0x3c>)
100136fc:	3904      	subs	r1, #4
100136fe:	6019      	str	r1, [r3, #0]
10013700:	4b06      	ldr	r3, [pc, #24]	; (1001371c <db_init+0x40>)
10013702:	601a      	str	r2, [r3, #0]
10013704:	4770      	bx	lr
10013706:	46c0      	nop			; (mov r8, r8)
10013708:	1001a1f0 	.word	0x1001a1f0
1001370c:	1001a1ec 	.word	0x1001a1ec
10013710:	1001a1d8 	.word	0x1001a1d8
10013714:	1001a1e4 	.word	0x1001a1e4
10013718:	1001a1e0 	.word	0x1001a1e0
1001371c:	1001a1e8 	.word	0x1001a1e8

10013720 <at_ble_primary_service_define>:
10013720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10013722:	ac08      	add	r4, sp, #32
10013724:	cc40      	ldmia	r4!, {r6}
10013726:	1c05      	adds	r5, r0, #0
10013728:	8824      	ldrh	r4, [r4, #0]
1001372a:	20cf      	movs	r0, #207	; 0xcf
1001372c:	2d00      	cmp	r5, #0
1001372e:	d00c      	beq.n	1001374a <at_ble_primary_service_define+0x2a>
10013730:	2900      	cmp	r1, #0
10013732:	d00a      	beq.n	1001374a <at_ble_primary_service_define+0x2a>
10013734:	2e00      	cmp	r6, #0
10013736:	d008      	beq.n	1001374a <at_ble_primary_service_define+0x2a>
10013738:	2c00      	cmp	r4, #0
1001373a:	d006      	beq.n	1001374a <at_ble_primary_service_define+0x2a>
1001373c:	38ce      	subs	r0, #206	; 0xce
1001373e:	9401      	str	r4, [sp, #4]
10013740:	9002      	str	r0, [sp, #8]
10013742:	9600      	str	r6, [sp, #0]
10013744:	1c28      	adds	r0, r5, #0
10013746:	4c02      	ldr	r4, [pc, #8]	; (10013750 <at_ble_primary_service_define+0x30>)
10013748:	47a0      	blx	r4
1001374a:	b004      	add	sp, #16
1001374c:	bd70      	pop	{r4, r5, r6, pc}
1001374e:	46c0      	nop			; (mov r8, r8)
10013750:	10013311 	.word	0x10013311

10013754 <at_ble_characteristic_value_set>:
10013754:	b570      	push	{r4, r5, r6, lr}
10013756:	4b0b      	ldr	r3, [pc, #44]	; (10013784 <at_ble_characteristic_value_set+0x30>)
10013758:	1c06      	adds	r6, r0, #0
1001375a:	1c0c      	adds	r4, r1, #0
1001375c:	1c15      	adds	r5, r2, #0
1001375e:	4798      	blx	r3
10013760:	2800      	cmp	r0, #0
10013762:	d008      	beq.n	10013776 <at_ble_characteristic_value_set+0x22>
10013764:	6880      	ldr	r0, [r0, #8]
10013766:	2800      	cmp	r0, #0
10013768:	d005      	beq.n	10013776 <at_ble_characteristic_value_set+0x22>
1001376a:	1c21      	adds	r1, r4, #0
1001376c:	1c2a      	adds	r2, r5, #0
1001376e:	4b06      	ldr	r3, [pc, #24]	; (10013788 <at_ble_characteristic_value_set+0x34>)
10013770:	4798      	blx	r3
10013772:	2000      	movs	r0, #0
10013774:	e004      	b.n	10013780 <at_ble_characteristic_value_set+0x2c>
10013776:	1c30      	adds	r0, r6, #0
10013778:	1c29      	adds	r1, r5, #0
1001377a:	1c22      	adds	r2, r4, #0
1001377c:	4b03      	ldr	r3, [pc, #12]	; (1001378c <at_ble_characteristic_value_set+0x38>)
1001377e:	4798      	blx	r3
10013780:	bd70      	pop	{r4, r5, r6, pc}
10013782:	46c0      	nop			; (mov r8, r8)
10013784:	10013079 	.word	0x10013079
10013788:	10017317 	.word	0x10017317
1001378c:	10015425 	.word	0x10015425

10013790 <at_ble_characteristic_value_get>:
10013790:	b570      	push	{r4, r5, r6, lr}
10013792:	4b0c      	ldr	r3, [pc, #48]	; (100137c4 <at_ble_characteristic_value_get+0x34>)
10013794:	1c06      	adds	r6, r0, #0
10013796:	1c0c      	adds	r4, r1, #0
10013798:	1c15      	adds	r5, r2, #0
1001379a:	4798      	blx	r3
1001379c:	2800      	cmp	r0, #0
1001379e:	d00b      	beq.n	100137b8 <at_ble_characteristic_value_get+0x28>
100137a0:	6883      	ldr	r3, [r0, #8]
100137a2:	2b00      	cmp	r3, #0
100137a4:	d008      	beq.n	100137b8 <at_ble_characteristic_value_get+0x28>
100137a6:	8883      	ldrh	r3, [r0, #4]
100137a8:	802b      	strh	r3, [r5, #0]
100137aa:	8882      	ldrh	r2, [r0, #4]
100137ac:	6881      	ldr	r1, [r0, #8]
100137ae:	4b06      	ldr	r3, [pc, #24]	; (100137c8 <at_ble_characteristic_value_get+0x38>)
100137b0:	1c20      	adds	r0, r4, #0
100137b2:	4798      	blx	r3
100137b4:	2000      	movs	r0, #0
100137b6:	e004      	b.n	100137c2 <at_ble_characteristic_value_get+0x32>
100137b8:	1c30      	adds	r0, r6, #0
100137ba:	1c29      	adds	r1, r5, #0
100137bc:	1c22      	adds	r2, r4, #0
100137be:	4b03      	ldr	r3, [pc, #12]	; (100137cc <at_ble_characteristic_value_get+0x3c>)
100137c0:	4798      	blx	r3
100137c2:	bd70      	pop	{r4, r5, r6, pc}
100137c4:	10013079 	.word	0x10013079
100137c8:	10017317 	.word	0x10017317
100137cc:	100154b1 	.word	0x100154b1

100137d0 <at_ble_write_authorize_reply>:
100137d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100137d2:	b085      	sub	sp, #20
100137d4:	1c04      	adds	r4, r0, #0
100137d6:	9101      	str	r1, [sp, #4]
100137d8:	2900      	cmp	r1, #0
100137da:	d128      	bne.n	1001382e <at_ble_write_authorize_reply+0x5e>
100137dc:	8843      	ldrh	r3, [r0, #2]
100137de:	1c27      	adds	r7, r4, #0
100137e0:	9300      	str	r3, [sp, #0]
100137e2:	1c18      	adds	r0, r3, #0
100137e4:	4b16      	ldr	r3, [pc, #88]	; (10013840 <at_ble_write_authorize_reply+0x70>)
100137e6:	4798      	blx	r3
100137e8:	3708      	adds	r7, #8
100137ea:	2800      	cmp	r0, #0
100137ec:	d009      	beq.n	10013802 <at_ble_write_authorize_reply+0x32>
100137ee:	6880      	ldr	r0, [r0, #8]
100137f0:	2800      	cmp	r0, #0
100137f2:	d006      	beq.n	10013802 <at_ble_write_authorize_reply+0x32>
100137f4:	88a3      	ldrh	r3, [r4, #4]
100137f6:	88e2      	ldrh	r2, [r4, #6]
100137f8:	18c0      	adds	r0, r0, r3
100137fa:	1c39      	adds	r1, r7, #0
100137fc:	4b11      	ldr	r3, [pc, #68]	; (10013844 <at_ble_write_authorize_reply+0x74>)
100137fe:	4798      	blx	r3
10013800:	e015      	b.n	1001382e <at_ble_write_authorize_reply+0x5e>
10013802:	ab02      	add	r3, sp, #8
10013804:	1d9e      	adds	r6, r3, #6
10013806:	2300      	movs	r3, #0
10013808:	4d0f      	ldr	r5, [pc, #60]	; (10013848 <at_ble_write_authorize_reply+0x78>)
1001380a:	8033      	strh	r3, [r6, #0]
1001380c:	6829      	ldr	r1, [r5, #0]
1001380e:	1c32      	adds	r2, r6, #0
10013810:	4b0e      	ldr	r3, [pc, #56]	; (1001384c <at_ble_write_authorize_reply+0x7c>)
10013812:	9800      	ldr	r0, [sp, #0]
10013814:	4798      	blx	r3
10013816:	682b      	ldr	r3, [r5, #0]
10013818:	88a0      	ldrh	r0, [r4, #4]
1001381a:	88e2      	ldrh	r2, [r4, #6]
1001381c:	1818      	adds	r0, r3, r0
1001381e:	1c39      	adds	r1, r7, #0
10013820:	4b08      	ldr	r3, [pc, #32]	; (10013844 <at_ble_write_authorize_reply+0x74>)
10013822:	4798      	blx	r3
10013824:	8860      	ldrh	r0, [r4, #2]
10013826:	8832      	ldrh	r2, [r6, #0]
10013828:	6829      	ldr	r1, [r5, #0]
1001382a:	4b09      	ldr	r3, [pc, #36]	; (10013850 <at_ble_write_authorize_reply+0x80>)
1001382c:	4798      	blx	r3
1001382e:	8860      	ldrh	r0, [r4, #2]
10013830:	8821      	ldrh	r1, [r4, #0]
10013832:	9a01      	ldr	r2, [sp, #4]
10013834:	4b07      	ldr	r3, [pc, #28]	; (10013854 <at_ble_write_authorize_reply+0x84>)
10013836:	4798      	blx	r3
10013838:	2000      	movs	r0, #0
1001383a:	b005      	add	sp, #20
1001383c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001383e:	46c0      	nop			; (mov r8, r8)
10013840:	10013079 	.word	0x10013079
10013844:	10017317 	.word	0x10017317
10013848:	10019a9c 	.word	0x10019a9c
1001384c:	10013791 	.word	0x10013791
10013850:	10013755 	.word	0x10013755
10013854:	10014fa1 	.word	0x10014fa1

10013858 <gatts_handle_read_req>:
10013858:	b538      	push	{r3, r4, r5, lr}
1001385a:	1c0c      	adds	r4, r1, #0
1001385c:	4b07      	ldr	r3, [pc, #28]	; (1001387c <gatts_handle_read_req+0x24>)
1001385e:	4798      	blx	r3
10013860:	8865      	ldrh	r5, [r4, #2]
10013862:	4b07      	ldr	r3, [pc, #28]	; (10013880 <gatts_handle_read_req+0x28>)
10013864:	1c28      	adds	r0, r5, #0
10013866:	4798      	blx	r3
10013868:	7883      	ldrb	r3, [r0, #2]
1001386a:	2026      	movs	r0, #38	; 0x26
1001386c:	07db      	lsls	r3, r3, #31
1001386e:	d404      	bmi.n	1001387a <gatts_handle_read_req+0x22>
10013870:	8820      	ldrh	r0, [r4, #0]
10013872:	1c29      	adds	r1, r5, #0
10013874:	4b03      	ldr	r3, [pc, #12]	; (10013884 <gatts_handle_read_req+0x2c>)
10013876:	4798      	blx	r3
10013878:	203b      	movs	r0, #59	; 0x3b
1001387a:	bd38      	pop	{r3, r4, r5, pc}
1001387c:	10014ee5 	.word	0x10014ee5
10013880:	10013079 	.word	0x10013079
10013884:	100132e1 	.word	0x100132e1

10013888 <gatts_handle_att_info_req>:
10013888:	b538      	push	{r3, r4, r5, lr}
1001388a:	1c0d      	adds	r5, r1, #0
1001388c:	4b0a      	ldr	r3, [pc, #40]	; (100138b8 <gatts_handle_att_info_req+0x30>)
1001388e:	1c14      	adds	r4, r2, #0
10013890:	4798      	blx	r3
10013892:	882d      	ldrh	r5, [r5, #0]
10013894:	4b09      	ldr	r3, [pc, #36]	; (100138bc <gatts_handle_att_info_req+0x34>)
10013896:	1c28      	adds	r0, r5, #0
10013898:	4798      	blx	r3
1001389a:	0a22      	lsrs	r2, r4, #8
1001389c:	1c03      	adds	r3, r0, #0
1001389e:	4c08      	ldr	r4, [pc, #32]	; (100138c0 <gatts_handle_att_info_req+0x38>)
100138a0:	b291      	uxth	r1, r2
100138a2:	2800      	cmp	r0, #0
100138a4:	d003      	beq.n	100138ae <gatts_handle_att_info_req+0x26>
100138a6:	8882      	ldrh	r2, [r0, #4]
100138a8:	2300      	movs	r3, #0
100138aa:	1c28      	adds	r0, r5, #0
100138ac:	e001      	b.n	100138b2 <gatts_handle_att_info_req+0x2a>
100138ae:	1c28      	adds	r0, r5, #0
100138b0:	2201      	movs	r2, #1
100138b2:	47a0      	blx	r4
100138b4:	203b      	movs	r0, #59	; 0x3b
100138b6:	bd38      	pop	{r3, r4, r5, pc}
100138b8:	10014f29 	.word	0x10014f29
100138bc:	10013079 	.word	0x10013079
100138c0:	10014fe5 	.word	0x10014fe5

100138c4 <gatts_handle_write_req>:
100138c4:	b510      	push	{r4, lr}
100138c6:	1c14      	adds	r4, r2, #0
100138c8:	4b07      	ldr	r3, [pc, #28]	; (100138e8 <gatts_handle_write_req+0x24>)
100138ca:	4798      	blx	r3
100138cc:	4b07      	ldr	r3, [pc, #28]	; (100138ec <gatts_handle_write_req+0x28>)
100138ce:	8860      	ldrh	r0, [r4, #2]
100138d0:	4798      	blx	r3
100138d2:	2302      	movs	r3, #2
100138d4:	7881      	ldrb	r1, [r0, #2]
100138d6:	2022      	movs	r0, #34	; 0x22
100138d8:	4019      	ands	r1, r3
100138da:	d103      	bne.n	100138e4 <gatts_handle_write_req+0x20>
100138dc:	1c20      	adds	r0, r4, #0
100138de:	4b04      	ldr	r3, [pc, #16]	; (100138f0 <gatts_handle_write_req+0x2c>)
100138e0:	4798      	blx	r3
100138e2:	201f      	movs	r0, #31
100138e4:	bd10      	pop	{r4, pc}
100138e6:	46c0      	nop			; (mov r8, r8)
100138e8:	10014ef1 	.word	0x10014ef1
100138ec:	10013079 	.word	0x10013079
100138f0:	100137d1 	.word	0x100137d1

100138f4 <init_l2cc_task_module>:
100138f4:	220a      	movs	r2, #10
100138f6:	4b01      	ldr	r3, [pc, #4]	; (100138fc <init_l2cc_task_module+0x8>)
100138f8:	701a      	strb	r2, [r3, #0]
100138fa:	4770      	bx	lr
100138fc:	10019a98 	.word	0x10019a98

10013900 <l2cc_data_send_rsp_handler>:
10013900:	b510      	push	{r4, lr}
10013902:	7802      	ldrb	r2, [r0, #0]
10013904:	700a      	strb	r2, [r1, #0]
10013906:	7883      	ldrb	r3, [r0, #2]
10013908:	7844      	ldrb	r4, [r0, #1]
1001390a:	021b      	lsls	r3, r3, #8
1001390c:	4323      	orrs	r3, r4
1001390e:	804b      	strh	r3, [r1, #2]
10013910:	7903      	ldrb	r3, [r0, #4]
10013912:	78c0      	ldrb	r0, [r0, #3]
10013914:	021b      	lsls	r3, r3, #8
10013916:	4303      	orrs	r3, r0
10013918:	808b      	strh	r3, [r1, #4]
1001391a:	2a00      	cmp	r2, #0
1001391c:	d103      	bne.n	10013926 <l2cc_data_send_rsp_handler+0x26>
1001391e:	4a02      	ldr	r2, [pc, #8]	; (10013928 <l2cc_data_send_rsp_handler+0x28>)
10013920:	7813      	ldrb	r3, [r2, #0]
10013922:	3301      	adds	r3, #1
10013924:	7013      	strb	r3, [r2, #0]
10013926:	bd10      	pop	{r4, pc}
10013928:	10019a98 	.word	0x10019a98

1001392c <l2cc_data_received_handler>:
1001392c:	b508      	push	{r3, lr}
1001392e:	1c03      	adds	r3, r0, #0
10013930:	7842      	ldrb	r2, [r0, #1]
10013932:	7800      	ldrb	r0, [r0, #0]
10013934:	0212      	lsls	r2, r2, #8
10013936:	4302      	orrs	r2, r0
10013938:	800a      	strh	r2, [r1, #0]
1001393a:	78da      	ldrb	r2, [r3, #3]
1001393c:	7898      	ldrb	r0, [r3, #2]
1001393e:	0212      	lsls	r2, r2, #8
10013940:	4302      	orrs	r2, r0
10013942:	804a      	strh	r2, [r1, #2]
10013944:	795a      	ldrb	r2, [r3, #5]
10013946:	7918      	ldrb	r0, [r3, #4]
10013948:	0212      	lsls	r2, r2, #8
1001394a:	4302      	orrs	r2, r0
1001394c:	808a      	strh	r2, [r1, #4]
1001394e:	1d88      	adds	r0, r1, #6
10013950:	1d99      	adds	r1, r3, #6
10013952:	4b01      	ldr	r3, [pc, #4]	; (10013958 <l2cc_data_received_handler+0x2c>)
10013954:	4798      	blx	r3
10013956:	bd08      	pop	{r3, pc}
10013958:	10017317 	.word	0x10017317

1001395c <at_ble_authenticate>:
1001395c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001395e:	1c0c      	adds	r4, r1, #0
10013960:	211f      	movs	r1, #31
10013962:	b08b      	sub	sp, #44	; 0x2c
10013964:	9307      	str	r3, [sp, #28]
10013966:	ab02      	add	r3, sp, #8
10013968:	18c9      	adds	r1, r1, r3
1001396a:	230f      	movs	r3, #15
1001396c:	700b      	strb	r3, [r1, #0]
1001396e:	4b40      	ldr	r3, [pc, #256]	; (10013a70 <at_ble_authenticate+0x114>)
10013970:	1c05      	adds	r5, r0, #0
10013972:	1c16      	adds	r6, r2, #0
10013974:	4798      	blx	r3
10013976:	1c07      	adds	r7, r0, #0
10013978:	2001      	movs	r0, #1
1001397a:	2f07      	cmp	r7, #7
1001397c:	d875      	bhi.n	10013a6a <at_ble_authenticate+0x10e>
1001397e:	2c00      	cmp	r4, #0
10013980:	d113      	bne.n	100139aa <at_ble_authenticate+0x4e>
10013982:	2312      	movs	r3, #18
10013984:	435f      	muls	r7, r3
10013986:	4b3b      	ldr	r3, [pc, #236]	; (10013a74 <at_ble_authenticate+0x118>)
10013988:	5cfb      	ldrb	r3, [r7, r3]
1001398a:	4283      	cmp	r3, r0
1001398c:	d001      	beq.n	10013992 <at_ble_authenticate+0x36>
1001398e:	20cf      	movs	r0, #207	; 0xcf
10013990:	e06b      	b.n	10013a6a <at_ble_authenticate+0x10e>
10013992:	9504      	str	r5, [sp, #16]
10013994:	9400      	str	r4, [sp, #0]
10013996:	9401      	str	r4, [sp, #4]
10013998:	9402      	str	r4, [sp, #8]
1001399a:	9403      	str	r4, [sp, #12]
1001399c:	1c20      	adds	r0, r4, #0
1001399e:	1c21      	adds	r1, r4, #0
100139a0:	1c22      	adds	r2, r4, #0
100139a2:	1c23      	adds	r3, r4, #0
100139a4:	4d34      	ldr	r5, [pc, #208]	; (10013a78 <at_ble_authenticate+0x11c>)
100139a6:	47a8      	blx	r5
100139a8:	e05e      	b.n	10013a68 <at_ble_authenticate+0x10c>
100139aa:	7922      	ldrb	r2, [r4, #4]
100139ac:	2a06      	cmp	r2, #6
100139ae:	d9ee      	bls.n	1001398e <at_ble_authenticate+0x32>
100139b0:	7963      	ldrb	r3, [r4, #5]
100139b2:	2b10      	cmp	r3, #16
100139b4:	d8eb      	bhi.n	1001398e <at_ble_authenticate+0x32>
100139b6:	429a      	cmp	r2, r3
100139b8:	d8e9      	bhi.n	1001398e <at_ble_authenticate+0x32>
100139ba:	7a23      	ldrb	r3, [r4, #8]
100139bc:	2b04      	cmp	r3, #4
100139be:	d8e6      	bhi.n	1001398e <at_ble_authenticate+0x32>
100139c0:	79a3      	ldrb	r3, [r4, #6]
100139c2:	2b07      	cmp	r3, #7
100139c4:	d8e3      	bhi.n	1001398e <at_ble_authenticate+0x32>
100139c6:	79e3      	ldrb	r3, [r4, #7]
100139c8:	2b07      	cmp	r3, #7
100139ca:	d8e0      	bhi.n	1001398e <at_ble_authenticate+0x32>
100139cc:	78a3      	ldrb	r3, [r4, #2]
100139ce:	2b00      	cmp	r3, #0
100139d0:	d006      	beq.n	100139e0 <at_ble_authenticate+0x84>
100139d2:	2e00      	cmp	r6, #0
100139d4:	d0db      	beq.n	1001398e <at_ble_authenticate+0x32>
100139d6:	4829      	ldr	r0, [pc, #164]	; (10013a7c <at_ble_authenticate+0x120>)
100139d8:	1c31      	adds	r1, r6, #0
100139da:	221c      	movs	r2, #28
100139dc:	4b28      	ldr	r3, [pc, #160]	; (10013a80 <at_ble_authenticate+0x124>)
100139de:	4798      	blx	r3
100139e0:	9b07      	ldr	r3, [sp, #28]
100139e2:	2b00      	cmp	r3, #0
100139e4:	d005      	beq.n	100139f2 <at_ble_authenticate+0x96>
100139e6:	4827      	ldr	r0, [pc, #156]	; (10013a84 <at_ble_authenticate+0x128>)
100139e8:	1c19      	adds	r1, r3, #0
100139ea:	309a      	adds	r0, #154	; 0x9a
100139ec:	2210      	movs	r2, #16
100139ee:	4b24      	ldr	r3, [pc, #144]	; (10013a80 <at_ble_authenticate+0x124>)
100139f0:	4798      	blx	r3
100139f2:	7863      	ldrb	r3, [r4, #1]
100139f4:	78a2      	ldrb	r2, [r4, #2]
100139f6:	009b      	lsls	r3, r3, #2
100139f8:	4313      	orrs	r3, r2
100139fa:	2212      	movs	r2, #18
100139fc:	4357      	muls	r7, r2
100139fe:	4a1d      	ldr	r2, [pc, #116]	; (10013a74 <at_ble_authenticate+0x118>)
10013a00:	b2db      	uxtb	r3, r3
10013a02:	5cba      	ldrb	r2, [r7, r2]
10013a04:	2a00      	cmp	r2, #0
10013a06:	d116      	bne.n	10013a36 <at_ble_authenticate+0xda>
10013a08:	79a0      	ldrb	r0, [r4, #6]
10013a0a:	0742      	lsls	r2, r0, #29
10013a0c:	d502      	bpl.n	10013a14 <at_ble_authenticate+0xb8>
10013a0e:	9a07      	ldr	r2, [sp, #28]
10013a10:	2a00      	cmp	r2, #0
10013a12:	d0bc      	beq.n	1001398e <at_ble_authenticate+0x32>
10013a14:	07c2      	lsls	r2, r0, #31
10013a16:	d501      	bpl.n	10013a1c <at_ble_authenticate+0xc0>
10013a18:	2e00      	cmp	r6, #0
10013a1a:	d0b8      	beq.n	1001398e <at_ble_authenticate+0x32>
10013a1c:	7966      	ldrb	r6, [r4, #5]
10013a1e:	7821      	ldrb	r1, [r4, #0]
10013a20:	78e2      	ldrb	r2, [r4, #3]
10013a22:	9600      	str	r6, [sp, #0]
10013a24:	9001      	str	r0, [sp, #4]
10013a26:	79e0      	ldrb	r0, [r4, #7]
10013a28:	9002      	str	r0, [sp, #8]
10013a2a:	7a20      	ldrb	r0, [r4, #8]
10013a2c:	4c16      	ldr	r4, [pc, #88]	; (10013a88 <at_ble_authenticate+0x12c>)
10013a2e:	9003      	str	r0, [sp, #12]
10013a30:	1c28      	adds	r0, r5, #0
10013a32:	47a0      	blx	r4
10013a34:	e018      	b.n	10013a68 <at_ble_authenticate+0x10c>
10013a36:	2a01      	cmp	r2, #1
10013a38:	d1a9      	bne.n	1001398e <at_ble_authenticate+0x32>
10013a3a:	79e0      	ldrb	r0, [r4, #7]
10013a3c:	0742      	lsls	r2, r0, #29
10013a3e:	d502      	bpl.n	10013a46 <at_ble_authenticate+0xea>
10013a40:	9a07      	ldr	r2, [sp, #28]
10013a42:	2a00      	cmp	r2, #0
10013a44:	d0a3      	beq.n	1001398e <at_ble_authenticate+0x32>
10013a46:	07c2      	lsls	r2, r0, #31
10013a48:	d501      	bpl.n	10013a4e <at_ble_authenticate+0xf2>
10013a4a:	2e00      	cmp	r6, #0
10013a4c:	d09f      	beq.n	1001398e <at_ble_authenticate+0x32>
10013a4e:	7966      	ldrb	r6, [r4, #5]
10013a50:	7821      	ldrb	r1, [r4, #0]
10013a52:	78e2      	ldrb	r2, [r4, #3]
10013a54:	9600      	str	r6, [sp, #0]
10013a56:	79a6      	ldrb	r6, [r4, #6]
10013a58:	9002      	str	r0, [sp, #8]
10013a5a:	9601      	str	r6, [sp, #4]
10013a5c:	7a20      	ldrb	r0, [r4, #8]
10013a5e:	9504      	str	r5, [sp, #16]
10013a60:	9003      	str	r0, [sp, #12]
10013a62:	4c05      	ldr	r4, [pc, #20]	; (10013a78 <at_ble_authenticate+0x11c>)
10013a64:	2001      	movs	r0, #1
10013a66:	47a0      	blx	r4
10013a68:	2000      	movs	r0, #0
10013a6a:	b00b      	add	sp, #44	; 0x2c
10013a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013a6e:	46c0      	nop			; (mov r8, r8)
10013a70:	10013e45 	.word	0x10013e45
10013a74:	1001b0e6 	.word	0x1001b0e6
10013a78:	100143b5 	.word	0x100143b5
10013a7c:	1001b1f4 	.word	0x1001b1f4
10013a80:	10017317 	.word	0x10017317
10013a84:	1001b176 	.word	0x1001b176
10013a88:	10014195 	.word	0x10014195

10013a8c <at_ble_pair_key_reply>:
10013a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a8e:	b085      	sub	sp, #20
10013a90:	1c05      	adds	r5, r0, #0
10013a92:	1c0c      	adds	r4, r1, #0
10013a94:	1c16      	adds	r6, r2, #0
10013a96:	2100      	movs	r1, #0
10013a98:	4668      	mov	r0, sp
10013a9a:	2210      	movs	r2, #16
10013a9c:	4b18      	ldr	r3, [pc, #96]	; (10013b00 <at_ble_pair_key_reply+0x74>)
10013a9e:	4798      	blx	r3
10013aa0:	2101      	movs	r1, #1
10013aa2:	2e00      	cmp	r6, #0
10013aa4:	d101      	bne.n	10013aaa <at_ble_pair_key_reply+0x1e>
10013aa6:	1c31      	adds	r1, r6, #0
10013aa8:	466e      	mov	r6, sp
10013aaa:	2c00      	cmp	r4, #0
10013aac:	d116      	bne.n	10013adc <at_ble_pair_key_reply+0x50>
10013aae:	2701      	movs	r7, #1
10013ab0:	1c23      	adds	r3, r4, #0
10013ab2:	1d70      	adds	r0, r6, #5
10013ab4:	3e01      	subs	r6, #1
10013ab6:	7802      	ldrb	r2, [r0, #0]
10013ab8:	3801      	subs	r0, #1
10013aba:	3a30      	subs	r2, #48	; 0x30
10013abc:	437a      	muls	r2, r7
10013abe:	189b      	adds	r3, r3, r2
10013ac0:	220a      	movs	r2, #10
10013ac2:	4357      	muls	r7, r2
10013ac4:	42b0      	cmp	r0, r6
10013ac6:	d1f6      	bne.n	10013ab6 <at_ble_pair_key_reply+0x2a>
10013ac8:	466a      	mov	r2, sp
10013aca:	4668      	mov	r0, sp
10013acc:	7013      	strb	r3, [r2, #0]
10013ace:	0a1a      	lsrs	r2, r3, #8
10013ad0:	7042      	strb	r2, [r0, #1]
10013ad2:	0c1a      	lsrs	r2, r3, #16
10013ad4:	0e1b      	lsrs	r3, r3, #24
10013ad6:	7082      	strb	r2, [r0, #2]
10013ad8:	70c3      	strb	r3, [r0, #3]
10013ada:	e009      	b.n	10013af0 <at_ble_pair_key_reply+0x64>
10013adc:	20cf      	movs	r0, #207	; 0xcf
10013ade:	2c01      	cmp	r4, #1
10013ae0:	d10c      	bne.n	10013afc <at_ble_pair_key_reply+0x70>
10013ae2:	2300      	movs	r3, #0
10013ae4:	4668      	mov	r0, sp
10013ae6:	5cf2      	ldrb	r2, [r6, r3]
10013ae8:	54c2      	strb	r2, [r0, r3]
10013aea:	3301      	adds	r3, #1
10013aec:	2b10      	cmp	r3, #16
10013aee:	d1f9      	bne.n	10013ae4 <at_ble_pair_key_reply+0x58>
10013af0:	2004      	movs	r0, #4
10013af2:	466a      	mov	r2, sp
10013af4:	1c2b      	adds	r3, r5, #0
10013af6:	4c03      	ldr	r4, [pc, #12]	; (10013b04 <at_ble_pair_key_reply+0x78>)
10013af8:	47a0      	blx	r4
10013afa:	2000      	movs	r0, #0
10013afc:	b005      	add	sp, #20
10013afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b00:	10017329 	.word	0x10017329
10013b04:	10014431 	.word	0x10014431

10013b08 <at_ble_send_slave_sec_request>:
10013b08:	b570      	push	{r4, r5, r6, lr}
10013b0a:	4b0c      	ldr	r3, [pc, #48]	; (10013b3c <at_ble_send_slave_sec_request+0x34>)
10013b0c:	1c0e      	adds	r6, r1, #0
10013b0e:	2100      	movs	r1, #0
10013b10:	1c05      	adds	r5, r0, #0
10013b12:	1c14      	adds	r4, r2, #0
10013b14:	4798      	blx	r3
10013b16:	2301      	movs	r3, #1
10013b18:	2807      	cmp	r0, #7
10013b1a:	d80d      	bhi.n	10013b38 <at_ble_send_slave_sec_request+0x30>
10013b1c:	3311      	adds	r3, #17
10013b1e:	4358      	muls	r0, r3
10013b20:	4b07      	ldr	r3, [pc, #28]	; (10013b40 <at_ble_send_slave_sec_request+0x38>)
10013b22:	5cc2      	ldrb	r2, [r0, r3]
10013b24:	23e0      	movs	r3, #224	; 0xe0
10013b26:	2a01      	cmp	r2, #1
10013b28:	d106      	bne.n	10013b38 <at_ble_send_slave_sec_request+0x30>
10013b2a:	00b1      	lsls	r1, r6, #2
10013b2c:	430c      	orrs	r4, r1
10013b2e:	4b05      	ldr	r3, [pc, #20]	; (10013b44 <at_ble_send_slave_sec_request+0x3c>)
10013b30:	b2e1      	uxtb	r1, r4
10013b32:	1c28      	adds	r0, r5, #0
10013b34:	4798      	blx	r3
10013b36:	2300      	movs	r3, #0
10013b38:	1c18      	adds	r0, r3, #0
10013b3a:	bd70      	pop	{r4, r5, r6, pc}
10013b3c:	10013e45 	.word	0x10013e45
10013b40:	1001b0e6 	.word	0x1001b0e6
10013b44:	10014481 	.word	0x10014481

10013b48 <at_ble_encryption_start>:
10013b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013b4a:	23cf      	movs	r3, #207	; 0xcf
10013b4c:	2900      	cmp	r1, #0
10013b4e:	d02b      	beq.n	10013ba8 <at_ble_encryption_start+0x60>
10013b50:	2a05      	cmp	r2, #5
10013b52:	d829      	bhi.n	10013ba8 <at_ble_encryption_start+0x60>
10013b54:	2701      	movs	r7, #1
10013b56:	1c3d      	adds	r5, r7, #0
10013b58:	2433      	movs	r4, #51	; 0x33
10013b5a:	4095      	lsls	r5, r2
10013b5c:	4225      	tst	r5, r4
10013b5e:	d023      	beq.n	10013ba8 <at_ble_encryption_start+0x60>
10013b60:	7e8c      	ldrb	r4, [r1, #26]
10013b62:	3c07      	subs	r4, #7
10013b64:	2c09      	cmp	r4, #9
10013b66:	d81f      	bhi.n	10013ba8 <at_ble_encryption_start+0x60>
10013b68:	4b10      	ldr	r3, [pc, #64]	; (10013bac <at_ble_encryption_start+0x64>)
10013b6a:	1c0c      	adds	r4, r1, #0
10013b6c:	2100      	movs	r1, #0
10013b6e:	1c15      	adds	r5, r2, #0
10013b70:	1c06      	adds	r6, r0, #0
10013b72:	4798      	blx	r3
10013b74:	1c3b      	adds	r3, r7, #0
10013b76:	2807      	cmp	r0, #7
10013b78:	d816      	bhi.n	10013ba8 <at_ble_encryption_start+0x60>
10013b7a:	2312      	movs	r3, #18
10013b7c:	4358      	muls	r0, r3
10013b7e:	4b0c      	ldr	r3, [pc, #48]	; (10013bb0 <at_ble_encryption_start+0x68>)
10013b80:	5cc7      	ldrb	r7, [r0, r3]
10013b82:	23e0      	movs	r3, #224	; 0xe0
10013b84:	2f00      	cmp	r7, #0
10013b86:	d10f      	bne.n	10013ba8 <at_ble_encryption_start+0x60>
10013b88:	1c21      	adds	r1, r4, #0
10013b8a:	221c      	movs	r2, #28
10013b8c:	4b09      	ldr	r3, [pc, #36]	; (10013bb4 <at_ble_encryption_start+0x6c>)
10013b8e:	480a      	ldr	r0, [pc, #40]	; (10013bb8 <at_ble_encryption_start+0x70>)
10013b90:	4798      	blx	r3
10013b92:	1c23      	adds	r3, r4, #0
10013b94:	7ea1      	ldrb	r1, [r4, #26]
10013b96:	8a22      	ldrh	r2, [r4, #16]
10013b98:	3312      	adds	r3, #18
10013b9a:	9100      	str	r1, [sp, #0]
10013b9c:	9501      	str	r5, [sp, #4]
10013b9e:	1c21      	adds	r1, r4, #0
10013ba0:	1c30      	adds	r0, r6, #0
10013ba2:	4c06      	ldr	r4, [pc, #24]	; (10013bbc <at_ble_encryption_start+0x74>)
10013ba4:	47a0      	blx	r4
10013ba6:	1c3b      	adds	r3, r7, #0
10013ba8:	1c18      	adds	r0, r3, #0
10013baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013bac:	10013e45 	.word	0x10013e45
10013bb0:	1001b0e6 	.word	0x1001b0e6
10013bb4:	10017317 	.word	0x10017317
10013bb8:	1001b1f4 	.word	0x1001b1f4
10013bbc:	100144c1 	.word	0x100144c1

10013bc0 <at_ble_encryption_request_reply>:
10013bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
10013bc2:	24cf      	movs	r4, #207	; 0xcf
10013bc4:	2b00      	cmp	r3, #0
10013bc6:	d011      	beq.n	10013bec <at_ble_encryption_request_reply+0x2c>
10013bc8:	2a00      	cmp	r2, #0
10013bca:	d00a      	beq.n	10013be2 <at_ble_encryption_request_reply+0x22>
10013bcc:	2905      	cmp	r1, #5
10013bce:	d80d      	bhi.n	10013bec <at_ble_encryption_request_reply+0x2c>
10013bd0:	2501      	movs	r5, #1
10013bd2:	2633      	movs	r6, #51	; 0x33
10013bd4:	408d      	lsls	r5, r1
10013bd6:	4235      	tst	r5, r6
10013bd8:	d008      	beq.n	10013bec <at_ble_encryption_request_reply+0x2c>
10013bda:	7e9d      	ldrb	r5, [r3, #26]
10013bdc:	3d07      	subs	r5, #7
10013bde:	2d09      	cmp	r5, #9
10013be0:	d804      	bhi.n	10013bec <at_ble_encryption_request_reply+0x2c>
10013be2:	7e9c      	ldrb	r4, [r3, #26]
10013be4:	9400      	str	r4, [sp, #0]
10013be6:	4c02      	ldr	r4, [pc, #8]	; (10013bf0 <at_ble_encryption_request_reply+0x30>)
10013be8:	47a0      	blx	r4
10013bea:	2400      	movs	r4, #0
10013bec:	1c20      	adds	r0, r4, #0
10013bee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10013bf0:	1001457d 	.word	0x1001457d

10013bf4 <rx_callback>:
10013bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013bf6:	88c5      	ldrh	r5, [r0, #6]
10013bf8:	8807      	ldrh	r7, [r0, #0]
10013bfa:	8886      	ldrh	r6, [r0, #4]
10013bfc:	2d00      	cmp	r5, #0
10013bfe:	d10c      	bne.n	10013c1a <rx_callback+0x26>
10013c00:	4b19      	ldr	r3, [pc, #100]	; (10013c68 <rx_callback+0x74>)
10013c02:	1c38      	adds	r0, r7, #0
10013c04:	1c31      	adds	r1, r6, #0
10013c06:	1c2a      	adds	r2, r5, #0
10013c08:	4798      	blx	r3
10013c0a:	1e03      	subs	r3, r0, #0
10013c0c:	d12a      	bne.n	10013c64 <rx_callback+0x70>
10013c0e:	1c38      	adds	r0, r7, #0
10013c10:	1c31      	adds	r1, r6, #0
10013c12:	1c1a      	adds	r2, r3, #0
10013c14:	4c15      	ldr	r4, [pc, #84]	; (10013c6c <rx_callback+0x78>)
10013c16:	47a0      	blx	r4
10013c18:	e024      	b.n	10013c64 <rx_callback+0x70>
10013c1a:	2296      	movs	r2, #150	; 0x96
10013c1c:	4c14      	ldr	r4, [pc, #80]	; (10013c70 <rx_callback+0x7c>)
10013c1e:	0092      	lsls	r2, r2, #2
10013c20:	8823      	ldrh	r3, [r4, #0]
10013c22:	195b      	adds	r3, r3, r5
10013c24:	4293      	cmp	r3, r2
10013c26:	dd01      	ble.n	10013c2c <rx_callback+0x38>
10013c28:	2300      	movs	r3, #0
10013c2a:	8023      	strh	r3, [r4, #0]
10013c2c:	1c01      	adds	r1, r0, #0
10013c2e:	4a11      	ldr	r2, [pc, #68]	; (10013c74 <rx_callback+0x80>)
10013c30:	8823      	ldrh	r3, [r4, #0]
10013c32:	3108      	adds	r1, #8
10013c34:	189b      	adds	r3, r3, r2
10013c36:	9301      	str	r3, [sp, #4]
10013c38:	1c18      	adds	r0, r3, #0
10013c3a:	1c2a      	adds	r2, r5, #0
10013c3c:	4b0e      	ldr	r3, [pc, #56]	; (10013c78 <rx_callback+0x84>)
10013c3e:	4798      	blx	r3
10013c40:	1c38      	adds	r0, r7, #0
10013c42:	1c31      	adds	r1, r6, #0
10013c44:	9a01      	ldr	r2, [sp, #4]
10013c46:	4b08      	ldr	r3, [pc, #32]	; (10013c68 <rx_callback+0x74>)
10013c48:	4798      	blx	r3
10013c4a:	2800      	cmp	r0, #0
10013c4c:	d10a      	bne.n	10013c64 <rx_callback+0x70>
10013c4e:	4b09      	ldr	r3, [pc, #36]	; (10013c74 <rx_callback+0x80>)
10013c50:	8822      	ldrh	r2, [r4, #0]
10013c52:	1c31      	adds	r1, r6, #0
10013c54:	18d2      	adds	r2, r2, r3
10013c56:	1c38      	adds	r0, r7, #0
10013c58:	1c2b      	adds	r3, r5, #0
10013c5a:	4e04      	ldr	r6, [pc, #16]	; (10013c6c <rx_callback+0x78>)
10013c5c:	47b0      	blx	r6
10013c5e:	8823      	ldrh	r3, [r4, #0]
10013c60:	18ed      	adds	r5, r5, r3
10013c62:	8025      	strh	r5, [r4, #0]
10013c64:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10013c66:	46c0      	nop			; (mov r8, r8)
10013c68:	100123ed 	.word	0x100123ed
10013c6c:	10012381 	.word	0x10012381
10013c70:	1001b250 	.word	0x1001b250
10013c74:	1001b654 	.word	0x1001b654
10013c78:	10017317 	.word	0x10017317

10013c7c <interface_send>:
10013c7c:	b508      	push	{r3, lr}
10013c7e:	4b02      	ldr	r3, [pc, #8]	; (10013c88 <interface_send+0xc>)
10013c80:	4798      	blx	r3
10013c82:	2000      	movs	r0, #0
10013c84:	bd08      	pop	{r3, pc}
10013c86:	46c0      	nop			; (mov r8, r8)
10013c88:	100118fd 	.word	0x100118fd

10013c8c <interface_init>:
10013c8c:	2280      	movs	r2, #128	; 0x80
10013c8e:	b510      	push	{r4, lr}
10013c90:	2100      	movs	r1, #0
10013c92:	4c08      	ldr	r4, [pc, #32]	; (10013cb4 <interface_init+0x28>)
10013c94:	0092      	lsls	r2, r2, #2
10013c96:	4808      	ldr	r0, [pc, #32]	; (10013cb8 <interface_init+0x2c>)
10013c98:	47a0      	blx	r4
10013c9a:	2296      	movs	r2, #150	; 0x96
10013c9c:	2100      	movs	r1, #0
10013c9e:	0092      	lsls	r2, r2, #2
10013ca0:	4806      	ldr	r0, [pc, #24]	; (10013cbc <interface_init+0x30>)
10013ca2:	47a0      	blx	r4
10013ca4:	2200      	movs	r2, #0
10013ca6:	4b06      	ldr	r3, [pc, #24]	; (10013cc0 <interface_init+0x34>)
10013ca8:	801a      	strh	r2, [r3, #0]
10013caa:	4a06      	ldr	r2, [pc, #24]	; (10013cc4 <interface_init+0x38>)
10013cac:	4b06      	ldr	r3, [pc, #24]	; (10013cc8 <interface_init+0x3c>)
10013cae:	601a      	str	r2, [r3, #0]
10013cb0:	bd10      	pop	{r4, pc}
10013cb2:	46c0      	nop			; (mov r8, r8)
10013cb4:	10017329 	.word	0x10017329
10013cb8:	1001b454 	.word	0x1001b454
10013cbc:	1001b654 	.word	0x1001b654
10013cc0:	1001b250 	.word	0x1001b250
10013cc4:	1001b254 	.word	0x1001b254
10013cc8:	10019a9c 	.word	0x10019a9c

10013ccc <platform_cmd_cmpl_signal>:
10013ccc:	2201      	movs	r2, #1
10013cce:	4b01      	ldr	r3, [pc, #4]	; (10013cd4 <platform_cmd_cmpl_signal+0x8>)
10013cd0:	601a      	str	r2, [r3, #0]
10013cd2:	4770      	bx	lr
10013cd4:	1001a1f4 	.word	0x1001a1f4

10013cd8 <platform_cmd_cmpl_wait>:
10013cd8:	b510      	push	{r4, lr}
10013cda:	1c04      	adds	r4, r0, #0
10013cdc:	4b07      	ldr	r3, [pc, #28]	; (10013cfc <platform_cmd_cmpl_wait+0x24>)
10013cde:	681a      	ldr	r2, [r3, #0]
10013ce0:	2a01      	cmp	r2, #1
10013ce2:	d003      	beq.n	10013cec <platform_cmd_cmpl_wait+0x14>
10013ce4:	4b06      	ldr	r3, [pc, #24]	; (10013d00 <platform_cmd_cmpl_wait+0x28>)
10013ce6:	2000      	movs	r0, #0
10013ce8:	4798      	blx	r3
10013cea:	e7f7      	b.n	10013cdc <platform_cmd_cmpl_wait+0x4>
10013cec:	6819      	ldr	r1, [r3, #0]
10013cee:	2901      	cmp	r1, #1
10013cf0:	d102      	bne.n	10013cf8 <platform_cmd_cmpl_wait+0x20>
10013cf2:	2200      	movs	r2, #0
10013cf4:	601a      	str	r2, [r3, #0]
10013cf6:	e000      	b.n	10013cfa <platform_cmd_cmpl_wait+0x22>
10013cf8:	7022      	strb	r2, [r4, #0]
10013cfa:	bd10      	pop	{r4, pc}
10013cfc:	1001a1f4 	.word	0x1001a1f4
10013d00:	10011dd1 	.word	0x10011dd1

10013d04 <start_timer>:
10013d04:	4770      	bx	lr

10013d06 <stop_timer>:
10013d06:	4770      	bx	lr

10013d08 <dbg_le_set_bd_addr_req_handler>:
10013d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013d0a:	466b      	mov	r3, sp
10013d0c:	1dde      	adds	r6, r3, #7
10013d0e:	2300      	movs	r3, #0
10013d10:	7033      	strb	r3, [r6, #0]
10013d12:	230f      	movs	r3, #15
10013d14:	4c13      	ldr	r4, [pc, #76]	; (10013d64 <dbg_le_set_bd_addr_req_handler+0x5c>)
10013d16:	2703      	movs	r7, #3
10013d18:	7023      	strb	r3, [r4, #0]
10013d1a:	2300      	movs	r3, #0
10013d1c:	70e3      	strb	r3, [r4, #3]
10013d1e:	4b12      	ldr	r3, [pc, #72]	; (10013d68 <dbg_le_set_bd_addr_req_handler+0x60>)
10013d20:	1c01      	adds	r1, r0, #0
10013d22:	881a      	ldrh	r2, [r3, #0]
10013d24:	881b      	ldrh	r3, [r3, #0]
10013d26:	7122      	strb	r2, [r4, #4]
10013d28:	0a1b      	lsrs	r3, r3, #8
10013d2a:	2206      	movs	r2, #6
10013d2c:	7163      	strb	r3, [r4, #5]
10013d2e:	480f      	ldr	r0, [pc, #60]	; (10013d6c <dbg_le_set_bd_addr_req_handler+0x64>)
10013d30:	4b0f      	ldr	r3, [pc, #60]	; (10013d70 <dbg_le_set_bd_addr_req_handler+0x68>)
10013d32:	7067      	strb	r7, [r4, #1]
10013d34:	70a7      	strb	r7, [r4, #2]
10013d36:	4798      	blx	r3
10013d38:	4d0e      	ldr	r5, [pc, #56]	; (10013d74 <dbg_le_set_bd_addr_req_handler+0x6c>)
10013d3a:	4b0f      	ldr	r3, [pc, #60]	; (10013d78 <dbg_le_set_bd_addr_req_handler+0x70>)
10013d3c:	210e      	movs	r1, #14
10013d3e:	802b      	strh	r3, [r5, #0]
10013d40:	2306      	movs	r3, #6
10013d42:	71a3      	strb	r3, [r4, #6]
10013d44:	2300      	movs	r3, #0
10013d46:	1c20      	adds	r0, r4, #0
10013d48:	71e3      	strb	r3, [r4, #7]
10013d4a:	4b0c      	ldr	r3, [pc, #48]	; (10013d7c <dbg_le_set_bd_addr_req_handler+0x74>)
10013d4c:	80af      	strh	r7, [r5, #4]
10013d4e:	4798      	blx	r3
10013d50:	1c30      	adds	r0, r6, #0
10013d52:	4b0b      	ldr	r3, [pc, #44]	; (10013d80 <dbg_le_set_bd_addr_req_handler+0x78>)
10013d54:	4798      	blx	r3
10013d56:	7833      	ldrb	r3, [r6, #0]
10013d58:	20e2      	movs	r0, #226	; 0xe2
10013d5a:	2b00      	cmp	r3, #0
10013d5c:	d101      	bne.n	10013d62 <dbg_le_set_bd_addr_req_handler+0x5a>
10013d5e:	68ab      	ldr	r3, [r5, #8]
10013d60:	7818      	ldrb	r0, [r3, #0]
10013d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013d64:	1001b454 	.word	0x1001b454
10013d68:	1001b0e4 	.word	0x1001b0e4
10013d6c:	1001b45c 	.word	0x1001b45c
10013d70:	10017317 	.word	0x10017317
10013d74:	1001b0d8 	.word	0x1001b0d8
10013d78:	00000329 	.word	0x00000329
10013d7c:	10013c7d 	.word	0x10013c7d
10013d80:	10013cd9 	.word	0x10013cd9

10013d84 <gapc_get_dev_info_cfm.constprop.1>:
10013d84:	b538      	push	{r3, r4, r5, lr}
10013d86:	230b      	movs	r3, #11
10013d88:	4c27      	ldr	r4, [pc, #156]	; (10013e28 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10013d8a:	7023      	strb	r3, [r4, #0]
10013d8c:	3303      	adds	r3, #3
10013d8e:	7063      	strb	r3, [r4, #1]
10013d90:	3329      	adds	r3, #41	; 0x29
10013d92:	70a3      	strb	r3, [r4, #2]
10013d94:	4b25      	ldr	r3, [pc, #148]	; (10013e2c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10013d96:	70e1      	strb	r1, [r4, #3]
10013d98:	881a      	ldrh	r2, [r3, #0]
10013d9a:	881b      	ldrh	r3, [r3, #0]
10013d9c:	7122      	strb	r2, [r4, #4]
10013d9e:	0a1b      	lsrs	r3, r3, #8
10013da0:	7163      	strb	r3, [r4, #5]
10013da2:	2300      	movs	r3, #0
10013da4:	7220      	strb	r0, [r4, #8]
10013da6:	7263      	strb	r3, [r4, #9]
10013da8:	2801      	cmp	r0, #1
10013daa:	d02b      	beq.n	10013e04 <gapc_get_dev_info_cfm.constprop.1+0x80>
10013dac:	4298      	cmp	r0, r3
10013dae:	d01b      	beq.n	10013de8 <gapc_get_dev_info_cfm.constprop.1+0x64>
10013db0:	2802      	cmp	r0, #2
10013db2:	d12f      	bne.n	10013e14 <gapc_get_dev_info_cfm.constprop.1+0x90>
10013db4:	4b1e      	ldr	r3, [pc, #120]	; (10013e30 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10013db6:	2112      	movs	r1, #18
10013db8:	1c1a      	adds	r2, r3, #0
10013dba:	32ce      	adds	r2, #206	; 0xce
10013dbc:	8812      	ldrh	r2, [r2, #0]
10013dbe:	72a2      	strb	r2, [r4, #10]
10013dc0:	0a12      	lsrs	r2, r2, #8
10013dc2:	72e2      	strb	r2, [r4, #11]
10013dc4:	1c1a      	adds	r2, r3, #0
10013dc6:	32d0      	adds	r2, #208	; 0xd0
10013dc8:	8812      	ldrh	r2, [r2, #0]
10013dca:	7322      	strb	r2, [r4, #12]
10013dcc:	0a12      	lsrs	r2, r2, #8
10013dce:	7362      	strb	r2, [r4, #13]
10013dd0:	1c1a      	adds	r2, r3, #0
10013dd2:	32d2      	adds	r2, #210	; 0xd2
10013dd4:	8812      	ldrh	r2, [r2, #0]
10013dd6:	33d4      	adds	r3, #212	; 0xd4
10013dd8:	73a2      	strb	r2, [r4, #14]
10013dda:	0a12      	lsrs	r2, r2, #8
10013ddc:	73e2      	strb	r2, [r4, #15]
10013dde:	881b      	ldrh	r3, [r3, #0]
10013de0:	7423      	strb	r3, [r4, #16]
10013de2:	0a1b      	lsrs	r3, r3, #8
10013de4:	7463      	strb	r3, [r4, #17]
10013de6:	e016      	b.n	10013e16 <gapc_get_dev_info_cfm.constprop.1+0x92>
10013de8:	4b11      	ldr	r3, [pc, #68]	; (10013e30 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10013dea:	4912      	ldr	r1, [pc, #72]	; (10013e34 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10013dec:	33aa      	adds	r3, #170	; 0xaa
10013dee:	881d      	ldrh	r5, [r3, #0]
10013df0:	4811      	ldr	r0, [pc, #68]	; (10013e38 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10013df2:	0a2b      	lsrs	r3, r5, #8
10013df4:	72a5      	strb	r5, [r4, #10]
10013df6:	72e3      	strb	r3, [r4, #11]
10013df8:	1c2a      	adds	r2, r5, #0
10013dfa:	4b10      	ldr	r3, [pc, #64]	; (10013e3c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10013dfc:	350c      	adds	r5, #12
10013dfe:	4798      	blx	r3
10013e00:	b2a9      	uxth	r1, r5
10013e02:	e008      	b.n	10013e16 <gapc_get_dev_info_cfm.constprop.1+0x92>
10013e04:	4b0a      	ldr	r3, [pc, #40]	; (10013e30 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10013e06:	210c      	movs	r1, #12
10013e08:	33cc      	adds	r3, #204	; 0xcc
10013e0a:	881b      	ldrh	r3, [r3, #0]
10013e0c:	72a3      	strb	r3, [r4, #10]
10013e0e:	0a1b      	lsrs	r3, r3, #8
10013e10:	72e3      	strb	r3, [r4, #11]
10013e12:	e000      	b.n	10013e16 <gapc_get_dev_info_cfm.constprop.1+0x92>
10013e14:	210a      	movs	r1, #10
10013e16:	1c0b      	adds	r3, r1, #0
10013e18:	3b08      	subs	r3, #8
10013e1a:	71a3      	strb	r3, [r4, #6]
10013e1c:	121b      	asrs	r3, r3, #8
10013e1e:	71e3      	strb	r3, [r4, #7]
10013e20:	1c20      	adds	r0, r4, #0
10013e22:	4b07      	ldr	r3, [pc, #28]	; (10013e40 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10013e24:	4798      	blx	r3
10013e26:	bd38      	pop	{r3, r4, r5, pc}
10013e28:	1001b454 	.word	0x1001b454
10013e2c:	1001b0e4 	.word	0x1001b0e4
10013e30:	1001b176 	.word	0x1001b176
10013e34:	1001b222 	.word	0x1001b222
10013e38:	1001b460 	.word	0x1001b460
10013e3c:	10017317 	.word	0x10017317
10013e40:	10013c7d 	.word	0x10013c7d

10013e44 <check_ConnData_idx_role>:
10013e44:	4b0c      	ldr	r3, [pc, #48]	; (10013e78 <check_ConnData_idx_role+0x34>)
10013e46:	b570      	push	{r4, r5, r6, lr}
10013e48:	1c04      	adds	r4, r0, #0
10013e4a:	2008      	movs	r0, #8
10013e4c:	429c      	cmp	r4, r3
10013e4e:	d011      	beq.n	10013e74 <check_ConnData_idx_role+0x30>
10013e50:	2300      	movs	r3, #0
10013e52:	2212      	movs	r2, #18
10013e54:	435a      	muls	r2, r3
10013e56:	4d09      	ldr	r5, [pc, #36]	; (10013e7c <check_ConnData_idx_role+0x38>)
10013e58:	b2d8      	uxtb	r0, r3
10013e5a:	1956      	adds	r6, r2, r5
10013e5c:	8976      	ldrh	r6, [r6, #10]
10013e5e:	42a6      	cmp	r6, r4
10013e60:	d104      	bne.n	10013e6c <check_ConnData_idx_role+0x28>
10013e62:	2900      	cmp	r1, #0
10013e64:	d006      	beq.n	10013e74 <check_ConnData_idx_role+0x30>
10013e66:	5d53      	ldrb	r3, [r2, r5]
10013e68:	700b      	strb	r3, [r1, #0]
10013e6a:	e003      	b.n	10013e74 <check_ConnData_idx_role+0x30>
10013e6c:	3301      	adds	r3, #1
10013e6e:	2b08      	cmp	r3, #8
10013e70:	d1ef      	bne.n	10013e52 <check_ConnData_idx_role+0xe>
10013e72:	1c18      	adds	r0, r3, #0
10013e74:	bd70      	pop	{r4, r5, r6, pc}
10013e76:	46c0      	nop			; (mov r8, r8)
10013e78:	0000ffff 	.word	0x0000ffff
10013e7c:	1001b0e6 	.word	0x1001b0e6

10013e80 <check_ConnData_emptyEntry>:
10013e80:	2300      	movs	r3, #0
10013e82:	2212      	movs	r2, #18
10013e84:	435a      	muls	r2, r3
10013e86:	4906      	ldr	r1, [pc, #24]	; (10013ea0 <check_ConnData_emptyEntry+0x20>)
10013e88:	b2d8      	uxtb	r0, r3
10013e8a:	1852      	adds	r2, r2, r1
10013e8c:	8951      	ldrh	r1, [r2, #10]
10013e8e:	4a05      	ldr	r2, [pc, #20]	; (10013ea4 <check_ConnData_emptyEntry+0x24>)
10013e90:	4291      	cmp	r1, r2
10013e92:	d003      	beq.n	10013e9c <check_ConnData_emptyEntry+0x1c>
10013e94:	3301      	adds	r3, #1
10013e96:	2b08      	cmp	r3, #8
10013e98:	d1f3      	bne.n	10013e82 <check_ConnData_emptyEntry+0x2>
10013e9a:	1c18      	adds	r0, r3, #0
10013e9c:	4770      	bx	lr
10013e9e:	46c0      	nop			; (mov r8, r8)
10013ea0:	1001b0e6 	.word	0x1001b0e6
10013ea4:	0000ffff 	.word	0x0000ffff

10013ea8 <gapc_cmp_evt>:
10013ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013eaa:	780b      	ldrb	r3, [r1, #0]
10013eac:	1c05      	adds	r5, r0, #0
10013eae:	1e58      	subs	r0, r3, #1
10013eb0:	784e      	ldrb	r6, [r1, #1]
10013eb2:	280f      	cmp	r0, #15
10013eb4:	d85a      	bhi.n	10013f6c <gapc_cmp_evt+0xc4>
10013eb6:	1c14      	adds	r4, r2, #0
10013eb8:	f001 fb68 	bl	1001558c <__gnu_thumb1_case_uqi>
10013ebc:	5858440a 	.word	0x5858440a
10013ec0:	4b584444 	.word	0x4b584444
10013ec4:	0825122d 	.word	0x0825122d
10013ec8:	3e395858 	.word	0x3e395858
10013ecc:	203b      	movs	r0, #59	; 0x3b
10013ece:	e04e      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013ed0:	203b      	movs	r0, #59	; 0x3b
10013ed2:	2e00      	cmp	r6, #0
10013ed4:	d04b      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013ed6:	0a2d      	lsrs	r5, r5, #8
10013ed8:	8015      	strh	r5, [r2, #0]
10013eda:	7096      	strb	r6, [r2, #2]
10013edc:	3835      	subs	r0, #53	; 0x35
10013ede:	e046      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013ee0:	466b      	mov	r3, sp
10013ee2:	1ddf      	adds	r7, r3, #7
10013ee4:	2301      	movs	r3, #1
10013ee6:	0a2d      	lsrs	r5, r5, #8
10013ee8:	703b      	strb	r3, [r7, #0]
10013eea:	1c28      	adds	r0, r5, #0
10013eec:	1c39      	adds	r1, r7, #0
10013eee:	4b20      	ldr	r3, [pc, #128]	; (10013f70 <gapc_cmp_evt+0xc8>)
10013ef0:	4798      	blx	r3
10013ef2:	2807      	cmp	r0, #7
10013ef4:	d803      	bhi.n	10013efe <gapc_cmp_evt+0x56>
10013ef6:	783b      	ldrb	r3, [r7, #0]
10013ef8:	203b      	movs	r0, #59	; 0x3b
10013efa:	2b00      	cmp	r3, #0
10013efc:	d037      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013efe:	8065      	strh	r5, [r4, #2]
10013f00:	7126      	strb	r6, [r4, #4]
10013f02:	2009      	movs	r0, #9
10013f04:	e033      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013f06:	203b      	movs	r0, #59	; 0x3b
10013f08:	2e00      	cmp	r6, #0
10013f0a:	d030      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013f0c:	0a2d      	lsrs	r5, r5, #8
10013f0e:	8015      	strh	r5, [r2, #0]
10013f10:	7096      	strb	r6, [r2, #2]
10013f12:	382d      	subs	r0, #45	; 0x2d
10013f14:	e02b      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013f16:	203b      	movs	r0, #59	; 0x3b
10013f18:	2e00      	cmp	r6, #0
10013f1a:	d028      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013f1c:	2300      	movs	r3, #0
10013f1e:	0a2d      	lsrs	r5, r5, #8
10013f20:	8015      	strh	r5, [r2, #0]
10013f22:	7096      	strb	r6, [r2, #2]
10013f24:	8093      	strh	r3, [r2, #4]
10013f26:	80d3      	strh	r3, [r2, #6]
10013f28:	8113      	strh	r3, [r2, #8]
10013f2a:	3834      	subs	r0, #52	; 0x34
10013f2c:	e01f      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013f2e:	203b      	movs	r0, #59	; 0x3b
10013f30:	2e00      	cmp	r6, #0
10013f32:	d01c      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013f34:	7216      	strb	r6, [r2, #8]
10013f36:	e003      	b.n	10013f40 <gapc_cmp_evt+0x98>
10013f38:	203b      	movs	r0, #59	; 0x3b
10013f3a:	2e00      	cmp	r6, #0
10013f3c:	d017      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013f3e:	7116      	strb	r6, [r2, #4]
10013f40:	3812      	subs	r0, #18
10013f42:	e014      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013f44:	203b      	movs	r0, #59	; 0x3b
10013f46:	2e00      	cmp	r6, #0
10013f48:	d011      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013f4a:	7093      	strb	r3, [r2, #2]
10013f4c:	70d6      	strb	r6, [r2, #3]
10013f4e:	382a      	subs	r0, #42	; 0x2a
10013f50:	e00d      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013f52:	203b      	movs	r0, #59	; 0x3b
10013f54:	2e00      	cmp	r6, #0
10013f56:	d00a      	beq.n	10013f6e <gapc_cmp_evt+0xc6>
10013f58:	0a2d      	lsrs	r5, r5, #8
10013f5a:	7016      	strb	r6, [r2, #0]
10013f5c:	8055      	strh	r5, [r2, #2]
10013f5e:	1d10      	adds	r0, r2, #4
10013f60:	2100      	movs	r1, #0
10013f62:	2205      	movs	r2, #5
10013f64:	4b03      	ldr	r3, [pc, #12]	; (10013f74 <gapc_cmp_evt+0xcc>)
10013f66:	4798      	blx	r3
10013f68:	2012      	movs	r0, #18
10013f6a:	e000      	b.n	10013f6e <gapc_cmp_evt+0xc6>
10013f6c:	2000      	movs	r0, #0
10013f6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013f70:	10013e45 	.word	0x10013e45
10013f74:	10017329 	.word	0x10017329

10013f78 <gapc_connection_cfm_handler>:
10013f78:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f7a:	b085      	sub	sp, #20
10013f7c:	1c1d      	adds	r5, r3, #0
10013f7e:	ab0a      	add	r3, sp, #40	; 0x28
10013f80:	781b      	ldrb	r3, [r3, #0]
10013f82:	9201      	str	r2, [sp, #4]
10013f84:	9302      	str	r3, [sp, #8]
10013f86:	ab0b      	add	r3, sp, #44	; 0x2c
10013f88:	781b      	ldrb	r3, [r3, #0]
10013f8a:	1c07      	adds	r7, r0, #0
10013f8c:	9303      	str	r3, [sp, #12]
10013f8e:	ab0c      	add	r3, sp, #48	; 0x30
10013f90:	881a      	ldrh	r2, [r3, #0]
10013f92:	2302      	movs	r3, #2
10013f94:	1c0e      	adds	r6, r1, #0
10013f96:	4c23      	ldr	r4, [pc, #140]	; (10014024 <gapc_connection_cfm_handler+0xac>)
10013f98:	1c39      	adds	r1, r7, #0
10013f9a:	7023      	strb	r3, [r4, #0]
10013f9c:	330c      	adds	r3, #12
10013f9e:	7063      	strb	r3, [r4, #1]
10013fa0:	70a3      	strb	r3, [r4, #2]
10013fa2:	4b21      	ldr	r3, [pc, #132]	; (10014028 <gapc_connection_cfm_handler+0xb0>)
10013fa4:	70e2      	strb	r2, [r4, #3]
10013fa6:	881a      	ldrh	r2, [r3, #0]
10013fa8:	881b      	ldrh	r3, [r3, #0]
10013faa:	7122      	strb	r2, [r4, #4]
10013fac:	0a1b      	lsrs	r3, r3, #8
10013fae:	4f1f      	ldr	r7, [pc, #124]	; (1001402c <gapc_connection_cfm_handler+0xb4>)
10013fb0:	2210      	movs	r2, #16
10013fb2:	481f      	ldr	r0, [pc, #124]	; (10014030 <gapc_connection_cfm_handler+0xb8>)
10013fb4:	7163      	strb	r3, [r4, #5]
10013fb6:	47b8      	blx	r7
10013fb8:	0a33      	lsrs	r3, r6, #8
10013fba:	7626      	strb	r6, [r4, #24]
10013fbc:	7663      	strb	r3, [r4, #25]
10013fbe:	9901      	ldr	r1, [sp, #4]
10013fc0:	0c33      	lsrs	r3, r6, #16
10013fc2:	2210      	movs	r2, #16
10013fc4:	0e36      	lsrs	r6, r6, #24
10013fc6:	481b      	ldr	r0, [pc, #108]	; (10014034 <gapc_connection_cfm_handler+0xbc>)
10013fc8:	76a3      	strb	r3, [r4, #26]
10013fca:	76e6      	strb	r6, [r4, #27]
10013fcc:	47b8      	blx	r7
10013fce:	1c23      	adds	r3, r4, #0
10013fd0:	332c      	adds	r3, #44	; 0x2c
10013fd2:	701d      	strb	r5, [r3, #0]
10013fd4:	1c23      	adds	r3, r4, #0
10013fd6:	0a2a      	lsrs	r2, r5, #8
10013fd8:	332d      	adds	r3, #45	; 0x2d
10013fda:	701a      	strb	r2, [r3, #0]
10013fdc:	1c23      	adds	r3, r4, #0
10013fde:	0c2a      	lsrs	r2, r5, #16
10013fe0:	332e      	adds	r3, #46	; 0x2e
10013fe2:	701a      	strb	r2, [r3, #0]
10013fe4:	1c23      	adds	r3, r4, #0
10013fe6:	0e2d      	lsrs	r5, r5, #24
10013fe8:	332f      	adds	r3, #47	; 0x2f
10013fea:	466a      	mov	r2, sp
10013fec:	701d      	strb	r5, [r3, #0]
10013fee:	1c23      	adds	r3, r4, #0
10013ff0:	7a12      	ldrb	r2, [r2, #8]
10013ff2:	3330      	adds	r3, #48	; 0x30
10013ff4:	701a      	strb	r2, [r3, #0]
10013ff6:	1c23      	adds	r3, r4, #0
10013ff8:	2500      	movs	r5, #0
10013ffa:	3331      	adds	r3, #49	; 0x31
10013ffc:	466a      	mov	r2, sp
10013ffe:	701d      	strb	r5, [r3, #0]
10014000:	1c23      	adds	r3, r4, #0
10014002:	7b12      	ldrb	r2, [r2, #12]
10014004:	3332      	adds	r3, #50	; 0x32
10014006:	701a      	strb	r2, [r3, #0]
10014008:	1c23      	adds	r3, r4, #0
1001400a:	3333      	adds	r3, #51	; 0x33
1001400c:	701d      	strb	r5, [r3, #0]
1001400e:	232c      	movs	r3, #44	; 0x2c
10014010:	1c20      	adds	r0, r4, #0
10014012:	71a3      	strb	r3, [r4, #6]
10014014:	2134      	movs	r1, #52	; 0x34
10014016:	4b08      	ldr	r3, [pc, #32]	; (10014038 <gapc_connection_cfm_handler+0xc0>)
10014018:	71e5      	strb	r5, [r4, #7]
1001401a:	4798      	blx	r3
1001401c:	1c28      	adds	r0, r5, #0
1001401e:	b005      	add	sp, #20
10014020:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014022:	46c0      	nop			; (mov r8, r8)
10014024:	1001b454 	.word	0x1001b454
10014028:	1001b0e4 	.word	0x1001b0e4
1001402c:	10017317 	.word	0x10017317
10014030:	1001b45c 	.word	0x1001b45c
10014034:	1001b470 	.word	0x1001b470
10014038:	10013c7d 	.word	0x10013c7d

1001403c <gapc_con_req_ind>:
1001403c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001403e:	7845      	ldrb	r5, [r0, #1]
10014040:	7803      	ldrb	r3, [r0, #0]
10014042:	4c30      	ldr	r4, [pc, #192]	; (10014104 <gapc_con_req_ind+0xc8>)
10014044:	022d      	lsls	r5, r5, #8
10014046:	431d      	orrs	r5, r3
10014048:	85a5      	strh	r5, [r4, #44]	; 0x2c
1001404a:	78c3      	ldrb	r3, [r0, #3]
1001404c:	7882      	ldrb	r2, [r0, #2]
1001404e:	b08b      	sub	sp, #44	; 0x2c
10014050:	021b      	lsls	r3, r3, #8
10014052:	431a      	orrs	r2, r3
10014054:	466b      	mov	r3, sp
10014056:	9205      	str	r2, [sp, #20]
10014058:	8a9b      	ldrh	r3, [r3, #20]
1001405a:	2120      	movs	r1, #32
1001405c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1001405e:	7943      	ldrb	r3, [r0, #5]
10014060:	7902      	ldrb	r2, [r0, #4]
10014062:	021b      	lsls	r3, r3, #8
10014064:	431a      	orrs	r2, r3
10014066:	466b      	mov	r3, sp
10014068:	9206      	str	r2, [sp, #24]
1001406a:	8b1b      	ldrh	r3, [r3, #24]
1001406c:	1c06      	adds	r6, r0, #0
1001406e:	8623      	strh	r3, [r4, #48]	; 0x30
10014070:	79c3      	ldrb	r3, [r0, #7]
10014072:	7982      	ldrb	r2, [r0, #6]
10014074:	021b      	lsls	r3, r3, #8
10014076:	431a      	orrs	r2, r3
10014078:	466b      	mov	r3, sp
1001407a:	9207      	str	r2, [sp, #28]
1001407c:	466a      	mov	r2, sp
1001407e:	8b9b      	ldrh	r3, [r3, #28]
10014080:	1852      	adds	r2, r2, r1
10014082:	8663      	strh	r3, [r4, #50]	; 0x32
10014084:	7a43      	ldrb	r3, [r0, #9]
10014086:	1c01      	adds	r1, r0, #0
10014088:	9308      	str	r3, [sp, #32]
1001408a:	1c23      	adds	r3, r4, #0
1001408c:	7812      	ldrb	r2, [r2, #0]
1001408e:	3377      	adds	r3, #119	; 0x77
10014090:	3478      	adds	r4, #120	; 0x78
10014092:	701a      	strb	r2, [r3, #0]
10014094:	310a      	adds	r1, #10
10014096:	2206      	movs	r2, #6
10014098:	4b1b      	ldr	r3, [pc, #108]	; (10014108 <gapc_con_req_ind+0xcc>)
1001409a:	1c20      	adds	r0, r4, #0
1001409c:	4798      	blx	r3
1001409e:	7c33      	ldrb	r3, [r6, #16]
100140a0:	9309      	str	r3, [sp, #36]	; 0x24
100140a2:	4b1a      	ldr	r3, [pc, #104]	; (1001410c <gapc_con_req_ind+0xd0>)
100140a4:	4798      	blx	r3
100140a6:	4e1a      	ldr	r6, [pc, #104]	; (10014110 <gapc_con_req_ind+0xd4>)
100140a8:	1e07      	subs	r7, r0, #0
100140aa:	2f07      	cmp	r7, #7
100140ac:	d81b      	bhi.n	100140e6 <gapc_con_req_ind+0xaa>
100140ae:	2312      	movs	r3, #18
100140b0:	4343      	muls	r3, r0
100140b2:	18f0      	adds	r0, r6, r3
100140b4:	8145      	strh	r5, [r0, #10]
100140b6:	4669      	mov	r1, sp
100140b8:	2524      	movs	r5, #36	; 0x24
100140ba:	1949      	adds	r1, r1, r5
100140bc:	7809      	ldrb	r1, [r1, #0]
100140be:	2206      	movs	r2, #6
100140c0:	54f1      	strb	r1, [r6, r3]
100140c2:	2120      	movs	r1, #32
100140c4:	466b      	mov	r3, sp
100140c6:	185b      	adds	r3, r3, r1
100140c8:	781b      	ldrb	r3, [r3, #0]
100140ca:	1c21      	adds	r1, r4, #0
100140cc:	7043      	strb	r3, [r0, #1]
100140ce:	466b      	mov	r3, sp
100140d0:	8a9b      	ldrh	r3, [r3, #20]
100140d2:	3002      	adds	r0, #2
100140d4:	8143      	strh	r3, [r0, #10]
100140d6:	466b      	mov	r3, sp
100140d8:	8b1b      	ldrh	r3, [r3, #24]
100140da:	8183      	strh	r3, [r0, #12]
100140dc:	466b      	mov	r3, sp
100140de:	8b9b      	ldrh	r3, [r3, #28]
100140e0:	81c3      	strh	r3, [r0, #14]
100140e2:	4b09      	ldr	r3, [pc, #36]	; (10014108 <gapc_con_req_ind+0xcc>)
100140e4:	4798      	blx	r3
100140e6:	2112      	movs	r1, #18
100140e8:	2300      	movs	r3, #0
100140ea:	434f      	muls	r7, r1
100140ec:	9300      	str	r3, [sp, #0]
100140ee:	9301      	str	r3, [sp, #4]
100140f0:	19f6      	adds	r6, r6, r7
100140f2:	8971      	ldrh	r1, [r6, #10]
100140f4:	4a07      	ldr	r2, [pc, #28]	; (10014114 <gapc_con_req_ind+0xd8>)
100140f6:	9102      	str	r1, [sp, #8]
100140f8:	1c10      	adds	r0, r2, #0
100140fa:	1c19      	adds	r1, r3, #0
100140fc:	4c06      	ldr	r4, [pc, #24]	; (10014118 <gapc_con_req_ind+0xdc>)
100140fe:	47a0      	blx	r4
10014100:	b00b      	add	sp, #44	; 0x2c
10014102:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014104:	1001b176 	.word	0x1001b176
10014108:	10017317 	.word	0x10017317
1001410c:	10013e81 	.word	0x10013e81
10014110:	1001b0e6 	.word	0x1001b0e6
10014114:	1001a25e 	.word	0x1001a25e
10014118:	10013f79 	.word	0x10013f79

1001411c <gapc_disconnect_cmd_handler>:
1001411c:	2204      	movs	r2, #4
1001411e:	b510      	push	{r4, lr}
10014120:	4b0c      	ldr	r3, [pc, #48]	; (10014154 <gapc_disconnect_cmd_handler+0x38>)
10014122:	2400      	movs	r4, #0
10014124:	701a      	strb	r2, [r3, #0]
10014126:	320a      	adds	r2, #10
10014128:	705a      	strb	r2, [r3, #1]
1001412a:	709a      	strb	r2, [r3, #2]
1001412c:	4a0a      	ldr	r2, [pc, #40]	; (10014158 <gapc_disconnect_cmd_handler+0x3c>)
1001412e:	70d9      	strb	r1, [r3, #3]
10014130:	8811      	ldrh	r1, [r2, #0]
10014132:	8812      	ldrh	r2, [r2, #0]
10014134:	7119      	strb	r1, [r3, #4]
10014136:	0a12      	lsrs	r2, r2, #8
10014138:	715a      	strb	r2, [r3, #5]
1001413a:	2201      	movs	r2, #1
1001413c:	721a      	strb	r2, [r3, #8]
1001413e:	1892      	adds	r2, r2, r2
10014140:	7258      	strb	r0, [r3, #9]
10014142:	719a      	strb	r2, [r3, #6]
10014144:	71dc      	strb	r4, [r3, #7]
10014146:	1c18      	adds	r0, r3, #0
10014148:	210a      	movs	r1, #10
1001414a:	4b04      	ldr	r3, [pc, #16]	; (1001415c <gapc_disconnect_cmd_handler+0x40>)
1001414c:	4798      	blx	r3
1001414e:	1c20      	adds	r0, r4, #0
10014150:	bd10      	pop	{r4, pc}
10014152:	46c0      	nop			; (mov r8, r8)
10014154:	1001b454 	.word	0x1001b454
10014158:	1001b0e4 	.word	0x1001b0e4
1001415c:	10013c7d 	.word	0x10013c7d

10014160 <gapc_disconnect_ind>:
10014160:	1c02      	adds	r2, r0, #0
10014162:	b508      	push	{r3, lr}
10014164:	7843      	ldrb	r3, [r0, #1]
10014166:	7800      	ldrb	r0, [r0, #0]
10014168:	021b      	lsls	r3, r3, #8
1001416a:	4318      	orrs	r0, r3
1001416c:	8008      	strh	r0, [r1, #0]
1001416e:	7893      	ldrb	r3, [r2, #2]
10014170:	708b      	strb	r3, [r1, #2]
10014172:	2100      	movs	r1, #0
10014174:	4b05      	ldr	r3, [pc, #20]	; (1001418c <gapc_disconnect_ind+0x2c>)
10014176:	4798      	blx	r3
10014178:	2807      	cmp	r0, #7
1001417a:	d806      	bhi.n	1001418a <gapc_disconnect_ind+0x2a>
1001417c:	2312      	movs	r3, #18
1001417e:	4358      	muls	r0, r3
10014180:	4b03      	ldr	r3, [pc, #12]	; (10014190 <gapc_disconnect_ind+0x30>)
10014182:	1818      	adds	r0, r3, r0
10014184:	2301      	movs	r3, #1
10014186:	425b      	negs	r3, r3
10014188:	8143      	strh	r3, [r0, #10]
1001418a:	bd08      	pop	{r3, pc}
1001418c:	10013e45 	.word	0x10013e45
10014190:	1001b0e6 	.word	0x1001b0e6

10014194 <gapc_bond_cmd_handler>:
10014194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014196:	9300      	str	r3, [sp, #0]
10014198:	2312      	movs	r3, #18
1001419a:	1c04      	adds	r4, r0, #0
1001419c:	a808      	add	r0, sp, #32
1001419e:	7807      	ldrb	r7, [r0, #0]
100141a0:	a809      	add	r0, sp, #36	; 0x24
100141a2:	7806      	ldrb	r6, [r0, #0]
100141a4:	a80a      	add	r0, sp, #40	; 0x28
100141a6:	7805      	ldrb	r5, [r0, #0]
100141a8:	a80b      	add	r0, sp, #44	; 0x2c
100141aa:	7800      	ldrb	r0, [r0, #0]
100141ac:	9001      	str	r0, [sp, #4]
100141ae:	4810      	ldr	r0, [pc, #64]	; (100141f0 <gapc_bond_cmd_handler+0x5c>)
100141b0:	7003      	strb	r3, [r0, #0]
100141b2:	230e      	movs	r3, #14
100141b4:	70c4      	strb	r4, [r0, #3]
100141b6:	4c0f      	ldr	r4, [pc, #60]	; (100141f4 <gapc_bond_cmd_handler+0x60>)
100141b8:	7043      	strb	r3, [r0, #1]
100141ba:	7083      	strb	r3, [r0, #2]
100141bc:	8823      	ldrh	r3, [r4, #0]
100141be:	8824      	ldrh	r4, [r4, #0]
100141c0:	7103      	strb	r3, [r0, #4]
100141c2:	466b      	mov	r3, sp
100141c4:	781b      	ldrb	r3, [r3, #0]
100141c6:	0a24      	lsrs	r4, r4, #8
100141c8:	72c3      	strb	r3, [r0, #11]
100141ca:	466b      	mov	r3, sp
100141cc:	791b      	ldrb	r3, [r3, #4]
100141ce:	7144      	strb	r4, [r0, #5]
100141d0:	73c3      	strb	r3, [r0, #15]
100141d2:	2308      	movs	r3, #8
100141d4:	7183      	strb	r3, [r0, #6]
100141d6:	2300      	movs	r3, #0
100141d8:	240a      	movs	r4, #10
100141da:	7241      	strb	r1, [r0, #9]
100141dc:	71c3      	strb	r3, [r0, #7]
100141de:	2110      	movs	r1, #16
100141e0:	4b05      	ldr	r3, [pc, #20]	; (100141f8 <gapc_bond_cmd_handler+0x64>)
100141e2:	7307      	strb	r7, [r0, #12]
100141e4:	7346      	strb	r6, [r0, #13]
100141e6:	7385      	strb	r5, [r0, #14]
100141e8:	7204      	strb	r4, [r0, #8]
100141ea:	7282      	strb	r2, [r0, #10]
100141ec:	4798      	blx	r3
100141ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100141f0:	1001b454 	.word	0x1001b454
100141f4:	1001b0e4 	.word	0x1001b0e4
100141f8:	10013c7d 	.word	0x10013c7d

100141fc <gapc_bond_ind>:
100141fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100141fe:	780e      	ldrb	r6, [r1, #0]
10014200:	1c03      	adds	r3, r0, #0
10014202:	1eb0      	subs	r0, r6, #2
10014204:	2805      	cmp	r0, #5
10014206:	d85d      	bhi.n	100142c4 <gapc_bond_ind+0xc8>
10014208:	1c15      	adds	r5, r2, #0
1001420a:	1c0c      	adds	r4, r1, #0
1001420c:	f001 f9be 	bl	1001558c <__gnu_thumb1_case_uqi>
10014210:	2f5a030d 	.word	0x2f5a030d
10014214:	4740      	.short	0x4740
10014216:	2009      	movs	r0, #9
10014218:	2a00      	cmp	r2, #0
1001421a:	d054      	beq.n	100142c6 <gapc_bond_ind+0xca>
1001421c:	0a1b      	lsrs	r3, r3, #8
1001421e:	8053      	strh	r3, [r2, #2]
10014220:	788b      	ldrb	r3, [r1, #2]
10014222:	4829      	ldr	r0, [pc, #164]	; (100142c8 <gapc_bond_ind+0xcc>)
10014224:	7113      	strb	r3, [r2, #4]
10014226:	2100      	movs	r1, #0
10014228:	e01c      	b.n	10014264 <gapc_bond_ind+0x68>
1001422a:	2009      	movs	r0, #9
1001422c:	2a00      	cmp	r2, #0
1001422e:	d04a      	beq.n	100142c6 <gapc_bond_ind+0xca>
10014230:	4c25      	ldr	r4, [pc, #148]	; (100142c8 <gapc_bond_ind+0xcc>)
10014232:	0a1b      	lsrs	r3, r3, #8
10014234:	8053      	strh	r3, [r2, #2]
10014236:	788b      	ldrb	r3, [r1, #2]
10014238:	2700      	movs	r7, #0
1001423a:	1c10      	adds	r0, r2, #0
1001423c:	1c21      	adds	r1, r4, #0
1001423e:	7013      	strb	r3, [r2, #0]
10014240:	4e22      	ldr	r6, [pc, #136]	; (100142cc <gapc_bond_ind+0xd0>)
10014242:	7117      	strb	r7, [r2, #4]
10014244:	312e      	adds	r1, #46	; 0x2e
10014246:	2217      	movs	r2, #23
10014248:	3032      	adds	r0, #50	; 0x32
1001424a:	47b0      	blx	r6
1001424c:	1c28      	adds	r0, r5, #0
1001424e:	1c21      	adds	r1, r4, #0
10014250:	2210      	movs	r2, #16
10014252:	311e      	adds	r1, #30
10014254:	3022      	adds	r0, #34	; 0x22
10014256:	47b0      	blx	r6
10014258:	1ca1      	adds	r1, r4, #2
1001425a:	1da8      	adds	r0, r5, #6
1001425c:	221c      	movs	r2, #28
1001425e:	47b0      	blx	r6
10014260:	1c20      	adds	r0, r4, #0
10014262:	1c39      	adds	r1, r7, #0
10014264:	2246      	movs	r2, #70	; 0x46
10014266:	4b1a      	ldr	r3, [pc, #104]	; (100142d0 <gapc_bond_ind+0xd4>)
10014268:	4798      	blx	r3
1001426a:	2009      	movs	r0, #9
1001426c:	e02b      	b.n	100142c6 <gapc_bond_ind+0xca>
1001426e:	4d16      	ldr	r5, [pc, #88]	; (100142c8 <gapc_bond_ind+0xcc>)
10014270:	3102      	adds	r1, #2
10014272:	1c28      	adds	r0, r5, #0
10014274:	2210      	movs	r2, #16
10014276:	4e15      	ldr	r6, [pc, #84]	; (100142cc <gapc_bond_ind+0xd0>)
10014278:	302e      	adds	r0, #46	; 0x2e
1001427a:	47b0      	blx	r6
1001427c:	1c28      	adds	r0, r5, #0
1001427e:	1c21      	adds	r1, r4, #0
10014280:	303f      	adds	r0, #63	; 0x3f
10014282:	3112      	adds	r1, #18
10014284:	2206      	movs	r2, #6
10014286:	47b0      	blx	r6
10014288:	7e23      	ldrb	r3, [r4, #24]
1001428a:	353e      	adds	r5, #62	; 0x3e
1001428c:	702b      	strb	r3, [r5, #0]
1001428e:	e019      	b.n	100142c4 <gapc_bond_ind+0xc8>
10014290:	480d      	ldr	r0, [pc, #52]	; (100142c8 <gapc_bond_ind+0xcc>)
10014292:	3102      	adds	r1, #2
10014294:	2210      	movs	r2, #16
10014296:	4b0d      	ldr	r3, [pc, #52]	; (100142cc <gapc_bond_ind+0xd0>)
10014298:	301e      	adds	r0, #30
1001429a:	4798      	blx	r3
1001429c:	e012      	b.n	100142c4 <gapc_bond_ind+0xc8>
1001429e:	4d0a      	ldr	r5, [pc, #40]	; (100142c8 <gapc_bond_ind+0xcc>)
100142a0:	3102      	adds	r1, #2
100142a2:	2210      	movs	r2, #16
100142a4:	4e09      	ldr	r6, [pc, #36]	; (100142cc <gapc_bond_ind+0xd0>)
100142a6:	1ca8      	adds	r0, r5, #2
100142a8:	47b0      	blx	r6
100142aa:	1c28      	adds	r0, r5, #0
100142ac:	1c21      	adds	r1, r4, #0
100142ae:	7ce3      	ldrb	r3, [r4, #19]
100142b0:	7ca2      	ldrb	r2, [r4, #18]
100142b2:	021b      	lsls	r3, r3, #8
100142b4:	4313      	orrs	r3, r2
100142b6:	3014      	adds	r0, #20
100142b8:	3114      	adds	r1, #20
100142ba:	2208      	movs	r2, #8
100142bc:	826b      	strh	r3, [r5, #18]
100142be:	47b0      	blx	r6
100142c0:	7f23      	ldrb	r3, [r4, #28]
100142c2:	772b      	strb	r3, [r5, #28]
100142c4:	2000      	movs	r0, #0
100142c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100142c8:	1001a218 	.word	0x1001a218
100142cc:	10017317 	.word	0x10017317
100142d0:	10017329 	.word	0x10017329

100142d4 <gapc_bond_req_ind>:
100142d4:	b570      	push	{r4, r5, r6, lr}
100142d6:	780c      	ldrb	r4, [r1, #0]
100142d8:	1c03      	adds	r3, r0, #0
100142da:	7849      	ldrb	r1, [r1, #1]
100142dc:	2c07      	cmp	r4, #7
100142de:	d85c      	bhi.n	1001439a <gapc_bond_req_ind+0xc6>
100142e0:	1c20      	adds	r0, r4, #0
100142e2:	f001 f953 	bl	1001558c <__gnu_thumb1_case_uqi>
100142e6:	5a04      	.short	0x5a04
100142e8:	5a0b5a5a 	.word	0x5a0b5a5a
100142ec:	1f1f      	.short	0x1f1f
100142ee:	200a      	movs	r0, #10
100142f0:	2a00      	cmp	r2, #0
100142f2:	d053      	beq.n	1001439c <gapc_bond_req_ind+0xc8>
100142f4:	0a1b      	lsrs	r3, r3, #8
100142f6:	8013      	strh	r3, [r2, #0]
100142f8:	7091      	strb	r1, [r2, #2]
100142fa:	e04f      	b.n	1001439c <gapc_bond_req_ind+0xc8>
100142fc:	2a00      	cmp	r2, #0
100142fe:	d00b      	beq.n	10014318 <gapc_bond_req_ind+0x44>
10014300:	0a1b      	lsrs	r3, r3, #8
10014302:	8013      	strh	r3, [r2, #0]
10014304:	2900      	cmp	r1, #0
10014306:	d102      	bne.n	1001430e <gapc_bond_req_ind+0x3a>
10014308:	2301      	movs	r3, #1
1001430a:	7093      	strb	r3, [r2, #2]
1001430c:	e004      	b.n	10014318 <gapc_bond_req_ind+0x44>
1001430e:	2300      	movs	r3, #0
10014310:	7093      	strb	r3, [r2, #2]
10014312:	2902      	cmp	r1, #2
10014314:	d102      	bne.n	1001431c <gapc_bond_req_ind+0x48>
10014316:	70d3      	strb	r3, [r2, #3]
10014318:	200c      	movs	r0, #12
1001431a:	e03f      	b.n	1001439c <gapc_bond_req_ind+0xc8>
1001431c:	2901      	cmp	r1, #1
1001431e:	d1fb      	bne.n	10014318 <gapc_bond_req_ind+0x44>
10014320:	70d1      	strb	r1, [r2, #3]
10014322:	e7f9      	b.n	10014318 <gapc_bond_req_ind+0x44>
10014324:	2214      	movs	r2, #20
10014326:	481e      	ldr	r0, [pc, #120]	; (100143a0 <gapc_bond_req_ind+0xcc>)
10014328:	0a1b      	lsrs	r3, r3, #8
1001432a:	70c3      	strb	r3, [r0, #3]
1001432c:	4b1d      	ldr	r3, [pc, #116]	; (100143a4 <gapc_bond_req_ind+0xd0>)
1001432e:	7002      	strb	r2, [r0, #0]
10014330:	3a06      	subs	r2, #6
10014332:	7042      	strb	r2, [r0, #1]
10014334:	7082      	strb	r2, [r0, #2]
10014336:	881a      	ldrh	r2, [r3, #0]
10014338:	881b      	ldrh	r3, [r3, #0]
1001433a:	4e1b      	ldr	r6, [pc, #108]	; (100143a8 <gapc_bond_req_ind+0xd4>)
1001433c:	0a1b      	lsrs	r3, r3, #8
1001433e:	7143      	strb	r3, [r0, #5]
10014340:	2301      	movs	r3, #1
10014342:	7102      	strb	r2, [r0, #4]
10014344:	7204      	strb	r4, [r0, #8]
10014346:	7243      	strb	r3, [r0, #9]
10014348:	1c05      	adds	r5, r0, #0
1001434a:	1c31      	adds	r1, r6, #0
1001434c:	300a      	adds	r0, #10
1001434e:	2c07      	cmp	r4, #7
10014350:	d116      	bne.n	10014380 <gapc_bond_req_ind+0xac>
10014352:	317e      	adds	r1, #126	; 0x7e
10014354:	2210      	movs	r2, #16
10014356:	4c15      	ldr	r4, [pc, #84]	; (100143ac <gapc_bond_req_ind+0xd8>)
10014358:	47a0      	blx	r4
1001435a:	1c33      	adds	r3, r6, #0
1001435c:	1c31      	adds	r1, r6, #0
1001435e:	1c28      	adds	r0, r5, #0
10014360:	338e      	adds	r3, #142	; 0x8e
10014362:	881b      	ldrh	r3, [r3, #0]
10014364:	3190      	adds	r1, #144	; 0x90
10014366:	76ab      	strb	r3, [r5, #26]
10014368:	2208      	movs	r2, #8
1001436a:	0a1b      	lsrs	r3, r3, #8
1001436c:	301c      	adds	r0, #28
1001436e:	76eb      	strb	r3, [r5, #27]
10014370:	47a0      	blx	r4
10014372:	1c31      	adds	r1, r6, #0
10014374:	3198      	adds	r1, #152	; 0x98
10014376:	780a      	ldrb	r2, [r1, #0]
10014378:	1d6b      	adds	r3, r5, #5
1001437a:	77da      	strb	r2, [r3, #31]
1001437c:	2125      	movs	r1, #37	; 0x25
1001437e:	e004      	b.n	1001438a <gapc_bond_req_ind+0xb6>
10014380:	319a      	adds	r1, #154	; 0x9a
10014382:	2210      	movs	r2, #16
10014384:	4b09      	ldr	r3, [pc, #36]	; (100143ac <gapc_bond_req_ind+0xd8>)
10014386:	4798      	blx	r3
10014388:	211a      	movs	r1, #26
1001438a:	1c0b      	adds	r3, r1, #0
1001438c:	2400      	movs	r4, #0
1001438e:	3b08      	subs	r3, #8
10014390:	71ab      	strb	r3, [r5, #6]
10014392:	1c28      	adds	r0, r5, #0
10014394:	4b06      	ldr	r3, [pc, #24]	; (100143b0 <gapc_bond_req_ind+0xdc>)
10014396:	71ec      	strb	r4, [r5, #7]
10014398:	4798      	blx	r3
1001439a:	2000      	movs	r0, #0
1001439c:	bd70      	pop	{r4, r5, r6, pc}
1001439e:	46c0      	nop			; (mov r8, r8)
100143a0:	1001b454 	.word	0x1001b454
100143a4:	1001b0e4 	.word	0x1001b0e4
100143a8:	1001b176 	.word	0x1001b176
100143ac:	10017317 	.word	0x10017317
100143b0:	10013c7d 	.word	0x10013c7d

100143b4 <gapc_bond_cfm_handler_pair_resp>:
100143b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100143b6:	b085      	sub	sp, #20
100143b8:	1c07      	adds	r7, r0, #0
100143ba:	a80a      	add	r0, sp, #40	; 0x28
100143bc:	7806      	ldrb	r6, [r0, #0]
100143be:	a80b      	add	r0, sp, #44	; 0x2c
100143c0:	7805      	ldrb	r5, [r0, #0]
100143c2:	a80c      	add	r0, sp, #48	; 0x30
100143c4:	7800      	ldrb	r0, [r0, #0]
100143c6:	2414      	movs	r4, #20
100143c8:	9002      	str	r0, [sp, #8]
100143ca:	a80d      	add	r0, sp, #52	; 0x34
100143cc:	7800      	ldrb	r0, [r0, #0]
100143ce:	9301      	str	r3, [sp, #4]
100143d0:	9003      	str	r0, [sp, #12]
100143d2:	a80e      	add	r0, sp, #56	; 0x38
100143d4:	8800      	ldrh	r0, [r0, #0]
100143d6:	4684      	mov	ip, r0
100143d8:	4812      	ldr	r0, [pc, #72]	; (10014424 <gapc_bond_cfm_handler_pair_resp+0x70>)
100143da:	7004      	strb	r4, [r0, #0]
100143dc:	3c06      	subs	r4, #6
100143de:	7044      	strb	r4, [r0, #1]
100143e0:	7084      	strb	r4, [r0, #2]
100143e2:	4664      	mov	r4, ip
100143e4:	70c4      	strb	r4, [r0, #3]
100143e6:	4c10      	ldr	r4, [pc, #64]	; (10014428 <gapc_bond_cfm_handler_pair_resp+0x74>)
100143e8:	7247      	strb	r7, [r0, #9]
100143ea:	8823      	ldrh	r3, [r4, #0]
100143ec:	8824      	ldrh	r4, [r4, #0]
100143ee:	7103      	strb	r3, [r0, #4]
100143f0:	466b      	mov	r3, sp
100143f2:	791b      	ldrb	r3, [r3, #4]
100143f4:	0a24      	lsrs	r4, r4, #8
100143f6:	7303      	strb	r3, [r0, #12]
100143f8:	466b      	mov	r3, sp
100143fa:	7a1b      	ldrb	r3, [r3, #8]
100143fc:	7144      	strb	r4, [r0, #5]
100143fe:	73c3      	strb	r3, [r0, #15]
10014400:	466b      	mov	r3, sp
10014402:	7b1b      	ldrb	r3, [r3, #12]
10014404:	2401      	movs	r4, #1
10014406:	7403      	strb	r3, [r0, #16]
10014408:	2309      	movs	r3, #9
1001440a:	7183      	strb	r3, [r0, #6]
1001440c:	2300      	movs	r3, #0
1001440e:	7204      	strb	r4, [r0, #8]
10014410:	7281      	strb	r1, [r0, #10]
10014412:	72c2      	strb	r2, [r0, #11]
10014414:	7346      	strb	r6, [r0, #13]
10014416:	7385      	strb	r5, [r0, #14]
10014418:	71c3      	strb	r3, [r0, #7]
1001441a:	2111      	movs	r1, #17
1001441c:	4b03      	ldr	r3, [pc, #12]	; (1001442c <gapc_bond_cfm_handler_pair_resp+0x78>)
1001441e:	4798      	blx	r3
10014420:	b005      	add	sp, #20
10014422:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014424:	1001b454 	.word	0x1001b454
10014428:	1001b0e4 	.word	0x1001b0e4
1001442c:	10013c7d 	.word	0x10013c7d

10014430 <gapc_bond_cfm_handler_key_exch>:
10014430:	b538      	push	{r3, r4, r5, lr}
10014432:	2514      	movs	r5, #20
10014434:	4c0d      	ldr	r4, [pc, #52]	; (1001446c <gapc_bond_cfm_handler_key_exch+0x3c>)
10014436:	70e3      	strb	r3, [r4, #3]
10014438:	4b0d      	ldr	r3, [pc, #52]	; (10014470 <gapc_bond_cfm_handler_key_exch+0x40>)
1001443a:	7025      	strb	r5, [r4, #0]
1001443c:	3d06      	subs	r5, #6
1001443e:	7065      	strb	r5, [r4, #1]
10014440:	70a5      	strb	r5, [r4, #2]
10014442:	881d      	ldrh	r5, [r3, #0]
10014444:	881b      	ldrh	r3, [r3, #0]
10014446:	7220      	strb	r0, [r4, #8]
10014448:	0a1b      	lsrs	r3, r3, #8
1001444a:	7163      	strb	r3, [r4, #5]
1001444c:	7261      	strb	r1, [r4, #9]
1001444e:	4b09      	ldr	r3, [pc, #36]	; (10014474 <gapc_bond_cfm_handler_key_exch+0x44>)
10014450:	1c11      	adds	r1, r2, #0
10014452:	4809      	ldr	r0, [pc, #36]	; (10014478 <gapc_bond_cfm_handler_key_exch+0x48>)
10014454:	2210      	movs	r2, #16
10014456:	7125      	strb	r5, [r4, #4]
10014458:	4798      	blx	r3
1001445a:	2312      	movs	r3, #18
1001445c:	71a3      	strb	r3, [r4, #6]
1001445e:	2300      	movs	r3, #0
10014460:	1c20      	adds	r0, r4, #0
10014462:	71e3      	strb	r3, [r4, #7]
10014464:	211a      	movs	r1, #26
10014466:	4b05      	ldr	r3, [pc, #20]	; (1001447c <gapc_bond_cfm_handler_key_exch+0x4c>)
10014468:	4798      	blx	r3
1001446a:	bd38      	pop	{r3, r4, r5, pc}
1001446c:	1001b454 	.word	0x1001b454
10014470:	1001b0e4 	.word	0x1001b0e4
10014474:	10017317 	.word	0x10017317
10014478:	1001b45e 	.word	0x1001b45e
1001447c:	10013c7d 	.word	0x10013c7d

10014480 <gapc_security_cmd_handler>:
10014480:	221a      	movs	r2, #26
10014482:	b508      	push	{r3, lr}
10014484:	4b0b      	ldr	r3, [pc, #44]	; (100144b4 <gapc_security_cmd_handler+0x34>)
10014486:	701a      	strb	r2, [r3, #0]
10014488:	3a0c      	subs	r2, #12
1001448a:	705a      	strb	r2, [r3, #1]
1001448c:	709a      	strb	r2, [r3, #2]
1001448e:	4a0a      	ldr	r2, [pc, #40]	; (100144b8 <gapc_security_cmd_handler+0x38>)
10014490:	70d8      	strb	r0, [r3, #3]
10014492:	8810      	ldrh	r0, [r2, #0]
10014494:	8812      	ldrh	r2, [r2, #0]
10014496:	7118      	strb	r0, [r3, #4]
10014498:	0a12      	lsrs	r2, r2, #8
1001449a:	715a      	strb	r2, [r3, #5]
1001449c:	220c      	movs	r2, #12
1001449e:	721a      	strb	r2, [r3, #8]
100144a0:	3a0a      	subs	r2, #10
100144a2:	719a      	strb	r2, [r3, #6]
100144a4:	2200      	movs	r2, #0
100144a6:	7259      	strb	r1, [r3, #9]
100144a8:	71da      	strb	r2, [r3, #7]
100144aa:	1c18      	adds	r0, r3, #0
100144ac:	210a      	movs	r1, #10
100144ae:	4b03      	ldr	r3, [pc, #12]	; (100144bc <gapc_security_cmd_handler+0x3c>)
100144b0:	4798      	blx	r3
100144b2:	bd08      	pop	{r3, pc}
100144b4:	1001b454 	.word	0x1001b454
100144b8:	1001b0e4 	.word	0x1001b0e4
100144bc:	10013c7d 	.word	0x10013c7d

100144c0 <gapc_encrypt_cmd_handler>:
100144c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100144c2:	2500      	movs	r5, #0
100144c4:	b089      	sub	sp, #36	; 0x24
100144c6:	9306      	str	r3, [sp, #24]
100144c8:	ab0e      	add	r3, sp, #56	; 0x38
100144ca:	781b      	ldrb	r3, [r3, #0]
100144cc:	1c17      	adds	r7, r2, #0
100144ce:	9307      	str	r3, [sp, #28]
100144d0:	ab0f      	add	r3, sp, #60	; 0x3c
100144d2:	781b      	ldrb	r3, [r3, #0]
100144d4:	4a19      	ldr	r2, [pc, #100]	; (1001453c <gapc_encrypt_cmd_handler+0x7c>)
100144d6:	1c06      	adds	r6, r0, #0
100144d8:	9105      	str	r1, [sp, #20]
100144da:	9300      	str	r3, [sp, #0]
100144dc:	9002      	str	r0, [sp, #8]
100144de:	1c29      	adds	r1, r5, #0
100144e0:	1c2b      	adds	r3, r5, #0
100144e2:	9501      	str	r5, [sp, #4]
100144e4:	1c10      	adds	r0, r2, #0
100144e6:	4c16      	ldr	r4, [pc, #88]	; (10014540 <gapc_encrypt_cmd_handler+0x80>)
100144e8:	47a0      	blx	r4
100144ea:	2316      	movs	r3, #22
100144ec:	4c15      	ldr	r4, [pc, #84]	; (10014544 <gapc_encrypt_cmd_handler+0x84>)
100144ee:	9905      	ldr	r1, [sp, #20]
100144f0:	7023      	strb	r3, [r4, #0]
100144f2:	3b08      	subs	r3, #8
100144f4:	7063      	strb	r3, [r4, #1]
100144f6:	70a3      	strb	r3, [r4, #2]
100144f8:	4b13      	ldr	r3, [pc, #76]	; (10014548 <gapc_encrypt_cmd_handler+0x88>)
100144fa:	70e6      	strb	r6, [r4, #3]
100144fc:	881a      	ldrh	r2, [r3, #0]
100144fe:	881b      	ldrh	r3, [r3, #0]
10014500:	7122      	strb	r2, [r4, #4]
10014502:	0a1b      	lsrs	r3, r3, #8
10014504:	7163      	strb	r3, [r4, #5]
10014506:	230b      	movs	r3, #11
10014508:	4e10      	ldr	r6, [pc, #64]	; (1001454c <gapc_encrypt_cmd_handler+0x8c>)
1001450a:	2210      	movs	r2, #16
1001450c:	4810      	ldr	r0, [pc, #64]	; (10014550 <gapc_encrypt_cmd_handler+0x90>)
1001450e:	7223      	strb	r3, [r4, #8]
10014510:	7265      	strb	r5, [r4, #9]
10014512:	47b0      	blx	r6
10014514:	0a3b      	lsrs	r3, r7, #8
10014516:	9906      	ldr	r1, [sp, #24]
10014518:	2208      	movs	r2, #8
1001451a:	480e      	ldr	r0, [pc, #56]	; (10014554 <gapc_encrypt_cmd_handler+0x94>)
1001451c:	76e3      	strb	r3, [r4, #27]
1001451e:	76a7      	strb	r7, [r4, #26]
10014520:	47b0      	blx	r6
10014522:	466a      	mov	r2, sp
10014524:	7f12      	ldrb	r2, [r2, #28]
10014526:	1d63      	adds	r3, r4, #5
10014528:	77da      	strb	r2, [r3, #31]
1001452a:	231d      	movs	r3, #29
1001452c:	1c20      	adds	r0, r4, #0
1001452e:	71a3      	strb	r3, [r4, #6]
10014530:	2125      	movs	r1, #37	; 0x25
10014532:	4b09      	ldr	r3, [pc, #36]	; (10014558 <gapc_encrypt_cmd_handler+0x98>)
10014534:	71e5      	strb	r5, [r4, #7]
10014536:	4798      	blx	r3
10014538:	b009      	add	sp, #36	; 0x24
1001453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001453c:	1001a1f8 	.word	0x1001a1f8
10014540:	10013f79 	.word	0x10013f79
10014544:	1001b454 	.word	0x1001b454
10014548:	1001b0e4 	.word	0x1001b0e4
1001454c:	10017317 	.word	0x10017317
10014550:	1001b45e 	.word	0x1001b45e
10014554:	1001b470 	.word	0x1001b470
10014558:	10013c7d 	.word	0x10013c7d

1001455c <gapc_encrypt_req_ind>:
1001455c:	b508      	push	{r3, lr}
1001455e:	0a00      	lsrs	r0, r0, #8
10014560:	8010      	strh	r0, [r2, #0]
10014562:	784b      	ldrb	r3, [r1, #1]
10014564:	7808      	ldrb	r0, [r1, #0]
10014566:	021b      	lsls	r3, r3, #8
10014568:	4303      	orrs	r3, r0
1001456a:	8053      	strh	r3, [r2, #2]
1001456c:	1d10      	adds	r0, r2, #4
1001456e:	3102      	adds	r1, #2
10014570:	2208      	movs	r2, #8
10014572:	4b01      	ldr	r3, [pc, #4]	; (10014578 <gapc_encrypt_req_ind+0x1c>)
10014574:	4798      	blx	r3
10014576:	bd08      	pop	{r3, pc}
10014578:	10017317 	.word	0x10017317

1001457c <gapc_encrypt_cfm_handler>:
1001457c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001457e:	2500      	movs	r5, #0
10014580:	b087      	sub	sp, #28
10014582:	9304      	str	r3, [sp, #16]
10014584:	ab0c      	add	r3, sp, #48	; 0x30
10014586:	781b      	ldrb	r3, [r3, #0]
10014588:	1c17      	adds	r7, r2, #0
1001458a:	4a15      	ldr	r2, [pc, #84]	; (100145e0 <gapc_encrypt_cfm_handler+0x64>)
1001458c:	1c06      	adds	r6, r0, #0
1001458e:	9305      	str	r3, [sp, #20]
10014590:	9100      	str	r1, [sp, #0]
10014592:	9002      	str	r0, [sp, #8]
10014594:	1c29      	adds	r1, r5, #0
10014596:	1c2b      	adds	r3, r5, #0
10014598:	9501      	str	r5, [sp, #4]
1001459a:	1c10      	adds	r0, r2, #0
1001459c:	4c11      	ldr	r4, [pc, #68]	; (100145e4 <gapc_encrypt_cfm_handler+0x68>)
1001459e:	47a0      	blx	r4
100145a0:	2318      	movs	r3, #24
100145a2:	4c11      	ldr	r4, [pc, #68]	; (100145e8 <gapc_encrypt_cfm_handler+0x6c>)
100145a4:	9904      	ldr	r1, [sp, #16]
100145a6:	7023      	strb	r3, [r4, #0]
100145a8:	3b0a      	subs	r3, #10
100145aa:	7063      	strb	r3, [r4, #1]
100145ac:	70a3      	strb	r3, [r4, #2]
100145ae:	4b0f      	ldr	r3, [pc, #60]	; (100145ec <gapc_encrypt_cfm_handler+0x70>)
100145b0:	480f      	ldr	r0, [pc, #60]	; (100145f0 <gapc_encrypt_cfm_handler+0x74>)
100145b2:	881a      	ldrh	r2, [r3, #0]
100145b4:	881b      	ldrh	r3, [r3, #0]
100145b6:	7122      	strb	r2, [r4, #4]
100145b8:	0a1b      	lsrs	r3, r3, #8
100145ba:	7163      	strb	r3, [r4, #5]
100145bc:	2210      	movs	r2, #16
100145be:	4b0d      	ldr	r3, [pc, #52]	; (100145f4 <gapc_encrypt_cfm_handler+0x78>)
100145c0:	70e6      	strb	r6, [r4, #3]
100145c2:	7227      	strb	r7, [r4, #8]
100145c4:	4798      	blx	r3
100145c6:	466b      	mov	r3, sp
100145c8:	7d1b      	ldrb	r3, [r3, #20]
100145ca:	1c20      	adds	r0, r4, #0
100145cc:	7663      	strb	r3, [r4, #25]
100145ce:	2312      	movs	r3, #18
100145d0:	211a      	movs	r1, #26
100145d2:	71a3      	strb	r3, [r4, #6]
100145d4:	4b08      	ldr	r3, [pc, #32]	; (100145f8 <gapc_encrypt_cfm_handler+0x7c>)
100145d6:	71e5      	strb	r5, [r4, #7]
100145d8:	4798      	blx	r3
100145da:	b007      	add	sp, #28
100145dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100145de:	46c0      	nop			; (mov r8, r8)
100145e0:	1001a208 	.word	0x1001a208
100145e4:	10013f79 	.word	0x10013f79
100145e8:	1001b454 	.word	0x1001b454
100145ec:	1001b0e4 	.word	0x1001b0e4
100145f0:	1001b45d 	.word	0x1001b45d
100145f4:	10017317 	.word	0x10017317
100145f8:	10013c7d 	.word	0x10013c7d

100145fc <gapc_encrypt_ind>:
100145fc:	780b      	ldrb	r3, [r1, #0]
100145fe:	0a00      	lsrs	r0, r0, #8
10014600:	70d3      	strb	r3, [r2, #3]
10014602:	2300      	movs	r3, #0
10014604:	8010      	strh	r0, [r2, #0]
10014606:	7093      	strb	r3, [r2, #2]
10014608:	4770      	bx	lr
	...

1001460c <gapc_param_update_cfm_handler>:
1001460c:	b538      	push	{r3, r4, r5, lr}
1001460e:	2410      	movs	r4, #16
10014610:	1c05      	adds	r5, r0, #0
10014612:	480e      	ldr	r0, [pc, #56]	; (1001464c <gapc_param_update_cfm_handler+0x40>)
10014614:	7004      	strb	r4, [r0, #0]
10014616:	3c02      	subs	r4, #2
10014618:	7044      	strb	r4, [r0, #1]
1001461a:	7084      	strb	r4, [r0, #2]
1001461c:	4c0c      	ldr	r4, [pc, #48]	; (10014650 <gapc_param_update_cfm_handler+0x44>)
1001461e:	70c5      	strb	r5, [r0, #3]
10014620:	8825      	ldrh	r5, [r4, #0]
10014622:	8824      	ldrh	r4, [r4, #0]
10014624:	72c3      	strb	r3, [r0, #11]
10014626:	0a1b      	lsrs	r3, r3, #8
10014628:	0a24      	lsrs	r4, r4, #8
1001462a:	7303      	strb	r3, [r0, #12]
1001462c:	2305      	movs	r3, #5
1001462e:	7144      	strb	r4, [r0, #5]
10014630:	2400      	movs	r4, #0
10014632:	7201      	strb	r1, [r0, #8]
10014634:	7242      	strb	r2, [r0, #9]
10014636:	7183      	strb	r3, [r0, #6]
10014638:	0a12      	lsrs	r2, r2, #8
1001463a:	210d      	movs	r1, #13
1001463c:	4b05      	ldr	r3, [pc, #20]	; (10014654 <gapc_param_update_cfm_handler+0x48>)
1001463e:	7105      	strb	r5, [r0, #4]
10014640:	7282      	strb	r2, [r0, #10]
10014642:	71c4      	strb	r4, [r0, #7]
10014644:	4798      	blx	r3
10014646:	1c20      	adds	r0, r4, #0
10014648:	bd38      	pop	{r3, r4, r5, pc}
1001464a:	46c0      	nop			; (mov r8, r8)
1001464c:	1001b454 	.word	0x1001b454
10014650:	1001b0e4 	.word	0x1001b0e4
10014654:	10013c7d 	.word	0x10013c7d

10014658 <gapc_param_updated_ind>:
10014658:	2300      	movs	r3, #0
1001465a:	0a00      	lsrs	r0, r0, #8
1001465c:	8010      	strh	r0, [r2, #0]
1001465e:	7093      	strb	r3, [r2, #2]
10014660:	784b      	ldrb	r3, [r1, #1]
10014662:	7808      	ldrb	r0, [r1, #0]
10014664:	021b      	lsls	r3, r3, #8
10014666:	4303      	orrs	r3, r0
10014668:	8093      	strh	r3, [r2, #4]
1001466a:	78cb      	ldrb	r3, [r1, #3]
1001466c:	7888      	ldrb	r0, [r1, #2]
1001466e:	021b      	lsls	r3, r3, #8
10014670:	4303      	orrs	r3, r0
10014672:	80d3      	strh	r3, [r2, #6]
10014674:	794b      	ldrb	r3, [r1, #5]
10014676:	7909      	ldrb	r1, [r1, #4]
10014678:	021b      	lsls	r3, r3, #8
1001467a:	430b      	orrs	r3, r1
1001467c:	2007      	movs	r0, #7
1001467e:	8113      	strh	r3, [r2, #8]
10014680:	4770      	bx	lr

10014682 <gapc_param_updated_req_ind>:
10014682:	0a00      	lsrs	r0, r0, #8
10014684:	8010      	strh	r0, [r2, #0]
10014686:	784b      	ldrb	r3, [r1, #1]
10014688:	7808      	ldrb	r0, [r1, #0]
1001468a:	021b      	lsls	r3, r3, #8
1001468c:	4303      	orrs	r3, r0
1001468e:	8053      	strh	r3, [r2, #2]
10014690:	78cb      	ldrb	r3, [r1, #3]
10014692:	7888      	ldrb	r0, [r1, #2]
10014694:	021b      	lsls	r3, r3, #8
10014696:	4303      	orrs	r3, r0
10014698:	8093      	strh	r3, [r2, #4]
1001469a:	794b      	ldrb	r3, [r1, #5]
1001469c:	7908      	ldrb	r0, [r1, #4]
1001469e:	021b      	lsls	r3, r3, #8
100146a0:	4303      	orrs	r3, r0
100146a2:	80d3      	strh	r3, [r2, #6]
100146a4:	79cb      	ldrb	r3, [r1, #7]
100146a6:	7989      	ldrb	r1, [r1, #6]
100146a8:	021b      	lsls	r3, r3, #8
100146aa:	430b      	orrs	r3, r1
100146ac:	2008      	movs	r0, #8
100146ae:	8113      	strh	r3, [r2, #8]
100146b0:	4770      	bx	lr
	...

100146b4 <gapc_dev_info_req_ind_handler>:
100146b4:	b508      	push	{r3, lr}
100146b6:	1c0b      	adds	r3, r1, #0
100146b8:	0a01      	lsrs	r1, r0, #8
100146ba:	8011      	strh	r1, [r2, #0]
100146bc:	7818      	ldrb	r0, [r3, #0]
100146be:	7090      	strb	r0, [r2, #2]
100146c0:	2800      	cmp	r0, #0
100146c2:	d104      	bne.n	100146ce <gapc_dev_info_req_ind_handler+0x1a>
100146c4:	4b03      	ldr	r3, [pc, #12]	; (100146d4 <gapc_dev_info_req_ind_handler+0x20>)
100146c6:	33aa      	adds	r3, #170	; 0xaa
100146c8:	881b      	ldrh	r3, [r3, #0]
100146ca:	2b00      	cmp	r3, #0
100146cc:	d001      	beq.n	100146d2 <gapc_dev_info_req_ind_handler+0x1e>
100146ce:	4b02      	ldr	r3, [pc, #8]	; (100146d8 <gapc_dev_info_req_ind_handler+0x24>)
100146d0:	4798      	blx	r3
100146d2:	bd08      	pop	{r3, pc}
100146d4:	1001b176 	.word	0x1001b176
100146d8:	10013d85 	.word	0x10013d85

100146dc <gapc_sec_req_ind>:
100146dc:	0a00      	lsrs	r0, r0, #8
100146de:	8010      	strh	r0, [r2, #0]
100146e0:	7809      	ldrb	r1, [r1, #0]
100146e2:	2301      	movs	r3, #1
100146e4:	1c08      	adds	r0, r1, #0
100146e6:	0889      	lsrs	r1, r1, #2
100146e8:	4018      	ands	r0, r3
100146ea:	400b      	ands	r3, r1
100146ec:	70d0      	strb	r0, [r2, #3]
100146ee:	7113      	strb	r3, [r2, #4]
100146f0:	4770      	bx	lr

100146f2 <gapc_sign_counter_ind_handler>:
100146f2:	0a00      	lsrs	r0, r0, #8
100146f4:	8010      	strh	r0, [r2, #0]
100146f6:	784b      	ldrb	r3, [r1, #1]
100146f8:	0218      	lsls	r0, r3, #8
100146fa:	788b      	ldrb	r3, [r1, #2]
100146fc:	041b      	lsls	r3, r3, #16
100146fe:	4303      	orrs	r3, r0
10014700:	7808      	ldrb	r0, [r1, #0]
10014702:	4303      	orrs	r3, r0
10014704:	78c8      	ldrb	r0, [r1, #3]
10014706:	0600      	lsls	r0, r0, #24
10014708:	4303      	orrs	r3, r0
1001470a:	6053      	str	r3, [r2, #4]
1001470c:	794b      	ldrb	r3, [r1, #5]
1001470e:	0218      	lsls	r0, r3, #8
10014710:	798b      	ldrb	r3, [r1, #6]
10014712:	041b      	lsls	r3, r3, #16
10014714:	4303      	orrs	r3, r0
10014716:	7908      	ldrb	r0, [r1, #4]
10014718:	79c9      	ldrb	r1, [r1, #7]
1001471a:	4303      	orrs	r3, r0
1001471c:	0609      	lsls	r1, r1, #24
1001471e:	430b      	orrs	r3, r1
10014720:	2000      	movs	r0, #0
10014722:	6093      	str	r3, [r2, #8]
10014724:	4770      	bx	lr
	...

10014728 <gapc_peer_att_info_ind_handler>:
10014728:	b510      	push	{r4, lr}
1001472a:	0a00      	lsrs	r0, r0, #8
1001472c:	8010      	strh	r0, [r2, #0]
1001472e:	7808      	ldrb	r0, [r1, #0]
10014730:	7090      	strb	r0, [r2, #2]
10014732:	788b      	ldrb	r3, [r1, #2]
10014734:	784c      	ldrb	r4, [r1, #1]
10014736:	021b      	lsls	r3, r3, #8
10014738:	4323      	orrs	r3, r4
1001473a:	8093      	strh	r3, [r2, #4]
1001473c:	2801      	cmp	r0, #1
1001473e:	d027      	beq.n	10014790 <gapc_peer_att_info_ind_handler+0x68>
10014740:	2800      	cmp	r0, #0
10014742:	d017      	beq.n	10014774 <gapc_peer_att_info_ind_handler+0x4c>
10014744:	2802      	cmp	r0, #2
10014746:	d12a      	bne.n	1001479e <gapc_peer_att_info_ind_handler+0x76>
10014748:	790b      	ldrb	r3, [r1, #4]
1001474a:	78c8      	ldrb	r0, [r1, #3]
1001474c:	021b      	lsls	r3, r3, #8
1001474e:	4303      	orrs	r3, r0
10014750:	8113      	strh	r3, [r2, #8]
10014752:	798b      	ldrb	r3, [r1, #6]
10014754:	7948      	ldrb	r0, [r1, #5]
10014756:	021b      	lsls	r3, r3, #8
10014758:	4303      	orrs	r3, r0
1001475a:	80d3      	strh	r3, [r2, #6]
1001475c:	7a0b      	ldrb	r3, [r1, #8]
1001475e:	79c8      	ldrb	r0, [r1, #7]
10014760:	021b      	lsls	r3, r3, #8
10014762:	4303      	orrs	r3, r0
10014764:	8193      	strh	r3, [r2, #12]
10014766:	7a8b      	ldrb	r3, [r1, #10]
10014768:	7a49      	ldrb	r1, [r1, #9]
1001476a:	021b      	lsls	r3, r3, #8
1001476c:	430b      	orrs	r3, r1
1001476e:	8153      	strh	r3, [r2, #10]
10014770:	2306      	movs	r3, #6
10014772:	e013      	b.n	1001479c <gapc_peer_att_info_ind_handler+0x74>
10014774:	1c14      	adds	r4, r2, #0
10014776:	1c20      	adds	r0, r4, #0
10014778:	790a      	ldrb	r2, [r1, #4]
1001477a:	78cb      	ldrb	r3, [r1, #3]
1001477c:	0212      	lsls	r2, r2, #8
1001477e:	431a      	orrs	r2, r3
10014780:	80e2      	strh	r2, [r4, #6]
10014782:	4b07      	ldr	r3, [pc, #28]	; (100147a0 <gapc_peer_att_info_ind_handler+0x78>)
10014784:	3008      	adds	r0, #8
10014786:	3105      	adds	r1, #5
10014788:	4798      	blx	r3
1001478a:	2302      	movs	r3, #2
1001478c:	70a3      	strb	r3, [r4, #2]
1001478e:	e006      	b.n	1001479e <gapc_peer_att_info_ind_handler+0x76>
10014790:	790b      	ldrb	r3, [r1, #4]
10014792:	78c9      	ldrb	r1, [r1, #3]
10014794:	021b      	lsls	r3, r3, #8
10014796:	430b      	orrs	r3, r1
10014798:	80d3      	strh	r3, [r2, #6]
1001479a:	2305      	movs	r3, #5
1001479c:	7093      	strb	r3, [r2, #2]
1001479e:	bd10      	pop	{r4, pc}
100147a0:	10017317 	.word	0x10017317

100147a4 <gapc_con_channel_map_ind_handler>:
100147a4:	b508      	push	{r3, lr}
100147a6:	2300      	movs	r3, #0
100147a8:	0a00      	lsrs	r0, r0, #8
100147aa:	7013      	strb	r3, [r2, #0]
100147ac:	8050      	strh	r0, [r2, #2]
100147ae:	4b02      	ldr	r3, [pc, #8]	; (100147b8 <gapc_con_channel_map_ind_handler+0x14>)
100147b0:	1d10      	adds	r0, r2, #4
100147b2:	2205      	movs	r2, #5
100147b4:	4798      	blx	r3
100147b6:	bd08      	pop	{r3, pc}
100147b8:	10017317 	.word	0x10017317

100147bc <gapc_lecb_connected>:
100147bc:	7843      	ldrb	r3, [r0, #1]
100147be:	7802      	ldrb	r2, [r0, #0]
100147c0:	021b      	lsls	r3, r3, #8
100147c2:	4313      	orrs	r3, r2
100147c4:	800b      	strh	r3, [r1, #0]
100147c6:	78c3      	ldrb	r3, [r0, #3]
100147c8:	7882      	ldrb	r2, [r0, #2]
100147ca:	021b      	lsls	r3, r3, #8
100147cc:	4313      	orrs	r3, r2
100147ce:	804b      	strh	r3, [r1, #2]
100147d0:	7943      	ldrb	r3, [r0, #5]
100147d2:	7902      	ldrb	r2, [r0, #4]
100147d4:	021b      	lsls	r3, r3, #8
100147d6:	4313      	orrs	r3, r2
100147d8:	808b      	strh	r3, [r1, #4]
100147da:	79c3      	ldrb	r3, [r0, #7]
100147dc:	7982      	ldrb	r2, [r0, #6]
100147de:	021b      	lsls	r3, r3, #8
100147e0:	4313      	orrs	r3, r2
100147e2:	80cb      	strh	r3, [r1, #6]
100147e4:	2300      	movs	r3, #0
100147e6:	720b      	strb	r3, [r1, #8]
100147e8:	4770      	bx	lr

100147ea <gapc_lecb_disconnected>:
100147ea:	7843      	ldrb	r3, [r0, #1]
100147ec:	7802      	ldrb	r2, [r0, #0]
100147ee:	021b      	lsls	r3, r3, #8
100147f0:	4313      	orrs	r3, r2
100147f2:	800b      	strh	r3, [r1, #0]
100147f4:	78c3      	ldrb	r3, [r0, #3]
100147f6:	7882      	ldrb	r2, [r0, #2]
100147f8:	021b      	lsls	r3, r3, #8
100147fa:	4313      	orrs	r3, r2
100147fc:	804b      	strh	r3, [r1, #2]
100147fe:	4770      	bx	lr

10014800 <gapc_lecb_connect_req_ind>:
10014800:	7843      	ldrb	r3, [r0, #1]
10014802:	7802      	ldrb	r2, [r0, #0]
10014804:	021b      	lsls	r3, r3, #8
10014806:	4313      	orrs	r3, r2
10014808:	800b      	strh	r3, [r1, #0]
1001480a:	78c3      	ldrb	r3, [r0, #3]
1001480c:	7882      	ldrb	r2, [r0, #2]
1001480e:	021b      	lsls	r3, r3, #8
10014810:	4313      	orrs	r3, r2
10014812:	804b      	strh	r3, [r1, #2]
10014814:	7943      	ldrb	r3, [r0, #5]
10014816:	7902      	ldrb	r2, [r0, #4]
10014818:	021b      	lsls	r3, r3, #8
1001481a:	4313      	orrs	r3, r2
1001481c:	808b      	strh	r3, [r1, #4]
1001481e:	79c3      	ldrb	r3, [r0, #7]
10014820:	7982      	ldrb	r2, [r0, #6]
10014822:	021b      	lsls	r3, r3, #8
10014824:	4313      	orrs	r3, r2
10014826:	80cb      	strh	r3, [r1, #6]
10014828:	4770      	bx	lr

1001482a <gapc_lecb_add_credit_resp_handler>:
1001482a:	7843      	ldrb	r3, [r0, #1]
1001482c:	7802      	ldrb	r2, [r0, #0]
1001482e:	021b      	lsls	r3, r3, #8
10014830:	4313      	orrs	r3, r2
10014832:	800b      	strh	r3, [r1, #0]
10014834:	78c3      	ldrb	r3, [r0, #3]
10014836:	7882      	ldrb	r2, [r0, #2]
10014838:	021b      	lsls	r3, r3, #8
1001483a:	4313      	orrs	r3, r2
1001483c:	804b      	strh	r3, [r1, #2]
1001483e:	7943      	ldrb	r3, [r0, #5]
10014840:	7902      	ldrb	r2, [r0, #4]
10014842:	021b      	lsls	r3, r3, #8
10014844:	4313      	orrs	r3, r2
10014846:	808b      	strh	r3, [r1, #4]
10014848:	4770      	bx	lr
	...

1001484c <gapm_reset_req_handler>:
1001484c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001484e:	466b      	mov	r3, sp
10014850:	4915      	ldr	r1, [pc, #84]	; (100148a8 <gapm_reset_req_handler+0x5c>)
10014852:	4816      	ldr	r0, [pc, #88]	; (100148ac <gapm_reset_req_handler+0x60>)
10014854:	880c      	ldrh	r4, [r1, #0]
10014856:	8809      	ldrh	r1, [r1, #0]
10014858:	1ddd      	adds	r5, r3, #7
1001485a:	0a09      	lsrs	r1, r1, #8
1001485c:	2300      	movs	r3, #0
1001485e:	2202      	movs	r2, #2
10014860:	7141      	strb	r1, [r0, #5]
10014862:	26d0      	movs	r6, #208	; 0xd0
10014864:	2101      	movs	r1, #1
10014866:	7104      	strb	r4, [r0, #4]
10014868:	4c11      	ldr	r4, [pc, #68]	; (100148b0 <gapm_reset_req_handler+0x64>)
1001486a:	702b      	strb	r3, [r5, #0]
1001486c:	7002      	strb	r2, [r0, #0]
1001486e:	70c3      	strb	r3, [r0, #3]
10014870:	320b      	adds	r2, #11
10014872:	7201      	strb	r1, [r0, #8]
10014874:	7181      	strb	r1, [r0, #6]
10014876:	71c3      	strb	r3, [r0, #7]
10014878:	3108      	adds	r1, #8
1001487a:	4b0e      	ldr	r3, [pc, #56]	; (100148b4 <gapm_reset_req_handler+0x68>)
1001487c:	0136      	lsls	r6, r6, #4
1001487e:	7042      	strb	r2, [r0, #1]
10014880:	7082      	strb	r2, [r0, #2]
10014882:	80a2      	strh	r2, [r4, #4]
10014884:	8026      	strh	r6, [r4, #0]
10014886:	4798      	blx	r3
10014888:	1c28      	adds	r0, r5, #0
1001488a:	4b0b      	ldr	r3, [pc, #44]	; (100148b8 <gapm_reset_req_handler+0x6c>)
1001488c:	4798      	blx	r3
1001488e:	782b      	ldrb	r3, [r5, #0]
10014890:	20e2      	movs	r0, #226	; 0xe2
10014892:	2b00      	cmp	r3, #0
10014894:	d106      	bne.n	100148a4 <gapm_reset_req_handler+0x58>
10014896:	68a3      	ldr	r3, [r4, #8]
10014898:	20e2      	movs	r0, #226	; 0xe2
1001489a:	781a      	ldrb	r2, [r3, #0]
1001489c:	785b      	ldrb	r3, [r3, #1]
1001489e:	2a01      	cmp	r2, #1
100148a0:	d100      	bne.n	100148a4 <gapm_reset_req_handler+0x58>
100148a2:	1c18      	adds	r0, r3, #0
100148a4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100148a6:	46c0      	nop			; (mov r8, r8)
100148a8:	1001b0e4 	.word	0x1001b0e4
100148ac:	1001b454 	.word	0x1001b454
100148b0:	1001b0d8 	.word	0x1001b0d8
100148b4:	10013c7d 	.word	0x10013c7d
100148b8:	10013cd9 	.word	0x10013cd9

100148bc <gapm_set_dev_config_cmd_handler>:
100148bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100148be:	b089      	sub	sp, #36	; 0x24
100148c0:	9303      	str	r3, [sp, #12]
100148c2:	ab0e      	add	r3, sp, #56	; 0x38
100148c4:	781b      	ldrb	r3, [r3, #0]
100148c6:	4c37      	ldr	r4, [pc, #220]	; (100149a4 <gapm_set_dev_config_cmd_handler+0xe8>)
100148c8:	9304      	str	r3, [sp, #16]
100148ca:	ab0f      	add	r3, sp, #60	; 0x3c
100148cc:	781b      	ldrb	r3, [r3, #0]
100148ce:	270d      	movs	r7, #13
100148d0:	9305      	str	r3, [sp, #20]
100148d2:	ab10      	add	r3, sp, #64	; 0x40
100148d4:	881b      	ldrh	r3, [r3, #0]
100148d6:	72a1      	strb	r1, [r4, #10]
100148d8:	9300      	str	r3, [sp, #0]
100148da:	ab11      	add	r3, sp, #68	; 0x44
100148dc:	881b      	ldrh	r3, [r3, #0]
100148de:	0a09      	lsrs	r1, r1, #8
100148e0:	9301      	str	r3, [sp, #4]
100148e2:	ab12      	add	r3, sp, #72	; 0x48
100148e4:	881b      	ldrh	r3, [r3, #0]
100148e6:	7260      	strb	r0, [r4, #9]
100148e8:	9302      	str	r3, [sp, #8]
100148ea:	ab06      	add	r3, sp, #24
100148ec:	1dde      	adds	r6, r3, #7
100148ee:	2300      	movs	r3, #0
100148f0:	7033      	strb	r3, [r6, #0]
100148f2:	2304      	movs	r3, #4
100148f4:	7023      	strb	r3, [r4, #0]
100148f6:	2300      	movs	r3, #0
100148f8:	70e3      	strb	r3, [r4, #3]
100148fa:	4b2b      	ldr	r3, [pc, #172]	; (100149a8 <gapm_set_dev_config_cmd_handler+0xec>)
100148fc:	72e1      	strb	r1, [r4, #11]
100148fe:	881d      	ldrh	r5, [r3, #0]
10014900:	881b      	ldrh	r3, [r3, #0]
10014902:	1c11      	adds	r1, r2, #0
10014904:	0a1b      	lsrs	r3, r3, #8
10014906:	7163      	strb	r3, [r4, #5]
10014908:	2303      	movs	r3, #3
1001490a:	7125      	strb	r5, [r4, #4]
1001490c:	2206      	movs	r2, #6
1001490e:	4d27      	ldr	r5, [pc, #156]	; (100149ac <gapm_set_dev_config_cmd_handler+0xf0>)
10014910:	4827      	ldr	r0, [pc, #156]	; (100149b0 <gapm_set_dev_config_cmd_handler+0xf4>)
10014912:	7223      	strb	r3, [r4, #8]
10014914:	7067      	strb	r7, [r4, #1]
10014916:	70a7      	strb	r7, [r4, #2]
10014918:	47a8      	blx	r5
1001491a:	9903      	ldr	r1, [sp, #12]
1001491c:	2210      	movs	r2, #16
1001491e:	4825      	ldr	r0, [pc, #148]	; (100149b4 <gapm_set_dev_config_cmd_handler+0xf8>)
10014920:	47a8      	blx	r5
10014922:	466a      	mov	r2, sp
10014924:	7c12      	ldrb	r2, [r2, #16]
10014926:	1ce3      	adds	r3, r4, #3
10014928:	77da      	strb	r2, [r3, #31]
1001492a:	466a      	mov	r2, sp
1001492c:	7d12      	ldrb	r2, [r2, #20]
1001492e:	1d23      	adds	r3, r4, #4
10014930:	77da      	strb	r2, [r3, #31]
10014932:	466a      	mov	r2, sp
10014934:	7812      	ldrb	r2, [r2, #0]
10014936:	1d63      	adds	r3, r4, #5
10014938:	77da      	strb	r2, [r3, #31]
1001493a:	9b00      	ldr	r3, [sp, #0]
1001493c:	1da2      	adds	r2, r4, #6
1001493e:	0a1b      	lsrs	r3, r3, #8
10014940:	77d3      	strb	r3, [r2, #31]
10014942:	466a      	mov	r2, sp
10014944:	7912      	ldrb	r2, [r2, #4]
10014946:	1de3      	adds	r3, r4, #7
10014948:	77da      	strb	r2, [r3, #31]
1001494a:	1c22      	adds	r2, r4, #0
1001494c:	9b01      	ldr	r3, [sp, #4]
1001494e:	3208      	adds	r2, #8
10014950:	0a1b      	lsrs	r3, r3, #8
10014952:	77d3      	strb	r3, [r2, #31]
10014954:	466a      	mov	r2, sp
10014956:	1c23      	adds	r3, r4, #0
10014958:	7a12      	ldrb	r2, [r2, #8]
1001495a:	3328      	adds	r3, #40	; 0x28
1001495c:	701a      	strb	r2, [r3, #0]
1001495e:	1c22      	adds	r2, r4, #0
10014960:	9b02      	ldr	r3, [sp, #8]
10014962:	3229      	adds	r2, #41	; 0x29
10014964:	0a1b      	lsrs	r3, r3, #8
10014966:	7013      	strb	r3, [r2, #0]
10014968:	23d0      	movs	r3, #208	; 0xd0
1001496a:	4d13      	ldr	r5, [pc, #76]	; (100149b8 <gapm_set_dev_config_cmd_handler+0xfc>)
1001496c:	011b      	lsls	r3, r3, #4
1001496e:	802b      	strh	r3, [r5, #0]
10014970:	2322      	movs	r3, #34	; 0x22
10014972:	71a3      	strb	r3, [r4, #6]
10014974:	2300      	movs	r3, #0
10014976:	212a      	movs	r1, #42	; 0x2a
10014978:	71e3      	strb	r3, [r4, #7]
1001497a:	1c20      	adds	r0, r4, #0
1001497c:	4b0f      	ldr	r3, [pc, #60]	; (100149bc <gapm_set_dev_config_cmd_handler+0x100>)
1001497e:	80af      	strh	r7, [r5, #4]
10014980:	4798      	blx	r3
10014982:	1c30      	adds	r0, r6, #0
10014984:	4b0e      	ldr	r3, [pc, #56]	; (100149c0 <gapm_set_dev_config_cmd_handler+0x104>)
10014986:	4798      	blx	r3
10014988:	7833      	ldrb	r3, [r6, #0]
1001498a:	20e2      	movs	r0, #226	; 0xe2
1001498c:	2b00      	cmp	r3, #0
1001498e:	d106      	bne.n	1001499e <gapm_set_dev_config_cmd_handler+0xe2>
10014990:	68ab      	ldr	r3, [r5, #8]
10014992:	20e2      	movs	r0, #226	; 0xe2
10014994:	781a      	ldrb	r2, [r3, #0]
10014996:	785b      	ldrb	r3, [r3, #1]
10014998:	2a03      	cmp	r2, #3
1001499a:	d100      	bne.n	1001499e <gapm_set_dev_config_cmd_handler+0xe2>
1001499c:	1c18      	adds	r0, r3, #0
1001499e:	b009      	add	sp, #36	; 0x24
100149a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100149a2:	46c0      	nop			; (mov r8, r8)
100149a4:	1001b454 	.word	0x1001b454
100149a8:	1001b0e4 	.word	0x1001b0e4
100149ac:	10017317 	.word	0x10017317
100149b0:	1001b460 	.word	0x1001b460
100149b4:	1001b466 	.word	0x1001b466
100149b8:	1001b0d8 	.word	0x1001b0d8
100149bc:	10013c7d 	.word	0x10013c7d
100149c0:	10013cd9 	.word	0x10013cd9

100149c4 <gapm_get_dev_config_cmd_handler>:
100149c4:	4684      	mov	ip, r0
100149c6:	4663      	mov	r3, ip
100149c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100149ca:	b085      	sub	sp, #20
100149cc:	9100      	str	r1, [sp, #0]
100149ce:	20cf      	movs	r0, #207	; 0xcf
100149d0:	2b01      	cmp	r3, #1
100149d2:	d854      	bhi.n	10014a7e <gapm_get_dev_config_cmd_handler+0xba>
100149d4:	2900      	cmp	r1, #0
100149d6:	d052      	beq.n	10014a7e <gapm_get_dev_config_cmd_handler+0xba>
100149d8:	2200      	movs	r2, #0
100149da:	492a      	ldr	r1, [pc, #168]	; (10014a84 <gapm_get_dev_config_cmd_handler+0xc0>)
100149dc:	ab02      	add	r3, sp, #8
100149de:	880c      	ldrh	r4, [r1, #0]
100149e0:	8809      	ldrh	r1, [r1, #0]
100149e2:	1d9f      	adds	r7, r3, #6
100149e4:	719a      	strb	r2, [r3, #6]
100149e6:	4b28      	ldr	r3, [pc, #160]	; (10014a88 <gapm_get_dev_config_cmd_handler+0xc4>)
100149e8:	0a09      	lsrs	r1, r1, #8
100149ea:	250d      	movs	r5, #13
100149ec:	2606      	movs	r6, #6
100149ee:	7159      	strb	r1, [r3, #5]
100149f0:	4661      	mov	r1, ip
100149f2:	701e      	strb	r6, [r3, #0]
100149f4:	705d      	strb	r5, [r3, #1]
100149f6:	709d      	strb	r5, [r3, #2]
100149f8:	70da      	strb	r2, [r3, #3]
100149fa:	711c      	strb	r4, [r3, #4]
100149fc:	2901      	cmp	r1, #1
100149fe:	d13e      	bne.n	10014a7e <gapm_get_dev_config_cmd_handler+0xba>
10014a00:	21d0      	movs	r1, #208	; 0xd0
10014a02:	4c22      	ldr	r4, [pc, #136]	; (10014a8c <gapm_get_dev_config_cmd_handler+0xc8>)
10014a04:	0109      	lsls	r1, r1, #4
10014a06:	8061      	strh	r1, [r4, #2]
10014a08:	4921      	ldr	r1, [pc, #132]	; (10014a90 <gapm_get_dev_config_cmd_handler+0xcc>)
10014a0a:	71da      	strb	r2, [r3, #7]
10014a0c:	8021      	strh	r1, [r4, #0]
10014a0e:	4661      	mov	r1, ip
10014a10:	721e      	strb	r6, [r3, #8]
10014a12:	7199      	strb	r1, [r3, #6]
10014a14:	1c18      	adds	r0, r3, #0
10014a16:	2109      	movs	r1, #9
10014a18:	4b1e      	ldr	r3, [pc, #120]	; (10014a94 <gapm_get_dev_config_cmd_handler+0xd0>)
10014a1a:	80a5      	strh	r5, [r4, #4]
10014a1c:	4798      	blx	r3
10014a1e:	1c38      	adds	r0, r7, #0
10014a20:	4b1d      	ldr	r3, [pc, #116]	; (10014a98 <gapm_get_dev_config_cmd_handler+0xd4>)
10014a22:	4798      	blx	r3
10014a24:	783b      	ldrb	r3, [r7, #0]
10014a26:	20e2      	movs	r0, #226	; 0xe2
10014a28:	9301      	str	r3, [sp, #4]
10014a2a:	2b00      	cmp	r3, #0
10014a2c:	d127      	bne.n	10014a7e <gapm_get_dev_config_cmd_handler+0xba>
10014a2e:	8821      	ldrh	r1, [r4, #0]
10014a30:	4a1a      	ldr	r2, [pc, #104]	; (10014a9c <gapm_get_dev_config_cmd_handler+0xd8>)
10014a32:	68a7      	ldr	r7, [r4, #8]
10014a34:	3b01      	subs	r3, #1
10014a36:	4291      	cmp	r1, r2
10014a38:	d001      	beq.n	10014a3e <gapm_get_dev_config_cmd_handler+0x7a>
10014a3a:	8023      	strh	r3, [r4, #0]
10014a3c:	e01a      	b.n	10014a74 <gapm_get_dev_config_cmd_handler+0xb0>
10014a3e:	8063      	strh	r3, [r4, #2]
10014a40:	9b00      	ldr	r3, [sp, #0]
10014a42:	1c39      	adds	r1, r7, #0
10014a44:	1c58      	adds	r0, r3, #1
10014a46:	1c32      	adds	r2, r6, #0
10014a48:	4b15      	ldr	r3, [pc, #84]	; (10014aa0 <gapm_get_dev_config_cmd_handler+0xdc>)
10014a4a:	4798      	blx	r3
10014a4c:	79bb      	ldrb	r3, [r7, #6]
10014a4e:	9a00      	ldr	r2, [sp, #0]
10014a50:	7013      	strb	r3, [r2, #0]
10014a52:	23d0      	movs	r3, #208	; 0xd0
10014a54:	011b      	lsls	r3, r3, #4
10014a56:	8023      	strh	r3, [r4, #0]
10014a58:	ab02      	add	r3, sp, #8
10014a5a:	80a5      	strh	r5, [r4, #4]
10014a5c:	1ddd      	adds	r5, r3, #7
10014a5e:	466b      	mov	r3, sp
10014a60:	791b      	ldrb	r3, [r3, #4]
10014a62:	1c28      	adds	r0, r5, #0
10014a64:	702b      	strb	r3, [r5, #0]
10014a66:	4b0c      	ldr	r3, [pc, #48]	; (10014a98 <gapm_get_dev_config_cmd_handler+0xd4>)
10014a68:	4798      	blx	r3
10014a6a:	782b      	ldrb	r3, [r5, #0]
10014a6c:	20d0      	movs	r0, #208	; 0xd0
10014a6e:	2b00      	cmp	r3, #0
10014a70:	d105      	bne.n	10014a7e <gapm_get_dev_config_cmd_handler+0xba>
10014a72:	68a7      	ldr	r7, [r4, #8]
10014a74:	783b      	ldrb	r3, [r7, #0]
10014a76:	7878      	ldrb	r0, [r7, #1]
10014a78:	2b06      	cmp	r3, #6
10014a7a:	d000      	beq.n	10014a7e <gapm_get_dev_config_cmd_handler+0xba>
10014a7c:	20e2      	movs	r0, #226	; 0xe2
10014a7e:	b005      	add	sp, #20
10014a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014a82:	46c0      	nop			; (mov r8, r8)
10014a84:	1001b0e4 	.word	0x1001b0e4
10014a88:	1001b454 	.word	0x1001b454
10014a8c:	1001b0d8 	.word	0x1001b0d8
10014a90:	00000d08 	.word	0x00000d08
10014a94:	10013c7d 	.word	0x10013c7d
10014a98:	10013cd9 	.word	0x10013cd9
10014a9c:	0000ffff 	.word	0x0000ffff
10014aa0:	10017317 	.word	0x10017317

10014aa4 <gapm_cancel_cmd_handler>:
10014aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
10014aa6:	4916      	ldr	r1, [pc, #88]	; (10014b00 <gapm_cancel_cmd_handler+0x5c>)
10014aa8:	4816      	ldr	r0, [pc, #88]	; (10014b04 <gapm_cancel_cmd_handler+0x60>)
10014aaa:	880c      	ldrh	r4, [r1, #0]
10014aac:	8809      	ldrh	r1, [r1, #0]
10014aae:	466b      	mov	r3, sp
10014ab0:	0a09      	lsrs	r1, r1, #8
10014ab2:	7141      	strb	r1, [r0, #5]
10014ab4:	2102      	movs	r1, #2
10014ab6:	2203      	movs	r2, #3
10014ab8:	7201      	strb	r1, [r0, #8]
10014aba:	21d0      	movs	r1, #208	; 0xd0
10014abc:	1ddd      	adds	r5, r3, #7
10014abe:	2300      	movs	r3, #0
10014ac0:	7104      	strb	r4, [r0, #4]
10014ac2:	4c11      	ldr	r4, [pc, #68]	; (10014b08 <gapm_cancel_cmd_handler+0x64>)
10014ac4:	7002      	strb	r2, [r0, #0]
10014ac6:	0109      	lsls	r1, r1, #4
10014ac8:	320a      	adds	r2, #10
10014aca:	702b      	strb	r3, [r5, #0]
10014acc:	7042      	strb	r2, [r0, #1]
10014ace:	7082      	strb	r2, [r0, #2]
10014ad0:	70c3      	strb	r3, [r0, #3]
10014ad2:	8021      	strh	r1, [r4, #0]
10014ad4:	80a2      	strh	r2, [r4, #4]
10014ad6:	71c3      	strb	r3, [r0, #7]
10014ad8:	3a0c      	subs	r2, #12
10014ada:	2109      	movs	r1, #9
10014adc:	4b0b      	ldr	r3, [pc, #44]	; (10014b0c <gapm_cancel_cmd_handler+0x68>)
10014ade:	7182      	strb	r2, [r0, #6]
10014ae0:	4798      	blx	r3
10014ae2:	1c28      	adds	r0, r5, #0
10014ae4:	4b0a      	ldr	r3, [pc, #40]	; (10014b10 <gapm_cancel_cmd_handler+0x6c>)
10014ae6:	4798      	blx	r3
10014ae8:	7828      	ldrb	r0, [r5, #0]
10014aea:	2800      	cmp	r0, #0
10014aec:	d001      	beq.n	10014af2 <gapm_cancel_cmd_handler+0x4e>
10014aee:	20e2      	movs	r0, #226	; 0xe2
10014af0:	e004      	b.n	10014afc <gapm_cancel_cmd_handler+0x58>
10014af2:	68a3      	ldr	r3, [r4, #8]
10014af4:	785b      	ldrb	r3, [r3, #1]
10014af6:	2b44      	cmp	r3, #68	; 0x44
10014af8:	d000      	beq.n	10014afc <gapm_cancel_cmd_handler+0x58>
10014afa:	1c18      	adds	r0, r3, #0
10014afc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10014afe:	46c0      	nop			; (mov r8, r8)
10014b00:	1001b0e4 	.word	0x1001b0e4
10014b04:	1001b454 	.word	0x1001b454
10014b08:	1001b0d8 	.word	0x1001b0d8
10014b0c:	10013c7d 	.word	0x10013c7d
10014b10:	10013cd9 	.word	0x10013cd9

10014b14 <gapm_dev_bdaddr_ind_handler>:
10014b14:	b538      	push	{r3, r4, r5, lr}
10014b16:	1c05      	adds	r5, r0, #0
10014b18:	1c0c      	adds	r4, r1, #0
10014b1a:	1c48      	adds	r0, r1, #1
10014b1c:	2206      	movs	r2, #6
10014b1e:	1c29      	adds	r1, r5, #0
10014b20:	4b02      	ldr	r3, [pc, #8]	; (10014b2c <gapm_dev_bdaddr_ind_handler+0x18>)
10014b22:	4798      	blx	r3
10014b24:	79ab      	ldrb	r3, [r5, #6]
10014b26:	2000      	movs	r0, #0
10014b28:	7023      	strb	r3, [r4, #0]
10014b2a:	bd38      	pop	{r3, r4, r5, pc}
10014b2c:	10017317 	.word	0x10017317

10014b30 <gapm_cmp_evt>:
10014b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014b32:	7803      	ldrb	r3, [r0, #0]
10014b34:	7845      	ldrb	r5, [r0, #1]
10014b36:	3b0c      	subs	r3, #12
10014b38:	1e18      	subs	r0, r3, #0
10014b3a:	280b      	cmp	r0, #11
10014b3c:	d900      	bls.n	10014b40 <gapm_cmp_evt+0x10>
10014b3e:	e08d      	b.n	10014c5c <gapm_cmp_evt+0x12c>
10014b40:	1c0c      	adds	r4, r1, #0
10014b42:	f000 fd23 	bl	1001558c <__gnu_thumb1_case_uqi>
10014b46:	1952      	.short	0x1952
10014b48:	068b1919 	.word	0x068b1919
10014b4c:	8b595906 	.word	0x8b595906
10014b50:	0d8b      	.short	0x0d8b
10014b52:	2300      	movs	r3, #0
10014b54:	2d45      	cmp	r5, #69	; 0x45
10014b56:	d000      	beq.n	10014b5a <gapm_cmp_evt+0x2a>
10014b58:	1c2b      	adds	r3, r5, #0
10014b5a:	7023      	strb	r3, [r4, #0]
10014b5c:	2002      	movs	r0, #2
10014b5e:	e07e      	b.n	10014c5e <gapm_cmp_evt+0x12e>
10014b60:	203b      	movs	r0, #59	; 0x3b
10014b62:	2d00      	cmp	r5, #0
10014b64:	d100      	bne.n	10014b68 <gapm_cmp_evt+0x38>
10014b66:	e07a      	b.n	10014c5e <gapm_cmp_evt+0x12e>
10014b68:	700d      	strb	r5, [r1, #0]
10014b6a:	1c48      	adds	r0, r1, #1
10014b6c:	2210      	movs	r2, #16
10014b6e:	2100      	movs	r1, #0
10014b70:	4b3b      	ldr	r3, [pc, #236]	; (10014c60 <gapm_cmp_evt+0x130>)
10014b72:	4798      	blx	r3
10014b74:	200f      	movs	r0, #15
10014b76:	e072      	b.n	10014c5e <gapm_cmp_evt+0x12e>
10014b78:	2d00      	cmp	r5, #0
10014b7a:	d134      	bne.n	10014be6 <gapm_cmp_evt+0xb6>
10014b7c:	4b39      	ldr	r3, [pc, #228]	; (10014c64 <gapm_cmp_evt+0x134>)
10014b7e:	4798      	blx	r3
10014b80:	1e43      	subs	r3, r0, #1
10014b82:	b2db      	uxtb	r3, r3
10014b84:	1c28      	adds	r0, r5, #0
10014b86:	2b06      	cmp	r3, #6
10014b88:	d869      	bhi.n	10014c5e <gapm_cmp_evt+0x12e>
10014b8a:	466b      	mov	r3, sp
10014b8c:	4e36      	ldr	r6, [pc, #216]	; (10014c68 <gapm_cmp_evt+0x138>)
10014b8e:	1dd9      	adds	r1, r3, #7
10014b90:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10014b92:	4b36      	ldr	r3, [pc, #216]	; (10014c6c <gapm_cmp_evt+0x13c>)
10014b94:	4798      	blx	r3
10014b96:	2312      	movs	r3, #18
10014b98:	4358      	muls	r0, r3
10014b9a:	4935      	ldr	r1, [pc, #212]	; (10014c70 <gapm_cmp_evt+0x140>)
10014b9c:	1809      	adds	r1, r1, r0
10014b9e:	1c0b      	adds	r3, r1, #0
10014ba0:	894a      	ldrh	r2, [r1, #10]
10014ba2:	3308      	adds	r3, #8
10014ba4:	8122      	strh	r2, [r4, #8]
10014ba6:	784f      	ldrb	r7, [r1, #1]
10014ba8:	72a5      	strb	r5, [r4, #10]
10014baa:	7027      	strb	r7, [r4, #0]
10014bac:	898a      	ldrh	r2, [r1, #12]
10014bae:	1c60      	adds	r0, r4, #1
10014bb0:	81a2      	strh	r2, [r4, #12]
10014bb2:	88db      	ldrh	r3, [r3, #6]
10014bb4:	3102      	adds	r1, #2
10014bb6:	81e3      	strh	r3, [r4, #14]
10014bb8:	89cb      	ldrh	r3, [r1, #14]
10014bba:	2206      	movs	r2, #6
10014bbc:	8223      	strh	r3, [r4, #16]
10014bbe:	4b2d      	ldr	r3, [pc, #180]	; (10014c74 <gapm_cmp_evt+0x144>)
10014bc0:	4798      	blx	r3
10014bc2:	2f00      	cmp	r7, #0
10014bc4:	d00a      	beq.n	10014bdc <gapm_cmp_evt+0xac>
10014bc6:	79a3      	ldrb	r3, [r4, #6]
10014bc8:	223f      	movs	r2, #63	; 0x3f
10014bca:	1c19      	adds	r1, r3, #0
10014bcc:	3501      	adds	r5, #1
10014bce:	4391      	bics	r1, r2
10014bd0:	29c0      	cmp	r1, #192	; 0xc0
10014bd2:	d003      	beq.n	10014bdc <gapm_cmp_evt+0xac>
10014bd4:	065b      	lsls	r3, r3, #25
10014bd6:	0fdb      	lsrs	r3, r3, #31
10014bd8:	3502      	adds	r5, #2
10014bda:	1aed      	subs	r5, r5, r3
10014bdc:	2301      	movs	r3, #1
10014bde:	425b      	negs	r3, r3
10014be0:	7025      	strb	r5, [r4, #0]
10014be2:	85b3      	strh	r3, [r6, #44]	; 0x2c
10014be4:	e038      	b.n	10014c58 <gapm_cmp_evt+0x128>
10014be6:	700d      	strb	r5, [r1, #0]
10014be8:	e004      	b.n	10014bf4 <gapm_cmp_evt+0xc4>
10014bea:	2300      	movs	r3, #0
10014bec:	2d45      	cmp	r5, #69	; 0x45
10014bee:	d000      	beq.n	10014bf2 <gapm_cmp_evt+0xc2>
10014bf0:	1c2b      	adds	r3, r5, #0
10014bf2:	7023      	strb	r3, [r4, #0]
10014bf4:	2003      	movs	r0, #3
10014bf6:	e032      	b.n	10014c5e <gapm_cmp_evt+0x12e>
10014bf8:	4e1b      	ldr	r6, [pc, #108]	; (10014c68 <gapm_cmp_evt+0x138>)
10014bfa:	2100      	movs	r1, #0
10014bfc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10014bfe:	4b1b      	ldr	r3, [pc, #108]	; (10014c6c <gapm_cmp_evt+0x13c>)
10014c00:	4798      	blx	r3
10014c02:	2807      	cmp	r0, #7
10014c04:	d818      	bhi.n	10014c38 <gapm_cmp_evt+0x108>
10014c06:	2301      	movs	r3, #1
10014c08:	425b      	negs	r3, r3
10014c0a:	85b3      	strh	r3, [r6, #44]	; 0x2c
10014c0c:	3313      	adds	r3, #19
10014c0e:	4358      	muls	r0, r3
10014c10:	4917      	ldr	r1, [pc, #92]	; (10014c70 <gapm_cmp_evt+0x140>)
10014c12:	1809      	adds	r1, r1, r0
10014c14:	1c0b      	adds	r3, r1, #0
10014c16:	894a      	ldrh	r2, [r1, #10]
10014c18:	3308      	adds	r3, #8
10014c1a:	8122      	strh	r2, [r4, #8]
10014c1c:	784a      	ldrb	r2, [r1, #1]
10014c1e:	72a5      	strb	r5, [r4, #10]
10014c20:	7022      	strb	r2, [r4, #0]
10014c22:	898a      	ldrh	r2, [r1, #12]
10014c24:	1c60      	adds	r0, r4, #1
10014c26:	81a2      	strh	r2, [r4, #12]
10014c28:	88db      	ldrh	r3, [r3, #6]
10014c2a:	3102      	adds	r1, #2
10014c2c:	81e3      	strh	r3, [r4, #14]
10014c2e:	89cb      	ldrh	r3, [r1, #14]
10014c30:	2206      	movs	r2, #6
10014c32:	8223      	strh	r3, [r4, #16]
10014c34:	4b0f      	ldr	r3, [pc, #60]	; (10014c74 <gapm_cmp_evt+0x144>)
10014c36:	4798      	blx	r3
10014c38:	2200      	movs	r2, #0
10014c3a:	7823      	ldrb	r3, [r4, #0]
10014c3c:	4293      	cmp	r3, r2
10014c3e:	d00a      	beq.n	10014c56 <gapm_cmp_evt+0x126>
10014c40:	79a3      	ldrb	r3, [r4, #6]
10014c42:	323f      	adds	r2, #63	; 0x3f
10014c44:	1c19      	adds	r1, r3, #0
10014c46:	4391      	bics	r1, r2
10014c48:	3a3e      	subs	r2, #62	; 0x3e
10014c4a:	29c0      	cmp	r1, #192	; 0xc0
10014c4c:	d003      	beq.n	10014c56 <gapm_cmp_evt+0x126>
10014c4e:	065b      	lsls	r3, r3, #25
10014c50:	0fdb      	lsrs	r3, r3, #31
10014c52:	3202      	adds	r2, #2
10014c54:	1ad2      	subs	r2, r2, r3
10014c56:	7022      	strb	r2, [r4, #0]
10014c58:	2005      	movs	r0, #5
10014c5a:	e000      	b.n	10014c5e <gapm_cmp_evt+0x12e>
10014c5c:	2000      	movs	r0, #0
10014c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014c60:	10017329 	.word	0x10017329
10014c64:	10013e81 	.word	0x10013e81
10014c68:	1001b176 	.word	0x1001b176
10014c6c:	10013e45 	.word	0x10013e45
10014c70:	1001b0e6 	.word	0x1001b0e6
10014c74:	10017317 	.word	0x10017317

10014c78 <gapm_start_adv_cmd_handler>:
10014c78:	b5f0      	push	{r4, r5, r6, r7, lr}
10014c7a:	b089      	sub	sp, #36	; 0x24
10014c7c:	9303      	str	r3, [sp, #12]
10014c7e:	ab0e      	add	r3, sp, #56	; 0x38
10014c80:	9102      	str	r1, [sp, #8]
10014c82:	cb02      	ldmia	r3!, {r1}
10014c84:	aa08      	add	r2, sp, #32
10014c86:	881b      	ldrh	r3, [r3, #0]
10014c88:	4e3c      	ldr	r6, [pc, #240]	; (10014d7c <gapm_start_adv_cmd_handler+0x104>)
10014c8a:	9300      	str	r3, [sp, #0]
10014c8c:	ab10      	add	r3, sp, #64	; 0x40
10014c8e:	881b      	ldrh	r3, [r3, #0]
10014c90:	240d      	movs	r4, #13
10014c92:	469c      	mov	ip, r3
10014c94:	ab11      	add	r3, sp, #68	; 0x44
10014c96:	781b      	ldrb	r3, [r3, #0]
10014c98:	9304      	str	r3, [sp, #16]
10014c9a:	ab12      	add	r3, sp, #72	; 0x48
10014c9c:	781b      	ldrb	r3, [r3, #0]
10014c9e:	9305      	str	r3, [sp, #20]
10014ca0:	ab13      	add	r3, sp, #76	; 0x4c
10014ca2:	781b      	ldrb	r3, [r3, #0]
10014ca4:	9306      	str	r3, [sp, #24]
10014ca6:	ab14      	add	r3, sp, #80	; 0x50
10014ca8:	781b      	ldrb	r3, [r3, #0]
10014caa:	9301      	str	r3, [sp, #4]
10014cac:	2319      	movs	r3, #25
10014cae:	189b      	adds	r3, r3, r2
10014cb0:	7fdd      	ldrb	r5, [r3, #31]
10014cb2:	ab18      	add	r3, sp, #96	; 0x60
10014cb4:	881f      	ldrh	r7, [r3, #0]
10014cb6:	ab19      	add	r3, sp, #100	; 0x64
10014cb8:	781b      	ldrb	r3, [r3, #0]
10014cba:	8832      	ldrh	r2, [r6, #0]
10014cbc:	9307      	str	r3, [sp, #28]
10014cbe:	4b30      	ldr	r3, [pc, #192]	; (10014d80 <gapm_start_adv_cmd_handler+0x108>)
10014cc0:	8836      	ldrh	r6, [r6, #0]
10014cc2:	711a      	strb	r2, [r3, #4]
10014cc4:	466a      	mov	r2, sp
10014cc6:	7a12      	ldrb	r2, [r2, #8]
10014cc8:	701c      	strb	r4, [r3, #0]
10014cca:	705c      	strb	r4, [r3, #1]
10014ccc:	709c      	strb	r4, [r3, #2]
10014cce:	725a      	strb	r2, [r3, #9]
10014cd0:	2400      	movs	r4, #0
10014cd2:	466a      	mov	r2, sp
10014cd4:	0a36      	lsrs	r6, r6, #8
10014cd6:	70dc      	strb	r4, [r3, #3]
10014cd8:	7218      	strb	r0, [r3, #8]
10014cda:	729c      	strb	r4, [r3, #10]
10014cdc:	715e      	strb	r6, [r3, #5]
10014cde:	72dc      	strb	r4, [r3, #11]
10014ce0:	7812      	ldrb	r2, [r2, #0]
10014ce2:	380e      	subs	r0, #14
10014ce4:	731a      	strb	r2, [r3, #12]
10014ce6:	9a00      	ldr	r2, [sp, #0]
10014ce8:	0a14      	lsrs	r4, r2, #8
10014cea:	4662      	mov	r2, ip
10014cec:	739a      	strb	r2, [r3, #14]
10014cee:	4662      	mov	r2, ip
10014cf0:	735c      	strb	r4, [r3, #13]
10014cf2:	0a14      	lsrs	r4, r2, #8
10014cf4:	466a      	mov	r2, sp
10014cf6:	7c12      	ldrb	r2, [r2, #16]
10014cf8:	73dc      	strb	r4, [r3, #15]
10014cfa:	741a      	strb	r2, [r3, #16]
10014cfc:	1c1c      	adds	r4, r3, #0
10014cfe:	2801      	cmp	r0, #1
10014d00:	d809      	bhi.n	10014d16 <gapm_start_adv_cmd_handler+0x9e>
10014d02:	2900      	cmp	r1, #0
10014d04:	d003      	beq.n	10014d0e <gapm_start_adv_cmd_handler+0x96>
10014d06:	481f      	ldr	r0, [pc, #124]	; (10014d84 <gapm_start_adv_cmd_handler+0x10c>)
10014d08:	2206      	movs	r2, #6
10014d0a:	4b1f      	ldr	r3, [pc, #124]	; (10014d88 <gapm_start_adv_cmd_handler+0x110>)
10014d0c:	4798      	blx	r3
10014d0e:	466b      	mov	r3, sp
10014d10:	7b1b      	ldrb	r3, [r3, #12]
10014d12:	75e3      	strb	r3, [r4, #23]
10014d14:	e014      	b.n	10014d40 <gapm_start_adv_cmd_handler+0xc8>
10014d16:	466b      	mov	r3, sp
10014d18:	7d1b      	ldrb	r3, [r3, #20]
10014d1a:	9915      	ldr	r1, [sp, #84]	; 0x54
10014d1c:	7463      	strb	r3, [r4, #17]
10014d1e:	466b      	mov	r3, sp
10014d20:	7e1b      	ldrb	r3, [r3, #24]
10014d22:	9a01      	ldr	r2, [sp, #4]
10014d24:	74a3      	strb	r3, [r4, #18]
10014d26:	466b      	mov	r3, sp
10014d28:	791b      	ldrb	r3, [r3, #4]
10014d2a:	4818      	ldr	r0, [pc, #96]	; (10014d8c <gapm_start_adv_cmd_handler+0x114>)
10014d2c:	4e16      	ldr	r6, [pc, #88]	; (10014d88 <gapm_start_adv_cmd_handler+0x110>)
10014d2e:	74e3      	strb	r3, [r4, #19]
10014d30:	47b0      	blx	r6
10014d32:	1c23      	adds	r3, r4, #0
10014d34:	4816      	ldr	r0, [pc, #88]	; (10014d90 <gapm_start_adv_cmd_handler+0x118>)
10014d36:	3330      	adds	r3, #48	; 0x30
10014d38:	9917      	ldr	r1, [sp, #92]	; 0x5c
10014d3a:	1c2a      	adds	r2, r5, #0
10014d3c:	701d      	strb	r5, [r3, #0]
10014d3e:	47b0      	blx	r6
10014d40:	1c22      	adds	r2, r4, #0
10014d42:	23a5      	movs	r3, #165	; 0xa5
10014d44:	3250      	adds	r2, #80	; 0x50
10014d46:	7013      	strb	r3, [r2, #0]
10014d48:	1c22      	adds	r2, r4, #0
10014d4a:	3251      	adds	r2, #81	; 0x51
10014d4c:	7013      	strb	r3, [r2, #0]
10014d4e:	1c23      	adds	r3, r4, #0
10014d50:	1c22      	adds	r2, r4, #0
10014d52:	3352      	adds	r3, #82	; 0x52
10014d54:	701f      	strb	r7, [r3, #0]
10014d56:	3253      	adds	r2, #83	; 0x53
10014d58:	0a3b      	lsrs	r3, r7, #8
10014d5a:	7013      	strb	r3, [r2, #0]
10014d5c:	466a      	mov	r2, sp
10014d5e:	1c23      	adds	r3, r4, #0
10014d60:	7f12      	ldrb	r2, [r2, #28]
10014d62:	3354      	adds	r3, #84	; 0x54
10014d64:	701a      	strb	r2, [r3, #0]
10014d66:	234d      	movs	r3, #77	; 0x4d
10014d68:	2500      	movs	r5, #0
10014d6a:	71a3      	strb	r3, [r4, #6]
10014d6c:	1c20      	adds	r0, r4, #0
10014d6e:	2155      	movs	r1, #85	; 0x55
10014d70:	4b08      	ldr	r3, [pc, #32]	; (10014d94 <gapm_start_adv_cmd_handler+0x11c>)
10014d72:	71e5      	strb	r5, [r4, #7]
10014d74:	4798      	blx	r3
10014d76:	1c28      	adds	r0, r5, #0
10014d78:	b009      	add	sp, #36	; 0x24
10014d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014d7c:	1001b0e4 	.word	0x1001b0e4
10014d80:	1001b454 	.word	0x1001b454
10014d84:	1001b465 	.word	0x1001b465
10014d88:	10017317 	.word	0x10017317
10014d8c:	1001b468 	.word	0x1001b468
10014d90:	1001b485 	.word	0x1001b485
10014d94:	10013c7d 	.word	0x10013c7d

10014d98 <get_gap_local_addr_type>:
10014d98:	4b04      	ldr	r3, [pc, #16]	; (10014dac <get_gap_local_addr_type+0x14>)
10014d9a:	2001      	movs	r0, #1
10014d9c:	791b      	ldrb	r3, [r3, #4]
10014d9e:	2b02      	cmp	r3, #2
10014da0:	d003      	beq.n	10014daa <get_gap_local_addr_type+0x12>
10014da2:	3b03      	subs	r3, #3
10014da4:	4258      	negs	r0, r3
10014da6:	4158      	adcs	r0, r3
10014da8:	0040      	lsls	r0, r0, #1
10014daa:	4770      	bx	lr
10014dac:	1001b176 	.word	0x1001b176

10014db0 <gapm_adv_report_evt_handler>:
10014db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014db2:	7843      	ldrb	r3, [r0, #1]
10014db4:	1c05      	adds	r5, r0, #0
10014db6:	9301      	str	r3, [sp, #4]
10014db8:	466b      	mov	r3, sp
10014dba:	1c0c      	adds	r4, r1, #0
10014dbc:	791b      	ldrb	r3, [r3, #4]
10014dbe:	7806      	ldrb	r6, [r0, #0]
10014dc0:	2206      	movs	r2, #6
10014dc2:	704b      	strb	r3, [r1, #1]
10014dc4:	1c88      	adds	r0, r1, #2
10014dc6:	4f1b      	ldr	r7, [pc, #108]	; (10014e34 <gapm_adv_report_evt_handler+0x84>)
10014dc8:	1ca9      	adds	r1, r5, #2
10014dca:	47b8      	blx	r7
10014dcc:	1c20      	adds	r0, r4, #0
10014dce:	1c29      	adds	r1, r5, #0
10014dd0:	7a2a      	ldrb	r2, [r5, #8]
10014dd2:	3008      	adds	r0, #8
10014dd4:	77c2      	strb	r2, [r0, #31]
10014dd6:	3109      	adds	r1, #9
10014dd8:	3528      	adds	r5, #40	; 0x28
10014dda:	47b8      	blx	r7
10014ddc:	782b      	ldrb	r3, [r5, #0]
10014dde:	b25a      	sxtb	r2, r3
10014de0:	2a00      	cmp	r2, #0
10014de2:	da01      	bge.n	10014de8 <gapm_adv_report_evt_handler+0x38>
10014de4:	3301      	adds	r3, #1
10014de6:	b2db      	uxtb	r3, r3
10014de8:	1c22      	adds	r2, r4, #0
10014dea:	3228      	adds	r2, #40	; 0x28
10014dec:	7013      	strb	r3, [r2, #0]
10014dee:	2200      	movs	r2, #0
10014df0:	9b01      	ldr	r3, [sp, #4]
10014df2:	4293      	cmp	r3, r2
10014df4:	d00a      	beq.n	10014e0c <gapm_adv_report_evt_handler+0x5c>
10014df6:	79e3      	ldrb	r3, [r4, #7]
10014df8:	323f      	adds	r2, #63	; 0x3f
10014dfa:	1c19      	adds	r1, r3, #0
10014dfc:	4391      	bics	r1, r2
10014dfe:	3a3e      	subs	r2, #62	; 0x3e
10014e00:	29c0      	cmp	r1, #192	; 0xc0
10014e02:	d003      	beq.n	10014e0c <gapm_adv_report_evt_handler+0x5c>
10014e04:	065b      	lsls	r3, r3, #25
10014e06:	0fdb      	lsrs	r3, r3, #31
10014e08:	3202      	adds	r2, #2
10014e0a:	1ad2      	subs	r2, r2, r3
10014e0c:	7062      	strb	r2, [r4, #1]
10014e0e:	2e04      	cmp	r6, #4
10014e10:	d80f      	bhi.n	10014e32 <gapm_adv_report_evt_handler+0x82>
10014e12:	1c30      	adds	r0, r6, #0
10014e14:	f000 fbba 	bl	1001558c <__gnu_thumb1_case_uqi>
10014e18:	09070503 	.word	0x09070503
10014e1c:	0b          	.byte	0x0b
10014e1d:	00          	.byte	0x00
10014e1e:	2300      	movs	r3, #0
10014e20:	e006      	b.n	10014e30 <gapm_adv_report_evt_handler+0x80>
10014e22:	2301      	movs	r3, #1
10014e24:	e004      	b.n	10014e30 <gapm_adv_report_evt_handler+0x80>
10014e26:	2302      	movs	r3, #2
10014e28:	e002      	b.n	10014e30 <gapm_adv_report_evt_handler+0x80>
10014e2a:	2303      	movs	r3, #3
10014e2c:	e000      	b.n	10014e30 <gapm_adv_report_evt_handler+0x80>
10014e2e:	2305      	movs	r3, #5
10014e30:	7023      	strb	r3, [r4, #0]
10014e32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10014e34:	10017317 	.word	0x10017317

10014e38 <gapm_resolv_addr_cmd_handler>:
10014e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014e3a:	2314      	movs	r3, #20
10014e3c:	4c12      	ldr	r4, [pc, #72]	; (10014e88 <gapm_resolv_addr_cmd_handler+0x50>)
10014e3e:	1c17      	adds	r7, r2, #0
10014e40:	7023      	strb	r3, [r4, #0]
10014e42:	3b07      	subs	r3, #7
10014e44:	7063      	strb	r3, [r4, #1]
10014e46:	70a3      	strb	r3, [r4, #2]
10014e48:	2300      	movs	r3, #0
10014e4a:	70e3      	strb	r3, [r4, #3]
10014e4c:	4b0f      	ldr	r3, [pc, #60]	; (10014e8c <gapm_resolv_addr_cmd_handler+0x54>)
10014e4e:	1c05      	adds	r5, r0, #0
10014e50:	881a      	ldrh	r2, [r3, #0]
10014e52:	881b      	ldrh	r3, [r3, #0]
10014e54:	4e0e      	ldr	r6, [pc, #56]	; (10014e90 <gapm_resolv_addr_cmd_handler+0x58>)
10014e56:	0a1b      	lsrs	r3, r3, #8
10014e58:	7163      	strb	r3, [r4, #5]
10014e5a:	2317      	movs	r3, #23
10014e5c:	012d      	lsls	r5, r5, #4
10014e5e:	7122      	strb	r2, [r4, #4]
10014e60:	7260      	strb	r0, [r4, #9]
10014e62:	2206      	movs	r2, #6
10014e64:	480b      	ldr	r0, [pc, #44]	; (10014e94 <gapm_resolv_addr_cmd_handler+0x5c>)
10014e66:	7223      	strb	r3, [r4, #8]
10014e68:	47b0      	blx	r6
10014e6a:	1c39      	adds	r1, r7, #0
10014e6c:	1c2a      	adds	r2, r5, #0
10014e6e:	480a      	ldr	r0, [pc, #40]	; (10014e98 <gapm_resolv_addr_cmd_handler+0x60>)
10014e70:	47b0      	blx	r6
10014e72:	1c29      	adds	r1, r5, #0
10014e74:	3110      	adds	r1, #16
10014e76:	1c0b      	adds	r3, r1, #0
10014e78:	3b08      	subs	r3, #8
10014e7a:	71a3      	strb	r3, [r4, #6]
10014e7c:	121b      	asrs	r3, r3, #8
10014e7e:	71e3      	strb	r3, [r4, #7]
10014e80:	1c20      	adds	r0, r4, #0
10014e82:	4b06      	ldr	r3, [pc, #24]	; (10014e9c <gapm_resolv_addr_cmd_handler+0x64>)
10014e84:	4798      	blx	r3
10014e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014e88:	1001b454 	.word	0x1001b454
10014e8c:	1001b0e4 	.word	0x1001b0e4
10014e90:	10017317 	.word	0x10017317
10014e94:	1001b45e 	.word	0x1001b45e
10014e98:	1001b464 	.word	0x1001b464
10014e9c:	10013c7d 	.word	0x10013c7d

10014ea0 <gapm_addr_solved_ind_handler>:
10014ea0:	b570      	push	{r4, r5, r6, lr}
10014ea2:	1c04      	adds	r4, r0, #0
10014ea4:	1c08      	adds	r0, r1, #0
10014ea6:	1c0d      	adds	r5, r1, #0
10014ea8:	4e05      	ldr	r6, [pc, #20]	; (10014ec0 <gapm_addr_solved_ind_handler+0x20>)
10014eaa:	1c21      	adds	r1, r4, #0
10014eac:	2206      	movs	r2, #6
10014eae:	3011      	adds	r0, #17
10014eb0:	47b0      	blx	r6
10014eb2:	1c68      	adds	r0, r5, #1
10014eb4:	1da1      	adds	r1, r4, #6
10014eb6:	2210      	movs	r2, #16
10014eb8:	47b0      	blx	r6
10014eba:	2300      	movs	r3, #0
10014ebc:	702b      	strb	r3, [r5, #0]
10014ebe:	bd70      	pop	{r4, r5, r6, pc}
10014ec0:	10017317 	.word	0x10017317

10014ec4 <gapm_profile_added_ind_handler>:
10014ec4:	b510      	push	{r4, lr}
10014ec6:	7843      	ldrb	r3, [r0, #1]
10014ec8:	7902      	ldrb	r2, [r0, #4]
10014eca:	7944      	ldrb	r4, [r0, #5]
10014ecc:	7800      	ldrb	r0, [r0, #0]
10014ece:	021b      	lsls	r3, r3, #8
10014ed0:	4303      	orrs	r3, r0
10014ed2:	2b1b      	cmp	r3, #27
10014ed4:	d104      	bne.n	10014ee0 <gapm_profile_added_ind_handler+0x1c>
10014ed6:	2300      	movs	r3, #0
10014ed8:	700b      	strb	r3, [r1, #0]
10014eda:	0223      	lsls	r3, r4, #8
10014edc:	4313      	orrs	r3, r2
10014ede:	804b      	strh	r3, [r1, #2]
10014ee0:	203b      	movs	r0, #59	; 0x3b
10014ee2:	bd10      	pop	{r4, pc}

10014ee4 <gattc_read_req_ind_parser>:
10014ee4:	7843      	ldrb	r3, [r0, #1]
10014ee6:	7802      	ldrb	r2, [r0, #0]
10014ee8:	021b      	lsls	r3, r3, #8
10014eea:	4313      	orrs	r3, r2
10014eec:	804b      	strh	r3, [r1, #2]
10014eee:	4770      	bx	lr

10014ef0 <gattc_write_req_ind_parser>:
10014ef0:	b508      	push	{r3, lr}
10014ef2:	1c13      	adds	r3, r2, #0
10014ef4:	0a00      	lsrs	r0, r0, #8
10014ef6:	8010      	strh	r0, [r2, #0]
10014ef8:	784a      	ldrb	r2, [r1, #1]
10014efa:	7808      	ldrb	r0, [r1, #0]
10014efc:	0212      	lsls	r2, r2, #8
10014efe:	4302      	orrs	r2, r0
10014f00:	805a      	strh	r2, [r3, #2]
10014f02:	78ca      	ldrb	r2, [r1, #3]
10014f04:	7888      	ldrb	r0, [r1, #2]
10014f06:	0212      	lsls	r2, r2, #8
10014f08:	4302      	orrs	r2, r0
10014f0a:	809a      	strh	r2, [r3, #4]
10014f0c:	794a      	ldrb	r2, [r1, #5]
10014f0e:	7908      	ldrb	r0, [r1, #4]
10014f10:	0212      	lsls	r2, r2, #8
10014f12:	4302      	orrs	r2, r0
10014f14:	80da      	strh	r2, [r3, #6]
10014f16:	3308      	adds	r3, #8
10014f18:	1c18      	adds	r0, r3, #0
10014f1a:	3106      	adds	r1, #6
10014f1c:	4b01      	ldr	r3, [pc, #4]	; (10014f24 <gattc_write_req_ind_parser+0x34>)
10014f1e:	4798      	blx	r3
10014f20:	bd08      	pop	{r3, pc}
10014f22:	46c0      	nop			; (mov r8, r8)
10014f24:	10017317 	.word	0x10017317

10014f28 <gattc_att_info_req_parser>:
10014f28:	7843      	ldrb	r3, [r0, #1]
10014f2a:	7802      	ldrb	r2, [r0, #0]
10014f2c:	021b      	lsls	r3, r3, #8
10014f2e:	4313      	orrs	r3, r2
10014f30:	800b      	strh	r3, [r1, #0]
10014f32:	4770      	bx	lr

10014f34 <gattc_read_cfm>:
10014f34:	b538      	push	{r3, r4, r5, lr}
10014f36:	2514      	movs	r5, #20
10014f38:	1c1c      	adds	r4, r3, #0
10014f3a:	4b14      	ldr	r3, [pc, #80]	; (10014f8c <gattc_read_cfm+0x58>)
10014f3c:	70d9      	strb	r1, [r3, #3]
10014f3e:	4914      	ldr	r1, [pc, #80]	; (10014f90 <gattc_read_cfm+0x5c>)
10014f40:	701d      	strb	r5, [r3, #0]
10014f42:	3d08      	subs	r5, #8
10014f44:	705d      	strb	r5, [r3, #1]
10014f46:	709d      	strb	r5, [r3, #2]
10014f48:	880d      	ldrh	r5, [r1, #0]
10014f4a:	8809      	ldrh	r1, [r1, #0]
10014f4c:	7218      	strb	r0, [r3, #8]
10014f4e:	0a09      	lsrs	r1, r1, #8
10014f50:	7159      	strb	r1, [r3, #5]
10014f52:	0a00      	lsrs	r0, r0, #8
10014f54:	0a21      	lsrs	r1, r4, #8
10014f56:	711d      	strb	r5, [r3, #4]
10014f58:	7258      	strb	r0, [r3, #9]
10014f5a:	729c      	strb	r4, [r3, #10]
10014f5c:	72d9      	strb	r1, [r3, #11]
10014f5e:	731a      	strb	r2, [r3, #12]
10014f60:	1c1d      	adds	r5, r3, #0
10014f62:	2c00      	cmp	r4, #0
10014f64:	d007      	beq.n	10014f76 <gattc_read_cfm+0x42>
10014f66:	9904      	ldr	r1, [sp, #16]
10014f68:	1c22      	adds	r2, r4, #0
10014f6a:	480a      	ldr	r0, [pc, #40]	; (10014f94 <gattc_read_cfm+0x60>)
10014f6c:	4b0a      	ldr	r3, [pc, #40]	; (10014f98 <gattc_read_cfm+0x64>)
10014f6e:	340d      	adds	r4, #13
10014f70:	4798      	blx	r3
10014f72:	b2a1      	uxth	r1, r4
10014f74:	e001      	b.n	10014f7a <gattc_read_cfm+0x46>
10014f76:	210e      	movs	r1, #14
10014f78:	735c      	strb	r4, [r3, #13]
10014f7a:	1c0b      	adds	r3, r1, #0
10014f7c:	3b08      	subs	r3, #8
10014f7e:	71ab      	strb	r3, [r5, #6]
10014f80:	121b      	asrs	r3, r3, #8
10014f82:	71eb      	strb	r3, [r5, #7]
10014f84:	1c28      	adds	r0, r5, #0
10014f86:	4b05      	ldr	r3, [pc, #20]	; (10014f9c <gattc_read_cfm+0x68>)
10014f88:	4798      	blx	r3
10014f8a:	bd38      	pop	{r3, r4, r5, pc}
10014f8c:	1001b454 	.word	0x1001b454
10014f90:	1001b0e4 	.word	0x1001b0e4
10014f94:	1001b461 	.word	0x1001b461
10014f98:	10017317 	.word	0x10017317
10014f9c:	10013c7d 	.word	0x10013c7d

10014fa0 <gattc_write_cfm>:
10014fa0:	4b0d      	ldr	r3, [pc, #52]	; (10014fd8 <gattc_write_cfm+0x38>)
10014fa2:	b510      	push	{r4, lr}
10014fa4:	729a      	strb	r2, [r3, #10]
10014fa6:	2203      	movs	r2, #3
10014fa8:	2416      	movs	r4, #22
10014faa:	719a      	strb	r2, [r3, #6]
10014fac:	2200      	movs	r2, #0
10014fae:	70d9      	strb	r1, [r3, #3]
10014fb0:	490a      	ldr	r1, [pc, #40]	; (10014fdc <gattc_write_cfm+0x3c>)
10014fb2:	701c      	strb	r4, [r3, #0]
10014fb4:	3c0a      	subs	r4, #10
10014fb6:	705c      	strb	r4, [r3, #1]
10014fb8:	709c      	strb	r4, [r3, #2]
10014fba:	880c      	ldrh	r4, [r1, #0]
10014fbc:	8809      	ldrh	r1, [r1, #0]
10014fbe:	7218      	strb	r0, [r3, #8]
10014fc0:	0a09      	lsrs	r1, r1, #8
10014fc2:	0a00      	lsrs	r0, r0, #8
10014fc4:	711c      	strb	r4, [r3, #4]
10014fc6:	7159      	strb	r1, [r3, #5]
10014fc8:	7258      	strb	r0, [r3, #9]
10014fca:	71da      	strb	r2, [r3, #7]
10014fcc:	1c18      	adds	r0, r3, #0
10014fce:	210b      	movs	r1, #11
10014fd0:	4b03      	ldr	r3, [pc, #12]	; (10014fe0 <gattc_write_cfm+0x40>)
10014fd2:	4798      	blx	r3
10014fd4:	bd10      	pop	{r4, pc}
10014fd6:	46c0      	nop			; (mov r8, r8)
10014fd8:	1001b454 	.word	0x1001b454
10014fdc:	1001b0e4 	.word	0x1001b0e4
10014fe0:	10013c7d 	.word	0x10013c7d

10014fe4 <gattc_att_info_cfm>:
10014fe4:	b538      	push	{r3, r4, r5, lr}
10014fe6:	4c0e      	ldr	r4, [pc, #56]	; (10015020 <gattc_att_info_cfm+0x3c>)
10014fe8:	2518      	movs	r5, #24
10014fea:	7323      	strb	r3, [r4, #12]
10014fec:	2305      	movs	r3, #5
10014fee:	71a3      	strb	r3, [r4, #6]
10014ff0:	2300      	movs	r3, #0
10014ff2:	70e1      	strb	r1, [r4, #3]
10014ff4:	490b      	ldr	r1, [pc, #44]	; (10015024 <gattc_att_info_cfm+0x40>)
10014ff6:	7025      	strb	r5, [r4, #0]
10014ff8:	3d0c      	subs	r5, #12
10014ffa:	7065      	strb	r5, [r4, #1]
10014ffc:	70a5      	strb	r5, [r4, #2]
10014ffe:	880d      	ldrh	r5, [r1, #0]
10015000:	8809      	ldrh	r1, [r1, #0]
10015002:	7220      	strb	r0, [r4, #8]
10015004:	0a09      	lsrs	r1, r1, #8
10015006:	0a00      	lsrs	r0, r0, #8
10015008:	7161      	strb	r1, [r4, #5]
1001500a:	7260      	strb	r0, [r4, #9]
1001500c:	72a2      	strb	r2, [r4, #10]
1001500e:	71e3      	strb	r3, [r4, #7]
10015010:	0a12      	lsrs	r2, r2, #8
10015012:	1c20      	adds	r0, r4, #0
10015014:	210d      	movs	r1, #13
10015016:	4b04      	ldr	r3, [pc, #16]	; (10015028 <gattc_att_info_cfm+0x44>)
10015018:	7125      	strb	r5, [r4, #4]
1001501a:	72e2      	strb	r2, [r4, #11]
1001501c:	4798      	blx	r3
1001501e:	bd38      	pop	{r3, r4, r5, pc}
10015020:	1001b454 	.word	0x1001b454
10015024:	1001b0e4 	.word	0x1001b0e4
10015028:	10013c7d 	.word	0x10013c7d

1001502c <gattc_event_cfm_handler>:
1001502c:	220e      	movs	r2, #14
1001502e:	b508      	push	{r3, lr}
10015030:	4b0b      	ldr	r3, [pc, #44]	; (10015060 <gattc_event_cfm_handler+0x34>)
10015032:	701a      	strb	r2, [r3, #0]
10015034:	3a02      	subs	r2, #2
10015036:	705a      	strb	r2, [r3, #1]
10015038:	709a      	strb	r2, [r3, #2]
1001503a:	4a0a      	ldr	r2, [pc, #40]	; (10015064 <gattc_event_cfm_handler+0x38>)
1001503c:	70d8      	strb	r0, [r3, #3]
1001503e:	8810      	ldrh	r0, [r2, #0]
10015040:	8812      	ldrh	r2, [r2, #0]
10015042:	7219      	strb	r1, [r3, #8]
10015044:	0a12      	lsrs	r2, r2, #8
10015046:	715a      	strb	r2, [r3, #5]
10015048:	2202      	movs	r2, #2
1001504a:	719a      	strb	r2, [r3, #6]
1001504c:	2200      	movs	r2, #0
1001504e:	0a09      	lsrs	r1, r1, #8
10015050:	7118      	strb	r0, [r3, #4]
10015052:	7259      	strb	r1, [r3, #9]
10015054:	71da      	strb	r2, [r3, #7]
10015056:	1c18      	adds	r0, r3, #0
10015058:	210a      	movs	r1, #10
1001505a:	4b03      	ldr	r3, [pc, #12]	; (10015068 <gattc_event_cfm_handler+0x3c>)
1001505c:	4798      	blx	r3
1001505e:	bd08      	pop	{r3, pc}
10015060:	1001b454 	.word	0x1001b454
10015064:	1001b0e4 	.word	0x1001b0e4
10015068:	10013c7d 	.word	0x10013c7d

1001506c <gattc_disc_svc_ind_parser>:
1001506c:	b570      	push	{r4, r5, r6, lr}
1001506e:	1c15      	adds	r5, r2, #0
10015070:	0a00      	lsrs	r0, r0, #8
10015072:	8010      	strh	r0, [r2, #0]
10015074:	784b      	ldrb	r3, [r1, #1]
10015076:	780a      	ldrb	r2, [r1, #0]
10015078:	021b      	lsls	r3, r3, #8
1001507a:	4313      	orrs	r3, r2
1001507c:	806b      	strh	r3, [r5, #2]
1001507e:	78cb      	ldrb	r3, [r1, #3]
10015080:	788a      	ldrb	r2, [r1, #2]
10015082:	021b      	lsls	r3, r3, #8
10015084:	4313      	orrs	r3, r2
10015086:	80ab      	strh	r3, [r5, #4]
10015088:	790e      	ldrb	r6, [r1, #4]
1001508a:	4b05      	ldr	r3, [pc, #20]	; (100150a0 <gattc_disc_svc_ind_parser+0x34>)
1001508c:	1c30      	adds	r0, r6, #0
1001508e:	1c0c      	adds	r4, r1, #0
10015090:	4798      	blx	r3
10015092:	1c32      	adds	r2, r6, #0
10015094:	71a8      	strb	r0, [r5, #6]
10015096:	1d61      	adds	r1, r4, #5
10015098:	1de8      	adds	r0, r5, #7
1001509a:	4b02      	ldr	r3, [pc, #8]	; (100150a4 <gattc_disc_svc_ind_parser+0x38>)
1001509c:	4798      	blx	r3
1001509e:	bd70      	pop	{r4, r5, r6, pc}
100150a0:	10013059 	.word	0x10013059
100150a4:	10017317 	.word	0x10017317

100150a8 <gattc_disc_svc_incl_ind_parser>:
100150a8:	b570      	push	{r4, r5, r6, lr}
100150aa:	1c15      	adds	r5, r2, #0
100150ac:	0a00      	lsrs	r0, r0, #8
100150ae:	8010      	strh	r0, [r2, #0]
100150b0:	784b      	ldrb	r3, [r1, #1]
100150b2:	780a      	ldrb	r2, [r1, #0]
100150b4:	021b      	lsls	r3, r3, #8
100150b6:	4313      	orrs	r3, r2
100150b8:	806b      	strh	r3, [r5, #2]
100150ba:	78cb      	ldrb	r3, [r1, #3]
100150bc:	788a      	ldrb	r2, [r1, #2]
100150be:	021b      	lsls	r3, r3, #8
100150c0:	4313      	orrs	r3, r2
100150c2:	80ab      	strh	r3, [r5, #4]
100150c4:	794b      	ldrb	r3, [r1, #5]
100150c6:	790a      	ldrb	r2, [r1, #4]
100150c8:	021b      	lsls	r3, r3, #8
100150ca:	4313      	orrs	r3, r2
100150cc:	80eb      	strh	r3, [r5, #6]
100150ce:	798e      	ldrb	r6, [r1, #6]
100150d0:	4b05      	ldr	r3, [pc, #20]	; (100150e8 <gattc_disc_svc_incl_ind_parser+0x40>)
100150d2:	1c30      	adds	r0, r6, #0
100150d4:	1c0c      	adds	r4, r1, #0
100150d6:	4798      	blx	r3
100150d8:	7228      	strb	r0, [r5, #8]
100150da:	1c28      	adds	r0, r5, #0
100150dc:	1c32      	adds	r2, r6, #0
100150de:	1de1      	adds	r1, r4, #7
100150e0:	4b02      	ldr	r3, [pc, #8]	; (100150ec <gattc_disc_svc_incl_ind_parser+0x44>)
100150e2:	3009      	adds	r0, #9
100150e4:	4798      	blx	r3
100150e6:	bd70      	pop	{r4, r5, r6, pc}
100150e8:	10013059 	.word	0x10013059
100150ec:	10017317 	.word	0x10017317

100150f0 <gattc_disc_char_ind_parser>:
100150f0:	b570      	push	{r4, r5, r6, lr}
100150f2:	1c15      	adds	r5, r2, #0
100150f4:	0a00      	lsrs	r0, r0, #8
100150f6:	8010      	strh	r0, [r2, #0]
100150f8:	784b      	ldrb	r3, [r1, #1]
100150fa:	780a      	ldrb	r2, [r1, #0]
100150fc:	021b      	lsls	r3, r3, #8
100150fe:	4313      	orrs	r3, r2
10015100:	806b      	strh	r3, [r5, #2]
10015102:	78cb      	ldrb	r3, [r1, #3]
10015104:	788a      	ldrb	r2, [r1, #2]
10015106:	021b      	lsls	r3, r3, #8
10015108:	4313      	orrs	r3, r2
1001510a:	80ab      	strh	r3, [r5, #4]
1001510c:	790b      	ldrb	r3, [r1, #4]
1001510e:	1c0c      	adds	r4, r1, #0
10015110:	71ab      	strb	r3, [r5, #6]
10015112:	794e      	ldrb	r6, [r1, #5]
10015114:	4b05      	ldr	r3, [pc, #20]	; (1001512c <gattc_disc_char_ind_parser+0x3c>)
10015116:	1c30      	adds	r0, r6, #0
10015118:	4798      	blx	r3
1001511a:	71e8      	strb	r0, [r5, #7]
1001511c:	1c28      	adds	r0, r5, #0
1001511e:	1c32      	adds	r2, r6, #0
10015120:	1da1      	adds	r1, r4, #6
10015122:	4b03      	ldr	r3, [pc, #12]	; (10015130 <gattc_disc_char_ind_parser+0x40>)
10015124:	3008      	adds	r0, #8
10015126:	4798      	blx	r3
10015128:	bd70      	pop	{r4, r5, r6, pc}
1001512a:	46c0      	nop			; (mov r8, r8)
1001512c:	10013059 	.word	0x10013059
10015130:	10017317 	.word	0x10017317

10015134 <gattc_disc_char_desc_ind_parser>:
10015134:	b570      	push	{r4, r5, r6, lr}
10015136:	1c15      	adds	r5, r2, #0
10015138:	0a00      	lsrs	r0, r0, #8
1001513a:	8010      	strh	r0, [r2, #0]
1001513c:	784b      	ldrb	r3, [r1, #1]
1001513e:	780a      	ldrb	r2, [r1, #0]
10015140:	021b      	lsls	r3, r3, #8
10015142:	4313      	orrs	r3, r2
10015144:	806b      	strh	r3, [r5, #2]
10015146:	788e      	ldrb	r6, [r1, #2]
10015148:	4b05      	ldr	r3, [pc, #20]	; (10015160 <gattc_disc_char_desc_ind_parser+0x2c>)
1001514a:	1c30      	adds	r0, r6, #0
1001514c:	1c0c      	adds	r4, r1, #0
1001514e:	4798      	blx	r3
10015150:	1c32      	adds	r2, r6, #0
10015152:	7128      	strb	r0, [r5, #4]
10015154:	1ce1      	adds	r1, r4, #3
10015156:	1d68      	adds	r0, r5, #5
10015158:	4b02      	ldr	r3, [pc, #8]	; (10015164 <gattc_disc_char_desc_ind_parser+0x30>)
1001515a:	4798      	blx	r3
1001515c:	bd70      	pop	{r4, r5, r6, pc}
1001515e:	46c0      	nop			; (mov r8, r8)
10015160:	10013059 	.word	0x10013059
10015164:	10017317 	.word	0x10017317

10015168 <gattc_event_ind_and_notification_parser>:
10015168:	b510      	push	{r4, lr}
1001516a:	780c      	ldrb	r4, [r1, #0]
1001516c:	1c13      	adds	r3, r2, #0
1001516e:	2c12      	cmp	r4, #18
10015170:	d10e      	bne.n	10015190 <gattc_event_ind_and_notification_parser+0x28>
10015172:	0a00      	lsrs	r0, r0, #8
10015174:	8010      	strh	r0, [r2, #0]
10015176:	788a      	ldrb	r2, [r1, #2]
10015178:	709a      	strb	r2, [r3, #2]
1001517a:	7948      	ldrb	r0, [r1, #5]
1001517c:	790c      	ldrb	r4, [r1, #4]
1001517e:	0200      	lsls	r0, r0, #8
10015180:	4320      	orrs	r0, r4
10015182:	8098      	strh	r0, [r3, #4]
10015184:	3106      	adds	r1, #6
10015186:	1d98      	adds	r0, r3, #6
10015188:	4b0b      	ldr	r3, [pc, #44]	; (100151b8 <gattc_event_ind_and_notification_parser+0x50>)
1001518a:	4798      	blx	r3
1001518c:	221b      	movs	r2, #27
1001518e:	e010      	b.n	100151b2 <gattc_event_ind_and_notification_parser+0x4a>
10015190:	2200      	movs	r2, #0
10015192:	2c13      	cmp	r4, #19
10015194:	d10d      	bne.n	100151b2 <gattc_event_ind_and_notification_parser+0x4a>
10015196:	0a00      	lsrs	r0, r0, #8
10015198:	8018      	strh	r0, [r3, #0]
1001519a:	788a      	ldrb	r2, [r1, #2]
1001519c:	709a      	strb	r2, [r3, #2]
1001519e:	7908      	ldrb	r0, [r1, #4]
100151a0:	78cc      	ldrb	r4, [r1, #3]
100151a2:	0200      	lsls	r0, r0, #8
100151a4:	4320      	orrs	r0, r4
100151a6:	8098      	strh	r0, [r3, #4]
100151a8:	3106      	adds	r1, #6
100151aa:	1d98      	adds	r0, r3, #6
100151ac:	4b02      	ldr	r3, [pc, #8]	; (100151b8 <gattc_event_ind_and_notification_parser+0x50>)
100151ae:	4798      	blx	r3
100151b0:	221c      	movs	r2, #28
100151b2:	1c10      	adds	r0, r2, #0
100151b4:	bd10      	pop	{r4, pc}
100151b6:	46c0      	nop			; (mov r8, r8)
100151b8:	10017317 	.word	0x10017317

100151bc <gattc_complete_evt_handler>:
100151bc:	b500      	push	{lr}
100151be:	0a00      	lsrs	r0, r0, #8
100151c0:	8010      	strh	r0, [r2, #0]
100151c2:	7808      	ldrb	r0, [r1, #0]
100151c4:	7090      	strb	r0, [r2, #2]
100151c6:	784b      	ldrb	r3, [r1, #1]
100151c8:	3801      	subs	r0, #1
100151ca:	70d3      	strb	r3, [r2, #3]
100151cc:	2813      	cmp	r0, #19
100151ce:	d82c      	bhi.n	1001522a <gattc_complete_evt_handler+0x6e>
100151d0:	f000 f9dc 	bl	1001558c <__gnu_thumb1_case_uqi>
100151d4:	0a0a0a0c 	.word	0x0a0a0a0c
100151d8:	210a0a0a 	.word	0x210a0a0a
100151dc:	111f2121 	.word	0x111f2121
100151e0:	2b111111 	.word	0x2b111111
100151e4:	2919132b 	.word	0x2919132b
100151e8:	2017      	movs	r0, #23
100151ea:	e01f      	b.n	1001522c <gattc_complete_evt_handler+0x70>
100151ec:	2024      	movs	r0, #36	; 0x24
100151ee:	2b00      	cmp	r3, #0
100151f0:	d11c      	bne.n	1001522c <gattc_complete_evt_handler+0x70>
100151f2:	3017      	adds	r0, #23
100151f4:	e01a      	b.n	1001522c <gattc_complete_evt_handler+0x70>
100151f6:	2025      	movs	r0, #37	; 0x25
100151f8:	e018      	b.n	1001522c <gattc_complete_evt_handler+0x70>
100151fa:	4a0d      	ldr	r2, [pc, #52]	; (10015230 <gattc_complete_evt_handler+0x74>)
100151fc:	201d      	movs	r0, #29
100151fe:	6813      	ldr	r3, [r2, #0]
10015200:	3b01      	subs	r3, #1
10015202:	6013      	str	r3, [r2, #0]
10015204:	e012      	b.n	1001522c <gattc_complete_evt_handler+0x70>
10015206:	4a0a      	ldr	r2, [pc, #40]	; (10015230 <gattc_complete_evt_handler+0x74>)
10015208:	201e      	movs	r0, #30
1001520a:	6813      	ldr	r3, [r2, #0]
1001520c:	3b01      	subs	r3, #1
1001520e:	6013      	str	r3, [r2, #0]
10015210:	e00c      	b.n	1001522c <gattc_complete_evt_handler+0x70>
10015212:	2019      	movs	r0, #25
10015214:	e00a      	b.n	1001522c <gattc_complete_evt_handler+0x70>
10015216:	203b      	movs	r0, #59	; 0x3b
10015218:	2b00      	cmp	r3, #0
1001521a:	d007      	beq.n	1001522c <gattc_complete_evt_handler+0x70>
1001521c:	2182      	movs	r1, #130	; 0x82
1001521e:	0089      	lsls	r1, r1, #2
10015220:	5453      	strb	r3, [r2, r1]
10015222:	3823      	subs	r0, #35	; 0x23
10015224:	e002      	b.n	1001522c <gattc_complete_evt_handler+0x70>
10015226:	2021      	movs	r0, #33	; 0x21
10015228:	e000      	b.n	1001522c <gattc_complete_evt_handler+0x70>
1001522a:	2000      	movs	r0, #0
1001522c:	bd00      	pop	{pc}
1001522e:	46c0      	nop			; (mov r8, r8)
10015230:	1001a274 	.word	0x1001a274

10015234 <gattc_event_mtu_changed_ind_parser>:
10015234:	0a00      	lsrs	r0, r0, #8
10015236:	8010      	strh	r0, [r2, #0]
10015238:	784b      	ldrb	r3, [r1, #1]
1001523a:	7809      	ldrb	r1, [r1, #0]
1001523c:	021b      	lsls	r3, r3, #8
1001523e:	430b      	orrs	r3, r1
10015240:	8053      	strh	r3, [r2, #2]
10015242:	4770      	bx	lr

10015244 <gattc_read_ind_parser>:
10015244:	0a00      	lsrs	r0, r0, #8
10015246:	b508      	push	{r3, lr}
10015248:	8010      	strh	r0, [r2, #0]
1001524a:	1c13      	adds	r3, r2, #0
1001524c:	2282      	movs	r2, #130	; 0x82
1001524e:	2000      	movs	r0, #0
10015250:	0092      	lsls	r2, r2, #2
10015252:	5498      	strb	r0, [r3, r2]
10015254:	784a      	ldrb	r2, [r1, #1]
10015256:	7808      	ldrb	r0, [r1, #0]
10015258:	0212      	lsls	r2, r2, #8
1001525a:	4302      	orrs	r2, r0
1001525c:	805a      	strh	r2, [r3, #2]
1001525e:	78ca      	ldrb	r2, [r1, #3]
10015260:	7888      	ldrb	r0, [r1, #2]
10015262:	0212      	lsls	r2, r2, #8
10015264:	4302      	orrs	r2, r0
10015266:	80da      	strh	r2, [r3, #6]
10015268:	794a      	ldrb	r2, [r1, #5]
1001526a:	7908      	ldrb	r0, [r1, #4]
1001526c:	0212      	lsls	r2, r2, #8
1001526e:	4302      	orrs	r2, r0
10015270:	809a      	strh	r2, [r3, #4]
10015272:	3308      	adds	r3, #8
10015274:	1c18      	adds	r0, r3, #0
10015276:	3106      	adds	r1, #6
10015278:	4b01      	ldr	r3, [pc, #4]	; (10015280 <gattc_read_ind_parser+0x3c>)
1001527a:	4798      	blx	r3
1001527c:	bd08      	pop	{r3, pc}
1001527e:	46c0      	nop			; (mov r8, r8)
10015280:	10017317 	.word	0x10017317

10015284 <gattc_svc_changed_cfg_ind_parser>:
10015284:	0a00      	lsrs	r0, r0, #8
10015286:	8010      	strh	r0, [r2, #0]
10015288:	784b      	ldrb	r3, [r1, #1]
1001528a:	7809      	ldrb	r1, [r1, #0]
1001528c:	021b      	lsls	r3, r3, #8
1001528e:	430b      	orrs	r3, r1
10015290:	8053      	strh	r3, [r2, #2]
10015292:	4770      	bx	lr

10015294 <init_gattc_task_module>:
10015294:	2300      	movs	r3, #0
10015296:	4a02      	ldr	r2, [pc, #8]	; (100152a0 <init_gattc_task_module+0xc>)
10015298:	8013      	strh	r3, [r2, #0]
1001529a:	4a02      	ldr	r2, [pc, #8]	; (100152a4 <init_gattc_task_module+0x10>)
1001529c:	8013      	strh	r3, [r2, #0]
1001529e:	4770      	bx	lr
100152a0:	1001a26e 	.word	0x1001a26e
100152a4:	1001a270 	.word	0x1001a270

100152a8 <gattm_add_svc_req_handler>:
100152a8:	2200      	movs	r2, #0
100152aa:	210b      	movs	r1, #11
100152ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100152ae:	1c04      	adds	r4, r0, #0
100152b0:	7943      	ldrb	r3, [r0, #5]
100152b2:	b085      	sub	sp, #20
100152b4:	9301      	str	r3, [sp, #4]
100152b6:	ab02      	add	r3, sp, #8
100152b8:	71da      	strb	r2, [r3, #7]
100152ba:	4b37      	ldr	r3, [pc, #220]	; (10015398 <gattm_add_svc_req_handler+0xf0>)
100152bc:	7059      	strb	r1, [r3, #1]
100152be:	7099      	strb	r1, [r3, #2]
100152c0:	4936      	ldr	r1, [pc, #216]	; (1001539c <gattm_add_svc_req_handler+0xf4>)
100152c2:	701a      	strb	r2, [r3, #0]
100152c4:	8808      	ldrh	r0, [r1, #0]
100152c6:	8809      	ldrh	r1, [r1, #0]
100152c8:	70da      	strb	r2, [r3, #3]
100152ca:	0a09      	lsrs	r1, r1, #8
100152cc:	7118      	strb	r0, [r3, #4]
100152ce:	7159      	strb	r1, [r3, #5]
100152d0:	8821      	ldrh	r1, [r4, #0]
100152d2:	7219      	strb	r1, [r3, #8]
100152d4:	8821      	ldrh	r1, [r4, #0]
100152d6:	0a09      	lsrs	r1, r1, #8
100152d8:	7259      	strb	r1, [r3, #9]
100152da:	8861      	ldrh	r1, [r4, #2]
100152dc:	7299      	strb	r1, [r3, #10]
100152de:	8861      	ldrh	r1, [r4, #2]
100152e0:	0a09      	lsrs	r1, r1, #8
100152e2:	72d9      	strb	r1, [r3, #11]
100152e4:	7921      	ldrb	r1, [r4, #4]
100152e6:	7319      	strb	r1, [r3, #12]
100152e8:	4669      	mov	r1, sp
100152ea:	7909      	ldrb	r1, [r1, #4]
100152ec:	7359      	strb	r1, [r3, #13]
100152ee:	18a1      	adds	r1, r4, r2
100152f0:	7988      	ldrb	r0, [r1, #6]
100152f2:	1899      	adds	r1, r3, r2
100152f4:	3201      	adds	r2, #1
100152f6:	7388      	strb	r0, [r1, #14]
100152f8:	2a10      	cmp	r2, #16
100152fa:	d1f8      	bne.n	100152ee <gattm_add_svc_req_handler+0x46>
100152fc:	1c27      	adds	r7, r4, #0
100152fe:	2300      	movs	r3, #0
10015300:	251e      	movs	r5, #30
10015302:	3716      	adds	r7, #22
10015304:	9300      	str	r3, [sp, #0]
10015306:	9b00      	ldr	r3, [sp, #0]
10015308:	9a01      	ldr	r2, [sp, #4]
1001530a:	4e23      	ldr	r6, [pc, #140]	; (10015398 <gattm_add_svc_req_handler+0xf0>)
1001530c:	4293      	cmp	r3, r2
1001530e:	da21      	bge.n	10015354 <gattm_add_svc_req_handler+0xac>
10015310:	1c39      	adds	r1, r7, #0
10015312:	1970      	adds	r0, r6, r5
10015314:	2210      	movs	r2, #16
10015316:	4b22      	ldr	r3, [pc, #136]	; (100153a0 <gattm_add_svc_req_handler+0xf8>)
10015318:	4798      	blx	r3
1001531a:	1c2b      	adds	r3, r5, #0
1001531c:	8a3a      	ldrh	r2, [r7, #16]
1001531e:	3310      	adds	r3, #16
10015320:	b29b      	uxth	r3, r3
10015322:	54f2      	strb	r2, [r6, r3]
10015324:	1c2b      	adds	r3, r5, #0
10015326:	8a3a      	ldrh	r2, [r7, #16]
10015328:	3311      	adds	r3, #17
1001532a:	b29b      	uxth	r3, r3
1001532c:	0a12      	lsrs	r2, r2, #8
1001532e:	54f2      	strb	r2, [r6, r3]
10015330:	1c2a      	adds	r2, r5, #0
10015332:	1c2b      	adds	r3, r5, #0
10015334:	8a79      	ldrh	r1, [r7, #18]
10015336:	3212      	adds	r2, #18
10015338:	b292      	uxth	r2, r2
1001533a:	54b1      	strb	r1, [r6, r2]
1001533c:	8a7a      	ldrh	r2, [r7, #18]
1001533e:	3313      	adds	r3, #19
10015340:	b29b      	uxth	r3, r3
10015342:	0a12      	lsrs	r2, r2, #8
10015344:	54f2      	strb	r2, [r6, r3]
10015346:	9b00      	ldr	r3, [sp, #0]
10015348:	3514      	adds	r5, #20
1001534a:	3301      	adds	r3, #1
1001534c:	b2ad      	uxth	r5, r5
1001534e:	9300      	str	r3, [sp, #0]
10015350:	3714      	adds	r7, #20
10015352:	e7d8      	b.n	10015306 <gattm_add_svc_req_handler+0x5e>
10015354:	2114      	movs	r1, #20
10015356:	4d13      	ldr	r5, [pc, #76]	; (100153a4 <gattm_add_svc_req_handler+0xfc>)
10015358:	4b13      	ldr	r3, [pc, #76]	; (100153a8 <gattm_add_svc_req_handler+0x100>)
1001535a:	4351      	muls	r1, r2
1001535c:	802b      	strh	r3, [r5, #0]
1001535e:	230b      	movs	r3, #11
10015360:	311e      	adds	r1, #30
10015362:	80ab      	strh	r3, [r5, #4]
10015364:	1c0b      	adds	r3, r1, #0
10015366:	3b08      	subs	r3, #8
10015368:	71b3      	strb	r3, [r6, #6]
1001536a:	121b      	asrs	r3, r3, #8
1001536c:	71f3      	strb	r3, [r6, #7]
1001536e:	1c30      	adds	r0, r6, #0
10015370:	4b0e      	ldr	r3, [pc, #56]	; (100153ac <gattm_add_svc_req_handler+0x104>)
10015372:	4798      	blx	r3
10015374:	ab02      	add	r3, sp, #8
10015376:	1dde      	adds	r6, r3, #7
10015378:	1c30      	adds	r0, r6, #0
1001537a:	4b0d      	ldr	r3, [pc, #52]	; (100153b0 <gattm_add_svc_req_handler+0x108>)
1001537c:	4798      	blx	r3
1001537e:	7833      	ldrb	r3, [r6, #0]
10015380:	20e2      	movs	r0, #226	; 0xe2
10015382:	2b00      	cmp	r3, #0
10015384:	d106      	bne.n	10015394 <gattm_add_svc_req_handler+0xec>
10015386:	68aa      	ldr	r2, [r5, #8]
10015388:	7853      	ldrb	r3, [r2, #1]
1001538a:	7811      	ldrb	r1, [r2, #0]
1001538c:	021b      	lsls	r3, r3, #8
1001538e:	430b      	orrs	r3, r1
10015390:	8023      	strh	r3, [r4, #0]
10015392:	7890      	ldrb	r0, [r2, #2]
10015394:	b005      	add	sp, #20
10015396:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015398:	1001b454 	.word	0x1001b454
1001539c:	1001b0e4 	.word	0x1001b0e4
100153a0:	10017317 	.word	0x10017317
100153a4:	1001b0d8 	.word	0x1001b0d8
100153a8:	00000b01 	.word	0x00000b01
100153ac:	10013c7d 	.word	0x10013c7d
100153b0:	10013cd9 	.word	0x10013cd9

100153b4 <gattm_add_attribute_req_handler>:
100153b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100153b6:	1c1f      	adds	r7, r3, #0
100153b8:	4b16      	ldr	r3, [pc, #88]	; (10015414 <gattm_add_attribute_req_handler+0x60>)
100153ba:	9100      	str	r1, [sp, #0]
100153bc:	9201      	str	r2, [sp, #4]
100153be:	1c05      	adds	r5, r0, #0
100153c0:	7946      	ldrb	r6, [r0, #5]
100153c2:	6818      	ldr	r0, [r3, #0]
100153c4:	2114      	movs	r1, #20
100153c6:	4b14      	ldr	r3, [pc, #80]	; (10015418 <gattm_add_attribute_req_handler+0x64>)
100153c8:	382a      	subs	r0, #42	; 0x2a
100153ca:	4798      	blx	r3
100153cc:	2311      	movs	r3, #17
100153ce:	4286      	cmp	r6, r0
100153d0:	d21e      	bcs.n	10015410 <gattm_add_attribute_req_handler+0x5c>
100153d2:	2414      	movs	r4, #20
100153d4:	4366      	muls	r6, r4
100153d6:	19a8      	adds	r0, r5, r6
100153d8:	2100      	movs	r1, #0
100153da:	2210      	movs	r2, #16
100153dc:	4b0f      	ldr	r3, [pc, #60]	; (1001541c <gattm_add_attribute_req_handler+0x68>)
100153de:	3016      	adds	r0, #22
100153e0:	4798      	blx	r3
100153e2:	7968      	ldrb	r0, [r5, #5]
100153e4:	1c3a      	adds	r2, r7, #0
100153e6:	4360      	muls	r0, r4
100153e8:	1828      	adds	r0, r5, r0
100153ea:	4b0d      	ldr	r3, [pc, #52]	; (10015420 <gattm_add_attribute_req_handler+0x6c>)
100153ec:	3016      	adds	r0, #22
100153ee:	9908      	ldr	r1, [sp, #32]
100153f0:	4798      	blx	r3
100153f2:	466a      	mov	r2, sp
100153f4:	796b      	ldrb	r3, [r5, #5]
100153f6:	8812      	ldrh	r2, [r2, #0]
100153f8:	435c      	muls	r4, r3
100153fa:	192c      	adds	r4, r5, r4
100153fc:	8522      	strh	r2, [r4, #40]	; 0x28
100153fe:	466a      	mov	r2, sp
10015400:	8892      	ldrh	r2, [r2, #4]
10015402:	84e2      	strh	r2, [r4, #38]	; 0x26
10015404:	9a09      	ldr	r2, [sp, #36]	; 0x24
10015406:	8013      	strh	r3, [r2, #0]
10015408:	796b      	ldrb	r3, [r5, #5]
1001540a:	3301      	adds	r3, #1
1001540c:	716b      	strb	r3, [r5, #5]
1001540e:	2300      	movs	r3, #0
10015410:	1c18      	adds	r0, r3, #0
10015412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015414:	1001a1ec 	.word	0x1001a1ec
10015418:	100155a1 	.word	0x100155a1
1001541c:	10017329 	.word	0x10017329
10015420:	10017317 	.word	0x10017317

10015424 <gattm_att_set_value_req_handler>:
10015424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015426:	466b      	mov	r3, sp
10015428:	1dde      	adds	r6, r3, #7
1001542a:	2300      	movs	r3, #0
1001542c:	1c0d      	adds	r5, r1, #0
1001542e:	210c      	movs	r1, #12
10015430:	270b      	movs	r7, #11
10015432:	4c17      	ldr	r4, [pc, #92]	; (10015490 <gattm_att_set_value_req_handler+0x6c>)
10015434:	7033      	strb	r3, [r6, #0]
10015436:	70e3      	strb	r3, [r4, #3]
10015438:	4b16      	ldr	r3, [pc, #88]	; (10015494 <gattm_att_set_value_req_handler+0x70>)
1001543a:	7021      	strb	r1, [r4, #0]
1001543c:	8819      	ldrh	r1, [r3, #0]
1001543e:	881b      	ldrh	r3, [r3, #0]
10015440:	7220      	strb	r0, [r4, #8]
10015442:	0a1b      	lsrs	r3, r3, #8
10015444:	7163      	strb	r3, [r4, #5]
10015446:	0a00      	lsrs	r0, r0, #8
10015448:	0a2b      	lsrs	r3, r5, #8
1001544a:	7121      	strb	r1, [r4, #4]
1001544c:	7260      	strb	r0, [r4, #9]
1001544e:	1c11      	adds	r1, r2, #0
10015450:	72a5      	strb	r5, [r4, #10]
10015452:	1c2a      	adds	r2, r5, #0
10015454:	72e3      	strb	r3, [r4, #11]
10015456:	350c      	adds	r5, #12
10015458:	4b0f      	ldr	r3, [pc, #60]	; (10015498 <gattm_att_set_value_req_handler+0x74>)
1001545a:	4810      	ldr	r0, [pc, #64]	; (1001549c <gattm_att_set_value_req_handler+0x78>)
1001545c:	7067      	strb	r7, [r4, #1]
1001545e:	70a7      	strb	r7, [r4, #2]
10015460:	4798      	blx	r3
10015462:	b2a9      	uxth	r1, r5
10015464:	4b0e      	ldr	r3, [pc, #56]	; (100154a0 <gattm_att_set_value_req_handler+0x7c>)
10015466:	4d0f      	ldr	r5, [pc, #60]	; (100154a4 <gattm_att_set_value_req_handler+0x80>)
10015468:	1c20      	adds	r0, r4, #0
1001546a:	802b      	strh	r3, [r5, #0]
1001546c:	1c0b      	adds	r3, r1, #0
1001546e:	3b08      	subs	r3, #8
10015470:	71a3      	strb	r3, [r4, #6]
10015472:	121b      	asrs	r3, r3, #8
10015474:	71e3      	strb	r3, [r4, #7]
10015476:	4b0c      	ldr	r3, [pc, #48]	; (100154a8 <gattm_att_set_value_req_handler+0x84>)
10015478:	80af      	strh	r7, [r5, #4]
1001547a:	4798      	blx	r3
1001547c:	1c30      	adds	r0, r6, #0
1001547e:	4b0b      	ldr	r3, [pc, #44]	; (100154ac <gattm_att_set_value_req_handler+0x88>)
10015480:	4798      	blx	r3
10015482:	7833      	ldrb	r3, [r6, #0]
10015484:	20e2      	movs	r0, #226	; 0xe2
10015486:	2b00      	cmp	r3, #0
10015488:	d101      	bne.n	1001548e <gattm_att_set_value_req_handler+0x6a>
1001548a:	68ab      	ldr	r3, [r5, #8]
1001548c:	7898      	ldrb	r0, [r3, #2]
1001548e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015490:	1001b454 	.word	0x1001b454
10015494:	1001b0e4 	.word	0x1001b0e4
10015498:	10017317 	.word	0x10017317
1001549c:	1001b460 	.word	0x1001b460
100154a0:	00000b0d 	.word	0x00000b0d
100154a4:	1001b0d8 	.word	0x1001b0d8
100154a8:	10013c7d 	.word	0x10013c7d
100154ac:	10013cd9 	.word	0x10013cd9

100154b0 <gattm_att_get_value_req_handler>:
100154b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100154b2:	b085      	sub	sp, #20
100154b4:	9201      	str	r2, [sp, #4]
100154b6:	220a      	movs	r2, #10
100154b8:	1c04      	adds	r4, r0, #0
100154ba:	481d      	ldr	r0, [pc, #116]	; (10015530 <gattm_att_get_value_req_handler+0x80>)
100154bc:	ab02      	add	r3, sp, #8
100154be:	1dde      	adds	r6, r3, #7
100154c0:	7002      	strb	r2, [r0, #0]
100154c2:	2300      	movs	r3, #0
100154c4:	220b      	movs	r2, #11
100154c6:	4d1b      	ldr	r5, [pc, #108]	; (10015534 <gattm_att_get_value_req_handler+0x84>)
100154c8:	1c0f      	adds	r7, r1, #0
100154ca:	8829      	ldrh	r1, [r5, #0]
100154cc:	882d      	ldrh	r5, [r5, #0]
100154ce:	7101      	strb	r1, [r0, #4]
100154d0:	0a2d      	lsrs	r5, r5, #8
100154d2:	7145      	strb	r5, [r0, #5]
100154d4:	0a25      	lsrs	r5, r4, #8
100154d6:	7245      	strb	r5, [r0, #9]
100154d8:	4917      	ldr	r1, [pc, #92]	; (10015538 <gattm_att_get_value_req_handler+0x88>)
100154da:	4d18      	ldr	r5, [pc, #96]	; (1001553c <gattm_att_get_value_req_handler+0x8c>)
100154dc:	7033      	strb	r3, [r6, #0]
100154de:	7042      	strb	r2, [r0, #1]
100154e0:	7082      	strb	r2, [r0, #2]
100154e2:	70c3      	strb	r3, [r0, #3]
100154e4:	8029      	strh	r1, [r5, #0]
100154e6:	80aa      	strh	r2, [r5, #4]
100154e8:	71c3      	strb	r3, [r0, #7]
100154ea:	3a09      	subs	r2, #9
100154ec:	210a      	movs	r1, #10
100154ee:	4b14      	ldr	r3, [pc, #80]	; (10015540 <gattm_att_get_value_req_handler+0x90>)
100154f0:	7182      	strb	r2, [r0, #6]
100154f2:	7204      	strb	r4, [r0, #8]
100154f4:	4798      	blx	r3
100154f6:	1c30      	adds	r0, r6, #0
100154f8:	4b12      	ldr	r3, [pc, #72]	; (10015544 <gattm_att_get_value_req_handler+0x94>)
100154fa:	4798      	blx	r3
100154fc:	7833      	ldrb	r3, [r6, #0]
100154fe:	20e2      	movs	r0, #226	; 0xe2
10015500:	2b00      	cmp	r3, #0
10015502:	d112      	bne.n	1001552a <gattm_att_get_value_req_handler+0x7a>
10015504:	68a9      	ldr	r1, [r5, #8]
10015506:	9801      	ldr	r0, [sp, #4]
10015508:	784d      	ldrb	r5, [r1, #1]
1001550a:	780b      	ldrb	r3, [r1, #0]
1001550c:	78ca      	ldrb	r2, [r1, #3]
1001550e:	022d      	lsls	r5, r5, #8
10015510:	431d      	orrs	r5, r3
10015512:	788b      	ldrb	r3, [r1, #2]
10015514:	0212      	lsls	r2, r2, #8
10015516:	431a      	orrs	r2, r3
10015518:	803a      	strh	r2, [r7, #0]
1001551a:	790e      	ldrb	r6, [r1, #4]
1001551c:	4b0a      	ldr	r3, [pc, #40]	; (10015548 <gattm_att_get_value_req_handler+0x98>)
1001551e:	3105      	adds	r1, #5
10015520:	4798      	blx	r3
10015522:	20e2      	movs	r0, #226	; 0xe2
10015524:	42ac      	cmp	r4, r5
10015526:	d100      	bne.n	1001552a <gattm_att_get_value_req_handler+0x7a>
10015528:	1c30      	adds	r0, r6, #0
1001552a:	b005      	add	sp, #20
1001552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001552e:	46c0      	nop			; (mov r8, r8)
10015530:	1001b454 	.word	0x1001b454
10015534:	1001b0e4 	.word	0x1001b0e4
10015538:	00000b0b 	.word	0x00000b0b
1001553c:	1001b0d8 	.word	0x1001b0d8
10015540:	10013c7d 	.word	0x10013c7d
10015544:	10013cd9 	.word	0x10013cd9
10015548:	10017317 	.word	0x10017317

1001554c <htpt_enable_rsp_handler>:
1001554c:	780b      	ldrb	r3, [r1, #0]
1001554e:	7013      	strb	r3, [r2, #0]
10015550:	784b      	ldrb	r3, [r1, #1]
10015552:	7053      	strb	r3, [r2, #1]
10015554:	4770      	bx	lr

10015556 <htpt_temp_send_rsp_handler>:
10015556:	780b      	ldrb	r3, [r1, #0]
10015558:	7013      	strb	r3, [r2, #0]
1001555a:	4770      	bx	lr

1001555c <htpt_meas_intv_upd_rsp_handler>:
1001555c:	780b      	ldrb	r3, [r1, #0]
1001555e:	7013      	strb	r3, [r2, #0]
10015560:	4770      	bx	lr

10015562 <htpt_meas_intv_chg_req_ind_handler>:
10015562:	78cb      	ldrb	r3, [r1, #3]
10015564:	7889      	ldrb	r1, [r1, #2]
10015566:	021b      	lsls	r3, r3, #8
10015568:	430b      	orrs	r3, r1
1001556a:	8013      	strh	r3, [r2, #0]
1001556c:	4770      	bx	lr

1001556e <htpt_cfg_indntf_ind_handler>:
1001556e:	780b      	ldrb	r3, [r1, #0]
10015570:	7013      	strb	r3, [r2, #0]
10015572:	784b      	ldrb	r3, [r1, #1]
10015574:	7053      	strb	r3, [r2, #1]
10015576:	4770      	bx	lr

10015578 <__gnu_thumb1_case_sqi>:
10015578:	b402      	push	{r1}
1001557a:	4671      	mov	r1, lr
1001557c:	0849      	lsrs	r1, r1, #1
1001557e:	0049      	lsls	r1, r1, #1
10015580:	5609      	ldrsb	r1, [r1, r0]
10015582:	0049      	lsls	r1, r1, #1
10015584:	448e      	add	lr, r1
10015586:	bc02      	pop	{r1}
10015588:	4770      	bx	lr
1001558a:	46c0      	nop			; (mov r8, r8)

1001558c <__gnu_thumb1_case_uqi>:
1001558c:	b402      	push	{r1}
1001558e:	4671      	mov	r1, lr
10015590:	0849      	lsrs	r1, r1, #1
10015592:	0049      	lsls	r1, r1, #1
10015594:	5c09      	ldrb	r1, [r1, r0]
10015596:	0049      	lsls	r1, r1, #1
10015598:	448e      	add	lr, r1
1001559a:	bc02      	pop	{r1}
1001559c:	4770      	bx	lr
1001559e:	46c0      	nop			; (mov r8, r8)

100155a0 <__aeabi_uidiv>:
100155a0:	2200      	movs	r2, #0
100155a2:	0843      	lsrs	r3, r0, #1
100155a4:	428b      	cmp	r3, r1
100155a6:	d374      	bcc.n	10015692 <__aeabi_uidiv+0xf2>
100155a8:	0903      	lsrs	r3, r0, #4
100155aa:	428b      	cmp	r3, r1
100155ac:	d35f      	bcc.n	1001566e <__aeabi_uidiv+0xce>
100155ae:	0a03      	lsrs	r3, r0, #8
100155b0:	428b      	cmp	r3, r1
100155b2:	d344      	bcc.n	1001563e <__aeabi_uidiv+0x9e>
100155b4:	0b03      	lsrs	r3, r0, #12
100155b6:	428b      	cmp	r3, r1
100155b8:	d328      	bcc.n	1001560c <__aeabi_uidiv+0x6c>
100155ba:	0c03      	lsrs	r3, r0, #16
100155bc:	428b      	cmp	r3, r1
100155be:	d30d      	bcc.n	100155dc <__aeabi_uidiv+0x3c>
100155c0:	22ff      	movs	r2, #255	; 0xff
100155c2:	0209      	lsls	r1, r1, #8
100155c4:	ba12      	rev	r2, r2
100155c6:	0c03      	lsrs	r3, r0, #16
100155c8:	428b      	cmp	r3, r1
100155ca:	d302      	bcc.n	100155d2 <__aeabi_uidiv+0x32>
100155cc:	1212      	asrs	r2, r2, #8
100155ce:	0209      	lsls	r1, r1, #8
100155d0:	d065      	beq.n	1001569e <__aeabi_uidiv+0xfe>
100155d2:	0b03      	lsrs	r3, r0, #12
100155d4:	428b      	cmp	r3, r1
100155d6:	d319      	bcc.n	1001560c <__aeabi_uidiv+0x6c>
100155d8:	e000      	b.n	100155dc <__aeabi_uidiv+0x3c>
100155da:	0a09      	lsrs	r1, r1, #8
100155dc:	0bc3      	lsrs	r3, r0, #15
100155de:	428b      	cmp	r3, r1
100155e0:	d301      	bcc.n	100155e6 <__aeabi_uidiv+0x46>
100155e2:	03cb      	lsls	r3, r1, #15
100155e4:	1ac0      	subs	r0, r0, r3
100155e6:	4152      	adcs	r2, r2
100155e8:	0b83      	lsrs	r3, r0, #14
100155ea:	428b      	cmp	r3, r1
100155ec:	d301      	bcc.n	100155f2 <__aeabi_uidiv+0x52>
100155ee:	038b      	lsls	r3, r1, #14
100155f0:	1ac0      	subs	r0, r0, r3
100155f2:	4152      	adcs	r2, r2
100155f4:	0b43      	lsrs	r3, r0, #13
100155f6:	428b      	cmp	r3, r1
100155f8:	d301      	bcc.n	100155fe <__aeabi_uidiv+0x5e>
100155fa:	034b      	lsls	r3, r1, #13
100155fc:	1ac0      	subs	r0, r0, r3
100155fe:	4152      	adcs	r2, r2
10015600:	0b03      	lsrs	r3, r0, #12
10015602:	428b      	cmp	r3, r1
10015604:	d301      	bcc.n	1001560a <__aeabi_uidiv+0x6a>
10015606:	030b      	lsls	r3, r1, #12
10015608:	1ac0      	subs	r0, r0, r3
1001560a:	4152      	adcs	r2, r2
1001560c:	0ac3      	lsrs	r3, r0, #11
1001560e:	428b      	cmp	r3, r1
10015610:	d301      	bcc.n	10015616 <__aeabi_uidiv+0x76>
10015612:	02cb      	lsls	r3, r1, #11
10015614:	1ac0      	subs	r0, r0, r3
10015616:	4152      	adcs	r2, r2
10015618:	0a83      	lsrs	r3, r0, #10
1001561a:	428b      	cmp	r3, r1
1001561c:	d301      	bcc.n	10015622 <__aeabi_uidiv+0x82>
1001561e:	028b      	lsls	r3, r1, #10
10015620:	1ac0      	subs	r0, r0, r3
10015622:	4152      	adcs	r2, r2
10015624:	0a43      	lsrs	r3, r0, #9
10015626:	428b      	cmp	r3, r1
10015628:	d301      	bcc.n	1001562e <__aeabi_uidiv+0x8e>
1001562a:	024b      	lsls	r3, r1, #9
1001562c:	1ac0      	subs	r0, r0, r3
1001562e:	4152      	adcs	r2, r2
10015630:	0a03      	lsrs	r3, r0, #8
10015632:	428b      	cmp	r3, r1
10015634:	d301      	bcc.n	1001563a <__aeabi_uidiv+0x9a>
10015636:	020b      	lsls	r3, r1, #8
10015638:	1ac0      	subs	r0, r0, r3
1001563a:	4152      	adcs	r2, r2
1001563c:	d2cd      	bcs.n	100155da <__aeabi_uidiv+0x3a>
1001563e:	09c3      	lsrs	r3, r0, #7
10015640:	428b      	cmp	r3, r1
10015642:	d301      	bcc.n	10015648 <__aeabi_uidiv+0xa8>
10015644:	01cb      	lsls	r3, r1, #7
10015646:	1ac0      	subs	r0, r0, r3
10015648:	4152      	adcs	r2, r2
1001564a:	0983      	lsrs	r3, r0, #6
1001564c:	428b      	cmp	r3, r1
1001564e:	d301      	bcc.n	10015654 <__aeabi_uidiv+0xb4>
10015650:	018b      	lsls	r3, r1, #6
10015652:	1ac0      	subs	r0, r0, r3
10015654:	4152      	adcs	r2, r2
10015656:	0943      	lsrs	r3, r0, #5
10015658:	428b      	cmp	r3, r1
1001565a:	d301      	bcc.n	10015660 <__aeabi_uidiv+0xc0>
1001565c:	014b      	lsls	r3, r1, #5
1001565e:	1ac0      	subs	r0, r0, r3
10015660:	4152      	adcs	r2, r2
10015662:	0903      	lsrs	r3, r0, #4
10015664:	428b      	cmp	r3, r1
10015666:	d301      	bcc.n	1001566c <__aeabi_uidiv+0xcc>
10015668:	010b      	lsls	r3, r1, #4
1001566a:	1ac0      	subs	r0, r0, r3
1001566c:	4152      	adcs	r2, r2
1001566e:	08c3      	lsrs	r3, r0, #3
10015670:	428b      	cmp	r3, r1
10015672:	d301      	bcc.n	10015678 <__aeabi_uidiv+0xd8>
10015674:	00cb      	lsls	r3, r1, #3
10015676:	1ac0      	subs	r0, r0, r3
10015678:	4152      	adcs	r2, r2
1001567a:	0883      	lsrs	r3, r0, #2
1001567c:	428b      	cmp	r3, r1
1001567e:	d301      	bcc.n	10015684 <__aeabi_uidiv+0xe4>
10015680:	008b      	lsls	r3, r1, #2
10015682:	1ac0      	subs	r0, r0, r3
10015684:	4152      	adcs	r2, r2
10015686:	0843      	lsrs	r3, r0, #1
10015688:	428b      	cmp	r3, r1
1001568a:	d301      	bcc.n	10015690 <__aeabi_uidiv+0xf0>
1001568c:	004b      	lsls	r3, r1, #1
1001568e:	1ac0      	subs	r0, r0, r3
10015690:	4152      	adcs	r2, r2
10015692:	1a41      	subs	r1, r0, r1
10015694:	d200      	bcs.n	10015698 <__aeabi_uidiv+0xf8>
10015696:	4601      	mov	r1, r0
10015698:	4152      	adcs	r2, r2
1001569a:	4610      	mov	r0, r2
1001569c:	4770      	bx	lr
1001569e:	e7ff      	b.n	100156a0 <__aeabi_uidiv+0x100>
100156a0:	b501      	push	{r0, lr}
100156a2:	2000      	movs	r0, #0
100156a4:	f000 f8f0 	bl	10015888 <__aeabi_idiv0>
100156a8:	bd02      	pop	{r1, pc}
100156aa:	46c0      	nop			; (mov r8, r8)

100156ac <__aeabi_uidivmod>:
100156ac:	2900      	cmp	r1, #0
100156ae:	d0f7      	beq.n	100156a0 <__aeabi_uidiv+0x100>
100156b0:	e776      	b.n	100155a0 <__aeabi_uidiv>
100156b2:	4770      	bx	lr

100156b4 <__aeabi_idiv>:
100156b4:	4603      	mov	r3, r0
100156b6:	430b      	orrs	r3, r1
100156b8:	d47f      	bmi.n	100157ba <__aeabi_idiv+0x106>
100156ba:	2200      	movs	r2, #0
100156bc:	0843      	lsrs	r3, r0, #1
100156be:	428b      	cmp	r3, r1
100156c0:	d374      	bcc.n	100157ac <__aeabi_idiv+0xf8>
100156c2:	0903      	lsrs	r3, r0, #4
100156c4:	428b      	cmp	r3, r1
100156c6:	d35f      	bcc.n	10015788 <__aeabi_idiv+0xd4>
100156c8:	0a03      	lsrs	r3, r0, #8
100156ca:	428b      	cmp	r3, r1
100156cc:	d344      	bcc.n	10015758 <__aeabi_idiv+0xa4>
100156ce:	0b03      	lsrs	r3, r0, #12
100156d0:	428b      	cmp	r3, r1
100156d2:	d328      	bcc.n	10015726 <__aeabi_idiv+0x72>
100156d4:	0c03      	lsrs	r3, r0, #16
100156d6:	428b      	cmp	r3, r1
100156d8:	d30d      	bcc.n	100156f6 <__aeabi_idiv+0x42>
100156da:	22ff      	movs	r2, #255	; 0xff
100156dc:	0209      	lsls	r1, r1, #8
100156de:	ba12      	rev	r2, r2
100156e0:	0c03      	lsrs	r3, r0, #16
100156e2:	428b      	cmp	r3, r1
100156e4:	d302      	bcc.n	100156ec <__aeabi_idiv+0x38>
100156e6:	1212      	asrs	r2, r2, #8
100156e8:	0209      	lsls	r1, r1, #8
100156ea:	d065      	beq.n	100157b8 <__aeabi_idiv+0x104>
100156ec:	0b03      	lsrs	r3, r0, #12
100156ee:	428b      	cmp	r3, r1
100156f0:	d319      	bcc.n	10015726 <__aeabi_idiv+0x72>
100156f2:	e000      	b.n	100156f6 <__aeabi_idiv+0x42>
100156f4:	0a09      	lsrs	r1, r1, #8
100156f6:	0bc3      	lsrs	r3, r0, #15
100156f8:	428b      	cmp	r3, r1
100156fa:	d301      	bcc.n	10015700 <__aeabi_idiv+0x4c>
100156fc:	03cb      	lsls	r3, r1, #15
100156fe:	1ac0      	subs	r0, r0, r3
10015700:	4152      	adcs	r2, r2
10015702:	0b83      	lsrs	r3, r0, #14
10015704:	428b      	cmp	r3, r1
10015706:	d301      	bcc.n	1001570c <__aeabi_idiv+0x58>
10015708:	038b      	lsls	r3, r1, #14
1001570a:	1ac0      	subs	r0, r0, r3
1001570c:	4152      	adcs	r2, r2
1001570e:	0b43      	lsrs	r3, r0, #13
10015710:	428b      	cmp	r3, r1
10015712:	d301      	bcc.n	10015718 <__aeabi_idiv+0x64>
10015714:	034b      	lsls	r3, r1, #13
10015716:	1ac0      	subs	r0, r0, r3
10015718:	4152      	adcs	r2, r2
1001571a:	0b03      	lsrs	r3, r0, #12
1001571c:	428b      	cmp	r3, r1
1001571e:	d301      	bcc.n	10015724 <__aeabi_idiv+0x70>
10015720:	030b      	lsls	r3, r1, #12
10015722:	1ac0      	subs	r0, r0, r3
10015724:	4152      	adcs	r2, r2
10015726:	0ac3      	lsrs	r3, r0, #11
10015728:	428b      	cmp	r3, r1
1001572a:	d301      	bcc.n	10015730 <__aeabi_idiv+0x7c>
1001572c:	02cb      	lsls	r3, r1, #11
1001572e:	1ac0      	subs	r0, r0, r3
10015730:	4152      	adcs	r2, r2
10015732:	0a83      	lsrs	r3, r0, #10
10015734:	428b      	cmp	r3, r1
10015736:	d301      	bcc.n	1001573c <__aeabi_idiv+0x88>
10015738:	028b      	lsls	r3, r1, #10
1001573a:	1ac0      	subs	r0, r0, r3
1001573c:	4152      	adcs	r2, r2
1001573e:	0a43      	lsrs	r3, r0, #9
10015740:	428b      	cmp	r3, r1
10015742:	d301      	bcc.n	10015748 <__aeabi_idiv+0x94>
10015744:	024b      	lsls	r3, r1, #9
10015746:	1ac0      	subs	r0, r0, r3
10015748:	4152      	adcs	r2, r2
1001574a:	0a03      	lsrs	r3, r0, #8
1001574c:	428b      	cmp	r3, r1
1001574e:	d301      	bcc.n	10015754 <__aeabi_idiv+0xa0>
10015750:	020b      	lsls	r3, r1, #8
10015752:	1ac0      	subs	r0, r0, r3
10015754:	4152      	adcs	r2, r2
10015756:	d2cd      	bcs.n	100156f4 <__aeabi_idiv+0x40>
10015758:	09c3      	lsrs	r3, r0, #7
1001575a:	428b      	cmp	r3, r1
1001575c:	d301      	bcc.n	10015762 <__aeabi_idiv+0xae>
1001575e:	01cb      	lsls	r3, r1, #7
10015760:	1ac0      	subs	r0, r0, r3
10015762:	4152      	adcs	r2, r2
10015764:	0983      	lsrs	r3, r0, #6
10015766:	428b      	cmp	r3, r1
10015768:	d301      	bcc.n	1001576e <__aeabi_idiv+0xba>
1001576a:	018b      	lsls	r3, r1, #6
1001576c:	1ac0      	subs	r0, r0, r3
1001576e:	4152      	adcs	r2, r2
10015770:	0943      	lsrs	r3, r0, #5
10015772:	428b      	cmp	r3, r1
10015774:	d301      	bcc.n	1001577a <__aeabi_idiv+0xc6>
10015776:	014b      	lsls	r3, r1, #5
10015778:	1ac0      	subs	r0, r0, r3
1001577a:	4152      	adcs	r2, r2
1001577c:	0903      	lsrs	r3, r0, #4
1001577e:	428b      	cmp	r3, r1
10015780:	d301      	bcc.n	10015786 <__aeabi_idiv+0xd2>
10015782:	010b      	lsls	r3, r1, #4
10015784:	1ac0      	subs	r0, r0, r3
10015786:	4152      	adcs	r2, r2
10015788:	08c3      	lsrs	r3, r0, #3
1001578a:	428b      	cmp	r3, r1
1001578c:	d301      	bcc.n	10015792 <__aeabi_idiv+0xde>
1001578e:	00cb      	lsls	r3, r1, #3
10015790:	1ac0      	subs	r0, r0, r3
10015792:	4152      	adcs	r2, r2
10015794:	0883      	lsrs	r3, r0, #2
10015796:	428b      	cmp	r3, r1
10015798:	d301      	bcc.n	1001579e <__aeabi_idiv+0xea>
1001579a:	008b      	lsls	r3, r1, #2
1001579c:	1ac0      	subs	r0, r0, r3
1001579e:	4152      	adcs	r2, r2
100157a0:	0843      	lsrs	r3, r0, #1
100157a2:	428b      	cmp	r3, r1
100157a4:	d301      	bcc.n	100157aa <__aeabi_idiv+0xf6>
100157a6:	004b      	lsls	r3, r1, #1
100157a8:	1ac0      	subs	r0, r0, r3
100157aa:	4152      	adcs	r2, r2
100157ac:	1a41      	subs	r1, r0, r1
100157ae:	d200      	bcs.n	100157b2 <__aeabi_idiv+0xfe>
100157b0:	4601      	mov	r1, r0
100157b2:	4152      	adcs	r2, r2
100157b4:	4610      	mov	r0, r2
100157b6:	4770      	bx	lr
100157b8:	e05d      	b.n	10015876 <__aeabi_idiv+0x1c2>
100157ba:	0fca      	lsrs	r2, r1, #31
100157bc:	d000      	beq.n	100157c0 <__aeabi_idiv+0x10c>
100157be:	4249      	negs	r1, r1
100157c0:	1003      	asrs	r3, r0, #32
100157c2:	d300      	bcc.n	100157c6 <__aeabi_idiv+0x112>
100157c4:	4240      	negs	r0, r0
100157c6:	4053      	eors	r3, r2
100157c8:	2200      	movs	r2, #0
100157ca:	469c      	mov	ip, r3
100157cc:	0903      	lsrs	r3, r0, #4
100157ce:	428b      	cmp	r3, r1
100157d0:	d32d      	bcc.n	1001582e <__aeabi_idiv+0x17a>
100157d2:	0a03      	lsrs	r3, r0, #8
100157d4:	428b      	cmp	r3, r1
100157d6:	d312      	bcc.n	100157fe <__aeabi_idiv+0x14a>
100157d8:	22fc      	movs	r2, #252	; 0xfc
100157da:	0189      	lsls	r1, r1, #6
100157dc:	ba12      	rev	r2, r2
100157de:	0a03      	lsrs	r3, r0, #8
100157e0:	428b      	cmp	r3, r1
100157e2:	d30c      	bcc.n	100157fe <__aeabi_idiv+0x14a>
100157e4:	0189      	lsls	r1, r1, #6
100157e6:	1192      	asrs	r2, r2, #6
100157e8:	428b      	cmp	r3, r1
100157ea:	d308      	bcc.n	100157fe <__aeabi_idiv+0x14a>
100157ec:	0189      	lsls	r1, r1, #6
100157ee:	1192      	asrs	r2, r2, #6
100157f0:	428b      	cmp	r3, r1
100157f2:	d304      	bcc.n	100157fe <__aeabi_idiv+0x14a>
100157f4:	0189      	lsls	r1, r1, #6
100157f6:	d03a      	beq.n	1001586e <__aeabi_idiv+0x1ba>
100157f8:	1192      	asrs	r2, r2, #6
100157fa:	e000      	b.n	100157fe <__aeabi_idiv+0x14a>
100157fc:	0989      	lsrs	r1, r1, #6
100157fe:	09c3      	lsrs	r3, r0, #7
10015800:	428b      	cmp	r3, r1
10015802:	d301      	bcc.n	10015808 <__aeabi_idiv+0x154>
10015804:	01cb      	lsls	r3, r1, #7
10015806:	1ac0      	subs	r0, r0, r3
10015808:	4152      	adcs	r2, r2
1001580a:	0983      	lsrs	r3, r0, #6
1001580c:	428b      	cmp	r3, r1
1001580e:	d301      	bcc.n	10015814 <__aeabi_idiv+0x160>
10015810:	018b      	lsls	r3, r1, #6
10015812:	1ac0      	subs	r0, r0, r3
10015814:	4152      	adcs	r2, r2
10015816:	0943      	lsrs	r3, r0, #5
10015818:	428b      	cmp	r3, r1
1001581a:	d301      	bcc.n	10015820 <__aeabi_idiv+0x16c>
1001581c:	014b      	lsls	r3, r1, #5
1001581e:	1ac0      	subs	r0, r0, r3
10015820:	4152      	adcs	r2, r2
10015822:	0903      	lsrs	r3, r0, #4
10015824:	428b      	cmp	r3, r1
10015826:	d301      	bcc.n	1001582c <__aeabi_idiv+0x178>
10015828:	010b      	lsls	r3, r1, #4
1001582a:	1ac0      	subs	r0, r0, r3
1001582c:	4152      	adcs	r2, r2
1001582e:	08c3      	lsrs	r3, r0, #3
10015830:	428b      	cmp	r3, r1
10015832:	d301      	bcc.n	10015838 <__aeabi_idiv+0x184>
10015834:	00cb      	lsls	r3, r1, #3
10015836:	1ac0      	subs	r0, r0, r3
10015838:	4152      	adcs	r2, r2
1001583a:	0883      	lsrs	r3, r0, #2
1001583c:	428b      	cmp	r3, r1
1001583e:	d301      	bcc.n	10015844 <__aeabi_idiv+0x190>
10015840:	008b      	lsls	r3, r1, #2
10015842:	1ac0      	subs	r0, r0, r3
10015844:	4152      	adcs	r2, r2
10015846:	d2d9      	bcs.n	100157fc <__aeabi_idiv+0x148>
10015848:	0843      	lsrs	r3, r0, #1
1001584a:	428b      	cmp	r3, r1
1001584c:	d301      	bcc.n	10015852 <__aeabi_idiv+0x19e>
1001584e:	004b      	lsls	r3, r1, #1
10015850:	1ac0      	subs	r0, r0, r3
10015852:	4152      	adcs	r2, r2
10015854:	1a41      	subs	r1, r0, r1
10015856:	d200      	bcs.n	1001585a <__aeabi_idiv+0x1a6>
10015858:	4601      	mov	r1, r0
1001585a:	4663      	mov	r3, ip
1001585c:	4152      	adcs	r2, r2
1001585e:	105b      	asrs	r3, r3, #1
10015860:	4610      	mov	r0, r2
10015862:	d301      	bcc.n	10015868 <__aeabi_idiv+0x1b4>
10015864:	4240      	negs	r0, r0
10015866:	2b00      	cmp	r3, #0
10015868:	d500      	bpl.n	1001586c <__aeabi_idiv+0x1b8>
1001586a:	4249      	negs	r1, r1
1001586c:	4770      	bx	lr
1001586e:	4663      	mov	r3, ip
10015870:	105b      	asrs	r3, r3, #1
10015872:	d300      	bcc.n	10015876 <__aeabi_idiv+0x1c2>
10015874:	4240      	negs	r0, r0
10015876:	b501      	push	{r0, lr}
10015878:	2000      	movs	r0, #0
1001587a:	f000 f805 	bl	10015888 <__aeabi_idiv0>
1001587e:	bd02      	pop	{r1, pc}

10015880 <__aeabi_idivmod>:
10015880:	2900      	cmp	r1, #0
10015882:	d0f8      	beq.n	10015876 <__aeabi_idiv+0x1c2>
10015884:	e716      	b.n	100156b4 <__aeabi_idiv>
10015886:	4770      	bx	lr

10015888 <__aeabi_idiv0>:
10015888:	4770      	bx	lr
1001588a:	46c0      	nop			; (mov r8, r8)

1001588c <__aeabi_cdrcmple>:
1001588c:	4684      	mov	ip, r0
1001588e:	1c10      	adds	r0, r2, #0
10015890:	4662      	mov	r2, ip
10015892:	468c      	mov	ip, r1
10015894:	1c19      	adds	r1, r3, #0
10015896:	4663      	mov	r3, ip
10015898:	e000      	b.n	1001589c <__aeabi_cdcmpeq>
1001589a:	46c0      	nop			; (mov r8, r8)

1001589c <__aeabi_cdcmpeq>:
1001589c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001589e:	f000 fe37 	bl	10016510 <__ledf2>
100158a2:	2800      	cmp	r0, #0
100158a4:	d401      	bmi.n	100158aa <__aeabi_cdcmpeq+0xe>
100158a6:	2100      	movs	r1, #0
100158a8:	42c8      	cmn	r0, r1
100158aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100158ac <__aeabi_dcmpeq>:
100158ac:	b510      	push	{r4, lr}
100158ae:	f000 fd8b 	bl	100163c8 <__eqdf2>
100158b2:	4240      	negs	r0, r0
100158b4:	3001      	adds	r0, #1
100158b6:	bd10      	pop	{r4, pc}

100158b8 <__aeabi_dcmplt>:
100158b8:	b510      	push	{r4, lr}
100158ba:	f000 fe29 	bl	10016510 <__ledf2>
100158be:	2800      	cmp	r0, #0
100158c0:	db01      	blt.n	100158c6 <__aeabi_dcmplt+0xe>
100158c2:	2000      	movs	r0, #0
100158c4:	bd10      	pop	{r4, pc}
100158c6:	2001      	movs	r0, #1
100158c8:	bd10      	pop	{r4, pc}
100158ca:	46c0      	nop			; (mov r8, r8)

100158cc <__aeabi_dcmple>:
100158cc:	b510      	push	{r4, lr}
100158ce:	f000 fe1f 	bl	10016510 <__ledf2>
100158d2:	2800      	cmp	r0, #0
100158d4:	dd01      	ble.n	100158da <__aeabi_dcmple+0xe>
100158d6:	2000      	movs	r0, #0
100158d8:	bd10      	pop	{r4, pc}
100158da:	2001      	movs	r0, #1
100158dc:	bd10      	pop	{r4, pc}
100158de:	46c0      	nop			; (mov r8, r8)

100158e0 <__aeabi_dcmpgt>:
100158e0:	b510      	push	{r4, lr}
100158e2:	f000 fdb1 	bl	10016448 <__gedf2>
100158e6:	2800      	cmp	r0, #0
100158e8:	dc01      	bgt.n	100158ee <__aeabi_dcmpgt+0xe>
100158ea:	2000      	movs	r0, #0
100158ec:	bd10      	pop	{r4, pc}
100158ee:	2001      	movs	r0, #1
100158f0:	bd10      	pop	{r4, pc}
100158f2:	46c0      	nop			; (mov r8, r8)

100158f4 <__aeabi_dcmpge>:
100158f4:	b510      	push	{r4, lr}
100158f6:	f000 fda7 	bl	10016448 <__gedf2>
100158fa:	2800      	cmp	r0, #0
100158fc:	da01      	bge.n	10015902 <__aeabi_dcmpge+0xe>
100158fe:	2000      	movs	r0, #0
10015900:	bd10      	pop	{r4, pc}
10015902:	2001      	movs	r0, #1
10015904:	bd10      	pop	{r4, pc}
10015906:	46c0      	nop			; (mov r8, r8)

10015908 <__aeabi_cfrcmple>:
10015908:	4684      	mov	ip, r0
1001590a:	1c08      	adds	r0, r1, #0
1001590c:	4661      	mov	r1, ip
1001590e:	e7ff      	b.n	10015910 <__aeabi_cfcmpeq>

10015910 <__aeabi_cfcmpeq>:
10015910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10015912:	f000 fa1b 	bl	10015d4c <__lesf2>
10015916:	2800      	cmp	r0, #0
10015918:	d401      	bmi.n	1001591e <__aeabi_cfcmpeq+0xe>
1001591a:	2100      	movs	r1, #0
1001591c:	42c8      	cmn	r0, r1
1001591e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10015920 <__aeabi_fcmpeq>:
10015920:	b510      	push	{r4, lr}
10015922:	f000 f9a7 	bl	10015c74 <__eqsf2>
10015926:	4240      	negs	r0, r0
10015928:	3001      	adds	r0, #1
1001592a:	bd10      	pop	{r4, pc}

1001592c <__aeabi_fcmplt>:
1001592c:	b510      	push	{r4, lr}
1001592e:	f000 fa0d 	bl	10015d4c <__lesf2>
10015932:	2800      	cmp	r0, #0
10015934:	db01      	blt.n	1001593a <__aeabi_fcmplt+0xe>
10015936:	2000      	movs	r0, #0
10015938:	bd10      	pop	{r4, pc}
1001593a:	2001      	movs	r0, #1
1001593c:	bd10      	pop	{r4, pc}
1001593e:	46c0      	nop			; (mov r8, r8)

10015940 <__aeabi_fcmple>:
10015940:	b510      	push	{r4, lr}
10015942:	f000 fa03 	bl	10015d4c <__lesf2>
10015946:	2800      	cmp	r0, #0
10015948:	dd01      	ble.n	1001594e <__aeabi_fcmple+0xe>
1001594a:	2000      	movs	r0, #0
1001594c:	bd10      	pop	{r4, pc}
1001594e:	2001      	movs	r0, #1
10015950:	bd10      	pop	{r4, pc}
10015952:	46c0      	nop			; (mov r8, r8)

10015954 <__aeabi_fcmpgt>:
10015954:	b510      	push	{r4, lr}
10015956:	f000 f9b5 	bl	10015cc4 <__gesf2>
1001595a:	2800      	cmp	r0, #0
1001595c:	dc01      	bgt.n	10015962 <__aeabi_fcmpgt+0xe>
1001595e:	2000      	movs	r0, #0
10015960:	bd10      	pop	{r4, pc}
10015962:	2001      	movs	r0, #1
10015964:	bd10      	pop	{r4, pc}
10015966:	46c0      	nop			; (mov r8, r8)

10015968 <__aeabi_fcmpge>:
10015968:	b510      	push	{r4, lr}
1001596a:	f000 f9ab 	bl	10015cc4 <__gesf2>
1001596e:	2800      	cmp	r0, #0
10015970:	da01      	bge.n	10015976 <__aeabi_fcmpge+0xe>
10015972:	2000      	movs	r0, #0
10015974:	bd10      	pop	{r4, pc}
10015976:	2001      	movs	r0, #1
10015978:	bd10      	pop	{r4, pc}
1001597a:	46c0      	nop			; (mov r8, r8)

1001597c <__aeabi_lmul>:
1001597c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001597e:	464f      	mov	r7, r9
10015980:	4646      	mov	r6, r8
10015982:	b4c0      	push	{r6, r7}
10015984:	0416      	lsls	r6, r2, #16
10015986:	0c36      	lsrs	r6, r6, #16
10015988:	4699      	mov	r9, r3
1001598a:	0033      	movs	r3, r6
1001598c:	0405      	lsls	r5, r0, #16
1001598e:	0c2c      	lsrs	r4, r5, #16
10015990:	0c07      	lsrs	r7, r0, #16
10015992:	0c15      	lsrs	r5, r2, #16
10015994:	4363      	muls	r3, r4
10015996:	437e      	muls	r6, r7
10015998:	436f      	muls	r7, r5
1001599a:	4365      	muls	r5, r4
1001599c:	0c1c      	lsrs	r4, r3, #16
1001599e:	19ad      	adds	r5, r5, r6
100159a0:	1964      	adds	r4, r4, r5
100159a2:	469c      	mov	ip, r3
100159a4:	42a6      	cmp	r6, r4
100159a6:	d903      	bls.n	100159b0 <__aeabi_lmul+0x34>
100159a8:	2380      	movs	r3, #128	; 0x80
100159aa:	025b      	lsls	r3, r3, #9
100159ac:	4698      	mov	r8, r3
100159ae:	4447      	add	r7, r8
100159b0:	4663      	mov	r3, ip
100159b2:	0c25      	lsrs	r5, r4, #16
100159b4:	19ef      	adds	r7, r5, r7
100159b6:	041d      	lsls	r5, r3, #16
100159b8:	464b      	mov	r3, r9
100159ba:	434a      	muls	r2, r1
100159bc:	4343      	muls	r3, r0
100159be:	0c2d      	lsrs	r5, r5, #16
100159c0:	0424      	lsls	r4, r4, #16
100159c2:	1964      	adds	r4, r4, r5
100159c4:	1899      	adds	r1, r3, r2
100159c6:	19c9      	adds	r1, r1, r7
100159c8:	0020      	movs	r0, r4
100159ca:	bc0c      	pop	{r2, r3}
100159cc:	4690      	mov	r8, r2
100159ce:	4699      	mov	r9, r3
100159d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100159d2:	46c0      	nop			; (mov r8, r8)

100159d4 <__aeabi_f2uiz>:
100159d4:	219e      	movs	r1, #158	; 0x9e
100159d6:	b510      	push	{r4, lr}
100159d8:	05c9      	lsls	r1, r1, #23
100159da:	1c04      	adds	r4, r0, #0
100159dc:	f7ff ffc4 	bl	10015968 <__aeabi_fcmpge>
100159e0:	2800      	cmp	r0, #0
100159e2:	d103      	bne.n	100159ec <__aeabi_f2uiz+0x18>
100159e4:	1c20      	adds	r0, r4, #0
100159e6:	f000 fc8f 	bl	10016308 <__aeabi_f2iz>
100159ea:	bd10      	pop	{r4, pc}
100159ec:	219e      	movs	r1, #158	; 0x9e
100159ee:	1c20      	adds	r0, r4, #0
100159f0:	05c9      	lsls	r1, r1, #23
100159f2:	f000 fb03 	bl	10015ffc <__aeabi_fsub>
100159f6:	f000 fc87 	bl	10016308 <__aeabi_f2iz>
100159fa:	2380      	movs	r3, #128	; 0x80
100159fc:	061b      	lsls	r3, r3, #24
100159fe:	469c      	mov	ip, r3
10015a00:	4460      	add	r0, ip
10015a02:	e7f2      	b.n	100159ea <__aeabi_f2uiz+0x16>

10015a04 <__aeabi_d2uiz>:
10015a04:	b570      	push	{r4, r5, r6, lr}
10015a06:	2200      	movs	r2, #0
10015a08:	4b0c      	ldr	r3, [pc, #48]	; (10015a3c <__aeabi_d2uiz+0x38>)
10015a0a:	0004      	movs	r4, r0
10015a0c:	000d      	movs	r5, r1
10015a0e:	f7ff ff71 	bl	100158f4 <__aeabi_dcmpge>
10015a12:	2800      	cmp	r0, #0
10015a14:	d104      	bne.n	10015a20 <__aeabi_d2uiz+0x1c>
10015a16:	0020      	movs	r0, r4
10015a18:	0029      	movs	r1, r5
10015a1a:	f001 fbb1 	bl	10017180 <__aeabi_d2iz>
10015a1e:	bd70      	pop	{r4, r5, r6, pc}
10015a20:	4b06      	ldr	r3, [pc, #24]	; (10015a3c <__aeabi_d2uiz+0x38>)
10015a22:	2200      	movs	r2, #0
10015a24:	0020      	movs	r0, r4
10015a26:	0029      	movs	r1, r5
10015a28:	f001 f856 	bl	10016ad8 <__aeabi_dsub>
10015a2c:	f001 fba8 	bl	10017180 <__aeabi_d2iz>
10015a30:	2380      	movs	r3, #128	; 0x80
10015a32:	061b      	lsls	r3, r3, #24
10015a34:	469c      	mov	ip, r3
10015a36:	4460      	add	r0, ip
10015a38:	e7f1      	b.n	10015a1e <__aeabi_d2uiz+0x1a>
10015a3a:	46c0      	nop			; (mov r8, r8)
10015a3c:	41e00000 	.word	0x41e00000

10015a40 <__aeabi_fdiv>:
10015a40:	b5f0      	push	{r4, r5, r6, r7, lr}
10015a42:	4656      	mov	r6, sl
10015a44:	4644      	mov	r4, r8
10015a46:	465f      	mov	r7, fp
10015a48:	464d      	mov	r5, r9
10015a4a:	b4f0      	push	{r4, r5, r6, r7}
10015a4c:	0244      	lsls	r4, r0, #9
10015a4e:	0046      	lsls	r6, r0, #1
10015a50:	0fc7      	lsrs	r7, r0, #31
10015a52:	b083      	sub	sp, #12
10015a54:	4688      	mov	r8, r1
10015a56:	0a65      	lsrs	r5, r4, #9
10015a58:	0e36      	lsrs	r6, r6, #24
10015a5a:	46ba      	mov	sl, r7
10015a5c:	d03d      	beq.n	10015ada <__aeabi_fdiv+0x9a>
10015a5e:	2eff      	cmp	r6, #255	; 0xff
10015a60:	d022      	beq.n	10015aa8 <__aeabi_fdiv+0x68>
10015a62:	2300      	movs	r3, #0
10015a64:	00ec      	lsls	r4, r5, #3
10015a66:	2580      	movs	r5, #128	; 0x80
10015a68:	4699      	mov	r9, r3
10015a6a:	469b      	mov	fp, r3
10015a6c:	04ed      	lsls	r5, r5, #19
10015a6e:	4325      	orrs	r5, r4
10015a70:	3e7f      	subs	r6, #127	; 0x7f
10015a72:	4643      	mov	r3, r8
10015a74:	025c      	lsls	r4, r3, #9
10015a76:	0058      	lsls	r0, r3, #1
10015a78:	0fdb      	lsrs	r3, r3, #31
10015a7a:	0a64      	lsrs	r4, r4, #9
10015a7c:	0e00      	lsrs	r0, r0, #24
10015a7e:	4698      	mov	r8, r3
10015a80:	d036      	beq.n	10015af0 <__aeabi_fdiv+0xb0>
10015a82:	28ff      	cmp	r0, #255	; 0xff
10015a84:	d030      	beq.n	10015ae8 <__aeabi_fdiv+0xa8>
10015a86:	2380      	movs	r3, #128	; 0x80
10015a88:	2100      	movs	r1, #0
10015a8a:	00e4      	lsls	r4, r4, #3
10015a8c:	04db      	lsls	r3, r3, #19
10015a8e:	431c      	orrs	r4, r3
10015a90:	387f      	subs	r0, #127	; 0x7f
10015a92:	1a30      	subs	r0, r6, r0
10015a94:	9001      	str	r0, [sp, #4]
10015a96:	4648      	mov	r0, r9
10015a98:	4642      	mov	r2, r8
10015a9a:	4308      	orrs	r0, r1
10015a9c:	4e72      	ldr	r6, [pc, #456]	; (10015c68 <__aeabi_fdiv+0x228>)
10015a9e:	0080      	lsls	r0, r0, #2
10015aa0:	5830      	ldr	r0, [r6, r0]
10015aa2:	407a      	eors	r2, r7
10015aa4:	0013      	movs	r3, r2
10015aa6:	4687      	mov	pc, r0
10015aa8:	2d00      	cmp	r5, #0
10015aaa:	d144      	bne.n	10015b36 <__aeabi_fdiv+0xf6>
10015aac:	2308      	movs	r3, #8
10015aae:	4699      	mov	r9, r3
10015ab0:	3b06      	subs	r3, #6
10015ab2:	469b      	mov	fp, r3
10015ab4:	e7dd      	b.n	10015a72 <__aeabi_fdiv+0x32>
10015ab6:	2201      	movs	r2, #1
10015ab8:	20ff      	movs	r0, #255	; 0xff
10015aba:	2400      	movs	r4, #0
10015abc:	401a      	ands	r2, r3
10015abe:	0264      	lsls	r4, r4, #9
10015ac0:	05c3      	lsls	r3, r0, #23
10015ac2:	0a64      	lsrs	r4, r4, #9
10015ac4:	07d2      	lsls	r2, r2, #31
10015ac6:	431c      	orrs	r4, r3
10015ac8:	4314      	orrs	r4, r2
10015aca:	0020      	movs	r0, r4
10015acc:	b003      	add	sp, #12
10015ace:	bc3c      	pop	{r2, r3, r4, r5}
10015ad0:	4690      	mov	r8, r2
10015ad2:	4699      	mov	r9, r3
10015ad4:	46a2      	mov	sl, r4
10015ad6:	46ab      	mov	fp, r5
10015ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015ada:	2d00      	cmp	r5, #0
10015adc:	d120      	bne.n	10015b20 <__aeabi_fdiv+0xe0>
10015ade:	2304      	movs	r3, #4
10015ae0:	4699      	mov	r9, r3
10015ae2:	3b03      	subs	r3, #3
10015ae4:	469b      	mov	fp, r3
10015ae6:	e7c4      	b.n	10015a72 <__aeabi_fdiv+0x32>
10015ae8:	2c00      	cmp	r4, #0
10015aea:	d117      	bne.n	10015b1c <__aeabi_fdiv+0xdc>
10015aec:	2102      	movs	r1, #2
10015aee:	e002      	b.n	10015af6 <__aeabi_fdiv+0xb6>
10015af0:	2c00      	cmp	r4, #0
10015af2:	d10a      	bne.n	10015b0a <__aeabi_fdiv+0xca>
10015af4:	2101      	movs	r1, #1
10015af6:	1a32      	subs	r2, r6, r0
10015af8:	9201      	str	r2, [sp, #4]
10015afa:	464a      	mov	r2, r9
10015afc:	4643      	mov	r3, r8
10015afe:	430a      	orrs	r2, r1
10015b00:	485a      	ldr	r0, [pc, #360]	; (10015c6c <__aeabi_fdiv+0x22c>)
10015b02:	0092      	lsls	r2, r2, #2
10015b04:	5882      	ldr	r2, [r0, r2]
10015b06:	407b      	eors	r3, r7
10015b08:	4697      	mov	pc, r2
10015b0a:	0020      	movs	r0, r4
10015b0c:	f001 fba6 	bl	1001725c <__clzsi2>
10015b10:	1f43      	subs	r3, r0, #5
10015b12:	3076      	adds	r0, #118	; 0x76
10015b14:	409c      	lsls	r4, r3
10015b16:	4240      	negs	r0, r0
10015b18:	2100      	movs	r1, #0
10015b1a:	e7ba      	b.n	10015a92 <__aeabi_fdiv+0x52>
10015b1c:	2103      	movs	r1, #3
10015b1e:	e7b8      	b.n	10015a92 <__aeabi_fdiv+0x52>
10015b20:	0028      	movs	r0, r5
10015b22:	f001 fb9b 	bl	1001725c <__clzsi2>
10015b26:	1f43      	subs	r3, r0, #5
10015b28:	409d      	lsls	r5, r3
10015b2a:	2300      	movs	r3, #0
10015b2c:	3076      	adds	r0, #118	; 0x76
10015b2e:	4246      	negs	r6, r0
10015b30:	4699      	mov	r9, r3
10015b32:	469b      	mov	fp, r3
10015b34:	e79d      	b.n	10015a72 <__aeabi_fdiv+0x32>
10015b36:	230c      	movs	r3, #12
10015b38:	4699      	mov	r9, r3
10015b3a:	3b09      	subs	r3, #9
10015b3c:	469b      	mov	fp, r3
10015b3e:	e798      	b.n	10015a72 <__aeabi_fdiv+0x32>
10015b40:	2480      	movs	r4, #128	; 0x80
10015b42:	2200      	movs	r2, #0
10015b44:	03e4      	lsls	r4, r4, #15
10015b46:	20ff      	movs	r0, #255	; 0xff
10015b48:	e7b9      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015b4a:	2400      	movs	r4, #0
10015b4c:	46c2      	mov	sl, r8
10015b4e:	468b      	mov	fp, r1
10015b50:	465a      	mov	r2, fp
10015b52:	4653      	mov	r3, sl
10015b54:	2a02      	cmp	r2, #2
10015b56:	d0ae      	beq.n	10015ab6 <__aeabi_fdiv+0x76>
10015b58:	2a03      	cmp	r2, #3
10015b5a:	d07d      	beq.n	10015c58 <__aeabi_fdiv+0x218>
10015b5c:	2a01      	cmp	r2, #1
10015b5e:	d131      	bne.n	10015bc4 <__aeabi_fdiv+0x184>
10015b60:	2201      	movs	r2, #1
10015b62:	2000      	movs	r0, #0
10015b64:	401a      	ands	r2, r3
10015b66:	2400      	movs	r4, #0
10015b68:	e7a9      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015b6a:	2201      	movs	r2, #1
10015b6c:	1a10      	subs	r0, r2, r0
10015b6e:	281b      	cmp	r0, #27
10015b70:	dd56      	ble.n	10015c20 <__aeabi_fdiv+0x1e0>
10015b72:	401a      	ands	r2, r3
10015b74:	2000      	movs	r0, #0
10015b76:	2400      	movs	r4, #0
10015b78:	e7a1      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015b7a:	2380      	movs	r3, #128	; 0x80
10015b7c:	03db      	lsls	r3, r3, #15
10015b7e:	421d      	tst	r5, r3
10015b80:	d14b      	bne.n	10015c1a <__aeabi_fdiv+0x1da>
10015b82:	2380      	movs	r3, #128	; 0x80
10015b84:	03db      	lsls	r3, r3, #15
10015b86:	432b      	orrs	r3, r5
10015b88:	025c      	lsls	r4, r3, #9
10015b8a:	0a64      	lsrs	r4, r4, #9
10015b8c:	003a      	movs	r2, r7
10015b8e:	20ff      	movs	r0, #255	; 0xff
10015b90:	e795      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015b92:	016d      	lsls	r5, r5, #5
10015b94:	0160      	lsls	r0, r4, #5
10015b96:	4285      	cmp	r5, r0
10015b98:	d230      	bcs.n	10015bfc <__aeabi_fdiv+0x1bc>
10015b9a:	9a01      	ldr	r2, [sp, #4]
10015b9c:	2400      	movs	r4, #0
10015b9e:	3a01      	subs	r2, #1
10015ba0:	9201      	str	r2, [sp, #4]
10015ba2:	221b      	movs	r2, #27
10015ba4:	2701      	movs	r7, #1
10015ba6:	0029      	movs	r1, r5
10015ba8:	0064      	lsls	r4, r4, #1
10015baa:	006d      	lsls	r5, r5, #1
10015bac:	2900      	cmp	r1, #0
10015bae:	db01      	blt.n	10015bb4 <__aeabi_fdiv+0x174>
10015bb0:	42a8      	cmp	r0, r5
10015bb2:	d801      	bhi.n	10015bb8 <__aeabi_fdiv+0x178>
10015bb4:	1a2d      	subs	r5, r5, r0
10015bb6:	433c      	orrs	r4, r7
10015bb8:	3a01      	subs	r2, #1
10015bba:	2a00      	cmp	r2, #0
10015bbc:	d1f3      	bne.n	10015ba6 <__aeabi_fdiv+0x166>
10015bbe:	1e6a      	subs	r2, r5, #1
10015bc0:	4195      	sbcs	r5, r2
10015bc2:	432c      	orrs	r4, r5
10015bc4:	9801      	ldr	r0, [sp, #4]
10015bc6:	307f      	adds	r0, #127	; 0x7f
10015bc8:	2800      	cmp	r0, #0
10015bca:	ddce      	ble.n	10015b6a <__aeabi_fdiv+0x12a>
10015bcc:	0762      	lsls	r2, r4, #29
10015bce:	d004      	beq.n	10015bda <__aeabi_fdiv+0x19a>
10015bd0:	220f      	movs	r2, #15
10015bd2:	4022      	ands	r2, r4
10015bd4:	2a04      	cmp	r2, #4
10015bd6:	d000      	beq.n	10015bda <__aeabi_fdiv+0x19a>
10015bd8:	3404      	adds	r4, #4
10015bda:	0122      	lsls	r2, r4, #4
10015bdc:	d503      	bpl.n	10015be6 <__aeabi_fdiv+0x1a6>
10015bde:	4a24      	ldr	r2, [pc, #144]	; (10015c70 <__aeabi_fdiv+0x230>)
10015be0:	9801      	ldr	r0, [sp, #4]
10015be2:	4014      	ands	r4, r2
10015be4:	3080      	adds	r0, #128	; 0x80
10015be6:	28fe      	cmp	r0, #254	; 0xfe
10015be8:	dd00      	ble.n	10015bec <__aeabi_fdiv+0x1ac>
10015bea:	e764      	b.n	10015ab6 <__aeabi_fdiv+0x76>
10015bec:	2201      	movs	r2, #1
10015bee:	01a4      	lsls	r4, r4, #6
10015bf0:	0a64      	lsrs	r4, r4, #9
10015bf2:	b2c0      	uxtb	r0, r0
10015bf4:	401a      	ands	r2, r3
10015bf6:	e762      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015bf8:	002c      	movs	r4, r5
10015bfa:	e7a9      	b.n	10015b50 <__aeabi_fdiv+0x110>
10015bfc:	1a2d      	subs	r5, r5, r0
10015bfe:	221a      	movs	r2, #26
10015c00:	2401      	movs	r4, #1
10015c02:	e7cf      	b.n	10015ba4 <__aeabi_fdiv+0x164>
10015c04:	026b      	lsls	r3, r5, #9
10015c06:	d5bc      	bpl.n	10015b82 <__aeabi_fdiv+0x142>
10015c08:	2400      	movs	r4, #0
10015c0a:	2380      	movs	r3, #128	; 0x80
10015c0c:	03db      	lsls	r3, r3, #15
10015c0e:	431c      	orrs	r4, r3
10015c10:	0264      	lsls	r4, r4, #9
10015c12:	0a64      	lsrs	r4, r4, #9
10015c14:	4642      	mov	r2, r8
10015c16:	20ff      	movs	r0, #255	; 0xff
10015c18:	e751      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015c1a:	421c      	tst	r4, r3
10015c1c:	d1b3      	bne.n	10015b86 <__aeabi_fdiv+0x146>
10015c1e:	e7f4      	b.n	10015c0a <__aeabi_fdiv+0x1ca>
10015c20:	0021      	movs	r1, r4
10015c22:	2220      	movs	r2, #32
10015c24:	40c1      	lsrs	r1, r0
10015c26:	1a10      	subs	r0, r2, r0
10015c28:	4084      	lsls	r4, r0
10015c2a:	1e62      	subs	r2, r4, #1
10015c2c:	4194      	sbcs	r4, r2
10015c2e:	430c      	orrs	r4, r1
10015c30:	0762      	lsls	r2, r4, #29
10015c32:	d004      	beq.n	10015c3e <__aeabi_fdiv+0x1fe>
10015c34:	220f      	movs	r2, #15
10015c36:	4022      	ands	r2, r4
10015c38:	2a04      	cmp	r2, #4
10015c3a:	d000      	beq.n	10015c3e <__aeabi_fdiv+0x1fe>
10015c3c:	3404      	adds	r4, #4
10015c3e:	0162      	lsls	r2, r4, #5
10015c40:	d504      	bpl.n	10015c4c <__aeabi_fdiv+0x20c>
10015c42:	2201      	movs	r2, #1
10015c44:	2001      	movs	r0, #1
10015c46:	401a      	ands	r2, r3
10015c48:	2400      	movs	r4, #0
10015c4a:	e738      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015c4c:	2201      	movs	r2, #1
10015c4e:	01a4      	lsls	r4, r4, #6
10015c50:	0a64      	lsrs	r4, r4, #9
10015c52:	401a      	ands	r2, r3
10015c54:	2000      	movs	r0, #0
10015c56:	e732      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015c58:	2380      	movs	r3, #128	; 0x80
10015c5a:	03db      	lsls	r3, r3, #15
10015c5c:	431c      	orrs	r4, r3
10015c5e:	0264      	lsls	r4, r4, #9
10015c60:	0a64      	lsrs	r4, r4, #9
10015c62:	4652      	mov	r2, sl
10015c64:	20ff      	movs	r0, #255	; 0xff
10015c66:	e72a      	b.n	10015abe <__aeabi_fdiv+0x7e>
10015c68:	10019894 	.word	0x10019894
10015c6c:	100198d4 	.word	0x100198d4
10015c70:	f7ffffff 	.word	0xf7ffffff

10015c74 <__eqsf2>:
10015c74:	0243      	lsls	r3, r0, #9
10015c76:	b570      	push	{r4, r5, r6, lr}
10015c78:	0042      	lsls	r2, r0, #1
10015c7a:	004c      	lsls	r4, r1, #1
10015c7c:	0a5d      	lsrs	r5, r3, #9
10015c7e:	0fc3      	lsrs	r3, r0, #31
10015c80:	0248      	lsls	r0, r1, #9
10015c82:	0e12      	lsrs	r2, r2, #24
10015c84:	0a46      	lsrs	r6, r0, #9
10015c86:	0e24      	lsrs	r4, r4, #24
10015c88:	0fc9      	lsrs	r1, r1, #31
10015c8a:	2aff      	cmp	r2, #255	; 0xff
10015c8c:	d00f      	beq.n	10015cae <__eqsf2+0x3a>
10015c8e:	2cff      	cmp	r4, #255	; 0xff
10015c90:	d011      	beq.n	10015cb6 <__eqsf2+0x42>
10015c92:	2001      	movs	r0, #1
10015c94:	42a2      	cmp	r2, r4
10015c96:	d000      	beq.n	10015c9a <__eqsf2+0x26>
10015c98:	bd70      	pop	{r4, r5, r6, pc}
10015c9a:	42b5      	cmp	r5, r6
10015c9c:	d1fc      	bne.n	10015c98 <__eqsf2+0x24>
10015c9e:	428b      	cmp	r3, r1
10015ca0:	d00d      	beq.n	10015cbe <__eqsf2+0x4a>
10015ca2:	2a00      	cmp	r2, #0
10015ca4:	d1f8      	bne.n	10015c98 <__eqsf2+0x24>
10015ca6:	0028      	movs	r0, r5
10015ca8:	1e43      	subs	r3, r0, #1
10015caa:	4198      	sbcs	r0, r3
10015cac:	e7f4      	b.n	10015c98 <__eqsf2+0x24>
10015cae:	2001      	movs	r0, #1
10015cb0:	2d00      	cmp	r5, #0
10015cb2:	d1f1      	bne.n	10015c98 <__eqsf2+0x24>
10015cb4:	e7eb      	b.n	10015c8e <__eqsf2+0x1a>
10015cb6:	2001      	movs	r0, #1
10015cb8:	2e00      	cmp	r6, #0
10015cba:	d1ed      	bne.n	10015c98 <__eqsf2+0x24>
10015cbc:	e7e9      	b.n	10015c92 <__eqsf2+0x1e>
10015cbe:	2000      	movs	r0, #0
10015cc0:	e7ea      	b.n	10015c98 <__eqsf2+0x24>
10015cc2:	46c0      	nop			; (mov r8, r8)

10015cc4 <__gesf2>:
10015cc4:	0243      	lsls	r3, r0, #9
10015cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
10015cc8:	0042      	lsls	r2, r0, #1
10015cca:	0a5d      	lsrs	r5, r3, #9
10015ccc:	0fc3      	lsrs	r3, r0, #31
10015cce:	0248      	lsls	r0, r1, #9
10015cd0:	0a44      	lsrs	r4, r0, #9
10015cd2:	0048      	lsls	r0, r1, #1
10015cd4:	0e12      	lsrs	r2, r2, #24
10015cd6:	0e00      	lsrs	r0, r0, #24
10015cd8:	0fc9      	lsrs	r1, r1, #31
10015cda:	2aff      	cmp	r2, #255	; 0xff
10015cdc:	d01f      	beq.n	10015d1e <__gesf2+0x5a>
10015cde:	28ff      	cmp	r0, #255	; 0xff
10015ce0:	d022      	beq.n	10015d28 <__gesf2+0x64>
10015ce2:	2a00      	cmp	r2, #0
10015ce4:	d109      	bne.n	10015cfa <__gesf2+0x36>
10015ce6:	426e      	negs	r6, r5
10015ce8:	416e      	adcs	r6, r5
10015cea:	2800      	cmp	r0, #0
10015cec:	d10f      	bne.n	10015d0e <__gesf2+0x4a>
10015cee:	2c00      	cmp	r4, #0
10015cf0:	d10d      	bne.n	10015d0e <__gesf2+0x4a>
10015cf2:	2000      	movs	r0, #0
10015cf4:	2d00      	cmp	r5, #0
10015cf6:	d009      	beq.n	10015d0c <__gesf2+0x48>
10015cf8:	e005      	b.n	10015d06 <__gesf2+0x42>
10015cfa:	2800      	cmp	r0, #0
10015cfc:	d101      	bne.n	10015d02 <__gesf2+0x3e>
10015cfe:	2c00      	cmp	r4, #0
10015d00:	d001      	beq.n	10015d06 <__gesf2+0x42>
10015d02:	428b      	cmp	r3, r1
10015d04:	d013      	beq.n	10015d2e <__gesf2+0x6a>
10015d06:	4258      	negs	r0, r3
10015d08:	2301      	movs	r3, #1
10015d0a:	4318      	orrs	r0, r3
10015d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015d0e:	2e00      	cmp	r6, #0
10015d10:	d0f7      	beq.n	10015d02 <__gesf2+0x3e>
10015d12:	4248      	negs	r0, r1
10015d14:	4141      	adcs	r1, r0
10015d16:	2001      	movs	r0, #1
10015d18:	4249      	negs	r1, r1
10015d1a:	4308      	orrs	r0, r1
10015d1c:	e7f6      	b.n	10015d0c <__gesf2+0x48>
10015d1e:	2d00      	cmp	r5, #0
10015d20:	d0dd      	beq.n	10015cde <__gesf2+0x1a>
10015d22:	2002      	movs	r0, #2
10015d24:	4240      	negs	r0, r0
10015d26:	e7f1      	b.n	10015d0c <__gesf2+0x48>
10015d28:	2c00      	cmp	r4, #0
10015d2a:	d0da      	beq.n	10015ce2 <__gesf2+0x1e>
10015d2c:	e7f9      	b.n	10015d22 <__gesf2+0x5e>
10015d2e:	4282      	cmp	r2, r0
10015d30:	dce9      	bgt.n	10015d06 <__gesf2+0x42>
10015d32:	db04      	blt.n	10015d3e <__gesf2+0x7a>
10015d34:	42a5      	cmp	r5, r4
10015d36:	d8e6      	bhi.n	10015d06 <__gesf2+0x42>
10015d38:	2000      	movs	r0, #0
10015d3a:	42a5      	cmp	r5, r4
10015d3c:	d2e6      	bcs.n	10015d0c <__gesf2+0x48>
10015d3e:	4258      	negs	r0, r3
10015d40:	4143      	adcs	r3, r0
10015d42:	2001      	movs	r0, #1
10015d44:	425b      	negs	r3, r3
10015d46:	4318      	orrs	r0, r3
10015d48:	e7e0      	b.n	10015d0c <__gesf2+0x48>
10015d4a:	46c0      	nop			; (mov r8, r8)

10015d4c <__lesf2>:
10015d4c:	0243      	lsls	r3, r0, #9
10015d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
10015d50:	0042      	lsls	r2, r0, #1
10015d52:	004c      	lsls	r4, r1, #1
10015d54:	0a5e      	lsrs	r6, r3, #9
10015d56:	0fc3      	lsrs	r3, r0, #31
10015d58:	0248      	lsls	r0, r1, #9
10015d5a:	0e12      	lsrs	r2, r2, #24
10015d5c:	0a45      	lsrs	r5, r0, #9
10015d5e:	0e24      	lsrs	r4, r4, #24
10015d60:	0fc9      	lsrs	r1, r1, #31
10015d62:	2aff      	cmp	r2, #255	; 0xff
10015d64:	d017      	beq.n	10015d96 <__lesf2+0x4a>
10015d66:	2cff      	cmp	r4, #255	; 0xff
10015d68:	d019      	beq.n	10015d9e <__lesf2+0x52>
10015d6a:	2a00      	cmp	r2, #0
10015d6c:	d10b      	bne.n	10015d86 <__lesf2+0x3a>
10015d6e:	4270      	negs	r0, r6
10015d70:	4170      	adcs	r0, r6
10015d72:	2c00      	cmp	r4, #0
10015d74:	d017      	beq.n	10015da6 <__lesf2+0x5a>
10015d76:	2800      	cmp	r0, #0
10015d78:	d007      	beq.n	10015d8a <__lesf2+0x3e>
10015d7a:	4248      	negs	r0, r1
10015d7c:	4141      	adcs	r1, r0
10015d7e:	2001      	movs	r0, #1
10015d80:	4249      	negs	r1, r1
10015d82:	4308      	orrs	r0, r1
10015d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015d86:	2c00      	cmp	r4, #0
10015d88:	d013      	beq.n	10015db2 <__lesf2+0x66>
10015d8a:	428b      	cmp	r3, r1
10015d8c:	d014      	beq.n	10015db8 <__lesf2+0x6c>
10015d8e:	4258      	negs	r0, r3
10015d90:	2301      	movs	r3, #1
10015d92:	4318      	orrs	r0, r3
10015d94:	e7f6      	b.n	10015d84 <__lesf2+0x38>
10015d96:	2002      	movs	r0, #2
10015d98:	2e00      	cmp	r6, #0
10015d9a:	d1f3      	bne.n	10015d84 <__lesf2+0x38>
10015d9c:	e7e3      	b.n	10015d66 <__lesf2+0x1a>
10015d9e:	2002      	movs	r0, #2
10015da0:	2d00      	cmp	r5, #0
10015da2:	d1ef      	bne.n	10015d84 <__lesf2+0x38>
10015da4:	e7e1      	b.n	10015d6a <__lesf2+0x1e>
10015da6:	2d00      	cmp	r5, #0
10015da8:	d1e5      	bne.n	10015d76 <__lesf2+0x2a>
10015daa:	2000      	movs	r0, #0
10015dac:	2e00      	cmp	r6, #0
10015dae:	d0e9      	beq.n	10015d84 <__lesf2+0x38>
10015db0:	e7ed      	b.n	10015d8e <__lesf2+0x42>
10015db2:	2d00      	cmp	r5, #0
10015db4:	d1e9      	bne.n	10015d8a <__lesf2+0x3e>
10015db6:	e7ea      	b.n	10015d8e <__lesf2+0x42>
10015db8:	42a2      	cmp	r2, r4
10015dba:	dce8      	bgt.n	10015d8e <__lesf2+0x42>
10015dbc:	db04      	blt.n	10015dc8 <__lesf2+0x7c>
10015dbe:	42ae      	cmp	r6, r5
10015dc0:	d8e5      	bhi.n	10015d8e <__lesf2+0x42>
10015dc2:	2000      	movs	r0, #0
10015dc4:	42ae      	cmp	r6, r5
10015dc6:	d2dd      	bcs.n	10015d84 <__lesf2+0x38>
10015dc8:	4258      	negs	r0, r3
10015dca:	4143      	adcs	r3, r0
10015dcc:	2001      	movs	r0, #1
10015dce:	425b      	negs	r3, r3
10015dd0:	4318      	orrs	r0, r3
10015dd2:	e7d7      	b.n	10015d84 <__lesf2+0x38>

10015dd4 <__aeabi_fmul>:
10015dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10015dd6:	4657      	mov	r7, sl
10015dd8:	464e      	mov	r6, r9
10015dda:	4645      	mov	r5, r8
10015ddc:	0043      	lsls	r3, r0, #1
10015dde:	b4e0      	push	{r5, r6, r7}
10015de0:	0246      	lsls	r6, r0, #9
10015de2:	4688      	mov	r8, r1
10015de4:	0a76      	lsrs	r6, r6, #9
10015de6:	0e1f      	lsrs	r7, r3, #24
10015de8:	0fc4      	lsrs	r4, r0, #31
10015dea:	2f00      	cmp	r7, #0
10015dec:	d047      	beq.n	10015e7e <__aeabi_fmul+0xaa>
10015dee:	2fff      	cmp	r7, #255	; 0xff
10015df0:	d025      	beq.n	10015e3e <__aeabi_fmul+0x6a>
10015df2:	2300      	movs	r3, #0
10015df4:	2580      	movs	r5, #128	; 0x80
10015df6:	469a      	mov	sl, r3
10015df8:	4699      	mov	r9, r3
10015dfa:	00f6      	lsls	r6, r6, #3
10015dfc:	04ed      	lsls	r5, r5, #19
10015dfe:	432e      	orrs	r6, r5
10015e00:	3f7f      	subs	r7, #127	; 0x7f
10015e02:	4643      	mov	r3, r8
10015e04:	4642      	mov	r2, r8
10015e06:	025d      	lsls	r5, r3, #9
10015e08:	0fd2      	lsrs	r2, r2, #31
10015e0a:	005b      	lsls	r3, r3, #1
10015e0c:	0a6d      	lsrs	r5, r5, #9
10015e0e:	0e1b      	lsrs	r3, r3, #24
10015e10:	4690      	mov	r8, r2
10015e12:	d040      	beq.n	10015e96 <__aeabi_fmul+0xc2>
10015e14:	2bff      	cmp	r3, #255	; 0xff
10015e16:	d039      	beq.n	10015e8c <__aeabi_fmul+0xb8>
10015e18:	2280      	movs	r2, #128	; 0x80
10015e1a:	2000      	movs	r0, #0
10015e1c:	00ed      	lsls	r5, r5, #3
10015e1e:	04d2      	lsls	r2, r2, #19
10015e20:	4315      	orrs	r5, r2
10015e22:	3b7f      	subs	r3, #127	; 0x7f
10015e24:	18fb      	adds	r3, r7, r3
10015e26:	4642      	mov	r2, r8
10015e28:	4657      	mov	r7, sl
10015e2a:	1c59      	adds	r1, r3, #1
10015e2c:	4062      	eors	r2, r4
10015e2e:	468c      	mov	ip, r1
10015e30:	4307      	orrs	r7, r0
10015e32:	2f0f      	cmp	r7, #15
10015e34:	d85c      	bhi.n	10015ef0 <__aeabi_fmul+0x11c>
10015e36:	496f      	ldr	r1, [pc, #444]	; (10015ff4 <__aeabi_fmul+0x220>)
10015e38:	00bf      	lsls	r7, r7, #2
10015e3a:	59c9      	ldr	r1, [r1, r7]
10015e3c:	468f      	mov	pc, r1
10015e3e:	2e00      	cmp	r6, #0
10015e40:	d145      	bne.n	10015ece <__aeabi_fmul+0xfa>
10015e42:	2308      	movs	r3, #8
10015e44:	469a      	mov	sl, r3
10015e46:	3b06      	subs	r3, #6
10015e48:	4699      	mov	r9, r3
10015e4a:	e7da      	b.n	10015e02 <__aeabi_fmul+0x2e>
10015e4c:	4642      	mov	r2, r8
10015e4e:	2802      	cmp	r0, #2
10015e50:	d02d      	beq.n	10015eae <__aeabi_fmul+0xda>
10015e52:	2803      	cmp	r0, #3
10015e54:	d100      	bne.n	10015e58 <__aeabi_fmul+0x84>
10015e56:	e0c3      	b.n	10015fe0 <__aeabi_fmul+0x20c>
10015e58:	2801      	cmp	r0, #1
10015e5a:	d000      	beq.n	10015e5e <__aeabi_fmul+0x8a>
10015e5c:	e0a2      	b.n	10015fa4 <__aeabi_fmul+0x1d0>
10015e5e:	2500      	movs	r5, #0
10015e60:	2600      	movs	r6, #0
10015e62:	4002      	ands	r2, r0
10015e64:	b2d4      	uxtb	r4, r2
10015e66:	0276      	lsls	r6, r6, #9
10015e68:	05ed      	lsls	r5, r5, #23
10015e6a:	0a76      	lsrs	r6, r6, #9
10015e6c:	432e      	orrs	r6, r5
10015e6e:	07e4      	lsls	r4, r4, #31
10015e70:	4326      	orrs	r6, r4
10015e72:	0030      	movs	r0, r6
10015e74:	bc1c      	pop	{r2, r3, r4}
10015e76:	4690      	mov	r8, r2
10015e78:	4699      	mov	r9, r3
10015e7a:	46a2      	mov	sl, r4
10015e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015e7e:	2e00      	cmp	r6, #0
10015e80:	d11a      	bne.n	10015eb8 <__aeabi_fmul+0xe4>
10015e82:	2304      	movs	r3, #4
10015e84:	469a      	mov	sl, r3
10015e86:	3b03      	subs	r3, #3
10015e88:	4699      	mov	r9, r3
10015e8a:	e7ba      	b.n	10015e02 <__aeabi_fmul+0x2e>
10015e8c:	002a      	movs	r2, r5
10015e8e:	1e51      	subs	r1, r2, #1
10015e90:	418a      	sbcs	r2, r1
10015e92:	1c90      	adds	r0, r2, #2
10015e94:	e7c6      	b.n	10015e24 <__aeabi_fmul+0x50>
10015e96:	2001      	movs	r0, #1
10015e98:	2d00      	cmp	r5, #0
10015e9a:	d0c3      	beq.n	10015e24 <__aeabi_fmul+0x50>
10015e9c:	0028      	movs	r0, r5
10015e9e:	f001 f9dd 	bl	1001725c <__clzsi2>
10015ea2:	1f43      	subs	r3, r0, #5
10015ea4:	3076      	adds	r0, #118	; 0x76
10015ea6:	409d      	lsls	r5, r3
10015ea8:	4243      	negs	r3, r0
10015eaa:	2000      	movs	r0, #0
10015eac:	e7ba      	b.n	10015e24 <__aeabi_fmul+0x50>
10015eae:	2401      	movs	r4, #1
10015eb0:	25ff      	movs	r5, #255	; 0xff
10015eb2:	4014      	ands	r4, r2
10015eb4:	2600      	movs	r6, #0
10015eb6:	e7d6      	b.n	10015e66 <__aeabi_fmul+0x92>
10015eb8:	0030      	movs	r0, r6
10015eba:	f001 f9cf 	bl	1001725c <__clzsi2>
10015ebe:	1f43      	subs	r3, r0, #5
10015ec0:	409e      	lsls	r6, r3
10015ec2:	2300      	movs	r3, #0
10015ec4:	3076      	adds	r0, #118	; 0x76
10015ec6:	4247      	negs	r7, r0
10015ec8:	469a      	mov	sl, r3
10015eca:	4699      	mov	r9, r3
10015ecc:	e799      	b.n	10015e02 <__aeabi_fmul+0x2e>
10015ece:	230c      	movs	r3, #12
10015ed0:	469a      	mov	sl, r3
10015ed2:	3b09      	subs	r3, #9
10015ed4:	4699      	mov	r9, r3
10015ed6:	e794      	b.n	10015e02 <__aeabi_fmul+0x2e>
10015ed8:	2680      	movs	r6, #128	; 0x80
10015eda:	2400      	movs	r4, #0
10015edc:	03f6      	lsls	r6, r6, #15
10015ede:	25ff      	movs	r5, #255	; 0xff
10015ee0:	e7c1      	b.n	10015e66 <__aeabi_fmul+0x92>
10015ee2:	0035      	movs	r5, r6
10015ee4:	4648      	mov	r0, r9
10015ee6:	e7b2      	b.n	10015e4e <__aeabi_fmul+0x7a>
10015ee8:	0035      	movs	r5, r6
10015eea:	0022      	movs	r2, r4
10015eec:	4648      	mov	r0, r9
10015eee:	e7ae      	b.n	10015e4e <__aeabi_fmul+0x7a>
10015ef0:	0429      	lsls	r1, r5, #16
10015ef2:	0c09      	lsrs	r1, r1, #16
10015ef4:	0008      	movs	r0, r1
10015ef6:	0c37      	lsrs	r7, r6, #16
10015ef8:	0436      	lsls	r6, r6, #16
10015efa:	0c36      	lsrs	r6, r6, #16
10015efc:	0c2c      	lsrs	r4, r5, #16
10015efe:	4379      	muls	r1, r7
10015f00:	4370      	muls	r0, r6
10015f02:	4367      	muls	r7, r4
10015f04:	4374      	muls	r4, r6
10015f06:	0c06      	lsrs	r6, r0, #16
10015f08:	1864      	adds	r4, r4, r1
10015f0a:	1936      	adds	r6, r6, r4
10015f0c:	42b1      	cmp	r1, r6
10015f0e:	d903      	bls.n	10015f18 <__aeabi_fmul+0x144>
10015f10:	2180      	movs	r1, #128	; 0x80
10015f12:	0249      	lsls	r1, r1, #9
10015f14:	4688      	mov	r8, r1
10015f16:	4447      	add	r7, r8
10015f18:	0400      	lsls	r0, r0, #16
10015f1a:	0c00      	lsrs	r0, r0, #16
10015f1c:	0431      	lsls	r1, r6, #16
10015f1e:	1809      	adds	r1, r1, r0
10015f20:	018d      	lsls	r5, r1, #6
10015f22:	1e68      	subs	r0, r5, #1
10015f24:	4185      	sbcs	r5, r0
10015f26:	0e89      	lsrs	r1, r1, #26
10015f28:	4329      	orrs	r1, r5
10015f2a:	0c35      	lsrs	r5, r6, #16
10015f2c:	19ed      	adds	r5, r5, r7
10015f2e:	01ad      	lsls	r5, r5, #6
10015f30:	430d      	orrs	r5, r1
10015f32:	0129      	lsls	r1, r5, #4
10015f34:	d504      	bpl.n	10015f40 <__aeabi_fmul+0x16c>
10015f36:	2301      	movs	r3, #1
10015f38:	0869      	lsrs	r1, r5, #1
10015f3a:	401d      	ands	r5, r3
10015f3c:	4663      	mov	r3, ip
10015f3e:	430d      	orrs	r5, r1
10015f40:	0019      	movs	r1, r3
10015f42:	317f      	adds	r1, #127	; 0x7f
10015f44:	2900      	cmp	r1, #0
10015f46:	dd25      	ble.n	10015f94 <__aeabi_fmul+0x1c0>
10015f48:	0768      	lsls	r0, r5, #29
10015f4a:	d004      	beq.n	10015f56 <__aeabi_fmul+0x182>
10015f4c:	200f      	movs	r0, #15
10015f4e:	4028      	ands	r0, r5
10015f50:	2804      	cmp	r0, #4
10015f52:	d000      	beq.n	10015f56 <__aeabi_fmul+0x182>
10015f54:	3504      	adds	r5, #4
10015f56:	0128      	lsls	r0, r5, #4
10015f58:	d503      	bpl.n	10015f62 <__aeabi_fmul+0x18e>
10015f5a:	4927      	ldr	r1, [pc, #156]	; (10015ff8 <__aeabi_fmul+0x224>)
10015f5c:	3380      	adds	r3, #128	; 0x80
10015f5e:	400d      	ands	r5, r1
10015f60:	0019      	movs	r1, r3
10015f62:	29fe      	cmp	r1, #254	; 0xfe
10015f64:	dca3      	bgt.n	10015eae <__aeabi_fmul+0xda>
10015f66:	2401      	movs	r4, #1
10015f68:	01ad      	lsls	r5, r5, #6
10015f6a:	0a6e      	lsrs	r6, r5, #9
10015f6c:	4014      	ands	r4, r2
10015f6e:	b2cd      	uxtb	r5, r1
10015f70:	e779      	b.n	10015e66 <__aeabi_fmul+0x92>
10015f72:	2080      	movs	r0, #128	; 0x80
10015f74:	03c0      	lsls	r0, r0, #15
10015f76:	4206      	tst	r6, r0
10015f78:	d007      	beq.n	10015f8a <__aeabi_fmul+0x1b6>
10015f7a:	4205      	tst	r5, r0
10015f7c:	d105      	bne.n	10015f8a <__aeabi_fmul+0x1b6>
10015f7e:	4328      	orrs	r0, r5
10015f80:	0246      	lsls	r6, r0, #9
10015f82:	0a76      	lsrs	r6, r6, #9
10015f84:	4644      	mov	r4, r8
10015f86:	25ff      	movs	r5, #255	; 0xff
10015f88:	e76d      	b.n	10015e66 <__aeabi_fmul+0x92>
10015f8a:	4306      	orrs	r6, r0
10015f8c:	0276      	lsls	r6, r6, #9
10015f8e:	0a76      	lsrs	r6, r6, #9
10015f90:	25ff      	movs	r5, #255	; 0xff
10015f92:	e768      	b.n	10015e66 <__aeabi_fmul+0x92>
10015f94:	2401      	movs	r4, #1
10015f96:	1a61      	subs	r1, r4, r1
10015f98:	291b      	cmp	r1, #27
10015f9a:	dd05      	ble.n	10015fa8 <__aeabi_fmul+0x1d4>
10015f9c:	4014      	ands	r4, r2
10015f9e:	2500      	movs	r5, #0
10015fa0:	2600      	movs	r6, #0
10015fa2:	e760      	b.n	10015e66 <__aeabi_fmul+0x92>
10015fa4:	4663      	mov	r3, ip
10015fa6:	e7cb      	b.n	10015f40 <__aeabi_fmul+0x16c>
10015fa8:	002e      	movs	r6, r5
10015faa:	2320      	movs	r3, #32
10015fac:	40ce      	lsrs	r6, r1
10015fae:	1a59      	subs	r1, r3, r1
10015fb0:	408d      	lsls	r5, r1
10015fb2:	1e6b      	subs	r3, r5, #1
10015fb4:	419d      	sbcs	r5, r3
10015fb6:	432e      	orrs	r6, r5
10015fb8:	0773      	lsls	r3, r6, #29
10015fba:	d004      	beq.n	10015fc6 <__aeabi_fmul+0x1f2>
10015fbc:	230f      	movs	r3, #15
10015fbe:	4033      	ands	r3, r6
10015fc0:	2b04      	cmp	r3, #4
10015fc2:	d000      	beq.n	10015fc6 <__aeabi_fmul+0x1f2>
10015fc4:	3604      	adds	r6, #4
10015fc6:	0173      	lsls	r3, r6, #5
10015fc8:	d504      	bpl.n	10015fd4 <__aeabi_fmul+0x200>
10015fca:	2401      	movs	r4, #1
10015fcc:	2501      	movs	r5, #1
10015fce:	4014      	ands	r4, r2
10015fd0:	2600      	movs	r6, #0
10015fd2:	e748      	b.n	10015e66 <__aeabi_fmul+0x92>
10015fd4:	2401      	movs	r4, #1
10015fd6:	01b6      	lsls	r6, r6, #6
10015fd8:	0a76      	lsrs	r6, r6, #9
10015fda:	4014      	ands	r4, r2
10015fdc:	2500      	movs	r5, #0
10015fde:	e742      	b.n	10015e66 <__aeabi_fmul+0x92>
10015fe0:	2680      	movs	r6, #128	; 0x80
10015fe2:	2401      	movs	r4, #1
10015fe4:	03f6      	lsls	r6, r6, #15
10015fe6:	432e      	orrs	r6, r5
10015fe8:	0276      	lsls	r6, r6, #9
10015fea:	0a76      	lsrs	r6, r6, #9
10015fec:	4014      	ands	r4, r2
10015fee:	25ff      	movs	r5, #255	; 0xff
10015ff0:	e739      	b.n	10015e66 <__aeabi_fmul+0x92>
10015ff2:	46c0      	nop			; (mov r8, r8)
10015ff4:	10019914 	.word	0x10019914
10015ff8:	f7ffffff 	.word	0xf7ffffff

10015ffc <__aeabi_fsub>:
10015ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015ffe:	024a      	lsls	r2, r1, #9
10016000:	004e      	lsls	r6, r1, #1
10016002:	0243      	lsls	r3, r0, #9
10016004:	0044      	lsls	r4, r0, #1
10016006:	0e24      	lsrs	r4, r4, #24
10016008:	0fc5      	lsrs	r5, r0, #31
1001600a:	099b      	lsrs	r3, r3, #6
1001600c:	0e36      	lsrs	r6, r6, #24
1001600e:	0fc9      	lsrs	r1, r1, #31
10016010:	0992      	lsrs	r2, r2, #6
10016012:	2eff      	cmp	r6, #255	; 0xff
10016014:	d100      	bne.n	10016018 <__aeabi_fsub+0x1c>
10016016:	e083      	b.n	10016120 <__aeabi_fsub+0x124>
10016018:	2001      	movs	r0, #1
1001601a:	4041      	eors	r1, r0
1001601c:	1ba0      	subs	r0, r4, r6
1001601e:	42a9      	cmp	r1, r5
10016020:	d05c      	beq.n	100160dc <__aeabi_fsub+0xe0>
10016022:	2800      	cmp	r0, #0
10016024:	dc00      	bgt.n	10016028 <__aeabi_fsub+0x2c>
10016026:	e095      	b.n	10016154 <__aeabi_fsub+0x158>
10016028:	2e00      	cmp	r6, #0
1001602a:	d11c      	bne.n	10016066 <__aeabi_fsub+0x6a>
1001602c:	2a00      	cmp	r2, #0
1001602e:	d000      	beq.n	10016032 <__aeabi_fsub+0x36>
10016030:	e081      	b.n	10016136 <__aeabi_fsub+0x13a>
10016032:	075a      	lsls	r2, r3, #29
10016034:	d004      	beq.n	10016040 <__aeabi_fsub+0x44>
10016036:	220f      	movs	r2, #15
10016038:	401a      	ands	r2, r3
1001603a:	2a04      	cmp	r2, #4
1001603c:	d000      	beq.n	10016040 <__aeabi_fsub+0x44>
1001603e:	3304      	adds	r3, #4
10016040:	015a      	lsls	r2, r3, #5
10016042:	d53b      	bpl.n	100160bc <__aeabi_fsub+0xc0>
10016044:	3401      	adds	r4, #1
10016046:	2cff      	cmp	r4, #255	; 0xff
10016048:	d100      	bne.n	1001604c <__aeabi_fsub+0x50>
1001604a:	e091      	b.n	10016170 <__aeabi_fsub+0x174>
1001604c:	2001      	movs	r0, #1
1001604e:	019b      	lsls	r3, r3, #6
10016050:	0a5b      	lsrs	r3, r3, #9
10016052:	b2e4      	uxtb	r4, r4
10016054:	4005      	ands	r5, r0
10016056:	025b      	lsls	r3, r3, #9
10016058:	05e4      	lsls	r4, r4, #23
1001605a:	0a5b      	lsrs	r3, r3, #9
1001605c:	07ed      	lsls	r5, r5, #31
1001605e:	4323      	orrs	r3, r4
10016060:	432b      	orrs	r3, r5
10016062:	0018      	movs	r0, r3
10016064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016066:	2cff      	cmp	r4, #255	; 0xff
10016068:	d0e3      	beq.n	10016032 <__aeabi_fsub+0x36>
1001606a:	2180      	movs	r1, #128	; 0x80
1001606c:	04c9      	lsls	r1, r1, #19
1001606e:	430a      	orrs	r2, r1
10016070:	281b      	cmp	r0, #27
10016072:	dd00      	ble.n	10016076 <__aeabi_fsub+0x7a>
10016074:	e090      	b.n	10016198 <__aeabi_fsub+0x19c>
10016076:	0016      	movs	r6, r2
10016078:	2120      	movs	r1, #32
1001607a:	40c6      	lsrs	r6, r0
1001607c:	1a08      	subs	r0, r1, r0
1001607e:	4082      	lsls	r2, r0
10016080:	1e51      	subs	r1, r2, #1
10016082:	418a      	sbcs	r2, r1
10016084:	4332      	orrs	r2, r6
10016086:	1a9b      	subs	r3, r3, r2
10016088:	015a      	lsls	r2, r3, #5
1001608a:	d515      	bpl.n	100160b8 <__aeabi_fsub+0xbc>
1001608c:	019b      	lsls	r3, r3, #6
1001608e:	099e      	lsrs	r6, r3, #6
10016090:	0030      	movs	r0, r6
10016092:	f001 f8e3 	bl	1001725c <__clzsi2>
10016096:	3805      	subs	r0, #5
10016098:	4086      	lsls	r6, r0
1001609a:	4284      	cmp	r4, r0
1001609c:	dc6c      	bgt.n	10016178 <__aeabi_fsub+0x17c>
1001609e:	1b04      	subs	r4, r0, r4
100160a0:	0033      	movs	r3, r6
100160a2:	2020      	movs	r0, #32
100160a4:	3401      	adds	r4, #1
100160a6:	40e3      	lsrs	r3, r4
100160a8:	1b04      	subs	r4, r0, r4
100160aa:	40a6      	lsls	r6, r4
100160ac:	1e72      	subs	r2, r6, #1
100160ae:	4196      	sbcs	r6, r2
100160b0:	2400      	movs	r4, #0
100160b2:	4333      	orrs	r3, r6
100160b4:	e7bd      	b.n	10016032 <__aeabi_fsub+0x36>
100160b6:	000d      	movs	r5, r1
100160b8:	075a      	lsls	r2, r3, #29
100160ba:	d1bc      	bne.n	10016036 <__aeabi_fsub+0x3a>
100160bc:	08df      	lsrs	r7, r3, #3
100160be:	2301      	movs	r3, #1
100160c0:	401d      	ands	r5, r3
100160c2:	2cff      	cmp	r4, #255	; 0xff
100160c4:	d133      	bne.n	1001612e <__aeabi_fsub+0x132>
100160c6:	2f00      	cmp	r7, #0
100160c8:	d100      	bne.n	100160cc <__aeabi_fsub+0xd0>
100160ca:	e090      	b.n	100161ee <__aeabi_fsub+0x1f2>
100160cc:	2280      	movs	r2, #128	; 0x80
100160ce:	03d2      	lsls	r2, r2, #15
100160d0:	0013      	movs	r3, r2
100160d2:	433b      	orrs	r3, r7
100160d4:	025b      	lsls	r3, r3, #9
100160d6:	0a5b      	lsrs	r3, r3, #9
100160d8:	24ff      	movs	r4, #255	; 0xff
100160da:	e7bc      	b.n	10016056 <__aeabi_fsub+0x5a>
100160dc:	2800      	cmp	r0, #0
100160de:	dd4f      	ble.n	10016180 <__aeabi_fsub+0x184>
100160e0:	2e00      	cmp	r6, #0
100160e2:	d02e      	beq.n	10016142 <__aeabi_fsub+0x146>
100160e4:	2cff      	cmp	r4, #255	; 0xff
100160e6:	d0a4      	beq.n	10016032 <__aeabi_fsub+0x36>
100160e8:	2580      	movs	r5, #128	; 0x80
100160ea:	04ed      	lsls	r5, r5, #19
100160ec:	432a      	orrs	r2, r5
100160ee:	281b      	cmp	r0, #27
100160f0:	dd00      	ble.n	100160f4 <__aeabi_fsub+0xf8>
100160f2:	e097      	b.n	10016224 <__aeabi_fsub+0x228>
100160f4:	0016      	movs	r6, r2
100160f6:	2520      	movs	r5, #32
100160f8:	40c6      	lsrs	r6, r0
100160fa:	1a28      	subs	r0, r5, r0
100160fc:	4082      	lsls	r2, r0
100160fe:	1e50      	subs	r0, r2, #1
10016100:	4182      	sbcs	r2, r0
10016102:	4332      	orrs	r2, r6
10016104:	189b      	adds	r3, r3, r2
10016106:	015a      	lsls	r2, r3, #5
10016108:	d5d5      	bpl.n	100160b6 <__aeabi_fsub+0xba>
1001610a:	3401      	adds	r4, #1
1001610c:	2cff      	cmp	r4, #255	; 0xff
1001610e:	d06d      	beq.n	100161ec <__aeabi_fsub+0x1f0>
10016110:	2201      	movs	r2, #1
10016112:	487b      	ldr	r0, [pc, #492]	; (10016300 <__aeabi_fsub+0x304>)
10016114:	401a      	ands	r2, r3
10016116:	085b      	lsrs	r3, r3, #1
10016118:	4003      	ands	r3, r0
1001611a:	4313      	orrs	r3, r2
1001611c:	000d      	movs	r5, r1
1001611e:	e788      	b.n	10016032 <__aeabi_fsub+0x36>
10016120:	2a00      	cmp	r2, #0
10016122:	d000      	beq.n	10016126 <__aeabi_fsub+0x12a>
10016124:	e77a      	b.n	1001601c <__aeabi_fsub+0x20>
10016126:	e777      	b.n	10016018 <__aeabi_fsub+0x1c>
10016128:	1e03      	subs	r3, r0, #0
1001612a:	d1c5      	bne.n	100160b8 <__aeabi_fsub+0xbc>
1001612c:	2500      	movs	r5, #0
1001612e:	027b      	lsls	r3, r7, #9
10016130:	0a5b      	lsrs	r3, r3, #9
10016132:	b2e4      	uxtb	r4, r4
10016134:	e78f      	b.n	10016056 <__aeabi_fsub+0x5a>
10016136:	3801      	subs	r0, #1
10016138:	2800      	cmp	r0, #0
1001613a:	d0a4      	beq.n	10016086 <__aeabi_fsub+0x8a>
1001613c:	2cff      	cmp	r4, #255	; 0xff
1001613e:	d197      	bne.n	10016070 <__aeabi_fsub+0x74>
10016140:	e777      	b.n	10016032 <__aeabi_fsub+0x36>
10016142:	2a00      	cmp	r2, #0
10016144:	d100      	bne.n	10016148 <__aeabi_fsub+0x14c>
10016146:	e774      	b.n	10016032 <__aeabi_fsub+0x36>
10016148:	3801      	subs	r0, #1
1001614a:	2800      	cmp	r0, #0
1001614c:	d0da      	beq.n	10016104 <__aeabi_fsub+0x108>
1001614e:	2cff      	cmp	r4, #255	; 0xff
10016150:	d1cd      	bne.n	100160ee <__aeabi_fsub+0xf2>
10016152:	e76e      	b.n	10016032 <__aeabi_fsub+0x36>
10016154:	2800      	cmp	r0, #0
10016156:	d121      	bne.n	1001619c <__aeabi_fsub+0x1a0>
10016158:	1c60      	adds	r0, r4, #1
1001615a:	b2c0      	uxtb	r0, r0
1001615c:	2801      	cmp	r0, #1
1001615e:	dd58      	ble.n	10016212 <__aeabi_fsub+0x216>
10016160:	2780      	movs	r7, #128	; 0x80
10016162:	1a9e      	subs	r6, r3, r2
10016164:	04ff      	lsls	r7, r7, #19
10016166:	4037      	ands	r7, r6
10016168:	d02f      	beq.n	100161ca <__aeabi_fsub+0x1ce>
1001616a:	1ad6      	subs	r6, r2, r3
1001616c:	000d      	movs	r5, r1
1001616e:	e78f      	b.n	10016090 <__aeabi_fsub+0x94>
10016170:	2301      	movs	r3, #1
10016172:	401d      	ands	r5, r3
10016174:	2300      	movs	r3, #0
10016176:	e76e      	b.n	10016056 <__aeabi_fsub+0x5a>
10016178:	4b62      	ldr	r3, [pc, #392]	; (10016304 <__aeabi_fsub+0x308>)
1001617a:	1a24      	subs	r4, r4, r0
1001617c:	4033      	ands	r3, r6
1001617e:	e758      	b.n	10016032 <__aeabi_fsub+0x36>
10016180:	2800      	cmp	r0, #0
10016182:	d151      	bne.n	10016228 <__aeabi_fsub+0x22c>
10016184:	1c60      	adds	r0, r4, #1
10016186:	b2c6      	uxtb	r6, r0
10016188:	2e01      	cmp	r6, #1
1001618a:	dd33      	ble.n	100161f4 <__aeabi_fsub+0x1f8>
1001618c:	28ff      	cmp	r0, #255	; 0xff
1001618e:	d02d      	beq.n	100161ec <__aeabi_fsub+0x1f0>
10016190:	189b      	adds	r3, r3, r2
10016192:	085b      	lsrs	r3, r3, #1
10016194:	0004      	movs	r4, r0
10016196:	e74c      	b.n	10016032 <__aeabi_fsub+0x36>
10016198:	2201      	movs	r2, #1
1001619a:	e774      	b.n	10016086 <__aeabi_fsub+0x8a>
1001619c:	2c00      	cmp	r4, #0
1001619e:	d01a      	beq.n	100161d6 <__aeabi_fsub+0x1da>
100161a0:	2eff      	cmp	r6, #255	; 0xff
100161a2:	d01f      	beq.n	100161e4 <__aeabi_fsub+0x1e8>
100161a4:	2480      	movs	r4, #128	; 0x80
100161a6:	04e4      	lsls	r4, r4, #19
100161a8:	4240      	negs	r0, r0
100161aa:	4323      	orrs	r3, r4
100161ac:	281b      	cmp	r0, #27
100161ae:	dd00      	ble.n	100161b2 <__aeabi_fsub+0x1b6>
100161b0:	e096      	b.n	100162e0 <__aeabi_fsub+0x2e4>
100161b2:	001d      	movs	r5, r3
100161b4:	2420      	movs	r4, #32
100161b6:	40c5      	lsrs	r5, r0
100161b8:	1a20      	subs	r0, r4, r0
100161ba:	4083      	lsls	r3, r0
100161bc:	1e58      	subs	r0, r3, #1
100161be:	4183      	sbcs	r3, r0
100161c0:	432b      	orrs	r3, r5
100161c2:	1ad3      	subs	r3, r2, r3
100161c4:	0034      	movs	r4, r6
100161c6:	000d      	movs	r5, r1
100161c8:	e75e      	b.n	10016088 <__aeabi_fsub+0x8c>
100161ca:	2e00      	cmp	r6, #0
100161cc:	d000      	beq.n	100161d0 <__aeabi_fsub+0x1d4>
100161ce:	e75f      	b.n	10016090 <__aeabi_fsub+0x94>
100161d0:	2500      	movs	r5, #0
100161d2:	2400      	movs	r4, #0
100161d4:	e7ab      	b.n	1001612e <__aeabi_fsub+0x132>
100161d6:	2b00      	cmp	r3, #0
100161d8:	d044      	beq.n	10016264 <__aeabi_fsub+0x268>
100161da:	43c0      	mvns	r0, r0
100161dc:	2800      	cmp	r0, #0
100161de:	d0f0      	beq.n	100161c2 <__aeabi_fsub+0x1c6>
100161e0:	2eff      	cmp	r6, #255	; 0xff
100161e2:	d1e3      	bne.n	100161ac <__aeabi_fsub+0x1b0>
100161e4:	0013      	movs	r3, r2
100161e6:	24ff      	movs	r4, #255	; 0xff
100161e8:	000d      	movs	r5, r1
100161ea:	e722      	b.n	10016032 <__aeabi_fsub+0x36>
100161ec:	000d      	movs	r5, r1
100161ee:	24ff      	movs	r4, #255	; 0xff
100161f0:	2300      	movs	r3, #0
100161f2:	e730      	b.n	10016056 <__aeabi_fsub+0x5a>
100161f4:	2c00      	cmp	r4, #0
100161f6:	d15d      	bne.n	100162b4 <__aeabi_fsub+0x2b8>
100161f8:	2b00      	cmp	r3, #0
100161fa:	d07d      	beq.n	100162f8 <__aeabi_fsub+0x2fc>
100161fc:	2a00      	cmp	r2, #0
100161fe:	d100      	bne.n	10016202 <__aeabi_fsub+0x206>
10016200:	e717      	b.n	10016032 <__aeabi_fsub+0x36>
10016202:	189b      	adds	r3, r3, r2
10016204:	015a      	lsls	r2, r3, #5
10016206:	d400      	bmi.n	1001620a <__aeabi_fsub+0x20e>
10016208:	e756      	b.n	100160b8 <__aeabi_fsub+0xbc>
1001620a:	4a3e      	ldr	r2, [pc, #248]	; (10016304 <__aeabi_fsub+0x308>)
1001620c:	0004      	movs	r4, r0
1001620e:	4013      	ands	r3, r2
10016210:	e70f      	b.n	10016032 <__aeabi_fsub+0x36>
10016212:	2c00      	cmp	r4, #0
10016214:	d11e      	bne.n	10016254 <__aeabi_fsub+0x258>
10016216:	2b00      	cmp	r3, #0
10016218:	d12f      	bne.n	1001627a <__aeabi_fsub+0x27e>
1001621a:	2a00      	cmp	r2, #0
1001621c:	d065      	beq.n	100162ea <__aeabi_fsub+0x2ee>
1001621e:	0013      	movs	r3, r2
10016220:	000d      	movs	r5, r1
10016222:	e706      	b.n	10016032 <__aeabi_fsub+0x36>
10016224:	2201      	movs	r2, #1
10016226:	e76d      	b.n	10016104 <__aeabi_fsub+0x108>
10016228:	2c00      	cmp	r4, #0
1001622a:	d11f      	bne.n	1001626c <__aeabi_fsub+0x270>
1001622c:	2b00      	cmp	r3, #0
1001622e:	d059      	beq.n	100162e4 <__aeabi_fsub+0x2e8>
10016230:	43c0      	mvns	r0, r0
10016232:	2800      	cmp	r0, #0
10016234:	d00b      	beq.n	1001624e <__aeabi_fsub+0x252>
10016236:	2eff      	cmp	r6, #255	; 0xff
10016238:	d04f      	beq.n	100162da <__aeabi_fsub+0x2de>
1001623a:	281b      	cmp	r0, #27
1001623c:	dc5e      	bgt.n	100162fc <__aeabi_fsub+0x300>
1001623e:	001d      	movs	r5, r3
10016240:	2420      	movs	r4, #32
10016242:	40c5      	lsrs	r5, r0
10016244:	1a20      	subs	r0, r4, r0
10016246:	4083      	lsls	r3, r0
10016248:	1e58      	subs	r0, r3, #1
1001624a:	4183      	sbcs	r3, r0
1001624c:	432b      	orrs	r3, r5
1001624e:	189b      	adds	r3, r3, r2
10016250:	0034      	movs	r4, r6
10016252:	e758      	b.n	10016106 <__aeabi_fsub+0x10a>
10016254:	2b00      	cmp	r3, #0
10016256:	d11c      	bne.n	10016292 <__aeabi_fsub+0x296>
10016258:	2a00      	cmp	r2, #0
1001625a:	d049      	beq.n	100162f0 <__aeabi_fsub+0x2f4>
1001625c:	0013      	movs	r3, r2
1001625e:	000d      	movs	r5, r1
10016260:	24ff      	movs	r4, #255	; 0xff
10016262:	e6e6      	b.n	10016032 <__aeabi_fsub+0x36>
10016264:	0013      	movs	r3, r2
10016266:	0034      	movs	r4, r6
10016268:	000d      	movs	r5, r1
1001626a:	e6e2      	b.n	10016032 <__aeabi_fsub+0x36>
1001626c:	2eff      	cmp	r6, #255	; 0xff
1001626e:	d034      	beq.n	100162da <__aeabi_fsub+0x2de>
10016270:	2480      	movs	r4, #128	; 0x80
10016272:	04e4      	lsls	r4, r4, #19
10016274:	4240      	negs	r0, r0
10016276:	4323      	orrs	r3, r4
10016278:	e7df      	b.n	1001623a <__aeabi_fsub+0x23e>
1001627a:	2a00      	cmp	r2, #0
1001627c:	d100      	bne.n	10016280 <__aeabi_fsub+0x284>
1001627e:	e6d8      	b.n	10016032 <__aeabi_fsub+0x36>
10016280:	2780      	movs	r7, #128	; 0x80
10016282:	1a98      	subs	r0, r3, r2
10016284:	04ff      	lsls	r7, r7, #19
10016286:	4007      	ands	r7, r0
10016288:	d100      	bne.n	1001628c <__aeabi_fsub+0x290>
1001628a:	e74d      	b.n	10016128 <__aeabi_fsub+0x12c>
1001628c:	1ad3      	subs	r3, r2, r3
1001628e:	000d      	movs	r5, r1
10016290:	e6cf      	b.n	10016032 <__aeabi_fsub+0x36>
10016292:	24ff      	movs	r4, #255	; 0xff
10016294:	2a00      	cmp	r2, #0
10016296:	d100      	bne.n	1001629a <__aeabi_fsub+0x29e>
10016298:	e6cb      	b.n	10016032 <__aeabi_fsub+0x36>
1001629a:	2080      	movs	r0, #128	; 0x80
1001629c:	08db      	lsrs	r3, r3, #3
1001629e:	03c0      	lsls	r0, r0, #15
100162a0:	4203      	tst	r3, r0
100162a2:	d004      	beq.n	100162ae <__aeabi_fsub+0x2b2>
100162a4:	08d2      	lsrs	r2, r2, #3
100162a6:	4202      	tst	r2, r0
100162a8:	d101      	bne.n	100162ae <__aeabi_fsub+0x2b2>
100162aa:	0013      	movs	r3, r2
100162ac:	000d      	movs	r5, r1
100162ae:	00db      	lsls	r3, r3, #3
100162b0:	24ff      	movs	r4, #255	; 0xff
100162b2:	e6be      	b.n	10016032 <__aeabi_fsub+0x36>
100162b4:	2b00      	cmp	r3, #0
100162b6:	d010      	beq.n	100162da <__aeabi_fsub+0x2de>
100162b8:	24ff      	movs	r4, #255	; 0xff
100162ba:	2a00      	cmp	r2, #0
100162bc:	d100      	bne.n	100162c0 <__aeabi_fsub+0x2c4>
100162be:	e6b8      	b.n	10016032 <__aeabi_fsub+0x36>
100162c0:	2080      	movs	r0, #128	; 0x80
100162c2:	08db      	lsrs	r3, r3, #3
100162c4:	03c0      	lsls	r0, r0, #15
100162c6:	4203      	tst	r3, r0
100162c8:	d003      	beq.n	100162d2 <__aeabi_fsub+0x2d6>
100162ca:	08d2      	lsrs	r2, r2, #3
100162cc:	4202      	tst	r2, r0
100162ce:	d100      	bne.n	100162d2 <__aeabi_fsub+0x2d6>
100162d0:	0013      	movs	r3, r2
100162d2:	00db      	lsls	r3, r3, #3
100162d4:	000d      	movs	r5, r1
100162d6:	24ff      	movs	r4, #255	; 0xff
100162d8:	e6ab      	b.n	10016032 <__aeabi_fsub+0x36>
100162da:	0013      	movs	r3, r2
100162dc:	24ff      	movs	r4, #255	; 0xff
100162de:	e6a8      	b.n	10016032 <__aeabi_fsub+0x36>
100162e0:	2301      	movs	r3, #1
100162e2:	e76e      	b.n	100161c2 <__aeabi_fsub+0x1c6>
100162e4:	0013      	movs	r3, r2
100162e6:	0034      	movs	r4, r6
100162e8:	e6a3      	b.n	10016032 <__aeabi_fsub+0x36>
100162ea:	2700      	movs	r7, #0
100162ec:	2500      	movs	r5, #0
100162ee:	e71e      	b.n	1001612e <__aeabi_fsub+0x132>
100162f0:	2780      	movs	r7, #128	; 0x80
100162f2:	2500      	movs	r5, #0
100162f4:	03ff      	lsls	r7, r7, #15
100162f6:	e6e9      	b.n	100160cc <__aeabi_fsub+0xd0>
100162f8:	0013      	movs	r3, r2
100162fa:	e69a      	b.n	10016032 <__aeabi_fsub+0x36>
100162fc:	2301      	movs	r3, #1
100162fe:	e7a6      	b.n	1001624e <__aeabi_fsub+0x252>
10016300:	7dffffff 	.word	0x7dffffff
10016304:	fbffffff 	.word	0xfbffffff

10016308 <__aeabi_f2iz>:
10016308:	0243      	lsls	r3, r0, #9
1001630a:	0a59      	lsrs	r1, r3, #9
1001630c:	0043      	lsls	r3, r0, #1
1001630e:	0fc2      	lsrs	r2, r0, #31
10016310:	0e1b      	lsrs	r3, r3, #24
10016312:	2000      	movs	r0, #0
10016314:	2b7e      	cmp	r3, #126	; 0x7e
10016316:	dd0e      	ble.n	10016336 <__aeabi_f2iz+0x2e>
10016318:	2b9d      	cmp	r3, #157	; 0x9d
1001631a:	dc0d      	bgt.n	10016338 <__aeabi_f2iz+0x30>
1001631c:	2080      	movs	r0, #128	; 0x80
1001631e:	0400      	lsls	r0, r0, #16
10016320:	4301      	orrs	r1, r0
10016322:	2b95      	cmp	r3, #149	; 0x95
10016324:	dc0b      	bgt.n	1001633e <__aeabi_f2iz+0x36>
10016326:	2096      	movs	r0, #150	; 0x96
10016328:	1ac3      	subs	r3, r0, r3
1001632a:	40d9      	lsrs	r1, r3
1001632c:	000b      	movs	r3, r1
1001632e:	4258      	negs	r0, r3
10016330:	2a00      	cmp	r2, #0
10016332:	d100      	bne.n	10016336 <__aeabi_f2iz+0x2e>
10016334:	0018      	movs	r0, r3
10016336:	4770      	bx	lr
10016338:	4b03      	ldr	r3, [pc, #12]	; (10016348 <__aeabi_f2iz+0x40>)
1001633a:	18d0      	adds	r0, r2, r3
1001633c:	e7fb      	b.n	10016336 <__aeabi_f2iz+0x2e>
1001633e:	3b96      	subs	r3, #150	; 0x96
10016340:	4099      	lsls	r1, r3
10016342:	000b      	movs	r3, r1
10016344:	e7f3      	b.n	1001632e <__aeabi_f2iz+0x26>
10016346:	46c0      	nop			; (mov r8, r8)
10016348:	7fffffff 	.word	0x7fffffff

1001634c <__aeabi_ui2f>:
1001634c:	b570      	push	{r4, r5, r6, lr}
1001634e:	1e04      	subs	r4, r0, #0
10016350:	d028      	beq.n	100163a4 <__aeabi_ui2f+0x58>
10016352:	f000 ff83 	bl	1001725c <__clzsi2>
10016356:	239e      	movs	r3, #158	; 0x9e
10016358:	1a1b      	subs	r3, r3, r0
1001635a:	2b96      	cmp	r3, #150	; 0x96
1001635c:	dc0a      	bgt.n	10016374 <__aeabi_ui2f+0x28>
1001635e:	2296      	movs	r2, #150	; 0x96
10016360:	1ad2      	subs	r2, r2, r3
10016362:	4094      	lsls	r4, r2
10016364:	0262      	lsls	r2, r4, #9
10016366:	0a52      	lsrs	r2, r2, #9
10016368:	b2d8      	uxtb	r0, r3
1001636a:	0252      	lsls	r2, r2, #9
1001636c:	0a52      	lsrs	r2, r2, #9
1001636e:	05c0      	lsls	r0, r0, #23
10016370:	4310      	orrs	r0, r2
10016372:	bd70      	pop	{r4, r5, r6, pc}
10016374:	2b99      	cmp	r3, #153	; 0x99
10016376:	dc18      	bgt.n	100163aa <__aeabi_ui2f+0x5e>
10016378:	2299      	movs	r2, #153	; 0x99
1001637a:	1ad2      	subs	r2, r2, r3
1001637c:	4094      	lsls	r4, r2
1001637e:	4a11      	ldr	r2, [pc, #68]	; (100163c4 <__aeabi_ui2f+0x78>)
10016380:	4022      	ands	r2, r4
10016382:	0761      	lsls	r1, r4, #29
10016384:	d004      	beq.n	10016390 <__aeabi_ui2f+0x44>
10016386:	210f      	movs	r1, #15
10016388:	400c      	ands	r4, r1
1001638a:	2c04      	cmp	r4, #4
1001638c:	d000      	beq.n	10016390 <__aeabi_ui2f+0x44>
1001638e:	3204      	adds	r2, #4
10016390:	0151      	lsls	r1, r2, #5
10016392:	d503      	bpl.n	1001639c <__aeabi_ui2f+0x50>
10016394:	4b0b      	ldr	r3, [pc, #44]	; (100163c4 <__aeabi_ui2f+0x78>)
10016396:	401a      	ands	r2, r3
10016398:	239f      	movs	r3, #159	; 0x9f
1001639a:	1a1b      	subs	r3, r3, r0
1001639c:	0192      	lsls	r2, r2, #6
1001639e:	0a52      	lsrs	r2, r2, #9
100163a0:	b2d8      	uxtb	r0, r3
100163a2:	e7e2      	b.n	1001636a <__aeabi_ui2f+0x1e>
100163a4:	2000      	movs	r0, #0
100163a6:	2200      	movs	r2, #0
100163a8:	e7df      	b.n	1001636a <__aeabi_ui2f+0x1e>
100163aa:	2205      	movs	r2, #5
100163ac:	0025      	movs	r5, r4
100163ae:	1a12      	subs	r2, r2, r0
100163b0:	21b9      	movs	r1, #185	; 0xb9
100163b2:	40d5      	lsrs	r5, r2
100163b4:	0022      	movs	r2, r4
100163b6:	1ac9      	subs	r1, r1, r3
100163b8:	408a      	lsls	r2, r1
100163ba:	1e54      	subs	r4, r2, #1
100163bc:	41a2      	sbcs	r2, r4
100163be:	002c      	movs	r4, r5
100163c0:	4314      	orrs	r4, r2
100163c2:	e7dc      	b.n	1001637e <__aeabi_ui2f+0x32>
100163c4:	fbffffff 	.word	0xfbffffff

100163c8 <__eqdf2>:
100163c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100163ca:	465f      	mov	r7, fp
100163cc:	4656      	mov	r6, sl
100163ce:	464d      	mov	r5, r9
100163d0:	4644      	mov	r4, r8
100163d2:	b4f0      	push	{r4, r5, r6, r7}
100163d4:	031f      	lsls	r7, r3, #12
100163d6:	005c      	lsls	r4, r3, #1
100163d8:	0fdb      	lsrs	r3, r3, #31
100163da:	469a      	mov	sl, r3
100163dc:	4b19      	ldr	r3, [pc, #100]	; (10016444 <__eqdf2+0x7c>)
100163de:	030e      	lsls	r6, r1, #12
100163e0:	004d      	lsls	r5, r1, #1
100163e2:	0fc9      	lsrs	r1, r1, #31
100163e4:	4680      	mov	r8, r0
100163e6:	0b36      	lsrs	r6, r6, #12
100163e8:	0d6d      	lsrs	r5, r5, #21
100163ea:	468b      	mov	fp, r1
100163ec:	4691      	mov	r9, r2
100163ee:	0b3f      	lsrs	r7, r7, #12
100163f0:	0d64      	lsrs	r4, r4, #21
100163f2:	429d      	cmp	r5, r3
100163f4:	d019      	beq.n	1001642a <__eqdf2+0x62>
100163f6:	4b13      	ldr	r3, [pc, #76]	; (10016444 <__eqdf2+0x7c>)
100163f8:	429c      	cmp	r4, r3
100163fa:	d01b      	beq.n	10016434 <__eqdf2+0x6c>
100163fc:	2301      	movs	r3, #1
100163fe:	42a5      	cmp	r5, r4
10016400:	d006      	beq.n	10016410 <__eqdf2+0x48>
10016402:	0018      	movs	r0, r3
10016404:	bc3c      	pop	{r2, r3, r4, r5}
10016406:	4690      	mov	r8, r2
10016408:	4699      	mov	r9, r3
1001640a:	46a2      	mov	sl, r4
1001640c:	46ab      	mov	fp, r5
1001640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016410:	42be      	cmp	r6, r7
10016412:	d1f6      	bne.n	10016402 <__eqdf2+0x3a>
10016414:	45c8      	cmp	r8, r9
10016416:	d1f4      	bne.n	10016402 <__eqdf2+0x3a>
10016418:	45d3      	cmp	fp, sl
1001641a:	d010      	beq.n	1001643e <__eqdf2+0x76>
1001641c:	2d00      	cmp	r5, #0
1001641e:	d1f0      	bne.n	10016402 <__eqdf2+0x3a>
10016420:	4330      	orrs	r0, r6
10016422:	0003      	movs	r3, r0
10016424:	1e5a      	subs	r2, r3, #1
10016426:	4193      	sbcs	r3, r2
10016428:	e7eb      	b.n	10016402 <__eqdf2+0x3a>
1001642a:	0031      	movs	r1, r6
1001642c:	2301      	movs	r3, #1
1001642e:	4301      	orrs	r1, r0
10016430:	d1e7      	bne.n	10016402 <__eqdf2+0x3a>
10016432:	e7e0      	b.n	100163f6 <__eqdf2+0x2e>
10016434:	433a      	orrs	r2, r7
10016436:	2301      	movs	r3, #1
10016438:	2a00      	cmp	r2, #0
1001643a:	d1e2      	bne.n	10016402 <__eqdf2+0x3a>
1001643c:	e7de      	b.n	100163fc <__eqdf2+0x34>
1001643e:	2300      	movs	r3, #0
10016440:	e7df      	b.n	10016402 <__eqdf2+0x3a>
10016442:	46c0      	nop			; (mov r8, r8)
10016444:	000007ff 	.word	0x000007ff

10016448 <__gedf2>:
10016448:	b5f0      	push	{r4, r5, r6, r7, lr}
1001644a:	465f      	mov	r7, fp
1001644c:	4644      	mov	r4, r8
1001644e:	4656      	mov	r6, sl
10016450:	464d      	mov	r5, r9
10016452:	b4f0      	push	{r4, r5, r6, r7}
10016454:	031f      	lsls	r7, r3, #12
10016456:	0b3c      	lsrs	r4, r7, #12
10016458:	4f2c      	ldr	r7, [pc, #176]	; (1001650c <__gedf2+0xc4>)
1001645a:	030e      	lsls	r6, r1, #12
1001645c:	004d      	lsls	r5, r1, #1
1001645e:	46a3      	mov	fp, r4
10016460:	005c      	lsls	r4, r3, #1
10016462:	4684      	mov	ip, r0
10016464:	0b36      	lsrs	r6, r6, #12
10016466:	0d6d      	lsrs	r5, r5, #21
10016468:	0fc9      	lsrs	r1, r1, #31
1001646a:	4690      	mov	r8, r2
1001646c:	0d64      	lsrs	r4, r4, #21
1001646e:	0fdb      	lsrs	r3, r3, #31
10016470:	42bd      	cmp	r5, r7
10016472:	d02b      	beq.n	100164cc <__gedf2+0x84>
10016474:	4f25      	ldr	r7, [pc, #148]	; (1001650c <__gedf2+0xc4>)
10016476:	42bc      	cmp	r4, r7
10016478:	d02e      	beq.n	100164d8 <__gedf2+0x90>
1001647a:	2d00      	cmp	r5, #0
1001647c:	d10e      	bne.n	1001649c <__gedf2+0x54>
1001647e:	4330      	orrs	r0, r6
10016480:	0007      	movs	r7, r0
10016482:	4681      	mov	r9, r0
10016484:	4278      	negs	r0, r7
10016486:	4178      	adcs	r0, r7
10016488:	2c00      	cmp	r4, #0
1001648a:	d117      	bne.n	100164bc <__gedf2+0x74>
1001648c:	465f      	mov	r7, fp
1001648e:	433a      	orrs	r2, r7
10016490:	d114      	bne.n	100164bc <__gedf2+0x74>
10016492:	464b      	mov	r3, r9
10016494:	2000      	movs	r0, #0
10016496:	2b00      	cmp	r3, #0
10016498:	d00a      	beq.n	100164b0 <__gedf2+0x68>
1001649a:	e006      	b.n	100164aa <__gedf2+0x62>
1001649c:	2c00      	cmp	r4, #0
1001649e:	d102      	bne.n	100164a6 <__gedf2+0x5e>
100164a0:	4658      	mov	r0, fp
100164a2:	4302      	orrs	r2, r0
100164a4:	d001      	beq.n	100164aa <__gedf2+0x62>
100164a6:	4299      	cmp	r1, r3
100164a8:	d01a      	beq.n	100164e0 <__gedf2+0x98>
100164aa:	2301      	movs	r3, #1
100164ac:	4248      	negs	r0, r1
100164ae:	4318      	orrs	r0, r3
100164b0:	bc3c      	pop	{r2, r3, r4, r5}
100164b2:	4690      	mov	r8, r2
100164b4:	4699      	mov	r9, r3
100164b6:	46a2      	mov	sl, r4
100164b8:	46ab      	mov	fp, r5
100164ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100164bc:	2800      	cmp	r0, #0
100164be:	d0f2      	beq.n	100164a6 <__gedf2+0x5e>
100164c0:	4258      	negs	r0, r3
100164c2:	4158      	adcs	r0, r3
100164c4:	2201      	movs	r2, #1
100164c6:	4240      	negs	r0, r0
100164c8:	4310      	orrs	r0, r2
100164ca:	e7f1      	b.n	100164b0 <__gedf2+0x68>
100164cc:	0037      	movs	r7, r6
100164ce:	4307      	orrs	r7, r0
100164d0:	d0d0      	beq.n	10016474 <__gedf2+0x2c>
100164d2:	2002      	movs	r0, #2
100164d4:	4240      	negs	r0, r0
100164d6:	e7eb      	b.n	100164b0 <__gedf2+0x68>
100164d8:	465f      	mov	r7, fp
100164da:	4317      	orrs	r7, r2
100164dc:	d0cd      	beq.n	1001647a <__gedf2+0x32>
100164de:	e7f8      	b.n	100164d2 <__gedf2+0x8a>
100164e0:	42a5      	cmp	r5, r4
100164e2:	dce2      	bgt.n	100164aa <__gedf2+0x62>
100164e4:	db05      	blt.n	100164f2 <__gedf2+0xaa>
100164e6:	455e      	cmp	r6, fp
100164e8:	d8df      	bhi.n	100164aa <__gedf2+0x62>
100164ea:	d008      	beq.n	100164fe <__gedf2+0xb6>
100164ec:	2000      	movs	r0, #0
100164ee:	455e      	cmp	r6, fp
100164f0:	d2de      	bcs.n	100164b0 <__gedf2+0x68>
100164f2:	4248      	negs	r0, r1
100164f4:	4148      	adcs	r0, r1
100164f6:	2301      	movs	r3, #1
100164f8:	4240      	negs	r0, r0
100164fa:	4318      	orrs	r0, r3
100164fc:	e7d8      	b.n	100164b0 <__gedf2+0x68>
100164fe:	45c4      	cmp	ip, r8
10016500:	d8d3      	bhi.n	100164aa <__gedf2+0x62>
10016502:	2000      	movs	r0, #0
10016504:	45c4      	cmp	ip, r8
10016506:	d3f4      	bcc.n	100164f2 <__gedf2+0xaa>
10016508:	e7d2      	b.n	100164b0 <__gedf2+0x68>
1001650a:	46c0      	nop			; (mov r8, r8)
1001650c:	000007ff 	.word	0x000007ff

10016510 <__ledf2>:
10016510:	b5f0      	push	{r4, r5, r6, r7, lr}
10016512:	465f      	mov	r7, fp
10016514:	464d      	mov	r5, r9
10016516:	4644      	mov	r4, r8
10016518:	4656      	mov	r6, sl
1001651a:	b4f0      	push	{r4, r5, r6, r7}
1001651c:	031c      	lsls	r4, r3, #12
1001651e:	0b24      	lsrs	r4, r4, #12
10016520:	46a4      	mov	ip, r4
10016522:	4c2f      	ldr	r4, [pc, #188]	; (100165e0 <__ledf2+0xd0>)
10016524:	030f      	lsls	r7, r1, #12
10016526:	004d      	lsls	r5, r1, #1
10016528:	005e      	lsls	r6, r3, #1
1001652a:	0fc9      	lsrs	r1, r1, #31
1001652c:	4680      	mov	r8, r0
1001652e:	0b3f      	lsrs	r7, r7, #12
10016530:	0d6d      	lsrs	r5, r5, #21
10016532:	468b      	mov	fp, r1
10016534:	4691      	mov	r9, r2
10016536:	0d76      	lsrs	r6, r6, #21
10016538:	0fdb      	lsrs	r3, r3, #31
1001653a:	42a5      	cmp	r5, r4
1001653c:	d020      	beq.n	10016580 <__ledf2+0x70>
1001653e:	4c28      	ldr	r4, [pc, #160]	; (100165e0 <__ledf2+0xd0>)
10016540:	42a6      	cmp	r6, r4
10016542:	d022      	beq.n	1001658a <__ledf2+0x7a>
10016544:	2d00      	cmp	r5, #0
10016546:	d112      	bne.n	1001656e <__ledf2+0x5e>
10016548:	4338      	orrs	r0, r7
1001654a:	4244      	negs	r4, r0
1001654c:	4144      	adcs	r4, r0
1001654e:	2e00      	cmp	r6, #0
10016550:	d020      	beq.n	10016594 <__ledf2+0x84>
10016552:	2c00      	cmp	r4, #0
10016554:	d00d      	beq.n	10016572 <__ledf2+0x62>
10016556:	425c      	negs	r4, r3
10016558:	4163      	adcs	r3, r4
1001655a:	2401      	movs	r4, #1
1001655c:	425b      	negs	r3, r3
1001655e:	431c      	orrs	r4, r3
10016560:	0020      	movs	r0, r4
10016562:	bc3c      	pop	{r2, r3, r4, r5}
10016564:	4690      	mov	r8, r2
10016566:	4699      	mov	r9, r3
10016568:	46a2      	mov	sl, r4
1001656a:	46ab      	mov	fp, r5
1001656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001656e:	2e00      	cmp	r6, #0
10016570:	d017      	beq.n	100165a2 <__ledf2+0x92>
10016572:	455b      	cmp	r3, fp
10016574:	d019      	beq.n	100165aa <__ledf2+0x9a>
10016576:	465b      	mov	r3, fp
10016578:	425c      	negs	r4, r3
1001657a:	2301      	movs	r3, #1
1001657c:	431c      	orrs	r4, r3
1001657e:	e7ef      	b.n	10016560 <__ledf2+0x50>
10016580:	0039      	movs	r1, r7
10016582:	2402      	movs	r4, #2
10016584:	4301      	orrs	r1, r0
10016586:	d1eb      	bne.n	10016560 <__ledf2+0x50>
10016588:	e7d9      	b.n	1001653e <__ledf2+0x2e>
1001658a:	4661      	mov	r1, ip
1001658c:	2402      	movs	r4, #2
1001658e:	4311      	orrs	r1, r2
10016590:	d1e6      	bne.n	10016560 <__ledf2+0x50>
10016592:	e7d7      	b.n	10016544 <__ledf2+0x34>
10016594:	4661      	mov	r1, ip
10016596:	430a      	orrs	r2, r1
10016598:	d1db      	bne.n	10016552 <__ledf2+0x42>
1001659a:	2400      	movs	r4, #0
1001659c:	2800      	cmp	r0, #0
1001659e:	d0df      	beq.n	10016560 <__ledf2+0x50>
100165a0:	e7e9      	b.n	10016576 <__ledf2+0x66>
100165a2:	4661      	mov	r1, ip
100165a4:	430a      	orrs	r2, r1
100165a6:	d1e4      	bne.n	10016572 <__ledf2+0x62>
100165a8:	e7e5      	b.n	10016576 <__ledf2+0x66>
100165aa:	42b5      	cmp	r5, r6
100165ac:	dd03      	ble.n	100165b6 <__ledf2+0xa6>
100165ae:	2201      	movs	r2, #1
100165b0:	425c      	negs	r4, r3
100165b2:	4314      	orrs	r4, r2
100165b4:	e7d4      	b.n	10016560 <__ledf2+0x50>
100165b6:	42b5      	cmp	r5, r6
100165b8:	dbcd      	blt.n	10016556 <__ledf2+0x46>
100165ba:	4567      	cmp	r7, ip
100165bc:	d8db      	bhi.n	10016576 <__ledf2+0x66>
100165be:	d009      	beq.n	100165d4 <__ledf2+0xc4>
100165c0:	2400      	movs	r4, #0
100165c2:	4567      	cmp	r7, ip
100165c4:	d2cc      	bcs.n	10016560 <__ledf2+0x50>
100165c6:	4659      	mov	r1, fp
100165c8:	424c      	negs	r4, r1
100165ca:	4161      	adcs	r1, r4
100165cc:	2401      	movs	r4, #1
100165ce:	4249      	negs	r1, r1
100165d0:	430c      	orrs	r4, r1
100165d2:	e7c5      	b.n	10016560 <__ledf2+0x50>
100165d4:	45c8      	cmp	r8, r9
100165d6:	d8ce      	bhi.n	10016576 <__ledf2+0x66>
100165d8:	2400      	movs	r4, #0
100165da:	45c8      	cmp	r8, r9
100165dc:	d3f3      	bcc.n	100165c6 <__ledf2+0xb6>
100165de:	e7bf      	b.n	10016560 <__ledf2+0x50>
100165e0:	000007ff 	.word	0x000007ff

100165e4 <__aeabi_dmul>:
100165e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100165e6:	465f      	mov	r7, fp
100165e8:	4656      	mov	r6, sl
100165ea:	464d      	mov	r5, r9
100165ec:	4644      	mov	r4, r8
100165ee:	b4f0      	push	{r4, r5, r6, r7}
100165f0:	030d      	lsls	r5, r1, #12
100165f2:	4699      	mov	r9, r3
100165f4:	004e      	lsls	r6, r1, #1
100165f6:	0b2b      	lsrs	r3, r5, #12
100165f8:	b087      	sub	sp, #28
100165fa:	0007      	movs	r7, r0
100165fc:	4692      	mov	sl, r2
100165fe:	4680      	mov	r8, r0
10016600:	469b      	mov	fp, r3
10016602:	0d76      	lsrs	r6, r6, #21
10016604:	0fcc      	lsrs	r4, r1, #31
10016606:	2e00      	cmp	r6, #0
10016608:	d069      	beq.n	100166de <__aeabi_dmul+0xfa>
1001660a:	4b6d      	ldr	r3, [pc, #436]	; (100167c0 <__aeabi_dmul+0x1dc>)
1001660c:	429e      	cmp	r6, r3
1001660e:	d035      	beq.n	1001667c <__aeabi_dmul+0x98>
10016610:	465b      	mov	r3, fp
10016612:	2280      	movs	r2, #128	; 0x80
10016614:	00dd      	lsls	r5, r3, #3
10016616:	0412      	lsls	r2, r2, #16
10016618:	0f43      	lsrs	r3, r0, #29
1001661a:	4313      	orrs	r3, r2
1001661c:	432b      	orrs	r3, r5
1001661e:	469b      	mov	fp, r3
10016620:	00c3      	lsls	r3, r0, #3
10016622:	4698      	mov	r8, r3
10016624:	4b67      	ldr	r3, [pc, #412]	; (100167c4 <__aeabi_dmul+0x1e0>)
10016626:	2700      	movs	r7, #0
10016628:	469c      	mov	ip, r3
1001662a:	2300      	movs	r3, #0
1001662c:	4466      	add	r6, ip
1001662e:	9301      	str	r3, [sp, #4]
10016630:	464a      	mov	r2, r9
10016632:	0315      	lsls	r5, r2, #12
10016634:	0050      	lsls	r0, r2, #1
10016636:	0fd2      	lsrs	r2, r2, #31
10016638:	4653      	mov	r3, sl
1001663a:	0b2d      	lsrs	r5, r5, #12
1001663c:	0d40      	lsrs	r0, r0, #21
1001663e:	4691      	mov	r9, r2
10016640:	d100      	bne.n	10016644 <__aeabi_dmul+0x60>
10016642:	e076      	b.n	10016732 <__aeabi_dmul+0x14e>
10016644:	4a5e      	ldr	r2, [pc, #376]	; (100167c0 <__aeabi_dmul+0x1dc>)
10016646:	4290      	cmp	r0, r2
10016648:	d06c      	beq.n	10016724 <__aeabi_dmul+0x140>
1001664a:	2280      	movs	r2, #128	; 0x80
1001664c:	0f5b      	lsrs	r3, r3, #29
1001664e:	0412      	lsls	r2, r2, #16
10016650:	4313      	orrs	r3, r2
10016652:	4a5c      	ldr	r2, [pc, #368]	; (100167c4 <__aeabi_dmul+0x1e0>)
10016654:	00ed      	lsls	r5, r5, #3
10016656:	4694      	mov	ip, r2
10016658:	431d      	orrs	r5, r3
1001665a:	4653      	mov	r3, sl
1001665c:	2200      	movs	r2, #0
1001665e:	00db      	lsls	r3, r3, #3
10016660:	4460      	add	r0, ip
10016662:	4649      	mov	r1, r9
10016664:	1836      	adds	r6, r6, r0
10016666:	1c70      	adds	r0, r6, #1
10016668:	4061      	eors	r1, r4
1001666a:	9002      	str	r0, [sp, #8]
1001666c:	4317      	orrs	r7, r2
1001666e:	2f0f      	cmp	r7, #15
10016670:	d900      	bls.n	10016674 <__aeabi_dmul+0x90>
10016672:	e0af      	b.n	100167d4 <__aeabi_dmul+0x1f0>
10016674:	4854      	ldr	r0, [pc, #336]	; (100167c8 <__aeabi_dmul+0x1e4>)
10016676:	00bf      	lsls	r7, r7, #2
10016678:	59c7      	ldr	r7, [r0, r7]
1001667a:	46bf      	mov	pc, r7
1001667c:	465b      	mov	r3, fp
1001667e:	431f      	orrs	r7, r3
10016680:	d000      	beq.n	10016684 <__aeabi_dmul+0xa0>
10016682:	e088      	b.n	10016796 <__aeabi_dmul+0x1b2>
10016684:	2300      	movs	r3, #0
10016686:	469b      	mov	fp, r3
10016688:	4698      	mov	r8, r3
1001668a:	3302      	adds	r3, #2
1001668c:	2708      	movs	r7, #8
1001668e:	9301      	str	r3, [sp, #4]
10016690:	e7ce      	b.n	10016630 <__aeabi_dmul+0x4c>
10016692:	4649      	mov	r1, r9
10016694:	2a02      	cmp	r2, #2
10016696:	d06a      	beq.n	1001676e <__aeabi_dmul+0x18a>
10016698:	2a03      	cmp	r2, #3
1001669a:	d100      	bne.n	1001669e <__aeabi_dmul+0xba>
1001669c:	e209      	b.n	10016ab2 <__aeabi_dmul+0x4ce>
1001669e:	2a01      	cmp	r2, #1
100166a0:	d000      	beq.n	100166a4 <__aeabi_dmul+0xc0>
100166a2:	e1bb      	b.n	10016a1c <__aeabi_dmul+0x438>
100166a4:	4011      	ands	r1, r2
100166a6:	2200      	movs	r2, #0
100166a8:	2300      	movs	r3, #0
100166aa:	2500      	movs	r5, #0
100166ac:	4690      	mov	r8, r2
100166ae:	b2cc      	uxtb	r4, r1
100166b0:	2100      	movs	r1, #0
100166b2:	032d      	lsls	r5, r5, #12
100166b4:	0d0a      	lsrs	r2, r1, #20
100166b6:	0512      	lsls	r2, r2, #20
100166b8:	0b2d      	lsrs	r5, r5, #12
100166ba:	4315      	orrs	r5, r2
100166bc:	4a43      	ldr	r2, [pc, #268]	; (100167cc <__aeabi_dmul+0x1e8>)
100166be:	051b      	lsls	r3, r3, #20
100166c0:	4015      	ands	r5, r2
100166c2:	431d      	orrs	r5, r3
100166c4:	006d      	lsls	r5, r5, #1
100166c6:	07e4      	lsls	r4, r4, #31
100166c8:	086d      	lsrs	r5, r5, #1
100166ca:	4325      	orrs	r5, r4
100166cc:	4640      	mov	r0, r8
100166ce:	0029      	movs	r1, r5
100166d0:	b007      	add	sp, #28
100166d2:	bc3c      	pop	{r2, r3, r4, r5}
100166d4:	4690      	mov	r8, r2
100166d6:	4699      	mov	r9, r3
100166d8:	46a2      	mov	sl, r4
100166da:	46ab      	mov	fp, r5
100166dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100166de:	4303      	orrs	r3, r0
100166e0:	d052      	beq.n	10016788 <__aeabi_dmul+0x1a4>
100166e2:	465b      	mov	r3, fp
100166e4:	2b00      	cmp	r3, #0
100166e6:	d100      	bne.n	100166ea <__aeabi_dmul+0x106>
100166e8:	e18a      	b.n	10016a00 <__aeabi_dmul+0x41c>
100166ea:	4658      	mov	r0, fp
100166ec:	f000 fdb6 	bl	1001725c <__clzsi2>
100166f0:	0003      	movs	r3, r0
100166f2:	3b0b      	subs	r3, #11
100166f4:	2b1c      	cmp	r3, #28
100166f6:	dd00      	ble.n	100166fa <__aeabi_dmul+0x116>
100166f8:	e17b      	b.n	100169f2 <__aeabi_dmul+0x40e>
100166fa:	221d      	movs	r2, #29
100166fc:	1ad3      	subs	r3, r2, r3
100166fe:	003a      	movs	r2, r7
10016700:	0001      	movs	r1, r0
10016702:	465d      	mov	r5, fp
10016704:	40da      	lsrs	r2, r3
10016706:	3908      	subs	r1, #8
10016708:	408d      	lsls	r5, r1
1001670a:	0013      	movs	r3, r2
1001670c:	408f      	lsls	r7, r1
1001670e:	432b      	orrs	r3, r5
10016710:	469b      	mov	fp, r3
10016712:	46b8      	mov	r8, r7
10016714:	4b2e      	ldr	r3, [pc, #184]	; (100167d0 <__aeabi_dmul+0x1ec>)
10016716:	2700      	movs	r7, #0
10016718:	469c      	mov	ip, r3
1001671a:	2300      	movs	r3, #0
1001671c:	4460      	add	r0, ip
1001671e:	4246      	negs	r6, r0
10016720:	9301      	str	r3, [sp, #4]
10016722:	e785      	b.n	10016630 <__aeabi_dmul+0x4c>
10016724:	4652      	mov	r2, sl
10016726:	432a      	orrs	r2, r5
10016728:	d12c      	bne.n	10016784 <__aeabi_dmul+0x1a0>
1001672a:	2500      	movs	r5, #0
1001672c:	2300      	movs	r3, #0
1001672e:	2202      	movs	r2, #2
10016730:	e797      	b.n	10016662 <__aeabi_dmul+0x7e>
10016732:	4652      	mov	r2, sl
10016734:	432a      	orrs	r2, r5
10016736:	d021      	beq.n	1001677c <__aeabi_dmul+0x198>
10016738:	2d00      	cmp	r5, #0
1001673a:	d100      	bne.n	1001673e <__aeabi_dmul+0x15a>
1001673c:	e154      	b.n	100169e8 <__aeabi_dmul+0x404>
1001673e:	0028      	movs	r0, r5
10016740:	f000 fd8c 	bl	1001725c <__clzsi2>
10016744:	0003      	movs	r3, r0
10016746:	3b0b      	subs	r3, #11
10016748:	2b1c      	cmp	r3, #28
1001674a:	dd00      	ble.n	1001674e <__aeabi_dmul+0x16a>
1001674c:	e146      	b.n	100169dc <__aeabi_dmul+0x3f8>
1001674e:	211d      	movs	r1, #29
10016750:	1acb      	subs	r3, r1, r3
10016752:	4651      	mov	r1, sl
10016754:	0002      	movs	r2, r0
10016756:	40d9      	lsrs	r1, r3
10016758:	4653      	mov	r3, sl
1001675a:	3a08      	subs	r2, #8
1001675c:	4095      	lsls	r5, r2
1001675e:	4093      	lsls	r3, r2
10016760:	430d      	orrs	r5, r1
10016762:	4a1b      	ldr	r2, [pc, #108]	; (100167d0 <__aeabi_dmul+0x1ec>)
10016764:	4694      	mov	ip, r2
10016766:	4460      	add	r0, ip
10016768:	4240      	negs	r0, r0
1001676a:	2200      	movs	r2, #0
1001676c:	e779      	b.n	10016662 <__aeabi_dmul+0x7e>
1001676e:	2401      	movs	r4, #1
10016770:	2200      	movs	r2, #0
10016772:	400c      	ands	r4, r1
10016774:	4b12      	ldr	r3, [pc, #72]	; (100167c0 <__aeabi_dmul+0x1dc>)
10016776:	2500      	movs	r5, #0
10016778:	4690      	mov	r8, r2
1001677a:	e799      	b.n	100166b0 <__aeabi_dmul+0xcc>
1001677c:	2500      	movs	r5, #0
1001677e:	2300      	movs	r3, #0
10016780:	2201      	movs	r2, #1
10016782:	e76e      	b.n	10016662 <__aeabi_dmul+0x7e>
10016784:	2203      	movs	r2, #3
10016786:	e76c      	b.n	10016662 <__aeabi_dmul+0x7e>
10016788:	2300      	movs	r3, #0
1001678a:	469b      	mov	fp, r3
1001678c:	4698      	mov	r8, r3
1001678e:	3301      	adds	r3, #1
10016790:	2704      	movs	r7, #4
10016792:	9301      	str	r3, [sp, #4]
10016794:	e74c      	b.n	10016630 <__aeabi_dmul+0x4c>
10016796:	2303      	movs	r3, #3
10016798:	270c      	movs	r7, #12
1001679a:	9301      	str	r3, [sp, #4]
1001679c:	e748      	b.n	10016630 <__aeabi_dmul+0x4c>
1001679e:	2300      	movs	r3, #0
100167a0:	2580      	movs	r5, #128	; 0x80
100167a2:	4698      	mov	r8, r3
100167a4:	2400      	movs	r4, #0
100167a6:	032d      	lsls	r5, r5, #12
100167a8:	4b05      	ldr	r3, [pc, #20]	; (100167c0 <__aeabi_dmul+0x1dc>)
100167aa:	e781      	b.n	100166b0 <__aeabi_dmul+0xcc>
100167ac:	465d      	mov	r5, fp
100167ae:	4643      	mov	r3, r8
100167b0:	9a01      	ldr	r2, [sp, #4]
100167b2:	e76f      	b.n	10016694 <__aeabi_dmul+0xb0>
100167b4:	465d      	mov	r5, fp
100167b6:	4643      	mov	r3, r8
100167b8:	0021      	movs	r1, r4
100167ba:	9a01      	ldr	r2, [sp, #4]
100167bc:	e76a      	b.n	10016694 <__aeabi_dmul+0xb0>
100167be:	46c0      	nop			; (mov r8, r8)
100167c0:	000007ff 	.word	0x000007ff
100167c4:	fffffc01 	.word	0xfffffc01
100167c8:	10019954 	.word	0x10019954
100167cc:	800fffff 	.word	0x800fffff
100167d0:	000003f3 	.word	0x000003f3
100167d4:	4642      	mov	r2, r8
100167d6:	0c12      	lsrs	r2, r2, #16
100167d8:	4691      	mov	r9, r2
100167da:	0c1a      	lsrs	r2, r3, #16
100167dc:	4694      	mov	ip, r2
100167de:	4642      	mov	r2, r8
100167e0:	0417      	lsls	r7, r2, #16
100167e2:	464a      	mov	r2, r9
100167e4:	041b      	lsls	r3, r3, #16
100167e6:	0c1b      	lsrs	r3, r3, #16
100167e8:	435a      	muls	r2, r3
100167ea:	4660      	mov	r0, ip
100167ec:	4690      	mov	r8, r2
100167ee:	464a      	mov	r2, r9
100167f0:	4342      	muls	r2, r0
100167f2:	0010      	movs	r0, r2
100167f4:	9203      	str	r2, [sp, #12]
100167f6:	4662      	mov	r2, ip
100167f8:	001c      	movs	r4, r3
100167fa:	0c3f      	lsrs	r7, r7, #16
100167fc:	437a      	muls	r2, r7
100167fe:	437c      	muls	r4, r7
10016800:	4442      	add	r2, r8
10016802:	9201      	str	r2, [sp, #4]
10016804:	0c22      	lsrs	r2, r4, #16
10016806:	4692      	mov	sl, r2
10016808:	9a01      	ldr	r2, [sp, #4]
1001680a:	4452      	add	r2, sl
1001680c:	4590      	cmp	r8, r2
1001680e:	d906      	bls.n	1001681e <__aeabi_dmul+0x23a>
10016810:	4682      	mov	sl, r0
10016812:	2080      	movs	r0, #128	; 0x80
10016814:	0240      	lsls	r0, r0, #9
10016816:	4680      	mov	r8, r0
10016818:	44c2      	add	sl, r8
1001681a:	4650      	mov	r0, sl
1001681c:	9003      	str	r0, [sp, #12]
1001681e:	0c10      	lsrs	r0, r2, #16
10016820:	9004      	str	r0, [sp, #16]
10016822:	4648      	mov	r0, r9
10016824:	0424      	lsls	r4, r4, #16
10016826:	0c24      	lsrs	r4, r4, #16
10016828:	0412      	lsls	r2, r2, #16
1001682a:	1912      	adds	r2, r2, r4
1001682c:	9205      	str	r2, [sp, #20]
1001682e:	0c2a      	lsrs	r2, r5, #16
10016830:	042d      	lsls	r5, r5, #16
10016832:	0c2d      	lsrs	r5, r5, #16
10016834:	4368      	muls	r0, r5
10016836:	002c      	movs	r4, r5
10016838:	4682      	mov	sl, r0
1001683a:	4648      	mov	r0, r9
1001683c:	437c      	muls	r4, r7
1001683e:	4350      	muls	r0, r2
10016840:	4681      	mov	r9, r0
10016842:	0c20      	lsrs	r0, r4, #16
10016844:	4680      	mov	r8, r0
10016846:	4357      	muls	r7, r2
10016848:	4457      	add	r7, sl
1001684a:	4447      	add	r7, r8
1001684c:	45ba      	cmp	sl, r7
1001684e:	d903      	bls.n	10016858 <__aeabi_dmul+0x274>
10016850:	2080      	movs	r0, #128	; 0x80
10016852:	0240      	lsls	r0, r0, #9
10016854:	4680      	mov	r8, r0
10016856:	44c1      	add	r9, r8
10016858:	0c38      	lsrs	r0, r7, #16
1001685a:	043f      	lsls	r7, r7, #16
1001685c:	46b8      	mov	r8, r7
1001685e:	4448      	add	r0, r9
10016860:	0424      	lsls	r4, r4, #16
10016862:	0c24      	lsrs	r4, r4, #16
10016864:	9001      	str	r0, [sp, #4]
10016866:	9804      	ldr	r0, [sp, #16]
10016868:	44a0      	add	r8, r4
1001686a:	4440      	add	r0, r8
1001686c:	9004      	str	r0, [sp, #16]
1001686e:	4658      	mov	r0, fp
10016870:	0c00      	lsrs	r0, r0, #16
10016872:	4681      	mov	r9, r0
10016874:	4658      	mov	r0, fp
10016876:	0404      	lsls	r4, r0, #16
10016878:	0c20      	lsrs	r0, r4, #16
1001687a:	4682      	mov	sl, r0
1001687c:	0007      	movs	r7, r0
1001687e:	4648      	mov	r0, r9
10016880:	435f      	muls	r7, r3
10016882:	464c      	mov	r4, r9
10016884:	4343      	muls	r3, r0
10016886:	4660      	mov	r0, ip
10016888:	4360      	muls	r0, r4
1001688a:	4664      	mov	r4, ip
1001688c:	4683      	mov	fp, r0
1001688e:	4650      	mov	r0, sl
10016890:	4344      	muls	r4, r0
10016892:	0c38      	lsrs	r0, r7, #16
10016894:	4684      	mov	ip, r0
10016896:	18e4      	adds	r4, r4, r3
10016898:	4464      	add	r4, ip
1001689a:	42a3      	cmp	r3, r4
1001689c:	d903      	bls.n	100168a6 <__aeabi_dmul+0x2c2>
1001689e:	2380      	movs	r3, #128	; 0x80
100168a0:	025b      	lsls	r3, r3, #9
100168a2:	469c      	mov	ip, r3
100168a4:	44e3      	add	fp, ip
100168a6:	4648      	mov	r0, r9
100168a8:	043f      	lsls	r7, r7, #16
100168aa:	0c23      	lsrs	r3, r4, #16
100168ac:	0c3f      	lsrs	r7, r7, #16
100168ae:	0424      	lsls	r4, r4, #16
100168b0:	19e4      	adds	r4, r4, r7
100168b2:	4657      	mov	r7, sl
100168b4:	4368      	muls	r0, r5
100168b6:	436f      	muls	r7, r5
100168b8:	4684      	mov	ip, r0
100168ba:	464d      	mov	r5, r9
100168bc:	4650      	mov	r0, sl
100168be:	4355      	muls	r5, r2
100168c0:	4342      	muls	r2, r0
100168c2:	0c38      	lsrs	r0, r7, #16
100168c4:	4681      	mov	r9, r0
100168c6:	4462      	add	r2, ip
100168c8:	444a      	add	r2, r9
100168ca:	445b      	add	r3, fp
100168cc:	4594      	cmp	ip, r2
100168ce:	d903      	bls.n	100168d8 <__aeabi_dmul+0x2f4>
100168d0:	2080      	movs	r0, #128	; 0x80
100168d2:	0240      	lsls	r0, r0, #9
100168d4:	4684      	mov	ip, r0
100168d6:	4465      	add	r5, ip
100168d8:	9803      	ldr	r0, [sp, #12]
100168da:	043f      	lsls	r7, r7, #16
100168dc:	4683      	mov	fp, r0
100168de:	9804      	ldr	r0, [sp, #16]
100168e0:	0c3f      	lsrs	r7, r7, #16
100168e2:	4684      	mov	ip, r0
100168e4:	44e3      	add	fp, ip
100168e6:	45c3      	cmp	fp, r8
100168e8:	4180      	sbcs	r0, r0
100168ea:	4240      	negs	r0, r0
100168ec:	4682      	mov	sl, r0
100168ee:	0410      	lsls	r0, r2, #16
100168f0:	4684      	mov	ip, r0
100168f2:	9801      	ldr	r0, [sp, #4]
100168f4:	4467      	add	r7, ip
100168f6:	4684      	mov	ip, r0
100168f8:	4467      	add	r7, ip
100168fa:	44a3      	add	fp, r4
100168fc:	46bc      	mov	ip, r7
100168fe:	45a3      	cmp	fp, r4
10016900:	41a4      	sbcs	r4, r4
10016902:	4699      	mov	r9, r3
10016904:	44d4      	add	ip, sl
10016906:	4264      	negs	r4, r4
10016908:	4287      	cmp	r7, r0
1001690a:	41bf      	sbcs	r7, r7
1001690c:	45d4      	cmp	ip, sl
1001690e:	4180      	sbcs	r0, r0
10016910:	44e1      	add	r9, ip
10016912:	46a0      	mov	r8, r4
10016914:	4599      	cmp	r9, r3
10016916:	419b      	sbcs	r3, r3
10016918:	427f      	negs	r7, r7
1001691a:	4240      	negs	r0, r0
1001691c:	44c8      	add	r8, r9
1001691e:	4307      	orrs	r7, r0
10016920:	0c12      	lsrs	r2, r2, #16
10016922:	18ba      	adds	r2, r7, r2
10016924:	45a0      	cmp	r8, r4
10016926:	41a4      	sbcs	r4, r4
10016928:	425f      	negs	r7, r3
1001692a:	003b      	movs	r3, r7
1001692c:	4264      	negs	r4, r4
1001692e:	4323      	orrs	r3, r4
10016930:	18d7      	adds	r7, r2, r3
10016932:	4643      	mov	r3, r8
10016934:	197d      	adds	r5, r7, r5
10016936:	0ddb      	lsrs	r3, r3, #23
10016938:	026d      	lsls	r5, r5, #9
1001693a:	431d      	orrs	r5, r3
1001693c:	465b      	mov	r3, fp
1001693e:	025a      	lsls	r2, r3, #9
10016940:	9b05      	ldr	r3, [sp, #20]
10016942:	431a      	orrs	r2, r3
10016944:	1e53      	subs	r3, r2, #1
10016946:	419a      	sbcs	r2, r3
10016948:	465b      	mov	r3, fp
1001694a:	0ddb      	lsrs	r3, r3, #23
1001694c:	431a      	orrs	r2, r3
1001694e:	4643      	mov	r3, r8
10016950:	025b      	lsls	r3, r3, #9
10016952:	4313      	orrs	r3, r2
10016954:	01ea      	lsls	r2, r5, #7
10016956:	d507      	bpl.n	10016968 <__aeabi_dmul+0x384>
10016958:	2201      	movs	r2, #1
1001695a:	085c      	lsrs	r4, r3, #1
1001695c:	4013      	ands	r3, r2
1001695e:	4323      	orrs	r3, r4
10016960:	07ea      	lsls	r2, r5, #31
10016962:	9e02      	ldr	r6, [sp, #8]
10016964:	4313      	orrs	r3, r2
10016966:	086d      	lsrs	r5, r5, #1
10016968:	4a57      	ldr	r2, [pc, #348]	; (10016ac8 <__aeabi_dmul+0x4e4>)
1001696a:	18b2      	adds	r2, r6, r2
1001696c:	2a00      	cmp	r2, #0
1001696e:	dd4b      	ble.n	10016a08 <__aeabi_dmul+0x424>
10016970:	0758      	lsls	r0, r3, #29
10016972:	d009      	beq.n	10016988 <__aeabi_dmul+0x3a4>
10016974:	200f      	movs	r0, #15
10016976:	4018      	ands	r0, r3
10016978:	2804      	cmp	r0, #4
1001697a:	d005      	beq.n	10016988 <__aeabi_dmul+0x3a4>
1001697c:	1d18      	adds	r0, r3, #4
1001697e:	4298      	cmp	r0, r3
10016980:	419b      	sbcs	r3, r3
10016982:	425b      	negs	r3, r3
10016984:	18ed      	adds	r5, r5, r3
10016986:	0003      	movs	r3, r0
10016988:	01e8      	lsls	r0, r5, #7
1001698a:	d504      	bpl.n	10016996 <__aeabi_dmul+0x3b2>
1001698c:	4a4f      	ldr	r2, [pc, #316]	; (10016acc <__aeabi_dmul+0x4e8>)
1001698e:	4015      	ands	r5, r2
10016990:	2280      	movs	r2, #128	; 0x80
10016992:	00d2      	lsls	r2, r2, #3
10016994:	18b2      	adds	r2, r6, r2
10016996:	484e      	ldr	r0, [pc, #312]	; (10016ad0 <__aeabi_dmul+0x4ec>)
10016998:	4282      	cmp	r2, r0
1001699a:	dd00      	ble.n	1001699e <__aeabi_dmul+0x3ba>
1001699c:	e6e7      	b.n	1001676e <__aeabi_dmul+0x18a>
1001699e:	2401      	movs	r4, #1
100169a0:	08db      	lsrs	r3, r3, #3
100169a2:	0768      	lsls	r0, r5, #29
100169a4:	4318      	orrs	r0, r3
100169a6:	026d      	lsls	r5, r5, #9
100169a8:	0553      	lsls	r3, r2, #21
100169aa:	4680      	mov	r8, r0
100169ac:	0b2d      	lsrs	r5, r5, #12
100169ae:	0d5b      	lsrs	r3, r3, #21
100169b0:	400c      	ands	r4, r1
100169b2:	e67d      	b.n	100166b0 <__aeabi_dmul+0xcc>
100169b4:	2280      	movs	r2, #128	; 0x80
100169b6:	4659      	mov	r1, fp
100169b8:	0312      	lsls	r2, r2, #12
100169ba:	4211      	tst	r1, r2
100169bc:	d008      	beq.n	100169d0 <__aeabi_dmul+0x3ec>
100169be:	4215      	tst	r5, r2
100169c0:	d106      	bne.n	100169d0 <__aeabi_dmul+0x3ec>
100169c2:	4315      	orrs	r5, r2
100169c4:	032d      	lsls	r5, r5, #12
100169c6:	4698      	mov	r8, r3
100169c8:	0b2d      	lsrs	r5, r5, #12
100169ca:	464c      	mov	r4, r9
100169cc:	4b41      	ldr	r3, [pc, #260]	; (10016ad4 <__aeabi_dmul+0x4f0>)
100169ce:	e66f      	b.n	100166b0 <__aeabi_dmul+0xcc>
100169d0:	465d      	mov	r5, fp
100169d2:	4315      	orrs	r5, r2
100169d4:	032d      	lsls	r5, r5, #12
100169d6:	0b2d      	lsrs	r5, r5, #12
100169d8:	4b3e      	ldr	r3, [pc, #248]	; (10016ad4 <__aeabi_dmul+0x4f0>)
100169da:	e669      	b.n	100166b0 <__aeabi_dmul+0xcc>
100169dc:	0003      	movs	r3, r0
100169de:	4655      	mov	r5, sl
100169e0:	3b28      	subs	r3, #40	; 0x28
100169e2:	409d      	lsls	r5, r3
100169e4:	2300      	movs	r3, #0
100169e6:	e6bc      	b.n	10016762 <__aeabi_dmul+0x17e>
100169e8:	4650      	mov	r0, sl
100169ea:	f000 fc37 	bl	1001725c <__clzsi2>
100169ee:	3020      	adds	r0, #32
100169f0:	e6a8      	b.n	10016744 <__aeabi_dmul+0x160>
100169f2:	0003      	movs	r3, r0
100169f4:	3b28      	subs	r3, #40	; 0x28
100169f6:	409f      	lsls	r7, r3
100169f8:	2300      	movs	r3, #0
100169fa:	46bb      	mov	fp, r7
100169fc:	4698      	mov	r8, r3
100169fe:	e689      	b.n	10016714 <__aeabi_dmul+0x130>
10016a00:	f000 fc2c 	bl	1001725c <__clzsi2>
10016a04:	3020      	adds	r0, #32
10016a06:	e673      	b.n	100166f0 <__aeabi_dmul+0x10c>
10016a08:	2401      	movs	r4, #1
10016a0a:	1aa6      	subs	r6, r4, r2
10016a0c:	2e38      	cmp	r6, #56	; 0x38
10016a0e:	dd07      	ble.n	10016a20 <__aeabi_dmul+0x43c>
10016a10:	2200      	movs	r2, #0
10016a12:	400c      	ands	r4, r1
10016a14:	2300      	movs	r3, #0
10016a16:	2500      	movs	r5, #0
10016a18:	4690      	mov	r8, r2
10016a1a:	e649      	b.n	100166b0 <__aeabi_dmul+0xcc>
10016a1c:	9e02      	ldr	r6, [sp, #8]
10016a1e:	e7a3      	b.n	10016968 <__aeabi_dmul+0x384>
10016a20:	2e1f      	cmp	r6, #31
10016a22:	dc20      	bgt.n	10016a66 <__aeabi_dmul+0x482>
10016a24:	2220      	movs	r2, #32
10016a26:	002c      	movs	r4, r5
10016a28:	0018      	movs	r0, r3
10016a2a:	1b92      	subs	r2, r2, r6
10016a2c:	40f0      	lsrs	r0, r6
10016a2e:	4094      	lsls	r4, r2
10016a30:	4093      	lsls	r3, r2
10016a32:	4304      	orrs	r4, r0
10016a34:	1e58      	subs	r0, r3, #1
10016a36:	4183      	sbcs	r3, r0
10016a38:	431c      	orrs	r4, r3
10016a3a:	40f5      	lsrs	r5, r6
10016a3c:	0763      	lsls	r3, r4, #29
10016a3e:	d009      	beq.n	10016a54 <__aeabi_dmul+0x470>
10016a40:	230f      	movs	r3, #15
10016a42:	4023      	ands	r3, r4
10016a44:	2b04      	cmp	r3, #4
10016a46:	d005      	beq.n	10016a54 <__aeabi_dmul+0x470>
10016a48:	0023      	movs	r3, r4
10016a4a:	1d1c      	adds	r4, r3, #4
10016a4c:	429c      	cmp	r4, r3
10016a4e:	4192      	sbcs	r2, r2
10016a50:	4252      	negs	r2, r2
10016a52:	18ad      	adds	r5, r5, r2
10016a54:	022b      	lsls	r3, r5, #8
10016a56:	d51f      	bpl.n	10016a98 <__aeabi_dmul+0x4b4>
10016a58:	2401      	movs	r4, #1
10016a5a:	2200      	movs	r2, #0
10016a5c:	400c      	ands	r4, r1
10016a5e:	2301      	movs	r3, #1
10016a60:	2500      	movs	r5, #0
10016a62:	4690      	mov	r8, r2
10016a64:	e624      	b.n	100166b0 <__aeabi_dmul+0xcc>
10016a66:	201f      	movs	r0, #31
10016a68:	002c      	movs	r4, r5
10016a6a:	4240      	negs	r0, r0
10016a6c:	1a82      	subs	r2, r0, r2
10016a6e:	40d4      	lsrs	r4, r2
10016a70:	2e20      	cmp	r6, #32
10016a72:	d01c      	beq.n	10016aae <__aeabi_dmul+0x4ca>
10016a74:	2240      	movs	r2, #64	; 0x40
10016a76:	1b96      	subs	r6, r2, r6
10016a78:	40b5      	lsls	r5, r6
10016a7a:	432b      	orrs	r3, r5
10016a7c:	1e58      	subs	r0, r3, #1
10016a7e:	4183      	sbcs	r3, r0
10016a80:	2007      	movs	r0, #7
10016a82:	4323      	orrs	r3, r4
10016a84:	4018      	ands	r0, r3
10016a86:	2500      	movs	r5, #0
10016a88:	2800      	cmp	r0, #0
10016a8a:	d009      	beq.n	10016aa0 <__aeabi_dmul+0x4bc>
10016a8c:	220f      	movs	r2, #15
10016a8e:	2500      	movs	r5, #0
10016a90:	401a      	ands	r2, r3
10016a92:	001c      	movs	r4, r3
10016a94:	2a04      	cmp	r2, #4
10016a96:	d1d8      	bne.n	10016a4a <__aeabi_dmul+0x466>
10016a98:	0023      	movs	r3, r4
10016a9a:	0768      	lsls	r0, r5, #29
10016a9c:	026d      	lsls	r5, r5, #9
10016a9e:	0b2d      	lsrs	r5, r5, #12
10016aa0:	2401      	movs	r4, #1
10016aa2:	08db      	lsrs	r3, r3, #3
10016aa4:	4303      	orrs	r3, r0
10016aa6:	4698      	mov	r8, r3
10016aa8:	400c      	ands	r4, r1
10016aaa:	2300      	movs	r3, #0
10016aac:	e600      	b.n	100166b0 <__aeabi_dmul+0xcc>
10016aae:	2500      	movs	r5, #0
10016ab0:	e7e3      	b.n	10016a7a <__aeabi_dmul+0x496>
10016ab2:	2280      	movs	r2, #128	; 0x80
10016ab4:	2401      	movs	r4, #1
10016ab6:	0312      	lsls	r2, r2, #12
10016ab8:	4315      	orrs	r5, r2
10016aba:	032d      	lsls	r5, r5, #12
10016abc:	4698      	mov	r8, r3
10016abe:	0b2d      	lsrs	r5, r5, #12
10016ac0:	400c      	ands	r4, r1
10016ac2:	4b04      	ldr	r3, [pc, #16]	; (10016ad4 <__aeabi_dmul+0x4f0>)
10016ac4:	e5f4      	b.n	100166b0 <__aeabi_dmul+0xcc>
10016ac6:	46c0      	nop			; (mov r8, r8)
10016ac8:	000003ff 	.word	0x000003ff
10016acc:	feffffff 	.word	0xfeffffff
10016ad0:	000007fe 	.word	0x000007fe
10016ad4:	000007ff 	.word	0x000007ff

10016ad8 <__aeabi_dsub>:
10016ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
10016ada:	4657      	mov	r7, sl
10016adc:	464e      	mov	r6, r9
10016ade:	4645      	mov	r5, r8
10016ae0:	b4e0      	push	{r5, r6, r7}
10016ae2:	000e      	movs	r6, r1
10016ae4:	0011      	movs	r1, r2
10016ae6:	0ff2      	lsrs	r2, r6, #31
10016ae8:	4692      	mov	sl, r2
10016aea:	00c5      	lsls	r5, r0, #3
10016aec:	0f42      	lsrs	r2, r0, #29
10016aee:	0318      	lsls	r0, r3, #12
10016af0:	0337      	lsls	r7, r6, #12
10016af2:	0074      	lsls	r4, r6, #1
10016af4:	0a40      	lsrs	r0, r0, #9
10016af6:	0f4e      	lsrs	r6, r1, #29
10016af8:	0a7f      	lsrs	r7, r7, #9
10016afa:	4330      	orrs	r0, r6
10016afc:	4ecf      	ldr	r6, [pc, #828]	; (10016e3c <__aeabi_dsub+0x364>)
10016afe:	4317      	orrs	r7, r2
10016b00:	005a      	lsls	r2, r3, #1
10016b02:	0d64      	lsrs	r4, r4, #21
10016b04:	0d52      	lsrs	r2, r2, #21
10016b06:	0fdb      	lsrs	r3, r3, #31
10016b08:	00c9      	lsls	r1, r1, #3
10016b0a:	42b2      	cmp	r2, r6
10016b0c:	d100      	bne.n	10016b10 <__aeabi_dsub+0x38>
10016b0e:	e0e5      	b.n	10016cdc <__aeabi_dsub+0x204>
10016b10:	2601      	movs	r6, #1
10016b12:	4073      	eors	r3, r6
10016b14:	1aa6      	subs	r6, r4, r2
10016b16:	46b4      	mov	ip, r6
10016b18:	4553      	cmp	r3, sl
10016b1a:	d100      	bne.n	10016b1e <__aeabi_dsub+0x46>
10016b1c:	e0af      	b.n	10016c7e <__aeabi_dsub+0x1a6>
10016b1e:	2e00      	cmp	r6, #0
10016b20:	dc00      	bgt.n	10016b24 <__aeabi_dsub+0x4c>
10016b22:	e10d      	b.n	10016d40 <__aeabi_dsub+0x268>
10016b24:	2a00      	cmp	r2, #0
10016b26:	d13a      	bne.n	10016b9e <__aeabi_dsub+0xc6>
10016b28:	0003      	movs	r3, r0
10016b2a:	430b      	orrs	r3, r1
10016b2c:	d000      	beq.n	10016b30 <__aeabi_dsub+0x58>
10016b2e:	e0e4      	b.n	10016cfa <__aeabi_dsub+0x222>
10016b30:	076b      	lsls	r3, r5, #29
10016b32:	d009      	beq.n	10016b48 <__aeabi_dsub+0x70>
10016b34:	230f      	movs	r3, #15
10016b36:	402b      	ands	r3, r5
10016b38:	2b04      	cmp	r3, #4
10016b3a:	d005      	beq.n	10016b48 <__aeabi_dsub+0x70>
10016b3c:	1d2b      	adds	r3, r5, #4
10016b3e:	42ab      	cmp	r3, r5
10016b40:	41ad      	sbcs	r5, r5
10016b42:	426d      	negs	r5, r5
10016b44:	197f      	adds	r7, r7, r5
10016b46:	001d      	movs	r5, r3
10016b48:	023b      	lsls	r3, r7, #8
10016b4a:	d400      	bmi.n	10016b4e <__aeabi_dsub+0x76>
10016b4c:	e088      	b.n	10016c60 <__aeabi_dsub+0x188>
10016b4e:	4bbb      	ldr	r3, [pc, #748]	; (10016e3c <__aeabi_dsub+0x364>)
10016b50:	3401      	adds	r4, #1
10016b52:	429c      	cmp	r4, r3
10016b54:	d100      	bne.n	10016b58 <__aeabi_dsub+0x80>
10016b56:	e110      	b.n	10016d7a <__aeabi_dsub+0x2a2>
10016b58:	003a      	movs	r2, r7
10016b5a:	4bb9      	ldr	r3, [pc, #740]	; (10016e40 <__aeabi_dsub+0x368>)
10016b5c:	4651      	mov	r1, sl
10016b5e:	401a      	ands	r2, r3
10016b60:	2301      	movs	r3, #1
10016b62:	0750      	lsls	r0, r2, #29
10016b64:	08ed      	lsrs	r5, r5, #3
10016b66:	0252      	lsls	r2, r2, #9
10016b68:	0564      	lsls	r4, r4, #21
10016b6a:	4305      	orrs	r5, r0
10016b6c:	0b12      	lsrs	r2, r2, #12
10016b6e:	0d64      	lsrs	r4, r4, #21
10016b70:	400b      	ands	r3, r1
10016b72:	2100      	movs	r1, #0
10016b74:	0028      	movs	r0, r5
10016b76:	0312      	lsls	r2, r2, #12
10016b78:	0d0d      	lsrs	r5, r1, #20
10016b7a:	0b12      	lsrs	r2, r2, #12
10016b7c:	0564      	lsls	r4, r4, #21
10016b7e:	052d      	lsls	r5, r5, #20
10016b80:	4315      	orrs	r5, r2
10016b82:	0862      	lsrs	r2, r4, #1
10016b84:	4caf      	ldr	r4, [pc, #700]	; (10016e44 <__aeabi_dsub+0x36c>)
10016b86:	07db      	lsls	r3, r3, #31
10016b88:	402c      	ands	r4, r5
10016b8a:	4314      	orrs	r4, r2
10016b8c:	0064      	lsls	r4, r4, #1
10016b8e:	0864      	lsrs	r4, r4, #1
10016b90:	431c      	orrs	r4, r3
10016b92:	0021      	movs	r1, r4
10016b94:	bc1c      	pop	{r2, r3, r4}
10016b96:	4690      	mov	r8, r2
10016b98:	4699      	mov	r9, r3
10016b9a:	46a2      	mov	sl, r4
10016b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016b9e:	4ba7      	ldr	r3, [pc, #668]	; (10016e3c <__aeabi_dsub+0x364>)
10016ba0:	429c      	cmp	r4, r3
10016ba2:	d0c5      	beq.n	10016b30 <__aeabi_dsub+0x58>
10016ba4:	2380      	movs	r3, #128	; 0x80
10016ba6:	041b      	lsls	r3, r3, #16
10016ba8:	4318      	orrs	r0, r3
10016baa:	4663      	mov	r3, ip
10016bac:	2b38      	cmp	r3, #56	; 0x38
10016bae:	dd00      	ble.n	10016bb2 <__aeabi_dsub+0xda>
10016bb0:	e0fd      	b.n	10016dae <__aeabi_dsub+0x2d6>
10016bb2:	2b1f      	cmp	r3, #31
10016bb4:	dd00      	ble.n	10016bb8 <__aeabi_dsub+0xe0>
10016bb6:	e130      	b.n	10016e1a <__aeabi_dsub+0x342>
10016bb8:	4662      	mov	r2, ip
10016bba:	2320      	movs	r3, #32
10016bbc:	1a9b      	subs	r3, r3, r2
10016bbe:	0002      	movs	r2, r0
10016bc0:	409a      	lsls	r2, r3
10016bc2:	4666      	mov	r6, ip
10016bc4:	4690      	mov	r8, r2
10016bc6:	000a      	movs	r2, r1
10016bc8:	4099      	lsls	r1, r3
10016bca:	40f2      	lsrs	r2, r6
10016bcc:	4646      	mov	r6, r8
10016bce:	1e4b      	subs	r3, r1, #1
10016bd0:	4199      	sbcs	r1, r3
10016bd2:	4332      	orrs	r2, r6
10016bd4:	4311      	orrs	r1, r2
10016bd6:	4663      	mov	r3, ip
10016bd8:	0002      	movs	r2, r0
10016bda:	40da      	lsrs	r2, r3
10016bdc:	1a69      	subs	r1, r5, r1
10016bde:	428d      	cmp	r5, r1
10016be0:	419b      	sbcs	r3, r3
10016be2:	000d      	movs	r5, r1
10016be4:	1aba      	subs	r2, r7, r2
10016be6:	425b      	negs	r3, r3
10016be8:	1ad7      	subs	r7, r2, r3
10016bea:	023b      	lsls	r3, r7, #8
10016bec:	d535      	bpl.n	10016c5a <__aeabi_dsub+0x182>
10016bee:	027a      	lsls	r2, r7, #9
10016bf0:	0a53      	lsrs	r3, r2, #9
10016bf2:	4698      	mov	r8, r3
10016bf4:	4643      	mov	r3, r8
10016bf6:	2b00      	cmp	r3, #0
10016bf8:	d100      	bne.n	10016bfc <__aeabi_dsub+0x124>
10016bfa:	e0c4      	b.n	10016d86 <__aeabi_dsub+0x2ae>
10016bfc:	4640      	mov	r0, r8
10016bfe:	f000 fb2d 	bl	1001725c <__clzsi2>
10016c02:	0003      	movs	r3, r0
10016c04:	3b08      	subs	r3, #8
10016c06:	2b1f      	cmp	r3, #31
10016c08:	dd00      	ble.n	10016c0c <__aeabi_dsub+0x134>
10016c0a:	e0c5      	b.n	10016d98 <__aeabi_dsub+0x2c0>
10016c0c:	2220      	movs	r2, #32
10016c0e:	0029      	movs	r1, r5
10016c10:	1ad2      	subs	r2, r2, r3
10016c12:	4647      	mov	r7, r8
10016c14:	40d1      	lsrs	r1, r2
10016c16:	409f      	lsls	r7, r3
10016c18:	000a      	movs	r2, r1
10016c1a:	409d      	lsls	r5, r3
10016c1c:	433a      	orrs	r2, r7
10016c1e:	429c      	cmp	r4, r3
10016c20:	dd00      	ble.n	10016c24 <__aeabi_dsub+0x14c>
10016c22:	e0c0      	b.n	10016da6 <__aeabi_dsub+0x2ce>
10016c24:	1b1c      	subs	r4, r3, r4
10016c26:	1c63      	adds	r3, r4, #1
10016c28:	2b1f      	cmp	r3, #31
10016c2a:	dd00      	ble.n	10016c2e <__aeabi_dsub+0x156>
10016c2c:	e0e4      	b.n	10016df8 <__aeabi_dsub+0x320>
10016c2e:	2120      	movs	r1, #32
10016c30:	0014      	movs	r4, r2
10016c32:	0028      	movs	r0, r5
10016c34:	1ac9      	subs	r1, r1, r3
10016c36:	40d8      	lsrs	r0, r3
10016c38:	408c      	lsls	r4, r1
10016c3a:	408d      	lsls	r5, r1
10016c3c:	4304      	orrs	r4, r0
10016c3e:	40da      	lsrs	r2, r3
10016c40:	1e68      	subs	r0, r5, #1
10016c42:	4185      	sbcs	r5, r0
10016c44:	0017      	movs	r7, r2
10016c46:	4325      	orrs	r5, r4
10016c48:	2400      	movs	r4, #0
10016c4a:	e771      	b.n	10016b30 <__aeabi_dsub+0x58>
10016c4c:	4642      	mov	r2, r8
10016c4e:	4663      	mov	r3, ip
10016c50:	431a      	orrs	r2, r3
10016c52:	d100      	bne.n	10016c56 <__aeabi_dsub+0x17e>
10016c54:	e24c      	b.n	100170f0 <__aeabi_dsub+0x618>
10016c56:	4667      	mov	r7, ip
10016c58:	4645      	mov	r5, r8
10016c5a:	076b      	lsls	r3, r5, #29
10016c5c:	d000      	beq.n	10016c60 <__aeabi_dsub+0x188>
10016c5e:	e769      	b.n	10016b34 <__aeabi_dsub+0x5c>
10016c60:	2301      	movs	r3, #1
10016c62:	4651      	mov	r1, sl
10016c64:	0778      	lsls	r0, r7, #29
10016c66:	08ed      	lsrs	r5, r5, #3
10016c68:	08fa      	lsrs	r2, r7, #3
10016c6a:	400b      	ands	r3, r1
10016c6c:	4305      	orrs	r5, r0
10016c6e:	4973      	ldr	r1, [pc, #460]	; (10016e3c <__aeabi_dsub+0x364>)
10016c70:	428c      	cmp	r4, r1
10016c72:	d038      	beq.n	10016ce6 <__aeabi_dsub+0x20e>
10016c74:	0312      	lsls	r2, r2, #12
10016c76:	0564      	lsls	r4, r4, #21
10016c78:	0b12      	lsrs	r2, r2, #12
10016c7a:	0d64      	lsrs	r4, r4, #21
10016c7c:	e779      	b.n	10016b72 <__aeabi_dsub+0x9a>
10016c7e:	2e00      	cmp	r6, #0
10016c80:	dc00      	bgt.n	10016c84 <__aeabi_dsub+0x1ac>
10016c82:	e09a      	b.n	10016dba <__aeabi_dsub+0x2e2>
10016c84:	2a00      	cmp	r2, #0
10016c86:	d047      	beq.n	10016d18 <__aeabi_dsub+0x240>
10016c88:	4a6c      	ldr	r2, [pc, #432]	; (10016e3c <__aeabi_dsub+0x364>)
10016c8a:	4294      	cmp	r4, r2
10016c8c:	d100      	bne.n	10016c90 <__aeabi_dsub+0x1b8>
10016c8e:	e74f      	b.n	10016b30 <__aeabi_dsub+0x58>
10016c90:	2280      	movs	r2, #128	; 0x80
10016c92:	0412      	lsls	r2, r2, #16
10016c94:	4310      	orrs	r0, r2
10016c96:	4662      	mov	r2, ip
10016c98:	2a38      	cmp	r2, #56	; 0x38
10016c9a:	dc00      	bgt.n	10016c9e <__aeabi_dsub+0x1c6>
10016c9c:	e108      	b.n	10016eb0 <__aeabi_dsub+0x3d8>
10016c9e:	4301      	orrs	r1, r0
10016ca0:	1e48      	subs	r0, r1, #1
10016ca2:	4181      	sbcs	r1, r0
10016ca4:	2200      	movs	r2, #0
10016ca6:	b2c9      	uxtb	r1, r1
10016ca8:	1949      	adds	r1, r1, r5
10016caa:	19d2      	adds	r2, r2, r7
10016cac:	42a9      	cmp	r1, r5
10016cae:	41bf      	sbcs	r7, r7
10016cb0:	000d      	movs	r5, r1
10016cb2:	427f      	negs	r7, r7
10016cb4:	18bf      	adds	r7, r7, r2
10016cb6:	023a      	lsls	r2, r7, #8
10016cb8:	d400      	bmi.n	10016cbc <__aeabi_dsub+0x1e4>
10016cba:	e142      	b.n	10016f42 <__aeabi_dsub+0x46a>
10016cbc:	4a5f      	ldr	r2, [pc, #380]	; (10016e3c <__aeabi_dsub+0x364>)
10016cbe:	3401      	adds	r4, #1
10016cc0:	4294      	cmp	r4, r2
10016cc2:	d100      	bne.n	10016cc6 <__aeabi_dsub+0x1ee>
10016cc4:	e14e      	b.n	10016f64 <__aeabi_dsub+0x48c>
10016cc6:	2001      	movs	r0, #1
10016cc8:	4a5d      	ldr	r2, [pc, #372]	; (10016e40 <__aeabi_dsub+0x368>)
10016cca:	0869      	lsrs	r1, r5, #1
10016ccc:	403a      	ands	r2, r7
10016cce:	4028      	ands	r0, r5
10016cd0:	4308      	orrs	r0, r1
10016cd2:	07d5      	lsls	r5, r2, #31
10016cd4:	4305      	orrs	r5, r0
10016cd6:	0857      	lsrs	r7, r2, #1
10016cd8:	469a      	mov	sl, r3
10016cda:	e729      	b.n	10016b30 <__aeabi_dsub+0x58>
10016cdc:	0006      	movs	r6, r0
10016cde:	430e      	orrs	r6, r1
10016ce0:	d000      	beq.n	10016ce4 <__aeabi_dsub+0x20c>
10016ce2:	e717      	b.n	10016b14 <__aeabi_dsub+0x3c>
10016ce4:	e714      	b.n	10016b10 <__aeabi_dsub+0x38>
10016ce6:	0029      	movs	r1, r5
10016ce8:	4311      	orrs	r1, r2
10016cea:	d100      	bne.n	10016cee <__aeabi_dsub+0x216>
10016cec:	e1f9      	b.n	100170e2 <__aeabi_dsub+0x60a>
10016cee:	2180      	movs	r1, #128	; 0x80
10016cf0:	0309      	lsls	r1, r1, #12
10016cf2:	430a      	orrs	r2, r1
10016cf4:	0312      	lsls	r2, r2, #12
10016cf6:	0b12      	lsrs	r2, r2, #12
10016cf8:	e73b      	b.n	10016b72 <__aeabi_dsub+0x9a>
10016cfa:	2301      	movs	r3, #1
10016cfc:	425b      	negs	r3, r3
10016cfe:	4698      	mov	r8, r3
10016d00:	44c4      	add	ip, r8
10016d02:	4663      	mov	r3, ip
10016d04:	2b00      	cmp	r3, #0
10016d06:	d172      	bne.n	10016dee <__aeabi_dsub+0x316>
10016d08:	1a69      	subs	r1, r5, r1
10016d0a:	428d      	cmp	r5, r1
10016d0c:	419b      	sbcs	r3, r3
10016d0e:	1a3f      	subs	r7, r7, r0
10016d10:	425b      	negs	r3, r3
10016d12:	1aff      	subs	r7, r7, r3
10016d14:	000d      	movs	r5, r1
10016d16:	e768      	b.n	10016bea <__aeabi_dsub+0x112>
10016d18:	0002      	movs	r2, r0
10016d1a:	430a      	orrs	r2, r1
10016d1c:	d100      	bne.n	10016d20 <__aeabi_dsub+0x248>
10016d1e:	e707      	b.n	10016b30 <__aeabi_dsub+0x58>
10016d20:	2201      	movs	r2, #1
10016d22:	4252      	negs	r2, r2
10016d24:	4690      	mov	r8, r2
10016d26:	44c4      	add	ip, r8
10016d28:	4662      	mov	r2, ip
10016d2a:	2a00      	cmp	r2, #0
10016d2c:	d000      	beq.n	10016d30 <__aeabi_dsub+0x258>
10016d2e:	e0e6      	b.n	10016efe <__aeabi_dsub+0x426>
10016d30:	1869      	adds	r1, r5, r1
10016d32:	42a9      	cmp	r1, r5
10016d34:	41b6      	sbcs	r6, r6
10016d36:	183f      	adds	r7, r7, r0
10016d38:	4276      	negs	r6, r6
10016d3a:	19f7      	adds	r7, r6, r7
10016d3c:	000d      	movs	r5, r1
10016d3e:	e7ba      	b.n	10016cb6 <__aeabi_dsub+0x1de>
10016d40:	2e00      	cmp	r6, #0
10016d42:	d000      	beq.n	10016d46 <__aeabi_dsub+0x26e>
10016d44:	e080      	b.n	10016e48 <__aeabi_dsub+0x370>
10016d46:	1c62      	adds	r2, r4, #1
10016d48:	0552      	lsls	r2, r2, #21
10016d4a:	0d52      	lsrs	r2, r2, #21
10016d4c:	2a01      	cmp	r2, #1
10016d4e:	dc00      	bgt.n	10016d52 <__aeabi_dsub+0x27a>
10016d50:	e0f9      	b.n	10016f46 <__aeabi_dsub+0x46e>
10016d52:	1a6a      	subs	r2, r5, r1
10016d54:	4691      	mov	r9, r2
10016d56:	454d      	cmp	r5, r9
10016d58:	41b6      	sbcs	r6, r6
10016d5a:	1a3a      	subs	r2, r7, r0
10016d5c:	4276      	negs	r6, r6
10016d5e:	1b92      	subs	r2, r2, r6
10016d60:	4690      	mov	r8, r2
10016d62:	0212      	lsls	r2, r2, #8
10016d64:	d400      	bmi.n	10016d68 <__aeabi_dsub+0x290>
10016d66:	e099      	b.n	10016e9c <__aeabi_dsub+0x3c4>
10016d68:	1b4d      	subs	r5, r1, r5
10016d6a:	42a9      	cmp	r1, r5
10016d6c:	4189      	sbcs	r1, r1
10016d6e:	1bc7      	subs	r7, r0, r7
10016d70:	4249      	negs	r1, r1
10016d72:	1a7a      	subs	r2, r7, r1
10016d74:	4690      	mov	r8, r2
10016d76:	469a      	mov	sl, r3
10016d78:	e73c      	b.n	10016bf4 <__aeabi_dsub+0x11c>
10016d7a:	4652      	mov	r2, sl
10016d7c:	2301      	movs	r3, #1
10016d7e:	2500      	movs	r5, #0
10016d80:	4013      	ands	r3, r2
10016d82:	2200      	movs	r2, #0
10016d84:	e6f5      	b.n	10016b72 <__aeabi_dsub+0x9a>
10016d86:	0028      	movs	r0, r5
10016d88:	f000 fa68 	bl	1001725c <__clzsi2>
10016d8c:	3020      	adds	r0, #32
10016d8e:	0003      	movs	r3, r0
10016d90:	3b08      	subs	r3, #8
10016d92:	2b1f      	cmp	r3, #31
10016d94:	dc00      	bgt.n	10016d98 <__aeabi_dsub+0x2c0>
10016d96:	e739      	b.n	10016c0c <__aeabi_dsub+0x134>
10016d98:	002a      	movs	r2, r5
10016d9a:	3828      	subs	r0, #40	; 0x28
10016d9c:	4082      	lsls	r2, r0
10016d9e:	2500      	movs	r5, #0
10016da0:	429c      	cmp	r4, r3
10016da2:	dc00      	bgt.n	10016da6 <__aeabi_dsub+0x2ce>
10016da4:	e73e      	b.n	10016c24 <__aeabi_dsub+0x14c>
10016da6:	4f26      	ldr	r7, [pc, #152]	; (10016e40 <__aeabi_dsub+0x368>)
10016da8:	1ae4      	subs	r4, r4, r3
10016daa:	4017      	ands	r7, r2
10016dac:	e6c0      	b.n	10016b30 <__aeabi_dsub+0x58>
10016dae:	4301      	orrs	r1, r0
10016db0:	1e48      	subs	r0, r1, #1
10016db2:	4181      	sbcs	r1, r0
10016db4:	2200      	movs	r2, #0
10016db6:	b2c9      	uxtb	r1, r1
10016db8:	e710      	b.n	10016bdc <__aeabi_dsub+0x104>
10016dba:	2e00      	cmp	r6, #0
10016dbc:	d000      	beq.n	10016dc0 <__aeabi_dsub+0x2e8>
10016dbe:	e0f1      	b.n	10016fa4 <__aeabi_dsub+0x4cc>
10016dc0:	1c62      	adds	r2, r4, #1
10016dc2:	4694      	mov	ip, r2
10016dc4:	0552      	lsls	r2, r2, #21
10016dc6:	0d52      	lsrs	r2, r2, #21
10016dc8:	2a01      	cmp	r2, #1
10016dca:	dc00      	bgt.n	10016dce <__aeabi_dsub+0x2f6>
10016dcc:	e0a0      	b.n	10016f10 <__aeabi_dsub+0x438>
10016dce:	4a1b      	ldr	r2, [pc, #108]	; (10016e3c <__aeabi_dsub+0x364>)
10016dd0:	4594      	cmp	ip, r2
10016dd2:	d100      	bne.n	10016dd6 <__aeabi_dsub+0x2fe>
10016dd4:	e0c5      	b.n	10016f62 <__aeabi_dsub+0x48a>
10016dd6:	1869      	adds	r1, r5, r1
10016dd8:	42a9      	cmp	r1, r5
10016dda:	4192      	sbcs	r2, r2
10016ddc:	183f      	adds	r7, r7, r0
10016dde:	4252      	negs	r2, r2
10016de0:	19d2      	adds	r2, r2, r7
10016de2:	0849      	lsrs	r1, r1, #1
10016de4:	07d5      	lsls	r5, r2, #31
10016de6:	430d      	orrs	r5, r1
10016de8:	0857      	lsrs	r7, r2, #1
10016dea:	4664      	mov	r4, ip
10016dec:	e6a0      	b.n	10016b30 <__aeabi_dsub+0x58>
10016dee:	4b13      	ldr	r3, [pc, #76]	; (10016e3c <__aeabi_dsub+0x364>)
10016df0:	429c      	cmp	r4, r3
10016df2:	d000      	beq.n	10016df6 <__aeabi_dsub+0x31e>
10016df4:	e6d9      	b.n	10016baa <__aeabi_dsub+0xd2>
10016df6:	e69b      	b.n	10016b30 <__aeabi_dsub+0x58>
10016df8:	0011      	movs	r1, r2
10016dfa:	3c1f      	subs	r4, #31
10016dfc:	40e1      	lsrs	r1, r4
10016dfe:	000c      	movs	r4, r1
10016e00:	2b20      	cmp	r3, #32
10016e02:	d100      	bne.n	10016e06 <__aeabi_dsub+0x32e>
10016e04:	e080      	b.n	10016f08 <__aeabi_dsub+0x430>
10016e06:	2140      	movs	r1, #64	; 0x40
10016e08:	1acb      	subs	r3, r1, r3
10016e0a:	409a      	lsls	r2, r3
10016e0c:	4315      	orrs	r5, r2
10016e0e:	1e6a      	subs	r2, r5, #1
10016e10:	4195      	sbcs	r5, r2
10016e12:	2700      	movs	r7, #0
10016e14:	4325      	orrs	r5, r4
10016e16:	2400      	movs	r4, #0
10016e18:	e71f      	b.n	10016c5a <__aeabi_dsub+0x182>
10016e1a:	4663      	mov	r3, ip
10016e1c:	0002      	movs	r2, r0
10016e1e:	3b20      	subs	r3, #32
10016e20:	40da      	lsrs	r2, r3
10016e22:	4663      	mov	r3, ip
10016e24:	2b20      	cmp	r3, #32
10016e26:	d071      	beq.n	10016f0c <__aeabi_dsub+0x434>
10016e28:	2340      	movs	r3, #64	; 0x40
10016e2a:	4666      	mov	r6, ip
10016e2c:	1b9b      	subs	r3, r3, r6
10016e2e:	4098      	lsls	r0, r3
10016e30:	4301      	orrs	r1, r0
10016e32:	1e48      	subs	r0, r1, #1
10016e34:	4181      	sbcs	r1, r0
10016e36:	4311      	orrs	r1, r2
10016e38:	2200      	movs	r2, #0
10016e3a:	e6cf      	b.n	10016bdc <__aeabi_dsub+0x104>
10016e3c:	000007ff 	.word	0x000007ff
10016e40:	ff7fffff 	.word	0xff7fffff
10016e44:	800fffff 	.word	0x800fffff
10016e48:	2c00      	cmp	r4, #0
10016e4a:	d048      	beq.n	10016ede <__aeabi_dsub+0x406>
10016e4c:	4cca      	ldr	r4, [pc, #808]	; (10017178 <__aeabi_dsub+0x6a0>)
10016e4e:	42a2      	cmp	r2, r4
10016e50:	d100      	bne.n	10016e54 <__aeabi_dsub+0x37c>
10016e52:	e0a2      	b.n	10016f9a <__aeabi_dsub+0x4c2>
10016e54:	4274      	negs	r4, r6
10016e56:	46a1      	mov	r9, r4
10016e58:	2480      	movs	r4, #128	; 0x80
10016e5a:	0424      	lsls	r4, r4, #16
10016e5c:	4327      	orrs	r7, r4
10016e5e:	464c      	mov	r4, r9
10016e60:	2c38      	cmp	r4, #56	; 0x38
10016e62:	dd00      	ble.n	10016e66 <__aeabi_dsub+0x38e>
10016e64:	e0db      	b.n	1001701e <__aeabi_dsub+0x546>
10016e66:	2c1f      	cmp	r4, #31
10016e68:	dd00      	ble.n	10016e6c <__aeabi_dsub+0x394>
10016e6a:	e144      	b.n	100170f6 <__aeabi_dsub+0x61e>
10016e6c:	464e      	mov	r6, r9
10016e6e:	2420      	movs	r4, #32
10016e70:	1ba4      	subs	r4, r4, r6
10016e72:	003e      	movs	r6, r7
10016e74:	40a6      	lsls	r6, r4
10016e76:	46a2      	mov	sl, r4
10016e78:	46b0      	mov	r8, r6
10016e7a:	464c      	mov	r4, r9
10016e7c:	002e      	movs	r6, r5
10016e7e:	40e6      	lsrs	r6, r4
10016e80:	46b4      	mov	ip, r6
10016e82:	4646      	mov	r6, r8
10016e84:	4664      	mov	r4, ip
10016e86:	4326      	orrs	r6, r4
10016e88:	4654      	mov	r4, sl
10016e8a:	40a5      	lsls	r5, r4
10016e8c:	1e6c      	subs	r4, r5, #1
10016e8e:	41a5      	sbcs	r5, r4
10016e90:	0034      	movs	r4, r6
10016e92:	432c      	orrs	r4, r5
10016e94:	464d      	mov	r5, r9
10016e96:	40ef      	lsrs	r7, r5
10016e98:	1b0d      	subs	r5, r1, r4
10016e9a:	e028      	b.n	10016eee <__aeabi_dsub+0x416>
10016e9c:	464a      	mov	r2, r9
10016e9e:	4643      	mov	r3, r8
10016ea0:	464d      	mov	r5, r9
10016ea2:	431a      	orrs	r2, r3
10016ea4:	d000      	beq.n	10016ea8 <__aeabi_dsub+0x3d0>
10016ea6:	e6a5      	b.n	10016bf4 <__aeabi_dsub+0x11c>
10016ea8:	2300      	movs	r3, #0
10016eaa:	2400      	movs	r4, #0
10016eac:	2500      	movs	r5, #0
10016eae:	e6de      	b.n	10016c6e <__aeabi_dsub+0x196>
10016eb0:	2a1f      	cmp	r2, #31
10016eb2:	dc5a      	bgt.n	10016f6a <__aeabi_dsub+0x492>
10016eb4:	4666      	mov	r6, ip
10016eb6:	2220      	movs	r2, #32
10016eb8:	1b92      	subs	r2, r2, r6
10016eba:	0006      	movs	r6, r0
10016ebc:	4096      	lsls	r6, r2
10016ebe:	4691      	mov	r9, r2
10016ec0:	46b0      	mov	r8, r6
10016ec2:	4662      	mov	r2, ip
10016ec4:	000e      	movs	r6, r1
10016ec6:	40d6      	lsrs	r6, r2
10016ec8:	4642      	mov	r2, r8
10016eca:	4316      	orrs	r6, r2
10016ecc:	464a      	mov	r2, r9
10016ece:	4091      	lsls	r1, r2
10016ed0:	1e4a      	subs	r2, r1, #1
10016ed2:	4191      	sbcs	r1, r2
10016ed4:	0002      	movs	r2, r0
10016ed6:	4660      	mov	r0, ip
10016ed8:	4331      	orrs	r1, r6
10016eda:	40c2      	lsrs	r2, r0
10016edc:	e6e4      	b.n	10016ca8 <__aeabi_dsub+0x1d0>
10016ede:	003c      	movs	r4, r7
10016ee0:	432c      	orrs	r4, r5
10016ee2:	d05a      	beq.n	10016f9a <__aeabi_dsub+0x4c2>
10016ee4:	43f4      	mvns	r4, r6
10016ee6:	46a1      	mov	r9, r4
10016ee8:	2c00      	cmp	r4, #0
10016eea:	d152      	bne.n	10016f92 <__aeabi_dsub+0x4ba>
10016eec:	1b4d      	subs	r5, r1, r5
10016eee:	42a9      	cmp	r1, r5
10016ef0:	4189      	sbcs	r1, r1
10016ef2:	1bc7      	subs	r7, r0, r7
10016ef4:	4249      	negs	r1, r1
10016ef6:	1a7f      	subs	r7, r7, r1
10016ef8:	0014      	movs	r4, r2
10016efa:	469a      	mov	sl, r3
10016efc:	e675      	b.n	10016bea <__aeabi_dsub+0x112>
10016efe:	4a9e      	ldr	r2, [pc, #632]	; (10017178 <__aeabi_dsub+0x6a0>)
10016f00:	4294      	cmp	r4, r2
10016f02:	d000      	beq.n	10016f06 <__aeabi_dsub+0x42e>
10016f04:	e6c7      	b.n	10016c96 <__aeabi_dsub+0x1be>
10016f06:	e613      	b.n	10016b30 <__aeabi_dsub+0x58>
10016f08:	2200      	movs	r2, #0
10016f0a:	e77f      	b.n	10016e0c <__aeabi_dsub+0x334>
10016f0c:	2000      	movs	r0, #0
10016f0e:	e78f      	b.n	10016e30 <__aeabi_dsub+0x358>
10016f10:	2c00      	cmp	r4, #0
10016f12:	d000      	beq.n	10016f16 <__aeabi_dsub+0x43e>
10016f14:	e0c8      	b.n	100170a8 <__aeabi_dsub+0x5d0>
10016f16:	003b      	movs	r3, r7
10016f18:	432b      	orrs	r3, r5
10016f1a:	d100      	bne.n	10016f1e <__aeabi_dsub+0x446>
10016f1c:	e10f      	b.n	1001713e <__aeabi_dsub+0x666>
10016f1e:	0003      	movs	r3, r0
10016f20:	430b      	orrs	r3, r1
10016f22:	d100      	bne.n	10016f26 <__aeabi_dsub+0x44e>
10016f24:	e604      	b.n	10016b30 <__aeabi_dsub+0x58>
10016f26:	1869      	adds	r1, r5, r1
10016f28:	42a9      	cmp	r1, r5
10016f2a:	419b      	sbcs	r3, r3
10016f2c:	183f      	adds	r7, r7, r0
10016f2e:	425b      	negs	r3, r3
10016f30:	19df      	adds	r7, r3, r7
10016f32:	023b      	lsls	r3, r7, #8
10016f34:	d400      	bmi.n	10016f38 <__aeabi_dsub+0x460>
10016f36:	e11a      	b.n	1001716e <__aeabi_dsub+0x696>
10016f38:	4b90      	ldr	r3, [pc, #576]	; (1001717c <__aeabi_dsub+0x6a4>)
10016f3a:	000d      	movs	r5, r1
10016f3c:	401f      	ands	r7, r3
10016f3e:	4664      	mov	r4, ip
10016f40:	e5f6      	b.n	10016b30 <__aeabi_dsub+0x58>
10016f42:	469a      	mov	sl, r3
10016f44:	e689      	b.n	10016c5a <__aeabi_dsub+0x182>
10016f46:	003a      	movs	r2, r7
10016f48:	432a      	orrs	r2, r5
10016f4a:	2c00      	cmp	r4, #0
10016f4c:	d15c      	bne.n	10017008 <__aeabi_dsub+0x530>
10016f4e:	2a00      	cmp	r2, #0
10016f50:	d175      	bne.n	1001703e <__aeabi_dsub+0x566>
10016f52:	0002      	movs	r2, r0
10016f54:	430a      	orrs	r2, r1
10016f56:	d100      	bne.n	10016f5a <__aeabi_dsub+0x482>
10016f58:	e0ca      	b.n	100170f0 <__aeabi_dsub+0x618>
10016f5a:	0007      	movs	r7, r0
10016f5c:	000d      	movs	r5, r1
10016f5e:	469a      	mov	sl, r3
10016f60:	e5e6      	b.n	10016b30 <__aeabi_dsub+0x58>
10016f62:	4664      	mov	r4, ip
10016f64:	2200      	movs	r2, #0
10016f66:	2500      	movs	r5, #0
10016f68:	e681      	b.n	10016c6e <__aeabi_dsub+0x196>
10016f6a:	4662      	mov	r2, ip
10016f6c:	0006      	movs	r6, r0
10016f6e:	3a20      	subs	r2, #32
10016f70:	40d6      	lsrs	r6, r2
10016f72:	4662      	mov	r2, ip
10016f74:	46b0      	mov	r8, r6
10016f76:	2a20      	cmp	r2, #32
10016f78:	d100      	bne.n	10016f7c <__aeabi_dsub+0x4a4>
10016f7a:	e0b7      	b.n	100170ec <__aeabi_dsub+0x614>
10016f7c:	2240      	movs	r2, #64	; 0x40
10016f7e:	4666      	mov	r6, ip
10016f80:	1b92      	subs	r2, r2, r6
10016f82:	4090      	lsls	r0, r2
10016f84:	4301      	orrs	r1, r0
10016f86:	4642      	mov	r2, r8
10016f88:	1e48      	subs	r0, r1, #1
10016f8a:	4181      	sbcs	r1, r0
10016f8c:	4311      	orrs	r1, r2
10016f8e:	2200      	movs	r2, #0
10016f90:	e68a      	b.n	10016ca8 <__aeabi_dsub+0x1d0>
10016f92:	4c79      	ldr	r4, [pc, #484]	; (10017178 <__aeabi_dsub+0x6a0>)
10016f94:	42a2      	cmp	r2, r4
10016f96:	d000      	beq.n	10016f9a <__aeabi_dsub+0x4c2>
10016f98:	e761      	b.n	10016e5e <__aeabi_dsub+0x386>
10016f9a:	0007      	movs	r7, r0
10016f9c:	000d      	movs	r5, r1
10016f9e:	0014      	movs	r4, r2
10016fa0:	469a      	mov	sl, r3
10016fa2:	e5c5      	b.n	10016b30 <__aeabi_dsub+0x58>
10016fa4:	2c00      	cmp	r4, #0
10016fa6:	d141      	bne.n	1001702c <__aeabi_dsub+0x554>
10016fa8:	003c      	movs	r4, r7
10016faa:	432c      	orrs	r4, r5
10016fac:	d078      	beq.n	100170a0 <__aeabi_dsub+0x5c8>
10016fae:	43f4      	mvns	r4, r6
10016fb0:	46a1      	mov	r9, r4
10016fb2:	2c00      	cmp	r4, #0
10016fb4:	d020      	beq.n	10016ff8 <__aeabi_dsub+0x520>
10016fb6:	4c70      	ldr	r4, [pc, #448]	; (10017178 <__aeabi_dsub+0x6a0>)
10016fb8:	42a2      	cmp	r2, r4
10016fba:	d071      	beq.n	100170a0 <__aeabi_dsub+0x5c8>
10016fbc:	464c      	mov	r4, r9
10016fbe:	2c38      	cmp	r4, #56	; 0x38
10016fc0:	dd00      	ble.n	10016fc4 <__aeabi_dsub+0x4ec>
10016fc2:	e0b2      	b.n	1001712a <__aeabi_dsub+0x652>
10016fc4:	2c1f      	cmp	r4, #31
10016fc6:	dd00      	ble.n	10016fca <__aeabi_dsub+0x4f2>
10016fc8:	e0bc      	b.n	10017144 <__aeabi_dsub+0x66c>
10016fca:	2620      	movs	r6, #32
10016fcc:	1b34      	subs	r4, r6, r4
10016fce:	46a2      	mov	sl, r4
10016fd0:	003c      	movs	r4, r7
10016fd2:	4656      	mov	r6, sl
10016fd4:	40b4      	lsls	r4, r6
10016fd6:	464e      	mov	r6, r9
10016fd8:	46a0      	mov	r8, r4
10016fda:	002c      	movs	r4, r5
10016fdc:	40f4      	lsrs	r4, r6
10016fde:	46a4      	mov	ip, r4
10016fe0:	4644      	mov	r4, r8
10016fe2:	4666      	mov	r6, ip
10016fe4:	4334      	orrs	r4, r6
10016fe6:	46a4      	mov	ip, r4
10016fe8:	4654      	mov	r4, sl
10016fea:	40a5      	lsls	r5, r4
10016fec:	4664      	mov	r4, ip
10016fee:	1e6e      	subs	r6, r5, #1
10016ff0:	41b5      	sbcs	r5, r6
10016ff2:	4325      	orrs	r5, r4
10016ff4:	464c      	mov	r4, r9
10016ff6:	40e7      	lsrs	r7, r4
10016ff8:	186d      	adds	r5, r5, r1
10016ffa:	428d      	cmp	r5, r1
10016ffc:	4189      	sbcs	r1, r1
10016ffe:	183f      	adds	r7, r7, r0
10017000:	4249      	negs	r1, r1
10017002:	19cf      	adds	r7, r1, r7
10017004:	0014      	movs	r4, r2
10017006:	e656      	b.n	10016cb6 <__aeabi_dsub+0x1de>
10017008:	2a00      	cmp	r2, #0
1001700a:	d12f      	bne.n	1001706c <__aeabi_dsub+0x594>
1001700c:	0002      	movs	r2, r0
1001700e:	430a      	orrs	r2, r1
10017010:	d100      	bne.n	10017014 <__aeabi_dsub+0x53c>
10017012:	e084      	b.n	1001711e <__aeabi_dsub+0x646>
10017014:	0007      	movs	r7, r0
10017016:	000d      	movs	r5, r1
10017018:	469a      	mov	sl, r3
1001701a:	4c57      	ldr	r4, [pc, #348]	; (10017178 <__aeabi_dsub+0x6a0>)
1001701c:	e588      	b.n	10016b30 <__aeabi_dsub+0x58>
1001701e:	433d      	orrs	r5, r7
10017020:	1e6f      	subs	r7, r5, #1
10017022:	41bd      	sbcs	r5, r7
10017024:	b2ec      	uxtb	r4, r5
10017026:	2700      	movs	r7, #0
10017028:	1b0d      	subs	r5, r1, r4
1001702a:	e760      	b.n	10016eee <__aeabi_dsub+0x416>
1001702c:	4c52      	ldr	r4, [pc, #328]	; (10017178 <__aeabi_dsub+0x6a0>)
1001702e:	42a2      	cmp	r2, r4
10017030:	d036      	beq.n	100170a0 <__aeabi_dsub+0x5c8>
10017032:	4274      	negs	r4, r6
10017034:	2680      	movs	r6, #128	; 0x80
10017036:	0436      	lsls	r6, r6, #16
10017038:	46a1      	mov	r9, r4
1001703a:	4337      	orrs	r7, r6
1001703c:	e7be      	b.n	10016fbc <__aeabi_dsub+0x4e4>
1001703e:	0002      	movs	r2, r0
10017040:	430a      	orrs	r2, r1
10017042:	d100      	bne.n	10017046 <__aeabi_dsub+0x56e>
10017044:	e574      	b.n	10016b30 <__aeabi_dsub+0x58>
10017046:	1a6a      	subs	r2, r5, r1
10017048:	4690      	mov	r8, r2
1001704a:	4545      	cmp	r5, r8
1001704c:	41b6      	sbcs	r6, r6
1001704e:	1a3a      	subs	r2, r7, r0
10017050:	4276      	negs	r6, r6
10017052:	1b92      	subs	r2, r2, r6
10017054:	4694      	mov	ip, r2
10017056:	0212      	lsls	r2, r2, #8
10017058:	d400      	bmi.n	1001705c <__aeabi_dsub+0x584>
1001705a:	e5f7      	b.n	10016c4c <__aeabi_dsub+0x174>
1001705c:	1b4d      	subs	r5, r1, r5
1001705e:	42a9      	cmp	r1, r5
10017060:	4189      	sbcs	r1, r1
10017062:	1bc7      	subs	r7, r0, r7
10017064:	4249      	negs	r1, r1
10017066:	1a7f      	subs	r7, r7, r1
10017068:	469a      	mov	sl, r3
1001706a:	e561      	b.n	10016b30 <__aeabi_dsub+0x58>
1001706c:	0002      	movs	r2, r0
1001706e:	430a      	orrs	r2, r1
10017070:	d03a      	beq.n	100170e8 <__aeabi_dsub+0x610>
10017072:	08ed      	lsrs	r5, r5, #3
10017074:	077c      	lsls	r4, r7, #29
10017076:	432c      	orrs	r4, r5
10017078:	2580      	movs	r5, #128	; 0x80
1001707a:	08fa      	lsrs	r2, r7, #3
1001707c:	032d      	lsls	r5, r5, #12
1001707e:	422a      	tst	r2, r5
10017080:	d008      	beq.n	10017094 <__aeabi_dsub+0x5bc>
10017082:	08c7      	lsrs	r7, r0, #3
10017084:	422f      	tst	r7, r5
10017086:	d105      	bne.n	10017094 <__aeabi_dsub+0x5bc>
10017088:	0745      	lsls	r5, r0, #29
1001708a:	002c      	movs	r4, r5
1001708c:	003a      	movs	r2, r7
1001708e:	469a      	mov	sl, r3
10017090:	08c9      	lsrs	r1, r1, #3
10017092:	430c      	orrs	r4, r1
10017094:	0f67      	lsrs	r7, r4, #29
10017096:	00d2      	lsls	r2, r2, #3
10017098:	00e5      	lsls	r5, r4, #3
1001709a:	4317      	orrs	r7, r2
1001709c:	4c36      	ldr	r4, [pc, #216]	; (10017178 <__aeabi_dsub+0x6a0>)
1001709e:	e547      	b.n	10016b30 <__aeabi_dsub+0x58>
100170a0:	0007      	movs	r7, r0
100170a2:	000d      	movs	r5, r1
100170a4:	0014      	movs	r4, r2
100170a6:	e543      	b.n	10016b30 <__aeabi_dsub+0x58>
100170a8:	003a      	movs	r2, r7
100170aa:	432a      	orrs	r2, r5
100170ac:	d043      	beq.n	10017136 <__aeabi_dsub+0x65e>
100170ae:	0002      	movs	r2, r0
100170b0:	430a      	orrs	r2, r1
100170b2:	d019      	beq.n	100170e8 <__aeabi_dsub+0x610>
100170b4:	08ed      	lsrs	r5, r5, #3
100170b6:	077c      	lsls	r4, r7, #29
100170b8:	432c      	orrs	r4, r5
100170ba:	2580      	movs	r5, #128	; 0x80
100170bc:	08fa      	lsrs	r2, r7, #3
100170be:	032d      	lsls	r5, r5, #12
100170c0:	422a      	tst	r2, r5
100170c2:	d007      	beq.n	100170d4 <__aeabi_dsub+0x5fc>
100170c4:	08c6      	lsrs	r6, r0, #3
100170c6:	422e      	tst	r6, r5
100170c8:	d104      	bne.n	100170d4 <__aeabi_dsub+0x5fc>
100170ca:	0747      	lsls	r7, r0, #29
100170cc:	003c      	movs	r4, r7
100170ce:	0032      	movs	r2, r6
100170d0:	08c9      	lsrs	r1, r1, #3
100170d2:	430c      	orrs	r4, r1
100170d4:	00d7      	lsls	r7, r2, #3
100170d6:	0f62      	lsrs	r2, r4, #29
100170d8:	00e5      	lsls	r5, r4, #3
100170da:	4317      	orrs	r7, r2
100170dc:	469a      	mov	sl, r3
100170de:	4c26      	ldr	r4, [pc, #152]	; (10017178 <__aeabi_dsub+0x6a0>)
100170e0:	e526      	b.n	10016b30 <__aeabi_dsub+0x58>
100170e2:	2200      	movs	r2, #0
100170e4:	2500      	movs	r5, #0
100170e6:	e544      	b.n	10016b72 <__aeabi_dsub+0x9a>
100170e8:	4c23      	ldr	r4, [pc, #140]	; (10017178 <__aeabi_dsub+0x6a0>)
100170ea:	e521      	b.n	10016b30 <__aeabi_dsub+0x58>
100170ec:	2000      	movs	r0, #0
100170ee:	e749      	b.n	10016f84 <__aeabi_dsub+0x4ac>
100170f0:	2300      	movs	r3, #0
100170f2:	2500      	movs	r5, #0
100170f4:	e5bb      	b.n	10016c6e <__aeabi_dsub+0x196>
100170f6:	464c      	mov	r4, r9
100170f8:	003e      	movs	r6, r7
100170fa:	3c20      	subs	r4, #32
100170fc:	40e6      	lsrs	r6, r4
100170fe:	464c      	mov	r4, r9
10017100:	46b4      	mov	ip, r6
10017102:	2c20      	cmp	r4, #32
10017104:	d031      	beq.n	1001716a <__aeabi_dsub+0x692>
10017106:	2440      	movs	r4, #64	; 0x40
10017108:	464e      	mov	r6, r9
1001710a:	1ba6      	subs	r6, r4, r6
1001710c:	40b7      	lsls	r7, r6
1001710e:	433d      	orrs	r5, r7
10017110:	1e6c      	subs	r4, r5, #1
10017112:	41a5      	sbcs	r5, r4
10017114:	4664      	mov	r4, ip
10017116:	432c      	orrs	r4, r5
10017118:	2700      	movs	r7, #0
1001711a:	1b0d      	subs	r5, r1, r4
1001711c:	e6e7      	b.n	10016eee <__aeabi_dsub+0x416>
1001711e:	2280      	movs	r2, #128	; 0x80
10017120:	2300      	movs	r3, #0
10017122:	0312      	lsls	r2, r2, #12
10017124:	4c14      	ldr	r4, [pc, #80]	; (10017178 <__aeabi_dsub+0x6a0>)
10017126:	2500      	movs	r5, #0
10017128:	e5a1      	b.n	10016c6e <__aeabi_dsub+0x196>
1001712a:	433d      	orrs	r5, r7
1001712c:	1e6f      	subs	r7, r5, #1
1001712e:	41bd      	sbcs	r5, r7
10017130:	2700      	movs	r7, #0
10017132:	b2ed      	uxtb	r5, r5
10017134:	e760      	b.n	10016ff8 <__aeabi_dsub+0x520>
10017136:	0007      	movs	r7, r0
10017138:	000d      	movs	r5, r1
1001713a:	4c0f      	ldr	r4, [pc, #60]	; (10017178 <__aeabi_dsub+0x6a0>)
1001713c:	e4f8      	b.n	10016b30 <__aeabi_dsub+0x58>
1001713e:	0007      	movs	r7, r0
10017140:	000d      	movs	r5, r1
10017142:	e4f5      	b.n	10016b30 <__aeabi_dsub+0x58>
10017144:	464e      	mov	r6, r9
10017146:	003c      	movs	r4, r7
10017148:	3e20      	subs	r6, #32
1001714a:	40f4      	lsrs	r4, r6
1001714c:	46a0      	mov	r8, r4
1001714e:	464c      	mov	r4, r9
10017150:	2c20      	cmp	r4, #32
10017152:	d00e      	beq.n	10017172 <__aeabi_dsub+0x69a>
10017154:	2440      	movs	r4, #64	; 0x40
10017156:	464e      	mov	r6, r9
10017158:	1ba4      	subs	r4, r4, r6
1001715a:	40a7      	lsls	r7, r4
1001715c:	433d      	orrs	r5, r7
1001715e:	1e6f      	subs	r7, r5, #1
10017160:	41bd      	sbcs	r5, r7
10017162:	4644      	mov	r4, r8
10017164:	2700      	movs	r7, #0
10017166:	4325      	orrs	r5, r4
10017168:	e746      	b.n	10016ff8 <__aeabi_dsub+0x520>
1001716a:	2700      	movs	r7, #0
1001716c:	e7cf      	b.n	1001710e <__aeabi_dsub+0x636>
1001716e:	000d      	movs	r5, r1
10017170:	e573      	b.n	10016c5a <__aeabi_dsub+0x182>
10017172:	2700      	movs	r7, #0
10017174:	e7f2      	b.n	1001715c <__aeabi_dsub+0x684>
10017176:	46c0      	nop			; (mov r8, r8)
10017178:	000007ff 	.word	0x000007ff
1001717c:	ff7fffff 	.word	0xff7fffff

10017180 <__aeabi_d2iz>:
10017180:	030b      	lsls	r3, r1, #12
10017182:	b530      	push	{r4, r5, lr}
10017184:	4d13      	ldr	r5, [pc, #76]	; (100171d4 <__aeabi_d2iz+0x54>)
10017186:	0b1a      	lsrs	r2, r3, #12
10017188:	004b      	lsls	r3, r1, #1
1001718a:	0d5b      	lsrs	r3, r3, #21
1001718c:	0fc9      	lsrs	r1, r1, #31
1001718e:	2400      	movs	r4, #0
10017190:	42ab      	cmp	r3, r5
10017192:	dd11      	ble.n	100171b8 <__aeabi_d2iz+0x38>
10017194:	4c10      	ldr	r4, [pc, #64]	; (100171d8 <__aeabi_d2iz+0x58>)
10017196:	42a3      	cmp	r3, r4
10017198:	dc10      	bgt.n	100171bc <__aeabi_d2iz+0x3c>
1001719a:	2480      	movs	r4, #128	; 0x80
1001719c:	0364      	lsls	r4, r4, #13
1001719e:	4322      	orrs	r2, r4
100171a0:	4c0e      	ldr	r4, [pc, #56]	; (100171dc <__aeabi_d2iz+0x5c>)
100171a2:	1ae4      	subs	r4, r4, r3
100171a4:	2c1f      	cmp	r4, #31
100171a6:	dd0c      	ble.n	100171c2 <__aeabi_d2iz+0x42>
100171a8:	480d      	ldr	r0, [pc, #52]	; (100171e0 <__aeabi_d2iz+0x60>)
100171aa:	1ac3      	subs	r3, r0, r3
100171ac:	40da      	lsrs	r2, r3
100171ae:	0013      	movs	r3, r2
100171b0:	425c      	negs	r4, r3
100171b2:	2900      	cmp	r1, #0
100171b4:	d100      	bne.n	100171b8 <__aeabi_d2iz+0x38>
100171b6:	001c      	movs	r4, r3
100171b8:	0020      	movs	r0, r4
100171ba:	bd30      	pop	{r4, r5, pc}
100171bc:	4b09      	ldr	r3, [pc, #36]	; (100171e4 <__aeabi_d2iz+0x64>)
100171be:	18cc      	adds	r4, r1, r3
100171c0:	e7fa      	b.n	100171b8 <__aeabi_d2iz+0x38>
100171c2:	40e0      	lsrs	r0, r4
100171c4:	4c08      	ldr	r4, [pc, #32]	; (100171e8 <__aeabi_d2iz+0x68>)
100171c6:	46a4      	mov	ip, r4
100171c8:	4463      	add	r3, ip
100171ca:	409a      	lsls	r2, r3
100171cc:	0013      	movs	r3, r2
100171ce:	4303      	orrs	r3, r0
100171d0:	e7ee      	b.n	100171b0 <__aeabi_d2iz+0x30>
100171d2:	46c0      	nop			; (mov r8, r8)
100171d4:	000003fe 	.word	0x000003fe
100171d8:	0000041d 	.word	0x0000041d
100171dc:	00000433 	.word	0x00000433
100171e0:	00000413 	.word	0x00000413
100171e4:	7fffffff 	.word	0x7fffffff
100171e8:	fffffbed 	.word	0xfffffbed

100171ec <__aeabi_ui2d>:
100171ec:	b570      	push	{r4, r5, r6, lr}
100171ee:	1e05      	subs	r5, r0, #0
100171f0:	d028      	beq.n	10017244 <__aeabi_ui2d+0x58>
100171f2:	f000 f833 	bl	1001725c <__clzsi2>
100171f6:	4b15      	ldr	r3, [pc, #84]	; (1001724c <__aeabi_ui2d+0x60>)
100171f8:	4a15      	ldr	r2, [pc, #84]	; (10017250 <__aeabi_ui2d+0x64>)
100171fa:	1a1b      	subs	r3, r3, r0
100171fc:	1ad2      	subs	r2, r2, r3
100171fe:	2a1f      	cmp	r2, #31
10017200:	dd16      	ble.n	10017230 <__aeabi_ui2d+0x44>
10017202:	002c      	movs	r4, r5
10017204:	4a13      	ldr	r2, [pc, #76]	; (10017254 <__aeabi_ui2d+0x68>)
10017206:	2500      	movs	r5, #0
10017208:	1ad2      	subs	r2, r2, r3
1001720a:	4094      	lsls	r4, r2
1001720c:	055a      	lsls	r2, r3, #21
1001720e:	0324      	lsls	r4, r4, #12
10017210:	0b24      	lsrs	r4, r4, #12
10017212:	0d52      	lsrs	r2, r2, #21
10017214:	2100      	movs	r1, #0
10017216:	0324      	lsls	r4, r4, #12
10017218:	0d0b      	lsrs	r3, r1, #20
1001721a:	0b24      	lsrs	r4, r4, #12
1001721c:	051b      	lsls	r3, r3, #20
1001721e:	4323      	orrs	r3, r4
10017220:	4c0d      	ldr	r4, [pc, #52]	; (10017258 <__aeabi_ui2d+0x6c>)
10017222:	0512      	lsls	r2, r2, #20
10017224:	4023      	ands	r3, r4
10017226:	4313      	orrs	r3, r2
10017228:	005b      	lsls	r3, r3, #1
1001722a:	0028      	movs	r0, r5
1001722c:	0859      	lsrs	r1, r3, #1
1001722e:	bd70      	pop	{r4, r5, r6, pc}
10017230:	210b      	movs	r1, #11
10017232:	002c      	movs	r4, r5
10017234:	1a08      	subs	r0, r1, r0
10017236:	40c4      	lsrs	r4, r0
10017238:	4095      	lsls	r5, r2
1001723a:	0324      	lsls	r4, r4, #12
1001723c:	055a      	lsls	r2, r3, #21
1001723e:	0b24      	lsrs	r4, r4, #12
10017240:	0d52      	lsrs	r2, r2, #21
10017242:	e7e7      	b.n	10017214 <__aeabi_ui2d+0x28>
10017244:	2200      	movs	r2, #0
10017246:	2400      	movs	r4, #0
10017248:	e7e4      	b.n	10017214 <__aeabi_ui2d+0x28>
1001724a:	46c0      	nop			; (mov r8, r8)
1001724c:	0000041e 	.word	0x0000041e
10017250:	00000433 	.word	0x00000433
10017254:	00000413 	.word	0x00000413
10017258:	800fffff 	.word	0x800fffff

1001725c <__clzsi2>:
1001725c:	211c      	movs	r1, #28
1001725e:	2301      	movs	r3, #1
10017260:	041b      	lsls	r3, r3, #16
10017262:	4298      	cmp	r0, r3
10017264:	d301      	bcc.n	1001726a <__clzsi2+0xe>
10017266:	0c00      	lsrs	r0, r0, #16
10017268:	3910      	subs	r1, #16
1001726a:	0a1b      	lsrs	r3, r3, #8
1001726c:	4298      	cmp	r0, r3
1001726e:	d301      	bcc.n	10017274 <__clzsi2+0x18>
10017270:	0a00      	lsrs	r0, r0, #8
10017272:	3908      	subs	r1, #8
10017274:	091b      	lsrs	r3, r3, #4
10017276:	4298      	cmp	r0, r3
10017278:	d301      	bcc.n	1001727e <__clzsi2+0x22>
1001727a:	0900      	lsrs	r0, r0, #4
1001727c:	3904      	subs	r1, #4
1001727e:	a202      	add	r2, pc, #8	; (adr r2, 10017288 <__clzsi2+0x2c>)
10017280:	5c10      	ldrb	r0, [r2, r0]
10017282:	1840      	adds	r0, r0, r1
10017284:	4770      	bx	lr
10017286:	46c0      	nop			; (mov r8, r8)
10017288:	02020304 	.word	0x02020304
1001728c:	01010101 	.word	0x01010101
	...

10017298 <__libc_init_array>:
10017298:	4b0e      	ldr	r3, [pc, #56]	; (100172d4 <__libc_init_array+0x3c>)
1001729a:	b570      	push	{r4, r5, r6, lr}
1001729c:	2500      	movs	r5, #0
1001729e:	001e      	movs	r6, r3
100172a0:	4c0d      	ldr	r4, [pc, #52]	; (100172d8 <__libc_init_array+0x40>)
100172a2:	1ae4      	subs	r4, r4, r3
100172a4:	10a4      	asrs	r4, r4, #2
100172a6:	42a5      	cmp	r5, r4
100172a8:	d004      	beq.n	100172b4 <__libc_init_array+0x1c>
100172aa:	00ab      	lsls	r3, r5, #2
100172ac:	58f3      	ldr	r3, [r6, r3]
100172ae:	4798      	blx	r3
100172b0:	3501      	adds	r5, #1
100172b2:	e7f8      	b.n	100172a6 <__libc_init_array+0xe>
100172b4:	f002 fbbc 	bl	10019a30 <_init>
100172b8:	4b08      	ldr	r3, [pc, #32]	; (100172dc <__libc_init_array+0x44>)
100172ba:	2500      	movs	r5, #0
100172bc:	001e      	movs	r6, r3
100172be:	4c08      	ldr	r4, [pc, #32]	; (100172e0 <__libc_init_array+0x48>)
100172c0:	1ae4      	subs	r4, r4, r3
100172c2:	10a4      	asrs	r4, r4, #2
100172c4:	42a5      	cmp	r5, r4
100172c6:	d004      	beq.n	100172d2 <__libc_init_array+0x3a>
100172c8:	00ab      	lsls	r3, r5, #2
100172ca:	58f3      	ldr	r3, [r6, r3]
100172cc:	4798      	blx	r3
100172ce:	3501      	adds	r5, #1
100172d0:	e7f8      	b.n	100172c4 <__libc_init_array+0x2c>
100172d2:	bd70      	pop	{r4, r5, r6, pc}
100172d4:	10019a3c 	.word	0x10019a3c
100172d8:	10019a3c 	.word	0x10019a3c
100172dc:	10019a3c 	.word	0x10019a3c
100172e0:	10019a40 	.word	0x10019a40

100172e4 <malloc>:
100172e4:	b510      	push	{r4, lr}
100172e6:	4b03      	ldr	r3, [pc, #12]	; (100172f4 <malloc+0x10>)
100172e8:	0001      	movs	r1, r0
100172ea:	6818      	ldr	r0, [r3, #0]
100172ec:	f000 f86a 	bl	100173c4 <_malloc_r>
100172f0:	bd10      	pop	{r4, pc}
100172f2:	46c0      	nop			; (mov r8, r8)
100172f4:	10019b00 	.word	0x10019b00

100172f8 <memcmp>:
100172f8:	b530      	push	{r4, r5, lr}
100172fa:	2400      	movs	r4, #0
100172fc:	42a2      	cmp	r2, r4
100172fe:	d008      	beq.n	10017312 <memcmp+0x1a>
10017300:	5d03      	ldrb	r3, [r0, r4]
10017302:	1c65      	adds	r5, r4, #1
10017304:	5d0c      	ldrb	r4, [r1, r4]
10017306:	42a3      	cmp	r3, r4
10017308:	d001      	beq.n	1001730e <memcmp+0x16>
1001730a:	1b18      	subs	r0, r3, r4
1001730c:	e002      	b.n	10017314 <memcmp+0x1c>
1001730e:	002c      	movs	r4, r5
10017310:	e7f4      	b.n	100172fc <memcmp+0x4>
10017312:	2000      	movs	r0, #0
10017314:	bd30      	pop	{r4, r5, pc}

10017316 <memcpy>:
10017316:	2300      	movs	r3, #0
10017318:	b510      	push	{r4, lr}
1001731a:	429a      	cmp	r2, r3
1001731c:	d003      	beq.n	10017326 <memcpy+0x10>
1001731e:	5ccc      	ldrb	r4, [r1, r3]
10017320:	54c4      	strb	r4, [r0, r3]
10017322:	3301      	adds	r3, #1
10017324:	e7f9      	b.n	1001731a <memcpy+0x4>
10017326:	bd10      	pop	{r4, pc}

10017328 <memset>:
10017328:	0003      	movs	r3, r0
1001732a:	1882      	adds	r2, r0, r2
1001732c:	4293      	cmp	r3, r2
1001732e:	d002      	beq.n	10017336 <memset+0xe>
10017330:	7019      	strb	r1, [r3, #0]
10017332:	3301      	adds	r3, #1
10017334:	e7fa      	b.n	1001732c <memset+0x4>
10017336:	4770      	bx	lr

10017338 <_free_r>:
10017338:	b530      	push	{r4, r5, lr}
1001733a:	2900      	cmp	r1, #0
1001733c:	d03e      	beq.n	100173bc <_free_r+0x84>
1001733e:	3904      	subs	r1, #4
10017340:	680b      	ldr	r3, [r1, #0]
10017342:	2b00      	cmp	r3, #0
10017344:	da00      	bge.n	10017348 <_free_r+0x10>
10017346:	18c9      	adds	r1, r1, r3
10017348:	4a1d      	ldr	r2, [pc, #116]	; (100173c0 <_free_r+0x88>)
1001734a:	6813      	ldr	r3, [r2, #0]
1001734c:	0014      	movs	r4, r2
1001734e:	2b00      	cmp	r3, #0
10017350:	d102      	bne.n	10017358 <_free_r+0x20>
10017352:	604b      	str	r3, [r1, #4]
10017354:	6011      	str	r1, [r2, #0]
10017356:	e031      	b.n	100173bc <_free_r+0x84>
10017358:	428b      	cmp	r3, r1
1001735a:	d90d      	bls.n	10017378 <_free_r+0x40>
1001735c:	680a      	ldr	r2, [r1, #0]
1001735e:	1888      	adds	r0, r1, r2
10017360:	4283      	cmp	r3, r0
10017362:	d103      	bne.n	1001736c <_free_r+0x34>
10017364:	6818      	ldr	r0, [r3, #0]
10017366:	685b      	ldr	r3, [r3, #4]
10017368:	1882      	adds	r2, r0, r2
1001736a:	600a      	str	r2, [r1, #0]
1001736c:	604b      	str	r3, [r1, #4]
1001736e:	6021      	str	r1, [r4, #0]
10017370:	e024      	b.n	100173bc <_free_r+0x84>
10017372:	428a      	cmp	r2, r1
10017374:	d803      	bhi.n	1001737e <_free_r+0x46>
10017376:	0013      	movs	r3, r2
10017378:	685a      	ldr	r2, [r3, #4]
1001737a:	2a00      	cmp	r2, #0
1001737c:	d1f9      	bne.n	10017372 <_free_r+0x3a>
1001737e:	681d      	ldr	r5, [r3, #0]
10017380:	195c      	adds	r4, r3, r5
10017382:	428c      	cmp	r4, r1
10017384:	d10b      	bne.n	1001739e <_free_r+0x66>
10017386:	6809      	ldr	r1, [r1, #0]
10017388:	1869      	adds	r1, r5, r1
1001738a:	1858      	adds	r0, r3, r1
1001738c:	6019      	str	r1, [r3, #0]
1001738e:	4282      	cmp	r2, r0
10017390:	d114      	bne.n	100173bc <_free_r+0x84>
10017392:	6810      	ldr	r0, [r2, #0]
10017394:	6852      	ldr	r2, [r2, #4]
10017396:	1841      	adds	r1, r0, r1
10017398:	6019      	str	r1, [r3, #0]
1001739a:	605a      	str	r2, [r3, #4]
1001739c:	e00e      	b.n	100173bc <_free_r+0x84>
1001739e:	428c      	cmp	r4, r1
100173a0:	d902      	bls.n	100173a8 <_free_r+0x70>
100173a2:	230c      	movs	r3, #12
100173a4:	6003      	str	r3, [r0, #0]
100173a6:	e009      	b.n	100173bc <_free_r+0x84>
100173a8:	6808      	ldr	r0, [r1, #0]
100173aa:	180c      	adds	r4, r1, r0
100173ac:	42a2      	cmp	r2, r4
100173ae:	d103      	bne.n	100173b8 <_free_r+0x80>
100173b0:	6814      	ldr	r4, [r2, #0]
100173b2:	6852      	ldr	r2, [r2, #4]
100173b4:	1820      	adds	r0, r4, r0
100173b6:	6008      	str	r0, [r1, #0]
100173b8:	604a      	str	r2, [r1, #4]
100173ba:	6059      	str	r1, [r3, #4]
100173bc:	bd30      	pop	{r4, r5, pc}
100173be:	46c0      	nop			; (mov r8, r8)
100173c0:	1001a27c 	.word	0x1001a27c

100173c4 <_malloc_r>:
100173c4:	2303      	movs	r3, #3
100173c6:	b570      	push	{r4, r5, r6, lr}
100173c8:	1ccd      	adds	r5, r1, #3
100173ca:	439d      	bics	r5, r3
100173cc:	3508      	adds	r5, #8
100173ce:	0006      	movs	r6, r0
100173d0:	2d0c      	cmp	r5, #12
100173d2:	d201      	bcs.n	100173d8 <_malloc_r+0x14>
100173d4:	250c      	movs	r5, #12
100173d6:	e005      	b.n	100173e4 <_malloc_r+0x20>
100173d8:	2d00      	cmp	r5, #0
100173da:	da03      	bge.n	100173e4 <_malloc_r+0x20>
100173dc:	230c      	movs	r3, #12
100173de:	2000      	movs	r0, #0
100173e0:	6033      	str	r3, [r6, #0]
100173e2:	e040      	b.n	10017466 <_malloc_r+0xa2>
100173e4:	42a9      	cmp	r1, r5
100173e6:	d8f9      	bhi.n	100173dc <_malloc_r+0x18>
100173e8:	4b1f      	ldr	r3, [pc, #124]	; (10017468 <_malloc_r+0xa4>)
100173ea:	681c      	ldr	r4, [r3, #0]
100173ec:	001a      	movs	r2, r3
100173ee:	0021      	movs	r1, r4
100173f0:	2900      	cmp	r1, #0
100173f2:	d013      	beq.n	1001741c <_malloc_r+0x58>
100173f4:	680b      	ldr	r3, [r1, #0]
100173f6:	1b5b      	subs	r3, r3, r5
100173f8:	d40d      	bmi.n	10017416 <_malloc_r+0x52>
100173fa:	2b0b      	cmp	r3, #11
100173fc:	d902      	bls.n	10017404 <_malloc_r+0x40>
100173fe:	600b      	str	r3, [r1, #0]
10017400:	18cc      	adds	r4, r1, r3
10017402:	e01e      	b.n	10017442 <_malloc_r+0x7e>
10017404:	428c      	cmp	r4, r1
10017406:	d102      	bne.n	1001740e <_malloc_r+0x4a>
10017408:	6863      	ldr	r3, [r4, #4]
1001740a:	6013      	str	r3, [r2, #0]
1001740c:	e01a      	b.n	10017444 <_malloc_r+0x80>
1001740e:	684b      	ldr	r3, [r1, #4]
10017410:	6063      	str	r3, [r4, #4]
10017412:	000c      	movs	r4, r1
10017414:	e016      	b.n	10017444 <_malloc_r+0x80>
10017416:	000c      	movs	r4, r1
10017418:	6849      	ldr	r1, [r1, #4]
1001741a:	e7e9      	b.n	100173f0 <_malloc_r+0x2c>
1001741c:	4c13      	ldr	r4, [pc, #76]	; (1001746c <_malloc_r+0xa8>)
1001741e:	6823      	ldr	r3, [r4, #0]
10017420:	2b00      	cmp	r3, #0
10017422:	d103      	bne.n	1001742c <_malloc_r+0x68>
10017424:	0030      	movs	r0, r6
10017426:	f000 f8f9 	bl	1001761c <_sbrk_r>
1001742a:	6020      	str	r0, [r4, #0]
1001742c:	0029      	movs	r1, r5
1001742e:	0030      	movs	r0, r6
10017430:	f000 f8f4 	bl	1001761c <_sbrk_r>
10017434:	1c43      	adds	r3, r0, #1
10017436:	d0d1      	beq.n	100173dc <_malloc_r+0x18>
10017438:	2303      	movs	r3, #3
1001743a:	1cc4      	adds	r4, r0, #3
1001743c:	439c      	bics	r4, r3
1001743e:	42a0      	cmp	r0, r4
10017440:	d10a      	bne.n	10017458 <_malloc_r+0x94>
10017442:	6025      	str	r5, [r4, #0]
10017444:	0020      	movs	r0, r4
10017446:	2207      	movs	r2, #7
10017448:	300b      	adds	r0, #11
1001744a:	1d23      	adds	r3, r4, #4
1001744c:	4390      	bics	r0, r2
1001744e:	1ac3      	subs	r3, r0, r3
10017450:	d009      	beq.n	10017466 <_malloc_r+0xa2>
10017452:	425a      	negs	r2, r3
10017454:	50e2      	str	r2, [r4, r3]
10017456:	e006      	b.n	10017466 <_malloc_r+0xa2>
10017458:	1a21      	subs	r1, r4, r0
1001745a:	0030      	movs	r0, r6
1001745c:	f000 f8de 	bl	1001761c <_sbrk_r>
10017460:	1c43      	adds	r3, r0, #1
10017462:	d1ee      	bne.n	10017442 <_malloc_r+0x7e>
10017464:	e7ba      	b.n	100173dc <_malloc_r+0x18>
10017466:	bd70      	pop	{r4, r5, r6, pc}
10017468:	1001a27c 	.word	0x1001a27c
1001746c:	1001a278 	.word	0x1001a278

10017470 <iprintf>:
10017470:	b40f      	push	{r0, r1, r2, r3}
10017472:	4b0b      	ldr	r3, [pc, #44]	; (100174a0 <iprintf+0x30>)
10017474:	b513      	push	{r0, r1, r4, lr}
10017476:	681c      	ldr	r4, [r3, #0]
10017478:	2c00      	cmp	r4, #0
1001747a:	d005      	beq.n	10017488 <iprintf+0x18>
1001747c:	69a3      	ldr	r3, [r4, #24]
1001747e:	2b00      	cmp	r3, #0
10017480:	d102      	bne.n	10017488 <iprintf+0x18>
10017482:	0020      	movs	r0, r4
10017484:	f000 fb60 	bl	10017b48 <__sinit>
10017488:	ab05      	add	r3, sp, #20
1001748a:	9a04      	ldr	r2, [sp, #16]
1001748c:	68a1      	ldr	r1, [r4, #8]
1001748e:	0020      	movs	r0, r4
10017490:	9301      	str	r3, [sp, #4]
10017492:	f000 fc79 	bl	10017d88 <_vfiprintf_r>
10017496:	bc16      	pop	{r1, r2, r4}
10017498:	bc08      	pop	{r3}
1001749a:	b004      	add	sp, #16
1001749c:	4718      	bx	r3
1001749e:	46c0      	nop			; (mov r8, r8)
100174a0:	10019b00 	.word	0x10019b00

100174a4 <putchar>:
100174a4:	4b08      	ldr	r3, [pc, #32]	; (100174c8 <putchar+0x24>)
100174a6:	b570      	push	{r4, r5, r6, lr}
100174a8:	681c      	ldr	r4, [r3, #0]
100174aa:	0005      	movs	r5, r0
100174ac:	2c00      	cmp	r4, #0
100174ae:	d005      	beq.n	100174bc <putchar+0x18>
100174b0:	69a3      	ldr	r3, [r4, #24]
100174b2:	2b00      	cmp	r3, #0
100174b4:	d102      	bne.n	100174bc <putchar+0x18>
100174b6:	0020      	movs	r0, r4
100174b8:	f000 fb46 	bl	10017b48 <__sinit>
100174bc:	0029      	movs	r1, r5
100174be:	68a2      	ldr	r2, [r4, #8]
100174c0:	0020      	movs	r0, r4
100174c2:	f000 ff0d 	bl	100182e0 <_putc_r>
100174c6:	bd70      	pop	{r4, r5, r6, pc}
100174c8:	10019b00 	.word	0x10019b00

100174cc <_puts_r>:
100174cc:	b570      	push	{r4, r5, r6, lr}
100174ce:	0005      	movs	r5, r0
100174d0:	000e      	movs	r6, r1
100174d2:	2800      	cmp	r0, #0
100174d4:	d004      	beq.n	100174e0 <_puts_r+0x14>
100174d6:	6983      	ldr	r3, [r0, #24]
100174d8:	2b00      	cmp	r3, #0
100174da:	d101      	bne.n	100174e0 <_puts_r+0x14>
100174dc:	f000 fb34 	bl	10017b48 <__sinit>
100174e0:	69ab      	ldr	r3, [r5, #24]
100174e2:	68ac      	ldr	r4, [r5, #8]
100174e4:	2b00      	cmp	r3, #0
100174e6:	d102      	bne.n	100174ee <_puts_r+0x22>
100174e8:	0028      	movs	r0, r5
100174ea:	f000 fb2d 	bl	10017b48 <__sinit>
100174ee:	4b25      	ldr	r3, [pc, #148]	; (10017584 <_puts_r+0xb8>)
100174f0:	429c      	cmp	r4, r3
100174f2:	d101      	bne.n	100174f8 <_puts_r+0x2c>
100174f4:	686c      	ldr	r4, [r5, #4]
100174f6:	e008      	b.n	1001750a <_puts_r+0x3e>
100174f8:	4b23      	ldr	r3, [pc, #140]	; (10017588 <_puts_r+0xbc>)
100174fa:	429c      	cmp	r4, r3
100174fc:	d101      	bne.n	10017502 <_puts_r+0x36>
100174fe:	68ac      	ldr	r4, [r5, #8]
10017500:	e003      	b.n	1001750a <_puts_r+0x3e>
10017502:	4b22      	ldr	r3, [pc, #136]	; (1001758c <_puts_r+0xc0>)
10017504:	429c      	cmp	r4, r3
10017506:	d100      	bne.n	1001750a <_puts_r+0x3e>
10017508:	68ec      	ldr	r4, [r5, #12]
1001750a:	89a3      	ldrh	r3, [r4, #12]
1001750c:	071b      	lsls	r3, r3, #28
1001750e:	d502      	bpl.n	10017516 <_puts_r+0x4a>
10017510:	6923      	ldr	r3, [r4, #16]
10017512:	2b00      	cmp	r3, #0
10017514:	d111      	bne.n	1001753a <_puts_r+0x6e>
10017516:	0021      	movs	r1, r4
10017518:	0028      	movs	r0, r5
1001751a:	f000 f9ab 	bl	10017874 <__swsetup_r>
1001751e:	2800      	cmp	r0, #0
10017520:	d00b      	beq.n	1001753a <_puts_r+0x6e>
10017522:	2001      	movs	r0, #1
10017524:	4240      	negs	r0, r0
10017526:	e02b      	b.n	10017580 <_puts_r+0xb4>
10017528:	3b01      	subs	r3, #1
1001752a:	3601      	adds	r6, #1
1001752c:	60a3      	str	r3, [r4, #8]
1001752e:	2b00      	cmp	r3, #0
10017530:	db08      	blt.n	10017544 <_puts_r+0x78>
10017532:	6823      	ldr	r3, [r4, #0]
10017534:	1c5a      	adds	r2, r3, #1
10017536:	6022      	str	r2, [r4, #0]
10017538:	7019      	strb	r1, [r3, #0]
1001753a:	7831      	ldrb	r1, [r6, #0]
1001753c:	68a3      	ldr	r3, [r4, #8]
1001753e:	2900      	cmp	r1, #0
10017540:	d1f2      	bne.n	10017528 <_puts_r+0x5c>
10017542:	e00b      	b.n	1001755c <_puts_r+0x90>
10017544:	69a2      	ldr	r2, [r4, #24]
10017546:	4293      	cmp	r3, r2
10017548:	db01      	blt.n	1001754e <_puts_r+0x82>
1001754a:	290a      	cmp	r1, #10
1001754c:	d1f1      	bne.n	10017532 <_puts_r+0x66>
1001754e:	0022      	movs	r2, r4
10017550:	0028      	movs	r0, r5
10017552:	f000 f937 	bl	100177c4 <__swbuf_r>
10017556:	1c43      	adds	r3, r0, #1
10017558:	d1ef      	bne.n	1001753a <_puts_r+0x6e>
1001755a:	e7e2      	b.n	10017522 <_puts_r+0x56>
1001755c:	3b01      	subs	r3, #1
1001755e:	60a3      	str	r3, [r4, #8]
10017560:	2b00      	cmp	r3, #0
10017562:	da08      	bge.n	10017576 <_puts_r+0xaa>
10017564:	0022      	movs	r2, r4
10017566:	310a      	adds	r1, #10
10017568:	0028      	movs	r0, r5
1001756a:	f000 f92b 	bl	100177c4 <__swbuf_r>
1001756e:	1c43      	adds	r3, r0, #1
10017570:	d0d7      	beq.n	10017522 <_puts_r+0x56>
10017572:	200a      	movs	r0, #10
10017574:	e004      	b.n	10017580 <_puts_r+0xb4>
10017576:	200a      	movs	r0, #10
10017578:	6823      	ldr	r3, [r4, #0]
1001757a:	1c5a      	adds	r2, r3, #1
1001757c:	6022      	str	r2, [r4, #0]
1001757e:	7018      	strb	r0, [r3, #0]
10017580:	bd70      	pop	{r4, r5, r6, pc}
10017582:	46c0      	nop			; (mov r8, r8)
10017584:	1001999c 	.word	0x1001999c
10017588:	100199bc 	.word	0x100199bc
1001758c:	100199dc 	.word	0x100199dc

10017590 <puts>:
10017590:	b510      	push	{r4, lr}
10017592:	4b03      	ldr	r3, [pc, #12]	; (100175a0 <puts+0x10>)
10017594:	0001      	movs	r1, r0
10017596:	6818      	ldr	r0, [r3, #0]
10017598:	f7ff ff98 	bl	100174cc <_puts_r>
1001759c:	bd10      	pop	{r4, pc}
1001759e:	46c0      	nop			; (mov r8, r8)
100175a0:	10019b00 	.word	0x10019b00

100175a4 <rand>:
100175a4:	4b15      	ldr	r3, [pc, #84]	; (100175fc <rand+0x58>)
100175a6:	b510      	push	{r4, lr}
100175a8:	681c      	ldr	r4, [r3, #0]
100175aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100175ac:	2b00      	cmp	r3, #0
100175ae:	d115      	bne.n	100175dc <rand+0x38>
100175b0:	2018      	movs	r0, #24
100175b2:	f7ff fe97 	bl	100172e4 <malloc>
100175b6:	4b12      	ldr	r3, [pc, #72]	; (10017600 <rand+0x5c>)
100175b8:	63a0      	str	r0, [r4, #56]	; 0x38
100175ba:	8003      	strh	r3, [r0, #0]
100175bc:	4b11      	ldr	r3, [pc, #68]	; (10017604 <rand+0x60>)
100175be:	2201      	movs	r2, #1
100175c0:	8043      	strh	r3, [r0, #2]
100175c2:	4b11      	ldr	r3, [pc, #68]	; (10017608 <rand+0x64>)
100175c4:	8083      	strh	r3, [r0, #4]
100175c6:	4b11      	ldr	r3, [pc, #68]	; (1001760c <rand+0x68>)
100175c8:	80c3      	strh	r3, [r0, #6]
100175ca:	4b11      	ldr	r3, [pc, #68]	; (10017610 <rand+0x6c>)
100175cc:	8103      	strh	r3, [r0, #8]
100175ce:	2305      	movs	r3, #5
100175d0:	8143      	strh	r3, [r0, #10]
100175d2:	3306      	adds	r3, #6
100175d4:	8183      	strh	r3, [r0, #12]
100175d6:	2300      	movs	r3, #0
100175d8:	6102      	str	r2, [r0, #16]
100175da:	6143      	str	r3, [r0, #20]
100175dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100175de:	4a0d      	ldr	r2, [pc, #52]	; (10017614 <rand+0x70>)
100175e0:	6920      	ldr	r0, [r4, #16]
100175e2:	6961      	ldr	r1, [r4, #20]
100175e4:	4b0c      	ldr	r3, [pc, #48]	; (10017618 <rand+0x74>)
100175e6:	f7fe f9c9 	bl	1001597c <__aeabi_lmul>
100175ea:	2201      	movs	r2, #1
100175ec:	2300      	movs	r3, #0
100175ee:	1880      	adds	r0, r0, r2
100175f0:	4159      	adcs	r1, r3
100175f2:	6120      	str	r0, [r4, #16]
100175f4:	6161      	str	r1, [r4, #20]
100175f6:	0048      	lsls	r0, r1, #1
100175f8:	0840      	lsrs	r0, r0, #1
100175fa:	bd10      	pop	{r4, pc}
100175fc:	10019b00 	.word	0x10019b00
10017600:	0000330e 	.word	0x0000330e
10017604:	ffffabcd 	.word	0xffffabcd
10017608:	00001234 	.word	0x00001234
1001760c:	ffffe66d 	.word	0xffffe66d
10017610:	ffffdeec 	.word	0xffffdeec
10017614:	4c957f2d 	.word	0x4c957f2d
10017618:	5851f42d 	.word	0x5851f42d

1001761c <_sbrk_r>:
1001761c:	2300      	movs	r3, #0
1001761e:	b570      	push	{r4, r5, r6, lr}
10017620:	4c06      	ldr	r4, [pc, #24]	; (1001763c <_sbrk_r+0x20>)
10017622:	0005      	movs	r5, r0
10017624:	0008      	movs	r0, r1
10017626:	6023      	str	r3, [r4, #0]
10017628:	f7f7 fd10 	bl	1000f04c <_sbrk>
1001762c:	1c43      	adds	r3, r0, #1
1001762e:	d103      	bne.n	10017638 <_sbrk_r+0x1c>
10017630:	6823      	ldr	r3, [r4, #0]
10017632:	2b00      	cmp	r3, #0
10017634:	d000      	beq.n	10017638 <_sbrk_r+0x1c>
10017636:	602b      	str	r3, [r5, #0]
10017638:	bd70      	pop	{r4, r5, r6, pc}
1001763a:	46c0      	nop			; (mov r8, r8)
1001763c:	1001b8ac 	.word	0x1001b8ac

10017640 <setbuf>:
10017640:	424a      	negs	r2, r1
10017642:	414a      	adcs	r2, r1
10017644:	2380      	movs	r3, #128	; 0x80
10017646:	b510      	push	{r4, lr}
10017648:	0052      	lsls	r2, r2, #1
1001764a:	00db      	lsls	r3, r3, #3
1001764c:	f000 f802 	bl	10017654 <setvbuf>
10017650:	bd10      	pop	{r4, pc}
	...

10017654 <setvbuf>:
10017654:	b5f0      	push	{r4, r5, r6, r7, lr}
10017656:	001d      	movs	r5, r3
10017658:	4b51      	ldr	r3, [pc, #324]	; (100177a0 <setvbuf+0x14c>)
1001765a:	b085      	sub	sp, #20
1001765c:	681e      	ldr	r6, [r3, #0]
1001765e:	0004      	movs	r4, r0
10017660:	000f      	movs	r7, r1
10017662:	9200      	str	r2, [sp, #0]
10017664:	2e00      	cmp	r6, #0
10017666:	d005      	beq.n	10017674 <setvbuf+0x20>
10017668:	69b3      	ldr	r3, [r6, #24]
1001766a:	2b00      	cmp	r3, #0
1001766c:	d102      	bne.n	10017674 <setvbuf+0x20>
1001766e:	0030      	movs	r0, r6
10017670:	f000 fa6a 	bl	10017b48 <__sinit>
10017674:	4b4b      	ldr	r3, [pc, #300]	; (100177a4 <setvbuf+0x150>)
10017676:	429c      	cmp	r4, r3
10017678:	d101      	bne.n	1001767e <setvbuf+0x2a>
1001767a:	6874      	ldr	r4, [r6, #4]
1001767c:	e008      	b.n	10017690 <setvbuf+0x3c>
1001767e:	4b4a      	ldr	r3, [pc, #296]	; (100177a8 <setvbuf+0x154>)
10017680:	429c      	cmp	r4, r3
10017682:	d101      	bne.n	10017688 <setvbuf+0x34>
10017684:	68b4      	ldr	r4, [r6, #8]
10017686:	e003      	b.n	10017690 <setvbuf+0x3c>
10017688:	4b48      	ldr	r3, [pc, #288]	; (100177ac <setvbuf+0x158>)
1001768a:	429c      	cmp	r4, r3
1001768c:	d100      	bne.n	10017690 <setvbuf+0x3c>
1001768e:	68f4      	ldr	r4, [r6, #12]
10017690:	9b00      	ldr	r3, [sp, #0]
10017692:	2b02      	cmp	r3, #2
10017694:	d005      	beq.n	100176a2 <setvbuf+0x4e>
10017696:	2b01      	cmp	r3, #1
10017698:	d900      	bls.n	1001769c <setvbuf+0x48>
1001769a:	e07c      	b.n	10017796 <setvbuf+0x142>
1001769c:	2d00      	cmp	r5, #0
1001769e:	da00      	bge.n	100176a2 <setvbuf+0x4e>
100176a0:	e079      	b.n	10017796 <setvbuf+0x142>
100176a2:	0021      	movs	r1, r4
100176a4:	0030      	movs	r0, r6
100176a6:	f000 f9e1 	bl	10017a6c <_fflush_r>
100176aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
100176ac:	2900      	cmp	r1, #0
100176ae:	d008      	beq.n	100176c2 <setvbuf+0x6e>
100176b0:	0023      	movs	r3, r4
100176b2:	3344      	adds	r3, #68	; 0x44
100176b4:	4299      	cmp	r1, r3
100176b6:	d002      	beq.n	100176be <setvbuf+0x6a>
100176b8:	0030      	movs	r0, r6
100176ba:	f7ff fe3d 	bl	10017338 <_free_r>
100176be:	2300      	movs	r3, #0
100176c0:	6363      	str	r3, [r4, #52]	; 0x34
100176c2:	2300      	movs	r3, #0
100176c4:	61a3      	str	r3, [r4, #24]
100176c6:	6063      	str	r3, [r4, #4]
100176c8:	89a3      	ldrh	r3, [r4, #12]
100176ca:	061b      	lsls	r3, r3, #24
100176cc:	d503      	bpl.n	100176d6 <setvbuf+0x82>
100176ce:	6921      	ldr	r1, [r4, #16]
100176d0:	0030      	movs	r0, r6
100176d2:	f7ff fe31 	bl	10017338 <_free_r>
100176d6:	89a2      	ldrh	r2, [r4, #12]
100176d8:	4b35      	ldr	r3, [pc, #212]	; (100177b0 <setvbuf+0x15c>)
100176da:	4013      	ands	r3, r2
100176dc:	81a3      	strh	r3, [r4, #12]
100176de:	9b00      	ldr	r3, [sp, #0]
100176e0:	2b02      	cmp	r3, #2
100176e2:	d021      	beq.n	10017728 <setvbuf+0xd4>
100176e4:	ab03      	add	r3, sp, #12
100176e6:	aa02      	add	r2, sp, #8
100176e8:	0021      	movs	r1, r4
100176ea:	0030      	movs	r0, r6
100176ec:	f000 fac0 	bl	10017c70 <__swhatbuf_r>
100176f0:	89a3      	ldrh	r3, [r4, #12]
100176f2:	4318      	orrs	r0, r3
100176f4:	81a0      	strh	r0, [r4, #12]
100176f6:	2d00      	cmp	r5, #0
100176f8:	d101      	bne.n	100176fe <setvbuf+0xaa>
100176fa:	9d02      	ldr	r5, [sp, #8]
100176fc:	e001      	b.n	10017702 <setvbuf+0xae>
100176fe:	2f00      	cmp	r7, #0
10017700:	d125      	bne.n	1001774e <setvbuf+0xfa>
10017702:	0028      	movs	r0, r5
10017704:	f7ff fdee 	bl	100172e4 <malloc>
10017708:	9501      	str	r5, [sp, #4]
1001770a:	1e07      	subs	r7, r0, #0
1001770c:	d11a      	bne.n	10017744 <setvbuf+0xf0>
1001770e:	9b02      	ldr	r3, [sp, #8]
10017710:	9301      	str	r3, [sp, #4]
10017712:	42ab      	cmp	r3, r5
10017714:	d102      	bne.n	1001771c <setvbuf+0xc8>
10017716:	2001      	movs	r0, #1
10017718:	4240      	negs	r0, r0
1001771a:	e006      	b.n	1001772a <setvbuf+0xd6>
1001771c:	9801      	ldr	r0, [sp, #4]
1001771e:	f7ff fde1 	bl	100172e4 <malloc>
10017722:	1e07      	subs	r7, r0, #0
10017724:	d10e      	bne.n	10017744 <setvbuf+0xf0>
10017726:	e7f6      	b.n	10017716 <setvbuf+0xc2>
10017728:	2000      	movs	r0, #0
1001772a:	2202      	movs	r2, #2
1001772c:	89a3      	ldrh	r3, [r4, #12]
1001772e:	4313      	orrs	r3, r2
10017730:	81a3      	strh	r3, [r4, #12]
10017732:	2300      	movs	r3, #0
10017734:	60a3      	str	r3, [r4, #8]
10017736:	0023      	movs	r3, r4
10017738:	3347      	adds	r3, #71	; 0x47
1001773a:	6023      	str	r3, [r4, #0]
1001773c:	6123      	str	r3, [r4, #16]
1001773e:	2301      	movs	r3, #1
10017740:	6163      	str	r3, [r4, #20]
10017742:	e02a      	b.n	1001779a <setvbuf+0x146>
10017744:	2280      	movs	r2, #128	; 0x80
10017746:	89a3      	ldrh	r3, [r4, #12]
10017748:	9d01      	ldr	r5, [sp, #4]
1001774a:	4313      	orrs	r3, r2
1001774c:	81a3      	strh	r3, [r4, #12]
1001774e:	69b3      	ldr	r3, [r6, #24]
10017750:	2b00      	cmp	r3, #0
10017752:	d102      	bne.n	1001775a <setvbuf+0x106>
10017754:	0030      	movs	r0, r6
10017756:	f000 f9f7 	bl	10017b48 <__sinit>
1001775a:	9b00      	ldr	r3, [sp, #0]
1001775c:	2b01      	cmp	r3, #1
1001775e:	d103      	bne.n	10017768 <setvbuf+0x114>
10017760:	89a3      	ldrh	r3, [r4, #12]
10017762:	9a00      	ldr	r2, [sp, #0]
10017764:	431a      	orrs	r2, r3
10017766:	81a2      	strh	r2, [r4, #12]
10017768:	2308      	movs	r3, #8
1001776a:	89a2      	ldrh	r2, [r4, #12]
1001776c:	6027      	str	r7, [r4, #0]
1001776e:	4013      	ands	r3, r2
10017770:	6127      	str	r7, [r4, #16]
10017772:	6165      	str	r5, [r4, #20]
10017774:	1e18      	subs	r0, r3, #0
10017776:	d00c      	beq.n	10017792 <setvbuf+0x13e>
10017778:	2301      	movs	r3, #1
1001777a:	401a      	ands	r2, r3
1001777c:	2300      	movs	r3, #0
1001777e:	1e10      	subs	r0, r2, #0
10017780:	4298      	cmp	r0, r3
10017782:	d004      	beq.n	1001778e <setvbuf+0x13a>
10017784:	426d      	negs	r5, r5
10017786:	60a3      	str	r3, [r4, #8]
10017788:	61a5      	str	r5, [r4, #24]
1001778a:	0018      	movs	r0, r3
1001778c:	e005      	b.n	1001779a <setvbuf+0x146>
1001778e:	60a5      	str	r5, [r4, #8]
10017790:	e003      	b.n	1001779a <setvbuf+0x146>
10017792:	60a3      	str	r3, [r4, #8]
10017794:	e001      	b.n	1001779a <setvbuf+0x146>
10017796:	2001      	movs	r0, #1
10017798:	4240      	negs	r0, r0
1001779a:	b005      	add	sp, #20
1001779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001779e:	46c0      	nop			; (mov r8, r8)
100177a0:	10019b00 	.word	0x10019b00
100177a4:	1001999c 	.word	0x1001999c
100177a8:	100199bc 	.word	0x100199bc
100177ac:	100199dc 	.word	0x100199dc
100177b0:	fffff35c 	.word	0xfffff35c

100177b4 <strlen>:
100177b4:	2300      	movs	r3, #0
100177b6:	5cc2      	ldrb	r2, [r0, r3]
100177b8:	3301      	adds	r3, #1
100177ba:	2a00      	cmp	r2, #0
100177bc:	d1fb      	bne.n	100177b6 <strlen+0x2>
100177be:	1e58      	subs	r0, r3, #1
100177c0:	4770      	bx	lr
	...

100177c4 <__swbuf_r>:
100177c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100177c6:	0005      	movs	r5, r0
100177c8:	000f      	movs	r7, r1
100177ca:	0014      	movs	r4, r2
100177cc:	2800      	cmp	r0, #0
100177ce:	d004      	beq.n	100177da <__swbuf_r+0x16>
100177d0:	6983      	ldr	r3, [r0, #24]
100177d2:	2b00      	cmp	r3, #0
100177d4:	d101      	bne.n	100177da <__swbuf_r+0x16>
100177d6:	f000 f9b7 	bl	10017b48 <__sinit>
100177da:	4b23      	ldr	r3, [pc, #140]	; (10017868 <__swbuf_r+0xa4>)
100177dc:	429c      	cmp	r4, r3
100177de:	d101      	bne.n	100177e4 <__swbuf_r+0x20>
100177e0:	686c      	ldr	r4, [r5, #4]
100177e2:	e008      	b.n	100177f6 <__swbuf_r+0x32>
100177e4:	4b21      	ldr	r3, [pc, #132]	; (1001786c <__swbuf_r+0xa8>)
100177e6:	429c      	cmp	r4, r3
100177e8:	d101      	bne.n	100177ee <__swbuf_r+0x2a>
100177ea:	68ac      	ldr	r4, [r5, #8]
100177ec:	e003      	b.n	100177f6 <__swbuf_r+0x32>
100177ee:	4b20      	ldr	r3, [pc, #128]	; (10017870 <__swbuf_r+0xac>)
100177f0:	429c      	cmp	r4, r3
100177f2:	d100      	bne.n	100177f6 <__swbuf_r+0x32>
100177f4:	68ec      	ldr	r4, [r5, #12]
100177f6:	69a3      	ldr	r3, [r4, #24]
100177f8:	60a3      	str	r3, [r4, #8]
100177fa:	89a3      	ldrh	r3, [r4, #12]
100177fc:	071b      	lsls	r3, r3, #28
100177fe:	d50a      	bpl.n	10017816 <__swbuf_r+0x52>
10017800:	6923      	ldr	r3, [r4, #16]
10017802:	2b00      	cmp	r3, #0
10017804:	d007      	beq.n	10017816 <__swbuf_r+0x52>
10017806:	6823      	ldr	r3, [r4, #0]
10017808:	6922      	ldr	r2, [r4, #16]
1001780a:	b2fe      	uxtb	r6, r7
1001780c:	1a98      	subs	r0, r3, r2
1001780e:	6963      	ldr	r3, [r4, #20]
10017810:	4298      	cmp	r0, r3
10017812:	db0f      	blt.n	10017834 <__swbuf_r+0x70>
10017814:	e008      	b.n	10017828 <__swbuf_r+0x64>
10017816:	0021      	movs	r1, r4
10017818:	0028      	movs	r0, r5
1001781a:	f000 f82b 	bl	10017874 <__swsetup_r>
1001781e:	2800      	cmp	r0, #0
10017820:	d0f1      	beq.n	10017806 <__swbuf_r+0x42>
10017822:	2001      	movs	r0, #1
10017824:	4240      	negs	r0, r0
10017826:	e01d      	b.n	10017864 <__swbuf_r+0xa0>
10017828:	0021      	movs	r1, r4
1001782a:	0028      	movs	r0, r5
1001782c:	f000 f91e 	bl	10017a6c <_fflush_r>
10017830:	2800      	cmp	r0, #0
10017832:	d1f6      	bne.n	10017822 <__swbuf_r+0x5e>
10017834:	68a3      	ldr	r3, [r4, #8]
10017836:	3001      	adds	r0, #1
10017838:	3b01      	subs	r3, #1
1001783a:	60a3      	str	r3, [r4, #8]
1001783c:	6823      	ldr	r3, [r4, #0]
1001783e:	1c5a      	adds	r2, r3, #1
10017840:	6022      	str	r2, [r4, #0]
10017842:	701f      	strb	r7, [r3, #0]
10017844:	6963      	ldr	r3, [r4, #20]
10017846:	4298      	cmp	r0, r3
10017848:	d005      	beq.n	10017856 <__swbuf_r+0x92>
1001784a:	89a3      	ldrh	r3, [r4, #12]
1001784c:	0030      	movs	r0, r6
1001784e:	07db      	lsls	r3, r3, #31
10017850:	d508      	bpl.n	10017864 <__swbuf_r+0xa0>
10017852:	2e0a      	cmp	r6, #10
10017854:	d106      	bne.n	10017864 <__swbuf_r+0xa0>
10017856:	0021      	movs	r1, r4
10017858:	0028      	movs	r0, r5
1001785a:	f000 f907 	bl	10017a6c <_fflush_r>
1001785e:	2800      	cmp	r0, #0
10017860:	d1df      	bne.n	10017822 <__swbuf_r+0x5e>
10017862:	0030      	movs	r0, r6
10017864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017866:	46c0      	nop			; (mov r8, r8)
10017868:	1001999c 	.word	0x1001999c
1001786c:	100199bc 	.word	0x100199bc
10017870:	100199dc 	.word	0x100199dc

10017874 <__swsetup_r>:
10017874:	4b36      	ldr	r3, [pc, #216]	; (10017950 <__swsetup_r+0xdc>)
10017876:	b570      	push	{r4, r5, r6, lr}
10017878:	681d      	ldr	r5, [r3, #0]
1001787a:	0006      	movs	r6, r0
1001787c:	000c      	movs	r4, r1
1001787e:	2d00      	cmp	r5, #0
10017880:	d005      	beq.n	1001788e <__swsetup_r+0x1a>
10017882:	69ab      	ldr	r3, [r5, #24]
10017884:	2b00      	cmp	r3, #0
10017886:	d102      	bne.n	1001788e <__swsetup_r+0x1a>
10017888:	0028      	movs	r0, r5
1001788a:	f000 f95d 	bl	10017b48 <__sinit>
1001788e:	4b31      	ldr	r3, [pc, #196]	; (10017954 <__swsetup_r+0xe0>)
10017890:	429c      	cmp	r4, r3
10017892:	d101      	bne.n	10017898 <__swsetup_r+0x24>
10017894:	686c      	ldr	r4, [r5, #4]
10017896:	e008      	b.n	100178aa <__swsetup_r+0x36>
10017898:	4b2f      	ldr	r3, [pc, #188]	; (10017958 <__swsetup_r+0xe4>)
1001789a:	429c      	cmp	r4, r3
1001789c:	d101      	bne.n	100178a2 <__swsetup_r+0x2e>
1001789e:	68ac      	ldr	r4, [r5, #8]
100178a0:	e003      	b.n	100178aa <__swsetup_r+0x36>
100178a2:	4b2e      	ldr	r3, [pc, #184]	; (1001795c <__swsetup_r+0xe8>)
100178a4:	429c      	cmp	r4, r3
100178a6:	d100      	bne.n	100178aa <__swsetup_r+0x36>
100178a8:	68ec      	ldr	r4, [r5, #12]
100178aa:	220c      	movs	r2, #12
100178ac:	5ea3      	ldrsh	r3, [r4, r2]
100178ae:	b29a      	uxth	r2, r3
100178b0:	0711      	lsls	r1, r2, #28
100178b2:	d423      	bmi.n	100178fc <__swsetup_r+0x88>
100178b4:	06d1      	lsls	r1, r2, #27
100178b6:	d407      	bmi.n	100178c8 <__swsetup_r+0x54>
100178b8:	2209      	movs	r2, #9
100178ba:	2001      	movs	r0, #1
100178bc:	6032      	str	r2, [r6, #0]
100178be:	3237      	adds	r2, #55	; 0x37
100178c0:	4313      	orrs	r3, r2
100178c2:	81a3      	strh	r3, [r4, #12]
100178c4:	4240      	negs	r0, r0
100178c6:	e042      	b.n	1001794e <__swsetup_r+0xda>
100178c8:	0753      	lsls	r3, r2, #29
100178ca:	d513      	bpl.n	100178f4 <__swsetup_r+0x80>
100178cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
100178ce:	2900      	cmp	r1, #0
100178d0:	d008      	beq.n	100178e4 <__swsetup_r+0x70>
100178d2:	0023      	movs	r3, r4
100178d4:	3344      	adds	r3, #68	; 0x44
100178d6:	4299      	cmp	r1, r3
100178d8:	d002      	beq.n	100178e0 <__swsetup_r+0x6c>
100178da:	0030      	movs	r0, r6
100178dc:	f7ff fd2c 	bl	10017338 <_free_r>
100178e0:	2300      	movs	r3, #0
100178e2:	6363      	str	r3, [r4, #52]	; 0x34
100178e4:	2224      	movs	r2, #36	; 0x24
100178e6:	89a3      	ldrh	r3, [r4, #12]
100178e8:	4393      	bics	r3, r2
100178ea:	81a3      	strh	r3, [r4, #12]
100178ec:	2300      	movs	r3, #0
100178ee:	6063      	str	r3, [r4, #4]
100178f0:	6923      	ldr	r3, [r4, #16]
100178f2:	6023      	str	r3, [r4, #0]
100178f4:	2208      	movs	r2, #8
100178f6:	89a3      	ldrh	r3, [r4, #12]
100178f8:	4313      	orrs	r3, r2
100178fa:	81a3      	strh	r3, [r4, #12]
100178fc:	6923      	ldr	r3, [r4, #16]
100178fe:	2b00      	cmp	r3, #0
10017900:	d10b      	bne.n	1001791a <__swsetup_r+0xa6>
10017902:	23a0      	movs	r3, #160	; 0xa0
10017904:	89a2      	ldrh	r2, [r4, #12]
10017906:	009b      	lsls	r3, r3, #2
10017908:	4013      	ands	r3, r2
1001790a:	2280      	movs	r2, #128	; 0x80
1001790c:	0092      	lsls	r2, r2, #2
1001790e:	4293      	cmp	r3, r2
10017910:	d003      	beq.n	1001791a <__swsetup_r+0xa6>
10017912:	0021      	movs	r1, r4
10017914:	0030      	movs	r0, r6
10017916:	f000 f9d1 	bl	10017cbc <__smakebuf_r>
1001791a:	2301      	movs	r3, #1
1001791c:	89a2      	ldrh	r2, [r4, #12]
1001791e:	4013      	ands	r3, r2
10017920:	d005      	beq.n	1001792e <__swsetup_r+0xba>
10017922:	2300      	movs	r3, #0
10017924:	60a3      	str	r3, [r4, #8]
10017926:	6963      	ldr	r3, [r4, #20]
10017928:	425b      	negs	r3, r3
1001792a:	61a3      	str	r3, [r4, #24]
1001792c:	e003      	b.n	10017936 <__swsetup_r+0xc2>
1001792e:	0792      	lsls	r2, r2, #30
10017930:	d400      	bmi.n	10017934 <__swsetup_r+0xc0>
10017932:	6963      	ldr	r3, [r4, #20]
10017934:	60a3      	str	r3, [r4, #8]
10017936:	2000      	movs	r0, #0
10017938:	6923      	ldr	r3, [r4, #16]
1001793a:	4283      	cmp	r3, r0
1001793c:	d107      	bne.n	1001794e <__swsetup_r+0xda>
1001793e:	220c      	movs	r2, #12
10017940:	5ea3      	ldrsh	r3, [r4, r2]
10017942:	061a      	lsls	r2, r3, #24
10017944:	d503      	bpl.n	1001794e <__swsetup_r+0xda>
10017946:	2240      	movs	r2, #64	; 0x40
10017948:	4313      	orrs	r3, r2
1001794a:	81a3      	strh	r3, [r4, #12]
1001794c:	3801      	subs	r0, #1
1001794e:	bd70      	pop	{r4, r5, r6, pc}
10017950:	10019b00 	.word	0x10019b00
10017954:	1001999c 	.word	0x1001999c
10017958:	100199bc 	.word	0x100199bc
1001795c:	100199dc 	.word	0x100199dc

10017960 <__sflush_r>:
10017960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017962:	898a      	ldrh	r2, [r1, #12]
10017964:	0005      	movs	r5, r0
10017966:	000c      	movs	r4, r1
10017968:	0713      	lsls	r3, r2, #28
1001796a:	d45a      	bmi.n	10017a22 <__sflush_r+0xc2>
1001796c:	684b      	ldr	r3, [r1, #4]
1001796e:	2b00      	cmp	r3, #0
10017970:	dc02      	bgt.n	10017978 <__sflush_r+0x18>
10017972:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10017974:	2b00      	cmp	r3, #0
10017976:	dd19      	ble.n	100179ac <__sflush_r+0x4c>
10017978:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001797a:	2f00      	cmp	r7, #0
1001797c:	d016      	beq.n	100179ac <__sflush_r+0x4c>
1001797e:	2300      	movs	r3, #0
10017980:	682e      	ldr	r6, [r5, #0]
10017982:	602b      	str	r3, [r5, #0]
10017984:	2380      	movs	r3, #128	; 0x80
10017986:	015b      	lsls	r3, r3, #5
10017988:	401a      	ands	r2, r3
1001798a:	d001      	beq.n	10017990 <__sflush_r+0x30>
1001798c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001798e:	e014      	b.n	100179ba <__sflush_r+0x5a>
10017990:	2301      	movs	r3, #1
10017992:	6a21      	ldr	r1, [r4, #32]
10017994:	0028      	movs	r0, r5
10017996:	47b8      	blx	r7
10017998:	1c43      	adds	r3, r0, #1
1001799a:	d10e      	bne.n	100179ba <__sflush_r+0x5a>
1001799c:	682b      	ldr	r3, [r5, #0]
1001799e:	2b00      	cmp	r3, #0
100179a0:	d00b      	beq.n	100179ba <__sflush_r+0x5a>
100179a2:	2b1d      	cmp	r3, #29
100179a4:	d001      	beq.n	100179aa <__sflush_r+0x4a>
100179a6:	2b16      	cmp	r3, #22
100179a8:	d102      	bne.n	100179b0 <__sflush_r+0x50>
100179aa:	602e      	str	r6, [r5, #0]
100179ac:	2000      	movs	r0, #0
100179ae:	e05a      	b.n	10017a66 <__sflush_r+0x106>
100179b0:	2240      	movs	r2, #64	; 0x40
100179b2:	89a3      	ldrh	r3, [r4, #12]
100179b4:	4313      	orrs	r3, r2
100179b6:	81a3      	strh	r3, [r4, #12]
100179b8:	e055      	b.n	10017a66 <__sflush_r+0x106>
100179ba:	89a3      	ldrh	r3, [r4, #12]
100179bc:	075b      	lsls	r3, r3, #29
100179be:	d506      	bpl.n	100179ce <__sflush_r+0x6e>
100179c0:	6863      	ldr	r3, [r4, #4]
100179c2:	1ac0      	subs	r0, r0, r3
100179c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100179c6:	2b00      	cmp	r3, #0
100179c8:	d001      	beq.n	100179ce <__sflush_r+0x6e>
100179ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
100179cc:	1ac0      	subs	r0, r0, r3
100179ce:	2300      	movs	r3, #0
100179d0:	0002      	movs	r2, r0
100179d2:	6a21      	ldr	r1, [r4, #32]
100179d4:	0028      	movs	r0, r5
100179d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100179d8:	47b8      	blx	r7
100179da:	89a3      	ldrh	r3, [r4, #12]
100179dc:	1c42      	adds	r2, r0, #1
100179de:	d106      	bne.n	100179ee <__sflush_r+0x8e>
100179e0:	6829      	ldr	r1, [r5, #0]
100179e2:	291d      	cmp	r1, #29
100179e4:	d83a      	bhi.n	10017a5c <__sflush_r+0xfc>
100179e6:	4a20      	ldr	r2, [pc, #128]	; (10017a68 <__sflush_r+0x108>)
100179e8:	40ca      	lsrs	r2, r1
100179ea:	07d2      	lsls	r2, r2, #31
100179ec:	d536      	bpl.n	10017a5c <__sflush_r+0xfc>
100179ee:	2200      	movs	r2, #0
100179f0:	6062      	str	r2, [r4, #4]
100179f2:	6922      	ldr	r2, [r4, #16]
100179f4:	6022      	str	r2, [r4, #0]
100179f6:	04db      	lsls	r3, r3, #19
100179f8:	d505      	bpl.n	10017a06 <__sflush_r+0xa6>
100179fa:	1c43      	adds	r3, r0, #1
100179fc:	d102      	bne.n	10017a04 <__sflush_r+0xa4>
100179fe:	682b      	ldr	r3, [r5, #0]
10017a00:	2b00      	cmp	r3, #0
10017a02:	d100      	bne.n	10017a06 <__sflush_r+0xa6>
10017a04:	6560      	str	r0, [r4, #84]	; 0x54
10017a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
10017a08:	602e      	str	r6, [r5, #0]
10017a0a:	2900      	cmp	r1, #0
10017a0c:	d0ce      	beq.n	100179ac <__sflush_r+0x4c>
10017a0e:	0023      	movs	r3, r4
10017a10:	3344      	adds	r3, #68	; 0x44
10017a12:	4299      	cmp	r1, r3
10017a14:	d002      	beq.n	10017a1c <__sflush_r+0xbc>
10017a16:	0028      	movs	r0, r5
10017a18:	f7ff fc8e 	bl	10017338 <_free_r>
10017a1c:	2000      	movs	r0, #0
10017a1e:	6360      	str	r0, [r4, #52]	; 0x34
10017a20:	e021      	b.n	10017a66 <__sflush_r+0x106>
10017a22:	690f      	ldr	r7, [r1, #16]
10017a24:	2f00      	cmp	r7, #0
10017a26:	d0c1      	beq.n	100179ac <__sflush_r+0x4c>
10017a28:	680b      	ldr	r3, [r1, #0]
10017a2a:	600f      	str	r7, [r1, #0]
10017a2c:	1bdb      	subs	r3, r3, r7
10017a2e:	9301      	str	r3, [sp, #4]
10017a30:	2300      	movs	r3, #0
10017a32:	0792      	lsls	r2, r2, #30
10017a34:	d100      	bne.n	10017a38 <__sflush_r+0xd8>
10017a36:	694b      	ldr	r3, [r1, #20]
10017a38:	60a3      	str	r3, [r4, #8]
10017a3a:	e003      	b.n	10017a44 <__sflush_r+0xe4>
10017a3c:	9b01      	ldr	r3, [sp, #4]
10017a3e:	183f      	adds	r7, r7, r0
10017a40:	1a1b      	subs	r3, r3, r0
10017a42:	9301      	str	r3, [sp, #4]
10017a44:	9b01      	ldr	r3, [sp, #4]
10017a46:	2b00      	cmp	r3, #0
10017a48:	ddb0      	ble.n	100179ac <__sflush_r+0x4c>
10017a4a:	9b01      	ldr	r3, [sp, #4]
10017a4c:	003a      	movs	r2, r7
10017a4e:	6a21      	ldr	r1, [r4, #32]
10017a50:	0028      	movs	r0, r5
10017a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10017a54:	47b0      	blx	r6
10017a56:	2800      	cmp	r0, #0
10017a58:	dcf0      	bgt.n	10017a3c <__sflush_r+0xdc>
10017a5a:	89a3      	ldrh	r3, [r4, #12]
10017a5c:	2240      	movs	r2, #64	; 0x40
10017a5e:	2001      	movs	r0, #1
10017a60:	4313      	orrs	r3, r2
10017a62:	81a3      	strh	r3, [r4, #12]
10017a64:	4240      	negs	r0, r0
10017a66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10017a68:	20400001 	.word	0x20400001

10017a6c <_fflush_r>:
10017a6c:	690b      	ldr	r3, [r1, #16]
10017a6e:	b570      	push	{r4, r5, r6, lr}
10017a70:	0005      	movs	r5, r0
10017a72:	000c      	movs	r4, r1
10017a74:	2b00      	cmp	r3, #0
10017a76:	d101      	bne.n	10017a7c <_fflush_r+0x10>
10017a78:	2000      	movs	r0, #0
10017a7a:	e01c      	b.n	10017ab6 <_fflush_r+0x4a>
10017a7c:	2800      	cmp	r0, #0
10017a7e:	d004      	beq.n	10017a8a <_fflush_r+0x1e>
10017a80:	6983      	ldr	r3, [r0, #24]
10017a82:	2b00      	cmp	r3, #0
10017a84:	d101      	bne.n	10017a8a <_fflush_r+0x1e>
10017a86:	f000 f85f 	bl	10017b48 <__sinit>
10017a8a:	4b0b      	ldr	r3, [pc, #44]	; (10017ab8 <_fflush_r+0x4c>)
10017a8c:	429c      	cmp	r4, r3
10017a8e:	d101      	bne.n	10017a94 <_fflush_r+0x28>
10017a90:	686c      	ldr	r4, [r5, #4]
10017a92:	e008      	b.n	10017aa6 <_fflush_r+0x3a>
10017a94:	4b09      	ldr	r3, [pc, #36]	; (10017abc <_fflush_r+0x50>)
10017a96:	429c      	cmp	r4, r3
10017a98:	d101      	bne.n	10017a9e <_fflush_r+0x32>
10017a9a:	68ac      	ldr	r4, [r5, #8]
10017a9c:	e003      	b.n	10017aa6 <_fflush_r+0x3a>
10017a9e:	4b08      	ldr	r3, [pc, #32]	; (10017ac0 <_fflush_r+0x54>)
10017aa0:	429c      	cmp	r4, r3
10017aa2:	d100      	bne.n	10017aa6 <_fflush_r+0x3a>
10017aa4:	68ec      	ldr	r4, [r5, #12]
10017aa6:	220c      	movs	r2, #12
10017aa8:	5ea3      	ldrsh	r3, [r4, r2]
10017aaa:	2b00      	cmp	r3, #0
10017aac:	d0e4      	beq.n	10017a78 <_fflush_r+0xc>
10017aae:	0021      	movs	r1, r4
10017ab0:	0028      	movs	r0, r5
10017ab2:	f7ff ff55 	bl	10017960 <__sflush_r>
10017ab6:	bd70      	pop	{r4, r5, r6, pc}
10017ab8:	1001999c 	.word	0x1001999c
10017abc:	100199bc 	.word	0x100199bc
10017ac0:	100199dc 	.word	0x100199dc

10017ac4 <_cleanup_r>:
10017ac4:	b510      	push	{r4, lr}
10017ac6:	4902      	ldr	r1, [pc, #8]	; (10017ad0 <_cleanup_r+0xc>)
10017ac8:	f000 f8b0 	bl	10017c2c <_fwalk_reent>
10017acc:	bd10      	pop	{r4, pc}
10017ace:	46c0      	nop			; (mov r8, r8)
10017ad0:	10017a6d 	.word	0x10017a6d

10017ad4 <std.isra.0>:
10017ad4:	2300      	movs	r3, #0
10017ad6:	b510      	push	{r4, lr}
10017ad8:	0004      	movs	r4, r0
10017ada:	6003      	str	r3, [r0, #0]
10017adc:	6043      	str	r3, [r0, #4]
10017ade:	6083      	str	r3, [r0, #8]
10017ae0:	8181      	strh	r1, [r0, #12]
10017ae2:	6643      	str	r3, [r0, #100]	; 0x64
10017ae4:	81c2      	strh	r2, [r0, #14]
10017ae6:	6103      	str	r3, [r0, #16]
10017ae8:	6143      	str	r3, [r0, #20]
10017aea:	6183      	str	r3, [r0, #24]
10017aec:	0019      	movs	r1, r3
10017aee:	2208      	movs	r2, #8
10017af0:	305c      	adds	r0, #92	; 0x5c
10017af2:	f7ff fc19 	bl	10017328 <memset>
10017af6:	4b05      	ldr	r3, [pc, #20]	; (10017b0c <std.isra.0+0x38>)
10017af8:	6224      	str	r4, [r4, #32]
10017afa:	6263      	str	r3, [r4, #36]	; 0x24
10017afc:	4b04      	ldr	r3, [pc, #16]	; (10017b10 <std.isra.0+0x3c>)
10017afe:	62a3      	str	r3, [r4, #40]	; 0x28
10017b00:	4b04      	ldr	r3, [pc, #16]	; (10017b14 <std.isra.0+0x40>)
10017b02:	62e3      	str	r3, [r4, #44]	; 0x2c
10017b04:	4b04      	ldr	r3, [pc, #16]	; (10017b18 <std.isra.0+0x44>)
10017b06:	6323      	str	r3, [r4, #48]	; 0x30
10017b08:	bd10      	pop	{r4, pc}
10017b0a:	46c0      	nop			; (mov r8, r8)
10017b0c:	1001834d 	.word	0x1001834d
10017b10:	10018375 	.word	0x10018375
10017b14:	100183ad 	.word	0x100183ad
10017b18:	100183d9 	.word	0x100183d9

10017b1c <__sfmoreglue>:
10017b1c:	b570      	push	{r4, r5, r6, lr}
10017b1e:	2568      	movs	r5, #104	; 0x68
10017b20:	1e4b      	subs	r3, r1, #1
10017b22:	435d      	muls	r5, r3
10017b24:	000e      	movs	r6, r1
10017b26:	0029      	movs	r1, r5
10017b28:	3174      	adds	r1, #116	; 0x74
10017b2a:	f7ff fc4b 	bl	100173c4 <_malloc_r>
10017b2e:	1e04      	subs	r4, r0, #0
10017b30:	d008      	beq.n	10017b44 <__sfmoreglue+0x28>
10017b32:	2100      	movs	r1, #0
10017b34:	002a      	movs	r2, r5
10017b36:	6001      	str	r1, [r0, #0]
10017b38:	6046      	str	r6, [r0, #4]
10017b3a:	300c      	adds	r0, #12
10017b3c:	60a0      	str	r0, [r4, #8]
10017b3e:	3268      	adds	r2, #104	; 0x68
10017b40:	f7ff fbf2 	bl	10017328 <memset>
10017b44:	0020      	movs	r0, r4
10017b46:	bd70      	pop	{r4, r5, r6, pc}

10017b48 <__sinit>:
10017b48:	6983      	ldr	r3, [r0, #24]
10017b4a:	b513      	push	{r0, r1, r4, lr}
10017b4c:	0004      	movs	r4, r0
10017b4e:	2b00      	cmp	r3, #0
10017b50:	d128      	bne.n	10017ba4 <__sinit+0x5c>
10017b52:	6483      	str	r3, [r0, #72]	; 0x48
10017b54:	64c3      	str	r3, [r0, #76]	; 0x4c
10017b56:	6503      	str	r3, [r0, #80]	; 0x50
10017b58:	4b13      	ldr	r3, [pc, #76]	; (10017ba8 <__sinit+0x60>)
10017b5a:	4a14      	ldr	r2, [pc, #80]	; (10017bac <__sinit+0x64>)
10017b5c:	681b      	ldr	r3, [r3, #0]
10017b5e:	6282      	str	r2, [r0, #40]	; 0x28
10017b60:	9301      	str	r3, [sp, #4]
10017b62:	4298      	cmp	r0, r3
10017b64:	d101      	bne.n	10017b6a <__sinit+0x22>
10017b66:	2301      	movs	r3, #1
10017b68:	6183      	str	r3, [r0, #24]
10017b6a:	0020      	movs	r0, r4
10017b6c:	f000 f820 	bl	10017bb0 <__sfp>
10017b70:	6060      	str	r0, [r4, #4]
10017b72:	0020      	movs	r0, r4
10017b74:	f000 f81c 	bl	10017bb0 <__sfp>
10017b78:	60a0      	str	r0, [r4, #8]
10017b7a:	0020      	movs	r0, r4
10017b7c:	f000 f818 	bl	10017bb0 <__sfp>
10017b80:	2200      	movs	r2, #0
10017b82:	60e0      	str	r0, [r4, #12]
10017b84:	2104      	movs	r1, #4
10017b86:	6860      	ldr	r0, [r4, #4]
10017b88:	f7ff ffa4 	bl	10017ad4 <std.isra.0>
10017b8c:	2201      	movs	r2, #1
10017b8e:	2109      	movs	r1, #9
10017b90:	68a0      	ldr	r0, [r4, #8]
10017b92:	f7ff ff9f 	bl	10017ad4 <std.isra.0>
10017b96:	2202      	movs	r2, #2
10017b98:	2112      	movs	r1, #18
10017b9a:	68e0      	ldr	r0, [r4, #12]
10017b9c:	f7ff ff9a 	bl	10017ad4 <std.isra.0>
10017ba0:	2301      	movs	r3, #1
10017ba2:	61a3      	str	r3, [r4, #24]
10017ba4:	bd13      	pop	{r0, r1, r4, pc}
10017ba6:	46c0      	nop			; (mov r8, r8)
10017ba8:	10019998 	.word	0x10019998
10017bac:	10017ac5 	.word	0x10017ac5

10017bb0 <__sfp>:
10017bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017bb2:	4b1d      	ldr	r3, [pc, #116]	; (10017c28 <__sfp+0x78>)
10017bb4:	0006      	movs	r6, r0
10017bb6:	681d      	ldr	r5, [r3, #0]
10017bb8:	69ab      	ldr	r3, [r5, #24]
10017bba:	2b00      	cmp	r3, #0
10017bbc:	d102      	bne.n	10017bc4 <__sfp+0x14>
10017bbe:	0028      	movs	r0, r5
10017bc0:	f7ff ffc2 	bl	10017b48 <__sinit>
10017bc4:	3548      	adds	r5, #72	; 0x48
10017bc6:	68ac      	ldr	r4, [r5, #8]
10017bc8:	686b      	ldr	r3, [r5, #4]
10017bca:	3b01      	subs	r3, #1
10017bcc:	d405      	bmi.n	10017bda <__sfp+0x2a>
10017bce:	220c      	movs	r2, #12
10017bd0:	5ea7      	ldrsh	r7, [r4, r2]
10017bd2:	2f00      	cmp	r7, #0
10017bd4:	d010      	beq.n	10017bf8 <__sfp+0x48>
10017bd6:	3468      	adds	r4, #104	; 0x68
10017bd8:	e7f7      	b.n	10017bca <__sfp+0x1a>
10017bda:	682b      	ldr	r3, [r5, #0]
10017bdc:	2b00      	cmp	r3, #0
10017bde:	d001      	beq.n	10017be4 <__sfp+0x34>
10017be0:	682d      	ldr	r5, [r5, #0]
10017be2:	e7f0      	b.n	10017bc6 <__sfp+0x16>
10017be4:	2104      	movs	r1, #4
10017be6:	0030      	movs	r0, r6
10017be8:	f7ff ff98 	bl	10017b1c <__sfmoreglue>
10017bec:	6028      	str	r0, [r5, #0]
10017bee:	2800      	cmp	r0, #0
10017bf0:	d1f6      	bne.n	10017be0 <__sfp+0x30>
10017bf2:	230c      	movs	r3, #12
10017bf4:	6033      	str	r3, [r6, #0]
10017bf6:	e016      	b.n	10017c26 <__sfp+0x76>
10017bf8:	2301      	movs	r3, #1
10017bfa:	0020      	movs	r0, r4
10017bfc:	425b      	negs	r3, r3
10017bfe:	81e3      	strh	r3, [r4, #14]
10017c00:	3302      	adds	r3, #2
10017c02:	81a3      	strh	r3, [r4, #12]
10017c04:	6667      	str	r7, [r4, #100]	; 0x64
10017c06:	6027      	str	r7, [r4, #0]
10017c08:	60a7      	str	r7, [r4, #8]
10017c0a:	6067      	str	r7, [r4, #4]
10017c0c:	6127      	str	r7, [r4, #16]
10017c0e:	6167      	str	r7, [r4, #20]
10017c10:	61a7      	str	r7, [r4, #24]
10017c12:	305c      	adds	r0, #92	; 0x5c
10017c14:	2208      	movs	r2, #8
10017c16:	0039      	movs	r1, r7
10017c18:	f7ff fb86 	bl	10017328 <memset>
10017c1c:	0020      	movs	r0, r4
10017c1e:	6367      	str	r7, [r4, #52]	; 0x34
10017c20:	63a7      	str	r7, [r4, #56]	; 0x38
10017c22:	64a7      	str	r7, [r4, #72]	; 0x48
10017c24:	64e7      	str	r7, [r4, #76]	; 0x4c
10017c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017c28:	10019998 	.word	0x10019998

10017c2c <_fwalk_reent>:
10017c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017c2e:	0004      	movs	r4, r0
10017c30:	0007      	movs	r7, r0
10017c32:	2600      	movs	r6, #0
10017c34:	9101      	str	r1, [sp, #4]
10017c36:	3448      	adds	r4, #72	; 0x48
10017c38:	2c00      	cmp	r4, #0
10017c3a:	d016      	beq.n	10017c6a <_fwalk_reent+0x3e>
10017c3c:	6863      	ldr	r3, [r4, #4]
10017c3e:	68a5      	ldr	r5, [r4, #8]
10017c40:	9300      	str	r3, [sp, #0]
10017c42:	9b00      	ldr	r3, [sp, #0]
10017c44:	3b01      	subs	r3, #1
10017c46:	9300      	str	r3, [sp, #0]
10017c48:	d40d      	bmi.n	10017c66 <_fwalk_reent+0x3a>
10017c4a:	89ab      	ldrh	r3, [r5, #12]
10017c4c:	2b01      	cmp	r3, #1
10017c4e:	d908      	bls.n	10017c62 <_fwalk_reent+0x36>
10017c50:	220e      	movs	r2, #14
10017c52:	5eab      	ldrsh	r3, [r5, r2]
10017c54:	3301      	adds	r3, #1
10017c56:	d004      	beq.n	10017c62 <_fwalk_reent+0x36>
10017c58:	0029      	movs	r1, r5
10017c5a:	0038      	movs	r0, r7
10017c5c:	9b01      	ldr	r3, [sp, #4]
10017c5e:	4798      	blx	r3
10017c60:	4306      	orrs	r6, r0
10017c62:	3568      	adds	r5, #104	; 0x68
10017c64:	e7ed      	b.n	10017c42 <_fwalk_reent+0x16>
10017c66:	6824      	ldr	r4, [r4, #0]
10017c68:	e7e6      	b.n	10017c38 <_fwalk_reent+0xc>
10017c6a:	0030      	movs	r0, r6
10017c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10017c70 <__swhatbuf_r>:
10017c70:	b570      	push	{r4, r5, r6, lr}
10017c72:	000e      	movs	r6, r1
10017c74:	001d      	movs	r5, r3
10017c76:	230e      	movs	r3, #14
10017c78:	5ec9      	ldrsh	r1, [r1, r3]
10017c7a:	b090      	sub	sp, #64	; 0x40
10017c7c:	0014      	movs	r4, r2
10017c7e:	2900      	cmp	r1, #0
10017c80:	da06      	bge.n	10017c90 <__swhatbuf_r+0x20>
10017c82:	2300      	movs	r3, #0
10017c84:	602b      	str	r3, [r5, #0]
10017c86:	89b3      	ldrh	r3, [r6, #12]
10017c88:	061b      	lsls	r3, r3, #24
10017c8a:	d50f      	bpl.n	10017cac <__swhatbuf_r+0x3c>
10017c8c:	2340      	movs	r3, #64	; 0x40
10017c8e:	e00f      	b.n	10017cb0 <__swhatbuf_r+0x40>
10017c90:	aa01      	add	r2, sp, #4
10017c92:	f000 fbcd 	bl	10018430 <_fstat_r>
10017c96:	2800      	cmp	r0, #0
10017c98:	dbf3      	blt.n	10017c82 <__swhatbuf_r+0x12>
10017c9a:	23f0      	movs	r3, #240	; 0xf0
10017c9c:	9a02      	ldr	r2, [sp, #8]
10017c9e:	021b      	lsls	r3, r3, #8
10017ca0:	4013      	ands	r3, r2
10017ca2:	4a05      	ldr	r2, [pc, #20]	; (10017cb8 <__swhatbuf_r+0x48>)
10017ca4:	189b      	adds	r3, r3, r2
10017ca6:	425a      	negs	r2, r3
10017ca8:	4153      	adcs	r3, r2
10017caa:	602b      	str	r3, [r5, #0]
10017cac:	2380      	movs	r3, #128	; 0x80
10017cae:	00db      	lsls	r3, r3, #3
10017cb0:	2000      	movs	r0, #0
10017cb2:	6023      	str	r3, [r4, #0]
10017cb4:	b010      	add	sp, #64	; 0x40
10017cb6:	bd70      	pop	{r4, r5, r6, pc}
10017cb8:	ffffe000 	.word	0xffffe000

10017cbc <__smakebuf_r>:
10017cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017cbe:	2602      	movs	r6, #2
10017cc0:	898b      	ldrh	r3, [r1, #12]
10017cc2:	0005      	movs	r5, r0
10017cc4:	000c      	movs	r4, r1
10017cc6:	4233      	tst	r3, r6
10017cc8:	d110      	bne.n	10017cec <__smakebuf_r+0x30>
10017cca:	ab01      	add	r3, sp, #4
10017ccc:	466a      	mov	r2, sp
10017cce:	f7ff ffcf 	bl	10017c70 <__swhatbuf_r>
10017cd2:	9900      	ldr	r1, [sp, #0]
10017cd4:	0007      	movs	r7, r0
10017cd6:	0028      	movs	r0, r5
10017cd8:	f7ff fb74 	bl	100173c4 <_malloc_r>
10017cdc:	2800      	cmp	r0, #0
10017cde:	d10c      	bne.n	10017cfa <__smakebuf_r+0x3e>
10017ce0:	220c      	movs	r2, #12
10017ce2:	5ea3      	ldrsh	r3, [r4, r2]
10017ce4:	059a      	lsls	r2, r3, #22
10017ce6:	d423      	bmi.n	10017d30 <__smakebuf_r+0x74>
10017ce8:	4333      	orrs	r3, r6
10017cea:	81a3      	strh	r3, [r4, #12]
10017cec:	0023      	movs	r3, r4
10017cee:	3347      	adds	r3, #71	; 0x47
10017cf0:	6023      	str	r3, [r4, #0]
10017cf2:	6123      	str	r3, [r4, #16]
10017cf4:	2301      	movs	r3, #1
10017cf6:	6163      	str	r3, [r4, #20]
10017cf8:	e01a      	b.n	10017d30 <__smakebuf_r+0x74>
10017cfa:	2280      	movs	r2, #128	; 0x80
10017cfc:	4b0d      	ldr	r3, [pc, #52]	; (10017d34 <__smakebuf_r+0x78>)
10017cfe:	62ab      	str	r3, [r5, #40]	; 0x28
10017d00:	89a3      	ldrh	r3, [r4, #12]
10017d02:	6020      	str	r0, [r4, #0]
10017d04:	4313      	orrs	r3, r2
10017d06:	81a3      	strh	r3, [r4, #12]
10017d08:	9b00      	ldr	r3, [sp, #0]
10017d0a:	6120      	str	r0, [r4, #16]
10017d0c:	6163      	str	r3, [r4, #20]
10017d0e:	9b01      	ldr	r3, [sp, #4]
10017d10:	2b00      	cmp	r3, #0
10017d12:	d00a      	beq.n	10017d2a <__smakebuf_r+0x6e>
10017d14:	230e      	movs	r3, #14
10017d16:	5ee1      	ldrsh	r1, [r4, r3]
10017d18:	0028      	movs	r0, r5
10017d1a:	f000 fb9b 	bl	10018454 <_isatty_r>
10017d1e:	2800      	cmp	r0, #0
10017d20:	d003      	beq.n	10017d2a <__smakebuf_r+0x6e>
10017d22:	2201      	movs	r2, #1
10017d24:	89a3      	ldrh	r3, [r4, #12]
10017d26:	4313      	orrs	r3, r2
10017d28:	81a3      	strh	r3, [r4, #12]
10017d2a:	89a3      	ldrh	r3, [r4, #12]
10017d2c:	431f      	orrs	r7, r3
10017d2e:	81a7      	strh	r7, [r4, #12]
10017d30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10017d32:	46c0      	nop			; (mov r8, r8)
10017d34:	10017ac5 	.word	0x10017ac5

10017d38 <__sfputc_r>:
10017d38:	6893      	ldr	r3, [r2, #8]
10017d3a:	b510      	push	{r4, lr}
10017d3c:	3b01      	subs	r3, #1
10017d3e:	6093      	str	r3, [r2, #8]
10017d40:	2b00      	cmp	r3, #0
10017d42:	da05      	bge.n	10017d50 <__sfputc_r+0x18>
10017d44:	6994      	ldr	r4, [r2, #24]
10017d46:	42a3      	cmp	r3, r4
10017d48:	db08      	blt.n	10017d5c <__sfputc_r+0x24>
10017d4a:	b2cb      	uxtb	r3, r1
10017d4c:	2b0a      	cmp	r3, #10
10017d4e:	d005      	beq.n	10017d5c <__sfputc_r+0x24>
10017d50:	6813      	ldr	r3, [r2, #0]
10017d52:	1c58      	adds	r0, r3, #1
10017d54:	6010      	str	r0, [r2, #0]
10017d56:	7019      	strb	r1, [r3, #0]
10017d58:	b2c8      	uxtb	r0, r1
10017d5a:	e001      	b.n	10017d60 <__sfputc_r+0x28>
10017d5c:	f7ff fd32 	bl	100177c4 <__swbuf_r>
10017d60:	bd10      	pop	{r4, pc}

10017d62 <__sfputs_r>:
10017d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017d64:	0006      	movs	r6, r0
10017d66:	000f      	movs	r7, r1
10017d68:	0014      	movs	r4, r2
10017d6a:	18d5      	adds	r5, r2, r3
10017d6c:	42ac      	cmp	r4, r5
10017d6e:	d008      	beq.n	10017d82 <__sfputs_r+0x20>
10017d70:	7821      	ldrb	r1, [r4, #0]
10017d72:	003a      	movs	r2, r7
10017d74:	0030      	movs	r0, r6
10017d76:	f7ff ffdf 	bl	10017d38 <__sfputc_r>
10017d7a:	3401      	adds	r4, #1
10017d7c:	1c43      	adds	r3, r0, #1
10017d7e:	d1f5      	bne.n	10017d6c <__sfputs_r+0xa>
10017d80:	e000      	b.n	10017d84 <__sfputs_r+0x22>
10017d82:	2000      	movs	r0, #0
10017d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10017d88 <_vfiprintf_r>:
10017d88:	b5f0      	push	{r4, r5, r6, r7, lr}
10017d8a:	b09f      	sub	sp, #124	; 0x7c
10017d8c:	0006      	movs	r6, r0
10017d8e:	000f      	movs	r7, r1
10017d90:	9202      	str	r2, [sp, #8]
10017d92:	9305      	str	r3, [sp, #20]
10017d94:	2800      	cmp	r0, #0
10017d96:	d004      	beq.n	10017da2 <_vfiprintf_r+0x1a>
10017d98:	6983      	ldr	r3, [r0, #24]
10017d9a:	2b00      	cmp	r3, #0
10017d9c:	d101      	bne.n	10017da2 <_vfiprintf_r+0x1a>
10017d9e:	f7ff fed3 	bl	10017b48 <__sinit>
10017da2:	4b7f      	ldr	r3, [pc, #508]	; (10017fa0 <_vfiprintf_r+0x218>)
10017da4:	429f      	cmp	r7, r3
10017da6:	d101      	bne.n	10017dac <_vfiprintf_r+0x24>
10017da8:	6877      	ldr	r7, [r6, #4]
10017daa:	e008      	b.n	10017dbe <_vfiprintf_r+0x36>
10017dac:	4b7d      	ldr	r3, [pc, #500]	; (10017fa4 <_vfiprintf_r+0x21c>)
10017dae:	429f      	cmp	r7, r3
10017db0:	d101      	bne.n	10017db6 <_vfiprintf_r+0x2e>
10017db2:	68b7      	ldr	r7, [r6, #8]
10017db4:	e003      	b.n	10017dbe <_vfiprintf_r+0x36>
10017db6:	4b7c      	ldr	r3, [pc, #496]	; (10017fa8 <_vfiprintf_r+0x220>)
10017db8:	429f      	cmp	r7, r3
10017dba:	d100      	bne.n	10017dbe <_vfiprintf_r+0x36>
10017dbc:	68f7      	ldr	r7, [r6, #12]
10017dbe:	89bb      	ldrh	r3, [r7, #12]
10017dc0:	071b      	lsls	r3, r3, #28
10017dc2:	d50a      	bpl.n	10017dda <_vfiprintf_r+0x52>
10017dc4:	693b      	ldr	r3, [r7, #16]
10017dc6:	2b00      	cmp	r3, #0
10017dc8:	d007      	beq.n	10017dda <_vfiprintf_r+0x52>
10017dca:	2300      	movs	r3, #0
10017dcc:	ad06      	add	r5, sp, #24
10017dce:	616b      	str	r3, [r5, #20]
10017dd0:	3320      	adds	r3, #32
10017dd2:	766b      	strb	r3, [r5, #25]
10017dd4:	3310      	adds	r3, #16
10017dd6:	76ab      	strb	r3, [r5, #26]
10017dd8:	e03d      	b.n	10017e56 <_vfiprintf_r+0xce>
10017dda:	0039      	movs	r1, r7
10017ddc:	0030      	movs	r0, r6
10017dde:	f7ff fd49 	bl	10017874 <__swsetup_r>
10017de2:	2800      	cmp	r0, #0
10017de4:	d0f1      	beq.n	10017dca <_vfiprintf_r+0x42>
10017de6:	2001      	movs	r0, #1
10017de8:	4240      	negs	r0, r0
10017dea:	e0d6      	b.n	10017f9a <_vfiprintf_r+0x212>
10017dec:	9a05      	ldr	r2, [sp, #20]
10017dee:	1d11      	adds	r1, r2, #4
10017df0:	6812      	ldr	r2, [r2, #0]
10017df2:	9105      	str	r1, [sp, #20]
10017df4:	2a00      	cmp	r2, #0
10017df6:	da00      	bge.n	10017dfa <_vfiprintf_r+0x72>
10017df8:	e07f      	b.n	10017efa <_vfiprintf_r+0x172>
10017dfa:	9209      	str	r2, [sp, #36]	; 0x24
10017dfc:	3401      	adds	r4, #1
10017dfe:	7823      	ldrb	r3, [r4, #0]
10017e00:	2b2e      	cmp	r3, #46	; 0x2e
10017e02:	d100      	bne.n	10017e06 <_vfiprintf_r+0x7e>
10017e04:	e08d      	b.n	10017f22 <_vfiprintf_r+0x19a>
10017e06:	7821      	ldrb	r1, [r4, #0]
10017e08:	2203      	movs	r2, #3
10017e0a:	4868      	ldr	r0, [pc, #416]	; (10017fac <_vfiprintf_r+0x224>)
10017e0c:	f000 fb48 	bl	100184a0 <memchr>
10017e10:	2800      	cmp	r0, #0
10017e12:	d007      	beq.n	10017e24 <_vfiprintf_r+0x9c>
10017e14:	4b65      	ldr	r3, [pc, #404]	; (10017fac <_vfiprintf_r+0x224>)
10017e16:	682a      	ldr	r2, [r5, #0]
10017e18:	1ac0      	subs	r0, r0, r3
10017e1a:	2340      	movs	r3, #64	; 0x40
10017e1c:	4083      	lsls	r3, r0
10017e1e:	4313      	orrs	r3, r2
10017e20:	602b      	str	r3, [r5, #0]
10017e22:	3401      	adds	r4, #1
10017e24:	7821      	ldrb	r1, [r4, #0]
10017e26:	1c63      	adds	r3, r4, #1
10017e28:	2206      	movs	r2, #6
10017e2a:	4861      	ldr	r0, [pc, #388]	; (10017fb0 <_vfiprintf_r+0x228>)
10017e2c:	9302      	str	r3, [sp, #8]
10017e2e:	7629      	strb	r1, [r5, #24]
10017e30:	f000 fb36 	bl	100184a0 <memchr>
10017e34:	2800      	cmp	r0, #0
10017e36:	d100      	bne.n	10017e3a <_vfiprintf_r+0xb2>
10017e38:	e09d      	b.n	10017f76 <_vfiprintf_r+0x1ee>
10017e3a:	4b5e      	ldr	r3, [pc, #376]	; (10017fb4 <_vfiprintf_r+0x22c>)
10017e3c:	2b00      	cmp	r3, #0
10017e3e:	d000      	beq.n	10017e42 <_vfiprintf_r+0xba>
10017e40:	e090      	b.n	10017f64 <_vfiprintf_r+0x1dc>
10017e42:	2207      	movs	r2, #7
10017e44:	9b05      	ldr	r3, [sp, #20]
10017e46:	3307      	adds	r3, #7
10017e48:	4393      	bics	r3, r2
10017e4a:	3308      	adds	r3, #8
10017e4c:	9305      	str	r3, [sp, #20]
10017e4e:	696b      	ldr	r3, [r5, #20]
10017e50:	9a03      	ldr	r2, [sp, #12]
10017e52:	189b      	adds	r3, r3, r2
10017e54:	616b      	str	r3, [r5, #20]
10017e56:	9c02      	ldr	r4, [sp, #8]
10017e58:	7823      	ldrb	r3, [r4, #0]
10017e5a:	2b00      	cmp	r3, #0
10017e5c:	d104      	bne.n	10017e68 <_vfiprintf_r+0xe0>
10017e5e:	9b02      	ldr	r3, [sp, #8]
10017e60:	1ae3      	subs	r3, r4, r3
10017e62:	9304      	str	r3, [sp, #16]
10017e64:	d012      	beq.n	10017e8c <_vfiprintf_r+0x104>
10017e66:	e003      	b.n	10017e70 <_vfiprintf_r+0xe8>
10017e68:	2b25      	cmp	r3, #37	; 0x25
10017e6a:	d0f8      	beq.n	10017e5e <_vfiprintf_r+0xd6>
10017e6c:	3401      	adds	r4, #1
10017e6e:	e7f3      	b.n	10017e58 <_vfiprintf_r+0xd0>
10017e70:	9b04      	ldr	r3, [sp, #16]
10017e72:	9a02      	ldr	r2, [sp, #8]
10017e74:	0039      	movs	r1, r7
10017e76:	0030      	movs	r0, r6
10017e78:	f7ff ff73 	bl	10017d62 <__sfputs_r>
10017e7c:	1c43      	adds	r3, r0, #1
10017e7e:	d100      	bne.n	10017e82 <_vfiprintf_r+0xfa>
10017e80:	e086      	b.n	10017f90 <_vfiprintf_r+0x208>
10017e82:	696a      	ldr	r2, [r5, #20]
10017e84:	9b04      	ldr	r3, [sp, #16]
10017e86:	4694      	mov	ip, r2
10017e88:	4463      	add	r3, ip
10017e8a:	616b      	str	r3, [r5, #20]
10017e8c:	7823      	ldrb	r3, [r4, #0]
10017e8e:	2b00      	cmp	r3, #0
10017e90:	d07e      	beq.n	10017f90 <_vfiprintf_r+0x208>
10017e92:	2201      	movs	r2, #1
10017e94:	2300      	movs	r3, #0
10017e96:	4252      	negs	r2, r2
10017e98:	606a      	str	r2, [r5, #4]
10017e9a:	a902      	add	r1, sp, #8
10017e9c:	3254      	adds	r2, #84	; 0x54
10017e9e:	1852      	adds	r2, r2, r1
10017ea0:	3401      	adds	r4, #1
10017ea2:	602b      	str	r3, [r5, #0]
10017ea4:	60eb      	str	r3, [r5, #12]
10017ea6:	60ab      	str	r3, [r5, #8]
10017ea8:	7013      	strb	r3, [r2, #0]
10017eaa:	65ab      	str	r3, [r5, #88]	; 0x58
10017eac:	7821      	ldrb	r1, [r4, #0]
10017eae:	2205      	movs	r2, #5
10017eb0:	4841      	ldr	r0, [pc, #260]	; (10017fb8 <_vfiprintf_r+0x230>)
10017eb2:	f000 faf5 	bl	100184a0 <memchr>
10017eb6:	2800      	cmp	r0, #0
10017eb8:	d008      	beq.n	10017ecc <_vfiprintf_r+0x144>
10017eba:	4b3f      	ldr	r3, [pc, #252]	; (10017fb8 <_vfiprintf_r+0x230>)
10017ebc:	682a      	ldr	r2, [r5, #0]
10017ebe:	1ac0      	subs	r0, r0, r3
10017ec0:	2301      	movs	r3, #1
10017ec2:	4083      	lsls	r3, r0
10017ec4:	4313      	orrs	r3, r2
10017ec6:	602b      	str	r3, [r5, #0]
10017ec8:	3401      	adds	r4, #1
10017eca:	e7ef      	b.n	10017eac <_vfiprintf_r+0x124>
10017ecc:	682b      	ldr	r3, [r5, #0]
10017ece:	06da      	lsls	r2, r3, #27
10017ed0:	d504      	bpl.n	10017edc <_vfiprintf_r+0x154>
10017ed2:	2253      	movs	r2, #83	; 0x53
10017ed4:	2120      	movs	r1, #32
10017ed6:	a802      	add	r0, sp, #8
10017ed8:	1812      	adds	r2, r2, r0
10017eda:	7011      	strb	r1, [r2, #0]
10017edc:	071a      	lsls	r2, r3, #28
10017ede:	d504      	bpl.n	10017eea <_vfiprintf_r+0x162>
10017ee0:	2253      	movs	r2, #83	; 0x53
10017ee2:	212b      	movs	r1, #43	; 0x2b
10017ee4:	a802      	add	r0, sp, #8
10017ee6:	1812      	adds	r2, r2, r0
10017ee8:	7011      	strb	r1, [r2, #0]
10017eea:	7822      	ldrb	r2, [r4, #0]
10017eec:	2a2a      	cmp	r2, #42	; 0x2a
10017eee:	d100      	bne.n	10017ef2 <_vfiprintf_r+0x16a>
10017ef0:	e77c      	b.n	10017dec <_vfiprintf_r+0x64>
10017ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10017ef4:	2000      	movs	r0, #0
10017ef6:	210a      	movs	r1, #10
10017ef8:	e005      	b.n	10017f06 <_vfiprintf_r+0x17e>
10017efa:	4252      	negs	r2, r2
10017efc:	60ea      	str	r2, [r5, #12]
10017efe:	2202      	movs	r2, #2
10017f00:	4313      	orrs	r3, r2
10017f02:	602b      	str	r3, [r5, #0]
10017f04:	e77a      	b.n	10017dfc <_vfiprintf_r+0x74>
10017f06:	7822      	ldrb	r2, [r4, #0]
10017f08:	3a30      	subs	r2, #48	; 0x30
10017f0a:	2a09      	cmp	r2, #9
10017f0c:	d804      	bhi.n	10017f18 <_vfiprintf_r+0x190>
10017f0e:	434b      	muls	r3, r1
10017f10:	3401      	adds	r4, #1
10017f12:	189b      	adds	r3, r3, r2
10017f14:	2001      	movs	r0, #1
10017f16:	e7f6      	b.n	10017f06 <_vfiprintf_r+0x17e>
10017f18:	2800      	cmp	r0, #0
10017f1a:	d100      	bne.n	10017f1e <_vfiprintf_r+0x196>
10017f1c:	e76f      	b.n	10017dfe <_vfiprintf_r+0x76>
10017f1e:	9309      	str	r3, [sp, #36]	; 0x24
10017f20:	e76d      	b.n	10017dfe <_vfiprintf_r+0x76>
10017f22:	7863      	ldrb	r3, [r4, #1]
10017f24:	2b2a      	cmp	r3, #42	; 0x2a
10017f26:	d10a      	bne.n	10017f3e <_vfiprintf_r+0x1b6>
10017f28:	9b05      	ldr	r3, [sp, #20]
10017f2a:	3402      	adds	r4, #2
10017f2c:	1d1a      	adds	r2, r3, #4
10017f2e:	681b      	ldr	r3, [r3, #0]
10017f30:	9205      	str	r2, [sp, #20]
10017f32:	2b00      	cmp	r3, #0
10017f34:	da01      	bge.n	10017f3a <_vfiprintf_r+0x1b2>
10017f36:	2301      	movs	r3, #1
10017f38:	425b      	negs	r3, r3
10017f3a:	9307      	str	r3, [sp, #28]
10017f3c:	e763      	b.n	10017e06 <_vfiprintf_r+0x7e>
10017f3e:	2300      	movs	r3, #0
10017f40:	200a      	movs	r0, #10
10017f42:	001a      	movs	r2, r3
10017f44:	3401      	adds	r4, #1
10017f46:	606b      	str	r3, [r5, #4]
10017f48:	7821      	ldrb	r1, [r4, #0]
10017f4a:	3930      	subs	r1, #48	; 0x30
10017f4c:	2909      	cmp	r1, #9
10017f4e:	d804      	bhi.n	10017f5a <_vfiprintf_r+0x1d2>
10017f50:	4342      	muls	r2, r0
10017f52:	3401      	adds	r4, #1
10017f54:	1852      	adds	r2, r2, r1
10017f56:	2301      	movs	r3, #1
10017f58:	e7f6      	b.n	10017f48 <_vfiprintf_r+0x1c0>
10017f5a:	2b00      	cmp	r3, #0
10017f5c:	d100      	bne.n	10017f60 <_vfiprintf_r+0x1d8>
10017f5e:	e752      	b.n	10017e06 <_vfiprintf_r+0x7e>
10017f60:	9207      	str	r2, [sp, #28]
10017f62:	e750      	b.n	10017e06 <_vfiprintf_r+0x7e>
10017f64:	ab05      	add	r3, sp, #20
10017f66:	9300      	str	r3, [sp, #0]
10017f68:	003a      	movs	r2, r7
10017f6a:	4b14      	ldr	r3, [pc, #80]	; (10017fbc <_vfiprintf_r+0x234>)
10017f6c:	0029      	movs	r1, r5
10017f6e:	0030      	movs	r0, r6
10017f70:	e000      	b.n	10017f74 <_vfiprintf_r+0x1ec>
10017f72:	bf00      	nop
10017f74:	e007      	b.n	10017f86 <_vfiprintf_r+0x1fe>
10017f76:	ab05      	add	r3, sp, #20
10017f78:	9300      	str	r3, [sp, #0]
10017f7a:	003a      	movs	r2, r7
10017f7c:	4b0f      	ldr	r3, [pc, #60]	; (10017fbc <_vfiprintf_r+0x234>)
10017f7e:	0029      	movs	r1, r5
10017f80:	0030      	movs	r0, r6
10017f82:	f000 f88b 	bl	1001809c <_printf_i>
10017f86:	9003      	str	r0, [sp, #12]
10017f88:	9b03      	ldr	r3, [sp, #12]
10017f8a:	3301      	adds	r3, #1
10017f8c:	d000      	beq.n	10017f90 <_vfiprintf_r+0x208>
10017f8e:	e75e      	b.n	10017e4e <_vfiprintf_r+0xc6>
10017f90:	89bb      	ldrh	r3, [r7, #12]
10017f92:	065b      	lsls	r3, r3, #25
10017f94:	d500      	bpl.n	10017f98 <_vfiprintf_r+0x210>
10017f96:	e726      	b.n	10017de6 <_vfiprintf_r+0x5e>
10017f98:	980b      	ldr	r0, [sp, #44]	; 0x2c
10017f9a:	b01f      	add	sp, #124	; 0x7c
10017f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017f9e:	46c0      	nop			; (mov r8, r8)
10017fa0:	1001999c 	.word	0x1001999c
10017fa4:	100199bc 	.word	0x100199bc
10017fa8:	100199dc 	.word	0x100199dc
10017fac:	10019a02 	.word	0x10019a02
10017fb0:	10019a06 	.word	0x10019a06
10017fb4:	00000000 	.word	0x00000000
10017fb8:	100199fc 	.word	0x100199fc
10017fbc:	10017d63 	.word	0x10017d63

10017fc0 <_printf_common>:
10017fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017fc2:	0017      	movs	r7, r2
10017fc4:	9301      	str	r3, [sp, #4]
10017fc6:	688a      	ldr	r2, [r1, #8]
10017fc8:	690b      	ldr	r3, [r1, #16]
10017fca:	9000      	str	r0, [sp, #0]
10017fcc:	000c      	movs	r4, r1
10017fce:	4293      	cmp	r3, r2
10017fd0:	da00      	bge.n	10017fd4 <_printf_common+0x14>
10017fd2:	0013      	movs	r3, r2
10017fd4:	0022      	movs	r2, r4
10017fd6:	603b      	str	r3, [r7, #0]
10017fd8:	3243      	adds	r2, #67	; 0x43
10017fda:	7812      	ldrb	r2, [r2, #0]
10017fdc:	2a00      	cmp	r2, #0
10017fde:	d001      	beq.n	10017fe4 <_printf_common+0x24>
10017fe0:	3301      	adds	r3, #1
10017fe2:	603b      	str	r3, [r7, #0]
10017fe4:	6823      	ldr	r3, [r4, #0]
10017fe6:	069b      	lsls	r3, r3, #26
10017fe8:	d502      	bpl.n	10017ff0 <_printf_common+0x30>
10017fea:	683b      	ldr	r3, [r7, #0]
10017fec:	3302      	adds	r3, #2
10017fee:	603b      	str	r3, [r7, #0]
10017ff0:	2506      	movs	r5, #6
10017ff2:	6823      	ldr	r3, [r4, #0]
10017ff4:	401d      	ands	r5, r3
10017ff6:	d01e      	beq.n	10018036 <_printf_common+0x76>
10017ff8:	0023      	movs	r3, r4
10017ffa:	3343      	adds	r3, #67	; 0x43
10017ffc:	781b      	ldrb	r3, [r3, #0]
10017ffe:	1e5a      	subs	r2, r3, #1
10018000:	4193      	sbcs	r3, r2
10018002:	6822      	ldr	r2, [r4, #0]
10018004:	0692      	lsls	r2, r2, #26
10018006:	d51c      	bpl.n	10018042 <_printf_common+0x82>
10018008:	2030      	movs	r0, #48	; 0x30
1001800a:	18e1      	adds	r1, r4, r3
1001800c:	3143      	adds	r1, #67	; 0x43
1001800e:	7008      	strb	r0, [r1, #0]
10018010:	0021      	movs	r1, r4
10018012:	1c5a      	adds	r2, r3, #1
10018014:	3145      	adds	r1, #69	; 0x45
10018016:	7809      	ldrb	r1, [r1, #0]
10018018:	18a2      	adds	r2, r4, r2
1001801a:	3243      	adds	r2, #67	; 0x43
1001801c:	3302      	adds	r3, #2
1001801e:	7011      	strb	r1, [r2, #0]
10018020:	e00f      	b.n	10018042 <_printf_common+0x82>
10018022:	0022      	movs	r2, r4
10018024:	2301      	movs	r3, #1
10018026:	3219      	adds	r2, #25
10018028:	9901      	ldr	r1, [sp, #4]
1001802a:	9800      	ldr	r0, [sp, #0]
1001802c:	9e08      	ldr	r6, [sp, #32]
1001802e:	47b0      	blx	r6
10018030:	1c43      	adds	r3, r0, #1
10018032:	d00e      	beq.n	10018052 <_printf_common+0x92>
10018034:	3501      	adds	r5, #1
10018036:	68e3      	ldr	r3, [r4, #12]
10018038:	683a      	ldr	r2, [r7, #0]
1001803a:	1a9b      	subs	r3, r3, r2
1001803c:	429d      	cmp	r5, r3
1001803e:	dbf0      	blt.n	10018022 <_printf_common+0x62>
10018040:	e7da      	b.n	10017ff8 <_printf_common+0x38>
10018042:	0022      	movs	r2, r4
10018044:	9901      	ldr	r1, [sp, #4]
10018046:	3243      	adds	r2, #67	; 0x43
10018048:	9800      	ldr	r0, [sp, #0]
1001804a:	9d08      	ldr	r5, [sp, #32]
1001804c:	47a8      	blx	r5
1001804e:	1c43      	adds	r3, r0, #1
10018050:	d102      	bne.n	10018058 <_printf_common+0x98>
10018052:	2001      	movs	r0, #1
10018054:	4240      	negs	r0, r0
10018056:	e020      	b.n	1001809a <_printf_common+0xda>
10018058:	2306      	movs	r3, #6
1001805a:	6820      	ldr	r0, [r4, #0]
1001805c:	68e1      	ldr	r1, [r4, #12]
1001805e:	683a      	ldr	r2, [r7, #0]
10018060:	4003      	ands	r3, r0
10018062:	2500      	movs	r5, #0
10018064:	2b04      	cmp	r3, #4
10018066:	d103      	bne.n	10018070 <_printf_common+0xb0>
10018068:	1a8d      	subs	r5, r1, r2
1001806a:	43eb      	mvns	r3, r5
1001806c:	17db      	asrs	r3, r3, #31
1001806e:	401d      	ands	r5, r3
10018070:	68a3      	ldr	r3, [r4, #8]
10018072:	6922      	ldr	r2, [r4, #16]
10018074:	4293      	cmp	r3, r2
10018076:	dd01      	ble.n	1001807c <_printf_common+0xbc>
10018078:	1a9b      	subs	r3, r3, r2
1001807a:	18ed      	adds	r5, r5, r3
1001807c:	2700      	movs	r7, #0
1001807e:	42bd      	cmp	r5, r7
10018080:	d00a      	beq.n	10018098 <_printf_common+0xd8>
10018082:	0022      	movs	r2, r4
10018084:	2301      	movs	r3, #1
10018086:	321a      	adds	r2, #26
10018088:	9901      	ldr	r1, [sp, #4]
1001808a:	9800      	ldr	r0, [sp, #0]
1001808c:	9e08      	ldr	r6, [sp, #32]
1001808e:	47b0      	blx	r6
10018090:	1c43      	adds	r3, r0, #1
10018092:	d0de      	beq.n	10018052 <_printf_common+0x92>
10018094:	3701      	adds	r7, #1
10018096:	e7f2      	b.n	1001807e <_printf_common+0xbe>
10018098:	2000      	movs	r0, #0
1001809a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001809c <_printf_i>:
1001809c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001809e:	b08b      	sub	sp, #44	; 0x2c
100180a0:	9206      	str	r2, [sp, #24]
100180a2:	000a      	movs	r2, r1
100180a4:	3243      	adds	r2, #67	; 0x43
100180a6:	9307      	str	r3, [sp, #28]
100180a8:	9005      	str	r0, [sp, #20]
100180aa:	9204      	str	r2, [sp, #16]
100180ac:	7e0a      	ldrb	r2, [r1, #24]
100180ae:	000c      	movs	r4, r1
100180b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100180b2:	2a6e      	cmp	r2, #110	; 0x6e
100180b4:	d100      	bne.n	100180b8 <_printf_i+0x1c>
100180b6:	e0ab      	b.n	10018210 <_printf_i+0x174>
100180b8:	d811      	bhi.n	100180de <_printf_i+0x42>
100180ba:	2a63      	cmp	r2, #99	; 0x63
100180bc:	d022      	beq.n	10018104 <_printf_i+0x68>
100180be:	d809      	bhi.n	100180d4 <_printf_i+0x38>
100180c0:	2a00      	cmp	r2, #0
100180c2:	d100      	bne.n	100180c6 <_printf_i+0x2a>
100180c4:	e0b5      	b.n	10018232 <_printf_i+0x196>
100180c6:	2a58      	cmp	r2, #88	; 0x58
100180c8:	d000      	beq.n	100180cc <_printf_i+0x30>
100180ca:	e0c5      	b.n	10018258 <_printf_i+0x1bc>
100180cc:	3145      	adds	r1, #69	; 0x45
100180ce:	700a      	strb	r2, [r1, #0]
100180d0:	4a81      	ldr	r2, [pc, #516]	; (100182d8 <_printf_i+0x23c>)
100180d2:	e04f      	b.n	10018174 <_printf_i+0xd8>
100180d4:	2a64      	cmp	r2, #100	; 0x64
100180d6:	d01d      	beq.n	10018114 <_printf_i+0x78>
100180d8:	2a69      	cmp	r2, #105	; 0x69
100180da:	d01b      	beq.n	10018114 <_printf_i+0x78>
100180dc:	e0bc      	b.n	10018258 <_printf_i+0x1bc>
100180de:	2a73      	cmp	r2, #115	; 0x73
100180e0:	d100      	bne.n	100180e4 <_printf_i+0x48>
100180e2:	e0aa      	b.n	1001823a <_printf_i+0x19e>
100180e4:	d809      	bhi.n	100180fa <_printf_i+0x5e>
100180e6:	2a6f      	cmp	r2, #111	; 0x6f
100180e8:	d029      	beq.n	1001813e <_printf_i+0xa2>
100180ea:	2a70      	cmp	r2, #112	; 0x70
100180ec:	d000      	beq.n	100180f0 <_printf_i+0x54>
100180ee:	e0b3      	b.n	10018258 <_printf_i+0x1bc>
100180f0:	2220      	movs	r2, #32
100180f2:	6809      	ldr	r1, [r1, #0]
100180f4:	430a      	orrs	r2, r1
100180f6:	6022      	str	r2, [r4, #0]
100180f8:	e037      	b.n	1001816a <_printf_i+0xce>
100180fa:	2a75      	cmp	r2, #117	; 0x75
100180fc:	d01f      	beq.n	1001813e <_printf_i+0xa2>
100180fe:	2a78      	cmp	r2, #120	; 0x78
10018100:	d033      	beq.n	1001816a <_printf_i+0xce>
10018102:	e0a9      	b.n	10018258 <_printf_i+0x1bc>
10018104:	000e      	movs	r6, r1
10018106:	681a      	ldr	r2, [r3, #0]
10018108:	3642      	adds	r6, #66	; 0x42
1001810a:	1d11      	adds	r1, r2, #4
1001810c:	6019      	str	r1, [r3, #0]
1001810e:	6813      	ldr	r3, [r2, #0]
10018110:	7033      	strb	r3, [r6, #0]
10018112:	e0a4      	b.n	1001825e <_printf_i+0x1c2>
10018114:	6821      	ldr	r1, [r4, #0]
10018116:	681a      	ldr	r2, [r3, #0]
10018118:	0608      	lsls	r0, r1, #24
1001811a:	d406      	bmi.n	1001812a <_printf_i+0x8e>
1001811c:	0649      	lsls	r1, r1, #25
1001811e:	d504      	bpl.n	1001812a <_printf_i+0x8e>
10018120:	1d11      	adds	r1, r2, #4
10018122:	6019      	str	r1, [r3, #0]
10018124:	2300      	movs	r3, #0
10018126:	5ed5      	ldrsh	r5, [r2, r3]
10018128:	e002      	b.n	10018130 <_printf_i+0x94>
1001812a:	1d11      	adds	r1, r2, #4
1001812c:	6019      	str	r1, [r3, #0]
1001812e:	6815      	ldr	r5, [r2, #0]
10018130:	2d00      	cmp	r5, #0
10018132:	da3b      	bge.n	100181ac <_printf_i+0x110>
10018134:	232d      	movs	r3, #45	; 0x2d
10018136:	9a04      	ldr	r2, [sp, #16]
10018138:	426d      	negs	r5, r5
1001813a:	7013      	strb	r3, [r2, #0]
1001813c:	e036      	b.n	100181ac <_printf_i+0x110>
1001813e:	6821      	ldr	r1, [r4, #0]
10018140:	681a      	ldr	r2, [r3, #0]
10018142:	0608      	lsls	r0, r1, #24
10018144:	d406      	bmi.n	10018154 <_printf_i+0xb8>
10018146:	0649      	lsls	r1, r1, #25
10018148:	d504      	bpl.n	10018154 <_printf_i+0xb8>
1001814a:	6815      	ldr	r5, [r2, #0]
1001814c:	1d11      	adds	r1, r2, #4
1001814e:	6019      	str	r1, [r3, #0]
10018150:	b2ad      	uxth	r5, r5
10018152:	e002      	b.n	1001815a <_printf_i+0xbe>
10018154:	1d11      	adds	r1, r2, #4
10018156:	6019      	str	r1, [r3, #0]
10018158:	6815      	ldr	r5, [r2, #0]
1001815a:	4b5f      	ldr	r3, [pc, #380]	; (100182d8 <_printf_i+0x23c>)
1001815c:	7e22      	ldrb	r2, [r4, #24]
1001815e:	9303      	str	r3, [sp, #12]
10018160:	2708      	movs	r7, #8
10018162:	2a6f      	cmp	r2, #111	; 0x6f
10018164:	d01d      	beq.n	100181a2 <_printf_i+0x106>
10018166:	270a      	movs	r7, #10
10018168:	e01b      	b.n	100181a2 <_printf_i+0x106>
1001816a:	0022      	movs	r2, r4
1001816c:	2178      	movs	r1, #120	; 0x78
1001816e:	3245      	adds	r2, #69	; 0x45
10018170:	7011      	strb	r1, [r2, #0]
10018172:	4a5a      	ldr	r2, [pc, #360]	; (100182dc <_printf_i+0x240>)
10018174:	6819      	ldr	r1, [r3, #0]
10018176:	9203      	str	r2, [sp, #12]
10018178:	1d08      	adds	r0, r1, #4
1001817a:	6822      	ldr	r2, [r4, #0]
1001817c:	6018      	str	r0, [r3, #0]
1001817e:	680d      	ldr	r5, [r1, #0]
10018180:	0610      	lsls	r0, r2, #24
10018182:	d402      	bmi.n	1001818a <_printf_i+0xee>
10018184:	0650      	lsls	r0, r2, #25
10018186:	d500      	bpl.n	1001818a <_printf_i+0xee>
10018188:	b2ad      	uxth	r5, r5
1001818a:	07d3      	lsls	r3, r2, #31
1001818c:	d502      	bpl.n	10018194 <_printf_i+0xf8>
1001818e:	2320      	movs	r3, #32
10018190:	431a      	orrs	r2, r3
10018192:	6022      	str	r2, [r4, #0]
10018194:	2710      	movs	r7, #16
10018196:	2d00      	cmp	r5, #0
10018198:	d103      	bne.n	100181a2 <_printf_i+0x106>
1001819a:	2320      	movs	r3, #32
1001819c:	6822      	ldr	r2, [r4, #0]
1001819e:	439a      	bics	r2, r3
100181a0:	6022      	str	r2, [r4, #0]
100181a2:	0023      	movs	r3, r4
100181a4:	2200      	movs	r2, #0
100181a6:	3343      	adds	r3, #67	; 0x43
100181a8:	701a      	strb	r2, [r3, #0]
100181aa:	e002      	b.n	100181b2 <_printf_i+0x116>
100181ac:	270a      	movs	r7, #10
100181ae:	4b4a      	ldr	r3, [pc, #296]	; (100182d8 <_printf_i+0x23c>)
100181b0:	9303      	str	r3, [sp, #12]
100181b2:	6863      	ldr	r3, [r4, #4]
100181b4:	60a3      	str	r3, [r4, #8]
100181b6:	2b00      	cmp	r3, #0
100181b8:	db09      	blt.n	100181ce <_printf_i+0x132>
100181ba:	2204      	movs	r2, #4
100181bc:	6821      	ldr	r1, [r4, #0]
100181be:	4391      	bics	r1, r2
100181c0:	6021      	str	r1, [r4, #0]
100181c2:	2d00      	cmp	r5, #0
100181c4:	d105      	bne.n	100181d2 <_printf_i+0x136>
100181c6:	9e04      	ldr	r6, [sp, #16]
100181c8:	2b00      	cmp	r3, #0
100181ca:	d011      	beq.n	100181f0 <_printf_i+0x154>
100181cc:	e07b      	b.n	100182c6 <_printf_i+0x22a>
100181ce:	2d00      	cmp	r5, #0
100181d0:	d079      	beq.n	100182c6 <_printf_i+0x22a>
100181d2:	9e04      	ldr	r6, [sp, #16]
100181d4:	0028      	movs	r0, r5
100181d6:	0039      	movs	r1, r7
100181d8:	f7fd fa68 	bl	100156ac <__aeabi_uidivmod>
100181dc:	9b03      	ldr	r3, [sp, #12]
100181de:	3e01      	subs	r6, #1
100181e0:	5c5b      	ldrb	r3, [r3, r1]
100181e2:	0028      	movs	r0, r5
100181e4:	7033      	strb	r3, [r6, #0]
100181e6:	0039      	movs	r1, r7
100181e8:	f7fd f9da 	bl	100155a0 <__aeabi_uidiv>
100181ec:	1e05      	subs	r5, r0, #0
100181ee:	d1f1      	bne.n	100181d4 <_printf_i+0x138>
100181f0:	2f08      	cmp	r7, #8
100181f2:	d109      	bne.n	10018208 <_printf_i+0x16c>
100181f4:	6823      	ldr	r3, [r4, #0]
100181f6:	07db      	lsls	r3, r3, #31
100181f8:	d506      	bpl.n	10018208 <_printf_i+0x16c>
100181fa:	6863      	ldr	r3, [r4, #4]
100181fc:	6922      	ldr	r2, [r4, #16]
100181fe:	4293      	cmp	r3, r2
10018200:	dc02      	bgt.n	10018208 <_printf_i+0x16c>
10018202:	2330      	movs	r3, #48	; 0x30
10018204:	3e01      	subs	r6, #1
10018206:	7033      	strb	r3, [r6, #0]
10018208:	9b04      	ldr	r3, [sp, #16]
1001820a:	1b9b      	subs	r3, r3, r6
1001820c:	6123      	str	r3, [r4, #16]
1001820e:	e02b      	b.n	10018268 <_printf_i+0x1cc>
10018210:	6809      	ldr	r1, [r1, #0]
10018212:	681a      	ldr	r2, [r3, #0]
10018214:	0608      	lsls	r0, r1, #24
10018216:	d407      	bmi.n	10018228 <_printf_i+0x18c>
10018218:	0649      	lsls	r1, r1, #25
1001821a:	d505      	bpl.n	10018228 <_printf_i+0x18c>
1001821c:	1d11      	adds	r1, r2, #4
1001821e:	6019      	str	r1, [r3, #0]
10018220:	6813      	ldr	r3, [r2, #0]
10018222:	8aa2      	ldrh	r2, [r4, #20]
10018224:	801a      	strh	r2, [r3, #0]
10018226:	e004      	b.n	10018232 <_printf_i+0x196>
10018228:	1d11      	adds	r1, r2, #4
1001822a:	6019      	str	r1, [r3, #0]
1001822c:	6813      	ldr	r3, [r2, #0]
1001822e:	6962      	ldr	r2, [r4, #20]
10018230:	601a      	str	r2, [r3, #0]
10018232:	2300      	movs	r3, #0
10018234:	9e04      	ldr	r6, [sp, #16]
10018236:	6123      	str	r3, [r4, #16]
10018238:	e016      	b.n	10018268 <_printf_i+0x1cc>
1001823a:	681a      	ldr	r2, [r3, #0]
1001823c:	1d11      	adds	r1, r2, #4
1001823e:	6019      	str	r1, [r3, #0]
10018240:	6816      	ldr	r6, [r2, #0]
10018242:	2100      	movs	r1, #0
10018244:	6862      	ldr	r2, [r4, #4]
10018246:	0030      	movs	r0, r6
10018248:	f000 f92a 	bl	100184a0 <memchr>
1001824c:	2800      	cmp	r0, #0
1001824e:	d001      	beq.n	10018254 <_printf_i+0x1b8>
10018250:	1b80      	subs	r0, r0, r6
10018252:	6060      	str	r0, [r4, #4]
10018254:	6863      	ldr	r3, [r4, #4]
10018256:	e003      	b.n	10018260 <_printf_i+0x1c4>
10018258:	0026      	movs	r6, r4
1001825a:	3642      	adds	r6, #66	; 0x42
1001825c:	7032      	strb	r2, [r6, #0]
1001825e:	2301      	movs	r3, #1
10018260:	6123      	str	r3, [r4, #16]
10018262:	2300      	movs	r3, #0
10018264:	9a04      	ldr	r2, [sp, #16]
10018266:	7013      	strb	r3, [r2, #0]
10018268:	9b07      	ldr	r3, [sp, #28]
1001826a:	aa09      	add	r2, sp, #36	; 0x24
1001826c:	9300      	str	r3, [sp, #0]
1001826e:	0021      	movs	r1, r4
10018270:	9b06      	ldr	r3, [sp, #24]
10018272:	9805      	ldr	r0, [sp, #20]
10018274:	f7ff fea4 	bl	10017fc0 <_printf_common>
10018278:	1c43      	adds	r3, r0, #1
1001827a:	d102      	bne.n	10018282 <_printf_i+0x1e6>
1001827c:	2001      	movs	r0, #1
1001827e:	4240      	negs	r0, r0
10018280:	e027      	b.n	100182d2 <_printf_i+0x236>
10018282:	6923      	ldr	r3, [r4, #16]
10018284:	0032      	movs	r2, r6
10018286:	9906      	ldr	r1, [sp, #24]
10018288:	9805      	ldr	r0, [sp, #20]
1001828a:	9d07      	ldr	r5, [sp, #28]
1001828c:	47a8      	blx	r5
1001828e:	1c43      	adds	r3, r0, #1
10018290:	d0f4      	beq.n	1001827c <_printf_i+0x1e0>
10018292:	6823      	ldr	r3, [r4, #0]
10018294:	2500      	movs	r5, #0
10018296:	079b      	lsls	r3, r3, #30
10018298:	d40f      	bmi.n	100182ba <_printf_i+0x21e>
1001829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001829c:	68e0      	ldr	r0, [r4, #12]
1001829e:	4298      	cmp	r0, r3
100182a0:	da17      	bge.n	100182d2 <_printf_i+0x236>
100182a2:	0018      	movs	r0, r3
100182a4:	e015      	b.n	100182d2 <_printf_i+0x236>
100182a6:	0022      	movs	r2, r4
100182a8:	2301      	movs	r3, #1
100182aa:	3219      	adds	r2, #25
100182ac:	9906      	ldr	r1, [sp, #24]
100182ae:	9805      	ldr	r0, [sp, #20]
100182b0:	9e07      	ldr	r6, [sp, #28]
100182b2:	47b0      	blx	r6
100182b4:	1c43      	adds	r3, r0, #1
100182b6:	d0e1      	beq.n	1001827c <_printf_i+0x1e0>
100182b8:	3501      	adds	r5, #1
100182ba:	68e3      	ldr	r3, [r4, #12]
100182bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
100182be:	1a9b      	subs	r3, r3, r2
100182c0:	429d      	cmp	r5, r3
100182c2:	dbf0      	blt.n	100182a6 <_printf_i+0x20a>
100182c4:	e7e9      	b.n	1001829a <_printf_i+0x1fe>
100182c6:	0026      	movs	r6, r4
100182c8:	9b03      	ldr	r3, [sp, #12]
100182ca:	3642      	adds	r6, #66	; 0x42
100182cc:	781b      	ldrb	r3, [r3, #0]
100182ce:	7033      	strb	r3, [r6, #0]
100182d0:	e78e      	b.n	100181f0 <_printf_i+0x154>
100182d2:	b00b      	add	sp, #44	; 0x2c
100182d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100182d6:	46c0      	nop			; (mov r8, r8)
100182d8:	10019a0d 	.word	0x10019a0d
100182dc:	10019a1e 	.word	0x10019a1e

100182e0 <_putc_r>:
100182e0:	b570      	push	{r4, r5, r6, lr}
100182e2:	0006      	movs	r6, r0
100182e4:	000d      	movs	r5, r1
100182e6:	0014      	movs	r4, r2
100182e8:	2800      	cmp	r0, #0
100182ea:	d004      	beq.n	100182f6 <_putc_r+0x16>
100182ec:	6983      	ldr	r3, [r0, #24]
100182ee:	2b00      	cmp	r3, #0
100182f0:	d101      	bne.n	100182f6 <_putc_r+0x16>
100182f2:	f7ff fc29 	bl	10017b48 <__sinit>
100182f6:	4b12      	ldr	r3, [pc, #72]	; (10018340 <_putc_r+0x60>)
100182f8:	429c      	cmp	r4, r3
100182fa:	d101      	bne.n	10018300 <_putc_r+0x20>
100182fc:	6874      	ldr	r4, [r6, #4]
100182fe:	e008      	b.n	10018312 <_putc_r+0x32>
10018300:	4b10      	ldr	r3, [pc, #64]	; (10018344 <_putc_r+0x64>)
10018302:	429c      	cmp	r4, r3
10018304:	d101      	bne.n	1001830a <_putc_r+0x2a>
10018306:	68b4      	ldr	r4, [r6, #8]
10018308:	e003      	b.n	10018312 <_putc_r+0x32>
1001830a:	4b0f      	ldr	r3, [pc, #60]	; (10018348 <_putc_r+0x68>)
1001830c:	429c      	cmp	r4, r3
1001830e:	d100      	bne.n	10018312 <_putc_r+0x32>
10018310:	68f4      	ldr	r4, [r6, #12]
10018312:	68a3      	ldr	r3, [r4, #8]
10018314:	3b01      	subs	r3, #1
10018316:	60a3      	str	r3, [r4, #8]
10018318:	2b00      	cmp	r3, #0
1001831a:	da05      	bge.n	10018328 <_putc_r+0x48>
1001831c:	69a2      	ldr	r2, [r4, #24]
1001831e:	4293      	cmp	r3, r2
10018320:	db08      	blt.n	10018334 <_putc_r+0x54>
10018322:	b2eb      	uxtb	r3, r5
10018324:	2b0a      	cmp	r3, #10
10018326:	d005      	beq.n	10018334 <_putc_r+0x54>
10018328:	6823      	ldr	r3, [r4, #0]
1001832a:	b2e8      	uxtb	r0, r5
1001832c:	1c5a      	adds	r2, r3, #1
1001832e:	6022      	str	r2, [r4, #0]
10018330:	701d      	strb	r5, [r3, #0]
10018332:	e004      	b.n	1001833e <_putc_r+0x5e>
10018334:	0022      	movs	r2, r4
10018336:	0029      	movs	r1, r5
10018338:	0030      	movs	r0, r6
1001833a:	f7ff fa43 	bl	100177c4 <__swbuf_r>
1001833e:	bd70      	pop	{r4, r5, r6, pc}
10018340:	1001999c 	.word	0x1001999c
10018344:	100199bc 	.word	0x100199bc
10018348:	100199dc 	.word	0x100199dc

1001834c <__sread>:
1001834c:	b570      	push	{r4, r5, r6, lr}
1001834e:	000c      	movs	r4, r1
10018350:	250e      	movs	r5, #14
10018352:	5f49      	ldrsh	r1, [r1, r5]
10018354:	f000 f8b0 	bl	100184b8 <_read_r>
10018358:	2800      	cmp	r0, #0
1001835a:	db03      	blt.n	10018364 <__sread+0x18>
1001835c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001835e:	181b      	adds	r3, r3, r0
10018360:	6563      	str	r3, [r4, #84]	; 0x54
10018362:	e003      	b.n	1001836c <__sread+0x20>
10018364:	89a2      	ldrh	r2, [r4, #12]
10018366:	4b02      	ldr	r3, [pc, #8]	; (10018370 <__sread+0x24>)
10018368:	4013      	ands	r3, r2
1001836a:	81a3      	strh	r3, [r4, #12]
1001836c:	bd70      	pop	{r4, r5, r6, pc}
1001836e:	46c0      	nop			; (mov r8, r8)
10018370:	ffffefff 	.word	0xffffefff

10018374 <__swrite>:
10018374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018376:	001f      	movs	r7, r3
10018378:	898b      	ldrh	r3, [r1, #12]
1001837a:	0005      	movs	r5, r0
1001837c:	000c      	movs	r4, r1
1001837e:	0016      	movs	r6, r2
10018380:	05db      	lsls	r3, r3, #23
10018382:	d505      	bpl.n	10018390 <__swrite+0x1c>
10018384:	230e      	movs	r3, #14
10018386:	5ec9      	ldrsh	r1, [r1, r3]
10018388:	2200      	movs	r2, #0
1001838a:	2302      	movs	r3, #2
1001838c:	f000 f874 	bl	10018478 <_lseek_r>
10018390:	89a2      	ldrh	r2, [r4, #12]
10018392:	4b05      	ldr	r3, [pc, #20]	; (100183a8 <__swrite+0x34>)
10018394:	0028      	movs	r0, r5
10018396:	4013      	ands	r3, r2
10018398:	81a3      	strh	r3, [r4, #12]
1001839a:	0032      	movs	r2, r6
1001839c:	230e      	movs	r3, #14
1001839e:	5ee1      	ldrsh	r1, [r4, r3]
100183a0:	003b      	movs	r3, r7
100183a2:	f000 f81f 	bl	100183e4 <_write_r>
100183a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100183a8:	ffffefff 	.word	0xffffefff

100183ac <__sseek>:
100183ac:	b570      	push	{r4, r5, r6, lr}
100183ae:	000c      	movs	r4, r1
100183b0:	250e      	movs	r5, #14
100183b2:	5f49      	ldrsh	r1, [r1, r5]
100183b4:	f000 f860 	bl	10018478 <_lseek_r>
100183b8:	89a3      	ldrh	r3, [r4, #12]
100183ba:	1c42      	adds	r2, r0, #1
100183bc:	d103      	bne.n	100183c6 <__sseek+0x1a>
100183be:	4a05      	ldr	r2, [pc, #20]	; (100183d4 <__sseek+0x28>)
100183c0:	4013      	ands	r3, r2
100183c2:	81a3      	strh	r3, [r4, #12]
100183c4:	e004      	b.n	100183d0 <__sseek+0x24>
100183c6:	2280      	movs	r2, #128	; 0x80
100183c8:	0152      	lsls	r2, r2, #5
100183ca:	4313      	orrs	r3, r2
100183cc:	81a3      	strh	r3, [r4, #12]
100183ce:	6560      	str	r0, [r4, #84]	; 0x54
100183d0:	bd70      	pop	{r4, r5, r6, pc}
100183d2:	46c0      	nop			; (mov r8, r8)
100183d4:	ffffefff 	.word	0xffffefff

100183d8 <__sclose>:
100183d8:	b510      	push	{r4, lr}
100183da:	230e      	movs	r3, #14
100183dc:	5ec9      	ldrsh	r1, [r1, r3]
100183de:	f000 f815 	bl	1001840c <_close_r>
100183e2:	bd10      	pop	{r4, pc}

100183e4 <_write_r>:
100183e4:	b570      	push	{r4, r5, r6, lr}
100183e6:	0005      	movs	r5, r0
100183e8:	0008      	movs	r0, r1
100183ea:	0011      	movs	r1, r2
100183ec:	2200      	movs	r2, #0
100183ee:	4c06      	ldr	r4, [pc, #24]	; (10018408 <_write_r+0x24>)
100183f0:	6022      	str	r2, [r4, #0]
100183f2:	001a      	movs	r2, r3
100183f4:	f7f6 fdf4 	bl	1000efe0 <_write>
100183f8:	1c43      	adds	r3, r0, #1
100183fa:	d103      	bne.n	10018404 <_write_r+0x20>
100183fc:	6823      	ldr	r3, [r4, #0]
100183fe:	2b00      	cmp	r3, #0
10018400:	d000      	beq.n	10018404 <_write_r+0x20>
10018402:	602b      	str	r3, [r5, #0]
10018404:	bd70      	pop	{r4, r5, r6, pc}
10018406:	46c0      	nop			; (mov r8, r8)
10018408:	1001b8ac 	.word	0x1001b8ac

1001840c <_close_r>:
1001840c:	2300      	movs	r3, #0
1001840e:	b570      	push	{r4, r5, r6, lr}
10018410:	4c06      	ldr	r4, [pc, #24]	; (1001842c <_close_r+0x20>)
10018412:	0005      	movs	r5, r0
10018414:	0008      	movs	r0, r1
10018416:	6023      	str	r3, [r4, #0]
10018418:	f7f6 fe36 	bl	1000f088 <_close>
1001841c:	1c43      	adds	r3, r0, #1
1001841e:	d103      	bne.n	10018428 <_close_r+0x1c>
10018420:	6823      	ldr	r3, [r4, #0]
10018422:	2b00      	cmp	r3, #0
10018424:	d000      	beq.n	10018428 <_close_r+0x1c>
10018426:	602b      	str	r3, [r5, #0]
10018428:	bd70      	pop	{r4, r5, r6, pc}
1001842a:	46c0      	nop			; (mov r8, r8)
1001842c:	1001b8ac 	.word	0x1001b8ac

10018430 <_fstat_r>:
10018430:	2300      	movs	r3, #0
10018432:	b570      	push	{r4, r5, r6, lr}
10018434:	4c06      	ldr	r4, [pc, #24]	; (10018450 <_fstat_r+0x20>)
10018436:	0005      	movs	r5, r0
10018438:	0008      	movs	r0, r1
1001843a:	0011      	movs	r1, r2
1001843c:	6023      	str	r3, [r4, #0]
1001843e:	f7f6 fe2d 	bl	1000f09c <_fstat>
10018442:	1c43      	adds	r3, r0, #1
10018444:	d103      	bne.n	1001844e <_fstat_r+0x1e>
10018446:	6823      	ldr	r3, [r4, #0]
10018448:	2b00      	cmp	r3, #0
1001844a:	d000      	beq.n	1001844e <_fstat_r+0x1e>
1001844c:	602b      	str	r3, [r5, #0]
1001844e:	bd70      	pop	{r4, r5, r6, pc}
10018450:	1001b8ac 	.word	0x1001b8ac

10018454 <_isatty_r>:
10018454:	2300      	movs	r3, #0
10018456:	b570      	push	{r4, r5, r6, lr}
10018458:	4c06      	ldr	r4, [pc, #24]	; (10018474 <_isatty_r+0x20>)
1001845a:	0005      	movs	r5, r0
1001845c:	0008      	movs	r0, r1
1001845e:	6023      	str	r3, [r4, #0]
10018460:	f7f6 fe2a 	bl	1000f0b8 <_isatty>
10018464:	1c43      	adds	r3, r0, #1
10018466:	d103      	bne.n	10018470 <_isatty_r+0x1c>
10018468:	6823      	ldr	r3, [r4, #0]
1001846a:	2b00      	cmp	r3, #0
1001846c:	d000      	beq.n	10018470 <_isatty_r+0x1c>
1001846e:	602b      	str	r3, [r5, #0]
10018470:	bd70      	pop	{r4, r5, r6, pc}
10018472:	46c0      	nop			; (mov r8, r8)
10018474:	1001b8ac 	.word	0x1001b8ac

10018478 <_lseek_r>:
10018478:	b570      	push	{r4, r5, r6, lr}
1001847a:	0005      	movs	r5, r0
1001847c:	0008      	movs	r0, r1
1001847e:	0011      	movs	r1, r2
10018480:	2200      	movs	r2, #0
10018482:	4c06      	ldr	r4, [pc, #24]	; (1001849c <_lseek_r+0x24>)
10018484:	6022      	str	r2, [r4, #0]
10018486:	001a      	movs	r2, r3
10018488:	f7f6 fe20 	bl	1000f0cc <_lseek>
1001848c:	1c43      	adds	r3, r0, #1
1001848e:	d103      	bne.n	10018498 <_lseek_r+0x20>
10018490:	6823      	ldr	r3, [r4, #0]
10018492:	2b00      	cmp	r3, #0
10018494:	d000      	beq.n	10018498 <_lseek_r+0x20>
10018496:	602b      	str	r3, [r5, #0]
10018498:	bd70      	pop	{r4, r5, r6, pc}
1001849a:	46c0      	nop			; (mov r8, r8)
1001849c:	1001b8ac 	.word	0x1001b8ac

100184a0 <memchr>:
100184a0:	b2c9      	uxtb	r1, r1
100184a2:	1882      	adds	r2, r0, r2
100184a4:	4290      	cmp	r0, r2
100184a6:	d004      	beq.n	100184b2 <memchr+0x12>
100184a8:	7803      	ldrb	r3, [r0, #0]
100184aa:	428b      	cmp	r3, r1
100184ac:	d002      	beq.n	100184b4 <memchr+0x14>
100184ae:	3001      	adds	r0, #1
100184b0:	e7f8      	b.n	100184a4 <memchr+0x4>
100184b2:	2000      	movs	r0, #0
100184b4:	4770      	bx	lr
	...

100184b8 <_read_r>:
100184b8:	b570      	push	{r4, r5, r6, lr}
100184ba:	0005      	movs	r5, r0
100184bc:	0008      	movs	r0, r1
100184be:	0011      	movs	r1, r2
100184c0:	2200      	movs	r2, #0
100184c2:	4c06      	ldr	r4, [pc, #24]	; (100184dc <_read_r+0x24>)
100184c4:	6022      	str	r2, [r4, #0]
100184c6:	001a      	movs	r2, r3
100184c8:	f7f6 fd60 	bl	1000ef8c <_read>
100184cc:	1c43      	adds	r3, r0, #1
100184ce:	d103      	bne.n	100184d8 <_read_r+0x20>
100184d0:	6823      	ldr	r3, [r4, #0]
100184d2:	2b00      	cmp	r3, #0
100184d4:	d000      	beq.n	100184d8 <_read_r+0x20>
100184d6:	602b      	str	r3, [r5, #0]
100184d8:	bd70      	pop	{r4, r5, r6, pc}
100184da:	46c0      	nop			; (mov r8, r8)
100184dc:	1001b8ac 	.word	0x1001b8ac
100184e0:	0000000d 	.word	0x0000000d
100184e4:	6332695b 	.word	0x6332695b
100184e8:	6972775f 	.word	0x6972775f
100184ec:	205d6574 	.word	0x205d6574
100184f0:	43324920 	.word	0x43324920
100184f4:	4d495420 	.word	0x4d495420
100184f8:	54554f45 	.word	0x54554f45
100184fc:	00002121 	.word	0x00002121
10018500:	6332695b 	.word	0x6332695b
10018504:	6165725f 	.word	0x6165725f
10018508:	20205d64 	.word	0x20205d64
1001850c:	20433249 	.word	0x20433249
10018510:	454d4954 	.word	0x454d4954
10018514:	2154554f 	.word	0x2154554f
10018518:	00000021 	.word	0x00000021
1001851c:	0d0a6425 	.word	0x0d0a6425
10018520:	00000000 	.word	0x00000000
10018524:	78352325 	.word	0x78352325
10018528:	2325203a 	.word	0x2325203a
1001852c:	0a0d7835 	.word	0x0a0d7835
10018530:	00000000 	.word	0x00000000
10018534:	5f504d44 	.word	0x5f504d44
10018538:	0a214e4f 	.word	0x0a214e4f
1001853c:	0000000d 	.word	0x0000000d
10018540:	534e4553 	.word	0x534e4553
10018544:	2153524f 	.word	0x2153524f
10018548:	00000d0a 	.word	0x00000d0a
1001854c:	64616552 	.word	0x64616552
10018550:	20676e69 	.word	0x20676e69
10018554:	2050544f 	.word	0x2050544f
10018558:	69676552 	.word	0x69676552
1001855c:	72657473 	.word	0x72657473
10018560:	72724520 	.word	0x72724520
10018564:	002e726f 	.word	0x002e726f
10018568:	65636341 	.word	0x65636341
1001856c:	544f206c 	.word	0x544f206c
10018570:	64253a50 	.word	0x64253a50
10018574:	6425202c 	.word	0x6425202c
10018578:	6425202c 	.word	0x6425202c
1001857c:	0000000a 	.word	0x0000000a
10018580:	45434341 	.word	0x45434341
10018584:	52433a4c 	.word	0x52433a4c
10018588:	52455449 	.word	0x52455449
1001858c:	41204149 	.word	0x41204149
10018590:	00000000 	.word	0x00000000
10018594:	73616942 	.word	0x73616942
10018598:	6968535f 	.word	0x6968535f
1001859c:	253d7466 	.word	0x253d7466
100185a0:	66342e37 	.word	0x66342e37
100185a4:	6942202c 	.word	0x6942202c
100185a8:	525f7361 	.word	0x525f7361
100185ac:	253d6765 	.word	0x253d6765
100185b0:	66342e37 	.word	0x66342e37
100185b4:	6942202c 	.word	0x6942202c
100185b8:	485f7361 	.word	0x485f7361
100185bc:	3d545357 	.word	0x3d545357
100185c0:	342e3725 	.word	0x342e3725
100185c4:	000a0d66 	.word	0x000a0d66
100185c8:	2050544f 	.word	0x2050544f
100185cc:	756c6176 	.word	0x756c6176
100185d0:	25203a65 	.word	0x25203a65
100185d4:	66342e37 	.word	0x66342e37
100185d8:	00000a0d 	.word	0x00000a0d
100185dc:	69746172 	.word	0x69746172
100185e0:	37253d6f 	.word	0x37253d6f
100185e4:	2c66342e 	.word	0x2c66342e
100185e8:	72687420 	.word	0x72687420
100185ec:	6f687365 	.word	0x6f687365
100185f0:	253d646c 	.word	0x253d646c
100185f4:	66342e37 	.word	0x66342e37
100185f8:	00000a0d 	.word	0x00000a0d
100185fc:	45434341 	.word	0x45434341
10018600:	6146204c 	.word	0x6146204c
10018604:	41206c69 	.word	0x41206c69
10018608:	20736978 	.word	0x20736978
1001860c:	6425203d 	.word	0x6425203d
10018610:	0000000a 	.word	0x0000000a
10018614:	45434341 	.word	0x45434341
10018618:	52433a4c 	.word	0x52433a4c
1001861c:	52455449 	.word	0x52455449
10018620:	42204149 	.word	0x42204149
10018624:	0000000d 	.word	0x0000000d
10018628:	206e694d 	.word	0x206e694d
1001862c:	203a474d 	.word	0x203a474d
10018630:	342e3725 	.word	0x342e3725
10018634:	000a0d66 	.word	0x000a0d66
10018638:	2078614d 	.word	0x2078614d
1001863c:	203a474d 	.word	0x203a474d
10018640:	342e3725 	.word	0x342e3725
10018644:	000a0d66 	.word	0x000a0d66
10018648:	73616942 	.word	0x73616942
1001864c:	6968735f 	.word	0x6968735f
10018650:	253d7466 	.word	0x253d7466
10018654:	66342e37 	.word	0x66342e37
10018658:	7473202c 	.word	0x7473202c
1001865c:	2e37253d 	.word	0x2e37253d
10018660:	202c6634 	.word	0x202c6634
10018664:	3d676572 	.word	0x3d676572
10018668:	342e3725 	.word	0x342e3725
1001866c:	00000a66 	.word	0x00000a66
10018670:	65636341 	.word	0x65636341
10018674:	4146206c 	.word	0x4146206c
10018678:	61204c49 	.word	0x61204c49
1001867c:	3a736978 	.word	0x3a736978
10018680:	3c206425 	.word	0x3c206425
10018684:	3232203d 	.word	0x3232203d
10018688:	20676d35 	.word	0x20676d35
1001868c:	3e20726f 	.word	0x3e20726f
10018690:	3736203d 	.word	0x3736203d
10018694:	0a676d35 	.word	0x0a676d35
10018698:	00000000 	.word	0x00000000
1001869c:	65636341 	.word	0x65636341
100186a0:	52433a6c 	.word	0x52433a6c
100186a4:	52455449 	.word	0x52455449
100186a8:	43204149 	.word	0x43204149
100186ac:	6962203a 	.word	0x6962203a
100186b0:	6c207361 	.word	0x6c207361
100186b4:	20737365 	.word	0x20737365
100186b8:	6e616874 	.word	0x6e616874
100186bc:	2e372520 	.word	0x2e372520
100186c0:	000a6634 	.word	0x000a6634
100186c4:	4c494146 	.word	0x4c494146
100186c8:	203a4445 	.word	0x203a4445
100186cc:	65636341 	.word	0x65636341
100186d0:	7861206c 	.word	0x7861206c
100186d4:	253a7369 	.word	0x253a7369
100186d8:	203d2064 	.word	0x203d2064
100186dc:	20646c25 	.word	0x20646c25
100186e0:	3035203e 	.word	0x3035203e
100186e4:	0a676d30 	.word	0x0a676d30
100186e8:	00000000 	.word	0x00000000
100186ec:	6f727947 	.word	0x6f727947
100186f0:	50544f20 	.word	0x50544f20
100186f4:	2c64253a 	.word	0x2c64253a
100186f8:	2c642520 	.word	0x2c642520
100186fc:	0d642520 	.word	0x0d642520
10018700:	0000000a 	.word	0x0000000a
10018704:	4f525947 	.word	0x4f525947
10018708:	4952433a 	.word	0x4952433a
1001870c:	49524554 	.word	0x49524554
10018710:	00412041 	.word	0x00412041
10018714:	6f727947 	.word	0x6f727947
10018718:	69614620 	.word	0x69614620
1001871c:	7841206c 	.word	0x7841206c
10018720:	3d207369 	.word	0x3d207369
10018724:	0a642520 	.word	0x0a642520
10018728:	00000000 	.word	0x00000000
1001872c:	4f525947 	.word	0x4f525947
10018730:	4952433a 	.word	0x4952433a
10018734:	49524554 	.word	0x49524554
10018738:	0d422041 	.word	0x0d422041
1001873c:	00000000 	.word	0x00000000
10018740:	2078614d 	.word	0x2078614d
10018744:	3a535044 	.word	0x3a535044
10018748:	2e372520 	.word	0x2e372520
1001874c:	0a0d6634 	.word	0x0a0d6634
10018750:	00000000 	.word	0x00000000
10018754:	4f525947 	.word	0x4f525947
10018758:	49414620 	.word	0x49414620
1001875c:	7861204c 	.word	0x7861204c
10018760:	253a7369 	.word	0x253a7369
10018764:	72672064 	.word	0x72672064
10018768:	65746165 	.word	0x65746165
1001876c:	68742072 	.word	0x68742072
10018770:	36206e61 	.word	0x36206e61
10018774:	73706430 	.word	0x73706430
10018778:	0000000a 	.word	0x0000000a
1001877c:	6f727947 	.word	0x6f727947
10018780:	4952433a 	.word	0x4952433a
10018784:	49524554 	.word	0x49524554
10018788:	3a432041 	.word	0x3a432041
1001878c:	61696220 	.word	0x61696220
10018790:	656c2073 	.word	0x656c2073
10018794:	74207373 	.word	0x74207373
10018798:	206e6168 	.word	0x206e6168
1001879c:	342e3725 	.word	0x342e3725
100187a0:	00000a66 	.word	0x00000a66
100187a4:	4c494146 	.word	0x4c494146
100187a8:	203a4445 	.word	0x203a4445
100187ac:	6f727947 	.word	0x6f727947
100187b0:	69786120 	.word	0x69786120
100187b4:	64253a73 	.word	0x64253a73
100187b8:	25203d20 	.word	0x25203d20
100187bc:	3e20646c 	.word	0x3e20646c
100187c0:	64303220 	.word	0x64303220
100187c4:	000a7370 	.word	0x000a7370
100187c8:	72617453 	.word	0x72617453
100187cc:	676e6974 	.word	0x676e6974
100187d0:	61694220 	.word	0x61694220
100187d4:	6f4c2073 	.word	0x6f4c2073
100187d8:	5220706f 	.word	0x5220706f
100187dc:	73646165 	.word	0x73646165
100187e0:	00000000 	.word	0x00000000
100187e4:	706d6153 	.word	0x706d6153
100187e8:	3a73656c 	.word	0x3a73656c
100187ec:	0a642520 	.word	0x0a642520
100187f0:	00000000 	.word	0x00000000
100187f4:	65636341 	.word	0x65636341
100187f8:	666f206c 	.word	0x666f206c
100187fc:	74657366 	.word	0x74657366
10018800:	74616420 	.word	0x74616420
10018804:	57482061 	.word	0x57482061
10018808:	62205453 	.word	0x62205453
1001880c:	253d7469 	.word	0x253d7469
10018810:	25203a64 	.word	0x25203a64
10018814:	66342e37 	.word	0x66342e37
10018818:	2e372520 	.word	0x2e372520
1001881c:	25206634 	.word	0x25206634
10018820:	66342e37 	.word	0x66342e37
10018824:	00000a0d 	.word	0x00000a0d
10018828:	6f727947 	.word	0x6f727947
1001882c:	66666f20 	.word	0x66666f20
10018830:	20746573 	.word	0x20746573
10018834:	61746164 	.word	0x61746164
10018838:	53574820 	.word	0x53574820
1001883c:	69622054 	.word	0x69622054
10018840:	64253d74 	.word	0x64253d74
10018844:	3725203a 	.word	0x3725203a
10018848:	2066342e 	.word	0x2066342e
1001884c:	342e3725 	.word	0x342e3725
10018850:	37252066 	.word	0x37252066
10018854:	0d66342e 	.word	0x0d66342e
10018858:	0000000a 	.word	0x0000000a
1001885c:	72617453 	.word	0x72617453
10018860:	676e6974 	.word	0x676e6974
10018864:	55504d20 	.word	0x55504d20
10018868:	30303536 	.word	0x30303536
1001886c:	53574820 	.word	0x53574820
10018870:	000d2154 	.word	0x000d2154
10018874:	72746552 	.word	0x72746552
10018878:	69766569 	.word	0x69766569
1001887c:	4220676e 	.word	0x4220676e
10018880:	65736169 	.word	0x65736169
10018884:	00000d73 	.word	0x00000d73
10018888:	72746552 	.word	0x72746552
1001888c:	69766569 	.word	0x69766569
10018890:	4220676e 	.word	0x4220676e
10018894:	65736169 	.word	0x65736169
10018898:	72452073 	.word	0x72452073
1001889c:	20726f72 	.word	0x20726f72
100188a0:	6f70202d 	.word	0x6f70202d
100188a4:	62697373 	.word	0x62697373
100188a8:	4920656c 	.word	0x4920656c
100188ac:	65204332 	.word	0x65204332
100188b0:	726f7272 	.word	0x726f7272
100188b4:	00000000 	.word	0x00000000
100188b8:	72746552 	.word	0x72746552
100188bc:	69766569 	.word	0x69766569
100188c0:	5320676e 	.word	0x5320676e
100188c4:	69422054 	.word	0x69422054
100188c8:	73657361 	.word	0x73657361
100188cc:	00000000 	.word	0x00000000
100188d0:	72746552 	.word	0x72746552
100188d4:	69766569 	.word	0x69766569
100188d8:	5320676e 	.word	0x5320676e
100188dc:	69422054 	.word	0x69422054
100188e0:	73657361 	.word	0x73657361
100188e4:	72724520 	.word	0x72724520
100188e8:	2d20726f 	.word	0x2d20726f
100188ec:	736f7020 	.word	0x736f7020
100188f0:	6c626973 	.word	0x6c626973
100188f4:	32492065 	.word	0x32492065
100188f8:	72652043 	.word	0x72652043
100188fc:	00726f72 	.word	0x00726f72
10018900:	65636341 	.word	0x65636341
10018904:	6553206c 	.word	0x6553206c
10018908:	5420666c 	.word	0x5420666c
1001890c:	20747365 	.word	0x20747365
10018910:	75736552 	.word	0x75736552
10018914:	3a73746c 	.word	0x3a73746c
10018918:	0a642520 	.word	0x0a642520
1001891c:	00000000 	.word	0x00000000
10018920:	6f727947 	.word	0x6f727947
10018924:	6c655320 	.word	0x6c655320
10018928:	65542066 	.word	0x65542066
1001892c:	52207473 	.word	0x52207473
10018930:	6c757365 	.word	0x6c757365
10018934:	203a7374 	.word	0x203a7374
10018938:	000a6425 	.word	0x000a6425
1001893c:	706d6f43 	.word	0x706d6f43
10018940:	20737361 	.word	0x20737361
10018944:	666c6553 	.word	0x666c6553
10018948:	73655420 	.word	0x73655420
1001894c:	65522074 	.word	0x65522074
10018950:	746c7573 	.word	0x746c7573
10018954:	25203a73 	.word	0x25203a73
10018958:	00000a64 	.word	0x00000a64
1001895c:	74697845 	.word	0x74697845
10018960:	20676e69 	.word	0x20676e69
10018964:	54535748 	.word	0x54535748
10018968:	00000000 	.word	0x00000000
1001896c:	706d6f43 	.word	0x706d6f43
10018970:	20737361 	.word	0x20737361
10018974:	20746f6e 	.word	0x20746f6e
10018978:	6e756f66 	.word	0x6e756f66
1001897c:	00002e64 	.word	0x00002e64

10018980 <reg>:
10018980:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10018990:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
100189a0:	2a292827 67646334 00000049              '()*4cdgI...

100189ac <hw>:
100189ac:	04000069 01410080 01000000 00001333     i.....A.....3...

100189bc <test>:
100189bc:	00000083 00004000 00000200 00c800c8     .....@..........
100189cc:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
100189dc:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100189ec:	006ccd4c 002cc90c 00765636 00664626     L.l...,.6Vv.&Ff.
100189fc:	c4abf2fe dfdff1aa dfdfafbb 8db3aab8     ................
10018a0c:	350d98b4 0000005d aaaaaab8 c5c388b0     ...5]...........
10018a1c:	000000c7 f3b9b1d8 b691a38b 00d9b409     ................
10018a2c:	f3b9b1da b691a38b 00dab4da 0000000d     ................
10018a3c:	706d645b 6165725f 69665f64 205d6f66     [dmp_read_fifo] 
10018a4c:	72726520 7720726f 656c6968 61657220      error while rea
10018a5c:	676e6964 66696620 7473206f 6d616572     ding fifo stream
10018a6c:	00000021 0000000d 736d735b 7265735f     !.......[sms_ser
10018a7c:	65636976 7664615f 69747265 205d6573     vice_advertise] 
10018a8c:	76646120 69747265 656d6573 6420746e      advertisement d
10018a9c:	20617461 20746573 6c696166 00216465     ata set failed!.
10018aac:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10018abc:	69747265 205d6573 454c4220 61745320     ertise]  BLE Sta
10018acc:	64657472 76644120 69747265 656d6573     rted Advertiseme
10018adc:	0000746e 0000000d 6332695b 73616d5f     nt......[i2c_mas
10018aec:	5f726574 666e6f63 72756769 20205d65     ter_configure]  
10018afc:	666e6f63 72756769 20676e69 20433249     configuring I2C 
10018b0c:	7473616d 2e2e7265 0000002e 6332695b     master......[i2c
10018b1c:	73616d5f 5f726574 666e6f63 72756769     _master_configur
10018b2c:	61635f65 61626c6c 5d736b63 6f632020     e_callbacks]  co
10018b3c:	6769666e 6e697275 32692067 61632063     nfiguring i2c ca
10018b4c:	61626c6c 2e736b63 00002e2e 4c504d65     llbacks.....eMPL
10018b5c:	312e3520 00000000 0000000d 736d735b      5.1........[sms
10018b6c:	756d695f 6174735f 70757472 6320205d     _imu_startup]  c
10018b7c:	5f6d6d6f 6f727265 203d2072 65757274     omm_error = true
10018b8c:	00000000 736d735b 756d695f 696e695f     ....[sms_imu_ini
10018b9c:	6c616974 5d657a69 20200d0a 74696e69     tialize]..  init
10018bac:	696c6169 676e697a 554d4920 002e2e2e     ializing IMU....
10018bbc:	6f632020 6769666e 6e697275 4d492067       configuring IM
10018bcc:	2e2e2e55 00000000 736d735b 756d695f     U.......[sms_imu
10018bdc:	6e6f635f 75676966 205d6572 72726520     _configure]  err
10018bec:	7720726f 656c6968 616e6520 6e696c62     or while enablin
10018bfc:	6d642067 65662070 72757461 00007365     g dmp features..
10018c0c:	4f525245 72202152 72757465 3a64656e     ERROR! returned:
10018c1c:	00642520 736d735b 756d695f 6c6f705f      %d.[sms_imu_pol
10018c2c:	61645f6c 205d6174 6d6f6320 72655f6d     l_data]  comm_er
10018c3c:	20726f72 7274203d 00006575 736d735b     ror = true..[sms
10018c4c:	756d695f 6365725f 65766965 7461645f     _imu_receive_dat
10018c5c:	20205d61 61647075 676e6974 65687420     a]  updating the
10018c6c:	61686320 74636172 73697265 20636974      characteristic 
10018c7c:	6c696166 202c6465 73616572 25206e6f     failed, reason %
10018c8c:	00000064 736d735b 756d695f 6365725f     d...[sms_imu_rec
10018c9c:	65766965 7461645f 20205d61 646e6573     eive_data]  send
10018cac:	20676e69 69746f6e 61636966 6e6f6974     ing notification
10018cbc:	69616620 0064656c 736d735b 756d695f      failed.[sms_imu
10018ccc:	6365725f 65766965 7461645f 20205d61     _receive_data]  
10018cdc:	646e6573 20676e69 69746f6e 61636966     sending notifica
10018cec:	6e6f6974 002e2e2e 0000000d 6970735b     tion........[spi
10018cfc:	73616d5f 5f726574 666e6f63 72756769     _master_configur
10018d0c:	20205d65 666e6f63 72756769 20676e69     e]  configuring 
10018d1c:	20495053 7473616d 20737265 20646e61     SPI masters and 
10018d2c:	61747461 6e696863 6c732067 73657661     attaching slaves
10018d3c:	002e2e2e 6970735b 73616d5f 5f726574     ....[spi_master_
10018d4c:	666e6f63 72756769 61635f65 61626c6c     configure_callba
10018d5c:	5d736b63 6f632020 6769666e 6e697275     cks]  configurin
10018d6c:	50532067 61632049 61626c6c 2e736b63     g SPI callbacks.
10018d7c:	00002e2e 0000000d 656c625b 7664615f     ........[ble_adv
10018d8c:	7065725f 5f74726f 6e657665 20205d74     _report_event]  
10018d9c:	65766461 73697472 6e656d65 69742074     advertisement ti
10018dac:	756f656d 00000074 6e696f47 6f742067     meout...Going to
10018dbc:	656c7320 2e2e7065 0000002e 656c625b      sleep......[ble
10018dcc:	6e6f635f 7463656e 615f6465 655f7070     _connected_app_e
10018ddc:	746e6576 6564205d 65636976 6f632073     vent] devices co
10018dec:	63656e6e 00646574 656c625b 7369645f     nnected.[ble_dis
10018dfc:	6e6e6f63 65746365 70615f64 76655f70     connected_app_ev
10018e0c:	5d746e65 65657020 69642072 6e6f6373     ent] peer discon
10018e1c:	7463656e 2e2e6465 0000002e 656c625b     nected......[ble
10018e2c:	6961705f 5f646572 5f707061 6e657665     _paired_app_even
10018e3c:	44205d74 63697665 70207365 65726961     t] Devices paire
10018e4c:	2e2e2e64 00000000 616e6520 6e696c62     d....... enablin
10018e5c:	6c732067 2e706565 00000000 656c625b     g sleep.....[ble
10018e6c:	746f6e5f 63696669 6f697461 6f635f6e     _notification_co
10018e7c:	7269666e 5f64656d 5f707061 6e657665     nfirmed_app_even
10018e8c:	6e205d74 6669746f 74616369 206e6f69     t] notification 
10018e9c:	746e6573 63757320 73736563 6c6c7566     sent successfull
10018eac:	00000079 69616d5b 69205d6e 6974696e     y...[main] initi
10018ebc:	7a696c61 20676e69 20454c42 6c707061     alizing BLE appl
10018ecc:	74616369 006e6f69 6e6f6420 00002165     ication. done!..
10018edc:	1000adfc 1000adfc 1000adfc 1000adfc     ................
10018eec:	1000adfc 1000adfc 1000adfc 1000adfc     ................

10018efc <startup_template_app_gap_cb>:
	...
10018f08:	1000ad31 00000000 1000ad81 1000adcd     1...............
	...
10018f20:	1000ae2d 00000000 00000000 00000000     -...............
10018f30:	00000000 1000ae2d 00000000 00000000     ....-...........
	...

10018f48 <startup_template_app_gatt_server_cb>:
10018f48:	1000ae6d 00000000 1000aeb1 00000000     m...............
	...
10018f70:	1000bc1c 1000bca2 1000bd28 1000bdae     ........(.......
10018f80:	1000be34 1000d8cc 1000d8da 1000d8e8     4...............
10018f90:	1000d8f6 1000d904 1000d912 1000d920     ............ ...
10018fa0:	1000d930 1000d940 1000d950 1000d960     0...@...P...`...
10018fb0:	1000d970 1000d980 1000d990 1000d9a0     p...............
10018fc0:	1000d9b0 1000d9c0 1000d9d0 1000d9e0     ................
10018fd0:	1000d9f0 1000da00 1000da10 1000da20     ............ ...
10018fe0:	1000da30 1000da40 1000da50 1000da60     0...@...P...`...
10018ff0:	1000da70 1000da7e 1000da8c 1000da9a     p...~...........
10019000:	1000daa8 1000dab6 1000dac4 1000dad2     ................
10019010:	1000dae0 1000daf0 1000db00 1000db10     ................
10019020:	1000db20 1000db30 1000db40 1000db50      ...0...@...P...
10019030:	1000db60 1000db70 1000db80 1000db90     `...p...........
10019040:	1000dba0 1000dbb0 1000dbc0 1000dbd0     ................
10019050:	1000dbe0 1000dbf2 1000dc04 1000dc4c     ............L...
10019060:	1000dc5a 1000dc68 1000dc76 1000dc84     Z...h...v.......
10019070:	1000dc92 1000dca0 1000dcae 1000dcbc     ................
10019080:	1000dcca 1000dcd8 1000dce6 1000dcf4     ................
10019090:	1000dd02 1000dd10 1000dd1e 1000dd2c     ............,...
100190a0:	1000dd3a 1000dd48 1000dd56 1000dd64     :...H...V...d...
100190b0:	1000dd72 1000dd80 1000dd8e 1000dd9c     r...............
100190c0:	1000ddaa 1000ddb8 1000ddc6 1000ddd4     ................
100190d0:	1000dde2 1000ddf0 1000ddfe 1000de0c     ................
100190e0:	1000de1a 1000de28 1000de36 1000de44     ....(...6...D...
100190f0:	1000de52 1000de60 1000de6e 1000de7c     R...`...n...|...
10019100:	1000de8a 1000de98 1000dea6 1000deb4     ................
10019110:	1000dec2 1000ded0 1000dede 1000deec     ................
10019120:	1000defa 1000df08 1000df16 1000df28     ............(...
10019130:	1000df3a 1000dffa 1000e02e 1000e062     :...........b...
10019140:	1000e096 1000e336 1000e0ce 1000e0ea     ....6...........
10019150:	1000e176 1000e192 1000e106 1000e122     v..........."...
10019160:	1000e13e 1000e15a 1000e1ae 1000e53c     >...Z.......<...
10019170:	1000e53c 1000e53c 1000e53c 1000e53c     <...<...<...<...
10019180:	1000e53c 1000e53c 1000e53c 1000e272     <...<...<...r...
10019190:	1000e28e 1000e2aa 1000e358 1000e1e6     ........X.......
100191a0:	1000e53c 1000e53c 1000e53c 1000e53c     <...<...<...<...
100191b0:	1000e53c 1000e53c 1000e2c6 1000e2e2     <...<...........
100191c0:	1000e2fe 1000e31a 1000e53c 1000e4d0     ........<.......
100191d0:	1000e4f4 1000e53c 1000e53c 1000e402     ....<...<.......
100191e0:	1000e424 1000e446 1000e468 1000e53c     $...F...h...<...
100191f0:	1000e53c 1000e53c 1000e53c 1000e53c     <...<...<...<...
10019200:	1000e53c 1000e53c 1000e53c 1000dfe0     <...<...<.......
10019210:	1000e014 1000e048 1000e07c 1000e0b2     ....H...|.......
10019220:	1000e1ca 1000e202 1000e21e 1000e23a     ............:...
10019230:	1000e256 1000e3e0 1000e48a 1000e4ac     V...............
10019240:	1000e518 1000ec66 1000ec74 1000ec92     ....f...t.......
10019250:	1000ecb4 1000ecd6                       ........

10019258 <ble_mgr_gap_handle>:
10019258:	1000f6e5 1000f719 1000f781 00000000     ................
10019268:	00000000 1000f7d5 1000fdb9 1000ff69     ............i...
10019278:	1000ff81 10010871 10010379 1000ffa9     ....q...y.......
10019288:	10010635 10010be1 10010a6d 1000fb39     5.......m...9...
	...

100192a4 <ble_mgr_gatt_server_handle>:
	...
100192bc:	1000fd59 1000fd71 1000fd95 00000000     Y...q...........
100192cc:	52424153 4d532d65 00000053 efcdab00     SABRe-SMS.......
100192dc:	00efcdab 0000000d 65646e55 656e6966     ........Undefine
100192ec:	76452064 20746e65 65636552 64657669     d Event Received
100192fc:	00000000 6f736552 6e69766c 61522067     ....Resolving Ra
1001930c:	6d6f646e 64646120 73736572 63757320     ndom address suc
1001931c:	73736563 00002a2a 6f736552 6e69766c     cess**..Resolvin
1001932c:	61522067 6d6f646e 64646120 73736572     g Random address
1001933c:	69616620 2a64656c 0000002a 2077654e      failed**...New 
1001934c:	6e6e6f43 69746365 00006e6f 2078614d     Connection..Max 
1001935c:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001936c:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001937c:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001938c:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001939c:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
100193ac:	53202d20 75746174 25203a73 00000064      - Status: %d...
100193bc:	23232323 23232323 65442323 65636976     ##########Device
100193cc:	756f4620 0000646e 23232323 23232323      Found..########
100193dc:	65442323 65636976 746f4e20 756f4620     ##Device Not Fou
100193ec:	0000646e 69766544 69206563 253a7864     nd..Device idx:%
100193fc:	00000064 74617453 6f4e2065 61482074     d...State Not Ha
1001940c:	656c646e 64252064 00000000 69766544     ndled %d....Devi
1001941c:	64206563 6f637369 63656e6e 20646574     ce disconnected 
1001942c:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
1001943c:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
1001944c:	69747079 4e206e6f 7320746f 74726174     yption Not start
1001945c:	00006465 72696150 71655220 74736575     ed..Pair Request
1001946c:	41202d20 65687475 6369746e 6f697461      - Authenticatio
1001947c:	6146206e 64656c69 00000000 65746e45     n Failed....Ente
1001948c:	68742072 61502065 656b7373 2d362879     r the Passkey(6-
1001949c:	69676944 69202974 6554206e 6e696d72     Digit) in Termin
100194ac:	003a6c61 206e6950 656d6954 0074756f     al:.Pin Timeout.
100194bc:	63736944 656e6e6f 6e697463 2e2e2067     Disconnecting ..
100194cc:	0000002e 63736944 656e6e6f 52207463     ....Disconnect R
100194dc:	65757165 46207473 656c6961 00000064     equest Failed...
100194ec:	65746e45 20646572 73736150 646f632d     Entered Pass-cod
100194fc:	00003a65 61656c50 45206573 7265746e     e:..Please Enter
1001950c:	65687420 6c6f6620 69776f6c 5020676e      the following P
1001951c:	2d737361 65646f63 206e6f28 6568746f     ass-code(on othe
1001952c:	65442072 65636976 00003a29 72696150     r Device):..Pair
1001953c:	79656b2d 70657220 6620796c 656c6961     -key reply faile
1001954c:	00000064 20424f4f 74616546 20657275     d...OOB Feature 
1001955c:	20746f4e 70707573 6574726f 00000064     Not supported...
1001956c:	34333231 00003635 20454c42 69766544     123456..BLE Devi
1001957c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
1001958c:	726f7473 68742065 61702065 6e697269     store the pairin
1001959c:	6e692067 00006f66 72696150 20676e69     g info..Pairing 
100195ac:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100195bc:	69746365 0000676e 72636e45 69747079     ecting..Encrypti
100195cc:	63206e6f 6c706d6f 64657465 63757320     on completed suc
100195dc:	73736563 6c6c7566 00000079 20454c42     cessfully...BLE 
100195ec:	69766544 6e206563 6620746f 646e756f     Device not found
100195fc:	636e6520 74707972 206e6f69 6f666e69      encryption info
1001960c:	00000000 72636e45 69747079 66206e6f     ....Encryption f
1001961c:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
1001962c:	6f666e69 74616d72 206e6f69 7020666f     information of p
1001963c:	20726565 69766564 69206563 6f6e2073     eer device is no
1001964c:	76612074 616c6961 2e656c62 00000000     t available.....
1001965c:	61656c50 75206573 6961706e 68742072     Please unpair th
1001966c:	65642065 65636976 6f726620 6570206d     e device from pe
1001967c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
1001968c:	65732029 6e697474 6d207367 20756e65     ) settings menu 
1001969c:	20646e61 72617473 61702074 6e697269     and start pairin
100196ac:	67612067 006e6961 72636e45 69747079     g again.Encrypti
100196bc:	52206e6f 65757165 52207473 796c7065     on Request Reply
100196cc:	69614620 0064656c 656c625b 6576655f      Failed.[ble_eve
100196dc:	6d5f746e 67616e61 205d7265 454c4220     nt_manager]  BLE
100196ec:	6576452d 253a746e 00000064 5f454c42     -Event:%d...BLE_
100196fc:	5f504147 5f564441 504d4f43 4554454c     GAP_ADV_COMPLETE
1001970c:	434f4c5f 4e5f4c41 5f454d41 42414e45     _LOCAL_NAME_ENAB
1001971c:	2620454c 42212026 475f454c 415f5041     LE && !BLE_GAP_A
1001972c:	535f5644 54524f48 44454e45 434f4c5f     DV_SHORTENED_LOC
1001973c:	4e5f4c41 5f454d41 42414e45 0000454c     AL_NAME_ENABLE..
1001974c:	4c420a0d 44412d45 00203a56 6c696146     ..BLE-ADV: .Fail
1001975c:	74206465 6461206f 6f432064 656c706d     ed to add Comple
1001976c:	6c206574 6c61636f 6d616e20 00000065     te local name...
1001977c:	5f454c42 5f504147 5f564441 554e414d     BLE_GAP_ADV_MANU
1001978c:	54434146 52455255 4550535f 49464943     FACTURER_SPECIFI
1001979c:	41445f43 455f4154 4c42414e 00000045     C_DATA_ENABLE...
100197ac:	5a2d571c 50532dbe 00000000 6c696146     .W-Z.-SP....Fail
100197bc:	74206465 6461206f 614d2064 6166756e     ed to add Manufa
100197cc:	72757463 73207265 69636570 20636966     cturer specific 
100197dc:	61746164 00000000 65766441 73697472     data....Advertis
100197ec:	6e656d65 61642074 203a6174 00207830     ement data: 0x .
100197fc:	78323025 29632528 00000020 20454c42     %02x(%c) ...BLE 
1001980c:	65766441 73697472 6e656d65 61642074     Advertisement da
1001981c:	73206174 73207465 65636375 00007373     ta set success..
1001982c:	1000f572 1000f580 1000f58e 1000f59c     r...............
1001983c:	1000f5aa 1000f5b8 1000f5c6 1000feb8     ................
1001984c:	1000ff00 1000fe84 1000fe84 1000fe84     ................
1001985c:	1000feb8 1000fe84 1000fe84 656d7441     ............Atme
1001986c:	6f43206c 002e7072                                l Corp.

10019873 <CSWTCH.51>:
10019873:	03010300 03030303 03030303 02020303              ...............

10019882 <CSWTCH.49>:
10019882:	02100402                                         ...

10019885 <client_conf_uuid>:
10019885:	29042902                                         .)

10019887 <presentation_format_uuid>:
10019887:	29012904                                         .)

10019889 <user_desc_uuid>:
10019889:	29032901                                         .)

1001988b <server_conf_uuid>:
1001988b:	29002903                                         .)

1001988d <extended_props_uuid>:
1001988d:	28022900                                         .)

1001988f <include_uuid>:
1001988f:	28032802                                         .(

10019891 <char_uuid>:
10019891:	92002803 b610015b 7410015a 4c10015b     .(..[...Z..t[..L
100198a1:	7410015b 4010015b 7410015b 4c10015b     [..t[..@[..t[..L
100198b1:	b610015b b610015a 4010015a 4c10015b     [...Z...Z..@[..L
100198c1:	f810015b f810015b f810015b 7a10015b     [...[...[...[..z
100198d1:	b610015b b610015a 6010015a 4a10015b     [...Z...Z..`[..J
100198e1:	6010015b 4010015b 6010015b 4a10015b     [..`[..@[..`[..J
100198f1:	b610015b b610015a 4010015a 4a10015b     [...Z...Z..@[..J
10019901:	f810015b f810015b f810015b 0410015b     [...[...[...[...
10019911:	f010015c 4e10015e 4e10015e 4c10015e     \...^..N^..N^..L
10019921:	e210015e e210015e d810015e 4c10015e     ^...^...^...^..L
10019931:	e210015e d810015e e210015e 4c10015e     ^...^...^...^..L
10019941:	e810015e e810015e e810015e 7210015e     ^...^...^...^..r
10019951:	d410015f 94100167 94100166 92100166     _...g...f...f...
10019961:	ac100166 ac100167 9e100167 92100167     f...g...g...g...
10019971:	ac100166 9e100167 ac100167 92100167     f...g...g...g...
10019981:	b4100166 b4100167 b4100167 b4100167     f...g...g...g...
10019991:	43100169 a0000000                                i..C...

10019998 <_global_impure_ptr>:
10019998:	10019aa0                                ....

1001999c <__sf_fake_stdin>:
	...

100199bc <__sf_fake_stdout>:
	...

100199dc <__sf_fake_stderr>:
	...
100199fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10019a0c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10019a1c:	31300046 35343332 39383736 64636261     F.0123456789abcd
10019a2c:	00006665                                ef..

10019a30 <_init>:
10019a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10019a32:	46c0      	nop			; (mov r8, r8)
10019a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
10019a36:	bc08      	pop	{r3}
10019a38:	469e      	mov	lr, r3
10019a3a:	4770      	bx	lr

10019a3c <__init_array_start>:
10019a3c:	1000809d 	.word	0x1000809d

10019a40 <_fini>:
10019a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10019a42:	46c0      	nop			; (mov r8, r8)
10019a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
10019a46:	bc08      	pop	{r3}
10019a48:	469e      	mov	lr, r3
10019a4a:	4770      	bx	lr

10019a4c <__fini_array_start>:
10019a4c:	10008075 	.word	0x10008075
