
SMSnode2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013844  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  1001b844  1001b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001de0  1001b8f8  1001b8f8  0001b8f8  2**3
                  ALLOC
  3 .stack        00001000  1001d6d8  1001d6d8  0001b8f8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001b8f8  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  0001b920  2**0
                  CONTENTS, READONLY
  6 .debug_info   00042165  00000000  00000000  0001b9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000479f  00000000  00000000  0005db39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005532  00000000  00000000  000622d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f28  00000000  00000000  0006780a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d70  00000000  00000000  00068732  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002528d  00000000  00000000  000694a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018a8b  00000000  00000000  0008e72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00116e6d  00000000  00000000  000a71ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003fc8  00000000  00000000  001be028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b580      	push	{r7, lr}
10008002:	b082      	sub	sp, #8
10008004:	af00      	add	r7, sp, #0
    uint32_t *pSrc, *pDest;

    /* Initialize the relocate segment */
    pSrc = &_etext;
10008006:	4b14      	ldr	r3, [pc, #80]	; (10008058 <app_entry+0x58>)
10008008:	607b      	str	r3, [r7, #4]
    pDest = &_srelocate;
1000800a:	4b14      	ldr	r3, [pc, #80]	; (1000805c <app_entry+0x5c>)
1000800c:	603b      	str	r3, [r7, #0]

    if (pSrc != pDest) {
1000800e:	687a      	ldr	r2, [r7, #4]
10008010:	683b      	ldr	r3, [r7, #0]
10008012:	429a      	cmp	r2, r3
10008014:	d00c      	beq.n	10008030 <app_entry+0x30>
        for (; pDest < &_erelocate;) {
10008016:	e007      	b.n	10008028 <app_entry+0x28>
            *pDest++ = *pSrc++;
10008018:	683b      	ldr	r3, [r7, #0]
1000801a:	1d1a      	adds	r2, r3, #4
1000801c:	603a      	str	r2, [r7, #0]
1000801e:	687a      	ldr	r2, [r7, #4]
10008020:	1d11      	adds	r1, r2, #4
10008022:	6079      	str	r1, [r7, #4]
10008024:	6812      	ldr	r2, [r2, #0]
10008026:	601a      	str	r2, [r3, #0]
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008028:	683a      	ldr	r2, [r7, #0]
1000802a:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802c:	429a      	cmp	r2, r3
1000802e:	d3f3      	bcc.n	10008018 <app_entry+0x18>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008030:	4b0c      	ldr	r3, [pc, #48]	; (10008064 <app_entry+0x64>)
10008032:	603b      	str	r3, [r7, #0]
10008034:	e004      	b.n	10008040 <app_entry+0x40>
        *pDest++ = 0;
10008036:	683b      	ldr	r3, [r7, #0]
10008038:	1d1a      	adds	r2, r3, #4
1000803a:	603a      	str	r2, [r7, #0]
1000803c:	2200      	movs	r2, #0
1000803e:	601a      	str	r2, [r3, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008040:	683a      	ldr	r2, [r7, #0]
10008042:	4b09      	ldr	r3, [pc, #36]	; (10008068 <app_entry+0x68>)
10008044:	429a      	cmp	r2, r3
10008046:	d3f6      	bcc.n	10008036 <app_entry+0x36>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008048:	4b08      	ldr	r3, [pc, #32]	; (1000806c <app_entry+0x6c>)
1000804a:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804c:	4b08      	ldr	r3, [pc, #32]	; (10008070 <app_entry+0x70>)
1000804e:	4798      	blx	r3

    /* return to BLE OS*/
    return;
10008050:	46c0      	nop			; (mov r8, r8)
}
10008052:	46bd      	mov	sp, r7
10008054:	b002      	add	sp, #8
10008056:	bd80      	pop	{r7, pc}
10008058:	1001b844 	.word	0x1001b844
1000805c:	1001b844 	.word	0x1001b844
10008060:	1001b8f8 	.word	0x1001b8f8
10008064:	1001b8f8 	.word	0x1001b8f8
10008068:	1001d6d8 	.word	0x1001d6d8
1000806c:	10018d9d 	.word	0x10018d9d
10008070:	1000c0d9 	.word	0x1000c0d9

10008074 <__do_global_dtors_aux>:
10008074:	b510      	push	{r4, lr}
10008076:	4c06      	ldr	r4, [pc, #24]	; (10008090 <__do_global_dtors_aux+0x1c>)
10008078:	7823      	ldrb	r3, [r4, #0]
1000807a:	2b00      	cmp	r3, #0
1000807c:	d107      	bne.n	1000808e <__do_global_dtors_aux+0x1a>
1000807e:	4b05      	ldr	r3, [pc, #20]	; (10008094 <__do_global_dtors_aux+0x20>)
10008080:	2b00      	cmp	r3, #0
10008082:	d002      	beq.n	1000808a <__do_global_dtors_aux+0x16>
10008084:	4804      	ldr	r0, [pc, #16]	; (10008098 <__do_global_dtors_aux+0x24>)
10008086:	e000      	b.n	1000808a <__do_global_dtors_aux+0x16>
10008088:	bf00      	nop
1000808a:	2301      	movs	r3, #1
1000808c:	7023      	strb	r3, [r4, #0]
1000808e:	bd10      	pop	{r4, pc}
10008090:	1001b8f8 	.word	0x1001b8f8
10008094:	00000000 	.word	0x00000000
10008098:	1001b844 	.word	0x1001b844

1000809c <frame_dummy>:
1000809c:	4b08      	ldr	r3, [pc, #32]	; (100080c0 <frame_dummy+0x24>)
1000809e:	b510      	push	{r4, lr}
100080a0:	2b00      	cmp	r3, #0
100080a2:	d003      	beq.n	100080ac <frame_dummy+0x10>
100080a4:	4907      	ldr	r1, [pc, #28]	; (100080c4 <frame_dummy+0x28>)
100080a6:	4808      	ldr	r0, [pc, #32]	; (100080c8 <frame_dummy+0x2c>)
100080a8:	e000      	b.n	100080ac <frame_dummy+0x10>
100080aa:	bf00      	nop
100080ac:	4807      	ldr	r0, [pc, #28]	; (100080cc <frame_dummy+0x30>)
100080ae:	6803      	ldr	r3, [r0, #0]
100080b0:	2b00      	cmp	r3, #0
100080b2:	d100      	bne.n	100080b6 <frame_dummy+0x1a>
100080b4:	bd10      	pop	{r4, pc}
100080b6:	4b06      	ldr	r3, [pc, #24]	; (100080d0 <frame_dummy+0x34>)
100080b8:	2b00      	cmp	r3, #0
100080ba:	d0fb      	beq.n	100080b4 <frame_dummy+0x18>
100080bc:	4798      	blx	r3
100080be:	e7f9      	b.n	100080b4 <frame_dummy+0x18>
100080c0:	00000000 	.word	0x00000000
100080c4:	1001b8fc 	.word	0x1001b8fc
100080c8:	1001b844 	.word	0x1001b844
100080cc:	1001b844 	.word	0x1001b844
100080d0:	00000000 	.word	0x00000000

100080d4 <i2c_write>:
#define labs        abs
#define fabs(x)     (((x)>0)?(x):-(x))
#elif defined EMPL_TARGET_SAMB11
#include "app_include.h"
int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100080d4:	b590      	push	{r4, r7, lr}
100080d6:	b085      	sub	sp, #20
100080d8:	af00      	add	r7, sp, #0
100080da:	0004      	movs	r4, r0
100080dc:	0008      	movs	r0, r1
100080de:	0011      	movs	r1, r2
100080e0:	603b      	str	r3, [r7, #0]
100080e2:	1dfb      	adds	r3, r7, #7
100080e4:	1c22      	adds	r2, r4, #0
100080e6:	701a      	strb	r2, [r3, #0]
100080e8:	1dbb      	adds	r3, r7, #6
100080ea:	1c02      	adds	r2, r0, #0
100080ec:	701a      	strb	r2, [r3, #0]
100080ee:	1d7b      	adds	r3, r7, #5
100080f0:	1c0a      	adds	r2, r1, #0
100080f2:	701a      	strb	r2, [r3, #0]
    volatile uint16_t timeout = 0;
100080f4:	230c      	movs	r3, #12
100080f6:	18fb      	adds	r3, r7, r3
100080f8:	2200      	movs	r2, #0
100080fa:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.address = (uint8_t)slave_addr;
100080fc:	1dfb      	adds	r3, r7, #7
100080fe:	781b      	ldrb	r3, [r3, #0]
10008100:	b29a      	uxth	r2, r3
10008102:	4b30      	ldr	r3, [pc, #192]	; (100081c4 <i2c_write+0xf0>)
10008104:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008106:	1d7b      	adds	r3, r7, #5
10008108:	781b      	ldrb	r3, [r3, #0]
1000810a:	3301      	adds	r3, #1
1000810c:	b2db      	uxtb	r3, r3
1000810e:	b29a      	uxth	r2, r3
10008110:	4b2c      	ldr	r3, [pc, #176]	; (100081c4 <i2c_write+0xf0>)
10008112:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008114:	4b2b      	ldr	r3, [pc, #172]	; (100081c4 <i2c_write+0xf0>)
10008116:	685b      	ldr	r3, [r3, #4]
10008118:	1dba      	adds	r2, r7, #6
1000811a:	7812      	ldrb	r2, [r2, #0]
1000811c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000811e:	230f      	movs	r3, #15
10008120:	18fb      	adds	r3, r7, r3
10008122:	2200      	movs	r2, #0
10008124:	701a      	strb	r2, [r3, #0]
10008126:	e014      	b.n	10008152 <i2c_write+0x7e>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008128:	4b26      	ldr	r3, [pc, #152]	; (100081c4 <i2c_write+0xf0>)
1000812a:	685a      	ldr	r2, [r3, #4]
1000812c:	230f      	movs	r3, #15
1000812e:	18fb      	adds	r3, r7, r3
10008130:	781b      	ldrb	r3, [r3, #0]
10008132:	3301      	adds	r3, #1
10008134:	18d3      	adds	r3, r2, r3
10008136:	220f      	movs	r2, #15
10008138:	18ba      	adds	r2, r7, r2
1000813a:	7812      	ldrb	r2, [r2, #0]
1000813c:	6839      	ldr	r1, [r7, #0]
1000813e:	188a      	adds	r2, r1, r2
10008140:	7812      	ldrb	r2, [r2, #0]
10008142:	701a      	strb	r2, [r3, #0]
{
    volatile uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008144:	230f      	movs	r3, #15
10008146:	18fb      	adds	r3, r7, r3
10008148:	781a      	ldrb	r2, [r3, #0]
1000814a:	230f      	movs	r3, #15
1000814c:	18fb      	adds	r3, r7, r3
1000814e:	3201      	adds	r2, #1
10008150:	701a      	strb	r2, [r3, #0]
10008152:	230f      	movs	r3, #15
10008154:	18fa      	adds	r2, r7, r3
10008156:	1d7b      	adds	r3, r7, #5
10008158:	7812      	ldrb	r2, [r2, #0]
1000815a:	781b      	ldrb	r3, [r3, #0]
1000815c:	429a      	cmp	r2, r3
1000815e:	d3e3      	bcc.n	10008128 <i2c_write+0x54>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
    }
    i2c_write_done = false;
10008160:	4b19      	ldr	r3, [pc, #100]	; (100081c8 <i2c_write+0xf4>)
10008162:	2200      	movs	r2, #0
10008164:	701a      	strb	r2, [r3, #0]
    i2c_master_write_packet_job(&i2c_master_mpu9250_instance, &i2c_wpacket);
10008166:	4a17      	ldr	r2, [pc, #92]	; (100081c4 <i2c_write+0xf0>)
10008168:	4b18      	ldr	r3, [pc, #96]	; (100081cc <i2c_write+0xf8>)
1000816a:	0011      	movs	r1, r2
1000816c:	0018      	movs	r0, r3
1000816e:	4b18      	ldr	r3, [pc, #96]	; (100081d0 <i2c_write+0xfc>)
10008170:	4798      	blx	r3
    while(!i2c_write_done){
10008172:	e01a      	b.n	100081aa <i2c_write+0xd6>
        timeout++;
10008174:	230c      	movs	r3, #12
10008176:	18fb      	adds	r3, r7, r3
10008178:	881b      	ldrh	r3, [r3, #0]
1000817a:	b29b      	uxth	r3, r3
1000817c:	3301      	adds	r3, #1
1000817e:	b29a      	uxth	r2, r3
10008180:	230c      	movs	r3, #12
10008182:	18fb      	adds	r3, r7, r3
10008184:	801a      	strh	r2, [r3, #0]
        if(timeout >= I2C_TIMEOUT) {
10008186:	230c      	movs	r3, #12
10008188:	18fb      	adds	r3, r7, r3
1000818a:	881b      	ldrh	r3, [r3, #0]
1000818c:	b29b      	uxth	r3, r3
1000818e:	4a11      	ldr	r2, [pc, #68]	; (100081d4 <i2c_write+0x100>)
10008190:	4293      	cmp	r3, r2
10008192:	d90a      	bls.n	100081aa <i2c_write+0xd6>
            DBG_LOG("[i2c_write]  I2C TIMEOUT!!");
10008194:	4b10      	ldr	r3, [pc, #64]	; (100081d8 <i2c_write+0x104>)
10008196:	0018      	movs	r0, r3
10008198:	4b10      	ldr	r3, [pc, #64]	; (100081dc <i2c_write+0x108>)
1000819a:	4798      	blx	r3
1000819c:	4b10      	ldr	r3, [pc, #64]	; (100081e0 <i2c_write+0x10c>)
1000819e:	0018      	movs	r0, r3
100081a0:	4b10      	ldr	r3, [pc, #64]	; (100081e4 <i2c_write+0x110>)
100081a2:	4798      	blx	r3
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
100081a4:	2301      	movs	r3, #1
100081a6:	425b      	negs	r3, r3
100081a8:	e008      	b.n	100081bc <i2c_write+0xe8>
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
    }
    i2c_write_done = false;
    i2c_master_write_packet_job(&i2c_master_mpu9250_instance, &i2c_wpacket);
    while(!i2c_write_done){
100081aa:	4b07      	ldr	r3, [pc, #28]	; (100081c8 <i2c_write+0xf4>)
100081ac:	781b      	ldrb	r3, [r3, #0]
100081ae:	b2db      	uxtb	r3, r3
100081b0:	2201      	movs	r2, #1
100081b2:	4053      	eors	r3, r2
100081b4:	b2db      	uxtb	r3, r3
100081b6:	2b00      	cmp	r3, #0
100081b8:	d1dc      	bne.n	10008174 <i2c_write+0xa0>
            DBG_LOG("[i2c_write]  I2C TIMEOUT!!");
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }
    return 0;
100081ba:	2300      	movs	r3, #0
}
100081bc:	0018      	movs	r0, r3
100081be:	46bd      	mov	sp, r7
100081c0:	b005      	add	sp, #20
100081c2:	bd90      	pop	{r4, r7, pc}
100081c4:	1001c218 	.word	0x1001c218
100081c8:	1001c0aa 	.word	0x1001c0aa
100081cc:	1001c2bc 	.word	0x1001c2bc
100081d0:	1000dc59 	.word	0x1000dc59
100081d4:	000003e7 	.word	0x000003e7
100081d8:	10019fe4 	.word	0x10019fe4
100081dc:	10019095 	.word	0x10019095
100081e0:	10019fe8 	.word	0x10019fe8
100081e4:	10018f75 	.word	0x10018f75

100081e8 <i2c_read>:
int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100081e8:	b590      	push	{r4, r7, lr}
100081ea:	b085      	sub	sp, #20
100081ec:	af00      	add	r7, sp, #0
100081ee:	0004      	movs	r4, r0
100081f0:	0008      	movs	r0, r1
100081f2:	0011      	movs	r1, r2
100081f4:	603b      	str	r3, [r7, #0]
100081f6:	1dfb      	adds	r3, r7, #7
100081f8:	1c22      	adds	r2, r4, #0
100081fa:	701a      	strb	r2, [r3, #0]
100081fc:	1dbb      	adds	r3, r7, #6
100081fe:	1c02      	adds	r2, r0, #0
10008200:	701a      	strb	r2, [r3, #0]
10008202:	1d7b      	adds	r3, r7, #5
10008204:	1c0a      	adds	r2, r1, #0
10008206:	701a      	strb	r2, [r3, #0]
    volatile uint16_t timeout = 0;
10008208:	230c      	movs	r3, #12
1000820a:	18fb      	adds	r3, r7, r3
1000820c:	2200      	movs	r2, #0
1000820e:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.address = (uint8_t)slave_addr;
10008210:	1dfb      	adds	r3, r7, #7
10008212:	781b      	ldrb	r3, [r3, #0]
10008214:	b29a      	uxth	r2, r3
10008216:	4b50      	ldr	r3, [pc, #320]	; (10008358 <i2c_read+0x170>)
10008218:	801a      	strh	r2, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000821a:	1dfb      	adds	r3, r7, #7
1000821c:	781b      	ldrb	r3, [r3, #0]
1000821e:	b29a      	uxth	r2, r3
10008220:	4b4e      	ldr	r3, [pc, #312]	; (1000835c <i2c_read+0x174>)
10008222:	801a      	strh	r2, [r3, #0]
    i2c_wpacket.data_length = 1;
10008224:	4b4c      	ldr	r3, [pc, #304]	; (10008358 <i2c_read+0x170>)
10008226:	2201      	movs	r2, #1
10008228:	805a      	strh	r2, [r3, #2]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000822a:	1d7b      	adds	r3, r7, #5
1000822c:	781b      	ldrb	r3, [r3, #0]
1000822e:	b29a      	uxth	r2, r3
10008230:	4b4a      	ldr	r3, [pc, #296]	; (1000835c <i2c_read+0x174>)
10008232:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008234:	4b48      	ldr	r3, [pc, #288]	; (10008358 <i2c_read+0x170>)
10008236:	685b      	ldr	r3, [r3, #4]
10008238:	1dba      	adds	r2, r7, #6
1000823a:	7812      	ldrb	r2, [r2, #0]
1000823c:	701a      	strb	r2, [r3, #0]

    i2c_write_done = false;
1000823e:	4b48      	ldr	r3, [pc, #288]	; (10008360 <i2c_read+0x178>)
10008240:	2200      	movs	r2, #0
10008242:	701a      	strb	r2, [r3, #0]
    //i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
    i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
10008244:	4a44      	ldr	r2, [pc, #272]	; (10008358 <i2c_read+0x170>)
10008246:	4b47      	ldr	r3, [pc, #284]	; (10008364 <i2c_read+0x17c>)
10008248:	0011      	movs	r1, r2
1000824a:	0018      	movs	r0, r3
1000824c:	4b46      	ldr	r3, [pc, #280]	; (10008368 <i2c_read+0x180>)
1000824e:	4798      	blx	r3
    while(!i2c_write_done){
10008250:	e01a      	b.n	10008288 <i2c_read+0xa0>
        timeout++;
10008252:	230c      	movs	r3, #12
10008254:	18fb      	adds	r3, r7, r3
10008256:	881b      	ldrh	r3, [r3, #0]
10008258:	b29b      	uxth	r3, r3
1000825a:	3301      	adds	r3, #1
1000825c:	b29a      	uxth	r2, r3
1000825e:	230c      	movs	r3, #12
10008260:	18fb      	adds	r3, r7, r3
10008262:	801a      	strh	r2, [r3, #0]
        if(timeout >= I2C_TIMEOUT) {
10008264:	230c      	movs	r3, #12
10008266:	18fb      	adds	r3, r7, r3
10008268:	881b      	ldrh	r3, [r3, #0]
1000826a:	b29b      	uxth	r3, r3
1000826c:	4a3f      	ldr	r2, [pc, #252]	; (1000836c <i2c_read+0x184>)
1000826e:	4293      	cmp	r3, r2
10008270:	d90a      	bls.n	10008288 <i2c_read+0xa0>
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
10008272:	4b3f      	ldr	r3, [pc, #252]	; (10008370 <i2c_read+0x188>)
10008274:	0018      	movs	r0, r3
10008276:	4b3f      	ldr	r3, [pc, #252]	; (10008374 <i2c_read+0x18c>)
10008278:	4798      	blx	r3
1000827a:	4b3f      	ldr	r3, [pc, #252]	; (10008378 <i2c_read+0x190>)
1000827c:	0018      	movs	r0, r3
1000827e:	4b3f      	ldr	r3, [pc, #252]	; (1000837c <i2c_read+0x194>)
10008280:	4798      	blx	r3
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
10008282:	2301      	movs	r3, #1
10008284:	425b      	negs	r3, r3
10008286:	e063      	b.n	10008350 <i2c_read+0x168>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;

    i2c_write_done = false;
    //i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
    i2c_master_write_packet_job_no_stop(&i2c_master_mpu9250_instance, &i2c_wpacket);
    while(!i2c_write_done){
10008288:	4b35      	ldr	r3, [pc, #212]	; (10008360 <i2c_read+0x178>)
1000828a:	781b      	ldrb	r3, [r3, #0]
1000828c:	b2db      	uxtb	r3, r3
1000828e:	2201      	movs	r2, #1
10008290:	4053      	eors	r3, r2
10008292:	b2db      	uxtb	r3, r3
10008294:	2b00      	cmp	r3, #0
10008296:	d1dc      	bne.n	10008252 <i2c_read+0x6a>
            //i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }

    i2c_read_done = false;
10008298:	4b39      	ldr	r3, [pc, #228]	; (10008380 <i2c_read+0x198>)
1000829a:	2200      	movs	r2, #0
1000829c:	701a      	strb	r2, [r3, #0]
    //i2c_master_read_packet_wait(&i2c_master_mpu9250_instance, &i2c_rpacket);
    i2c_master_read_packet_job(&i2c_master_mpu9250_instance, &i2c_rpacket);
1000829e:	4a2f      	ldr	r2, [pc, #188]	; (1000835c <i2c_read+0x174>)
100082a0:	4b30      	ldr	r3, [pc, #192]	; (10008364 <i2c_read+0x17c>)
100082a2:	0011      	movs	r1, r2
100082a4:	0018      	movs	r0, r3
100082a6:	4b37      	ldr	r3, [pc, #220]	; (10008384 <i2c_read+0x19c>)
100082a8:	4798      	blx	r3
    while(!i2c_read_done){
100082aa:	e028      	b.n	100082fe <i2c_read+0x116>
        timeout++;
100082ac:	230c      	movs	r3, #12
100082ae:	18fb      	adds	r3, r7, r3
100082b0:	881b      	ldrh	r3, [r3, #0]
100082b2:	b29b      	uxth	r3, r3
100082b4:	3301      	adds	r3, #1
100082b6:	b29a      	uxth	r2, r3
100082b8:	230c      	movs	r3, #12
100082ba:	18fb      	adds	r3, r7, r3
100082bc:	801a      	strh	r2, [r3, #0]
        printf("%d\n\r",timeout);
100082be:	230c      	movs	r3, #12
100082c0:	18fb      	adds	r3, r7, r3
100082c2:	881b      	ldrh	r3, [r3, #0]
100082c4:	b29b      	uxth	r3, r3
100082c6:	001a      	movs	r2, r3
100082c8:	4b2f      	ldr	r3, [pc, #188]	; (10008388 <i2c_read+0x1a0>)
100082ca:	0011      	movs	r1, r2
100082cc:	0018      	movs	r0, r3
100082ce:	4b2b      	ldr	r3, [pc, #172]	; (1000837c <i2c_read+0x194>)
100082d0:	4798      	blx	r3
        if(timeout >= I2C_TIMEOUT) {
100082d2:	230c      	movs	r3, #12
100082d4:	18fb      	adds	r3, r7, r3
100082d6:	881b      	ldrh	r3, [r3, #0]
100082d8:	b29b      	uxth	r3, r3
100082da:	4a24      	ldr	r2, [pc, #144]	; (1000836c <i2c_read+0x184>)
100082dc:	4293      	cmp	r3, r2
100082de:	d90e      	bls.n	100082fe <i2c_read+0x116>
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
100082e0:	4b23      	ldr	r3, [pc, #140]	; (10008370 <i2c_read+0x188>)
100082e2:	0018      	movs	r0, r3
100082e4:	4b23      	ldr	r3, [pc, #140]	; (10008374 <i2c_read+0x18c>)
100082e6:	4798      	blx	r3
100082e8:	4b23      	ldr	r3, [pc, #140]	; (10008378 <i2c_read+0x190>)
100082ea:	0018      	movs	r0, r3
100082ec:	4b23      	ldr	r3, [pc, #140]	; (1000837c <i2c_read+0x194>)
100082ee:	4798      	blx	r3
            i2c_master_send_stop(&i2c_master_mpu9250_instance);
100082f0:	4b1c      	ldr	r3, [pc, #112]	; (10008364 <i2c_read+0x17c>)
100082f2:	0018      	movs	r0, r3
100082f4:	4b25      	ldr	r3, [pc, #148]	; (1000838c <i2c_read+0x1a4>)
100082f6:	4798      	blx	r3
            return -1;
100082f8:	2301      	movs	r3, #1
100082fa:	425b      	negs	r3, r3
100082fc:	e028      	b.n	10008350 <i2c_read+0x168>
    }

    i2c_read_done = false;
    //i2c_master_read_packet_wait(&i2c_master_mpu9250_instance, &i2c_rpacket);
    i2c_master_read_packet_job(&i2c_master_mpu9250_instance, &i2c_rpacket);
    while(!i2c_read_done){
100082fe:	4b20      	ldr	r3, [pc, #128]	; (10008380 <i2c_read+0x198>)
10008300:	781b      	ldrb	r3, [r3, #0]
10008302:	b2db      	uxtb	r3, r3
10008304:	2201      	movs	r2, #1
10008306:	4053      	eors	r3, r2
10008308:	b2db      	uxtb	r3, r3
1000830a:	2b00      	cmp	r3, #0
1000830c:	d1ce      	bne.n	100082ac <i2c_read+0xc4>
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
            i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }
    for (uint8_t i = 0; i < data_len; i++) {
1000830e:	230f      	movs	r3, #15
10008310:	18fb      	adds	r3, r7, r3
10008312:	2200      	movs	r2, #0
10008314:	701a      	strb	r2, [r3, #0]
10008316:	e013      	b.n	10008340 <i2c_read+0x158>
        data[i] = i2c_rpacket.data[i];
10008318:	230f      	movs	r3, #15
1000831a:	18fb      	adds	r3, r7, r3
1000831c:	781b      	ldrb	r3, [r3, #0]
1000831e:	683a      	ldr	r2, [r7, #0]
10008320:	18d2      	adds	r2, r2, r3
10008322:	4b0e      	ldr	r3, [pc, #56]	; (1000835c <i2c_read+0x174>)
10008324:	6859      	ldr	r1, [r3, #4]
10008326:	230f      	movs	r3, #15
10008328:	18fb      	adds	r3, r7, r3
1000832a:	781b      	ldrb	r3, [r3, #0]
1000832c:	18cb      	adds	r3, r1, r3
1000832e:	781b      	ldrb	r3, [r3, #0]
10008330:	7013      	strb	r3, [r2, #0]
            DBG_LOG("[i2c_read]  I2C TIMEOUT!!");
            i2c_master_send_stop(&i2c_master_mpu9250_instance);
            return -1;
        }
    }
    for (uint8_t i = 0; i < data_len; i++) {
10008332:	230f      	movs	r3, #15
10008334:	18fb      	adds	r3, r7, r3
10008336:	781a      	ldrb	r2, [r3, #0]
10008338:	230f      	movs	r3, #15
1000833a:	18fb      	adds	r3, r7, r3
1000833c:	3201      	adds	r2, #1
1000833e:	701a      	strb	r2, [r3, #0]
10008340:	230f      	movs	r3, #15
10008342:	18fa      	adds	r2, r7, r3
10008344:	1d7b      	adds	r3, r7, #5
10008346:	7812      	ldrb	r2, [r2, #0]
10008348:	781b      	ldrb	r3, [r3, #0]
1000834a:	429a      	cmp	r2, r3
1000834c:	d3e4      	bcc.n	10008318 <i2c_read+0x130>
        data[i] = i2c_rpacket.data[i];
    }
    return 0;
1000834e:	2300      	movs	r3, #0
}
10008350:	0018      	movs	r0, r3
10008352:	46bd      	mov	sp, r7
10008354:	b005      	add	sp, #20
10008356:	bd90      	pop	{r4, r7, pc}
10008358:	1001c218 	.word	0x1001c218
1000835c:	1001c1e8 	.word	0x1001c1e8
10008360:	1001c0aa 	.word	0x1001c0aa
10008364:	1001c2bc 	.word	0x1001c2bc
10008368:	1000dc91 	.word	0x1000dc91
1000836c:	000003e7 	.word	0x000003e7
10008370:	10019fe4 	.word	0x10019fe4
10008374:	10019095 	.word	0x10019095
10008378:	1001a004 	.word	0x1001a004
1000837c:	10018f75 	.word	0x10018f75
10008380:	1001c166 	.word	0x1001c166
10008384:	1000dbb9 	.word	0x1000dbb9
10008388:	1001a020 	.word	0x1001a020
1000838c:	1000d9c5 	.word	0x1000d9c5

10008390 <reg_int_cb>:
static inline int reg_int_cb(struct int_param_s *int_param)
{
10008390:	b580      	push	{r7, lr}
10008392:	b082      	sub	sp, #8
10008394:	af00      	add	r7, sp, #0
10008396:	6078      	str	r0, [r7, #4]
    sms_imu_register_callbacks();
10008398:	4b03      	ldr	r3, [pc, #12]	; (100083a8 <reg_int_cb+0x18>)
1000839a:	4798      	blx	r3
    return 0;
1000839c:	2300      	movs	r3, #0
}
1000839e:	0018      	movs	r0, r3
100083a0:	46bd      	mov	sp, r7
100083a2:	b002      	add	sp, #8
100083a4:	bd80      	pop	{r7, pc}
100083a6:	46c0      	nop			; (mov r8, r8)
100083a8:	1000aec5 	.word	0x1000aec5

100083ac <set_int_enable>:
*  interrupt is used.
*  @param[in]  enable      1 to enable interrupt.
*  @return     0 if successful.
*/
static int set_int_enable(unsigned char enable)
{
100083ac:	b590      	push	{r4, r7, lr}
100083ae:	b085      	sub	sp, #20
100083b0:	af00      	add	r7, sp, #0
100083b2:	0002      	movs	r2, r0
100083b4:	1dfb      	adds	r3, r7, #7
100083b6:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083b8:	4b2f      	ldr	r3, [pc, #188]	; (10008478 <set_int_enable+0xcc>)
100083ba:	2224      	movs	r2, #36	; 0x24
100083bc:	5c9b      	ldrb	r3, [r3, r2]
100083be:	2b00      	cmp	r3, #0
100083c0:	d022      	beq.n	10008408 <set_int_enable+0x5c>
        if (enable)
100083c2:	1dfb      	adds	r3, r7, #7
100083c4:	781b      	ldrb	r3, [r3, #0]
100083c6:	2b00      	cmp	r3, #0
100083c8:	d004      	beq.n	100083d4 <set_int_enable+0x28>
        tmp = BIT_DMP_INT_EN;
100083ca:	230f      	movs	r3, #15
100083cc:	18fb      	adds	r3, r7, r3
100083ce:	2202      	movs	r2, #2
100083d0:	701a      	strb	r2, [r3, #0]
100083d2:	e003      	b.n	100083dc <set_int_enable+0x30>
        else
        tmp = 0x00;
100083d4:	230f      	movs	r3, #15
100083d6:	18fb      	adds	r3, r7, r3
100083d8:	2200      	movs	r2, #0
100083da:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100083dc:	4b26      	ldr	r3, [pc, #152]	; (10008478 <set_int_enable+0xcc>)
100083de:	685b      	ldr	r3, [r3, #4]
100083e0:	7818      	ldrb	r0, [r3, #0]
100083e2:	4b25      	ldr	r3, [pc, #148]	; (10008478 <set_int_enable+0xcc>)
100083e4:	681b      	ldr	r3, [r3, #0]
100083e6:	7c59      	ldrb	r1, [r3, #17]
100083e8:	230f      	movs	r3, #15
100083ea:	18fb      	adds	r3, r7, r3
100083ec:	2201      	movs	r2, #1
100083ee:	4c23      	ldr	r4, [pc, #140]	; (1000847c <set_int_enable+0xd0>)
100083f0:	47a0      	blx	r4
100083f2:	1e03      	subs	r3, r0, #0
100083f4:	d002      	beq.n	100083fc <set_int_enable+0x50>
        return -1;
100083f6:	2301      	movs	r3, #1
100083f8:	425b      	negs	r3, r3
100083fa:	e039      	b.n	10008470 <set_int_enable+0xc4>
        st.chip_cfg.int_enable = tmp;
100083fc:	230f      	movs	r3, #15
100083fe:	18fb      	adds	r3, r7, r3
10008400:	781a      	ldrb	r2, [r3, #0]
10008402:	4b1d      	ldr	r3, [pc, #116]	; (10008478 <set_int_enable+0xcc>)
10008404:	745a      	strb	r2, [r3, #17]
10008406:	e032      	b.n	1000846e <set_int_enable+0xc2>
        } else {
        if (!st.chip_cfg.sensors)
10008408:	4b1b      	ldr	r3, [pc, #108]	; (10008478 <set_int_enable+0xcc>)
1000840a:	7a9b      	ldrb	r3, [r3, #10]
1000840c:	2b00      	cmp	r3, #0
1000840e:	d102      	bne.n	10008416 <set_int_enable+0x6a>
        return -1;
10008410:	2301      	movs	r3, #1
10008412:	425b      	negs	r3, r3
10008414:	e02c      	b.n	10008470 <set_int_enable+0xc4>
        if (enable && st.chip_cfg.int_enable)
10008416:	1dfb      	adds	r3, r7, #7
10008418:	781b      	ldrb	r3, [r3, #0]
1000841a:	2b00      	cmp	r3, #0
1000841c:	d005      	beq.n	1000842a <set_int_enable+0x7e>
1000841e:	4b16      	ldr	r3, [pc, #88]	; (10008478 <set_int_enable+0xcc>)
10008420:	7c5b      	ldrb	r3, [r3, #17]
10008422:	2b00      	cmp	r3, #0
10008424:	d001      	beq.n	1000842a <set_int_enable+0x7e>
        return 0;
10008426:	2300      	movs	r3, #0
10008428:	e022      	b.n	10008470 <set_int_enable+0xc4>
        if (enable)
1000842a:	1dfb      	adds	r3, r7, #7
1000842c:	781b      	ldrb	r3, [r3, #0]
1000842e:	2b00      	cmp	r3, #0
10008430:	d004      	beq.n	1000843c <set_int_enable+0x90>
        tmp = BIT_DATA_RDY_EN;
10008432:	230f      	movs	r3, #15
10008434:	18fb      	adds	r3, r7, r3
10008436:	2201      	movs	r2, #1
10008438:	701a      	strb	r2, [r3, #0]
1000843a:	e003      	b.n	10008444 <set_int_enable+0x98>
        else
        tmp = 0x00;
1000843c:	230f      	movs	r3, #15
1000843e:	18fb      	adds	r3, r7, r3
10008440:	2200      	movs	r2, #0
10008442:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008444:	4b0c      	ldr	r3, [pc, #48]	; (10008478 <set_int_enable+0xcc>)
10008446:	685b      	ldr	r3, [r3, #4]
10008448:	7818      	ldrb	r0, [r3, #0]
1000844a:	4b0b      	ldr	r3, [pc, #44]	; (10008478 <set_int_enable+0xcc>)
1000844c:	681b      	ldr	r3, [r3, #0]
1000844e:	7c59      	ldrb	r1, [r3, #17]
10008450:	230f      	movs	r3, #15
10008452:	18fb      	adds	r3, r7, r3
10008454:	2201      	movs	r2, #1
10008456:	4c09      	ldr	r4, [pc, #36]	; (1000847c <set_int_enable+0xd0>)
10008458:	47a0      	blx	r4
1000845a:	1e03      	subs	r3, r0, #0
1000845c:	d002      	beq.n	10008464 <set_int_enable+0xb8>
        return -1;
1000845e:	2301      	movs	r3, #1
10008460:	425b      	negs	r3, r3
10008462:	e005      	b.n	10008470 <set_int_enable+0xc4>
        st.chip_cfg.int_enable = tmp;
10008464:	230f      	movs	r3, #15
10008466:	18fb      	adds	r3, r7, r3
10008468:	781a      	ldrb	r2, [r3, #0]
1000846a:	4b03      	ldr	r3, [pc, #12]	; (10008478 <set_int_enable+0xcc>)
1000846c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
1000846e:	2300      	movs	r3, #0
}
10008470:	0018      	movs	r0, r3
10008472:	46bd      	mov	sp, r7
10008474:	b005      	add	sp, #20
10008476:	bd90      	pop	{r4, r7, pc}
10008478:	1001b844 	.word	0x1001b844
1000847c:	100080d5 	.word	0x100080d5

10008480 <mpu_init>:
*  Data ready interrupt: Disabled, active HIGH, unlatched.
*  @param[in]  int_param   Platform-specific parameters to interrupt API.
*  @return     0 if successful.
*/
int mpu_init(struct int_param_s *int_param)
{
10008480:	b590      	push	{r4, r7, lr}
10008482:	b085      	sub	sp, #20
10008484:	af00      	add	r7, sp, #0
10008486:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008488:	2308      	movs	r3, #8
1000848a:	18fb      	adds	r3, r7, r3
1000848c:	2280      	movs	r2, #128	; 0x80
1000848e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008490:	4b5e      	ldr	r3, [pc, #376]	; (1000860c <mpu_init+0x18c>)
10008492:	685b      	ldr	r3, [r3, #4]
10008494:	7818      	ldrb	r0, [r3, #0]
10008496:	4b5d      	ldr	r3, [pc, #372]	; (1000860c <mpu_init+0x18c>)
10008498:	681b      	ldr	r3, [r3, #0]
1000849a:	7d59      	ldrb	r1, [r3, #21]
1000849c:	2308      	movs	r3, #8
1000849e:	18fb      	adds	r3, r7, r3
100084a0:	2201      	movs	r2, #1
100084a2:	4c5b      	ldr	r4, [pc, #364]	; (10008610 <mpu_init+0x190>)
100084a4:	47a0      	blx	r4
100084a6:	1e03      	subs	r3, r0, #0
100084a8:	d002      	beq.n	100084b0 <mpu_init+0x30>
    return -1;
100084aa:	2301      	movs	r3, #1
100084ac:	425b      	negs	r3, r3
100084ae:	e0a9      	b.n	10008604 <mpu_init+0x184>
    delay_ms(100);
100084b0:	2064      	movs	r0, #100	; 0x64
100084b2:	4b58      	ldr	r3, [pc, #352]	; (10008614 <mpu_init+0x194>)
100084b4:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100084b6:	2308      	movs	r3, #8
100084b8:	18fb      	adds	r3, r7, r3
100084ba:	2200      	movs	r2, #0
100084bc:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100084be:	4b53      	ldr	r3, [pc, #332]	; (1000860c <mpu_init+0x18c>)
100084c0:	685b      	ldr	r3, [r3, #4]
100084c2:	7818      	ldrb	r0, [r3, #0]
100084c4:	4b51      	ldr	r3, [pc, #324]	; (1000860c <mpu_init+0x18c>)
100084c6:	681b      	ldr	r3, [r3, #0]
100084c8:	7d59      	ldrb	r1, [r3, #21]
100084ca:	2308      	movs	r3, #8
100084cc:	18fb      	adds	r3, r7, r3
100084ce:	2201      	movs	r2, #1
100084d0:	4c4f      	ldr	r4, [pc, #316]	; (10008610 <mpu_init+0x190>)
100084d2:	47a0      	blx	r4
100084d4:	1e03      	subs	r3, r0, #0
100084d6:	d002      	beq.n	100084de <mpu_init+0x5e>
    return -1;
100084d8:	2301      	movs	r3, #1
100084da:	425b      	negs	r3, r3
100084dc:	e092      	b.n	10008604 <mpu_init+0x184>

    st.chip_cfg.accel_half = 0;
100084de:	4b4b      	ldr	r3, [pc, #300]	; (1000860c <mpu_init+0x18c>)
100084e0:	2200      	movs	r2, #0
100084e2:	74da      	strb	r2, [r3, #19]

    #ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
100084e4:	2308      	movs	r3, #8
100084e6:	18fb      	adds	r3, r7, r3
100084e8:	2248      	movs	r2, #72	; 0x48
100084ea:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100084ec:	4b47      	ldr	r3, [pc, #284]	; (1000860c <mpu_init+0x18c>)
100084ee:	685b      	ldr	r3, [r3, #4]
100084f0:	7818      	ldrb	r0, [r3, #0]
100084f2:	4b46      	ldr	r3, [pc, #280]	; (1000860c <mpu_init+0x18c>)
100084f4:	681b      	ldr	r3, [r3, #0]
100084f6:	7a19      	ldrb	r1, [r3, #8]
100084f8:	2308      	movs	r3, #8
100084fa:	18fb      	adds	r3, r7, r3
100084fc:	2201      	movs	r2, #1
100084fe:	4c44      	ldr	r4, [pc, #272]	; (10008610 <mpu_init+0x190>)
10008500:	47a0      	blx	r4
10008502:	1e03      	subs	r3, r0, #0
10008504:	d002      	beq.n	1000850c <mpu_init+0x8c>
    return -1;
10008506:	2301      	movs	r3, #1
10008508:	425b      	negs	r3, r3
1000850a:	e07b      	b.n	10008604 <mpu_init+0x184>
    #endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1000850c:	4b3f      	ldr	r3, [pc, #252]	; (1000860c <mpu_init+0x18c>)
1000850e:	22ff      	movs	r2, #255	; 0xff
10008510:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10008512:	4b3e      	ldr	r3, [pc, #248]	; (1000860c <mpu_init+0x18c>)
10008514:	22ff      	movs	r2, #255	; 0xff
10008516:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10008518:	4b3c      	ldr	r3, [pc, #240]	; (1000860c <mpu_init+0x18c>)
1000851a:	22ff      	movs	r2, #255	; 0xff
1000851c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
1000851e:	4b3b      	ldr	r3, [pc, #236]	; (1000860c <mpu_init+0x18c>)
10008520:	22ff      	movs	r2, #255	; 0xff
10008522:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10008524:	4b39      	ldr	r3, [pc, #228]	; (1000860c <mpu_init+0x18c>)
10008526:	2201      	movs	r2, #1
10008528:	4252      	negs	r2, r2
1000852a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000852c:	4b37      	ldr	r3, [pc, #220]	; (1000860c <mpu_init+0x18c>)
1000852e:	22ff      	movs	r2, #255	; 0xff
10008530:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10008532:	4b36      	ldr	r3, [pc, #216]	; (1000860c <mpu_init+0x18c>)
10008534:	22ff      	movs	r2, #255	; 0xff
10008536:	749a      	strb	r2, [r3, #18]
    #ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10008538:	4b34      	ldr	r3, [pc, #208]	; (1000860c <mpu_init+0x18c>)
1000853a:	2201      	movs	r2, #1
1000853c:	4252      	negs	r2, r2
1000853e:	851a      	strh	r2, [r3, #40]	; 0x28
    #endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10008540:	4b32      	ldr	r3, [pc, #200]	; (1000860c <mpu_init+0x18c>)
10008542:	2201      	movs	r2, #1
10008544:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0;
10008546:	4b31      	ldr	r3, [pc, #196]	; (1000860c <mpu_init+0x18c>)
10008548:	2222      	movs	r2, #34	; 0x22
1000854a:	2100      	movs	r1, #0
1000854c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.latched_int = 0;
1000854e:	4b2f      	ldr	r3, [pc, #188]	; (1000860c <mpu_init+0x18c>)
10008550:	2223      	movs	r2, #35	; 0x23
10008552:	2100      	movs	r1, #0
10008554:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.int_motion_only = 0;
10008556:	4b2d      	ldr	r3, [pc, #180]	; (1000860c <mpu_init+0x18c>)
10008558:	2200      	movs	r2, #0
1000855a:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000855c:	4b2b      	ldr	r3, [pc, #172]	; (1000860c <mpu_init+0x18c>)
1000855e:	2200      	movs	r2, #0
10008560:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008562:	4b2d      	ldr	r3, [pc, #180]	; (10008618 <mpu_init+0x198>)
10008564:	220c      	movs	r2, #12
10008566:	2100      	movs	r1, #0
10008568:	0018      	movs	r0, r3
1000856a:	4b2c      	ldr	r3, [pc, #176]	; (1000861c <mpu_init+0x19c>)
1000856c:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
1000856e:	4b27      	ldr	r3, [pc, #156]	; (1000860c <mpu_init+0x18c>)
10008570:	2224      	movs	r2, #36	; 0x24
10008572:	2100      	movs	r1, #0
10008574:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_loaded = 0;
10008576:	4b25      	ldr	r3, [pc, #148]	; (1000860c <mpu_init+0x18c>)
10008578:	2225      	movs	r2, #37	; 0x25
1000857a:	2100      	movs	r1, #0
1000857c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_sample_rate = 0;
1000857e:	4b23      	ldr	r3, [pc, #140]	; (1000860c <mpu_init+0x18c>)
10008580:	2200      	movs	r2, #0
10008582:	84da      	strh	r2, [r3, #38]	; 0x26
    mpu_set_int_level(0); // 0 --> active low disabled => active high
10008584:	2000      	movs	r0, #0
10008586:	4b26      	ldr	r3, [pc, #152]	; (10008620 <mpu_init+0x1a0>)
10008588:	4798      	blx	r3

    if (mpu_set_gyro_fsr(250)) return -1; // 1B
1000858a:	20fa      	movs	r0, #250	; 0xfa
1000858c:	4b25      	ldr	r3, [pc, #148]	; (10008624 <mpu_init+0x1a4>)
1000858e:	4798      	blx	r3
10008590:	1e03      	subs	r3, r0, #0
10008592:	d002      	beq.n	1000859a <mpu_init+0x11a>
10008594:	2301      	movs	r3, #1
10008596:	425b      	negs	r3, r3
10008598:	e034      	b.n	10008604 <mpu_init+0x184>
    if (mpu_set_accel_fsr(4)) return -1; // 1B
1000859a:	2004      	movs	r0, #4
1000859c:	4b22      	ldr	r3, [pc, #136]	; (10008628 <mpu_init+0x1a8>)
1000859e:	4798      	blx	r3
100085a0:	1e03      	subs	r3, r0, #0
100085a2:	d002      	beq.n	100085aa <mpu_init+0x12a>
100085a4:	2301      	movs	r3, #1
100085a6:	425b      	negs	r3, r3
100085a8:	e02c      	b.n	10008604 <mpu_init+0x184>
    if (mpu_set_lpf(42)) return -1; // 1B
100085aa:	202a      	movs	r0, #42	; 0x2a
100085ac:	4b1f      	ldr	r3, [pc, #124]	; (1000862c <mpu_init+0x1ac>)
100085ae:	4798      	blx	r3
100085b0:	1e03      	subs	r3, r0, #0
100085b2:	d002      	beq.n	100085ba <mpu_init+0x13a>
100085b4:	2301      	movs	r3, #1
100085b6:	425b      	negs	r3, r3
100085b8:	e024      	b.n	10008604 <mpu_init+0x184>
    if (mpu_set_sample_rate(50)) return -1;
100085ba:	2032      	movs	r0, #50	; 0x32
100085bc:	4b1c      	ldr	r3, [pc, #112]	; (10008630 <mpu_init+0x1b0>)
100085be:	4798      	blx	r3
100085c0:	1e03      	subs	r3, r0, #0
100085c2:	d002      	beq.n	100085ca <mpu_init+0x14a>
100085c4:	2301      	movs	r3, #1
100085c6:	425b      	negs	r3, r3
100085c8:	e01c      	b.n	10008604 <mpu_init+0x184>
    if (mpu_configure_fifo(0)) return -1;
100085ca:	2000      	movs	r0, #0
100085cc:	4b19      	ldr	r3, [pc, #100]	; (10008634 <mpu_init+0x1b4>)
100085ce:	4798      	blx	r3
100085d0:	1e03      	subs	r3, r0, #0
100085d2:	d002      	beq.n	100085da <mpu_init+0x15a>
100085d4:	2301      	movs	r3, #1
100085d6:	425b      	negs	r3, r3
100085d8:	e014      	b.n	10008604 <mpu_init+0x184>

    #ifndef EMPL_TARGET_STM32F4
    if (int_param)
100085da:	687b      	ldr	r3, [r7, #4]
100085dc:	2b00      	cmp	r3, #0
100085de:	d003      	beq.n	100085e8 <mpu_init+0x168>
    reg_int_cb(int_param);
100085e0:	687b      	ldr	r3, [r7, #4]
100085e2:	0018      	movs	r0, r3
100085e4:	4b14      	ldr	r3, [pc, #80]	; (10008638 <mpu_init+0x1b8>)
100085e6:	4798      	blx	r3
    #endif

    #ifdef AK89xx_SECONDARY
    setup_compass();
100085e8:	4b14      	ldr	r3, [pc, #80]	; (1000863c <mpu_init+0x1bc>)
100085ea:	4798      	blx	r3
    if (mpu_set_compass_sample_rate(10)) return -1;
100085ec:	200a      	movs	r0, #10
100085ee:	4b14      	ldr	r3, [pc, #80]	; (10008640 <mpu_init+0x1c0>)
100085f0:	4798      	blx	r3
100085f2:	1e03      	subs	r3, r0, #0
100085f4:	d002      	beq.n	100085fc <mpu_init+0x17c>
100085f6:	2301      	movs	r3, #1
100085f8:	425b      	negs	r3, r3
100085fa:	e003      	b.n	10008604 <mpu_init+0x184>
    #else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0)) return -1;
    #endif

    mpu_set_sensors(0);
100085fc:	2000      	movs	r0, #0
100085fe:	4b11      	ldr	r3, [pc, #68]	; (10008644 <mpu_init+0x1c4>)
10008600:	4798      	blx	r3
    
    return 0;
10008602:	2300      	movs	r3, #0
}
10008604:	0018      	movs	r0, r3
10008606:	46bd      	mov	sp, r7
10008608:	b005      	add	sp, #20
1000860a:	bd90      	pop	{r4, r7, pc}
1000860c:	1001b844 	.word	0x1001b844
10008610:	100080d5 	.word	0x100080d5
10008614:	1000c4b9 	.word	0x1000c4b9
10008618:	1001b85a 	.word	0x1001b85a
1000861c:	10018e2d 	.word	0x10018e2d
10008620:	10009505 	.word	0x10009505
10008624:	10008a4d 	.word	0x10008a4d
10008628:	10008b85 	.word	0x10008b85
1000862c:	10008c3d 	.word	0x10008c3d
10008630:	10008d39 	.word	0x10008d39
10008634:	10008ef5 	.word	0x10008ef5
10008638:	10008391 	.word	0x10008391
1000863c:	10009759 	.word	0x10009759
10008640:	10008e51 	.word	0x10008e51
10008644:	10008fb5 	.word	0x10008fb5

10008648 <mpu_lp_accel_mode>:
*  @param[in]  rate        Minimum sampling rate, or zero to disable LP
*                          accel mode.
*  @return     0 if successful.
*/
int mpu_lp_accel_mode(unsigned short rate)
{
10008648:	b590      	push	{r4, r7, lr}
1000864a:	b085      	sub	sp, #20
1000864c:	af00      	add	r7, sp, #0
1000864e:	0002      	movs	r2, r0
10008650:	1dbb      	adds	r3, r7, #6
10008652:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (rate > 40)
10008654:	1dbb      	adds	r3, r7, #6
10008656:	881b      	ldrh	r3, [r3, #0]
10008658:	2b28      	cmp	r3, #40	; 0x28
1000865a:	d902      	bls.n	10008662 <mpu_lp_accel_mode+0x1a>
    return -1;
1000865c:	2301      	movs	r3, #1
1000865e:	425b      	negs	r3, r3
10008660:	e0ae      	b.n	100087c0 <mpu_lp_accel_mode+0x178>

    if (!rate) {
10008662:	1dbb      	adds	r3, r7, #6
10008664:	881b      	ldrh	r3, [r3, #0]
10008666:	2b00      	cmp	r3, #0
10008668:	d11f      	bne.n	100086aa <mpu_lp_accel_mode+0x62>
        mpu_set_int_latched(0);
1000866a:	2000      	movs	r0, #0
1000866c:	4b56      	ldr	r3, [pc, #344]	; (100087c8 <mpu_lp_accel_mode+0x180>)
1000866e:	4798      	blx	r3
        tmp[0] = 0;
10008670:	230c      	movs	r3, #12
10008672:	18fb      	adds	r3, r7, r3
10008674:	2200      	movs	r2, #0
10008676:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008678:	230c      	movs	r3, #12
1000867a:	18fb      	adds	r3, r7, r3
1000867c:	2207      	movs	r2, #7
1000867e:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008680:	4b52      	ldr	r3, [pc, #328]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008682:	685b      	ldr	r3, [r3, #4]
10008684:	7818      	ldrb	r0, [r3, #0]
10008686:	4b51      	ldr	r3, [pc, #324]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008688:	681b      	ldr	r3, [r3, #0]
1000868a:	7d59      	ldrb	r1, [r3, #21]
1000868c:	230c      	movs	r3, #12
1000868e:	18fb      	adds	r3, r7, r3
10008690:	2202      	movs	r2, #2
10008692:	4c4f      	ldr	r4, [pc, #316]	; (100087d0 <mpu_lp_accel_mode+0x188>)
10008694:	47a0      	blx	r4
10008696:	1e03      	subs	r3, r0, #0
10008698:	d002      	beq.n	100086a0 <mpu_lp_accel_mode+0x58>
        return -1;
1000869a:	2301      	movs	r3, #1
1000869c:	425b      	negs	r3, r3
1000869e:	e08f      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
        st.chip_cfg.lp_accel_mode = 0;
100086a0:	4b4a      	ldr	r3, [pc, #296]	; (100087cc <mpu_lp_accel_mode+0x184>)
100086a2:	2200      	movs	r2, #0
100086a4:	751a      	strb	r2, [r3, #20]
        return 0;
100086a6:	2300      	movs	r3, #0
100086a8:	e08a      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
    * it gets a chance to deassert the interrupt pin; therefore, we shift this
    * responsibility over to the MCU.
    *
    * Any register read will clear the interrupt.
    */
    mpu_set_int_latched(1);
100086aa:	2001      	movs	r0, #1
100086ac:	4b46      	ldr	r3, [pc, #280]	; (100087c8 <mpu_lp_accel_mode+0x180>)
100086ae:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
    return -1;
    #elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
100086b0:	1dbb      	adds	r3, r7, #6
100086b2:	881b      	ldrh	r3, [r3, #0]
100086b4:	2b01      	cmp	r3, #1
100086b6:	d104      	bne.n	100086c2 <mpu_lp_accel_mode+0x7a>
    tmp[0] = INV_LPA_1_25HZ;
100086b8:	230c      	movs	r3, #12
100086ba:	18fb      	adds	r3, r7, r3
100086bc:	2202      	movs	r2, #2
100086be:	701a      	strb	r2, [r3, #0]
100086c0:	e04d      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate == 2)
100086c2:	1dbb      	adds	r3, r7, #6
100086c4:	881b      	ldrh	r3, [r3, #0]
100086c6:	2b02      	cmp	r3, #2
100086c8:	d104      	bne.n	100086d4 <mpu_lp_accel_mode+0x8c>
    tmp[0] = INV_LPA_2_5HZ;
100086ca:	230c      	movs	r3, #12
100086cc:	18fb      	adds	r3, r7, r3
100086ce:	2203      	movs	r2, #3
100086d0:	701a      	strb	r2, [r3, #0]
100086d2:	e044      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 5)
100086d4:	1dbb      	adds	r3, r7, #6
100086d6:	881b      	ldrh	r3, [r3, #0]
100086d8:	2b05      	cmp	r3, #5
100086da:	d804      	bhi.n	100086e6 <mpu_lp_accel_mode+0x9e>
    tmp[0] = INV_LPA_5HZ;
100086dc:	230c      	movs	r3, #12
100086de:	18fb      	adds	r3, r7, r3
100086e0:	2204      	movs	r2, #4
100086e2:	701a      	strb	r2, [r3, #0]
100086e4:	e03b      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 10)
100086e6:	1dbb      	adds	r3, r7, #6
100086e8:	881b      	ldrh	r3, [r3, #0]
100086ea:	2b0a      	cmp	r3, #10
100086ec:	d804      	bhi.n	100086f8 <mpu_lp_accel_mode+0xb0>
    tmp[0] = INV_LPA_10HZ;
100086ee:	230c      	movs	r3, #12
100086f0:	18fb      	adds	r3, r7, r3
100086f2:	2205      	movs	r2, #5
100086f4:	701a      	strb	r2, [r3, #0]
100086f6:	e032      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 20)
100086f8:	1dbb      	adds	r3, r7, #6
100086fa:	881b      	ldrh	r3, [r3, #0]
100086fc:	2b14      	cmp	r3, #20
100086fe:	d804      	bhi.n	1000870a <mpu_lp_accel_mode+0xc2>
    tmp[0] = INV_LPA_20HZ;
10008700:	230c      	movs	r3, #12
10008702:	18fb      	adds	r3, r7, r3
10008704:	2206      	movs	r2, #6
10008706:	701a      	strb	r2, [r3, #0]
10008708:	e029      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 40)
1000870a:	1dbb      	adds	r3, r7, #6
1000870c:	881b      	ldrh	r3, [r3, #0]
1000870e:	2b28      	cmp	r3, #40	; 0x28
10008710:	d804      	bhi.n	1000871c <mpu_lp_accel_mode+0xd4>
    tmp[0] = INV_LPA_40HZ;
10008712:	230c      	movs	r3, #12
10008714:	18fb      	adds	r3, r7, r3
10008716:	2207      	movs	r2, #7
10008718:	701a      	strb	r2, [r3, #0]
1000871a:	e020      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 80)
1000871c:	1dbb      	adds	r3, r7, #6
1000871e:	881b      	ldrh	r3, [r3, #0]
10008720:	2b50      	cmp	r3, #80	; 0x50
10008722:	d804      	bhi.n	1000872e <mpu_lp_accel_mode+0xe6>
    tmp[0] = INV_LPA_80HZ;
10008724:	230c      	movs	r3, #12
10008726:	18fb      	adds	r3, r7, r3
10008728:	2208      	movs	r2, #8
1000872a:	701a      	strb	r2, [r3, #0]
1000872c:	e017      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 160)
1000872e:	1dbb      	adds	r3, r7, #6
10008730:	881b      	ldrh	r3, [r3, #0]
10008732:	2ba0      	cmp	r3, #160	; 0xa0
10008734:	d804      	bhi.n	10008740 <mpu_lp_accel_mode+0xf8>
    tmp[0] = INV_LPA_160HZ;
10008736:	230c      	movs	r3, #12
10008738:	18fb      	adds	r3, r7, r3
1000873a:	2209      	movs	r2, #9
1000873c:	701a      	strb	r2, [r3, #0]
1000873e:	e00e      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else if (rate <= 320)
10008740:	1dbb      	adds	r3, r7, #6
10008742:	881a      	ldrh	r2, [r3, #0]
10008744:	23a0      	movs	r3, #160	; 0xa0
10008746:	005b      	lsls	r3, r3, #1
10008748:	429a      	cmp	r2, r3
1000874a:	d804      	bhi.n	10008756 <mpu_lp_accel_mode+0x10e>
    tmp[0] = INV_LPA_320HZ;
1000874c:	230c      	movs	r3, #12
1000874e:	18fb      	adds	r3, r7, r3
10008750:	220a      	movs	r2, #10
10008752:	701a      	strb	r2, [r3, #0]
10008754:	e003      	b.n	1000875e <mpu_lp_accel_mode+0x116>
    else
    tmp[0] = INV_LPA_640HZ;
10008756:	230c      	movs	r3, #12
10008758:	18fb      	adds	r3, r7, r3
1000875a:	220b      	movs	r2, #11
1000875c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
1000875e:	4b1b      	ldr	r3, [pc, #108]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008760:	685b      	ldr	r3, [r3, #4]
10008762:	7818      	ldrb	r0, [r3, #0]
10008764:	4b19      	ldr	r3, [pc, #100]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008766:	681b      	ldr	r3, [r3, #0]
10008768:	7a59      	ldrb	r1, [r3, #9]
1000876a:	230c      	movs	r3, #12
1000876c:	18fb      	adds	r3, r7, r3
1000876e:	2201      	movs	r2, #1
10008770:	4c17      	ldr	r4, [pc, #92]	; (100087d0 <mpu_lp_accel_mode+0x188>)
10008772:	47a0      	blx	r4
10008774:	1e03      	subs	r3, r0, #0
10008776:	d002      	beq.n	1000877e <mpu_lp_accel_mode+0x136>
    return -1;
10008778:	2301      	movs	r3, #1
1000877a:	425b      	negs	r3, r3
1000877c:	e020      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
    tmp[0] = BIT_LPA_CYCLE;
1000877e:	230c      	movs	r3, #12
10008780:	18fb      	adds	r3, r7, r3
10008782:	2220      	movs	r2, #32
10008784:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008786:	4b11      	ldr	r3, [pc, #68]	; (100087cc <mpu_lp_accel_mode+0x184>)
10008788:	685b      	ldr	r3, [r3, #4]
1000878a:	7818      	ldrb	r0, [r3, #0]
1000878c:	4b0f      	ldr	r3, [pc, #60]	; (100087cc <mpu_lp_accel_mode+0x184>)
1000878e:	681b      	ldr	r3, [r3, #0]
10008790:	7d59      	ldrb	r1, [r3, #21]
10008792:	230c      	movs	r3, #12
10008794:	18fb      	adds	r3, r7, r3
10008796:	2201      	movs	r2, #1
10008798:	4c0d      	ldr	r4, [pc, #52]	; (100087d0 <mpu_lp_accel_mode+0x188>)
1000879a:	47a0      	blx	r4
1000879c:	1e03      	subs	r3, r0, #0
1000879e:	d002      	beq.n	100087a6 <mpu_lp_accel_mode+0x15e>
    return -1;
100087a0:	2301      	movs	r3, #1
100087a2:	425b      	negs	r3, r3
100087a4:	e00c      	b.n	100087c0 <mpu_lp_accel_mode+0x178>
    #endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
100087a6:	4b09      	ldr	r3, [pc, #36]	; (100087cc <mpu_lp_accel_mode+0x184>)
100087a8:	2208      	movs	r2, #8
100087aa:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
100087ac:	4b07      	ldr	r3, [pc, #28]	; (100087cc <mpu_lp_accel_mode+0x184>)
100087ae:	2200      	movs	r2, #0
100087b0:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
100087b2:	4b06      	ldr	r3, [pc, #24]	; (100087cc <mpu_lp_accel_mode+0x184>)
100087b4:	2201      	movs	r2, #1
100087b6:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
100087b8:	2000      	movs	r0, #0
100087ba:	4b06      	ldr	r3, [pc, #24]	; (100087d4 <mpu_lp_accel_mode+0x18c>)
100087bc:	4798      	blx	r3

    return 0;
100087be:	2300      	movs	r3, #0
}
100087c0:	0018      	movs	r0, r3
100087c2:	46bd      	mov	sp, r7
100087c4:	b005      	add	sp, #20
100087c6:	bd90      	pop	{r4, r7, pc}
100087c8:	10009529 	.word	0x10009529
100087cc:	1001b844 	.word	0x1001b844
100087d0:	100080d5 	.word	0x100080d5
100087d4:	10008ef5 	.word	0x10008ef5

100087d8 <mpu_reset_fifo>:
/**
*  @brief  Reset FIFO read/write pointers.
*  @return 0 if successful.
*/
int mpu_reset_fifo(void)
{
100087d8:	b590      	push	{r4, r7, lr}
100087da:	b083      	sub	sp, #12
100087dc:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087de:	4b7f      	ldr	r3, [pc, #508]	; (100089dc <mpu_reset_fifo+0x204>)
100087e0:	7a9b      	ldrb	r3, [r3, #10]
100087e2:	2b00      	cmp	r3, #0
100087e4:	d102      	bne.n	100087ec <mpu_reset_fifo+0x14>
    return -1;
100087e6:	2301      	movs	r3, #1
100087e8:	425b      	negs	r3, r3
100087ea:	e0f3      	b.n	100089d4 <mpu_reset_fifo+0x1fc>

    data = 0;
100087ec:	1dfb      	adds	r3, r7, #7
100087ee:	2200      	movs	r2, #0
100087f0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100087f2:	4b7a      	ldr	r3, [pc, #488]	; (100089dc <mpu_reset_fifo+0x204>)
100087f4:	685b      	ldr	r3, [r3, #4]
100087f6:	7818      	ldrb	r0, [r3, #0]
100087f8:	4b78      	ldr	r3, [pc, #480]	; (100089dc <mpu_reset_fifo+0x204>)
100087fa:	681b      	ldr	r3, [r3, #0]
100087fc:	7c59      	ldrb	r1, [r3, #17]
100087fe:	1dfb      	adds	r3, r7, #7
10008800:	2201      	movs	r2, #1
10008802:	4c77      	ldr	r4, [pc, #476]	; (100089e0 <mpu_reset_fifo+0x208>)
10008804:	47a0      	blx	r4
10008806:	1e03      	subs	r3, r0, #0
10008808:	d002      	beq.n	10008810 <mpu_reset_fifo+0x38>
    return -1;
1000880a:	2301      	movs	r3, #1
1000880c:	425b      	negs	r3, r3
1000880e:	e0e1      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008810:	4b72      	ldr	r3, [pc, #456]	; (100089dc <mpu_reset_fifo+0x204>)
10008812:	685b      	ldr	r3, [r3, #4]
10008814:	7818      	ldrb	r0, [r3, #0]
10008816:	4b71      	ldr	r3, [pc, #452]	; (100089dc <mpu_reset_fifo+0x204>)
10008818:	681b      	ldr	r3, [r3, #0]
1000881a:	7959      	ldrb	r1, [r3, #5]
1000881c:	1dfb      	adds	r3, r7, #7
1000881e:	2201      	movs	r2, #1
10008820:	4c6f      	ldr	r4, [pc, #444]	; (100089e0 <mpu_reset_fifo+0x208>)
10008822:	47a0      	blx	r4
10008824:	1e03      	subs	r3, r0, #0
10008826:	d002      	beq.n	1000882e <mpu_reset_fifo+0x56>
    return -1;
10008828:	2301      	movs	r3, #1
1000882a:	425b      	negs	r3, r3
1000882c:	e0d2      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000882e:	4b6b      	ldr	r3, [pc, #428]	; (100089dc <mpu_reset_fifo+0x204>)
10008830:	685b      	ldr	r3, [r3, #4]
10008832:	7818      	ldrb	r0, [r3, #0]
10008834:	4b69      	ldr	r3, [pc, #420]	; (100089dc <mpu_reset_fifo+0x204>)
10008836:	681b      	ldr	r3, [r3, #0]
10008838:	7919      	ldrb	r1, [r3, #4]
1000883a:	1dfb      	adds	r3, r7, #7
1000883c:	2201      	movs	r2, #1
1000883e:	4c68      	ldr	r4, [pc, #416]	; (100089e0 <mpu_reset_fifo+0x208>)
10008840:	47a0      	blx	r4
10008842:	1e03      	subs	r3, r0, #0
10008844:	d002      	beq.n	1000884c <mpu_reset_fifo+0x74>
    return -1;
10008846:	2301      	movs	r3, #1
10008848:	425b      	negs	r3, r3
1000884a:	e0c3      	b.n	100089d4 <mpu_reset_fifo+0x1fc>

    if (st.chip_cfg.dmp_on) {
1000884c:	4b63      	ldr	r3, [pc, #396]	; (100089dc <mpu_reset_fifo+0x204>)
1000884e:	2224      	movs	r2, #36	; 0x24
10008850:	5c9b      	ldrb	r3, [r3, r2]
10008852:	2b00      	cmp	r3, #0
10008854:	d05f      	beq.n	10008916 <mpu_reset_fifo+0x13e>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008856:	1dfb      	adds	r3, r7, #7
10008858:	220c      	movs	r2, #12
1000885a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000885c:	4b5f      	ldr	r3, [pc, #380]	; (100089dc <mpu_reset_fifo+0x204>)
1000885e:	685b      	ldr	r3, [r3, #4]
10008860:	7818      	ldrb	r0, [r3, #0]
10008862:	4b5e      	ldr	r3, [pc, #376]	; (100089dc <mpu_reset_fifo+0x204>)
10008864:	681b      	ldr	r3, [r3, #0]
10008866:	7919      	ldrb	r1, [r3, #4]
10008868:	1dfb      	adds	r3, r7, #7
1000886a:	2201      	movs	r2, #1
1000886c:	4c5c      	ldr	r4, [pc, #368]	; (100089e0 <mpu_reset_fifo+0x208>)
1000886e:	47a0      	blx	r4
10008870:	1e03      	subs	r3, r0, #0
10008872:	d002      	beq.n	1000887a <mpu_reset_fifo+0xa2>
        return -1;
10008874:	2301      	movs	r3, #1
10008876:	425b      	negs	r3, r3
10008878:	e0ac      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        delay_ms(50);
1000887a:	2032      	movs	r0, #50	; 0x32
1000887c:	4b59      	ldr	r3, [pc, #356]	; (100089e4 <mpu_reset_fifo+0x20c>)
1000887e:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008880:	1dfb      	adds	r3, r7, #7
10008882:	22c0      	movs	r2, #192	; 0xc0
10008884:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008886:	4b55      	ldr	r3, [pc, #340]	; (100089dc <mpu_reset_fifo+0x204>)
10008888:	7a9b      	ldrb	r3, [r3, #10]
1000888a:	001a      	movs	r2, r3
1000888c:	2301      	movs	r3, #1
1000888e:	4013      	ands	r3, r2
10008890:	d006      	beq.n	100088a0 <mpu_reset_fifo+0xc8>
        data |= BIT_AUX_IF_EN;
10008892:	1dfb      	adds	r3, r7, #7
10008894:	781b      	ldrb	r3, [r3, #0]
10008896:	2220      	movs	r2, #32
10008898:	4313      	orrs	r3, r2
1000889a:	b2da      	uxtb	r2, r3
1000889c:	1dfb      	adds	r3, r7, #7
1000889e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100088a0:	4b4e      	ldr	r3, [pc, #312]	; (100089dc <mpu_reset_fifo+0x204>)
100088a2:	685b      	ldr	r3, [r3, #4]
100088a4:	7818      	ldrb	r0, [r3, #0]
100088a6:	4b4d      	ldr	r3, [pc, #308]	; (100089dc <mpu_reset_fifo+0x204>)
100088a8:	681b      	ldr	r3, [r3, #0]
100088aa:	7919      	ldrb	r1, [r3, #4]
100088ac:	1dfb      	adds	r3, r7, #7
100088ae:	2201      	movs	r2, #1
100088b0:	4c4b      	ldr	r4, [pc, #300]	; (100089e0 <mpu_reset_fifo+0x208>)
100088b2:	47a0      	blx	r4
100088b4:	1e03      	subs	r3, r0, #0
100088b6:	d002      	beq.n	100088be <mpu_reset_fifo+0xe6>
        return -1;
100088b8:	2301      	movs	r3, #1
100088ba:	425b      	negs	r3, r3
100088bc:	e08a      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        if (st.chip_cfg.int_enable)
100088be:	4b47      	ldr	r3, [pc, #284]	; (100089dc <mpu_reset_fifo+0x204>)
100088c0:	7c5b      	ldrb	r3, [r3, #17]
100088c2:	2b00      	cmp	r3, #0
100088c4:	d003      	beq.n	100088ce <mpu_reset_fifo+0xf6>
        data = BIT_DMP_INT_EN;
100088c6:	1dfb      	adds	r3, r7, #7
100088c8:	2202      	movs	r2, #2
100088ca:	701a      	strb	r2, [r3, #0]
100088cc:	e002      	b.n	100088d4 <mpu_reset_fifo+0xfc>
        else
        data = 0;
100088ce:	1dfb      	adds	r3, r7, #7
100088d0:	2200      	movs	r2, #0
100088d2:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100088d4:	4b41      	ldr	r3, [pc, #260]	; (100089dc <mpu_reset_fifo+0x204>)
100088d6:	685b      	ldr	r3, [r3, #4]
100088d8:	7818      	ldrb	r0, [r3, #0]
100088da:	4b40      	ldr	r3, [pc, #256]	; (100089dc <mpu_reset_fifo+0x204>)
100088dc:	681b      	ldr	r3, [r3, #0]
100088de:	7c59      	ldrb	r1, [r3, #17]
100088e0:	1dfb      	adds	r3, r7, #7
100088e2:	2201      	movs	r2, #1
100088e4:	4c3e      	ldr	r4, [pc, #248]	; (100089e0 <mpu_reset_fifo+0x208>)
100088e6:	47a0      	blx	r4
100088e8:	1e03      	subs	r3, r0, #0
100088ea:	d002      	beq.n	100088f2 <mpu_reset_fifo+0x11a>
        return -1;
100088ec:	2301      	movs	r3, #1
100088ee:	425b      	negs	r3, r3
100088f0:	e070      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        data = 0;
100088f2:	1dfb      	adds	r3, r7, #7
100088f4:	2200      	movs	r2, #0
100088f6:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100088f8:	4b38      	ldr	r3, [pc, #224]	; (100089dc <mpu_reset_fifo+0x204>)
100088fa:	685b      	ldr	r3, [r3, #4]
100088fc:	7818      	ldrb	r0, [r3, #0]
100088fe:	4b37      	ldr	r3, [pc, #220]	; (100089dc <mpu_reset_fifo+0x204>)
10008900:	681b      	ldr	r3, [r3, #0]
10008902:	7959      	ldrb	r1, [r3, #5]
10008904:	1dfb      	adds	r3, r7, #7
10008906:	2201      	movs	r2, #1
10008908:	4c35      	ldr	r4, [pc, #212]	; (100089e0 <mpu_reset_fifo+0x208>)
1000890a:	47a0      	blx	r4
1000890c:	1e03      	subs	r3, r0, #0
1000890e:	d060      	beq.n	100089d2 <mpu_reset_fifo+0x1fa>
        return -1;
10008910:	2301      	movs	r3, #1
10008912:	425b      	negs	r3, r3
10008914:	e05e      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        } else {
        data = BIT_FIFO_RST;
10008916:	1dfb      	adds	r3, r7, #7
10008918:	2204      	movs	r2, #4
1000891a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000891c:	4b2f      	ldr	r3, [pc, #188]	; (100089dc <mpu_reset_fifo+0x204>)
1000891e:	685b      	ldr	r3, [r3, #4]
10008920:	7818      	ldrb	r0, [r3, #0]
10008922:	4b2e      	ldr	r3, [pc, #184]	; (100089dc <mpu_reset_fifo+0x204>)
10008924:	681b      	ldr	r3, [r3, #0]
10008926:	7919      	ldrb	r1, [r3, #4]
10008928:	1dfb      	adds	r3, r7, #7
1000892a:	2201      	movs	r2, #1
1000892c:	4c2c      	ldr	r4, [pc, #176]	; (100089e0 <mpu_reset_fifo+0x208>)
1000892e:	47a0      	blx	r4
10008930:	1e03      	subs	r3, r0, #0
10008932:	d002      	beq.n	1000893a <mpu_reset_fifo+0x162>
        return -1;
10008934:	2301      	movs	r3, #1
10008936:	425b      	negs	r3, r3
10008938:	e04c      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000893a:	4b28      	ldr	r3, [pc, #160]	; (100089dc <mpu_reset_fifo+0x204>)
1000893c:	7c9b      	ldrb	r3, [r3, #18]
1000893e:	2b00      	cmp	r3, #0
10008940:	d105      	bne.n	1000894e <mpu_reset_fifo+0x176>
10008942:	4b26      	ldr	r3, [pc, #152]	; (100089dc <mpu_reset_fifo+0x204>)
10008944:	7a9b      	ldrb	r3, [r3, #10]
10008946:	001a      	movs	r2, r3
10008948:	2301      	movs	r3, #1
1000894a:	4013      	ands	r3, r2
1000894c:	d103      	bne.n	10008956 <mpu_reset_fifo+0x17e>
        data = BIT_FIFO_EN;
1000894e:	1dfb      	adds	r3, r7, #7
10008950:	2240      	movs	r2, #64	; 0x40
10008952:	701a      	strb	r2, [r3, #0]
10008954:	e002      	b.n	1000895c <mpu_reset_fifo+0x184>
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008956:	1dfb      	adds	r3, r7, #7
10008958:	2260      	movs	r2, #96	; 0x60
1000895a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000895c:	4b1f      	ldr	r3, [pc, #124]	; (100089dc <mpu_reset_fifo+0x204>)
1000895e:	685b      	ldr	r3, [r3, #4]
10008960:	7818      	ldrb	r0, [r3, #0]
10008962:	4b1e      	ldr	r3, [pc, #120]	; (100089dc <mpu_reset_fifo+0x204>)
10008964:	681b      	ldr	r3, [r3, #0]
10008966:	7919      	ldrb	r1, [r3, #4]
10008968:	1dfb      	adds	r3, r7, #7
1000896a:	2201      	movs	r2, #1
1000896c:	4c1c      	ldr	r4, [pc, #112]	; (100089e0 <mpu_reset_fifo+0x208>)
1000896e:	47a0      	blx	r4
10008970:	1e03      	subs	r3, r0, #0
10008972:	d002      	beq.n	1000897a <mpu_reset_fifo+0x1a2>
        return -1;
10008974:	2301      	movs	r3, #1
10008976:	425b      	negs	r3, r3
10008978:	e02c      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        delay_ms(50);
1000897a:	2032      	movs	r0, #50	; 0x32
1000897c:	4b19      	ldr	r3, [pc, #100]	; (100089e4 <mpu_reset_fifo+0x20c>)
1000897e:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008980:	4b16      	ldr	r3, [pc, #88]	; (100089dc <mpu_reset_fifo+0x204>)
10008982:	7c5b      	ldrb	r3, [r3, #17]
10008984:	2b00      	cmp	r3, #0
10008986:	d003      	beq.n	10008990 <mpu_reset_fifo+0x1b8>
        data = BIT_DATA_RDY_EN;
10008988:	1dfb      	adds	r3, r7, #7
1000898a:	2201      	movs	r2, #1
1000898c:	701a      	strb	r2, [r3, #0]
1000898e:	e002      	b.n	10008996 <mpu_reset_fifo+0x1be>
        else
        data = 0;
10008990:	1dfb      	adds	r3, r7, #7
10008992:	2200      	movs	r2, #0
10008994:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008996:	4b11      	ldr	r3, [pc, #68]	; (100089dc <mpu_reset_fifo+0x204>)
10008998:	685b      	ldr	r3, [r3, #4]
1000899a:	7818      	ldrb	r0, [r3, #0]
1000899c:	4b0f      	ldr	r3, [pc, #60]	; (100089dc <mpu_reset_fifo+0x204>)
1000899e:	681b      	ldr	r3, [r3, #0]
100089a0:	7c59      	ldrb	r1, [r3, #17]
100089a2:	1dfb      	adds	r3, r7, #7
100089a4:	2201      	movs	r2, #1
100089a6:	4c0e      	ldr	r4, [pc, #56]	; (100089e0 <mpu_reset_fifo+0x208>)
100089a8:	47a0      	blx	r4
100089aa:	1e03      	subs	r3, r0, #0
100089ac:	d002      	beq.n	100089b4 <mpu_reset_fifo+0x1dc>
        return -1;
100089ae:	2301      	movs	r3, #1
100089b0:	425b      	negs	r3, r3
100089b2:	e00f      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100089b4:	4b09      	ldr	r3, [pc, #36]	; (100089dc <mpu_reset_fifo+0x204>)
100089b6:	685b      	ldr	r3, [r3, #4]
100089b8:	7818      	ldrb	r0, [r3, #0]
100089ba:	4b08      	ldr	r3, [pc, #32]	; (100089dc <mpu_reset_fifo+0x204>)
100089bc:	681b      	ldr	r3, [r3, #0]
100089be:	7959      	ldrb	r1, [r3, #5]
100089c0:	4b09      	ldr	r3, [pc, #36]	; (100089e8 <mpu_reset_fifo+0x210>)
100089c2:	2201      	movs	r2, #1
100089c4:	4c06      	ldr	r4, [pc, #24]	; (100089e0 <mpu_reset_fifo+0x208>)
100089c6:	47a0      	blx	r4
100089c8:	1e03      	subs	r3, r0, #0
100089ca:	d002      	beq.n	100089d2 <mpu_reset_fifo+0x1fa>
        return -1;
100089cc:	2301      	movs	r3, #1
100089ce:	425b      	negs	r3, r3
100089d0:	e000      	b.n	100089d4 <mpu_reset_fifo+0x1fc>
    }
    return 0;
100089d2:	2300      	movs	r3, #0
}
100089d4:	0018      	movs	r0, r3
100089d6:	46bd      	mov	sp, r7
100089d8:	b003      	add	sp, #12
100089da:	bd90      	pop	{r4, r7, pc}
100089dc:	1001b844 	.word	0x1001b844
100089e0:	100080d5 	.word	0x100080d5
100089e4:	1000c4b9 	.word	0x1000c4b9
100089e8:	1001b854 	.word	0x1001b854

100089ec <mpu_get_gyro_fsr>:
*  @brief      Get the gyro full-scale range.
*  @param[out] fsr Current full-scale range.
*  @return     0 if successful.
*/
int mpu_get_gyro_fsr(unsigned short *fsr)
{
100089ec:	b580      	push	{r7, lr}
100089ee:	b082      	sub	sp, #8
100089f0:	af00      	add	r7, sp, #0
100089f2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
100089f4:	4b14      	ldr	r3, [pc, #80]	; (10008a48 <mpu_get_gyro_fsr+0x5c>)
100089f6:	7a1b      	ldrb	r3, [r3, #8]
100089f8:	2b01      	cmp	r3, #1
100089fa:	d00c      	beq.n	10008a16 <mpu_get_gyro_fsr+0x2a>
100089fc:	dc02      	bgt.n	10008a04 <mpu_get_gyro_fsr+0x18>
100089fe:	2b00      	cmp	r3, #0
10008a00:	d005      	beq.n	10008a0e <mpu_get_gyro_fsr+0x22>
10008a02:	e017      	b.n	10008a34 <mpu_get_gyro_fsr+0x48>
10008a04:	2b02      	cmp	r3, #2
10008a06:	d00b      	beq.n	10008a20 <mpu_get_gyro_fsr+0x34>
10008a08:	2b03      	cmp	r3, #3
10008a0a:	d00e      	beq.n	10008a2a <mpu_get_gyro_fsr+0x3e>
10008a0c:	e012      	b.n	10008a34 <mpu_get_gyro_fsr+0x48>
        case INV_FSR_250DPS:
        fsr[0] = 250;
10008a0e:	687b      	ldr	r3, [r7, #4]
10008a10:	22fa      	movs	r2, #250	; 0xfa
10008a12:	801a      	strh	r2, [r3, #0]
        break;
10008a14:	e012      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        case INV_FSR_500DPS:
        fsr[0] = 500;
10008a16:	687b      	ldr	r3, [r7, #4]
10008a18:	22fa      	movs	r2, #250	; 0xfa
10008a1a:	0052      	lsls	r2, r2, #1
10008a1c:	801a      	strh	r2, [r3, #0]
        break;
10008a1e:	e00d      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        case INV_FSR_1000DPS:
        fsr[0] = 1000;
10008a20:	687b      	ldr	r3, [r7, #4]
10008a22:	22fa      	movs	r2, #250	; 0xfa
10008a24:	0092      	lsls	r2, r2, #2
10008a26:	801a      	strh	r2, [r3, #0]
        break;
10008a28:	e008      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008a2a:	687b      	ldr	r3, [r7, #4]
10008a2c:	22fa      	movs	r2, #250	; 0xfa
10008a2e:	00d2      	lsls	r2, r2, #3
10008a30:	801a      	strh	r2, [r3, #0]
        break;
10008a32:	e003      	b.n	10008a3c <mpu_get_gyro_fsr+0x50>
        default:
        fsr[0] = 0;
10008a34:	687b      	ldr	r3, [r7, #4]
10008a36:	2200      	movs	r2, #0
10008a38:	801a      	strh	r2, [r3, #0]
        break;
10008a3a:	46c0      	nop			; (mov r8, r8)
    }
    return 0;
10008a3c:	2300      	movs	r3, #0
}
10008a3e:	0018      	movs	r0, r3
10008a40:	46bd      	mov	sp, r7
10008a42:	b002      	add	sp, #8
10008a44:	bd80      	pop	{r7, pc}
10008a46:	46c0      	nop			; (mov r8, r8)
10008a48:	1001b844 	.word	0x1001b844

10008a4c <mpu_set_gyro_fsr>:
*  @brief      Set the gyro full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008a4c:	b590      	push	{r4, r7, lr}
10008a4e:	b085      	sub	sp, #20
10008a50:	af00      	add	r7, sp, #0
10008a52:	0002      	movs	r2, r0
10008a54:	1dbb      	adds	r3, r7, #6
10008a56:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008a58:	4b2d      	ldr	r3, [pc, #180]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008a5a:	7a9b      	ldrb	r3, [r3, #10]
10008a5c:	2b00      	cmp	r3, #0
10008a5e:	d102      	bne.n	10008a66 <mpu_set_gyro_fsr+0x1a>
    return -1;
10008a60:	2301      	movs	r3, #1
10008a62:	425b      	negs	r3, r3
10008a64:	e04f      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>

    switch (fsr) {
10008a66:	1dbb      	adds	r3, r7, #6
10008a68:	881b      	ldrh	r3, [r3, #0]
10008a6a:	22fa      	movs	r2, #250	; 0xfa
10008a6c:	0052      	lsls	r2, r2, #1
10008a6e:	4293      	cmp	r3, r2
10008a70:	d014      	beq.n	10008a9c <mpu_set_gyro_fsr+0x50>
10008a72:	22fa      	movs	r2, #250	; 0xfa
10008a74:	0052      	lsls	r2, r2, #1
10008a76:	4293      	cmp	r3, r2
10008a78:	dc02      	bgt.n	10008a80 <mpu_set_gyro_fsr+0x34>
10008a7a:	2bfa      	cmp	r3, #250	; 0xfa
10008a7c:	d009      	beq.n	10008a92 <mpu_set_gyro_fsr+0x46>
10008a7e:	e01c      	b.n	10008aba <mpu_set_gyro_fsr+0x6e>
10008a80:	22fa      	movs	r2, #250	; 0xfa
10008a82:	0092      	lsls	r2, r2, #2
10008a84:	4293      	cmp	r3, r2
10008a86:	d00e      	beq.n	10008aa6 <mpu_set_gyro_fsr+0x5a>
10008a88:	22fa      	movs	r2, #250	; 0xfa
10008a8a:	00d2      	lsls	r2, r2, #3
10008a8c:	4293      	cmp	r3, r2
10008a8e:	d00f      	beq.n	10008ab0 <mpu_set_gyro_fsr+0x64>
10008a90:	e013      	b.n	10008aba <mpu_set_gyro_fsr+0x6e>
        case 250:
        data = INV_FSR_250DPS << 3;
10008a92:	230f      	movs	r3, #15
10008a94:	18fb      	adds	r3, r7, r3
10008a96:	2200      	movs	r2, #0
10008a98:	701a      	strb	r2, [r3, #0]
        break;
10008a9a:	e011      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        case 500:
        data = INV_FSR_500DPS << 3;
10008a9c:	230f      	movs	r3, #15
10008a9e:	18fb      	adds	r3, r7, r3
10008aa0:	2208      	movs	r2, #8
10008aa2:	701a      	strb	r2, [r3, #0]
        break;
10008aa4:	e00c      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        case 1000:
        data = INV_FSR_1000DPS << 3;
10008aa6:	230f      	movs	r3, #15
10008aa8:	18fb      	adds	r3, r7, r3
10008aaa:	2210      	movs	r2, #16
10008aac:	701a      	strb	r2, [r3, #0]
        break;
10008aae:	e007      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        case 2000:
        data = INV_FSR_2000DPS << 3;
10008ab0:	230f      	movs	r3, #15
10008ab2:	18fb      	adds	r3, r7, r3
10008ab4:	2218      	movs	r2, #24
10008ab6:	701a      	strb	r2, [r3, #0]
        break;
10008ab8:	e002      	b.n	10008ac0 <mpu_set_gyro_fsr+0x74>
        default:
        return -1;
10008aba:	2301      	movs	r3, #1
10008abc:	425b      	negs	r3, r3
10008abe:	e022      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008ac0:	4b13      	ldr	r3, [pc, #76]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008ac2:	7a1a      	ldrb	r2, [r3, #8]
10008ac4:	230f      	movs	r3, #15
10008ac6:	18fb      	adds	r3, r7, r3
10008ac8:	781b      	ldrb	r3, [r3, #0]
10008aca:	08db      	lsrs	r3, r3, #3
10008acc:	b2db      	uxtb	r3, r3
10008ace:	429a      	cmp	r2, r3
10008ad0:	d101      	bne.n	10008ad6 <mpu_set_gyro_fsr+0x8a>
    return 0;
10008ad2:	2300      	movs	r3, #0
10008ad4:	e017      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008ad6:	4b0e      	ldr	r3, [pc, #56]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008ad8:	685b      	ldr	r3, [r3, #4]
10008ada:	7818      	ldrb	r0, [r3, #0]
10008adc:	4b0c      	ldr	r3, [pc, #48]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008ade:	681b      	ldr	r3, [r3, #0]
10008ae0:	7999      	ldrb	r1, [r3, #6]
10008ae2:	230f      	movs	r3, #15
10008ae4:	18fb      	adds	r3, r7, r3
10008ae6:	2201      	movs	r2, #1
10008ae8:	4c0a      	ldr	r4, [pc, #40]	; (10008b14 <mpu_set_gyro_fsr+0xc8>)
10008aea:	47a0      	blx	r4
10008aec:	1e03      	subs	r3, r0, #0
10008aee:	d002      	beq.n	10008af6 <mpu_set_gyro_fsr+0xaa>
    return -1;
10008af0:	2301      	movs	r3, #1
10008af2:	425b      	negs	r3, r3
10008af4:	e007      	b.n	10008b06 <mpu_set_gyro_fsr+0xba>
    st.chip_cfg.gyro_fsr = data >> 3;
10008af6:	230f      	movs	r3, #15
10008af8:	18fb      	adds	r3, r7, r3
10008afa:	781b      	ldrb	r3, [r3, #0]
10008afc:	08db      	lsrs	r3, r3, #3
10008afe:	b2da      	uxtb	r2, r3
10008b00:	4b03      	ldr	r3, [pc, #12]	; (10008b10 <mpu_set_gyro_fsr+0xc4>)
10008b02:	721a      	strb	r2, [r3, #8]
    return 0;
10008b04:	2300      	movs	r3, #0
}
10008b06:	0018      	movs	r0, r3
10008b08:	46bd      	mov	sp, r7
10008b0a:	b005      	add	sp, #20
10008b0c:	bd90      	pop	{r4, r7, pc}
10008b0e:	46c0      	nop			; (mov r8, r8)
10008b10:	1001b844 	.word	0x1001b844
10008b14:	100080d5 	.word	0x100080d5

10008b18 <mpu_get_accel_fsr>:
*  @brief      Get the accel full-scale range.
*  @param[out] fsr Current full-scale range.
*  @return     0 if successful.
*/
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008b18:	b580      	push	{r7, lr}
10008b1a:	b082      	sub	sp, #8
10008b1c:	af00      	add	r7, sp, #0
10008b1e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
10008b20:	4b17      	ldr	r3, [pc, #92]	; (10008b80 <mpu_get_accel_fsr+0x68>)
10008b22:	7a5b      	ldrb	r3, [r3, #9]
10008b24:	2b01      	cmp	r3, #1
10008b26:	d00c      	beq.n	10008b42 <mpu_get_accel_fsr+0x2a>
10008b28:	dc02      	bgt.n	10008b30 <mpu_get_accel_fsr+0x18>
10008b2a:	2b00      	cmp	r3, #0
10008b2c:	d005      	beq.n	10008b3a <mpu_get_accel_fsr+0x22>
10008b2e:	e014      	b.n	10008b5a <mpu_get_accel_fsr+0x42>
10008b30:	2b02      	cmp	r3, #2
10008b32:	d00a      	beq.n	10008b4a <mpu_get_accel_fsr+0x32>
10008b34:	2b03      	cmp	r3, #3
10008b36:	d00c      	beq.n	10008b52 <mpu_get_accel_fsr+0x3a>
10008b38:	e00f      	b.n	10008b5a <mpu_get_accel_fsr+0x42>
        case INV_FSR_2G:
        fsr[0] = 2;
10008b3a:	687b      	ldr	r3, [r7, #4]
10008b3c:	2202      	movs	r2, #2
10008b3e:	701a      	strb	r2, [r3, #0]
        break;
10008b40:	e00e      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        case INV_FSR_4G:
        fsr[0] = 4;
10008b42:	687b      	ldr	r3, [r7, #4]
10008b44:	2204      	movs	r2, #4
10008b46:	701a      	strb	r2, [r3, #0]
        break;
10008b48:	e00a      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        case INV_FSR_8G:
        fsr[0] = 8;
10008b4a:	687b      	ldr	r3, [r7, #4]
10008b4c:	2208      	movs	r2, #8
10008b4e:	701a      	strb	r2, [r3, #0]
        break;
10008b50:	e006      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        case INV_FSR_16G:
        fsr[0] = 16;
10008b52:	687b      	ldr	r3, [r7, #4]
10008b54:	2210      	movs	r2, #16
10008b56:	701a      	strb	r2, [r3, #0]
        break;
10008b58:	e002      	b.n	10008b60 <mpu_get_accel_fsr+0x48>
        default:
        return -1;
10008b5a:	2301      	movs	r3, #1
10008b5c:	425b      	negs	r3, r3
10008b5e:	e00a      	b.n	10008b76 <mpu_get_accel_fsr+0x5e>
    }
    if (st.chip_cfg.accel_half)
10008b60:	4b07      	ldr	r3, [pc, #28]	; (10008b80 <mpu_get_accel_fsr+0x68>)
10008b62:	7cdb      	ldrb	r3, [r3, #19]
10008b64:	2b00      	cmp	r3, #0
10008b66:	d005      	beq.n	10008b74 <mpu_get_accel_fsr+0x5c>
    fsr[0] <<= 1;
10008b68:	687b      	ldr	r3, [r7, #4]
10008b6a:	781b      	ldrb	r3, [r3, #0]
10008b6c:	18db      	adds	r3, r3, r3
10008b6e:	b2da      	uxtb	r2, r3
10008b70:	687b      	ldr	r3, [r7, #4]
10008b72:	701a      	strb	r2, [r3, #0]
    return 0;
10008b74:	2300      	movs	r3, #0
}
10008b76:	0018      	movs	r0, r3
10008b78:	46bd      	mov	sp, r7
10008b7a:	b002      	add	sp, #8
10008b7c:	bd80      	pop	{r7, pc}
10008b7e:	46c0      	nop			; (mov r8, r8)
10008b80:	1001b844 	.word	0x1001b844

10008b84 <mpu_set_accel_fsr>:
*  @brief      Set the accel full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_accel_fsr(unsigned char fsr)
{
10008b84:	b590      	push	{r4, r7, lr}
10008b86:	b085      	sub	sp, #20
10008b88:	af00      	add	r7, sp, #0
10008b8a:	0002      	movs	r2, r0
10008b8c:	1dfb      	adds	r3, r7, #7
10008b8e:	701a      	strb	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b90:	4b28      	ldr	r3, [pc, #160]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008b92:	7a9b      	ldrb	r3, [r3, #10]
10008b94:	2b00      	cmp	r3, #0
10008b96:	d102      	bne.n	10008b9e <mpu_set_accel_fsr+0x1a>
    return -1;
10008b98:	2301      	movs	r3, #1
10008b9a:	425b      	negs	r3, r3
10008b9c:	e046      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>

    switch (fsr) {
10008b9e:	1dfb      	adds	r3, r7, #7
10008ba0:	781b      	ldrb	r3, [r3, #0]
10008ba2:	2b04      	cmp	r3, #4
10008ba4:	d00d      	beq.n	10008bc2 <mpu_set_accel_fsr+0x3e>
10008ba6:	dc02      	bgt.n	10008bae <mpu_set_accel_fsr+0x2a>
10008ba8:	2b02      	cmp	r3, #2
10008baa:	d005      	beq.n	10008bb8 <mpu_set_accel_fsr+0x34>
10008bac:	e018      	b.n	10008be0 <mpu_set_accel_fsr+0x5c>
10008bae:	2b08      	cmp	r3, #8
10008bb0:	d00c      	beq.n	10008bcc <mpu_set_accel_fsr+0x48>
10008bb2:	2b10      	cmp	r3, #16
10008bb4:	d00f      	beq.n	10008bd6 <mpu_set_accel_fsr+0x52>
10008bb6:	e013      	b.n	10008be0 <mpu_set_accel_fsr+0x5c>
        case 2:
        data = INV_FSR_2G << 3;
10008bb8:	230f      	movs	r3, #15
10008bba:	18fb      	adds	r3, r7, r3
10008bbc:	2200      	movs	r2, #0
10008bbe:	701a      	strb	r2, [r3, #0]
        break;
10008bc0:	e011      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        case 4:
        data = INV_FSR_4G << 3;
10008bc2:	230f      	movs	r3, #15
10008bc4:	18fb      	adds	r3, r7, r3
10008bc6:	2208      	movs	r2, #8
10008bc8:	701a      	strb	r2, [r3, #0]
        break;
10008bca:	e00c      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        case 8:
        data = INV_FSR_8G << 3;
10008bcc:	230f      	movs	r3, #15
10008bce:	18fb      	adds	r3, r7, r3
10008bd0:	2210      	movs	r2, #16
10008bd2:	701a      	strb	r2, [r3, #0]
        break;
10008bd4:	e007      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        case 16:
        data = INV_FSR_16G << 3;
10008bd6:	230f      	movs	r3, #15
10008bd8:	18fb      	adds	r3, r7, r3
10008bda:	2218      	movs	r2, #24
10008bdc:	701a      	strb	r2, [r3, #0]
        break;
10008bde:	e002      	b.n	10008be6 <mpu_set_accel_fsr+0x62>
        default:
        return -1;
10008be0:	2301      	movs	r3, #1
10008be2:	425b      	negs	r3, r3
10008be4:	e022      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008be6:	4b13      	ldr	r3, [pc, #76]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008be8:	7a5a      	ldrb	r2, [r3, #9]
10008bea:	230f      	movs	r3, #15
10008bec:	18fb      	adds	r3, r7, r3
10008bee:	781b      	ldrb	r3, [r3, #0]
10008bf0:	08db      	lsrs	r3, r3, #3
10008bf2:	b2db      	uxtb	r3, r3
10008bf4:	429a      	cmp	r2, r3
10008bf6:	d101      	bne.n	10008bfc <mpu_set_accel_fsr+0x78>
    return 0;
10008bf8:	2300      	movs	r3, #0
10008bfa:	e017      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008bfc:	4b0d      	ldr	r3, [pc, #52]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008bfe:	685b      	ldr	r3, [r3, #4]
10008c00:	7818      	ldrb	r0, [r3, #0]
10008c02:	4b0c      	ldr	r3, [pc, #48]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008c04:	681b      	ldr	r3, [r3, #0]
10008c06:	79d9      	ldrb	r1, [r3, #7]
10008c08:	230f      	movs	r3, #15
10008c0a:	18fb      	adds	r3, r7, r3
10008c0c:	2201      	movs	r2, #1
10008c0e:	4c0a      	ldr	r4, [pc, #40]	; (10008c38 <mpu_set_accel_fsr+0xb4>)
10008c10:	47a0      	blx	r4
10008c12:	1e03      	subs	r3, r0, #0
10008c14:	d002      	beq.n	10008c1c <mpu_set_accel_fsr+0x98>
    return -1;
10008c16:	2301      	movs	r3, #1
10008c18:	425b      	negs	r3, r3
10008c1a:	e007      	b.n	10008c2c <mpu_set_accel_fsr+0xa8>
    st.chip_cfg.accel_fsr = data >> 3;
10008c1c:	230f      	movs	r3, #15
10008c1e:	18fb      	adds	r3, r7, r3
10008c20:	781b      	ldrb	r3, [r3, #0]
10008c22:	08db      	lsrs	r3, r3, #3
10008c24:	b2da      	uxtb	r2, r3
10008c26:	4b03      	ldr	r3, [pc, #12]	; (10008c34 <mpu_set_accel_fsr+0xb0>)
10008c28:	725a      	strb	r2, [r3, #9]
    return 0;
10008c2a:	2300      	movs	r3, #0
}
10008c2c:	0018      	movs	r0, r3
10008c2e:	46bd      	mov	sp, r7
10008c30:	b005      	add	sp, #20
10008c32:	bd90      	pop	{r4, r7, pc}
10008c34:	1001b844 	.word	0x1001b844
10008c38:	100080d5 	.word	0x100080d5

10008c3c <mpu_set_lpf>:
*  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
*  @param[in]  lpf Desired LPF setting.
*  @return     0 if successful.
*/
int mpu_set_lpf(unsigned short lpf)
{
10008c3c:	b590      	push	{r4, r7, lr}
10008c3e:	b085      	sub	sp, #20
10008c40:	af00      	add	r7, sp, #0
10008c42:	0002      	movs	r2, r0
10008c44:	1dbb      	adds	r3, r7, #6
10008c46:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008c48:	4b2d      	ldr	r3, [pc, #180]	; (10008d00 <mpu_set_lpf+0xc4>)
10008c4a:	7a9b      	ldrb	r3, [r3, #10]
10008c4c:	2b00      	cmp	r3, #0
10008c4e:	d102      	bne.n	10008c56 <mpu_set_lpf+0x1a>
    return -1;
10008c50:	2301      	movs	r3, #1
10008c52:	425b      	negs	r3, r3
10008c54:	e04f      	b.n	10008cf6 <mpu_set_lpf+0xba>

    if (lpf >= 188)
10008c56:	1dbb      	adds	r3, r7, #6
10008c58:	881b      	ldrh	r3, [r3, #0]
10008c5a:	2bbb      	cmp	r3, #187	; 0xbb
10008c5c:	d904      	bls.n	10008c68 <mpu_set_lpf+0x2c>
    data = INV_FILTER_188HZ;
10008c5e:	230f      	movs	r3, #15
10008c60:	18fb      	adds	r3, r7, r3
10008c62:	2201      	movs	r2, #1
10008c64:	701a      	strb	r2, [r3, #0]
10008c66:	e027      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 98)
10008c68:	1dbb      	adds	r3, r7, #6
10008c6a:	881b      	ldrh	r3, [r3, #0]
10008c6c:	2b61      	cmp	r3, #97	; 0x61
10008c6e:	d904      	bls.n	10008c7a <mpu_set_lpf+0x3e>
    data = INV_FILTER_98HZ;
10008c70:	230f      	movs	r3, #15
10008c72:	18fb      	adds	r3, r7, r3
10008c74:	2202      	movs	r2, #2
10008c76:	701a      	strb	r2, [r3, #0]
10008c78:	e01e      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 42)
10008c7a:	1dbb      	adds	r3, r7, #6
10008c7c:	881b      	ldrh	r3, [r3, #0]
10008c7e:	2b29      	cmp	r3, #41	; 0x29
10008c80:	d904      	bls.n	10008c8c <mpu_set_lpf+0x50>
    data = INV_FILTER_42HZ;
10008c82:	230f      	movs	r3, #15
10008c84:	18fb      	adds	r3, r7, r3
10008c86:	2203      	movs	r2, #3
10008c88:	701a      	strb	r2, [r3, #0]
10008c8a:	e015      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 20)
10008c8c:	1dbb      	adds	r3, r7, #6
10008c8e:	881b      	ldrh	r3, [r3, #0]
10008c90:	2b13      	cmp	r3, #19
10008c92:	d904      	bls.n	10008c9e <mpu_set_lpf+0x62>
    data = INV_FILTER_20HZ;
10008c94:	230f      	movs	r3, #15
10008c96:	18fb      	adds	r3, r7, r3
10008c98:	2204      	movs	r2, #4
10008c9a:	701a      	strb	r2, [r3, #0]
10008c9c:	e00c      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else if (lpf >= 10)
10008c9e:	1dbb      	adds	r3, r7, #6
10008ca0:	881b      	ldrh	r3, [r3, #0]
10008ca2:	2b09      	cmp	r3, #9
10008ca4:	d904      	bls.n	10008cb0 <mpu_set_lpf+0x74>
    data = INV_FILTER_10HZ;
10008ca6:	230f      	movs	r3, #15
10008ca8:	18fb      	adds	r3, r7, r3
10008caa:	2205      	movs	r2, #5
10008cac:	701a      	strb	r2, [r3, #0]
10008cae:	e003      	b.n	10008cb8 <mpu_set_lpf+0x7c>
    else
    data = INV_FILTER_5HZ;
10008cb0:	230f      	movs	r3, #15
10008cb2:	18fb      	adds	r3, r7, r3
10008cb4:	2206      	movs	r2, #6
10008cb6:	701a      	strb	r2, [r3, #0]

    if (st.chip_cfg.lpf == data)
10008cb8:	4b11      	ldr	r3, [pc, #68]	; (10008d00 <mpu_set_lpf+0xc4>)
10008cba:	7ada      	ldrb	r2, [r3, #11]
10008cbc:	230f      	movs	r3, #15
10008cbe:	18fb      	adds	r3, r7, r3
10008cc0:	781b      	ldrb	r3, [r3, #0]
10008cc2:	429a      	cmp	r2, r3
10008cc4:	d101      	bne.n	10008cca <mpu_set_lpf+0x8e>
    return 0;
10008cc6:	2300      	movs	r3, #0
10008cc8:	e015      	b.n	10008cf6 <mpu_set_lpf+0xba>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008cca:	4b0d      	ldr	r3, [pc, #52]	; (10008d00 <mpu_set_lpf+0xc4>)
10008ccc:	685b      	ldr	r3, [r3, #4]
10008cce:	7818      	ldrb	r0, [r3, #0]
10008cd0:	4b0b      	ldr	r3, [pc, #44]	; (10008d00 <mpu_set_lpf+0xc4>)
10008cd2:	681b      	ldr	r3, [r3, #0]
10008cd4:	7899      	ldrb	r1, [r3, #2]
10008cd6:	230f      	movs	r3, #15
10008cd8:	18fb      	adds	r3, r7, r3
10008cda:	2201      	movs	r2, #1
10008cdc:	4c09      	ldr	r4, [pc, #36]	; (10008d04 <mpu_set_lpf+0xc8>)
10008cde:	47a0      	blx	r4
10008ce0:	1e03      	subs	r3, r0, #0
10008ce2:	d002      	beq.n	10008cea <mpu_set_lpf+0xae>
    return -1;
10008ce4:	2301      	movs	r3, #1
10008ce6:	425b      	negs	r3, r3
10008ce8:	e005      	b.n	10008cf6 <mpu_set_lpf+0xba>
    st.chip_cfg.lpf = data;
10008cea:	230f      	movs	r3, #15
10008cec:	18fb      	adds	r3, r7, r3
10008cee:	781a      	ldrb	r2, [r3, #0]
10008cf0:	4b03      	ldr	r3, [pc, #12]	; (10008d00 <mpu_set_lpf+0xc4>)
10008cf2:	72da      	strb	r2, [r3, #11]
    return 0;
10008cf4:	2300      	movs	r3, #0
}
10008cf6:	0018      	movs	r0, r3
10008cf8:	46bd      	mov	sp, r7
10008cfa:	b005      	add	sp, #20
10008cfc:	bd90      	pop	{r4, r7, pc}
10008cfe:	46c0      	nop			; (mov r8, r8)
10008d00:	1001b844 	.word	0x1001b844
10008d04:	100080d5 	.word	0x100080d5

10008d08 <mpu_get_sample_rate>:
*  @brief      Get sampling rate.
*  @param[out] rate    Current sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_get_sample_rate(unsigned short *rate)
{
10008d08:	b580      	push	{r7, lr}
10008d0a:	b082      	sub	sp, #8
10008d0c:	af00      	add	r7, sp, #0
10008d0e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
10008d10:	4b08      	ldr	r3, [pc, #32]	; (10008d34 <mpu_get_sample_rate+0x2c>)
10008d12:	2224      	movs	r2, #36	; 0x24
10008d14:	5c9b      	ldrb	r3, [r3, r2]
10008d16:	2b00      	cmp	r3, #0
10008d18:	d002      	beq.n	10008d20 <mpu_get_sample_rate+0x18>
    return -1;
10008d1a:	2301      	movs	r3, #1
10008d1c:	425b      	negs	r3, r3
10008d1e:	e004      	b.n	10008d2a <mpu_get_sample_rate+0x22>
    else
    rate[0] = st.chip_cfg.sample_rate;
10008d20:	4b04      	ldr	r3, [pc, #16]	; (10008d34 <mpu_get_sample_rate+0x2c>)
10008d22:	89da      	ldrh	r2, [r3, #14]
10008d24:	687b      	ldr	r3, [r7, #4]
10008d26:	801a      	strh	r2, [r3, #0]
    return 0;
10008d28:	2300      	movs	r3, #0
}
10008d2a:	0018      	movs	r0, r3
10008d2c:	46bd      	mov	sp, r7
10008d2e:	b002      	add	sp, #8
10008d30:	bd80      	pop	{r7, pc}
10008d32:	46c0      	nop			; (mov r8, r8)
10008d34:	1001b844 	.word	0x1001b844

10008d38 <mpu_set_sample_rate>:
*  Sampling rate must be between 4Hz and 1kHz.
*  @param[in]  rate    Desired sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_sample_rate(unsigned short rate)
{
10008d38:	b590      	push	{r4, r7, lr}
10008d3a:	b085      	sub	sp, #20
10008d3c:	af00      	add	r7, sp, #0
10008d3e:	0002      	movs	r2, r0
10008d40:	1dbb      	adds	r3, r7, #6
10008d42:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d44:	4b3c      	ldr	r3, [pc, #240]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008d46:	7a9b      	ldrb	r3, [r3, #10]
10008d48:	2b00      	cmp	r3, #0
10008d4a:	d102      	bne.n	10008d52 <mpu_set_sample_rate+0x1a>
    return -1;
10008d4c:	2301      	movs	r3, #1
10008d4e:	425b      	negs	r3, r3
10008d50:	e06e      	b.n	10008e30 <mpu_set_sample_rate+0xf8>

    if (st.chip_cfg.dmp_on)
10008d52:	4b39      	ldr	r3, [pc, #228]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008d54:	2224      	movs	r2, #36	; 0x24
10008d56:	5c9b      	ldrb	r3, [r3, r2]
10008d58:	2b00      	cmp	r3, #0
10008d5a:	d002      	beq.n	10008d62 <mpu_set_sample_rate+0x2a>
    return -1;
10008d5c:	2301      	movs	r3, #1
10008d5e:	425b      	negs	r3, r3
10008d60:	e066      	b.n	10008e30 <mpu_set_sample_rate+0xf8>
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d62:	4b35      	ldr	r3, [pc, #212]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008d64:	7d1b      	ldrb	r3, [r3, #20]
10008d66:	2b00      	cmp	r3, #0
10008d68:	d011      	beq.n	10008d8e <mpu_set_sample_rate+0x56>
            if (rate && (rate <= 40)) {
10008d6a:	1dbb      	adds	r3, r7, #6
10008d6c:	881b      	ldrh	r3, [r3, #0]
10008d6e:	2b00      	cmp	r3, #0
10008d70:	d00a      	beq.n	10008d88 <mpu_set_sample_rate+0x50>
10008d72:	1dbb      	adds	r3, r7, #6
10008d74:	881b      	ldrh	r3, [r3, #0]
10008d76:	2b28      	cmp	r3, #40	; 0x28
10008d78:	d806      	bhi.n	10008d88 <mpu_set_sample_rate+0x50>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d7a:	1dbb      	adds	r3, r7, #6
10008d7c:	881b      	ldrh	r3, [r3, #0]
10008d7e:	0018      	movs	r0, r3
10008d80:	4b2e      	ldr	r3, [pc, #184]	; (10008e3c <mpu_set_sample_rate+0x104>)
10008d82:	4798      	blx	r3
                return 0;
10008d84:	2300      	movs	r3, #0
10008d86:	e053      	b.n	10008e30 <mpu_set_sample_rate+0xf8>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
            * switch back to full-power mode.
            */
            mpu_lp_accel_mode(0);
10008d88:	2000      	movs	r0, #0
10008d8a:	4b2c      	ldr	r3, [pc, #176]	; (10008e3c <mpu_set_sample_rate+0x104>)
10008d8c:	4798      	blx	r3
        }
        if (rate < 4)
10008d8e:	1dbb      	adds	r3, r7, #6
10008d90:	881b      	ldrh	r3, [r3, #0]
10008d92:	2b03      	cmp	r3, #3
10008d94:	d803      	bhi.n	10008d9e <mpu_set_sample_rate+0x66>
        rate = 4;
10008d96:	1dbb      	adds	r3, r7, #6
10008d98:	2204      	movs	r2, #4
10008d9a:	801a      	strh	r2, [r3, #0]
10008d9c:	e009      	b.n	10008db2 <mpu_set_sample_rate+0x7a>
        else if (rate > 1000)
10008d9e:	1dbb      	adds	r3, r7, #6
10008da0:	881a      	ldrh	r2, [r3, #0]
10008da2:	23fa      	movs	r3, #250	; 0xfa
10008da4:	009b      	lsls	r3, r3, #2
10008da6:	429a      	cmp	r2, r3
10008da8:	d903      	bls.n	10008db2 <mpu_set_sample_rate+0x7a>
        rate = 1000;
10008daa:	1dbb      	adds	r3, r7, #6
10008dac:	22fa      	movs	r2, #250	; 0xfa
10008dae:	0092      	lsls	r2, r2, #2
10008db0:	801a      	strh	r2, [r3, #0]

        data = 1000 / rate - 1;
10008db2:	1dbb      	adds	r3, r7, #6
10008db4:	881a      	ldrh	r2, [r3, #0]
10008db6:	4b22      	ldr	r3, [pc, #136]	; (10008e40 <mpu_set_sample_rate+0x108>)
10008db8:	0011      	movs	r1, r2
10008dba:	22fa      	movs	r2, #250	; 0xfa
10008dbc:	0090      	lsls	r0, r2, #2
10008dbe:	4798      	blx	r3
10008dc0:	0003      	movs	r3, r0
10008dc2:	b2db      	uxtb	r3, r3
10008dc4:	3b01      	subs	r3, #1
10008dc6:	b2da      	uxtb	r2, r3
10008dc8:	230f      	movs	r3, #15
10008dca:	18fb      	adds	r3, r7, r3
10008dcc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dce:	4b1a      	ldr	r3, [pc, #104]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008dd0:	685b      	ldr	r3, [r3, #4]
10008dd2:	7818      	ldrb	r0, [r3, #0]
10008dd4:	4b18      	ldr	r3, [pc, #96]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008dd6:	681b      	ldr	r3, [r3, #0]
10008dd8:	7859      	ldrb	r1, [r3, #1]
10008dda:	230f      	movs	r3, #15
10008ddc:	18fb      	adds	r3, r7, r3
10008dde:	2201      	movs	r2, #1
10008de0:	4c18      	ldr	r4, [pc, #96]	; (10008e44 <mpu_set_sample_rate+0x10c>)
10008de2:	47a0      	blx	r4
10008de4:	1e03      	subs	r3, r0, #0
10008de6:	d002      	beq.n	10008dee <mpu_set_sample_rate+0xb6>
        return -1;
10008de8:	2301      	movs	r3, #1
10008dea:	425b      	negs	r3, r3
10008dec:	e020      	b.n	10008e30 <mpu_set_sample_rate+0xf8>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008dee:	230f      	movs	r3, #15
10008df0:	18fb      	adds	r3, r7, r3
10008df2:	781b      	ldrb	r3, [r3, #0]
10008df4:	1c5a      	adds	r2, r3, #1
10008df6:	4b12      	ldr	r3, [pc, #72]	; (10008e40 <mpu_set_sample_rate+0x108>)
10008df8:	0011      	movs	r1, r2
10008dfa:	22fa      	movs	r2, #250	; 0xfa
10008dfc:	0090      	lsls	r0, r2, #2
10008dfe:	4798      	blx	r3
10008e00:	0003      	movs	r3, r0
10008e02:	b29a      	uxth	r2, r3
10008e04:	4b0c      	ldr	r3, [pc, #48]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008e06:	81da      	strh	r2, [r3, #14]

        #ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e08:	4b0b      	ldr	r3, [pc, #44]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10008e0c:	1c1a      	adds	r2, r3, #0
10008e0e:	b293      	uxth	r3, r2
10008e10:	2b64      	cmp	r3, #100	; 0x64
10008e12:	d901      	bls.n	10008e18 <mpu_set_sample_rate+0xe0>
10008e14:	2364      	movs	r3, #100	; 0x64
10008e16:	1c1a      	adds	r2, r3, #0
10008e18:	b293      	uxth	r3, r2
10008e1a:	0018      	movs	r0, r3
10008e1c:	4b0a      	ldr	r3, [pc, #40]	; (10008e48 <mpu_set_sample_rate+0x110>)
10008e1e:	4798      	blx	r3
        #endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e20:	4b05      	ldr	r3, [pc, #20]	; (10008e38 <mpu_set_sample_rate+0x100>)
10008e22:	89db      	ldrh	r3, [r3, #14]
10008e24:	085b      	lsrs	r3, r3, #1
10008e26:	b29b      	uxth	r3, r3
10008e28:	0018      	movs	r0, r3
10008e2a:	4b08      	ldr	r3, [pc, #32]	; (10008e4c <mpu_set_sample_rate+0x114>)
10008e2c:	4798      	blx	r3
        return 0;
10008e2e:	2300      	movs	r3, #0
    }
}
10008e30:	0018      	movs	r0, r3
10008e32:	46bd      	mov	sp, r7
10008e34:	b005      	add	sp, #20
10008e36:	bd90      	pop	{r4, r7, pc}
10008e38:	1001b844 	.word	0x1001b844
10008e3c:	10008649 	.word	0x10008649
10008e40:	100171b9 	.word	0x100171b9
10008e44:	100080d5 	.word	0x100080d5
10008e48:	10008e51 	.word	0x10008e51
10008e4c:	10008c3d 	.word	0x10008c3d

10008e50 <mpu_set_compass_sample_rate>:
*  mpu_get_compass_sample_rate to check the actual setting.
*  @param[in]  rate    Desired compass sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008e50:	b590      	push	{r4, r7, lr}
10008e52:	b085      	sub	sp, #20
10008e54:	af00      	add	r7, sp, #0
10008e56:	0002      	movs	r2, r0
10008e58:	1dbb      	adds	r3, r7, #6
10008e5a:	801a      	strh	r2, [r3, #0]
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008e5c:	1dbb      	adds	r3, r7, #6
10008e5e:	881b      	ldrh	r3, [r3, #0]
10008e60:	2b00      	cmp	r3, #0
10008e62:	d009      	beq.n	10008e78 <mpu_set_compass_sample_rate+0x28>
10008e64:	4b1f      	ldr	r3, [pc, #124]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008e66:	89db      	ldrh	r3, [r3, #14]
10008e68:	1dba      	adds	r2, r7, #6
10008e6a:	8812      	ldrh	r2, [r2, #0]
10008e6c:	429a      	cmp	r2, r3
10008e6e:	d803      	bhi.n	10008e78 <mpu_set_compass_sample_rate+0x28>
10008e70:	1dbb      	adds	r3, r7, #6
10008e72:	881b      	ldrh	r3, [r3, #0]
10008e74:	2b64      	cmp	r3, #100	; 0x64
10008e76:	d902      	bls.n	10008e7e <mpu_set_compass_sample_rate+0x2e>
    return -1;
10008e78:	2301      	movs	r3, #1
10008e7a:	425b      	negs	r3, r3
10008e7c:	e02e      	b.n	10008edc <mpu_set_compass_sample_rate+0x8c>

    div = st.chip_cfg.sample_rate / rate - 1;
10008e7e:	4b19      	ldr	r3, [pc, #100]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008e80:	89da      	ldrh	r2, [r3, #14]
10008e82:	1dbb      	adds	r3, r7, #6
10008e84:	8819      	ldrh	r1, [r3, #0]
10008e86:	4b18      	ldr	r3, [pc, #96]	; (10008ee8 <mpu_set_compass_sample_rate+0x98>)
10008e88:	0010      	movs	r0, r2
10008e8a:	4798      	blx	r3
10008e8c:	0003      	movs	r3, r0
10008e8e:	b29b      	uxth	r3, r3
10008e90:	b2db      	uxtb	r3, r3
10008e92:	3b01      	subs	r3, #1
10008e94:	b2da      	uxtb	r2, r3
10008e96:	230f      	movs	r3, #15
10008e98:	18fb      	adds	r3, r7, r3
10008e9a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008e9c:	4b11      	ldr	r3, [pc, #68]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008e9e:	685b      	ldr	r3, [r3, #4]
10008ea0:	7818      	ldrb	r0, [r3, #0]
10008ea2:	4b10      	ldr	r3, [pc, #64]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008ea4:	681b      	ldr	r3, [r3, #0]
10008ea6:	2224      	movs	r2, #36	; 0x24
10008ea8:	5c99      	ldrb	r1, [r3, r2]
10008eaa:	230f      	movs	r3, #15
10008eac:	18fb      	adds	r3, r7, r3
10008eae:	2201      	movs	r2, #1
10008eb0:	4c0e      	ldr	r4, [pc, #56]	; (10008eec <mpu_set_compass_sample_rate+0x9c>)
10008eb2:	47a0      	blx	r4
10008eb4:	1e03      	subs	r3, r0, #0
10008eb6:	d002      	beq.n	10008ebe <mpu_set_compass_sample_rate+0x6e>
    return -1;
10008eb8:	2301      	movs	r3, #1
10008eba:	425b      	negs	r3, r3
10008ebc:	e00e      	b.n	10008edc <mpu_set_compass_sample_rate+0x8c>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008ebe:	4b09      	ldr	r3, [pc, #36]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008ec0:	89db      	ldrh	r3, [r3, #14]
10008ec2:	0018      	movs	r0, r3
10008ec4:	230f      	movs	r3, #15
10008ec6:	18fb      	adds	r3, r7, r3
10008ec8:	781b      	ldrb	r3, [r3, #0]
10008eca:	1c5a      	adds	r2, r3, #1
10008ecc:	4b08      	ldr	r3, [pc, #32]	; (10008ef0 <mpu_set_compass_sample_rate+0xa0>)
10008ece:	0011      	movs	r1, r2
10008ed0:	4798      	blx	r3
10008ed2:	0003      	movs	r3, r0
10008ed4:	b29a      	uxth	r2, r3
10008ed6:	4b03      	ldr	r3, [pc, #12]	; (10008ee4 <mpu_set_compass_sample_rate+0x94>)
10008ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
10008eda:	2300      	movs	r3, #0
    #else
    return -1;
    #endif
}
10008edc:	0018      	movs	r0, r3
10008ede:	46bd      	mov	sp, r7
10008ee0:	b005      	add	sp, #20
10008ee2:	bd90      	pop	{r4, r7, pc}
10008ee4:	1001b844 	.word	0x1001b844
10008ee8:	100170a5 	.word	0x100170a5
10008eec:	100080d5 	.word	0x100080d5
10008ef0:	100171b9 	.word	0x100171b9

10008ef4 <mpu_configure_fifo>:
*  \n INV_XYZ_ACCEL
*  @param[in]  sensors Mask of sensors to push to FIFO.
*  @return     0 if successful.
*/
int mpu_configure_fifo(unsigned char sensors)
{
10008ef4:	b580      	push	{r7, lr}
10008ef6:	b084      	sub	sp, #16
10008ef8:	af00      	add	r7, sp, #0
10008efa:	0002      	movs	r2, r0
10008efc:	1dfb      	adds	r3, r7, #7
10008efe:	701a      	strb	r2, [r3, #0]
    unsigned char prev;
    int result = 0;
10008f00:	2300      	movs	r3, #0
10008f02:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008f04:	1dfb      	adds	r3, r7, #7
10008f06:	1dfa      	adds	r2, r7, #7
10008f08:	7812      	ldrb	r2, [r2, #0]
10008f0a:	2101      	movs	r1, #1
10008f0c:	438a      	bics	r2, r1
10008f0e:	701a      	strb	r2, [r3, #0]

    if (st.chip_cfg.dmp_on)
10008f10:	4b25      	ldr	r3, [pc, #148]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f12:	2224      	movs	r2, #36	; 0x24
10008f14:	5c9b      	ldrb	r3, [r3, r2]
10008f16:	2b00      	cmp	r3, #0
10008f18:	d001      	beq.n	10008f1e <mpu_configure_fifo+0x2a>
    return 0;
10008f1a:	2300      	movs	r3, #0
10008f1c:	e03f      	b.n	10008f9e <mpu_configure_fifo+0xaa>
    else {
        if (!(st.chip_cfg.sensors))
10008f1e:	4b22      	ldr	r3, [pc, #136]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f20:	7a9b      	ldrb	r3, [r3, #10]
10008f22:	2b00      	cmp	r3, #0
10008f24:	d102      	bne.n	10008f2c <mpu_configure_fifo+0x38>
        return -1;
10008f26:	2301      	movs	r3, #1
10008f28:	425b      	negs	r3, r3
10008f2a:	e038      	b.n	10008f9e <mpu_configure_fifo+0xaa>
        prev = st.chip_cfg.fifo_enable;
10008f2c:	230b      	movs	r3, #11
10008f2e:	18fb      	adds	r3, r7, r3
10008f30:	4a1d      	ldr	r2, [pc, #116]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f32:	7c12      	ldrb	r2, [r2, #16]
10008f34:	701a      	strb	r2, [r3, #0]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008f36:	4b1c      	ldr	r3, [pc, #112]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f38:	7a9b      	ldrb	r3, [r3, #10]
10008f3a:	1dfa      	adds	r2, r7, #7
10008f3c:	7812      	ldrb	r2, [r2, #0]
10008f3e:	4013      	ands	r3, r2
10008f40:	b2da      	uxtb	r2, r3
10008f42:	4b19      	ldr	r3, [pc, #100]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f44:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008f46:	4b18      	ldr	r3, [pc, #96]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f48:	7c1b      	ldrb	r3, [r3, #16]
10008f4a:	1dfa      	adds	r2, r7, #7
10008f4c:	7812      	ldrb	r2, [r2, #0]
10008f4e:	429a      	cmp	r2, r3
10008f50:	d003      	beq.n	10008f5a <mpu_configure_fifo+0x66>
        /* You're not getting what you asked for. Some sensors are
        * asleep.
        */
        result = -1;
10008f52:	2301      	movs	r3, #1
10008f54:	425b      	negs	r3, r3
10008f56:	60fb      	str	r3, [r7, #12]
10008f58:	e001      	b.n	10008f5e <mpu_configure_fifo+0x6a>
        else
        result = 0;
10008f5a:	2300      	movs	r3, #0
10008f5c:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
10008f5e:	1dfb      	adds	r3, r7, #7
10008f60:	781b      	ldrb	r3, [r3, #0]
10008f62:	2b00      	cmp	r3, #0
10008f64:	d103      	bne.n	10008f6e <mpu_configure_fifo+0x7a>
10008f66:	4b10      	ldr	r3, [pc, #64]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f68:	7d1b      	ldrb	r3, [r3, #20]
10008f6a:	2b00      	cmp	r3, #0
10008f6c:	d003      	beq.n	10008f76 <mpu_configure_fifo+0x82>
        set_int_enable(1);
10008f6e:	2001      	movs	r0, #1
10008f70:	4b0e      	ldr	r3, [pc, #56]	; (10008fac <mpu_configure_fifo+0xb8>)
10008f72:	4798      	blx	r3
10008f74:	e002      	b.n	10008f7c <mpu_configure_fifo+0x88>
        else
        set_int_enable(0);
10008f76:	2000      	movs	r0, #0
10008f78:	4b0c      	ldr	r3, [pc, #48]	; (10008fac <mpu_configure_fifo+0xb8>)
10008f7a:	4798      	blx	r3
        if (sensors) {
10008f7c:	1dfb      	adds	r3, r7, #7
10008f7e:	781b      	ldrb	r3, [r3, #0]
10008f80:	2b00      	cmp	r3, #0
10008f82:	d00b      	beq.n	10008f9c <mpu_configure_fifo+0xa8>
            if (mpu_reset_fifo()) {
10008f84:	4b0a      	ldr	r3, [pc, #40]	; (10008fb0 <mpu_configure_fifo+0xbc>)
10008f86:	4798      	blx	r3
10008f88:	1e03      	subs	r3, r0, #0
10008f8a:	d007      	beq.n	10008f9c <mpu_configure_fifo+0xa8>
                st.chip_cfg.fifo_enable = prev;
10008f8c:	4b06      	ldr	r3, [pc, #24]	; (10008fa8 <mpu_configure_fifo+0xb4>)
10008f8e:	220b      	movs	r2, #11
10008f90:	18ba      	adds	r2, r7, r2
10008f92:	7812      	ldrb	r2, [r2, #0]
10008f94:	741a      	strb	r2, [r3, #16]
                return -1;
10008f96:	2301      	movs	r3, #1
10008f98:	425b      	negs	r3, r3
10008f9a:	e000      	b.n	10008f9e <mpu_configure_fifo+0xaa>
            }
        }
    }

    return result;
10008f9c:	68fb      	ldr	r3, [r7, #12]
}
10008f9e:	0018      	movs	r0, r3
10008fa0:	46bd      	mov	sp, r7
10008fa2:	b004      	add	sp, #16
10008fa4:	bd80      	pop	{r7, pc}
10008fa6:	46c0      	nop			; (mov r8, r8)
10008fa8:	1001b844 	.word	0x1001b844
10008fac:	100083ad 	.word	0x100083ad
10008fb0:	100087d9 	.word	0x100087d9

10008fb4 <mpu_set_sensors>:
*  \n INV_XYZ_COMPASS
*  @param[in]  sensors    Mask of sensors to wake.
*  @return     0 if successful.
*/
int mpu_set_sensors(unsigned char sensors)
{
10008fb4:	b590      	push	{r4, r7, lr}
10008fb6:	b085      	sub	sp, #20
10008fb8:	af00      	add	r7, sp, #0
10008fba:	0002      	movs	r2, r0
10008fbc:	1dfb      	adds	r3, r7, #7
10008fbe:	701a      	strb	r2, [r3, #0]
    unsigned char data;
    #ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
    #endif

    if (sensors & INV_XYZ_GYRO)
10008fc0:	1dfb      	adds	r3, r7, #7
10008fc2:	781b      	ldrb	r3, [r3, #0]
10008fc4:	2270      	movs	r2, #112	; 0x70
10008fc6:	4013      	ands	r3, r2
10008fc8:	d004      	beq.n	10008fd4 <mpu_set_sensors+0x20>
    data = INV_CLK_PLL;
10008fca:	230f      	movs	r3, #15
10008fcc:	18fb      	adds	r3, r7, r3
10008fce:	2201      	movs	r2, #1
10008fd0:	701a      	strb	r2, [r3, #0]
10008fd2:	e00c      	b.n	10008fee <mpu_set_sensors+0x3a>
    else if (sensors)
10008fd4:	1dfb      	adds	r3, r7, #7
10008fd6:	781b      	ldrb	r3, [r3, #0]
10008fd8:	2b00      	cmp	r3, #0
10008fda:	d004      	beq.n	10008fe6 <mpu_set_sensors+0x32>
    data = 0;
10008fdc:	230f      	movs	r3, #15
10008fde:	18fb      	adds	r3, r7, r3
10008fe0:	2200      	movs	r2, #0
10008fe2:	701a      	strb	r2, [r3, #0]
10008fe4:	e003      	b.n	10008fee <mpu_set_sensors+0x3a>
    else
    data = BIT_SLEEP;
10008fe6:	230f      	movs	r3, #15
10008fe8:	18fb      	adds	r3, r7, r3
10008fea:	2240      	movs	r2, #64	; 0x40
10008fec:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fee:	4b77      	ldr	r3, [pc, #476]	; (100091cc <mpu_set_sensors+0x218>)
10008ff0:	685b      	ldr	r3, [r3, #4]
10008ff2:	7818      	ldrb	r0, [r3, #0]
10008ff4:	4b75      	ldr	r3, [pc, #468]	; (100091cc <mpu_set_sensors+0x218>)
10008ff6:	681b      	ldr	r3, [r3, #0]
10008ff8:	7d59      	ldrb	r1, [r3, #21]
10008ffa:	230f      	movs	r3, #15
10008ffc:	18fb      	adds	r3, r7, r3
10008ffe:	2201      	movs	r2, #1
10009000:	4c73      	ldr	r4, [pc, #460]	; (100091d0 <mpu_set_sensors+0x21c>)
10009002:	47a0      	blx	r4
10009004:	1e03      	subs	r3, r0, #0
10009006:	d005      	beq.n	10009014 <mpu_set_sensors+0x60>
        st.chip_cfg.sensors = 0;
10009008:	4b70      	ldr	r3, [pc, #448]	; (100091cc <mpu_set_sensors+0x218>)
1000900a:	2200      	movs	r2, #0
1000900c:	729a      	strb	r2, [r3, #10]
        return -1;
1000900e:	2301      	movs	r3, #1
10009010:	425b      	negs	r3, r3
10009012:	e0d6      	b.n	100091c2 <mpu_set_sensors+0x20e>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009014:	230f      	movs	r3, #15
10009016:	18fb      	adds	r3, r7, r3
10009018:	781b      	ldrb	r3, [r3, #0]
1000901a:	2240      	movs	r2, #64	; 0x40
1000901c:	4393      	bics	r3, r2
1000901e:	b2da      	uxtb	r2, r3
10009020:	4b6a      	ldr	r3, [pc, #424]	; (100091cc <mpu_set_sensors+0x218>)
10009022:	731a      	strb	r2, [r3, #12]

    data = 0;
10009024:	230f      	movs	r3, #15
10009026:	18fb      	adds	r3, r7, r3
10009028:	2200      	movs	r2, #0
1000902a:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_X_GYRO))
1000902c:	1dfb      	adds	r3, r7, #7
1000902e:	781b      	ldrb	r3, [r3, #0]
10009030:	2240      	movs	r2, #64	; 0x40
10009032:	4013      	ands	r3, r2
10009034:	d108      	bne.n	10009048 <mpu_set_sensors+0x94>
    data |= BIT_STBY_XG;
10009036:	230f      	movs	r3, #15
10009038:	18fb      	adds	r3, r7, r3
1000903a:	781b      	ldrb	r3, [r3, #0]
1000903c:	2204      	movs	r2, #4
1000903e:	4313      	orrs	r3, r2
10009040:	b2da      	uxtb	r2, r3
10009042:	230f      	movs	r3, #15
10009044:	18fb      	adds	r3, r7, r3
10009046:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_Y_GYRO))
10009048:	1dfb      	adds	r3, r7, #7
1000904a:	781b      	ldrb	r3, [r3, #0]
1000904c:	2220      	movs	r2, #32
1000904e:	4013      	ands	r3, r2
10009050:	d108      	bne.n	10009064 <mpu_set_sensors+0xb0>
    data |= BIT_STBY_YG;
10009052:	230f      	movs	r3, #15
10009054:	18fb      	adds	r3, r7, r3
10009056:	781b      	ldrb	r3, [r3, #0]
10009058:	2202      	movs	r2, #2
1000905a:	4313      	orrs	r3, r2
1000905c:	b2da      	uxtb	r2, r3
1000905e:	230f      	movs	r3, #15
10009060:	18fb      	adds	r3, r7, r3
10009062:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_Z_GYRO))
10009064:	1dfb      	adds	r3, r7, #7
10009066:	781b      	ldrb	r3, [r3, #0]
10009068:	2210      	movs	r2, #16
1000906a:	4013      	ands	r3, r2
1000906c:	d108      	bne.n	10009080 <mpu_set_sensors+0xcc>
    data |= BIT_STBY_ZG;
1000906e:	230f      	movs	r3, #15
10009070:	18fb      	adds	r3, r7, r3
10009072:	781b      	ldrb	r3, [r3, #0]
10009074:	2201      	movs	r2, #1
10009076:	4313      	orrs	r3, r2
10009078:	b2da      	uxtb	r2, r3
1000907a:	230f      	movs	r3, #15
1000907c:	18fb      	adds	r3, r7, r3
1000907e:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10009080:	1dfb      	adds	r3, r7, #7
10009082:	781b      	ldrb	r3, [r3, #0]
10009084:	2208      	movs	r2, #8
10009086:	4013      	ands	r3, r2
10009088:	d108      	bne.n	1000909c <mpu_set_sensors+0xe8>
    data |= BIT_STBY_XYZA;
1000908a:	230f      	movs	r3, #15
1000908c:	18fb      	adds	r3, r7, r3
1000908e:	781b      	ldrb	r3, [r3, #0]
10009090:	2238      	movs	r2, #56	; 0x38
10009092:	4313      	orrs	r3, r2
10009094:	b2da      	uxtb	r2, r3
10009096:	230f      	movs	r3, #15
10009098:	18fb      	adds	r3, r7, r3
1000909a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
1000909c:	4b4b      	ldr	r3, [pc, #300]	; (100091cc <mpu_set_sensors+0x218>)
1000909e:	685b      	ldr	r3, [r3, #4]
100090a0:	7818      	ldrb	r0, [r3, #0]
100090a2:	4b4a      	ldr	r3, [pc, #296]	; (100091cc <mpu_set_sensors+0x218>)
100090a4:	681b      	ldr	r3, [r3, #0]
100090a6:	7d99      	ldrb	r1, [r3, #22]
100090a8:	230f      	movs	r3, #15
100090aa:	18fb      	adds	r3, r7, r3
100090ac:	2201      	movs	r2, #1
100090ae:	4c48      	ldr	r4, [pc, #288]	; (100091d0 <mpu_set_sensors+0x21c>)
100090b0:	47a0      	blx	r4
100090b2:	1e03      	subs	r3, r0, #0
100090b4:	d005      	beq.n	100090c2 <mpu_set_sensors+0x10e>
        st.chip_cfg.sensors = 0;
100090b6:	4b45      	ldr	r3, [pc, #276]	; (100091cc <mpu_set_sensors+0x218>)
100090b8:	2200      	movs	r2, #0
100090ba:	729a      	strb	r2, [r3, #10]
        return -1;
100090bc:	2301      	movs	r3, #1
100090be:	425b      	negs	r3, r3
100090c0:	e07f      	b.n	100091c2 <mpu_set_sensors+0x20e>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
100090c2:	1dfb      	adds	r3, r7, #7
100090c4:	781b      	ldrb	r3, [r3, #0]
100090c6:	2b00      	cmp	r3, #0
100090c8:	d006      	beq.n	100090d8 <mpu_set_sensors+0x124>
100090ca:	1dfb      	adds	r3, r7, #7
100090cc:	781b      	ldrb	r3, [r3, #0]
100090ce:	2b08      	cmp	r3, #8
100090d0:	d002      	beq.n	100090d8 <mpu_set_sensors+0x124>
    /* Latched interrupts only used in LP accel mode. */
    mpu_set_int_latched(0);
100090d2:	2000      	movs	r0, #0
100090d4:	4b3f      	ldr	r3, [pc, #252]	; (100091d4 <mpu_set_sensors+0x220>)
100090d6:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100090d8:	4b3c      	ldr	r3, [pc, #240]	; (100091cc <mpu_set_sensors+0x218>)
100090da:	685b      	ldr	r3, [r3, #4]
100090dc:	7818      	ldrb	r0, [r3, #0]
100090de:	4b3b      	ldr	r3, [pc, #236]	; (100091cc <mpu_set_sensors+0x218>)
100090e0:	681b      	ldr	r3, [r3, #0]
100090e2:	7919      	ldrb	r1, [r3, #4]
100090e4:	230e      	movs	r3, #14
100090e6:	18fb      	adds	r3, r7, r3
100090e8:	2201      	movs	r2, #1
100090ea:	4c3b      	ldr	r4, [pc, #236]	; (100091d8 <mpu_set_sensors+0x224>)
100090ec:	47a0      	blx	r4
100090ee:	1e03      	subs	r3, r0, #0
100090f0:	d002      	beq.n	100090f8 <mpu_set_sensors+0x144>
    return -1;
100090f2:	2301      	movs	r3, #1
100090f4:	425b      	negs	r3, r3
100090f6:	e064      	b.n	100091c2 <mpu_set_sensors+0x20e>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100090f8:	1dfb      	adds	r3, r7, #7
100090fa:	781b      	ldrb	r3, [r3, #0]
100090fc:	2201      	movs	r2, #1
100090fe:	4013      	ands	r3, r2
10009100:	d00d      	beq.n	1000911e <mpu_set_sensors+0x16a>
        data = AKM_SINGLE_MEASUREMENT;
10009102:	230f      	movs	r3, #15
10009104:	18fb      	adds	r3, r7, r3
10009106:	2211      	movs	r2, #17
10009108:	701a      	strb	r2, [r3, #0]
        user_ctrl |= BIT_AUX_IF_EN;
1000910a:	230e      	movs	r3, #14
1000910c:	18fb      	adds	r3, r7, r3
1000910e:	781b      	ldrb	r3, [r3, #0]
10009110:	2220      	movs	r2, #32
10009112:	4313      	orrs	r3, r2
10009114:	b2da      	uxtb	r2, r3
10009116:	230e      	movs	r3, #14
10009118:	18fb      	adds	r3, r7, r3
1000911a:	701a      	strb	r2, [r3, #0]
1000911c:	e00c      	b.n	10009138 <mpu_set_sensors+0x184>
        } else {
        data = AKM_POWER_DOWN;
1000911e:	230f      	movs	r3, #15
10009120:	18fb      	adds	r3, r7, r3
10009122:	2210      	movs	r2, #16
10009124:	701a      	strb	r2, [r3, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009126:	230e      	movs	r3, #14
10009128:	18fb      	adds	r3, r7, r3
1000912a:	781b      	ldrb	r3, [r3, #0]
1000912c:	2220      	movs	r2, #32
1000912e:	4393      	bics	r3, r2
10009130:	b2da      	uxtb	r2, r3
10009132:	230e      	movs	r3, #14
10009134:	18fb      	adds	r3, r7, r3
10009136:	701a      	strb	r2, [r3, #0]
    }
    if (st.chip_cfg.dmp_on)
10009138:	4b24      	ldr	r3, [pc, #144]	; (100091cc <mpu_set_sensors+0x218>)
1000913a:	2224      	movs	r2, #36	; 0x24
1000913c:	5c9b      	ldrb	r3, [r3, r2]
1000913e:	2b00      	cmp	r3, #0
10009140:	d00a      	beq.n	10009158 <mpu_set_sensors+0x1a4>
    user_ctrl |= BIT_DMP_EN;
10009142:	230e      	movs	r3, #14
10009144:	18fb      	adds	r3, r7, r3
10009146:	781b      	ldrb	r3, [r3, #0]
10009148:	2280      	movs	r2, #128	; 0x80
1000914a:	4252      	negs	r2, r2
1000914c:	4313      	orrs	r3, r2
1000914e:	b2da      	uxtb	r2, r3
10009150:	230e      	movs	r3, #14
10009152:	18fb      	adds	r3, r7, r3
10009154:	701a      	strb	r2, [r3, #0]
10009156:	e008      	b.n	1000916a <mpu_set_sensors+0x1b6>
    else
    user_ctrl &= ~BIT_DMP_EN;
10009158:	230e      	movs	r3, #14
1000915a:	18fb      	adds	r3, r7, r3
1000915c:	781b      	ldrb	r3, [r3, #0]
1000915e:	227f      	movs	r2, #127	; 0x7f
10009160:	4013      	ands	r3, r2
10009162:	b2da      	uxtb	r2, r3
10009164:	230e      	movs	r3, #14
10009166:	18fb      	adds	r3, r7, r3
10009168:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
1000916a:	4b18      	ldr	r3, [pc, #96]	; (100091cc <mpu_set_sensors+0x218>)
1000916c:	685b      	ldr	r3, [r3, #4]
1000916e:	7818      	ldrb	r0, [r3, #0]
10009170:	4b16      	ldr	r3, [pc, #88]	; (100091cc <mpu_set_sensors+0x218>)
10009172:	681b      	ldr	r3, [r3, #0]
10009174:	2226      	movs	r2, #38	; 0x26
10009176:	5c99      	ldrb	r1, [r3, r2]
10009178:	230f      	movs	r3, #15
1000917a:	18fb      	adds	r3, r7, r3
1000917c:	2201      	movs	r2, #1
1000917e:	4c14      	ldr	r4, [pc, #80]	; (100091d0 <mpu_set_sensors+0x21c>)
10009180:	47a0      	blx	r4
10009182:	1e03      	subs	r3, r0, #0
10009184:	d002      	beq.n	1000918c <mpu_set_sensors+0x1d8>
    return -1;
10009186:	2301      	movs	r3, #1
10009188:	425b      	negs	r3, r3
1000918a:	e01a      	b.n	100091c2 <mpu_set_sensors+0x20e>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000918c:	4b0f      	ldr	r3, [pc, #60]	; (100091cc <mpu_set_sensors+0x218>)
1000918e:	685b      	ldr	r3, [r3, #4]
10009190:	7818      	ldrb	r0, [r3, #0]
10009192:	4b0e      	ldr	r3, [pc, #56]	; (100091cc <mpu_set_sensors+0x218>)
10009194:	681b      	ldr	r3, [r3, #0]
10009196:	7919      	ldrb	r1, [r3, #4]
10009198:	230e      	movs	r3, #14
1000919a:	18fb      	adds	r3, r7, r3
1000919c:	2201      	movs	r2, #1
1000919e:	4c0c      	ldr	r4, [pc, #48]	; (100091d0 <mpu_set_sensors+0x21c>)
100091a0:	47a0      	blx	r4
100091a2:	1e03      	subs	r3, r0, #0
100091a4:	d002      	beq.n	100091ac <mpu_set_sensors+0x1f8>
    return -1;
100091a6:	2301      	movs	r3, #1
100091a8:	425b      	negs	r3, r3
100091aa:	e00a      	b.n	100091c2 <mpu_set_sensors+0x20e>
    #endif
    #endif

    st.chip_cfg.sensors = sensors;
100091ac:	4b07      	ldr	r3, [pc, #28]	; (100091cc <mpu_set_sensors+0x218>)
100091ae:	1dfa      	adds	r2, r7, #7
100091b0:	7812      	ldrb	r2, [r2, #0]
100091b2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
100091b4:	4b05      	ldr	r3, [pc, #20]	; (100091cc <mpu_set_sensors+0x218>)
100091b6:	2200      	movs	r2, #0
100091b8:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
100091ba:	2032      	movs	r0, #50	; 0x32
100091bc:	4b07      	ldr	r3, [pc, #28]	; (100091dc <mpu_set_sensors+0x228>)
100091be:	4798      	blx	r3
    return 0;
100091c0:	2300      	movs	r3, #0
}
100091c2:	0018      	movs	r0, r3
100091c4:	46bd      	mov	sp, r7
100091c6:	b005      	add	sp, #20
100091c8:	bd90      	pop	{r4, r7, pc}
100091ca:	46c0      	nop			; (mov r8, r8)
100091cc:	1001b844 	.word	0x1001b844
100091d0:	100080d5 	.word	0x100080d5
100091d4:	10009529 	.word	0x10009529
100091d8:	100081e9 	.word	0x100081e9
100091dc:	1000c4b9 	.word	0x1000c4b9

100091e0 <mpu_read_fifo_stream>:
*  @param[in]  data    FIFO packet.
*  @param[in]  more    Number of remaining packets.
*/
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
unsigned char *more)
{
100091e0:	b590      	push	{r4, r7, lr}
100091e2:	b087      	sub	sp, #28
100091e4:	af00      	add	r7, sp, #0
100091e6:	60b9      	str	r1, [r7, #8]
100091e8:	607a      	str	r2, [r7, #4]
100091ea:	230e      	movs	r3, #14
100091ec:	18fb      	adds	r3, r7, r3
100091ee:	1c02      	adds	r2, r0, #0
100091f0:	801a      	strh	r2, [r3, #0]
    //DBG_LOG_DEV("[mpu_read_fifo_stream] IN");
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on) {
100091f2:	4b48      	ldr	r3, [pc, #288]	; (10009314 <mpu_read_fifo_stream+0x134>)
100091f4:	2224      	movs	r2, #36	; 0x24
100091f6:	5c9b      	ldrb	r3, [r3, r2]
100091f8:	2b00      	cmp	r3, #0
100091fa:	d106      	bne.n	1000920a <mpu_read_fifo_stream+0x2a>
        printf("DMP_ON!\n\r");
100091fc:	4b46      	ldr	r3, [pc, #280]	; (10009318 <mpu_read_fifo_stream+0x138>)
100091fe:	0018      	movs	r0, r3
10009200:	4b46      	ldr	r3, [pc, #280]	; (1000931c <mpu_read_fifo_stream+0x13c>)
10009202:	4798      	blx	r3
        return -1;
10009204:	2301      	movs	r3, #1
10009206:	425b      	negs	r3, r3
10009208:	e07f      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
    }
    if (!st.chip_cfg.sensors) {
1000920a:	4b42      	ldr	r3, [pc, #264]	; (10009314 <mpu_read_fifo_stream+0x134>)
1000920c:	7a9b      	ldrb	r3, [r3, #10]
1000920e:	2b00      	cmp	r3, #0
10009210:	d106      	bne.n	10009220 <mpu_read_fifo_stream+0x40>
        printf("SENSORS!\n\r");
10009212:	4b43      	ldr	r3, [pc, #268]	; (10009320 <mpu_read_fifo_stream+0x140>)
10009214:	0018      	movs	r0, r3
10009216:	4b41      	ldr	r3, [pc, #260]	; (1000931c <mpu_read_fifo_stream+0x13c>)
10009218:	4798      	blx	r3
        return -1;
1000921a:	2301      	movs	r3, #1
1000921c:	425b      	negs	r3, r3
1000921e:	e074      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp)) return -1;
10009220:	4b3c      	ldr	r3, [pc, #240]	; (10009314 <mpu_read_fifo_stream+0x134>)
10009222:	685b      	ldr	r3, [r3, #4]
10009224:	7818      	ldrb	r0, [r3, #0]
10009226:	4b3b      	ldr	r3, [pc, #236]	; (10009314 <mpu_read_fifo_stream+0x134>)
10009228:	681b      	ldr	r3, [r3, #0]
1000922a:	7b19      	ldrb	r1, [r3, #12]
1000922c:	2314      	movs	r3, #20
1000922e:	18fb      	adds	r3, r7, r3
10009230:	2202      	movs	r2, #2
10009232:	4c3c      	ldr	r4, [pc, #240]	; (10009324 <mpu_read_fifo_stream+0x144>)
10009234:	47a0      	blx	r4
10009236:	1e03      	subs	r3, r0, #0
10009238:	d002      	beq.n	10009240 <mpu_read_fifo_stream+0x60>
1000923a:	2301      	movs	r3, #1
1000923c:	425b      	negs	r3, r3
1000923e:	e064      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
    fifo_count = (tmp[0] << 8) | tmp[1];
10009240:	2314      	movs	r3, #20
10009242:	18fb      	adds	r3, r7, r3
10009244:	781b      	ldrb	r3, [r3, #0]
10009246:	021b      	lsls	r3, r3, #8
10009248:	b21a      	sxth	r2, r3
1000924a:	2314      	movs	r3, #20
1000924c:	18fb      	adds	r3, r7, r3
1000924e:	785b      	ldrb	r3, [r3, #1]
10009250:	b21b      	sxth	r3, r3
10009252:	4313      	orrs	r3, r2
10009254:	b21a      	sxth	r2, r3
10009256:	2316      	movs	r3, #22
10009258:	18fb      	adds	r3, r7, r3
1000925a:	801a      	strh	r2, [r3, #0]
    //DBG_LOG_DEV("[mpu_read_fifo_stream]\n\r  length: %d, fifo count: %d", length, fifo_count);
    if (fifo_count < length) {
1000925c:	2316      	movs	r3, #22
1000925e:	18fa      	adds	r2, r7, r3
10009260:	230e      	movs	r3, #14
10009262:	18fb      	adds	r3, r7, r3
10009264:	8812      	ldrh	r2, [r2, #0]
10009266:	881b      	ldrh	r3, [r3, #0]
10009268:	429a      	cmp	r2, r3
1000926a:	d205      	bcs.n	10009278 <mpu_read_fifo_stream+0x98>
        more[0] = 0;
1000926c:	687b      	ldr	r3, [r7, #4]
1000926e:	2200      	movs	r2, #0
10009270:	701a      	strb	r2, [r3, #0]
        return -1;
10009272:	2301      	movs	r3, #1
10009274:	425b      	negs	r3, r3
10009276:	e048      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10009278:	4b26      	ldr	r3, [pc, #152]	; (10009314 <mpu_read_fifo_stream+0x134>)
1000927a:	685b      	ldr	r3, [r3, #4]
1000927c:	885b      	ldrh	r3, [r3, #2]
1000927e:	085b      	lsrs	r3, r3, #1
10009280:	b29b      	uxth	r3, r3
10009282:	2216      	movs	r2, #22
10009284:	18ba      	adds	r2, r7, r2
10009286:	8812      	ldrh	r2, [r2, #0]
10009288:	429a      	cmp	r2, r3
1000928a:	d91b      	bls.n	100092c4 <mpu_read_fifo_stream+0xe4>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp)) return -1;
1000928c:	4b21      	ldr	r3, [pc, #132]	; (10009314 <mpu_read_fifo_stream+0x134>)
1000928e:	685b      	ldr	r3, [r3, #4]
10009290:	7818      	ldrb	r0, [r3, #0]
10009292:	4b20      	ldr	r3, [pc, #128]	; (10009314 <mpu_read_fifo_stream+0x134>)
10009294:	681b      	ldr	r3, [r3, #0]
10009296:	7cd9      	ldrb	r1, [r3, #19]
10009298:	2314      	movs	r3, #20
1000929a:	18fb      	adds	r3, r7, r3
1000929c:	2201      	movs	r2, #1
1000929e:	4c21      	ldr	r4, [pc, #132]	; (10009324 <mpu_read_fifo_stream+0x144>)
100092a0:	47a0      	blx	r4
100092a2:	1e03      	subs	r3, r0, #0
100092a4:	d002      	beq.n	100092ac <mpu_read_fifo_stream+0xcc>
100092a6:	2301      	movs	r3, #1
100092a8:	425b      	negs	r3, r3
100092aa:	e02e      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
100092ac:	2314      	movs	r3, #20
100092ae:	18fb      	adds	r3, r7, r3
100092b0:	781b      	ldrb	r3, [r3, #0]
100092b2:	001a      	movs	r2, r3
100092b4:	2310      	movs	r3, #16
100092b6:	4013      	ands	r3, r2
100092b8:	d004      	beq.n	100092c4 <mpu_read_fifo_stream+0xe4>
            mpu_reset_fifo();
100092ba:	4b1b      	ldr	r3, [pc, #108]	; (10009328 <mpu_read_fifo_stream+0x148>)
100092bc:	4798      	blx	r3
            return -2;
100092be:	2302      	movs	r3, #2
100092c0:	425b      	negs	r3, r3
100092c2:	e022      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data)) return -1;
100092c4:	4b13      	ldr	r3, [pc, #76]	; (10009314 <mpu_read_fifo_stream+0x134>)
100092c6:	685b      	ldr	r3, [r3, #4]
100092c8:	7818      	ldrb	r0, [r3, #0]
100092ca:	4b12      	ldr	r3, [pc, #72]	; (10009314 <mpu_read_fifo_stream+0x134>)
100092cc:	681b      	ldr	r3, [r3, #0]
100092ce:	7b59      	ldrb	r1, [r3, #13]
100092d0:	230e      	movs	r3, #14
100092d2:	18fb      	adds	r3, r7, r3
100092d4:	881b      	ldrh	r3, [r3, #0]
100092d6:	b2da      	uxtb	r2, r3
100092d8:	68bb      	ldr	r3, [r7, #8]
100092da:	4c12      	ldr	r4, [pc, #72]	; (10009324 <mpu_read_fifo_stream+0x144>)
100092dc:	47a0      	blx	r4
100092de:	1e03      	subs	r3, r0, #0
100092e0:	d002      	beq.n	100092e8 <mpu_read_fifo_stream+0x108>
100092e2:	2301      	movs	r3, #1
100092e4:	425b      	negs	r3, r3
100092e6:	e010      	b.n	1000930a <mpu_read_fifo_stream+0x12a>
    more[0] = fifo_count / length - 1;
100092e8:	2316      	movs	r3, #22
100092ea:	18fa      	adds	r2, r7, r3
100092ec:	230e      	movs	r3, #14
100092ee:	18fb      	adds	r3, r7, r3
100092f0:	8812      	ldrh	r2, [r2, #0]
100092f2:	8819      	ldrh	r1, [r3, #0]
100092f4:	4b0d      	ldr	r3, [pc, #52]	; (1000932c <mpu_read_fifo_stream+0x14c>)
100092f6:	0010      	movs	r0, r2
100092f8:	4798      	blx	r3
100092fa:	0003      	movs	r3, r0
100092fc:	b29b      	uxth	r3, r3
100092fe:	b2db      	uxtb	r3, r3
10009300:	3b01      	subs	r3, #1
10009302:	b2da      	uxtb	r2, r3
10009304:	687b      	ldr	r3, [r7, #4]
10009306:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_DEV("[mpu_read_fifo_stream] OUT");
    return 0;
10009308:	2300      	movs	r3, #0
}
1000930a:	0018      	movs	r0, r3
1000930c:	46bd      	mov	sp, r7
1000930e:	b007      	add	sp, #28
10009310:	bd90      	pop	{r4, r7, pc}
10009312:	46c0      	nop			; (mov r8, r8)
10009314:	1001b844 	.word	0x1001b844
10009318:	1001a038 	.word	0x1001a038
1000931c:	10018f75 	.word	0x10018f75
10009320:	1001a044 	.word	0x1001a044
10009324:	100081e9 	.word	0x100081e9
10009328:	100087d9 	.word	0x100087d9
1000932c:	100170a5 	.word	0x100170a5

10009330 <mpu_set_bypass>:
*  @brief      Set device to bypass mode.
*  @param[in]  bypass_on   1 to enable bypass mode.
*  @return     0 if successful.
*/
int mpu_set_bypass(unsigned char bypass_on)
{
10009330:	b590      	push	{r4, r7, lr}
10009332:	b085      	sub	sp, #20
10009334:	af00      	add	r7, sp, #0
10009336:	0002      	movs	r2, r0
10009338:	1dfb      	adds	r3, r7, #7
1000933a:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
1000933c:	4b6d      	ldr	r3, [pc, #436]	; (100094f4 <mpu_set_bypass+0x1c4>)
1000933e:	7c9b      	ldrb	r3, [r3, #18]
10009340:	1dfa      	adds	r2, r7, #7
10009342:	7812      	ldrb	r2, [r2, #0]
10009344:	429a      	cmp	r2, r3
10009346:	d101      	bne.n	1000934c <mpu_set_bypass+0x1c>
    return 0;
10009348:	2300      	movs	r3, #0
1000934a:	e0ce      	b.n	100094ea <mpu_set_bypass+0x1ba>

    if (bypass_on) {
1000934c:	1dfb      	adds	r3, r7, #7
1000934e:	781b      	ldrb	r3, [r3, #0]
10009350:	2b00      	cmp	r3, #0
10009352:	d05d      	beq.n	10009410 <mpu_set_bypass+0xe0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009354:	4b67      	ldr	r3, [pc, #412]	; (100094f4 <mpu_set_bypass+0x1c4>)
10009356:	685b      	ldr	r3, [r3, #4]
10009358:	7818      	ldrb	r0, [r3, #0]
1000935a:	4b66      	ldr	r3, [pc, #408]	; (100094f4 <mpu_set_bypass+0x1c4>)
1000935c:	681b      	ldr	r3, [r3, #0]
1000935e:	7919      	ldrb	r1, [r3, #4]
10009360:	230f      	movs	r3, #15
10009362:	18fb      	adds	r3, r7, r3
10009364:	2201      	movs	r2, #1
10009366:	4c64      	ldr	r4, [pc, #400]	; (100094f8 <mpu_set_bypass+0x1c8>)
10009368:	47a0      	blx	r4
1000936a:	1e03      	subs	r3, r0, #0
1000936c:	d002      	beq.n	10009374 <mpu_set_bypass+0x44>
        return -1;
1000936e:	2301      	movs	r3, #1
10009370:	425b      	negs	r3, r3
10009372:	e0ba      	b.n	100094ea <mpu_set_bypass+0x1ba>
        tmp &= ~BIT_AUX_IF_EN;
10009374:	230f      	movs	r3, #15
10009376:	18fb      	adds	r3, r7, r3
10009378:	781b      	ldrb	r3, [r3, #0]
1000937a:	2220      	movs	r2, #32
1000937c:	4393      	bics	r3, r2
1000937e:	b2da      	uxtb	r2, r3
10009380:	230f      	movs	r3, #15
10009382:	18fb      	adds	r3, r7, r3
10009384:	701a      	strb	r2, [r3, #0]
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009386:	4b5b      	ldr	r3, [pc, #364]	; (100094f4 <mpu_set_bypass+0x1c4>)
10009388:	685b      	ldr	r3, [r3, #4]
1000938a:	7818      	ldrb	r0, [r3, #0]
1000938c:	4b59      	ldr	r3, [pc, #356]	; (100094f4 <mpu_set_bypass+0x1c4>)
1000938e:	681b      	ldr	r3, [r3, #0]
10009390:	7919      	ldrb	r1, [r3, #4]
10009392:	230f      	movs	r3, #15
10009394:	18fb      	adds	r3, r7, r3
10009396:	2201      	movs	r2, #1
10009398:	4c58      	ldr	r4, [pc, #352]	; (100094fc <mpu_set_bypass+0x1cc>)
1000939a:	47a0      	blx	r4
1000939c:	1e03      	subs	r3, r0, #0
1000939e:	d002      	beq.n	100093a6 <mpu_set_bypass+0x76>
        return -1;
100093a0:	2301      	movs	r3, #1
100093a2:	425b      	negs	r3, r3
100093a4:	e0a1      	b.n	100094ea <mpu_set_bypass+0x1ba>
        delay_ms(3);
100093a6:	2003      	movs	r0, #3
100093a8:	4b55      	ldr	r3, [pc, #340]	; (10009500 <mpu_set_bypass+0x1d0>)
100093aa:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
100093ac:	230f      	movs	r3, #15
100093ae:	18fb      	adds	r3, r7, r3
100093b0:	2202      	movs	r2, #2
100093b2:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.active_low_int)
100093b4:	4b4f      	ldr	r3, [pc, #316]	; (100094f4 <mpu_set_bypass+0x1c4>)
100093b6:	2222      	movs	r2, #34	; 0x22
100093b8:	5c9b      	ldrb	r3, [r3, r2]
100093ba:	2b00      	cmp	r3, #0
100093bc:	d009      	beq.n	100093d2 <mpu_set_bypass+0xa2>
        tmp |= BIT_ACTL;
100093be:	230f      	movs	r3, #15
100093c0:	18fb      	adds	r3, r7, r3
100093c2:	781b      	ldrb	r3, [r3, #0]
100093c4:	2280      	movs	r2, #128	; 0x80
100093c6:	4252      	negs	r2, r2
100093c8:	4313      	orrs	r3, r2
100093ca:	b2da      	uxtb	r2, r3
100093cc:	230f      	movs	r3, #15
100093ce:	18fb      	adds	r3, r7, r3
100093d0:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.latched_int)
100093d2:	4b48      	ldr	r3, [pc, #288]	; (100094f4 <mpu_set_bypass+0x1c4>)
100093d4:	2223      	movs	r2, #35	; 0x23
100093d6:	5c9b      	ldrb	r3, [r3, r2]
100093d8:	2b00      	cmp	r3, #0
100093da:	d008      	beq.n	100093ee <mpu_set_bypass+0xbe>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
100093dc:	230f      	movs	r3, #15
100093de:	18fb      	adds	r3, r7, r3
100093e0:	781b      	ldrb	r3, [r3, #0]
100093e2:	2230      	movs	r2, #48	; 0x30
100093e4:	4313      	orrs	r3, r2
100093e6:	b2da      	uxtb	r2, r3
100093e8:	230f      	movs	r3, #15
100093ea:	18fb      	adds	r3, r7, r3
100093ec:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
100093ee:	4b41      	ldr	r3, [pc, #260]	; (100094f4 <mpu_set_bypass+0x1c4>)
100093f0:	685b      	ldr	r3, [r3, #4]
100093f2:	7818      	ldrb	r0, [r3, #0]
100093f4:	4b3f      	ldr	r3, [pc, #252]	; (100094f4 <mpu_set_bypass+0x1c4>)
100093f6:	681b      	ldr	r3, [r3, #0]
100093f8:	7dd9      	ldrb	r1, [r3, #23]
100093fa:	230f      	movs	r3, #15
100093fc:	18fb      	adds	r3, r7, r3
100093fe:	2201      	movs	r2, #1
10009400:	4c3e      	ldr	r4, [pc, #248]	; (100094fc <mpu_set_bypass+0x1cc>)
10009402:	47a0      	blx	r4
10009404:	1e03      	subs	r3, r0, #0
10009406:	d100      	bne.n	1000940a <mpu_set_bypass+0xda>
10009408:	e06a      	b.n	100094e0 <mpu_set_bypass+0x1b0>
        return -1;
1000940a:	2301      	movs	r3, #1
1000940c:	425b      	negs	r3, r3
1000940e:	e06c      	b.n	100094ea <mpu_set_bypass+0x1ba>
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009410:	4b38      	ldr	r3, [pc, #224]	; (100094f4 <mpu_set_bypass+0x1c4>)
10009412:	685b      	ldr	r3, [r3, #4]
10009414:	7818      	ldrb	r0, [r3, #0]
10009416:	4b37      	ldr	r3, [pc, #220]	; (100094f4 <mpu_set_bypass+0x1c4>)
10009418:	681b      	ldr	r3, [r3, #0]
1000941a:	7919      	ldrb	r1, [r3, #4]
1000941c:	230f      	movs	r3, #15
1000941e:	18fb      	adds	r3, r7, r3
10009420:	2201      	movs	r2, #1
10009422:	4c35      	ldr	r4, [pc, #212]	; (100094f8 <mpu_set_bypass+0x1c8>)
10009424:	47a0      	blx	r4
10009426:	1e03      	subs	r3, r0, #0
10009428:	d002      	beq.n	10009430 <mpu_set_bypass+0x100>
        return -1;
1000942a:	2301      	movs	r3, #1
1000942c:	425b      	negs	r3, r3
1000942e:	e05c      	b.n	100094ea <mpu_set_bypass+0x1ba>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10009430:	4b30      	ldr	r3, [pc, #192]	; (100094f4 <mpu_set_bypass+0x1c4>)
10009432:	7a9b      	ldrb	r3, [r3, #10]
10009434:	001a      	movs	r2, r3
10009436:	2301      	movs	r3, #1
10009438:	4013      	ands	r3, r2
1000943a:	d009      	beq.n	10009450 <mpu_set_bypass+0x120>
        tmp |= BIT_AUX_IF_EN;
1000943c:	230f      	movs	r3, #15
1000943e:	18fb      	adds	r3, r7, r3
10009440:	781b      	ldrb	r3, [r3, #0]
10009442:	2220      	movs	r2, #32
10009444:	4313      	orrs	r3, r2
10009446:	b2da      	uxtb	r2, r3
10009448:	230f      	movs	r3, #15
1000944a:	18fb      	adds	r3, r7, r3
1000944c:	701a      	strb	r2, [r3, #0]
1000944e:	e008      	b.n	10009462 <mpu_set_bypass+0x132>
        else
        tmp &= ~BIT_AUX_IF_EN;
10009450:	230f      	movs	r3, #15
10009452:	18fb      	adds	r3, r7, r3
10009454:	781b      	ldrb	r3, [r3, #0]
10009456:	2220      	movs	r2, #32
10009458:	4393      	bics	r3, r2
1000945a:	b2da      	uxtb	r2, r3
1000945c:	230f      	movs	r3, #15
1000945e:	18fb      	adds	r3, r7, r3
10009460:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10009462:	4b24      	ldr	r3, [pc, #144]	; (100094f4 <mpu_set_bypass+0x1c4>)
10009464:	685b      	ldr	r3, [r3, #4]
10009466:	7818      	ldrb	r0, [r3, #0]
10009468:	4b22      	ldr	r3, [pc, #136]	; (100094f4 <mpu_set_bypass+0x1c4>)
1000946a:	681b      	ldr	r3, [r3, #0]
1000946c:	7919      	ldrb	r1, [r3, #4]
1000946e:	230f      	movs	r3, #15
10009470:	18fb      	adds	r3, r7, r3
10009472:	2201      	movs	r2, #1
10009474:	4c21      	ldr	r4, [pc, #132]	; (100094fc <mpu_set_bypass+0x1cc>)
10009476:	47a0      	blx	r4
10009478:	1e03      	subs	r3, r0, #0
1000947a:	d002      	beq.n	10009482 <mpu_set_bypass+0x152>
        return -1;
1000947c:	2301      	movs	r3, #1
1000947e:	425b      	negs	r3, r3
10009480:	e033      	b.n	100094ea <mpu_set_bypass+0x1ba>
        delay_ms(3);
10009482:	2003      	movs	r0, #3
10009484:	4b1e      	ldr	r3, [pc, #120]	; (10009500 <mpu_set_bypass+0x1d0>)
10009486:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10009488:	4b1a      	ldr	r3, [pc, #104]	; (100094f4 <mpu_set_bypass+0x1c4>)
1000948a:	2222      	movs	r2, #34	; 0x22
1000948c:	5c9b      	ldrb	r3, [r3, r2]
1000948e:	2b00      	cmp	r3, #0
10009490:	d004      	beq.n	1000949c <mpu_set_bypass+0x16c>
        tmp = BIT_ACTL;
10009492:	230f      	movs	r3, #15
10009494:	18fb      	adds	r3, r7, r3
10009496:	2280      	movs	r2, #128	; 0x80
10009498:	701a      	strb	r2, [r3, #0]
1000949a:	e003      	b.n	100094a4 <mpu_set_bypass+0x174>
        else
        tmp = 0;
1000949c:	230f      	movs	r3, #15
1000949e:	18fb      	adds	r3, r7, r3
100094a0:	2200      	movs	r2, #0
100094a2:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.latched_int)
100094a4:	4b13      	ldr	r3, [pc, #76]	; (100094f4 <mpu_set_bypass+0x1c4>)
100094a6:	2223      	movs	r2, #35	; 0x23
100094a8:	5c9b      	ldrb	r3, [r3, r2]
100094aa:	2b00      	cmp	r3, #0
100094ac:	d008      	beq.n	100094c0 <mpu_set_bypass+0x190>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
100094ae:	230f      	movs	r3, #15
100094b0:	18fb      	adds	r3, r7, r3
100094b2:	781b      	ldrb	r3, [r3, #0]
100094b4:	2230      	movs	r2, #48	; 0x30
100094b6:	4313      	orrs	r3, r2
100094b8:	b2da      	uxtb	r2, r3
100094ba:	230f      	movs	r3, #15
100094bc:	18fb      	adds	r3, r7, r3
100094be:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
100094c0:	4b0c      	ldr	r3, [pc, #48]	; (100094f4 <mpu_set_bypass+0x1c4>)
100094c2:	685b      	ldr	r3, [r3, #4]
100094c4:	7818      	ldrb	r0, [r3, #0]
100094c6:	4b0b      	ldr	r3, [pc, #44]	; (100094f4 <mpu_set_bypass+0x1c4>)
100094c8:	681b      	ldr	r3, [r3, #0]
100094ca:	7dd9      	ldrb	r1, [r3, #23]
100094cc:	230f      	movs	r3, #15
100094ce:	18fb      	adds	r3, r7, r3
100094d0:	2201      	movs	r2, #1
100094d2:	4c0a      	ldr	r4, [pc, #40]	; (100094fc <mpu_set_bypass+0x1cc>)
100094d4:	47a0      	blx	r4
100094d6:	1e03      	subs	r3, r0, #0
100094d8:	d002      	beq.n	100094e0 <mpu_set_bypass+0x1b0>
        return -1;
100094da:	2301      	movs	r3, #1
100094dc:	425b      	negs	r3, r3
100094de:	e004      	b.n	100094ea <mpu_set_bypass+0x1ba>
    }
    st.chip_cfg.bypass_mode = bypass_on;
100094e0:	4b04      	ldr	r3, [pc, #16]	; (100094f4 <mpu_set_bypass+0x1c4>)
100094e2:	1dfa      	adds	r2, r7, #7
100094e4:	7812      	ldrb	r2, [r2, #0]
100094e6:	749a      	strb	r2, [r3, #18]
    return 0;
100094e8:	2300      	movs	r3, #0
}
100094ea:	0018      	movs	r0, r3
100094ec:	46bd      	mov	sp, r7
100094ee:	b005      	add	sp, #20
100094f0:	bd90      	pop	{r4, r7, pc}
100094f2:	46c0      	nop			; (mov r8, r8)
100094f4:	1001b844 	.word	0x1001b844
100094f8:	100081e9 	.word	0x100081e9
100094fc:	100080d5 	.word	0x100080d5
10009500:	1000c4b9 	.word	0x1000c4b9

10009504 <mpu_set_int_level>:
*  @brief      Set interrupt level.
*  @param[in]  active_low  1 for active low, 0 for active high.
*  @return     0 if successful.
*/
int mpu_set_int_level(unsigned char active_low)
{
10009504:	b580      	push	{r7, lr}
10009506:	b082      	sub	sp, #8
10009508:	af00      	add	r7, sp, #0
1000950a:	0002      	movs	r2, r0
1000950c:	1dfb      	adds	r3, r7, #7
1000950e:	701a      	strb	r2, [r3, #0]
    st.chip_cfg.active_low_int = active_low;
10009510:	4b04      	ldr	r3, [pc, #16]	; (10009524 <mpu_set_int_level+0x20>)
10009512:	1dfa      	adds	r2, r7, #7
10009514:	2122      	movs	r1, #34	; 0x22
10009516:	7812      	ldrb	r2, [r2, #0]
10009518:	545a      	strb	r2, [r3, r1]
    return 0;
1000951a:	2300      	movs	r3, #0
}
1000951c:	0018      	movs	r0, r3
1000951e:	46bd      	mov	sp, r7
10009520:	b002      	add	sp, #8
10009522:	bd80      	pop	{r7, pc}
10009524:	1001b844 	.word	0x1001b844

10009528 <mpu_set_int_latched>:
*  Any MPU register will clear the interrupt.
*  @param[in]  enable  1 to enable, 0 to disable.
*  @return     0 if successful.
*/
int mpu_set_int_latched(unsigned char enable)
{
10009528:	b590      	push	{r4, r7, lr}
1000952a:	b085      	sub	sp, #20
1000952c:	af00      	add	r7, sp, #0
1000952e:	0002      	movs	r2, r0
10009530:	1dfb      	adds	r3, r7, #7
10009532:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10009534:	4b25      	ldr	r3, [pc, #148]	; (100095cc <mpu_set_int_latched+0xa4>)
10009536:	2223      	movs	r2, #35	; 0x23
10009538:	5c9b      	ldrb	r3, [r3, r2]
1000953a:	1dfa      	adds	r2, r7, #7
1000953c:	7812      	ldrb	r2, [r2, #0]
1000953e:	429a      	cmp	r2, r3
10009540:	d101      	bne.n	10009546 <mpu_set_int_latched+0x1e>
    return 0;
10009542:	2300      	movs	r3, #0
10009544:	e03e      	b.n	100095c4 <mpu_set_int_latched+0x9c>

    if (enable)
10009546:	1dfb      	adds	r3, r7, #7
10009548:	781b      	ldrb	r3, [r3, #0]
1000954a:	2b00      	cmp	r3, #0
1000954c:	d004      	beq.n	10009558 <mpu_set_int_latched+0x30>
    tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
1000954e:	230f      	movs	r3, #15
10009550:	18fb      	adds	r3, r7, r3
10009552:	2230      	movs	r2, #48	; 0x30
10009554:	701a      	strb	r2, [r3, #0]
10009556:	e003      	b.n	10009560 <mpu_set_int_latched+0x38>
    else
    tmp = 0;
10009558:	230f      	movs	r3, #15
1000955a:	18fb      	adds	r3, r7, r3
1000955c:	2200      	movs	r2, #0
1000955e:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10009560:	4b1a      	ldr	r3, [pc, #104]	; (100095cc <mpu_set_int_latched+0xa4>)
10009562:	7c9b      	ldrb	r3, [r3, #18]
10009564:	2b00      	cmp	r3, #0
10009566:	d008      	beq.n	1000957a <mpu_set_int_latched+0x52>
    tmp |= BIT_BYPASS_EN;
10009568:	230f      	movs	r3, #15
1000956a:	18fb      	adds	r3, r7, r3
1000956c:	781b      	ldrb	r3, [r3, #0]
1000956e:	2202      	movs	r2, #2
10009570:	4313      	orrs	r3, r2
10009572:	b2da      	uxtb	r2, r3
10009574:	230f      	movs	r3, #15
10009576:	18fb      	adds	r3, r7, r3
10009578:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
1000957a:	4b14      	ldr	r3, [pc, #80]	; (100095cc <mpu_set_int_latched+0xa4>)
1000957c:	2222      	movs	r2, #34	; 0x22
1000957e:	5c9b      	ldrb	r3, [r3, r2]
10009580:	2b00      	cmp	r3, #0
10009582:	d009      	beq.n	10009598 <mpu_set_int_latched+0x70>
    tmp |= BIT_ACTL;
10009584:	230f      	movs	r3, #15
10009586:	18fb      	adds	r3, r7, r3
10009588:	781b      	ldrb	r3, [r3, #0]
1000958a:	2280      	movs	r2, #128	; 0x80
1000958c:	4252      	negs	r2, r2
1000958e:	4313      	orrs	r3, r2
10009590:	b2da      	uxtb	r2, r3
10009592:	230f      	movs	r3, #15
10009594:	18fb      	adds	r3, r7, r3
10009596:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10009598:	4b0c      	ldr	r3, [pc, #48]	; (100095cc <mpu_set_int_latched+0xa4>)
1000959a:	685b      	ldr	r3, [r3, #4]
1000959c:	7818      	ldrb	r0, [r3, #0]
1000959e:	4b0b      	ldr	r3, [pc, #44]	; (100095cc <mpu_set_int_latched+0xa4>)
100095a0:	681b      	ldr	r3, [r3, #0]
100095a2:	7dd9      	ldrb	r1, [r3, #23]
100095a4:	230f      	movs	r3, #15
100095a6:	18fb      	adds	r3, r7, r3
100095a8:	2201      	movs	r2, #1
100095aa:	4c09      	ldr	r4, [pc, #36]	; (100095d0 <mpu_set_int_latched+0xa8>)
100095ac:	47a0      	blx	r4
100095ae:	1e03      	subs	r3, r0, #0
100095b0:	d002      	beq.n	100095b8 <mpu_set_int_latched+0x90>
    return -1;
100095b2:	2301      	movs	r3, #1
100095b4:	425b      	negs	r3, r3
100095b6:	e005      	b.n	100095c4 <mpu_set_int_latched+0x9c>
    st.chip_cfg.latched_int = enable;
100095b8:	4b04      	ldr	r3, [pc, #16]	; (100095cc <mpu_set_int_latched+0xa4>)
100095ba:	1dfa      	adds	r2, r7, #7
100095bc:	2123      	movs	r1, #35	; 0x23
100095be:	7812      	ldrb	r2, [r2, #0]
100095c0:	545a      	strb	r2, [r3, r1]
    return 0;
100095c2:	2300      	movs	r3, #0
}
100095c4:	0018      	movs	r0, r3
100095c6:	46bd      	mov	sp, r7
100095c8:	b005      	add	sp, #20
100095ca:	bd90      	pop	{r4, r7, pc}
100095cc:	1001b844 	.word	0x1001b844
100095d0:	100080d5 	.word	0x100080d5

100095d4 <mpu_write_mem>:
*  @param[in]  data        Bytes to write to memory.
*  @return     0 if successful.
*/
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
unsigned char *data)
{
100095d4:	b590      	push	{r4, r7, lr}
100095d6:	b085      	sub	sp, #20
100095d8:	af00      	add	r7, sp, #0
100095da:	603a      	str	r2, [r7, #0]
100095dc:	1dbb      	adds	r3, r7, #6
100095de:	1c02      	adds	r2, r0, #0
100095e0:	801a      	strh	r2, [r3, #0]
100095e2:	1d3b      	adds	r3, r7, #4
100095e4:	1c0a      	adds	r2, r1, #0
100095e6:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (!data)
100095e8:	683b      	ldr	r3, [r7, #0]
100095ea:	2b00      	cmp	r3, #0
100095ec:	d102      	bne.n	100095f4 <mpu_write_mem+0x20>
    return -1;
100095ee:	2301      	movs	r3, #1
100095f0:	425b      	negs	r3, r3
100095f2:	e045      	b.n	10009680 <mpu_write_mem+0xac>
    if (!st.chip_cfg.sensors)
100095f4:	4b24      	ldr	r3, [pc, #144]	; (10009688 <mpu_write_mem+0xb4>)
100095f6:	7a9b      	ldrb	r3, [r3, #10]
100095f8:	2b00      	cmp	r3, #0
100095fa:	d102      	bne.n	10009602 <mpu_write_mem+0x2e>
    return -1;
100095fc:	2301      	movs	r3, #1
100095fe:	425b      	negs	r3, r3
10009600:	e03e      	b.n	10009680 <mpu_write_mem+0xac>

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009602:	1dbb      	adds	r3, r7, #6
10009604:	881b      	ldrh	r3, [r3, #0]
10009606:	0a1b      	lsrs	r3, r3, #8
10009608:	b29b      	uxth	r3, r3
1000960a:	b2da      	uxtb	r2, r3
1000960c:	230c      	movs	r3, #12
1000960e:	18fb      	adds	r3, r7, r3
10009610:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009612:	1dbb      	adds	r3, r7, #6
10009614:	881b      	ldrh	r3, [r3, #0]
10009616:	b2da      	uxtb	r2, r3
10009618:	230c      	movs	r3, #12
1000961a:	18fb      	adds	r3, r7, r3
1000961c:	705a      	strb	r2, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000961e:	230c      	movs	r3, #12
10009620:	18fb      	adds	r3, r7, r3
10009622:	785b      	ldrb	r3, [r3, #1]
10009624:	001a      	movs	r2, r3
10009626:	1d3b      	adds	r3, r7, #4
10009628:	881b      	ldrh	r3, [r3, #0]
1000962a:	18d2      	adds	r2, r2, r3
1000962c:	4b16      	ldr	r3, [pc, #88]	; (10009688 <mpu_write_mem+0xb4>)
1000962e:	685b      	ldr	r3, [r3, #4]
10009630:	895b      	ldrh	r3, [r3, #10]
10009632:	429a      	cmp	r2, r3
10009634:	dd02      	ble.n	1000963c <mpu_write_mem+0x68>
    return -1;
10009636:	2301      	movs	r3, #1
10009638:	425b      	negs	r3, r3
1000963a:	e021      	b.n	10009680 <mpu_write_mem+0xac>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000963c:	4b12      	ldr	r3, [pc, #72]	; (10009688 <mpu_write_mem+0xb4>)
1000963e:	685b      	ldr	r3, [r3, #4]
10009640:	7818      	ldrb	r0, [r3, #0]
10009642:	4b11      	ldr	r3, [pc, #68]	; (10009688 <mpu_write_mem+0xb4>)
10009644:	681b      	ldr	r3, [r3, #0]
10009646:	7ed9      	ldrb	r1, [r3, #27]
10009648:	230c      	movs	r3, #12
1000964a:	18fb      	adds	r3, r7, r3
1000964c:	2202      	movs	r2, #2
1000964e:	4c0f      	ldr	r4, [pc, #60]	; (1000968c <mpu_write_mem+0xb8>)
10009650:	47a0      	blx	r4
10009652:	1e03      	subs	r3, r0, #0
10009654:	d002      	beq.n	1000965c <mpu_write_mem+0x88>
    return -1;
10009656:	2301      	movs	r3, #1
10009658:	425b      	negs	r3, r3
1000965a:	e011      	b.n	10009680 <mpu_write_mem+0xac>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000965c:	4b0a      	ldr	r3, [pc, #40]	; (10009688 <mpu_write_mem+0xb4>)
1000965e:	685b      	ldr	r3, [r3, #4]
10009660:	7818      	ldrb	r0, [r3, #0]
10009662:	4b09      	ldr	r3, [pc, #36]	; (10009688 <mpu_write_mem+0xb4>)
10009664:	681b      	ldr	r3, [r3, #0]
10009666:	7e19      	ldrb	r1, [r3, #24]
10009668:	1d3b      	adds	r3, r7, #4
1000966a:	881b      	ldrh	r3, [r3, #0]
1000966c:	b2da      	uxtb	r2, r3
1000966e:	683b      	ldr	r3, [r7, #0]
10009670:	4c06      	ldr	r4, [pc, #24]	; (1000968c <mpu_write_mem+0xb8>)
10009672:	47a0      	blx	r4
10009674:	1e03      	subs	r3, r0, #0
10009676:	d002      	beq.n	1000967e <mpu_write_mem+0xaa>
    return -1;
10009678:	2301      	movs	r3, #1
1000967a:	425b      	negs	r3, r3
1000967c:	e000      	b.n	10009680 <mpu_write_mem+0xac>
    return 0;
1000967e:	2300      	movs	r3, #0
}
10009680:	0018      	movs	r0, r3
10009682:	46bd      	mov	sp, r7
10009684:	b005      	add	sp, #20
10009686:	bd90      	pop	{r4, r7, pc}
10009688:	1001b844 	.word	0x1001b844
1000968c:	100080d5 	.word	0x100080d5

10009690 <mpu_set_dmp_state>:
*  @brief      Enable/disable DMP support.
*  @param[in]  enable  1 to turn on the DMP.
*  @return     0 if successful.
*/
int mpu_set_dmp_state(unsigned char enable)
{
10009690:	b590      	push	{r4, r7, lr}
10009692:	b085      	sub	sp, #20
10009694:	af00      	add	r7, sp, #0
10009696:	0002      	movs	r2, r0
10009698:	1dfb      	adds	r3, r7, #7
1000969a:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000969c:	4b28      	ldr	r3, [pc, #160]	; (10009740 <mpu_set_dmp_state+0xb0>)
1000969e:	2224      	movs	r2, #36	; 0x24
100096a0:	5c9b      	ldrb	r3, [r3, r2]
100096a2:	1dfa      	adds	r2, r7, #7
100096a4:	7812      	ldrb	r2, [r2, #0]
100096a6:	429a      	cmp	r2, r3
100096a8:	d101      	bne.n	100096ae <mpu_set_dmp_state+0x1e>
    return 0;
100096aa:	2300      	movs	r3, #0
100096ac:	e044      	b.n	10009738 <mpu_set_dmp_state+0xa8>

    if (enable) {
100096ae:	1dfb      	adds	r3, r7, #7
100096b0:	781b      	ldrb	r3, [r3, #0]
100096b2:	2b00      	cmp	r3, #0
100096b4:	d028      	beq.n	10009708 <mpu_set_dmp_state+0x78>
        if (!st.chip_cfg.dmp_loaded) return 0;
100096b6:	4b22      	ldr	r3, [pc, #136]	; (10009740 <mpu_set_dmp_state+0xb0>)
100096b8:	2225      	movs	r2, #37	; 0x25
100096ba:	5c9b      	ldrb	r3, [r3, r2]
100096bc:	2b00      	cmp	r3, #0
100096be:	d101      	bne.n	100096c4 <mpu_set_dmp_state+0x34>
100096c0:	2300      	movs	r3, #0
100096c2:	e039      	b.n	10009738 <mpu_set_dmp_state+0xa8>
        /* Disable data ready interrupt. */
        set_int_enable(0);
100096c4:	2000      	movs	r0, #0
100096c6:	4b1f      	ldr	r3, [pc, #124]	; (10009744 <mpu_set_dmp_state+0xb4>)
100096c8:	4798      	blx	r3
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100096ca:	2000      	movs	r0, #0
100096cc:	4b1e      	ldr	r3, [pc, #120]	; (10009748 <mpu_set_dmp_state+0xb8>)
100096ce:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100096d0:	4b1b      	ldr	r3, [pc, #108]	; (10009740 <mpu_set_dmp_state+0xb0>)
100096d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
100096d4:	0018      	movs	r0, r3
100096d6:	4b1d      	ldr	r3, [pc, #116]	; (1000974c <mpu_set_dmp_state+0xbc>)
100096d8:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100096da:	230f      	movs	r3, #15
100096dc:	18fb      	adds	r3, r7, r3
100096de:	2200      	movs	r2, #0
100096e0:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096e2:	4b17      	ldr	r3, [pc, #92]	; (10009740 <mpu_set_dmp_state+0xb0>)
100096e4:	685b      	ldr	r3, [r3, #4]
100096e6:	7818      	ldrb	r0, [r3, #0]
100096e8:	230f      	movs	r3, #15
100096ea:	18fb      	adds	r3, r7, r3
100096ec:	2201      	movs	r2, #1
100096ee:	2123      	movs	r1, #35	; 0x23
100096f0:	4c17      	ldr	r4, [pc, #92]	; (10009750 <mpu_set_dmp_state+0xc0>)
100096f2:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 1;
100096f4:	4b12      	ldr	r3, [pc, #72]	; (10009740 <mpu_set_dmp_state+0xb0>)
100096f6:	2224      	movs	r2, #36	; 0x24
100096f8:	2101      	movs	r1, #1
100096fa:	5499      	strb	r1, [r3, r2]
        /* Enable DMP interrupt. */
        //mpu_set_int_latched(1);
        set_int_enable(1);
100096fc:	2001      	movs	r0, #1
100096fe:	4b11      	ldr	r3, [pc, #68]	; (10009744 <mpu_set_dmp_state+0xb4>)
10009700:	4798      	blx	r3
        mpu_reset_fifo();
10009702:	4b14      	ldr	r3, [pc, #80]	; (10009754 <mpu_set_dmp_state+0xc4>)
10009704:	4798      	blx	r3
10009706:	e016      	b.n	10009736 <mpu_set_dmp_state+0xa6>
    }
    else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
10009708:	2000      	movs	r0, #0
1000970a:	4b0e      	ldr	r3, [pc, #56]	; (10009744 <mpu_set_dmp_state+0xb4>)
1000970c:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1000970e:	4b0c      	ldr	r3, [pc, #48]	; (10009740 <mpu_set_dmp_state+0xb0>)
10009710:	7c1a      	ldrb	r2, [r3, #16]
10009712:	230f      	movs	r3, #15
10009714:	18fb      	adds	r3, r7, r3
10009716:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009718:	4b09      	ldr	r3, [pc, #36]	; (10009740 <mpu_set_dmp_state+0xb0>)
1000971a:	685b      	ldr	r3, [r3, #4]
1000971c:	7818      	ldrb	r0, [r3, #0]
1000971e:	230f      	movs	r3, #15
10009720:	18fb      	adds	r3, r7, r3
10009722:	2201      	movs	r2, #1
10009724:	2123      	movs	r1, #35	; 0x23
10009726:	4c0a      	ldr	r4, [pc, #40]	; (10009750 <mpu_set_dmp_state+0xc0>)
10009728:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 0;
1000972a:	4b05      	ldr	r3, [pc, #20]	; (10009740 <mpu_set_dmp_state+0xb0>)
1000972c:	2224      	movs	r2, #36	; 0x24
1000972e:	2100      	movs	r1, #0
10009730:	5499      	strb	r1, [r3, r2]
        mpu_reset_fifo();
10009732:	4b08      	ldr	r3, [pc, #32]	; (10009754 <mpu_set_dmp_state+0xc4>)
10009734:	4798      	blx	r3
    }
    return 0;
10009736:	2300      	movs	r3, #0
}
10009738:	0018      	movs	r0, r3
1000973a:	46bd      	mov	sp, r7
1000973c:	b005      	add	sp, #20
1000973e:	bd90      	pop	{r4, r7, pc}
10009740:	1001b844 	.word	0x1001b844
10009744:	100083ad 	.word	0x100083ad
10009748:	10009331 	.word	0x10009331
1000974c:	10008d39 	.word	0x10008d39
10009750:	100080d5 	.word	0x100080d5
10009754:	100087d9 	.word	0x100087d9

10009758 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
10009758:	b590      	push	{r4, r7, lr}
1000975a:	b085      	sub	sp, #20
1000975c:	af00      	add	r7, sp, #0
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);
1000975e:	2001      	movs	r0, #1
10009760:	4ba9      	ldr	r3, [pc, #676]	; (10009a08 <setup_compass+0x2b0>)
10009762:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009764:	230f      	movs	r3, #15
10009766:	18fb      	adds	r3, r7, r3
10009768:	220c      	movs	r2, #12
1000976a:	701a      	strb	r2, [r3, #0]
1000976c:	e018      	b.n	100097a0 <setup_compass+0x48>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
1000976e:	1d3a      	adds	r2, r7, #4
10009770:	230f      	movs	r3, #15
10009772:	18fb      	adds	r3, r7, r3
10009774:	7818      	ldrb	r0, [r3, #0]
10009776:	0013      	movs	r3, r2
10009778:	2201      	movs	r2, #1
1000977a:	2100      	movs	r1, #0
1000977c:	4ca3      	ldr	r4, [pc, #652]	; (10009a0c <setup_compass+0x2b4>)
1000977e:	47a0      	blx	r4
10009780:	0003      	movs	r3, r0
10009782:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
10009784:	68bb      	ldr	r3, [r7, #8]
10009786:	2b00      	cmp	r3, #0
10009788:	d103      	bne.n	10009792 <setup_compass+0x3a>
1000978a:	1d3b      	adds	r3, r7, #4
1000978c:	781b      	ldrb	r3, [r3, #0]
1000978e:	2b48      	cmp	r3, #72	; 0x48
10009790:	d00c      	beq.n	100097ac <setup_compass+0x54>
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009792:	230f      	movs	r3, #15
10009794:	18fb      	adds	r3, r7, r3
10009796:	781a      	ldrb	r2, [r3, #0]
10009798:	230f      	movs	r3, #15
1000979a:	18fb      	adds	r3, r7, r3
1000979c:	3201      	adds	r2, #1
1000979e:	701a      	strb	r2, [r3, #0]
100097a0:	230f      	movs	r3, #15
100097a2:	18fb      	adds	r3, r7, r3
100097a4:	781b      	ldrb	r3, [r3, #0]
100097a6:	2b0f      	cmp	r3, #15
100097a8:	d9e1      	bls.n	1000976e <setup_compass+0x16>
100097aa:	e000      	b.n	100097ae <setup_compass+0x56>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
        break;
100097ac:	46c0      	nop			; (mov r8, r8)
    }

    if (akm_addr > 0x0F) {
100097ae:	230f      	movs	r3, #15
100097b0:	18fb      	adds	r3, r7, r3
100097b2:	781b      	ldrb	r3, [r3, #0]
100097b4:	2b0f      	cmp	r3, #15
100097b6:	d90a      	bls.n	100097ce <setup_compass+0x76>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100097b8:	4b95      	ldr	r3, [pc, #596]	; (10009a10 <setup_compass+0x2b8>)
100097ba:	0018      	movs	r0, r3
100097bc:	4b95      	ldr	r3, [pc, #596]	; (10009a14 <setup_compass+0x2bc>)
100097be:	4798      	blx	r3
100097c0:	4b95      	ldr	r3, [pc, #596]	; (10009a18 <setup_compass+0x2c0>)
100097c2:	0018      	movs	r0, r3
100097c4:	4b93      	ldr	r3, [pc, #588]	; (10009a14 <setup_compass+0x2bc>)
100097c6:	4798      	blx	r3
        return -1;
100097c8:	2301      	movs	r3, #1
100097ca:	425b      	negs	r3, r3
100097cc:	e117      	b.n	100099fe <setup_compass+0x2a6>
    }

    st.chip_cfg.compass_addr = akm_addr;
100097ce:	4b93      	ldr	r3, [pc, #588]	; (10009a1c <setup_compass+0x2c4>)
100097d0:	220f      	movs	r2, #15
100097d2:	18ba      	adds	r2, r7, r2
100097d4:	212a      	movs	r1, #42	; 0x2a
100097d6:	7812      	ldrb	r2, [r2, #0]
100097d8:	545a      	strb	r2, [r3, r1]

    data[0] = AKM_POWER_DOWN;
100097da:	1d3b      	adds	r3, r7, #4
100097dc:	2210      	movs	r2, #16
100097de:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100097e0:	4b8e      	ldr	r3, [pc, #568]	; (10009a1c <setup_compass+0x2c4>)
100097e2:	222a      	movs	r2, #42	; 0x2a
100097e4:	5c98      	ldrb	r0, [r3, r2]
100097e6:	1d3b      	adds	r3, r7, #4
100097e8:	2201      	movs	r2, #1
100097ea:	210a      	movs	r1, #10
100097ec:	4c8c      	ldr	r4, [pc, #560]	; (10009a20 <setup_compass+0x2c8>)
100097ee:	47a0      	blx	r4
100097f0:	1e03      	subs	r3, r0, #0
100097f2:	d002      	beq.n	100097fa <setup_compass+0xa2>
    return -1;
100097f4:	2301      	movs	r3, #1
100097f6:	425b      	negs	r3, r3
100097f8:	e101      	b.n	100099fe <setup_compass+0x2a6>
    delay_ms(1);
100097fa:	2001      	movs	r0, #1
100097fc:	4b89      	ldr	r3, [pc, #548]	; (10009a24 <setup_compass+0x2cc>)
100097fe:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
10009800:	1d3b      	adds	r3, r7, #4
10009802:	221f      	movs	r2, #31
10009804:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009806:	4b85      	ldr	r3, [pc, #532]	; (10009a1c <setup_compass+0x2c4>)
10009808:	222a      	movs	r2, #42	; 0x2a
1000980a:	5c98      	ldrb	r0, [r3, r2]
1000980c:	1d3b      	adds	r3, r7, #4
1000980e:	2201      	movs	r2, #1
10009810:	210a      	movs	r1, #10
10009812:	4c83      	ldr	r4, [pc, #524]	; (10009a20 <setup_compass+0x2c8>)
10009814:	47a0      	blx	r4
10009816:	1e03      	subs	r3, r0, #0
10009818:	d002      	beq.n	10009820 <setup_compass+0xc8>
    return -1;
1000981a:	2301      	movs	r3, #1
1000981c:	425b      	negs	r3, r3
1000981e:	e0ee      	b.n	100099fe <setup_compass+0x2a6>
    delay_ms(1);
10009820:	2001      	movs	r0, #1
10009822:	4b80      	ldr	r3, [pc, #512]	; (10009a24 <setup_compass+0x2cc>)
10009824:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10009826:	4b7d      	ldr	r3, [pc, #500]	; (10009a1c <setup_compass+0x2c4>)
10009828:	222a      	movs	r2, #42	; 0x2a
1000982a:	5c98      	ldrb	r0, [r3, r2]
1000982c:	1d3b      	adds	r3, r7, #4
1000982e:	2203      	movs	r2, #3
10009830:	2110      	movs	r1, #16
10009832:	4c76      	ldr	r4, [pc, #472]	; (10009a0c <setup_compass+0x2b4>)
10009834:	47a0      	blx	r4
10009836:	1e03      	subs	r3, r0, #0
10009838:	d002      	beq.n	10009840 <setup_compass+0xe8>
    return -1;
1000983a:	2301      	movs	r3, #1
1000983c:	425b      	negs	r3, r3
1000983e:	e0de      	b.n	100099fe <setup_compass+0x2a6>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009840:	1d3b      	adds	r3, r7, #4
10009842:	781b      	ldrb	r3, [r3, #0]
10009844:	b29b      	uxth	r3, r3
10009846:	3380      	adds	r3, #128	; 0x80
10009848:	b29b      	uxth	r3, r3
1000984a:	b21a      	sxth	r2, r3
1000984c:	4b73      	ldr	r3, [pc, #460]	; (10009a1c <setup_compass+0x2c4>)
1000984e:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009850:	1d3b      	adds	r3, r7, #4
10009852:	785b      	ldrb	r3, [r3, #1]
10009854:	b29b      	uxth	r3, r3
10009856:	3380      	adds	r3, #128	; 0x80
10009858:	b29b      	uxth	r3, r3
1000985a:	b21a      	sxth	r2, r3
1000985c:	4b6f      	ldr	r3, [pc, #444]	; (10009a1c <setup_compass+0x2c4>)
1000985e:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009860:	1d3b      	adds	r3, r7, #4
10009862:	789b      	ldrb	r3, [r3, #2]
10009864:	b29b      	uxth	r3, r3
10009866:	3380      	adds	r3, #128	; 0x80
10009868:	b29b      	uxth	r3, r3
1000986a:	b21a      	sxth	r2, r3
1000986c:	4b6b      	ldr	r3, [pc, #428]	; (10009a1c <setup_compass+0x2c4>)
1000986e:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009870:	1d3b      	adds	r3, r7, #4
10009872:	2210      	movs	r2, #16
10009874:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009876:	4b69      	ldr	r3, [pc, #420]	; (10009a1c <setup_compass+0x2c4>)
10009878:	222a      	movs	r2, #42	; 0x2a
1000987a:	5c98      	ldrb	r0, [r3, r2]
1000987c:	1d3b      	adds	r3, r7, #4
1000987e:	2201      	movs	r2, #1
10009880:	210a      	movs	r1, #10
10009882:	4c67      	ldr	r4, [pc, #412]	; (10009a20 <setup_compass+0x2c8>)
10009884:	47a0      	blx	r4
10009886:	1e03      	subs	r3, r0, #0
10009888:	d002      	beq.n	10009890 <setup_compass+0x138>
    return -1;
1000988a:	2301      	movs	r3, #1
1000988c:	425b      	negs	r3, r3
1000988e:	e0b6      	b.n	100099fe <setup_compass+0x2a6>
    delay_ms(1);
10009890:	2001      	movs	r0, #1
10009892:	4b64      	ldr	r3, [pc, #400]	; (10009a24 <setup_compass+0x2cc>)
10009894:	4798      	blx	r3

    mpu_set_bypass(0);
10009896:	2000      	movs	r0, #0
10009898:	4b5b      	ldr	r3, [pc, #364]	; (10009a08 <setup_compass+0x2b0>)
1000989a:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1000989c:	1d3b      	adds	r3, r7, #4
1000989e:	2240      	movs	r2, #64	; 0x40
100098a0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100098a2:	4b5e      	ldr	r3, [pc, #376]	; (10009a1c <setup_compass+0x2c4>)
100098a4:	685b      	ldr	r3, [r3, #4]
100098a6:	7818      	ldrb	r0, [r3, #0]
100098a8:	4b5c      	ldr	r3, [pc, #368]	; (10009a1c <setup_compass+0x2c4>)
100098aa:	681b      	ldr	r3, [r3, #0]
100098ac:	7e99      	ldrb	r1, [r3, #26]
100098ae:	1d3b      	adds	r3, r7, #4
100098b0:	2201      	movs	r2, #1
100098b2:	4c5b      	ldr	r4, [pc, #364]	; (10009a20 <setup_compass+0x2c8>)
100098b4:	47a0      	blx	r4
100098b6:	1e03      	subs	r3, r0, #0
100098b8:	d002      	beq.n	100098c0 <setup_compass+0x168>
    return -1;
100098ba:	2301      	movs	r3, #1
100098bc:	425b      	negs	r3, r3
100098be:	e09e      	b.n	100099fe <setup_compass+0x2a6>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100098c0:	4b56      	ldr	r3, [pc, #344]	; (10009a1c <setup_compass+0x2c4>)
100098c2:	222a      	movs	r2, #42	; 0x2a
100098c4:	5c9b      	ldrb	r3, [r3, r2]
100098c6:	2280      	movs	r2, #128	; 0x80
100098c8:	4252      	negs	r2, r2
100098ca:	4313      	orrs	r3, r2
100098cc:	b2da      	uxtb	r2, r3
100098ce:	1d3b      	adds	r3, r7, #4
100098d0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100098d2:	4b52      	ldr	r3, [pc, #328]	; (10009a1c <setup_compass+0x2c4>)
100098d4:	685b      	ldr	r3, [r3, #4]
100098d6:	7818      	ldrb	r0, [r3, #0]
100098d8:	4b50      	ldr	r3, [pc, #320]	; (10009a1c <setup_compass+0x2c4>)
100098da:	681b      	ldr	r3, [r3, #0]
100098dc:	7f99      	ldrb	r1, [r3, #30]
100098de:	1d3b      	adds	r3, r7, #4
100098e0:	2201      	movs	r2, #1
100098e2:	4c4f      	ldr	r4, [pc, #316]	; (10009a20 <setup_compass+0x2c8>)
100098e4:	47a0      	blx	r4
100098e6:	1e03      	subs	r3, r0, #0
100098e8:	d002      	beq.n	100098f0 <setup_compass+0x198>
    return -1;
100098ea:	2301      	movs	r3, #1
100098ec:	425b      	negs	r3, r3
100098ee:	e086      	b.n	100099fe <setup_compass+0x2a6>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100098f0:	1d3b      	adds	r3, r7, #4
100098f2:	2202      	movs	r2, #2
100098f4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100098f6:	4b49      	ldr	r3, [pc, #292]	; (10009a1c <setup_compass+0x2c4>)
100098f8:	685b      	ldr	r3, [r3, #4]
100098fa:	7818      	ldrb	r0, [r3, #0]
100098fc:	4b47      	ldr	r3, [pc, #284]	; (10009a1c <setup_compass+0x2c4>)
100098fe:	681b      	ldr	r3, [r3, #0]
10009900:	7fd9      	ldrb	r1, [r3, #31]
10009902:	1d3b      	adds	r3, r7, #4
10009904:	2201      	movs	r2, #1
10009906:	4c46      	ldr	r4, [pc, #280]	; (10009a20 <setup_compass+0x2c8>)
10009908:	47a0      	blx	r4
1000990a:	1e03      	subs	r3, r0, #0
1000990c:	d002      	beq.n	10009914 <setup_compass+0x1bc>
    return -1;
1000990e:	2301      	movs	r3, #1
10009910:	425b      	negs	r3, r3
10009912:	e074      	b.n	100099fe <setup_compass+0x2a6>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009914:	1d3b      	adds	r3, r7, #4
10009916:	2288      	movs	r2, #136	; 0x88
10009918:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000991a:	4b40      	ldr	r3, [pc, #256]	; (10009a1c <setup_compass+0x2c4>)
1000991c:	685b      	ldr	r3, [r3, #4]
1000991e:	7818      	ldrb	r0, [r3, #0]
10009920:	4b3e      	ldr	r3, [pc, #248]	; (10009a1c <setup_compass+0x2c4>)
10009922:	681b      	ldr	r3, [r3, #0]
10009924:	2220      	movs	r2, #32
10009926:	5c99      	ldrb	r1, [r3, r2]
10009928:	1d3b      	adds	r3, r7, #4
1000992a:	2201      	movs	r2, #1
1000992c:	4c3c      	ldr	r4, [pc, #240]	; (10009a20 <setup_compass+0x2c8>)
1000992e:	47a0      	blx	r4
10009930:	1e03      	subs	r3, r0, #0
10009932:	d002      	beq.n	1000993a <setup_compass+0x1e2>
    return -1;
10009934:	2301      	movs	r3, #1
10009936:	425b      	negs	r3, r3
10009938:	e061      	b.n	100099fe <setup_compass+0x2a6>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1000993a:	4b38      	ldr	r3, [pc, #224]	; (10009a1c <setup_compass+0x2c4>)
1000993c:	222a      	movs	r2, #42	; 0x2a
1000993e:	5c9a      	ldrb	r2, [r3, r2]
10009940:	1d3b      	adds	r3, r7, #4
10009942:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009944:	4b35      	ldr	r3, [pc, #212]	; (10009a1c <setup_compass+0x2c4>)
10009946:	685b      	ldr	r3, [r3, #4]
10009948:	7818      	ldrb	r0, [r3, #0]
1000994a:	4b34      	ldr	r3, [pc, #208]	; (10009a1c <setup_compass+0x2c4>)
1000994c:	681b      	ldr	r3, [r3, #0]
1000994e:	2221      	movs	r2, #33	; 0x21
10009950:	5c99      	ldrb	r1, [r3, r2]
10009952:	1d3b      	adds	r3, r7, #4
10009954:	2201      	movs	r2, #1
10009956:	4c32      	ldr	r4, [pc, #200]	; (10009a20 <setup_compass+0x2c8>)
10009958:	47a0      	blx	r4
1000995a:	1e03      	subs	r3, r0, #0
1000995c:	d002      	beq.n	10009964 <setup_compass+0x20c>
    return -1;
1000995e:	2301      	movs	r3, #1
10009960:	425b      	negs	r3, r3
10009962:	e04c      	b.n	100099fe <setup_compass+0x2a6>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009964:	1d3b      	adds	r3, r7, #4
10009966:	220a      	movs	r2, #10
10009968:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000996a:	4b2c      	ldr	r3, [pc, #176]	; (10009a1c <setup_compass+0x2c4>)
1000996c:	685b      	ldr	r3, [r3, #4]
1000996e:	7818      	ldrb	r0, [r3, #0]
10009970:	4b2a      	ldr	r3, [pc, #168]	; (10009a1c <setup_compass+0x2c4>)
10009972:	681b      	ldr	r3, [r3, #0]
10009974:	2222      	movs	r2, #34	; 0x22
10009976:	5c99      	ldrb	r1, [r3, r2]
10009978:	1d3b      	adds	r3, r7, #4
1000997a:	2201      	movs	r2, #1
1000997c:	4c28      	ldr	r4, [pc, #160]	; (10009a20 <setup_compass+0x2c8>)
1000997e:	47a0      	blx	r4
10009980:	1e03      	subs	r3, r0, #0
10009982:	d002      	beq.n	1000998a <setup_compass+0x232>
    return -1;
10009984:	2301      	movs	r3, #1
10009986:	425b      	negs	r3, r3
10009988:	e039      	b.n	100099fe <setup_compass+0x2a6>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000998a:	1d3b      	adds	r3, r7, #4
1000998c:	2281      	movs	r2, #129	; 0x81
1000998e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009990:	4b22      	ldr	r3, [pc, #136]	; (10009a1c <setup_compass+0x2c4>)
10009992:	685b      	ldr	r3, [r3, #4]
10009994:	7818      	ldrb	r0, [r3, #0]
10009996:	4b21      	ldr	r3, [pc, #132]	; (10009a1c <setup_compass+0x2c4>)
10009998:	681b      	ldr	r3, [r3, #0]
1000999a:	2223      	movs	r2, #35	; 0x23
1000999c:	5c99      	ldrb	r1, [r3, r2]
1000999e:	1d3b      	adds	r3, r7, #4
100099a0:	2201      	movs	r2, #1
100099a2:	4c1f      	ldr	r4, [pc, #124]	; (10009a20 <setup_compass+0x2c8>)
100099a4:	47a0      	blx	r4
100099a6:	1e03      	subs	r3, r0, #0
100099a8:	d002      	beq.n	100099b0 <setup_compass+0x258>
    return -1;
100099aa:	2301      	movs	r3, #1
100099ac:	425b      	negs	r3, r3
100099ae:	e026      	b.n	100099fe <setup_compass+0x2a6>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100099b0:	1d3b      	adds	r3, r7, #4
100099b2:	2211      	movs	r2, #17
100099b4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100099b6:	4b19      	ldr	r3, [pc, #100]	; (10009a1c <setup_compass+0x2c4>)
100099b8:	685b      	ldr	r3, [r3, #4]
100099ba:	7818      	ldrb	r0, [r3, #0]
100099bc:	4b17      	ldr	r3, [pc, #92]	; (10009a1c <setup_compass+0x2c4>)
100099be:	681b      	ldr	r3, [r3, #0]
100099c0:	2226      	movs	r2, #38	; 0x26
100099c2:	5c99      	ldrb	r1, [r3, r2]
100099c4:	1d3b      	adds	r3, r7, #4
100099c6:	2201      	movs	r2, #1
100099c8:	4c15      	ldr	r4, [pc, #84]	; (10009a20 <setup_compass+0x2c8>)
100099ca:	47a0      	blx	r4
100099cc:	1e03      	subs	r3, r0, #0
100099ce:	d002      	beq.n	100099d6 <setup_compass+0x27e>
    return -1;
100099d0:	2301      	movs	r3, #1
100099d2:	425b      	negs	r3, r3
100099d4:	e013      	b.n	100099fe <setup_compass+0x2a6>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100099d6:	1d3b      	adds	r3, r7, #4
100099d8:	2203      	movs	r2, #3
100099da:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100099dc:	4b0f      	ldr	r3, [pc, #60]	; (10009a1c <setup_compass+0x2c4>)
100099de:	685b      	ldr	r3, [r3, #4]
100099e0:	7818      	ldrb	r0, [r3, #0]
100099e2:	4b0e      	ldr	r3, [pc, #56]	; (10009a1c <setup_compass+0x2c4>)
100099e4:	681b      	ldr	r3, [r3, #0]
100099e6:	2227      	movs	r2, #39	; 0x27
100099e8:	5c99      	ldrb	r1, [r3, r2]
100099ea:	1d3b      	adds	r3, r7, #4
100099ec:	2201      	movs	r2, #1
100099ee:	4c0c      	ldr	r4, [pc, #48]	; (10009a20 <setup_compass+0x2c8>)
100099f0:	47a0      	blx	r4
100099f2:	1e03      	subs	r3, r0, #0
100099f4:	d002      	beq.n	100099fc <setup_compass+0x2a4>
    return -1;
100099f6:	2301      	movs	r3, #1
100099f8:	425b      	negs	r3, r3
100099fa:	e000      	b.n	100099fe <setup_compass+0x2a6>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
    return -1;
    #endif

    return 0;
100099fc:	2300      	movs	r3, #0
}
100099fe:	0018      	movs	r0, r3
10009a00:	46bd      	mov	sp, r7
10009a02:	b005      	add	sp, #20
10009a04:	bd90      	pop	{r4, r7, pc}
10009a06:	46c0      	nop			; (mov r8, r8)
10009a08:	10009331 	.word	0x10009331
10009a0c:	100081e9 	.word	0x100081e9
10009a10:	10019fe4 	.word	0x10019fe4
10009a14:	10019095 	.word	0x10019095
10009a18:	1001a470 	.word	0x1001a470
10009a1c:	1001b844 	.word	0x1001b844
10009a20:	100080d5 	.word	0x100080d5
10009a24:	1000c4b9 	.word	0x1000c4b9

10009a28 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009a28:	b590      	push	{r4, r7, lr}
10009a2a:	b087      	sub	sp, #28
10009a2c:	af00      	add	r7, sp, #0
10009a2e:	0002      	movs	r2, r0
10009a30:	1dfb      	adds	r3, r7, #7
10009a32:	701a      	strb	r2, [r3, #0]
10009a34:	1d3b      	adds	r3, r7, #4
10009a36:	1c0a      	adds	r2, r1, #0
10009a38:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009a3a:	1dfb      	adds	r3, r7, #7
10009a3c:	781b      	ldrb	r3, [r3, #0]
10009a3e:	2207      	movs	r2, #7
10009a40:	4013      	ands	r3, r2
10009a42:	d005      	beq.n	10009a50 <dmp_set_tap_thresh+0x28>
10009a44:	1d3b      	adds	r3, r7, #4
10009a46:	881a      	ldrh	r2, [r3, #0]
10009a48:	23c8      	movs	r3, #200	; 0xc8
10009a4a:	00db      	lsls	r3, r3, #3
10009a4c:	429a      	cmp	r2, r3
10009a4e:	d902      	bls.n	10009a56 <dmp_set_tap_thresh+0x2e>
        return -1;
10009a50:	2301      	movs	r3, #1
10009a52:	425b      	negs	r3, r3
10009a54:	e112      	b.n	10009c7c <dmp_set_tap_thresh+0x254>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009a56:	1d3b      	adds	r3, r7, #4
10009a58:	881a      	ldrh	r2, [r3, #0]
10009a5a:	4b8a      	ldr	r3, [pc, #552]	; (10009c84 <dmp_set_tap_thresh+0x25c>)
10009a5c:	0010      	movs	r0, r2
10009a5e:	4798      	blx	r3
10009a60:	1c02      	adds	r2, r0, #0
10009a62:	4b89      	ldr	r3, [pc, #548]	; (10009c88 <dmp_set_tap_thresh+0x260>)
10009a64:	4989      	ldr	r1, [pc, #548]	; (10009c8c <dmp_set_tap_thresh+0x264>)
10009a66:	1c10      	adds	r0, r2, #0
10009a68:	4798      	blx	r3
10009a6a:	1c03      	adds	r3, r0, #0
10009a6c:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
10009a6e:	230b      	movs	r3, #11
10009a70:	18fb      	adds	r3, r7, r3
10009a72:	0018      	movs	r0, r3
10009a74:	4b86      	ldr	r3, [pc, #536]	; (10009c90 <dmp_set_tap_thresh+0x268>)
10009a76:	4798      	blx	r3
    switch (accel_fsr) {
10009a78:	230b      	movs	r3, #11
10009a7a:	18fb      	adds	r3, r7, r3
10009a7c:	781b      	ldrb	r3, [r3, #0]
10009a7e:	2b04      	cmp	r3, #4
10009a80:	d024      	beq.n	10009acc <dmp_set_tap_thresh+0xa4>
10009a82:	dc02      	bgt.n	10009a8a <dmp_set_tap_thresh+0x62>
10009a84:	2b02      	cmp	r3, #2
10009a86:	d005      	beq.n	10009a94 <dmp_set_tap_thresh+0x6c>
10009a88:	e074      	b.n	10009b74 <dmp_set_tap_thresh+0x14c>
10009a8a:	2b08      	cmp	r3, #8
10009a8c:	d03a      	beq.n	10009b04 <dmp_set_tap_thresh+0xdc>
10009a8e:	2b10      	cmp	r3, #16
10009a90:	d054      	beq.n	10009b3c <dmp_set_tap_thresh+0x114>
10009a92:	e06f      	b.n	10009b74 <dmp_set_tap_thresh+0x14c>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009a94:	4b7f      	ldr	r3, [pc, #508]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009a96:	218d      	movs	r1, #141	; 0x8d
10009a98:	05c9      	lsls	r1, r1, #23
10009a9a:	6938      	ldr	r0, [r7, #16]
10009a9c:	4798      	blx	r3
10009a9e:	1c03      	adds	r3, r0, #0
10009aa0:	1c1a      	adds	r2, r3, #0
10009aa2:	2316      	movs	r3, #22
10009aa4:	18fc      	adds	r4, r7, r3
10009aa6:	4b7c      	ldr	r3, [pc, #496]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009aa8:	1c10      	adds	r0, r2, #0
10009aaa:	4798      	blx	r3
10009aac:	0003      	movs	r3, r0
10009aae:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009ab0:	4b78      	ldr	r3, [pc, #480]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009ab2:	497a      	ldr	r1, [pc, #488]	; (10009c9c <dmp_set_tap_thresh+0x274>)
10009ab4:	6938      	ldr	r0, [r7, #16]
10009ab6:	4798      	blx	r3
10009ab8:	1c03      	adds	r3, r0, #0
10009aba:	1c1a      	adds	r2, r3, #0
10009abc:	2314      	movs	r3, #20
10009abe:	18fc      	adds	r4, r7, r3
10009ac0:	4b75      	ldr	r3, [pc, #468]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009ac2:	1c10      	adds	r0, r2, #0
10009ac4:	4798      	blx	r3
10009ac6:	0003      	movs	r3, r0
10009ac8:	8023      	strh	r3, [r4, #0]
        break;
10009aca:	e056      	b.n	10009b7a <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009acc:	4b71      	ldr	r3, [pc, #452]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009ace:	218c      	movs	r1, #140	; 0x8c
10009ad0:	05c9      	lsls	r1, r1, #23
10009ad2:	6938      	ldr	r0, [r7, #16]
10009ad4:	4798      	blx	r3
10009ad6:	1c03      	adds	r3, r0, #0
10009ad8:	1c1a      	adds	r2, r3, #0
10009ada:	2316      	movs	r3, #22
10009adc:	18fc      	adds	r4, r7, r3
10009ade:	4b6e      	ldr	r3, [pc, #440]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009ae0:	1c10      	adds	r0, r2, #0
10009ae2:	4798      	blx	r3
10009ae4:	0003      	movs	r3, r0
10009ae6:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009ae8:	4b6a      	ldr	r3, [pc, #424]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009aea:	496d      	ldr	r1, [pc, #436]	; (10009ca0 <dmp_set_tap_thresh+0x278>)
10009aec:	6938      	ldr	r0, [r7, #16]
10009aee:	4798      	blx	r3
10009af0:	1c03      	adds	r3, r0, #0
10009af2:	1c1a      	adds	r2, r3, #0
10009af4:	2314      	movs	r3, #20
10009af6:	18fc      	adds	r4, r7, r3
10009af8:	4b67      	ldr	r3, [pc, #412]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009afa:	1c10      	adds	r0, r2, #0
10009afc:	4798      	blx	r3
10009afe:	0003      	movs	r3, r0
10009b00:	8023      	strh	r3, [r4, #0]
        break;
10009b02:	e03a      	b.n	10009b7a <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009b04:	4b63      	ldr	r3, [pc, #396]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009b06:	218b      	movs	r1, #139	; 0x8b
10009b08:	05c9      	lsls	r1, r1, #23
10009b0a:	6938      	ldr	r0, [r7, #16]
10009b0c:	4798      	blx	r3
10009b0e:	1c03      	adds	r3, r0, #0
10009b10:	1c1a      	adds	r2, r3, #0
10009b12:	2316      	movs	r3, #22
10009b14:	18fc      	adds	r4, r7, r3
10009b16:	4b60      	ldr	r3, [pc, #384]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009b18:	1c10      	adds	r0, r2, #0
10009b1a:	4798      	blx	r3
10009b1c:	0003      	movs	r3, r0
10009b1e:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009b20:	4b5c      	ldr	r3, [pc, #368]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009b22:	4960      	ldr	r1, [pc, #384]	; (10009ca4 <dmp_set_tap_thresh+0x27c>)
10009b24:	6938      	ldr	r0, [r7, #16]
10009b26:	4798      	blx	r3
10009b28:	1c03      	adds	r3, r0, #0
10009b2a:	1c1a      	adds	r2, r3, #0
10009b2c:	2314      	movs	r3, #20
10009b2e:	18fc      	adds	r4, r7, r3
10009b30:	4b59      	ldr	r3, [pc, #356]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009b32:	1c10      	adds	r0, r2, #0
10009b34:	4798      	blx	r3
10009b36:	0003      	movs	r3, r0
10009b38:	8023      	strh	r3, [r4, #0]
        break;
10009b3a:	e01e      	b.n	10009b7a <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009b3c:	4b55      	ldr	r3, [pc, #340]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009b3e:	218a      	movs	r1, #138	; 0x8a
10009b40:	05c9      	lsls	r1, r1, #23
10009b42:	6938      	ldr	r0, [r7, #16]
10009b44:	4798      	blx	r3
10009b46:	1c03      	adds	r3, r0, #0
10009b48:	1c1a      	adds	r2, r3, #0
10009b4a:	2316      	movs	r3, #22
10009b4c:	18fc      	adds	r4, r7, r3
10009b4e:	4b52      	ldr	r3, [pc, #328]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009b50:	1c10      	adds	r0, r2, #0
10009b52:	4798      	blx	r3
10009b54:	0003      	movs	r3, r0
10009b56:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009b58:	4b4e      	ldr	r3, [pc, #312]	; (10009c94 <dmp_set_tap_thresh+0x26c>)
10009b5a:	4953      	ldr	r1, [pc, #332]	; (10009ca8 <dmp_set_tap_thresh+0x280>)
10009b5c:	6938      	ldr	r0, [r7, #16]
10009b5e:	4798      	blx	r3
10009b60:	1c03      	adds	r3, r0, #0
10009b62:	1c1a      	adds	r2, r3, #0
10009b64:	2314      	movs	r3, #20
10009b66:	18fc      	adds	r4, r7, r3
10009b68:	4b4b      	ldr	r3, [pc, #300]	; (10009c98 <dmp_set_tap_thresh+0x270>)
10009b6a:	1c10      	adds	r0, r2, #0
10009b6c:	4798      	blx	r3
10009b6e:	0003      	movs	r3, r0
10009b70:	8023      	strh	r3, [r4, #0]
        break;
10009b72:	e002      	b.n	10009b7a <dmp_set_tap_thresh+0x152>
    default:
        return -1;
10009b74:	2301      	movs	r3, #1
10009b76:	425b      	negs	r3, r3
10009b78:	e080      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009b7a:	2316      	movs	r3, #22
10009b7c:	18fb      	adds	r3, r7, r3
10009b7e:	881b      	ldrh	r3, [r3, #0]
10009b80:	0a1b      	lsrs	r3, r3, #8
10009b82:	b29b      	uxth	r3, r3
10009b84:	b2da      	uxtb	r2, r3
10009b86:	230c      	movs	r3, #12
10009b88:	18fb      	adds	r3, r7, r3
10009b8a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009b8c:	2316      	movs	r3, #22
10009b8e:	18fb      	adds	r3, r7, r3
10009b90:	881b      	ldrh	r3, [r3, #0]
10009b92:	b2da      	uxtb	r2, r3
10009b94:	230c      	movs	r3, #12
10009b96:	18fb      	adds	r3, r7, r3
10009b98:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009b9a:	2314      	movs	r3, #20
10009b9c:	18fb      	adds	r3, r7, r3
10009b9e:	881b      	ldrh	r3, [r3, #0]
10009ba0:	0a1b      	lsrs	r3, r3, #8
10009ba2:	b29b      	uxth	r3, r3
10009ba4:	b2da      	uxtb	r2, r3
10009ba6:	230c      	movs	r3, #12
10009ba8:	18fb      	adds	r3, r7, r3
10009baa:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009bac:	2314      	movs	r3, #20
10009bae:	18fb      	adds	r3, r7, r3
10009bb0:	881b      	ldrh	r3, [r3, #0]
10009bb2:	b2da      	uxtb	r2, r3
10009bb4:	230c      	movs	r3, #12
10009bb6:	18fb      	adds	r3, r7, r3
10009bb8:	70da      	strb	r2, [r3, #3]

    if (axis & TAP_X) {
10009bba:	1dfb      	adds	r3, r7, #7
10009bbc:	781b      	ldrb	r3, [r3, #0]
10009bbe:	2201      	movs	r2, #1
10009bc0:	4013      	ands	r3, r2
10009bc2:	d01a      	beq.n	10009bfa <dmp_set_tap_thresh+0x1d2>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
10009bc4:	230c      	movs	r3, #12
10009bc6:	18fa      	adds	r2, r7, r3
10009bc8:	23ea      	movs	r3, #234	; 0xea
10009bca:	005b      	lsls	r3, r3, #1
10009bcc:	2102      	movs	r1, #2
10009bce:	0018      	movs	r0, r3
10009bd0:	4b36      	ldr	r3, [pc, #216]	; (10009cac <dmp_set_tap_thresh+0x284>)
10009bd2:	4798      	blx	r3
10009bd4:	1e03      	subs	r3, r0, #0
10009bd6:	d002      	beq.n	10009bde <dmp_set_tap_thresh+0x1b6>
            return -1;
10009bd8:	2301      	movs	r3, #1
10009bda:	425b      	negs	r3, r3
10009bdc:	e04e      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
10009bde:	230c      	movs	r3, #12
10009be0:	18fb      	adds	r3, r7, r3
10009be2:	3302      	adds	r3, #2
10009be4:	2292      	movs	r2, #146	; 0x92
10009be6:	0050      	lsls	r0, r2, #1
10009be8:	001a      	movs	r2, r3
10009bea:	2102      	movs	r1, #2
10009bec:	4b2f      	ldr	r3, [pc, #188]	; (10009cac <dmp_set_tap_thresh+0x284>)
10009bee:	4798      	blx	r3
10009bf0:	1e03      	subs	r3, r0, #0
10009bf2:	d002      	beq.n	10009bfa <dmp_set_tap_thresh+0x1d2>
            return -1;
10009bf4:	2301      	movs	r3, #1
10009bf6:	425b      	negs	r3, r3
10009bf8:	e040      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
    }
    if (axis & TAP_Y) {
10009bfa:	1dfb      	adds	r3, r7, #7
10009bfc:	781b      	ldrb	r3, [r3, #0]
10009bfe:	2202      	movs	r2, #2
10009c00:	4013      	ands	r3, r2
10009c02:	d01a      	beq.n	10009c3a <dmp_set_tap_thresh+0x212>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009c04:	230c      	movs	r3, #12
10009c06:	18fa      	adds	r2, r7, r3
10009c08:	23ec      	movs	r3, #236	; 0xec
10009c0a:	005b      	lsls	r3, r3, #1
10009c0c:	2102      	movs	r1, #2
10009c0e:	0018      	movs	r0, r3
10009c10:	4b26      	ldr	r3, [pc, #152]	; (10009cac <dmp_set_tap_thresh+0x284>)
10009c12:	4798      	blx	r3
10009c14:	1e03      	subs	r3, r0, #0
10009c16:	d002      	beq.n	10009c1e <dmp_set_tap_thresh+0x1f6>
            return -1;
10009c18:	2301      	movs	r3, #1
10009c1a:	425b      	negs	r3, r3
10009c1c:	e02e      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009c1e:	230c      	movs	r3, #12
10009c20:	18fb      	adds	r3, r7, r3
10009c22:	3302      	adds	r3, #2
10009c24:	2294      	movs	r2, #148	; 0x94
10009c26:	0050      	lsls	r0, r2, #1
10009c28:	001a      	movs	r2, r3
10009c2a:	2102      	movs	r1, #2
10009c2c:	4b1f      	ldr	r3, [pc, #124]	; (10009cac <dmp_set_tap_thresh+0x284>)
10009c2e:	4798      	blx	r3
10009c30:	1e03      	subs	r3, r0, #0
10009c32:	d002      	beq.n	10009c3a <dmp_set_tap_thresh+0x212>
            return -1;
10009c34:	2301      	movs	r3, #1
10009c36:	425b      	negs	r3, r3
10009c38:	e020      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
    }
    if (axis & TAP_Z) {
10009c3a:	1dfb      	adds	r3, r7, #7
10009c3c:	781b      	ldrb	r3, [r3, #0]
10009c3e:	2204      	movs	r2, #4
10009c40:	4013      	ands	r3, r2
10009c42:	d01a      	beq.n	10009c7a <dmp_set_tap_thresh+0x252>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009c44:	230c      	movs	r3, #12
10009c46:	18fa      	adds	r2, r7, r3
10009c48:	23ee      	movs	r3, #238	; 0xee
10009c4a:	005b      	lsls	r3, r3, #1
10009c4c:	2102      	movs	r1, #2
10009c4e:	0018      	movs	r0, r3
10009c50:	4b16      	ldr	r3, [pc, #88]	; (10009cac <dmp_set_tap_thresh+0x284>)
10009c52:	4798      	blx	r3
10009c54:	1e03      	subs	r3, r0, #0
10009c56:	d002      	beq.n	10009c5e <dmp_set_tap_thresh+0x236>
            return -1;
10009c58:	2301      	movs	r3, #1
10009c5a:	425b      	negs	r3, r3
10009c5c:	e00e      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009c5e:	230c      	movs	r3, #12
10009c60:	18fb      	adds	r3, r7, r3
10009c62:	3302      	adds	r3, #2
10009c64:	2296      	movs	r2, #150	; 0x96
10009c66:	0050      	lsls	r0, r2, #1
10009c68:	001a      	movs	r2, r3
10009c6a:	2102      	movs	r1, #2
10009c6c:	4b0f      	ldr	r3, [pc, #60]	; (10009cac <dmp_set_tap_thresh+0x284>)
10009c6e:	4798      	blx	r3
10009c70:	1e03      	subs	r3, r0, #0
10009c72:	d002      	beq.n	10009c7a <dmp_set_tap_thresh+0x252>
            return -1;
10009c74:	2301      	movs	r3, #1
10009c76:	425b      	negs	r3, r3
10009c78:	e000      	b.n	10009c7c <dmp_set_tap_thresh+0x254>
    }
    return 0;
10009c7a:	2300      	movs	r3, #0
}
10009c7c:	0018      	movs	r0, r3
10009c7e:	46bd      	mov	sp, r7
10009c80:	b007      	add	sp, #28
10009c82:	bd90      	pop	{r4, r7, pc}
10009c84:	10017e51 	.word	0x10017e51
10009c88:	10017545 	.word	0x10017545
10009c8c:	43480000 	.word	0x43480000
10009c90:	10008b19 	.word	0x10008b19
10009c94:	100178d9 	.word	0x100178d9
10009c98:	100174d9 	.word	0x100174d9
10009c9c:	46400000 	.word	0x46400000
10009ca0:	45c00000 	.word	0x45c00000
10009ca4:	45400000 	.word	0x45400000
10009ca8:	44c00000 	.word	0x44c00000
10009cac:	100095d5 	.word	0x100095d5

10009cb0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009cb0:	b580      	push	{r7, lr}
10009cb2:	b084      	sub	sp, #16
10009cb4:	af00      	add	r7, sp, #0
10009cb6:	0002      	movs	r2, r0
10009cb8:	1dfb      	adds	r3, r7, #7
10009cba:	701a      	strb	r2, [r3, #0]
    unsigned char tmp = 0;
10009cbc:	230f      	movs	r3, #15
10009cbe:	18fb      	adds	r3, r7, r3
10009cc0:	2200      	movs	r2, #0
10009cc2:	701a      	strb	r2, [r3, #0]

    if (axis & TAP_X)
10009cc4:	1dfb      	adds	r3, r7, #7
10009cc6:	781b      	ldrb	r3, [r3, #0]
10009cc8:	2201      	movs	r2, #1
10009cca:	4013      	ands	r3, r2
10009ccc:	d008      	beq.n	10009ce0 <dmp_set_tap_axes+0x30>
        tmp |= 0x30;
10009cce:	230f      	movs	r3, #15
10009cd0:	18fb      	adds	r3, r7, r3
10009cd2:	781b      	ldrb	r3, [r3, #0]
10009cd4:	2230      	movs	r2, #48	; 0x30
10009cd6:	4313      	orrs	r3, r2
10009cd8:	b2da      	uxtb	r2, r3
10009cda:	230f      	movs	r3, #15
10009cdc:	18fb      	adds	r3, r7, r3
10009cde:	701a      	strb	r2, [r3, #0]
    if (axis & TAP_Y)
10009ce0:	1dfb      	adds	r3, r7, #7
10009ce2:	781b      	ldrb	r3, [r3, #0]
10009ce4:	2202      	movs	r2, #2
10009ce6:	4013      	ands	r3, r2
10009ce8:	d008      	beq.n	10009cfc <dmp_set_tap_axes+0x4c>
        tmp |= 0x0C;
10009cea:	230f      	movs	r3, #15
10009cec:	18fb      	adds	r3, r7, r3
10009cee:	781b      	ldrb	r3, [r3, #0]
10009cf0:	220c      	movs	r2, #12
10009cf2:	4313      	orrs	r3, r2
10009cf4:	b2da      	uxtb	r2, r3
10009cf6:	230f      	movs	r3, #15
10009cf8:	18fb      	adds	r3, r7, r3
10009cfa:	701a      	strb	r2, [r3, #0]
    if (axis & TAP_Z)
10009cfc:	1dfb      	adds	r3, r7, #7
10009cfe:	781b      	ldrb	r3, [r3, #0]
10009d00:	2204      	movs	r2, #4
10009d02:	4013      	ands	r3, r2
10009d04:	d008      	beq.n	10009d18 <dmp_set_tap_axes+0x68>
        tmp |= 0x03;
10009d06:	230f      	movs	r3, #15
10009d08:	18fb      	adds	r3, r7, r3
10009d0a:	781b      	ldrb	r3, [r3, #0]
10009d0c:	2203      	movs	r2, #3
10009d0e:	4313      	orrs	r3, r2
10009d10:	b2da      	uxtb	r2, r3
10009d12:	230f      	movs	r3, #15
10009d14:	18fb      	adds	r3, r7, r3
10009d16:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009d18:	230f      	movs	r3, #15
10009d1a:	18fa      	adds	r2, r7, r3
10009d1c:	23a4      	movs	r3, #164	; 0xa4
10009d1e:	005b      	lsls	r3, r3, #1
10009d20:	2101      	movs	r1, #1
10009d22:	0018      	movs	r0, r3
10009d24:	4b03      	ldr	r3, [pc, #12]	; (10009d34 <dmp_set_tap_axes+0x84>)
10009d26:	4798      	blx	r3
10009d28:	0003      	movs	r3, r0
}
10009d2a:	0018      	movs	r0, r3
10009d2c:	46bd      	mov	sp, r7
10009d2e:	b004      	add	sp, #16
10009d30:	bd80      	pop	{r7, pc}
10009d32:	46c0      	nop			; (mov r8, r8)
10009d34:	100095d5 	.word	0x100095d5

10009d38 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009d38:	b580      	push	{r7, lr}
10009d3a:	b084      	sub	sp, #16
10009d3c:	af00      	add	r7, sp, #0
10009d3e:	0002      	movs	r2, r0
10009d40:	1dfb      	adds	r3, r7, #7
10009d42:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (min_taps < 1)
10009d44:	1dfb      	adds	r3, r7, #7
10009d46:	781b      	ldrb	r3, [r3, #0]
10009d48:	2b00      	cmp	r3, #0
10009d4a:	d103      	bne.n	10009d54 <dmp_set_tap_count+0x1c>
        min_taps = 1;
10009d4c:	1dfb      	adds	r3, r7, #7
10009d4e:	2201      	movs	r2, #1
10009d50:	701a      	strb	r2, [r3, #0]
10009d52:	e006      	b.n	10009d62 <dmp_set_tap_count+0x2a>
    else if (min_taps > 4)
10009d54:	1dfb      	adds	r3, r7, #7
10009d56:	781b      	ldrb	r3, [r3, #0]
10009d58:	2b04      	cmp	r3, #4
10009d5a:	d902      	bls.n	10009d62 <dmp_set_tap_count+0x2a>
        min_taps = 4;
10009d5c:	1dfb      	adds	r3, r7, #7
10009d5e:	2204      	movs	r2, #4
10009d60:	701a      	strb	r2, [r3, #0]

    tmp = min_taps - 1;
10009d62:	1dfb      	adds	r3, r7, #7
10009d64:	781b      	ldrb	r3, [r3, #0]
10009d66:	3b01      	subs	r3, #1
10009d68:	b2da      	uxtb	r2, r3
10009d6a:	230f      	movs	r3, #15
10009d6c:	18fb      	adds	r3, r7, r3
10009d6e:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009d70:	230f      	movs	r3, #15
10009d72:	18fa      	adds	r2, r7, r3
10009d74:	2350      	movs	r3, #80	; 0x50
10009d76:	33ff      	adds	r3, #255	; 0xff
10009d78:	2101      	movs	r1, #1
10009d7a:	0018      	movs	r0, r3
10009d7c:	4b03      	ldr	r3, [pc, #12]	; (10009d8c <dmp_set_tap_count+0x54>)
10009d7e:	4798      	blx	r3
10009d80:	0003      	movs	r3, r0
}
10009d82:	0018      	movs	r0, r3
10009d84:	46bd      	mov	sp, r7
10009d86:	b004      	add	sp, #16
10009d88:	bd80      	pop	{r7, pc}
10009d8a:	46c0      	nop			; (mov r8, r8)
10009d8c:	100095d5 	.word	0x100095d5

10009d90 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009d90:	b590      	push	{r4, r7, lr}
10009d92:	b085      	sub	sp, #20
10009d94:	af00      	add	r7, sp, #0
10009d96:	0002      	movs	r2, r0
10009d98:	1dbb      	adds	r3, r7, #6
10009d9a:	801a      	strh	r2, [r3, #0]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009d9c:	230e      	movs	r3, #14
10009d9e:	18fc      	adds	r4, r7, r3
10009da0:	1dbb      	adds	r3, r7, #6
10009da2:	881a      	ldrh	r2, [r3, #0]
10009da4:	4b11      	ldr	r3, [pc, #68]	; (10009dec <dmp_set_tap_time+0x5c>)
10009da6:	2105      	movs	r1, #5
10009da8:	0010      	movs	r0, r2
10009daa:	4798      	blx	r3
10009dac:	0003      	movs	r3, r0
10009dae:	8023      	strh	r3, [r4, #0]
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009db0:	230e      	movs	r3, #14
10009db2:	18fb      	adds	r3, r7, r3
10009db4:	881b      	ldrh	r3, [r3, #0]
10009db6:	0a1b      	lsrs	r3, r3, #8
10009db8:	b29b      	uxth	r3, r3
10009dba:	b2da      	uxtb	r2, r3
10009dbc:	230c      	movs	r3, #12
10009dbe:	18fb      	adds	r3, r7, r3
10009dc0:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009dc2:	230e      	movs	r3, #14
10009dc4:	18fb      	adds	r3, r7, r3
10009dc6:	881b      	ldrh	r3, [r3, #0]
10009dc8:	b2da      	uxtb	r2, r3
10009dca:	230c      	movs	r3, #12
10009dcc:	18fb      	adds	r3, r7, r3
10009dce:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009dd0:	230c      	movs	r3, #12
10009dd2:	18fa      	adds	r2, r7, r3
10009dd4:	23ef      	movs	r3, #239	; 0xef
10009dd6:	005b      	lsls	r3, r3, #1
10009dd8:	2102      	movs	r1, #2
10009dda:	0018      	movs	r0, r3
10009ddc:	4b04      	ldr	r3, [pc, #16]	; (10009df0 <dmp_set_tap_time+0x60>)
10009dde:	4798      	blx	r3
10009de0:	0003      	movs	r3, r0
}
10009de2:	0018      	movs	r0, r3
10009de4:	46bd      	mov	sp, r7
10009de6:	b005      	add	sp, #20
10009de8:	bd90      	pop	{r4, r7, pc}
10009dea:	46c0      	nop			; (mov r8, r8)
10009dec:	100170a5 	.word	0x100170a5
10009df0:	100095d5 	.word	0x100095d5

10009df4 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009df4:	b590      	push	{r4, r7, lr}
10009df6:	b085      	sub	sp, #20
10009df8:	af00      	add	r7, sp, #0
10009dfa:	0002      	movs	r2, r0
10009dfc:	1dbb      	adds	r3, r7, #6
10009dfe:	801a      	strh	r2, [r3, #0]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009e00:	230e      	movs	r3, #14
10009e02:	18fc      	adds	r4, r7, r3
10009e04:	1dbb      	adds	r3, r7, #6
10009e06:	881a      	ldrh	r2, [r3, #0]
10009e08:	4b11      	ldr	r3, [pc, #68]	; (10009e50 <dmp_set_tap_time_multi+0x5c>)
10009e0a:	2105      	movs	r1, #5
10009e0c:	0010      	movs	r0, r2
10009e0e:	4798      	blx	r3
10009e10:	0003      	movs	r3, r0
10009e12:	8023      	strh	r3, [r4, #0]
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009e14:	230e      	movs	r3, #14
10009e16:	18fb      	adds	r3, r7, r3
10009e18:	881b      	ldrh	r3, [r3, #0]
10009e1a:	0a1b      	lsrs	r3, r3, #8
10009e1c:	b29b      	uxth	r3, r3
10009e1e:	b2da      	uxtb	r2, r3
10009e20:	230c      	movs	r3, #12
10009e22:	18fb      	adds	r3, r7, r3
10009e24:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009e26:	230e      	movs	r3, #14
10009e28:	18fb      	adds	r3, r7, r3
10009e2a:	881b      	ldrh	r3, [r3, #0]
10009e2c:	b2da      	uxtb	r2, r3
10009e2e:	230c      	movs	r3, #12
10009e30:	18fb      	adds	r3, r7, r3
10009e32:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009e34:	230c      	movs	r3, #12
10009e36:	18fa      	adds	r2, r7, r3
10009e38:	23ed      	movs	r3, #237	; 0xed
10009e3a:	005b      	lsls	r3, r3, #1
10009e3c:	2102      	movs	r1, #2
10009e3e:	0018      	movs	r0, r3
10009e40:	4b04      	ldr	r3, [pc, #16]	; (10009e54 <dmp_set_tap_time_multi+0x60>)
10009e42:	4798      	blx	r3
10009e44:	0003      	movs	r3, r0
}
10009e46:	0018      	movs	r0, r3
10009e48:	46bd      	mov	sp, r7
10009e4a:	b005      	add	sp, #20
10009e4c:	bd90      	pop	{r4, r7, pc}
10009e4e:	46c0      	nop			; (mov r8, r8)
10009e50:	100170a5 	.word	0x100170a5
10009e54:	100095d5 	.word	0x100095d5

10009e58 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009e58:	b580      	push	{r7, lr}
10009e5a:	b084      	sub	sp, #16
10009e5c:	af00      	add	r7, sp, #0
10009e5e:	6078      	str	r0, [r7, #4]
10009e60:	000a      	movs	r2, r1
10009e62:	1cbb      	adds	r3, r7, #2
10009e64:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009e66:	6878      	ldr	r0, [r7, #4]
10009e68:	4b16      	ldr	r3, [pc, #88]	; (10009ec4 <dmp_set_shake_reject_thresh+0x6c>)
10009e6a:	22fa      	movs	r2, #250	; 0xfa
10009e6c:	0091      	lsls	r1, r2, #2
10009e6e:	4798      	blx	r3
10009e70:	0003      	movs	r3, r0
10009e72:	001a      	movs	r2, r3
10009e74:	1cbb      	adds	r3, r7, #2
10009e76:	881b      	ldrh	r3, [r3, #0]
10009e78:	4353      	muls	r3, r2
10009e7a:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009e7c:	68fb      	ldr	r3, [r7, #12]
10009e7e:	161b      	asrs	r3, r3, #24
10009e80:	b2da      	uxtb	r2, r3
10009e82:	2308      	movs	r3, #8
10009e84:	18fb      	adds	r3, r7, r3
10009e86:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009e88:	68fb      	ldr	r3, [r7, #12]
10009e8a:	141b      	asrs	r3, r3, #16
10009e8c:	b2da      	uxtb	r2, r3
10009e8e:	2308      	movs	r3, #8
10009e90:	18fb      	adds	r3, r7, r3
10009e92:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009e94:	68fb      	ldr	r3, [r7, #12]
10009e96:	121b      	asrs	r3, r3, #8
10009e98:	b2da      	uxtb	r2, r3
10009e9a:	2308      	movs	r3, #8
10009e9c:	18fb      	adds	r3, r7, r3
10009e9e:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009ea0:	68fb      	ldr	r3, [r7, #12]
10009ea2:	b2da      	uxtb	r2, r3
10009ea4:	2308      	movs	r3, #8
10009ea6:	18fb      	adds	r3, r7, r3
10009ea8:	70da      	strb	r2, [r3, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009eaa:	2308      	movs	r3, #8
10009eac:	18fa      	adds	r2, r7, r3
10009eae:	23ae      	movs	r3, #174	; 0xae
10009eb0:	005b      	lsls	r3, r3, #1
10009eb2:	2104      	movs	r1, #4
10009eb4:	0018      	movs	r0, r3
10009eb6:	4b04      	ldr	r3, [pc, #16]	; (10009ec8 <dmp_set_shake_reject_thresh+0x70>)
10009eb8:	4798      	blx	r3
10009eba:	0003      	movs	r3, r0
}
10009ebc:	0018      	movs	r0, r3
10009ebe:	46bd      	mov	sp, r7
10009ec0:	b004      	add	sp, #16
10009ec2:	bd80      	pop	{r7, pc}
10009ec4:	100171b9 	.word	0x100171b9
10009ec8:	100095d5 	.word	0x100095d5

10009ecc <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009ecc:	b590      	push	{r4, r7, lr}
10009ece:	b085      	sub	sp, #20
10009ed0:	af00      	add	r7, sp, #0
10009ed2:	0002      	movs	r2, r0
10009ed4:	1dbb      	adds	r3, r7, #6
10009ed6:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009ed8:	1dbc      	adds	r4, r7, #6
10009eda:	1dbb      	adds	r3, r7, #6
10009edc:	881a      	ldrh	r2, [r3, #0]
10009ede:	4b10      	ldr	r3, [pc, #64]	; (10009f20 <dmp_set_shake_reject_time+0x54>)
10009ee0:	2105      	movs	r1, #5
10009ee2:	0010      	movs	r0, r2
10009ee4:	4798      	blx	r3
10009ee6:	0003      	movs	r3, r0
10009ee8:	8023      	strh	r3, [r4, #0]
    tmp[0] = time >> 8;
10009eea:	1dbb      	adds	r3, r7, #6
10009eec:	881b      	ldrh	r3, [r3, #0]
10009eee:	0a1b      	lsrs	r3, r3, #8
10009ef0:	b29b      	uxth	r3, r3
10009ef2:	b2da      	uxtb	r2, r3
10009ef4:	230c      	movs	r3, #12
10009ef6:	18fb      	adds	r3, r7, r3
10009ef8:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009efa:	1dbb      	adds	r3, r7, #6
10009efc:	881b      	ldrh	r3, [r3, #0]
10009efe:	b2da      	uxtb	r2, r3
10009f00:	230c      	movs	r3, #12
10009f02:	18fb      	adds	r3, r7, r3
10009f04:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009f06:	230c      	movs	r3, #12
10009f08:	18fa      	adds	r2, r7, r3
10009f0a:	23ad      	movs	r3, #173	; 0xad
10009f0c:	005b      	lsls	r3, r3, #1
10009f0e:	2102      	movs	r1, #2
10009f10:	0018      	movs	r0, r3
10009f12:	4b04      	ldr	r3, [pc, #16]	; (10009f24 <dmp_set_shake_reject_time+0x58>)
10009f14:	4798      	blx	r3
10009f16:	0003      	movs	r3, r0
}
10009f18:	0018      	movs	r0, r3
10009f1a:	46bd      	mov	sp, r7
10009f1c:	b005      	add	sp, #20
10009f1e:	bd90      	pop	{r4, r7, pc}
10009f20:	100170a5 	.word	0x100170a5
10009f24:	100095d5 	.word	0x100095d5

10009f28 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009f28:	b590      	push	{r4, r7, lr}
10009f2a:	b085      	sub	sp, #20
10009f2c:	af00      	add	r7, sp, #0
10009f2e:	0002      	movs	r2, r0
10009f30:	1dbb      	adds	r3, r7, #6
10009f32:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009f34:	1dbc      	adds	r4, r7, #6
10009f36:	1dbb      	adds	r3, r7, #6
10009f38:	881a      	ldrh	r2, [r3, #0]
10009f3a:	4b10      	ldr	r3, [pc, #64]	; (10009f7c <dmp_set_shake_reject_timeout+0x54>)
10009f3c:	2105      	movs	r1, #5
10009f3e:	0010      	movs	r0, r2
10009f40:	4798      	blx	r3
10009f42:	0003      	movs	r3, r0
10009f44:	8023      	strh	r3, [r4, #0]
    tmp[0] = time >> 8;
10009f46:	1dbb      	adds	r3, r7, #6
10009f48:	881b      	ldrh	r3, [r3, #0]
10009f4a:	0a1b      	lsrs	r3, r3, #8
10009f4c:	b29b      	uxth	r3, r3
10009f4e:	b2da      	uxtb	r2, r3
10009f50:	230c      	movs	r3, #12
10009f52:	18fb      	adds	r3, r7, r3
10009f54:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009f56:	1dbb      	adds	r3, r7, #6
10009f58:	881b      	ldrh	r3, [r3, #0]
10009f5a:	b2da      	uxtb	r2, r3
10009f5c:	230c      	movs	r3, #12
10009f5e:	18fb      	adds	r3, r7, r3
10009f60:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009f62:	230c      	movs	r3, #12
10009f64:	18fa      	adds	r2, r7, r3
10009f66:	23ac      	movs	r3, #172	; 0xac
10009f68:	005b      	lsls	r3, r3, #1
10009f6a:	2102      	movs	r1, #2
10009f6c:	0018      	movs	r0, r3
10009f6e:	4b04      	ldr	r3, [pc, #16]	; (10009f80 <dmp_set_shake_reject_timeout+0x58>)
10009f70:	4798      	blx	r3
10009f72:	0003      	movs	r3, r0
}
10009f74:	0018      	movs	r0, r3
10009f76:	46bd      	mov	sp, r7
10009f78:	b005      	add	sp, #20
10009f7a:	bd90      	pop	{r4, r7, pc}
10009f7c:	100170a5 	.word	0x100170a5
10009f80:	100095d5 	.word	0x100095d5

10009f84 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009f84:	b580      	push	{r7, lr}
10009f86:	b086      	sub	sp, #24
10009f88:	af00      	add	r7, sp, #0
10009f8a:	0002      	movs	r2, r0
10009f8c:	1dbb      	adds	r3, r7, #6
10009f8e:	801a      	strh	r2, [r3, #0]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009f90:	230c      	movs	r3, #12
10009f92:	18fb      	adds	r3, r7, r3
10009f94:	2202      	movs	r2, #2
10009f96:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009f98:	230c      	movs	r3, #12
10009f9a:	18fb      	adds	r3, r7, r3
10009f9c:	22ca      	movs	r2, #202	; 0xca
10009f9e:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009fa0:	230c      	movs	r3, #12
10009fa2:	18fb      	adds	r3, r7, r3
10009fa4:	22e3      	movs	r2, #227	; 0xe3
10009fa6:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009fa8:	230c      	movs	r3, #12
10009faa:	18fb      	adds	r3, r7, r3
10009fac:	2209      	movs	r2, #9
10009fae:	70da      	strb	r2, [r3, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009fb0:	230c      	movs	r3, #12
10009fb2:	18fb      	adds	r3, r7, r3
10009fb4:	001a      	movs	r2, r3
10009fb6:	2104      	movs	r1, #4
10009fb8:	2068      	movs	r0, #104	; 0x68
10009fba:	4ba8      	ldr	r3, [pc, #672]	; (1000a25c <dmp_enable_feature+0x2d8>)
10009fbc:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009fbe:	230c      	movs	r3, #12
10009fc0:	18fb      	adds	r3, r7, r3
10009fc2:	22a3      	movs	r2, #163	; 0xa3
10009fc4:	701a      	strb	r2, [r3, #0]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009fc6:	1dbb      	adds	r3, r7, #6
10009fc8:	881b      	ldrh	r3, [r3, #0]
10009fca:	2240      	movs	r2, #64	; 0x40
10009fcc:	4013      	ands	r3, r2
10009fce:	d00c      	beq.n	10009fea <dmp_enable_feature+0x66>
        tmp[1] = 0xC0;
10009fd0:	230c      	movs	r3, #12
10009fd2:	18fb      	adds	r3, r7, r3
10009fd4:	22c0      	movs	r2, #192	; 0xc0
10009fd6:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009fd8:	230c      	movs	r3, #12
10009fda:	18fb      	adds	r3, r7, r3
10009fdc:	22c8      	movs	r2, #200	; 0xc8
10009fde:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009fe0:	230c      	movs	r3, #12
10009fe2:	18fb      	adds	r3, r7, r3
10009fe4:	22c2      	movs	r2, #194	; 0xc2
10009fe6:	70da      	strb	r2, [r3, #3]
10009fe8:	e00b      	b.n	1000a002 <dmp_enable_feature+0x7e>
    } else {
        tmp[1] = 0xA3;
10009fea:	230c      	movs	r3, #12
10009fec:	18fb      	adds	r3, r7, r3
10009fee:	22a3      	movs	r2, #163	; 0xa3
10009ff0:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009ff2:	230c      	movs	r3, #12
10009ff4:	18fb      	adds	r3, r7, r3
10009ff6:	22a3      	movs	r2, #163	; 0xa3
10009ff8:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009ffa:	230c      	movs	r3, #12
10009ffc:	18fb      	adds	r3, r7, r3
10009ffe:	22a3      	movs	r2, #163	; 0xa3
1000a000:	70da      	strb	r2, [r3, #3]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000a002:	1dbb      	adds	r3, r7, #6
1000a004:	881a      	ldrh	r2, [r3, #0]
1000a006:	23c0      	movs	r3, #192	; 0xc0
1000a008:	005b      	lsls	r3, r3, #1
1000a00a:	4013      	ands	r3, r2
1000a00c:	d00c      	beq.n	1000a028 <dmp_enable_feature+0xa4>
        tmp[4] = 0xC4;
1000a00e:	230c      	movs	r3, #12
1000a010:	18fb      	adds	r3, r7, r3
1000a012:	22c4      	movs	r2, #196	; 0xc4
1000a014:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
1000a016:	230c      	movs	r3, #12
1000a018:	18fb      	adds	r3, r7, r3
1000a01a:	22cc      	movs	r2, #204	; 0xcc
1000a01c:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
1000a01e:	230c      	movs	r3, #12
1000a020:	18fb      	adds	r3, r7, r3
1000a022:	22c6      	movs	r2, #198	; 0xc6
1000a024:	719a      	strb	r2, [r3, #6]
1000a026:	e00b      	b.n	1000a040 <dmp_enable_feature+0xbc>
    } else {
        tmp[4] = 0xA3;
1000a028:	230c      	movs	r3, #12
1000a02a:	18fb      	adds	r3, r7, r3
1000a02c:	22a3      	movs	r2, #163	; 0xa3
1000a02e:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
1000a030:	230c      	movs	r3, #12
1000a032:	18fb      	adds	r3, r7, r3
1000a034:	22a3      	movs	r2, #163	; 0xa3
1000a036:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
1000a038:	230c      	movs	r3, #12
1000a03a:	18fb      	adds	r3, r7, r3
1000a03c:	22a3      	movs	r2, #163	; 0xa3
1000a03e:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
1000a040:	230c      	movs	r3, #12
1000a042:	18fb      	adds	r3, r7, r3
1000a044:	22a3      	movs	r2, #163	; 0xa3
1000a046:	71da      	strb	r2, [r3, #7]
    tmp[8] = 0xA3;
1000a048:	230c      	movs	r3, #12
1000a04a:	18fb      	adds	r3, r7, r3
1000a04c:	22a3      	movs	r2, #163	; 0xa3
1000a04e:	721a      	strb	r2, [r3, #8]
    tmp[9] = 0xA3;
1000a050:	230c      	movs	r3, #12
1000a052:	18fb      	adds	r3, r7, r3
1000a054:	22a3      	movs	r2, #163	; 0xa3
1000a056:	725a      	strb	r2, [r3, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000a058:	230c      	movs	r3, #12
1000a05a:	18fb      	adds	r3, r7, r3
1000a05c:	4880      	ldr	r0, [pc, #512]	; (1000a260 <dmp_enable_feature+0x2dc>)
1000a05e:	001a      	movs	r2, r3
1000a060:	210a      	movs	r1, #10
1000a062:	4b7e      	ldr	r3, [pc, #504]	; (1000a25c <dmp_enable_feature+0x2d8>)
1000a064:	4798      	blx	r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000a066:	1dbb      	adds	r3, r7, #6
1000a068:	881b      	ldrh	r3, [r3, #0]
1000a06a:	2203      	movs	r2, #3
1000a06c:	4013      	ands	r3, r2
1000a06e:	d004      	beq.n	1000a07a <dmp_enable_feature+0xf6>
        tmp[0] = DINA20;
1000a070:	230c      	movs	r3, #12
1000a072:	18fb      	adds	r3, r7, r3
1000a074:	2220      	movs	r2, #32
1000a076:	701a      	strb	r2, [r3, #0]
1000a078:	e003      	b.n	1000a082 <dmp_enable_feature+0xfe>
    else
        tmp[0] = 0xD8;
1000a07a:	230c      	movs	r3, #12
1000a07c:	18fb      	adds	r3, r7, r3
1000a07e:	22d8      	movs	r2, #216	; 0xd8
1000a080:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
1000a082:	230c      	movs	r3, #12
1000a084:	18fb      	adds	r3, r7, r3
1000a086:	4877      	ldr	r0, [pc, #476]	; (1000a264 <dmp_enable_feature+0x2e0>)
1000a088:	001a      	movs	r2, r3
1000a08a:	2101      	movs	r1, #1
1000a08c:	4b73      	ldr	r3, [pc, #460]	; (1000a25c <dmp_enable_feature+0x2d8>)
1000a08e:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
1000a090:	1dbb      	adds	r3, r7, #6
1000a092:	881b      	ldrh	r3, [r3, #0]
1000a094:	2220      	movs	r2, #32
1000a096:	4013      	ands	r3, r2
1000a098:	d003      	beq.n	1000a0a2 <dmp_enable_feature+0x11e>
        dmp_enable_gyro_cal(1);
1000a09a:	2001      	movs	r0, #1
1000a09c:	4b72      	ldr	r3, [pc, #456]	; (1000a268 <dmp_enable_feature+0x2e4>)
1000a09e:	4798      	blx	r3
1000a0a0:	e002      	b.n	1000a0a8 <dmp_enable_feature+0x124>
    else
        dmp_enable_gyro_cal(0);
1000a0a2:	2000      	movs	r0, #0
1000a0a4:	4b70      	ldr	r3, [pc, #448]	; (1000a268 <dmp_enable_feature+0x2e4>)
1000a0a6:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000a0a8:	1dbb      	adds	r3, r7, #6
1000a0aa:	881a      	ldrh	r2, [r3, #0]
1000a0ac:	23c0      	movs	r3, #192	; 0xc0
1000a0ae:	005b      	lsls	r3, r3, #1
1000a0b0:	4013      	ands	r3, r2
1000a0b2:	d02d      	beq.n	1000a110 <dmp_enable_feature+0x18c>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
1000a0b4:	1dbb      	adds	r3, r7, #6
1000a0b6:	881a      	ldrh	r2, [r3, #0]
1000a0b8:	2380      	movs	r3, #128	; 0x80
1000a0ba:	005b      	lsls	r3, r3, #1
1000a0bc:	4013      	ands	r3, r2
1000a0be:	d010      	beq.n	1000a0e2 <dmp_enable_feature+0x15e>
            tmp[0] = 0xB2;
1000a0c0:	230c      	movs	r3, #12
1000a0c2:	18fb      	adds	r3, r7, r3
1000a0c4:	22b2      	movs	r2, #178	; 0xb2
1000a0c6:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
1000a0c8:	230c      	movs	r3, #12
1000a0ca:	18fb      	adds	r3, r7, r3
1000a0cc:	228b      	movs	r2, #139	; 0x8b
1000a0ce:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
1000a0d0:	230c      	movs	r3, #12
1000a0d2:	18fb      	adds	r3, r7, r3
1000a0d4:	22b6      	movs	r2, #182	; 0xb6
1000a0d6:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
1000a0d8:	230c      	movs	r3, #12
1000a0da:	18fb      	adds	r3, r7, r3
1000a0dc:	229b      	movs	r2, #155	; 0x9b
1000a0de:	70da      	strb	r2, [r3, #3]
1000a0e0:	e00f      	b.n	1000a102 <dmp_enable_feature+0x17e>
        } else {
            tmp[0] = DINAC0;
1000a0e2:	230c      	movs	r3, #12
1000a0e4:	18fb      	adds	r3, r7, r3
1000a0e6:	22b0      	movs	r2, #176	; 0xb0
1000a0e8:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
1000a0ea:	230c      	movs	r3, #12
1000a0ec:	18fb      	adds	r3, r7, r3
1000a0ee:	2280      	movs	r2, #128	; 0x80
1000a0f0:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
1000a0f2:	230c      	movs	r3, #12
1000a0f4:	18fb      	adds	r3, r7, r3
1000a0f6:	22b4      	movs	r2, #180	; 0xb4
1000a0f8:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
1000a0fa:	230c      	movs	r3, #12
1000a0fc:	18fb      	adds	r3, r7, r3
1000a0fe:	2290      	movs	r2, #144	; 0x90
1000a100:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
1000a102:	230c      	movs	r3, #12
1000a104:	18fb      	adds	r3, r7, r3
1000a106:	4859      	ldr	r0, [pc, #356]	; (1000a26c <dmp_enable_feature+0x2e8>)
1000a108:	001a      	movs	r2, r3
1000a10a:	2104      	movs	r1, #4
1000a10c:	4b53      	ldr	r3, [pc, #332]	; (1000a25c <dmp_enable_feature+0x2d8>)
1000a10e:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
1000a110:	1dbb      	adds	r3, r7, #6
1000a112:	881b      	ldrh	r3, [r3, #0]
1000a114:	2201      	movs	r2, #1
1000a116:	4013      	ands	r3, r2
1000a118:	d029      	beq.n	1000a16e <dmp_enable_feature+0x1ea>
        /* Enable tap. */
        tmp[0] = 0xF8;
1000a11a:	230c      	movs	r3, #12
1000a11c:	18fb      	adds	r3, r7, r3
1000a11e:	22f8      	movs	r2, #248	; 0xf8
1000a120:	701a      	strb	r2, [r3, #0]
        mpu_write_mem(CFG_20, 1, tmp);
1000a122:	230c      	movs	r3, #12
1000a124:	18fa      	adds	r2, r7, r3
1000a126:	238b      	movs	r3, #139	; 0x8b
1000a128:	011b      	lsls	r3, r3, #4
1000a12a:	2101      	movs	r1, #1
1000a12c:	0018      	movs	r0, r3
1000a12e:	4b4b      	ldr	r3, [pc, #300]	; (1000a25c <dmp_enable_feature+0x2d8>)
1000a130:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
1000a132:	21fa      	movs	r1, #250	; 0xfa
1000a134:	2007      	movs	r0, #7
1000a136:	4b4e      	ldr	r3, [pc, #312]	; (1000a270 <dmp_enable_feature+0x2ec>)
1000a138:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
1000a13a:	2007      	movs	r0, #7
1000a13c:	4b4d      	ldr	r3, [pc, #308]	; (1000a274 <dmp_enable_feature+0x2f0>)
1000a13e:	4798      	blx	r3
        dmp_set_tap_count(1);
1000a140:	2001      	movs	r0, #1
1000a142:	4b4d      	ldr	r3, [pc, #308]	; (1000a278 <dmp_enable_feature+0x2f4>)
1000a144:	4798      	blx	r3
        dmp_set_tap_time(100);
1000a146:	2064      	movs	r0, #100	; 0x64
1000a148:	4b4c      	ldr	r3, [pc, #304]	; (1000a27c <dmp_enable_feature+0x2f8>)
1000a14a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
1000a14c:	23fa      	movs	r3, #250	; 0xfa
1000a14e:	005b      	lsls	r3, r3, #1
1000a150:	0018      	movs	r0, r3
1000a152:	4b4b      	ldr	r3, [pc, #300]	; (1000a280 <dmp_enable_feature+0x2fc>)
1000a154:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
1000a156:	4b4b      	ldr	r3, [pc, #300]	; (1000a284 <dmp_enable_feature+0x300>)
1000a158:	21c8      	movs	r1, #200	; 0xc8
1000a15a:	0018      	movs	r0, r3
1000a15c:	4b4a      	ldr	r3, [pc, #296]	; (1000a288 <dmp_enable_feature+0x304>)
1000a15e:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
1000a160:	2028      	movs	r0, #40	; 0x28
1000a162:	4b4a      	ldr	r3, [pc, #296]	; (1000a28c <dmp_enable_feature+0x308>)
1000a164:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
1000a166:	200a      	movs	r0, #10
1000a168:	4b49      	ldr	r3, [pc, #292]	; (1000a290 <dmp_enable_feature+0x30c>)
1000a16a:	4798      	blx	r3
1000a16c:	e00b      	b.n	1000a186 <dmp_enable_feature+0x202>
    } else {
        tmp[0] = 0xD8;
1000a16e:	230c      	movs	r3, #12
1000a170:	18fb      	adds	r3, r7, r3
1000a172:	22d8      	movs	r2, #216	; 0xd8
1000a174:	701a      	strb	r2, [r3, #0]
        mpu_write_mem(CFG_20, 1, tmp);
1000a176:	230c      	movs	r3, #12
1000a178:	18fa      	adds	r2, r7, r3
1000a17a:	238b      	movs	r3, #139	; 0x8b
1000a17c:	011b      	lsls	r3, r3, #4
1000a17e:	2101      	movs	r1, #1
1000a180:	0018      	movs	r0, r3
1000a182:	4b36      	ldr	r3, [pc, #216]	; (1000a25c <dmp_enable_feature+0x2d8>)
1000a184:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
1000a186:	1dbb      	adds	r3, r7, #6
1000a188:	881b      	ldrh	r3, [r3, #0]
1000a18a:	2202      	movs	r2, #2
1000a18c:	4013      	ands	r3, r2
1000a18e:	d004      	beq.n	1000a19a <dmp_enable_feature+0x216>
        tmp[0] = 0xD9;
1000a190:	230c      	movs	r3, #12
1000a192:	18fb      	adds	r3, r7, r3
1000a194:	22d9      	movs	r2, #217	; 0xd9
1000a196:	701a      	strb	r2, [r3, #0]
1000a198:	e003      	b.n	1000a1a2 <dmp_enable_feature+0x21e>
    } else
        tmp[0] = 0xD8;
1000a19a:	230c      	movs	r3, #12
1000a19c:	18fb      	adds	r3, r7, r3
1000a19e:	22d8      	movs	r2, #216	; 0xd8
1000a1a0:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1000a1a2:	230c      	movs	r3, #12
1000a1a4:	18fb      	adds	r3, r7, r3
1000a1a6:	483b      	ldr	r0, [pc, #236]	; (1000a294 <dmp_enable_feature+0x310>)
1000a1a8:	001a      	movs	r2, r3
1000a1aa:	2101      	movs	r1, #1
1000a1ac:	4b2b      	ldr	r3, [pc, #172]	; (1000a25c <dmp_enable_feature+0x2d8>)
1000a1ae:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
1000a1b0:	1dbb      	adds	r3, r7, #6
1000a1b2:	881b      	ldrh	r3, [r3, #0]
1000a1b4:	2204      	movs	r2, #4
1000a1b6:	4013      	ands	r3, r2
1000a1b8:	d003      	beq.n	1000a1c2 <dmp_enable_feature+0x23e>
        dmp_enable_lp_quat(1);
1000a1ba:	2001      	movs	r0, #1
1000a1bc:	4b36      	ldr	r3, [pc, #216]	; (1000a298 <dmp_enable_feature+0x314>)
1000a1be:	4798      	blx	r3
1000a1c0:	e002      	b.n	1000a1c8 <dmp_enable_feature+0x244>
    else
        dmp_enable_lp_quat(0);
1000a1c2:	2000      	movs	r0, #0
1000a1c4:	4b34      	ldr	r3, [pc, #208]	; (1000a298 <dmp_enable_feature+0x314>)
1000a1c6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1000a1c8:	1dbb      	adds	r3, r7, #6
1000a1ca:	881b      	ldrh	r3, [r3, #0]
1000a1cc:	2210      	movs	r2, #16
1000a1ce:	4013      	ands	r3, r2
1000a1d0:	d003      	beq.n	1000a1da <dmp_enable_feature+0x256>
        dmp_enable_6x_lp_quat(1);
1000a1d2:	2001      	movs	r0, #1
1000a1d4:	4b31      	ldr	r3, [pc, #196]	; (1000a29c <dmp_enable_feature+0x318>)
1000a1d6:	4798      	blx	r3
1000a1d8:	e002      	b.n	1000a1e0 <dmp_enable_feature+0x25c>
    else
        dmp_enable_6x_lp_quat(0);
1000a1da:	2000      	movs	r0, #0
1000a1dc:	4b2f      	ldr	r3, [pc, #188]	; (1000a29c <dmp_enable_feature+0x318>)
1000a1de:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
1000a1e0:	1dbb      	adds	r3, r7, #6
1000a1e2:	881b      	ldrh	r3, [r3, #0]
1000a1e4:	2208      	movs	r2, #8
1000a1e6:	4313      	orrs	r3, r2
1000a1e8:	b29a      	uxth	r2, r3
1000a1ea:	4b2d      	ldr	r3, [pc, #180]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a1ec:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
1000a1ee:	4b2d      	ldr	r3, [pc, #180]	; (1000a2a4 <dmp_enable_feature+0x320>)
1000a1f0:	4798      	blx	r3

    dmp.packet_length = 0;
1000a1f2:	4b2b      	ldr	r3, [pc, #172]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a1f4:	2200      	movs	r2, #0
1000a1f6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
1000a1f8:	1dbb      	adds	r3, r7, #6
1000a1fa:	881b      	ldrh	r3, [r3, #0]
1000a1fc:	2240      	movs	r2, #64	; 0x40
1000a1fe:	4013      	ands	r3, r2
1000a200:	d005      	beq.n	1000a20e <dmp_enable_feature+0x28a>
        dmp.packet_length += 6;
1000a202:	4b27      	ldr	r3, [pc, #156]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a204:	7b9b      	ldrb	r3, [r3, #14]
1000a206:	3306      	adds	r3, #6
1000a208:	b2da      	uxtb	r2, r3
1000a20a:	4b25      	ldr	r3, [pc, #148]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a20c:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1000a20e:	1dbb      	adds	r3, r7, #6
1000a210:	881a      	ldrh	r2, [r3, #0]
1000a212:	23c0      	movs	r3, #192	; 0xc0
1000a214:	005b      	lsls	r3, r3, #1
1000a216:	4013      	ands	r3, r2
1000a218:	d005      	beq.n	1000a226 <dmp_enable_feature+0x2a2>
        dmp.packet_length += 6;
1000a21a:	4b21      	ldr	r3, [pc, #132]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a21c:	7b9b      	ldrb	r3, [r3, #14]
1000a21e:	3306      	adds	r3, #6
1000a220:	b2da      	uxtb	r2, r3
1000a222:	4b1f      	ldr	r3, [pc, #124]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a224:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1000a226:	1dbb      	adds	r3, r7, #6
1000a228:	881b      	ldrh	r3, [r3, #0]
1000a22a:	2214      	movs	r2, #20
1000a22c:	4013      	ands	r3, r2
1000a22e:	d005      	beq.n	1000a23c <dmp_enable_feature+0x2b8>
        dmp.packet_length += 16;
1000a230:	4b1b      	ldr	r3, [pc, #108]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a232:	7b9b      	ldrb	r3, [r3, #14]
1000a234:	3310      	adds	r3, #16
1000a236:	b2da      	uxtb	r2, r3
1000a238:	4b19      	ldr	r3, [pc, #100]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a23a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000a23c:	1dbb      	adds	r3, r7, #6
1000a23e:	881b      	ldrh	r3, [r3, #0]
1000a240:	2203      	movs	r2, #3
1000a242:	4013      	ands	r3, r2
1000a244:	d005      	beq.n	1000a252 <dmp_enable_feature+0x2ce>
        dmp.packet_length += 4;
1000a246:	4b16      	ldr	r3, [pc, #88]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a248:	7b9b      	ldrb	r3, [r3, #14]
1000a24a:	3304      	adds	r3, #4
1000a24c:	b2da      	uxtb	r2, r3
1000a24e:	4b14      	ldr	r3, [pc, #80]	; (1000a2a0 <dmp_enable_feature+0x31c>)
1000a250:	739a      	strb	r2, [r3, #14]

    return 0;
1000a252:	2300      	movs	r3, #0
}
1000a254:	0018      	movs	r0, r3
1000a256:	46bd      	mov	sp, r7
1000a258:	b006      	add	sp, #24
1000a25a:	bd80      	pop	{r7, pc}
1000a25c:	100095d5 	.word	0x100095d5
1000a260:	00000aa7 	.word	0x00000aa7
1000a264:	00000ab6 	.word	0x00000ab6
1000a268:	1000a2a9 	.word	0x1000a2a9
1000a26c:	00000aa2 	.word	0x00000aa2
1000a270:	10009a29 	.word	0x10009a29
1000a274:	10009cb1 	.word	0x10009cb1
1000a278:	10009d39 	.word	0x10009d39
1000a27c:	10009d91 	.word	0x10009d91
1000a280:	10009df5 	.word	0x10009df5
1000a284:	02cae309 	.word	0x02cae309
1000a288:	10009e59 	.word	0x10009e59
1000a28c:	10009ecd 	.word	0x10009ecd
1000a290:	10009f29 	.word	0x10009f29
1000a294:	0000073d 	.word	0x0000073d
1000a298:	1000a321 	.word	0x1000a321
1000a29c:	1000a391 	.word	0x1000a391
1000a2a0:	1001b914 	.word	0x1001b914
1000a2a4:	100087d9 	.word	0x100087d9

1000a2a8 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
1000a2a8:	b580      	push	{r7, lr}
1000a2aa:	b088      	sub	sp, #32
1000a2ac:	af00      	add	r7, sp, #0
1000a2ae:	0002      	movs	r2, r0
1000a2b0:	1dfb      	adds	r3, r7, #7
1000a2b2:	701a      	strb	r2, [r3, #0]
    if (enable) {
1000a2b4:	1dfb      	adds	r3, r7, #7
1000a2b6:	781b      	ldrb	r3, [r3, #0]
1000a2b8:	2b00      	cmp	r3, #0
1000a2ba:	d012      	beq.n	1000a2e2 <dmp_enable_gyro_cal+0x3a>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000a2bc:	2314      	movs	r3, #20
1000a2be:	18fa      	adds	r2, r7, r3
1000a2c0:	4b13      	ldr	r3, [pc, #76]	; (1000a310 <dmp_enable_gyro_cal+0x68>)
1000a2c2:	0010      	movs	r0, r2
1000a2c4:	0019      	movs	r1, r3
1000a2c6:	2309      	movs	r3, #9
1000a2c8:	001a      	movs	r2, r3
1000a2ca:	4b12      	ldr	r3, [pc, #72]	; (1000a314 <dmp_enable_gyro_cal+0x6c>)
1000a2cc:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000a2ce:	2314      	movs	r3, #20
1000a2d0:	18fa      	adds	r2, r7, r3
1000a2d2:	2397      	movs	r3, #151	; 0x97
1000a2d4:	00db      	lsls	r3, r3, #3
1000a2d6:	2109      	movs	r1, #9
1000a2d8:	0018      	movs	r0, r3
1000a2da:	4b0f      	ldr	r3, [pc, #60]	; (1000a318 <dmp_enable_gyro_cal+0x70>)
1000a2dc:	4798      	blx	r3
1000a2de:	0003      	movs	r3, r0
1000a2e0:	e011      	b.n	1000a306 <dmp_enable_gyro_cal+0x5e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1000a2e2:	2308      	movs	r3, #8
1000a2e4:	18fa      	adds	r2, r7, r3
1000a2e6:	4b0d      	ldr	r3, [pc, #52]	; (1000a31c <dmp_enable_gyro_cal+0x74>)
1000a2e8:	0010      	movs	r0, r2
1000a2ea:	0019      	movs	r1, r3
1000a2ec:	2309      	movs	r3, #9
1000a2ee:	001a      	movs	r2, r3
1000a2f0:	4b08      	ldr	r3, [pc, #32]	; (1000a314 <dmp_enable_gyro_cal+0x6c>)
1000a2f2:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000a2f4:	2308      	movs	r3, #8
1000a2f6:	18fa      	adds	r2, r7, r3
1000a2f8:	2397      	movs	r3, #151	; 0x97
1000a2fa:	00db      	lsls	r3, r3, #3
1000a2fc:	2109      	movs	r1, #9
1000a2fe:	0018      	movs	r0, r3
1000a300:	4b05      	ldr	r3, [pc, #20]	; (1000a318 <dmp_enable_gyro_cal+0x70>)
1000a302:	4798      	blx	r3
1000a304:	0003      	movs	r3, r0
    }
}
1000a306:	0018      	movs	r0, r3
1000a308:	46bd      	mov	sp, r7
1000a30a:	b008      	add	sp, #32
1000a30c:	bd80      	pop	{r7, pc}
1000a30e:	46c0      	nop			; (mov r8, r8)
1000a310:	1001a50c 	.word	0x1001a50c
1000a314:	10018e1b 	.word	0x10018e1b
1000a318:	100095d5 	.word	0x100095d5
1000a31c:	1001a518 	.word	0x1001a518

1000a320 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000a320:	b580      	push	{r7, lr}
1000a322:	b084      	sub	sp, #16
1000a324:	af00      	add	r7, sp, #0
1000a326:	0002      	movs	r2, r0
1000a328:	1dfb      	adds	r3, r7, #7
1000a32a:	701a      	strb	r2, [r3, #0]
    unsigned char regs[4];
    if (enable) {
1000a32c:	1dfb      	adds	r3, r7, #7
1000a32e:	781b      	ldrb	r3, [r3, #0]
1000a330:	2b00      	cmp	r3, #0
1000a332:	d010      	beq.n	1000a356 <dmp_enable_lp_quat+0x36>
        regs[0] = DINBC0;
1000a334:	230c      	movs	r3, #12
1000a336:	18fb      	adds	r3, r7, r3
1000a338:	22c0      	movs	r2, #192	; 0xc0
1000a33a:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
1000a33c:	230c      	movs	r3, #12
1000a33e:	18fb      	adds	r3, r7, r3
1000a340:	22c2      	movs	r2, #194	; 0xc2
1000a342:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
1000a344:	230c      	movs	r3, #12
1000a346:	18fb      	adds	r3, r7, r3
1000a348:	22c4      	movs	r2, #196	; 0xc4
1000a34a:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
1000a34c:	230c      	movs	r3, #12
1000a34e:	18fb      	adds	r3, r7, r3
1000a350:	22c6      	movs	r2, #198	; 0xc6
1000a352:	70da      	strb	r2, [r3, #3]
1000a354:	e006      	b.n	1000a364 <dmp_enable_lp_quat+0x44>
    }
    else
        memset(regs, 0x8B, 4);
1000a356:	230c      	movs	r3, #12
1000a358:	18fb      	adds	r3, r7, r3
1000a35a:	2204      	movs	r2, #4
1000a35c:	218b      	movs	r1, #139	; 0x8b
1000a35e:	0018      	movs	r0, r3
1000a360:	4b07      	ldr	r3, [pc, #28]	; (1000a380 <dmp_enable_lp_quat+0x60>)
1000a362:	4798      	blx	r3

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1000a364:	230c      	movs	r3, #12
1000a366:	18fb      	adds	r3, r7, r3
1000a368:	4806      	ldr	r0, [pc, #24]	; (1000a384 <dmp_enable_lp_quat+0x64>)
1000a36a:	001a      	movs	r2, r3
1000a36c:	2104      	movs	r1, #4
1000a36e:	4b06      	ldr	r3, [pc, #24]	; (1000a388 <dmp_enable_lp_quat+0x68>)
1000a370:	4798      	blx	r3

    return mpu_reset_fifo();
1000a372:	4b06      	ldr	r3, [pc, #24]	; (1000a38c <dmp_enable_lp_quat+0x6c>)
1000a374:	4798      	blx	r3
1000a376:	0003      	movs	r3, r0
}
1000a378:	0018      	movs	r0, r3
1000a37a:	46bd      	mov	sp, r7
1000a37c:	b004      	add	sp, #16
1000a37e:	bd80      	pop	{r7, pc}
1000a380:	10018e2d 	.word	0x10018e2d
1000a384:	00000a98 	.word	0x00000a98
1000a388:	100095d5 	.word	0x100095d5
1000a38c:	100087d9 	.word	0x100087d9

1000a390 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
1000a390:	b580      	push	{r7, lr}
1000a392:	b084      	sub	sp, #16
1000a394:	af00      	add	r7, sp, #0
1000a396:	0002      	movs	r2, r0
1000a398:	1dfb      	adds	r3, r7, #7
1000a39a:	701a      	strb	r2, [r3, #0]
    unsigned char regs[4];
    if (enable) {
1000a39c:	1dfb      	adds	r3, r7, #7
1000a39e:	781b      	ldrb	r3, [r3, #0]
1000a3a0:	2b00      	cmp	r3, #0
1000a3a2:	d010      	beq.n	1000a3c6 <dmp_enable_6x_lp_quat+0x36>
        regs[0] = DINA20;
1000a3a4:	230c      	movs	r3, #12
1000a3a6:	18fb      	adds	r3, r7, r3
1000a3a8:	2220      	movs	r2, #32
1000a3aa:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
1000a3ac:	230c      	movs	r3, #12
1000a3ae:	18fb      	adds	r3, r7, r3
1000a3b0:	2228      	movs	r2, #40	; 0x28
1000a3b2:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
1000a3b4:	230c      	movs	r3, #12
1000a3b6:	18fb      	adds	r3, r7, r3
1000a3b8:	2230      	movs	r2, #48	; 0x30
1000a3ba:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
1000a3bc:	230c      	movs	r3, #12
1000a3be:	18fb      	adds	r3, r7, r3
1000a3c0:	2238      	movs	r2, #56	; 0x38
1000a3c2:	70da      	strb	r2, [r3, #3]
1000a3c4:	e006      	b.n	1000a3d4 <dmp_enable_6x_lp_quat+0x44>
    } else
        memset(regs, 0xA3, 4);
1000a3c6:	230c      	movs	r3, #12
1000a3c8:	18fb      	adds	r3, r7, r3
1000a3ca:	2204      	movs	r2, #4
1000a3cc:	21a3      	movs	r1, #163	; 0xa3
1000a3ce:	0018      	movs	r0, r3
1000a3d0:	4b07      	ldr	r3, [pc, #28]	; (1000a3f0 <dmp_enable_6x_lp_quat+0x60>)
1000a3d2:	4798      	blx	r3

    mpu_write_mem(CFG_8, 4, regs);
1000a3d4:	230c      	movs	r3, #12
1000a3d6:	18fb      	adds	r3, r7, r3
1000a3d8:	4806      	ldr	r0, [pc, #24]	; (1000a3f4 <dmp_enable_6x_lp_quat+0x64>)
1000a3da:	001a      	movs	r2, r3
1000a3dc:	2104      	movs	r1, #4
1000a3de:	4b06      	ldr	r3, [pc, #24]	; (1000a3f8 <dmp_enable_6x_lp_quat+0x68>)
1000a3e0:	4798      	blx	r3

    return mpu_reset_fifo();
1000a3e2:	4b06      	ldr	r3, [pc, #24]	; (1000a3fc <dmp_enable_6x_lp_quat+0x6c>)
1000a3e4:	4798      	blx	r3
1000a3e6:	0003      	movs	r3, r0
}
1000a3e8:	0018      	movs	r0, r3
1000a3ea:	46bd      	mov	sp, r7
1000a3ec:	b004      	add	sp, #16
1000a3ee:	bd80      	pop	{r7, pc}
1000a3f0:	10018e2d 	.word	0x10018e2d
1000a3f4:	00000a9e 	.word	0x00000a9e
1000a3f8:	100095d5 	.word	0x100095d5
1000a3fc:	100087d9 	.word	0x100087d9

1000a400 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
1000a400:	b580      	push	{r7, lr}
1000a402:	b084      	sub	sp, #16
1000a404:	af00      	add	r7, sp, #0
1000a406:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
1000a408:	687b      	ldr	r3, [r7, #4]
1000a40a:	3303      	adds	r3, #3
1000a40c:	781a      	ldrb	r2, [r3, #0]
1000a40e:	230f      	movs	r3, #15
1000a410:	18fb      	adds	r3, r7, r3
1000a412:	213f      	movs	r1, #63	; 0x3f
1000a414:	438a      	bics	r2, r1
1000a416:	701a      	strb	r2, [r3, #0]
    tap = 0x3F & gesture[3];
1000a418:	687b      	ldr	r3, [r7, #4]
1000a41a:	3303      	adds	r3, #3
1000a41c:	781a      	ldrb	r2, [r3, #0]
1000a41e:	230e      	movs	r3, #14
1000a420:	18fb      	adds	r3, r7, r3
1000a422:	213f      	movs	r1, #63	; 0x3f
1000a424:	400a      	ands	r2, r1
1000a426:	701a      	strb	r2, [r3, #0]

    if (gesture[1] & INT_SRC_TAP) {
1000a428:	687b      	ldr	r3, [r7, #4]
1000a42a:	3301      	adds	r3, #1
1000a42c:	781b      	ldrb	r3, [r3, #0]
1000a42e:	001a      	movs	r2, r3
1000a430:	2301      	movs	r3, #1
1000a432:	4013      	ands	r3, r2
1000a434:	d01e      	beq.n	1000a474 <decode_gesture+0x74>
        unsigned char direction, count;
        direction = tap >> 3;
1000a436:	230d      	movs	r3, #13
1000a438:	18fb      	adds	r3, r7, r3
1000a43a:	220e      	movs	r2, #14
1000a43c:	18ba      	adds	r2, r7, r2
1000a43e:	7812      	ldrb	r2, [r2, #0]
1000a440:	08d2      	lsrs	r2, r2, #3
1000a442:	701a      	strb	r2, [r3, #0]
        count = (tap % 8) + 1;
1000a444:	230e      	movs	r3, #14
1000a446:	18fb      	adds	r3, r7, r3
1000a448:	781b      	ldrb	r3, [r3, #0]
1000a44a:	2207      	movs	r2, #7
1000a44c:	4013      	ands	r3, r2
1000a44e:	b2da      	uxtb	r2, r3
1000a450:	230c      	movs	r3, #12
1000a452:	18fb      	adds	r3, r7, r3
1000a454:	3201      	adds	r2, #1
1000a456:	701a      	strb	r2, [r3, #0]
        if (dmp.tap_cb)
1000a458:	4b13      	ldr	r3, [pc, #76]	; (1000a4a8 <decode_gesture+0xa8>)
1000a45a:	681b      	ldr	r3, [r3, #0]
1000a45c:	2b00      	cmp	r3, #0
1000a45e:	d009      	beq.n	1000a474 <decode_gesture+0x74>
            dmp.tap_cb(direction, count);
1000a460:	4b11      	ldr	r3, [pc, #68]	; (1000a4a8 <decode_gesture+0xa8>)
1000a462:	681b      	ldr	r3, [r3, #0]
1000a464:	220c      	movs	r2, #12
1000a466:	18ba      	adds	r2, r7, r2
1000a468:	7811      	ldrb	r1, [r2, #0]
1000a46a:	220d      	movs	r2, #13
1000a46c:	18ba      	adds	r2, r7, r2
1000a46e:	7812      	ldrb	r2, [r2, #0]
1000a470:	0010      	movs	r0, r2
1000a472:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
1000a474:	687b      	ldr	r3, [r7, #4]
1000a476:	3301      	adds	r3, #1
1000a478:	781b      	ldrb	r3, [r3, #0]
1000a47a:	001a      	movs	r2, r3
1000a47c:	2308      	movs	r3, #8
1000a47e:	4013      	ands	r3, r2
1000a480:	d00c      	beq.n	1000a49c <decode_gesture+0x9c>
        if (dmp.android_orient_cb)
1000a482:	4b09      	ldr	r3, [pc, #36]	; (1000a4a8 <decode_gesture+0xa8>)
1000a484:	685b      	ldr	r3, [r3, #4]
1000a486:	2b00      	cmp	r3, #0
1000a488:	d008      	beq.n	1000a49c <decode_gesture+0x9c>
            dmp.android_orient_cb(android_orient >> 6);
1000a48a:	4b07      	ldr	r3, [pc, #28]	; (1000a4a8 <decode_gesture+0xa8>)
1000a48c:	685b      	ldr	r3, [r3, #4]
1000a48e:	220f      	movs	r2, #15
1000a490:	18ba      	adds	r2, r7, r2
1000a492:	7812      	ldrb	r2, [r2, #0]
1000a494:	0992      	lsrs	r2, r2, #6
1000a496:	b2d2      	uxtb	r2, r2
1000a498:	0010      	movs	r0, r2
1000a49a:	4798      	blx	r3
    }

    return 0;
1000a49c:	2300      	movs	r3, #0
}
1000a49e:	0018      	movs	r0, r3
1000a4a0:	46bd      	mov	sp, r7
1000a4a2:	b004      	add	sp, #16
1000a4a4:	bd80      	pop	{r7, pc}
1000a4a6:	46c0      	nop			; (mov r8, r8)
1000a4a8:	1001b914 	.word	0x1001b914

1000a4ac <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1000a4ac:	b580      	push	{r7, lr}
1000a4ae:	b094      	sub	sp, #80	; 0x50
1000a4b0:	af00      	add	r7, sp, #0
1000a4b2:	60f8      	str	r0, [r7, #12]
1000a4b4:	60b9      	str	r1, [r7, #8]
1000a4b6:	607a      	str	r2, [r7, #4]
1000a4b8:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
1000a4ba:	234f      	movs	r3, #79	; 0x4f
1000a4bc:	18fb      	adds	r3, r7, r3
1000a4be:	2200      	movs	r2, #0
1000a4c0:	701a      	strb	r2, [r3, #0]

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
1000a4c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a4c4:	2200      	movs	r2, #0
1000a4c6:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    int res;
    if ((res = mpu_read_fifo_stream(dmp.packet_length, fifo_data, more)) != 0) {
1000a4c8:	4bc6      	ldr	r3, [pc, #792]	; (1000a7e4 <dmp_read_fifo+0x338>)
1000a4ca:	7b9b      	ldrb	r3, [r3, #14]
1000a4cc:	b29b      	uxth	r3, r3
1000a4ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a4d0:	2124      	movs	r1, #36	; 0x24
1000a4d2:	1879      	adds	r1, r7, r1
1000a4d4:	0018      	movs	r0, r3
1000a4d6:	4bc4      	ldr	r3, [pc, #784]	; (1000a7e8 <dmp_read_fifo+0x33c>)
1000a4d8:	4798      	blx	r3
1000a4da:	0003      	movs	r3, r0
1000a4dc:	64bb      	str	r3, [r7, #72]	; 0x48
1000a4de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000a4e0:	2b00      	cmp	r3, #0
1000a4e2:	d009      	beq.n	1000a4f8 <dmp_read_fifo+0x4c>
        DBG_LOG_DEV("[dmp_read_fifo]  error while reading fifo stream!");
1000a4e4:	4bc1      	ldr	r3, [pc, #772]	; (1000a7ec <dmp_read_fifo+0x340>)
1000a4e6:	0018      	movs	r0, r3
1000a4e8:	4bc1      	ldr	r3, [pc, #772]	; (1000a7f0 <dmp_read_fifo+0x344>)
1000a4ea:	4798      	blx	r3
1000a4ec:	4bc1      	ldr	r3, [pc, #772]	; (1000a7f4 <dmp_read_fifo+0x348>)
1000a4ee:	0018      	movs	r0, r3
1000a4f0:	4bc1      	ldr	r3, [pc, #772]	; (1000a7f8 <dmp_read_fifo+0x34c>)
1000a4f2:	4798      	blx	r3
        return res;
1000a4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000a4f6:	e170      	b.n	1000a7da <dmp_read_fifo+0x32e>
    }        

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
1000a4f8:	4bba      	ldr	r3, [pc, #744]	; (1000a7e4 <dmp_read_fifo+0x338>)
1000a4fa:	895b      	ldrh	r3, [r3, #10]
1000a4fc:	001a      	movs	r2, r3
1000a4fe:	2314      	movs	r3, #20
1000a500:	4013      	ands	r3, r2
1000a502:	d100      	bne.n	1000a506 <dmp_read_fifo+0x5a>
1000a504:	e0ae      	b.n	1000a664 <dmp_read_fifo+0x1b8>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1000a506:	2324      	movs	r3, #36	; 0x24
1000a508:	18fb      	adds	r3, r7, r3
1000a50a:	781b      	ldrb	r3, [r3, #0]
1000a50c:	061a      	lsls	r2, r3, #24
1000a50e:	2324      	movs	r3, #36	; 0x24
1000a510:	18fb      	adds	r3, r7, r3
1000a512:	785b      	ldrb	r3, [r3, #1]
1000a514:	041b      	lsls	r3, r3, #16
1000a516:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
1000a518:	2324      	movs	r3, #36	; 0x24
1000a51a:	18fb      	adds	r3, r7, r3
1000a51c:	789b      	ldrb	r3, [r3, #2]
1000a51e:	021b      	lsls	r3, r3, #8
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1000a520:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
1000a522:	2224      	movs	r2, #36	; 0x24
1000a524:	18ba      	adds	r2, r7, r2
1000a526:	78d2      	ldrb	r2, [r2, #3]
1000a528:	431a      	orrs	r2, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1000a52a:	687b      	ldr	r3, [r7, #4]
1000a52c:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1000a52e:	687b      	ldr	r3, [r7, #4]
1000a530:	3304      	adds	r3, #4
1000a532:	2224      	movs	r2, #36	; 0x24
1000a534:	18ba      	adds	r2, r7, r2
1000a536:	7912      	ldrb	r2, [r2, #4]
1000a538:	0611      	lsls	r1, r2, #24
1000a53a:	2224      	movs	r2, #36	; 0x24
1000a53c:	18ba      	adds	r2, r7, r2
1000a53e:	7952      	ldrb	r2, [r2, #5]
1000a540:	0412      	lsls	r2, r2, #16
1000a542:	4311      	orrs	r1, r2
            ((long)fifo_data[6] << 8) | fifo_data[7];
1000a544:	2224      	movs	r2, #36	; 0x24
1000a546:	18ba      	adds	r2, r7, r2
1000a548:	7992      	ldrb	r2, [r2, #6]
1000a54a:	0212      	lsls	r2, r2, #8
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1000a54c:	430a      	orrs	r2, r1
            ((long)fifo_data[6] << 8) | fifo_data[7];
1000a54e:	2124      	movs	r1, #36	; 0x24
1000a550:	1879      	adds	r1, r7, r1
1000a552:	79c9      	ldrb	r1, [r1, #7]
1000a554:	430a      	orrs	r2, r1
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1000a556:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1000a558:	687b      	ldr	r3, [r7, #4]
1000a55a:	3308      	adds	r3, #8
1000a55c:	2224      	movs	r2, #36	; 0x24
1000a55e:	18ba      	adds	r2, r7, r2
1000a560:	7a12      	ldrb	r2, [r2, #8]
1000a562:	0611      	lsls	r1, r2, #24
1000a564:	2224      	movs	r2, #36	; 0x24
1000a566:	18ba      	adds	r2, r7, r2
1000a568:	7a52      	ldrb	r2, [r2, #9]
1000a56a:	0412      	lsls	r2, r2, #16
1000a56c:	4311      	orrs	r1, r2
            ((long)fifo_data[10] << 8) | fifo_data[11];
1000a56e:	2224      	movs	r2, #36	; 0x24
1000a570:	18ba      	adds	r2, r7, r2
1000a572:	7a92      	ldrb	r2, [r2, #10]
1000a574:	0212      	lsls	r2, r2, #8
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1000a576:	430a      	orrs	r2, r1
            ((long)fifo_data[10] << 8) | fifo_data[11];
1000a578:	2124      	movs	r1, #36	; 0x24
1000a57a:	1879      	adds	r1, r7, r1
1000a57c:	7ac9      	ldrb	r1, [r1, #11]
1000a57e:	430a      	orrs	r2, r1
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1000a580:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1000a582:	687b      	ldr	r3, [r7, #4]
1000a584:	330c      	adds	r3, #12
1000a586:	2224      	movs	r2, #36	; 0x24
1000a588:	18ba      	adds	r2, r7, r2
1000a58a:	7b12      	ldrb	r2, [r2, #12]
1000a58c:	0611      	lsls	r1, r2, #24
1000a58e:	2224      	movs	r2, #36	; 0x24
1000a590:	18ba      	adds	r2, r7, r2
1000a592:	7b52      	ldrb	r2, [r2, #13]
1000a594:	0412      	lsls	r2, r2, #16
1000a596:	4311      	orrs	r1, r2
            ((long)fifo_data[14] << 8) | fifo_data[15];
1000a598:	2224      	movs	r2, #36	; 0x24
1000a59a:	18ba      	adds	r2, r7, r2
1000a59c:	7b92      	ldrb	r2, [r2, #14]
1000a59e:	0212      	lsls	r2, r2, #8
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1000a5a0:	430a      	orrs	r2, r1
            ((long)fifo_data[14] << 8) | fifo_data[15];
1000a5a2:	2124      	movs	r1, #36	; 0x24
1000a5a4:	1879      	adds	r1, r7, r1
1000a5a6:	7bc9      	ldrb	r1, [r1, #15]
1000a5a8:	430a      	orrs	r2, r1
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1000a5aa:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
1000a5ac:	234f      	movs	r3, #79	; 0x4f
1000a5ae:	18fb      	adds	r3, r7, r3
1000a5b0:	224f      	movs	r2, #79	; 0x4f
1000a5b2:	18ba      	adds	r2, r7, r2
1000a5b4:	7812      	ldrb	r2, [r2, #0]
1000a5b6:	3210      	adds	r2, #16
1000a5b8:	701a      	strb	r2, [r3, #0]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
1000a5ba:	687b      	ldr	r3, [r7, #4]
1000a5bc:	681b      	ldr	r3, [r3, #0]
1000a5be:	141a      	asrs	r2, r3, #16
1000a5c0:	2314      	movs	r3, #20
1000a5c2:	18fb      	adds	r3, r7, r3
1000a5c4:	601a      	str	r2, [r3, #0]
        quat_q14[1] = quat[1] >> 16;
1000a5c6:	687b      	ldr	r3, [r7, #4]
1000a5c8:	3304      	adds	r3, #4
1000a5ca:	681b      	ldr	r3, [r3, #0]
1000a5cc:	141a      	asrs	r2, r3, #16
1000a5ce:	2314      	movs	r3, #20
1000a5d0:	18fb      	adds	r3, r7, r3
1000a5d2:	605a      	str	r2, [r3, #4]
        quat_q14[2] = quat[2] >> 16;
1000a5d4:	687b      	ldr	r3, [r7, #4]
1000a5d6:	3308      	adds	r3, #8
1000a5d8:	681b      	ldr	r3, [r3, #0]
1000a5da:	141a      	asrs	r2, r3, #16
1000a5dc:	2314      	movs	r3, #20
1000a5de:	18fb      	adds	r3, r7, r3
1000a5e0:	609a      	str	r2, [r3, #8]
        quat_q14[3] = quat[3] >> 16;
1000a5e2:	687b      	ldr	r3, [r7, #4]
1000a5e4:	330c      	adds	r3, #12
1000a5e6:	681b      	ldr	r3, [r3, #0]
1000a5e8:	141a      	asrs	r2, r3, #16
1000a5ea:	2314      	movs	r3, #20
1000a5ec:	18fb      	adds	r3, r7, r3
1000a5ee:	60da      	str	r2, [r3, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1000a5f0:	2314      	movs	r3, #20
1000a5f2:	18fb      	adds	r3, r7, r3
1000a5f4:	681a      	ldr	r2, [r3, #0]
1000a5f6:	2314      	movs	r3, #20
1000a5f8:	18fb      	adds	r3, r7, r3
1000a5fa:	681b      	ldr	r3, [r3, #0]
1000a5fc:	435a      	muls	r2, r3
1000a5fe:	2314      	movs	r3, #20
1000a600:	18fb      	adds	r3, r7, r3
1000a602:	6859      	ldr	r1, [r3, #4]
1000a604:	2314      	movs	r3, #20
1000a606:	18fb      	adds	r3, r7, r3
1000a608:	685b      	ldr	r3, [r3, #4]
1000a60a:	434b      	muls	r3, r1
1000a60c:	18d2      	adds	r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
1000a60e:	2314      	movs	r3, #20
1000a610:	18fb      	adds	r3, r7, r3
1000a612:	6899      	ldr	r1, [r3, #8]
1000a614:	2314      	movs	r3, #20
1000a616:	18fb      	adds	r3, r7, r3
1000a618:	689b      	ldr	r3, [r3, #8]
1000a61a:	434b      	muls	r3, r1
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1000a61c:	18d2      	adds	r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
1000a61e:	2314      	movs	r3, #20
1000a620:	18fb      	adds	r3, r7, r3
1000a622:	68d9      	ldr	r1, [r3, #12]
1000a624:	2314      	movs	r3, #20
1000a626:	18fb      	adds	r3, r7, r3
1000a628:	68db      	ldr	r3, [r3, #12]
1000a62a:	434b      	muls	r3, r1
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
1000a62c:	18d3      	adds	r3, r2, r3
1000a62e:	647b      	str	r3, [r7, #68]	; 0x44
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
1000a630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000a632:	4a72      	ldr	r2, [pc, #456]	; (1000a7fc <dmp_read_fifo+0x350>)
1000a634:	4293      	cmp	r3, r2
1000a636:	dd04      	ble.n	1000a642 <dmp_read_fifo+0x196>
1000a638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000a63a:	2388      	movs	r3, #136	; 0x88
1000a63c:	055b      	lsls	r3, r3, #21
1000a63e:	429a      	cmp	r2, r3
1000a640:	dd07      	ble.n	1000a652 <dmp_read_fifo+0x1a6>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
1000a642:	4b6f      	ldr	r3, [pc, #444]	; (1000a800 <dmp_read_fifo+0x354>)
1000a644:	4798      	blx	r3
            sensors[0] = 0;
1000a646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a648:	2200      	movs	r2, #0
1000a64a:	801a      	strh	r2, [r3, #0]
            return -1;
1000a64c:	2301      	movs	r3, #1
1000a64e:	425b      	negs	r3, r3
1000a650:	e0c3      	b.n	1000a7da <dmp_read_fifo+0x32e>
        }
        sensors[0] |= INV_WXYZ_QUAT;
1000a652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a654:	2200      	movs	r2, #0
1000a656:	5e9b      	ldrsh	r3, [r3, r2]
1000a658:	2280      	movs	r2, #128	; 0x80
1000a65a:	0052      	lsls	r2, r2, #1
1000a65c:	4313      	orrs	r3, r2
1000a65e:	b21a      	sxth	r2, r3
1000a660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a662:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1000a664:	4b5f      	ldr	r3, [pc, #380]	; (1000a7e4 <dmp_read_fifo+0x338>)
1000a666:	895b      	ldrh	r3, [r3, #10]
1000a668:	001a      	movs	r2, r3
1000a66a:	2340      	movs	r3, #64	; 0x40
1000a66c:	4013      	ands	r3, r2
1000a66e:	d04e      	beq.n	1000a70e <dmp_read_fifo+0x262>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1000a670:	234f      	movs	r3, #79	; 0x4f
1000a672:	18fb      	adds	r3, r7, r3
1000a674:	781b      	ldrb	r3, [r3, #0]
1000a676:	2224      	movs	r2, #36	; 0x24
1000a678:	18ba      	adds	r2, r7, r2
1000a67a:	5cd3      	ldrb	r3, [r2, r3]
1000a67c:	021b      	lsls	r3, r3, #8
1000a67e:	b21a      	sxth	r2, r3
1000a680:	234f      	movs	r3, #79	; 0x4f
1000a682:	18fb      	adds	r3, r7, r3
1000a684:	781b      	ldrb	r3, [r3, #0]
1000a686:	3301      	adds	r3, #1
1000a688:	2124      	movs	r1, #36	; 0x24
1000a68a:	1879      	adds	r1, r7, r1
1000a68c:	5ccb      	ldrb	r3, [r1, r3]
1000a68e:	b21b      	sxth	r3, r3
1000a690:	4313      	orrs	r3, r2
1000a692:	b21a      	sxth	r2, r3
1000a694:	68bb      	ldr	r3, [r7, #8]
1000a696:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1000a698:	68bb      	ldr	r3, [r7, #8]
1000a69a:	3302      	adds	r3, #2
1000a69c:	224f      	movs	r2, #79	; 0x4f
1000a69e:	18ba      	adds	r2, r7, r2
1000a6a0:	7812      	ldrb	r2, [r2, #0]
1000a6a2:	3202      	adds	r2, #2
1000a6a4:	2124      	movs	r1, #36	; 0x24
1000a6a6:	1879      	adds	r1, r7, r1
1000a6a8:	5c8a      	ldrb	r2, [r1, r2]
1000a6aa:	0212      	lsls	r2, r2, #8
1000a6ac:	b211      	sxth	r1, r2
1000a6ae:	224f      	movs	r2, #79	; 0x4f
1000a6b0:	18ba      	adds	r2, r7, r2
1000a6b2:	7812      	ldrb	r2, [r2, #0]
1000a6b4:	3203      	adds	r2, #3
1000a6b6:	2024      	movs	r0, #36	; 0x24
1000a6b8:	1838      	adds	r0, r7, r0
1000a6ba:	5c82      	ldrb	r2, [r0, r2]
1000a6bc:	b212      	sxth	r2, r2
1000a6be:	430a      	orrs	r2, r1
1000a6c0:	b212      	sxth	r2, r2
1000a6c2:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1000a6c4:	68bb      	ldr	r3, [r7, #8]
1000a6c6:	3304      	adds	r3, #4
1000a6c8:	224f      	movs	r2, #79	; 0x4f
1000a6ca:	18ba      	adds	r2, r7, r2
1000a6cc:	7812      	ldrb	r2, [r2, #0]
1000a6ce:	3204      	adds	r2, #4
1000a6d0:	2124      	movs	r1, #36	; 0x24
1000a6d2:	1879      	adds	r1, r7, r1
1000a6d4:	5c8a      	ldrb	r2, [r1, r2]
1000a6d6:	0212      	lsls	r2, r2, #8
1000a6d8:	b211      	sxth	r1, r2
1000a6da:	224f      	movs	r2, #79	; 0x4f
1000a6dc:	18ba      	adds	r2, r7, r2
1000a6de:	7812      	ldrb	r2, [r2, #0]
1000a6e0:	3205      	adds	r2, #5
1000a6e2:	2024      	movs	r0, #36	; 0x24
1000a6e4:	1838      	adds	r0, r7, r0
1000a6e6:	5c82      	ldrb	r2, [r0, r2]
1000a6e8:	b212      	sxth	r2, r2
1000a6ea:	430a      	orrs	r2, r1
1000a6ec:	b212      	sxth	r2, r2
1000a6ee:	801a      	strh	r2, [r3, #0]
        ii += 6;
1000a6f0:	234f      	movs	r3, #79	; 0x4f
1000a6f2:	18fb      	adds	r3, r7, r3
1000a6f4:	224f      	movs	r2, #79	; 0x4f
1000a6f6:	18ba      	adds	r2, r7, r2
1000a6f8:	7812      	ldrb	r2, [r2, #0]
1000a6fa:	3206      	adds	r2, #6
1000a6fc:	701a      	strb	r2, [r3, #0]
        sensors[0] |= INV_XYZ_ACCEL;
1000a6fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a700:	2200      	movs	r2, #0
1000a702:	5e9b      	ldrsh	r3, [r3, r2]
1000a704:	2208      	movs	r2, #8
1000a706:	4313      	orrs	r3, r2
1000a708:	b21a      	sxth	r2, r3
1000a70a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a70c:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000a70e:	4b35      	ldr	r3, [pc, #212]	; (1000a7e4 <dmp_read_fifo+0x338>)
1000a710:	895b      	ldrh	r3, [r3, #10]
1000a712:	001a      	movs	r2, r3
1000a714:	23c0      	movs	r3, #192	; 0xc0
1000a716:	005b      	lsls	r3, r3, #1
1000a718:	4013      	ands	r3, r2
1000a71a:	d04e      	beq.n	1000a7ba <dmp_read_fifo+0x30e>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1000a71c:	234f      	movs	r3, #79	; 0x4f
1000a71e:	18fb      	adds	r3, r7, r3
1000a720:	781b      	ldrb	r3, [r3, #0]
1000a722:	2224      	movs	r2, #36	; 0x24
1000a724:	18ba      	adds	r2, r7, r2
1000a726:	5cd3      	ldrb	r3, [r2, r3]
1000a728:	021b      	lsls	r3, r3, #8
1000a72a:	b21a      	sxth	r2, r3
1000a72c:	234f      	movs	r3, #79	; 0x4f
1000a72e:	18fb      	adds	r3, r7, r3
1000a730:	781b      	ldrb	r3, [r3, #0]
1000a732:	3301      	adds	r3, #1
1000a734:	2124      	movs	r1, #36	; 0x24
1000a736:	1879      	adds	r1, r7, r1
1000a738:	5ccb      	ldrb	r3, [r1, r3]
1000a73a:	b21b      	sxth	r3, r3
1000a73c:	4313      	orrs	r3, r2
1000a73e:	b21a      	sxth	r2, r3
1000a740:	68fb      	ldr	r3, [r7, #12]
1000a742:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1000a744:	68fb      	ldr	r3, [r7, #12]
1000a746:	3302      	adds	r3, #2
1000a748:	224f      	movs	r2, #79	; 0x4f
1000a74a:	18ba      	adds	r2, r7, r2
1000a74c:	7812      	ldrb	r2, [r2, #0]
1000a74e:	3202      	adds	r2, #2
1000a750:	2124      	movs	r1, #36	; 0x24
1000a752:	1879      	adds	r1, r7, r1
1000a754:	5c8a      	ldrb	r2, [r1, r2]
1000a756:	0212      	lsls	r2, r2, #8
1000a758:	b211      	sxth	r1, r2
1000a75a:	224f      	movs	r2, #79	; 0x4f
1000a75c:	18ba      	adds	r2, r7, r2
1000a75e:	7812      	ldrb	r2, [r2, #0]
1000a760:	3203      	adds	r2, #3
1000a762:	2024      	movs	r0, #36	; 0x24
1000a764:	1838      	adds	r0, r7, r0
1000a766:	5c82      	ldrb	r2, [r0, r2]
1000a768:	b212      	sxth	r2, r2
1000a76a:	430a      	orrs	r2, r1
1000a76c:	b212      	sxth	r2, r2
1000a76e:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1000a770:	68fb      	ldr	r3, [r7, #12]
1000a772:	3304      	adds	r3, #4
1000a774:	224f      	movs	r2, #79	; 0x4f
1000a776:	18ba      	adds	r2, r7, r2
1000a778:	7812      	ldrb	r2, [r2, #0]
1000a77a:	3204      	adds	r2, #4
1000a77c:	2124      	movs	r1, #36	; 0x24
1000a77e:	1879      	adds	r1, r7, r1
1000a780:	5c8a      	ldrb	r2, [r1, r2]
1000a782:	0212      	lsls	r2, r2, #8
1000a784:	b211      	sxth	r1, r2
1000a786:	224f      	movs	r2, #79	; 0x4f
1000a788:	18ba      	adds	r2, r7, r2
1000a78a:	7812      	ldrb	r2, [r2, #0]
1000a78c:	3205      	adds	r2, #5
1000a78e:	2024      	movs	r0, #36	; 0x24
1000a790:	1838      	adds	r0, r7, r0
1000a792:	5c82      	ldrb	r2, [r0, r2]
1000a794:	b212      	sxth	r2, r2
1000a796:	430a      	orrs	r2, r1
1000a798:	b212      	sxth	r2, r2
1000a79a:	801a      	strh	r2, [r3, #0]
        ii += 6;
1000a79c:	234f      	movs	r3, #79	; 0x4f
1000a79e:	18fb      	adds	r3, r7, r3
1000a7a0:	224f      	movs	r2, #79	; 0x4f
1000a7a2:	18ba      	adds	r2, r7, r2
1000a7a4:	7812      	ldrb	r2, [r2, #0]
1000a7a6:	3206      	adds	r2, #6
1000a7a8:	701a      	strb	r2, [r3, #0]
        sensors[0] |= INV_XYZ_GYRO;
1000a7aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a7ac:	2200      	movs	r2, #0
1000a7ae:	5e9b      	ldrsh	r3, [r3, r2]
1000a7b0:	2270      	movs	r2, #112	; 0x70
1000a7b2:	4313      	orrs	r3, r2
1000a7b4:	b21a      	sxth	r2, r3
1000a7b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a7b8:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000a7ba:	4b0a      	ldr	r3, [pc, #40]	; (1000a7e4 <dmp_read_fifo+0x338>)
1000a7bc:	895b      	ldrh	r3, [r3, #10]
1000a7be:	001a      	movs	r2, r3
1000a7c0:	2303      	movs	r3, #3
1000a7c2:	4013      	ands	r3, r2
1000a7c4:	d008      	beq.n	1000a7d8 <dmp_read_fifo+0x32c>
        decode_gesture(fifo_data + ii);
1000a7c6:	234f      	movs	r3, #79	; 0x4f
1000a7c8:	18fb      	adds	r3, r7, r3
1000a7ca:	781b      	ldrb	r3, [r3, #0]
1000a7cc:	2224      	movs	r2, #36	; 0x24
1000a7ce:	18ba      	adds	r2, r7, r2
1000a7d0:	18d3      	adds	r3, r2, r3
1000a7d2:	0018      	movs	r0, r3
1000a7d4:	4b0b      	ldr	r3, [pc, #44]	; (1000a804 <dmp_read_fifo+0x358>)
1000a7d6:	4798      	blx	r3
    
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms IN");
    //get_ms(timestamp);
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms OUT");
    return 0;
1000a7d8:	2300      	movs	r3, #0
}
1000a7da:	0018      	movs	r0, r3
1000a7dc:	46bd      	mov	sp, r7
1000a7de:	b014      	add	sp, #80	; 0x50
1000a7e0:	bd80      	pop	{r7, pc}
1000a7e2:	46c0      	nop			; (mov r8, r8)
1000a7e4:	1001b914 	.word	0x1001b914
1000a7e8:	100091e1 	.word	0x100091e1
1000a7ec:	1001a53c 	.word	0x1001a53c
1000a7f0:	10019095 	.word	0x10019095
1000a7f4:	1001a540 	.word	0x1001a540
1000a7f8:	10018f75 	.word	0x10018f75
1000a7fc:	0effffff 	.word	0x0effffff
1000a800:	100087d9 	.word	0x100087d9
1000a804:	1000a401 	.word	0x1000a401

1000a808 <sms_service_advertise>:
 */ 

#include "app_include.h"

at_ble_status_t sms_service_advertise(void)
 {
1000a808:	b5b0      	push	{r4, r5, r7, lr}
1000a80a:	b086      	sub	sp, #24
1000a80c:	af04      	add	r7, sp, #16
     at_ble_status_t status = AT_BLE_FAILURE;
1000a80e:	1dfb      	adds	r3, r7, #7
1000a810:	22e2      	movs	r2, #226	; 0xe2
1000a812:	701a      	strb	r2, [r3, #0]

     /* Set the advertisement data */
     if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a814:	1dfc      	adds	r4, r7, #7
1000a816:	4b1b      	ldr	r3, [pc, #108]	; (1000a884 <sms_service_advertise+0x7c>)
1000a818:	4798      	blx	r3
1000a81a:	0003      	movs	r3, r0
1000a81c:	7023      	strb	r3, [r4, #0]
1000a81e:	1dfb      	adds	r3, r7, #7
1000a820:	781b      	ldrb	r3, [r3, #0]
1000a822:	2b00      	cmp	r3, #0
1000a824:	d00a      	beq.n	1000a83c <sms_service_advertise+0x34>
         DBG_LOG("[sms_service_advertise]  advertisement data set failed!");
1000a826:	4b18      	ldr	r3, [pc, #96]	; (1000a888 <sms_service_advertise+0x80>)
1000a828:	0018      	movs	r0, r3
1000a82a:	4b18      	ldr	r3, [pc, #96]	; (1000a88c <sms_service_advertise+0x84>)
1000a82c:	4798      	blx	r3
1000a82e:	4b18      	ldr	r3, [pc, #96]	; (1000a890 <sms_service_advertise+0x88>)
1000a830:	0018      	movs	r0, r3
1000a832:	4b18      	ldr	r3, [pc, #96]	; (1000a894 <sms_service_advertise+0x8c>)
1000a834:	4798      	blx	r3
         return status;
1000a836:	1dfb      	adds	r3, r7, #7
1000a838:	781b      	ldrb	r3, [r3, #0]
1000a83a:	e01e      	b.n	1000a87a <sms_service_advertise+0x72>
     }

     /* Start of advertisement */
     if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a83c:	1dfc      	adds	r4, r7, #7
1000a83e:	2300      	movs	r3, #0
1000a840:	9302      	str	r3, [sp, #8]
1000a842:	231e      	movs	r3, #30
1000a844:	9301      	str	r3, [sp, #4]
1000a846:	23c8      	movs	r3, #200	; 0xc8
1000a848:	00db      	lsls	r3, r3, #3
1000a84a:	9300      	str	r3, [sp, #0]
1000a84c:	2300      	movs	r3, #0
1000a84e:	2200      	movs	r2, #0
1000a850:	2101      	movs	r1, #1
1000a852:	2000      	movs	r0, #0
1000a854:	4d10      	ldr	r5, [pc, #64]	; (1000a898 <sms_service_advertise+0x90>)
1000a856:	47a8      	blx	r5
1000a858:	0003      	movs	r3, r0
1000a85a:	7023      	strb	r3, [r4, #0]
1000a85c:	1dfb      	adds	r3, r7, #7
1000a85e:	781b      	ldrb	r3, [r3, #0]
1000a860:	2b00      	cmp	r3, #0
1000a862:	d109      	bne.n	1000a878 <sms_service_advertise+0x70>
     {
         DBG_LOG("[sms_service_advertise]  BLE Started Advertisement");
1000a864:	4b08      	ldr	r3, [pc, #32]	; (1000a888 <sms_service_advertise+0x80>)
1000a866:	0018      	movs	r0, r3
1000a868:	4b08      	ldr	r3, [pc, #32]	; (1000a88c <sms_service_advertise+0x84>)
1000a86a:	4798      	blx	r3
1000a86c:	4b0b      	ldr	r3, [pc, #44]	; (1000a89c <sms_service_advertise+0x94>)
1000a86e:	0018      	movs	r0, r3
1000a870:	4b08      	ldr	r3, [pc, #32]	; (1000a894 <sms_service_advertise+0x8c>)
1000a872:	4798      	blx	r3
         return AT_BLE_SUCCESS;
1000a874:	2300      	movs	r3, #0
1000a876:	e000      	b.n	1000a87a <sms_service_advertise+0x72>
         } else {
         //DBG_LOG("[sms_service_advertise]  BLE Advertisement start failed: reason 0x%x", status);
     }
     return AT_BLE_FAILURE;
1000a878:	23e2      	movs	r3, #226	; 0xe2
 }
1000a87a:	0018      	movs	r0, r3
1000a87c:	46bd      	mov	sp, r7
1000a87e:	b002      	add	sp, #8
1000a880:	bdb0      	pop	{r4, r5, r7, pc}
1000a882:	46c0      	nop			; (mov r8, r8)
1000a884:	100127e1 	.word	0x100127e1
1000a888:	1001a574 	.word	0x1001a574
1000a88c:	10019095 	.word	0x10019095
1000a890:	1001a578 	.word	0x1001a578
1000a894:	10018f75 	.word	0x10018f75
1000a898:	100148ad 	.word	0x100148ad
1000a89c:	1001a5b0 	.word	0x1001a5b0

1000a8a0 <sms_button_configure_gpio>:
volatile bool dbg_gpio_pin_state = false;


/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a8a0:	b580      	push	{r7, lr}
1000a8a2:	b082      	sub	sp, #8
1000a8a4:	af00      	add	r7, sp, #0
    //DBG_LOG("Problem while setting up dbg pin");
    //}
    //gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);

    /* Wake up input @ PIN_A0_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a8a6:	1d3b      	adds	r3, r7, #4
1000a8a8:	0018      	movs	r0, r3
1000a8aa:	4b11      	ldr	r3, [pc, #68]	; (1000a8f0 <sms_button_configure_gpio+0x50>)
1000a8ac:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a8ae:	1d3b      	adds	r3, r7, #4
1000a8b0:	2200      	movs	r2, #0
1000a8b2:	701a      	strb	r2, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a8b4:	1d3b      	adds	r3, r7, #4
1000a8b6:	2202      	movs	r2, #2
1000a8b8:	705a      	strb	r2, [r3, #1]
    config_gpio_pin.aon_wakeup = true;
1000a8ba:	1d3b      	adds	r3, r7, #4
1000a8bc:	2201      	movs	r2, #1
1000a8be:	70da      	strb	r2, [r3, #3]
    if(gpio_pin_set_config(PIN_AO_GPIO_0, &config_gpio_pin) != STATUS_OK) {
1000a8c0:	1d3b      	adds	r3, r7, #4
1000a8c2:	0019      	movs	r1, r3
1000a8c4:	201f      	movs	r0, #31
1000a8c6:	4b0b      	ldr	r3, [pc, #44]	; (1000a8f4 <sms_button_configure_gpio+0x54>)
1000a8c8:	4798      	blx	r3
    //else {
    //DBG_LOG_DEV("[sms_button_configure] wake-up pin set up correctly");
    //}

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a8ca:	1d3b      	adds	r3, r7, #4
1000a8cc:	0018      	movs	r0, r3
1000a8ce:	4b08      	ldr	r3, [pc, #32]	; (1000a8f0 <sms_button_configure_gpio+0x50>)
1000a8d0:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a8d2:	1d3b      	adds	r3, r7, #4
1000a8d4:	2200      	movs	r2, #0
1000a8d6:	701a      	strb	r2, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a8d8:	1d3b      	adds	r3, r7, #4
1000a8da:	2200      	movs	r2, #0
1000a8dc:	705a      	strb	r2, [r3, #1]
    gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000a8de:	1d3b      	adds	r3, r7, #4
1000a8e0:	0019      	movs	r1, r3
1000a8e2:	2017      	movs	r0, #23
1000a8e4:	4b03      	ldr	r3, [pc, #12]	; (1000a8f4 <sms_button_configure_gpio+0x54>)
1000a8e6:	4798      	blx	r3
}
1000a8e8:	46c0      	nop			; (mov r8, r8)
1000a8ea:	46bd      	mov	sp, r7
1000a8ec:	b002      	add	sp, #8
1000a8ee:	bd80      	pop	{r7, pc}
1000a8f0:	1000ca81 	.word	0x1000ca81
1000a8f4:	1000caa9 	.word	0x1000caa9

1000a8f8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a8f8:	b580      	push	{r7, lr}
1000a8fa:	af00      	add	r7, sp, #0
    /* Button 0 callback */
    gpio_register_callback(SMS_BUTTON_2_PIN, sms_button_bt2_callback, GPIO_CALLBACK_RISING);
1000a8fc:	4b08      	ldr	r3, [pc, #32]	; (1000a920 <sms_button_register_callbacks+0x28>)
1000a8fe:	2202      	movs	r2, #2
1000a900:	0019      	movs	r1, r3
1000a902:	2017      	movs	r0, #23
1000a904:	4b07      	ldr	r3, [pc, #28]	; (1000a924 <sms_button_register_callbacks+0x2c>)
1000a906:	4798      	blx	r3
    gpio_enable_callback(SMS_BUTTON_2_PIN);
1000a908:	2017      	movs	r0, #23
1000a90a:	4b07      	ldr	r3, [pc, #28]	; (1000a928 <sms_button_register_callbacks+0x30>)
1000a90c:	4798      	blx	r3

    /* GPIO0 callback */
    gpio_register_callback(SMS_BUTTON_1_PIN, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a90e:	4b07      	ldr	r3, [pc, #28]	; (1000a92c <sms_button_register_callbacks+0x34>)
1000a910:	2202      	movs	r2, #2
1000a912:	0019      	movs	r1, r3
1000a914:	201f      	movs	r0, #31
1000a916:	4b03      	ldr	r3, [pc, #12]	; (1000a924 <sms_button_register_callbacks+0x2c>)
1000a918:	4798      	blx	r3
    //gpio_enable_callback(PIN_AO_GPIO_0);
}
1000a91a:	46c0      	nop			; (mov r8, r8)
1000a91c:	46bd      	mov	sp, r7
1000a91e:	bd80      	pop	{r7, pc}
1000a920:	1000a96d 	.word	0x1000a96d
1000a924:	1000d0ed 	.word	0x1000d0ed
1000a928:	1000d3d5 	.word	0x1000d3d5
1000a92c:	1000a931 	.word	0x1000a931

1000a930 <sms_button_bt1_callback>:

/* Callbacks --> sending interrupt message to platform */
void sms_button_bt1_callback(void)
{
1000a930:	b5b0      	push	{r4, r5, r7, lr}
1000a932:	af00      	add	r7, sp, #0
    if(conn_status) {
1000a934:	4b09      	ldr	r3, [pc, #36]	; (1000a95c <sms_button_bt1_callback+0x2c>)
1000a936:	781b      	ldrb	r3, [r3, #0]
1000a938:	2b00      	cmp	r3, #0
1000a93a:	d00b      	beq.n	1000a954 <sms_button_bt1_callback+0x24>
        gpio_disable_callback(SMS_BUTTON_1_PIN);
1000a93c:	201f      	movs	r0, #31
1000a93e:	4b08      	ldr	r3, [pc, #32]	; (1000a960 <sms_button_bt1_callback+0x30>)
1000a940:	4798      	blx	r3
        sms_plf_int_state.source = SMS_CB_BT1;
1000a942:	4b08      	ldr	r3, [pc, #32]	; (1000a964 <sms_button_bt1_callback+0x34>)
1000a944:	2201      	movs	r2, #1
1000a946:	701a      	strb	r2, [r3, #0]
        send_plf_int_msg_ind(SMS_BUTTON_1_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a948:	2300      	movs	r3, #0
1000a94a:	2200      	movs	r2, #0
1000a94c:	2102      	movs	r1, #2
1000a94e:	201f      	movs	r0, #31
1000a950:	4c05      	ldr	r4, [pc, #20]	; (1000a968 <sms_button_bt1_callback+0x38>)
1000a952:	47a0      	blx	r4
    }
}
1000a954:	46c0      	nop			; (mov r8, r8)
1000a956:	46bd      	mov	sp, r7
1000a958:	bdb0      	pop	{r4, r5, r7, pc}
1000a95a:	46c0      	nop			; (mov r8, r8)
1000a95c:	1001b978 	.word	0x1001b978
1000a960:	1000d49d 	.word	0x1000d49d
1000a964:	1001c0a8 	.word	0x1001c0a8
1000a968:	100133ad 	.word	0x100133ad

1000a96c <sms_button_bt2_callback>:
void sms_button_bt2_callback(void)
{
1000a96c:	b5b0      	push	{r4, r5, r7, lr}
1000a96e:	af00      	add	r7, sp, #0
    /* Add button callback functionality here */
    if(conn_status) {
1000a970:	4b09      	ldr	r3, [pc, #36]	; (1000a998 <sms_button_bt2_callback+0x2c>)
1000a972:	781b      	ldrb	r3, [r3, #0]
1000a974:	2b00      	cmp	r3, #0
1000a976:	d00b      	beq.n	1000a990 <sms_button_bt2_callback+0x24>
        gpio_disable_callback(SMS_BUTTON_2_PIN);
1000a978:	2017      	movs	r0, #23
1000a97a:	4b08      	ldr	r3, [pc, #32]	; (1000a99c <sms_button_bt2_callback+0x30>)
1000a97c:	4798      	blx	r3
        sms_plf_int_state.source = SMS_CB_BT2;
1000a97e:	4b08      	ldr	r3, [pc, #32]	; (1000a9a0 <sms_button_bt2_callback+0x34>)
1000a980:	2202      	movs	r2, #2
1000a982:	701a      	strb	r2, [r3, #0]
        send_plf_int_msg_ind(SMS_BUTTON_2_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a984:	2300      	movs	r3, #0
1000a986:	2200      	movs	r2, #0
1000a988:	2102      	movs	r1, #2
1000a98a:	2017      	movs	r0, #23
1000a98c:	4c05      	ldr	r4, [pc, #20]	; (1000a9a4 <sms_button_bt2_callback+0x38>)
1000a98e:	47a0      	blx	r4
    }
}
1000a990:	46c0      	nop			; (mov r8, r8)
1000a992:	46bd      	mov	sp, r7
1000a994:	bdb0      	pop	{r4, r5, r7, pc}
1000a996:	46c0      	nop			; (mov r8, r8)
1000a998:	1001b978 	.word	0x1001b978
1000a99c:	1000d49d 	.word	0x1000d49d
1000a9a0:	1001c0a8 	.word	0x1001c0a8
1000a9a4:	100133ad 	.word	0x100133ad

1000a9a8 <sms_button_bt1_fn>:

/* Callback functions --> doing things */
void sms_button_bt1_fn(void)
{
1000a9a8:	b590      	push	{r4, r7, lr}
1000a9aa:	b083      	sub	sp, #12
1000a9ac:	af00      	add	r7, sp, #0
    /* Prevent sleeping */
    //acquire_sleep_lock();
    //DBG_LOG_DEV("Preventing sleep...");

    /* Updating characteristic value */
    sms_button_char_value = ((sms_button_char_value >= 255) ? 0 : (sms_button_char_value+1));
1000a9ae:	4b14      	ldr	r3, [pc, #80]	; (1000aa00 <sms_button_bt1_fn+0x58>)
1000a9b0:	781b      	ldrb	r3, [r3, #0]
1000a9b2:	2bff      	cmp	r3, #255	; 0xff
1000a9b4:	d004      	beq.n	1000a9c0 <sms_button_bt1_fn+0x18>
1000a9b6:	4b12      	ldr	r3, [pc, #72]	; (1000aa00 <sms_button_bt1_fn+0x58>)
1000a9b8:	781b      	ldrb	r3, [r3, #0]
1000a9ba:	3301      	adds	r3, #1
1000a9bc:	b2da      	uxtb	r2, r3
1000a9be:	e000      	b.n	1000a9c2 <sms_button_bt1_fn+0x1a>
1000a9c0:	2200      	movs	r2, #0
1000a9c2:	4b0f      	ldr	r3, [pc, #60]	; (1000aa00 <sms_button_bt1_fn+0x58>)
1000a9c4:	701a      	strb	r2, [r3, #0]
    /* Timing measurement pin */
    //dbg_gpio_pin_state = !dbg_gpio_pin_state;
    //gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);

    /* Set and send the new characteristic value before debouncing (latency) */
    status = at_ble_characteristic_value_set(sms_button_service_handler.serv_chars.char_val_handle, &sms_button_char_value, sizeof(uint8_t));
1000a9c6:	4b0f      	ldr	r3, [pc, #60]	; (1000aa04 <sms_button_bt1_fn+0x5c>)
1000a9c8:	8a9b      	ldrh	r3, [r3, #20]
1000a9ca:	1dfc      	adds	r4, r7, #7
1000a9cc:	490c      	ldr	r1, [pc, #48]	; (1000aa00 <sms_button_bt1_fn+0x58>)
1000a9ce:	2201      	movs	r2, #1
1000a9d0:	0018      	movs	r0, r3
1000a9d2:	4b0d      	ldr	r3, [pc, #52]	; (1000aa08 <sms_button_bt1_fn+0x60>)
1000a9d4:	4798      	blx	r3
1000a9d6:	0003      	movs	r3, r0
1000a9d8:	7023      	strb	r3, [r4, #0]
    if(status != AT_BLE_SUCCESS) {
1000a9da:	1dfb      	adds	r3, r7, #7
1000a9dc:	781b      	ldrb	r3, [r3, #0]
1000a9de:	2b00      	cmp	r3, #0
1000a9e0:	d10a      	bne.n	1000a9f8 <sms_button_bt1_fn+0x50>
        //DBG_LOG_DEV("[sms_button_bt1_fn] updating the characteristic failed!");
        } else {
        //DBG_LOG_DEV("[sms_button_bt1_fn] updating the characteristic successful");
        status = at_ble_notification_send(sms_connection_handle, sms_button_service_handler.serv_chars.char_val_handle);
1000a9e2:	4b0a      	ldr	r3, [pc, #40]	; (1000aa0c <sms_button_bt1_fn+0x64>)
1000a9e4:	881a      	ldrh	r2, [r3, #0]
1000a9e6:	4b07      	ldr	r3, [pc, #28]	; (1000aa04 <sms_button_bt1_fn+0x5c>)
1000a9e8:	8a9b      	ldrh	r3, [r3, #20]
1000a9ea:	1dfc      	adds	r4, r7, #7
1000a9ec:	0019      	movs	r1, r3
1000a9ee:	0010      	movs	r0, r2
1000a9f0:	4b07      	ldr	r3, [pc, #28]	; (1000aa10 <sms_button_bt1_fn+0x68>)
1000a9f2:	4798      	blx	r3
1000a9f4:	0003      	movs	r3, r0
1000a9f6:	7023      	strb	r3, [r4, #0]

    /* Start timer to debounce */
    //DBG_LOG_DEV("[sms_button_bt1_fn] starting timer for %d ms", SMS_BUTTON_DEBOUNCE_MS);
    //sms_timer_enable(SMS_TIMER_UNIT_MS, SMS_BUTTON_DEBOUNCE_MS, SMS_TIMER_DEBOUNCE);
    //gpio_enable_callback(SMS_BUTTON_1_PIN);
}
1000a9f8:	46c0      	nop			; (mov r8, r8)
1000a9fa:	46bd      	mov	sp, r7
1000a9fc:	b003      	add	sp, #12
1000a9fe:	bd90      	pop	{r4, r7, pc}
1000aa00:	1001c0bc 	.word	0x1001c0bc
1000aa04:	1001c0c4 	.word	0x1001c0c4
1000aa08:	1001516d 	.word	0x1001516d
1000aa0c:	1001c164 	.word	0x1001c164
1000aa10:	1001530d 	.word	0x1001530d

1000aa14 <sms_button_bt2_fn>:

void sms_button_bt2_fn(void)
{
1000aa14:	b580      	push	{r7, lr}
1000aa16:	af00      	add	r7, sp, #0
    /* Initialize MPU-9250 IMU */
    sms_imu_startup();
1000aa18:	4b2b      	ldr	r3, [pc, #172]	; (1000aac8 <sms_button_bt2_fn+0xb4>)
1000aa1a:	4798      	blx	r3
    
    /* Initialize MS58 pressure sensor */
    if(sms_pressure_ms58_init() != STATUS_OK) {
1000aa1c:	4b2b      	ldr	r3, [pc, #172]	; (1000aacc <sms_button_bt2_fn+0xb8>)
1000aa1e:	4798      	blx	r3
1000aa20:	1e03      	subs	r3, r0, #0
1000aa22:	d003      	beq.n	1000aa2c <sms_button_bt2_fn+0x18>
        //DBG_LOG_DEV("Error while initializing MS58 device");
        ms58_device.init_ok = false;
1000aa24:	4b2a      	ldr	r3, [pc, #168]	; (1000aad0 <sms_button_bt2_fn+0xbc>)
1000aa26:	2200      	movs	r2, #0
1000aa28:	701a      	strb	r2, [r3, #0]
1000aa2a:	e002      	b.n	1000aa32 <sms_button_bt2_fn+0x1e>
    }
    else {
        //DBG_LOG_DEV("[sms_button_bt2_fn]  ms58 device successfully initialized... working in %s mode", ((ms58_device.free_running_mode) ? "free running" : "dependant"));
        ms58_device.init_ok = true;
1000aa2c:	4b28      	ldr	r3, [pc, #160]	; (1000aad0 <sms_button_bt2_fn+0xbc>)
1000aa2e:	2201      	movs	r2, #1
1000aa30:	701a      	strb	r2, [r3, #0]
    }

    if(ms58_device.init_ok && mpu9250_device.init_ok) {
1000aa32:	4b27      	ldr	r3, [pc, #156]	; (1000aad0 <sms_button_bt2_fn+0xbc>)
1000aa34:	781b      	ldrb	r3, [r3, #0]
1000aa36:	2b00      	cmp	r3, #0
1000aa38:	d017      	beq.n	1000aa6a <sms_button_bt2_fn+0x56>
1000aa3a:	4b26      	ldr	r3, [pc, #152]	; (1000aad4 <sms_button_bt2_fn+0xc0>)
1000aa3c:	781b      	ldrb	r3, [r3, #0]
1000aa3e:	2b00      	cmp	r3, #0
1000aa40:	d013      	beq.n	1000aa6a <sms_button_bt2_fn+0x56>
        sms_working_mode = SMS_MODE_IMU_PRESSURE;
1000aa42:	4b25      	ldr	r3, [pc, #148]	; (1000aad8 <sms_button_bt2_fn+0xc4>)
1000aa44:	2206      	movs	r2, #6
1000aa46:	701a      	strb	r2, [r3, #0]
        //ms58_device.free_running_mode = false;
        sms_timer_aon_init(SMS_TIMER_AON_COUNT_10H);
1000aa48:	4b24      	ldr	r3, [pc, #144]	; (1000aadc <sms_button_bt2_fn+0xc8>)
1000aa4a:	0018      	movs	r0, r3
1000aa4c:	4b24      	ldr	r3, [pc, #144]	; (1000aae0 <sms_button_bt2_fn+0xcc>)
1000aa4e:	4798      	blx	r3
        sms_dualtimer_timer2.old_counter = (SMS_TIMER_AON_COUNT_10H -aon_sleep_timer_get_current_value());
1000aa50:	4b24      	ldr	r3, [pc, #144]	; (1000aae4 <sms_button_bt2_fn+0xd0>)
1000aa52:	4798      	blx	r3
1000aa54:	0002      	movs	r2, r0
1000aa56:	4b21      	ldr	r3, [pc, #132]	; (1000aadc <sms_button_bt2_fn+0xc8>)
1000aa58:	1a9a      	subs	r2, r3, r2
1000aa5a:	4b23      	ldr	r3, [pc, #140]	; (1000aae8 <sms_button_bt2_fn+0xd4>)
1000aa5c:	60da      	str	r2, [r3, #12]
        sms_dualtimer_timer2.old_counter = (sms_dualtimer_timer2.old_counter / SMS_TIMER_AON_COUNT_1MS);
1000aa5e:	4b22      	ldr	r3, [pc, #136]	; (1000aae8 <sms_button_bt2_fn+0xd4>)
1000aa60:	68db      	ldr	r3, [r3, #12]
1000aa62:	095a      	lsrs	r2, r3, #5
1000aa64:	4b20      	ldr	r3, [pc, #128]	; (1000aae8 <sms_button_bt2_fn+0xd4>)
1000aa66:	60da      	str	r2, [r3, #12]
1000aa68:	e027      	b.n	1000aaba <sms_button_bt2_fn+0xa6>
    }
    else if(ms58_device.init_ok && !mpu9250_device.init_ok) {
1000aa6a:	4b19      	ldr	r3, [pc, #100]	; (1000aad0 <sms_button_bt2_fn+0xbc>)
1000aa6c:	781b      	ldrb	r3, [r3, #0]
1000aa6e:	2b00      	cmp	r3, #0
1000aa70:	d011      	beq.n	1000aa96 <sms_button_bt2_fn+0x82>
1000aa72:	4b18      	ldr	r3, [pc, #96]	; (1000aad4 <sms_button_bt2_fn+0xc0>)
1000aa74:	781b      	ldrb	r3, [r3, #0]
1000aa76:	2201      	movs	r2, #1
1000aa78:	4053      	eors	r3, r2
1000aa7a:	b2db      	uxtb	r3, r3
1000aa7c:	2b00      	cmp	r3, #0
1000aa7e:	d00a      	beq.n	1000aa96 <sms_button_bt2_fn+0x82>
        sms_working_mode = SMS_MODE_PRESSURE_SOLO;
1000aa80:	4b15      	ldr	r3, [pc, #84]	; (1000aad8 <sms_button_bt2_fn+0xc4>)
1000aa82:	2203      	movs	r2, #3
1000aa84:	701a      	strb	r2, [r3, #0]
        //ms58_device.free_running_mode = true;
        sms_timer_aon_init(SMS_TIMER_AON_COUNT_100MS);
1000aa86:	4b19      	ldr	r3, [pc, #100]	; (1000aaec <sms_button_bt2_fn+0xd8>)
1000aa88:	0018      	movs	r0, r3
1000aa8a:	4b15      	ldr	r3, [pc, #84]	; (1000aae0 <sms_button_bt2_fn+0xcc>)
1000aa8c:	4798      	blx	r3
        sms_timer_aon_configure_callback(true);
1000aa8e:	2001      	movs	r0, #1
1000aa90:	4b17      	ldr	r3, [pc, #92]	; (1000aaf0 <sms_button_bt2_fn+0xdc>)
1000aa92:	4798      	blx	r3
1000aa94:	e011      	b.n	1000aaba <sms_button_bt2_fn+0xa6>
    }
    else if(!ms58_device.init_ok && mpu9250_device.init_ok) {
1000aa96:	4b0e      	ldr	r3, [pc, #56]	; (1000aad0 <sms_button_bt2_fn+0xbc>)
1000aa98:	781b      	ldrb	r3, [r3, #0]
1000aa9a:	2201      	movs	r2, #1
1000aa9c:	4053      	eors	r3, r2
1000aa9e:	b2db      	uxtb	r3, r3
1000aaa0:	2b00      	cmp	r3, #0
1000aaa2:	d007      	beq.n	1000aab4 <sms_button_bt2_fn+0xa0>
1000aaa4:	4b0b      	ldr	r3, [pc, #44]	; (1000aad4 <sms_button_bt2_fn+0xc0>)
1000aaa6:	781b      	ldrb	r3, [r3, #0]
1000aaa8:	2b00      	cmp	r3, #0
1000aaaa:	d003      	beq.n	1000aab4 <sms_button_bt2_fn+0xa0>
        sms_working_mode = SMS_MODE_IMU_SOLO;
1000aaac:	4b0a      	ldr	r3, [pc, #40]	; (1000aad8 <sms_button_bt2_fn+0xc4>)
1000aaae:	2202      	movs	r2, #2
1000aab0:	701a      	strb	r2, [r3, #0]
1000aab2:	e002      	b.n	1000aaba <sms_button_bt2_fn+0xa6>
    }
    else {
        sms_working_mode = SMS_MODE_NONE;
1000aab4:	4b08      	ldr	r3, [pc, #32]	; (1000aad8 <sms_button_bt2_fn+0xc4>)
1000aab6:	2200      	movs	r2, #0
1000aab8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable interrupt on button 2 again */
    gpio_enable_callback(SMS_BUTTON_2_PIN);
1000aaba:	2017      	movs	r0, #23
1000aabc:	4b0d      	ldr	r3, [pc, #52]	; (1000aaf4 <sms_button_bt2_fn+0xe0>)
1000aabe:	4798      	blx	r3
}
1000aac0:	46c0      	nop			; (mov r8, r8)
1000aac2:	46bd      	mov	sp, r7
1000aac4:	bd80      	pop	{r7, pc}
1000aac6:	46c0      	nop			; (mov r8, r8)
1000aac8:	1000af15 	.word	0x1000af15
1000aacc:	1000b5c5 	.word	0x1000b5c5
1000aad0:	1001c1c0 	.word	0x1001c1c0
1000aad4:	1001c194 	.word	0x1001c194
1000aad8:	1001c0c3 	.word	0x1001c0c3
1000aadc:	46500000 	.word	0x46500000
1000aae0:	1000be21 	.word	0x1000be21
1000aae4:	1000c53d 	.word	0x1000c53d
1000aae8:	1001c0ac 	.word	0x1001c0ac
1000aaec:	00000ccc 	.word	0x00000ccc
1000aaf0:	1000be5d 	.word	0x1000be5d
1000aaf4:	1000d3d5 	.word	0x1000d3d5

1000aaf8 <sms_button_service_init>:

void sms_button_service_init(gatt_service_handler_t *sms_button_serv, uint8_t *sms_button_value)
{
1000aaf8:	b580      	push	{r7, lr}
1000aafa:	b082      	sub	sp, #8
1000aafc:	af00      	add	r7, sp, #0
1000aafe:	6078      	str	r0, [r7, #4]
1000ab00:	6039      	str	r1, [r7, #0]
    //SMS button service characteristic
    sms_button_serv->serv_handle = 0;
1000ab02:	687b      	ldr	r3, [r7, #4]
1000ab04:	2200      	movs	r2, #0
1000ab06:	825a      	strh	r2, [r3, #18]
    sms_button_serv->serv_uuid.type = AT_BLE_UUID_128;
1000ab08:	687b      	ldr	r3, [r7, #4]
1000ab0a:	2202      	movs	r2, #2
1000ab0c:	701a      	strb	r2, [r3, #0]
    sms_button_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000ab0e:	687b      	ldr	r3, [r7, #4]
1000ab10:	2200      	movs	r2, #0
1000ab12:	705a      	strb	r2, [r3, #1]
    sms_button_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000ab14:	687b      	ldr	r3, [r7, #4]
1000ab16:	2200      	movs	r2, #0
1000ab18:	709a      	strb	r2, [r3, #2]
    sms_button_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000ab1a:	687b      	ldr	r3, [r7, #4]
1000ab1c:	2257      	movs	r2, #87	; 0x57
1000ab1e:	70da      	strb	r2, [r3, #3]
    sms_button_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000ab20:	687b      	ldr	r3, [r7, #4]
1000ab22:	221c      	movs	r2, #28
1000ab24:	711a      	strb	r2, [r3, #4]
    sms_button_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
1000ab26:	687b      	ldr	r3, [r7, #4]
1000ab28:	2200      	movs	r2, #0
1000ab2a:	715a      	strb	r2, [r3, #5]
    sms_button_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000ab2c:	687b      	ldr	r3, [r7, #4]
1000ab2e:	2200      	movs	r2, #0
1000ab30:	719a      	strb	r2, [r3, #6]
    sms_button_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000ab32:	687b      	ldr	r3, [r7, #4]
1000ab34:	22be      	movs	r2, #190	; 0xbe
1000ab36:	71da      	strb	r2, [r3, #7]
    sms_button_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000ab38:	687b      	ldr	r3, [r7, #4]
1000ab3a:	225a      	movs	r2, #90	; 0x5a
1000ab3c:	721a      	strb	r2, [r3, #8]
    sms_button_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
1000ab3e:	687b      	ldr	r3, [r7, #4]
1000ab40:	2200      	movs	r2, #0
1000ab42:	725a      	strb	r2, [r3, #9]
    sms_button_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
1000ab44:	687b      	ldr	r3, [r7, #4]
1000ab46:	2200      	movs	r2, #0
1000ab48:	729a      	strb	r2, [r3, #10]
    sms_button_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000ab4a:	687b      	ldr	r3, [r7, #4]
1000ab4c:	2230      	movs	r2, #48	; 0x30
1000ab4e:	72da      	strb	r2, [r3, #11]
    sms_button_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000ab50:	687b      	ldr	r3, [r7, #4]
1000ab52:	2250      	movs	r2, #80	; 0x50
1000ab54:	731a      	strb	r2, [r3, #12]
    sms_button_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
1000ab56:	687b      	ldr	r3, [r7, #4]
1000ab58:	2200      	movs	r2, #0
1000ab5a:	735a      	strb	r2, [r3, #13]
    sms_button_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
1000ab5c:	687b      	ldr	r3, [r7, #4]
1000ab5e:	2200      	movs	r2, #0
1000ab60:	739a      	strb	r2, [r3, #14]
    sms_button_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000ab62:	687b      	ldr	r3, [r7, #4]
1000ab64:	22bb      	movs	r2, #187	; 0xbb
1000ab66:	73da      	strb	r2, [r3, #15]
    sms_button_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
1000ab68:	687b      	ldr	r3, [r7, #4]
1000ab6a:	22bb      	movs	r2, #187	; 0xbb
1000ab6c:	741a      	strb	r2, [r3, #16]
    
    sms_button_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000ab6e:	687b      	ldr	r3, [r7, #4]
1000ab70:	2212      	movs	r2, #18
1000ab72:	851a      	strh	r2, [r3, #40]	; 0x28
    sms_button_serv->serv_chars.init_value = sms_button_value;             /* value */
1000ab74:	687b      	ldr	r3, [r7, #4]
1000ab76:	683a      	ldr	r2, [r7, #0]
1000ab78:	62da      	str	r2, [r3, #44]	; 0x2c
    sms_button_serv->serv_chars.value_init_len = sizeof(uint8_t);
1000ab7a:	687b      	ldr	r3, [r7, #4]
1000ab7c:	2201      	movs	r2, #1
1000ab7e:	861a      	strh	r2, [r3, #48]	; 0x30
    sms_button_serv->serv_chars.value_max_len = sizeof(uint8_t);
1000ab80:	687b      	ldr	r3, [r7, #4]
1000ab82:	2201      	movs	r2, #1
1000ab84:	865a      	strh	r2, [r3, #50]	; 0x32
    sms_button_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
1000ab86:	687b      	ldr	r3, [r7, #4]
1000ab88:	2234      	movs	r2, #52	; 0x34
1000ab8a:	2111      	movs	r1, #17
1000ab8c:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000ab8e:	687b      	ldr	r3, [r7, #4]
1000ab90:	2200      	movs	r2, #0
1000ab92:	639a      	str	r2, [r3, #56]	; 0x38
    sms_button_serv->serv_chars.user_desc_len = 0;
1000ab94:	687b      	ldr	r3, [r7, #4]
1000ab96:	2200      	movs	r2, #0
1000ab98:	879a      	strh	r2, [r3, #60]	; 0x3c
    sms_button_serv->serv_chars.user_desc_max_len = 0;
1000ab9a:	687b      	ldr	r3, [r7, #4]
1000ab9c:	2200      	movs	r2, #0
1000ab9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    sms_button_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000aba0:	687b      	ldr	r3, [r7, #4]
1000aba2:	2244      	movs	r2, #68	; 0x44
1000aba4:	2100      	movs	r1, #0
1000aba6:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000aba8:	687b      	ldr	r3, [r7, #4]
1000abaa:	2245      	movs	r2, #69	; 0x45
1000abac:	2100      	movs	r1, #0
1000abae:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000abb0:	687b      	ldr	r3, [r7, #4]
1000abb2:	2246      	movs	r2, #70	; 0x46
1000abb4:	2100      	movs	r1, #0
1000abb6:	5499      	strb	r1, [r3, r2]
    sms_button_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
1000abb8:	687b      	ldr	r3, [r7, #4]
1000abba:	2248      	movs	r2, #72	; 0x48
1000abbc:	2100      	movs	r1, #0
1000abbe:	5299      	strh	r1, [r3, r2]
    sms_button_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000abc0:	687b      	ldr	r3, [r7, #4]
1000abc2:	224a      	movs	r2, #74	; 0x4a
1000abc4:	2100      	movs	r1, #0
1000abc6:	5299      	strh	r1, [r3, r2]
    sms_button_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
1000abc8:	687b      	ldr	r3, [r7, #4]
1000abca:	224c      	movs	r2, #76	; 0x4c
1000abcc:	2100      	movs	r1, #0
1000abce:	5299      	strh	r1, [r3, r2]
    //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
    //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
    //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
    //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    
    sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */
1000abd0:	687b      	ldr	r3, [r7, #4]
1000abd2:	2200      	movs	r2, #0
1000abd4:	641a      	str	r2, [r3, #64]	; 0x40
    //DBG_LOG("[sms_button_service_init]\n\r  setting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_button_serv->serv_uuid.uuid,
    //sms_button_serv->serv_handle,
    //sms_button_serv->serv_chars.uuid.uuid[1], sms_button_serv->serv_chars.uuid.uuid[0],
    //sms_button_serv->serv_chars.value_init_len);
}
1000abd6:	46c0      	nop			; (mov r8, r8)
1000abd8:	46bd      	mov	sp, r7
1000abda:	b002      	add	sp, #8
1000abdc:	bd80      	pop	{r7, pc}
1000abde:	46c0      	nop			; (mov r8, r8)

1000abe0 <sms_button_primary_service_define>:

at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
{
1000abe0:	b590      	push	{r4, r7, lr}
1000abe2:	b085      	sub	sp, #20
1000abe4:	af02      	add	r7, sp, #8
1000abe6:	6078      	str	r0, [r7, #4]
    //DBG_LOG("[sms_button_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_service->serv_uuid.uuid,
    //sms_service->serv_handle,
    //sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
    //sms_service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
1000abe8:	6878      	ldr	r0, [r7, #4]
1000abea:	687b      	ldr	r3, [r7, #4]
1000abec:	3312      	adds	r3, #18
1000abee:	0019      	movs	r1, r3
1000abf0:	687b      	ldr	r3, [r7, #4]
1000abf2:	3314      	adds	r3, #20
1000abf4:	2201      	movs	r2, #1
1000abf6:	9201      	str	r2, [sp, #4]
1000abf8:	9300      	str	r3, [sp, #0]
1000abfa:	2300      	movs	r3, #0
1000abfc:	2200      	movs	r2, #0
1000abfe:	4c03      	ldr	r4, [pc, #12]	; (1000ac0c <sms_button_primary_service_define+0x2c>)
1000ac00:	47a0      	blx	r4
1000ac02:	0003      	movs	r3, r0
}
1000ac04:	0018      	movs	r0, r3
1000ac06:	46bd      	mov	sp, r7
1000ac08:	b003      	add	sp, #12
1000ac0a:	bd90      	pop	{r4, r7, pc}
1000ac0c:	10015139 	.word	0x10015139

1000ac10 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000ac10:	b580      	push	{r7, lr}
1000ac12:	b082      	sub	sp, #8
1000ac14:	af00      	add	r7, sp, #0
1000ac16:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000ac18:	46c0      	nop			; (mov r8, r8)
1000ac1a:	687b      	ldr	r3, [r7, #4]
1000ac1c:	2228      	movs	r2, #40	; 0x28
1000ac1e:	5c9b      	ldrb	r3, [r3, r2]
1000ac20:	07db      	lsls	r3, r3, #31
1000ac22:	0fdb      	lsrs	r3, r3, #31
1000ac24:	b2db      	uxtb	r3, r3
1000ac26:	2b00      	cmp	r3, #0
1000ac28:	d1f7      	bne.n	1000ac1a <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000ac2a:	46c0      	nop			; (mov r8, r8)
1000ac2c:	46bd      	mov	sp, r7
1000ac2e:	b002      	add	sp, #8
1000ac30:	bd80      	pop	{r7, pc}
1000ac32:	46c0      	nop			; (mov r8, r8)

1000ac34 <i2c_enable>:
 *
 * \param[in,out] module Pointer to the driver instance to enable
 *
 */
static inline void i2c_enable(I2C *const i2c_module)
{
1000ac34:	b580      	push	{r7, lr}
1000ac36:	b082      	sub	sp, #8
1000ac38:	af00      	add	r7, sp, #0
1000ac3a:	6078      	str	r0, [r7, #4]
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
1000ac3c:	687b      	ldr	r3, [r7, #4]
1000ac3e:	0018      	movs	r0, r3
1000ac40:	4b04      	ldr	r3, [pc, #16]	; (1000ac54 <i2c_enable+0x20>)
1000ac42:	4798      	blx	r3
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
1000ac44:	687b      	ldr	r3, [r7, #4]
1000ac46:	2201      	movs	r2, #1
1000ac48:	751a      	strb	r2, [r3, #20]
}
1000ac4a:	46c0      	nop			; (mov r8, r8)
1000ac4c:	46bd      	mov	sp, r7
1000ac4e:	b002      	add	sp, #8
1000ac50:	bd80      	pop	{r7, pc}
1000ac52:	46c0      	nop			; (mov r8, r8)
1000ac54:	1000ac11 	.word	0x1000ac11

1000ac58 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
1000ac58:	b580      	push	{r7, lr}
1000ac5a:	b082      	sub	sp, #8
1000ac5c:	af00      	add	r7, sp, #0
1000ac5e:	6078      	str	r0, [r7, #4]
1000ac60:	000a      	movs	r2, r1
1000ac62:	1cfb      	adds	r3, r7, #3
1000ac64:	701a      	strb	r2, [r3, #0]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
1000ac66:	687b      	ldr	r3, [r7, #4]
1000ac68:	7c5b      	ldrb	r3, [r3, #17]
1000ac6a:	b2db      	uxtb	r3, r3
1000ac6c:	b25a      	sxtb	r2, r3
1000ac6e:	1cfb      	adds	r3, r7, #3
1000ac70:	781b      	ldrb	r3, [r3, #0]
1000ac72:	2101      	movs	r1, #1
1000ac74:	4099      	lsls	r1, r3
1000ac76:	000b      	movs	r3, r1
1000ac78:	b25b      	sxtb	r3, r3
1000ac7a:	4313      	orrs	r3, r2
1000ac7c:	b25b      	sxtb	r3, r3
1000ac7e:	b2da      	uxtb	r2, r3
1000ac80:	687b      	ldr	r3, [r7, #4]
1000ac82:	745a      	strb	r2, [r3, #17]
}
1000ac84:	46c0      	nop			; (mov r8, r8)
1000ac86:	46bd      	mov	sp, r7
1000ac88:	b002      	add	sp, #8
1000ac8a:	bd80      	pop	{r7, pc}

1000ac8c <i2c_master_configure>:
*/

#include "app_include.h"

void i2c_master_configure(void)
{
1000ac8c:	b580      	push	{r7, lr}
1000ac8e:	b086      	sub	sp, #24
1000ac90:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[i2c_master_configure]  configuring I2C master...");
1000ac92:	4b2f      	ldr	r3, [pc, #188]	; (1000ad50 <i2c_master_configure+0xc4>)
1000ac94:	0018      	movs	r0, r3
1000ac96:	4b2f      	ldr	r3, [pc, #188]	; (1000ad54 <i2c_master_configure+0xc8>)
1000ac98:	4798      	blx	r3
1000ac9a:	4b2f      	ldr	r3, [pc, #188]	; (1000ad58 <i2c_master_configure+0xcc>)
1000ac9c:	0018      	movs	r0, r3
1000ac9e:	4b2f      	ldr	r3, [pc, #188]	; (1000ad5c <i2c_master_configure+0xd0>)
1000aca0:	4798      	blx	r3

    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aca2:	2010      	movs	r0, #16
1000aca4:	4b2e      	ldr	r3, [pc, #184]	; (1000ad60 <i2c_master_configure+0xd4>)
1000aca6:	4798      	blx	r3
1000aca8:	0003      	movs	r3, r0
1000acaa:	001a      	movs	r2, r3
1000acac:	4b2d      	ldr	r3, [pc, #180]	; (1000ad64 <i2c_master_configure+0xd8>)
1000acae:	605a      	str	r2, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000acb0:	2010      	movs	r0, #16
1000acb2:	4b2b      	ldr	r3, [pc, #172]	; (1000ad60 <i2c_master_configure+0xd4>)
1000acb4:	4798      	blx	r3
1000acb6:	0003      	movs	r3, r0
1000acb8:	001a      	movs	r2, r3
1000acba:	4b2b      	ldr	r3, [pc, #172]	; (1000ad68 <i2c_master_configure+0xdc>)
1000acbc:	605a      	str	r2, [r3, #4]
    for(uint8_t i = 0; i < I2C_DATA_LENGTH; i++) {
1000acbe:	2317      	movs	r3, #23
1000acc0:	18fb      	adds	r3, r7, r3
1000acc2:	2200      	movs	r2, #0
1000acc4:	701a      	strb	r2, [r3, #0]
1000acc6:	e016      	b.n	1000acf6 <i2c_master_configure+0x6a>
        i2c_wpacket.data[i] = 0;
1000acc8:	4b26      	ldr	r3, [pc, #152]	; (1000ad64 <i2c_master_configure+0xd8>)
1000acca:	685a      	ldr	r2, [r3, #4]
1000accc:	2317      	movs	r3, #23
1000acce:	18fb      	adds	r3, r7, r3
1000acd0:	781b      	ldrb	r3, [r3, #0]
1000acd2:	18d3      	adds	r3, r2, r3
1000acd4:	2200      	movs	r2, #0
1000acd6:	701a      	strb	r2, [r3, #0]
        i2c_rpacket.data[i] = 0;
1000acd8:	4b23      	ldr	r3, [pc, #140]	; (1000ad68 <i2c_master_configure+0xdc>)
1000acda:	685a      	ldr	r2, [r3, #4]
1000acdc:	2317      	movs	r3, #23
1000acde:	18fb      	adds	r3, r7, r3
1000ace0:	781b      	ldrb	r3, [r3, #0]
1000ace2:	18d3      	adds	r3, r2, r3
1000ace4:	2200      	movs	r2, #0
1000ace6:	701a      	strb	r2, [r3, #0]
{
    DBG_LOG_DEV("[i2c_master_configure]  configuring I2C master...");

    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
    for(uint8_t i = 0; i < I2C_DATA_LENGTH; i++) {
1000ace8:	2317      	movs	r3, #23
1000acea:	18fb      	adds	r3, r7, r3
1000acec:	781a      	ldrb	r2, [r3, #0]
1000acee:	2317      	movs	r3, #23
1000acf0:	18fb      	adds	r3, r7, r3
1000acf2:	3201      	adds	r2, #1
1000acf4:	701a      	strb	r2, [r3, #0]
1000acf6:	2317      	movs	r3, #23
1000acf8:	18fb      	adds	r3, r7, r3
1000acfa:	781b      	ldrb	r3, [r3, #0]
1000acfc:	2b0f      	cmp	r3, #15
1000acfe:	d9e3      	bls.n	1000acc8 <i2c_master_configure+0x3c>
        i2c_wpacket.data[i] = 0;
        i2c_rpacket.data[i] = 0;
    }

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000ad00:	003b      	movs	r3, r7
1000ad02:	0018      	movs	r0, r3
1000ad04:	4b19      	ldr	r3, [pc, #100]	; (1000ad6c <i2c_master_configure+0xe0>)
1000ad06:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_MASTER_MPU9250_CLK_SRC;
1000ad08:	003b      	movs	r3, r7
1000ad0a:	2203      	movs	r2, #3
1000ad0c:	701a      	strb	r2, [r3, #0]
    config_i2c_master.clock_divider = I2C_MASTER_MPU9250_CLK_DIV;
1000ad0e:	003b      	movs	r3, r7
1000ad10:	2208      	movs	r2, #8
1000ad12:	805a      	strh	r2, [r3, #2]
    config_i2c_master.pin_number_pad0 = I2C_MASTER_MPU9250_PIN_SDA;
1000ad14:	003b      	movs	r3, r7
1000ad16:	2208      	movs	r2, #8
1000ad18:	605a      	str	r2, [r3, #4]
    config_i2c_master.pin_number_pad1 = I2C_MASTER_MPU9250_PIN_SCL;
1000ad1a:	003b      	movs	r3, r7
1000ad1c:	2209      	movs	r2, #9
1000ad1e:	60da      	str	r2, [r3, #12]
    config_i2c_master.pinmux_sel_pad0 = I2C_MASTER_MPU9250_MUX_SDA;
1000ad20:	003b      	movs	r3, r7
1000ad22:	2202      	movs	r2, #2
1000ad24:	609a      	str	r2, [r3, #8]
    config_i2c_master.pinmux_sel_pad1 = I2C_MASTER_MPU9250_MUX_SCL;
1000ad26:	003b      	movs	r3, r7
1000ad28:	2202      	movs	r2, #2
1000ad2a:	611a      	str	r2, [r3, #16]
    while(i2c_master_init(&i2c_master_mpu9250_instance,I2C_MASTER_MPU9250_PORT, &config_i2c_master) != STATUS_OK);
1000ad2c:	46c0      	nop			; (mov r8, r8)
1000ad2e:	003a      	movs	r2, r7
1000ad30:	490f      	ldr	r1, [pc, #60]	; (1000ad70 <i2c_master_configure+0xe4>)
1000ad32:	4b10      	ldr	r3, [pc, #64]	; (1000ad74 <i2c_master_configure+0xe8>)
1000ad34:	0018      	movs	r0, r3
1000ad36:	4b10      	ldr	r3, [pc, #64]	; (1000ad78 <i2c_master_configure+0xec>)
1000ad38:	4798      	blx	r3
1000ad3a:	1e03      	subs	r3, r0, #0
1000ad3c:	d1f7      	bne.n	1000ad2e <i2c_master_configure+0xa2>

    i2c_enable(i2c_master_mpu9250_instance.hw);
1000ad3e:	4b0d      	ldr	r3, [pc, #52]	; (1000ad74 <i2c_master_configure+0xe8>)
1000ad40:	681b      	ldr	r3, [r3, #0]
1000ad42:	0018      	movs	r0, r3
1000ad44:	4b0d      	ldr	r3, [pc, #52]	; (1000ad7c <i2c_master_configure+0xf0>)
1000ad46:	4798      	blx	r3
}
1000ad48:	46c0      	nop			; (mov r8, r8)
1000ad4a:	46bd      	mov	sp, r7
1000ad4c:	b006      	add	sp, #24
1000ad4e:	bd80      	pop	{r7, pc}
1000ad50:	1001a5e4 	.word	0x1001a5e4
1000ad54:	10019095 	.word	0x10019095
1000ad58:	1001a5e8 	.word	0x1001a5e8
1000ad5c:	10018f75 	.word	0x10018f75
1000ad60:	10018de9 	.word	0x10018de9
1000ad64:	1001c218 	.word	0x1001c218
1000ad68:	1001c1e8 	.word	0x1001c1e8
1000ad6c:	1000d825 	.word	0x1000d825
1000ad70:	40003000 	.word	0x40003000
1000ad74:	1001c2bc 	.word	0x1001c2bc
1000ad78:	1000d8b5 	.word	0x1000d8b5
1000ad7c:	1000ac35 	.word	0x1000ac35

1000ad80 <i2c_master_write_callback>:

void i2c_master_write_callback(void)
{
1000ad80:	b580      	push	{r7, lr}
1000ad82:	af00      	add	r7, sp, #0
    i2c_write_done = true;
1000ad84:	4b02      	ldr	r3, [pc, #8]	; (1000ad90 <i2c_master_write_callback+0x10>)
1000ad86:	2201      	movs	r2, #1
1000ad88:	701a      	strb	r2, [r3, #0]
}
1000ad8a:	46c0      	nop			; (mov r8, r8)
1000ad8c:	46bd      	mov	sp, r7
1000ad8e:	bd80      	pop	{r7, pc}
1000ad90:	1001c0aa 	.word	0x1001c0aa

1000ad94 <i2c_master_read_callback>:

void i2c_master_read_callback(void)
{
1000ad94:	b580      	push	{r7, lr}
1000ad96:	af00      	add	r7, sp, #0
    i2c_read_done = true;
1000ad98:	4b02      	ldr	r3, [pc, #8]	; (1000ada4 <i2c_master_read_callback+0x10>)
1000ad9a:	2201      	movs	r2, #1
1000ad9c:	701a      	strb	r2, [r3, #0]
}
1000ad9e:	46c0      	nop			; (mov r8, r8)
1000ada0:	46bd      	mov	sp, r7
1000ada2:	bd80      	pop	{r7, pc}
1000ada4:	1001c166 	.word	0x1001c166

1000ada8 <i2c_master_configure_callbacks>:

void i2c_master_configure_callbacks(void)
{
1000ada8:	b580      	push	{r7, lr}
1000adaa:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[i2c_master_configure_callbacks]  configuring i2c callbacks...");
1000adac:	4b13      	ldr	r3, [pc, #76]	; (1000adfc <i2c_master_configure_callbacks+0x54>)
1000adae:	0018      	movs	r0, r3
1000adb0:	4b13      	ldr	r3, [pc, #76]	; (1000ae00 <i2c_master_configure_callbacks+0x58>)
1000adb2:	4798      	blx	r3
1000adb4:	4b13      	ldr	r3, [pc, #76]	; (1000ae04 <i2c_master_configure_callbacks+0x5c>)
1000adb6:	0018      	movs	r0, r3
1000adb8:	4b13      	ldr	r3, [pc, #76]	; (1000ae08 <i2c_master_configure_callbacks+0x60>)
1000adba:	4798      	blx	r3
    i2c_write_done = false;
1000adbc:	4b13      	ldr	r3, [pc, #76]	; (1000ae0c <i2c_master_configure_callbacks+0x64>)
1000adbe:	2200      	movs	r2, #0
1000adc0:	701a      	strb	r2, [r3, #0]
    i2c_read_done = false;
1000adc2:	4b13      	ldr	r3, [pc, #76]	; (1000ae10 <i2c_master_configure_callbacks+0x68>)
1000adc4:	2200      	movs	r2, #0
1000adc6:	701a      	strb	r2, [r3, #0]

    i2c_master_register_callback(&i2c_master_mpu9250_instance, i2c_master_write_callback, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
1000adc8:	4912      	ldr	r1, [pc, #72]	; (1000ae14 <i2c_master_configure_callbacks+0x6c>)
1000adca:	4b13      	ldr	r3, [pc, #76]	; (1000ae18 <i2c_master_configure_callbacks+0x70>)
1000adcc:	2200      	movs	r2, #0
1000adce:	0018      	movs	r0, r3
1000add0:	4b12      	ldr	r3, [pc, #72]	; (1000ae1c <i2c_master_configure_callbacks+0x74>)
1000add2:	4798      	blx	r3
    i2c_master_register_callback(&i2c_master_mpu9250_instance, i2c_master_read_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
1000add4:	4912      	ldr	r1, [pc, #72]	; (1000ae20 <i2c_master_configure_callbacks+0x78>)
1000add6:	4b10      	ldr	r3, [pc, #64]	; (1000ae18 <i2c_master_configure_callbacks+0x70>)
1000add8:	2201      	movs	r2, #1
1000adda:	0018      	movs	r0, r3
1000addc:	4b0f      	ldr	r3, [pc, #60]	; (1000ae1c <i2c_master_configure_callbacks+0x74>)
1000adde:	4798      	blx	r3

    i2c_master_enable_callback(&i2c_master_mpu9250_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
1000ade0:	4b0d      	ldr	r3, [pc, #52]	; (1000ae18 <i2c_master_configure_callbacks+0x70>)
1000ade2:	2100      	movs	r1, #0
1000ade4:	0018      	movs	r0, r3
1000ade6:	4b0f      	ldr	r3, [pc, #60]	; (1000ae24 <i2c_master_configure_callbacks+0x7c>)
1000ade8:	4798      	blx	r3
    i2c_master_enable_callback(&i2c_master_mpu9250_instance, I2C_MASTER_CALLBACK_READ_COMPLETE);
1000adea:	4b0b      	ldr	r3, [pc, #44]	; (1000ae18 <i2c_master_configure_callbacks+0x70>)
1000adec:	2101      	movs	r1, #1
1000adee:	0018      	movs	r0, r3
1000adf0:	4b0c      	ldr	r3, [pc, #48]	; (1000ae24 <i2c_master_configure_callbacks+0x7c>)
1000adf2:	4798      	blx	r3
}
1000adf4:	46c0      	nop			; (mov r8, r8)
1000adf6:	46bd      	mov	sp, r7
1000adf8:	bd80      	pop	{r7, pc}
1000adfa:	46c0      	nop			; (mov r8, r8)
1000adfc:	1001a5e4 	.word	0x1001a5e4
1000ae00:	10019095 	.word	0x10019095
1000ae04:	1001a61c 	.word	0x1001a61c
1000ae08:	10018f75 	.word	0x10018f75
1000ae0c:	1001c0aa 	.word	0x1001c0aa
1000ae10:	1001c166 	.word	0x1001c166
1000ae14:	1000ad81 	.word	0x1000ad81
1000ae18:	1001c2bc 	.word	0x1001c2bc
1000ae1c:	1000daf9 	.word	0x1000daf9
1000ae20:	1000ad95 	.word	0x1000ad95
1000ae24:	1000ac59 	.word	0x1000ac59

1000ae28 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000ae28:	b580      	push	{r7, lr}
1000ae2a:	b082      	sub	sp, #8
1000ae2c:	af00      	add	r7, sp, #0
1000ae2e:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000ae30:	46c0      	nop			; (mov r8, r8)
1000ae32:	687b      	ldr	r3, [r7, #4]
1000ae34:	2228      	movs	r2, #40	; 0x28
1000ae36:	5c9b      	ldrb	r3, [r3, r2]
1000ae38:	07db      	lsls	r3, r3, #31
1000ae3a:	0fdb      	lsrs	r3, r3, #31
1000ae3c:	b2db      	uxtb	r3, r3
1000ae3e:	2b00      	cmp	r3, #0
1000ae40:	d1f7      	bne.n	1000ae32 <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000ae42:	46c0      	nop			; (mov r8, r8)
1000ae44:	46bd      	mov	sp, r7
1000ae46:	b002      	add	sp, #8
1000ae48:	bd80      	pop	{r7, pc}
1000ae4a:	46c0      	nop			; (mov r8, r8)

1000ae4c <i2c_disable>:
 *
 * \param[in,out] i2c_module Pointer to the driver instance to disable
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
1000ae4c:	b580      	push	{r7, lr}
1000ae4e:	b082      	sub	sp, #8
1000ae50:	af00      	add	r7, sp, #0
1000ae52:	6078      	str	r0, [r7, #4]
	i2c_wait_for_idle(i2c_module);
1000ae54:	687b      	ldr	r3, [r7, #4]
1000ae56:	0018      	movs	r0, r3
1000ae58:	4b04      	ldr	r3, [pc, #16]	; (1000ae6c <i2c_disable+0x20>)
1000ae5a:	4798      	blx	r3
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000ae5c:	687b      	ldr	r3, [r7, #4]
1000ae5e:	2200      	movs	r2, #0
1000ae60:	751a      	strb	r2, [r3, #20]
}
1000ae62:	46c0      	nop			; (mov r8, r8)
1000ae64:	46bd      	mov	sp, r7
1000ae66:	b002      	add	sp, #8
1000ae68:	bd80      	pop	{r7, pc}
1000ae6a:	46c0      	nop			; (mov r8, r8)
1000ae6c:	1000ae29 	.word	0x1000ae29

1000ae70 <sms_imu_configure_gpio>:

/* Configure GPIO for IMU
* - set aon pin for IMU data ready interrupt
*/
void sms_imu_configure_gpio(void)
{
1000ae70:	b580      	push	{r7, lr}
1000ae72:	b082      	sub	sp, #8
1000ae74:	af00      	add	r7, sp, #0
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ae76:	1d3b      	adds	r3, r7, #4
1000ae78:	0018      	movs	r0, r3
1000ae7a:	4b10      	ldr	r3, [pc, #64]	; (1000aebc <sms_imu_configure_gpio+0x4c>)
1000ae7c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ae7e:	1d3b      	adds	r3, r7, #4
1000ae80:	2200      	movs	r2, #0
1000ae82:	701a      	strb	r2, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000ae84:	1d3b      	adds	r3, r7, #4
1000ae86:	2202      	movs	r2, #2
1000ae88:	705a      	strb	r2, [r3, #1]
    config_gpio_pin.aon_wakeup = true;
1000ae8a:	1d3b      	adds	r3, r7, #4
1000ae8c:	2201      	movs	r2, #1
1000ae8e:	70da      	strb	r2, [r3, #3]
    if(gpio_pin_set_config(SMS_IMU_INTERRUPT_PIN, &config_gpio_pin) != STATUS_OK) {
1000ae90:	1d3b      	adds	r3, r7, #4
1000ae92:	0019      	movs	r1, r3
1000ae94:	201d      	movs	r0, #29
1000ae96:	4b0a      	ldr	r3, [pc, #40]	; (1000aec0 <sms_imu_configure_gpio+0x50>)
1000ae98:	4798      	blx	r3
    else {
        //DBG_LOG_DEV("[sms_imu_configure]\n\r  IMU interrupt pin set up correctly");
    }

    /* Pin output to monitor interruption */
    gpio_get_config_defaults(&config_gpio_pin);
1000ae9a:	1d3b      	adds	r3, r7, #4
1000ae9c:	0018      	movs	r0, r3
1000ae9e:	4b07      	ldr	r3, [pc, #28]	; (1000aebc <sms_imu_configure_gpio+0x4c>)
1000aea0:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000aea2:	1d3b      	adds	r3, r7, #4
1000aea4:	2201      	movs	r2, #1
1000aea6:	701a      	strb	r2, [r3, #0]
    gpio_pin_set_config(PIN_LP_GPIO_5, &config_gpio_pin);
1000aea8:	1d3b      	adds	r3, r7, #4
1000aeaa:	0019      	movs	r1, r3
1000aeac:	2005      	movs	r0, #5
1000aeae:	4b04      	ldr	r3, [pc, #16]	; (1000aec0 <sms_imu_configure_gpio+0x50>)
1000aeb0:	4798      	blx	r3
}
1000aeb2:	46c0      	nop			; (mov r8, r8)
1000aeb4:	46bd      	mov	sp, r7
1000aeb6:	b002      	add	sp, #8
1000aeb8:	bd80      	pop	{r7, pc}
1000aeba:	46c0      	nop			; (mov r8, r8)
1000aebc:	1000ca81 	.word	0x1000ca81
1000aec0:	1000caa9 	.word	0x1000caa9

1000aec4 <sms_imu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_imu_register_callbacks(void)
{
1000aec4:	b580      	push	{r7, lr}
1000aec6:	af00      	add	r7, sp, #0
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_IMU_INTERRUPT_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
1000aec8:	4b04      	ldr	r3, [pc, #16]	; (1000aedc <sms_imu_register_callbacks+0x18>)
1000aeca:	2202      	movs	r2, #2
1000aecc:	0019      	movs	r1, r3
1000aece:	201d      	movs	r0, #29
1000aed0:	4b03      	ldr	r3, [pc, #12]	; (1000aee0 <sms_imu_register_callbacks+0x1c>)
1000aed2:	4798      	blx	r3
}
1000aed4:	46c0      	nop			; (mov r8, r8)
1000aed6:	46bd      	mov	sp, r7
1000aed8:	bd80      	pop	{r7, pc}
1000aeda:	46c0      	nop			; (mov r8, r8)
1000aedc:	1000aee5 	.word	0x1000aee5
1000aee0:	1000d0ed 	.word	0x1000d0ed

1000aee4 <sms_imu_interrupt_callback>:
    gpio_unregister_callback(SMS_IMU_INTERRUPT_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_imu_interrupt_callback(void)
{
1000aee4:	b5b0      	push	{r4, r5, r7, lr}
1000aee6:	af00      	add	r7, sp, #0
    //if(conn_status) {
    //gpio_pin_set_output_level(PIN_LP_GPIO_5, true);
    gpio_disable_callback(SMS_IMU_INTERRUPT_PIN);
1000aee8:	201d      	movs	r0, #29
1000aeea:	4b07      	ldr	r3, [pc, #28]	; (1000af08 <sms_imu_interrupt_callback+0x24>)
1000aeec:	4798      	blx	r3
    sms_plf_int_state.source = SMS_CB_IMU_DRDY;
1000aeee:	4b07      	ldr	r3, [pc, #28]	; (1000af0c <sms_imu_interrupt_callback+0x28>)
1000aef0:	2203      	movs	r2, #3
1000aef2:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_IMU_INTERRUPT_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000aef4:	2300      	movs	r3, #0
1000aef6:	2200      	movs	r2, #0
1000aef8:	2102      	movs	r1, #2
1000aefa:	201d      	movs	r0, #29
1000aefc:	4c04      	ldr	r4, [pc, #16]	; (1000af10 <sms_imu_interrupt_callback+0x2c>)
1000aefe:	47a0      	blx	r4
    //}
}
1000af00:	46c0      	nop			; (mov r8, r8)
1000af02:	46bd      	mov	sp, r7
1000af04:	bdb0      	pop	{r4, r5, r7, pc}
1000af06:	46c0      	nop			; (mov r8, r8)
1000af08:	1000d49d 	.word	0x1000d49d
1000af0c:	1001c0a8 	.word	0x1001c0a8
1000af10:	100133ad 	.word	0x100133ad

1000af14 <sms_imu_startup>:

void sms_imu_startup(void) {
1000af14:	b580      	push	{r7, lr}
1000af16:	af00      	add	r7, sp, #0
    /* Initialize & configure MPU-9250 IMU */
    mpu9250_device.comm_error = false;
1000af18:	4b10      	ldr	r3, [pc, #64]	; (1000af5c <sms_imu_startup+0x48>)
1000af1a:	2200      	movs	r2, #0
1000af1c:	705a      	strb	r2, [r3, #1]
    if(sms_imu_initialize() == 0) {
1000af1e:	4b10      	ldr	r3, [pc, #64]	; (1000af60 <sms_imu_startup+0x4c>)
1000af20:	4798      	blx	r3
1000af22:	1e03      	subs	r3, r0, #0
1000af24:	d112      	bne.n	1000af4c <sms_imu_startup+0x38>
        mpu9250_device.init_ok = true;
1000af26:	4b0d      	ldr	r3, [pc, #52]	; (1000af5c <sms_imu_startup+0x48>)
1000af28:	2201      	movs	r2, #1
1000af2a:	701a      	strb	r2, [r3, #0]
        if(sms_imu_configure() != 0) {
1000af2c:	4b0d      	ldr	r3, [pc, #52]	; (1000af64 <sms_imu_startup+0x50>)
1000af2e:	4798      	blx	r3
1000af30:	1e03      	subs	r3, r0, #0
1000af32:	d00f      	beq.n	1000af54 <sms_imu_startup+0x40>
            mpu9250_device.comm_error = true;
1000af34:	4b09      	ldr	r3, [pc, #36]	; (1000af5c <sms_imu_startup+0x48>)
1000af36:	2201      	movs	r2, #1
1000af38:	705a      	strb	r2, [r3, #1]
            DBG_LOG_DEV("[sms_imu_startup]  comm_error = true");
1000af3a:	4b0b      	ldr	r3, [pc, #44]	; (1000af68 <sms_imu_startup+0x54>)
1000af3c:	0018      	movs	r0, r3
1000af3e:	4b0b      	ldr	r3, [pc, #44]	; (1000af6c <sms_imu_startup+0x58>)
1000af40:	4798      	blx	r3
1000af42:	4b0b      	ldr	r3, [pc, #44]	; (1000af70 <sms_imu_startup+0x5c>)
1000af44:	0018      	movs	r0, r3
1000af46:	4b0b      	ldr	r3, [pc, #44]	; (1000af74 <sms_imu_startup+0x60>)
1000af48:	4798      	blx	r3
    }
    else {
        i2c_disable(&i2c_master_mpu9250_instance.hw);
        //DBG_LOG("[sms_imu_startup]  MPU-9250 initialization failed");
    }
}
1000af4a:	e003      	b.n	1000af54 <sms_imu_startup+0x40>
            mpu9250_device.comm_error = true;
            DBG_LOG_DEV("[sms_imu_startup]  comm_error = true");
        }
    }
    else {
        i2c_disable(&i2c_master_mpu9250_instance.hw);
1000af4c:	4b0a      	ldr	r3, [pc, #40]	; (1000af78 <sms_imu_startup+0x64>)
1000af4e:	0018      	movs	r0, r3
1000af50:	4b0a      	ldr	r3, [pc, #40]	; (1000af7c <sms_imu_startup+0x68>)
1000af52:	4798      	blx	r3
        //DBG_LOG("[sms_imu_startup]  MPU-9250 initialization failed");
    }
}
1000af54:	46c0      	nop			; (mov r8, r8)
1000af56:	46bd      	mov	sp, r7
1000af58:	bd80      	pop	{r7, pc}
1000af5a:	46c0      	nop			; (mov r8, r8)
1000af5c:	1001c194 	.word	0x1001c194
1000af60:	1000af81 	.word	0x1000af81
1000af64:	1000afcd 	.word	0x1000afcd
1000af68:	1001a668 	.word	0x1001a668
1000af6c:	10019095 	.word	0x10019095
1000af70:	1001a66c 	.word	0x1001a66c
1000af74:	10018f75 	.word	0x10018f75
1000af78:	1001c2bc 	.word	0x1001c2bc
1000af7c:	1000ae4d 	.word	0x1000ae4d

1000af80 <sms_imu_initialize>:

/* Initialize IMU... based on Invensense API */
int sms_imu_initialize(void)
{
1000af80:	b580      	push	{r7, lr}
1000af82:	b082      	sub	sp, #8
1000af84:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[sms_imu_initialize]\n\r  initializing IMU...");
1000af86:	4b0b      	ldr	r3, [pc, #44]	; (1000afb4 <sms_imu_initialize+0x34>)
1000af88:	0018      	movs	r0, r3
1000af8a:	4b0b      	ldr	r3, [pc, #44]	; (1000afb8 <sms_imu_initialize+0x38>)
1000af8c:	4798      	blx	r3
1000af8e:	4b0b      	ldr	r3, [pc, #44]	; (1000afbc <sms_imu_initialize+0x3c>)
1000af90:	0018      	movs	r0, r3
1000af92:	4b0b      	ldr	r3, [pc, #44]	; (1000afc0 <sms_imu_initialize+0x40>)
1000af94:	4798      	blx	r3
    
    /* Initialize MPU with default settings and register data ready interrupt */
    struct int_param_s int_param;
    int_param.cb = sms_imu_interrupt_callback;
1000af96:	003b      	movs	r3, r7
1000af98:	4a0a      	ldr	r2, [pc, #40]	; (1000afc4 <sms_imu_initialize+0x44>)
1000af9a:	601a      	str	r2, [r3, #0]
    int_param.pin = SMS_IMU_INTERRUPT_PIN;
1000af9c:	003b      	movs	r3, r7
1000af9e:	221d      	movs	r2, #29
1000afa0:	605a      	str	r2, [r3, #4]
    return mpu_init(&int_param);
1000afa2:	003b      	movs	r3, r7
1000afa4:	0018      	movs	r0, r3
1000afa6:	4b08      	ldr	r3, [pc, #32]	; (1000afc8 <sms_imu_initialize+0x48>)
1000afa8:	4798      	blx	r3
1000afaa:	0003      	movs	r3, r0
}
1000afac:	0018      	movs	r0, r3
1000afae:	46bd      	mov	sp, r7
1000afb0:	b002      	add	sp, #8
1000afb2:	bd80      	pop	{r7, pc}
1000afb4:	1001a668 	.word	0x1001a668
1000afb8:	10019095 	.word	0x10019095
1000afbc:	1001a694 	.word	0x1001a694
1000afc0:	10018f75 	.word	0x10018f75
1000afc4:	1000aee5 	.word	0x1000aee5
1000afc8:	10008481 	.word	0x10008481

1000afcc <sms_imu_configure>:
* - enable selected DMP features
* - start DMP
* - enable GPIO interrupt callback
*/
int sms_imu_configure(void)
{
1000afcc:	b580      	push	{r7, lr}
1000afce:	b082      	sub	sp, #8
1000afd0:	af00      	add	r7, sp, #0
    if(mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL) != 0) return -1;
1000afd2:	2078      	movs	r0, #120	; 0x78
1000afd4:	4b27      	ldr	r3, [pc, #156]	; (1000b074 <sms_imu_configure+0xa8>)
1000afd6:	4798      	blx	r3
1000afd8:	1e03      	subs	r3, r0, #0
1000afda:	d002      	beq.n	1000afe2 <sms_imu_configure+0x16>
1000afdc:	2301      	movs	r3, #1
1000afde:	425b      	negs	r3, r3
1000afe0:	e043      	b.n	1000b06a <sms_imu_configure+0x9e>
    if(mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL) != 0) return -1;
1000afe2:	2078      	movs	r0, #120	; 0x78
1000afe4:	4b24      	ldr	r3, [pc, #144]	; (1000b078 <sms_imu_configure+0xac>)
1000afe6:	4798      	blx	r3
1000afe8:	1e03      	subs	r3, r0, #0
1000afea:	d002      	beq.n	1000aff2 <sms_imu_configure+0x26>
1000afec:	2301      	movs	r3, #1
1000afee:	425b      	negs	r3, r3
1000aff0:	e03b      	b.n	1000b06a <sms_imu_configure+0x9e>
    if(mpu_set_sample_rate(4) != 0) return -1;
1000aff2:	2004      	movs	r0, #4
1000aff4:	4b21      	ldr	r3, [pc, #132]	; (1000b07c <sms_imu_configure+0xb0>)
1000aff6:	4798      	blx	r3
1000aff8:	1e03      	subs	r3, r0, #0
1000affa:	d002      	beq.n	1000b002 <sms_imu_configure+0x36>
1000affc:	2301      	movs	r3, #1
1000affe:	425b      	negs	r3, r3
1000b000:	e033      	b.n	1000b06a <sms_imu_configure+0x9e>

    uint16_t gyro_rate, gyro_fsr;
    uint8_t accel_fsr;
    if(mpu_get_sample_rate(&gyro_rate) != 0) return -1;
1000b002:	1dbb      	adds	r3, r7, #6
1000b004:	0018      	movs	r0, r3
1000b006:	4b1e      	ldr	r3, [pc, #120]	; (1000b080 <sms_imu_configure+0xb4>)
1000b008:	4798      	blx	r3
1000b00a:	1e03      	subs	r3, r0, #0
1000b00c:	d002      	beq.n	1000b014 <sms_imu_configure+0x48>
1000b00e:	2301      	movs	r3, #1
1000b010:	425b      	negs	r3, r3
1000b012:	e02a      	b.n	1000b06a <sms_imu_configure+0x9e>
    if(mpu_get_gyro_fsr(&gyro_fsr) != 0) return -1;
1000b014:	1d3b      	adds	r3, r7, #4
1000b016:	0018      	movs	r0, r3
1000b018:	4b1a      	ldr	r3, [pc, #104]	; (1000b084 <sms_imu_configure+0xb8>)
1000b01a:	4798      	blx	r3
1000b01c:	1e03      	subs	r3, r0, #0
1000b01e:	d002      	beq.n	1000b026 <sms_imu_configure+0x5a>
1000b020:	2301      	movs	r3, #1
1000b022:	425b      	negs	r3, r3
1000b024:	e021      	b.n	1000b06a <sms_imu_configure+0x9e>
    if(mpu_get_accel_fsr(&accel_fsr) != 0) return -1;
1000b026:	1cfb      	adds	r3, r7, #3
1000b028:	0018      	movs	r0, r3
1000b02a:	4b17      	ldr	r3, [pc, #92]	; (1000b088 <sms_imu_configure+0xbc>)
1000b02c:	4798      	blx	r3
1000b02e:	1e03      	subs	r3, r0, #0
1000b030:	d002      	beq.n	1000b038 <sms_imu_configure+0x6c>
1000b032:	2301      	movs	r3, #1
1000b034:	425b      	negs	r3, r3
1000b036:	e018      	b.n	1000b06a <sms_imu_configure+0x9e>
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);

    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
1000b038:	4b14      	ldr	r3, [pc, #80]	; (1000b08c <sms_imu_configure+0xc0>)
1000b03a:	22c0      	movs	r2, #192	; 0xc0
1000b03c:	839a      	strh	r2, [r3, #28]
    if(dmp_enable_feature(hal.dmp_features) != 0) {
1000b03e:	4b13      	ldr	r3, [pc, #76]	; (1000b08c <sms_imu_configure+0xc0>)
1000b040:	8b9b      	ldrh	r3, [r3, #28]
1000b042:	0018      	movs	r0, r3
1000b044:	4b12      	ldr	r3, [pc, #72]	; (1000b090 <sms_imu_configure+0xc4>)
1000b046:	4798      	blx	r3
1000b048:	1e03      	subs	r3, r0, #0
1000b04a:	d00a      	beq.n	1000b062 <sms_imu_configure+0x96>
        DBG_LOG_DEV("[sms_imu_configure]  error while enabling dmp features");
1000b04c:	4b11      	ldr	r3, [pc, #68]	; (1000b094 <sms_imu_configure+0xc8>)
1000b04e:	0018      	movs	r0, r3
1000b050:	4b11      	ldr	r3, [pc, #68]	; (1000b098 <sms_imu_configure+0xcc>)
1000b052:	4798      	blx	r3
1000b054:	4b11      	ldr	r3, [pc, #68]	; (1000b09c <sms_imu_configure+0xd0>)
1000b056:	0018      	movs	r0, r3
1000b058:	4b11      	ldr	r3, [pc, #68]	; (1000b0a0 <sms_imu_configure+0xd4>)
1000b05a:	4798      	blx	r3
        return -1;
1000b05c:	2301      	movs	r3, #1
1000b05e:	425b      	negs	r3, r3
1000b060:	e003      	b.n	1000b06a <sms_imu_configure+0x9e>
    }        
    gpio_enable_callback(SMS_IMU_INTERRUPT_PIN);
1000b062:	201d      	movs	r0, #29
1000b064:	4b0f      	ldr	r3, [pc, #60]	; (1000b0a4 <sms_imu_configure+0xd8>)
1000b066:	4798      	blx	r3
    //if(mpu_set_dmp_state(1) != 0) {
        //DBG_LOG_DEV("[sms_imu_configure]  error while setting dmp state");
        //return -1;
    //}        

    return 0;
1000b068:	2300      	movs	r3, #0
}
1000b06a:	0018      	movs	r0, r3
1000b06c:	46bd      	mov	sp, r7
1000b06e:	b002      	add	sp, #8
1000b070:	bd80      	pop	{r7, pc}
1000b072:	46c0      	nop			; (mov r8, r8)
1000b074:	10008fb5 	.word	0x10008fb5
1000b078:	10008ef5 	.word	0x10008ef5
1000b07c:	10008d39 	.word	0x10008d39
1000b080:	10008d09 	.word	0x10008d09
1000b084:	100089ed 	.word	0x100089ed
1000b088:	10008b19 	.word	0x10008b19
1000b08c:	1001b924 	.word	0x1001b924
1000b090:	10009f85 	.word	0x10009f85
1000b094:	1001a668 	.word	0x1001a668
1000b098:	10019095 	.word	0x10019095
1000b09c:	1001a6c0 	.word	0x1001a6c0
1000b0a0:	10018f75 	.word	0x10018f75
1000b0a4:	1000d3d5 	.word	0x1000d3d5

1000b0a8 <sms_imu_poll_data>:

/* Extract available IMU data */
int sms_imu_poll_data(void)
{
1000b0a8:	b590      	push	{r4, r7, lr}
1000b0aa:	b091      	sub	sp, #68	; 0x44
1000b0ac:	af02      	add	r7, sp, #8
    //DBG_LOG_DEV("[sms_imu_receive_data]\n\r  reading...");
    st.chip_cfg.dmp_on = 1;
1000b0ae:	4b78      	ldr	r3, [pc, #480]	; (1000b290 <sms_imu_poll_data+0x1e8>)
1000b0b0:	2224      	movs	r2, #36	; 0x24
1000b0b2:	2101      	movs	r1, #1
1000b0b4:	5499      	strb	r1, [r3, r2]
    short gyro[3],accel_short[3], sensors;
    unsigned char more;
    long accel[3], quaternion[4];
    unsigned long *timestamp;
    int res;
    if((res = dmp_read_fifo(gyro, accel_short, quaternion, &timestamp, &sensors, &more)) != 0) {
1000b0b6:	003c      	movs	r4, r7
1000b0b8:	1d3a      	adds	r2, r7, #4
1000b0ba:	2324      	movs	r3, #36	; 0x24
1000b0bc:	18f9      	adds	r1, r7, r3
1000b0be:	232c      	movs	r3, #44	; 0x2c
1000b0c0:	18f8      	adds	r0, r7, r3
1000b0c2:	2321      	movs	r3, #33	; 0x21
1000b0c4:	18fb      	adds	r3, r7, r3
1000b0c6:	9301      	str	r3, [sp, #4]
1000b0c8:	2322      	movs	r3, #34	; 0x22
1000b0ca:	18fb      	adds	r3, r7, r3
1000b0cc:	9300      	str	r3, [sp, #0]
1000b0ce:	0023      	movs	r3, r4
1000b0d0:	4c70      	ldr	r4, [pc, #448]	; (1000b294 <sms_imu_poll_data+0x1ec>)
1000b0d2:	47a0      	blx	r4
1000b0d4:	0003      	movs	r3, r0
1000b0d6:	637b      	str	r3, [r7, #52]	; 0x34
1000b0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b0da:	2b00      	cmp	r3, #0
1000b0dc:	d031      	beq.n	1000b142 <sms_imu_poll_data+0x9a>
        DBG_LOG_DEV("ERROR! returned: %d", res);
1000b0de:	4b6e      	ldr	r3, [pc, #440]	; (1000b298 <sms_imu_poll_data+0x1f0>)
1000b0e0:	0018      	movs	r0, r3
1000b0e2:	4b6e      	ldr	r3, [pc, #440]	; (1000b29c <sms_imu_poll_data+0x1f4>)
1000b0e4:	4798      	blx	r3
1000b0e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b0e8:	4b6d      	ldr	r3, [pc, #436]	; (1000b2a0 <sms_imu_poll_data+0x1f8>)
1000b0ea:	0011      	movs	r1, r2
1000b0ec:	0018      	movs	r0, r3
1000b0ee:	4b6d      	ldr	r3, [pc, #436]	; (1000b2a4 <sms_imu_poll_data+0x1fc>)
1000b0f0:	4798      	blx	r3
        /* -1 returned in case of a.o. i2c communication error */
        if(res == -1) {
1000b0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b0f4:	3301      	adds	r3, #1
1000b0f6:	d10a      	bne.n	1000b10e <sms_imu_poll_data+0x66>
            mpu9250_device.comm_error = true;
1000b0f8:	4b6b      	ldr	r3, [pc, #428]	; (1000b2a8 <sms_imu_poll_data+0x200>)
1000b0fa:	2201      	movs	r2, #1
1000b0fc:	705a      	strb	r2, [r3, #1]
            DBG_LOG_DEV("[sms_imu_poll_data]  comm_error = true");
1000b0fe:	4b66      	ldr	r3, [pc, #408]	; (1000b298 <sms_imu_poll_data+0x1f0>)
1000b100:	0018      	movs	r0, r3
1000b102:	4b66      	ldr	r3, [pc, #408]	; (1000b29c <sms_imu_poll_data+0x1f4>)
1000b104:	4798      	blx	r3
1000b106:	4b69      	ldr	r3, [pc, #420]	; (1000b2ac <sms_imu_poll_data+0x204>)
1000b108:	0018      	movs	r0, r3
1000b10a:	4b66      	ldr	r3, [pc, #408]	; (1000b2a4 <sms_imu_poll_data+0x1fc>)
1000b10c:	4798      	blx	r3
        }
        /* -2 returned in case of fifo overflow */
        if(res == -2) {
1000b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000b110:	3302      	adds	r3, #2
1000b112:	d000      	beq.n	1000b116 <sms_imu_poll_data+0x6e>
1000b114:	e0b4      	b.n	1000b280 <sms_imu_poll_data+0x1d8>
            hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
1000b116:	4b66      	ldr	r3, [pc, #408]	; (1000b2b0 <sms_imu_poll_data+0x208>)
1000b118:	22c0      	movs	r2, #192	; 0xc0
1000b11a:	839a      	strh	r2, [r3, #28]
            if(dmp_enable_feature(hal.dmp_features) != 0) return -1;
1000b11c:	4b64      	ldr	r3, [pc, #400]	; (1000b2b0 <sms_imu_poll_data+0x208>)
1000b11e:	8b9b      	ldrh	r3, [r3, #28]
1000b120:	0018      	movs	r0, r3
1000b122:	4b64      	ldr	r3, [pc, #400]	; (1000b2b4 <sms_imu_poll_data+0x20c>)
1000b124:	4798      	blx	r3
1000b126:	1e03      	subs	r3, r0, #0
1000b128:	d002      	beq.n	1000b130 <sms_imu_poll_data+0x88>
1000b12a:	2301      	movs	r3, #1
1000b12c:	425b      	negs	r3, r3
1000b12e:	e0ab      	b.n	1000b288 <sms_imu_poll_data+0x1e0>
            if(mpu_set_dmp_state(1) != 0) return -1;
1000b130:	2001      	movs	r0, #1
1000b132:	4b61      	ldr	r3, [pc, #388]	; (1000b2b8 <sms_imu_poll_data+0x210>)
1000b134:	4798      	blx	r3
1000b136:	1e03      	subs	r3, r0, #0
1000b138:	d100      	bne.n	1000b13c <sms_imu_poll_data+0x94>
1000b13a:	e0a1      	b.n	1000b280 <sms_imu_poll_data+0x1d8>
1000b13c:	2301      	movs	r3, #1
1000b13e:	425b      	negs	r3, r3
1000b140:	e0a2      	b.n	1000b288 <sms_imu_poll_data+0x1e0>
        }
    }
    else {
        sms_imu_char_values[0] = (uint8_t)(accel_short[0] & 0xff);
1000b142:	2324      	movs	r3, #36	; 0x24
1000b144:	18fb      	adds	r3, r7, r3
1000b146:	2200      	movs	r2, #0
1000b148:	5e9b      	ldrsh	r3, [r3, r2]
1000b14a:	b2da      	uxtb	r2, r3
1000b14c:	4b5b      	ldr	r3, [pc, #364]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b14e:	701a      	strb	r2, [r3, #0]
        sms_imu_char_values[1] = (uint8_t)((accel_short[0] >> 8) & 0xff);
1000b150:	2324      	movs	r3, #36	; 0x24
1000b152:	18fb      	adds	r3, r7, r3
1000b154:	2200      	movs	r2, #0
1000b156:	5e9b      	ldrsh	r3, [r3, r2]
1000b158:	121b      	asrs	r3, r3, #8
1000b15a:	b21b      	sxth	r3, r3
1000b15c:	b2da      	uxtb	r2, r3
1000b15e:	4b57      	ldr	r3, [pc, #348]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b160:	705a      	strb	r2, [r3, #1]
        sms_imu_char_values[2] = (uint8_t)(accel_short[1] & 0xff);
1000b162:	2324      	movs	r3, #36	; 0x24
1000b164:	18fb      	adds	r3, r7, r3
1000b166:	2202      	movs	r2, #2
1000b168:	5e9b      	ldrsh	r3, [r3, r2]
1000b16a:	b2da      	uxtb	r2, r3
1000b16c:	4b53      	ldr	r3, [pc, #332]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b16e:	709a      	strb	r2, [r3, #2]
        sms_imu_char_values[3] = (uint8_t)((accel_short[1] >> 8) & 0xff);
1000b170:	2324      	movs	r3, #36	; 0x24
1000b172:	18fb      	adds	r3, r7, r3
1000b174:	2202      	movs	r2, #2
1000b176:	5e9b      	ldrsh	r3, [r3, r2]
1000b178:	121b      	asrs	r3, r3, #8
1000b17a:	b21b      	sxth	r3, r3
1000b17c:	b2da      	uxtb	r2, r3
1000b17e:	4b4f      	ldr	r3, [pc, #316]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b180:	70da      	strb	r2, [r3, #3]
        sms_imu_char_values[4] = (uint8_t)(accel_short[2] & 0xff);
1000b182:	2324      	movs	r3, #36	; 0x24
1000b184:	18fb      	adds	r3, r7, r3
1000b186:	2204      	movs	r2, #4
1000b188:	5e9b      	ldrsh	r3, [r3, r2]
1000b18a:	b2da      	uxtb	r2, r3
1000b18c:	4b4b      	ldr	r3, [pc, #300]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b18e:	711a      	strb	r2, [r3, #4]
        sms_imu_char_values[5] = (uint8_t)((accel_short[2] >> 8) & 0xff);
1000b190:	2324      	movs	r3, #36	; 0x24
1000b192:	18fb      	adds	r3, r7, r3
1000b194:	2204      	movs	r2, #4
1000b196:	5e9b      	ldrsh	r3, [r3, r2]
1000b198:	121b      	asrs	r3, r3, #8
1000b19a:	b21b      	sxth	r3, r3
1000b19c:	b2da      	uxtb	r2, r3
1000b19e:	4b47      	ldr	r3, [pc, #284]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b1a0:	715a      	strb	r2, [r3, #5]
        sms_imu_char_values[6] = (uint8_t)(gyro[0] & 0xff);
1000b1a2:	232c      	movs	r3, #44	; 0x2c
1000b1a4:	18fb      	adds	r3, r7, r3
1000b1a6:	2200      	movs	r2, #0
1000b1a8:	5e9b      	ldrsh	r3, [r3, r2]
1000b1aa:	b2da      	uxtb	r2, r3
1000b1ac:	4b43      	ldr	r3, [pc, #268]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b1ae:	719a      	strb	r2, [r3, #6]
        sms_imu_char_values[7] = (uint8_t)((gyro[0] >> 8) & 0xff);
1000b1b0:	232c      	movs	r3, #44	; 0x2c
1000b1b2:	18fb      	adds	r3, r7, r3
1000b1b4:	2200      	movs	r2, #0
1000b1b6:	5e9b      	ldrsh	r3, [r3, r2]
1000b1b8:	121b      	asrs	r3, r3, #8
1000b1ba:	b21b      	sxth	r3, r3
1000b1bc:	b2da      	uxtb	r2, r3
1000b1be:	4b3f      	ldr	r3, [pc, #252]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b1c0:	71da      	strb	r2, [r3, #7]
        sms_imu_char_values[8] = (uint8_t)(gyro[1] & 0xff);
1000b1c2:	232c      	movs	r3, #44	; 0x2c
1000b1c4:	18fb      	adds	r3, r7, r3
1000b1c6:	2202      	movs	r2, #2
1000b1c8:	5e9b      	ldrsh	r3, [r3, r2]
1000b1ca:	b2da      	uxtb	r2, r3
1000b1cc:	4b3b      	ldr	r3, [pc, #236]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b1ce:	721a      	strb	r2, [r3, #8]
        sms_imu_char_values[9] = (uint8_t)((gyro[1] >> 8) & 0xff);
1000b1d0:	232c      	movs	r3, #44	; 0x2c
1000b1d2:	18fb      	adds	r3, r7, r3
1000b1d4:	2202      	movs	r2, #2
1000b1d6:	5e9b      	ldrsh	r3, [r3, r2]
1000b1d8:	121b      	asrs	r3, r3, #8
1000b1da:	b21b      	sxth	r3, r3
1000b1dc:	b2da      	uxtb	r2, r3
1000b1de:	4b37      	ldr	r3, [pc, #220]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b1e0:	725a      	strb	r2, [r3, #9]
        sms_imu_char_values[10] = (uint8_t)(gyro[2] & 0xff);
1000b1e2:	232c      	movs	r3, #44	; 0x2c
1000b1e4:	18fb      	adds	r3, r7, r3
1000b1e6:	2204      	movs	r2, #4
1000b1e8:	5e9b      	ldrsh	r3, [r3, r2]
1000b1ea:	b2da      	uxtb	r2, r3
1000b1ec:	4b33      	ldr	r3, [pc, #204]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b1ee:	729a      	strb	r2, [r3, #10]
        sms_imu_char_values[11] = (uint8_t)((gyro[2] >> 8) & 0xff);
1000b1f0:	232c      	movs	r3, #44	; 0x2c
1000b1f2:	18fb      	adds	r3, r7, r3
1000b1f4:	2204      	movs	r2, #4
1000b1f6:	5e9b      	ldrsh	r3, [r3, r2]
1000b1f8:	121b      	asrs	r3, r3, #8
1000b1fa:	b21b      	sxth	r3, r3
1000b1fc:	b2da      	uxtb	r2, r3
1000b1fe:	4b2f      	ldr	r3, [pc, #188]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b200:	72da      	strb	r2, [r3, #11]
        //for(uint8_t i = 0; i < 12; i++) {
        //DBG_LOG_DEV("[sms_imu_receive_data]  value[%d]: 0x%02x", i, sms_imu_char_values[i]);
        //}
        at_ble_status_t status = at_ble_characteristic_value_set(sms_imu_service_handler.serv_chars.char_val_handle, &sms_imu_char_values, (12 * sizeof(uint8_t)));
1000b202:	4b2f      	ldr	r3, [pc, #188]	; (1000b2c0 <sms_imu_poll_data+0x218>)
1000b204:	8a9b      	ldrh	r3, [r3, #20]
1000b206:	2233      	movs	r2, #51	; 0x33
1000b208:	18bc      	adds	r4, r7, r2
1000b20a:	492c      	ldr	r1, [pc, #176]	; (1000b2bc <sms_imu_poll_data+0x214>)
1000b20c:	220c      	movs	r2, #12
1000b20e:	0018      	movs	r0, r3
1000b210:	4b2c      	ldr	r3, [pc, #176]	; (1000b2c4 <sms_imu_poll_data+0x21c>)
1000b212:	4798      	blx	r3
1000b214:	0003      	movs	r3, r0
1000b216:	7023      	strb	r3, [r4, #0]
        if(status != AT_BLE_SUCCESS) {
1000b218:	2333      	movs	r3, #51	; 0x33
1000b21a:	18fb      	adds	r3, r7, r3
1000b21c:	781b      	ldrb	r3, [r3, #0]
1000b21e:	2b00      	cmp	r3, #0
1000b220:	d00c      	beq.n	1000b23c <sms_imu_poll_data+0x194>
            DBG_LOG_DEV("[sms_imu_receive_data]  updating the characteristic failed, reason %d", status);
1000b222:	4b1d      	ldr	r3, [pc, #116]	; (1000b298 <sms_imu_poll_data+0x1f0>)
1000b224:	0018      	movs	r0, r3
1000b226:	4b1d      	ldr	r3, [pc, #116]	; (1000b29c <sms_imu_poll_data+0x1f4>)
1000b228:	4798      	blx	r3
1000b22a:	2333      	movs	r3, #51	; 0x33
1000b22c:	18fb      	adds	r3, r7, r3
1000b22e:	781a      	ldrb	r2, [r3, #0]
1000b230:	4b25      	ldr	r3, [pc, #148]	; (1000b2c8 <sms_imu_poll_data+0x220>)
1000b232:	0011      	movs	r1, r2
1000b234:	0018      	movs	r0, r3
1000b236:	4b1b      	ldr	r3, [pc, #108]	; (1000b2a4 <sms_imu_poll_data+0x1fc>)
1000b238:	4798      	blx	r3
1000b23a:	e021      	b.n	1000b280 <sms_imu_poll_data+0x1d8>
        }
        else {
            status = at_ble_notification_send(sms_connection_handle, sms_imu_service_handler.serv_chars.char_val_handle);
1000b23c:	4b23      	ldr	r3, [pc, #140]	; (1000b2cc <sms_imu_poll_data+0x224>)
1000b23e:	881a      	ldrh	r2, [r3, #0]
1000b240:	4b1f      	ldr	r3, [pc, #124]	; (1000b2c0 <sms_imu_poll_data+0x218>)
1000b242:	8a9b      	ldrh	r3, [r3, #20]
1000b244:	2133      	movs	r1, #51	; 0x33
1000b246:	187c      	adds	r4, r7, r1
1000b248:	0019      	movs	r1, r3
1000b24a:	0010      	movs	r0, r2
1000b24c:	4b20      	ldr	r3, [pc, #128]	; (1000b2d0 <sms_imu_poll_data+0x228>)
1000b24e:	4798      	blx	r3
1000b250:	0003      	movs	r3, r0
1000b252:	7023      	strb	r3, [r4, #0]
            if(status != AT_BLE_SUCCESS) {
1000b254:	2333      	movs	r3, #51	; 0x33
1000b256:	18fb      	adds	r3, r7, r3
1000b258:	781b      	ldrb	r3, [r3, #0]
1000b25a:	2b00      	cmp	r3, #0
1000b25c:	d008      	beq.n	1000b270 <sms_imu_poll_data+0x1c8>
                DBG_LOG_DEV("[sms_imu_receive_data]  sending notification failed");
1000b25e:	4b0e      	ldr	r3, [pc, #56]	; (1000b298 <sms_imu_poll_data+0x1f0>)
1000b260:	0018      	movs	r0, r3
1000b262:	4b0e      	ldr	r3, [pc, #56]	; (1000b29c <sms_imu_poll_data+0x1f4>)
1000b264:	4798      	blx	r3
1000b266:	4b1b      	ldr	r3, [pc, #108]	; (1000b2d4 <sms_imu_poll_data+0x22c>)
1000b268:	0018      	movs	r0, r3
1000b26a:	4b0e      	ldr	r3, [pc, #56]	; (1000b2a4 <sms_imu_poll_data+0x1fc>)
1000b26c:	4798      	blx	r3
1000b26e:	e007      	b.n	1000b280 <sms_imu_poll_data+0x1d8>
            }
            else {
                DBG_LOG_DEV("[sms_imu_receive_data]  sending notification...");
1000b270:	4b09      	ldr	r3, [pc, #36]	; (1000b298 <sms_imu_poll_data+0x1f0>)
1000b272:	0018      	movs	r0, r3
1000b274:	4b09      	ldr	r3, [pc, #36]	; (1000b29c <sms_imu_poll_data+0x1f4>)
1000b276:	4798      	blx	r3
1000b278:	4b17      	ldr	r3, [pc, #92]	; (1000b2d8 <sms_imu_poll_data+0x230>)
1000b27a:	0018      	movs	r0, r3
1000b27c:	4b09      	ldr	r3, [pc, #36]	; (1000b2a4 <sms_imu_poll_data+0x1fc>)
1000b27e:	4798      	blx	r3
            }
        }
    }
    gpio_enable_callback(SMS_IMU_INTERRUPT_PIN);
1000b280:	201d      	movs	r0, #29
1000b282:	4b16      	ldr	r3, [pc, #88]	; (1000b2dc <sms_imu_poll_data+0x234>)
1000b284:	4798      	blx	r3


    return 0;
1000b286:	2300      	movs	r3, #0
}
1000b288:	0018      	movs	r0, r3
1000b28a:	46bd      	mov	sp, r7
1000b28c:	b00f      	add	sp, #60	; 0x3c
1000b28e:	bd90      	pop	{r4, r7, pc}
1000b290:	1001b844 	.word	0x1001b844
1000b294:	1000a4ad 	.word	0x1000a4ad
1000b298:	1001a668 	.word	0x1001a668
1000b29c:	10019095 	.word	0x10019095
1000b2a0:	1001a6f8 	.word	0x1001a6f8
1000b2a4:	10018f75 	.word	0x10018f75
1000b2a8:	1001c194 	.word	0x1001c194
1000b2ac:	1001a70c 	.word	0x1001a70c
1000b2b0:	1001b924 	.word	0x1001b924
1000b2b4:	10009f85 	.word	0x10009f85
1000b2b8:	10009691 	.word	0x10009691
1000b2bc:	1001c2b0 	.word	0x1001c2b0
1000b2c0:	1001c114 	.word	0x1001c114
1000b2c4:	1001516d 	.word	0x1001516d
1000b2c8:	1001a734 	.word	0x1001a734
1000b2cc:	1001c164 	.word	0x1001c164
1000b2d0:	1001530d 	.word	0x1001530d
1000b2d4:	1001a77c 	.word	0x1001a77c
1000b2d8:	1001a7b0 	.word	0x1001a7b0
1000b2dc:	1000d3d5 	.word	0x1000d3d5

1000b2e0 <sms_imu_service_init>:

void sms_imu_service_init(gatt_service_handler_t *sms_imu_serv, uint8_t *sms_imu_value)
{
1000b2e0:	b580      	push	{r7, lr}
1000b2e2:	b082      	sub	sp, #8
1000b2e4:	af00      	add	r7, sp, #0
1000b2e6:	6078      	str	r0, [r7, #4]
1000b2e8:	6039      	str	r1, [r7, #0]
    //SMS button service characteristic
    sms_imu_serv->serv_handle = 0;
1000b2ea:	687b      	ldr	r3, [r7, #4]
1000b2ec:	2200      	movs	r2, #0
1000b2ee:	825a      	strh	r2, [r3, #18]
    sms_imu_serv->serv_uuid.type = AT_BLE_UUID_128;
1000b2f0:	687b      	ldr	r3, [r7, #4]
1000b2f2:	2202      	movs	r2, #2
1000b2f4:	701a      	strb	r2, [r3, #0]
    sms_imu_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
1000b2f6:	687b      	ldr	r3, [r7, #4]
1000b2f8:	2200      	movs	r2, #0
1000b2fa:	705a      	strb	r2, [r3, #1]
    sms_imu_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
1000b2fc:	687b      	ldr	r3, [r7, #4]
1000b2fe:	2200      	movs	r2, #0
1000b300:	709a      	strb	r2, [r3, #2]
    sms_imu_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
1000b302:	687b      	ldr	r3, [r7, #4]
1000b304:	2257      	movs	r2, #87	; 0x57
1000b306:	70da      	strb	r2, [r3, #3]
    sms_imu_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
1000b308:	687b      	ldr	r3, [r7, #4]
1000b30a:	221c      	movs	r2, #28
1000b30c:	711a      	strb	r2, [r3, #4]
    sms_imu_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2) & 0xFF);
1000b30e:	687b      	ldr	r3, [r7, #4]
1000b310:	2200      	movs	r2, #0
1000b312:	715a      	strb	r2, [r3, #5]
    sms_imu_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 8) & 0xFF);
1000b314:	687b      	ldr	r3, [r7, #4]
1000b316:	2200      	movs	r2, #0
1000b318:	719a      	strb	r2, [r3, #6]
    sms_imu_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
1000b31a:	687b      	ldr	r3, [r7, #4]
1000b31c:	22be      	movs	r2, #190	; 0xbe
1000b31e:	71da      	strb	r2, [r3, #7]
    sms_imu_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
1000b320:	687b      	ldr	r3, [r7, #4]
1000b322:	225a      	movs	r2, #90	; 0x5a
1000b324:	721a      	strb	r2, [r3, #8]
    sms_imu_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3) & 0xFF);
1000b326:	687b      	ldr	r3, [r7, #4]
1000b328:	2200      	movs	r2, #0
1000b32a:	725a      	strb	r2, [r3, #9]
    sms_imu_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3 >> 8) & 0xFF);
1000b32c:	687b      	ldr	r3, [r7, #4]
1000b32e:	2200      	movs	r2, #0
1000b330:	729a      	strb	r2, [r3, #10]
    sms_imu_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3 >> 16) & 0xFF);
1000b332:	687b      	ldr	r3, [r7, #4]
1000b334:	2230      	movs	r2, #48	; 0x30
1000b336:	72da      	strb	r2, [r3, #11]
    sms_imu_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3 >> 24) & 0xFF);
1000b338:	687b      	ldr	r3, [r7, #4]
1000b33a:	2250      	movs	r2, #80	; 0x50
1000b33c:	731a      	strb	r2, [r3, #12]
    sms_imu_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
1000b33e:	687b      	ldr	r3, [r7, #4]
1000b340:	2200      	movs	r2, #0
1000b342:	735a      	strb	r2, [r3, #13]
    sms_imu_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
1000b344:	687b      	ldr	r3, [r7, #4]
1000b346:	2200      	movs	r2, #0
1000b348:	739a      	strb	r2, [r3, #14]
    sms_imu_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
1000b34a:	687b      	ldr	r3, [r7, #4]
1000b34c:	2211      	movs	r2, #17
1000b34e:	73da      	strb	r2, [r3, #15]
    sms_imu_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
1000b350:	687b      	ldr	r3, [r7, #4]
1000b352:	2211      	movs	r2, #17
1000b354:	741a      	strb	r2, [r3, #16]
    
    sms_imu_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000b356:	687b      	ldr	r3, [r7, #4]
1000b358:	2212      	movs	r2, #18
1000b35a:	851a      	strh	r2, [r3, #40]	; 0x28
    sms_imu_serv->serv_chars.init_value = sms_imu_value;             /* value */
1000b35c:	687b      	ldr	r3, [r7, #4]
1000b35e:	683a      	ldr	r2, [r7, #0]
1000b360:	62da      	str	r2, [r3, #44]	; 0x2c
    sms_imu_serv->serv_chars.value_init_len = 12 * sizeof(uint8_t);
1000b362:	687b      	ldr	r3, [r7, #4]
1000b364:	220c      	movs	r2, #12
1000b366:	861a      	strh	r2, [r3, #48]	; 0x30
    sms_imu_serv->serv_chars.value_max_len = 12 * sizeof(uint8_t);
1000b368:	687b      	ldr	r3, [r7, #4]
1000b36a:	220c      	movs	r2, #12
1000b36c:	865a      	strh	r2, [r3, #50]	; 0x32
    sms_imu_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
1000b36e:	687b      	ldr	r3, [r7, #4]
1000b370:	2234      	movs	r2, #52	; 0x34
1000b372:	2111      	movs	r1, #17
1000b374:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000b376:	687b      	ldr	r3, [r7, #4]
1000b378:	2200      	movs	r2, #0
1000b37a:	639a      	str	r2, [r3, #56]	; 0x38
    sms_imu_serv->serv_chars.user_desc_len = 0;
1000b37c:	687b      	ldr	r3, [r7, #4]
1000b37e:	2200      	movs	r2, #0
1000b380:	879a      	strh	r2, [r3, #60]	; 0x3c
    sms_imu_serv->serv_chars.user_desc_max_len = 0;
1000b382:	687b      	ldr	r3, [r7, #4]
1000b384:	2200      	movs	r2, #0
1000b386:	87da      	strh	r2, [r3, #62]	; 0x3e
    sms_imu_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b388:	687b      	ldr	r3, [r7, #4]
1000b38a:	2244      	movs	r2, #68	; 0x44
1000b38c:	2100      	movs	r1, #0
1000b38e:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b390:	687b      	ldr	r3, [r7, #4]
1000b392:	2245      	movs	r2, #69	; 0x45
1000b394:	2100      	movs	r1, #0
1000b396:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b398:	687b      	ldr	r3, [r7, #4]
1000b39a:	2246      	movs	r2, #70	; 0x46
1000b39c:	2100      	movs	r1, #0
1000b39e:	5499      	strb	r1, [r3, r2]
    sms_imu_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
1000b3a0:	687b      	ldr	r3, [r7, #4]
1000b3a2:	2248      	movs	r2, #72	; 0x48
1000b3a4:	2100      	movs	r1, #0
1000b3a6:	5299      	strh	r1, [r3, r2]
    sms_imu_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000b3a8:	687b      	ldr	r3, [r7, #4]
1000b3aa:	224a      	movs	r2, #74	; 0x4a
1000b3ac:	2100      	movs	r1, #0
1000b3ae:	5299      	strh	r1, [r3, r2]
    sms_imu_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
1000b3b0:	687b      	ldr	r3, [r7, #4]
1000b3b2:	224c      	movs	r2, #76	; 0x4c
1000b3b4:	2100      	movs	r1, #0
1000b3b6:	5299      	strh	r1, [r3, r2]
    //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
    //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
    //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
    //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    
    sms_imu_serv->serv_chars.presentation_format = NULL;       /* presentation format */
1000b3b8:	687b      	ldr	r3, [r7, #4]
1000b3ba:	2200      	movs	r2, #0
1000b3bc:	641a      	str	r2, [r3, #64]	; 0x40

    //DBG_LOG("[sms_imu_service_init]\n\r  setting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)sms_imu_serv->serv_uuid.uuid, sms_imu_serv->serv_handle, sms_imu_serv->serv_chars.uuid.uuid[1], sms_imu_serv->serv_chars.uuid.uuid[0], sms_imu_serv->serv_chars.value_init_len);
}
1000b3be:	46c0      	nop			; (mov r8, r8)
1000b3c0:	46bd      	mov	sp, r7
1000b3c2:	b002      	add	sp, #8
1000b3c4:	bd80      	pop	{r7, pc}
1000b3c6:	46c0      	nop			; (mov r8, r8)

1000b3c8 <sms_imu_primary_service_define>:

at_ble_status_t sms_imu_primary_service_define(gatt_service_handler_t *sms_service)
{
1000b3c8:	b590      	push	{r4, r7, lr}
1000b3ca:	b085      	sub	sp, #20
1000b3cc:	af02      	add	r7, sp, #8
1000b3ce:	6078      	str	r0, [r7, #4]
    //DBG_LOG("[sms_imu_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_service->serv_uuid.uuid,
    //sms_service->serv_handle,
    //sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
    //sms_service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
1000b3d0:	6878      	ldr	r0, [r7, #4]
1000b3d2:	687b      	ldr	r3, [r7, #4]
1000b3d4:	3312      	adds	r3, #18
1000b3d6:	0019      	movs	r1, r3
1000b3d8:	687b      	ldr	r3, [r7, #4]
1000b3da:	3314      	adds	r3, #20
1000b3dc:	2201      	movs	r2, #1
1000b3de:	9201      	str	r2, [sp, #4]
1000b3e0:	9300      	str	r3, [sp, #0]
1000b3e2:	2300      	movs	r3, #0
1000b3e4:	2200      	movs	r2, #0
1000b3e6:	4c03      	ldr	r4, [pc, #12]	; (1000b3f4 <sms_imu_primary_service_define+0x2c>)
1000b3e8:	47a0      	blx	r4
1000b3ea:	0003      	movs	r3, r0
}
1000b3ec:	0018      	movs	r0, r3
1000b3ee:	46bd      	mov	sp, r7
1000b3f0:	b003      	add	sp, #12
1000b3f2:	bd90      	pop	{r4, r7, pc}
1000b3f4:	10015139 	.word	0x10015139

1000b3f8 <sms_pressure_ms58_reset>:
*/

#include "app_include.h"

void sms_pressure_ms58_reset(void)
{
1000b3f8:	b590      	push	{r4, r7, lr}
1000b3fa:	b083      	sub	sp, #12
1000b3fc:	af02      	add	r7, sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset] writing reset command");
    ms58_device.conv_d1_mode = true;
1000b3fe:	4b0a      	ldr	r3, [pc, #40]	; (1000b428 <sms_pressure_ms58_reset+0x30>)
1000b400:	2224      	movs	r2, #36	; 0x24
1000b402:	2101      	movs	r1, #1
1000b404:	5499      	strb	r1, [r3, r2]
    spi_wdata[0] = MS58_RESET;
1000b406:	4b09      	ldr	r3, [pc, #36]	; (1000b42c <sms_pressure_ms58_reset+0x34>)
1000b408:	221e      	movs	r2, #30
1000b40a:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b40c:	4c08      	ldr	r4, [pc, #32]	; (1000b430 <sms_pressure_ms58_reset+0x38>)
1000b40e:	4a07      	ldr	r2, [pc, #28]	; (1000b42c <sms_pressure_ms58_reset+0x34>)
1000b410:	4908      	ldr	r1, [pc, #32]	; (1000b434 <sms_pressure_ms58_reset+0x3c>)
1000b412:	4809      	ldr	r0, [pc, #36]	; (1000b438 <sms_pressure_ms58_reset+0x40>)
1000b414:	2301      	movs	r3, #1
1000b416:	9300      	str	r3, [sp, #0]
1000b418:	0023      	movs	r3, r4
1000b41a:	4c08      	ldr	r4, [pc, #32]	; (1000b43c <sms_pressure_ms58_reset+0x44>)
1000b41c:	47a0      	blx	r4
}
1000b41e:	46c0      	nop			; (mov r8, r8)
1000b420:	46bd      	mov	sp, r7
1000b422:	b001      	add	sp, #4
1000b424:	bd90      	pop	{r4, r7, pc}
1000b426:	46c0      	nop			; (mov r8, r8)
1000b428:	1001c1c0 	.word	0x1001c1c0
1000b42c:	1001c1b0 	.word	0x1001c1b0
1000b430:	1001c1a0 	.word	0x1001c1a0
1000b434:	1001c1fc 	.word	0x1001c1fc
1000b438:	1001c220 	.word	0x1001c220
1000b43c:	1000bd15 	.word	0x1000bd15

1000b440 <sms_pressure_ms58_read_prom>:

enum status_code sms_pressure_ms58_read_prom(void)
{
1000b440:	b590      	push	{r4, r7, lr}
1000b442:	b083      	sub	sp, #12
1000b444:	af02      	add	r7, sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000b446:	4b59      	ldr	r3, [pc, #356]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b448:	22a2      	movs	r2, #162	; 0xa2
1000b44a:	701a      	strb	r2, [r3, #0]
    spi_wdata[1] = 0x00;
1000b44c:	4b57      	ldr	r3, [pc, #348]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b44e:	2200      	movs	r2, #0
1000b450:	705a      	strb	r2, [r3, #1]
    spi_wdata[2] = 0x00;
1000b452:	4b56      	ldr	r3, [pc, #344]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b454:	2200      	movs	r2, #0
1000b456:	709a      	strb	r2, [r3, #2]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b458:	4c55      	ldr	r4, [pc, #340]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b45a:	4a54      	ldr	r2, [pc, #336]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b45c:	4955      	ldr	r1, [pc, #340]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b45e:	4856      	ldr	r0, [pc, #344]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b460:	2303      	movs	r3, #3
1000b462:	9300      	str	r3, [sp, #0]
1000b464:	0023      	movs	r3, r4
1000b466:	4c55      	ldr	r4, [pc, #340]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b468:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b46a:	4b51      	ldr	r3, [pc, #324]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b46c:	785b      	ldrb	r3, [r3, #1]
1000b46e:	021b      	lsls	r3, r3, #8
1000b470:	b21a      	sxth	r2, r3
1000b472:	4b4f      	ldr	r3, [pc, #316]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b474:	789b      	ldrb	r3, [r3, #2]
1000b476:	b21b      	sxth	r3, r3
1000b478:	4313      	orrs	r3, r2
1000b47a:	b21b      	sxth	r3, r3
1000b47c:	b29a      	uxth	r2, r3
1000b47e:	4b50      	ldr	r3, [pc, #320]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b480:	809a      	strh	r2, [r3, #4]

    spi_wdata[0] = MS58_PROM_READ_2;
1000b482:	4b4a      	ldr	r3, [pc, #296]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b484:	22a4      	movs	r2, #164	; 0xa4
1000b486:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b488:	4c49      	ldr	r4, [pc, #292]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b48a:	4a48      	ldr	r2, [pc, #288]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b48c:	4949      	ldr	r1, [pc, #292]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b48e:	484a      	ldr	r0, [pc, #296]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b490:	2303      	movs	r3, #3
1000b492:	9300      	str	r3, [sp, #0]
1000b494:	0023      	movs	r3, r4
1000b496:	4c49      	ldr	r4, [pc, #292]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b498:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b49a:	4b45      	ldr	r3, [pc, #276]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b49c:	785b      	ldrb	r3, [r3, #1]
1000b49e:	021b      	lsls	r3, r3, #8
1000b4a0:	b21a      	sxth	r2, r3
1000b4a2:	4b43      	ldr	r3, [pc, #268]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b4a4:	789b      	ldrb	r3, [r3, #2]
1000b4a6:	b21b      	sxth	r3, r3
1000b4a8:	4313      	orrs	r3, r2
1000b4aa:	b21b      	sxth	r3, r3
1000b4ac:	b29a      	uxth	r2, r3
1000b4ae:	4b44      	ldr	r3, [pc, #272]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b4b0:	80da      	strh	r2, [r3, #6]

    spi_wdata[0] = MS58_PROM_READ_3;
1000b4b2:	4b3e      	ldr	r3, [pc, #248]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b4b4:	22a6      	movs	r2, #166	; 0xa6
1000b4b6:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b4b8:	4c3d      	ldr	r4, [pc, #244]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b4ba:	4a3c      	ldr	r2, [pc, #240]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b4bc:	493d      	ldr	r1, [pc, #244]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b4be:	483e      	ldr	r0, [pc, #248]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b4c0:	2303      	movs	r3, #3
1000b4c2:	9300      	str	r3, [sp, #0]
1000b4c4:	0023      	movs	r3, r4
1000b4c6:	4c3d      	ldr	r4, [pc, #244]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b4c8:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b4ca:	4b39      	ldr	r3, [pc, #228]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b4cc:	785b      	ldrb	r3, [r3, #1]
1000b4ce:	021b      	lsls	r3, r3, #8
1000b4d0:	b21a      	sxth	r2, r3
1000b4d2:	4b37      	ldr	r3, [pc, #220]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b4d4:	789b      	ldrb	r3, [r3, #2]
1000b4d6:	b21b      	sxth	r3, r3
1000b4d8:	4313      	orrs	r3, r2
1000b4da:	b21b      	sxth	r3, r3
1000b4dc:	b29a      	uxth	r2, r3
1000b4de:	4b38      	ldr	r3, [pc, #224]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b4e0:	811a      	strh	r2, [r3, #8]

    spi_wdata[0] = MS58_PROM_READ_4;
1000b4e2:	4b32      	ldr	r3, [pc, #200]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b4e4:	22a8      	movs	r2, #168	; 0xa8
1000b4e6:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b4e8:	4c31      	ldr	r4, [pc, #196]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b4ea:	4a30      	ldr	r2, [pc, #192]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b4ec:	4931      	ldr	r1, [pc, #196]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b4ee:	4832      	ldr	r0, [pc, #200]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b4f0:	2303      	movs	r3, #3
1000b4f2:	9300      	str	r3, [sp, #0]
1000b4f4:	0023      	movs	r3, r4
1000b4f6:	4c31      	ldr	r4, [pc, #196]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b4f8:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b4fa:	4b2d      	ldr	r3, [pc, #180]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b4fc:	785b      	ldrb	r3, [r3, #1]
1000b4fe:	021b      	lsls	r3, r3, #8
1000b500:	b21a      	sxth	r2, r3
1000b502:	4b2b      	ldr	r3, [pc, #172]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b504:	789b      	ldrb	r3, [r3, #2]
1000b506:	b21b      	sxth	r3, r3
1000b508:	4313      	orrs	r3, r2
1000b50a:	b21b      	sxth	r3, r3
1000b50c:	b29a      	uxth	r2, r3
1000b50e:	4b2c      	ldr	r3, [pc, #176]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b510:	815a      	strh	r2, [r3, #10]

    spi_wdata[0] = MS58_PROM_READ_5;
1000b512:	4b26      	ldr	r3, [pc, #152]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b514:	22aa      	movs	r2, #170	; 0xaa
1000b516:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b518:	4c25      	ldr	r4, [pc, #148]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b51a:	4a24      	ldr	r2, [pc, #144]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b51c:	4925      	ldr	r1, [pc, #148]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b51e:	4826      	ldr	r0, [pc, #152]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b520:	2303      	movs	r3, #3
1000b522:	9300      	str	r3, [sp, #0]
1000b524:	0023      	movs	r3, r4
1000b526:	4c25      	ldr	r4, [pc, #148]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b528:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b52a:	4b21      	ldr	r3, [pc, #132]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b52c:	785b      	ldrb	r3, [r3, #1]
1000b52e:	021b      	lsls	r3, r3, #8
1000b530:	b21a      	sxth	r2, r3
1000b532:	4b1f      	ldr	r3, [pc, #124]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b534:	789b      	ldrb	r3, [r3, #2]
1000b536:	b21b      	sxth	r3, r3
1000b538:	4313      	orrs	r3, r2
1000b53a:	b21b      	sxth	r3, r3
1000b53c:	b29a      	uxth	r2, r3
1000b53e:	4b20      	ldr	r3, [pc, #128]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b540:	819a      	strh	r2, [r3, #12]

    spi_wdata[0] = MS58_PROM_READ_6;
1000b542:	4b1a      	ldr	r3, [pc, #104]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b544:	22ac      	movs	r2, #172	; 0xac
1000b546:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b548:	4c19      	ldr	r4, [pc, #100]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b54a:	4a18      	ldr	r2, [pc, #96]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b54c:	4919      	ldr	r1, [pc, #100]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b54e:	481a      	ldr	r0, [pc, #104]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b550:	2303      	movs	r3, #3
1000b552:	9300      	str	r3, [sp, #0]
1000b554:	0023      	movs	r3, r4
1000b556:	4c19      	ldr	r4, [pc, #100]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b558:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b55a:	4b15      	ldr	r3, [pc, #84]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b55c:	785b      	ldrb	r3, [r3, #1]
1000b55e:	021b      	lsls	r3, r3, #8
1000b560:	b21a      	sxth	r2, r3
1000b562:	4b13      	ldr	r3, [pc, #76]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b564:	789b      	ldrb	r3, [r3, #2]
1000b566:	b21b      	sxth	r3, r3
1000b568:	4313      	orrs	r3, r2
1000b56a:	b21b      	sxth	r3, r3
1000b56c:	b29a      	uxth	r2, r3
1000b56e:	4b14      	ldr	r3, [pc, #80]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b570:	81da      	strh	r2, [r3, #14]

    spi_wdata[0] = MS58_PROM_READ_7;
1000b572:	4b0e      	ldr	r3, [pc, #56]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b574:	22ae      	movs	r2, #174	; 0xae
1000b576:	701a      	strb	r2, [r3, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b578:	4c0d      	ldr	r4, [pc, #52]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b57a:	4a0c      	ldr	r2, [pc, #48]	; (1000b5ac <sms_pressure_ms58_read_prom+0x16c>)
1000b57c:	490d      	ldr	r1, [pc, #52]	; (1000b5b4 <sms_pressure_ms58_read_prom+0x174>)
1000b57e:	480e      	ldr	r0, [pc, #56]	; (1000b5b8 <sms_pressure_ms58_read_prom+0x178>)
1000b580:	2303      	movs	r3, #3
1000b582:	9300      	str	r3, [sp, #0]
1000b584:	0023      	movs	r3, r4
1000b586:	4c0d      	ldr	r4, [pc, #52]	; (1000b5bc <sms_pressure_ms58_read_prom+0x17c>)
1000b588:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b58a:	4b09      	ldr	r3, [pc, #36]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b58c:	785b      	ldrb	r3, [r3, #1]
1000b58e:	021b      	lsls	r3, r3, #8
1000b590:	b21a      	sxth	r2, r3
1000b592:	4b07      	ldr	r3, [pc, #28]	; (1000b5b0 <sms_pressure_ms58_read_prom+0x170>)
1000b594:	789b      	ldrb	r3, [r3, #2]
1000b596:	b21b      	sxth	r3, r3
1000b598:	4313      	orrs	r3, r2
1000b59a:	b21b      	sxth	r3, r3
1000b59c:	b29a      	uxth	r2, r3
1000b59e:	4b08      	ldr	r3, [pc, #32]	; (1000b5c0 <sms_pressure_ms58_read_prom+0x180>)
1000b5a0:	821a      	strh	r2, [r3, #16]
    //DBG_LOG_CONT_DEV("done! Results:");
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
    //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
1000b5a2:	2300      	movs	r3, #0
}
1000b5a4:	0018      	movs	r0, r3
1000b5a6:	46bd      	mov	sp, r7
1000b5a8:	b001      	add	sp, #4
1000b5aa:	bd90      	pop	{r4, r7, pc}
1000b5ac:	1001c1b0 	.word	0x1001c1b0
1000b5b0:	1001c1a0 	.word	0x1001c1a0
1000b5b4:	1001c1fc 	.word	0x1001c1fc
1000b5b8:	1001c220 	.word	0x1001c220
1000b5bc:	1000bd15 	.word	0x1000bd15
1000b5c0:	1001c1c0 	.word	0x1001c1c0

1000b5c4 <sms_pressure_ms58_init>:

enum status_code sms_pressure_ms58_init(void)
{
1000b5c4:	b580      	push	{r7, lr}
1000b5c6:	af00      	add	r7, sp, #0
    /* Initialize ms58_device struct elements */
    ms58_device.init_ok = false;
1000b5c8:	4b06      	ldr	r3, [pc, #24]	; (1000b5e4 <sms_pressure_ms58_init+0x20>)
1000b5ca:	2200      	movs	r2, #0
1000b5cc:	701a      	strb	r2, [r3, #0]

    /* Send SPI reset command to ms58 */
    //DBG_LOG_DEV("[sms_button_bt2_fn] resetting ms58...");
    sms_pressure_ms58_reset();
1000b5ce:	4b06      	ldr	r3, [pc, #24]	; (1000b5e8 <sms_pressure_ms58_init+0x24>)
1000b5d0:	4798      	blx	r3
    /* Wait until ms58 has finished resetting */
    delay_ms(3);
1000b5d2:	2003      	movs	r0, #3
1000b5d4:	4b05      	ldr	r3, [pc, #20]	; (1000b5ec <sms_pressure_ms58_init+0x28>)
1000b5d6:	4798      	blx	r3
    /* Read PROM values from ms58 */
    //DBG_LOG_DEV("[sms_pressure_ms58_init] reading ms58 PROM values...");
    return sms_pressure_ms58_read_prom();
1000b5d8:	4b05      	ldr	r3, [pc, #20]	; (1000b5f0 <sms_pressure_ms58_init+0x2c>)
1000b5da:	4798      	blx	r3
1000b5dc:	0003      	movs	r3, r0
}
1000b5de:	0018      	movs	r0, r3
1000b5e0:	46bd      	mov	sp, r7
1000b5e2:	bd80      	pop	{r7, pc}
1000b5e4:	1001c1c0 	.word	0x1001c1c0
1000b5e8:	1000b3f9 	.word	0x1000b3f9
1000b5ec:	1000c4b9 	.word	0x1000c4b9
1000b5f0:	1000b441 	.word	0x1000b441

1000b5f4 <sms_pressure_ms58_poll_data>:

void sms_pressure_ms58_poll_data(void)
{
1000b5f4:	b580      	push	{r7, lr}
1000b5f6:	af00      	add	r7, sp, #0
    //DBG_LOG_DEV("[sms_pressure_ms58_poll_data] starting data polling");
    if(sms_pressure_ms58_conv_read() != STATUS_OK) {
1000b5f8:	4b06      	ldr	r3, [pc, #24]	; (1000b614 <sms_pressure_ms58_poll_data+0x20>)
1000b5fa:	4798      	blx	r3
1000b5fc:	1e03      	subs	r3, r0, #0
1000b5fe:	d106      	bne.n	1000b60e <sms_pressure_ms58_poll_data+0x1a>
        //DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
    }
    else {
        if(ms58_device.conv_d1_mode) sms_pressure_ms58_calculate();
1000b600:	4b05      	ldr	r3, [pc, #20]	; (1000b618 <sms_pressure_ms58_poll_data+0x24>)
1000b602:	2224      	movs	r2, #36	; 0x24
1000b604:	5c9b      	ldrb	r3, [r3, r2]
1000b606:	2b00      	cmp	r3, #0
1000b608:	d001      	beq.n	1000b60e <sms_pressure_ms58_poll_data+0x1a>
1000b60a:	4b04      	ldr	r3, [pc, #16]	; (1000b61c <sms_pressure_ms58_poll_data+0x28>)
1000b60c:	4798      	blx	r3
    }
}
1000b60e:	46c0      	nop			; (mov r8, r8)
1000b610:	46bd      	mov	sp, r7
1000b612:	bd80      	pop	{r7, pc}
1000b614:	1000b621 	.word	0x1000b621
1000b618:	1001c1c0 	.word	0x1001c1c0
1000b61c:	1000b725 	.word	0x1000b725

1000b620 <sms_pressure_ms58_conv_read>:

enum status_code sms_pressure_ms58_conv_read(void)
{
1000b620:	b590      	push	{r4, r7, lr}
1000b622:	b083      	sub	sp, #12
1000b624:	af02      	add	r7, sp, #8
    if(!ms58_device.conv_d1_mode) {
1000b626:	4b39      	ldr	r3, [pc, #228]	; (1000b70c <sms_pressure_ms58_conv_read+0xec>)
1000b628:	2224      	movs	r2, #36	; 0x24
1000b62a:	5c9b      	ldrb	r3, [r3, r2]
1000b62c:	2201      	movs	r2, #1
1000b62e:	4053      	eors	r3, r2
1000b630:	b2db      	uxtb	r3, r3
1000b632:	2b00      	cmp	r3, #0
1000b634:	d033      	beq.n	1000b69e <sms_pressure_ms58_conv_read+0x7e>
        //DBG_LOG_DEV("[sms_pressure_ms58_start_conversion] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b636:	4b36      	ldr	r3, [pc, #216]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b638:	2200      	movs	r2, #0
1000b63a:	701a      	strb	r2, [r3, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b63c:	4b34      	ldr	r3, [pc, #208]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b63e:	2200      	movs	r2, #0
1000b640:	705a      	strb	r2, [r3, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b642:	4b33      	ldr	r3, [pc, #204]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b644:	2200      	movs	r2, #0
1000b646:	709a      	strb	r2, [r3, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b648:	4b31      	ldr	r3, [pc, #196]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b64a:	2200      	movs	r2, #0
1000b64c:	70da      	strb	r2, [r3, #3]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b64e:	4c31      	ldr	r4, [pc, #196]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b650:	4a2f      	ldr	r2, [pc, #188]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b652:	4931      	ldr	r1, [pc, #196]	; (1000b718 <sms_pressure_ms58_conv_read+0xf8>)
1000b654:	4831      	ldr	r0, [pc, #196]	; (1000b71c <sms_pressure_ms58_conv_read+0xfc>)
1000b656:	2304      	movs	r3, #4
1000b658:	9300      	str	r3, [sp, #0]
1000b65a:	0023      	movs	r3, r4
1000b65c:	4c30      	ldr	r4, [pc, #192]	; (1000b720 <sms_pressure_ms58_conv_read+0x100>)
1000b65e:	47a0      	blx	r4
        ms58_device.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b660:	4b2c      	ldr	r3, [pc, #176]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b662:	785b      	ldrb	r3, [r3, #1]
1000b664:	041a      	lsls	r2, r3, #16
1000b666:	4b2b      	ldr	r3, [pc, #172]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b668:	789b      	ldrb	r3, [r3, #2]
1000b66a:	021b      	lsls	r3, r3, #8
1000b66c:	4313      	orrs	r3, r2
1000b66e:	4a29      	ldr	r2, [pc, #164]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b670:	78d2      	ldrb	r2, [r2, #3]
1000b672:	4313      	orrs	r3, r2
1000b674:	001a      	movs	r2, r3
1000b676:	4b25      	ldr	r3, [pc, #148]	; (1000b70c <sms_pressure_ms58_conv_read+0xec>)
1000b678:	619a      	str	r2, [r3, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_start_conversion] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        //
        //DBG_LOG_DEV("[sms_pressure_ms58_start_conversion] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000b67a:	4b25      	ldr	r3, [pc, #148]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b67c:	2242      	movs	r2, #66	; 0x42
1000b67e:	701a      	strb	r2, [r3, #0]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b680:	4c24      	ldr	r4, [pc, #144]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b682:	4a23      	ldr	r2, [pc, #140]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b684:	4924      	ldr	r1, [pc, #144]	; (1000b718 <sms_pressure_ms58_conv_read+0xf8>)
1000b686:	4825      	ldr	r0, [pc, #148]	; (1000b71c <sms_pressure_ms58_conv_read+0xfc>)
1000b688:	2301      	movs	r3, #1
1000b68a:	9300      	str	r3, [sp, #0]
1000b68c:	0023      	movs	r3, r4
1000b68e:	4c24      	ldr	r4, [pc, #144]	; (1000b720 <sms_pressure_ms58_conv_read+0x100>)
1000b690:	47a0      	blx	r4
        ms58_device.conv_d1_mode = true;
1000b692:	4b1e      	ldr	r3, [pc, #120]	; (1000b70c <sms_pressure_ms58_conv_read+0xec>)
1000b694:	2224      	movs	r2, #36	; 0x24
1000b696:	2101      	movs	r1, #1
1000b698:	5499      	strb	r1, [r3, r2]
        return STATUS_OK;
1000b69a:	2300      	movs	r3, #0
1000b69c:	e032      	b.n	1000b704 <sms_pressure_ms58_conv_read+0xe4>
    }
    else {
        //DBG_LOG_DEV("[sms_pressure_ms58_start_conversion] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b69e:	4b1c      	ldr	r3, [pc, #112]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6a0:	2200      	movs	r2, #0
1000b6a2:	701a      	strb	r2, [r3, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b6a4:	4b1a      	ldr	r3, [pc, #104]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6a6:	2200      	movs	r2, #0
1000b6a8:	705a      	strb	r2, [r3, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b6aa:	4b19      	ldr	r3, [pc, #100]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6ac:	2200      	movs	r2, #0
1000b6ae:	709a      	strb	r2, [r3, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b6b0:	4b17      	ldr	r3, [pc, #92]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6b2:	2200      	movs	r2, #0
1000b6b4:	70da      	strb	r2, [r3, #3]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b6b6:	4c17      	ldr	r4, [pc, #92]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b6b8:	4a15      	ldr	r2, [pc, #84]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6ba:	4917      	ldr	r1, [pc, #92]	; (1000b718 <sms_pressure_ms58_conv_read+0xf8>)
1000b6bc:	4817      	ldr	r0, [pc, #92]	; (1000b71c <sms_pressure_ms58_conv_read+0xfc>)
1000b6be:	2304      	movs	r3, #4
1000b6c0:	9300      	str	r3, [sp, #0]
1000b6c2:	0023      	movs	r3, r4
1000b6c4:	4c16      	ldr	r4, [pc, #88]	; (1000b720 <sms_pressure_ms58_conv_read+0x100>)
1000b6c6:	47a0      	blx	r4
        ms58_device.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b6c8:	4b12      	ldr	r3, [pc, #72]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b6ca:	785b      	ldrb	r3, [r3, #1]
1000b6cc:	041a      	lsls	r2, r3, #16
1000b6ce:	4b11      	ldr	r3, [pc, #68]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b6d0:	789b      	ldrb	r3, [r3, #2]
1000b6d2:	021b      	lsls	r3, r3, #8
1000b6d4:	4313      	orrs	r3, r2
1000b6d6:	4a0f      	ldr	r2, [pc, #60]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b6d8:	78d2      	ldrb	r2, [r2, #3]
1000b6da:	4313      	orrs	r3, r2
1000b6dc:	001a      	movs	r2, r3
1000b6de:	4b0b      	ldr	r3, [pc, #44]	; (1000b70c <sms_pressure_ms58_conv_read+0xec>)
1000b6e0:	615a      	str	r2, [r3, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_start_conversion] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        //
        //DBG_LOG_DEV("[sms_pressure_ms58_start_conversion] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000b6e2:	4b0b      	ldr	r3, [pc, #44]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6e4:	2252      	movs	r2, #82	; 0x52
1000b6e6:	701a      	strb	r2, [r3, #0]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b6e8:	4c0a      	ldr	r4, [pc, #40]	; (1000b714 <sms_pressure_ms58_conv_read+0xf4>)
1000b6ea:	4a09      	ldr	r2, [pc, #36]	; (1000b710 <sms_pressure_ms58_conv_read+0xf0>)
1000b6ec:	490a      	ldr	r1, [pc, #40]	; (1000b718 <sms_pressure_ms58_conv_read+0xf8>)
1000b6ee:	480b      	ldr	r0, [pc, #44]	; (1000b71c <sms_pressure_ms58_conv_read+0xfc>)
1000b6f0:	2301      	movs	r3, #1
1000b6f2:	9300      	str	r3, [sp, #0]
1000b6f4:	0023      	movs	r3, r4
1000b6f6:	4c0a      	ldr	r4, [pc, #40]	; (1000b720 <sms_pressure_ms58_conv_read+0x100>)
1000b6f8:	47a0      	blx	r4
        ms58_device.conv_d1_mode = false;
1000b6fa:	4b04      	ldr	r3, [pc, #16]	; (1000b70c <sms_pressure_ms58_conv_read+0xec>)
1000b6fc:	2224      	movs	r2, #36	; 0x24
1000b6fe:	2100      	movs	r1, #0
1000b700:	5499      	strb	r1, [r3, r2]
        return STATUS_OK;
1000b702:	2300      	movs	r3, #0
    }
}
1000b704:	0018      	movs	r0, r3
1000b706:	46bd      	mov	sp, r7
1000b708:	b001      	add	sp, #4
1000b70a:	bd90      	pop	{r4, r7, pc}
1000b70c:	1001c1c0 	.word	0x1001c1c0
1000b710:	1001c1b0 	.word	0x1001c1b0
1000b714:	1001c1a0 	.word	0x1001c1a0
1000b718:	1001c1fc 	.word	0x1001c1fc
1000b71c:	1001c220 	.word	0x1001c220
1000b720:	1000bd15 	.word	0x1000bd15

1000b724 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000b724:	b5b0      	push	{r4, r5, r7, lr}
1000b726:	b0a2      	sub	sp, #136	; 0x88
1000b728:	af00      	add	r7, sp, #0
    /***************************
    * Temperature calculation *
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(ms58_device.prom_values[5]) << 8);
1000b72a:	4bc5      	ldr	r3, [pc, #788]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b72c:	899b      	ldrh	r3, [r3, #12]
1000b72e:	001c      	movs	r4, r3
1000b730:	2300      	movs	r3, #0
1000b732:	001d      	movs	r5, r3
1000b734:	0e23      	lsrs	r3, r4, #24
1000b736:	022a      	lsls	r2, r5, #8
1000b738:	431a      	orrs	r2, r3
1000b73a:	0221      	lsls	r1, r4, #8
1000b73c:	4bc1      	ldr	r3, [pc, #772]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b73e:	6019      	str	r1, [r3, #0]
1000b740:	605a      	str	r2, [r3, #4]
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)ms58_device.adc_values[MS58_TYPE_TEMP] - tv1);
1000b742:	4bbf      	ldr	r3, [pc, #764]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b744:	699a      	ldr	r2, [r3, #24]
1000b746:	4bbf      	ldr	r3, [pc, #764]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b748:	685c      	ldr	r4, [r3, #4]
1000b74a:	681b      	ldr	r3, [r3, #0]
1000b74c:	1ad3      	subs	r3, r2, r3
1000b74e:	001a      	movs	r2, r3
1000b750:	4bbd      	ldr	r3, [pc, #756]	; (1000ba48 <sms_pressure_ms58_calculate+0x324>)
1000b752:	601a      	str	r2, [r3, #0]

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)ms58_device.prom_values[6] * (int64_t)deltaT);
1000b754:	4bba      	ldr	r3, [pc, #744]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b756:	89db      	ldrh	r3, [r3, #14]
1000b758:	643b      	str	r3, [r7, #64]	; 0x40
1000b75a:	2300      	movs	r3, #0
1000b75c:	647b      	str	r3, [r7, #68]	; 0x44
1000b75e:	4bba      	ldr	r3, [pc, #744]	; (1000ba48 <sms_pressure_ms58_calculate+0x324>)
1000b760:	681b      	ldr	r3, [r3, #0]
1000b762:	63bb      	str	r3, [r7, #56]	; 0x38
1000b764:	17db      	asrs	r3, r3, #31
1000b766:	63fb      	str	r3, [r7, #60]	; 0x3c
1000b768:	4cb8      	ldr	r4, [pc, #736]	; (1000ba4c <sms_pressure_ms58_calculate+0x328>)
1000b76a:	6bba      	ldr	r2, [r7, #56]	; 0x38
1000b76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000b76e:	6c38      	ldr	r0, [r7, #64]	; 0x40
1000b770:	6c79      	ldr	r1, [r7, #68]	; 0x44
1000b772:	47a0      	blx	r4
1000b774:	0003      	movs	r3, r0
1000b776:	000c      	movs	r4, r1
1000b778:	0019      	movs	r1, r3
1000b77a:	0022      	movs	r2, r4
1000b77c:	4bb1      	ldr	r3, [pc, #708]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b77e:	6019      	str	r1, [r3, #0]
1000b780:	605a      	str	r2, [r3, #4]
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
1000b782:	4bb0      	ldr	r3, [pc, #704]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b784:	685c      	ldr	r4, [r3, #4]
1000b786:	681b      	ldr	r3, [r3, #0]
1000b788:	0262      	lsls	r2, r4, #9
1000b78a:	0dd9      	lsrs	r1, r3, #23
1000b78c:	67b9      	str	r1, [r7, #120]	; 0x78
1000b78e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
1000b790:	4311      	orrs	r1, r2
1000b792:	67b9      	str	r1, [r7, #120]	; 0x78
1000b794:	15e3      	asrs	r3, r4, #23
1000b796:	67fb      	str	r3, [r7, #124]	; 0x7c
1000b798:	4bad      	ldr	r3, [pc, #692]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b79a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
1000b79c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
1000b79e:	6019      	str	r1, [r3, #0]
1000b7a0:	605a      	str	r2, [r3, #4]
    /* temp: 7 + 2000 = 2007 */
    ms58_device.temperature = (int32_t)(tv2 + 2000);
1000b7a2:	4bab      	ldr	r3, [pc, #684]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b7a4:	685c      	ldr	r4, [r3, #4]
1000b7a6:	681b      	ldr	r3, [r3, #0]
1000b7a8:	22fa      	movs	r2, #250	; 0xfa
1000b7aa:	00d2      	lsls	r2, r2, #3
1000b7ac:	4694      	mov	ip, r2
1000b7ae:	4463      	add	r3, ip
1000b7b0:	001a      	movs	r2, r3
1000b7b2:	4ba3      	ldr	r3, [pc, #652]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b7b4:	621a      	str	r2, [r3, #32]
    /************************
    * Pressure calculation *
    ************************/
    /* OFF = OFFt1 + TCO*dT = C2*2^16 + (C4*dT)/2^7 */
    /* tv1: 36924 * 2^16 = 2419851264 */
    tv1 = ((int64_t)(ms58_device.prom_values[2]) << 16);
1000b7b6:	4ba2      	ldr	r3, [pc, #648]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b7b8:	88db      	ldrh	r3, [r3, #6]
1000b7ba:	633b      	str	r3, [r7, #48]	; 0x30
1000b7bc:	2300      	movs	r3, #0
1000b7be:	637b      	str	r3, [r7, #52]	; 0x34
1000b7c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
1000b7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000b7c4:	000b      	movs	r3, r1
1000b7c6:	0c1b      	lsrs	r3, r3, #16
1000b7c8:	0010      	movs	r0, r2
1000b7ca:	0400      	lsls	r0, r0, #16
1000b7cc:	6778      	str	r0, [r7, #116]	; 0x74
1000b7ce:	6f78      	ldr	r0, [r7, #116]	; 0x74
1000b7d0:	4318      	orrs	r0, r3
1000b7d2:	6778      	str	r0, [r7, #116]	; 0x74
1000b7d4:	000b      	movs	r3, r1
1000b7d6:	041b      	lsls	r3, r3, #16
1000b7d8:	673b      	str	r3, [r7, #112]	; 0x70
1000b7da:	4b9a      	ldr	r3, [pc, #616]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b7dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000b7de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
1000b7e0:	6019      	str	r1, [r3, #0]
1000b7e2:	605a      	str	r2, [r3, #4]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)ms58_device.prom_values[4] * (int64_t)deltaT);
1000b7e4:	4b96      	ldr	r3, [pc, #600]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b7e6:	895b      	ldrh	r3, [r3, #10]
1000b7e8:	62bb      	str	r3, [r7, #40]	; 0x28
1000b7ea:	2300      	movs	r3, #0
1000b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
1000b7ee:	4b96      	ldr	r3, [pc, #600]	; (1000ba48 <sms_pressure_ms58_calculate+0x324>)
1000b7f0:	681b      	ldr	r3, [r3, #0]
1000b7f2:	623b      	str	r3, [r7, #32]
1000b7f4:	17db      	asrs	r3, r3, #31
1000b7f6:	627b      	str	r3, [r7, #36]	; 0x24
1000b7f8:	4c94      	ldr	r4, [pc, #592]	; (1000ba4c <sms_pressure_ms58_calculate+0x328>)
1000b7fa:	6a3a      	ldr	r2, [r7, #32]
1000b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000b800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000b802:	47a0      	blx	r4
1000b804:	0003      	movs	r3, r0
1000b806:	000c      	movs	r4, r1
1000b808:	0019      	movs	r1, r3
1000b80a:	0022      	movs	r2, r4
1000b80c:	4b90      	ldr	r3, [pc, #576]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b80e:	6019      	str	r1, [r3, #0]
1000b810:	605a      	str	r2, [r3, #4]
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
1000b812:	4b8f      	ldr	r3, [pc, #572]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b814:	685c      	ldr	r4, [r3, #4]
1000b816:	681b      	ldr	r3, [r3, #0]
1000b818:	0662      	lsls	r2, r4, #25
1000b81a:	09d9      	lsrs	r1, r3, #7
1000b81c:	66b9      	str	r1, [r7, #104]	; 0x68
1000b81e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1000b820:	4311      	orrs	r1, r2
1000b822:	66b9      	str	r1, [r7, #104]	; 0x68
1000b824:	11e3      	asrs	r3, r4, #7
1000b826:	66fb      	str	r3, [r7, #108]	; 0x6c
1000b828:	4b8a      	ldr	r3, [pc, #552]	; (1000ba54 <sms_pressure_ms58_calculate+0x330>)
1000b82a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1000b82c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000b82e:	6019      	str	r1, [r3, #0]
1000b830:	605a      	str	r2, [r3, #4]
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000b832:	4b84      	ldr	r3, [pc, #528]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b834:	6819      	ldr	r1, [r3, #0]
1000b836:	685a      	ldr	r2, [r3, #4]
1000b838:	4b86      	ldr	r3, [pc, #536]	; (1000ba54 <sms_pressure_ms58_calculate+0x330>)
1000b83a:	685c      	ldr	r4, [r3, #4]
1000b83c:	681b      	ldr	r3, [r3, #0]
1000b83e:	185b      	adds	r3, r3, r1
1000b840:	4154      	adcs	r4, r2
1000b842:	4a85      	ldr	r2, [pc, #532]	; (1000ba58 <sms_pressure_ms58_calculate+0x334>)
1000b844:	6013      	str	r3, [r2, #0]
1000b846:	6054      	str	r4, [r2, #4]

    /* SENS = SENSt1 + TCS*dT = C1*2^15 + (C3*dT)/2^8 */
    /* tv1: 40127 * 2^15 = 1314881536 */
    tv1 = ((int64_t)(ms58_device.prom_values[1]) << 15);
1000b848:	4b7d      	ldr	r3, [pc, #500]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b84a:	889b      	ldrh	r3, [r3, #4]
1000b84c:	61bb      	str	r3, [r7, #24]
1000b84e:	2300      	movs	r3, #0
1000b850:	61fb      	str	r3, [r7, #28]
1000b852:	69b9      	ldr	r1, [r7, #24]
1000b854:	69fa      	ldr	r2, [r7, #28]
1000b856:	000b      	movs	r3, r1
1000b858:	0c5b      	lsrs	r3, r3, #17
1000b85a:	0010      	movs	r0, r2
1000b85c:	03c0      	lsls	r0, r0, #15
1000b85e:	6678      	str	r0, [r7, #100]	; 0x64
1000b860:	6e78      	ldr	r0, [r7, #100]	; 0x64
1000b862:	4318      	orrs	r0, r3
1000b864:	6678      	str	r0, [r7, #100]	; 0x64
1000b866:	000b      	movs	r3, r1
1000b868:	03db      	lsls	r3, r3, #15
1000b86a:	663b      	str	r3, [r7, #96]	; 0x60
1000b86c:	4b75      	ldr	r3, [pc, #468]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b86e:	6e39      	ldr	r1, [r7, #96]	; 0x60
1000b870:	6e7a      	ldr	r2, [r7, #100]	; 0x64
1000b872:	6019      	str	r1, [r3, #0]
1000b874:	605a      	str	r2, [r3, #4]
    /* tv2: 23317 * 2366 = 55168022 */
    tv2 = ((int64_t)ms58_device.prom_values[3] * (int64_t)deltaT);
1000b876:	4b72      	ldr	r3, [pc, #456]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b878:	891b      	ldrh	r3, [r3, #8]
1000b87a:	613b      	str	r3, [r7, #16]
1000b87c:	2300      	movs	r3, #0
1000b87e:	617b      	str	r3, [r7, #20]
1000b880:	4b71      	ldr	r3, [pc, #452]	; (1000ba48 <sms_pressure_ms58_calculate+0x324>)
1000b882:	681b      	ldr	r3, [r3, #0]
1000b884:	60bb      	str	r3, [r7, #8]
1000b886:	17db      	asrs	r3, r3, #31
1000b888:	60fb      	str	r3, [r7, #12]
1000b88a:	4c70      	ldr	r4, [pc, #448]	; (1000ba4c <sms_pressure_ms58_calculate+0x328>)
1000b88c:	68ba      	ldr	r2, [r7, #8]
1000b88e:	68fb      	ldr	r3, [r7, #12]
1000b890:	6938      	ldr	r0, [r7, #16]
1000b892:	6979      	ldr	r1, [r7, #20]
1000b894:	47a0      	blx	r4
1000b896:	0003      	movs	r3, r0
1000b898:	000c      	movs	r4, r1
1000b89a:	4a6d      	ldr	r2, [pc, #436]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b89c:	6013      	str	r3, [r2, #0]
1000b89e:	6054      	str	r4, [r2, #4]
    /* tv3: 55168022 / 2^8 = 215500(.0859375) */
    tv3 = (tv2 >> 8);
1000b8a0:	4b6b      	ldr	r3, [pc, #428]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b8a2:	685c      	ldr	r4, [r3, #4]
1000b8a4:	681b      	ldr	r3, [r3, #0]
1000b8a6:	0622      	lsls	r2, r4, #24
1000b8a8:	0a19      	lsrs	r1, r3, #8
1000b8aa:	65b9      	str	r1, [r7, #88]	; 0x58
1000b8ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
1000b8ae:	4311      	orrs	r1, r2
1000b8b0:	65b9      	str	r1, [r7, #88]	; 0x58
1000b8b2:	1223      	asrs	r3, r4, #8
1000b8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
1000b8b6:	4b67      	ldr	r3, [pc, #412]	; (1000ba54 <sms_pressure_ms58_calculate+0x330>)
1000b8b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
1000b8ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000b8bc:	6019      	str	r1, [r3, #0]
1000b8be:	605a      	str	r2, [r3, #4]
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);
1000b8c0:	4b60      	ldr	r3, [pc, #384]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b8c2:	6819      	ldr	r1, [r3, #0]
1000b8c4:	685a      	ldr	r2, [r3, #4]
1000b8c6:	4b63      	ldr	r3, [pc, #396]	; (1000ba54 <sms_pressure_ms58_calculate+0x330>)
1000b8c8:	685c      	ldr	r4, [r3, #4]
1000b8ca:	681b      	ldr	r3, [r3, #0]
1000b8cc:	185b      	adds	r3, r3, r1
1000b8ce:	4154      	adcs	r4, r2
1000b8d0:	4a62      	ldr	r2, [pc, #392]	; (1000ba5c <sms_pressure_ms58_calculate+0x338>)
1000b8d2:	6013      	str	r3, [r2, #0]
1000b8d4:	6054      	str	r4, [r2, #4]

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)ms58_device.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000b8d6:	4b5a      	ldr	r3, [pc, #360]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b8d8:	695b      	ldr	r3, [r3, #20]
1000b8da:	603b      	str	r3, [r7, #0]
1000b8dc:	2300      	movs	r3, #0
1000b8de:	607b      	str	r3, [r7, #4]
1000b8e0:	4b5e      	ldr	r3, [pc, #376]	; (1000ba5c <sms_pressure_ms58_calculate+0x338>)
1000b8e2:	685c      	ldr	r4, [r3, #4]
1000b8e4:	681b      	ldr	r3, [r3, #0]
1000b8e6:	4d59      	ldr	r5, [pc, #356]	; (1000ba4c <sms_pressure_ms58_calculate+0x328>)
1000b8e8:	001a      	movs	r2, r3
1000b8ea:	0023      	movs	r3, r4
1000b8ec:	6838      	ldr	r0, [r7, #0]
1000b8ee:	6879      	ldr	r1, [r7, #4]
1000b8f0:	47a8      	blx	r5
1000b8f2:	0003      	movs	r3, r0
1000b8f4:	000c      	movs	r4, r1
1000b8f6:	02e2      	lsls	r2, r4, #11
1000b8f8:	0d59      	lsrs	r1, r3, #21
1000b8fa:	6539      	str	r1, [r7, #80]	; 0x50
1000b8fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000b8fe:	4311      	orrs	r1, r2
1000b900:	6539      	str	r1, [r7, #80]	; 0x50
1000b902:	1563      	asrs	r3, r4, #21
1000b904:	657b      	str	r3, [r7, #84]	; 0x54
1000b906:	4b4f      	ldr	r3, [pc, #316]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b908:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000b90a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1000b90c:	6019      	str	r1, [r3, #0]
1000b90e:	605a      	str	r2, [r3, #4]
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
1000b910:	4b4c      	ldr	r3, [pc, #304]	; (1000ba44 <sms_pressure_ms58_calculate+0x320>)
1000b912:	6819      	ldr	r1, [r3, #0]
1000b914:	685a      	ldr	r2, [r3, #4]
1000b916:	4b50      	ldr	r3, [pc, #320]	; (1000ba58 <sms_pressure_ms58_calculate+0x334>)
1000b918:	685c      	ldr	r4, [r3, #4]
1000b91a:	681b      	ldr	r3, [r3, #0]
1000b91c:	1ac9      	subs	r1, r1, r3
1000b91e:	41a2      	sbcs	r2, r4
1000b920:	000b      	movs	r3, r1
1000b922:	0014      	movs	r4, r2
1000b924:	4a4a      	ldr	r2, [pc, #296]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b926:	6013      	str	r3, [r2, #0]
1000b928:	6054      	str	r4, [r2, #4]
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    ms58_device.pressure = (int32_t)(tv2 >> 15);
1000b92a:	4b49      	ldr	r3, [pc, #292]	; (1000ba50 <sms_pressure_ms58_calculate+0x32c>)
1000b92c:	685c      	ldr	r4, [r3, #4]
1000b92e:	681b      	ldr	r3, [r3, #0]
1000b930:	0462      	lsls	r2, r4, #17
1000b932:	0bd9      	lsrs	r1, r3, #15
1000b934:	64b9      	str	r1, [r7, #72]	; 0x48
1000b936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
1000b938:	4311      	orrs	r1, r2
1000b93a:	64b9      	str	r1, [r7, #72]	; 0x48
1000b93c:	13e3      	asrs	r3, r4, #15
1000b93e:	64fb      	str	r3, [r7, #76]	; 0x4c
1000b940:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000b942:	4b3f      	ldr	r3, [pc, #252]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b944:	61da      	str	r2, [r3, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = 0x%08lx  pressure = 0x%08lx", ms58_device.temperature, ms58_device.pressure);
1000b946:	4b46      	ldr	r3, [pc, #280]	; (1000ba60 <sms_pressure_ms58_calculate+0x33c>)
1000b948:	0018      	movs	r0, r3
1000b94a:	4b46      	ldr	r3, [pc, #280]	; (1000ba64 <sms_pressure_ms58_calculate+0x340>)
1000b94c:	4798      	blx	r3
1000b94e:	4b3c      	ldr	r3, [pc, #240]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b950:	6a19      	ldr	r1, [r3, #32]
1000b952:	4b3b      	ldr	r3, [pc, #236]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b954:	69da      	ldr	r2, [r3, #28]
1000b956:	4b44      	ldr	r3, [pc, #272]	; (1000ba68 <sms_pressure_ms58_calculate+0x344>)
1000b958:	0018      	movs	r0, r3
1000b95a:	4b44      	ldr	r3, [pc, #272]	; (1000ba6c <sms_pressure_ms58_calculate+0x348>)
1000b95c:	4798      	blx	r3
    
    sms_pressure_char_values[0] = (uint8_t)(ms58_device.temperature & 0xff);
1000b95e:	4b38      	ldr	r3, [pc, #224]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b960:	6a1b      	ldr	r3, [r3, #32]
1000b962:	b2da      	uxtb	r2, r3
1000b964:	4b42      	ldr	r3, [pc, #264]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b966:	701a      	strb	r2, [r3, #0]
    sms_pressure_char_values[1] = (uint8_t)((ms58_device.temperature >> 8) & 0xff);
1000b968:	4b35      	ldr	r3, [pc, #212]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b96a:	6a1b      	ldr	r3, [r3, #32]
1000b96c:	121b      	asrs	r3, r3, #8
1000b96e:	b2da      	uxtb	r2, r3
1000b970:	4b3f      	ldr	r3, [pc, #252]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b972:	705a      	strb	r2, [r3, #1]
    sms_pressure_char_values[2] = (uint8_t)((ms58_device.temperature >> 16) & 0xff);
1000b974:	4b32      	ldr	r3, [pc, #200]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b976:	6a1b      	ldr	r3, [r3, #32]
1000b978:	141b      	asrs	r3, r3, #16
1000b97a:	b2da      	uxtb	r2, r3
1000b97c:	4b3c      	ldr	r3, [pc, #240]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b97e:	709a      	strb	r2, [r3, #2]
    sms_pressure_char_values[3] = (uint8_t)((ms58_device.temperature >> 24) & 0xff);
1000b980:	4b2f      	ldr	r3, [pc, #188]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b982:	6a1b      	ldr	r3, [r3, #32]
1000b984:	161b      	asrs	r3, r3, #24
1000b986:	b2da      	uxtb	r2, r3
1000b988:	4b39      	ldr	r3, [pc, #228]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b98a:	70da      	strb	r2, [r3, #3]
    sms_pressure_char_values[4] = (uint8_t)(ms58_device.pressure & 0xff);
1000b98c:	4b2c      	ldr	r3, [pc, #176]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b98e:	69db      	ldr	r3, [r3, #28]
1000b990:	b2da      	uxtb	r2, r3
1000b992:	4b37      	ldr	r3, [pc, #220]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b994:	711a      	strb	r2, [r3, #4]
    sms_pressure_char_values[5] = (uint8_t)((ms58_device.pressure >> 8) & 0xff);
1000b996:	4b2a      	ldr	r3, [pc, #168]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b998:	69db      	ldr	r3, [r3, #28]
1000b99a:	121b      	asrs	r3, r3, #8
1000b99c:	b2da      	uxtb	r2, r3
1000b99e:	4b34      	ldr	r3, [pc, #208]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b9a0:	715a      	strb	r2, [r3, #5]
    sms_pressure_char_values[6] = (uint8_t)((ms58_device.pressure >> 16) & 0xff);
1000b9a2:	4b27      	ldr	r3, [pc, #156]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b9a4:	69db      	ldr	r3, [r3, #28]
1000b9a6:	141b      	asrs	r3, r3, #16
1000b9a8:	b2da      	uxtb	r2, r3
1000b9aa:	4b31      	ldr	r3, [pc, #196]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b9ac:	719a      	strb	r2, [r3, #6]
    sms_pressure_char_values[7] = (uint8_t)((ms58_device.pressure >> 24) & 0xff);
1000b9ae:	4b24      	ldr	r3, [pc, #144]	; (1000ba40 <sms_pressure_ms58_calculate+0x31c>)
1000b9b0:	69db      	ldr	r3, [r3, #28]
1000b9b2:	161b      	asrs	r3, r3, #24
1000b9b4:	b2da      	uxtb	r2, r3
1000b9b6:	4b2e      	ldr	r3, [pc, #184]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b9b8:	71da      	strb	r2, [r3, #7]
    at_ble_status_t status = at_ble_characteristic_value_set(sms_pressure_service_handler.serv_chars.char_val_handle, &sms_pressure_char_values, (8 * sizeof(uint8_t)));
1000b9ba:	4b2e      	ldr	r3, [pc, #184]	; (1000ba74 <sms_pressure_ms58_calculate+0x350>)
1000b9bc:	8a9b      	ldrh	r3, [r3, #20]
1000b9be:	2287      	movs	r2, #135	; 0x87
1000b9c0:	18bc      	adds	r4, r7, r2
1000b9c2:	492b      	ldr	r1, [pc, #172]	; (1000ba70 <sms_pressure_ms58_calculate+0x34c>)
1000b9c4:	2208      	movs	r2, #8
1000b9c6:	0018      	movs	r0, r3
1000b9c8:	4b2b      	ldr	r3, [pc, #172]	; (1000ba78 <sms_pressure_ms58_calculate+0x354>)
1000b9ca:	4798      	blx	r3
1000b9cc:	0003      	movs	r3, r0
1000b9ce:	7023      	strb	r3, [r4, #0]
    if(status != AT_BLE_SUCCESS) {
1000b9d0:	2387      	movs	r3, #135	; 0x87
1000b9d2:	18fb      	adds	r3, r7, r3
1000b9d4:	781b      	ldrb	r3, [r3, #0]
1000b9d6:	2b00      	cmp	r3, #0
1000b9d8:	d00c      	beq.n	1000b9f4 <sms_pressure_ms58_calculate+0x2d0>
        DBG_LOG_DEV("[sms_pressure_ms58_calculate]  updating the characteristic failed, reason %d", status);
1000b9da:	4b21      	ldr	r3, [pc, #132]	; (1000ba60 <sms_pressure_ms58_calculate+0x33c>)
1000b9dc:	0018      	movs	r0, r3
1000b9de:	4b21      	ldr	r3, [pc, #132]	; (1000ba64 <sms_pressure_ms58_calculate+0x340>)
1000b9e0:	4798      	blx	r3
1000b9e2:	2387      	movs	r3, #135	; 0x87
1000b9e4:	18fb      	adds	r3, r7, r3
1000b9e6:	781a      	ldrb	r2, [r3, #0]
1000b9e8:	4b24      	ldr	r3, [pc, #144]	; (1000ba7c <sms_pressure_ms58_calculate+0x358>)
1000b9ea:	0011      	movs	r1, r2
1000b9ec:	0018      	movs	r0, r3
1000b9ee:	4b1f      	ldr	r3, [pc, #124]	; (1000ba6c <sms_pressure_ms58_calculate+0x348>)
1000b9f0:	4798      	blx	r3
        }
        else {
            DBG_LOG_DEV("[sms_pressure_ms58_calculate]  sending notification...");
        }
    }
}
1000b9f2:	e021      	b.n	1000ba38 <sms_pressure_ms58_calculate+0x314>
    at_ble_status_t status = at_ble_characteristic_value_set(sms_pressure_service_handler.serv_chars.char_val_handle, &sms_pressure_char_values, (8 * sizeof(uint8_t)));
    if(status != AT_BLE_SUCCESS) {
        DBG_LOG_DEV("[sms_pressure_ms58_calculate]  updating the characteristic failed, reason %d", status);
    }
    else {
        status = at_ble_notification_send(sms_connection_handle, sms_pressure_service_handler.serv_chars.char_val_handle);
1000b9f4:	4b22      	ldr	r3, [pc, #136]	; (1000ba80 <sms_pressure_ms58_calculate+0x35c>)
1000b9f6:	881a      	ldrh	r2, [r3, #0]
1000b9f8:	4b1e      	ldr	r3, [pc, #120]	; (1000ba74 <sms_pressure_ms58_calculate+0x350>)
1000b9fa:	8a9b      	ldrh	r3, [r3, #20]
1000b9fc:	2187      	movs	r1, #135	; 0x87
1000b9fe:	187c      	adds	r4, r7, r1
1000ba00:	0019      	movs	r1, r3
1000ba02:	0010      	movs	r0, r2
1000ba04:	4b1f      	ldr	r3, [pc, #124]	; (1000ba84 <sms_pressure_ms58_calculate+0x360>)
1000ba06:	4798      	blx	r3
1000ba08:	0003      	movs	r3, r0
1000ba0a:	7023      	strb	r3, [r4, #0]
        if(status != AT_BLE_SUCCESS) {
1000ba0c:	2387      	movs	r3, #135	; 0x87
1000ba0e:	18fb      	adds	r3, r7, r3
1000ba10:	781b      	ldrb	r3, [r3, #0]
1000ba12:	2b00      	cmp	r3, #0
1000ba14:	d008      	beq.n	1000ba28 <sms_pressure_ms58_calculate+0x304>
            DBG_LOG_DEV("[sms_pressure_ms58_calculate]  sending notification failed");
1000ba16:	4b12      	ldr	r3, [pc, #72]	; (1000ba60 <sms_pressure_ms58_calculate+0x33c>)
1000ba18:	0018      	movs	r0, r3
1000ba1a:	4b12      	ldr	r3, [pc, #72]	; (1000ba64 <sms_pressure_ms58_calculate+0x340>)
1000ba1c:	4798      	blx	r3
1000ba1e:	4b1a      	ldr	r3, [pc, #104]	; (1000ba88 <sms_pressure_ms58_calculate+0x364>)
1000ba20:	0018      	movs	r0, r3
1000ba22:	4b12      	ldr	r3, [pc, #72]	; (1000ba6c <sms_pressure_ms58_calculate+0x348>)
1000ba24:	4798      	blx	r3
        }
        else {
            DBG_LOG_DEV("[sms_pressure_ms58_calculate]  sending notification...");
        }
    }
}
1000ba26:	e007      	b.n	1000ba38 <sms_pressure_ms58_calculate+0x314>
        status = at_ble_notification_send(sms_connection_handle, sms_pressure_service_handler.serv_chars.char_val_handle);
        if(status != AT_BLE_SUCCESS) {
            DBG_LOG_DEV("[sms_pressure_ms58_calculate]  sending notification failed");
        }
        else {
            DBG_LOG_DEV("[sms_pressure_ms58_calculate]  sending notification...");
1000ba28:	4b0d      	ldr	r3, [pc, #52]	; (1000ba60 <sms_pressure_ms58_calculate+0x33c>)
1000ba2a:	0018      	movs	r0, r3
1000ba2c:	4b0d      	ldr	r3, [pc, #52]	; (1000ba64 <sms_pressure_ms58_calculate+0x340>)
1000ba2e:	4798      	blx	r3
1000ba30:	4b16      	ldr	r3, [pc, #88]	; (1000ba8c <sms_pressure_ms58_calculate+0x368>)
1000ba32:	0018      	movs	r0, r3
1000ba34:	4b0d      	ldr	r3, [pc, #52]	; (1000ba6c <sms_pressure_ms58_calculate+0x348>)
1000ba36:	4798      	blx	r3
        }
    }
}
1000ba38:	46c0      	nop			; (mov r8, r8)
1000ba3a:	46bd      	mov	sp, r7
1000ba3c:	b022      	add	sp, #136	; 0x88
1000ba3e:	bdb0      	pop	{r4, r5, r7, pc}
1000ba40:	1001c1c0 	.word	0x1001c1c0
1000ba44:	1001b948 	.word	0x1001b948
1000ba48:	1001b950 	.word	0x1001b950
1000ba4c:	10017481 	.word	0x10017481
1000ba50:	1001b958 	.word	0x1001b958
1000ba54:	1001b960 	.word	0x1001b960
1000ba58:	1001b968 	.word	0x1001b968
1000ba5c:	1001b970 	.word	0x1001b970
1000ba60:	1001a7e0 	.word	0x1001a7e0
1000ba64:	10019095 	.word	0x10019095
1000ba68:	1001a7e4 	.word	0x1001a7e4
1000ba6c:	10018f75 	.word	0x10018f75
1000ba70:	1001c24c 	.word	0x1001c24c
1000ba74:	1001c254 	.word	0x1001c254
1000ba78:	1001516d 	.word	0x1001516d
1000ba7c:	1001a82c 	.word	0x1001a82c
1000ba80:	1001c164 	.word	0x1001c164
1000ba84:	1001530d 	.word	0x1001530d
1000ba88:	1001a87c 	.word	0x1001a87c
1000ba8c:	1001a8b8 	.word	0x1001a8b8

1000ba90 <sms_pressure_service_init>:


void sms_pressure_service_init(gatt_service_handler_t *sms_pressure_serv, uint8_t *sms_pressure_value)
{
1000ba90:	b580      	push	{r7, lr}
1000ba92:	b082      	sub	sp, #8
1000ba94:	af00      	add	r7, sp, #0
1000ba96:	6078      	str	r0, [r7, #4]
1000ba98:	6039      	str	r1, [r7, #0]
    //SMS button service characteristic
    sms_pressure_serv->serv_handle = 0;
1000ba9a:	687b      	ldr	r3, [r7, #4]
1000ba9c:	2200      	movs	r2, #0
1000ba9e:	825a      	strh	r2, [r3, #18]
    sms_pressure_serv->serv_uuid.type = AT_BLE_UUID_128;
1000baa0:	687b      	ldr	r3, [r7, #4]
1000baa2:	2202      	movs	r2, #2
1000baa4:	701a      	strb	r2, [r3, #0]
    sms_pressure_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000baa6:	687b      	ldr	r3, [r7, #4]
1000baa8:	2200      	movs	r2, #0
1000baaa:	705a      	strb	r2, [r3, #1]
    sms_pressure_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000baac:	687b      	ldr	r3, [r7, #4]
1000baae:	2200      	movs	r2, #0
1000bab0:	709a      	strb	r2, [r3, #2]
    sms_pressure_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000bab2:	687b      	ldr	r3, [r7, #4]
1000bab4:	2257      	movs	r2, #87	; 0x57
1000bab6:	70da      	strb	r2, [r3, #3]
    sms_pressure_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000bab8:	687b      	ldr	r3, [r7, #4]
1000baba:	221c      	movs	r2, #28
1000babc:	711a      	strb	r2, [r3, #4]
    sms_pressure_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
1000babe:	687b      	ldr	r3, [r7, #4]
1000bac0:	2200      	movs	r2, #0
1000bac2:	715a      	strb	r2, [r3, #5]
    sms_pressure_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000bac4:	687b      	ldr	r3, [r7, #4]
1000bac6:	2200      	movs	r2, #0
1000bac8:	719a      	strb	r2, [r3, #6]
    sms_pressure_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000baca:	687b      	ldr	r3, [r7, #4]
1000bacc:	22be      	movs	r2, #190	; 0xbe
1000bace:	71da      	strb	r2, [r3, #7]
    sms_pressure_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000bad0:	687b      	ldr	r3, [r7, #4]
1000bad2:	225a      	movs	r2, #90	; 0x5a
1000bad4:	721a      	strb	r2, [r3, #8]
    sms_pressure_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
1000bad6:	687b      	ldr	r3, [r7, #4]
1000bad8:	2200      	movs	r2, #0
1000bada:	725a      	strb	r2, [r3, #9]
    sms_pressure_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
1000badc:	687b      	ldr	r3, [r7, #4]
1000bade:	2200      	movs	r2, #0
1000bae0:	729a      	strb	r2, [r3, #10]
    sms_pressure_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000bae2:	687b      	ldr	r3, [r7, #4]
1000bae4:	2230      	movs	r2, #48	; 0x30
1000bae6:	72da      	strb	r2, [r3, #11]
    sms_pressure_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000bae8:	687b      	ldr	r3, [r7, #4]
1000baea:	2250      	movs	r2, #80	; 0x50
1000baec:	731a      	strb	r2, [r3, #12]
    sms_pressure_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
1000baee:	687b      	ldr	r3, [r7, #4]
1000baf0:	2200      	movs	r2, #0
1000baf2:	735a      	strb	r2, [r3, #13]
    sms_pressure_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
1000baf4:	687b      	ldr	r3, [r7, #4]
1000baf6:	2200      	movs	r2, #0
1000baf8:	739a      	strb	r2, [r3, #14]
    sms_pressure_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000bafa:	687b      	ldr	r3, [r7, #4]
1000bafc:	22ee      	movs	r2, #238	; 0xee
1000bafe:	73da      	strb	r2, [r3, #15]
    sms_pressure_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
1000bb00:	687b      	ldr	r3, [r7, #4]
1000bb02:	22ee      	movs	r2, #238	; 0xee
1000bb04:	741a      	strb	r2, [r3, #16]
    
    sms_pressure_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000bb06:	687b      	ldr	r3, [r7, #4]
1000bb08:	2212      	movs	r2, #18
1000bb0a:	851a      	strh	r2, [r3, #40]	; 0x28
    sms_pressure_serv->serv_chars.init_value = sms_pressure_value;             /* value */
1000bb0c:	687b      	ldr	r3, [r7, #4]
1000bb0e:	683a      	ldr	r2, [r7, #0]
1000bb10:	62da      	str	r2, [r3, #44]	; 0x2c
    sms_pressure_serv->serv_chars.value_init_len = 8 * sizeof(uint8_t);
1000bb12:	687b      	ldr	r3, [r7, #4]
1000bb14:	2208      	movs	r2, #8
1000bb16:	861a      	strh	r2, [r3, #48]	; 0x30
    sms_pressure_serv->serv_chars.value_max_len = 8 * sizeof(uint8_t);
1000bb18:	687b      	ldr	r3, [r7, #4]
1000bb1a:	2208      	movs	r2, #8
1000bb1c:	865a      	strh	r2, [r3, #50]	; 0x32
    sms_pressure_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
1000bb1e:	687b      	ldr	r3, [r7, #4]
1000bb20:	2234      	movs	r2, #52	; 0x34
1000bb22:	2111      	movs	r1, #17
1000bb24:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000bb26:	687b      	ldr	r3, [r7, #4]
1000bb28:	2200      	movs	r2, #0
1000bb2a:	639a      	str	r2, [r3, #56]	; 0x38
    sms_pressure_serv->serv_chars.user_desc_len = 0;
1000bb2c:	687b      	ldr	r3, [r7, #4]
1000bb2e:	2200      	movs	r2, #0
1000bb30:	879a      	strh	r2, [r3, #60]	; 0x3c
    sms_pressure_serv->serv_chars.user_desc_max_len = 0;
1000bb32:	687b      	ldr	r3, [r7, #4]
1000bb34:	2200      	movs	r2, #0
1000bb36:	87da      	strh	r2, [r3, #62]	; 0x3e
    sms_pressure_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000bb38:	687b      	ldr	r3, [r7, #4]
1000bb3a:	2244      	movs	r2, #68	; 0x44
1000bb3c:	2100      	movs	r1, #0
1000bb3e:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000bb40:	687b      	ldr	r3, [r7, #4]
1000bb42:	2245      	movs	r2, #69	; 0x45
1000bb44:	2100      	movs	r1, #0
1000bb46:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000bb48:	687b      	ldr	r3, [r7, #4]
1000bb4a:	2246      	movs	r2, #70	; 0x46
1000bb4c:	2100      	movs	r1, #0
1000bb4e:	5499      	strb	r1, [r3, r2]
    sms_pressure_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
1000bb50:	687b      	ldr	r3, [r7, #4]
1000bb52:	2248      	movs	r2, #72	; 0x48
1000bb54:	2100      	movs	r1, #0
1000bb56:	5299      	strh	r1, [r3, r2]
    sms_pressure_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000bb58:	687b      	ldr	r3, [r7, #4]
1000bb5a:	224a      	movs	r2, #74	; 0x4a
1000bb5c:	2100      	movs	r1, #0
1000bb5e:	5299      	strh	r1, [r3, r2]
    sms_pressure_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
1000bb60:	687b      	ldr	r3, [r7, #4]
1000bb62:	224c      	movs	r2, #76	; 0x4c
1000bb64:	2100      	movs	r1, #0
1000bb66:	5299      	strh	r1, [r3, r2]
    //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
    //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
    //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
    //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
    
    sms_pressure_serv->serv_chars.presentation_format = NULL;       /* presentation format */
1000bb68:	687b      	ldr	r3, [r7, #4]
1000bb6a:	2200      	movs	r2, #0
1000bb6c:	641a      	str	r2, [r3, #64]	; 0x40
    //DBG_LOG("[sms_imu_service_init]  setting primary service");
    //DBG_LOG("  - uuid: 0x%02x", (unsigned int)sms_pressure_serv->serv_uuid.uuid);
    //DBG_LOG("  - handle: 0x%02x", sms_pressure_serv->serv_handle);
    //DBG_LOG("  - char uuid: 0x%02x%02x", sms_pressure_serv->serv_chars.uuid.uuid[1], sms_pressure_serv->serv_chars.uuid.uuid[0]);
    //DBG_LOG("  - char init length: %d", sms_pressure_serv->serv_chars.value_init_len);
}
1000bb6e:	46c0      	nop			; (mov r8, r8)
1000bb70:	46bd      	mov	sp, r7
1000bb72:	b002      	add	sp, #8
1000bb74:	bd80      	pop	{r7, pc}
1000bb76:	46c0      	nop			; (mov r8, r8)

1000bb78 <sms_pressure_primary_service_define>:

at_ble_status_t sms_pressure_primary_service_define(gatt_service_handler_t *sms_service)
{
1000bb78:	b590      	push	{r4, r7, lr}
1000bb7a:	b085      	sub	sp, #20
1000bb7c:	af02      	add	r7, sp, #8
1000bb7e:	6078      	str	r0, [r7, #4]
    //DBG_LOG("[sms_imu_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
    //(unsigned int)sms_service->serv_uuid.uuid,
    //sms_service->serv_handle,
    //sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
    //sms_service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
1000bb80:	6878      	ldr	r0, [r7, #4]
1000bb82:	687b      	ldr	r3, [r7, #4]
1000bb84:	3312      	adds	r3, #18
1000bb86:	0019      	movs	r1, r3
1000bb88:	687b      	ldr	r3, [r7, #4]
1000bb8a:	3314      	adds	r3, #20
1000bb8c:	2201      	movs	r2, #1
1000bb8e:	9201      	str	r2, [sp, #4]
1000bb90:	9300      	str	r3, [sp, #0]
1000bb92:	2300      	movs	r3, #0
1000bb94:	2200      	movs	r2, #0
1000bb96:	4c03      	ldr	r4, [pc, #12]	; (1000bba4 <sms_pressure_primary_service_define+0x2c>)
1000bb98:	47a0      	blx	r4
1000bb9a:	0003      	movs	r3, r0
}
1000bb9c:	0018      	movs	r0, r3
1000bb9e:	46bd      	mov	sp, r7
1000bba0:	b003      	add	sp, #12
1000bba2:	bd90      	pop	{r4, r7, pc}
1000bba4:	10015139 	.word	0x10015139

1000bba8 <spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void spi_master_configure(void)
{
1000bba8:	b580      	push	{r7, lr}
1000bbaa:	b08c      	sub	sp, #48	; 0x30
1000bbac:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[spi_master_configure]  configuring SPI masters and attaching slaves...");
1000bbae:	4b29      	ldr	r3, [pc, #164]	; (1000bc54 <spi_master_configure+0xac>)
1000bbb0:	0018      	movs	r0, r3
1000bbb2:	4b29      	ldr	r3, [pc, #164]	; (1000bc58 <spi_master_configure+0xb0>)
1000bbb4:	4798      	blx	r3
1000bbb6:	4b29      	ldr	r3, [pc, #164]	; (1000bc5c <spi_master_configure+0xb4>)
1000bbb8:	0018      	movs	r0, r3
1000bbba:	4b29      	ldr	r3, [pc, #164]	; (1000bc60 <spi_master_configure+0xb8>)
1000bbbc:	4798      	blx	r3

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000bbbe:	1d3b      	adds	r3, r7, #4
1000bbc0:	0018      	movs	r0, r3
1000bbc2:	4b28      	ldr	r3, [pc, #160]	; (1000bc64 <spi_master_configure+0xbc>)
1000bbc4:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SPI_SLAVE_MS58_SS_PIN;
1000bbc6:	1d3b      	adds	r3, r7, #4
1000bbc8:	2210      	movs	r2, #16
1000bbca:	701a      	strb	r2, [r3, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000bbcc:	1d3a      	adds	r2, r7, #4
1000bbce:	4b26      	ldr	r3, [pc, #152]	; (1000bc68 <spi_master_configure+0xc0>)
1000bbd0:	0011      	movs	r1, r2
1000bbd2:	0018      	movs	r0, r3
1000bbd4:	4b25      	ldr	r3, [pc, #148]	; (1000bc6c <spi_master_configure+0xc4>)
1000bbd6:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000bbd8:	2308      	movs	r3, #8
1000bbda:	18fb      	adds	r3, r7, r3
1000bbdc:	0018      	movs	r0, r3
1000bbde:	4b24      	ldr	r3, [pc, #144]	; (1000bc70 <spi_master_configure+0xc8>)
1000bbe0:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000bbe2:	2308      	movs	r3, #8
1000bbe4:	18fb      	adds	r3, r7, r3
1000bbe6:	2268      	movs	r2, #104	; 0x68
1000bbe8:	711a      	strb	r2, [r3, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000bbea:	2308      	movs	r3, #8
1000bbec:	18fb      	adds	r3, r7, r3
1000bbee:	2200      	movs	r2, #0
1000bbf0:	709a      	strb	r2, [r3, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000bbf2:	2308      	movs	r3, #8
1000bbf4:	18fb      	adds	r3, r7, r3
1000bbf6:	2211      	movs	r2, #17
1000bbf8:	609a      	str	r2, [r3, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000bbfa:	2308      	movs	r3, #8
1000bbfc:	18fb      	adds	r3, r7, r3
1000bbfe:	2204      	movs	r2, #4
1000bc00:	619a      	str	r2, [r3, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000bc02:	2308      	movs	r3, #8
1000bc04:	18fb      	adds	r3, r7, r3
1000bc06:	2213      	movs	r2, #19
1000bc08:	60da      	str	r2, [r3, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000bc0a:	2308      	movs	r3, #8
1000bc0c:	18fb      	adds	r3, r7, r3
1000bc0e:	2204      	movs	r2, #4
1000bc10:	61da      	str	r2, [r3, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000bc12:	2308      	movs	r3, #8
1000bc14:	18fb      	adds	r3, r7, r3
1000bc16:	2201      	movs	r2, #1
1000bc18:	4252      	negs	r2, r2
1000bc1a:	611a      	str	r2, [r3, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000bc1c:	2308      	movs	r3, #8
1000bc1e:	18fb      	adds	r3, r7, r3
1000bc20:	2201      	movs	r2, #1
1000bc22:	4252      	negs	r2, r2
1000bc24:	621a      	str	r2, [r3, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000bc26:	2308      	movs	r3, #8
1000bc28:	18fb      	adds	r3, r7, r3
1000bc2a:	2212      	movs	r2, #18
1000bc2c:	615a      	str	r2, [r3, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000bc2e:	2308      	movs	r3, #8
1000bc30:	18fb      	adds	r3, r7, r3
1000bc32:	2204      	movs	r2, #4
1000bc34:	625a      	str	r2, [r3, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000bc36:	2308      	movs	r3, #8
1000bc38:	18fa      	adds	r2, r7, r3
1000bc3a:	490e      	ldr	r1, [pc, #56]	; (1000bc74 <spi_master_configure+0xcc>)
1000bc3c:	4b0e      	ldr	r3, [pc, #56]	; (1000bc78 <spi_master_configure+0xd0>)
1000bc3e:	0018      	movs	r0, r3
1000bc40:	4b0e      	ldr	r3, [pc, #56]	; (1000bc7c <spi_master_configure+0xd4>)
1000bc42:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000bc44:	4b0c      	ldr	r3, [pc, #48]	; (1000bc78 <spi_master_configure+0xd0>)
1000bc46:	0018      	movs	r0, r3
1000bc48:	4b0d      	ldr	r3, [pc, #52]	; (1000bc80 <spi_master_configure+0xd8>)
1000bc4a:	4798      	blx	r3
}
1000bc4c:	46c0      	nop			; (mov r8, r8)
1000bc4e:	46bd      	mov	sp, r7
1000bc50:	b00c      	add	sp, #48	; 0x30
1000bc52:	bd80      	pop	{r7, pc}
1000bc54:	1001a8f0 	.word	0x1001a8f0
1000bc58:	10019095 	.word	0x10019095
1000bc5c:	1001a8f4 	.word	0x1001a8f4
1000bc60:	10018f75 	.word	0x10018f75
1000bc64:	1000e081 	.word	0x1000e081
1000bc68:	1001c1fc 	.word	0x1001c1fc
1000bc6c:	1000e105 	.word	0x1000e105
1000bc70:	1000e0a5 	.word	0x1000e0a5
1000bc74:	40007000 	.word	0x40007000
1000bc78:	1001c220 	.word	0x1001c220
1000bc7c:	1000e1c5 	.word	0x1000e1c5
1000bc80:	1000e3c1 	.word	0x1000e3c1

1000bc84 <spi_master_transceived_callback>:

/* SPI master transceive callback:
 * - set spi_transceived_done flag
 */
void spi_master_transceived_callback(struct spi_module *const module)
{
1000bc84:	b580      	push	{r7, lr}
1000bc86:	b082      	sub	sp, #8
1000bc88:	af00      	add	r7, sp, #0
1000bc8a:	6078      	str	r0, [r7, #4]
    spi_transceived_done = true;
1000bc8c:	4b03      	ldr	r3, [pc, #12]	; (1000bc9c <spi_master_transceived_callback+0x18>)
1000bc8e:	2201      	movs	r2, #1
1000bc90:	701a      	strb	r2, [r3, #0]
}
1000bc92:	46c0      	nop			; (mov r8, r8)
1000bc94:	46bd      	mov	sp, r7
1000bc96:	b002      	add	sp, #8
1000bc98:	bd80      	pop	{r7, pc}
1000bc9a:	46c0      	nop			; (mov r8, r8)
1000bc9c:	1001c0bd 	.word	0x1001c0bd

1000bca0 <spi_master_configure_callbacks>:
/* Configure SPI master callbacks:
 * - register buffer transceive callback for each spi master instance
 * - enable callbacks
 */
void spi_master_configure_callbacks(void)
{
1000bca0:	b580      	push	{r7, lr}
1000bca2:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("[spi_master_configure_callbacks]  configuring SPI callbacks...");
1000bca4:	4b11      	ldr	r3, [pc, #68]	; (1000bcec <spi_master_configure_callbacks+0x4c>)
1000bca6:	0018      	movs	r0, r3
1000bca8:	4b11      	ldr	r3, [pc, #68]	; (1000bcf0 <spi_master_configure_callbacks+0x50>)
1000bcaa:	4798      	blx	r3
1000bcac:	4b11      	ldr	r3, [pc, #68]	; (1000bcf4 <spi_master_configure_callbacks+0x54>)
1000bcae:	0018      	movs	r0, r3
1000bcb0:	4b11      	ldr	r3, [pc, #68]	; (1000bcf8 <spi_master_configure_callbacks+0x58>)
1000bcb2:	4798      	blx	r3
    spi_transceived_done = false;
1000bcb4:	4b11      	ldr	r3, [pc, #68]	; (1000bcfc <spi_master_configure_callbacks+0x5c>)
1000bcb6:	2200      	movs	r2, #0
1000bcb8:	701a      	strb	r2, [r3, #0]

    spi_register_callback(&spi_master_ms58_instance, spi_master_transceived_callback, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000bcba:	4911      	ldr	r1, [pc, #68]	; (1000bd00 <spi_master_configure_callbacks+0x60>)
1000bcbc:	4b11      	ldr	r3, [pc, #68]	; (1000bd04 <spi_master_configure_callbacks+0x64>)
1000bcbe:	2202      	movs	r2, #2
1000bcc0:	0018      	movs	r0, r3
1000bcc2:	4b11      	ldr	r3, [pc, #68]	; (1000bd08 <spi_master_configure_callbacks+0x68>)
1000bcc4:	4798      	blx	r3
    spi_register_callback(&spi_master_mpu9250_instance, spi_master_transceived_callback, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000bcc6:	490e      	ldr	r1, [pc, #56]	; (1000bd00 <spi_master_configure_callbacks+0x60>)
1000bcc8:	4b10      	ldr	r3, [pc, #64]	; (1000bd0c <spi_master_configure_callbacks+0x6c>)
1000bcca:	2202      	movs	r2, #2
1000bccc:	0018      	movs	r0, r3
1000bcce:	4b0e      	ldr	r3, [pc, #56]	; (1000bd08 <spi_master_configure_callbacks+0x68>)
1000bcd0:	4798      	blx	r3

    spi_enable_callback(&spi_master_ms58_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000bcd2:	4b0c      	ldr	r3, [pc, #48]	; (1000bd04 <spi_master_configure_callbacks+0x64>)
1000bcd4:	2102      	movs	r1, #2
1000bcd6:	0018      	movs	r0, r3
1000bcd8:	4b0d      	ldr	r3, [pc, #52]	; (1000bd10 <spi_master_configure_callbacks+0x70>)
1000bcda:	4798      	blx	r3
    spi_enable_callback(&spi_master_mpu9250_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
1000bcdc:	4b0b      	ldr	r3, [pc, #44]	; (1000bd0c <spi_master_configure_callbacks+0x6c>)
1000bcde:	2102      	movs	r1, #2
1000bce0:	0018      	movs	r0, r3
1000bce2:	4b0b      	ldr	r3, [pc, #44]	; (1000bd10 <spi_master_configure_callbacks+0x70>)
1000bce4:	4798      	blx	r3
}
1000bce6:	46c0      	nop			; (mov r8, r8)
1000bce8:	46bd      	mov	sp, r7
1000bcea:	bd80      	pop	{r7, pc}
1000bcec:	1001a8f0 	.word	0x1001a8f0
1000bcf0:	10019095 	.word	0x10019095
1000bcf4:	1001a93c 	.word	0x1001a93c
1000bcf8:	10018f75 	.word	0x10018f75
1000bcfc:	1001c0bd 	.word	0x1001c0bd
1000bd00:	1000bc85 	.word	0x1000bc85
1000bd04:	1001c220 	.word	0x1001c220
1000bd08:	1000eccd 	.word	0x1000eccd
1000bd0c:	1001c168 	.word	0x1001c168
1000bd10:	1000ed11 	.word	0x1000ed11

1000bd14 <spi_master_transceive>:
 * - enable selected slave
 * - start transceive job
 * - wait until spi_transceive_done is set
 * - disable selected slave
 */
int spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000bd14:	b590      	push	{r4, r7, lr}
1000bd16:	b087      	sub	sp, #28
1000bd18:	af00      	add	r7, sp, #0
1000bd1a:	60f8      	str	r0, [r7, #12]
1000bd1c:	60b9      	str	r1, [r7, #8]
1000bd1e:	607a      	str	r2, [r7, #4]
1000bd20:	603b      	str	r3, [r7, #0]
    /* Enable slave */
    spi_select_slave(module, slave, true);
1000bd22:	68b9      	ldr	r1, [r7, #8]
1000bd24:	68fb      	ldr	r3, [r7, #12]
1000bd26:	2201      	movs	r2, #1
1000bd28:	0018      	movs	r0, r3
1000bd2a:	4b1a      	ldr	r3, [pc, #104]	; (1000bd94 <spi_master_transceive+0x80>)
1000bd2c:	4798      	blx	r3
    /* Write SPI data */
    spi_transceived_done = false;
1000bd2e:	4b1a      	ldr	r3, [pc, #104]	; (1000bd98 <spi_master_transceive+0x84>)
1000bd30:	2200      	movs	r2, #0
1000bd32:	701a      	strb	r2, [r3, #0]
    spi_transceive_buffer_job(module, tx_data, rx_data, len);
1000bd34:	2328      	movs	r3, #40	; 0x28
1000bd36:	18fb      	adds	r3, r7, r3
1000bd38:	881b      	ldrh	r3, [r3, #0]
1000bd3a:	683a      	ldr	r2, [r7, #0]
1000bd3c:	6879      	ldr	r1, [r7, #4]
1000bd3e:	68f8      	ldr	r0, [r7, #12]
1000bd40:	4c16      	ldr	r4, [pc, #88]	; (1000bd9c <spi_master_transceive+0x88>)
1000bd42:	47a0      	blx	r4
    while(!spi_transceived_done) {
1000bd44:	46c0      	nop			; (mov r8, r8)
1000bd46:	4b14      	ldr	r3, [pc, #80]	; (1000bd98 <spi_master_transceive+0x84>)
1000bd48:	781b      	ldrb	r3, [r3, #0]
1000bd4a:	b2db      	uxtb	r3, r3
1000bd4c:	2201      	movs	r2, #1
1000bd4e:	4053      	eors	r3, r2
1000bd50:	b2db      	uxtb	r3, r3
1000bd52:	2b00      	cmp	r3, #0
1000bd54:	d1f7      	bne.n	1000bd46 <spi_master_transceive+0x32>
        //
    }
    spi_transceived_done = false;
1000bd56:	4b10      	ldr	r3, [pc, #64]	; (1000bd98 <spi_master_transceive+0x84>)
1000bd58:	2200      	movs	r2, #0
1000bd5a:	701a      	strb	r2, [r3, #0]
    /* Wait a bit before disabling slave */
    for(uint16_t i = 0; i < 0xFF; i++);
1000bd5c:	2316      	movs	r3, #22
1000bd5e:	18fb      	adds	r3, r7, r3
1000bd60:	2200      	movs	r2, #0
1000bd62:	801a      	strh	r2, [r3, #0]
1000bd64:	e006      	b.n	1000bd74 <spi_master_transceive+0x60>
1000bd66:	2316      	movs	r3, #22
1000bd68:	18fb      	adds	r3, r7, r3
1000bd6a:	881a      	ldrh	r2, [r3, #0]
1000bd6c:	2316      	movs	r3, #22
1000bd6e:	18fb      	adds	r3, r7, r3
1000bd70:	3201      	adds	r2, #1
1000bd72:	801a      	strh	r2, [r3, #0]
1000bd74:	2316      	movs	r3, #22
1000bd76:	18fb      	adds	r3, r7, r3
1000bd78:	881b      	ldrh	r3, [r3, #0]
1000bd7a:	2bfe      	cmp	r3, #254	; 0xfe
1000bd7c:	d9f3      	bls.n	1000bd66 <spi_master_transceive+0x52>
    /* Disable slave */
    spi_select_slave(module, slave, false);
1000bd7e:	68b9      	ldr	r1, [r7, #8]
1000bd80:	68fb      	ldr	r3, [r7, #12]
1000bd82:	2200      	movs	r2, #0
1000bd84:	0018      	movs	r0, r3
1000bd86:	4b03      	ldr	r3, [pc, #12]	; (1000bd94 <spi_master_transceive+0x80>)
1000bd88:	4798      	blx	r3
    return 0;
1000bd8a:	2300      	movs	r3, #0
}
1000bd8c:	0018      	movs	r0, r3
1000bd8e:	46bd      	mov	sp, r7
1000bd90:	b007      	add	sp, #28
1000bd92:	bd90      	pop	{r4, r7, pc}
1000bd94:	1000e475 	.word	0x1000e475
1000bd98:	1001c0bd 	.word	0x1001c0bd
1000bd9c:	1000edd1 	.word	0x1000edd1

1000bda0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000bda0:	b580      	push	{r7, lr}
1000bda2:	b082      	sub	sp, #8
1000bda4:	af00      	add	r7, sp, #0
1000bda6:	0002      	movs	r2, r0
1000bda8:	1dfb      	adds	r3, r7, #7
1000bdaa:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bdac:	4b06      	ldr	r3, [pc, #24]	; (1000bdc8 <NVIC_EnableIRQ+0x28>)
1000bdae:	1dfa      	adds	r2, r7, #7
1000bdb0:	7812      	ldrb	r2, [r2, #0]
1000bdb2:	0011      	movs	r1, r2
1000bdb4:	221f      	movs	r2, #31
1000bdb6:	400a      	ands	r2, r1
1000bdb8:	2101      	movs	r1, #1
1000bdba:	4091      	lsls	r1, r2
1000bdbc:	000a      	movs	r2, r1
1000bdbe:	601a      	str	r2, [r3, #0]
}
1000bdc0:	46c0      	nop			; (mov r8, r8)
1000bdc2:	46bd      	mov	sp, r7
1000bdc4:	b002      	add	sp, #8
1000bdc6:	bd80      	pop	{r7, pc}
1000bdc8:	e000e100 	.word	0xe000e100

1000bdcc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
1000bdcc:	b580      	push	{r7, lr}
1000bdce:	b082      	sub	sp, #8
1000bdd0:	af00      	add	r7, sp, #0
1000bdd2:	0002      	movs	r2, r0
1000bdd4:	1dfb      	adds	r3, r7, #7
1000bdd6:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bdd8:	4a07      	ldr	r2, [pc, #28]	; (1000bdf8 <NVIC_DisableIRQ+0x2c>)
1000bdda:	1dfb      	adds	r3, r7, #7
1000bddc:	781b      	ldrb	r3, [r3, #0]
1000bdde:	0019      	movs	r1, r3
1000bde0:	231f      	movs	r3, #31
1000bde2:	400b      	ands	r3, r1
1000bde4:	2101      	movs	r1, #1
1000bde6:	4099      	lsls	r1, r3
1000bde8:	000b      	movs	r3, r1
1000bdea:	0019      	movs	r1, r3
1000bdec:	2380      	movs	r3, #128	; 0x80
1000bdee:	50d1      	str	r1, [r2, r3]
}
1000bdf0:	46c0      	nop			; (mov r8, r8)
1000bdf2:	46bd      	mov	sp, r7
1000bdf4:	b002      	add	sp, #8
1000bdf6:	bd80      	pop	{r7, pc}
1000bdf8:	e000e100 	.word	0xe000e100

1000bdfc <sms_timer_aon_callback>:

#include "app_include.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000bdfc:	b5b0      	push	{r4, r5, r7, lr}
1000bdfe:	af00      	add	r7, sp, #0
    //DBG_LOG_DEV("[sms_timer_callback]\n\r  sms timer done! state = %d", sms_timer0_state.source);
    sms_plf_int_state.source = SMS_CB_AON_TIMER;
1000be00:	4b05      	ldr	r3, [pc, #20]	; (1000be18 <sms_timer_aon_callback+0x1c>)
1000be02:	2204      	movs	r2, #4
1000be04:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000be06:	2300      	movs	r3, #0
1000be08:	2200      	movs	r2, #0
1000be0a:	2103      	movs	r1, #3
1000be0c:	2042      	movs	r0, #66	; 0x42
1000be0e:	4c03      	ldr	r4, [pc, #12]	; (1000be1c <sms_timer_aon_callback+0x20>)
1000be10:	47a0      	blx	r4
}
1000be12:	46c0      	nop			; (mov r8, r8)
1000be14:	46bd      	mov	sp, r7
1000be16:	bdb0      	pop	{r4, r5, r7, pc}
1000be18:	1001c0a8 	.word	0x1001c0a8
1000be1c:	100133ad 	.word	0x100133ad

1000be20 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t freq)
{
1000be20:	b580      	push	{r7, lr}
1000be22:	b084      	sub	sp, #16
1000be24:	af00      	add	r7, sp, #0
1000be26:	6078      	str	r0, [r7, #4]
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000be28:	2308      	movs	r3, #8
1000be2a:	18fb      	adds	r3, r7, r3
1000be2c:	0018      	movs	r0, r3
1000be2e:	4b09      	ldr	r3, [pc, #36]	; (1000be54 <sms_timer_aon_init+0x34>)
1000be30:	4798      	blx	r3
    config_aon_sleep_timer.mode = AON_SLEEP_TIMER_RELOAD_MODE;
1000be32:	2308      	movs	r3, #8
1000be34:	18fb      	adds	r3, r7, r3
1000be36:	2200      	movs	r2, #0
1000be38:	705a      	strb	r2, [r3, #1]
    config_aon_sleep_timer.counter = freq;
1000be3a:	2308      	movs	r3, #8
1000be3c:	18fb      	adds	r3, r7, r3
1000be3e:	687a      	ldr	r2, [r7, #4]
1000be40:	605a      	str	r2, [r3, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000be42:	2308      	movs	r3, #8
1000be44:	18fb      	adds	r3, r7, r3
1000be46:	0018      	movs	r0, r3
1000be48:	4b03      	ldr	r3, [pc, #12]	; (1000be58 <sms_timer_aon_init+0x38>)
1000be4a:	4798      	blx	r3
}
1000be4c:	46c0      	nop			; (mov r8, r8)
1000be4e:	46bd      	mov	sp, r7
1000be50:	b004      	add	sp, #16
1000be52:	bd80      	pop	{r7, pc}
1000be54:	1000c519 	.word	0x1000c519
1000be58:	1000c5c1 	.word	0x1000c5c1

1000be5c <sms_timer_aon_configure_callback>:
{
    aon_sleep_timer_disable();
}

void sms_timer_aon_configure_callback(bool en)
{
1000be5c:	b580      	push	{r7, lr}
1000be5e:	b082      	sub	sp, #8
1000be60:	af00      	add	r7, sp, #0
1000be62:	0002      	movs	r2, r0
1000be64:	1dfb      	adds	r3, r7, #7
1000be66:	701a      	strb	r2, [r3, #0]
    if(en) {
1000be68:	1dfb      	adds	r3, r7, #7
1000be6a:	781b      	ldrb	r3, [r3, #0]
1000be6c:	2b00      	cmp	r3, #0
1000be6e:	d007      	beq.n	1000be80 <sms_timer_aon_configure_callback+0x24>
        aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000be70:	4b08      	ldr	r3, [pc, #32]	; (1000be94 <sms_timer_aon_configure_callback+0x38>)
1000be72:	0018      	movs	r0, r3
1000be74:	4b08      	ldr	r3, [pc, #32]	; (1000be98 <sms_timer_aon_configure_callback+0x3c>)
1000be76:	4798      	blx	r3
        NVIC_EnableIRQ(AON_SLEEP_TIMER_IRQn);
1000be78:	201b      	movs	r0, #27
1000be7a:	4b08      	ldr	r3, [pc, #32]	; (1000be9c <sms_timer_aon_configure_callback+0x40>)
1000be7c:	4798      	blx	r3
    }
    else {
        aon_sleep_timer_unregister_callback();
        NVIC_DisableIRQ(AON_SLEEP_TIMER_IRQn);
    }        
}
1000be7e:	e004      	b.n	1000be8a <sms_timer_aon_configure_callback+0x2e>
    if(en) {
        aon_sleep_timer_register_callback(sms_timer_aon_callback);
        NVIC_EnableIRQ(AON_SLEEP_TIMER_IRQn);
    }
    else {
        aon_sleep_timer_unregister_callback();
1000be80:	4b07      	ldr	r3, [pc, #28]	; (1000bea0 <sms_timer_aon_configure_callback+0x44>)
1000be82:	4798      	blx	r3
        NVIC_DisableIRQ(AON_SLEEP_TIMER_IRQn);
1000be84:	201b      	movs	r0, #27
1000be86:	4b07      	ldr	r3, [pc, #28]	; (1000bea4 <sms_timer_aon_configure_callback+0x48>)
1000be88:	4798      	blx	r3
    }        
}
1000be8a:	46c0      	nop			; (mov r8, r8)
1000be8c:	46bd      	mov	sp, r7
1000be8e:	b002      	add	sp, #8
1000be90:	bd80      	pop	{r7, pc}
1000be92:	46c0      	nop			; (mov r8, r8)
1000be94:	1000bdfd 	.word	0x1000bdfd
1000be98:	1000c56d 	.word	0x1000c56d
1000be9c:	1000bda1 	.word	0x1000bda1
1000bea0:	1000c589 	.word	0x1000c589
1000bea4:	1000bdcd 	.word	0x1000bdcd

1000bea8 <sms_dualtimer_init>:


/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000bea8:	b580      	push	{r7, lr}
1000beaa:	b088      	sub	sp, #32
1000beac:	af00      	add	r7, sp, #0
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000beae:	1d3b      	adds	r3, r7, #4
1000beb0:	0018      	movs	r0, r3
1000beb2:	4b0b      	ldr	r3, [pc, #44]	; (1000bee0 <sms_dualtimer_init+0x38>)
1000beb4:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_TIMER_DUAL_T1_LOAD;
1000beb6:	1d3b      	adds	r3, r7, #4
1000beb8:	4a0a      	ldr	r2, [pc, #40]	; (1000bee4 <sms_dualtimer_init+0x3c>)
1000beba:	609a      	str	r2, [r3, #8]
    config_dualtimer.timer2.load_value = SMS_TIMER_DUAL_T2_LOAD;
1000bebc:	1d3b      	adds	r3, r7, #4
1000bebe:	4a09      	ldr	r2, [pc, #36]	; (1000bee4 <sms_dualtimer_init+0x3c>)
1000bec0:	615a      	str	r2, [r3, #20]

    dualtimer_init(&config_dualtimer);
1000bec2:	1d3b      	adds	r3, r7, #4
1000bec4:	0018      	movs	r0, r3
1000bec6:	4b08      	ldr	r3, [pc, #32]	; (1000bee8 <sms_dualtimer_init+0x40>)
1000bec8:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000beca:	2000      	movs	r0, #0
1000becc:	4b07      	ldr	r3, [pc, #28]	; (1000beec <sms_dualtimer_init+0x44>)
1000bece:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER2);
1000bed0:	2001      	movs	r0, #1
1000bed2:	4b06      	ldr	r3, [pc, #24]	; (1000beec <sms_dualtimer_init+0x44>)
1000bed4:	4798      	blx	r3
}
1000bed6:	46c0      	nop			; (mov r8, r8)
1000bed8:	46bd      	mov	sp, r7
1000beda:	b008      	add	sp, #32
1000bedc:	bd80      	pop	{r7, pc}
1000bede:	46c0      	nop			; (mov r8, r8)
1000bee0:	1000c6c1 	.word	0x1000c6c1
1000bee4:	00006590 	.word	0x00006590
1000bee8:	1000c86d 	.word	0x1000c86d
1000beec:	1000c7cd 	.word	0x1000c7cd

1000bef0 <ble_adv_report_event>:
* BLE callback functions
* ---------------------- */

/* Callback registered for AT_BLE_ADV_REPORT (#3) event from stack */
static at_ble_status_t ble_adv_report_event(void *params)
{
1000bef0:	b580      	push	{r7, lr}
1000bef2:	b082      	sub	sp, #8
1000bef4:	af00      	add	r7, sp, #0
1000bef6:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("[ble_adv_report_event]  advertisement timeout");
1000bef8:	4b0b      	ldr	r3, [pc, #44]	; (1000bf28 <ble_adv_report_event+0x38>)
1000befa:	0018      	movs	r0, r3
1000befc:	4b0b      	ldr	r3, [pc, #44]	; (1000bf2c <ble_adv_report_event+0x3c>)
1000befe:	4798      	blx	r3
1000bf00:	4b0b      	ldr	r3, [pc, #44]	; (1000bf30 <ble_adv_report_event+0x40>)
1000bf02:	0018      	movs	r0, r3
1000bf04:	4b0b      	ldr	r3, [pc, #44]	; (1000bf34 <ble_adv_report_event+0x44>)
1000bf06:	4798      	blx	r3
    DBG_LOG_DEV("Going to sleep...");
1000bf08:	4b07      	ldr	r3, [pc, #28]	; (1000bf28 <ble_adv_report_event+0x38>)
1000bf0a:	0018      	movs	r0, r3
1000bf0c:	4b07      	ldr	r3, [pc, #28]	; (1000bf2c <ble_adv_report_event+0x3c>)
1000bf0e:	4798      	blx	r3
1000bf10:	4b09      	ldr	r3, [pc, #36]	; (1000bf38 <ble_adv_report_event+0x48>)
1000bf12:	0018      	movs	r0, r3
1000bf14:	4b07      	ldr	r3, [pc, #28]	; (1000bf34 <ble_adv_report_event+0x44>)
1000bf16:	4798      	blx	r3
    release_sleep_lock();
1000bf18:	4b08      	ldr	r3, [pc, #32]	; (1000bf3c <ble_adv_report_event+0x4c>)
1000bf1a:	4798      	blx	r3

    return AT_BLE_SUCCESS;
1000bf1c:	2300      	movs	r3, #0
}
1000bf1e:	0018      	movs	r0, r3
1000bf20:	46bd      	mov	sp, r7
1000bf22:	b002      	add	sp, #8
1000bf24:	bd80      	pop	{r7, pc}
1000bf26:	46c0      	nop			; (mov r8, r8)
1000bf28:	1001a97c 	.word	0x1001a97c
1000bf2c:	10019095 	.word	0x10019095
1000bf30:	1001a980 	.word	0x1001a980
1000bf34:	10018f75 	.word	0x10018f75
1000bf38:	1001a9b0 	.word	0x1001a9b0
1000bf3c:	10013aed 	.word	0x10013aed

1000bf40 <ble_connected_app_event>:

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
1000bf40:	b580      	push	{r7, lr}
1000bf42:	b084      	sub	sp, #16
1000bf44:	af00      	add	r7, sp, #0
1000bf46:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("[ble_connected_app_event] devices connected");
1000bf48:	4b0a      	ldr	r3, [pc, #40]	; (1000bf74 <ble_connected_app_event+0x34>)
1000bf4a:	0018      	movs	r0, r3
1000bf4c:	4b0a      	ldr	r3, [pc, #40]	; (1000bf78 <ble_connected_app_event+0x38>)
1000bf4e:	4798      	blx	r3
1000bf50:	4b0a      	ldr	r3, [pc, #40]	; (1000bf7c <ble_connected_app_event+0x3c>)
1000bf52:	0018      	movs	r0, r3
1000bf54:	4b0a      	ldr	r3, [pc, #40]	; (1000bf80 <ble_connected_app_event+0x40>)
1000bf56:	4798      	blx	r3
    at_ble_connected_t *connected = (at_ble_connected_t *)params;
1000bf58:	687b      	ldr	r3, [r7, #4]
1000bf5a:	60fb      	str	r3, [r7, #12]
    sms_connection_handle = connected->handle;
1000bf5c:	68fb      	ldr	r3, [r7, #12]
1000bf5e:	891a      	ldrh	r2, [r3, #8]
1000bf60:	4b08      	ldr	r3, [pc, #32]	; (1000bf84 <ble_connected_app_event+0x44>)
1000bf62:	801a      	strh	r2, [r3, #0]
    conn_status = 1;
1000bf64:	4b08      	ldr	r3, [pc, #32]	; (1000bf88 <ble_connected_app_event+0x48>)
1000bf66:	2201      	movs	r2, #1
1000bf68:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
1000bf6a:	2300      	movs	r3, #0
}
1000bf6c:	0018      	movs	r0, r3
1000bf6e:	46bd      	mov	sp, r7
1000bf70:	b004      	add	sp, #16
1000bf72:	bd80      	pop	{r7, pc}
1000bf74:	1001a97c 	.word	0x1001a97c
1000bf78:	10019095 	.word	0x10019095
1000bf7c:	1001a9c4 	.word	0x1001a9c4
1000bf80:	10018f75 	.word	0x10018f75
1000bf84:	1001c164 	.word	0x1001c164
1000bf88:	1001b978 	.word	0x1001b978

1000bf8c <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000bf8c:	b580      	push	{r7, lr}
1000bf8e:	b082      	sub	sp, #8
1000bf90:	af00      	add	r7, sp, #0
1000bf92:	6078      	str	r0, [r7, #4]
    conn_status = 0;
1000bf94:	4b0d      	ldr	r3, [pc, #52]	; (1000bfcc <ble_disconnected_app_event+0x40>)
1000bf96:	2200      	movs	r2, #0
1000bf98:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[ble_disconnected_app_event] peer disconnected...");
1000bf9a:	4b0d      	ldr	r3, [pc, #52]	; (1000bfd0 <ble_disconnected_app_event+0x44>)
1000bf9c:	0018      	movs	r0, r3
1000bf9e:	4b0d      	ldr	r3, [pc, #52]	; (1000bfd4 <ble_disconnected_app_event+0x48>)
1000bfa0:	4798      	blx	r3
1000bfa2:	4b0d      	ldr	r3, [pc, #52]	; (1000bfd8 <ble_disconnected_app_event+0x4c>)
1000bfa4:	0018      	movs	r0, r3
1000bfa6:	4b0d      	ldr	r3, [pc, #52]	; (1000bfdc <ble_disconnected_app_event+0x50>)
1000bfa8:	4798      	blx	r3
    switch(sms_working_mode) {
1000bfaa:	4b0d      	ldr	r3, [pc, #52]	; (1000bfe0 <ble_disconnected_app_event+0x54>)
1000bfac:	781b      	ldrb	r3, [r3, #0]
1000bfae:	2b07      	cmp	r3, #7
1000bfb0:	d804      	bhi.n	1000bfbc <ble_disconnected_app_event+0x30>
1000bfb2:	009a      	lsls	r2, r3, #2
1000bfb4:	4b0b      	ldr	r3, [pc, #44]	; (1000bfe4 <ble_disconnected_app_event+0x58>)
1000bfb6:	18d3      	adds	r3, r2, r3
1000bfb8:	681b      	ldr	r3, [r3, #0]
1000bfba:	469f      	mov	pc, r3
        case SMS_MODE_COMPLETE:
        // disable AO GPIO interrupt
        break;
        
        default:
        break;
1000bfbc:	46c0      	nop			; (mov r8, r8)
    }
    // enable ~30s counter for advertisement, then go to sleep
    sms_service_advertise();
1000bfbe:	4b0a      	ldr	r3, [pc, #40]	; (1000bfe8 <ble_disconnected_app_event+0x5c>)
1000bfc0:	4798      	blx	r3
    ALL_UNUSED(param);
    return AT_BLE_SUCCESS;
1000bfc2:	2300      	movs	r3, #0
}
1000bfc4:	0018      	movs	r0, r3
1000bfc6:	46bd      	mov	sp, r7
1000bfc8:	b002      	add	sp, #8
1000bfca:	bd80      	pop	{r7, pc}
1000bfcc:	1001b978 	.word	0x1001b978
1000bfd0:	1001a97c 	.word	0x1001a97c
1000bfd4:	10019095 	.word	0x10019095
1000bfd8:	1001a9f0 	.word	0x1001a9f0
1000bfdc:	10018f75 	.word	0x10018f75
1000bfe0:	1001c0c3 	.word	0x1001c0c3
1000bfe4:	1001abc4 	.word	0x1001abc4
1000bfe8:	1000a809 	.word	0x1000a809

1000bfec <ble_paired_app_event>:

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
1000bfec:	b580      	push	{r7, lr}
1000bfee:	b082      	sub	sp, #8
1000bff0:	af00      	add	r7, sp, #0
1000bff2:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("[ble_paired_app_event] Devices paired...");
1000bff4:	4b08      	ldr	r3, [pc, #32]	; (1000c018 <ble_paired_app_event+0x2c>)
1000bff6:	0018      	movs	r0, r3
1000bff8:	4b08      	ldr	r3, [pc, #32]	; (1000c01c <ble_paired_app_event+0x30>)
1000bffa:	4798      	blx	r3
1000bffc:	4b08      	ldr	r3, [pc, #32]	; (1000c020 <ble_paired_app_event+0x34>)
1000bffe:	0018      	movs	r0, r3
1000c000:	4b08      	ldr	r3, [pc, #32]	; (1000c024 <ble_paired_app_event+0x38>)
1000c002:	4798      	blx	r3
    DBG_LOG_CONT_DEV(" enabling sleep.");
1000c004:	4b08      	ldr	r3, [pc, #32]	; (1000c028 <ble_paired_app_event+0x3c>)
1000c006:	0018      	movs	r0, r3
1000c008:	4b06      	ldr	r3, [pc, #24]	; (1000c024 <ble_paired_app_event+0x38>)
1000c00a:	4798      	blx	r3
    //release_sleep_lock();
    ALL_UNUSED(param);
    return AT_BLE_SUCCESS;
1000c00c:	2300      	movs	r3, #0
}
1000c00e:	0018      	movs	r0, r3
1000c010:	46bd      	mov	sp, r7
1000c012:	b002      	add	sp, #8
1000c014:	bd80      	pop	{r7, pc}
1000c016:	46c0      	nop			; (mov r8, r8)
1000c018:	1001a97c 	.word	0x1001a97c
1000c01c:	10019095 	.word	0x10019095
1000c020:	1001aa24 	.word	0x1001aa24
1000c024:	10018f75 	.word	0x10018f75
1000c028:	1001aa50 	.word	0x1001aa50

1000c02c <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED (#29) event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
1000c02c:	b580      	push	{r7, lr}
1000c02e:	b084      	sub	sp, #16
1000c030:	af00      	add	r7, sp, #0
1000c032:	6078      	str	r0, [r7, #4]
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
1000c034:	687b      	ldr	r3, [r7, #4]
1000c036:	60fb      	str	r3, [r7, #12]
    if(!notification_status->status)
1000c038:	68fb      	ldr	r3, [r7, #12]
1000c03a:	78db      	ldrb	r3, [r3, #3]
1000c03c:	2b00      	cmp	r3, #0
1000c03e:	d109      	bne.n	1000c054 <ble_notification_confirmed_app_event+0x28>
    {
        DBG_LOG_DEV("[ble_notification_confirmed_app_event] notification sent successfully");
1000c040:	4b07      	ldr	r3, [pc, #28]	; (1000c060 <ble_notification_confirmed_app_event+0x34>)
1000c042:	0018      	movs	r0, r3
1000c044:	4b07      	ldr	r3, [pc, #28]	; (1000c064 <ble_notification_confirmed_app_event+0x38>)
1000c046:	4798      	blx	r3
1000c048:	4b07      	ldr	r3, [pc, #28]	; (1000c068 <ble_notification_confirmed_app_event+0x3c>)
1000c04a:	0018      	movs	r0, r3
1000c04c:	4b07      	ldr	r3, [pc, #28]	; (1000c06c <ble_notification_confirmed_app_event+0x40>)
1000c04e:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000c050:	2300      	movs	r3, #0
1000c052:	e000      	b.n	1000c056 <ble_notification_confirmed_app_event+0x2a>
    }
    return AT_BLE_FAILURE;
1000c054:	23e2      	movs	r3, #226	; 0xe2
}
1000c056:	0018      	movs	r0, r3
1000c058:	46bd      	mov	sp, r7
1000c05a:	b004      	add	sp, #16
1000c05c:	bd80      	pop	{r7, pc}
1000c05e:	46c0      	nop			; (mov r8, r8)
1000c060:	1001a97c 	.word	0x1001a97c
1000c064:	10019095 	.word	0x10019095
1000c068:	1001aa64 	.word	0x1001aa64
1000c06c:	10018f75 	.word	0x10018f75

1000c070 <ble_char_changed_app_event>:

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED (#31) event from stack */
static at_ble_status_t ble_char_changed_app_event(void *params)
{
1000c070:	b580      	push	{r7, lr}
1000c072:	b082      	sub	sp, #8
1000c074:	af00      	add	r7, sp, #0
1000c076:	6078      	str	r0, [r7, #4]
    ALL_UNUSED(params);
    return AT_BLE_SUCCESS;
1000c078:	2300      	movs	r3, #0
}
1000c07a:	0018      	movs	r0, r3
1000c07c:	46bd      	mov	sp, r7
1000c07e:	b002      	add	sp, #8
1000c080:	bd80      	pop	{r7, pc}
1000c082:	46c0      	nop			; (mov r8, r8)

1000c084 <sms_plf_event_cb>:

/* Callback registered for AT_PLATFORM_EVENT (#58) event */
static void sms_plf_event_cb(void)
{
1000c084:	b580      	push	{r7, lr}
1000c086:	af00      	add	r7, sp, #0
    sms_plf_int_state.int_on = true;
1000c088:	4b02      	ldr	r3, [pc, #8]	; (1000c094 <sms_plf_event_cb+0x10>)
1000c08a:	2201      	movs	r2, #1
1000c08c:	705a      	strb	r2, [r3, #1]
}
1000c08e:	46c0      	nop			; (mov r8, r8)
1000c090:	46bd      	mov	sp, r7
1000c092:	bd80      	pop	{r7, pc}
1000c094:	1001c0a8 	.word	0x1001c0a8

1000c098 <resume_cb>:

/* -------------------------
* Resume callback functions
* ------------------------- */
static void resume_cb(void)
{
1000c098:	b580      	push	{r7, lr}
1000c09a:	af00      	add	r7, sp, #0
    init_port_list(); // Re-initialize all ports
1000c09c:	4b08      	ldr	r3, [pc, #32]	; (1000c0c0 <resume_cb+0x28>)
1000c09e:	4798      	blx	r3
    serial_console_init(); // UART GPIO for the console
1000c0a0:	4b08      	ldr	r3, [pc, #32]	; (1000c0c4 <resume_cb+0x2c>)
1000c0a2:	4798      	blx	r3
    sms_dualtimer_init(); // dualtimer
1000c0a4:	4b08      	ldr	r3, [pc, #32]	; (1000c0c8 <resume_cb+0x30>)
1000c0a6:	4798      	blx	r3
    if(sms_device == SMS_DEVICE_NODE_FULL) {
1000c0a8:	4b08      	ldr	r3, [pc, #32]	; (1000c0cc <resume_cb+0x34>)
1000c0aa:	781b      	ldrb	r3, [r3, #0]
1000c0ac:	2b01      	cmp	r3, #1
1000c0ae:	d103      	bne.n	1000c0b8 <resume_cb+0x20>
        ///* GPIO interrupt (AO_GPIO_2) for IMU data ready */
        //sms_imu_configure_gpio();
        spi_master_configure(); // SPI GPIO
1000c0b0:	4b07      	ldr	r3, [pc, #28]	; (1000c0d0 <resume_cb+0x38>)
1000c0b2:	4798      	blx	r3
        //spi_master_configure_callbacks();
        i2c_master_configure(); // I2C GPIO
1000c0b4:	4b07      	ldr	r3, [pc, #28]	; (1000c0d4 <resume_cb+0x3c>)
1000c0b6:	4798      	blx	r3
    }
    
    //hw_timer_register_callback(hw_timer1_callback_fn);
    //sms_button_configure_gpio(); // GPIO for the AO button interrupts
    //sms_button_register_callbacks();
}
1000c0b8:	46c0      	nop			; (mov r8, r8)
1000c0ba:	46bd      	mov	sp, r7
1000c0bc:	bd80      	pop	{r7, pc}
1000c0be:	46c0      	nop			; (mov r8, r8)
1000c0c0:	10012eb1 	.word	0x10012eb1
1000c0c4:	10012b99 	.word	0x10012b99
1000c0c8:	1000bea9 	.word	0x1000bea9
1000c0cc:	1001b87c 	.word	0x1001b87c
1000c0d0:	1000bba9 	.word	0x1000bba9
1000c0d4:	1000ac8d 	.word	0x1000ac8d

1000c0d8 <main>:

/**@brief Initialize the service with its included service, characteristics, and descriptors
*/

int main(void)
{
1000c0d8:	b590      	push	{r4, r7, lr}
1000c0da:	b083      	sub	sp, #12
1000c0dc:	af00      	add	r7, sp, #0
    at_ble_status_t status;
    app_state = SMS_APP_STARTING;
1000c0de:	4b95      	ldr	r3, [pc, #596]	; (1000c334 <main+0x25c>)
1000c0e0:	2200      	movs	r2, #0
1000c0e2:	701a      	strb	r2, [r3, #0]
    sms_plf_int_state.source = SMS_CB_NONE;
1000c0e4:	4b94      	ldr	r3, [pc, #592]	; (1000c338 <main+0x260>)
1000c0e6:	2200      	movs	r2, #0
1000c0e8:	701a      	strb	r2, [r3, #0]
    sms_plf_int_state.int_on = false;
1000c0ea:	4b93      	ldr	r3, [pc, #588]	; (1000c338 <main+0x260>)
1000c0ec:	2200      	movs	r2, #0
1000c0ee:	705a      	strb	r2, [r3, #1]
    mpu9250_device.init_ok = false;
1000c0f0:	4b92      	ldr	r3, [pc, #584]	; (1000c33c <main+0x264>)
1000c0f2:	2200      	movs	r2, #0
1000c0f4:	701a      	strb	r2, [r3, #0]
    mpu9250_device.comm_error = false;
1000c0f6:	4b91      	ldr	r3, [pc, #580]	; (1000c33c <main+0x264>)
1000c0f8:	2200      	movs	r2, #0
1000c0fa:	705a      	strb	r2, [r3, #1]


    /* Initialize platform */
    platform_driver_init();
1000c0fc:	4b90      	ldr	r3, [pc, #576]	; (1000c340 <main+0x268>)
1000c0fe:	4798      	blx	r3
    /* Initialize gpio */
    gpio_init();
1000c100:	4b90      	ldr	r3, [pc, #576]	; (1000c344 <main+0x26c>)
1000c102:	4798      	blx	r3
    /* Prevent sleep mode */
    acquire_sleep_lock();
1000c104:	4b90      	ldr	r3, [pc, #576]	; (1000c348 <main+0x270>)
1000c106:	4798      	blx	r3
    /* Initialize serial console */
    serial_console_init();
1000c108:	4b90      	ldr	r3, [pc, #576]	; (1000c34c <main+0x274>)
1000c10a:	4798      	blx	r3
    //break;
    //}
    //DBG_LOG_DEV("********************************\n\r"\
    //"********************************\n\r");
    /* Initialize the BLE chip and Set the Device Address */
    DBG_LOG("[main] initializing BLE application");
1000c10c:	4b90      	ldr	r3, [pc, #576]	; (1000c350 <main+0x278>)
1000c10e:	0018      	movs	r0, r3
1000c110:	4b90      	ldr	r3, [pc, #576]	; (1000c354 <main+0x27c>)
1000c112:	4798      	blx	r3
1000c114:	4b90      	ldr	r3, [pc, #576]	; (1000c358 <main+0x280>)
1000c116:	0018      	movs	r0, r3
1000c118:	4b90      	ldr	r3, [pc, #576]	; (1000c35c <main+0x284>)
1000c11a:	4798      	blx	r3
    ble_device_init(NULL);
1000c11c:	2000      	movs	r0, #0
1000c11e:	4b90      	ldr	r3, [pc, #576]	; (1000c360 <main+0x288>)
1000c120:	4798      	blx	r3

    /* Hardware timer for BLE use */
    sms_dualtimer_init(); // initialize dualtimer with both ms counter
1000c122:	4b90      	ldr	r3, [pc, #576]	; (1000c364 <main+0x28c>)
1000c124:	4798      	blx	r3


    delay_init();
1000c126:	4b90      	ldr	r3, [pc, #576]	; (1000c368 <main+0x290>)
1000c128:	4798      	blx	r3
    
    /* SMS button on AO_GPIO */
    sms_button_configure_gpio(); // configure 2 AO GPIO as input with wake-up enabled
1000c12a:	4b90      	ldr	r3, [pc, #576]	; (1000c36c <main+0x294>)
1000c12c:	4798      	blx	r3
    sms_button_register_callbacks(); // set GPIO interrupt callbacks
1000c12e:	4b90      	ldr	r3, [pc, #576]	; (1000c370 <main+0x298>)
1000c130:	4798      	blx	r3

    if(sms_device == SMS_DEVICE_NODE_FULL) {
1000c132:	4b90      	ldr	r3, [pc, #576]	; (1000c374 <main+0x29c>)
1000c134:	781b      	ldrb	r3, [r3, #0]
1000c136:	2b01      	cmp	r3, #1
1000c138:	d109      	bne.n	1000c14e <main+0x76>
        /* GPIO interrupt (AO_GPIO_2) for IMU data ready */
        sms_imu_configure_gpio();
1000c13a:	4b8f      	ldr	r3, [pc, #572]	; (1000c378 <main+0x2a0>)
1000c13c:	4798      	blx	r3
        /* SPI config --> MS58 pressure sensor */
        spi_master_configure();
1000c13e:	4b8f      	ldr	r3, [pc, #572]	; (1000c37c <main+0x2a4>)
1000c140:	4798      	blx	r3
        spi_master_configure_callbacks();
1000c142:	4b8f      	ldr	r3, [pc, #572]	; (1000c380 <main+0x2a8>)
1000c144:	4798      	blx	r3
        /* I2C config --> MPU-9250 IMU */
        i2c_master_configure();
1000c146:	4b8f      	ldr	r3, [pc, #572]	; (1000c384 <main+0x2ac>)
1000c148:	4798      	blx	r3
        i2c_master_configure_callbacks();
1000c14a:	4b8f      	ldr	r3, [pc, #572]	; (1000c388 <main+0x2b0>)
1000c14c:	4798      	blx	r3
    }
    
    /* Register sleep resume callback */
    register_resume_callback(resume_cb);
1000c14e:	4b8f      	ldr	r3, [pc, #572]	; (1000c38c <main+0x2b4>)
1000c150:	0018      	movs	r0, r3
1000c152:	4b8f      	ldr	r3, [pc, #572]	; (1000c390 <main+0x2b8>)
1000c154:	4798      	blx	r3
    
    /* Initialize & define primary BLE button service */
    sms_button_char_init_value = 0;
1000c156:	4b8f      	ldr	r3, [pc, #572]	; (1000c394 <main+0x2bc>)
1000c158:	2200      	movs	r2, #0
1000c15a:	701a      	strb	r2, [r3, #0]
    sms_button_service_init(&sms_button_service_handler, &sms_button_char_init_value);
1000c15c:	4a8d      	ldr	r2, [pc, #564]	; (1000c394 <main+0x2bc>)
1000c15e:	4b8e      	ldr	r3, [pc, #568]	; (1000c398 <main+0x2c0>)
1000c160:	0011      	movs	r1, r2
1000c162:	0018      	movs	r0, r3
1000c164:	4b8d      	ldr	r3, [pc, #564]	; (1000c39c <main+0x2c4>)
1000c166:	4798      	blx	r3
    if((status = sms_button_primary_service_define(&sms_button_service_handler)) != AT_BLE_SUCCESS) {
1000c168:	1dbc      	adds	r4, r7, #6
1000c16a:	4b8b      	ldr	r3, [pc, #556]	; (1000c398 <main+0x2c0>)
1000c16c:	0018      	movs	r0, r3
1000c16e:	4b8c      	ldr	r3, [pc, #560]	; (1000c3a0 <main+0x2c8>)
1000c170:	4798      	blx	r3
1000c172:	0003      	movs	r3, r0
1000c174:	7023      	strb	r3, [r4, #0]
    else {
        //DBG_LOG_DEV("[main] SMS primary service defined, sms button handle %d", sms_button_service_handler.serv_handle);
    }

    /* Stuff for full-featured SMS device */
    if(sms_device == SMS_DEVICE_NODE_FULL) {
1000c176:	4b7f      	ldr	r3, [pc, #508]	; (1000c374 <main+0x29c>)
1000c178:	781b      	ldrb	r3, [r3, #0]
1000c17a:	2b01      	cmp	r3, #1
1000c17c:	d129      	bne.n	1000c1d2 <main+0xfa>
        for(uint8_t i = 0; i < 12; i++) {
1000c17e:	1dfb      	adds	r3, r7, #7
1000c180:	2200      	movs	r2, #0
1000c182:	701a      	strb	r2, [r3, #0]
1000c184:	e009      	b.n	1000c19a <main+0xc2>
            sms_imu_char_init_values[i] = 0;
1000c186:	1dfb      	adds	r3, r7, #7
1000c188:	781b      	ldrb	r3, [r3, #0]
1000c18a:	4a86      	ldr	r2, [pc, #536]	; (1000c3a4 <main+0x2cc>)
1000c18c:	2100      	movs	r1, #0
1000c18e:	54d1      	strb	r1, [r2, r3]
        //DBG_LOG_DEV("[main] SMS primary service defined, sms button handle %d", sms_button_service_handler.serv_handle);
    }

    /* Stuff for full-featured SMS device */
    if(sms_device == SMS_DEVICE_NODE_FULL) {
        for(uint8_t i = 0; i < 12; i++) {
1000c190:	1dfb      	adds	r3, r7, #7
1000c192:	781a      	ldrb	r2, [r3, #0]
1000c194:	1dfb      	adds	r3, r7, #7
1000c196:	3201      	adds	r2, #1
1000c198:	701a      	strb	r2, [r3, #0]
1000c19a:	1dfb      	adds	r3, r7, #7
1000c19c:	781b      	ldrb	r3, [r3, #0]
1000c19e:	2b0b      	cmp	r3, #11
1000c1a0:	d9f1      	bls.n	1000c186 <main+0xae>
            sms_imu_char_init_values[i] = 0;
        }
        sms_imu_service_init(&sms_imu_service_handler, 0);
1000c1a2:	4b81      	ldr	r3, [pc, #516]	; (1000c3a8 <main+0x2d0>)
1000c1a4:	2100      	movs	r1, #0
1000c1a6:	0018      	movs	r0, r3
1000c1a8:	4b80      	ldr	r3, [pc, #512]	; (1000c3ac <main+0x2d4>)
1000c1aa:	4798      	blx	r3
        if((status = sms_imu_primary_service_define(&sms_imu_service_handler)) != AT_BLE_SUCCESS) {
1000c1ac:	1dbc      	adds	r4, r7, #6
1000c1ae:	4b7e      	ldr	r3, [pc, #504]	; (1000c3a8 <main+0x2d0>)
1000c1b0:	0018      	movs	r0, r3
1000c1b2:	4b7f      	ldr	r3, [pc, #508]	; (1000c3b0 <main+0x2d8>)
1000c1b4:	4798      	blx	r3
1000c1b6:	0003      	movs	r3, r0
1000c1b8:	7023      	strb	r3, [r4, #0]
        }
        else {
            //DBG_LOG_DEV("[main]  SMS primary service defined, sms imu handle %d", sms_imu_service_handler.serv_handle);
        }
        
        sms_pressure_service_init(&sms_pressure_service_handler, 0);
1000c1ba:	4b7e      	ldr	r3, [pc, #504]	; (1000c3b4 <main+0x2dc>)
1000c1bc:	2100      	movs	r1, #0
1000c1be:	0018      	movs	r0, r3
1000c1c0:	4b7d      	ldr	r3, [pc, #500]	; (1000c3b8 <main+0x2e0>)
1000c1c2:	4798      	blx	r3
        if((status = sms_pressure_primary_service_define(&sms_pressure_service_handler)) != AT_BLE_SUCCESS) {
1000c1c4:	1dbc      	adds	r4, r7, #6
1000c1c6:	4b7b      	ldr	r3, [pc, #492]	; (1000c3b4 <main+0x2dc>)
1000c1c8:	0018      	movs	r0, r3
1000c1ca:	4b7c      	ldr	r3, [pc, #496]	; (1000c3bc <main+0x2e4>)
1000c1cc:	4798      	blx	r3
1000c1ce:	0003      	movs	r3, r0
1000c1d0:	7023      	strb	r3, [r4, #0]
            //DBG_LOG_DEV("[main]  SMS primary service defined, sms pressure handle %d", sms_pressure_service_handler.serv_handle);
        }
    }
    
    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, startup_template_app_gap_cb);
1000c1d2:	4b7b      	ldr	r3, [pc, #492]	; (1000c3c0 <main+0x2e8>)
1000c1d4:	001a      	movs	r2, r3
1000c1d6:	2100      	movs	r1, #0
1000c1d8:	2000      	movs	r0, #0
1000c1da:	4b7a      	ldr	r3, [pc, #488]	; (1000c3c4 <main+0x2ec>)
1000c1dc:	4798      	blx	r3
    /* Register callbacks for GATT SERVER related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, startup_template_app_gatt_server_cb);
1000c1de:	4b7a      	ldr	r3, [pc, #488]	; (1000c3c8 <main+0x2f0>)
1000c1e0:	001a      	movs	r2, r3
1000c1e2:	2102      	movs	r1, #2
1000c1e4:	2000      	movs	r0, #0
1000c1e6:	4b77      	ldr	r3, [pc, #476]	; (1000c3c4 <main+0x2ec>)
1000c1e8:	4798      	blx	r3
    /* Register user-defined callback */
    register_ble_user_event_cb(sms_plf_event_cb);
1000c1ea:	4b78      	ldr	r3, [pc, #480]	; (1000c3cc <main+0x2f4>)
1000c1ec:	0018      	movs	r0, r3
1000c1ee:	4b78      	ldr	r3, [pc, #480]	; (1000c3d0 <main+0x2f8>)
1000c1f0:	4798      	blx	r3
    
    sms_service_advertise();
1000c1f2:	4b78      	ldr	r3, [pc, #480]	; (1000c3d4 <main+0x2fc>)
1000c1f4:	4798      	blx	r3
    
    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
1000c1f6:	2301      	movs	r3, #1
1000c1f8:	425b      	negs	r3, r3
1000c1fa:	0018      	movs	r0, r3
1000c1fc:	4b76      	ldr	r3, [pc, #472]	; (1000c3d8 <main+0x300>)
1000c1fe:	4798      	blx	r3

        if(sms_plf_int_state.int_on) {
1000c200:	4b4d      	ldr	r3, [pc, #308]	; (1000c338 <main+0x260>)
1000c202:	785b      	ldrb	r3, [r3, #1]
1000c204:	b2db      	uxtb	r3, r3
1000c206:	2b00      	cmp	r3, #0
1000c208:	d0f5      	beq.n	1000c1f6 <main+0x11e>
            acquire_sleep_lock();
1000c20a:	4b4f      	ldr	r3, [pc, #316]	; (1000c348 <main+0x270>)
1000c20c:	4798      	blx	r3
            
            switch(sms_plf_int_state.source) {
1000c20e:	4b4a      	ldr	r3, [pc, #296]	; (1000c338 <main+0x260>)
1000c210:	781b      	ldrb	r3, [r3, #0]
1000c212:	b2db      	uxtb	r3, r3
1000c214:	2b06      	cmp	r3, #6
1000c216:	d900      	bls.n	1000c21a <main+0x142>
1000c218:	e084      	b.n	1000c324 <main+0x24c>
1000c21a:	009a      	lsls	r2, r3, #2
1000c21c:	4b6f      	ldr	r3, [pc, #444]	; (1000c3dc <main+0x304>)
1000c21e:	18d3      	adds	r3, r2, r3
1000c220:	681b      	ldr	r3, [r3, #0]
1000c222:	469f      	mov	pc, r3
                case SMS_CB_BT1:
                DBG_LOG_DEV("[main] button1 pressed...");
1000c224:	4b4a      	ldr	r3, [pc, #296]	; (1000c350 <main+0x278>)
1000c226:	0018      	movs	r0, r3
1000c228:	4b4a      	ldr	r3, [pc, #296]	; (1000c354 <main+0x27c>)
1000c22a:	4798      	blx	r3
1000c22c:	4b6c      	ldr	r3, [pc, #432]	; (1000c3e0 <main+0x308>)
1000c22e:	0018      	movs	r0, r3
1000c230:	4b4a      	ldr	r3, [pc, #296]	; (1000c35c <main+0x284>)
1000c232:	4798      	blx	r3
                sms_button_bt1_fn();
1000c234:	4b6b      	ldr	r3, [pc, #428]	; (1000c3e4 <main+0x30c>)
1000c236:	4798      	blx	r3
                break;
1000c238:	e075      	b.n	1000c326 <main+0x24e>

                case SMS_CB_BT2:
                DBG_LOG_DEV("[main] button2 pressed...");
1000c23a:	4b45      	ldr	r3, [pc, #276]	; (1000c350 <main+0x278>)
1000c23c:	0018      	movs	r0, r3
1000c23e:	4b45      	ldr	r3, [pc, #276]	; (1000c354 <main+0x27c>)
1000c240:	4798      	blx	r3
1000c242:	4b69      	ldr	r3, [pc, #420]	; (1000c3e8 <main+0x310>)
1000c244:	0018      	movs	r0, r3
1000c246:	4b45      	ldr	r3, [pc, #276]	; (1000c35c <main+0x284>)
1000c248:	4798      	blx	r3
                sms_button_bt2_fn();
1000c24a:	4b68      	ldr	r3, [pc, #416]	; (1000c3ec <main+0x314>)
1000c24c:	4798      	blx	r3
                break;
1000c24e:	e06a      	b.n	1000c326 <main+0x24e>

                case SMS_CB_IMU_DRDY:
                //DBG_LOG_DEV("[main] imu interruption...");
                if(mpu9250_device.init_ok) sms_imu_poll_data();
1000c250:	4b3a      	ldr	r3, [pc, #232]	; (1000c33c <main+0x264>)
1000c252:	781b      	ldrb	r3, [r3, #0]
1000c254:	2b00      	cmp	r3, #0
1000c256:	d001      	beq.n	1000c25c <main+0x184>
1000c258:	4b65      	ldr	r3, [pc, #404]	; (1000c3f0 <main+0x318>)
1000c25a:	4798      	blx	r3
                if(mpu9250_device.comm_error) sms_imu_startup();
1000c25c:	4b37      	ldr	r3, [pc, #220]	; (1000c33c <main+0x264>)
1000c25e:	785b      	ldrb	r3, [r3, #1]
1000c260:	b2db      	uxtb	r3, r3
1000c262:	2b00      	cmp	r3, #0
1000c264:	d001      	beq.n	1000c26a <main+0x192>
1000c266:	4b63      	ldr	r3, [pc, #396]	; (1000c3f4 <main+0x31c>)
1000c268:	4798      	blx	r3
                sms_dualtimer_timer2.cur_counter = (SMS_TIMER_AON_COUNT_10H - aon_sleep_timer_get_current_value());
1000c26a:	4b63      	ldr	r3, [pc, #396]	; (1000c3f8 <main+0x320>)
1000c26c:	4798      	blx	r3
1000c26e:	0002      	movs	r2, r0
1000c270:	4b62      	ldr	r3, [pc, #392]	; (1000c3fc <main+0x324>)
1000c272:	1a9a      	subs	r2, r3, r2
1000c274:	4b62      	ldr	r3, [pc, #392]	; (1000c400 <main+0x328>)
1000c276:	609a      	str	r2, [r3, #8]
                uint32_t delta = (uint32_t)((sms_dualtimer_timer2.cur_counter - sms_dualtimer_timer2.old_counter) / SMS_TIMER_AON_COUNT_1MS);
1000c278:	4b61      	ldr	r3, [pc, #388]	; (1000c400 <main+0x328>)
1000c27a:	689a      	ldr	r2, [r3, #8]
1000c27c:	4b60      	ldr	r3, [pc, #384]	; (1000c400 <main+0x328>)
1000c27e:	68db      	ldr	r3, [r3, #12]
1000c280:	1ad3      	subs	r3, r2, r3
1000c282:	095b      	lsrs	r3, r3, #5
1000c284:	603b      	str	r3, [r7, #0]
                DBG_LOG_DEV("[main]  elapsed timer: %ld ms", delta);
1000c286:	4b32      	ldr	r3, [pc, #200]	; (1000c350 <main+0x278>)
1000c288:	0018      	movs	r0, r3
1000c28a:	4b32      	ldr	r3, [pc, #200]	; (1000c354 <main+0x27c>)
1000c28c:	4798      	blx	r3
1000c28e:	683a      	ldr	r2, [r7, #0]
1000c290:	4b5c      	ldr	r3, [pc, #368]	; (1000c404 <main+0x32c>)
1000c292:	0011      	movs	r1, r2
1000c294:	0018      	movs	r0, r3
1000c296:	4b31      	ldr	r3, [pc, #196]	; (1000c35c <main+0x284>)
1000c298:	4798      	blx	r3
                if((delta > MS58_CONV_WAIT_MS) && (ms58_device.init_ok)) {
1000c29a:	683b      	ldr	r3, [r7, #0]
1000c29c:	4a5a      	ldr	r2, [pc, #360]	; (1000c408 <main+0x330>)
1000c29e:	4293      	cmp	r3, r2
1000c2a0:	d916      	bls.n	1000c2d0 <main+0x1f8>
1000c2a2:	4b5a      	ldr	r3, [pc, #360]	; (1000c40c <main+0x334>)
1000c2a4:	781b      	ldrb	r3, [r3, #0]
1000c2a6:	2b00      	cmp	r3, #0
1000c2a8:	d012      	beq.n	1000c2d0 <main+0x1f8>
                    DBG_LOG_CONT_DEV(" ...time to read ms58");
1000c2aa:	4b59      	ldr	r3, [pc, #356]	; (1000c410 <main+0x338>)
1000c2ac:	0018      	movs	r0, r3
1000c2ae:	4b2b      	ldr	r3, [pc, #172]	; (1000c35c <main+0x284>)
1000c2b0:	4798      	blx	r3
                    sms_dualtimer_timer2.old_counter = sms_dualtimer_timer2.cur_counter;
1000c2b2:	4b53      	ldr	r3, [pc, #332]	; (1000c400 <main+0x328>)
1000c2b4:	689a      	ldr	r2, [r3, #8]
1000c2b6:	4b52      	ldr	r3, [pc, #328]	; (1000c400 <main+0x328>)
1000c2b8:	60da      	str	r2, [r3, #12]
                    gpio_pin_set_output_level(PIN_LP_GPIO_5, true);
1000c2ba:	2101      	movs	r1, #1
1000c2bc:	2005      	movs	r0, #5
1000c2be:	4b55      	ldr	r3, [pc, #340]	; (1000c414 <main+0x33c>)
1000c2c0:	4798      	blx	r3
                    sms_pressure_ms58_poll_data();
1000c2c2:	4b55      	ldr	r3, [pc, #340]	; (1000c418 <main+0x340>)
1000c2c4:	4798      	blx	r3
                    gpio_pin_set_output_level(PIN_LP_GPIO_5, false);
1000c2c6:	2100      	movs	r1, #0
1000c2c8:	2005      	movs	r0, #5
1000c2ca:	4b52      	ldr	r3, [pc, #328]	; (1000c414 <main+0x33c>)
1000c2cc:	4798      	blx	r3
                }
                else {
                    DBG_LOG_CONT_DEV(" ...not yet");
                }
                break;
1000c2ce:	e02a      	b.n	1000c326 <main+0x24e>
                    gpio_pin_set_output_level(PIN_LP_GPIO_5, true);
                    sms_pressure_ms58_poll_data();
                    gpio_pin_set_output_level(PIN_LP_GPIO_5, false);
                }
                else {
                    DBG_LOG_CONT_DEV(" ...not yet");
1000c2d0:	4b52      	ldr	r3, [pc, #328]	; (1000c41c <main+0x344>)
1000c2d2:	0018      	movs	r0, r3
1000c2d4:	4b21      	ldr	r3, [pc, #132]	; (1000c35c <main+0x284>)
1000c2d6:	4798      	blx	r3
                }
                break;
1000c2d8:	e025      	b.n	1000c326 <main+0x24e>

                case SMS_CB_AON_TIMER:
                DBG_LOG_DEV("[main] aon timer interruption... reading ms58");
1000c2da:	4b1d      	ldr	r3, [pc, #116]	; (1000c350 <main+0x278>)
1000c2dc:	0018      	movs	r0, r3
1000c2de:	4b1d      	ldr	r3, [pc, #116]	; (1000c354 <main+0x27c>)
1000c2e0:	4798      	blx	r3
1000c2e2:	4b4f      	ldr	r3, [pc, #316]	; (1000c420 <main+0x348>)
1000c2e4:	0018      	movs	r0, r3
1000c2e6:	4b1d      	ldr	r3, [pc, #116]	; (1000c35c <main+0x284>)
1000c2e8:	4798      	blx	r3
                gpio_pin_set_output_level(PIN_LP_GPIO_5, true);
1000c2ea:	2101      	movs	r1, #1
1000c2ec:	2005      	movs	r0, #5
1000c2ee:	4b49      	ldr	r3, [pc, #292]	; (1000c414 <main+0x33c>)
1000c2f0:	4798      	blx	r3
                sms_pressure_ms58_poll_data();
1000c2f2:	4b49      	ldr	r3, [pc, #292]	; (1000c418 <main+0x340>)
1000c2f4:	4798      	blx	r3
                gpio_pin_set_output_level(PIN_LP_GPIO_5, false);
1000c2f6:	2100      	movs	r1, #0
1000c2f8:	2005      	movs	r0, #5
1000c2fa:	4b46      	ldr	r3, [pc, #280]	; (1000c414 <main+0x33c>)
1000c2fc:	4798      	blx	r3
                break;
1000c2fe:	e012      	b.n	1000c326 <main+0x24e>

                case SMS_CB_DUALTIMER1:
                DBG_LOG_DEV("[main]  dualtimer1 interruption...");
1000c300:	4b13      	ldr	r3, [pc, #76]	; (1000c350 <main+0x278>)
1000c302:	0018      	movs	r0, r3
1000c304:	4b13      	ldr	r3, [pc, #76]	; (1000c354 <main+0x27c>)
1000c306:	4798      	blx	r3
1000c308:	4b46      	ldr	r3, [pc, #280]	; (1000c424 <main+0x34c>)
1000c30a:	0018      	movs	r0, r3
1000c30c:	4b13      	ldr	r3, [pc, #76]	; (1000c35c <main+0x284>)
1000c30e:	4798      	blx	r3
                //if(ms58_device.init_ok) {
                    //gpio_pin_set_output_level(PIN_LP_GPIO_5, true);
                    //sms_pressure_ms58_poll_data();
                    //gpio_pin_set_output_level(PIN_LP_GPIO_5, false);
                //}
                break;
1000c310:	e009      	b.n	1000c326 <main+0x24e>
                
                case SMS_CB_DUALTIMER2:
                DBG_LOG_DEV("[main]  dualtimer2 interruption...");
1000c312:	4b0f      	ldr	r3, [pc, #60]	; (1000c350 <main+0x278>)
1000c314:	0018      	movs	r0, r3
1000c316:	4b0f      	ldr	r3, [pc, #60]	; (1000c354 <main+0x27c>)
1000c318:	4798      	blx	r3
1000c31a:	4b43      	ldr	r3, [pc, #268]	; (1000c428 <main+0x350>)
1000c31c:	0018      	movs	r0, r3
1000c31e:	4b0f      	ldr	r3, [pc, #60]	; (1000c35c <main+0x284>)
1000c320:	4798      	blx	r3
                break;
1000c322:	e000      	b.n	1000c326 <main+0x24e>
                
                case SMS_CB_NONE:
                default:
                break;
1000c324:	46c0      	nop			; (mov r8, r8)
            }
            sms_plf_int_state.source = SMS_CB_AON_TIMER;
1000c326:	4b04      	ldr	r3, [pc, #16]	; (1000c338 <main+0x260>)
1000c328:	2204      	movs	r2, #4
1000c32a:	701a      	strb	r2, [r3, #0]
            sms_plf_int_state.int_on = false;
1000c32c:	4b02      	ldr	r3, [pc, #8]	; (1000c338 <main+0x260>)
1000c32e:	2200      	movs	r2, #0
1000c330:	705a      	strb	r2, [r3, #1]
        //DBG_LOG_DEV("[main] no timer source selected");
        //break;
        //}
        //sms_timer0_state.int_on = false;
        //}
    }
1000c332:	e760      	b.n	1000c1f6 <main+0x11e>
1000c334:	1001c1f8 	.word	0x1001c1f8
1000c338:	1001c0a8 	.word	0x1001c0a8
1000c33c:	1001c194 	.word	0x1001c194
1000c340:	10013015 	.word	0x10013015
1000c344:	1000d6e9 	.word	0x1000d6e9
1000c348:	10013a55 	.word	0x10013a55
1000c34c:	10012b99 	.word	0x10012b99
1000c350:	1001a97c 	.word	0x1001a97c
1000c354:	10019095 	.word	0x10019095
1000c358:	1001aaac 	.word	0x1001aaac
1000c35c:	10018f75 	.word	0x10018f75
1000c360:	100107fd 	.word	0x100107fd
1000c364:	1000bea9 	.word	0x1000bea9
1000c368:	1000c461 	.word	0x1000c461
1000c36c:	1000a8a1 	.word	0x1000a8a1
1000c370:	1000a8f9 	.word	0x1000a8f9
1000c374:	1001b87c 	.word	0x1001b87c
1000c378:	1000ae71 	.word	0x1000ae71
1000c37c:	1000bba9 	.word	0x1000bba9
1000c380:	1000bca1 	.word	0x1000bca1
1000c384:	1000ac8d 	.word	0x1000ac8d
1000c388:	1000ada9 	.word	0x1000ada9
1000c38c:	1000c099 	.word	0x1000c099
1000c390:	10013b4d 	.word	0x10013b4d
1000c394:	1001c167 	.word	0x1001c167
1000c398:	1001c0c4 	.word	0x1001c0c4
1000c39c:	1000aaf9 	.word	0x1000aaf9
1000c3a0:	1000abe1 	.word	0x1000abe1
1000c3a4:	1001c2a4 	.word	0x1001c2a4
1000c3a8:	1001c114 	.word	0x1001c114
1000c3ac:	1000b2e1 	.word	0x1000b2e1
1000c3b0:	1000b3c9 	.word	0x1000b3c9
1000c3b4:	1001c254 	.word	0x1001c254
1000c3b8:	1000ba91 	.word	0x1000ba91
1000c3bc:	1000bb79 	.word	0x1000bb79
1000c3c0:	1001abe4 	.word	0x1001abe4
1000c3c4:	10010bc5 	.word	0x10010bc5
1000c3c8:	1001ac30 	.word	0x1001ac30
1000c3cc:	1000c085 	.word	0x1000c085
1000c3d0:	10012a69 	.word	0x10012a69
1000c3d4:	1000a809 	.word	0x1000a809
1000c3d8:	100107a5 	.word	0x100107a5
1000c3dc:	1001ac58 	.word	0x1001ac58
1000c3e0:	1001aad0 	.word	0x1001aad0
1000c3e4:	1000a9a9 	.word	0x1000a9a9
1000c3e8:	1001aaec 	.word	0x1001aaec
1000c3ec:	1000aa15 	.word	0x1000aa15
1000c3f0:	1000b0a9 	.word	0x1000b0a9
1000c3f4:	1000af15 	.word	0x1000af15
1000c3f8:	1000c53d 	.word	0x1000c53d
1000c3fc:	46500000 	.word	0x46500000
1000c400:	1001c0ac 	.word	0x1001c0ac
1000c404:	1001ab08 	.word	0x1001ab08
1000c408:	000003e7 	.word	0x000003e7
1000c40c:	1001c1c0 	.word	0x1001c1c0
1000c410:	1001ab28 	.word	0x1001ab28
1000c414:	1000cd15 	.word	0x1000cd15
1000c418:	1000b5f5 	.word	0x1000b5f5
1000c41c:	1001ab40 	.word	0x1001ab40
1000c420:	1001ab4c 	.word	0x1001ab4c
1000c424:	1001ab7c 	.word	0x1001ab7c
1000c428:	1001aba0 	.word	0x1001aba0

1000c42c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
1000c42c:	b580      	push	{r7, lr}
1000c42e:	b082      	sub	sp, #8
1000c430:	af00      	add	r7, sp, #0
1000c432:	6078      	str	r0, [r7, #4]
	if (n > 0) {
1000c434:	687b      	ldr	r3, [r7, #4]
1000c436:	2b00      	cmp	r3, #0
1000c438:	d00c      	beq.n	1000c454 <delay_cycles+0x28>
		SysTick->LOAD = n;
1000c43a:	4b08      	ldr	r3, [pc, #32]	; (1000c45c <delay_cycles+0x30>)
1000c43c:	687a      	ldr	r2, [r7, #4]
1000c43e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
1000c440:	4b06      	ldr	r3, [pc, #24]	; (1000c45c <delay_cycles+0x30>)
1000c442:	2200      	movs	r2, #0
1000c444:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000c446:	46c0      	nop			; (mov r8, r8)
1000c448:	4b04      	ldr	r3, [pc, #16]	; (1000c45c <delay_cycles+0x30>)
1000c44a:	681a      	ldr	r2, [r3, #0]
1000c44c:	2380      	movs	r3, #128	; 0x80
1000c44e:	025b      	lsls	r3, r3, #9
1000c450:	4013      	ands	r3, r2
1000c452:	d0f9      	beq.n	1000c448 <delay_cycles+0x1c>
		};
	}
}
1000c454:	46c0      	nop			; (mov r8, r8)
1000c456:	46bd      	mov	sp, r7
1000c458:	b002      	add	sp, #8
1000c45a:	bd80      	pop	{r7, pc}
1000c45c:	e000e010 	.word	0xe000e010

1000c460 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
1000c460:	b580      	push	{r7, lr}
1000c462:	af00      	add	r7, sp, #0
	cycles_per_ms = system_clock_get_value();
1000c464:	4b0f      	ldr	r3, [pc, #60]	; (1000c4a4 <delay_init+0x44>)
1000c466:	4798      	blx	r3
1000c468:	0002      	movs	r2, r0
1000c46a:	4b0f      	ldr	r3, [pc, #60]	; (1000c4a8 <delay_init+0x48>)
1000c46c:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
1000c46e:	4b0e      	ldr	r3, [pc, #56]	; (1000c4a8 <delay_init+0x48>)
1000c470:	6818      	ldr	r0, [r3, #0]
1000c472:	4b0e      	ldr	r3, [pc, #56]	; (1000c4ac <delay_init+0x4c>)
1000c474:	22fa      	movs	r2, #250	; 0xfa
1000c476:	0091      	lsls	r1, r2, #2
1000c478:	4798      	blx	r3
1000c47a:	0003      	movs	r3, r0
1000c47c:	001a      	movs	r2, r3
1000c47e:	4b0a      	ldr	r3, [pc, #40]	; (1000c4a8 <delay_init+0x48>)
1000c480:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
1000c482:	4b09      	ldr	r3, [pc, #36]	; (1000c4a8 <delay_init+0x48>)
1000c484:	6818      	ldr	r0, [r3, #0]
1000c486:	4b09      	ldr	r3, [pc, #36]	; (1000c4ac <delay_init+0x4c>)
1000c488:	22fa      	movs	r2, #250	; 0xfa
1000c48a:	0091      	lsls	r1, r2, #2
1000c48c:	4798      	blx	r3
1000c48e:	0003      	movs	r3, r0
1000c490:	001a      	movs	r2, r3
1000c492:	4b07      	ldr	r3, [pc, #28]	; (1000c4b0 <delay_init+0x50>)
1000c494:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
1000c496:	4b07      	ldr	r3, [pc, #28]	; (1000c4b4 <delay_init+0x54>)
1000c498:	2205      	movs	r2, #5
1000c49a:	601a      	str	r2, [r3, #0]
}
1000c49c:	46c0      	nop			; (mov r8, r8)
1000c49e:	46bd      	mov	sp, r7
1000c4a0:	bd80      	pop	{r7, pc}
1000c4a2:	46c0      	nop			; (mov r8, r8)
1000c4a4:	1000eed5 	.word	0x1000eed5
1000c4a8:	1001b880 	.word	0x1001b880
1000c4ac:	100170a5 	.word	0x100170a5
1000c4b0:	1001b884 	.word	0x1001b884
1000c4b4:	e000e010 	.word	0xe000e010

1000c4b8 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000c4b8:	b580      	push	{r7, lr}
1000c4ba:	b082      	sub	sp, #8
1000c4bc:	af00      	add	r7, sp, #0
1000c4be:	6078      	str	r0, [r7, #4]
	while (n--) {
1000c4c0:	e004      	b.n	1000c4cc <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000c4c2:	4b07      	ldr	r3, [pc, #28]	; (1000c4e0 <delay_cycles_ms+0x28>)
1000c4c4:	681b      	ldr	r3, [r3, #0]
1000c4c6:	0018      	movs	r0, r3
1000c4c8:	4b06      	ldr	r3, [pc, #24]	; (1000c4e4 <delay_cycles_ms+0x2c>)
1000c4ca:	4798      	blx	r3
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000c4cc:	687b      	ldr	r3, [r7, #4]
1000c4ce:	1e5a      	subs	r2, r3, #1
1000c4d0:	607a      	str	r2, [r7, #4]
1000c4d2:	2b00      	cmp	r3, #0
1000c4d4:	d1f5      	bne.n	1000c4c2 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000c4d6:	46c0      	nop			; (mov r8, r8)
1000c4d8:	46bd      	mov	sp, r7
1000c4da:	b002      	add	sp, #8
1000c4dc:	bd80      	pop	{r7, pc}
1000c4de:	46c0      	nop			; (mov r8, r8)
1000c4e0:	1001b880 	.word	0x1001b880
1000c4e4:	1000c42d 	.word	0x1000c42d

1000c4e8 <delay_cycle>:
#include "aon_sleep_timer.h"

static aon_sleep_timer_callback_t aon_sleep_timer_callback;

static void delay_cycle(uint32_t cycles)
{
1000c4e8:	b580      	push	{r7, lr}
1000c4ea:	b084      	sub	sp, #16
1000c4ec:	af00      	add	r7, sp, #0
1000c4ee:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
1000c4f0:	2300      	movs	r3, #0
1000c4f2:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < cycles*100; i++) {
1000c4f4:	2300      	movs	r3, #0
1000c4f6:	60fb      	str	r3, [r7, #12]
1000c4f8:	e003      	b.n	1000c502 <delay_cycle+0x1a>
		asm volatile ("nop");
1000c4fa:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000c4fc:	68fb      	ldr	r3, [r7, #12]
1000c4fe:	3301      	adds	r3, #1
1000c500:	60fb      	str	r3, [r7, #12]
1000c502:	687b      	ldr	r3, [r7, #4]
1000c504:	2264      	movs	r2, #100	; 0x64
1000c506:	435a      	muls	r2, r3
1000c508:	68fb      	ldr	r3, [r7, #12]
1000c50a:	429a      	cmp	r2, r3
1000c50c:	d8f5      	bhi.n	1000c4fa <delay_cycle+0x12>
		asm volatile ("nop");
	}
}
1000c50e:	46c0      	nop			; (mov r8, r8)
1000c510:	46bd      	mov	sp, r7
1000c512:	b004      	add	sp, #16
1000c514:	bd80      	pop	{r7, pc}
1000c516:	46c0      	nop			; (mov r8, r8)

1000c518 <aon_sleep_timer_get_config_defaults>:
 * modified by the user application.
 *
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
1000c518:	b580      	push	{r7, lr}
1000c51a:	b082      	sub	sp, #8
1000c51c:	af00      	add	r7, sp, #0
1000c51e:	6078      	str	r0, [r7, #4]
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
1000c520:	687b      	ldr	r3, [r7, #4]
1000c522:	2201      	movs	r2, #1
1000c524:	701a      	strb	r2, [r3, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
1000c526:	687b      	ldr	r3, [r7, #4]
1000c528:	2201      	movs	r2, #1
1000c52a:	705a      	strb	r2, [r3, #1]
	config->counter = 32000;
1000c52c:	687b      	ldr	r3, [r7, #4]
1000c52e:	22fa      	movs	r2, #250	; 0xfa
1000c530:	01d2      	lsls	r2, r2, #7
1000c532:	605a      	str	r2, [r3, #4]
}
1000c534:	46c0      	nop			; (mov r8, r8)
1000c536:	46bd      	mov	sp, r7
1000c538:	b002      	add	sp, #8
1000c53a:	bd80      	pop	{r7, pc}

1000c53c <aon_sleep_timer_get_current_value>:
 * \brief Get AON Sleep Timer module instance current value.
 *
 * \retval Current value
 */
uint32_t aon_sleep_timer_get_current_value(void)
{
1000c53c:	b580      	push	{r7, lr}
1000c53e:	af00      	add	r7, sp, #0
	return AON_SLEEP_TIMER0->CURRENT_COUNT_VALUE.reg;
1000c540:	4b02      	ldr	r3, [pc, #8]	; (1000c54c <aon_sleep_timer_get_current_value+0x10>)
1000c542:	68db      	ldr	r3, [r3, #12]
}
1000c544:	0018      	movs	r0, r3
1000c546:	46bd      	mov	sp, r7
1000c548:	bd80      	pop	{r7, pc}
1000c54a:	46c0      	nop			; (mov r8, r8)
1000c54c:	4000d000 	.word	0x4000d000

1000c550 <aon_sleep_timer_clear_interrup>:
 *
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
1000c550:	b580      	push	{r7, lr}
1000c552:	af00      	add	r7, sp, #0
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
1000c554:	4b04      	ldr	r3, [pc, #16]	; (1000c568 <aon_sleep_timer_clear_interrup+0x18>)
1000c556:	4a04      	ldr	r2, [pc, #16]	; (1000c568 <aon_sleep_timer_clear_interrup+0x18>)
1000c558:	6812      	ldr	r2, [r2, #0]
1000c55a:	2110      	movs	r1, #16
1000c55c:	430a      	orrs	r2, r1
1000c55e:	601a      	str	r2, [r3, #0]
}
1000c560:	46c0      	nop			; (mov r8, r8)
1000c562:	46bd      	mov	sp, r7
1000c564:	bd80      	pop	{r7, pc}
1000c566:	46c0      	nop			; (mov r8, r8)
1000c568:	4000d000 	.word	0x4000d000

1000c56c <aon_sleep_timer_register_callback>:
 * Registers and enable a callback function which is implemented by the user.
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
1000c56c:	b580      	push	{r7, lr}
1000c56e:	b082      	sub	sp, #8
1000c570:	af00      	add	r7, sp, #0
1000c572:	6078      	str	r0, [r7, #4]
	aon_sleep_timer_callback = fun;
1000c574:	4b03      	ldr	r3, [pc, #12]	; (1000c584 <aon_sleep_timer_register_callback+0x18>)
1000c576:	687a      	ldr	r2, [r7, #4]
1000c578:	601a      	str	r2, [r3, #0]
}
1000c57a:	46c0      	nop			; (mov r8, r8)
1000c57c:	46bd      	mov	sp, r7
1000c57e:	b002      	add	sp, #8
1000c580:	bd80      	pop	{r7, pc}
1000c582:	46c0      	nop			; (mov r8, r8)
1000c584:	1001b97c 	.word	0x1001b97c

1000c588 <aon_sleep_timer_unregister_callback>:
 *
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
1000c588:	b580      	push	{r7, lr}
1000c58a:	af00      	add	r7, sp, #0
	aon_sleep_timer_callback = NULL;
1000c58c:	4b02      	ldr	r3, [pc, #8]	; (1000c598 <aon_sleep_timer_unregister_callback+0x10>)
1000c58e:	2200      	movs	r2, #0
1000c590:	601a      	str	r2, [r3, #0]
}
1000c592:	46c0      	nop			; (mov r8, r8)
1000c594:	46bd      	mov	sp, r7
1000c596:	bd80      	pop	{r7, pc}
1000c598:	1001b97c 	.word	0x1001b97c

1000c59c <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
1000c59c:	b580      	push	{r7, lr}
1000c59e:	af00      	add	r7, sp, #0
	aon_sleep_timer_clear_interrup();
1000c5a0:	4b05      	ldr	r3, [pc, #20]	; (1000c5b8 <aon_sleep_timer_isr_handler+0x1c>)
1000c5a2:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000c5a4:	4b05      	ldr	r3, [pc, #20]	; (1000c5bc <aon_sleep_timer_isr_handler+0x20>)
1000c5a6:	681b      	ldr	r3, [r3, #0]
1000c5a8:	2b00      	cmp	r3, #0
1000c5aa:	d002      	beq.n	1000c5b2 <aon_sleep_timer_isr_handler+0x16>
		aon_sleep_timer_callback();
1000c5ac:	4b03      	ldr	r3, [pc, #12]	; (1000c5bc <aon_sleep_timer_isr_handler+0x20>)
1000c5ae:	681b      	ldr	r3, [r3, #0]
1000c5b0:	4798      	blx	r3
	}
}
1000c5b2:	46c0      	nop			; (mov r8, r8)
1000c5b4:	46bd      	mov	sp, r7
1000c5b6:	bd80      	pop	{r7, pc}
1000c5b8:	1000c551 	.word	0x1000c551
1000c5bc:	1001b97c 	.word	0x1001b97c

1000c5c0 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000c5c0:	b580      	push	{r7, lr}
1000c5c2:	b084      	sub	sp, #16
1000c5c4:	af00      	add	r7, sp, #0
1000c5c6:	6078      	str	r0, [r7, #4]
	uint32_t aon_st_ctrl = 0;
1000c5c8:	2300      	movs	r3, #0
1000c5ca:	60fb      	str	r3, [r7, #12]

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
1000c5cc:	4b36      	ldr	r3, [pc, #216]	; (1000c6a8 <aon_sleep_timer_init+0xe8>)
1000c5ce:	2200      	movs	r2, #0
1000c5d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
1000c5d2:	687b      	ldr	r3, [r7, #4]
1000c5d4:	781b      	ldrb	r3, [r3, #0]
1000c5d6:	2b02      	cmp	r3, #2
1000c5d8:	d108      	bne.n	1000c5ec <aon_sleep_timer_init+0x2c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000c5da:	4a33      	ldr	r2, [pc, #204]	; (1000c6a8 <aon_sleep_timer_init+0xe8>)
1000c5dc:	4b32      	ldr	r3, [pc, #200]	; (1000c6a8 <aon_sleep_timer_init+0xe8>)
1000c5de:	7b1b      	ldrb	r3, [r3, #12]
1000c5e0:	b2db      	uxtb	r3, r3
1000c5e2:	2103      	movs	r1, #3
1000c5e4:	430b      	orrs	r3, r1
1000c5e6:	b2db      	uxtb	r3, r3
1000c5e8:	7313      	strb	r3, [r2, #12]
1000c5ea:	e00b      	b.n	1000c604 <aon_sleep_timer_init+0x44>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
1000c5ec:	687b      	ldr	r3, [r7, #4]
1000c5ee:	781b      	ldrb	r3, [r3, #0]
1000c5f0:	2b01      	cmp	r3, #1
1000c5f2:	d107      	bne.n	1000c604 <aon_sleep_timer_init+0x44>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000c5f4:	4a2c      	ldr	r2, [pc, #176]	; (1000c6a8 <aon_sleep_timer_init+0xe8>)
1000c5f6:	4b2c      	ldr	r3, [pc, #176]	; (1000c6a8 <aon_sleep_timer_init+0xe8>)
1000c5f8:	7b1b      	ldrb	r3, [r3, #12]
1000c5fa:	b2db      	uxtb	r3, r3
1000c5fc:	2101      	movs	r1, #1
1000c5fe:	430b      	orrs	r3, r1
1000c600:	b2db      	uxtb	r3, r3
1000c602:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000c604:	4b29      	ldr	r3, [pc, #164]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c606:	681b      	ldr	r3, [r3, #0]
1000c608:	60fb      	str	r3, [r7, #12]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
1000c60a:	e018      	b.n	1000c63e <aon_sleep_timer_init+0x7e>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000c60c:	4b27      	ldr	r3, [pc, #156]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c60e:	2200      	movs	r2, #0
1000c610:	601a      	str	r2, [r3, #0]
		delay_cycle(3);
1000c612:	2003      	movs	r0, #3
1000c614:	4b26      	ldr	r3, [pc, #152]	; (1000c6b0 <aon_sleep_timer_init+0xf0>)
1000c616:	4798      	blx	r3
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000c618:	e002      	b.n	1000c620 <aon_sleep_timer_init+0x60>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000c61a:	4b24      	ldr	r3, [pc, #144]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c61c:	681b      	ldr	r3, [r3, #0]
1000c61e:	60fb      	str	r3, [r7, #12]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000c620:	687b      	ldr	r3, [r7, #4]
1000c622:	785b      	ldrb	r3, [r3, #1]
1000c624:	2b00      	cmp	r3, #0
1000c626:	d102      	bne.n	1000c62e <aon_sleep_timer_init+0x6e>
1000c628:	2380      	movs	r3, #128	; 0x80
1000c62a:	009b      	lsls	r3, r3, #2
1000c62c:	e001      	b.n	1000c632 <aon_sleep_timer_init+0x72>
1000c62e:	2380      	movs	r3, #128	; 0x80
1000c630:	01db      	lsls	r3, r3, #7
1000c632:	68fa      	ldr	r2, [r7, #12]
1000c634:	4013      	ands	r3, r2
1000c636:	d1f0      	bne.n	1000c61a <aon_sleep_timer_init+0x5a>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000c638:	4b1c      	ldr	r3, [pc, #112]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c63a:	681b      	ldr	r3, [r3, #0]
1000c63c:	60fb      	str	r3, [r7, #12]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
1000c63e:	68fb      	ldr	r3, [r7, #12]
1000c640:	005b      	lsls	r3, r3, #1
1000c642:	085b      	lsrs	r3, r3, #1
1000c644:	d1e2      	bne.n	1000c60c <aon_sleep_timer_init+0x4c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
1000c646:	687b      	ldr	r3, [r7, #4]
1000c648:	785b      	ldrb	r3, [r3, #1]
1000c64a:	2b00      	cmp	r3, #0
1000c64c:	d107      	bne.n	1000c65e <aon_sleep_timer_init+0x9e>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000c64e:	4a17      	ldr	r2, [pc, #92]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c650:	687b      	ldr	r3, [r7, #4]
1000c652:	685b      	ldr	r3, [r3, #4]
1000c654:	6053      	str	r3, [r2, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
1000c656:	4b15      	ldr	r3, [pc, #84]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c658:	2201      	movs	r2, #1
1000c65a:	601a      	str	r2, [r3, #0]
1000c65c:	e006      	b.n	1000c66c <aon_sleep_timer_init+0xac>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000c65e:	4a13      	ldr	r2, [pc, #76]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c660:	687b      	ldr	r3, [r7, #4]
1000c662:	685b      	ldr	r3, [r3, #4]
1000c664:	6053      	str	r3, [r2, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000c666:	4b11      	ldr	r3, [pc, #68]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c668:	2202      	movs	r2, #2
1000c66a:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
1000c66c:	687b      	ldr	r3, [r7, #4]
1000c66e:	785b      	ldrb	r3, [r3, #1]
1000c670:	2b01      	cmp	r3, #1
1000c672:	d10c      	bne.n	1000c68e <aon_sleep_timer_init+0xce>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000c674:	46c0      	nop			; (mov r8, r8)
1000c676:	4b0d      	ldr	r3, [pc, #52]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c678:	681a      	ldr	r2, [r3, #0]
1000c67a:	23e0      	movs	r3, #224	; 0xe0
1000c67c:	01db      	lsls	r3, r3, #7
1000c67e:	401a      	ands	r2, r3
1000c680:	23e0      	movs	r3, #224	; 0xe0
1000c682:	01db      	lsls	r3, r3, #7
1000c684:	429a      	cmp	r2, r3
1000c686:	d1f6      	bne.n	1000c676 <aon_sleep_timer_init+0xb6>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000c688:	4b08      	ldr	r3, [pc, #32]	; (1000c6ac <aon_sleep_timer_init+0xec>)
1000c68a:	2200      	movs	r2, #0
1000c68c:	601a      	str	r2, [r3, #0]
	}

	aon_sleep_timer_callback = NULL;
1000c68e:	4b09      	ldr	r3, [pc, #36]	; (1000c6b4 <aon_sleep_timer_init+0xf4>)
1000c690:	2200      	movs	r2, #0
1000c692:	601a      	str	r2, [r3, #0]
	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000c694:	4b08      	ldr	r3, [pc, #32]	; (1000c6b8 <aon_sleep_timer_init+0xf8>)
1000c696:	0019      	movs	r1, r3
1000c698:	202b      	movs	r0, #43	; 0x2b
1000c69a:	4b08      	ldr	r3, [pc, #32]	; (1000c6bc <aon_sleep_timer_init+0xfc>)
1000c69c:	4798      	blx	r3
}
1000c69e:	46c0      	nop			; (mov r8, r8)
1000c6a0:	46bd      	mov	sp, r7
1000c6a2:	b004      	add	sp, #16
1000c6a4:	bd80      	pop	{r7, pc}
1000c6a6:	46c0      	nop			; (mov r8, r8)
1000c6a8:	4000e000 	.word	0x4000e000
1000c6ac:	4000d000 	.word	0x4000d000
1000c6b0:	1000c4e9 	.word	0x1000c4e9
1000c6b4:	1001b97c 	.word	0x1001b97c
1000c6b8:	1000c59d 	.word	0x1000c59d
1000c6bc:	1000fb9d 	.word	0x1000fb9d

1000c6c0 <dualtimer_get_config_defaults>:
 * modified by the user application.
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
1000c6c0:	b580      	push	{r7, lr}
1000c6c2:	b082      	sub	sp, #8
1000c6c4:	af00      	add	r7, sp, #0
1000c6c6:	6078      	str	r0, [r7, #4]
	config->timer1.timer_enable = true;
1000c6c8:	687b      	ldr	r3, [r7, #4]
1000c6ca:	2201      	movs	r2, #1
1000c6cc:	701a      	strb	r2, [r3, #0]
	config->timer2.timer_enable = true;
1000c6ce:	687b      	ldr	r3, [r7, #4]
1000c6d0:	2201      	movs	r2, #1
1000c6d2:	731a      	strb	r2, [r3, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000c6d4:	687b      	ldr	r3, [r7, #4]
1000c6d6:	2202      	movs	r2, #2
1000c6d8:	705a      	strb	r2, [r3, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000c6da:	687b      	ldr	r3, [r7, #4]
1000c6dc:	2202      	movs	r2, #2
1000c6de:	735a      	strb	r2, [r3, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000c6e0:	687b      	ldr	r3, [r7, #4]
1000c6e2:	2201      	movs	r2, #1
1000c6e4:	709a      	strb	r2, [r3, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000c6e6:	687b      	ldr	r3, [r7, #4]
1000c6e8:	2201      	movs	r2, #1
1000c6ea:	739a      	strb	r2, [r3, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000c6ec:	687b      	ldr	r3, [r7, #4]
1000c6ee:	2200      	movs	r2, #0
1000c6f0:	70da      	strb	r2, [r3, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000c6f2:	687b      	ldr	r3, [r7, #4]
1000c6f4:	2200      	movs	r2, #0
1000c6f6:	73da      	strb	r2, [r3, #15]

	config->timer1.interrup_enable = true;
1000c6f8:	687b      	ldr	r3, [r7, #4]
1000c6fa:	2201      	movs	r2, #1
1000c6fc:	711a      	strb	r2, [r3, #4]
	config->timer2.interrup_enable = true;
1000c6fe:	687b      	ldr	r3, [r7, #4]
1000c700:	2201      	movs	r2, #1
1000c702:	741a      	strb	r2, [r3, #16]

	config->timer1.load_value = 0;
1000c704:	687b      	ldr	r3, [r7, #4]
1000c706:	2200      	movs	r2, #0
1000c708:	609a      	str	r2, [r3, #8]
	config->timer2.load_value = 0;
1000c70a:	687b      	ldr	r3, [r7, #4]
1000c70c:	2200      	movs	r2, #0
1000c70e:	615a      	str	r2, [r3, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000c710:	687b      	ldr	r3, [r7, #4]
1000c712:	2200      	movs	r2, #0
1000c714:	761a      	strb	r2, [r3, #24]
}
1000c716:	46c0      	nop			; (mov r8, r8)
1000c718:	46bd      	mov	sp, r7
1000c71a:	b002      	add	sp, #8
1000c71c:	bd80      	pop	{r7, pc}
1000c71e:	46c0      	nop			; (mov r8, r8)

1000c720 <dualtimer_get_interrupt_status>:
 * \param[in]     timer        Timer1/Timer2
 *
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
1000c720:	b580      	push	{r7, lr}
1000c722:	b082      	sub	sp, #8
1000c724:	af00      	add	r7, sp, #0
1000c726:	0002      	movs	r2, r0
1000c728:	1dfb      	adds	r3, r7, #7
1000c72a:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000c72c:	1dfb      	adds	r3, r7, #7
1000c72e:	781b      	ldrb	r3, [r3, #0]
1000c730:	2b00      	cmp	r3, #0
1000c732:	d103      	bne.n	1000c73c <dualtimer_get_interrupt_status+0x1c>
		return DUALTIMER0->TIMER1MIS.reg;
1000c734:	4b05      	ldr	r3, [pc, #20]	; (1000c74c <dualtimer_get_interrupt_status+0x2c>)
1000c736:	7d1b      	ldrb	r3, [r3, #20]
1000c738:	b2db      	uxtb	r3, r3
1000c73a:	e003      	b.n	1000c744 <dualtimer_get_interrupt_status+0x24>
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000c73c:	4a03      	ldr	r2, [pc, #12]	; (1000c74c <dualtimer_get_interrupt_status+0x2c>)
1000c73e:	2334      	movs	r3, #52	; 0x34
1000c740:	5cd3      	ldrb	r3, [r2, r3]
1000c742:	b2db      	uxtb	r3, r3
	}
}
1000c744:	0018      	movs	r0, r3
1000c746:	46bd      	mov	sp, r7
1000c748:	b002      	add	sp, #8
1000c74a:	bd80      	pop	{r7, pc}
1000c74c:	40001000 	.word	0x40001000

1000c750 <dualtimer_clear_interrupt_status>:
 * Clear the Dualtimer module timer1/timer2 interrupt status
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
1000c750:	b580      	push	{r7, lr}
1000c752:	b082      	sub	sp, #8
1000c754:	af00      	add	r7, sp, #0
1000c756:	0002      	movs	r2, r0
1000c758:	1dfb      	adds	r3, r7, #7
1000c75a:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000c75c:	1dfb      	adds	r3, r7, #7
1000c75e:	781b      	ldrb	r3, [r3, #0]
1000c760:	2b00      	cmp	r3, #0
1000c762:	d103      	bne.n	1000c76c <dualtimer_clear_interrupt_status+0x1c>
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000c764:	4b05      	ldr	r3, [pc, #20]	; (1000c77c <dualtimer_clear_interrupt_status+0x2c>)
1000c766:	2201      	movs	r2, #1
1000c768:	731a      	strb	r2, [r3, #12]
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
	}
}
1000c76a:	e003      	b.n	1000c774 <dualtimer_clear_interrupt_status+0x24>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000c76c:	4a03      	ldr	r2, [pc, #12]	; (1000c77c <dualtimer_clear_interrupt_status+0x2c>)
1000c76e:	232c      	movs	r3, #44	; 0x2c
1000c770:	2101      	movs	r1, #1
1000c772:	54d1      	strb	r1, [r2, r3]
	}
}
1000c774:	46c0      	nop			; (mov r8, r8)
1000c776:	46bd      	mov	sp, r7
1000c778:	b002      	add	sp, #8
1000c77a:	bd80      	pop	{r7, pc}
1000c77c:	40001000 	.word	0x40001000

1000c780 <dualtimer_enable>:
 * Enable the Dualtimer module timer1/timer2
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
1000c780:	b580      	push	{r7, lr}
1000c782:	b082      	sub	sp, #8
1000c784:	af00      	add	r7, sp, #0
1000c786:	0002      	movs	r2, r0
1000c788:	1dfb      	adds	r3, r7, #7
1000c78a:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000c78c:	1dfb      	adds	r3, r7, #7
1000c78e:	781b      	ldrb	r3, [r3, #0]
1000c790:	2b00      	cmp	r3, #0
1000c792:	d109      	bne.n	1000c7a8 <dualtimer_enable+0x28>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000c794:	490c      	ldr	r1, [pc, #48]	; (1000c7c8 <dualtimer_enable+0x48>)
1000c796:	4b0c      	ldr	r3, [pc, #48]	; (1000c7c8 <dualtimer_enable+0x48>)
1000c798:	7a1b      	ldrb	r3, [r3, #8]
1000c79a:	b2db      	uxtb	r3, r3
1000c79c:	2280      	movs	r2, #128	; 0x80
1000c79e:	4252      	negs	r2, r2
1000c7a0:	4313      	orrs	r3, r2
1000c7a2:	b2db      	uxtb	r3, r3
1000c7a4:	720b      	strb	r3, [r1, #8]
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
	}
}
1000c7a6:	e00a      	b.n	1000c7be <dualtimer_enable+0x3e>
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000c7a8:	4907      	ldr	r1, [pc, #28]	; (1000c7c8 <dualtimer_enable+0x48>)
1000c7aa:	4a07      	ldr	r2, [pc, #28]	; (1000c7c8 <dualtimer_enable+0x48>)
1000c7ac:	2328      	movs	r3, #40	; 0x28
1000c7ae:	5cd3      	ldrb	r3, [r2, r3]
1000c7b0:	b2db      	uxtb	r3, r3
1000c7b2:	2280      	movs	r2, #128	; 0x80
1000c7b4:	4252      	negs	r2, r2
1000c7b6:	4313      	orrs	r3, r2
1000c7b8:	b2da      	uxtb	r2, r3
1000c7ba:	2328      	movs	r3, #40	; 0x28
1000c7bc:	54ca      	strb	r2, [r1, r3]
	}
}
1000c7be:	46c0      	nop			; (mov r8, r8)
1000c7c0:	46bd      	mov	sp, r7
1000c7c2:	b002      	add	sp, #8
1000c7c4:	bd80      	pop	{r7, pc}
1000c7c6:	46c0      	nop			; (mov r8, r8)
1000c7c8:	40001000 	.word	0x40001000

1000c7cc <dualtimer_disable>:
 * Disable the Dualtimer module timer1/timer2
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
1000c7cc:	b580      	push	{r7, lr}
1000c7ce:	b082      	sub	sp, #8
1000c7d0:	af00      	add	r7, sp, #0
1000c7d2:	0002      	movs	r2, r0
1000c7d4:	1dfb      	adds	r3, r7, #7
1000c7d6:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
1000c7d8:	1dfb      	adds	r3, r7, #7
1000c7da:	781b      	ldrb	r3, [r3, #0]
1000c7dc:	2b00      	cmp	r3, #0
1000c7de:	d108      	bne.n	1000c7f2 <dualtimer_disable+0x26>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000c7e0:	4a0b      	ldr	r2, [pc, #44]	; (1000c810 <dualtimer_disable+0x44>)
1000c7e2:	4b0b      	ldr	r3, [pc, #44]	; (1000c810 <dualtimer_disable+0x44>)
1000c7e4:	7a1b      	ldrb	r3, [r3, #8]
1000c7e6:	b2db      	uxtb	r3, r3
1000c7e8:	217f      	movs	r1, #127	; 0x7f
1000c7ea:	400b      	ands	r3, r1
1000c7ec:	b2db      	uxtb	r3, r3
1000c7ee:	7213      	strb	r3, [r2, #8]
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
	}
}
1000c7f0:	e009      	b.n	1000c806 <dualtimer_disable+0x3a>
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000c7f2:	4a07      	ldr	r2, [pc, #28]	; (1000c810 <dualtimer_disable+0x44>)
1000c7f4:	4906      	ldr	r1, [pc, #24]	; (1000c810 <dualtimer_disable+0x44>)
1000c7f6:	2328      	movs	r3, #40	; 0x28
1000c7f8:	5ccb      	ldrb	r3, [r1, r3]
1000c7fa:	b2db      	uxtb	r3, r3
1000c7fc:	217f      	movs	r1, #127	; 0x7f
1000c7fe:	400b      	ands	r3, r1
1000c800:	b2d9      	uxtb	r1, r3
1000c802:	2328      	movs	r3, #40	; 0x28
1000c804:	54d1      	strb	r1, [r2, r3]
	}
}
1000c806:	46c0      	nop			; (mov r8, r8)
1000c808:	46bd      	mov	sp, r7
1000c80a:	b002      	add	sp, #8
1000c80c:	bd80      	pop	{r7, pc}
1000c80e:	46c0      	nop			; (mov r8, r8)
1000c810:	40001000 	.word	0x40001000

1000c814 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000c814:	b580      	push	{r7, lr}
1000c816:	af00      	add	r7, sp, #0
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000c818:	2000      	movs	r0, #0
1000c81a:	4b10      	ldr	r3, [pc, #64]	; (1000c85c <dualtimer_isr_handler+0x48>)
1000c81c:	4798      	blx	r3
1000c81e:	1e03      	subs	r3, r0, #0
1000c820:	d009      	beq.n	1000c836 <dualtimer_isr_handler+0x22>
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
1000c822:	2000      	movs	r0, #0
1000c824:	4b0e      	ldr	r3, [pc, #56]	; (1000c860 <dualtimer_isr_handler+0x4c>)
1000c826:	4798      	blx	r3
		if (dualtimer_callback_timer1)
1000c828:	4b0e      	ldr	r3, [pc, #56]	; (1000c864 <dualtimer_isr_handler+0x50>)
1000c82a:	681b      	ldr	r3, [r3, #0]
1000c82c:	2b00      	cmp	r3, #0
1000c82e:	d002      	beq.n	1000c836 <dualtimer_isr_handler+0x22>
			dualtimer_callback_timer1();
1000c830:	4b0c      	ldr	r3, [pc, #48]	; (1000c864 <dualtimer_isr_handler+0x50>)
1000c832:	681b      	ldr	r3, [r3, #0]
1000c834:	4798      	blx	r3
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000c836:	2001      	movs	r0, #1
1000c838:	4b08      	ldr	r3, [pc, #32]	; (1000c85c <dualtimer_isr_handler+0x48>)
1000c83a:	4798      	blx	r3
1000c83c:	1e03      	subs	r3, r0, #0
1000c83e:	d009      	beq.n	1000c854 <dualtimer_isr_handler+0x40>
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
1000c840:	2001      	movs	r0, #1
1000c842:	4b07      	ldr	r3, [pc, #28]	; (1000c860 <dualtimer_isr_handler+0x4c>)
1000c844:	4798      	blx	r3
		if (dualtimer_callback_timer2)
1000c846:	4b08      	ldr	r3, [pc, #32]	; (1000c868 <dualtimer_isr_handler+0x54>)
1000c848:	681b      	ldr	r3, [r3, #0]
1000c84a:	2b00      	cmp	r3, #0
1000c84c:	d002      	beq.n	1000c854 <dualtimer_isr_handler+0x40>
			dualtimer_callback_timer2();
1000c84e:	4b06      	ldr	r3, [pc, #24]	; (1000c868 <dualtimer_isr_handler+0x54>)
1000c850:	681b      	ldr	r3, [r3, #0]
1000c852:	4798      	blx	r3
	}
}
1000c854:	46c0      	nop			; (mov r8, r8)
1000c856:	46bd      	mov	sp, r7
1000c858:	bd80      	pop	{r7, pc}
1000c85a:	46c0      	nop			; (mov r8, r8)
1000c85c:	1000c721 	.word	0x1000c721
1000c860:	1000c751 	.word	0x1000c751
1000c864:	1001b980 	.word	0x1001b980
1000c868:	1001b984 	.word	0x1001b984

1000c86c <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000c86c:	b580      	push	{r7, lr}
1000c86e:	b084      	sub	sp, #16
1000c870:	af00      	add	r7, sp, #0
1000c872:	6078      	str	r0, [r7, #4]
	uint8_t regval = 0;
1000c874:	230f      	movs	r3, #15
1000c876:	18fb      	adds	r3, r7, r3
1000c878:	2200      	movs	r2, #0
1000c87a:	701a      	strb	r2, [r3, #0]

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000c87c:	2004      	movs	r0, #4
1000c87e:	4b6d      	ldr	r3, [pc, #436]	; (1000ca34 <dualtimer_init+0x1c8>)
1000c880:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000c882:	687b      	ldr	r3, [r7, #4]
1000c884:	781b      	ldrb	r3, [r3, #0]
1000c886:	2b00      	cmp	r3, #0
1000c888:	d103      	bne.n	1000c892 <dualtimer_init+0x26>
1000c88a:	687b      	ldr	r3, [r7, #4]
1000c88c:	7b1b      	ldrb	r3, [r3, #12]
1000c88e:	2b00      	cmp	r3, #0
1000c890:	d014      	beq.n	1000c8bc <dualtimer_init+0x50>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000c892:	4b69      	ldr	r3, [pc, #420]	; (1000ca38 <dualtimer_init+0x1cc>)
1000c894:	4a68      	ldr	r2, [pc, #416]	; (1000ca38 <dualtimer_init+0x1cc>)
1000c896:	68d2      	ldr	r2, [r2, #12]
1000c898:	2120      	movs	r1, #32
1000c89a:	430a      	orrs	r2, r1
1000c89c:	60da      	str	r2, [r3, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
1000c89e:	4a66      	ldr	r2, [pc, #408]	; (1000ca38 <dualtimer_init+0x1cc>)
1000c8a0:	687b      	ldr	r3, [r7, #4]
1000c8a2:	7e1b      	ldrb	r3, [r3, #24]
1000c8a4:	1c19      	adds	r1, r3, #0
1000c8a6:	2303      	movs	r3, #3
1000c8a8:	400b      	ands	r3, r1
1000c8aa:	b2d9      	uxtb	r1, r3
1000c8ac:	6993      	ldr	r3, [r2, #24]
1000c8ae:	2003      	movs	r0, #3
1000c8b0:	4001      	ands	r1, r0
1000c8b2:	0109      	lsls	r1, r1, #4
1000c8b4:	2030      	movs	r0, #48	; 0x30
1000c8b6:	4383      	bics	r3, r0
1000c8b8:	430b      	orrs	r3, r1
1000c8ba:	6193      	str	r3, [r2, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000c8bc:	687b      	ldr	r3, [r7, #4]
1000c8be:	781b      	ldrb	r3, [r3, #0]
1000c8c0:	2b00      	cmp	r3, #0
1000c8c2:	d054      	beq.n	1000c96e <dualtimer_init+0x102>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000c8c4:	687b      	ldr	r3, [r7, #4]
1000c8c6:	785b      	ldrb	r3, [r3, #1]
1000c8c8:	2b00      	cmp	r3, #0
1000c8ca:	d104      	bne.n	1000c8d6 <dualtimer_init+0x6a>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000c8cc:	230f      	movs	r3, #15
1000c8ce:	18fb      	adds	r3, r7, r3
1000c8d0:	2201      	movs	r2, #1
1000c8d2:	701a      	strb	r2, [r3, #0]
1000c8d4:	e010      	b.n	1000c8f8 <dualtimer_init+0x8c>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000c8d6:	687b      	ldr	r3, [r7, #4]
1000c8d8:	785b      	ldrb	r3, [r3, #1]
1000c8da:	2b01      	cmp	r3, #1
1000c8dc:	d104      	bne.n	1000c8e8 <dualtimer_init+0x7c>
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
1000c8de:	230f      	movs	r3, #15
1000c8e0:	18fb      	adds	r3, r7, r3
1000c8e2:	2200      	movs	r2, #0
1000c8e4:	701a      	strb	r2, [r3, #0]
1000c8e6:	e007      	b.n	1000c8f8 <dualtimer_init+0x8c>
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000c8e8:	687b      	ldr	r3, [r7, #4]
1000c8ea:	785b      	ldrb	r3, [r3, #1]
1000c8ec:	2b02      	cmp	r3, #2
1000c8ee:	d103      	bne.n	1000c8f8 <dualtimer_init+0x8c>
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000c8f0:	230f      	movs	r3, #15
1000c8f2:	18fb      	adds	r3, r7, r3
1000c8f4:	2240      	movs	r2, #64	; 0x40
1000c8f6:	701a      	strb	r2, [r3, #0]
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
1000c8f8:	687b      	ldr	r3, [r7, #4]
1000c8fa:	789b      	ldrb	r3, [r3, #2]
1000c8fc:	18db      	adds	r3, r3, r3
1000c8fe:	b2db      	uxtb	r3, r3
1000c900:	2202      	movs	r2, #2
1000c902:	4013      	ands	r3, r2
1000c904:	b2da      	uxtb	r2, r3
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
1000c906:	687b      	ldr	r3, [r7, #4]
1000c908:	78db      	ldrb	r3, [r3, #3]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
1000c90a:	009b      	lsls	r3, r3, #2
1000c90c:	b2db      	uxtb	r3, r3
1000c90e:	210c      	movs	r1, #12
1000c910:	400b      	ands	r3, r1
1000c912:	b2db      	uxtb	r3, r3
1000c914:	4313      	orrs	r3, r2
1000c916:	b2d9      	uxtb	r1, r3
1000c918:	230f      	movs	r3, #15
1000c91a:	18fb      	adds	r3, r7, r3
1000c91c:	220f      	movs	r2, #15
1000c91e:	18ba      	adds	r2, r7, r2
1000c920:	7812      	ldrb	r2, [r2, #0]
1000c922:	430a      	orrs	r2, r1
1000c924:	701a      	strb	r2, [r3, #0]
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000c926:	687b      	ldr	r3, [r7, #4]
1000c928:	791b      	ldrb	r3, [r3, #4]
1000c92a:	2b00      	cmp	r3, #0
1000c92c:	d007      	beq.n	1000c93e <dualtimer_init+0xd2>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000c92e:	230f      	movs	r3, #15
1000c930:	18fb      	adds	r3, r7, r3
1000c932:	220f      	movs	r2, #15
1000c934:	18ba      	adds	r2, r7, r2
1000c936:	7812      	ldrb	r2, [r2, #0]
1000c938:	2120      	movs	r1, #32
1000c93a:	430a      	orrs	r2, r1
1000c93c:	701a      	strb	r2, [r3, #0]
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000c93e:	4a3f      	ldr	r2, [pc, #252]	; (1000ca3c <dualtimer_init+0x1d0>)
1000c940:	687b      	ldr	r3, [r7, #4]
1000c942:	689b      	ldr	r3, [r3, #8]
1000c944:	6013      	str	r3, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000c946:	4a3d      	ldr	r2, [pc, #244]	; (1000ca3c <dualtimer_init+0x1d0>)
1000c948:	230f      	movs	r3, #15
1000c94a:	18fb      	adds	r3, r7, r3
1000c94c:	781b      	ldrb	r3, [r3, #0]
1000c94e:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
1000c950:	4a39      	ldr	r2, [pc, #228]	; (1000ca38 <dualtimer_init+0x1cc>)
1000c952:	4939      	ldr	r1, [pc, #228]	; (1000ca38 <dualtimer_init+0x1cc>)
1000c954:	23c4      	movs	r3, #196	; 0xc4
1000c956:	005b      	lsls	r3, r3, #1
1000c958:	5ccb      	ldrb	r3, [r1, r3]
1000c95a:	b2db      	uxtb	r3, r3
1000c95c:	2101      	movs	r1, #1
1000c95e:	430b      	orrs	r3, r1
1000c960:	b2d9      	uxtb	r1, r3
1000c962:	23c4      	movs	r3, #196	; 0xc4
1000c964:	005b      	lsls	r3, r3, #1
1000c966:	54d1      	strb	r1, [r2, r3]
		dualtimer_enable(DUALTIMER_TIMER1);
1000c968:	2000      	movs	r0, #0
1000c96a:	4b35      	ldr	r3, [pc, #212]	; (1000ca40 <dualtimer_init+0x1d4>)
1000c96c:	4798      	blx	r3
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000c96e:	687b      	ldr	r3, [r7, #4]
1000c970:	7b1b      	ldrb	r3, [r3, #12]
1000c972:	2b00      	cmp	r3, #0
1000c974:	d055      	beq.n	1000ca22 <dualtimer_init+0x1b6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000c976:	687b      	ldr	r3, [r7, #4]
1000c978:	7b5b      	ldrb	r3, [r3, #13]
1000c97a:	2b00      	cmp	r3, #0
1000c97c:	d104      	bne.n	1000c988 <dualtimer_init+0x11c>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000c97e:	230f      	movs	r3, #15
1000c980:	18fb      	adds	r3, r7, r3
1000c982:	2201      	movs	r2, #1
1000c984:	701a      	strb	r2, [r3, #0]
1000c986:	e010      	b.n	1000c9aa <dualtimer_init+0x13e>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000c988:	687b      	ldr	r3, [r7, #4]
1000c98a:	7b5b      	ldrb	r3, [r3, #13]
1000c98c:	2b01      	cmp	r3, #1
1000c98e:	d104      	bne.n	1000c99a <dualtimer_init+0x12e>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000c990:	230f      	movs	r3, #15
1000c992:	18fb      	adds	r3, r7, r3
1000c994:	2200      	movs	r2, #0
1000c996:	701a      	strb	r2, [r3, #0]
1000c998:	e007      	b.n	1000c9aa <dualtimer_init+0x13e>
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000c99a:	687b      	ldr	r3, [r7, #4]
1000c99c:	7b5b      	ldrb	r3, [r3, #13]
1000c99e:	2b02      	cmp	r3, #2
1000c9a0:	d103      	bne.n	1000c9aa <dualtimer_init+0x13e>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000c9a2:	230f      	movs	r3, #15
1000c9a4:	18fb      	adds	r3, r7, r3
1000c9a6:	2240      	movs	r2, #64	; 0x40
1000c9a8:	701a      	strb	r2, [r3, #0]
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
1000c9aa:	687b      	ldr	r3, [r7, #4]
1000c9ac:	7b9b      	ldrb	r3, [r3, #14]
1000c9ae:	18db      	adds	r3, r3, r3
1000c9b0:	b2db      	uxtb	r3, r3
1000c9b2:	2202      	movs	r2, #2
1000c9b4:	4013      	ands	r3, r2
1000c9b6:	b2da      	uxtb	r2, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
1000c9b8:	687b      	ldr	r3, [r7, #4]
1000c9ba:	7bdb      	ldrb	r3, [r3, #15]
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
1000c9bc:	009b      	lsls	r3, r3, #2
1000c9be:	b2db      	uxtb	r3, r3
1000c9c0:	210c      	movs	r1, #12
1000c9c2:	400b      	ands	r3, r1
1000c9c4:	b2db      	uxtb	r3, r3
1000c9c6:	4313      	orrs	r3, r2
1000c9c8:	b2d9      	uxtb	r1, r3
1000c9ca:	230f      	movs	r3, #15
1000c9cc:	18fb      	adds	r3, r7, r3
1000c9ce:	220f      	movs	r2, #15
1000c9d0:	18ba      	adds	r2, r7, r2
1000c9d2:	7812      	ldrb	r2, [r2, #0]
1000c9d4:	430a      	orrs	r2, r1
1000c9d6:	701a      	strb	r2, [r3, #0]
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000c9d8:	687b      	ldr	r3, [r7, #4]
1000c9da:	7c1b      	ldrb	r3, [r3, #16]
1000c9dc:	2b00      	cmp	r3, #0
1000c9de:	d007      	beq.n	1000c9f0 <dualtimer_init+0x184>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000c9e0:	230f      	movs	r3, #15
1000c9e2:	18fb      	adds	r3, r7, r3
1000c9e4:	220f      	movs	r2, #15
1000c9e6:	18ba      	adds	r2, r7, r2
1000c9e8:	7812      	ldrb	r2, [r2, #0]
1000c9ea:	2120      	movs	r1, #32
1000c9ec:	430a      	orrs	r2, r1
1000c9ee:	701a      	strb	r2, [r3, #0]
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000c9f0:	4a12      	ldr	r2, [pc, #72]	; (1000ca3c <dualtimer_init+0x1d0>)
1000c9f2:	687b      	ldr	r3, [r7, #4]
1000c9f4:	695b      	ldr	r3, [r3, #20]
1000c9f6:	6213      	str	r3, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000c9f8:	4910      	ldr	r1, [pc, #64]	; (1000ca3c <dualtimer_init+0x1d0>)
1000c9fa:	230f      	movs	r3, #15
1000c9fc:	18fb      	adds	r3, r7, r3
1000c9fe:	2228      	movs	r2, #40	; 0x28
1000ca00:	781b      	ldrb	r3, [r3, #0]
1000ca02:	548b      	strb	r3, [r1, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
1000ca04:	4a0c      	ldr	r2, [pc, #48]	; (1000ca38 <dualtimer_init+0x1cc>)
1000ca06:	490c      	ldr	r1, [pc, #48]	; (1000ca38 <dualtimer_init+0x1cc>)
1000ca08:	23c4      	movs	r3, #196	; 0xc4
1000ca0a:	005b      	lsls	r3, r3, #1
1000ca0c:	5ccb      	ldrb	r3, [r1, r3]
1000ca0e:	b2db      	uxtb	r3, r3
1000ca10:	2102      	movs	r1, #2
1000ca12:	430b      	orrs	r3, r1
1000ca14:	b2d9      	uxtb	r1, r3
1000ca16:	23c4      	movs	r3, #196	; 0xc4
1000ca18:	005b      	lsls	r3, r3, #1
1000ca1a:	54d1      	strb	r1, [r2, r3]
		dualtimer_enable(DUALTIMER_TIMER2);
1000ca1c:	2001      	movs	r0, #1
1000ca1e:	4b08      	ldr	r3, [pc, #32]	; (1000ca40 <dualtimer_init+0x1d4>)
1000ca20:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000ca22:	4b08      	ldr	r3, [pc, #32]	; (1000ca44 <dualtimer_init+0x1d8>)
1000ca24:	0019      	movs	r1, r3
1000ca26:	201e      	movs	r0, #30
1000ca28:	4b07      	ldr	r3, [pc, #28]	; (1000ca48 <dualtimer_init+0x1dc>)
1000ca2a:	4798      	blx	r3
}
1000ca2c:	46c0      	nop			; (mov r8, r8)
1000ca2e:	46bd      	mov	sp, r7
1000ca30:	b004      	add	sp, #16
1000ca32:	bd80      	pop	{r7, pc}
1000ca34:	1000f5fd 	.word	0x1000f5fd
1000ca38:	4000b000 	.word	0x4000b000
1000ca3c:	40001000 	.word	0x40001000
1000ca40:	1000c781 	.word	0x1000c781
1000ca44:	1000c815 	.word	0x1000c815
1000ca48:	1000fb9d 	.word	0x1000fb9d

1000ca4c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
1000ca4c:	b580      	push	{r7, lr}
1000ca4e:	b082      	sub	sp, #8
1000ca50:	af00      	add	r7, sp, #0
1000ca52:	0002      	movs	r2, r0
1000ca54:	1dfb      	adds	r3, r7, #7
1000ca56:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000ca58:	4a08      	ldr	r2, [pc, #32]	; (1000ca7c <NVIC_ClearPendingIRQ+0x30>)
1000ca5a:	1dfb      	adds	r3, r7, #7
1000ca5c:	781b      	ldrb	r3, [r3, #0]
1000ca5e:	0019      	movs	r1, r3
1000ca60:	231f      	movs	r3, #31
1000ca62:	400b      	ands	r3, r1
1000ca64:	2101      	movs	r1, #1
1000ca66:	4099      	lsls	r1, r3
1000ca68:	000b      	movs	r3, r1
1000ca6a:	0019      	movs	r1, r3
1000ca6c:	23c0      	movs	r3, #192	; 0xc0
1000ca6e:	005b      	lsls	r3, r3, #1
1000ca70:	50d1      	str	r1, [r2, r3]
}
1000ca72:	46c0      	nop			; (mov r8, r8)
1000ca74:	46bd      	mov	sp, r7
1000ca76:	b002      	add	sp, #8
1000ca78:	bd80      	pop	{r7, pc}
1000ca7a:	46c0      	nop			; (mov r8, r8)
1000ca7c:	e000e100 	.word	0xe000e100

1000ca80 <gpio_get_config_defaults>:
 *   \li Input mode with internal pullup enabled
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
1000ca80:	b580      	push	{r7, lr}
1000ca82:	b082      	sub	sp, #8
1000ca84:	af00      	add	r7, sp, #0
1000ca86:	6078      	str	r0, [r7, #4]
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000ca88:	687b      	ldr	r3, [r7, #4]
1000ca8a:	2200      	movs	r2, #0
1000ca8c:	701a      	strb	r2, [r3, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000ca8e:	687b      	ldr	r3, [r7, #4]
1000ca90:	2201      	movs	r2, #1
1000ca92:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
1000ca94:	687b      	ldr	r3, [r7, #4]
1000ca96:	2200      	movs	r2, #0
1000ca98:	709a      	strb	r2, [r3, #2]
	config->aon_wakeup = false;
1000ca9a:	687b      	ldr	r3, [r7, #4]
1000ca9c:	2200      	movs	r2, #0
1000ca9e:	70da      	strb	r2, [r3, #3]
}
1000caa0:	46c0      	nop			; (mov r8, r8)
1000caa2:	46bd      	mov	sp, r7
1000caa4:	b002      	add	sp, #8
1000caa6:	bd80      	pop	{r7, pc}

1000caa8 <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000caa8:	b580      	push	{r7, lr}
1000caaa:	b084      	sub	sp, #16
1000caac:	af00      	add	r7, sp, #0
1000caae:	0002      	movs	r2, r0
1000cab0:	6039      	str	r1, [r7, #0]
1000cab2:	1dfb      	adds	r3, r7, #7
1000cab4:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
1000cab6:	230f      	movs	r3, #15
1000cab8:	18fb      	adds	r3, r7, r3
1000caba:	2200      	movs	r2, #0
1000cabc:	701a      	strb	r2, [r3, #0]

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000cabe:	1dfb      	adds	r3, r7, #7
1000cac0:	781b      	ldrb	r3, [r3, #0]
1000cac2:	2b00      	cmp	r3, #0
1000cac4:	d007      	beq.n	1000cad6 <gpio_pin_set_config+0x2e>
1000cac6:	1dfb      	adds	r3, r7, #7
1000cac8:	781b      	ldrb	r3, [r3, #0]
1000caca:	2b01      	cmp	r3, #1
1000cacc:	d003      	beq.n	1000cad6 <gpio_pin_set_config+0x2e>
		(gpio_pin == PIN_LP_GPIO_1) || \
1000cace:	1dfb      	adds	r3, r7, #7
1000cad0:	781b      	ldrb	r3, [r3, #0]
1000cad2:	2b0e      	cmp	r3, #14
1000cad4:	d104      	bne.n	1000cae0 <gpio_pin_set_config+0x38>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
1000cad6:	230f      	movs	r3, #15
1000cad8:	18fb      	adds	r3, r7, r3
1000cada:	2217      	movs	r2, #23
1000cadc:	701a      	strb	r2, [r3, #0]
1000cade:	e108      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
	} else {
		if (gpio_pin <= 7) {
1000cae0:	1dfb      	adds	r3, r7, #7
1000cae2:	781b      	ldrb	r3, [r3, #0]
1000cae4:	2b07      	cmp	r3, #7
1000cae6:	d80e      	bhi.n	1000cb06 <gpio_pin_set_config+0x5e>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cae8:	4b85      	ldr	r3, [pc, #532]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000caea:	4a85      	ldr	r2, [pc, #532]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000caec:	6c52      	ldr	r2, [r2, #68]	; 0x44
1000caee:	1df9      	adds	r1, r7, #7
1000caf0:	7809      	ldrb	r1, [r1, #0]
1000caf2:	2007      	movs	r0, #7
1000caf4:	4001      	ands	r1, r0
1000caf6:	0089      	lsls	r1, r1, #2
1000caf8:	2007      	movs	r0, #7
1000cafa:	4088      	lsls	r0, r1
1000cafc:	0001      	movs	r1, r0
1000cafe:	43c9      	mvns	r1, r1
1000cb00:	400a      	ands	r2, r1
1000cb02:	645a      	str	r2, [r3, #68]	; 0x44
1000cb04:	e024      	b.n	1000cb50 <gpio_pin_set_config+0xa8>
		} else if (gpio_pin <= 15) {
1000cb06:	1dfb      	adds	r3, r7, #7
1000cb08:	781b      	ldrb	r3, [r3, #0]
1000cb0a:	2b0f      	cmp	r3, #15
1000cb0c:	d80e      	bhi.n	1000cb2c <gpio_pin_set_config+0x84>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cb0e:	4b7c      	ldr	r3, [pc, #496]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cb10:	4a7b      	ldr	r2, [pc, #492]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cb12:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000cb14:	1df9      	adds	r1, r7, #7
1000cb16:	7809      	ldrb	r1, [r1, #0]
1000cb18:	2007      	movs	r0, #7
1000cb1a:	4001      	ands	r1, r0
1000cb1c:	0089      	lsls	r1, r1, #2
1000cb1e:	2007      	movs	r0, #7
1000cb20:	4088      	lsls	r0, r1
1000cb22:	0001      	movs	r1, r0
1000cb24:	43c9      	mvns	r1, r1
1000cb26:	400a      	ands	r2, r1
1000cb28:	649a      	str	r2, [r3, #72]	; 0x48
1000cb2a:	e011      	b.n	1000cb50 <gpio_pin_set_config+0xa8>
		} else if (gpio_pin <= 23) {
1000cb2c:	1dfb      	adds	r3, r7, #7
1000cb2e:	781b      	ldrb	r3, [r3, #0]
1000cb30:	2b17      	cmp	r3, #23
1000cb32:	d80d      	bhi.n	1000cb50 <gpio_pin_set_config+0xa8>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cb34:	4b72      	ldr	r3, [pc, #456]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cb36:	4a72      	ldr	r2, [pc, #456]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cb38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000cb3a:	1df9      	adds	r1, r7, #7
1000cb3c:	7809      	ldrb	r1, [r1, #0]
1000cb3e:	2007      	movs	r0, #7
1000cb40:	4001      	ands	r1, r0
1000cb42:	0089      	lsls	r1, r1, #2
1000cb44:	2007      	movs	r0, #7
1000cb46:	4088      	lsls	r0, r1
1000cb48:	0001      	movs	r1, r0
1000cb4a:	43c9      	mvns	r1, r1
1000cb4c:	400a      	ands	r2, r1
1000cb4e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000cb50:	1dfb      	adds	r3, r7, #7
1000cb52:	781b      	ldrb	r3, [r3, #0]
1000cb54:	2b1f      	cmp	r3, #31
1000cb56:	d007      	beq.n	1000cb68 <gpio_pin_set_config+0xc0>
1000cb58:	1dfb      	adds	r3, r7, #7
1000cb5a:	781b      	ldrb	r3, [r3, #0]
1000cb5c:	2b1e      	cmp	r3, #30
1000cb5e:	d003      	beq.n	1000cb68 <gpio_pin_set_config+0xc0>
1000cb60:	1dfb      	adds	r3, r7, #7
1000cb62:	781b      	ldrb	r3, [r3, #0]
1000cb64:	2b1d      	cmp	r3, #29
1000cb66:	d145      	bne.n	1000cbf4 <gpio_pin_set_config+0x14c>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000cb68:	683b      	ldr	r3, [r7, #0]
1000cb6a:	785b      	ldrb	r3, [r3, #1]
1000cb6c:	2b01      	cmp	r3, #1
1000cb6e:	d113      	bne.n	1000cb98 <gpio_pin_set_config+0xf0>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cb70:	4964      	ldr	r1, [pc, #400]	; (1000cd04 <gpio_pin_set_config+0x25c>)
1000cb72:	4b64      	ldr	r3, [pc, #400]	; (1000cd04 <gpio_pin_set_config+0x25c>)
1000cb74:	7d1b      	ldrb	r3, [r3, #20]
1000cb76:	b2db      	uxtb	r3, r3
1000cb78:	b25b      	sxtb	r3, r3
1000cb7a:	1dfa      	adds	r2, r7, #7
1000cb7c:	7812      	ldrb	r2, [r2, #0]
1000cb7e:	201f      	movs	r0, #31
1000cb80:	1a82      	subs	r2, r0, r2
1000cb82:	2001      	movs	r0, #1
1000cb84:	4090      	lsls	r0, r2
1000cb86:	0002      	movs	r2, r0
1000cb88:	b252      	sxtb	r2, r2
1000cb8a:	43d2      	mvns	r2, r2
1000cb8c:	b252      	sxtb	r2, r2
1000cb8e:	4013      	ands	r3, r2
1000cb90:	b25b      	sxtb	r3, r3
1000cb92:	b2db      	uxtb	r3, r3
1000cb94:	750b      	strb	r3, [r1, #20]
1000cb96:	e010      	b.n	1000cbba <gpio_pin_set_config+0x112>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000cb98:	495a      	ldr	r1, [pc, #360]	; (1000cd04 <gpio_pin_set_config+0x25c>)
1000cb9a:	4b5a      	ldr	r3, [pc, #360]	; (1000cd04 <gpio_pin_set_config+0x25c>)
1000cb9c:	7d1b      	ldrb	r3, [r3, #20]
1000cb9e:	b2db      	uxtb	r3, r3
1000cba0:	b25a      	sxtb	r2, r3
1000cba2:	1dfb      	adds	r3, r7, #7
1000cba4:	781b      	ldrb	r3, [r3, #0]
1000cba6:	201f      	movs	r0, #31
1000cba8:	1ac3      	subs	r3, r0, r3
1000cbaa:	2001      	movs	r0, #1
1000cbac:	4098      	lsls	r0, r3
1000cbae:	0003      	movs	r3, r0
1000cbb0:	b25b      	sxtb	r3, r3
1000cbb2:	4313      	orrs	r3, r2
1000cbb4:	b25b      	sxtb	r3, r3
1000cbb6:	b2db      	uxtb	r3, r3
1000cbb8:	750b      	strb	r3, [r1, #20]
			}
			if (config->aon_wakeup) {
1000cbba:	683b      	ldr	r3, [r7, #0]
1000cbbc:	78db      	ldrb	r3, [r3, #3]
1000cbbe:	2b00      	cmp	r3, #0
1000cbc0:	d100      	bne.n	1000cbc4 <gpio_pin_set_config+0x11c>
1000cbc2:	e096      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000cbc4:	494f      	ldr	r1, [pc, #316]	; (1000cd04 <gpio_pin_set_config+0x25c>)
1000cbc6:	4b4f      	ldr	r3, [pc, #316]	; (1000cd04 <gpio_pin_set_config+0x25c>)
1000cbc8:	881b      	ldrh	r3, [r3, #0]
1000cbca:	b29b      	uxth	r3, r3
1000cbcc:	b21a      	sxth	r2, r3
1000cbce:	1dfb      	adds	r3, r7, #7
1000cbd0:	781b      	ldrb	r3, [r3, #0]
1000cbd2:	201f      	movs	r0, #31
1000cbd4:	1ac3      	subs	r3, r0, r3
1000cbd6:	009b      	lsls	r3, r3, #2
1000cbd8:	2001      	movs	r0, #1
1000cbda:	4098      	lsls	r0, r3
1000cbdc:	0003      	movs	r3, r0
1000cbde:	b21b      	sxth	r3, r3
1000cbe0:	4313      	orrs	r3, r2
1000cbe2:	b21b      	sxth	r3, r3
1000cbe4:	b29b      	uxth	r3, r3
1000cbe6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000cbe8:	4a47      	ldr	r2, [pc, #284]	; (1000cd08 <gpio_pin_set_config+0x260>)
1000cbea:	7813      	ldrb	r3, [r2, #0]
1000cbec:	2102      	movs	r1, #2
1000cbee:	430b      	orrs	r3, r1
1000cbf0:	7013      	strb	r3, [r2, #0]
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000cbf2:	e07e      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000cbf4:	683b      	ldr	r3, [r7, #0]
1000cbf6:	781b      	ldrb	r3, [r3, #0]
1000cbf8:	2b00      	cmp	r3, #0
1000cbfa:	d151      	bne.n	1000cca0 <gpio_pin_set_config+0x1f8>
				if(gpio_pin < 16) {
1000cbfc:	1dfb      	adds	r3, r7, #7
1000cbfe:	781b      	ldrb	r3, [r3, #0]
1000cc00:	2b0f      	cmp	r3, #15
1000cc02:	d808      	bhi.n	1000cc16 <gpio_pin_set_config+0x16e>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000cc04:	4a41      	ldr	r2, [pc, #260]	; (1000cd0c <gpio_pin_set_config+0x264>)
1000cc06:	1dfb      	adds	r3, r7, #7
1000cc08:	781b      	ldrb	r3, [r3, #0]
1000cc0a:	2101      	movs	r1, #1
1000cc0c:	4099      	lsls	r1, r3
1000cc0e:	000b      	movs	r3, r1
1000cc10:	b29b      	uxth	r3, r3
1000cc12:	8293      	strh	r3, [r2, #20]
1000cc14:	e009      	b.n	1000cc2a <gpio_pin_set_config+0x182>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000cc16:	4a3e      	ldr	r2, [pc, #248]	; (1000cd10 <gpio_pin_set_config+0x268>)
1000cc18:	1dfb      	adds	r3, r7, #7
1000cc1a:	781b      	ldrb	r3, [r3, #0]
1000cc1c:	210f      	movs	r1, #15
1000cc1e:	400b      	ands	r3, r1
1000cc20:	2101      	movs	r1, #1
1000cc22:	4099      	lsls	r1, r3
1000cc24:	000b      	movs	r3, r1
1000cc26:	b29b      	uxth	r3, r3
1000cc28:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
1000cc2a:	683b      	ldr	r3, [r7, #0]
1000cc2c:	785b      	ldrb	r3, [r3, #1]
1000cc2e:	2b01      	cmp	r3, #1
1000cc30:	d00e      	beq.n	1000cc50 <gpio_pin_set_config+0x1a8>
1000cc32:	2b02      	cmp	r3, #2
1000cc34:	d018      	beq.n	1000cc68 <gpio_pin_set_config+0x1c0>
1000cc36:	2b00      	cmp	r3, #0
1000cc38:	d12c      	bne.n	1000cc94 <gpio_pin_set_config+0x1ec>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000cc3a:	4b31      	ldr	r3, [pc, #196]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc3c:	4a30      	ldr	r2, [pc, #192]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
1000cc40:	1df9      	adds	r1, r7, #7
1000cc42:	7809      	ldrb	r1, [r1, #0]
1000cc44:	2001      	movs	r0, #1
1000cc46:	4088      	lsls	r0, r1
1000cc48:	0001      	movs	r1, r0
1000cc4a:	430a      	orrs	r2, r1
1000cc4c:	651a      	str	r2, [r3, #80]	; 0x50
						break;
1000cc4e:	e050      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000cc50:	4b2b      	ldr	r3, [pc, #172]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc52:	4a2b      	ldr	r2, [pc, #172]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc54:	6d12      	ldr	r2, [r2, #80]	; 0x50
1000cc56:	1df9      	adds	r1, r7, #7
1000cc58:	7809      	ldrb	r1, [r1, #0]
1000cc5a:	2001      	movs	r0, #1
1000cc5c:	4088      	lsls	r0, r1
1000cc5e:	0001      	movs	r1, r0
1000cc60:	43c9      	mvns	r1, r1
1000cc62:	400a      	ands	r2, r1
1000cc64:	651a      	str	r2, [r3, #80]	; 0x50
						break;
1000cc66:	e044      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000cc68:	4b25      	ldr	r3, [pc, #148]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc6a:	4a25      	ldr	r2, [pc, #148]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
1000cc6e:	1df9      	adds	r1, r7, #7
1000cc70:	7809      	ldrb	r1, [r1, #0]
1000cc72:	2001      	movs	r0, #1
1000cc74:	4088      	lsls	r0, r1
1000cc76:	0001      	movs	r1, r0
1000cc78:	430a      	orrs	r2, r1
1000cc7a:	655a      	str	r2, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000cc7c:	4b20      	ldr	r3, [pc, #128]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc7e:	4a20      	ldr	r2, [pc, #128]	; (1000cd00 <gpio_pin_set_config+0x258>)
1000cc80:	6d12      	ldr	r2, [r2, #80]	; 0x50
1000cc82:	1df9      	adds	r1, r7, #7
1000cc84:	7809      	ldrb	r1, [r1, #0]
1000cc86:	2001      	movs	r0, #1
1000cc88:	4088      	lsls	r0, r1
1000cc8a:	0001      	movs	r1, r0
1000cc8c:	43c9      	mvns	r1, r1
1000cc8e:	400a      	ands	r2, r1
1000cc90:	651a      	str	r2, [r3, #80]	; 0x50
						break;
1000cc92:	e02e      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
					default:
						status = STATUS_ERR_INVALID_ARG;
1000cc94:	230f      	movs	r3, #15
1000cc96:	18fb      	adds	r3, r7, r3
1000cc98:	2217      	movs	r2, #23
1000cc9a:	701a      	strb	r2, [r3, #0]
						break;
1000cc9c:	46c0      	nop			; (mov r8, r8)
1000cc9e:	e028      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000cca0:	683b      	ldr	r3, [r7, #0]
1000cca2:	781b      	ldrb	r3, [r3, #0]
1000cca4:	2b01      	cmp	r3, #1
1000cca6:	d124      	bne.n	1000ccf2 <gpio_pin_set_config+0x24a>
				if (gpio_pin < 16) {
1000cca8:	1dfb      	adds	r3, r7, #7
1000ccaa:	781b      	ldrb	r3, [r3, #0]
1000ccac:	2b0f      	cmp	r3, #15
1000ccae:	d80f      	bhi.n	1000ccd0 <gpio_pin_set_config+0x228>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
1000ccb0:	4916      	ldr	r1, [pc, #88]	; (1000cd0c <gpio_pin_set_config+0x264>)
1000ccb2:	4b16      	ldr	r3, [pc, #88]	; (1000cd0c <gpio_pin_set_config+0x264>)
1000ccb4:	8a1b      	ldrh	r3, [r3, #16]
1000ccb6:	b29b      	uxth	r3, r3
1000ccb8:	b21a      	sxth	r2, r3
1000ccba:	1dfb      	adds	r3, r7, #7
1000ccbc:	781b      	ldrb	r3, [r3, #0]
1000ccbe:	2001      	movs	r0, #1
1000ccc0:	4098      	lsls	r0, r3
1000ccc2:	0003      	movs	r3, r0
1000ccc4:	b21b      	sxth	r3, r3
1000ccc6:	4313      	orrs	r3, r2
1000ccc8:	b21b      	sxth	r3, r3
1000ccca:	b29b      	uxth	r3, r3
1000cccc:	820b      	strh	r3, [r1, #16]
1000ccce:	e010      	b.n	1000ccf2 <gpio_pin_set_config+0x24a>
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
1000ccd0:	490f      	ldr	r1, [pc, #60]	; (1000cd10 <gpio_pin_set_config+0x268>)
1000ccd2:	4b0f      	ldr	r3, [pc, #60]	; (1000cd10 <gpio_pin_set_config+0x268>)
1000ccd4:	8a1b      	ldrh	r3, [r3, #16]
1000ccd6:	b29b      	uxth	r3, r3
1000ccd8:	b21a      	sxth	r2, r3
1000ccda:	1dfb      	adds	r3, r7, #7
1000ccdc:	781b      	ldrb	r3, [r3, #0]
1000ccde:	200f      	movs	r0, #15
1000cce0:	4003      	ands	r3, r0
1000cce2:	2001      	movs	r0, #1
1000cce4:	4098      	lsls	r0, r3
1000cce6:	0003      	movs	r3, r0
1000cce8:	b21b      	sxth	r3, r3
1000ccea:	4313      	orrs	r3, r2
1000ccec:	b21b      	sxth	r3, r3
1000ccee:	b29b      	uxth	r3, r3
1000ccf0:	820b      	strh	r3, [r1, #16]
				}
			}
		}
	}
	return status;
1000ccf2:	230f      	movs	r3, #15
1000ccf4:	18fb      	adds	r3, r7, r3
1000ccf6:	781b      	ldrb	r3, [r3, #0]
}
1000ccf8:	0018      	movs	r0, r3
1000ccfa:	46bd      	mov	sp, r7
1000ccfc:	b004      	add	sp, #16
1000ccfe:	bd80      	pop	{r7, pc}
1000cd00:	4000b000 	.word	0x4000b000
1000cd04:	4000f000 	.word	0x4000f000
1000cd08:	4000e000 	.word	0x4000e000
1000cd0c:	40010000 	.word	0x40010000
1000cd10:	40011000 	.word	0x40011000

1000cd14 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000cd14:	b580      	push	{r7, lr}
1000cd16:	b082      	sub	sp, #8
1000cd18:	af00      	add	r7, sp, #0
1000cd1a:	0002      	movs	r2, r0
1000cd1c:	1dfb      	adds	r3, r7, #7
1000cd1e:	701a      	strb	r2, [r3, #0]
1000cd20:	1dbb      	adds	r3, r7, #6
1000cd22:	1c0a      	adds	r2, r1, #0
1000cd24:	701a      	strb	r2, [r3, #0]
	if(gpio_pin < 16) {
1000cd26:	1dfb      	adds	r3, r7, #7
1000cd28:	781b      	ldrb	r3, [r3, #0]
1000cd2a:	2b0f      	cmp	r3, #15
1000cd2c:	d825      	bhi.n	1000cd7a <gpio_pin_set_output_level+0x66>
		if(level) {
1000cd2e:	1dbb      	adds	r3, r7, #6
1000cd30:	781b      	ldrb	r3, [r3, #0]
1000cd32:	2b00      	cmp	r3, #0
1000cd34:	d00f      	beq.n	1000cd56 <gpio_pin_set_output_level+0x42>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000cd36:	4927      	ldr	r1, [pc, #156]	; (1000cdd4 <gpio_pin_set_output_level+0xc0>)
1000cd38:	4b26      	ldr	r3, [pc, #152]	; (1000cdd4 <gpio_pin_set_output_level+0xc0>)
1000cd3a:	889b      	ldrh	r3, [r3, #4]
1000cd3c:	b29b      	uxth	r3, r3
1000cd3e:	b21a      	sxth	r2, r3
1000cd40:	1dfb      	adds	r3, r7, #7
1000cd42:	781b      	ldrb	r3, [r3, #0]
1000cd44:	2001      	movs	r0, #1
1000cd46:	4098      	lsls	r0, r3
1000cd48:	0003      	movs	r3, r0
1000cd4a:	b21b      	sxth	r3, r3
1000cd4c:	4313      	orrs	r3, r2
1000cd4e:	b21b      	sxth	r3, r3
1000cd50:	b29b      	uxth	r3, r3
1000cd52:	808b      	strh	r3, [r1, #4]
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
		}
	}
}
1000cd54:	e03a      	b.n	1000cdcc <gpio_pin_set_output_level+0xb8>
{
	if(gpio_pin < 16) {
		if(level) {
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000cd56:	491f      	ldr	r1, [pc, #124]	; (1000cdd4 <gpio_pin_set_output_level+0xc0>)
1000cd58:	4b1e      	ldr	r3, [pc, #120]	; (1000cdd4 <gpio_pin_set_output_level+0xc0>)
1000cd5a:	889b      	ldrh	r3, [r3, #4]
1000cd5c:	b29b      	uxth	r3, r3
1000cd5e:	b21b      	sxth	r3, r3
1000cd60:	1dfa      	adds	r2, r7, #7
1000cd62:	7812      	ldrb	r2, [r2, #0]
1000cd64:	2001      	movs	r0, #1
1000cd66:	4090      	lsls	r0, r2
1000cd68:	0002      	movs	r2, r0
1000cd6a:	b212      	sxth	r2, r2
1000cd6c:	43d2      	mvns	r2, r2
1000cd6e:	b212      	sxth	r2, r2
1000cd70:	4013      	ands	r3, r2
1000cd72:	b21b      	sxth	r3, r3
1000cd74:	b29b      	uxth	r3, r3
1000cd76:	808b      	strh	r3, [r1, #4]
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
		}
	}
}
1000cd78:	e028      	b.n	1000cdcc <gpio_pin_set_output_level+0xb8>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
		}
	} else {
		if(level) {
1000cd7a:	1dbb      	adds	r3, r7, #6
1000cd7c:	781b      	ldrb	r3, [r3, #0]
1000cd7e:	2b00      	cmp	r3, #0
1000cd80:	d011      	beq.n	1000cda6 <gpio_pin_set_output_level+0x92>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000cd82:	4915      	ldr	r1, [pc, #84]	; (1000cdd8 <gpio_pin_set_output_level+0xc4>)
1000cd84:	4b14      	ldr	r3, [pc, #80]	; (1000cdd8 <gpio_pin_set_output_level+0xc4>)
1000cd86:	889b      	ldrh	r3, [r3, #4]
1000cd88:	b29b      	uxth	r3, r3
1000cd8a:	b21a      	sxth	r2, r3
1000cd8c:	1dfb      	adds	r3, r7, #7
1000cd8e:	781b      	ldrb	r3, [r3, #0]
1000cd90:	200f      	movs	r0, #15
1000cd92:	4003      	ands	r3, r0
1000cd94:	2001      	movs	r0, #1
1000cd96:	4098      	lsls	r0, r3
1000cd98:	0003      	movs	r3, r0
1000cd9a:	b21b      	sxth	r3, r3
1000cd9c:	4313      	orrs	r3, r2
1000cd9e:	b21b      	sxth	r3, r3
1000cda0:	b29b      	uxth	r3, r3
1000cda2:	808b      	strh	r3, [r1, #4]
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
		}
	}
}
1000cda4:	e012      	b.n	1000cdcc <gpio_pin_set_output_level+0xb8>
		}
	} else {
		if(level) {
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000cda6:	490c      	ldr	r1, [pc, #48]	; (1000cdd8 <gpio_pin_set_output_level+0xc4>)
1000cda8:	4b0b      	ldr	r3, [pc, #44]	; (1000cdd8 <gpio_pin_set_output_level+0xc4>)
1000cdaa:	889b      	ldrh	r3, [r3, #4]
1000cdac:	b29b      	uxth	r3, r3
1000cdae:	b21b      	sxth	r3, r3
1000cdb0:	1dfa      	adds	r2, r7, #7
1000cdb2:	7812      	ldrb	r2, [r2, #0]
1000cdb4:	200f      	movs	r0, #15
1000cdb6:	4002      	ands	r2, r0
1000cdb8:	2001      	movs	r0, #1
1000cdba:	4090      	lsls	r0, r2
1000cdbc:	0002      	movs	r2, r0
1000cdbe:	b212      	sxth	r2, r2
1000cdc0:	43d2      	mvns	r2, r2
1000cdc2:	b212      	sxth	r2, r2
1000cdc4:	4013      	ands	r3, r2
1000cdc6:	b21b      	sxth	r3, r3
1000cdc8:	b29b      	uxth	r3, r3
1000cdca:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000cdcc:	46c0      	nop			; (mov r8, r8)
1000cdce:	46bd      	mov	sp, r7
1000cdd0:	b002      	add	sp, #8
1000cdd2:	bd80      	pop	{r7, pc}
1000cdd4:	40010000 	.word	0x40010000
1000cdd8:	40011000 	.word	0x40011000

1000cddc <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000cddc:	b590      	push	{r4, r7, lr}
1000cdde:	b085      	sub	sp, #20
1000cde0:	af00      	add	r7, sp, #0
1000cde2:	0002      	movs	r2, r0
1000cde4:	1dfb      	adds	r3, r7, #7
1000cde6:	701a      	strb	r2, [r3, #0]
1000cde8:	1d3b      	adds	r3, r7, #4
1000cdea:	1c0a      	adds	r2, r1, #0
1000cdec:	801a      	strh	r2, [r3, #0]
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000cdee:	1d3b      	adds	r3, r7, #4
1000cdf0:	881b      	ldrh	r3, [r3, #0]
1000cdf2:	0a1b      	lsrs	r3, r3, #8
1000cdf4:	b29a      	uxth	r2, r3
1000cdf6:	230f      	movs	r3, #15
1000cdf8:	18fb      	adds	r3, r7, r3
1000cdfa:	701a      	strb	r2, [r3, #0]

	pinmux_sel &= 0xFF;
1000cdfc:	1d3b      	adds	r3, r7, #4
1000cdfe:	1d3a      	adds	r2, r7, #4
1000ce00:	8812      	ldrh	r2, [r2, #0]
1000ce02:	21ff      	movs	r1, #255	; 0xff
1000ce04:	400a      	ands	r2, r1
1000ce06:	801a      	strh	r2, [r3, #0]

	if (gpio_pin <= 7) {
1000ce08:	1dfb      	adds	r3, r7, #7
1000ce0a:	781b      	ldrb	r3, [r3, #0]
1000ce0c:	2b07      	cmp	r3, #7
1000ce0e:	d875      	bhi.n	1000cefc <gpio_pinmux_cofiguration+0x120>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ce10:	4bb5      	ldr	r3, [pc, #724]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce12:	4ab5      	ldr	r2, [pc, #724]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce14:	6c52      	ldr	r2, [r2, #68]	; 0x44
1000ce16:	1df9      	adds	r1, r7, #7
1000ce18:	7809      	ldrb	r1, [r1, #0]
1000ce1a:	2007      	movs	r0, #7
1000ce1c:	4001      	ands	r1, r0
1000ce1e:	0089      	lsls	r1, r1, #2
1000ce20:	2007      	movs	r0, #7
1000ce22:	4088      	lsls	r0, r1
1000ce24:	0001      	movs	r1, r0
1000ce26:	43c9      	mvns	r1, r1
1000ce28:	400a      	ands	r2, r1
1000ce2a:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ce2c:	4bae      	ldr	r3, [pc, #696]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce2e:	4aae      	ldr	r2, [pc, #696]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce30:	6c52      	ldr	r2, [r2, #68]	; 0x44
1000ce32:	1d39      	adds	r1, r7, #4
1000ce34:	8808      	ldrh	r0, [r1, #0]
1000ce36:	1df9      	adds	r1, r7, #7
1000ce38:	7809      	ldrb	r1, [r1, #0]
1000ce3a:	2407      	movs	r4, #7
1000ce3c:	4021      	ands	r1, r4
1000ce3e:	0089      	lsls	r1, r1, #2
1000ce40:	4088      	lsls	r0, r1
1000ce42:	0001      	movs	r1, r0
1000ce44:	430a      	orrs	r2, r1
1000ce46:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000ce48:	1d3b      	adds	r3, r7, #4
1000ce4a:	881b      	ldrh	r3, [r3, #0]
1000ce4c:	2b01      	cmp	r3, #1
1000ce4e:	d000      	beq.n	1000ce52 <gpio_pinmux_cofiguration+0x76>
1000ce50:	e145      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 3) {
1000ce52:	1dfb      	adds	r3, r7, #7
1000ce54:	781b      	ldrb	r3, [r3, #0]
1000ce56:	2b03      	cmp	r3, #3
1000ce58:	d825      	bhi.n	1000cea6 <gpio_pinmux_cofiguration+0xca>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ce5a:	49a3      	ldr	r1, [pc, #652]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce5c:	4aa2      	ldr	r2, [pc, #648]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce5e:	23d0      	movs	r3, #208	; 0xd0
1000ce60:	005b      	lsls	r3, r3, #1
1000ce62:	58d3      	ldr	r3, [r2, r3]
1000ce64:	1dfa      	adds	r2, r7, #7
1000ce66:	7812      	ldrb	r2, [r2, #0]
1000ce68:	2003      	movs	r0, #3
1000ce6a:	4002      	ands	r2, r0
1000ce6c:	00d2      	lsls	r2, r2, #3
1000ce6e:	203f      	movs	r0, #63	; 0x3f
1000ce70:	4090      	lsls	r0, r2
1000ce72:	0002      	movs	r2, r0
1000ce74:	43d2      	mvns	r2, r2
1000ce76:	401a      	ands	r2, r3
1000ce78:	23d0      	movs	r3, #208	; 0xd0
1000ce7a:	005b      	lsls	r3, r3, #1
1000ce7c:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ce7e:	489a      	ldr	r0, [pc, #616]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce80:	4a99      	ldr	r2, [pc, #612]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ce82:	23d0      	movs	r3, #208	; 0xd0
1000ce84:	005b      	lsls	r3, r3, #1
1000ce86:	58d3      	ldr	r3, [r2, r3]
1000ce88:	220f      	movs	r2, #15
1000ce8a:	18ba      	adds	r2, r7, r2
1000ce8c:	7811      	ldrb	r1, [r2, #0]
1000ce8e:	1dfa      	adds	r2, r7, #7
1000ce90:	7812      	ldrb	r2, [r2, #0]
1000ce92:	2403      	movs	r4, #3
1000ce94:	4022      	ands	r2, r4
1000ce96:	00d2      	lsls	r2, r2, #3
1000ce98:	4091      	lsls	r1, r2
1000ce9a:	000a      	movs	r2, r1
1000ce9c:	431a      	orrs	r2, r3
1000ce9e:	23d0      	movs	r3, #208	; 0xd0
1000cea0:	005b      	lsls	r3, r3, #1
1000cea2:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000cea4:	e11b      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
1000cea6:	1dfb      	adds	r3, r7, #7
1000cea8:	781b      	ldrb	r3, [r3, #0]
1000ceaa:	2b07      	cmp	r3, #7
1000ceac:	d900      	bls.n	1000ceb0 <gpio_pinmux_cofiguration+0xd4>
1000ceae:	e116      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ceb0:	498d      	ldr	r1, [pc, #564]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ceb2:	4a8d      	ldr	r2, [pc, #564]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ceb4:	23d2      	movs	r3, #210	; 0xd2
1000ceb6:	005b      	lsls	r3, r3, #1
1000ceb8:	58d3      	ldr	r3, [r2, r3]
1000ceba:	1dfa      	adds	r2, r7, #7
1000cebc:	7812      	ldrb	r2, [r2, #0]
1000cebe:	2003      	movs	r0, #3
1000cec0:	4002      	ands	r2, r0
1000cec2:	00d2      	lsls	r2, r2, #3
1000cec4:	203f      	movs	r0, #63	; 0x3f
1000cec6:	4090      	lsls	r0, r2
1000cec8:	0002      	movs	r2, r0
1000ceca:	43d2      	mvns	r2, r2
1000cecc:	401a      	ands	r2, r3
1000cece:	23d2      	movs	r3, #210	; 0xd2
1000ced0:	005b      	lsls	r3, r3, #1
1000ced2:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ced4:	4884      	ldr	r0, [pc, #528]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ced6:	4a84      	ldr	r2, [pc, #528]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000ced8:	23d2      	movs	r3, #210	; 0xd2
1000ceda:	005b      	lsls	r3, r3, #1
1000cedc:	58d3      	ldr	r3, [r2, r3]
1000cede:	220f      	movs	r2, #15
1000cee0:	18ba      	adds	r2, r7, r2
1000cee2:	7811      	ldrb	r1, [r2, #0]
1000cee4:	1dfa      	adds	r2, r7, #7
1000cee6:	7812      	ldrb	r2, [r2, #0]
1000cee8:	2403      	movs	r4, #3
1000ceea:	4022      	ands	r2, r4
1000ceec:	00d2      	lsls	r2, r2, #3
1000ceee:	4091      	lsls	r1, r2
1000cef0:	000a      	movs	r2, r1
1000cef2:	431a      	orrs	r2, r3
1000cef4:	23d2      	movs	r3, #210	; 0xd2
1000cef6:	005b      	lsls	r3, r3, #1
1000cef8:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000cefa:	e0f0      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000cefc:	1dfb      	adds	r3, r7, #7
1000cefe:	781b      	ldrb	r3, [r3, #0]
1000cf00:	2b0f      	cmp	r3, #15
1000cf02:	d875      	bhi.n	1000cff0 <gpio_pinmux_cofiguration+0x214>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cf04:	4b78      	ldr	r3, [pc, #480]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf06:	4a78      	ldr	r2, [pc, #480]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf08:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000cf0a:	1df9      	adds	r1, r7, #7
1000cf0c:	7809      	ldrb	r1, [r1, #0]
1000cf0e:	2007      	movs	r0, #7
1000cf10:	4001      	ands	r1, r0
1000cf12:	0089      	lsls	r1, r1, #2
1000cf14:	2007      	movs	r0, #7
1000cf16:	4088      	lsls	r0, r1
1000cf18:	0001      	movs	r1, r0
1000cf1a:	43c9      	mvns	r1, r1
1000cf1c:	400a      	ands	r2, r1
1000cf1e:	649a      	str	r2, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000cf20:	4b71      	ldr	r3, [pc, #452]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf22:	4a71      	ldr	r2, [pc, #452]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf24:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000cf26:	1d39      	adds	r1, r7, #4
1000cf28:	8808      	ldrh	r0, [r1, #0]
1000cf2a:	1df9      	adds	r1, r7, #7
1000cf2c:	7809      	ldrb	r1, [r1, #0]
1000cf2e:	2407      	movs	r4, #7
1000cf30:	4021      	ands	r1, r4
1000cf32:	0089      	lsls	r1, r1, #2
1000cf34:	4088      	lsls	r0, r1
1000cf36:	0001      	movs	r1, r0
1000cf38:	430a      	orrs	r2, r1
1000cf3a:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000cf3c:	1d3b      	adds	r3, r7, #4
1000cf3e:	881b      	ldrh	r3, [r3, #0]
1000cf40:	2b01      	cmp	r3, #1
1000cf42:	d000      	beq.n	1000cf46 <gpio_pinmux_cofiguration+0x16a>
1000cf44:	e0cb      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 11) {
1000cf46:	1dfb      	adds	r3, r7, #7
1000cf48:	781b      	ldrb	r3, [r3, #0]
1000cf4a:	2b0b      	cmp	r3, #11
1000cf4c:	d825      	bhi.n	1000cf9a <gpio_pinmux_cofiguration+0x1be>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cf4e:	4966      	ldr	r1, [pc, #408]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf50:	4a65      	ldr	r2, [pc, #404]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf52:	23d4      	movs	r3, #212	; 0xd4
1000cf54:	005b      	lsls	r3, r3, #1
1000cf56:	58d3      	ldr	r3, [r2, r3]
1000cf58:	1dfa      	adds	r2, r7, #7
1000cf5a:	7812      	ldrb	r2, [r2, #0]
1000cf5c:	2003      	movs	r0, #3
1000cf5e:	4002      	ands	r2, r0
1000cf60:	00d2      	lsls	r2, r2, #3
1000cf62:	203f      	movs	r0, #63	; 0x3f
1000cf64:	4090      	lsls	r0, r2
1000cf66:	0002      	movs	r2, r0
1000cf68:	43d2      	mvns	r2, r2
1000cf6a:	401a      	ands	r2, r3
1000cf6c:	23d4      	movs	r3, #212	; 0xd4
1000cf6e:	005b      	lsls	r3, r3, #1
1000cf70:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000cf72:	485d      	ldr	r0, [pc, #372]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf74:	4a5c      	ldr	r2, [pc, #368]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cf76:	23d4      	movs	r3, #212	; 0xd4
1000cf78:	005b      	lsls	r3, r3, #1
1000cf7a:	58d3      	ldr	r3, [r2, r3]
1000cf7c:	220f      	movs	r2, #15
1000cf7e:	18ba      	adds	r2, r7, r2
1000cf80:	7811      	ldrb	r1, [r2, #0]
1000cf82:	1dfa      	adds	r2, r7, #7
1000cf84:	7812      	ldrb	r2, [r2, #0]
1000cf86:	2403      	movs	r4, #3
1000cf88:	4022      	ands	r2, r4
1000cf8a:	00d2      	lsls	r2, r2, #3
1000cf8c:	4091      	lsls	r1, r2
1000cf8e:	000a      	movs	r2, r1
1000cf90:	431a      	orrs	r2, r3
1000cf92:	23d4      	movs	r3, #212	; 0xd4
1000cf94:	005b      	lsls	r3, r3, #1
1000cf96:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000cf98:	e0a1      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
1000cf9a:	1dfb      	adds	r3, r7, #7
1000cf9c:	781b      	ldrb	r3, [r3, #0]
1000cf9e:	2b0f      	cmp	r3, #15
1000cfa0:	d900      	bls.n	1000cfa4 <gpio_pinmux_cofiguration+0x1c8>
1000cfa2:	e09c      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cfa4:	4950      	ldr	r1, [pc, #320]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cfa6:	4a50      	ldr	r2, [pc, #320]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cfa8:	23d6      	movs	r3, #214	; 0xd6
1000cfaa:	005b      	lsls	r3, r3, #1
1000cfac:	58d3      	ldr	r3, [r2, r3]
1000cfae:	1dfa      	adds	r2, r7, #7
1000cfb0:	7812      	ldrb	r2, [r2, #0]
1000cfb2:	2003      	movs	r0, #3
1000cfb4:	4002      	ands	r2, r0
1000cfb6:	00d2      	lsls	r2, r2, #3
1000cfb8:	203f      	movs	r0, #63	; 0x3f
1000cfba:	4090      	lsls	r0, r2
1000cfbc:	0002      	movs	r2, r0
1000cfbe:	43d2      	mvns	r2, r2
1000cfc0:	401a      	ands	r2, r3
1000cfc2:	23d6      	movs	r3, #214	; 0xd6
1000cfc4:	005b      	lsls	r3, r3, #1
1000cfc6:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000cfc8:	4847      	ldr	r0, [pc, #284]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cfca:	4a47      	ldr	r2, [pc, #284]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cfcc:	23d6      	movs	r3, #214	; 0xd6
1000cfce:	005b      	lsls	r3, r3, #1
1000cfd0:	58d3      	ldr	r3, [r2, r3]
1000cfd2:	220f      	movs	r2, #15
1000cfd4:	18ba      	adds	r2, r7, r2
1000cfd6:	7811      	ldrb	r1, [r2, #0]
1000cfd8:	1dfa      	adds	r2, r7, #7
1000cfda:	7812      	ldrb	r2, [r2, #0]
1000cfdc:	2403      	movs	r4, #3
1000cfde:	4022      	ands	r2, r4
1000cfe0:	00d2      	lsls	r2, r2, #3
1000cfe2:	4091      	lsls	r1, r2
1000cfe4:	000a      	movs	r2, r1
1000cfe6:	431a      	orrs	r2, r3
1000cfe8:	23d6      	movs	r3, #214	; 0xd6
1000cfea:	005b      	lsls	r3, r3, #1
1000cfec:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000cfee:	e076      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000cff0:	1dfb      	adds	r3, r7, #7
1000cff2:	781b      	ldrb	r3, [r3, #0]
1000cff4:	2b17      	cmp	r3, #23
1000cff6:	d872      	bhi.n	1000d0de <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cff8:	4b3b      	ldr	r3, [pc, #236]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cffa:	4a3b      	ldr	r2, [pc, #236]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000cffc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000cffe:	1df9      	adds	r1, r7, #7
1000d000:	7809      	ldrb	r1, [r1, #0]
1000d002:	2007      	movs	r0, #7
1000d004:	4001      	ands	r1, r0
1000d006:	0089      	lsls	r1, r1, #2
1000d008:	2007      	movs	r0, #7
1000d00a:	4088      	lsls	r0, r1
1000d00c:	0001      	movs	r1, r0
1000d00e:	43c9      	mvns	r1, r1
1000d010:	400a      	ands	r2, r1
1000d012:	64da      	str	r2, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d014:	4b34      	ldr	r3, [pc, #208]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d016:	4a34      	ldr	r2, [pc, #208]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d018:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000d01a:	1d39      	adds	r1, r7, #4
1000d01c:	8808      	ldrh	r0, [r1, #0]
1000d01e:	1df9      	adds	r1, r7, #7
1000d020:	7809      	ldrb	r1, [r1, #0]
1000d022:	2407      	movs	r4, #7
1000d024:	4021      	ands	r1, r4
1000d026:	0089      	lsls	r1, r1, #2
1000d028:	4088      	lsls	r0, r1
1000d02a:	0001      	movs	r1, r0
1000d02c:	430a      	orrs	r2, r1
1000d02e:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000d030:	1d3b      	adds	r3, r7, #4
1000d032:	881b      	ldrh	r3, [r3, #0]
1000d034:	2b01      	cmp	r3, #1
1000d036:	d152      	bne.n	1000d0de <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 19) {
1000d038:	1dfb      	adds	r3, r7, #7
1000d03a:	781b      	ldrb	r3, [r3, #0]
1000d03c:	2b13      	cmp	r3, #19
1000d03e:	d825      	bhi.n	1000d08c <gpio_pinmux_cofiguration+0x2b0>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d040:	4929      	ldr	r1, [pc, #164]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d042:	4a29      	ldr	r2, [pc, #164]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d044:	23d8      	movs	r3, #216	; 0xd8
1000d046:	005b      	lsls	r3, r3, #1
1000d048:	58d3      	ldr	r3, [r2, r3]
1000d04a:	1dfa      	adds	r2, r7, #7
1000d04c:	7812      	ldrb	r2, [r2, #0]
1000d04e:	2003      	movs	r0, #3
1000d050:	4002      	ands	r2, r0
1000d052:	00d2      	lsls	r2, r2, #3
1000d054:	203f      	movs	r0, #63	; 0x3f
1000d056:	4090      	lsls	r0, r2
1000d058:	0002      	movs	r2, r0
1000d05a:	43d2      	mvns	r2, r2
1000d05c:	401a      	ands	r2, r3
1000d05e:	23d8      	movs	r3, #216	; 0xd8
1000d060:	005b      	lsls	r3, r3, #1
1000d062:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d064:	4820      	ldr	r0, [pc, #128]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d066:	4a20      	ldr	r2, [pc, #128]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d068:	23d8      	movs	r3, #216	; 0xd8
1000d06a:	005b      	lsls	r3, r3, #1
1000d06c:	58d3      	ldr	r3, [r2, r3]
1000d06e:	220f      	movs	r2, #15
1000d070:	18ba      	adds	r2, r7, r2
1000d072:	7811      	ldrb	r1, [r2, #0]
1000d074:	1dfa      	adds	r2, r7, #7
1000d076:	7812      	ldrb	r2, [r2, #0]
1000d078:	2403      	movs	r4, #3
1000d07a:	4022      	ands	r2, r4
1000d07c:	00d2      	lsls	r2, r2, #3
1000d07e:	4091      	lsls	r1, r2
1000d080:	000a      	movs	r2, r1
1000d082:	431a      	orrs	r2, r3
1000d084:	23d8      	movs	r3, #216	; 0xd8
1000d086:	005b      	lsls	r3, r3, #1
1000d088:	50c2      	str	r2, [r0, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000d08a:	e028      	b.n	1000d0de <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
1000d08c:	1dfb      	adds	r3, r7, #7
1000d08e:	781b      	ldrb	r3, [r3, #0]
1000d090:	2b17      	cmp	r3, #23
1000d092:	d824      	bhi.n	1000d0de <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d094:	4914      	ldr	r1, [pc, #80]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d096:	4a14      	ldr	r2, [pc, #80]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d098:	23da      	movs	r3, #218	; 0xda
1000d09a:	005b      	lsls	r3, r3, #1
1000d09c:	58d3      	ldr	r3, [r2, r3]
1000d09e:	1dfa      	adds	r2, r7, #7
1000d0a0:	7812      	ldrb	r2, [r2, #0]
1000d0a2:	2003      	movs	r0, #3
1000d0a4:	4002      	ands	r2, r0
1000d0a6:	00d2      	lsls	r2, r2, #3
1000d0a8:	203f      	movs	r0, #63	; 0x3f
1000d0aa:	4090      	lsls	r0, r2
1000d0ac:	0002      	movs	r2, r0
1000d0ae:	43d2      	mvns	r2, r2
1000d0b0:	401a      	ands	r2, r3
1000d0b2:	23da      	movs	r3, #218	; 0xda
1000d0b4:	005b      	lsls	r3, r3, #1
1000d0b6:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d0b8:	480b      	ldr	r0, [pc, #44]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d0ba:	4a0b      	ldr	r2, [pc, #44]	; (1000d0e8 <gpio_pinmux_cofiguration+0x30c>)
1000d0bc:	23da      	movs	r3, #218	; 0xda
1000d0be:	005b      	lsls	r3, r3, #1
1000d0c0:	58d3      	ldr	r3, [r2, r3]
1000d0c2:	220f      	movs	r2, #15
1000d0c4:	18ba      	adds	r2, r7, r2
1000d0c6:	7811      	ldrb	r1, [r2, #0]
1000d0c8:	1dfa      	adds	r2, r7, #7
1000d0ca:	7812      	ldrb	r2, [r2, #0]
1000d0cc:	2403      	movs	r4, #3
1000d0ce:	4022      	ands	r2, r4
1000d0d0:	00d2      	lsls	r2, r2, #3
1000d0d2:	4091      	lsls	r1, r2
1000d0d4:	000a      	movs	r2, r1
1000d0d6:	431a      	orrs	r2, r3
1000d0d8:	23da      	movs	r3, #218	; 0xda
1000d0da:	005b      	lsls	r3, r3, #1
1000d0dc:	50c2      	str	r2, [r0, r3]
			}
		}
	}
}
1000d0de:	46c0      	nop			; (mov r8, r8)
1000d0e0:	46bd      	mov	sp, r7
1000d0e2:	b005      	add	sp, #20
1000d0e4:	bd90      	pop	{r4, r7, pc}
1000d0e6:	46c0      	nop			; (mov r8, r8)
1000d0e8:	4000b000 	.word	0x4000b000

1000d0ec <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000d0ec:	b590      	push	{r4, r7, lr}
1000d0ee:	b085      	sub	sp, #20
1000d0f0:	af00      	add	r7, sp, #0
1000d0f2:	6039      	str	r1, [r7, #0]
1000d0f4:	0011      	movs	r1, r2
1000d0f6:	1dfb      	adds	r3, r7, #7
1000d0f8:	1c02      	adds	r2, r0, #0
1000d0fa:	701a      	strb	r2, [r3, #0]
1000d0fc:	1dbb      	adds	r3, r7, #6
1000d0fe:	1c0a      	adds	r2, r1, #0
1000d100:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback_func);
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000d102:	230f      	movs	r3, #15
1000d104:	18fb      	adds	r3, r7, r3
1000d106:	2200      	movs	r2, #0
1000d108:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
1000d10a:	1dfb      	adds	r3, r7, #7
1000d10c:	781b      	ldrb	r3, [r3, #0]
1000d10e:	2b0f      	cmp	r3, #15
1000d110:	d804      	bhi.n	1000d11c <gpio_register_callback+0x30>
		gpio_port = 0;
1000d112:	230f      	movs	r3, #15
1000d114:	18fb      	adds	r3, r7, r3
1000d116:	2200      	movs	r2, #0
1000d118:	701a      	strb	r2, [r3, #0]
1000d11a:	e003      	b.n	1000d124 <gpio_register_callback+0x38>
	} else {
		gpio_port = 1;
1000d11c:	230f      	movs	r3, #15
1000d11e:	18fb      	adds	r3, r7, r3
1000d120:	2201      	movs	r2, #1
1000d122:	701a      	strb	r2, [r3, #0]
	}
	switch (callback_type) {
1000d124:	1dbb      	adds	r3, r7, #6
1000d126:	781b      	ldrb	r3, [r3, #0]
1000d128:	2b04      	cmp	r3, #4
1000d12a:	d900      	bls.n	1000d12e <gpio_register_callback+0x42>
1000d12c:	e111      	b.n	1000d352 <gpio_register_callback+0x266>
1000d12e:	009a      	lsls	r2, r3, #2
1000d130:	4ba6      	ldr	r3, [pc, #664]	; (1000d3cc <gpio_register_callback+0x2e0>)
1000d132:	18d3      	adds	r3, r2, r3
1000d134:	681b      	ldr	r3, [r3, #0]
1000d136:	469f      	mov	pc, r3
		case GPIO_CALLBACK_LOW:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
1000d138:	230f      	movs	r3, #15
1000d13a:	18fb      	adds	r3, r7, r3
1000d13c:	781a      	ldrb	r2, [r3, #0]
1000d13e:	49a4      	ldr	r1, [pc, #656]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d140:	0013      	movs	r3, r2
1000d142:	00db      	lsls	r3, r3, #3
1000d144:	189b      	adds	r3, r3, r2
1000d146:	00db      	lsls	r3, r3, #3
1000d148:	5859      	ldr	r1, [r3, r1]
1000d14a:	230f      	movs	r3, #15
1000d14c:	18fb      	adds	r3, r7, r3
1000d14e:	781a      	ldrb	r2, [r3, #0]
1000d150:	489f      	ldr	r0, [pc, #636]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d152:	0013      	movs	r3, r2
1000d154:	00db      	lsls	r3, r3, #3
1000d156:	189b      	adds	r3, r3, r2
1000d158:	00db      	lsls	r3, r3, #3
1000d15a:	581b      	ldr	r3, [r3, r0]
1000d15c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
1000d15e:	b29b      	uxth	r3, r3
1000d160:	b21a      	sxth	r2, r3
1000d162:	1dfb      	adds	r3, r7, #7
1000d164:	781b      	ldrb	r3, [r3, #0]
1000d166:	200f      	movs	r0, #15
1000d168:	4003      	ands	r3, r0
1000d16a:	2001      	movs	r0, #1
1000d16c:	4098      	lsls	r0, r3
1000d16e:	0003      	movs	r3, r0
1000d170:	b21b      	sxth	r3, r3
1000d172:	4313      	orrs	r3, r2
1000d174:	b21b      	sxth	r3, r3
1000d176:	b29b      	uxth	r3, r3
1000d178:	858b      	strh	r3, [r1, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= 1 << (gpio_pin % 16);
1000d17a:	230f      	movs	r3, #15
1000d17c:	18fb      	adds	r3, r7, r3
1000d17e:	781a      	ldrb	r2, [r3, #0]
1000d180:	4993      	ldr	r1, [pc, #588]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d182:	0013      	movs	r3, r2
1000d184:	00db      	lsls	r3, r3, #3
1000d186:	189b      	adds	r3, r3, r2
1000d188:	00db      	lsls	r3, r3, #3
1000d18a:	5859      	ldr	r1, [r3, r1]
1000d18c:	230f      	movs	r3, #15
1000d18e:	18fb      	adds	r3, r7, r3
1000d190:	781a      	ldrb	r2, [r3, #0]
1000d192:	488f      	ldr	r0, [pc, #572]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d194:	0013      	movs	r3, r2
1000d196:	00db      	lsls	r3, r3, #3
1000d198:	189b      	adds	r3, r3, r2
1000d19a:	00db      	lsls	r3, r3, #3
1000d19c:	581b      	ldr	r3, [r3, r0]
1000d19e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
1000d1a0:	b29b      	uxth	r3, r3
1000d1a2:	b21a      	sxth	r2, r3
1000d1a4:	1dfb      	adds	r3, r7, #7
1000d1a6:	781b      	ldrb	r3, [r3, #0]
1000d1a8:	200f      	movs	r0, #15
1000d1aa:	4003      	ands	r3, r0
1000d1ac:	2001      	movs	r0, #1
1000d1ae:	4098      	lsls	r0, r3
1000d1b0:	0003      	movs	r3, r0
1000d1b2:	b21b      	sxth	r3, r3
1000d1b4:	4313      	orrs	r3, r2
1000d1b6:	b21b      	sxth	r3, r3
1000d1b8:	b29b      	uxth	r3, r3
1000d1ba:	868b      	strh	r3, [r1, #52]	; 0x34
			break;
1000d1bc:	e0c9      	b.n	1000d352 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_HIGH:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
1000d1be:	230f      	movs	r3, #15
1000d1c0:	18fb      	adds	r3, r7, r3
1000d1c2:	781a      	ldrb	r2, [r3, #0]
1000d1c4:	4982      	ldr	r1, [pc, #520]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d1c6:	0013      	movs	r3, r2
1000d1c8:	00db      	lsls	r3, r3, #3
1000d1ca:	189b      	adds	r3, r3, r2
1000d1cc:	00db      	lsls	r3, r3, #3
1000d1ce:	5859      	ldr	r1, [r3, r1]
1000d1d0:	230f      	movs	r3, #15
1000d1d2:	18fb      	adds	r3, r7, r3
1000d1d4:	781a      	ldrb	r2, [r3, #0]
1000d1d6:	487e      	ldr	r0, [pc, #504]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d1d8:	0013      	movs	r3, r2
1000d1da:	00db      	lsls	r3, r3, #3
1000d1dc:	189b      	adds	r3, r3, r2
1000d1de:	00db      	lsls	r3, r3, #3
1000d1e0:	581b      	ldr	r3, [r3, r0]
1000d1e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
1000d1e4:	b29b      	uxth	r3, r3
1000d1e6:	b21a      	sxth	r2, r3
1000d1e8:	1dfb      	adds	r3, r7, #7
1000d1ea:	781b      	ldrb	r3, [r3, #0]
1000d1ec:	200f      	movs	r0, #15
1000d1ee:	4003      	ands	r3, r0
1000d1f0:	2001      	movs	r0, #1
1000d1f2:	4098      	lsls	r0, r3
1000d1f4:	0003      	movs	r3, r0
1000d1f6:	b21b      	sxth	r3, r3
1000d1f8:	4313      	orrs	r3, r2
1000d1fa:	b21b      	sxth	r3, r3
1000d1fc:	b29b      	uxth	r3, r3
1000d1fe:	858b      	strh	r3, [r1, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
1000d200:	230f      	movs	r3, #15
1000d202:	18fb      	adds	r3, r7, r3
1000d204:	781a      	ldrb	r2, [r3, #0]
1000d206:	4972      	ldr	r1, [pc, #456]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d208:	0013      	movs	r3, r2
1000d20a:	00db      	lsls	r3, r3, #3
1000d20c:	189b      	adds	r3, r3, r2
1000d20e:	00db      	lsls	r3, r3, #3
1000d210:	5859      	ldr	r1, [r3, r1]
1000d212:	230f      	movs	r3, #15
1000d214:	18fb      	adds	r3, r7, r3
1000d216:	781a      	ldrb	r2, [r3, #0]
1000d218:	486d      	ldr	r0, [pc, #436]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d21a:	0013      	movs	r3, r2
1000d21c:	00db      	lsls	r3, r3, #3
1000d21e:	189b      	adds	r3, r3, r2
1000d220:	00db      	lsls	r3, r3, #3
1000d222:	581b      	ldr	r3, [r3, r0]
1000d224:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000d226:	b29b      	uxth	r3, r3
1000d228:	b21a      	sxth	r2, r3
1000d22a:	1dfb      	adds	r3, r7, #7
1000d22c:	781b      	ldrb	r3, [r3, #0]
1000d22e:	200f      	movs	r0, #15
1000d230:	4003      	ands	r3, r0
1000d232:	2001      	movs	r0, #1
1000d234:	4098      	lsls	r0, r3
1000d236:	0003      	movs	r3, r0
1000d238:	b21b      	sxth	r3, r3
1000d23a:	4313      	orrs	r3, r2
1000d23c:	b21b      	sxth	r3, r3
1000d23e:	b29b      	uxth	r3, r3
1000d240:	860b      	strh	r3, [r1, #48]	; 0x30
			break;
1000d242:	e086      	b.n	1000d352 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_RISING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
1000d244:	230f      	movs	r3, #15
1000d246:	18fb      	adds	r3, r7, r3
1000d248:	781a      	ldrb	r2, [r3, #0]
1000d24a:	4961      	ldr	r1, [pc, #388]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d24c:	0013      	movs	r3, r2
1000d24e:	00db      	lsls	r3, r3, #3
1000d250:	189b      	adds	r3, r3, r2
1000d252:	00db      	lsls	r3, r3, #3
1000d254:	5859      	ldr	r1, [r3, r1]
1000d256:	230f      	movs	r3, #15
1000d258:	18fb      	adds	r3, r7, r3
1000d25a:	781a      	ldrb	r2, [r3, #0]
1000d25c:	485c      	ldr	r0, [pc, #368]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d25e:	0013      	movs	r3, r2
1000d260:	00db      	lsls	r3, r3, #3
1000d262:	189b      	adds	r3, r3, r2
1000d264:	00db      	lsls	r3, r3, #3
1000d266:	581b      	ldr	r3, [r3, r0]
1000d268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000d26a:	b29b      	uxth	r3, r3
1000d26c:	b21a      	sxth	r2, r3
1000d26e:	1dfb      	adds	r3, r7, #7
1000d270:	781b      	ldrb	r3, [r3, #0]
1000d272:	200f      	movs	r0, #15
1000d274:	4003      	ands	r3, r0
1000d276:	2001      	movs	r0, #1
1000d278:	4098      	lsls	r0, r3
1000d27a:	0003      	movs	r3, r0
1000d27c:	b21b      	sxth	r3, r3
1000d27e:	4313      	orrs	r3, r2
1000d280:	b21b      	sxth	r3, r3
1000d282:	b29b      	uxth	r3, r3
1000d284:	850b      	strh	r3, [r1, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
1000d286:	230f      	movs	r3, #15
1000d288:	18fb      	adds	r3, r7, r3
1000d28a:	781a      	ldrb	r2, [r3, #0]
1000d28c:	4950      	ldr	r1, [pc, #320]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d28e:	0013      	movs	r3, r2
1000d290:	00db      	lsls	r3, r3, #3
1000d292:	189b      	adds	r3, r3, r2
1000d294:	00db      	lsls	r3, r3, #3
1000d296:	5859      	ldr	r1, [r3, r1]
1000d298:	230f      	movs	r3, #15
1000d29a:	18fb      	adds	r3, r7, r3
1000d29c:	781a      	ldrb	r2, [r3, #0]
1000d29e:	484c      	ldr	r0, [pc, #304]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d2a0:	0013      	movs	r3, r2
1000d2a2:	00db      	lsls	r3, r3, #3
1000d2a4:	189b      	adds	r3, r3, r2
1000d2a6:	00db      	lsls	r3, r3, #3
1000d2a8:	581b      	ldr	r3, [r3, r0]
1000d2aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
1000d2ac:	b29b      	uxth	r3, r3
1000d2ae:	b21a      	sxth	r2, r3
1000d2b0:	1dfb      	adds	r3, r7, #7
1000d2b2:	781b      	ldrb	r3, [r3, #0]
1000d2b4:	200f      	movs	r0, #15
1000d2b6:	4003      	ands	r3, r0
1000d2b8:	2001      	movs	r0, #1
1000d2ba:	4098      	lsls	r0, r3
1000d2bc:	0003      	movs	r3, r0
1000d2be:	b21b      	sxth	r3, r3
1000d2c0:	4313      	orrs	r3, r2
1000d2c2:	b21b      	sxth	r3, r3
1000d2c4:	b29b      	uxth	r3, r3
1000d2c6:	860b      	strh	r3, [r1, #48]	; 0x30
			break;
1000d2c8:	e043      	b.n	1000d352 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_FALLING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
1000d2ca:	230f      	movs	r3, #15
1000d2cc:	18fb      	adds	r3, r7, r3
1000d2ce:	781a      	ldrb	r2, [r3, #0]
1000d2d0:	493f      	ldr	r1, [pc, #252]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d2d2:	0013      	movs	r3, r2
1000d2d4:	00db      	lsls	r3, r3, #3
1000d2d6:	189b      	adds	r3, r3, r2
1000d2d8:	00db      	lsls	r3, r3, #3
1000d2da:	5859      	ldr	r1, [r3, r1]
1000d2dc:	230f      	movs	r3, #15
1000d2de:	18fb      	adds	r3, r7, r3
1000d2e0:	781a      	ldrb	r2, [r3, #0]
1000d2e2:	483b      	ldr	r0, [pc, #236]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d2e4:	0013      	movs	r3, r2
1000d2e6:	00db      	lsls	r3, r3, #3
1000d2e8:	189b      	adds	r3, r3, r2
1000d2ea:	00db      	lsls	r3, r3, #3
1000d2ec:	581b      	ldr	r3, [r3, r0]
1000d2ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000d2f0:	b29b      	uxth	r3, r3
1000d2f2:	b21a      	sxth	r2, r3
1000d2f4:	1dfb      	adds	r3, r7, #7
1000d2f6:	781b      	ldrb	r3, [r3, #0]
1000d2f8:	200f      	movs	r0, #15
1000d2fa:	4003      	ands	r3, r0
1000d2fc:	2001      	movs	r0, #1
1000d2fe:	4098      	lsls	r0, r3
1000d300:	0003      	movs	r3, r0
1000d302:	b21b      	sxth	r3, r3
1000d304:	4313      	orrs	r3, r2
1000d306:	b21b      	sxth	r3, r3
1000d308:	b29b      	uxth	r3, r3
1000d30a:	850b      	strh	r3, [r1, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= (1 << (gpio_pin % 16));
1000d30c:	230f      	movs	r3, #15
1000d30e:	18fb      	adds	r3, r7, r3
1000d310:	781a      	ldrb	r2, [r3, #0]
1000d312:	492f      	ldr	r1, [pc, #188]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d314:	0013      	movs	r3, r2
1000d316:	00db      	lsls	r3, r3, #3
1000d318:	189b      	adds	r3, r3, r2
1000d31a:	00db      	lsls	r3, r3, #3
1000d31c:	5859      	ldr	r1, [r3, r1]
1000d31e:	230f      	movs	r3, #15
1000d320:	18fb      	adds	r3, r7, r3
1000d322:	781a      	ldrb	r2, [r3, #0]
1000d324:	482a      	ldr	r0, [pc, #168]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d326:	0013      	movs	r3, r2
1000d328:	00db      	lsls	r3, r3, #3
1000d32a:	189b      	adds	r3, r3, r2
1000d32c:	00db      	lsls	r3, r3, #3
1000d32e:	581b      	ldr	r3, [r3, r0]
1000d330:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
1000d332:	b29b      	uxth	r3, r3
1000d334:	b21a      	sxth	r2, r3
1000d336:	1dfb      	adds	r3, r7, #7
1000d338:	781b      	ldrb	r3, [r3, #0]
1000d33a:	200f      	movs	r0, #15
1000d33c:	4003      	ands	r3, r0
1000d33e:	2001      	movs	r0, #1
1000d340:	4098      	lsls	r0, r3
1000d342:	0003      	movs	r3, r0
1000d344:	b21b      	sxth	r3, r3
1000d346:	4313      	orrs	r3, r2
1000d348:	b21b      	sxth	r3, r3
1000d34a:	b29b      	uxth	r3, r3
1000d34c:	868b      	strh	r3, [r1, #52]	; 0x34
			break;
1000d34e:	e000      	b.n	1000d352 <gpio_register_callback+0x266>

		case GPIO_CALLBACK_N:
			break;
1000d350:	46c0      	nop			; (mov r8, r8)
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d352:	230f      	movs	r3, #15
1000d354:	18fb      	adds	r3, r7, r3
1000d356:	781a      	ldrb	r2, [r3, #0]
1000d358:	1dfb      	adds	r3, r7, #7
1000d35a:	781b      	ldrb	r3, [r3, #0]
1000d35c:	210f      	movs	r1, #15
1000d35e:	400b      	ands	r3, r1
1000d360:	0018      	movs	r0, r3
1000d362:	491b      	ldr	r1, [pc, #108]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d364:	0013      	movs	r3, r2
1000d366:	00db      	lsls	r3, r3, #3
1000d368:	189b      	adds	r3, r3, r2
1000d36a:	005b      	lsls	r3, r3, #1
1000d36c:	181b      	adds	r3, r3, r0
1000d36e:	009b      	lsls	r3, r3, #2
1000d370:	18cb      	adds	r3, r1, r3
1000d372:	3304      	adds	r3, #4
1000d374:	683a      	ldr	r2, [r7, #0]
1000d376:	601a      	str	r2, [r3, #0]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d378:	230f      	movs	r3, #15
1000d37a:	18fb      	adds	r3, r7, r3
1000d37c:	781a      	ldrb	r2, [r3, #0]
1000d37e:	230f      	movs	r3, #15
1000d380:	18fb      	adds	r3, r7, r3
1000d382:	7819      	ldrb	r1, [r3, #0]
1000d384:	4812      	ldr	r0, [pc, #72]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d386:	2444      	movs	r4, #68	; 0x44
1000d388:	000b      	movs	r3, r1
1000d38a:	00db      	lsls	r3, r3, #3
1000d38c:	185b      	adds	r3, r3, r1
1000d38e:	00db      	lsls	r3, r3, #3
1000d390:	18c3      	adds	r3, r0, r3
1000d392:	191b      	adds	r3, r3, r4
1000d394:	881b      	ldrh	r3, [r3, #0]
1000d396:	b219      	sxth	r1, r3
1000d398:	1dfb      	adds	r3, r7, #7
1000d39a:	781b      	ldrb	r3, [r3, #0]
1000d39c:	200f      	movs	r0, #15
1000d39e:	4003      	ands	r3, r0
1000d3a0:	2001      	movs	r0, #1
1000d3a2:	4098      	lsls	r0, r3
1000d3a4:	0003      	movs	r3, r0
1000d3a6:	b21b      	sxth	r3, r3
1000d3a8:	430b      	orrs	r3, r1
1000d3aa:	b21b      	sxth	r3, r3
1000d3ac:	b29c      	uxth	r4, r3
1000d3ae:	4908      	ldr	r1, [pc, #32]	; (1000d3d0 <gpio_register_callback+0x2e4>)
1000d3b0:	2044      	movs	r0, #68	; 0x44
1000d3b2:	0013      	movs	r3, r2
1000d3b4:	00db      	lsls	r3, r3, #3
1000d3b6:	189b      	adds	r3, r3, r2
1000d3b8:	00db      	lsls	r3, r3, #3
1000d3ba:	18cb      	adds	r3, r1, r3
1000d3bc:	181b      	adds	r3, r3, r0
1000d3be:	1c22      	adds	r2, r4, #0
1000d3c0:	801a      	strh	r2, [r3, #0]
}
1000d3c2:	46c0      	nop			; (mov r8, r8)
1000d3c4:	46bd      	mov	sp, r7
1000d3c6:	b005      	add	sp, #20
1000d3c8:	bd90      	pop	{r4, r7, pc}
1000d3ca:	46c0      	nop			; (mov r8, r8)
1000d3cc:	1001ac74 	.word	0x1001ac74
1000d3d0:	1001c2ec 	.word	0x1001c2ec

1000d3d4 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000d3d4:	b590      	push	{r4, r7, lr}
1000d3d6:	b085      	sub	sp, #20
1000d3d8:	af00      	add	r7, sp, #0
1000d3da:	0002      	movs	r2, r0
1000d3dc:	1dfb      	adds	r3, r7, #7
1000d3de:	701a      	strb	r2, [r3, #0]
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000d3e0:	230f      	movs	r3, #15
1000d3e2:	18fb      	adds	r3, r7, r3
1000d3e4:	2200      	movs	r2, #0
1000d3e6:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
1000d3e8:	1dfb      	adds	r3, r7, #7
1000d3ea:	781b      	ldrb	r3, [r3, #0]
1000d3ec:	2b0f      	cmp	r3, #15
1000d3ee:	d804      	bhi.n	1000d3fa <gpio_enable_callback+0x26>
		gpio_port = 0;
1000d3f0:	230f      	movs	r3, #15
1000d3f2:	18fb      	adds	r3, r7, r3
1000d3f4:	2200      	movs	r2, #0
1000d3f6:	701a      	strb	r2, [r3, #0]
1000d3f8:	e003      	b.n	1000d402 <gpio_enable_callback+0x2e>
	} else {
		gpio_port = 1;
1000d3fa:	230f      	movs	r3, #15
1000d3fc:	18fb      	adds	r3, r7, r3
1000d3fe:	2201      	movs	r2, #1
1000d400:	701a      	strb	r2, [r3, #0]
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d402:	230f      	movs	r3, #15
1000d404:	18fb      	adds	r3, r7, r3
1000d406:	781a      	ldrb	r2, [r3, #0]
1000d408:	230f      	movs	r3, #15
1000d40a:	18fb      	adds	r3, r7, r3
1000d40c:	7819      	ldrb	r1, [r3, #0]
1000d40e:	4822      	ldr	r0, [pc, #136]	; (1000d498 <gpio_enable_callback+0xc4>)
1000d410:	2446      	movs	r4, #70	; 0x46
1000d412:	000b      	movs	r3, r1
1000d414:	00db      	lsls	r3, r3, #3
1000d416:	185b      	adds	r3, r3, r1
1000d418:	00db      	lsls	r3, r3, #3
1000d41a:	18c3      	adds	r3, r0, r3
1000d41c:	191b      	adds	r3, r3, r4
1000d41e:	881b      	ldrh	r3, [r3, #0]
1000d420:	b219      	sxth	r1, r3
1000d422:	1dfb      	adds	r3, r7, #7
1000d424:	781b      	ldrb	r3, [r3, #0]
1000d426:	200f      	movs	r0, #15
1000d428:	4003      	ands	r3, r0
1000d42a:	2001      	movs	r0, #1
1000d42c:	4098      	lsls	r0, r3
1000d42e:	0003      	movs	r3, r0
1000d430:	b21b      	sxth	r3, r3
1000d432:	430b      	orrs	r3, r1
1000d434:	b21b      	sxth	r3, r3
1000d436:	b29c      	uxth	r4, r3
1000d438:	4917      	ldr	r1, [pc, #92]	; (1000d498 <gpio_enable_callback+0xc4>)
1000d43a:	2046      	movs	r0, #70	; 0x46
1000d43c:	0013      	movs	r3, r2
1000d43e:	00db      	lsls	r3, r3, #3
1000d440:	189b      	adds	r3, r3, r2
1000d442:	00db      	lsls	r3, r3, #3
1000d444:	18cb      	adds	r3, r1, r3
1000d446:	181b      	adds	r3, r3, r0
1000d448:	1c22      	adds	r2, r4, #0
1000d44a:	801a      	strh	r2, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg |= (1 << (gpio_pin % 16));
1000d44c:	230f      	movs	r3, #15
1000d44e:	18fb      	adds	r3, r7, r3
1000d450:	781a      	ldrb	r2, [r3, #0]
1000d452:	4911      	ldr	r1, [pc, #68]	; (1000d498 <gpio_enable_callback+0xc4>)
1000d454:	0013      	movs	r3, r2
1000d456:	00db      	lsls	r3, r3, #3
1000d458:	189b      	adds	r3, r3, r2
1000d45a:	00db      	lsls	r3, r3, #3
1000d45c:	5859      	ldr	r1, [r3, r1]
1000d45e:	230f      	movs	r3, #15
1000d460:	18fb      	adds	r3, r7, r3
1000d462:	781a      	ldrb	r2, [r3, #0]
1000d464:	480c      	ldr	r0, [pc, #48]	; (1000d498 <gpio_enable_callback+0xc4>)
1000d466:	0013      	movs	r3, r2
1000d468:	00db      	lsls	r3, r3, #3
1000d46a:	189b      	adds	r3, r3, r2
1000d46c:	00db      	lsls	r3, r3, #3
1000d46e:	581b      	ldr	r3, [r3, r0]
1000d470:	8c1b      	ldrh	r3, [r3, #32]
1000d472:	b29b      	uxth	r3, r3
1000d474:	b21a      	sxth	r2, r3
1000d476:	1dfb      	adds	r3, r7, #7
1000d478:	781b      	ldrb	r3, [r3, #0]
1000d47a:	200f      	movs	r0, #15
1000d47c:	4003      	ands	r3, r0
1000d47e:	2001      	movs	r0, #1
1000d480:	4098      	lsls	r0, r3
1000d482:	0003      	movs	r3, r0
1000d484:	b21b      	sxth	r3, r3
1000d486:	4313      	orrs	r3, r2
1000d488:	b21b      	sxth	r3, r3
1000d48a:	b29b      	uxth	r3, r3
1000d48c:	840b      	strh	r3, [r1, #32]
}
1000d48e:	46c0      	nop			; (mov r8, r8)
1000d490:	46bd      	mov	sp, r7
1000d492:	b005      	add	sp, #20
1000d494:	bd90      	pop	{r4, r7, pc}
1000d496:	46c0      	nop			; (mov r8, r8)
1000d498:	1001c2ec 	.word	0x1001c2ec

1000d49c <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000d49c:	b590      	push	{r4, r7, lr}
1000d49e:	b085      	sub	sp, #20
1000d4a0:	af00      	add	r7, sp, #0
1000d4a2:	0002      	movs	r2, r0
1000d4a4:	1dfb      	adds	r3, r7, #7
1000d4a6:	701a      	strb	r2, [r3, #0]
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000d4a8:	230f      	movs	r3, #15
1000d4aa:	18fb      	adds	r3, r7, r3
1000d4ac:	2200      	movs	r2, #0
1000d4ae:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
1000d4b0:	1dfb      	adds	r3, r7, #7
1000d4b2:	781b      	ldrb	r3, [r3, #0]
1000d4b4:	2b0f      	cmp	r3, #15
1000d4b6:	d804      	bhi.n	1000d4c2 <gpio_disable_callback+0x26>
		gpio_port = 0;
1000d4b8:	230f      	movs	r3, #15
1000d4ba:	18fb      	adds	r3, r7, r3
1000d4bc:	2200      	movs	r2, #0
1000d4be:	701a      	strb	r2, [r3, #0]
1000d4c0:	e003      	b.n	1000d4ca <gpio_disable_callback+0x2e>
	} else {
		gpio_port = 1;
1000d4c2:	230f      	movs	r3, #15
1000d4c4:	18fb      	adds	r3, r7, r3
1000d4c6:	2201      	movs	r2, #1
1000d4c8:	701a      	strb	r2, [r3, #0]
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000d4ca:	230f      	movs	r3, #15
1000d4cc:	18fb      	adds	r3, r7, r3
1000d4ce:	781a      	ldrb	r2, [r3, #0]
1000d4d0:	230f      	movs	r3, #15
1000d4d2:	18fb      	adds	r3, r7, r3
1000d4d4:	7819      	ldrb	r1, [r3, #0]
1000d4d6:	4823      	ldr	r0, [pc, #140]	; (1000d564 <gpio_disable_callback+0xc8>)
1000d4d8:	2446      	movs	r4, #70	; 0x46
1000d4da:	000b      	movs	r3, r1
1000d4dc:	00db      	lsls	r3, r3, #3
1000d4de:	185b      	adds	r3, r3, r1
1000d4e0:	00db      	lsls	r3, r3, #3
1000d4e2:	18c3      	adds	r3, r0, r3
1000d4e4:	191b      	adds	r3, r3, r4
1000d4e6:	881b      	ldrh	r3, [r3, #0]
1000d4e8:	b21b      	sxth	r3, r3
1000d4ea:	1df9      	adds	r1, r7, #7
1000d4ec:	7809      	ldrb	r1, [r1, #0]
1000d4ee:	200f      	movs	r0, #15
1000d4f0:	4001      	ands	r1, r0
1000d4f2:	2001      	movs	r0, #1
1000d4f4:	4088      	lsls	r0, r1
1000d4f6:	0001      	movs	r1, r0
1000d4f8:	b209      	sxth	r1, r1
1000d4fa:	43c9      	mvns	r1, r1
1000d4fc:	b209      	sxth	r1, r1
1000d4fe:	400b      	ands	r3, r1
1000d500:	b21b      	sxth	r3, r3
1000d502:	b29c      	uxth	r4, r3
1000d504:	4917      	ldr	r1, [pc, #92]	; (1000d564 <gpio_disable_callback+0xc8>)
1000d506:	2046      	movs	r0, #70	; 0x46
1000d508:	0013      	movs	r3, r2
1000d50a:	00db      	lsls	r3, r3, #3
1000d50c:	189b      	adds	r3, r3, r2
1000d50e:	00db      	lsls	r3, r3, #3
1000d510:	18cb      	adds	r3, r1, r3
1000d512:	181b      	adds	r3, r3, r0
1000d514:	1c22      	adds	r2, r4, #0
1000d516:	801a      	strh	r2, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg |= (1 << (gpio_pin % 16));
1000d518:	230f      	movs	r3, #15
1000d51a:	18fb      	adds	r3, r7, r3
1000d51c:	781a      	ldrb	r2, [r3, #0]
1000d51e:	4911      	ldr	r1, [pc, #68]	; (1000d564 <gpio_disable_callback+0xc8>)
1000d520:	0013      	movs	r3, r2
1000d522:	00db      	lsls	r3, r3, #3
1000d524:	189b      	adds	r3, r3, r2
1000d526:	00db      	lsls	r3, r3, #3
1000d528:	5859      	ldr	r1, [r3, r1]
1000d52a:	230f      	movs	r3, #15
1000d52c:	18fb      	adds	r3, r7, r3
1000d52e:	781a      	ldrb	r2, [r3, #0]
1000d530:	480c      	ldr	r0, [pc, #48]	; (1000d564 <gpio_disable_callback+0xc8>)
1000d532:	0013      	movs	r3, r2
1000d534:	00db      	lsls	r3, r3, #3
1000d536:	189b      	adds	r3, r3, r2
1000d538:	00db      	lsls	r3, r3, #3
1000d53a:	581b      	ldr	r3, [r3, r0]
1000d53c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000d53e:	b29b      	uxth	r3, r3
1000d540:	b21a      	sxth	r2, r3
1000d542:	1dfb      	adds	r3, r7, #7
1000d544:	781b      	ldrb	r3, [r3, #0]
1000d546:	200f      	movs	r0, #15
1000d548:	4003      	ands	r3, r0
1000d54a:	2001      	movs	r0, #1
1000d54c:	4098      	lsls	r0, r3
1000d54e:	0003      	movs	r3, r0
1000d550:	b21b      	sxth	r3, r3
1000d552:	4313      	orrs	r3, r2
1000d554:	b21b      	sxth	r3, r3
1000d556:	b29b      	uxth	r3, r3
1000d558:	848b      	strh	r3, [r1, #36]	; 0x24
}
1000d55a:	46c0      	nop			; (mov r8, r8)
1000d55c:	46bd      	mov	sp, r7
1000d55e:	b005      	add	sp, #20
1000d560:	bd90      	pop	{r4, r7, pc}
1000d562:	46c0      	nop			; (mov r8, r8)
1000d564:	1001c2ec 	.word	0x1001c2ec

1000d568 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000d568:	b580      	push	{r7, lr}
1000d56a:	b082      	sub	sp, #8
1000d56c:	af00      	add	r7, sp, #0
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000d56e:	4b2a      	ldr	r3, [pc, #168]	; (1000d618 <gpio_port0_isr_handler+0xb0>)
1000d570:	681b      	ldr	r3, [r3, #0]
1000d572:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d574:	b29b      	uxth	r3, r3
1000d576:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < 16; i++){
1000d578:	1dfb      	adds	r3, r7, #7
1000d57a:	2200      	movs	r2, #0
1000d57c:	701a      	strb	r2, [r3, #0]
1000d57e:	e03d      	b.n	1000d5fc <gpio_port0_isr_handler+0x94>
		if (flag & (1 << i)) {
1000d580:	1dfb      	adds	r3, r7, #7
1000d582:	781b      	ldrb	r3, [r3, #0]
1000d584:	2201      	movs	r2, #1
1000d586:	409a      	lsls	r2, r3
1000d588:	0013      	movs	r3, r2
1000d58a:	001a      	movs	r2, r3
1000d58c:	683b      	ldr	r3, [r7, #0]
1000d58e:	4013      	ands	r3, r2
1000d590:	d02f      	beq.n	1000d5f2 <gpio_port0_isr_handler+0x8a>
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
1000d592:	4b21      	ldr	r3, [pc, #132]	; (1000d618 <gpio_port0_isr_handler+0xb0>)
1000d594:	681a      	ldr	r2, [r3, #0]
1000d596:	4b20      	ldr	r3, [pc, #128]	; (1000d618 <gpio_port0_isr_handler+0xb0>)
1000d598:	681b      	ldr	r3, [r3, #0]
1000d59a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d59c:	b29b      	uxth	r3, r3
1000d59e:	b219      	sxth	r1, r3
1000d5a0:	1dfb      	adds	r3, r7, #7
1000d5a2:	781b      	ldrb	r3, [r3, #0]
1000d5a4:	2001      	movs	r0, #1
1000d5a6:	4098      	lsls	r0, r3
1000d5a8:	0003      	movs	r3, r0
1000d5aa:	b21b      	sxth	r3, r3
1000d5ac:	430b      	orrs	r3, r1
1000d5ae:	b21b      	sxth	r3, r3
1000d5b0:	b29b      	uxth	r3, r3
1000d5b2:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000d5b4:	4b18      	ldr	r3, [pc, #96]	; (1000d618 <gpio_port0_isr_handler+0xb0>)
1000d5b6:	2246      	movs	r2, #70	; 0x46
1000d5b8:	5a9b      	ldrh	r3, [r3, r2]
1000d5ba:	001a      	movs	r2, r3
1000d5bc:	1dfb      	adds	r3, r7, #7
1000d5be:	781b      	ldrb	r3, [r3, #0]
1000d5c0:	411a      	asrs	r2, r3
1000d5c2:	0013      	movs	r3, r2
1000d5c4:	2201      	movs	r2, #1
1000d5c6:	4013      	ands	r3, r2
1000d5c8:	d01d      	beq.n	1000d606 <gpio_port0_isr_handler+0x9e>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
1000d5ca:	4b13      	ldr	r3, [pc, #76]	; (1000d618 <gpio_port0_isr_handler+0xb0>)
1000d5cc:	2244      	movs	r2, #68	; 0x44
1000d5ce:	5a9b      	ldrh	r3, [r3, r2]

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000d5d0:	001a      	movs	r2, r3
1000d5d2:	1dfb      	adds	r3, r7, #7
1000d5d4:	781b      	ldrb	r3, [r3, #0]
1000d5d6:	411a      	asrs	r2, r3
1000d5d8:	0013      	movs	r3, r2
1000d5da:	2201      	movs	r2, #1
1000d5dc:	4013      	ands	r3, r2
1000d5de:	d012      	beq.n	1000d606 <gpio_port0_isr_handler+0x9e>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
1000d5e0:	1dfb      	adds	r3, r7, #7
1000d5e2:	781b      	ldrb	r3, [r3, #0]
1000d5e4:	4a0c      	ldr	r2, [pc, #48]	; (1000d618 <gpio_port0_isr_handler+0xb0>)
1000d5e6:	009b      	lsls	r3, r3, #2
1000d5e8:	18d3      	adds	r3, r2, r3
1000d5ea:	3304      	adds	r3, #4
1000d5ec:	681b      	ldr	r3, [r3, #0]
1000d5ee:	4798      	blx	r3
			break;
1000d5f0:	e009      	b.n	1000d606 <gpio_port0_isr_handler+0x9e>
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000d5f2:	1dfb      	adds	r3, r7, #7
1000d5f4:	781a      	ldrb	r2, [r3, #0]
1000d5f6:	1dfb      	adds	r3, r7, #7
1000d5f8:	3201      	adds	r2, #1
1000d5fa:	701a      	strb	r2, [r3, #0]
1000d5fc:	1dfb      	adds	r3, r7, #7
1000d5fe:	781b      	ldrb	r3, [r3, #0]
1000d600:	2b0f      	cmp	r3, #15
1000d602:	d9bd      	bls.n	1000d580 <gpio_port0_isr_handler+0x18>
1000d604:	e000      	b.n	1000d608 <gpio_port0_isr_handler+0xa0>
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
			break;
1000d606:	46c0      	nop			; (mov r8, r8)
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
1000d608:	2017      	movs	r0, #23
1000d60a:	4b04      	ldr	r3, [pc, #16]	; (1000d61c <gpio_port0_isr_handler+0xb4>)
1000d60c:	4798      	blx	r3
}
1000d60e:	46c0      	nop			; (mov r8, r8)
1000d610:	46bd      	mov	sp, r7
1000d612:	b002      	add	sp, #8
1000d614:	bd80      	pop	{r7, pc}
1000d616:	46c0      	nop			; (mov r8, r8)
1000d618:	1001c2ec 	.word	0x1001c2ec
1000d61c:	1000ca4d 	.word	0x1000ca4d

1000d620 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000d620:	b580      	push	{r7, lr}
1000d622:	b082      	sub	sp, #8
1000d624:	af00      	add	r7, sp, #0
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000d626:	4b2d      	ldr	r3, [pc, #180]	; (1000d6dc <gpio_port1_isr_handler+0xbc>)
1000d628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000d62a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d62c:	b29b      	uxth	r3, r3
1000d62e:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < 16; i++){
1000d630:	1dfb      	adds	r3, r7, #7
1000d632:	2200      	movs	r2, #0
1000d634:	701a      	strb	r2, [r3, #0]
1000d636:	e046      	b.n	1000d6c6 <gpio_port1_isr_handler+0xa6>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000d638:	683a      	ldr	r2, [r7, #0]
1000d63a:	23e0      	movs	r3, #224	; 0xe0
1000d63c:	021b      	lsls	r3, r3, #8
1000d63e:	4013      	ands	r3, r2
1000d640:	d002      	beq.n	1000d648 <gpio_port1_isr_handler+0x28>
			aon_handle_ext_wakeup_isr();
1000d642:	4b27      	ldr	r3, [pc, #156]	; (1000d6e0 <gpio_port1_isr_handler+0xc0>)
1000d644:	681b      	ldr	r3, [r3, #0]
1000d646:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000d648:	1dfb      	adds	r3, r7, #7
1000d64a:	781b      	ldrb	r3, [r3, #0]
1000d64c:	2201      	movs	r2, #1
1000d64e:	409a      	lsls	r2, r3
1000d650:	0013      	movs	r3, r2
1000d652:	001a      	movs	r2, r3
1000d654:	683b      	ldr	r3, [r7, #0]
1000d656:	4013      	ands	r3, r2
1000d658:	d030      	beq.n	1000d6bc <gpio_port1_isr_handler+0x9c>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
1000d65a:	4b20      	ldr	r3, [pc, #128]	; (1000d6dc <gpio_port1_isr_handler+0xbc>)
1000d65c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1000d65e:	4b1f      	ldr	r3, [pc, #124]	; (1000d6dc <gpio_port1_isr_handler+0xbc>)
1000d660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000d662:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d664:	b29b      	uxth	r3, r3
1000d666:	b219      	sxth	r1, r3
1000d668:	1dfb      	adds	r3, r7, #7
1000d66a:	781b      	ldrb	r3, [r3, #0]
1000d66c:	2001      	movs	r0, #1
1000d66e:	4098      	lsls	r0, r3
1000d670:	0003      	movs	r3, r0
1000d672:	b21b      	sxth	r3, r3
1000d674:	430b      	orrs	r3, r1
1000d676:	b21b      	sxth	r3, r3
1000d678:	b29b      	uxth	r3, r3
1000d67a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d67c:	4b17      	ldr	r3, [pc, #92]	; (1000d6dc <gpio_port1_isr_handler+0xbc>)
1000d67e:	228e      	movs	r2, #142	; 0x8e
1000d680:	5a9b      	ldrh	r3, [r3, r2]
1000d682:	001a      	movs	r2, r3
1000d684:	1dfb      	adds	r3, r7, #7
1000d686:	781b      	ldrb	r3, [r3, #0]
1000d688:	411a      	asrs	r2, r3
1000d68a:	0013      	movs	r3, r2
1000d68c:	2201      	movs	r2, #1
1000d68e:	4013      	ands	r3, r2
1000d690:	d014      	beq.n	1000d6bc <gpio_port1_isr_handler+0x9c>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000d692:	4b12      	ldr	r3, [pc, #72]	; (1000d6dc <gpio_port1_isr_handler+0xbc>)
1000d694:	228c      	movs	r2, #140	; 0x8c
1000d696:	5a9b      	ldrh	r3, [r3, r2]
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d698:	001a      	movs	r2, r3
1000d69a:	1dfb      	adds	r3, r7, #7
1000d69c:	781b      	ldrb	r3, [r3, #0]
1000d69e:	411a      	asrs	r2, r3
1000d6a0:	0013      	movs	r3, r2
1000d6a2:	2201      	movs	r2, #1
1000d6a4:	4013      	ands	r3, r2
1000d6a6:	d009      	beq.n	1000d6bc <gpio_port1_isr_handler+0x9c>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000d6a8:	1dfb      	adds	r3, r7, #7
1000d6aa:	781b      	ldrb	r3, [r3, #0]
1000d6ac:	4a0b      	ldr	r2, [pc, #44]	; (1000d6dc <gpio_port1_isr_handler+0xbc>)
1000d6ae:	3312      	adds	r3, #18
1000d6b0:	009b      	lsls	r3, r3, #2
1000d6b2:	18d3      	adds	r3, r2, r3
1000d6b4:	3304      	adds	r3, #4
1000d6b6:	681b      	ldr	r3, [r3, #0]
1000d6b8:	4798      	blx	r3
				break;
1000d6ba:	e008      	b.n	1000d6ce <gpio_port1_isr_handler+0xae>
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000d6bc:	1dfb      	adds	r3, r7, #7
1000d6be:	781a      	ldrb	r2, [r3, #0]
1000d6c0:	1dfb      	adds	r3, r7, #7
1000d6c2:	3201      	adds	r2, #1
1000d6c4:	701a      	strb	r2, [r3, #0]
1000d6c6:	1dfb      	adds	r3, r7, #7
1000d6c8:	781b      	ldrb	r3, [r3, #0]
1000d6ca:	2b0f      	cmp	r3, #15
1000d6cc:	d9b4      	bls.n	1000d638 <gpio_port1_isr_handler+0x18>
				_gpio_instances[1].callback[i]();
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
1000d6ce:	2018      	movs	r0, #24
1000d6d0:	4b04      	ldr	r3, [pc, #16]	; (1000d6e4 <gpio_port1_isr_handler+0xc4>)
1000d6d2:	4798      	blx	r3
}
1000d6d4:	46c0      	nop			; (mov r8, r8)
1000d6d6:	46bd      	mov	sp, r7
1000d6d8:	b002      	add	sp, #8
1000d6da:	bd80      	pop	{r7, pc}
1000d6dc:	1001c2ec 	.word	0x1001c2ec
1000d6e0:	1001b888 	.word	0x1001b888
1000d6e4:	1000ca4d 	.word	0x1000ca4d

1000d6e8 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000d6e8:	b580      	push	{r7, lr}
1000d6ea:	b082      	sub	sp, #8
1000d6ec:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
1000d6ee:	1dfb      	adds	r3, r7, #7
1000d6f0:	2200      	movs	r2, #0
1000d6f2:	701a      	strb	r2, [r3, #0]
1000d6f4:	e038      	b.n	1000d768 <gpio_init+0x80>
		for(j = 0; j < 16; j++) {
1000d6f6:	1dbb      	adds	r3, r7, #6
1000d6f8:	2200      	movs	r2, #0
1000d6fa:	701a      	strb	r2, [r3, #0]
1000d6fc:	e013      	b.n	1000d726 <gpio_init+0x3e>
			_gpio_instances[i].callback[j] = NULL;
1000d6fe:	1dfb      	adds	r3, r7, #7
1000d700:	781a      	ldrb	r2, [r3, #0]
1000d702:	1dbb      	adds	r3, r7, #6
1000d704:	7818      	ldrb	r0, [r3, #0]
1000d706:	4924      	ldr	r1, [pc, #144]	; (1000d798 <gpio_init+0xb0>)
1000d708:	0013      	movs	r3, r2
1000d70a:	00db      	lsls	r3, r3, #3
1000d70c:	189b      	adds	r3, r3, r2
1000d70e:	005b      	lsls	r3, r3, #1
1000d710:	181b      	adds	r3, r3, r0
1000d712:	009b      	lsls	r3, r3, #2
1000d714:	18cb      	adds	r3, r1, r3
1000d716:	3304      	adds	r3, #4
1000d718:	2200      	movs	r2, #0
1000d71a:	601a      	str	r2, [r3, #0]
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
1000d71c:	1dbb      	adds	r3, r7, #6
1000d71e:	781a      	ldrb	r2, [r3, #0]
1000d720:	1dbb      	adds	r3, r7, #6
1000d722:	3201      	adds	r2, #1
1000d724:	701a      	strb	r2, [r3, #0]
1000d726:	1dbb      	adds	r3, r7, #6
1000d728:	781b      	ldrb	r3, [r3, #0]
1000d72a:	2b0f      	cmp	r3, #15
1000d72c:	d9e7      	bls.n	1000d6fe <gpio_init+0x16>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000d72e:	1dfb      	adds	r3, r7, #7
1000d730:	781a      	ldrb	r2, [r3, #0]
1000d732:	4919      	ldr	r1, [pc, #100]	; (1000d798 <gpio_init+0xb0>)
1000d734:	2046      	movs	r0, #70	; 0x46
1000d736:	0013      	movs	r3, r2
1000d738:	00db      	lsls	r3, r3, #3
1000d73a:	189b      	adds	r3, r3, r2
1000d73c:	00db      	lsls	r3, r3, #3
1000d73e:	18cb      	adds	r3, r1, r3
1000d740:	181b      	adds	r3, r3, r0
1000d742:	2200      	movs	r2, #0
1000d744:	801a      	strh	r2, [r3, #0]
		_gpio_instances[i].callback_reg_mask = 0;
1000d746:	1dfb      	adds	r3, r7, #7
1000d748:	781a      	ldrb	r2, [r3, #0]
1000d74a:	4913      	ldr	r1, [pc, #76]	; (1000d798 <gpio_init+0xb0>)
1000d74c:	2044      	movs	r0, #68	; 0x44
1000d74e:	0013      	movs	r3, r2
1000d750:	00db      	lsls	r3, r3, #3
1000d752:	189b      	adds	r3, r3, r2
1000d754:	00db      	lsls	r3, r3, #3
1000d756:	18cb      	adds	r3, r1, r3
1000d758:	181b      	adds	r3, r3, r0
1000d75a:	2200      	movs	r2, #0
1000d75c:	801a      	strh	r2, [r3, #0]
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
1000d75e:	1dfb      	adds	r3, r7, #7
1000d760:	781a      	ldrb	r2, [r3, #0]
1000d762:	1dfb      	adds	r3, r7, #7
1000d764:	3201      	adds	r2, #1
1000d766:	701a      	strb	r2, [r3, #0]
1000d768:	1dfb      	adds	r3, r7, #7
1000d76a:	781b      	ldrb	r3, [r3, #0]
1000d76c:	2b01      	cmp	r3, #1
1000d76e:	d9c2      	bls.n	1000d6f6 <gpio_init+0xe>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d770:	4b09      	ldr	r3, [pc, #36]	; (1000d798 <gpio_init+0xb0>)
1000d772:	4a0a      	ldr	r2, [pc, #40]	; (1000d79c <gpio_init+0xb4>)
1000d774:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000d776:	4b08      	ldr	r3, [pc, #32]	; (1000d798 <gpio_init+0xb0>)
1000d778:	4a09      	ldr	r2, [pc, #36]	; (1000d7a0 <gpio_init+0xb8>)
1000d77a:	649a      	str	r2, [r3, #72]	; 0x48
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d77c:	4b09      	ldr	r3, [pc, #36]	; (1000d7a4 <gpio_init+0xbc>)
1000d77e:	0019      	movs	r1, r3
1000d780:	2027      	movs	r0, #39	; 0x27
1000d782:	4b09      	ldr	r3, [pc, #36]	; (1000d7a8 <gpio_init+0xc0>)
1000d784:	4798      	blx	r3
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000d786:	4b09      	ldr	r3, [pc, #36]	; (1000d7ac <gpio_init+0xc4>)
1000d788:	0019      	movs	r1, r3
1000d78a:	2028      	movs	r0, #40	; 0x28
1000d78c:	4b06      	ldr	r3, [pc, #24]	; (1000d7a8 <gpio_init+0xc0>)
1000d78e:	4798      	blx	r3
}
1000d790:	46c0      	nop			; (mov r8, r8)
1000d792:	46bd      	mov	sp, r7
1000d794:	b002      	add	sp, #8
1000d796:	bd80      	pop	{r7, pc}
1000d798:	1001c2ec 	.word	0x1001c2ec
1000d79c:	40010000 	.word	0x40010000
1000d7a0:	40011000 	.word	0x40011000
1000d7a4:	1000d569 	.word	0x1000d569
1000d7a8:	1000fb9d 	.word	0x1000fb9d
1000d7ac:	1000d621 	.word	0x1000d621

1000d7b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000d7b0:	b580      	push	{r7, lr}
1000d7b2:	b082      	sub	sp, #8
1000d7b4:	af00      	add	r7, sp, #0
1000d7b6:	0002      	movs	r2, r0
1000d7b8:	1dfb      	adds	r3, r7, #7
1000d7ba:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d7bc:	4b06      	ldr	r3, [pc, #24]	; (1000d7d8 <NVIC_EnableIRQ+0x28>)
1000d7be:	1dfa      	adds	r2, r7, #7
1000d7c0:	7812      	ldrb	r2, [r2, #0]
1000d7c2:	0011      	movs	r1, r2
1000d7c4:	221f      	movs	r2, #31
1000d7c6:	400a      	ands	r2, r1
1000d7c8:	2101      	movs	r1, #1
1000d7ca:	4091      	lsls	r1, r2
1000d7cc:	000a      	movs	r2, r1
1000d7ce:	601a      	str	r2, [r3, #0]
}
1000d7d0:	46c0      	nop			; (mov r8, r8)
1000d7d2:	46bd      	mov	sp, r7
1000d7d4:	b002      	add	sp, #8
1000d7d6:	bd80      	pop	{r7, pc}
1000d7d8:	e000e100 	.word	0xe000e100

1000d7dc <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000d7dc:	b580      	push	{r7, lr}
1000d7de:	b082      	sub	sp, #8
1000d7e0:	af00      	add	r7, sp, #0
1000d7e2:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000d7e4:	46c0      	nop			; (mov r8, r8)
1000d7e6:	687b      	ldr	r3, [r7, #4]
1000d7e8:	2228      	movs	r2, #40	; 0x28
1000d7ea:	5c9b      	ldrb	r3, [r3, r2]
1000d7ec:	07db      	lsls	r3, r3, #31
1000d7ee:	0fdb      	lsrs	r3, r3, #31
1000d7f0:	b2db      	uxtb	r3, r3
1000d7f2:	2b00      	cmp	r3, #0
1000d7f4:	d1f7      	bne.n	1000d7e6 <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000d7f6:	46c0      	nop			; (mov r8, r8)
1000d7f8:	46bd      	mov	sp, r7
1000d7fa:	b002      	add	sp, #8
1000d7fc:	bd80      	pop	{r7, pc}
1000d7fe:	46c0      	nop			; (mov r8, r8)

1000d800 <i2c_disable>:
 *
 * \param[in,out] i2c_module Pointer to the driver instance to disable
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
1000d800:	b580      	push	{r7, lr}
1000d802:	b082      	sub	sp, #8
1000d804:	af00      	add	r7, sp, #0
1000d806:	6078      	str	r0, [r7, #4]
	i2c_wait_for_idle(i2c_module);
1000d808:	687b      	ldr	r3, [r7, #4]
1000d80a:	0018      	movs	r0, r3
1000d80c:	4b04      	ldr	r3, [pc, #16]	; (1000d820 <i2c_disable+0x20>)
1000d80e:	4798      	blx	r3
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000d810:	687b      	ldr	r3, [r7, #4]
1000d812:	2200      	movs	r2, #0
1000d814:	751a      	strb	r2, [r3, #20]
}
1000d816:	46c0      	nop			; (mov r8, r8)
1000d818:	46bd      	mov	sp, r7
1000d81a:	b002      	add	sp, #8
1000d81c:	bd80      	pop	{r7, pc}
1000d81e:	46c0      	nop			; (mov r8, r8)
1000d820:	1000d7dd 	.word	0x1000d7dd

1000d824 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
1000d824:	b580      	push	{r7, lr}
1000d826:	b082      	sub	sp, #8
1000d828:	af00      	add	r7, sp, #0
1000d82a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000d82c:	687b      	ldr	r3, [r7, #4]
1000d82e:	2203      	movs	r2, #3
1000d830:	701a      	strb	r2, [r3, #0]
	config->clock_divider   = 0x10;
1000d832:	687b      	ldr	r3, [r7, #4]
1000d834:	2210      	movs	r2, #16
1000d836:	805a      	strh	r2, [r3, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
1000d838:	687b      	ldr	r3, [r7, #4]
1000d83a:	2208      	movs	r2, #8
1000d83c:	605a      	str	r2, [r3, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
1000d83e:	687b      	ldr	r3, [r7, #4]
1000d840:	2209      	movs	r2, #9
1000d842:	60da      	str	r2, [r3, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
1000d844:	687b      	ldr	r3, [r7, #4]
1000d846:	2202      	movs	r2, #2
1000d848:	609a      	str	r2, [r3, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
1000d84a:	687b      	ldr	r3, [r7, #4]
1000d84c:	2202      	movs	r2, #2
1000d84e:	611a      	str	r2, [r3, #16]
}
1000d850:	46c0      	nop			; (mov r8, r8)
1000d852:	46bd      	mov	sp, r7
1000d854:	b002      	add	sp, #8
1000d856:	bd80      	pop	{r7, pc}

1000d858 <_i2c_master_set_config>:
 *
 */
static void _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
1000d858:	b580      	push	{r7, lr}
1000d85a:	b084      	sub	sp, #16
1000d85c:	af00      	add	r7, sp, #0
1000d85e:	6078      	str	r0, [r7, #4]
1000d860:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000d862:	687b      	ldr	r3, [r7, #4]
1000d864:	681b      	ldr	r3, [r3, #0]
1000d866:	60fb      	str	r3, [r7, #12]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d868:	683b      	ldr	r3, [r7, #0]
1000d86a:	685b      	ldr	r3, [r3, #4]
1000d86c:	b2da      	uxtb	r2, r3
1000d86e:	683b      	ldr	r3, [r7, #0]
1000d870:	689b      	ldr	r3, [r3, #8]
1000d872:	b29b      	uxth	r3, r3
1000d874:	0019      	movs	r1, r3
1000d876:	0010      	movs	r0, r2
1000d878:	4b0d      	ldr	r3, [pc, #52]	; (1000d8b0 <_i2c_master_set_config+0x58>)
1000d87a:	4798      	blx	r3
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000d87c:	683b      	ldr	r3, [r7, #0]
1000d87e:	68db      	ldr	r3, [r3, #12]
1000d880:	b2da      	uxtb	r2, r3
1000d882:	683b      	ldr	r3, [r7, #0]
1000d884:	691b      	ldr	r3, [r3, #16]
1000d886:	b29b      	uxth	r3, r3
1000d888:	0019      	movs	r1, r3
1000d88a:	0010      	movs	r0, r2
1000d88c:	4b08      	ldr	r3, [pc, #32]	; (1000d8b0 <_i2c_master_set_config+0x58>)
1000d88e:	4798      	blx	r3
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d890:	683b      	ldr	r3, [r7, #0]
1000d892:	781a      	ldrb	r2, [r3, #0]
1000d894:	68fb      	ldr	r3, [r7, #12]
1000d896:	741a      	strb	r2, [r3, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000d898:	683b      	ldr	r3, [r7, #0]
1000d89a:	885a      	ldrh	r2, [r3, #2]
1000d89c:	68fb      	ldr	r3, [r7, #12]
1000d89e:	831a      	strh	r2, [r3, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
1000d8a0:	68fb      	ldr	r3, [r7, #12]
1000d8a2:	2201      	movs	r2, #1
1000d8a4:	771a      	strb	r2, [r3, #28]
}
1000d8a6:	46c0      	nop			; (mov r8, r8)
1000d8a8:	46bd      	mov	sp, r7
1000d8aa:	b004      	add	sp, #16
1000d8ac:	bd80      	pop	{r7, pc}
1000d8ae:	46c0      	nop			; (mov r8, r8)
1000d8b0:	1000cddd 	.word	0x1000cddd

1000d8b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
1000d8b4:	b580      	push	{r7, lr}
1000d8b6:	b084      	sub	sp, #16
1000d8b8:	af00      	add	r7, sp, #0
1000d8ba:	60f8      	str	r0, [r7, #12]
1000d8bc:	60b9      	str	r1, [r7, #8]
1000d8be:	607a      	str	r2, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000d8c0:	68fb      	ldr	r3, [r7, #12]
1000d8c2:	68ba      	ldr	r2, [r7, #8]
1000d8c4:	601a      	str	r2, [r3, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000d8c6:	68fb      	ldr	r3, [r7, #12]
1000d8c8:	2b00      	cmp	r3, #0
1000d8ca:	d002      	beq.n	1000d8d2 <i2c_master_init+0x1e>
1000d8cc:	687b      	ldr	r3, [r7, #4]
1000d8ce:	2b00      	cmp	r3, #0
1000d8d0:	d101      	bne.n	1000d8d6 <i2c_master_init+0x22>
		return STATUS_ERR_INVALID_ARG;
1000d8d2:	2317      	movs	r3, #23
1000d8d4:	e05f      	b.n	1000d996 <i2c_master_init+0xe2>

	i2c_disable(module->hw);
1000d8d6:	68fb      	ldr	r3, [r7, #12]
1000d8d8:	681b      	ldr	r3, [r3, #0]
1000d8da:	0018      	movs	r0, r3
1000d8dc:	4b30      	ldr	r3, [pc, #192]	; (1000d9a0 <i2c_master_init+0xec>)
1000d8de:	4798      	blx	r3
	if (module->hw == I2C0) {
1000d8e0:	68fb      	ldr	r3, [r7, #12]
1000d8e2:	681b      	ldr	r3, [r3, #0]
1000d8e4:	4a2f      	ldr	r2, [pc, #188]	; (1000d9a4 <i2c_master_init+0xf0>)
1000d8e6:	4293      	cmp	r3, r2
1000d8e8:	d103      	bne.n	1000d8f2 <i2c_master_init+0x3e>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000d8ea:	2003      	movs	r0, #3
1000d8ec:	4b2e      	ldr	r3, [pc, #184]	; (1000d9a8 <i2c_master_init+0xf4>)
1000d8ee:	4798      	blx	r3
1000d8f0:	e00a      	b.n	1000d908 <i2c_master_init+0x54>
	} else if (module->hw == I2C1) {
1000d8f2:	68fb      	ldr	r3, [r7, #12]
1000d8f4:	681b      	ldr	r3, [r3, #0]
1000d8f6:	4a2d      	ldr	r2, [pc, #180]	; (1000d9ac <i2c_master_init+0xf8>)
1000d8f8:	4293      	cmp	r3, r2
1000d8fa:	d103      	bne.n	1000d904 <i2c_master_init+0x50>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000d8fc:	2019      	movs	r0, #25
1000d8fe:	4b2a      	ldr	r3, [pc, #168]	; (1000d9a8 <i2c_master_init+0xf4>)
1000d900:	4798      	blx	r3
1000d902:	e001      	b.n	1000d908 <i2c_master_init+0x54>
	} else {
		return STATUS_ERR_INVALID_ARG;
1000d904:	2317      	movs	r3, #23
1000d906:	e046      	b.n	1000d996 <i2c_master_init+0xe2>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
1000d908:	68fb      	ldr	r3, [r7, #12]
1000d90a:	2200      	movs	r2, #0
1000d90c:	741a      	strb	r2, [r3, #16]
	module->enabled_callback    = 0;
1000d90e:	68fb      	ldr	r3, [r7, #12]
1000d910:	2200      	movs	r2, #0
1000d912:	745a      	strb	r2, [r3, #17]
	module->buffer_length       = 0;
1000d914:	68fb      	ldr	r3, [r7, #12]
1000d916:	2200      	movs	r2, #0
1000d918:	825a      	strh	r2, [r3, #18]
	module->buffer_remaining    = 0;
1000d91a:	68fb      	ldr	r3, [r7, #12]
1000d91c:	2200      	movs	r2, #0
1000d91e:	829a      	strh	r2, [r3, #20]
	module->status              = STATUS_OK;
1000d920:	68fb      	ldr	r3, [r7, #12]
1000d922:	2200      	movs	r2, #0
1000d924:	775a      	strb	r2, [r3, #29]
	module->buffer              = NULL;
1000d926:	68fb      	ldr	r3, [r7, #12]
1000d928:	2200      	movs	r2, #0
1000d92a:	619a      	str	r2, [r3, #24]

	_i2c_instances = (void*)module;
1000d92c:	4b20      	ldr	r3, [pc, #128]	; (1000d9b0 <i2c_master_init+0xfc>)
1000d92e:	68fa      	ldr	r2, [r7, #12]
1000d930:	601a      	str	r2, [r3, #0]
	if (module->hw == I2C0) {
1000d932:	68fb      	ldr	r3, [r7, #12]
1000d934:	681b      	ldr	r3, [r3, #0]
1000d936:	4a1b      	ldr	r2, [pc, #108]	; (1000d9a4 <i2c_master_init+0xf0>)
1000d938:	4293      	cmp	r3, r2
1000d93a:	d110      	bne.n	1000d95e <i2c_master_init+0xaa>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
1000d93c:	4b1d      	ldr	r3, [pc, #116]	; (1000d9b4 <i2c_master_init+0x100>)
1000d93e:	0019      	movs	r1, r3
1000d940:	2018      	movs	r0, #24
1000d942:	4b1d      	ldr	r3, [pc, #116]	; (1000d9b8 <i2c_master_init+0x104>)
1000d944:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
1000d946:	4b1b      	ldr	r3, [pc, #108]	; (1000d9b4 <i2c_master_init+0x100>)
1000d948:	0019      	movs	r1, r3
1000d94a:	2019      	movs	r0, #25
1000d94c:	4b1a      	ldr	r3, [pc, #104]	; (1000d9b8 <i2c_master_init+0x104>)
1000d94e:	4798      	blx	r3
		NVIC_EnableIRQ(I2C0_RX_IRQn);
1000d950:	2008      	movs	r0, #8
1000d952:	4b1a      	ldr	r3, [pc, #104]	; (1000d9bc <i2c_master_init+0x108>)
1000d954:	4798      	blx	r3
		NVIC_EnableIRQ(I2C0_TX_IRQn);
1000d956:	2009      	movs	r0, #9
1000d958:	4b18      	ldr	r3, [pc, #96]	; (1000d9bc <i2c_master_init+0x108>)
1000d95a:	4798      	blx	r3
1000d95c:	e014      	b.n	1000d988 <i2c_master_init+0xd4>
	} else if (module->hw == I2C1) {
1000d95e:	68fb      	ldr	r3, [r7, #12]
1000d960:	681b      	ldr	r3, [r3, #0]
1000d962:	4a12      	ldr	r2, [pc, #72]	; (1000d9ac <i2c_master_init+0xf8>)
1000d964:	4293      	cmp	r3, r2
1000d966:	d10f      	bne.n	1000d988 <i2c_master_init+0xd4>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000d968:	4b12      	ldr	r3, [pc, #72]	; (1000d9b4 <i2c_master_init+0x100>)
1000d96a:	0019      	movs	r1, r3
1000d96c:	201a      	movs	r0, #26
1000d96e:	4b12      	ldr	r3, [pc, #72]	; (1000d9b8 <i2c_master_init+0x104>)
1000d970:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000d972:	4b10      	ldr	r3, [pc, #64]	; (1000d9b4 <i2c_master_init+0x100>)
1000d974:	0019      	movs	r1, r3
1000d976:	201b      	movs	r0, #27
1000d978:	4b0f      	ldr	r3, [pc, #60]	; (1000d9b8 <i2c_master_init+0x104>)
1000d97a:	4798      	blx	r3
		NVIC_EnableIRQ(I2C1_RX_IRQn);
1000d97c:	200a      	movs	r0, #10
1000d97e:	4b0f      	ldr	r3, [pc, #60]	; (1000d9bc <i2c_master_init+0x108>)
1000d980:	4798      	blx	r3
		NVIC_EnableIRQ(I2C1_TX_IRQn);
1000d982:	200b      	movs	r0, #11
1000d984:	4b0d      	ldr	r3, [pc, #52]	; (1000d9bc <i2c_master_init+0x108>)
1000d986:	4798      	blx	r3
	}
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);
1000d988:	687a      	ldr	r2, [r7, #4]
1000d98a:	68fb      	ldr	r3, [r7, #12]
1000d98c:	0011      	movs	r1, r2
1000d98e:	0018      	movs	r0, r3
1000d990:	4b0b      	ldr	r3, [pc, #44]	; (1000d9c0 <i2c_master_init+0x10c>)
1000d992:	4798      	blx	r3

	return STATUS_OK;
1000d994:	2300      	movs	r3, #0
}
1000d996:	0018      	movs	r0, r3
1000d998:	46bd      	mov	sp, r7
1000d99a:	b004      	add	sp, #16
1000d99c:	bd80      	pop	{r7, pc}
1000d99e:	46c0      	nop			; (mov r8, r8)
1000d9a0:	1000d801 	.word	0x1000d801
1000d9a4:	40003000 	.word	0x40003000
1000d9a8:	1000f5fd 	.word	0x1000f5fd
1000d9ac:	40003400 	.word	0x40003400
1000d9b0:	1001c37c 	.word	0x1001c37c
1000d9b4:	1000dcc9 	.word	0x1000dcc9
1000d9b8:	1000fb9d 	.word	0x1000fb9d
1000d9bc:	1000d7b1 	.word	0x1000d7b1
1000d9c0:	1000d859 	.word	0x1000d859

1000d9c4 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
1000d9c4:	b580      	push	{r7, lr}
1000d9c6:	b084      	sub	sp, #16
1000d9c8:	af00      	add	r7, sp, #0
1000d9ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	
	I2C *const i2c_module = (module->hw);
1000d9cc:	687b      	ldr	r3, [r7, #4]
1000d9ce:	681b      	ldr	r3, [r3, #0]
1000d9d0:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	i2c_wait_for_idle(i2c_module);
1000d9d2:	68fb      	ldr	r3, [r7, #12]
1000d9d4:	0018      	movs	r0, r3
1000d9d6:	4b05      	ldr	r3, [pc, #20]	; (1000d9ec <i2c_master_send_stop+0x28>)
1000d9d8:	4798      	blx	r3

	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000d9da:	68fb      	ldr	r3, [r7, #12]
1000d9dc:	2220      	movs	r2, #32
1000d9de:	2100      	movs	r1, #0
1000d9e0:	5499      	strb	r1, [r3, r2]
}
1000d9e2:	46c0      	nop			; (mov r8, r8)
1000d9e4:	46bd      	mov	sp, r7
1000d9e6:	b004      	add	sp, #16
1000d9e8:	bd80      	pop	{r7, pc}
1000d9ea:	46c0      	nop			; (mov r8, r8)
1000d9ec:	1000d7dd 	.word	0x1000d7dd

1000d9f0 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
1000d9f0:	b580      	push	{r7, lr}
1000d9f2:	b082      	sub	sp, #8
1000d9f4:	af00      	add	r7, sp, #0
1000d9f6:	0002      	movs	r2, r0
1000d9f8:	1dfb      	adds	r3, r7, #7
1000d9fa:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d9fc:	4a08      	ldr	r2, [pc, #32]	; (1000da20 <NVIC_ClearPendingIRQ+0x30>)
1000d9fe:	1dfb      	adds	r3, r7, #7
1000da00:	781b      	ldrb	r3, [r3, #0]
1000da02:	0019      	movs	r1, r3
1000da04:	231f      	movs	r3, #31
1000da06:	400b      	ands	r3, r1
1000da08:	2101      	movs	r1, #1
1000da0a:	4099      	lsls	r1, r3
1000da0c:	000b      	movs	r3, r1
1000da0e:	0019      	movs	r1, r3
1000da10:	23c0      	movs	r3, #192	; 0xc0
1000da12:	005b      	lsls	r3, r3, #1
1000da14:	50d1      	str	r1, [r2, r3]
}
1000da16:	46c0      	nop			; (mov r8, r8)
1000da18:	46bd      	mov	sp, r7
1000da1a:	b002      	add	sp, #8
1000da1c:	bd80      	pop	{r7, pc}
1000da1e:	46c0      	nop			; (mov r8, r8)
1000da20:	e000e100 	.word	0xe000e100

1000da24 <i2c_wait_for_idle>:
 * Wait for hardware module to sync
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
1000da24:	b580      	push	{r7, lr}
1000da26:	b082      	sub	sp, #8
1000da28:	af00      	add	r7, sp, #0
1000da2a:	6078      	str	r0, [r7, #4]
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000da2c:	46c0      	nop			; (mov r8, r8)
1000da2e:	687b      	ldr	r3, [r7, #4]
1000da30:	2228      	movs	r2, #40	; 0x28
1000da32:	5c9b      	ldrb	r3, [r3, r2]
1000da34:	07db      	lsls	r3, r3, #31
1000da36:	0fdb      	lsrs	r3, r3, #31
1000da38:	b2db      	uxtb	r3, r3
1000da3a:	2b00      	cmp	r3, #0
1000da3c:	d1f7      	bne.n	1000da2e <i2c_wait_for_idle+0xa>
		/* Wait for I2C module to sync. */
	}
}
1000da3e:	46c0      	nop			; (mov r8, r8)
1000da40:	46bd      	mov	sp, r7
1000da42:	b002      	add	sp, #8
1000da44:	bd80      	pop	{r7, pc}
1000da46:	46c0      	nop			; (mov r8, r8)

1000da48 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
1000da48:	b580      	push	{r7, lr}
1000da4a:	b084      	sub	sp, #16
1000da4c:	af00      	add	r7, sp, #0
1000da4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	I2C *const i2c_module = module->hw;
1000da50:	687b      	ldr	r3, [r7, #4]
1000da52:	681b      	ldr	r3, [r3, #0]
1000da54:	60fb      	str	r3, [r7, #12]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000da56:	687b      	ldr	r3, [r7, #4]
1000da58:	8a5b      	ldrh	r3, [r3, #18]
1000da5a:	b299      	uxth	r1, r3
1000da5c:	687b      	ldr	r3, [r7, #4]
1000da5e:	8a9b      	ldrh	r3, [r3, #20]
1000da60:	b29a      	uxth	r2, r3
1000da62:	230a      	movs	r3, #10
1000da64:	18fb      	adds	r3, r7, r3
1000da66:	1a8a      	subs	r2, r1, r2
1000da68:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
1000da6a:	687b      	ldr	r3, [r7, #4]
1000da6c:	8a9b      	ldrh	r3, [r3, #20]
1000da6e:	b29b      	uxth	r3, r3
1000da70:	3b01      	subs	r3, #1
1000da72:	b29a      	uxth	r2, r3
1000da74:	687b      	ldr	r3, [r7, #4]
1000da76:	829a      	strh	r2, [r3, #20]

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
1000da78:	687b      	ldr	r3, [r7, #4]
1000da7a:	699a      	ldr	r2, [r3, #24]
1000da7c:	230a      	movs	r3, #10
1000da7e:	18fb      	adds	r3, r7, r3
1000da80:	881b      	ldrh	r3, [r3, #0]
1000da82:	18d3      	adds	r3, r2, r3
1000da84:	68fa      	ldr	r2, [r7, #12]
1000da86:	7912      	ldrb	r2, [r2, #4]
1000da88:	b2d2      	uxtb	r2, r2
1000da8a:	701a      	strb	r2, [r3, #0]
}
1000da8c:	46c0      	nop			; (mov r8, r8)
1000da8e:	46bd      	mov	sp, r7
1000da90:	b004      	add	sp, #16
1000da92:	bd80      	pop	{r7, pc}

1000da94 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
1000da94:	b580      	push	{r7, lr}
1000da96:	b084      	sub	sp, #16
1000da98:	af00      	add	r7, sp, #0
1000da9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	I2C *const i2c_module = module->hw;
1000da9c:	687b      	ldr	r3, [r7, #4]
1000da9e:	681b      	ldr	r3, [r3, #0]
1000daa0:	60fb      	str	r3, [r7, #12]

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000daa2:	687b      	ldr	r3, [r7, #4]
1000daa4:	8a5b      	ldrh	r3, [r3, #18]
1000daa6:	b29a      	uxth	r2, r3
1000daa8:	687b      	ldr	r3, [r7, #4]
1000daaa:	8a9b      	ldrh	r3, [r3, #20]
1000daac:	b29b      	uxth	r3, r3
1000daae:	1ad3      	subs	r3, r2, r3
1000dab0:	b29a      	uxth	r2, r3
1000dab2:	230a      	movs	r3, #10
1000dab4:	18fb      	adds	r3, r7, r3
1000dab6:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
1000dab8:	687b      	ldr	r3, [r7, #4]
1000daba:	8a9b      	ldrh	r3, [r3, #20]
1000dabc:	b29b      	uxth	r3, r3
1000dabe:	3b01      	subs	r3, #1
1000dac0:	b29a      	uxth	r2, r3
1000dac2:	687b      	ldr	r3, [r7, #4]
1000dac4:	829a      	strh	r2, [r3, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
1000dac6:	687b      	ldr	r3, [r7, #4]
1000dac8:	699b      	ldr	r3, [r3, #24]
1000daca:	220a      	movs	r2, #10
1000dacc:	18ba      	adds	r2, r7, r2
1000dace:	8812      	ldrh	r2, [r2, #0]
1000dad0:	b292      	uxth	r2, r2
1000dad2:	189b      	adds	r3, r3, r2
1000dad4:	781b      	ldrb	r3, [r3, #0]
1000dad6:	b2db      	uxtb	r3, r3
1000dad8:	b29a      	uxth	r2, r3
1000dada:	68fb      	ldr	r3, [r7, #12]
1000dadc:	801a      	strh	r2, [r3, #0]
	
	if (module->buffer_remaining <= 0) {
1000dade:	687b      	ldr	r3, [r7, #4]
1000dae0:	8a9b      	ldrh	r3, [r3, #20]
1000dae2:	b29b      	uxth	r3, r3
1000dae4:	2b00      	cmp	r3, #0
1000dae6:	d103      	bne.n	1000daf0 <_i2c_master_write+0x5c>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
1000dae8:	68fb      	ldr	r3, [r7, #12]
1000daea:	222c      	movs	r2, #44	; 0x2c
1000daec:	2110      	movs	r1, #16
1000daee:	5499      	strb	r1, [r3, r2]
	}
}
1000daf0:	46c0      	nop			; (mov r8, r8)
1000daf2:	46bd      	mov	sp, r7
1000daf4:	b004      	add	sp, #16
1000daf6:	bd80      	pop	{r7, pc}

1000daf8 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
1000daf8:	b580      	push	{r7, lr}
1000dafa:	b084      	sub	sp, #16
1000dafc:	af00      	add	r7, sp, #0
1000dafe:	60f8      	str	r0, [r7, #12]
1000db00:	60b9      	str	r1, [r7, #8]
1000db02:	1dfb      	adds	r3, r7, #7
1000db04:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
1000db06:	1dfb      	adds	r3, r7, #7
1000db08:	781a      	ldrb	r2, [r3, #0]
1000db0a:	68fb      	ldr	r3, [r7, #12]
1000db0c:	3202      	adds	r2, #2
1000db0e:	0092      	lsls	r2, r2, #2
1000db10:	68b9      	ldr	r1, [r7, #8]
1000db12:	50d1      	str	r1, [r2, r3]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
1000db14:	68fb      	ldr	r3, [r7, #12]
1000db16:	7c1b      	ldrb	r3, [r3, #16]
1000db18:	b2db      	uxtb	r3, r3
1000db1a:	b25a      	sxtb	r2, r3
1000db1c:	1dfb      	adds	r3, r7, #7
1000db1e:	781b      	ldrb	r3, [r3, #0]
1000db20:	2101      	movs	r1, #1
1000db22:	4099      	lsls	r1, r3
1000db24:	000b      	movs	r3, r1
1000db26:	b25b      	sxtb	r3, r3
1000db28:	4313      	orrs	r3, r2
1000db2a:	b25b      	sxtb	r3, r3
1000db2c:	b2da      	uxtb	r2, r3
1000db2e:	68fb      	ldr	r3, [r7, #12]
1000db30:	741a      	strb	r2, [r3, #16]
}
1000db32:	46c0      	nop			; (mov r8, r8)
1000db34:	46bd      	mov	sp, r7
1000db36:	b004      	add	sp, #16
1000db38:	bd80      	pop	{r7, pc}
1000db3a:	46c0      	nop			; (mov r8, r8)

1000db3c <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000db3c:	b580      	push	{r7, lr}
1000db3e:	b084      	sub	sp, #16
1000db40:	af00      	add	r7, sp, #0
1000db42:	6078      	str	r0, [r7, #4]
1000db44:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	I2C *const i2c_module = module->hw;
1000db46:	687b      	ldr	r3, [r7, #4]
1000db48:	681b      	ldr	r3, [r3, #0]
1000db4a:	60fb      	str	r3, [r7, #12]

	/* Save packet to software module */
	module->buffer             = packet->data;
1000db4c:	683b      	ldr	r3, [r7, #0]
1000db4e:	685a      	ldr	r2, [r3, #4]
1000db50:	687b      	ldr	r3, [r7, #4]
1000db52:	619a      	str	r2, [r3, #24]
	module->buffer_remaining   = packet->data_length;
1000db54:	683b      	ldr	r3, [r7, #0]
1000db56:	885a      	ldrh	r2, [r3, #2]
1000db58:	687b      	ldr	r3, [r7, #4]
1000db5a:	829a      	strh	r2, [r3, #20]
	module->transfer_direction = I2C_TRANSFER_READ;
1000db5c:	687b      	ldr	r3, [r7, #4]
1000db5e:	2201      	movs	r2, #1
1000db60:	771a      	strb	r2, [r3, #28]
	module->status             = STATUS_BUSY;
1000db62:	687b      	ldr	r3, [r7, #4]
1000db64:	2205      	movs	r2, #5
1000db66:	775a      	strb	r2, [r3, #29]
	
	i2c_wait_for_idle(i2c_module);
1000db68:	68fb      	ldr	r3, [r7, #12]
1000db6a:	0018      	movs	r0, r3
1000db6c:	4b11      	ldr	r3, [pc, #68]	; (1000dbb4 <_i2c_master_read_packet+0x78>)
1000db6e:	4798      	blx	r3
	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000db70:	68fb      	ldr	r3, [r7, #12]
1000db72:	2234      	movs	r2, #52	; 0x34
1000db74:	2101      	movs	r1, #1
1000db76:	5499      	strb	r1, [r3, r2]
	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000db78:	68fb      	ldr	r3, [r7, #12]
1000db7a:	2220      	movs	r2, #32
1000db7c:	2101      	movs	r1, #1
1000db7e:	5499      	strb	r1, [r3, r2]
	/* Set address and direction bit. Will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | module->transfer_direction;
1000db80:	683b      	ldr	r3, [r7, #0]
1000db82:	881b      	ldrh	r3, [r3, #0]
	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit. Will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000db84:	18db      	adds	r3, r3, r3
1000db86:	b29a      	uxth	r2, r3
			(packet->address << 1) | module->transfer_direction;
1000db88:	687b      	ldr	r3, [r7, #4]
1000db8a:	7f1b      	ldrb	r3, [r3, #28]
1000db8c:	b2db      	uxtb	r3, r3
	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit. Will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000db8e:	b29b      	uxth	r3, r3
1000db90:	4313      	orrs	r3, r2
1000db92:	b29b      	uxth	r3, r3
1000db94:	2280      	movs	r2, #128	; 0x80
1000db96:	0052      	lsls	r2, r2, #1
1000db98:	4313      	orrs	r3, r2
1000db9a:	b29a      	uxth	r2, r3
1000db9c:	68fb      	ldr	r3, [r7, #12]
1000db9e:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | module->transfer_direction;
	/* Enable interrupts */
	i2c_module->RX_INTERRUPT_MASK.reg = I2C_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000dba0:	68fb      	ldr	r3, [r7, #12]
1000dba2:	2230      	movs	r2, #48	; 0x30
1000dba4:	2101      	movs	r1, #1
1000dba6:	5499      	strb	r1, [r3, r2]
	
	return STATUS_OK;
1000dba8:	2300      	movs	r3, #0
}
1000dbaa:	0018      	movs	r0, r3
1000dbac:	46bd      	mov	sp, r7
1000dbae:	b004      	add	sp, #16
1000dbb0:	bd80      	pop	{r7, pc}
1000dbb2:	46c0      	nop			; (mov r8, r8)
1000dbb4:	1000da25 	.word	0x1000da25

1000dbb8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000dbb8:	b580      	push	{r7, lr}
1000dbba:	b082      	sub	sp, #8
1000dbbc:	af00      	add	r7, sp, #0
1000dbbe:	6078      	str	r0, [r7, #4]
1000dbc0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
1000dbc2:	687b      	ldr	r3, [r7, #4]
1000dbc4:	8a9b      	ldrh	r3, [r3, #20]
1000dbc6:	b29b      	uxth	r3, r3
1000dbc8:	2b00      	cmp	r3, #0
1000dbca:	d001      	beq.n	1000dbd0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
1000dbcc:	2305      	movs	r3, #5
1000dbce:	e009      	b.n	1000dbe4 <i2c_master_read_packet_job+0x2c>
	}

	/* Make sure we send STOP */
	module->no_stop = false;
1000dbd0:	687b      	ldr	r3, [r7, #4]
1000dbd2:	2200      	movs	r2, #0
1000dbd4:	715a      	strb	r2, [r3, #5]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
1000dbd6:	683a      	ldr	r2, [r7, #0]
1000dbd8:	687b      	ldr	r3, [r7, #4]
1000dbda:	0011      	movs	r1, r2
1000dbdc:	0018      	movs	r0, r3
1000dbde:	4b03      	ldr	r3, [pc, #12]	; (1000dbec <i2c_master_read_packet_job+0x34>)
1000dbe0:	4798      	blx	r3
1000dbe2:	0003      	movs	r3, r0
}
1000dbe4:	0018      	movs	r0, r3
1000dbe6:	46bd      	mov	sp, r7
1000dbe8:	b002      	add	sp, #8
1000dbea:	bd80      	pop	{r7, pc}
1000dbec:	1000db3d 	.word	0x1000db3d

1000dbf0 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000dbf0:	b580      	push	{r7, lr}
1000dbf2:	b084      	sub	sp, #16
1000dbf4:	af00      	add	r7, sp, #0
1000dbf6:	6078      	str	r0, [r7, #4]
1000dbf8:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	I2C *const i2c_module = module->hw;
1000dbfa:	687b      	ldr	r3, [r7, #4]
1000dbfc:	681b      	ldr	r3, [r3, #0]
1000dbfe:	60fb      	str	r3, [r7, #12]

	/* Save packet to software module */
	module->buffer             = packet->data;
1000dc00:	683b      	ldr	r3, [r7, #0]
1000dc02:	685a      	ldr	r2, [r3, #4]
1000dc04:	687b      	ldr	r3, [r7, #4]
1000dc06:	619a      	str	r2, [r3, #24]
	module->buffer_remaining   = packet->data_length;
1000dc08:	683b      	ldr	r3, [r7, #0]
1000dc0a:	885a      	ldrh	r2, [r3, #2]
1000dc0c:	687b      	ldr	r3, [r7, #4]
1000dc0e:	829a      	strh	r2, [r3, #20]
	module->transfer_direction = I2C_TRANSFER_WRITE;
1000dc10:	687b      	ldr	r3, [r7, #4]
1000dc12:	2200      	movs	r2, #0
1000dc14:	771a      	strb	r2, [r3, #28]
	module->status             = STATUS_BUSY;
1000dc16:	687b      	ldr	r3, [r7, #4]
1000dc18:	2205      	movs	r2, #5
1000dc1a:	775a      	strb	r2, [r3, #29]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000dc1c:	68fb      	ldr	r3, [r7, #12]
1000dc1e:	2220      	movs	r2, #32
1000dc20:	2101      	movs	r1, #1
1000dc22:	5499      	strb	r1, [r3, r2]
	/* Set address and direction bit, will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | module->transfer_direction;
1000dc24:	683b      	ldr	r3, [r7, #0]
1000dc26:	881b      	ldrh	r3, [r3, #0]
	module->status             = STATUS_BUSY;

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit, will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000dc28:	18db      	adds	r3, r3, r3
1000dc2a:	b29a      	uxth	r2, r3
			(packet->address << 1) | module->transfer_direction;
1000dc2c:	687b      	ldr	r3, [r7, #4]
1000dc2e:	7f1b      	ldrb	r3, [r3, #28]
1000dc30:	b2db      	uxtb	r3, r3
	module->status             = STATUS_BUSY;

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Set address and direction bit, will send start command on bus */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000dc32:	b29b      	uxth	r3, r3
1000dc34:	4313      	orrs	r3, r2
1000dc36:	b29b      	uxth	r3, r3
1000dc38:	2280      	movs	r2, #128	; 0x80
1000dc3a:	0052      	lsls	r2, r2, #1
1000dc3c:	4313      	orrs	r3, r2
1000dc3e:	b29a      	uxth	r2, r3
1000dc40:	68fb      	ldr	r3, [r7, #12]
1000dc42:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | module->transfer_direction;
	/* Enable interrupts */
	i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
1000dc44:	68fb      	ldr	r3, [r7, #12]
1000dc46:	222c      	movs	r2, #44	; 0x2c
1000dc48:	2110      	movs	r1, #16
1000dc4a:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
1000dc4c:	2300      	movs	r3, #0
}
1000dc4e:	0018      	movs	r0, r3
1000dc50:	46bd      	mov	sp, r7
1000dc52:	b004      	add	sp, #16
1000dc54:	bd80      	pop	{r7, pc}
1000dc56:	46c0      	nop			; (mov r8, r8)

1000dc58 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000dc58:	b580      	push	{r7, lr}
1000dc5a:	b082      	sub	sp, #8
1000dc5c:	af00      	add	r7, sp, #0
1000dc5e:	6078      	str	r0, [r7, #4]
1000dc60:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
1000dc62:	687b      	ldr	r3, [r7, #4]
1000dc64:	8a9b      	ldrh	r3, [r3, #20]
1000dc66:	b29b      	uxth	r3, r3
1000dc68:	2b00      	cmp	r3, #0
1000dc6a:	d001      	beq.n	1000dc70 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
1000dc6c:	2305      	movs	r3, #5
1000dc6e:	e009      	b.n	1000dc84 <i2c_master_write_packet_job+0x2c>
	}

	/* Make sure we send STOP at end*/
	module->no_stop = false;
1000dc70:	687b      	ldr	r3, [r7, #4]
1000dc72:	2200      	movs	r2, #0
1000dc74:	715a      	strb	r2, [r3, #5]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
1000dc76:	683a      	ldr	r2, [r7, #0]
1000dc78:	687b      	ldr	r3, [r7, #4]
1000dc7a:	0011      	movs	r1, r2
1000dc7c:	0018      	movs	r0, r3
1000dc7e:	4b03      	ldr	r3, [pc, #12]	; (1000dc8c <i2c_master_write_packet_job+0x34>)
1000dc80:	4798      	blx	r3
1000dc82:	0003      	movs	r3, r0
}
1000dc84:	0018      	movs	r0, r3
1000dc86:	46bd      	mov	sp, r7
1000dc88:	b002      	add	sp, #8
1000dc8a:	bd80      	pop	{r7, pc}
1000dc8c:	1000dbf1 	.word	0x1000dbf1

1000dc90 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000dc90:	b580      	push	{r7, lr}
1000dc92:	b082      	sub	sp, #8
1000dc94:	af00      	add	r7, sp, #0
1000dc96:	6078      	str	r0, [r7, #4]
1000dc98:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
1000dc9a:	687b      	ldr	r3, [r7, #4]
1000dc9c:	8a9b      	ldrh	r3, [r3, #20]
1000dc9e:	b29b      	uxth	r3, r3
1000dca0:	2b00      	cmp	r3, #0
1000dca2:	d001      	beq.n	1000dca8 <i2c_master_write_packet_job_no_stop+0x18>
		return STATUS_BUSY;
1000dca4:	2305      	movs	r3, #5
1000dca6:	e009      	b.n	1000dcbc <i2c_master_write_packet_job_no_stop+0x2c>
	}

	/* Do not send stop condition when done */
	module->no_stop = true;
1000dca8:	687b      	ldr	r3, [r7, #4]
1000dcaa:	2201      	movs	r2, #1
1000dcac:	715a      	strb	r2, [r3, #5]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
1000dcae:	683a      	ldr	r2, [r7, #0]
1000dcb0:	687b      	ldr	r3, [r7, #4]
1000dcb2:	0011      	movs	r1, r2
1000dcb4:	0018      	movs	r0, r3
1000dcb6:	4b03      	ldr	r3, [pc, #12]	; (1000dcc4 <i2c_master_write_packet_job_no_stop+0x34>)
1000dcb8:	4798      	blx	r3
1000dcba:	0003      	movs	r3, r0
}
1000dcbc:	0018      	movs	r0, r3
1000dcbe:	46bd      	mov	sp, r7
1000dcc0:	b002      	add	sp, #8
1000dcc2:	bd80      	pop	{r7, pc}
1000dcc4:	1000dbf1 	.word	0x1000dbf1

1000dcc8 <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
1000dcc8:	b580      	push	{r7, lr}
1000dcca:	b084      	sub	sp, #16
1000dccc:	af00      	add	r7, sp, #0
	/* Get software module for callback handling */
	struct i2c_master_module *module =
1000dcce:	4b67      	ldr	r3, [pc, #412]	; (1000de6c <_i2c_master_isr_handler+0x1a4>)
1000dcd0:	681b      	ldr	r3, [r3, #0]
1000dcd2:	60fb      	str	r3, [r7, #12]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
1000dcd4:	68fb      	ldr	r3, [r7, #12]
1000dcd6:	681b      	ldr	r3, [r3, #0]
1000dcd8:	60bb      	str	r3, [r7, #8]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000dcda:	68fb      	ldr	r3, [r7, #12]
1000dcdc:	7c5b      	ldrb	r3, [r3, #17]
1000dcde:	b2da      	uxtb	r2, r3
			module->registered_callback;
1000dce0:	68fb      	ldr	r3, [r7, #12]
1000dce2:	7c1b      	ldrb	r3, [r3, #16]
1000dce4:	b2d9      	uxtb	r1, r3
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000dce6:	1dfb      	adds	r3, r7, #7
1000dce8:	400a      	ands	r2, r1
1000dcea:	701a      	strb	r2, [r3, #0]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
1000dcec:	68fb      	ldr	r3, [r7, #12]
1000dcee:	8a5b      	ldrh	r3, [r3, #18]
1000dcf0:	b29b      	uxth	r3, r3
1000dcf2:	2b00      	cmp	r3, #0
1000dcf4:	d10a      	bne.n	1000dd0c <_i2c_master_isr_handler+0x44>
1000dcf6:	68fb      	ldr	r3, [r7, #12]
1000dcf8:	8a9b      	ldrh	r3, [r3, #20]
1000dcfa:	b29b      	uxth	r3, r3
1000dcfc:	2b00      	cmp	r3, #0
1000dcfe:	d005      	beq.n	1000dd0c <_i2c_master_isr_handler+0x44>
		module->buffer_length = module->buffer_remaining;
1000dd00:	68fb      	ldr	r3, [r7, #12]
1000dd02:	8a9b      	ldrh	r3, [r3, #20]
1000dd04:	b29a      	uxth	r2, r3
1000dd06:	68fb      	ldr	r3, [r7, #12]
1000dd08:	825a      	strh	r2, [r3, #18]
1000dd0a:	e04b      	b.n	1000dda4 <_i2c_master_isr_handler+0xdc>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000dd0c:	68fb      	ldr	r3, [r7, #12]
1000dd0e:	8a5b      	ldrh	r3, [r3, #18]
1000dd10:	b29b      	uxth	r3, r3
1000dd12:	2b00      	cmp	r3, #0
1000dd14:	d02e      	beq.n	1000dd74 <_i2c_master_isr_handler+0xac>
1000dd16:	68fb      	ldr	r3, [r7, #12]
1000dd18:	8a9b      	ldrh	r3, [r3, #20]
1000dd1a:	b29b      	uxth	r3, r3
1000dd1c:	2b00      	cmp	r3, #0
1000dd1e:	d129      	bne.n	1000dd74 <_i2c_master_isr_handler+0xac>
			(module->status == STATUS_BUSY) &&
1000dd20:	68fb      	ldr	r3, [r7, #12]
1000dd22:	7f5b      	ldrb	r3, [r3, #29]
1000dd24:	b2db      	uxtb	r3, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000dd26:	2b05      	cmp	r3, #5
1000dd28:	d124      	bne.n	1000dd74 <_i2c_master_isr_handler+0xac>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
1000dd2a:	68fb      	ldr	r3, [r7, #12]
1000dd2c:	7f1b      	ldrb	r3, [r3, #28]
1000dd2e:	b2db      	uxtb	r3, r3

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
1000dd30:	2b00      	cmp	r3, #0
1000dd32:	d11f      	bne.n	1000dd74 <_i2c_master_isr_handler+0xac>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
1000dd34:	68bb      	ldr	r3, [r7, #8]
1000dd36:	222c      	movs	r2, #44	; 0x2c
1000dd38:	2100      	movs	r1, #0
1000dd3a:	5499      	strb	r1, [r3, r2]

		module->buffer_length = 0;
1000dd3c:	68fb      	ldr	r3, [r7, #12]
1000dd3e:	2200      	movs	r2, #0
1000dd40:	825a      	strh	r2, [r3, #18]
		module->status        = STATUS_OK;
1000dd42:	68fb      	ldr	r3, [r7, #12]
1000dd44:	2200      	movs	r2, #0
1000dd46:	775a      	strb	r2, [r3, #29]

		if (!module->no_stop) {
1000dd48:	68fb      	ldr	r3, [r7, #12]
1000dd4a:	795b      	ldrb	r3, [r3, #5]
1000dd4c:	2201      	movs	r2, #1
1000dd4e:	4053      	eors	r3, r2
1000dd50:	b2db      	uxtb	r3, r3
1000dd52:	2b00      	cmp	r3, #0
1000dd54:	d003      	beq.n	1000dd5e <_i2c_master_isr_handler+0x96>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000dd56:	68bb      	ldr	r3, [r7, #8]
1000dd58:	2220      	movs	r2, #32
1000dd5a:	2100      	movs	r1, #0
1000dd5c:	5499      	strb	r1, [r3, r2]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000dd5e:	1dfb      	adds	r3, r7, #7
1000dd60:	781b      	ldrb	r3, [r3, #0]
1000dd62:	2201      	movs	r2, #1
1000dd64:	4013      	ands	r3, r2
1000dd66:	d01d      	beq.n	1000dda4 <_i2c_master_isr_handler+0xdc>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
1000dd68:	68fb      	ldr	r3, [r7, #12]
1000dd6a:	689b      	ldr	r3, [r3, #8]
1000dd6c:	68fa      	ldr	r2, [r7, #12]
1000dd6e:	0010      	movs	r0, r2
1000dd70:	4798      	blx	r3
		if (!module->no_stop) {
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000dd72:	e017      	b.n	1000dda4 <_i2c_master_isr_handler+0xdc>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
1000dd74:	68fb      	ldr	r3, [r7, #12]
1000dd76:	8a5b      	ldrh	r3, [r3, #18]
1000dd78:	b29b      	uxth	r3, r3
1000dd7a:	2b00      	cmp	r3, #0
1000dd7c:	d012      	beq.n	1000dda4 <_i2c_master_isr_handler+0xdc>
1000dd7e:	68fb      	ldr	r3, [r7, #12]
1000dd80:	8a9b      	ldrh	r3, [r3, #20]
1000dd82:	b29b      	uxth	r3, r3
1000dd84:	2b00      	cmp	r3, #0
1000dd86:	d00d      	beq.n	1000dda4 <_i2c_master_isr_handler+0xdc>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
1000dd88:	68fb      	ldr	r3, [r7, #12]
1000dd8a:	7f1b      	ldrb	r3, [r3, #28]
1000dd8c:	b2db      	uxtb	r3, r3
1000dd8e:	2b00      	cmp	r3, #0
1000dd90:	d104      	bne.n	1000dd9c <_i2c_master_isr_handler+0xd4>
			_i2c_master_write(module);
1000dd92:	68fb      	ldr	r3, [r7, #12]
1000dd94:	0018      	movs	r0, r3
1000dd96:	4b36      	ldr	r3, [pc, #216]	; (1000de70 <_i2c_master_isr_handler+0x1a8>)
1000dd98:	4798      	blx	r3
1000dd9a:	e003      	b.n	1000dda4 <_i2c_master_isr_handler+0xdc>
		} else {
			_i2c_master_read(module);
1000dd9c:	68fb      	ldr	r3, [r7, #12]
1000dd9e:	0018      	movs	r0, r3
1000dda0:	4b34      	ldr	r3, [pc, #208]	; (1000de74 <_i2c_master_isr_handler+0x1ac>)
1000dda2:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000dda4:	68fb      	ldr	r3, [r7, #12]
1000dda6:	8a5b      	ldrh	r3, [r3, #18]
1000dda8:	b29b      	uxth	r3, r3
1000ddaa:	2b00      	cmp	r3, #0
1000ddac:	d032      	beq.n	1000de14 <_i2c_master_isr_handler+0x14c>
1000ddae:	68fb      	ldr	r3, [r7, #12]
1000ddb0:	8a9b      	ldrh	r3, [r3, #20]
1000ddb2:	b29b      	uxth	r3, r3
1000ddb4:	2b00      	cmp	r3, #0
1000ddb6:	d12d      	bne.n	1000de14 <_i2c_master_isr_handler+0x14c>
			(module->status == STATUS_BUSY) &&
1000ddb8:	68fb      	ldr	r3, [r7, #12]
1000ddba:	7f5b      	ldrb	r3, [r3, #29]
1000ddbc:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000ddbe:	2b05      	cmp	r3, #5
1000ddc0:	d128      	bne.n	1000de14 <_i2c_master_isr_handler+0x14c>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
1000ddc2:	68fb      	ldr	r3, [r7, #12]
1000ddc4:	7f1b      	ldrb	r3, [r3, #28]
1000ddc6:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
1000ddc8:	2b01      	cmp	r3, #1
1000ddca:	d123      	bne.n	1000de14 <_i2c_master_isr_handler+0x14c>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
1000ddcc:	68bb      	ldr	r3, [r7, #8]
1000ddce:	2230      	movs	r2, #48	; 0x30
1000ddd0:	2100      	movs	r1, #0
1000ddd2:	5499      	strb	r1, [r3, r2]

		module->buffer_length = 0;
1000ddd4:	68fb      	ldr	r3, [r7, #12]
1000ddd6:	2200      	movs	r2, #0
1000ddd8:	825a      	strh	r2, [r3, #18]
		module->status        = STATUS_OK;
1000ddda:	68fb      	ldr	r3, [r7, #12]
1000dddc:	2200      	movs	r2, #0
1000ddde:	775a      	strb	r2, [r3, #29]

		if (!module->no_stop) {
1000dde0:	68fb      	ldr	r3, [r7, #12]
1000dde2:	795b      	ldrb	r3, [r3, #5]
1000dde4:	2201      	movs	r2, #1
1000dde6:	4053      	eors	r3, r2
1000dde8:	b2db      	uxtb	r3, r3
1000ddea:	2b00      	cmp	r3, #0
1000ddec:	d003      	beq.n	1000ddf6 <_i2c_master_isr_handler+0x12e>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000ddee:	68bb      	ldr	r3, [r7, #8]
1000ddf0:	2220      	movs	r2, #32
1000ddf2:	2100      	movs	r1, #0
1000ddf4:	5499      	strb	r1, [r3, r2]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
1000ddf6:	1dfb      	adds	r3, r7, #7
1000ddf8:	781b      	ldrb	r3, [r3, #0]
1000ddfa:	2202      	movs	r2, #2
1000ddfc:	4013      	ands	r3, r2
1000ddfe:	d009      	beq.n	1000de14 <_i2c_master_isr_handler+0x14c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
1000de00:	68fb      	ldr	r3, [r7, #12]
1000de02:	7f1b      	ldrb	r3, [r3, #28]
1000de04:	b2db      	uxtb	r3, r3
1000de06:	2b01      	cmp	r3, #1
1000de08:	d104      	bne.n	1000de14 <_i2c_master_isr_handler+0x14c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
1000de0a:	68fb      	ldr	r3, [r7, #12]
1000de0c:	68db      	ldr	r3, [r3, #12]
1000de0e:	68fa      	ldr	r2, [r7, #12]
1000de10:	0010      	movs	r0, r2
1000de12:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
1000de14:	68fb      	ldr	r3, [r7, #12]
1000de16:	7f1b      	ldrb	r3, [r3, #28]
1000de18:	b2db      	uxtb	r3, r3
1000de1a:	2b01      	cmp	r3, #1
1000de1c:	d111      	bne.n	1000de42 <_i2c_master_isr_handler+0x17a>
		if (module->hw == I2C0) {
1000de1e:	68fb      	ldr	r3, [r7, #12]
1000de20:	681b      	ldr	r3, [r3, #0]
1000de22:	4a15      	ldr	r2, [pc, #84]	; (1000de78 <_i2c_master_isr_handler+0x1b0>)
1000de24:	4293      	cmp	r3, r2
1000de26:	d103      	bne.n	1000de30 <_i2c_master_isr_handler+0x168>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
1000de28:	2008      	movs	r0, #8
1000de2a:	4b14      	ldr	r3, [pc, #80]	; (1000de7c <_i2c_master_isr_handler+0x1b4>)
1000de2c:	4798      	blx	r3
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
1000de2e:	e019      	b.n	1000de64 <_i2c_master_isr_handler+0x19c>
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
		if (module->hw == I2C0) {
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
1000de30:	68fb      	ldr	r3, [r7, #12]
1000de32:	681b      	ldr	r3, [r3, #0]
1000de34:	4a12      	ldr	r2, [pc, #72]	; (1000de80 <_i2c_master_isr_handler+0x1b8>)
1000de36:	4293      	cmp	r3, r2
1000de38:	d114      	bne.n	1000de64 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
1000de3a:	200a      	movs	r0, #10
1000de3c:	4b0f      	ldr	r3, [pc, #60]	; (1000de7c <_i2c_master_isr_handler+0x1b4>)
1000de3e:	4798      	blx	r3
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
1000de40:	e010      	b.n	1000de64 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
1000de42:	68fb      	ldr	r3, [r7, #12]
1000de44:	681b      	ldr	r3, [r3, #0]
1000de46:	4a0c      	ldr	r2, [pc, #48]	; (1000de78 <_i2c_master_isr_handler+0x1b0>)
1000de48:	4293      	cmp	r3, r2
1000de4a:	d103      	bne.n	1000de54 <_i2c_master_isr_handler+0x18c>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
1000de4c:	2009      	movs	r0, #9
1000de4e:	4b0b      	ldr	r3, [pc, #44]	; (1000de7c <_i2c_master_isr_handler+0x1b4>)
1000de50:	4798      	blx	r3
		} else if (module->hw == I2C1) {
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
1000de52:	e007      	b.n	1000de64 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
1000de54:	68fb      	ldr	r3, [r7, #12]
1000de56:	681b      	ldr	r3, [r3, #0]
1000de58:	4a09      	ldr	r2, [pc, #36]	; (1000de80 <_i2c_master_isr_handler+0x1b8>)
1000de5a:	4293      	cmp	r3, r2
1000de5c:	d102      	bne.n	1000de64 <_i2c_master_isr_handler+0x19c>
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
1000de5e:	200b      	movs	r0, #11
1000de60:	4b06      	ldr	r3, [pc, #24]	; (1000de7c <_i2c_master_isr_handler+0x1b4>)
1000de62:	4798      	blx	r3
		}
	}
}
1000de64:	46c0      	nop			; (mov r8, r8)
1000de66:	46bd      	mov	sp, r7
1000de68:	b004      	add	sp, #16
1000de6a:	bd80      	pop	{r7, pc}
1000de6c:	1001c37c 	.word	0x1001c37c
1000de70:	1000da95 	.word	0x1000da95
1000de74:	1000da49 	.word	0x1000da49
1000de78:	40003000 	.word	0x40003000
1000de7c:	1000d9f1 	.word	0x1000d9f1
1000de80:	40003400 	.word	0x40003400

1000de84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000de84:	b580      	push	{r7, lr}
1000de86:	b082      	sub	sp, #8
1000de88:	af00      	add	r7, sp, #0
1000de8a:	0002      	movs	r2, r0
1000de8c:	1dfb      	adds	r3, r7, #7
1000de8e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000de90:	4b06      	ldr	r3, [pc, #24]	; (1000deac <NVIC_EnableIRQ+0x28>)
1000de92:	1dfa      	adds	r2, r7, #7
1000de94:	7812      	ldrb	r2, [r2, #0]
1000de96:	0011      	movs	r1, r2
1000de98:	221f      	movs	r2, #31
1000de9a:	400a      	ands	r2, r1
1000de9c:	2101      	movs	r1, #1
1000de9e:	4091      	lsls	r1, r2
1000dea0:	000a      	movs	r2, r1
1000dea2:	601a      	str	r2, [r3, #0]
}
1000dea4:	46c0      	nop			; (mov r8, r8)
1000dea6:	46bd      	mov	sp, r7
1000dea8:	b002      	add	sp, #8
1000deaa:	bd80      	pop	{r7, pc}
1000deac:	e000e100 	.word	0xe000e100

1000deb0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
1000deb0:	b580      	push	{r7, lr}
1000deb2:	b082      	sub	sp, #8
1000deb4:	af00      	add	r7, sp, #0
1000deb6:	0002      	movs	r2, r0
1000deb8:	1dfb      	adds	r3, r7, #7
1000deba:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000debc:	4a07      	ldr	r2, [pc, #28]	; (1000dedc <NVIC_DisableIRQ+0x2c>)
1000debe:	1dfb      	adds	r3, r7, #7
1000dec0:	781b      	ldrb	r3, [r3, #0]
1000dec2:	0019      	movs	r1, r3
1000dec4:	231f      	movs	r3, #31
1000dec6:	400b      	ands	r3, r1
1000dec8:	2101      	movs	r1, #1
1000deca:	4099      	lsls	r1, r3
1000decc:	000b      	movs	r3, r1
1000dece:	0019      	movs	r1, r3
1000ded0:	2380      	movs	r3, #128	; 0x80
1000ded2:	50d1      	str	r1, [r2, r3]
}
1000ded4:	46c0      	nop			; (mov r8, r8)
1000ded6:	46bd      	mov	sp, r7
1000ded8:	b002      	add	sp, #8
1000deda:	bd80      	pop	{r7, pc}
1000dedc:	e000e100 	.word	0xe000e100

1000dee0 <_spi_clock_enable>:
 * This function will enable SPI clock.
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clock_enable(struct spi_module *const module)
{
1000dee0:	b580      	push	{r7, lr}
1000dee2:	b084      	sub	sp, #16
1000dee4:	af00      	add	r7, sp, #0
1000dee6:	6078      	str	r0, [r7, #4]
	Assert(module);

	Spi *const spi_module = (module->hw);
1000dee8:	687b      	ldr	r3, [r7, #4]
1000deea:	681b      	ldr	r3, [r3, #0]
1000deec:	60fb      	str	r3, [r7, #12]

	if (spi_module == (void *)SPI0) {
1000deee:	68fb      	ldr	r3, [r7, #12]
1000def0:	4a11      	ldr	r2, [pc, #68]	; (1000df38 <_spi_clock_enable+0x58>)
1000def2:	4293      	cmp	r3, r2
1000def4:	d10c      	bne.n	1000df10 <_spi_clock_enable+0x30>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000def6:	2041      	movs	r0, #65	; 0x41
1000def8:	4b10      	ldr	r3, [pc, #64]	; (1000df3c <_spi_clock_enable+0x5c>)
1000defa:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000defc:	2026      	movs	r0, #38	; 0x26
1000defe:	4b0f      	ldr	r3, [pc, #60]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df00:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000df02:	2038      	movs	r0, #56	; 0x38
1000df04:	4b0d      	ldr	r3, [pc, #52]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df06:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000df08:	2001      	movs	r0, #1
1000df0a:	4b0c      	ldr	r3, [pc, #48]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df0c:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
	}
}
1000df0e:	e00f      	b.n	1000df30 <_spi_clock_enable+0x50>
	if (spi_module == (void *)SPI0) {
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
	} else if (spi_module == (void *)SPI1) {
1000df10:	68fb      	ldr	r3, [r7, #12]
1000df12:	4a0b      	ldr	r2, [pc, #44]	; (1000df40 <_spi_clock_enable+0x60>)
1000df14:	4293      	cmp	r3, r2
1000df16:	d10b      	bne.n	1000df30 <_spi_clock_enable+0x50>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000df18:	2042      	movs	r0, #66	; 0x42
1000df1a:	4b08      	ldr	r3, [pc, #32]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df1c:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000df1e:	2027      	movs	r0, #39	; 0x27
1000df20:	4b06      	ldr	r3, [pc, #24]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df22:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000df24:	2039      	movs	r0, #57	; 0x39
1000df26:	4b05      	ldr	r3, [pc, #20]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df28:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000df2a:	2002      	movs	r0, #2
1000df2c:	4b03      	ldr	r3, [pc, #12]	; (1000df3c <_spi_clock_enable+0x5c>)
1000df2e:	4798      	blx	r3
	}
}
1000df30:	46c0      	nop			; (mov r8, r8)
1000df32:	46bd      	mov	sp, r7
1000df34:	b004      	add	sp, #16
1000df36:	bd80      	pop	{r7, pc}
1000df38:	40006000 	.word	0x40006000
1000df3c:	1000eee9 	.word	0x1000eee9
1000df40:	40007000 	.word	0x40007000

1000df44 <_spi_clock_disable>:
 * This function will disable SPI clock.
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clock_disable(struct spi_module *const module)
{
1000df44:	b580      	push	{r7, lr}
1000df46:	b084      	sub	sp, #16
1000df48:	af00      	add	r7, sp, #0
1000df4a:	6078      	str	r0, [r7, #4]
	Assert(module);

	Spi *const spi_module = (module->hw);
1000df4c:	687b      	ldr	r3, [r7, #4]
1000df4e:	681b      	ldr	r3, [r3, #0]
1000df50:	60fb      	str	r3, [r7, #12]

	if (spi_module == (void *)SPI0) {
1000df52:	68fb      	ldr	r3, [r7, #12]
1000df54:	4a11      	ldr	r2, [pc, #68]	; (1000df9c <_spi_clock_disable+0x58>)
1000df56:	4293      	cmp	r3, r2
1000df58:	d10c      	bne.n	1000df74 <_spi_clock_disable+0x30>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000df5a:	2041      	movs	r0, #65	; 0x41
1000df5c:	4b10      	ldr	r3, [pc, #64]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df5e:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000df60:	2026      	movs	r0, #38	; 0x26
1000df62:	4b0f      	ldr	r3, [pc, #60]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df64:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000df66:	2038      	movs	r0, #56	; 0x38
1000df68:	4b0d      	ldr	r3, [pc, #52]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df6a:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000df6c:	2001      	movs	r0, #1
1000df6e:	4b0c      	ldr	r3, [pc, #48]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df70:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
	}
}
1000df72:	e00f      	b.n	1000df94 <_spi_clock_disable+0x50>
	if (spi_module == (void *)SPI0) {
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
	} else if (spi_module == (void *)SPI1) {
1000df74:	68fb      	ldr	r3, [r7, #12]
1000df76:	4a0b      	ldr	r2, [pc, #44]	; (1000dfa4 <_spi_clock_disable+0x60>)
1000df78:	4293      	cmp	r3, r2
1000df7a:	d10b      	bne.n	1000df94 <_spi_clock_disable+0x50>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000df7c:	2042      	movs	r0, #66	; 0x42
1000df7e:	4b08      	ldr	r3, [pc, #32]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df80:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000df82:	2027      	movs	r0, #39	; 0x27
1000df84:	4b06      	ldr	r3, [pc, #24]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df86:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000df88:	2039      	movs	r0, #57	; 0x39
1000df8a:	4b05      	ldr	r3, [pc, #20]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df8c:	4798      	blx	r3
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000df8e:	2002      	movs	r0, #2
1000df90:	4b03      	ldr	r3, [pc, #12]	; (1000dfa0 <_spi_clock_disable+0x5c>)
1000df92:	4798      	blx	r3
	}
}
1000df94:	46c0      	nop			; (mov r8, r8)
1000df96:	46bd      	mov	sp, r7
1000df98:	b004      	add	sp, #16
1000df9a:	bd80      	pop	{r7, pc}
1000df9c:	40006000 	.word	0x40006000
1000dfa0:	1000f269 	.word	0x1000f269
1000dfa4:	40007000 	.word	0x40007000

1000dfa8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
1000dfa8:	b580      	push	{r7, lr}
1000dfaa:	b084      	sub	sp, #16
1000dfac:	af00      	add	r7, sp, #0
1000dfae:	6078      	str	r0, [r7, #4]
1000dfb0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000dfb2:	687b      	ldr	r3, [r7, #4]
1000dfb4:	681b      	ldr	r3, [r3, #0]
1000dfb6:	60fb      	str	r3, [r7, #12]

	module->mode  = config->mode;
1000dfb8:	683b      	ldr	r3, [r7, #0]
1000dfba:	781a      	ldrb	r2, [r3, #0]
1000dfbc:	687b      	ldr	r3, [r7, #4]
1000dfbe:	715a      	strb	r2, [r3, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000dfc0:	683b      	ldr	r3, [r7, #0]
1000dfc2:	781b      	ldrb	r3, [r3, #0]
1000dfc4:	2b01      	cmp	r3, #1
1000dfc6:	d104      	bne.n	1000dfd2 <_spi_set_config+0x2a>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000dfc8:	683b      	ldr	r3, [r7, #0]
1000dfca:	791b      	ldrb	r3, [r3, #4]
1000dfcc:	b29a      	uxth	r2, r3
1000dfce:	68fb      	ldr	r3, [r7, #12]
1000dfd0:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000dfd2:	683b      	ldr	r3, [r7, #0]
1000dfd4:	785b      	ldrb	r3, [r3, #1]
1000dfd6:	2b04      	cmp	r3, #4
1000dfd8:	d106      	bne.n	1000dfe8 <_spi_set_config+0x40>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000dfda:	68fa      	ldr	r2, [r7, #12]
1000dfdc:	2124      	movs	r1, #36	; 0x24
1000dfde:	5c53      	ldrb	r3, [r2, r1]
1000dfe0:	2004      	movs	r0, #4
1000dfe2:	4303      	orrs	r3, r0
1000dfe4:	5453      	strb	r3, [r2, r1]
1000dfe6:	e005      	b.n	1000dff4 <_spi_set_config+0x4c>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000dfe8:	68fa      	ldr	r2, [r7, #12]
1000dfea:	2124      	movs	r1, #36	; 0x24
1000dfec:	5c53      	ldrb	r3, [r2, r1]
1000dfee:	2004      	movs	r0, #4
1000dff0:	4383      	bics	r3, r0
1000dff2:	5453      	strb	r3, [r2, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000dff4:	683b      	ldr	r3, [r7, #0]
1000dff6:	789b      	ldrb	r3, [r3, #2]
1000dff8:	2b01      	cmp	r3, #1
1000dffa:	d022      	beq.n	1000e042 <_spi_set_config+0x9a>
1000dffc:	dc02      	bgt.n	1000e004 <_spi_set_config+0x5c>
1000dffe:	2b00      	cmp	r3, #0
1000e000:	d005      	beq.n	1000e00e <_spi_set_config+0x66>
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
			break;
		default:
			break;
1000e002:	e038      	b.n	1000e076 <_spi_set_config+0xce>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000e004:	2b02      	cmp	r3, #2
1000e006:	d00f      	beq.n	1000e028 <_spi_set_config+0x80>
1000e008:	2b03      	cmp	r3, #3
1000e00a:	d027      	beq.n	1000e05c <_spi_set_config+0xb4>
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
			break;
		default:
			break;
1000e00c:	e033      	b.n	1000e076 <_spi_set_config+0xce>

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000e00e:	68fa      	ldr	r2, [r7, #12]
1000e010:	2124      	movs	r1, #36	; 0x24
1000e012:	5c53      	ldrb	r3, [r2, r1]
1000e014:	2002      	movs	r0, #2
1000e016:	4383      	bics	r3, r0
1000e018:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000e01a:	68fa      	ldr	r2, [r7, #12]
1000e01c:	2124      	movs	r1, #36	; 0x24
1000e01e:	5c53      	ldrb	r3, [r2, r1]
1000e020:	2001      	movs	r0, #1
1000e022:	4383      	bics	r3, r0
1000e024:	5453      	strb	r3, [r2, r1]
			break;
1000e026:	e026      	b.n	1000e076 <_spi_set_config+0xce>
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000e028:	68fa      	ldr	r2, [r7, #12]
1000e02a:	2124      	movs	r1, #36	; 0x24
1000e02c:	5c53      	ldrb	r3, [r2, r1]
1000e02e:	2002      	movs	r0, #2
1000e030:	4303      	orrs	r3, r0
1000e032:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000e034:	68fa      	ldr	r2, [r7, #12]
1000e036:	2124      	movs	r1, #36	; 0x24
1000e038:	5c53      	ldrb	r3, [r2, r1]
1000e03a:	2001      	movs	r0, #1
1000e03c:	4383      	bics	r3, r0
1000e03e:	5453      	strb	r3, [r2, r1]
			break;
1000e040:	e019      	b.n	1000e076 <_spi_set_config+0xce>
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000e042:	68fa      	ldr	r2, [r7, #12]
1000e044:	2124      	movs	r1, #36	; 0x24
1000e046:	5c53      	ldrb	r3, [r2, r1]
1000e048:	2002      	movs	r0, #2
1000e04a:	4383      	bics	r3, r0
1000e04c:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000e04e:	68fa      	ldr	r2, [r7, #12]
1000e050:	2124      	movs	r1, #36	; 0x24
1000e052:	5c53      	ldrb	r3, [r2, r1]
1000e054:	2001      	movs	r0, #1
1000e056:	4303      	orrs	r3, r0
1000e058:	5453      	strb	r3, [r2, r1]
			break;
1000e05a:	e00c      	b.n	1000e076 <_spi_set_config+0xce>
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000e05c:	68fa      	ldr	r2, [r7, #12]
1000e05e:	2124      	movs	r1, #36	; 0x24
1000e060:	5c53      	ldrb	r3, [r2, r1]
1000e062:	2002      	movs	r0, #2
1000e064:	4303      	orrs	r3, r0
1000e066:	5453      	strb	r3, [r2, r1]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000e068:	68fa      	ldr	r2, [r7, #12]
1000e06a:	2124      	movs	r1, #36	; 0x24
1000e06c:	5c53      	ldrb	r3, [r2, r1]
1000e06e:	2001      	movs	r0, #1
1000e070:	4303      	orrs	r3, r0
1000e072:	5453      	strb	r3, [r2, r1]
			break;
1000e074:	46c0      	nop			; (mov r8, r8)
		default:
			break;
	}

	return STATUS_OK;
1000e076:	2300      	movs	r3, #0
}
1000e078:	0018      	movs	r0, r3
1000e07a:	46bd      	mov	sp, r7
1000e07c:	b004      	add	sp, #16
1000e07e:	bd80      	pop	{r7, pc}

1000e080 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
1000e080:	b580      	push	{r7, lr}
1000e082:	b082      	sub	sp, #8
1000e084:	af00      	add	r7, sp, #0
1000e086:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000e088:	687b      	ldr	r3, [r7, #4]
1000e08a:	220c      	movs	r2, #12
1000e08c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
1000e08e:	687b      	ldr	r3, [r7, #4]
1000e090:	2200      	movs	r2, #0
1000e092:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
1000e094:	687b      	ldr	r3, [r7, #4]
1000e096:	2200      	movs	r2, #0
1000e098:	709a      	strb	r2, [r3, #2]
}
1000e09a:	46c0      	nop			; (mov r8, r8)
1000e09c:	46bd      	mov	sp, r7
1000e09e:	b002      	add	sp, #8
1000e0a0:	bd80      	pop	{r7, pc}
1000e0a2:	46c0      	nop			; (mov r8, r8)

1000e0a4 <spi_get_config_defaults>:
 *
 * \param[in,out] config  Configuration structure to initialize to default values
 */
void spi_get_config_defaults(
		struct spi_config *const config)
{
1000e0a4:	b580      	push	{r7, lr}
1000e0a6:	b082      	sub	sp, #8
1000e0a8:	af00      	add	r7, sp, #0
1000e0aa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000e0ac:	687b      	ldr	r3, [r7, #4]
1000e0ae:	2201      	movs	r2, #1
1000e0b0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000e0b2:	687b      	ldr	r3, [r7, #4]
1000e0b4:	2200      	movs	r2, #0
1000e0b6:	705a      	strb	r2, [r3, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000e0b8:	687b      	ldr	r3, [r7, #4]
1000e0ba:	2200      	movs	r2, #0
1000e0bc:	709a      	strb	r2, [r3, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000e0be:	687b      	ldr	r3, [r7, #4]
1000e0c0:	2200      	movs	r2, #0
1000e0c2:	70da      	strb	r2, [r3, #3]
	config->clock_divider    = 129;
1000e0c4:	687b      	ldr	r3, [r7, #4]
1000e0c6:	2281      	movs	r2, #129	; 0x81
1000e0c8:	711a      	strb	r2, [r3, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10_MUX2_SPI0_SCK;
1000e0ca:	687b      	ldr	r3, [r7, #4]
1000e0cc:	220a      	movs	r2, #10
1000e0ce:	609a      	str	r2, [r3, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11_MUX2_SPI0_MOSI;
1000e0d0:	687b      	ldr	r3, [r7, #4]
1000e0d2:	220b      	movs	r2, #11
1000e0d4:	60da      	str	r2, [r3, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12_MUX2_SPI0_SSN;
1000e0d6:	687b      	ldr	r3, [r7, #4]
1000e0d8:	220c      	movs	r2, #12
1000e0da:	611a      	str	r2, [r3, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13_MUX2_SPI0_MISO;
1000e0dc:	687b      	ldr	r3, [r7, #4]
1000e0de:	220d      	movs	r2, #13
1000e0e0:	615a      	str	r2, [r3, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_MUX2_SPI0_SCK;
1000e0e2:	687b      	ldr	r3, [r7, #4]
1000e0e4:	2202      	movs	r2, #2
1000e0e6:	619a      	str	r2, [r3, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_MUX2_SPI0_MOSI;
1000e0e8:	687b      	ldr	r3, [r7, #4]
1000e0ea:	2202      	movs	r2, #2
1000e0ec:	61da      	str	r2, [r3, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_MUX2_SPI0_SSN;
1000e0ee:	687b      	ldr	r3, [r7, #4]
1000e0f0:	2202      	movs	r2, #2
1000e0f2:	621a      	str	r2, [r3, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_MUX2_SPI0_MISO;
1000e0f4:	687b      	ldr	r3, [r7, #4]
1000e0f6:	2202      	movs	r2, #2
1000e0f8:	625a      	str	r2, [r3, #36]	; 0x24
};
1000e0fa:	46c0      	nop			; (mov r8, r8)
1000e0fc:	46bd      	mov	sp, r7
1000e0fe:	b002      	add	sp, #8
1000e100:	bd80      	pop	{r7, pc}
1000e102:	46c0      	nop			; (mov r8, r8)

1000e104 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000e104:	b580      	push	{r7, lr}
1000e106:	b084      	sub	sp, #16
1000e108:	af00      	add	r7, sp, #0
1000e10a:	6078      	str	r0, [r7, #4]
1000e10c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000e10e:	683b      	ldr	r3, [r7, #0]
1000e110:	781a      	ldrb	r2, [r3, #0]
1000e112:	687b      	ldr	r3, [r7, #4]
1000e114:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
1000e116:	683b      	ldr	r3, [r7, #0]
1000e118:	785b      	ldrb	r3, [r3, #1]
1000e11a:	001a      	movs	r2, r3
1000e11c:	687b      	ldr	r3, [r7, #4]
1000e11e:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
1000e120:	683b      	ldr	r3, [r7, #0]
1000e122:	789a      	ldrb	r2, [r3, #2]
1000e124:	687b      	ldr	r3, [r7, #4]
1000e126:	709a      	strb	r2, [r3, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000e128:	230c      	movs	r3, #12
1000e12a:	18fb      	adds	r3, r7, r3
1000e12c:	0018      	movs	r0, r3
1000e12e:	4b0c      	ldr	r3, [pc, #48]	; (1000e160 <spi_attach_slave+0x5c>)
1000e130:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000e132:	230c      	movs	r3, #12
1000e134:	18fb      	adds	r3, r7, r3
1000e136:	2201      	movs	r2, #1
1000e138:	701a      	strb	r2, [r3, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000e13a:	687b      	ldr	r3, [r7, #4]
1000e13c:	781b      	ldrb	r3, [r3, #0]
1000e13e:	220c      	movs	r2, #12
1000e140:	18ba      	adds	r2, r7, r2
1000e142:	0011      	movs	r1, r2
1000e144:	0018      	movs	r0, r3
1000e146:	4b07      	ldr	r3, [pc, #28]	; (1000e164 <spi_attach_slave+0x60>)
1000e148:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000e14a:	687b      	ldr	r3, [r7, #4]
1000e14c:	781b      	ldrb	r3, [r3, #0]
1000e14e:	2101      	movs	r1, #1
1000e150:	0018      	movs	r0, r3
1000e152:	4b05      	ldr	r3, [pc, #20]	; (1000e168 <spi_attach_slave+0x64>)
1000e154:	4798      	blx	r3
}
1000e156:	46c0      	nop			; (mov r8, r8)
1000e158:	46bd      	mov	sp, r7
1000e15a:	b004      	add	sp, #16
1000e15c:	bd80      	pop	{r7, pc}
1000e15e:	46c0      	nop			; (mov r8, r8)
1000e160:	1000ca81 	.word	0x1000ca81
1000e164:	1000caa9 	.word	0x1000caa9
1000e168:	1000cd15 	.word	0x1000cd15

1000e16c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000e16c:	b580      	push	{r7, lr}
1000e16e:	b084      	sub	sp, #16
1000e170:	af00      	add	r7, sp, #0
1000e172:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000e174:	687b      	ldr	r3, [r7, #4]
1000e176:	681b      	ldr	r3, [r3, #0]
1000e178:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
1000e17a:	687b      	ldr	r3, [r7, #4]
1000e17c:	0018      	movs	r0, r3
1000e17e:	4b0d      	ldr	r3, [pc, #52]	; (1000e1b4 <spi_reset+0x48>)
1000e180:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000e182:	68fb      	ldr	r3, [r7, #12]
1000e184:	4a0c      	ldr	r2, [pc, #48]	; (1000e1b8 <spi_reset+0x4c>)
1000e186:	4293      	cmp	r3, r2
1000e188:	d106      	bne.n	1000e198 <spi_reset+0x2c>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000e18a:	2001      	movs	r0, #1
1000e18c:	4b0b      	ldr	r3, [pc, #44]	; (1000e1bc <spi_reset+0x50>)
1000e18e:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000e190:	2038      	movs	r0, #56	; 0x38
1000e192:	4b0a      	ldr	r3, [pc, #40]	; (1000e1bc <spi_reset+0x50>)
1000e194:	4798      	blx	r3
	} else if (spi_module == (void *)SPI1) {
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
	}
}
1000e196:	e009      	b.n	1000e1ac <spi_reset+0x40>

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
	} else if (spi_module == (void *)SPI1) {
1000e198:	68fb      	ldr	r3, [r7, #12]
1000e19a:	4a09      	ldr	r2, [pc, #36]	; (1000e1c0 <spi_reset+0x54>)
1000e19c:	4293      	cmp	r3, r2
1000e19e:	d105      	bne.n	1000e1ac <spi_reset+0x40>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000e1a0:	2002      	movs	r0, #2
1000e1a2:	4b06      	ldr	r3, [pc, #24]	; (1000e1bc <spi_reset+0x50>)
1000e1a4:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000e1a6:	2039      	movs	r0, #57	; 0x39
1000e1a8:	4b04      	ldr	r3, [pc, #16]	; (1000e1bc <spi_reset+0x50>)
1000e1aa:	4798      	blx	r3
	}
}
1000e1ac:	46c0      	nop			; (mov r8, r8)
1000e1ae:	46bd      	mov	sp, r7
1000e1b0:	b004      	add	sp, #16
1000e1b2:	bd80      	pop	{r7, pc}
1000e1b4:	1000e415 	.word	0x1000e415
1000e1b8:	40006000 	.word	0x40006000
1000e1bc:	1000f5fd 	.word	0x1000f5fd
1000e1c0:	40007000 	.word	0x40007000

1000e1c4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000e1c4:	b580      	push	{r7, lr}
1000e1c6:	b088      	sub	sp, #32
1000e1c8:	af00      	add	r7, sp, #0
1000e1ca:	60f8      	str	r0, [r7, #12]
1000e1cc:	60b9      	str	r1, [r7, #8]
1000e1ce:	607a      	str	r2, [r7, #4]
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000e1d0:	68fb      	ldr	r3, [r7, #12]
1000e1d2:	68ba      	ldr	r2, [r7, #8]
1000e1d4:	601a      	str	r2, [r3, #0]

	Spi *const spi_module = (module->hw);
1000e1d6:	68fb      	ldr	r3, [r7, #12]
1000e1d8:	681b      	ldr	r3, [r3, #0]
1000e1da:	61bb      	str	r3, [r7, #24]

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_SPI_MODULE_ENABLE_MASK) {
1000e1dc:	69bb      	ldr	r3, [r7, #24]
1000e1de:	7e1b      	ldrb	r3, [r3, #24]
1000e1e0:	b2db      	uxtb	r3, r3
1000e1e2:	001a      	movs	r2, r3
1000e1e4:	2301      	movs	r3, #1
1000e1e6:	4013      	ands	r3, r2
1000e1e8:	d002      	beq.n	1000e1f0 <spi_init+0x2c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
1000e1ea:	69bb      	ldr	r3, [r7, #24]
1000e1ec:	2200      	movs	r2, #0
1000e1ee:	761a      	strb	r2, [r3, #24]
	}

	spi_reset(module);
1000e1f0:	68fb      	ldr	r3, [r7, #12]
1000e1f2:	0018      	movs	r0, r3
1000e1f4:	4b64      	ldr	r3, [pc, #400]	; (1000e388 <spi_init+0x1c4>)
1000e1f6:	4798      	blx	r3
	_spi_clock_enable(module);
1000e1f8:	68fb      	ldr	r3, [r7, #12]
1000e1fa:	0018      	movs	r0, r3
1000e1fc:	4b63      	ldr	r3, [pc, #396]	; (1000e38c <spi_init+0x1c8>)
1000e1fe:	4798      	blx	r3

#if SPI_CALLBACK_MODE == true
	if (module->hw == SPI0) {
1000e200:	68fb      	ldr	r3, [r7, #12]
1000e202:	681b      	ldr	r3, [r3, #0]
1000e204:	4a62      	ldr	r2, [pc, #392]	; (1000e390 <spi_init+0x1cc>)
1000e206:	4293      	cmp	r3, r2
1000e208:	d10d      	bne.n	1000e226 <spi_init+0x62>
		_spi_instances[0] = module;
1000e20a:	4b62      	ldr	r3, [pc, #392]	; (1000e394 <spi_init+0x1d0>)
1000e20c:	68fa      	ldr	r2, [r7, #12]
1000e20e:	601a      	str	r2, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_SPIRX0_INDEX, (uint32_t)spi_rx0_isr_handler);
1000e210:	4b61      	ldr	r3, [pc, #388]	; (1000e398 <spi_init+0x1d4>)
1000e212:	0019      	movs	r1, r3
1000e214:	2014      	movs	r0, #20
1000e216:	4b61      	ldr	r3, [pc, #388]	; (1000e39c <spi_init+0x1d8>)
1000e218:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_SPITX0_INDEX, (uint32_t)spi_tx0_isr_handler);
1000e21a:	4b61      	ldr	r3, [pc, #388]	; (1000e3a0 <spi_init+0x1dc>)
1000e21c:	0019      	movs	r1, r3
1000e21e:	2015      	movs	r0, #21
1000e220:	4b5e      	ldr	r3, [pc, #376]	; (1000e39c <spi_init+0x1d8>)
1000e222:	4798      	blx	r3
1000e224:	e011      	b.n	1000e24a <spi_init+0x86>
	} else if (module->hw == SPI1) {
1000e226:	68fb      	ldr	r3, [r7, #12]
1000e228:	681b      	ldr	r3, [r3, #0]
1000e22a:	4a5e      	ldr	r2, [pc, #376]	; (1000e3a4 <spi_init+0x1e0>)
1000e22c:	4293      	cmp	r3, r2
1000e22e:	d10c      	bne.n	1000e24a <spi_init+0x86>
		_spi_instances[1] = module;
1000e230:	4b58      	ldr	r3, [pc, #352]	; (1000e394 <spi_init+0x1d0>)
1000e232:	68fa      	ldr	r2, [r7, #12]
1000e234:	605a      	str	r2, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_SPIRX1_INDEX, (uint32_t)spi_rx1_isr_handler);
1000e236:	4b5c      	ldr	r3, [pc, #368]	; (1000e3a8 <spi_init+0x1e4>)
1000e238:	0019      	movs	r1, r3
1000e23a:	2016      	movs	r0, #22
1000e23c:	4b57      	ldr	r3, [pc, #348]	; (1000e39c <spi_init+0x1d8>)
1000e23e:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_SPITX1_INDEX, (uint32_t)spi_tx1_isr_handler);
1000e240:	4b5a      	ldr	r3, [pc, #360]	; (1000e3ac <spi_init+0x1e8>)
1000e242:	0019      	movs	r1, r3
1000e244:	2017      	movs	r0, #23
1000e246:	4b55      	ldr	r3, [pc, #340]	; (1000e39c <spi_init+0x1d8>)
1000e248:	4798      	blx	r3
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000e24a:	2314      	movs	r3, #20
1000e24c:	18fb      	adds	r3, r7, r3
1000e24e:	0018      	movs	r0, r3
1000e250:	4b57      	ldr	r3, [pc, #348]	; (1000e3b0 <spi_init+0x1ec>)
1000e252:	4798      	blx	r3

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000e254:	231f      	movs	r3, #31
1000e256:	18fb      	adds	r3, r7, r3
1000e258:	2200      	movs	r2, #0
1000e25a:	701a      	strb	r2, [r3, #0]
1000e25c:	e041      	b.n	1000e2e2 <spi_init+0x11e>
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000e25e:	231f      	movs	r3, #31
1000e260:	18fb      	adds	r3, r7, r3
1000e262:	781a      	ldrb	r2, [r3, #0]
1000e264:	687b      	ldr	r3, [r7, #4]
1000e266:	3202      	adds	r2, #2
1000e268:	0092      	lsls	r2, r2, #2
1000e26a:	58d3      	ldr	r3, [r2, r3]
1000e26c:	3301      	adds	r3, #1
1000e26e:	d031      	beq.n	1000e2d4 <spi_init+0x110>
			if (config->mode == SPI_MODE_MASTER) {
1000e270:	687b      	ldr	r3, [r7, #4]
1000e272:	781b      	ldrb	r3, [r3, #0]
1000e274:	2b01      	cmp	r3, #1
1000e276:	d104      	bne.n	1000e282 <spi_init+0xbe>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000e278:	2314      	movs	r3, #20
1000e27a:	18fb      	adds	r3, r7, r3
1000e27c:	2201      	movs	r2, #1
1000e27e:	701a      	strb	r2, [r3, #0]
1000e280:	e007      	b.n	1000e292 <spi_init+0xce>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000e282:	687b      	ldr	r3, [r7, #4]
1000e284:	781b      	ldrb	r3, [r3, #0]
1000e286:	2b00      	cmp	r3, #0
1000e288:	d103      	bne.n	1000e292 <spi_init+0xce>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000e28a:	2314      	movs	r3, #20
1000e28c:	18fb      	adds	r3, r7, r3
1000e28e:	2200      	movs	r2, #0
1000e290:	701a      	strb	r2, [r3, #0]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000e292:	231f      	movs	r3, #31
1000e294:	18fb      	adds	r3, r7, r3
1000e296:	781a      	ldrb	r2, [r3, #0]
1000e298:	687b      	ldr	r3, [r7, #4]
1000e29a:	3202      	adds	r2, #2
1000e29c:	0092      	lsls	r2, r2, #2
1000e29e:	58d3      	ldr	r3, [r2, r3]
1000e2a0:	b2db      	uxtb	r3, r3
1000e2a2:	2214      	movs	r2, #20
1000e2a4:	18ba      	adds	r2, r7, r2
1000e2a6:	0011      	movs	r1, r2
1000e2a8:	0018      	movs	r0, r3
1000e2aa:	4b42      	ldr	r3, [pc, #264]	; (1000e3b4 <spi_init+0x1f0>)
1000e2ac:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000e2ae:	231f      	movs	r3, #31
1000e2b0:	18fb      	adds	r3, r7, r3
1000e2b2:	781a      	ldrb	r2, [r3, #0]
1000e2b4:	687b      	ldr	r3, [r7, #4]
1000e2b6:	3202      	adds	r2, #2
1000e2b8:	0092      	lsls	r2, r2, #2
1000e2ba:	58d3      	ldr	r3, [r2, r3]
1000e2bc:	b2d8      	uxtb	r0, r3
						(uint16_t)(config->pinmux_sel_pad[idx]));
1000e2be:	231f      	movs	r3, #31
1000e2c0:	18fb      	adds	r3, r7, r3
1000e2c2:	781a      	ldrb	r2, [r3, #0]
1000e2c4:	687b      	ldr	r3, [r7, #4]
1000e2c6:	3206      	adds	r2, #6
1000e2c8:	0092      	lsls	r2, r2, #2
1000e2ca:	58d3      	ldr	r3, [r2, r3]
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
			} else if (config->mode == SPI_MODE_SLAVE) {
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000e2cc:	b29b      	uxth	r3, r3
1000e2ce:	0019      	movs	r1, r3
1000e2d0:	4b39      	ldr	r3, [pc, #228]	; (1000e3b8 <spi_init+0x1f4>)
1000e2d2:	4798      	blx	r3
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000e2d4:	231f      	movs	r3, #31
1000e2d6:	18fb      	adds	r3, r7, r3
1000e2d8:	781a      	ldrb	r2, [r3, #0]
1000e2da:	231f      	movs	r3, #31
1000e2dc:	18fb      	adds	r3, r7, r3
1000e2de:	3201      	adds	r2, #1
1000e2e0:	701a      	strb	r2, [r3, #0]
1000e2e2:	231f      	movs	r3, #31
1000e2e4:	18fb      	adds	r3, r7, r3
1000e2e6:	781b      	ldrb	r3, [r3, #0]
1000e2e8:	2b03      	cmp	r3, #3
1000e2ea:	d9b8      	bls.n	1000e25e <spi_init+0x9a>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000e2ec:	687b      	ldr	r3, [r7, #4]
1000e2ee:	78da      	ldrb	r2, [r3, #3]
1000e2f0:	69bb      	ldr	r3, [r7, #24]
1000e2f2:	741a      	strb	r2, [r3, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000e2f4:	687b      	ldr	r3, [r7, #4]
1000e2f6:	781b      	ldrb	r3, [r3, #0]
1000e2f8:	2b01      	cmp	r3, #1
1000e2fa:	d102      	bne.n	1000e302 <spi_init+0x13e>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000e2fc:	69bb      	ldr	r3, [r7, #24]
1000e2fe:	2201      	movs	r2, #1
1000e300:	771a      	strb	r2, [r3, #28]
#if SPI_CALLBACK_MODE == true
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
1000e302:	231e      	movs	r3, #30
1000e304:	18fb      	adds	r3, r7, r3
1000e306:	2200      	movs	r2, #0
1000e308:	701a      	strb	r2, [r3, #0]
1000e30a:	e00e      	b.n	1000e32a <spi_init+0x166>
		module->callback[i]        = NULL;
1000e30c:	231e      	movs	r3, #30
1000e30e:	18fb      	adds	r3, r7, r3
1000e310:	781a      	ldrb	r2, [r3, #0]
1000e312:	68fb      	ldr	r3, [r7, #12]
1000e314:	3202      	adds	r2, #2
1000e316:	0092      	lsls	r2, r2, #2
1000e318:	2100      	movs	r1, #0
1000e31a:	50d1      	str	r1, [r2, r3]
#if SPI_CALLBACK_MODE == true
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
1000e31c:	231e      	movs	r3, #30
1000e31e:	18fb      	adds	r3, r7, r3
1000e320:	781a      	ldrb	r2, [r3, #0]
1000e322:	231e      	movs	r3, #30
1000e324:	18fb      	adds	r3, r7, r3
1000e326:	3201      	adds	r2, #1
1000e328:	701a      	strb	r2, [r3, #0]
1000e32a:	231e      	movs	r3, #30
1000e32c:	18fb      	adds	r3, r7, r3
1000e32e:	781b      	ldrb	r3, [r3, #0]
1000e330:	2b03      	cmp	r3, #3
1000e332:	d9eb      	bls.n	1000e30c <spi_init+0x148>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
1000e334:	68fb      	ldr	r3, [r7, #12]
1000e336:	2200      	movs	r2, #0
1000e338:	61da      	str	r2, [r3, #28]
	module->rx_buffer_ptr              = NULL;
1000e33a:	68fb      	ldr	r3, [r7, #12]
1000e33c:	2200      	movs	r2, #0
1000e33e:	619a      	str	r2, [r3, #24]
	module->remaining_tx_buffer_length = 0x0000;
1000e340:	68fb      	ldr	r3, [r7, #12]
1000e342:	2200      	movs	r2, #0
1000e344:	849a      	strh	r2, [r3, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
1000e346:	68fb      	ldr	r3, [r7, #12]
1000e348:	2200      	movs	r2, #0
1000e34a:	841a      	strh	r2, [r3, #32]
	module->registered_callback        = 0x00;
1000e34c:	68fb      	ldr	r3, [r7, #12]
1000e34e:	2226      	movs	r2, #38	; 0x26
1000e350:	2100      	movs	r1, #0
1000e352:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
1000e354:	68fb      	ldr	r3, [r7, #12]
1000e356:	2227      	movs	r2, #39	; 0x27
1000e358:	2100      	movs	r1, #0
1000e35a:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
1000e35c:	68fb      	ldr	r3, [r7, #12]
1000e35e:	2228      	movs	r2, #40	; 0x28
1000e360:	2100      	movs	r1, #0
1000e362:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
1000e364:	68fb      	ldr	r3, [r7, #12]
1000e366:	2203      	movs	r2, #3
1000e368:	71da      	strb	r2, [r3, #7]
	module->locked                     = 0;
1000e36a:	68fb      	ldr	r3, [r7, #12]
1000e36c:	2200      	movs	r2, #0
1000e36e:	711a      	strb	r2, [r3, #4]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
1000e370:	687a      	ldr	r2, [r7, #4]
1000e372:	68fb      	ldr	r3, [r7, #12]
1000e374:	0011      	movs	r1, r2
1000e376:	0018      	movs	r0, r3
1000e378:	4b10      	ldr	r3, [pc, #64]	; (1000e3bc <spi_init+0x1f8>)
1000e37a:	4798      	blx	r3
1000e37c:	0003      	movs	r3, r0
}
1000e37e:	0018      	movs	r0, r3
1000e380:	46bd      	mov	sp, r7
1000e382:	b008      	add	sp, #32
1000e384:	bd80      	pop	{r7, pc}
1000e386:	46c0      	nop			; (mov r8, r8)
1000e388:	1000e16d 	.word	0x1000e16d
1000e38c:	1000dee1 	.word	0x1000dee1
1000e390:	40006000 	.word	0x40006000
1000e394:	1001c380 	.word	0x1001c380
1000e398:	1000e5bd 	.word	0x1000e5bd
1000e39c:	1000fb9d 	.word	0x1000fb9d
1000e3a0:	1000e7ad 	.word	0x1000e7ad
1000e3a4:	40007000 	.word	0x40007000
1000e3a8:	1000e945 	.word	0x1000e945
1000e3ac:	1000eb35 	.word	0x1000eb35
1000e3b0:	1000ca81 	.word	0x1000ca81
1000e3b4:	1000caa9 	.word	0x1000caa9
1000e3b8:	1000cddd 	.word	0x1000cddd
1000e3bc:	1000dfa9 	.word	0x1000dfa9

1000e3c0 <spi_enable>:
 * This function will enable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
1000e3c0:	b580      	push	{r7, lr}
1000e3c2:	b084      	sub	sp, #16
1000e3c4:	af00      	add	r7, sp, #0
1000e3c6:	6078      	str	r0, [r7, #4]
	Spi *const spi_module = (module->hw);
1000e3c8:	687b      	ldr	r3, [r7, #4]
1000e3ca:	681b      	ldr	r3, [r3, #0]
1000e3cc:	60fb      	str	r3, [r7, #12]

#if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
1000e3ce:	68fb      	ldr	r3, [r7, #12]
1000e3d0:	4a0d      	ldr	r2, [pc, #52]	; (1000e408 <spi_enable+0x48>)
1000e3d2:	4293      	cmp	r3, r2
1000e3d4:	d106      	bne.n	1000e3e4 <spi_enable+0x24>
		NVIC_EnableIRQ(SPI0_RX_IRQn);
1000e3d6:	2004      	movs	r0, #4
1000e3d8:	4b0c      	ldr	r3, [pc, #48]	; (1000e40c <spi_enable+0x4c>)
1000e3da:	4798      	blx	r3
		NVIC_EnableIRQ(SPI0_TX_IRQn);
1000e3dc:	2005      	movs	r0, #5
1000e3de:	4b0b      	ldr	r3, [pc, #44]	; (1000e40c <spi_enable+0x4c>)
1000e3e0:	4798      	blx	r3
1000e3e2:	e009      	b.n	1000e3f8 <spi_enable+0x38>
	} else if(spi_module == SPI1) {
1000e3e4:	68fb      	ldr	r3, [r7, #12]
1000e3e6:	4a0a      	ldr	r2, [pc, #40]	; (1000e410 <spi_enable+0x50>)
1000e3e8:	4293      	cmp	r3, r2
1000e3ea:	d105      	bne.n	1000e3f8 <spi_enable+0x38>
		NVIC_EnableIRQ(SPI1_RX_IRQn);
1000e3ec:	2006      	movs	r0, #6
1000e3ee:	4b07      	ldr	r3, [pc, #28]	; (1000e40c <spi_enable+0x4c>)
1000e3f0:	4798      	blx	r3
		NVIC_EnableIRQ(SPI1_TX_IRQn);
1000e3f2:	2007      	movs	r0, #7
1000e3f4:	4b05      	ldr	r3, [pc, #20]	; (1000e40c <spi_enable+0x4c>)
1000e3f6:	4798      	blx	r3
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_SPI_MODULE_ENABLE_ENABLE;
1000e3f8:	68fb      	ldr	r3, [r7, #12]
1000e3fa:	2201      	movs	r2, #1
1000e3fc:	761a      	strb	r2, [r3, #24]
}
1000e3fe:	46c0      	nop			; (mov r8, r8)
1000e400:	46bd      	mov	sp, r7
1000e402:	b004      	add	sp, #16
1000e404:	bd80      	pop	{r7, pc}
1000e406:	46c0      	nop			; (mov r8, r8)
1000e408:	40006000 	.word	0x40006000
1000e40c:	1000de85 	.word	0x1000de85
1000e410:	40007000 	.word	0x40007000

1000e414 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000e414:	b580      	push	{r7, lr}
1000e416:	b084      	sub	sp, #16
1000e418:	af00      	add	r7, sp, #0
1000e41a:	6078      	str	r0, [r7, #4]
	Spi *const spi_module = (module->hw);
1000e41c:	687b      	ldr	r3, [r7, #4]
1000e41e:	681b      	ldr	r3, [r3, #0]
1000e420:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
1000e422:	68fb      	ldr	r3, [r7, #12]
1000e424:	4a0f      	ldr	r2, [pc, #60]	; (1000e464 <spi_disable+0x50>)
1000e426:	4293      	cmp	r3, r2
1000e428:	d106      	bne.n	1000e438 <spi_disable+0x24>
		NVIC_DisableIRQ(SPI0_RX_IRQn);
1000e42a:	2004      	movs	r0, #4
1000e42c:	4b0e      	ldr	r3, [pc, #56]	; (1000e468 <spi_disable+0x54>)
1000e42e:	4798      	blx	r3
		NVIC_DisableIRQ(SPI0_TX_IRQn);
1000e430:	2005      	movs	r0, #5
1000e432:	4b0d      	ldr	r3, [pc, #52]	; (1000e468 <spi_disable+0x54>)
1000e434:	4798      	blx	r3
1000e436:	e009      	b.n	1000e44c <spi_disable+0x38>
	} else if(spi_module == SPI1) {
1000e438:	68fb      	ldr	r3, [r7, #12]
1000e43a:	4a0c      	ldr	r2, [pc, #48]	; (1000e46c <spi_disable+0x58>)
1000e43c:	4293      	cmp	r3, r2
1000e43e:	d105      	bne.n	1000e44c <spi_disable+0x38>
		NVIC_DisableIRQ(SPI1_RX_IRQn);
1000e440:	2006      	movs	r0, #6
1000e442:	4b09      	ldr	r3, [pc, #36]	; (1000e468 <spi_disable+0x54>)
1000e444:	4798      	blx	r3
		NVIC_DisableIRQ(SPI1_TX_IRQn);
1000e446:	2007      	movs	r0, #7
1000e448:	4b07      	ldr	r3, [pc, #28]	; (1000e468 <spi_disable+0x54>)
1000e44a:	4798      	blx	r3
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_SPI_MODULE_ENABLE_ENABLE_Pos);
1000e44c:	68fb      	ldr	r3, [r7, #12]
1000e44e:	2200      	movs	r2, #0
1000e450:	761a      	strb	r2, [r3, #24]
	_spi_clock_disable(module);
1000e452:	687b      	ldr	r3, [r7, #4]
1000e454:	0018      	movs	r0, r3
1000e456:	4b06      	ldr	r3, [pc, #24]	; (1000e470 <spi_disable+0x5c>)
1000e458:	4798      	blx	r3
}
1000e45a:	46c0      	nop			; (mov r8, r8)
1000e45c:	46bd      	mov	sp, r7
1000e45e:	b004      	add	sp, #16
1000e460:	bd80      	pop	{r7, pc}
1000e462:	46c0      	nop			; (mov r8, r8)
1000e464:	40006000 	.word	0x40006000
1000e468:	1000deb1 	.word	0x1000deb1
1000e46c:	40007000 	.word	0x40007000
1000e470:	1000df45 	.word	0x1000df45

1000e474 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000e474:	b580      	push	{r7, lr}
1000e476:	b086      	sub	sp, #24
1000e478:	af00      	add	r7, sp, #0
1000e47a:	60f8      	str	r0, [r7, #12]
1000e47c:	60b9      	str	r1, [r7, #8]
1000e47e:	1dfb      	adds	r3, r7, #7
1000e480:	701a      	strb	r2, [r3, #0]
	uint8_t gpio_num = slave->ss_pin;
1000e482:	2317      	movs	r3, #23
1000e484:	18fb      	adds	r3, r7, r3
1000e486:	68ba      	ldr	r2, [r7, #8]
1000e488:	7812      	ldrb	r2, [r2, #0]
1000e48a:	701a      	strb	r2, [r3, #0]
	if(select) {
1000e48c:	1dfb      	adds	r3, r7, #7
1000e48e:	781b      	ldrb	r3, [r3, #0]
1000e490:	2b00      	cmp	r3, #0
1000e492:	d007      	beq.n	1000e4a4 <spi_select_slave+0x30>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000e494:	2317      	movs	r3, #23
1000e496:	18fb      	adds	r3, r7, r3
1000e498:	781b      	ldrb	r3, [r3, #0]
1000e49a:	2100      	movs	r1, #0
1000e49c:	0018      	movs	r0, r3
1000e49e:	4b07      	ldr	r3, [pc, #28]	; (1000e4bc <spi_select_slave+0x48>)
1000e4a0:	4798      	blx	r3
1000e4a2:	e006      	b.n	1000e4b2 <spi_select_slave+0x3e>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000e4a4:	2317      	movs	r3, #23
1000e4a6:	18fb      	adds	r3, r7, r3
1000e4a8:	781b      	ldrb	r3, [r3, #0]
1000e4aa:	2101      	movs	r1, #1
1000e4ac:	0018      	movs	r0, r3
1000e4ae:	4b03      	ldr	r3, [pc, #12]	; (1000e4bc <spi_select_slave+0x48>)
1000e4b0:	4798      	blx	r3
	}

	return STATUS_OK;
1000e4b2:	2300      	movs	r3, #0
}
1000e4b4:	0018      	movs	r0, r3
1000e4b6:	46bd      	mov	sp, r7
1000e4b8:	b006      	add	sp, #24
1000e4ba:	bd80      	pop	{r7, pc}
1000e4bc:	1000cd15 	.word	0x1000cd15

1000e4c0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
1000e4c0:	b580      	push	{r7, lr}
1000e4c2:	b084      	sub	sp, #16
1000e4c4:	af00      	add	r7, sp, #0
1000e4c6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000e4c8:	687b      	ldr	r3, [r7, #4]
1000e4ca:	681b      	ldr	r3, [r3, #0]
1000e4cc:	60fb      	str	r3, [r7, #12]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
1000e4ce:	687b      	ldr	r3, [r7, #4]
1000e4d0:	69db      	ldr	r3, [r3, #28]
1000e4d2:	781b      	ldrb	r3, [r3, #0]
1000e4d4:	b2da      	uxtb	r2, r3
1000e4d6:	230a      	movs	r3, #10
1000e4d8:	18fb      	adds	r3, r7, r3
1000e4da:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000e4dc:	687b      	ldr	r3, [r7, #4]
1000e4de:	69db      	ldr	r3, [r3, #28]
1000e4e0:	1c5a      	adds	r2, r3, #1
1000e4e2:	687b      	ldr	r3, [r7, #4]
1000e4e4:	61da      	str	r2, [r3, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
1000e4e6:	230a      	movs	r3, #10
1000e4e8:	18fb      	adds	r3, r7, r3
1000e4ea:	881b      	ldrh	r3, [r3, #0]
1000e4ec:	b2da      	uxtb	r2, r3
1000e4ee:	68fb      	ldr	r3, [r7, #12]
1000e4f0:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000e4f2:	687b      	ldr	r3, [r7, #4]
1000e4f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000e4f6:	b29b      	uxth	r3, r3
1000e4f8:	3b01      	subs	r3, #1
1000e4fa:	b29a      	uxth	r2, r3
1000e4fc:	687b      	ldr	r3, [r7, #4]
1000e4fe:	849a      	strh	r2, [r3, #36]	; 0x24
}
1000e500:	46c0      	nop			; (mov r8, r8)
1000e502:	46bd      	mov	sp, r7
1000e504:	b004      	add	sp, #16
1000e506:	bd80      	pop	{r7, pc}

1000e508 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
1000e508:	b580      	push	{r7, lr}
1000e50a:	b084      	sub	sp, #16
1000e50c:	af00      	add	r7, sp, #0
1000e50e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000e510:	687b      	ldr	r3, [r7, #4]
1000e512:	681b      	ldr	r3, [r3, #0]
1000e514:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
1000e516:	68fb      	ldr	r3, [r7, #12]
1000e518:	791b      	ldrb	r3, [r3, #4]
1000e51a:	b2da      	uxtb	r2, r3
1000e51c:	230a      	movs	r3, #10
1000e51e:	18fb      	adds	r3, r7, r3
1000e520:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000e522:	687b      	ldr	r3, [r7, #4]
1000e524:	699b      	ldr	r3, [r3, #24]
1000e526:	220a      	movs	r2, #10
1000e528:	18ba      	adds	r2, r7, r2
1000e52a:	8812      	ldrh	r2, [r2, #0]
1000e52c:	b2d2      	uxtb	r2, r2
1000e52e:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000e530:	687b      	ldr	r3, [r7, #4]
1000e532:	699b      	ldr	r3, [r3, #24]
1000e534:	1c5a      	adds	r2, r3, #1
1000e536:	687b      	ldr	r3, [r7, #4]
1000e538:	619a      	str	r2, [r3, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000e53a:	687b      	ldr	r3, [r7, #4]
1000e53c:	8c1b      	ldrh	r3, [r3, #32]
1000e53e:	b29b      	uxth	r3, r3
1000e540:	3b01      	subs	r3, #1
1000e542:	b29a      	uxth	r2, r3
1000e544:	687b      	ldr	r3, [r7, #4]
1000e546:	841a      	strh	r2, [r3, #32]
}
1000e548:	46c0      	nop			; (mov r8, r8)
1000e54a:	46bd      	mov	sp, r7
1000e54c:	b004      	add	sp, #16
1000e54e:	bd80      	pop	{r7, pc}

1000e550 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
1000e550:	b580      	push	{r7, lr}
1000e552:	b084      	sub	sp, #16
1000e554:	af00      	add	r7, sp, #0
1000e556:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000e558:	687b      	ldr	r3, [r7, #4]
1000e55a:	681b      	ldr	r3, [r3, #0]
1000e55c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
1000e55e:	4b08      	ldr	r3, [pc, #32]	; (1000e580 <_spi_write_dummy+0x30>)
1000e560:	881b      	ldrh	r3, [r3, #0]
1000e562:	b2da      	uxtb	r2, r3
1000e564:	68fb      	ldr	r3, [r7, #12]
1000e566:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000e568:	687b      	ldr	r3, [r7, #4]
1000e56a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000e56c:	b29b      	uxth	r3, r3
1000e56e:	3b01      	subs	r3, #1
1000e570:	b29a      	uxth	r2, r3
1000e572:	687b      	ldr	r3, [r7, #4]
1000e574:	845a      	strh	r2, [r3, #34]	; 0x22
}
1000e576:	46c0      	nop			; (mov r8, r8)
1000e578:	46bd      	mov	sp, r7
1000e57a:	b004      	add	sp, #16
1000e57c:	bd80      	pop	{r7, pc}
1000e57e:	46c0      	nop			; (mov r8, r8)
1000e580:	1001b988 	.word	0x1001b988

1000e584 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
1000e584:	b580      	push	{r7, lr}
1000e586:	b084      	sub	sp, #16
1000e588:	af00      	add	r7, sp, #0
1000e58a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
1000e58c:	687b      	ldr	r3, [r7, #4]
1000e58e:	681b      	ldr	r3, [r3, #0]
1000e590:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
1000e592:	230a      	movs	r3, #10
1000e594:	18fb      	adds	r3, r7, r3
1000e596:	2200      	movs	r2, #0
1000e598:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
1000e59a:	68fb      	ldr	r3, [r7, #12]
1000e59c:	791b      	ldrb	r3, [r3, #4]
1000e59e:	b2da      	uxtb	r2, r3
1000e5a0:	230a      	movs	r3, #10
1000e5a2:	18fb      	adds	r3, r7, r3
1000e5a4:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000e5a6:	687b      	ldr	r3, [r7, #4]
1000e5a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000e5aa:	b29b      	uxth	r3, r3
1000e5ac:	3b01      	subs	r3, #1
1000e5ae:	b29a      	uxth	r2, r3
1000e5b0:	687b      	ldr	r3, [r7, #4]
1000e5b2:	845a      	strh	r2, [r3, #34]	; 0x22
}
1000e5b4:	46c0      	nop			; (mov r8, r8)
1000e5b6:	46bd      	mov	sp, r7
1000e5b8:	b004      	add	sp, #16
1000e5ba:	bd80      	pop	{r7, pc}

1000e5bc <spi_rx0_isr_handler>:

void spi_rx0_isr_handler(void)
{
1000e5bc:	b580      	push	{r7, lr}
1000e5be:	b084      	sub	sp, #16
1000e5c0:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[0];
1000e5c2:	4b76      	ldr	r3, [pc, #472]	; (1000e79c <spi_rx0_isr_handler+0x1e0>)
1000e5c4:	681b      	ldr	r3, [r3, #0]
1000e5c6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000e5c8:	68fb      	ldr	r3, [r7, #12]
1000e5ca:	681b      	ldr	r3, [r3, #0]
1000e5cc:	7b1b      	ldrb	r3, [r3, #12]
1000e5ce:	b2db      	uxtb	r3, r3
1000e5d0:	60bb      	str	r3, [r7, #8]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
1000e5d2:	68fb      	ldr	r3, [r7, #12]
1000e5d4:	681b      	ldr	r3, [r3, #0]
1000e5d6:	2230      	movs	r2, #48	; 0x30
1000e5d8:	5c9b      	ldrb	r3, [r3, r2]
1000e5da:	b2db      	uxtb	r3, r3
1000e5dc:	001a      	movs	r2, r3
1000e5de:	68bb      	ldr	r3, [r7, #8]
1000e5e0:	4013      	ands	r3, r2
1000e5e2:	60bb      	str	r3, [r7, #8]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000e5e4:	68bb      	ldr	r3, [r7, #8]
1000e5e6:	2201      	movs	r2, #1
1000e5e8:	4013      	ands	r3, r2
1000e5ea:	d100      	bne.n	1000e5ee <spi_rx0_isr_handler+0x32>
1000e5ec:	e0d1      	b.n	1000e792 <spi_rx0_isr_handler+0x1d6>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
1000e5ee:	68fb      	ldr	r3, [r7, #12]
1000e5f0:	681b      	ldr	r3, [r3, #0]
1000e5f2:	7b1b      	ldrb	r3, [r3, #12]
1000e5f4:	b2db      	uxtb	r3, r3
1000e5f6:	001a      	movs	r2, r3
1000e5f8:	2320      	movs	r3, #32
1000e5fa:	4013      	ands	r3, r2
1000e5fc:	d041      	beq.n	1000e682 <spi_rx0_isr_handler+0xc6>
			if (module->dir != SPI_DIRECTION_WRITE) {
1000e5fe:	68fb      	ldr	r3, [r7, #12]
1000e600:	79db      	ldrb	r3, [r3, #7]
1000e602:	b2db      	uxtb	r3, r3
1000e604:	2b01      	cmp	r3, #1
1000e606:	d035      	beq.n	1000e674 <spi_rx0_isr_handler+0xb8>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
1000e608:	68fb      	ldr	r3, [r7, #12]
1000e60a:	2228      	movs	r2, #40	; 0x28
1000e60c:	211e      	movs	r1, #30
1000e60e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
1000e610:	68fb      	ldr	r3, [r7, #12]
1000e612:	2203      	movs	r2, #3
1000e614:	71da      	strb	r2, [r3, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
1000e616:	68fb      	ldr	r3, [r7, #12]
1000e618:	681a      	ldr	r2, [r3, #0]
1000e61a:	68fb      	ldr	r3, [r7, #12]
1000e61c:	681b      	ldr	r3, [r3, #0]
1000e61e:	2130      	movs	r1, #48	; 0x30
1000e620:	5c5b      	ldrb	r3, [r3, r1]
1000e622:	b2db      	uxtb	r3, r3
1000e624:	2121      	movs	r1, #33	; 0x21
1000e626:	438b      	bics	r3, r1
1000e628:	b2d9      	uxtb	r1, r3
1000e62a:	2330      	movs	r3, #48	; 0x30
1000e62c:	54d1      	strb	r1, [r2, r3]
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000e62e:	68fb      	ldr	r3, [r7, #12]
1000e630:	2227      	movs	r2, #39	; 0x27
1000e632:	5c9b      	ldrb	r3, [r3, r2]
1000e634:	001a      	movs	r2, r3
1000e636:	2308      	movs	r3, #8
1000e638:	4013      	ands	r3, r2
1000e63a:	d01b      	beq.n	1000e674 <spi_rx0_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
1000e63c:	68fb      	ldr	r3, [r7, #12]
1000e63e:	2226      	movs	r2, #38	; 0x26
1000e640:	5c9b      	ldrb	r3, [r3, r2]
1000e642:	001a      	movs	r2, r3
1000e644:	2308      	movs	r3, #8
1000e646:	4013      	ands	r3, r2

				module->hw->RX_INTERRUPT_MASK.reg &=
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000e648:	d014      	beq.n	1000e674 <spi_rx0_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
1000e64a:	68fb      	ldr	r3, [r7, #12]
1000e64c:	2228      	movs	r2, #40	; 0x28
1000e64e:	211e      	movs	r1, #30
1000e650:	5499      	strb	r1, [r3, r2]
					module->hw->RX_INTERRUPT_MASK.reg &=
1000e652:	68fb      	ldr	r3, [r7, #12]
1000e654:	681a      	ldr	r2, [r3, #0]
1000e656:	68fb      	ldr	r3, [r7, #12]
1000e658:	681b      	ldr	r3, [r3, #0]
1000e65a:	2130      	movs	r1, #48	; 0x30
1000e65c:	5c5b      	ldrb	r3, [r3, r1]
1000e65e:	b2db      	uxtb	r3, r3
1000e660:	2120      	movs	r1, #32
1000e662:	438b      	bics	r3, r1
1000e664:	b2d9      	uxtb	r1, r3
1000e666:	2330      	movs	r3, #48	; 0x30
1000e668:	54d1      	strb	r1, [r2, r3]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
1000e66a:	68fb      	ldr	r3, [r7, #12]
1000e66c:	695b      	ldr	r3, [r3, #20]
1000e66e:	68fa      	ldr	r2, [r7, #12]
1000e670:	0010      	movs	r0, r2
1000e672:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
1000e674:	68fb      	ldr	r3, [r7, #12]
1000e676:	681b      	ldr	r3, [r3, #0]
1000e678:	791b      	ldrb	r3, [r3, #4]
1000e67a:	b2da      	uxtb	r2, r3
1000e67c:	1dbb      	adds	r3, r7, #6
1000e67e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000e680:	e087      	b.n	1000e792 <spi_rx0_isr_handler+0x1d6>
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
1000e682:	68fb      	ldr	r3, [r7, #12]
1000e684:	79db      	ldrb	r3, [r3, #7]
1000e686:	b2db      	uxtb	r3, r3
1000e688:	2b01      	cmp	r3, #1
1000e68a:	d11d      	bne.n	1000e6c8 <spi_rx0_isr_handler+0x10c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
1000e68c:	68fb      	ldr	r3, [r7, #12]
1000e68e:	0018      	movs	r0, r3
1000e690:	4b43      	ldr	r3, [pc, #268]	; (1000e7a0 <spi_rx0_isr_handler+0x1e4>)
1000e692:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
1000e694:	68fb      	ldr	r3, [r7, #12]
1000e696:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000e698:	b29b      	uxth	r3, r3
1000e69a:	2b00      	cmp	r3, #0
1000e69c:	d000      	beq.n	1000e6a0 <spi_rx0_isr_handler+0xe4>
1000e69e:	e078      	b.n	1000e792 <spi_rx0_isr_handler+0x1d6>
					module->hw->RX_INTERRUPT_MASK.reg &=
1000e6a0:	68fb      	ldr	r3, [r7, #12]
1000e6a2:	681a      	ldr	r2, [r3, #0]
1000e6a4:	68fb      	ldr	r3, [r7, #12]
1000e6a6:	681b      	ldr	r3, [r3, #0]
1000e6a8:	2130      	movs	r1, #48	; 0x30
1000e6aa:	5c5b      	ldrb	r3, [r3, r1]
1000e6ac:	b2db      	uxtb	r3, r3
1000e6ae:	2120      	movs	r1, #32
1000e6b0:	438b      	bics	r3, r1
1000e6b2:	b2d9      	uxtb	r1, r3
1000e6b4:	2330      	movs	r3, #48	; 0x30
1000e6b6:	54d1      	strb	r1, [r2, r3]
						~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
1000e6b8:	68fb      	ldr	r3, [r7, #12]
1000e6ba:	2228      	movs	r2, #40	; 0x28
1000e6bc:	2100      	movs	r1, #0
1000e6be:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
1000e6c0:	68fb      	ldr	r3, [r7, #12]
1000e6c2:	2203      	movs	r2, #3
1000e6c4:	71da      	strb	r2, [r3, #7]
					}
				}
			}
		}
	}
}
1000e6c6:	e064      	b.n	1000e792 <spi_rx0_isr_handler+0x1d6>
						//(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
						//(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
					//}
				}
			} else {
				_spi_read(module);
1000e6c8:	68fb      	ldr	r3, [r7, #12]
1000e6ca:	0018      	movs	r0, r3
1000e6cc:	4b35      	ldr	r3, [pc, #212]	; (1000e7a4 <spi_rx0_isr_handler+0x1e8>)
1000e6ce:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
1000e6d0:	68fb      	ldr	r3, [r7, #12]
1000e6d2:	8c1b      	ldrh	r3, [r3, #32]
1000e6d4:	b29b      	uxth	r3, r3
1000e6d6:	2b00      	cmp	r3, #0
1000e6d8:	d15b      	bne.n	1000e792 <spi_rx0_isr_handler+0x1d6>
					if(module->dir == SPI_DIRECTION_READ) {
1000e6da:	68fb      	ldr	r3, [r7, #12]
1000e6dc:	79db      	ldrb	r3, [r3, #7]
1000e6de:	b2db      	uxtb	r3, r3
1000e6e0:	2b00      	cmp	r3, #0
1000e6e2:	d123      	bne.n	1000e72c <spi_rx0_isr_handler+0x170>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000e6e4:	68fb      	ldr	r3, [r7, #12]
1000e6e6:	2227      	movs	r2, #39	; 0x27
1000e6e8:	5c9b      	ldrb	r3, [r3, r2]
1000e6ea:	001a      	movs	r2, r3
1000e6ec:	2302      	movs	r3, #2
1000e6ee:	4013      	ands	r3, r2
1000e6f0:	d04f      	beq.n	1000e792 <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
1000e6f2:	68fb      	ldr	r3, [r7, #12]
1000e6f4:	2226      	movs	r2, #38	; 0x26
1000e6f6:	5c9b      	ldrb	r3, [r3, r2]
1000e6f8:	001a      	movs	r2, r3
1000e6fa:	2302      	movs	r3, #2
1000e6fc:	4013      	ands	r3, r2
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000e6fe:	d048      	beq.n	1000e792 <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
1000e700:	68fb      	ldr	r3, [r7, #12]
1000e702:	2228      	movs	r2, #40	; 0x28
1000e704:	2100      	movs	r1, #0
1000e706:	5499      	strb	r1, [r3, r2]
							module->hw->RX_INTERRUPT_MASK.reg &=
1000e708:	68fb      	ldr	r3, [r7, #12]
1000e70a:	681a      	ldr	r2, [r3, #0]
1000e70c:	68fb      	ldr	r3, [r7, #12]
1000e70e:	681b      	ldr	r3, [r3, #0]
1000e710:	2130      	movs	r1, #48	; 0x30
1000e712:	5c5b      	ldrb	r3, [r3, r1]
1000e714:	b2db      	uxtb	r3, r3
1000e716:	2101      	movs	r1, #1
1000e718:	438b      	bics	r3, r1
1000e71a:	b2d9      	uxtb	r1, r3
1000e71c:	2330      	movs	r3, #48	; 0x30
1000e71e:	54d1      	strb	r1, [r2, r3]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
1000e720:	68fb      	ldr	r3, [r7, #12]
1000e722:	68db      	ldr	r3, [r3, #12]
1000e724:	68fa      	ldr	r2, [r7, #12]
1000e726:	0010      	movs	r0, r2
1000e728:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000e72a:	e032      	b.n	1000e792 <spi_rx0_isr_handler+0x1d6>
							module->status = STATUS_OK;
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
1000e72c:	68fb      	ldr	r3, [r7, #12]
1000e72e:	79db      	ldrb	r3, [r3, #7]
1000e730:	b2db      	uxtb	r3, r3
1000e732:	2b02      	cmp	r3, #2
1000e734:	d12d      	bne.n	1000e792 <spi_rx0_isr_handler+0x1d6>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000e736:	68fb      	ldr	r3, [r7, #12]
1000e738:	2227      	movs	r2, #39	; 0x27
1000e73a:	5c9b      	ldrb	r3, [r3, r2]
1000e73c:	001a      	movs	r2, r3
1000e73e:	2304      	movs	r3, #4
1000e740:	4013      	ands	r3, r2
1000e742:	d026      	beq.n	1000e792 <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000e744:	68fb      	ldr	r3, [r7, #12]
1000e746:	2226      	movs	r2, #38	; 0x26
1000e748:	5c9b      	ldrb	r3, [r3, r2]
1000e74a:	001a      	movs	r2, r3
1000e74c:	2304      	movs	r3, #4
1000e74e:	4013      	ands	r3, r2
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000e750:	d01f      	beq.n	1000e792 <spi_rx0_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
								module->hw->RX_INTERRUPT_MASK.reg &=
1000e752:	68fb      	ldr	r3, [r7, #12]
1000e754:	681a      	ldr	r2, [r3, #0]
1000e756:	68fb      	ldr	r3, [r7, #12]
1000e758:	681b      	ldr	r3, [r3, #0]
1000e75a:	2130      	movs	r1, #48	; 0x30
1000e75c:	5c5b      	ldrb	r3, [r3, r1]
1000e75e:	b2db      	uxtb	r3, r3
1000e760:	2101      	movs	r1, #1
1000e762:	438b      	bics	r3, r1
1000e764:	b2d9      	uxtb	r1, r3
1000e766:	2330      	movs	r3, #48	; 0x30
1000e768:	54d1      	strb	r1, [r2, r3]
										~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
								if (flag_direction_both[0]) {
1000e76a:	4b0f      	ldr	r3, [pc, #60]	; (1000e7a8 <spi_rx0_isr_handler+0x1ec>)
1000e76c:	781b      	ldrb	r3, [r3, #0]
1000e76e:	2b00      	cmp	r3, #0
1000e770:	d00c      	beq.n	1000e78c <spi_rx0_isr_handler+0x1d0>
									module->status = STATUS_OK;
1000e772:	68fb      	ldr	r3, [r7, #12]
1000e774:	2228      	movs	r2, #40	; 0x28
1000e776:	2100      	movs	r1, #0
1000e778:	5499      	strb	r1, [r3, r2]
									flag_direction_both[0] = false;
1000e77a:	4b0b      	ldr	r3, [pc, #44]	; (1000e7a8 <spi_rx0_isr_handler+0x1ec>)
1000e77c:	2200      	movs	r2, #0
1000e77e:	701a      	strb	r2, [r3, #0]
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000e780:	68fb      	ldr	r3, [r7, #12]
1000e782:	691b      	ldr	r3, [r3, #16]
1000e784:	68fa      	ldr	r2, [r7, #12]
1000e786:	0010      	movs	r0, r2
1000e788:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000e78a:	e002      	b.n	1000e792 <spi_rx0_isr_handler+0x1d6>
								if (flag_direction_both[0]) {
									module->status = STATUS_OK;
									flag_direction_both[0] = false;
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
								} else {
									flag_direction_both[0] = true;
1000e78c:	4b06      	ldr	r3, [pc, #24]	; (1000e7a8 <spi_rx0_isr_handler+0x1ec>)
1000e78e:	2201      	movs	r2, #1
1000e790:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000e792:	46c0      	nop			; (mov r8, r8)
1000e794:	46bd      	mov	sp, r7
1000e796:	b004      	add	sp, #16
1000e798:	bd80      	pop	{r7, pc}
1000e79a:	46c0      	nop			; (mov r8, r8)
1000e79c:	1001c380 	.word	0x1001c380
1000e7a0:	1000e585 	.word	0x1000e585
1000e7a4:	1000e509 	.word	0x1000e509
1000e7a8:	1001b98c 	.word	0x1001b98c

1000e7ac <spi_tx0_isr_handler>:

void spi_tx0_isr_handler(void)
{
1000e7ac:	b580      	push	{r7, lr}
1000e7ae:	b082      	sub	sp, #8
1000e7b0:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[0];
1000e7b2:	4b60      	ldr	r3, [pc, #384]	; (1000e934 <spi_tx0_isr_handler+0x188>)
1000e7b4:	681b      	ldr	r3, [r3, #0]
1000e7b6:	607b      	str	r3, [r7, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000e7b8:	687b      	ldr	r3, [r7, #4]
1000e7ba:	681b      	ldr	r3, [r3, #0]
1000e7bc:	7a1b      	ldrb	r3, [r3, #8]
1000e7be:	b2db      	uxtb	r3, r3
1000e7c0:	603b      	str	r3, [r7, #0]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
1000e7c2:	687b      	ldr	r3, [r7, #4]
1000e7c4:	681b      	ldr	r3, [r3, #0]
1000e7c6:	222c      	movs	r2, #44	; 0x2c
1000e7c8:	5c9b      	ldrb	r3, [r3, r2]
1000e7ca:	b2db      	uxtb	r3, r3
1000e7cc:	001a      	movs	r2, r3
1000e7ce:	683b      	ldr	r3, [r7, #0]
1000e7d0:	4013      	ands	r3, r2
1000e7d2:	603b      	str	r3, [r7, #0]

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
1000e7d4:	683b      	ldr	r3, [r7, #0]
1000e7d6:	2201      	movs	r2, #1
1000e7d8:	4013      	ands	r3, r2
1000e7da:	d047      	beq.n	1000e86c <spi_tx0_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000e7dc:	687b      	ldr	r3, [r7, #4]
1000e7de:	795b      	ldrb	r3, [r3, #5]
1000e7e0:	2b01      	cmp	r3, #1
1000e7e2:	d119      	bne.n	1000e818 <spi_tx0_isr_handler+0x6c>
			(module->dir == SPI_DIRECTION_READ)) {
1000e7e4:	687b      	ldr	r3, [r7, #4]
1000e7e6:	79db      	ldrb	r3, [r3, #7]
1000e7e8:	b2db      	uxtb	r3, r3
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000e7ea:	2b00      	cmp	r3, #0
1000e7ec:	d114      	bne.n	1000e818 <spi_tx0_isr_handler+0x6c>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
1000e7ee:	687b      	ldr	r3, [r7, #4]
1000e7f0:	0018      	movs	r0, r3
1000e7f2:	4b51      	ldr	r3, [pc, #324]	; (1000e938 <spi_tx0_isr_handler+0x18c>)
1000e7f4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
1000e7f6:	687b      	ldr	r3, [r7, #4]
1000e7f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000e7fa:	b29b      	uxth	r3, r3
1000e7fc:	2b00      	cmp	r3, #0
1000e7fe:	d10b      	bne.n	1000e818 <spi_tx0_isr_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000e800:	687b      	ldr	r3, [r7, #4]
1000e802:	681a      	ldr	r2, [r3, #0]
1000e804:	687b      	ldr	r3, [r7, #4]
1000e806:	681b      	ldr	r3, [r3, #0]
1000e808:	212c      	movs	r1, #44	; 0x2c
1000e80a:	5c5b      	ldrb	r3, [r3, r1]
1000e80c:	b2db      	uxtb	r3, r3
1000e80e:	2101      	movs	r1, #1
1000e810:	438b      	bics	r3, r1
1000e812:	b2d9      	uxtb	r1, r3
1000e814:	232c      	movs	r3, #44	; 0x2c
1000e816:	54d1      	strb	r1, [r2, r3]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000e818:	687b      	ldr	r3, [r7, #4]
1000e81a:	795b      	ldrb	r3, [r3, #5]
				module->hw->TX_INTERRUPT_MASK.reg &=
					~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
1000e81c:	2b01      	cmp	r3, #1
1000e81e:	d125      	bne.n	1000e86c <spi_tx0_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
1000e820:	687b      	ldr	r3, [r7, #4]
1000e822:	79db      	ldrb	r3, [r3, #7]
1000e824:	b2db      	uxtb	r3, r3
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000e826:	2b00      	cmp	r3, #0
1000e828:	d020      	beq.n	1000e86c <spi_tx0_isr_handler+0xc0>
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
1000e82a:	687b      	ldr	r3, [r7, #4]
1000e82c:	0018      	movs	r0, r3
1000e82e:	4b43      	ldr	r3, [pc, #268]	; (1000e93c <spi_tx0_isr_handler+0x190>)
1000e830:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
1000e832:	687b      	ldr	r3, [r7, #4]
1000e834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000e836:	b29b      	uxth	r3, r3
1000e838:	2b00      	cmp	r3, #0
1000e83a:	d117      	bne.n	1000e86c <spi_tx0_isr_handler+0xc0>
				module->hw->TX_INTERRUPT_MASK.reg &=
1000e83c:	687b      	ldr	r3, [r7, #4]
1000e83e:	681a      	ldr	r2, [r3, #0]
1000e840:	687b      	ldr	r3, [r7, #4]
1000e842:	681b      	ldr	r3, [r3, #0]
1000e844:	212c      	movs	r1, #44	; 0x2c
1000e846:	5c5b      	ldrb	r3, [r3, r1]
1000e848:	b2db      	uxtb	r3, r3
1000e84a:	2101      	movs	r1, #1
1000e84c:	438b      	bics	r3, r1
1000e84e:	b2d9      	uxtb	r1, r3
1000e850:	232c      	movs	r3, #44	; 0x2c
1000e852:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
1000e854:	687b      	ldr	r3, [r7, #4]
1000e856:	681a      	ldr	r2, [r3, #0]
1000e858:	687b      	ldr	r3, [r7, #4]
1000e85a:	681b      	ldr	r3, [r3, #0]
1000e85c:	212c      	movs	r1, #44	; 0x2c
1000e85e:	5c5b      	ldrb	r3, [r3, r1]
1000e860:	b2db      	uxtb	r3, r3
1000e862:	2110      	movs	r1, #16
1000e864:	430b      	orrs	r3, r1
1000e866:	b2d9      	uxtb	r1, r3
1000e868:	232c      	movs	r3, #44	; 0x2c
1000e86a:	54d1      	strb	r1, [r2, r3]
						SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000e86c:	683b      	ldr	r3, [r7, #0]
1000e86e:	2210      	movs	r2, #16
1000e870:	4013      	ands	r3, r2
1000e872:	d05b      	beq.n	1000e92c <spi_tx0_isr_handler+0x180>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000e874:	687b      	ldr	r3, [r7, #4]
1000e876:	79db      	ldrb	r3, [r3, #7]
1000e878:	b2db      	uxtb	r3, r3
1000e87a:	2b01      	cmp	r3, #1
1000e87c:	d123      	bne.n	1000e8c6 <spi_tx0_isr_handler+0x11a>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000e87e:	687b      	ldr	r3, [r7, #4]
1000e880:	2227      	movs	r2, #39	; 0x27
1000e882:	5c9b      	ldrb	r3, [r3, r2]
1000e884:	001a      	movs	r2, r3
1000e886:	2301      	movs	r3, #1
1000e888:	4013      	ands	r3, r2
1000e88a:	d04f      	beq.n	1000e92c <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
1000e88c:	687b      	ldr	r3, [r7, #4]
1000e88e:	2226      	movs	r2, #38	; 0x26
1000e890:	5c9b      	ldrb	r3, [r3, r2]
1000e892:	001a      	movs	r2, r3
1000e894:	2301      	movs	r3, #1
1000e896:	4013      	ands	r3, r2
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000e898:	d048      	beq.n	1000e92c <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
					module->status = STATUS_OK;
1000e89a:	687b      	ldr	r3, [r7, #4]
1000e89c:	2228      	movs	r2, #40	; 0x28
1000e89e:	2100      	movs	r1, #0
1000e8a0:	5499      	strb	r1, [r3, r2]
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
1000e8a2:	687b      	ldr	r3, [r7, #4]
1000e8a4:	681a      	ldr	r2, [r3, #0]
1000e8a6:	687b      	ldr	r3, [r7, #4]
1000e8a8:	681b      	ldr	r3, [r3, #0]
1000e8aa:	212c      	movs	r1, #44	; 0x2c
1000e8ac:	5c5b      	ldrb	r3, [r3, r1]
1000e8ae:	b2db      	uxtb	r3, r3
1000e8b0:	2110      	movs	r1, #16
1000e8b2:	438b      	bics	r3, r1
1000e8b4:	b2d9      	uxtb	r1, r3
1000e8b6:	232c      	movs	r3, #44	; 0x2c
1000e8b8:	54d1      	strb	r1, [r2, r3]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
1000e8ba:	687b      	ldr	r3, [r7, #4]
1000e8bc:	689b      	ldr	r3, [r3, #8]
1000e8be:	687a      	ldr	r2, [r7, #4]
1000e8c0:	0010      	movs	r0, r2
1000e8c2:	4798      	blx	r3
						flag_direction_both[0] = true;
					}
			}
		}
	}
}
1000e8c4:	e032      	b.n	1000e92c <spi_tx0_isr_handler+0x180>
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
1000e8c6:	687b      	ldr	r3, [r7, #4]
1000e8c8:	79db      	ldrb	r3, [r3, #7]
1000e8ca:	b2db      	uxtb	r3, r3
1000e8cc:	2b02      	cmp	r3, #2
1000e8ce:	d12d      	bne.n	1000e92c <spi_tx0_isr_handler+0x180>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000e8d0:	687b      	ldr	r3, [r7, #4]
1000e8d2:	2227      	movs	r2, #39	; 0x27
1000e8d4:	5c9b      	ldrb	r3, [r3, r2]
1000e8d6:	001a      	movs	r2, r3
1000e8d8:	2304      	movs	r3, #4
1000e8da:	4013      	ands	r3, r2
1000e8dc:	d026      	beq.n	1000e92c <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000e8de:	687b      	ldr	r3, [r7, #4]
1000e8e0:	2226      	movs	r2, #38	; 0x26
1000e8e2:	5c9b      	ldrb	r3, [r3, r2]
1000e8e4:	001a      	movs	r2, r3
1000e8e6:	2304      	movs	r3, #4
1000e8e8:	4013      	ands	r3, r2
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000e8ea:	d01f      	beq.n	1000e92c <spi_tx0_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
1000e8ec:	687b      	ldr	r3, [r7, #4]
1000e8ee:	681a      	ldr	r2, [r3, #0]
1000e8f0:	687b      	ldr	r3, [r7, #4]
1000e8f2:	681b      	ldr	r3, [r3, #0]
1000e8f4:	212c      	movs	r1, #44	; 0x2c
1000e8f6:	5c5b      	ldrb	r3, [r3, r1]
1000e8f8:	b2db      	uxtb	r3, r3
1000e8fa:	2110      	movs	r1, #16
1000e8fc:	438b      	bics	r3, r1
1000e8fe:	b2d9      	uxtb	r1, r3
1000e900:	232c      	movs	r3, #44	; 0x2c
1000e902:	54d1      	strb	r1, [r2, r3]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					if (flag_direction_both[0]) {
1000e904:	4b0e      	ldr	r3, [pc, #56]	; (1000e940 <spi_tx0_isr_handler+0x194>)
1000e906:	781b      	ldrb	r3, [r3, #0]
1000e908:	2b00      	cmp	r3, #0
1000e90a:	d00c      	beq.n	1000e926 <spi_tx0_isr_handler+0x17a>
						module->status = STATUS_OK;
1000e90c:	687b      	ldr	r3, [r7, #4]
1000e90e:	2228      	movs	r2, #40	; 0x28
1000e910:	2100      	movs	r1, #0
1000e912:	5499      	strb	r1, [r3, r2]
						flag_direction_both[0] = false;
1000e914:	4b0a      	ldr	r3, [pc, #40]	; (1000e940 <spi_tx0_isr_handler+0x194>)
1000e916:	2200      	movs	r2, #0
1000e918:	701a      	strb	r2, [r3, #0]
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000e91a:	687b      	ldr	r3, [r7, #4]
1000e91c:	691b      	ldr	r3, [r3, #16]
1000e91e:	687a      	ldr	r2, [r7, #4]
1000e920:	0010      	movs	r0, r2
1000e922:	4798      	blx	r3
						flag_direction_both[0] = true;
					}
			}
		}
	}
}
1000e924:	e002      	b.n	1000e92c <spi_tx0_isr_handler+0x180>
					if (flag_direction_both[0]) {
						module->status = STATUS_OK;
						flag_direction_both[0] = false;
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
					} else {
						flag_direction_both[0] = true;
1000e926:	4b06      	ldr	r3, [pc, #24]	; (1000e940 <spi_tx0_isr_handler+0x194>)
1000e928:	2201      	movs	r2, #1
1000e92a:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
1000e92c:	46c0      	nop			; (mov r8, r8)
1000e92e:	46bd      	mov	sp, r7
1000e930:	b002      	add	sp, #8
1000e932:	bd80      	pop	{r7, pc}
1000e934:	1001c380 	.word	0x1001c380
1000e938:	1000e551 	.word	0x1000e551
1000e93c:	1000e4c1 	.word	0x1000e4c1
1000e940:	1001b98c 	.word	0x1001b98c

1000e944 <spi_rx1_isr_handler>:

void spi_rx1_isr_handler(void)
{
1000e944:	b580      	push	{r7, lr}
1000e946:	b084      	sub	sp, #16
1000e948:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[1];
1000e94a:	4b76      	ldr	r3, [pc, #472]	; (1000eb24 <spi_rx1_isr_handler+0x1e0>)
1000e94c:	685b      	ldr	r3, [r3, #4]
1000e94e:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000e950:	68fb      	ldr	r3, [r7, #12]
1000e952:	681b      	ldr	r3, [r3, #0]
1000e954:	7b1b      	ldrb	r3, [r3, #12]
1000e956:	b2db      	uxtb	r3, r3
1000e958:	60bb      	str	r3, [r7, #8]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
1000e95a:	68fb      	ldr	r3, [r7, #12]
1000e95c:	681b      	ldr	r3, [r3, #0]
1000e95e:	2230      	movs	r2, #48	; 0x30
1000e960:	5c9b      	ldrb	r3, [r3, r2]
1000e962:	b2db      	uxtb	r3, r3
1000e964:	001a      	movs	r2, r3
1000e966:	68bb      	ldr	r3, [r7, #8]
1000e968:	4013      	ands	r3, r2
1000e96a:	60bb      	str	r3, [r7, #8]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000e96c:	68bb      	ldr	r3, [r7, #8]
1000e96e:	2201      	movs	r2, #1
1000e970:	4013      	ands	r3, r2
1000e972:	d100      	bne.n	1000e976 <spi_rx1_isr_handler+0x32>
1000e974:	e0d1      	b.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
1000e976:	68fb      	ldr	r3, [r7, #12]
1000e978:	681b      	ldr	r3, [r3, #0]
1000e97a:	7b1b      	ldrb	r3, [r3, #12]
1000e97c:	b2db      	uxtb	r3, r3
1000e97e:	001a      	movs	r2, r3
1000e980:	2320      	movs	r3, #32
1000e982:	4013      	ands	r3, r2
1000e984:	d041      	beq.n	1000ea0a <spi_rx1_isr_handler+0xc6>
			if (module->dir != SPI_DIRECTION_WRITE) {
1000e986:	68fb      	ldr	r3, [r7, #12]
1000e988:	79db      	ldrb	r3, [r3, #7]
1000e98a:	b2db      	uxtb	r3, r3
1000e98c:	2b01      	cmp	r3, #1
1000e98e:	d035      	beq.n	1000e9fc <spi_rx1_isr_handler+0xb8>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
1000e990:	68fb      	ldr	r3, [r7, #12]
1000e992:	2228      	movs	r2, #40	; 0x28
1000e994:	211e      	movs	r1, #30
1000e996:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
1000e998:	68fb      	ldr	r3, [r7, #12]
1000e99a:	2203      	movs	r2, #3
1000e99c:	71da      	strb	r2, [r3, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
1000e99e:	68fb      	ldr	r3, [r7, #12]
1000e9a0:	681a      	ldr	r2, [r3, #0]
1000e9a2:	68fb      	ldr	r3, [r7, #12]
1000e9a4:	681b      	ldr	r3, [r3, #0]
1000e9a6:	2130      	movs	r1, #48	; 0x30
1000e9a8:	5c5b      	ldrb	r3, [r3, r1]
1000e9aa:	b2db      	uxtb	r3, r3
1000e9ac:	2121      	movs	r1, #33	; 0x21
1000e9ae:	438b      	bics	r3, r1
1000e9b0:	b2d9      	uxtb	r1, r3
1000e9b2:	2330      	movs	r3, #48	; 0x30
1000e9b4:	54d1      	strb	r1, [r2, r3]
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000e9b6:	68fb      	ldr	r3, [r7, #12]
1000e9b8:	2227      	movs	r2, #39	; 0x27
1000e9ba:	5c9b      	ldrb	r3, [r3, r2]
1000e9bc:	001a      	movs	r2, r3
1000e9be:	2308      	movs	r3, #8
1000e9c0:	4013      	ands	r3, r2
1000e9c2:	d01b      	beq.n	1000e9fc <spi_rx1_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
1000e9c4:	68fb      	ldr	r3, [r7, #12]
1000e9c6:	2226      	movs	r2, #38	; 0x26
1000e9c8:	5c9b      	ldrb	r3, [r3, r2]
1000e9ca:	001a      	movs	r2, r3
1000e9cc:	2308      	movs	r3, #8
1000e9ce:	4013      	ands	r3, r2

				module->hw->RX_INTERRUPT_MASK.reg &=
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000e9d0:	d014      	beq.n	1000e9fc <spi_rx1_isr_handler+0xb8>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
1000e9d2:	68fb      	ldr	r3, [r7, #12]
1000e9d4:	2228      	movs	r2, #40	; 0x28
1000e9d6:	211e      	movs	r1, #30
1000e9d8:	5499      	strb	r1, [r3, r2]
					module->hw->RX_INTERRUPT_MASK.reg &=
1000e9da:	68fb      	ldr	r3, [r7, #12]
1000e9dc:	681a      	ldr	r2, [r3, #0]
1000e9de:	68fb      	ldr	r3, [r7, #12]
1000e9e0:	681b      	ldr	r3, [r3, #0]
1000e9e2:	2130      	movs	r1, #48	; 0x30
1000e9e4:	5c5b      	ldrb	r3, [r3, r1]
1000e9e6:	b2db      	uxtb	r3, r3
1000e9e8:	2120      	movs	r1, #32
1000e9ea:	438b      	bics	r3, r1
1000e9ec:	b2d9      	uxtb	r1, r3
1000e9ee:	2330      	movs	r3, #48	; 0x30
1000e9f0:	54d1      	strb	r1, [r2, r3]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
1000e9f2:	68fb      	ldr	r3, [r7, #12]
1000e9f4:	695b      	ldr	r3, [r3, #20]
1000e9f6:	68fa      	ldr	r2, [r7, #12]
1000e9f8:	0010      	movs	r0, r2
1000e9fa:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
1000e9fc:	68fb      	ldr	r3, [r7, #12]
1000e9fe:	681b      	ldr	r3, [r3, #0]
1000ea00:	791b      	ldrb	r3, [r3, #4]
1000ea02:	b2da      	uxtb	r2, r3
1000ea04:	1dbb      	adds	r3, r7, #6
1000ea06:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000ea08:	e087      	b.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
1000ea0a:	68fb      	ldr	r3, [r7, #12]
1000ea0c:	79db      	ldrb	r3, [r3, #7]
1000ea0e:	b2db      	uxtb	r3, r3
1000ea10:	2b01      	cmp	r3, #1
1000ea12:	d11d      	bne.n	1000ea50 <spi_rx1_isr_handler+0x10c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
1000ea14:	68fb      	ldr	r3, [r7, #12]
1000ea16:	0018      	movs	r0, r3
1000ea18:	4b43      	ldr	r3, [pc, #268]	; (1000eb28 <spi_rx1_isr_handler+0x1e4>)
1000ea1a:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
1000ea1c:	68fb      	ldr	r3, [r7, #12]
1000ea1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000ea20:	b29b      	uxth	r3, r3
1000ea22:	2b00      	cmp	r3, #0
1000ea24:	d000      	beq.n	1000ea28 <spi_rx1_isr_handler+0xe4>
1000ea26:	e078      	b.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
					module->hw->RX_INTERRUPT_MASK.reg &=
1000ea28:	68fb      	ldr	r3, [r7, #12]
1000ea2a:	681a      	ldr	r2, [r3, #0]
1000ea2c:	68fb      	ldr	r3, [r7, #12]
1000ea2e:	681b      	ldr	r3, [r3, #0]
1000ea30:	2130      	movs	r1, #48	; 0x30
1000ea32:	5c5b      	ldrb	r3, [r3, r1]
1000ea34:	b2db      	uxtb	r3, r3
1000ea36:	2120      	movs	r1, #32
1000ea38:	438b      	bics	r3, r1
1000ea3a:	b2d9      	uxtb	r1, r3
1000ea3c:	2330      	movs	r3, #48	; 0x30
1000ea3e:	54d1      	strb	r1, [r2, r3]
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
1000ea40:	68fb      	ldr	r3, [r7, #12]
1000ea42:	2228      	movs	r2, #40	; 0x28
1000ea44:	2100      	movs	r1, #0
1000ea46:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
1000ea48:	68fb      	ldr	r3, [r7, #12]
1000ea4a:	2203      	movs	r2, #3
1000ea4c:	71da      	strb	r2, [r3, #7]
					}
				}
			}
		}
	}
}
1000ea4e:	e064      	b.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
					module->dir = SPI_DIRECTION_IDLE;
				}
			} else {
				_spi_read(module);
1000ea50:	68fb      	ldr	r3, [r7, #12]
1000ea52:	0018      	movs	r0, r3
1000ea54:	4b35      	ldr	r3, [pc, #212]	; (1000eb2c <spi_rx1_isr_handler+0x1e8>)
1000ea56:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
1000ea58:	68fb      	ldr	r3, [r7, #12]
1000ea5a:	8c1b      	ldrh	r3, [r3, #32]
1000ea5c:	b29b      	uxth	r3, r3
1000ea5e:	2b00      	cmp	r3, #0
1000ea60:	d15b      	bne.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
					if(module->dir == SPI_DIRECTION_READ) {
1000ea62:	68fb      	ldr	r3, [r7, #12]
1000ea64:	79db      	ldrb	r3, [r3, #7]
1000ea66:	b2db      	uxtb	r3, r3
1000ea68:	2b00      	cmp	r3, #0
1000ea6a:	d123      	bne.n	1000eab4 <spi_rx1_isr_handler+0x170>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000ea6c:	68fb      	ldr	r3, [r7, #12]
1000ea6e:	2227      	movs	r2, #39	; 0x27
1000ea70:	5c9b      	ldrb	r3, [r3, r2]
1000ea72:	001a      	movs	r2, r3
1000ea74:	2302      	movs	r3, #2
1000ea76:	4013      	ands	r3, r2
1000ea78:	d04f      	beq.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
1000ea7a:	68fb      	ldr	r3, [r7, #12]
1000ea7c:	2226      	movs	r2, #38	; 0x26
1000ea7e:	5c9b      	ldrb	r3, [r3, r2]
1000ea80:	001a      	movs	r2, r3
1000ea82:	2302      	movs	r3, #2
1000ea84:	4013      	ands	r3, r2
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000ea86:	d048      	beq.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
1000ea88:	68fb      	ldr	r3, [r7, #12]
1000ea8a:	2228      	movs	r2, #40	; 0x28
1000ea8c:	2100      	movs	r1, #0
1000ea8e:	5499      	strb	r1, [r3, r2]
							module->hw->RX_INTERRUPT_MASK.reg &=
1000ea90:	68fb      	ldr	r3, [r7, #12]
1000ea92:	681a      	ldr	r2, [r3, #0]
1000ea94:	68fb      	ldr	r3, [r7, #12]
1000ea96:	681b      	ldr	r3, [r3, #0]
1000ea98:	2130      	movs	r1, #48	; 0x30
1000ea9a:	5c5b      	ldrb	r3, [r3, r1]
1000ea9c:	b2db      	uxtb	r3, r3
1000ea9e:	2101      	movs	r1, #1
1000eaa0:	438b      	bics	r3, r1
1000eaa2:	b2d9      	uxtb	r1, r3
1000eaa4:	2330      	movs	r3, #48	; 0x30
1000eaa6:	54d1      	strb	r1, [r2, r3]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
1000eaa8:	68fb      	ldr	r3, [r7, #12]
1000eaaa:	68db      	ldr	r3, [r3, #12]
1000eaac:	68fa      	ldr	r2, [r7, #12]
1000eaae:	0010      	movs	r0, r2
1000eab0:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000eab2:	e032      	b.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							module->status = STATUS_OK;
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
1000eab4:	68fb      	ldr	r3, [r7, #12]
1000eab6:	79db      	ldrb	r3, [r3, #7]
1000eab8:	b2db      	uxtb	r3, r3
1000eaba:	2b02      	cmp	r3, #2
1000eabc:	d12d      	bne.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000eabe:	68fb      	ldr	r3, [r7, #12]
1000eac0:	2227      	movs	r2, #39	; 0x27
1000eac2:	5c9b      	ldrb	r3, [r3, r2]
1000eac4:	001a      	movs	r2, r3
1000eac6:	2304      	movs	r3, #4
1000eac8:	4013      	ands	r3, r2
1000eaca:	d026      	beq.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000eacc:	68fb      	ldr	r3, [r7, #12]
1000eace:	2226      	movs	r2, #38	; 0x26
1000ead0:	5c9b      	ldrb	r3, [r3, r2]
1000ead2:	001a      	movs	r2, r3
1000ead4:	2304      	movs	r3, #4
1000ead6:	4013      	ands	r3, r2
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000ead8:	d01f      	beq.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
							module->hw->RX_INTERRUPT_MASK.reg &=
1000eada:	68fb      	ldr	r3, [r7, #12]
1000eadc:	681a      	ldr	r2, [r3, #0]
1000eade:	68fb      	ldr	r3, [r7, #12]
1000eae0:	681b      	ldr	r3, [r3, #0]
1000eae2:	2130      	movs	r1, #48	; 0x30
1000eae4:	5c5b      	ldrb	r3, [r3, r1]
1000eae6:	b2db      	uxtb	r3, r3
1000eae8:	2101      	movs	r1, #1
1000eaea:	438b      	bics	r3, r1
1000eaec:	b2d9      	uxtb	r1, r3
1000eaee:	2330      	movs	r3, #48	; 0x30
1000eaf0:	54d1      	strb	r1, [r2, r3]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							if (flag_direction_both[1]) {
1000eaf2:	4b0f      	ldr	r3, [pc, #60]	; (1000eb30 <spi_rx1_isr_handler+0x1ec>)
1000eaf4:	785b      	ldrb	r3, [r3, #1]
1000eaf6:	2b00      	cmp	r3, #0
1000eaf8:	d00c      	beq.n	1000eb14 <spi_rx1_isr_handler+0x1d0>
								module->status = STATUS_OK;
1000eafa:	68fb      	ldr	r3, [r7, #12]
1000eafc:	2228      	movs	r2, #40	; 0x28
1000eafe:	2100      	movs	r1, #0
1000eb00:	5499      	strb	r1, [r3, r2]
								flag_direction_both[1] = false;
1000eb02:	4b0b      	ldr	r3, [pc, #44]	; (1000eb30 <spi_rx1_isr_handler+0x1ec>)
1000eb04:	2200      	movs	r2, #0
1000eb06:	705a      	strb	r2, [r3, #1]
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000eb08:	68fb      	ldr	r3, [r7, #12]
1000eb0a:	691b      	ldr	r3, [r3, #16]
1000eb0c:	68fa      	ldr	r2, [r7, #12]
1000eb0e:	0010      	movs	r0, r2
1000eb10:	4798      	blx	r3
					}
				}
			}
		}
	}
}
1000eb12:	e002      	b.n	1000eb1a <spi_rx1_isr_handler+0x1d6>
							if (flag_direction_both[1]) {
								module->status = STATUS_OK;
								flag_direction_both[1] = false;
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
							} else {
								flag_direction_both[1] = true;
1000eb14:	4b06      	ldr	r3, [pc, #24]	; (1000eb30 <spi_rx1_isr_handler+0x1ec>)
1000eb16:	2201      	movs	r2, #1
1000eb18:	705a      	strb	r2, [r3, #1]
					}
				}
			}
		}
	}
}
1000eb1a:	46c0      	nop			; (mov r8, r8)
1000eb1c:	46bd      	mov	sp, r7
1000eb1e:	b004      	add	sp, #16
1000eb20:	bd80      	pop	{r7, pc}
1000eb22:	46c0      	nop			; (mov r8, r8)
1000eb24:	1001c380 	.word	0x1001c380
1000eb28:	1000e585 	.word	0x1000e585
1000eb2c:	1000e509 	.word	0x1000e509
1000eb30:	1001b98c 	.word	0x1001b98c

1000eb34 <spi_tx1_isr_handler>:

void spi_tx1_isr_handler(void)
{
1000eb34:	b580      	push	{r7, lr}
1000eb36:	b082      	sub	sp, #8
1000eb38:	af00      	add	r7, sp, #0
	struct spi_module *module = _spi_instances[1];
1000eb3a:	4b60      	ldr	r3, [pc, #384]	; (1000ecbc <spi_tx1_isr_handler+0x188>)
1000eb3c:	685b      	ldr	r3, [r3, #4]
1000eb3e:	607b      	str	r3, [r7, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000eb40:	687b      	ldr	r3, [r7, #4]
1000eb42:	681b      	ldr	r3, [r3, #0]
1000eb44:	7a1b      	ldrb	r3, [r3, #8]
1000eb46:	b2db      	uxtb	r3, r3
1000eb48:	603b      	str	r3, [r7, #0]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
1000eb4a:	687b      	ldr	r3, [r7, #4]
1000eb4c:	681b      	ldr	r3, [r3, #0]
1000eb4e:	222c      	movs	r2, #44	; 0x2c
1000eb50:	5c9b      	ldrb	r3, [r3, r2]
1000eb52:	b2db      	uxtb	r3, r3
1000eb54:	001a      	movs	r2, r3
1000eb56:	683b      	ldr	r3, [r7, #0]
1000eb58:	4013      	ands	r3, r2
1000eb5a:	603b      	str	r3, [r7, #0]

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
1000eb5c:	683b      	ldr	r3, [r7, #0]
1000eb5e:	2201      	movs	r2, #1
1000eb60:	4013      	ands	r3, r2
1000eb62:	d047      	beq.n	1000ebf4 <spi_tx1_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000eb64:	687b      	ldr	r3, [r7, #4]
1000eb66:	795b      	ldrb	r3, [r3, #5]
1000eb68:	2b01      	cmp	r3, #1
1000eb6a:	d119      	bne.n	1000eba0 <spi_tx1_isr_handler+0x6c>
		(module->dir == SPI_DIRECTION_READ)) {
1000eb6c:	687b      	ldr	r3, [r7, #4]
1000eb6e:	79db      	ldrb	r3, [r3, #7]
1000eb70:	b2db      	uxtb	r3, r3
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000eb72:	2b00      	cmp	r3, #0
1000eb74:	d114      	bne.n	1000eba0 <spi_tx1_isr_handler+0x6c>
		(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
1000eb76:	687b      	ldr	r3, [r7, #4]
1000eb78:	0018      	movs	r0, r3
1000eb7a:	4b51      	ldr	r3, [pc, #324]	; (1000ecc0 <spi_tx1_isr_handler+0x18c>)
1000eb7c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
1000eb7e:	687b      	ldr	r3, [r7, #4]
1000eb80:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
1000eb82:	b29b      	uxth	r3, r3
1000eb84:	2b00      	cmp	r3, #0
1000eb86:	d10b      	bne.n	1000eba0 <spi_tx1_isr_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000eb88:	687b      	ldr	r3, [r7, #4]
1000eb8a:	681a      	ldr	r2, [r3, #0]
1000eb8c:	687b      	ldr	r3, [r7, #4]
1000eb8e:	681b      	ldr	r3, [r3, #0]
1000eb90:	212c      	movs	r1, #44	; 0x2c
1000eb92:	5c5b      	ldrb	r3, [r3, r1]
1000eb94:	b2db      	uxtb	r3, r3
1000eb96:	2101      	movs	r1, #1
1000eb98:	438b      	bics	r3, r1
1000eb9a:	b2d9      	uxtb	r1, r3
1000eb9c:	232c      	movs	r3, #44	; 0x2c
1000eb9e:	54d1      	strb	r1, [r2, r3]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000eba0:	687b      	ldr	r3, [r7, #4]
1000eba2:	795b      	ldrb	r3, [r3, #5]
				module->hw->TX_INTERRUPT_MASK.reg &=
				~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
1000eba4:	2b01      	cmp	r3, #1
1000eba6:	d125      	bne.n	1000ebf4 <spi_tx1_isr_handler+0xc0>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
1000eba8:	687b      	ldr	r3, [r7, #4]
1000ebaa:	79db      	ldrb	r3, [r3, #7]
1000ebac:	b2db      	uxtb	r3, r3
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000ebae:	2b00      	cmp	r3, #0
1000ebb0:	d020      	beq.n	1000ebf4 <spi_tx1_isr_handler+0xc0>
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
1000ebb2:	687b      	ldr	r3, [r7, #4]
1000ebb4:	0018      	movs	r0, r3
1000ebb6:	4b43      	ldr	r3, [pc, #268]	; (1000ecc4 <spi_tx1_isr_handler+0x190>)
1000ebb8:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
1000ebba:	687b      	ldr	r3, [r7, #4]
1000ebbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
1000ebbe:	b29b      	uxth	r3, r3
1000ebc0:	2b00      	cmp	r3, #0
1000ebc2:	d117      	bne.n	1000ebf4 <spi_tx1_isr_handler+0xc0>
				module->hw->TX_INTERRUPT_MASK.reg &=
1000ebc4:	687b      	ldr	r3, [r7, #4]
1000ebc6:	681a      	ldr	r2, [r3, #0]
1000ebc8:	687b      	ldr	r3, [r7, #4]
1000ebca:	681b      	ldr	r3, [r3, #0]
1000ebcc:	212c      	movs	r1, #44	; 0x2c
1000ebce:	5c5b      	ldrb	r3, [r3, r1]
1000ebd0:	b2db      	uxtb	r3, r3
1000ebd2:	2101      	movs	r1, #1
1000ebd4:	438b      	bics	r3, r1
1000ebd6:	b2d9      	uxtb	r1, r3
1000ebd8:	232c      	movs	r3, #44	; 0x2c
1000ebda:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
1000ebdc:	687b      	ldr	r3, [r7, #4]
1000ebde:	681a      	ldr	r2, [r3, #0]
1000ebe0:	687b      	ldr	r3, [r7, #4]
1000ebe2:	681b      	ldr	r3, [r3, #0]
1000ebe4:	212c      	movs	r1, #44	; 0x2c
1000ebe6:	5c5b      	ldrb	r3, [r3, r1]
1000ebe8:	b2db      	uxtb	r3, r3
1000ebea:	2110      	movs	r1, #16
1000ebec:	430b      	orrs	r3, r1
1000ebee:	b2d9      	uxtb	r1, r3
1000ebf0:	232c      	movs	r3, #44	; 0x2c
1000ebf2:	54d1      	strb	r1, [r2, r3]
				SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ebf4:	683b      	ldr	r3, [r7, #0]
1000ebf6:	2210      	movs	r2, #16
1000ebf8:	4013      	ands	r3, r2
1000ebfa:	d05b      	beq.n	1000ecb4 <spi_tx1_isr_handler+0x180>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000ebfc:	687b      	ldr	r3, [r7, #4]
1000ebfe:	79db      	ldrb	r3, [r3, #7]
1000ec00:	b2db      	uxtb	r3, r3
1000ec02:	2b01      	cmp	r3, #1
1000ec04:	d123      	bne.n	1000ec4e <spi_tx1_isr_handler+0x11a>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000ec06:	687b      	ldr	r3, [r7, #4]
1000ec08:	2227      	movs	r2, #39	; 0x27
1000ec0a:	5c9b      	ldrb	r3, [r3, r2]
1000ec0c:	001a      	movs	r2, r3
1000ec0e:	2301      	movs	r3, #1
1000ec10:	4013      	ands	r3, r2
1000ec12:	d04f      	beq.n	1000ecb4 <spi_tx1_isr_handler+0x180>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
1000ec14:	687b      	ldr	r3, [r7, #4]
1000ec16:	2226      	movs	r2, #38	; 0x26
1000ec18:	5c9b      	ldrb	r3, [r3, r2]
1000ec1a:	001a      	movs	r2, r3
1000ec1c:	2301      	movs	r3, #1
1000ec1e:	4013      	ands	r3, r2
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000ec20:	d048      	beq.n	1000ecb4 <spi_tx1_isr_handler+0x180>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
				module->status = STATUS_OK;
1000ec22:	687b      	ldr	r3, [r7, #4]
1000ec24:	2228      	movs	r2, #40	; 0x28
1000ec26:	2100      	movs	r1, #0
1000ec28:	5499      	strb	r1, [r3, r2]
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000ec2a:	687b      	ldr	r3, [r7, #4]
1000ec2c:	681a      	ldr	r2, [r3, #0]
1000ec2e:	687b      	ldr	r3, [r7, #4]
1000ec30:	681b      	ldr	r3, [r3, #0]
1000ec32:	212c      	movs	r1, #44	; 0x2c
1000ec34:	5c5b      	ldrb	r3, [r3, r1]
1000ec36:	b2db      	uxtb	r3, r3
1000ec38:	2110      	movs	r1, #16
1000ec3a:	438b      	bics	r3, r1
1000ec3c:	b2d9      	uxtb	r1, r3
1000ec3e:	232c      	movs	r3, #44	; 0x2c
1000ec40:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
1000ec42:	687b      	ldr	r3, [r7, #4]
1000ec44:	689b      	ldr	r3, [r3, #8]
1000ec46:	687a      	ldr	r2, [r7, #4]
1000ec48:	0010      	movs	r0, r2
1000ec4a:	4798      	blx	r3
					flag_direction_both[1] = true;
				}
			}
		}
	}
}
1000ec4c:	e032      	b.n	1000ecb4 <spi_tx1_isr_handler+0x180>
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
1000ec4e:	687b      	ldr	r3, [r7, #4]
1000ec50:	79db      	ldrb	r3, [r3, #7]
1000ec52:	b2db      	uxtb	r3, r3
1000ec54:	2b02      	cmp	r3, #2
1000ec56:	d12d      	bne.n	1000ecb4 <spi_tx1_isr_handler+0x180>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000ec58:	687b      	ldr	r3, [r7, #4]
1000ec5a:	2227      	movs	r2, #39	; 0x27
1000ec5c:	5c9b      	ldrb	r3, [r3, r2]
1000ec5e:	001a      	movs	r2, r3
1000ec60:	2304      	movs	r3, #4
1000ec62:	4013      	ands	r3, r2
1000ec64:	d026      	beq.n	1000ecb4 <spi_tx1_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000ec66:	687b      	ldr	r3, [r7, #4]
1000ec68:	2226      	movs	r2, #38	; 0x26
1000ec6a:	5c9b      	ldrb	r3, [r3, r2]
1000ec6c:	001a      	movs	r2, r3
1000ec6e:	2304      	movs	r3, #4
1000ec70:	4013      	ands	r3, r2
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000ec72:	d01f      	beq.n	1000ecb4 <spi_tx1_isr_handler+0x180>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000ec74:	687b      	ldr	r3, [r7, #4]
1000ec76:	681a      	ldr	r2, [r3, #0]
1000ec78:	687b      	ldr	r3, [r7, #4]
1000ec7a:	681b      	ldr	r3, [r3, #0]
1000ec7c:	212c      	movs	r1, #44	; 0x2c
1000ec7e:	5c5b      	ldrb	r3, [r3, r1]
1000ec80:	b2db      	uxtb	r3, r3
1000ec82:	2110      	movs	r1, #16
1000ec84:	438b      	bics	r3, r1
1000ec86:	b2d9      	uxtb	r1, r3
1000ec88:	232c      	movs	r3, #44	; 0x2c
1000ec8a:	54d1      	strb	r1, [r2, r3]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				if (flag_direction_both[1]) {
1000ec8c:	4b0e      	ldr	r3, [pc, #56]	; (1000ecc8 <spi_tx1_isr_handler+0x194>)
1000ec8e:	785b      	ldrb	r3, [r3, #1]
1000ec90:	2b00      	cmp	r3, #0
1000ec92:	d00c      	beq.n	1000ecae <spi_tx1_isr_handler+0x17a>
					module->status = STATUS_OK;
1000ec94:	687b      	ldr	r3, [r7, #4]
1000ec96:	2228      	movs	r2, #40	; 0x28
1000ec98:	2100      	movs	r1, #0
1000ec9a:	5499      	strb	r1, [r3, r2]
					flag_direction_both[1] = false;
1000ec9c:	4b0a      	ldr	r3, [pc, #40]	; (1000ecc8 <spi_tx1_isr_handler+0x194>)
1000ec9e:	2200      	movs	r2, #0
1000eca0:	705a      	strb	r2, [r3, #1]
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000eca2:	687b      	ldr	r3, [r7, #4]
1000eca4:	691b      	ldr	r3, [r3, #16]
1000eca6:	687a      	ldr	r2, [r7, #4]
1000eca8:	0010      	movs	r0, r2
1000ecaa:	4798      	blx	r3
					flag_direction_both[1] = true;
				}
			}
		}
	}
}
1000ecac:	e002      	b.n	1000ecb4 <spi_tx1_isr_handler+0x180>
				if (flag_direction_both[1]) {
					module->status = STATUS_OK;
					flag_direction_both[1] = false;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
				} else {
					flag_direction_both[1] = true;
1000ecae:	4b06      	ldr	r3, [pc, #24]	; (1000ecc8 <spi_tx1_isr_handler+0x194>)
1000ecb0:	2201      	movs	r2, #1
1000ecb2:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}
}
1000ecb4:	46c0      	nop			; (mov r8, r8)
1000ecb6:	46bd      	mov	sp, r7
1000ecb8:	b002      	add	sp, #8
1000ecba:	bd80      	pop	{r7, pc}
1000ecbc:	1001c380 	.word	0x1001c380
1000ecc0:	1000e551 	.word	0x1000e551
1000ecc4:	1000e4c1 	.word	0x1000e4c1
1000ecc8:	1001b98c 	.word	0x1001b98c

1000eccc <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
1000eccc:	b580      	push	{r7, lr}
1000ecce:	b084      	sub	sp, #16
1000ecd0:	af00      	add	r7, sp, #0
1000ecd2:	60f8      	str	r0, [r7, #12]
1000ecd4:	60b9      	str	r1, [r7, #8]
1000ecd6:	1dfb      	adds	r3, r7, #7
1000ecd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000ecda:	1dfb      	adds	r3, r7, #7
1000ecdc:	781a      	ldrb	r2, [r3, #0]
1000ecde:	68fb      	ldr	r3, [r7, #12]
1000ece0:	3202      	adds	r2, #2
1000ece2:	0092      	lsls	r2, r2, #2
1000ece4:	68b9      	ldr	r1, [r7, #8]
1000ece6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
1000ece8:	68fb      	ldr	r3, [r7, #12]
1000ecea:	2226      	movs	r2, #38	; 0x26
1000ecec:	5c9b      	ldrb	r3, [r3, r2]
1000ecee:	b25a      	sxtb	r2, r3
1000ecf0:	1dfb      	adds	r3, r7, #7
1000ecf2:	781b      	ldrb	r3, [r3, #0]
1000ecf4:	2101      	movs	r1, #1
1000ecf6:	4099      	lsls	r1, r3
1000ecf8:	000b      	movs	r3, r1
1000ecfa:	b25b      	sxtb	r3, r3
1000ecfc:	4313      	orrs	r3, r2
1000ecfe:	b25b      	sxtb	r3, r3
1000ed00:	b2d9      	uxtb	r1, r3
1000ed02:	68fb      	ldr	r3, [r7, #12]
1000ed04:	2226      	movs	r2, #38	; 0x26
1000ed06:	5499      	strb	r1, [r3, r2]
}
1000ed08:	46c0      	nop			; (mov r8, r8)
1000ed0a:	46bd      	mov	sp, r7
1000ed0c:	b004      	add	sp, #16
1000ed0e:	bd80      	pop	{r7, pc}

1000ed10 <spi_enable_callback>:
 * \param[in]  module         Pointer to SPI software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void spi_enable_callback(struct spi_module *const module,
		enum spi_callback callback_type)
{
1000ed10:	b580      	push	{r7, lr}
1000ed12:	b082      	sub	sp, #8
1000ed14:	af00      	add	r7, sp, #0
1000ed16:	6078      	str	r0, [r7, #4]
1000ed18:	000a      	movs	r2, r1
1000ed1a:	1cfb      	adds	r3, r7, #3
1000ed1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
1000ed1e:	687b      	ldr	r3, [r7, #4]
1000ed20:	2227      	movs	r2, #39	; 0x27
1000ed22:	5c9b      	ldrb	r3, [r3, r2]
1000ed24:	b25a      	sxtb	r2, r3
1000ed26:	1cfb      	adds	r3, r7, #3
1000ed28:	781b      	ldrb	r3, [r3, #0]
1000ed2a:	2101      	movs	r1, #1
1000ed2c:	4099      	lsls	r1, r3
1000ed2e:	000b      	movs	r3, r1
1000ed30:	b25b      	sxtb	r3, r3
1000ed32:	4313      	orrs	r3, r2
1000ed34:	b25b      	sxtb	r3, r3
1000ed36:	b2d9      	uxtb	r1, r3
1000ed38:	687b      	ldr	r3, [r7, #4]
1000ed3a:	2227      	movs	r2, #39	; 0x27
1000ed3c:	5499      	strb	r1, [r3, r2]
}
1000ed3e:	46c0      	nop			; (mov r8, r8)
1000ed40:	46bd      	mov	sp, r7
1000ed42:	b002      	add	sp, #8
1000ed44:	bd80      	pop	{r7, pc}
1000ed46:	46c0      	nop			; (mov r8, r8)

1000ed48 <_spi_transceive_buffer>:
static void _spi_transceive_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000ed48:	b580      	push	{r7, lr}
1000ed4a:	b086      	sub	sp, #24
1000ed4c:	af00      	add	r7, sp, #0
1000ed4e:	60f8      	str	r0, [r7, #12]
1000ed50:	60b9      	str	r1, [r7, #8]
1000ed52:	607a      	str	r2, [r7, #4]
1000ed54:	001a      	movs	r2, r3
1000ed56:	1cbb      	adds	r3, r7, #2
1000ed58:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
1000ed5a:	68fb      	ldr	r3, [r7, #12]
1000ed5c:	1cba      	adds	r2, r7, #2
1000ed5e:	8812      	ldrh	r2, [r2, #0]
1000ed60:	849a      	strh	r2, [r3, #36]	; 0x24
	module->remaining_rx_buffer_length = length;
1000ed62:	68fb      	ldr	r3, [r7, #12]
1000ed64:	1cba      	adds	r2, r7, #2
1000ed66:	8812      	ldrh	r2, [r2, #0]
1000ed68:	841a      	strh	r2, [r3, #32]
	module->rx_buffer_ptr = rx_data;
1000ed6a:	68fb      	ldr	r3, [r7, #12]
1000ed6c:	687a      	ldr	r2, [r7, #4]
1000ed6e:	619a      	str	r2, [r3, #24]
	module->tx_buffer_ptr = tx_data;
1000ed70:	68fb      	ldr	r3, [r7, #12]
1000ed72:	68ba      	ldr	r2, [r7, #8]
1000ed74:	61da      	str	r2, [r3, #28]
	module->status = STATUS_BUSY;
1000ed76:	68fb      	ldr	r3, [r7, #12]
1000ed78:	2228      	movs	r2, #40	; 0x28
1000ed7a:	2105      	movs	r1, #5
1000ed7c:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_BOTH;
1000ed7e:	68fb      	ldr	r3, [r7, #12]
1000ed80:	2202      	movs	r2, #2
1000ed82:	71da      	strb	r2, [r3, #7]

	if (module->hw == SPI0) {
1000ed84:	68fb      	ldr	r3, [r7, #12]
1000ed86:	681b      	ldr	r3, [r3, #0]
1000ed88:	4a0e      	ldr	r2, [pc, #56]	; (1000edc4 <_spi_transceive_buffer+0x7c>)
1000ed8a:	4293      	cmp	r3, r2
1000ed8c:	d103      	bne.n	1000ed96 <_spi_transceive_buffer+0x4e>
		flag_direction_both[0] = false;
1000ed8e:	4b0e      	ldr	r3, [pc, #56]	; (1000edc8 <_spi_transceive_buffer+0x80>)
1000ed90:	2200      	movs	r2, #0
1000ed92:	701a      	strb	r2, [r3, #0]
1000ed94:	e007      	b.n	1000eda6 <_spi_transceive_buffer+0x5e>
	} else if (module->hw == SPI1) {
1000ed96:	68fb      	ldr	r3, [r7, #12]
1000ed98:	681b      	ldr	r3, [r3, #0]
1000ed9a:	4a0c      	ldr	r2, [pc, #48]	; (1000edcc <_spi_transceive_buffer+0x84>)
1000ed9c:	4293      	cmp	r3, r2
1000ed9e:	d102      	bne.n	1000eda6 <_spi_transceive_buffer+0x5e>
		flag_direction_both[1] = false;
1000eda0:	4b09      	ldr	r3, [pc, #36]	; (1000edc8 <_spi_transceive_buffer+0x80>)
1000eda2:	2200      	movs	r2, #0
1000eda4:	705a      	strb	r2, [r3, #1]
	}

	/* Get a pointer to the hardware module instance */
	Spi *const hw = module->hw;
1000eda6:	68fb      	ldr	r3, [r7, #12]
1000eda8:	681b      	ldr	r3, [r3, #0]
1000edaa:	617b      	str	r3, [r7, #20]

	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->TX_INTERRUPT_MASK.reg = SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
1000edac:	697b      	ldr	r3, [r7, #20]
1000edae:	222c      	movs	r2, #44	; 0x2c
1000edb0:	2101      	movs	r1, #1
1000edb2:	5499      	strb	r1, [r3, r2]
	hw->RX_INTERRUPT_MASK.reg = SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000edb4:	697b      	ldr	r3, [r7, #20]
1000edb6:	2230      	movs	r2, #48	; 0x30
1000edb8:	2101      	movs	r1, #1
1000edba:	5499      	strb	r1, [r3, r2]
}
1000edbc:	46c0      	nop			; (mov r8, r8)
1000edbe:	46bd      	mov	sp, r7
1000edc0:	b006      	add	sp, #24
1000edc2:	bd80      	pop	{r7, pc}
1000edc4:	40006000 	.word	0x40006000
1000edc8:	1001b98c 	.word	0x1001b98c
1000edcc:	40007000 	.word	0x40007000

1000edd0 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000edd0:	b590      	push	{r4, r7, lr}
1000edd2:	b085      	sub	sp, #20
1000edd4:	af00      	add	r7, sp, #0
1000edd6:	60f8      	str	r0, [r7, #12]
1000edd8:	60b9      	str	r1, [r7, #8]
1000edda:	607a      	str	r2, [r7, #4]
1000eddc:	001a      	movs	r2, r3
1000edde:	1cbb      	adds	r3, r7, #2
1000ede0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000ede2:	1cbb      	adds	r3, r7, #2
1000ede4:	881b      	ldrh	r3, [r3, #0]
1000ede6:	2b00      	cmp	r3, #0
1000ede8:	d101      	bne.n	1000edee <spi_transceive_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
1000edea:	2317      	movs	r3, #23
1000edec:	e00f      	b.n	1000ee0e <spi_transceive_buffer_job+0x3e>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000edee:	68fb      	ldr	r3, [r7, #12]
1000edf0:	2228      	movs	r2, #40	; 0x28
1000edf2:	5c9b      	ldrb	r3, [r3, r2]
1000edf4:	b2db      	uxtb	r3, r3
1000edf6:	2b05      	cmp	r3, #5
1000edf8:	d101      	bne.n	1000edfe <spi_transceive_buffer_job+0x2e>
		return STATUS_BUSY;
1000edfa:	2305      	movs	r3, #5
1000edfc:	e007      	b.n	1000ee0e <spi_transceive_buffer_job+0x3e>
	}
	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
1000edfe:	1cbb      	adds	r3, r7, #2
1000ee00:	881b      	ldrh	r3, [r3, #0]
1000ee02:	687a      	ldr	r2, [r7, #4]
1000ee04:	68b9      	ldr	r1, [r7, #8]
1000ee06:	68f8      	ldr	r0, [r7, #12]
1000ee08:	4c03      	ldr	r4, [pc, #12]	; (1000ee18 <spi_transceive_buffer_job+0x48>)
1000ee0a:	47a0      	blx	r4

	return STATUS_OK;
1000ee0c:	2300      	movs	r3, #0
}
1000ee0e:	0018      	movs	r0, r3
1000ee10:	46bd      	mov	sp, r7
1000ee12:	b005      	add	sp, #20
1000ee14:	bd90      	pop	{r4, r7, pc}
1000ee16:	46c0      	nop			; (mov r8, r8)
1000ee18:	1000ed49 	.word	0x1000ed49

1000ee1c <system_clock_config>:
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
1000ee1c:	b580      	push	{r7, lr}
1000ee1e:	b082      	sub	sp, #8
1000ee20:	af00      	add	r7, sp, #0
1000ee22:	0002      	movs	r2, r0
1000ee24:	1dfb      	adds	r3, r7, #7
1000ee26:	701a      	strb	r2, [r3, #0]
1000ee28:	1dbb      	adds	r3, r7, #6
1000ee2a:	1c0a      	adds	r2, r1, #0
1000ee2c:	701a      	strb	r2, [r3, #0]
	switch (resoure) {
1000ee2e:	1dfb      	adds	r3, r7, #7
1000ee30:	781b      	ldrb	r3, [r3, #0]
1000ee32:	2b01      	cmp	r3, #1
1000ee34:	d00d      	beq.n	1000ee52 <system_clock_config+0x36>
1000ee36:	2b02      	cmp	r3, #2
1000ee38:	d022      	beq.n	1000ee80 <system_clock_config+0x64>
1000ee3a:	2b00      	cmp	r3, #0
1000ee3c:	d12a      	bne.n	1000ee94 <system_clock_config+0x78>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000ee3e:	4b20      	ldr	r3, [pc, #128]	; (1000eec0 <system_clock_config+0xa4>)
1000ee40:	4a1f      	ldr	r2, [pc, #124]	; (1000eec0 <system_clock_config+0xa4>)
1000ee42:	6992      	ldr	r2, [r2, #24]
1000ee44:	210c      	movs	r1, #12
1000ee46:	430a      	orrs	r2, r1
1000ee48:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000ee4a:	4b1e      	ldr	r3, [pc, #120]	; (1000eec4 <system_clock_config+0xa8>)
1000ee4c:	4a1e      	ldr	r2, [pc, #120]	; (1000eec8 <system_clock_config+0xac>)
1000ee4e:	601a      	str	r2, [r3, #0]
			break;
1000ee50:	e022      	b.n	1000ee98 <system_clock_config+0x7c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000ee52:	4b1b      	ldr	r3, [pc, #108]	; (1000eec0 <system_clock_config+0xa4>)
1000ee54:	4a1a      	ldr	r2, [pc, #104]	; (1000eec0 <system_clock_config+0xa4>)
1000ee56:	6992      	ldr	r2, [r2, #24]
1000ee58:	2108      	movs	r1, #8
1000ee5a:	430a      	orrs	r2, r1
1000ee5c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000ee5e:	4b18      	ldr	r3, [pc, #96]	; (1000eec0 <system_clock_config+0xa4>)
1000ee60:	4a17      	ldr	r2, [pc, #92]	; (1000eec0 <system_clock_config+0xa4>)
1000ee62:	6992      	ldr	r2, [r2, #24]
1000ee64:	2104      	movs	r1, #4
1000ee66:	438a      	bics	r2, r1
1000ee68:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000ee6a:	4b18      	ldr	r3, [pc, #96]	; (1000eecc <system_clock_config+0xb0>)
1000ee6c:	4a17      	ldr	r2, [pc, #92]	; (1000eecc <system_clock_config+0xb0>)
1000ee6e:	6852      	ldr	r2, [r2, #4]
1000ee70:	2180      	movs	r1, #128	; 0x80
1000ee72:	0309      	lsls	r1, r1, #12
1000ee74:	430a      	orrs	r2, r1
1000ee76:	605a      	str	r2, [r3, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000ee78:	4b12      	ldr	r3, [pc, #72]	; (1000eec4 <system_clock_config+0xa8>)
1000ee7a:	4a15      	ldr	r2, [pc, #84]	; (1000eed0 <system_clock_config+0xb4>)
1000ee7c:	601a      	str	r2, [r3, #0]
			break;
1000ee7e:	e00b      	b.n	1000ee98 <system_clock_config+0x7c>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000ee80:	4b0f      	ldr	r3, [pc, #60]	; (1000eec0 <system_clock_config+0xa4>)
1000ee82:	4a0f      	ldr	r2, [pc, #60]	; (1000eec0 <system_clock_config+0xa4>)
1000ee84:	6992      	ldr	r2, [r2, #24]
1000ee86:	210c      	movs	r1, #12
1000ee88:	438a      	bics	r2, r1
1000ee8a:	619a      	str	r2, [r3, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000ee8c:	4b0d      	ldr	r3, [pc, #52]	; (1000eec4 <system_clock_config+0xa8>)
1000ee8e:	4a0e      	ldr	r2, [pc, #56]	; (1000eec8 <system_clock_config+0xac>)
1000ee90:	601a      	str	r2, [r3, #0]
			break;
1000ee92:	e001      	b.n	1000ee98 <system_clock_config+0x7c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ee94:	2317      	movs	r3, #23
1000ee96:	e00f      	b.n	1000eeb8 <system_clock_config+0x9c>
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000ee98:	4b09      	ldr	r3, [pc, #36]	; (1000eec0 <system_clock_config+0xa4>)
1000ee9a:	4a09      	ldr	r2, [pc, #36]	; (1000eec0 <system_clock_config+0xa4>)
1000ee9c:	6992      	ldr	r2, [r2, #24]
1000ee9e:	2103      	movs	r1, #3
1000eea0:	438a      	bics	r2, r1
1000eea2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000eea4:	4b06      	ldr	r3, [pc, #24]	; (1000eec0 <system_clock_config+0xa4>)
1000eea6:	4a06      	ldr	r2, [pc, #24]	; (1000eec0 <system_clock_config+0xa4>)
1000eea8:	6991      	ldr	r1, [r2, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);
1000eeaa:	1dba      	adds	r2, r7, #6
1000eeac:	7812      	ldrb	r2, [r2, #0]
1000eeae:	2003      	movs	r0, #3
1000eeb0:	4002      	ands	r2, r0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000eeb2:	430a      	orrs	r2, r1
1000eeb4:	619a      	str	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000eeb6:	2300      	movs	r3, #0
}
1000eeb8:	0018      	movs	r0, r3
1000eeba:	46bd      	mov	sp, r7
1000eebc:	b002      	add	sp, #8
1000eebe:	bd80      	pop	{r7, pc}
1000eec0:	4000b000 	.word	0x4000b000
1000eec4:	1001c388 	.word	0x1001c388
1000eec8:	018cba80 	.word	0x018cba80
1000eecc:	4000f000 	.word	0x4000f000
1000eed0:	001e8480 	.word	0x001e8480

1000eed4 <system_clock_get_value>:
 * Use this function to get system clock value.
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
1000eed4:	b580      	push	{r7, lr}
1000eed6:	af00      	add	r7, sp, #0
	return system_clock_value;
1000eed8:	4b02      	ldr	r3, [pc, #8]	; (1000eee4 <system_clock_get_value+0x10>)
1000eeda:	681b      	ldr	r3, [r3, #0]
}
1000eedc:	0018      	movs	r0, r3
1000eede:	46bd      	mov	sp, r7
1000eee0:	bd80      	pop	{r7, pc}
1000eee2:	46c0      	nop			; (mov r8, r8)
1000eee4:	1001c388 	.word	0x1001c388

1000eee8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000eee8:	b580      	push	{r7, lr}
1000eeea:	b082      	sub	sp, #8
1000eeec:	af00      	add	r7, sp, #0
1000eeee:	0002      	movs	r2, r0
1000eef0:	1dfb      	adds	r3, r7, #7
1000eef2:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000eef4:	1dfb      	adds	r3, r7, #7
1000eef6:	781b      	ldrb	r3, [r3, #0]
1000eef8:	2b35      	cmp	r3, #53	; 0x35
1000eefa:	d900      	bls.n	1000eefe <system_clock_peripheral_enable+0x16>
1000eefc:	e1a9      	b.n	1000f252 <system_clock_peripheral_enable+0x36a>
1000eefe:	009a      	lsls	r2, r3, #2
1000ef00:	4bd7      	ldr	r3, [pc, #860]	; (1000f260 <system_clock_peripheral_enable+0x378>)
1000ef02:	18d3      	adds	r3, r2, r3
1000ef04:	681b      	ldr	r3, [r3, #0]
1000ef06:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef08:	4bd6      	ldr	r3, [pc, #856]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef0a:	4ad6      	ldr	r2, [pc, #856]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef0c:	68d2      	ldr	r2, [r2, #12]
1000ef0e:	2102      	movs	r1, #2
1000ef10:	430a      	orrs	r2, r1
1000ef12:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
1000ef14:	e19f      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef16:	4bd3      	ldr	r3, [pc, #844]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef18:	4ad2      	ldr	r2, [pc, #840]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef1a:	68d2      	ldr	r2, [r2, #12]
1000ef1c:	2104      	movs	r1, #4
1000ef1e:	430a      	orrs	r2, r1
1000ef20:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
1000ef22:	e198      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef24:	4bcf      	ldr	r3, [pc, #828]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef26:	4acf      	ldr	r2, [pc, #828]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef28:	68d2      	ldr	r2, [r2, #12]
1000ef2a:	2108      	movs	r1, #8
1000ef2c:	430a      	orrs	r2, r1
1000ef2e:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
1000ef30:	e191      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef32:	4bcc      	ldr	r3, [pc, #816]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef34:	4acb      	ldr	r2, [pc, #812]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef36:	68d2      	ldr	r2, [r2, #12]
1000ef38:	2110      	movs	r1, #16
1000ef3a:	430a      	orrs	r2, r1
1000ef3c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000ef3e:	e18a      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef40:	4bc8      	ldr	r3, [pc, #800]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef42:	4ac8      	ldr	r2, [pc, #800]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef44:	68d2      	ldr	r2, [r2, #12]
1000ef46:	2120      	movs	r1, #32
1000ef48:	430a      	orrs	r2, r1
1000ef4a:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
1000ef4c:	e183      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef4e:	4bc5      	ldr	r3, [pc, #788]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef50:	4ac4      	ldr	r2, [pc, #784]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef52:	68d2      	ldr	r2, [r2, #12]
1000ef54:	2180      	movs	r1, #128	; 0x80
1000ef56:	430a      	orrs	r2, r1
1000ef58:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000ef5a:	e17c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef5c:	4bc1      	ldr	r3, [pc, #772]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef5e:	4ac1      	ldr	r2, [pc, #772]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef60:	68d2      	ldr	r2, [r2, #12]
1000ef62:	2180      	movs	r1, #128	; 0x80
1000ef64:	0049      	lsls	r1, r1, #1
1000ef66:	430a      	orrs	r2, r1
1000ef68:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000ef6a:	e174      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef6c:	4bbd      	ldr	r3, [pc, #756]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef6e:	4abd      	ldr	r2, [pc, #756]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef70:	68d2      	ldr	r2, [r2, #12]
1000ef72:	2180      	movs	r1, #128	; 0x80
1000ef74:	0109      	lsls	r1, r1, #4
1000ef76:	430a      	orrs	r2, r1
1000ef78:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000ef7a:	e16c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef7c:	4bb9      	ldr	r3, [pc, #740]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef7e:	4ab9      	ldr	r2, [pc, #740]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef80:	68d2      	ldr	r2, [r2, #12]
1000ef82:	2180      	movs	r1, #128	; 0x80
1000ef84:	0149      	lsls	r1, r1, #5
1000ef86:	430a      	orrs	r2, r1
1000ef88:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000ef8a:	e164      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef8c:	4bb5      	ldr	r3, [pc, #724]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef8e:	4ab5      	ldr	r2, [pc, #724]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef90:	68d2      	ldr	r2, [r2, #12]
1000ef92:	2180      	movs	r1, #128	; 0x80
1000ef94:	0189      	lsls	r1, r1, #6
1000ef96:	430a      	orrs	r2, r1
1000ef98:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000ef9a:	e15c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ef9c:	4bb1      	ldr	r3, [pc, #708]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000ef9e:	4ab1      	ldr	r2, [pc, #708]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efa0:	68d2      	ldr	r2, [r2, #12]
1000efa2:	2180      	movs	r1, #128	; 0x80
1000efa4:	01c9      	lsls	r1, r1, #7
1000efa6:	430a      	orrs	r2, r1
1000efa8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000efaa:	e154      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000efac:	4bad      	ldr	r3, [pc, #692]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efae:	4aad      	ldr	r2, [pc, #692]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efb0:	68d2      	ldr	r2, [r2, #12]
1000efb2:	2180      	movs	r1, #128	; 0x80
1000efb4:	0209      	lsls	r1, r1, #8
1000efb6:	430a      	orrs	r2, r1
1000efb8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000efba:	e14c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000efbc:	4ba9      	ldr	r3, [pc, #676]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efbe:	4aa9      	ldr	r2, [pc, #676]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efc0:	68d2      	ldr	r2, [r2, #12]
1000efc2:	2180      	movs	r1, #128	; 0x80
1000efc4:	0249      	lsls	r1, r1, #9
1000efc6:	430a      	orrs	r2, r1
1000efc8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000efca:	e144      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000efcc:	4ba5      	ldr	r3, [pc, #660]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efce:	4aa5      	ldr	r2, [pc, #660]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efd0:	68d2      	ldr	r2, [r2, #12]
1000efd2:	2180      	movs	r1, #128	; 0x80
1000efd4:	0289      	lsls	r1, r1, #10
1000efd6:	430a      	orrs	r2, r1
1000efd8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000efda:	e13c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000efdc:	4ba1      	ldr	r3, [pc, #644]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efde:	4aa1      	ldr	r2, [pc, #644]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efe0:	68d2      	ldr	r2, [r2, #12]
1000efe2:	2180      	movs	r1, #128	; 0x80
1000efe4:	02c9      	lsls	r1, r1, #11
1000efe6:	430a      	orrs	r2, r1
1000efe8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000efea:	e134      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000efec:	4b9d      	ldr	r3, [pc, #628]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000efee:	4a9d      	ldr	r2, [pc, #628]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000eff0:	68d2      	ldr	r2, [r2, #12]
1000eff2:	2180      	movs	r1, #128	; 0x80
1000eff4:	0309      	lsls	r1, r1, #12
1000eff6:	430a      	orrs	r2, r1
1000eff8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000effa:	e12c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000effc:	4b99      	ldr	r3, [pc, #612]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000effe:	4a99      	ldr	r2, [pc, #612]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f000:	68d2      	ldr	r2, [r2, #12]
1000f002:	2180      	movs	r1, #128	; 0x80
1000f004:	0349      	lsls	r1, r1, #13
1000f006:	430a      	orrs	r2, r1
1000f008:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000f00a:	e124      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f00c:	4b95      	ldr	r3, [pc, #596]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f00e:	4a95      	ldr	r2, [pc, #596]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f010:	68d2      	ldr	r2, [r2, #12]
1000f012:	2180      	movs	r1, #128	; 0x80
1000f014:	0389      	lsls	r1, r1, #14
1000f016:	430a      	orrs	r2, r1
1000f018:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000f01a:	e11c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f01c:	4b91      	ldr	r3, [pc, #580]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f01e:	4a91      	ldr	r2, [pc, #580]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f020:	68d2      	ldr	r2, [r2, #12]
1000f022:	2180      	movs	r1, #128	; 0x80
1000f024:	03c9      	lsls	r1, r1, #15
1000f026:	430a      	orrs	r2, r1
1000f028:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000f02a:	e114      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f02c:	4b8d      	ldr	r3, [pc, #564]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f02e:	4a8d      	ldr	r2, [pc, #564]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f030:	68d2      	ldr	r2, [r2, #12]
1000f032:	2180      	movs	r1, #128	; 0x80
1000f034:	0409      	lsls	r1, r1, #16
1000f036:	430a      	orrs	r2, r1
1000f038:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000f03a:	e10c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f03c:	4b89      	ldr	r3, [pc, #548]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f03e:	4a89      	ldr	r2, [pc, #548]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f040:	68d2      	ldr	r2, [r2, #12]
1000f042:	2180      	movs	r1, #128	; 0x80
1000f044:	0449      	lsls	r1, r1, #17
1000f046:	430a      	orrs	r2, r1
1000f048:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000f04a:	e104      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f04c:	4b85      	ldr	r3, [pc, #532]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f04e:	4a85      	ldr	r2, [pc, #532]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f050:	68d2      	ldr	r2, [r2, #12]
1000f052:	2180      	movs	r1, #128	; 0x80
1000f054:	0489      	lsls	r1, r1, #18
1000f056:	430a      	orrs	r2, r1
1000f058:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000f05a:	e0fc      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f05c:	4b81      	ldr	r3, [pc, #516]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f05e:	4a81      	ldr	r2, [pc, #516]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f060:	68d2      	ldr	r2, [r2, #12]
1000f062:	2180      	movs	r1, #128	; 0x80
1000f064:	04c9      	lsls	r1, r1, #19
1000f066:	430a      	orrs	r2, r1
1000f068:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000f06a:	e0f4      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f06c:	4b7d      	ldr	r3, [pc, #500]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f06e:	4a7d      	ldr	r2, [pc, #500]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f070:	68d2      	ldr	r2, [r2, #12]
1000f072:	2180      	movs	r1, #128	; 0x80
1000f074:	0509      	lsls	r1, r1, #20
1000f076:	430a      	orrs	r2, r1
1000f078:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000f07a:	e0ec      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f07c:	4b79      	ldr	r3, [pc, #484]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f07e:	4a79      	ldr	r2, [pc, #484]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f080:	68d2      	ldr	r2, [r2, #12]
1000f082:	2180      	movs	r1, #128	; 0x80
1000f084:	0549      	lsls	r1, r1, #21
1000f086:	430a      	orrs	r2, r1
1000f088:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000f08a:	e0e4      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f08c:	4b75      	ldr	r3, [pc, #468]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f08e:	4a75      	ldr	r2, [pc, #468]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f090:	68d2      	ldr	r2, [r2, #12]
1000f092:	2180      	movs	r1, #128	; 0x80
1000f094:	0589      	lsls	r1, r1, #22
1000f096:	430a      	orrs	r2, r1
1000f098:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000f09a:	e0dc      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000f09c:	4b71      	ldr	r3, [pc, #452]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f09e:	4a71      	ldr	r2, [pc, #452]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0a0:	68d2      	ldr	r2, [r2, #12]
1000f0a2:	2180      	movs	r1, #128	; 0x80
1000f0a4:	05c9      	lsls	r1, r1, #23
1000f0a6:	430a      	orrs	r2, r1
1000f0a8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000f0aa:	e0d4      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f0ac:	4b6d      	ldr	r3, [pc, #436]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0ae:	4a6d      	ldr	r2, [pc, #436]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0b0:	6912      	ldr	r2, [r2, #16]
1000f0b2:	2101      	movs	r1, #1
1000f0b4:	430a      	orrs	r2, r1
1000f0b6:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
1000f0b8:	e0cd      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f0ba:	4b6a      	ldr	r3, [pc, #424]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0bc:	4a69      	ldr	r2, [pc, #420]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0be:	6912      	ldr	r2, [r2, #16]
1000f0c0:	2102      	movs	r1, #2
1000f0c2:	430a      	orrs	r2, r1
1000f0c4:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
1000f0c6:	e0c6      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f0c8:	4b66      	ldr	r3, [pc, #408]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0ca:	4a66      	ldr	r2, [pc, #408]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0cc:	6912      	ldr	r2, [r2, #16]
1000f0ce:	2104      	movs	r1, #4
1000f0d0:	430a      	orrs	r2, r1
1000f0d2:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
1000f0d4:	e0bf      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f0d6:	4b63      	ldr	r3, [pc, #396]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0d8:	4a62      	ldr	r2, [pc, #392]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0da:	6912      	ldr	r2, [r2, #16]
1000f0dc:	2108      	movs	r1, #8
1000f0de:	430a      	orrs	r2, r1
1000f0e0:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
1000f0e2:	e0b8      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f0e4:	4b5f      	ldr	r3, [pc, #380]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0e6:	4a5f      	ldr	r2, [pc, #380]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0e8:	6912      	ldr	r2, [r2, #16]
1000f0ea:	2110      	movs	r1, #16
1000f0ec:	430a      	orrs	r2, r1
1000f0ee:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
1000f0f0:	e0b1      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f0f2:	4b5c      	ldr	r3, [pc, #368]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0f4:	4a5b      	ldr	r2, [pc, #364]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f0f6:	6912      	ldr	r2, [r2, #16]
1000f0f8:	2120      	movs	r1, #32
1000f0fa:	430a      	orrs	r2, r1
1000f0fc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
1000f0fe:	e0aa      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f100:	4b58      	ldr	r3, [pc, #352]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f102:	4a58      	ldr	r2, [pc, #352]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f104:	6912      	ldr	r2, [r2, #16]
1000f106:	2140      	movs	r1, #64	; 0x40
1000f108:	430a      	orrs	r2, r1
1000f10a:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
1000f10c:	e0a3      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f10e:	4b55      	ldr	r3, [pc, #340]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f110:	4a54      	ldr	r2, [pc, #336]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f112:	6912      	ldr	r2, [r2, #16]
1000f114:	2180      	movs	r1, #128	; 0x80
1000f116:	430a      	orrs	r2, r1
1000f118:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
1000f11a:	e09c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f11c:	4b51      	ldr	r3, [pc, #324]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f11e:	4a51      	ldr	r2, [pc, #324]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f120:	6912      	ldr	r2, [r2, #16]
1000f122:	2180      	movs	r1, #128	; 0x80
1000f124:	0049      	lsls	r1, r1, #1
1000f126:	430a      	orrs	r2, r1
1000f128:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
1000f12a:	e094      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f12c:	4b4d      	ldr	r3, [pc, #308]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f12e:	4a4d      	ldr	r2, [pc, #308]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f130:	6912      	ldr	r2, [r2, #16]
1000f132:	2180      	movs	r1, #128	; 0x80
1000f134:	0089      	lsls	r1, r1, #2
1000f136:	430a      	orrs	r2, r1
1000f138:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
1000f13a:	e08c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f13c:	4b49      	ldr	r3, [pc, #292]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f13e:	4a49      	ldr	r2, [pc, #292]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f140:	6912      	ldr	r2, [r2, #16]
1000f142:	2180      	movs	r1, #128	; 0x80
1000f144:	00c9      	lsls	r1, r1, #3
1000f146:	430a      	orrs	r2, r1
1000f148:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000f14a:	e084      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f14c:	4b45      	ldr	r3, [pc, #276]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f14e:	4a45      	ldr	r2, [pc, #276]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f150:	6912      	ldr	r2, [r2, #16]
1000f152:	2180      	movs	r1, #128	; 0x80
1000f154:	0109      	lsls	r1, r1, #4
1000f156:	430a      	orrs	r2, r1
1000f158:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000f15a:	e07c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f15c:	4b41      	ldr	r3, [pc, #260]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f15e:	4a41      	ldr	r2, [pc, #260]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f160:	6912      	ldr	r2, [r2, #16]
1000f162:	2180      	movs	r1, #128	; 0x80
1000f164:	0149      	lsls	r1, r1, #5
1000f166:	430a      	orrs	r2, r1
1000f168:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000f16a:	e074      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f16c:	4b3d      	ldr	r3, [pc, #244]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f16e:	4a3d      	ldr	r2, [pc, #244]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f170:	6912      	ldr	r2, [r2, #16]
1000f172:	2180      	movs	r1, #128	; 0x80
1000f174:	0189      	lsls	r1, r1, #6
1000f176:	430a      	orrs	r2, r1
1000f178:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000f17a:	e06c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f17c:	4b39      	ldr	r3, [pc, #228]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f17e:	4a39      	ldr	r2, [pc, #228]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f180:	6912      	ldr	r2, [r2, #16]
1000f182:	2180      	movs	r1, #128	; 0x80
1000f184:	01c9      	lsls	r1, r1, #7
1000f186:	430a      	orrs	r2, r1
1000f188:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
1000f18a:	e064      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f18c:	4b35      	ldr	r3, [pc, #212]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f18e:	4a35      	ldr	r2, [pc, #212]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f190:	6912      	ldr	r2, [r2, #16]
1000f192:	2180      	movs	r1, #128	; 0x80
1000f194:	0209      	lsls	r1, r1, #8
1000f196:	430a      	orrs	r2, r1
1000f198:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000f19a:	e05c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f19c:	4b31      	ldr	r3, [pc, #196]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f19e:	4a31      	ldr	r2, [pc, #196]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1a0:	6912      	ldr	r2, [r2, #16]
1000f1a2:	2180      	movs	r1, #128	; 0x80
1000f1a4:	0249      	lsls	r1, r1, #9
1000f1a6:	430a      	orrs	r2, r1
1000f1a8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000f1aa:	e054      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f1ac:	4b2d      	ldr	r3, [pc, #180]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1ae:	4a2d      	ldr	r2, [pc, #180]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1b0:	6912      	ldr	r2, [r2, #16]
1000f1b2:	2180      	movs	r1, #128	; 0x80
1000f1b4:	0289      	lsls	r1, r1, #10
1000f1b6:	430a      	orrs	r2, r1
1000f1b8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000f1ba:	e04c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f1bc:	4b29      	ldr	r3, [pc, #164]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1be:	4a29      	ldr	r2, [pc, #164]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1c0:	6912      	ldr	r2, [r2, #16]
1000f1c2:	2180      	movs	r1, #128	; 0x80
1000f1c4:	02c9      	lsls	r1, r1, #11
1000f1c6:	430a      	orrs	r2, r1
1000f1c8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000f1ca:	e044      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f1cc:	4b25      	ldr	r3, [pc, #148]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1ce:	4a25      	ldr	r2, [pc, #148]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1d0:	6912      	ldr	r2, [r2, #16]
1000f1d2:	2180      	movs	r1, #128	; 0x80
1000f1d4:	0309      	lsls	r1, r1, #12
1000f1d6:	430a      	orrs	r2, r1
1000f1d8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000f1da:	e03c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f1dc:	4b21      	ldr	r3, [pc, #132]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1de:	4a21      	ldr	r2, [pc, #132]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1e0:	6912      	ldr	r2, [r2, #16]
1000f1e2:	2180      	movs	r1, #128	; 0x80
1000f1e4:	0349      	lsls	r1, r1, #13
1000f1e6:	430a      	orrs	r2, r1
1000f1e8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000f1ea:	e034      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f1ec:	4b1d      	ldr	r3, [pc, #116]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1ee:	4a1d      	ldr	r2, [pc, #116]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1f0:	6912      	ldr	r2, [r2, #16]
1000f1f2:	2180      	movs	r1, #128	; 0x80
1000f1f4:	0389      	lsls	r1, r1, #14
1000f1f6:	430a      	orrs	r2, r1
1000f1f8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000f1fa:	e02c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f1fc:	4b19      	ldr	r3, [pc, #100]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f1fe:	4a19      	ldr	r2, [pc, #100]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f200:	6912      	ldr	r2, [r2, #16]
1000f202:	2180      	movs	r1, #128	; 0x80
1000f204:	03c9      	lsls	r1, r1, #15
1000f206:	430a      	orrs	r2, r1
1000f208:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000f20a:	e024      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000f20c:	4b15      	ldr	r3, [pc, #84]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f20e:	4a15      	ldr	r2, [pc, #84]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f210:	6912      	ldr	r2, [r2, #16]
1000f212:	2180      	movs	r1, #128	; 0x80
1000f214:	0409      	lsls	r1, r1, #16
1000f216:	430a      	orrs	r2, r1
1000f218:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000f21a:	e01c      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000f21c:	4a11      	ldr	r2, [pc, #68]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f21e:	4b11      	ldr	r3, [pc, #68]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f220:	7d1b      	ldrb	r3, [r3, #20]
1000f222:	b2db      	uxtb	r3, r3
1000f224:	2101      	movs	r1, #1
1000f226:	430b      	orrs	r3, r1
1000f228:	b2db      	uxtb	r3, r3
1000f22a:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
1000f22c:	e013      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000f22e:	4a0d      	ldr	r2, [pc, #52]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f230:	4b0c      	ldr	r3, [pc, #48]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f232:	7d1b      	ldrb	r3, [r3, #20]
1000f234:	b2db      	uxtb	r3, r3
1000f236:	2102      	movs	r1, #2
1000f238:	430b      	orrs	r3, r1
1000f23a:	b2db      	uxtb	r3, r3
1000f23c:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
1000f23e:	e00a      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000f240:	4a08      	ldr	r2, [pc, #32]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f242:	4b08      	ldr	r3, [pc, #32]	; (1000f264 <system_clock_peripheral_enable+0x37c>)
1000f244:	7d1b      	ldrb	r3, [r3, #20]
1000f246:	b2db      	uxtb	r3, r3
1000f248:	2104      	movs	r1, #4
1000f24a:	430b      	orrs	r3, r1
1000f24c:	b2db      	uxtb	r3, r3
1000f24e:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
1000f250:	e001      	b.n	1000f256 <system_clock_peripheral_enable+0x36e>

		default:
			return STATUS_ERR_INVALID_ARG;
1000f252:	2317      	movs	r3, #23
1000f254:	e000      	b.n	1000f258 <system_clock_peripheral_enable+0x370>
	}

	return STATUS_OK;
1000f256:	2300      	movs	r3, #0
}
1000f258:	0018      	movs	r0, r3
1000f25a:	46bd      	mov	sp, r7
1000f25c:	b002      	add	sp, #8
1000f25e:	bd80      	pop	{r7, pc}
1000f260:	1001ac88 	.word	0x1001ac88
1000f264:	4000b000 	.word	0x4000b000

1000f268 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000f268:	b580      	push	{r7, lr}
1000f26a:	b082      	sub	sp, #8
1000f26c:	af00      	add	r7, sp, #0
1000f26e:	0002      	movs	r2, r0
1000f270:	1dfb      	adds	r3, r7, #7
1000f272:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000f274:	1dfb      	adds	r3, r7, #7
1000f276:	781b      	ldrb	r3, [r3, #0]
1000f278:	2b35      	cmp	r3, #53	; 0x35
1000f27a:	d900      	bls.n	1000f27e <system_clock_peripheral_disable+0x16>
1000f27c:	e184      	b.n	1000f588 <system_clock_peripheral_disable+0x320>
1000f27e:	009a      	lsls	r2, r3, #2
1000f280:	4bc5      	ldr	r3, [pc, #788]	; (1000f598 <system_clock_peripheral_disable+0x330>)
1000f282:	18d3      	adds	r3, r2, r3
1000f284:	681b      	ldr	r3, [r3, #0]
1000f286:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f288:	4bc4      	ldr	r3, [pc, #784]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f28a:	4ac4      	ldr	r2, [pc, #784]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f28c:	68d2      	ldr	r2, [r2, #12]
1000f28e:	2102      	movs	r1, #2
1000f290:	438a      	bics	r2, r1
1000f292:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
1000f294:	e17a      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f296:	4bc1      	ldr	r3, [pc, #772]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f298:	4ac0      	ldr	r2, [pc, #768]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f29a:	68d2      	ldr	r2, [r2, #12]
1000f29c:	2104      	movs	r1, #4
1000f29e:	438a      	bics	r2, r1
1000f2a0:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
1000f2a2:	e173      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2a4:	4bbd      	ldr	r3, [pc, #756]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2a6:	4abd      	ldr	r2, [pc, #756]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2a8:	68d2      	ldr	r2, [r2, #12]
1000f2aa:	2108      	movs	r1, #8
1000f2ac:	438a      	bics	r2, r1
1000f2ae:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
1000f2b0:	e16c      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2b2:	4bba      	ldr	r3, [pc, #744]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2b4:	4ab9      	ldr	r2, [pc, #740]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2b6:	68d2      	ldr	r2, [r2, #12]
1000f2b8:	2110      	movs	r1, #16
1000f2ba:	438a      	bics	r2, r1
1000f2bc:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000f2be:	e165      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2c0:	4bb6      	ldr	r3, [pc, #728]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2c2:	4ab6      	ldr	r2, [pc, #728]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2c4:	68d2      	ldr	r2, [r2, #12]
1000f2c6:	2120      	movs	r1, #32
1000f2c8:	438a      	bics	r2, r1
1000f2ca:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
1000f2cc:	e15e      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2ce:	4bb3      	ldr	r3, [pc, #716]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2d0:	4ab2      	ldr	r2, [pc, #712]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2d2:	68d2      	ldr	r2, [r2, #12]
1000f2d4:	2180      	movs	r1, #128	; 0x80
1000f2d6:	438a      	bics	r2, r1
1000f2d8:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000f2da:	e157      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2dc:	4baf      	ldr	r3, [pc, #700]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2de:	4aaf      	ldr	r2, [pc, #700]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2e0:	68d2      	ldr	r2, [r2, #12]
1000f2e2:	49af      	ldr	r1, [pc, #700]	; (1000f5a0 <system_clock_peripheral_disable+0x338>)
1000f2e4:	400a      	ands	r2, r1
1000f2e6:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000f2e8:	e150      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2ea:	4bac      	ldr	r3, [pc, #688]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2ec:	4aab      	ldr	r2, [pc, #684]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2ee:	68d2      	ldr	r2, [r2, #12]
1000f2f0:	49ac      	ldr	r1, [pc, #688]	; (1000f5a4 <system_clock_peripheral_disable+0x33c>)
1000f2f2:	400a      	ands	r2, r1
1000f2f4:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000f2f6:	e149      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f2f8:	4ba8      	ldr	r3, [pc, #672]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2fa:	4aa8      	ldr	r2, [pc, #672]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f2fc:	68d2      	ldr	r2, [r2, #12]
1000f2fe:	49aa      	ldr	r1, [pc, #680]	; (1000f5a8 <system_clock_peripheral_disable+0x340>)
1000f300:	400a      	ands	r2, r1
1000f302:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000f304:	e142      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f306:	4ba5      	ldr	r3, [pc, #660]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f308:	4aa4      	ldr	r2, [pc, #656]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f30a:	68d2      	ldr	r2, [r2, #12]
1000f30c:	49a7      	ldr	r1, [pc, #668]	; (1000f5ac <system_clock_peripheral_disable+0x344>)
1000f30e:	400a      	ands	r2, r1
1000f310:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000f312:	e13b      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f314:	4ba1      	ldr	r3, [pc, #644]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f316:	4aa1      	ldr	r2, [pc, #644]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f318:	68d2      	ldr	r2, [r2, #12]
1000f31a:	49a5      	ldr	r1, [pc, #660]	; (1000f5b0 <system_clock_peripheral_disable+0x348>)
1000f31c:	400a      	ands	r2, r1
1000f31e:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000f320:	e134      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f322:	4b9e      	ldr	r3, [pc, #632]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f324:	4a9d      	ldr	r2, [pc, #628]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f326:	68d2      	ldr	r2, [r2, #12]
1000f328:	49a2      	ldr	r1, [pc, #648]	; (1000f5b4 <system_clock_peripheral_disable+0x34c>)
1000f32a:	400a      	ands	r2, r1
1000f32c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000f32e:	e12d      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f330:	4b9a      	ldr	r3, [pc, #616]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f332:	4a9a      	ldr	r2, [pc, #616]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f334:	68d2      	ldr	r2, [r2, #12]
1000f336:	49a0      	ldr	r1, [pc, #640]	; (1000f5b8 <system_clock_peripheral_disable+0x350>)
1000f338:	400a      	ands	r2, r1
1000f33a:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000f33c:	e126      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f33e:	4b97      	ldr	r3, [pc, #604]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f340:	4a96      	ldr	r2, [pc, #600]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f342:	68d2      	ldr	r2, [r2, #12]
1000f344:	499d      	ldr	r1, [pc, #628]	; (1000f5bc <system_clock_peripheral_disable+0x354>)
1000f346:	400a      	ands	r2, r1
1000f348:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000f34a:	e11f      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f34c:	4b93      	ldr	r3, [pc, #588]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f34e:	4a93      	ldr	r2, [pc, #588]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f350:	68d2      	ldr	r2, [r2, #12]
1000f352:	499b      	ldr	r1, [pc, #620]	; (1000f5c0 <system_clock_peripheral_disable+0x358>)
1000f354:	400a      	ands	r2, r1
1000f356:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000f358:	e118      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f35a:	4b90      	ldr	r3, [pc, #576]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f35c:	4a8f      	ldr	r2, [pc, #572]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f35e:	68d2      	ldr	r2, [r2, #12]
1000f360:	4998      	ldr	r1, [pc, #608]	; (1000f5c4 <system_clock_peripheral_disable+0x35c>)
1000f362:	400a      	ands	r2, r1
1000f364:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000f366:	e111      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f368:	4b8c      	ldr	r3, [pc, #560]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f36a:	4a8c      	ldr	r2, [pc, #560]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f36c:	68d2      	ldr	r2, [r2, #12]
1000f36e:	4996      	ldr	r1, [pc, #600]	; (1000f5c8 <system_clock_peripheral_disable+0x360>)
1000f370:	400a      	ands	r2, r1
1000f372:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000f374:	e10a      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f376:	4b89      	ldr	r3, [pc, #548]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f378:	4a88      	ldr	r2, [pc, #544]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f37a:	68d2      	ldr	r2, [r2, #12]
1000f37c:	4993      	ldr	r1, [pc, #588]	; (1000f5cc <system_clock_peripheral_disable+0x364>)
1000f37e:	400a      	ands	r2, r1
1000f380:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000f382:	e103      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f384:	4b85      	ldr	r3, [pc, #532]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f386:	4a85      	ldr	r2, [pc, #532]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f388:	68d2      	ldr	r2, [r2, #12]
1000f38a:	4991      	ldr	r1, [pc, #580]	; (1000f5d0 <system_clock_peripheral_disable+0x368>)
1000f38c:	400a      	ands	r2, r1
1000f38e:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000f390:	e0fc      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f392:	4b82      	ldr	r3, [pc, #520]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f394:	4a81      	ldr	r2, [pc, #516]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f396:	68d2      	ldr	r2, [r2, #12]
1000f398:	498e      	ldr	r1, [pc, #568]	; (1000f5d4 <system_clock_peripheral_disable+0x36c>)
1000f39a:	400a      	ands	r2, r1
1000f39c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000f39e:	e0f5      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3a0:	4b7e      	ldr	r3, [pc, #504]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3a2:	4a7e      	ldr	r2, [pc, #504]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3a4:	68d2      	ldr	r2, [r2, #12]
1000f3a6:	498c      	ldr	r1, [pc, #560]	; (1000f5d8 <system_clock_peripheral_disable+0x370>)
1000f3a8:	400a      	ands	r2, r1
1000f3aa:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000f3ac:	e0ee      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3ae:	4b7b      	ldr	r3, [pc, #492]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3b0:	4a7a      	ldr	r2, [pc, #488]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3b2:	68d2      	ldr	r2, [r2, #12]
1000f3b4:	4989      	ldr	r1, [pc, #548]	; (1000f5dc <system_clock_peripheral_disable+0x374>)
1000f3b6:	400a      	ands	r2, r1
1000f3b8:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000f3ba:	e0e7      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3bc:	4b77      	ldr	r3, [pc, #476]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3be:	4a77      	ldr	r2, [pc, #476]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3c0:	68d2      	ldr	r2, [r2, #12]
1000f3c2:	4987      	ldr	r1, [pc, #540]	; (1000f5e0 <system_clock_peripheral_disable+0x378>)
1000f3c4:	400a      	ands	r2, r1
1000f3c6:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000f3c8:	e0e0      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3ca:	4b74      	ldr	r3, [pc, #464]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3cc:	4a73      	ldr	r2, [pc, #460]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3ce:	68d2      	ldr	r2, [r2, #12]
1000f3d0:	4984      	ldr	r1, [pc, #528]	; (1000f5e4 <system_clock_peripheral_disable+0x37c>)
1000f3d2:	400a      	ands	r2, r1
1000f3d4:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000f3d6:	e0d9      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3d8:	4b70      	ldr	r3, [pc, #448]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3da:	4a70      	ldr	r2, [pc, #448]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3dc:	68d2      	ldr	r2, [r2, #12]
1000f3de:	4982      	ldr	r1, [pc, #520]	; (1000f5e8 <system_clock_peripheral_disable+0x380>)
1000f3e0:	400a      	ands	r2, r1
1000f3e2:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000f3e4:	e0d2      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3e6:	4b6d      	ldr	r3, [pc, #436]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3e8:	4a6c      	ldr	r2, [pc, #432]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3ea:	68d2      	ldr	r2, [r2, #12]
1000f3ec:	497f      	ldr	r1, [pc, #508]	; (1000f5ec <system_clock_peripheral_disable+0x384>)
1000f3ee:	400a      	ands	r2, r1
1000f3f0:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000f3f2:	e0cb      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000f3f4:	4b69      	ldr	r3, [pc, #420]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3f6:	4a69      	ldr	r2, [pc, #420]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f3f8:	68d2      	ldr	r2, [r2, #12]
1000f3fa:	497d      	ldr	r1, [pc, #500]	; (1000f5f0 <system_clock_peripheral_disable+0x388>)
1000f3fc:	400a      	ands	r2, r1
1000f3fe:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000f400:	e0c4      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f402:	4b66      	ldr	r3, [pc, #408]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f404:	4a65      	ldr	r2, [pc, #404]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f406:	6912      	ldr	r2, [r2, #16]
1000f408:	2101      	movs	r1, #1
1000f40a:	438a      	bics	r2, r1
1000f40c:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
1000f40e:	e0bd      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f410:	4b62      	ldr	r3, [pc, #392]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f412:	4a62      	ldr	r2, [pc, #392]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f414:	6912      	ldr	r2, [r2, #16]
1000f416:	2102      	movs	r1, #2
1000f418:	438a      	bics	r2, r1
1000f41a:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
1000f41c:	e0b6      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f41e:	4b5f      	ldr	r3, [pc, #380]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f420:	4a5e      	ldr	r2, [pc, #376]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f422:	6912      	ldr	r2, [r2, #16]
1000f424:	2104      	movs	r1, #4
1000f426:	438a      	bics	r2, r1
1000f428:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
1000f42a:	e0af      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f42c:	4b5b      	ldr	r3, [pc, #364]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f42e:	4a5b      	ldr	r2, [pc, #364]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f430:	6912      	ldr	r2, [r2, #16]
1000f432:	2108      	movs	r1, #8
1000f434:	438a      	bics	r2, r1
1000f436:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
1000f438:	e0a8      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f43a:	4b58      	ldr	r3, [pc, #352]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f43c:	4a57      	ldr	r2, [pc, #348]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f43e:	6912      	ldr	r2, [r2, #16]
1000f440:	2110      	movs	r1, #16
1000f442:	438a      	bics	r2, r1
1000f444:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
1000f446:	e0a1      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f448:	4b54      	ldr	r3, [pc, #336]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f44a:	4a54      	ldr	r2, [pc, #336]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f44c:	6912      	ldr	r2, [r2, #16]
1000f44e:	2120      	movs	r1, #32
1000f450:	438a      	bics	r2, r1
1000f452:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
1000f454:	e09a      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f456:	4b51      	ldr	r3, [pc, #324]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f458:	4a50      	ldr	r2, [pc, #320]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f45a:	6912      	ldr	r2, [r2, #16]
1000f45c:	2140      	movs	r1, #64	; 0x40
1000f45e:	438a      	bics	r2, r1
1000f460:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
1000f462:	e093      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f464:	4b4d      	ldr	r3, [pc, #308]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f466:	4a4d      	ldr	r2, [pc, #308]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f468:	6912      	ldr	r2, [r2, #16]
1000f46a:	2180      	movs	r1, #128	; 0x80
1000f46c:	438a      	bics	r2, r1
1000f46e:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
1000f470:	e08c      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f472:	4b4a      	ldr	r3, [pc, #296]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f474:	4a49      	ldr	r2, [pc, #292]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f476:	6912      	ldr	r2, [r2, #16]
1000f478:	4949      	ldr	r1, [pc, #292]	; (1000f5a0 <system_clock_peripheral_disable+0x338>)
1000f47a:	400a      	ands	r2, r1
1000f47c:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
1000f47e:	e085      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f480:	4b46      	ldr	r3, [pc, #280]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f482:	4a46      	ldr	r2, [pc, #280]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f484:	6912      	ldr	r2, [r2, #16]
1000f486:	495b      	ldr	r1, [pc, #364]	; (1000f5f4 <system_clock_peripheral_disable+0x38c>)
1000f488:	400a      	ands	r2, r1
1000f48a:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
1000f48c:	e07e      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f48e:	4b43      	ldr	r3, [pc, #268]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f490:	4a42      	ldr	r2, [pc, #264]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f492:	6912      	ldr	r2, [r2, #16]
1000f494:	4958      	ldr	r1, [pc, #352]	; (1000f5f8 <system_clock_peripheral_disable+0x390>)
1000f496:	400a      	ands	r2, r1
1000f498:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000f49a:	e077      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f49c:	4b3f      	ldr	r3, [pc, #252]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f49e:	4a3f      	ldr	r2, [pc, #252]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4a0:	6912      	ldr	r2, [r2, #16]
1000f4a2:	4940      	ldr	r1, [pc, #256]	; (1000f5a4 <system_clock_peripheral_disable+0x33c>)
1000f4a4:	400a      	ands	r2, r1
1000f4a6:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000f4a8:	e070      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4aa:	4b3c      	ldr	r3, [pc, #240]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4ac:	4a3b      	ldr	r2, [pc, #236]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4ae:	6912      	ldr	r2, [r2, #16]
1000f4b0:	493d      	ldr	r1, [pc, #244]	; (1000f5a8 <system_clock_peripheral_disable+0x340>)
1000f4b2:	400a      	ands	r2, r1
1000f4b4:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000f4b6:	e069      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4b8:	4b38      	ldr	r3, [pc, #224]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4ba:	4a38      	ldr	r2, [pc, #224]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4bc:	6912      	ldr	r2, [r2, #16]
1000f4be:	493b      	ldr	r1, [pc, #236]	; (1000f5ac <system_clock_peripheral_disable+0x344>)
1000f4c0:	400a      	ands	r2, r1
1000f4c2:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000f4c4:	e062      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4c6:	4b35      	ldr	r3, [pc, #212]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4c8:	4a34      	ldr	r2, [pc, #208]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4ca:	6912      	ldr	r2, [r2, #16]
1000f4cc:	4938      	ldr	r1, [pc, #224]	; (1000f5b0 <system_clock_peripheral_disable+0x348>)
1000f4ce:	400a      	ands	r2, r1
1000f4d0:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
1000f4d2:	e05b      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4d4:	4b31      	ldr	r3, [pc, #196]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4d6:	4a31      	ldr	r2, [pc, #196]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4d8:	6912      	ldr	r2, [r2, #16]
1000f4da:	4936      	ldr	r1, [pc, #216]	; (1000f5b4 <system_clock_peripheral_disable+0x34c>)
1000f4dc:	400a      	ands	r2, r1
1000f4de:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000f4e0:	e054      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4e2:	4b2e      	ldr	r3, [pc, #184]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4e4:	4a2d      	ldr	r2, [pc, #180]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4e6:	6912      	ldr	r2, [r2, #16]
1000f4e8:	4933      	ldr	r1, [pc, #204]	; (1000f5b8 <system_clock_peripheral_disable+0x350>)
1000f4ea:	400a      	ands	r2, r1
1000f4ec:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000f4ee:	e04d      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4f0:	4b2a      	ldr	r3, [pc, #168]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4f2:	4a2a      	ldr	r2, [pc, #168]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f4f4:	6912      	ldr	r2, [r2, #16]
1000f4f6:	4931      	ldr	r1, [pc, #196]	; (1000f5bc <system_clock_peripheral_disable+0x354>)
1000f4f8:	400a      	ands	r2, r1
1000f4fa:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000f4fc:	e046      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f4fe:	4b27      	ldr	r3, [pc, #156]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f500:	4a26      	ldr	r2, [pc, #152]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f502:	6912      	ldr	r2, [r2, #16]
1000f504:	492e      	ldr	r1, [pc, #184]	; (1000f5c0 <system_clock_peripheral_disable+0x358>)
1000f506:	400a      	ands	r2, r1
1000f508:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000f50a:	e03f      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f50c:	4b23      	ldr	r3, [pc, #140]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f50e:	4a23      	ldr	r2, [pc, #140]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f510:	6912      	ldr	r2, [r2, #16]
1000f512:	492c      	ldr	r1, [pc, #176]	; (1000f5c4 <system_clock_peripheral_disable+0x35c>)
1000f514:	400a      	ands	r2, r1
1000f516:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000f518:	e038      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f51a:	4b20      	ldr	r3, [pc, #128]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f51c:	4a1f      	ldr	r2, [pc, #124]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f51e:	6912      	ldr	r2, [r2, #16]
1000f520:	4929      	ldr	r1, [pc, #164]	; (1000f5c8 <system_clock_peripheral_disable+0x360>)
1000f522:	400a      	ands	r2, r1
1000f524:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000f526:	e031      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f528:	4b1c      	ldr	r3, [pc, #112]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f52a:	4a1c      	ldr	r2, [pc, #112]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f52c:	6912      	ldr	r2, [r2, #16]
1000f52e:	4927      	ldr	r1, [pc, #156]	; (1000f5cc <system_clock_peripheral_disable+0x364>)
1000f530:	400a      	ands	r2, r1
1000f532:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000f534:	e02a      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f536:	4b19      	ldr	r3, [pc, #100]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f538:	4a18      	ldr	r2, [pc, #96]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f53a:	6912      	ldr	r2, [r2, #16]
1000f53c:	4924      	ldr	r1, [pc, #144]	; (1000f5d0 <system_clock_peripheral_disable+0x368>)
1000f53e:	400a      	ands	r2, r1
1000f540:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000f542:	e023      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000f544:	4b15      	ldr	r3, [pc, #84]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f546:	4a15      	ldr	r2, [pc, #84]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f548:	6912      	ldr	r2, [r2, #16]
1000f54a:	4922      	ldr	r1, [pc, #136]	; (1000f5d4 <system_clock_peripheral_disable+0x36c>)
1000f54c:	400a      	ands	r2, r1
1000f54e:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000f550:	e01c      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
1000f552:	4a12      	ldr	r2, [pc, #72]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f554:	4b11      	ldr	r3, [pc, #68]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f556:	7d1b      	ldrb	r3, [r3, #20]
1000f558:	b2db      	uxtb	r3, r3
1000f55a:	2101      	movs	r1, #1
1000f55c:	438b      	bics	r3, r1
1000f55e:	b2db      	uxtb	r3, r3
1000f560:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
1000f562:	e013      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
1000f564:	4a0d      	ldr	r2, [pc, #52]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f566:	4b0d      	ldr	r3, [pc, #52]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f568:	7d1b      	ldrb	r3, [r3, #20]
1000f56a:	b2db      	uxtb	r3, r3
1000f56c:	2102      	movs	r1, #2
1000f56e:	438b      	bics	r3, r1
1000f570:	b2db      	uxtb	r3, r3
1000f572:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
1000f574:	e00a      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg &= \
1000f576:	4a09      	ldr	r2, [pc, #36]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f578:	4b08      	ldr	r3, [pc, #32]	; (1000f59c <system_clock_peripheral_disable+0x334>)
1000f57a:	7d1b      	ldrb	r3, [r3, #20]
1000f57c:	b2db      	uxtb	r3, r3
1000f57e:	2104      	movs	r1, #4
1000f580:	438b      	bics	r3, r1
1000f582:	b2db      	uxtb	r3, r3
1000f584:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
1000f586:	e001      	b.n	1000f58c <system_clock_peripheral_disable+0x324>

		default:
			return STATUS_ERR_INVALID_ARG;
1000f588:	2317      	movs	r3, #23
1000f58a:	e000      	b.n	1000f58e <system_clock_peripheral_disable+0x326>
	}

	return STATUS_OK;
1000f58c:	2300      	movs	r3, #0
}
1000f58e:	0018      	movs	r0, r3
1000f590:	46bd      	mov	sp, r7
1000f592:	b002      	add	sp, #8
1000f594:	bd80      	pop	{r7, pc}
1000f596:	46c0      	nop			; (mov r8, r8)
1000f598:	1001ad60 	.word	0x1001ad60
1000f59c:	4000b000 	.word	0x4000b000
1000f5a0:	fffffeff 	.word	0xfffffeff
1000f5a4:	fffff7ff 	.word	0xfffff7ff
1000f5a8:	ffffefff 	.word	0xffffefff
1000f5ac:	ffffdfff 	.word	0xffffdfff
1000f5b0:	ffffbfff 	.word	0xffffbfff
1000f5b4:	ffff7fff 	.word	0xffff7fff
1000f5b8:	fffeffff 	.word	0xfffeffff
1000f5bc:	fffdffff 	.word	0xfffdffff
1000f5c0:	fffbffff 	.word	0xfffbffff
1000f5c4:	fff7ffff 	.word	0xfff7ffff
1000f5c8:	ffefffff 	.word	0xffefffff
1000f5cc:	ffdfffff 	.word	0xffdfffff
1000f5d0:	ffbfffff 	.word	0xffbfffff
1000f5d4:	ff7fffff 	.word	0xff7fffff
1000f5d8:	feffffff 	.word	0xfeffffff
1000f5dc:	fdffffff 	.word	0xfdffffff
1000f5e0:	fbffffff 	.word	0xfbffffff
1000f5e4:	f7ffffff 	.word	0xf7ffffff
1000f5e8:	efffffff 	.word	0xefffffff
1000f5ec:	dfffffff 	.word	0xdfffffff
1000f5f0:	bfffffff 	.word	0xbfffffff
1000f5f4:	fffffdff 	.word	0xfffffdff
1000f5f8:	fffffbff 	.word	0xfffffbff

1000f5fc <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000f5fc:	b580      	push	{r7, lr}
1000f5fe:	b082      	sub	sp, #8
1000f600:	af00      	add	r7, sp, #0
1000f602:	0002      	movs	r2, r0
1000f604:	1dfb      	adds	r3, r7, #7
1000f606:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000f608:	1dfb      	adds	r3, r7, #7
1000f60a:	781b      	ldrb	r3, [r3, #0]
1000f60c:	2b43      	cmp	r3, #67	; 0x43
1000f60e:	d900      	bls.n	1000f612 <system_peripheral_reset+0x16>
1000f610:	e2b2      	b.n	1000fb78 <system_peripheral_reset+0x57c>
1000f612:	009a      	lsls	r2, r3, #2
1000f614:	4be8      	ldr	r3, [pc, #928]	; (1000f9b8 <system_peripheral_reset+0x3bc>)
1000f616:	18d3      	adds	r3, r2, r3
1000f618:	681b      	ldr	r3, [r3, #0]
1000f61a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f61c:	4be7      	ldr	r3, [pc, #924]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f61e:	4ae7      	ldr	r2, [pc, #924]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f620:	6852      	ldr	r2, [r2, #4]
1000f622:	2102      	movs	r1, #2
1000f624:	438a      	bics	r2, r1
1000f626:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f628:	4be4      	ldr	r3, [pc, #912]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f62a:	4ae4      	ldr	r2, [pc, #912]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f62c:	6852      	ldr	r2, [r2, #4]
1000f62e:	2102      	movs	r1, #2
1000f630:	430a      	orrs	r2, r1
1000f632:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000f634:	e2a2      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f636:	4be1      	ldr	r3, [pc, #900]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f638:	4ae0      	ldr	r2, [pc, #896]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f63a:	6852      	ldr	r2, [r2, #4]
1000f63c:	2104      	movs	r1, #4
1000f63e:	438a      	bics	r2, r1
1000f640:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f642:	4bde      	ldr	r3, [pc, #888]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f644:	4add      	ldr	r2, [pc, #884]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f646:	6852      	ldr	r2, [r2, #4]
1000f648:	2104      	movs	r1, #4
1000f64a:	430a      	orrs	r2, r1
1000f64c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
1000f64e:	e295      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f650:	4bda      	ldr	r3, [pc, #872]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f652:	4ada      	ldr	r2, [pc, #872]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f654:	6852      	ldr	r2, [r2, #4]
1000f656:	2108      	movs	r1, #8
1000f658:	438a      	bics	r2, r1
1000f65a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f65c:	4bd7      	ldr	r3, [pc, #860]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f65e:	4ad7      	ldr	r2, [pc, #860]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f660:	6852      	ldr	r2, [r2, #4]
1000f662:	2108      	movs	r1, #8
1000f664:	430a      	orrs	r2, r1
1000f666:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
1000f668:	e288      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f66a:	4bd4      	ldr	r3, [pc, #848]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f66c:	4ad3      	ldr	r2, [pc, #844]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f66e:	6852      	ldr	r2, [r2, #4]
1000f670:	2110      	movs	r1, #16
1000f672:	438a      	bics	r2, r1
1000f674:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f676:	4bd1      	ldr	r3, [pc, #836]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f678:	4ad0      	ldr	r2, [pc, #832]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f67a:	6852      	ldr	r2, [r2, #4]
1000f67c:	2110      	movs	r1, #16
1000f67e:	430a      	orrs	r2, r1
1000f680:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
1000f682:	e27b      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f684:	4bcd      	ldr	r3, [pc, #820]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f686:	4acd      	ldr	r2, [pc, #820]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f688:	6852      	ldr	r2, [r2, #4]
1000f68a:	2120      	movs	r1, #32
1000f68c:	438a      	bics	r2, r1
1000f68e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f690:	4bca      	ldr	r3, [pc, #808]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f692:	4aca      	ldr	r2, [pc, #808]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f694:	6852      	ldr	r2, [r2, #4]
1000f696:	2120      	movs	r1, #32
1000f698:	430a      	orrs	r2, r1
1000f69a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
1000f69c:	e26e      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f69e:	4bc7      	ldr	r3, [pc, #796]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6a0:	4ac6      	ldr	r2, [pc, #792]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6a2:	6852      	ldr	r2, [r2, #4]
1000f6a4:	2140      	movs	r1, #64	; 0x40
1000f6a6:	438a      	bics	r2, r1
1000f6a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f6aa:	4bc4      	ldr	r3, [pc, #784]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6ac:	4ac3      	ldr	r2, [pc, #780]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6ae:	6852      	ldr	r2, [r2, #4]
1000f6b0:	2140      	movs	r1, #64	; 0x40
1000f6b2:	430a      	orrs	r2, r1
1000f6b4:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
1000f6b6:	e261      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f6b8:	4bc0      	ldr	r3, [pc, #768]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6ba:	4ac0      	ldr	r2, [pc, #768]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6bc:	6852      	ldr	r2, [r2, #4]
1000f6be:	2180      	movs	r1, #128	; 0x80
1000f6c0:	438a      	bics	r2, r1
1000f6c2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f6c4:	4bbd      	ldr	r3, [pc, #756]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6c6:	4abd      	ldr	r2, [pc, #756]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6c8:	6852      	ldr	r2, [r2, #4]
1000f6ca:	2180      	movs	r1, #128	; 0x80
1000f6cc:	430a      	orrs	r2, r1
1000f6ce:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
1000f6d0:	e254      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f6d2:	4bba      	ldr	r3, [pc, #744]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6d4:	4ab9      	ldr	r2, [pc, #740]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6d6:	6852      	ldr	r2, [r2, #4]
1000f6d8:	49b9      	ldr	r1, [pc, #740]	; (1000f9c0 <system_peripheral_reset+0x3c4>)
1000f6da:	400a      	ands	r2, r1
1000f6dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f6de:	4bb7      	ldr	r3, [pc, #732]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6e0:	4ab6      	ldr	r2, [pc, #728]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6e2:	6852      	ldr	r2, [r2, #4]
1000f6e4:	2180      	movs	r1, #128	; 0x80
1000f6e6:	0049      	lsls	r1, r1, #1
1000f6e8:	430a      	orrs	r2, r1
1000f6ea:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
1000f6ec:	e246      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f6ee:	4bb3      	ldr	r3, [pc, #716]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6f0:	4ab2      	ldr	r2, [pc, #712]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6f2:	6852      	ldr	r2, [r2, #4]
1000f6f4:	49b3      	ldr	r1, [pc, #716]	; (1000f9c4 <system_peripheral_reset+0x3c8>)
1000f6f6:	400a      	ands	r2, r1
1000f6f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f6fa:	4bb0      	ldr	r3, [pc, #704]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6fc:	4aaf      	ldr	r2, [pc, #700]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f6fe:	6852      	ldr	r2, [r2, #4]
1000f700:	2180      	movs	r1, #128	; 0x80
1000f702:	0089      	lsls	r1, r1, #2
1000f704:	430a      	orrs	r2, r1
1000f706:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000f708:	e238      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f70a:	4bac      	ldr	r3, [pc, #688]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f70c:	4aab      	ldr	r2, [pc, #684]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f70e:	6852      	ldr	r2, [r2, #4]
1000f710:	49ad      	ldr	r1, [pc, #692]	; (1000f9c8 <system_peripheral_reset+0x3cc>)
1000f712:	400a      	ands	r2, r1
1000f714:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f716:	4ba9      	ldr	r3, [pc, #676]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f718:	4aa8      	ldr	r2, [pc, #672]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f71a:	6852      	ldr	r2, [r2, #4]
1000f71c:	2180      	movs	r1, #128	; 0x80
1000f71e:	00c9      	lsls	r1, r1, #3
1000f720:	430a      	orrs	r2, r1
1000f722:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000f724:	e22a      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f726:	4ba5      	ldr	r3, [pc, #660]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f728:	4aa4      	ldr	r2, [pc, #656]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f72a:	6852      	ldr	r2, [r2, #4]
1000f72c:	49a7      	ldr	r1, [pc, #668]	; (1000f9cc <system_peripheral_reset+0x3d0>)
1000f72e:	400a      	ands	r2, r1
1000f730:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f732:	4ba2      	ldr	r3, [pc, #648]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f734:	4aa1      	ldr	r2, [pc, #644]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f736:	6852      	ldr	r2, [r2, #4]
1000f738:	2180      	movs	r1, #128	; 0x80
1000f73a:	0109      	lsls	r1, r1, #4
1000f73c:	430a      	orrs	r2, r1
1000f73e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000f740:	e21c      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f742:	4b9e      	ldr	r3, [pc, #632]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f744:	4a9d      	ldr	r2, [pc, #628]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f746:	6852      	ldr	r2, [r2, #4]
1000f748:	49a1      	ldr	r1, [pc, #644]	; (1000f9d0 <system_peripheral_reset+0x3d4>)
1000f74a:	400a      	ands	r2, r1
1000f74c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f74e:	4b9b      	ldr	r3, [pc, #620]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f750:	4a9a      	ldr	r2, [pc, #616]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f752:	6852      	ldr	r2, [r2, #4]
1000f754:	2180      	movs	r1, #128	; 0x80
1000f756:	0149      	lsls	r1, r1, #5
1000f758:	430a      	orrs	r2, r1
1000f75a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000f75c:	e20e      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f75e:	4b97      	ldr	r3, [pc, #604]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f760:	4a96      	ldr	r2, [pc, #600]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f762:	6852      	ldr	r2, [r2, #4]
1000f764:	499b      	ldr	r1, [pc, #620]	; (1000f9d4 <system_peripheral_reset+0x3d8>)
1000f766:	400a      	ands	r2, r1
1000f768:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f76a:	4b94      	ldr	r3, [pc, #592]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f76c:	4a93      	ldr	r2, [pc, #588]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f76e:	6852      	ldr	r2, [r2, #4]
1000f770:	2180      	movs	r1, #128	; 0x80
1000f772:	0189      	lsls	r1, r1, #6
1000f774:	430a      	orrs	r2, r1
1000f776:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
1000f778:	e200      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f77a:	4b90      	ldr	r3, [pc, #576]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f77c:	4a8f      	ldr	r2, [pc, #572]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f77e:	6852      	ldr	r2, [r2, #4]
1000f780:	4995      	ldr	r1, [pc, #596]	; (1000f9d8 <system_peripheral_reset+0x3dc>)
1000f782:	400a      	ands	r2, r1
1000f784:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f786:	4b8d      	ldr	r3, [pc, #564]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f788:	4a8c      	ldr	r2, [pc, #560]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f78a:	6852      	ldr	r2, [r2, #4]
1000f78c:	2180      	movs	r1, #128	; 0x80
1000f78e:	01c9      	lsls	r1, r1, #7
1000f790:	430a      	orrs	r2, r1
1000f792:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
1000f794:	e1f2      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f796:	4b89      	ldr	r3, [pc, #548]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f798:	4a88      	ldr	r2, [pc, #544]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f79a:	6852      	ldr	r2, [r2, #4]
1000f79c:	498f      	ldr	r1, [pc, #572]	; (1000f9dc <system_peripheral_reset+0x3e0>)
1000f79e:	400a      	ands	r2, r1
1000f7a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f7a2:	4b86      	ldr	r3, [pc, #536]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7a4:	4a85      	ldr	r2, [pc, #532]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7a6:	6852      	ldr	r2, [r2, #4]
1000f7a8:	2180      	movs	r1, #128	; 0x80
1000f7aa:	0209      	lsls	r1, r1, #8
1000f7ac:	430a      	orrs	r2, r1
1000f7ae:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000f7b0:	e1e4      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f7b2:	4b82      	ldr	r3, [pc, #520]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7b4:	4a81      	ldr	r2, [pc, #516]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7b6:	6852      	ldr	r2, [r2, #4]
1000f7b8:	4989      	ldr	r1, [pc, #548]	; (1000f9e0 <system_peripheral_reset+0x3e4>)
1000f7ba:	400a      	ands	r2, r1
1000f7bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f7be:	4b7f      	ldr	r3, [pc, #508]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7c0:	4a7e      	ldr	r2, [pc, #504]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7c2:	6852      	ldr	r2, [r2, #4]
1000f7c4:	2180      	movs	r1, #128	; 0x80
1000f7c6:	0249      	lsls	r1, r1, #9
1000f7c8:	430a      	orrs	r2, r1
1000f7ca:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
1000f7cc:	e1d6      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f7ce:	4b7b      	ldr	r3, [pc, #492]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7d0:	4a7a      	ldr	r2, [pc, #488]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7d2:	6852      	ldr	r2, [r2, #4]
1000f7d4:	4983      	ldr	r1, [pc, #524]	; (1000f9e4 <system_peripheral_reset+0x3e8>)
1000f7d6:	400a      	ands	r2, r1
1000f7d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f7da:	4b78      	ldr	r3, [pc, #480]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7dc:	4a77      	ldr	r2, [pc, #476]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7de:	6852      	ldr	r2, [r2, #4]
1000f7e0:	2180      	movs	r1, #128	; 0x80
1000f7e2:	0289      	lsls	r1, r1, #10
1000f7e4:	430a      	orrs	r2, r1
1000f7e6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
1000f7e8:	e1c8      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f7ea:	4b74      	ldr	r3, [pc, #464]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7ec:	4a73      	ldr	r2, [pc, #460]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7ee:	6852      	ldr	r2, [r2, #4]
1000f7f0:	497d      	ldr	r1, [pc, #500]	; (1000f9e8 <system_peripheral_reset+0x3ec>)
1000f7f2:	400a      	ands	r2, r1
1000f7f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f7f6:	4b71      	ldr	r3, [pc, #452]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7f8:	4a70      	ldr	r2, [pc, #448]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f7fa:	6852      	ldr	r2, [r2, #4]
1000f7fc:	2180      	movs	r1, #128	; 0x80
1000f7fe:	02c9      	lsls	r1, r1, #11
1000f800:	430a      	orrs	r2, r1
1000f802:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000f804:	e1ba      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f806:	4b6d      	ldr	r3, [pc, #436]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f808:	4a6c      	ldr	r2, [pc, #432]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f80a:	6852      	ldr	r2, [r2, #4]
1000f80c:	4977      	ldr	r1, [pc, #476]	; (1000f9ec <system_peripheral_reset+0x3f0>)
1000f80e:	400a      	ands	r2, r1
1000f810:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f812:	4b6a      	ldr	r3, [pc, #424]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f814:	4a69      	ldr	r2, [pc, #420]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f816:	6852      	ldr	r2, [r2, #4]
1000f818:	2180      	movs	r1, #128	; 0x80
1000f81a:	0309      	lsls	r1, r1, #12
1000f81c:	430a      	orrs	r2, r1
1000f81e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000f820:	e1ac      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f822:	4b66      	ldr	r3, [pc, #408]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f824:	4a65      	ldr	r2, [pc, #404]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f826:	6852      	ldr	r2, [r2, #4]
1000f828:	4971      	ldr	r1, [pc, #452]	; (1000f9f0 <system_peripheral_reset+0x3f4>)
1000f82a:	400a      	ands	r2, r1
1000f82c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f82e:	4b63      	ldr	r3, [pc, #396]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f830:	4a62      	ldr	r2, [pc, #392]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f832:	6852      	ldr	r2, [r2, #4]
1000f834:	2180      	movs	r1, #128	; 0x80
1000f836:	0349      	lsls	r1, r1, #13
1000f838:	430a      	orrs	r2, r1
1000f83a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000f83c:	e19e      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f83e:	4b5f      	ldr	r3, [pc, #380]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f840:	4a5e      	ldr	r2, [pc, #376]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f842:	6852      	ldr	r2, [r2, #4]
1000f844:	496b      	ldr	r1, [pc, #428]	; (1000f9f4 <system_peripheral_reset+0x3f8>)
1000f846:	400a      	ands	r2, r1
1000f848:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f84a:	4b5c      	ldr	r3, [pc, #368]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f84c:	4a5b      	ldr	r2, [pc, #364]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f84e:	6852      	ldr	r2, [r2, #4]
1000f850:	2180      	movs	r1, #128	; 0x80
1000f852:	0389      	lsls	r1, r1, #14
1000f854:	430a      	orrs	r2, r1
1000f856:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000f858:	e190      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f85a:	4b58      	ldr	r3, [pc, #352]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f85c:	4a57      	ldr	r2, [pc, #348]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f85e:	6852      	ldr	r2, [r2, #4]
1000f860:	4965      	ldr	r1, [pc, #404]	; (1000f9f8 <system_peripheral_reset+0x3fc>)
1000f862:	400a      	ands	r2, r1
1000f864:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f866:	4b55      	ldr	r3, [pc, #340]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f868:	4a54      	ldr	r2, [pc, #336]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f86a:	6852      	ldr	r2, [r2, #4]
1000f86c:	2180      	movs	r1, #128	; 0x80
1000f86e:	03c9      	lsls	r1, r1, #15
1000f870:	430a      	orrs	r2, r1
1000f872:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000f874:	e182      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f876:	4b51      	ldr	r3, [pc, #324]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f878:	4a50      	ldr	r2, [pc, #320]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f87a:	6852      	ldr	r2, [r2, #4]
1000f87c:	495f      	ldr	r1, [pc, #380]	; (1000f9fc <system_peripheral_reset+0x400>)
1000f87e:	400a      	ands	r2, r1
1000f880:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f882:	4b4e      	ldr	r3, [pc, #312]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f884:	4a4d      	ldr	r2, [pc, #308]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f886:	6852      	ldr	r2, [r2, #4]
1000f888:	2180      	movs	r1, #128	; 0x80
1000f88a:	0409      	lsls	r1, r1, #16
1000f88c:	430a      	orrs	r2, r1
1000f88e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000f890:	e174      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f892:	4b4a      	ldr	r3, [pc, #296]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f894:	4a49      	ldr	r2, [pc, #292]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f896:	6852      	ldr	r2, [r2, #4]
1000f898:	4959      	ldr	r1, [pc, #356]	; (1000fa00 <system_peripheral_reset+0x404>)
1000f89a:	400a      	ands	r2, r1
1000f89c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f89e:	4b47      	ldr	r3, [pc, #284]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8a0:	4a46      	ldr	r2, [pc, #280]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8a2:	6852      	ldr	r2, [r2, #4]
1000f8a4:	2180      	movs	r1, #128	; 0x80
1000f8a6:	0449      	lsls	r1, r1, #17
1000f8a8:	430a      	orrs	r2, r1
1000f8aa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000f8ac:	e166      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f8ae:	4b43      	ldr	r3, [pc, #268]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8b0:	4a42      	ldr	r2, [pc, #264]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8b2:	6852      	ldr	r2, [r2, #4]
1000f8b4:	4953      	ldr	r1, [pc, #332]	; (1000fa04 <system_peripheral_reset+0x408>)
1000f8b6:	400a      	ands	r2, r1
1000f8b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f8ba:	4b40      	ldr	r3, [pc, #256]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8bc:	4a3f      	ldr	r2, [pc, #252]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8be:	6852      	ldr	r2, [r2, #4]
1000f8c0:	2180      	movs	r1, #128	; 0x80
1000f8c2:	0489      	lsls	r1, r1, #18
1000f8c4:	430a      	orrs	r2, r1
1000f8c6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
1000f8c8:	e158      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f8ca:	4b3c      	ldr	r3, [pc, #240]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8cc:	4a3b      	ldr	r2, [pc, #236]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8ce:	6852      	ldr	r2, [r2, #4]
1000f8d0:	494d      	ldr	r1, [pc, #308]	; (1000fa08 <system_peripheral_reset+0x40c>)
1000f8d2:	400a      	ands	r2, r1
1000f8d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f8d6:	4b39      	ldr	r3, [pc, #228]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8d8:	4a38      	ldr	r2, [pc, #224]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8da:	6852      	ldr	r2, [r2, #4]
1000f8dc:	2180      	movs	r1, #128	; 0x80
1000f8de:	04c9      	lsls	r1, r1, #19
1000f8e0:	430a      	orrs	r2, r1
1000f8e2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
1000f8e4:	e14a      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f8e6:	4b35      	ldr	r3, [pc, #212]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8e8:	4a34      	ldr	r2, [pc, #208]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8ea:	6852      	ldr	r2, [r2, #4]
1000f8ec:	4947      	ldr	r1, [pc, #284]	; (1000fa0c <system_peripheral_reset+0x410>)
1000f8ee:	400a      	ands	r2, r1
1000f8f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f8f2:	4b32      	ldr	r3, [pc, #200]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8f4:	4a31      	ldr	r2, [pc, #196]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f8f6:	6852      	ldr	r2, [r2, #4]
1000f8f8:	2180      	movs	r1, #128	; 0x80
1000f8fa:	0509      	lsls	r1, r1, #20
1000f8fc:	430a      	orrs	r2, r1
1000f8fe:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
1000f900:	e13c      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f902:	4b2e      	ldr	r3, [pc, #184]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f904:	4a2d      	ldr	r2, [pc, #180]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f906:	6852      	ldr	r2, [r2, #4]
1000f908:	4941      	ldr	r1, [pc, #260]	; (1000fa10 <system_peripheral_reset+0x414>)
1000f90a:	400a      	ands	r2, r1
1000f90c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f90e:	4b2b      	ldr	r3, [pc, #172]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f910:	4a2a      	ldr	r2, [pc, #168]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f912:	6852      	ldr	r2, [r2, #4]
1000f914:	2180      	movs	r1, #128	; 0x80
1000f916:	0549      	lsls	r1, r1, #21
1000f918:	430a      	orrs	r2, r1
1000f91a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
1000f91c:	e12e      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f91e:	4b27      	ldr	r3, [pc, #156]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f920:	4a26      	ldr	r2, [pc, #152]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f922:	6852      	ldr	r2, [r2, #4]
1000f924:	493b      	ldr	r1, [pc, #236]	; (1000fa14 <system_peripheral_reset+0x418>)
1000f926:	400a      	ands	r2, r1
1000f928:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f92a:	4b24      	ldr	r3, [pc, #144]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f92c:	4a23      	ldr	r2, [pc, #140]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f92e:	6852      	ldr	r2, [r2, #4]
1000f930:	2180      	movs	r1, #128	; 0x80
1000f932:	0589      	lsls	r1, r1, #22
1000f934:	430a      	orrs	r2, r1
1000f936:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
1000f938:	e120      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f93a:	4b20      	ldr	r3, [pc, #128]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f93c:	4a1f      	ldr	r2, [pc, #124]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f93e:	6852      	ldr	r2, [r2, #4]
1000f940:	4935      	ldr	r1, [pc, #212]	; (1000fa18 <system_peripheral_reset+0x41c>)
1000f942:	400a      	ands	r2, r1
1000f944:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f946:	4b1d      	ldr	r3, [pc, #116]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f948:	4a1c      	ldr	r2, [pc, #112]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f94a:	6852      	ldr	r2, [r2, #4]
1000f94c:	2180      	movs	r1, #128	; 0x80
1000f94e:	05c9      	lsls	r1, r1, #23
1000f950:	430a      	orrs	r2, r1
1000f952:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
1000f954:	e112      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000f956:	4b19      	ldr	r3, [pc, #100]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f958:	4a18      	ldr	r2, [pc, #96]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f95a:	6852      	ldr	r2, [r2, #4]
1000f95c:	0052      	lsls	r2, r2, #1
1000f95e:	0852      	lsrs	r2, r2, #1
1000f960:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000f962:	4b16      	ldr	r3, [pc, #88]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f964:	4a15      	ldr	r2, [pc, #84]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f966:	6852      	ldr	r2, [r2, #4]
1000f968:	2180      	movs	r1, #128	; 0x80
1000f96a:	0609      	lsls	r1, r1, #24
1000f96c:	430a      	orrs	r2, r1
1000f96e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000f970:	e104      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000f972:	4a12      	ldr	r2, [pc, #72]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f974:	4b11      	ldr	r3, [pc, #68]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f976:	891b      	ldrh	r3, [r3, #8]
1000f978:	b29b      	uxth	r3, r3
1000f97a:	2101      	movs	r1, #1
1000f97c:	438b      	bics	r3, r1
1000f97e:	b29b      	uxth	r3, r3
1000f980:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000f982:	4a0e      	ldr	r2, [pc, #56]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f984:	4b0d      	ldr	r3, [pc, #52]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f986:	891b      	ldrh	r3, [r3, #8]
1000f988:	b29b      	uxth	r3, r3
1000f98a:	2101      	movs	r1, #1
1000f98c:	430b      	orrs	r3, r1
1000f98e:	b29b      	uxth	r3, r3
1000f990:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
1000f992:	e0f3      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000f994:	4a09      	ldr	r2, [pc, #36]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f996:	4b09      	ldr	r3, [pc, #36]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f998:	891b      	ldrh	r3, [r3, #8]
1000f99a:	b29b      	uxth	r3, r3
1000f99c:	2102      	movs	r1, #2
1000f99e:	438b      	bics	r3, r1
1000f9a0:	b29b      	uxth	r3, r3
1000f9a2:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000f9a4:	4a05      	ldr	r2, [pc, #20]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f9a6:	4b05      	ldr	r3, [pc, #20]	; (1000f9bc <system_peripheral_reset+0x3c0>)
1000f9a8:	891b      	ldrh	r3, [r3, #8]
1000f9aa:	b29b      	uxth	r3, r3
1000f9ac:	2102      	movs	r1, #2
1000f9ae:	430b      	orrs	r3, r1
1000f9b0:	b29b      	uxth	r3, r3
1000f9b2:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
1000f9b4:	e0e2      	b.n	1000fb7c <system_peripheral_reset+0x580>
1000f9b6:	46c0      	nop			; (mov r8, r8)
1000f9b8:	1001ae38 	.word	0x1001ae38
1000f9bc:	4000b000 	.word	0x4000b000
1000f9c0:	fffffeff 	.word	0xfffffeff
1000f9c4:	fffffdff 	.word	0xfffffdff
1000f9c8:	fffffbff 	.word	0xfffffbff
1000f9cc:	fffff7ff 	.word	0xfffff7ff
1000f9d0:	ffffefff 	.word	0xffffefff
1000f9d4:	ffffdfff 	.word	0xffffdfff
1000f9d8:	ffffbfff 	.word	0xffffbfff
1000f9dc:	ffff7fff 	.word	0xffff7fff
1000f9e0:	fffeffff 	.word	0xfffeffff
1000f9e4:	fffdffff 	.word	0xfffdffff
1000f9e8:	fffbffff 	.word	0xfffbffff
1000f9ec:	fff7ffff 	.word	0xfff7ffff
1000f9f0:	ffefffff 	.word	0xffefffff
1000f9f4:	ffdfffff 	.word	0xffdfffff
1000f9f8:	ffbfffff 	.word	0xffbfffff
1000f9fc:	ff7fffff 	.word	0xff7fffff
1000fa00:	feffffff 	.word	0xfeffffff
1000fa04:	fdffffff 	.word	0xfdffffff
1000fa08:	fbffffff 	.word	0xfbffffff
1000fa0c:	f7ffffff 	.word	0xf7ffffff
1000fa10:	efffffff 	.word	0xefffffff
1000fa14:	dfffffff 	.word	0xdfffffff
1000fa18:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fa1c:	4a5a      	ldr	r2, [pc, #360]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa1e:	4b5a      	ldr	r3, [pc, #360]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa20:	891b      	ldrh	r3, [r3, #8]
1000fa22:	b29b      	uxth	r3, r3
1000fa24:	2104      	movs	r1, #4
1000fa26:	438b      	bics	r3, r1
1000fa28:	b29b      	uxth	r3, r3
1000fa2a:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fa2c:	4a56      	ldr	r2, [pc, #344]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa2e:	4b56      	ldr	r3, [pc, #344]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa30:	891b      	ldrh	r3, [r3, #8]
1000fa32:	b29b      	uxth	r3, r3
1000fa34:	2104      	movs	r1, #4
1000fa36:	430b      	orrs	r3, r1
1000fa38:	b29b      	uxth	r3, r3
1000fa3a:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
1000fa3c:	e09e      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fa3e:	4a52      	ldr	r2, [pc, #328]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa40:	4b51      	ldr	r3, [pc, #324]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa42:	891b      	ldrh	r3, [r3, #8]
1000fa44:	b29b      	uxth	r3, r3
1000fa46:	2108      	movs	r1, #8
1000fa48:	438b      	bics	r3, r1
1000fa4a:	b29b      	uxth	r3, r3
1000fa4c:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fa4e:	4a4e      	ldr	r2, [pc, #312]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa50:	4b4d      	ldr	r3, [pc, #308]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa52:	891b      	ldrh	r3, [r3, #8]
1000fa54:	b29b      	uxth	r3, r3
1000fa56:	2108      	movs	r1, #8
1000fa58:	430b      	orrs	r3, r1
1000fa5a:	b29b      	uxth	r3, r3
1000fa5c:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000fa5e:	e08d      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fa60:	4a49      	ldr	r2, [pc, #292]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa62:	4b49      	ldr	r3, [pc, #292]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa64:	891b      	ldrh	r3, [r3, #8]
1000fa66:	b29b      	uxth	r3, r3
1000fa68:	2110      	movs	r1, #16
1000fa6a:	438b      	bics	r3, r1
1000fa6c:	b29b      	uxth	r3, r3
1000fa6e:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fa70:	4a45      	ldr	r2, [pc, #276]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa72:	4b45      	ldr	r3, [pc, #276]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa74:	891b      	ldrh	r3, [r3, #8]
1000fa76:	b29b      	uxth	r3, r3
1000fa78:	2110      	movs	r1, #16
1000fa7a:	430b      	orrs	r3, r1
1000fa7c:	b29b      	uxth	r3, r3
1000fa7e:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000fa80:	e07c      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fa82:	4a41      	ldr	r2, [pc, #260]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa84:	4b40      	ldr	r3, [pc, #256]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa86:	891b      	ldrh	r3, [r3, #8]
1000fa88:	b29b      	uxth	r3, r3
1000fa8a:	2120      	movs	r1, #32
1000fa8c:	438b      	bics	r3, r1
1000fa8e:	b29b      	uxth	r3, r3
1000fa90:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fa92:	4a3d      	ldr	r2, [pc, #244]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa94:	4b3c      	ldr	r3, [pc, #240]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fa96:	891b      	ldrh	r3, [r3, #8]
1000fa98:	b29b      	uxth	r3, r3
1000fa9a:	2120      	movs	r1, #32
1000fa9c:	430b      	orrs	r3, r1
1000fa9e:	b29b      	uxth	r3, r3
1000faa0:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000faa2:	e06b      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000faa4:	4a38      	ldr	r2, [pc, #224]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000faa6:	4b38      	ldr	r3, [pc, #224]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000faa8:	891b      	ldrh	r3, [r3, #8]
1000faaa:	b29b      	uxth	r3, r3
1000faac:	2140      	movs	r1, #64	; 0x40
1000faae:	438b      	bics	r3, r1
1000fab0:	b29b      	uxth	r3, r3
1000fab2:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fab4:	4a34      	ldr	r2, [pc, #208]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fab6:	4b34      	ldr	r3, [pc, #208]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fab8:	891b      	ldrh	r3, [r3, #8]
1000faba:	b29b      	uxth	r3, r3
1000fabc:	2140      	movs	r1, #64	; 0x40
1000fabe:	430b      	orrs	r3, r1
1000fac0:	b29b      	uxth	r3, r3
1000fac2:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000fac4:	e05a      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fac6:	4a30      	ldr	r2, [pc, #192]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fac8:	4b2f      	ldr	r3, [pc, #188]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000faca:	891b      	ldrh	r3, [r3, #8]
1000facc:	b29b      	uxth	r3, r3
1000face:	2180      	movs	r1, #128	; 0x80
1000fad0:	438b      	bics	r3, r1
1000fad2:	b29b      	uxth	r3, r3
1000fad4:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fad6:	4a2c      	ldr	r2, [pc, #176]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fad8:	4b2b      	ldr	r3, [pc, #172]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fada:	891b      	ldrh	r3, [r3, #8]
1000fadc:	b29b      	uxth	r3, r3
1000fade:	2180      	movs	r1, #128	; 0x80
1000fae0:	430b      	orrs	r3, r1
1000fae2:	b29b      	uxth	r3, r3
1000fae4:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000fae6:	e049      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fae8:	4a27      	ldr	r2, [pc, #156]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000faea:	4b27      	ldr	r3, [pc, #156]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000faec:	891b      	ldrh	r3, [r3, #8]
1000faee:	b29b      	uxth	r3, r3
1000faf0:	4926      	ldr	r1, [pc, #152]	; (1000fb8c <system_peripheral_reset+0x590>)
1000faf2:	400b      	ands	r3, r1
1000faf4:	b29b      	uxth	r3, r3
1000faf6:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000faf8:	4923      	ldr	r1, [pc, #140]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fafa:	4b23      	ldr	r3, [pc, #140]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fafc:	891b      	ldrh	r3, [r3, #8]
1000fafe:	b29b      	uxth	r3, r3
1000fb00:	2280      	movs	r2, #128	; 0x80
1000fb02:	0052      	lsls	r2, r2, #1
1000fb04:	4313      	orrs	r3, r2
1000fb06:	b29b      	uxth	r3, r3
1000fb08:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000fb0a:	e037      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fb0c:	4a1e      	ldr	r2, [pc, #120]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb0e:	4b1e      	ldr	r3, [pc, #120]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb10:	891b      	ldrh	r3, [r3, #8]
1000fb12:	b29b      	uxth	r3, r3
1000fb14:	491e      	ldr	r1, [pc, #120]	; (1000fb90 <system_peripheral_reset+0x594>)
1000fb16:	400b      	ands	r3, r1
1000fb18:	b29b      	uxth	r3, r3
1000fb1a:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fb1c:	491a      	ldr	r1, [pc, #104]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb1e:	4b1a      	ldr	r3, [pc, #104]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb20:	891b      	ldrh	r3, [r3, #8]
1000fb22:	b29b      	uxth	r3, r3
1000fb24:	2280      	movs	r2, #128	; 0x80
1000fb26:	0092      	lsls	r2, r2, #2
1000fb28:	4313      	orrs	r3, r2
1000fb2a:	b29b      	uxth	r3, r3
1000fb2c:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000fb2e:	e025      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fb30:	4a15      	ldr	r2, [pc, #84]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb32:	4b15      	ldr	r3, [pc, #84]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb34:	891b      	ldrh	r3, [r3, #8]
1000fb36:	b29b      	uxth	r3, r3
1000fb38:	4916      	ldr	r1, [pc, #88]	; (1000fb94 <system_peripheral_reset+0x598>)
1000fb3a:	400b      	ands	r3, r1
1000fb3c:	b29b      	uxth	r3, r3
1000fb3e:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fb40:	4911      	ldr	r1, [pc, #68]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb42:	4b11      	ldr	r3, [pc, #68]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb44:	891b      	ldrh	r3, [r3, #8]
1000fb46:	b29b      	uxth	r3, r3
1000fb48:	2280      	movs	r2, #128	; 0x80
1000fb4a:	00d2      	lsls	r2, r2, #3
1000fb4c:	4313      	orrs	r3, r2
1000fb4e:	b29b      	uxth	r3, r3
1000fb50:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000fb52:	e013      	b.n	1000fb7c <system_peripheral_reset+0x580>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000fb54:	4a0c      	ldr	r2, [pc, #48]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb56:	4b0c      	ldr	r3, [pc, #48]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb58:	891b      	ldrh	r3, [r3, #8]
1000fb5a:	b29b      	uxth	r3, r3
1000fb5c:	490e      	ldr	r1, [pc, #56]	; (1000fb98 <system_peripheral_reset+0x59c>)
1000fb5e:	400b      	ands	r3, r1
1000fb60:	b29b      	uxth	r3, r3
1000fb62:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000fb64:	4908      	ldr	r1, [pc, #32]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb66:	4b08      	ldr	r3, [pc, #32]	; (1000fb88 <system_peripheral_reset+0x58c>)
1000fb68:	891b      	ldrh	r3, [r3, #8]
1000fb6a:	b29b      	uxth	r3, r3
1000fb6c:	2280      	movs	r2, #128	; 0x80
1000fb6e:	0112      	lsls	r2, r2, #4
1000fb70:	4313      	orrs	r3, r2
1000fb72:	b29b      	uxth	r3, r3
1000fb74:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
1000fb76:	e001      	b.n	1000fb7c <system_peripheral_reset+0x580>

		default:
			return STATUS_ERR_INVALID_ARG;
1000fb78:	2317      	movs	r3, #23
1000fb7a:	e000      	b.n	1000fb7e <system_peripheral_reset+0x582>
	}

	return STATUS_OK;
1000fb7c:	2300      	movs	r3, #0
}
1000fb7e:	0018      	movs	r0, r3
1000fb80:	46bd      	mov	sp, r7
1000fb82:	b002      	add	sp, #8
1000fb84:	bd80      	pop	{r7, pc}
1000fb86:	46c0      	nop			; (mov r8, r8)
1000fb88:	4000b000 	.word	0x4000b000
1000fb8c:	fffffeff 	.word	0xfffffeff
1000fb90:	fffffdff 	.word	0xfffffdff
1000fb94:	fffffbff 	.word	0xfffffbff
1000fb98:	fffff7ff 	.word	0xfffff7ff

1000fb9c <system_register_isr>:
 * \param[in] isr_address Address of the ISR
 *
 */
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
1000fb9c:	b580      	push	{r7, lr}
1000fb9e:	b084      	sub	sp, #16
1000fba0:	af00      	add	r7, sp, #0
1000fba2:	0002      	movs	r2, r0
1000fba4:	6039      	str	r1, [r7, #0]
1000fba6:	1dfb      	adds	r3, r7, #7
1000fba8:	701a      	strb	r2, [r3, #0]
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
1000fbaa:	1dfb      	adds	r3, r7, #7
1000fbac:	781b      	ldrb	r3, [r3, #0]
1000fbae:	2280      	movs	r2, #128	; 0x80
1000fbb0:	04d2      	lsls	r2, r2, #19
1000fbb2:	4694      	mov	ip, r2
1000fbb4:	4463      	add	r3, ip
1000fbb6:	009b      	lsls	r3, r3, #2
1000fbb8:	60fb      	str	r3, [r7, #12]
	*temp = isr_address;
1000fbba:	68fb      	ldr	r3, [r7, #12]
1000fbbc:	683a      	ldr	r2, [r7, #0]
1000fbbe:	601a      	str	r2, [r3, #0]
}
1000fbc0:	46c0      	nop			; (mov r8, r8)
1000fbc2:	46bd      	mov	sp, r7
1000fbc4:	b004      	add	sp, #16
1000fbc6:	bd80      	pop	{r7, pc}

1000fbc8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000fbc8:	b580      	push	{r7, lr}
1000fbca:	b082      	sub	sp, #8
1000fbcc:	af00      	add	r7, sp, #0
1000fbce:	0002      	movs	r2, r0
1000fbd0:	1dfb      	adds	r3, r7, #7
1000fbd2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000fbd4:	4b06      	ldr	r3, [pc, #24]	; (1000fbf0 <NVIC_EnableIRQ+0x28>)
1000fbd6:	1dfa      	adds	r2, r7, #7
1000fbd8:	7812      	ldrb	r2, [r2, #0]
1000fbda:	0011      	movs	r1, r2
1000fbdc:	221f      	movs	r2, #31
1000fbde:	400a      	ands	r2, r1
1000fbe0:	2101      	movs	r1, #1
1000fbe2:	4091      	lsls	r1, r2
1000fbe4:	000a      	movs	r2, r1
1000fbe6:	601a      	str	r2, [r3, #0]
}
1000fbe8:	46c0      	nop			; (mov r8, r8)
1000fbea:	46bd      	mov	sp, r7
1000fbec:	b002      	add	sp, #8
1000fbee:	bd80      	pop	{r7, pc}
1000fbf0:	e000e100 	.word	0xe000e100

1000fbf4 <_uart_write>:
 * Writes a character from the TX buffer to the Data register.
 *
 * \param[in,out]  module  Pointer to UART software instance struct
 */
static void _uart_write(struct uart_module *const module)
{
1000fbf4:	b580      	push	{r7, lr}
1000fbf6:	b084      	sub	sp, #16
1000fbf8:	af00      	add	r7, sp, #0
1000fbfa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;
1000fbfc:	687b      	ldr	r3, [r7, #4]
1000fbfe:	681b      	ldr	r3, [r3, #0]
1000fc00:	60fb      	str	r3, [r7, #12]

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000fc02:	687b      	ldr	r3, [r7, #4]
1000fc04:	699a      	ldr	r2, [r3, #24]
1000fc06:	230b      	movs	r3, #11
1000fc08:	18fb      	adds	r3, r7, r3
1000fc0a:	7812      	ldrb	r2, [r2, #0]
1000fc0c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000fc0e:	687b      	ldr	r3, [r7, #4]
1000fc10:	699b      	ldr	r3, [r3, #24]
1000fc12:	1c5a      	adds	r2, r3, #1
1000fc14:	687b      	ldr	r3, [r7, #4]
1000fc16:	619a      	str	r2, [r3, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000fc18:	68fb      	ldr	r3, [r7, #12]
1000fc1a:	220b      	movs	r2, #11
1000fc1c:	18ba      	adds	r2, r7, r2
1000fc1e:	7812      	ldrb	r2, [r2, #0]
1000fc20:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000fc22:	687b      	ldr	r3, [r7, #4]
1000fc24:	8bdb      	ldrh	r3, [r3, #30]
1000fc26:	b29b      	uxth	r3, r3
1000fc28:	3b01      	subs	r3, #1
1000fc2a:	b29a      	uxth	r2, r3
1000fc2c:	687b      	ldr	r3, [r7, #4]
1000fc2e:	83da      	strh	r2, [r3, #30]
}
1000fc30:	46c0      	nop			; (mov r8, r8)
1000fc32:	46bd      	mov	sp, r7
1000fc34:	b004      	add	sp, #16
1000fc36:	bd80      	pop	{r7, pc}

1000fc38 <_uart_read>:
 *
 * \param[in,out]  module  Pointer to UART software instance struct
 */
static void _uart_read(
		struct uart_module *const module)
{
1000fc38:	b580      	push	{r7, lr}
1000fc3a:	b084      	sub	sp, #16
1000fc3c:	af00      	add	r7, sp, #0
1000fc3e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;
1000fc40:	687b      	ldr	r3, [r7, #4]
1000fc42:	681b      	ldr	r3, [r3, #0]
1000fc44:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000fc46:	68fb      	ldr	r3, [r7, #12]
1000fc48:	7c1b      	ldrb	r3, [r3, #16]
1000fc4a:	b2da      	uxtb	r2, r3
1000fc4c:	230a      	movs	r3, #10
1000fc4e:	18fb      	adds	r3, r7, r3
1000fc50:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000fc52:	687b      	ldr	r3, [r7, #4]
1000fc54:	695b      	ldr	r3, [r3, #20]
1000fc56:	220a      	movs	r2, #10
1000fc58:	18ba      	adds	r2, r7, r2
1000fc5a:	8812      	ldrh	r2, [r2, #0]
1000fc5c:	b2d2      	uxtb	r2, r2
1000fc5e:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000fc60:	687b      	ldr	r3, [r7, #4]
1000fc62:	695b      	ldr	r3, [r3, #20]
1000fc64:	1c5a      	adds	r2, r3, #1
1000fc66:	687b      	ldr	r3, [r7, #4]
1000fc68:	615a      	str	r2, [r3, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000fc6a:	687b      	ldr	r3, [r7, #4]
1000fc6c:	8b9b      	ldrh	r3, [r3, #28]
1000fc6e:	b29b      	uxth	r3, r3
1000fc70:	3b01      	subs	r3, #1
1000fc72:	b29a      	uxth	r2, r3
1000fc74:	687b      	ldr	r3, [r7, #4]
1000fc76:	839a      	strh	r2, [r3, #28]
}
1000fc78:	46c0      	nop			; (mov r8, r8)
1000fc7a:	46bd      	mov	sp, r7
1000fc7c:	b004      	add	sp, #16
1000fc7e:	bd80      	pop	{r7, pc}

1000fc80 <uart_rx0_isr_handler>:

static void uart_rx0_isr_handler(void)
{
1000fc80:	b580      	push	{r7, lr}
1000fc82:	b084      	sub	sp, #16
1000fc84:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[0];
1000fc86:	4b32      	ldr	r3, [pc, #200]	; (1000fd50 <uart_rx0_isr_handler+0xd0>)
1000fc88:	681b      	ldr	r3, [r3, #0]
1000fc8a:	60fb      	str	r3, [r7, #12]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000fc8c:	68fb      	ldr	r3, [r7, #12]
1000fc8e:	681b      	ldr	r3, [r3, #0]
1000fc90:	7d1b      	ldrb	r3, [r3, #20]
1000fc92:	b2db      	uxtb	r3, r3
1000fc94:	60bb      	str	r3, [r7, #8]
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000fc96:	68bb      	ldr	r3, [r7, #8]
1000fc98:	2240      	movs	r2, #64	; 0x40
1000fc9a:	4013      	ands	r3, r2
1000fc9c:	d025      	beq.n	1000fcea <uart_rx0_isr_handler+0x6a>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000fc9e:	68fb      	ldr	r3, [r7, #12]
1000fca0:	2222      	movs	r2, #34	; 0x22
1000fca2:	211e      	movs	r1, #30
1000fca4:	5499      	strb	r1, [r3, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000fca6:	68fb      	ldr	r3, [r7, #12]
1000fca8:	681a      	ldr	r2, [r3, #0]
1000fcaa:	68fb      	ldr	r3, [r7, #12]
1000fcac:	681b      	ldr	r3, [r3, #0]
1000fcae:	7e1b      	ldrb	r3, [r3, #24]
1000fcb0:	b2db      	uxtb	r3, r3
1000fcb2:	2141      	movs	r1, #65	; 0x41
1000fcb4:	438b      	bics	r3, r1
1000fcb6:	b2db      	uxtb	r3, r3
1000fcb8:	7613      	strb	r3, [r2, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000fcba:	68fb      	ldr	r3, [r7, #12]
1000fcbc:	2221      	movs	r2, #33	; 0x21
1000fcbe:	5c9b      	ldrb	r3, [r3, r2]
1000fcc0:	001a      	movs	r2, r3
1000fcc2:	2308      	movs	r3, #8
1000fcc4:	4013      	ands	r3, r2
1000fcc6:	d00b      	beq.n	1000fce0 <uart_rx0_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000fcc8:	68fb      	ldr	r3, [r7, #12]
1000fcca:	2220      	movs	r2, #32
1000fccc:	5c9b      	ldrb	r3, [r3, r2]
1000fcce:	001a      	movs	r2, r3
1000fcd0:	2308      	movs	r3, #8
1000fcd2:	4013      	ands	r3, r2
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000fcd4:	d004      	beq.n	1000fce0 <uart_rx0_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000fcd6:	68fb      	ldr	r3, [r7, #12]
1000fcd8:	691b      	ldr	r3, [r3, #16]
1000fcda:	68fa      	ldr	r2, [r7, #12]
1000fcdc:	0010      	movs	r0, r2
1000fcde:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000fce0:	68fb      	ldr	r3, [r7, #12]
1000fce2:	681a      	ldr	r2, [r3, #0]
1000fce4:	1dfb      	adds	r3, r7, #7
1000fce6:	7c12      	ldrb	r2, [r2, #16]
1000fce8:	701a      	strb	r2, [r3, #0]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000fcea:	68bb      	ldr	r3, [r7, #8]
1000fcec:	2201      	movs	r2, #1
1000fcee:	4013      	ands	r3, r2
1000fcf0:	d029      	beq.n	1000fd46 <uart_rx0_isr_handler+0xc6>
		_uart_read(module);
1000fcf2:	68fb      	ldr	r3, [r7, #12]
1000fcf4:	0018      	movs	r0, r3
1000fcf6:	4b17      	ldr	r3, [pc, #92]	; (1000fd54 <uart_rx0_isr_handler+0xd4>)
1000fcf8:	4798      	blx	r3
		if (module->remaining_rx_buffer_length == 0) {
1000fcfa:	68fb      	ldr	r3, [r7, #12]
1000fcfc:	8b9b      	ldrh	r3, [r3, #28]
1000fcfe:	b29b      	uxth	r3, r3
1000fd00:	2b00      	cmp	r3, #0
1000fd02:	d120      	bne.n	1000fd46 <uart_rx0_isr_handler+0xc6>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000fd04:	68fb      	ldr	r3, [r7, #12]
1000fd06:	2221      	movs	r2, #33	; 0x21
1000fd08:	5c9b      	ldrb	r3, [r3, r2]
1000fd0a:	001a      	movs	r2, r3
1000fd0c:	2304      	movs	r3, #4
1000fd0e:	4013      	ands	r3, r2
1000fd10:	d019      	beq.n	1000fd46 <uart_rx0_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000fd12:	68fb      	ldr	r3, [r7, #12]
1000fd14:	2220      	movs	r2, #32
1000fd16:	5c9b      	ldrb	r3, [r3, r2]
1000fd18:	001a      	movs	r2, r3
1000fd1a:	2304      	movs	r3, #4
1000fd1c:	4013      	ands	r3, r2
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000fd1e:	d012      	beq.n	1000fd46 <uart_rx0_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000fd20:	68fb      	ldr	r3, [r7, #12]
1000fd22:	2222      	movs	r2, #34	; 0x22
1000fd24:	2100      	movs	r1, #0
1000fd26:	5499      	strb	r1, [r3, r2]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000fd28:	68fb      	ldr	r3, [r7, #12]
1000fd2a:	681a      	ldr	r2, [r3, #0]
1000fd2c:	68fb      	ldr	r3, [r7, #12]
1000fd2e:	681b      	ldr	r3, [r3, #0]
1000fd30:	7e1b      	ldrb	r3, [r3, #24]
1000fd32:	b2db      	uxtb	r3, r3
1000fd34:	2101      	movs	r1, #1
1000fd36:	438b      	bics	r3, r1
1000fd38:	b2db      	uxtb	r3, r3
1000fd3a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000fd3c:	68fb      	ldr	r3, [r7, #12]
1000fd3e:	68db      	ldr	r3, [r3, #12]
1000fd40:	68fa      	ldr	r2, [r7, #12]
1000fd42:	0010      	movs	r0, r2
1000fd44:	4798      	blx	r3
			}
		}
	}
}
1000fd46:	46c0      	nop			; (mov r8, r8)
1000fd48:	46bd      	mov	sp, r7
1000fd4a:	b004      	add	sp, #16
1000fd4c:	bd80      	pop	{r7, pc}
1000fd4e:	46c0      	nop			; (mov r8, r8)
1000fd50:	1001c38c 	.word	0x1001c38c
1000fd54:	1000fc39 	.word	0x1000fc39

1000fd58 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000fd58:	b580      	push	{r7, lr}
1000fd5a:	b082      	sub	sp, #8
1000fd5c:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[0];
1000fd5e:	4b34      	ldr	r3, [pc, #208]	; (1000fe30 <uart_tx0_isr_handler+0xd8>)
1000fd60:	681b      	ldr	r3, [r3, #0]
1000fd62:	607b      	str	r3, [r7, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000fd64:	687b      	ldr	r3, [r7, #4]
1000fd66:	681b      	ldr	r3, [r3, #0]
1000fd68:	791b      	ldrb	r3, [r3, #4]
1000fd6a:	b2db      	uxtb	r3, r3
1000fd6c:	603b      	str	r3, [r7, #0]
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000fd6e:	683b      	ldr	r3, [r7, #0]
1000fd70:	2201      	movs	r2, #1
1000fd72:	4013      	ands	r3, r2
1000fd74:	d01c      	beq.n	1000fdb0 <uart_tx0_isr_handler+0x58>
		_uart_write(module);
1000fd76:	687b      	ldr	r3, [r7, #4]
1000fd78:	0018      	movs	r0, r3
1000fd7a:	4b2e      	ldr	r3, [pc, #184]	; (1000fe34 <uart_tx0_isr_handler+0xdc>)
1000fd7c:	4798      	blx	r3
		if (module->remaining_tx_buffer_length == 0) {
1000fd7e:	687b      	ldr	r3, [r7, #4]
1000fd80:	8bdb      	ldrh	r3, [r3, #30]
1000fd82:	b29b      	uxth	r3, r3
1000fd84:	2b00      	cmp	r3, #0
1000fd86:	d113      	bne.n	1000fdb0 <uart_tx0_isr_handler+0x58>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000fd88:	687b      	ldr	r3, [r7, #4]
1000fd8a:	681a      	ldr	r2, [r3, #0]
1000fd8c:	687b      	ldr	r3, [r7, #4]
1000fd8e:	681b      	ldr	r3, [r3, #0]
1000fd90:	7a1b      	ldrb	r3, [r3, #8]
1000fd92:	b2db      	uxtb	r3, r3
1000fd94:	2101      	movs	r1, #1
1000fd96:	438b      	bics	r3, r1
1000fd98:	b2db      	uxtb	r3, r3
1000fd9a:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000fd9c:	687b      	ldr	r3, [r7, #4]
1000fd9e:	681a      	ldr	r2, [r3, #0]
1000fda0:	687b      	ldr	r3, [r7, #4]
1000fda2:	681b      	ldr	r3, [r3, #0]
1000fda4:	7a1b      	ldrb	r3, [r3, #8]
1000fda6:	b2db      	uxtb	r3, r3
1000fda8:	2110      	movs	r1, #16
1000fdaa:	430b      	orrs	r3, r1
1000fdac:	b2db      	uxtb	r3, r3
1000fdae:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000fdb0:	683b      	ldr	r3, [r7, #0]
1000fdb2:	2210      	movs	r2, #16
1000fdb4:	4013      	ands	r3, r2
1000fdb6:	d020      	beq.n	1000fdfa <uart_tx0_isr_handler+0xa2>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000fdb8:	687b      	ldr	r3, [r7, #4]
1000fdba:	2221      	movs	r2, #33	; 0x21
1000fdbc:	5c9b      	ldrb	r3, [r3, r2]
1000fdbe:	001a      	movs	r2, r3
1000fdc0:	2301      	movs	r3, #1
1000fdc2:	4013      	ands	r3, r2
1000fdc4:	d019      	beq.n	1000fdfa <uart_tx0_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000fdc6:	687b      	ldr	r3, [r7, #4]
1000fdc8:	2220      	movs	r2, #32
1000fdca:	5c9b      	ldrb	r3, [r3, r2]
1000fdcc:	001a      	movs	r2, r3
1000fdce:	2301      	movs	r3, #1
1000fdd0:	4013      	ands	r3, r2
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000fdd2:	d012      	beq.n	1000fdfa <uart_tx0_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000fdd4:	687b      	ldr	r3, [r7, #4]
1000fdd6:	2222      	movs	r2, #34	; 0x22
1000fdd8:	2100      	movs	r1, #0
1000fdda:	5499      	strb	r1, [r3, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000fddc:	687b      	ldr	r3, [r7, #4]
1000fdde:	681a      	ldr	r2, [r3, #0]
1000fde0:	687b      	ldr	r3, [r7, #4]
1000fde2:	681b      	ldr	r3, [r3, #0]
1000fde4:	7a1b      	ldrb	r3, [r3, #8]
1000fde6:	b2db      	uxtb	r3, r3
1000fde8:	2110      	movs	r1, #16
1000fdea:	438b      	bics	r3, r1
1000fdec:	b2db      	uxtb	r3, r3
1000fdee:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000fdf0:	687b      	ldr	r3, [r7, #4]
1000fdf2:	685b      	ldr	r3, [r3, #4]
1000fdf4:	687a      	ldr	r2, [r7, #4]
1000fdf6:	0010      	movs	r0, r2
1000fdf8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000fdfa:	683b      	ldr	r3, [r7, #0]
1000fdfc:	2220      	movs	r2, #32
1000fdfe:	4013      	ands	r3, r2
1000fe00:	d012      	beq.n	1000fe28 <uart_tx0_isr_handler+0xd0>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000fe02:	687b      	ldr	r3, [r7, #4]
1000fe04:	2221      	movs	r2, #33	; 0x21
1000fe06:	5c9b      	ldrb	r3, [r3, r2]
1000fe08:	001a      	movs	r2, r3
1000fe0a:	2302      	movs	r3, #2
1000fe0c:	4013      	ands	r3, r2
1000fe0e:	d00b      	beq.n	1000fe28 <uart_tx0_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000fe10:	687b      	ldr	r3, [r7, #4]
1000fe12:	2220      	movs	r2, #32
1000fe14:	5c9b      	ldrb	r3, [r3, r2]
1000fe16:	001a      	movs	r2, r3
1000fe18:	2302      	movs	r3, #2
1000fe1a:	4013      	ands	r3, r2
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000fe1c:	d004      	beq.n	1000fe28 <uart_tx0_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000fe1e:	687b      	ldr	r3, [r7, #4]
1000fe20:	689b      	ldr	r3, [r3, #8]
1000fe22:	687a      	ldr	r2, [r7, #4]
1000fe24:	0010      	movs	r0, r2
1000fe26:	4798      	blx	r3
		}

	}
}
1000fe28:	46c0      	nop			; (mov r8, r8)
1000fe2a:	46bd      	mov	sp, r7
1000fe2c:	b002      	add	sp, #8
1000fe2e:	bd80      	pop	{r7, pc}
1000fe30:	1001c38c 	.word	0x1001c38c
1000fe34:	1000fbf5 	.word	0x1000fbf5

1000fe38 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000fe38:	b580      	push	{r7, lr}
1000fe3a:	b084      	sub	sp, #16
1000fe3c:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[1];
1000fe3e:	4b32      	ldr	r3, [pc, #200]	; (1000ff08 <uart_rx1_isr_handler+0xd0>)
1000fe40:	685b      	ldr	r3, [r3, #4]
1000fe42:	60fb      	str	r3, [r7, #12]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000fe44:	68fb      	ldr	r3, [r7, #12]
1000fe46:	681b      	ldr	r3, [r3, #0]
1000fe48:	7d1b      	ldrb	r3, [r3, #20]
1000fe4a:	b2db      	uxtb	r3, r3
1000fe4c:	60bb      	str	r3, [r7, #8]
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000fe4e:	68bb      	ldr	r3, [r7, #8]
1000fe50:	2240      	movs	r2, #64	; 0x40
1000fe52:	4013      	ands	r3, r2
1000fe54:	d025      	beq.n	1000fea2 <uart_rx1_isr_handler+0x6a>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000fe56:	68fb      	ldr	r3, [r7, #12]
1000fe58:	2222      	movs	r2, #34	; 0x22
1000fe5a:	211e      	movs	r1, #30
1000fe5c:	5499      	strb	r1, [r3, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000fe5e:	68fb      	ldr	r3, [r7, #12]
1000fe60:	681a      	ldr	r2, [r3, #0]
1000fe62:	68fb      	ldr	r3, [r7, #12]
1000fe64:	681b      	ldr	r3, [r3, #0]
1000fe66:	7e1b      	ldrb	r3, [r3, #24]
1000fe68:	b2db      	uxtb	r3, r3
1000fe6a:	2141      	movs	r1, #65	; 0x41
1000fe6c:	438b      	bics	r3, r1
1000fe6e:	b2db      	uxtb	r3, r3
1000fe70:	7613      	strb	r3, [r2, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000fe72:	68fb      	ldr	r3, [r7, #12]
1000fe74:	2221      	movs	r2, #33	; 0x21
1000fe76:	5c9b      	ldrb	r3, [r3, r2]
1000fe78:	001a      	movs	r2, r3
1000fe7a:	2308      	movs	r3, #8
1000fe7c:	4013      	ands	r3, r2
1000fe7e:	d00b      	beq.n	1000fe98 <uart_rx1_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000fe80:	68fb      	ldr	r3, [r7, #12]
1000fe82:	2220      	movs	r2, #32
1000fe84:	5c9b      	ldrb	r3, [r3, r2]
1000fe86:	001a      	movs	r2, r3
1000fe88:	2308      	movs	r3, #8
1000fe8a:	4013      	ands	r3, r2
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000fe8c:	d004      	beq.n	1000fe98 <uart_rx1_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000fe8e:	68fb      	ldr	r3, [r7, #12]
1000fe90:	691b      	ldr	r3, [r3, #16]
1000fe92:	68fa      	ldr	r2, [r7, #12]
1000fe94:	0010      	movs	r0, r2
1000fe96:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000fe98:	68fb      	ldr	r3, [r7, #12]
1000fe9a:	681a      	ldr	r2, [r3, #0]
1000fe9c:	1dfb      	adds	r3, r7, #7
1000fe9e:	7c12      	ldrb	r2, [r2, #16]
1000fea0:	701a      	strb	r2, [r3, #0]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000fea2:	68bb      	ldr	r3, [r7, #8]
1000fea4:	2201      	movs	r2, #1
1000fea6:	4013      	ands	r3, r2
1000fea8:	d029      	beq.n	1000fefe <uart_rx1_isr_handler+0xc6>
		_uart_read(module);
1000feaa:	68fb      	ldr	r3, [r7, #12]
1000feac:	0018      	movs	r0, r3
1000feae:	4b17      	ldr	r3, [pc, #92]	; (1000ff0c <uart_rx1_isr_handler+0xd4>)
1000feb0:	4798      	blx	r3
		if (module->remaining_rx_buffer_length == 0) {
1000feb2:	68fb      	ldr	r3, [r7, #12]
1000feb4:	8b9b      	ldrh	r3, [r3, #28]
1000feb6:	b29b      	uxth	r3, r3
1000feb8:	2b00      	cmp	r3, #0
1000feba:	d120      	bne.n	1000fefe <uart_rx1_isr_handler+0xc6>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000febc:	68fb      	ldr	r3, [r7, #12]
1000febe:	2221      	movs	r2, #33	; 0x21
1000fec0:	5c9b      	ldrb	r3, [r3, r2]
1000fec2:	001a      	movs	r2, r3
1000fec4:	2304      	movs	r3, #4
1000fec6:	4013      	ands	r3, r2
1000fec8:	d019      	beq.n	1000fefe <uart_rx1_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000feca:	68fb      	ldr	r3, [r7, #12]
1000fecc:	2220      	movs	r2, #32
1000fece:	5c9b      	ldrb	r3, [r3, r2]
1000fed0:	001a      	movs	r2, r3
1000fed2:	2304      	movs	r3, #4
1000fed4:	4013      	ands	r3, r2
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000fed6:	d012      	beq.n	1000fefe <uart_rx1_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000fed8:	68fb      	ldr	r3, [r7, #12]
1000feda:	2222      	movs	r2, #34	; 0x22
1000fedc:	2100      	movs	r1, #0
1000fede:	5499      	strb	r1, [r3, r2]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000fee0:	68fb      	ldr	r3, [r7, #12]
1000fee2:	681a      	ldr	r2, [r3, #0]
1000fee4:	68fb      	ldr	r3, [r7, #12]
1000fee6:	681b      	ldr	r3, [r3, #0]
1000fee8:	7e1b      	ldrb	r3, [r3, #24]
1000feea:	b2db      	uxtb	r3, r3
1000feec:	2101      	movs	r1, #1
1000feee:	438b      	bics	r3, r1
1000fef0:	b2db      	uxtb	r3, r3
1000fef2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000fef4:	68fb      	ldr	r3, [r7, #12]
1000fef6:	68db      	ldr	r3, [r3, #12]
1000fef8:	68fa      	ldr	r2, [r7, #12]
1000fefa:	0010      	movs	r0, r2
1000fefc:	4798      	blx	r3
			}
		}
	}
}
1000fefe:	46c0      	nop			; (mov r8, r8)
1000ff00:	46bd      	mov	sp, r7
1000ff02:	b004      	add	sp, #16
1000ff04:	bd80      	pop	{r7, pc}
1000ff06:	46c0      	nop			; (mov r8, r8)
1000ff08:	1001c38c 	.word	0x1001c38c
1000ff0c:	1000fc39 	.word	0x1000fc39

1000ff10 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000ff10:	b580      	push	{r7, lr}
1000ff12:	b082      	sub	sp, #8
1000ff14:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[1];
1000ff16:	4b34      	ldr	r3, [pc, #208]	; (1000ffe8 <uart_tx1_isr_handler+0xd8>)
1000ff18:	685b      	ldr	r3, [r3, #4]
1000ff1a:	607b      	str	r3, [r7, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ff1c:	687b      	ldr	r3, [r7, #4]
1000ff1e:	681b      	ldr	r3, [r3, #0]
1000ff20:	791b      	ldrb	r3, [r3, #4]
1000ff22:	b2db      	uxtb	r3, r3
1000ff24:	603b      	str	r3, [r7, #0]
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ff26:	683b      	ldr	r3, [r7, #0]
1000ff28:	2201      	movs	r2, #1
1000ff2a:	4013      	ands	r3, r2
1000ff2c:	d01c      	beq.n	1000ff68 <uart_tx1_isr_handler+0x58>
		_uart_write(module);
1000ff2e:	687b      	ldr	r3, [r7, #4]
1000ff30:	0018      	movs	r0, r3
1000ff32:	4b2e      	ldr	r3, [pc, #184]	; (1000ffec <uart_tx1_isr_handler+0xdc>)
1000ff34:	4798      	blx	r3
		if (module->remaining_tx_buffer_length == 0) {
1000ff36:	687b      	ldr	r3, [r7, #4]
1000ff38:	8bdb      	ldrh	r3, [r3, #30]
1000ff3a:	b29b      	uxth	r3, r3
1000ff3c:	2b00      	cmp	r3, #0
1000ff3e:	d113      	bne.n	1000ff68 <uart_tx1_isr_handler+0x58>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ff40:	687b      	ldr	r3, [r7, #4]
1000ff42:	681a      	ldr	r2, [r3, #0]
1000ff44:	687b      	ldr	r3, [r7, #4]
1000ff46:	681b      	ldr	r3, [r3, #0]
1000ff48:	7a1b      	ldrb	r3, [r3, #8]
1000ff4a:	b2db      	uxtb	r3, r3
1000ff4c:	2101      	movs	r1, #1
1000ff4e:	438b      	bics	r3, r1
1000ff50:	b2db      	uxtb	r3, r3
1000ff52:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000ff54:	687b      	ldr	r3, [r7, #4]
1000ff56:	681a      	ldr	r2, [r3, #0]
1000ff58:	687b      	ldr	r3, [r7, #4]
1000ff5a:	681b      	ldr	r3, [r3, #0]
1000ff5c:	7a1b      	ldrb	r3, [r3, #8]
1000ff5e:	b2db      	uxtb	r3, r3
1000ff60:	2110      	movs	r1, #16
1000ff62:	430b      	orrs	r3, r1
1000ff64:	b2db      	uxtb	r3, r3
1000ff66:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ff68:	683b      	ldr	r3, [r7, #0]
1000ff6a:	2210      	movs	r2, #16
1000ff6c:	4013      	ands	r3, r2
1000ff6e:	d020      	beq.n	1000ffb2 <uart_tx1_isr_handler+0xa2>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ff70:	687b      	ldr	r3, [r7, #4]
1000ff72:	2221      	movs	r2, #33	; 0x21
1000ff74:	5c9b      	ldrb	r3, [r3, r2]
1000ff76:	001a      	movs	r2, r3
1000ff78:	2301      	movs	r3, #1
1000ff7a:	4013      	ands	r3, r2
1000ff7c:	d019      	beq.n	1000ffb2 <uart_tx1_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ff7e:	687b      	ldr	r3, [r7, #4]
1000ff80:	2220      	movs	r2, #32
1000ff82:	5c9b      	ldrb	r3, [r3, r2]
1000ff84:	001a      	movs	r2, r3
1000ff86:	2301      	movs	r3, #1
1000ff88:	4013      	ands	r3, r2
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ff8a:	d012      	beq.n	1000ffb2 <uart_tx1_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ff8c:	687b      	ldr	r3, [r7, #4]
1000ff8e:	2222      	movs	r2, #34	; 0x22
1000ff90:	2100      	movs	r1, #0
1000ff92:	5499      	strb	r1, [r3, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ff94:	687b      	ldr	r3, [r7, #4]
1000ff96:	681a      	ldr	r2, [r3, #0]
1000ff98:	687b      	ldr	r3, [r7, #4]
1000ff9a:	681b      	ldr	r3, [r3, #0]
1000ff9c:	7a1b      	ldrb	r3, [r3, #8]
1000ff9e:	b2db      	uxtb	r3, r3
1000ffa0:	2110      	movs	r1, #16
1000ffa2:	438b      	bics	r3, r1
1000ffa4:	b2db      	uxtb	r3, r3
1000ffa6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ffa8:	687b      	ldr	r3, [r7, #4]
1000ffaa:	685b      	ldr	r3, [r3, #4]
1000ffac:	687a      	ldr	r2, [r7, #4]
1000ffae:	0010      	movs	r0, r2
1000ffb0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ffb2:	683b      	ldr	r3, [r7, #0]
1000ffb4:	2220      	movs	r2, #32
1000ffb6:	4013      	ands	r3, r2
1000ffb8:	d012      	beq.n	1000ffe0 <uart_tx1_isr_handler+0xd0>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ffba:	687b      	ldr	r3, [r7, #4]
1000ffbc:	2221      	movs	r2, #33	; 0x21
1000ffbe:	5c9b      	ldrb	r3, [r3, r2]
1000ffc0:	001a      	movs	r2, r3
1000ffc2:	2302      	movs	r3, #2
1000ffc4:	4013      	ands	r3, r2
1000ffc6:	d00b      	beq.n	1000ffe0 <uart_tx1_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000ffc8:	687b      	ldr	r3, [r7, #4]
1000ffca:	2220      	movs	r2, #32
1000ffcc:	5c9b      	ldrb	r3, [r3, r2]
1000ffce:	001a      	movs	r2, r3
1000ffd0:	2302      	movs	r3, #2
1000ffd2:	4013      	ands	r3, r2
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ffd4:	d004      	beq.n	1000ffe0 <uart_tx1_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000ffd6:	687b      	ldr	r3, [r7, #4]
1000ffd8:	689b      	ldr	r3, [r3, #8]
1000ffda:	687a      	ldr	r2, [r7, #4]
1000ffdc:	0010      	movs	r0, r2
1000ffde:	4798      	blx	r3
		}

	}
}
1000ffe0:	46c0      	nop			; (mov r8, r8)
1000ffe2:	46bd      	mov	sp, r7
1000ffe4:	b002      	add	sp, #8
1000ffe6:	bd80      	pop	{r7, pc}
1000ffe8:	1001c38c 	.word	0x1001c38c
1000ffec:	1000fbf5 	.word	0x1000fbf5

1000fff0 <uart_set_baudrate>:

static void uart_set_baudrate(struct uart_module *const module,
		const uint32_t baud_rate)
{
1000fff0:	b580      	push	{r7, lr}
1000fff2:	b086      	sub	sp, #24
1000fff4:	af00      	add	r7, sp, #0
1000fff6:	6078      	str	r0, [r7, #4]
1000fff8:	6039      	str	r1, [r7, #0]
	uint32_t clock;
	uint16_t integerpart = 0;
1000fffa:	2310      	movs	r3, #16
1000fffc:	18fb      	adds	r3, r7, r3
1000fffe:	2200      	movs	r2, #0
10010000:	801a      	strh	r2, [r3, #0]
	uint8_t fractionalpart = 0;
10010002:	230f      	movs	r3, #15
10010004:	18fb      	adds	r3, r7, r3
10010006:	2200      	movs	r2, #0
10010008:	701a      	strb	r2, [r3, #0]
	uint32_t diff;
	uint8_t i = 0;
1001000a:	2313      	movs	r3, #19
1001000c:	18fb      	adds	r3, r7, r3
1001000e:	2200      	movs	r2, #0
10010010:	701a      	strb	r2, [r3, #0]

	clock = system_clock_get_value();
10010012:	4b28      	ldr	r3, [pc, #160]	; (100100b4 <uart_set_baudrate+0xc4>)
10010014:	4798      	blx	r3
10010016:	0003      	movs	r3, r0
10010018:	60bb      	str	r3, [r7, #8]
	integerpart = clock / baud_rate;
1001001a:	4b27      	ldr	r3, [pc, #156]	; (100100b8 <uart_set_baudrate+0xc8>)
1001001c:	6839      	ldr	r1, [r7, #0]
1001001e:	68b8      	ldr	r0, [r7, #8]
10010020:	4798      	blx	r3
10010022:	0003      	movs	r3, r0
10010024:	001a      	movs	r2, r3
10010026:	2310      	movs	r3, #16
10010028:	18fb      	adds	r3, r7, r3
1001002a:	801a      	strh	r2, [r3, #0]
	diff = clock - (baud_rate * integerpart);
1001002c:	2310      	movs	r3, #16
1001002e:	18fb      	adds	r3, r7, r3
10010030:	881b      	ldrh	r3, [r3, #0]
10010032:	683a      	ldr	r2, [r7, #0]
10010034:	4353      	muls	r3, r2
10010036:	68ba      	ldr	r2, [r7, #8]
10010038:	1ad3      	subs	r3, r2, r3
1001003a:	617b      	str	r3, [r7, #20]
	i = 0;
1001003c:	2313      	movs	r3, #19
1001003e:	18fb      	adds	r3, r7, r3
10010040:	2200      	movs	r2, #0
10010042:	701a      	strb	r2, [r3, #0]
	while(diff > (baud_rate / 16)) {
10010044:	e00b      	b.n	1001005e <uart_set_baudrate+0x6e>
		i++;
10010046:	2313      	movs	r3, #19
10010048:	18fb      	adds	r3, r7, r3
1001004a:	781a      	ldrb	r2, [r3, #0]
1001004c:	2313      	movs	r3, #19
1001004e:	18fb      	adds	r3, r7, r3
10010050:	3201      	adds	r2, #1
10010052:	701a      	strb	r2, [r3, #0]
		diff -= (baud_rate / 16);
10010054:	683b      	ldr	r3, [r7, #0]
10010056:	091b      	lsrs	r3, r3, #4
10010058:	697a      	ldr	r2, [r7, #20]
1001005a:	1ad3      	subs	r3, r2, r3
1001005c:	617b      	str	r3, [r7, #20]

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1001005e:	683b      	ldr	r3, [r7, #0]
10010060:	091a      	lsrs	r2, r3, #4
10010062:	697b      	ldr	r3, [r7, #20]
10010064:	429a      	cmp	r2, r3
10010066:	d3ee      	bcc.n	10010046 <uart_set_baudrate+0x56>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;
10010068:	2313      	movs	r3, #19
1001006a:	18fb      	adds	r3, r7, r3
1001006c:	781b      	ldrb	r3, [r3, #0]
1001006e:	3301      	adds	r3, #1
10010070:	2b00      	cmp	r3, #0
10010072:	da00      	bge.n	10010076 <uart_set_baudrate+0x86>
10010074:	3301      	adds	r3, #1
10010076:	105b      	asrs	r3, r3, #1
10010078:	001a      	movs	r2, r3
1001007a:	230f      	movs	r3, #15
1001007c:	18fb      	adds	r3, r7, r3
1001007e:	701a      	strb	r2, [r3, #0]

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10010080:	687b      	ldr	r3, [r7, #4]
10010082:	681b      	ldr	r3, [r3, #0]
10010084:	2228      	movs	r2, #40	; 0x28
10010086:	2100      	movs	r1, #0
10010088:	5499      	strb	r1, [r3, r2]
	module->hw->UART_BAUD_RATE.reg =
1001008a:	687b      	ldr	r3, [r7, #4]
1001008c:	681b      	ldr	r3, [r3, #0]
1001008e:	2210      	movs	r2, #16
10010090:	18ba      	adds	r2, r7, r2
10010092:	8812      	ldrh	r2, [r2, #0]
10010094:	00d2      	lsls	r2, r2, #3
10010096:	b291      	uxth	r1, r2
10010098:	220f      	movs	r2, #15
1001009a:	18ba      	adds	r2, r7, r2
1001009c:	7812      	ldrb	r2, [r2, #0]
1001009e:	b292      	uxth	r2, r2
100100a0:	2007      	movs	r0, #7
100100a2:	4002      	ands	r2, r0
100100a4:	b292      	uxth	r2, r2
100100a6:	430a      	orrs	r2, r1
100100a8:	b292      	uxth	r2, r2
100100aa:	849a      	strh	r2, [r3, #36]	; 0x24
		UART_UART_BAUD_RATE_INTEGER_DIVISION(integerpart) |
		UART_UART_BAUD_RATE_FRACTIONAL_DIVISION(fractionalpart);
}
100100ac:	46c0      	nop			; (mov r8, r8)
100100ae:	46bd      	mov	sp, r7
100100b0:	b006      	add	sp, #24
100100b2:	bd80      	pop	{r7, pc}
100100b4:	1000eed5 	.word	0x1000eed5
100100b8:	100170a5 	.word	0x100170a5

100100bc <uart_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
100100bc:	b580      	push	{r7, lr}
100100be:	b082      	sub	sp, #8
100100c0:	af00      	add	r7, sp, #0
100100c2:	6078      	str	r0, [r7, #4]
	config->baud_rate = 115200;
100100c4:	687b      	ldr	r3, [r7, #4]
100100c6:	22e1      	movs	r2, #225	; 0xe1
100100c8:	0252      	lsls	r2, r2, #9
100100ca:	601a      	str	r2, [r3, #0]
	config->data_bits = UART_8_BITS;
100100cc:	687b      	ldr	r3, [r7, #4]
100100ce:	2200      	movs	r2, #0
100100d0:	711a      	strb	r2, [r3, #4]
	config->stop_bits = UART_1_STOP_BIT;
100100d2:	687b      	ldr	r3, [r7, #4]
100100d4:	2200      	movs	r2, #0
100100d6:	715a      	strb	r2, [r3, #5]
	config->parity = UART_NO_PARITY;
100100d8:	687b      	ldr	r3, [r7, #4]
100100da:	2200      	movs	r2, #0
100100dc:	719a      	strb	r2, [r3, #6]
	config->flow_control = false;
100100de:	687b      	ldr	r3, [r7, #4]
100100e0:	2200      	movs	r2, #0
100100e2:	71da      	strb	r2, [r3, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
100100e4:	687b      	ldr	r3, [r7, #4]
100100e6:	2202      	movs	r2, #2
100100e8:	609a      	str	r2, [r3, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
100100ea:	687b      	ldr	r3, [r7, #4]
100100ec:	2203      	movs	r2, #3
100100ee:	60da      	str	r2, [r3, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
100100f0:	687b      	ldr	r3, [r7, #4]
100100f2:	2204      	movs	r2, #4
100100f4:	611a      	str	r2, [r3, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
100100f6:	687b      	ldr	r3, [r7, #4]
100100f8:	2205      	movs	r2, #5
100100fa:	615a      	str	r2, [r3, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
100100fc:	687b      	ldr	r3, [r7, #4]
100100fe:	2202      	movs	r2, #2
10010100:	619a      	str	r2, [r3, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10010102:	687b      	ldr	r3, [r7, #4]
10010104:	2202      	movs	r2, #2
10010106:	61da      	str	r2, [r3, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10010108:	687b      	ldr	r3, [r7, #4]
1001010a:	2202      	movs	r2, #2
1001010c:	621a      	str	r2, [r3, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1001010e:	687b      	ldr	r3, [r7, #4]
10010110:	2202      	movs	r2, #2
10010112:	625a      	str	r2, [r3, #36]	; 0x24
}
10010114:	46c0      	nop			; (mov r8, r8)
10010116:	46bd      	mov	sp, r7
10010118:	b002      	add	sp, #8
1001011a:	bd80      	pop	{r7, pc}

1001011c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1001011c:	b580      	push	{r7, lr}
1001011e:	b086      	sub	sp, #24
10010120:	af00      	add	r7, sp, #0
10010122:	60f8      	str	r0, [r7, #12]
10010124:	60b9      	str	r1, [r7, #8]
10010126:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
10010128:	2317      	movs	r3, #23
1001012a:	18fb      	adds	r3, r7, r3
1001012c:	2200      	movs	r2, #0
1001012e:	701a      	strb	r2, [r3, #0]
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10010130:	68fb      	ldr	r3, [r7, #12]
10010132:	68ba      	ldr	r2, [r7, #8]
10010134:	601a      	str	r2, [r3, #0]

	if (hw == UART0) {
10010136:	68bb      	ldr	r3, [r7, #8]
10010138:	4a8c      	ldr	r2, [pc, #560]	; (1001036c <uart_init+0x250>)
1001013a:	4293      	cmp	r3, r2
1001013c:	d11f      	bne.n	1001017e <uart_init+0x62>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1001013e:	2009      	movs	r0, #9
10010140:	4b8b      	ldr	r3, [pc, #556]	; (10010370 <uart_init+0x254>)
10010142:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10010144:	200a      	movs	r0, #10
10010146:	4b8a      	ldr	r3, [pc, #552]	; (10010370 <uart_init+0x254>)
10010148:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1001014a:	2009      	movs	r0, #9
1001014c:	4b89      	ldr	r3, [pc, #548]	; (10010374 <uart_init+0x258>)
1001014e:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10010150:	200a      	movs	r0, #10
10010152:	4b88      	ldr	r3, [pc, #544]	; (10010374 <uart_init+0x258>)
10010154:	4798      	blx	r3
		_uart_instances[0] = module;
10010156:	4b88      	ldr	r3, [pc, #544]	; (10010378 <uart_init+0x25c>)
10010158:	68fa      	ldr	r2, [r7, #12]
1001015a:	601a      	str	r2, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1001015c:	4b87      	ldr	r3, [pc, #540]	; (1001037c <uart_init+0x260>)
1001015e:	0019      	movs	r1, r3
10010160:	2010      	movs	r0, #16
10010162:	4b87      	ldr	r3, [pc, #540]	; (10010380 <uart_init+0x264>)
10010164:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10010166:	4b87      	ldr	r3, [pc, #540]	; (10010384 <uart_init+0x268>)
10010168:	0019      	movs	r1, r3
1001016a:	2011      	movs	r0, #17
1001016c:	4b84      	ldr	r3, [pc, #528]	; (10010380 <uart_init+0x264>)
1001016e:	4798      	blx	r3
		NVIC_EnableIRQ(UART0_RX_IRQn);
10010170:	2000      	movs	r0, #0
10010172:	4b85      	ldr	r3, [pc, #532]	; (10010388 <uart_init+0x26c>)
10010174:	4798      	blx	r3
		NVIC_EnableIRQ(UART0_TX_IRQn);
10010176:	2001      	movs	r0, #1
10010178:	4b83      	ldr	r3, [pc, #524]	; (10010388 <uart_init+0x26c>)
1001017a:	4798      	blx	r3
1001017c:	e022      	b.n	100101c4 <uart_init+0xa8>
	} else if (hw == UART1) {
1001017e:	68bb      	ldr	r3, [r7, #8]
10010180:	4a82      	ldr	r2, [pc, #520]	; (1001038c <uart_init+0x270>)
10010182:	4293      	cmp	r3, r2
10010184:	d11e      	bne.n	100101c4 <uart_init+0xa8>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10010186:	200b      	movs	r0, #11
10010188:	4b79      	ldr	r3, [pc, #484]	; (10010370 <uart_init+0x254>)
1001018a:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1001018c:	200c      	movs	r0, #12
1001018e:	4b78      	ldr	r3, [pc, #480]	; (10010370 <uart_init+0x254>)
10010190:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10010192:	200b      	movs	r0, #11
10010194:	4b77      	ldr	r3, [pc, #476]	; (10010374 <uart_init+0x258>)
10010196:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10010198:	200c      	movs	r0, #12
1001019a:	4b76      	ldr	r3, [pc, #472]	; (10010374 <uart_init+0x258>)
1001019c:	4798      	blx	r3
		_uart_instances[1] = module;
1001019e:	4b76      	ldr	r3, [pc, #472]	; (10010378 <uart_init+0x25c>)
100101a0:	68fa      	ldr	r2, [r7, #12]
100101a2:	605a      	str	r2, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
100101a4:	4b7a      	ldr	r3, [pc, #488]	; (10010390 <uart_init+0x274>)
100101a6:	0019      	movs	r1, r3
100101a8:	2012      	movs	r0, #18
100101aa:	4b75      	ldr	r3, [pc, #468]	; (10010380 <uart_init+0x264>)
100101ac:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100101ae:	4b79      	ldr	r3, [pc, #484]	; (10010394 <uart_init+0x278>)
100101b0:	0019      	movs	r1, r3
100101b2:	2013      	movs	r0, #19
100101b4:	4b72      	ldr	r3, [pc, #456]	; (10010380 <uart_init+0x264>)
100101b6:	4798      	blx	r3
		NVIC_EnableIRQ(UART1_RX_IRQn);
100101b8:	2002      	movs	r0, #2
100101ba:	4b73      	ldr	r3, [pc, #460]	; (10010388 <uart_init+0x26c>)
100101bc:	4798      	blx	r3
		NVIC_EnableIRQ(UART1_TX_IRQn);
100101be:	2003      	movs	r0, #3
100101c0:	4b71      	ldr	r3, [pc, #452]	; (10010388 <uart_init+0x26c>)
100101c2:	4798      	blx	r3
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100101c4:	687b      	ldr	r3, [r7, #4]
100101c6:	79db      	ldrb	r3, [r3, #7]
100101c8:	2b00      	cmp	r3, #0
100101ca:	d004      	beq.n	100101d6 <uart_init+0xba>
		index = 4;
100101cc:	2315      	movs	r3, #21
100101ce:	18fb      	adds	r3, r7, r3
100101d0:	2204      	movs	r2, #4
100101d2:	701a      	strb	r2, [r3, #0]
100101d4:	e003      	b.n	100101de <uart_init+0xc2>
	} else {
		index = 2;
100101d6:	2315      	movs	r3, #21
100101d8:	18fb      	adds	r3, r7, r3
100101da:	2202      	movs	r2, #2
100101dc:	701a      	strb	r2, [r3, #0]
	}
	for(i = 0; i < index; i++) {
100101de:	2316      	movs	r3, #22
100101e0:	18fb      	adds	r3, r7, r3
100101e2:	2200      	movs	r2, #0
100101e4:	701a      	strb	r2, [r3, #0]
100101e6:	e019      	b.n	1001021c <uart_init+0x100>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100101e8:	2316      	movs	r3, #22
100101ea:	18fb      	adds	r3, r7, r3
100101ec:	781a      	ldrb	r2, [r3, #0]
100101ee:	687b      	ldr	r3, [r7, #4]
100101f0:	3202      	adds	r2, #2
100101f2:	0092      	lsls	r2, r2, #2
100101f4:	58d3      	ldr	r3, [r2, r3]
100101f6:	b2d8      	uxtb	r0, r3
								(uint16_t)(config->pinmux_sel_pad[i]));
100101f8:	2316      	movs	r3, #22
100101fa:	18fb      	adds	r3, r7, r3
100101fc:	781a      	ldrb	r2, [r3, #0]
100101fe:	687b      	ldr	r3, [r7, #4]
10010200:	3206      	adds	r2, #6
10010202:	0092      	lsls	r2, r2, #2
10010204:	58d3      	ldr	r3, [r2, r3]
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10010206:	b29b      	uxth	r3, r3
10010208:	0019      	movs	r1, r3
1001020a:	4b63      	ldr	r3, [pc, #396]	; (10010398 <uart_init+0x27c>)
1001020c:	4798      	blx	r3
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
1001020e:	2316      	movs	r3, #22
10010210:	18fb      	adds	r3, r7, r3
10010212:	781a      	ldrb	r2, [r3, #0]
10010214:	2316      	movs	r3, #22
10010216:	18fb      	adds	r3, r7, r3
10010218:	3201      	adds	r2, #1
1001021a:	701a      	strb	r2, [r3, #0]
1001021c:	2316      	movs	r3, #22
1001021e:	18fa      	adds	r2, r7, r3
10010220:	2315      	movs	r3, #21
10010222:	18fb      	adds	r3, r7, r3
10010224:	7812      	ldrb	r2, [r2, #0]
10010226:	781b      	ldrb	r3, [r3, #0]
10010228:	429a      	cmp	r2, r3
1001022a:	d3dd      	bcc.n	100101e8 <uart_init+0xcc>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1001022c:	e005      	b.n	1001023a <uart_init+0x11e>
		i = module->hw->RECEIVE_DATA.reg;
1001022e:	68fb      	ldr	r3, [r7, #12]
10010230:	681a      	ldr	r2, [r3, #0]
10010232:	2316      	movs	r3, #22
10010234:	18fb      	adds	r3, r7, r3
10010236:	7c12      	ldrb	r2, [r2, #16]
10010238:	701a      	strb	r2, [r3, #0]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1001023a:	68fb      	ldr	r3, [r7, #12]
1001023c:	681b      	ldr	r3, [r3, #0]
1001023e:	7d1b      	ldrb	r3, [r3, #20]
10010240:	b2db      	uxtb	r3, r3
10010242:	001a      	movs	r2, r3
10010244:	2301      	movs	r3, #1
10010246:	4013      	ands	r3, r2
10010248:	d1f1      	bne.n	1001022e <uart_init+0x112>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1001024a:	68fb      	ldr	r3, [r7, #12]
1001024c:	681b      	ldr	r3, [r3, #0]
1001024e:	2220      	movs	r2, #32
10010250:	2100      	movs	r1, #0
10010252:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10010254:	687b      	ldr	r3, [r7, #4]
10010256:	79db      	ldrb	r3, [r3, #7]
10010258:	2b00      	cmp	r3, #0
1001025a:	d007      	beq.n	1001026c <uart_init+0x150>
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
1001025c:	2317      	movs	r3, #23
1001025e:	18fb      	adds	r3, r7, r3
10010260:	2217      	movs	r2, #23
10010262:	18ba      	adds	r2, r7, r2
10010264:	7812      	ldrb	r2, [r2, #0]
10010266:	2120      	movs	r1, #32
10010268:	430a      	orrs	r2, r1
1001026a:	701a      	strb	r2, [r3, #0]
	}
	config_temp |= config->data_bits;
1001026c:	687b      	ldr	r3, [r7, #4]
1001026e:	7919      	ldrb	r1, [r3, #4]
10010270:	2317      	movs	r3, #23
10010272:	18fb      	adds	r3, r7, r3
10010274:	2217      	movs	r2, #23
10010276:	18ba      	adds	r2, r7, r2
10010278:	7812      	ldrb	r2, [r2, #0]
1001027a:	430a      	orrs	r2, r1
1001027c:	701a      	strb	r2, [r3, #0]
	config_temp |= config->stop_bits;
1001027e:	687b      	ldr	r3, [r7, #4]
10010280:	7959      	ldrb	r1, [r3, #5]
10010282:	2317      	movs	r3, #23
10010284:	18fb      	adds	r3, r7, r3
10010286:	2217      	movs	r2, #23
10010288:	18ba      	adds	r2, r7, r2
1001028a:	7812      	ldrb	r2, [r2, #0]
1001028c:	430a      	orrs	r2, r1
1001028e:	701a      	strb	r2, [r3, #0]
	switch(config->parity) {
10010290:	687b      	ldr	r3, [r7, #4]
10010292:	799b      	ldrb	r3, [r3, #6]
10010294:	2b04      	cmp	r3, #4
10010296:	d84d      	bhi.n	10010334 <uart_init+0x218>
10010298:	009a      	lsls	r2, r3, #2
1001029a:	4b40      	ldr	r3, [pc, #256]	; (1001039c <uart_init+0x280>)
1001029c:	18d3      	adds	r3, r2, r3
1001029e:	681b      	ldr	r3, [r3, #0]
100102a0:	469f      	mov	pc, r3
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
100102a2:	2317      	movs	r3, #23
100102a4:	18fb      	adds	r3, r7, r3
100102a6:	2217      	movs	r2, #23
100102a8:	18ba      	adds	r2, r7, r2
100102aa:	7812      	ldrb	r2, [r2, #0]
100102ac:	701a      	strb	r2, [r3, #0]
			break;
100102ae:	e042      	b.n	10010336 <uart_init+0x21a>

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100102b0:	2317      	movs	r3, #23
100102b2:	18fb      	adds	r3, r7, r3
100102b4:	2217      	movs	r2, #23
100102b6:	18ba      	adds	r2, r7, r2
100102b8:	7812      	ldrb	r2, [r2, #0]
100102ba:	2102      	movs	r1, #2
100102bc:	430a      	orrs	r2, r1
100102be:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
100102c0:	2317      	movs	r3, #23
100102c2:	18fb      	adds	r3, r7, r3
100102c4:	2217      	movs	r2, #23
100102c6:	18ba      	adds	r2, r7, r2
100102c8:	7812      	ldrb	r2, [r2, #0]
100102ca:	701a      	strb	r2, [r3, #0]
			break;
100102cc:	e033      	b.n	10010336 <uart_init+0x21a>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100102ce:	2317      	movs	r3, #23
100102d0:	18fb      	adds	r3, r7, r3
100102d2:	2217      	movs	r2, #23
100102d4:	18ba      	adds	r2, r7, r2
100102d6:	7812      	ldrb	r2, [r2, #0]
100102d8:	2102      	movs	r1, #2
100102da:	430a      	orrs	r2, r1
100102dc:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
100102de:	2317      	movs	r3, #23
100102e0:	18fb      	adds	r3, r7, r3
100102e2:	2217      	movs	r2, #23
100102e4:	18ba      	adds	r2, r7, r2
100102e6:	7812      	ldrb	r2, [r2, #0]
100102e8:	2104      	movs	r1, #4
100102ea:	430a      	orrs	r2, r1
100102ec:	701a      	strb	r2, [r3, #0]
			break;
100102ee:	e022      	b.n	10010336 <uart_init+0x21a>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
100102f0:	2317      	movs	r3, #23
100102f2:	18fb      	adds	r3, r7, r3
100102f4:	2217      	movs	r2, #23
100102f6:	18ba      	adds	r2, r7, r2
100102f8:	7812      	ldrb	r2, [r2, #0]
100102fa:	2102      	movs	r1, #2
100102fc:	430a      	orrs	r2, r1
100102fe:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10010300:	2317      	movs	r3, #23
10010302:	18fb      	adds	r3, r7, r3
10010304:	2217      	movs	r2, #23
10010306:	18ba      	adds	r2, r7, r2
10010308:	7812      	ldrb	r2, [r2, #0]
1001030a:	2108      	movs	r1, #8
1001030c:	430a      	orrs	r2, r1
1001030e:	701a      	strb	r2, [r3, #0]
			break;
10010310:	e011      	b.n	10010336 <uart_init+0x21a>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10010312:	2317      	movs	r3, #23
10010314:	18fb      	adds	r3, r7, r3
10010316:	2217      	movs	r2, #23
10010318:	18ba      	adds	r2, r7, r2
1001031a:	7812      	ldrb	r2, [r2, #0]
1001031c:	2102      	movs	r1, #2
1001031e:	430a      	orrs	r2, r1
10010320:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10010322:	2317      	movs	r3, #23
10010324:	18fb      	adds	r3, r7, r3
10010326:	2217      	movs	r2, #23
10010328:	18ba      	adds	r2, r7, r2
1001032a:	7812      	ldrb	r2, [r2, #0]
1001032c:	210c      	movs	r1, #12
1001032e:	430a      	orrs	r2, r1
10010330:	701a      	strb	r2, [r3, #0]
			break;
10010332:	e000      	b.n	10010336 <uart_init+0x21a>

		default:
			break;
10010334:	46c0      	nop			; (mov r8, r8)
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10010336:	68fb      	ldr	r3, [r7, #12]
10010338:	681b      	ldr	r3, [r3, #0]
1001033a:	2217      	movs	r2, #23
1001033c:	18ba      	adds	r2, r7, r2
1001033e:	2120      	movs	r1, #32
10010340:	7812      	ldrb	r2, [r2, #0]
10010342:	545a      	strb	r2, [r3, r1]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10010344:	687b      	ldr	r3, [r7, #4]
10010346:	681a      	ldr	r2, [r3, #0]
10010348:	68fb      	ldr	r3, [r7, #12]
1001034a:	0011      	movs	r1, r2
1001034c:	0018      	movs	r0, r3
1001034e:	4b14      	ldr	r3, [pc, #80]	; (100103a0 <uart_init+0x284>)
10010350:	4798      	blx	r3

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10010352:	68fb      	ldr	r3, [r7, #12]
10010354:	681b      	ldr	r3, [r3, #0]
10010356:	2200      	movs	r2, #0
10010358:	761a      	strb	r2, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1001035a:	68fb      	ldr	r3, [r7, #12]
1001035c:	681b      	ldr	r3, [r3, #0]
1001035e:	2200      	movs	r2, #0
10010360:	721a      	strb	r2, [r3, #8]
	
	return STATUS_OK;
10010362:	2300      	movs	r3, #0
}
10010364:	0018      	movs	r0, r3
10010366:	46bd      	mov	sp, r7
10010368:	b006      	add	sp, #24
1001036a:	bd80      	pop	{r7, pc}
1001036c:	40004000 	.word	0x40004000
10010370:	1000f5fd 	.word	0x1000f5fd
10010374:	1000eee9 	.word	0x1000eee9
10010378:	1001c38c 	.word	0x1001c38c
1001037c:	1000fc81 	.word	0x1000fc81
10010380:	1000fb9d 	.word	0x1000fb9d
10010384:	1000fd59 	.word	0x1000fd59
10010388:	1000fbc9 	.word	0x1000fbc9
1001038c:	40005000 	.word	0x40005000
10010390:	1000fe39 	.word	0x1000fe39
10010394:	1000ff11 	.word	0x1000ff11
10010398:	1000cddd 	.word	0x1000cddd
1001039c:	1001af48 	.word	0x1001af48
100103a0:	1000fff1 	.word	0x1000fff1

100103a4 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
100103a4:	b580      	push	{r7, lr}
100103a6:	b082      	sub	sp, #8
100103a8:	af00      	add	r7, sp, #0
100103aa:	6078      	str	r0, [r7, #4]
100103ac:	000a      	movs	r2, r1
100103ae:	1cfb      	adds	r3, r7, #3
100103b0:	701a      	strb	r2, [r3, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
100103b2:	46c0      	nop			; (mov r8, r8)
100103b4:	687b      	ldr	r3, [r7, #4]
100103b6:	681b      	ldr	r3, [r3, #0]
100103b8:	791b      	ldrb	r3, [r3, #4]
100103ba:	b2db      	uxtb	r3, r3
100103bc:	001a      	movs	r2, r3
100103be:	2301      	movs	r3, #1
100103c0:	4013      	ands	r3, r2
100103c2:	d0f7      	beq.n	100103b4 <uart_write_wait+0x10>

	module->hw->TRANSMIT_DATA.reg = tx_data;
100103c4:	687b      	ldr	r3, [r7, #4]
100103c6:	681b      	ldr	r3, [r3, #0]
100103c8:	1cfa      	adds	r2, r7, #3
100103ca:	7812      	ldrb	r2, [r2, #0]
100103cc:	701a      	strb	r2, [r3, #0]
	
	return STATUS_OK;
100103ce:	2300      	movs	r3, #0
}
100103d0:	0018      	movs	r0, r3
100103d2:	46bd      	mov	sp, r7
100103d4:	b002      	add	sp, #8
100103d6:	bd80      	pop	{r7, pc}

100103d8 <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
100103d8:	b580      	push	{r7, lr}
100103da:	b082      	sub	sp, #8
100103dc:	af00      	add	r7, sp, #0
100103de:	6078      	str	r0, [r7, #4]
100103e0:	6039      	str	r1, [r7, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
100103e2:	46c0      	nop			; (mov r8, r8)
100103e4:	687b      	ldr	r3, [r7, #4]
100103e6:	681b      	ldr	r3, [r3, #0]
100103e8:	7d1b      	ldrb	r3, [r3, #20]
100103ea:	b2db      	uxtb	r3, r3
100103ec:	001a      	movs	r2, r3
100103ee:	2301      	movs	r3, #1
100103f0:	4013      	ands	r3, r2
100103f2:	d0f7      	beq.n	100103e4 <uart_read_wait+0xc>

	*rx_data = module->hw->RECEIVE_DATA.reg;
100103f4:	687b      	ldr	r3, [r7, #4]
100103f6:	681b      	ldr	r3, [r3, #0]
100103f8:	7c1b      	ldrb	r3, [r3, #16]
100103fa:	b2da      	uxtb	r2, r3
100103fc:	683b      	ldr	r3, [r7, #0]
100103fe:	701a      	strb	r2, [r3, #0]
	
	return STATUS_OK;
10010400:	2300      	movs	r3, #0
}
10010402:	0018      	movs	r0, r3
10010404:	46bd      	mov	sp, r7
10010406:	b002      	add	sp, #8
10010408:	bd80      	pop	{r7, pc}
1001040a:	46c0      	nop			; (mov r8, r8)

1001040c <_uart_read_buffer>:
 */
static void _uart_read_buffer(
		struct uart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
1001040c:	b580      	push	{r7, lr}
1001040e:	b084      	sub	sp, #16
10010410:	af00      	add	r7, sp, #0
10010412:	60f8      	str	r0, [r7, #12]
10010414:	60b9      	str	r1, [r7, #8]
10010416:	1dbb      	adds	r3, r7, #6
10010418:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1001041a:	68fb      	ldr	r3, [r7, #12]
1001041c:	1dba      	adds	r2, r7, #6
1001041e:	8812      	ldrh	r2, [r2, #0]
10010420:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr = rx_data;
10010422:	68fb      	ldr	r3, [r7, #12]
10010424:	68ba      	ldr	r2, [r7, #8]
10010426:	615a      	str	r2, [r3, #20]
	module->status = STATUS_BUSY;
10010428:	68fb      	ldr	r3, [r7, #12]
1001042a:	2222      	movs	r2, #34	; 0x22
1001042c:	2105      	movs	r1, #5
1001042e:	5499      	strb	r1, [r3, r2]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10010430:	68fb      	ldr	r3, [r7, #12]
10010432:	681b      	ldr	r3, [r3, #0]
10010434:	2201      	movs	r2, #1
10010436:	761a      	strb	r2, [r3, #24]
}
10010438:	46c0      	nop			; (mov r8, r8)
1001043a:	46bd      	mov	sp, r7
1001043c:	b004      	add	sp, #16
1001043e:	bd80      	pop	{r7, pc}

10010440 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
10010440:	b580      	push	{r7, lr}
10010442:	b084      	sub	sp, #16
10010444:	af00      	add	r7, sp, #0
10010446:	60f8      	str	r0, [r7, #12]
10010448:	60b9      	str	r1, [r7, #8]
1001044a:	1dbb      	adds	r3, r7, #6
1001044c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1001044e:	1dbb      	adds	r3, r7, #6
10010450:	881b      	ldrh	r3, [r3, #0]
10010452:	2b00      	cmp	r3, #0
10010454:	d101      	bne.n	1001045a <uart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
10010456:	2317      	movs	r3, #23
10010458:	e00f      	b.n	1001047a <uart_read_buffer_job+0x3a>
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1001045a:	68fb      	ldr	r3, [r7, #12]
1001045c:	2222      	movs	r2, #34	; 0x22
1001045e:	5c9b      	ldrb	r3, [r3, r2]
10010460:	b2db      	uxtb	r3, r3
10010462:	2b05      	cmp	r3, #5
10010464:	d101      	bne.n	1001046a <uart_read_buffer_job+0x2a>
		return STATUS_BUSY;
10010466:	2305      	movs	r3, #5
10010468:	e007      	b.n	1001047a <uart_read_buffer_job+0x3a>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
1001046a:	1dbb      	adds	r3, r7, #6
1001046c:	881a      	ldrh	r2, [r3, #0]
1001046e:	68b9      	ldr	r1, [r7, #8]
10010470:	68fb      	ldr	r3, [r7, #12]
10010472:	0018      	movs	r0, r3
10010474:	4b03      	ldr	r3, [pc, #12]	; (10010484 <uart_read_buffer_job+0x44>)
10010476:	4798      	blx	r3
	return STATUS_OK;
10010478:	2300      	movs	r3, #0
}
1001047a:	0018      	movs	r0, r3
1001047c:	46bd      	mov	sp, r7
1001047e:	b004      	add	sp, #16
10010480:	bd80      	pop	{r7, pc}
10010482:	46c0      	nop			; (mov r8, r8)
10010484:	1001040d 	.word	0x1001040d

10010488 <uart_register_callback>:
 *
 */
void uart_register_callback(struct uart_module *const module,
		uart_callback_t callback_func,
		enum uart_callback callback_type)
{
10010488:	b580      	push	{r7, lr}
1001048a:	b084      	sub	sp, #16
1001048c:	af00      	add	r7, sp, #0
1001048e:	60f8      	str	r0, [r7, #12]
10010490:	60b9      	str	r1, [r7, #8]
10010492:	1dfb      	adds	r3, r7, #7
10010494:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10010496:	1dfb      	adds	r3, r7, #7
10010498:	781b      	ldrb	r3, [r3, #0]
1001049a:	68fa      	ldr	r2, [r7, #12]
1001049c:	009b      	lsls	r3, r3, #2
1001049e:	18d3      	adds	r3, r2, r3
100104a0:	3304      	adds	r3, #4
100104a2:	68ba      	ldr	r2, [r7, #8]
100104a4:	601a      	str	r2, [r3, #0]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100104a6:	68fb      	ldr	r3, [r7, #12]
100104a8:	2220      	movs	r2, #32
100104aa:	5c9b      	ldrb	r3, [r3, r2]
100104ac:	b25a      	sxtb	r2, r3
100104ae:	1dfb      	adds	r3, r7, #7
100104b0:	781b      	ldrb	r3, [r3, #0]
100104b2:	2101      	movs	r1, #1
100104b4:	4099      	lsls	r1, r3
100104b6:	000b      	movs	r3, r1
100104b8:	b25b      	sxtb	r3, r3
100104ba:	4313      	orrs	r3, r2
100104bc:	b25b      	sxtb	r3, r3
100104be:	b2d9      	uxtb	r1, r3
100104c0:	68fb      	ldr	r3, [r7, #12]
100104c2:	2220      	movs	r2, #32
100104c4:	5499      	strb	r1, [r3, r2]
}
100104c6:	46c0      	nop			; (mov r8, r8)
100104c8:	46bd      	mov	sp, r7
100104ca:	b004      	add	sp, #16
100104cc:	bd80      	pop	{r7, pc}
100104ce:	46c0      	nop			; (mov r8, r8)

100104d0 <uart_unregister_callback>:
 * \param[in]      callback_type  Callback type given by an enum
 *
 */
void uart_unregister_callback(struct uart_module *module,
		enum uart_callback callback_type)
{
100104d0:	b580      	push	{r7, lr}
100104d2:	b082      	sub	sp, #8
100104d4:	af00      	add	r7, sp, #0
100104d6:	6078      	str	r0, [r7, #4]
100104d8:	000a      	movs	r2, r1
100104da:	1cfb      	adds	r3, r7, #3
100104dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
100104de:	1cfb      	adds	r3, r7, #3
100104e0:	781b      	ldrb	r3, [r3, #0]
100104e2:	687a      	ldr	r2, [r7, #4]
100104e4:	009b      	lsls	r3, r3, #2
100104e6:	18d3      	adds	r3, r2, r3
100104e8:	3304      	adds	r3, #4
100104ea:	2200      	movs	r2, #0
100104ec:	601a      	str	r2, [r3, #0]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
100104ee:	687b      	ldr	r3, [r7, #4]
100104f0:	2220      	movs	r2, #32
100104f2:	5c9b      	ldrb	r3, [r3, r2]
100104f4:	b25b      	sxtb	r3, r3
100104f6:	1cfa      	adds	r2, r7, #3
100104f8:	7812      	ldrb	r2, [r2, #0]
100104fa:	2101      	movs	r1, #1
100104fc:	4091      	lsls	r1, r2
100104fe:	000a      	movs	r2, r1
10010500:	b252      	sxtb	r2, r2
10010502:	43d2      	mvns	r2, r2
10010504:	b252      	sxtb	r2, r2
10010506:	4013      	ands	r3, r2
10010508:	b25b      	sxtb	r3, r3
1001050a:	b2d9      	uxtb	r1, r3
1001050c:	687b      	ldr	r3, [r7, #4]
1001050e:	2220      	movs	r2, #32
10010510:	5499      	strb	r1, [r3, r2]
}
10010512:	46c0      	nop			; (mov r8, r8)
10010514:	46bd      	mov	sp, r7
10010516:	b002      	add	sp, #8
10010518:	bd80      	pop	{r7, pc}
1001051a:	46c0      	nop			; (mov r8, r8)

1001051c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1001051c:	b580      	push	{r7, lr}
1001051e:	b082      	sub	sp, #8
10010520:	af00      	add	r7, sp, #0
10010522:	6078      	str	r0, [r7, #4]
10010524:	000a      	movs	r2, r1
10010526:	1cfb      	adds	r3, r7, #3
10010528:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1001052a:	687b      	ldr	r3, [r7, #4]
1001052c:	2221      	movs	r2, #33	; 0x21
1001052e:	5c9b      	ldrb	r3, [r3, r2]
10010530:	b25a      	sxtb	r2, r3
10010532:	1cfb      	adds	r3, r7, #3
10010534:	781b      	ldrb	r3, [r3, #0]
10010536:	2101      	movs	r1, #1
10010538:	4099      	lsls	r1, r3
1001053a:	000b      	movs	r3, r1
1001053c:	b25b      	sxtb	r3, r3
1001053e:	4313      	orrs	r3, r2
10010540:	b25b      	sxtb	r3, r3
10010542:	b2d9      	uxtb	r1, r3
10010544:	687b      	ldr	r3, [r7, #4]
10010546:	2221      	movs	r2, #33	; 0x21
10010548:	5499      	strb	r1, [r3, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1001054a:	1cfb      	adds	r3, r7, #3
1001054c:	781b      	ldrb	r3, [r3, #0]
1001054e:	2b01      	cmp	r3, #1
10010550:	d109      	bne.n	10010566 <uart_enable_callback+0x4a>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10010552:	687b      	ldr	r3, [r7, #4]
10010554:	681a      	ldr	r2, [r3, #0]
10010556:	687b      	ldr	r3, [r7, #4]
10010558:	681b      	ldr	r3, [r3, #0]
1001055a:	7a1b      	ldrb	r3, [r3, #8]
1001055c:	b2db      	uxtb	r3, r3
1001055e:	2120      	movs	r1, #32
10010560:	430b      	orrs	r3, r1
10010562:	b2db      	uxtb	r3, r3
10010564:	7213      	strb	r3, [r2, #8]
	}
}
10010566:	46c0      	nop			; (mov r8, r8)
10010568:	46bd      	mov	sp, r7
1001056a:	b002      	add	sp, #8
1001056c:	bd80      	pop	{r7, pc}
1001056e:	46c0      	nop			; (mov r8, r8)

10010570 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10010570:	b580      	push	{r7, lr}
10010572:	b082      	sub	sp, #8
10010574:	af00      	add	r7, sp, #0
10010576:	6078      	str	r0, [r7, #4]
10010578:	000a      	movs	r2, r1
1001057a:	1cfb      	adds	r3, r7, #3
1001057c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1001057e:	687b      	ldr	r3, [r7, #4]
10010580:	2221      	movs	r2, #33	; 0x21
10010582:	5c9b      	ldrb	r3, [r3, r2]
10010584:	b25b      	sxtb	r3, r3
10010586:	1cfa      	adds	r2, r7, #3
10010588:	7812      	ldrb	r2, [r2, #0]
1001058a:	2101      	movs	r1, #1
1001058c:	4091      	lsls	r1, r2
1001058e:	000a      	movs	r2, r1
10010590:	b252      	sxtb	r2, r2
10010592:	43d2      	mvns	r2, r2
10010594:	b252      	sxtb	r2, r2
10010596:	4013      	ands	r3, r2
10010598:	b25b      	sxtb	r3, r3
1001059a:	b2d9      	uxtb	r1, r3
1001059c:	687b      	ldr	r3, [r7, #4]
1001059e:	2221      	movs	r2, #33	; 0x21
100105a0:	5499      	strb	r1, [r3, r2]

	if (callback_type == UART_CTS_ACTIVE) {
100105a2:	1cfb      	adds	r3, r7, #3
100105a4:	781b      	ldrb	r3, [r3, #0]
100105a6:	2b01      	cmp	r3, #1
100105a8:	d109      	bne.n	100105be <uart_disable_callback+0x4e>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
100105aa:	687b      	ldr	r3, [r7, #4]
100105ac:	681a      	ldr	r2, [r3, #0]
100105ae:	687b      	ldr	r3, [r7, #4]
100105b0:	681b      	ldr	r3, [r3, #0]
100105b2:	7a1b      	ldrb	r3, [r3, #8]
100105b4:	b2db      	uxtb	r3, r3
100105b6:	2120      	movs	r1, #32
100105b8:	438b      	bics	r3, r1
100105ba:	b2db      	uxtb	r3, r3
100105bc:	7213      	strb	r3, [r2, #8]
	}

}
100105be:	46c0      	nop			; (mov r8, r8)
100105c0:	46bd      	mov	sp, r7
100105c2:	b002      	add	sp, #8
100105c4:	bd80      	pop	{r7, pc}
100105c6:	46c0      	nop			; (mov r8, r8)

100105c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
100105c8:	b580      	push	{r7, lr}
100105ca:	b086      	sub	sp, #24
100105cc:	af00      	add	r7, sp, #0
100105ce:	60f8      	str	r0, [r7, #12]
100105d0:	60b9      	str	r1, [r7, #8]
100105d2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
100105d4:	2300      	movs	r3, #0
100105d6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
100105d8:	68fb      	ldr	r3, [r7, #12]
100105da:	2b00      	cmp	r3, #0
100105dc:	d012      	beq.n	10010604 <_read+0x3c>
		return -1;
100105de:	2301      	movs	r3, #1
100105e0:	425b      	negs	r3, r3
100105e2:	e013      	b.n	1001060c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
100105e4:	4b0b      	ldr	r3, [pc, #44]	; (10010614 <_read+0x4c>)
100105e6:	681a      	ldr	r2, [r3, #0]
100105e8:	4b0b      	ldr	r3, [pc, #44]	; (10010618 <_read+0x50>)
100105ea:	681b      	ldr	r3, [r3, #0]
100105ec:	68b9      	ldr	r1, [r7, #8]
100105ee:	0018      	movs	r0, r3
100105f0:	4790      	blx	r2
		ptr++;
100105f2:	68bb      	ldr	r3, [r7, #8]
100105f4:	3301      	adds	r3, #1
100105f6:	60bb      	str	r3, [r7, #8]
		nChars++;
100105f8:	697b      	ldr	r3, [r7, #20]
100105fa:	3301      	adds	r3, #1
100105fc:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
100105fe:	687b      	ldr	r3, [r7, #4]
10010600:	3b01      	subs	r3, #1
10010602:	607b      	str	r3, [r7, #4]
10010604:	687b      	ldr	r3, [r7, #4]
10010606:	2b00      	cmp	r3, #0
10010608:	dcec      	bgt.n	100105e4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
1001060a:	697b      	ldr	r3, [r7, #20]
}
1001060c:	0018      	movs	r0, r3
1001060e:	46bd      	mov	sp, r7
10010610:	b006      	add	sp, #24
10010612:	bd80      	pop	{r7, pc}
10010614:	1001c394 	.word	0x1001c394
10010618:	1001c39c 	.word	0x1001c39c

1001061c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1001061c:	b580      	push	{r7, lr}
1001061e:	b086      	sub	sp, #24
10010620:	af00      	add	r7, sp, #0
10010622:	60f8      	str	r0, [r7, #12]
10010624:	60b9      	str	r1, [r7, #8]
10010626:	607a      	str	r2, [r7, #4]
	int nChars = 0;
10010628:	2300      	movs	r3, #0
1001062a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
1001062c:	68fb      	ldr	r3, [r7, #12]
1001062e:	2b01      	cmp	r3, #1
10010630:	d01d      	beq.n	1001066e <_write+0x52>
10010632:	68fb      	ldr	r3, [r7, #12]
10010634:	2b02      	cmp	r3, #2
10010636:	d01a      	beq.n	1001066e <_write+0x52>
10010638:	68fb      	ldr	r3, [r7, #12]
1001063a:	2b03      	cmp	r3, #3
1001063c:	d017      	beq.n	1001066e <_write+0x52>
		return -1;
1001063e:	2301      	movs	r3, #1
10010640:	425b      	negs	r3, r3
10010642:	e018      	b.n	10010676 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
10010644:	4b0e      	ldr	r3, [pc, #56]	; (10010680 <_write+0x64>)
10010646:	681a      	ldr	r2, [r3, #0]
10010648:	4b0e      	ldr	r3, [pc, #56]	; (10010684 <_write+0x68>)
1001064a:	6818      	ldr	r0, [r3, #0]
1001064c:	68bb      	ldr	r3, [r7, #8]
1001064e:	1c59      	adds	r1, r3, #1
10010650:	60b9      	str	r1, [r7, #8]
10010652:	781b      	ldrb	r3, [r3, #0]
10010654:	0019      	movs	r1, r3
10010656:	4790      	blx	r2
10010658:	1e03      	subs	r3, r0, #0
1001065a:	da02      	bge.n	10010662 <_write+0x46>
			return -1;
1001065c:	2301      	movs	r3, #1
1001065e:	425b      	negs	r3, r3
10010660:	e009      	b.n	10010676 <_write+0x5a>
		}
		++nChars;
10010662:	697b      	ldr	r3, [r7, #20]
10010664:	3301      	adds	r3, #1
10010666:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10010668:	687b      	ldr	r3, [r7, #4]
1001066a:	3b01      	subs	r3, #1
1001066c:	607b      	str	r3, [r7, #4]
1001066e:	687b      	ldr	r3, [r7, #4]
10010670:	2b00      	cmp	r3, #0
10010672:	d1e7      	bne.n	10010644 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
10010674:	697b      	ldr	r3, [r7, #20]
}
10010676:	0018      	movs	r0, r3
10010678:	46bd      	mov	sp, r7
1001067a:	b006      	add	sp, #24
1001067c:	bd80      	pop	{r7, pc}
1001067e:	46c0      	nop			; (mov r8, r8)
10010680:	1001c398 	.word	0x1001c398
10010684:	1001c39c 	.word	0x1001c39c

10010688 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10010688:	b580      	push	{r7, lr}
1001068a:	b084      	sub	sp, #16
1001068c:	af00      	add	r7, sp, #0
1001068e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10010690:	4b0a      	ldr	r3, [pc, #40]	; (100106bc <_sbrk+0x34>)
10010692:	681b      	ldr	r3, [r3, #0]
10010694:	2b00      	cmp	r3, #0
10010696:	d102      	bne.n	1001069e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
10010698:	4b08      	ldr	r3, [pc, #32]	; (100106bc <_sbrk+0x34>)
1001069a:	4a09      	ldr	r2, [pc, #36]	; (100106c0 <_sbrk+0x38>)
1001069c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
1001069e:	4b07      	ldr	r3, [pc, #28]	; (100106bc <_sbrk+0x34>)
100106a0:	681b      	ldr	r3, [r3, #0]
100106a2:	60fb      	str	r3, [r7, #12]

	heap += incr;
100106a4:	4b05      	ldr	r3, [pc, #20]	; (100106bc <_sbrk+0x34>)
100106a6:	681a      	ldr	r2, [r3, #0]
100106a8:	687b      	ldr	r3, [r7, #4]
100106aa:	18d2      	adds	r2, r2, r3
100106ac:	4b03      	ldr	r3, [pc, #12]	; (100106bc <_sbrk+0x34>)
100106ae:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
100106b0:	68fb      	ldr	r3, [r7, #12]
}
100106b2:	0018      	movs	r0, r3
100106b4:	46bd      	mov	sp, r7
100106b6:	b004      	add	sp, #16
100106b8:	bd80      	pop	{r7, pc}
100106ba:	46c0      	nop			; (mov r8, r8)
100106bc:	1001b990 	.word	0x1001b990
100106c0:	1001e6d8 	.word	0x1001e6d8

100106c4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
100106c4:	b580      	push	{r7, lr}
100106c6:	b082      	sub	sp, #8
100106c8:	af00      	add	r7, sp, #0
100106ca:	6078      	str	r0, [r7, #4]
	return -1;
100106cc:	2301      	movs	r3, #1
100106ce:	425b      	negs	r3, r3
}
100106d0:	0018      	movs	r0, r3
100106d2:	46bd      	mov	sp, r7
100106d4:	b002      	add	sp, #8
100106d6:	bd80      	pop	{r7, pc}

100106d8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
100106d8:	b580      	push	{r7, lr}
100106da:	b082      	sub	sp, #8
100106dc:	af00      	add	r7, sp, #0
100106de:	6078      	str	r0, [r7, #4]
100106e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
100106e2:	683b      	ldr	r3, [r7, #0]
100106e4:	2280      	movs	r2, #128	; 0x80
100106e6:	0192      	lsls	r2, r2, #6
100106e8:	605a      	str	r2, [r3, #4]

	return 0;
100106ea:	2300      	movs	r3, #0
}
100106ec:	0018      	movs	r0, r3
100106ee:	46bd      	mov	sp, r7
100106f0:	b002      	add	sp, #8
100106f2:	bd80      	pop	{r7, pc}

100106f4 <_isatty>:

extern int _isatty(int file)
{
100106f4:	b580      	push	{r7, lr}
100106f6:	b082      	sub	sp, #8
100106f8:	af00      	add	r7, sp, #0
100106fa:	6078      	str	r0, [r7, #4]
	return 1;
100106fc:	2301      	movs	r3, #1
}
100106fe:	0018      	movs	r0, r3
10010700:	46bd      	mov	sp, r7
10010702:	b002      	add	sp, #8
10010704:	bd80      	pop	{r7, pc}
10010706:	46c0      	nop			; (mov r8, r8)

10010708 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
10010708:	b580      	push	{r7, lr}
1001070a:	b084      	sub	sp, #16
1001070c:	af00      	add	r7, sp, #0
1001070e:	60f8      	str	r0, [r7, #12]
10010710:	60b9      	str	r1, [r7, #8]
10010712:	607a      	str	r2, [r7, #4]
	return 0;
10010714:	2300      	movs	r3, #0
}
10010716:	0018      	movs	r0, r3
10010718:	46bd      	mov	sp, r7
1001071a:	b004      	add	sp, #16
1001071c:	bd80      	pop	{r7, pc}
1001071e:	46c0      	nop			; (mov r8, r8)

10010720 <init_global_var>:

/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
10010720:	b580      	push	{r7, lr}
10010722:	af00      	add	r7, sp, #0
	ble_user_event_cb = 0;
10010724:	4b15      	ldr	r3, [pc, #84]	; (1001077c <init_global_var+0x5c>)
10010726:	2200      	movs	r2, #0
10010728:	601a      	str	r2, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1001072a:	4b15      	ldr	r3, [pc, #84]	; (10010780 <init_global_var+0x60>)
1001072c:	2207      	movs	r2, #7
1001072e:	2100      	movs	r1, #0
10010730:	0018      	movs	r0, r3
10010732:	4b14      	ldr	r3, [pc, #80]	; (10010784 <init_global_var+0x64>)
10010734:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
10010736:	4b14      	ldr	r3, [pc, #80]	; (10010788 <init_global_var+0x68>)
10010738:	2212      	movs	r2, #18
1001073a:	2100      	movs	r1, #0
1001073c:	0018      	movs	r0, r3
1001073e:	4b11      	ldr	r3, [pc, #68]	; (10010784 <init_global_var+0x64>)
10010740:	4798      	blx	r3
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
10010742:	4a12      	ldr	r2, [pc, #72]	; (1001078c <init_global_var+0x6c>)
10010744:	4b12      	ldr	r3, [pc, #72]	; (10010790 <init_global_var+0x70>)
10010746:	2100      	movs	r1, #0
10010748:	0018      	movs	r0, r3
1001074a:	4b0e      	ldr	r3, [pc, #56]	; (10010784 <init_global_var+0x64>)
1001074c:	4798      	blx	r3
#endif

	scan_response_count = 0;
1001074e:	4b11      	ldr	r3, [pc, #68]	; (10010794 <init_global_var+0x74>)
10010750:	2200      	movs	r2, #0
10010752:	701a      	strb	r2, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
10010754:	23cd      	movs	r3, #205	; 0xcd
10010756:	009a      	lsls	r2, r3, #2
10010758:	4b0f      	ldr	r3, [pc, #60]	; (10010798 <init_global_var+0x78>)
1001075a:	2100      	movs	r1, #0
1001075c:	0018      	movs	r0, r3
1001075e:	4b09      	ldr	r3, [pc, #36]	; (10010784 <init_global_var+0x64>)
10010760:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
10010762:	4b0e      	ldr	r3, [pc, #56]	; (1001079c <init_global_var+0x7c>)
10010764:	2200      	movs	r2, #0
10010766:	701a      	strb	r2, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
10010768:	2383      	movs	r3, #131	; 0x83
1001076a:	009a      	lsls	r2, r3, #2
1001076c:	4b0c      	ldr	r3, [pc, #48]	; (100107a0 <init_global_var+0x80>)
1001076e:	2100      	movs	r1, #0
10010770:	0018      	movs	r0, r3
10010772:	4b04      	ldr	r3, [pc, #16]	; (10010784 <init_global_var+0x64>)
10010774:	4798      	blx	r3
}
10010776:	46c0      	nop			; (mov r8, r8)
10010778:	46bd      	mov	sp, r7
1001077a:	bd80      	pop	{r7, pc}
1001077c:	1001be7c 	.word	0x1001be7c
10010780:	1001be74 	.word	0x1001be74
10010784:	10018e2d 	.word	0x10018e2d
10010788:	1001c664 	.word	0x1001c664
1001078c:	000004e2 	.word	0x000004e2
10010790:	1001b994 	.word	0x1001b994
10010794:	1001be80 	.word	0x1001be80
10010798:	1001c68c 	.word	0x1001c68c
1001079c:	1001c684 	.word	0x1001c684
100107a0:	1001c9c0 	.word	0x1001c9c0

100107a4 <ble_event_task>:

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
100107a4:	b590      	push	{r4, r7, lr}
100107a6:	b085      	sub	sp, #20
100107a8:	af00      	add	r7, sp, #0
100107aa:	6078      	str	r0, [r7, #4]
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
100107ac:	230f      	movs	r3, #15
100107ae:	18fc      	adds	r4, r7, r3
100107b0:	687a      	ldr	r2, [r7, #4]
100107b2:	490e      	ldr	r1, [pc, #56]	; (100107ec <ble_event_task+0x48>)
100107b4:	4b0e      	ldr	r3, [pc, #56]	; (100107f0 <ble_event_task+0x4c>)
100107b6:	0018      	movs	r0, r3
100107b8:	4b0e      	ldr	r3, [pc, #56]	; (100107f4 <ble_event_task+0x50>)
100107ba:	4798      	blx	r3
100107bc:	0003      	movs	r3, r0
100107be:	7023      	strb	r3, [r4, #0]
    if (status == AT_BLE_SUCCESS) 
100107c0:	230f      	movs	r3, #15
100107c2:	18fb      	adds	r3, r7, r3
100107c4:	781b      	ldrb	r3, [r3, #0]
100107c6:	2b00      	cmp	r3, #0
100107c8:	d108      	bne.n	100107dc <ble_event_task+0x38>
    {
            ble_event_manager(event, ble_event_params);
100107ca:	4b09      	ldr	r3, [pc, #36]	; (100107f0 <ble_event_task+0x4c>)
100107cc:	781b      	ldrb	r3, [r3, #0]
100107ce:	4a07      	ldr	r2, [pc, #28]	; (100107ec <ble_event_task+0x48>)
100107d0:	0011      	movs	r1, r2
100107d2:	0018      	movs	r0, r3
100107d4:	4b08      	ldr	r3, [pc, #32]	; (100107f8 <ble_event_task+0x54>)
100107d6:	4798      	blx	r3
            return AT_BLE_SUCCESS;
100107d8:	2300      	movs	r3, #0
100107da:	e002      	b.n	100107e2 <ble_event_task+0x3e>
    }
    
    return status;
100107dc:	230f      	movs	r3, #15
100107de:	18fb      	adds	r3, r7, r3
100107e0:	781b      	ldrb	r3, [r3, #0]
}
100107e2:	0018      	movs	r0, r3
100107e4:	46bd      	mov	sp, r7
100107e6:	b005      	add	sp, #20
100107e8:	bd90      	pop	{r4, r7, pc}
100107ea:	46c0      	nop			; (mov r8, r8)
100107ec:	1001c9c0 	.word	0x1001c9c0
100107f0:	1001c684 	.word	0x1001c684
100107f4:	10013e95 	.word	0x10013e95
100107f8:	1001245d 	.word	0x1001245d

100107fc <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
100107fc:	b580      	push	{r7, lr}
100107fe:	b084      	sub	sp, #16
10010800:	af00      	add	r7, sp, #0
10010802:	6078      	str	r0, [r7, #4]
	uint8_t idx;	
	char *dev_name = NULL;
10010804:	2300      	movs	r3, #0
10010806:	60bb      	str	r3, [r7, #8]
	init_global_var();
10010808:	4b8a      	ldr	r3, [pc, #552]	; (10010a34 <ble_device_init+0x238>)
1001080a:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1001080c:	4b8a      	ldr	r3, [pc, #552]	; (10010a38 <ble_device_init+0x23c>)
1001080e:	220c      	movs	r2, #12
10010810:	2100      	movs	r1, #0
10010812:	0018      	movs	r0, r3
10010814:	4b89      	ldr	r3, [pc, #548]	; (10010a3c <ble_device_init+0x240>)
10010816:	4798      	blx	r3

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
10010818:	230f      	movs	r3, #15
1001081a:	18fb      	adds	r3, r7, r3
1001081c:	2200      	movs	r2, #0
1001081e:	701a      	strb	r2, [r3, #0]
10010820:	e00d      	b.n	1001083e <ble_device_init+0x42>
	{
		ble_mgr_gap_event_cb[idx] = NULL;
10010822:	230f      	movs	r3, #15
10010824:	18fb      	adds	r3, r7, r3
10010826:	781a      	ldrb	r2, [r3, #0]
10010828:	4b85      	ldr	r3, [pc, #532]	; (10010a40 <ble_device_init+0x244>)
1001082a:	0092      	lsls	r2, r2, #2
1001082c:	2100      	movs	r1, #0
1001082e:	50d1      	str	r1, [r2, r3]
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
10010830:	230f      	movs	r3, #15
10010832:	18fb      	adds	r3, r7, r3
10010834:	781a      	ldrb	r2, [r3, #0]
10010836:	230f      	movs	r3, #15
10010838:	18fb      	adds	r3, r7, r3
1001083a:	3201      	adds	r2, #1
1001083c:	701a      	strb	r2, [r3, #0]
1001083e:	230f      	movs	r3, #15
10010840:	18fb      	adds	r3, r7, r3
10010842:	781b      	ldrb	r3, [r3, #0]
10010844:	2b04      	cmp	r3, #4
10010846:	d9ec      	bls.n	10010822 <ble_device_init+0x26>
	{
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
10010848:	230f      	movs	r3, #15
1001084a:	18fb      	adds	r3, r7, r3
1001084c:	2200      	movs	r2, #0
1001084e:	701a      	strb	r2, [r3, #0]
10010850:	e00d      	b.n	1001086e <ble_device_init+0x72>
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
10010852:	230f      	movs	r3, #15
10010854:	18fb      	adds	r3, r7, r3
10010856:	781a      	ldrb	r2, [r3, #0]
10010858:	4b7a      	ldr	r3, [pc, #488]	; (10010a44 <ble_device_init+0x248>)
1001085a:	0092      	lsls	r2, r2, #2
1001085c:	2100      	movs	r1, #0
1001085e:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
10010860:	230f      	movs	r3, #15
10010862:	18fb      	adds	r3, r7, r3
10010864:	781a      	ldrb	r2, [r3, #0]
10010866:	230f      	movs	r3, #15
10010868:	18fb      	adds	r3, r7, r3
1001086a:	3201      	adds	r2, #1
1001086c:	701a      	strb	r2, [r3, #0]
1001086e:	230f      	movs	r3, #15
10010870:	18fb      	adds	r3, r7, r3
10010872:	781b      	ldrb	r3, [r3, #0]
10010874:	2b04      	cmp	r3, #4
10010876:	d9ec      	bls.n	10010852 <ble_device_init+0x56>
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
10010878:	230f      	movs	r3, #15
1001087a:	18fb      	adds	r3, r7, r3
1001087c:	2200      	movs	r2, #0
1001087e:	701a      	strb	r2, [r3, #0]
10010880:	e00d      	b.n	1001089e <ble_device_init+0xa2>
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
10010882:	230f      	movs	r3, #15
10010884:	18fb      	adds	r3, r7, r3
10010886:	781a      	ldrb	r2, [r3, #0]
10010888:	4b6f      	ldr	r3, [pc, #444]	; (10010a48 <ble_device_init+0x24c>)
1001088a:	0092      	lsls	r2, r2, #2
1001088c:	2100      	movs	r1, #0
1001088e:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
10010890:	230f      	movs	r3, #15
10010892:	18fb      	adds	r3, r7, r3
10010894:	781a      	ldrb	r2, [r3, #0]
10010896:	230f      	movs	r3, #15
10010898:	18fb      	adds	r3, r7, r3
1001089a:	3201      	adds	r2, #1
1001089c:	701a      	strb	r2, [r3, #0]
1001089e:	230f      	movs	r3, #15
100108a0:	18fb      	adds	r3, r7, r3
100108a2:	781b      	ldrb	r3, [r3, #0]
100108a4:	2b04      	cmp	r3, #4
100108a6:	d9ec      	bls.n	10010882 <ble_device_init+0x86>
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
100108a8:	230f      	movs	r3, #15
100108aa:	18fb      	adds	r3, r7, r3
100108ac:	2200      	movs	r2, #0
100108ae:	701a      	strb	r2, [r3, #0]
100108b0:	e00d      	b.n	100108ce <ble_device_init+0xd2>
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
100108b2:	230f      	movs	r3, #15
100108b4:	18fb      	adds	r3, r7, r3
100108b6:	781a      	ldrb	r2, [r3, #0]
100108b8:	4b64      	ldr	r3, [pc, #400]	; (10010a4c <ble_device_init+0x250>)
100108ba:	0092      	lsls	r2, r2, #2
100108bc:	2100      	movs	r1, #0
100108be:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
100108c0:	230f      	movs	r3, #15
100108c2:	18fb      	adds	r3, r7, r3
100108c4:	781a      	ldrb	r2, [r3, #0]
100108c6:	230f      	movs	r3, #15
100108c8:	18fb      	adds	r3, r7, r3
100108ca:	3201      	adds	r2, #1
100108cc:	701a      	strb	r2, [r3, #0]
100108ce:	230f      	movs	r3, #15
100108d0:	18fb      	adds	r3, r7, r3
100108d2:	781b      	ldrb	r3, [r3, #0]
100108d4:	2b00      	cmp	r3, #0
100108d6:	d0ec      	beq.n	100108b2 <ble_device_init+0xb6>
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
100108d8:	230f      	movs	r3, #15
100108da:	18fb      	adds	r3, r7, r3
100108dc:	2200      	movs	r2, #0
100108de:	701a      	strb	r2, [r3, #0]
100108e0:	e00d      	b.n	100108fe <ble_device_init+0x102>
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
100108e2:	230f      	movs	r3, #15
100108e4:	18fb      	adds	r3, r7, r3
100108e6:	781a      	ldrb	r2, [r3, #0]
100108e8:	4b59      	ldr	r3, [pc, #356]	; (10010a50 <ble_device_init+0x254>)
100108ea:	0092      	lsls	r2, r2, #2
100108ec:	2100      	movs	r1, #0
100108ee:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
100108f0:	230f      	movs	r3, #15
100108f2:	18fb      	adds	r3, r7, r3
100108f4:	781a      	ldrb	r2, [r3, #0]
100108f6:	230f      	movs	r3, #15
100108f8:	18fb      	adds	r3, r7, r3
100108fa:	3201      	adds	r2, #1
100108fc:	701a      	strb	r2, [r3, #0]
100108fe:	230f      	movs	r3, #15
10010900:	18fb      	adds	r3, r7, r3
10010902:	781b      	ldrb	r3, [r3, #0]
10010904:	2b00      	cmp	r3, #0
10010906:	d0ec      	beq.n	100108e2 <ble_device_init+0xe6>
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
10010908:	230f      	movs	r3, #15
1001090a:	18fb      	adds	r3, r7, r3
1001090c:	2200      	movs	r2, #0
1001090e:	701a      	strb	r2, [r3, #0]
10010910:	e00d      	b.n	1001092e <ble_device_init+0x132>
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
10010912:	230f      	movs	r3, #15
10010914:	18fb      	adds	r3, r7, r3
10010916:	781a      	ldrb	r2, [r3, #0]
10010918:	4b4e      	ldr	r3, [pc, #312]	; (10010a54 <ble_device_init+0x258>)
1001091a:	0092      	lsls	r2, r2, #2
1001091c:	2100      	movs	r1, #0
1001091e:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
10010920:	230f      	movs	r3, #15
10010922:	18fb      	adds	r3, r7, r3
10010924:	781a      	ldrb	r2, [r3, #0]
10010926:	230f      	movs	r3, #15
10010928:	18fb      	adds	r3, r7, r3
1001092a:	3201      	adds	r2, #1
1001092c:	701a      	strb	r2, [r3, #0]
1001092e:	230f      	movs	r3, #15
10010930:	18fb      	adds	r3, r7, r3
10010932:	781b      	ldrb	r3, [r3, #0]
10010934:	2b04      	cmp	r3, #4
10010936:	d9ec      	bls.n	10010912 <ble_device_init+0x116>
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
10010938:	230f      	movs	r3, #15
1001093a:	18fb      	adds	r3, r7, r3
1001093c:	2200      	movs	r2, #0
1001093e:	701a      	strb	r2, [r3, #0]
10010940:	e00d      	b.n	1001095e <ble_device_init+0x162>
	{
		ble_mgr_custom_event_cb[idx] = NULL;
10010942:	230f      	movs	r3, #15
10010944:	18fb      	adds	r3, r7, r3
10010946:	781a      	ldrb	r2, [r3, #0]
10010948:	4b43      	ldr	r3, [pc, #268]	; (10010a58 <ble_device_init+0x25c>)
1001094a:	0092      	lsls	r2, r2, #2
1001094c:	2100      	movs	r1, #0
1001094e:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
10010950:	230f      	movs	r3, #15
10010952:	18fb      	adds	r3, r7, r3
10010954:	781a      	ldrb	r2, [r3, #0]
10010956:	230f      	movs	r3, #15
10010958:	18fb      	adds	r3, r7, r3
1001095a:	3201      	adds	r2, #1
1001095c:	701a      	strb	r2, [r3, #0]
1001095e:	230f      	movs	r3, #15
10010960:	18fb      	adds	r3, r7, r3
10010962:	781b      	ldrb	r3, [r3, #0]
10010964:	2b00      	cmp	r3, #0
10010966:	d0ec      	beq.n	10010942 <ble_device_init+0x146>
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010968:	230f      	movs	r3, #15
1001096a:	18fb      	adds	r3, r7, r3
1001096c:	2200      	movs	r2, #0
1001096e:	701a      	strb	r2, [r3, #0]
10010970:	e02d      	b.n	100109ce <ble_device_init+0x1d2>
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10010972:	230f      	movs	r3, #15
10010974:	18fb      	adds	r3, r7, r3
10010976:	781a      	ldrb	r2, [r3, #0]
10010978:	0013      	movs	r3, r2
1001097a:	015b      	lsls	r3, r3, #5
1001097c:	1a9b      	subs	r3, r3, r2
1001097e:	009b      	lsls	r3, r3, #2
10010980:	4a36      	ldr	r2, [pc, #216]	; (10010a5c <ble_device_init+0x260>)
10010982:	189b      	adds	r3, r3, r2
10010984:	227c      	movs	r2, #124	; 0x7c
10010986:	2100      	movs	r1, #0
10010988:	0018      	movs	r0, r3
1001098a:	4b2c      	ldr	r3, [pc, #176]	; (10010a3c <ble_device_init+0x240>)
1001098c:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1001098e:	230f      	movs	r3, #15
10010990:	18fb      	adds	r3, r7, r3
10010992:	781a      	ldrb	r2, [r3, #0]
10010994:	4931      	ldr	r1, [pc, #196]	; (10010a5c <ble_device_init+0x260>)
10010996:	205e      	movs	r0, #94	; 0x5e
10010998:	0013      	movs	r3, r2
1001099a:	015b      	lsls	r3, r3, #5
1001099c:	1a9b      	subs	r3, r3, r2
1001099e:	009b      	lsls	r3, r3, #2
100109a0:	18cb      	adds	r3, r1, r3
100109a2:	181b      	adds	r3, r3, r0
100109a4:	2200      	movs	r2, #0
100109a6:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
100109a8:	230f      	movs	r3, #15
100109aa:	18fb      	adds	r3, r7, r3
100109ac:	781a      	ldrb	r2, [r3, #0]
100109ae:	492b      	ldr	r1, [pc, #172]	; (10010a5c <ble_device_init+0x260>)
100109b0:	0013      	movs	r3, r2
100109b2:	015b      	lsls	r3, r3, #5
100109b4:	1a9b      	subs	r3, r3, r2
100109b6:	009b      	lsls	r3, r3, #2
100109b8:	18cb      	adds	r3, r1, r3
100109ba:	3318      	adds	r3, #24
100109bc:	2240      	movs	r2, #64	; 0x40
100109be:	701a      	strb	r2, [r3, #0]
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100109c0:	230f      	movs	r3, #15
100109c2:	18fb      	adds	r3, r7, r3
100109c4:	781a      	ldrb	r2, [r3, #0]
100109c6:	230f      	movs	r3, #15
100109c8:	18fb      	adds	r3, r7, r3
100109ca:	3201      	adds	r2, #1
100109cc:	701a      	strb	r2, [r3, #0]
100109ce:	230f      	movs	r3, #15
100109d0:	18fb      	adds	r3, r7, r3
100109d2:	781b      	ldrb	r3, [r3, #0]
100109d4:	2b04      	cmp	r3, #4
100109d6:	d9cc      	bls.n	10010972 <ble_device_init+0x176>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
100109d8:	4b21      	ldr	r3, [pc, #132]	; (10010a60 <ble_device_init+0x264>)
100109da:	2200      	movs	r2, #0
100109dc:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
100109de:	4b16      	ldr	r3, [pc, #88]	; (10010a38 <ble_device_init+0x23c>)
100109e0:	4a20      	ldr	r2, [pc, #128]	; (10010a64 <ble_device_init+0x268>)
100109e2:	605a      	str	r2, [r3, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
100109e4:	4b14      	ldr	r3, [pc, #80]	; (10010a38 <ble_device_init+0x23c>)
100109e6:	4a20      	ldr	r2, [pc, #128]	; (10010a68 <ble_device_init+0x26c>)
100109e8:	601a      	str	r2, [r3, #0]
#else
	pf_cfg.memPool.memSize = 0;
	pf_cfg.memPool.memStartAdd = NULL;
#endif
	
	ble_init(&pf_cfg);
100109ea:	4b13      	ldr	r3, [pc, #76]	; (10010a38 <ble_device_init+0x23c>)
100109ec:	0018      	movs	r0, r3
100109ee:	4b1f      	ldr	r3, [pc, #124]	; (10010a6c <ble_device_init+0x270>)
100109f0:	4798      	blx	r3

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
100109f2:	4b1f      	ldr	r3, [pc, #124]	; (10010a70 <ble_device_init+0x274>)
100109f4:	001a      	movs	r2, r3
100109f6:	2100      	movs	r1, #0
100109f8:	2000      	movs	r0, #0
100109fa:	4b1e      	ldr	r3, [pc, #120]	; (10010a74 <ble_device_init+0x278>)
100109fc:	4798      	blx	r3
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
100109fe:	4b1e      	ldr	r3, [pc, #120]	; (10010a78 <ble_device_init+0x27c>)
10010a00:	001a      	movs	r2, r3
10010a02:	2102      	movs	r1, #2
10010a04:	2000      	movs	r0, #0
10010a06:	4b1b      	ldr	r3, [pc, #108]	; (10010a74 <ble_device_init+0x278>)
10010a08:	4798      	blx	r3
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
10010a0a:	4b1c      	ldr	r3, [pc, #112]	; (10010a7c <ble_device_init+0x280>)
10010a0c:	60bb      	str	r3, [r7, #8]
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
10010a0e:	68bb      	ldr	r3, [r7, #8]
10010a10:	0018      	movs	r0, r3
10010a12:	4b1b      	ldr	r3, [pc, #108]	; (10010a80 <ble_device_init+0x284>)
10010a14:	4798      	blx	r3
10010a16:	0003      	movs	r3, r0
10010a18:	b2da      	uxtb	r2, r3
10010a1a:	68bb      	ldr	r3, [r7, #8]
10010a1c:	0011      	movs	r1, r2
10010a1e:	0018      	movs	r0, r3
10010a20:	4b18      	ldr	r3, [pc, #96]	; (10010a84 <ble_device_init+0x288>)
10010a22:	4798      	blx	r3
	{
		//DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
10010a24:	687b      	ldr	r3, [r7, #4]
10010a26:	0018      	movs	r0, r3
10010a28:	4b17      	ldr	r3, [pc, #92]	; (10010a88 <ble_device_init+0x28c>)
10010a2a:	4798      	blx	r3
}
10010a2c:	46c0      	nop			; (mov r8, r8)
10010a2e:	46bd      	mov	sp, r7
10010a30:	b004      	add	sp, #16
10010a32:	bd80      	pop	{r7, pc}
10010a34:	10010721 	.word	0x10010721
10010a38:	1001c678 	.word	0x1001c678
10010a3c:	10018e2d 	.word	0x10018e2d
10010a40:	1001c63c 	.word	0x1001c63c
10010a44:	1001c650 	.word	0x1001c650
10010a48:	1001c3a4 	.word	0x1001c3a4
10010a4c:	1001c688 	.word	0x1001c688
10010a50:	1001c3a0 	.word	0x1001c3a0
10010a54:	1001c628 	.word	0x1001c628
10010a58:	1001cbcc 	.word	0x1001cbcc
10010a5c:	1001c3b8 	.word	0x1001c3b8
10010a60:	1001c624 	.word	0x1001c624
10010a64:	000004e2 	.word	0x000004e2
10010a68:	1001b994 	.word	0x1001b994
10010a6c:	10010ac9 	.word	0x10010ac9
10010a70:	1001af5c 	.word	0x1001af5c
10010a74:	10010bc5 	.word	0x10010bc5
10010a78:	1001afa8 	.word	0x1001afa8
10010a7c:	1001afd0 	.word	0x1001afd0
10010a80:	100192b9 	.word	0x100192b9
10010a84:	10010a8d 	.word	0x10010a8d
10010a88:	10010aed 	.word	0x10010aed

10010a8c <ble_set_device_name>:

/** @brief set device name to BLE Device*/
at_ble_status_t ble_set_device_name(uint8_t *name, uint8_t name_len)
{
10010a8c:	b580      	push	{r7, lr}
10010a8e:	b082      	sub	sp, #8
10010a90:	af00      	add	r7, sp, #0
10010a92:	6078      	str	r0, [r7, #4]
10010a94:	000a      	movs	r2, r1
10010a96:	1cfb      	adds	r3, r7, #3
10010a98:	701a      	strb	r2, [r3, #0]
	if ((name == NULL) || (name_len < 1))
10010a9a:	687b      	ldr	r3, [r7, #4]
10010a9c:	2b00      	cmp	r3, #0
10010a9e:	d003      	beq.n	10010aa8 <ble_set_device_name+0x1c>
10010aa0:	1cfb      	adds	r3, r7, #3
10010aa2:	781b      	ldrb	r3, [r3, #0]
10010aa4:	2b00      	cmp	r3, #0
10010aa6:	d101      	bne.n	10010aac <ble_set_device_name+0x20>
	{
		return AT_BLE_INVALID_PARAM;
10010aa8:	23cf      	movs	r3, #207	; 0xcf
10010aaa:	e007      	b.n	10010abc <ble_set_device_name+0x30>
	}
	return at_ble_device_name_set(name, name_len);
10010aac:	1cfb      	adds	r3, r7, #3
10010aae:	781a      	ldrb	r2, [r3, #0]
10010ab0:	687b      	ldr	r3, [r7, #4]
10010ab2:	0011      	movs	r1, r2
10010ab4:	0018      	movs	r0, r3
10010ab6:	4b03      	ldr	r3, [pc, #12]	; (10010ac4 <ble_set_device_name+0x38>)
10010ab8:	4798      	blx	r3
10010aba:	0003      	movs	r3, r0
}
10010abc:	0018      	movs	r0, r3
10010abe:	46bd      	mov	sp, r7
10010ac0:	b002      	add	sp, #8
10010ac2:	bd80      	pop	{r7, pc}
10010ac4:	10014555 	.word	0x10014555

10010ac8 <ble_init>:

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
10010ac8:	b580      	push	{r7, lr}
10010aca:	b082      	sub	sp, #8
10010acc:	af00      	add	r7, sp, #0
10010ace:	6078      	str	r0, [r7, #4]
	/* Initialize the platform */
	//DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
10010ad0:	687b      	ldr	r3, [r7, #4]
10010ad2:	0018      	movs	r0, r3
10010ad4:	4b04      	ldr	r3, [pc, #16]	; (10010ae8 <ble_init+0x20>)
10010ad6:	4798      	blx	r3
10010ad8:	1e03      	subs	r3, r0, #0
10010ada:	d000      	beq.n	10010ade <ble_init+0x16>
	{
		//DBG_LOG("SAMB11 Initialization failed");
		//DBG_LOG("Please check the power and connection / hardware connector");	
		while(1);
10010adc:	e7fe      	b.n	10010adc <ble_init+0x14>
	}
}
10010ade:	46c0      	nop			; (mov r8, r8)
10010ae0:	46bd      	mov	sp, r7
10010ae2:	b002      	add	sp, #8
10010ae4:	bd80      	pop	{r7, pc}
10010ae6:	46c0      	nop			; (mov r8, r8)
10010ae8:	1001463d 	.word	0x1001463d

10010aec <ble_set_dev_config>:


/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
10010aec:	b580      	push	{r7, lr}
10010aee:	b08e      	sub	sp, #56	; 0x38
10010af0:	af00      	add	r7, sp, #0
10010af2:	6078      	str	r0, [r7, #4]
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
10010af4:	2308      	movs	r3, #8
10010af6:	18fa      	adds	r2, r7, r3
10010af8:	4b2b      	ldr	r3, [pc, #172]	; (10010ba8 <ble_set_dev_config+0xbc>)
10010afa:	0010      	movs	r0, r2
10010afc:	0019      	movs	r1, r3
10010afe:	2307      	movs	r3, #7
10010b00:	001a      	movs	r2, r3
10010b02:	4b2a      	ldr	r3, [pc, #168]	; (10010bac <ble_set_dev_config+0xc0>)
10010b04:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
10010b06:	2310      	movs	r3, #16
10010b08:	18fb      	adds	r3, r7, r3
10010b0a:	2226      	movs	r2, #38	; 0x26
10010b0c:	2100      	movs	r1, #0
10010b0e:	0018      	movs	r0, r3
10010b10:	4b27      	ldr	r3, [pc, #156]	; (10010bb0 <ble_set_dev_config+0xc4>)
10010b12:	4798      	blx	r3
	
	if (addr == NULL)
10010b14:	687b      	ldr	r3, [r7, #4]
10010b16:	2b00      	cmp	r3, #0
10010b18:	d107      	bne.n	10010b2a <ble_set_dev_config+0x3e>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10010b1a:	2308      	movs	r3, #8
10010b1c:	18fb      	adds	r3, r7, r3
10010b1e:	0018      	movs	r0, r3
10010b20:	4b24      	ldr	r3, [pc, #144]	; (10010bb4 <ble_set_dev_config+0xc8>)
10010b22:	4798      	blx	r3
		{
			//DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10010b24:	2308      	movs	r3, #8
10010b26:	18fb      	adds	r3, r7, r3
10010b28:	607b      	str	r3, [r7, #4]
	//addr->addr[1],
	//addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
10010b2a:	2310      	movs	r3, #16
10010b2c:	18fb      	adds	r3, r7, r3
10010b2e:	220a      	movs	r2, #10
10010b30:	701a      	strb	r2, [r3, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
10010b32:	2310      	movs	r3, #16
10010b34:	18fb      	adds	r3, r7, r3
10010b36:	4a20      	ldr	r2, [pc, #128]	; (10010bb8 <ble_set_dev_config+0xcc>)
10010b38:	805a      	strh	r2, [r3, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
10010b3a:	2310      	movs	r3, #16
10010b3c:	18fb      	adds	r3, r7, r3
10010b3e:	687a      	ldr	r2, [r7, #4]
10010b40:	3304      	adds	r3, #4
10010b42:	0011      	movs	r1, r2
10010b44:	2207      	movs	r2, #7
10010b46:	0018      	movs	r0, r3
10010b48:	4b18      	ldr	r3, [pc, #96]	; (10010bac <ble_set_dev_config+0xc0>)
10010b4a:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
10010b4c:	2310      	movs	r3, #16
10010b4e:	18fb      	adds	r3, r7, r3
10010b50:	2200      	movs	r2, #0
10010b52:	76da      	strb	r2, [r3, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
10010b54:	2310      	movs	r3, #16
10010b56:	18fb      	adds	r3, r7, r3
10010b58:	2200      	movs	r2, #0
10010b5a:	771a      	strb	r2, [r3, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
10010b5c:	2310      	movs	r3, #16
10010b5e:	18fb      	adds	r3, r7, r3
10010b60:	2200      	movs	r2, #0
10010b62:	775a      	strb	r2, [r3, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
10010b64:	2310      	movs	r3, #16
10010b66:	18fb      	adds	r3, r7, r3
10010b68:	2200      	movs	r2, #0
10010b6a:	779a      	strb	r2, [r3, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
10010b6c:	2310      	movs	r3, #16
10010b6e:	18fb      	adds	r3, r7, r3
10010b70:	2200      	movs	r2, #0
10010b72:	77da      	strb	r2, [r3, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10010b74:	2310      	movs	r3, #16
10010b76:	18fb      	adds	r3, r7, r3
10010b78:	2200      	movs	r2, #0
10010b7a:	841a      	strh	r2, [r3, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10010b7c:	2310      	movs	r3, #16
10010b7e:	18fb      	adds	r3, r7, r3
10010b80:	2200      	movs	r2, #0
10010b82:	845a      	strh	r2, [r3, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
10010b84:	2310      	movs	r3, #16
10010b86:	18fb      	adds	r3, r7, r3
10010b88:	2280      	movs	r2, #128	; 0x80
10010b8a:	0092      	lsls	r2, r2, #2
10010b8c:	849a      	strh	r2, [r3, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
10010b8e:	2310      	movs	r3, #16
10010b90:	18fb      	adds	r3, r7, r3
10010b92:	0018      	movs	r0, r3
10010b94:	4b09      	ldr	r3, [pc, #36]	; (10010bbc <ble_set_dev_config+0xd0>)
10010b96:	4798      	blx	r3
	{
		//DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
10010b98:	687b      	ldr	r3, [r7, #4]
10010b9a:	0018      	movs	r0, r3
10010b9c:	4b08      	ldr	r3, [pc, #32]	; (10010bc0 <ble_set_dev_config+0xd4>)
10010b9e:	4798      	blx	r3
	{
		//DBG_LOG("Set BLE Device Address failed");
	}
}
10010ba0:	46c0      	nop			; (mov r8, r8)
10010ba2:	46bd      	mov	sp, r7
10010ba4:	b00e      	add	sp, #56	; 0x38
10010ba6:	bd80      	pop	{r7, pc}
10010ba8:	1001afdc 	.word	0x1001afdc
10010bac:	10018e1b 	.word	0x10018e1b
10010bb0:	10018e2d 	.word	0x10018e2d
10010bb4:	10014589 	.word	0x10014589
10010bb8:	00003a98 	.word	0x00003a98
10010bbc:	100145ad 	.word	0x100145ad
10010bc0:	100147d5 	.word	0x100147d5

10010bc4 <ble_mgr_events_callback_handler>:

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
10010bc4:	b580      	push	{r7, lr}
10010bc6:	b084      	sub	sp, #16
10010bc8:	af00      	add	r7, sp, #0
10010bca:	603a      	str	r2, [r7, #0]
10010bcc:	1dfb      	adds	r3, r7, #7
10010bce:	1c02      	adds	r2, r0, #0
10010bd0:	701a      	strb	r2, [r3, #0]
10010bd2:	1dbb      	adds	r3, r7, #6
10010bd4:	1c0a      	adds	r2, r1, #0
10010bd6:	701a      	strb	r2, [r3, #0]
	uint8_t idx;
	uint8_t max_event_handler = 0;
10010bd8:	230e      	movs	r3, #14
10010bda:	18fb      	adds	r3, r7, r3
10010bdc:	2200      	movs	r2, #0
10010bde:	701a      	strb	r2, [r3, #0]
	bool status = true;
10010be0:	230d      	movs	r3, #13
10010be2:	18fb      	adds	r3, r7, r3
10010be4:	2201      	movs	r2, #1
10010be6:	701a      	strb	r2, [r3, #0]
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
10010be8:	2300      	movs	r3, #0
10010bea:	60bb      	str	r3, [r7, #8]
	if (ble_event_handler != NULL)
10010bec:	683b      	ldr	r3, [r7, #0]
10010bee:	2b00      	cmp	r3, #0
10010bf0:	d100      	bne.n	10010bf4 <ble_mgr_events_callback_handler+0x30>
10010bf2:	e0a6      	b.n	10010d42 <ble_mgr_events_callback_handler+0x17e>
	{
		switch(event_type)
10010bf4:	1dbb      	adds	r3, r7, #6
10010bf6:	781b      	ldrb	r3, [r3, #0]
10010bf8:	2b06      	cmp	r3, #6
10010bfa:	d835      	bhi.n	10010c68 <ble_mgr_events_callback_handler+0xa4>
10010bfc:	009a      	lsls	r2, r3, #2
10010bfe:	4b56      	ldr	r3, [pc, #344]	; (10010d58 <ble_mgr_events_callback_handler+0x194>)
10010c00:	18d3      	adds	r3, r2, r3
10010c02:	681b      	ldr	r3, [r3, #0]
10010c04:	469f      	mov	pc, r3
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
10010c06:	4b55      	ldr	r3, [pc, #340]	; (10010d5c <ble_mgr_events_callback_handler+0x198>)
10010c08:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
10010c0a:	230e      	movs	r3, #14
10010c0c:	18fb      	adds	r3, r7, r3
10010c0e:	2205      	movs	r2, #5
10010c10:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c12:	e02e      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
10010c14:	4b52      	ldr	r3, [pc, #328]	; (10010d60 <ble_mgr_events_callback_handler+0x19c>)
10010c16:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
10010c18:	230e      	movs	r3, #14
10010c1a:	18fb      	adds	r3, r7, r3
10010c1c:	2205      	movs	r2, #5
10010c1e:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c20:	e027      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
10010c22:	4b50      	ldr	r3, [pc, #320]	; (10010d64 <ble_mgr_events_callback_handler+0x1a0>)
10010c24:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
10010c26:	230e      	movs	r3, #14
10010c28:	18fb      	adds	r3, r7, r3
10010c2a:	2205      	movs	r2, #5
10010c2c:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c2e:	e020      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
10010c30:	4b4d      	ldr	r3, [pc, #308]	; (10010d68 <ble_mgr_events_callback_handler+0x1a4>)
10010c32:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
10010c34:	230e      	movs	r3, #14
10010c36:	18fb      	adds	r3, r7, r3
10010c38:	2201      	movs	r2, #1
10010c3a:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c3c:	e019      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
10010c3e:	4b4b      	ldr	r3, [pc, #300]	; (10010d6c <ble_mgr_events_callback_handler+0x1a8>)
10010c40:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
10010c42:	230e      	movs	r3, #14
10010c44:	18fb      	adds	r3, r7, r3
10010c46:	2201      	movs	r2, #1
10010c48:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c4a:	e012      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
10010c4c:	4b48      	ldr	r3, [pc, #288]	; (10010d70 <ble_mgr_events_callback_handler+0x1ac>)
10010c4e:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
10010c50:	230e      	movs	r3, #14
10010c52:	18fb      	adds	r3, r7, r3
10010c54:	2205      	movs	r2, #5
10010c56:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c58:	e00b      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
10010c5a:	4b46      	ldr	r3, [pc, #280]	; (10010d74 <ble_mgr_events_callback_handler+0x1b0>)
10010c5c:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
10010c5e:	230e      	movs	r3, #14
10010c60:	18fb      	adds	r3, r7, r3
10010c62:	2201      	movs	r2, #1
10010c64:	701a      	strb	r2, [r3, #0]
			}
			break;
10010c66:	e004      	b.n	10010c72 <ble_mgr_events_callback_handler+0xae>
			
			default:
			{
				status = false; //Invalid Parameter
10010c68:	230d      	movs	r3, #13
10010c6a:	18fb      	adds	r3, r7, r3
10010c6c:	2200      	movs	r2, #0
10010c6e:	701a      	strb	r2, [r3, #0]
			}			
			break;
10010c70:	46c0      	nop			; (mov r8, r8)
		}
		
		if (status)
10010c72:	230d      	movs	r3, #13
10010c74:	18fb      	adds	r3, r7, r3
10010c76:	781b      	ldrb	r3, [r3, #0]
10010c78:	2b00      	cmp	r3, #0
10010c7a:	d066      	beq.n	10010d4a <ble_mgr_events_callback_handler+0x186>
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10010c7c:	230d      	movs	r3, #13
10010c7e:	18fb      	adds	r3, r7, r3
10010c80:	2200      	movs	r2, #0
10010c82:	701a      	strb	r2, [r3, #0]
			if (event_cb_type == REGISTER_CALL_BACK)
10010c84:	1dfb      	adds	r3, r7, #7
10010c86:	781b      	ldrb	r3, [r3, #0]
10010c88:	2b00      	cmp	r3, #0
10010c8a:	d12a      	bne.n	10010ce2 <ble_mgr_events_callback_handler+0x11e>
			{
				for (idx = 0; idx < max_event_handler; idx++)
10010c8c:	230f      	movs	r3, #15
10010c8e:	18fb      	adds	r3, r7, r3
10010c90:	2200      	movs	r2, #0
10010c92:	701a      	strb	r2, [r3, #0]
10010c94:	e01c      	b.n	10010cd0 <ble_mgr_events_callback_handler+0x10c>
				{
					if(ble_event_cb_ptr[idx] == NULL)
10010c96:	230f      	movs	r3, #15
10010c98:	18fb      	adds	r3, r7, r3
10010c9a:	781b      	ldrb	r3, [r3, #0]
10010c9c:	009b      	lsls	r3, r3, #2
10010c9e:	68ba      	ldr	r2, [r7, #8]
10010ca0:	18d3      	adds	r3, r2, r3
10010ca2:	681b      	ldr	r3, [r3, #0]
10010ca4:	2b00      	cmp	r3, #0
10010ca6:	d10c      	bne.n	10010cc2 <ble_mgr_events_callback_handler+0xfe>
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
10010ca8:	230f      	movs	r3, #15
10010caa:	18fb      	adds	r3, r7, r3
10010cac:	781b      	ldrb	r3, [r3, #0]
10010cae:	009b      	lsls	r3, r3, #2
10010cb0:	68ba      	ldr	r2, [r7, #8]
10010cb2:	18d3      	adds	r3, r2, r3
10010cb4:	683a      	ldr	r2, [r7, #0]
10010cb6:	601a      	str	r2, [r3, #0]
						status = true; //Successfully registered to table
10010cb8:	230d      	movs	r3, #13
10010cba:	18fb      	adds	r3, r7, r3
10010cbc:	2201      	movs	r2, #1
10010cbe:	701a      	strb	r2, [r3, #0]
						break;
10010cc0:	e043      	b.n	10010d4a <ble_mgr_events_callback_handler+0x186>
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10010cc2:	230f      	movs	r3, #15
10010cc4:	18fb      	adds	r3, r7, r3
10010cc6:	781a      	ldrb	r2, [r3, #0]
10010cc8:	230f      	movs	r3, #15
10010cca:	18fb      	adds	r3, r7, r3
10010ccc:	3201      	adds	r2, #1
10010cce:	701a      	strb	r2, [r3, #0]
10010cd0:	230f      	movs	r3, #15
10010cd2:	18fa      	adds	r2, r7, r3
10010cd4:	230e      	movs	r3, #14
10010cd6:	18fb      	adds	r3, r7, r3
10010cd8:	7812      	ldrb	r2, [r2, #0]
10010cda:	781b      	ldrb	r3, [r3, #0]
10010cdc:	429a      	cmp	r2, r3
10010cde:	d3da      	bcc.n	10010c96 <ble_mgr_events_callback_handler+0xd2>
10010ce0:	e033      	b.n	10010d4a <ble_mgr_events_callback_handler+0x186>
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
10010ce2:	1dfb      	adds	r3, r7, #7
10010ce4:	781b      	ldrb	r3, [r3, #0]
10010ce6:	2b01      	cmp	r3, #1
10010ce8:	d12f      	bne.n	10010d4a <ble_mgr_events_callback_handler+0x186>
			{
				for (idx = 0; idx < max_event_handler; idx++)
10010cea:	230f      	movs	r3, #15
10010cec:	18fb      	adds	r3, r7, r3
10010cee:	2200      	movs	r2, #0
10010cf0:	701a      	strb	r2, [r3, #0]
10010cf2:	e01d      	b.n	10010d30 <ble_mgr_events_callback_handler+0x16c>
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10010cf4:	230f      	movs	r3, #15
10010cf6:	18fb      	adds	r3, r7, r3
10010cf8:	781b      	ldrb	r3, [r3, #0]
10010cfa:	009b      	lsls	r3, r3, #2
10010cfc:	68ba      	ldr	r2, [r7, #8]
10010cfe:	18d3      	adds	r3, r2, r3
10010d00:	681a      	ldr	r2, [r3, #0]
10010d02:	683b      	ldr	r3, [r7, #0]
10010d04:	429a      	cmp	r2, r3
10010d06:	d10c      	bne.n	10010d22 <ble_mgr_events_callback_handler+0x15e>
					{
						ble_event_cb_ptr[idx] = NULL;
10010d08:	230f      	movs	r3, #15
10010d0a:	18fb      	adds	r3, r7, r3
10010d0c:	781b      	ldrb	r3, [r3, #0]
10010d0e:	009b      	lsls	r3, r3, #2
10010d10:	68ba      	ldr	r2, [r7, #8]
10010d12:	18d3      	adds	r3, r2, r3
10010d14:	2200      	movs	r2, #0
10010d16:	601a      	str	r2, [r3, #0]
						status = true;//Successfully unregistered from table
10010d18:	230d      	movs	r3, #13
10010d1a:	18fb      	adds	r3, r7, r3
10010d1c:	2201      	movs	r2, #1
10010d1e:	701a      	strb	r2, [r3, #0]
						break;
10010d20:	e013      	b.n	10010d4a <ble_mgr_events_callback_handler+0x186>
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10010d22:	230f      	movs	r3, #15
10010d24:	18fb      	adds	r3, r7, r3
10010d26:	781a      	ldrb	r2, [r3, #0]
10010d28:	230f      	movs	r3, #15
10010d2a:	18fb      	adds	r3, r7, r3
10010d2c:	3201      	adds	r2, #1
10010d2e:	701a      	strb	r2, [r3, #0]
10010d30:	230f      	movs	r3, #15
10010d32:	18fa      	adds	r2, r7, r3
10010d34:	230e      	movs	r3, #14
10010d36:	18fb      	adds	r3, r7, r3
10010d38:	7812      	ldrb	r2, [r2, #0]
10010d3a:	781b      	ldrb	r3, [r3, #0]
10010d3c:	429a      	cmp	r2, r3
10010d3e:	d3d9      	bcc.n	10010cf4 <ble_mgr_events_callback_handler+0x130>
10010d40:	e003      	b.n	10010d4a <ble_mgr_events_callback_handler+0x186>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
10010d42:	230d      	movs	r3, #13
10010d44:	18fb      	adds	r3, r7, r3
10010d46:	2200      	movs	r2, #0
10010d48:	701a      	strb	r2, [r3, #0]
	}
	return status;
10010d4a:	230d      	movs	r3, #13
10010d4c:	18fb      	adds	r3, r7, r3
10010d4e:	781b      	ldrb	r3, [r3, #0]
}
10010d50:	0018      	movs	r0, r3
10010d52:	46bd      	mov	sp, r7
10010d54:	b004      	add	sp, #16
10010d56:	bd80      	pop	{r7, pc}
10010d58:	1001b530 	.word	0x1001b530
10010d5c:	1001c63c 	.word	0x1001c63c
10010d60:	1001c650 	.word	0x1001c650
10010d64:	1001c3a4 	.word	0x1001c3a4
10010d68:	1001c688 	.word	0x1001c688
10010d6c:	1001c3a0 	.word	0x1001c3a0
10010d70:	1001c628 	.word	0x1001c628
10010d74:	1001cbcc 	.word	0x1001cbcc

10010d78 <ble_undefined_event_handler>:

at_ble_status_t ble_undefined_event_handler(void *params)
{
10010d78:	b580      	push	{r7, lr}
10010d7a:	b082      	sub	sp, #8
10010d7c:	af00      	add	r7, sp, #0
10010d7e:	6078      	str	r0, [r7, #4]
	DBG_LOG_DEV("Undefined Event Received");
10010d80:	4b06      	ldr	r3, [pc, #24]	; (10010d9c <ble_undefined_event_handler+0x24>)
10010d82:	0018      	movs	r0, r3
10010d84:	4b06      	ldr	r3, [pc, #24]	; (10010da0 <ble_undefined_event_handler+0x28>)
10010d86:	4798      	blx	r3
10010d88:	4b06      	ldr	r3, [pc, #24]	; (10010da4 <ble_undefined_event_handler+0x2c>)
10010d8a:	0018      	movs	r0, r3
10010d8c:	4b06      	ldr	r3, [pc, #24]	; (10010da8 <ble_undefined_event_handler+0x30>)
10010d8e:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
10010d90:	2300      	movs	r3, #0
}
10010d92:	0018      	movs	r0, r3
10010d94:	46bd      	mov	sp, r7
10010d96:	b002      	add	sp, #8
10010d98:	bd80      	pop	{r7, pc}
10010d9a:	46c0      	nop			; (mov r8, r8)
10010d9c:	1001afe4 	.word	0x1001afe4
10010da0:	10019095 	.word	0x10019095
10010da4:	1001afe8 	.word	0x1001afe8
10010da8:	10018f75 	.word	0x10018f75

10010dac <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10010dac:	b580      	push	{r7, lr}
10010dae:	b084      	sub	sp, #16
10010db0:	af00      	add	r7, sp, #0
10010db2:	6078      	str	r0, [r7, #4]
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
10010db4:	687b      	ldr	r3, [r7, #4]
10010db6:	60fb      	str	r3, [r7, #12]
	if(scan_response_count < MAX_SCAN_DEVICE)
10010db8:	4b12      	ldr	r3, [pc, #72]	; (10010e04 <ble_scan_info_handler+0x58>)
10010dba:	781b      	ldrb	r3, [r3, #0]
10010dbc:	b2db      	uxtb	r3, r3
10010dbe:	2b13      	cmp	r3, #19
10010dc0:	d818      	bhi.n	10010df4 <ble_scan_info_handler+0x48>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10010dc2:	4b10      	ldr	r3, [pc, #64]	; (10010e04 <ble_scan_info_handler+0x58>)
10010dc4:	781b      	ldrb	r3, [r3, #0]
10010dc6:	b2db      	uxtb	r3, r3
10010dc8:	001a      	movs	r2, r3
10010dca:	0013      	movs	r3, r2
10010dcc:	009b      	lsls	r3, r3, #2
10010dce:	189b      	adds	r3, r3, r2
10010dd0:	00db      	lsls	r3, r3, #3
10010dd2:	189b      	adds	r3, r3, r2
10010dd4:	4a0c      	ldr	r2, [pc, #48]	; (10010e08 <ble_scan_info_handler+0x5c>)
10010dd6:	189b      	adds	r3, r3, r2
10010dd8:	68f9      	ldr	r1, [r7, #12]
10010dda:	2229      	movs	r2, #41	; 0x29
10010ddc:	0018      	movs	r0, r3
10010dde:	4b0b      	ldr	r3, [pc, #44]	; (10010e0c <ble_scan_info_handler+0x60>)
10010de0:	4798      	blx	r3
		//scan_param->dev_addr.addr[4],
		//scan_param->dev_addr.addr[3],
		//scan_param->dev_addr.addr[2],
		//scan_param->dev_addr.addr[1],
		//scan_param->dev_addr.addr[0]);
		scan_response_count++;
10010de2:	4b08      	ldr	r3, [pc, #32]	; (10010e04 <ble_scan_info_handler+0x58>)
10010de4:	781b      	ldrb	r3, [r3, #0]
10010de6:	b2db      	uxtb	r3, r3
10010de8:	3301      	adds	r3, #1
10010dea:	b2da      	uxtb	r2, r3
10010dec:	4b05      	ldr	r3, [pc, #20]	; (10010e04 <ble_scan_info_handler+0x58>)
10010dee:	701a      	strb	r2, [r3, #0]
		return AT_BLE_SUCCESS;
10010df0:	2300      	movs	r3, #0
10010df2:	e002      	b.n	10010dfa <ble_scan_info_handler+0x4e>
	}
	else
	{
		//DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10010df4:	4b06      	ldr	r3, [pc, #24]	; (10010e10 <ble_scan_info_handler+0x64>)
10010df6:	4798      	blx	r3
		{
			//DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
10010df8:	23e2      	movs	r3, #226	; 0xe2
	}
}
10010dfa:	0018      	movs	r0, r3
10010dfc:	46bd      	mov	sp, r7
10010dfe:	b004      	add	sp, #16
10010e00:	bd80      	pop	{r7, pc}
10010e02:	46c0      	nop			; (mov r8, r8)
10010e04:	1001be80 	.word	0x1001be80
10010e08:	1001c68c 	.word	0x1001c68c
10010e0c:	10018e1b 	.word	0x10018e1b
10010e10:	100149e9 	.word	0x100149e9

10010e14 <ble_scan_report_handler>:

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10010e14:	b580      	push	{r7, lr}
10010e16:	b084      	sub	sp, #16
10010e18:	af00      	add	r7, sp, #0
10010e1a:	6078      	str	r0, [r7, #4]
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
10010e1c:	687b      	ldr	r3, [r7, #4]
10010e1e:	60fb      	str	r3, [r7, #12]
	if (scan_report->status == AT_BLE_SUCCESS)
10010e20:	68fb      	ldr	r3, [r7, #12]
10010e22:	781b      	ldrb	r3, [r3, #0]
10010e24:	2b00      	cmp	r3, #0
10010e26:	d101      	bne.n	10010e2c <ble_scan_report_handler+0x18>
	{
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
10010e28:	2300      	movs	r3, #0
10010e2a:	e000      	b.n	10010e2e <ble_scan_report_handler+0x1a>
	}
	else
	{
		//DBG_LOG("Scanning  failed");
	}
	return AT_BLE_FAILURE;
10010e2c:	23e2      	movs	r3, #226	; 0xe2
}
10010e2e:	0018      	movs	r0, r3
10010e30:	46bd      	mov	sp, r7
10010e32:	b004      	add	sp, #16
10010e34:	bd80      	pop	{r7, pc}
10010e36:	46c0      	nop			; (mov r8, r8)

10010e38 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
10010e38:	b580      	push	{r7, lr}
10010e3a:	b082      	sub	sp, #8
10010e3c:	af00      	add	r7, sp, #0
10010e3e:	0002      	movs	r2, r0
10010e40:	1dbb      	adds	r3, r7, #6
10010e42:	801a      	strh	r2, [r3, #0]
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
10010e44:	1dbb      	adds	r3, r7, #6
10010e46:	881b      	ldrh	r3, [r3, #0]
10010e48:	2200      	movs	r2, #0
10010e4a:	2100      	movs	r1, #0
10010e4c:	0018      	movs	r0, r3
10010e4e:	4b05      	ldr	r3, [pc, #20]	; (10010e64 <ble_send_slave_sec_request+0x2c>)
10010e50:	4798      	blx	r3
10010e52:	1e03      	subs	r3, r0, #0
10010e54:	d101      	bne.n	10010e5a <ble_send_slave_sec_request+0x22>
		{
			//DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
10010e56:	2300      	movs	r3, #0
10010e58:	e000      	b.n	10010e5c <ble_send_slave_sec_request+0x24>
		else
		{
			//DBG_LOG("Slave security request failed");
		}
	#endif
	return AT_BLE_FAILURE;
10010e5a:	23e2      	movs	r3, #226	; 0xe2
}
10010e5c:	0018      	movs	r0, r3
10010e5e:	46bd      	mov	sp, r7
10010e60:	b002      	add	sp, #8
10010e62:	bd80      	pop	{r7, pc}
10010e64:	10015595 	.word	0x10015595

10010e68 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10010e68:	b5b0      	push	{r4, r5, r7, lr}
10010e6a:	b09a      	sub	sp, #104	; 0x68
10010e6c:	af00      	add	r7, sp, #0
10010e6e:	6078      	str	r0, [r7, #4]
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
10010e70:	2367      	movs	r3, #103	; 0x67
10010e72:	18fb      	adds	r3, r7, r3
10010e74:	2200      	movs	r2, #0
10010e76:	701a      	strb	r2, [r3, #0]
	conn_params = (at_ble_connected_t *)params;
10010e78:	687b      	ldr	r3, [r7, #4]
10010e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
	bool peripheral_device_added = false;
10010e7c:	2366      	movs	r3, #102	; 0x66
10010e7e:	18fb      	adds	r3, r7, r3
10010e80:	2200      	movs	r2, #0
10010e82:	701a      	strb	r2, [r3, #0]
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
10010e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10010e86:	7a9b      	ldrb	r3, [r3, #10]
10010e88:	2b00      	cmp	r3, #0
10010e8a:	d000      	beq.n	10010e8e <ble_connected_state_handler+0x26>
10010e8c:	e168      	b.n	10011160 <ble_connected_state_handler+0x2f8>
		//conn_params->peer_addr.addr[1],
		//conn_params->peer_addr.addr[0]);
		
		//DBG_LOG("Connection Handle %d", conn_params->handle);
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
10010e8e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10010e90:	4bbc      	ldr	r3, [pc, #752]	; (10011184 <ble_connected_state_handler+0x31c>)
10010e92:	2212      	movs	r2, #18
10010e94:	0018      	movs	r0, r3
10010e96:	4bbc      	ldr	r3, [pc, #752]	; (10011188 <ble_connected_state_handler+0x320>)
10010e98:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10010e9a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10010e9c:	4bbb      	ldr	r3, [pc, #748]	; (1001118c <ble_connected_state_handler+0x324>)
10010e9e:	2207      	movs	r2, #7
10010ea0:	0018      	movs	r0, r3
10010ea2:	4bbb      	ldr	r3, [pc, #748]	; (10011190 <ble_connected_state_handler+0x328>)
10010ea4:	4798      	blx	r3
10010ea6:	1e03      	subs	r3, r0, #0
10010ea8:	d100      	bne.n	10010eac <ble_connected_state_handler+0x44>
10010eaa:	e07b      	b.n	10010fa4 <ble_connected_state_handler+0x13c>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
10010eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10010eae:	781b      	ldrb	r3, [r3, #0]
10010eb0:	2b02      	cmp	r3, #2
10010eb2:	d000      	beq.n	10010eb6 <ble_connected_state_handler+0x4e>
10010eb4:	e076      	b.n	10010fa4 <ble_connected_state_handler+0x13c>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
10010eb6:	2362      	movs	r3, #98	; 0x62
10010eb8:	18fb      	adds	r3, r7, r3
10010eba:	2200      	movs	r2, #0
10010ebc:	801a      	strh	r2, [r3, #0]
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
10010ebe:	235b      	movs	r3, #91	; 0x5b
10010ec0:	18fb      	adds	r3, r7, r3
10010ec2:	2205      	movs	r2, #5
10010ec4:	701a      	strb	r2, [r3, #0]
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
10010ec6:	2308      	movs	r3, #8
10010ec8:	18fb      	adds	r3, r7, r3
10010eca:	0018      	movs	r0, r3
10010ecc:	2350      	movs	r3, #80	; 0x50
10010ece:	001a      	movs	r2, r3
10010ed0:	2100      	movs	r1, #0
10010ed2:	4bb0      	ldr	r3, [pc, #704]	; (10011194 <ble_connected_state_handler+0x32c>)
10010ed4:	4798      	blx	r3
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
10010ed6:	2365      	movs	r3, #101	; 0x65
10010ed8:	18fb      	adds	r3, r7, r3
10010eda:	2200      	movs	r2, #0
10010edc:	701a      	strb	r2, [r3, #0]
10010ede:	e032      	b.n	10010f46 <ble_connected_state_handler+0xde>
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
10010ee0:	2364      	movs	r3, #100	; 0x64
10010ee2:	18fb      	adds	r3, r7, r3
10010ee4:	2200      	movs	r2, #0
10010ee6:	701a      	strb	r2, [r3, #0]
10010ee8:	e021      	b.n	10010f2e <ble_connected_state_handler+0xc6>
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10010eea:	2362      	movs	r3, #98	; 0x62
10010eec:	18fb      	adds	r3, r7, r3
10010eee:	881b      	ldrh	r3, [r3, #0]
10010ef0:	2262      	movs	r2, #98	; 0x62
10010ef2:	18ba      	adds	r2, r7, r2
10010ef4:	1c59      	adds	r1, r3, #1
10010ef6:	8011      	strh	r1, [r2, #0]
10010ef8:	001d      	movs	r5, r3
10010efa:	2365      	movs	r3, #101	; 0x65
10010efc:	18fb      	adds	r3, r7, r3
10010efe:	781a      	ldrb	r2, [r3, #0]
10010f00:	2364      	movs	r3, #100	; 0x64
10010f02:	18fb      	adds	r3, r7, r3
10010f04:	7819      	ldrb	r1, [r3, #0]
10010f06:	48a4      	ldr	r0, [pc, #656]	; (10011198 <ble_connected_state_handler+0x330>)
10010f08:	2446      	movs	r4, #70	; 0x46
10010f0a:	0013      	movs	r3, r2
10010f0c:	015b      	lsls	r3, r3, #5
10010f0e:	1a9b      	subs	r3, r3, r2
10010f10:	009b      	lsls	r3, r3, #2
10010f12:	18c3      	adds	r3, r0, r3
10010f14:	185b      	adds	r3, r3, r1
10010f16:	191b      	adds	r3, r3, r4
10010f18:	781a      	ldrb	r2, [r3, #0]
10010f1a:	2308      	movs	r3, #8
10010f1c:	18fb      	adds	r3, r7, r3
10010f1e:	555a      	strb	r2, [r3, r5]
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
10010f20:	2364      	movs	r3, #100	; 0x64
10010f22:	18fb      	adds	r3, r7, r3
10010f24:	781a      	ldrb	r2, [r3, #0]
10010f26:	2364      	movs	r3, #100	; 0x64
10010f28:	18fb      	adds	r3, r7, r3
10010f2a:	3201      	adds	r2, #1
10010f2c:	701a      	strb	r2, [r3, #0]
10010f2e:	2364      	movs	r3, #100	; 0x64
10010f30:	18fb      	adds	r3, r7, r3
10010f32:	781b      	ldrb	r3, [r3, #0]
10010f34:	2b0f      	cmp	r3, #15
10010f36:	d9d8      	bls.n	10010eea <ble_connected_state_handler+0x82>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
10010f38:	2365      	movs	r3, #101	; 0x65
10010f3a:	18fb      	adds	r3, r7, r3
10010f3c:	781a      	ldrb	r2, [r3, #0]
10010f3e:	2365      	movs	r3, #101	; 0x65
10010f40:	18fb      	adds	r3, r7, r3
10010f42:	3201      	adds	r2, #1
10010f44:	701a      	strb	r2, [r3, #0]
10010f46:	2365      	movs	r3, #101	; 0x65
10010f48:	18fb      	adds	r3, r7, r3
10010f4a:	781b      	ldrb	r3, [r3, #0]
10010f4c:	2b04      	cmp	r3, #4
10010f4e:	d9c7      	bls.n	10010ee0 <ble_connected_state_handler+0x78>
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
					}
					
				}
				if (nb_keys)
10010f50:	235b      	movs	r3, #91	; 0x5b
10010f52:	18fb      	adds	r3, r7, r3
10010f54:	781b      	ldrb	r3, [r3, #0]
10010f56:	2b00      	cmp	r3, #0
10010f58:	d01c      	beq.n	10010f94 <ble_connected_state_handler+0x12c>
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
10010f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10010f5c:	2208      	movs	r2, #8
10010f5e:	18ba      	adds	r2, r7, r2
10010f60:	0019      	movs	r1, r3
10010f62:	2005      	movs	r0, #5
10010f64:	4b8d      	ldr	r3, [pc, #564]	; (1001119c <ble_connected_state_handler+0x334>)
10010f66:	4798      	blx	r3
10010f68:	1e03      	subs	r3, r0, #0
10010f6a:	d109      	bne.n	10010f80 <ble_connected_state_handler+0x118>
					{
						DBG_LOG_DEV("Resolving Random address success**");
10010f6c:	4b8c      	ldr	r3, [pc, #560]	; (100111a0 <ble_connected_state_handler+0x338>)
10010f6e:	0018      	movs	r0, r3
10010f70:	4b8c      	ldr	r3, [pc, #560]	; (100111a4 <ble_connected_state_handler+0x33c>)
10010f72:	4798      	blx	r3
10010f74:	4b8c      	ldr	r3, [pc, #560]	; (100111a8 <ble_connected_state_handler+0x340>)
10010f76:	0018      	movs	r0, r3
10010f78:	4b8c      	ldr	r3, [pc, #560]	; (100111ac <ble_connected_state_handler+0x344>)
10010f7a:	4798      	blx	r3
						return AT_BLE_SUCCESS;
10010f7c:	2300      	movs	r3, #0
10010f7e:	e0fc      	b.n	1001117a <ble_connected_state_handler+0x312>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
10010f80:	4b87      	ldr	r3, [pc, #540]	; (100111a0 <ble_connected_state_handler+0x338>)
10010f82:	0018      	movs	r0, r3
10010f84:	4b87      	ldr	r3, [pc, #540]	; (100111a4 <ble_connected_state_handler+0x33c>)
10010f86:	4798      	blx	r3
10010f88:	4b89      	ldr	r3, [pc, #548]	; (100111b0 <ble_connected_state_handler+0x348>)
10010f8a:	0018      	movs	r0, r3
10010f8c:	4b87      	ldr	r3, [pc, #540]	; (100111ac <ble_connected_state_handler+0x344>)
10010f8e:	4798      	blx	r3
						return AT_BLE_FAILURE;
10010f90:	23e2      	movs	r3, #226	; 0xe2
10010f92:	e0f2      	b.n	1001117a <ble_connected_state_handler+0x312>
					}					
				}
				else
				{
					DBG_LOG_DEV("New Connection");
10010f94:	4b82      	ldr	r3, [pc, #520]	; (100111a0 <ble_connected_state_handler+0x338>)
10010f96:	0018      	movs	r0, r3
10010f98:	4b82      	ldr	r3, [pc, #520]	; (100111a4 <ble_connected_state_handler+0x33c>)
10010f9a:	4798      	blx	r3
10010f9c:	4b85      	ldr	r3, [pc, #532]	; (100111b4 <ble_connected_state_handler+0x34c>)
10010f9e:	0018      	movs	r0, r3
10010fa0:	4b82      	ldr	r3, [pc, #520]	; (100111ac <ble_connected_state_handler+0x344>)
10010fa2:	4798      	blx	r3
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
10010fa4:	4b84      	ldr	r3, [pc, #528]	; (100111b8 <ble_connected_state_handler+0x350>)
10010fa6:	781b      	ldrb	r3, [r3, #0]
10010fa8:	b2db      	uxtb	r3, r3
10010faa:	2b04      	cmp	r3, #4
10010fac:	d900      	bls.n	10010fb0 <ble_connected_state_handler+0x148>
10010fae:	e0ac      	b.n	1001110a <ble_connected_state_handler+0x2a2>
		{
			bool conn_exists = false;
10010fb0:	2361      	movs	r3, #97	; 0x61
10010fb2:	18fb      	adds	r3, r7, r3
10010fb4:	2200      	movs	r2, #0
10010fb6:	701a      	strb	r2, [r3, #0]
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10010fb8:	2367      	movs	r3, #103	; 0x67
10010fba:	18fb      	adds	r3, r7, r3
10010fbc:	2200      	movs	r2, #0
10010fbe:	701a      	strb	r2, [r3, #0]
10010fc0:	e028      	b.n	10011014 <ble_connected_state_handler+0x1ac>
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10010fc2:	2367      	movs	r3, #103	; 0x67
10010fc4:	18fb      	adds	r3, r7, r3
10010fc6:	781a      	ldrb	r2, [r3, #0]
10010fc8:	0013      	movs	r3, r2
10010fca:	015b      	lsls	r3, r3, #5
10010fcc:	1a9b      	subs	r3, r3, r2
10010fce:	009b      	lsls	r3, r3, #2
10010fd0:	4a71      	ldr	r2, [pc, #452]	; (10011198 <ble_connected_state_handler+0x330>)
10010fd2:	189b      	adds	r3, r3, r2
10010fd4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10010fd6:	2207      	movs	r2, #7
10010fd8:	0018      	movs	r0, r3
10010fda:	4b6d      	ldr	r3, [pc, #436]	; (10011190 <ble_connected_state_handler+0x328>)
10010fdc:	4798      	blx	r3
10010fde:	1e03      	subs	r3, r0, #0
10010fe0:	d111      	bne.n	10011006 <ble_connected_state_handler+0x19e>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10010fe2:	2367      	movs	r3, #103	; 0x67
10010fe4:	18fb      	adds	r3, r7, r3
10010fe6:	781a      	ldrb	r2, [r3, #0]
10010fe8:	496b      	ldr	r1, [pc, #428]	; (10011198 <ble_connected_state_handler+0x330>)
10010fea:	205e      	movs	r0, #94	; 0x5e
10010fec:	0013      	movs	r3, r2
10010fee:	015b      	lsls	r3, r3, #5
10010ff0:	1a9b      	subs	r3, r3, r2
10010ff2:	009b      	lsls	r3, r3, #2
10010ff4:	18cb      	adds	r3, r1, r3
10010ff6:	181b      	adds	r3, r3, r0
10010ff8:	2202      	movs	r2, #2
10010ffa:	701a      	strb	r2, [r3, #0]
					conn_exists = true;
10010ffc:	2361      	movs	r3, #97	; 0x61
10010ffe:	18fb      	adds	r3, r7, r3
10011000:	2201      	movs	r2, #1
10011002:	701a      	strb	r2, [r3, #0]
					break;
10011004:	e00b      	b.n	1001101e <ble_connected_state_handler+0x1b6>
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011006:	2367      	movs	r3, #103	; 0x67
10011008:	18fb      	adds	r3, r7, r3
1001100a:	781a      	ldrb	r2, [r3, #0]
1001100c:	2367      	movs	r3, #103	; 0x67
1001100e:	18fb      	adds	r3, r7, r3
10011010:	3201      	adds	r2, #1
10011012:	701a      	strb	r2, [r3, #0]
10011014:	2367      	movs	r3, #103	; 0x67
10011016:	18fb      	adds	r3, r7, r3
10011018:	781b      	ldrb	r3, [r3, #0]
1001101a:	2b04      	cmp	r3, #4
1001101c:	d9d1      	bls.n	10010fc2 <ble_connected_state_handler+0x15a>
					conn_exists = true;
					break;
				}
			}
			
			if (!conn_exists)
1001101e:	2361      	movs	r3, #97	; 0x61
10011020:	18fb      	adds	r3, r7, r3
10011022:	781b      	ldrb	r3, [r3, #0]
10011024:	2201      	movs	r2, #1
10011026:	4053      	eors	r3, r2
10011028:	b2db      	uxtb	r3, r3
1001102a:	2b00      	cmp	r3, #0
1001102c:	d041      	beq.n	100110b2 <ble_connected_state_handler+0x24a>
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1001102e:	2367      	movs	r3, #103	; 0x67
10011030:	18fb      	adds	r3, r7, r3
10011032:	2200      	movs	r2, #0
10011034:	701a      	strb	r2, [r3, #0]
10011036:	e037      	b.n	100110a8 <ble_connected_state_handler+0x240>
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10011038:	2367      	movs	r3, #103	; 0x67
1001103a:	18fb      	adds	r3, r7, r3
1001103c:	781a      	ldrb	r2, [r3, #0]
1001103e:	4956      	ldr	r1, [pc, #344]	; (10011198 <ble_connected_state_handler+0x330>)
10011040:	205e      	movs	r0, #94	; 0x5e
10011042:	0013      	movs	r3, r2
10011044:	015b      	lsls	r3, r3, #5
10011046:	1a9b      	subs	r3, r3, r2
10011048:	009b      	lsls	r3, r3, #2
1001104a:	18cb      	adds	r3, r1, r3
1001104c:	181b      	adds	r3, r3, r0
1001104e:	781b      	ldrb	r3, [r3, #0]
10011050:	2b00      	cmp	r3, #0
10011052:	d122      	bne.n	1001109a <ble_connected_state_handler+0x232>
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
10011054:	2367      	movs	r3, #103	; 0x67
10011056:	18fb      	adds	r3, r7, r3
10011058:	781a      	ldrb	r2, [r3, #0]
1001105a:	0013      	movs	r3, r2
1001105c:	015b      	lsls	r3, r3, #5
1001105e:	1a9b      	subs	r3, r3, r2
10011060:	009b      	lsls	r3, r3, #2
10011062:	4a4d      	ldr	r2, [pc, #308]	; (10011198 <ble_connected_state_handler+0x330>)
10011064:	189b      	adds	r3, r3, r2
10011066:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10011068:	2212      	movs	r2, #18
1001106a:	0018      	movs	r0, r3
1001106c:	4b46      	ldr	r3, [pc, #280]	; (10011188 <ble_connected_state_handler+0x320>)
1001106e:	4798      	blx	r3
						ble_device_count++;
10011070:	4b51      	ldr	r3, [pc, #324]	; (100111b8 <ble_connected_state_handler+0x350>)
10011072:	781b      	ldrb	r3, [r3, #0]
10011074:	b2db      	uxtb	r3, r3
10011076:	3301      	adds	r3, #1
10011078:	b2da      	uxtb	r2, r3
1001107a:	4b4f      	ldr	r3, [pc, #316]	; (100111b8 <ble_connected_state_handler+0x350>)
1001107c:	701a      	strb	r2, [r3, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1001107e:	2367      	movs	r3, #103	; 0x67
10011080:	18fb      	adds	r3, r7, r3
10011082:	781a      	ldrb	r2, [r3, #0]
10011084:	4944      	ldr	r1, [pc, #272]	; (10011198 <ble_connected_state_handler+0x330>)
10011086:	205e      	movs	r0, #94	; 0x5e
10011088:	0013      	movs	r3, r2
1001108a:	015b      	lsls	r3, r3, #5
1001108c:	1a9b      	subs	r3, r3, r2
1001108e:	009b      	lsls	r3, r3, #2
10011090:	18cb      	adds	r3, r1, r3
10011092:	181b      	adds	r3, r3, r0
10011094:	2202      	movs	r2, #2
10011096:	701a      	strb	r2, [r3, #0]
						break;
10011098:	e00b      	b.n	100110b2 <ble_connected_state_handler+0x24a>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1001109a:	2367      	movs	r3, #103	; 0x67
1001109c:	18fb      	adds	r3, r7, r3
1001109e:	781a      	ldrb	r2, [r3, #0]
100110a0:	2367      	movs	r3, #103	; 0x67
100110a2:	18fb      	adds	r3, r7, r3
100110a4:	3201      	adds	r2, #1
100110a6:	701a      	strb	r2, [r3, #0]
100110a8:	2367      	movs	r3, #103	; 0x67
100110aa:	18fb      	adds	r3, r7, r3
100110ac:	781b      	ldrb	r3, [r3, #0]
100110ae:	2b04      	cmp	r3, #4
100110b0:	d9c2      	bls.n	10011038 <ble_connected_state_handler+0x1d0>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
100110b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
100110b4:	4b35      	ldr	r3, [pc, #212]	; (1001118c <ble_connected_state_handler+0x324>)
100110b6:	2207      	movs	r2, #7
100110b8:	0018      	movs	r0, r3
100110ba:	4b35      	ldr	r3, [pc, #212]	; (10011190 <ble_connected_state_handler+0x328>)
100110bc:	4798      	blx	r3
100110be:	1e03      	subs	r3, r0, #0
100110c0:	d10c      	bne.n	100110dc <ble_connected_state_handler+0x274>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
100110c2:	2367      	movs	r3, #103	; 0x67
100110c4:	18fb      	adds	r3, r7, r3
100110c6:	781a      	ldrb	r2, [r3, #0]
100110c8:	4933      	ldr	r1, [pc, #204]	; (10011198 <ble_connected_state_handler+0x330>)
100110ca:	0013      	movs	r3, r2
100110cc:	015b      	lsls	r3, r3, #5
100110ce:	1a9b      	subs	r3, r3, r2
100110d0:	009b      	lsls	r3, r3, #2
100110d2:	18cb      	adds	r3, r1, r3
100110d4:	3312      	adds	r3, #18
100110d6:	2205      	movs	r2, #5
100110d8:	701a      	strb	r2, [r3, #0]
100110da:	e00f      	b.n	100110fc <ble_connected_state_handler+0x294>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
100110dc:	2367      	movs	r3, #103	; 0x67
100110de:	18fb      	adds	r3, r7, r3
100110e0:	781a      	ldrb	r2, [r3, #0]
100110e2:	492d      	ldr	r1, [pc, #180]	; (10011198 <ble_connected_state_handler+0x330>)
100110e4:	0013      	movs	r3, r2
100110e6:	015b      	lsls	r3, r3, #5
100110e8:	1a9b      	subs	r3, r3, r2
100110ea:	009b      	lsls	r3, r3, #2
100110ec:	18cb      	adds	r3, r1, r3
100110ee:	3312      	adds	r3, #18
100110f0:	220a      	movs	r2, #10
100110f2:	701a      	strb	r2, [r3, #0]
				peripheral_device_added = true;
100110f4:	2366      	movs	r3, #102	; 0x66
100110f6:	18fb      	adds	r3, r7, r3
100110f8:	2201      	movs	r2, #1
100110fa:	701a      	strb	r2, [r3, #0]
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
100110fc:	4b23      	ldr	r3, [pc, #140]	; (1001118c <ble_connected_state_handler+0x324>)
100110fe:	2207      	movs	r2, #7
10011100:	2100      	movs	r1, #0
10011102:	0018      	movs	r0, r3
10011104:	4b23      	ldr	r3, [pc, #140]	; (10011194 <ble_connected_state_handler+0x32c>)
10011106:	4798      	blx	r3
10011108:	e012      	b.n	10011130 <ble_connected_state_handler+0x2c8>
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1001110a:	4b25      	ldr	r3, [pc, #148]	; (100111a0 <ble_connected_state_handler+0x338>)
1001110c:	0018      	movs	r0, r3
1001110e:	4b25      	ldr	r3, [pc, #148]	; (100111a4 <ble_connected_state_handler+0x33c>)
10011110:	4798      	blx	r3
10011112:	4b29      	ldr	r3, [pc, #164]	; (100111b8 <ble_connected_state_handler+0x350>)
10011114:	781b      	ldrb	r3, [r3, #0]
10011116:	b2db      	uxtb	r3, r3
10011118:	001a      	movs	r2, r3
1001111a:	4b28      	ldr	r3, [pc, #160]	; (100111bc <ble_connected_state_handler+0x354>)
1001111c:	0011      	movs	r1, r2
1001111e:	0018      	movs	r0, r3
10011120:	4b22      	ldr	r3, [pc, #136]	; (100111ac <ble_connected_state_handler+0x344>)
10011122:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
10011124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10011126:	891b      	ldrh	r3, [r3, #8]
10011128:	2113      	movs	r1, #19
1001112a:	0018      	movs	r0, r3
1001112c:	4b24      	ldr	r3, [pc, #144]	; (100111c0 <ble_connected_state_handler+0x358>)
1001112e:	4798      	blx	r3
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
10011130:	2367      	movs	r3, #103	; 0x67
10011132:	18fb      	adds	r3, r7, r3
10011134:	781a      	ldrb	r2, [r3, #0]
10011136:	4918      	ldr	r1, [pc, #96]	; (10011198 <ble_connected_state_handler+0x330>)
10011138:	0013      	movs	r3, r2
1001113a:	015b      	lsls	r3, r3, #5
1001113c:	1a9b      	subs	r3, r3, r2
1001113e:	009b      	lsls	r3, r3, #2
10011140:	18cb      	adds	r3, r1, r3
10011142:	3312      	adds	r3, #18
10011144:	781b      	ldrb	r3, [r3, #0]
10011146:	2b0a      	cmp	r3, #10
10011148:	d116      	bne.n	10011178 <ble_connected_state_handler+0x310>
1001114a:	2366      	movs	r3, #102	; 0x66
1001114c:	18fb      	adds	r3, r7, r3
1001114e:	781b      	ldrb	r3, [r3, #0]
10011150:	2b00      	cmp	r3, #0
10011152:	d011      	beq.n	10011178 <ble_connected_state_handler+0x310>
        {
	 		ble_send_slave_sec_request(conn_params->handle);
10011154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10011156:	891b      	ldrh	r3, [r3, #8]
10011158:	0018      	movs	r0, r3
1001115a:	4b1a      	ldr	r3, [pc, #104]	; (100111c4 <ble_connected_state_handler+0x35c>)
1001115c:	4798      	blx	r3
1001115e:	e00b      	b.n	10011178 <ble_connected_state_handler+0x310>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
10011160:	4b0f      	ldr	r3, [pc, #60]	; (100111a0 <ble_connected_state_handler+0x338>)
10011162:	0018      	movs	r0, r3
10011164:	4b0f      	ldr	r3, [pc, #60]	; (100111a4 <ble_connected_state_handler+0x33c>)
10011166:	4798      	blx	r3
10011168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1001116a:	7a9b      	ldrb	r3, [r3, #10]
1001116c:	001a      	movs	r2, r3
1001116e:	4b16      	ldr	r3, [pc, #88]	; (100111c8 <ble_connected_state_handler+0x360>)
10011170:	0011      	movs	r1, r2
10011172:	0018      	movs	r0, r3
10011174:	4b0d      	ldr	r3, [pc, #52]	; (100111ac <ble_connected_state_handler+0x344>)
10011176:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
10011178:	2300      	movs	r3, #0
}
1001117a:	0018      	movs	r0, r3
1001117c:	46bd      	mov	sp, r7
1001117e:	b01a      	add	sp, #104	; 0x68
10011180:	bdb0      	pop	{r4, r5, r7, pc}
10011182:	46c0      	nop			; (mov r8, r8)
10011184:	1001c664 	.word	0x1001c664
10011188:	10018e1b 	.word	0x10018e1b
1001118c:	1001be74 	.word	0x1001be74
10011190:	10018dfd 	.word	0x10018dfd
10011194:	10018e2d 	.word	0x10018e2d
10011198:	1001c3b8 	.word	0x1001c3b8
1001119c:	10014a35 	.word	0x10014a35
100111a0:	1001afe4 	.word	0x1001afe4
100111a4:	10019095 	.word	0x10019095
100111a8:	1001b004 	.word	0x1001b004
100111ac:	10018f75 	.word	0x10018f75
100111b0:	1001b028 	.word	0x1001b028
100111b4:	1001b04c 	.word	0x1001b04c
100111b8:	1001c624 	.word	0x1001c624
100111bc:	1001b05c 	.word	0x1001b05c
100111c0:	10014a09 	.word	0x10014a09
100111c4:	10010e39 	.word	0x10010e39
100111c8:	1001b098 	.word	0x1001b098

100111cc <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
100111cc:	b580      	push	{r7, lr}
100111ce:	b084      	sub	sp, #16
100111d0:	af00      	add	r7, sp, #0
100111d2:	6078      	str	r0, [r7, #4]
	at_ble_resolv_rand_addr_status_t *ble_resolv_rand_addr_status;
	uint8_t idx;	
	bool device_found = false;
100111d4:	230e      	movs	r3, #14
100111d6:	18fb      	adds	r3, r7, r3
100111d8:	2200      	movs	r2, #0
100111da:	701a      	strb	r2, [r3, #0]
	bool peripheral_device_added = false;
100111dc:	230d      	movs	r3, #13
100111de:	18fb      	adds	r3, r7, r3
100111e0:	2200      	movs	r2, #0
100111e2:	701a      	strb	r2, [r3, #0]
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
100111e4:	687b      	ldr	r3, [r7, #4]
100111e6:	60bb      	str	r3, [r7, #8]
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
100111e8:	68bb      	ldr	r3, [r7, #8]
100111ea:	781b      	ldrb	r3, [r3, #0]
100111ec:	2b00      	cmp	r3, #0
100111ee:	d129      	bne.n	10011244 <ble_resolv_rand_addr_handler+0x78>
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100111f0:	230f      	movs	r3, #15
100111f2:	18fb      	adds	r3, r7, r3
100111f4:	2200      	movs	r2, #0
100111f6:	701a      	strb	r2, [r3, #0]
100111f8:	e01f      	b.n	1001123a <ble_resolv_rand_addr_handler+0x6e>
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
100111fa:	68bb      	ldr	r3, [r7, #8]
100111fc:	1c58      	adds	r0, r3, #1
100111fe:	230f      	movs	r3, #15
10011200:	18fb      	adds	r3, r7, r3
10011202:	781a      	ldrb	r2, [r3, #0]
10011204:	0013      	movs	r3, r2
10011206:	015b      	lsls	r3, r3, #5
10011208:	1a9b      	subs	r3, r3, r2
1001120a:	009b      	lsls	r3, r3, #2
1001120c:	3340      	adds	r3, #64	; 0x40
1001120e:	001a      	movs	r2, r3
10011210:	4b6a      	ldr	r3, [pc, #424]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
10011212:	18d3      	adds	r3, r2, r3
10011214:	3306      	adds	r3, #6
10011216:	2210      	movs	r2, #16
10011218:	0019      	movs	r1, r3
1001121a:	4b69      	ldr	r3, [pc, #420]	; (100113c0 <ble_resolv_rand_addr_handler+0x1f4>)
1001121c:	4798      	blx	r3
1001121e:	1e03      	subs	r3, r0, #0
10011220:	d104      	bne.n	1001122c <ble_resolv_rand_addr_handler+0x60>
			{
				device_found = true;
10011222:	230e      	movs	r3, #14
10011224:	18fb      	adds	r3, r7, r3
10011226:	2201      	movs	r2, #1
10011228:	701a      	strb	r2, [r3, #0]
				break;
1001122a:	e00b      	b.n	10011244 <ble_resolv_rand_addr_handler+0x78>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1001122c:	230f      	movs	r3, #15
1001122e:	18fb      	adds	r3, r7, r3
10011230:	781a      	ldrb	r2, [r3, #0]
10011232:	230f      	movs	r3, #15
10011234:	18fb      	adds	r3, r7, r3
10011236:	3201      	adds	r2, #1
10011238:	701a      	strb	r2, [r3, #0]
1001123a:	230f      	movs	r3, #15
1001123c:	18fb      	adds	r3, r7, r3
1001123e:	781b      	ldrb	r3, [r3, #0]
10011240:	2b04      	cmp	r3, #4
10011242:	d9da      	bls.n	100111fa <ble_resolv_rand_addr_handler+0x2e>
			}
		}	
		
	}
	
	if (device_found)
10011244:	230e      	movs	r3, #14
10011246:	18fb      	adds	r3, r7, r3
10011248:	781b      	ldrb	r3, [r3, #0]
1001124a:	2b00      	cmp	r3, #0
1001124c:	d033      	beq.n	100112b6 <ble_resolv_rand_addr_handler+0xea>
	{
		DBG_LOG_DEV("##########Device Found");
1001124e:	4b5d      	ldr	r3, [pc, #372]	; (100113c4 <ble_resolv_rand_addr_handler+0x1f8>)
10011250:	0018      	movs	r0, r3
10011252:	4b5d      	ldr	r3, [pc, #372]	; (100113c8 <ble_resolv_rand_addr_handler+0x1fc>)
10011254:	4798      	blx	r3
10011256:	4b5d      	ldr	r3, [pc, #372]	; (100113cc <ble_resolv_rand_addr_handler+0x200>)
10011258:	0018      	movs	r0, r3
1001125a:	4b5d      	ldr	r3, [pc, #372]	; (100113d0 <ble_resolv_rand_addr_handler+0x204>)
1001125c:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1001125e:	230f      	movs	r3, #15
10011260:	18fb      	adds	r3, r7, r3
10011262:	781a      	ldrb	r2, [r3, #0]
10011264:	4955      	ldr	r1, [pc, #340]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
10011266:	205e      	movs	r0, #94	; 0x5e
10011268:	0013      	movs	r3, r2
1001126a:	015b      	lsls	r3, r3, #5
1001126c:	1a9b      	subs	r3, r3, r2
1001126e:	009b      	lsls	r3, r3, #2
10011270:	18cb      	adds	r3, r1, r3
10011272:	181b      	adds	r3, r3, r0
10011274:	2202      	movs	r2, #2
10011276:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10011278:	230f      	movs	r3, #15
1001127a:	18fb      	adds	r3, r7, r3
1001127c:	781a      	ldrb	r2, [r3, #0]
1001127e:	494f      	ldr	r1, [pc, #316]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
10011280:	0013      	movs	r3, r2
10011282:	015b      	lsls	r3, r3, #5
10011284:	1a9b      	subs	r3, r3, r2
10011286:	009b      	lsls	r3, r3, #2
10011288:	18cb      	adds	r3, r1, r3
1001128a:	3312      	adds	r3, #18
1001128c:	220a      	movs	r2, #10
1001128e:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
10011290:	230f      	movs	r3, #15
10011292:	18fb      	adds	r3, r7, r3
10011294:	781a      	ldrb	r2, [r3, #0]
10011296:	0013      	movs	r3, r2
10011298:	015b      	lsls	r3, r3, #5
1001129a:	1a9b      	subs	r3, r3, r2
1001129c:	009b      	lsls	r3, r3, #2
1001129e:	4a47      	ldr	r2, [pc, #284]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
100112a0:	189b      	adds	r3, r3, r2
100112a2:	494c      	ldr	r1, [pc, #304]	; (100113d4 <ble_resolv_rand_addr_handler+0x208>)
100112a4:	2212      	movs	r2, #18
100112a6:	0018      	movs	r0, r3
100112a8:	4b4b      	ldr	r3, [pc, #300]	; (100113d8 <ble_resolv_rand_addr_handler+0x20c>)
100112aa:	4798      	blx	r3
		peripheral_device_added = true;
100112ac:	230d      	movs	r3, #13
100112ae:	18fb      	adds	r3, r7, r3
100112b0:	2201      	movs	r2, #1
100112b2:	701a      	strb	r2, [r3, #0]
100112b4:	e059      	b.n	1001136a <ble_resolv_rand_addr_handler+0x19e>
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
100112b6:	4b43      	ldr	r3, [pc, #268]	; (100113c4 <ble_resolv_rand_addr_handler+0x1f8>)
100112b8:	0018      	movs	r0, r3
100112ba:	4b43      	ldr	r3, [pc, #268]	; (100113c8 <ble_resolv_rand_addr_handler+0x1fc>)
100112bc:	4798      	blx	r3
100112be:	4b47      	ldr	r3, [pc, #284]	; (100113dc <ble_resolv_rand_addr_handler+0x210>)
100112c0:	0018      	movs	r0, r3
100112c2:	4b43      	ldr	r3, [pc, #268]	; (100113d0 <ble_resolv_rand_addr_handler+0x204>)
100112c4:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100112c6:	230f      	movs	r3, #15
100112c8:	18fb      	adds	r3, r7, r3
100112ca:	2200      	movs	r2, #0
100112cc:	701a      	strb	r2, [r3, #0]
100112ce:	e047      	b.n	10011360 <ble_resolv_rand_addr_handler+0x194>
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
100112d0:	230f      	movs	r3, #15
100112d2:	18fb      	adds	r3, r7, r3
100112d4:	781a      	ldrb	r2, [r3, #0]
100112d6:	4939      	ldr	r1, [pc, #228]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
100112d8:	205e      	movs	r0, #94	; 0x5e
100112da:	0013      	movs	r3, r2
100112dc:	015b      	lsls	r3, r3, #5
100112de:	1a9b      	subs	r3, r3, r2
100112e0:	009b      	lsls	r3, r3, #2
100112e2:	18cb      	adds	r3, r1, r3
100112e4:	181b      	adds	r3, r3, r0
100112e6:	781b      	ldrb	r3, [r3, #0]
100112e8:	2b00      	cmp	r3, #0
100112ea:	d132      	bne.n	10011352 <ble_resolv_rand_addr_handler+0x186>
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
100112ec:	230f      	movs	r3, #15
100112ee:	18fb      	adds	r3, r7, r3
100112f0:	781a      	ldrb	r2, [r3, #0]
100112f2:	0013      	movs	r3, r2
100112f4:	015b      	lsls	r3, r3, #5
100112f6:	1a9b      	subs	r3, r3, r2
100112f8:	009b      	lsls	r3, r3, #2
100112fa:	4a30      	ldr	r2, [pc, #192]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
100112fc:	189b      	adds	r3, r3, r2
100112fe:	4935      	ldr	r1, [pc, #212]	; (100113d4 <ble_resolv_rand_addr_handler+0x208>)
10011300:	2212      	movs	r2, #18
10011302:	0018      	movs	r0, r3
10011304:	4b34      	ldr	r3, [pc, #208]	; (100113d8 <ble_resolv_rand_addr_handler+0x20c>)
10011306:	4798      	blx	r3
				ble_device_count++;
10011308:	4b35      	ldr	r3, [pc, #212]	; (100113e0 <ble_resolv_rand_addr_handler+0x214>)
1001130a:	781b      	ldrb	r3, [r3, #0]
1001130c:	b2db      	uxtb	r3, r3
1001130e:	3301      	adds	r3, #1
10011310:	b2da      	uxtb	r2, r3
10011312:	4b33      	ldr	r3, [pc, #204]	; (100113e0 <ble_resolv_rand_addr_handler+0x214>)
10011314:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10011316:	230f      	movs	r3, #15
10011318:	18fb      	adds	r3, r7, r3
1001131a:	781a      	ldrb	r2, [r3, #0]
1001131c:	4927      	ldr	r1, [pc, #156]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
1001131e:	205e      	movs	r0, #94	; 0x5e
10011320:	0013      	movs	r3, r2
10011322:	015b      	lsls	r3, r3, #5
10011324:	1a9b      	subs	r3, r3, r2
10011326:	009b      	lsls	r3, r3, #2
10011328:	18cb      	adds	r3, r1, r3
1001132a:	181b      	adds	r3, r3, r0
1001132c:	2202      	movs	r2, #2
1001132e:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
10011330:	230f      	movs	r3, #15
10011332:	18fb      	adds	r3, r7, r3
10011334:	781a      	ldrb	r2, [r3, #0]
10011336:	4921      	ldr	r1, [pc, #132]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
10011338:	0013      	movs	r3, r2
1001133a:	015b      	lsls	r3, r3, #5
1001133c:	1a9b      	subs	r3, r3, r2
1001133e:	009b      	lsls	r3, r3, #2
10011340:	18cb      	adds	r3, r1, r3
10011342:	3312      	adds	r3, #18
10011344:	220a      	movs	r2, #10
10011346:	701a      	strb	r2, [r3, #0]
				peripheral_device_added = true;
10011348:	230d      	movs	r3, #13
1001134a:	18fb      	adds	r3, r7, r3
1001134c:	2201      	movs	r2, #1
1001134e:	701a      	strb	r2, [r3, #0]
				break;
10011350:	e00b      	b.n	1001136a <ble_resolv_rand_addr_handler+0x19e>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011352:	230f      	movs	r3, #15
10011354:	18fb      	adds	r3, r7, r3
10011356:	781a      	ldrb	r2, [r3, #0]
10011358:	230f      	movs	r3, #15
1001135a:	18fb      	adds	r3, r7, r3
1001135c:	3201      	adds	r2, #1
1001135e:	701a      	strb	r2, [r3, #0]
10011360:	230f      	movs	r3, #15
10011362:	18fb      	adds	r3, r7, r3
10011364:	781b      	ldrb	r3, [r3, #0]
10011366:	2b04      	cmp	r3, #4
10011368:	d9b2      	bls.n	100112d0 <ble_resolv_rand_addr_handler+0x104>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1001136a:	4b16      	ldr	r3, [pc, #88]	; (100113c4 <ble_resolv_rand_addr_handler+0x1f8>)
1001136c:	0018      	movs	r0, r3
1001136e:	4b16      	ldr	r3, [pc, #88]	; (100113c8 <ble_resolv_rand_addr_handler+0x1fc>)
10011370:	4798      	blx	r3
10011372:	230f      	movs	r3, #15
10011374:	18fb      	adds	r3, r7, r3
10011376:	781a      	ldrb	r2, [r3, #0]
10011378:	4b1a      	ldr	r3, [pc, #104]	; (100113e4 <ble_resolv_rand_addr_handler+0x218>)
1001137a:	0011      	movs	r1, r2
1001137c:	0018      	movs	r0, r3
1001137e:	4b14      	ldr	r3, [pc, #80]	; (100113d0 <ble_resolv_rand_addr_handler+0x204>)
10011380:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
10011382:	230f      	movs	r3, #15
10011384:	18fb      	adds	r3, r7, r3
10011386:	781a      	ldrb	r2, [r3, #0]
10011388:	490c      	ldr	r1, [pc, #48]	; (100113bc <ble_resolv_rand_addr_handler+0x1f0>)
1001138a:	0013      	movs	r3, r2
1001138c:	015b      	lsls	r3, r3, #5
1001138e:	1a9b      	subs	r3, r3, r2
10011390:	009b      	lsls	r3, r3, #2
10011392:	18cb      	adds	r3, r1, r3
10011394:	3312      	adds	r3, #18
10011396:	781b      	ldrb	r3, [r3, #0]
10011398:	2b0a      	cmp	r3, #10
1001139a:	d109      	bne.n	100113b0 <ble_resolv_rand_addr_handler+0x1e4>
1001139c:	230d      	movs	r3, #13
1001139e:	18fb      	adds	r3, r7, r3
100113a0:	781b      	ldrb	r3, [r3, #0]
100113a2:	2b00      	cmp	r3, #0
100113a4:	d004      	beq.n	100113b0 <ble_resolv_rand_addr_handler+0x1e4>
	{
		ble_send_slave_sec_request(connected_state_info.handle);
100113a6:	4b0b      	ldr	r3, [pc, #44]	; (100113d4 <ble_resolv_rand_addr_handler+0x208>)
100113a8:	891b      	ldrh	r3, [r3, #8]
100113aa:	0018      	movs	r0, r3
100113ac:	4b0e      	ldr	r3, [pc, #56]	; (100113e8 <ble_resolv_rand_addr_handler+0x21c>)
100113ae:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
100113b0:	2300      	movs	r3, #0
	
}
100113b2:	0018      	movs	r0, r3
100113b4:	46bd      	mov	sp, r7
100113b6:	b004      	add	sp, #16
100113b8:	bd80      	pop	{r7, pc}
100113ba:	46c0      	nop			; (mov r8, r8)
100113bc:	1001c3b8 	.word	0x1001c3b8
100113c0:	10018dfd 	.word	0x10018dfd
100113c4:	1001afe4 	.word	0x1001afe4
100113c8:	10019095 	.word	0x10019095
100113cc:	1001b0c0 	.word	0x1001b0c0
100113d0:	10018f75 	.word	0x10018f75
100113d4:	1001c664 	.word	0x1001c664
100113d8:	10018e1b 	.word	0x10018e1b
100113dc:	1001b0d8 	.word	0x1001b0d8
100113e0:	1001c624 	.word	0x1001c624
100113e4:	1001b0f4 	.word	0x1001b0f4
100113e8:	10010e39 	.word	0x10010e39

100113ec <ble_mtu_changed_indication_handler>:

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
100113ec:	b580      	push	{r7, lr}
100113ee:	b084      	sub	sp, #16
100113f0:	af00      	add	r7, sp, #0
100113f2:	6078      	str	r0, [r7, #4]
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
100113f4:	687b      	ldr	r3, [r7, #4]
100113f6:	60fb      	str	r3, [r7, #12]
	//DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										//mtu_changed_ind->conhdl, 
										//mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
100113f8:	2300      	movs	r3, #0
}
100113fa:	0018      	movs	r0, r3
100113fc:	46bd      	mov	sp, r7
100113fe:	b004      	add	sp, #16
10011400:	bd80      	pop	{r7, pc}
10011402:	46c0      	nop			; (mov r8, r8)

10011404 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10011404:	b580      	push	{r7, lr}
10011406:	b084      	sub	sp, #16
10011408:	af00      	add	r7, sp, #0
1001140a:	6078      	str	r0, [r7, #4]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
1001140c:	687b      	ldr	r3, [r7, #4]
1001140e:	60fb      	str	r3, [r7, #12]
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10011410:	68fb      	ldr	r3, [r7, #12]
10011412:	78db      	ldrb	r3, [r3, #3]
10011414:	2b00      	cmp	r3, #0
10011416:	d101      	bne.n	1001141c <ble_mtu_changed_cmd_complete_handler+0x18>
	{
		//DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
		//cmd_complete_event->conn_handle, 
		//cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10011418:	2300      	movs	r3, #0
1001141a:	e000      	b.n	1001141e <ble_mtu_changed_cmd_complete_handler+0x1a>
	{
		//DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
		//cmd_complete_event->conn_handle,
		//cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1001141c:	23e2      	movs	r3, #226	; 0xe2
}
1001141e:	0018      	movs	r0, r3
10011420:	46bd      	mov	sp, r7
10011422:	b004      	add	sp, #16
10011424:	bd80      	pop	{r7, pc}
10011426:	46c0      	nop			; (mov r8, r8)

10011428 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
10011428:	b580      	push	{r7, lr}
1001142a:	b084      	sub	sp, #16
1001142c:	af00      	add	r7, sp, #0
1001142e:	6078      	str	r0, [r7, #4]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
10011430:	687b      	ldr	r3, [r7, #4]
10011432:	60fb      	str	r3, [r7, #12]
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10011434:	68fb      	ldr	r3, [r7, #12]
10011436:	78db      	ldrb	r3, [r3, #3]
10011438:	2b00      	cmp	r3, #0
1001143a:	d101      	bne.n	10011440 <ble_characteristic_write_cmd_complete_handler+0x18>
	{
		//DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
		//cmd_complete_event->conn_handle,
		//cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1001143c:	2300      	movs	r3, #0
1001143e:	e000      	b.n	10011442 <ble_characteristic_write_cmd_complete_handler+0x1a>
	{
		//DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		//cmd_complete_event->conn_handle,
		//cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10011440:	23e2      	movs	r3, #226	; 0xe2
}
10011442:	0018      	movs	r0, r3
10011444:	46bd      	mov	sp, r7
10011446:	b004      	add	sp, #16
10011448:	bd80      	pop	{r7, pc}
1001144a:	46c0      	nop			; (mov r8, r8)

1001144c <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1001144c:	b580      	push	{r7, lr}
1001144e:	b084      	sub	sp, #16
10011450:	af00      	add	r7, sp, #0
10011452:	6078      	str	r0, [r7, #4]
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
10011454:	687b      	ldr	r3, [r7, #4]
10011456:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011458:	230f      	movs	r3, #15
1001145a:	18fb      	adds	r3, r7, r3
1001145c:	2200      	movs	r2, #0
1001145e:	701a      	strb	r2, [r3, #0]
10011460:	e0a2      	b.n	100115a8 <ble_disconnected_state_handler+0x15c>
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10011462:	230f      	movs	r3, #15
10011464:	18fb      	adds	r3, r7, r3
10011466:	781a      	ldrb	r2, [r3, #0]
10011468:	495c      	ldr	r1, [pc, #368]	; (100115dc <ble_disconnected_state_handler+0x190>)
1001146a:	0013      	movs	r3, r2
1001146c:	015b      	lsls	r3, r3, #5
1001146e:	1a9b      	subs	r3, r3, r2
10011470:	009b      	lsls	r3, r3, #2
10011472:	18cb      	adds	r3, r1, r3
10011474:	3308      	adds	r3, #8
10011476:	881a      	ldrh	r2, [r3, #0]
10011478:	68bb      	ldr	r3, [r7, #8]
1001147a:	881b      	ldrh	r3, [r3, #0]
1001147c:	429a      	cmp	r2, r3
1001147e:	d129      	bne.n	100114d4 <ble_disconnected_state_handler+0x88>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10011480:	230f      	movs	r3, #15
10011482:	18fb      	adds	r3, r7, r3
10011484:	781a      	ldrb	r2, [r3, #0]
10011486:	4955      	ldr	r1, [pc, #340]	; (100115dc <ble_disconnected_state_handler+0x190>)
10011488:	205e      	movs	r0, #94	; 0x5e
1001148a:	0013      	movs	r3, r2
1001148c:	015b      	lsls	r3, r3, #5
1001148e:	1a9b      	subs	r3, r3, r2
10011490:	009b      	lsls	r3, r3, #2
10011492:	18cb      	adds	r3, r1, r3
10011494:	181b      	adds	r3, r3, r0
10011496:	781b      	ldrb	r3, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10011498:	2b05      	cmp	r3, #5
1001149a:	d00d      	beq.n	100114b8 <ble_disconnected_state_handler+0x6c>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1001149c:	230f      	movs	r3, #15
1001149e:	18fb      	adds	r3, r7, r3
100114a0:	781a      	ldrb	r2, [r3, #0]
100114a2:	494e      	ldr	r1, [pc, #312]	; (100115dc <ble_disconnected_state_handler+0x190>)
100114a4:	205e      	movs	r0, #94	; 0x5e
100114a6:	0013      	movs	r3, r2
100114a8:	015b      	lsls	r3, r3, #5
100114aa:	1a9b      	subs	r3, r3, r2
100114ac:	009b      	lsls	r3, r3, #2
100114ae:	18cb      	adds	r3, r1, r3
100114b0:	181b      	adds	r3, r3, r0
100114b2:	781b      	ldrb	r3, [r3, #0]
100114b4:	2b08      	cmp	r3, #8
100114b6:	d10d      	bne.n	100114d4 <ble_disconnected_state_handler+0x88>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
100114b8:	230f      	movs	r3, #15
100114ba:	18fb      	adds	r3, r7, r3
100114bc:	781a      	ldrb	r2, [r3, #0]
100114be:	4947      	ldr	r1, [pc, #284]	; (100115dc <ble_disconnected_state_handler+0x190>)
100114c0:	205e      	movs	r0, #94	; 0x5e
100114c2:	0013      	movs	r3, r2
100114c4:	015b      	lsls	r3, r3, #5
100114c6:	1a9b      	subs	r3, r3, r2
100114c8:	009b      	lsls	r3, r3, #2
100114ca:	18cb      	adds	r3, r1, r3
100114cc:	181b      	adds	r3, r3, r0
100114ce:	2201      	movs	r2, #1
100114d0:	701a      	strb	r2, [r3, #0]
100114d2:	e062      	b.n	1001159a <ble_disconnected_state_handler+0x14e>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
100114d4:	230f      	movs	r3, #15
100114d6:	18fb      	adds	r3, r7, r3
100114d8:	781a      	ldrb	r2, [r3, #0]
100114da:	4940      	ldr	r1, [pc, #256]	; (100115dc <ble_disconnected_state_handler+0x190>)
100114dc:	0013      	movs	r3, r2
100114de:	015b      	lsls	r3, r3, #5
100114e0:	1a9b      	subs	r3, r3, r2
100114e2:	009b      	lsls	r3, r3, #2
100114e4:	18cb      	adds	r3, r1, r3
100114e6:	3308      	adds	r3, #8
100114e8:	881a      	ldrh	r2, [r3, #0]
100114ea:	68bb      	ldr	r3, [r7, #8]
100114ec:	881b      	ldrh	r3, [r3, #0]
100114ee:	429a      	cmp	r2, r3
100114f0:	d153      	bne.n	1001159a <ble_disconnected_state_handler+0x14e>
		{
			switch (ble_dev_info[idx].conn_state)
100114f2:	230f      	movs	r3, #15
100114f4:	18fb      	adds	r3, r7, r3
100114f6:	781a      	ldrb	r2, [r3, #0]
100114f8:	4938      	ldr	r1, [pc, #224]	; (100115dc <ble_disconnected_state_handler+0x190>)
100114fa:	205e      	movs	r0, #94	; 0x5e
100114fc:	0013      	movs	r3, r2
100114fe:	015b      	lsls	r3, r3, #5
10011500:	1a9b      	subs	r3, r3, r2
10011502:	009b      	lsls	r3, r3, #2
10011504:	18cb      	adds	r3, r1, r3
10011506:	181b      	adds	r3, r3, r0
10011508:	781b      	ldrb	r3, [r3, #0]
1001150a:	2b07      	cmp	r3, #7
1001150c:	d81e      	bhi.n	1001154c <ble_disconnected_state_handler+0x100>
1001150e:	009a      	lsls	r2, r3, #2
10011510:	4b33      	ldr	r3, [pc, #204]	; (100115e0 <ble_disconnected_state_handler+0x194>)
10011512:	18d3      	adds	r3, r2, r3
10011514:	681b      	ldr	r3, [r3, #0]
10011516:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10011518:	230f      	movs	r3, #15
1001151a:	18fb      	adds	r3, r7, r3
1001151c:	781a      	ldrb	r2, [r3, #0]
1001151e:	492f      	ldr	r1, [pc, #188]	; (100115dc <ble_disconnected_state_handler+0x190>)
10011520:	205e      	movs	r0, #94	; 0x5e
10011522:	0013      	movs	r3, r2
10011524:	015b      	lsls	r3, r3, #5
10011526:	1a9b      	subs	r3, r3, r2
10011528:	009b      	lsls	r3, r3, #2
1001152a:	18cb      	adds	r3, r1, r3
1001152c:	181b      	adds	r3, r3, r0
1001152e:	2200      	movs	r2, #0
10011530:	701a      	strb	r2, [r3, #0]
					if (ble_device_count > 0)
10011532:	4b2c      	ldr	r3, [pc, #176]	; (100115e4 <ble_disconnected_state_handler+0x198>)
10011534:	781b      	ldrb	r3, [r3, #0]
10011536:	b2db      	uxtb	r3, r3
10011538:	2b00      	cmp	r3, #0
1001153a:	d02d      	beq.n	10011598 <ble_disconnected_state_handler+0x14c>
					{
						ble_device_count--;
1001153c:	4b29      	ldr	r3, [pc, #164]	; (100115e4 <ble_disconnected_state_handler+0x198>)
1001153e:	781b      	ldrb	r3, [r3, #0]
10011540:	b2db      	uxtb	r3, r3
10011542:	3b01      	subs	r3, #1
10011544:	b2da      	uxtb	r2, r3
10011546:	4b27      	ldr	r3, [pc, #156]	; (100115e4 <ble_disconnected_state_handler+0x198>)
10011548:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
1001154a:	e025      	b.n	10011598 <ble_disconnected_state_handler+0x14c>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1001154c:	4b26      	ldr	r3, [pc, #152]	; (100115e8 <ble_disconnected_state_handler+0x19c>)
1001154e:	0018      	movs	r0, r3
10011550:	4b26      	ldr	r3, [pc, #152]	; (100115ec <ble_disconnected_state_handler+0x1a0>)
10011552:	4798      	blx	r3
10011554:	230f      	movs	r3, #15
10011556:	18fb      	adds	r3, r7, r3
10011558:	781a      	ldrb	r2, [r3, #0]
1001155a:	4920      	ldr	r1, [pc, #128]	; (100115dc <ble_disconnected_state_handler+0x190>)
1001155c:	205e      	movs	r0, #94	; 0x5e
1001155e:	0013      	movs	r3, r2
10011560:	015b      	lsls	r3, r3, #5
10011562:	1a9b      	subs	r3, r3, r2
10011564:	009b      	lsls	r3, r3, #2
10011566:	18cb      	adds	r3, r1, r3
10011568:	181b      	adds	r3, r3, r0
1001156a:	781b      	ldrb	r3, [r3, #0]
1001156c:	001a      	movs	r2, r3
1001156e:	4b20      	ldr	r3, [pc, #128]	; (100115f0 <ble_disconnected_state_handler+0x1a4>)
10011570:	0011      	movs	r1, r2
10011572:	0018      	movs	r0, r3
10011574:	4b1f      	ldr	r3, [pc, #124]	; (100115f4 <ble_disconnected_state_handler+0x1a8>)
10011576:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10011578:	230f      	movs	r3, #15
1001157a:	18fb      	adds	r3, r7, r3
1001157c:	781a      	ldrb	r2, [r3, #0]
1001157e:	4917      	ldr	r1, [pc, #92]	; (100115dc <ble_disconnected_state_handler+0x190>)
10011580:	205e      	movs	r0, #94	; 0x5e
10011582:	0013      	movs	r3, r2
10011584:	015b      	lsls	r3, r3, #5
10011586:	1a9b      	subs	r3, r3, r2
10011588:	009b      	lsls	r3, r3, #2
1001158a:	18cb      	adds	r3, r1, r3
1001158c:	181b      	adds	r3, r3, r0
1001158e:	2200      	movs	r2, #0
10011590:	701a      	strb	r2, [r3, #0]
				break;				
10011592:	e002      	b.n	1001159a <ble_disconnected_state_handler+0x14e>
					}
				}
				break;
				
				case BLE_DEVICE_DISCONNECTED:
				break;
10011594:	46c0      	nop			; (mov r8, r8)
10011596:	e000      	b.n	1001159a <ble_disconnected_state_handler+0x14e>
					if (ble_device_count > 0)
					{
						ble_device_count--;
					}
				}
				break;
10011598:	46c0      	nop			; (mov r8, r8)
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1001159a:	230f      	movs	r3, #15
1001159c:	18fb      	adds	r3, r7, r3
1001159e:	781a      	ldrb	r2, [r3, #0]
100115a0:	230f      	movs	r3, #15
100115a2:	18fb      	adds	r3, r7, r3
100115a4:	3201      	adds	r2, #1
100115a6:	701a      	strb	r2, [r3, #0]
100115a8:	230f      	movs	r3, #15
100115aa:	18fb      	adds	r3, r7, r3
100115ac:	781b      	ldrb	r3, [r3, #0]
100115ae:	2b04      	cmp	r3, #4
100115b0:	d800      	bhi.n	100115b4 <ble_disconnected_state_handler+0x168>
100115b2:	e756      	b.n	10011462 <ble_disconnected_state_handler+0x16>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
100115b4:	4b0c      	ldr	r3, [pc, #48]	; (100115e8 <ble_disconnected_state_handler+0x19c>)
100115b6:	0018      	movs	r0, r3
100115b8:	4b0c      	ldr	r3, [pc, #48]	; (100115ec <ble_disconnected_state_handler+0x1a0>)
100115ba:	4798      	blx	r3
100115bc:	68bb      	ldr	r3, [r7, #8]
100115be:	789b      	ldrb	r3, [r3, #2]
100115c0:	0019      	movs	r1, r3
100115c2:	68bb      	ldr	r3, [r7, #8]
100115c4:	881b      	ldrh	r3, [r3, #0]
100115c6:	001a      	movs	r2, r3
100115c8:	4b0b      	ldr	r3, [pc, #44]	; (100115f8 <ble_disconnected_state_handler+0x1ac>)
100115ca:	0018      	movs	r0, r3
100115cc:	4b09      	ldr	r3, [pc, #36]	; (100115f4 <ble_disconnected_state_handler+0x1a8>)
100115ce:	4798      	blx	r3
	return AT_BLE_SUCCESS;
100115d0:	2300      	movs	r3, #0
}
100115d2:	0018      	movs	r0, r3
100115d4:	46bd      	mov	sp, r7
100115d6:	b004      	add	sp, #16
100115d8:	bd80      	pop	{r7, pc}
100115da:	46c0      	nop			; (mov r8, r8)
100115dc:	1001c3b8 	.word	0x1001c3b8
100115e0:	1001b54c 	.word	0x1001b54c
100115e4:	1001c624 	.word	0x1001c624
100115e8:	1001afe4 	.word	0x1001afe4
100115ec:	10019095 	.word	0x10019095
100115f0:	1001b104 	.word	0x1001b104
100115f4:	10018f75 	.word	0x10018f75
100115f8:	1001b11c 	.word	0x1001b11c

100115fc <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
100115fc:	b580      	push	{r7, lr}
100115fe:	b084      	sub	sp, #16
10011600:	af00      	add	r7, sp, #0
10011602:	6078      	str	r0, [r7, #4]
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
10011604:	687b      	ldr	r3, [r7, #4]
10011606:	60fb      	str	r3, [r7, #12]
	//DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
10011608:	2300      	movs	r3, #0
}
1001160a:	0018      	movs	r0, r3
1001160c:	46bd      	mov	sp, r7
1001160e:	b004      	add	sp, #16
10011610:	bd80      	pop	{r7, pc}
10011612:	46c0      	nop			; (mov r8, r8)

10011614 <ble_conn_param_update_req>:

at_ble_status_t ble_conn_param_update_req(void *params)
{
10011614:	b590      	push	{r4, r7, lr}
10011616:	b085      	sub	sp, #20
10011618:	af00      	add	r7, sp, #0
1001161a:	6078      	str	r0, [r7, #4]
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
1001161c:	687b      	ldr	r3, [r7, #4]
1001161e:	60fb      	str	r3, [r7, #12]
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10011620:	68fb      	ldr	r3, [r7, #12]
10011622:	8818      	ldrh	r0, [r3, #0]
10011624:	2378      	movs	r3, #120	; 0x78
10011626:	2201      	movs	r2, #1
10011628:	2101      	movs	r1, #1
1001162a:	4c03      	ldr	r4, [pc, #12]	; (10011638 <ble_conn_param_update_req+0x24>)
1001162c:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
1001162e:	2300      	movs	r3, #0
}
10011630:	0018      	movs	r0, r3
10011632:	46bd      	mov	sp, r7
10011634:	b005      	add	sp, #20
10011636:	bd90      	pop	{r4, r7, pc}
10011638:	10014a29 	.word	0x10014a29

1001163c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1001163c:	b5b0      	push	{r4, r5, r7, lr}
1001163e:	b088      	sub	sp, #32
10011640:	af00      	add	r7, sp, #0
10011642:	6078      	str	r0, [r7, #4]
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
10011644:	231f      	movs	r3, #31
10011646:	18fb      	adds	r3, r7, r3
10011648:	2200      	movs	r2, #0
1001164a:	701a      	strb	r2, [r3, #0]
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
1001164c:	231d      	movs	r3, #29
1001164e:	18fb      	adds	r3, r7, r3
10011650:	2200      	movs	r2, #0
10011652:	701a      	strb	r2, [r3, #0]
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
10011654:	687b      	ldr	r3, [r7, #4]
10011656:	61bb      	str	r3, [r7, #24]
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10011658:	230c      	movs	r3, #12
1001165a:	18fb      	adds	r3, r7, r3
1001165c:	2209      	movs	r2, #9
1001165e:	2100      	movs	r1, #0
10011660:	0018      	movs	r0, r3
10011662:	4bde      	ldr	r3, [pc, #888]	; (100119dc <ble_slave_security_request_handler+0x3a0>)
10011664:	4798      	blx	r3
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011666:	231e      	movs	r3, #30
10011668:	18fb      	adds	r3, r7, r3
1001166a:	2200      	movs	r2, #0
1001166c:	701a      	strb	r2, [r3, #0]
1001166e:	e035      	b.n	100116dc <ble_slave_security_request_handler+0xa0>
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10011670:	231e      	movs	r3, #30
10011672:	18fb      	adds	r3, r7, r3
10011674:	781a      	ldrb	r2, [r3, #0]
10011676:	49da      	ldr	r1, [pc, #872]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
10011678:	0013      	movs	r3, r2
1001167a:	015b      	lsls	r3, r3, #5
1001167c:	1a9b      	subs	r3, r3, r2
1001167e:	009b      	lsls	r3, r3, #2
10011680:	18cb      	adds	r3, r1, r3
10011682:	3308      	adds	r3, #8
10011684:	881a      	ldrh	r2, [r3, #0]
10011686:	69bb      	ldr	r3, [r7, #24]
10011688:	881b      	ldrh	r3, [r3, #0]
1001168a:	429a      	cmp	r2, r3
1001168c:	d11f      	bne.n	100116ce <ble_slave_security_request_handler+0x92>
1001168e:	231e      	movs	r3, #30
10011690:	18fb      	adds	r3, r7, r3
10011692:	781a      	ldrb	r2, [r3, #0]
10011694:	49d2      	ldr	r1, [pc, #840]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
10011696:	205e      	movs	r0, #94	; 0x5e
10011698:	0013      	movs	r3, r2
1001169a:	015b      	lsls	r3, r3, #5
1001169c:	1a9b      	subs	r3, r3, r2
1001169e:	009b      	lsls	r3, r3, #2
100116a0:	18cb      	adds	r3, r1, r3
100116a2:	181b      	adds	r3, r3, r0
100116a4:	781b      	ldrb	r3, [r3, #0]
100116a6:	2b02      	cmp	r3, #2
100116a8:	d111      	bne.n	100116ce <ble_slave_security_request_handler+0x92>
		{
			device_found = true;
100116aa:	231d      	movs	r3, #29
100116ac:	18fb      	adds	r3, r7, r3
100116ae:	2201      	movs	r2, #1
100116b0:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
100116b2:	231e      	movs	r3, #30
100116b4:	18fb      	adds	r3, r7, r3
100116b6:	781a      	ldrb	r2, [r3, #0]
100116b8:	49c9      	ldr	r1, [pc, #804]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100116ba:	205e      	movs	r0, #94	; 0x5e
100116bc:	0013      	movs	r3, r2
100116be:	015b      	lsls	r3, r3, #5
100116c0:	1a9b      	subs	r3, r3, r2
100116c2:	009b      	lsls	r3, r3, #2
100116c4:	18cb      	adds	r3, r1, r3
100116c6:	181b      	adds	r3, r3, r0
100116c8:	2206      	movs	r2, #6
100116ca:	701a      	strb	r2, [r3, #0]
			break;
100116cc:	e00b      	b.n	100116e6 <ble_slave_security_request_handler+0xaa>
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100116ce:	231e      	movs	r3, #30
100116d0:	18fb      	adds	r3, r7, r3
100116d2:	781a      	ldrb	r2, [r3, #0]
100116d4:	231e      	movs	r3, #30
100116d6:	18fb      	adds	r3, r7, r3
100116d8:	3201      	adds	r2, #1
100116da:	701a      	strb	r2, [r3, #0]
100116dc:	231e      	movs	r3, #30
100116de:	18fb      	adds	r3, r7, r3
100116e0:	781b      	ldrb	r3, [r3, #0]
100116e2:	2b04      	cmp	r3, #4
100116e4:	d9c4      	bls.n	10011670 <ble_slave_security_request_handler+0x34>
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
			break;
		}
	}
	
	if (device_found)
100116e6:	231d      	movs	r3, #29
100116e8:	18fb      	adds	r3, r7, r3
100116ea:	781b      	ldrb	r3, [r3, #0]
100116ec:	2b00      	cmp	r3, #0
100116ee:	d04b      	beq.n	10011788 <ble_slave_security_request_handler+0x14c>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
100116f0:	231e      	movs	r3, #30
100116f2:	18fb      	adds	r3, r7, r3
100116f4:	781a      	ldrb	r2, [r3, #0]
100116f6:	49ba      	ldr	r1, [pc, #744]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100116f8:	0013      	movs	r3, r2
100116fa:	015b      	lsls	r3, r3, #5
100116fc:	1a9b      	subs	r3, r3, r2
100116fe:	009b      	lsls	r3, r3, #2
10011700:	18cb      	adds	r3, r1, r3
10011702:	3314      	adds	r3, #20
10011704:	781b      	ldrb	r3, [r3, #0]
10011706:	001a      	movs	r2, r3
10011708:	2301      	movs	r3, #1
1001170a:	4013      	ands	r3, r2
1001170c:	d02f      	beq.n	1001176e <ble_slave_security_request_handler+0x132>
1001170e:	69bb      	ldr	r3, [r7, #24]
10011710:	78db      	ldrb	r3, [r3, #3]
10011712:	2b00      	cmp	r3, #0
10011714:	d02b      	beq.n	1001176e <ble_slave_security_request_handler+0x132>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10011716:	69bb      	ldr	r3, [r7, #24]
10011718:	8818      	ldrh	r0, [r3, #0]
1001171a:	231e      	movs	r3, #30
1001171c:	18fb      	adds	r3, r7, r3
1001171e:	781a      	ldrb	r2, [r3, #0]
10011720:	0013      	movs	r3, r2
10011722:	015b      	lsls	r3, r3, #5
10011724:	1a9b      	subs	r3, r3, r2
10011726:	009b      	lsls	r3, r3, #2
10011728:	3310      	adds	r3, #16
1001172a:	001a      	movs	r2, r3
1001172c:	4bac      	ldr	r3, [pc, #688]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
1001172e:	18d3      	adds	r3, r2, r3
10011730:	330a      	adds	r3, #10
10011732:	001c      	movs	r4, r3
10011734:	231e      	movs	r3, #30
10011736:	18fb      	adds	r3, r7, r3
10011738:	781a      	ldrb	r2, [r3, #0]
1001173a:	49a9      	ldr	r1, [pc, #676]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
1001173c:	0013      	movs	r3, r2
1001173e:	015b      	lsls	r3, r3, #5
10011740:	1a9b      	subs	r3, r3, r2
10011742:	009b      	lsls	r3, r3, #2
10011744:	18cb      	adds	r3, r1, r3
10011746:	3314      	adds	r3, #20
10011748:	781b      	ldrb	r3, [r3, #0]
1001174a:	001a      	movs	r2, r3
1001174c:	0021      	movs	r1, r4
1001174e:	4ba5      	ldr	r3, [pc, #660]	; (100119e4 <ble_slave_security_request_handler+0x3a8>)
10011750:	4798      	blx	r3
10011752:	1e03      	subs	r3, r0, #0
10011754:	d101      	bne.n	1001175a <ble_slave_security_request_handler+0x11e>
			{
				return  AT_BLE_SUCCESS;
10011756:	2300      	movs	r3, #0
10011758:	e153      	b.n	10011a02 <ble_slave_security_request_handler+0x3c6>
			}
			else
			{
				DBG_LOG("Encryption Not started");
1001175a:	4ba3      	ldr	r3, [pc, #652]	; (100119e8 <ble_slave_security_request_handler+0x3ac>)
1001175c:	0018      	movs	r0, r3
1001175e:	4ba3      	ldr	r3, [pc, #652]	; (100119ec <ble_slave_security_request_handler+0x3b0>)
10011760:	4798      	blx	r3
10011762:	4ba3      	ldr	r3, [pc, #652]	; (100119f0 <ble_slave_security_request_handler+0x3b4>)
10011764:	0018      	movs	r0, r3
10011766:	4ba3      	ldr	r3, [pc, #652]	; (100119f4 <ble_slave_security_request_handler+0x3b8>)
10011768:	4798      	blx	r3
				return AT_BLE_FAILURE;
1001176a:	23e2      	movs	r3, #226	; 0xe2
1001176c:	e149      	b.n	10011a02 <ble_slave_security_request_handler+0x3c6>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1001176e:	231e      	movs	r3, #30
10011770:	18fb      	adds	r3, r7, r3
10011772:	781a      	ldrb	r2, [r3, #0]
10011774:	499a      	ldr	r1, [pc, #616]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
10011776:	205e      	movs	r0, #94	; 0x5e
10011778:	0013      	movs	r3, r2
1001177a:	015b      	lsls	r3, r3, #5
1001177c:	1a9b      	subs	r3, r3, r2
1001177e:	009b      	lsls	r3, r3, #2
10011780:	18cb      	adds	r3, r1, r3
10011782:	181b      	adds	r3, r3, r0
10011784:	2202      	movs	r2, #2
10011786:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011788:	231e      	movs	r3, #30
1001178a:	18fb      	adds	r3, r7, r3
1001178c:	2200      	movs	r2, #0
1001178e:	701a      	strb	r2, [r3, #0]
10011790:	e031      	b.n	100117f6 <ble_slave_security_request_handler+0x1ba>
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10011792:	231e      	movs	r3, #30
10011794:	18fb      	adds	r3, r7, r3
10011796:	781a      	ldrb	r2, [r3, #0]
10011798:	4991      	ldr	r1, [pc, #580]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
1001179a:	0013      	movs	r3, r2
1001179c:	015b      	lsls	r3, r3, #5
1001179e:	1a9b      	subs	r3, r3, r2
100117a0:	009b      	lsls	r3, r3, #2
100117a2:	18cb      	adds	r3, r1, r3
100117a4:	3308      	adds	r3, #8
100117a6:	881a      	ldrh	r2, [r3, #0]
100117a8:	69bb      	ldr	r3, [r7, #24]
100117aa:	881b      	ldrh	r3, [r3, #0]
100117ac:	429a      	cmp	r2, r3
100117ae:	d11b      	bne.n	100117e8 <ble_slave_security_request_handler+0x1ac>
100117b0:	231e      	movs	r3, #30
100117b2:	18fb      	adds	r3, r7, r3
100117b4:	781a      	ldrb	r2, [r3, #0]
100117b6:	498a      	ldr	r1, [pc, #552]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100117b8:	205e      	movs	r0, #94	; 0x5e
100117ba:	0013      	movs	r3, r2
100117bc:	015b      	lsls	r3, r3, #5
100117be:	1a9b      	subs	r3, r3, r2
100117c0:	009b      	lsls	r3, r3, #2
100117c2:	18cb      	adds	r3, r1, r3
100117c4:	181b      	adds	r3, r3, r0
100117c6:	781b      	ldrb	r3, [r3, #0]
100117c8:	2b02      	cmp	r3, #2
100117ca:	d10d      	bne.n	100117e8 <ble_slave_security_request_handler+0x1ac>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
100117cc:	231e      	movs	r3, #30
100117ce:	18fb      	adds	r3, r7, r3
100117d0:	781a      	ldrb	r2, [r3, #0]
100117d2:	4983      	ldr	r1, [pc, #524]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100117d4:	205e      	movs	r0, #94	; 0x5e
100117d6:	0013      	movs	r3, r2
100117d8:	015b      	lsls	r3, r3, #5
100117da:	1a9b      	subs	r3, r3, r2
100117dc:	009b      	lsls	r3, r3, #2
100117de:	18cb      	adds	r3, r1, r3
100117e0:	181b      	adds	r3, r3, r0
100117e2:	2203      	movs	r2, #3
100117e4:	701a      	strb	r2, [r3, #0]
			break;
100117e6:	e00b      	b.n	10011800 <ble_slave_security_request_handler+0x1c4>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100117e8:	231e      	movs	r3, #30
100117ea:	18fb      	adds	r3, r7, r3
100117ec:	781a      	ldrb	r2, [r3, #0]
100117ee:	231e      	movs	r3, #30
100117f0:	18fb      	adds	r3, r7, r3
100117f2:	3201      	adds	r2, #1
100117f4:	701a      	strb	r2, [r3, #0]
100117f6:	231e      	movs	r3, #30
100117f8:	18fb      	adds	r3, r7, r3
100117fa:	781b      	ldrb	r3, [r3, #0]
100117fc:	2b04      	cmp	r3, #4
100117fe:	d9c8      	bls.n	10011792 <ble_slave_security_request_handler+0x156>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10011800:	230c      	movs	r3, #12
10011802:	18fb      	adds	r3, r7, r3
10011804:	2200      	movs	r2, #0
10011806:	721a      	strb	r2, [r3, #8]
	features.bond = slave_sec_req->bond;
10011808:	69bb      	ldr	r3, [r7, #24]
1001180a:	78da      	ldrb	r2, [r3, #3]
1001180c:	230c      	movs	r3, #12
1001180e:	18fb      	adds	r3, r7, r3
10011810:	709a      	strb	r2, [r3, #2]
	features.mitm_protection = true;
10011812:	230c      	movs	r3, #12
10011814:	18fb      	adds	r3, r7, r3
10011816:	2201      	movs	r2, #1
10011818:	705a      	strb	r2, [r3, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1001181a:	230c      	movs	r3, #12
1001181c:	18fb      	adds	r3, r7, r3
1001181e:	2204      	movs	r2, #4
10011820:	701a      	strb	r2, [r3, #0]

	features.oob_avaiable = false;
10011822:	230c      	movs	r3, #12
10011824:	18fb      	adds	r3, r7, r3
10011826:	2200      	movs	r2, #0
10011828:	70da      	strb	r2, [r3, #3]
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1001182a:	231e      	movs	r3, #30
1001182c:	18fb      	adds	r3, r7, r3
1001182e:	781a      	ldrb	r2, [r3, #0]
10011830:	496b      	ldr	r1, [pc, #428]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
10011832:	0013      	movs	r3, r2
10011834:	015b      	lsls	r3, r3, #5
10011836:	1a9b      	subs	r3, r3, r2
10011838:	009b      	lsls	r3, r3, #2
1001183a:	5c5b      	ldrb	r3, [r3, r1]
1001183c:	2b02      	cmp	r3, #2
1001183e:	d108      	bne.n	10011852 <ble_slave_security_request_handler+0x216>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10011840:	230c      	movs	r3, #12
10011842:	18fb      	adds	r3, r7, r3
10011844:	2203      	movs	r2, #3
10011846:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10011848:	230c      	movs	r3, #12
1001184a:	18fb      	adds	r3, r7, r3
1001184c:	2203      	movs	r2, #3
1001184e:	71da      	strb	r2, [r3, #7]
10011850:	e007      	b.n	10011862 <ble_slave_security_request_handler+0x226>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10011852:	230c      	movs	r3, #12
10011854:	18fb      	adds	r3, r7, r3
10011856:	2201      	movs	r2, #1
10011858:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1001185a:	230c      	movs	r3, #12
1001185c:	18fb      	adds	r3, r7, r3
1001185e:	2201      	movs	r2, #1
10011860:	71da      	strb	r2, [r3, #7]
	}
	features.max_key_size = 16;
10011862:	230c      	movs	r3, #12
10011864:	18fb      	adds	r3, r7, r3
10011866:	2210      	movs	r2, #16
10011868:	715a      	strb	r2, [r3, #5]
	features.min_key_size = 16;
1001186a:	230c      	movs	r3, #12
1001186c:	18fb      	adds	r3, r7, r3
1001186e:	2210      	movs	r2, #16
10011870:	711a      	strb	r2, [r3, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10011872:	231e      	movs	r3, #30
10011874:	18fb      	adds	r3, r7, r3
10011876:	781a      	ldrb	r2, [r3, #0]
10011878:	4959      	ldr	r1, [pc, #356]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
1001187a:	0013      	movs	r3, r2
1001187c:	015b      	lsls	r3, r3, #5
1001187e:	1a9b      	subs	r3, r3, r2
10011880:	009b      	lsls	r3, r3, #2
10011882:	18cb      	adds	r3, r1, r3
10011884:	3318      	adds	r3, #24
10011886:	781b      	ldrb	r3, [r3, #0]
10011888:	2b40      	cmp	r3, #64	; 0x40
1001188a:	d000      	beq.n	1001188e <ble_slave_security_request_handler+0x252>
1001188c:	e087      	b.n	1001199e <ble_slave_security_request_handler+0x362>
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1001188e:	231f      	movs	r3, #31
10011890:	18fb      	adds	r3, r7, r3
10011892:	2200      	movs	r2, #0
10011894:	701a      	strb	r2, [r3, #0]
10011896:	e036      	b.n	10011906 <ble_slave_security_request_handler+0x2ca>
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10011898:	231e      	movs	r3, #30
1001189a:	18fb      	adds	r3, r7, r3
1001189c:	781c      	ldrb	r4, [r3, #0]
1001189e:	231f      	movs	r3, #31
100118a0:	18fb      	adds	r3, r7, r3
100118a2:	781d      	ldrb	r5, [r3, #0]
100118a4:	4b54      	ldr	r3, [pc, #336]	; (100119f8 <ble_slave_security_request_handler+0x3bc>)
100118a6:	4798      	blx	r3
100118a8:	0003      	movs	r3, r0
100118aa:	b2db      	uxtb	r3, r3
100118ac:	220f      	movs	r2, #15
100118ae:	4013      	ands	r3, r2
100118b0:	b2d8      	uxtb	r0, r3
100118b2:	4a4b      	ldr	r2, [pc, #300]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100118b4:	2160      	movs	r1, #96	; 0x60
100118b6:	0023      	movs	r3, r4
100118b8:	015b      	lsls	r3, r3, #5
100118ba:	1b1b      	subs	r3, r3, r4
100118bc:	009b      	lsls	r3, r3, #2
100118be:	18d3      	adds	r3, r2, r3
100118c0:	195b      	adds	r3, r3, r5
100118c2:	185b      	adds	r3, r3, r1
100118c4:	1c02      	adds	r2, r0, #0
100118c6:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
100118c8:	231e      	movs	r3, #30
100118ca:	18fb      	adds	r3, r7, r3
100118cc:	781c      	ldrb	r4, [r3, #0]
100118ce:	231f      	movs	r3, #31
100118d0:	18fb      	adds	r3, r7, r3
100118d2:	781d      	ldrb	r5, [r3, #0]
100118d4:	4b48      	ldr	r3, [pc, #288]	; (100119f8 <ble_slave_security_request_handler+0x3bc>)
100118d6:	4798      	blx	r3
100118d8:	0003      	movs	r3, r0
100118da:	b2db      	uxtb	r3, r3
100118dc:	220f      	movs	r2, #15
100118de:	4013      	ands	r3, r2
100118e0:	b2d8      	uxtb	r0, r3
100118e2:	4a3f      	ldr	r2, [pc, #252]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100118e4:	2172      	movs	r1, #114	; 0x72
100118e6:	0023      	movs	r3, r4
100118e8:	015b      	lsls	r3, r3, #5
100118ea:	1b1b      	subs	r3, r3, r4
100118ec:	009b      	lsls	r3, r3, #2
100118ee:	18d3      	adds	r3, r2, r3
100118f0:	195b      	adds	r3, r3, r5
100118f2:	185b      	adds	r3, r3, r1
100118f4:	1c02      	adds	r2, r0, #0
100118f6:	701a      	strb	r2, [r3, #0]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
100118f8:	231f      	movs	r3, #31
100118fa:	18fb      	adds	r3, r7, r3
100118fc:	781a      	ldrb	r2, [r3, #0]
100118fe:	231f      	movs	r3, #31
10011900:	18fb      	adds	r3, r7, r3
10011902:	3201      	adds	r2, #1
10011904:	701a      	strb	r2, [r3, #0]
10011906:	231f      	movs	r3, #31
10011908:	18fb      	adds	r3, r7, r3
1001190a:	781b      	ldrb	r3, [r3, #0]
1001190c:	2b07      	cmp	r3, #7
1001190e:	d9c3      	bls.n	10011898 <ble_slave_security_request_handler+0x25c>
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10011910:	231f      	movs	r3, #31
10011912:	18fb      	adds	r3, r7, r3
10011914:	2208      	movs	r2, #8
10011916:	701a      	strb	r2, [r3, #0]
10011918:	e01e      	b.n	10011958 <ble_slave_security_request_handler+0x31c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1001191a:	231e      	movs	r3, #30
1001191c:	18fb      	adds	r3, r7, r3
1001191e:	781c      	ldrb	r4, [r3, #0]
10011920:	231f      	movs	r3, #31
10011922:	18fb      	adds	r3, r7, r3
10011924:	781d      	ldrb	r5, [r3, #0]
10011926:	4b34      	ldr	r3, [pc, #208]	; (100119f8 <ble_slave_security_request_handler+0x3bc>)
10011928:	4798      	blx	r3
1001192a:	0003      	movs	r3, r0
1001192c:	b2db      	uxtb	r3, r3
1001192e:	220f      	movs	r2, #15
10011930:	4013      	ands	r3, r2
10011932:	b2d8      	uxtb	r0, r3
10011934:	4a2a      	ldr	r2, [pc, #168]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
10011936:	2160      	movs	r1, #96	; 0x60
10011938:	0023      	movs	r3, r4
1001193a:	015b      	lsls	r3, r3, #5
1001193c:	1b1b      	subs	r3, r3, r4
1001193e:	009b      	lsls	r3, r3, #2
10011940:	18d3      	adds	r3, r2, r3
10011942:	195b      	adds	r3, r3, r5
10011944:	185b      	adds	r3, r3, r1
10011946:	1c02      	adds	r2, r0, #0
10011948:	701a      	strb	r2, [r3, #0]
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1001194a:	231f      	movs	r3, #31
1001194c:	18fb      	adds	r3, r7, r3
1001194e:	781a      	ldrb	r2, [r3, #0]
10011950:	231f      	movs	r3, #31
10011952:	18fb      	adds	r3, r7, r3
10011954:	3201      	adds	r2, #1
10011956:	701a      	strb	r2, [r3, #0]
10011958:	231f      	movs	r3, #31
1001195a:	18fb      	adds	r3, r7, r3
1001195c:	781b      	ldrb	r3, [r3, #0]
1001195e:	2b0f      	cmp	r3, #15
10011960:	d9db      	bls.n	1001191a <ble_slave_security_request_handler+0x2de>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10011962:	231e      	movs	r3, #30
10011964:	18fb      	adds	r3, r7, r3
10011966:	781c      	ldrb	r4, [r3, #0]
10011968:	4b23      	ldr	r3, [pc, #140]	; (100119f8 <ble_slave_security_request_handler+0x3bc>)
1001196a:	4798      	blx	r3
1001196c:	0003      	movs	r3, r0
1001196e:	b298      	uxth	r0, r3
10011970:	4a1b      	ldr	r2, [pc, #108]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
10011972:	2170      	movs	r1, #112	; 0x70
10011974:	0023      	movs	r3, r4
10011976:	015b      	lsls	r3, r3, #5
10011978:	1b1b      	subs	r3, r3, r4
1001197a:	009b      	lsls	r3, r3, #2
1001197c:	18d3      	adds	r3, r2, r3
1001197e:	185b      	adds	r3, r3, r1
10011980:	1c02      	adds	r2, r0, #0
10011982:	801a      	strh	r2, [r3, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10011984:	231e      	movs	r3, #30
10011986:	18fb      	adds	r3, r7, r3
10011988:	781a      	ldrb	r2, [r3, #0]
1001198a:	4915      	ldr	r1, [pc, #84]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
1001198c:	207a      	movs	r0, #122	; 0x7a
1001198e:	0013      	movs	r3, r2
10011990:	015b      	lsls	r3, r3, #5
10011992:	1a9b      	subs	r3, r3, r2
10011994:	009b      	lsls	r3, r3, #2
10011996:	18cb      	adds	r3, r1, r3
10011998:	181b      	adds	r3, r3, r0
1001199a:	2210      	movs	r2, #16
1001199c:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1001199e:	69bb      	ldr	r3, [r7, #24]
100119a0:	8818      	ldrh	r0, [r3, #0]
100119a2:	231e      	movs	r3, #30
100119a4:	18fb      	adds	r3, r7, r3
100119a6:	781a      	ldrb	r2, [r3, #0]
100119a8:	0013      	movs	r3, r2
100119aa:	015b      	lsls	r3, r3, #5
100119ac:	1a9b      	subs	r3, r3, r2
100119ae:	009b      	lsls	r3, r3, #2
100119b0:	3360      	adds	r3, #96	; 0x60
100119b2:	001a      	movs	r2, r3
100119b4:	4b0a      	ldr	r3, [pc, #40]	; (100119e0 <ble_slave_security_request_handler+0x3a4>)
100119b6:	18d2      	adds	r2, r2, r3
100119b8:	230c      	movs	r3, #12
100119ba:	18f9      	adds	r1, r7, r3
100119bc:	2300      	movs	r3, #0
100119be:	4c0f      	ldr	r4, [pc, #60]	; (100119fc <ble_slave_security_request_handler+0x3c0>)
100119c0:	47a0      	blx	r4
100119c2:	1e03      	subs	r3, r0, #0
100119c4:	d01c      	beq.n	10011a00 <ble_slave_security_request_handler+0x3c4>
	{
		features.bond = false;
100119c6:	230c      	movs	r3, #12
100119c8:	18fb      	adds	r3, r7, r3
100119ca:	2200      	movs	r2, #0
100119cc:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
100119ce:	230c      	movs	r3, #12
100119d0:	18fb      	adds	r3, r7, r3
100119d2:	2200      	movs	r2, #0
100119d4:	705a      	strb	r2, [r3, #1]
		//DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
100119d6:	23e2      	movs	r3, #226	; 0xe2
100119d8:	e013      	b.n	10011a02 <ble_slave_security_request_handler+0x3c6>
100119da:	46c0      	nop			; (mov r8, r8)
100119dc:	10018e2d 	.word	0x10018e2d
100119e0:	1001c3b8 	.word	0x1001c3b8
100119e4:	100155d5 	.word	0x100155d5
100119e8:	1001afe4 	.word	0x1001afe4
100119ec:	10019095 	.word	0x10019095
100119f0:	1001b14c 	.word	0x1001b14c
100119f4:	10018f75 	.word	0x10018f75
100119f8:	100190a9 	.word	0x100190a9
100119fc:	100153e9 	.word	0x100153e9
	}
	return AT_BLE_SUCCESS;
10011a00:	2300      	movs	r3, #0
}
10011a02:	0018      	movs	r0, r3
10011a04:	46bd      	mov	sp, r7
10011a06:	b008      	add	sp, #32
10011a08:	bdb0      	pop	{r4, r5, r7, pc}
10011a0a:	46c0      	nop			; (mov r8, r8)

10011a0c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10011a0c:	b5b0      	push	{r4, r5, r7, lr}
10011a0e:	b088      	sub	sp, #32
10011a10:	af00      	add	r7, sp, #0
10011a12:	6078      	str	r0, [r7, #4]
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
10011a14:	231f      	movs	r3, #31
10011a16:	18fb      	adds	r3, r7, r3
10011a18:	2200      	movs	r2, #0
10011a1a:	701a      	strb	r2, [r3, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
10011a1c:	687b      	ldr	r3, [r7, #4]
10011a1e:	61bb      	str	r3, [r7, #24]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011a20:	231e      	movs	r3, #30
10011a22:	18fb      	adds	r3, r7, r3
10011a24:	2200      	movs	r2, #0
10011a26:	701a      	strb	r2, [r3, #0]
10011a28:	e031      	b.n	10011a8e <ble_pair_request_handler+0x82>
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10011a2a:	231e      	movs	r3, #30
10011a2c:	18fb      	adds	r3, r7, r3
10011a2e:	781a      	ldrb	r2, [r3, #0]
10011a30:	499e      	ldr	r1, [pc, #632]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011a32:	0013      	movs	r3, r2
10011a34:	015b      	lsls	r3, r3, #5
10011a36:	1a9b      	subs	r3, r3, r2
10011a38:	009b      	lsls	r3, r3, #2
10011a3a:	18cb      	adds	r3, r1, r3
10011a3c:	3308      	adds	r3, #8
10011a3e:	881a      	ldrh	r2, [r3, #0]
10011a40:	69bb      	ldr	r3, [r7, #24]
10011a42:	881b      	ldrh	r3, [r3, #0]
10011a44:	429a      	cmp	r2, r3
10011a46:	d11b      	bne.n	10011a80 <ble_pair_request_handler+0x74>
10011a48:	231e      	movs	r3, #30
10011a4a:	18fb      	adds	r3, r7, r3
10011a4c:	781a      	ldrb	r2, [r3, #0]
10011a4e:	4997      	ldr	r1, [pc, #604]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011a50:	205e      	movs	r0, #94	; 0x5e
10011a52:	0013      	movs	r3, r2
10011a54:	015b      	lsls	r3, r3, #5
10011a56:	1a9b      	subs	r3, r3, r2
10011a58:	009b      	lsls	r3, r3, #2
10011a5a:	18cb      	adds	r3, r1, r3
10011a5c:	181b      	adds	r3, r3, r0
10011a5e:	781b      	ldrb	r3, [r3, #0]
10011a60:	2b02      	cmp	r3, #2
10011a62:	d10d      	bne.n	10011a80 <ble_pair_request_handler+0x74>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10011a64:	231e      	movs	r3, #30
10011a66:	18fb      	adds	r3, r7, r3
10011a68:	781a      	ldrb	r2, [r3, #0]
10011a6a:	4990      	ldr	r1, [pc, #576]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011a6c:	205e      	movs	r0, #94	; 0x5e
10011a6e:	0013      	movs	r3, r2
10011a70:	015b      	lsls	r3, r3, #5
10011a72:	1a9b      	subs	r3, r3, r2
10011a74:	009b      	lsls	r3, r3, #2
10011a76:	18cb      	adds	r3, r1, r3
10011a78:	181b      	adds	r3, r3, r0
10011a7a:	2203      	movs	r2, #3
10011a7c:	701a      	strb	r2, [r3, #0]
			break;
10011a7e:	e00b      	b.n	10011a98 <ble_pair_request_handler+0x8c>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011a80:	231e      	movs	r3, #30
10011a82:	18fb      	adds	r3, r7, r3
10011a84:	781a      	ldrb	r2, [r3, #0]
10011a86:	231e      	movs	r3, #30
10011a88:	18fb      	adds	r3, r7, r3
10011a8a:	3201      	adds	r2, #1
10011a8c:	701a      	strb	r2, [r3, #0]
10011a8e:	231e      	movs	r3, #30
10011a90:	18fb      	adds	r3, r7, r3
10011a92:	781b      	ldrb	r3, [r3, #0]
10011a94:	2b04      	cmp	r3, #4
10011a96:	d9c8      	bls.n	10011a2a <ble_pair_request_handler+0x1e>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10011a98:	230c      	movs	r3, #12
10011a9a:	18fb      	adds	r3, r7, r3
10011a9c:	2200      	movs	r2, #0
10011a9e:	721a      	strb	r2, [r3, #8]
	features.bond = BLE_BOND_REQ;
10011aa0:	230c      	movs	r3, #12
10011aa2:	18fb      	adds	r3, r7, r3
10011aa4:	2200      	movs	r2, #0
10011aa6:	709a      	strb	r2, [r3, #2]
	features.mitm_protection = BLE_MITM_REQ;
10011aa8:	230c      	movs	r3, #12
10011aaa:	18fb      	adds	r3, r7, r3
10011aac:	2200      	movs	r2, #0
10011aae:	705a      	strb	r2, [r3, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10011ab0:	230c      	movs	r3, #12
10011ab2:	18fb      	adds	r3, r7, r3
10011ab4:	2203      	movs	r2, #3
10011ab6:	701a      	strb	r2, [r3, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10011ab8:	230c      	movs	r3, #12
10011aba:	18fb      	adds	r3, r7, r3
10011abc:	2200      	movs	r2, #0
10011abe:	70da      	strb	r2, [r3, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10011ac0:	231e      	movs	r3, #30
10011ac2:	18fb      	adds	r3, r7, r3
10011ac4:	781a      	ldrb	r2, [r3, #0]
10011ac6:	4979      	ldr	r1, [pc, #484]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011ac8:	0013      	movs	r3, r2
10011aca:	015b      	lsls	r3, r3, #5
10011acc:	1a9b      	subs	r3, r3, r2
10011ace:	009b      	lsls	r3, r3, #2
10011ad0:	5c5b      	ldrb	r3, [r3, r1]
10011ad2:	2b02      	cmp	r3, #2
10011ad4:	d108      	bne.n	10011ae8 <ble_pair_request_handler+0xdc>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10011ad6:	230c      	movs	r3, #12
10011ad8:	18fb      	adds	r3, r7, r3
10011ada:	2203      	movs	r2, #3
10011adc:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10011ade:	230c      	movs	r3, #12
10011ae0:	18fb      	adds	r3, r7, r3
10011ae2:	2203      	movs	r2, #3
10011ae4:	71da      	strb	r2, [r3, #7]
10011ae6:	e007      	b.n	10011af8 <ble_pair_request_handler+0xec>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10011ae8:	230c      	movs	r3, #12
10011aea:	18fb      	adds	r3, r7, r3
10011aec:	2201      	movs	r2, #1
10011aee:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10011af0:	230c      	movs	r3, #12
10011af2:	18fb      	adds	r3, r7, r3
10011af4:	2201      	movs	r2, #1
10011af6:	71da      	strb	r2, [r3, #7]
	}
			
	features.max_key_size = 16;
10011af8:	230c      	movs	r3, #12
10011afa:	18fb      	adds	r3, r7, r3
10011afc:	2210      	movs	r2, #16
10011afe:	715a      	strb	r2, [r3, #5]
	features.min_key_size = 16;
10011b00:	230c      	movs	r3, #12
10011b02:	18fb      	adds	r3, r7, r3
10011b04:	2210      	movs	r2, #16
10011b06:	711a      	strb	r2, [r3, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10011b08:	231e      	movs	r3, #30
10011b0a:	18fb      	adds	r3, r7, r3
10011b0c:	781a      	ldrb	r2, [r3, #0]
10011b0e:	4967      	ldr	r1, [pc, #412]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011b10:	0013      	movs	r3, r2
10011b12:	015b      	lsls	r3, r3, #5
10011b14:	1a9b      	subs	r3, r3, r2
10011b16:	009b      	lsls	r3, r3, #2
10011b18:	18cb      	adds	r3, r1, r3
10011b1a:	3318      	adds	r3, #24
10011b1c:	781b      	ldrb	r3, [r3, #0]
10011b1e:	2b40      	cmp	r3, #64	; 0x40
10011b20:	d000      	beq.n	10011b24 <ble_pair_request_handler+0x118>
10011b22:	e098      	b.n	10011c56 <ble_pair_request_handler+0x24a>
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10011b24:	231f      	movs	r3, #31
10011b26:	18fb      	adds	r3, r7, r3
10011b28:	2200      	movs	r2, #0
10011b2a:	701a      	strb	r2, [r3, #0]
10011b2c:	e036      	b.n	10011b9c <ble_pair_request_handler+0x190>
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10011b2e:	231e      	movs	r3, #30
10011b30:	18fb      	adds	r3, r7, r3
10011b32:	781c      	ldrb	r4, [r3, #0]
10011b34:	231f      	movs	r3, #31
10011b36:	18fb      	adds	r3, r7, r3
10011b38:	781d      	ldrb	r5, [r3, #0]
10011b3a:	4b5d      	ldr	r3, [pc, #372]	; (10011cb0 <ble_pair_request_handler+0x2a4>)
10011b3c:	4798      	blx	r3
10011b3e:	0003      	movs	r3, r0
10011b40:	b2db      	uxtb	r3, r3
10011b42:	220f      	movs	r2, #15
10011b44:	4013      	ands	r3, r2
10011b46:	b2d8      	uxtb	r0, r3
10011b48:	4a58      	ldr	r2, [pc, #352]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011b4a:	2160      	movs	r1, #96	; 0x60
10011b4c:	0023      	movs	r3, r4
10011b4e:	015b      	lsls	r3, r3, #5
10011b50:	1b1b      	subs	r3, r3, r4
10011b52:	009b      	lsls	r3, r3, #2
10011b54:	18d3      	adds	r3, r2, r3
10011b56:	195b      	adds	r3, r3, r5
10011b58:	185b      	adds	r3, r3, r1
10011b5a:	1c02      	adds	r2, r0, #0
10011b5c:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10011b5e:	231e      	movs	r3, #30
10011b60:	18fb      	adds	r3, r7, r3
10011b62:	781c      	ldrb	r4, [r3, #0]
10011b64:	231f      	movs	r3, #31
10011b66:	18fb      	adds	r3, r7, r3
10011b68:	781d      	ldrb	r5, [r3, #0]
10011b6a:	4b51      	ldr	r3, [pc, #324]	; (10011cb0 <ble_pair_request_handler+0x2a4>)
10011b6c:	4798      	blx	r3
10011b6e:	0003      	movs	r3, r0
10011b70:	b2db      	uxtb	r3, r3
10011b72:	220f      	movs	r2, #15
10011b74:	4013      	ands	r3, r2
10011b76:	b2d8      	uxtb	r0, r3
10011b78:	4a4c      	ldr	r2, [pc, #304]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011b7a:	2172      	movs	r1, #114	; 0x72
10011b7c:	0023      	movs	r3, r4
10011b7e:	015b      	lsls	r3, r3, #5
10011b80:	1b1b      	subs	r3, r3, r4
10011b82:	009b      	lsls	r3, r3, #2
10011b84:	18d3      	adds	r3, r2, r3
10011b86:	195b      	adds	r3, r3, r5
10011b88:	185b      	adds	r3, r3, r1
10011b8a:	1c02      	adds	r2, r0, #0
10011b8c:	701a      	strb	r2, [r3, #0]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10011b8e:	231f      	movs	r3, #31
10011b90:	18fb      	adds	r3, r7, r3
10011b92:	781a      	ldrb	r2, [r3, #0]
10011b94:	231f      	movs	r3, #31
10011b96:	18fb      	adds	r3, r7, r3
10011b98:	3201      	adds	r2, #1
10011b9a:	701a      	strb	r2, [r3, #0]
10011b9c:	231f      	movs	r3, #31
10011b9e:	18fb      	adds	r3, r7, r3
10011ba0:	781b      	ldrb	r3, [r3, #0]
10011ba2:	2b07      	cmp	r3, #7
10011ba4:	d9c3      	bls.n	10011b2e <ble_pair_request_handler+0x122>
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10011ba6:	231f      	movs	r3, #31
10011ba8:	18fb      	adds	r3, r7, r3
10011baa:	2208      	movs	r2, #8
10011bac:	701a      	strb	r2, [r3, #0]
10011bae:	e01e      	b.n	10011bee <ble_pair_request_handler+0x1e2>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10011bb0:	231e      	movs	r3, #30
10011bb2:	18fb      	adds	r3, r7, r3
10011bb4:	781c      	ldrb	r4, [r3, #0]
10011bb6:	231f      	movs	r3, #31
10011bb8:	18fb      	adds	r3, r7, r3
10011bba:	781d      	ldrb	r5, [r3, #0]
10011bbc:	4b3c      	ldr	r3, [pc, #240]	; (10011cb0 <ble_pair_request_handler+0x2a4>)
10011bbe:	4798      	blx	r3
10011bc0:	0003      	movs	r3, r0
10011bc2:	b2db      	uxtb	r3, r3
10011bc4:	220f      	movs	r2, #15
10011bc6:	4013      	ands	r3, r2
10011bc8:	b2d8      	uxtb	r0, r3
10011bca:	4a38      	ldr	r2, [pc, #224]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011bcc:	2160      	movs	r1, #96	; 0x60
10011bce:	0023      	movs	r3, r4
10011bd0:	015b      	lsls	r3, r3, #5
10011bd2:	1b1b      	subs	r3, r3, r4
10011bd4:	009b      	lsls	r3, r3, #2
10011bd6:	18d3      	adds	r3, r2, r3
10011bd8:	195b      	adds	r3, r3, r5
10011bda:	185b      	adds	r3, r3, r1
10011bdc:	1c02      	adds	r2, r0, #0
10011bde:	701a      	strb	r2, [r3, #0]
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10011be0:	231f      	movs	r3, #31
10011be2:	18fb      	adds	r3, r7, r3
10011be4:	781a      	ldrb	r2, [r3, #0]
10011be6:	231f      	movs	r3, #31
10011be8:	18fb      	adds	r3, r7, r3
10011bea:	3201      	adds	r2, #1
10011bec:	701a      	strb	r2, [r3, #0]
10011bee:	231f      	movs	r3, #31
10011bf0:	18fb      	adds	r3, r7, r3
10011bf2:	781b      	ldrb	r3, [r3, #0]
10011bf4:	2b0f      	cmp	r3, #15
10011bf6:	d9db      	bls.n	10011bb0 <ble_pair_request_handler+0x1a4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		//DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
10011bf8:	231f      	movs	r3, #31
10011bfa:	18fb      	adds	r3, r7, r3
10011bfc:	2200      	movs	r2, #0
10011bfe:	701a      	strb	r2, [r3, #0]
10011c00:	e006      	b.n	10011c10 <ble_pair_request_handler+0x204>
10011c02:	231f      	movs	r3, #31
10011c04:	18fb      	adds	r3, r7, r3
10011c06:	781a      	ldrb	r2, [r3, #0]
10011c08:	231f      	movs	r3, #31
10011c0a:	18fb      	adds	r3, r7, r3
10011c0c:	3201      	adds	r2, #1
10011c0e:	701a      	strb	r2, [r3, #0]
10011c10:	231f      	movs	r3, #31
10011c12:	18fb      	adds	r3, r7, r3
10011c14:	781b      	ldrb	r3, [r3, #0]
10011c16:	2b0f      	cmp	r3, #15
10011c18:	d9f3      	bls.n	10011c02 <ble_pair_request_handler+0x1f6>
		{
			//DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10011c1a:	231e      	movs	r3, #30
10011c1c:	18fb      	adds	r3, r7, r3
10011c1e:	781c      	ldrb	r4, [r3, #0]
10011c20:	4b23      	ldr	r3, [pc, #140]	; (10011cb0 <ble_pair_request_handler+0x2a4>)
10011c22:	4798      	blx	r3
10011c24:	0003      	movs	r3, r0
10011c26:	b298      	uxth	r0, r3
10011c28:	4a20      	ldr	r2, [pc, #128]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011c2a:	2170      	movs	r1, #112	; 0x70
10011c2c:	0023      	movs	r3, r4
10011c2e:	015b      	lsls	r3, r3, #5
10011c30:	1b1b      	subs	r3, r3, r4
10011c32:	009b      	lsls	r3, r3, #2
10011c34:	18d3      	adds	r3, r2, r3
10011c36:	185b      	adds	r3, r3, r1
10011c38:	1c02      	adds	r2, r0, #0
10011c3a:	801a      	strh	r2, [r3, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10011c3c:	231e      	movs	r3, #30
10011c3e:	18fb      	adds	r3, r7, r3
10011c40:	781a      	ldrb	r2, [r3, #0]
10011c42:	491a      	ldr	r1, [pc, #104]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011c44:	207a      	movs	r0, #122	; 0x7a
10011c46:	0013      	movs	r3, r2
10011c48:	015b      	lsls	r3, r3, #5
10011c4a:	1a9b      	subs	r3, r3, r2
10011c4c:	009b      	lsls	r3, r3, #2
10011c4e:	18cb      	adds	r3, r1, r3
10011c50:	181b      	adds	r3, r3, r0
10011c52:	2210      	movs	r2, #16
10011c54:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	//DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10011c56:	69bb      	ldr	r3, [r7, #24]
10011c58:	8818      	ldrh	r0, [r3, #0]
10011c5a:	231e      	movs	r3, #30
10011c5c:	18fb      	adds	r3, r7, r3
10011c5e:	781a      	ldrb	r2, [r3, #0]
10011c60:	0013      	movs	r3, r2
10011c62:	015b      	lsls	r3, r3, #5
10011c64:	1a9b      	subs	r3, r3, r2
10011c66:	009b      	lsls	r3, r3, #2
10011c68:	3360      	adds	r3, #96	; 0x60
10011c6a:	001a      	movs	r2, r3
10011c6c:	4b0f      	ldr	r3, [pc, #60]	; (10011cac <ble_pair_request_handler+0x2a0>)
10011c6e:	18d2      	adds	r2, r2, r3
10011c70:	230c      	movs	r3, #12
10011c72:	18f9      	adds	r1, r7, r3
10011c74:	2300      	movs	r3, #0
10011c76:	4c0f      	ldr	r4, [pc, #60]	; (10011cb4 <ble_pair_request_handler+0x2a8>)
10011c78:	47a0      	blx	r4
10011c7a:	1e03      	subs	r3, r0, #0
10011c7c:	d011      	beq.n	10011ca2 <ble_pair_request_handler+0x296>
	{
		features.bond = false;
10011c7e:	230c      	movs	r3, #12
10011c80:	18fb      	adds	r3, r7, r3
10011c82:	2200      	movs	r2, #0
10011c84:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10011c86:	230c      	movs	r3, #12
10011c88:	18fb      	adds	r3, r7, r3
10011c8a:	2200      	movs	r2, #0
10011c8c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
10011c8e:	4b0a      	ldr	r3, [pc, #40]	; (10011cb8 <ble_pair_request_handler+0x2ac>)
10011c90:	0018      	movs	r0, r3
10011c92:	4b0a      	ldr	r3, [pc, #40]	; (10011cbc <ble_pair_request_handler+0x2b0>)
10011c94:	4798      	blx	r3
10011c96:	4b0a      	ldr	r3, [pc, #40]	; (10011cc0 <ble_pair_request_handler+0x2b4>)
10011c98:	0018      	movs	r0, r3
10011c9a:	4b0a      	ldr	r3, [pc, #40]	; (10011cc4 <ble_pair_request_handler+0x2b8>)
10011c9c:	4798      	blx	r3
		return AT_BLE_FAILURE;
10011c9e:	23e2      	movs	r3, #226	; 0xe2
10011ca0:	e000      	b.n	10011ca4 <ble_pair_request_handler+0x298>
	}
	return AT_BLE_SUCCESS;
10011ca2:	2300      	movs	r3, #0
}
10011ca4:	0018      	movs	r0, r3
10011ca6:	46bd      	mov	sp, r7
10011ca8:	b008      	add	sp, #32
10011caa:	bdb0      	pop	{r4, r5, r7, pc}
10011cac:	1001c3b8 	.word	0x1001c3b8
10011cb0:	100190a9 	.word	0x100190a9
10011cb4:	100153e9 	.word	0x100153e9
10011cb8:	1001afe4 	.word	0x1001afe4
10011cbc:	10019095 	.word	0x10019095
10011cc0:	1001b164 	.word	0x1001b164
10011cc4:	10018f75 	.word	0x10018f75

10011cc8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10011cc8:	b580      	push	{r7, lr}
10011cca:	b088      	sub	sp, #32
10011ccc:	af00      	add	r7, sp, #0
10011cce:	6078      	str	r0, [r7, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
10011cd0:	687b      	ldr	r3, [r7, #4]
10011cd2:	61bb      	str	r3, [r7, #24]
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10011cd4:	2310      	movs	r3, #16
10011cd6:	18fa      	adds	r2, r7, r3
10011cd8:	4b79      	ldr	r3, [pc, #484]	; (10011ec0 <ble_pair_key_request_handler+0x1f8>)
10011cda:	0010      	movs	r0, r2
10011cdc:	0019      	movs	r1, r3
10011cde:	2306      	movs	r3, #6
10011ce0:	001a      	movs	r2, r3
10011ce2:	4b78      	ldr	r3, [pc, #480]	; (10011ec4 <ble_pair_key_request_handler+0x1fc>)
10011ce4:	4798      	blx	r3
	uint8_t idx = 0;
10011ce6:	231f      	movs	r3, #31
10011ce8:	18fb      	adds	r3, r7, r3
10011cea:	2200      	movs	r2, #0
10011cec:	701a      	strb	r2, [r3, #0]
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10011cee:	69b9      	ldr	r1, [r7, #24]
10011cf0:	230c      	movs	r3, #12
10011cf2:	18fb      	adds	r3, r7, r3
10011cf4:	2204      	movs	r2, #4
10011cf6:	0018      	movs	r0, r3
10011cf8:	4b72      	ldr	r3, [pc, #456]	; (10011ec4 <ble_pair_key_request_handler+0x1fc>)
10011cfa:	4798      	blx	r3
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
10011cfc:	230c      	movs	r3, #12
10011cfe:	18fb      	adds	r3, r7, r3
10011d00:	78db      	ldrb	r3, [r3, #3]
10011d02:	2b00      	cmp	r3, #0
10011d04:	d169      	bne.n	10011dda <ble_pair_key_request_handler+0x112>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10011d06:	4b70      	ldr	r3, [pc, #448]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011d08:	0018      	movs	r0, r3
10011d0a:	4b70      	ldr	r3, [pc, #448]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011d0c:	4798      	blx	r3
10011d0e:	4b70      	ldr	r3, [pc, #448]	; (10011ed0 <ble_pair_key_request_handler+0x208>)
10011d10:	0018      	movs	r0, r3
10011d12:	4b70      	ldr	r3, [pc, #448]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011d14:	4798      	blx	r3
		for (idx = 0; idx < 6;) {          
10011d16:	231f      	movs	r3, #31
10011d18:	18fb      	adds	r3, r7, r3
10011d1a:	2200      	movs	r2, #0
10011d1c:	701a      	strb	r2, [r3, #0]
10011d1e:	e057      	b.n	10011dd0 <ble_pair_key_request_handler+0x108>
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10011d20:	201e      	movs	r0, #30
10011d22:	4b6d      	ldr	r3, [pc, #436]	; (10011ed8 <ble_pair_key_request_handler+0x210>)
10011d24:	4798      	blx	r3
10011d26:	0002      	movs	r2, r0
10011d28:	2317      	movs	r3, #23
10011d2a:	18fb      	adds	r3, r7, r3
10011d2c:	701a      	strb	r2, [r3, #0]

			if (!pin) {
10011d2e:	2317      	movs	r3, #23
10011d30:	18fb      	adds	r3, r7, r3
10011d32:	781b      	ldrb	r3, [r3, #0]
10011d34:	2b00      	cmp	r3, #0
10011d36:	d121      	bne.n	10011d7c <ble_pair_key_request_handler+0xb4>
			DBG_LOG("Pin Timeout");
10011d38:	4b63      	ldr	r3, [pc, #396]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011d3a:	0018      	movs	r0, r3
10011d3c:	4b63      	ldr	r3, [pc, #396]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011d3e:	4798      	blx	r3
10011d40:	4b66      	ldr	r3, [pc, #408]	; (10011edc <ble_pair_key_request_handler+0x214>)
10011d42:	0018      	movs	r0, r3
10011d44:	4b63      	ldr	r3, [pc, #396]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011d46:	4798      	blx	r3
				DBG_LOG("Disconnecting ...");
10011d48:	4b5f      	ldr	r3, [pc, #380]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011d4a:	0018      	movs	r0, r3
10011d4c:	4b5f      	ldr	r3, [pc, #380]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011d4e:	4798      	blx	r3
10011d50:	4b63      	ldr	r3, [pc, #396]	; (10011ee0 <ble_pair_key_request_handler+0x218>)
10011d52:	0018      	movs	r0, r3
10011d54:	4b5f      	ldr	r3, [pc, #380]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011d56:	4798      	blx	r3
				if (!(at_ble_disconnect(pair_key->handle,
10011d58:	69bb      	ldr	r3, [r7, #24]
10011d5a:	881b      	ldrh	r3, [r3, #0]
10011d5c:	2113      	movs	r1, #19
10011d5e:	0018      	movs	r0, r3
10011d60:	4b60      	ldr	r3, [pc, #384]	; (10011ee4 <ble_pair_key_request_handler+0x21c>)
10011d62:	4798      	blx	r3
10011d64:	1e03      	subs	r3, r0, #0
10011d66:	d007      	beq.n	10011d78 <ble_pair_key_request_handler+0xb0>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10011d68:	4b57      	ldr	r3, [pc, #348]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011d6a:	0018      	movs	r0, r3
10011d6c:	4b57      	ldr	r3, [pc, #348]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011d6e:	4798      	blx	r3
10011d70:	4b5d      	ldr	r3, [pc, #372]	; (10011ee8 <ble_pair_key_request_handler+0x220>)
10011d72:	0018      	movs	r0, r3
10011d74:	4b57      	ldr	r3, [pc, #348]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011d76:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
10011d78:	23e2      	movs	r3, #226	; 0xe2
10011d7a:	e09c      	b.n	10011eb6 <ble_pair_key_request_handler+0x1ee>
10011d7c:	231f      	movs	r3, #31
10011d7e:	18fb      	adds	r3, r7, r3
10011d80:	221f      	movs	r2, #31
10011d82:	18ba      	adds	r2, r7, r2
10011d84:	7812      	ldrb	r2, [r2, #0]
10011d86:	701a      	strb	r2, [r3, #0]
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10011d88:	2317      	movs	r3, #23
10011d8a:	18fb      	adds	r3, r7, r3
10011d8c:	781b      	ldrb	r3, [r3, #0]
10011d8e:	2b2f      	cmp	r3, #47	; 0x2f
10011d90:	d91e      	bls.n	10011dd0 <ble_pair_key_request_handler+0x108>
10011d92:	231f      	movs	r3, #31
10011d94:	18fb      	adds	r3, r7, r3
10011d96:	221f      	movs	r2, #31
10011d98:	18ba      	adds	r2, r7, r2
10011d9a:	7812      	ldrb	r2, [r2, #0]
10011d9c:	701a      	strb	r2, [r3, #0]
10011d9e:	2317      	movs	r3, #23
10011da0:	18fb      	adds	r3, r7, r3
10011da2:	781b      	ldrb	r3, [r3, #0]
10011da4:	2b39      	cmp	r3, #57	; 0x39
10011da6:	d813      	bhi.n	10011dd0 <ble_pair_key_request_handler+0x108>
			  passkey[idx++] = pin;
10011da8:	231f      	movs	r3, #31
10011daa:	18fb      	adds	r3, r7, r3
10011dac:	781b      	ldrb	r3, [r3, #0]
10011dae:	221f      	movs	r2, #31
10011db0:	18ba      	adds	r2, r7, r2
10011db2:	1c59      	adds	r1, r3, #1
10011db4:	7011      	strb	r1, [r2, #0]
10011db6:	0019      	movs	r1, r3
10011db8:	2310      	movs	r3, #16
10011dba:	18fb      	adds	r3, r7, r3
10011dbc:	2217      	movs	r2, #23
10011dbe:	18ba      	adds	r2, r7, r2
10011dc0:	7812      	ldrb	r2, [r2, #0]
10011dc2:	545a      	strb	r2, [r3, r1]
			  DBG_LOG_CONT("%c", pin);
10011dc4:	2317      	movs	r3, #23
10011dc6:	18fb      	adds	r3, r7, r3
10011dc8:	781b      	ldrb	r3, [r3, #0]
10011dca:	0018      	movs	r0, r3
10011dcc:	4b47      	ldr	r3, [pc, #284]	; (10011eec <ble_pair_key_request_handler+0x224>)
10011dce:	4798      	blx	r3
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
10011dd0:	231f      	movs	r3, #31
10011dd2:	18fb      	adds	r3, r7, r3
10011dd4:	781b      	ldrb	r3, [r3, #0]
10011dd6:	2b05      	cmp	r3, #5
10011dd8:	d9a2      	bls.n	10011d20 <ble_pair_key_request_handler+0x58>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10011dda:	230c      	movs	r3, #12
10011ddc:	18fb      	adds	r3, r7, r3
10011dde:	78db      	ldrb	r3, [r3, #3]
10011de0:	2b01      	cmp	r3, #1
10011de2:	d104      	bne.n	10011dee <ble_pair_key_request_handler+0x126>
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
10011de4:	230c      	movs	r3, #12
10011de6:	18fb      	adds	r3, r7, r3
10011de8:	789b      	ldrb	r3, [r3, #2]
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10011dea:	2b00      	cmp	r3, #0
10011dec:	d004      	beq.n	10011df8 <ble_pair_key_request_handler+0x130>
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
10011dee:	230c      	movs	r3, #12
10011df0:	18fb      	adds	r3, r7, r3
10011df2:	78db      	ldrb	r3, [r3, #3]
10011df4:	2b00      	cmp	r3, #0
10011df6:	d150      	bne.n	10011e9a <ble_pair_key_request_handler+0x1d2>
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
10011df8:	230c      	movs	r3, #12
10011dfa:	18fb      	adds	r3, r7, r3
10011dfc:	78db      	ldrb	r3, [r3, #3]
10011dfe:	2b00      	cmp	r3, #0
10011e00:	d108      	bne.n	10011e14 <ble_pair_key_request_handler+0x14c>
          {
            DBG_LOG("Entered Pass-code:");
10011e02:	4b31      	ldr	r3, [pc, #196]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011e04:	0018      	movs	r0, r3
10011e06:	4b31      	ldr	r3, [pc, #196]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011e08:	4798      	blx	r3
10011e0a:	4b39      	ldr	r3, [pc, #228]	; (10011ef0 <ble_pair_key_request_handler+0x228>)
10011e0c:	0018      	movs	r0, r3
10011e0e:	4b31      	ldr	r3, [pc, #196]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011e10:	4798      	blx	r3
10011e12:	e007      	b.n	10011e24 <ble_pair_key_request_handler+0x15c>
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10011e14:	4b2c      	ldr	r3, [pc, #176]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011e16:	0018      	movs	r0, r3
10011e18:	4b2c      	ldr	r3, [pc, #176]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011e1a:	4798      	blx	r3
10011e1c:	4b35      	ldr	r3, [pc, #212]	; (10011ef4 <ble_pair_key_request_handler+0x22c>)
10011e1e:	0018      	movs	r0, r3
10011e20:	4b2c      	ldr	r3, [pc, #176]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011e22:	4798      	blx	r3
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10011e24:	231f      	movs	r3, #31
10011e26:	18fb      	adds	r3, r7, r3
10011e28:	2200      	movs	r2, #0
10011e2a:	701a      	strb	r2, [r3, #0]
10011e2c:	e01b      	b.n	10011e66 <ble_pair_key_request_handler+0x19e>
          {
                  passkey[idx] = (passkey[idx]);
10011e2e:	231f      	movs	r3, #31
10011e30:	18fb      	adds	r3, r7, r3
10011e32:	781b      	ldrb	r3, [r3, #0]
10011e34:	221f      	movs	r2, #31
10011e36:	18ba      	adds	r2, r7, r2
10011e38:	7812      	ldrb	r2, [r2, #0]
10011e3a:	2110      	movs	r1, #16
10011e3c:	1879      	adds	r1, r7, r1
10011e3e:	5c89      	ldrb	r1, [r1, r2]
10011e40:	2210      	movs	r2, #16
10011e42:	18ba      	adds	r2, r7, r2
10011e44:	54d1      	strb	r1, [r2, r3]
                  DBG_LOG_CONT("%c",passkey[idx]);
10011e46:	231f      	movs	r3, #31
10011e48:	18fb      	adds	r3, r7, r3
10011e4a:	781b      	ldrb	r3, [r3, #0]
10011e4c:	2210      	movs	r2, #16
10011e4e:	18ba      	adds	r2, r7, r2
10011e50:	5cd3      	ldrb	r3, [r2, r3]
10011e52:	0018      	movs	r0, r3
10011e54:	4b25      	ldr	r3, [pc, #148]	; (10011eec <ble_pair_key_request_handler+0x224>)
10011e56:	4798      	blx	r3
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10011e58:	231f      	movs	r3, #31
10011e5a:	18fb      	adds	r3, r7, r3
10011e5c:	781a      	ldrb	r2, [r3, #0]
10011e5e:	231f      	movs	r3, #31
10011e60:	18fb      	adds	r3, r7, r3
10011e62:	3201      	adds	r2, #1
10011e64:	701a      	strb	r2, [r3, #0]
10011e66:	231f      	movs	r3, #31
10011e68:	18fb      	adds	r3, r7, r3
10011e6a:	781b      	ldrb	r3, [r3, #0]
10011e6c:	2b05      	cmp	r3, #5
10011e6e:	d9de      	bls.n	10011e2e <ble_pair_key_request_handler+0x166>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
10011e70:	69bb      	ldr	r3, [r7, #24]
10011e72:	8818      	ldrh	r0, [r3, #0]
10011e74:	230c      	movs	r3, #12
10011e76:	18fb      	adds	r3, r7, r3
10011e78:	789b      	ldrb	r3, [r3, #2]
10011e7a:	2210      	movs	r2, #16
10011e7c:	18ba      	adds	r2, r7, r2
10011e7e:	0019      	movs	r1, r3
10011e80:	4b1d      	ldr	r3, [pc, #116]	; (10011ef8 <ble_pair_key_request_handler+0x230>)
10011e82:	4798      	blx	r3
10011e84:	1e03      	subs	r3, r0, #0
10011e86:	d015      	beq.n	10011eb4 <ble_pair_key_request_handler+0x1ec>
          {
                  DBG_LOG("Pair-key reply failed");
10011e88:	4b0f      	ldr	r3, [pc, #60]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011e8a:	0018      	movs	r0, r3
10011e8c:	4b0f      	ldr	r3, [pc, #60]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011e8e:	4798      	blx	r3
10011e90:	4b1a      	ldr	r3, [pc, #104]	; (10011efc <ble_pair_key_request_handler+0x234>)
10011e92:	0018      	movs	r0, r3
10011e94:	4b0f      	ldr	r3, [pc, #60]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011e96:	4798      	blx	r3
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
10011e98:	e00c      	b.n	10011eb4 <ble_pair_key_request_handler+0x1ec>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10011e9a:	230c      	movs	r3, #12
10011e9c:	18fb      	adds	r3, r7, r3
10011e9e:	789b      	ldrb	r3, [r3, #2]
10011ea0:	2b01      	cmp	r3, #1
10011ea2:	d107      	bne.n	10011eb4 <ble_pair_key_request_handler+0x1ec>
		{
			DBG_LOG("OOB Feature Not supported");
10011ea4:	4b08      	ldr	r3, [pc, #32]	; (10011ec8 <ble_pair_key_request_handler+0x200>)
10011ea6:	0018      	movs	r0, r3
10011ea8:	4b08      	ldr	r3, [pc, #32]	; (10011ecc <ble_pair_key_request_handler+0x204>)
10011eaa:	4798      	blx	r3
10011eac:	4b14      	ldr	r3, [pc, #80]	; (10011f00 <ble_pair_key_request_handler+0x238>)
10011eae:	0018      	movs	r0, r3
10011eb0:	4b08      	ldr	r3, [pc, #32]	; (10011ed4 <ble_pair_key_request_handler+0x20c>)
10011eb2:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10011eb4:	2300      	movs	r3, #0
}
10011eb6:	0018      	movs	r0, r3
10011eb8:	46bd      	mov	sp, r7
10011eba:	b008      	add	sp, #32
10011ebc:	bd80      	pop	{r7, pc}
10011ebe:	46c0      	nop			; (mov r8, r8)
10011ec0:	1001b270 	.word	0x1001b270
10011ec4:	10018e1b 	.word	0x10018e1b
10011ec8:	1001afe4 	.word	0x1001afe4
10011ecc:	10019095 	.word	0x10019095
10011ed0:	1001b18c 	.word	0x1001b18c
10011ed4:	10018f75 	.word	0x10018f75
10011ed8:	10012cad 	.word	0x10012cad
10011edc:	1001b1b4 	.word	0x1001b1b4
10011ee0:	1001b1c0 	.word	0x1001b1c0
10011ee4:	10014a09 	.word	0x10014a09
10011ee8:	1001b1d4 	.word	0x1001b1d4
10011eec:	10018fa9 	.word	0x10018fa9
10011ef0:	1001b1f0 	.word	0x1001b1f0
10011ef4:	1001b204 	.word	0x1001b204
10011ef8:	10015519 	.word	0x10015519
10011efc:	1001b23c 	.word	0x1001b23c
10011f00:	1001b254 	.word	0x1001b254

10011f04 <ble_pair_done_handler>:

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10011f04:	b580      	push	{r7, lr}
10011f06:	b084      	sub	sp, #16
10011f08:	af00      	add	r7, sp, #0
10011f0a:	6078      	str	r0, [r7, #4]
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
10011f0c:	230e      	movs	r3, #14
10011f0e:	18fb      	adds	r3, r7, r3
10011f10:	2200      	movs	r2, #0
10011f12:	701a      	strb	r2, [r3, #0]
	pairing_params = (at_ble_pair_done_t *)params;
10011f14:	687b      	ldr	r3, [r7, #4]
10011f16:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011f18:	230f      	movs	r3, #15
10011f1a:	18fb      	adds	r3, r7, r3
10011f1c:	2200      	movs	r2, #0
10011f1e:	701a      	strb	r2, [r3, #0]
10011f20:	e028      	b.n	10011f74 <ble_pair_done_handler+0x70>
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10011f22:	230f      	movs	r3, #15
10011f24:	18fb      	adds	r3, r7, r3
10011f26:	781a      	ldrb	r2, [r3, #0]
10011f28:	496c      	ldr	r1, [pc, #432]	; (100120dc <ble_pair_done_handler+0x1d8>)
10011f2a:	0013      	movs	r3, r2
10011f2c:	015b      	lsls	r3, r3, #5
10011f2e:	1a9b      	subs	r3, r3, r2
10011f30:	009b      	lsls	r3, r3, #2
10011f32:	18cb      	adds	r3, r1, r3
10011f34:	3308      	adds	r3, #8
10011f36:	881a      	ldrh	r2, [r3, #0]
10011f38:	68bb      	ldr	r3, [r7, #8]
10011f3a:	885b      	ldrh	r3, [r3, #2]
10011f3c:	429a      	cmp	r2, r3
10011f3e:	d112      	bne.n	10011f66 <ble_pair_done_handler+0x62>
10011f40:	230f      	movs	r3, #15
10011f42:	18fb      	adds	r3, r7, r3
10011f44:	781a      	ldrb	r2, [r3, #0]
10011f46:	4965      	ldr	r1, [pc, #404]	; (100120dc <ble_pair_done_handler+0x1d8>)
10011f48:	205e      	movs	r0, #94	; 0x5e
10011f4a:	0013      	movs	r3, r2
10011f4c:	015b      	lsls	r3, r3, #5
10011f4e:	1a9b      	subs	r3, r3, r2
10011f50:	009b      	lsls	r3, r3, #2
10011f52:	18cb      	adds	r3, r1, r3
10011f54:	181b      	adds	r3, r3, r0
10011f56:	781b      	ldrb	r3, [r3, #0]
10011f58:	2b03      	cmp	r3, #3
10011f5a:	d104      	bne.n	10011f66 <ble_pair_done_handler+0x62>
		{
			device_found = true;
10011f5c:	230e      	movs	r3, #14
10011f5e:	18fb      	adds	r3, r7, r3
10011f60:	2201      	movs	r2, #1
10011f62:	701a      	strb	r2, [r3, #0]
			break;
10011f64:	e00b      	b.n	10011f7e <ble_pair_done_handler+0x7a>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10011f66:	230f      	movs	r3, #15
10011f68:	18fb      	adds	r3, r7, r3
10011f6a:	781a      	ldrb	r2, [r3, #0]
10011f6c:	230f      	movs	r3, #15
10011f6e:	18fb      	adds	r3, r7, r3
10011f70:	3201      	adds	r2, #1
10011f72:	701a      	strb	r2, [r3, #0]
10011f74:	230f      	movs	r3, #15
10011f76:	18fb      	adds	r3, r7, r3
10011f78:	781b      	ldrb	r3, [r3, #0]
10011f7a:	2b04      	cmp	r3, #4
10011f7c:	d9d1      	bls.n	10011f22 <ble_pair_done_handler+0x1e>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10011f7e:	68bb      	ldr	r3, [r7, #8]
10011f80:	791b      	ldrb	r3, [r3, #4]
10011f82:	2b00      	cmp	r3, #0
10011f84:	d16f      	bne.n	10012066 <ble_pair_done_handler+0x162>
	{
		//DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
10011f86:	230e      	movs	r3, #14
10011f88:	18fb      	adds	r3, r7, r3
10011f8a:	781b      	ldrb	r3, [r3, #0]
10011f8c:	2b00      	cmp	r3, #0
10011f8e:	d060      	beq.n	10012052 <ble_pair_done_handler+0x14e>
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10011f90:	230f      	movs	r3, #15
10011f92:	18fb      	adds	r3, r7, r3
10011f94:	781a      	ldrb	r2, [r3, #0]
10011f96:	68bb      	ldr	r3, [r7, #8]
10011f98:	7818      	ldrb	r0, [r3, #0]
10011f9a:	4950      	ldr	r1, [pc, #320]	; (100120dc <ble_pair_done_handler+0x1d8>)
10011f9c:	0013      	movs	r3, r2
10011f9e:	015b      	lsls	r3, r3, #5
10011fa0:	1a9b      	subs	r3, r3, r2
10011fa2:	009b      	lsls	r3, r3, #2
10011fa4:	18cb      	adds	r3, r1, r3
10011fa6:	3314      	adds	r3, #20
10011fa8:	1c02      	adds	r2, r0, #0
10011faa:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10011fac:	230f      	movs	r3, #15
10011fae:	18fb      	adds	r3, r7, r3
10011fb0:	781a      	ldrb	r2, [r3, #0]
10011fb2:	68bb      	ldr	r3, [r7, #8]
10011fb4:	7918      	ldrb	r0, [r3, #4]
10011fb6:	4949      	ldr	r1, [pc, #292]	; (100120dc <ble_pair_done_handler+0x1d8>)
10011fb8:	0013      	movs	r3, r2
10011fba:	015b      	lsls	r3, r3, #5
10011fbc:	1a9b      	subs	r3, r3, r2
10011fbe:	009b      	lsls	r3, r3, #2
10011fc0:	18cb      	adds	r3, r1, r3
10011fc2:	3318      	adds	r3, #24
10011fc4:	1c02      	adds	r2, r0, #0
10011fc6:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10011fc8:	230f      	movs	r3, #15
10011fca:	18fb      	adds	r3, r7, r3
10011fcc:	781a      	ldrb	r2, [r3, #0]
10011fce:	4943      	ldr	r1, [pc, #268]	; (100120dc <ble_pair_done_handler+0x1d8>)
10011fd0:	205e      	movs	r0, #94	; 0x5e
10011fd2:	0013      	movs	r3, r2
10011fd4:	015b      	lsls	r3, r3, #5
10011fd6:	1a9b      	subs	r3, r3, r2
10011fd8:	009b      	lsls	r3, r3, #2
10011fda:	18cb      	adds	r3, r1, r3
10011fdc:	181b      	adds	r3, r3, r0
10011fde:	2205      	movs	r2, #5
10011fe0:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10011fe2:	230f      	movs	r3, #15
10011fe4:	18fb      	adds	r3, r7, r3
10011fe6:	781a      	ldrb	r2, [r3, #0]
10011fe8:	0013      	movs	r3, r2
10011fea:	015b      	lsls	r3, r3, #5
10011fec:	1a9b      	subs	r3, r3, r2
10011fee:	009b      	lsls	r3, r3, #2
10011ff0:	3330      	adds	r3, #48	; 0x30
10011ff2:	001a      	movs	r2, r3
10011ff4:	4b39      	ldr	r3, [pc, #228]	; (100120dc <ble_pair_done_handler+0x1d8>)
10011ff6:	18d3      	adds	r3, r2, r3
10011ff8:	1d98      	adds	r0, r3, #6
10011ffa:	68bb      	ldr	r3, [r7, #8]
10011ffc:	3322      	adds	r3, #34	; 0x22
10011ffe:	2210      	movs	r2, #16
10012000:	0019      	movs	r1, r3
10012002:	4b37      	ldr	r3, [pc, #220]	; (100120e0 <ble_pair_done_handler+0x1dc>)
10012004:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10012006:	230f      	movs	r3, #15
10012008:	18fb      	adds	r3, r7, r3
1001200a:	781a      	ldrb	r2, [r3, #0]
1001200c:	0013      	movs	r3, r2
1001200e:	015b      	lsls	r3, r3, #5
10012010:	1a9b      	subs	r3, r3, r2
10012012:	009b      	lsls	r3, r3, #2
10012014:	3340      	adds	r3, #64	; 0x40
10012016:	001a      	movs	r2, r3
10012018:	4b30      	ldr	r3, [pc, #192]	; (100120dc <ble_pair_done_handler+0x1d8>)
1001201a:	18d3      	adds	r3, r2, r3
1001201c:	1d98      	adds	r0, r3, #6
1001201e:	68bb      	ldr	r3, [r7, #8]
10012020:	3332      	adds	r3, #50	; 0x32
10012022:	2217      	movs	r2, #23
10012024:	0019      	movs	r1, r3
10012026:	4b2e      	ldr	r3, [pc, #184]	; (100120e0 <ble_pair_done_handler+0x1dc>)
10012028:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1001202a:	230f      	movs	r3, #15
1001202c:	18fb      	adds	r3, r7, r3
1001202e:	781a      	ldrb	r2, [r3, #0]
10012030:	0013      	movs	r3, r2
10012032:	015b      	lsls	r3, r3, #5
10012034:	1a9b      	subs	r3, r3, r2
10012036:	009b      	lsls	r3, r3, #2
10012038:	3310      	adds	r3, #16
1001203a:	001a      	movs	r2, r3
1001203c:	4b27      	ldr	r3, [pc, #156]	; (100120dc <ble_pair_done_handler+0x1d8>)
1001203e:	18d3      	adds	r3, r2, r3
10012040:	330a      	adds	r3, #10
10012042:	0018      	movs	r0, r3
10012044:	68bb      	ldr	r3, [r7, #8]
10012046:	3306      	adds	r3, #6
10012048:	221c      	movs	r2, #28
1001204a:	0019      	movs	r1, r3
1001204c:	4b24      	ldr	r3, [pc, #144]	; (100120e0 <ble_pair_done_handler+0x1dc>)
1001204e:	4798      	blx	r3
10012050:	e03f      	b.n	100120d2 <ble_pair_done_handler+0x1ce>
				//DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
			//}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10012052:	4b24      	ldr	r3, [pc, #144]	; (100120e4 <ble_pair_done_handler+0x1e0>)
10012054:	0018      	movs	r0, r3
10012056:	4b24      	ldr	r3, [pc, #144]	; (100120e8 <ble_pair_done_handler+0x1e4>)
10012058:	4798      	blx	r3
1001205a:	4b24      	ldr	r3, [pc, #144]	; (100120ec <ble_pair_done_handler+0x1e8>)
1001205c:	0018      	movs	r0, r3
1001205e:	4b24      	ldr	r3, [pc, #144]	; (100120f0 <ble_pair_done_handler+0x1ec>)
10012060:	4798      	blx	r3
			return AT_BLE_FAILURE;
10012062:	23e2      	movs	r3, #226	; 0xe2
10012064:	e036      	b.n	100120d4 <ble_pair_done_handler+0x1d0>
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10012066:	230f      	movs	r3, #15
10012068:	18fb      	adds	r3, r7, r3
1001206a:	781a      	ldrb	r2, [r3, #0]
1001206c:	491b      	ldr	r1, [pc, #108]	; (100120dc <ble_pair_done_handler+0x1d8>)
1001206e:	205e      	movs	r0, #94	; 0x5e
10012070:	0013      	movs	r3, r2
10012072:	015b      	lsls	r3, r3, #5
10012074:	1a9b      	subs	r3, r3, r2
10012076:	009b      	lsls	r3, r3, #2
10012078:	18cb      	adds	r3, r1, r3
1001207a:	181b      	adds	r3, r3, r0
1001207c:	781b      	ldrb	r3, [r3, #0]
1001207e:	2b00      	cmp	r3, #0
10012080:	d027      	beq.n	100120d2 <ble_pair_done_handler+0x1ce>
10012082:	230f      	movs	r3, #15
10012084:	18fb      	adds	r3, r7, r3
10012086:	781a      	ldrb	r2, [r3, #0]
10012088:	4914      	ldr	r1, [pc, #80]	; (100120dc <ble_pair_done_handler+0x1d8>)
1001208a:	205e      	movs	r0, #94	; 0x5e
1001208c:	0013      	movs	r3, r2
1001208e:	015b      	lsls	r3, r3, #5
10012090:	1a9b      	subs	r3, r3, r2
10012092:	009b      	lsls	r3, r3, #2
10012094:	18cb      	adds	r3, r1, r3
10012096:	181b      	adds	r3, r3, r0
10012098:	781b      	ldrb	r3, [r3, #0]
1001209a:	2b01      	cmp	r3, #1
1001209c:	d019      	beq.n	100120d2 <ble_pair_done_handler+0x1ce>
			DBG_LOG("Pairing failed...Disconnecting");
1001209e:	4b11      	ldr	r3, [pc, #68]	; (100120e4 <ble_pair_done_handler+0x1e0>)
100120a0:	0018      	movs	r0, r3
100120a2:	4b11      	ldr	r3, [pc, #68]	; (100120e8 <ble_pair_done_handler+0x1e4>)
100120a4:	4798      	blx	r3
100120a6:	4b13      	ldr	r3, [pc, #76]	; (100120f4 <ble_pair_done_handler+0x1f0>)
100120a8:	0018      	movs	r0, r3
100120aa:	4b11      	ldr	r3, [pc, #68]	; (100120f0 <ble_pair_done_handler+0x1ec>)
100120ac:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
100120ae:	68bb      	ldr	r3, [r7, #8]
100120b0:	885b      	ldrh	r3, [r3, #2]
100120b2:	2113      	movs	r1, #19
100120b4:	0018      	movs	r0, r3
100120b6:	4b10      	ldr	r3, [pc, #64]	; (100120f8 <ble_pair_done_handler+0x1f4>)
100120b8:	4798      	blx	r3
100120ba:	1e03      	subs	r3, r0, #0
100120bc:	d009      	beq.n	100120d2 <ble_pair_done_handler+0x1ce>
			{
				DBG_LOG("Disconnect Request Failed");
100120be:	4b09      	ldr	r3, [pc, #36]	; (100120e4 <ble_pair_done_handler+0x1e0>)
100120c0:	0018      	movs	r0, r3
100120c2:	4b09      	ldr	r3, [pc, #36]	; (100120e8 <ble_pair_done_handler+0x1e4>)
100120c4:	4798      	blx	r3
100120c6:	4b0d      	ldr	r3, [pc, #52]	; (100120fc <ble_pair_done_handler+0x1f8>)
100120c8:	0018      	movs	r0, r3
100120ca:	4b09      	ldr	r3, [pc, #36]	; (100120f0 <ble_pair_done_handler+0x1ec>)
100120cc:	4798      	blx	r3
				return AT_BLE_FAILURE;
100120ce:	23e2      	movs	r3, #226	; 0xe2
100120d0:	e000      	b.n	100120d4 <ble_pair_done_handler+0x1d0>
			}
		}
	}
	return AT_BLE_SUCCESS;
100120d2:	2300      	movs	r3, #0
}
100120d4:	0018      	movs	r0, r3
100120d6:	46bd      	mov	sp, r7
100120d8:	b004      	add	sp, #16
100120da:	bd80      	pop	{r7, pc}
100120dc:	1001c3b8 	.word	0x1001c3b8
100120e0:	10018e1b 	.word	0x10018e1b
100120e4:	1001afe4 	.word	0x1001afe4
100120e8:	10019095 	.word	0x10019095
100120ec:	1001b278 	.word	0x1001b278
100120f0:	10018f75 	.word	0x10018f75
100120f4:	1001b2a8 	.word	0x1001b2a8
100120f8:	10014a09 	.word	0x10014a09
100120fc:	1001b1d4 	.word	0x1001b1d4

10012100 <ble_encryption_status_change_handler>:

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10012100:	b580      	push	{r7, lr}
10012102:	b084      	sub	sp, #16
10012104:	af00      	add	r7, sp, #0
10012106:	6078      	str	r0, [r7, #4]
	at_ble_encryption_status_changed_t *enc_status;
	uint8_t idx;
	bool device_found = false;
10012108:	230e      	movs	r3, #14
1001210a:	18fb      	adds	r3, r7, r3
1001210c:	2200      	movs	r2, #0
1001210e:	701a      	strb	r2, [r3, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
10012110:	687b      	ldr	r3, [r7, #4]
10012112:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10012114:	230f      	movs	r3, #15
10012116:	18fb      	adds	r3, r7, r3
10012118:	2200      	movs	r2, #0
1001211a:	701a      	strb	r2, [r3, #0]
1001211c:	e028      	b.n	10012170 <ble_encryption_status_change_handler+0x70>
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1001211e:	230f      	movs	r3, #15
10012120:	18fb      	adds	r3, r7, r3
10012122:	781a      	ldrb	r2, [r3, #0]
10012124:	494c      	ldr	r1, [pc, #304]	; (10012258 <ble_encryption_status_change_handler+0x158>)
10012126:	0013      	movs	r3, r2
10012128:	015b      	lsls	r3, r3, #5
1001212a:	1a9b      	subs	r3, r3, r2
1001212c:	009b      	lsls	r3, r3, #2
1001212e:	18cb      	adds	r3, r1, r3
10012130:	3308      	adds	r3, #8
10012132:	881a      	ldrh	r2, [r3, #0]
10012134:	68bb      	ldr	r3, [r7, #8]
10012136:	881b      	ldrh	r3, [r3, #0]
10012138:	429a      	cmp	r2, r3
1001213a:	d112      	bne.n	10012162 <ble_encryption_status_change_handler+0x62>
1001213c:	230f      	movs	r3, #15
1001213e:	18fb      	adds	r3, r7, r3
10012140:	781a      	ldrb	r2, [r3, #0]
10012142:	4945      	ldr	r1, [pc, #276]	; (10012258 <ble_encryption_status_change_handler+0x158>)
10012144:	205e      	movs	r0, #94	; 0x5e
10012146:	0013      	movs	r3, r2
10012148:	015b      	lsls	r3, r3, #5
1001214a:	1a9b      	subs	r3, r3, r2
1001214c:	009b      	lsls	r3, r3, #2
1001214e:	18cb      	adds	r3, r1, r3
10012150:	181b      	adds	r3, r3, r0
10012152:	781b      	ldrb	r3, [r3, #0]
10012154:	2b06      	cmp	r3, #6
10012156:	d104      	bne.n	10012162 <ble_encryption_status_change_handler+0x62>
		{
			device_found = true;
10012158:	230e      	movs	r3, #14
1001215a:	18fb      	adds	r3, r7, r3
1001215c:	2201      	movs	r2, #1
1001215e:	701a      	strb	r2, [r3, #0]
			break;
10012160:	e00b      	b.n	1001217a <ble_encryption_status_change_handler+0x7a>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10012162:	230f      	movs	r3, #15
10012164:	18fb      	adds	r3, r7, r3
10012166:	781a      	ldrb	r2, [r3, #0]
10012168:	230f      	movs	r3, #15
1001216a:	18fb      	adds	r3, r7, r3
1001216c:	3201      	adds	r2, #1
1001216e:	701a      	strb	r2, [r3, #0]
10012170:	230f      	movs	r3, #15
10012172:	18fb      	adds	r3, r7, r3
10012174:	781b      	ldrb	r3, [r3, #0]
10012176:	2b04      	cmp	r3, #4
10012178:	d9d1      	bls.n	1001211e <ble_encryption_status_change_handler+0x1e>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1001217a:	68bb      	ldr	r3, [r7, #8]
1001217c:	789b      	ldrb	r3, [r3, #2]
1001217e:	2b00      	cmp	r3, #0
10012180:	d141      	bne.n	10012206 <ble_encryption_status_change_handler+0x106>
	{
		DBG_LOG("Encryption completed successfully");
10012182:	4b36      	ldr	r3, [pc, #216]	; (1001225c <ble_encryption_status_change_handler+0x15c>)
10012184:	0018      	movs	r0, r3
10012186:	4b36      	ldr	r3, [pc, #216]	; (10012260 <ble_encryption_status_change_handler+0x160>)
10012188:	4798      	blx	r3
1001218a:	4b36      	ldr	r3, [pc, #216]	; (10012264 <ble_encryption_status_change_handler+0x164>)
1001218c:	0018      	movs	r0, r3
1001218e:	4b36      	ldr	r3, [pc, #216]	; (10012268 <ble_encryption_status_change_handler+0x168>)
10012190:	4798      	blx	r3
		if (device_found)
10012192:	230e      	movs	r3, #14
10012194:	18fb      	adds	r3, r7, r3
10012196:	781b      	ldrb	r3, [r3, #0]
10012198:	2b00      	cmp	r3, #0
1001219a:	d02a      	beq.n	100121f2 <ble_encryption_status_change_handler+0xf2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1001219c:	230f      	movs	r3, #15
1001219e:	18fb      	adds	r3, r7, r3
100121a0:	781a      	ldrb	r2, [r3, #0]
100121a2:	492d      	ldr	r1, [pc, #180]	; (10012258 <ble_encryption_status_change_handler+0x158>)
100121a4:	205e      	movs	r0, #94	; 0x5e
100121a6:	0013      	movs	r3, r2
100121a8:	015b      	lsls	r3, r3, #5
100121aa:	1a9b      	subs	r3, r3, r2
100121ac:	009b      	lsls	r3, r3, #2
100121ae:	18cb      	adds	r3, r1, r3
100121b0:	181b      	adds	r3, r3, r0
100121b2:	2208      	movs	r2, #8
100121b4:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
100121b6:	230f      	movs	r3, #15
100121b8:	18fb      	adds	r3, r7, r3
100121ba:	781a      	ldrb	r2, [r3, #0]
100121bc:	68bb      	ldr	r3, [r7, #8]
100121be:	78d8      	ldrb	r0, [r3, #3]
100121c0:	4925      	ldr	r1, [pc, #148]	; (10012258 <ble_encryption_status_change_handler+0x158>)
100121c2:	0013      	movs	r3, r2
100121c4:	015b      	lsls	r3, r3, #5
100121c6:	1a9b      	subs	r3, r3, r2
100121c8:	009b      	lsls	r3, r3, #2
100121ca:	18cb      	adds	r3, r1, r3
100121cc:	3314      	adds	r3, #20
100121ce:	1c02      	adds	r2, r0, #0
100121d0:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.status = enc_status->status;
100121d2:	230f      	movs	r3, #15
100121d4:	18fb      	adds	r3, r7, r3
100121d6:	781a      	ldrb	r2, [r3, #0]
100121d8:	68bb      	ldr	r3, [r7, #8]
100121da:	7898      	ldrb	r0, [r3, #2]
100121dc:	491e      	ldr	r1, [pc, #120]	; (10012258 <ble_encryption_status_change_handler+0x158>)
100121de:	0013      	movs	r3, r2
100121e0:	015b      	lsls	r3, r3, #5
100121e2:	1a9b      	subs	r3, r3, r2
100121e4:	009b      	lsls	r3, r3, #2
100121e6:	18cb      	adds	r3, r1, r3
100121e8:	3318      	adds	r3, #24
100121ea:	1c02      	adds	r2, r0, #0
100121ec:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
100121ee:	2300      	movs	r3, #0
100121f0:	e02d      	b.n	1001224e <ble_encryption_status_change_handler+0x14e>
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
100121f2:	4b1a      	ldr	r3, [pc, #104]	; (1001225c <ble_encryption_status_change_handler+0x15c>)
100121f4:	0018      	movs	r0, r3
100121f6:	4b1a      	ldr	r3, [pc, #104]	; (10012260 <ble_encryption_status_change_handler+0x160>)
100121f8:	4798      	blx	r3
100121fa:	4b1c      	ldr	r3, [pc, #112]	; (1001226c <ble_encryption_status_change_handler+0x16c>)
100121fc:	0018      	movs	r0, r3
100121fe:	4b1a      	ldr	r3, [pc, #104]	; (10012268 <ble_encryption_status_change_handler+0x168>)
10012200:	4798      	blx	r3
			return AT_BLE_FAILURE;
10012202:	23e2      	movs	r3, #226	; 0xe2
10012204:	e023      	b.n	1001224e <ble_encryption_status_change_handler+0x14e>
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10012206:	230f      	movs	r3, #15
10012208:	18fb      	adds	r3, r7, r3
1001220a:	781a      	ldrb	r2, [r3, #0]
1001220c:	68bb      	ldr	r3, [r7, #8]
1001220e:	7898      	ldrb	r0, [r3, #2]
10012210:	4911      	ldr	r1, [pc, #68]	; (10012258 <ble_encryption_status_change_handler+0x158>)
10012212:	0013      	movs	r3, r2
10012214:	015b      	lsls	r3, r3, #5
10012216:	1a9b      	subs	r3, r3, r2
10012218:	009b      	lsls	r3, r3, #2
1001221a:	18cb      	adds	r3, r1, r3
1001221c:	3318      	adds	r3, #24
1001221e:	1c02      	adds	r2, r0, #0
10012220:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10012222:	230f      	movs	r3, #15
10012224:	18fb      	adds	r3, r7, r3
10012226:	781a      	ldrb	r2, [r3, #0]
10012228:	490b      	ldr	r1, [pc, #44]	; (10012258 <ble_encryption_status_change_handler+0x158>)
1001222a:	205e      	movs	r0, #94	; 0x5e
1001222c:	0013      	movs	r3, r2
1001222e:	015b      	lsls	r3, r3, #5
10012230:	1a9b      	subs	r3, r3, r2
10012232:	009b      	lsls	r3, r3, #2
10012234:	18cb      	adds	r3, r1, r3
10012236:	181b      	adds	r3, r3, r0
10012238:	2207      	movs	r2, #7
1001223a:	701a      	strb	r2, [r3, #0]
		DBG_LOG("Encryption failed");
1001223c:	4b07      	ldr	r3, [pc, #28]	; (1001225c <ble_encryption_status_change_handler+0x15c>)
1001223e:	0018      	movs	r0, r3
10012240:	4b07      	ldr	r3, [pc, #28]	; (10012260 <ble_encryption_status_change_handler+0x160>)
10012242:	4798      	blx	r3
10012244:	4b0a      	ldr	r3, [pc, #40]	; (10012270 <ble_encryption_status_change_handler+0x170>)
10012246:	0018      	movs	r0, r3
10012248:	4b07      	ldr	r3, [pc, #28]	; (10012268 <ble_encryption_status_change_handler+0x168>)
1001224a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1001224c:	23e2      	movs	r3, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1001224e:	0018      	movs	r0, r3
10012250:	46bd      	mov	sp, r7
10012252:	b004      	add	sp, #16
10012254:	bd80      	pop	{r7, pc}
10012256:	46c0      	nop			; (mov r8, r8)
10012258:	1001c3b8 	.word	0x1001c3b8
1001225c:	1001afe4 	.word	0x1001afe4
10012260:	10019095 	.word	0x10019095
10012264:	1001b2c8 	.word	0x1001b2c8
10012268:	10018f75 	.word	0x10018f75
1001226c:	1001b2ec 	.word	0x1001b2ec
10012270:	1001b314 	.word	0x1001b314

10012274 <ble_encryption_request_handler>:

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10012274:	b590      	push	{r4, r7, lr}
10012276:	b085      	sub	sp, #20
10012278:	af00      	add	r7, sp, #0
1001227a:	6078      	str	r0, [r7, #4]
	at_ble_encryption_request_t *enc_req;
	bool key_found = false;
1001227c:	230f      	movs	r3, #15
1001227e:	18fb      	adds	r3, r7, r3
10012280:	2200      	movs	r2, #0
10012282:	701a      	strb	r2, [r3, #0]
	bool device_found = false;
10012284:	230e      	movs	r3, #14
10012286:	18fb      	adds	r3, r7, r3
10012288:	2200      	movs	r2, #0
1001228a:	701a      	strb	r2, [r3, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;
1001228c:	687b      	ldr	r3, [r7, #4]
1001228e:	60bb      	str	r3, [r7, #8]

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10012290:	230d      	movs	r3, #13
10012292:	18fb      	adds	r3, r7, r3
10012294:	2200      	movs	r2, #0
10012296:	701a      	strb	r2, [r3, #0]
10012298:	e043      	b.n	10012322 <ble_encryption_request_handler+0xae>
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1001229a:	230d      	movs	r3, #13
1001229c:	18fb      	adds	r3, r7, r3
1001229e:	781a      	ldrb	r2, [r3, #0]
100122a0:	4964      	ldr	r1, [pc, #400]	; (10012434 <ble_encryption_request_handler+0x1c0>)
100122a2:	0013      	movs	r3, r2
100122a4:	015b      	lsls	r3, r3, #5
100122a6:	1a9b      	subs	r3, r3, r2
100122a8:	009b      	lsls	r3, r3, #2
100122aa:	18cb      	adds	r3, r1, r3
100122ac:	3308      	adds	r3, #8
100122ae:	881a      	ldrh	r2, [r3, #0]
100122b0:	68bb      	ldr	r3, [r7, #8]
100122b2:	881b      	ldrh	r3, [r3, #0]
100122b4:	429a      	cmp	r2, r3
100122b6:	d12d      	bne.n	10012314 <ble_encryption_request_handler+0xa0>
100122b8:	230d      	movs	r3, #13
100122ba:	18fb      	adds	r3, r7, r3
100122bc:	781a      	ldrb	r2, [r3, #0]
100122be:	495d      	ldr	r1, [pc, #372]	; (10012434 <ble_encryption_request_handler+0x1c0>)
100122c0:	205e      	movs	r0, #94	; 0x5e
100122c2:	0013      	movs	r3, r2
100122c4:	015b      	lsls	r3, r3, #5
100122c6:	1a9b      	subs	r3, r3, r2
100122c8:	009b      	lsls	r3, r3, #2
100122ca:	18cb      	adds	r3, r1, r3
100122cc:	181b      	adds	r3, r3, r0
100122ce:	781b      	ldrb	r3, [r3, #0]
100122d0:	2b01      	cmp	r3, #1
100122d2:	d01f      	beq.n	10012314 <ble_encryption_request_handler+0xa0>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
100122d4:	230d      	movs	r3, #13
100122d6:	18fb      	adds	r3, r7, r3
100122d8:	781a      	ldrb	r2, [r3, #0]
100122da:	4956      	ldr	r1, [pc, #344]	; (10012434 <ble_encryption_request_handler+0x1c0>)
100122dc:	205e      	movs	r0, #94	; 0x5e
100122de:	0013      	movs	r3, r2
100122e0:	015b      	lsls	r3, r3, #5
100122e2:	1a9b      	subs	r3, r3, r2
100122e4:	009b      	lsls	r3, r3, #2
100122e6:	18cb      	adds	r3, r1, r3
100122e8:	181b      	adds	r3, r3, r0
100122ea:	781b      	ldrb	r3, [r3, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
100122ec:	2b00      	cmp	r3, #0
100122ee:	d011      	beq.n	10012314 <ble_encryption_request_handler+0xa0>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
100122f0:	230e      	movs	r3, #14
100122f2:	18fb      	adds	r3, r7, r3
100122f4:	2201      	movs	r2, #1
100122f6:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
100122f8:	230d      	movs	r3, #13
100122fa:	18fb      	adds	r3, r7, r3
100122fc:	781a      	ldrb	r2, [r3, #0]
100122fe:	494d      	ldr	r1, [pc, #308]	; (10012434 <ble_encryption_request_handler+0x1c0>)
10012300:	205e      	movs	r0, #94	; 0x5e
10012302:	0013      	movs	r3, r2
10012304:	015b      	lsls	r3, r3, #5
10012306:	1a9b      	subs	r3, r3, r2
10012308:	009b      	lsls	r3, r3, #2
1001230a:	18cb      	adds	r3, r1, r3
1001230c:	181b      	adds	r3, r3, r0
1001230e:	2206      	movs	r2, #6
10012310:	701a      	strb	r2, [r3, #0]
			//DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
			break;
10012312:	e00b      	b.n	1001232c <ble_encryption_request_handler+0xb8>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10012314:	230d      	movs	r3, #13
10012316:	18fb      	adds	r3, r7, r3
10012318:	781a      	ldrb	r2, [r3, #0]
1001231a:	230d      	movs	r3, #13
1001231c:	18fb      	adds	r3, r7, r3
1001231e:	3201      	adds	r2, #1
10012320:	701a      	strb	r2, [r3, #0]
10012322:	230d      	movs	r3, #13
10012324:	18fb      	adds	r3, r7, r3
10012326:	781b      	ldrb	r3, [r3, #0]
10012328:	2b04      	cmp	r3, #4
1001232a:	d9b6      	bls.n	1001229a <ble_encryption_request_handler+0x26>
			//DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
			break;
		}
	}
	
	if (device_found)
1001232c:	230e      	movs	r3, #14
1001232e:	18fb      	adds	r3, r7, r3
10012330:	781b      	ldrb	r3, [r3, #0]
10012332:	2b00      	cmp	r3, #0
10012334:	d027      	beq.n	10012386 <ble_encryption_request_handler+0x112>
	{
		//DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		//DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		//DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		//DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10012336:	230d      	movs	r3, #13
10012338:	18fb      	adds	r3, r7, r3
1001233a:	781a      	ldrb	r2, [r3, #0]
1001233c:	493d      	ldr	r1, [pc, #244]	; (10012434 <ble_encryption_request_handler+0x1c0>)
1001233e:	2070      	movs	r0, #112	; 0x70
10012340:	0013      	movs	r3, r2
10012342:	015b      	lsls	r3, r3, #5
10012344:	1a9b      	subs	r3, r3, r2
10012346:	009b      	lsls	r3, r3, #2
10012348:	18cb      	adds	r3, r1, r3
1001234a:	181b      	adds	r3, r3, r0
1001234c:	881a      	ldrh	r2, [r3, #0]
1001234e:	68bb      	ldr	r3, [r7, #8]
10012350:	885b      	ldrh	r3, [r3, #2]
10012352:	429a      	cmp	r2, r3
10012354:	d117      	bne.n	10012386 <ble_encryption_request_handler+0x112>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10012356:	68bb      	ldr	r3, [r7, #8]
10012358:	1d18      	adds	r0, r3, #4
1001235a:	230d      	movs	r3, #13
1001235c:	18fb      	adds	r3, r7, r3
1001235e:	781a      	ldrb	r2, [r3, #0]
10012360:	0013      	movs	r3, r2
10012362:	015b      	lsls	r3, r3, #5
10012364:	1a9b      	subs	r3, r3, r2
10012366:	009b      	lsls	r3, r3, #2
10012368:	3370      	adds	r3, #112	; 0x70
1001236a:	001a      	movs	r2, r3
1001236c:	4b31      	ldr	r3, [pc, #196]	; (10012434 <ble_encryption_request_handler+0x1c0>)
1001236e:	18d3      	adds	r3, r2, r3
10012370:	3302      	adds	r3, #2
10012372:	2208      	movs	r2, #8
10012374:	0019      	movs	r1, r3
10012376:	4b30      	ldr	r3, [pc, #192]	; (10012438 <ble_encryption_request_handler+0x1c4>)
10012378:	4798      	blx	r3
1001237a:	1e03      	subs	r3, r0, #0
1001237c:	d103      	bne.n	10012386 <ble_encryption_request_handler+0x112>
		{
			key_found = true;
1001237e:	230f      	movs	r3, #15
10012380:	18fb      	adds	r3, r7, r3
10012382:	2201      	movs	r2, #1
10012384:	701a      	strb	r2, [r3, #0]
			//DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10012386:	230f      	movs	r3, #15
10012388:	18fb      	adds	r3, r7, r3
1001238a:	781b      	ldrb	r3, [r3, #0]
1001238c:	2201      	movs	r2, #1
1001238e:	4053      	eors	r3, r2
10012390:	b2db      	uxtb	r3, r3
10012392:	2b00      	cmp	r3, #0
10012394:	d020      	beq.n	100123d8 <ble_encryption_request_handler+0x164>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10012396:	4b29      	ldr	r3, [pc, #164]	; (1001243c <ble_encryption_request_handler+0x1c8>)
10012398:	0018      	movs	r0, r3
1001239a:	4b29      	ldr	r3, [pc, #164]	; (10012440 <ble_encryption_request_handler+0x1cc>)
1001239c:	4798      	blx	r3
1001239e:	4b29      	ldr	r3, [pc, #164]	; (10012444 <ble_encryption_request_handler+0x1d0>)
100123a0:	0018      	movs	r0, r3
100123a2:	4b29      	ldr	r3, [pc, #164]	; (10012448 <ble_encryption_request_handler+0x1d4>)
100123a4:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
100123a6:	4b25      	ldr	r3, [pc, #148]	; (1001243c <ble_encryption_request_handler+0x1c8>)
100123a8:	0018      	movs	r0, r3
100123aa:	4b25      	ldr	r3, [pc, #148]	; (10012440 <ble_encryption_request_handler+0x1cc>)
100123ac:	4798      	blx	r3
100123ae:	4b27      	ldr	r3, [pc, #156]	; (1001244c <ble_encryption_request_handler+0x1d8>)
100123b0:	0018      	movs	r0, r3
100123b2:	4b25      	ldr	r3, [pc, #148]	; (10012448 <ble_encryption_request_handler+0x1d4>)
100123b4:	4798      	blx	r3
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
100123b6:	230d      	movs	r3, #13
100123b8:	18fb      	adds	r3, r7, r3
100123ba:	781a      	ldrb	r2, [r3, #0]
100123bc:	491d      	ldr	r1, [pc, #116]	; (10012434 <ble_encryption_request_handler+0x1c0>)
100123be:	0013      	movs	r3, r2
100123c0:	015b      	lsls	r3, r3, #5
100123c2:	1a9b      	subs	r3, r3, r2
100123c4:	009b      	lsls	r3, r3, #2
100123c6:	18cb      	adds	r3, r1, r3
100123c8:	3308      	adds	r3, #8
100123ca:	881b      	ldrh	r3, [r3, #0]
100123cc:	2105      	movs	r1, #5
100123ce:	0018      	movs	r0, r3
100123d0:	4b1f      	ldr	r3, [pc, #124]	; (10012450 <ble_encryption_request_handler+0x1dc>)
100123d2:	4798      	blx	r3
		return AT_BLE_FAILURE;
100123d4:	23e2      	movs	r3, #226	; 0xe2
100123d6:	e028      	b.n	1001242a <ble_encryption_request_handler+0x1b6>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
100123d8:	68bb      	ldr	r3, [r7, #8]
100123da:	8818      	ldrh	r0, [r3, #0]
100123dc:	230d      	movs	r3, #13
100123de:	18fb      	adds	r3, r7, r3
100123e0:	781a      	ldrb	r2, [r3, #0]
100123e2:	4914      	ldr	r1, [pc, #80]	; (10012434 <ble_encryption_request_handler+0x1c0>)
100123e4:	0013      	movs	r3, r2
100123e6:	015b      	lsls	r3, r3, #5
100123e8:	1a9b      	subs	r3, r3, r2
100123ea:	009b      	lsls	r3, r3, #2
100123ec:	18cb      	adds	r3, r1, r3
100123ee:	3314      	adds	r3, #20
100123f0:	7819      	ldrb	r1, [r3, #0]
100123f2:	230d      	movs	r3, #13
100123f4:	18fb      	adds	r3, r7, r3
100123f6:	781a      	ldrb	r2, [r3, #0]
100123f8:	0013      	movs	r3, r2
100123fa:	015b      	lsls	r3, r3, #5
100123fc:	1a9b      	subs	r3, r3, r2
100123fe:	009b      	lsls	r3, r3, #2
10012400:	3360      	adds	r3, #96	; 0x60
10012402:	001a      	movs	r2, r3
10012404:	4b0b      	ldr	r3, [pc, #44]	; (10012434 <ble_encryption_request_handler+0x1c0>)
10012406:	18d4      	adds	r4, r2, r3
10012408:	230f      	movs	r3, #15
1001240a:	18fb      	adds	r3, r7, r3
1001240c:	781a      	ldrb	r2, [r3, #0]
1001240e:	0023      	movs	r3, r4
10012410:	4c10      	ldr	r4, [pc, #64]	; (10012454 <ble_encryption_request_handler+0x1e0>)
10012412:	47a0      	blx	r4
10012414:	1e03      	subs	r3, r0, #0
10012416:	d007      	beq.n	10012428 <ble_encryption_request_handler+0x1b4>
	{
		DBG_LOG("Encryption Request Reply Failed");
10012418:	4b08      	ldr	r3, [pc, #32]	; (1001243c <ble_encryption_request_handler+0x1c8>)
1001241a:	0018      	movs	r0, r3
1001241c:	4b08      	ldr	r3, [pc, #32]	; (10012440 <ble_encryption_request_handler+0x1cc>)
1001241e:	4798      	blx	r3
10012420:	4b0d      	ldr	r3, [pc, #52]	; (10012458 <ble_encryption_request_handler+0x1e4>)
10012422:	0018      	movs	r0, r3
10012424:	4b08      	ldr	r3, [pc, #32]	; (10012448 <ble_encryption_request_handler+0x1d4>)
10012426:	4798      	blx	r3
	}
	else
	{      
		//DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10012428:	2300      	movs	r3, #0
}
1001242a:	0018      	movs	r0, r3
1001242c:	46bd      	mov	sp, r7
1001242e:	b005      	add	sp, #20
10012430:	bd90      	pop	{r4, r7, pc}
10012432:	46c0      	nop			; (mov r8, r8)
10012434:	1001c3b8 	.word	0x1001c3b8
10012438:	10018dfd 	.word	0x10018dfd
1001243c:	1001afe4 	.word	0x1001afe4
10012440:	10019095 	.word	0x10019095
10012444:	1001b328 	.word	0x1001b328
10012448:	10018f75 	.word	0x10018f75
1001244c:	1001b360 	.word	0x1001b360
10012450:	10014a09 	.word	0x10014a09
10012454:	1001564d 	.word	0x1001564d
10012458:	1001b3b8 	.word	0x1001b3b8

1001245c <ble_event_manager>:

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1001245c:	b580      	push	{r7, lr}
1001245e:	b08c      	sub	sp, #48	; 0x30
10012460:	af00      	add	r7, sp, #0
10012462:	0002      	movs	r2, r0
10012464:	6039      	str	r1, [r7, #0]
10012466:	1dfb      	adds	r3, r7, #7
10012468:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[ble_event_manager]  BLE-Event:%d", events);
1001246a:	4bd0      	ldr	r3, [pc, #832]	; (100127ac <ble_event_manager+0x350>)
1001246c:	0018      	movs	r0, r3
1001246e:	4bd0      	ldr	r3, [pc, #832]	; (100127b0 <ble_event_manager+0x354>)
10012470:	4798      	blx	r3
10012472:	1dfb      	adds	r3, r7, #7
10012474:	781a      	ldrb	r2, [r3, #0]
10012476:	4bcf      	ldr	r3, [pc, #828]	; (100127b4 <ble_event_manager+0x358>)
10012478:	0011      	movs	r1, r2
1001247a:	0018      	movs	r0, r3
1001247c:	4bce      	ldr	r3, [pc, #824]	; (100127b8 <ble_event_manager+0x35c>)
1001247e:	4798      	blx	r3
	switch(events)
10012480:	1dfb      	adds	r3, r7, #7
10012482:	781b      	ldrb	r3, [r3, #0]
10012484:	2b3b      	cmp	r3, #59	; 0x3b
10012486:	d900      	bls.n	1001248a <ble_event_manager+0x2e>
10012488:	e188      	b.n	1001279c <ble_event_manager+0x340>
1001248a:	009a      	lsls	r2, r3, #2
1001248c:	4bcb      	ldr	r3, [pc, #812]	; (100127bc <ble_event_manager+0x360>)
1001248e:	18d3      	adds	r3, r2, r3
10012490:	681b      	ldr	r3, [r3, #0]
10012492:	469f      	mov	pc, r3
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
10012494:	232f      	movs	r3, #47	; 0x2f
10012496:	18fb      	adds	r3, r7, r3
10012498:	2200      	movs	r2, #0
1001249a:	701a      	strb	r2, [r3, #0]
1001249c:	e026      	b.n	100124ec <ble_event_manager+0x90>
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1001249e:	232f      	movs	r3, #47	; 0x2f
100124a0:	18fb      	adds	r3, r7, r3
100124a2:	781a      	ldrb	r2, [r3, #0]
100124a4:	4bc6      	ldr	r3, [pc, #792]	; (100127c0 <ble_event_manager+0x364>)
100124a6:	0092      	lsls	r2, r2, #2
100124a8:	58d3      	ldr	r3, [r2, r3]
100124aa:	2b00      	cmp	r3, #0
100124ac:	d017      	beq.n	100124de <ble_event_manager+0x82>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
100124ae:	232f      	movs	r3, #47	; 0x2f
100124b0:	18fb      	adds	r3, r7, r3
100124b2:	781a      	ldrb	r2, [r3, #0]
100124b4:	4bc2      	ldr	r3, [pc, #776]	; (100127c0 <ble_event_manager+0x364>)
100124b6:	0092      	lsls	r2, r2, #2
100124b8:	58d3      	ldr	r3, [r2, r3]
100124ba:	627b      	str	r3, [r7, #36]	; 0x24
				if(event_cb_fn[events] != NULL)
100124bc:	1dfb      	adds	r3, r7, #7
100124be:	781b      	ldrb	r3, [r3, #0]
100124c0:	009b      	lsls	r3, r3, #2
100124c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100124c4:	18d3      	adds	r3, r2, r3
100124c6:	681b      	ldr	r3, [r3, #0]
100124c8:	2b00      	cmp	r3, #0
100124ca:	d008      	beq.n	100124de <ble_event_manager+0x82>
				{
					event_cb_fn[events](event_params);
100124cc:	1dfb      	adds	r3, r7, #7
100124ce:	781b      	ldrb	r3, [r3, #0]
100124d0:	009b      	lsls	r3, r3, #2
100124d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100124d4:	18d3      	adds	r3, r2, r3
100124d6:	681b      	ldr	r3, [r3, #0]
100124d8:	683a      	ldr	r2, [r7, #0]
100124da:	0010      	movs	r0, r2
100124dc:	4798      	blx	r3
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
100124de:	232f      	movs	r3, #47	; 0x2f
100124e0:	18fb      	adds	r3, r7, r3
100124e2:	781a      	ldrb	r2, [r3, #0]
100124e4:	232f      	movs	r3, #47	; 0x2f
100124e6:	18fb      	adds	r3, r7, r3
100124e8:	3201      	adds	r2, #1
100124ea:	701a      	strb	r2, [r3, #0]
100124ec:	232f      	movs	r3, #47	; 0x2f
100124ee:	18fb      	adds	r3, r7, r3
100124f0:	781b      	ldrb	r3, [r3, #0]
100124f2:	2b04      	cmp	r3, #4
100124f4:	d9d3      	bls.n	1001249e <ble_event_manager+0x42>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
100124f6:	e154      	b.n	100127a2 <ble_event_manager+0x346>
	case AT_BLE_CHARACTERISTIC_WRITE_RESPONSE:
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
100124f8:	1dfb      	adds	r3, r7, #7
100124fa:	1dfa      	adds	r2, r7, #7
100124fc:	7812      	ldrb	r2, [r2, #0]
100124fe:	3a13      	subs	r2, #19
10012500:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
10012502:	232e      	movs	r3, #46	; 0x2e
10012504:	18fb      	adds	r3, r7, r3
10012506:	2200      	movs	r2, #0
10012508:	701a      	strb	r2, [r3, #0]
1001250a:	e026      	b.n	1001255a <ble_event_manager+0xfe>
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1001250c:	232e      	movs	r3, #46	; 0x2e
1001250e:	18fb      	adds	r3, r7, r3
10012510:	781a      	ldrb	r2, [r3, #0]
10012512:	4bac      	ldr	r3, [pc, #688]	; (100127c4 <ble_event_manager+0x368>)
10012514:	0092      	lsls	r2, r2, #2
10012516:	58d3      	ldr	r3, [r2, r3]
10012518:	2b00      	cmp	r3, #0
1001251a:	d017      	beq.n	1001254c <ble_event_manager+0xf0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
1001251c:	232e      	movs	r3, #46	; 0x2e
1001251e:	18fb      	adds	r3, r7, r3
10012520:	781a      	ldrb	r2, [r3, #0]
10012522:	4ba8      	ldr	r3, [pc, #672]	; (100127c4 <ble_event_manager+0x368>)
10012524:	0092      	lsls	r2, r2, #2
10012526:	58d3      	ldr	r3, [r2, r3]
10012528:	623b      	str	r3, [r7, #32]
				if(event_cb_fn[events] != NULL)
1001252a:	1dfb      	adds	r3, r7, #7
1001252c:	781b      	ldrb	r3, [r3, #0]
1001252e:	009b      	lsls	r3, r3, #2
10012530:	6a3a      	ldr	r2, [r7, #32]
10012532:	18d3      	adds	r3, r2, r3
10012534:	681b      	ldr	r3, [r3, #0]
10012536:	2b00      	cmp	r3, #0
10012538:	d008      	beq.n	1001254c <ble_event_manager+0xf0>
				{
					event_cb_fn[events](event_params);
1001253a:	1dfb      	adds	r3, r7, #7
1001253c:	781b      	ldrb	r3, [r3, #0]
1001253e:	009b      	lsls	r3, r3, #2
10012540:	6a3a      	ldr	r2, [r7, #32]
10012542:	18d3      	adds	r3, r2, r3
10012544:	681b      	ldr	r3, [r3, #0]
10012546:	683a      	ldr	r2, [r7, #0]
10012548:	0010      	movs	r0, r2
1001254a:	4798      	blx	r3
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1001254c:	232e      	movs	r3, #46	; 0x2e
1001254e:	18fb      	adds	r3, r7, r3
10012550:	781a      	ldrb	r2, [r3, #0]
10012552:	232e      	movs	r3, #46	; 0x2e
10012554:	18fb      	adds	r3, r7, r3
10012556:	3201      	adds	r2, #1
10012558:	701a      	strb	r2, [r3, #0]
1001255a:	232e      	movs	r3, #46	; 0x2e
1001255c:	18fb      	adds	r3, r7, r3
1001255e:	781b      	ldrb	r3, [r3, #0]
10012560:	2b04      	cmp	r3, #4
10012562:	d9d3      	bls.n	1001250c <ble_event_manager+0xb0>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
10012564:	e11d      	b.n	100127a2 <ble_event_manager+0x346>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
10012566:	1dfb      	adds	r3, r7, #7
10012568:	1dfa      	adds	r2, r7, #7
1001256a:	7812      	ldrb	r2, [r2, #0]
1001256c:	3a1d      	subs	r2, #29
1001256e:	701a      	strb	r2, [r3, #0]
		//DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
10012570:	232d      	movs	r3, #45	; 0x2d
10012572:	18fb      	adds	r3, r7, r3
10012574:	2200      	movs	r2, #0
10012576:	701a      	strb	r2, [r3, #0]
10012578:	e026      	b.n	100125c8 <ble_event_manager+0x16c>
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1001257a:	232d      	movs	r3, #45	; 0x2d
1001257c:	18fb      	adds	r3, r7, r3
1001257e:	781a      	ldrb	r2, [r3, #0]
10012580:	4b91      	ldr	r3, [pc, #580]	; (100127c8 <ble_event_manager+0x36c>)
10012582:	0092      	lsls	r2, r2, #2
10012584:	58d3      	ldr	r3, [r2, r3]
10012586:	2b00      	cmp	r3, #0
10012588:	d017      	beq.n	100125ba <ble_event_manager+0x15e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
1001258a:	232d      	movs	r3, #45	; 0x2d
1001258c:	18fb      	adds	r3, r7, r3
1001258e:	781a      	ldrb	r2, [r3, #0]
10012590:	4b8d      	ldr	r3, [pc, #564]	; (100127c8 <ble_event_manager+0x36c>)
10012592:	0092      	lsls	r2, r2, #2
10012594:	58d3      	ldr	r3, [r2, r3]
10012596:	61fb      	str	r3, [r7, #28]
				if(event_cb_fn[events] != NULL)
10012598:	1dfb      	adds	r3, r7, #7
1001259a:	781b      	ldrb	r3, [r3, #0]
1001259c:	009b      	lsls	r3, r3, #2
1001259e:	69fa      	ldr	r2, [r7, #28]
100125a0:	18d3      	adds	r3, r2, r3
100125a2:	681b      	ldr	r3, [r3, #0]
100125a4:	2b00      	cmp	r3, #0
100125a6:	d008      	beq.n	100125ba <ble_event_manager+0x15e>
				{
					event_cb_fn[events](event_params);
100125a8:	1dfb      	adds	r3, r7, #7
100125aa:	781b      	ldrb	r3, [r3, #0]
100125ac:	009b      	lsls	r3, r3, #2
100125ae:	69fa      	ldr	r2, [r7, #28]
100125b0:	18d3      	adds	r3, r2, r3
100125b2:	681b      	ldr	r3, [r3, #0]
100125b4:	683a      	ldr	r2, [r7, #0]
100125b6:	0010      	movs	r0, r2
100125b8:	4798      	blx	r3
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		//DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
100125ba:	232d      	movs	r3, #45	; 0x2d
100125bc:	18fb      	adds	r3, r7, r3
100125be:	781a      	ldrb	r2, [r3, #0]
100125c0:	232d      	movs	r3, #45	; 0x2d
100125c2:	18fb      	adds	r3, r7, r3
100125c4:	3201      	adds	r2, #1
100125c6:	701a      	strb	r2, [r3, #0]
100125c8:	232d      	movs	r3, #45	; 0x2d
100125ca:	18fb      	adds	r3, r7, r3
100125cc:	781b      	ldrb	r3, [r3, #0]
100125ce:	2b04      	cmp	r3, #4
100125d0:	d9d3      	bls.n	1001257a <ble_event_manager+0x11e>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
100125d2:	e0e6      	b.n	100127a2 <ble_event_manager+0x346>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
100125d4:	1dfb      	adds	r3, r7, #7
100125d6:	1dfa      	adds	r2, r7, #7
100125d8:	7812      	ldrb	r2, [r2, #0]
100125da:	3a27      	subs	r2, #39	; 0x27
100125dc:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
100125de:	232c      	movs	r3, #44	; 0x2c
100125e0:	18fb      	adds	r3, r7, r3
100125e2:	2200      	movs	r2, #0
100125e4:	701a      	strb	r2, [r3, #0]
100125e6:	e026      	b.n	10012636 <ble_event_manager+0x1da>
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
100125e8:	232c      	movs	r3, #44	; 0x2c
100125ea:	18fb      	adds	r3, r7, r3
100125ec:	781a      	ldrb	r2, [r3, #0]
100125ee:	4b77      	ldr	r3, [pc, #476]	; (100127cc <ble_event_manager+0x370>)
100125f0:	0092      	lsls	r2, r2, #2
100125f2:	58d3      	ldr	r3, [r2, r3]
100125f4:	2b00      	cmp	r3, #0
100125f6:	d017      	beq.n	10012628 <ble_event_manager+0x1cc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
100125f8:	232c      	movs	r3, #44	; 0x2c
100125fa:	18fb      	adds	r3, r7, r3
100125fc:	781a      	ldrb	r2, [r3, #0]
100125fe:	4b73      	ldr	r3, [pc, #460]	; (100127cc <ble_event_manager+0x370>)
10012600:	0092      	lsls	r2, r2, #2
10012602:	58d3      	ldr	r3, [r2, r3]
10012604:	61bb      	str	r3, [r7, #24]
				if(event_cb_fn[events] != NULL)
10012606:	1dfb      	adds	r3, r7, #7
10012608:	781b      	ldrb	r3, [r3, #0]
1001260a:	009b      	lsls	r3, r3, #2
1001260c:	69ba      	ldr	r2, [r7, #24]
1001260e:	18d3      	adds	r3, r2, r3
10012610:	681b      	ldr	r3, [r3, #0]
10012612:	2b00      	cmp	r3, #0
10012614:	d008      	beq.n	10012628 <ble_event_manager+0x1cc>
				{
					event_cb_fn[events](event_params);
10012616:	1dfb      	adds	r3, r7, #7
10012618:	781b      	ldrb	r3, [r3, #0]
1001261a:	009b      	lsls	r3, r3, #2
1001261c:	69ba      	ldr	r2, [r7, #24]
1001261e:	18d3      	adds	r3, r2, r3
10012620:	681b      	ldr	r3, [r3, #0]
10012622:	683a      	ldr	r2, [r7, #0]
10012624:	0010      	movs	r0, r2
10012626:	4798      	blx	r3
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
10012628:	232c      	movs	r3, #44	; 0x2c
1001262a:	18fb      	adds	r3, r7, r3
1001262c:	781a      	ldrb	r2, [r3, #0]
1001262e:	232c      	movs	r3, #44	; 0x2c
10012630:	18fb      	adds	r3, r7, r3
10012632:	3201      	adds	r2, #1
10012634:	701a      	strb	r2, [r3, #0]
10012636:	232c      	movs	r3, #44	; 0x2c
10012638:	18fb      	adds	r3, r7, r3
1001263a:	781b      	ldrb	r3, [r3, #0]
1001263c:	2b00      	cmp	r3, #0
1001263e:	d0d3      	beq.n	100125e8 <ble_event_manager+0x18c>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
10012640:	e0af      	b.n	100127a2 <ble_event_manager+0x346>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
10012642:	1dfb      	adds	r3, r7, #7
10012644:	1dfa      	adds	r2, r7, #7
10012646:	7812      	ldrb	r2, [r2, #0]
10012648:	3a2d      	subs	r2, #45	; 0x2d
1001264a:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1001264c:	232b      	movs	r3, #43	; 0x2b
1001264e:	18fb      	adds	r3, r7, r3
10012650:	2200      	movs	r2, #0
10012652:	701a      	strb	r2, [r3, #0]
10012654:	e026      	b.n	100126a4 <ble_event_manager+0x248>
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
10012656:	232b      	movs	r3, #43	; 0x2b
10012658:	18fb      	adds	r3, r7, r3
1001265a:	781a      	ldrb	r2, [r3, #0]
1001265c:	4b5c      	ldr	r3, [pc, #368]	; (100127d0 <ble_event_manager+0x374>)
1001265e:	0092      	lsls	r2, r2, #2
10012660:	58d3      	ldr	r3, [r2, r3]
10012662:	2b00      	cmp	r3, #0
10012664:	d017      	beq.n	10012696 <ble_event_manager+0x23a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
10012666:	232b      	movs	r3, #43	; 0x2b
10012668:	18fb      	adds	r3, r7, r3
1001266a:	781a      	ldrb	r2, [r3, #0]
1001266c:	4b58      	ldr	r3, [pc, #352]	; (100127d0 <ble_event_manager+0x374>)
1001266e:	0092      	lsls	r2, r2, #2
10012670:	58d3      	ldr	r3, [r2, r3]
10012672:	617b      	str	r3, [r7, #20]
				if(event_cb_fn[events] != NULL)
10012674:	1dfb      	adds	r3, r7, #7
10012676:	781b      	ldrb	r3, [r3, #0]
10012678:	009b      	lsls	r3, r3, #2
1001267a:	697a      	ldr	r2, [r7, #20]
1001267c:	18d3      	adds	r3, r2, r3
1001267e:	681b      	ldr	r3, [r3, #0]
10012680:	2b00      	cmp	r3, #0
10012682:	d008      	beq.n	10012696 <ble_event_manager+0x23a>
				{
					event_cb_fn[events](event_params);
10012684:	1dfb      	adds	r3, r7, #7
10012686:	781b      	ldrb	r3, [r3, #0]
10012688:	009b      	lsls	r3, r3, #2
1001268a:	697a      	ldr	r2, [r7, #20]
1001268c:	18d3      	adds	r3, r2, r3
1001268e:	681b      	ldr	r3, [r3, #0]
10012690:	683a      	ldr	r2, [r7, #0]
10012692:	0010      	movs	r0, r2
10012694:	4798      	blx	r3
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
10012696:	232b      	movs	r3, #43	; 0x2b
10012698:	18fb      	adds	r3, r7, r3
1001269a:	781a      	ldrb	r2, [r3, #0]
1001269c:	232b      	movs	r3, #43	; 0x2b
1001269e:	18fb      	adds	r3, r7, r3
100126a0:	3201      	adds	r2, #1
100126a2:	701a      	strb	r2, [r3, #0]
100126a4:	232b      	movs	r3, #43	; 0x2b
100126a6:	18fb      	adds	r3, r7, r3
100126a8:	781b      	ldrb	r3, [r3, #0]
100126aa:	2b00      	cmp	r3, #0
100126ac:	d0d3      	beq.n	10012656 <ble_event_manager+0x1fa>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
100126ae:	e078      	b.n	100127a2 <ble_event_manager+0x346>
	
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
100126b0:	1dfb      	adds	r3, r7, #7
100126b2:	1dfa      	adds	r2, r7, #7
100126b4:	7812      	ldrb	r2, [r2, #0]
100126b6:	3a36      	subs	r2, #54	; 0x36
100126b8:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
100126ba:	232a      	movs	r3, #42	; 0x2a
100126bc:	18fb      	adds	r3, r7, r3
100126be:	2200      	movs	r2, #0
100126c0:	701a      	strb	r2, [r3, #0]
100126c2:	e026      	b.n	10012712 <ble_event_manager+0x2b6>
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
100126c4:	232a      	movs	r3, #42	; 0x2a
100126c6:	18fb      	adds	r3, r7, r3
100126c8:	781a      	ldrb	r2, [r3, #0]
100126ca:	4b42      	ldr	r3, [pc, #264]	; (100127d4 <ble_event_manager+0x378>)
100126cc:	0092      	lsls	r2, r2, #2
100126ce:	58d3      	ldr	r3, [r2, r3]
100126d0:	2b00      	cmp	r3, #0
100126d2:	d017      	beq.n	10012704 <ble_event_manager+0x2a8>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
100126d4:	232a      	movs	r3, #42	; 0x2a
100126d6:	18fb      	adds	r3, r7, r3
100126d8:	781a      	ldrb	r2, [r3, #0]
100126da:	4b3e      	ldr	r3, [pc, #248]	; (100127d4 <ble_event_manager+0x378>)
100126dc:	0092      	lsls	r2, r2, #2
100126de:	58d3      	ldr	r3, [r2, r3]
100126e0:	613b      	str	r3, [r7, #16]
				if(event_cb_fn[events] != NULL)
100126e2:	1dfb      	adds	r3, r7, #7
100126e4:	781b      	ldrb	r3, [r3, #0]
100126e6:	009b      	lsls	r3, r3, #2
100126e8:	693a      	ldr	r2, [r7, #16]
100126ea:	18d3      	adds	r3, r2, r3
100126ec:	681b      	ldr	r3, [r3, #0]
100126ee:	2b00      	cmp	r3, #0
100126f0:	d008      	beq.n	10012704 <ble_event_manager+0x2a8>
				{
					event_cb_fn[events](event_params);
100126f2:	1dfb      	adds	r3, r7, #7
100126f4:	781b      	ldrb	r3, [r3, #0]
100126f6:	009b      	lsls	r3, r3, #2
100126f8:	693a      	ldr	r2, [r7, #16]
100126fa:	18d3      	adds	r3, r2, r3
100126fc:	681b      	ldr	r3, [r3, #0]
100126fe:	683a      	ldr	r2, [r7, #0]
10012700:	0010      	movs	r0, r2
10012702:	4798      	blx	r3
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
10012704:	232a      	movs	r3, #42	; 0x2a
10012706:	18fb      	adds	r3, r7, r3
10012708:	781a      	ldrb	r2, [r3, #0]
1001270a:	232a      	movs	r3, #42	; 0x2a
1001270c:	18fb      	adds	r3, r7, r3
1001270e:	3201      	adds	r2, #1
10012710:	701a      	strb	r2, [r3, #0]
10012712:	232a      	movs	r3, #42	; 0x2a
10012714:	18fb      	adds	r3, r7, r3
10012716:	781b      	ldrb	r3, [r3, #0]
10012718:	2b04      	cmp	r3, #4
1001271a:	d9d3      	bls.n	100126c4 <ble_event_manager+0x268>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1001271c:	e041      	b.n	100127a2 <ble_event_manager+0x346>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1001271e:	1dfb      	adds	r3, r7, #7
10012720:	1dfa      	adds	r2, r7, #7
10012722:	7812      	ldrb	r2, [r2, #0]
10012724:	3a38      	subs	r2, #56	; 0x38
10012726:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
10012728:	2329      	movs	r3, #41	; 0x29
1001272a:	18fb      	adds	r3, r7, r3
1001272c:	2200      	movs	r2, #0
1001272e:	701a      	strb	r2, [r3, #0]
10012730:	e026      	b.n	10012780 <ble_event_manager+0x324>
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
10012732:	2329      	movs	r3, #41	; 0x29
10012734:	18fb      	adds	r3, r7, r3
10012736:	781a      	ldrb	r2, [r3, #0]
10012738:	4b27      	ldr	r3, [pc, #156]	; (100127d8 <ble_event_manager+0x37c>)
1001273a:	0092      	lsls	r2, r2, #2
1001273c:	58d3      	ldr	r3, [r2, r3]
1001273e:	2b00      	cmp	r3, #0
10012740:	d017      	beq.n	10012772 <ble_event_manager+0x316>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
10012742:	2329      	movs	r3, #41	; 0x29
10012744:	18fb      	adds	r3, r7, r3
10012746:	781a      	ldrb	r2, [r3, #0]
10012748:	4b23      	ldr	r3, [pc, #140]	; (100127d8 <ble_event_manager+0x37c>)
1001274a:	0092      	lsls	r2, r2, #2
1001274c:	58d3      	ldr	r3, [r2, r3]
1001274e:	60fb      	str	r3, [r7, #12]
				if(event_cb_fn[events] != NULL)
10012750:	1dfb      	adds	r3, r7, #7
10012752:	781b      	ldrb	r3, [r3, #0]
10012754:	009b      	lsls	r3, r3, #2
10012756:	68fa      	ldr	r2, [r7, #12]
10012758:	18d3      	adds	r3, r2, r3
1001275a:	681b      	ldr	r3, [r3, #0]
1001275c:	2b00      	cmp	r3, #0
1001275e:	d008      	beq.n	10012772 <ble_event_manager+0x316>
				{
					event_cb_fn[events](event_params);
10012760:	1dfb      	adds	r3, r7, #7
10012762:	781b      	ldrb	r3, [r3, #0]
10012764:	009b      	lsls	r3, r3, #2
10012766:	68fa      	ldr	r2, [r7, #12]
10012768:	18d3      	adds	r3, r2, r3
1001276a:	681b      	ldr	r3, [r3, #0]
1001276c:	683a      	ldr	r2, [r7, #0]
1001276e:	0010      	movs	r0, r2
10012770:	4798      	blx	r3
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
10012772:	2329      	movs	r3, #41	; 0x29
10012774:	18fb      	adds	r3, r7, r3
10012776:	781a      	ldrb	r2, [r3, #0]
10012778:	2329      	movs	r3, #41	; 0x29
1001277a:	18fb      	adds	r3, r7, r3
1001277c:	3201      	adds	r2, #1
1001277e:	701a      	strb	r2, [r3, #0]
10012780:	2329      	movs	r3, #41	; 0x29
10012782:	18fb      	adds	r3, r7, r3
10012784:	781b      	ldrb	r3, [r3, #0]
10012786:	2b00      	cmp	r3, #0
10012788:	d0d3      	beq.n	10012732 <ble_event_manager+0x2d6>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1001278a:	e00a      	b.n	100127a2 <ble_event_manager+0x346>

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1001278c:	4b13      	ldr	r3, [pc, #76]	; (100127dc <ble_event_manager+0x380>)
1001278e:	681b      	ldr	r3, [r3, #0]
10012790:	2b00      	cmp	r3, #0
10012792:	d005      	beq.n	100127a0 <ble_event_manager+0x344>
			ble_user_event_cb();
10012794:	4b11      	ldr	r3, [pc, #68]	; (100127dc <ble_event_manager+0x380>)
10012796:	681b      	ldr	r3, [r3, #0]
10012798:	4798      	blx	r3
		}
	}
	break;
1001279a:	e001      	b.n	100127a0 <ble_event_manager+0x344>
	default:
	{
		//DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		//DBG_LOG("\r\n");
	}
	break;		
1001279c:	46c0      	nop			; (mov r8, r8)
1001279e:	e000      	b.n	100127a2 <ble_event_manager+0x346>
	{
		if (ble_user_event_cb) {
			ble_user_event_cb();
		}
	}
	break;
100127a0:	46c0      	nop			; (mov r8, r8)
		//DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		//DBG_LOG("\r\n");
	}
	break;		
	}
}
100127a2:	46c0      	nop			; (mov r8, r8)
100127a4:	46bd      	mov	sp, r7
100127a6:	b00c      	add	sp, #48	; 0x30
100127a8:	bd80      	pop	{r7, pc}
100127aa:	46c0      	nop			; (mov r8, r8)
100127ac:	1001afe4 	.word	0x1001afe4
100127b0:	10019095 	.word	0x10019095
100127b4:	1001b3d8 	.word	0x1001b3d8
100127b8:	10018f75 	.word	0x10018f75
100127bc:	1001b56c 	.word	0x1001b56c
100127c0:	1001c63c 	.word	0x1001c63c
100127c4:	1001c650 	.word	0x1001c650
100127c8:	1001c3a4 	.word	0x1001c3a4
100127cc:	1001c688 	.word	0x1001c688
100127d0:	1001c3a0 	.word	0x1001c3a0
100127d4:	1001c628 	.word	0x1001c628
100127d8:	1001cbcc 	.word	0x1001cbcc
100127dc:	1001be7c 	.word	0x1001be7c

100127e0 <ble_advertisement_data_set>:

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
100127e0:	b590      	push	{r4, r7, lr}
100127e2:	b097      	sub	sp, #92	; 0x5c
100127e4:	af00      	add	r7, sp, #0
	uint8_t adv_buf[AT_BLE_ADV_MAX_SIZE];
	uint8_t scn_resp[AT_BLE_ADV_MAX_SIZE];
	adv_element_container_t adv_data_element = {0, NULL};
100127e6:	230c      	movs	r3, #12
100127e8:	18fb      	adds	r3, r7, r3
100127ea:	2200      	movs	r2, #0
100127ec:	701a      	strb	r2, [r3, #0]
100127ee:	230c      	movs	r3, #12
100127f0:	18fb      	adds	r3, r7, r3
100127f2:	2200      	movs	r2, #0
100127f4:	605a      	str	r2, [r3, #4]
	scan_resp_element_t scan_resp_data_element = {0, NULL};
100127f6:	1d3b      	adds	r3, r7, #4
100127f8:	2200      	movs	r2, #0
100127fa:	701a      	strb	r2, [r3, #0]
100127fc:	1d3b      	adds	r3, r7, #4
100127fe:	2200      	movs	r2, #0
10012800:	605a      	str	r2, [r3, #4]
	adv_data_element.adv_ptr = adv_buf;
10012802:	230c      	movs	r3, #12
10012804:	18fb      	adds	r3, r7, r3
10012806:	2234      	movs	r2, #52	; 0x34
10012808:	18ba      	adds	r2, r7, r2
1001280a:	605a      	str	r2, [r3, #4]
	scan_resp_data_element.scn_ptr = scn_resp;
1001280c:	1d3b      	adds	r3, r7, #4
1001280e:	2214      	movs	r2, #20
10012810:	18ba      	adds	r2, r7, r2
10012812:	605a      	str	r2, [r3, #4]
	at_ble_status_t status = AT_BLE_SUCCESS;
10012814:	2356      	movs	r3, #86	; 0x56
10012816:	18fb      	adds	r3, r7, r3
10012818:	2200      	movs	r2, #0
1001281a:	701a      	strb	r2, [r3, #0]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	DBG_LOG_DEV("BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE");
1001281c:	4b83      	ldr	r3, [pc, #524]	; (10012a2c <ble_advertisement_data_set+0x24c>)
1001281e:	0018      	movs	r0, r3
10012820:	4b83      	ldr	r3, [pc, #524]	; (10012a30 <ble_advertisement_data_set+0x250>)
10012822:	4798      	blx	r3
10012824:	4b83      	ldr	r3, [pc, #524]	; (10012a34 <ble_advertisement_data_set+0x254>)
10012826:	0018      	movs	r0, r3
10012828:	4b83      	ldr	r3, [pc, #524]	; (10012a38 <ble_advertisement_data_set+0x258>)
1001282a:	4798      	blx	r3
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
1001282c:	230c      	movs	r3, #12
1001282e:	18fb      	adds	r3, r7, r3
10012830:	781b      	ldrb	r3, [r3, #0]
10012832:	2b11      	cmp	r3, #17
10012834:	d83b      	bhi.n	100128ae <ble_advertisement_data_set+0xce>
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
10012836:	230c      	movs	r3, #12
10012838:	18fb      	adds	r3, r7, r3
1001283a:	781b      	ldrb	r3, [r3, #0]
1001283c:	1c5a      	adds	r2, r3, #1
1001283e:	b2d1      	uxtb	r1, r2
10012840:	220c      	movs	r2, #12
10012842:	18ba      	adds	r2, r7, r2
10012844:	7011      	strb	r1, [r2, #0]
10012846:	001a      	movs	r2, r3
10012848:	2334      	movs	r3, #52	; 0x34
1001284a:	18fb      	adds	r3, r7, r3
1001284c:	210a      	movs	r1, #10
1001284e:	5499      	strb	r1, [r3, r2]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
10012850:	230c      	movs	r3, #12
10012852:	18fb      	adds	r3, r7, r3
10012854:	781b      	ldrb	r3, [r3, #0]
10012856:	1c5a      	adds	r2, r3, #1
10012858:	b2d1      	uxtb	r1, r2
1001285a:	220c      	movs	r2, #12
1001285c:	18ba      	adds	r2, r7, r2
1001285e:	7011      	strb	r1, [r2, #0]
10012860:	001a      	movs	r2, r3
10012862:	2334      	movs	r3, #52	; 0x34
10012864:	18fb      	adds	r3, r7, r3
10012866:	2109      	movs	r1, #9
10012868:	5499      	strb	r1, [r3, r2]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1001286a:	230c      	movs	r3, #12
1001286c:	18fb      	adds	r3, r7, r3
1001286e:	781b      	ldrb	r3, [r3, #0]
10012870:	001a      	movs	r2, r3
10012872:	2334      	movs	r3, #52	; 0x34
10012874:	18fb      	adds	r3, r7, r3
10012876:	189b      	adds	r3, r3, r2
10012878:	4970      	ldr	r1, [pc, #448]	; (10012a3c <ble_advertisement_data_set+0x25c>)
1001287a:	2209      	movs	r2, #9
1001287c:	0018      	movs	r0, r3
1001287e:	4b70      	ldr	r3, [pc, #448]	; (10012a40 <ble_advertisement_data_set+0x260>)
10012880:	4798      	blx	r3
		adv_data_element.len += BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH;
10012882:	230c      	movs	r3, #12
10012884:	18fb      	adds	r3, r7, r3
10012886:	781b      	ldrb	r3, [r3, #0]
10012888:	3309      	adds	r3, #9
1001288a:	b2da      	uxtb	r2, r3
1001288c:	230c      	movs	r3, #12
1001288e:	18fb      	adds	r3, r7, r3
10012890:	701a      	strb	r2, [r3, #0]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	DBG_LOG_DEV("BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE");
10012892:	4b66      	ldr	r3, [pc, #408]	; (10012a2c <ble_advertisement_data_set+0x24c>)
10012894:	0018      	movs	r0, r3
10012896:	4b66      	ldr	r3, [pc, #408]	; (10012a30 <ble_advertisement_data_set+0x250>)
10012898:	4798      	blx	r3
1001289a:	4b6a      	ldr	r3, [pc, #424]	; (10012a44 <ble_advertisement_data_set+0x264>)
1001289c:	0018      	movs	r0, r3
1001289e:	4b66      	ldr	r3, [pc, #408]	; (10012a38 <ble_advertisement_data_set+0x258>)
100128a0:	4798      	blx	r3
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
100128a2:	230c      	movs	r3, #12
100128a4:	18fb      	adds	r3, r7, r3
100128a6:	781b      	ldrb	r3, [r3, #0]
100128a8:	2b12      	cmp	r3, #18
100128aa:	d839      	bhi.n	10012920 <ble_advertisement_data_set+0x140>
100128ac:	e009      	b.n	100128c2 <ble_advertisement_data_set+0xe2>
	}
	#else
	if(false){}
	#endif
	else {
		DBG_LOG_ADV("Failed to add Complete local name");
100128ae:	4b66      	ldr	r3, [pc, #408]	; (10012a48 <ble_advertisement_data_set+0x268>)
100128b0:	0018      	movs	r0, r3
100128b2:	4b61      	ldr	r3, [pc, #388]	; (10012a38 <ble_advertisement_data_set+0x258>)
100128b4:	4798      	blx	r3
100128b6:	4b65      	ldr	r3, [pc, #404]	; (10012a4c <ble_advertisement_data_set+0x26c>)
100128b8:	0018      	movs	r0, r3
100128ba:	4b5f      	ldr	r3, [pc, #380]	; (10012a38 <ble_advertisement_data_set+0x258>)
100128bc:	4798      	blx	r3
		return AT_BLE_GAP_INVALID_PARAM;
100128be:	2340      	movs	r3, #64	; 0x40
100128c0:	e0b0      	b.n	10012a24 <ble_advertisement_data_set+0x244>
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	DBG_LOG_DEV("BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE");
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
100128c2:	230c      	movs	r3, #12
100128c4:	18fb      	adds	r3, r7, r3
100128c6:	781b      	ldrb	r3, [r3, #0]
100128c8:	1c5a      	adds	r2, r3, #1
100128ca:	b2d1      	uxtb	r1, r2
100128cc:	220c      	movs	r2, #12
100128ce:	18ba      	adds	r2, r7, r2
100128d0:	7011      	strb	r1, [r2, #0]
100128d2:	001a      	movs	r2, r3
100128d4:	2334      	movs	r3, #52	; 0x34
100128d6:	18fb      	adds	r3, r7, r3
100128d8:	2109      	movs	r1, #9
100128da:	5499      	strb	r1, [r3, r2]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
100128dc:	230c      	movs	r3, #12
100128de:	18fb      	adds	r3, r7, r3
100128e0:	781b      	ldrb	r3, [r3, #0]
100128e2:	1c5a      	adds	r2, r3, #1
100128e4:	b2d1      	uxtb	r1, r2
100128e6:	220c      	movs	r2, #12
100128e8:	18ba      	adds	r2, r7, r2
100128ea:	7011      	strb	r1, [r2, #0]
100128ec:	001a      	movs	r2, r3
100128ee:	2334      	movs	r3, #52	; 0x34
100128f0:	18fb      	adds	r3, r7, r3
100128f2:	21ff      	movs	r1, #255	; 0xff
100128f4:	5499      	strb	r1, [r3, r2]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
100128f6:	230c      	movs	r3, #12
100128f8:	18fb      	adds	r3, r7, r3
100128fa:	781b      	ldrb	r3, [r3, #0]
100128fc:	001a      	movs	r2, r3
100128fe:	2334      	movs	r3, #52	; 0x34
10012900:	18fb      	adds	r3, r7, r3
10012902:	189b      	adds	r3, r3, r2
10012904:	4952      	ldr	r1, [pc, #328]	; (10012a50 <ble_advertisement_data_set+0x270>)
10012906:	2208      	movs	r2, #8
10012908:	0018      	movs	r0, r3
1001290a:	4b4d      	ldr	r3, [pc, #308]	; (10012a40 <ble_advertisement_data_set+0x260>)
1001290c:	4798      	blx	r3
		adv_data_element.len += BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE;
1001290e:	230c      	movs	r3, #12
10012910:	18fb      	adds	r3, r7, r3
10012912:	781b      	ldrb	r3, [r3, #0]
10012914:	3308      	adds	r3, #8
10012916:	b2da      	uxtb	r2, r3
10012918:	230c      	movs	r3, #12
1001291a:	18fb      	adds	r3, r7, r3
1001291c:	701a      	strb	r2, [r3, #0]
1001291e:	e035      	b.n	1001298c <ble_advertisement_data_set+0x1ac>
	}
	#else
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
10012920:	1d3b      	adds	r3, r7, #4
10012922:	781b      	ldrb	r3, [r3, #0]
10012924:	2b15      	cmp	r3, #21
10012926:	d827      	bhi.n	10012978 <ble_advertisement_data_set+0x198>
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
10012928:	1d3b      	adds	r3, r7, #4
1001292a:	781b      	ldrb	r3, [r3, #0]
1001292c:	1c5a      	adds	r2, r3, #1
1001292e:	b2d1      	uxtb	r1, r2
10012930:	1d3a      	adds	r2, r7, #4
10012932:	7011      	strb	r1, [r2, #0]
10012934:	001a      	movs	r2, r3
10012936:	2314      	movs	r3, #20
10012938:	18fb      	adds	r3, r7, r3
1001293a:	2109      	movs	r1, #9
1001293c:	5499      	strb	r1, [r3, r2]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1001293e:	1d3b      	adds	r3, r7, #4
10012940:	781b      	ldrb	r3, [r3, #0]
10012942:	1c5a      	adds	r2, r3, #1
10012944:	b2d1      	uxtb	r1, r2
10012946:	1d3a      	adds	r2, r7, #4
10012948:	7011      	strb	r1, [r2, #0]
1001294a:	001a      	movs	r2, r3
1001294c:	2314      	movs	r3, #20
1001294e:	18fb      	adds	r3, r7, r3
10012950:	21ff      	movs	r1, #255	; 0xff
10012952:	5499      	strb	r1, [r3, r2]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
10012954:	1d3b      	adds	r3, r7, #4
10012956:	781b      	ldrb	r3, [r3, #0]
10012958:	001a      	movs	r2, r3
1001295a:	2314      	movs	r3, #20
1001295c:	18fb      	adds	r3, r7, r3
1001295e:	189b      	adds	r3, r3, r2
10012960:	493b      	ldr	r1, [pc, #236]	; (10012a50 <ble_advertisement_data_set+0x270>)
10012962:	2208      	movs	r2, #8
10012964:	0018      	movs	r0, r3
10012966:	4b36      	ldr	r3, [pc, #216]	; (10012a40 <ble_advertisement_data_set+0x260>)
10012968:	4798      	blx	r3
		scan_resp_data_element.len += BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE;
1001296a:	1d3b      	adds	r3, r7, #4
1001296c:	781b      	ldrb	r3, [r3, #0]
1001296e:	3308      	adds	r3, #8
10012970:	b2da      	uxtb	r2, r3
10012972:	1d3b      	adds	r3, r7, #4
10012974:	701a      	strb	r2, [r3, #0]
10012976:	e009      	b.n	1001298c <ble_advertisement_data_set+0x1ac>
	}
	#endif
	else {
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
10012978:	4b33      	ldr	r3, [pc, #204]	; (10012a48 <ble_advertisement_data_set+0x268>)
1001297a:	0018      	movs	r0, r3
1001297c:	4b2e      	ldr	r3, [pc, #184]	; (10012a38 <ble_advertisement_data_set+0x258>)
1001297e:	4798      	blx	r3
10012980:	4b34      	ldr	r3, [pc, #208]	; (10012a54 <ble_advertisement_data_set+0x274>)
10012982:	0018      	movs	r0, r3
10012984:	4b2c      	ldr	r3, [pc, #176]	; (10012a38 <ble_advertisement_data_set+0x258>)
10012986:	4798      	blx	r3
		return AT_BLE_GAP_INVALID_PARAM;
10012988:	2340      	movs	r3, #64	; 0x40
1001298a:	e04b      	b.n	10012a24 <ble_advertisement_data_set+0x244>
	}
	#endif
	

	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1001298c:	230c      	movs	r3, #12
1001298e:	18fb      	adds	r3, r7, r3
10012990:	7819      	ldrb	r1, [r3, #0]
10012992:	1d3b      	adds	r3, r7, #4
10012994:	781b      	ldrb	r3, [r3, #0]
10012996:	2214      	movs	r2, #20
10012998:	18ba      	adds	r2, r7, r2
1001299a:	2034      	movs	r0, #52	; 0x34
1001299c:	1838      	adds	r0, r7, r0
1001299e:	4c2e      	ldr	r4, [pc, #184]	; (10012a58 <ble_advertisement_data_set+0x278>)
100129a0:	47a0      	blx	r4
100129a2:	1e03      	subs	r3, r0, #0
100129a4:	d003      	beq.n	100129ae <ble_advertisement_data_set+0x1ce>
							scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		//DBG_LOG("BLE Advertisement data set failed");
		return status;
100129a6:	2356      	movs	r3, #86	; 0x56
100129a8:	18fb      	adds	r3, r7, r3
100129aa:	781b      	ldrb	r3, [r3, #0]
100129ac:	e03a      	b.n	10012a24 <ble_advertisement_data_set+0x244>
	} else {
	    uint8_t i = 0;
100129ae:	2357      	movs	r3, #87	; 0x57
100129b0:	18fb      	adds	r3, r7, r3
100129b2:	2200      	movs	r2, #0
100129b4:	701a      	strb	r2, [r3, #0]
	    DBG_LOG_DEV("Advertisement data: 0x ");
100129b6:	4b1d      	ldr	r3, [pc, #116]	; (10012a2c <ble_advertisement_data_set+0x24c>)
100129b8:	0018      	movs	r0, r3
100129ba:	4b1d      	ldr	r3, [pc, #116]	; (10012a30 <ble_advertisement_data_set+0x250>)
100129bc:	4798      	blx	r3
100129be:	4b27      	ldr	r3, [pc, #156]	; (10012a5c <ble_advertisement_data_set+0x27c>)
100129c0:	0018      	movs	r0, r3
100129c2:	4b1d      	ldr	r3, [pc, #116]	; (10012a38 <ble_advertisement_data_set+0x258>)
100129c4:	4798      	blx	r3
	    for(i = 0; i < adv_data_element.len; i++) {
100129c6:	2357      	movs	r3, #87	; 0x57
100129c8:	18fb      	adds	r3, r7, r3
100129ca:	2200      	movs	r2, #0
100129cc:	701a      	strb	r2, [r3, #0]
100129ce:	e018      	b.n	10012a02 <ble_advertisement_data_set+0x222>
    	    DBG_LOG_CONT_DEV("%02x(%c) ", adv_buf[i], adv_buf[i]);
100129d0:	2357      	movs	r3, #87	; 0x57
100129d2:	18fb      	adds	r3, r7, r3
100129d4:	781b      	ldrb	r3, [r3, #0]
100129d6:	2234      	movs	r2, #52	; 0x34
100129d8:	18ba      	adds	r2, r7, r2
100129da:	5cd3      	ldrb	r3, [r2, r3]
100129dc:	0019      	movs	r1, r3
100129de:	2357      	movs	r3, #87	; 0x57
100129e0:	18fb      	adds	r3, r7, r3
100129e2:	781b      	ldrb	r3, [r3, #0]
100129e4:	2234      	movs	r2, #52	; 0x34
100129e6:	18ba      	adds	r2, r7, r2
100129e8:	5cd3      	ldrb	r3, [r2, r3]
100129ea:	001a      	movs	r2, r3
100129ec:	4b1c      	ldr	r3, [pc, #112]	; (10012a60 <ble_advertisement_data_set+0x280>)
100129ee:	0018      	movs	r0, r3
100129f0:	4b11      	ldr	r3, [pc, #68]	; (10012a38 <ble_advertisement_data_set+0x258>)
100129f2:	4798      	blx	r3
		//DBG_LOG("BLE Advertisement data set failed");
		return status;
	} else {
	    uint8_t i = 0;
	    DBG_LOG_DEV("Advertisement data: 0x ");
	    for(i = 0; i < adv_data_element.len; i++) {
100129f4:	2357      	movs	r3, #87	; 0x57
100129f6:	18fb      	adds	r3, r7, r3
100129f8:	781a      	ldrb	r2, [r3, #0]
100129fa:	2357      	movs	r3, #87	; 0x57
100129fc:	18fb      	adds	r3, r7, r3
100129fe:	3201      	adds	r2, #1
10012a00:	701a      	strb	r2, [r3, #0]
10012a02:	230c      	movs	r3, #12
10012a04:	18fb      	adds	r3, r7, r3
10012a06:	781b      	ldrb	r3, [r3, #0]
10012a08:	2257      	movs	r2, #87	; 0x57
10012a0a:	18ba      	adds	r2, r7, r2
10012a0c:	7812      	ldrb	r2, [r2, #0]
10012a0e:	429a      	cmp	r2, r3
10012a10:	d3de      	bcc.n	100129d0 <ble_advertisement_data_set+0x1f0>
    	    DBG_LOG_CONT_DEV("%02x(%c) ", adv_buf[i], adv_buf[i]);
	    }
	    DBG_LOG_DEV("BLE Advertisement data set success");
10012a12:	4b06      	ldr	r3, [pc, #24]	; (10012a2c <ble_advertisement_data_set+0x24c>)
10012a14:	0018      	movs	r0, r3
10012a16:	4b06      	ldr	r3, [pc, #24]	; (10012a30 <ble_advertisement_data_set+0x250>)
10012a18:	4798      	blx	r3
10012a1a:	4b12      	ldr	r3, [pc, #72]	; (10012a64 <ble_advertisement_data_set+0x284>)
10012a1c:	0018      	movs	r0, r3
10012a1e:	4b06      	ldr	r3, [pc, #24]	; (10012a38 <ble_advertisement_data_set+0x258>)
10012a20:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10012a22:	2300      	movs	r3, #0
	}
}
10012a24:	0018      	movs	r0, r3
10012a26:	46bd      	mov	sp, r7
10012a28:	b017      	add	sp, #92	; 0x5c
10012a2a:	bd90      	pop	{r4, r7, pc}
10012a2c:	1001afe4 	.word	0x1001afe4
10012a30:	10019095 	.word	0x10019095
10012a34:	1001b3fc 	.word	0x1001b3fc
10012a38:	10018f75 	.word	0x10018f75
10012a3c:	1001afd0 	.word	0x1001afd0
10012a40:	10018e1b 	.word	0x10018e1b
10012a44:	1001b480 	.word	0x1001b480
10012a48:	1001b450 	.word	0x1001b450
10012a4c:	1001b45c 	.word	0x1001b45c
10012a50:	1001b4b0 	.word	0x1001b4b0
10012a54:	1001b4bc 	.word	0x1001b4bc
10012a58:	10014829 	.word	0x10014829
10012a5c:	1001b4e8 	.word	0x1001b4e8
10012a60:	1001b500 	.word	0x1001b500
10012a64:	1001b50c 	.word	0x1001b50c

10012a68 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
10012a68:	b580      	push	{r7, lr}
10012a6a:	b082      	sub	sp, #8
10012a6c:	af00      	add	r7, sp, #0
10012a6e:	6078      	str	r0, [r7, #4]
	ble_user_event_cb = cb_fn;
10012a70:	4b03      	ldr	r3, [pc, #12]	; (10012a80 <register_ble_user_event_cb+0x18>)
10012a72:	687a      	ldr	r2, [r7, #4]
10012a74:	601a      	str	r2, [r3, #0]
}
10012a76:	46c0      	nop			; (mov r8, r8)
10012a78:	46bd      	mov	sp, r7
10012a7a:	b002      	add	sp, #8
10012a7c:	bd80      	pop	{r7, pc}
10012a7e:	46c0      	nop			; (mov r8, r8)
10012a80:	1001be7c 	.word	0x1001be7c

10012a84 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
10012a84:	b580      	push	{r7, lr}
10012a86:	b084      	sub	sp, #16
10012a88:	af00      	add	r7, sp, #0
10012a8a:	60f8      	str	r0, [r7, #12]
10012a8c:	60b9      	str	r1, [r7, #8]
10012a8e:	607a      	str	r2, [r7, #4]
	if (uart_init(module, hw, config) == STATUS_OK) {
10012a90:	687a      	ldr	r2, [r7, #4]
10012a92:	68b9      	ldr	r1, [r7, #8]
10012a94:	68fb      	ldr	r3, [r7, #12]
10012a96:	0018      	movs	r0, r3
10012a98:	4b05      	ldr	r3, [pc, #20]	; (10012ab0 <usart_serial_init+0x2c>)
10012a9a:	4798      	blx	r3
10012a9c:	1e03      	subs	r3, r0, #0
10012a9e:	d101      	bne.n	10012aa4 <usart_serial_init+0x20>
		return true;
10012aa0:	2301      	movs	r3, #1
10012aa2:	e000      	b.n	10012aa6 <usart_serial_init+0x22>
	}
	else {
		return false;
10012aa4:	2300      	movs	r3, #0
	}
}
10012aa6:	0018      	movs	r0, r3
10012aa8:	46bd      	mov	sp, r7
10012aaa:	b004      	add	sp, #16
10012aac:	bd80      	pop	{r7, pc}
10012aae:	46c0      	nop			; (mov r8, r8)
10012ab0:	1001011d 	.word	0x1001011d

10012ab4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
10012ab4:	b580      	push	{r7, lr}
10012ab6:	b082      	sub	sp, #8
10012ab8:	af00      	add	r7, sp, #0
10012aba:	6078      	str	r0, [r7, #4]
10012abc:	000a      	movs	r2, r1
10012abe:	1cfb      	adds	r3, r7, #3
10012ac0:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=uart_write_wait(module, c));
10012ac2:	46c0      	nop			; (mov r8, r8)
10012ac4:	1cfb      	adds	r3, r7, #3
10012ac6:	781a      	ldrb	r2, [r3, #0]
10012ac8:	687b      	ldr	r3, [r7, #4]
10012aca:	0011      	movs	r1, r2
10012acc:	0018      	movs	r0, r3
10012ace:	4b04      	ldr	r3, [pc, #16]	; (10012ae0 <usart_serial_putchar+0x2c>)
10012ad0:	4798      	blx	r3
10012ad2:	1e03      	subs	r3, r0, #0
10012ad4:	d1f6      	bne.n	10012ac4 <usart_serial_putchar+0x10>

	return STATUS_OK;
10012ad6:	2300      	movs	r3, #0
}
10012ad8:	0018      	movs	r0, r3
10012ada:	46bd      	mov	sp, r7
10012adc:	b002      	add	sp, #8
10012ade:	bd80      	pop	{r7, pc}
10012ae0:	100103a5 	.word	0x100103a5

10012ae4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
10012ae4:	b580      	push	{r7, lr}
10012ae6:	b082      	sub	sp, #8
10012ae8:	af00      	add	r7, sp, #0
10012aea:	6078      	str	r0, [r7, #4]
10012aec:	6039      	str	r1, [r7, #0]
	while(STATUS_OK != uart_read_wait(module, c));
10012aee:	46c0      	nop			; (mov r8, r8)
10012af0:	683a      	ldr	r2, [r7, #0]
10012af2:	687b      	ldr	r3, [r7, #4]
10012af4:	0011      	movs	r1, r2
10012af6:	0018      	movs	r0, r3
10012af8:	4b03      	ldr	r3, [pc, #12]	; (10012b08 <usart_serial_getchar+0x24>)
10012afa:	4798      	blx	r3
10012afc:	1e03      	subs	r3, r0, #0
10012afe:	d1f7      	bne.n	10012af0 <usart_serial_getchar+0xc>
}
10012b00:	46c0      	nop			; (mov r8, r8)
10012b02:	46bd      	mov	sp, r7
10012b04:	b002      	add	sp, #8
10012b06:	bd80      	pop	{r7, pc}
10012b08:	100103d9 	.word	0x100103d9

10012b0c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
10012b0c:	b580      	push	{r7, lr}
10012b0e:	b084      	sub	sp, #16
10012b10:	af00      	add	r7, sp, #0
10012b12:	60f8      	str	r0, [r7, #12]
10012b14:	60b9      	str	r1, [r7, #8]
10012b16:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
10012b18:	4b10      	ldr	r3, [pc, #64]	; (10012b5c <stdio_serial_init+0x50>)
10012b1a:	68fa      	ldr	r2, [r7, #12]
10012b1c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
10012b1e:	4b10      	ldr	r3, [pc, #64]	; (10012b60 <stdio_serial_init+0x54>)
10012b20:	4a10      	ldr	r2, [pc, #64]	; (10012b64 <stdio_serial_init+0x58>)
10012b22:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
10012b24:	4b10      	ldr	r3, [pc, #64]	; (10012b68 <stdio_serial_init+0x5c>)
10012b26:	4a11      	ldr	r2, [pc, #68]	; (10012b6c <stdio_serial_init+0x60>)
10012b28:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
10012b2a:	687a      	ldr	r2, [r7, #4]
10012b2c:	68b9      	ldr	r1, [r7, #8]
10012b2e:	68fb      	ldr	r3, [r7, #12]
10012b30:	0018      	movs	r0, r3
10012b32:	4b0f      	ldr	r3, [pc, #60]	; (10012b70 <stdio_serial_init+0x64>)
10012b34:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
10012b36:	4b0f      	ldr	r3, [pc, #60]	; (10012b74 <stdio_serial_init+0x68>)
10012b38:	681b      	ldr	r3, [r3, #0]
10012b3a:	689b      	ldr	r3, [r3, #8]
10012b3c:	2100      	movs	r1, #0
10012b3e:	0018      	movs	r0, r3
10012b40:	4b0d      	ldr	r3, [pc, #52]	; (10012b78 <stdio_serial_init+0x6c>)
10012b42:	4798      	blx	r3
	setbuf(stdin, NULL);
10012b44:	4b0b      	ldr	r3, [pc, #44]	; (10012b74 <stdio_serial_init+0x68>)
10012b46:	681b      	ldr	r3, [r3, #0]
10012b48:	685b      	ldr	r3, [r3, #4]
10012b4a:	2100      	movs	r1, #0
10012b4c:	0018      	movs	r0, r3
10012b4e:	4b0a      	ldr	r3, [pc, #40]	; (10012b78 <stdio_serial_init+0x6c>)
10012b50:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
10012b52:	46c0      	nop			; (mov r8, r8)
10012b54:	46bd      	mov	sp, r7
10012b56:	b004      	add	sp, #16
10012b58:	bd80      	pop	{r7, pc}
10012b5a:	46c0      	nop			; (mov r8, r8)
10012b5c:	1001c39c 	.word	0x1001c39c
10012b60:	1001c398 	.word	0x1001c398
10012b64:	10012ab5 	.word	0x10012ab5
10012b68:	1001c394 	.word	0x1001c394
10012b6c:	10012ae5 	.word	0x10012ae5
10012b70:	10012a85 	.word	0x10012a85
10012b74:	1001b8f4 	.word	0x1001b8f4
10012b78:	10019145 	.word	0x10019145

10012b7c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
10012b7c:	b580      	push	{r7, lr}
10012b7e:	b082      	sub	sp, #8
10012b80:	af00      	add	r7, sp, #0
10012b82:	6078      	str	r0, [r7, #4]
	read_complete_flag = true;
10012b84:	4b03      	ldr	r3, [pc, #12]	; (10012b94 <uart_read_complete_callback+0x18>)
10012b86:	2201      	movs	r2, #1
10012b88:	701a      	strb	r2, [r3, #0]
}
10012b8a:	46c0      	nop			; (mov r8, r8)
10012b8c:	46bd      	mov	sp, r7
10012b8e:	b002      	add	sp, #8
10012b90:	bd80      	pop	{r7, pc}
10012b92:	46c0      	nop			; (mov r8, r8)
10012b94:	1001be81 	.word	0x1001be81

10012b98 <serial_console_init>:

void serial_console_init(void)
{
10012b98:	b580      	push	{r7, lr}
10012b9a:	af00      	add	r7, sp, #0
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10012b9c:	2100      	movs	r1, #0
10012b9e:	2000      	movs	r0, #0
10012ba0:	4b15      	ldr	r3, [pc, #84]	; (10012bf8 <serial_console_init+0x60>)
10012ba2:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
10012ba4:	4b15      	ldr	r3, [pc, #84]	; (10012bfc <serial_console_init+0x64>)
10012ba6:	0018      	movs	r0, r3
10012ba8:	4b15      	ldr	r3, [pc, #84]	; (10012c00 <serial_console_init+0x68>)
10012baa:	4798      	blx	r3

	config_uart.baud_rate = 115200;
10012bac:	4b13      	ldr	r3, [pc, #76]	; (10012bfc <serial_console_init+0x64>)
10012bae:	22e1      	movs	r2, #225	; 0xe1
10012bb0:	0252      	lsls	r2, r2, #9
10012bb2:	601a      	str	r2, [r3, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
10012bb4:	4b11      	ldr	r3, [pc, #68]	; (10012bfc <serial_console_init+0x64>)
10012bb6:	2202      	movs	r2, #2
10012bb8:	609a      	str	r2, [r3, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
10012bba:	4b10      	ldr	r3, [pc, #64]	; (10012bfc <serial_console_init+0x64>)
10012bbc:	2203      	movs	r2, #3
10012bbe:	60da      	str	r2, [r3, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
10012bc0:	4b0e      	ldr	r3, [pc, #56]	; (10012bfc <serial_console_init+0x64>)
10012bc2:	2204      	movs	r2, #4
10012bc4:	611a      	str	r2, [r3, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
10012bc6:	4b0d      	ldr	r3, [pc, #52]	; (10012bfc <serial_console_init+0x64>)
10012bc8:	2205      	movs	r2, #5
10012bca:	615a      	str	r2, [r3, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
10012bcc:	4b0b      	ldr	r3, [pc, #44]	; (10012bfc <serial_console_init+0x64>)
10012bce:	2202      	movs	r2, #2
10012bd0:	619a      	str	r2, [r3, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
10012bd2:	4b0a      	ldr	r3, [pc, #40]	; (10012bfc <serial_console_init+0x64>)
10012bd4:	2202      	movs	r2, #2
10012bd6:	61da      	str	r2, [r3, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
10012bd8:	4b08      	ldr	r3, [pc, #32]	; (10012bfc <serial_console_init+0x64>)
10012bda:	2202      	movs	r2, #2
10012bdc:	621a      	str	r2, [r3, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
10012bde:	4b07      	ldr	r3, [pc, #28]	; (10012bfc <serial_console_init+0x64>)
10012be0:	2202      	movs	r2, #2
10012be2:	625a      	str	r2, [r3, #36]	; 0x24

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
10012be4:	4a05      	ldr	r2, [pc, #20]	; (10012bfc <serial_console_init+0x64>)
10012be6:	4907      	ldr	r1, [pc, #28]	; (10012c04 <serial_console_init+0x6c>)
10012be8:	4b07      	ldr	r3, [pc, #28]	; (10012c08 <serial_console_init+0x70>)
10012bea:	0018      	movs	r0, r3
10012bec:	4b07      	ldr	r3, [pc, #28]	; (10012c0c <serial_console_init+0x74>)
10012bee:	4798      	blx	r3
}
10012bf0:	46c0      	nop			; (mov r8, r8)
10012bf2:	46bd      	mov	sp, r7
10012bf4:	bd80      	pop	{r7, pc}
10012bf6:	46c0      	nop			; (mov r8, r8)
10012bf8:	1000ee1d 	.word	0x1000ee1d
10012bfc:	1001cbf4 	.word	0x1001cbf4
10012c00:	100100bd 	.word	0x100100bd
10012c04:	40004000 	.word	0x40004000
10012c08:	1001cbd0 	.word	0x1001cbd0
10012c0c:	10012b0d 	.word	0x10012b0d

10012c10 <_time_start>:

void _time_start(unsigned int sec)
{
10012c10:	b5f0      	push	{r4, r5, r6, r7, lr}
10012c12:	b085      	sub	sp, #20
10012c14:	af00      	add	r7, sp, #0
10012c16:	6078      	str	r0, [r7, #4]
	system_clock_get_value();
10012c18:	4b16      	ldr	r3, [pc, #88]	; (10012c74 <_time_start+0x64>)
10012c1a:	4798      	blx	r3
	unsigned int main_clk = system_clock_get_value();
10012c1c:	4b15      	ldr	r3, [pc, #84]	; (10012c74 <_time_start+0x64>)
10012c1e:	4798      	blx	r3
10012c20:	0003      	movs	r3, r0
10012c22:	60fb      	str	r3, [r7, #12]

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
10012c24:	4b14      	ldr	r3, [pc, #80]	; (10012c78 <_time_start+0x68>)
10012c26:	68f8      	ldr	r0, [r7, #12]
10012c28:	4798      	blx	r3
10012c2a:	4c14      	ldr	r4, [pc, #80]	; (10012c7c <_time_start+0x6c>)
10012c2c:	4a14      	ldr	r2, [pc, #80]	; (10012c80 <_time_start+0x70>)
10012c2e:	4b15      	ldr	r3, [pc, #84]	; (10012c84 <_time_start+0x74>)
10012c30:	47a0      	blx	r4
10012c32:	0003      	movs	r3, r0
10012c34:	000c      	movs	r4, r1
10012c36:	001d      	movs	r5, r3
10012c38:	0026      	movs	r6, r4
10012c3a:	687b      	ldr	r3, [r7, #4]
10012c3c:	22fa      	movs	r2, #250	; 0xfa
10012c3e:	0092      	lsls	r2, r2, #2
10012c40:	435a      	muls	r2, r3
10012c42:	4b0d      	ldr	r3, [pc, #52]	; (10012c78 <_time_start+0x68>)
10012c44:	0010      	movs	r0, r2
10012c46:	4798      	blx	r3
10012c48:	0002      	movs	r2, r0
10012c4a:	000b      	movs	r3, r1
10012c4c:	4c0b      	ldr	r4, [pc, #44]	; (10012c7c <_time_start+0x6c>)
10012c4e:	0028      	movs	r0, r5
10012c50:	0031      	movs	r1, r6
10012c52:	47a0      	blx	r4
10012c54:	0003      	movs	r3, r0
10012c56:	000c      	movs	r4, r1
10012c58:	0019      	movs	r1, r3
10012c5a:	0022      	movs	r2, r4
10012c5c:	4b0a      	ldr	r3, [pc, #40]	; (10012c88 <_time_start+0x78>)
10012c5e:	0008      	movs	r0, r1
10012c60:	0011      	movs	r1, r2
10012c62:	4798      	blx	r3
10012c64:	0002      	movs	r2, r0
10012c66:	4b09      	ldr	r3, [pc, #36]	; (10012c8c <_time_start+0x7c>)
10012c68:	601a      	str	r2, [r3, #0]
}
10012c6a:	46c0      	nop			; (mov r8, r8)
10012c6c:	46bd      	mov	sp, r7
10012c6e:	b005      	add	sp, #20
10012c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c72:	46c0      	nop			; (mov r8, r8)
10012c74:	1000eed5 	.word	0x1000eed5
10012c78:	10018cf1 	.word	0x10018cf1
10012c7c:	100180e9 	.word	0x100180e9
10012c80:	19feaec7 	.word	0x19feaec7
10012c84:	3f09d8ef 	.word	0x3f09d8ef
10012c88:	10017509 	.word	0x10017509
10012c8c:	1001be88 	.word	0x1001be88

10012c90 <_time_done>:

unsigned int _time_done()
{
10012c90:	b580      	push	{r7, lr}
10012c92:	af00      	add	r7, sp, #0
	return --tick;
10012c94:	4b04      	ldr	r3, [pc, #16]	; (10012ca8 <_time_done+0x18>)
10012c96:	681b      	ldr	r3, [r3, #0]
10012c98:	1e5a      	subs	r2, r3, #1
10012c9a:	4b03      	ldr	r3, [pc, #12]	; (10012ca8 <_time_done+0x18>)
10012c9c:	601a      	str	r2, [r3, #0]
10012c9e:	4b02      	ldr	r3, [pc, #8]	; (10012ca8 <_time_done+0x18>)
10012ca0:	681b      	ldr	r3, [r3, #0]
}
10012ca2:	0018      	movs	r0, r3
10012ca4:	46bd      	mov	sp, r7
10012ca6:	bd80      	pop	{r7, pc}
10012ca8:	1001be88 	.word	0x1001be88

10012cac <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
10012cac:	b580      	push	{r7, lr}
10012cae:	b082      	sub	sp, #8
10012cb0:	af00      	add	r7, sp, #0
10012cb2:	6078      	str	r0, [r7, #4]
	
	read_complete_flag = false;
10012cb4:	4b1d      	ldr	r3, [pc, #116]	; (10012d2c <getchar_b11_timeout+0x80>)
10012cb6:	2200      	movs	r2, #0
10012cb8:	701a      	strb	r2, [r3, #0]
	_time_start(sec);
10012cba:	687b      	ldr	r3, [r7, #4]
10012cbc:	0018      	movs	r0, r3
10012cbe:	4b1c      	ldr	r3, [pc, #112]	; (10012d30 <getchar_b11_timeout+0x84>)
10012cc0:	4798      	blx	r3
	
	string_input[0] = 0;
10012cc2:	4b1c      	ldr	r3, [pc, #112]	; (10012d34 <getchar_b11_timeout+0x88>)
10012cc4:	2200      	movs	r2, #0
10012cc6:	701a      	strb	r2, [r3, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
10012cc8:	491b      	ldr	r1, [pc, #108]	; (10012d38 <getchar_b11_timeout+0x8c>)
10012cca:	4b1c      	ldr	r3, [pc, #112]	; (10012d3c <getchar_b11_timeout+0x90>)
10012ccc:	2202      	movs	r2, #2
10012cce:	0018      	movs	r0, r3
10012cd0:	4b1b      	ldr	r3, [pc, #108]	; (10012d40 <getchar_b11_timeout+0x94>)
10012cd2:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
10012cd4:	4b19      	ldr	r3, [pc, #100]	; (10012d3c <getchar_b11_timeout+0x90>)
10012cd6:	2102      	movs	r1, #2
10012cd8:	0018      	movs	r0, r3
10012cda:	4b1a      	ldr	r3, [pc, #104]	; (10012d44 <getchar_b11_timeout+0x98>)
10012cdc:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
10012cde:	4915      	ldr	r1, [pc, #84]	; (10012d34 <getchar_b11_timeout+0x88>)
10012ce0:	4b16      	ldr	r3, [pc, #88]	; (10012d3c <getchar_b11_timeout+0x90>)
10012ce2:	2201      	movs	r2, #1
10012ce4:	0018      	movs	r0, r3
10012ce6:	4b18      	ldr	r3, [pc, #96]	; (10012d48 <getchar_b11_timeout+0x9c>)
10012ce8:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
10012cea:	46c0      	nop			; (mov r8, r8)
10012cec:	4b0f      	ldr	r3, [pc, #60]	; (10012d2c <getchar_b11_timeout+0x80>)
10012cee:	781b      	ldrb	r3, [r3, #0]
10012cf0:	b2db      	uxtb	r3, r3
10012cf2:	2201      	movs	r2, #1
10012cf4:	4053      	eors	r3, r2
10012cf6:	b2db      	uxtb	r3, r3
10012cf8:	2b00      	cmp	r3, #0
10012cfa:	d003      	beq.n	10012d04 <getchar_b11_timeout+0x58>
10012cfc:	4b13      	ldr	r3, [pc, #76]	; (10012d4c <getchar_b11_timeout+0xa0>)
10012cfe:	4798      	blx	r3
10012d00:	1e03      	subs	r3, r0, #0
10012d02:	d1f3      	bne.n	10012cec <getchar_b11_timeout+0x40>
	
	if( tick == 0 )
10012d04:	4b12      	ldr	r3, [pc, #72]	; (10012d50 <getchar_b11_timeout+0xa4>)
10012d06:	681b      	ldr	r3, [r3, #0]
10012d08:	2b00      	cmp	r3, #0
10012d0a:	d109      	bne.n	10012d20 <getchar_b11_timeout+0x74>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
10012d0c:	4b0b      	ldr	r3, [pc, #44]	; (10012d3c <getchar_b11_timeout+0x90>)
10012d0e:	2102      	movs	r1, #2
10012d10:	0018      	movs	r0, r3
10012d12:	4b10      	ldr	r3, [pc, #64]	; (10012d54 <getchar_b11_timeout+0xa8>)
10012d14:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
10012d16:	4b09      	ldr	r3, [pc, #36]	; (10012d3c <getchar_b11_timeout+0x90>)
10012d18:	2102      	movs	r1, #2
10012d1a:	0018      	movs	r0, r3
10012d1c:	4b0e      	ldr	r3, [pc, #56]	; (10012d58 <getchar_b11_timeout+0xac>)
10012d1e:	4798      	blx	r3
	}
	return string_input[0];
10012d20:	4b04      	ldr	r3, [pc, #16]	; (10012d34 <getchar_b11_timeout+0x88>)
10012d22:	781b      	ldrb	r3, [r3, #0]
}
10012d24:	0018      	movs	r0, r3
10012d26:	46bd      	mov	sp, r7
10012d28:	b002      	add	sp, #8
10012d2a:	bd80      	pop	{r7, pc}
10012d2c:	1001be81 	.word	0x1001be81
10012d30:	10012c11 	.word	0x10012c11
10012d34:	1001be84 	.word	0x1001be84
10012d38:	10012b7d 	.word	0x10012b7d
10012d3c:	1001cbd0 	.word	0x1001cbd0
10012d40:	10010489 	.word	0x10010489
10012d44:	1001051d 	.word	0x1001051d
10012d48:	10010441 	.word	0x10010441
10012d4c:	10012c91 	.word	0x10012c91
10012d50:	1001be88 	.word	0x1001be88
10012d54:	100104d1 	.word	0x100104d1
10012d58:	10010571 	.word	0x10010571

10012d5c <platform_event_free>:
static struct platform_event* platform_event_pending_list = NULL;
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
10012d5c:	b580      	push	{r7, lr}
10012d5e:	b082      	sub	sp, #8
10012d60:	af00      	add	r7, sp, #0
10012d62:	6078      	str	r0, [r7, #4]
	event->next = platform_event_free_list;
10012d64:	4b05      	ldr	r3, [pc, #20]	; (10012d7c <platform_event_free+0x20>)
10012d66:	681a      	ldr	r2, [r3, #0]
10012d68:	687b      	ldr	r3, [r7, #4]
10012d6a:	601a      	str	r2, [r3, #0]
	platform_event_free_list = event;
10012d6c:	4b03      	ldr	r3, [pc, #12]	; (10012d7c <platform_event_free+0x20>)
10012d6e:	687a      	ldr	r2, [r7, #4]
10012d70:	601a      	str	r2, [r3, #0]
}
10012d72:	46c0      	nop			; (mov r8, r8)
10012d74:	46bd      	mov	sp, r7
10012d76:	b002      	add	sp, #8
10012d78:	bd80      	pop	{r7, pc}
10012d7a:	46c0      	nop			; (mov r8, r8)
10012d7c:	1001bf04 	.word	0x1001bf04

10012d80 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
10012d80:	b580      	push	{r7, lr}
10012d82:	b084      	sub	sp, #16
10012d84:	af00      	add	r7, sp, #0
10012d86:	6039      	str	r1, [r7, #0]
10012d88:	0011      	movs	r1, r2
10012d8a:	1dbb      	adds	r3, r7, #6
10012d8c:	1c02      	adds	r2, r0, #0
10012d8e:	801a      	strh	r2, [r3, #0]
10012d90:	1d3b      	adds	r3, r7, #4
10012d92:	1c0a      	adds	r2, r1, #0
10012d94:	801a      	strh	r2, [r3, #0]
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
10012d96:	4b19      	ldr	r3, [pc, #100]	; (10012dfc <platform_event_post+0x7c>)
10012d98:	681b      	ldr	r3, [r3, #0]
10012d9a:	60bb      	str	r3, [r7, #8]
	if(evt != NULL)
10012d9c:	68bb      	ldr	r3, [r7, #8]
10012d9e:	2b00      	cmp	r3, #0
10012da0:	d027      	beq.n	10012df2 <platform_event_post+0x72>
	{
		platform_event_free_list = evt->next;
10012da2:	68bb      	ldr	r3, [r7, #8]
10012da4:	681a      	ldr	r2, [r3, #0]
10012da6:	4b15      	ldr	r3, [pc, #84]	; (10012dfc <platform_event_post+0x7c>)
10012da8:	601a      	str	r2, [r3, #0]
		
		evt->next = NULL;
10012daa:	68bb      	ldr	r3, [r7, #8]
10012dac:	2200      	movs	r2, #0
10012dae:	601a      	str	r2, [r3, #0]
		evt->data = data;
10012db0:	68bb      	ldr	r3, [r7, #8]
10012db2:	683a      	ldr	r2, [r7, #0]
10012db4:	609a      	str	r2, [r3, #8]
		evt->data_len = data_len;
10012db6:	68bb      	ldr	r3, [r7, #8]
10012db8:	1d3a      	adds	r2, r7, #4
10012dba:	8812      	ldrh	r2, [r2, #0]
10012dbc:	80da      	strh	r2, [r3, #6]
		evt->event_type = event_type;
10012dbe:	68bb      	ldr	r3, [r7, #8]
10012dc0:	1dba      	adds	r2, r7, #6
10012dc2:	8812      	ldrh	r2, [r2, #0]
10012dc4:	809a      	strh	r2, [r3, #4]

		if(platform_event_pending_list == NULL)
10012dc6:	4b0e      	ldr	r3, [pc, #56]	; (10012e00 <platform_event_post+0x80>)
10012dc8:	681b      	ldr	r3, [r3, #0]
10012dca:	2b00      	cmp	r3, #0
10012dcc:	d103      	bne.n	10012dd6 <platform_event_post+0x56>
		{
			platform_event_pending_list = evt;
10012dce:	4b0c      	ldr	r3, [pc, #48]	; (10012e00 <platform_event_post+0x80>)
10012dd0:	68ba      	ldr	r2, [r7, #8]
10012dd2:	601a      	str	r2, [r3, #0]
		}
		
		//platform_event_signal();
	}
	
}
10012dd4:	e00d      	b.n	10012df2 <platform_event_post+0x72>
		{
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
10012dd6:	4b0a      	ldr	r3, [pc, #40]	; (10012e00 <platform_event_post+0x80>)
10012dd8:	681b      	ldr	r3, [r3, #0]
10012dda:	60fb      	str	r3, [r7, #12]
			while(cur->next != NULL)
10012ddc:	e002      	b.n	10012de4 <platform_event_post+0x64>
			{
				cur = cur->next;
10012dde:	68fb      	ldr	r3, [r7, #12]
10012de0:	681b      	ldr	r3, [r3, #0]
10012de2:	60fb      	str	r3, [r7, #12]
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
10012de4:	68fb      	ldr	r3, [r7, #12]
10012de6:	681b      	ldr	r3, [r3, #0]
10012de8:	2b00      	cmp	r3, #0
10012dea:	d1f8      	bne.n	10012dde <platform_event_post+0x5e>
			{
				cur = cur->next;
			}
			cur->next = evt;
10012dec:	68fb      	ldr	r3, [r7, #12]
10012dee:	68ba      	ldr	r2, [r7, #8]
10012df0:	601a      	str	r2, [r3, #0]
		}
		
		//platform_event_signal();
	}
	
}
10012df2:	46c0      	nop			; (mov r8, r8)
10012df4:	46bd      	mov	sp, r7
10012df6:	b004      	add	sp, #16
10012df8:	bd80      	pop	{r7, pc}
10012dfa:	46c0      	nop			; (mov r8, r8)
10012dfc:	1001bf04 	.word	0x1001bf04
10012e00:	1001bf08 	.word	0x1001bf08

10012e04 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
10012e04:	b580      	push	{r7, lr}
10012e06:	b082      	sub	sp, #8
10012e08:	af00      	add	r7, sp, #0
	uint32_t i;
	platform_event_free_list = NULL;
10012e0a:	4b0e      	ldr	r3, [pc, #56]	; (10012e44 <platform_event_init+0x40>)
10012e0c:	2200      	movs	r2, #0
10012e0e:	601a      	str	r2, [r3, #0]
	platform_event_pending_list = NULL;
10012e10:	4b0d      	ldr	r3, [pc, #52]	; (10012e48 <platform_event_init+0x44>)
10012e12:	2200      	movs	r2, #0
10012e14:	601a      	str	r2, [r3, #0]
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
10012e16:	2300      	movs	r3, #0
10012e18:	607b      	str	r3, [r7, #4]
10012e1a:	e00c      	b.n	10012e36 <platform_event_init+0x32>
	{
		platform_event_free(&platform_event_pool[i]);
10012e1c:	687a      	ldr	r2, [r7, #4]
10012e1e:	0013      	movs	r3, r2
10012e20:	005b      	lsls	r3, r3, #1
10012e22:	189b      	adds	r3, r3, r2
10012e24:	009b      	lsls	r3, r3, #2
10012e26:	4a09      	ldr	r2, [pc, #36]	; (10012e4c <platform_event_init+0x48>)
10012e28:	189b      	adds	r3, r3, r2
10012e2a:	0018      	movs	r0, r3
10012e2c:	4b08      	ldr	r3, [pc, #32]	; (10012e50 <platform_event_init+0x4c>)
10012e2e:	4798      	blx	r3
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
10012e30:	687b      	ldr	r3, [r7, #4]
10012e32:	3301      	adds	r3, #1
10012e34:	607b      	str	r3, [r7, #4]
10012e36:	687b      	ldr	r3, [r7, #4]
10012e38:	2b09      	cmp	r3, #9
10012e3a:	d9ef      	bls.n	10012e1c <platform_event_init+0x18>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
10012e3c:	46c0      	nop			; (mov r8, r8)
10012e3e:	46bd      	mov	sp, r7
10012e40:	b002      	add	sp, #8
10012e42:	bd80      	pop	{r7, pc}
10012e44:	1001bf04 	.word	0x1001bf04
10012e48:	1001bf08 	.word	0x1001bf08
10012e4c:	1001be8c 	.word	0x1001be8c
10012e50:	10012d5d 	.word	0x10012d5d

10012e54 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10012e54:	b580      	push	{r7, lr}
10012e56:	b082      	sub	sp, #8
10012e58:	af00      	add	r7, sp, #0
10012e5a:	0002      	movs	r2, r0
10012e5c:	1dfb      	adds	r3, r7, #7
10012e5e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10012e60:	4b06      	ldr	r3, [pc, #24]	; (10012e7c <NVIC_EnableIRQ+0x28>)
10012e62:	1dfa      	adds	r2, r7, #7
10012e64:	7812      	ldrb	r2, [r2, #0]
10012e66:	0011      	movs	r1, r2
10012e68:	221f      	movs	r2, #31
10012e6a:	400a      	ands	r2, r1
10012e6c:	2101      	movs	r1, #1
10012e6e:	4091      	lsls	r1, r2
10012e70:	000a      	movs	r2, r1
10012e72:	601a      	str	r2, [r3, #0]
}
10012e74:	46c0      	nop			; (mov r8, r8)
10012e76:	46bd      	mov	sp, r7
10012e78:	b002      	add	sp, #8
10012e7a:	bd80      	pop	{r7, pc}
10012e7c:	e000e100 	.word	0xe000e100

10012e80 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
10012e80:	b580      	push	{r7, lr}
10012e82:	b082      	sub	sp, #8
10012e84:	af00      	add	r7, sp, #0
10012e86:	0002      	movs	r2, r0
10012e88:	1dfb      	adds	r3, r7, #7
10012e8a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10012e8c:	4a07      	ldr	r2, [pc, #28]	; (10012eac <NVIC_DisableIRQ+0x2c>)
10012e8e:	1dfb      	adds	r3, r7, #7
10012e90:	781b      	ldrb	r3, [r3, #0]
10012e92:	0019      	movs	r1, r3
10012e94:	231f      	movs	r3, #31
10012e96:	400b      	ands	r3, r1
10012e98:	2101      	movs	r1, #1
10012e9a:	4099      	lsls	r1, r3
10012e9c:	000b      	movs	r3, r1
10012e9e:	0019      	movs	r1, r3
10012ea0:	2380      	movs	r3, #128	; 0x80
10012ea2:	50d1      	str	r1, [r2, r3]
}
10012ea4:	46c0      	nop			; (mov r8, r8)
10012ea6:	46bd      	mov	sp, r7
10012ea8:	b002      	add	sp, #8
10012eaa:	bd80      	pop	{r7, pc}
10012eac:	e000e100 	.word	0xe000e100

10012eb0 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
10012eb0:	b580      	push	{r7, lr}
10012eb2:	b082      	sub	sp, #8
10012eb4:	af00      	add	r7, sp, #0
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
10012eb6:	4b1f      	ldr	r3, [pc, #124]	; (10012f34 <init_port_list+0x84>)
10012eb8:	2232      	movs	r2, #50	; 0x32
10012eba:	2100      	movs	r1, #0
10012ebc:	0018      	movs	r0, r3
10012ebe:	4b1e      	ldr	r3, [pc, #120]	; (10012f38 <init_port_list+0x88>)
10012ec0:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
10012ec2:	1dfb      	adds	r3, r7, #7
10012ec4:	2200      	movs	r2, #0
10012ec6:	701a      	strb	r2, [r3, #0]
10012ec8:	e01d      	b.n	10012f06 <init_port_list+0x56>
		port_list[i].bit.gpio_num = i;
10012eca:	1dfb      	adds	r3, r7, #7
10012ecc:	781a      	ldrb	r2, [r3, #0]
10012ece:	4b19      	ldr	r3, [pc, #100]	; (10012f34 <init_port_list+0x84>)
10012ed0:	0052      	lsls	r2, r2, #1
10012ed2:	1df9      	adds	r1, r7, #7
10012ed4:	7809      	ldrb	r1, [r1, #0]
10012ed6:	54d1      	strb	r1, [r2, r3]
		port_list[i].bit.available = 1;
10012ed8:	1dfb      	adds	r3, r7, #7
10012eda:	781b      	ldrb	r3, [r3, #0]
10012edc:	4a15      	ldr	r2, [pc, #84]	; (10012f34 <init_port_list+0x84>)
10012ede:	005b      	lsls	r3, r3, #1
10012ee0:	18d3      	adds	r3, r2, r3
10012ee2:	785a      	ldrb	r2, [r3, #1]
10012ee4:	2101      	movs	r1, #1
10012ee6:	430a      	orrs	r2, r1
10012ee8:	705a      	strb	r2, [r3, #1]
		port_list[i].bit.configured = 0;
10012eea:	1dfb      	adds	r3, r7, #7
10012eec:	781b      	ldrb	r3, [r3, #0]
10012eee:	4a11      	ldr	r2, [pc, #68]	; (10012f34 <init_port_list+0x84>)
10012ef0:	005b      	lsls	r3, r3, #1
10012ef2:	18d3      	adds	r3, r2, r3
10012ef4:	785a      	ldrb	r2, [r3, #1]
10012ef6:	2102      	movs	r1, #2
10012ef8:	438a      	bics	r2, r1
10012efa:	705a      	strb	r2, [r3, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
10012efc:	1dfb      	adds	r3, r7, #7
10012efe:	781a      	ldrb	r2, [r3, #0]
10012f00:	1dfb      	adds	r3, r7, #7
10012f02:	3201      	adds	r2, #1
10012f04:	701a      	strb	r2, [r3, #0]
10012f06:	1dfb      	adds	r3, r7, #7
10012f08:	781b      	ldrb	r3, [r3, #0]
10012f0a:	2b18      	cmp	r3, #24
10012f0c:	d9dd      	bls.n	10012eca <init_port_list+0x1a>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
10012f0e:	4b09      	ldr	r3, [pc, #36]	; (10012f34 <init_port_list+0x84>)
10012f10:	785a      	ldrb	r2, [r3, #1]
10012f12:	2101      	movs	r1, #1
10012f14:	438a      	bics	r2, r1
10012f16:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
10012f18:	4b06      	ldr	r3, [pc, #24]	; (10012f34 <init_port_list+0x84>)
10012f1a:	78da      	ldrb	r2, [r3, #3]
10012f1c:	2101      	movs	r1, #1
10012f1e:	438a      	bics	r2, r1
10012f20:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
10012f22:	4b04      	ldr	r3, [pc, #16]	; (10012f34 <init_port_list+0x84>)
10012f24:	7f5a      	ldrb	r2, [r3, #29]
10012f26:	2101      	movs	r1, #1
10012f28:	438a      	bics	r2, r1
10012f2a:	775a      	strb	r2, [r3, #29]
}
10012f2c:	46c0      	nop			; (mov r8, r8)
10012f2e:	46bd      	mov	sp, r7
10012f30:	b002      	add	sp, #8
10012f32:	bd80      	pop	{r7, pc}
10012f34:	1001cc34 	.word	0x1001cc34
10012f38:	10018e2d 	.word	0x10018e2d

10012f3c <init_clock>:

void init_clock(void)
{
10012f3c:	b580      	push	{r7, lr}
10012f3e:	b082      	sub	sp, #8
10012f40:	af00      	add	r7, sp, #0
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
10012f42:	4b2b      	ldr	r3, [pc, #172]	; (10012ff0 <init_clock+0xb4>)
10012f44:	681b      	ldr	r3, [r3, #0]
10012f46:	607b      	str	r3, [r7, #4]
	//disable SPI-FLASH core clock
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN);
	//disable SPI core clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN);
10012f48:	687b      	ldr	r3, [r7, #4]
10012f4a:	2204      	movs	r2, #4
10012f4c:	4393      	bics	r3, r2
10012f4e:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN);
10012f50:	687b      	ldr	r3, [r7, #4]
10012f52:	2208      	movs	r2, #8
10012f54:	4393      	bics	r3, r2
10012f56:	607b      	str	r3, [r7, #4]
	//disable I2C0 Core clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	//disable ARM dual timer core clocks.
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN);
10012f58:	687b      	ldr	r3, [r7, #4]
10012f5a:	2220      	movs	r2, #32
10012f5c:	4393      	bics	r3, r2
10012f5e:	607b      	str	r3, [r7, #4]
	//disable counter0 clock 
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN);
	//disable Watchdog core clocks.
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
10012f60:	687b      	ldr	r3, [r7, #4]
10012f62:	4a24      	ldr	r2, [pc, #144]	; (10012ff4 <init_clock+0xb8>)
10012f64:	4013      	ands	r3, r2
10012f66:	607b      	str	r3, [r7, #4]
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
10012f68:	687b      	ldr	r3, [r7, #4]
10012f6a:	4a23      	ldr	r2, [pc, #140]	; (10012ff8 <init_clock+0xbc>)
10012f6c:	4013      	ands	r3, r2
10012f6e:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
10012f70:	687b      	ldr	r3, [r7, #4]
10012f72:	4a22      	ldr	r2, [pc, #136]	; (10012ffc <init_clock+0xc0>)
10012f74:	4013      	ands	r3, r2
10012f76:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
10012f78:	687b      	ldr	r3, [r7, #4]
10012f7a:	4a21      	ldr	r2, [pc, #132]	; (10013000 <init_clock+0xc4>)
10012f7c:	4013      	ands	r3, r2
10012f7e:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
10012f80:	687b      	ldr	r3, [r7, #4]
10012f82:	4a20      	ldr	r2, [pc, #128]	; (10013004 <init_clock+0xc8>)
10012f84:	4013      	ands	r3, r2
10012f86:	607b      	str	r3, [r7, #4]
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
10012f88:	4b19      	ldr	r3, [pc, #100]	; (10012ff0 <init_clock+0xb4>)
10012f8a:	687a      	ldr	r2, [r7, #4]
10012f8c:	601a      	str	r2, [r3, #0]
	default_samb11_clock_init[0] = regval;
10012f8e:	4b1e      	ldr	r3, [pc, #120]	; (10013008 <init_clock+0xcc>)
10012f90:	687a      	ldr	r2, [r7, #4]
10012f92:	601a      	str	r2, [r3, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
10012f94:	4b1d      	ldr	r3, [pc, #116]	; (1001300c <init_clock+0xd0>)
10012f96:	681b      	ldr	r3, [r3, #0]
10012f98:	607b      	str	r3, [r7, #4]
	//disable efuse clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN);
10012f9a:	687b      	ldr	r3, [r7, #4]
10012f9c:	2201      	movs	r2, #1
10012f9e:	4393      	bics	r3, r2
10012fa0:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN);
10012fa2:	687b      	ldr	r3, [r7, #4]
10012fa4:	2202      	movs	r2, #2
10012fa6:	4393      	bics	r3, r2
10012fa8:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN);
10012faa:	687b      	ldr	r3, [r7, #4]
10012fac:	2204      	movs	r2, #4
10012fae:	4393      	bics	r3, r2
10012fb0:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
10012fb2:	687b      	ldr	r3, [r7, #4]
10012fb4:	2208      	movs	r2, #8
10012fb6:	4393      	bics	r3, r2
10012fb8:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
10012fba:	687b      	ldr	r3, [r7, #4]
10012fbc:	2210      	movs	r2, #16
10012fbe:	4393      	bics	r3, r2
10012fc0:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
10012fc2:	687b      	ldr	r3, [r7, #4]
10012fc4:	2220      	movs	r2, #32
10012fc6:	4393      	bics	r3, r2
10012fc8:	607b      	str	r3, [r7, #4]
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
10012fca:	687b      	ldr	r3, [r7, #4]
10012fcc:	4a10      	ldr	r2, [pc, #64]	; (10013010 <init_clock+0xd4>)
10012fce:	4013      	ands	r3, r2
10012fd0:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
10012fd2:	687b      	ldr	r3, [r7, #4]
10012fd4:	4a07      	ldr	r2, [pc, #28]	; (10012ff4 <init_clock+0xb8>)
10012fd6:	4013      	ands	r3, r2
10012fd8:	607b      	str	r3, [r7, #4]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
10012fda:	4b0c      	ldr	r3, [pc, #48]	; (1001300c <init_clock+0xd0>)
10012fdc:	687a      	ldr	r2, [r7, #4]
10012fde:	601a      	str	r2, [r3, #0]
	default_samb11_clock_init[1] = regval;
10012fe0:	4b09      	ldr	r3, [pc, #36]	; (10013008 <init_clock+0xcc>)
10012fe2:	687a      	ldr	r2, [r7, #4]
10012fe4:	605a      	str	r2, [r3, #4]
	//ARM debugger
	
	//store default values
}
10012fe6:	46c0      	nop			; (mov r8, r8)
10012fe8:	46bd      	mov	sp, r7
10012fea:	b002      	add	sp, #8
10012fec:	bd80      	pop	{r7, pc}
10012fee:	46c0      	nop			; (mov r8, r8)
10012ff0:	4000b00c 	.word	0x4000b00c
10012ff4:	ffffefff 	.word	0xffffefff
10012ff8:	ffffdfff 	.word	0xffffdfff
10012ffc:	ffffbfff 	.word	0xffffbfff
10013000:	ffff7fff 	.word	0xffff7fff
10013004:	fffeffff 	.word	0xfffeffff
10013008:	1001cc1c 	.word	0x1001cc1c
1001300c:	4000b010 	.word	0x4000b010
10013010:	fffff7ff 	.word	0xfffff7ff

10013014 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
10013014:	b580      	push	{r7, lr}
10013016:	b082      	sub	sp, #8
10013018:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_NOT_INITIALIZED;
1001301a:	1dfb      	adds	r3, r7, #7
1001301c:	2205      	movs	r2, #5
1001301e:	701a      	strb	r2, [r3, #0]
	if((platform_initialized == 0) || (platform_initialized != 1)) {
10013020:	4b4e      	ldr	r3, [pc, #312]	; (1001315c <platform_driver_init+0x148>)
10013022:	781b      	ldrb	r3, [r3, #0]
10013024:	b2db      	uxtb	r3, r3
10013026:	2b00      	cmp	r3, #0
10013028:	d005      	beq.n	10013036 <platform_driver_init+0x22>
1001302a:	4b4c      	ldr	r3, [pc, #304]	; (1001315c <platform_driver_init+0x148>)
1001302c:	781b      	ldrb	r3, [r3, #0]
1001302e:	b2db      	uxtb	r3, r3
10013030:	2b01      	cmp	r3, #1
10013032:	d100      	bne.n	10013036 <platform_driver_init+0x22>
10013034:	e085      	b.n	10013142 <platform_driver_init+0x12e>
		init_port_list();
10013036:	4b4a      	ldr	r3, [pc, #296]	; (10013160 <platform_driver_init+0x14c>)
10013038:	4798      	blx	r3
		init_clock();
1001303a:	4b4a      	ldr	r3, [pc, #296]	; (10013164 <platform_driver_init+0x150>)
1001303c:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1001303e:	4b4a      	ldr	r3, [pc, #296]	; (10013168 <platform_driver_init+0x154>)
10013040:	2200      	movs	r2, #0
10013042:	601a      	str	r2, [r3, #0]

#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
10013044:	2017      	movs	r0, #23
10013046:	4b49      	ldr	r3, [pc, #292]	; (1001316c <platform_driver_init+0x158>)
10013048:	4798      	blx	r3
		NVIC_DisableIRQ(GPIO1_IRQn);
1001304a:	2018      	movs	r0, #24
1001304c:	4b47      	ldr	r3, [pc, #284]	; (1001316c <platform_driver_init+0x158>)
1001304e:	4798      	blx	r3
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
10013050:	4b47      	ldr	r3, [pc, #284]	; (10013170 <platform_driver_init+0x15c>)
10013052:	4a48      	ldr	r2, [pc, #288]	; (10013174 <platform_driver_init+0x160>)
10013054:	601a      	str	r2, [r3, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
10013056:	4b48      	ldr	r3, [pc, #288]	; (10013178 <platform_driver_init+0x164>)
10013058:	4a48      	ldr	r2, [pc, #288]	; (1001317c <platform_driver_init+0x168>)
1001305a:	601a      	str	r2, [r3, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1001305c:	4b48      	ldr	r3, [pc, #288]	; (10013180 <platform_driver_init+0x16c>)
1001305e:	4a49      	ldr	r2, [pc, #292]	; (10013184 <platform_driver_init+0x170>)
10013060:	601a      	str	r2, [r3, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
10013062:	4b49      	ldr	r3, [pc, #292]	; (10013188 <platform_driver_init+0x174>)
10013064:	681b      	ldr	r3, [r3, #0]
10013066:	001a      	movs	r2, r3
10013068:	4b48      	ldr	r3, [pc, #288]	; (1001318c <platform_driver_init+0x178>)
1001306a:	601a      	str	r2, [r3, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1001306c:	4b48      	ldr	r3, [pc, #288]	; (10013190 <platform_driver_init+0x17c>)
1001306e:	681b      	ldr	r3, [r3, #0]
10013070:	001a      	movs	r2, r3
10013072:	4b48      	ldr	r3, [pc, #288]	; (10013194 <platform_driver_init+0x180>)
10013074:	601a      	str	r2, [r3, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
10013076:	4b48      	ldr	r3, [pc, #288]	; (10013198 <platform_driver_init+0x184>)
10013078:	4a48      	ldr	r2, [pc, #288]	; (1001319c <platform_driver_init+0x188>)
1001307a:	601a      	str	r2, [r3, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1001307c:	4b48      	ldr	r3, [pc, #288]	; (100131a0 <platform_driver_init+0x18c>)
1001307e:	4a49      	ldr	r2, [pc, #292]	; (100131a4 <platform_driver_init+0x190>)
10013080:	601a      	str	r2, [r3, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
10013082:	4b49      	ldr	r3, [pc, #292]	; (100131a8 <platform_driver_init+0x194>)
10013084:	4a49      	ldr	r2, [pc, #292]	; (100131ac <platform_driver_init+0x198>)
10013086:	601a      	str	r2, [r3, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
10013088:	4b49      	ldr	r3, [pc, #292]	; (100131b0 <platform_driver_init+0x19c>)
1001308a:	4a4a      	ldr	r2, [pc, #296]	; (100131b4 <platform_driver_init+0x1a0>)
1001308c:	601a      	str	r2, [r3, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1001308e:	4b4a      	ldr	r3, [pc, #296]	; (100131b8 <platform_driver_init+0x1a4>)
10013090:	4a4a      	ldr	r2, [pc, #296]	; (100131bc <platform_driver_init+0x1a8>)
10013092:	601a      	str	r2, [r3, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
10013094:	4b4a      	ldr	r3, [pc, #296]	; (100131c0 <platform_driver_init+0x1ac>)
10013096:	4a4b      	ldr	r2, [pc, #300]	; (100131c4 <platform_driver_init+0x1b0>)
10013098:	601a      	str	r2, [r3, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1001309a:	4b4b      	ldr	r3, [pc, #300]	; (100131c8 <platform_driver_init+0x1b4>)
1001309c:	4a4b      	ldr	r2, [pc, #300]	; (100131cc <platform_driver_init+0x1b8>)
1001309e:	601a      	str	r2, [r3, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
100130a0:	4b4b      	ldr	r3, [pc, #300]	; (100131d0 <platform_driver_init+0x1bc>)
100130a2:	4a4c      	ldr	r2, [pc, #304]	; (100131d4 <platform_driver_init+0x1c0>)
100130a4:	601a      	str	r2, [r3, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
100130a6:	4b4c      	ldr	r3, [pc, #304]	; (100131d8 <platform_driver_init+0x1c4>)
100130a8:	4a4c      	ldr	r2, [pc, #304]	; (100131dc <platform_driver_init+0x1c8>)
100130aa:	601a      	str	r2, [r3, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
100130ac:	4b32      	ldr	r3, [pc, #200]	; (10013178 <platform_driver_init+0x164>)
100130ae:	681b      	ldr	r3, [r3, #0]
100130b0:	2028      	movs	r0, #40	; 0x28
100130b2:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
100130b4:	4b2e      	ldr	r3, [pc, #184]	; (10013170 <platform_driver_init+0x15c>)
100130b6:	681b      	ldr	r3, [r3, #0]
100130b8:	4a49      	ldr	r2, [pc, #292]	; (100131e0 <platform_driver_init+0x1cc>)
100130ba:	0011      	movs	r1, r2
100130bc:	2028      	movs	r0, #40	; 0x28
100130be:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
100130c0:	4b2b      	ldr	r3, [pc, #172]	; (10013170 <platform_driver_init+0x15c>)
100130c2:	681b      	ldr	r3, [r3, #0]
100130c4:	4a47      	ldr	r2, [pc, #284]	; (100131e4 <platform_driver_init+0x1d0>)
100130c6:	0011      	movs	r1, r2
100130c8:	2027      	movs	r0, #39	; 0x27
100130ca:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
100130cc:	4b46      	ldr	r3, [pc, #280]	; (100131e8 <platform_driver_init+0x1d4>)
100130ce:	681b      	ldr	r3, [r3, #0]
100130d0:	001a      	movs	r2, r3
100130d2:	4b46      	ldr	r3, [pc, #280]	; (100131ec <platform_driver_init+0x1d8>)
100130d4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
100130d6:	4b46      	ldr	r3, [pc, #280]	; (100131f0 <platform_driver_init+0x1dc>)
100130d8:	4a46      	ldr	r2, [pc, #280]	; (100131f4 <platform_driver_init+0x1e0>)
100130da:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
100130dc:	4b46      	ldr	r3, [pc, #280]	; (100131f8 <platform_driver_init+0x1e4>)
100130de:	4a47      	ldr	r2, [pc, #284]	; (100131fc <platform_driver_init+0x1e8>)
100130e0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
100130e2:	4b47      	ldr	r3, [pc, #284]	; (10013200 <platform_driver_init+0x1ec>)
100130e4:	4a47      	ldr	r2, [pc, #284]	; (10013204 <platform_driver_init+0x1f0>)
100130e6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
100130e8:	4b47      	ldr	r3, [pc, #284]	; (10013208 <platform_driver_init+0x1f4>)
100130ea:	4a48      	ldr	r2, [pc, #288]	; (1001320c <platform_driver_init+0x1f8>)
100130ec:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
100130ee:	4b48      	ldr	r3, [pc, #288]	; (10013210 <platform_driver_init+0x1fc>)
100130f0:	4a48      	ldr	r2, [pc, #288]	; (10013214 <platform_driver_init+0x200>)
100130f2:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
100130f4:	4b48      	ldr	r3, [pc, #288]	; (10013218 <platform_driver_init+0x204>)
100130f6:	4a49      	ldr	r2, [pc, #292]	; (1001321c <platform_driver_init+0x208>)
100130f8:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
100130fa:	4b49      	ldr	r3, [pc, #292]	; (10013220 <platform_driver_init+0x20c>)
100130fc:	4a49      	ldr	r2, [pc, #292]	; (10013224 <platform_driver_init+0x210>)
100130fe:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
10013100:	23a0      	movs	r3, #160	; 0xa0
10013102:	009a      	lsls	r2, r3, #2
10013104:	4b48      	ldr	r3, [pc, #288]	; (10013228 <platform_driver_init+0x214>)
10013106:	2100      	movs	r1, #0
10013108:	0018      	movs	r0, r3
1001310a:	4b48      	ldr	r3, [pc, #288]	; (1001322c <platform_driver_init+0x218>)
1001310c:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1001310e:	4b48      	ldr	r3, [pc, #288]	; (10013230 <platform_driver_init+0x21c>)
10013110:	2280      	movs	r2, #128	; 0x80
10013112:	0092      	lsls	r2, r2, #2
10013114:	801a      	strh	r2, [r3, #0]
		platform_event_init();
10013116:	4b47      	ldr	r3, [pc, #284]	; (10013234 <platform_driver_init+0x220>)
10013118:	4798      	blx	r3
		
#ifdef CHIPVERSION_B0
		/* NVIC_EnableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_EnableIRQ(PORT1_COMB_IRQn); */
		NVIC_EnableIRQ(GPIO0_IRQn);
1001311a:	2017      	movs	r0, #23
1001311c:	4b46      	ldr	r3, [pc, #280]	; (10013238 <platform_driver_init+0x224>)
1001311e:	4798      	blx	r3
		NVIC_EnableIRQ(GPIO1_IRQn);
10013120:	2018      	movs	r0, #24
10013122:	4b45      	ldr	r3, [pc, #276]	; (10013238 <platform_driver_init+0x224>)
10013124:	4798      	blx	r3
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
10013126:	4b45      	ldr	r3, [pc, #276]	; (1001323c <platform_driver_init+0x228>)
10013128:	2200      	movs	r2, #0
1001312a:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1001312c:	4b1e      	ldr	r3, [pc, #120]	; (100131a8 <platform_driver_init+0x194>)
1001312e:	681b      	ldr	r3, [r3, #0]
10013130:	4a43      	ldr	r2, [pc, #268]	; (10013240 <platform_driver_init+0x22c>)
10013132:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
10013134:	4b09      	ldr	r3, [pc, #36]	; (1001315c <platform_driver_init+0x148>)
10013136:	2201      	movs	r2, #1
10013138:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1001313a:	1dfb      	adds	r3, r7, #7
1001313c:	2200      	movs	r2, #0
1001313e:	701a      	strb	r2, [r3, #0]
10013140:	e005      	b.n	1001314e <platform_driver_init+0x13a>
	}
	else {
		platform_initialized = 1;
10013142:	4b06      	ldr	r3, [pc, #24]	; (1001315c <platform_driver_init+0x148>)
10013144:	2201      	movs	r2, #1
10013146:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
10013148:	1dfb      	adds	r3, r7, #7
1001314a:	2201      	movs	r2, #1
1001314c:	701a      	strb	r2, [r3, #0]
	}
	return status;
1001314e:	1dfb      	adds	r3, r7, #7
10013150:	781b      	ldrb	r3, [r3, #0]
}
10013152:	0018      	movs	r0, r3
10013154:	46bd      	mov	sp, r7
10013156:	b002      	add	sp, #8
10013158:	bd80      	pop	{r7, pc}
1001315a:	46c0      	nop			; (mov r8, r8)
1001315c:	1001bf44 	.word	0x1001bf44
10013160:	10012eb1 	.word	0x10012eb1
10013164:	10012f3d 	.word	0x10012f3d
10013168:	1001bf48 	.word	0x1001bf48
1001316c:	10012e81 	.word	0x10012e81
10013170:	1001cee8 	.word	0x1001cee8
10013174:	000007d7 	.word	0x000007d7
10013178:	1001cc28 	.word	0x1001cc28
1001317c:	000007bd 	.word	0x000007bd
10013180:	1001ceec 	.word	0x1001ceec
10013184:	0001bc51 	.word	0x0001bc51
10013188:	100400bc 	.word	0x100400bc
1001318c:	1001bf3c 	.word	0x1001bf3c
10013190:	100400b8 	.word	0x100400b8
10013194:	1001bf40 	.word	0x1001bf40
10013198:	1001cc24 	.word	0x1001cc24
1001319c:	0001b99f 	.word	0x0001b99f
100131a0:	1001cc2c 	.word	0x1001cc2c
100131a4:	0001b9db 	.word	0x0001b9db
100131a8:	1001cef8 	.word	0x1001cef8
100131ac:	1004003c 	.word	0x1004003c
100131b0:	1001cc30 	.word	0x1001cc30
100131b4:	10041fc0 	.word	0x10041fc0
100131b8:	1001cef4 	.word	0x1001cef4
100131bc:	10041fc4 	.word	0x10041fc4
100131c0:	1001bf0c 	.word	0x1001bf0c
100131c4:	0001cbe9 	.word	0x0001cbe9
100131c8:	1001bf10 	.word	0x1001bf10
100131cc:	0001cd8f 	.word	0x0001cd8f
100131d0:	1001bf14 	.word	0x1001bf14
100131d4:	0001cea3 	.word	0x0001cea3
100131d8:	1001bf18 	.word	0x1001bf18
100131dc:	0001cbcf 	.word	0x0001cbcf
100131e0:	10013d39 	.word	0x10013d39
100131e4:	10013c79 	.word	0x10013c79
100131e8:	100400e4 	.word	0x100400e4
100131ec:	1001bf24 	.word	0x1001bf24
100131f0:	1001bf28 	.word	0x1001bf28
100131f4:	00019fe9 	.word	0x00019fe9
100131f8:	1001bf2c 	.word	0x1001bf2c
100131fc:	0001dbdd 	.word	0x0001dbdd
10013200:	1001bf30 	.word	0x1001bf30
10013204:	0001dc5b 	.word	0x0001dc5b
10013208:	1001bf1c 	.word	0x1001bf1c
1001320c:	100405ec 	.word	0x100405ec
10013210:	1001bf34 	.word	0x1001bf34
10013214:	0001d5e3 	.word	0x0001d5e3
10013218:	1001bf20 	.word	0x1001bf20
1001321c:	10040c20 	.word	0x10040c20
10013220:	1001bf38 	.word	0x1001bf38
10013224:	00019f09 	.word	0x00019f09
10013228:	1001cc68 	.word	0x1001cc68
1001322c:	10018e2d 	.word	0x10018e2d
10013230:	1001cefc 	.word	0x1001cefc
10013234:	10012e05 	.word	0x10012e05
10013238:	10012e55 	.word	0x10012e55
1001323c:	1001cef0 	.word	0x1001cef0
10013240:	10013b15 	.word	0x10013b15

10013244 <platform_register_ble_msg_handler>:
}
#endif	//CHIPVERSION_A4


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
10013244:	b580      	push	{r7, lr}
10013246:	b084      	sub	sp, #16
10013248:	af00      	add	r7, sp, #0
1001324a:	6078      	str	r0, [r7, #4]
	plf_drv_status status;
	if(platform_initialized == 1) {
1001324c:	4b0b      	ldr	r3, [pc, #44]	; (1001327c <platform_register_ble_msg_handler+0x38>)
1001324e:	781b      	ldrb	r3, [r3, #0]
10013250:	b2db      	uxtb	r3, r3
10013252:	2b01      	cmp	r3, #1
10013254:	d107      	bne.n	10013266 <platform_register_ble_msg_handler+0x22>
		ble_stack_message_handler = fp;
10013256:	4b0a      	ldr	r3, [pc, #40]	; (10013280 <platform_register_ble_msg_handler+0x3c>)
10013258:	687a      	ldr	r2, [r7, #4]
1001325a:	601a      	str	r2, [r3, #0]
		status = STATUS_SUCCESS;
1001325c:	230f      	movs	r3, #15
1001325e:	18fb      	adds	r3, r7, r3
10013260:	2200      	movs	r2, #0
10013262:	701a      	strb	r2, [r3, #0]
10013264:	e003      	b.n	1001326e <platform_register_ble_msg_handler+0x2a>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
10013266:	230f      	movs	r3, #15
10013268:	18fb      	adds	r3, r7, r3
1001326a:	2205      	movs	r2, #5
1001326c:	701a      	strb	r2, [r3, #0]
	}
	return status;
1001326e:	230f      	movs	r3, #15
10013270:	18fb      	adds	r3, r7, r3
10013272:	781b      	ldrb	r3, [r3, #0]
}
10013274:	0018      	movs	r0, r3
10013276:	46bd      	mov	sp, r7
10013278:	b004      	add	sp, #16
1001327a:	bd80      	pop	{r7, pc}
1001327c:	1001bf44 	.word	0x1001bf44
10013280:	1001bf48 	.word	0x1001bf48

10013284 <at_ke_msg_send>:

static void at_ke_msg_send(void const * param_ptr)
{
10013284:	b580      	push	{r7, lr}
10013286:	b084      	sub	sp, #16
10013288:	af00      	add	r7, sp, #0
1001328a:	6078      	str	r0, [r7, #4]
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1001328c:	4b18      	ldr	r3, [pc, #96]	; (100132f0 <at_ke_msg_send+0x6c>)
1001328e:	681b      	ldr	r3, [r3, #0]
10013290:	b2da      	uxtb	r2, r3
10013292:	230f      	movs	r3, #15
10013294:	18fb      	adds	r3, r7, r3
10013296:	2101      	movs	r1, #1
10013298:	400a      	ands	r2, r1
1001329a:	701a      	strb	r2, [r3, #0]
	ke_msg_send(param_ptr);
1001329c:	4b15      	ldr	r3, [pc, #84]	; (100132f4 <at_ke_msg_send+0x70>)
1001329e:	681b      	ldr	r3, [r3, #0]
100132a0:	687a      	ldr	r2, [r7, #4]
100132a2:	0010      	movs	r0, r2
100132a4:	4798      	blx	r3
	if(osc_en == 0)
100132a6:	230f      	movs	r3, #15
100132a8:	18fb      	adds	r3, r7, r3
100132aa:	781b      	ldrb	r3, [r3, #0]
100132ac:	2b00      	cmp	r3, #0
100132ae:	d115      	bne.n	100132dc <at_ke_msg_send+0x58>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
100132b0:	4b11      	ldr	r3, [pc, #68]	; (100132f8 <at_ke_msg_send+0x74>)
100132b2:	681b      	ldr	r3, [r3, #0]
100132b4:	2002      	movs	r0, #2
100132b6:	4798      	blx	r3
		pwr_arm_wakeup_req();
100132b8:	4b10      	ldr	r3, [pc, #64]	; (100132fc <at_ke_msg_send+0x78>)
100132ba:	681b      	ldr	r3, [r3, #0]
100132bc:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
100132be:	46c0      	nop			; (mov r8, r8)
100132c0:	4b0f      	ldr	r3, [pc, #60]	; (10013300 <at_ke_msg_send+0x7c>)
100132c2:	681b      	ldr	r3, [r3, #0]
100132c4:	2003      	movs	r0, #3
100132c6:	4798      	blx	r3
100132c8:	1e03      	subs	r3, r0, #0
100132ca:	d1f9      	bne.n	100132c0 <at_ke_msg_send+0x3c>
		pwr_disable_arm_wakeup(1<<1);
100132cc:	4b0d      	ldr	r3, [pc, #52]	; (10013304 <at_ke_msg_send+0x80>)
100132ce:	681b      	ldr	r3, [r3, #0]
100132d0:	2002      	movs	r0, #2
100132d2:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
100132d4:	4b0c      	ldr	r3, [pc, #48]	; (10013308 <at_ke_msg_send+0x84>)
100132d6:	2201      	movs	r2, #1
100132d8:	601a      	str	r2, [r3, #0]
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
	}
}
100132da:	e005      	b.n	100132e8 <at_ke_msg_send+0x64>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
100132dc:	4b0b      	ldr	r3, [pc, #44]	; (1001330c <at_ke_msg_send+0x88>)
100132de:	681a      	ldr	r2, [r3, #0]
100132e0:	4b0b      	ldr	r3, [pc, #44]	; (10013310 <at_ke_msg_send+0x8c>)
100132e2:	681b      	ldr	r3, [r3, #0]
100132e4:	0018      	movs	r0, r3
100132e6:	4790      	blx	r2
	}
}
100132e8:	46c0      	nop			; (mov r8, r8)
100132ea:	46bd      	mov	sp, r7
100132ec:	b004      	add	sp, #16
100132ee:	bd80      	pop	{r7, pc}
100132f0:	4000b1ec 	.word	0x4000b1ec
100132f4:	1001bf24 	.word	0x1001bf24
100132f8:	1001bf0c 	.word	0x1001bf0c
100132fc:	1001bf14 	.word	0x1001bf14
10013300:	1001bf18 	.word	0x1001bf18
10013304:	1001bf10 	.word	0x1001bf10
10013308:	4000b020 	.word	0x4000b020
1001330c:	1001bf2c 	.word	0x1001bf2c
10013310:	1001bf1c 	.word	0x1001bf1c

10013314 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
10013314:	b590      	push	{r4, r7, lr}
10013316:	b087      	sub	sp, #28
10013318:	af00      	add	r7, sp, #0
1001331a:	6078      	str	r0, [r7, #4]
1001331c:	6039      	str	r1, [r7, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
1001331e:	687b      	ldr	r3, [r7, #4]
10013320:	617b      	str	r3, [r7, #20]
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
10013322:	2312      	movs	r3, #18
10013324:	18fb      	adds	r3, r7, r3
10013326:	697a      	ldr	r2, [r7, #20]
10013328:	8852      	ldrh	r2, [r2, #2]
1001332a:	801a      	strh	r2, [r3, #0]
	if(gapm_get_task_from_id != NULL)
1001332c:	4b1b      	ldr	r3, [pc, #108]	; (1001339c <platform_interface_send+0x88>)
1001332e:	681b      	ldr	r3, [r3, #0]
10013330:	2b00      	cmp	r3, #0
10013332:	d00a      	beq.n	1001334a <platform_interface_send+0x36>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
10013334:	4b19      	ldr	r3, [pc, #100]	; (1001339c <platform_interface_send+0x88>)
10013336:	681b      	ldr	r3, [r3, #0]
10013338:	2212      	movs	r2, #18
1001333a:	18ba      	adds	r2, r7, r2
1001333c:	8812      	ldrh	r2, [r2, #0]
1001333e:	0010      	movs	r0, r2
10013340:	4798      	blx	r3
10013342:	0003      	movs	r3, r0
10013344:	001a      	movs	r2, r3
10013346:	697b      	ldr	r3, [r7, #20]
10013348:	805a      	strh	r2, [r3, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1001334a:	4b15      	ldr	r3, [pc, #84]	; (100133a0 <platform_interface_send+0x8c>)
1001334c:	681c      	ldr	r4, [r3, #0]
1001334e:	697b      	ldr	r3, [r7, #20]
10013350:	8818      	ldrh	r0, [r3, #0]
10013352:	697b      	ldr	r3, [r7, #20]
10013354:	8859      	ldrh	r1, [r3, #2]
10013356:	697b      	ldr	r3, [r7, #20]
10013358:	889a      	ldrh	r2, [r3, #4]
1001335a:	697b      	ldr	r3, [r7, #20]
1001335c:	88db      	ldrh	r3, [r3, #6]
1001335e:	47a0      	blx	r4
10013360:	0003      	movs	r3, r0
10013362:	60fb      	str	r3, [r7, #12]
											
	//no params
	if (p_msg_hdr->param_len == 0)
10013364:	697b      	ldr	r3, [r7, #20]
10013366:	88db      	ldrh	r3, [r3, #6]
10013368:	2b00      	cmp	r3, #0
1001336a:	d104      	bne.n	10013376 <platform_interface_send+0x62>
	{
		// Send message directly
		at_ke_msg_send(params);
1001336c:	68fb      	ldr	r3, [r7, #12]
1001336e:	0018      	movs	r0, r3
10013370:	4b0c      	ldr	r3, [pc, #48]	; (100133a4 <platform_interface_send+0x90>)
10013372:	4798      	blx	r3
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
		// Send the kernel message
		at_ke_msg_send(params);
	}
}
10013374:	e00d      	b.n	10013392 <platform_interface_send+0x7e>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
10013376:	687b      	ldr	r3, [r7, #4]
10013378:	3308      	adds	r3, #8
1001337a:	0019      	movs	r1, r3
1001337c:	697b      	ldr	r3, [r7, #20]
1001337e:	88db      	ldrh	r3, [r3, #6]
10013380:	001a      	movs	r2, r3
10013382:	68fb      	ldr	r3, [r7, #12]
10013384:	0018      	movs	r0, r3
10013386:	4b08      	ldr	r3, [pc, #32]	; (100133a8 <platform_interface_send+0x94>)
10013388:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1001338a:	68fb      	ldr	r3, [r7, #12]
1001338c:	0018      	movs	r0, r3
1001338e:	4b05      	ldr	r3, [pc, #20]	; (100133a4 <platform_interface_send+0x90>)
10013390:	4798      	blx	r3
	}
}
10013392:	46c0      	nop			; (mov r8, r8)
10013394:	46bd      	mov	sp, r7
10013396:	b007      	add	sp, #28
10013398:	bd90      	pop	{r4, r7, pc}
1001339a:	46c0      	nop			; (mov r8, r8)
1001339c:	1001bf3c 	.word	0x1001bf3c
100133a0:	1001bf28 	.word	0x1001bf28
100133a4:	10013285 	.word	0x10013285
100133a8:	10018e1b 	.word	0x10018e1b

100133ac <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
100133ac:	b590      	push	{r4, r7, lr}
100133ae:	b085      	sub	sp, #20
100133b0:	af00      	add	r7, sp, #0
100133b2:	0004      	movs	r4, r0
100133b4:	0008      	movs	r0, r1
100133b6:	603a      	str	r2, [r7, #0]
100133b8:	0019      	movs	r1, r3
100133ba:	1dfb      	adds	r3, r7, #7
100133bc:	1c22      	adds	r2, r4, #0
100133be:	701a      	strb	r2, [r3, #0]
100133c0:	1dbb      	adds	r3, r7, #6
100133c2:	1c02      	adds	r2, r0, #0
100133c4:	701a      	strb	r2, [r3, #0]
100133c6:	1d3b      	adds	r3, r7, #4
100133c8:	1c0a      	adds	r2, r1, #0
100133ca:	801a      	strh	r2, [r3, #0]
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
100133cc:	4b19      	ldr	r3, [pc, #100]	; (10013434 <send_plf_int_msg_ind+0x88>)
100133ce:	681a      	ldr	r2, [r3, #0]
100133d0:	4b19      	ldr	r3, [pc, #100]	; (10013438 <send_plf_int_msg_ind+0x8c>)
100133d2:	681b      	ldr	r3, [r3, #0]
100133d4:	0018      	movs	r0, r3
100133d6:	4790      	blx	r2
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
100133d8:	4b18      	ldr	r3, [pc, #96]	; (1001343c <send_plf_int_msg_ind+0x90>)
100133da:	681c      	ldr	r4, [r3, #0]
100133dc:	1dbb      	adds	r3, r7, #6
100133de:	781b      	ldrb	r3, [r3, #0]
100133e0:	021b      	lsls	r3, r3, #8
100133e2:	b21a      	sxth	r2, r3
100133e4:	1dfb      	adds	r3, r7, #7
100133e6:	781b      	ldrb	r3, [r3, #0]
100133e8:	b21b      	sxth	r3, r3
100133ea:	4313      	orrs	r3, r2
100133ec:	b21b      	sxth	r3, r3
100133ee:	b29a      	uxth	r2, r3
100133f0:	1d3b      	adds	r3, r7, #4
100133f2:	8819      	ldrh	r1, [r3, #0]
100133f4:	23a0      	movs	r3, #160	; 0xa0
100133f6:	00d8      	lsls	r0, r3, #3
100133f8:	000b      	movs	r3, r1
100133fa:	2105      	movs	r1, #5
100133fc:	47a0      	blx	r4
100133fe:	0003      	movs	r3, r0
10013400:	60fb      	str	r3, [r7, #12]
											
	//no params
	if(params != NULL) {
10013402:	68fb      	ldr	r3, [r7, #12]
10013404:	2b00      	cmp	r3, #0
10013406:	d011      	beq.n	1001342c <send_plf_int_msg_ind+0x80>
		if((data_len != 0) && (NULL != data))
10013408:	1d3b      	adds	r3, r7, #4
1001340a:	881b      	ldrh	r3, [r3, #0]
1001340c:	2b00      	cmp	r3, #0
1001340e:	d009      	beq.n	10013424 <send_plf_int_msg_ind+0x78>
10013410:	683b      	ldr	r3, [r7, #0]
10013412:	2b00      	cmp	r3, #0
10013414:	d006      	beq.n	10013424 <send_plf_int_msg_ind+0x78>
		{
			//copy params
			memcpy(params, data, data_len);
10013416:	1d3b      	adds	r3, r7, #4
10013418:	881a      	ldrh	r2, [r3, #0]
1001341a:	6839      	ldr	r1, [r7, #0]
1001341c:	68fb      	ldr	r3, [r7, #12]
1001341e:	0018      	movs	r0, r3
10013420:	4b07      	ldr	r3, [pc, #28]	; (10013440 <send_plf_int_msg_ind+0x94>)
10013422:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
10013424:	68fb      	ldr	r3, [r7, #12]
10013426:	0018      	movs	r0, r3
10013428:	4b06      	ldr	r3, [pc, #24]	; (10013444 <send_plf_int_msg_ind+0x98>)
1001342a:	4798      	blx	r3
	}
}
1001342c:	46c0      	nop			; (mov r8, r8)
1001342e:	46bd      	mov	sp, r7
10013430:	b005      	add	sp, #20
10013432:	bd90      	pop	{r4, r7, pc}
10013434:	1001bf2c 	.word	0x1001bf2c
10013438:	1001bf1c 	.word	0x1001bf1c
1001343c:	1001bf28 	.word	0x1001bf28
10013440:	10018e1b 	.word	0x10018e1b
10013444:	10013285 	.word	0x10013285

10013448 <NMI_MsgQueueDestroyOnKeID>:
	os_sem_up(&pHandle->strCriticalSection);
	return MsgQueueNoMsgs;
}
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
10013448:	b580      	push	{r7, lr}
1001344a:	b086      	sub	sp, #24
1001344c:	af00      	add	r7, sp, #0
1001344e:	6078      	str	r0, [r7, #4]
10013450:	000a      	movs	r2, r1
10013452:	1cbb      	adds	r3, r7, #2
10013454:	801a      	strh	r2, [r3, #0]
	int num_of_freed=0;
10013456:	2300      	movs	r3, #0
10013458:	617b      	str	r3, [r7, #20]
	Message * current , *prev = NULL;
1001345a:	2300      	movs	r3, #0
1001345c:	60fb      	str	r3, [r7, #12]
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1001345e:	687b      	ldr	r3, [r7, #4]
10013460:	2b00      	cmp	r3, #0
10013462:	d105      	bne.n	10013470 <NMI_MsgQueueDestroyOnKeID+0x28>
10013464:	687b      	ldr	r3, [r7, #4]
10013466:	6a1b      	ldr	r3, [r3, #32]
10013468:	2b00      	cmp	r3, #0
1001346a:	d101      	bne.n	10013470 <NMI_MsgQueueDestroyOnKeID+0x28>
	{
		return num_of_freed;
1001346c:	697b      	ldr	r3, [r7, #20]
1001346e:	e03f      	b.n	100134f0 <NMI_MsgQueueDestroyOnKeID+0xa8>
	}

	current = pHandle->pstrMessageList;
10013470:	687b      	ldr	r3, [r7, #4]
10013472:	6a1b      	ldr	r3, [r3, #32]
10013474:	613b      	str	r3, [r7, #16]
	os_sem_down(&pHandle->strCriticalSection);
10013476:	4b20      	ldr	r3, [pc, #128]	; (100134f8 <NMI_MsgQueueDestroyOnKeID+0xb0>)
10013478:	681b      	ldr	r3, [r3, #0]
1001347a:	687a      	ldr	r2, [r7, #4]
1001347c:	3214      	adds	r2, #20
1001347e:	0010      	movs	r0, r2
10013480:	4798      	blx	r3
	while(NULL != current)
10013482:	e02b      	b.n	100134dc <NMI_MsgQueueDestroyOnKeID+0x94>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
10013484:	693b      	ldr	r3, [r7, #16]
10013486:	681b      	ldr	r3, [r3, #0]
10013488:	889b      	ldrh	r3, [r3, #4]
1001348a:	1cba      	adds	r2, r7, #2
1001348c:	8812      	ldrh	r2, [r2, #0]
1001348e:	429a      	cmp	r2, r3
10013490:	d11f      	bne.n	100134d2 <NMI_MsgQueueDestroyOnKeID+0x8a>
		{
			num_of_freed++;
10013492:	697b      	ldr	r3, [r7, #20]
10013494:	3301      	adds	r3, #1
10013496:	617b      	str	r3, [r7, #20]
			if(NULL != prev)
10013498:	68fb      	ldr	r3, [r7, #12]
1001349a:	2b00      	cmp	r3, #0
1001349c:	d00c      	beq.n	100134b8 <NMI_MsgQueueDestroyOnKeID+0x70>
			{
				prev->pstrNext = current->pstrNext;
1001349e:	693b      	ldr	r3, [r7, #16]
100134a0:	689a      	ldr	r2, [r3, #8]
100134a2:	68fb      	ldr	r3, [r7, #12]
100134a4:	609a      	str	r2, [r3, #8]
				ke_free(current);
100134a6:	4b15      	ldr	r3, [pc, #84]	; (100134fc <NMI_MsgQueueDestroyOnKeID+0xb4>)
100134a8:	681b      	ldr	r3, [r3, #0]
100134aa:	693a      	ldr	r2, [r7, #16]
100134ac:	0010      	movs	r0, r2
100134ae:	4798      	blx	r3
				current = prev->pstrNext;
100134b0:	68fb      	ldr	r3, [r7, #12]
100134b2:	689b      	ldr	r3, [r3, #8]
100134b4:	613b      	str	r3, [r7, #16]
100134b6:	e011      	b.n	100134dc <NMI_MsgQueueDestroyOnKeID+0x94>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
100134b8:	693b      	ldr	r3, [r7, #16]
100134ba:	689a      	ldr	r2, [r3, #8]
100134bc:	687b      	ldr	r3, [r7, #4]
100134be:	621a      	str	r2, [r3, #32]
				ke_free(current);
100134c0:	4b0e      	ldr	r3, [pc, #56]	; (100134fc <NMI_MsgQueueDestroyOnKeID+0xb4>)
100134c2:	681b      	ldr	r3, [r3, #0]
100134c4:	693a      	ldr	r2, [r7, #16]
100134c6:	0010      	movs	r0, r2
100134c8:	4798      	blx	r3
				current = pHandle->pstrMessageList;
100134ca:	687b      	ldr	r3, [r7, #4]
100134cc:	6a1b      	ldr	r3, [r3, #32]
100134ce:	613b      	str	r3, [r7, #16]
100134d0:	e004      	b.n	100134dc <NMI_MsgQueueDestroyOnKeID+0x94>
			}
		}
		else
		{
			prev = current;
100134d2:	693b      	ldr	r3, [r7, #16]
100134d4:	60fb      	str	r3, [r7, #12]
			current = current ->pstrNext;
100134d6:	693b      	ldr	r3, [r7, #16]
100134d8:	689b      	ldr	r3, [r3, #8]
100134da:	613b      	str	r3, [r7, #16]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
100134dc:	693b      	ldr	r3, [r7, #16]
100134de:	2b00      	cmp	r3, #0
100134e0:	d1d0      	bne.n	10013484 <NMI_MsgQueueDestroyOnKeID+0x3c>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
100134e2:	4b07      	ldr	r3, [pc, #28]	; (10013500 <NMI_MsgQueueDestroyOnKeID+0xb8>)
100134e4:	681b      	ldr	r3, [r3, #0]
100134e6:	687a      	ldr	r2, [r7, #4]
100134e8:	3214      	adds	r2, #20
100134ea:	0010      	movs	r0, r2
100134ec:	4798      	blx	r3
	return num_of_freed;
100134ee:	697b      	ldr	r3, [r7, #20]
}
100134f0:	0018      	movs	r0, r3
100134f2:	46bd      	mov	sp, r7
100134f4:	b006      	add	sp, #24
100134f6:	bd80      	pop	{r7, pc}
100134f8:	1001bf30 	.word	0x1001bf30
100134fc:	1001bf38 	.word	0x1001bf38
10013500:	1001bf2c 	.word	0x1001bf2c

10013504 <platform_start_event_timeout>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
10013504:	b580      	push	{r7, lr}
10013506:	b086      	sub	sp, #24
10013508:	af00      	add	r7, sp, #0
1001350a:	6078      	str	r0, [r7, #4]
	uint8_t msg[8+5] = {0};
1001350c:	2308      	movs	r3, #8
1001350e:	18fb      	adds	r3, r7, r3
10013510:	0018      	movs	r0, r3
10013512:	230d      	movs	r3, #13
10013514:	001a      	movs	r2, r3
10013516:	2100      	movs	r1, #0
10013518:	4b5a      	ldr	r3, [pc, #360]	; (10013684 <platform_start_event_timeout+0x180>)
1001351a:	4798      	blx	r3
	uint8_t u16TxLen = 0;
1001351c:	2317      	movs	r3, #23
1001351e:	18fb      	adds	r3, r7, r3
10013520:	2200      	movs	r2, #0
10013522:	701a      	strb	r2, [r3, #0]

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
10013524:	2317      	movs	r3, #23
10013526:	18fb      	adds	r3, r7, r3
10013528:	781b      	ldrb	r3, [r3, #0]
1001352a:	2217      	movs	r2, #23
1001352c:	18ba      	adds	r2, r7, r2
1001352e:	1c59      	adds	r1, r3, #1
10013530:	7011      	strb	r1, [r2, #0]
10013532:	001a      	movs	r2, r3
10013534:	2308      	movs	r3, #8
10013536:	18fb      	adds	r3, r7, r3
10013538:	2119      	movs	r1, #25
1001353a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1001353c:	2317      	movs	r3, #23
1001353e:	18fb      	adds	r3, r7, r3
10013540:	781b      	ldrb	r3, [r3, #0]
10013542:	2217      	movs	r2, #23
10013544:	18ba      	adds	r2, r7, r2
10013546:	1c59      	adds	r1, r3, #1
10013548:	7011      	strb	r1, [r2, #0]
1001354a:	001a      	movs	r2, r3
1001354c:	2308      	movs	r3, #8
1001354e:	18fb      	adds	r3, r7, r3
10013550:	2103      	movs	r1, #3
10013552:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
10013554:	2317      	movs	r3, #23
10013556:	18fb      	adds	r3, r7, r3
10013558:	781b      	ldrb	r3, [r3, #0]
1001355a:	2217      	movs	r2, #23
1001355c:	18ba      	adds	r2, r7, r2
1001355e:	1c59      	adds	r1, r3, #1
10013560:	7011      	strb	r1, [r2, #0]
10013562:	001a      	movs	r2, r3
10013564:	2308      	movs	r3, #8
10013566:	18fb      	adds	r3, r7, r3
10013568:	2103      	movs	r1, #3
1001356a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
1001356c:	2317      	movs	r3, #23
1001356e:	18fb      	adds	r3, r7, r3
10013570:	781b      	ldrb	r3, [r3, #0]
10013572:	2217      	movs	r2, #23
10013574:	18ba      	adds	r2, r7, r2
10013576:	1c59      	adds	r1, r3, #1
10013578:	7011      	strb	r1, [r2, #0]
1001357a:	001a      	movs	r2, r3
1001357c:	2308      	movs	r3, #8
1001357e:	18fb      	adds	r3, r7, r3
10013580:	2100      	movs	r1, #0
10013582:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
10013584:	2317      	movs	r3, #23
10013586:	18fb      	adds	r3, r7, r3
10013588:	781b      	ldrb	r3, [r3, #0]
1001358a:	2217      	movs	r2, #23
1001358c:	18ba      	adds	r2, r7, r2
1001358e:	1c59      	adds	r1, r3, #1
10013590:	7011      	strb	r1, [r2, #0]
10013592:	001a      	movs	r2, r3
10013594:	2308      	movs	r3, #8
10013596:	18fb      	adds	r3, r7, r3
10013598:	2105      	movs	r1, #5
1001359a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
1001359c:	2317      	movs	r3, #23
1001359e:	18fb      	adds	r3, r7, r3
100135a0:	781b      	ldrb	r3, [r3, #0]
100135a2:	2217      	movs	r2, #23
100135a4:	18ba      	adds	r2, r7, r2
100135a6:	1c59      	adds	r1, r3, #1
100135a8:	7011      	strb	r1, [r2, #0]
100135aa:	001a      	movs	r2, r3
100135ac:	2308      	movs	r3, #8
100135ae:	18fb      	adds	r3, r7, r3
100135b0:	2100      	movs	r1, #0
100135b2:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((5) & 0x00FF );
100135b4:	2317      	movs	r3, #23
100135b6:	18fb      	adds	r3, r7, r3
100135b8:	781b      	ldrb	r3, [r3, #0]
100135ba:	2217      	movs	r2, #23
100135bc:	18ba      	adds	r2, r7, r2
100135be:	1c59      	adds	r1, r3, #1
100135c0:	7011      	strb	r1, [r2, #0]
100135c2:	001a      	movs	r2, r3
100135c4:	2308      	movs	r3, #8
100135c6:	18fb      	adds	r3, r7, r3
100135c8:	2105      	movs	r1, #5
100135ca:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
100135cc:	2317      	movs	r3, #23
100135ce:	18fb      	adds	r3, r7, r3
100135d0:	781b      	ldrb	r3, [r3, #0]
100135d2:	2217      	movs	r2, #23
100135d4:	18ba      	adds	r2, r7, r2
100135d6:	1c59      	adds	r1, r3, #1
100135d8:	7011      	strb	r1, [r2, #0]
100135da:	001a      	movs	r2, r3
100135dc:	2308      	movs	r3, #8
100135de:	18fb      	adds	r3, r7, r3
100135e0:	2100      	movs	r1, #0
100135e2:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
100135e4:	2317      	movs	r3, #23
100135e6:	18fb      	adds	r3, r7, r3
100135e8:	781b      	ldrb	r3, [r3, #0]
100135ea:	2217      	movs	r2, #23
100135ec:	18ba      	adds	r2, r7, r2
100135ee:	1c59      	adds	r1, r3, #1
100135f0:	7011      	strb	r1, [r2, #0]
100135f2:	001a      	movs	r2, r3
100135f4:	687b      	ldr	r3, [r7, #4]
100135f6:	b2d9      	uxtb	r1, r3
100135f8:	2308      	movs	r3, #8
100135fa:	18fb      	adds	r3, r7, r3
100135fc:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
100135fe:	2317      	movs	r3, #23
10013600:	18fb      	adds	r3, r7, r3
10013602:	781b      	ldrb	r3, [r3, #0]
10013604:	2217      	movs	r2, #23
10013606:	18ba      	adds	r2, r7, r2
10013608:	1c59      	adds	r1, r3, #1
1001360a:	7011      	strb	r1, [r2, #0]
1001360c:	001a      	movs	r2, r3
1001360e:	687b      	ldr	r3, [r7, #4]
10013610:	0a1b      	lsrs	r3, r3, #8
10013612:	b2d9      	uxtb	r1, r3
10013614:	2308      	movs	r3, #8
10013616:	18fb      	adds	r3, r7, r3
10013618:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1001361a:	2317      	movs	r3, #23
1001361c:	18fb      	adds	r3, r7, r3
1001361e:	781b      	ldrb	r3, [r3, #0]
10013620:	2217      	movs	r2, #23
10013622:	18ba      	adds	r2, r7, r2
10013624:	1c59      	adds	r1, r3, #1
10013626:	7011      	strb	r1, [r2, #0]
10013628:	001a      	movs	r2, r3
1001362a:	687b      	ldr	r3, [r7, #4]
1001362c:	0c1b      	lsrs	r3, r3, #16
1001362e:	b2d9      	uxtb	r1, r3
10013630:	2308      	movs	r3, #8
10013632:	18fb      	adds	r3, r7, r3
10013634:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
10013636:	2317      	movs	r3, #23
10013638:	18fb      	adds	r3, r7, r3
1001363a:	781b      	ldrb	r3, [r3, #0]
1001363c:	2217      	movs	r2, #23
1001363e:	18ba      	adds	r2, r7, r2
10013640:	1c59      	adds	r1, r3, #1
10013642:	7011      	strb	r1, [r2, #0]
10013644:	001a      	movs	r2, r3
10013646:	687b      	ldr	r3, [r7, #4]
10013648:	0e1b      	lsrs	r3, r3, #24
1001364a:	b2d9      	uxtb	r1, r3
1001364c:	2308      	movs	r3, #8
1001364e:	18fb      	adds	r3, r7, r3
10013650:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
10013652:	2317      	movs	r3, #23
10013654:	18fb      	adds	r3, r7, r3
10013656:	781b      	ldrb	r3, [r3, #0]
10013658:	2217      	movs	r2, #23
1001365a:	18ba      	adds	r2, r7, r2
1001365c:	1c59      	adds	r1, r3, #1
1001365e:	7011      	strb	r1, [r2, #0]
10013660:	001a      	movs	r2, r3
10013662:	2308      	movs	r3, #8
10013664:	18fb      	adds	r3, r7, r3
10013666:	2101      	movs	r1, #1
10013668:	5499      	strb	r1, [r3, r2]
	
	platform_interface_send(msg, u16TxLen);
1001366a:	2317      	movs	r3, #23
1001366c:	18fb      	adds	r3, r7, r3
1001366e:	781a      	ldrb	r2, [r3, #0]
10013670:	2308      	movs	r3, #8
10013672:	18fb      	adds	r3, r7, r3
10013674:	0011      	movs	r1, r2
10013676:	0018      	movs	r0, r3
10013678:	4b03      	ldr	r3, [pc, #12]	; (10013688 <platform_start_event_timeout+0x184>)
1001367a:	4798      	blx	r3
}
1001367c:	46c0      	nop			; (mov r8, r8)
1001367e:	46bd      	mov	sp, r7
10013680:	b006      	add	sp, #24
10013682:	bd80      	pop	{r7, pc}
10013684:	10018e2d 	.word	0x10018e2d
10013688:	10013315 	.word	0x10013315

1001368c <platform_stop_event_timeout>:

static void platform_stop_event_timeout(void)
{
1001368c:	b580      	push	{r7, lr}
1001368e:	b084      	sub	sp, #16
10013690:	af00      	add	r7, sp, #0
	uint8_t msg[8+5] = {0};
10013692:	003b      	movs	r3, r7
10013694:	0018      	movs	r0, r3
10013696:	230d      	movs	r3, #13
10013698:	001a      	movs	r2, r3
1001369a:	2100      	movs	r1, #0
1001369c:	4b50      	ldr	r3, [pc, #320]	; (100137e0 <platform_stop_event_timeout+0x154>)
1001369e:	4798      	blx	r3
	uint8_t u16TxLen = 0;
100136a0:	230f      	movs	r3, #15
100136a2:	18fb      	adds	r3, r7, r3
100136a4:	2200      	movs	r2, #0
100136a6:	701a      	strb	r2, [r3, #0]

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
100136a8:	230f      	movs	r3, #15
100136aa:	18fb      	adds	r3, r7, r3
100136ac:	781b      	ldrb	r3, [r3, #0]
100136ae:	220f      	movs	r2, #15
100136b0:	18ba      	adds	r2, r7, r2
100136b2:	1c59      	adds	r1, r3, #1
100136b4:	7011      	strb	r1, [r2, #0]
100136b6:	001a      	movs	r2, r3
100136b8:	003b      	movs	r3, r7
100136ba:	2119      	movs	r1, #25
100136bc:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
100136be:	230f      	movs	r3, #15
100136c0:	18fb      	adds	r3, r7, r3
100136c2:	781b      	ldrb	r3, [r3, #0]
100136c4:	220f      	movs	r2, #15
100136c6:	18ba      	adds	r2, r7, r2
100136c8:	1c59      	adds	r1, r3, #1
100136ca:	7011      	strb	r1, [r2, #0]
100136cc:	001a      	movs	r2, r3
100136ce:	003b      	movs	r3, r7
100136d0:	2103      	movs	r1, #3
100136d2:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
100136d4:	230f      	movs	r3, #15
100136d6:	18fb      	adds	r3, r7, r3
100136d8:	781b      	ldrb	r3, [r3, #0]
100136da:	220f      	movs	r2, #15
100136dc:	18ba      	adds	r2, r7, r2
100136de:	1c59      	adds	r1, r3, #1
100136e0:	7011      	strb	r1, [r2, #0]
100136e2:	001a      	movs	r2, r3
100136e4:	003b      	movs	r3, r7
100136e6:	2103      	movs	r1, #3
100136e8:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
100136ea:	230f      	movs	r3, #15
100136ec:	18fb      	adds	r3, r7, r3
100136ee:	781b      	ldrb	r3, [r3, #0]
100136f0:	220f      	movs	r2, #15
100136f2:	18ba      	adds	r2, r7, r2
100136f4:	1c59      	adds	r1, r3, #1
100136f6:	7011      	strb	r1, [r2, #0]
100136f8:	001a      	movs	r2, r3
100136fa:	003b      	movs	r3, r7
100136fc:	2100      	movs	r1, #0
100136fe:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
10013700:	230f      	movs	r3, #15
10013702:	18fb      	adds	r3, r7, r3
10013704:	781b      	ldrb	r3, [r3, #0]
10013706:	220f      	movs	r2, #15
10013708:	18ba      	adds	r2, r7, r2
1001370a:	1c59      	adds	r1, r3, #1
1001370c:	7011      	strb	r1, [r2, #0]
1001370e:	001a      	movs	r2, r3
10013710:	003b      	movs	r3, r7
10013712:	2105      	movs	r1, #5
10013714:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
10013716:	230f      	movs	r3, #15
10013718:	18fb      	adds	r3, r7, r3
1001371a:	781b      	ldrb	r3, [r3, #0]
1001371c:	220f      	movs	r2, #15
1001371e:	18ba      	adds	r2, r7, r2
10013720:	1c59      	adds	r1, r3, #1
10013722:	7011      	strb	r1, [r2, #0]
10013724:	001a      	movs	r2, r3
10013726:	003b      	movs	r3, r7
10013728:	2100      	movs	r1, #0
1001372a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((5) & 0x00FF );
1001372c:	230f      	movs	r3, #15
1001372e:	18fb      	adds	r3, r7, r3
10013730:	781b      	ldrb	r3, [r3, #0]
10013732:	220f      	movs	r2, #15
10013734:	18ba      	adds	r2, r7, r2
10013736:	1c59      	adds	r1, r3, #1
10013738:	7011      	strb	r1, [r2, #0]
1001373a:	001a      	movs	r2, r3
1001373c:	003b      	movs	r3, r7
1001373e:	2105      	movs	r1, #5
10013740:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
10013742:	230f      	movs	r3, #15
10013744:	18fb      	adds	r3, r7, r3
10013746:	781b      	ldrb	r3, [r3, #0]
10013748:	220f      	movs	r2, #15
1001374a:	18ba      	adds	r2, r7, r2
1001374c:	1c59      	adds	r1, r3, #1
1001374e:	7011      	strb	r1, [r2, #0]
10013750:	001a      	movs	r2, r3
10013752:	003b      	movs	r3, r7
10013754:	2100      	movs	r1, #0
10013756:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = (uint8_t)((0) & 0x00FF );
10013758:	230f      	movs	r3, #15
1001375a:	18fb      	adds	r3, r7, r3
1001375c:	781b      	ldrb	r3, [r3, #0]
1001375e:	220f      	movs	r2, #15
10013760:	18ba      	adds	r2, r7, r2
10013762:	1c59      	adds	r1, r3, #1
10013764:	7011      	strb	r1, [r2, #0]
10013766:	001a      	movs	r2, r3
10013768:	003b      	movs	r3, r7
1001376a:	2100      	movs	r1, #0
1001376c:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 8) & 0x00FF) ;
1001376e:	230f      	movs	r3, #15
10013770:	18fb      	adds	r3, r7, r3
10013772:	781b      	ldrb	r3, [r3, #0]
10013774:	220f      	movs	r2, #15
10013776:	18ba      	adds	r2, r7, r2
10013778:	1c59      	adds	r1, r3, #1
1001377a:	7011      	strb	r1, [r2, #0]
1001377c:	001a      	movs	r2, r3
1001377e:	003b      	movs	r3, r7
10013780:	2100      	movs	r1, #0
10013782:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
10013784:	230f      	movs	r3, #15
10013786:	18fb      	adds	r3, r7, r3
10013788:	781b      	ldrb	r3, [r3, #0]
1001378a:	220f      	movs	r2, #15
1001378c:	18ba      	adds	r2, r7, r2
1001378e:	1c59      	adds	r1, r3, #1
10013790:	7011      	strb	r1, [r2, #0]
10013792:	001a      	movs	r2, r3
10013794:	003b      	movs	r3, r7
10013796:	2100      	movs	r1, #0
10013798:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
1001379a:	230f      	movs	r3, #15
1001379c:	18fb      	adds	r3, r7, r3
1001379e:	781b      	ldrb	r3, [r3, #0]
100137a0:	220f      	movs	r2, #15
100137a2:	18ba      	adds	r2, r7, r2
100137a4:	1c59      	adds	r1, r3, #1
100137a6:	7011      	strb	r1, [r2, #0]
100137a8:	001a      	movs	r2, r3
100137aa:	003b      	movs	r3, r7
100137ac:	2100      	movs	r1, #0
100137ae:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = ((0) & 0x00FF );
100137b0:	230f      	movs	r3, #15
100137b2:	18fb      	adds	r3, r7, r3
100137b4:	781b      	ldrb	r3, [r3, #0]
100137b6:	220f      	movs	r2, #15
100137b8:	18ba      	adds	r2, r7, r2
100137ba:	1c59      	adds	r1, r3, #1
100137bc:	7011      	strb	r1, [r2, #0]
100137be:	001a      	movs	r2, r3
100137c0:	003b      	movs	r3, r7
100137c2:	2100      	movs	r1, #0
100137c4:	5499      	strb	r1, [r3, r2]
	
	platform_interface_send(msg, u16TxLen);
100137c6:	230f      	movs	r3, #15
100137c8:	18fb      	adds	r3, r7, r3
100137ca:	781a      	ldrb	r2, [r3, #0]
100137cc:	003b      	movs	r3, r7
100137ce:	0011      	movs	r1, r2
100137d0:	0018      	movs	r0, r3
100137d2:	4b04      	ldr	r3, [pc, #16]	; (100137e4 <platform_stop_event_timeout+0x158>)
100137d4:	4798      	blx	r3
}
100137d6:	46c0      	nop			; (mov r8, r8)
100137d8:	46bd      	mov	sp, r7
100137da:	b004      	add	sp, #16
100137dc:	bd80      	pop	{r7, pc}
100137de:	46c0      	nop			; (mov r8, r8)
100137e0:	10018e2d 	.word	0x10018e2d
100137e4:	10013315 	.word	0x10013315

100137e8 <platform_event_wait>:

plf_drv_status platform_event_wait(uint32_t timeout)
{
100137e8:	b590      	push	{r4, r7, lr}
100137ea:	b087      	sub	sp, #28
100137ec:	af00      	add	r7, sp, #0
100137ee:	6078      	str	r0, [r7, #4]
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
100137f0:	2317      	movs	r3, #23
100137f2:	18fb      	adds	r3, r7, r3
100137f4:	2200      	movs	r2, #0
100137f6:	701a      	strb	r2, [r3, #0]
	uint8_t bEventTimeoutFlag = 0;
100137f8:	2316      	movs	r3, #22
100137fa:	18fb      	adds	r3, r7, r3
100137fc:	2200      	movs	r2, #0
100137fe:	701a      	strb	r2, [r3, #0]
	uint8_t bLoopAgain = 0;
10013800:	2315      	movs	r3, #21
10013802:	18fb      	adds	r3, r7, r3
10013804:	2200      	movs	r2, #0
10013806:	701a      	strb	r2, [r3, #0]
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
10013808:	687b      	ldr	r3, [r7, #4]
1001380a:	3301      	adds	r3, #1
1001380c:	d00b      	beq.n	10013826 <platform_event_wait+0x3e>
1001380e:	687b      	ldr	r3, [r7, #4]
10013810:	2b00      	cmp	r3, #0
10013812:	d008      	beq.n	10013826 <platform_event_wait+0x3e>
	{			
		platform_start_event_timeout(timeout-1);
10013814:	687b      	ldr	r3, [r7, #4]
10013816:	3b01      	subs	r3, #1
10013818:	0018      	movs	r0, r3
1001381a:	4b80      	ldr	r3, [pc, #512]	; (10013a1c <platform_event_wait+0x234>)
1001381c:	4798      	blx	r3
		bEventTimeoutFlag = 1;
1001381e:	2316      	movs	r3, #22
10013820:	18fb      	adds	r3, r7, r3
10013822:	2201      	movs	r2, #1
10013824:	701a      	strb	r2, [r3, #0]
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
10013826:	4b7e      	ldr	r3, [pc, #504]	; (10013a20 <platform_event_wait+0x238>)
10013828:	681a      	ldr	r2, [r3, #0]
1001382a:	4b7e      	ldr	r3, [pc, #504]	; (10013a24 <platform_event_wait+0x23c>)
1001382c:	681b      	ldr	r3, [r3, #0]
1001382e:	497e      	ldr	r1, [pc, #504]	; (10013a28 <platform_event_wait+0x240>)
10013830:	0018      	movs	r0, r3
10013832:	4790      	blx	r2
10013834:	1e03      	subs	r3, r0, #0
10013836:	d000      	beq.n	1001383a <platform_event_wait+0x52>
10013838:	e0cb      	b.n	100139d2 <platform_event_wait+0x1ea>
		{
			uint16_t msg_id = rcv_msg->id;
1001383a:	4b7b      	ldr	r3, [pc, #492]	; (10013a28 <platform_event_wait+0x240>)
1001383c:	681a      	ldr	r2, [r3, #0]
1001383e:	2312      	movs	r3, #18
10013840:	18fb      	adds	r3, r7, r3
10013842:	8892      	ldrh	r2, [r2, #4]
10013844:	801a      	strh	r2, [r3, #0]
			uint16_t src_id = rcv_msg->src_id;
10013846:	4b78      	ldr	r3, [pc, #480]	; (10013a28 <platform_event_wait+0x240>)
10013848:	681a      	ldr	r2, [r3, #0]
1001384a:	2310      	movs	r3, #16
1001384c:	18fb      	adds	r3, r7, r3
1001384e:	8912      	ldrh	r2, [r2, #8]
10013850:	801a      	strh	r2, [r3, #0]
			uint8_t* data = (uint8_t*)rcv_msg->param;
10013852:	4b75      	ldr	r3, [pc, #468]	; (10013a28 <platform_event_wait+0x240>)
10013854:	681b      	ldr	r3, [r3, #0]
10013856:	330c      	adds	r3, #12
10013858:	60fb      	str	r3, [r7, #12]
			uint16_t len = rcv_msg->param_len;
1001385a:	4b73      	ldr	r3, [pc, #460]	; (10013a28 <platform_event_wait+0x240>)
1001385c:	681a      	ldr	r2, [r3, #0]
1001385e:	230a      	movs	r3, #10
10013860:	18fb      	adds	r3, r7, r3
10013862:	8952      	ldrh	r2, [r2, #10]
10013864:	801a      	strh	r2, [r3, #0]
			bLoopAgain = 0;
10013866:	2315      	movs	r3, #21
10013868:	18fb      	adds	r3, r7, r3
1001386a:	2200      	movs	r2, #0
1001386c:	701a      	strb	r2, [r3, #0]
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1001386e:	4b6e      	ldr	r3, [pc, #440]	; (10013a28 <platform_event_wait+0x240>)
10013870:	681b      	ldr	r3, [r3, #0]
10013872:	889a      	ldrh	r2, [r3, #4]
10013874:	23cd      	movs	r3, #205	; 0xcd
10013876:	009b      	lsls	r3, r3, #2
10013878:	429a      	cmp	r2, r3
1001387a:	d006      	beq.n	1001388a <platform_event_wait+0xa2>
1001387c:	2316      	movs	r3, #22
1001387e:	18fb      	adds	r3, r7, r3
10013880:	781b      	ldrb	r3, [r3, #0]
10013882:	2b00      	cmp	r3, #0
10013884:	d001      	beq.n	1001388a <platform_event_wait+0xa2>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
10013886:	4b69      	ldr	r3, [pc, #420]	; (10013a2c <platform_event_wait+0x244>)
10013888:	4798      	blx	r3
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1001388a:	2312      	movs	r3, #18
1001388c:	18fb      	adds	r3, r7, r3
1001388e:	881a      	ldrh	r2, [r3, #0]
10013890:	23a0      	movs	r3, #160	; 0xa0
10013892:	00db      	lsls	r3, r3, #3
10013894:	429a      	cmp	r2, r3
10013896:	d136      	bne.n	10013906 <platform_event_wait+0x11e>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
10013898:	4b65      	ldr	r3, [pc, #404]	; (10013a30 <platform_event_wait+0x248>)
1001389a:	881b      	ldrh	r3, [r3, #0]
1001389c:	001a      	movs	r2, r3
1001389e:	230a      	movs	r3, #10
100138a0:	18fb      	adds	r3, r7, r3
100138a2:	881b      	ldrh	r3, [r3, #0]
100138a4:	18d2      	adds	r2, r2, r3
100138a6:	23a0      	movs	r3, #160	; 0xa0
100138a8:	009b      	lsls	r3, r3, #2
100138aa:	429a      	cmp	r2, r3
100138ac:	dd03      	ble.n	100138b6 <platform_event_wait+0xce>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
100138ae:	4b60      	ldr	r3, [pc, #384]	; (10013a30 <platform_event_wait+0x248>)
100138b0:	2280      	movs	r2, #128	; 0x80
100138b2:	0092      	lsls	r2, r2, #2
100138b4:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
100138b6:	4b5e      	ldr	r3, [pc, #376]	; (10013a30 <platform_event_wait+0x248>)
100138b8:	881b      	ldrh	r3, [r3, #0]
100138ba:	001a      	movs	r2, r3
100138bc:	4b5d      	ldr	r3, [pc, #372]	; (10013a34 <platform_event_wait+0x24c>)
100138be:	18d0      	adds	r0, r2, r3
100138c0:	230a      	movs	r3, #10
100138c2:	18fb      	adds	r3, r7, r3
100138c4:	881a      	ldrh	r2, [r3, #0]
100138c6:	68fb      	ldr	r3, [r7, #12]
100138c8:	0019      	movs	r1, r3
100138ca:	4b5b      	ldr	r3, [pc, #364]	; (10013a38 <platform_event_wait+0x250>)
100138cc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
100138ce:	4b58      	ldr	r3, [pc, #352]	; (10013a30 <platform_event_wait+0x248>)
100138d0:	881b      	ldrh	r3, [r3, #0]
100138d2:	001a      	movs	r2, r3
100138d4:	4b57      	ldr	r3, [pc, #348]	; (10013a34 <platform_event_wait+0x24c>)
100138d6:	18d1      	adds	r1, r2, r3
100138d8:	230a      	movs	r3, #10
100138da:	18fb      	adds	r3, r7, r3
100138dc:	881a      	ldrh	r2, [r3, #0]
100138de:	2310      	movs	r3, #16
100138e0:	18fb      	adds	r3, r7, r3
100138e2:	881b      	ldrh	r3, [r3, #0]
100138e4:	0018      	movs	r0, r3
100138e6:	4b55      	ldr	r3, [pc, #340]	; (10013a3c <platform_event_wait+0x254>)
100138e8:	4798      	blx	r3
				plf_event_buff_index += len;
100138ea:	4b51      	ldr	r3, [pc, #324]	; (10013a30 <platform_event_wait+0x248>)
100138ec:	881a      	ldrh	r2, [r3, #0]
100138ee:	230a      	movs	r3, #10
100138f0:	18fb      	adds	r3, r7, r3
100138f2:	881b      	ldrh	r3, [r3, #0]
100138f4:	18d3      	adds	r3, r2, r3
100138f6:	b29a      	uxth	r2, r3
100138f8:	4b4d      	ldr	r3, [pc, #308]	; (10013a30 <platform_event_wait+0x248>)
100138fa:	801a      	strh	r2, [r3, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
100138fc:	2317      	movs	r3, #23
100138fe:	18fb      	adds	r3, r7, r3
10013900:	2202      	movs	r2, #2
10013902:	701a      	strb	r2, [r3, #0]
10013904:	e05e      	b.n	100139c4 <platform_event_wait+0x1dc>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
10013906:	4b4e      	ldr	r3, [pc, #312]	; (10013a40 <platform_event_wait+0x258>)
10013908:	681b      	ldr	r3, [r3, #0]
1001390a:	2b00      	cmp	r3, #0
1001390c:	d05a      	beq.n	100139c4 <platform_event_wait+0x1dc>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1001390e:	4b46      	ldr	r3, [pc, #280]	; (10013a28 <platform_event_wait+0x240>)
10013910:	681b      	ldr	r3, [r3, #0]
10013912:	889a      	ldrh	r2, [r3, #4]
10013914:	23cd      	movs	r3, #205	; 0xcd
10013916:	009b      	lsls	r3, r3, #2
10013918:	429a      	cmp	r2, r3
1001391a:	d10e      	bne.n	1001393a <platform_event_wait+0x152>
					{
						if(bEventTimeoutFlag)
1001391c:	2316      	movs	r3, #22
1001391e:	18fb      	adds	r3, r7, r3
10013920:	781b      	ldrb	r3, [r3, #0]
10013922:	2b00      	cmp	r3, #0
10013924:	d004      	beq.n	10013930 <platform_event_wait+0x148>
						{
							status = STATUS_TIMEOUT;	
10013926:	2317      	movs	r3, #23
10013928:	18fb      	adds	r3, r7, r3
1001392a:	22d0      	movs	r2, #208	; 0xd0
1001392c:	701a      	strb	r2, [r3, #0]
1001392e:	e049      	b.n	100139c4 <platform_event_wait+0x1dc>
						}
						else
						{
							bLoopAgain = 1;
10013930:	2315      	movs	r3, #21
10013932:	18fb      	adds	r3, r7, r3
10013934:	2201      	movs	r2, #1
10013936:	701a      	strb	r2, [r3, #0]
10013938:	e044      	b.n	100139c4 <platform_event_wait+0x1dc>
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1001393a:	4b42      	ldr	r3, [pc, #264]	; (10013a44 <platform_event_wait+0x25c>)
1001393c:	4a3d      	ldr	r2, [pc, #244]	; (10013a34 <platform_event_wait+0x24c>)
1001393e:	601a      	str	r2, [r3, #0]
						ke_msg_hdr->id = rcv_msg->id;
10013940:	4b40      	ldr	r3, [pc, #256]	; (10013a44 <platform_event_wait+0x25c>)
10013942:	681a      	ldr	r2, [r3, #0]
10013944:	4b38      	ldr	r3, [pc, #224]	; (10013a28 <platform_event_wait+0x240>)
10013946:	681b      	ldr	r3, [r3, #0]
10013948:	889b      	ldrh	r3, [r3, #4]
1001394a:	8013      	strh	r3, [r2, #0]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1001394c:	4b3d      	ldr	r3, [pc, #244]	; (10013a44 <platform_event_wait+0x25c>)
1001394e:	681c      	ldr	r4, [r3, #0]
10013950:	4b3d      	ldr	r3, [pc, #244]	; (10013a48 <platform_event_wait+0x260>)
10013952:	681a      	ldr	r2, [r3, #0]
10013954:	4b34      	ldr	r3, [pc, #208]	; (10013a28 <platform_event_wait+0x240>)
10013956:	681b      	ldr	r3, [r3, #0]
10013958:	891b      	ldrh	r3, [r3, #8]
1001395a:	0018      	movs	r0, r3
1001395c:	4790      	blx	r2
1001395e:	0003      	movs	r3, r0
10013960:	80a3      	strh	r3, [r4, #4]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
10013962:	4b38      	ldr	r3, [pc, #224]	; (10013a44 <platform_event_wait+0x25c>)
10013964:	681a      	ldr	r2, [r3, #0]
10013966:	4b30      	ldr	r3, [pc, #192]	; (10013a28 <platform_event_wait+0x240>)
10013968:	681b      	ldr	r3, [r3, #0]
1001396a:	88db      	ldrh	r3, [r3, #6]
1001396c:	8053      	strh	r3, [r2, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1001396e:	4b35      	ldr	r3, [pc, #212]	; (10013a44 <platform_event_wait+0x25c>)
10013970:	681a      	ldr	r2, [r3, #0]
10013972:	4b2d      	ldr	r3, [pc, #180]	; (10013a28 <platform_event_wait+0x240>)
10013974:	681b      	ldr	r3, [r3, #0]
10013976:	895b      	ldrh	r3, [r3, #10]
10013978:	80d3      	strh	r3, [r2, #6]
						ke_msg_hdr++;
1001397a:	4b32      	ldr	r3, [pc, #200]	; (10013a44 <platform_event_wait+0x25c>)
1001397c:	681b      	ldr	r3, [r3, #0]
1001397e:	3308      	adds	r3, #8
10013980:	001a      	movs	r2, r3
10013982:	4b30      	ldr	r3, [pc, #192]	; (10013a44 <platform_event_wait+0x25c>)
10013984:	601a      	str	r2, [r3, #0]
						if(rcv_msg->param_len > 0) {
10013986:	4b28      	ldr	r3, [pc, #160]	; (10013a28 <platform_event_wait+0x240>)
10013988:	681b      	ldr	r3, [r3, #0]
1001398a:	895b      	ldrh	r3, [r3, #10]
1001398c:	2b00      	cmp	r3, #0
1001398e:	d00b      	beq.n	100139a8 <platform_event_wait+0x1c0>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
10013990:	4b2c      	ldr	r3, [pc, #176]	; (10013a44 <platform_event_wait+0x25c>)
10013992:	6818      	ldr	r0, [r3, #0]
10013994:	4b24      	ldr	r3, [pc, #144]	; (10013a28 <platform_event_wait+0x240>)
10013996:	681b      	ldr	r3, [r3, #0]
10013998:	330c      	adds	r3, #12
1001399a:	0019      	movs	r1, r3
1001399c:	4b22      	ldr	r3, [pc, #136]	; (10013a28 <platform_event_wait+0x240>)
1001399e:	681b      	ldr	r3, [r3, #0]
100139a0:	895b      	ldrh	r3, [r3, #10]
100139a2:	001a      	movs	r2, r3
100139a4:	4b24      	ldr	r3, [pc, #144]	; (10013a38 <platform_event_wait+0x250>)
100139a6:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
100139a8:	4b25      	ldr	r3, [pc, #148]	; (10013a40 <platform_event_wait+0x258>)
100139aa:	681a      	ldr	r2, [r3, #0]
100139ac:	4b1e      	ldr	r3, [pc, #120]	; (10013a28 <platform_event_wait+0x240>)
100139ae:	681b      	ldr	r3, [r3, #0]
100139b0:	895b      	ldrh	r3, [r3, #10]
100139b2:	3308      	adds	r3, #8
100139b4:	0019      	movs	r1, r3
100139b6:	4b1f      	ldr	r3, [pc, #124]	; (10013a34 <platform_event_wait+0x24c>)
100139b8:	0018      	movs	r0, r3
100139ba:	4790      	blx	r2
						status = STATUS_RECEIVED_BLE_MSG;
100139bc:	2317      	movs	r3, #23
100139be:	18fb      	adds	r3, r7, r3
100139c0:	2203      	movs	r2, #3
100139c2:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			ke_free(rcv_msg);
100139c4:	4b21      	ldr	r3, [pc, #132]	; (10013a4c <platform_event_wait+0x264>)
100139c6:	681a      	ldr	r2, [r3, #0]
100139c8:	4b17      	ldr	r3, [pc, #92]	; (10013a28 <platform_event_wait+0x240>)
100139ca:	681b      	ldr	r3, [r3, #0]
100139cc:	0018      	movs	r0, r3
100139ce:	4790      	blx	r2
100139d0:	e003      	b.n	100139da <platform_event_wait+0x1f2>
		}
		else
		{
			status = STATUS_FAILURE;
100139d2:	2317      	movs	r3, #23
100139d4:	18fb      	adds	r3, r7, r3
100139d6:	2207      	movs	r2, #7
100139d8:	701a      	strb	r2, [r3, #0]
100139da:	2316      	movs	r3, #22
100139dc:	18fb      	adds	r3, r7, r3
100139de:	2216      	movs	r2, #22
100139e0:	18ba      	adds	r2, r7, r2
100139e2:	7812      	ldrb	r2, [r2, #0]
100139e4:	701a      	strb	r2, [r3, #0]
		}
	}while(bLoopAgain);
100139e6:	2315      	movs	r3, #21
100139e8:	18fb      	adds	r3, r7, r3
100139ea:	781b      	ldrb	r3, [r3, #0]
100139ec:	2b00      	cmp	r3, #0
100139ee:	d000      	beq.n	100139f2 <platform_event_wait+0x20a>
100139f0:	e719      	b.n	10013826 <platform_event_wait+0x3e>
	
	if(bEventTimeoutFlag)
100139f2:	2316      	movs	r3, #22
100139f4:	18fb      	adds	r3, r7, r3
100139f6:	781b      	ldrb	r3, [r3, #0]
100139f8:	2b00      	cmp	r3, #0
100139fa:	d007      	beq.n	10013a0c <platform_event_wait+0x224>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
100139fc:	4b09      	ldr	r3, [pc, #36]	; (10013a24 <platform_event_wait+0x23c>)
100139fe:	681a      	ldr	r2, [r3, #0]
10013a00:	23cd      	movs	r3, #205	; 0xcd
10013a02:	009b      	lsls	r3, r3, #2
10013a04:	0019      	movs	r1, r3
10013a06:	0010      	movs	r0, r2
10013a08:	4b11      	ldr	r3, [pc, #68]	; (10013a50 <platform_event_wait+0x268>)
10013a0a:	4798      	blx	r3
	}
	return status;
10013a0c:	2317      	movs	r3, #23
10013a0e:	18fb      	adds	r3, r7, r3
10013a10:	781b      	ldrb	r3, [r3, #0]
}
10013a12:	0018      	movs	r0, r3
10013a14:	46bd      	mov	sp, r7
10013a16:	b007      	add	sp, #28
10013a18:	bd90      	pop	{r4, r7, pc}
10013a1a:	46c0      	nop			; (mov r8, r8)
10013a1c:	10013505 	.word	0x10013505
10013a20:	1001bf34 	.word	0x1001bf34
10013a24:	1001bf20 	.word	0x1001bf20
10013a28:	1001bf4c 	.word	0x1001bf4c
10013a2c:	1001368d 	.word	0x1001368d
10013a30:	1001cefc 	.word	0x1001cefc
10013a34:	1001cc68 	.word	0x1001cc68
10013a38:	10018e1b 	.word	0x10018e1b
10013a3c:	10012d81 	.word	0x10012d81
10013a40:	1001bf48 	.word	0x1001bf48
10013a44:	1001bf50 	.word	0x1001bf50
10013a48:	1001bf40 	.word	0x1001bf40
10013a4c:	1001bf38 	.word	0x1001bf38
10013a50:	10013449 	.word	0x10013449

10013a54 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
10013a54:	b580      	push	{r7, lr}
10013a56:	b082      	sub	sp, #8
10013a58:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_RESOURCE_BUSY;
10013a5a:	1dfb      	adds	r3, r7, #7
10013a5c:	2208      	movs	r2, #8
10013a5e:	701a      	strb	r2, [r3, #0]
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
10013a60:	4b19      	ldr	r3, [pc, #100]	; (10013ac8 <acquire_sleep_lock+0x74>)
10013a62:	681b      	ldr	r3, [r3, #0]
10013a64:	b2da      	uxtb	r2, r3
10013a66:	1dbb      	adds	r3, r7, #6
10013a68:	2101      	movs	r1, #1
10013a6a:	400a      	ands	r2, r1
10013a6c:	701a      	strb	r2, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
10013a6e:	4b17      	ldr	r3, [pc, #92]	; (10013acc <acquire_sleep_lock+0x78>)
10013a70:	681b      	ldr	r3, [r3, #0]
10013a72:	2280      	movs	r2, #128	; 0x80
10013a74:	0212      	lsls	r2, r2, #8
10013a76:	0010      	movs	r0, r2
10013a78:	4798      	blx	r3
	if(osc_en == 0)
10013a7a:	1dbb      	adds	r3, r7, #6
10013a7c:	781b      	ldrb	r3, [r3, #0]
10013a7e:	2b00      	cmp	r3, #0
10013a80:	d115      	bne.n	10013aae <acquire_sleep_lock+0x5a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
10013a82:	4b13      	ldr	r3, [pc, #76]	; (10013ad0 <acquire_sleep_lock+0x7c>)
10013a84:	681b      	ldr	r3, [r3, #0]
10013a86:	2002      	movs	r0, #2
10013a88:	4798      	blx	r3
		pwr_arm_wakeup_req();
10013a8a:	4b12      	ldr	r3, [pc, #72]	; (10013ad4 <acquire_sleep_lock+0x80>)
10013a8c:	681b      	ldr	r3, [r3, #0]
10013a8e:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
10013a90:	46c0      	nop			; (mov r8, r8)
10013a92:	4b11      	ldr	r3, [pc, #68]	; (10013ad8 <acquire_sleep_lock+0x84>)
10013a94:	681b      	ldr	r3, [r3, #0]
10013a96:	2003      	movs	r0, #3
10013a98:	4798      	blx	r3
10013a9a:	1e03      	subs	r3, r0, #0
10013a9c:	d1f9      	bne.n	10013a92 <acquire_sleep_lock+0x3e>
		pwr_disable_arm_wakeup(1<<1);
10013a9e:	4b0f      	ldr	r3, [pc, #60]	; (10013adc <acquire_sleep_lock+0x88>)
10013aa0:	681b      	ldr	r3, [r3, #0]
10013aa2:	2002      	movs	r0, #2
10013aa4:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
10013aa6:	4b0e      	ldr	r3, [pc, #56]	; (10013ae0 <acquire_sleep_lock+0x8c>)
10013aa8:	2201      	movs	r2, #1
10013aaa:	601a      	str	r2, [r3, #0]
10013aac:	e005      	b.n	10013aba <acquire_sleep_lock+0x66>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
10013aae:	4b0d      	ldr	r3, [pc, #52]	; (10013ae4 <acquire_sleep_lock+0x90>)
10013ab0:	681a      	ldr	r2, [r3, #0]
10013ab2:	4b0d      	ldr	r3, [pc, #52]	; (10013ae8 <acquire_sleep_lock+0x94>)
10013ab4:	681b      	ldr	r3, [r3, #0]
10013ab6:	0018      	movs	r0, r3
10013ab8:	4790      	blx	r2
	}
	return status;
10013aba:	1dfb      	adds	r3, r7, #7
10013abc:	781b      	ldrb	r3, [r3, #0]
}
10013abe:	0018      	movs	r0, r3
10013ac0:	46bd      	mov	sp, r7
10013ac2:	b002      	add	sp, #8
10013ac4:	bd80      	pop	{r7, pc}
10013ac6:	46c0      	nop			; (mov r8, r8)
10013ac8:	4000b1ec 	.word	0x4000b1ec
10013acc:	1001cc24 	.word	0x1001cc24
10013ad0:	1001bf0c 	.word	0x1001bf0c
10013ad4:	1001bf14 	.word	0x1001bf14
10013ad8:	1001bf18 	.word	0x1001bf18
10013adc:	1001bf10 	.word	0x1001bf10
10013ae0:	4000b020 	.word	0x4000b020
10013ae4:	1001bf2c 	.word	0x1001bf2c
10013ae8:	1001bf1c 	.word	0x1001bf1c

10013aec <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
10013aec:	b580      	push	{r7, lr}
10013aee:	b082      	sub	sp, #8
10013af0:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_SUCCESS;
10013af2:	1dfb      	adds	r3, r7, #7
10013af4:	2200      	movs	r2, #0
10013af6:	701a      	strb	r2, [r3, #0]
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
10013af8:	4b05      	ldr	r3, [pc, #20]	; (10013b10 <release_sleep_lock+0x24>)
10013afa:	681b      	ldr	r3, [r3, #0]
10013afc:	2280      	movs	r2, #128	; 0x80
10013afe:	0212      	lsls	r2, r2, #8
10013b00:	0010      	movs	r0, r2
10013b02:	4798      	blx	r3
	return status;
10013b04:	1dfb      	adds	r3, r7, #7
10013b06:	781b      	ldrb	r3, [r3, #0]
}
10013b08:	0018      	movs	r0, r3
10013b0a:	46bd      	mov	sp, r7
10013b0c:	b002      	add	sp, #8
10013b0e:	bd80      	pop	{r7, pc}
10013b10:	1001cc2c 	.word	0x1001cc2c

10013b14 <samb11_plf_resume_callback>:

void samb11_plf_resume_callback(void)
{
10013b14:	b580      	push	{r7, lr}
10013b16:	af00      	add	r7, sp, #0
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
10013b18:	4a08      	ldr	r2, [pc, #32]	; (10013b3c <samb11_plf_resume_callback+0x28>)
10013b1a:	4b09      	ldr	r3, [pc, #36]	; (10013b40 <samb11_plf_resume_callback+0x2c>)
10013b1c:	681b      	ldr	r3, [r3, #0]
10013b1e:	6013      	str	r3, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
10013b20:	4a08      	ldr	r2, [pc, #32]	; (10013b44 <samb11_plf_resume_callback+0x30>)
10013b22:	4b07      	ldr	r3, [pc, #28]	; (10013b40 <samb11_plf_resume_callback+0x2c>)
10013b24:	685b      	ldr	r3, [r3, #4]
10013b26:	6013      	str	r3, [r2, #0]
	if(samb11_app_resume_cb != NULL)
10013b28:	4b07      	ldr	r3, [pc, #28]	; (10013b48 <samb11_plf_resume_callback+0x34>)
10013b2a:	681b      	ldr	r3, [r3, #0]
10013b2c:	2b00      	cmp	r3, #0
10013b2e:	d002      	beq.n	10013b36 <samb11_plf_resume_callback+0x22>
	{
		samb11_app_resume_cb();
10013b30:	4b05      	ldr	r3, [pc, #20]	; (10013b48 <samb11_plf_resume_callback+0x34>)
10013b32:	681b      	ldr	r3, [r3, #0]
10013b34:	4798      	blx	r3
	}
}
10013b36:	46c0      	nop			; (mov r8, r8)
10013b38:	46bd      	mov	sp, r7
10013b3a:	bd80      	pop	{r7, pc}
10013b3c:	4000b00c 	.word	0x4000b00c
10013b40:	1001cc1c 	.word	0x1001cc1c
10013b44:	4000b010 	.word	0x4000b010
10013b48:	1001cef0 	.word	0x1001cef0

10013b4c <register_resume_callback>:

plf_drv_status register_resume_callback(resume_callback cb)
{
10013b4c:	b580      	push	{r7, lr}
10013b4e:	b084      	sub	sp, #16
10013b50:	af00      	add	r7, sp, #0
10013b52:	6078      	str	r0, [r7, #4]
	plf_drv_status status = STATUS_SUCCESS;
10013b54:	230f      	movs	r3, #15
10013b56:	18fb      	adds	r3, r7, r3
10013b58:	2200      	movs	r2, #0
10013b5a:	701a      	strb	r2, [r3, #0]
	if(cb == NULL)
10013b5c:	687b      	ldr	r3, [r7, #4]
10013b5e:	2b00      	cmp	r3, #0
10013b60:	d104      	bne.n	10013b6c <register_resume_callback+0x20>
	{
		status = STATUS_INVALID_ARGUMENT;
10013b62:	230f      	movs	r3, #15
10013b64:	18fb      	adds	r3, r7, r3
10013b66:	2209      	movs	r2, #9
10013b68:	701a      	strb	r2, [r3, #0]
10013b6a:	e002      	b.n	10013b72 <register_resume_callback+0x26>
	}
	else 
	{
		samb11_app_resume_cb = cb;
10013b6c:	4b04      	ldr	r3, [pc, #16]	; (10013b80 <register_resume_callback+0x34>)
10013b6e:	687a      	ldr	r2, [r7, #4]
10013b70:	601a      	str	r2, [r3, #0]
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
10013b72:	230f      	movs	r3, #15
10013b74:	18fb      	adds	r3, r7, r3
10013b76:	781b      	ldrb	r3, [r3, #0]
}
10013b78:	0018      	movs	r0, r3
10013b7a:	46bd      	mov	sp, r7
10013b7c:	b004      	add	sp, #16
10013b7e:	bd80      	pop	{r7, pc}
10013b80:	1001cef0 	.word	0x1001cef0

10013b84 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10013b84:	b580      	push	{r7, lr}
10013b86:	b082      	sub	sp, #8
10013b88:	af00      	add	r7, sp, #0
10013b8a:	0002      	movs	r2, r0
10013b8c:	1dfb      	adds	r3, r7, #7
10013b8e:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10013b90:	4a08      	ldr	r2, [pc, #32]	; (10013bb4 <NVIC_ClearPendingIRQ+0x30>)
10013b92:	1dfb      	adds	r3, r7, #7
10013b94:	781b      	ldrb	r3, [r3, #0]
10013b96:	0019      	movs	r1, r3
10013b98:	231f      	movs	r3, #31
10013b9a:	400b      	ands	r3, r1
10013b9c:	2101      	movs	r1, #1
10013b9e:	4099      	lsls	r1, r3
10013ba0:	000b      	movs	r3, r1
10013ba2:	0019      	movs	r1, r3
10013ba4:	23c0      	movs	r3, #192	; 0xc0
10013ba6:	005b      	lsls	r3, r3, #1
10013ba8:	50d1      	str	r1, [r2, r3]
}
10013baa:	46c0      	nop			; (mov r8, r8)
10013bac:	46bd      	mov	sp, r7
10013bae:	b002      	add	sp, #8
10013bb0:	bd80      	pop	{r7, pc}
10013bb2:	46c0      	nop			; (mov r8, r8)
10013bb4:	e000e100 	.word	0xe000e100

10013bb8 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
10013bb8:	b580      	push	{r7, lr}
10013bba:	b082      	sub	sp, #8
10013bbc:	af00      	add	r7, sp, #0
	uint8_t index = 0;
10013bbe:	1dfb      	adds	r3, r7, #7
10013bc0:	2200      	movs	r2, #0
10013bc2:	701a      	strb	r2, [r3, #0]
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
10013bc4:	1dbb      	adds	r3, r7, #6
10013bc6:	2210      	movs	r2, #16
10013bc8:	701a      	strb	r2, [r3, #0]
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
10013bca:	4b28      	ldr	r3, [pc, #160]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013bcc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013bce:	b29b      	uxth	r3, r3
10013bd0:	603b      	str	r3, [r7, #0]
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
10013bd2:	4a26      	ldr	r2, [pc, #152]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013bd4:	4b25      	ldr	r3, [pc, #148]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10013bd8:	b29b      	uxth	r3, r3
10013bda:	4925      	ldr	r1, [pc, #148]	; (10013c70 <gpio1_combined_isr_handler+0xb8>)
10013bdc:	430b      	orrs	r3, r1
10013bde:	b29b      	uxth	r3, r3
10013be0:	8513      	strh	r3, [r2, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10013be2:	683b      	ldr	r3, [r7, #0]
10013be4:	05db      	lsls	r3, r3, #23
10013be6:	0ddb      	lsrs	r3, r3, #23
10013be8:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10013bea:	1dfb      	adds	r3, r7, #7
10013bec:	2200      	movs	r2, #0
10013bee:	701a      	strb	r2, [r3, #0]
		if (intstatus != 0) {
10013bf0:	683b      	ldr	r3, [r7, #0]
10013bf2:	2b00      	cmp	r3, #0
10013bf4:	d020      	beq.n	10013c38 <gpio1_combined_isr_handler+0x80>
			port_gpio1 = (intstatus & ~(intstatus - 1));
10013bf6:	683b      	ldr	r3, [r7, #0]
10013bf8:	b2db      	uxtb	r3, r3
10013bfa:	425b      	negs	r3, r3
10013bfc:	b2da      	uxtb	r2, r3
10013bfe:	683b      	ldr	r3, [r7, #0]
10013c00:	b2d9      	uxtb	r1, r3
10013c02:	1dbb      	adds	r3, r7, #6
10013c04:	400a      	ands	r2, r1
10013c06:	701a      	strb	r2, [r3, #0]
			while (!(port_gpio1 == 1)) {
10013c08:	e009      	b.n	10013c1e <gpio1_combined_isr_handler+0x66>
				port_gpio1 = port_gpio1 >> 1;
10013c0a:	1dbb      	adds	r3, r7, #6
10013c0c:	1dba      	adds	r2, r7, #6
10013c0e:	7812      	ldrb	r2, [r2, #0]
10013c10:	0852      	lsrs	r2, r2, #1
10013c12:	701a      	strb	r2, [r3, #0]
				index++;
10013c14:	1dfb      	adds	r3, r7, #7
10013c16:	781a      	ldrb	r2, [r3, #0]
10013c18:	1dfb      	adds	r3, r7, #7
10013c1a:	3201      	adds	r2, #1
10013c1c:	701a      	strb	r2, [r3, #0]
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
10013c1e:	1dbb      	adds	r3, r7, #6
10013c20:	781b      	ldrb	r3, [r3, #0]
10013c22:	2b01      	cmp	r3, #1
10013c24:	d1f1      	bne.n	10013c0a <gpio1_combined_isr_handler+0x52>
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10013c26:	4a11      	ldr	r2, [pc, #68]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013c28:	1dfb      	adds	r3, r7, #7
10013c2a:	781b      	ldrb	r3, [r3, #0]
10013c2c:	2101      	movs	r1, #1
10013c2e:	4099      	lsls	r1, r3
10013c30:	000b      	movs	r3, r1
10013c32:	b29b      	uxth	r3, r3
10013c34:	8713      	strh	r3, [r2, #56]	; 0x38
10013c36:	e007      	b.n	10013c48 <gpio1_combined_isr_handler+0x90>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10013c38:	4a0c      	ldr	r2, [pc, #48]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013c3a:	4b0c      	ldr	r3, [pc, #48]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013c3c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013c3e:	b29b      	uxth	r3, r3
10013c40:	490b      	ldr	r1, [pc, #44]	; (10013c70 <gpio1_combined_isr_handler+0xb8>)
10013c42:	430b      	orrs	r3, r1
10013c44:	b29b      	uxth	r3, r3
10013c46:	8713      	strh	r3, [r2, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
10013c48:	4b08      	ldr	r3, [pc, #32]	; (10013c6c <gpio1_combined_isr_handler+0xb4>)
10013c4a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013c4c:	b29b      	uxth	r3, r3
10013c4e:	603b      	str	r3, [r7, #0]
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10013c50:	683b      	ldr	r3, [r7, #0]
10013c52:	05db      	lsls	r3, r3, #23
10013c54:	0ddb      	lsrs	r3, r3, #23
10013c56:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10013c58:	683b      	ldr	r3, [r7, #0]
10013c5a:	2b00      	cmp	r3, #0
10013c5c:	d1c1      	bne.n	10013be2 <gpio1_combined_isr_handler+0x2a>

	NVIC_ClearPendingIRQ(8);
10013c5e:	2008      	movs	r0, #8
10013c60:	4b04      	ldr	r3, [pc, #16]	; (10013c74 <gpio1_combined_isr_handler+0xbc>)
10013c62:	4798      	blx	r3
}
10013c64:	46c0      	nop			; (mov r8, r8)
10013c66:	46bd      	mov	sp, r7
10013c68:	b002      	add	sp, #8
10013c6a:	bd80      	pop	{r7, pc}
10013c6c:	40011000 	.word	0x40011000
10013c70:	ffff8000 	.word	0xffff8000
10013c74:	10013b85 	.word	0x10013b85

10013c78 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
10013c78:	b580      	push	{r7, lr}
10013c7a:	b082      	sub	sp, #8
10013c7c:	af00      	add	r7, sp, #0
	uint8_t index = 0;
10013c7e:	1dfb      	adds	r3, r7, #7
10013c80:	2200      	movs	r2, #0
10013c82:	701a      	strb	r2, [r3, #0]
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
10013c84:	1dbb      	adds	r3, r7, #6
10013c86:	2200      	movs	r2, #0
10013c88:	701a      	strb	r2, [r3, #0]
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
10013c8a:	4b28      	ldr	r3, [pc, #160]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013c8c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013c8e:	b29b      	uxth	r3, r3
10013c90:	603b      	str	r3, [r7, #0]
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
10013c92:	4a26      	ldr	r2, [pc, #152]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013c94:	4b25      	ldr	r3, [pc, #148]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10013c98:	b29b      	uxth	r3, r3
10013c9a:	4925      	ldr	r1, [pc, #148]	; (10013d30 <gpio0_combined_isr_handler+0xb8>)
10013c9c:	430b      	orrs	r3, r1
10013c9e:	b29b      	uxth	r3, r3
10013ca0:	8513      	strh	r3, [r2, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10013ca2:	683b      	ldr	r3, [r7, #0]
10013ca4:	05db      	lsls	r3, r3, #23
10013ca6:	0ddb      	lsrs	r3, r3, #23
10013ca8:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10013caa:	1dfb      	adds	r3, r7, #7
10013cac:	2200      	movs	r2, #0
10013cae:	701a      	strb	r2, [r3, #0]
		if (intstatus != 0) {
10013cb0:	683b      	ldr	r3, [r7, #0]
10013cb2:	2b00      	cmp	r3, #0
10013cb4:	d020      	beq.n	10013cf8 <gpio0_combined_isr_handler+0x80>
			port_gpio0 = (intstatus & ~(intstatus - 1));
10013cb6:	683b      	ldr	r3, [r7, #0]
10013cb8:	b2db      	uxtb	r3, r3
10013cba:	425b      	negs	r3, r3
10013cbc:	b2da      	uxtb	r2, r3
10013cbe:	683b      	ldr	r3, [r7, #0]
10013cc0:	b2d9      	uxtb	r1, r3
10013cc2:	1dbb      	adds	r3, r7, #6
10013cc4:	400a      	ands	r2, r1
10013cc6:	701a      	strb	r2, [r3, #0]
			while (!(port_gpio0 == 1)) {
10013cc8:	e009      	b.n	10013cde <gpio0_combined_isr_handler+0x66>
				port_gpio0 = port_gpio0 >> 1;
10013cca:	1dbb      	adds	r3, r7, #6
10013ccc:	1dba      	adds	r2, r7, #6
10013cce:	7812      	ldrb	r2, [r2, #0]
10013cd0:	0852      	lsrs	r2, r2, #1
10013cd2:	701a      	strb	r2, [r3, #0]
				index++;
10013cd4:	1dfb      	adds	r3, r7, #7
10013cd6:	781a      	ldrb	r2, [r3, #0]
10013cd8:	1dfb      	adds	r3, r7, #7
10013cda:	3201      	adds	r2, #1
10013cdc:	701a      	strb	r2, [r3, #0]
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
10013cde:	1dbb      	adds	r3, r7, #6
10013ce0:	781b      	ldrb	r3, [r3, #0]
10013ce2:	2b01      	cmp	r3, #1
10013ce4:	d1f1      	bne.n	10013cca <gpio0_combined_isr_handler+0x52>
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10013ce6:	4a11      	ldr	r2, [pc, #68]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013ce8:	1dfb      	adds	r3, r7, #7
10013cea:	781b      	ldrb	r3, [r3, #0]
10013cec:	2101      	movs	r1, #1
10013cee:	4099      	lsls	r1, r3
10013cf0:	000b      	movs	r3, r1
10013cf2:	b29b      	uxth	r3, r3
10013cf4:	8713      	strh	r3, [r2, #56]	; 0x38
10013cf6:	e007      	b.n	10013d08 <gpio0_combined_isr_handler+0x90>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10013cf8:	4a0c      	ldr	r2, [pc, #48]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013cfa:	4b0c      	ldr	r3, [pc, #48]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013cfc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013cfe:	b29b      	uxth	r3, r3
10013d00:	490b      	ldr	r1, [pc, #44]	; (10013d30 <gpio0_combined_isr_handler+0xb8>)
10013d02:	430b      	orrs	r3, r1
10013d04:	b29b      	uxth	r3, r3
10013d06:	8713      	strh	r3, [r2, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
10013d08:	4b08      	ldr	r3, [pc, #32]	; (10013d2c <gpio0_combined_isr_handler+0xb4>)
10013d0a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013d0c:	b29b      	uxth	r3, r3
10013d0e:	603b      	str	r3, [r7, #0]
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10013d10:	683b      	ldr	r3, [r7, #0]
10013d12:	05db      	lsls	r3, r3, #23
10013d14:	0ddb      	lsrs	r3, r3, #23
10013d16:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10013d18:	683b      	ldr	r3, [r7, #0]
10013d1a:	2b00      	cmp	r3, #0
10013d1c:	d1c1      	bne.n	10013ca2 <gpio0_combined_isr_handler+0x2a>

	NVIC_ClearPendingIRQ(7);
10013d1e:	2007      	movs	r0, #7
10013d20:	4b04      	ldr	r3, [pc, #16]	; (10013d34 <gpio0_combined_isr_handler+0xbc>)
10013d22:	4798      	blx	r3
}
10013d24:	46c0      	nop			; (mov r8, r8)
10013d26:	46bd      	mov	sp, r7
10013d28:	b002      	add	sp, #8
10013d2a:	bd80      	pop	{r7, pc}
10013d2c:	40010000 	.word	0x40010000
10013d30:	ffff8000 	.word	0xffff8000
10013d34:	10013b85 	.word	0x10013b85

10013d38 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
10013d38:	b580      	push	{r7, lr}
10013d3a:	af00      	add	r7, sp, #0
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
10013d3c:	4b12      	ldr	r3, [pc, #72]	; (10013d88 <PORT1_COMB_Handler+0x50>)
10013d3e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013d40:	b29b      	uxth	r3, r3
10013d42:	001a      	movs	r2, r3
10013d44:	23e0      	movs	r3, #224	; 0xe0
10013d46:	021b      	lsls	r3, r3, #8
10013d48:	4013      	ands	r3, r2
10013d4a:	d018      	beq.n	10013d7e <PORT1_COMB_Handler+0x46>
		handle_ext_wakeup_isr();
10013d4c:	4b0f      	ldr	r3, [pc, #60]	; (10013d8c <PORT1_COMB_Handler+0x54>)
10013d4e:	681b      	ldr	r3, [r3, #0]
10013d50:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
10013d52:	4b0d      	ldr	r3, [pc, #52]	; (10013d88 <PORT1_COMB_Handler+0x50>)
10013d54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013d56:	b29b      	uxth	r3, r3
10013d58:	001a      	movs	r2, r3
10013d5a:	23e0      	movs	r3, #224	; 0xe0
10013d5c:	021b      	lsls	r3, r3, #8
10013d5e:	401a      	ands	r2, r3
10013d60:	0010      	movs	r0, r2
10013d62:	4909      	ldr	r1, [pc, #36]	; (10013d88 <PORT1_COMB_Handler+0x50>)
10013d64:	4b08      	ldr	r3, [pc, #32]	; (10013d88 <PORT1_COMB_Handler+0x50>)
10013d66:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10013d68:	b29b      	uxth	r3, r3
10013d6a:	b21a      	sxth	r2, r3
10013d6c:	b203      	sxth	r3, r0
10013d6e:	4313      	orrs	r3, r2
10013d70:	b21b      	sxth	r3, r3
10013d72:	b29b      	uxth	r3, r3
10013d74:	870b      	strh	r3, [r1, #56]	; 0x38
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
10013d76:	2008      	movs	r0, #8
10013d78:	4b05      	ldr	r3, [pc, #20]	; (10013d90 <PORT1_COMB_Handler+0x58>)
10013d7a:	4798      	blx	r3
	} else {
		gpio1_combined_isr_handler();
	}
}
10013d7c:	e001      	b.n	10013d82 <PORT1_COMB_Handler+0x4a>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
10013d7e:	4b05      	ldr	r3, [pc, #20]	; (10013d94 <PORT1_COMB_Handler+0x5c>)
10013d80:	4798      	blx	r3
	}
}
10013d82:	46c0      	nop			; (mov r8, r8)
10013d84:	46bd      	mov	sp, r7
10013d86:	bd80      	pop	{r7, pc}
10013d88:	40011000 	.word	0x40011000
10013d8c:	1001ceec 	.word	0x1001ceec
10013d90:	10013b85 	.word	0x10013b85
10013d94:	10013bb9 	.word	0x10013bb9

10013d98 <internal_event_post>:
10013d98:	b570      	push	{r4, r5, r6, lr}
10013d9a:	4d0c      	ldr	r5, [pc, #48]	; (10013dcc <internal_event_post+0x34>)
10013d9c:	682c      	ldr	r4, [r5, #0]
10013d9e:	2c00      	cmp	r4, #0
10013da0:	d013      	beq.n	10013dca <internal_event_post+0x32>
10013da2:	6826      	ldr	r6, [r4, #0]
10013da4:	60e2      	str	r2, [r4, #12]
10013da6:	602e      	str	r6, [r5, #0]
10013da8:	2500      	movs	r5, #0
10013daa:	4a09      	ldr	r2, [pc, #36]	; (10013dd0 <internal_event_post+0x38>)
10013dac:	8123      	strh	r3, [r4, #8]
10013dae:	6813      	ldr	r3, [r2, #0]
10013db0:	6025      	str	r5, [r4, #0]
10013db2:	80a0      	strh	r0, [r4, #4]
10013db4:	80e1      	strh	r1, [r4, #6]
10013db6:	42ab      	cmp	r3, r5
10013db8:	d101      	bne.n	10013dbe <internal_event_post+0x26>
10013dba:	6014      	str	r4, [r2, #0]
10013dbc:	e005      	b.n	10013dca <internal_event_post+0x32>
10013dbe:	681a      	ldr	r2, [r3, #0]
10013dc0:	2a00      	cmp	r2, #0
10013dc2:	d001      	beq.n	10013dc8 <internal_event_post+0x30>
10013dc4:	1c13      	adds	r3, r2, #0
10013dc6:	e7fa      	b.n	10013dbe <internal_event_post+0x26>
10013dc8:	601c      	str	r4, [r3, #0]
10013dca:	bd70      	pop	{r4, r5, r6, pc}
10013dcc:	1001bff8 	.word	0x1001bff8
10013dd0:	1001bff4 	.word	0x1001bff4

10013dd4 <internal_event_init>:
10013dd4:	4b08      	ldr	r3, [pc, #32]	; (10013df8 <internal_event_init+0x24>)
10013dd6:	2200      	movs	r2, #0
10013dd8:	1c19      	adds	r1, r3, #0
10013dda:	b510      	push	{r4, lr}
10013ddc:	6818      	ldr	r0, [r3, #0]
10013dde:	4b07      	ldr	r3, [pc, #28]	; (10013dfc <internal_event_init+0x28>)
10013de0:	189c      	adds	r4, r3, r2
10013de2:	50d0      	str	r0, [r2, r3]
10013de4:	3210      	adds	r2, #16
10013de6:	1c20      	adds	r0, r4, #0
10013de8:	2aa0      	cmp	r2, #160	; 0xa0
10013dea:	d1f8      	bne.n	10013dde <internal_event_init+0xa>
10013dec:	2200      	movs	r2, #0
10013dee:	3390      	adds	r3, #144	; 0x90
10013df0:	600b      	str	r3, [r1, #0]
10013df2:	4b03      	ldr	r3, [pc, #12]	; (10013e00 <internal_event_init+0x2c>)
10013df4:	601a      	str	r2, [r3, #0]
10013df6:	bd10      	pop	{r4, pc}
10013df8:	1001bff8 	.word	0x1001bff8
10013dfc:	1001bf54 	.word	0x1001bf54
10013e00:	1001bff4 	.word	0x1001bff4

10013e04 <special_events_handler>:
10013e04:	b538      	push	{r3, r4, r5, lr}
10013e06:	4c1b      	ldr	r4, [pc, #108]	; (10013e74 <special_events_handler+0x70>)
10013e08:	1c03      	adds	r3, r0, #0
10013e0a:	8825      	ldrh	r5, [r4, #0]
10013e0c:	1c08      	adds	r0, r1, #0
10013e0e:	1c21      	adds	r1, r4, #0
10013e10:	429d      	cmp	r5, r3
10013e12:	d107      	bne.n	10013e24 <special_events_handler+0x20>
10013e14:	88a5      	ldrh	r5, [r4, #4]
10013e16:	4285      	cmp	r5, r0
10013e18:	d104      	bne.n	10013e24 <special_events_handler+0x20>
10013e1a:	2301      	movs	r3, #1
10013e1c:	425b      	negs	r3, r3
10013e1e:	8023      	strh	r3, [r4, #0]
10013e20:	60a2      	str	r2, [r4, #8]
10013e22:	e009      	b.n	10013e38 <special_events_handler+0x34>
10013e24:	884c      	ldrh	r4, [r1, #2]
10013e26:	429c      	cmp	r4, r3
10013e28:	d10a      	bne.n	10013e40 <special_events_handler+0x3c>
10013e2a:	888c      	ldrh	r4, [r1, #4]
10013e2c:	4284      	cmp	r4, r0
10013e2e:	d107      	bne.n	10013e40 <special_events_handler+0x3c>
10013e30:	2301      	movs	r3, #1
10013e32:	425b      	negs	r3, r3
10013e34:	804b      	strh	r3, [r1, #2]
10013e36:	608a      	str	r2, [r1, #8]
10013e38:	4b0f      	ldr	r3, [pc, #60]	; (10013e78 <special_events_handler+0x74>)
10013e3a:	4798      	blx	r3
10013e3c:	2001      	movs	r0, #1
10013e3e:	e017      	b.n	10013e70 <special_events_handler+0x6c>
10013e40:	490e      	ldr	r1, [pc, #56]	; (10013e7c <special_events_handler+0x78>)
10013e42:	428b      	cmp	r3, r1
10013e44:	d00e      	beq.n	10013e64 <special_events_handler+0x60>
10013e46:	490e      	ldr	r1, [pc, #56]	; (10013e80 <special_events_handler+0x7c>)
10013e48:	428b      	cmp	r3, r1
10013e4a:	d007      	beq.n	10013e5c <special_events_handler+0x58>
10013e4c:	490d      	ldr	r1, [pc, #52]	; (10013e84 <special_events_handler+0x80>)
10013e4e:	2000      	movs	r0, #0
10013e50:	428b      	cmp	r3, r1
10013e52:	d10d      	bne.n	10013e70 <special_events_handler+0x6c>
10013e54:	1c10      	adds	r0, r2, #0
10013e56:	4b0c      	ldr	r3, [pc, #48]	; (10013e88 <special_events_handler+0x84>)
10013e58:	4798      	blx	r3
10013e5a:	e7ef      	b.n	10013e3c <special_events_handler+0x38>
10013e5c:	1c11      	adds	r1, r2, #0
10013e5e:	4b0b      	ldr	r3, [pc, #44]	; (10013e8c <special_events_handler+0x88>)
10013e60:	2200      	movs	r2, #0
10013e62:	e002      	b.n	10013e6a <special_events_handler+0x66>
10013e64:	1c11      	adds	r1, r2, #0
10013e66:	2200      	movs	r2, #0
10013e68:	4b09      	ldr	r3, [pc, #36]	; (10013e90 <special_events_handler+0x8c>)
10013e6a:	4798      	blx	r3
10013e6c:	4243      	negs	r3, r0
10013e6e:	4158      	adcs	r0, r3
10013e70:	bd38      	pop	{r3, r4, r5, pc}
10013e72:	46c0      	nop			; (mov r8, r8)
10013e74:	1001cf00 	.word	0x1001cf00
10013e78:	10015759 	.word	0x10015759
10013e7c:	00000e13 	.word	0x00000e13
10013e80:	00000e15 	.word	0x00000e15
10013e84:	00000e01 	.word	0x00000e01
10013e88:	10015ac9 	.word	0x10015ac9
10013e8c:	10015c89 	.word	0x10015c89
10013e90:	10015d61 	.word	0x10015d61

10013e94 <at_ble_event_get>:
10013e94:	2300      	movs	r3, #0
10013e96:	b5f0      	push	{r4, r5, r6, r7, lr}
10013e98:	b085      	sub	sp, #20
10013e9a:	9202      	str	r2, [sp, #8]
10013e9c:	7003      	strb	r3, [r0, #0]
10013e9e:	9b02      	ldr	r3, [sp, #8]
10013ea0:	9001      	str	r0, [sp, #4]
10013ea2:	3b01      	subs	r3, #1
10013ea4:	1c0d      	adds	r5, r1, #0
10013ea6:	9303      	str	r3, [sp, #12]
10013ea8:	3303      	adds	r3, #3
10013eaa:	d802      	bhi.n	10013eb2 <at_ble_event_get+0x1e>
10013eac:	9802      	ldr	r0, [sp, #8]
10013eae:	4bad      	ldr	r3, [pc, #692]	; (10014164 <at_ble_event_get+0x2d0>)
10013eb0:	4798      	blx	r3
10013eb2:	9b03      	ldr	r3, [sp, #12]
10013eb4:	4fac      	ldr	r7, [pc, #688]	; (10014168 <at_ble_event_get+0x2d4>)
10013eb6:	2400      	movs	r4, #0
10013eb8:	3303      	adds	r3, #3
10013eba:	d812      	bhi.n	10013ee2 <at_ble_event_get+0x4e>
10013ebc:	683b      	ldr	r3, [r7, #0]
10013ebe:	2b00      	cmp	r3, #0
10013ec0:	d112      	bne.n	10013ee8 <at_ble_event_get+0x54>
10013ec2:	2cd0      	cmp	r4, #208	; 0xd0
10013ec4:	d100      	bne.n	10013ec8 <at_ble_event_get+0x34>
10013ec6:	e29c      	b.n	10014402 <at_ble_event_get+0x56e>
10013ec8:	9802      	ldr	r0, [sp, #8]
10013eca:	4ba8      	ldr	r3, [pc, #672]	; (1001416c <at_ble_event_get+0x2d8>)
10013ecc:	4798      	blx	r3
10013ece:	1e04      	subs	r4, r0, #0
10013ed0:	2c02      	cmp	r4, #2
10013ed2:	d1f3      	bne.n	10013ebc <at_ble_event_get+0x28>
10013ed4:	e025      	b.n	10013f22 <at_ble_event_get+0x8e>
10013ed6:	9802      	ldr	r0, [sp, #8]
10013ed8:	4ba4      	ldr	r3, [pc, #656]	; (1001416c <at_ble_event_get+0x2d8>)
10013eda:	4798      	blx	r3
10013edc:	1e04      	subs	r4, r0, #0
10013ede:	2c02      	cmp	r4, #2
10013ee0:	d01f      	beq.n	10013f22 <at_ble_event_get+0x8e>
10013ee2:	683b      	ldr	r3, [r7, #0]
10013ee4:	2b00      	cmp	r3, #0
10013ee6:	d0f6      	beq.n	10013ed6 <at_ble_event_get+0x42>
10013ee8:	2cd0      	cmp	r4, #208	; 0xd0
10013eea:	d100      	bne.n	10013eee <at_ble_event_get+0x5a>
10013eec:	e289      	b.n	10014402 <at_ble_event_get+0x56e>
10013eee:	1ee3      	subs	r3, r4, #3
10013ef0:	1e5a      	subs	r2, r3, #1
10013ef2:	4193      	sbcs	r3, r2
10013ef4:	6838      	ldr	r0, [r7, #0]
10013ef6:	425b      	negs	r3, r3
10013ef8:	401c      	ands	r4, r3
10013efa:	2800      	cmp	r0, #0
10013efc:	d100      	bne.n	10013f00 <at_ble_event_get+0x6c>
10013efe:	e286      	b.n	1001440e <at_ble_event_get+0x57a>
10013f00:	6803      	ldr	r3, [r0, #0]
10013f02:	68c1      	ldr	r1, [r0, #12]
10013f04:	603b      	str	r3, [r7, #0]
10013f06:	4f9a      	ldr	r7, [pc, #616]	; (10014170 <at_ble_event_get+0x2dc>)
10013f08:	88c2      	ldrh	r2, [r0, #6]
10013f0a:	683e      	ldr	r6, [r7, #0]
10013f0c:	8883      	ldrh	r3, [r0, #4]
10013f0e:	6006      	str	r6, [r0, #0]
10013f10:	6038      	str	r0, [r7, #0]
10013f12:	2c00      	cmp	r4, #0
10013f14:	d112      	bne.n	10013f3c <at_ble_event_get+0xa8>
10013f16:	4897      	ldr	r0, [pc, #604]	; (10014174 <at_ble_event_get+0x2e0>)
10013f18:	4283      	cmp	r3, r0
10013f1a:	d008      	beq.n	10013f2e <at_ble_event_get+0x9a>
10013f1c:	4896      	ldr	r0, [pc, #600]	; (10014178 <at_ble_event_get+0x2e4>)
10013f1e:	4283      	cmp	r3, r0
10013f20:	d11d      	bne.n	10013f5e <at_ble_event_get+0xca>
10013f22:	233a      	movs	r3, #58	; 0x3a
10013f24:	2400      	movs	r4, #0
10013f26:	9a01      	ldr	r2, [sp, #4]
10013f28:	1c25      	adds	r5, r4, #0
10013f2a:	7013      	strb	r3, [r2, #0]
10013f2c:	e006      	b.n	10013f3c <at_ble_event_get+0xa8>
10013f2e:	429a      	cmp	r2, r3
10013f30:	d000      	beq.n	10013f34 <at_ble_event_get+0xa0>
10013f32:	e268      	b.n	10014406 <at_ble_event_get+0x572>
10013f34:	2338      	movs	r3, #56	; 0x38
10013f36:	9a01      	ldr	r2, [sp, #4]
10013f38:	7013      	strb	r3, [r2, #0]
10013f3a:	6029      	str	r1, [r5, #0]
10013f3c:	9b01      	ldr	r3, [sp, #4]
10013f3e:	781b      	ldrb	r3, [r3, #0]
10013f40:	2b3b      	cmp	r3, #59	; 0x3b
10013f42:	d003      	beq.n	10013f4c <at_ble_event_get+0xb8>
10013f44:	9b03      	ldr	r3, [sp, #12]
10013f46:	3303      	adds	r3, #3
10013f48:	d903      	bls.n	10013f52 <at_ble_event_get+0xbe>
10013f4a:	e264      	b.n	10014416 <at_ble_event_get+0x582>
10013f4c:	2c00      	cmp	r4, #0
10013f4e:	d0b0      	beq.n	10013eb2 <at_ble_event_get+0x1e>
10013f50:	e7f8      	b.n	10013f44 <at_ble_event_get+0xb0>
10013f52:	2cd0      	cmp	r4, #208	; 0xd0
10013f54:	d100      	bne.n	10013f58 <at_ble_event_get+0xc4>
10013f56:	e25e      	b.n	10014416 <at_ble_event_get+0x582>
10013f58:	4b88      	ldr	r3, [pc, #544]	; (1001417c <at_ble_event_get+0x2e8>)
10013f5a:	4798      	blx	r3
10013f5c:	e25b      	b.n	10014416 <at_ble_event_get+0x582>
10013f5e:	2abb      	cmp	r2, #187	; 0xbb
10013f60:	d123      	bne.n	10013faa <at_ble_event_get+0x116>
10013f62:	2bbb      	cmp	r3, #187	; 0xbb
10013f64:	d121      	bne.n	10013faa <at_ble_event_get+0x116>
10013f66:	80ac      	strh	r4, [r5, #4]
10013f68:	788b      	ldrb	r3, [r1, #2]
10013f6a:	784a      	ldrb	r2, [r1, #1]
10013f6c:	021b      	lsls	r3, r3, #8
10013f6e:	78cf      	ldrb	r7, [r1, #3]
10013f70:	7908      	ldrb	r0, [r1, #4]
10013f72:	4313      	orrs	r3, r2
10013f74:	794a      	ldrb	r2, [r1, #5]
10013f76:	4982      	ldr	r1, [pc, #520]	; (10014180 <at_ble_event_get+0x2ec>)
10013f78:	70af      	strb	r7, [r5, #2]
10013f7a:	802b      	strh	r3, [r5, #0]
10013f7c:	428b      	cmp	r3, r1
10013f7e:	d806      	bhi.n	10013f8e <at_ble_event_get+0xfa>
10013f80:	4a80      	ldr	r2, [pc, #512]	; (10014184 <at_ble_event_get+0x2f0>)
10013f82:	4293      	cmp	r3, r2
10013f84:	d20b      	bcs.n	10013f9e <at_ble_event_get+0x10a>
10013f86:	4a80      	ldr	r2, [pc, #512]	; (10014188 <at_ble_event_get+0x2f4>)
10013f88:	4293      	cmp	r3, r2
10013f8a:	d008      	beq.n	10013f9e <at_ble_event_get+0x10a>
10013f8c:	e009      	b.n	10013fa2 <at_ble_event_get+0x10e>
10013f8e:	497f      	ldr	r1, [pc, #508]	; (1001418c <at_ble_event_get+0x2f8>)
10013f90:	428b      	cmp	r3, r1
10013f92:	d106      	bne.n	10013fa2 <at_ble_event_get+0x10e>
10013f94:	0213      	lsls	r3, r2, #8
10013f96:	4303      	orrs	r3, r0
10013f98:	80ab      	strh	r3, [r5, #4]
10013f9a:	2337      	movs	r3, #55	; 0x37
10013f9c:	e002      	b.n	10013fa4 <at_ble_event_get+0x110>
10013f9e:	2336      	movs	r3, #54	; 0x36
10013fa0:	e000      	b.n	10013fa4 <at_ble_event_get+0x110>
10013fa2:	2300      	movs	r3, #0
10013fa4:	9a01      	ldr	r2, [sp, #4]
10013fa6:	7013      	strb	r3, [r2, #0]
10013fa8:	e7c8      	b.n	10013f3c <at_ble_event_get+0xa8>
10013faa:	4879      	ldr	r0, [pc, #484]	; (10014190 <at_ble_event_get+0x2fc>)
10013fac:	4283      	cmp	r3, r0
10013fae:	d100      	bne.n	10013fb2 <at_ble_event_get+0x11e>
10013fb0:	e14c      	b.n	1001424c <at_ble_event_get+0x3b8>
10013fb2:	d864      	bhi.n	1001407e <at_ble_event_get+0x1ea>
10013fb4:	4877      	ldr	r0, [pc, #476]	; (10014194 <at_ble_event_get+0x300>)
10013fb6:	4283      	cmp	r3, r0
10013fb8:	d100      	bne.n	10013fbc <at_ble_event_get+0x128>
10013fba:	e1cd      	b.n	10014358 <at_ble_event_get+0x4c4>
10013fbc:	d82f      	bhi.n	1001401e <at_ble_event_get+0x18a>
10013fbe:	4876      	ldr	r0, [pc, #472]	; (10014198 <at_ble_event_get+0x304>)
10013fc0:	4283      	cmp	r3, r0
10013fc2:	d100      	bne.n	10013fc6 <at_ble_event_get+0x132>
10013fc4:	e1d6      	b.n	10014374 <at_ble_event_get+0x4e0>
10013fc6:	d813      	bhi.n	10013ff0 <at_ble_event_get+0x15c>
10013fc8:	4874      	ldr	r0, [pc, #464]	; (1001419c <at_ble_event_get+0x308>)
10013fca:	4283      	cmp	r3, r0
10013fcc:	d100      	bne.n	10013fd0 <at_ble_event_get+0x13c>
10013fce:	e19f      	b.n	10014310 <at_ble_event_get+0x47c>
10013fd0:	d804      	bhi.n	10013fdc <at_ble_event_get+0x148>
10013fd2:	2438      	movs	r4, #56	; 0x38
10013fd4:	42a3      	cmp	r3, r4
10013fd6:	d100      	bne.n	10013fda <at_ble_event_get+0x146>
10013fd8:	e20f      	b.n	100143fa <at_ble_event_get+0x566>
10013fda:	e0b6      	b.n	1001414a <at_ble_event_get+0x2b6>
10013fdc:	4870      	ldr	r0, [pc, #448]	; (100141a0 <at_ble_event_get+0x30c>)
10013fde:	4283      	cmp	r3, r0
10013fe0:	d100      	bne.n	10013fe4 <at_ble_event_get+0x150>
10013fe2:	e19b      	b.n	1001431c <at_ble_event_get+0x488>
10013fe4:	30fe      	adds	r0, #254	; 0xfe
10013fe6:	30ff      	adds	r0, #255	; 0xff
10013fe8:	4283      	cmp	r3, r0
10013fea:	d100      	bne.n	10013fee <at_ble_event_get+0x15a>
10013fec:	e1c8      	b.n	10014380 <at_ble_event_get+0x4ec>
10013fee:	e0ac      	b.n	1001414a <at_ble_event_get+0x2b6>
10013ff0:	486c      	ldr	r0, [pc, #432]	; (100141a4 <at_ble_event_get+0x310>)
10013ff2:	4283      	cmp	r3, r0
10013ff4:	d100      	bne.n	10013ff8 <at_ble_event_get+0x164>
10013ff6:	e1a3      	b.n	10014340 <at_ble_event_get+0x4ac>
10013ff8:	d808      	bhi.n	1001400c <at_ble_event_get+0x178>
10013ffa:	486b      	ldr	r0, [pc, #428]	; (100141a8 <at_ble_event_get+0x314>)
10013ffc:	4283      	cmp	r3, r0
10013ffe:	d100      	bne.n	10014002 <at_ble_event_get+0x16e>
10014000:	e192      	b.n	10014328 <at_ble_event_get+0x494>
10014002:	486a      	ldr	r0, [pc, #424]	; (100141ac <at_ble_event_get+0x318>)
10014004:	4283      	cmp	r3, r0
10014006:	d100      	bne.n	1001400a <at_ble_event_get+0x176>
10014008:	e194      	b.n	10014334 <at_ble_event_get+0x4a0>
1001400a:	e09e      	b.n	1001414a <at_ble_event_get+0x2b6>
1001400c:	4868      	ldr	r0, [pc, #416]	; (100141b0 <at_ble_event_get+0x31c>)
1001400e:	4283      	cmp	r3, r0
10014010:	d100      	bne.n	10014014 <at_ble_event_get+0x180>
10014012:	e19b      	b.n	1001434c <at_ble_event_get+0x4b8>
10014014:	4867      	ldr	r0, [pc, #412]	; (100141b4 <at_ble_event_get+0x320>)
10014016:	4283      	cmp	r3, r0
10014018:	d100      	bne.n	1001401c <at_ble_event_get+0x188>
1001401a:	e1c5      	b.n	100143a8 <at_ble_event_get+0x514>
1001401c:	e095      	b.n	1001414a <at_ble_event_get+0x2b6>
1001401e:	4866      	ldr	r0, [pc, #408]	; (100141b8 <at_ble_event_get+0x324>)
10014020:	4283      	cmp	r3, r0
10014022:	d100      	bne.n	10014026 <at_ble_event_get+0x192>
10014024:	e1ba      	b.n	1001439c <at_ble_event_get+0x508>
10014026:	d812      	bhi.n	1001404e <at_ble_event_get+0x1ba>
10014028:	4864      	ldr	r0, [pc, #400]	; (100141bc <at_ble_event_get+0x328>)
1001402a:	4283      	cmp	r3, r0
1001402c:	d100      	bne.n	10014030 <at_ble_event_get+0x19c>
1001402e:	e1c1      	b.n	100143b4 <at_ble_event_get+0x520>
10014030:	d804      	bhi.n	1001403c <at_ble_event_get+0x1a8>
10014032:	4863      	ldr	r0, [pc, #396]	; (100141c0 <at_ble_event_get+0x32c>)
10014034:	4283      	cmp	r3, r0
10014036:	d100      	bne.n	1001403a <at_ble_event_get+0x1a6>
10014038:	e192      	b.n	10014360 <at_ble_event_get+0x4cc>
1001403a:	e086      	b.n	1001414a <at_ble_event_get+0x2b6>
1001403c:	4861      	ldr	r0, [pc, #388]	; (100141c4 <at_ble_event_get+0x330>)
1001403e:	4283      	cmp	r3, r0
10014040:	d100      	bne.n	10014044 <at_ble_event_get+0x1b0>
10014042:	e1a1      	b.n	10014388 <at_ble_event_get+0x4f4>
10014044:	4860      	ldr	r0, [pc, #384]	; (100141c8 <at_ble_event_get+0x334>)
10014046:	4283      	cmp	r3, r0
10014048:	d100      	bne.n	1001404c <at_ble_event_get+0x1b8>
1001404a:	e1a3      	b.n	10014394 <at_ble_event_get+0x500>
1001404c:	e07d      	b.n	1001414a <at_ble_event_get+0x2b6>
1001404e:	4a5f      	ldr	r2, [pc, #380]	; (100141cc <at_ble_event_get+0x338>)
10014050:	4293      	cmp	r3, r2
10014052:	d100      	bne.n	10014056 <at_ble_event_get+0x1c2>
10014054:	e07f      	b.n	10014156 <at_ble_event_get+0x2c2>
10014056:	d808      	bhi.n	1001406a <at_ble_event_get+0x1d6>
10014058:	3a08      	subs	r2, #8
1001405a:	4293      	cmp	r3, r2
1001405c:	d077      	beq.n	1001414e <at_ble_event_get+0x2ba>
1001405e:	4a5c      	ldr	r2, [pc, #368]	; (100141d0 <at_ble_event_get+0x33c>)
10014060:	2439      	movs	r4, #57	; 0x39
10014062:	4293      	cmp	r3, r2
10014064:	d100      	bne.n	10014068 <at_ble_event_get+0x1d4>
10014066:	e1c8      	b.n	100143fa <at_ble_event_get+0x566>
10014068:	e06f      	b.n	1001414a <at_ble_event_get+0x2b6>
1001406a:	22d1      	movs	r2, #209	; 0xd1
1001406c:	0112      	lsls	r2, r2, #4
1001406e:	4293      	cmp	r3, r2
10014070:	d100      	bne.n	10014074 <at_ble_event_get+0x1e0>
10014072:	e0df      	b.n	10014234 <at_ble_event_get+0x3a0>
10014074:	4a57      	ldr	r2, [pc, #348]	; (100141d4 <at_ble_event_get+0x340>)
10014076:	4293      	cmp	r3, r2
10014078:	d100      	bne.n	1001407c <at_ble_event_get+0x1e8>
1001407a:	e0e1      	b.n	10014240 <at_ble_event_get+0x3ac>
1001407c:	e065      	b.n	1001414a <at_ble_event_get+0x2b6>
1001407e:	4856      	ldr	r0, [pc, #344]	; (100141d8 <at_ble_event_get+0x344>)
10014080:	4283      	cmp	r3, r0
10014082:	d100      	bne.n	10014086 <at_ble_event_get+0x1f2>
10014084:	e118      	b.n	100142b8 <at_ble_event_get+0x424>
10014086:	d82e      	bhi.n	100140e6 <at_ble_event_get+0x252>
10014088:	4854      	ldr	r0, [pc, #336]	; (100141dc <at_ble_event_get+0x348>)
1001408a:	4283      	cmp	r3, r0
1001408c:	d100      	bne.n	10014090 <at_ble_event_get+0x1fc>
1001408e:	e13b      	b.n	10014308 <at_ble_event_get+0x474>
10014090:	d812      	bhi.n	100140b8 <at_ble_event_get+0x224>
10014092:	4853      	ldr	r0, [pc, #332]	; (100141e0 <at_ble_event_get+0x34c>)
10014094:	4283      	cmp	r3, r0
10014096:	d100      	bne.n	1001409a <at_ble_event_get+0x206>
10014098:	e0ee      	b.n	10014278 <at_ble_event_get+0x3e4>
1001409a:	d804      	bhi.n	100140a6 <at_ble_event_get+0x212>
1001409c:	3803      	subs	r0, #3
1001409e:	4283      	cmp	r3, r0
100140a0:	d100      	bne.n	100140a4 <at_ble_event_get+0x210>
100140a2:	e0d9      	b.n	10014258 <at_ble_event_get+0x3c4>
100140a4:	e051      	b.n	1001414a <at_ble_event_get+0x2b6>
100140a6:	484f      	ldr	r0, [pc, #316]	; (100141e4 <at_ble_event_get+0x350>)
100140a8:	4283      	cmp	r3, r0
100140aa:	d100      	bne.n	100140ae <at_ble_event_get+0x21a>
100140ac:	e0d8      	b.n	10014260 <at_ble_event_get+0x3cc>
100140ae:	484e      	ldr	r0, [pc, #312]	; (100141e8 <at_ble_event_get+0x354>)
100140b0:	4283      	cmp	r3, r0
100140b2:	d100      	bne.n	100140b6 <at_ble_event_get+0x222>
100140b4:	e0fb      	b.n	100142ae <at_ble_event_get+0x41a>
100140b6:	e048      	b.n	1001414a <at_ble_event_get+0x2b6>
100140b8:	484c      	ldr	r0, [pc, #304]	; (100141ec <at_ble_event_get+0x358>)
100140ba:	4283      	cmp	r3, r0
100140bc:	d100      	bne.n	100140c0 <at_ble_event_get+0x22c>
100140be:	e0e1      	b.n	10014284 <at_ble_event_get+0x3f0>
100140c0:	d808      	bhi.n	100140d4 <at_ble_event_get+0x240>
100140c2:	484b      	ldr	r0, [pc, #300]	; (100141f0 <at_ble_event_get+0x35c>)
100140c4:	4283      	cmp	r3, r0
100140c6:	d100      	bne.n	100140ca <at_ble_event_get+0x236>
100140c8:	e11a      	b.n	10014300 <at_ble_event_get+0x46c>
100140ca:	484a      	ldr	r0, [pc, #296]	; (100141f4 <at_ble_event_get+0x360>)
100140cc:	4283      	cmp	r3, r0
100140ce:	d100      	bne.n	100140d2 <at_ble_event_get+0x23e>
100140d0:	e0dd      	b.n	1001428e <at_ble_event_get+0x3fa>
100140d2:	e03a      	b.n	1001414a <at_ble_event_get+0x2b6>
100140d4:	4848      	ldr	r0, [pc, #288]	; (100141f8 <at_ble_event_get+0x364>)
100140d6:	4283      	cmp	r3, r0
100140d8:	d100      	bne.n	100140dc <at_ble_event_get+0x248>
100140da:	e0dc      	b.n	10014296 <at_ble_event_get+0x402>
100140dc:	4847      	ldr	r0, [pc, #284]	; (100141fc <at_ble_event_get+0x368>)
100140de:	4283      	cmp	r3, r0
100140e0:	d100      	bne.n	100140e4 <at_ble_event_get+0x250>
100140e2:	e0de      	b.n	100142a2 <at_ble_event_get+0x40e>
100140e4:	e031      	b.n	1001414a <at_ble_event_get+0x2b6>
100140e6:	4846      	ldr	r0, [pc, #280]	; (10014200 <at_ble_event_get+0x36c>)
100140e8:	4283      	cmp	r3, r0
100140ea:	d100      	bne.n	100140ee <at_ble_event_get+0x25a>
100140ec:	e0f6      	b.n	100142dc <at_ble_event_get+0x448>
100140ee:	d816      	bhi.n	1001411e <at_ble_event_get+0x28a>
100140f0:	4844      	ldr	r0, [pc, #272]	; (10014204 <at_ble_event_get+0x370>)
100140f2:	4283      	cmp	r3, r0
100140f4:	d100      	bne.n	100140f8 <at_ble_event_get+0x264>
100140f6:	e0f7      	b.n	100142e8 <at_ble_event_get+0x454>
100140f8:	d808      	bhi.n	1001410c <at_ble_event_get+0x278>
100140fa:	4843      	ldr	r0, [pc, #268]	; (10014208 <at_ble_event_get+0x374>)
100140fc:	4283      	cmp	r3, r0
100140fe:	d100      	bne.n	10014102 <at_ble_event_get+0x26e>
10014100:	e0e0      	b.n	100142c4 <at_ble_event_get+0x430>
10014102:	4842      	ldr	r0, [pc, #264]	; (1001420c <at_ble_event_get+0x378>)
10014104:	4283      	cmp	r3, r0
10014106:	d100      	bne.n	1001410a <at_ble_event_get+0x276>
10014108:	e0b0      	b.n	1001426c <at_ble_event_get+0x3d8>
1001410a:	e01e      	b.n	1001414a <at_ble_event_get+0x2b6>
1001410c:	4a40      	ldr	r2, [pc, #256]	; (10014210 <at_ble_event_get+0x37c>)
1001410e:	4293      	cmp	r3, r2
10014110:	d100      	bne.n	10014114 <at_ble_event_get+0x280>
10014112:	e0dd      	b.n	100142d0 <at_ble_event_get+0x43c>
10014114:	4a3f      	ldr	r2, [pc, #252]	; (10014214 <at_ble_event_get+0x380>)
10014116:	4293      	cmp	r3, r2
10014118:	d100      	bne.n	1001411c <at_ble_event_get+0x288>
1001411a:	e0eb      	b.n	100142f4 <at_ble_event_get+0x460>
1001411c:	e015      	b.n	1001414a <at_ble_event_get+0x2b6>
1001411e:	483e      	ldr	r0, [pc, #248]	; (10014218 <at_ble_event_get+0x384>)
10014120:	4283      	cmp	r3, r0
10014122:	d100      	bne.n	10014126 <at_ble_event_get+0x292>
10014124:	e158      	b.n	100143d8 <at_ble_event_get+0x544>
10014126:	d808      	bhi.n	1001413a <at_ble_event_get+0x2a6>
10014128:	483c      	ldr	r0, [pc, #240]	; (1001421c <at_ble_event_get+0x388>)
1001412a:	4283      	cmp	r3, r0
1001412c:	d100      	bne.n	10014130 <at_ble_event_get+0x29c>
1001412e:	e147      	b.n	100143c0 <at_ble_event_get+0x52c>
10014130:	483b      	ldr	r0, [pc, #236]	; (10014220 <at_ble_event_get+0x38c>)
10014132:	4283      	cmp	r3, r0
10014134:	d100      	bne.n	10014138 <at_ble_event_get+0x2a4>
10014136:	e149      	b.n	100143cc <at_ble_event_get+0x538>
10014138:	e007      	b.n	1001414a <at_ble_event_get+0x2b6>
1001413a:	483a      	ldr	r0, [pc, #232]	; (10014224 <at_ble_event_get+0x390>)
1001413c:	4283      	cmp	r3, r0
1001413e:	d100      	bne.n	10014142 <at_ble_event_get+0x2ae>
10014140:	e150      	b.n	100143e4 <at_ble_event_get+0x550>
10014142:	4839      	ldr	r0, [pc, #228]	; (10014228 <at_ble_event_get+0x394>)
10014144:	4283      	cmp	r3, r0
10014146:	d100      	bne.n	1001414a <at_ble_event_get+0x2b6>
10014148:	e152      	b.n	100143f0 <at_ble_event_get+0x55c>
1001414a:	2400      	movs	r4, #0
1001414c:	e155      	b.n	100143fa <at_ble_event_get+0x566>
1001414e:	1c08      	adds	r0, r1, #0
10014150:	4b36      	ldr	r3, [pc, #216]	; (1001422c <at_ble_event_get+0x398>)
10014152:	1c29      	adds	r1, r5, #0
10014154:	e07d      	b.n	10014252 <at_ble_event_get+0x3be>
10014156:	1c08      	adds	r0, r1, #0
10014158:	4b35      	ldr	r3, [pc, #212]	; (10014230 <at_ble_event_get+0x39c>)
1001415a:	1c29      	adds	r1, r5, #0
1001415c:	4798      	blx	r3
1001415e:	2404      	movs	r4, #4
10014160:	e14b      	b.n	100143fa <at_ble_event_get+0x566>
10014162:	46c0      	nop			; (mov r8, r8)
10014164:	10015791 	.word	0x10015791
10014168:	1001bff4 	.word	0x1001bff4
1001416c:	100137e9 	.word	0x100137e9
10014170:	1001bff8 	.word	0x1001bff8
10014174:	0000ffff 	.word	0x0000ffff
10014178:	0000fffe 	.word	0x0000fffe
1001417c:	10015793 	.word	0x10015793
10014180:	0000201e 	.word	0x0000201e
10014184:	0000201d 	.word	0x0000201d
10014188:	00000c03 	.word	0x00000c03
1001418c:	0000201f 	.word	0x0000201f
10014190:	00000d1c 	.word	0x00000d1c
10014194:	00000c0c 	.word	0x00000c0c
10014198:	00000c02 	.word	0x00000c02
1001419c:	00000a02 	.word	0x00000a02
100141a0:	00000a03 	.word	0x00000a03
100141a4:	00000c06 	.word	0x00000c06
100141a8:	00000c04 	.word	0x00000c04
100141ac:	00000c05 	.word	0x00000c05
100141b0:	00000c07 	.word	0x00000c07
100141b4:	00000c09 	.word	0x00000c09
100141b8:	00000c17 	.word	0x00000c17
100141bc:	00000c12 	.word	0x00000c12
100141c0:	00000c0d 	.word	0x00000c0d
100141c4:	00000c13 	.word	0x00000c13
100141c8:	00000c15 	.word	0x00000c15
100141cc:	00000d08 	.word	0x00000d08
100141d0:	00000d01 	.word	0x00000d01
100141d4:	00000d15 	.word	0x00000d15
100141d8:	00000e1b 	.word	0x00000e1b
100141dc:	00000e0f 	.word	0x00000e0f
100141e0:	00000e03 	.word	0x00000e03
100141e4:	00000e06 	.word	0x00000e06
100141e8:	00000e0a 	.word	0x00000e0a
100141ec:	00000e15 	.word	0x00000e15
100141f0:	00000e11 	.word	0x00000e11
100141f4:	00000e13 	.word	0x00000e13
100141f8:	00000e17 	.word	0x00000e17
100141fc:	00000e19 	.word	0x00000e19
10014200:	00000e27 	.word	0x00000e27
10014204:	00000e21 	.word	0x00000e21
10014208:	00000e1c 	.word	0x00000e1c
1001420c:	00000e1d 	.word	0x00000e1d
10014210:	00000e22 	.word	0x00000e22
10014214:	00000e25 	.word	0x00000e25
10014218:	00001b05 	.word	0x00001b05
1001421c:	00001b01 	.word	0x00001b01
10014220:	00001b03 	.word	0x00001b03
10014224:	00001b06 	.word	0x00001b06
10014228:	00001b08 	.word	0x00001b08
1001422c:	100165bd 	.word	0x100165bd
10014230:	100165a1 	.word	0x100165a1
10014234:	1c08      	adds	r0, r1, #0
10014236:	4b79      	ldr	r3, [pc, #484]	; (1001441c <at_ble_event_get+0x588>)
10014238:	1c29      	adds	r1, r5, #0
1001423a:	4798      	blx	r3
1001423c:	2401      	movs	r4, #1
1001423e:	e0dc      	b.n	100143fa <at_ble_event_get+0x566>
10014240:	1c08      	adds	r0, r1, #0
10014242:	4b77      	ldr	r3, [pc, #476]	; (10014420 <at_ble_event_get+0x58c>)
10014244:	1c29      	adds	r1, r5, #0
10014246:	4798      	blx	r3
10014248:	240f      	movs	r4, #15
1001424a:	e0d6      	b.n	100143fa <at_ble_event_get+0x566>
1001424c:	1c08      	adds	r0, r1, #0
1001424e:	1c29      	adds	r1, r5, #0
10014250:	4b74      	ldr	r3, [pc, #464]	; (10014424 <at_ble_event_get+0x590>)
10014252:	4798      	blx	r3
10014254:	1c04      	adds	r4, r0, #0
10014256:	e0d0      	b.n	100143fa <at_ble_event_get+0x566>
10014258:	1c10      	adds	r0, r2, #0
1001425a:	4b73      	ldr	r3, [pc, #460]	; (10014428 <at_ble_event_get+0x594>)
1001425c:	1c2a      	adds	r2, r5, #0
1001425e:	e014      	b.n	1001428a <at_ble_event_get+0x3f6>
10014260:	1c10      	adds	r0, r2, #0
10014262:	4b72      	ldr	r3, [pc, #456]	; (1001442c <at_ble_event_get+0x598>)
10014264:	1c2a      	adds	r2, r5, #0
10014266:	4798      	blx	r3
10014268:	2411      	movs	r4, #17
1001426a:	e0c6      	b.n	100143fa <at_ble_event_get+0x566>
1001426c:	1c10      	adds	r0, r2, #0
1001426e:	4b70      	ldr	r3, [pc, #448]	; (10014430 <at_ble_event_get+0x59c>)
10014270:	1c2a      	adds	r2, r5, #0
10014272:	4798      	blx	r3
10014274:	2412      	movs	r4, #18
10014276:	e0c0      	b.n	100143fa <at_ble_event_get+0x566>
10014278:	1c08      	adds	r0, r1, #0
1001427a:	4b6e      	ldr	r3, [pc, #440]	; (10014434 <at_ble_event_get+0x5a0>)
1001427c:	1c29      	adds	r1, r5, #0
1001427e:	4798      	blx	r3
10014280:	2406      	movs	r4, #6
10014282:	e0ba      	b.n	100143fa <at_ble_event_get+0x566>
10014284:	1c10      	adds	r0, r2, #0
10014286:	1c2a      	adds	r2, r5, #0
10014288:	4b6b      	ldr	r3, [pc, #428]	; (10014438 <at_ble_event_get+0x5a4>)
1001428a:	4798      	blx	r3
1001428c:	e7e2      	b.n	10014254 <at_ble_event_get+0x3c0>
1001428e:	1c10      	adds	r0, r2, #0
10014290:	4b6a      	ldr	r3, [pc, #424]	; (1001443c <at_ble_event_get+0x5a8>)
10014292:	1c2a      	adds	r2, r5, #0
10014294:	e7f9      	b.n	1001428a <at_ble_event_get+0x3f6>
10014296:	1c10      	adds	r0, r2, #0
10014298:	4b69      	ldr	r3, [pc, #420]	; (10014440 <at_ble_event_get+0x5ac>)
1001429a:	1c2a      	adds	r2, r5, #0
1001429c:	4798      	blx	r3
1001429e:	240d      	movs	r4, #13
100142a0:	e0ab      	b.n	100143fa <at_ble_event_get+0x566>
100142a2:	1c10      	adds	r0, r2, #0
100142a4:	4b67      	ldr	r3, [pc, #412]	; (10014444 <at_ble_event_get+0x5b0>)
100142a6:	1c2a      	adds	r2, r5, #0
100142a8:	4798      	blx	r3
100142aa:	240e      	movs	r4, #14
100142ac:	e0a5      	b.n	100143fa <at_ble_event_get+0x566>
100142ae:	1c10      	adds	r0, r2, #0
100142b0:	4b65      	ldr	r3, [pc, #404]	; (10014448 <at_ble_event_get+0x5b4>)
100142b2:	1c2a      	adds	r2, r5, #0
100142b4:	4798      	blx	r3
100142b6:	e075      	b.n	100143a4 <at_ble_event_get+0x510>
100142b8:	1c10      	adds	r0, r2, #0
100142ba:	4b64      	ldr	r3, [pc, #400]	; (1001444c <at_ble_event_get+0x5b8>)
100142bc:	1c2a      	adds	r2, r5, #0
100142be:	4798      	blx	r3
100142c0:	240b      	movs	r4, #11
100142c2:	e09a      	b.n	100143fa <at_ble_event_get+0x566>
100142c4:	1c10      	adds	r0, r2, #0
100142c6:	4b62      	ldr	r3, [pc, #392]	; (10014450 <at_ble_event_get+0x5bc>)
100142c8:	1c2a      	adds	r2, r5, #0
100142ca:	4798      	blx	r3
100142cc:	2410      	movs	r4, #16
100142ce:	e094      	b.n	100143fa <at_ble_event_get+0x566>
100142d0:	1c08      	adds	r0, r1, #0
100142d2:	4b60      	ldr	r3, [pc, #384]	; (10014454 <at_ble_event_get+0x5c0>)
100142d4:	1c29      	adds	r1, r5, #0
100142d6:	4798      	blx	r3
100142d8:	2428      	movs	r4, #40	; 0x28
100142da:	e08e      	b.n	100143fa <at_ble_event_get+0x566>
100142dc:	1c08      	adds	r0, r1, #0
100142de:	4b5e      	ldr	r3, [pc, #376]	; (10014458 <at_ble_event_get+0x5c4>)
100142e0:	1c29      	adds	r1, r5, #0
100142e2:	4798      	blx	r3
100142e4:	2429      	movs	r4, #41	; 0x29
100142e6:	e088      	b.n	100143fa <at_ble_event_get+0x566>
100142e8:	1c08      	adds	r0, r1, #0
100142ea:	4b5c      	ldr	r3, [pc, #368]	; (1001445c <at_ble_event_get+0x5c8>)
100142ec:	1c29      	adds	r1, r5, #0
100142ee:	4798      	blx	r3
100142f0:	2427      	movs	r4, #39	; 0x27
100142f2:	e082      	b.n	100143fa <at_ble_event_get+0x566>
100142f4:	1c08      	adds	r0, r1, #0
100142f6:	4b5a      	ldr	r3, [pc, #360]	; (10014460 <at_ble_event_get+0x5cc>)
100142f8:	1c29      	adds	r1, r5, #0
100142fa:	4798      	blx	r3
100142fc:	242a      	movs	r4, #42	; 0x2a
100142fe:	e07c      	b.n	100143fa <at_ble_event_get+0x566>
10014300:	1c10      	adds	r0, r2, #0
10014302:	4b58      	ldr	r3, [pc, #352]	; (10014464 <at_ble_event_get+0x5d0>)
10014304:	1c2a      	adds	r2, r5, #0
10014306:	e7c0      	b.n	1001428a <at_ble_event_get+0x3f6>
10014308:	1c10      	adds	r0, r2, #0
1001430a:	4b57      	ldr	r3, [pc, #348]	; (10014468 <at_ble_event_get+0x5d4>)
1001430c:	1c2a      	adds	r2, r5, #0
1001430e:	e7bc      	b.n	1001428a <at_ble_event_get+0x3f6>
10014310:	1c08      	adds	r0, r1, #0
10014312:	4b56      	ldr	r3, [pc, #344]	; (1001446c <at_ble_event_get+0x5d8>)
10014314:	1c29      	adds	r1, r5, #0
10014316:	4798      	blx	r3
10014318:	242b      	movs	r4, #43	; 0x2b
1001431a:	e06e      	b.n	100143fa <at_ble_event_get+0x566>
1001431c:	1c08      	adds	r0, r1, #0
1001431e:	4b54      	ldr	r3, [pc, #336]	; (10014470 <at_ble_event_get+0x5dc>)
10014320:	1c29      	adds	r1, r5, #0
10014322:	4798      	blx	r3
10014324:	242c      	movs	r4, #44	; 0x2c
10014326:	e068      	b.n	100143fa <at_ble_event_get+0x566>
10014328:	1c10      	adds	r0, r2, #0
1001432a:	4b52      	ldr	r3, [pc, #328]	; (10014474 <at_ble_event_get+0x5e0>)
1001432c:	1c2a      	adds	r2, r5, #0
1001432e:	4798      	blx	r3
10014330:	2413      	movs	r4, #19
10014332:	e062      	b.n	100143fa <at_ble_event_get+0x566>
10014334:	1c10      	adds	r0, r2, #0
10014336:	4b50      	ldr	r3, [pc, #320]	; (10014478 <at_ble_event_get+0x5e4>)
10014338:	1c2a      	adds	r2, r5, #0
1001433a:	4798      	blx	r3
1001433c:	2414      	movs	r4, #20
1001433e:	e05c      	b.n	100143fa <at_ble_event_get+0x566>
10014340:	1c10      	adds	r0, r2, #0
10014342:	4b4e      	ldr	r3, [pc, #312]	; (1001447c <at_ble_event_get+0x5e8>)
10014344:	1c2a      	adds	r2, r5, #0
10014346:	4798      	blx	r3
10014348:	2415      	movs	r4, #21
1001434a:	e056      	b.n	100143fa <at_ble_event_get+0x566>
1001434c:	1c10      	adds	r0, r2, #0
1001434e:	4b4c      	ldr	r3, [pc, #304]	; (10014480 <at_ble_event_get+0x5ec>)
10014350:	1c2a      	adds	r2, r5, #0
10014352:	4798      	blx	r3
10014354:	2416      	movs	r4, #22
10014356:	e050      	b.n	100143fa <at_ble_event_get+0x566>
10014358:	1c10      	adds	r0, r2, #0
1001435a:	4b4a      	ldr	r3, [pc, #296]	; (10014484 <at_ble_event_get+0x5f0>)
1001435c:	1c2a      	adds	r2, r5, #0
1001435e:	e794      	b.n	1001428a <at_ble_event_get+0x3f6>
10014360:	1c10      	adds	r0, r2, #0
10014362:	4b48      	ldr	r3, [pc, #288]	; (10014484 <at_ble_event_get+0x5f0>)
10014364:	1c2a      	adds	r2, r5, #0
10014366:	4798      	blx	r3
10014368:	88a9      	ldrh	r1, [r5, #4]
1001436a:	1c04      	adds	r4, r0, #0
1001436c:	4b46      	ldr	r3, [pc, #280]	; (10014488 <at_ble_event_get+0x5f4>)
1001436e:	8828      	ldrh	r0, [r5, #0]
10014370:	4798      	blx	r3
10014372:	e042      	b.n	100143fa <at_ble_event_get+0x566>
10014374:	1c10      	adds	r0, r2, #0
10014376:	4b45      	ldr	r3, [pc, #276]	; (1001448c <at_ble_event_get+0x5f8>)
10014378:	1c2a      	adds	r2, r5, #0
1001437a:	4798      	blx	r3
1001437c:	2423      	movs	r4, #35	; 0x23
1001437e:	e03c      	b.n	100143fa <at_ble_event_get+0x566>
10014380:	1c10      	adds	r0, r2, #0
10014382:	4b43      	ldr	r3, [pc, #268]	; (10014490 <at_ble_event_get+0x5fc>)
10014384:	1c2a      	adds	r2, r5, #0
10014386:	e780      	b.n	1001428a <at_ble_event_get+0x3f6>
10014388:	0a12      	lsrs	r2, r2, #8
1001438a:	1c08      	adds	r0, r1, #0
1001438c:	802a      	strh	r2, [r5, #0]
1001438e:	1c29      	adds	r1, r5, #0
10014390:	4b40      	ldr	r3, [pc, #256]	; (10014494 <at_ble_event_get+0x600>)
10014392:	e75e      	b.n	10014252 <at_ble_event_get+0x3be>
10014394:	1c10      	adds	r0, r2, #0
10014396:	4b40      	ldr	r3, [pc, #256]	; (10014498 <at_ble_event_get+0x604>)
10014398:	1c2a      	adds	r2, r5, #0
1001439a:	e776      	b.n	1001428a <at_ble_event_get+0x3f6>
1001439c:	1c08      	adds	r0, r1, #0
1001439e:	4b3f      	ldr	r3, [pc, #252]	; (1001449c <at_ble_event_get+0x608>)
100143a0:	1c29      	adds	r1, r5, #0
100143a2:	4798      	blx	r3
100143a4:	243b      	movs	r4, #59	; 0x3b
100143a6:	e028      	b.n	100143fa <at_ble_event_get+0x566>
100143a8:	1c10      	adds	r0, r2, #0
100143aa:	4b3d      	ldr	r3, [pc, #244]	; (100144a0 <at_ble_event_get+0x60c>)
100143ac:	1c2a      	adds	r2, r5, #0
100143ae:	4798      	blx	r3
100143b0:	2418      	movs	r4, #24
100143b2:	e022      	b.n	100143fa <at_ble_event_get+0x566>
100143b4:	1c10      	adds	r0, r2, #0
100143b6:	4b3b      	ldr	r3, [pc, #236]	; (100144a4 <at_ble_event_get+0x610>)
100143b8:	1c2a      	adds	r2, r5, #0
100143ba:	4798      	blx	r3
100143bc:	2420      	movs	r4, #32
100143be:	e01c      	b.n	100143fa <at_ble_event_get+0x566>
100143c0:	1c10      	adds	r0, r2, #0
100143c2:	4b39      	ldr	r3, [pc, #228]	; (100144a8 <at_ble_event_get+0x614>)
100143c4:	1c2a      	adds	r2, r5, #0
100143c6:	4798      	blx	r3
100143c8:	2433      	movs	r4, #51	; 0x33
100143ca:	e016      	b.n	100143fa <at_ble_event_get+0x566>
100143cc:	1c10      	adds	r0, r2, #0
100143ce:	4b37      	ldr	r3, [pc, #220]	; (100144ac <at_ble_event_get+0x618>)
100143d0:	1c2a      	adds	r2, r5, #0
100143d2:	4798      	blx	r3
100143d4:	2430      	movs	r4, #48	; 0x30
100143d6:	e010      	b.n	100143fa <at_ble_event_get+0x566>
100143d8:	1c10      	adds	r0, r2, #0
100143da:	4b35      	ldr	r3, [pc, #212]	; (100144b0 <at_ble_event_get+0x61c>)
100143dc:	1c2a      	adds	r2, r5, #0
100143de:	4798      	blx	r3
100143e0:	2434      	movs	r4, #52	; 0x34
100143e2:	e00a      	b.n	100143fa <at_ble_event_get+0x566>
100143e4:	1c10      	adds	r0, r2, #0
100143e6:	4b33      	ldr	r3, [pc, #204]	; (100144b4 <at_ble_event_get+0x620>)
100143e8:	1c2a      	adds	r2, r5, #0
100143ea:	4798      	blx	r3
100143ec:	2435      	movs	r4, #53	; 0x35
100143ee:	e004      	b.n	100143fa <at_ble_event_get+0x566>
100143f0:	1c10      	adds	r0, r2, #0
100143f2:	4b31      	ldr	r3, [pc, #196]	; (100144b8 <at_ble_event_get+0x624>)
100143f4:	1c2a      	adds	r2, r5, #0
100143f6:	4798      	blx	r3
100143f8:	2432      	movs	r4, #50	; 0x32
100143fa:	9b01      	ldr	r3, [sp, #4]
100143fc:	701c      	strb	r4, [r3, #0]
100143fe:	2400      	movs	r4, #0
10014400:	e59c      	b.n	10013f3c <at_ble_event_get+0xa8>
10014402:	24d0      	movs	r4, #208	; 0xd0
10014404:	e59a      	b.n	10013f3c <at_ble_event_get+0xa8>
10014406:	2abb      	cmp	r2, #187	; 0xbb
10014408:	d000      	beq.n	1001440c <at_ble_event_get+0x578>
1001440a:	e69e      	b.n	1001414a <at_ble_event_get+0x2b6>
1001440c:	e7f5      	b.n	100143fa <at_ble_event_get+0x566>
1001440e:	2c00      	cmp	r4, #0
10014410:	d000      	beq.n	10014414 <at_ble_event_get+0x580>
10014412:	e593      	b.n	10013f3c <at_ble_event_get+0xa8>
10014414:	e699      	b.n	1001414a <at_ble_event_get+0x2b6>
10014416:	1c20      	adds	r0, r4, #0
10014418:	b005      	add	sp, #20
1001441a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001441c:	1001683d 	.word	0x1001683d
10014420:	1001692d 	.word	0x1001692d
10014424:	10016951 	.word	0x10016951
10014428:	10015935 	.word	0x10015935
1001442c:	100161b5 	.word	0x100161b5
10014430:	10016231 	.word	0x10016231
10014434:	10015bed 	.word	0x10015bed
10014438:	10015c89 	.word	0x10015c89
1001443c:	10015d61 	.word	0x10015d61
10014440:	10015fe9 	.word	0x10015fe9
10014444:	10016089 	.word	0x10016089
10014448:	10016141 	.word	0x10016141
1001444c:	10016169 	.word	0x10016169
10014450:	1001617f 	.word	0x1001617f
10014454:	10016249 	.word	0x10016249
10014458:	10016277 	.word	0x10016277
1001445c:	1001628d 	.word	0x1001628d
10014460:	100162b7 	.word	0x100162b7
10014464:	100160e5 	.word	0x100160e5
10014468:	1001610f 	.word	0x1001610f
1001446c:	1001538d 	.word	0x1001538d
10014470:	100153b9 	.word	0x100153b9
10014474:	10016b71 	.word	0x10016b71
10014478:	10016bad 	.word	0x10016bad
1001447c:	10016bf5 	.word	0x10016bf5
10014480:	10016c39 	.word	0x10016c39
10014484:	10016c6d 	.word	0x10016c6d
10014488:	10016b31 	.word	0x10016b31
1001448c:	10016d39 	.word	0x10016d39
10014490:	10016cc1 	.word	0x10016cc1
10014494:	10015271 	.word	0x10015271
10014498:	100152dd 	.word	0x100152dd
1001449c:	100152a1 	.word	0x100152a1
100144a0:	10016d49 	.word	0x10016d49
100144a4:	10016d89 	.word	0x10016d89
100144a8:	10017051 	.word	0x10017051
100144ac:	1001705b 	.word	0x1001705b
100144b0:	10017061 	.word	0x10017061
100144b4:	10017067 	.word	0x10017067
100144b8:	10017073 	.word	0x10017073

100144bc <internal_event_flush>:
100144bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100144be:	490e      	ldr	r1, [pc, #56]	; (100144f8 <internal_event_flush+0x3c>)
100144c0:	2400      	movs	r4, #0
100144c2:	680b      	ldr	r3, [r1, #0]
100144c4:	1c0f      	adds	r7, r1, #0
100144c6:	1c1e      	adds	r6, r3, #0
100144c8:	4a0c      	ldr	r2, [pc, #48]	; (100144fc <internal_event_flush+0x40>)
100144ca:	6815      	ldr	r5, [r2, #0]
100144cc:	9201      	str	r2, [sp, #4]
100144ce:	2b00      	cmp	r3, #0
100144d0:	d00e      	beq.n	100144f0 <internal_event_flush+0x34>
100144d2:	889a      	ldrh	r2, [r3, #4]
100144d4:	6819      	ldr	r1, [r3, #0]
100144d6:	4282      	cmp	r2, r0
100144d8:	d107      	bne.n	100144ea <internal_event_flush+0x2e>
100144da:	2c00      	cmp	r4, #0
100144dc:	d001      	beq.n	100144e2 <internal_event_flush+0x26>
100144de:	6021      	str	r1, [r4, #0]
100144e0:	e000      	b.n	100144e4 <internal_event_flush+0x28>
100144e2:	1c0e      	adds	r6, r1, #0
100144e4:	601d      	str	r5, [r3, #0]
100144e6:	1c1d      	adds	r5, r3, #0
100144e8:	1c23      	adds	r3, r4, #0
100144ea:	1c1c      	adds	r4, r3, #0
100144ec:	1c0b      	adds	r3, r1, #0
100144ee:	e7ee      	b.n	100144ce <internal_event_flush+0x12>
100144f0:	9b01      	ldr	r3, [sp, #4]
100144f2:	603e      	str	r6, [r7, #0]
100144f4:	601d      	str	r5, [r3, #0]
100144f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100144f8:	1001bff4 	.word	0x1001bff4
100144fc:	1001bff8 	.word	0x1001bff8

10014500 <internal_conn_flush>:
10014500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014502:	4a12      	ldr	r2, [pc, #72]	; (1001454c <internal_conn_flush+0x4c>)
10014504:	9000      	str	r0, [sp, #0]
10014506:	6813      	ldr	r3, [r2, #0]
10014508:	4811      	ldr	r0, [pc, #68]	; (10014550 <internal_conn_flush+0x50>)
1001450a:	1c1f      	adds	r7, r3, #0
1001450c:	2100      	movs	r1, #0
1001450e:	4684      	mov	ip, r0
10014510:	6804      	ldr	r4, [r0, #0]
10014512:	9201      	str	r2, [sp, #4]
10014514:	2b00      	cmp	r3, #0
10014516:	d014      	beq.n	10014542 <internal_conn_flush+0x42>
10014518:	88d8      	ldrh	r0, [r3, #6]
1001451a:	9a00      	ldr	r2, [sp, #0]
1001451c:	681d      	ldr	r5, [r3, #0]
1001451e:	0a06      	lsrs	r6, r0, #8
10014520:	4296      	cmp	r6, r2
10014522:	d10b      	bne.n	1001453c <internal_conn_flush+0x3c>
10014524:	26fd      	movs	r6, #253	; 0xfd
10014526:	4006      	ands	r6, r0
10014528:	2e0c      	cmp	r6, #12
1001452a:	d107      	bne.n	1001453c <internal_conn_flush+0x3c>
1001452c:	2900      	cmp	r1, #0
1001452e:	d001      	beq.n	10014534 <internal_conn_flush+0x34>
10014530:	600d      	str	r5, [r1, #0]
10014532:	e000      	b.n	10014536 <internal_conn_flush+0x36>
10014534:	1c2f      	adds	r7, r5, #0
10014536:	601c      	str	r4, [r3, #0]
10014538:	1c1c      	adds	r4, r3, #0
1001453a:	1c0b      	adds	r3, r1, #0
1001453c:	1c19      	adds	r1, r3, #0
1001453e:	1c2b      	adds	r3, r5, #0
10014540:	e7e8      	b.n	10014514 <internal_conn_flush+0x14>
10014542:	9b01      	ldr	r3, [sp, #4]
10014544:	601f      	str	r7, [r3, #0]
10014546:	4663      	mov	r3, ip
10014548:	601c      	str	r4, [r3, #0]
1001454a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001454c:	1001bff4 	.word	0x1001bff4
10014550:	1001bff8 	.word	0x1001bff8

10014554 <at_ble_device_name_set>:
10014554:	b530      	push	{r4, r5, lr}
10014556:	23cf      	movs	r3, #207	; 0xcf
10014558:	2800      	cmp	r0, #0
1001455a:	d010      	beq.n	1001457e <at_ble_device_name_set+0x2a>
1001455c:	1e4a      	subs	r2, r1, #1
1001455e:	2a1f      	cmp	r2, #31
10014560:	d80d      	bhi.n	1001457e <at_ble_device_name_set+0x2a>
10014562:	4a08      	ldr	r2, [pc, #32]	; (10014584 <at_ble_device_name_set+0x30>)
10014564:	1c13      	adds	r3, r2, #0
10014566:	33aa      	adds	r3, #170	; 0xaa
10014568:	8019      	strh	r1, [r3, #0]
1001456a:	2300      	movs	r3, #0
1001456c:	1c1c      	adds	r4, r3, #0
1001456e:	5cc5      	ldrb	r5, [r0, r3]
10014570:	34ac      	adds	r4, #172	; 0xac
10014572:	3301      	adds	r3, #1
10014574:	5515      	strb	r5, [r2, r4]
10014576:	b2dc      	uxtb	r4, r3
10014578:	428c      	cmp	r4, r1
1001457a:	d3f7      	bcc.n	1001456c <at_ble_device_name_set+0x18>
1001457c:	2300      	movs	r3, #0
1001457e:	1c18      	adds	r0, r3, #0
10014580:	bd30      	pop	{r4, r5, pc}
10014582:	46c0      	nop			; (mov r8, r8)
10014584:	1001cf9e 	.word	0x1001cf9e

10014588 <at_ble_addr_get>:
10014588:	b510      	push	{r4, lr}
1001458a:	1c04      	adds	r4, r0, #0
1001458c:	20cf      	movs	r0, #207	; 0xcf
1001458e:	2c00      	cmp	r4, #0
10014590:	d006      	beq.n	100145a0 <at_ble_addr_get+0x18>
10014592:	4b04      	ldr	r3, [pc, #16]	; (100145a4 <at_ble_addr_get+0x1c>)
10014594:	38ce      	subs	r0, #206	; 0xce
10014596:	1c21      	adds	r1, r4, #0
10014598:	4798      	blx	r3
1001459a:	4b03      	ldr	r3, [pc, #12]	; (100145a8 <at_ble_addr_get+0x20>)
1001459c:	791b      	ldrb	r3, [r3, #4]
1001459e:	7023      	strb	r3, [r4, #0]
100145a0:	bd10      	pop	{r4, pc}
100145a2:	46c0      	nop			; (mov r8, r8)
100145a4:	10016451 	.word	0x10016451
100145a8:	1001cf9e 	.word	0x1001cf9e

100145ac <at_ble_set_dev_config>:
100145ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100145ae:	7906      	ldrb	r6, [r0, #4]
100145b0:	b089      	sub	sp, #36	; 0x24
100145b2:	25cf      	movs	r5, #207	; 0xcf
100145b4:	2e03      	cmp	r6, #3
100145b6:	d838      	bhi.n	1001462a <at_ble_set_dev_config+0x7e>
100145b8:	7803      	ldrb	r3, [r0, #0]
100145ba:	3511      	adds	r5, #17
100145bc:	2b0f      	cmp	r3, #15
100145be:	d834      	bhi.n	1001462a <at_ble_set_dev_config+0x7e>
100145c0:	2380      	movs	r3, #128	; 0x80
100145c2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
100145c4:	3d11      	subs	r5, #17
100145c6:	009b      	lsls	r3, r3, #2
100145c8:	429f      	cmp	r7, r3
100145ca:	d82e      	bhi.n	1001462a <at_ble_set_dev_config+0x7e>
100145cc:	7fc5      	ldrb	r5, [r0, #31]
100145ce:	7f83      	ldrb	r3, [r0, #30]
100145d0:	01ad      	lsls	r5, r5, #6
100145d2:	015b      	lsls	r3, r3, #5
100145d4:	431d      	orrs	r5, r3
100145d6:	7ec3      	ldrb	r3, [r0, #27]
100145d8:	431d      	orrs	r5, r3
100145da:	7f43      	ldrb	r3, [r0, #29]
100145dc:	011b      	lsls	r3, r3, #4
100145de:	431d      	orrs	r5, r3
100145e0:	7f03      	ldrb	r3, [r0, #28]
100145e2:	009b      	lsls	r3, r3, #2
100145e4:	431d      	orrs	r5, r3
100145e6:	4b12      	ldr	r3, [pc, #72]	; (10014630 <at_ble_set_dev_config+0x84>)
100145e8:	b2ed      	uxtb	r5, r5
100145ea:	711e      	strb	r6, [r3, #4]
100145ec:	7903      	ldrb	r3, [r0, #4]
100145ee:	3b02      	subs	r3, #2
100145f0:	2b01      	cmp	r3, #1
100145f2:	d801      	bhi.n	100145f8 <at_ble_set_dev_config+0x4c>
100145f4:	2302      	movs	r3, #2
100145f6:	7103      	strb	r3, [r0, #4]
100145f8:	1c04      	adds	r4, r0, #0
100145fa:	1c23      	adds	r3, r4, #0
100145fc:	330b      	adds	r3, #11
100145fe:	8861      	ldrh	r1, [r4, #2]
10014600:	9307      	str	r3, [sp, #28]
10014602:	7923      	ldrb	r3, [r4, #4]
10014604:	7800      	ldrb	r0, [r0, #0]
10014606:	9300      	str	r3, [sp, #0]
10014608:	9501      	str	r5, [sp, #4]
1001460a:	8c25      	ldrh	r5, [r4, #32]
1001460c:	1d62      	adds	r2, r4, #5
1001460e:	9502      	str	r5, [sp, #8]
10014610:	8c65      	ldrh	r5, [r4, #34]	; 0x22
10014612:	9b07      	ldr	r3, [sp, #28]
10014614:	9503      	str	r5, [sp, #12]
10014616:	9704      	str	r7, [sp, #16]
10014618:	4d06      	ldr	r5, [pc, #24]	; (10014634 <at_ble_set_dev_config+0x88>)
1001461a:	47a8      	blx	r5
1001461c:	7126      	strb	r6, [r4, #4]
1001461e:	1c05      	adds	r5, r0, #0
10014620:	1c21      	adds	r1, r4, #0
10014622:	4803      	ldr	r0, [pc, #12]	; (10014630 <at_ble_set_dev_config+0x84>)
10014624:	2226      	movs	r2, #38	; 0x26
10014626:	4b04      	ldr	r3, [pc, #16]	; (10014638 <at_ble_set_dev_config+0x8c>)
10014628:	4798      	blx	r3
1001462a:	1c28      	adds	r0, r5, #0
1001462c:	b009      	add	sp, #36	; 0x24
1001462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014630:	1001cf9e 	.word	0x1001cf9e
10014634:	10016349 	.word	0x10016349
10014638:	10018e1b 	.word	0x10018e1b

1001463c <at_ble_init>:
1001463c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001463e:	b087      	sub	sp, #28
10014640:	af03      	add	r7, sp, #12
10014642:	494d      	ldr	r1, [pc, #308]	; (10014778 <at_ble_init+0x13c>)
10014644:	1c04      	adds	r4, r0, #0
10014646:	220b      	movs	r2, #11
10014648:	4b4c      	ldr	r3, [pc, #304]	; (1001477c <at_ble_init+0x140>)
1001464a:	1c38      	adds	r0, r7, #0
1001464c:	4798      	blx	r3
1001464e:	2205      	movs	r2, #5
10014650:	4b4b      	ldr	r3, [pc, #300]	; (10014780 <at_ble_init+0x144>)
10014652:	801a      	strh	r2, [r3, #0]
10014654:	2300      	movs	r3, #0
10014656:	4a4b      	ldr	r2, [pc, #300]	; (10014784 <at_ble_init+0x148>)
10014658:	6013      	str	r3, [r2, #0]
1001465a:	4a4b      	ldr	r2, [pc, #300]	; (10014788 <at_ble_init+0x14c>)
1001465c:	7013      	strb	r3, [r2, #0]
1001465e:	4a4b      	ldr	r2, [pc, #300]	; (1001478c <at_ble_init+0x150>)
10014660:	7013      	strb	r3, [r2, #0]
10014662:	4b4b      	ldr	r3, [pc, #300]	; (10014790 <at_ble_init+0x154>)
10014664:	4798      	blx	r3
10014666:	4b4b      	ldr	r3, [pc, #300]	; (10014794 <at_ble_init+0x158>)
10014668:	4798      	blx	r3
1001466a:	4b4b      	ldr	r3, [pc, #300]	; (10014798 <at_ble_init+0x15c>)
1001466c:	4798      	blx	r3
1001466e:	4b4b      	ldr	r3, [pc, #300]	; (1001479c <at_ble_init+0x160>)
10014670:	4798      	blx	r3
10014672:	2c00      	cmp	r4, #0
10014674:	d009      	beq.n	1001468a <at_ble_init+0x4e>
10014676:	6820      	ldr	r0, [r4, #0]
10014678:	2800      	cmp	r0, #0
1001467a:	d006      	beq.n	1001468a <at_ble_init+0x4e>
1001467c:	6861      	ldr	r1, [r4, #4]
1001467e:	2900      	cmp	r1, #0
10014680:	d101      	bne.n	10014686 <at_ble_init+0x4a>
10014682:	26e2      	movs	r6, #226	; 0xe2
10014684:	e075      	b.n	10014772 <at_ble_init+0x136>
10014686:	4b46      	ldr	r3, [pc, #280]	; (100147a0 <at_ble_init+0x164>)
10014688:	4798      	blx	r3
1001468a:	4b46      	ldr	r3, [pc, #280]	; (100147a4 <at_ble_init+0x168>)
1001468c:	4798      	blx	r3
1001468e:	2801      	cmp	r0, #1
10014690:	d8f7      	bhi.n	10014682 <at_ble_init+0x46>
10014692:	4845      	ldr	r0, [pc, #276]	; (100147a8 <at_ble_init+0x16c>)
10014694:	4b45      	ldr	r3, [pc, #276]	; (100147ac <at_ble_init+0x170>)
10014696:	4798      	blx	r3
10014698:	2800      	cmp	r0, #0
1001469a:	d1f2      	bne.n	10014682 <at_ble_init+0x46>
1001469c:	4b44      	ldr	r3, [pc, #272]	; (100147b0 <at_ble_init+0x174>)
1001469e:	4798      	blx	r3
100146a0:	4b44      	ldr	r3, [pc, #272]	; (100147b4 <at_ble_init+0x178>)
100146a2:	4798      	blx	r3
100146a4:	466b      	mov	r3, sp
100146a6:	2201      	movs	r2, #1
100146a8:	1cdc      	adds	r4, r3, #3
100146aa:	1c20      	adds	r0, r4, #0
100146ac:	a901      	add	r1, sp, #4
100146ae:	4252      	negs	r2, r2
100146b0:	4b41      	ldr	r3, [pc, #260]	; (100147b8 <at_ble_init+0x17c>)
100146b2:	4798      	blx	r3
100146b4:	2800      	cmp	r0, #0
100146b6:	d102      	bne.n	100146be <at_ble_init+0x82>
100146b8:	7823      	ldrb	r3, [r4, #0]
100146ba:	2b39      	cmp	r3, #57	; 0x39
100146bc:	d1f2      	bne.n	100146a4 <at_ble_init+0x68>
100146be:	4b3f      	ldr	r3, [pc, #252]	; (100147bc <at_ble_init+0x180>)
100146c0:	4798      	blx	r3
100146c2:	1e06      	subs	r6, r0, #0
100146c4:	d155      	bne.n	10014772 <at_ble_init+0x136>
100146c6:	1c03      	adds	r3, r0, #0
100146c8:	2101      	movs	r1, #1
100146ca:	4a3d      	ldr	r2, [pc, #244]	; (100147c0 <at_ble_init+0x184>)
100146cc:	4249      	negs	r1, r1
100146ce:	189a      	adds	r2, r3, r2
100146d0:	3312      	adds	r3, #18
100146d2:	8151      	strh	r1, [r2, #10]
100146d4:	2b90      	cmp	r3, #144	; 0x90
100146d6:	d1f7      	bne.n	100146c8 <at_ble_init+0x8c>
100146d8:	4c3a      	ldr	r4, [pc, #232]	; (100147c4 <at_ble_init+0x188>)
100146da:	3b81      	subs	r3, #129	; 0x81
100146dc:	7023      	strb	r3, [r4, #0]
100146de:	4b3a      	ldr	r3, [pc, #232]	; (100147c8 <at_ble_init+0x18c>)
100146e0:	4a3a      	ldr	r2, [pc, #232]	; (100147cc <at_ble_init+0x190>)
100146e2:	8063      	strh	r3, [r4, #2]
100146e4:	2300      	movs	r3, #0
100146e6:	7123      	strb	r3, [r4, #4]
100146e8:	3301      	adds	r3, #1
100146ea:	1e58      	subs	r0, r3, #1
100146ec:	0119      	lsls	r1, r3, #4
100146ee:	4301      	orrs	r1, r0
100146f0:	3302      	adds	r3, #2
100146f2:	7011      	strb	r1, [r2, #0]
100146f4:	3201      	adds	r2, #1
100146f6:	2b21      	cmp	r3, #33	; 0x21
100146f8:	d1f7      	bne.n	100146ea <at_ble_init+0xae>
100146fa:	33e0      	adds	r3, #224	; 0xe0
100146fc:	33ff      	adds	r3, #255	; 0xff
100146fe:	84a3      	strh	r3, [r4, #36]	; 0x24
10014700:	1c23      	adds	r3, r4, #0
10014702:	2500      	movs	r5, #0
10014704:	3373      	adds	r3, #115	; 0x73
10014706:	701d      	strb	r5, [r3, #0]
10014708:	1c23      	adds	r3, r4, #0
1001470a:	3372      	adds	r3, #114	; 0x72
1001470c:	701d      	strb	r5, [r3, #0]
1001470e:	1c23      	adds	r3, r4, #0
10014710:	3376      	adds	r3, #118	; 0x76
10014712:	701d      	strb	r5, [r3, #0]
10014714:	1c23      	adds	r3, r4, #0
10014716:	33cc      	adds	r3, #204	; 0xcc
10014718:	801d      	strh	r5, [r3, #0]
1001471a:	1c22      	adds	r2, r4, #0
1001471c:	23a0      	movs	r3, #160	; 0xa0
1001471e:	32d0      	adds	r2, #208	; 0xd0
10014720:	005b      	lsls	r3, r3, #1
10014722:	8013      	strh	r3, [r2, #0]
10014724:	1c22      	adds	r2, r4, #0
10014726:	32ce      	adds	r2, #206	; 0xce
10014728:	8013      	strh	r3, [r2, #0]
1001472a:	1c23      	adds	r3, r4, #0
1001472c:	33d2      	adds	r3, #210	; 0xd2
1001472e:	801d      	strh	r5, [r3, #0]
10014730:	22fa      	movs	r2, #250	; 0xfa
10014732:	1c23      	adds	r3, r4, #0
10014734:	0052      	lsls	r2, r2, #1
10014736:	33d4      	adds	r3, #212	; 0xd4
10014738:	801a      	strh	r2, [r3, #0]
1001473a:	1c23      	adds	r3, r4, #0
1001473c:	33d6      	adds	r3, #214	; 0xd6
1001473e:	701d      	strb	r5, [r3, #0]
10014740:	1c20      	adds	r0, r4, #0
10014742:	4b23      	ldr	r3, [pc, #140]	; (100147d0 <at_ble_init+0x194>)
10014744:	76e5      	strb	r5, [r4, #27]
10014746:	7725      	strb	r5, [r4, #28]
10014748:	7765      	strb	r5, [r4, #29]
1001474a:	77a5      	strb	r5, [r4, #30]
1001474c:	77e5      	strb	r5, [r4, #31]
1001474e:	8425      	strh	r5, [r4, #32]
10014750:	8465      	strh	r5, [r4, #34]	; 0x22
10014752:	4798      	blx	r3
10014754:	1c23      	adds	r3, r4, #0
10014756:	2207      	movs	r2, #7
10014758:	3374      	adds	r3, #116	; 0x74
1001475a:	701a      	strb	r2, [r3, #0]
1001475c:	1c23      	adds	r3, r4, #0
1001475e:	3204      	adds	r2, #4
10014760:	33aa      	adds	r3, #170	; 0xaa
10014762:	801a      	strh	r2, [r3, #0]
10014764:	1c2b      	adds	r3, r5, #0
10014766:	5d7a      	ldrb	r2, [r7, r5]
10014768:	33ac      	adds	r3, #172	; 0xac
1001476a:	3501      	adds	r5, #1
1001476c:	54e2      	strb	r2, [r4, r3]
1001476e:	2d0b      	cmp	r5, #11
10014770:	d1f8      	bne.n	10014764 <at_ble_init+0x128>
10014772:	1c30      	adds	r0, r6, #0
10014774:	b007      	add	sp, #28
10014776:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014778:	1001b65c 	.word	0x1001b65c
1001477c:	10018e1b 	.word	0x10018e1b
10014780:	1001cf0c 	.word	0x1001cf0c
10014784:	1001c09c 	.word	0x1001c09c
10014788:	1001c004 	.word	0x1001c004
1001478c:	1001b88c 	.word	0x1001b88c
10014790:	10016d99 	.word	0x10016d99
10014794:	10014a85 	.word	0x10014a85
10014798:	100150c1 	.word	0x100150c1
1001479c:	10015381 	.word	0x10015381
100147a0:	100150f5 	.word	0x100150f5
100147a4:	10013015 	.word	0x10013015
100147a8:	10015681 	.word	0x10015681
100147ac:	10013245 	.word	0x10013245
100147b0:	10015719 	.word	0x10015719
100147b4:	10013dd5 	.word	0x10013dd5
100147b8:	10013e95 	.word	0x10013e95
100147bc:	100162d9 	.word	0x100162d9
100147c0:	1001cf0e 	.word	0x1001cf0e
100147c4:	1001cf9e 	.word	0x1001cf9e
100147c8:	00003a98 	.word	0x00003a98
100147cc:	1001cfa9 	.word	0x1001cfa9
100147d0:	100145ad 	.word	0x100145ad

100147d4 <at_ble_addr_set>:
100147d4:	b538      	push	{r3, r4, r5, lr}
100147d6:	1c45      	adds	r5, r0, #1
100147d8:	1c03      	adds	r3, r0, #0
100147da:	20cf      	movs	r0, #207	; 0xcf
100147dc:	2d00      	cmp	r5, #0
100147de:	d018      	beq.n	10014812 <at_ble_addr_set+0x3e>
100147e0:	781a      	ldrb	r2, [r3, #0]
100147e2:	2a03      	cmp	r2, #3
100147e4:	d815      	bhi.n	10014812 <at_ble_addr_set+0x3e>
100147e6:	2a01      	cmp	r2, #1
100147e8:	d102      	bne.n	100147f0 <at_ble_addr_set+0x1c>
100147ea:	785a      	ldrb	r2, [r3, #1]
100147ec:	2a00      	cmp	r2, #0
100147ee:	d010      	beq.n	10014812 <at_ble_addr_set+0x3e>
100147f0:	1c1c      	adds	r4, r3, #0
100147f2:	1c29      	adds	r1, r5, #0
100147f4:	2206      	movs	r2, #6
100147f6:	4b07      	ldr	r3, [pc, #28]	; (10014814 <at_ble_addr_set+0x40>)
100147f8:	4807      	ldr	r0, [pc, #28]	; (10014818 <at_ble_addr_set+0x44>)
100147fa:	4798      	blx	r3
100147fc:	7823      	ldrb	r3, [r4, #0]
100147fe:	4807      	ldr	r0, [pc, #28]	; (1001481c <at_ble_addr_set+0x48>)
10014800:	7103      	strb	r3, [r0, #4]
10014802:	4b07      	ldr	r3, [pc, #28]	; (10014820 <at_ble_addr_set+0x4c>)
10014804:	4798      	blx	r3
10014806:	7823      	ldrb	r3, [r4, #0]
10014808:	2b00      	cmp	r3, #0
1001480a:	d102      	bne.n	10014812 <at_ble_addr_set+0x3e>
1001480c:	1c28      	adds	r0, r5, #0
1001480e:	4b05      	ldr	r3, [pc, #20]	; (10014824 <at_ble_addr_set+0x50>)
10014810:	4798      	blx	r3
10014812:	bd38      	pop	{r3, r4, r5, pc}
10014814:	10018e1b 	.word	0x10018e1b
10014818:	1001cfa3 	.word	0x1001cfa3
1001481c:	1001cf9e 	.word	0x1001cf9e
10014820:	100145ad 	.word	0x100145ad
10014824:	10015795 	.word	0x10015795

10014828 <at_ble_adv_data_set>:
10014828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001482a:	4684      	mov	ip, r0
1001482c:	1c0f      	adds	r7, r1, #0
1001482e:	1c16      	adds	r6, r2, #0
10014830:	1c1c      	adds	r4, r3, #0
10014832:	2800      	cmp	r0, #0
10014834:	d102      	bne.n	1001483c <at_ble_adv_data_set+0x14>
10014836:	20e2      	movs	r0, #226	; 0xe2
10014838:	2a00      	cmp	r2, #0
1001483a:	d02b      	beq.n	10014894 <at_ble_adv_data_set+0x6c>
1001483c:	20cf      	movs	r0, #207	; 0xcf
1001483e:	2f1f      	cmp	r7, #31
10014840:	d828      	bhi.n	10014894 <at_ble_adv_data_set+0x6c>
10014842:	2c1f      	cmp	r4, #31
10014844:	d826      	bhi.n	10014894 <at_ble_adv_data_set+0x6c>
10014846:	4663      	mov	r3, ip
10014848:	2b00      	cmp	r3, #0
1001484a:	d00e      	beq.n	1001486a <at_ble_adv_data_set+0x42>
1001484c:	4812      	ldr	r0, [pc, #72]	; (10014898 <at_ble_adv_data_set+0x70>)
1001484e:	4d13      	ldr	r5, [pc, #76]	; (1001489c <at_ble_adv_data_set+0x74>)
10014850:	2f00      	cmp	r7, #0
10014852:	d104      	bne.n	1001485e <at_ble_adv_data_set+0x36>
10014854:	1c39      	adds	r1, r7, #0
10014856:	221f      	movs	r2, #31
10014858:	4b11      	ldr	r3, [pc, #68]	; (100148a0 <at_ble_adv_data_set+0x78>)
1001485a:	4798      	blx	r3
1001485c:	e003      	b.n	10014866 <at_ble_adv_data_set+0x3e>
1001485e:	4661      	mov	r1, ip
10014860:	1c3a      	adds	r2, r7, #0
10014862:	4b10      	ldr	r3, [pc, #64]	; (100148a4 <at_ble_adv_data_set+0x7c>)
10014864:	4798      	blx	r3
10014866:	3572      	adds	r5, #114	; 0x72
10014868:	702f      	strb	r7, [r5, #0]
1001486a:	1e30      	subs	r0, r6, #0
1001486c:	d012      	beq.n	10014894 <at_ble_adv_data_set+0x6c>
1001486e:	4d0b      	ldr	r5, [pc, #44]	; (1001489c <at_ble_adv_data_set+0x74>)
10014870:	480d      	ldr	r0, [pc, #52]	; (100148a8 <at_ble_adv_data_set+0x80>)
10014872:	2c00      	cmp	r4, #0
10014874:	d107      	bne.n	10014886 <at_ble_adv_data_set+0x5e>
10014876:	1c21      	adds	r1, r4, #0
10014878:	221f      	movs	r2, #31
1001487a:	4b09      	ldr	r3, [pc, #36]	; (100148a0 <at_ble_adv_data_set+0x78>)
1001487c:	3573      	adds	r5, #115	; 0x73
1001487e:	4798      	blx	r3
10014880:	702c      	strb	r4, [r5, #0]
10014882:	1c20      	adds	r0, r4, #0
10014884:	e006      	b.n	10014894 <at_ble_adv_data_set+0x6c>
10014886:	1c31      	adds	r1, r6, #0
10014888:	1c22      	adds	r2, r4, #0
1001488a:	4b06      	ldr	r3, [pc, #24]	; (100148a4 <at_ble_adv_data_set+0x7c>)
1001488c:	4798      	blx	r3
1001488e:	2000      	movs	r0, #0
10014890:	3573      	adds	r5, #115	; 0x73
10014892:	702c      	strb	r4, [r5, #0]
10014894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014896:	46c0      	nop			; (mov r8, r8)
10014898:	1001cfd2 	.word	0x1001cfd2
1001489c:	1001cf9e 	.word	0x1001cf9e
100148a0:	10018e2d 	.word	0x10018e2d
100148a4:	10018e1b 	.word	0x10018e1b
100148a8:	1001cff1 	.word	0x1001cff1

100148ac <at_ble_adv_start>:
100148ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100148ae:	b091      	sub	sp, #68	; 0x44
100148b0:	1c1f      	adds	r7, r3, #0
100148b2:	ab16      	add	r3, sp, #88	; 0x58
100148b4:	881d      	ldrh	r5, [r3, #0]
100148b6:	ab17      	add	r3, sp, #92	; 0x5c
100148b8:	881b      	ldrh	r3, [r3, #0]
100148ba:	910d      	str	r1, [sp, #52]	; 0x34
100148bc:	930e      	str	r3, [sp, #56]	; 0x38
100148be:	ab18      	add	r3, sp, #96	; 0x60
100148c0:	781b      	ldrb	r3, [r3, #0]
100148c2:	1c04      	adds	r4, r0, #0
100148c4:	930f      	str	r3, [sp, #60]	; 0x3c
100148c6:	4b42      	ldr	r3, [pc, #264]	; (100149d0 <at_ble_adv_start+0x124>)
100148c8:	1c16      	adds	r6, r2, #0
100148ca:	3373      	adds	r3, #115	; 0x73
100148cc:	781b      	ldrb	r3, [r3, #0]
100148ce:	20cf      	movs	r0, #207	; 0xcf
100148d0:	930c      	str	r3, [sp, #48]	; 0x30
100148d2:	2c01      	cmp	r4, #1
100148d4:	d103      	bne.n	100148de <at_ble_adv_start+0x32>
100148d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100148d8:	2b00      	cmp	r3, #0
100148da:	d176      	bne.n	100149ca <at_ble_adv_start+0x11e>
100148dc:	e024      	b.n	10014928 <at_ble_adv_start+0x7c>
100148de:	2c04      	cmp	r4, #4
100148e0:	d873      	bhi.n	100149ca <at_ble_adv_start+0x11e>
100148e2:	2380      	movs	r3, #128	; 0x80
100148e4:	01db      	lsls	r3, r3, #7
100148e6:	429d      	cmp	r5, r3
100148e8:	d86f      	bhi.n	100149ca <at_ble_adv_start+0x11e>
100148ea:	2c00      	cmp	r4, #0
100148ec:	d102      	bne.n	100148f4 <at_ble_adv_start+0x48>
100148ee:	2d1f      	cmp	r5, #31
100148f0:	d96b      	bls.n	100149ca <at_ble_adv_start+0x11e>
100148f2:	e003      	b.n	100148fc <at_ble_adv_start+0x50>
100148f4:	2d9f      	cmp	r5, #159	; 0x9f
100148f6:	d801      	bhi.n	100148fc <at_ble_adv_start+0x50>
100148f8:	2c01      	cmp	r4, #1
100148fa:	d166      	bne.n	100149ca <at_ble_adv_start+0x11e>
100148fc:	2f00      	cmp	r7, #0
100148fe:	d009      	beq.n	10014914 <at_ble_adv_start+0x68>
10014900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10014902:	20cf      	movs	r0, #207	; 0xcf
10014904:	3b01      	subs	r3, #1
10014906:	2b01      	cmp	r3, #1
10014908:	d95f      	bls.n	100149ca <at_ble_adv_start+0x11e>
1001490a:	2c01      	cmp	r4, #1
1001490c:	d102      	bne.n	10014914 <at_ble_adv_start+0x68>
1001490e:	2d00      	cmp	r5, #0
10014910:	d100      	bne.n	10014914 <at_ble_adv_start+0x68>
10014912:	3520      	adds	r5, #32
10014914:	4b2f      	ldr	r3, [pc, #188]	; (100149d4 <at_ble_adv_start+0x128>)
10014916:	4798      	blx	r3
10014918:	1c01      	adds	r1, r0, #0
1001491a:	2e00      	cmp	r6, #0
1001491c:	d043      	beq.n	100149a6 <at_ble_adv_start+0xfa>
1001491e:	7833      	ldrb	r3, [r6, #0]
10014920:	1e60      	subs	r0, r4, #1
10014922:	2b00      	cmp	r3, #0
10014924:	d109      	bne.n	1001493a <at_ble_adv_start+0x8e>
10014926:	e03b      	b.n	100149a0 <at_ble_adv_start+0xf4>
10014928:	2380      	movs	r3, #128	; 0x80
1001492a:	01db      	lsls	r3, r3, #7
1001492c:	429d      	cmp	r5, r3
1001492e:	d84c      	bhi.n	100149ca <at_ble_adv_start+0x11e>
10014930:	2e00      	cmp	r6, #0
10014932:	d04a      	beq.n	100149ca <at_ble_adv_start+0x11e>
10014934:	2f00      	cmp	r7, #0
10014936:	d1e3      	bne.n	10014900 <at_ble_adv_start+0x54>
10014938:	e02b      	b.n	10014992 <at_ble_adv_start+0xe6>
1001493a:	2301      	movs	r3, #1
1001493c:	2803      	cmp	r0, #3
1001493e:	d93a      	bls.n	100149b6 <at_ble_adv_start+0x10a>
10014940:	200d      	movs	r0, #13
10014942:	1c72      	adds	r2, r6, #1
10014944:	e002      	b.n	1001494c <at_ble_adv_start+0xa0>
10014946:	200e      	movs	r0, #14
10014948:	1e32      	subs	r2, r6, #0
1001494a:	d1fa      	bne.n	10014942 <at_ble_adv_start+0x96>
1001494c:	4c20      	ldr	r4, [pc, #128]	; (100149d0 <at_ble_adv_start+0x124>)
1001494e:	3474      	adds	r4, #116	; 0x74
10014950:	7826      	ldrb	r6, [r4, #0]
10014952:	2407      	movs	r4, #7
10014954:	2e00      	cmp	r6, #0
10014956:	d000      	beq.n	1001495a <at_ble_adv_start+0xae>
10014958:	1c34      	adds	r4, r6, #0
1001495a:	9200      	str	r2, [sp, #0]
1001495c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001495e:	9403      	str	r4, [sp, #12]
10014960:	9204      	str	r2, [sp, #16]
10014962:	4a1b      	ldr	r2, [pc, #108]	; (100149d0 <at_ble_adv_start+0x124>)
10014964:	9501      	str	r5, [sp, #4]
10014966:	9502      	str	r5, [sp, #8]
10014968:	9705      	str	r7, [sp, #20]
1001496a:	3272      	adds	r2, #114	; 0x72
1001496c:	7812      	ldrb	r2, [r2, #0]
1001496e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10014970:	9206      	str	r2, [sp, #24]
10014972:	4a19      	ldr	r2, [pc, #100]	; (100149d8 <at_ble_adv_start+0x12c>)
10014974:	9207      	str	r2, [sp, #28]
10014976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10014978:	9208      	str	r2, [sp, #32]
1001497a:	4a18      	ldr	r2, [pc, #96]	; (100149dc <at_ble_adv_start+0x130>)
1001497c:	9209      	str	r2, [sp, #36]	; 0x24
1001497e:	2264      	movs	r2, #100	; 0x64
10014980:	4362      	muls	r2, r4
10014982:	b292      	uxth	r2, r2
10014984:	920a      	str	r2, [sp, #40]	; 0x28
10014986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10014988:	4c15      	ldr	r4, [pc, #84]	; (100149e0 <at_ble_adv_start+0x134>)
1001498a:	920b      	str	r2, [sp, #44]	; 0x2c
1001498c:	4a15      	ldr	r2, [pc, #84]	; (100149e4 <at_ble_adv_start+0x138>)
1001498e:	47a0      	blx	r4
10014990:	e01b      	b.n	100149ca <at_ble_adv_start+0x11e>
10014992:	2d00      	cmp	r5, #0
10014994:	d1be      	bne.n	10014914 <at_ble_adv_start+0x68>
10014996:	4b0f      	ldr	r3, [pc, #60]	; (100149d4 <at_ble_adv_start+0x128>)
10014998:	4798      	blx	r3
1001499a:	2520      	movs	r5, #32
1001499c:	1c01      	adds	r1, r0, #0
1001499e:	e7be      	b.n	1001491e <at_ble_adv_start+0x72>
100149a0:	2803      	cmp	r0, #3
100149a2:	d8cd      	bhi.n	10014940 <at_ble_adv_start+0x94>
100149a4:	e006      	b.n	100149b4 <at_ble_adv_start+0x108>
100149a6:	1e60      	subs	r0, r4, #1
100149a8:	2803      	cmp	r0, #3
100149aa:	d903      	bls.n	100149b4 <at_ble_adv_start+0x108>
100149ac:	1c33      	adds	r3, r6, #0
100149ae:	200d      	movs	r0, #13
100149b0:	1c32      	adds	r2, r6, #0
100149b2:	e7cb      	b.n	1001494c <at_ble_adv_start+0xa0>
100149b4:	2300      	movs	r3, #0
100149b6:	f002 fb61 	bl	1001707c <__gnu_thumb1_case_sqi>
100149ba:	06c6      	.short	0x06c6
100149bc:	0204      	.short	0x0204
100149be:	200f      	movs	r0, #15
100149c0:	e7c2      	b.n	10014948 <at_ble_adv_start+0x9c>
100149c2:	2200      	movs	r2, #0
100149c4:	920c      	str	r2, [sp, #48]	; 0x30
100149c6:	200c      	movs	r0, #12
100149c8:	e7be      	b.n	10014948 <at_ble_adv_start+0x9c>
100149ca:	b011      	add	sp, #68	; 0x44
100149cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100149ce:	46c0      	nop			; (mov r8, r8)
100149d0:	1001cf9e 	.word	0x1001cf9e
100149d4:	10016825 	.word	0x10016825
100149d8:	1001cfd2 	.word	0x1001cfd2
100149dc:	1001cff1 	.word	0x1001cff1
100149e0:	10016705 	.word	0x10016705
100149e4:	00003a98 	.word	0x00003a98

100149e8 <at_ble_scan_stop>:
100149e8:	b510      	push	{r4, lr}
100149ea:	4b05      	ldr	r3, [pc, #20]	; (10014a00 <at_ble_scan_stop+0x18>)
100149ec:	4798      	blx	r3
100149ee:	1e04      	subs	r4, r0, #0
100149f0:	d103      	bne.n	100149fa <at_ble_scan_stop+0x12>
100149f2:	20d1      	movs	r0, #209	; 0xd1
100149f4:	4b03      	ldr	r3, [pc, #12]	; (10014a04 <at_ble_scan_stop+0x1c>)
100149f6:	0100      	lsls	r0, r0, #4
100149f8:	4798      	blx	r3
100149fa:	1c20      	adds	r0, r4, #0
100149fc:	bd10      	pop	{r4, pc}
100149fe:	46c0      	nop			; (mov r8, r8)
10014a00:	10016531 	.word	0x10016531
10014a04:	100144bd 	.word	0x100144bd

10014a08 <at_ble_disconnect>:
10014a08:	b538      	push	{r3, r4, r5, lr}
10014a0a:	1c04      	adds	r4, r0, #0
10014a0c:	4b04      	ldr	r3, [pc, #16]	; (10014a20 <at_ble_disconnect+0x18>)
10014a0e:	1c08      	adds	r0, r1, #0
10014a10:	1c21      	adds	r1, r4, #0
10014a12:	4798      	blx	r3
10014a14:	1c05      	adds	r5, r0, #0
10014a16:	4b03      	ldr	r3, [pc, #12]	; (10014a24 <at_ble_disconnect+0x1c>)
10014a18:	1c20      	adds	r0, r4, #0
10014a1a:	4798      	blx	r3
10014a1c:	1c28      	adds	r0, r5, #0
10014a1e:	bd38      	pop	{r3, r4, r5, pc}
10014a20:	10015ba9 	.word	0x10015ba9
10014a24:	10014501 	.word	0x10014501

10014a28 <at_ble_conn_update_reply>:
10014a28:	b510      	push	{r4, lr}
10014a2a:	4c01      	ldr	r4, [pc, #4]	; (10014a30 <at_ble_conn_update_reply+0x8>)
10014a2c:	47a0      	blx	r4
10014a2e:	bd10      	pop	{r4, pc}
10014a30:	10016099 	.word	0x10016099

10014a34 <at_ble_random_address_resolve>:
10014a34:	b510      	push	{r4, lr}
10014a36:	23cf      	movs	r3, #207	; 0xcf
10014a38:	2800      	cmp	r0, #0
10014a3a:	d00a      	beq.n	10014a52 <at_ble_random_address_resolve+0x1e>
10014a3c:	2900      	cmp	r1, #0
10014a3e:	d008      	beq.n	10014a52 <at_ble_random_address_resolve+0x1e>
10014a40:	2a00      	cmp	r2, #0
10014a42:	d006      	beq.n	10014a52 <at_ble_random_address_resolve+0x1e>
10014a44:	780c      	ldrb	r4, [r1, #0]
10014a46:	2c02      	cmp	r4, #2
10014a48:	d103      	bne.n	10014a52 <at_ble_random_address_resolve+0x1e>
10014a4a:	4b03      	ldr	r3, [pc, #12]	; (10014a58 <at_ble_random_address_resolve+0x24>)
10014a4c:	3101      	adds	r1, #1
10014a4e:	4798      	blx	r3
10014a50:	2300      	movs	r3, #0
10014a52:	1c18      	adds	r0, r3, #0
10014a54:	bd10      	pop	{r4, pc}
10014a56:	46c0      	nop			; (mov r8, r8)
10014a58:	100168c5 	.word	0x100168c5

10014a5c <at_ble_uuid_type2len>:
10014a5c:	23cf      	movs	r3, #207	; 0xcf
10014a5e:	2802      	cmp	r0, #2
10014a60:	d801      	bhi.n	10014a66 <at_ble_uuid_type2len+0xa>
10014a62:	4b02      	ldr	r3, [pc, #8]	; (10014a6c <at_ble_uuid_type2len+0x10>)
10014a64:	5c1b      	ldrb	r3, [r3, r0]
10014a66:	1c18      	adds	r0, r3, #0
10014a68:	4770      	bx	lr
10014a6a:	46c0      	nop			; (mov r8, r8)
10014a6c:	1001b676 	.word	0x1001b676

10014a70 <at_ble_uuid_len2type>:
10014a70:	1e83      	subs	r3, r0, #2
10014a72:	b2db      	uxtb	r3, r3
10014a74:	2003      	movs	r0, #3
10014a76:	2b0e      	cmp	r3, #14
10014a78:	d801      	bhi.n	10014a7e <at_ble_uuid_len2type+0xe>
10014a7a:	4a01      	ldr	r2, [pc, #4]	; (10014a80 <at_ble_uuid_len2type+0x10>)
10014a7c:	5cd0      	ldrb	r0, [r2, r3]
10014a7e:	4770      	bx	lr
10014a80:	1001b667 	.word	0x1001b667

10014a84 <init_gatt_client_module>:
10014a84:	2200      	movs	r2, #0
10014a86:	4b01      	ldr	r3, [pc, #4]	; (10014a8c <init_gatt_client_module+0x8>)
10014a88:	801a      	strh	r2, [r3, #0]
10014a8a:	4770      	bx	lr
10014a8c:	1001bffc 	.word	0x1001bffc

10014a90 <db_searchATT>:
10014a90:	b570      	push	{r4, r5, r6, lr}
10014a92:	1c05      	adds	r5, r0, #0
10014a94:	2400      	movs	r4, #0
10014a96:	4b0c      	ldr	r3, [pc, #48]	; (10014ac8 <db_searchATT+0x38>)
10014a98:	6819      	ldr	r1, [r3, #0]
10014a9a:	4b0c      	ldr	r3, [pc, #48]	; (10014acc <db_searchATT+0x3c>)
10014a9c:	681e      	ldr	r6, [r3, #0]
10014a9e:	428c      	cmp	r4, r1
10014aa0:	dc10      	bgt.n	10014ac4 <db_searchATT+0x34>
10014aa2:	200c      	movs	r0, #12
10014aa4:	1863      	adds	r3, r4, r1
10014aa6:	0fda      	lsrs	r2, r3, #31
10014aa8:	18d3      	adds	r3, r2, r3
10014aaa:	1c02      	adds	r2, r0, #0
10014aac:	105b      	asrs	r3, r3, #1
10014aae:	435a      	muls	r2, r3
10014ab0:	18b0      	adds	r0, r6, r2
10014ab2:	8802      	ldrh	r2, [r0, #0]
10014ab4:	42aa      	cmp	r2, r5
10014ab6:	d201      	bcs.n	10014abc <db_searchATT+0x2c>
10014ab8:	1e59      	subs	r1, r3, #1
10014aba:	e7f0      	b.n	10014a9e <db_searchATT+0xe>
10014abc:	42aa      	cmp	r2, r5
10014abe:	d902      	bls.n	10014ac6 <db_searchATT+0x36>
10014ac0:	1c5c      	adds	r4, r3, #1
10014ac2:	e7ec      	b.n	10014a9e <db_searchATT+0xe>
10014ac4:	2000      	movs	r0, #0
10014ac6:	bd70      	pop	{r4, r5, r6, pc}
10014ac8:	1001c010 	.word	0x1001c010
10014acc:	1001c008 	.word	0x1001c008

10014ad0 <att_permissions>:
10014ad0:	b530      	push	{r4, r5, lr}
10014ad2:	2403      	movs	r4, #3
10014ad4:	1c05      	adds	r5, r0, #0
10014ad6:	2301      	movs	r3, #1
10014ad8:	4025      	ands	r5, r4
10014ada:	42a5      	cmp	r5, r4
10014adc:	d009      	beq.n	10014af2 <att_permissions+0x22>
10014ade:	1c23      	adds	r3, r4, #0
10014ae0:	1924      	adds	r4, r4, r4
10014ae2:	4220      	tst	r0, r4
10014ae4:	d105      	bne.n	10014af2 <att_permissions+0x22>
10014ae6:	3b02      	subs	r3, #2
10014ae8:	4218      	tst	r0, r3
10014aea:	d102      	bne.n	10014af2 <att_permissions+0x22>
10014aec:	1e4b      	subs	r3, r1, #1
10014aee:	4199      	sbcs	r1, r3
10014af0:	b28b      	uxth	r3, r1
10014af2:	2130      	movs	r1, #48	; 0x30
10014af4:	4001      	ands	r1, r0
10014af6:	2930      	cmp	r1, #48	; 0x30
10014af8:	d007      	beq.n	10014b0a <att_permissions+0x3a>
10014afa:	0641      	lsls	r1, r0, #25
10014afc:	d401      	bmi.n	10014b02 <att_permissions+0x32>
10014afe:	0681      	lsls	r1, r0, #26
10014b00:	d501      	bpl.n	10014b06 <att_permissions+0x36>
10014b02:	4807      	ldr	r0, [pc, #28]	; (10014b20 <att_permissions+0x50>)
10014b04:	e009      	b.n	10014b1a <att_permissions+0x4a>
10014b06:	06c1      	lsls	r1, r0, #27
10014b08:	d501      	bpl.n	10014b0e <att_permissions+0x3e>
10014b0a:	4806      	ldr	r0, [pc, #24]	; (10014b24 <att_permissions+0x54>)
10014b0c:	e005      	b.n	10014b1a <att_permissions+0x4a>
10014b0e:	2a00      	cmp	r2, #0
10014b10:	d001      	beq.n	10014b16 <att_permissions+0x46>
10014b12:	2204      	movs	r2, #4
10014b14:	4313      	orrs	r3, r2
10014b16:	2080      	movs	r0, #128	; 0x80
10014b18:	0180      	lsls	r0, r0, #6
10014b1a:	4318      	orrs	r0, r3
10014b1c:	bd30      	pop	{r4, r5, pc}
10014b1e:	46c0      	nop			; (mov r8, r8)
10014b20:	0000200c 	.word	0x0000200c
10014b24:	00002004 	.word	0x00002004

10014b28 <char_permissions>:
10014b28:	b530      	push	{r4, r5, lr}
10014b2a:	2300      	movs	r3, #0
10014b2c:	0784      	lsls	r4, r0, #30
10014b2e:	d503      	bpl.n	10014b38 <char_permissions+0x10>
10014b30:	3301      	adds	r3, #1
10014b32:	4219      	tst	r1, r3
10014b34:	d100      	bne.n	10014b38 <char_permissions+0x10>
10014b36:	3302      	adds	r3, #2
10014b38:	0704      	lsls	r4, r0, #28
10014b3a:	d508      	bpl.n	10014b4e <char_permissions+0x26>
10014b3c:	06cc      	lsls	r4, r1, #27
10014b3e:	d501      	bpl.n	10014b44 <char_permissions+0x1c>
10014b40:	2404      	movs	r4, #4
10014b42:	e000      	b.n	10014b46 <char_permissions+0x1e>
10014b44:	240c      	movs	r4, #12
10014b46:	4323      	orrs	r3, r4
10014b48:	2480      	movs	r4, #128	; 0x80
10014b4a:	01a4      	lsls	r4, r4, #6
10014b4c:	4323      	orrs	r3, r4
10014b4e:	0684      	lsls	r4, r0, #26
10014b50:	d506      	bpl.n	10014b60 <char_permissions+0x38>
10014b52:	2406      	movs	r4, #6
10014b54:	4221      	tst	r1, r4
10014b56:	d101      	bne.n	10014b5c <char_permissions+0x34>
10014b58:	340a      	adds	r4, #10
10014b5a:	e000      	b.n	10014b5e <char_permissions+0x36>
10014b5c:	2430      	movs	r4, #48	; 0x30
10014b5e:	4323      	orrs	r3, r4
10014b60:	06c4      	lsls	r4, r0, #27
10014b62:	d506      	bpl.n	10014b72 <char_permissions+0x4a>
10014b64:	2406      	movs	r4, #6
10014b66:	4221      	tst	r1, r4
10014b68:	d101      	bne.n	10014b6e <char_permissions+0x46>
10014b6a:	343a      	adds	r4, #58	; 0x3a
10014b6c:	e000      	b.n	10014b70 <char_permissions+0x48>
10014b6e:	24c0      	movs	r4, #192	; 0xc0
10014b70:	4323      	orrs	r3, r4
10014b72:	2480      	movs	r4, #128	; 0x80
10014b74:	0064      	lsls	r4, r4, #1
10014b76:	4220      	tst	r0, r4
10014b78:	d000      	beq.n	10014b7c <char_permissions+0x54>
10014b7a:	4323      	orrs	r3, r4
10014b7c:	07c4      	lsls	r4, r0, #31
10014b7e:	d502      	bpl.n	10014b86 <char_permissions+0x5e>
10014b80:	2480      	movs	r4, #128	; 0x80
10014b82:	00a4      	lsls	r4, r4, #2
10014b84:	4323      	orrs	r3, r4
10014b86:	2404      	movs	r4, #4
10014b88:	4220      	tst	r0, r4
10014b8a:	d006      	beq.n	10014b9a <char_permissions+0x72>
10014b8c:	06cd      	lsls	r5, r1, #27
10014b8e:	d400      	bmi.n	10014b92 <char_permissions+0x6a>
10014b90:	240c      	movs	r4, #12
10014b92:	4323      	orrs	r3, r4
10014b94:	2480      	movs	r4, #128	; 0x80
10014b96:	0124      	lsls	r4, r4, #4
10014b98:	4323      	orrs	r3, r4
10014b9a:	0644      	lsls	r4, r0, #25
10014b9c:	d501      	bpl.n	10014ba2 <char_permissions+0x7a>
10014b9e:	4c08      	ldr	r4, [pc, #32]	; (10014bc0 <char_permissions+0x98>)
10014ba0:	4323      	orrs	r3, r4
10014ba2:	0600      	lsls	r0, r0, #24
10014ba4:	d507      	bpl.n	10014bb6 <char_permissions+0x8e>
10014ba6:	2004      	movs	r0, #4
10014ba8:	06c9      	lsls	r1, r1, #27
10014baa:	d400      	bmi.n	10014bae <char_permissions+0x86>
10014bac:	200c      	movs	r0, #12
10014bae:	4303      	orrs	r3, r0
10014bb0:	2084      	movs	r0, #132	; 0x84
10014bb2:	0180      	lsls	r0, r0, #6
10014bb4:	4303      	orrs	r3, r0
10014bb6:	0390      	lsls	r0, r2, #14
10014bb8:	4303      	orrs	r3, r0
10014bba:	b298      	uxth	r0, r3
10014bbc:	bd30      	pop	{r4, r5, pc}
10014bbe:	46c0      	nop			; (mov r8, r8)
10014bc0:	00001004 	.word	0x00001004

10014bc4 <presentation_format_define>:
10014bc4:	b507      	push	{r0, r1, r2, lr}
10014bc6:	466a      	mov	r2, sp
10014bc8:	780b      	ldrb	r3, [r1, #0]
10014bca:	7013      	strb	r3, [r2, #0]
10014bcc:	784b      	ldrb	r3, [r1, #1]
10014bce:	7053      	strb	r3, [r2, #1]
10014bd0:	884b      	ldrh	r3, [r1, #2]
10014bd2:	7093      	strb	r3, [r2, #2]
10014bd4:	0a1b      	lsrs	r3, r3, #8
10014bd6:	70d3      	strb	r3, [r2, #3]
10014bd8:	790b      	ldrb	r3, [r1, #4]
10014bda:	7113      	strb	r3, [r2, #4]
10014bdc:	88cb      	ldrh	r3, [r1, #6]
10014bde:	2107      	movs	r1, #7
10014be0:	7153      	strb	r3, [r2, #5]
10014be2:	0a1b      	lsrs	r3, r3, #8
10014be4:	7193      	strb	r3, [r2, #6]
10014be6:	4b01      	ldr	r3, [pc, #4]	; (10014bec <presentation_format_define+0x28>)
10014be8:	4798      	blx	r3
10014bea:	bd0e      	pop	{r1, r2, r3, pc}
10014bec:	10016f29 	.word	0x10016f29

10014bf0 <db_addATT>:
10014bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014bf2:	4c29      	ldr	r4, [pc, #164]	; (10014c98 <db_addATT+0xa8>)
10014bf4:	1c1d      	adds	r5, r3, #0
10014bf6:	6823      	ldr	r3, [r4, #0]
10014bf8:	9001      	str	r0, [sp, #4]
10014bfa:	26d3      	movs	r6, #211	; 0xd3
10014bfc:	2b00      	cmp	r3, #0
10014bfe:	d048      	beq.n	10014c92 <db_addATT+0xa2>
10014c00:	1c1e      	adds	r6, r3, #0
10014c02:	3e0c      	subs	r6, #12
10014c04:	6026      	str	r6, [r4, #0]
10014c06:	2900      	cmp	r1, #0
10014c08:	d005      	beq.n	10014c16 <db_addATT+0x26>
10014c0a:	4f24      	ldr	r7, [pc, #144]	; (10014c9c <db_addATT+0xac>)
10014c0c:	46bc      	mov	ip, r7
10014c0e:	4660      	mov	r0, ip
10014c10:	683f      	ldr	r7, [r7, #0]
10014c12:	18bf      	adds	r7, r7, r2
10014c14:	6007      	str	r7, [r0, #0]
10014c16:	4821      	ldr	r0, [pc, #132]	; (10014c9c <db_addATT+0xac>)
10014c18:	6807      	ldr	r7, [r0, #0]
10014c1a:	4684      	mov	ip, r0
10014c1c:	42be      	cmp	r6, r7
10014c1e:	d932      	bls.n	10014c86 <db_addATT+0x96>
10014c20:	4668      	mov	r0, sp
10014c22:	8880      	ldrh	r0, [r0, #4]
10014c24:	3b0c      	subs	r3, #12
10014c26:	8018      	strh	r0, [r3, #0]
10014c28:	6823      	ldr	r3, [r4, #0]
10014c2a:	2900      	cmp	r1, #0
10014c2c:	d009      	beq.n	10014c42 <db_addATT+0x52>
10014c2e:	2a00      	cmp	r2, #0
10014c30:	d007      	beq.n	10014c42 <db_addATT+0x52>
10014c32:	4660      	mov	r0, ip
10014c34:	6800      	ldr	r0, [r0, #0]
10014c36:	809a      	strh	r2, [r3, #4]
10014c38:	1a80      	subs	r0, r0, r2
10014c3a:	6098      	str	r0, [r3, #8]
10014c3c:	4b18      	ldr	r3, [pc, #96]	; (10014ca0 <db_addATT+0xb0>)
10014c3e:	4798      	blx	r3
10014c40:	e002      	b.n	10014c48 <db_addATT+0x58>
10014c42:	2100      	movs	r1, #0
10014c44:	809a      	strh	r2, [r3, #4]
10014c46:	6099      	str	r1, [r3, #8]
10014c48:	2300      	movs	r3, #0
10014c4a:	6822      	ldr	r2, [r4, #0]
10014c4c:	7093      	strb	r3, [r2, #2]
10014c4e:	3303      	adds	r3, #3
10014c50:	402b      	ands	r3, r5
10014c52:	2b03      	cmp	r3, #3
10014c54:	d001      	beq.n	10014c5a <db_addATT+0x6a>
10014c56:	076b      	lsls	r3, r5, #29
10014c58:	d504      	bpl.n	10014c64 <db_addATT+0x74>
10014c5a:	2101      	movs	r1, #1
10014c5c:	6822      	ldr	r2, [r4, #0]
10014c5e:	7893      	ldrb	r3, [r2, #2]
10014c60:	430b      	orrs	r3, r1
10014c62:	7093      	strb	r3, [r2, #2]
10014c64:	2330      	movs	r3, #48	; 0x30
10014c66:	402b      	ands	r3, r5
10014c68:	2b30      	cmp	r3, #48	; 0x30
10014c6a:	d001      	beq.n	10014c70 <db_addATT+0x80>
10014c6c:	066b      	lsls	r3, r5, #25
10014c6e:	d504      	bpl.n	10014c7a <db_addATT+0x8a>
10014c70:	2102      	movs	r1, #2
10014c72:	6822      	ldr	r2, [r4, #0]
10014c74:	7893      	ldrb	r3, [r2, #2]
10014c76:	430b      	orrs	r3, r1
10014c78:	7093      	strb	r3, [r2, #2]
10014c7a:	4a0a      	ldr	r2, [pc, #40]	; (10014ca4 <db_addATT+0xb4>)
10014c7c:	2600      	movs	r6, #0
10014c7e:	6813      	ldr	r3, [r2, #0]
10014c80:	3301      	adds	r3, #1
10014c82:	6013      	str	r3, [r2, #0]
10014c84:	e005      	b.n	10014c92 <db_addATT+0xa2>
10014c86:	6023      	str	r3, [r4, #0]
10014c88:	2611      	movs	r6, #17
10014c8a:	2900      	cmp	r1, #0
10014c8c:	d001      	beq.n	10014c92 <db_addATT+0xa2>
10014c8e:	1aba      	subs	r2, r7, r2
10014c90:	6002      	str	r2, [r0, #0]
10014c92:	1c30      	adds	r0, r6, #0
10014c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014c96:	46c0      	nop			; (mov r8, r8)
10014c98:	1001c008 	.word	0x1001c008
10014c9c:	1001c00c 	.word	0x1001c00c
10014ca0:	10018e1b 	.word	0x10018e1b
10014ca4:	1001c010 	.word	0x1001c010

10014ca8 <user_description_define>:
10014ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014caa:	1c05      	adds	r5, r0, #0
10014cac:	20cf      	movs	r0, #207	; 0xcf
10014cae:	2a00      	cmp	r2, #0
10014cb0:	d01c      	beq.n	10014cec <user_description_define+0x44>
10014cb2:	1c14      	adds	r4, r2, #0
10014cb4:	2203      	movs	r2, #3
10014cb6:	1c1e      	adds	r6, r3, #0
10014cb8:	400a      	ands	r2, r1
10014cba:	1c0b      	adds	r3, r1, #0
10014cbc:	3a03      	subs	r2, #3
10014cbe:	4251      	negs	r1, r2
10014cc0:	4151      	adcs	r1, r2
10014cc2:	075a      	lsls	r2, r3, #29
10014cc4:	0fd2      	lsrs	r2, r2, #31
10014cc6:	430a      	orrs	r2, r1
10014cc8:	03d2      	lsls	r2, r2, #15
10014cca:	4f09      	ldr	r7, [pc, #36]	; (10014cf0 <user_description_define+0x48>)
10014ccc:	1c28      	adds	r0, r5, #0
10014cce:	2a00      	cmp	r2, #0
10014cd0:	d003      	beq.n	10014cda <user_description_define+0x32>
10014cd2:	1c21      	adds	r1, r4, #0
10014cd4:	1c32      	adds	r2, r6, #0
10014cd6:	47b8      	blx	r7
10014cd8:	e008      	b.n	10014cec <user_description_define+0x44>
10014cda:	1c11      	adds	r1, r2, #0
10014cdc:	47b8      	blx	r7
10014cde:	2800      	cmp	r0, #0
10014ce0:	d104      	bne.n	10014cec <user_description_define+0x44>
10014ce2:	1c28      	adds	r0, r5, #0
10014ce4:	1c31      	adds	r1, r6, #0
10014ce6:	1c22      	adds	r2, r4, #0
10014ce8:	4b02      	ldr	r3, [pc, #8]	; (10014cf4 <user_description_define+0x4c>)
10014cea:	4798      	blx	r3
10014cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014cee:	46c0      	nop			; (mov r8, r8)
10014cf0:	10014bf1 	.word	0x10014bf1
10014cf4:	10016f29 	.word	0x10016f29

10014cf8 <at_ble_read_authorize_reply.part.2>:
10014cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
10014cfa:	4b09      	ldr	r3, [pc, #36]	; (10014d20 <at_ble_read_authorize_reply.part.2+0x28>)
10014cfc:	1c05      	adds	r5, r0, #0
10014cfe:	1c08      	adds	r0, r1, #0
10014d00:	1c0c      	adds	r4, r1, #0
10014d02:	4798      	blx	r3
10014d04:	2800      	cmp	r0, #0
10014d06:	d009      	beq.n	10014d1c <at_ble_read_authorize_reply.part.2+0x24>
10014d08:	6882      	ldr	r2, [r0, #8]
10014d0a:	2a00      	cmp	r2, #0
10014d0c:	d006      	beq.n	10014d1c <at_ble_read_authorize_reply.part.2+0x24>
10014d0e:	8883      	ldrh	r3, [r0, #4]
10014d10:	1c29      	adds	r1, r5, #0
10014d12:	9200      	str	r2, [sp, #0]
10014d14:	1c20      	adds	r0, r4, #0
10014d16:	2200      	movs	r2, #0
10014d18:	4c02      	ldr	r4, [pc, #8]	; (10014d24 <at_ble_read_authorize_reply.part.2+0x2c>)
10014d1a:	47a0      	blx	r4
10014d1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10014d1e:	46c0      	nop			; (mov r8, r8)
10014d20:	10014a91 	.word	0x10014a91
10014d24:	100169c1 	.word	0x100169c1

10014d28 <internal_at_ble_service_define.part.1>:
10014d28:	b5f0      	push	{r4, r5, r6, r7, lr}
10014d2a:	2400      	movs	r4, #0
10014d2c:	1c05      	adds	r5, r0, #0
10014d2e:	b08b      	sub	sp, #44	; 0x2c
10014d30:	9304      	str	r3, [sp, #16]
10014d32:	ab10      	add	r3, sp, #64	; 0x40
10014d34:	9202      	str	r2, [sp, #8]
10014d36:	cb04      	ldmia	r3!, {r2}
10014d38:	9106      	str	r1, [sp, #24]
10014d3a:	881b      	ldrh	r3, [r3, #0]
10014d3c:	1c21      	adds	r1, r4, #0
10014d3e:	9305      	str	r3, [sp, #20]
10014d40:	ab12      	add	r3, sp, #72	; 0x48
10014d42:	781b      	ldrb	r3, [r3, #0]
10014d44:	2210      	movs	r2, #16
10014d46:	9303      	str	r3, [sp, #12]
10014d48:	4bc5      	ldr	r3, [pc, #788]	; (10015060 <internal_at_ble_service_define.part.1+0x338>)
10014d4a:	681e      	ldr	r6, [r3, #0]
10014d4c:	4bc5      	ldr	r3, [pc, #788]	; (10015064 <internal_at_ble_service_define.part.1+0x33c>)
10014d4e:	8034      	strh	r4, [r6, #0]
10014d50:	881b      	ldrh	r3, [r3, #0]
10014d52:	1db7      	adds	r7, r6, #6
10014d54:	8073      	strh	r3, [r6, #2]
10014d56:	1c38      	adds	r0, r7, #0
10014d58:	4bc3      	ldr	r3, [pc, #780]	; (10015068 <internal_at_ble_service_define.part.1+0x340>)
10014d5a:	4798      	blx	r3
10014d5c:	4bc3      	ldr	r3, [pc, #780]	; (1001506c <internal_at_ble_service_define.part.1+0x344>)
10014d5e:	7828      	ldrb	r0, [r5, #0]
10014d60:	4798      	blx	r3
10014d62:	4bc3      	ldr	r3, [pc, #780]	; (10015070 <internal_at_ble_service_define.part.1+0x348>)
10014d64:	1c02      	adds	r2, r0, #0
10014d66:	1c69      	adds	r1, r5, #1
10014d68:	1c38      	adds	r0, r7, #0
10014d6a:	4798      	blx	r3
10014d6c:	2204      	movs	r2, #4
10014d6e:	782b      	ldrb	r3, [r5, #0]
10014d70:	7174      	strb	r4, [r6, #5]
10014d72:	011b      	lsls	r3, r3, #4
10014d74:	4313      	orrs	r3, r2
10014d76:	9a03      	ldr	r2, [sp, #12]
10014d78:	9c02      	ldr	r4, [sp, #8]
10014d7a:	0192      	lsls	r2, r2, #6
10014d7c:	4313      	orrs	r3, r2
10014d7e:	7133      	strb	r3, [r6, #4]
10014d80:	2316      	movs	r3, #22
10014d82:	9a04      	ldr	r2, [sp, #16]
10014d84:	3412      	adds	r4, #18
10014d86:	4353      	muls	r3, r2
10014d88:	9a02      	ldr	r2, [sp, #8]
10014d8a:	3312      	adds	r3, #18
10014d8c:	18d7      	adds	r7, r2, r3
10014d8e:	42bc      	cmp	r4, r7
10014d90:	d00f      	beq.n	10014db2 <internal_at_ble_service_define.part.1+0x8a>
10014d92:	4bb8      	ldr	r3, [pc, #736]	; (10015074 <internal_at_ble_service_define.part.1+0x34c>)
10014d94:	8821      	ldrh	r1, [r4, #0]
10014d96:	9300      	str	r3, [sp, #0]
10014d98:	230e      	movs	r3, #14
10014d9a:	aa06      	add	r2, sp, #24
10014d9c:	189b      	adds	r3, r3, r2
10014d9e:	9301      	str	r3, [sp, #4]
10014da0:	4db5      	ldr	r5, [pc, #724]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014da2:	1c30      	adds	r0, r6, #0
10014da4:	2201      	movs	r2, #1
10014da6:	2302      	movs	r3, #2
10014da8:	47a8      	blx	r5
10014daa:	3416      	adds	r4, #22
10014dac:	1e05      	subs	r5, r0, #0
10014dae:	d0ee      	beq.n	10014d8e <internal_at_ble_service_define.part.1+0x66>
10014db0:	e183      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014db2:	9f10      	ldr	r7, [sp, #64]	; 0x40
10014db4:	2300      	movs	r3, #0
10014db6:	3714      	adds	r7, #20
10014db8:	1c3c      	adds	r4, r7, #0
10014dba:	9302      	str	r3, [sp, #8]
10014dbc:	9b02      	ldr	r3, [sp, #8]
10014dbe:	9a05      	ldr	r2, [sp, #20]
10014dc0:	4293      	cmp	r3, r2
10014dc2:	db00      	blt.n	10014dc6 <internal_at_ble_service_define.part.1+0x9e>
10014dc4:	e0bf      	b.n	10014f46 <internal_at_ble_service_define.part.1+0x21e>
10014dc6:	4bad      	ldr	r3, [pc, #692]	; (1001507c <internal_at_ble_service_define.part.1+0x354>)
10014dc8:	aa06      	add	r2, sp, #24
10014dca:	9300      	str	r3, [sp, #0]
10014dcc:	230e      	movs	r3, #14
10014dce:	189b      	adds	r3, r3, r2
10014dd0:	9301      	str	r3, [sp, #4]
10014dd2:	4da9      	ldr	r5, [pc, #676]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014dd4:	1c30      	adds	r0, r6, #0
10014dd6:	2104      	movs	r1, #4
10014dd8:	2201      	movs	r2, #1
10014dda:	2302      	movs	r3, #2
10014ddc:	47a8      	blx	r5
10014dde:	1e05      	subs	r5, r0, #0
10014de0:	d000      	beq.n	10014de4 <internal_at_ble_service_define.part.1+0xbc>
10014de2:	e16a      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014de4:	1c23      	adds	r3, r4, #0
10014de6:	3b12      	subs	r3, #18
10014de8:	7b25      	ldrb	r5, [r4, #12]
10014dea:	781b      	ldrb	r3, [r3, #0]
10014dec:	1c29      	adds	r1, r5, #0
10014dee:	1c1a      	adds	r2, r3, #0
10014df0:	9303      	str	r3, [sp, #12]
10014df2:	8820      	ldrh	r0, [r4, #0]
10014df4:	4ba2      	ldr	r3, [pc, #648]	; (10015080 <internal_at_ble_service_define.part.1+0x358>)
10014df6:	4798      	blx	r3
10014df8:	2303      	movs	r3, #3
10014dfa:	402b      	ands	r3, r5
10014dfc:	3b03      	subs	r3, #3
10014dfe:	4259      	negs	r1, r3
10014e00:	4159      	adcs	r1, r3
10014e02:	2301      	movs	r3, #1
10014e04:	08ad      	lsrs	r5, r5, #2
10014e06:	401d      	ands	r5, r3
10014e08:	430d      	orrs	r5, r1
10014e0a:	8963      	ldrh	r3, [r4, #10]
10014e0c:	03ed      	lsls	r5, r5, #15
10014e0e:	431d      	orrs	r5, r3
10014e10:	9007      	str	r0, [sp, #28]
10014e12:	4b96      	ldr	r3, [pc, #600]	; (1001506c <internal_at_ble_service_define.part.1+0x344>)
10014e14:	9803      	ldr	r0, [sp, #12]
10014e16:	4798      	blx	r3
10014e18:	1c22      	adds	r2, r4, #0
10014e1a:	3a11      	subs	r2, #17
10014e1c:	9200      	str	r2, [sp, #0]
10014e1e:	3a03      	subs	r2, #3
10014e20:	1c03      	adds	r3, r0, #0
10014e22:	9201      	str	r2, [sp, #4]
10014e24:	1c29      	adds	r1, r5, #0
10014e26:	1c30      	adds	r0, r6, #0
10014e28:	4d93      	ldr	r5, [pc, #588]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014e2a:	9a07      	ldr	r2, [sp, #28]
10014e2c:	47a8      	blx	r5
10014e2e:	1e05      	subs	r5, r0, #0
10014e30:	d000      	beq.n	10014e34 <internal_at_ble_service_define.part.1+0x10c>
10014e32:	e142      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014e34:	22c0      	movs	r2, #192	; 0xc0
10014e36:	8823      	ldrh	r3, [r4, #0]
10014e38:	0052      	lsls	r2, r2, #1
10014e3a:	4213      	tst	r3, r2
10014e3c:	d104      	bne.n	10014e48 <internal_at_ble_service_define.part.1+0x120>
10014e3e:	8aa3      	ldrh	r3, [r4, #20]
10014e40:	9303      	str	r3, [sp, #12]
10014e42:	2b00      	cmp	r3, #0
10014e44:	d116      	bne.n	10014e74 <internal_at_ble_service_define.part.1+0x14c>
10014e46:	e03a      	b.n	10014ebe <internal_at_ble_service_define.part.1+0x196>
10014e48:	2201      	movs	r2, #1
10014e4a:	09d9      	lsrs	r1, r3, #7
10014e4c:	4011      	ands	r1, r2
10014e4e:	05db      	lsls	r3, r3, #23
10014e50:	d501      	bpl.n	10014e56 <internal_at_ble_service_define.part.1+0x12e>
10014e52:	2302      	movs	r3, #2
10014e54:	4319      	orrs	r1, r3
10014e56:	4b8b      	ldr	r3, [pc, #556]	; (10015084 <internal_at_ble_service_define.part.1+0x35c>)
10014e58:	aa06      	add	r2, sp, #24
10014e5a:	9300      	str	r3, [sp, #0]
10014e5c:	230e      	movs	r3, #14
10014e5e:	189b      	adds	r3, r3, r2
10014e60:	9301      	str	r3, [sp, #4]
10014e62:	4d85      	ldr	r5, [pc, #532]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014e64:	0209      	lsls	r1, r1, #8
10014e66:	1c30      	adds	r0, r6, #0
10014e68:	2201      	movs	r2, #1
10014e6a:	2302      	movs	r3, #2
10014e6c:	47a8      	blx	r5
10014e6e:	1e05      	subs	r5, r0, #0
10014e70:	d0e5      	beq.n	10014e3e <internal_at_ble_service_define.part.1+0x116>
10014e72:	e122      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014e74:	2380      	movs	r3, #128	; 0x80
10014e76:	8822      	ldrh	r2, [r4, #0]
10014e78:	7f25      	ldrb	r5, [r4, #28]
10014e7a:	005b      	lsls	r3, r3, #1
10014e7c:	401a      	ands	r2, r3
10014e7e:	1c28      	adds	r0, r5, #0
10014e80:	2101      	movs	r1, #1
10014e82:	2a00      	cmp	r2, #0
10014e84:	d000      	beq.n	10014e88 <internal_at_ble_service_define.part.1+0x160>
10014e86:	1c0a      	adds	r2, r1, #0
10014e88:	4b7f      	ldr	r3, [pc, #508]	; (10015088 <internal_at_ble_service_define.part.1+0x360>)
10014e8a:	4798      	blx	r3
10014e8c:	2203      	movs	r2, #3
10014e8e:	402a      	ands	r2, r5
10014e90:	3a03      	subs	r2, #3
10014e92:	4251      	negs	r1, r2
10014e94:	4151      	adcs	r1, r2
10014e96:	4b7d      	ldr	r3, [pc, #500]	; (1001508c <internal_at_ble_service_define.part.1+0x364>)
10014e98:	1c0a      	adds	r2, r1, #0
10014e9a:	9300      	str	r3, [sp, #0]
10014e9c:	1c23      	adds	r3, r4, #0
10014e9e:	076d      	lsls	r5, r5, #29
10014ea0:	0fed      	lsrs	r5, r5, #31
10014ea2:	432a      	orrs	r2, r5
10014ea4:	03d2      	lsls	r2, r2, #15
10014ea6:	4310      	orrs	r0, r2
10014ea8:	3320      	adds	r3, #32
10014eaa:	b282      	uxth	r2, r0
10014eac:	9301      	str	r3, [sp, #4]
10014eae:	4d72      	ldr	r5, [pc, #456]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014eb0:	1c30      	adds	r0, r6, #0
10014eb2:	9903      	ldr	r1, [sp, #12]
10014eb4:	2302      	movs	r3, #2
10014eb6:	47a8      	blx	r5
10014eb8:	1e05      	subs	r5, r0, #0
10014eba:	d000      	beq.n	10014ebe <internal_at_ble_service_define.part.1+0x196>
10014ebc:	e0fd      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014ebe:	2101      	movs	r1, #1
10014ec0:	8823      	ldrh	r3, [r4, #0]
10014ec2:	420b      	tst	r3, r1
10014ec4:	d011      	beq.n	10014eea <internal_at_ble_service_define.part.1+0x1c2>
10014ec6:	7fa0      	ldrb	r0, [r4, #30]
10014ec8:	4b6f      	ldr	r3, [pc, #444]	; (10015088 <internal_at_ble_service_define.part.1+0x360>)
10014eca:	2200      	movs	r2, #0
10014ecc:	4798      	blx	r3
10014ece:	4b70      	ldr	r3, [pc, #448]	; (10015090 <internal_at_ble_service_define.part.1+0x368>)
10014ed0:	1c02      	adds	r2, r0, #0
10014ed2:	9300      	str	r3, [sp, #0]
10014ed4:	1c23      	adds	r3, r4, #0
10014ed6:	3324      	adds	r3, #36	; 0x24
10014ed8:	9301      	str	r3, [sp, #4]
10014eda:	4d67      	ldr	r5, [pc, #412]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014edc:	1c30      	adds	r0, r6, #0
10014ede:	496d      	ldr	r1, [pc, #436]	; (10015094 <internal_at_ble_service_define.part.1+0x36c>)
10014ee0:	2302      	movs	r3, #2
10014ee2:	47a8      	blx	r5
10014ee4:	1e05      	subs	r5, r0, #0
10014ee6:	d000      	beq.n	10014eea <internal_at_ble_service_define.part.1+0x1c2>
10014ee8:	e0e7      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014eea:	2330      	movs	r3, #48	; 0x30
10014eec:	8822      	ldrh	r2, [r4, #0]
10014eee:	421a      	tst	r2, r3
10014ef0:	d012      	beq.n	10014f18 <internal_at_ble_service_define.part.1+0x1f0>
10014ef2:	2101      	movs	r1, #1
10014ef4:	7f60      	ldrb	r0, [r4, #29]
10014ef6:	1c0a      	adds	r2, r1, #0
10014ef8:	4b63      	ldr	r3, [pc, #396]	; (10015088 <internal_at_ble_service_define.part.1+0x360>)
10014efa:	4798      	blx	r3
10014efc:	4b66      	ldr	r3, [pc, #408]	; (10015098 <internal_at_ble_service_define.part.1+0x370>)
10014efe:	1c02      	adds	r2, r0, #0
10014f00:	9300      	str	r3, [sp, #0]
10014f02:	1c23      	adds	r3, r4, #0
10014f04:	3322      	adds	r3, #34	; 0x22
10014f06:	9301      	str	r3, [sp, #4]
10014f08:	4d5b      	ldr	r5, [pc, #364]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014f0a:	1c30      	adds	r0, r6, #0
10014f0c:	4961      	ldr	r1, [pc, #388]	; (10015094 <internal_at_ble_service_define.part.1+0x36c>)
10014f0e:	2302      	movs	r3, #2
10014f10:	47a8      	blx	r5
10014f12:	1e05      	subs	r5, r0, #0
10014f14:	d000      	beq.n	10014f18 <internal_at_ble_service_define.part.1+0x1f0>
10014f16:	e0d0      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014f18:	69a3      	ldr	r3, [r4, #24]
10014f1a:	2b00      	cmp	r3, #0
10014f1c:	d00e      	beq.n	10014f3c <internal_at_ble_service_define.part.1+0x214>
10014f1e:	4b5f      	ldr	r3, [pc, #380]	; (1001509c <internal_at_ble_service_define.part.1+0x374>)
10014f20:	aa06      	add	r2, sp, #24
10014f22:	9300      	str	r3, [sp, #0]
10014f24:	230e      	movs	r3, #14
10014f26:	189b      	adds	r3, r3, r2
10014f28:	9301      	str	r3, [sp, #4]
10014f2a:	4d53      	ldr	r5, [pc, #332]	; (10015078 <internal_at_ble_service_define.part.1+0x350>)
10014f2c:	1c30      	adds	r0, r6, #0
10014f2e:	2107      	movs	r1, #7
10014f30:	2201      	movs	r2, #1
10014f32:	2302      	movs	r3, #2
10014f34:	47a8      	blx	r5
10014f36:	1e05      	subs	r5, r0, #0
10014f38:	d000      	beq.n	10014f3c <internal_at_ble_service_define.part.1+0x214>
10014f3a:	e0be      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014f3c:	9b02      	ldr	r3, [sp, #8]
10014f3e:	343c      	adds	r4, #60	; 0x3c
10014f40:	3301      	adds	r3, #1
10014f42:	9302      	str	r3, [sp, #8]
10014f44:	e73a      	b.n	10014dbc <internal_at_ble_service_define.part.1+0x94>
10014f46:	1c30      	adds	r0, r6, #0
10014f48:	4b55      	ldr	r3, [pc, #340]	; (100150a0 <internal_at_ble_service_define.part.1+0x378>)
10014f4a:	4798      	blx	r3
10014f4c:	1e05      	subs	r5, r0, #0
10014f4e:	d000      	beq.n	10014f52 <internal_at_ble_service_define.part.1+0x22a>
10014f50:	e0b3      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014f52:	8833      	ldrh	r3, [r6, #0]
10014f54:	9a06      	ldr	r2, [sp, #24]
10014f56:	8013      	strh	r3, [r2, #0]
10014f58:	8836      	ldrh	r6, [r6, #0]
10014f5a:	9b04      	ldr	r3, [sp, #16]
10014f5c:	9a05      	ldr	r2, [sp, #20]
10014f5e:	18f6      	adds	r6, r6, r3
10014f60:	b2b3      	uxth	r3, r6
10014f62:	9302      	str	r3, [sp, #8]
10014f64:	233c      	movs	r3, #60	; 0x3c
10014f66:	4353      	muls	r3, r2
10014f68:	9a10      	ldr	r2, [sp, #64]	; 0x40
10014f6a:	3314      	adds	r3, #20
10014f6c:	18d3      	adds	r3, r2, r3
10014f6e:	9304      	str	r3, [sp, #16]
10014f70:	9b04      	ldr	r3, [sp, #16]
10014f72:	429f      	cmp	r7, r3
10014f74:	d100      	bne.n	10014f78 <internal_at_ble_service_define.part.1+0x250>
10014f76:	e0a0      	b.n	100150ba <internal_at_ble_service_define.part.1+0x392>
10014f78:	9b02      	ldr	r3, [sp, #8]
10014f7a:	1c9c      	adds	r4, r3, #2
10014f7c:	1c3b      	adds	r3, r7, #0
10014f7e:	b2a4      	uxth	r4, r4
10014f80:	3b14      	subs	r3, #20
10014f82:	801c      	strh	r4, [r3, #0]
10014f84:	9303      	str	r3, [sp, #12]
10014f86:	893b      	ldrh	r3, [r7, #8]
10014f88:	2b00      	cmp	r3, #0
10014f8a:	d108      	bne.n	10014f9e <internal_at_ble_service_define.part.1+0x276>
10014f8c:	23c0      	movs	r3, #192	; 0xc0
10014f8e:	883a      	ldrh	r2, [r7, #0]
10014f90:	005b      	lsls	r3, r3, #1
10014f92:	421a      	tst	r2, r3
10014f94:	d026      	beq.n	10014fe4 <internal_at_ble_service_define.part.1+0x2bc>
10014f96:	9e02      	ldr	r6, [sp, #8]
10014f98:	3603      	adds	r6, #3
10014f9a:	b2b4      	uxth	r4, r6
10014f9c:	e022      	b.n	10014fe4 <internal_at_ble_service_define.part.1+0x2bc>
10014f9e:	2103      	movs	r1, #3
10014fa0:	7b3b      	ldrb	r3, [r7, #12]
10014fa2:	4019      	ands	r1, r3
10014fa4:	3903      	subs	r1, #3
10014fa6:	424a      	negs	r2, r1
10014fa8:	414a      	adcs	r2, r1
10014faa:	0759      	lsls	r1, r3, #29
10014fac:	0fc9      	lsrs	r1, r1, #31
10014fae:	4311      	orrs	r1, r2
10014fb0:	03c9      	lsls	r1, r1, #15
10014fb2:	897a      	ldrh	r2, [r7, #10]
10014fb4:	2900      	cmp	r1, #0
10014fb6:	d007      	beq.n	10014fc8 <internal_at_ble_service_define.part.1+0x2a0>
10014fb8:	6879      	ldr	r1, [r7, #4]
10014fba:	2900      	cmp	r1, #0
10014fbc:	d100      	bne.n	10014fc0 <internal_at_ble_service_define.part.1+0x298>
10014fbe:	4939      	ldr	r1, [pc, #228]	; (100150a4 <internal_at_ble_service_define.part.1+0x37c>)
10014fc0:	1c20      	adds	r0, r4, #0
10014fc2:	4e39      	ldr	r6, [pc, #228]	; (100150a8 <internal_at_ble_service_define.part.1+0x380>)
10014fc4:	47b0      	blx	r6
10014fc6:	e00a      	b.n	10014fde <internal_at_ble_service_define.part.1+0x2b6>
10014fc8:	1c20      	adds	r0, r4, #0
10014fca:	4e37      	ldr	r6, [pc, #220]	; (100150a8 <internal_at_ble_service_define.part.1+0x380>)
10014fcc:	47b0      	blx	r6
10014fce:	2800      	cmp	r0, #0
10014fd0:	d172      	bne.n	100150b8 <internal_at_ble_service_define.part.1+0x390>
10014fd2:	9b03      	ldr	r3, [sp, #12]
10014fd4:	8939      	ldrh	r1, [r7, #8]
10014fd6:	8818      	ldrh	r0, [r3, #0]
10014fd8:	687a      	ldr	r2, [r7, #4]
10014fda:	4b34      	ldr	r3, [pc, #208]	; (100150ac <internal_at_ble_service_define.part.1+0x384>)
10014fdc:	4798      	blx	r3
10014fde:	2800      	cmp	r0, #0
10014fe0:	d0d4      	beq.n	10014f8c <internal_at_ble_service_define.part.1+0x264>
10014fe2:	e069      	b.n	100150b8 <internal_at_ble_service_define.part.1+0x390>
10014fe4:	8abb      	ldrh	r3, [r7, #20]
10014fe6:	2b00      	cmp	r3, #0
10014fe8:	d00a      	beq.n	10015000 <internal_at_ble_service_define.part.1+0x2d8>
10014fea:	3401      	adds	r4, #1
10014fec:	b2a4      	uxth	r4, r4
10014fee:	843c      	strh	r4, [r7, #32]
10014ff0:	7f39      	ldrb	r1, [r7, #28]
10014ff2:	8afb      	ldrh	r3, [r7, #22]
10014ff4:	1c20      	adds	r0, r4, #0
10014ff6:	693a      	ldr	r2, [r7, #16]
10014ff8:	4e2d      	ldr	r6, [pc, #180]	; (100150b0 <internal_at_ble_service_define.part.1+0x388>)
10014ffa:	47b0      	blx	r6
10014ffc:	2800      	cmp	r0, #0
10014ffe:	d15b      	bne.n	100150b8 <internal_at_ble_service_define.part.1+0x390>
10015000:	883b      	ldrh	r3, [r7, #0]
10015002:	07db      	lsls	r3, r3, #31
10015004:	d50d      	bpl.n	10015022 <internal_at_ble_service_define.part.1+0x2fa>
10015006:	2200      	movs	r2, #0
10015008:	3401      	adds	r4, #1
1001500a:	b2a4      	uxth	r4, r4
1001500c:	a909      	add	r1, sp, #36	; 0x24
1001500e:	84bc      	strh	r4, [r7, #36]	; 0x24
10015010:	7fbb      	ldrb	r3, [r7, #30]
10015012:	1c20      	adds	r0, r4, #0
10015014:	700a      	strb	r2, [r1, #0]
10015016:	704a      	strb	r2, [r1, #1]
10015018:	4e23      	ldr	r6, [pc, #140]	; (100150a8 <internal_at_ble_service_define.part.1+0x380>)
1001501a:	3202      	adds	r2, #2
1001501c:	47b0      	blx	r6
1001501e:	2800      	cmp	r0, #0
10015020:	d14a      	bne.n	100150b8 <internal_at_ble_service_define.part.1+0x390>
10015022:	2330      	movs	r3, #48	; 0x30
10015024:	883a      	ldrh	r2, [r7, #0]
10015026:	421a      	tst	r2, r3
10015028:	d00d      	beq.n	10015046 <internal_at_ble_service_define.part.1+0x31e>
1001502a:	2200      	movs	r2, #0
1001502c:	3401      	adds	r4, #1
1001502e:	b2a4      	uxth	r4, r4
10015030:	a909      	add	r1, sp, #36	; 0x24
10015032:	847c      	strh	r4, [r7, #34]	; 0x22
10015034:	7f7b      	ldrb	r3, [r7, #29]
10015036:	1c20      	adds	r0, r4, #0
10015038:	700a      	strb	r2, [r1, #0]
1001503a:	704a      	strb	r2, [r1, #1]
1001503c:	4e1a      	ldr	r6, [pc, #104]	; (100150a8 <internal_at_ble_service_define.part.1+0x380>)
1001503e:	3202      	adds	r2, #2
10015040:	47b0      	blx	r6
10015042:	2800      	cmp	r0, #0
10015044:	d138      	bne.n	100150b8 <internal_at_ble_service_define.part.1+0x390>
10015046:	69b9      	ldr	r1, [r7, #24]
10015048:	2900      	cmp	r1, #0
1001504a:	d006      	beq.n	1001505a <internal_at_ble_service_define.part.1+0x332>
1001504c:	3401      	adds	r4, #1
1001504e:	b2a4      	uxth	r4, r4
10015050:	1c20      	adds	r0, r4, #0
10015052:	4b18      	ldr	r3, [pc, #96]	; (100150b4 <internal_at_ble_service_define.part.1+0x38c>)
10015054:	4798      	blx	r3
10015056:	2800      	cmp	r0, #0
10015058:	d12e      	bne.n	100150b8 <internal_at_ble_service_define.part.1+0x390>
1001505a:	373c      	adds	r7, #60	; 0x3c
1001505c:	9402      	str	r4, [sp, #8]
1001505e:	e787      	b.n	10014f70 <internal_at_ble_service_define.part.1+0x248>
10015060:	1001c018 	.word	0x1001c018
10015064:	1001cf0c 	.word	0x1001cf0c
10015068:	10018e2d 	.word	0x10018e2d
1001506c:	10014a5d 	.word	0x10014a5d
10015070:	10018e1b 	.word	0x10018e1b
10015074:	1001b683 	.word	0x1001b683
10015078:	10016eb9 	.word	0x10016eb9
1001507c:	1001b685 	.word	0x1001b685
10015080:	10014b29 	.word	0x10014b29
10015084:	1001b681 	.word	0x1001b681
10015088:	10014ad1 	.word	0x10014ad1
1001508c:	1001b67d 	.word	0x1001b67d
10015090:	1001b67f 	.word	0x1001b67f
10015094:	00008002 	.word	0x00008002
10015098:	1001b679 	.word	0x1001b679
1001509c:	1001b67b 	.word	0x1001b67b
100150a0:	10016dad 	.word	0x10016dad
100150a4:	1001c004 	.word	0x1001c004
100150a8:	10014bf1 	.word	0x10014bf1
100150ac:	10016f29 	.word	0x10016f29
100150b0:	10014ca9 	.word	0x10014ca9
100150b4:	10014bc5 	.word	0x10014bc5
100150b8:	1c05      	adds	r5, r0, #0
100150ba:	1c28      	adds	r0, r5, #0
100150bc:	b00b      	add	sp, #44	; 0x2c
100150be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100150c0 <initi_gatt_server_module>:
100150c0:	2300      	movs	r3, #0
100150c2:	4a06      	ldr	r2, [pc, #24]	; (100150dc <initi_gatt_server_module+0x1c>)
100150c4:	7013      	strb	r3, [r2, #0]
100150c6:	4a06      	ldr	r2, [pc, #24]	; (100150e0 <initi_gatt_server_module+0x20>)
100150c8:	6013      	str	r3, [r2, #0]
100150ca:	4a06      	ldr	r2, [pc, #24]	; (100150e4 <initi_gatt_server_module+0x24>)
100150cc:	6013      	str	r3, [r2, #0]
100150ce:	4a06      	ldr	r2, [pc, #24]	; (100150e8 <initi_gatt_server_module+0x28>)
100150d0:	6013      	str	r3, [r2, #0]
100150d2:	4a06      	ldr	r2, [pc, #24]	; (100150ec <initi_gatt_server_module+0x2c>)
100150d4:	6013      	str	r3, [r2, #0]
100150d6:	4a06      	ldr	r2, [pc, #24]	; (100150f0 <initi_gatt_server_module+0x30>)
100150d8:	6013      	str	r3, [r2, #0]
100150da:	4770      	bx	lr
100150dc:	1001c004 	.word	0x1001c004
100150e0:	1001c014 	.word	0x1001c014
100150e4:	1001c010 	.word	0x1001c010
100150e8:	1001c000 	.word	0x1001c000
100150ec:	1001c00c 	.word	0x1001c00c
100150f0:	1001c008 	.word	0x1001c008

100150f4 <db_init>:
100150f4:	4b0a      	ldr	r3, [pc, #40]	; (10015120 <db_init+0x2c>)
100150f6:	4a0b      	ldr	r2, [pc, #44]	; (10015124 <db_init+0x30>)
100150f8:	6018      	str	r0, [r3, #0]
100150fa:	084b      	lsrs	r3, r1, #1
100150fc:	6013      	str	r3, [r2, #0]
100150fe:	4a0a      	ldr	r2, [pc, #40]	; (10015128 <db_init+0x34>)
10015100:	18c3      	adds	r3, r0, r3
10015102:	6013      	str	r3, [r2, #0]
10015104:	4a09      	ldr	r2, [pc, #36]	; (1001512c <db_init+0x38>)
10015106:	1841      	adds	r1, r0, r1
10015108:	6013      	str	r3, [r2, #0]
1001510a:	2303      	movs	r3, #3
1001510c:	2200      	movs	r2, #0
1001510e:	3103      	adds	r1, #3
10015110:	4399      	bics	r1, r3
10015112:	4b07      	ldr	r3, [pc, #28]	; (10015130 <db_init+0x3c>)
10015114:	3904      	subs	r1, #4
10015116:	6019      	str	r1, [r3, #0]
10015118:	4b06      	ldr	r3, [pc, #24]	; (10015134 <db_init+0x40>)
1001511a:	601a      	str	r2, [r3, #0]
1001511c:	4770      	bx	lr
1001511e:	46c0      	nop			; (mov r8, r8)
10015120:	1001c018 	.word	0x1001c018
10015124:	1001c014 	.word	0x1001c014
10015128:	1001c000 	.word	0x1001c000
1001512c:	1001c00c 	.word	0x1001c00c
10015130:	1001c008 	.word	0x1001c008
10015134:	1001c010 	.word	0x1001c010

10015138 <at_ble_primary_service_define>:
10015138:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1001513a:	ac08      	add	r4, sp, #32
1001513c:	cc40      	ldmia	r4!, {r6}
1001513e:	1c05      	adds	r5, r0, #0
10015140:	8824      	ldrh	r4, [r4, #0]
10015142:	20cf      	movs	r0, #207	; 0xcf
10015144:	2d00      	cmp	r5, #0
10015146:	d00c      	beq.n	10015162 <at_ble_primary_service_define+0x2a>
10015148:	2900      	cmp	r1, #0
1001514a:	d00a      	beq.n	10015162 <at_ble_primary_service_define+0x2a>
1001514c:	2e00      	cmp	r6, #0
1001514e:	d008      	beq.n	10015162 <at_ble_primary_service_define+0x2a>
10015150:	2c00      	cmp	r4, #0
10015152:	d006      	beq.n	10015162 <at_ble_primary_service_define+0x2a>
10015154:	38ce      	subs	r0, #206	; 0xce
10015156:	9401      	str	r4, [sp, #4]
10015158:	9002      	str	r0, [sp, #8]
1001515a:	9600      	str	r6, [sp, #0]
1001515c:	1c28      	adds	r0, r5, #0
1001515e:	4c02      	ldr	r4, [pc, #8]	; (10015168 <at_ble_primary_service_define+0x30>)
10015160:	47a0      	blx	r4
10015162:	b004      	add	sp, #16
10015164:	bd70      	pop	{r4, r5, r6, pc}
10015166:	46c0      	nop			; (mov r8, r8)
10015168:	10014d29 	.word	0x10014d29

1001516c <at_ble_characteristic_value_set>:
1001516c:	b570      	push	{r4, r5, r6, lr}
1001516e:	4b0b      	ldr	r3, [pc, #44]	; (1001519c <at_ble_characteristic_value_set+0x30>)
10015170:	1c06      	adds	r6, r0, #0
10015172:	1c0c      	adds	r4, r1, #0
10015174:	1c15      	adds	r5, r2, #0
10015176:	4798      	blx	r3
10015178:	2800      	cmp	r0, #0
1001517a:	d008      	beq.n	1001518e <at_ble_characteristic_value_set+0x22>
1001517c:	6880      	ldr	r0, [r0, #8]
1001517e:	2800      	cmp	r0, #0
10015180:	d005      	beq.n	1001518e <at_ble_characteristic_value_set+0x22>
10015182:	1c21      	adds	r1, r4, #0
10015184:	1c2a      	adds	r2, r5, #0
10015186:	4b06      	ldr	r3, [pc, #24]	; (100151a0 <at_ble_characteristic_value_set+0x34>)
10015188:	4798      	blx	r3
1001518a:	2000      	movs	r0, #0
1001518c:	e004      	b.n	10015198 <at_ble_characteristic_value_set+0x2c>
1001518e:	1c30      	adds	r0, r6, #0
10015190:	1c29      	adds	r1, r5, #0
10015192:	1c22      	adds	r2, r4, #0
10015194:	4b03      	ldr	r3, [pc, #12]	; (100151a4 <at_ble_characteristic_value_set+0x38>)
10015196:	4798      	blx	r3
10015198:	bd70      	pop	{r4, r5, r6, pc}
1001519a:	46c0      	nop			; (mov r8, r8)
1001519c:	10014a91 	.word	0x10014a91
100151a0:	10018e1b 	.word	0x10018e1b
100151a4:	10016f29 	.word	0x10016f29

100151a8 <at_ble_characteristic_value_get>:
100151a8:	b570      	push	{r4, r5, r6, lr}
100151aa:	4b0c      	ldr	r3, [pc, #48]	; (100151dc <at_ble_characteristic_value_get+0x34>)
100151ac:	1c06      	adds	r6, r0, #0
100151ae:	1c0c      	adds	r4, r1, #0
100151b0:	1c15      	adds	r5, r2, #0
100151b2:	4798      	blx	r3
100151b4:	2800      	cmp	r0, #0
100151b6:	d00b      	beq.n	100151d0 <at_ble_characteristic_value_get+0x28>
100151b8:	6883      	ldr	r3, [r0, #8]
100151ba:	2b00      	cmp	r3, #0
100151bc:	d008      	beq.n	100151d0 <at_ble_characteristic_value_get+0x28>
100151be:	8883      	ldrh	r3, [r0, #4]
100151c0:	802b      	strh	r3, [r5, #0]
100151c2:	8882      	ldrh	r2, [r0, #4]
100151c4:	6881      	ldr	r1, [r0, #8]
100151c6:	4b06      	ldr	r3, [pc, #24]	; (100151e0 <at_ble_characteristic_value_get+0x38>)
100151c8:	1c20      	adds	r0, r4, #0
100151ca:	4798      	blx	r3
100151cc:	2000      	movs	r0, #0
100151ce:	e004      	b.n	100151da <at_ble_characteristic_value_get+0x32>
100151d0:	1c30      	adds	r0, r6, #0
100151d2:	1c29      	adds	r1, r5, #0
100151d4:	1c22      	adds	r2, r4, #0
100151d6:	4b03      	ldr	r3, [pc, #12]	; (100151e4 <at_ble_characteristic_value_get+0x3c>)
100151d8:	4798      	blx	r3
100151da:	bd70      	pop	{r4, r5, r6, pc}
100151dc:	10014a91 	.word	0x10014a91
100151e0:	10018e1b 	.word	0x10018e1b
100151e4:	10016fb5 	.word	0x10016fb5

100151e8 <at_ble_write_authorize_reply>:
100151e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100151ea:	b085      	sub	sp, #20
100151ec:	1c04      	adds	r4, r0, #0
100151ee:	9101      	str	r1, [sp, #4]
100151f0:	2900      	cmp	r1, #0
100151f2:	d128      	bne.n	10015246 <at_ble_write_authorize_reply+0x5e>
100151f4:	8843      	ldrh	r3, [r0, #2]
100151f6:	1c27      	adds	r7, r4, #0
100151f8:	9300      	str	r3, [sp, #0]
100151fa:	1c18      	adds	r0, r3, #0
100151fc:	4b16      	ldr	r3, [pc, #88]	; (10015258 <at_ble_write_authorize_reply+0x70>)
100151fe:	4798      	blx	r3
10015200:	3708      	adds	r7, #8
10015202:	2800      	cmp	r0, #0
10015204:	d009      	beq.n	1001521a <at_ble_write_authorize_reply+0x32>
10015206:	6880      	ldr	r0, [r0, #8]
10015208:	2800      	cmp	r0, #0
1001520a:	d006      	beq.n	1001521a <at_ble_write_authorize_reply+0x32>
1001520c:	88a3      	ldrh	r3, [r4, #4]
1001520e:	88e2      	ldrh	r2, [r4, #6]
10015210:	18c0      	adds	r0, r0, r3
10015212:	1c39      	adds	r1, r7, #0
10015214:	4b11      	ldr	r3, [pc, #68]	; (1001525c <at_ble_write_authorize_reply+0x74>)
10015216:	4798      	blx	r3
10015218:	e015      	b.n	10015246 <at_ble_write_authorize_reply+0x5e>
1001521a:	ab02      	add	r3, sp, #8
1001521c:	1d9e      	adds	r6, r3, #6
1001521e:	2300      	movs	r3, #0
10015220:	4d0f      	ldr	r5, [pc, #60]	; (10015260 <at_ble_write_authorize_reply+0x78>)
10015222:	8033      	strh	r3, [r6, #0]
10015224:	6829      	ldr	r1, [r5, #0]
10015226:	1c32      	adds	r2, r6, #0
10015228:	4b0e      	ldr	r3, [pc, #56]	; (10015264 <at_ble_write_authorize_reply+0x7c>)
1001522a:	9800      	ldr	r0, [sp, #0]
1001522c:	4798      	blx	r3
1001522e:	682b      	ldr	r3, [r5, #0]
10015230:	88a0      	ldrh	r0, [r4, #4]
10015232:	88e2      	ldrh	r2, [r4, #6]
10015234:	1818      	adds	r0, r3, r0
10015236:	1c39      	adds	r1, r7, #0
10015238:	4b08      	ldr	r3, [pc, #32]	; (1001525c <at_ble_write_authorize_reply+0x74>)
1001523a:	4798      	blx	r3
1001523c:	8860      	ldrh	r0, [r4, #2]
1001523e:	8832      	ldrh	r2, [r6, #0]
10015240:	6829      	ldr	r1, [r5, #0]
10015242:	4b09      	ldr	r3, [pc, #36]	; (10015268 <at_ble_write_authorize_reply+0x80>)
10015244:	4798      	blx	r3
10015246:	8860      	ldrh	r0, [r4, #2]
10015248:	8821      	ldrh	r1, [r4, #0]
1001524a:	9a01      	ldr	r2, [sp, #4]
1001524c:	4b07      	ldr	r3, [pc, #28]	; (1001526c <at_ble_write_authorize_reply+0x84>)
1001524e:	4798      	blx	r3
10015250:	2000      	movs	r0, #0
10015252:	b005      	add	sp, #20
10015254:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015256:	46c0      	nop			; (mov r8, r8)
10015258:	10014a91 	.word	0x10014a91
1001525c:	10018e1b 	.word	0x10018e1b
10015260:	1001b890 	.word	0x1001b890
10015264:	100151a9 	.word	0x100151a9
10015268:	1001516d 	.word	0x1001516d
1001526c:	10016a2d 	.word	0x10016a2d

10015270 <gatts_handle_read_req>:
10015270:	b538      	push	{r3, r4, r5, lr}
10015272:	1c0c      	adds	r4, r1, #0
10015274:	4b07      	ldr	r3, [pc, #28]	; (10015294 <gatts_handle_read_req+0x24>)
10015276:	4798      	blx	r3
10015278:	8865      	ldrh	r5, [r4, #2]
1001527a:	4b07      	ldr	r3, [pc, #28]	; (10015298 <gatts_handle_read_req+0x28>)
1001527c:	1c28      	adds	r0, r5, #0
1001527e:	4798      	blx	r3
10015280:	7883      	ldrb	r3, [r0, #2]
10015282:	2026      	movs	r0, #38	; 0x26
10015284:	07db      	lsls	r3, r3, #31
10015286:	d404      	bmi.n	10015292 <gatts_handle_read_req+0x22>
10015288:	8820      	ldrh	r0, [r4, #0]
1001528a:	1c29      	adds	r1, r5, #0
1001528c:	4b03      	ldr	r3, [pc, #12]	; (1001529c <gatts_handle_read_req+0x2c>)
1001528e:	4798      	blx	r3
10015290:	203b      	movs	r0, #59	; 0x3b
10015292:	bd38      	pop	{r3, r4, r5, pc}
10015294:	10016971 	.word	0x10016971
10015298:	10014a91 	.word	0x10014a91
1001529c:	10014cf9 	.word	0x10014cf9

100152a0 <gatts_handle_att_info_req>:
100152a0:	b538      	push	{r3, r4, r5, lr}
100152a2:	1c0d      	adds	r5, r1, #0
100152a4:	4b0a      	ldr	r3, [pc, #40]	; (100152d0 <gatts_handle_att_info_req+0x30>)
100152a6:	1c14      	adds	r4, r2, #0
100152a8:	4798      	blx	r3
100152aa:	882d      	ldrh	r5, [r5, #0]
100152ac:	4b09      	ldr	r3, [pc, #36]	; (100152d4 <gatts_handle_att_info_req+0x34>)
100152ae:	1c28      	adds	r0, r5, #0
100152b0:	4798      	blx	r3
100152b2:	0a22      	lsrs	r2, r4, #8
100152b4:	1c03      	adds	r3, r0, #0
100152b6:	4c08      	ldr	r4, [pc, #32]	; (100152d8 <gatts_handle_att_info_req+0x38>)
100152b8:	b291      	uxth	r1, r2
100152ba:	2800      	cmp	r0, #0
100152bc:	d003      	beq.n	100152c6 <gatts_handle_att_info_req+0x26>
100152be:	8882      	ldrh	r2, [r0, #4]
100152c0:	2300      	movs	r3, #0
100152c2:	1c28      	adds	r0, r5, #0
100152c4:	e001      	b.n	100152ca <gatts_handle_att_info_req+0x2a>
100152c6:	1c28      	adds	r0, r5, #0
100152c8:	2201      	movs	r2, #1
100152ca:	47a0      	blx	r4
100152cc:	203b      	movs	r0, #59	; 0x3b
100152ce:	bd38      	pop	{r3, r4, r5, pc}
100152d0:	100169b5 	.word	0x100169b5
100152d4:	10014a91 	.word	0x10014a91
100152d8:	10016a71 	.word	0x10016a71

100152dc <gatts_handle_write_req>:
100152dc:	b510      	push	{r4, lr}
100152de:	1c14      	adds	r4, r2, #0
100152e0:	4b07      	ldr	r3, [pc, #28]	; (10015300 <gatts_handle_write_req+0x24>)
100152e2:	4798      	blx	r3
100152e4:	4b07      	ldr	r3, [pc, #28]	; (10015304 <gatts_handle_write_req+0x28>)
100152e6:	8860      	ldrh	r0, [r4, #2]
100152e8:	4798      	blx	r3
100152ea:	2302      	movs	r3, #2
100152ec:	7881      	ldrb	r1, [r0, #2]
100152ee:	2022      	movs	r0, #34	; 0x22
100152f0:	4019      	ands	r1, r3
100152f2:	d103      	bne.n	100152fc <gatts_handle_write_req+0x20>
100152f4:	1c20      	adds	r0, r4, #0
100152f6:	4b04      	ldr	r3, [pc, #16]	; (10015308 <gatts_handle_write_req+0x2c>)
100152f8:	4798      	blx	r3
100152fa:	201f      	movs	r0, #31
100152fc:	bd10      	pop	{r4, pc}
100152fe:	46c0      	nop			; (mov r8, r8)
10015300:	1001697d 	.word	0x1001697d
10015304:	10014a91 	.word	0x10014a91
10015308:	100151e9 	.word	0x100151e9

1001530c <at_ble_notification_send>:
1001530c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001530e:	4d17      	ldr	r5, [pc, #92]	; (1001536c <at_ble_notification_send+0x60>)
10015310:	4c17      	ldr	r4, [pc, #92]	; (10015370 <at_ble_notification_send+0x64>)
10015312:	682a      	ldr	r2, [r5, #0]
10015314:	44a5      	add	sp, r4
10015316:	23d2      	movs	r3, #210	; 0xd2
10015318:	2a04      	cmp	r2, #4
1001531a:	d822      	bhi.n	10015362 <at_ble_notification_send+0x56>
1001531c:	1c06      	adds	r6, r0, #0
1001531e:	4b15      	ldr	r3, [pc, #84]	; (10015374 <at_ble_notification_send+0x68>)
10015320:	1c08      	adds	r0, r1, #0
10015322:	1c0c      	adds	r4, r1, #0
10015324:	4798      	blx	r3
10015326:	2800      	cmp	r0, #0
10015328:	d008      	beq.n	1001533c <at_ble_notification_send+0x30>
1001532a:	6883      	ldr	r3, [r0, #8]
1001532c:	2b00      	cmp	r3, #0
1001532e:	d005      	beq.n	1001533c <at_ble_notification_send+0x30>
10015330:	8882      	ldrh	r2, [r0, #4]
10015332:	1c21      	adds	r1, r4, #0
10015334:	9200      	str	r2, [sp, #0]
10015336:	2012      	movs	r0, #18
10015338:	1c32      	adds	r2, r6, #0
1001533a:	e00c      	b.n	10015356 <at_ble_notification_send+0x4a>
1001533c:	270e      	movs	r7, #14
1001533e:	446f      	add	r7, sp
10015340:	1c39      	adds	r1, r7, #0
10015342:	aa04      	add	r2, sp, #16
10015344:	4b0c      	ldr	r3, [pc, #48]	; (10015378 <at_ble_notification_send+0x6c>)
10015346:	1c20      	adds	r0, r4, #0
10015348:	4798      	blx	r3
1001534a:	2012      	movs	r0, #18
1001534c:	1c21      	adds	r1, r4, #0
1001534e:	1c32      	adds	r2, r6, #0
10015350:	883b      	ldrh	r3, [r7, #0]
10015352:	9300      	str	r3, [sp, #0]
10015354:	ab04      	add	r3, sp, #16
10015356:	4c09      	ldr	r4, [pc, #36]	; (1001537c <at_ble_notification_send+0x70>)
10015358:	47a0      	blx	r4
1001535a:	682b      	ldr	r3, [r5, #0]
1001535c:	3301      	adds	r3, #1
1001535e:	602b      	str	r3, [r5, #0]
10015360:	2300      	movs	r3, #0
10015362:	1c18      	adds	r0, r3, #0
10015364:	2385      	movs	r3, #133	; 0x85
10015366:	009b      	lsls	r3, r3, #2
10015368:	449d      	add	sp, r3
1001536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001536c:	1001c09c 	.word	0x1001c09c
10015370:	fffffdec 	.word	0xfffffdec
10015374:	10014a91 	.word	0x10014a91
10015378:	10016fb5 	.word	0x10016fb5
1001537c:	10016ab9 	.word	0x10016ab9

10015380 <init_l2cc_task_module>:
10015380:	220a      	movs	r2, #10
10015382:	4b01      	ldr	r3, [pc, #4]	; (10015388 <init_l2cc_task_module+0x8>)
10015384:	701a      	strb	r2, [r3, #0]
10015386:	4770      	bx	lr
10015388:	1001b88c 	.word	0x1001b88c

1001538c <l2cc_data_send_rsp_handler>:
1001538c:	b510      	push	{r4, lr}
1001538e:	7802      	ldrb	r2, [r0, #0]
10015390:	700a      	strb	r2, [r1, #0]
10015392:	7883      	ldrb	r3, [r0, #2]
10015394:	7844      	ldrb	r4, [r0, #1]
10015396:	021b      	lsls	r3, r3, #8
10015398:	4323      	orrs	r3, r4
1001539a:	804b      	strh	r3, [r1, #2]
1001539c:	7903      	ldrb	r3, [r0, #4]
1001539e:	78c0      	ldrb	r0, [r0, #3]
100153a0:	021b      	lsls	r3, r3, #8
100153a2:	4303      	orrs	r3, r0
100153a4:	808b      	strh	r3, [r1, #4]
100153a6:	2a00      	cmp	r2, #0
100153a8:	d103      	bne.n	100153b2 <l2cc_data_send_rsp_handler+0x26>
100153aa:	4a02      	ldr	r2, [pc, #8]	; (100153b4 <l2cc_data_send_rsp_handler+0x28>)
100153ac:	7813      	ldrb	r3, [r2, #0]
100153ae:	3301      	adds	r3, #1
100153b0:	7013      	strb	r3, [r2, #0]
100153b2:	bd10      	pop	{r4, pc}
100153b4:	1001b88c 	.word	0x1001b88c

100153b8 <l2cc_data_received_handler>:
100153b8:	b508      	push	{r3, lr}
100153ba:	1c03      	adds	r3, r0, #0
100153bc:	7842      	ldrb	r2, [r0, #1]
100153be:	7800      	ldrb	r0, [r0, #0]
100153c0:	0212      	lsls	r2, r2, #8
100153c2:	4302      	orrs	r2, r0
100153c4:	800a      	strh	r2, [r1, #0]
100153c6:	78da      	ldrb	r2, [r3, #3]
100153c8:	7898      	ldrb	r0, [r3, #2]
100153ca:	0212      	lsls	r2, r2, #8
100153cc:	4302      	orrs	r2, r0
100153ce:	804a      	strh	r2, [r1, #2]
100153d0:	795a      	ldrb	r2, [r3, #5]
100153d2:	7918      	ldrb	r0, [r3, #4]
100153d4:	0212      	lsls	r2, r2, #8
100153d6:	4302      	orrs	r2, r0
100153d8:	808a      	strh	r2, [r1, #4]
100153da:	1d88      	adds	r0, r1, #6
100153dc:	1d99      	adds	r1, r3, #6
100153de:	4b01      	ldr	r3, [pc, #4]	; (100153e4 <l2cc_data_received_handler+0x2c>)
100153e0:	4798      	blx	r3
100153e2:	bd08      	pop	{r3, pc}
100153e4:	10018e1b 	.word	0x10018e1b

100153e8 <at_ble_authenticate>:
100153e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100153ea:	1c0c      	adds	r4, r1, #0
100153ec:	211f      	movs	r1, #31
100153ee:	b08b      	sub	sp, #44	; 0x2c
100153f0:	9307      	str	r3, [sp, #28]
100153f2:	ab02      	add	r3, sp, #8
100153f4:	18c9      	adds	r1, r1, r3
100153f6:	230f      	movs	r3, #15
100153f8:	700b      	strb	r3, [r1, #0]
100153fa:	4b40      	ldr	r3, [pc, #256]	; (100154fc <at_ble_authenticate+0x114>)
100153fc:	1c05      	adds	r5, r0, #0
100153fe:	1c16      	adds	r6, r2, #0
10015400:	4798      	blx	r3
10015402:	1c07      	adds	r7, r0, #0
10015404:	2001      	movs	r0, #1
10015406:	2f07      	cmp	r7, #7
10015408:	d875      	bhi.n	100154f6 <at_ble_authenticate+0x10e>
1001540a:	2c00      	cmp	r4, #0
1001540c:	d113      	bne.n	10015436 <at_ble_authenticate+0x4e>
1001540e:	2312      	movs	r3, #18
10015410:	435f      	muls	r7, r3
10015412:	4b3b      	ldr	r3, [pc, #236]	; (10015500 <at_ble_authenticate+0x118>)
10015414:	5cfb      	ldrb	r3, [r7, r3]
10015416:	4283      	cmp	r3, r0
10015418:	d001      	beq.n	1001541e <at_ble_authenticate+0x36>
1001541a:	20cf      	movs	r0, #207	; 0xcf
1001541c:	e06b      	b.n	100154f6 <at_ble_authenticate+0x10e>
1001541e:	9504      	str	r5, [sp, #16]
10015420:	9400      	str	r4, [sp, #0]
10015422:	9401      	str	r4, [sp, #4]
10015424:	9402      	str	r4, [sp, #8]
10015426:	9403      	str	r4, [sp, #12]
10015428:	1c20      	adds	r0, r4, #0
1001542a:	1c21      	adds	r1, r4, #0
1001542c:	1c22      	adds	r2, r4, #0
1001542e:	1c23      	adds	r3, r4, #0
10015430:	4d34      	ldr	r5, [pc, #208]	; (10015504 <at_ble_authenticate+0x11c>)
10015432:	47a8      	blx	r5
10015434:	e05e      	b.n	100154f4 <at_ble_authenticate+0x10c>
10015436:	7922      	ldrb	r2, [r4, #4]
10015438:	2a06      	cmp	r2, #6
1001543a:	d9ee      	bls.n	1001541a <at_ble_authenticate+0x32>
1001543c:	7963      	ldrb	r3, [r4, #5]
1001543e:	2b10      	cmp	r3, #16
10015440:	d8eb      	bhi.n	1001541a <at_ble_authenticate+0x32>
10015442:	429a      	cmp	r2, r3
10015444:	d8e9      	bhi.n	1001541a <at_ble_authenticate+0x32>
10015446:	7a23      	ldrb	r3, [r4, #8]
10015448:	2b04      	cmp	r3, #4
1001544a:	d8e6      	bhi.n	1001541a <at_ble_authenticate+0x32>
1001544c:	79a3      	ldrb	r3, [r4, #6]
1001544e:	2b07      	cmp	r3, #7
10015450:	d8e3      	bhi.n	1001541a <at_ble_authenticate+0x32>
10015452:	79e3      	ldrb	r3, [r4, #7]
10015454:	2b07      	cmp	r3, #7
10015456:	d8e0      	bhi.n	1001541a <at_ble_authenticate+0x32>
10015458:	78a3      	ldrb	r3, [r4, #2]
1001545a:	2b00      	cmp	r3, #0
1001545c:	d006      	beq.n	1001546c <at_ble_authenticate+0x84>
1001545e:	2e00      	cmp	r6, #0
10015460:	d0db      	beq.n	1001541a <at_ble_authenticate+0x32>
10015462:	4829      	ldr	r0, [pc, #164]	; (10015508 <at_ble_authenticate+0x120>)
10015464:	1c31      	adds	r1, r6, #0
10015466:	221c      	movs	r2, #28
10015468:	4b28      	ldr	r3, [pc, #160]	; (1001550c <at_ble_authenticate+0x124>)
1001546a:	4798      	blx	r3
1001546c:	9b07      	ldr	r3, [sp, #28]
1001546e:	2b00      	cmp	r3, #0
10015470:	d005      	beq.n	1001547e <at_ble_authenticate+0x96>
10015472:	4827      	ldr	r0, [pc, #156]	; (10015510 <at_ble_authenticate+0x128>)
10015474:	1c19      	adds	r1, r3, #0
10015476:	309a      	adds	r0, #154	; 0x9a
10015478:	2210      	movs	r2, #16
1001547a:	4b24      	ldr	r3, [pc, #144]	; (1001550c <at_ble_authenticate+0x124>)
1001547c:	4798      	blx	r3
1001547e:	7863      	ldrb	r3, [r4, #1]
10015480:	78a2      	ldrb	r2, [r4, #2]
10015482:	009b      	lsls	r3, r3, #2
10015484:	4313      	orrs	r3, r2
10015486:	2212      	movs	r2, #18
10015488:	4357      	muls	r7, r2
1001548a:	4a1d      	ldr	r2, [pc, #116]	; (10015500 <at_ble_authenticate+0x118>)
1001548c:	b2db      	uxtb	r3, r3
1001548e:	5cba      	ldrb	r2, [r7, r2]
10015490:	2a00      	cmp	r2, #0
10015492:	d116      	bne.n	100154c2 <at_ble_authenticate+0xda>
10015494:	79a0      	ldrb	r0, [r4, #6]
10015496:	0742      	lsls	r2, r0, #29
10015498:	d502      	bpl.n	100154a0 <at_ble_authenticate+0xb8>
1001549a:	9a07      	ldr	r2, [sp, #28]
1001549c:	2a00      	cmp	r2, #0
1001549e:	d0bc      	beq.n	1001541a <at_ble_authenticate+0x32>
100154a0:	07c2      	lsls	r2, r0, #31
100154a2:	d501      	bpl.n	100154a8 <at_ble_authenticate+0xc0>
100154a4:	2e00      	cmp	r6, #0
100154a6:	d0b8      	beq.n	1001541a <at_ble_authenticate+0x32>
100154a8:	7966      	ldrb	r6, [r4, #5]
100154aa:	7821      	ldrb	r1, [r4, #0]
100154ac:	78e2      	ldrb	r2, [r4, #3]
100154ae:	9600      	str	r6, [sp, #0]
100154b0:	9001      	str	r0, [sp, #4]
100154b2:	79e0      	ldrb	r0, [r4, #7]
100154b4:	9002      	str	r0, [sp, #8]
100154b6:	7a20      	ldrb	r0, [r4, #8]
100154b8:	4c16      	ldr	r4, [pc, #88]	; (10015514 <at_ble_authenticate+0x12c>)
100154ba:	9003      	str	r0, [sp, #12]
100154bc:	1c28      	adds	r0, r5, #0
100154be:	47a0      	blx	r4
100154c0:	e018      	b.n	100154f4 <at_ble_authenticate+0x10c>
100154c2:	2a01      	cmp	r2, #1
100154c4:	d1a9      	bne.n	1001541a <at_ble_authenticate+0x32>
100154c6:	79e0      	ldrb	r0, [r4, #7]
100154c8:	0742      	lsls	r2, r0, #29
100154ca:	d502      	bpl.n	100154d2 <at_ble_authenticate+0xea>
100154cc:	9a07      	ldr	r2, [sp, #28]
100154ce:	2a00      	cmp	r2, #0
100154d0:	d0a3      	beq.n	1001541a <at_ble_authenticate+0x32>
100154d2:	07c2      	lsls	r2, r0, #31
100154d4:	d501      	bpl.n	100154da <at_ble_authenticate+0xf2>
100154d6:	2e00      	cmp	r6, #0
100154d8:	d09f      	beq.n	1001541a <at_ble_authenticate+0x32>
100154da:	7966      	ldrb	r6, [r4, #5]
100154dc:	7821      	ldrb	r1, [r4, #0]
100154de:	78e2      	ldrb	r2, [r4, #3]
100154e0:	9600      	str	r6, [sp, #0]
100154e2:	79a6      	ldrb	r6, [r4, #6]
100154e4:	9002      	str	r0, [sp, #8]
100154e6:	9601      	str	r6, [sp, #4]
100154e8:	7a20      	ldrb	r0, [r4, #8]
100154ea:	9504      	str	r5, [sp, #16]
100154ec:	9003      	str	r0, [sp, #12]
100154ee:	4c05      	ldr	r4, [pc, #20]	; (10015504 <at_ble_authenticate+0x11c>)
100154f0:	2001      	movs	r0, #1
100154f2:	47a0      	blx	r4
100154f4:	2000      	movs	r0, #0
100154f6:	b00b      	add	sp, #44	; 0x2c
100154f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100154fa:	46c0      	nop			; (mov r8, r8)
100154fc:	100158d1 	.word	0x100158d1
10015500:	1001cf0e 	.word	0x1001cf0e
10015504:	10015e41 	.word	0x10015e41
10015508:	1001d01c 	.word	0x1001d01c
1001550c:	10018e1b 	.word	0x10018e1b
10015510:	1001cf9e 	.word	0x1001cf9e
10015514:	10015c21 	.word	0x10015c21

10015518 <at_ble_pair_key_reply>:
10015518:	b5f0      	push	{r4, r5, r6, r7, lr}
1001551a:	b085      	sub	sp, #20
1001551c:	1c05      	adds	r5, r0, #0
1001551e:	1c0c      	adds	r4, r1, #0
10015520:	1c16      	adds	r6, r2, #0
10015522:	2100      	movs	r1, #0
10015524:	4668      	mov	r0, sp
10015526:	2210      	movs	r2, #16
10015528:	4b18      	ldr	r3, [pc, #96]	; (1001558c <at_ble_pair_key_reply+0x74>)
1001552a:	4798      	blx	r3
1001552c:	2101      	movs	r1, #1
1001552e:	2e00      	cmp	r6, #0
10015530:	d101      	bne.n	10015536 <at_ble_pair_key_reply+0x1e>
10015532:	1c31      	adds	r1, r6, #0
10015534:	466e      	mov	r6, sp
10015536:	2c00      	cmp	r4, #0
10015538:	d116      	bne.n	10015568 <at_ble_pair_key_reply+0x50>
1001553a:	2701      	movs	r7, #1
1001553c:	1c23      	adds	r3, r4, #0
1001553e:	1d70      	adds	r0, r6, #5
10015540:	3e01      	subs	r6, #1
10015542:	7802      	ldrb	r2, [r0, #0]
10015544:	3801      	subs	r0, #1
10015546:	3a30      	subs	r2, #48	; 0x30
10015548:	437a      	muls	r2, r7
1001554a:	189b      	adds	r3, r3, r2
1001554c:	220a      	movs	r2, #10
1001554e:	4357      	muls	r7, r2
10015550:	42b0      	cmp	r0, r6
10015552:	d1f6      	bne.n	10015542 <at_ble_pair_key_reply+0x2a>
10015554:	466a      	mov	r2, sp
10015556:	4668      	mov	r0, sp
10015558:	7013      	strb	r3, [r2, #0]
1001555a:	0a1a      	lsrs	r2, r3, #8
1001555c:	7042      	strb	r2, [r0, #1]
1001555e:	0c1a      	lsrs	r2, r3, #16
10015560:	0e1b      	lsrs	r3, r3, #24
10015562:	7082      	strb	r2, [r0, #2]
10015564:	70c3      	strb	r3, [r0, #3]
10015566:	e009      	b.n	1001557c <at_ble_pair_key_reply+0x64>
10015568:	20cf      	movs	r0, #207	; 0xcf
1001556a:	2c01      	cmp	r4, #1
1001556c:	d10c      	bne.n	10015588 <at_ble_pair_key_reply+0x70>
1001556e:	2300      	movs	r3, #0
10015570:	4668      	mov	r0, sp
10015572:	5cf2      	ldrb	r2, [r6, r3]
10015574:	54c2      	strb	r2, [r0, r3]
10015576:	3301      	adds	r3, #1
10015578:	2b10      	cmp	r3, #16
1001557a:	d1f9      	bne.n	10015570 <at_ble_pair_key_reply+0x58>
1001557c:	2004      	movs	r0, #4
1001557e:	466a      	mov	r2, sp
10015580:	1c2b      	adds	r3, r5, #0
10015582:	4c03      	ldr	r4, [pc, #12]	; (10015590 <at_ble_pair_key_reply+0x78>)
10015584:	47a0      	blx	r4
10015586:	2000      	movs	r0, #0
10015588:	b005      	add	sp, #20
1001558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001558c:	10018e2d 	.word	0x10018e2d
10015590:	10015ebd 	.word	0x10015ebd

10015594 <at_ble_send_slave_sec_request>:
10015594:	b570      	push	{r4, r5, r6, lr}
10015596:	4b0c      	ldr	r3, [pc, #48]	; (100155c8 <at_ble_send_slave_sec_request+0x34>)
10015598:	1c0e      	adds	r6, r1, #0
1001559a:	2100      	movs	r1, #0
1001559c:	1c05      	adds	r5, r0, #0
1001559e:	1c14      	adds	r4, r2, #0
100155a0:	4798      	blx	r3
100155a2:	2301      	movs	r3, #1
100155a4:	2807      	cmp	r0, #7
100155a6:	d80d      	bhi.n	100155c4 <at_ble_send_slave_sec_request+0x30>
100155a8:	3311      	adds	r3, #17
100155aa:	4358      	muls	r0, r3
100155ac:	4b07      	ldr	r3, [pc, #28]	; (100155cc <at_ble_send_slave_sec_request+0x38>)
100155ae:	5cc2      	ldrb	r2, [r0, r3]
100155b0:	23e0      	movs	r3, #224	; 0xe0
100155b2:	2a01      	cmp	r2, #1
100155b4:	d106      	bne.n	100155c4 <at_ble_send_slave_sec_request+0x30>
100155b6:	00b1      	lsls	r1, r6, #2
100155b8:	430c      	orrs	r4, r1
100155ba:	4b05      	ldr	r3, [pc, #20]	; (100155d0 <at_ble_send_slave_sec_request+0x3c>)
100155bc:	b2e1      	uxtb	r1, r4
100155be:	1c28      	adds	r0, r5, #0
100155c0:	4798      	blx	r3
100155c2:	2300      	movs	r3, #0
100155c4:	1c18      	adds	r0, r3, #0
100155c6:	bd70      	pop	{r4, r5, r6, pc}
100155c8:	100158d1 	.word	0x100158d1
100155cc:	1001cf0e 	.word	0x1001cf0e
100155d0:	10015f0d 	.word	0x10015f0d

100155d4 <at_ble_encryption_start>:
100155d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100155d6:	23cf      	movs	r3, #207	; 0xcf
100155d8:	2900      	cmp	r1, #0
100155da:	d02b      	beq.n	10015634 <at_ble_encryption_start+0x60>
100155dc:	2a05      	cmp	r2, #5
100155de:	d829      	bhi.n	10015634 <at_ble_encryption_start+0x60>
100155e0:	2701      	movs	r7, #1
100155e2:	1c3d      	adds	r5, r7, #0
100155e4:	2433      	movs	r4, #51	; 0x33
100155e6:	4095      	lsls	r5, r2
100155e8:	4225      	tst	r5, r4
100155ea:	d023      	beq.n	10015634 <at_ble_encryption_start+0x60>
100155ec:	7e8c      	ldrb	r4, [r1, #26]
100155ee:	3c07      	subs	r4, #7
100155f0:	2c09      	cmp	r4, #9
100155f2:	d81f      	bhi.n	10015634 <at_ble_encryption_start+0x60>
100155f4:	4b10      	ldr	r3, [pc, #64]	; (10015638 <at_ble_encryption_start+0x64>)
100155f6:	1c0c      	adds	r4, r1, #0
100155f8:	2100      	movs	r1, #0
100155fa:	1c15      	adds	r5, r2, #0
100155fc:	1c06      	adds	r6, r0, #0
100155fe:	4798      	blx	r3
10015600:	1c3b      	adds	r3, r7, #0
10015602:	2807      	cmp	r0, #7
10015604:	d816      	bhi.n	10015634 <at_ble_encryption_start+0x60>
10015606:	2312      	movs	r3, #18
10015608:	4358      	muls	r0, r3
1001560a:	4b0c      	ldr	r3, [pc, #48]	; (1001563c <at_ble_encryption_start+0x68>)
1001560c:	5cc7      	ldrb	r7, [r0, r3]
1001560e:	23e0      	movs	r3, #224	; 0xe0
10015610:	2f00      	cmp	r7, #0
10015612:	d10f      	bne.n	10015634 <at_ble_encryption_start+0x60>
10015614:	1c21      	adds	r1, r4, #0
10015616:	221c      	movs	r2, #28
10015618:	4b09      	ldr	r3, [pc, #36]	; (10015640 <at_ble_encryption_start+0x6c>)
1001561a:	480a      	ldr	r0, [pc, #40]	; (10015644 <at_ble_encryption_start+0x70>)
1001561c:	4798      	blx	r3
1001561e:	1c23      	adds	r3, r4, #0
10015620:	7ea1      	ldrb	r1, [r4, #26]
10015622:	8a22      	ldrh	r2, [r4, #16]
10015624:	3312      	adds	r3, #18
10015626:	9100      	str	r1, [sp, #0]
10015628:	9501      	str	r5, [sp, #4]
1001562a:	1c21      	adds	r1, r4, #0
1001562c:	1c30      	adds	r0, r6, #0
1001562e:	4c06      	ldr	r4, [pc, #24]	; (10015648 <at_ble_encryption_start+0x74>)
10015630:	47a0      	blx	r4
10015632:	1c3b      	adds	r3, r7, #0
10015634:	1c18      	adds	r0, r3, #0
10015636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015638:	100158d1 	.word	0x100158d1
1001563c:	1001cf0e 	.word	0x1001cf0e
10015640:	10018e1b 	.word	0x10018e1b
10015644:	1001d01c 	.word	0x1001d01c
10015648:	10015f4d 	.word	0x10015f4d

1001564c <at_ble_encryption_request_reply>:
1001564c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001564e:	24cf      	movs	r4, #207	; 0xcf
10015650:	2b00      	cmp	r3, #0
10015652:	d011      	beq.n	10015678 <at_ble_encryption_request_reply+0x2c>
10015654:	2a00      	cmp	r2, #0
10015656:	d00a      	beq.n	1001566e <at_ble_encryption_request_reply+0x22>
10015658:	2905      	cmp	r1, #5
1001565a:	d80d      	bhi.n	10015678 <at_ble_encryption_request_reply+0x2c>
1001565c:	2501      	movs	r5, #1
1001565e:	2633      	movs	r6, #51	; 0x33
10015660:	408d      	lsls	r5, r1
10015662:	4235      	tst	r5, r6
10015664:	d008      	beq.n	10015678 <at_ble_encryption_request_reply+0x2c>
10015666:	7e9d      	ldrb	r5, [r3, #26]
10015668:	3d07      	subs	r5, #7
1001566a:	2d09      	cmp	r5, #9
1001566c:	d804      	bhi.n	10015678 <at_ble_encryption_request_reply+0x2c>
1001566e:	7e9c      	ldrb	r4, [r3, #26]
10015670:	9400      	str	r4, [sp, #0]
10015672:	4c02      	ldr	r4, [pc, #8]	; (1001567c <at_ble_encryption_request_reply+0x30>)
10015674:	47a0      	blx	r4
10015676:	2400      	movs	r4, #0
10015678:	1c20      	adds	r0, r4, #0
1001567a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001567c:	10016009 	.word	0x10016009

10015680 <rx_callback>:
10015680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015682:	88c5      	ldrh	r5, [r0, #6]
10015684:	8807      	ldrh	r7, [r0, #0]
10015686:	8886      	ldrh	r6, [r0, #4]
10015688:	2d00      	cmp	r5, #0
1001568a:	d10c      	bne.n	100156a6 <rx_callback+0x26>
1001568c:	4b19      	ldr	r3, [pc, #100]	; (100156f4 <rx_callback+0x74>)
1001568e:	1c38      	adds	r0, r7, #0
10015690:	1c31      	adds	r1, r6, #0
10015692:	1c2a      	adds	r2, r5, #0
10015694:	4798      	blx	r3
10015696:	1e03      	subs	r3, r0, #0
10015698:	d12a      	bne.n	100156f0 <rx_callback+0x70>
1001569a:	1c38      	adds	r0, r7, #0
1001569c:	1c31      	adds	r1, r6, #0
1001569e:	1c1a      	adds	r2, r3, #0
100156a0:	4c15      	ldr	r4, [pc, #84]	; (100156f8 <rx_callback+0x78>)
100156a2:	47a0      	blx	r4
100156a4:	e024      	b.n	100156f0 <rx_callback+0x70>
100156a6:	2296      	movs	r2, #150	; 0x96
100156a8:	4c14      	ldr	r4, [pc, #80]	; (100156fc <rx_callback+0x7c>)
100156aa:	0092      	lsls	r2, r2, #2
100156ac:	8823      	ldrh	r3, [r4, #0]
100156ae:	195b      	adds	r3, r3, r5
100156b0:	4293      	cmp	r3, r2
100156b2:	dd01      	ble.n	100156b8 <rx_callback+0x38>
100156b4:	2300      	movs	r3, #0
100156b6:	8023      	strh	r3, [r4, #0]
100156b8:	1c01      	adds	r1, r0, #0
100156ba:	4a11      	ldr	r2, [pc, #68]	; (10015700 <rx_callback+0x80>)
100156bc:	8823      	ldrh	r3, [r4, #0]
100156be:	3108      	adds	r1, #8
100156c0:	189b      	adds	r3, r3, r2
100156c2:	9301      	str	r3, [sp, #4]
100156c4:	1c18      	adds	r0, r3, #0
100156c6:	1c2a      	adds	r2, r5, #0
100156c8:	4b0e      	ldr	r3, [pc, #56]	; (10015704 <rx_callback+0x84>)
100156ca:	4798      	blx	r3
100156cc:	1c38      	adds	r0, r7, #0
100156ce:	1c31      	adds	r1, r6, #0
100156d0:	9a01      	ldr	r2, [sp, #4]
100156d2:	4b08      	ldr	r3, [pc, #32]	; (100156f4 <rx_callback+0x74>)
100156d4:	4798      	blx	r3
100156d6:	2800      	cmp	r0, #0
100156d8:	d10a      	bne.n	100156f0 <rx_callback+0x70>
100156da:	4b09      	ldr	r3, [pc, #36]	; (10015700 <rx_callback+0x80>)
100156dc:	8822      	ldrh	r2, [r4, #0]
100156de:	1c31      	adds	r1, r6, #0
100156e0:	18d2      	adds	r2, r2, r3
100156e2:	1c38      	adds	r0, r7, #0
100156e4:	1c2b      	adds	r3, r5, #0
100156e6:	4e04      	ldr	r6, [pc, #16]	; (100156f8 <rx_callback+0x78>)
100156e8:	47b0      	blx	r6
100156ea:	8823      	ldrh	r3, [r4, #0]
100156ec:	18ed      	adds	r5, r5, r3
100156ee:	8025      	strh	r5, [r4, #0]
100156f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100156f2:	46c0      	nop			; (mov r8, r8)
100156f4:	10013e05 	.word	0x10013e05
100156f8:	10013d99 	.word	0x10013d99
100156fc:	1001d078 	.word	0x1001d078
10015700:	1001d47c 	.word	0x1001d47c
10015704:	10018e1b 	.word	0x10018e1b

10015708 <interface_send>:
10015708:	b508      	push	{r3, lr}
1001570a:	4b02      	ldr	r3, [pc, #8]	; (10015714 <interface_send+0xc>)
1001570c:	4798      	blx	r3
1001570e:	2000      	movs	r0, #0
10015710:	bd08      	pop	{r3, pc}
10015712:	46c0      	nop			; (mov r8, r8)
10015714:	10013315 	.word	0x10013315

10015718 <interface_init>:
10015718:	2280      	movs	r2, #128	; 0x80
1001571a:	b510      	push	{r4, lr}
1001571c:	2100      	movs	r1, #0
1001571e:	4c08      	ldr	r4, [pc, #32]	; (10015740 <interface_init+0x28>)
10015720:	0092      	lsls	r2, r2, #2
10015722:	4808      	ldr	r0, [pc, #32]	; (10015744 <interface_init+0x2c>)
10015724:	47a0      	blx	r4
10015726:	2296      	movs	r2, #150	; 0x96
10015728:	2100      	movs	r1, #0
1001572a:	0092      	lsls	r2, r2, #2
1001572c:	4806      	ldr	r0, [pc, #24]	; (10015748 <interface_init+0x30>)
1001572e:	47a0      	blx	r4
10015730:	2200      	movs	r2, #0
10015732:	4b06      	ldr	r3, [pc, #24]	; (1001574c <interface_init+0x34>)
10015734:	801a      	strh	r2, [r3, #0]
10015736:	4a06      	ldr	r2, [pc, #24]	; (10015750 <interface_init+0x38>)
10015738:	4b06      	ldr	r3, [pc, #24]	; (10015754 <interface_init+0x3c>)
1001573a:	601a      	str	r2, [r3, #0]
1001573c:	bd10      	pop	{r4, pc}
1001573e:	46c0      	nop			; (mov r8, r8)
10015740:	10018e2d 	.word	0x10018e2d
10015744:	1001d27c 	.word	0x1001d27c
10015748:	1001d47c 	.word	0x1001d47c
1001574c:	1001d078 	.word	0x1001d078
10015750:	1001d07c 	.word	0x1001d07c
10015754:	1001b890 	.word	0x1001b890

10015758 <platform_cmd_cmpl_signal>:
10015758:	2201      	movs	r2, #1
1001575a:	4b01      	ldr	r3, [pc, #4]	; (10015760 <platform_cmd_cmpl_signal+0x8>)
1001575c:	601a      	str	r2, [r3, #0]
1001575e:	4770      	bx	lr
10015760:	1001c01c 	.word	0x1001c01c

10015764 <platform_cmd_cmpl_wait>:
10015764:	b510      	push	{r4, lr}
10015766:	1c04      	adds	r4, r0, #0
10015768:	4b07      	ldr	r3, [pc, #28]	; (10015788 <platform_cmd_cmpl_wait+0x24>)
1001576a:	681a      	ldr	r2, [r3, #0]
1001576c:	2a01      	cmp	r2, #1
1001576e:	d003      	beq.n	10015778 <platform_cmd_cmpl_wait+0x14>
10015770:	4b06      	ldr	r3, [pc, #24]	; (1001578c <platform_cmd_cmpl_wait+0x28>)
10015772:	2000      	movs	r0, #0
10015774:	4798      	blx	r3
10015776:	e7f7      	b.n	10015768 <platform_cmd_cmpl_wait+0x4>
10015778:	6819      	ldr	r1, [r3, #0]
1001577a:	2901      	cmp	r1, #1
1001577c:	d102      	bne.n	10015784 <platform_cmd_cmpl_wait+0x20>
1001577e:	2200      	movs	r2, #0
10015780:	601a      	str	r2, [r3, #0]
10015782:	e000      	b.n	10015786 <platform_cmd_cmpl_wait+0x22>
10015784:	7022      	strb	r2, [r4, #0]
10015786:	bd10      	pop	{r4, pc}
10015788:	1001c01c 	.word	0x1001c01c
1001578c:	100137e9 	.word	0x100137e9

10015790 <start_timer>:
10015790:	4770      	bx	lr

10015792 <stop_timer>:
10015792:	4770      	bx	lr

10015794 <dbg_le_set_bd_addr_req_handler>:
10015794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015796:	466b      	mov	r3, sp
10015798:	1dde      	adds	r6, r3, #7
1001579a:	2300      	movs	r3, #0
1001579c:	7033      	strb	r3, [r6, #0]
1001579e:	230f      	movs	r3, #15
100157a0:	4c13      	ldr	r4, [pc, #76]	; (100157f0 <dbg_le_set_bd_addr_req_handler+0x5c>)
100157a2:	2703      	movs	r7, #3
100157a4:	7023      	strb	r3, [r4, #0]
100157a6:	2300      	movs	r3, #0
100157a8:	70e3      	strb	r3, [r4, #3]
100157aa:	4b12      	ldr	r3, [pc, #72]	; (100157f4 <dbg_le_set_bd_addr_req_handler+0x60>)
100157ac:	1c01      	adds	r1, r0, #0
100157ae:	881a      	ldrh	r2, [r3, #0]
100157b0:	881b      	ldrh	r3, [r3, #0]
100157b2:	7122      	strb	r2, [r4, #4]
100157b4:	0a1b      	lsrs	r3, r3, #8
100157b6:	2206      	movs	r2, #6
100157b8:	7163      	strb	r3, [r4, #5]
100157ba:	480f      	ldr	r0, [pc, #60]	; (100157f8 <dbg_le_set_bd_addr_req_handler+0x64>)
100157bc:	4b0f      	ldr	r3, [pc, #60]	; (100157fc <dbg_le_set_bd_addr_req_handler+0x68>)
100157be:	7067      	strb	r7, [r4, #1]
100157c0:	70a7      	strb	r7, [r4, #2]
100157c2:	4798      	blx	r3
100157c4:	4d0e      	ldr	r5, [pc, #56]	; (10015800 <dbg_le_set_bd_addr_req_handler+0x6c>)
100157c6:	4b0f      	ldr	r3, [pc, #60]	; (10015804 <dbg_le_set_bd_addr_req_handler+0x70>)
100157c8:	210e      	movs	r1, #14
100157ca:	802b      	strh	r3, [r5, #0]
100157cc:	2306      	movs	r3, #6
100157ce:	71a3      	strb	r3, [r4, #6]
100157d0:	2300      	movs	r3, #0
100157d2:	1c20      	adds	r0, r4, #0
100157d4:	71e3      	strb	r3, [r4, #7]
100157d6:	4b0c      	ldr	r3, [pc, #48]	; (10015808 <dbg_le_set_bd_addr_req_handler+0x74>)
100157d8:	80af      	strh	r7, [r5, #4]
100157da:	4798      	blx	r3
100157dc:	1c30      	adds	r0, r6, #0
100157de:	4b0b      	ldr	r3, [pc, #44]	; (1001580c <dbg_le_set_bd_addr_req_handler+0x78>)
100157e0:	4798      	blx	r3
100157e2:	7833      	ldrb	r3, [r6, #0]
100157e4:	20e2      	movs	r0, #226	; 0xe2
100157e6:	2b00      	cmp	r3, #0
100157e8:	d101      	bne.n	100157ee <dbg_le_set_bd_addr_req_handler+0x5a>
100157ea:	68ab      	ldr	r3, [r5, #8]
100157ec:	7818      	ldrb	r0, [r3, #0]
100157ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100157f0:	1001d27c 	.word	0x1001d27c
100157f4:	1001cf0c 	.word	0x1001cf0c
100157f8:	1001d284 	.word	0x1001d284
100157fc:	10018e1b 	.word	0x10018e1b
10015800:	1001cf00 	.word	0x1001cf00
10015804:	00000329 	.word	0x00000329
10015808:	10015709 	.word	0x10015709
1001580c:	10015765 	.word	0x10015765

10015810 <gapc_get_dev_info_cfm.constprop.1>:
10015810:	b538      	push	{r3, r4, r5, lr}
10015812:	230b      	movs	r3, #11
10015814:	4c27      	ldr	r4, [pc, #156]	; (100158b4 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10015816:	7023      	strb	r3, [r4, #0]
10015818:	3303      	adds	r3, #3
1001581a:	7063      	strb	r3, [r4, #1]
1001581c:	3329      	adds	r3, #41	; 0x29
1001581e:	70a3      	strb	r3, [r4, #2]
10015820:	4b25      	ldr	r3, [pc, #148]	; (100158b8 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10015822:	70e1      	strb	r1, [r4, #3]
10015824:	881a      	ldrh	r2, [r3, #0]
10015826:	881b      	ldrh	r3, [r3, #0]
10015828:	7122      	strb	r2, [r4, #4]
1001582a:	0a1b      	lsrs	r3, r3, #8
1001582c:	7163      	strb	r3, [r4, #5]
1001582e:	2300      	movs	r3, #0
10015830:	7220      	strb	r0, [r4, #8]
10015832:	7263      	strb	r3, [r4, #9]
10015834:	2801      	cmp	r0, #1
10015836:	d02b      	beq.n	10015890 <gapc_get_dev_info_cfm.constprop.1+0x80>
10015838:	4298      	cmp	r0, r3
1001583a:	d01b      	beq.n	10015874 <gapc_get_dev_info_cfm.constprop.1+0x64>
1001583c:	2802      	cmp	r0, #2
1001583e:	d12f      	bne.n	100158a0 <gapc_get_dev_info_cfm.constprop.1+0x90>
10015840:	4b1e      	ldr	r3, [pc, #120]	; (100158bc <gapc_get_dev_info_cfm.constprop.1+0xac>)
10015842:	2112      	movs	r1, #18
10015844:	1c1a      	adds	r2, r3, #0
10015846:	32ce      	adds	r2, #206	; 0xce
10015848:	8812      	ldrh	r2, [r2, #0]
1001584a:	72a2      	strb	r2, [r4, #10]
1001584c:	0a12      	lsrs	r2, r2, #8
1001584e:	72e2      	strb	r2, [r4, #11]
10015850:	1c1a      	adds	r2, r3, #0
10015852:	32d0      	adds	r2, #208	; 0xd0
10015854:	8812      	ldrh	r2, [r2, #0]
10015856:	7322      	strb	r2, [r4, #12]
10015858:	0a12      	lsrs	r2, r2, #8
1001585a:	7362      	strb	r2, [r4, #13]
1001585c:	1c1a      	adds	r2, r3, #0
1001585e:	32d2      	adds	r2, #210	; 0xd2
10015860:	8812      	ldrh	r2, [r2, #0]
10015862:	33d4      	adds	r3, #212	; 0xd4
10015864:	73a2      	strb	r2, [r4, #14]
10015866:	0a12      	lsrs	r2, r2, #8
10015868:	73e2      	strb	r2, [r4, #15]
1001586a:	881b      	ldrh	r3, [r3, #0]
1001586c:	7423      	strb	r3, [r4, #16]
1001586e:	0a1b      	lsrs	r3, r3, #8
10015870:	7463      	strb	r3, [r4, #17]
10015872:	e016      	b.n	100158a2 <gapc_get_dev_info_cfm.constprop.1+0x92>
10015874:	4b11      	ldr	r3, [pc, #68]	; (100158bc <gapc_get_dev_info_cfm.constprop.1+0xac>)
10015876:	4912      	ldr	r1, [pc, #72]	; (100158c0 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10015878:	33aa      	adds	r3, #170	; 0xaa
1001587a:	881d      	ldrh	r5, [r3, #0]
1001587c:	4811      	ldr	r0, [pc, #68]	; (100158c4 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1001587e:	0a2b      	lsrs	r3, r5, #8
10015880:	72a5      	strb	r5, [r4, #10]
10015882:	72e3      	strb	r3, [r4, #11]
10015884:	1c2a      	adds	r2, r5, #0
10015886:	4b10      	ldr	r3, [pc, #64]	; (100158c8 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10015888:	350c      	adds	r5, #12
1001588a:	4798      	blx	r3
1001588c:	b2a9      	uxth	r1, r5
1001588e:	e008      	b.n	100158a2 <gapc_get_dev_info_cfm.constprop.1+0x92>
10015890:	4b0a      	ldr	r3, [pc, #40]	; (100158bc <gapc_get_dev_info_cfm.constprop.1+0xac>)
10015892:	210c      	movs	r1, #12
10015894:	33cc      	adds	r3, #204	; 0xcc
10015896:	881b      	ldrh	r3, [r3, #0]
10015898:	72a3      	strb	r3, [r4, #10]
1001589a:	0a1b      	lsrs	r3, r3, #8
1001589c:	72e3      	strb	r3, [r4, #11]
1001589e:	e000      	b.n	100158a2 <gapc_get_dev_info_cfm.constprop.1+0x92>
100158a0:	210a      	movs	r1, #10
100158a2:	1c0b      	adds	r3, r1, #0
100158a4:	3b08      	subs	r3, #8
100158a6:	71a3      	strb	r3, [r4, #6]
100158a8:	121b      	asrs	r3, r3, #8
100158aa:	71e3      	strb	r3, [r4, #7]
100158ac:	1c20      	adds	r0, r4, #0
100158ae:	4b07      	ldr	r3, [pc, #28]	; (100158cc <gapc_get_dev_info_cfm.constprop.1+0xbc>)
100158b0:	4798      	blx	r3
100158b2:	bd38      	pop	{r3, r4, r5, pc}
100158b4:	1001d27c 	.word	0x1001d27c
100158b8:	1001cf0c 	.word	0x1001cf0c
100158bc:	1001cf9e 	.word	0x1001cf9e
100158c0:	1001d04a 	.word	0x1001d04a
100158c4:	1001d288 	.word	0x1001d288
100158c8:	10018e1b 	.word	0x10018e1b
100158cc:	10015709 	.word	0x10015709

100158d0 <check_ConnData_idx_role>:
100158d0:	4b0c      	ldr	r3, [pc, #48]	; (10015904 <check_ConnData_idx_role+0x34>)
100158d2:	b570      	push	{r4, r5, r6, lr}
100158d4:	1c04      	adds	r4, r0, #0
100158d6:	2008      	movs	r0, #8
100158d8:	429c      	cmp	r4, r3
100158da:	d011      	beq.n	10015900 <check_ConnData_idx_role+0x30>
100158dc:	2300      	movs	r3, #0
100158de:	2212      	movs	r2, #18
100158e0:	435a      	muls	r2, r3
100158e2:	4d09      	ldr	r5, [pc, #36]	; (10015908 <check_ConnData_idx_role+0x38>)
100158e4:	b2d8      	uxtb	r0, r3
100158e6:	1956      	adds	r6, r2, r5
100158e8:	8976      	ldrh	r6, [r6, #10]
100158ea:	42a6      	cmp	r6, r4
100158ec:	d104      	bne.n	100158f8 <check_ConnData_idx_role+0x28>
100158ee:	2900      	cmp	r1, #0
100158f0:	d006      	beq.n	10015900 <check_ConnData_idx_role+0x30>
100158f2:	5d53      	ldrb	r3, [r2, r5]
100158f4:	700b      	strb	r3, [r1, #0]
100158f6:	e003      	b.n	10015900 <check_ConnData_idx_role+0x30>
100158f8:	3301      	adds	r3, #1
100158fa:	2b08      	cmp	r3, #8
100158fc:	d1ef      	bne.n	100158de <check_ConnData_idx_role+0xe>
100158fe:	1c18      	adds	r0, r3, #0
10015900:	bd70      	pop	{r4, r5, r6, pc}
10015902:	46c0      	nop			; (mov r8, r8)
10015904:	0000ffff 	.word	0x0000ffff
10015908:	1001cf0e 	.word	0x1001cf0e

1001590c <check_ConnData_emptyEntry>:
1001590c:	2300      	movs	r3, #0
1001590e:	2212      	movs	r2, #18
10015910:	435a      	muls	r2, r3
10015912:	4906      	ldr	r1, [pc, #24]	; (1001592c <check_ConnData_emptyEntry+0x20>)
10015914:	b2d8      	uxtb	r0, r3
10015916:	1852      	adds	r2, r2, r1
10015918:	8951      	ldrh	r1, [r2, #10]
1001591a:	4a05      	ldr	r2, [pc, #20]	; (10015930 <check_ConnData_emptyEntry+0x24>)
1001591c:	4291      	cmp	r1, r2
1001591e:	d003      	beq.n	10015928 <check_ConnData_emptyEntry+0x1c>
10015920:	3301      	adds	r3, #1
10015922:	2b08      	cmp	r3, #8
10015924:	d1f3      	bne.n	1001590e <check_ConnData_emptyEntry+0x2>
10015926:	1c18      	adds	r0, r3, #0
10015928:	4770      	bx	lr
1001592a:	46c0      	nop			; (mov r8, r8)
1001592c:	1001cf0e 	.word	0x1001cf0e
10015930:	0000ffff 	.word	0x0000ffff

10015934 <gapc_cmp_evt>:
10015934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015936:	780b      	ldrb	r3, [r1, #0]
10015938:	1c05      	adds	r5, r0, #0
1001593a:	1e58      	subs	r0, r3, #1
1001593c:	784e      	ldrb	r6, [r1, #1]
1001593e:	280f      	cmp	r0, #15
10015940:	d85a      	bhi.n	100159f8 <gapc_cmp_evt+0xc4>
10015942:	1c14      	adds	r4, r2, #0
10015944:	f001 fba4 	bl	10017090 <__gnu_thumb1_case_uqi>
10015948:	5858440a 	.word	0x5858440a
1001594c:	4b584444 	.word	0x4b584444
10015950:	0825122d 	.word	0x0825122d
10015954:	3e395858 	.word	0x3e395858
10015958:	203b      	movs	r0, #59	; 0x3b
1001595a:	e04e      	b.n	100159fa <gapc_cmp_evt+0xc6>
1001595c:	203b      	movs	r0, #59	; 0x3b
1001595e:	2e00      	cmp	r6, #0
10015960:	d04b      	beq.n	100159fa <gapc_cmp_evt+0xc6>
10015962:	0a2d      	lsrs	r5, r5, #8
10015964:	8015      	strh	r5, [r2, #0]
10015966:	7096      	strb	r6, [r2, #2]
10015968:	3835      	subs	r0, #53	; 0x35
1001596a:	e046      	b.n	100159fa <gapc_cmp_evt+0xc6>
1001596c:	466b      	mov	r3, sp
1001596e:	1ddf      	adds	r7, r3, #7
10015970:	2301      	movs	r3, #1
10015972:	0a2d      	lsrs	r5, r5, #8
10015974:	703b      	strb	r3, [r7, #0]
10015976:	1c28      	adds	r0, r5, #0
10015978:	1c39      	adds	r1, r7, #0
1001597a:	4b20      	ldr	r3, [pc, #128]	; (100159fc <gapc_cmp_evt+0xc8>)
1001597c:	4798      	blx	r3
1001597e:	2807      	cmp	r0, #7
10015980:	d803      	bhi.n	1001598a <gapc_cmp_evt+0x56>
10015982:	783b      	ldrb	r3, [r7, #0]
10015984:	203b      	movs	r0, #59	; 0x3b
10015986:	2b00      	cmp	r3, #0
10015988:	d037      	beq.n	100159fa <gapc_cmp_evt+0xc6>
1001598a:	8065      	strh	r5, [r4, #2]
1001598c:	7126      	strb	r6, [r4, #4]
1001598e:	2009      	movs	r0, #9
10015990:	e033      	b.n	100159fa <gapc_cmp_evt+0xc6>
10015992:	203b      	movs	r0, #59	; 0x3b
10015994:	2e00      	cmp	r6, #0
10015996:	d030      	beq.n	100159fa <gapc_cmp_evt+0xc6>
10015998:	0a2d      	lsrs	r5, r5, #8
1001599a:	8015      	strh	r5, [r2, #0]
1001599c:	7096      	strb	r6, [r2, #2]
1001599e:	382d      	subs	r0, #45	; 0x2d
100159a0:	e02b      	b.n	100159fa <gapc_cmp_evt+0xc6>
100159a2:	203b      	movs	r0, #59	; 0x3b
100159a4:	2e00      	cmp	r6, #0
100159a6:	d028      	beq.n	100159fa <gapc_cmp_evt+0xc6>
100159a8:	2300      	movs	r3, #0
100159aa:	0a2d      	lsrs	r5, r5, #8
100159ac:	8015      	strh	r5, [r2, #0]
100159ae:	7096      	strb	r6, [r2, #2]
100159b0:	8093      	strh	r3, [r2, #4]
100159b2:	80d3      	strh	r3, [r2, #6]
100159b4:	8113      	strh	r3, [r2, #8]
100159b6:	3834      	subs	r0, #52	; 0x34
100159b8:	e01f      	b.n	100159fa <gapc_cmp_evt+0xc6>
100159ba:	203b      	movs	r0, #59	; 0x3b
100159bc:	2e00      	cmp	r6, #0
100159be:	d01c      	beq.n	100159fa <gapc_cmp_evt+0xc6>
100159c0:	7216      	strb	r6, [r2, #8]
100159c2:	e003      	b.n	100159cc <gapc_cmp_evt+0x98>
100159c4:	203b      	movs	r0, #59	; 0x3b
100159c6:	2e00      	cmp	r6, #0
100159c8:	d017      	beq.n	100159fa <gapc_cmp_evt+0xc6>
100159ca:	7116      	strb	r6, [r2, #4]
100159cc:	3812      	subs	r0, #18
100159ce:	e014      	b.n	100159fa <gapc_cmp_evt+0xc6>
100159d0:	203b      	movs	r0, #59	; 0x3b
100159d2:	2e00      	cmp	r6, #0
100159d4:	d011      	beq.n	100159fa <gapc_cmp_evt+0xc6>
100159d6:	7093      	strb	r3, [r2, #2]
100159d8:	70d6      	strb	r6, [r2, #3]
100159da:	382a      	subs	r0, #42	; 0x2a
100159dc:	e00d      	b.n	100159fa <gapc_cmp_evt+0xc6>
100159de:	203b      	movs	r0, #59	; 0x3b
100159e0:	2e00      	cmp	r6, #0
100159e2:	d00a      	beq.n	100159fa <gapc_cmp_evt+0xc6>
100159e4:	0a2d      	lsrs	r5, r5, #8
100159e6:	7016      	strb	r6, [r2, #0]
100159e8:	8055      	strh	r5, [r2, #2]
100159ea:	1d10      	adds	r0, r2, #4
100159ec:	2100      	movs	r1, #0
100159ee:	2205      	movs	r2, #5
100159f0:	4b03      	ldr	r3, [pc, #12]	; (10015a00 <gapc_cmp_evt+0xcc>)
100159f2:	4798      	blx	r3
100159f4:	2012      	movs	r0, #18
100159f6:	e000      	b.n	100159fa <gapc_cmp_evt+0xc6>
100159f8:	2000      	movs	r0, #0
100159fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100159fc:	100158d1 	.word	0x100158d1
10015a00:	10018e2d 	.word	0x10018e2d

10015a04 <gapc_connection_cfm_handler>:
10015a04:	b5f0      	push	{r4, r5, r6, r7, lr}
10015a06:	b085      	sub	sp, #20
10015a08:	1c1d      	adds	r5, r3, #0
10015a0a:	ab0a      	add	r3, sp, #40	; 0x28
10015a0c:	781b      	ldrb	r3, [r3, #0]
10015a0e:	9201      	str	r2, [sp, #4]
10015a10:	9302      	str	r3, [sp, #8]
10015a12:	ab0b      	add	r3, sp, #44	; 0x2c
10015a14:	781b      	ldrb	r3, [r3, #0]
10015a16:	1c07      	adds	r7, r0, #0
10015a18:	9303      	str	r3, [sp, #12]
10015a1a:	ab0c      	add	r3, sp, #48	; 0x30
10015a1c:	881a      	ldrh	r2, [r3, #0]
10015a1e:	2302      	movs	r3, #2
10015a20:	1c0e      	adds	r6, r1, #0
10015a22:	4c23      	ldr	r4, [pc, #140]	; (10015ab0 <gapc_connection_cfm_handler+0xac>)
10015a24:	1c39      	adds	r1, r7, #0
10015a26:	7023      	strb	r3, [r4, #0]
10015a28:	330c      	adds	r3, #12
10015a2a:	7063      	strb	r3, [r4, #1]
10015a2c:	70a3      	strb	r3, [r4, #2]
10015a2e:	4b21      	ldr	r3, [pc, #132]	; (10015ab4 <gapc_connection_cfm_handler+0xb0>)
10015a30:	70e2      	strb	r2, [r4, #3]
10015a32:	881a      	ldrh	r2, [r3, #0]
10015a34:	881b      	ldrh	r3, [r3, #0]
10015a36:	7122      	strb	r2, [r4, #4]
10015a38:	0a1b      	lsrs	r3, r3, #8
10015a3a:	4f1f      	ldr	r7, [pc, #124]	; (10015ab8 <gapc_connection_cfm_handler+0xb4>)
10015a3c:	2210      	movs	r2, #16
10015a3e:	481f      	ldr	r0, [pc, #124]	; (10015abc <gapc_connection_cfm_handler+0xb8>)
10015a40:	7163      	strb	r3, [r4, #5]
10015a42:	47b8      	blx	r7
10015a44:	0a33      	lsrs	r3, r6, #8
10015a46:	7626      	strb	r6, [r4, #24]
10015a48:	7663      	strb	r3, [r4, #25]
10015a4a:	9901      	ldr	r1, [sp, #4]
10015a4c:	0c33      	lsrs	r3, r6, #16
10015a4e:	2210      	movs	r2, #16
10015a50:	0e36      	lsrs	r6, r6, #24
10015a52:	481b      	ldr	r0, [pc, #108]	; (10015ac0 <gapc_connection_cfm_handler+0xbc>)
10015a54:	76a3      	strb	r3, [r4, #26]
10015a56:	76e6      	strb	r6, [r4, #27]
10015a58:	47b8      	blx	r7
10015a5a:	1c23      	adds	r3, r4, #0
10015a5c:	332c      	adds	r3, #44	; 0x2c
10015a5e:	701d      	strb	r5, [r3, #0]
10015a60:	1c23      	adds	r3, r4, #0
10015a62:	0a2a      	lsrs	r2, r5, #8
10015a64:	332d      	adds	r3, #45	; 0x2d
10015a66:	701a      	strb	r2, [r3, #0]
10015a68:	1c23      	adds	r3, r4, #0
10015a6a:	0c2a      	lsrs	r2, r5, #16
10015a6c:	332e      	adds	r3, #46	; 0x2e
10015a6e:	701a      	strb	r2, [r3, #0]
10015a70:	1c23      	adds	r3, r4, #0
10015a72:	0e2d      	lsrs	r5, r5, #24
10015a74:	332f      	adds	r3, #47	; 0x2f
10015a76:	466a      	mov	r2, sp
10015a78:	701d      	strb	r5, [r3, #0]
10015a7a:	1c23      	adds	r3, r4, #0
10015a7c:	7a12      	ldrb	r2, [r2, #8]
10015a7e:	3330      	adds	r3, #48	; 0x30
10015a80:	701a      	strb	r2, [r3, #0]
10015a82:	1c23      	adds	r3, r4, #0
10015a84:	2500      	movs	r5, #0
10015a86:	3331      	adds	r3, #49	; 0x31
10015a88:	466a      	mov	r2, sp
10015a8a:	701d      	strb	r5, [r3, #0]
10015a8c:	1c23      	adds	r3, r4, #0
10015a8e:	7b12      	ldrb	r2, [r2, #12]
10015a90:	3332      	adds	r3, #50	; 0x32
10015a92:	701a      	strb	r2, [r3, #0]
10015a94:	1c23      	adds	r3, r4, #0
10015a96:	3333      	adds	r3, #51	; 0x33
10015a98:	701d      	strb	r5, [r3, #0]
10015a9a:	232c      	movs	r3, #44	; 0x2c
10015a9c:	1c20      	adds	r0, r4, #0
10015a9e:	71a3      	strb	r3, [r4, #6]
10015aa0:	2134      	movs	r1, #52	; 0x34
10015aa2:	4b08      	ldr	r3, [pc, #32]	; (10015ac4 <gapc_connection_cfm_handler+0xc0>)
10015aa4:	71e5      	strb	r5, [r4, #7]
10015aa6:	4798      	blx	r3
10015aa8:	1c28      	adds	r0, r5, #0
10015aaa:	b005      	add	sp, #20
10015aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015aae:	46c0      	nop			; (mov r8, r8)
10015ab0:	1001d27c 	.word	0x1001d27c
10015ab4:	1001cf0c 	.word	0x1001cf0c
10015ab8:	10018e1b 	.word	0x10018e1b
10015abc:	1001d284 	.word	0x1001d284
10015ac0:	1001d298 	.word	0x1001d298
10015ac4:	10015709 	.word	0x10015709

10015ac8 <gapc_con_req_ind>:
10015ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
10015aca:	7845      	ldrb	r5, [r0, #1]
10015acc:	7803      	ldrb	r3, [r0, #0]
10015ace:	4c30      	ldr	r4, [pc, #192]	; (10015b90 <gapc_con_req_ind+0xc8>)
10015ad0:	022d      	lsls	r5, r5, #8
10015ad2:	431d      	orrs	r5, r3
10015ad4:	85a5      	strh	r5, [r4, #44]	; 0x2c
10015ad6:	78c3      	ldrb	r3, [r0, #3]
10015ad8:	7882      	ldrb	r2, [r0, #2]
10015ada:	b08b      	sub	sp, #44	; 0x2c
10015adc:	021b      	lsls	r3, r3, #8
10015ade:	431a      	orrs	r2, r3
10015ae0:	466b      	mov	r3, sp
10015ae2:	9205      	str	r2, [sp, #20]
10015ae4:	8a9b      	ldrh	r3, [r3, #20]
10015ae6:	2120      	movs	r1, #32
10015ae8:	85e3      	strh	r3, [r4, #46]	; 0x2e
10015aea:	7943      	ldrb	r3, [r0, #5]
10015aec:	7902      	ldrb	r2, [r0, #4]
10015aee:	021b      	lsls	r3, r3, #8
10015af0:	431a      	orrs	r2, r3
10015af2:	466b      	mov	r3, sp
10015af4:	9206      	str	r2, [sp, #24]
10015af6:	8b1b      	ldrh	r3, [r3, #24]
10015af8:	1c06      	adds	r6, r0, #0
10015afa:	8623      	strh	r3, [r4, #48]	; 0x30
10015afc:	79c3      	ldrb	r3, [r0, #7]
10015afe:	7982      	ldrb	r2, [r0, #6]
10015b00:	021b      	lsls	r3, r3, #8
10015b02:	431a      	orrs	r2, r3
10015b04:	466b      	mov	r3, sp
10015b06:	9207      	str	r2, [sp, #28]
10015b08:	466a      	mov	r2, sp
10015b0a:	8b9b      	ldrh	r3, [r3, #28]
10015b0c:	1852      	adds	r2, r2, r1
10015b0e:	8663      	strh	r3, [r4, #50]	; 0x32
10015b10:	7a43      	ldrb	r3, [r0, #9]
10015b12:	1c01      	adds	r1, r0, #0
10015b14:	9308      	str	r3, [sp, #32]
10015b16:	1c23      	adds	r3, r4, #0
10015b18:	7812      	ldrb	r2, [r2, #0]
10015b1a:	3377      	adds	r3, #119	; 0x77
10015b1c:	3478      	adds	r4, #120	; 0x78
10015b1e:	701a      	strb	r2, [r3, #0]
10015b20:	310a      	adds	r1, #10
10015b22:	2206      	movs	r2, #6
10015b24:	4b1b      	ldr	r3, [pc, #108]	; (10015b94 <gapc_con_req_ind+0xcc>)
10015b26:	1c20      	adds	r0, r4, #0
10015b28:	4798      	blx	r3
10015b2a:	7c33      	ldrb	r3, [r6, #16]
10015b2c:	9309      	str	r3, [sp, #36]	; 0x24
10015b2e:	4b1a      	ldr	r3, [pc, #104]	; (10015b98 <gapc_con_req_ind+0xd0>)
10015b30:	4798      	blx	r3
10015b32:	4e1a      	ldr	r6, [pc, #104]	; (10015b9c <gapc_con_req_ind+0xd4>)
10015b34:	1e07      	subs	r7, r0, #0
10015b36:	2f07      	cmp	r7, #7
10015b38:	d81b      	bhi.n	10015b72 <gapc_con_req_ind+0xaa>
10015b3a:	2312      	movs	r3, #18
10015b3c:	4343      	muls	r3, r0
10015b3e:	18f0      	adds	r0, r6, r3
10015b40:	8145      	strh	r5, [r0, #10]
10015b42:	4669      	mov	r1, sp
10015b44:	2524      	movs	r5, #36	; 0x24
10015b46:	1949      	adds	r1, r1, r5
10015b48:	7809      	ldrb	r1, [r1, #0]
10015b4a:	2206      	movs	r2, #6
10015b4c:	54f1      	strb	r1, [r6, r3]
10015b4e:	2120      	movs	r1, #32
10015b50:	466b      	mov	r3, sp
10015b52:	185b      	adds	r3, r3, r1
10015b54:	781b      	ldrb	r3, [r3, #0]
10015b56:	1c21      	adds	r1, r4, #0
10015b58:	7043      	strb	r3, [r0, #1]
10015b5a:	466b      	mov	r3, sp
10015b5c:	8a9b      	ldrh	r3, [r3, #20]
10015b5e:	3002      	adds	r0, #2
10015b60:	8143      	strh	r3, [r0, #10]
10015b62:	466b      	mov	r3, sp
10015b64:	8b1b      	ldrh	r3, [r3, #24]
10015b66:	8183      	strh	r3, [r0, #12]
10015b68:	466b      	mov	r3, sp
10015b6a:	8b9b      	ldrh	r3, [r3, #28]
10015b6c:	81c3      	strh	r3, [r0, #14]
10015b6e:	4b09      	ldr	r3, [pc, #36]	; (10015b94 <gapc_con_req_ind+0xcc>)
10015b70:	4798      	blx	r3
10015b72:	2112      	movs	r1, #18
10015b74:	2300      	movs	r3, #0
10015b76:	434f      	muls	r7, r1
10015b78:	9300      	str	r3, [sp, #0]
10015b7a:	9301      	str	r3, [sp, #4]
10015b7c:	19f6      	adds	r6, r6, r7
10015b7e:	8971      	ldrh	r1, [r6, #10]
10015b80:	4a07      	ldr	r2, [pc, #28]	; (10015ba0 <gapc_con_req_ind+0xd8>)
10015b82:	9102      	str	r1, [sp, #8]
10015b84:	1c10      	adds	r0, r2, #0
10015b86:	1c19      	adds	r1, r3, #0
10015b88:	4c06      	ldr	r4, [pc, #24]	; (10015ba4 <gapc_con_req_ind+0xdc>)
10015b8a:	47a0      	blx	r4
10015b8c:	b00b      	add	sp, #44	; 0x2c
10015b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015b90:	1001cf9e 	.word	0x1001cf9e
10015b94:	10018e1b 	.word	0x10018e1b
10015b98:	1001590d 	.word	0x1001590d
10015b9c:	1001cf0e 	.word	0x1001cf0e
10015ba0:	1001c086 	.word	0x1001c086
10015ba4:	10015a05 	.word	0x10015a05

10015ba8 <gapc_disconnect_cmd_handler>:
10015ba8:	2204      	movs	r2, #4
10015baa:	b510      	push	{r4, lr}
10015bac:	4b0c      	ldr	r3, [pc, #48]	; (10015be0 <gapc_disconnect_cmd_handler+0x38>)
10015bae:	2400      	movs	r4, #0
10015bb0:	701a      	strb	r2, [r3, #0]
10015bb2:	320a      	adds	r2, #10
10015bb4:	705a      	strb	r2, [r3, #1]
10015bb6:	709a      	strb	r2, [r3, #2]
10015bb8:	4a0a      	ldr	r2, [pc, #40]	; (10015be4 <gapc_disconnect_cmd_handler+0x3c>)
10015bba:	70d9      	strb	r1, [r3, #3]
10015bbc:	8811      	ldrh	r1, [r2, #0]
10015bbe:	8812      	ldrh	r2, [r2, #0]
10015bc0:	7119      	strb	r1, [r3, #4]
10015bc2:	0a12      	lsrs	r2, r2, #8
10015bc4:	715a      	strb	r2, [r3, #5]
10015bc6:	2201      	movs	r2, #1
10015bc8:	721a      	strb	r2, [r3, #8]
10015bca:	1892      	adds	r2, r2, r2
10015bcc:	7258      	strb	r0, [r3, #9]
10015bce:	719a      	strb	r2, [r3, #6]
10015bd0:	71dc      	strb	r4, [r3, #7]
10015bd2:	1c18      	adds	r0, r3, #0
10015bd4:	210a      	movs	r1, #10
10015bd6:	4b04      	ldr	r3, [pc, #16]	; (10015be8 <gapc_disconnect_cmd_handler+0x40>)
10015bd8:	4798      	blx	r3
10015bda:	1c20      	adds	r0, r4, #0
10015bdc:	bd10      	pop	{r4, pc}
10015bde:	46c0      	nop			; (mov r8, r8)
10015be0:	1001d27c 	.word	0x1001d27c
10015be4:	1001cf0c 	.word	0x1001cf0c
10015be8:	10015709 	.word	0x10015709

10015bec <gapc_disconnect_ind>:
10015bec:	1c02      	adds	r2, r0, #0
10015bee:	b508      	push	{r3, lr}
10015bf0:	7843      	ldrb	r3, [r0, #1]
10015bf2:	7800      	ldrb	r0, [r0, #0]
10015bf4:	021b      	lsls	r3, r3, #8
10015bf6:	4318      	orrs	r0, r3
10015bf8:	8008      	strh	r0, [r1, #0]
10015bfa:	7893      	ldrb	r3, [r2, #2]
10015bfc:	708b      	strb	r3, [r1, #2]
10015bfe:	2100      	movs	r1, #0
10015c00:	4b05      	ldr	r3, [pc, #20]	; (10015c18 <gapc_disconnect_ind+0x2c>)
10015c02:	4798      	blx	r3
10015c04:	2807      	cmp	r0, #7
10015c06:	d806      	bhi.n	10015c16 <gapc_disconnect_ind+0x2a>
10015c08:	2312      	movs	r3, #18
10015c0a:	4358      	muls	r0, r3
10015c0c:	4b03      	ldr	r3, [pc, #12]	; (10015c1c <gapc_disconnect_ind+0x30>)
10015c0e:	1818      	adds	r0, r3, r0
10015c10:	2301      	movs	r3, #1
10015c12:	425b      	negs	r3, r3
10015c14:	8143      	strh	r3, [r0, #10]
10015c16:	bd08      	pop	{r3, pc}
10015c18:	100158d1 	.word	0x100158d1
10015c1c:	1001cf0e 	.word	0x1001cf0e

10015c20 <gapc_bond_cmd_handler>:
10015c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015c22:	9300      	str	r3, [sp, #0]
10015c24:	2312      	movs	r3, #18
10015c26:	1c04      	adds	r4, r0, #0
10015c28:	a808      	add	r0, sp, #32
10015c2a:	7807      	ldrb	r7, [r0, #0]
10015c2c:	a809      	add	r0, sp, #36	; 0x24
10015c2e:	7806      	ldrb	r6, [r0, #0]
10015c30:	a80a      	add	r0, sp, #40	; 0x28
10015c32:	7805      	ldrb	r5, [r0, #0]
10015c34:	a80b      	add	r0, sp, #44	; 0x2c
10015c36:	7800      	ldrb	r0, [r0, #0]
10015c38:	9001      	str	r0, [sp, #4]
10015c3a:	4810      	ldr	r0, [pc, #64]	; (10015c7c <gapc_bond_cmd_handler+0x5c>)
10015c3c:	7003      	strb	r3, [r0, #0]
10015c3e:	230e      	movs	r3, #14
10015c40:	70c4      	strb	r4, [r0, #3]
10015c42:	4c0f      	ldr	r4, [pc, #60]	; (10015c80 <gapc_bond_cmd_handler+0x60>)
10015c44:	7043      	strb	r3, [r0, #1]
10015c46:	7083      	strb	r3, [r0, #2]
10015c48:	8823      	ldrh	r3, [r4, #0]
10015c4a:	8824      	ldrh	r4, [r4, #0]
10015c4c:	7103      	strb	r3, [r0, #4]
10015c4e:	466b      	mov	r3, sp
10015c50:	781b      	ldrb	r3, [r3, #0]
10015c52:	0a24      	lsrs	r4, r4, #8
10015c54:	72c3      	strb	r3, [r0, #11]
10015c56:	466b      	mov	r3, sp
10015c58:	791b      	ldrb	r3, [r3, #4]
10015c5a:	7144      	strb	r4, [r0, #5]
10015c5c:	73c3      	strb	r3, [r0, #15]
10015c5e:	2308      	movs	r3, #8
10015c60:	7183      	strb	r3, [r0, #6]
10015c62:	2300      	movs	r3, #0
10015c64:	240a      	movs	r4, #10
10015c66:	7241      	strb	r1, [r0, #9]
10015c68:	71c3      	strb	r3, [r0, #7]
10015c6a:	2110      	movs	r1, #16
10015c6c:	4b05      	ldr	r3, [pc, #20]	; (10015c84 <gapc_bond_cmd_handler+0x64>)
10015c6e:	7307      	strb	r7, [r0, #12]
10015c70:	7346      	strb	r6, [r0, #13]
10015c72:	7385      	strb	r5, [r0, #14]
10015c74:	7204      	strb	r4, [r0, #8]
10015c76:	7282      	strb	r2, [r0, #10]
10015c78:	4798      	blx	r3
10015c7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015c7c:	1001d27c 	.word	0x1001d27c
10015c80:	1001cf0c 	.word	0x1001cf0c
10015c84:	10015709 	.word	0x10015709

10015c88 <gapc_bond_ind>:
10015c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015c8a:	780e      	ldrb	r6, [r1, #0]
10015c8c:	1c03      	adds	r3, r0, #0
10015c8e:	1eb0      	subs	r0, r6, #2
10015c90:	2805      	cmp	r0, #5
10015c92:	d85d      	bhi.n	10015d50 <gapc_bond_ind+0xc8>
10015c94:	1c15      	adds	r5, r2, #0
10015c96:	1c0c      	adds	r4, r1, #0
10015c98:	f001 f9fa 	bl	10017090 <__gnu_thumb1_case_uqi>
10015c9c:	2f5a030d 	.word	0x2f5a030d
10015ca0:	4740      	.short	0x4740
10015ca2:	2009      	movs	r0, #9
10015ca4:	2a00      	cmp	r2, #0
10015ca6:	d054      	beq.n	10015d52 <gapc_bond_ind+0xca>
10015ca8:	0a1b      	lsrs	r3, r3, #8
10015caa:	8053      	strh	r3, [r2, #2]
10015cac:	788b      	ldrb	r3, [r1, #2]
10015cae:	4829      	ldr	r0, [pc, #164]	; (10015d54 <gapc_bond_ind+0xcc>)
10015cb0:	7113      	strb	r3, [r2, #4]
10015cb2:	2100      	movs	r1, #0
10015cb4:	e01c      	b.n	10015cf0 <gapc_bond_ind+0x68>
10015cb6:	2009      	movs	r0, #9
10015cb8:	2a00      	cmp	r2, #0
10015cba:	d04a      	beq.n	10015d52 <gapc_bond_ind+0xca>
10015cbc:	4c25      	ldr	r4, [pc, #148]	; (10015d54 <gapc_bond_ind+0xcc>)
10015cbe:	0a1b      	lsrs	r3, r3, #8
10015cc0:	8053      	strh	r3, [r2, #2]
10015cc2:	788b      	ldrb	r3, [r1, #2]
10015cc4:	2700      	movs	r7, #0
10015cc6:	1c10      	adds	r0, r2, #0
10015cc8:	1c21      	adds	r1, r4, #0
10015cca:	7013      	strb	r3, [r2, #0]
10015ccc:	4e22      	ldr	r6, [pc, #136]	; (10015d58 <gapc_bond_ind+0xd0>)
10015cce:	7117      	strb	r7, [r2, #4]
10015cd0:	312e      	adds	r1, #46	; 0x2e
10015cd2:	2217      	movs	r2, #23
10015cd4:	3032      	adds	r0, #50	; 0x32
10015cd6:	47b0      	blx	r6
10015cd8:	1c28      	adds	r0, r5, #0
10015cda:	1c21      	adds	r1, r4, #0
10015cdc:	2210      	movs	r2, #16
10015cde:	311e      	adds	r1, #30
10015ce0:	3022      	adds	r0, #34	; 0x22
10015ce2:	47b0      	blx	r6
10015ce4:	1ca1      	adds	r1, r4, #2
10015ce6:	1da8      	adds	r0, r5, #6
10015ce8:	221c      	movs	r2, #28
10015cea:	47b0      	blx	r6
10015cec:	1c20      	adds	r0, r4, #0
10015cee:	1c39      	adds	r1, r7, #0
10015cf0:	2246      	movs	r2, #70	; 0x46
10015cf2:	4b1a      	ldr	r3, [pc, #104]	; (10015d5c <gapc_bond_ind+0xd4>)
10015cf4:	4798      	blx	r3
10015cf6:	2009      	movs	r0, #9
10015cf8:	e02b      	b.n	10015d52 <gapc_bond_ind+0xca>
10015cfa:	4d16      	ldr	r5, [pc, #88]	; (10015d54 <gapc_bond_ind+0xcc>)
10015cfc:	3102      	adds	r1, #2
10015cfe:	1c28      	adds	r0, r5, #0
10015d00:	2210      	movs	r2, #16
10015d02:	4e15      	ldr	r6, [pc, #84]	; (10015d58 <gapc_bond_ind+0xd0>)
10015d04:	302e      	adds	r0, #46	; 0x2e
10015d06:	47b0      	blx	r6
10015d08:	1c28      	adds	r0, r5, #0
10015d0a:	1c21      	adds	r1, r4, #0
10015d0c:	303f      	adds	r0, #63	; 0x3f
10015d0e:	3112      	adds	r1, #18
10015d10:	2206      	movs	r2, #6
10015d12:	47b0      	blx	r6
10015d14:	7e23      	ldrb	r3, [r4, #24]
10015d16:	353e      	adds	r5, #62	; 0x3e
10015d18:	702b      	strb	r3, [r5, #0]
10015d1a:	e019      	b.n	10015d50 <gapc_bond_ind+0xc8>
10015d1c:	480d      	ldr	r0, [pc, #52]	; (10015d54 <gapc_bond_ind+0xcc>)
10015d1e:	3102      	adds	r1, #2
10015d20:	2210      	movs	r2, #16
10015d22:	4b0d      	ldr	r3, [pc, #52]	; (10015d58 <gapc_bond_ind+0xd0>)
10015d24:	301e      	adds	r0, #30
10015d26:	4798      	blx	r3
10015d28:	e012      	b.n	10015d50 <gapc_bond_ind+0xc8>
10015d2a:	4d0a      	ldr	r5, [pc, #40]	; (10015d54 <gapc_bond_ind+0xcc>)
10015d2c:	3102      	adds	r1, #2
10015d2e:	2210      	movs	r2, #16
10015d30:	4e09      	ldr	r6, [pc, #36]	; (10015d58 <gapc_bond_ind+0xd0>)
10015d32:	1ca8      	adds	r0, r5, #2
10015d34:	47b0      	blx	r6
10015d36:	1c28      	adds	r0, r5, #0
10015d38:	1c21      	adds	r1, r4, #0
10015d3a:	7ce3      	ldrb	r3, [r4, #19]
10015d3c:	7ca2      	ldrb	r2, [r4, #18]
10015d3e:	021b      	lsls	r3, r3, #8
10015d40:	4313      	orrs	r3, r2
10015d42:	3014      	adds	r0, #20
10015d44:	3114      	adds	r1, #20
10015d46:	2208      	movs	r2, #8
10015d48:	826b      	strh	r3, [r5, #18]
10015d4a:	47b0      	blx	r6
10015d4c:	7f23      	ldrb	r3, [r4, #28]
10015d4e:	772b      	strb	r3, [r5, #28]
10015d50:	2000      	movs	r0, #0
10015d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015d54:	1001c040 	.word	0x1001c040
10015d58:	10018e1b 	.word	0x10018e1b
10015d5c:	10018e2d 	.word	0x10018e2d

10015d60 <gapc_bond_req_ind>:
10015d60:	b570      	push	{r4, r5, r6, lr}
10015d62:	780c      	ldrb	r4, [r1, #0]
10015d64:	1c03      	adds	r3, r0, #0
10015d66:	7849      	ldrb	r1, [r1, #1]
10015d68:	2c07      	cmp	r4, #7
10015d6a:	d85c      	bhi.n	10015e26 <gapc_bond_req_ind+0xc6>
10015d6c:	1c20      	adds	r0, r4, #0
10015d6e:	f001 f98f 	bl	10017090 <__gnu_thumb1_case_uqi>
10015d72:	5a04      	.short	0x5a04
10015d74:	5a0b5a5a 	.word	0x5a0b5a5a
10015d78:	1f1f      	.short	0x1f1f
10015d7a:	200a      	movs	r0, #10
10015d7c:	2a00      	cmp	r2, #0
10015d7e:	d053      	beq.n	10015e28 <gapc_bond_req_ind+0xc8>
10015d80:	0a1b      	lsrs	r3, r3, #8
10015d82:	8013      	strh	r3, [r2, #0]
10015d84:	7091      	strb	r1, [r2, #2]
10015d86:	e04f      	b.n	10015e28 <gapc_bond_req_ind+0xc8>
10015d88:	2a00      	cmp	r2, #0
10015d8a:	d00b      	beq.n	10015da4 <gapc_bond_req_ind+0x44>
10015d8c:	0a1b      	lsrs	r3, r3, #8
10015d8e:	8013      	strh	r3, [r2, #0]
10015d90:	2900      	cmp	r1, #0
10015d92:	d102      	bne.n	10015d9a <gapc_bond_req_ind+0x3a>
10015d94:	2301      	movs	r3, #1
10015d96:	7093      	strb	r3, [r2, #2]
10015d98:	e004      	b.n	10015da4 <gapc_bond_req_ind+0x44>
10015d9a:	2300      	movs	r3, #0
10015d9c:	7093      	strb	r3, [r2, #2]
10015d9e:	2902      	cmp	r1, #2
10015da0:	d102      	bne.n	10015da8 <gapc_bond_req_ind+0x48>
10015da2:	70d3      	strb	r3, [r2, #3]
10015da4:	200c      	movs	r0, #12
10015da6:	e03f      	b.n	10015e28 <gapc_bond_req_ind+0xc8>
10015da8:	2901      	cmp	r1, #1
10015daa:	d1fb      	bne.n	10015da4 <gapc_bond_req_ind+0x44>
10015dac:	70d1      	strb	r1, [r2, #3]
10015dae:	e7f9      	b.n	10015da4 <gapc_bond_req_ind+0x44>
10015db0:	2214      	movs	r2, #20
10015db2:	481e      	ldr	r0, [pc, #120]	; (10015e2c <gapc_bond_req_ind+0xcc>)
10015db4:	0a1b      	lsrs	r3, r3, #8
10015db6:	70c3      	strb	r3, [r0, #3]
10015db8:	4b1d      	ldr	r3, [pc, #116]	; (10015e30 <gapc_bond_req_ind+0xd0>)
10015dba:	7002      	strb	r2, [r0, #0]
10015dbc:	3a06      	subs	r2, #6
10015dbe:	7042      	strb	r2, [r0, #1]
10015dc0:	7082      	strb	r2, [r0, #2]
10015dc2:	881a      	ldrh	r2, [r3, #0]
10015dc4:	881b      	ldrh	r3, [r3, #0]
10015dc6:	4e1b      	ldr	r6, [pc, #108]	; (10015e34 <gapc_bond_req_ind+0xd4>)
10015dc8:	0a1b      	lsrs	r3, r3, #8
10015dca:	7143      	strb	r3, [r0, #5]
10015dcc:	2301      	movs	r3, #1
10015dce:	7102      	strb	r2, [r0, #4]
10015dd0:	7204      	strb	r4, [r0, #8]
10015dd2:	7243      	strb	r3, [r0, #9]
10015dd4:	1c05      	adds	r5, r0, #0
10015dd6:	1c31      	adds	r1, r6, #0
10015dd8:	300a      	adds	r0, #10
10015dda:	2c07      	cmp	r4, #7
10015ddc:	d116      	bne.n	10015e0c <gapc_bond_req_ind+0xac>
10015dde:	317e      	adds	r1, #126	; 0x7e
10015de0:	2210      	movs	r2, #16
10015de2:	4c15      	ldr	r4, [pc, #84]	; (10015e38 <gapc_bond_req_ind+0xd8>)
10015de4:	47a0      	blx	r4
10015de6:	1c33      	adds	r3, r6, #0
10015de8:	1c31      	adds	r1, r6, #0
10015dea:	1c28      	adds	r0, r5, #0
10015dec:	338e      	adds	r3, #142	; 0x8e
10015dee:	881b      	ldrh	r3, [r3, #0]
10015df0:	3190      	adds	r1, #144	; 0x90
10015df2:	76ab      	strb	r3, [r5, #26]
10015df4:	2208      	movs	r2, #8
10015df6:	0a1b      	lsrs	r3, r3, #8
10015df8:	301c      	adds	r0, #28
10015dfa:	76eb      	strb	r3, [r5, #27]
10015dfc:	47a0      	blx	r4
10015dfe:	1c31      	adds	r1, r6, #0
10015e00:	3198      	adds	r1, #152	; 0x98
10015e02:	780a      	ldrb	r2, [r1, #0]
10015e04:	1d6b      	adds	r3, r5, #5
10015e06:	77da      	strb	r2, [r3, #31]
10015e08:	2125      	movs	r1, #37	; 0x25
10015e0a:	e004      	b.n	10015e16 <gapc_bond_req_ind+0xb6>
10015e0c:	319a      	adds	r1, #154	; 0x9a
10015e0e:	2210      	movs	r2, #16
10015e10:	4b09      	ldr	r3, [pc, #36]	; (10015e38 <gapc_bond_req_ind+0xd8>)
10015e12:	4798      	blx	r3
10015e14:	211a      	movs	r1, #26
10015e16:	1c0b      	adds	r3, r1, #0
10015e18:	2400      	movs	r4, #0
10015e1a:	3b08      	subs	r3, #8
10015e1c:	71ab      	strb	r3, [r5, #6]
10015e1e:	1c28      	adds	r0, r5, #0
10015e20:	4b06      	ldr	r3, [pc, #24]	; (10015e3c <gapc_bond_req_ind+0xdc>)
10015e22:	71ec      	strb	r4, [r5, #7]
10015e24:	4798      	blx	r3
10015e26:	2000      	movs	r0, #0
10015e28:	bd70      	pop	{r4, r5, r6, pc}
10015e2a:	46c0      	nop			; (mov r8, r8)
10015e2c:	1001d27c 	.word	0x1001d27c
10015e30:	1001cf0c 	.word	0x1001cf0c
10015e34:	1001cf9e 	.word	0x1001cf9e
10015e38:	10018e1b 	.word	0x10018e1b
10015e3c:	10015709 	.word	0x10015709

10015e40 <gapc_bond_cfm_handler_pair_resp>:
10015e40:	b5f0      	push	{r4, r5, r6, r7, lr}
10015e42:	b085      	sub	sp, #20
10015e44:	1c07      	adds	r7, r0, #0
10015e46:	a80a      	add	r0, sp, #40	; 0x28
10015e48:	7806      	ldrb	r6, [r0, #0]
10015e4a:	a80b      	add	r0, sp, #44	; 0x2c
10015e4c:	7805      	ldrb	r5, [r0, #0]
10015e4e:	a80c      	add	r0, sp, #48	; 0x30
10015e50:	7800      	ldrb	r0, [r0, #0]
10015e52:	2414      	movs	r4, #20
10015e54:	9002      	str	r0, [sp, #8]
10015e56:	a80d      	add	r0, sp, #52	; 0x34
10015e58:	7800      	ldrb	r0, [r0, #0]
10015e5a:	9301      	str	r3, [sp, #4]
10015e5c:	9003      	str	r0, [sp, #12]
10015e5e:	a80e      	add	r0, sp, #56	; 0x38
10015e60:	8800      	ldrh	r0, [r0, #0]
10015e62:	4684      	mov	ip, r0
10015e64:	4812      	ldr	r0, [pc, #72]	; (10015eb0 <gapc_bond_cfm_handler_pair_resp+0x70>)
10015e66:	7004      	strb	r4, [r0, #0]
10015e68:	3c06      	subs	r4, #6
10015e6a:	7044      	strb	r4, [r0, #1]
10015e6c:	7084      	strb	r4, [r0, #2]
10015e6e:	4664      	mov	r4, ip
10015e70:	70c4      	strb	r4, [r0, #3]
10015e72:	4c10      	ldr	r4, [pc, #64]	; (10015eb4 <gapc_bond_cfm_handler_pair_resp+0x74>)
10015e74:	7247      	strb	r7, [r0, #9]
10015e76:	8823      	ldrh	r3, [r4, #0]
10015e78:	8824      	ldrh	r4, [r4, #0]
10015e7a:	7103      	strb	r3, [r0, #4]
10015e7c:	466b      	mov	r3, sp
10015e7e:	791b      	ldrb	r3, [r3, #4]
10015e80:	0a24      	lsrs	r4, r4, #8
10015e82:	7303      	strb	r3, [r0, #12]
10015e84:	466b      	mov	r3, sp
10015e86:	7a1b      	ldrb	r3, [r3, #8]
10015e88:	7144      	strb	r4, [r0, #5]
10015e8a:	73c3      	strb	r3, [r0, #15]
10015e8c:	466b      	mov	r3, sp
10015e8e:	7b1b      	ldrb	r3, [r3, #12]
10015e90:	2401      	movs	r4, #1
10015e92:	7403      	strb	r3, [r0, #16]
10015e94:	2309      	movs	r3, #9
10015e96:	7183      	strb	r3, [r0, #6]
10015e98:	2300      	movs	r3, #0
10015e9a:	7204      	strb	r4, [r0, #8]
10015e9c:	7281      	strb	r1, [r0, #10]
10015e9e:	72c2      	strb	r2, [r0, #11]
10015ea0:	7346      	strb	r6, [r0, #13]
10015ea2:	7385      	strb	r5, [r0, #14]
10015ea4:	71c3      	strb	r3, [r0, #7]
10015ea6:	2111      	movs	r1, #17
10015ea8:	4b03      	ldr	r3, [pc, #12]	; (10015eb8 <gapc_bond_cfm_handler_pair_resp+0x78>)
10015eaa:	4798      	blx	r3
10015eac:	b005      	add	sp, #20
10015eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015eb0:	1001d27c 	.word	0x1001d27c
10015eb4:	1001cf0c 	.word	0x1001cf0c
10015eb8:	10015709 	.word	0x10015709

10015ebc <gapc_bond_cfm_handler_key_exch>:
10015ebc:	b538      	push	{r3, r4, r5, lr}
10015ebe:	2514      	movs	r5, #20
10015ec0:	4c0d      	ldr	r4, [pc, #52]	; (10015ef8 <gapc_bond_cfm_handler_key_exch+0x3c>)
10015ec2:	70e3      	strb	r3, [r4, #3]
10015ec4:	4b0d      	ldr	r3, [pc, #52]	; (10015efc <gapc_bond_cfm_handler_key_exch+0x40>)
10015ec6:	7025      	strb	r5, [r4, #0]
10015ec8:	3d06      	subs	r5, #6
10015eca:	7065      	strb	r5, [r4, #1]
10015ecc:	70a5      	strb	r5, [r4, #2]
10015ece:	881d      	ldrh	r5, [r3, #0]
10015ed0:	881b      	ldrh	r3, [r3, #0]
10015ed2:	7220      	strb	r0, [r4, #8]
10015ed4:	0a1b      	lsrs	r3, r3, #8
10015ed6:	7163      	strb	r3, [r4, #5]
10015ed8:	7261      	strb	r1, [r4, #9]
10015eda:	4b09      	ldr	r3, [pc, #36]	; (10015f00 <gapc_bond_cfm_handler_key_exch+0x44>)
10015edc:	1c11      	adds	r1, r2, #0
10015ede:	4809      	ldr	r0, [pc, #36]	; (10015f04 <gapc_bond_cfm_handler_key_exch+0x48>)
10015ee0:	2210      	movs	r2, #16
10015ee2:	7125      	strb	r5, [r4, #4]
10015ee4:	4798      	blx	r3
10015ee6:	2312      	movs	r3, #18
10015ee8:	71a3      	strb	r3, [r4, #6]
10015eea:	2300      	movs	r3, #0
10015eec:	1c20      	adds	r0, r4, #0
10015eee:	71e3      	strb	r3, [r4, #7]
10015ef0:	211a      	movs	r1, #26
10015ef2:	4b05      	ldr	r3, [pc, #20]	; (10015f08 <gapc_bond_cfm_handler_key_exch+0x4c>)
10015ef4:	4798      	blx	r3
10015ef6:	bd38      	pop	{r3, r4, r5, pc}
10015ef8:	1001d27c 	.word	0x1001d27c
10015efc:	1001cf0c 	.word	0x1001cf0c
10015f00:	10018e1b 	.word	0x10018e1b
10015f04:	1001d286 	.word	0x1001d286
10015f08:	10015709 	.word	0x10015709

10015f0c <gapc_security_cmd_handler>:
10015f0c:	221a      	movs	r2, #26
10015f0e:	b508      	push	{r3, lr}
10015f10:	4b0b      	ldr	r3, [pc, #44]	; (10015f40 <gapc_security_cmd_handler+0x34>)
10015f12:	701a      	strb	r2, [r3, #0]
10015f14:	3a0c      	subs	r2, #12
10015f16:	705a      	strb	r2, [r3, #1]
10015f18:	709a      	strb	r2, [r3, #2]
10015f1a:	4a0a      	ldr	r2, [pc, #40]	; (10015f44 <gapc_security_cmd_handler+0x38>)
10015f1c:	70d8      	strb	r0, [r3, #3]
10015f1e:	8810      	ldrh	r0, [r2, #0]
10015f20:	8812      	ldrh	r2, [r2, #0]
10015f22:	7118      	strb	r0, [r3, #4]
10015f24:	0a12      	lsrs	r2, r2, #8
10015f26:	715a      	strb	r2, [r3, #5]
10015f28:	220c      	movs	r2, #12
10015f2a:	721a      	strb	r2, [r3, #8]
10015f2c:	3a0a      	subs	r2, #10
10015f2e:	719a      	strb	r2, [r3, #6]
10015f30:	2200      	movs	r2, #0
10015f32:	7259      	strb	r1, [r3, #9]
10015f34:	71da      	strb	r2, [r3, #7]
10015f36:	1c18      	adds	r0, r3, #0
10015f38:	210a      	movs	r1, #10
10015f3a:	4b03      	ldr	r3, [pc, #12]	; (10015f48 <gapc_security_cmd_handler+0x3c>)
10015f3c:	4798      	blx	r3
10015f3e:	bd08      	pop	{r3, pc}
10015f40:	1001d27c 	.word	0x1001d27c
10015f44:	1001cf0c 	.word	0x1001cf0c
10015f48:	10015709 	.word	0x10015709

10015f4c <gapc_encrypt_cmd_handler>:
10015f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10015f4e:	2500      	movs	r5, #0
10015f50:	b089      	sub	sp, #36	; 0x24
10015f52:	9306      	str	r3, [sp, #24]
10015f54:	ab0e      	add	r3, sp, #56	; 0x38
10015f56:	781b      	ldrb	r3, [r3, #0]
10015f58:	1c17      	adds	r7, r2, #0
10015f5a:	9307      	str	r3, [sp, #28]
10015f5c:	ab0f      	add	r3, sp, #60	; 0x3c
10015f5e:	781b      	ldrb	r3, [r3, #0]
10015f60:	4a19      	ldr	r2, [pc, #100]	; (10015fc8 <gapc_encrypt_cmd_handler+0x7c>)
10015f62:	1c06      	adds	r6, r0, #0
10015f64:	9105      	str	r1, [sp, #20]
10015f66:	9300      	str	r3, [sp, #0]
10015f68:	9002      	str	r0, [sp, #8]
10015f6a:	1c29      	adds	r1, r5, #0
10015f6c:	1c2b      	adds	r3, r5, #0
10015f6e:	9501      	str	r5, [sp, #4]
10015f70:	1c10      	adds	r0, r2, #0
10015f72:	4c16      	ldr	r4, [pc, #88]	; (10015fcc <gapc_encrypt_cmd_handler+0x80>)
10015f74:	47a0      	blx	r4
10015f76:	2316      	movs	r3, #22
10015f78:	4c15      	ldr	r4, [pc, #84]	; (10015fd0 <gapc_encrypt_cmd_handler+0x84>)
10015f7a:	9905      	ldr	r1, [sp, #20]
10015f7c:	7023      	strb	r3, [r4, #0]
10015f7e:	3b08      	subs	r3, #8
10015f80:	7063      	strb	r3, [r4, #1]
10015f82:	70a3      	strb	r3, [r4, #2]
10015f84:	4b13      	ldr	r3, [pc, #76]	; (10015fd4 <gapc_encrypt_cmd_handler+0x88>)
10015f86:	70e6      	strb	r6, [r4, #3]
10015f88:	881a      	ldrh	r2, [r3, #0]
10015f8a:	881b      	ldrh	r3, [r3, #0]
10015f8c:	7122      	strb	r2, [r4, #4]
10015f8e:	0a1b      	lsrs	r3, r3, #8
10015f90:	7163      	strb	r3, [r4, #5]
10015f92:	230b      	movs	r3, #11
10015f94:	4e10      	ldr	r6, [pc, #64]	; (10015fd8 <gapc_encrypt_cmd_handler+0x8c>)
10015f96:	2210      	movs	r2, #16
10015f98:	4810      	ldr	r0, [pc, #64]	; (10015fdc <gapc_encrypt_cmd_handler+0x90>)
10015f9a:	7223      	strb	r3, [r4, #8]
10015f9c:	7265      	strb	r5, [r4, #9]
10015f9e:	47b0      	blx	r6
10015fa0:	0a3b      	lsrs	r3, r7, #8
10015fa2:	9906      	ldr	r1, [sp, #24]
10015fa4:	2208      	movs	r2, #8
10015fa6:	480e      	ldr	r0, [pc, #56]	; (10015fe0 <gapc_encrypt_cmd_handler+0x94>)
10015fa8:	76e3      	strb	r3, [r4, #27]
10015faa:	76a7      	strb	r7, [r4, #26]
10015fac:	47b0      	blx	r6
10015fae:	466a      	mov	r2, sp
10015fb0:	7f12      	ldrb	r2, [r2, #28]
10015fb2:	1d63      	adds	r3, r4, #5
10015fb4:	77da      	strb	r2, [r3, #31]
10015fb6:	231d      	movs	r3, #29
10015fb8:	1c20      	adds	r0, r4, #0
10015fba:	71a3      	strb	r3, [r4, #6]
10015fbc:	2125      	movs	r1, #37	; 0x25
10015fbe:	4b09      	ldr	r3, [pc, #36]	; (10015fe4 <gapc_encrypt_cmd_handler+0x98>)
10015fc0:	71e5      	strb	r5, [r4, #7]
10015fc2:	4798      	blx	r3
10015fc4:	b009      	add	sp, #36	; 0x24
10015fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015fc8:	1001c020 	.word	0x1001c020
10015fcc:	10015a05 	.word	0x10015a05
10015fd0:	1001d27c 	.word	0x1001d27c
10015fd4:	1001cf0c 	.word	0x1001cf0c
10015fd8:	10018e1b 	.word	0x10018e1b
10015fdc:	1001d286 	.word	0x1001d286
10015fe0:	1001d298 	.word	0x1001d298
10015fe4:	10015709 	.word	0x10015709

10015fe8 <gapc_encrypt_req_ind>:
10015fe8:	b508      	push	{r3, lr}
10015fea:	0a00      	lsrs	r0, r0, #8
10015fec:	8010      	strh	r0, [r2, #0]
10015fee:	784b      	ldrb	r3, [r1, #1]
10015ff0:	7808      	ldrb	r0, [r1, #0]
10015ff2:	021b      	lsls	r3, r3, #8
10015ff4:	4303      	orrs	r3, r0
10015ff6:	8053      	strh	r3, [r2, #2]
10015ff8:	1d10      	adds	r0, r2, #4
10015ffa:	3102      	adds	r1, #2
10015ffc:	2208      	movs	r2, #8
10015ffe:	4b01      	ldr	r3, [pc, #4]	; (10016004 <gapc_encrypt_req_ind+0x1c>)
10016000:	4798      	blx	r3
10016002:	bd08      	pop	{r3, pc}
10016004:	10018e1b 	.word	0x10018e1b

10016008 <gapc_encrypt_cfm_handler>:
10016008:	b5f0      	push	{r4, r5, r6, r7, lr}
1001600a:	2500      	movs	r5, #0
1001600c:	b087      	sub	sp, #28
1001600e:	9304      	str	r3, [sp, #16]
10016010:	ab0c      	add	r3, sp, #48	; 0x30
10016012:	781b      	ldrb	r3, [r3, #0]
10016014:	1c17      	adds	r7, r2, #0
10016016:	4a15      	ldr	r2, [pc, #84]	; (1001606c <gapc_encrypt_cfm_handler+0x64>)
10016018:	1c06      	adds	r6, r0, #0
1001601a:	9305      	str	r3, [sp, #20]
1001601c:	9100      	str	r1, [sp, #0]
1001601e:	9002      	str	r0, [sp, #8]
10016020:	1c29      	adds	r1, r5, #0
10016022:	1c2b      	adds	r3, r5, #0
10016024:	9501      	str	r5, [sp, #4]
10016026:	1c10      	adds	r0, r2, #0
10016028:	4c11      	ldr	r4, [pc, #68]	; (10016070 <gapc_encrypt_cfm_handler+0x68>)
1001602a:	47a0      	blx	r4
1001602c:	2318      	movs	r3, #24
1001602e:	4c11      	ldr	r4, [pc, #68]	; (10016074 <gapc_encrypt_cfm_handler+0x6c>)
10016030:	9904      	ldr	r1, [sp, #16]
10016032:	7023      	strb	r3, [r4, #0]
10016034:	3b0a      	subs	r3, #10
10016036:	7063      	strb	r3, [r4, #1]
10016038:	70a3      	strb	r3, [r4, #2]
1001603a:	4b0f      	ldr	r3, [pc, #60]	; (10016078 <gapc_encrypt_cfm_handler+0x70>)
1001603c:	480f      	ldr	r0, [pc, #60]	; (1001607c <gapc_encrypt_cfm_handler+0x74>)
1001603e:	881a      	ldrh	r2, [r3, #0]
10016040:	881b      	ldrh	r3, [r3, #0]
10016042:	7122      	strb	r2, [r4, #4]
10016044:	0a1b      	lsrs	r3, r3, #8
10016046:	7163      	strb	r3, [r4, #5]
10016048:	2210      	movs	r2, #16
1001604a:	4b0d      	ldr	r3, [pc, #52]	; (10016080 <gapc_encrypt_cfm_handler+0x78>)
1001604c:	70e6      	strb	r6, [r4, #3]
1001604e:	7227      	strb	r7, [r4, #8]
10016050:	4798      	blx	r3
10016052:	466b      	mov	r3, sp
10016054:	7d1b      	ldrb	r3, [r3, #20]
10016056:	1c20      	adds	r0, r4, #0
10016058:	7663      	strb	r3, [r4, #25]
1001605a:	2312      	movs	r3, #18
1001605c:	211a      	movs	r1, #26
1001605e:	71a3      	strb	r3, [r4, #6]
10016060:	4b08      	ldr	r3, [pc, #32]	; (10016084 <gapc_encrypt_cfm_handler+0x7c>)
10016062:	71e5      	strb	r5, [r4, #7]
10016064:	4798      	blx	r3
10016066:	b007      	add	sp, #28
10016068:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001606a:	46c0      	nop			; (mov r8, r8)
1001606c:	1001c030 	.word	0x1001c030
10016070:	10015a05 	.word	0x10015a05
10016074:	1001d27c 	.word	0x1001d27c
10016078:	1001cf0c 	.word	0x1001cf0c
1001607c:	1001d285 	.word	0x1001d285
10016080:	10018e1b 	.word	0x10018e1b
10016084:	10015709 	.word	0x10015709

10016088 <gapc_encrypt_ind>:
10016088:	780b      	ldrb	r3, [r1, #0]
1001608a:	0a00      	lsrs	r0, r0, #8
1001608c:	70d3      	strb	r3, [r2, #3]
1001608e:	2300      	movs	r3, #0
10016090:	8010      	strh	r0, [r2, #0]
10016092:	7093      	strb	r3, [r2, #2]
10016094:	4770      	bx	lr
	...

10016098 <gapc_param_update_cfm_handler>:
10016098:	b538      	push	{r3, r4, r5, lr}
1001609a:	2410      	movs	r4, #16
1001609c:	1c05      	adds	r5, r0, #0
1001609e:	480e      	ldr	r0, [pc, #56]	; (100160d8 <gapc_param_update_cfm_handler+0x40>)
100160a0:	7004      	strb	r4, [r0, #0]
100160a2:	3c02      	subs	r4, #2
100160a4:	7044      	strb	r4, [r0, #1]
100160a6:	7084      	strb	r4, [r0, #2]
100160a8:	4c0c      	ldr	r4, [pc, #48]	; (100160dc <gapc_param_update_cfm_handler+0x44>)
100160aa:	70c5      	strb	r5, [r0, #3]
100160ac:	8825      	ldrh	r5, [r4, #0]
100160ae:	8824      	ldrh	r4, [r4, #0]
100160b0:	72c3      	strb	r3, [r0, #11]
100160b2:	0a1b      	lsrs	r3, r3, #8
100160b4:	0a24      	lsrs	r4, r4, #8
100160b6:	7303      	strb	r3, [r0, #12]
100160b8:	2305      	movs	r3, #5
100160ba:	7144      	strb	r4, [r0, #5]
100160bc:	2400      	movs	r4, #0
100160be:	7201      	strb	r1, [r0, #8]
100160c0:	7242      	strb	r2, [r0, #9]
100160c2:	7183      	strb	r3, [r0, #6]
100160c4:	0a12      	lsrs	r2, r2, #8
100160c6:	210d      	movs	r1, #13
100160c8:	4b05      	ldr	r3, [pc, #20]	; (100160e0 <gapc_param_update_cfm_handler+0x48>)
100160ca:	7105      	strb	r5, [r0, #4]
100160cc:	7282      	strb	r2, [r0, #10]
100160ce:	71c4      	strb	r4, [r0, #7]
100160d0:	4798      	blx	r3
100160d2:	1c20      	adds	r0, r4, #0
100160d4:	bd38      	pop	{r3, r4, r5, pc}
100160d6:	46c0      	nop			; (mov r8, r8)
100160d8:	1001d27c 	.word	0x1001d27c
100160dc:	1001cf0c 	.word	0x1001cf0c
100160e0:	10015709 	.word	0x10015709

100160e4 <gapc_param_updated_ind>:
100160e4:	2300      	movs	r3, #0
100160e6:	0a00      	lsrs	r0, r0, #8
100160e8:	8010      	strh	r0, [r2, #0]
100160ea:	7093      	strb	r3, [r2, #2]
100160ec:	784b      	ldrb	r3, [r1, #1]
100160ee:	7808      	ldrb	r0, [r1, #0]
100160f0:	021b      	lsls	r3, r3, #8
100160f2:	4303      	orrs	r3, r0
100160f4:	8093      	strh	r3, [r2, #4]
100160f6:	78cb      	ldrb	r3, [r1, #3]
100160f8:	7888      	ldrb	r0, [r1, #2]
100160fa:	021b      	lsls	r3, r3, #8
100160fc:	4303      	orrs	r3, r0
100160fe:	80d3      	strh	r3, [r2, #6]
10016100:	794b      	ldrb	r3, [r1, #5]
10016102:	7909      	ldrb	r1, [r1, #4]
10016104:	021b      	lsls	r3, r3, #8
10016106:	430b      	orrs	r3, r1
10016108:	2007      	movs	r0, #7
1001610a:	8113      	strh	r3, [r2, #8]
1001610c:	4770      	bx	lr

1001610e <gapc_param_updated_req_ind>:
1001610e:	0a00      	lsrs	r0, r0, #8
10016110:	8010      	strh	r0, [r2, #0]
10016112:	784b      	ldrb	r3, [r1, #1]
10016114:	7808      	ldrb	r0, [r1, #0]
10016116:	021b      	lsls	r3, r3, #8
10016118:	4303      	orrs	r3, r0
1001611a:	8053      	strh	r3, [r2, #2]
1001611c:	78cb      	ldrb	r3, [r1, #3]
1001611e:	7888      	ldrb	r0, [r1, #2]
10016120:	021b      	lsls	r3, r3, #8
10016122:	4303      	orrs	r3, r0
10016124:	8093      	strh	r3, [r2, #4]
10016126:	794b      	ldrb	r3, [r1, #5]
10016128:	7908      	ldrb	r0, [r1, #4]
1001612a:	021b      	lsls	r3, r3, #8
1001612c:	4303      	orrs	r3, r0
1001612e:	80d3      	strh	r3, [r2, #6]
10016130:	79cb      	ldrb	r3, [r1, #7]
10016132:	7989      	ldrb	r1, [r1, #6]
10016134:	021b      	lsls	r3, r3, #8
10016136:	430b      	orrs	r3, r1
10016138:	2008      	movs	r0, #8
1001613a:	8113      	strh	r3, [r2, #8]
1001613c:	4770      	bx	lr
	...

10016140 <gapc_dev_info_req_ind_handler>:
10016140:	b508      	push	{r3, lr}
10016142:	1c0b      	adds	r3, r1, #0
10016144:	0a01      	lsrs	r1, r0, #8
10016146:	8011      	strh	r1, [r2, #0]
10016148:	7818      	ldrb	r0, [r3, #0]
1001614a:	7090      	strb	r0, [r2, #2]
1001614c:	2800      	cmp	r0, #0
1001614e:	d104      	bne.n	1001615a <gapc_dev_info_req_ind_handler+0x1a>
10016150:	4b03      	ldr	r3, [pc, #12]	; (10016160 <gapc_dev_info_req_ind_handler+0x20>)
10016152:	33aa      	adds	r3, #170	; 0xaa
10016154:	881b      	ldrh	r3, [r3, #0]
10016156:	2b00      	cmp	r3, #0
10016158:	d001      	beq.n	1001615e <gapc_dev_info_req_ind_handler+0x1e>
1001615a:	4b02      	ldr	r3, [pc, #8]	; (10016164 <gapc_dev_info_req_ind_handler+0x24>)
1001615c:	4798      	blx	r3
1001615e:	bd08      	pop	{r3, pc}
10016160:	1001cf9e 	.word	0x1001cf9e
10016164:	10015811 	.word	0x10015811

10016168 <gapc_sec_req_ind>:
10016168:	0a00      	lsrs	r0, r0, #8
1001616a:	8010      	strh	r0, [r2, #0]
1001616c:	7809      	ldrb	r1, [r1, #0]
1001616e:	2301      	movs	r3, #1
10016170:	1c08      	adds	r0, r1, #0
10016172:	0889      	lsrs	r1, r1, #2
10016174:	4018      	ands	r0, r3
10016176:	400b      	ands	r3, r1
10016178:	70d0      	strb	r0, [r2, #3]
1001617a:	7113      	strb	r3, [r2, #4]
1001617c:	4770      	bx	lr

1001617e <gapc_sign_counter_ind_handler>:
1001617e:	0a00      	lsrs	r0, r0, #8
10016180:	8010      	strh	r0, [r2, #0]
10016182:	784b      	ldrb	r3, [r1, #1]
10016184:	0218      	lsls	r0, r3, #8
10016186:	788b      	ldrb	r3, [r1, #2]
10016188:	041b      	lsls	r3, r3, #16
1001618a:	4303      	orrs	r3, r0
1001618c:	7808      	ldrb	r0, [r1, #0]
1001618e:	4303      	orrs	r3, r0
10016190:	78c8      	ldrb	r0, [r1, #3]
10016192:	0600      	lsls	r0, r0, #24
10016194:	4303      	orrs	r3, r0
10016196:	6053      	str	r3, [r2, #4]
10016198:	794b      	ldrb	r3, [r1, #5]
1001619a:	0218      	lsls	r0, r3, #8
1001619c:	798b      	ldrb	r3, [r1, #6]
1001619e:	041b      	lsls	r3, r3, #16
100161a0:	4303      	orrs	r3, r0
100161a2:	7908      	ldrb	r0, [r1, #4]
100161a4:	79c9      	ldrb	r1, [r1, #7]
100161a6:	4303      	orrs	r3, r0
100161a8:	0609      	lsls	r1, r1, #24
100161aa:	430b      	orrs	r3, r1
100161ac:	2000      	movs	r0, #0
100161ae:	6093      	str	r3, [r2, #8]
100161b0:	4770      	bx	lr
	...

100161b4 <gapc_peer_att_info_ind_handler>:
100161b4:	b510      	push	{r4, lr}
100161b6:	0a00      	lsrs	r0, r0, #8
100161b8:	8010      	strh	r0, [r2, #0]
100161ba:	7808      	ldrb	r0, [r1, #0]
100161bc:	7090      	strb	r0, [r2, #2]
100161be:	788b      	ldrb	r3, [r1, #2]
100161c0:	784c      	ldrb	r4, [r1, #1]
100161c2:	021b      	lsls	r3, r3, #8
100161c4:	4323      	orrs	r3, r4
100161c6:	8093      	strh	r3, [r2, #4]
100161c8:	2801      	cmp	r0, #1
100161ca:	d027      	beq.n	1001621c <gapc_peer_att_info_ind_handler+0x68>
100161cc:	2800      	cmp	r0, #0
100161ce:	d017      	beq.n	10016200 <gapc_peer_att_info_ind_handler+0x4c>
100161d0:	2802      	cmp	r0, #2
100161d2:	d12a      	bne.n	1001622a <gapc_peer_att_info_ind_handler+0x76>
100161d4:	790b      	ldrb	r3, [r1, #4]
100161d6:	78c8      	ldrb	r0, [r1, #3]
100161d8:	021b      	lsls	r3, r3, #8
100161da:	4303      	orrs	r3, r0
100161dc:	8113      	strh	r3, [r2, #8]
100161de:	798b      	ldrb	r3, [r1, #6]
100161e0:	7948      	ldrb	r0, [r1, #5]
100161e2:	021b      	lsls	r3, r3, #8
100161e4:	4303      	orrs	r3, r0
100161e6:	80d3      	strh	r3, [r2, #6]
100161e8:	7a0b      	ldrb	r3, [r1, #8]
100161ea:	79c8      	ldrb	r0, [r1, #7]
100161ec:	021b      	lsls	r3, r3, #8
100161ee:	4303      	orrs	r3, r0
100161f0:	8193      	strh	r3, [r2, #12]
100161f2:	7a8b      	ldrb	r3, [r1, #10]
100161f4:	7a49      	ldrb	r1, [r1, #9]
100161f6:	021b      	lsls	r3, r3, #8
100161f8:	430b      	orrs	r3, r1
100161fa:	8153      	strh	r3, [r2, #10]
100161fc:	2306      	movs	r3, #6
100161fe:	e013      	b.n	10016228 <gapc_peer_att_info_ind_handler+0x74>
10016200:	1c14      	adds	r4, r2, #0
10016202:	1c20      	adds	r0, r4, #0
10016204:	790a      	ldrb	r2, [r1, #4]
10016206:	78cb      	ldrb	r3, [r1, #3]
10016208:	0212      	lsls	r2, r2, #8
1001620a:	431a      	orrs	r2, r3
1001620c:	80e2      	strh	r2, [r4, #6]
1001620e:	4b07      	ldr	r3, [pc, #28]	; (1001622c <gapc_peer_att_info_ind_handler+0x78>)
10016210:	3008      	adds	r0, #8
10016212:	3105      	adds	r1, #5
10016214:	4798      	blx	r3
10016216:	2302      	movs	r3, #2
10016218:	70a3      	strb	r3, [r4, #2]
1001621a:	e006      	b.n	1001622a <gapc_peer_att_info_ind_handler+0x76>
1001621c:	790b      	ldrb	r3, [r1, #4]
1001621e:	78c9      	ldrb	r1, [r1, #3]
10016220:	021b      	lsls	r3, r3, #8
10016222:	430b      	orrs	r3, r1
10016224:	80d3      	strh	r3, [r2, #6]
10016226:	2305      	movs	r3, #5
10016228:	7093      	strb	r3, [r2, #2]
1001622a:	bd10      	pop	{r4, pc}
1001622c:	10018e1b 	.word	0x10018e1b

10016230 <gapc_con_channel_map_ind_handler>:
10016230:	b508      	push	{r3, lr}
10016232:	2300      	movs	r3, #0
10016234:	0a00      	lsrs	r0, r0, #8
10016236:	7013      	strb	r3, [r2, #0]
10016238:	8050      	strh	r0, [r2, #2]
1001623a:	4b02      	ldr	r3, [pc, #8]	; (10016244 <gapc_con_channel_map_ind_handler+0x14>)
1001623c:	1d10      	adds	r0, r2, #4
1001623e:	2205      	movs	r2, #5
10016240:	4798      	blx	r3
10016242:	bd08      	pop	{r3, pc}
10016244:	10018e1b 	.word	0x10018e1b

10016248 <gapc_lecb_connected>:
10016248:	7843      	ldrb	r3, [r0, #1]
1001624a:	7802      	ldrb	r2, [r0, #0]
1001624c:	021b      	lsls	r3, r3, #8
1001624e:	4313      	orrs	r3, r2
10016250:	800b      	strh	r3, [r1, #0]
10016252:	78c3      	ldrb	r3, [r0, #3]
10016254:	7882      	ldrb	r2, [r0, #2]
10016256:	021b      	lsls	r3, r3, #8
10016258:	4313      	orrs	r3, r2
1001625a:	804b      	strh	r3, [r1, #2]
1001625c:	7943      	ldrb	r3, [r0, #5]
1001625e:	7902      	ldrb	r2, [r0, #4]
10016260:	021b      	lsls	r3, r3, #8
10016262:	4313      	orrs	r3, r2
10016264:	808b      	strh	r3, [r1, #4]
10016266:	79c3      	ldrb	r3, [r0, #7]
10016268:	7982      	ldrb	r2, [r0, #6]
1001626a:	021b      	lsls	r3, r3, #8
1001626c:	4313      	orrs	r3, r2
1001626e:	80cb      	strh	r3, [r1, #6]
10016270:	2300      	movs	r3, #0
10016272:	720b      	strb	r3, [r1, #8]
10016274:	4770      	bx	lr

10016276 <gapc_lecb_disconnected>:
10016276:	7843      	ldrb	r3, [r0, #1]
10016278:	7802      	ldrb	r2, [r0, #0]
1001627a:	021b      	lsls	r3, r3, #8
1001627c:	4313      	orrs	r3, r2
1001627e:	800b      	strh	r3, [r1, #0]
10016280:	78c3      	ldrb	r3, [r0, #3]
10016282:	7882      	ldrb	r2, [r0, #2]
10016284:	021b      	lsls	r3, r3, #8
10016286:	4313      	orrs	r3, r2
10016288:	804b      	strh	r3, [r1, #2]
1001628a:	4770      	bx	lr

1001628c <gapc_lecb_connect_req_ind>:
1001628c:	7843      	ldrb	r3, [r0, #1]
1001628e:	7802      	ldrb	r2, [r0, #0]
10016290:	021b      	lsls	r3, r3, #8
10016292:	4313      	orrs	r3, r2
10016294:	800b      	strh	r3, [r1, #0]
10016296:	78c3      	ldrb	r3, [r0, #3]
10016298:	7882      	ldrb	r2, [r0, #2]
1001629a:	021b      	lsls	r3, r3, #8
1001629c:	4313      	orrs	r3, r2
1001629e:	804b      	strh	r3, [r1, #2]
100162a0:	7943      	ldrb	r3, [r0, #5]
100162a2:	7902      	ldrb	r2, [r0, #4]
100162a4:	021b      	lsls	r3, r3, #8
100162a6:	4313      	orrs	r3, r2
100162a8:	808b      	strh	r3, [r1, #4]
100162aa:	79c3      	ldrb	r3, [r0, #7]
100162ac:	7982      	ldrb	r2, [r0, #6]
100162ae:	021b      	lsls	r3, r3, #8
100162b0:	4313      	orrs	r3, r2
100162b2:	80cb      	strh	r3, [r1, #6]
100162b4:	4770      	bx	lr

100162b6 <gapc_lecb_add_credit_resp_handler>:
100162b6:	7843      	ldrb	r3, [r0, #1]
100162b8:	7802      	ldrb	r2, [r0, #0]
100162ba:	021b      	lsls	r3, r3, #8
100162bc:	4313      	orrs	r3, r2
100162be:	800b      	strh	r3, [r1, #0]
100162c0:	78c3      	ldrb	r3, [r0, #3]
100162c2:	7882      	ldrb	r2, [r0, #2]
100162c4:	021b      	lsls	r3, r3, #8
100162c6:	4313      	orrs	r3, r2
100162c8:	804b      	strh	r3, [r1, #2]
100162ca:	7943      	ldrb	r3, [r0, #5]
100162cc:	7902      	ldrb	r2, [r0, #4]
100162ce:	021b      	lsls	r3, r3, #8
100162d0:	4313      	orrs	r3, r2
100162d2:	808b      	strh	r3, [r1, #4]
100162d4:	4770      	bx	lr
	...

100162d8 <gapm_reset_req_handler>:
100162d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
100162da:	466b      	mov	r3, sp
100162dc:	4915      	ldr	r1, [pc, #84]	; (10016334 <gapm_reset_req_handler+0x5c>)
100162de:	4816      	ldr	r0, [pc, #88]	; (10016338 <gapm_reset_req_handler+0x60>)
100162e0:	880c      	ldrh	r4, [r1, #0]
100162e2:	8809      	ldrh	r1, [r1, #0]
100162e4:	1ddd      	adds	r5, r3, #7
100162e6:	0a09      	lsrs	r1, r1, #8
100162e8:	2300      	movs	r3, #0
100162ea:	2202      	movs	r2, #2
100162ec:	7141      	strb	r1, [r0, #5]
100162ee:	26d0      	movs	r6, #208	; 0xd0
100162f0:	2101      	movs	r1, #1
100162f2:	7104      	strb	r4, [r0, #4]
100162f4:	4c11      	ldr	r4, [pc, #68]	; (1001633c <gapm_reset_req_handler+0x64>)
100162f6:	702b      	strb	r3, [r5, #0]
100162f8:	7002      	strb	r2, [r0, #0]
100162fa:	70c3      	strb	r3, [r0, #3]
100162fc:	320b      	adds	r2, #11
100162fe:	7201      	strb	r1, [r0, #8]
10016300:	7181      	strb	r1, [r0, #6]
10016302:	71c3      	strb	r3, [r0, #7]
10016304:	3108      	adds	r1, #8
10016306:	4b0e      	ldr	r3, [pc, #56]	; (10016340 <gapm_reset_req_handler+0x68>)
10016308:	0136      	lsls	r6, r6, #4
1001630a:	7042      	strb	r2, [r0, #1]
1001630c:	7082      	strb	r2, [r0, #2]
1001630e:	80a2      	strh	r2, [r4, #4]
10016310:	8026      	strh	r6, [r4, #0]
10016312:	4798      	blx	r3
10016314:	1c28      	adds	r0, r5, #0
10016316:	4b0b      	ldr	r3, [pc, #44]	; (10016344 <gapm_reset_req_handler+0x6c>)
10016318:	4798      	blx	r3
1001631a:	782b      	ldrb	r3, [r5, #0]
1001631c:	20e2      	movs	r0, #226	; 0xe2
1001631e:	2b00      	cmp	r3, #0
10016320:	d106      	bne.n	10016330 <gapm_reset_req_handler+0x58>
10016322:	68a3      	ldr	r3, [r4, #8]
10016324:	20e2      	movs	r0, #226	; 0xe2
10016326:	781a      	ldrb	r2, [r3, #0]
10016328:	785b      	ldrb	r3, [r3, #1]
1001632a:	2a01      	cmp	r2, #1
1001632c:	d100      	bne.n	10016330 <gapm_reset_req_handler+0x58>
1001632e:	1c18      	adds	r0, r3, #0
10016330:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10016332:	46c0      	nop			; (mov r8, r8)
10016334:	1001cf0c 	.word	0x1001cf0c
10016338:	1001d27c 	.word	0x1001d27c
1001633c:	1001cf00 	.word	0x1001cf00
10016340:	10015709 	.word	0x10015709
10016344:	10015765 	.word	0x10015765

10016348 <gapm_set_dev_config_cmd_handler>:
10016348:	b5f0      	push	{r4, r5, r6, r7, lr}
1001634a:	b089      	sub	sp, #36	; 0x24
1001634c:	9303      	str	r3, [sp, #12]
1001634e:	ab0e      	add	r3, sp, #56	; 0x38
10016350:	781b      	ldrb	r3, [r3, #0]
10016352:	4c37      	ldr	r4, [pc, #220]	; (10016430 <gapm_set_dev_config_cmd_handler+0xe8>)
10016354:	9304      	str	r3, [sp, #16]
10016356:	ab0f      	add	r3, sp, #60	; 0x3c
10016358:	781b      	ldrb	r3, [r3, #0]
1001635a:	270d      	movs	r7, #13
1001635c:	9305      	str	r3, [sp, #20]
1001635e:	ab10      	add	r3, sp, #64	; 0x40
10016360:	881b      	ldrh	r3, [r3, #0]
10016362:	72a1      	strb	r1, [r4, #10]
10016364:	9300      	str	r3, [sp, #0]
10016366:	ab11      	add	r3, sp, #68	; 0x44
10016368:	881b      	ldrh	r3, [r3, #0]
1001636a:	0a09      	lsrs	r1, r1, #8
1001636c:	9301      	str	r3, [sp, #4]
1001636e:	ab12      	add	r3, sp, #72	; 0x48
10016370:	881b      	ldrh	r3, [r3, #0]
10016372:	7260      	strb	r0, [r4, #9]
10016374:	9302      	str	r3, [sp, #8]
10016376:	ab06      	add	r3, sp, #24
10016378:	1dde      	adds	r6, r3, #7
1001637a:	2300      	movs	r3, #0
1001637c:	7033      	strb	r3, [r6, #0]
1001637e:	2304      	movs	r3, #4
10016380:	7023      	strb	r3, [r4, #0]
10016382:	2300      	movs	r3, #0
10016384:	70e3      	strb	r3, [r4, #3]
10016386:	4b2b      	ldr	r3, [pc, #172]	; (10016434 <gapm_set_dev_config_cmd_handler+0xec>)
10016388:	72e1      	strb	r1, [r4, #11]
1001638a:	881d      	ldrh	r5, [r3, #0]
1001638c:	881b      	ldrh	r3, [r3, #0]
1001638e:	1c11      	adds	r1, r2, #0
10016390:	0a1b      	lsrs	r3, r3, #8
10016392:	7163      	strb	r3, [r4, #5]
10016394:	2303      	movs	r3, #3
10016396:	7125      	strb	r5, [r4, #4]
10016398:	2206      	movs	r2, #6
1001639a:	4d27      	ldr	r5, [pc, #156]	; (10016438 <gapm_set_dev_config_cmd_handler+0xf0>)
1001639c:	4827      	ldr	r0, [pc, #156]	; (1001643c <gapm_set_dev_config_cmd_handler+0xf4>)
1001639e:	7223      	strb	r3, [r4, #8]
100163a0:	7067      	strb	r7, [r4, #1]
100163a2:	70a7      	strb	r7, [r4, #2]
100163a4:	47a8      	blx	r5
100163a6:	9903      	ldr	r1, [sp, #12]
100163a8:	2210      	movs	r2, #16
100163aa:	4825      	ldr	r0, [pc, #148]	; (10016440 <gapm_set_dev_config_cmd_handler+0xf8>)
100163ac:	47a8      	blx	r5
100163ae:	466a      	mov	r2, sp
100163b0:	7c12      	ldrb	r2, [r2, #16]
100163b2:	1ce3      	adds	r3, r4, #3
100163b4:	77da      	strb	r2, [r3, #31]
100163b6:	466a      	mov	r2, sp
100163b8:	7d12      	ldrb	r2, [r2, #20]
100163ba:	1d23      	adds	r3, r4, #4
100163bc:	77da      	strb	r2, [r3, #31]
100163be:	466a      	mov	r2, sp
100163c0:	7812      	ldrb	r2, [r2, #0]
100163c2:	1d63      	adds	r3, r4, #5
100163c4:	77da      	strb	r2, [r3, #31]
100163c6:	9b00      	ldr	r3, [sp, #0]
100163c8:	1da2      	adds	r2, r4, #6
100163ca:	0a1b      	lsrs	r3, r3, #8
100163cc:	77d3      	strb	r3, [r2, #31]
100163ce:	466a      	mov	r2, sp
100163d0:	7912      	ldrb	r2, [r2, #4]
100163d2:	1de3      	adds	r3, r4, #7
100163d4:	77da      	strb	r2, [r3, #31]
100163d6:	1c22      	adds	r2, r4, #0
100163d8:	9b01      	ldr	r3, [sp, #4]
100163da:	3208      	adds	r2, #8
100163dc:	0a1b      	lsrs	r3, r3, #8
100163de:	77d3      	strb	r3, [r2, #31]
100163e0:	466a      	mov	r2, sp
100163e2:	1c23      	adds	r3, r4, #0
100163e4:	7a12      	ldrb	r2, [r2, #8]
100163e6:	3328      	adds	r3, #40	; 0x28
100163e8:	701a      	strb	r2, [r3, #0]
100163ea:	1c22      	adds	r2, r4, #0
100163ec:	9b02      	ldr	r3, [sp, #8]
100163ee:	3229      	adds	r2, #41	; 0x29
100163f0:	0a1b      	lsrs	r3, r3, #8
100163f2:	7013      	strb	r3, [r2, #0]
100163f4:	23d0      	movs	r3, #208	; 0xd0
100163f6:	4d13      	ldr	r5, [pc, #76]	; (10016444 <gapm_set_dev_config_cmd_handler+0xfc>)
100163f8:	011b      	lsls	r3, r3, #4
100163fa:	802b      	strh	r3, [r5, #0]
100163fc:	2322      	movs	r3, #34	; 0x22
100163fe:	71a3      	strb	r3, [r4, #6]
10016400:	2300      	movs	r3, #0
10016402:	212a      	movs	r1, #42	; 0x2a
10016404:	71e3      	strb	r3, [r4, #7]
10016406:	1c20      	adds	r0, r4, #0
10016408:	4b0f      	ldr	r3, [pc, #60]	; (10016448 <gapm_set_dev_config_cmd_handler+0x100>)
1001640a:	80af      	strh	r7, [r5, #4]
1001640c:	4798      	blx	r3
1001640e:	1c30      	adds	r0, r6, #0
10016410:	4b0e      	ldr	r3, [pc, #56]	; (1001644c <gapm_set_dev_config_cmd_handler+0x104>)
10016412:	4798      	blx	r3
10016414:	7833      	ldrb	r3, [r6, #0]
10016416:	20e2      	movs	r0, #226	; 0xe2
10016418:	2b00      	cmp	r3, #0
1001641a:	d106      	bne.n	1001642a <gapm_set_dev_config_cmd_handler+0xe2>
1001641c:	68ab      	ldr	r3, [r5, #8]
1001641e:	20e2      	movs	r0, #226	; 0xe2
10016420:	781a      	ldrb	r2, [r3, #0]
10016422:	785b      	ldrb	r3, [r3, #1]
10016424:	2a03      	cmp	r2, #3
10016426:	d100      	bne.n	1001642a <gapm_set_dev_config_cmd_handler+0xe2>
10016428:	1c18      	adds	r0, r3, #0
1001642a:	b009      	add	sp, #36	; 0x24
1001642c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001642e:	46c0      	nop			; (mov r8, r8)
10016430:	1001d27c 	.word	0x1001d27c
10016434:	1001cf0c 	.word	0x1001cf0c
10016438:	10018e1b 	.word	0x10018e1b
1001643c:	1001d288 	.word	0x1001d288
10016440:	1001d28e 	.word	0x1001d28e
10016444:	1001cf00 	.word	0x1001cf00
10016448:	10015709 	.word	0x10015709
1001644c:	10015765 	.word	0x10015765

10016450 <gapm_get_dev_config_cmd_handler>:
10016450:	4684      	mov	ip, r0
10016452:	4663      	mov	r3, ip
10016454:	b5f0      	push	{r4, r5, r6, r7, lr}
10016456:	b085      	sub	sp, #20
10016458:	9100      	str	r1, [sp, #0]
1001645a:	20cf      	movs	r0, #207	; 0xcf
1001645c:	2b01      	cmp	r3, #1
1001645e:	d854      	bhi.n	1001650a <gapm_get_dev_config_cmd_handler+0xba>
10016460:	2900      	cmp	r1, #0
10016462:	d052      	beq.n	1001650a <gapm_get_dev_config_cmd_handler+0xba>
10016464:	2200      	movs	r2, #0
10016466:	492a      	ldr	r1, [pc, #168]	; (10016510 <gapm_get_dev_config_cmd_handler+0xc0>)
10016468:	ab02      	add	r3, sp, #8
1001646a:	880c      	ldrh	r4, [r1, #0]
1001646c:	8809      	ldrh	r1, [r1, #0]
1001646e:	1d9f      	adds	r7, r3, #6
10016470:	719a      	strb	r2, [r3, #6]
10016472:	4b28      	ldr	r3, [pc, #160]	; (10016514 <gapm_get_dev_config_cmd_handler+0xc4>)
10016474:	0a09      	lsrs	r1, r1, #8
10016476:	250d      	movs	r5, #13
10016478:	2606      	movs	r6, #6
1001647a:	7159      	strb	r1, [r3, #5]
1001647c:	4661      	mov	r1, ip
1001647e:	701e      	strb	r6, [r3, #0]
10016480:	705d      	strb	r5, [r3, #1]
10016482:	709d      	strb	r5, [r3, #2]
10016484:	70da      	strb	r2, [r3, #3]
10016486:	711c      	strb	r4, [r3, #4]
10016488:	2901      	cmp	r1, #1
1001648a:	d13e      	bne.n	1001650a <gapm_get_dev_config_cmd_handler+0xba>
1001648c:	21d0      	movs	r1, #208	; 0xd0
1001648e:	4c22      	ldr	r4, [pc, #136]	; (10016518 <gapm_get_dev_config_cmd_handler+0xc8>)
10016490:	0109      	lsls	r1, r1, #4
10016492:	8061      	strh	r1, [r4, #2]
10016494:	4921      	ldr	r1, [pc, #132]	; (1001651c <gapm_get_dev_config_cmd_handler+0xcc>)
10016496:	71da      	strb	r2, [r3, #7]
10016498:	8021      	strh	r1, [r4, #0]
1001649a:	4661      	mov	r1, ip
1001649c:	721e      	strb	r6, [r3, #8]
1001649e:	7199      	strb	r1, [r3, #6]
100164a0:	1c18      	adds	r0, r3, #0
100164a2:	2109      	movs	r1, #9
100164a4:	4b1e      	ldr	r3, [pc, #120]	; (10016520 <gapm_get_dev_config_cmd_handler+0xd0>)
100164a6:	80a5      	strh	r5, [r4, #4]
100164a8:	4798      	blx	r3
100164aa:	1c38      	adds	r0, r7, #0
100164ac:	4b1d      	ldr	r3, [pc, #116]	; (10016524 <gapm_get_dev_config_cmd_handler+0xd4>)
100164ae:	4798      	blx	r3
100164b0:	783b      	ldrb	r3, [r7, #0]
100164b2:	20e2      	movs	r0, #226	; 0xe2
100164b4:	9301      	str	r3, [sp, #4]
100164b6:	2b00      	cmp	r3, #0
100164b8:	d127      	bne.n	1001650a <gapm_get_dev_config_cmd_handler+0xba>
100164ba:	8821      	ldrh	r1, [r4, #0]
100164bc:	4a1a      	ldr	r2, [pc, #104]	; (10016528 <gapm_get_dev_config_cmd_handler+0xd8>)
100164be:	68a7      	ldr	r7, [r4, #8]
100164c0:	3b01      	subs	r3, #1
100164c2:	4291      	cmp	r1, r2
100164c4:	d001      	beq.n	100164ca <gapm_get_dev_config_cmd_handler+0x7a>
100164c6:	8023      	strh	r3, [r4, #0]
100164c8:	e01a      	b.n	10016500 <gapm_get_dev_config_cmd_handler+0xb0>
100164ca:	8063      	strh	r3, [r4, #2]
100164cc:	9b00      	ldr	r3, [sp, #0]
100164ce:	1c39      	adds	r1, r7, #0
100164d0:	1c58      	adds	r0, r3, #1
100164d2:	1c32      	adds	r2, r6, #0
100164d4:	4b15      	ldr	r3, [pc, #84]	; (1001652c <gapm_get_dev_config_cmd_handler+0xdc>)
100164d6:	4798      	blx	r3
100164d8:	79bb      	ldrb	r3, [r7, #6]
100164da:	9a00      	ldr	r2, [sp, #0]
100164dc:	7013      	strb	r3, [r2, #0]
100164de:	23d0      	movs	r3, #208	; 0xd0
100164e0:	011b      	lsls	r3, r3, #4
100164e2:	8023      	strh	r3, [r4, #0]
100164e4:	ab02      	add	r3, sp, #8
100164e6:	80a5      	strh	r5, [r4, #4]
100164e8:	1ddd      	adds	r5, r3, #7
100164ea:	466b      	mov	r3, sp
100164ec:	791b      	ldrb	r3, [r3, #4]
100164ee:	1c28      	adds	r0, r5, #0
100164f0:	702b      	strb	r3, [r5, #0]
100164f2:	4b0c      	ldr	r3, [pc, #48]	; (10016524 <gapm_get_dev_config_cmd_handler+0xd4>)
100164f4:	4798      	blx	r3
100164f6:	782b      	ldrb	r3, [r5, #0]
100164f8:	20d0      	movs	r0, #208	; 0xd0
100164fa:	2b00      	cmp	r3, #0
100164fc:	d105      	bne.n	1001650a <gapm_get_dev_config_cmd_handler+0xba>
100164fe:	68a7      	ldr	r7, [r4, #8]
10016500:	783b      	ldrb	r3, [r7, #0]
10016502:	7878      	ldrb	r0, [r7, #1]
10016504:	2b06      	cmp	r3, #6
10016506:	d000      	beq.n	1001650a <gapm_get_dev_config_cmd_handler+0xba>
10016508:	20e2      	movs	r0, #226	; 0xe2
1001650a:	b005      	add	sp, #20
1001650c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001650e:	46c0      	nop			; (mov r8, r8)
10016510:	1001cf0c 	.word	0x1001cf0c
10016514:	1001d27c 	.word	0x1001d27c
10016518:	1001cf00 	.word	0x1001cf00
1001651c:	00000d08 	.word	0x00000d08
10016520:	10015709 	.word	0x10015709
10016524:	10015765 	.word	0x10015765
10016528:	0000ffff 	.word	0x0000ffff
1001652c:	10018e1b 	.word	0x10018e1b

10016530 <gapm_cancel_cmd_handler>:
10016530:	b537      	push	{r0, r1, r2, r4, r5, lr}
10016532:	4916      	ldr	r1, [pc, #88]	; (1001658c <gapm_cancel_cmd_handler+0x5c>)
10016534:	4816      	ldr	r0, [pc, #88]	; (10016590 <gapm_cancel_cmd_handler+0x60>)
10016536:	880c      	ldrh	r4, [r1, #0]
10016538:	8809      	ldrh	r1, [r1, #0]
1001653a:	466b      	mov	r3, sp
1001653c:	0a09      	lsrs	r1, r1, #8
1001653e:	7141      	strb	r1, [r0, #5]
10016540:	2102      	movs	r1, #2
10016542:	2203      	movs	r2, #3
10016544:	7201      	strb	r1, [r0, #8]
10016546:	21d0      	movs	r1, #208	; 0xd0
10016548:	1ddd      	adds	r5, r3, #7
1001654a:	2300      	movs	r3, #0
1001654c:	7104      	strb	r4, [r0, #4]
1001654e:	4c11      	ldr	r4, [pc, #68]	; (10016594 <gapm_cancel_cmd_handler+0x64>)
10016550:	7002      	strb	r2, [r0, #0]
10016552:	0109      	lsls	r1, r1, #4
10016554:	320a      	adds	r2, #10
10016556:	702b      	strb	r3, [r5, #0]
10016558:	7042      	strb	r2, [r0, #1]
1001655a:	7082      	strb	r2, [r0, #2]
1001655c:	70c3      	strb	r3, [r0, #3]
1001655e:	8021      	strh	r1, [r4, #0]
10016560:	80a2      	strh	r2, [r4, #4]
10016562:	71c3      	strb	r3, [r0, #7]
10016564:	3a0c      	subs	r2, #12
10016566:	2109      	movs	r1, #9
10016568:	4b0b      	ldr	r3, [pc, #44]	; (10016598 <gapm_cancel_cmd_handler+0x68>)
1001656a:	7182      	strb	r2, [r0, #6]
1001656c:	4798      	blx	r3
1001656e:	1c28      	adds	r0, r5, #0
10016570:	4b0a      	ldr	r3, [pc, #40]	; (1001659c <gapm_cancel_cmd_handler+0x6c>)
10016572:	4798      	blx	r3
10016574:	7828      	ldrb	r0, [r5, #0]
10016576:	2800      	cmp	r0, #0
10016578:	d001      	beq.n	1001657e <gapm_cancel_cmd_handler+0x4e>
1001657a:	20e2      	movs	r0, #226	; 0xe2
1001657c:	e004      	b.n	10016588 <gapm_cancel_cmd_handler+0x58>
1001657e:	68a3      	ldr	r3, [r4, #8]
10016580:	785b      	ldrb	r3, [r3, #1]
10016582:	2b44      	cmp	r3, #68	; 0x44
10016584:	d000      	beq.n	10016588 <gapm_cancel_cmd_handler+0x58>
10016586:	1c18      	adds	r0, r3, #0
10016588:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001658a:	46c0      	nop			; (mov r8, r8)
1001658c:	1001cf0c 	.word	0x1001cf0c
10016590:	1001d27c 	.word	0x1001d27c
10016594:	1001cf00 	.word	0x1001cf00
10016598:	10015709 	.word	0x10015709
1001659c:	10015765 	.word	0x10015765

100165a0 <gapm_dev_bdaddr_ind_handler>:
100165a0:	b538      	push	{r3, r4, r5, lr}
100165a2:	1c05      	adds	r5, r0, #0
100165a4:	1c0c      	adds	r4, r1, #0
100165a6:	1c48      	adds	r0, r1, #1
100165a8:	2206      	movs	r2, #6
100165aa:	1c29      	adds	r1, r5, #0
100165ac:	4b02      	ldr	r3, [pc, #8]	; (100165b8 <gapm_dev_bdaddr_ind_handler+0x18>)
100165ae:	4798      	blx	r3
100165b0:	79ab      	ldrb	r3, [r5, #6]
100165b2:	2000      	movs	r0, #0
100165b4:	7023      	strb	r3, [r4, #0]
100165b6:	bd38      	pop	{r3, r4, r5, pc}
100165b8:	10018e1b 	.word	0x10018e1b

100165bc <gapm_cmp_evt>:
100165bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100165be:	7803      	ldrb	r3, [r0, #0]
100165c0:	7845      	ldrb	r5, [r0, #1]
100165c2:	3b0c      	subs	r3, #12
100165c4:	1e18      	subs	r0, r3, #0
100165c6:	280b      	cmp	r0, #11
100165c8:	d900      	bls.n	100165cc <gapm_cmp_evt+0x10>
100165ca:	e08d      	b.n	100166e8 <gapm_cmp_evt+0x12c>
100165cc:	1c0c      	adds	r4, r1, #0
100165ce:	f000 fd5f 	bl	10017090 <__gnu_thumb1_case_uqi>
100165d2:	1952      	.short	0x1952
100165d4:	068b1919 	.word	0x068b1919
100165d8:	8b595906 	.word	0x8b595906
100165dc:	0d8b      	.short	0x0d8b
100165de:	2300      	movs	r3, #0
100165e0:	2d45      	cmp	r5, #69	; 0x45
100165e2:	d000      	beq.n	100165e6 <gapm_cmp_evt+0x2a>
100165e4:	1c2b      	adds	r3, r5, #0
100165e6:	7023      	strb	r3, [r4, #0]
100165e8:	2002      	movs	r0, #2
100165ea:	e07e      	b.n	100166ea <gapm_cmp_evt+0x12e>
100165ec:	203b      	movs	r0, #59	; 0x3b
100165ee:	2d00      	cmp	r5, #0
100165f0:	d100      	bne.n	100165f4 <gapm_cmp_evt+0x38>
100165f2:	e07a      	b.n	100166ea <gapm_cmp_evt+0x12e>
100165f4:	700d      	strb	r5, [r1, #0]
100165f6:	1c48      	adds	r0, r1, #1
100165f8:	2210      	movs	r2, #16
100165fa:	2100      	movs	r1, #0
100165fc:	4b3b      	ldr	r3, [pc, #236]	; (100166ec <gapm_cmp_evt+0x130>)
100165fe:	4798      	blx	r3
10016600:	200f      	movs	r0, #15
10016602:	e072      	b.n	100166ea <gapm_cmp_evt+0x12e>
10016604:	2d00      	cmp	r5, #0
10016606:	d134      	bne.n	10016672 <gapm_cmp_evt+0xb6>
10016608:	4b39      	ldr	r3, [pc, #228]	; (100166f0 <gapm_cmp_evt+0x134>)
1001660a:	4798      	blx	r3
1001660c:	1e43      	subs	r3, r0, #1
1001660e:	b2db      	uxtb	r3, r3
10016610:	1c28      	adds	r0, r5, #0
10016612:	2b06      	cmp	r3, #6
10016614:	d869      	bhi.n	100166ea <gapm_cmp_evt+0x12e>
10016616:	466b      	mov	r3, sp
10016618:	4e36      	ldr	r6, [pc, #216]	; (100166f4 <gapm_cmp_evt+0x138>)
1001661a:	1dd9      	adds	r1, r3, #7
1001661c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001661e:	4b36      	ldr	r3, [pc, #216]	; (100166f8 <gapm_cmp_evt+0x13c>)
10016620:	4798      	blx	r3
10016622:	2312      	movs	r3, #18
10016624:	4358      	muls	r0, r3
10016626:	4935      	ldr	r1, [pc, #212]	; (100166fc <gapm_cmp_evt+0x140>)
10016628:	1809      	adds	r1, r1, r0
1001662a:	1c0b      	adds	r3, r1, #0
1001662c:	894a      	ldrh	r2, [r1, #10]
1001662e:	3308      	adds	r3, #8
10016630:	8122      	strh	r2, [r4, #8]
10016632:	784f      	ldrb	r7, [r1, #1]
10016634:	72a5      	strb	r5, [r4, #10]
10016636:	7027      	strb	r7, [r4, #0]
10016638:	898a      	ldrh	r2, [r1, #12]
1001663a:	1c60      	adds	r0, r4, #1
1001663c:	81a2      	strh	r2, [r4, #12]
1001663e:	88db      	ldrh	r3, [r3, #6]
10016640:	3102      	adds	r1, #2
10016642:	81e3      	strh	r3, [r4, #14]
10016644:	89cb      	ldrh	r3, [r1, #14]
10016646:	2206      	movs	r2, #6
10016648:	8223      	strh	r3, [r4, #16]
1001664a:	4b2d      	ldr	r3, [pc, #180]	; (10016700 <gapm_cmp_evt+0x144>)
1001664c:	4798      	blx	r3
1001664e:	2f00      	cmp	r7, #0
10016650:	d00a      	beq.n	10016668 <gapm_cmp_evt+0xac>
10016652:	79a3      	ldrb	r3, [r4, #6]
10016654:	223f      	movs	r2, #63	; 0x3f
10016656:	1c19      	adds	r1, r3, #0
10016658:	3501      	adds	r5, #1
1001665a:	4391      	bics	r1, r2
1001665c:	29c0      	cmp	r1, #192	; 0xc0
1001665e:	d003      	beq.n	10016668 <gapm_cmp_evt+0xac>
10016660:	065b      	lsls	r3, r3, #25
10016662:	0fdb      	lsrs	r3, r3, #31
10016664:	3502      	adds	r5, #2
10016666:	1aed      	subs	r5, r5, r3
10016668:	2301      	movs	r3, #1
1001666a:	425b      	negs	r3, r3
1001666c:	7025      	strb	r5, [r4, #0]
1001666e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10016670:	e038      	b.n	100166e4 <gapm_cmp_evt+0x128>
10016672:	700d      	strb	r5, [r1, #0]
10016674:	e004      	b.n	10016680 <gapm_cmp_evt+0xc4>
10016676:	2300      	movs	r3, #0
10016678:	2d45      	cmp	r5, #69	; 0x45
1001667a:	d000      	beq.n	1001667e <gapm_cmp_evt+0xc2>
1001667c:	1c2b      	adds	r3, r5, #0
1001667e:	7023      	strb	r3, [r4, #0]
10016680:	2003      	movs	r0, #3
10016682:	e032      	b.n	100166ea <gapm_cmp_evt+0x12e>
10016684:	4e1b      	ldr	r6, [pc, #108]	; (100166f4 <gapm_cmp_evt+0x138>)
10016686:	2100      	movs	r1, #0
10016688:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001668a:	4b1b      	ldr	r3, [pc, #108]	; (100166f8 <gapm_cmp_evt+0x13c>)
1001668c:	4798      	blx	r3
1001668e:	2807      	cmp	r0, #7
10016690:	d818      	bhi.n	100166c4 <gapm_cmp_evt+0x108>
10016692:	2301      	movs	r3, #1
10016694:	425b      	negs	r3, r3
10016696:	85b3      	strh	r3, [r6, #44]	; 0x2c
10016698:	3313      	adds	r3, #19
1001669a:	4358      	muls	r0, r3
1001669c:	4917      	ldr	r1, [pc, #92]	; (100166fc <gapm_cmp_evt+0x140>)
1001669e:	1809      	adds	r1, r1, r0
100166a0:	1c0b      	adds	r3, r1, #0
100166a2:	894a      	ldrh	r2, [r1, #10]
100166a4:	3308      	adds	r3, #8
100166a6:	8122      	strh	r2, [r4, #8]
100166a8:	784a      	ldrb	r2, [r1, #1]
100166aa:	72a5      	strb	r5, [r4, #10]
100166ac:	7022      	strb	r2, [r4, #0]
100166ae:	898a      	ldrh	r2, [r1, #12]
100166b0:	1c60      	adds	r0, r4, #1
100166b2:	81a2      	strh	r2, [r4, #12]
100166b4:	88db      	ldrh	r3, [r3, #6]
100166b6:	3102      	adds	r1, #2
100166b8:	81e3      	strh	r3, [r4, #14]
100166ba:	89cb      	ldrh	r3, [r1, #14]
100166bc:	2206      	movs	r2, #6
100166be:	8223      	strh	r3, [r4, #16]
100166c0:	4b0f      	ldr	r3, [pc, #60]	; (10016700 <gapm_cmp_evt+0x144>)
100166c2:	4798      	blx	r3
100166c4:	2200      	movs	r2, #0
100166c6:	7823      	ldrb	r3, [r4, #0]
100166c8:	4293      	cmp	r3, r2
100166ca:	d00a      	beq.n	100166e2 <gapm_cmp_evt+0x126>
100166cc:	79a3      	ldrb	r3, [r4, #6]
100166ce:	323f      	adds	r2, #63	; 0x3f
100166d0:	1c19      	adds	r1, r3, #0
100166d2:	4391      	bics	r1, r2
100166d4:	3a3e      	subs	r2, #62	; 0x3e
100166d6:	29c0      	cmp	r1, #192	; 0xc0
100166d8:	d003      	beq.n	100166e2 <gapm_cmp_evt+0x126>
100166da:	065b      	lsls	r3, r3, #25
100166dc:	0fdb      	lsrs	r3, r3, #31
100166de:	3202      	adds	r2, #2
100166e0:	1ad2      	subs	r2, r2, r3
100166e2:	7022      	strb	r2, [r4, #0]
100166e4:	2005      	movs	r0, #5
100166e6:	e000      	b.n	100166ea <gapm_cmp_evt+0x12e>
100166e8:	2000      	movs	r0, #0
100166ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100166ec:	10018e2d 	.word	0x10018e2d
100166f0:	1001590d 	.word	0x1001590d
100166f4:	1001cf9e 	.word	0x1001cf9e
100166f8:	100158d1 	.word	0x100158d1
100166fc:	1001cf0e 	.word	0x1001cf0e
10016700:	10018e1b 	.word	0x10018e1b

10016704 <gapm_start_adv_cmd_handler>:
10016704:	b5f0      	push	{r4, r5, r6, r7, lr}
10016706:	b089      	sub	sp, #36	; 0x24
10016708:	9303      	str	r3, [sp, #12]
1001670a:	ab0e      	add	r3, sp, #56	; 0x38
1001670c:	9102      	str	r1, [sp, #8]
1001670e:	cb02      	ldmia	r3!, {r1}
10016710:	aa08      	add	r2, sp, #32
10016712:	881b      	ldrh	r3, [r3, #0]
10016714:	4e3c      	ldr	r6, [pc, #240]	; (10016808 <gapm_start_adv_cmd_handler+0x104>)
10016716:	9300      	str	r3, [sp, #0]
10016718:	ab10      	add	r3, sp, #64	; 0x40
1001671a:	881b      	ldrh	r3, [r3, #0]
1001671c:	240d      	movs	r4, #13
1001671e:	469c      	mov	ip, r3
10016720:	ab11      	add	r3, sp, #68	; 0x44
10016722:	781b      	ldrb	r3, [r3, #0]
10016724:	9304      	str	r3, [sp, #16]
10016726:	ab12      	add	r3, sp, #72	; 0x48
10016728:	781b      	ldrb	r3, [r3, #0]
1001672a:	9305      	str	r3, [sp, #20]
1001672c:	ab13      	add	r3, sp, #76	; 0x4c
1001672e:	781b      	ldrb	r3, [r3, #0]
10016730:	9306      	str	r3, [sp, #24]
10016732:	ab14      	add	r3, sp, #80	; 0x50
10016734:	781b      	ldrb	r3, [r3, #0]
10016736:	9301      	str	r3, [sp, #4]
10016738:	2319      	movs	r3, #25
1001673a:	189b      	adds	r3, r3, r2
1001673c:	7fdd      	ldrb	r5, [r3, #31]
1001673e:	ab18      	add	r3, sp, #96	; 0x60
10016740:	881f      	ldrh	r7, [r3, #0]
10016742:	ab19      	add	r3, sp, #100	; 0x64
10016744:	781b      	ldrb	r3, [r3, #0]
10016746:	8832      	ldrh	r2, [r6, #0]
10016748:	9307      	str	r3, [sp, #28]
1001674a:	4b30      	ldr	r3, [pc, #192]	; (1001680c <gapm_start_adv_cmd_handler+0x108>)
1001674c:	8836      	ldrh	r6, [r6, #0]
1001674e:	711a      	strb	r2, [r3, #4]
10016750:	466a      	mov	r2, sp
10016752:	7a12      	ldrb	r2, [r2, #8]
10016754:	701c      	strb	r4, [r3, #0]
10016756:	705c      	strb	r4, [r3, #1]
10016758:	709c      	strb	r4, [r3, #2]
1001675a:	725a      	strb	r2, [r3, #9]
1001675c:	2400      	movs	r4, #0
1001675e:	466a      	mov	r2, sp
10016760:	0a36      	lsrs	r6, r6, #8
10016762:	70dc      	strb	r4, [r3, #3]
10016764:	7218      	strb	r0, [r3, #8]
10016766:	729c      	strb	r4, [r3, #10]
10016768:	715e      	strb	r6, [r3, #5]
1001676a:	72dc      	strb	r4, [r3, #11]
1001676c:	7812      	ldrb	r2, [r2, #0]
1001676e:	380e      	subs	r0, #14
10016770:	731a      	strb	r2, [r3, #12]
10016772:	9a00      	ldr	r2, [sp, #0]
10016774:	0a14      	lsrs	r4, r2, #8
10016776:	4662      	mov	r2, ip
10016778:	739a      	strb	r2, [r3, #14]
1001677a:	4662      	mov	r2, ip
1001677c:	735c      	strb	r4, [r3, #13]
1001677e:	0a14      	lsrs	r4, r2, #8
10016780:	466a      	mov	r2, sp
10016782:	7c12      	ldrb	r2, [r2, #16]
10016784:	73dc      	strb	r4, [r3, #15]
10016786:	741a      	strb	r2, [r3, #16]
10016788:	1c1c      	adds	r4, r3, #0
1001678a:	2801      	cmp	r0, #1
1001678c:	d809      	bhi.n	100167a2 <gapm_start_adv_cmd_handler+0x9e>
1001678e:	2900      	cmp	r1, #0
10016790:	d003      	beq.n	1001679a <gapm_start_adv_cmd_handler+0x96>
10016792:	481f      	ldr	r0, [pc, #124]	; (10016810 <gapm_start_adv_cmd_handler+0x10c>)
10016794:	2206      	movs	r2, #6
10016796:	4b1f      	ldr	r3, [pc, #124]	; (10016814 <gapm_start_adv_cmd_handler+0x110>)
10016798:	4798      	blx	r3
1001679a:	466b      	mov	r3, sp
1001679c:	7b1b      	ldrb	r3, [r3, #12]
1001679e:	75e3      	strb	r3, [r4, #23]
100167a0:	e014      	b.n	100167cc <gapm_start_adv_cmd_handler+0xc8>
100167a2:	466b      	mov	r3, sp
100167a4:	7d1b      	ldrb	r3, [r3, #20]
100167a6:	9915      	ldr	r1, [sp, #84]	; 0x54
100167a8:	7463      	strb	r3, [r4, #17]
100167aa:	466b      	mov	r3, sp
100167ac:	7e1b      	ldrb	r3, [r3, #24]
100167ae:	9a01      	ldr	r2, [sp, #4]
100167b0:	74a3      	strb	r3, [r4, #18]
100167b2:	466b      	mov	r3, sp
100167b4:	791b      	ldrb	r3, [r3, #4]
100167b6:	4818      	ldr	r0, [pc, #96]	; (10016818 <gapm_start_adv_cmd_handler+0x114>)
100167b8:	4e16      	ldr	r6, [pc, #88]	; (10016814 <gapm_start_adv_cmd_handler+0x110>)
100167ba:	74e3      	strb	r3, [r4, #19]
100167bc:	47b0      	blx	r6
100167be:	1c23      	adds	r3, r4, #0
100167c0:	4816      	ldr	r0, [pc, #88]	; (1001681c <gapm_start_adv_cmd_handler+0x118>)
100167c2:	3330      	adds	r3, #48	; 0x30
100167c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
100167c6:	1c2a      	adds	r2, r5, #0
100167c8:	701d      	strb	r5, [r3, #0]
100167ca:	47b0      	blx	r6
100167cc:	1c22      	adds	r2, r4, #0
100167ce:	23a5      	movs	r3, #165	; 0xa5
100167d0:	3250      	adds	r2, #80	; 0x50
100167d2:	7013      	strb	r3, [r2, #0]
100167d4:	1c22      	adds	r2, r4, #0
100167d6:	3251      	adds	r2, #81	; 0x51
100167d8:	7013      	strb	r3, [r2, #0]
100167da:	1c23      	adds	r3, r4, #0
100167dc:	1c22      	adds	r2, r4, #0
100167de:	3352      	adds	r3, #82	; 0x52
100167e0:	701f      	strb	r7, [r3, #0]
100167e2:	3253      	adds	r2, #83	; 0x53
100167e4:	0a3b      	lsrs	r3, r7, #8
100167e6:	7013      	strb	r3, [r2, #0]
100167e8:	466a      	mov	r2, sp
100167ea:	1c23      	adds	r3, r4, #0
100167ec:	7f12      	ldrb	r2, [r2, #28]
100167ee:	3354      	adds	r3, #84	; 0x54
100167f0:	701a      	strb	r2, [r3, #0]
100167f2:	234d      	movs	r3, #77	; 0x4d
100167f4:	2500      	movs	r5, #0
100167f6:	71a3      	strb	r3, [r4, #6]
100167f8:	1c20      	adds	r0, r4, #0
100167fa:	2155      	movs	r1, #85	; 0x55
100167fc:	4b08      	ldr	r3, [pc, #32]	; (10016820 <gapm_start_adv_cmd_handler+0x11c>)
100167fe:	71e5      	strb	r5, [r4, #7]
10016800:	4798      	blx	r3
10016802:	1c28      	adds	r0, r5, #0
10016804:	b009      	add	sp, #36	; 0x24
10016806:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016808:	1001cf0c 	.word	0x1001cf0c
1001680c:	1001d27c 	.word	0x1001d27c
10016810:	1001d28d 	.word	0x1001d28d
10016814:	10018e1b 	.word	0x10018e1b
10016818:	1001d290 	.word	0x1001d290
1001681c:	1001d2ad 	.word	0x1001d2ad
10016820:	10015709 	.word	0x10015709

10016824 <get_gap_local_addr_type>:
10016824:	4b04      	ldr	r3, [pc, #16]	; (10016838 <get_gap_local_addr_type+0x14>)
10016826:	2001      	movs	r0, #1
10016828:	791b      	ldrb	r3, [r3, #4]
1001682a:	2b02      	cmp	r3, #2
1001682c:	d003      	beq.n	10016836 <get_gap_local_addr_type+0x12>
1001682e:	3b03      	subs	r3, #3
10016830:	4258      	negs	r0, r3
10016832:	4158      	adcs	r0, r3
10016834:	0040      	lsls	r0, r0, #1
10016836:	4770      	bx	lr
10016838:	1001cf9e 	.word	0x1001cf9e

1001683c <gapm_adv_report_evt_handler>:
1001683c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001683e:	7843      	ldrb	r3, [r0, #1]
10016840:	1c05      	adds	r5, r0, #0
10016842:	9301      	str	r3, [sp, #4]
10016844:	466b      	mov	r3, sp
10016846:	1c0c      	adds	r4, r1, #0
10016848:	791b      	ldrb	r3, [r3, #4]
1001684a:	7806      	ldrb	r6, [r0, #0]
1001684c:	2206      	movs	r2, #6
1001684e:	704b      	strb	r3, [r1, #1]
10016850:	1c88      	adds	r0, r1, #2
10016852:	4f1b      	ldr	r7, [pc, #108]	; (100168c0 <gapm_adv_report_evt_handler+0x84>)
10016854:	1ca9      	adds	r1, r5, #2
10016856:	47b8      	blx	r7
10016858:	1c20      	adds	r0, r4, #0
1001685a:	1c29      	adds	r1, r5, #0
1001685c:	7a2a      	ldrb	r2, [r5, #8]
1001685e:	3008      	adds	r0, #8
10016860:	77c2      	strb	r2, [r0, #31]
10016862:	3109      	adds	r1, #9
10016864:	3528      	adds	r5, #40	; 0x28
10016866:	47b8      	blx	r7
10016868:	782b      	ldrb	r3, [r5, #0]
1001686a:	b25a      	sxtb	r2, r3
1001686c:	2a00      	cmp	r2, #0
1001686e:	da01      	bge.n	10016874 <gapm_adv_report_evt_handler+0x38>
10016870:	3301      	adds	r3, #1
10016872:	b2db      	uxtb	r3, r3
10016874:	1c22      	adds	r2, r4, #0
10016876:	3228      	adds	r2, #40	; 0x28
10016878:	7013      	strb	r3, [r2, #0]
1001687a:	2200      	movs	r2, #0
1001687c:	9b01      	ldr	r3, [sp, #4]
1001687e:	4293      	cmp	r3, r2
10016880:	d00a      	beq.n	10016898 <gapm_adv_report_evt_handler+0x5c>
10016882:	79e3      	ldrb	r3, [r4, #7]
10016884:	323f      	adds	r2, #63	; 0x3f
10016886:	1c19      	adds	r1, r3, #0
10016888:	4391      	bics	r1, r2
1001688a:	3a3e      	subs	r2, #62	; 0x3e
1001688c:	29c0      	cmp	r1, #192	; 0xc0
1001688e:	d003      	beq.n	10016898 <gapm_adv_report_evt_handler+0x5c>
10016890:	065b      	lsls	r3, r3, #25
10016892:	0fdb      	lsrs	r3, r3, #31
10016894:	3202      	adds	r2, #2
10016896:	1ad2      	subs	r2, r2, r3
10016898:	7062      	strb	r2, [r4, #1]
1001689a:	2e04      	cmp	r6, #4
1001689c:	d80f      	bhi.n	100168be <gapm_adv_report_evt_handler+0x82>
1001689e:	1c30      	adds	r0, r6, #0
100168a0:	f000 fbf6 	bl	10017090 <__gnu_thumb1_case_uqi>
100168a4:	09070503 	.word	0x09070503
100168a8:	0b          	.byte	0x0b
100168a9:	00          	.byte	0x00
100168aa:	2300      	movs	r3, #0
100168ac:	e006      	b.n	100168bc <gapm_adv_report_evt_handler+0x80>
100168ae:	2301      	movs	r3, #1
100168b0:	e004      	b.n	100168bc <gapm_adv_report_evt_handler+0x80>
100168b2:	2302      	movs	r3, #2
100168b4:	e002      	b.n	100168bc <gapm_adv_report_evt_handler+0x80>
100168b6:	2303      	movs	r3, #3
100168b8:	e000      	b.n	100168bc <gapm_adv_report_evt_handler+0x80>
100168ba:	2305      	movs	r3, #5
100168bc:	7023      	strb	r3, [r4, #0]
100168be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100168c0:	10018e1b 	.word	0x10018e1b

100168c4 <gapm_resolv_addr_cmd_handler>:
100168c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100168c6:	2314      	movs	r3, #20
100168c8:	4c12      	ldr	r4, [pc, #72]	; (10016914 <gapm_resolv_addr_cmd_handler+0x50>)
100168ca:	1c17      	adds	r7, r2, #0
100168cc:	7023      	strb	r3, [r4, #0]
100168ce:	3b07      	subs	r3, #7
100168d0:	7063      	strb	r3, [r4, #1]
100168d2:	70a3      	strb	r3, [r4, #2]
100168d4:	2300      	movs	r3, #0
100168d6:	70e3      	strb	r3, [r4, #3]
100168d8:	4b0f      	ldr	r3, [pc, #60]	; (10016918 <gapm_resolv_addr_cmd_handler+0x54>)
100168da:	1c05      	adds	r5, r0, #0
100168dc:	881a      	ldrh	r2, [r3, #0]
100168de:	881b      	ldrh	r3, [r3, #0]
100168e0:	4e0e      	ldr	r6, [pc, #56]	; (1001691c <gapm_resolv_addr_cmd_handler+0x58>)
100168e2:	0a1b      	lsrs	r3, r3, #8
100168e4:	7163      	strb	r3, [r4, #5]
100168e6:	2317      	movs	r3, #23
100168e8:	012d      	lsls	r5, r5, #4
100168ea:	7122      	strb	r2, [r4, #4]
100168ec:	7260      	strb	r0, [r4, #9]
100168ee:	2206      	movs	r2, #6
100168f0:	480b      	ldr	r0, [pc, #44]	; (10016920 <gapm_resolv_addr_cmd_handler+0x5c>)
100168f2:	7223      	strb	r3, [r4, #8]
100168f4:	47b0      	blx	r6
100168f6:	1c39      	adds	r1, r7, #0
100168f8:	1c2a      	adds	r2, r5, #0
100168fa:	480a      	ldr	r0, [pc, #40]	; (10016924 <gapm_resolv_addr_cmd_handler+0x60>)
100168fc:	47b0      	blx	r6
100168fe:	1c29      	adds	r1, r5, #0
10016900:	3110      	adds	r1, #16
10016902:	1c0b      	adds	r3, r1, #0
10016904:	3b08      	subs	r3, #8
10016906:	71a3      	strb	r3, [r4, #6]
10016908:	121b      	asrs	r3, r3, #8
1001690a:	71e3      	strb	r3, [r4, #7]
1001690c:	1c20      	adds	r0, r4, #0
1001690e:	4b06      	ldr	r3, [pc, #24]	; (10016928 <gapm_resolv_addr_cmd_handler+0x64>)
10016910:	4798      	blx	r3
10016912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016914:	1001d27c 	.word	0x1001d27c
10016918:	1001cf0c 	.word	0x1001cf0c
1001691c:	10018e1b 	.word	0x10018e1b
10016920:	1001d286 	.word	0x1001d286
10016924:	1001d28c 	.word	0x1001d28c
10016928:	10015709 	.word	0x10015709

1001692c <gapm_addr_solved_ind_handler>:
1001692c:	b570      	push	{r4, r5, r6, lr}
1001692e:	1c04      	adds	r4, r0, #0
10016930:	1c08      	adds	r0, r1, #0
10016932:	1c0d      	adds	r5, r1, #0
10016934:	4e05      	ldr	r6, [pc, #20]	; (1001694c <gapm_addr_solved_ind_handler+0x20>)
10016936:	1c21      	adds	r1, r4, #0
10016938:	2206      	movs	r2, #6
1001693a:	3011      	adds	r0, #17
1001693c:	47b0      	blx	r6
1001693e:	1c68      	adds	r0, r5, #1
10016940:	1da1      	adds	r1, r4, #6
10016942:	2210      	movs	r2, #16
10016944:	47b0      	blx	r6
10016946:	2300      	movs	r3, #0
10016948:	702b      	strb	r3, [r5, #0]
1001694a:	bd70      	pop	{r4, r5, r6, pc}
1001694c:	10018e1b 	.word	0x10018e1b

10016950 <gapm_profile_added_ind_handler>:
10016950:	b510      	push	{r4, lr}
10016952:	7843      	ldrb	r3, [r0, #1]
10016954:	7902      	ldrb	r2, [r0, #4]
10016956:	7944      	ldrb	r4, [r0, #5]
10016958:	7800      	ldrb	r0, [r0, #0]
1001695a:	021b      	lsls	r3, r3, #8
1001695c:	4303      	orrs	r3, r0
1001695e:	2b1b      	cmp	r3, #27
10016960:	d104      	bne.n	1001696c <gapm_profile_added_ind_handler+0x1c>
10016962:	2300      	movs	r3, #0
10016964:	700b      	strb	r3, [r1, #0]
10016966:	0223      	lsls	r3, r4, #8
10016968:	4313      	orrs	r3, r2
1001696a:	804b      	strh	r3, [r1, #2]
1001696c:	203b      	movs	r0, #59	; 0x3b
1001696e:	bd10      	pop	{r4, pc}

10016970 <gattc_read_req_ind_parser>:
10016970:	7843      	ldrb	r3, [r0, #1]
10016972:	7802      	ldrb	r2, [r0, #0]
10016974:	021b      	lsls	r3, r3, #8
10016976:	4313      	orrs	r3, r2
10016978:	804b      	strh	r3, [r1, #2]
1001697a:	4770      	bx	lr

1001697c <gattc_write_req_ind_parser>:
1001697c:	b508      	push	{r3, lr}
1001697e:	1c13      	adds	r3, r2, #0
10016980:	0a00      	lsrs	r0, r0, #8
10016982:	8010      	strh	r0, [r2, #0]
10016984:	784a      	ldrb	r2, [r1, #1]
10016986:	7808      	ldrb	r0, [r1, #0]
10016988:	0212      	lsls	r2, r2, #8
1001698a:	4302      	orrs	r2, r0
1001698c:	805a      	strh	r2, [r3, #2]
1001698e:	78ca      	ldrb	r2, [r1, #3]
10016990:	7888      	ldrb	r0, [r1, #2]
10016992:	0212      	lsls	r2, r2, #8
10016994:	4302      	orrs	r2, r0
10016996:	809a      	strh	r2, [r3, #4]
10016998:	794a      	ldrb	r2, [r1, #5]
1001699a:	7908      	ldrb	r0, [r1, #4]
1001699c:	0212      	lsls	r2, r2, #8
1001699e:	4302      	orrs	r2, r0
100169a0:	80da      	strh	r2, [r3, #6]
100169a2:	3308      	adds	r3, #8
100169a4:	1c18      	adds	r0, r3, #0
100169a6:	3106      	adds	r1, #6
100169a8:	4b01      	ldr	r3, [pc, #4]	; (100169b0 <gattc_write_req_ind_parser+0x34>)
100169aa:	4798      	blx	r3
100169ac:	bd08      	pop	{r3, pc}
100169ae:	46c0      	nop			; (mov r8, r8)
100169b0:	10018e1b 	.word	0x10018e1b

100169b4 <gattc_att_info_req_parser>:
100169b4:	7843      	ldrb	r3, [r0, #1]
100169b6:	7802      	ldrb	r2, [r0, #0]
100169b8:	021b      	lsls	r3, r3, #8
100169ba:	4313      	orrs	r3, r2
100169bc:	800b      	strh	r3, [r1, #0]
100169be:	4770      	bx	lr

100169c0 <gattc_read_cfm>:
100169c0:	b538      	push	{r3, r4, r5, lr}
100169c2:	2514      	movs	r5, #20
100169c4:	1c1c      	adds	r4, r3, #0
100169c6:	4b14      	ldr	r3, [pc, #80]	; (10016a18 <gattc_read_cfm+0x58>)
100169c8:	70d9      	strb	r1, [r3, #3]
100169ca:	4914      	ldr	r1, [pc, #80]	; (10016a1c <gattc_read_cfm+0x5c>)
100169cc:	701d      	strb	r5, [r3, #0]
100169ce:	3d08      	subs	r5, #8
100169d0:	705d      	strb	r5, [r3, #1]
100169d2:	709d      	strb	r5, [r3, #2]
100169d4:	880d      	ldrh	r5, [r1, #0]
100169d6:	8809      	ldrh	r1, [r1, #0]
100169d8:	7218      	strb	r0, [r3, #8]
100169da:	0a09      	lsrs	r1, r1, #8
100169dc:	7159      	strb	r1, [r3, #5]
100169de:	0a00      	lsrs	r0, r0, #8
100169e0:	0a21      	lsrs	r1, r4, #8
100169e2:	711d      	strb	r5, [r3, #4]
100169e4:	7258      	strb	r0, [r3, #9]
100169e6:	729c      	strb	r4, [r3, #10]
100169e8:	72d9      	strb	r1, [r3, #11]
100169ea:	731a      	strb	r2, [r3, #12]
100169ec:	1c1d      	adds	r5, r3, #0
100169ee:	2c00      	cmp	r4, #0
100169f0:	d007      	beq.n	10016a02 <gattc_read_cfm+0x42>
100169f2:	9904      	ldr	r1, [sp, #16]
100169f4:	1c22      	adds	r2, r4, #0
100169f6:	480a      	ldr	r0, [pc, #40]	; (10016a20 <gattc_read_cfm+0x60>)
100169f8:	4b0a      	ldr	r3, [pc, #40]	; (10016a24 <gattc_read_cfm+0x64>)
100169fa:	340d      	adds	r4, #13
100169fc:	4798      	blx	r3
100169fe:	b2a1      	uxth	r1, r4
10016a00:	e001      	b.n	10016a06 <gattc_read_cfm+0x46>
10016a02:	210e      	movs	r1, #14
10016a04:	735c      	strb	r4, [r3, #13]
10016a06:	1c0b      	adds	r3, r1, #0
10016a08:	3b08      	subs	r3, #8
10016a0a:	71ab      	strb	r3, [r5, #6]
10016a0c:	121b      	asrs	r3, r3, #8
10016a0e:	71eb      	strb	r3, [r5, #7]
10016a10:	1c28      	adds	r0, r5, #0
10016a12:	4b05      	ldr	r3, [pc, #20]	; (10016a28 <gattc_read_cfm+0x68>)
10016a14:	4798      	blx	r3
10016a16:	bd38      	pop	{r3, r4, r5, pc}
10016a18:	1001d27c 	.word	0x1001d27c
10016a1c:	1001cf0c 	.word	0x1001cf0c
10016a20:	1001d289 	.word	0x1001d289
10016a24:	10018e1b 	.word	0x10018e1b
10016a28:	10015709 	.word	0x10015709

10016a2c <gattc_write_cfm>:
10016a2c:	4b0d      	ldr	r3, [pc, #52]	; (10016a64 <gattc_write_cfm+0x38>)
10016a2e:	b510      	push	{r4, lr}
10016a30:	729a      	strb	r2, [r3, #10]
10016a32:	2203      	movs	r2, #3
10016a34:	2416      	movs	r4, #22
10016a36:	719a      	strb	r2, [r3, #6]
10016a38:	2200      	movs	r2, #0
10016a3a:	70d9      	strb	r1, [r3, #3]
10016a3c:	490a      	ldr	r1, [pc, #40]	; (10016a68 <gattc_write_cfm+0x3c>)
10016a3e:	701c      	strb	r4, [r3, #0]
10016a40:	3c0a      	subs	r4, #10
10016a42:	705c      	strb	r4, [r3, #1]
10016a44:	709c      	strb	r4, [r3, #2]
10016a46:	880c      	ldrh	r4, [r1, #0]
10016a48:	8809      	ldrh	r1, [r1, #0]
10016a4a:	7218      	strb	r0, [r3, #8]
10016a4c:	0a09      	lsrs	r1, r1, #8
10016a4e:	0a00      	lsrs	r0, r0, #8
10016a50:	711c      	strb	r4, [r3, #4]
10016a52:	7159      	strb	r1, [r3, #5]
10016a54:	7258      	strb	r0, [r3, #9]
10016a56:	71da      	strb	r2, [r3, #7]
10016a58:	1c18      	adds	r0, r3, #0
10016a5a:	210b      	movs	r1, #11
10016a5c:	4b03      	ldr	r3, [pc, #12]	; (10016a6c <gattc_write_cfm+0x40>)
10016a5e:	4798      	blx	r3
10016a60:	bd10      	pop	{r4, pc}
10016a62:	46c0      	nop			; (mov r8, r8)
10016a64:	1001d27c 	.word	0x1001d27c
10016a68:	1001cf0c 	.word	0x1001cf0c
10016a6c:	10015709 	.word	0x10015709

10016a70 <gattc_att_info_cfm>:
10016a70:	b538      	push	{r3, r4, r5, lr}
10016a72:	4c0e      	ldr	r4, [pc, #56]	; (10016aac <gattc_att_info_cfm+0x3c>)
10016a74:	2518      	movs	r5, #24
10016a76:	7323      	strb	r3, [r4, #12]
10016a78:	2305      	movs	r3, #5
10016a7a:	71a3      	strb	r3, [r4, #6]
10016a7c:	2300      	movs	r3, #0
10016a7e:	70e1      	strb	r1, [r4, #3]
10016a80:	490b      	ldr	r1, [pc, #44]	; (10016ab0 <gattc_att_info_cfm+0x40>)
10016a82:	7025      	strb	r5, [r4, #0]
10016a84:	3d0c      	subs	r5, #12
10016a86:	7065      	strb	r5, [r4, #1]
10016a88:	70a5      	strb	r5, [r4, #2]
10016a8a:	880d      	ldrh	r5, [r1, #0]
10016a8c:	8809      	ldrh	r1, [r1, #0]
10016a8e:	7220      	strb	r0, [r4, #8]
10016a90:	0a09      	lsrs	r1, r1, #8
10016a92:	0a00      	lsrs	r0, r0, #8
10016a94:	7161      	strb	r1, [r4, #5]
10016a96:	7260      	strb	r0, [r4, #9]
10016a98:	72a2      	strb	r2, [r4, #10]
10016a9a:	71e3      	strb	r3, [r4, #7]
10016a9c:	0a12      	lsrs	r2, r2, #8
10016a9e:	1c20      	adds	r0, r4, #0
10016aa0:	210d      	movs	r1, #13
10016aa2:	4b04      	ldr	r3, [pc, #16]	; (10016ab4 <gattc_att_info_cfm+0x44>)
10016aa4:	7125      	strb	r5, [r4, #4]
10016aa6:	72e2      	strb	r2, [r4, #11]
10016aa8:	4798      	blx	r3
10016aaa:	bd38      	pop	{r3, r4, r5, pc}
10016aac:	1001d27c 	.word	0x1001d27c
10016ab0:	1001cf0c 	.word	0x1001cf0c
10016ab4:	10015709 	.word	0x10015709

10016ab8 <gattc_send_evt_cmd_handler>:
10016ab8:	b570      	push	{r4, r5, r6, lr}
10016aba:	2610      	movs	r6, #16
10016abc:	ac04      	add	r4, sp, #16
10016abe:	8825      	ldrh	r5, [r4, #0]
10016ac0:	4c15      	ldr	r4, [pc, #84]	; (10016b18 <gattc_send_evt_cmd_handler+0x60>)
10016ac2:	70e2      	strb	r2, [r4, #3]
10016ac4:	4a15      	ldr	r2, [pc, #84]	; (10016b1c <gattc_send_evt_cmd_handler+0x64>)
10016ac6:	7026      	strb	r6, [r4, #0]
10016ac8:	3e04      	subs	r6, #4
10016aca:	7066      	strb	r6, [r4, #1]
10016acc:	70a6      	strb	r6, [r4, #2]
10016ace:	8816      	ldrh	r6, [r2, #0]
10016ad0:	8812      	ldrh	r2, [r2, #0]
10016ad2:	7220      	strb	r0, [r4, #8]
10016ad4:	0a12      	lsrs	r2, r2, #8
10016ad6:	7162      	strb	r2, [r4, #5]
10016ad8:	4a11      	ldr	r2, [pc, #68]	; (10016b20 <gattc_send_evt_cmd_handler+0x68>)
10016ada:	7321      	strb	r1, [r4, #12]
10016adc:	8812      	ldrh	r2, [r2, #0]
10016ade:	73a5      	strb	r5, [r4, #14]
10016ae0:	3201      	adds	r2, #1
10016ae2:	7262      	strb	r2, [r4, #9]
10016ae4:	1212      	asrs	r2, r2, #8
10016ae6:	72a2      	strb	r2, [r4, #10]
10016ae8:	2200      	movs	r2, #0
10016aea:	72e2      	strb	r2, [r4, #11]
10016aec:	0a0a      	lsrs	r2, r1, #8
10016aee:	7362      	strb	r2, [r4, #13]
10016af0:	0a2a      	lsrs	r2, r5, #8
10016af2:	73e2      	strb	r2, [r4, #15]
10016af4:	1c19      	adds	r1, r3, #0
10016af6:	1c2a      	adds	r2, r5, #0
10016af8:	4b0a      	ldr	r3, [pc, #40]	; (10016b24 <gattc_send_evt_cmd_handler+0x6c>)
10016afa:	3510      	adds	r5, #16
10016afc:	480a      	ldr	r0, [pc, #40]	; (10016b28 <gattc_send_evt_cmd_handler+0x70>)
10016afe:	7126      	strb	r6, [r4, #4]
10016b00:	4798      	blx	r3
10016b02:	b2a9      	uxth	r1, r5
10016b04:	1c0b      	adds	r3, r1, #0
10016b06:	3b08      	subs	r3, #8
10016b08:	71a3      	strb	r3, [r4, #6]
10016b0a:	121b      	asrs	r3, r3, #8
10016b0c:	71e3      	strb	r3, [r4, #7]
10016b0e:	1c20      	adds	r0, r4, #0
10016b10:	4b06      	ldr	r3, [pc, #24]	; (10016b2c <gattc_send_evt_cmd_handler+0x74>)
10016b12:	4798      	blx	r3
10016b14:	bd70      	pop	{r4, r5, r6, pc}
10016b16:	46c0      	nop			; (mov r8, r8)
10016b18:	1001d27c 	.word	0x1001d27c
10016b1c:	1001cf0c 	.word	0x1001cf0c
10016b20:	1001c098 	.word	0x1001c098
10016b24:	10018e1b 	.word	0x10018e1b
10016b28:	1001d28c 	.word	0x1001d28c
10016b2c:	10015709 	.word	0x10015709

10016b30 <gattc_event_cfm_handler>:
10016b30:	220e      	movs	r2, #14
10016b32:	b508      	push	{r3, lr}
10016b34:	4b0b      	ldr	r3, [pc, #44]	; (10016b64 <gattc_event_cfm_handler+0x34>)
10016b36:	701a      	strb	r2, [r3, #0]
10016b38:	3a02      	subs	r2, #2
10016b3a:	705a      	strb	r2, [r3, #1]
10016b3c:	709a      	strb	r2, [r3, #2]
10016b3e:	4a0a      	ldr	r2, [pc, #40]	; (10016b68 <gattc_event_cfm_handler+0x38>)
10016b40:	70d8      	strb	r0, [r3, #3]
10016b42:	8810      	ldrh	r0, [r2, #0]
10016b44:	8812      	ldrh	r2, [r2, #0]
10016b46:	7219      	strb	r1, [r3, #8]
10016b48:	0a12      	lsrs	r2, r2, #8
10016b4a:	715a      	strb	r2, [r3, #5]
10016b4c:	2202      	movs	r2, #2
10016b4e:	719a      	strb	r2, [r3, #6]
10016b50:	2200      	movs	r2, #0
10016b52:	0a09      	lsrs	r1, r1, #8
10016b54:	7118      	strb	r0, [r3, #4]
10016b56:	7259      	strb	r1, [r3, #9]
10016b58:	71da      	strb	r2, [r3, #7]
10016b5a:	1c18      	adds	r0, r3, #0
10016b5c:	210a      	movs	r1, #10
10016b5e:	4b03      	ldr	r3, [pc, #12]	; (10016b6c <gattc_event_cfm_handler+0x3c>)
10016b60:	4798      	blx	r3
10016b62:	bd08      	pop	{r3, pc}
10016b64:	1001d27c 	.word	0x1001d27c
10016b68:	1001cf0c 	.word	0x1001cf0c
10016b6c:	10015709 	.word	0x10015709

10016b70 <gattc_disc_svc_ind_parser>:
10016b70:	b570      	push	{r4, r5, r6, lr}
10016b72:	1c15      	adds	r5, r2, #0
10016b74:	0a00      	lsrs	r0, r0, #8
10016b76:	8010      	strh	r0, [r2, #0]
10016b78:	784b      	ldrb	r3, [r1, #1]
10016b7a:	780a      	ldrb	r2, [r1, #0]
10016b7c:	021b      	lsls	r3, r3, #8
10016b7e:	4313      	orrs	r3, r2
10016b80:	806b      	strh	r3, [r5, #2]
10016b82:	78cb      	ldrb	r3, [r1, #3]
10016b84:	788a      	ldrb	r2, [r1, #2]
10016b86:	021b      	lsls	r3, r3, #8
10016b88:	4313      	orrs	r3, r2
10016b8a:	80ab      	strh	r3, [r5, #4]
10016b8c:	790e      	ldrb	r6, [r1, #4]
10016b8e:	4b05      	ldr	r3, [pc, #20]	; (10016ba4 <gattc_disc_svc_ind_parser+0x34>)
10016b90:	1c30      	adds	r0, r6, #0
10016b92:	1c0c      	adds	r4, r1, #0
10016b94:	4798      	blx	r3
10016b96:	1c32      	adds	r2, r6, #0
10016b98:	71a8      	strb	r0, [r5, #6]
10016b9a:	1d61      	adds	r1, r4, #5
10016b9c:	1de8      	adds	r0, r5, #7
10016b9e:	4b02      	ldr	r3, [pc, #8]	; (10016ba8 <gattc_disc_svc_ind_parser+0x38>)
10016ba0:	4798      	blx	r3
10016ba2:	bd70      	pop	{r4, r5, r6, pc}
10016ba4:	10014a71 	.word	0x10014a71
10016ba8:	10018e1b 	.word	0x10018e1b

10016bac <gattc_disc_svc_incl_ind_parser>:
10016bac:	b570      	push	{r4, r5, r6, lr}
10016bae:	1c15      	adds	r5, r2, #0
10016bb0:	0a00      	lsrs	r0, r0, #8
10016bb2:	8010      	strh	r0, [r2, #0]
10016bb4:	784b      	ldrb	r3, [r1, #1]
10016bb6:	780a      	ldrb	r2, [r1, #0]
10016bb8:	021b      	lsls	r3, r3, #8
10016bba:	4313      	orrs	r3, r2
10016bbc:	806b      	strh	r3, [r5, #2]
10016bbe:	78cb      	ldrb	r3, [r1, #3]
10016bc0:	788a      	ldrb	r2, [r1, #2]
10016bc2:	021b      	lsls	r3, r3, #8
10016bc4:	4313      	orrs	r3, r2
10016bc6:	80ab      	strh	r3, [r5, #4]
10016bc8:	794b      	ldrb	r3, [r1, #5]
10016bca:	790a      	ldrb	r2, [r1, #4]
10016bcc:	021b      	lsls	r3, r3, #8
10016bce:	4313      	orrs	r3, r2
10016bd0:	80eb      	strh	r3, [r5, #6]
10016bd2:	798e      	ldrb	r6, [r1, #6]
10016bd4:	4b05      	ldr	r3, [pc, #20]	; (10016bec <gattc_disc_svc_incl_ind_parser+0x40>)
10016bd6:	1c30      	adds	r0, r6, #0
10016bd8:	1c0c      	adds	r4, r1, #0
10016bda:	4798      	blx	r3
10016bdc:	7228      	strb	r0, [r5, #8]
10016bde:	1c28      	adds	r0, r5, #0
10016be0:	1c32      	adds	r2, r6, #0
10016be2:	1de1      	adds	r1, r4, #7
10016be4:	4b02      	ldr	r3, [pc, #8]	; (10016bf0 <gattc_disc_svc_incl_ind_parser+0x44>)
10016be6:	3009      	adds	r0, #9
10016be8:	4798      	blx	r3
10016bea:	bd70      	pop	{r4, r5, r6, pc}
10016bec:	10014a71 	.word	0x10014a71
10016bf0:	10018e1b 	.word	0x10018e1b

10016bf4 <gattc_disc_char_ind_parser>:
10016bf4:	b570      	push	{r4, r5, r6, lr}
10016bf6:	1c15      	adds	r5, r2, #0
10016bf8:	0a00      	lsrs	r0, r0, #8
10016bfa:	8010      	strh	r0, [r2, #0]
10016bfc:	784b      	ldrb	r3, [r1, #1]
10016bfe:	780a      	ldrb	r2, [r1, #0]
10016c00:	021b      	lsls	r3, r3, #8
10016c02:	4313      	orrs	r3, r2
10016c04:	806b      	strh	r3, [r5, #2]
10016c06:	78cb      	ldrb	r3, [r1, #3]
10016c08:	788a      	ldrb	r2, [r1, #2]
10016c0a:	021b      	lsls	r3, r3, #8
10016c0c:	4313      	orrs	r3, r2
10016c0e:	80ab      	strh	r3, [r5, #4]
10016c10:	790b      	ldrb	r3, [r1, #4]
10016c12:	1c0c      	adds	r4, r1, #0
10016c14:	71ab      	strb	r3, [r5, #6]
10016c16:	794e      	ldrb	r6, [r1, #5]
10016c18:	4b05      	ldr	r3, [pc, #20]	; (10016c30 <gattc_disc_char_ind_parser+0x3c>)
10016c1a:	1c30      	adds	r0, r6, #0
10016c1c:	4798      	blx	r3
10016c1e:	71e8      	strb	r0, [r5, #7]
10016c20:	1c28      	adds	r0, r5, #0
10016c22:	1c32      	adds	r2, r6, #0
10016c24:	1da1      	adds	r1, r4, #6
10016c26:	4b03      	ldr	r3, [pc, #12]	; (10016c34 <gattc_disc_char_ind_parser+0x40>)
10016c28:	3008      	adds	r0, #8
10016c2a:	4798      	blx	r3
10016c2c:	bd70      	pop	{r4, r5, r6, pc}
10016c2e:	46c0      	nop			; (mov r8, r8)
10016c30:	10014a71 	.word	0x10014a71
10016c34:	10018e1b 	.word	0x10018e1b

10016c38 <gattc_disc_char_desc_ind_parser>:
10016c38:	b570      	push	{r4, r5, r6, lr}
10016c3a:	1c15      	adds	r5, r2, #0
10016c3c:	0a00      	lsrs	r0, r0, #8
10016c3e:	8010      	strh	r0, [r2, #0]
10016c40:	784b      	ldrb	r3, [r1, #1]
10016c42:	780a      	ldrb	r2, [r1, #0]
10016c44:	021b      	lsls	r3, r3, #8
10016c46:	4313      	orrs	r3, r2
10016c48:	806b      	strh	r3, [r5, #2]
10016c4a:	788e      	ldrb	r6, [r1, #2]
10016c4c:	4b05      	ldr	r3, [pc, #20]	; (10016c64 <gattc_disc_char_desc_ind_parser+0x2c>)
10016c4e:	1c30      	adds	r0, r6, #0
10016c50:	1c0c      	adds	r4, r1, #0
10016c52:	4798      	blx	r3
10016c54:	1c32      	adds	r2, r6, #0
10016c56:	7128      	strb	r0, [r5, #4]
10016c58:	1ce1      	adds	r1, r4, #3
10016c5a:	1d68      	adds	r0, r5, #5
10016c5c:	4b02      	ldr	r3, [pc, #8]	; (10016c68 <gattc_disc_char_desc_ind_parser+0x30>)
10016c5e:	4798      	blx	r3
10016c60:	bd70      	pop	{r4, r5, r6, pc}
10016c62:	46c0      	nop			; (mov r8, r8)
10016c64:	10014a71 	.word	0x10014a71
10016c68:	10018e1b 	.word	0x10018e1b

10016c6c <gattc_event_ind_and_notification_parser>:
10016c6c:	b510      	push	{r4, lr}
10016c6e:	780c      	ldrb	r4, [r1, #0]
10016c70:	1c13      	adds	r3, r2, #0
10016c72:	2c12      	cmp	r4, #18
10016c74:	d10e      	bne.n	10016c94 <gattc_event_ind_and_notification_parser+0x28>
10016c76:	0a00      	lsrs	r0, r0, #8
10016c78:	8010      	strh	r0, [r2, #0]
10016c7a:	788a      	ldrb	r2, [r1, #2]
10016c7c:	709a      	strb	r2, [r3, #2]
10016c7e:	7948      	ldrb	r0, [r1, #5]
10016c80:	790c      	ldrb	r4, [r1, #4]
10016c82:	0200      	lsls	r0, r0, #8
10016c84:	4320      	orrs	r0, r4
10016c86:	8098      	strh	r0, [r3, #4]
10016c88:	3106      	adds	r1, #6
10016c8a:	1d98      	adds	r0, r3, #6
10016c8c:	4b0b      	ldr	r3, [pc, #44]	; (10016cbc <gattc_event_ind_and_notification_parser+0x50>)
10016c8e:	4798      	blx	r3
10016c90:	221b      	movs	r2, #27
10016c92:	e010      	b.n	10016cb6 <gattc_event_ind_and_notification_parser+0x4a>
10016c94:	2200      	movs	r2, #0
10016c96:	2c13      	cmp	r4, #19
10016c98:	d10d      	bne.n	10016cb6 <gattc_event_ind_and_notification_parser+0x4a>
10016c9a:	0a00      	lsrs	r0, r0, #8
10016c9c:	8018      	strh	r0, [r3, #0]
10016c9e:	788a      	ldrb	r2, [r1, #2]
10016ca0:	709a      	strb	r2, [r3, #2]
10016ca2:	7908      	ldrb	r0, [r1, #4]
10016ca4:	78cc      	ldrb	r4, [r1, #3]
10016ca6:	0200      	lsls	r0, r0, #8
10016ca8:	4320      	orrs	r0, r4
10016caa:	8098      	strh	r0, [r3, #4]
10016cac:	3106      	adds	r1, #6
10016cae:	1d98      	adds	r0, r3, #6
10016cb0:	4b02      	ldr	r3, [pc, #8]	; (10016cbc <gattc_event_ind_and_notification_parser+0x50>)
10016cb2:	4798      	blx	r3
10016cb4:	221c      	movs	r2, #28
10016cb6:	1c10      	adds	r0, r2, #0
10016cb8:	bd10      	pop	{r4, pc}
10016cba:	46c0      	nop			; (mov r8, r8)
10016cbc:	10018e1b 	.word	0x10018e1b

10016cc0 <gattc_complete_evt_handler>:
10016cc0:	b500      	push	{lr}
10016cc2:	0a00      	lsrs	r0, r0, #8
10016cc4:	8010      	strh	r0, [r2, #0]
10016cc6:	7808      	ldrb	r0, [r1, #0]
10016cc8:	7090      	strb	r0, [r2, #2]
10016cca:	784b      	ldrb	r3, [r1, #1]
10016ccc:	3801      	subs	r0, #1
10016cce:	70d3      	strb	r3, [r2, #3]
10016cd0:	2813      	cmp	r0, #19
10016cd2:	d82c      	bhi.n	10016d2e <gattc_complete_evt_handler+0x6e>
10016cd4:	f000 f9dc 	bl	10017090 <__gnu_thumb1_case_uqi>
10016cd8:	0a0a0a0c 	.word	0x0a0a0a0c
10016cdc:	210a0a0a 	.word	0x210a0a0a
10016ce0:	111f2121 	.word	0x111f2121
10016ce4:	2b111111 	.word	0x2b111111
10016ce8:	2919132b 	.word	0x2919132b
10016cec:	2017      	movs	r0, #23
10016cee:	e01f      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016cf0:	2024      	movs	r0, #36	; 0x24
10016cf2:	2b00      	cmp	r3, #0
10016cf4:	d11c      	bne.n	10016d30 <gattc_complete_evt_handler+0x70>
10016cf6:	3017      	adds	r0, #23
10016cf8:	e01a      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016cfa:	2025      	movs	r0, #37	; 0x25
10016cfc:	e018      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016cfe:	4a0d      	ldr	r2, [pc, #52]	; (10016d34 <gattc_complete_evt_handler+0x74>)
10016d00:	201d      	movs	r0, #29
10016d02:	6813      	ldr	r3, [r2, #0]
10016d04:	3b01      	subs	r3, #1
10016d06:	6013      	str	r3, [r2, #0]
10016d08:	e012      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016d0a:	4a0a      	ldr	r2, [pc, #40]	; (10016d34 <gattc_complete_evt_handler+0x74>)
10016d0c:	201e      	movs	r0, #30
10016d0e:	6813      	ldr	r3, [r2, #0]
10016d10:	3b01      	subs	r3, #1
10016d12:	6013      	str	r3, [r2, #0]
10016d14:	e00c      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016d16:	2019      	movs	r0, #25
10016d18:	e00a      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016d1a:	203b      	movs	r0, #59	; 0x3b
10016d1c:	2b00      	cmp	r3, #0
10016d1e:	d007      	beq.n	10016d30 <gattc_complete_evt_handler+0x70>
10016d20:	2182      	movs	r1, #130	; 0x82
10016d22:	0089      	lsls	r1, r1, #2
10016d24:	5453      	strb	r3, [r2, r1]
10016d26:	3823      	subs	r0, #35	; 0x23
10016d28:	e002      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016d2a:	2021      	movs	r0, #33	; 0x21
10016d2c:	e000      	b.n	10016d30 <gattc_complete_evt_handler+0x70>
10016d2e:	2000      	movs	r0, #0
10016d30:	bd00      	pop	{pc}
10016d32:	46c0      	nop			; (mov r8, r8)
10016d34:	1001c09c 	.word	0x1001c09c

10016d38 <gattc_event_mtu_changed_ind_parser>:
10016d38:	0a00      	lsrs	r0, r0, #8
10016d3a:	8010      	strh	r0, [r2, #0]
10016d3c:	784b      	ldrb	r3, [r1, #1]
10016d3e:	7809      	ldrb	r1, [r1, #0]
10016d40:	021b      	lsls	r3, r3, #8
10016d42:	430b      	orrs	r3, r1
10016d44:	8053      	strh	r3, [r2, #2]
10016d46:	4770      	bx	lr

10016d48 <gattc_read_ind_parser>:
10016d48:	0a00      	lsrs	r0, r0, #8
10016d4a:	b508      	push	{r3, lr}
10016d4c:	8010      	strh	r0, [r2, #0]
10016d4e:	1c13      	adds	r3, r2, #0
10016d50:	2282      	movs	r2, #130	; 0x82
10016d52:	2000      	movs	r0, #0
10016d54:	0092      	lsls	r2, r2, #2
10016d56:	5498      	strb	r0, [r3, r2]
10016d58:	784a      	ldrb	r2, [r1, #1]
10016d5a:	7808      	ldrb	r0, [r1, #0]
10016d5c:	0212      	lsls	r2, r2, #8
10016d5e:	4302      	orrs	r2, r0
10016d60:	805a      	strh	r2, [r3, #2]
10016d62:	78ca      	ldrb	r2, [r1, #3]
10016d64:	7888      	ldrb	r0, [r1, #2]
10016d66:	0212      	lsls	r2, r2, #8
10016d68:	4302      	orrs	r2, r0
10016d6a:	80da      	strh	r2, [r3, #6]
10016d6c:	794a      	ldrb	r2, [r1, #5]
10016d6e:	7908      	ldrb	r0, [r1, #4]
10016d70:	0212      	lsls	r2, r2, #8
10016d72:	4302      	orrs	r2, r0
10016d74:	809a      	strh	r2, [r3, #4]
10016d76:	3308      	adds	r3, #8
10016d78:	1c18      	adds	r0, r3, #0
10016d7a:	3106      	adds	r1, #6
10016d7c:	4b01      	ldr	r3, [pc, #4]	; (10016d84 <gattc_read_ind_parser+0x3c>)
10016d7e:	4798      	blx	r3
10016d80:	bd08      	pop	{r3, pc}
10016d82:	46c0      	nop			; (mov r8, r8)
10016d84:	10018e1b 	.word	0x10018e1b

10016d88 <gattc_svc_changed_cfg_ind_parser>:
10016d88:	0a00      	lsrs	r0, r0, #8
10016d8a:	8010      	strh	r0, [r2, #0]
10016d8c:	784b      	ldrb	r3, [r1, #1]
10016d8e:	7809      	ldrb	r1, [r1, #0]
10016d90:	021b      	lsls	r3, r3, #8
10016d92:	430b      	orrs	r3, r1
10016d94:	8053      	strh	r3, [r2, #2]
10016d96:	4770      	bx	lr

10016d98 <init_gattc_task_module>:
10016d98:	2300      	movs	r3, #0
10016d9a:	4a02      	ldr	r2, [pc, #8]	; (10016da4 <init_gattc_task_module+0xc>)
10016d9c:	8013      	strh	r3, [r2, #0]
10016d9e:	4a02      	ldr	r2, [pc, #8]	; (10016da8 <init_gattc_task_module+0x10>)
10016da0:	8013      	strh	r3, [r2, #0]
10016da2:	4770      	bx	lr
10016da4:	1001c096 	.word	0x1001c096
10016da8:	1001c098 	.word	0x1001c098

10016dac <gattm_add_svc_req_handler>:
10016dac:	2200      	movs	r2, #0
10016dae:	210b      	movs	r1, #11
10016db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10016db2:	1c04      	adds	r4, r0, #0
10016db4:	7943      	ldrb	r3, [r0, #5]
10016db6:	b085      	sub	sp, #20
10016db8:	9301      	str	r3, [sp, #4]
10016dba:	ab02      	add	r3, sp, #8
10016dbc:	71da      	strb	r2, [r3, #7]
10016dbe:	4b37      	ldr	r3, [pc, #220]	; (10016e9c <gattm_add_svc_req_handler+0xf0>)
10016dc0:	7059      	strb	r1, [r3, #1]
10016dc2:	7099      	strb	r1, [r3, #2]
10016dc4:	4936      	ldr	r1, [pc, #216]	; (10016ea0 <gattm_add_svc_req_handler+0xf4>)
10016dc6:	701a      	strb	r2, [r3, #0]
10016dc8:	8808      	ldrh	r0, [r1, #0]
10016dca:	8809      	ldrh	r1, [r1, #0]
10016dcc:	70da      	strb	r2, [r3, #3]
10016dce:	0a09      	lsrs	r1, r1, #8
10016dd0:	7118      	strb	r0, [r3, #4]
10016dd2:	7159      	strb	r1, [r3, #5]
10016dd4:	8821      	ldrh	r1, [r4, #0]
10016dd6:	7219      	strb	r1, [r3, #8]
10016dd8:	8821      	ldrh	r1, [r4, #0]
10016dda:	0a09      	lsrs	r1, r1, #8
10016ddc:	7259      	strb	r1, [r3, #9]
10016dde:	8861      	ldrh	r1, [r4, #2]
10016de0:	7299      	strb	r1, [r3, #10]
10016de2:	8861      	ldrh	r1, [r4, #2]
10016de4:	0a09      	lsrs	r1, r1, #8
10016de6:	72d9      	strb	r1, [r3, #11]
10016de8:	7921      	ldrb	r1, [r4, #4]
10016dea:	7319      	strb	r1, [r3, #12]
10016dec:	4669      	mov	r1, sp
10016dee:	7909      	ldrb	r1, [r1, #4]
10016df0:	7359      	strb	r1, [r3, #13]
10016df2:	18a1      	adds	r1, r4, r2
10016df4:	7988      	ldrb	r0, [r1, #6]
10016df6:	1899      	adds	r1, r3, r2
10016df8:	3201      	adds	r2, #1
10016dfa:	7388      	strb	r0, [r1, #14]
10016dfc:	2a10      	cmp	r2, #16
10016dfe:	d1f8      	bne.n	10016df2 <gattm_add_svc_req_handler+0x46>
10016e00:	1c27      	adds	r7, r4, #0
10016e02:	2300      	movs	r3, #0
10016e04:	251e      	movs	r5, #30
10016e06:	3716      	adds	r7, #22
10016e08:	9300      	str	r3, [sp, #0]
10016e0a:	9b00      	ldr	r3, [sp, #0]
10016e0c:	9a01      	ldr	r2, [sp, #4]
10016e0e:	4e23      	ldr	r6, [pc, #140]	; (10016e9c <gattm_add_svc_req_handler+0xf0>)
10016e10:	4293      	cmp	r3, r2
10016e12:	da21      	bge.n	10016e58 <gattm_add_svc_req_handler+0xac>
10016e14:	1c39      	adds	r1, r7, #0
10016e16:	1970      	adds	r0, r6, r5
10016e18:	2210      	movs	r2, #16
10016e1a:	4b22      	ldr	r3, [pc, #136]	; (10016ea4 <gattm_add_svc_req_handler+0xf8>)
10016e1c:	4798      	blx	r3
10016e1e:	1c2b      	adds	r3, r5, #0
10016e20:	8a3a      	ldrh	r2, [r7, #16]
10016e22:	3310      	adds	r3, #16
10016e24:	b29b      	uxth	r3, r3
10016e26:	54f2      	strb	r2, [r6, r3]
10016e28:	1c2b      	adds	r3, r5, #0
10016e2a:	8a3a      	ldrh	r2, [r7, #16]
10016e2c:	3311      	adds	r3, #17
10016e2e:	b29b      	uxth	r3, r3
10016e30:	0a12      	lsrs	r2, r2, #8
10016e32:	54f2      	strb	r2, [r6, r3]
10016e34:	1c2a      	adds	r2, r5, #0
10016e36:	1c2b      	adds	r3, r5, #0
10016e38:	8a79      	ldrh	r1, [r7, #18]
10016e3a:	3212      	adds	r2, #18
10016e3c:	b292      	uxth	r2, r2
10016e3e:	54b1      	strb	r1, [r6, r2]
10016e40:	8a7a      	ldrh	r2, [r7, #18]
10016e42:	3313      	adds	r3, #19
10016e44:	b29b      	uxth	r3, r3
10016e46:	0a12      	lsrs	r2, r2, #8
10016e48:	54f2      	strb	r2, [r6, r3]
10016e4a:	9b00      	ldr	r3, [sp, #0]
10016e4c:	3514      	adds	r5, #20
10016e4e:	3301      	adds	r3, #1
10016e50:	b2ad      	uxth	r5, r5
10016e52:	9300      	str	r3, [sp, #0]
10016e54:	3714      	adds	r7, #20
10016e56:	e7d8      	b.n	10016e0a <gattm_add_svc_req_handler+0x5e>
10016e58:	2114      	movs	r1, #20
10016e5a:	4d13      	ldr	r5, [pc, #76]	; (10016ea8 <gattm_add_svc_req_handler+0xfc>)
10016e5c:	4b13      	ldr	r3, [pc, #76]	; (10016eac <gattm_add_svc_req_handler+0x100>)
10016e5e:	4351      	muls	r1, r2
10016e60:	802b      	strh	r3, [r5, #0]
10016e62:	230b      	movs	r3, #11
10016e64:	311e      	adds	r1, #30
10016e66:	80ab      	strh	r3, [r5, #4]
10016e68:	1c0b      	adds	r3, r1, #0
10016e6a:	3b08      	subs	r3, #8
10016e6c:	71b3      	strb	r3, [r6, #6]
10016e6e:	121b      	asrs	r3, r3, #8
10016e70:	71f3      	strb	r3, [r6, #7]
10016e72:	1c30      	adds	r0, r6, #0
10016e74:	4b0e      	ldr	r3, [pc, #56]	; (10016eb0 <gattm_add_svc_req_handler+0x104>)
10016e76:	4798      	blx	r3
10016e78:	ab02      	add	r3, sp, #8
10016e7a:	1dde      	adds	r6, r3, #7
10016e7c:	1c30      	adds	r0, r6, #0
10016e7e:	4b0d      	ldr	r3, [pc, #52]	; (10016eb4 <gattm_add_svc_req_handler+0x108>)
10016e80:	4798      	blx	r3
10016e82:	7833      	ldrb	r3, [r6, #0]
10016e84:	20e2      	movs	r0, #226	; 0xe2
10016e86:	2b00      	cmp	r3, #0
10016e88:	d106      	bne.n	10016e98 <gattm_add_svc_req_handler+0xec>
10016e8a:	68aa      	ldr	r2, [r5, #8]
10016e8c:	7853      	ldrb	r3, [r2, #1]
10016e8e:	7811      	ldrb	r1, [r2, #0]
10016e90:	021b      	lsls	r3, r3, #8
10016e92:	430b      	orrs	r3, r1
10016e94:	8023      	strh	r3, [r4, #0]
10016e96:	7890      	ldrb	r0, [r2, #2]
10016e98:	b005      	add	sp, #20
10016e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016e9c:	1001d27c 	.word	0x1001d27c
10016ea0:	1001cf0c 	.word	0x1001cf0c
10016ea4:	10018e1b 	.word	0x10018e1b
10016ea8:	1001cf00 	.word	0x1001cf00
10016eac:	00000b01 	.word	0x00000b01
10016eb0:	10015709 	.word	0x10015709
10016eb4:	10015765 	.word	0x10015765

10016eb8 <gattm_add_attribute_req_handler>:
10016eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016eba:	1c1f      	adds	r7, r3, #0
10016ebc:	4b16      	ldr	r3, [pc, #88]	; (10016f18 <gattm_add_attribute_req_handler+0x60>)
10016ebe:	9100      	str	r1, [sp, #0]
10016ec0:	9201      	str	r2, [sp, #4]
10016ec2:	1c05      	adds	r5, r0, #0
10016ec4:	7946      	ldrb	r6, [r0, #5]
10016ec6:	6818      	ldr	r0, [r3, #0]
10016ec8:	2114      	movs	r1, #20
10016eca:	4b14      	ldr	r3, [pc, #80]	; (10016f1c <gattm_add_attribute_req_handler+0x64>)
10016ecc:	382a      	subs	r0, #42	; 0x2a
10016ece:	4798      	blx	r3
10016ed0:	2311      	movs	r3, #17
10016ed2:	4286      	cmp	r6, r0
10016ed4:	d21e      	bcs.n	10016f14 <gattm_add_attribute_req_handler+0x5c>
10016ed6:	2414      	movs	r4, #20
10016ed8:	4366      	muls	r6, r4
10016eda:	19a8      	adds	r0, r5, r6
10016edc:	2100      	movs	r1, #0
10016ede:	2210      	movs	r2, #16
10016ee0:	4b0f      	ldr	r3, [pc, #60]	; (10016f20 <gattm_add_attribute_req_handler+0x68>)
10016ee2:	3016      	adds	r0, #22
10016ee4:	4798      	blx	r3
10016ee6:	7968      	ldrb	r0, [r5, #5]
10016ee8:	1c3a      	adds	r2, r7, #0
10016eea:	4360      	muls	r0, r4
10016eec:	1828      	adds	r0, r5, r0
10016eee:	4b0d      	ldr	r3, [pc, #52]	; (10016f24 <gattm_add_attribute_req_handler+0x6c>)
10016ef0:	3016      	adds	r0, #22
10016ef2:	9908      	ldr	r1, [sp, #32]
10016ef4:	4798      	blx	r3
10016ef6:	466a      	mov	r2, sp
10016ef8:	796b      	ldrb	r3, [r5, #5]
10016efa:	8812      	ldrh	r2, [r2, #0]
10016efc:	435c      	muls	r4, r3
10016efe:	192c      	adds	r4, r5, r4
10016f00:	8522      	strh	r2, [r4, #40]	; 0x28
10016f02:	466a      	mov	r2, sp
10016f04:	8892      	ldrh	r2, [r2, #4]
10016f06:	84e2      	strh	r2, [r4, #38]	; 0x26
10016f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
10016f0a:	8013      	strh	r3, [r2, #0]
10016f0c:	796b      	ldrb	r3, [r5, #5]
10016f0e:	3301      	adds	r3, #1
10016f10:	716b      	strb	r3, [r5, #5]
10016f12:	2300      	movs	r3, #0
10016f14:	1c18      	adds	r0, r3, #0
10016f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016f18:	1001c014 	.word	0x1001c014
10016f1c:	100170a5 	.word	0x100170a5
10016f20:	10018e2d 	.word	0x10018e2d
10016f24:	10018e1b 	.word	0x10018e1b

10016f28 <gattm_att_set_value_req_handler>:
10016f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016f2a:	466b      	mov	r3, sp
10016f2c:	1dde      	adds	r6, r3, #7
10016f2e:	2300      	movs	r3, #0
10016f30:	1c0d      	adds	r5, r1, #0
10016f32:	210c      	movs	r1, #12
10016f34:	270b      	movs	r7, #11
10016f36:	4c17      	ldr	r4, [pc, #92]	; (10016f94 <gattm_att_set_value_req_handler+0x6c>)
10016f38:	7033      	strb	r3, [r6, #0]
10016f3a:	70e3      	strb	r3, [r4, #3]
10016f3c:	4b16      	ldr	r3, [pc, #88]	; (10016f98 <gattm_att_set_value_req_handler+0x70>)
10016f3e:	7021      	strb	r1, [r4, #0]
10016f40:	8819      	ldrh	r1, [r3, #0]
10016f42:	881b      	ldrh	r3, [r3, #0]
10016f44:	7220      	strb	r0, [r4, #8]
10016f46:	0a1b      	lsrs	r3, r3, #8
10016f48:	7163      	strb	r3, [r4, #5]
10016f4a:	0a00      	lsrs	r0, r0, #8
10016f4c:	0a2b      	lsrs	r3, r5, #8
10016f4e:	7121      	strb	r1, [r4, #4]
10016f50:	7260      	strb	r0, [r4, #9]
10016f52:	1c11      	adds	r1, r2, #0
10016f54:	72a5      	strb	r5, [r4, #10]
10016f56:	1c2a      	adds	r2, r5, #0
10016f58:	72e3      	strb	r3, [r4, #11]
10016f5a:	350c      	adds	r5, #12
10016f5c:	4b0f      	ldr	r3, [pc, #60]	; (10016f9c <gattm_att_set_value_req_handler+0x74>)
10016f5e:	4810      	ldr	r0, [pc, #64]	; (10016fa0 <gattm_att_set_value_req_handler+0x78>)
10016f60:	7067      	strb	r7, [r4, #1]
10016f62:	70a7      	strb	r7, [r4, #2]
10016f64:	4798      	blx	r3
10016f66:	b2a9      	uxth	r1, r5
10016f68:	4b0e      	ldr	r3, [pc, #56]	; (10016fa4 <gattm_att_set_value_req_handler+0x7c>)
10016f6a:	4d0f      	ldr	r5, [pc, #60]	; (10016fa8 <gattm_att_set_value_req_handler+0x80>)
10016f6c:	1c20      	adds	r0, r4, #0
10016f6e:	802b      	strh	r3, [r5, #0]
10016f70:	1c0b      	adds	r3, r1, #0
10016f72:	3b08      	subs	r3, #8
10016f74:	71a3      	strb	r3, [r4, #6]
10016f76:	121b      	asrs	r3, r3, #8
10016f78:	71e3      	strb	r3, [r4, #7]
10016f7a:	4b0c      	ldr	r3, [pc, #48]	; (10016fac <gattm_att_set_value_req_handler+0x84>)
10016f7c:	80af      	strh	r7, [r5, #4]
10016f7e:	4798      	blx	r3
10016f80:	1c30      	adds	r0, r6, #0
10016f82:	4b0b      	ldr	r3, [pc, #44]	; (10016fb0 <gattm_att_set_value_req_handler+0x88>)
10016f84:	4798      	blx	r3
10016f86:	7833      	ldrb	r3, [r6, #0]
10016f88:	20e2      	movs	r0, #226	; 0xe2
10016f8a:	2b00      	cmp	r3, #0
10016f8c:	d101      	bne.n	10016f92 <gattm_att_set_value_req_handler+0x6a>
10016f8e:	68ab      	ldr	r3, [r5, #8]
10016f90:	7898      	ldrb	r0, [r3, #2]
10016f92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016f94:	1001d27c 	.word	0x1001d27c
10016f98:	1001cf0c 	.word	0x1001cf0c
10016f9c:	10018e1b 	.word	0x10018e1b
10016fa0:	1001d288 	.word	0x1001d288
10016fa4:	00000b0d 	.word	0x00000b0d
10016fa8:	1001cf00 	.word	0x1001cf00
10016fac:	10015709 	.word	0x10015709
10016fb0:	10015765 	.word	0x10015765

10016fb4 <gattm_att_get_value_req_handler>:
10016fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10016fb6:	b085      	sub	sp, #20
10016fb8:	9201      	str	r2, [sp, #4]
10016fba:	220a      	movs	r2, #10
10016fbc:	1c04      	adds	r4, r0, #0
10016fbe:	481d      	ldr	r0, [pc, #116]	; (10017034 <gattm_att_get_value_req_handler+0x80>)
10016fc0:	ab02      	add	r3, sp, #8
10016fc2:	1dde      	adds	r6, r3, #7
10016fc4:	7002      	strb	r2, [r0, #0]
10016fc6:	2300      	movs	r3, #0
10016fc8:	220b      	movs	r2, #11
10016fca:	4d1b      	ldr	r5, [pc, #108]	; (10017038 <gattm_att_get_value_req_handler+0x84>)
10016fcc:	1c0f      	adds	r7, r1, #0
10016fce:	8829      	ldrh	r1, [r5, #0]
10016fd0:	882d      	ldrh	r5, [r5, #0]
10016fd2:	7101      	strb	r1, [r0, #4]
10016fd4:	0a2d      	lsrs	r5, r5, #8
10016fd6:	7145      	strb	r5, [r0, #5]
10016fd8:	0a25      	lsrs	r5, r4, #8
10016fda:	7245      	strb	r5, [r0, #9]
10016fdc:	4917      	ldr	r1, [pc, #92]	; (1001703c <gattm_att_get_value_req_handler+0x88>)
10016fde:	4d18      	ldr	r5, [pc, #96]	; (10017040 <gattm_att_get_value_req_handler+0x8c>)
10016fe0:	7033      	strb	r3, [r6, #0]
10016fe2:	7042      	strb	r2, [r0, #1]
10016fe4:	7082      	strb	r2, [r0, #2]
10016fe6:	70c3      	strb	r3, [r0, #3]
10016fe8:	8029      	strh	r1, [r5, #0]
10016fea:	80aa      	strh	r2, [r5, #4]
10016fec:	71c3      	strb	r3, [r0, #7]
10016fee:	3a09      	subs	r2, #9
10016ff0:	210a      	movs	r1, #10
10016ff2:	4b14      	ldr	r3, [pc, #80]	; (10017044 <gattm_att_get_value_req_handler+0x90>)
10016ff4:	7182      	strb	r2, [r0, #6]
10016ff6:	7204      	strb	r4, [r0, #8]
10016ff8:	4798      	blx	r3
10016ffa:	1c30      	adds	r0, r6, #0
10016ffc:	4b12      	ldr	r3, [pc, #72]	; (10017048 <gattm_att_get_value_req_handler+0x94>)
10016ffe:	4798      	blx	r3
10017000:	7833      	ldrb	r3, [r6, #0]
10017002:	20e2      	movs	r0, #226	; 0xe2
10017004:	2b00      	cmp	r3, #0
10017006:	d112      	bne.n	1001702e <gattm_att_get_value_req_handler+0x7a>
10017008:	68a9      	ldr	r1, [r5, #8]
1001700a:	9801      	ldr	r0, [sp, #4]
1001700c:	784d      	ldrb	r5, [r1, #1]
1001700e:	780b      	ldrb	r3, [r1, #0]
10017010:	78ca      	ldrb	r2, [r1, #3]
10017012:	022d      	lsls	r5, r5, #8
10017014:	431d      	orrs	r5, r3
10017016:	788b      	ldrb	r3, [r1, #2]
10017018:	0212      	lsls	r2, r2, #8
1001701a:	431a      	orrs	r2, r3
1001701c:	803a      	strh	r2, [r7, #0]
1001701e:	790e      	ldrb	r6, [r1, #4]
10017020:	4b0a      	ldr	r3, [pc, #40]	; (1001704c <gattm_att_get_value_req_handler+0x98>)
10017022:	3105      	adds	r1, #5
10017024:	4798      	blx	r3
10017026:	20e2      	movs	r0, #226	; 0xe2
10017028:	42ac      	cmp	r4, r5
1001702a:	d100      	bne.n	1001702e <gattm_att_get_value_req_handler+0x7a>
1001702c:	1c30      	adds	r0, r6, #0
1001702e:	b005      	add	sp, #20
10017030:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017032:	46c0      	nop			; (mov r8, r8)
10017034:	1001d27c 	.word	0x1001d27c
10017038:	1001cf0c 	.word	0x1001cf0c
1001703c:	00000b0b 	.word	0x00000b0b
10017040:	1001cf00 	.word	0x1001cf00
10017044:	10015709 	.word	0x10015709
10017048:	10015765 	.word	0x10015765
1001704c:	10018e1b 	.word	0x10018e1b

10017050 <htpt_enable_rsp_handler>:
10017050:	780b      	ldrb	r3, [r1, #0]
10017052:	7013      	strb	r3, [r2, #0]
10017054:	784b      	ldrb	r3, [r1, #1]
10017056:	7053      	strb	r3, [r2, #1]
10017058:	4770      	bx	lr

1001705a <htpt_temp_send_rsp_handler>:
1001705a:	780b      	ldrb	r3, [r1, #0]
1001705c:	7013      	strb	r3, [r2, #0]
1001705e:	4770      	bx	lr

10017060 <htpt_meas_intv_upd_rsp_handler>:
10017060:	780b      	ldrb	r3, [r1, #0]
10017062:	7013      	strb	r3, [r2, #0]
10017064:	4770      	bx	lr

10017066 <htpt_meas_intv_chg_req_ind_handler>:
10017066:	78cb      	ldrb	r3, [r1, #3]
10017068:	7889      	ldrb	r1, [r1, #2]
1001706a:	021b      	lsls	r3, r3, #8
1001706c:	430b      	orrs	r3, r1
1001706e:	8013      	strh	r3, [r2, #0]
10017070:	4770      	bx	lr

10017072 <htpt_cfg_indntf_ind_handler>:
10017072:	780b      	ldrb	r3, [r1, #0]
10017074:	7013      	strb	r3, [r2, #0]
10017076:	784b      	ldrb	r3, [r1, #1]
10017078:	7053      	strb	r3, [r2, #1]
1001707a:	4770      	bx	lr

1001707c <__gnu_thumb1_case_sqi>:
1001707c:	b402      	push	{r1}
1001707e:	4671      	mov	r1, lr
10017080:	0849      	lsrs	r1, r1, #1
10017082:	0049      	lsls	r1, r1, #1
10017084:	5609      	ldrsb	r1, [r1, r0]
10017086:	0049      	lsls	r1, r1, #1
10017088:	448e      	add	lr, r1
1001708a:	bc02      	pop	{r1}
1001708c:	4770      	bx	lr
1001708e:	46c0      	nop			; (mov r8, r8)

10017090 <__gnu_thumb1_case_uqi>:
10017090:	b402      	push	{r1}
10017092:	4671      	mov	r1, lr
10017094:	0849      	lsrs	r1, r1, #1
10017096:	0049      	lsls	r1, r1, #1
10017098:	5c09      	ldrb	r1, [r1, r0]
1001709a:	0049      	lsls	r1, r1, #1
1001709c:	448e      	add	lr, r1
1001709e:	bc02      	pop	{r1}
100170a0:	4770      	bx	lr
100170a2:	46c0      	nop			; (mov r8, r8)

100170a4 <__aeabi_uidiv>:
100170a4:	2200      	movs	r2, #0
100170a6:	0843      	lsrs	r3, r0, #1
100170a8:	428b      	cmp	r3, r1
100170aa:	d374      	bcc.n	10017196 <__aeabi_uidiv+0xf2>
100170ac:	0903      	lsrs	r3, r0, #4
100170ae:	428b      	cmp	r3, r1
100170b0:	d35f      	bcc.n	10017172 <__aeabi_uidiv+0xce>
100170b2:	0a03      	lsrs	r3, r0, #8
100170b4:	428b      	cmp	r3, r1
100170b6:	d344      	bcc.n	10017142 <__aeabi_uidiv+0x9e>
100170b8:	0b03      	lsrs	r3, r0, #12
100170ba:	428b      	cmp	r3, r1
100170bc:	d328      	bcc.n	10017110 <__aeabi_uidiv+0x6c>
100170be:	0c03      	lsrs	r3, r0, #16
100170c0:	428b      	cmp	r3, r1
100170c2:	d30d      	bcc.n	100170e0 <__aeabi_uidiv+0x3c>
100170c4:	22ff      	movs	r2, #255	; 0xff
100170c6:	0209      	lsls	r1, r1, #8
100170c8:	ba12      	rev	r2, r2
100170ca:	0c03      	lsrs	r3, r0, #16
100170cc:	428b      	cmp	r3, r1
100170ce:	d302      	bcc.n	100170d6 <__aeabi_uidiv+0x32>
100170d0:	1212      	asrs	r2, r2, #8
100170d2:	0209      	lsls	r1, r1, #8
100170d4:	d065      	beq.n	100171a2 <__aeabi_uidiv+0xfe>
100170d6:	0b03      	lsrs	r3, r0, #12
100170d8:	428b      	cmp	r3, r1
100170da:	d319      	bcc.n	10017110 <__aeabi_uidiv+0x6c>
100170dc:	e000      	b.n	100170e0 <__aeabi_uidiv+0x3c>
100170de:	0a09      	lsrs	r1, r1, #8
100170e0:	0bc3      	lsrs	r3, r0, #15
100170e2:	428b      	cmp	r3, r1
100170e4:	d301      	bcc.n	100170ea <__aeabi_uidiv+0x46>
100170e6:	03cb      	lsls	r3, r1, #15
100170e8:	1ac0      	subs	r0, r0, r3
100170ea:	4152      	adcs	r2, r2
100170ec:	0b83      	lsrs	r3, r0, #14
100170ee:	428b      	cmp	r3, r1
100170f0:	d301      	bcc.n	100170f6 <__aeabi_uidiv+0x52>
100170f2:	038b      	lsls	r3, r1, #14
100170f4:	1ac0      	subs	r0, r0, r3
100170f6:	4152      	adcs	r2, r2
100170f8:	0b43      	lsrs	r3, r0, #13
100170fa:	428b      	cmp	r3, r1
100170fc:	d301      	bcc.n	10017102 <__aeabi_uidiv+0x5e>
100170fe:	034b      	lsls	r3, r1, #13
10017100:	1ac0      	subs	r0, r0, r3
10017102:	4152      	adcs	r2, r2
10017104:	0b03      	lsrs	r3, r0, #12
10017106:	428b      	cmp	r3, r1
10017108:	d301      	bcc.n	1001710e <__aeabi_uidiv+0x6a>
1001710a:	030b      	lsls	r3, r1, #12
1001710c:	1ac0      	subs	r0, r0, r3
1001710e:	4152      	adcs	r2, r2
10017110:	0ac3      	lsrs	r3, r0, #11
10017112:	428b      	cmp	r3, r1
10017114:	d301      	bcc.n	1001711a <__aeabi_uidiv+0x76>
10017116:	02cb      	lsls	r3, r1, #11
10017118:	1ac0      	subs	r0, r0, r3
1001711a:	4152      	adcs	r2, r2
1001711c:	0a83      	lsrs	r3, r0, #10
1001711e:	428b      	cmp	r3, r1
10017120:	d301      	bcc.n	10017126 <__aeabi_uidiv+0x82>
10017122:	028b      	lsls	r3, r1, #10
10017124:	1ac0      	subs	r0, r0, r3
10017126:	4152      	adcs	r2, r2
10017128:	0a43      	lsrs	r3, r0, #9
1001712a:	428b      	cmp	r3, r1
1001712c:	d301      	bcc.n	10017132 <__aeabi_uidiv+0x8e>
1001712e:	024b      	lsls	r3, r1, #9
10017130:	1ac0      	subs	r0, r0, r3
10017132:	4152      	adcs	r2, r2
10017134:	0a03      	lsrs	r3, r0, #8
10017136:	428b      	cmp	r3, r1
10017138:	d301      	bcc.n	1001713e <__aeabi_uidiv+0x9a>
1001713a:	020b      	lsls	r3, r1, #8
1001713c:	1ac0      	subs	r0, r0, r3
1001713e:	4152      	adcs	r2, r2
10017140:	d2cd      	bcs.n	100170de <__aeabi_uidiv+0x3a>
10017142:	09c3      	lsrs	r3, r0, #7
10017144:	428b      	cmp	r3, r1
10017146:	d301      	bcc.n	1001714c <__aeabi_uidiv+0xa8>
10017148:	01cb      	lsls	r3, r1, #7
1001714a:	1ac0      	subs	r0, r0, r3
1001714c:	4152      	adcs	r2, r2
1001714e:	0983      	lsrs	r3, r0, #6
10017150:	428b      	cmp	r3, r1
10017152:	d301      	bcc.n	10017158 <__aeabi_uidiv+0xb4>
10017154:	018b      	lsls	r3, r1, #6
10017156:	1ac0      	subs	r0, r0, r3
10017158:	4152      	adcs	r2, r2
1001715a:	0943      	lsrs	r3, r0, #5
1001715c:	428b      	cmp	r3, r1
1001715e:	d301      	bcc.n	10017164 <__aeabi_uidiv+0xc0>
10017160:	014b      	lsls	r3, r1, #5
10017162:	1ac0      	subs	r0, r0, r3
10017164:	4152      	adcs	r2, r2
10017166:	0903      	lsrs	r3, r0, #4
10017168:	428b      	cmp	r3, r1
1001716a:	d301      	bcc.n	10017170 <__aeabi_uidiv+0xcc>
1001716c:	010b      	lsls	r3, r1, #4
1001716e:	1ac0      	subs	r0, r0, r3
10017170:	4152      	adcs	r2, r2
10017172:	08c3      	lsrs	r3, r0, #3
10017174:	428b      	cmp	r3, r1
10017176:	d301      	bcc.n	1001717c <__aeabi_uidiv+0xd8>
10017178:	00cb      	lsls	r3, r1, #3
1001717a:	1ac0      	subs	r0, r0, r3
1001717c:	4152      	adcs	r2, r2
1001717e:	0883      	lsrs	r3, r0, #2
10017180:	428b      	cmp	r3, r1
10017182:	d301      	bcc.n	10017188 <__aeabi_uidiv+0xe4>
10017184:	008b      	lsls	r3, r1, #2
10017186:	1ac0      	subs	r0, r0, r3
10017188:	4152      	adcs	r2, r2
1001718a:	0843      	lsrs	r3, r0, #1
1001718c:	428b      	cmp	r3, r1
1001718e:	d301      	bcc.n	10017194 <__aeabi_uidiv+0xf0>
10017190:	004b      	lsls	r3, r1, #1
10017192:	1ac0      	subs	r0, r0, r3
10017194:	4152      	adcs	r2, r2
10017196:	1a41      	subs	r1, r0, r1
10017198:	d200      	bcs.n	1001719c <__aeabi_uidiv+0xf8>
1001719a:	4601      	mov	r1, r0
1001719c:	4152      	adcs	r2, r2
1001719e:	4610      	mov	r0, r2
100171a0:	4770      	bx	lr
100171a2:	e7ff      	b.n	100171a4 <__aeabi_uidiv+0x100>
100171a4:	b501      	push	{r0, lr}
100171a6:	2000      	movs	r0, #0
100171a8:	f000 f8f0 	bl	1001738c <__aeabi_idiv0>
100171ac:	bd02      	pop	{r1, pc}
100171ae:	46c0      	nop			; (mov r8, r8)

100171b0 <__aeabi_uidivmod>:
100171b0:	2900      	cmp	r1, #0
100171b2:	d0f7      	beq.n	100171a4 <__aeabi_uidiv+0x100>
100171b4:	e776      	b.n	100170a4 <__aeabi_uidiv>
100171b6:	4770      	bx	lr

100171b8 <__aeabi_idiv>:
100171b8:	4603      	mov	r3, r0
100171ba:	430b      	orrs	r3, r1
100171bc:	d47f      	bmi.n	100172be <__aeabi_idiv+0x106>
100171be:	2200      	movs	r2, #0
100171c0:	0843      	lsrs	r3, r0, #1
100171c2:	428b      	cmp	r3, r1
100171c4:	d374      	bcc.n	100172b0 <__aeabi_idiv+0xf8>
100171c6:	0903      	lsrs	r3, r0, #4
100171c8:	428b      	cmp	r3, r1
100171ca:	d35f      	bcc.n	1001728c <__aeabi_idiv+0xd4>
100171cc:	0a03      	lsrs	r3, r0, #8
100171ce:	428b      	cmp	r3, r1
100171d0:	d344      	bcc.n	1001725c <__aeabi_idiv+0xa4>
100171d2:	0b03      	lsrs	r3, r0, #12
100171d4:	428b      	cmp	r3, r1
100171d6:	d328      	bcc.n	1001722a <__aeabi_idiv+0x72>
100171d8:	0c03      	lsrs	r3, r0, #16
100171da:	428b      	cmp	r3, r1
100171dc:	d30d      	bcc.n	100171fa <__aeabi_idiv+0x42>
100171de:	22ff      	movs	r2, #255	; 0xff
100171e0:	0209      	lsls	r1, r1, #8
100171e2:	ba12      	rev	r2, r2
100171e4:	0c03      	lsrs	r3, r0, #16
100171e6:	428b      	cmp	r3, r1
100171e8:	d302      	bcc.n	100171f0 <__aeabi_idiv+0x38>
100171ea:	1212      	asrs	r2, r2, #8
100171ec:	0209      	lsls	r1, r1, #8
100171ee:	d065      	beq.n	100172bc <__aeabi_idiv+0x104>
100171f0:	0b03      	lsrs	r3, r0, #12
100171f2:	428b      	cmp	r3, r1
100171f4:	d319      	bcc.n	1001722a <__aeabi_idiv+0x72>
100171f6:	e000      	b.n	100171fa <__aeabi_idiv+0x42>
100171f8:	0a09      	lsrs	r1, r1, #8
100171fa:	0bc3      	lsrs	r3, r0, #15
100171fc:	428b      	cmp	r3, r1
100171fe:	d301      	bcc.n	10017204 <__aeabi_idiv+0x4c>
10017200:	03cb      	lsls	r3, r1, #15
10017202:	1ac0      	subs	r0, r0, r3
10017204:	4152      	adcs	r2, r2
10017206:	0b83      	lsrs	r3, r0, #14
10017208:	428b      	cmp	r3, r1
1001720a:	d301      	bcc.n	10017210 <__aeabi_idiv+0x58>
1001720c:	038b      	lsls	r3, r1, #14
1001720e:	1ac0      	subs	r0, r0, r3
10017210:	4152      	adcs	r2, r2
10017212:	0b43      	lsrs	r3, r0, #13
10017214:	428b      	cmp	r3, r1
10017216:	d301      	bcc.n	1001721c <__aeabi_idiv+0x64>
10017218:	034b      	lsls	r3, r1, #13
1001721a:	1ac0      	subs	r0, r0, r3
1001721c:	4152      	adcs	r2, r2
1001721e:	0b03      	lsrs	r3, r0, #12
10017220:	428b      	cmp	r3, r1
10017222:	d301      	bcc.n	10017228 <__aeabi_idiv+0x70>
10017224:	030b      	lsls	r3, r1, #12
10017226:	1ac0      	subs	r0, r0, r3
10017228:	4152      	adcs	r2, r2
1001722a:	0ac3      	lsrs	r3, r0, #11
1001722c:	428b      	cmp	r3, r1
1001722e:	d301      	bcc.n	10017234 <__aeabi_idiv+0x7c>
10017230:	02cb      	lsls	r3, r1, #11
10017232:	1ac0      	subs	r0, r0, r3
10017234:	4152      	adcs	r2, r2
10017236:	0a83      	lsrs	r3, r0, #10
10017238:	428b      	cmp	r3, r1
1001723a:	d301      	bcc.n	10017240 <__aeabi_idiv+0x88>
1001723c:	028b      	lsls	r3, r1, #10
1001723e:	1ac0      	subs	r0, r0, r3
10017240:	4152      	adcs	r2, r2
10017242:	0a43      	lsrs	r3, r0, #9
10017244:	428b      	cmp	r3, r1
10017246:	d301      	bcc.n	1001724c <__aeabi_idiv+0x94>
10017248:	024b      	lsls	r3, r1, #9
1001724a:	1ac0      	subs	r0, r0, r3
1001724c:	4152      	adcs	r2, r2
1001724e:	0a03      	lsrs	r3, r0, #8
10017250:	428b      	cmp	r3, r1
10017252:	d301      	bcc.n	10017258 <__aeabi_idiv+0xa0>
10017254:	020b      	lsls	r3, r1, #8
10017256:	1ac0      	subs	r0, r0, r3
10017258:	4152      	adcs	r2, r2
1001725a:	d2cd      	bcs.n	100171f8 <__aeabi_idiv+0x40>
1001725c:	09c3      	lsrs	r3, r0, #7
1001725e:	428b      	cmp	r3, r1
10017260:	d301      	bcc.n	10017266 <__aeabi_idiv+0xae>
10017262:	01cb      	lsls	r3, r1, #7
10017264:	1ac0      	subs	r0, r0, r3
10017266:	4152      	adcs	r2, r2
10017268:	0983      	lsrs	r3, r0, #6
1001726a:	428b      	cmp	r3, r1
1001726c:	d301      	bcc.n	10017272 <__aeabi_idiv+0xba>
1001726e:	018b      	lsls	r3, r1, #6
10017270:	1ac0      	subs	r0, r0, r3
10017272:	4152      	adcs	r2, r2
10017274:	0943      	lsrs	r3, r0, #5
10017276:	428b      	cmp	r3, r1
10017278:	d301      	bcc.n	1001727e <__aeabi_idiv+0xc6>
1001727a:	014b      	lsls	r3, r1, #5
1001727c:	1ac0      	subs	r0, r0, r3
1001727e:	4152      	adcs	r2, r2
10017280:	0903      	lsrs	r3, r0, #4
10017282:	428b      	cmp	r3, r1
10017284:	d301      	bcc.n	1001728a <__aeabi_idiv+0xd2>
10017286:	010b      	lsls	r3, r1, #4
10017288:	1ac0      	subs	r0, r0, r3
1001728a:	4152      	adcs	r2, r2
1001728c:	08c3      	lsrs	r3, r0, #3
1001728e:	428b      	cmp	r3, r1
10017290:	d301      	bcc.n	10017296 <__aeabi_idiv+0xde>
10017292:	00cb      	lsls	r3, r1, #3
10017294:	1ac0      	subs	r0, r0, r3
10017296:	4152      	adcs	r2, r2
10017298:	0883      	lsrs	r3, r0, #2
1001729a:	428b      	cmp	r3, r1
1001729c:	d301      	bcc.n	100172a2 <__aeabi_idiv+0xea>
1001729e:	008b      	lsls	r3, r1, #2
100172a0:	1ac0      	subs	r0, r0, r3
100172a2:	4152      	adcs	r2, r2
100172a4:	0843      	lsrs	r3, r0, #1
100172a6:	428b      	cmp	r3, r1
100172a8:	d301      	bcc.n	100172ae <__aeabi_idiv+0xf6>
100172aa:	004b      	lsls	r3, r1, #1
100172ac:	1ac0      	subs	r0, r0, r3
100172ae:	4152      	adcs	r2, r2
100172b0:	1a41      	subs	r1, r0, r1
100172b2:	d200      	bcs.n	100172b6 <__aeabi_idiv+0xfe>
100172b4:	4601      	mov	r1, r0
100172b6:	4152      	adcs	r2, r2
100172b8:	4610      	mov	r0, r2
100172ba:	4770      	bx	lr
100172bc:	e05d      	b.n	1001737a <__aeabi_idiv+0x1c2>
100172be:	0fca      	lsrs	r2, r1, #31
100172c0:	d000      	beq.n	100172c4 <__aeabi_idiv+0x10c>
100172c2:	4249      	negs	r1, r1
100172c4:	1003      	asrs	r3, r0, #32
100172c6:	d300      	bcc.n	100172ca <__aeabi_idiv+0x112>
100172c8:	4240      	negs	r0, r0
100172ca:	4053      	eors	r3, r2
100172cc:	2200      	movs	r2, #0
100172ce:	469c      	mov	ip, r3
100172d0:	0903      	lsrs	r3, r0, #4
100172d2:	428b      	cmp	r3, r1
100172d4:	d32d      	bcc.n	10017332 <__aeabi_idiv+0x17a>
100172d6:	0a03      	lsrs	r3, r0, #8
100172d8:	428b      	cmp	r3, r1
100172da:	d312      	bcc.n	10017302 <__aeabi_idiv+0x14a>
100172dc:	22fc      	movs	r2, #252	; 0xfc
100172de:	0189      	lsls	r1, r1, #6
100172e0:	ba12      	rev	r2, r2
100172e2:	0a03      	lsrs	r3, r0, #8
100172e4:	428b      	cmp	r3, r1
100172e6:	d30c      	bcc.n	10017302 <__aeabi_idiv+0x14a>
100172e8:	0189      	lsls	r1, r1, #6
100172ea:	1192      	asrs	r2, r2, #6
100172ec:	428b      	cmp	r3, r1
100172ee:	d308      	bcc.n	10017302 <__aeabi_idiv+0x14a>
100172f0:	0189      	lsls	r1, r1, #6
100172f2:	1192      	asrs	r2, r2, #6
100172f4:	428b      	cmp	r3, r1
100172f6:	d304      	bcc.n	10017302 <__aeabi_idiv+0x14a>
100172f8:	0189      	lsls	r1, r1, #6
100172fa:	d03a      	beq.n	10017372 <__aeabi_idiv+0x1ba>
100172fc:	1192      	asrs	r2, r2, #6
100172fe:	e000      	b.n	10017302 <__aeabi_idiv+0x14a>
10017300:	0989      	lsrs	r1, r1, #6
10017302:	09c3      	lsrs	r3, r0, #7
10017304:	428b      	cmp	r3, r1
10017306:	d301      	bcc.n	1001730c <__aeabi_idiv+0x154>
10017308:	01cb      	lsls	r3, r1, #7
1001730a:	1ac0      	subs	r0, r0, r3
1001730c:	4152      	adcs	r2, r2
1001730e:	0983      	lsrs	r3, r0, #6
10017310:	428b      	cmp	r3, r1
10017312:	d301      	bcc.n	10017318 <__aeabi_idiv+0x160>
10017314:	018b      	lsls	r3, r1, #6
10017316:	1ac0      	subs	r0, r0, r3
10017318:	4152      	adcs	r2, r2
1001731a:	0943      	lsrs	r3, r0, #5
1001731c:	428b      	cmp	r3, r1
1001731e:	d301      	bcc.n	10017324 <__aeabi_idiv+0x16c>
10017320:	014b      	lsls	r3, r1, #5
10017322:	1ac0      	subs	r0, r0, r3
10017324:	4152      	adcs	r2, r2
10017326:	0903      	lsrs	r3, r0, #4
10017328:	428b      	cmp	r3, r1
1001732a:	d301      	bcc.n	10017330 <__aeabi_idiv+0x178>
1001732c:	010b      	lsls	r3, r1, #4
1001732e:	1ac0      	subs	r0, r0, r3
10017330:	4152      	adcs	r2, r2
10017332:	08c3      	lsrs	r3, r0, #3
10017334:	428b      	cmp	r3, r1
10017336:	d301      	bcc.n	1001733c <__aeabi_idiv+0x184>
10017338:	00cb      	lsls	r3, r1, #3
1001733a:	1ac0      	subs	r0, r0, r3
1001733c:	4152      	adcs	r2, r2
1001733e:	0883      	lsrs	r3, r0, #2
10017340:	428b      	cmp	r3, r1
10017342:	d301      	bcc.n	10017348 <__aeabi_idiv+0x190>
10017344:	008b      	lsls	r3, r1, #2
10017346:	1ac0      	subs	r0, r0, r3
10017348:	4152      	adcs	r2, r2
1001734a:	d2d9      	bcs.n	10017300 <__aeabi_idiv+0x148>
1001734c:	0843      	lsrs	r3, r0, #1
1001734e:	428b      	cmp	r3, r1
10017350:	d301      	bcc.n	10017356 <__aeabi_idiv+0x19e>
10017352:	004b      	lsls	r3, r1, #1
10017354:	1ac0      	subs	r0, r0, r3
10017356:	4152      	adcs	r2, r2
10017358:	1a41      	subs	r1, r0, r1
1001735a:	d200      	bcs.n	1001735e <__aeabi_idiv+0x1a6>
1001735c:	4601      	mov	r1, r0
1001735e:	4663      	mov	r3, ip
10017360:	4152      	adcs	r2, r2
10017362:	105b      	asrs	r3, r3, #1
10017364:	4610      	mov	r0, r2
10017366:	d301      	bcc.n	1001736c <__aeabi_idiv+0x1b4>
10017368:	4240      	negs	r0, r0
1001736a:	2b00      	cmp	r3, #0
1001736c:	d500      	bpl.n	10017370 <__aeabi_idiv+0x1b8>
1001736e:	4249      	negs	r1, r1
10017370:	4770      	bx	lr
10017372:	4663      	mov	r3, ip
10017374:	105b      	asrs	r3, r3, #1
10017376:	d300      	bcc.n	1001737a <__aeabi_idiv+0x1c2>
10017378:	4240      	negs	r0, r0
1001737a:	b501      	push	{r0, lr}
1001737c:	2000      	movs	r0, #0
1001737e:	f000 f805 	bl	1001738c <__aeabi_idiv0>
10017382:	bd02      	pop	{r1, pc}

10017384 <__aeabi_idivmod>:
10017384:	2900      	cmp	r1, #0
10017386:	d0f8      	beq.n	1001737a <__aeabi_idiv+0x1c2>
10017388:	e716      	b.n	100171b8 <__aeabi_idiv>
1001738a:	4770      	bx	lr

1001738c <__aeabi_idiv0>:
1001738c:	4770      	bx	lr
1001738e:	46c0      	nop			; (mov r8, r8)

10017390 <__aeabi_cdrcmple>:
10017390:	4684      	mov	ip, r0
10017392:	1c10      	adds	r0, r2, #0
10017394:	4662      	mov	r2, ip
10017396:	468c      	mov	ip, r1
10017398:	1c19      	adds	r1, r3, #0
1001739a:	4663      	mov	r3, ip
1001739c:	e000      	b.n	100173a0 <__aeabi_cdcmpeq>
1001739e:	46c0      	nop			; (mov r8, r8)

100173a0 <__aeabi_cdcmpeq>:
100173a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100173a2:	f000 fe37 	bl	10018014 <__ledf2>
100173a6:	2800      	cmp	r0, #0
100173a8:	d401      	bmi.n	100173ae <__aeabi_cdcmpeq+0xe>
100173aa:	2100      	movs	r1, #0
100173ac:	42c8      	cmn	r0, r1
100173ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100173b0 <__aeabi_dcmpeq>:
100173b0:	b510      	push	{r4, lr}
100173b2:	f000 fd8b 	bl	10017ecc <__eqdf2>
100173b6:	4240      	negs	r0, r0
100173b8:	3001      	adds	r0, #1
100173ba:	bd10      	pop	{r4, pc}

100173bc <__aeabi_dcmplt>:
100173bc:	b510      	push	{r4, lr}
100173be:	f000 fe29 	bl	10018014 <__ledf2>
100173c2:	2800      	cmp	r0, #0
100173c4:	db01      	blt.n	100173ca <__aeabi_dcmplt+0xe>
100173c6:	2000      	movs	r0, #0
100173c8:	bd10      	pop	{r4, pc}
100173ca:	2001      	movs	r0, #1
100173cc:	bd10      	pop	{r4, pc}
100173ce:	46c0      	nop			; (mov r8, r8)

100173d0 <__aeabi_dcmple>:
100173d0:	b510      	push	{r4, lr}
100173d2:	f000 fe1f 	bl	10018014 <__ledf2>
100173d6:	2800      	cmp	r0, #0
100173d8:	dd01      	ble.n	100173de <__aeabi_dcmple+0xe>
100173da:	2000      	movs	r0, #0
100173dc:	bd10      	pop	{r4, pc}
100173de:	2001      	movs	r0, #1
100173e0:	bd10      	pop	{r4, pc}
100173e2:	46c0      	nop			; (mov r8, r8)

100173e4 <__aeabi_dcmpgt>:
100173e4:	b510      	push	{r4, lr}
100173e6:	f000 fdb1 	bl	10017f4c <__gedf2>
100173ea:	2800      	cmp	r0, #0
100173ec:	dc01      	bgt.n	100173f2 <__aeabi_dcmpgt+0xe>
100173ee:	2000      	movs	r0, #0
100173f0:	bd10      	pop	{r4, pc}
100173f2:	2001      	movs	r0, #1
100173f4:	bd10      	pop	{r4, pc}
100173f6:	46c0      	nop			; (mov r8, r8)

100173f8 <__aeabi_dcmpge>:
100173f8:	b510      	push	{r4, lr}
100173fa:	f000 fda7 	bl	10017f4c <__gedf2>
100173fe:	2800      	cmp	r0, #0
10017400:	da01      	bge.n	10017406 <__aeabi_dcmpge+0xe>
10017402:	2000      	movs	r0, #0
10017404:	bd10      	pop	{r4, pc}
10017406:	2001      	movs	r0, #1
10017408:	bd10      	pop	{r4, pc}
1001740a:	46c0      	nop			; (mov r8, r8)

1001740c <__aeabi_cfrcmple>:
1001740c:	4684      	mov	ip, r0
1001740e:	1c08      	adds	r0, r1, #0
10017410:	4661      	mov	r1, ip
10017412:	e7ff      	b.n	10017414 <__aeabi_cfcmpeq>

10017414 <__aeabi_cfcmpeq>:
10017414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10017416:	f000 fa1b 	bl	10017850 <__lesf2>
1001741a:	2800      	cmp	r0, #0
1001741c:	d401      	bmi.n	10017422 <__aeabi_cfcmpeq+0xe>
1001741e:	2100      	movs	r1, #0
10017420:	42c8      	cmn	r0, r1
10017422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10017424 <__aeabi_fcmpeq>:
10017424:	b510      	push	{r4, lr}
10017426:	f000 f9a7 	bl	10017778 <__eqsf2>
1001742a:	4240      	negs	r0, r0
1001742c:	3001      	adds	r0, #1
1001742e:	bd10      	pop	{r4, pc}

10017430 <__aeabi_fcmplt>:
10017430:	b510      	push	{r4, lr}
10017432:	f000 fa0d 	bl	10017850 <__lesf2>
10017436:	2800      	cmp	r0, #0
10017438:	db01      	blt.n	1001743e <__aeabi_fcmplt+0xe>
1001743a:	2000      	movs	r0, #0
1001743c:	bd10      	pop	{r4, pc}
1001743e:	2001      	movs	r0, #1
10017440:	bd10      	pop	{r4, pc}
10017442:	46c0      	nop			; (mov r8, r8)

10017444 <__aeabi_fcmple>:
10017444:	b510      	push	{r4, lr}
10017446:	f000 fa03 	bl	10017850 <__lesf2>
1001744a:	2800      	cmp	r0, #0
1001744c:	dd01      	ble.n	10017452 <__aeabi_fcmple+0xe>
1001744e:	2000      	movs	r0, #0
10017450:	bd10      	pop	{r4, pc}
10017452:	2001      	movs	r0, #1
10017454:	bd10      	pop	{r4, pc}
10017456:	46c0      	nop			; (mov r8, r8)

10017458 <__aeabi_fcmpgt>:
10017458:	b510      	push	{r4, lr}
1001745a:	f000 f9b5 	bl	100177c8 <__gesf2>
1001745e:	2800      	cmp	r0, #0
10017460:	dc01      	bgt.n	10017466 <__aeabi_fcmpgt+0xe>
10017462:	2000      	movs	r0, #0
10017464:	bd10      	pop	{r4, pc}
10017466:	2001      	movs	r0, #1
10017468:	bd10      	pop	{r4, pc}
1001746a:	46c0      	nop			; (mov r8, r8)

1001746c <__aeabi_fcmpge>:
1001746c:	b510      	push	{r4, lr}
1001746e:	f000 f9ab 	bl	100177c8 <__gesf2>
10017472:	2800      	cmp	r0, #0
10017474:	da01      	bge.n	1001747a <__aeabi_fcmpge+0xe>
10017476:	2000      	movs	r0, #0
10017478:	bd10      	pop	{r4, pc}
1001747a:	2001      	movs	r0, #1
1001747c:	bd10      	pop	{r4, pc}
1001747e:	46c0      	nop			; (mov r8, r8)

10017480 <__aeabi_lmul>:
10017480:	b5f0      	push	{r4, r5, r6, r7, lr}
10017482:	464f      	mov	r7, r9
10017484:	4646      	mov	r6, r8
10017486:	b4c0      	push	{r6, r7}
10017488:	0416      	lsls	r6, r2, #16
1001748a:	0c36      	lsrs	r6, r6, #16
1001748c:	4699      	mov	r9, r3
1001748e:	0033      	movs	r3, r6
10017490:	0405      	lsls	r5, r0, #16
10017492:	0c2c      	lsrs	r4, r5, #16
10017494:	0c07      	lsrs	r7, r0, #16
10017496:	0c15      	lsrs	r5, r2, #16
10017498:	4363      	muls	r3, r4
1001749a:	437e      	muls	r6, r7
1001749c:	436f      	muls	r7, r5
1001749e:	4365      	muls	r5, r4
100174a0:	0c1c      	lsrs	r4, r3, #16
100174a2:	19ad      	adds	r5, r5, r6
100174a4:	1964      	adds	r4, r4, r5
100174a6:	469c      	mov	ip, r3
100174a8:	42a6      	cmp	r6, r4
100174aa:	d903      	bls.n	100174b4 <__aeabi_lmul+0x34>
100174ac:	2380      	movs	r3, #128	; 0x80
100174ae:	025b      	lsls	r3, r3, #9
100174b0:	4698      	mov	r8, r3
100174b2:	4447      	add	r7, r8
100174b4:	4663      	mov	r3, ip
100174b6:	0c25      	lsrs	r5, r4, #16
100174b8:	19ef      	adds	r7, r5, r7
100174ba:	041d      	lsls	r5, r3, #16
100174bc:	464b      	mov	r3, r9
100174be:	434a      	muls	r2, r1
100174c0:	4343      	muls	r3, r0
100174c2:	0c2d      	lsrs	r5, r5, #16
100174c4:	0424      	lsls	r4, r4, #16
100174c6:	1964      	adds	r4, r4, r5
100174c8:	1899      	adds	r1, r3, r2
100174ca:	19c9      	adds	r1, r1, r7
100174cc:	0020      	movs	r0, r4
100174ce:	bc0c      	pop	{r2, r3}
100174d0:	4690      	mov	r8, r2
100174d2:	4699      	mov	r9, r3
100174d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100174d6:	46c0      	nop			; (mov r8, r8)

100174d8 <__aeabi_f2uiz>:
100174d8:	219e      	movs	r1, #158	; 0x9e
100174da:	b510      	push	{r4, lr}
100174dc:	05c9      	lsls	r1, r1, #23
100174de:	1c04      	adds	r4, r0, #0
100174e0:	f7ff ffc4 	bl	1001746c <__aeabi_fcmpge>
100174e4:	2800      	cmp	r0, #0
100174e6:	d103      	bne.n	100174f0 <__aeabi_f2uiz+0x18>
100174e8:	1c20      	adds	r0, r4, #0
100174ea:	f000 fc8f 	bl	10017e0c <__aeabi_f2iz>
100174ee:	bd10      	pop	{r4, pc}
100174f0:	219e      	movs	r1, #158	; 0x9e
100174f2:	1c20      	adds	r0, r4, #0
100174f4:	05c9      	lsls	r1, r1, #23
100174f6:	f000 fb03 	bl	10017b00 <__aeabi_fsub>
100174fa:	f000 fc87 	bl	10017e0c <__aeabi_f2iz>
100174fe:	2380      	movs	r3, #128	; 0x80
10017500:	061b      	lsls	r3, r3, #24
10017502:	469c      	mov	ip, r3
10017504:	4460      	add	r0, ip
10017506:	e7f2      	b.n	100174ee <__aeabi_f2uiz+0x16>

10017508 <__aeabi_d2uiz>:
10017508:	b570      	push	{r4, r5, r6, lr}
1001750a:	2200      	movs	r2, #0
1001750c:	4b0c      	ldr	r3, [pc, #48]	; (10017540 <__aeabi_d2uiz+0x38>)
1001750e:	0004      	movs	r4, r0
10017510:	000d      	movs	r5, r1
10017512:	f7ff ff71 	bl	100173f8 <__aeabi_dcmpge>
10017516:	2800      	cmp	r0, #0
10017518:	d104      	bne.n	10017524 <__aeabi_d2uiz+0x1c>
1001751a:	0020      	movs	r0, r4
1001751c:	0029      	movs	r1, r5
1001751e:	f001 fbb1 	bl	10018c84 <__aeabi_d2iz>
10017522:	bd70      	pop	{r4, r5, r6, pc}
10017524:	4b06      	ldr	r3, [pc, #24]	; (10017540 <__aeabi_d2uiz+0x38>)
10017526:	2200      	movs	r2, #0
10017528:	0020      	movs	r0, r4
1001752a:	0029      	movs	r1, r5
1001752c:	f001 f856 	bl	100185dc <__aeabi_dsub>
10017530:	f001 fba8 	bl	10018c84 <__aeabi_d2iz>
10017534:	2380      	movs	r3, #128	; 0x80
10017536:	061b      	lsls	r3, r3, #24
10017538:	469c      	mov	ip, r3
1001753a:	4460      	add	r0, ip
1001753c:	e7f1      	b.n	10017522 <__aeabi_d2uiz+0x1a>
1001753e:	46c0      	nop			; (mov r8, r8)
10017540:	41e00000 	.word	0x41e00000

10017544 <__aeabi_fdiv>:
10017544:	b5f0      	push	{r4, r5, r6, r7, lr}
10017546:	4656      	mov	r6, sl
10017548:	4644      	mov	r4, r8
1001754a:	465f      	mov	r7, fp
1001754c:	464d      	mov	r5, r9
1001754e:	b4f0      	push	{r4, r5, r6, r7}
10017550:	0244      	lsls	r4, r0, #9
10017552:	0046      	lsls	r6, r0, #1
10017554:	0fc7      	lsrs	r7, r0, #31
10017556:	b083      	sub	sp, #12
10017558:	4688      	mov	r8, r1
1001755a:	0a65      	lsrs	r5, r4, #9
1001755c:	0e36      	lsrs	r6, r6, #24
1001755e:	46ba      	mov	sl, r7
10017560:	d03d      	beq.n	100175de <__aeabi_fdiv+0x9a>
10017562:	2eff      	cmp	r6, #255	; 0xff
10017564:	d022      	beq.n	100175ac <__aeabi_fdiv+0x68>
10017566:	2300      	movs	r3, #0
10017568:	00ec      	lsls	r4, r5, #3
1001756a:	2580      	movs	r5, #128	; 0x80
1001756c:	4699      	mov	r9, r3
1001756e:	469b      	mov	fp, r3
10017570:	04ed      	lsls	r5, r5, #19
10017572:	4325      	orrs	r5, r4
10017574:	3e7f      	subs	r6, #127	; 0x7f
10017576:	4643      	mov	r3, r8
10017578:	025c      	lsls	r4, r3, #9
1001757a:	0058      	lsls	r0, r3, #1
1001757c:	0fdb      	lsrs	r3, r3, #31
1001757e:	0a64      	lsrs	r4, r4, #9
10017580:	0e00      	lsrs	r0, r0, #24
10017582:	4698      	mov	r8, r3
10017584:	d036      	beq.n	100175f4 <__aeabi_fdiv+0xb0>
10017586:	28ff      	cmp	r0, #255	; 0xff
10017588:	d030      	beq.n	100175ec <__aeabi_fdiv+0xa8>
1001758a:	2380      	movs	r3, #128	; 0x80
1001758c:	2100      	movs	r1, #0
1001758e:	00e4      	lsls	r4, r4, #3
10017590:	04db      	lsls	r3, r3, #19
10017592:	431c      	orrs	r4, r3
10017594:	387f      	subs	r0, #127	; 0x7f
10017596:	1a30      	subs	r0, r6, r0
10017598:	9001      	str	r0, [sp, #4]
1001759a:	4648      	mov	r0, r9
1001759c:	4642      	mov	r2, r8
1001759e:	4308      	orrs	r0, r1
100175a0:	4e72      	ldr	r6, [pc, #456]	; (1001776c <__aeabi_fdiv+0x228>)
100175a2:	0080      	lsls	r0, r0, #2
100175a4:	5830      	ldr	r0, [r6, r0]
100175a6:	407a      	eors	r2, r7
100175a8:	0013      	movs	r3, r2
100175aa:	4687      	mov	pc, r0
100175ac:	2d00      	cmp	r5, #0
100175ae:	d144      	bne.n	1001763a <__aeabi_fdiv+0xf6>
100175b0:	2308      	movs	r3, #8
100175b2:	4699      	mov	r9, r3
100175b4:	3b06      	subs	r3, #6
100175b6:	469b      	mov	fp, r3
100175b8:	e7dd      	b.n	10017576 <__aeabi_fdiv+0x32>
100175ba:	2201      	movs	r2, #1
100175bc:	20ff      	movs	r0, #255	; 0xff
100175be:	2400      	movs	r4, #0
100175c0:	401a      	ands	r2, r3
100175c2:	0264      	lsls	r4, r4, #9
100175c4:	05c3      	lsls	r3, r0, #23
100175c6:	0a64      	lsrs	r4, r4, #9
100175c8:	07d2      	lsls	r2, r2, #31
100175ca:	431c      	orrs	r4, r3
100175cc:	4314      	orrs	r4, r2
100175ce:	0020      	movs	r0, r4
100175d0:	b003      	add	sp, #12
100175d2:	bc3c      	pop	{r2, r3, r4, r5}
100175d4:	4690      	mov	r8, r2
100175d6:	4699      	mov	r9, r3
100175d8:	46a2      	mov	sl, r4
100175da:	46ab      	mov	fp, r5
100175dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100175de:	2d00      	cmp	r5, #0
100175e0:	d120      	bne.n	10017624 <__aeabi_fdiv+0xe0>
100175e2:	2304      	movs	r3, #4
100175e4:	4699      	mov	r9, r3
100175e6:	3b03      	subs	r3, #3
100175e8:	469b      	mov	fp, r3
100175ea:	e7c4      	b.n	10017576 <__aeabi_fdiv+0x32>
100175ec:	2c00      	cmp	r4, #0
100175ee:	d117      	bne.n	10017620 <__aeabi_fdiv+0xdc>
100175f0:	2102      	movs	r1, #2
100175f2:	e002      	b.n	100175fa <__aeabi_fdiv+0xb6>
100175f4:	2c00      	cmp	r4, #0
100175f6:	d10a      	bne.n	1001760e <__aeabi_fdiv+0xca>
100175f8:	2101      	movs	r1, #1
100175fa:	1a32      	subs	r2, r6, r0
100175fc:	9201      	str	r2, [sp, #4]
100175fe:	464a      	mov	r2, r9
10017600:	4643      	mov	r3, r8
10017602:	430a      	orrs	r2, r1
10017604:	485a      	ldr	r0, [pc, #360]	; (10017770 <__aeabi_fdiv+0x22c>)
10017606:	0092      	lsls	r2, r2, #2
10017608:	5882      	ldr	r2, [r0, r2]
1001760a:	407b      	eors	r3, r7
1001760c:	4697      	mov	pc, r2
1001760e:	0020      	movs	r0, r4
10017610:	f001 fba6 	bl	10018d60 <__clzsi2>
10017614:	1f43      	subs	r3, r0, #5
10017616:	3076      	adds	r0, #118	; 0x76
10017618:	409c      	lsls	r4, r3
1001761a:	4240      	negs	r0, r0
1001761c:	2100      	movs	r1, #0
1001761e:	e7ba      	b.n	10017596 <__aeabi_fdiv+0x52>
10017620:	2103      	movs	r1, #3
10017622:	e7b8      	b.n	10017596 <__aeabi_fdiv+0x52>
10017624:	0028      	movs	r0, r5
10017626:	f001 fb9b 	bl	10018d60 <__clzsi2>
1001762a:	1f43      	subs	r3, r0, #5
1001762c:	409d      	lsls	r5, r3
1001762e:	2300      	movs	r3, #0
10017630:	3076      	adds	r0, #118	; 0x76
10017632:	4246      	negs	r6, r0
10017634:	4699      	mov	r9, r3
10017636:	469b      	mov	fp, r3
10017638:	e79d      	b.n	10017576 <__aeabi_fdiv+0x32>
1001763a:	230c      	movs	r3, #12
1001763c:	4699      	mov	r9, r3
1001763e:	3b09      	subs	r3, #9
10017640:	469b      	mov	fp, r3
10017642:	e798      	b.n	10017576 <__aeabi_fdiv+0x32>
10017644:	2480      	movs	r4, #128	; 0x80
10017646:	2200      	movs	r2, #0
10017648:	03e4      	lsls	r4, r4, #15
1001764a:	20ff      	movs	r0, #255	; 0xff
1001764c:	e7b9      	b.n	100175c2 <__aeabi_fdiv+0x7e>
1001764e:	2400      	movs	r4, #0
10017650:	46c2      	mov	sl, r8
10017652:	468b      	mov	fp, r1
10017654:	465a      	mov	r2, fp
10017656:	4653      	mov	r3, sl
10017658:	2a02      	cmp	r2, #2
1001765a:	d0ae      	beq.n	100175ba <__aeabi_fdiv+0x76>
1001765c:	2a03      	cmp	r2, #3
1001765e:	d07d      	beq.n	1001775c <__aeabi_fdiv+0x218>
10017660:	2a01      	cmp	r2, #1
10017662:	d131      	bne.n	100176c8 <__aeabi_fdiv+0x184>
10017664:	2201      	movs	r2, #1
10017666:	2000      	movs	r0, #0
10017668:	401a      	ands	r2, r3
1001766a:	2400      	movs	r4, #0
1001766c:	e7a9      	b.n	100175c2 <__aeabi_fdiv+0x7e>
1001766e:	2201      	movs	r2, #1
10017670:	1a10      	subs	r0, r2, r0
10017672:	281b      	cmp	r0, #27
10017674:	dd56      	ble.n	10017724 <__aeabi_fdiv+0x1e0>
10017676:	401a      	ands	r2, r3
10017678:	2000      	movs	r0, #0
1001767a:	2400      	movs	r4, #0
1001767c:	e7a1      	b.n	100175c2 <__aeabi_fdiv+0x7e>
1001767e:	2380      	movs	r3, #128	; 0x80
10017680:	03db      	lsls	r3, r3, #15
10017682:	421d      	tst	r5, r3
10017684:	d14b      	bne.n	1001771e <__aeabi_fdiv+0x1da>
10017686:	2380      	movs	r3, #128	; 0x80
10017688:	03db      	lsls	r3, r3, #15
1001768a:	432b      	orrs	r3, r5
1001768c:	025c      	lsls	r4, r3, #9
1001768e:	0a64      	lsrs	r4, r4, #9
10017690:	003a      	movs	r2, r7
10017692:	20ff      	movs	r0, #255	; 0xff
10017694:	e795      	b.n	100175c2 <__aeabi_fdiv+0x7e>
10017696:	016d      	lsls	r5, r5, #5
10017698:	0160      	lsls	r0, r4, #5
1001769a:	4285      	cmp	r5, r0
1001769c:	d230      	bcs.n	10017700 <__aeabi_fdiv+0x1bc>
1001769e:	9a01      	ldr	r2, [sp, #4]
100176a0:	2400      	movs	r4, #0
100176a2:	3a01      	subs	r2, #1
100176a4:	9201      	str	r2, [sp, #4]
100176a6:	221b      	movs	r2, #27
100176a8:	2701      	movs	r7, #1
100176aa:	0029      	movs	r1, r5
100176ac:	0064      	lsls	r4, r4, #1
100176ae:	006d      	lsls	r5, r5, #1
100176b0:	2900      	cmp	r1, #0
100176b2:	db01      	blt.n	100176b8 <__aeabi_fdiv+0x174>
100176b4:	42a8      	cmp	r0, r5
100176b6:	d801      	bhi.n	100176bc <__aeabi_fdiv+0x178>
100176b8:	1a2d      	subs	r5, r5, r0
100176ba:	433c      	orrs	r4, r7
100176bc:	3a01      	subs	r2, #1
100176be:	2a00      	cmp	r2, #0
100176c0:	d1f3      	bne.n	100176aa <__aeabi_fdiv+0x166>
100176c2:	1e6a      	subs	r2, r5, #1
100176c4:	4195      	sbcs	r5, r2
100176c6:	432c      	orrs	r4, r5
100176c8:	9801      	ldr	r0, [sp, #4]
100176ca:	307f      	adds	r0, #127	; 0x7f
100176cc:	2800      	cmp	r0, #0
100176ce:	ddce      	ble.n	1001766e <__aeabi_fdiv+0x12a>
100176d0:	0762      	lsls	r2, r4, #29
100176d2:	d004      	beq.n	100176de <__aeabi_fdiv+0x19a>
100176d4:	220f      	movs	r2, #15
100176d6:	4022      	ands	r2, r4
100176d8:	2a04      	cmp	r2, #4
100176da:	d000      	beq.n	100176de <__aeabi_fdiv+0x19a>
100176dc:	3404      	adds	r4, #4
100176de:	0122      	lsls	r2, r4, #4
100176e0:	d503      	bpl.n	100176ea <__aeabi_fdiv+0x1a6>
100176e2:	4a24      	ldr	r2, [pc, #144]	; (10017774 <__aeabi_fdiv+0x230>)
100176e4:	9801      	ldr	r0, [sp, #4]
100176e6:	4014      	ands	r4, r2
100176e8:	3080      	adds	r0, #128	; 0x80
100176ea:	28fe      	cmp	r0, #254	; 0xfe
100176ec:	dd00      	ble.n	100176f0 <__aeabi_fdiv+0x1ac>
100176ee:	e764      	b.n	100175ba <__aeabi_fdiv+0x76>
100176f0:	2201      	movs	r2, #1
100176f2:	01a4      	lsls	r4, r4, #6
100176f4:	0a64      	lsrs	r4, r4, #9
100176f6:	b2c0      	uxtb	r0, r0
100176f8:	401a      	ands	r2, r3
100176fa:	e762      	b.n	100175c2 <__aeabi_fdiv+0x7e>
100176fc:	002c      	movs	r4, r5
100176fe:	e7a9      	b.n	10017654 <__aeabi_fdiv+0x110>
10017700:	1a2d      	subs	r5, r5, r0
10017702:	221a      	movs	r2, #26
10017704:	2401      	movs	r4, #1
10017706:	e7cf      	b.n	100176a8 <__aeabi_fdiv+0x164>
10017708:	026b      	lsls	r3, r5, #9
1001770a:	d5bc      	bpl.n	10017686 <__aeabi_fdiv+0x142>
1001770c:	2400      	movs	r4, #0
1001770e:	2380      	movs	r3, #128	; 0x80
10017710:	03db      	lsls	r3, r3, #15
10017712:	431c      	orrs	r4, r3
10017714:	0264      	lsls	r4, r4, #9
10017716:	0a64      	lsrs	r4, r4, #9
10017718:	4642      	mov	r2, r8
1001771a:	20ff      	movs	r0, #255	; 0xff
1001771c:	e751      	b.n	100175c2 <__aeabi_fdiv+0x7e>
1001771e:	421c      	tst	r4, r3
10017720:	d1b3      	bne.n	1001768a <__aeabi_fdiv+0x146>
10017722:	e7f4      	b.n	1001770e <__aeabi_fdiv+0x1ca>
10017724:	0021      	movs	r1, r4
10017726:	2220      	movs	r2, #32
10017728:	40c1      	lsrs	r1, r0
1001772a:	1a10      	subs	r0, r2, r0
1001772c:	4084      	lsls	r4, r0
1001772e:	1e62      	subs	r2, r4, #1
10017730:	4194      	sbcs	r4, r2
10017732:	430c      	orrs	r4, r1
10017734:	0762      	lsls	r2, r4, #29
10017736:	d004      	beq.n	10017742 <__aeabi_fdiv+0x1fe>
10017738:	220f      	movs	r2, #15
1001773a:	4022      	ands	r2, r4
1001773c:	2a04      	cmp	r2, #4
1001773e:	d000      	beq.n	10017742 <__aeabi_fdiv+0x1fe>
10017740:	3404      	adds	r4, #4
10017742:	0162      	lsls	r2, r4, #5
10017744:	d504      	bpl.n	10017750 <__aeabi_fdiv+0x20c>
10017746:	2201      	movs	r2, #1
10017748:	2001      	movs	r0, #1
1001774a:	401a      	ands	r2, r3
1001774c:	2400      	movs	r4, #0
1001774e:	e738      	b.n	100175c2 <__aeabi_fdiv+0x7e>
10017750:	2201      	movs	r2, #1
10017752:	01a4      	lsls	r4, r4, #6
10017754:	0a64      	lsrs	r4, r4, #9
10017756:	401a      	ands	r2, r3
10017758:	2000      	movs	r0, #0
1001775a:	e732      	b.n	100175c2 <__aeabi_fdiv+0x7e>
1001775c:	2380      	movs	r3, #128	; 0x80
1001775e:	03db      	lsls	r3, r3, #15
10017760:	431c      	orrs	r4, r3
10017762:	0264      	lsls	r4, r4, #9
10017764:	0a64      	lsrs	r4, r4, #9
10017766:	4652      	mov	r2, sl
10017768:	20ff      	movs	r0, #255	; 0xff
1001776a:	e72a      	b.n	100175c2 <__aeabi_fdiv+0x7e>
1001776c:	1001b688 	.word	0x1001b688
10017770:	1001b6c8 	.word	0x1001b6c8
10017774:	f7ffffff 	.word	0xf7ffffff

10017778 <__eqsf2>:
10017778:	0243      	lsls	r3, r0, #9
1001777a:	b570      	push	{r4, r5, r6, lr}
1001777c:	0042      	lsls	r2, r0, #1
1001777e:	004c      	lsls	r4, r1, #1
10017780:	0a5d      	lsrs	r5, r3, #9
10017782:	0fc3      	lsrs	r3, r0, #31
10017784:	0248      	lsls	r0, r1, #9
10017786:	0e12      	lsrs	r2, r2, #24
10017788:	0a46      	lsrs	r6, r0, #9
1001778a:	0e24      	lsrs	r4, r4, #24
1001778c:	0fc9      	lsrs	r1, r1, #31
1001778e:	2aff      	cmp	r2, #255	; 0xff
10017790:	d00f      	beq.n	100177b2 <__eqsf2+0x3a>
10017792:	2cff      	cmp	r4, #255	; 0xff
10017794:	d011      	beq.n	100177ba <__eqsf2+0x42>
10017796:	2001      	movs	r0, #1
10017798:	42a2      	cmp	r2, r4
1001779a:	d000      	beq.n	1001779e <__eqsf2+0x26>
1001779c:	bd70      	pop	{r4, r5, r6, pc}
1001779e:	42b5      	cmp	r5, r6
100177a0:	d1fc      	bne.n	1001779c <__eqsf2+0x24>
100177a2:	428b      	cmp	r3, r1
100177a4:	d00d      	beq.n	100177c2 <__eqsf2+0x4a>
100177a6:	2a00      	cmp	r2, #0
100177a8:	d1f8      	bne.n	1001779c <__eqsf2+0x24>
100177aa:	0028      	movs	r0, r5
100177ac:	1e43      	subs	r3, r0, #1
100177ae:	4198      	sbcs	r0, r3
100177b0:	e7f4      	b.n	1001779c <__eqsf2+0x24>
100177b2:	2001      	movs	r0, #1
100177b4:	2d00      	cmp	r5, #0
100177b6:	d1f1      	bne.n	1001779c <__eqsf2+0x24>
100177b8:	e7eb      	b.n	10017792 <__eqsf2+0x1a>
100177ba:	2001      	movs	r0, #1
100177bc:	2e00      	cmp	r6, #0
100177be:	d1ed      	bne.n	1001779c <__eqsf2+0x24>
100177c0:	e7e9      	b.n	10017796 <__eqsf2+0x1e>
100177c2:	2000      	movs	r0, #0
100177c4:	e7ea      	b.n	1001779c <__eqsf2+0x24>
100177c6:	46c0      	nop			; (mov r8, r8)

100177c8 <__gesf2>:
100177c8:	0243      	lsls	r3, r0, #9
100177ca:	b5f0      	push	{r4, r5, r6, r7, lr}
100177cc:	0042      	lsls	r2, r0, #1
100177ce:	0a5d      	lsrs	r5, r3, #9
100177d0:	0fc3      	lsrs	r3, r0, #31
100177d2:	0248      	lsls	r0, r1, #9
100177d4:	0a44      	lsrs	r4, r0, #9
100177d6:	0048      	lsls	r0, r1, #1
100177d8:	0e12      	lsrs	r2, r2, #24
100177da:	0e00      	lsrs	r0, r0, #24
100177dc:	0fc9      	lsrs	r1, r1, #31
100177de:	2aff      	cmp	r2, #255	; 0xff
100177e0:	d01f      	beq.n	10017822 <__gesf2+0x5a>
100177e2:	28ff      	cmp	r0, #255	; 0xff
100177e4:	d022      	beq.n	1001782c <__gesf2+0x64>
100177e6:	2a00      	cmp	r2, #0
100177e8:	d109      	bne.n	100177fe <__gesf2+0x36>
100177ea:	426e      	negs	r6, r5
100177ec:	416e      	adcs	r6, r5
100177ee:	2800      	cmp	r0, #0
100177f0:	d10f      	bne.n	10017812 <__gesf2+0x4a>
100177f2:	2c00      	cmp	r4, #0
100177f4:	d10d      	bne.n	10017812 <__gesf2+0x4a>
100177f6:	2000      	movs	r0, #0
100177f8:	2d00      	cmp	r5, #0
100177fa:	d009      	beq.n	10017810 <__gesf2+0x48>
100177fc:	e005      	b.n	1001780a <__gesf2+0x42>
100177fe:	2800      	cmp	r0, #0
10017800:	d101      	bne.n	10017806 <__gesf2+0x3e>
10017802:	2c00      	cmp	r4, #0
10017804:	d001      	beq.n	1001780a <__gesf2+0x42>
10017806:	428b      	cmp	r3, r1
10017808:	d013      	beq.n	10017832 <__gesf2+0x6a>
1001780a:	4258      	negs	r0, r3
1001780c:	2301      	movs	r3, #1
1001780e:	4318      	orrs	r0, r3
10017810:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017812:	2e00      	cmp	r6, #0
10017814:	d0f7      	beq.n	10017806 <__gesf2+0x3e>
10017816:	4248      	negs	r0, r1
10017818:	4141      	adcs	r1, r0
1001781a:	2001      	movs	r0, #1
1001781c:	4249      	negs	r1, r1
1001781e:	4308      	orrs	r0, r1
10017820:	e7f6      	b.n	10017810 <__gesf2+0x48>
10017822:	2d00      	cmp	r5, #0
10017824:	d0dd      	beq.n	100177e2 <__gesf2+0x1a>
10017826:	2002      	movs	r0, #2
10017828:	4240      	negs	r0, r0
1001782a:	e7f1      	b.n	10017810 <__gesf2+0x48>
1001782c:	2c00      	cmp	r4, #0
1001782e:	d0da      	beq.n	100177e6 <__gesf2+0x1e>
10017830:	e7f9      	b.n	10017826 <__gesf2+0x5e>
10017832:	4282      	cmp	r2, r0
10017834:	dce9      	bgt.n	1001780a <__gesf2+0x42>
10017836:	db04      	blt.n	10017842 <__gesf2+0x7a>
10017838:	42a5      	cmp	r5, r4
1001783a:	d8e6      	bhi.n	1001780a <__gesf2+0x42>
1001783c:	2000      	movs	r0, #0
1001783e:	42a5      	cmp	r5, r4
10017840:	d2e6      	bcs.n	10017810 <__gesf2+0x48>
10017842:	4258      	negs	r0, r3
10017844:	4143      	adcs	r3, r0
10017846:	2001      	movs	r0, #1
10017848:	425b      	negs	r3, r3
1001784a:	4318      	orrs	r0, r3
1001784c:	e7e0      	b.n	10017810 <__gesf2+0x48>
1001784e:	46c0      	nop			; (mov r8, r8)

10017850 <__lesf2>:
10017850:	0243      	lsls	r3, r0, #9
10017852:	b5f0      	push	{r4, r5, r6, r7, lr}
10017854:	0042      	lsls	r2, r0, #1
10017856:	004c      	lsls	r4, r1, #1
10017858:	0a5e      	lsrs	r6, r3, #9
1001785a:	0fc3      	lsrs	r3, r0, #31
1001785c:	0248      	lsls	r0, r1, #9
1001785e:	0e12      	lsrs	r2, r2, #24
10017860:	0a45      	lsrs	r5, r0, #9
10017862:	0e24      	lsrs	r4, r4, #24
10017864:	0fc9      	lsrs	r1, r1, #31
10017866:	2aff      	cmp	r2, #255	; 0xff
10017868:	d017      	beq.n	1001789a <__lesf2+0x4a>
1001786a:	2cff      	cmp	r4, #255	; 0xff
1001786c:	d019      	beq.n	100178a2 <__lesf2+0x52>
1001786e:	2a00      	cmp	r2, #0
10017870:	d10b      	bne.n	1001788a <__lesf2+0x3a>
10017872:	4270      	negs	r0, r6
10017874:	4170      	adcs	r0, r6
10017876:	2c00      	cmp	r4, #0
10017878:	d017      	beq.n	100178aa <__lesf2+0x5a>
1001787a:	2800      	cmp	r0, #0
1001787c:	d007      	beq.n	1001788e <__lesf2+0x3e>
1001787e:	4248      	negs	r0, r1
10017880:	4141      	adcs	r1, r0
10017882:	2001      	movs	r0, #1
10017884:	4249      	negs	r1, r1
10017886:	4308      	orrs	r0, r1
10017888:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001788a:	2c00      	cmp	r4, #0
1001788c:	d013      	beq.n	100178b6 <__lesf2+0x66>
1001788e:	428b      	cmp	r3, r1
10017890:	d014      	beq.n	100178bc <__lesf2+0x6c>
10017892:	4258      	negs	r0, r3
10017894:	2301      	movs	r3, #1
10017896:	4318      	orrs	r0, r3
10017898:	e7f6      	b.n	10017888 <__lesf2+0x38>
1001789a:	2002      	movs	r0, #2
1001789c:	2e00      	cmp	r6, #0
1001789e:	d1f3      	bne.n	10017888 <__lesf2+0x38>
100178a0:	e7e3      	b.n	1001786a <__lesf2+0x1a>
100178a2:	2002      	movs	r0, #2
100178a4:	2d00      	cmp	r5, #0
100178a6:	d1ef      	bne.n	10017888 <__lesf2+0x38>
100178a8:	e7e1      	b.n	1001786e <__lesf2+0x1e>
100178aa:	2d00      	cmp	r5, #0
100178ac:	d1e5      	bne.n	1001787a <__lesf2+0x2a>
100178ae:	2000      	movs	r0, #0
100178b0:	2e00      	cmp	r6, #0
100178b2:	d0e9      	beq.n	10017888 <__lesf2+0x38>
100178b4:	e7ed      	b.n	10017892 <__lesf2+0x42>
100178b6:	2d00      	cmp	r5, #0
100178b8:	d1e9      	bne.n	1001788e <__lesf2+0x3e>
100178ba:	e7ea      	b.n	10017892 <__lesf2+0x42>
100178bc:	42a2      	cmp	r2, r4
100178be:	dce8      	bgt.n	10017892 <__lesf2+0x42>
100178c0:	db04      	blt.n	100178cc <__lesf2+0x7c>
100178c2:	42ae      	cmp	r6, r5
100178c4:	d8e5      	bhi.n	10017892 <__lesf2+0x42>
100178c6:	2000      	movs	r0, #0
100178c8:	42ae      	cmp	r6, r5
100178ca:	d2dd      	bcs.n	10017888 <__lesf2+0x38>
100178cc:	4258      	negs	r0, r3
100178ce:	4143      	adcs	r3, r0
100178d0:	2001      	movs	r0, #1
100178d2:	425b      	negs	r3, r3
100178d4:	4318      	orrs	r0, r3
100178d6:	e7d7      	b.n	10017888 <__lesf2+0x38>

100178d8 <__aeabi_fmul>:
100178d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100178da:	4657      	mov	r7, sl
100178dc:	464e      	mov	r6, r9
100178de:	4645      	mov	r5, r8
100178e0:	0043      	lsls	r3, r0, #1
100178e2:	b4e0      	push	{r5, r6, r7}
100178e4:	0246      	lsls	r6, r0, #9
100178e6:	4688      	mov	r8, r1
100178e8:	0a76      	lsrs	r6, r6, #9
100178ea:	0e1f      	lsrs	r7, r3, #24
100178ec:	0fc4      	lsrs	r4, r0, #31
100178ee:	2f00      	cmp	r7, #0
100178f0:	d047      	beq.n	10017982 <__aeabi_fmul+0xaa>
100178f2:	2fff      	cmp	r7, #255	; 0xff
100178f4:	d025      	beq.n	10017942 <__aeabi_fmul+0x6a>
100178f6:	2300      	movs	r3, #0
100178f8:	2580      	movs	r5, #128	; 0x80
100178fa:	469a      	mov	sl, r3
100178fc:	4699      	mov	r9, r3
100178fe:	00f6      	lsls	r6, r6, #3
10017900:	04ed      	lsls	r5, r5, #19
10017902:	432e      	orrs	r6, r5
10017904:	3f7f      	subs	r7, #127	; 0x7f
10017906:	4643      	mov	r3, r8
10017908:	4642      	mov	r2, r8
1001790a:	025d      	lsls	r5, r3, #9
1001790c:	0fd2      	lsrs	r2, r2, #31
1001790e:	005b      	lsls	r3, r3, #1
10017910:	0a6d      	lsrs	r5, r5, #9
10017912:	0e1b      	lsrs	r3, r3, #24
10017914:	4690      	mov	r8, r2
10017916:	d040      	beq.n	1001799a <__aeabi_fmul+0xc2>
10017918:	2bff      	cmp	r3, #255	; 0xff
1001791a:	d039      	beq.n	10017990 <__aeabi_fmul+0xb8>
1001791c:	2280      	movs	r2, #128	; 0x80
1001791e:	2000      	movs	r0, #0
10017920:	00ed      	lsls	r5, r5, #3
10017922:	04d2      	lsls	r2, r2, #19
10017924:	4315      	orrs	r5, r2
10017926:	3b7f      	subs	r3, #127	; 0x7f
10017928:	18fb      	adds	r3, r7, r3
1001792a:	4642      	mov	r2, r8
1001792c:	4657      	mov	r7, sl
1001792e:	1c59      	adds	r1, r3, #1
10017930:	4062      	eors	r2, r4
10017932:	468c      	mov	ip, r1
10017934:	4307      	orrs	r7, r0
10017936:	2f0f      	cmp	r7, #15
10017938:	d85c      	bhi.n	100179f4 <__aeabi_fmul+0x11c>
1001793a:	496f      	ldr	r1, [pc, #444]	; (10017af8 <__aeabi_fmul+0x220>)
1001793c:	00bf      	lsls	r7, r7, #2
1001793e:	59c9      	ldr	r1, [r1, r7]
10017940:	468f      	mov	pc, r1
10017942:	2e00      	cmp	r6, #0
10017944:	d145      	bne.n	100179d2 <__aeabi_fmul+0xfa>
10017946:	2308      	movs	r3, #8
10017948:	469a      	mov	sl, r3
1001794a:	3b06      	subs	r3, #6
1001794c:	4699      	mov	r9, r3
1001794e:	e7da      	b.n	10017906 <__aeabi_fmul+0x2e>
10017950:	4642      	mov	r2, r8
10017952:	2802      	cmp	r0, #2
10017954:	d02d      	beq.n	100179b2 <__aeabi_fmul+0xda>
10017956:	2803      	cmp	r0, #3
10017958:	d100      	bne.n	1001795c <__aeabi_fmul+0x84>
1001795a:	e0c3      	b.n	10017ae4 <__aeabi_fmul+0x20c>
1001795c:	2801      	cmp	r0, #1
1001795e:	d000      	beq.n	10017962 <__aeabi_fmul+0x8a>
10017960:	e0a2      	b.n	10017aa8 <__aeabi_fmul+0x1d0>
10017962:	2500      	movs	r5, #0
10017964:	2600      	movs	r6, #0
10017966:	4002      	ands	r2, r0
10017968:	b2d4      	uxtb	r4, r2
1001796a:	0276      	lsls	r6, r6, #9
1001796c:	05ed      	lsls	r5, r5, #23
1001796e:	0a76      	lsrs	r6, r6, #9
10017970:	432e      	orrs	r6, r5
10017972:	07e4      	lsls	r4, r4, #31
10017974:	4326      	orrs	r6, r4
10017976:	0030      	movs	r0, r6
10017978:	bc1c      	pop	{r2, r3, r4}
1001797a:	4690      	mov	r8, r2
1001797c:	4699      	mov	r9, r3
1001797e:	46a2      	mov	sl, r4
10017980:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017982:	2e00      	cmp	r6, #0
10017984:	d11a      	bne.n	100179bc <__aeabi_fmul+0xe4>
10017986:	2304      	movs	r3, #4
10017988:	469a      	mov	sl, r3
1001798a:	3b03      	subs	r3, #3
1001798c:	4699      	mov	r9, r3
1001798e:	e7ba      	b.n	10017906 <__aeabi_fmul+0x2e>
10017990:	002a      	movs	r2, r5
10017992:	1e51      	subs	r1, r2, #1
10017994:	418a      	sbcs	r2, r1
10017996:	1c90      	adds	r0, r2, #2
10017998:	e7c6      	b.n	10017928 <__aeabi_fmul+0x50>
1001799a:	2001      	movs	r0, #1
1001799c:	2d00      	cmp	r5, #0
1001799e:	d0c3      	beq.n	10017928 <__aeabi_fmul+0x50>
100179a0:	0028      	movs	r0, r5
100179a2:	f001 f9dd 	bl	10018d60 <__clzsi2>
100179a6:	1f43      	subs	r3, r0, #5
100179a8:	3076      	adds	r0, #118	; 0x76
100179aa:	409d      	lsls	r5, r3
100179ac:	4243      	negs	r3, r0
100179ae:	2000      	movs	r0, #0
100179b0:	e7ba      	b.n	10017928 <__aeabi_fmul+0x50>
100179b2:	2401      	movs	r4, #1
100179b4:	25ff      	movs	r5, #255	; 0xff
100179b6:	4014      	ands	r4, r2
100179b8:	2600      	movs	r6, #0
100179ba:	e7d6      	b.n	1001796a <__aeabi_fmul+0x92>
100179bc:	0030      	movs	r0, r6
100179be:	f001 f9cf 	bl	10018d60 <__clzsi2>
100179c2:	1f43      	subs	r3, r0, #5
100179c4:	409e      	lsls	r6, r3
100179c6:	2300      	movs	r3, #0
100179c8:	3076      	adds	r0, #118	; 0x76
100179ca:	4247      	negs	r7, r0
100179cc:	469a      	mov	sl, r3
100179ce:	4699      	mov	r9, r3
100179d0:	e799      	b.n	10017906 <__aeabi_fmul+0x2e>
100179d2:	230c      	movs	r3, #12
100179d4:	469a      	mov	sl, r3
100179d6:	3b09      	subs	r3, #9
100179d8:	4699      	mov	r9, r3
100179da:	e794      	b.n	10017906 <__aeabi_fmul+0x2e>
100179dc:	2680      	movs	r6, #128	; 0x80
100179de:	2400      	movs	r4, #0
100179e0:	03f6      	lsls	r6, r6, #15
100179e2:	25ff      	movs	r5, #255	; 0xff
100179e4:	e7c1      	b.n	1001796a <__aeabi_fmul+0x92>
100179e6:	0035      	movs	r5, r6
100179e8:	4648      	mov	r0, r9
100179ea:	e7b2      	b.n	10017952 <__aeabi_fmul+0x7a>
100179ec:	0035      	movs	r5, r6
100179ee:	0022      	movs	r2, r4
100179f0:	4648      	mov	r0, r9
100179f2:	e7ae      	b.n	10017952 <__aeabi_fmul+0x7a>
100179f4:	0429      	lsls	r1, r5, #16
100179f6:	0c09      	lsrs	r1, r1, #16
100179f8:	0008      	movs	r0, r1
100179fa:	0c37      	lsrs	r7, r6, #16
100179fc:	0436      	lsls	r6, r6, #16
100179fe:	0c36      	lsrs	r6, r6, #16
10017a00:	0c2c      	lsrs	r4, r5, #16
10017a02:	4379      	muls	r1, r7
10017a04:	4370      	muls	r0, r6
10017a06:	4367      	muls	r7, r4
10017a08:	4374      	muls	r4, r6
10017a0a:	0c06      	lsrs	r6, r0, #16
10017a0c:	1864      	adds	r4, r4, r1
10017a0e:	1936      	adds	r6, r6, r4
10017a10:	42b1      	cmp	r1, r6
10017a12:	d903      	bls.n	10017a1c <__aeabi_fmul+0x144>
10017a14:	2180      	movs	r1, #128	; 0x80
10017a16:	0249      	lsls	r1, r1, #9
10017a18:	4688      	mov	r8, r1
10017a1a:	4447      	add	r7, r8
10017a1c:	0400      	lsls	r0, r0, #16
10017a1e:	0c00      	lsrs	r0, r0, #16
10017a20:	0431      	lsls	r1, r6, #16
10017a22:	1809      	adds	r1, r1, r0
10017a24:	018d      	lsls	r5, r1, #6
10017a26:	1e68      	subs	r0, r5, #1
10017a28:	4185      	sbcs	r5, r0
10017a2a:	0e89      	lsrs	r1, r1, #26
10017a2c:	4329      	orrs	r1, r5
10017a2e:	0c35      	lsrs	r5, r6, #16
10017a30:	19ed      	adds	r5, r5, r7
10017a32:	01ad      	lsls	r5, r5, #6
10017a34:	430d      	orrs	r5, r1
10017a36:	0129      	lsls	r1, r5, #4
10017a38:	d504      	bpl.n	10017a44 <__aeabi_fmul+0x16c>
10017a3a:	2301      	movs	r3, #1
10017a3c:	0869      	lsrs	r1, r5, #1
10017a3e:	401d      	ands	r5, r3
10017a40:	4663      	mov	r3, ip
10017a42:	430d      	orrs	r5, r1
10017a44:	0019      	movs	r1, r3
10017a46:	317f      	adds	r1, #127	; 0x7f
10017a48:	2900      	cmp	r1, #0
10017a4a:	dd25      	ble.n	10017a98 <__aeabi_fmul+0x1c0>
10017a4c:	0768      	lsls	r0, r5, #29
10017a4e:	d004      	beq.n	10017a5a <__aeabi_fmul+0x182>
10017a50:	200f      	movs	r0, #15
10017a52:	4028      	ands	r0, r5
10017a54:	2804      	cmp	r0, #4
10017a56:	d000      	beq.n	10017a5a <__aeabi_fmul+0x182>
10017a58:	3504      	adds	r5, #4
10017a5a:	0128      	lsls	r0, r5, #4
10017a5c:	d503      	bpl.n	10017a66 <__aeabi_fmul+0x18e>
10017a5e:	4927      	ldr	r1, [pc, #156]	; (10017afc <__aeabi_fmul+0x224>)
10017a60:	3380      	adds	r3, #128	; 0x80
10017a62:	400d      	ands	r5, r1
10017a64:	0019      	movs	r1, r3
10017a66:	29fe      	cmp	r1, #254	; 0xfe
10017a68:	dca3      	bgt.n	100179b2 <__aeabi_fmul+0xda>
10017a6a:	2401      	movs	r4, #1
10017a6c:	01ad      	lsls	r5, r5, #6
10017a6e:	0a6e      	lsrs	r6, r5, #9
10017a70:	4014      	ands	r4, r2
10017a72:	b2cd      	uxtb	r5, r1
10017a74:	e779      	b.n	1001796a <__aeabi_fmul+0x92>
10017a76:	2080      	movs	r0, #128	; 0x80
10017a78:	03c0      	lsls	r0, r0, #15
10017a7a:	4206      	tst	r6, r0
10017a7c:	d007      	beq.n	10017a8e <__aeabi_fmul+0x1b6>
10017a7e:	4205      	tst	r5, r0
10017a80:	d105      	bne.n	10017a8e <__aeabi_fmul+0x1b6>
10017a82:	4328      	orrs	r0, r5
10017a84:	0246      	lsls	r6, r0, #9
10017a86:	0a76      	lsrs	r6, r6, #9
10017a88:	4644      	mov	r4, r8
10017a8a:	25ff      	movs	r5, #255	; 0xff
10017a8c:	e76d      	b.n	1001796a <__aeabi_fmul+0x92>
10017a8e:	4306      	orrs	r6, r0
10017a90:	0276      	lsls	r6, r6, #9
10017a92:	0a76      	lsrs	r6, r6, #9
10017a94:	25ff      	movs	r5, #255	; 0xff
10017a96:	e768      	b.n	1001796a <__aeabi_fmul+0x92>
10017a98:	2401      	movs	r4, #1
10017a9a:	1a61      	subs	r1, r4, r1
10017a9c:	291b      	cmp	r1, #27
10017a9e:	dd05      	ble.n	10017aac <__aeabi_fmul+0x1d4>
10017aa0:	4014      	ands	r4, r2
10017aa2:	2500      	movs	r5, #0
10017aa4:	2600      	movs	r6, #0
10017aa6:	e760      	b.n	1001796a <__aeabi_fmul+0x92>
10017aa8:	4663      	mov	r3, ip
10017aaa:	e7cb      	b.n	10017a44 <__aeabi_fmul+0x16c>
10017aac:	002e      	movs	r6, r5
10017aae:	2320      	movs	r3, #32
10017ab0:	40ce      	lsrs	r6, r1
10017ab2:	1a59      	subs	r1, r3, r1
10017ab4:	408d      	lsls	r5, r1
10017ab6:	1e6b      	subs	r3, r5, #1
10017ab8:	419d      	sbcs	r5, r3
10017aba:	432e      	orrs	r6, r5
10017abc:	0773      	lsls	r3, r6, #29
10017abe:	d004      	beq.n	10017aca <__aeabi_fmul+0x1f2>
10017ac0:	230f      	movs	r3, #15
10017ac2:	4033      	ands	r3, r6
10017ac4:	2b04      	cmp	r3, #4
10017ac6:	d000      	beq.n	10017aca <__aeabi_fmul+0x1f2>
10017ac8:	3604      	adds	r6, #4
10017aca:	0173      	lsls	r3, r6, #5
10017acc:	d504      	bpl.n	10017ad8 <__aeabi_fmul+0x200>
10017ace:	2401      	movs	r4, #1
10017ad0:	2501      	movs	r5, #1
10017ad2:	4014      	ands	r4, r2
10017ad4:	2600      	movs	r6, #0
10017ad6:	e748      	b.n	1001796a <__aeabi_fmul+0x92>
10017ad8:	2401      	movs	r4, #1
10017ada:	01b6      	lsls	r6, r6, #6
10017adc:	0a76      	lsrs	r6, r6, #9
10017ade:	4014      	ands	r4, r2
10017ae0:	2500      	movs	r5, #0
10017ae2:	e742      	b.n	1001796a <__aeabi_fmul+0x92>
10017ae4:	2680      	movs	r6, #128	; 0x80
10017ae6:	2401      	movs	r4, #1
10017ae8:	03f6      	lsls	r6, r6, #15
10017aea:	432e      	orrs	r6, r5
10017aec:	0276      	lsls	r6, r6, #9
10017aee:	0a76      	lsrs	r6, r6, #9
10017af0:	4014      	ands	r4, r2
10017af2:	25ff      	movs	r5, #255	; 0xff
10017af4:	e739      	b.n	1001796a <__aeabi_fmul+0x92>
10017af6:	46c0      	nop			; (mov r8, r8)
10017af8:	1001b708 	.word	0x1001b708
10017afc:	f7ffffff 	.word	0xf7ffffff

10017b00 <__aeabi_fsub>:
10017b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017b02:	024a      	lsls	r2, r1, #9
10017b04:	004e      	lsls	r6, r1, #1
10017b06:	0243      	lsls	r3, r0, #9
10017b08:	0044      	lsls	r4, r0, #1
10017b0a:	0e24      	lsrs	r4, r4, #24
10017b0c:	0fc5      	lsrs	r5, r0, #31
10017b0e:	099b      	lsrs	r3, r3, #6
10017b10:	0e36      	lsrs	r6, r6, #24
10017b12:	0fc9      	lsrs	r1, r1, #31
10017b14:	0992      	lsrs	r2, r2, #6
10017b16:	2eff      	cmp	r6, #255	; 0xff
10017b18:	d100      	bne.n	10017b1c <__aeabi_fsub+0x1c>
10017b1a:	e083      	b.n	10017c24 <__aeabi_fsub+0x124>
10017b1c:	2001      	movs	r0, #1
10017b1e:	4041      	eors	r1, r0
10017b20:	1ba0      	subs	r0, r4, r6
10017b22:	42a9      	cmp	r1, r5
10017b24:	d05c      	beq.n	10017be0 <__aeabi_fsub+0xe0>
10017b26:	2800      	cmp	r0, #0
10017b28:	dc00      	bgt.n	10017b2c <__aeabi_fsub+0x2c>
10017b2a:	e095      	b.n	10017c58 <__aeabi_fsub+0x158>
10017b2c:	2e00      	cmp	r6, #0
10017b2e:	d11c      	bne.n	10017b6a <__aeabi_fsub+0x6a>
10017b30:	2a00      	cmp	r2, #0
10017b32:	d000      	beq.n	10017b36 <__aeabi_fsub+0x36>
10017b34:	e081      	b.n	10017c3a <__aeabi_fsub+0x13a>
10017b36:	075a      	lsls	r2, r3, #29
10017b38:	d004      	beq.n	10017b44 <__aeabi_fsub+0x44>
10017b3a:	220f      	movs	r2, #15
10017b3c:	401a      	ands	r2, r3
10017b3e:	2a04      	cmp	r2, #4
10017b40:	d000      	beq.n	10017b44 <__aeabi_fsub+0x44>
10017b42:	3304      	adds	r3, #4
10017b44:	015a      	lsls	r2, r3, #5
10017b46:	d53b      	bpl.n	10017bc0 <__aeabi_fsub+0xc0>
10017b48:	3401      	adds	r4, #1
10017b4a:	2cff      	cmp	r4, #255	; 0xff
10017b4c:	d100      	bne.n	10017b50 <__aeabi_fsub+0x50>
10017b4e:	e091      	b.n	10017c74 <__aeabi_fsub+0x174>
10017b50:	2001      	movs	r0, #1
10017b52:	019b      	lsls	r3, r3, #6
10017b54:	0a5b      	lsrs	r3, r3, #9
10017b56:	b2e4      	uxtb	r4, r4
10017b58:	4005      	ands	r5, r0
10017b5a:	025b      	lsls	r3, r3, #9
10017b5c:	05e4      	lsls	r4, r4, #23
10017b5e:	0a5b      	lsrs	r3, r3, #9
10017b60:	07ed      	lsls	r5, r5, #31
10017b62:	4323      	orrs	r3, r4
10017b64:	432b      	orrs	r3, r5
10017b66:	0018      	movs	r0, r3
10017b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017b6a:	2cff      	cmp	r4, #255	; 0xff
10017b6c:	d0e3      	beq.n	10017b36 <__aeabi_fsub+0x36>
10017b6e:	2180      	movs	r1, #128	; 0x80
10017b70:	04c9      	lsls	r1, r1, #19
10017b72:	430a      	orrs	r2, r1
10017b74:	281b      	cmp	r0, #27
10017b76:	dd00      	ble.n	10017b7a <__aeabi_fsub+0x7a>
10017b78:	e090      	b.n	10017c9c <__aeabi_fsub+0x19c>
10017b7a:	0016      	movs	r6, r2
10017b7c:	2120      	movs	r1, #32
10017b7e:	40c6      	lsrs	r6, r0
10017b80:	1a08      	subs	r0, r1, r0
10017b82:	4082      	lsls	r2, r0
10017b84:	1e51      	subs	r1, r2, #1
10017b86:	418a      	sbcs	r2, r1
10017b88:	4332      	orrs	r2, r6
10017b8a:	1a9b      	subs	r3, r3, r2
10017b8c:	015a      	lsls	r2, r3, #5
10017b8e:	d515      	bpl.n	10017bbc <__aeabi_fsub+0xbc>
10017b90:	019b      	lsls	r3, r3, #6
10017b92:	099e      	lsrs	r6, r3, #6
10017b94:	0030      	movs	r0, r6
10017b96:	f001 f8e3 	bl	10018d60 <__clzsi2>
10017b9a:	3805      	subs	r0, #5
10017b9c:	4086      	lsls	r6, r0
10017b9e:	4284      	cmp	r4, r0
10017ba0:	dc6c      	bgt.n	10017c7c <__aeabi_fsub+0x17c>
10017ba2:	1b04      	subs	r4, r0, r4
10017ba4:	0033      	movs	r3, r6
10017ba6:	2020      	movs	r0, #32
10017ba8:	3401      	adds	r4, #1
10017baa:	40e3      	lsrs	r3, r4
10017bac:	1b04      	subs	r4, r0, r4
10017bae:	40a6      	lsls	r6, r4
10017bb0:	1e72      	subs	r2, r6, #1
10017bb2:	4196      	sbcs	r6, r2
10017bb4:	2400      	movs	r4, #0
10017bb6:	4333      	orrs	r3, r6
10017bb8:	e7bd      	b.n	10017b36 <__aeabi_fsub+0x36>
10017bba:	000d      	movs	r5, r1
10017bbc:	075a      	lsls	r2, r3, #29
10017bbe:	d1bc      	bne.n	10017b3a <__aeabi_fsub+0x3a>
10017bc0:	08df      	lsrs	r7, r3, #3
10017bc2:	2301      	movs	r3, #1
10017bc4:	401d      	ands	r5, r3
10017bc6:	2cff      	cmp	r4, #255	; 0xff
10017bc8:	d133      	bne.n	10017c32 <__aeabi_fsub+0x132>
10017bca:	2f00      	cmp	r7, #0
10017bcc:	d100      	bne.n	10017bd0 <__aeabi_fsub+0xd0>
10017bce:	e090      	b.n	10017cf2 <__aeabi_fsub+0x1f2>
10017bd0:	2280      	movs	r2, #128	; 0x80
10017bd2:	03d2      	lsls	r2, r2, #15
10017bd4:	0013      	movs	r3, r2
10017bd6:	433b      	orrs	r3, r7
10017bd8:	025b      	lsls	r3, r3, #9
10017bda:	0a5b      	lsrs	r3, r3, #9
10017bdc:	24ff      	movs	r4, #255	; 0xff
10017bde:	e7bc      	b.n	10017b5a <__aeabi_fsub+0x5a>
10017be0:	2800      	cmp	r0, #0
10017be2:	dd4f      	ble.n	10017c84 <__aeabi_fsub+0x184>
10017be4:	2e00      	cmp	r6, #0
10017be6:	d02e      	beq.n	10017c46 <__aeabi_fsub+0x146>
10017be8:	2cff      	cmp	r4, #255	; 0xff
10017bea:	d0a4      	beq.n	10017b36 <__aeabi_fsub+0x36>
10017bec:	2580      	movs	r5, #128	; 0x80
10017bee:	04ed      	lsls	r5, r5, #19
10017bf0:	432a      	orrs	r2, r5
10017bf2:	281b      	cmp	r0, #27
10017bf4:	dd00      	ble.n	10017bf8 <__aeabi_fsub+0xf8>
10017bf6:	e097      	b.n	10017d28 <__aeabi_fsub+0x228>
10017bf8:	0016      	movs	r6, r2
10017bfa:	2520      	movs	r5, #32
10017bfc:	40c6      	lsrs	r6, r0
10017bfe:	1a28      	subs	r0, r5, r0
10017c00:	4082      	lsls	r2, r0
10017c02:	1e50      	subs	r0, r2, #1
10017c04:	4182      	sbcs	r2, r0
10017c06:	4332      	orrs	r2, r6
10017c08:	189b      	adds	r3, r3, r2
10017c0a:	015a      	lsls	r2, r3, #5
10017c0c:	d5d5      	bpl.n	10017bba <__aeabi_fsub+0xba>
10017c0e:	3401      	adds	r4, #1
10017c10:	2cff      	cmp	r4, #255	; 0xff
10017c12:	d06d      	beq.n	10017cf0 <__aeabi_fsub+0x1f0>
10017c14:	2201      	movs	r2, #1
10017c16:	487b      	ldr	r0, [pc, #492]	; (10017e04 <__aeabi_fsub+0x304>)
10017c18:	401a      	ands	r2, r3
10017c1a:	085b      	lsrs	r3, r3, #1
10017c1c:	4003      	ands	r3, r0
10017c1e:	4313      	orrs	r3, r2
10017c20:	000d      	movs	r5, r1
10017c22:	e788      	b.n	10017b36 <__aeabi_fsub+0x36>
10017c24:	2a00      	cmp	r2, #0
10017c26:	d000      	beq.n	10017c2a <__aeabi_fsub+0x12a>
10017c28:	e77a      	b.n	10017b20 <__aeabi_fsub+0x20>
10017c2a:	e777      	b.n	10017b1c <__aeabi_fsub+0x1c>
10017c2c:	1e03      	subs	r3, r0, #0
10017c2e:	d1c5      	bne.n	10017bbc <__aeabi_fsub+0xbc>
10017c30:	2500      	movs	r5, #0
10017c32:	027b      	lsls	r3, r7, #9
10017c34:	0a5b      	lsrs	r3, r3, #9
10017c36:	b2e4      	uxtb	r4, r4
10017c38:	e78f      	b.n	10017b5a <__aeabi_fsub+0x5a>
10017c3a:	3801      	subs	r0, #1
10017c3c:	2800      	cmp	r0, #0
10017c3e:	d0a4      	beq.n	10017b8a <__aeabi_fsub+0x8a>
10017c40:	2cff      	cmp	r4, #255	; 0xff
10017c42:	d197      	bne.n	10017b74 <__aeabi_fsub+0x74>
10017c44:	e777      	b.n	10017b36 <__aeabi_fsub+0x36>
10017c46:	2a00      	cmp	r2, #0
10017c48:	d100      	bne.n	10017c4c <__aeabi_fsub+0x14c>
10017c4a:	e774      	b.n	10017b36 <__aeabi_fsub+0x36>
10017c4c:	3801      	subs	r0, #1
10017c4e:	2800      	cmp	r0, #0
10017c50:	d0da      	beq.n	10017c08 <__aeabi_fsub+0x108>
10017c52:	2cff      	cmp	r4, #255	; 0xff
10017c54:	d1cd      	bne.n	10017bf2 <__aeabi_fsub+0xf2>
10017c56:	e76e      	b.n	10017b36 <__aeabi_fsub+0x36>
10017c58:	2800      	cmp	r0, #0
10017c5a:	d121      	bne.n	10017ca0 <__aeabi_fsub+0x1a0>
10017c5c:	1c60      	adds	r0, r4, #1
10017c5e:	b2c0      	uxtb	r0, r0
10017c60:	2801      	cmp	r0, #1
10017c62:	dd58      	ble.n	10017d16 <__aeabi_fsub+0x216>
10017c64:	2780      	movs	r7, #128	; 0x80
10017c66:	1a9e      	subs	r6, r3, r2
10017c68:	04ff      	lsls	r7, r7, #19
10017c6a:	4037      	ands	r7, r6
10017c6c:	d02f      	beq.n	10017cce <__aeabi_fsub+0x1ce>
10017c6e:	1ad6      	subs	r6, r2, r3
10017c70:	000d      	movs	r5, r1
10017c72:	e78f      	b.n	10017b94 <__aeabi_fsub+0x94>
10017c74:	2301      	movs	r3, #1
10017c76:	401d      	ands	r5, r3
10017c78:	2300      	movs	r3, #0
10017c7a:	e76e      	b.n	10017b5a <__aeabi_fsub+0x5a>
10017c7c:	4b62      	ldr	r3, [pc, #392]	; (10017e08 <__aeabi_fsub+0x308>)
10017c7e:	1a24      	subs	r4, r4, r0
10017c80:	4033      	ands	r3, r6
10017c82:	e758      	b.n	10017b36 <__aeabi_fsub+0x36>
10017c84:	2800      	cmp	r0, #0
10017c86:	d151      	bne.n	10017d2c <__aeabi_fsub+0x22c>
10017c88:	1c60      	adds	r0, r4, #1
10017c8a:	b2c6      	uxtb	r6, r0
10017c8c:	2e01      	cmp	r6, #1
10017c8e:	dd33      	ble.n	10017cf8 <__aeabi_fsub+0x1f8>
10017c90:	28ff      	cmp	r0, #255	; 0xff
10017c92:	d02d      	beq.n	10017cf0 <__aeabi_fsub+0x1f0>
10017c94:	189b      	adds	r3, r3, r2
10017c96:	085b      	lsrs	r3, r3, #1
10017c98:	0004      	movs	r4, r0
10017c9a:	e74c      	b.n	10017b36 <__aeabi_fsub+0x36>
10017c9c:	2201      	movs	r2, #1
10017c9e:	e774      	b.n	10017b8a <__aeabi_fsub+0x8a>
10017ca0:	2c00      	cmp	r4, #0
10017ca2:	d01a      	beq.n	10017cda <__aeabi_fsub+0x1da>
10017ca4:	2eff      	cmp	r6, #255	; 0xff
10017ca6:	d01f      	beq.n	10017ce8 <__aeabi_fsub+0x1e8>
10017ca8:	2480      	movs	r4, #128	; 0x80
10017caa:	04e4      	lsls	r4, r4, #19
10017cac:	4240      	negs	r0, r0
10017cae:	4323      	orrs	r3, r4
10017cb0:	281b      	cmp	r0, #27
10017cb2:	dd00      	ble.n	10017cb6 <__aeabi_fsub+0x1b6>
10017cb4:	e096      	b.n	10017de4 <__aeabi_fsub+0x2e4>
10017cb6:	001d      	movs	r5, r3
10017cb8:	2420      	movs	r4, #32
10017cba:	40c5      	lsrs	r5, r0
10017cbc:	1a20      	subs	r0, r4, r0
10017cbe:	4083      	lsls	r3, r0
10017cc0:	1e58      	subs	r0, r3, #1
10017cc2:	4183      	sbcs	r3, r0
10017cc4:	432b      	orrs	r3, r5
10017cc6:	1ad3      	subs	r3, r2, r3
10017cc8:	0034      	movs	r4, r6
10017cca:	000d      	movs	r5, r1
10017ccc:	e75e      	b.n	10017b8c <__aeabi_fsub+0x8c>
10017cce:	2e00      	cmp	r6, #0
10017cd0:	d000      	beq.n	10017cd4 <__aeabi_fsub+0x1d4>
10017cd2:	e75f      	b.n	10017b94 <__aeabi_fsub+0x94>
10017cd4:	2500      	movs	r5, #0
10017cd6:	2400      	movs	r4, #0
10017cd8:	e7ab      	b.n	10017c32 <__aeabi_fsub+0x132>
10017cda:	2b00      	cmp	r3, #0
10017cdc:	d044      	beq.n	10017d68 <__aeabi_fsub+0x268>
10017cde:	43c0      	mvns	r0, r0
10017ce0:	2800      	cmp	r0, #0
10017ce2:	d0f0      	beq.n	10017cc6 <__aeabi_fsub+0x1c6>
10017ce4:	2eff      	cmp	r6, #255	; 0xff
10017ce6:	d1e3      	bne.n	10017cb0 <__aeabi_fsub+0x1b0>
10017ce8:	0013      	movs	r3, r2
10017cea:	24ff      	movs	r4, #255	; 0xff
10017cec:	000d      	movs	r5, r1
10017cee:	e722      	b.n	10017b36 <__aeabi_fsub+0x36>
10017cf0:	000d      	movs	r5, r1
10017cf2:	24ff      	movs	r4, #255	; 0xff
10017cf4:	2300      	movs	r3, #0
10017cf6:	e730      	b.n	10017b5a <__aeabi_fsub+0x5a>
10017cf8:	2c00      	cmp	r4, #0
10017cfa:	d15d      	bne.n	10017db8 <__aeabi_fsub+0x2b8>
10017cfc:	2b00      	cmp	r3, #0
10017cfe:	d07d      	beq.n	10017dfc <__aeabi_fsub+0x2fc>
10017d00:	2a00      	cmp	r2, #0
10017d02:	d100      	bne.n	10017d06 <__aeabi_fsub+0x206>
10017d04:	e717      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d06:	189b      	adds	r3, r3, r2
10017d08:	015a      	lsls	r2, r3, #5
10017d0a:	d400      	bmi.n	10017d0e <__aeabi_fsub+0x20e>
10017d0c:	e756      	b.n	10017bbc <__aeabi_fsub+0xbc>
10017d0e:	4a3e      	ldr	r2, [pc, #248]	; (10017e08 <__aeabi_fsub+0x308>)
10017d10:	0004      	movs	r4, r0
10017d12:	4013      	ands	r3, r2
10017d14:	e70f      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d16:	2c00      	cmp	r4, #0
10017d18:	d11e      	bne.n	10017d58 <__aeabi_fsub+0x258>
10017d1a:	2b00      	cmp	r3, #0
10017d1c:	d12f      	bne.n	10017d7e <__aeabi_fsub+0x27e>
10017d1e:	2a00      	cmp	r2, #0
10017d20:	d065      	beq.n	10017dee <__aeabi_fsub+0x2ee>
10017d22:	0013      	movs	r3, r2
10017d24:	000d      	movs	r5, r1
10017d26:	e706      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d28:	2201      	movs	r2, #1
10017d2a:	e76d      	b.n	10017c08 <__aeabi_fsub+0x108>
10017d2c:	2c00      	cmp	r4, #0
10017d2e:	d11f      	bne.n	10017d70 <__aeabi_fsub+0x270>
10017d30:	2b00      	cmp	r3, #0
10017d32:	d059      	beq.n	10017de8 <__aeabi_fsub+0x2e8>
10017d34:	43c0      	mvns	r0, r0
10017d36:	2800      	cmp	r0, #0
10017d38:	d00b      	beq.n	10017d52 <__aeabi_fsub+0x252>
10017d3a:	2eff      	cmp	r6, #255	; 0xff
10017d3c:	d04f      	beq.n	10017dde <__aeabi_fsub+0x2de>
10017d3e:	281b      	cmp	r0, #27
10017d40:	dc5e      	bgt.n	10017e00 <__aeabi_fsub+0x300>
10017d42:	001d      	movs	r5, r3
10017d44:	2420      	movs	r4, #32
10017d46:	40c5      	lsrs	r5, r0
10017d48:	1a20      	subs	r0, r4, r0
10017d4a:	4083      	lsls	r3, r0
10017d4c:	1e58      	subs	r0, r3, #1
10017d4e:	4183      	sbcs	r3, r0
10017d50:	432b      	orrs	r3, r5
10017d52:	189b      	adds	r3, r3, r2
10017d54:	0034      	movs	r4, r6
10017d56:	e758      	b.n	10017c0a <__aeabi_fsub+0x10a>
10017d58:	2b00      	cmp	r3, #0
10017d5a:	d11c      	bne.n	10017d96 <__aeabi_fsub+0x296>
10017d5c:	2a00      	cmp	r2, #0
10017d5e:	d049      	beq.n	10017df4 <__aeabi_fsub+0x2f4>
10017d60:	0013      	movs	r3, r2
10017d62:	000d      	movs	r5, r1
10017d64:	24ff      	movs	r4, #255	; 0xff
10017d66:	e6e6      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d68:	0013      	movs	r3, r2
10017d6a:	0034      	movs	r4, r6
10017d6c:	000d      	movs	r5, r1
10017d6e:	e6e2      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d70:	2eff      	cmp	r6, #255	; 0xff
10017d72:	d034      	beq.n	10017dde <__aeabi_fsub+0x2de>
10017d74:	2480      	movs	r4, #128	; 0x80
10017d76:	04e4      	lsls	r4, r4, #19
10017d78:	4240      	negs	r0, r0
10017d7a:	4323      	orrs	r3, r4
10017d7c:	e7df      	b.n	10017d3e <__aeabi_fsub+0x23e>
10017d7e:	2a00      	cmp	r2, #0
10017d80:	d100      	bne.n	10017d84 <__aeabi_fsub+0x284>
10017d82:	e6d8      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d84:	2780      	movs	r7, #128	; 0x80
10017d86:	1a98      	subs	r0, r3, r2
10017d88:	04ff      	lsls	r7, r7, #19
10017d8a:	4007      	ands	r7, r0
10017d8c:	d100      	bne.n	10017d90 <__aeabi_fsub+0x290>
10017d8e:	e74d      	b.n	10017c2c <__aeabi_fsub+0x12c>
10017d90:	1ad3      	subs	r3, r2, r3
10017d92:	000d      	movs	r5, r1
10017d94:	e6cf      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d96:	24ff      	movs	r4, #255	; 0xff
10017d98:	2a00      	cmp	r2, #0
10017d9a:	d100      	bne.n	10017d9e <__aeabi_fsub+0x29e>
10017d9c:	e6cb      	b.n	10017b36 <__aeabi_fsub+0x36>
10017d9e:	2080      	movs	r0, #128	; 0x80
10017da0:	08db      	lsrs	r3, r3, #3
10017da2:	03c0      	lsls	r0, r0, #15
10017da4:	4203      	tst	r3, r0
10017da6:	d004      	beq.n	10017db2 <__aeabi_fsub+0x2b2>
10017da8:	08d2      	lsrs	r2, r2, #3
10017daa:	4202      	tst	r2, r0
10017dac:	d101      	bne.n	10017db2 <__aeabi_fsub+0x2b2>
10017dae:	0013      	movs	r3, r2
10017db0:	000d      	movs	r5, r1
10017db2:	00db      	lsls	r3, r3, #3
10017db4:	24ff      	movs	r4, #255	; 0xff
10017db6:	e6be      	b.n	10017b36 <__aeabi_fsub+0x36>
10017db8:	2b00      	cmp	r3, #0
10017dba:	d010      	beq.n	10017dde <__aeabi_fsub+0x2de>
10017dbc:	24ff      	movs	r4, #255	; 0xff
10017dbe:	2a00      	cmp	r2, #0
10017dc0:	d100      	bne.n	10017dc4 <__aeabi_fsub+0x2c4>
10017dc2:	e6b8      	b.n	10017b36 <__aeabi_fsub+0x36>
10017dc4:	2080      	movs	r0, #128	; 0x80
10017dc6:	08db      	lsrs	r3, r3, #3
10017dc8:	03c0      	lsls	r0, r0, #15
10017dca:	4203      	tst	r3, r0
10017dcc:	d003      	beq.n	10017dd6 <__aeabi_fsub+0x2d6>
10017dce:	08d2      	lsrs	r2, r2, #3
10017dd0:	4202      	tst	r2, r0
10017dd2:	d100      	bne.n	10017dd6 <__aeabi_fsub+0x2d6>
10017dd4:	0013      	movs	r3, r2
10017dd6:	00db      	lsls	r3, r3, #3
10017dd8:	000d      	movs	r5, r1
10017dda:	24ff      	movs	r4, #255	; 0xff
10017ddc:	e6ab      	b.n	10017b36 <__aeabi_fsub+0x36>
10017dde:	0013      	movs	r3, r2
10017de0:	24ff      	movs	r4, #255	; 0xff
10017de2:	e6a8      	b.n	10017b36 <__aeabi_fsub+0x36>
10017de4:	2301      	movs	r3, #1
10017de6:	e76e      	b.n	10017cc6 <__aeabi_fsub+0x1c6>
10017de8:	0013      	movs	r3, r2
10017dea:	0034      	movs	r4, r6
10017dec:	e6a3      	b.n	10017b36 <__aeabi_fsub+0x36>
10017dee:	2700      	movs	r7, #0
10017df0:	2500      	movs	r5, #0
10017df2:	e71e      	b.n	10017c32 <__aeabi_fsub+0x132>
10017df4:	2780      	movs	r7, #128	; 0x80
10017df6:	2500      	movs	r5, #0
10017df8:	03ff      	lsls	r7, r7, #15
10017dfa:	e6e9      	b.n	10017bd0 <__aeabi_fsub+0xd0>
10017dfc:	0013      	movs	r3, r2
10017dfe:	e69a      	b.n	10017b36 <__aeabi_fsub+0x36>
10017e00:	2301      	movs	r3, #1
10017e02:	e7a6      	b.n	10017d52 <__aeabi_fsub+0x252>
10017e04:	7dffffff 	.word	0x7dffffff
10017e08:	fbffffff 	.word	0xfbffffff

10017e0c <__aeabi_f2iz>:
10017e0c:	0243      	lsls	r3, r0, #9
10017e0e:	0a59      	lsrs	r1, r3, #9
10017e10:	0043      	lsls	r3, r0, #1
10017e12:	0fc2      	lsrs	r2, r0, #31
10017e14:	0e1b      	lsrs	r3, r3, #24
10017e16:	2000      	movs	r0, #0
10017e18:	2b7e      	cmp	r3, #126	; 0x7e
10017e1a:	dd0e      	ble.n	10017e3a <__aeabi_f2iz+0x2e>
10017e1c:	2b9d      	cmp	r3, #157	; 0x9d
10017e1e:	dc0d      	bgt.n	10017e3c <__aeabi_f2iz+0x30>
10017e20:	2080      	movs	r0, #128	; 0x80
10017e22:	0400      	lsls	r0, r0, #16
10017e24:	4301      	orrs	r1, r0
10017e26:	2b95      	cmp	r3, #149	; 0x95
10017e28:	dc0b      	bgt.n	10017e42 <__aeabi_f2iz+0x36>
10017e2a:	2096      	movs	r0, #150	; 0x96
10017e2c:	1ac3      	subs	r3, r0, r3
10017e2e:	40d9      	lsrs	r1, r3
10017e30:	000b      	movs	r3, r1
10017e32:	4258      	negs	r0, r3
10017e34:	2a00      	cmp	r2, #0
10017e36:	d100      	bne.n	10017e3a <__aeabi_f2iz+0x2e>
10017e38:	0018      	movs	r0, r3
10017e3a:	4770      	bx	lr
10017e3c:	4b03      	ldr	r3, [pc, #12]	; (10017e4c <__aeabi_f2iz+0x40>)
10017e3e:	18d0      	adds	r0, r2, r3
10017e40:	e7fb      	b.n	10017e3a <__aeabi_f2iz+0x2e>
10017e42:	3b96      	subs	r3, #150	; 0x96
10017e44:	4099      	lsls	r1, r3
10017e46:	000b      	movs	r3, r1
10017e48:	e7f3      	b.n	10017e32 <__aeabi_f2iz+0x26>
10017e4a:	46c0      	nop			; (mov r8, r8)
10017e4c:	7fffffff 	.word	0x7fffffff

10017e50 <__aeabi_ui2f>:
10017e50:	b570      	push	{r4, r5, r6, lr}
10017e52:	1e04      	subs	r4, r0, #0
10017e54:	d028      	beq.n	10017ea8 <__aeabi_ui2f+0x58>
10017e56:	f000 ff83 	bl	10018d60 <__clzsi2>
10017e5a:	239e      	movs	r3, #158	; 0x9e
10017e5c:	1a1b      	subs	r3, r3, r0
10017e5e:	2b96      	cmp	r3, #150	; 0x96
10017e60:	dc0a      	bgt.n	10017e78 <__aeabi_ui2f+0x28>
10017e62:	2296      	movs	r2, #150	; 0x96
10017e64:	1ad2      	subs	r2, r2, r3
10017e66:	4094      	lsls	r4, r2
10017e68:	0262      	lsls	r2, r4, #9
10017e6a:	0a52      	lsrs	r2, r2, #9
10017e6c:	b2d8      	uxtb	r0, r3
10017e6e:	0252      	lsls	r2, r2, #9
10017e70:	0a52      	lsrs	r2, r2, #9
10017e72:	05c0      	lsls	r0, r0, #23
10017e74:	4310      	orrs	r0, r2
10017e76:	bd70      	pop	{r4, r5, r6, pc}
10017e78:	2b99      	cmp	r3, #153	; 0x99
10017e7a:	dc18      	bgt.n	10017eae <__aeabi_ui2f+0x5e>
10017e7c:	2299      	movs	r2, #153	; 0x99
10017e7e:	1ad2      	subs	r2, r2, r3
10017e80:	4094      	lsls	r4, r2
10017e82:	4a11      	ldr	r2, [pc, #68]	; (10017ec8 <__aeabi_ui2f+0x78>)
10017e84:	4022      	ands	r2, r4
10017e86:	0761      	lsls	r1, r4, #29
10017e88:	d004      	beq.n	10017e94 <__aeabi_ui2f+0x44>
10017e8a:	210f      	movs	r1, #15
10017e8c:	400c      	ands	r4, r1
10017e8e:	2c04      	cmp	r4, #4
10017e90:	d000      	beq.n	10017e94 <__aeabi_ui2f+0x44>
10017e92:	3204      	adds	r2, #4
10017e94:	0151      	lsls	r1, r2, #5
10017e96:	d503      	bpl.n	10017ea0 <__aeabi_ui2f+0x50>
10017e98:	4b0b      	ldr	r3, [pc, #44]	; (10017ec8 <__aeabi_ui2f+0x78>)
10017e9a:	401a      	ands	r2, r3
10017e9c:	239f      	movs	r3, #159	; 0x9f
10017e9e:	1a1b      	subs	r3, r3, r0
10017ea0:	0192      	lsls	r2, r2, #6
10017ea2:	0a52      	lsrs	r2, r2, #9
10017ea4:	b2d8      	uxtb	r0, r3
10017ea6:	e7e2      	b.n	10017e6e <__aeabi_ui2f+0x1e>
10017ea8:	2000      	movs	r0, #0
10017eaa:	2200      	movs	r2, #0
10017eac:	e7df      	b.n	10017e6e <__aeabi_ui2f+0x1e>
10017eae:	2205      	movs	r2, #5
10017eb0:	0025      	movs	r5, r4
10017eb2:	1a12      	subs	r2, r2, r0
10017eb4:	21b9      	movs	r1, #185	; 0xb9
10017eb6:	40d5      	lsrs	r5, r2
10017eb8:	0022      	movs	r2, r4
10017eba:	1ac9      	subs	r1, r1, r3
10017ebc:	408a      	lsls	r2, r1
10017ebe:	1e54      	subs	r4, r2, #1
10017ec0:	41a2      	sbcs	r2, r4
10017ec2:	002c      	movs	r4, r5
10017ec4:	4314      	orrs	r4, r2
10017ec6:	e7dc      	b.n	10017e82 <__aeabi_ui2f+0x32>
10017ec8:	fbffffff 	.word	0xfbffffff

10017ecc <__eqdf2>:
10017ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
10017ece:	465f      	mov	r7, fp
10017ed0:	4656      	mov	r6, sl
10017ed2:	464d      	mov	r5, r9
10017ed4:	4644      	mov	r4, r8
10017ed6:	b4f0      	push	{r4, r5, r6, r7}
10017ed8:	031f      	lsls	r7, r3, #12
10017eda:	005c      	lsls	r4, r3, #1
10017edc:	0fdb      	lsrs	r3, r3, #31
10017ede:	469a      	mov	sl, r3
10017ee0:	4b19      	ldr	r3, [pc, #100]	; (10017f48 <__eqdf2+0x7c>)
10017ee2:	030e      	lsls	r6, r1, #12
10017ee4:	004d      	lsls	r5, r1, #1
10017ee6:	0fc9      	lsrs	r1, r1, #31
10017ee8:	4680      	mov	r8, r0
10017eea:	0b36      	lsrs	r6, r6, #12
10017eec:	0d6d      	lsrs	r5, r5, #21
10017eee:	468b      	mov	fp, r1
10017ef0:	4691      	mov	r9, r2
10017ef2:	0b3f      	lsrs	r7, r7, #12
10017ef4:	0d64      	lsrs	r4, r4, #21
10017ef6:	429d      	cmp	r5, r3
10017ef8:	d019      	beq.n	10017f2e <__eqdf2+0x62>
10017efa:	4b13      	ldr	r3, [pc, #76]	; (10017f48 <__eqdf2+0x7c>)
10017efc:	429c      	cmp	r4, r3
10017efe:	d01b      	beq.n	10017f38 <__eqdf2+0x6c>
10017f00:	2301      	movs	r3, #1
10017f02:	42a5      	cmp	r5, r4
10017f04:	d006      	beq.n	10017f14 <__eqdf2+0x48>
10017f06:	0018      	movs	r0, r3
10017f08:	bc3c      	pop	{r2, r3, r4, r5}
10017f0a:	4690      	mov	r8, r2
10017f0c:	4699      	mov	r9, r3
10017f0e:	46a2      	mov	sl, r4
10017f10:	46ab      	mov	fp, r5
10017f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017f14:	42be      	cmp	r6, r7
10017f16:	d1f6      	bne.n	10017f06 <__eqdf2+0x3a>
10017f18:	45c8      	cmp	r8, r9
10017f1a:	d1f4      	bne.n	10017f06 <__eqdf2+0x3a>
10017f1c:	45d3      	cmp	fp, sl
10017f1e:	d010      	beq.n	10017f42 <__eqdf2+0x76>
10017f20:	2d00      	cmp	r5, #0
10017f22:	d1f0      	bne.n	10017f06 <__eqdf2+0x3a>
10017f24:	4330      	orrs	r0, r6
10017f26:	0003      	movs	r3, r0
10017f28:	1e5a      	subs	r2, r3, #1
10017f2a:	4193      	sbcs	r3, r2
10017f2c:	e7eb      	b.n	10017f06 <__eqdf2+0x3a>
10017f2e:	0031      	movs	r1, r6
10017f30:	2301      	movs	r3, #1
10017f32:	4301      	orrs	r1, r0
10017f34:	d1e7      	bne.n	10017f06 <__eqdf2+0x3a>
10017f36:	e7e0      	b.n	10017efa <__eqdf2+0x2e>
10017f38:	433a      	orrs	r2, r7
10017f3a:	2301      	movs	r3, #1
10017f3c:	2a00      	cmp	r2, #0
10017f3e:	d1e2      	bne.n	10017f06 <__eqdf2+0x3a>
10017f40:	e7de      	b.n	10017f00 <__eqdf2+0x34>
10017f42:	2300      	movs	r3, #0
10017f44:	e7df      	b.n	10017f06 <__eqdf2+0x3a>
10017f46:	46c0      	nop			; (mov r8, r8)
10017f48:	000007ff 	.word	0x000007ff

10017f4c <__gedf2>:
10017f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10017f4e:	465f      	mov	r7, fp
10017f50:	4644      	mov	r4, r8
10017f52:	4656      	mov	r6, sl
10017f54:	464d      	mov	r5, r9
10017f56:	b4f0      	push	{r4, r5, r6, r7}
10017f58:	031f      	lsls	r7, r3, #12
10017f5a:	0b3c      	lsrs	r4, r7, #12
10017f5c:	4f2c      	ldr	r7, [pc, #176]	; (10018010 <__gedf2+0xc4>)
10017f5e:	030e      	lsls	r6, r1, #12
10017f60:	004d      	lsls	r5, r1, #1
10017f62:	46a3      	mov	fp, r4
10017f64:	005c      	lsls	r4, r3, #1
10017f66:	4684      	mov	ip, r0
10017f68:	0b36      	lsrs	r6, r6, #12
10017f6a:	0d6d      	lsrs	r5, r5, #21
10017f6c:	0fc9      	lsrs	r1, r1, #31
10017f6e:	4690      	mov	r8, r2
10017f70:	0d64      	lsrs	r4, r4, #21
10017f72:	0fdb      	lsrs	r3, r3, #31
10017f74:	42bd      	cmp	r5, r7
10017f76:	d02b      	beq.n	10017fd0 <__gedf2+0x84>
10017f78:	4f25      	ldr	r7, [pc, #148]	; (10018010 <__gedf2+0xc4>)
10017f7a:	42bc      	cmp	r4, r7
10017f7c:	d02e      	beq.n	10017fdc <__gedf2+0x90>
10017f7e:	2d00      	cmp	r5, #0
10017f80:	d10e      	bne.n	10017fa0 <__gedf2+0x54>
10017f82:	4330      	orrs	r0, r6
10017f84:	0007      	movs	r7, r0
10017f86:	4681      	mov	r9, r0
10017f88:	4278      	negs	r0, r7
10017f8a:	4178      	adcs	r0, r7
10017f8c:	2c00      	cmp	r4, #0
10017f8e:	d117      	bne.n	10017fc0 <__gedf2+0x74>
10017f90:	465f      	mov	r7, fp
10017f92:	433a      	orrs	r2, r7
10017f94:	d114      	bne.n	10017fc0 <__gedf2+0x74>
10017f96:	464b      	mov	r3, r9
10017f98:	2000      	movs	r0, #0
10017f9a:	2b00      	cmp	r3, #0
10017f9c:	d00a      	beq.n	10017fb4 <__gedf2+0x68>
10017f9e:	e006      	b.n	10017fae <__gedf2+0x62>
10017fa0:	2c00      	cmp	r4, #0
10017fa2:	d102      	bne.n	10017faa <__gedf2+0x5e>
10017fa4:	4658      	mov	r0, fp
10017fa6:	4302      	orrs	r2, r0
10017fa8:	d001      	beq.n	10017fae <__gedf2+0x62>
10017faa:	4299      	cmp	r1, r3
10017fac:	d01a      	beq.n	10017fe4 <__gedf2+0x98>
10017fae:	2301      	movs	r3, #1
10017fb0:	4248      	negs	r0, r1
10017fb2:	4318      	orrs	r0, r3
10017fb4:	bc3c      	pop	{r2, r3, r4, r5}
10017fb6:	4690      	mov	r8, r2
10017fb8:	4699      	mov	r9, r3
10017fba:	46a2      	mov	sl, r4
10017fbc:	46ab      	mov	fp, r5
10017fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017fc0:	2800      	cmp	r0, #0
10017fc2:	d0f2      	beq.n	10017faa <__gedf2+0x5e>
10017fc4:	4258      	negs	r0, r3
10017fc6:	4158      	adcs	r0, r3
10017fc8:	2201      	movs	r2, #1
10017fca:	4240      	negs	r0, r0
10017fcc:	4310      	orrs	r0, r2
10017fce:	e7f1      	b.n	10017fb4 <__gedf2+0x68>
10017fd0:	0037      	movs	r7, r6
10017fd2:	4307      	orrs	r7, r0
10017fd4:	d0d0      	beq.n	10017f78 <__gedf2+0x2c>
10017fd6:	2002      	movs	r0, #2
10017fd8:	4240      	negs	r0, r0
10017fda:	e7eb      	b.n	10017fb4 <__gedf2+0x68>
10017fdc:	465f      	mov	r7, fp
10017fde:	4317      	orrs	r7, r2
10017fe0:	d0cd      	beq.n	10017f7e <__gedf2+0x32>
10017fe2:	e7f8      	b.n	10017fd6 <__gedf2+0x8a>
10017fe4:	42a5      	cmp	r5, r4
10017fe6:	dce2      	bgt.n	10017fae <__gedf2+0x62>
10017fe8:	db05      	blt.n	10017ff6 <__gedf2+0xaa>
10017fea:	455e      	cmp	r6, fp
10017fec:	d8df      	bhi.n	10017fae <__gedf2+0x62>
10017fee:	d008      	beq.n	10018002 <__gedf2+0xb6>
10017ff0:	2000      	movs	r0, #0
10017ff2:	455e      	cmp	r6, fp
10017ff4:	d2de      	bcs.n	10017fb4 <__gedf2+0x68>
10017ff6:	4248      	negs	r0, r1
10017ff8:	4148      	adcs	r0, r1
10017ffa:	2301      	movs	r3, #1
10017ffc:	4240      	negs	r0, r0
10017ffe:	4318      	orrs	r0, r3
10018000:	e7d8      	b.n	10017fb4 <__gedf2+0x68>
10018002:	45c4      	cmp	ip, r8
10018004:	d8d3      	bhi.n	10017fae <__gedf2+0x62>
10018006:	2000      	movs	r0, #0
10018008:	45c4      	cmp	ip, r8
1001800a:	d3f4      	bcc.n	10017ff6 <__gedf2+0xaa>
1001800c:	e7d2      	b.n	10017fb4 <__gedf2+0x68>
1001800e:	46c0      	nop			; (mov r8, r8)
10018010:	000007ff 	.word	0x000007ff

10018014 <__ledf2>:
10018014:	b5f0      	push	{r4, r5, r6, r7, lr}
10018016:	465f      	mov	r7, fp
10018018:	464d      	mov	r5, r9
1001801a:	4644      	mov	r4, r8
1001801c:	4656      	mov	r6, sl
1001801e:	b4f0      	push	{r4, r5, r6, r7}
10018020:	031c      	lsls	r4, r3, #12
10018022:	0b24      	lsrs	r4, r4, #12
10018024:	46a4      	mov	ip, r4
10018026:	4c2f      	ldr	r4, [pc, #188]	; (100180e4 <__ledf2+0xd0>)
10018028:	030f      	lsls	r7, r1, #12
1001802a:	004d      	lsls	r5, r1, #1
1001802c:	005e      	lsls	r6, r3, #1
1001802e:	0fc9      	lsrs	r1, r1, #31
10018030:	4680      	mov	r8, r0
10018032:	0b3f      	lsrs	r7, r7, #12
10018034:	0d6d      	lsrs	r5, r5, #21
10018036:	468b      	mov	fp, r1
10018038:	4691      	mov	r9, r2
1001803a:	0d76      	lsrs	r6, r6, #21
1001803c:	0fdb      	lsrs	r3, r3, #31
1001803e:	42a5      	cmp	r5, r4
10018040:	d020      	beq.n	10018084 <__ledf2+0x70>
10018042:	4c28      	ldr	r4, [pc, #160]	; (100180e4 <__ledf2+0xd0>)
10018044:	42a6      	cmp	r6, r4
10018046:	d022      	beq.n	1001808e <__ledf2+0x7a>
10018048:	2d00      	cmp	r5, #0
1001804a:	d112      	bne.n	10018072 <__ledf2+0x5e>
1001804c:	4338      	orrs	r0, r7
1001804e:	4244      	negs	r4, r0
10018050:	4144      	adcs	r4, r0
10018052:	2e00      	cmp	r6, #0
10018054:	d020      	beq.n	10018098 <__ledf2+0x84>
10018056:	2c00      	cmp	r4, #0
10018058:	d00d      	beq.n	10018076 <__ledf2+0x62>
1001805a:	425c      	negs	r4, r3
1001805c:	4163      	adcs	r3, r4
1001805e:	2401      	movs	r4, #1
10018060:	425b      	negs	r3, r3
10018062:	431c      	orrs	r4, r3
10018064:	0020      	movs	r0, r4
10018066:	bc3c      	pop	{r2, r3, r4, r5}
10018068:	4690      	mov	r8, r2
1001806a:	4699      	mov	r9, r3
1001806c:	46a2      	mov	sl, r4
1001806e:	46ab      	mov	fp, r5
10018070:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018072:	2e00      	cmp	r6, #0
10018074:	d017      	beq.n	100180a6 <__ledf2+0x92>
10018076:	455b      	cmp	r3, fp
10018078:	d019      	beq.n	100180ae <__ledf2+0x9a>
1001807a:	465b      	mov	r3, fp
1001807c:	425c      	negs	r4, r3
1001807e:	2301      	movs	r3, #1
10018080:	431c      	orrs	r4, r3
10018082:	e7ef      	b.n	10018064 <__ledf2+0x50>
10018084:	0039      	movs	r1, r7
10018086:	2402      	movs	r4, #2
10018088:	4301      	orrs	r1, r0
1001808a:	d1eb      	bne.n	10018064 <__ledf2+0x50>
1001808c:	e7d9      	b.n	10018042 <__ledf2+0x2e>
1001808e:	4661      	mov	r1, ip
10018090:	2402      	movs	r4, #2
10018092:	4311      	orrs	r1, r2
10018094:	d1e6      	bne.n	10018064 <__ledf2+0x50>
10018096:	e7d7      	b.n	10018048 <__ledf2+0x34>
10018098:	4661      	mov	r1, ip
1001809a:	430a      	orrs	r2, r1
1001809c:	d1db      	bne.n	10018056 <__ledf2+0x42>
1001809e:	2400      	movs	r4, #0
100180a0:	2800      	cmp	r0, #0
100180a2:	d0df      	beq.n	10018064 <__ledf2+0x50>
100180a4:	e7e9      	b.n	1001807a <__ledf2+0x66>
100180a6:	4661      	mov	r1, ip
100180a8:	430a      	orrs	r2, r1
100180aa:	d1e4      	bne.n	10018076 <__ledf2+0x62>
100180ac:	e7e5      	b.n	1001807a <__ledf2+0x66>
100180ae:	42b5      	cmp	r5, r6
100180b0:	dd03      	ble.n	100180ba <__ledf2+0xa6>
100180b2:	2201      	movs	r2, #1
100180b4:	425c      	negs	r4, r3
100180b6:	4314      	orrs	r4, r2
100180b8:	e7d4      	b.n	10018064 <__ledf2+0x50>
100180ba:	42b5      	cmp	r5, r6
100180bc:	dbcd      	blt.n	1001805a <__ledf2+0x46>
100180be:	4567      	cmp	r7, ip
100180c0:	d8db      	bhi.n	1001807a <__ledf2+0x66>
100180c2:	d009      	beq.n	100180d8 <__ledf2+0xc4>
100180c4:	2400      	movs	r4, #0
100180c6:	4567      	cmp	r7, ip
100180c8:	d2cc      	bcs.n	10018064 <__ledf2+0x50>
100180ca:	4659      	mov	r1, fp
100180cc:	424c      	negs	r4, r1
100180ce:	4161      	adcs	r1, r4
100180d0:	2401      	movs	r4, #1
100180d2:	4249      	negs	r1, r1
100180d4:	430c      	orrs	r4, r1
100180d6:	e7c5      	b.n	10018064 <__ledf2+0x50>
100180d8:	45c8      	cmp	r8, r9
100180da:	d8ce      	bhi.n	1001807a <__ledf2+0x66>
100180dc:	2400      	movs	r4, #0
100180de:	45c8      	cmp	r8, r9
100180e0:	d3f3      	bcc.n	100180ca <__ledf2+0xb6>
100180e2:	e7bf      	b.n	10018064 <__ledf2+0x50>
100180e4:	000007ff 	.word	0x000007ff

100180e8 <__aeabi_dmul>:
100180e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100180ea:	465f      	mov	r7, fp
100180ec:	4656      	mov	r6, sl
100180ee:	464d      	mov	r5, r9
100180f0:	4644      	mov	r4, r8
100180f2:	b4f0      	push	{r4, r5, r6, r7}
100180f4:	030d      	lsls	r5, r1, #12
100180f6:	4699      	mov	r9, r3
100180f8:	004e      	lsls	r6, r1, #1
100180fa:	0b2b      	lsrs	r3, r5, #12
100180fc:	b087      	sub	sp, #28
100180fe:	0007      	movs	r7, r0
10018100:	4692      	mov	sl, r2
10018102:	4680      	mov	r8, r0
10018104:	469b      	mov	fp, r3
10018106:	0d76      	lsrs	r6, r6, #21
10018108:	0fcc      	lsrs	r4, r1, #31
1001810a:	2e00      	cmp	r6, #0
1001810c:	d069      	beq.n	100181e2 <__aeabi_dmul+0xfa>
1001810e:	4b6d      	ldr	r3, [pc, #436]	; (100182c4 <__aeabi_dmul+0x1dc>)
10018110:	429e      	cmp	r6, r3
10018112:	d035      	beq.n	10018180 <__aeabi_dmul+0x98>
10018114:	465b      	mov	r3, fp
10018116:	2280      	movs	r2, #128	; 0x80
10018118:	00dd      	lsls	r5, r3, #3
1001811a:	0412      	lsls	r2, r2, #16
1001811c:	0f43      	lsrs	r3, r0, #29
1001811e:	4313      	orrs	r3, r2
10018120:	432b      	orrs	r3, r5
10018122:	469b      	mov	fp, r3
10018124:	00c3      	lsls	r3, r0, #3
10018126:	4698      	mov	r8, r3
10018128:	4b67      	ldr	r3, [pc, #412]	; (100182c8 <__aeabi_dmul+0x1e0>)
1001812a:	2700      	movs	r7, #0
1001812c:	469c      	mov	ip, r3
1001812e:	2300      	movs	r3, #0
10018130:	4466      	add	r6, ip
10018132:	9301      	str	r3, [sp, #4]
10018134:	464a      	mov	r2, r9
10018136:	0315      	lsls	r5, r2, #12
10018138:	0050      	lsls	r0, r2, #1
1001813a:	0fd2      	lsrs	r2, r2, #31
1001813c:	4653      	mov	r3, sl
1001813e:	0b2d      	lsrs	r5, r5, #12
10018140:	0d40      	lsrs	r0, r0, #21
10018142:	4691      	mov	r9, r2
10018144:	d100      	bne.n	10018148 <__aeabi_dmul+0x60>
10018146:	e076      	b.n	10018236 <__aeabi_dmul+0x14e>
10018148:	4a5e      	ldr	r2, [pc, #376]	; (100182c4 <__aeabi_dmul+0x1dc>)
1001814a:	4290      	cmp	r0, r2
1001814c:	d06c      	beq.n	10018228 <__aeabi_dmul+0x140>
1001814e:	2280      	movs	r2, #128	; 0x80
10018150:	0f5b      	lsrs	r3, r3, #29
10018152:	0412      	lsls	r2, r2, #16
10018154:	4313      	orrs	r3, r2
10018156:	4a5c      	ldr	r2, [pc, #368]	; (100182c8 <__aeabi_dmul+0x1e0>)
10018158:	00ed      	lsls	r5, r5, #3
1001815a:	4694      	mov	ip, r2
1001815c:	431d      	orrs	r5, r3
1001815e:	4653      	mov	r3, sl
10018160:	2200      	movs	r2, #0
10018162:	00db      	lsls	r3, r3, #3
10018164:	4460      	add	r0, ip
10018166:	4649      	mov	r1, r9
10018168:	1836      	adds	r6, r6, r0
1001816a:	1c70      	adds	r0, r6, #1
1001816c:	4061      	eors	r1, r4
1001816e:	9002      	str	r0, [sp, #8]
10018170:	4317      	orrs	r7, r2
10018172:	2f0f      	cmp	r7, #15
10018174:	d900      	bls.n	10018178 <__aeabi_dmul+0x90>
10018176:	e0af      	b.n	100182d8 <__aeabi_dmul+0x1f0>
10018178:	4854      	ldr	r0, [pc, #336]	; (100182cc <__aeabi_dmul+0x1e4>)
1001817a:	00bf      	lsls	r7, r7, #2
1001817c:	59c7      	ldr	r7, [r0, r7]
1001817e:	46bf      	mov	pc, r7
10018180:	465b      	mov	r3, fp
10018182:	431f      	orrs	r7, r3
10018184:	d000      	beq.n	10018188 <__aeabi_dmul+0xa0>
10018186:	e088      	b.n	1001829a <__aeabi_dmul+0x1b2>
10018188:	2300      	movs	r3, #0
1001818a:	469b      	mov	fp, r3
1001818c:	4698      	mov	r8, r3
1001818e:	3302      	adds	r3, #2
10018190:	2708      	movs	r7, #8
10018192:	9301      	str	r3, [sp, #4]
10018194:	e7ce      	b.n	10018134 <__aeabi_dmul+0x4c>
10018196:	4649      	mov	r1, r9
10018198:	2a02      	cmp	r2, #2
1001819a:	d06a      	beq.n	10018272 <__aeabi_dmul+0x18a>
1001819c:	2a03      	cmp	r2, #3
1001819e:	d100      	bne.n	100181a2 <__aeabi_dmul+0xba>
100181a0:	e209      	b.n	100185b6 <__aeabi_dmul+0x4ce>
100181a2:	2a01      	cmp	r2, #1
100181a4:	d000      	beq.n	100181a8 <__aeabi_dmul+0xc0>
100181a6:	e1bb      	b.n	10018520 <__aeabi_dmul+0x438>
100181a8:	4011      	ands	r1, r2
100181aa:	2200      	movs	r2, #0
100181ac:	2300      	movs	r3, #0
100181ae:	2500      	movs	r5, #0
100181b0:	4690      	mov	r8, r2
100181b2:	b2cc      	uxtb	r4, r1
100181b4:	2100      	movs	r1, #0
100181b6:	032d      	lsls	r5, r5, #12
100181b8:	0d0a      	lsrs	r2, r1, #20
100181ba:	0512      	lsls	r2, r2, #20
100181bc:	0b2d      	lsrs	r5, r5, #12
100181be:	4315      	orrs	r5, r2
100181c0:	4a43      	ldr	r2, [pc, #268]	; (100182d0 <__aeabi_dmul+0x1e8>)
100181c2:	051b      	lsls	r3, r3, #20
100181c4:	4015      	ands	r5, r2
100181c6:	431d      	orrs	r5, r3
100181c8:	006d      	lsls	r5, r5, #1
100181ca:	07e4      	lsls	r4, r4, #31
100181cc:	086d      	lsrs	r5, r5, #1
100181ce:	4325      	orrs	r5, r4
100181d0:	4640      	mov	r0, r8
100181d2:	0029      	movs	r1, r5
100181d4:	b007      	add	sp, #28
100181d6:	bc3c      	pop	{r2, r3, r4, r5}
100181d8:	4690      	mov	r8, r2
100181da:	4699      	mov	r9, r3
100181dc:	46a2      	mov	sl, r4
100181de:	46ab      	mov	fp, r5
100181e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100181e2:	4303      	orrs	r3, r0
100181e4:	d052      	beq.n	1001828c <__aeabi_dmul+0x1a4>
100181e6:	465b      	mov	r3, fp
100181e8:	2b00      	cmp	r3, #0
100181ea:	d100      	bne.n	100181ee <__aeabi_dmul+0x106>
100181ec:	e18a      	b.n	10018504 <__aeabi_dmul+0x41c>
100181ee:	4658      	mov	r0, fp
100181f0:	f000 fdb6 	bl	10018d60 <__clzsi2>
100181f4:	0003      	movs	r3, r0
100181f6:	3b0b      	subs	r3, #11
100181f8:	2b1c      	cmp	r3, #28
100181fa:	dd00      	ble.n	100181fe <__aeabi_dmul+0x116>
100181fc:	e17b      	b.n	100184f6 <__aeabi_dmul+0x40e>
100181fe:	221d      	movs	r2, #29
10018200:	1ad3      	subs	r3, r2, r3
10018202:	003a      	movs	r2, r7
10018204:	0001      	movs	r1, r0
10018206:	465d      	mov	r5, fp
10018208:	40da      	lsrs	r2, r3
1001820a:	3908      	subs	r1, #8
1001820c:	408d      	lsls	r5, r1
1001820e:	0013      	movs	r3, r2
10018210:	408f      	lsls	r7, r1
10018212:	432b      	orrs	r3, r5
10018214:	469b      	mov	fp, r3
10018216:	46b8      	mov	r8, r7
10018218:	4b2e      	ldr	r3, [pc, #184]	; (100182d4 <__aeabi_dmul+0x1ec>)
1001821a:	2700      	movs	r7, #0
1001821c:	469c      	mov	ip, r3
1001821e:	2300      	movs	r3, #0
10018220:	4460      	add	r0, ip
10018222:	4246      	negs	r6, r0
10018224:	9301      	str	r3, [sp, #4]
10018226:	e785      	b.n	10018134 <__aeabi_dmul+0x4c>
10018228:	4652      	mov	r2, sl
1001822a:	432a      	orrs	r2, r5
1001822c:	d12c      	bne.n	10018288 <__aeabi_dmul+0x1a0>
1001822e:	2500      	movs	r5, #0
10018230:	2300      	movs	r3, #0
10018232:	2202      	movs	r2, #2
10018234:	e797      	b.n	10018166 <__aeabi_dmul+0x7e>
10018236:	4652      	mov	r2, sl
10018238:	432a      	orrs	r2, r5
1001823a:	d021      	beq.n	10018280 <__aeabi_dmul+0x198>
1001823c:	2d00      	cmp	r5, #0
1001823e:	d100      	bne.n	10018242 <__aeabi_dmul+0x15a>
10018240:	e154      	b.n	100184ec <__aeabi_dmul+0x404>
10018242:	0028      	movs	r0, r5
10018244:	f000 fd8c 	bl	10018d60 <__clzsi2>
10018248:	0003      	movs	r3, r0
1001824a:	3b0b      	subs	r3, #11
1001824c:	2b1c      	cmp	r3, #28
1001824e:	dd00      	ble.n	10018252 <__aeabi_dmul+0x16a>
10018250:	e146      	b.n	100184e0 <__aeabi_dmul+0x3f8>
10018252:	211d      	movs	r1, #29
10018254:	1acb      	subs	r3, r1, r3
10018256:	4651      	mov	r1, sl
10018258:	0002      	movs	r2, r0
1001825a:	40d9      	lsrs	r1, r3
1001825c:	4653      	mov	r3, sl
1001825e:	3a08      	subs	r2, #8
10018260:	4095      	lsls	r5, r2
10018262:	4093      	lsls	r3, r2
10018264:	430d      	orrs	r5, r1
10018266:	4a1b      	ldr	r2, [pc, #108]	; (100182d4 <__aeabi_dmul+0x1ec>)
10018268:	4694      	mov	ip, r2
1001826a:	4460      	add	r0, ip
1001826c:	4240      	negs	r0, r0
1001826e:	2200      	movs	r2, #0
10018270:	e779      	b.n	10018166 <__aeabi_dmul+0x7e>
10018272:	2401      	movs	r4, #1
10018274:	2200      	movs	r2, #0
10018276:	400c      	ands	r4, r1
10018278:	4b12      	ldr	r3, [pc, #72]	; (100182c4 <__aeabi_dmul+0x1dc>)
1001827a:	2500      	movs	r5, #0
1001827c:	4690      	mov	r8, r2
1001827e:	e799      	b.n	100181b4 <__aeabi_dmul+0xcc>
10018280:	2500      	movs	r5, #0
10018282:	2300      	movs	r3, #0
10018284:	2201      	movs	r2, #1
10018286:	e76e      	b.n	10018166 <__aeabi_dmul+0x7e>
10018288:	2203      	movs	r2, #3
1001828a:	e76c      	b.n	10018166 <__aeabi_dmul+0x7e>
1001828c:	2300      	movs	r3, #0
1001828e:	469b      	mov	fp, r3
10018290:	4698      	mov	r8, r3
10018292:	3301      	adds	r3, #1
10018294:	2704      	movs	r7, #4
10018296:	9301      	str	r3, [sp, #4]
10018298:	e74c      	b.n	10018134 <__aeabi_dmul+0x4c>
1001829a:	2303      	movs	r3, #3
1001829c:	270c      	movs	r7, #12
1001829e:	9301      	str	r3, [sp, #4]
100182a0:	e748      	b.n	10018134 <__aeabi_dmul+0x4c>
100182a2:	2300      	movs	r3, #0
100182a4:	2580      	movs	r5, #128	; 0x80
100182a6:	4698      	mov	r8, r3
100182a8:	2400      	movs	r4, #0
100182aa:	032d      	lsls	r5, r5, #12
100182ac:	4b05      	ldr	r3, [pc, #20]	; (100182c4 <__aeabi_dmul+0x1dc>)
100182ae:	e781      	b.n	100181b4 <__aeabi_dmul+0xcc>
100182b0:	465d      	mov	r5, fp
100182b2:	4643      	mov	r3, r8
100182b4:	9a01      	ldr	r2, [sp, #4]
100182b6:	e76f      	b.n	10018198 <__aeabi_dmul+0xb0>
100182b8:	465d      	mov	r5, fp
100182ba:	4643      	mov	r3, r8
100182bc:	0021      	movs	r1, r4
100182be:	9a01      	ldr	r2, [sp, #4]
100182c0:	e76a      	b.n	10018198 <__aeabi_dmul+0xb0>
100182c2:	46c0      	nop			; (mov r8, r8)
100182c4:	000007ff 	.word	0x000007ff
100182c8:	fffffc01 	.word	0xfffffc01
100182cc:	1001b748 	.word	0x1001b748
100182d0:	800fffff 	.word	0x800fffff
100182d4:	000003f3 	.word	0x000003f3
100182d8:	4642      	mov	r2, r8
100182da:	0c12      	lsrs	r2, r2, #16
100182dc:	4691      	mov	r9, r2
100182de:	0c1a      	lsrs	r2, r3, #16
100182e0:	4694      	mov	ip, r2
100182e2:	4642      	mov	r2, r8
100182e4:	0417      	lsls	r7, r2, #16
100182e6:	464a      	mov	r2, r9
100182e8:	041b      	lsls	r3, r3, #16
100182ea:	0c1b      	lsrs	r3, r3, #16
100182ec:	435a      	muls	r2, r3
100182ee:	4660      	mov	r0, ip
100182f0:	4690      	mov	r8, r2
100182f2:	464a      	mov	r2, r9
100182f4:	4342      	muls	r2, r0
100182f6:	0010      	movs	r0, r2
100182f8:	9203      	str	r2, [sp, #12]
100182fa:	4662      	mov	r2, ip
100182fc:	001c      	movs	r4, r3
100182fe:	0c3f      	lsrs	r7, r7, #16
10018300:	437a      	muls	r2, r7
10018302:	437c      	muls	r4, r7
10018304:	4442      	add	r2, r8
10018306:	9201      	str	r2, [sp, #4]
10018308:	0c22      	lsrs	r2, r4, #16
1001830a:	4692      	mov	sl, r2
1001830c:	9a01      	ldr	r2, [sp, #4]
1001830e:	4452      	add	r2, sl
10018310:	4590      	cmp	r8, r2
10018312:	d906      	bls.n	10018322 <__aeabi_dmul+0x23a>
10018314:	4682      	mov	sl, r0
10018316:	2080      	movs	r0, #128	; 0x80
10018318:	0240      	lsls	r0, r0, #9
1001831a:	4680      	mov	r8, r0
1001831c:	44c2      	add	sl, r8
1001831e:	4650      	mov	r0, sl
10018320:	9003      	str	r0, [sp, #12]
10018322:	0c10      	lsrs	r0, r2, #16
10018324:	9004      	str	r0, [sp, #16]
10018326:	4648      	mov	r0, r9
10018328:	0424      	lsls	r4, r4, #16
1001832a:	0c24      	lsrs	r4, r4, #16
1001832c:	0412      	lsls	r2, r2, #16
1001832e:	1912      	adds	r2, r2, r4
10018330:	9205      	str	r2, [sp, #20]
10018332:	0c2a      	lsrs	r2, r5, #16
10018334:	042d      	lsls	r5, r5, #16
10018336:	0c2d      	lsrs	r5, r5, #16
10018338:	4368      	muls	r0, r5
1001833a:	002c      	movs	r4, r5
1001833c:	4682      	mov	sl, r0
1001833e:	4648      	mov	r0, r9
10018340:	437c      	muls	r4, r7
10018342:	4350      	muls	r0, r2
10018344:	4681      	mov	r9, r0
10018346:	0c20      	lsrs	r0, r4, #16
10018348:	4680      	mov	r8, r0
1001834a:	4357      	muls	r7, r2
1001834c:	4457      	add	r7, sl
1001834e:	4447      	add	r7, r8
10018350:	45ba      	cmp	sl, r7
10018352:	d903      	bls.n	1001835c <__aeabi_dmul+0x274>
10018354:	2080      	movs	r0, #128	; 0x80
10018356:	0240      	lsls	r0, r0, #9
10018358:	4680      	mov	r8, r0
1001835a:	44c1      	add	r9, r8
1001835c:	0c38      	lsrs	r0, r7, #16
1001835e:	043f      	lsls	r7, r7, #16
10018360:	46b8      	mov	r8, r7
10018362:	4448      	add	r0, r9
10018364:	0424      	lsls	r4, r4, #16
10018366:	0c24      	lsrs	r4, r4, #16
10018368:	9001      	str	r0, [sp, #4]
1001836a:	9804      	ldr	r0, [sp, #16]
1001836c:	44a0      	add	r8, r4
1001836e:	4440      	add	r0, r8
10018370:	9004      	str	r0, [sp, #16]
10018372:	4658      	mov	r0, fp
10018374:	0c00      	lsrs	r0, r0, #16
10018376:	4681      	mov	r9, r0
10018378:	4658      	mov	r0, fp
1001837a:	0404      	lsls	r4, r0, #16
1001837c:	0c20      	lsrs	r0, r4, #16
1001837e:	4682      	mov	sl, r0
10018380:	0007      	movs	r7, r0
10018382:	4648      	mov	r0, r9
10018384:	435f      	muls	r7, r3
10018386:	464c      	mov	r4, r9
10018388:	4343      	muls	r3, r0
1001838a:	4660      	mov	r0, ip
1001838c:	4360      	muls	r0, r4
1001838e:	4664      	mov	r4, ip
10018390:	4683      	mov	fp, r0
10018392:	4650      	mov	r0, sl
10018394:	4344      	muls	r4, r0
10018396:	0c38      	lsrs	r0, r7, #16
10018398:	4684      	mov	ip, r0
1001839a:	18e4      	adds	r4, r4, r3
1001839c:	4464      	add	r4, ip
1001839e:	42a3      	cmp	r3, r4
100183a0:	d903      	bls.n	100183aa <__aeabi_dmul+0x2c2>
100183a2:	2380      	movs	r3, #128	; 0x80
100183a4:	025b      	lsls	r3, r3, #9
100183a6:	469c      	mov	ip, r3
100183a8:	44e3      	add	fp, ip
100183aa:	4648      	mov	r0, r9
100183ac:	043f      	lsls	r7, r7, #16
100183ae:	0c23      	lsrs	r3, r4, #16
100183b0:	0c3f      	lsrs	r7, r7, #16
100183b2:	0424      	lsls	r4, r4, #16
100183b4:	19e4      	adds	r4, r4, r7
100183b6:	4657      	mov	r7, sl
100183b8:	4368      	muls	r0, r5
100183ba:	436f      	muls	r7, r5
100183bc:	4684      	mov	ip, r0
100183be:	464d      	mov	r5, r9
100183c0:	4650      	mov	r0, sl
100183c2:	4355      	muls	r5, r2
100183c4:	4342      	muls	r2, r0
100183c6:	0c38      	lsrs	r0, r7, #16
100183c8:	4681      	mov	r9, r0
100183ca:	4462      	add	r2, ip
100183cc:	444a      	add	r2, r9
100183ce:	445b      	add	r3, fp
100183d0:	4594      	cmp	ip, r2
100183d2:	d903      	bls.n	100183dc <__aeabi_dmul+0x2f4>
100183d4:	2080      	movs	r0, #128	; 0x80
100183d6:	0240      	lsls	r0, r0, #9
100183d8:	4684      	mov	ip, r0
100183da:	4465      	add	r5, ip
100183dc:	9803      	ldr	r0, [sp, #12]
100183de:	043f      	lsls	r7, r7, #16
100183e0:	4683      	mov	fp, r0
100183e2:	9804      	ldr	r0, [sp, #16]
100183e4:	0c3f      	lsrs	r7, r7, #16
100183e6:	4684      	mov	ip, r0
100183e8:	44e3      	add	fp, ip
100183ea:	45c3      	cmp	fp, r8
100183ec:	4180      	sbcs	r0, r0
100183ee:	4240      	negs	r0, r0
100183f0:	4682      	mov	sl, r0
100183f2:	0410      	lsls	r0, r2, #16
100183f4:	4684      	mov	ip, r0
100183f6:	9801      	ldr	r0, [sp, #4]
100183f8:	4467      	add	r7, ip
100183fa:	4684      	mov	ip, r0
100183fc:	4467      	add	r7, ip
100183fe:	44a3      	add	fp, r4
10018400:	46bc      	mov	ip, r7
10018402:	45a3      	cmp	fp, r4
10018404:	41a4      	sbcs	r4, r4
10018406:	4699      	mov	r9, r3
10018408:	44d4      	add	ip, sl
1001840a:	4264      	negs	r4, r4
1001840c:	4287      	cmp	r7, r0
1001840e:	41bf      	sbcs	r7, r7
10018410:	45d4      	cmp	ip, sl
10018412:	4180      	sbcs	r0, r0
10018414:	44e1      	add	r9, ip
10018416:	46a0      	mov	r8, r4
10018418:	4599      	cmp	r9, r3
1001841a:	419b      	sbcs	r3, r3
1001841c:	427f      	negs	r7, r7
1001841e:	4240      	negs	r0, r0
10018420:	44c8      	add	r8, r9
10018422:	4307      	orrs	r7, r0
10018424:	0c12      	lsrs	r2, r2, #16
10018426:	18ba      	adds	r2, r7, r2
10018428:	45a0      	cmp	r8, r4
1001842a:	41a4      	sbcs	r4, r4
1001842c:	425f      	negs	r7, r3
1001842e:	003b      	movs	r3, r7
10018430:	4264      	negs	r4, r4
10018432:	4323      	orrs	r3, r4
10018434:	18d7      	adds	r7, r2, r3
10018436:	4643      	mov	r3, r8
10018438:	197d      	adds	r5, r7, r5
1001843a:	0ddb      	lsrs	r3, r3, #23
1001843c:	026d      	lsls	r5, r5, #9
1001843e:	431d      	orrs	r5, r3
10018440:	465b      	mov	r3, fp
10018442:	025a      	lsls	r2, r3, #9
10018444:	9b05      	ldr	r3, [sp, #20]
10018446:	431a      	orrs	r2, r3
10018448:	1e53      	subs	r3, r2, #1
1001844a:	419a      	sbcs	r2, r3
1001844c:	465b      	mov	r3, fp
1001844e:	0ddb      	lsrs	r3, r3, #23
10018450:	431a      	orrs	r2, r3
10018452:	4643      	mov	r3, r8
10018454:	025b      	lsls	r3, r3, #9
10018456:	4313      	orrs	r3, r2
10018458:	01ea      	lsls	r2, r5, #7
1001845a:	d507      	bpl.n	1001846c <__aeabi_dmul+0x384>
1001845c:	2201      	movs	r2, #1
1001845e:	085c      	lsrs	r4, r3, #1
10018460:	4013      	ands	r3, r2
10018462:	4323      	orrs	r3, r4
10018464:	07ea      	lsls	r2, r5, #31
10018466:	9e02      	ldr	r6, [sp, #8]
10018468:	4313      	orrs	r3, r2
1001846a:	086d      	lsrs	r5, r5, #1
1001846c:	4a57      	ldr	r2, [pc, #348]	; (100185cc <__aeabi_dmul+0x4e4>)
1001846e:	18b2      	adds	r2, r6, r2
10018470:	2a00      	cmp	r2, #0
10018472:	dd4b      	ble.n	1001850c <__aeabi_dmul+0x424>
10018474:	0758      	lsls	r0, r3, #29
10018476:	d009      	beq.n	1001848c <__aeabi_dmul+0x3a4>
10018478:	200f      	movs	r0, #15
1001847a:	4018      	ands	r0, r3
1001847c:	2804      	cmp	r0, #4
1001847e:	d005      	beq.n	1001848c <__aeabi_dmul+0x3a4>
10018480:	1d18      	adds	r0, r3, #4
10018482:	4298      	cmp	r0, r3
10018484:	419b      	sbcs	r3, r3
10018486:	425b      	negs	r3, r3
10018488:	18ed      	adds	r5, r5, r3
1001848a:	0003      	movs	r3, r0
1001848c:	01e8      	lsls	r0, r5, #7
1001848e:	d504      	bpl.n	1001849a <__aeabi_dmul+0x3b2>
10018490:	4a4f      	ldr	r2, [pc, #316]	; (100185d0 <__aeabi_dmul+0x4e8>)
10018492:	4015      	ands	r5, r2
10018494:	2280      	movs	r2, #128	; 0x80
10018496:	00d2      	lsls	r2, r2, #3
10018498:	18b2      	adds	r2, r6, r2
1001849a:	484e      	ldr	r0, [pc, #312]	; (100185d4 <__aeabi_dmul+0x4ec>)
1001849c:	4282      	cmp	r2, r0
1001849e:	dd00      	ble.n	100184a2 <__aeabi_dmul+0x3ba>
100184a0:	e6e7      	b.n	10018272 <__aeabi_dmul+0x18a>
100184a2:	2401      	movs	r4, #1
100184a4:	08db      	lsrs	r3, r3, #3
100184a6:	0768      	lsls	r0, r5, #29
100184a8:	4318      	orrs	r0, r3
100184aa:	026d      	lsls	r5, r5, #9
100184ac:	0553      	lsls	r3, r2, #21
100184ae:	4680      	mov	r8, r0
100184b0:	0b2d      	lsrs	r5, r5, #12
100184b2:	0d5b      	lsrs	r3, r3, #21
100184b4:	400c      	ands	r4, r1
100184b6:	e67d      	b.n	100181b4 <__aeabi_dmul+0xcc>
100184b8:	2280      	movs	r2, #128	; 0x80
100184ba:	4659      	mov	r1, fp
100184bc:	0312      	lsls	r2, r2, #12
100184be:	4211      	tst	r1, r2
100184c0:	d008      	beq.n	100184d4 <__aeabi_dmul+0x3ec>
100184c2:	4215      	tst	r5, r2
100184c4:	d106      	bne.n	100184d4 <__aeabi_dmul+0x3ec>
100184c6:	4315      	orrs	r5, r2
100184c8:	032d      	lsls	r5, r5, #12
100184ca:	4698      	mov	r8, r3
100184cc:	0b2d      	lsrs	r5, r5, #12
100184ce:	464c      	mov	r4, r9
100184d0:	4b41      	ldr	r3, [pc, #260]	; (100185d8 <__aeabi_dmul+0x4f0>)
100184d2:	e66f      	b.n	100181b4 <__aeabi_dmul+0xcc>
100184d4:	465d      	mov	r5, fp
100184d6:	4315      	orrs	r5, r2
100184d8:	032d      	lsls	r5, r5, #12
100184da:	0b2d      	lsrs	r5, r5, #12
100184dc:	4b3e      	ldr	r3, [pc, #248]	; (100185d8 <__aeabi_dmul+0x4f0>)
100184de:	e669      	b.n	100181b4 <__aeabi_dmul+0xcc>
100184e0:	0003      	movs	r3, r0
100184e2:	4655      	mov	r5, sl
100184e4:	3b28      	subs	r3, #40	; 0x28
100184e6:	409d      	lsls	r5, r3
100184e8:	2300      	movs	r3, #0
100184ea:	e6bc      	b.n	10018266 <__aeabi_dmul+0x17e>
100184ec:	4650      	mov	r0, sl
100184ee:	f000 fc37 	bl	10018d60 <__clzsi2>
100184f2:	3020      	adds	r0, #32
100184f4:	e6a8      	b.n	10018248 <__aeabi_dmul+0x160>
100184f6:	0003      	movs	r3, r0
100184f8:	3b28      	subs	r3, #40	; 0x28
100184fa:	409f      	lsls	r7, r3
100184fc:	2300      	movs	r3, #0
100184fe:	46bb      	mov	fp, r7
10018500:	4698      	mov	r8, r3
10018502:	e689      	b.n	10018218 <__aeabi_dmul+0x130>
10018504:	f000 fc2c 	bl	10018d60 <__clzsi2>
10018508:	3020      	adds	r0, #32
1001850a:	e673      	b.n	100181f4 <__aeabi_dmul+0x10c>
1001850c:	2401      	movs	r4, #1
1001850e:	1aa6      	subs	r6, r4, r2
10018510:	2e38      	cmp	r6, #56	; 0x38
10018512:	dd07      	ble.n	10018524 <__aeabi_dmul+0x43c>
10018514:	2200      	movs	r2, #0
10018516:	400c      	ands	r4, r1
10018518:	2300      	movs	r3, #0
1001851a:	2500      	movs	r5, #0
1001851c:	4690      	mov	r8, r2
1001851e:	e649      	b.n	100181b4 <__aeabi_dmul+0xcc>
10018520:	9e02      	ldr	r6, [sp, #8]
10018522:	e7a3      	b.n	1001846c <__aeabi_dmul+0x384>
10018524:	2e1f      	cmp	r6, #31
10018526:	dc20      	bgt.n	1001856a <__aeabi_dmul+0x482>
10018528:	2220      	movs	r2, #32
1001852a:	002c      	movs	r4, r5
1001852c:	0018      	movs	r0, r3
1001852e:	1b92      	subs	r2, r2, r6
10018530:	40f0      	lsrs	r0, r6
10018532:	4094      	lsls	r4, r2
10018534:	4093      	lsls	r3, r2
10018536:	4304      	orrs	r4, r0
10018538:	1e58      	subs	r0, r3, #1
1001853a:	4183      	sbcs	r3, r0
1001853c:	431c      	orrs	r4, r3
1001853e:	40f5      	lsrs	r5, r6
10018540:	0763      	lsls	r3, r4, #29
10018542:	d009      	beq.n	10018558 <__aeabi_dmul+0x470>
10018544:	230f      	movs	r3, #15
10018546:	4023      	ands	r3, r4
10018548:	2b04      	cmp	r3, #4
1001854a:	d005      	beq.n	10018558 <__aeabi_dmul+0x470>
1001854c:	0023      	movs	r3, r4
1001854e:	1d1c      	adds	r4, r3, #4
10018550:	429c      	cmp	r4, r3
10018552:	4192      	sbcs	r2, r2
10018554:	4252      	negs	r2, r2
10018556:	18ad      	adds	r5, r5, r2
10018558:	022b      	lsls	r3, r5, #8
1001855a:	d51f      	bpl.n	1001859c <__aeabi_dmul+0x4b4>
1001855c:	2401      	movs	r4, #1
1001855e:	2200      	movs	r2, #0
10018560:	400c      	ands	r4, r1
10018562:	2301      	movs	r3, #1
10018564:	2500      	movs	r5, #0
10018566:	4690      	mov	r8, r2
10018568:	e624      	b.n	100181b4 <__aeabi_dmul+0xcc>
1001856a:	201f      	movs	r0, #31
1001856c:	002c      	movs	r4, r5
1001856e:	4240      	negs	r0, r0
10018570:	1a82      	subs	r2, r0, r2
10018572:	40d4      	lsrs	r4, r2
10018574:	2e20      	cmp	r6, #32
10018576:	d01c      	beq.n	100185b2 <__aeabi_dmul+0x4ca>
10018578:	2240      	movs	r2, #64	; 0x40
1001857a:	1b96      	subs	r6, r2, r6
1001857c:	40b5      	lsls	r5, r6
1001857e:	432b      	orrs	r3, r5
10018580:	1e58      	subs	r0, r3, #1
10018582:	4183      	sbcs	r3, r0
10018584:	2007      	movs	r0, #7
10018586:	4323      	orrs	r3, r4
10018588:	4018      	ands	r0, r3
1001858a:	2500      	movs	r5, #0
1001858c:	2800      	cmp	r0, #0
1001858e:	d009      	beq.n	100185a4 <__aeabi_dmul+0x4bc>
10018590:	220f      	movs	r2, #15
10018592:	2500      	movs	r5, #0
10018594:	401a      	ands	r2, r3
10018596:	001c      	movs	r4, r3
10018598:	2a04      	cmp	r2, #4
1001859a:	d1d8      	bne.n	1001854e <__aeabi_dmul+0x466>
1001859c:	0023      	movs	r3, r4
1001859e:	0768      	lsls	r0, r5, #29
100185a0:	026d      	lsls	r5, r5, #9
100185a2:	0b2d      	lsrs	r5, r5, #12
100185a4:	2401      	movs	r4, #1
100185a6:	08db      	lsrs	r3, r3, #3
100185a8:	4303      	orrs	r3, r0
100185aa:	4698      	mov	r8, r3
100185ac:	400c      	ands	r4, r1
100185ae:	2300      	movs	r3, #0
100185b0:	e600      	b.n	100181b4 <__aeabi_dmul+0xcc>
100185b2:	2500      	movs	r5, #0
100185b4:	e7e3      	b.n	1001857e <__aeabi_dmul+0x496>
100185b6:	2280      	movs	r2, #128	; 0x80
100185b8:	2401      	movs	r4, #1
100185ba:	0312      	lsls	r2, r2, #12
100185bc:	4315      	orrs	r5, r2
100185be:	032d      	lsls	r5, r5, #12
100185c0:	4698      	mov	r8, r3
100185c2:	0b2d      	lsrs	r5, r5, #12
100185c4:	400c      	ands	r4, r1
100185c6:	4b04      	ldr	r3, [pc, #16]	; (100185d8 <__aeabi_dmul+0x4f0>)
100185c8:	e5f4      	b.n	100181b4 <__aeabi_dmul+0xcc>
100185ca:	46c0      	nop			; (mov r8, r8)
100185cc:	000003ff 	.word	0x000003ff
100185d0:	feffffff 	.word	0xfeffffff
100185d4:	000007fe 	.word	0x000007fe
100185d8:	000007ff 	.word	0x000007ff

100185dc <__aeabi_dsub>:
100185dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100185de:	4657      	mov	r7, sl
100185e0:	464e      	mov	r6, r9
100185e2:	4645      	mov	r5, r8
100185e4:	b4e0      	push	{r5, r6, r7}
100185e6:	000e      	movs	r6, r1
100185e8:	0011      	movs	r1, r2
100185ea:	0ff2      	lsrs	r2, r6, #31
100185ec:	4692      	mov	sl, r2
100185ee:	00c5      	lsls	r5, r0, #3
100185f0:	0f42      	lsrs	r2, r0, #29
100185f2:	0318      	lsls	r0, r3, #12
100185f4:	0337      	lsls	r7, r6, #12
100185f6:	0074      	lsls	r4, r6, #1
100185f8:	0a40      	lsrs	r0, r0, #9
100185fa:	0f4e      	lsrs	r6, r1, #29
100185fc:	0a7f      	lsrs	r7, r7, #9
100185fe:	4330      	orrs	r0, r6
10018600:	4ecf      	ldr	r6, [pc, #828]	; (10018940 <__aeabi_dsub+0x364>)
10018602:	4317      	orrs	r7, r2
10018604:	005a      	lsls	r2, r3, #1
10018606:	0d64      	lsrs	r4, r4, #21
10018608:	0d52      	lsrs	r2, r2, #21
1001860a:	0fdb      	lsrs	r3, r3, #31
1001860c:	00c9      	lsls	r1, r1, #3
1001860e:	42b2      	cmp	r2, r6
10018610:	d100      	bne.n	10018614 <__aeabi_dsub+0x38>
10018612:	e0e5      	b.n	100187e0 <__aeabi_dsub+0x204>
10018614:	2601      	movs	r6, #1
10018616:	4073      	eors	r3, r6
10018618:	1aa6      	subs	r6, r4, r2
1001861a:	46b4      	mov	ip, r6
1001861c:	4553      	cmp	r3, sl
1001861e:	d100      	bne.n	10018622 <__aeabi_dsub+0x46>
10018620:	e0af      	b.n	10018782 <__aeabi_dsub+0x1a6>
10018622:	2e00      	cmp	r6, #0
10018624:	dc00      	bgt.n	10018628 <__aeabi_dsub+0x4c>
10018626:	e10d      	b.n	10018844 <__aeabi_dsub+0x268>
10018628:	2a00      	cmp	r2, #0
1001862a:	d13a      	bne.n	100186a2 <__aeabi_dsub+0xc6>
1001862c:	0003      	movs	r3, r0
1001862e:	430b      	orrs	r3, r1
10018630:	d000      	beq.n	10018634 <__aeabi_dsub+0x58>
10018632:	e0e4      	b.n	100187fe <__aeabi_dsub+0x222>
10018634:	076b      	lsls	r3, r5, #29
10018636:	d009      	beq.n	1001864c <__aeabi_dsub+0x70>
10018638:	230f      	movs	r3, #15
1001863a:	402b      	ands	r3, r5
1001863c:	2b04      	cmp	r3, #4
1001863e:	d005      	beq.n	1001864c <__aeabi_dsub+0x70>
10018640:	1d2b      	adds	r3, r5, #4
10018642:	42ab      	cmp	r3, r5
10018644:	41ad      	sbcs	r5, r5
10018646:	426d      	negs	r5, r5
10018648:	197f      	adds	r7, r7, r5
1001864a:	001d      	movs	r5, r3
1001864c:	023b      	lsls	r3, r7, #8
1001864e:	d400      	bmi.n	10018652 <__aeabi_dsub+0x76>
10018650:	e088      	b.n	10018764 <__aeabi_dsub+0x188>
10018652:	4bbb      	ldr	r3, [pc, #748]	; (10018940 <__aeabi_dsub+0x364>)
10018654:	3401      	adds	r4, #1
10018656:	429c      	cmp	r4, r3
10018658:	d100      	bne.n	1001865c <__aeabi_dsub+0x80>
1001865a:	e110      	b.n	1001887e <__aeabi_dsub+0x2a2>
1001865c:	003a      	movs	r2, r7
1001865e:	4bb9      	ldr	r3, [pc, #740]	; (10018944 <__aeabi_dsub+0x368>)
10018660:	4651      	mov	r1, sl
10018662:	401a      	ands	r2, r3
10018664:	2301      	movs	r3, #1
10018666:	0750      	lsls	r0, r2, #29
10018668:	08ed      	lsrs	r5, r5, #3
1001866a:	0252      	lsls	r2, r2, #9
1001866c:	0564      	lsls	r4, r4, #21
1001866e:	4305      	orrs	r5, r0
10018670:	0b12      	lsrs	r2, r2, #12
10018672:	0d64      	lsrs	r4, r4, #21
10018674:	400b      	ands	r3, r1
10018676:	2100      	movs	r1, #0
10018678:	0028      	movs	r0, r5
1001867a:	0312      	lsls	r2, r2, #12
1001867c:	0d0d      	lsrs	r5, r1, #20
1001867e:	0b12      	lsrs	r2, r2, #12
10018680:	0564      	lsls	r4, r4, #21
10018682:	052d      	lsls	r5, r5, #20
10018684:	4315      	orrs	r5, r2
10018686:	0862      	lsrs	r2, r4, #1
10018688:	4caf      	ldr	r4, [pc, #700]	; (10018948 <__aeabi_dsub+0x36c>)
1001868a:	07db      	lsls	r3, r3, #31
1001868c:	402c      	ands	r4, r5
1001868e:	4314      	orrs	r4, r2
10018690:	0064      	lsls	r4, r4, #1
10018692:	0864      	lsrs	r4, r4, #1
10018694:	431c      	orrs	r4, r3
10018696:	0021      	movs	r1, r4
10018698:	bc1c      	pop	{r2, r3, r4}
1001869a:	4690      	mov	r8, r2
1001869c:	4699      	mov	r9, r3
1001869e:	46a2      	mov	sl, r4
100186a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100186a2:	4ba7      	ldr	r3, [pc, #668]	; (10018940 <__aeabi_dsub+0x364>)
100186a4:	429c      	cmp	r4, r3
100186a6:	d0c5      	beq.n	10018634 <__aeabi_dsub+0x58>
100186a8:	2380      	movs	r3, #128	; 0x80
100186aa:	041b      	lsls	r3, r3, #16
100186ac:	4318      	orrs	r0, r3
100186ae:	4663      	mov	r3, ip
100186b0:	2b38      	cmp	r3, #56	; 0x38
100186b2:	dd00      	ble.n	100186b6 <__aeabi_dsub+0xda>
100186b4:	e0fd      	b.n	100188b2 <__aeabi_dsub+0x2d6>
100186b6:	2b1f      	cmp	r3, #31
100186b8:	dd00      	ble.n	100186bc <__aeabi_dsub+0xe0>
100186ba:	e130      	b.n	1001891e <__aeabi_dsub+0x342>
100186bc:	4662      	mov	r2, ip
100186be:	2320      	movs	r3, #32
100186c0:	1a9b      	subs	r3, r3, r2
100186c2:	0002      	movs	r2, r0
100186c4:	409a      	lsls	r2, r3
100186c6:	4666      	mov	r6, ip
100186c8:	4690      	mov	r8, r2
100186ca:	000a      	movs	r2, r1
100186cc:	4099      	lsls	r1, r3
100186ce:	40f2      	lsrs	r2, r6
100186d0:	4646      	mov	r6, r8
100186d2:	1e4b      	subs	r3, r1, #1
100186d4:	4199      	sbcs	r1, r3
100186d6:	4332      	orrs	r2, r6
100186d8:	4311      	orrs	r1, r2
100186da:	4663      	mov	r3, ip
100186dc:	0002      	movs	r2, r0
100186de:	40da      	lsrs	r2, r3
100186e0:	1a69      	subs	r1, r5, r1
100186e2:	428d      	cmp	r5, r1
100186e4:	419b      	sbcs	r3, r3
100186e6:	000d      	movs	r5, r1
100186e8:	1aba      	subs	r2, r7, r2
100186ea:	425b      	negs	r3, r3
100186ec:	1ad7      	subs	r7, r2, r3
100186ee:	023b      	lsls	r3, r7, #8
100186f0:	d535      	bpl.n	1001875e <__aeabi_dsub+0x182>
100186f2:	027a      	lsls	r2, r7, #9
100186f4:	0a53      	lsrs	r3, r2, #9
100186f6:	4698      	mov	r8, r3
100186f8:	4643      	mov	r3, r8
100186fa:	2b00      	cmp	r3, #0
100186fc:	d100      	bne.n	10018700 <__aeabi_dsub+0x124>
100186fe:	e0c4      	b.n	1001888a <__aeabi_dsub+0x2ae>
10018700:	4640      	mov	r0, r8
10018702:	f000 fb2d 	bl	10018d60 <__clzsi2>
10018706:	0003      	movs	r3, r0
10018708:	3b08      	subs	r3, #8
1001870a:	2b1f      	cmp	r3, #31
1001870c:	dd00      	ble.n	10018710 <__aeabi_dsub+0x134>
1001870e:	e0c5      	b.n	1001889c <__aeabi_dsub+0x2c0>
10018710:	2220      	movs	r2, #32
10018712:	0029      	movs	r1, r5
10018714:	1ad2      	subs	r2, r2, r3
10018716:	4647      	mov	r7, r8
10018718:	40d1      	lsrs	r1, r2
1001871a:	409f      	lsls	r7, r3
1001871c:	000a      	movs	r2, r1
1001871e:	409d      	lsls	r5, r3
10018720:	433a      	orrs	r2, r7
10018722:	429c      	cmp	r4, r3
10018724:	dd00      	ble.n	10018728 <__aeabi_dsub+0x14c>
10018726:	e0c0      	b.n	100188aa <__aeabi_dsub+0x2ce>
10018728:	1b1c      	subs	r4, r3, r4
1001872a:	1c63      	adds	r3, r4, #1
1001872c:	2b1f      	cmp	r3, #31
1001872e:	dd00      	ble.n	10018732 <__aeabi_dsub+0x156>
10018730:	e0e4      	b.n	100188fc <__aeabi_dsub+0x320>
10018732:	2120      	movs	r1, #32
10018734:	0014      	movs	r4, r2
10018736:	0028      	movs	r0, r5
10018738:	1ac9      	subs	r1, r1, r3
1001873a:	40d8      	lsrs	r0, r3
1001873c:	408c      	lsls	r4, r1
1001873e:	408d      	lsls	r5, r1
10018740:	4304      	orrs	r4, r0
10018742:	40da      	lsrs	r2, r3
10018744:	1e68      	subs	r0, r5, #1
10018746:	4185      	sbcs	r5, r0
10018748:	0017      	movs	r7, r2
1001874a:	4325      	orrs	r5, r4
1001874c:	2400      	movs	r4, #0
1001874e:	e771      	b.n	10018634 <__aeabi_dsub+0x58>
10018750:	4642      	mov	r2, r8
10018752:	4663      	mov	r3, ip
10018754:	431a      	orrs	r2, r3
10018756:	d100      	bne.n	1001875a <__aeabi_dsub+0x17e>
10018758:	e24c      	b.n	10018bf4 <__aeabi_dsub+0x618>
1001875a:	4667      	mov	r7, ip
1001875c:	4645      	mov	r5, r8
1001875e:	076b      	lsls	r3, r5, #29
10018760:	d000      	beq.n	10018764 <__aeabi_dsub+0x188>
10018762:	e769      	b.n	10018638 <__aeabi_dsub+0x5c>
10018764:	2301      	movs	r3, #1
10018766:	4651      	mov	r1, sl
10018768:	0778      	lsls	r0, r7, #29
1001876a:	08ed      	lsrs	r5, r5, #3
1001876c:	08fa      	lsrs	r2, r7, #3
1001876e:	400b      	ands	r3, r1
10018770:	4305      	orrs	r5, r0
10018772:	4973      	ldr	r1, [pc, #460]	; (10018940 <__aeabi_dsub+0x364>)
10018774:	428c      	cmp	r4, r1
10018776:	d038      	beq.n	100187ea <__aeabi_dsub+0x20e>
10018778:	0312      	lsls	r2, r2, #12
1001877a:	0564      	lsls	r4, r4, #21
1001877c:	0b12      	lsrs	r2, r2, #12
1001877e:	0d64      	lsrs	r4, r4, #21
10018780:	e779      	b.n	10018676 <__aeabi_dsub+0x9a>
10018782:	2e00      	cmp	r6, #0
10018784:	dc00      	bgt.n	10018788 <__aeabi_dsub+0x1ac>
10018786:	e09a      	b.n	100188be <__aeabi_dsub+0x2e2>
10018788:	2a00      	cmp	r2, #0
1001878a:	d047      	beq.n	1001881c <__aeabi_dsub+0x240>
1001878c:	4a6c      	ldr	r2, [pc, #432]	; (10018940 <__aeabi_dsub+0x364>)
1001878e:	4294      	cmp	r4, r2
10018790:	d100      	bne.n	10018794 <__aeabi_dsub+0x1b8>
10018792:	e74f      	b.n	10018634 <__aeabi_dsub+0x58>
10018794:	2280      	movs	r2, #128	; 0x80
10018796:	0412      	lsls	r2, r2, #16
10018798:	4310      	orrs	r0, r2
1001879a:	4662      	mov	r2, ip
1001879c:	2a38      	cmp	r2, #56	; 0x38
1001879e:	dc00      	bgt.n	100187a2 <__aeabi_dsub+0x1c6>
100187a0:	e108      	b.n	100189b4 <__aeabi_dsub+0x3d8>
100187a2:	4301      	orrs	r1, r0
100187a4:	1e48      	subs	r0, r1, #1
100187a6:	4181      	sbcs	r1, r0
100187a8:	2200      	movs	r2, #0
100187aa:	b2c9      	uxtb	r1, r1
100187ac:	1949      	adds	r1, r1, r5
100187ae:	19d2      	adds	r2, r2, r7
100187b0:	42a9      	cmp	r1, r5
100187b2:	41bf      	sbcs	r7, r7
100187b4:	000d      	movs	r5, r1
100187b6:	427f      	negs	r7, r7
100187b8:	18bf      	adds	r7, r7, r2
100187ba:	023a      	lsls	r2, r7, #8
100187bc:	d400      	bmi.n	100187c0 <__aeabi_dsub+0x1e4>
100187be:	e142      	b.n	10018a46 <__aeabi_dsub+0x46a>
100187c0:	4a5f      	ldr	r2, [pc, #380]	; (10018940 <__aeabi_dsub+0x364>)
100187c2:	3401      	adds	r4, #1
100187c4:	4294      	cmp	r4, r2
100187c6:	d100      	bne.n	100187ca <__aeabi_dsub+0x1ee>
100187c8:	e14e      	b.n	10018a68 <__aeabi_dsub+0x48c>
100187ca:	2001      	movs	r0, #1
100187cc:	4a5d      	ldr	r2, [pc, #372]	; (10018944 <__aeabi_dsub+0x368>)
100187ce:	0869      	lsrs	r1, r5, #1
100187d0:	403a      	ands	r2, r7
100187d2:	4028      	ands	r0, r5
100187d4:	4308      	orrs	r0, r1
100187d6:	07d5      	lsls	r5, r2, #31
100187d8:	4305      	orrs	r5, r0
100187da:	0857      	lsrs	r7, r2, #1
100187dc:	469a      	mov	sl, r3
100187de:	e729      	b.n	10018634 <__aeabi_dsub+0x58>
100187e0:	0006      	movs	r6, r0
100187e2:	430e      	orrs	r6, r1
100187e4:	d000      	beq.n	100187e8 <__aeabi_dsub+0x20c>
100187e6:	e717      	b.n	10018618 <__aeabi_dsub+0x3c>
100187e8:	e714      	b.n	10018614 <__aeabi_dsub+0x38>
100187ea:	0029      	movs	r1, r5
100187ec:	4311      	orrs	r1, r2
100187ee:	d100      	bne.n	100187f2 <__aeabi_dsub+0x216>
100187f0:	e1f9      	b.n	10018be6 <__aeabi_dsub+0x60a>
100187f2:	2180      	movs	r1, #128	; 0x80
100187f4:	0309      	lsls	r1, r1, #12
100187f6:	430a      	orrs	r2, r1
100187f8:	0312      	lsls	r2, r2, #12
100187fa:	0b12      	lsrs	r2, r2, #12
100187fc:	e73b      	b.n	10018676 <__aeabi_dsub+0x9a>
100187fe:	2301      	movs	r3, #1
10018800:	425b      	negs	r3, r3
10018802:	4698      	mov	r8, r3
10018804:	44c4      	add	ip, r8
10018806:	4663      	mov	r3, ip
10018808:	2b00      	cmp	r3, #0
1001880a:	d172      	bne.n	100188f2 <__aeabi_dsub+0x316>
1001880c:	1a69      	subs	r1, r5, r1
1001880e:	428d      	cmp	r5, r1
10018810:	419b      	sbcs	r3, r3
10018812:	1a3f      	subs	r7, r7, r0
10018814:	425b      	negs	r3, r3
10018816:	1aff      	subs	r7, r7, r3
10018818:	000d      	movs	r5, r1
1001881a:	e768      	b.n	100186ee <__aeabi_dsub+0x112>
1001881c:	0002      	movs	r2, r0
1001881e:	430a      	orrs	r2, r1
10018820:	d100      	bne.n	10018824 <__aeabi_dsub+0x248>
10018822:	e707      	b.n	10018634 <__aeabi_dsub+0x58>
10018824:	2201      	movs	r2, #1
10018826:	4252      	negs	r2, r2
10018828:	4690      	mov	r8, r2
1001882a:	44c4      	add	ip, r8
1001882c:	4662      	mov	r2, ip
1001882e:	2a00      	cmp	r2, #0
10018830:	d000      	beq.n	10018834 <__aeabi_dsub+0x258>
10018832:	e0e6      	b.n	10018a02 <__aeabi_dsub+0x426>
10018834:	1869      	adds	r1, r5, r1
10018836:	42a9      	cmp	r1, r5
10018838:	41b6      	sbcs	r6, r6
1001883a:	183f      	adds	r7, r7, r0
1001883c:	4276      	negs	r6, r6
1001883e:	19f7      	adds	r7, r6, r7
10018840:	000d      	movs	r5, r1
10018842:	e7ba      	b.n	100187ba <__aeabi_dsub+0x1de>
10018844:	2e00      	cmp	r6, #0
10018846:	d000      	beq.n	1001884a <__aeabi_dsub+0x26e>
10018848:	e080      	b.n	1001894c <__aeabi_dsub+0x370>
1001884a:	1c62      	adds	r2, r4, #1
1001884c:	0552      	lsls	r2, r2, #21
1001884e:	0d52      	lsrs	r2, r2, #21
10018850:	2a01      	cmp	r2, #1
10018852:	dc00      	bgt.n	10018856 <__aeabi_dsub+0x27a>
10018854:	e0f9      	b.n	10018a4a <__aeabi_dsub+0x46e>
10018856:	1a6a      	subs	r2, r5, r1
10018858:	4691      	mov	r9, r2
1001885a:	454d      	cmp	r5, r9
1001885c:	41b6      	sbcs	r6, r6
1001885e:	1a3a      	subs	r2, r7, r0
10018860:	4276      	negs	r6, r6
10018862:	1b92      	subs	r2, r2, r6
10018864:	4690      	mov	r8, r2
10018866:	0212      	lsls	r2, r2, #8
10018868:	d400      	bmi.n	1001886c <__aeabi_dsub+0x290>
1001886a:	e099      	b.n	100189a0 <__aeabi_dsub+0x3c4>
1001886c:	1b4d      	subs	r5, r1, r5
1001886e:	42a9      	cmp	r1, r5
10018870:	4189      	sbcs	r1, r1
10018872:	1bc7      	subs	r7, r0, r7
10018874:	4249      	negs	r1, r1
10018876:	1a7a      	subs	r2, r7, r1
10018878:	4690      	mov	r8, r2
1001887a:	469a      	mov	sl, r3
1001887c:	e73c      	b.n	100186f8 <__aeabi_dsub+0x11c>
1001887e:	4652      	mov	r2, sl
10018880:	2301      	movs	r3, #1
10018882:	2500      	movs	r5, #0
10018884:	4013      	ands	r3, r2
10018886:	2200      	movs	r2, #0
10018888:	e6f5      	b.n	10018676 <__aeabi_dsub+0x9a>
1001888a:	0028      	movs	r0, r5
1001888c:	f000 fa68 	bl	10018d60 <__clzsi2>
10018890:	3020      	adds	r0, #32
10018892:	0003      	movs	r3, r0
10018894:	3b08      	subs	r3, #8
10018896:	2b1f      	cmp	r3, #31
10018898:	dc00      	bgt.n	1001889c <__aeabi_dsub+0x2c0>
1001889a:	e739      	b.n	10018710 <__aeabi_dsub+0x134>
1001889c:	002a      	movs	r2, r5
1001889e:	3828      	subs	r0, #40	; 0x28
100188a0:	4082      	lsls	r2, r0
100188a2:	2500      	movs	r5, #0
100188a4:	429c      	cmp	r4, r3
100188a6:	dc00      	bgt.n	100188aa <__aeabi_dsub+0x2ce>
100188a8:	e73e      	b.n	10018728 <__aeabi_dsub+0x14c>
100188aa:	4f26      	ldr	r7, [pc, #152]	; (10018944 <__aeabi_dsub+0x368>)
100188ac:	1ae4      	subs	r4, r4, r3
100188ae:	4017      	ands	r7, r2
100188b0:	e6c0      	b.n	10018634 <__aeabi_dsub+0x58>
100188b2:	4301      	orrs	r1, r0
100188b4:	1e48      	subs	r0, r1, #1
100188b6:	4181      	sbcs	r1, r0
100188b8:	2200      	movs	r2, #0
100188ba:	b2c9      	uxtb	r1, r1
100188bc:	e710      	b.n	100186e0 <__aeabi_dsub+0x104>
100188be:	2e00      	cmp	r6, #0
100188c0:	d000      	beq.n	100188c4 <__aeabi_dsub+0x2e8>
100188c2:	e0f1      	b.n	10018aa8 <__aeabi_dsub+0x4cc>
100188c4:	1c62      	adds	r2, r4, #1
100188c6:	4694      	mov	ip, r2
100188c8:	0552      	lsls	r2, r2, #21
100188ca:	0d52      	lsrs	r2, r2, #21
100188cc:	2a01      	cmp	r2, #1
100188ce:	dc00      	bgt.n	100188d2 <__aeabi_dsub+0x2f6>
100188d0:	e0a0      	b.n	10018a14 <__aeabi_dsub+0x438>
100188d2:	4a1b      	ldr	r2, [pc, #108]	; (10018940 <__aeabi_dsub+0x364>)
100188d4:	4594      	cmp	ip, r2
100188d6:	d100      	bne.n	100188da <__aeabi_dsub+0x2fe>
100188d8:	e0c5      	b.n	10018a66 <__aeabi_dsub+0x48a>
100188da:	1869      	adds	r1, r5, r1
100188dc:	42a9      	cmp	r1, r5
100188de:	4192      	sbcs	r2, r2
100188e0:	183f      	adds	r7, r7, r0
100188e2:	4252      	negs	r2, r2
100188e4:	19d2      	adds	r2, r2, r7
100188e6:	0849      	lsrs	r1, r1, #1
100188e8:	07d5      	lsls	r5, r2, #31
100188ea:	430d      	orrs	r5, r1
100188ec:	0857      	lsrs	r7, r2, #1
100188ee:	4664      	mov	r4, ip
100188f0:	e6a0      	b.n	10018634 <__aeabi_dsub+0x58>
100188f2:	4b13      	ldr	r3, [pc, #76]	; (10018940 <__aeabi_dsub+0x364>)
100188f4:	429c      	cmp	r4, r3
100188f6:	d000      	beq.n	100188fa <__aeabi_dsub+0x31e>
100188f8:	e6d9      	b.n	100186ae <__aeabi_dsub+0xd2>
100188fa:	e69b      	b.n	10018634 <__aeabi_dsub+0x58>
100188fc:	0011      	movs	r1, r2
100188fe:	3c1f      	subs	r4, #31
10018900:	40e1      	lsrs	r1, r4
10018902:	000c      	movs	r4, r1
10018904:	2b20      	cmp	r3, #32
10018906:	d100      	bne.n	1001890a <__aeabi_dsub+0x32e>
10018908:	e080      	b.n	10018a0c <__aeabi_dsub+0x430>
1001890a:	2140      	movs	r1, #64	; 0x40
1001890c:	1acb      	subs	r3, r1, r3
1001890e:	409a      	lsls	r2, r3
10018910:	4315      	orrs	r5, r2
10018912:	1e6a      	subs	r2, r5, #1
10018914:	4195      	sbcs	r5, r2
10018916:	2700      	movs	r7, #0
10018918:	4325      	orrs	r5, r4
1001891a:	2400      	movs	r4, #0
1001891c:	e71f      	b.n	1001875e <__aeabi_dsub+0x182>
1001891e:	4663      	mov	r3, ip
10018920:	0002      	movs	r2, r0
10018922:	3b20      	subs	r3, #32
10018924:	40da      	lsrs	r2, r3
10018926:	4663      	mov	r3, ip
10018928:	2b20      	cmp	r3, #32
1001892a:	d071      	beq.n	10018a10 <__aeabi_dsub+0x434>
1001892c:	2340      	movs	r3, #64	; 0x40
1001892e:	4666      	mov	r6, ip
10018930:	1b9b      	subs	r3, r3, r6
10018932:	4098      	lsls	r0, r3
10018934:	4301      	orrs	r1, r0
10018936:	1e48      	subs	r0, r1, #1
10018938:	4181      	sbcs	r1, r0
1001893a:	4311      	orrs	r1, r2
1001893c:	2200      	movs	r2, #0
1001893e:	e6cf      	b.n	100186e0 <__aeabi_dsub+0x104>
10018940:	000007ff 	.word	0x000007ff
10018944:	ff7fffff 	.word	0xff7fffff
10018948:	800fffff 	.word	0x800fffff
1001894c:	2c00      	cmp	r4, #0
1001894e:	d048      	beq.n	100189e2 <__aeabi_dsub+0x406>
10018950:	4cca      	ldr	r4, [pc, #808]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018952:	42a2      	cmp	r2, r4
10018954:	d100      	bne.n	10018958 <__aeabi_dsub+0x37c>
10018956:	e0a2      	b.n	10018a9e <__aeabi_dsub+0x4c2>
10018958:	4274      	negs	r4, r6
1001895a:	46a1      	mov	r9, r4
1001895c:	2480      	movs	r4, #128	; 0x80
1001895e:	0424      	lsls	r4, r4, #16
10018960:	4327      	orrs	r7, r4
10018962:	464c      	mov	r4, r9
10018964:	2c38      	cmp	r4, #56	; 0x38
10018966:	dd00      	ble.n	1001896a <__aeabi_dsub+0x38e>
10018968:	e0db      	b.n	10018b22 <__aeabi_dsub+0x546>
1001896a:	2c1f      	cmp	r4, #31
1001896c:	dd00      	ble.n	10018970 <__aeabi_dsub+0x394>
1001896e:	e144      	b.n	10018bfa <__aeabi_dsub+0x61e>
10018970:	464e      	mov	r6, r9
10018972:	2420      	movs	r4, #32
10018974:	1ba4      	subs	r4, r4, r6
10018976:	003e      	movs	r6, r7
10018978:	40a6      	lsls	r6, r4
1001897a:	46a2      	mov	sl, r4
1001897c:	46b0      	mov	r8, r6
1001897e:	464c      	mov	r4, r9
10018980:	002e      	movs	r6, r5
10018982:	40e6      	lsrs	r6, r4
10018984:	46b4      	mov	ip, r6
10018986:	4646      	mov	r6, r8
10018988:	4664      	mov	r4, ip
1001898a:	4326      	orrs	r6, r4
1001898c:	4654      	mov	r4, sl
1001898e:	40a5      	lsls	r5, r4
10018990:	1e6c      	subs	r4, r5, #1
10018992:	41a5      	sbcs	r5, r4
10018994:	0034      	movs	r4, r6
10018996:	432c      	orrs	r4, r5
10018998:	464d      	mov	r5, r9
1001899a:	40ef      	lsrs	r7, r5
1001899c:	1b0d      	subs	r5, r1, r4
1001899e:	e028      	b.n	100189f2 <__aeabi_dsub+0x416>
100189a0:	464a      	mov	r2, r9
100189a2:	4643      	mov	r3, r8
100189a4:	464d      	mov	r5, r9
100189a6:	431a      	orrs	r2, r3
100189a8:	d000      	beq.n	100189ac <__aeabi_dsub+0x3d0>
100189aa:	e6a5      	b.n	100186f8 <__aeabi_dsub+0x11c>
100189ac:	2300      	movs	r3, #0
100189ae:	2400      	movs	r4, #0
100189b0:	2500      	movs	r5, #0
100189b2:	e6de      	b.n	10018772 <__aeabi_dsub+0x196>
100189b4:	2a1f      	cmp	r2, #31
100189b6:	dc5a      	bgt.n	10018a6e <__aeabi_dsub+0x492>
100189b8:	4666      	mov	r6, ip
100189ba:	2220      	movs	r2, #32
100189bc:	1b92      	subs	r2, r2, r6
100189be:	0006      	movs	r6, r0
100189c0:	4096      	lsls	r6, r2
100189c2:	4691      	mov	r9, r2
100189c4:	46b0      	mov	r8, r6
100189c6:	4662      	mov	r2, ip
100189c8:	000e      	movs	r6, r1
100189ca:	40d6      	lsrs	r6, r2
100189cc:	4642      	mov	r2, r8
100189ce:	4316      	orrs	r6, r2
100189d0:	464a      	mov	r2, r9
100189d2:	4091      	lsls	r1, r2
100189d4:	1e4a      	subs	r2, r1, #1
100189d6:	4191      	sbcs	r1, r2
100189d8:	0002      	movs	r2, r0
100189da:	4660      	mov	r0, ip
100189dc:	4331      	orrs	r1, r6
100189de:	40c2      	lsrs	r2, r0
100189e0:	e6e4      	b.n	100187ac <__aeabi_dsub+0x1d0>
100189e2:	003c      	movs	r4, r7
100189e4:	432c      	orrs	r4, r5
100189e6:	d05a      	beq.n	10018a9e <__aeabi_dsub+0x4c2>
100189e8:	43f4      	mvns	r4, r6
100189ea:	46a1      	mov	r9, r4
100189ec:	2c00      	cmp	r4, #0
100189ee:	d152      	bne.n	10018a96 <__aeabi_dsub+0x4ba>
100189f0:	1b4d      	subs	r5, r1, r5
100189f2:	42a9      	cmp	r1, r5
100189f4:	4189      	sbcs	r1, r1
100189f6:	1bc7      	subs	r7, r0, r7
100189f8:	4249      	negs	r1, r1
100189fa:	1a7f      	subs	r7, r7, r1
100189fc:	0014      	movs	r4, r2
100189fe:	469a      	mov	sl, r3
10018a00:	e675      	b.n	100186ee <__aeabi_dsub+0x112>
10018a02:	4a9e      	ldr	r2, [pc, #632]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018a04:	4294      	cmp	r4, r2
10018a06:	d000      	beq.n	10018a0a <__aeabi_dsub+0x42e>
10018a08:	e6c7      	b.n	1001879a <__aeabi_dsub+0x1be>
10018a0a:	e613      	b.n	10018634 <__aeabi_dsub+0x58>
10018a0c:	2200      	movs	r2, #0
10018a0e:	e77f      	b.n	10018910 <__aeabi_dsub+0x334>
10018a10:	2000      	movs	r0, #0
10018a12:	e78f      	b.n	10018934 <__aeabi_dsub+0x358>
10018a14:	2c00      	cmp	r4, #0
10018a16:	d000      	beq.n	10018a1a <__aeabi_dsub+0x43e>
10018a18:	e0c8      	b.n	10018bac <__aeabi_dsub+0x5d0>
10018a1a:	003b      	movs	r3, r7
10018a1c:	432b      	orrs	r3, r5
10018a1e:	d100      	bne.n	10018a22 <__aeabi_dsub+0x446>
10018a20:	e10f      	b.n	10018c42 <__aeabi_dsub+0x666>
10018a22:	0003      	movs	r3, r0
10018a24:	430b      	orrs	r3, r1
10018a26:	d100      	bne.n	10018a2a <__aeabi_dsub+0x44e>
10018a28:	e604      	b.n	10018634 <__aeabi_dsub+0x58>
10018a2a:	1869      	adds	r1, r5, r1
10018a2c:	42a9      	cmp	r1, r5
10018a2e:	419b      	sbcs	r3, r3
10018a30:	183f      	adds	r7, r7, r0
10018a32:	425b      	negs	r3, r3
10018a34:	19df      	adds	r7, r3, r7
10018a36:	023b      	lsls	r3, r7, #8
10018a38:	d400      	bmi.n	10018a3c <__aeabi_dsub+0x460>
10018a3a:	e11a      	b.n	10018c72 <__aeabi_dsub+0x696>
10018a3c:	4b90      	ldr	r3, [pc, #576]	; (10018c80 <__aeabi_dsub+0x6a4>)
10018a3e:	000d      	movs	r5, r1
10018a40:	401f      	ands	r7, r3
10018a42:	4664      	mov	r4, ip
10018a44:	e5f6      	b.n	10018634 <__aeabi_dsub+0x58>
10018a46:	469a      	mov	sl, r3
10018a48:	e689      	b.n	1001875e <__aeabi_dsub+0x182>
10018a4a:	003a      	movs	r2, r7
10018a4c:	432a      	orrs	r2, r5
10018a4e:	2c00      	cmp	r4, #0
10018a50:	d15c      	bne.n	10018b0c <__aeabi_dsub+0x530>
10018a52:	2a00      	cmp	r2, #0
10018a54:	d175      	bne.n	10018b42 <__aeabi_dsub+0x566>
10018a56:	0002      	movs	r2, r0
10018a58:	430a      	orrs	r2, r1
10018a5a:	d100      	bne.n	10018a5e <__aeabi_dsub+0x482>
10018a5c:	e0ca      	b.n	10018bf4 <__aeabi_dsub+0x618>
10018a5e:	0007      	movs	r7, r0
10018a60:	000d      	movs	r5, r1
10018a62:	469a      	mov	sl, r3
10018a64:	e5e6      	b.n	10018634 <__aeabi_dsub+0x58>
10018a66:	4664      	mov	r4, ip
10018a68:	2200      	movs	r2, #0
10018a6a:	2500      	movs	r5, #0
10018a6c:	e681      	b.n	10018772 <__aeabi_dsub+0x196>
10018a6e:	4662      	mov	r2, ip
10018a70:	0006      	movs	r6, r0
10018a72:	3a20      	subs	r2, #32
10018a74:	40d6      	lsrs	r6, r2
10018a76:	4662      	mov	r2, ip
10018a78:	46b0      	mov	r8, r6
10018a7a:	2a20      	cmp	r2, #32
10018a7c:	d100      	bne.n	10018a80 <__aeabi_dsub+0x4a4>
10018a7e:	e0b7      	b.n	10018bf0 <__aeabi_dsub+0x614>
10018a80:	2240      	movs	r2, #64	; 0x40
10018a82:	4666      	mov	r6, ip
10018a84:	1b92      	subs	r2, r2, r6
10018a86:	4090      	lsls	r0, r2
10018a88:	4301      	orrs	r1, r0
10018a8a:	4642      	mov	r2, r8
10018a8c:	1e48      	subs	r0, r1, #1
10018a8e:	4181      	sbcs	r1, r0
10018a90:	4311      	orrs	r1, r2
10018a92:	2200      	movs	r2, #0
10018a94:	e68a      	b.n	100187ac <__aeabi_dsub+0x1d0>
10018a96:	4c79      	ldr	r4, [pc, #484]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018a98:	42a2      	cmp	r2, r4
10018a9a:	d000      	beq.n	10018a9e <__aeabi_dsub+0x4c2>
10018a9c:	e761      	b.n	10018962 <__aeabi_dsub+0x386>
10018a9e:	0007      	movs	r7, r0
10018aa0:	000d      	movs	r5, r1
10018aa2:	0014      	movs	r4, r2
10018aa4:	469a      	mov	sl, r3
10018aa6:	e5c5      	b.n	10018634 <__aeabi_dsub+0x58>
10018aa8:	2c00      	cmp	r4, #0
10018aaa:	d141      	bne.n	10018b30 <__aeabi_dsub+0x554>
10018aac:	003c      	movs	r4, r7
10018aae:	432c      	orrs	r4, r5
10018ab0:	d078      	beq.n	10018ba4 <__aeabi_dsub+0x5c8>
10018ab2:	43f4      	mvns	r4, r6
10018ab4:	46a1      	mov	r9, r4
10018ab6:	2c00      	cmp	r4, #0
10018ab8:	d020      	beq.n	10018afc <__aeabi_dsub+0x520>
10018aba:	4c70      	ldr	r4, [pc, #448]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018abc:	42a2      	cmp	r2, r4
10018abe:	d071      	beq.n	10018ba4 <__aeabi_dsub+0x5c8>
10018ac0:	464c      	mov	r4, r9
10018ac2:	2c38      	cmp	r4, #56	; 0x38
10018ac4:	dd00      	ble.n	10018ac8 <__aeabi_dsub+0x4ec>
10018ac6:	e0b2      	b.n	10018c2e <__aeabi_dsub+0x652>
10018ac8:	2c1f      	cmp	r4, #31
10018aca:	dd00      	ble.n	10018ace <__aeabi_dsub+0x4f2>
10018acc:	e0bc      	b.n	10018c48 <__aeabi_dsub+0x66c>
10018ace:	2620      	movs	r6, #32
10018ad0:	1b34      	subs	r4, r6, r4
10018ad2:	46a2      	mov	sl, r4
10018ad4:	003c      	movs	r4, r7
10018ad6:	4656      	mov	r6, sl
10018ad8:	40b4      	lsls	r4, r6
10018ada:	464e      	mov	r6, r9
10018adc:	46a0      	mov	r8, r4
10018ade:	002c      	movs	r4, r5
10018ae0:	40f4      	lsrs	r4, r6
10018ae2:	46a4      	mov	ip, r4
10018ae4:	4644      	mov	r4, r8
10018ae6:	4666      	mov	r6, ip
10018ae8:	4334      	orrs	r4, r6
10018aea:	46a4      	mov	ip, r4
10018aec:	4654      	mov	r4, sl
10018aee:	40a5      	lsls	r5, r4
10018af0:	4664      	mov	r4, ip
10018af2:	1e6e      	subs	r6, r5, #1
10018af4:	41b5      	sbcs	r5, r6
10018af6:	4325      	orrs	r5, r4
10018af8:	464c      	mov	r4, r9
10018afa:	40e7      	lsrs	r7, r4
10018afc:	186d      	adds	r5, r5, r1
10018afe:	428d      	cmp	r5, r1
10018b00:	4189      	sbcs	r1, r1
10018b02:	183f      	adds	r7, r7, r0
10018b04:	4249      	negs	r1, r1
10018b06:	19cf      	adds	r7, r1, r7
10018b08:	0014      	movs	r4, r2
10018b0a:	e656      	b.n	100187ba <__aeabi_dsub+0x1de>
10018b0c:	2a00      	cmp	r2, #0
10018b0e:	d12f      	bne.n	10018b70 <__aeabi_dsub+0x594>
10018b10:	0002      	movs	r2, r0
10018b12:	430a      	orrs	r2, r1
10018b14:	d100      	bne.n	10018b18 <__aeabi_dsub+0x53c>
10018b16:	e084      	b.n	10018c22 <__aeabi_dsub+0x646>
10018b18:	0007      	movs	r7, r0
10018b1a:	000d      	movs	r5, r1
10018b1c:	469a      	mov	sl, r3
10018b1e:	4c57      	ldr	r4, [pc, #348]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018b20:	e588      	b.n	10018634 <__aeabi_dsub+0x58>
10018b22:	433d      	orrs	r5, r7
10018b24:	1e6f      	subs	r7, r5, #1
10018b26:	41bd      	sbcs	r5, r7
10018b28:	b2ec      	uxtb	r4, r5
10018b2a:	2700      	movs	r7, #0
10018b2c:	1b0d      	subs	r5, r1, r4
10018b2e:	e760      	b.n	100189f2 <__aeabi_dsub+0x416>
10018b30:	4c52      	ldr	r4, [pc, #328]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018b32:	42a2      	cmp	r2, r4
10018b34:	d036      	beq.n	10018ba4 <__aeabi_dsub+0x5c8>
10018b36:	4274      	negs	r4, r6
10018b38:	2680      	movs	r6, #128	; 0x80
10018b3a:	0436      	lsls	r6, r6, #16
10018b3c:	46a1      	mov	r9, r4
10018b3e:	4337      	orrs	r7, r6
10018b40:	e7be      	b.n	10018ac0 <__aeabi_dsub+0x4e4>
10018b42:	0002      	movs	r2, r0
10018b44:	430a      	orrs	r2, r1
10018b46:	d100      	bne.n	10018b4a <__aeabi_dsub+0x56e>
10018b48:	e574      	b.n	10018634 <__aeabi_dsub+0x58>
10018b4a:	1a6a      	subs	r2, r5, r1
10018b4c:	4690      	mov	r8, r2
10018b4e:	4545      	cmp	r5, r8
10018b50:	41b6      	sbcs	r6, r6
10018b52:	1a3a      	subs	r2, r7, r0
10018b54:	4276      	negs	r6, r6
10018b56:	1b92      	subs	r2, r2, r6
10018b58:	4694      	mov	ip, r2
10018b5a:	0212      	lsls	r2, r2, #8
10018b5c:	d400      	bmi.n	10018b60 <__aeabi_dsub+0x584>
10018b5e:	e5f7      	b.n	10018750 <__aeabi_dsub+0x174>
10018b60:	1b4d      	subs	r5, r1, r5
10018b62:	42a9      	cmp	r1, r5
10018b64:	4189      	sbcs	r1, r1
10018b66:	1bc7      	subs	r7, r0, r7
10018b68:	4249      	negs	r1, r1
10018b6a:	1a7f      	subs	r7, r7, r1
10018b6c:	469a      	mov	sl, r3
10018b6e:	e561      	b.n	10018634 <__aeabi_dsub+0x58>
10018b70:	0002      	movs	r2, r0
10018b72:	430a      	orrs	r2, r1
10018b74:	d03a      	beq.n	10018bec <__aeabi_dsub+0x610>
10018b76:	08ed      	lsrs	r5, r5, #3
10018b78:	077c      	lsls	r4, r7, #29
10018b7a:	432c      	orrs	r4, r5
10018b7c:	2580      	movs	r5, #128	; 0x80
10018b7e:	08fa      	lsrs	r2, r7, #3
10018b80:	032d      	lsls	r5, r5, #12
10018b82:	422a      	tst	r2, r5
10018b84:	d008      	beq.n	10018b98 <__aeabi_dsub+0x5bc>
10018b86:	08c7      	lsrs	r7, r0, #3
10018b88:	422f      	tst	r7, r5
10018b8a:	d105      	bne.n	10018b98 <__aeabi_dsub+0x5bc>
10018b8c:	0745      	lsls	r5, r0, #29
10018b8e:	002c      	movs	r4, r5
10018b90:	003a      	movs	r2, r7
10018b92:	469a      	mov	sl, r3
10018b94:	08c9      	lsrs	r1, r1, #3
10018b96:	430c      	orrs	r4, r1
10018b98:	0f67      	lsrs	r7, r4, #29
10018b9a:	00d2      	lsls	r2, r2, #3
10018b9c:	00e5      	lsls	r5, r4, #3
10018b9e:	4317      	orrs	r7, r2
10018ba0:	4c36      	ldr	r4, [pc, #216]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018ba2:	e547      	b.n	10018634 <__aeabi_dsub+0x58>
10018ba4:	0007      	movs	r7, r0
10018ba6:	000d      	movs	r5, r1
10018ba8:	0014      	movs	r4, r2
10018baa:	e543      	b.n	10018634 <__aeabi_dsub+0x58>
10018bac:	003a      	movs	r2, r7
10018bae:	432a      	orrs	r2, r5
10018bb0:	d043      	beq.n	10018c3a <__aeabi_dsub+0x65e>
10018bb2:	0002      	movs	r2, r0
10018bb4:	430a      	orrs	r2, r1
10018bb6:	d019      	beq.n	10018bec <__aeabi_dsub+0x610>
10018bb8:	08ed      	lsrs	r5, r5, #3
10018bba:	077c      	lsls	r4, r7, #29
10018bbc:	432c      	orrs	r4, r5
10018bbe:	2580      	movs	r5, #128	; 0x80
10018bc0:	08fa      	lsrs	r2, r7, #3
10018bc2:	032d      	lsls	r5, r5, #12
10018bc4:	422a      	tst	r2, r5
10018bc6:	d007      	beq.n	10018bd8 <__aeabi_dsub+0x5fc>
10018bc8:	08c6      	lsrs	r6, r0, #3
10018bca:	422e      	tst	r6, r5
10018bcc:	d104      	bne.n	10018bd8 <__aeabi_dsub+0x5fc>
10018bce:	0747      	lsls	r7, r0, #29
10018bd0:	003c      	movs	r4, r7
10018bd2:	0032      	movs	r2, r6
10018bd4:	08c9      	lsrs	r1, r1, #3
10018bd6:	430c      	orrs	r4, r1
10018bd8:	00d7      	lsls	r7, r2, #3
10018bda:	0f62      	lsrs	r2, r4, #29
10018bdc:	00e5      	lsls	r5, r4, #3
10018bde:	4317      	orrs	r7, r2
10018be0:	469a      	mov	sl, r3
10018be2:	4c26      	ldr	r4, [pc, #152]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018be4:	e526      	b.n	10018634 <__aeabi_dsub+0x58>
10018be6:	2200      	movs	r2, #0
10018be8:	2500      	movs	r5, #0
10018bea:	e544      	b.n	10018676 <__aeabi_dsub+0x9a>
10018bec:	4c23      	ldr	r4, [pc, #140]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018bee:	e521      	b.n	10018634 <__aeabi_dsub+0x58>
10018bf0:	2000      	movs	r0, #0
10018bf2:	e749      	b.n	10018a88 <__aeabi_dsub+0x4ac>
10018bf4:	2300      	movs	r3, #0
10018bf6:	2500      	movs	r5, #0
10018bf8:	e5bb      	b.n	10018772 <__aeabi_dsub+0x196>
10018bfa:	464c      	mov	r4, r9
10018bfc:	003e      	movs	r6, r7
10018bfe:	3c20      	subs	r4, #32
10018c00:	40e6      	lsrs	r6, r4
10018c02:	464c      	mov	r4, r9
10018c04:	46b4      	mov	ip, r6
10018c06:	2c20      	cmp	r4, #32
10018c08:	d031      	beq.n	10018c6e <__aeabi_dsub+0x692>
10018c0a:	2440      	movs	r4, #64	; 0x40
10018c0c:	464e      	mov	r6, r9
10018c0e:	1ba6      	subs	r6, r4, r6
10018c10:	40b7      	lsls	r7, r6
10018c12:	433d      	orrs	r5, r7
10018c14:	1e6c      	subs	r4, r5, #1
10018c16:	41a5      	sbcs	r5, r4
10018c18:	4664      	mov	r4, ip
10018c1a:	432c      	orrs	r4, r5
10018c1c:	2700      	movs	r7, #0
10018c1e:	1b0d      	subs	r5, r1, r4
10018c20:	e6e7      	b.n	100189f2 <__aeabi_dsub+0x416>
10018c22:	2280      	movs	r2, #128	; 0x80
10018c24:	2300      	movs	r3, #0
10018c26:	0312      	lsls	r2, r2, #12
10018c28:	4c14      	ldr	r4, [pc, #80]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018c2a:	2500      	movs	r5, #0
10018c2c:	e5a1      	b.n	10018772 <__aeabi_dsub+0x196>
10018c2e:	433d      	orrs	r5, r7
10018c30:	1e6f      	subs	r7, r5, #1
10018c32:	41bd      	sbcs	r5, r7
10018c34:	2700      	movs	r7, #0
10018c36:	b2ed      	uxtb	r5, r5
10018c38:	e760      	b.n	10018afc <__aeabi_dsub+0x520>
10018c3a:	0007      	movs	r7, r0
10018c3c:	000d      	movs	r5, r1
10018c3e:	4c0f      	ldr	r4, [pc, #60]	; (10018c7c <__aeabi_dsub+0x6a0>)
10018c40:	e4f8      	b.n	10018634 <__aeabi_dsub+0x58>
10018c42:	0007      	movs	r7, r0
10018c44:	000d      	movs	r5, r1
10018c46:	e4f5      	b.n	10018634 <__aeabi_dsub+0x58>
10018c48:	464e      	mov	r6, r9
10018c4a:	003c      	movs	r4, r7
10018c4c:	3e20      	subs	r6, #32
10018c4e:	40f4      	lsrs	r4, r6
10018c50:	46a0      	mov	r8, r4
10018c52:	464c      	mov	r4, r9
10018c54:	2c20      	cmp	r4, #32
10018c56:	d00e      	beq.n	10018c76 <__aeabi_dsub+0x69a>
10018c58:	2440      	movs	r4, #64	; 0x40
10018c5a:	464e      	mov	r6, r9
10018c5c:	1ba4      	subs	r4, r4, r6
10018c5e:	40a7      	lsls	r7, r4
10018c60:	433d      	orrs	r5, r7
10018c62:	1e6f      	subs	r7, r5, #1
10018c64:	41bd      	sbcs	r5, r7
10018c66:	4644      	mov	r4, r8
10018c68:	2700      	movs	r7, #0
10018c6a:	4325      	orrs	r5, r4
10018c6c:	e746      	b.n	10018afc <__aeabi_dsub+0x520>
10018c6e:	2700      	movs	r7, #0
10018c70:	e7cf      	b.n	10018c12 <__aeabi_dsub+0x636>
10018c72:	000d      	movs	r5, r1
10018c74:	e573      	b.n	1001875e <__aeabi_dsub+0x182>
10018c76:	2700      	movs	r7, #0
10018c78:	e7f2      	b.n	10018c60 <__aeabi_dsub+0x684>
10018c7a:	46c0      	nop			; (mov r8, r8)
10018c7c:	000007ff 	.word	0x000007ff
10018c80:	ff7fffff 	.word	0xff7fffff

10018c84 <__aeabi_d2iz>:
10018c84:	030b      	lsls	r3, r1, #12
10018c86:	b530      	push	{r4, r5, lr}
10018c88:	4d13      	ldr	r5, [pc, #76]	; (10018cd8 <__aeabi_d2iz+0x54>)
10018c8a:	0b1a      	lsrs	r2, r3, #12
10018c8c:	004b      	lsls	r3, r1, #1
10018c8e:	0d5b      	lsrs	r3, r3, #21
10018c90:	0fc9      	lsrs	r1, r1, #31
10018c92:	2400      	movs	r4, #0
10018c94:	42ab      	cmp	r3, r5
10018c96:	dd11      	ble.n	10018cbc <__aeabi_d2iz+0x38>
10018c98:	4c10      	ldr	r4, [pc, #64]	; (10018cdc <__aeabi_d2iz+0x58>)
10018c9a:	42a3      	cmp	r3, r4
10018c9c:	dc10      	bgt.n	10018cc0 <__aeabi_d2iz+0x3c>
10018c9e:	2480      	movs	r4, #128	; 0x80
10018ca0:	0364      	lsls	r4, r4, #13
10018ca2:	4322      	orrs	r2, r4
10018ca4:	4c0e      	ldr	r4, [pc, #56]	; (10018ce0 <__aeabi_d2iz+0x5c>)
10018ca6:	1ae4      	subs	r4, r4, r3
10018ca8:	2c1f      	cmp	r4, #31
10018caa:	dd0c      	ble.n	10018cc6 <__aeabi_d2iz+0x42>
10018cac:	480d      	ldr	r0, [pc, #52]	; (10018ce4 <__aeabi_d2iz+0x60>)
10018cae:	1ac3      	subs	r3, r0, r3
10018cb0:	40da      	lsrs	r2, r3
10018cb2:	0013      	movs	r3, r2
10018cb4:	425c      	negs	r4, r3
10018cb6:	2900      	cmp	r1, #0
10018cb8:	d100      	bne.n	10018cbc <__aeabi_d2iz+0x38>
10018cba:	001c      	movs	r4, r3
10018cbc:	0020      	movs	r0, r4
10018cbe:	bd30      	pop	{r4, r5, pc}
10018cc0:	4b09      	ldr	r3, [pc, #36]	; (10018ce8 <__aeabi_d2iz+0x64>)
10018cc2:	18cc      	adds	r4, r1, r3
10018cc4:	e7fa      	b.n	10018cbc <__aeabi_d2iz+0x38>
10018cc6:	40e0      	lsrs	r0, r4
10018cc8:	4c08      	ldr	r4, [pc, #32]	; (10018cec <__aeabi_d2iz+0x68>)
10018cca:	46a4      	mov	ip, r4
10018ccc:	4463      	add	r3, ip
10018cce:	409a      	lsls	r2, r3
10018cd0:	0013      	movs	r3, r2
10018cd2:	4303      	orrs	r3, r0
10018cd4:	e7ee      	b.n	10018cb4 <__aeabi_d2iz+0x30>
10018cd6:	46c0      	nop			; (mov r8, r8)
10018cd8:	000003fe 	.word	0x000003fe
10018cdc:	0000041d 	.word	0x0000041d
10018ce0:	00000433 	.word	0x00000433
10018ce4:	00000413 	.word	0x00000413
10018ce8:	7fffffff 	.word	0x7fffffff
10018cec:	fffffbed 	.word	0xfffffbed

10018cf0 <__aeabi_ui2d>:
10018cf0:	b570      	push	{r4, r5, r6, lr}
10018cf2:	1e05      	subs	r5, r0, #0
10018cf4:	d028      	beq.n	10018d48 <__aeabi_ui2d+0x58>
10018cf6:	f000 f833 	bl	10018d60 <__clzsi2>
10018cfa:	4b15      	ldr	r3, [pc, #84]	; (10018d50 <__aeabi_ui2d+0x60>)
10018cfc:	4a15      	ldr	r2, [pc, #84]	; (10018d54 <__aeabi_ui2d+0x64>)
10018cfe:	1a1b      	subs	r3, r3, r0
10018d00:	1ad2      	subs	r2, r2, r3
10018d02:	2a1f      	cmp	r2, #31
10018d04:	dd16      	ble.n	10018d34 <__aeabi_ui2d+0x44>
10018d06:	002c      	movs	r4, r5
10018d08:	4a13      	ldr	r2, [pc, #76]	; (10018d58 <__aeabi_ui2d+0x68>)
10018d0a:	2500      	movs	r5, #0
10018d0c:	1ad2      	subs	r2, r2, r3
10018d0e:	4094      	lsls	r4, r2
10018d10:	055a      	lsls	r2, r3, #21
10018d12:	0324      	lsls	r4, r4, #12
10018d14:	0b24      	lsrs	r4, r4, #12
10018d16:	0d52      	lsrs	r2, r2, #21
10018d18:	2100      	movs	r1, #0
10018d1a:	0324      	lsls	r4, r4, #12
10018d1c:	0d0b      	lsrs	r3, r1, #20
10018d1e:	0b24      	lsrs	r4, r4, #12
10018d20:	051b      	lsls	r3, r3, #20
10018d22:	4323      	orrs	r3, r4
10018d24:	4c0d      	ldr	r4, [pc, #52]	; (10018d5c <__aeabi_ui2d+0x6c>)
10018d26:	0512      	lsls	r2, r2, #20
10018d28:	4023      	ands	r3, r4
10018d2a:	4313      	orrs	r3, r2
10018d2c:	005b      	lsls	r3, r3, #1
10018d2e:	0028      	movs	r0, r5
10018d30:	0859      	lsrs	r1, r3, #1
10018d32:	bd70      	pop	{r4, r5, r6, pc}
10018d34:	210b      	movs	r1, #11
10018d36:	002c      	movs	r4, r5
10018d38:	1a08      	subs	r0, r1, r0
10018d3a:	40c4      	lsrs	r4, r0
10018d3c:	4095      	lsls	r5, r2
10018d3e:	0324      	lsls	r4, r4, #12
10018d40:	055a      	lsls	r2, r3, #21
10018d42:	0b24      	lsrs	r4, r4, #12
10018d44:	0d52      	lsrs	r2, r2, #21
10018d46:	e7e7      	b.n	10018d18 <__aeabi_ui2d+0x28>
10018d48:	2200      	movs	r2, #0
10018d4a:	2400      	movs	r4, #0
10018d4c:	e7e4      	b.n	10018d18 <__aeabi_ui2d+0x28>
10018d4e:	46c0      	nop			; (mov r8, r8)
10018d50:	0000041e 	.word	0x0000041e
10018d54:	00000433 	.word	0x00000433
10018d58:	00000413 	.word	0x00000413
10018d5c:	800fffff 	.word	0x800fffff

10018d60 <__clzsi2>:
10018d60:	211c      	movs	r1, #28
10018d62:	2301      	movs	r3, #1
10018d64:	041b      	lsls	r3, r3, #16
10018d66:	4298      	cmp	r0, r3
10018d68:	d301      	bcc.n	10018d6e <__clzsi2+0xe>
10018d6a:	0c00      	lsrs	r0, r0, #16
10018d6c:	3910      	subs	r1, #16
10018d6e:	0a1b      	lsrs	r3, r3, #8
10018d70:	4298      	cmp	r0, r3
10018d72:	d301      	bcc.n	10018d78 <__clzsi2+0x18>
10018d74:	0a00      	lsrs	r0, r0, #8
10018d76:	3908      	subs	r1, #8
10018d78:	091b      	lsrs	r3, r3, #4
10018d7a:	4298      	cmp	r0, r3
10018d7c:	d301      	bcc.n	10018d82 <__clzsi2+0x22>
10018d7e:	0900      	lsrs	r0, r0, #4
10018d80:	3904      	subs	r1, #4
10018d82:	a202      	add	r2, pc, #8	; (adr r2, 10018d8c <__clzsi2+0x2c>)
10018d84:	5c10      	ldrb	r0, [r2, r0]
10018d86:	1840      	adds	r0, r0, r1
10018d88:	4770      	bx	lr
10018d8a:	46c0      	nop			; (mov r8, r8)
10018d8c:	02020304 	.word	0x02020304
10018d90:	01010101 	.word	0x01010101
	...

10018d9c <__libc_init_array>:
10018d9c:	4b0e      	ldr	r3, [pc, #56]	; (10018dd8 <__libc_init_array+0x3c>)
10018d9e:	b570      	push	{r4, r5, r6, lr}
10018da0:	2500      	movs	r5, #0
10018da2:	001e      	movs	r6, r3
10018da4:	4c0d      	ldr	r4, [pc, #52]	; (10018ddc <__libc_init_array+0x40>)
10018da6:	1ae4      	subs	r4, r4, r3
10018da8:	10a4      	asrs	r4, r4, #2
10018daa:	42a5      	cmp	r5, r4
10018dac:	d004      	beq.n	10018db8 <__libc_init_array+0x1c>
10018dae:	00ab      	lsls	r3, r5, #2
10018db0:	58f3      	ldr	r3, [r6, r3]
10018db2:	4798      	blx	r3
10018db4:	3501      	adds	r5, #1
10018db6:	e7f8      	b.n	10018daa <__libc_init_array+0xe>
10018db8:	f002 fd34 	bl	1001b824 <_init>
10018dbc:	4b08      	ldr	r3, [pc, #32]	; (10018de0 <__libc_init_array+0x44>)
10018dbe:	2500      	movs	r5, #0
10018dc0:	001e      	movs	r6, r3
10018dc2:	4c08      	ldr	r4, [pc, #32]	; (10018de4 <__libc_init_array+0x48>)
10018dc4:	1ae4      	subs	r4, r4, r3
10018dc6:	10a4      	asrs	r4, r4, #2
10018dc8:	42a5      	cmp	r5, r4
10018dca:	d004      	beq.n	10018dd6 <__libc_init_array+0x3a>
10018dcc:	00ab      	lsls	r3, r5, #2
10018dce:	58f3      	ldr	r3, [r6, r3]
10018dd0:	4798      	blx	r3
10018dd2:	3501      	adds	r5, #1
10018dd4:	e7f8      	b.n	10018dc8 <__libc_init_array+0x2c>
10018dd6:	bd70      	pop	{r4, r5, r6, pc}
10018dd8:	1001b830 	.word	0x1001b830
10018ddc:	1001b830 	.word	0x1001b830
10018de0:	1001b830 	.word	0x1001b830
10018de4:	1001b834 	.word	0x1001b834

10018de8 <malloc>:
10018de8:	b510      	push	{r4, lr}
10018dea:	4b03      	ldr	r3, [pc, #12]	; (10018df8 <malloc+0x10>)
10018dec:	0001      	movs	r1, r0
10018dee:	6818      	ldr	r0, [r3, #0]
10018df0:	f000 f86a 	bl	10018ec8 <_malloc_r>
10018df4:	bd10      	pop	{r4, pc}
10018df6:	46c0      	nop			; (mov r8, r8)
10018df8:	1001b8f4 	.word	0x1001b8f4

10018dfc <memcmp>:
10018dfc:	b530      	push	{r4, r5, lr}
10018dfe:	2400      	movs	r4, #0
10018e00:	42a2      	cmp	r2, r4
10018e02:	d008      	beq.n	10018e16 <memcmp+0x1a>
10018e04:	5d03      	ldrb	r3, [r0, r4]
10018e06:	1c65      	adds	r5, r4, #1
10018e08:	5d0c      	ldrb	r4, [r1, r4]
10018e0a:	42a3      	cmp	r3, r4
10018e0c:	d001      	beq.n	10018e12 <memcmp+0x16>
10018e0e:	1b18      	subs	r0, r3, r4
10018e10:	e002      	b.n	10018e18 <memcmp+0x1c>
10018e12:	002c      	movs	r4, r5
10018e14:	e7f4      	b.n	10018e00 <memcmp+0x4>
10018e16:	2000      	movs	r0, #0
10018e18:	bd30      	pop	{r4, r5, pc}

10018e1a <memcpy>:
10018e1a:	2300      	movs	r3, #0
10018e1c:	b510      	push	{r4, lr}
10018e1e:	429a      	cmp	r2, r3
10018e20:	d003      	beq.n	10018e2a <memcpy+0x10>
10018e22:	5ccc      	ldrb	r4, [r1, r3]
10018e24:	54c4      	strb	r4, [r0, r3]
10018e26:	3301      	adds	r3, #1
10018e28:	e7f9      	b.n	10018e1e <memcpy+0x4>
10018e2a:	bd10      	pop	{r4, pc}

10018e2c <memset>:
10018e2c:	0003      	movs	r3, r0
10018e2e:	1882      	adds	r2, r0, r2
10018e30:	4293      	cmp	r3, r2
10018e32:	d002      	beq.n	10018e3a <memset+0xe>
10018e34:	7019      	strb	r1, [r3, #0]
10018e36:	3301      	adds	r3, #1
10018e38:	e7fa      	b.n	10018e30 <memset+0x4>
10018e3a:	4770      	bx	lr

10018e3c <_free_r>:
10018e3c:	b530      	push	{r4, r5, lr}
10018e3e:	2900      	cmp	r1, #0
10018e40:	d03e      	beq.n	10018ec0 <_free_r+0x84>
10018e42:	3904      	subs	r1, #4
10018e44:	680b      	ldr	r3, [r1, #0]
10018e46:	2b00      	cmp	r3, #0
10018e48:	da00      	bge.n	10018e4c <_free_r+0x10>
10018e4a:	18c9      	adds	r1, r1, r3
10018e4c:	4a1d      	ldr	r2, [pc, #116]	; (10018ec4 <_free_r+0x88>)
10018e4e:	6813      	ldr	r3, [r2, #0]
10018e50:	0014      	movs	r4, r2
10018e52:	2b00      	cmp	r3, #0
10018e54:	d102      	bne.n	10018e5c <_free_r+0x20>
10018e56:	604b      	str	r3, [r1, #4]
10018e58:	6011      	str	r1, [r2, #0]
10018e5a:	e031      	b.n	10018ec0 <_free_r+0x84>
10018e5c:	428b      	cmp	r3, r1
10018e5e:	d90d      	bls.n	10018e7c <_free_r+0x40>
10018e60:	680a      	ldr	r2, [r1, #0]
10018e62:	1888      	adds	r0, r1, r2
10018e64:	4283      	cmp	r3, r0
10018e66:	d103      	bne.n	10018e70 <_free_r+0x34>
10018e68:	6818      	ldr	r0, [r3, #0]
10018e6a:	685b      	ldr	r3, [r3, #4]
10018e6c:	1882      	adds	r2, r0, r2
10018e6e:	600a      	str	r2, [r1, #0]
10018e70:	604b      	str	r3, [r1, #4]
10018e72:	6021      	str	r1, [r4, #0]
10018e74:	e024      	b.n	10018ec0 <_free_r+0x84>
10018e76:	428a      	cmp	r2, r1
10018e78:	d803      	bhi.n	10018e82 <_free_r+0x46>
10018e7a:	0013      	movs	r3, r2
10018e7c:	685a      	ldr	r2, [r3, #4]
10018e7e:	2a00      	cmp	r2, #0
10018e80:	d1f9      	bne.n	10018e76 <_free_r+0x3a>
10018e82:	681d      	ldr	r5, [r3, #0]
10018e84:	195c      	adds	r4, r3, r5
10018e86:	428c      	cmp	r4, r1
10018e88:	d10b      	bne.n	10018ea2 <_free_r+0x66>
10018e8a:	6809      	ldr	r1, [r1, #0]
10018e8c:	1869      	adds	r1, r5, r1
10018e8e:	1858      	adds	r0, r3, r1
10018e90:	6019      	str	r1, [r3, #0]
10018e92:	4282      	cmp	r2, r0
10018e94:	d114      	bne.n	10018ec0 <_free_r+0x84>
10018e96:	6810      	ldr	r0, [r2, #0]
10018e98:	6852      	ldr	r2, [r2, #4]
10018e9a:	1841      	adds	r1, r0, r1
10018e9c:	6019      	str	r1, [r3, #0]
10018e9e:	605a      	str	r2, [r3, #4]
10018ea0:	e00e      	b.n	10018ec0 <_free_r+0x84>
10018ea2:	428c      	cmp	r4, r1
10018ea4:	d902      	bls.n	10018eac <_free_r+0x70>
10018ea6:	230c      	movs	r3, #12
10018ea8:	6003      	str	r3, [r0, #0]
10018eaa:	e009      	b.n	10018ec0 <_free_r+0x84>
10018eac:	6808      	ldr	r0, [r1, #0]
10018eae:	180c      	adds	r4, r1, r0
10018eb0:	42a2      	cmp	r2, r4
10018eb2:	d103      	bne.n	10018ebc <_free_r+0x80>
10018eb4:	6814      	ldr	r4, [r2, #0]
10018eb6:	6852      	ldr	r2, [r2, #4]
10018eb8:	1820      	adds	r0, r4, r0
10018eba:	6008      	str	r0, [r1, #0]
10018ebc:	604a      	str	r2, [r1, #4]
10018ebe:	6059      	str	r1, [r3, #4]
10018ec0:	bd30      	pop	{r4, r5, pc}
10018ec2:	46c0      	nop			; (mov r8, r8)
10018ec4:	1001c0a4 	.word	0x1001c0a4

10018ec8 <_malloc_r>:
10018ec8:	2303      	movs	r3, #3
10018eca:	b570      	push	{r4, r5, r6, lr}
10018ecc:	1ccd      	adds	r5, r1, #3
10018ece:	439d      	bics	r5, r3
10018ed0:	3508      	adds	r5, #8
10018ed2:	0006      	movs	r6, r0
10018ed4:	2d0c      	cmp	r5, #12
10018ed6:	d201      	bcs.n	10018edc <_malloc_r+0x14>
10018ed8:	250c      	movs	r5, #12
10018eda:	e005      	b.n	10018ee8 <_malloc_r+0x20>
10018edc:	2d00      	cmp	r5, #0
10018ede:	da03      	bge.n	10018ee8 <_malloc_r+0x20>
10018ee0:	230c      	movs	r3, #12
10018ee2:	2000      	movs	r0, #0
10018ee4:	6033      	str	r3, [r6, #0]
10018ee6:	e040      	b.n	10018f6a <_malloc_r+0xa2>
10018ee8:	42a9      	cmp	r1, r5
10018eea:	d8f9      	bhi.n	10018ee0 <_malloc_r+0x18>
10018eec:	4b1f      	ldr	r3, [pc, #124]	; (10018f6c <_malloc_r+0xa4>)
10018eee:	681c      	ldr	r4, [r3, #0]
10018ef0:	001a      	movs	r2, r3
10018ef2:	0021      	movs	r1, r4
10018ef4:	2900      	cmp	r1, #0
10018ef6:	d013      	beq.n	10018f20 <_malloc_r+0x58>
10018ef8:	680b      	ldr	r3, [r1, #0]
10018efa:	1b5b      	subs	r3, r3, r5
10018efc:	d40d      	bmi.n	10018f1a <_malloc_r+0x52>
10018efe:	2b0b      	cmp	r3, #11
10018f00:	d902      	bls.n	10018f08 <_malloc_r+0x40>
10018f02:	600b      	str	r3, [r1, #0]
10018f04:	18cc      	adds	r4, r1, r3
10018f06:	e01e      	b.n	10018f46 <_malloc_r+0x7e>
10018f08:	428c      	cmp	r4, r1
10018f0a:	d102      	bne.n	10018f12 <_malloc_r+0x4a>
10018f0c:	6863      	ldr	r3, [r4, #4]
10018f0e:	6013      	str	r3, [r2, #0]
10018f10:	e01a      	b.n	10018f48 <_malloc_r+0x80>
10018f12:	684b      	ldr	r3, [r1, #4]
10018f14:	6063      	str	r3, [r4, #4]
10018f16:	000c      	movs	r4, r1
10018f18:	e016      	b.n	10018f48 <_malloc_r+0x80>
10018f1a:	000c      	movs	r4, r1
10018f1c:	6849      	ldr	r1, [r1, #4]
10018f1e:	e7e9      	b.n	10018ef4 <_malloc_r+0x2c>
10018f20:	4c13      	ldr	r4, [pc, #76]	; (10018f70 <_malloc_r+0xa8>)
10018f22:	6823      	ldr	r3, [r4, #0]
10018f24:	2b00      	cmp	r3, #0
10018f26:	d103      	bne.n	10018f30 <_malloc_r+0x68>
10018f28:	0030      	movs	r0, r6
10018f2a:	f000 f8f9 	bl	10019120 <_sbrk_r>
10018f2e:	6020      	str	r0, [r4, #0]
10018f30:	0029      	movs	r1, r5
10018f32:	0030      	movs	r0, r6
10018f34:	f000 f8f4 	bl	10019120 <_sbrk_r>
10018f38:	1c43      	adds	r3, r0, #1
10018f3a:	d0d1      	beq.n	10018ee0 <_malloc_r+0x18>
10018f3c:	2303      	movs	r3, #3
10018f3e:	1cc4      	adds	r4, r0, #3
10018f40:	439c      	bics	r4, r3
10018f42:	42a0      	cmp	r0, r4
10018f44:	d10a      	bne.n	10018f5c <_malloc_r+0x94>
10018f46:	6025      	str	r5, [r4, #0]
10018f48:	0020      	movs	r0, r4
10018f4a:	2207      	movs	r2, #7
10018f4c:	300b      	adds	r0, #11
10018f4e:	1d23      	adds	r3, r4, #4
10018f50:	4390      	bics	r0, r2
10018f52:	1ac3      	subs	r3, r0, r3
10018f54:	d009      	beq.n	10018f6a <_malloc_r+0xa2>
10018f56:	425a      	negs	r2, r3
10018f58:	50e2      	str	r2, [r4, r3]
10018f5a:	e006      	b.n	10018f6a <_malloc_r+0xa2>
10018f5c:	1a21      	subs	r1, r4, r0
10018f5e:	0030      	movs	r0, r6
10018f60:	f000 f8de 	bl	10019120 <_sbrk_r>
10018f64:	1c43      	adds	r3, r0, #1
10018f66:	d1ee      	bne.n	10018f46 <_malloc_r+0x7e>
10018f68:	e7ba      	b.n	10018ee0 <_malloc_r+0x18>
10018f6a:	bd70      	pop	{r4, r5, r6, pc}
10018f6c:	1001c0a4 	.word	0x1001c0a4
10018f70:	1001c0a0 	.word	0x1001c0a0

10018f74 <iprintf>:
10018f74:	b40f      	push	{r0, r1, r2, r3}
10018f76:	4b0b      	ldr	r3, [pc, #44]	; (10018fa4 <iprintf+0x30>)
10018f78:	b513      	push	{r0, r1, r4, lr}
10018f7a:	681c      	ldr	r4, [r3, #0]
10018f7c:	2c00      	cmp	r4, #0
10018f7e:	d005      	beq.n	10018f8c <iprintf+0x18>
10018f80:	69a3      	ldr	r3, [r4, #24]
10018f82:	2b00      	cmp	r3, #0
10018f84:	d102      	bne.n	10018f8c <iprintf+0x18>
10018f86:	0020      	movs	r0, r4
10018f88:	f000 fb60 	bl	1001964c <__sinit>
10018f8c:	ab05      	add	r3, sp, #20
10018f8e:	9a04      	ldr	r2, [sp, #16]
10018f90:	68a1      	ldr	r1, [r4, #8]
10018f92:	0020      	movs	r0, r4
10018f94:	9301      	str	r3, [sp, #4]
10018f96:	f000 fc79 	bl	1001988c <_vfiprintf_r>
10018f9a:	bc16      	pop	{r1, r2, r4}
10018f9c:	bc08      	pop	{r3}
10018f9e:	b004      	add	sp, #16
10018fa0:	4718      	bx	r3
10018fa2:	46c0      	nop			; (mov r8, r8)
10018fa4:	1001b8f4 	.word	0x1001b8f4

10018fa8 <putchar>:
10018fa8:	4b08      	ldr	r3, [pc, #32]	; (10018fcc <putchar+0x24>)
10018faa:	b570      	push	{r4, r5, r6, lr}
10018fac:	681c      	ldr	r4, [r3, #0]
10018fae:	0005      	movs	r5, r0
10018fb0:	2c00      	cmp	r4, #0
10018fb2:	d005      	beq.n	10018fc0 <putchar+0x18>
10018fb4:	69a3      	ldr	r3, [r4, #24]
10018fb6:	2b00      	cmp	r3, #0
10018fb8:	d102      	bne.n	10018fc0 <putchar+0x18>
10018fba:	0020      	movs	r0, r4
10018fbc:	f000 fb46 	bl	1001964c <__sinit>
10018fc0:	0029      	movs	r1, r5
10018fc2:	68a2      	ldr	r2, [r4, #8]
10018fc4:	0020      	movs	r0, r4
10018fc6:	f000 ff0d 	bl	10019de4 <_putc_r>
10018fca:	bd70      	pop	{r4, r5, r6, pc}
10018fcc:	1001b8f4 	.word	0x1001b8f4

10018fd0 <_puts_r>:
10018fd0:	b570      	push	{r4, r5, r6, lr}
10018fd2:	0005      	movs	r5, r0
10018fd4:	000e      	movs	r6, r1
10018fd6:	2800      	cmp	r0, #0
10018fd8:	d004      	beq.n	10018fe4 <_puts_r+0x14>
10018fda:	6983      	ldr	r3, [r0, #24]
10018fdc:	2b00      	cmp	r3, #0
10018fde:	d101      	bne.n	10018fe4 <_puts_r+0x14>
10018fe0:	f000 fb34 	bl	1001964c <__sinit>
10018fe4:	69ab      	ldr	r3, [r5, #24]
10018fe6:	68ac      	ldr	r4, [r5, #8]
10018fe8:	2b00      	cmp	r3, #0
10018fea:	d102      	bne.n	10018ff2 <_puts_r+0x22>
10018fec:	0028      	movs	r0, r5
10018fee:	f000 fb2d 	bl	1001964c <__sinit>
10018ff2:	4b25      	ldr	r3, [pc, #148]	; (10019088 <_puts_r+0xb8>)
10018ff4:	429c      	cmp	r4, r3
10018ff6:	d101      	bne.n	10018ffc <_puts_r+0x2c>
10018ff8:	686c      	ldr	r4, [r5, #4]
10018ffa:	e008      	b.n	1001900e <_puts_r+0x3e>
10018ffc:	4b23      	ldr	r3, [pc, #140]	; (1001908c <_puts_r+0xbc>)
10018ffe:	429c      	cmp	r4, r3
10019000:	d101      	bne.n	10019006 <_puts_r+0x36>
10019002:	68ac      	ldr	r4, [r5, #8]
10019004:	e003      	b.n	1001900e <_puts_r+0x3e>
10019006:	4b22      	ldr	r3, [pc, #136]	; (10019090 <_puts_r+0xc0>)
10019008:	429c      	cmp	r4, r3
1001900a:	d100      	bne.n	1001900e <_puts_r+0x3e>
1001900c:	68ec      	ldr	r4, [r5, #12]
1001900e:	89a3      	ldrh	r3, [r4, #12]
10019010:	071b      	lsls	r3, r3, #28
10019012:	d502      	bpl.n	1001901a <_puts_r+0x4a>
10019014:	6923      	ldr	r3, [r4, #16]
10019016:	2b00      	cmp	r3, #0
10019018:	d111      	bne.n	1001903e <_puts_r+0x6e>
1001901a:	0021      	movs	r1, r4
1001901c:	0028      	movs	r0, r5
1001901e:	f000 f9ab 	bl	10019378 <__swsetup_r>
10019022:	2800      	cmp	r0, #0
10019024:	d00b      	beq.n	1001903e <_puts_r+0x6e>
10019026:	2001      	movs	r0, #1
10019028:	4240      	negs	r0, r0
1001902a:	e02b      	b.n	10019084 <_puts_r+0xb4>
1001902c:	3b01      	subs	r3, #1
1001902e:	3601      	adds	r6, #1
10019030:	60a3      	str	r3, [r4, #8]
10019032:	2b00      	cmp	r3, #0
10019034:	db08      	blt.n	10019048 <_puts_r+0x78>
10019036:	6823      	ldr	r3, [r4, #0]
10019038:	1c5a      	adds	r2, r3, #1
1001903a:	6022      	str	r2, [r4, #0]
1001903c:	7019      	strb	r1, [r3, #0]
1001903e:	7831      	ldrb	r1, [r6, #0]
10019040:	68a3      	ldr	r3, [r4, #8]
10019042:	2900      	cmp	r1, #0
10019044:	d1f2      	bne.n	1001902c <_puts_r+0x5c>
10019046:	e00b      	b.n	10019060 <_puts_r+0x90>
10019048:	69a2      	ldr	r2, [r4, #24]
1001904a:	4293      	cmp	r3, r2
1001904c:	db01      	blt.n	10019052 <_puts_r+0x82>
1001904e:	290a      	cmp	r1, #10
10019050:	d1f1      	bne.n	10019036 <_puts_r+0x66>
10019052:	0022      	movs	r2, r4
10019054:	0028      	movs	r0, r5
10019056:	f000 f937 	bl	100192c8 <__swbuf_r>
1001905a:	1c43      	adds	r3, r0, #1
1001905c:	d1ef      	bne.n	1001903e <_puts_r+0x6e>
1001905e:	e7e2      	b.n	10019026 <_puts_r+0x56>
10019060:	3b01      	subs	r3, #1
10019062:	60a3      	str	r3, [r4, #8]
10019064:	2b00      	cmp	r3, #0
10019066:	da08      	bge.n	1001907a <_puts_r+0xaa>
10019068:	0022      	movs	r2, r4
1001906a:	310a      	adds	r1, #10
1001906c:	0028      	movs	r0, r5
1001906e:	f000 f92b 	bl	100192c8 <__swbuf_r>
10019072:	1c43      	adds	r3, r0, #1
10019074:	d0d7      	beq.n	10019026 <_puts_r+0x56>
10019076:	200a      	movs	r0, #10
10019078:	e004      	b.n	10019084 <_puts_r+0xb4>
1001907a:	200a      	movs	r0, #10
1001907c:	6823      	ldr	r3, [r4, #0]
1001907e:	1c5a      	adds	r2, r3, #1
10019080:	6022      	str	r2, [r4, #0]
10019082:	7018      	strb	r0, [r3, #0]
10019084:	bd70      	pop	{r4, r5, r6, pc}
10019086:	46c0      	nop			; (mov r8, r8)
10019088:	1001b790 	.word	0x1001b790
1001908c:	1001b7b0 	.word	0x1001b7b0
10019090:	1001b7d0 	.word	0x1001b7d0

10019094 <puts>:
10019094:	b510      	push	{r4, lr}
10019096:	4b03      	ldr	r3, [pc, #12]	; (100190a4 <puts+0x10>)
10019098:	0001      	movs	r1, r0
1001909a:	6818      	ldr	r0, [r3, #0]
1001909c:	f7ff ff98 	bl	10018fd0 <_puts_r>
100190a0:	bd10      	pop	{r4, pc}
100190a2:	46c0      	nop			; (mov r8, r8)
100190a4:	1001b8f4 	.word	0x1001b8f4

100190a8 <rand>:
100190a8:	4b15      	ldr	r3, [pc, #84]	; (10019100 <rand+0x58>)
100190aa:	b510      	push	{r4, lr}
100190ac:	681c      	ldr	r4, [r3, #0]
100190ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100190b0:	2b00      	cmp	r3, #0
100190b2:	d115      	bne.n	100190e0 <rand+0x38>
100190b4:	2018      	movs	r0, #24
100190b6:	f7ff fe97 	bl	10018de8 <malloc>
100190ba:	4b12      	ldr	r3, [pc, #72]	; (10019104 <rand+0x5c>)
100190bc:	63a0      	str	r0, [r4, #56]	; 0x38
100190be:	8003      	strh	r3, [r0, #0]
100190c0:	4b11      	ldr	r3, [pc, #68]	; (10019108 <rand+0x60>)
100190c2:	2201      	movs	r2, #1
100190c4:	8043      	strh	r3, [r0, #2]
100190c6:	4b11      	ldr	r3, [pc, #68]	; (1001910c <rand+0x64>)
100190c8:	8083      	strh	r3, [r0, #4]
100190ca:	4b11      	ldr	r3, [pc, #68]	; (10019110 <rand+0x68>)
100190cc:	80c3      	strh	r3, [r0, #6]
100190ce:	4b11      	ldr	r3, [pc, #68]	; (10019114 <rand+0x6c>)
100190d0:	8103      	strh	r3, [r0, #8]
100190d2:	2305      	movs	r3, #5
100190d4:	8143      	strh	r3, [r0, #10]
100190d6:	3306      	adds	r3, #6
100190d8:	8183      	strh	r3, [r0, #12]
100190da:	2300      	movs	r3, #0
100190dc:	6102      	str	r2, [r0, #16]
100190de:	6143      	str	r3, [r0, #20]
100190e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100190e2:	4a0d      	ldr	r2, [pc, #52]	; (10019118 <rand+0x70>)
100190e4:	6920      	ldr	r0, [r4, #16]
100190e6:	6961      	ldr	r1, [r4, #20]
100190e8:	4b0c      	ldr	r3, [pc, #48]	; (1001911c <rand+0x74>)
100190ea:	f7fe f9c9 	bl	10017480 <__aeabi_lmul>
100190ee:	2201      	movs	r2, #1
100190f0:	2300      	movs	r3, #0
100190f2:	1880      	adds	r0, r0, r2
100190f4:	4159      	adcs	r1, r3
100190f6:	6120      	str	r0, [r4, #16]
100190f8:	6161      	str	r1, [r4, #20]
100190fa:	0048      	lsls	r0, r1, #1
100190fc:	0840      	lsrs	r0, r0, #1
100190fe:	bd10      	pop	{r4, pc}
10019100:	1001b8f4 	.word	0x1001b8f4
10019104:	0000330e 	.word	0x0000330e
10019108:	ffffabcd 	.word	0xffffabcd
1001910c:	00001234 	.word	0x00001234
10019110:	ffffe66d 	.word	0xffffe66d
10019114:	ffffdeec 	.word	0xffffdeec
10019118:	4c957f2d 	.word	0x4c957f2d
1001911c:	5851f42d 	.word	0x5851f42d

10019120 <_sbrk_r>:
10019120:	2300      	movs	r3, #0
10019122:	b570      	push	{r4, r5, r6, lr}
10019124:	4c06      	ldr	r4, [pc, #24]	; (10019140 <_sbrk_r+0x20>)
10019126:	0005      	movs	r5, r0
10019128:	0008      	movs	r0, r1
1001912a:	6023      	str	r3, [r4, #0]
1001912c:	f7f7 faac 	bl	10010688 <_sbrk>
10019130:	1c43      	adds	r3, r0, #1
10019132:	d103      	bne.n	1001913c <_sbrk_r+0x1c>
10019134:	6823      	ldr	r3, [r4, #0]
10019136:	2b00      	cmp	r3, #0
10019138:	d000      	beq.n	1001913c <_sbrk_r+0x1c>
1001913a:	602b      	str	r3, [r5, #0]
1001913c:	bd70      	pop	{r4, r5, r6, pc}
1001913e:	46c0      	nop			; (mov r8, r8)
10019140:	1001d6d4 	.word	0x1001d6d4

10019144 <setbuf>:
10019144:	424a      	negs	r2, r1
10019146:	414a      	adcs	r2, r1
10019148:	2380      	movs	r3, #128	; 0x80
1001914a:	b510      	push	{r4, lr}
1001914c:	0052      	lsls	r2, r2, #1
1001914e:	00db      	lsls	r3, r3, #3
10019150:	f000 f802 	bl	10019158 <setvbuf>
10019154:	bd10      	pop	{r4, pc}
	...

10019158 <setvbuf>:
10019158:	b5f0      	push	{r4, r5, r6, r7, lr}
1001915a:	001d      	movs	r5, r3
1001915c:	4b51      	ldr	r3, [pc, #324]	; (100192a4 <setvbuf+0x14c>)
1001915e:	b085      	sub	sp, #20
10019160:	681e      	ldr	r6, [r3, #0]
10019162:	0004      	movs	r4, r0
10019164:	000f      	movs	r7, r1
10019166:	9200      	str	r2, [sp, #0]
10019168:	2e00      	cmp	r6, #0
1001916a:	d005      	beq.n	10019178 <setvbuf+0x20>
1001916c:	69b3      	ldr	r3, [r6, #24]
1001916e:	2b00      	cmp	r3, #0
10019170:	d102      	bne.n	10019178 <setvbuf+0x20>
10019172:	0030      	movs	r0, r6
10019174:	f000 fa6a 	bl	1001964c <__sinit>
10019178:	4b4b      	ldr	r3, [pc, #300]	; (100192a8 <setvbuf+0x150>)
1001917a:	429c      	cmp	r4, r3
1001917c:	d101      	bne.n	10019182 <setvbuf+0x2a>
1001917e:	6874      	ldr	r4, [r6, #4]
10019180:	e008      	b.n	10019194 <setvbuf+0x3c>
10019182:	4b4a      	ldr	r3, [pc, #296]	; (100192ac <setvbuf+0x154>)
10019184:	429c      	cmp	r4, r3
10019186:	d101      	bne.n	1001918c <setvbuf+0x34>
10019188:	68b4      	ldr	r4, [r6, #8]
1001918a:	e003      	b.n	10019194 <setvbuf+0x3c>
1001918c:	4b48      	ldr	r3, [pc, #288]	; (100192b0 <setvbuf+0x158>)
1001918e:	429c      	cmp	r4, r3
10019190:	d100      	bne.n	10019194 <setvbuf+0x3c>
10019192:	68f4      	ldr	r4, [r6, #12]
10019194:	9b00      	ldr	r3, [sp, #0]
10019196:	2b02      	cmp	r3, #2
10019198:	d005      	beq.n	100191a6 <setvbuf+0x4e>
1001919a:	2b01      	cmp	r3, #1
1001919c:	d900      	bls.n	100191a0 <setvbuf+0x48>
1001919e:	e07c      	b.n	1001929a <setvbuf+0x142>
100191a0:	2d00      	cmp	r5, #0
100191a2:	da00      	bge.n	100191a6 <setvbuf+0x4e>
100191a4:	e079      	b.n	1001929a <setvbuf+0x142>
100191a6:	0021      	movs	r1, r4
100191a8:	0030      	movs	r0, r6
100191aa:	f000 f9e1 	bl	10019570 <_fflush_r>
100191ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
100191b0:	2900      	cmp	r1, #0
100191b2:	d008      	beq.n	100191c6 <setvbuf+0x6e>
100191b4:	0023      	movs	r3, r4
100191b6:	3344      	adds	r3, #68	; 0x44
100191b8:	4299      	cmp	r1, r3
100191ba:	d002      	beq.n	100191c2 <setvbuf+0x6a>
100191bc:	0030      	movs	r0, r6
100191be:	f7ff fe3d 	bl	10018e3c <_free_r>
100191c2:	2300      	movs	r3, #0
100191c4:	6363      	str	r3, [r4, #52]	; 0x34
100191c6:	2300      	movs	r3, #0
100191c8:	61a3      	str	r3, [r4, #24]
100191ca:	6063      	str	r3, [r4, #4]
100191cc:	89a3      	ldrh	r3, [r4, #12]
100191ce:	061b      	lsls	r3, r3, #24
100191d0:	d503      	bpl.n	100191da <setvbuf+0x82>
100191d2:	6921      	ldr	r1, [r4, #16]
100191d4:	0030      	movs	r0, r6
100191d6:	f7ff fe31 	bl	10018e3c <_free_r>
100191da:	89a2      	ldrh	r2, [r4, #12]
100191dc:	4b35      	ldr	r3, [pc, #212]	; (100192b4 <setvbuf+0x15c>)
100191de:	4013      	ands	r3, r2
100191e0:	81a3      	strh	r3, [r4, #12]
100191e2:	9b00      	ldr	r3, [sp, #0]
100191e4:	2b02      	cmp	r3, #2
100191e6:	d021      	beq.n	1001922c <setvbuf+0xd4>
100191e8:	ab03      	add	r3, sp, #12
100191ea:	aa02      	add	r2, sp, #8
100191ec:	0021      	movs	r1, r4
100191ee:	0030      	movs	r0, r6
100191f0:	f000 fac0 	bl	10019774 <__swhatbuf_r>
100191f4:	89a3      	ldrh	r3, [r4, #12]
100191f6:	4318      	orrs	r0, r3
100191f8:	81a0      	strh	r0, [r4, #12]
100191fa:	2d00      	cmp	r5, #0
100191fc:	d101      	bne.n	10019202 <setvbuf+0xaa>
100191fe:	9d02      	ldr	r5, [sp, #8]
10019200:	e001      	b.n	10019206 <setvbuf+0xae>
10019202:	2f00      	cmp	r7, #0
10019204:	d125      	bne.n	10019252 <setvbuf+0xfa>
10019206:	0028      	movs	r0, r5
10019208:	f7ff fdee 	bl	10018de8 <malloc>
1001920c:	9501      	str	r5, [sp, #4]
1001920e:	1e07      	subs	r7, r0, #0
10019210:	d11a      	bne.n	10019248 <setvbuf+0xf0>
10019212:	9b02      	ldr	r3, [sp, #8]
10019214:	9301      	str	r3, [sp, #4]
10019216:	42ab      	cmp	r3, r5
10019218:	d102      	bne.n	10019220 <setvbuf+0xc8>
1001921a:	2001      	movs	r0, #1
1001921c:	4240      	negs	r0, r0
1001921e:	e006      	b.n	1001922e <setvbuf+0xd6>
10019220:	9801      	ldr	r0, [sp, #4]
10019222:	f7ff fde1 	bl	10018de8 <malloc>
10019226:	1e07      	subs	r7, r0, #0
10019228:	d10e      	bne.n	10019248 <setvbuf+0xf0>
1001922a:	e7f6      	b.n	1001921a <setvbuf+0xc2>
1001922c:	2000      	movs	r0, #0
1001922e:	2202      	movs	r2, #2
10019230:	89a3      	ldrh	r3, [r4, #12]
10019232:	4313      	orrs	r3, r2
10019234:	81a3      	strh	r3, [r4, #12]
10019236:	2300      	movs	r3, #0
10019238:	60a3      	str	r3, [r4, #8]
1001923a:	0023      	movs	r3, r4
1001923c:	3347      	adds	r3, #71	; 0x47
1001923e:	6023      	str	r3, [r4, #0]
10019240:	6123      	str	r3, [r4, #16]
10019242:	2301      	movs	r3, #1
10019244:	6163      	str	r3, [r4, #20]
10019246:	e02a      	b.n	1001929e <setvbuf+0x146>
10019248:	2280      	movs	r2, #128	; 0x80
1001924a:	89a3      	ldrh	r3, [r4, #12]
1001924c:	9d01      	ldr	r5, [sp, #4]
1001924e:	4313      	orrs	r3, r2
10019250:	81a3      	strh	r3, [r4, #12]
10019252:	69b3      	ldr	r3, [r6, #24]
10019254:	2b00      	cmp	r3, #0
10019256:	d102      	bne.n	1001925e <setvbuf+0x106>
10019258:	0030      	movs	r0, r6
1001925a:	f000 f9f7 	bl	1001964c <__sinit>
1001925e:	9b00      	ldr	r3, [sp, #0]
10019260:	2b01      	cmp	r3, #1
10019262:	d103      	bne.n	1001926c <setvbuf+0x114>
10019264:	89a3      	ldrh	r3, [r4, #12]
10019266:	9a00      	ldr	r2, [sp, #0]
10019268:	431a      	orrs	r2, r3
1001926a:	81a2      	strh	r2, [r4, #12]
1001926c:	2308      	movs	r3, #8
1001926e:	89a2      	ldrh	r2, [r4, #12]
10019270:	6027      	str	r7, [r4, #0]
10019272:	4013      	ands	r3, r2
10019274:	6127      	str	r7, [r4, #16]
10019276:	6165      	str	r5, [r4, #20]
10019278:	1e18      	subs	r0, r3, #0
1001927a:	d00c      	beq.n	10019296 <setvbuf+0x13e>
1001927c:	2301      	movs	r3, #1
1001927e:	401a      	ands	r2, r3
10019280:	2300      	movs	r3, #0
10019282:	1e10      	subs	r0, r2, #0
10019284:	4298      	cmp	r0, r3
10019286:	d004      	beq.n	10019292 <setvbuf+0x13a>
10019288:	426d      	negs	r5, r5
1001928a:	60a3      	str	r3, [r4, #8]
1001928c:	61a5      	str	r5, [r4, #24]
1001928e:	0018      	movs	r0, r3
10019290:	e005      	b.n	1001929e <setvbuf+0x146>
10019292:	60a5      	str	r5, [r4, #8]
10019294:	e003      	b.n	1001929e <setvbuf+0x146>
10019296:	60a3      	str	r3, [r4, #8]
10019298:	e001      	b.n	1001929e <setvbuf+0x146>
1001929a:	2001      	movs	r0, #1
1001929c:	4240      	negs	r0, r0
1001929e:	b005      	add	sp, #20
100192a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100192a2:	46c0      	nop			; (mov r8, r8)
100192a4:	1001b8f4 	.word	0x1001b8f4
100192a8:	1001b790 	.word	0x1001b790
100192ac:	1001b7b0 	.word	0x1001b7b0
100192b0:	1001b7d0 	.word	0x1001b7d0
100192b4:	fffff35c 	.word	0xfffff35c

100192b8 <strlen>:
100192b8:	2300      	movs	r3, #0
100192ba:	5cc2      	ldrb	r2, [r0, r3]
100192bc:	3301      	adds	r3, #1
100192be:	2a00      	cmp	r2, #0
100192c0:	d1fb      	bne.n	100192ba <strlen+0x2>
100192c2:	1e58      	subs	r0, r3, #1
100192c4:	4770      	bx	lr
	...

100192c8 <__swbuf_r>:
100192c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100192ca:	0005      	movs	r5, r0
100192cc:	000f      	movs	r7, r1
100192ce:	0014      	movs	r4, r2
100192d0:	2800      	cmp	r0, #0
100192d2:	d004      	beq.n	100192de <__swbuf_r+0x16>
100192d4:	6983      	ldr	r3, [r0, #24]
100192d6:	2b00      	cmp	r3, #0
100192d8:	d101      	bne.n	100192de <__swbuf_r+0x16>
100192da:	f000 f9b7 	bl	1001964c <__sinit>
100192de:	4b23      	ldr	r3, [pc, #140]	; (1001936c <__swbuf_r+0xa4>)
100192e0:	429c      	cmp	r4, r3
100192e2:	d101      	bne.n	100192e8 <__swbuf_r+0x20>
100192e4:	686c      	ldr	r4, [r5, #4]
100192e6:	e008      	b.n	100192fa <__swbuf_r+0x32>
100192e8:	4b21      	ldr	r3, [pc, #132]	; (10019370 <__swbuf_r+0xa8>)
100192ea:	429c      	cmp	r4, r3
100192ec:	d101      	bne.n	100192f2 <__swbuf_r+0x2a>
100192ee:	68ac      	ldr	r4, [r5, #8]
100192f0:	e003      	b.n	100192fa <__swbuf_r+0x32>
100192f2:	4b20      	ldr	r3, [pc, #128]	; (10019374 <__swbuf_r+0xac>)
100192f4:	429c      	cmp	r4, r3
100192f6:	d100      	bne.n	100192fa <__swbuf_r+0x32>
100192f8:	68ec      	ldr	r4, [r5, #12]
100192fa:	69a3      	ldr	r3, [r4, #24]
100192fc:	60a3      	str	r3, [r4, #8]
100192fe:	89a3      	ldrh	r3, [r4, #12]
10019300:	071b      	lsls	r3, r3, #28
10019302:	d50a      	bpl.n	1001931a <__swbuf_r+0x52>
10019304:	6923      	ldr	r3, [r4, #16]
10019306:	2b00      	cmp	r3, #0
10019308:	d007      	beq.n	1001931a <__swbuf_r+0x52>
1001930a:	6823      	ldr	r3, [r4, #0]
1001930c:	6922      	ldr	r2, [r4, #16]
1001930e:	b2fe      	uxtb	r6, r7
10019310:	1a98      	subs	r0, r3, r2
10019312:	6963      	ldr	r3, [r4, #20]
10019314:	4298      	cmp	r0, r3
10019316:	db0f      	blt.n	10019338 <__swbuf_r+0x70>
10019318:	e008      	b.n	1001932c <__swbuf_r+0x64>
1001931a:	0021      	movs	r1, r4
1001931c:	0028      	movs	r0, r5
1001931e:	f000 f82b 	bl	10019378 <__swsetup_r>
10019322:	2800      	cmp	r0, #0
10019324:	d0f1      	beq.n	1001930a <__swbuf_r+0x42>
10019326:	2001      	movs	r0, #1
10019328:	4240      	negs	r0, r0
1001932a:	e01d      	b.n	10019368 <__swbuf_r+0xa0>
1001932c:	0021      	movs	r1, r4
1001932e:	0028      	movs	r0, r5
10019330:	f000 f91e 	bl	10019570 <_fflush_r>
10019334:	2800      	cmp	r0, #0
10019336:	d1f6      	bne.n	10019326 <__swbuf_r+0x5e>
10019338:	68a3      	ldr	r3, [r4, #8]
1001933a:	3001      	adds	r0, #1
1001933c:	3b01      	subs	r3, #1
1001933e:	60a3      	str	r3, [r4, #8]
10019340:	6823      	ldr	r3, [r4, #0]
10019342:	1c5a      	adds	r2, r3, #1
10019344:	6022      	str	r2, [r4, #0]
10019346:	701f      	strb	r7, [r3, #0]
10019348:	6963      	ldr	r3, [r4, #20]
1001934a:	4298      	cmp	r0, r3
1001934c:	d005      	beq.n	1001935a <__swbuf_r+0x92>
1001934e:	89a3      	ldrh	r3, [r4, #12]
10019350:	0030      	movs	r0, r6
10019352:	07db      	lsls	r3, r3, #31
10019354:	d508      	bpl.n	10019368 <__swbuf_r+0xa0>
10019356:	2e0a      	cmp	r6, #10
10019358:	d106      	bne.n	10019368 <__swbuf_r+0xa0>
1001935a:	0021      	movs	r1, r4
1001935c:	0028      	movs	r0, r5
1001935e:	f000 f907 	bl	10019570 <_fflush_r>
10019362:	2800      	cmp	r0, #0
10019364:	d1df      	bne.n	10019326 <__swbuf_r+0x5e>
10019366:	0030      	movs	r0, r6
10019368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001936a:	46c0      	nop			; (mov r8, r8)
1001936c:	1001b790 	.word	0x1001b790
10019370:	1001b7b0 	.word	0x1001b7b0
10019374:	1001b7d0 	.word	0x1001b7d0

10019378 <__swsetup_r>:
10019378:	4b36      	ldr	r3, [pc, #216]	; (10019454 <__swsetup_r+0xdc>)
1001937a:	b570      	push	{r4, r5, r6, lr}
1001937c:	681d      	ldr	r5, [r3, #0]
1001937e:	0006      	movs	r6, r0
10019380:	000c      	movs	r4, r1
10019382:	2d00      	cmp	r5, #0
10019384:	d005      	beq.n	10019392 <__swsetup_r+0x1a>
10019386:	69ab      	ldr	r3, [r5, #24]
10019388:	2b00      	cmp	r3, #0
1001938a:	d102      	bne.n	10019392 <__swsetup_r+0x1a>
1001938c:	0028      	movs	r0, r5
1001938e:	f000 f95d 	bl	1001964c <__sinit>
10019392:	4b31      	ldr	r3, [pc, #196]	; (10019458 <__swsetup_r+0xe0>)
10019394:	429c      	cmp	r4, r3
10019396:	d101      	bne.n	1001939c <__swsetup_r+0x24>
10019398:	686c      	ldr	r4, [r5, #4]
1001939a:	e008      	b.n	100193ae <__swsetup_r+0x36>
1001939c:	4b2f      	ldr	r3, [pc, #188]	; (1001945c <__swsetup_r+0xe4>)
1001939e:	429c      	cmp	r4, r3
100193a0:	d101      	bne.n	100193a6 <__swsetup_r+0x2e>
100193a2:	68ac      	ldr	r4, [r5, #8]
100193a4:	e003      	b.n	100193ae <__swsetup_r+0x36>
100193a6:	4b2e      	ldr	r3, [pc, #184]	; (10019460 <__swsetup_r+0xe8>)
100193a8:	429c      	cmp	r4, r3
100193aa:	d100      	bne.n	100193ae <__swsetup_r+0x36>
100193ac:	68ec      	ldr	r4, [r5, #12]
100193ae:	220c      	movs	r2, #12
100193b0:	5ea3      	ldrsh	r3, [r4, r2]
100193b2:	b29a      	uxth	r2, r3
100193b4:	0711      	lsls	r1, r2, #28
100193b6:	d423      	bmi.n	10019400 <__swsetup_r+0x88>
100193b8:	06d1      	lsls	r1, r2, #27
100193ba:	d407      	bmi.n	100193cc <__swsetup_r+0x54>
100193bc:	2209      	movs	r2, #9
100193be:	2001      	movs	r0, #1
100193c0:	6032      	str	r2, [r6, #0]
100193c2:	3237      	adds	r2, #55	; 0x37
100193c4:	4313      	orrs	r3, r2
100193c6:	81a3      	strh	r3, [r4, #12]
100193c8:	4240      	negs	r0, r0
100193ca:	e042      	b.n	10019452 <__swsetup_r+0xda>
100193cc:	0753      	lsls	r3, r2, #29
100193ce:	d513      	bpl.n	100193f8 <__swsetup_r+0x80>
100193d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100193d2:	2900      	cmp	r1, #0
100193d4:	d008      	beq.n	100193e8 <__swsetup_r+0x70>
100193d6:	0023      	movs	r3, r4
100193d8:	3344      	adds	r3, #68	; 0x44
100193da:	4299      	cmp	r1, r3
100193dc:	d002      	beq.n	100193e4 <__swsetup_r+0x6c>
100193de:	0030      	movs	r0, r6
100193e0:	f7ff fd2c 	bl	10018e3c <_free_r>
100193e4:	2300      	movs	r3, #0
100193e6:	6363      	str	r3, [r4, #52]	; 0x34
100193e8:	2224      	movs	r2, #36	; 0x24
100193ea:	89a3      	ldrh	r3, [r4, #12]
100193ec:	4393      	bics	r3, r2
100193ee:	81a3      	strh	r3, [r4, #12]
100193f0:	2300      	movs	r3, #0
100193f2:	6063      	str	r3, [r4, #4]
100193f4:	6923      	ldr	r3, [r4, #16]
100193f6:	6023      	str	r3, [r4, #0]
100193f8:	2208      	movs	r2, #8
100193fa:	89a3      	ldrh	r3, [r4, #12]
100193fc:	4313      	orrs	r3, r2
100193fe:	81a3      	strh	r3, [r4, #12]
10019400:	6923      	ldr	r3, [r4, #16]
10019402:	2b00      	cmp	r3, #0
10019404:	d10b      	bne.n	1001941e <__swsetup_r+0xa6>
10019406:	23a0      	movs	r3, #160	; 0xa0
10019408:	89a2      	ldrh	r2, [r4, #12]
1001940a:	009b      	lsls	r3, r3, #2
1001940c:	4013      	ands	r3, r2
1001940e:	2280      	movs	r2, #128	; 0x80
10019410:	0092      	lsls	r2, r2, #2
10019412:	4293      	cmp	r3, r2
10019414:	d003      	beq.n	1001941e <__swsetup_r+0xa6>
10019416:	0021      	movs	r1, r4
10019418:	0030      	movs	r0, r6
1001941a:	f000 f9d1 	bl	100197c0 <__smakebuf_r>
1001941e:	2301      	movs	r3, #1
10019420:	89a2      	ldrh	r2, [r4, #12]
10019422:	4013      	ands	r3, r2
10019424:	d005      	beq.n	10019432 <__swsetup_r+0xba>
10019426:	2300      	movs	r3, #0
10019428:	60a3      	str	r3, [r4, #8]
1001942a:	6963      	ldr	r3, [r4, #20]
1001942c:	425b      	negs	r3, r3
1001942e:	61a3      	str	r3, [r4, #24]
10019430:	e003      	b.n	1001943a <__swsetup_r+0xc2>
10019432:	0792      	lsls	r2, r2, #30
10019434:	d400      	bmi.n	10019438 <__swsetup_r+0xc0>
10019436:	6963      	ldr	r3, [r4, #20]
10019438:	60a3      	str	r3, [r4, #8]
1001943a:	2000      	movs	r0, #0
1001943c:	6923      	ldr	r3, [r4, #16]
1001943e:	4283      	cmp	r3, r0
10019440:	d107      	bne.n	10019452 <__swsetup_r+0xda>
10019442:	220c      	movs	r2, #12
10019444:	5ea3      	ldrsh	r3, [r4, r2]
10019446:	061a      	lsls	r2, r3, #24
10019448:	d503      	bpl.n	10019452 <__swsetup_r+0xda>
1001944a:	2240      	movs	r2, #64	; 0x40
1001944c:	4313      	orrs	r3, r2
1001944e:	81a3      	strh	r3, [r4, #12]
10019450:	3801      	subs	r0, #1
10019452:	bd70      	pop	{r4, r5, r6, pc}
10019454:	1001b8f4 	.word	0x1001b8f4
10019458:	1001b790 	.word	0x1001b790
1001945c:	1001b7b0 	.word	0x1001b7b0
10019460:	1001b7d0 	.word	0x1001b7d0

10019464 <__sflush_r>:
10019464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10019466:	898a      	ldrh	r2, [r1, #12]
10019468:	0005      	movs	r5, r0
1001946a:	000c      	movs	r4, r1
1001946c:	0713      	lsls	r3, r2, #28
1001946e:	d45a      	bmi.n	10019526 <__sflush_r+0xc2>
10019470:	684b      	ldr	r3, [r1, #4]
10019472:	2b00      	cmp	r3, #0
10019474:	dc02      	bgt.n	1001947c <__sflush_r+0x18>
10019476:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10019478:	2b00      	cmp	r3, #0
1001947a:	dd19      	ble.n	100194b0 <__sflush_r+0x4c>
1001947c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001947e:	2f00      	cmp	r7, #0
10019480:	d016      	beq.n	100194b0 <__sflush_r+0x4c>
10019482:	2300      	movs	r3, #0
10019484:	682e      	ldr	r6, [r5, #0]
10019486:	602b      	str	r3, [r5, #0]
10019488:	2380      	movs	r3, #128	; 0x80
1001948a:	015b      	lsls	r3, r3, #5
1001948c:	401a      	ands	r2, r3
1001948e:	d001      	beq.n	10019494 <__sflush_r+0x30>
10019490:	6d60      	ldr	r0, [r4, #84]	; 0x54
10019492:	e014      	b.n	100194be <__sflush_r+0x5a>
10019494:	2301      	movs	r3, #1
10019496:	6a21      	ldr	r1, [r4, #32]
10019498:	0028      	movs	r0, r5
1001949a:	47b8      	blx	r7
1001949c:	1c43      	adds	r3, r0, #1
1001949e:	d10e      	bne.n	100194be <__sflush_r+0x5a>
100194a0:	682b      	ldr	r3, [r5, #0]
100194a2:	2b00      	cmp	r3, #0
100194a4:	d00b      	beq.n	100194be <__sflush_r+0x5a>
100194a6:	2b1d      	cmp	r3, #29
100194a8:	d001      	beq.n	100194ae <__sflush_r+0x4a>
100194aa:	2b16      	cmp	r3, #22
100194ac:	d102      	bne.n	100194b4 <__sflush_r+0x50>
100194ae:	602e      	str	r6, [r5, #0]
100194b0:	2000      	movs	r0, #0
100194b2:	e05a      	b.n	1001956a <__sflush_r+0x106>
100194b4:	2240      	movs	r2, #64	; 0x40
100194b6:	89a3      	ldrh	r3, [r4, #12]
100194b8:	4313      	orrs	r3, r2
100194ba:	81a3      	strh	r3, [r4, #12]
100194bc:	e055      	b.n	1001956a <__sflush_r+0x106>
100194be:	89a3      	ldrh	r3, [r4, #12]
100194c0:	075b      	lsls	r3, r3, #29
100194c2:	d506      	bpl.n	100194d2 <__sflush_r+0x6e>
100194c4:	6863      	ldr	r3, [r4, #4]
100194c6:	1ac0      	subs	r0, r0, r3
100194c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
100194ca:	2b00      	cmp	r3, #0
100194cc:	d001      	beq.n	100194d2 <__sflush_r+0x6e>
100194ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
100194d0:	1ac0      	subs	r0, r0, r3
100194d2:	2300      	movs	r3, #0
100194d4:	0002      	movs	r2, r0
100194d6:	6a21      	ldr	r1, [r4, #32]
100194d8:	0028      	movs	r0, r5
100194da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100194dc:	47b8      	blx	r7
100194de:	89a3      	ldrh	r3, [r4, #12]
100194e0:	1c42      	adds	r2, r0, #1
100194e2:	d106      	bne.n	100194f2 <__sflush_r+0x8e>
100194e4:	6829      	ldr	r1, [r5, #0]
100194e6:	291d      	cmp	r1, #29
100194e8:	d83a      	bhi.n	10019560 <__sflush_r+0xfc>
100194ea:	4a20      	ldr	r2, [pc, #128]	; (1001956c <__sflush_r+0x108>)
100194ec:	40ca      	lsrs	r2, r1
100194ee:	07d2      	lsls	r2, r2, #31
100194f0:	d536      	bpl.n	10019560 <__sflush_r+0xfc>
100194f2:	2200      	movs	r2, #0
100194f4:	6062      	str	r2, [r4, #4]
100194f6:	6922      	ldr	r2, [r4, #16]
100194f8:	6022      	str	r2, [r4, #0]
100194fa:	04db      	lsls	r3, r3, #19
100194fc:	d505      	bpl.n	1001950a <__sflush_r+0xa6>
100194fe:	1c43      	adds	r3, r0, #1
10019500:	d102      	bne.n	10019508 <__sflush_r+0xa4>
10019502:	682b      	ldr	r3, [r5, #0]
10019504:	2b00      	cmp	r3, #0
10019506:	d100      	bne.n	1001950a <__sflush_r+0xa6>
10019508:	6560      	str	r0, [r4, #84]	; 0x54
1001950a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001950c:	602e      	str	r6, [r5, #0]
1001950e:	2900      	cmp	r1, #0
10019510:	d0ce      	beq.n	100194b0 <__sflush_r+0x4c>
10019512:	0023      	movs	r3, r4
10019514:	3344      	adds	r3, #68	; 0x44
10019516:	4299      	cmp	r1, r3
10019518:	d002      	beq.n	10019520 <__sflush_r+0xbc>
1001951a:	0028      	movs	r0, r5
1001951c:	f7ff fc8e 	bl	10018e3c <_free_r>
10019520:	2000      	movs	r0, #0
10019522:	6360      	str	r0, [r4, #52]	; 0x34
10019524:	e021      	b.n	1001956a <__sflush_r+0x106>
10019526:	690f      	ldr	r7, [r1, #16]
10019528:	2f00      	cmp	r7, #0
1001952a:	d0c1      	beq.n	100194b0 <__sflush_r+0x4c>
1001952c:	680b      	ldr	r3, [r1, #0]
1001952e:	600f      	str	r7, [r1, #0]
10019530:	1bdb      	subs	r3, r3, r7
10019532:	9301      	str	r3, [sp, #4]
10019534:	2300      	movs	r3, #0
10019536:	0792      	lsls	r2, r2, #30
10019538:	d100      	bne.n	1001953c <__sflush_r+0xd8>
1001953a:	694b      	ldr	r3, [r1, #20]
1001953c:	60a3      	str	r3, [r4, #8]
1001953e:	e003      	b.n	10019548 <__sflush_r+0xe4>
10019540:	9b01      	ldr	r3, [sp, #4]
10019542:	183f      	adds	r7, r7, r0
10019544:	1a1b      	subs	r3, r3, r0
10019546:	9301      	str	r3, [sp, #4]
10019548:	9b01      	ldr	r3, [sp, #4]
1001954a:	2b00      	cmp	r3, #0
1001954c:	ddb0      	ble.n	100194b0 <__sflush_r+0x4c>
1001954e:	9b01      	ldr	r3, [sp, #4]
10019550:	003a      	movs	r2, r7
10019552:	6a21      	ldr	r1, [r4, #32]
10019554:	0028      	movs	r0, r5
10019556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10019558:	47b0      	blx	r6
1001955a:	2800      	cmp	r0, #0
1001955c:	dcf0      	bgt.n	10019540 <__sflush_r+0xdc>
1001955e:	89a3      	ldrh	r3, [r4, #12]
10019560:	2240      	movs	r2, #64	; 0x40
10019562:	2001      	movs	r0, #1
10019564:	4313      	orrs	r3, r2
10019566:	81a3      	strh	r3, [r4, #12]
10019568:	4240      	negs	r0, r0
1001956a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001956c:	20400001 	.word	0x20400001

10019570 <_fflush_r>:
10019570:	690b      	ldr	r3, [r1, #16]
10019572:	b570      	push	{r4, r5, r6, lr}
10019574:	0005      	movs	r5, r0
10019576:	000c      	movs	r4, r1
10019578:	2b00      	cmp	r3, #0
1001957a:	d101      	bne.n	10019580 <_fflush_r+0x10>
1001957c:	2000      	movs	r0, #0
1001957e:	e01c      	b.n	100195ba <_fflush_r+0x4a>
10019580:	2800      	cmp	r0, #0
10019582:	d004      	beq.n	1001958e <_fflush_r+0x1e>
10019584:	6983      	ldr	r3, [r0, #24]
10019586:	2b00      	cmp	r3, #0
10019588:	d101      	bne.n	1001958e <_fflush_r+0x1e>
1001958a:	f000 f85f 	bl	1001964c <__sinit>
1001958e:	4b0b      	ldr	r3, [pc, #44]	; (100195bc <_fflush_r+0x4c>)
10019590:	429c      	cmp	r4, r3
10019592:	d101      	bne.n	10019598 <_fflush_r+0x28>
10019594:	686c      	ldr	r4, [r5, #4]
10019596:	e008      	b.n	100195aa <_fflush_r+0x3a>
10019598:	4b09      	ldr	r3, [pc, #36]	; (100195c0 <_fflush_r+0x50>)
1001959a:	429c      	cmp	r4, r3
1001959c:	d101      	bne.n	100195a2 <_fflush_r+0x32>
1001959e:	68ac      	ldr	r4, [r5, #8]
100195a0:	e003      	b.n	100195aa <_fflush_r+0x3a>
100195a2:	4b08      	ldr	r3, [pc, #32]	; (100195c4 <_fflush_r+0x54>)
100195a4:	429c      	cmp	r4, r3
100195a6:	d100      	bne.n	100195aa <_fflush_r+0x3a>
100195a8:	68ec      	ldr	r4, [r5, #12]
100195aa:	220c      	movs	r2, #12
100195ac:	5ea3      	ldrsh	r3, [r4, r2]
100195ae:	2b00      	cmp	r3, #0
100195b0:	d0e4      	beq.n	1001957c <_fflush_r+0xc>
100195b2:	0021      	movs	r1, r4
100195b4:	0028      	movs	r0, r5
100195b6:	f7ff ff55 	bl	10019464 <__sflush_r>
100195ba:	bd70      	pop	{r4, r5, r6, pc}
100195bc:	1001b790 	.word	0x1001b790
100195c0:	1001b7b0 	.word	0x1001b7b0
100195c4:	1001b7d0 	.word	0x1001b7d0

100195c8 <_cleanup_r>:
100195c8:	b510      	push	{r4, lr}
100195ca:	4902      	ldr	r1, [pc, #8]	; (100195d4 <_cleanup_r+0xc>)
100195cc:	f000 f8b0 	bl	10019730 <_fwalk_reent>
100195d0:	bd10      	pop	{r4, pc}
100195d2:	46c0      	nop			; (mov r8, r8)
100195d4:	10019571 	.word	0x10019571

100195d8 <std.isra.0>:
100195d8:	2300      	movs	r3, #0
100195da:	b510      	push	{r4, lr}
100195dc:	0004      	movs	r4, r0
100195de:	6003      	str	r3, [r0, #0]
100195e0:	6043      	str	r3, [r0, #4]
100195e2:	6083      	str	r3, [r0, #8]
100195e4:	8181      	strh	r1, [r0, #12]
100195e6:	6643      	str	r3, [r0, #100]	; 0x64
100195e8:	81c2      	strh	r2, [r0, #14]
100195ea:	6103      	str	r3, [r0, #16]
100195ec:	6143      	str	r3, [r0, #20]
100195ee:	6183      	str	r3, [r0, #24]
100195f0:	0019      	movs	r1, r3
100195f2:	2208      	movs	r2, #8
100195f4:	305c      	adds	r0, #92	; 0x5c
100195f6:	f7ff fc19 	bl	10018e2c <memset>
100195fa:	4b05      	ldr	r3, [pc, #20]	; (10019610 <std.isra.0+0x38>)
100195fc:	6224      	str	r4, [r4, #32]
100195fe:	6263      	str	r3, [r4, #36]	; 0x24
10019600:	4b04      	ldr	r3, [pc, #16]	; (10019614 <std.isra.0+0x3c>)
10019602:	62a3      	str	r3, [r4, #40]	; 0x28
10019604:	4b04      	ldr	r3, [pc, #16]	; (10019618 <std.isra.0+0x40>)
10019606:	62e3      	str	r3, [r4, #44]	; 0x2c
10019608:	4b04      	ldr	r3, [pc, #16]	; (1001961c <std.isra.0+0x44>)
1001960a:	6323      	str	r3, [r4, #48]	; 0x30
1001960c:	bd10      	pop	{r4, pc}
1001960e:	46c0      	nop			; (mov r8, r8)
10019610:	10019e51 	.word	0x10019e51
10019614:	10019e79 	.word	0x10019e79
10019618:	10019eb1 	.word	0x10019eb1
1001961c:	10019edd 	.word	0x10019edd

10019620 <__sfmoreglue>:
10019620:	b570      	push	{r4, r5, r6, lr}
10019622:	2568      	movs	r5, #104	; 0x68
10019624:	1e4b      	subs	r3, r1, #1
10019626:	435d      	muls	r5, r3
10019628:	000e      	movs	r6, r1
1001962a:	0029      	movs	r1, r5
1001962c:	3174      	adds	r1, #116	; 0x74
1001962e:	f7ff fc4b 	bl	10018ec8 <_malloc_r>
10019632:	1e04      	subs	r4, r0, #0
10019634:	d008      	beq.n	10019648 <__sfmoreglue+0x28>
10019636:	2100      	movs	r1, #0
10019638:	002a      	movs	r2, r5
1001963a:	6001      	str	r1, [r0, #0]
1001963c:	6046      	str	r6, [r0, #4]
1001963e:	300c      	adds	r0, #12
10019640:	60a0      	str	r0, [r4, #8]
10019642:	3268      	adds	r2, #104	; 0x68
10019644:	f7ff fbf2 	bl	10018e2c <memset>
10019648:	0020      	movs	r0, r4
1001964a:	bd70      	pop	{r4, r5, r6, pc}

1001964c <__sinit>:
1001964c:	6983      	ldr	r3, [r0, #24]
1001964e:	b513      	push	{r0, r1, r4, lr}
10019650:	0004      	movs	r4, r0
10019652:	2b00      	cmp	r3, #0
10019654:	d128      	bne.n	100196a8 <__sinit+0x5c>
10019656:	6483      	str	r3, [r0, #72]	; 0x48
10019658:	64c3      	str	r3, [r0, #76]	; 0x4c
1001965a:	6503      	str	r3, [r0, #80]	; 0x50
1001965c:	4b13      	ldr	r3, [pc, #76]	; (100196ac <__sinit+0x60>)
1001965e:	4a14      	ldr	r2, [pc, #80]	; (100196b0 <__sinit+0x64>)
10019660:	681b      	ldr	r3, [r3, #0]
10019662:	6282      	str	r2, [r0, #40]	; 0x28
10019664:	9301      	str	r3, [sp, #4]
10019666:	4298      	cmp	r0, r3
10019668:	d101      	bne.n	1001966e <__sinit+0x22>
1001966a:	2301      	movs	r3, #1
1001966c:	6183      	str	r3, [r0, #24]
1001966e:	0020      	movs	r0, r4
10019670:	f000 f820 	bl	100196b4 <__sfp>
10019674:	6060      	str	r0, [r4, #4]
10019676:	0020      	movs	r0, r4
10019678:	f000 f81c 	bl	100196b4 <__sfp>
1001967c:	60a0      	str	r0, [r4, #8]
1001967e:	0020      	movs	r0, r4
10019680:	f000 f818 	bl	100196b4 <__sfp>
10019684:	2200      	movs	r2, #0
10019686:	60e0      	str	r0, [r4, #12]
10019688:	2104      	movs	r1, #4
1001968a:	6860      	ldr	r0, [r4, #4]
1001968c:	f7ff ffa4 	bl	100195d8 <std.isra.0>
10019690:	2201      	movs	r2, #1
10019692:	2109      	movs	r1, #9
10019694:	68a0      	ldr	r0, [r4, #8]
10019696:	f7ff ff9f 	bl	100195d8 <std.isra.0>
1001969a:	2202      	movs	r2, #2
1001969c:	2112      	movs	r1, #18
1001969e:	68e0      	ldr	r0, [r4, #12]
100196a0:	f7ff ff9a 	bl	100195d8 <std.isra.0>
100196a4:	2301      	movs	r3, #1
100196a6:	61a3      	str	r3, [r4, #24]
100196a8:	bd13      	pop	{r0, r1, r4, pc}
100196aa:	46c0      	nop			; (mov r8, r8)
100196ac:	1001b78c 	.word	0x1001b78c
100196b0:	100195c9 	.word	0x100195c9

100196b4 <__sfp>:
100196b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100196b6:	4b1d      	ldr	r3, [pc, #116]	; (1001972c <__sfp+0x78>)
100196b8:	0006      	movs	r6, r0
100196ba:	681d      	ldr	r5, [r3, #0]
100196bc:	69ab      	ldr	r3, [r5, #24]
100196be:	2b00      	cmp	r3, #0
100196c0:	d102      	bne.n	100196c8 <__sfp+0x14>
100196c2:	0028      	movs	r0, r5
100196c4:	f7ff ffc2 	bl	1001964c <__sinit>
100196c8:	3548      	adds	r5, #72	; 0x48
100196ca:	68ac      	ldr	r4, [r5, #8]
100196cc:	686b      	ldr	r3, [r5, #4]
100196ce:	3b01      	subs	r3, #1
100196d0:	d405      	bmi.n	100196de <__sfp+0x2a>
100196d2:	220c      	movs	r2, #12
100196d4:	5ea7      	ldrsh	r7, [r4, r2]
100196d6:	2f00      	cmp	r7, #0
100196d8:	d010      	beq.n	100196fc <__sfp+0x48>
100196da:	3468      	adds	r4, #104	; 0x68
100196dc:	e7f7      	b.n	100196ce <__sfp+0x1a>
100196de:	682b      	ldr	r3, [r5, #0]
100196e0:	2b00      	cmp	r3, #0
100196e2:	d001      	beq.n	100196e8 <__sfp+0x34>
100196e4:	682d      	ldr	r5, [r5, #0]
100196e6:	e7f0      	b.n	100196ca <__sfp+0x16>
100196e8:	2104      	movs	r1, #4
100196ea:	0030      	movs	r0, r6
100196ec:	f7ff ff98 	bl	10019620 <__sfmoreglue>
100196f0:	6028      	str	r0, [r5, #0]
100196f2:	2800      	cmp	r0, #0
100196f4:	d1f6      	bne.n	100196e4 <__sfp+0x30>
100196f6:	230c      	movs	r3, #12
100196f8:	6033      	str	r3, [r6, #0]
100196fa:	e016      	b.n	1001972a <__sfp+0x76>
100196fc:	2301      	movs	r3, #1
100196fe:	0020      	movs	r0, r4
10019700:	425b      	negs	r3, r3
10019702:	81e3      	strh	r3, [r4, #14]
10019704:	3302      	adds	r3, #2
10019706:	81a3      	strh	r3, [r4, #12]
10019708:	6667      	str	r7, [r4, #100]	; 0x64
1001970a:	6027      	str	r7, [r4, #0]
1001970c:	60a7      	str	r7, [r4, #8]
1001970e:	6067      	str	r7, [r4, #4]
10019710:	6127      	str	r7, [r4, #16]
10019712:	6167      	str	r7, [r4, #20]
10019714:	61a7      	str	r7, [r4, #24]
10019716:	305c      	adds	r0, #92	; 0x5c
10019718:	2208      	movs	r2, #8
1001971a:	0039      	movs	r1, r7
1001971c:	f7ff fb86 	bl	10018e2c <memset>
10019720:	0020      	movs	r0, r4
10019722:	6367      	str	r7, [r4, #52]	; 0x34
10019724:	63a7      	str	r7, [r4, #56]	; 0x38
10019726:	64a7      	str	r7, [r4, #72]	; 0x48
10019728:	64e7      	str	r7, [r4, #76]	; 0x4c
1001972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001972c:	1001b78c 	.word	0x1001b78c

10019730 <_fwalk_reent>:
10019730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10019732:	0004      	movs	r4, r0
10019734:	0007      	movs	r7, r0
10019736:	2600      	movs	r6, #0
10019738:	9101      	str	r1, [sp, #4]
1001973a:	3448      	adds	r4, #72	; 0x48
1001973c:	2c00      	cmp	r4, #0
1001973e:	d016      	beq.n	1001976e <_fwalk_reent+0x3e>
10019740:	6863      	ldr	r3, [r4, #4]
10019742:	68a5      	ldr	r5, [r4, #8]
10019744:	9300      	str	r3, [sp, #0]
10019746:	9b00      	ldr	r3, [sp, #0]
10019748:	3b01      	subs	r3, #1
1001974a:	9300      	str	r3, [sp, #0]
1001974c:	d40d      	bmi.n	1001976a <_fwalk_reent+0x3a>
1001974e:	89ab      	ldrh	r3, [r5, #12]
10019750:	2b01      	cmp	r3, #1
10019752:	d908      	bls.n	10019766 <_fwalk_reent+0x36>
10019754:	220e      	movs	r2, #14
10019756:	5eab      	ldrsh	r3, [r5, r2]
10019758:	3301      	adds	r3, #1
1001975a:	d004      	beq.n	10019766 <_fwalk_reent+0x36>
1001975c:	0029      	movs	r1, r5
1001975e:	0038      	movs	r0, r7
10019760:	9b01      	ldr	r3, [sp, #4]
10019762:	4798      	blx	r3
10019764:	4306      	orrs	r6, r0
10019766:	3568      	adds	r5, #104	; 0x68
10019768:	e7ed      	b.n	10019746 <_fwalk_reent+0x16>
1001976a:	6824      	ldr	r4, [r4, #0]
1001976c:	e7e6      	b.n	1001973c <_fwalk_reent+0xc>
1001976e:	0030      	movs	r0, r6
10019770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10019774 <__swhatbuf_r>:
10019774:	b570      	push	{r4, r5, r6, lr}
10019776:	000e      	movs	r6, r1
10019778:	001d      	movs	r5, r3
1001977a:	230e      	movs	r3, #14
1001977c:	5ec9      	ldrsh	r1, [r1, r3]
1001977e:	b090      	sub	sp, #64	; 0x40
10019780:	0014      	movs	r4, r2
10019782:	2900      	cmp	r1, #0
10019784:	da06      	bge.n	10019794 <__swhatbuf_r+0x20>
10019786:	2300      	movs	r3, #0
10019788:	602b      	str	r3, [r5, #0]
1001978a:	89b3      	ldrh	r3, [r6, #12]
1001978c:	061b      	lsls	r3, r3, #24
1001978e:	d50f      	bpl.n	100197b0 <__swhatbuf_r+0x3c>
10019790:	2340      	movs	r3, #64	; 0x40
10019792:	e00f      	b.n	100197b4 <__swhatbuf_r+0x40>
10019794:	aa01      	add	r2, sp, #4
10019796:	f000 fbcd 	bl	10019f34 <_fstat_r>
1001979a:	2800      	cmp	r0, #0
1001979c:	dbf3      	blt.n	10019786 <__swhatbuf_r+0x12>
1001979e:	23f0      	movs	r3, #240	; 0xf0
100197a0:	9a02      	ldr	r2, [sp, #8]
100197a2:	021b      	lsls	r3, r3, #8
100197a4:	4013      	ands	r3, r2
100197a6:	4a05      	ldr	r2, [pc, #20]	; (100197bc <__swhatbuf_r+0x48>)
100197a8:	189b      	adds	r3, r3, r2
100197aa:	425a      	negs	r2, r3
100197ac:	4153      	adcs	r3, r2
100197ae:	602b      	str	r3, [r5, #0]
100197b0:	2380      	movs	r3, #128	; 0x80
100197b2:	00db      	lsls	r3, r3, #3
100197b4:	2000      	movs	r0, #0
100197b6:	6023      	str	r3, [r4, #0]
100197b8:	b010      	add	sp, #64	; 0x40
100197ba:	bd70      	pop	{r4, r5, r6, pc}
100197bc:	ffffe000 	.word	0xffffe000

100197c0 <__smakebuf_r>:
100197c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100197c2:	2602      	movs	r6, #2
100197c4:	898b      	ldrh	r3, [r1, #12]
100197c6:	0005      	movs	r5, r0
100197c8:	000c      	movs	r4, r1
100197ca:	4233      	tst	r3, r6
100197cc:	d110      	bne.n	100197f0 <__smakebuf_r+0x30>
100197ce:	ab01      	add	r3, sp, #4
100197d0:	466a      	mov	r2, sp
100197d2:	f7ff ffcf 	bl	10019774 <__swhatbuf_r>
100197d6:	9900      	ldr	r1, [sp, #0]
100197d8:	0007      	movs	r7, r0
100197da:	0028      	movs	r0, r5
100197dc:	f7ff fb74 	bl	10018ec8 <_malloc_r>
100197e0:	2800      	cmp	r0, #0
100197e2:	d10c      	bne.n	100197fe <__smakebuf_r+0x3e>
100197e4:	220c      	movs	r2, #12
100197e6:	5ea3      	ldrsh	r3, [r4, r2]
100197e8:	059a      	lsls	r2, r3, #22
100197ea:	d423      	bmi.n	10019834 <__smakebuf_r+0x74>
100197ec:	4333      	orrs	r3, r6
100197ee:	81a3      	strh	r3, [r4, #12]
100197f0:	0023      	movs	r3, r4
100197f2:	3347      	adds	r3, #71	; 0x47
100197f4:	6023      	str	r3, [r4, #0]
100197f6:	6123      	str	r3, [r4, #16]
100197f8:	2301      	movs	r3, #1
100197fa:	6163      	str	r3, [r4, #20]
100197fc:	e01a      	b.n	10019834 <__smakebuf_r+0x74>
100197fe:	2280      	movs	r2, #128	; 0x80
10019800:	4b0d      	ldr	r3, [pc, #52]	; (10019838 <__smakebuf_r+0x78>)
10019802:	62ab      	str	r3, [r5, #40]	; 0x28
10019804:	89a3      	ldrh	r3, [r4, #12]
10019806:	6020      	str	r0, [r4, #0]
10019808:	4313      	orrs	r3, r2
1001980a:	81a3      	strh	r3, [r4, #12]
1001980c:	9b00      	ldr	r3, [sp, #0]
1001980e:	6120      	str	r0, [r4, #16]
10019810:	6163      	str	r3, [r4, #20]
10019812:	9b01      	ldr	r3, [sp, #4]
10019814:	2b00      	cmp	r3, #0
10019816:	d00a      	beq.n	1001982e <__smakebuf_r+0x6e>
10019818:	230e      	movs	r3, #14
1001981a:	5ee1      	ldrsh	r1, [r4, r3]
1001981c:	0028      	movs	r0, r5
1001981e:	f000 fb9b 	bl	10019f58 <_isatty_r>
10019822:	2800      	cmp	r0, #0
10019824:	d003      	beq.n	1001982e <__smakebuf_r+0x6e>
10019826:	2201      	movs	r2, #1
10019828:	89a3      	ldrh	r3, [r4, #12]
1001982a:	4313      	orrs	r3, r2
1001982c:	81a3      	strh	r3, [r4, #12]
1001982e:	89a3      	ldrh	r3, [r4, #12]
10019830:	431f      	orrs	r7, r3
10019832:	81a7      	strh	r7, [r4, #12]
10019834:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10019836:	46c0      	nop			; (mov r8, r8)
10019838:	100195c9 	.word	0x100195c9

1001983c <__sfputc_r>:
1001983c:	6893      	ldr	r3, [r2, #8]
1001983e:	b510      	push	{r4, lr}
10019840:	3b01      	subs	r3, #1
10019842:	6093      	str	r3, [r2, #8]
10019844:	2b00      	cmp	r3, #0
10019846:	da05      	bge.n	10019854 <__sfputc_r+0x18>
10019848:	6994      	ldr	r4, [r2, #24]
1001984a:	42a3      	cmp	r3, r4
1001984c:	db08      	blt.n	10019860 <__sfputc_r+0x24>
1001984e:	b2cb      	uxtb	r3, r1
10019850:	2b0a      	cmp	r3, #10
10019852:	d005      	beq.n	10019860 <__sfputc_r+0x24>
10019854:	6813      	ldr	r3, [r2, #0]
10019856:	1c58      	adds	r0, r3, #1
10019858:	6010      	str	r0, [r2, #0]
1001985a:	7019      	strb	r1, [r3, #0]
1001985c:	b2c8      	uxtb	r0, r1
1001985e:	e001      	b.n	10019864 <__sfputc_r+0x28>
10019860:	f7ff fd32 	bl	100192c8 <__swbuf_r>
10019864:	bd10      	pop	{r4, pc}

10019866 <__sfputs_r>:
10019866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10019868:	0006      	movs	r6, r0
1001986a:	000f      	movs	r7, r1
1001986c:	0014      	movs	r4, r2
1001986e:	18d5      	adds	r5, r2, r3
10019870:	42ac      	cmp	r4, r5
10019872:	d008      	beq.n	10019886 <__sfputs_r+0x20>
10019874:	7821      	ldrb	r1, [r4, #0]
10019876:	003a      	movs	r2, r7
10019878:	0030      	movs	r0, r6
1001987a:	f7ff ffdf 	bl	1001983c <__sfputc_r>
1001987e:	3401      	adds	r4, #1
10019880:	1c43      	adds	r3, r0, #1
10019882:	d1f5      	bne.n	10019870 <__sfputs_r+0xa>
10019884:	e000      	b.n	10019888 <__sfputs_r+0x22>
10019886:	2000      	movs	r0, #0
10019888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001988c <_vfiprintf_r>:
1001988c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001988e:	b09f      	sub	sp, #124	; 0x7c
10019890:	0006      	movs	r6, r0
10019892:	000f      	movs	r7, r1
10019894:	9202      	str	r2, [sp, #8]
10019896:	9305      	str	r3, [sp, #20]
10019898:	2800      	cmp	r0, #0
1001989a:	d004      	beq.n	100198a6 <_vfiprintf_r+0x1a>
1001989c:	6983      	ldr	r3, [r0, #24]
1001989e:	2b00      	cmp	r3, #0
100198a0:	d101      	bne.n	100198a6 <_vfiprintf_r+0x1a>
100198a2:	f7ff fed3 	bl	1001964c <__sinit>
100198a6:	4b7f      	ldr	r3, [pc, #508]	; (10019aa4 <_vfiprintf_r+0x218>)
100198a8:	429f      	cmp	r7, r3
100198aa:	d101      	bne.n	100198b0 <_vfiprintf_r+0x24>
100198ac:	6877      	ldr	r7, [r6, #4]
100198ae:	e008      	b.n	100198c2 <_vfiprintf_r+0x36>
100198b0:	4b7d      	ldr	r3, [pc, #500]	; (10019aa8 <_vfiprintf_r+0x21c>)
100198b2:	429f      	cmp	r7, r3
100198b4:	d101      	bne.n	100198ba <_vfiprintf_r+0x2e>
100198b6:	68b7      	ldr	r7, [r6, #8]
100198b8:	e003      	b.n	100198c2 <_vfiprintf_r+0x36>
100198ba:	4b7c      	ldr	r3, [pc, #496]	; (10019aac <_vfiprintf_r+0x220>)
100198bc:	429f      	cmp	r7, r3
100198be:	d100      	bne.n	100198c2 <_vfiprintf_r+0x36>
100198c0:	68f7      	ldr	r7, [r6, #12]
100198c2:	89bb      	ldrh	r3, [r7, #12]
100198c4:	071b      	lsls	r3, r3, #28
100198c6:	d50a      	bpl.n	100198de <_vfiprintf_r+0x52>
100198c8:	693b      	ldr	r3, [r7, #16]
100198ca:	2b00      	cmp	r3, #0
100198cc:	d007      	beq.n	100198de <_vfiprintf_r+0x52>
100198ce:	2300      	movs	r3, #0
100198d0:	ad06      	add	r5, sp, #24
100198d2:	616b      	str	r3, [r5, #20]
100198d4:	3320      	adds	r3, #32
100198d6:	766b      	strb	r3, [r5, #25]
100198d8:	3310      	adds	r3, #16
100198da:	76ab      	strb	r3, [r5, #26]
100198dc:	e03d      	b.n	1001995a <_vfiprintf_r+0xce>
100198de:	0039      	movs	r1, r7
100198e0:	0030      	movs	r0, r6
100198e2:	f7ff fd49 	bl	10019378 <__swsetup_r>
100198e6:	2800      	cmp	r0, #0
100198e8:	d0f1      	beq.n	100198ce <_vfiprintf_r+0x42>
100198ea:	2001      	movs	r0, #1
100198ec:	4240      	negs	r0, r0
100198ee:	e0d6      	b.n	10019a9e <_vfiprintf_r+0x212>
100198f0:	9a05      	ldr	r2, [sp, #20]
100198f2:	1d11      	adds	r1, r2, #4
100198f4:	6812      	ldr	r2, [r2, #0]
100198f6:	9105      	str	r1, [sp, #20]
100198f8:	2a00      	cmp	r2, #0
100198fa:	da00      	bge.n	100198fe <_vfiprintf_r+0x72>
100198fc:	e07f      	b.n	100199fe <_vfiprintf_r+0x172>
100198fe:	9209      	str	r2, [sp, #36]	; 0x24
10019900:	3401      	adds	r4, #1
10019902:	7823      	ldrb	r3, [r4, #0]
10019904:	2b2e      	cmp	r3, #46	; 0x2e
10019906:	d100      	bne.n	1001990a <_vfiprintf_r+0x7e>
10019908:	e08d      	b.n	10019a26 <_vfiprintf_r+0x19a>
1001990a:	7821      	ldrb	r1, [r4, #0]
1001990c:	2203      	movs	r2, #3
1001990e:	4868      	ldr	r0, [pc, #416]	; (10019ab0 <_vfiprintf_r+0x224>)
10019910:	f000 fb48 	bl	10019fa4 <memchr>
10019914:	2800      	cmp	r0, #0
10019916:	d007      	beq.n	10019928 <_vfiprintf_r+0x9c>
10019918:	4b65      	ldr	r3, [pc, #404]	; (10019ab0 <_vfiprintf_r+0x224>)
1001991a:	682a      	ldr	r2, [r5, #0]
1001991c:	1ac0      	subs	r0, r0, r3
1001991e:	2340      	movs	r3, #64	; 0x40
10019920:	4083      	lsls	r3, r0
10019922:	4313      	orrs	r3, r2
10019924:	602b      	str	r3, [r5, #0]
10019926:	3401      	adds	r4, #1
10019928:	7821      	ldrb	r1, [r4, #0]
1001992a:	1c63      	adds	r3, r4, #1
1001992c:	2206      	movs	r2, #6
1001992e:	4861      	ldr	r0, [pc, #388]	; (10019ab4 <_vfiprintf_r+0x228>)
10019930:	9302      	str	r3, [sp, #8]
10019932:	7629      	strb	r1, [r5, #24]
10019934:	f000 fb36 	bl	10019fa4 <memchr>
10019938:	2800      	cmp	r0, #0
1001993a:	d100      	bne.n	1001993e <_vfiprintf_r+0xb2>
1001993c:	e09d      	b.n	10019a7a <_vfiprintf_r+0x1ee>
1001993e:	4b5e      	ldr	r3, [pc, #376]	; (10019ab8 <_vfiprintf_r+0x22c>)
10019940:	2b00      	cmp	r3, #0
10019942:	d000      	beq.n	10019946 <_vfiprintf_r+0xba>
10019944:	e090      	b.n	10019a68 <_vfiprintf_r+0x1dc>
10019946:	2207      	movs	r2, #7
10019948:	9b05      	ldr	r3, [sp, #20]
1001994a:	3307      	adds	r3, #7
1001994c:	4393      	bics	r3, r2
1001994e:	3308      	adds	r3, #8
10019950:	9305      	str	r3, [sp, #20]
10019952:	696b      	ldr	r3, [r5, #20]
10019954:	9a03      	ldr	r2, [sp, #12]
10019956:	189b      	adds	r3, r3, r2
10019958:	616b      	str	r3, [r5, #20]
1001995a:	9c02      	ldr	r4, [sp, #8]
1001995c:	7823      	ldrb	r3, [r4, #0]
1001995e:	2b00      	cmp	r3, #0
10019960:	d104      	bne.n	1001996c <_vfiprintf_r+0xe0>
10019962:	9b02      	ldr	r3, [sp, #8]
10019964:	1ae3      	subs	r3, r4, r3
10019966:	9304      	str	r3, [sp, #16]
10019968:	d012      	beq.n	10019990 <_vfiprintf_r+0x104>
1001996a:	e003      	b.n	10019974 <_vfiprintf_r+0xe8>
1001996c:	2b25      	cmp	r3, #37	; 0x25
1001996e:	d0f8      	beq.n	10019962 <_vfiprintf_r+0xd6>
10019970:	3401      	adds	r4, #1
10019972:	e7f3      	b.n	1001995c <_vfiprintf_r+0xd0>
10019974:	9b04      	ldr	r3, [sp, #16]
10019976:	9a02      	ldr	r2, [sp, #8]
10019978:	0039      	movs	r1, r7
1001997a:	0030      	movs	r0, r6
1001997c:	f7ff ff73 	bl	10019866 <__sfputs_r>
10019980:	1c43      	adds	r3, r0, #1
10019982:	d100      	bne.n	10019986 <_vfiprintf_r+0xfa>
10019984:	e086      	b.n	10019a94 <_vfiprintf_r+0x208>
10019986:	696a      	ldr	r2, [r5, #20]
10019988:	9b04      	ldr	r3, [sp, #16]
1001998a:	4694      	mov	ip, r2
1001998c:	4463      	add	r3, ip
1001998e:	616b      	str	r3, [r5, #20]
10019990:	7823      	ldrb	r3, [r4, #0]
10019992:	2b00      	cmp	r3, #0
10019994:	d07e      	beq.n	10019a94 <_vfiprintf_r+0x208>
10019996:	2201      	movs	r2, #1
10019998:	2300      	movs	r3, #0
1001999a:	4252      	negs	r2, r2
1001999c:	606a      	str	r2, [r5, #4]
1001999e:	a902      	add	r1, sp, #8
100199a0:	3254      	adds	r2, #84	; 0x54
100199a2:	1852      	adds	r2, r2, r1
100199a4:	3401      	adds	r4, #1
100199a6:	602b      	str	r3, [r5, #0]
100199a8:	60eb      	str	r3, [r5, #12]
100199aa:	60ab      	str	r3, [r5, #8]
100199ac:	7013      	strb	r3, [r2, #0]
100199ae:	65ab      	str	r3, [r5, #88]	; 0x58
100199b0:	7821      	ldrb	r1, [r4, #0]
100199b2:	2205      	movs	r2, #5
100199b4:	4841      	ldr	r0, [pc, #260]	; (10019abc <_vfiprintf_r+0x230>)
100199b6:	f000 faf5 	bl	10019fa4 <memchr>
100199ba:	2800      	cmp	r0, #0
100199bc:	d008      	beq.n	100199d0 <_vfiprintf_r+0x144>
100199be:	4b3f      	ldr	r3, [pc, #252]	; (10019abc <_vfiprintf_r+0x230>)
100199c0:	682a      	ldr	r2, [r5, #0]
100199c2:	1ac0      	subs	r0, r0, r3
100199c4:	2301      	movs	r3, #1
100199c6:	4083      	lsls	r3, r0
100199c8:	4313      	orrs	r3, r2
100199ca:	602b      	str	r3, [r5, #0]
100199cc:	3401      	adds	r4, #1
100199ce:	e7ef      	b.n	100199b0 <_vfiprintf_r+0x124>
100199d0:	682b      	ldr	r3, [r5, #0]
100199d2:	06da      	lsls	r2, r3, #27
100199d4:	d504      	bpl.n	100199e0 <_vfiprintf_r+0x154>
100199d6:	2253      	movs	r2, #83	; 0x53
100199d8:	2120      	movs	r1, #32
100199da:	a802      	add	r0, sp, #8
100199dc:	1812      	adds	r2, r2, r0
100199de:	7011      	strb	r1, [r2, #0]
100199e0:	071a      	lsls	r2, r3, #28
100199e2:	d504      	bpl.n	100199ee <_vfiprintf_r+0x162>
100199e4:	2253      	movs	r2, #83	; 0x53
100199e6:	212b      	movs	r1, #43	; 0x2b
100199e8:	a802      	add	r0, sp, #8
100199ea:	1812      	adds	r2, r2, r0
100199ec:	7011      	strb	r1, [r2, #0]
100199ee:	7822      	ldrb	r2, [r4, #0]
100199f0:	2a2a      	cmp	r2, #42	; 0x2a
100199f2:	d100      	bne.n	100199f6 <_vfiprintf_r+0x16a>
100199f4:	e77c      	b.n	100198f0 <_vfiprintf_r+0x64>
100199f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100199f8:	2000      	movs	r0, #0
100199fa:	210a      	movs	r1, #10
100199fc:	e005      	b.n	10019a0a <_vfiprintf_r+0x17e>
100199fe:	4252      	negs	r2, r2
10019a00:	60ea      	str	r2, [r5, #12]
10019a02:	2202      	movs	r2, #2
10019a04:	4313      	orrs	r3, r2
10019a06:	602b      	str	r3, [r5, #0]
10019a08:	e77a      	b.n	10019900 <_vfiprintf_r+0x74>
10019a0a:	7822      	ldrb	r2, [r4, #0]
10019a0c:	3a30      	subs	r2, #48	; 0x30
10019a0e:	2a09      	cmp	r2, #9
10019a10:	d804      	bhi.n	10019a1c <_vfiprintf_r+0x190>
10019a12:	434b      	muls	r3, r1
10019a14:	3401      	adds	r4, #1
10019a16:	189b      	adds	r3, r3, r2
10019a18:	2001      	movs	r0, #1
10019a1a:	e7f6      	b.n	10019a0a <_vfiprintf_r+0x17e>
10019a1c:	2800      	cmp	r0, #0
10019a1e:	d100      	bne.n	10019a22 <_vfiprintf_r+0x196>
10019a20:	e76f      	b.n	10019902 <_vfiprintf_r+0x76>
10019a22:	9309      	str	r3, [sp, #36]	; 0x24
10019a24:	e76d      	b.n	10019902 <_vfiprintf_r+0x76>
10019a26:	7863      	ldrb	r3, [r4, #1]
10019a28:	2b2a      	cmp	r3, #42	; 0x2a
10019a2a:	d10a      	bne.n	10019a42 <_vfiprintf_r+0x1b6>
10019a2c:	9b05      	ldr	r3, [sp, #20]
10019a2e:	3402      	adds	r4, #2
10019a30:	1d1a      	adds	r2, r3, #4
10019a32:	681b      	ldr	r3, [r3, #0]
10019a34:	9205      	str	r2, [sp, #20]
10019a36:	2b00      	cmp	r3, #0
10019a38:	da01      	bge.n	10019a3e <_vfiprintf_r+0x1b2>
10019a3a:	2301      	movs	r3, #1
10019a3c:	425b      	negs	r3, r3
10019a3e:	9307      	str	r3, [sp, #28]
10019a40:	e763      	b.n	1001990a <_vfiprintf_r+0x7e>
10019a42:	2300      	movs	r3, #0
10019a44:	200a      	movs	r0, #10
10019a46:	001a      	movs	r2, r3
10019a48:	3401      	adds	r4, #1
10019a4a:	606b      	str	r3, [r5, #4]
10019a4c:	7821      	ldrb	r1, [r4, #0]
10019a4e:	3930      	subs	r1, #48	; 0x30
10019a50:	2909      	cmp	r1, #9
10019a52:	d804      	bhi.n	10019a5e <_vfiprintf_r+0x1d2>
10019a54:	4342      	muls	r2, r0
10019a56:	3401      	adds	r4, #1
10019a58:	1852      	adds	r2, r2, r1
10019a5a:	2301      	movs	r3, #1
10019a5c:	e7f6      	b.n	10019a4c <_vfiprintf_r+0x1c0>
10019a5e:	2b00      	cmp	r3, #0
10019a60:	d100      	bne.n	10019a64 <_vfiprintf_r+0x1d8>
10019a62:	e752      	b.n	1001990a <_vfiprintf_r+0x7e>
10019a64:	9207      	str	r2, [sp, #28]
10019a66:	e750      	b.n	1001990a <_vfiprintf_r+0x7e>
10019a68:	ab05      	add	r3, sp, #20
10019a6a:	9300      	str	r3, [sp, #0]
10019a6c:	003a      	movs	r2, r7
10019a6e:	4b14      	ldr	r3, [pc, #80]	; (10019ac0 <_vfiprintf_r+0x234>)
10019a70:	0029      	movs	r1, r5
10019a72:	0030      	movs	r0, r6
10019a74:	e000      	b.n	10019a78 <_vfiprintf_r+0x1ec>
10019a76:	bf00      	nop
10019a78:	e007      	b.n	10019a8a <_vfiprintf_r+0x1fe>
10019a7a:	ab05      	add	r3, sp, #20
10019a7c:	9300      	str	r3, [sp, #0]
10019a7e:	003a      	movs	r2, r7
10019a80:	4b0f      	ldr	r3, [pc, #60]	; (10019ac0 <_vfiprintf_r+0x234>)
10019a82:	0029      	movs	r1, r5
10019a84:	0030      	movs	r0, r6
10019a86:	f000 f88b 	bl	10019ba0 <_printf_i>
10019a8a:	9003      	str	r0, [sp, #12]
10019a8c:	9b03      	ldr	r3, [sp, #12]
10019a8e:	3301      	adds	r3, #1
10019a90:	d000      	beq.n	10019a94 <_vfiprintf_r+0x208>
10019a92:	e75e      	b.n	10019952 <_vfiprintf_r+0xc6>
10019a94:	89bb      	ldrh	r3, [r7, #12]
10019a96:	065b      	lsls	r3, r3, #25
10019a98:	d500      	bpl.n	10019a9c <_vfiprintf_r+0x210>
10019a9a:	e726      	b.n	100198ea <_vfiprintf_r+0x5e>
10019a9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10019a9e:	b01f      	add	sp, #124	; 0x7c
10019aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10019aa2:	46c0      	nop			; (mov r8, r8)
10019aa4:	1001b790 	.word	0x1001b790
10019aa8:	1001b7b0 	.word	0x1001b7b0
10019aac:	1001b7d0 	.word	0x1001b7d0
10019ab0:	1001b7f6 	.word	0x1001b7f6
10019ab4:	1001b7fa 	.word	0x1001b7fa
10019ab8:	00000000 	.word	0x00000000
10019abc:	1001b7f0 	.word	0x1001b7f0
10019ac0:	10019867 	.word	0x10019867

10019ac4 <_printf_common>:
10019ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10019ac6:	0017      	movs	r7, r2
10019ac8:	9301      	str	r3, [sp, #4]
10019aca:	688a      	ldr	r2, [r1, #8]
10019acc:	690b      	ldr	r3, [r1, #16]
10019ace:	9000      	str	r0, [sp, #0]
10019ad0:	000c      	movs	r4, r1
10019ad2:	4293      	cmp	r3, r2
10019ad4:	da00      	bge.n	10019ad8 <_printf_common+0x14>
10019ad6:	0013      	movs	r3, r2
10019ad8:	0022      	movs	r2, r4
10019ada:	603b      	str	r3, [r7, #0]
10019adc:	3243      	adds	r2, #67	; 0x43
10019ade:	7812      	ldrb	r2, [r2, #0]
10019ae0:	2a00      	cmp	r2, #0
10019ae2:	d001      	beq.n	10019ae8 <_printf_common+0x24>
10019ae4:	3301      	adds	r3, #1
10019ae6:	603b      	str	r3, [r7, #0]
10019ae8:	6823      	ldr	r3, [r4, #0]
10019aea:	069b      	lsls	r3, r3, #26
10019aec:	d502      	bpl.n	10019af4 <_printf_common+0x30>
10019aee:	683b      	ldr	r3, [r7, #0]
10019af0:	3302      	adds	r3, #2
10019af2:	603b      	str	r3, [r7, #0]
10019af4:	2506      	movs	r5, #6
10019af6:	6823      	ldr	r3, [r4, #0]
10019af8:	401d      	ands	r5, r3
10019afa:	d01e      	beq.n	10019b3a <_printf_common+0x76>
10019afc:	0023      	movs	r3, r4
10019afe:	3343      	adds	r3, #67	; 0x43
10019b00:	781b      	ldrb	r3, [r3, #0]
10019b02:	1e5a      	subs	r2, r3, #1
10019b04:	4193      	sbcs	r3, r2
10019b06:	6822      	ldr	r2, [r4, #0]
10019b08:	0692      	lsls	r2, r2, #26
10019b0a:	d51c      	bpl.n	10019b46 <_printf_common+0x82>
10019b0c:	2030      	movs	r0, #48	; 0x30
10019b0e:	18e1      	adds	r1, r4, r3
10019b10:	3143      	adds	r1, #67	; 0x43
10019b12:	7008      	strb	r0, [r1, #0]
10019b14:	0021      	movs	r1, r4
10019b16:	1c5a      	adds	r2, r3, #1
10019b18:	3145      	adds	r1, #69	; 0x45
10019b1a:	7809      	ldrb	r1, [r1, #0]
10019b1c:	18a2      	adds	r2, r4, r2
10019b1e:	3243      	adds	r2, #67	; 0x43
10019b20:	3302      	adds	r3, #2
10019b22:	7011      	strb	r1, [r2, #0]
10019b24:	e00f      	b.n	10019b46 <_printf_common+0x82>
10019b26:	0022      	movs	r2, r4
10019b28:	2301      	movs	r3, #1
10019b2a:	3219      	adds	r2, #25
10019b2c:	9901      	ldr	r1, [sp, #4]
10019b2e:	9800      	ldr	r0, [sp, #0]
10019b30:	9e08      	ldr	r6, [sp, #32]
10019b32:	47b0      	blx	r6
10019b34:	1c43      	adds	r3, r0, #1
10019b36:	d00e      	beq.n	10019b56 <_printf_common+0x92>
10019b38:	3501      	adds	r5, #1
10019b3a:	68e3      	ldr	r3, [r4, #12]
10019b3c:	683a      	ldr	r2, [r7, #0]
10019b3e:	1a9b      	subs	r3, r3, r2
10019b40:	429d      	cmp	r5, r3
10019b42:	dbf0      	blt.n	10019b26 <_printf_common+0x62>
10019b44:	e7da      	b.n	10019afc <_printf_common+0x38>
10019b46:	0022      	movs	r2, r4
10019b48:	9901      	ldr	r1, [sp, #4]
10019b4a:	3243      	adds	r2, #67	; 0x43
10019b4c:	9800      	ldr	r0, [sp, #0]
10019b4e:	9d08      	ldr	r5, [sp, #32]
10019b50:	47a8      	blx	r5
10019b52:	1c43      	adds	r3, r0, #1
10019b54:	d102      	bne.n	10019b5c <_printf_common+0x98>
10019b56:	2001      	movs	r0, #1
10019b58:	4240      	negs	r0, r0
10019b5a:	e020      	b.n	10019b9e <_printf_common+0xda>
10019b5c:	2306      	movs	r3, #6
10019b5e:	6820      	ldr	r0, [r4, #0]
10019b60:	68e1      	ldr	r1, [r4, #12]
10019b62:	683a      	ldr	r2, [r7, #0]
10019b64:	4003      	ands	r3, r0
10019b66:	2500      	movs	r5, #0
10019b68:	2b04      	cmp	r3, #4
10019b6a:	d103      	bne.n	10019b74 <_printf_common+0xb0>
10019b6c:	1a8d      	subs	r5, r1, r2
10019b6e:	43eb      	mvns	r3, r5
10019b70:	17db      	asrs	r3, r3, #31
10019b72:	401d      	ands	r5, r3
10019b74:	68a3      	ldr	r3, [r4, #8]
10019b76:	6922      	ldr	r2, [r4, #16]
10019b78:	4293      	cmp	r3, r2
10019b7a:	dd01      	ble.n	10019b80 <_printf_common+0xbc>
10019b7c:	1a9b      	subs	r3, r3, r2
10019b7e:	18ed      	adds	r5, r5, r3
10019b80:	2700      	movs	r7, #0
10019b82:	42bd      	cmp	r5, r7
10019b84:	d00a      	beq.n	10019b9c <_printf_common+0xd8>
10019b86:	0022      	movs	r2, r4
10019b88:	2301      	movs	r3, #1
10019b8a:	321a      	adds	r2, #26
10019b8c:	9901      	ldr	r1, [sp, #4]
10019b8e:	9800      	ldr	r0, [sp, #0]
10019b90:	9e08      	ldr	r6, [sp, #32]
10019b92:	47b0      	blx	r6
10019b94:	1c43      	adds	r3, r0, #1
10019b96:	d0de      	beq.n	10019b56 <_printf_common+0x92>
10019b98:	3701      	adds	r7, #1
10019b9a:	e7f2      	b.n	10019b82 <_printf_common+0xbe>
10019b9c:	2000      	movs	r0, #0
10019b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10019ba0 <_printf_i>:
10019ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
10019ba2:	b08b      	sub	sp, #44	; 0x2c
10019ba4:	9206      	str	r2, [sp, #24]
10019ba6:	000a      	movs	r2, r1
10019ba8:	3243      	adds	r2, #67	; 0x43
10019baa:	9307      	str	r3, [sp, #28]
10019bac:	9005      	str	r0, [sp, #20]
10019bae:	9204      	str	r2, [sp, #16]
10019bb0:	7e0a      	ldrb	r2, [r1, #24]
10019bb2:	000c      	movs	r4, r1
10019bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
10019bb6:	2a6e      	cmp	r2, #110	; 0x6e
10019bb8:	d100      	bne.n	10019bbc <_printf_i+0x1c>
10019bba:	e0ab      	b.n	10019d14 <_printf_i+0x174>
10019bbc:	d811      	bhi.n	10019be2 <_printf_i+0x42>
10019bbe:	2a63      	cmp	r2, #99	; 0x63
10019bc0:	d022      	beq.n	10019c08 <_printf_i+0x68>
10019bc2:	d809      	bhi.n	10019bd8 <_printf_i+0x38>
10019bc4:	2a00      	cmp	r2, #0
10019bc6:	d100      	bne.n	10019bca <_printf_i+0x2a>
10019bc8:	e0b5      	b.n	10019d36 <_printf_i+0x196>
10019bca:	2a58      	cmp	r2, #88	; 0x58
10019bcc:	d000      	beq.n	10019bd0 <_printf_i+0x30>
10019bce:	e0c5      	b.n	10019d5c <_printf_i+0x1bc>
10019bd0:	3145      	adds	r1, #69	; 0x45
10019bd2:	700a      	strb	r2, [r1, #0]
10019bd4:	4a81      	ldr	r2, [pc, #516]	; (10019ddc <_printf_i+0x23c>)
10019bd6:	e04f      	b.n	10019c78 <_printf_i+0xd8>
10019bd8:	2a64      	cmp	r2, #100	; 0x64
10019bda:	d01d      	beq.n	10019c18 <_printf_i+0x78>
10019bdc:	2a69      	cmp	r2, #105	; 0x69
10019bde:	d01b      	beq.n	10019c18 <_printf_i+0x78>
10019be0:	e0bc      	b.n	10019d5c <_printf_i+0x1bc>
10019be2:	2a73      	cmp	r2, #115	; 0x73
10019be4:	d100      	bne.n	10019be8 <_printf_i+0x48>
10019be6:	e0aa      	b.n	10019d3e <_printf_i+0x19e>
10019be8:	d809      	bhi.n	10019bfe <_printf_i+0x5e>
10019bea:	2a6f      	cmp	r2, #111	; 0x6f
10019bec:	d029      	beq.n	10019c42 <_printf_i+0xa2>
10019bee:	2a70      	cmp	r2, #112	; 0x70
10019bf0:	d000      	beq.n	10019bf4 <_printf_i+0x54>
10019bf2:	e0b3      	b.n	10019d5c <_printf_i+0x1bc>
10019bf4:	2220      	movs	r2, #32
10019bf6:	6809      	ldr	r1, [r1, #0]
10019bf8:	430a      	orrs	r2, r1
10019bfa:	6022      	str	r2, [r4, #0]
10019bfc:	e037      	b.n	10019c6e <_printf_i+0xce>
10019bfe:	2a75      	cmp	r2, #117	; 0x75
10019c00:	d01f      	beq.n	10019c42 <_printf_i+0xa2>
10019c02:	2a78      	cmp	r2, #120	; 0x78
10019c04:	d033      	beq.n	10019c6e <_printf_i+0xce>
10019c06:	e0a9      	b.n	10019d5c <_printf_i+0x1bc>
10019c08:	000e      	movs	r6, r1
10019c0a:	681a      	ldr	r2, [r3, #0]
10019c0c:	3642      	adds	r6, #66	; 0x42
10019c0e:	1d11      	adds	r1, r2, #4
10019c10:	6019      	str	r1, [r3, #0]
10019c12:	6813      	ldr	r3, [r2, #0]
10019c14:	7033      	strb	r3, [r6, #0]
10019c16:	e0a4      	b.n	10019d62 <_printf_i+0x1c2>
10019c18:	6821      	ldr	r1, [r4, #0]
10019c1a:	681a      	ldr	r2, [r3, #0]
10019c1c:	0608      	lsls	r0, r1, #24
10019c1e:	d406      	bmi.n	10019c2e <_printf_i+0x8e>
10019c20:	0649      	lsls	r1, r1, #25
10019c22:	d504      	bpl.n	10019c2e <_printf_i+0x8e>
10019c24:	1d11      	adds	r1, r2, #4
10019c26:	6019      	str	r1, [r3, #0]
10019c28:	2300      	movs	r3, #0
10019c2a:	5ed5      	ldrsh	r5, [r2, r3]
10019c2c:	e002      	b.n	10019c34 <_printf_i+0x94>
10019c2e:	1d11      	adds	r1, r2, #4
10019c30:	6019      	str	r1, [r3, #0]
10019c32:	6815      	ldr	r5, [r2, #0]
10019c34:	2d00      	cmp	r5, #0
10019c36:	da3b      	bge.n	10019cb0 <_printf_i+0x110>
10019c38:	232d      	movs	r3, #45	; 0x2d
10019c3a:	9a04      	ldr	r2, [sp, #16]
10019c3c:	426d      	negs	r5, r5
10019c3e:	7013      	strb	r3, [r2, #0]
10019c40:	e036      	b.n	10019cb0 <_printf_i+0x110>
10019c42:	6821      	ldr	r1, [r4, #0]
10019c44:	681a      	ldr	r2, [r3, #0]
10019c46:	0608      	lsls	r0, r1, #24
10019c48:	d406      	bmi.n	10019c58 <_printf_i+0xb8>
10019c4a:	0649      	lsls	r1, r1, #25
10019c4c:	d504      	bpl.n	10019c58 <_printf_i+0xb8>
10019c4e:	6815      	ldr	r5, [r2, #0]
10019c50:	1d11      	adds	r1, r2, #4
10019c52:	6019      	str	r1, [r3, #0]
10019c54:	b2ad      	uxth	r5, r5
10019c56:	e002      	b.n	10019c5e <_printf_i+0xbe>
10019c58:	1d11      	adds	r1, r2, #4
10019c5a:	6019      	str	r1, [r3, #0]
10019c5c:	6815      	ldr	r5, [r2, #0]
10019c5e:	4b5f      	ldr	r3, [pc, #380]	; (10019ddc <_printf_i+0x23c>)
10019c60:	7e22      	ldrb	r2, [r4, #24]
10019c62:	9303      	str	r3, [sp, #12]
10019c64:	2708      	movs	r7, #8
10019c66:	2a6f      	cmp	r2, #111	; 0x6f
10019c68:	d01d      	beq.n	10019ca6 <_printf_i+0x106>
10019c6a:	270a      	movs	r7, #10
10019c6c:	e01b      	b.n	10019ca6 <_printf_i+0x106>
10019c6e:	0022      	movs	r2, r4
10019c70:	2178      	movs	r1, #120	; 0x78
10019c72:	3245      	adds	r2, #69	; 0x45
10019c74:	7011      	strb	r1, [r2, #0]
10019c76:	4a5a      	ldr	r2, [pc, #360]	; (10019de0 <_printf_i+0x240>)
10019c78:	6819      	ldr	r1, [r3, #0]
10019c7a:	9203      	str	r2, [sp, #12]
10019c7c:	1d08      	adds	r0, r1, #4
10019c7e:	6822      	ldr	r2, [r4, #0]
10019c80:	6018      	str	r0, [r3, #0]
10019c82:	680d      	ldr	r5, [r1, #0]
10019c84:	0610      	lsls	r0, r2, #24
10019c86:	d402      	bmi.n	10019c8e <_printf_i+0xee>
10019c88:	0650      	lsls	r0, r2, #25
10019c8a:	d500      	bpl.n	10019c8e <_printf_i+0xee>
10019c8c:	b2ad      	uxth	r5, r5
10019c8e:	07d3      	lsls	r3, r2, #31
10019c90:	d502      	bpl.n	10019c98 <_printf_i+0xf8>
10019c92:	2320      	movs	r3, #32
10019c94:	431a      	orrs	r2, r3
10019c96:	6022      	str	r2, [r4, #0]
10019c98:	2710      	movs	r7, #16
10019c9a:	2d00      	cmp	r5, #0
10019c9c:	d103      	bne.n	10019ca6 <_printf_i+0x106>
10019c9e:	2320      	movs	r3, #32
10019ca0:	6822      	ldr	r2, [r4, #0]
10019ca2:	439a      	bics	r2, r3
10019ca4:	6022      	str	r2, [r4, #0]
10019ca6:	0023      	movs	r3, r4
10019ca8:	2200      	movs	r2, #0
10019caa:	3343      	adds	r3, #67	; 0x43
10019cac:	701a      	strb	r2, [r3, #0]
10019cae:	e002      	b.n	10019cb6 <_printf_i+0x116>
10019cb0:	270a      	movs	r7, #10
10019cb2:	4b4a      	ldr	r3, [pc, #296]	; (10019ddc <_printf_i+0x23c>)
10019cb4:	9303      	str	r3, [sp, #12]
10019cb6:	6863      	ldr	r3, [r4, #4]
10019cb8:	60a3      	str	r3, [r4, #8]
10019cba:	2b00      	cmp	r3, #0
10019cbc:	db09      	blt.n	10019cd2 <_printf_i+0x132>
10019cbe:	2204      	movs	r2, #4
10019cc0:	6821      	ldr	r1, [r4, #0]
10019cc2:	4391      	bics	r1, r2
10019cc4:	6021      	str	r1, [r4, #0]
10019cc6:	2d00      	cmp	r5, #0
10019cc8:	d105      	bne.n	10019cd6 <_printf_i+0x136>
10019cca:	9e04      	ldr	r6, [sp, #16]
10019ccc:	2b00      	cmp	r3, #0
10019cce:	d011      	beq.n	10019cf4 <_printf_i+0x154>
10019cd0:	e07b      	b.n	10019dca <_printf_i+0x22a>
10019cd2:	2d00      	cmp	r5, #0
10019cd4:	d079      	beq.n	10019dca <_printf_i+0x22a>
10019cd6:	9e04      	ldr	r6, [sp, #16]
10019cd8:	0028      	movs	r0, r5
10019cda:	0039      	movs	r1, r7
10019cdc:	f7fd fa68 	bl	100171b0 <__aeabi_uidivmod>
10019ce0:	9b03      	ldr	r3, [sp, #12]
10019ce2:	3e01      	subs	r6, #1
10019ce4:	5c5b      	ldrb	r3, [r3, r1]
10019ce6:	0028      	movs	r0, r5
10019ce8:	7033      	strb	r3, [r6, #0]
10019cea:	0039      	movs	r1, r7
10019cec:	f7fd f9da 	bl	100170a4 <__aeabi_uidiv>
10019cf0:	1e05      	subs	r5, r0, #0
10019cf2:	d1f1      	bne.n	10019cd8 <_printf_i+0x138>
10019cf4:	2f08      	cmp	r7, #8
10019cf6:	d109      	bne.n	10019d0c <_printf_i+0x16c>
10019cf8:	6823      	ldr	r3, [r4, #0]
10019cfa:	07db      	lsls	r3, r3, #31
10019cfc:	d506      	bpl.n	10019d0c <_printf_i+0x16c>
10019cfe:	6863      	ldr	r3, [r4, #4]
10019d00:	6922      	ldr	r2, [r4, #16]
10019d02:	4293      	cmp	r3, r2
10019d04:	dc02      	bgt.n	10019d0c <_printf_i+0x16c>
10019d06:	2330      	movs	r3, #48	; 0x30
10019d08:	3e01      	subs	r6, #1
10019d0a:	7033      	strb	r3, [r6, #0]
10019d0c:	9b04      	ldr	r3, [sp, #16]
10019d0e:	1b9b      	subs	r3, r3, r6
10019d10:	6123      	str	r3, [r4, #16]
10019d12:	e02b      	b.n	10019d6c <_printf_i+0x1cc>
10019d14:	6809      	ldr	r1, [r1, #0]
10019d16:	681a      	ldr	r2, [r3, #0]
10019d18:	0608      	lsls	r0, r1, #24
10019d1a:	d407      	bmi.n	10019d2c <_printf_i+0x18c>
10019d1c:	0649      	lsls	r1, r1, #25
10019d1e:	d505      	bpl.n	10019d2c <_printf_i+0x18c>
10019d20:	1d11      	adds	r1, r2, #4
10019d22:	6019      	str	r1, [r3, #0]
10019d24:	6813      	ldr	r3, [r2, #0]
10019d26:	8aa2      	ldrh	r2, [r4, #20]
10019d28:	801a      	strh	r2, [r3, #0]
10019d2a:	e004      	b.n	10019d36 <_printf_i+0x196>
10019d2c:	1d11      	adds	r1, r2, #4
10019d2e:	6019      	str	r1, [r3, #0]
10019d30:	6813      	ldr	r3, [r2, #0]
10019d32:	6962      	ldr	r2, [r4, #20]
10019d34:	601a      	str	r2, [r3, #0]
10019d36:	2300      	movs	r3, #0
10019d38:	9e04      	ldr	r6, [sp, #16]
10019d3a:	6123      	str	r3, [r4, #16]
10019d3c:	e016      	b.n	10019d6c <_printf_i+0x1cc>
10019d3e:	681a      	ldr	r2, [r3, #0]
10019d40:	1d11      	adds	r1, r2, #4
10019d42:	6019      	str	r1, [r3, #0]
10019d44:	6816      	ldr	r6, [r2, #0]
10019d46:	2100      	movs	r1, #0
10019d48:	6862      	ldr	r2, [r4, #4]
10019d4a:	0030      	movs	r0, r6
10019d4c:	f000 f92a 	bl	10019fa4 <memchr>
10019d50:	2800      	cmp	r0, #0
10019d52:	d001      	beq.n	10019d58 <_printf_i+0x1b8>
10019d54:	1b80      	subs	r0, r0, r6
10019d56:	6060      	str	r0, [r4, #4]
10019d58:	6863      	ldr	r3, [r4, #4]
10019d5a:	e003      	b.n	10019d64 <_printf_i+0x1c4>
10019d5c:	0026      	movs	r6, r4
10019d5e:	3642      	adds	r6, #66	; 0x42
10019d60:	7032      	strb	r2, [r6, #0]
10019d62:	2301      	movs	r3, #1
10019d64:	6123      	str	r3, [r4, #16]
10019d66:	2300      	movs	r3, #0
10019d68:	9a04      	ldr	r2, [sp, #16]
10019d6a:	7013      	strb	r3, [r2, #0]
10019d6c:	9b07      	ldr	r3, [sp, #28]
10019d6e:	aa09      	add	r2, sp, #36	; 0x24
10019d70:	9300      	str	r3, [sp, #0]
10019d72:	0021      	movs	r1, r4
10019d74:	9b06      	ldr	r3, [sp, #24]
10019d76:	9805      	ldr	r0, [sp, #20]
10019d78:	f7ff fea4 	bl	10019ac4 <_printf_common>
10019d7c:	1c43      	adds	r3, r0, #1
10019d7e:	d102      	bne.n	10019d86 <_printf_i+0x1e6>
10019d80:	2001      	movs	r0, #1
10019d82:	4240      	negs	r0, r0
10019d84:	e027      	b.n	10019dd6 <_printf_i+0x236>
10019d86:	6923      	ldr	r3, [r4, #16]
10019d88:	0032      	movs	r2, r6
10019d8a:	9906      	ldr	r1, [sp, #24]
10019d8c:	9805      	ldr	r0, [sp, #20]
10019d8e:	9d07      	ldr	r5, [sp, #28]
10019d90:	47a8      	blx	r5
10019d92:	1c43      	adds	r3, r0, #1
10019d94:	d0f4      	beq.n	10019d80 <_printf_i+0x1e0>
10019d96:	6823      	ldr	r3, [r4, #0]
10019d98:	2500      	movs	r5, #0
10019d9a:	079b      	lsls	r3, r3, #30
10019d9c:	d40f      	bmi.n	10019dbe <_printf_i+0x21e>
10019d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10019da0:	68e0      	ldr	r0, [r4, #12]
10019da2:	4298      	cmp	r0, r3
10019da4:	da17      	bge.n	10019dd6 <_printf_i+0x236>
10019da6:	0018      	movs	r0, r3
10019da8:	e015      	b.n	10019dd6 <_printf_i+0x236>
10019daa:	0022      	movs	r2, r4
10019dac:	2301      	movs	r3, #1
10019dae:	3219      	adds	r2, #25
10019db0:	9906      	ldr	r1, [sp, #24]
10019db2:	9805      	ldr	r0, [sp, #20]
10019db4:	9e07      	ldr	r6, [sp, #28]
10019db6:	47b0      	blx	r6
10019db8:	1c43      	adds	r3, r0, #1
10019dba:	d0e1      	beq.n	10019d80 <_printf_i+0x1e0>
10019dbc:	3501      	adds	r5, #1
10019dbe:	68e3      	ldr	r3, [r4, #12]
10019dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
10019dc2:	1a9b      	subs	r3, r3, r2
10019dc4:	429d      	cmp	r5, r3
10019dc6:	dbf0      	blt.n	10019daa <_printf_i+0x20a>
10019dc8:	e7e9      	b.n	10019d9e <_printf_i+0x1fe>
10019dca:	0026      	movs	r6, r4
10019dcc:	9b03      	ldr	r3, [sp, #12]
10019dce:	3642      	adds	r6, #66	; 0x42
10019dd0:	781b      	ldrb	r3, [r3, #0]
10019dd2:	7033      	strb	r3, [r6, #0]
10019dd4:	e78e      	b.n	10019cf4 <_printf_i+0x154>
10019dd6:	b00b      	add	sp, #44	; 0x2c
10019dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10019dda:	46c0      	nop			; (mov r8, r8)
10019ddc:	1001b801 	.word	0x1001b801
10019de0:	1001b812 	.word	0x1001b812

10019de4 <_putc_r>:
10019de4:	b570      	push	{r4, r5, r6, lr}
10019de6:	0006      	movs	r6, r0
10019de8:	000d      	movs	r5, r1
10019dea:	0014      	movs	r4, r2
10019dec:	2800      	cmp	r0, #0
10019dee:	d004      	beq.n	10019dfa <_putc_r+0x16>
10019df0:	6983      	ldr	r3, [r0, #24]
10019df2:	2b00      	cmp	r3, #0
10019df4:	d101      	bne.n	10019dfa <_putc_r+0x16>
10019df6:	f7ff fc29 	bl	1001964c <__sinit>
10019dfa:	4b12      	ldr	r3, [pc, #72]	; (10019e44 <_putc_r+0x60>)
10019dfc:	429c      	cmp	r4, r3
10019dfe:	d101      	bne.n	10019e04 <_putc_r+0x20>
10019e00:	6874      	ldr	r4, [r6, #4]
10019e02:	e008      	b.n	10019e16 <_putc_r+0x32>
10019e04:	4b10      	ldr	r3, [pc, #64]	; (10019e48 <_putc_r+0x64>)
10019e06:	429c      	cmp	r4, r3
10019e08:	d101      	bne.n	10019e0e <_putc_r+0x2a>
10019e0a:	68b4      	ldr	r4, [r6, #8]
10019e0c:	e003      	b.n	10019e16 <_putc_r+0x32>
10019e0e:	4b0f      	ldr	r3, [pc, #60]	; (10019e4c <_putc_r+0x68>)
10019e10:	429c      	cmp	r4, r3
10019e12:	d100      	bne.n	10019e16 <_putc_r+0x32>
10019e14:	68f4      	ldr	r4, [r6, #12]
10019e16:	68a3      	ldr	r3, [r4, #8]
10019e18:	3b01      	subs	r3, #1
10019e1a:	60a3      	str	r3, [r4, #8]
10019e1c:	2b00      	cmp	r3, #0
10019e1e:	da05      	bge.n	10019e2c <_putc_r+0x48>
10019e20:	69a2      	ldr	r2, [r4, #24]
10019e22:	4293      	cmp	r3, r2
10019e24:	db08      	blt.n	10019e38 <_putc_r+0x54>
10019e26:	b2eb      	uxtb	r3, r5
10019e28:	2b0a      	cmp	r3, #10
10019e2a:	d005      	beq.n	10019e38 <_putc_r+0x54>
10019e2c:	6823      	ldr	r3, [r4, #0]
10019e2e:	b2e8      	uxtb	r0, r5
10019e30:	1c5a      	adds	r2, r3, #1
10019e32:	6022      	str	r2, [r4, #0]
10019e34:	701d      	strb	r5, [r3, #0]
10019e36:	e004      	b.n	10019e42 <_putc_r+0x5e>
10019e38:	0022      	movs	r2, r4
10019e3a:	0029      	movs	r1, r5
10019e3c:	0030      	movs	r0, r6
10019e3e:	f7ff fa43 	bl	100192c8 <__swbuf_r>
10019e42:	bd70      	pop	{r4, r5, r6, pc}
10019e44:	1001b790 	.word	0x1001b790
10019e48:	1001b7b0 	.word	0x1001b7b0
10019e4c:	1001b7d0 	.word	0x1001b7d0

10019e50 <__sread>:
10019e50:	b570      	push	{r4, r5, r6, lr}
10019e52:	000c      	movs	r4, r1
10019e54:	250e      	movs	r5, #14
10019e56:	5f49      	ldrsh	r1, [r1, r5]
10019e58:	f000 f8b0 	bl	10019fbc <_read_r>
10019e5c:	2800      	cmp	r0, #0
10019e5e:	db03      	blt.n	10019e68 <__sread+0x18>
10019e60:	6d63      	ldr	r3, [r4, #84]	; 0x54
10019e62:	181b      	adds	r3, r3, r0
10019e64:	6563      	str	r3, [r4, #84]	; 0x54
10019e66:	e003      	b.n	10019e70 <__sread+0x20>
10019e68:	89a2      	ldrh	r2, [r4, #12]
10019e6a:	4b02      	ldr	r3, [pc, #8]	; (10019e74 <__sread+0x24>)
10019e6c:	4013      	ands	r3, r2
10019e6e:	81a3      	strh	r3, [r4, #12]
10019e70:	bd70      	pop	{r4, r5, r6, pc}
10019e72:	46c0      	nop			; (mov r8, r8)
10019e74:	ffffefff 	.word	0xffffefff

10019e78 <__swrite>:
10019e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10019e7a:	001f      	movs	r7, r3
10019e7c:	898b      	ldrh	r3, [r1, #12]
10019e7e:	0005      	movs	r5, r0
10019e80:	000c      	movs	r4, r1
10019e82:	0016      	movs	r6, r2
10019e84:	05db      	lsls	r3, r3, #23
10019e86:	d505      	bpl.n	10019e94 <__swrite+0x1c>
10019e88:	230e      	movs	r3, #14
10019e8a:	5ec9      	ldrsh	r1, [r1, r3]
10019e8c:	2200      	movs	r2, #0
10019e8e:	2302      	movs	r3, #2
10019e90:	f000 f874 	bl	10019f7c <_lseek_r>
10019e94:	89a2      	ldrh	r2, [r4, #12]
10019e96:	4b05      	ldr	r3, [pc, #20]	; (10019eac <__swrite+0x34>)
10019e98:	0028      	movs	r0, r5
10019e9a:	4013      	ands	r3, r2
10019e9c:	81a3      	strh	r3, [r4, #12]
10019e9e:	0032      	movs	r2, r6
10019ea0:	230e      	movs	r3, #14
10019ea2:	5ee1      	ldrsh	r1, [r4, r3]
10019ea4:	003b      	movs	r3, r7
10019ea6:	f000 f81f 	bl	10019ee8 <_write_r>
10019eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10019eac:	ffffefff 	.word	0xffffefff

10019eb0 <__sseek>:
10019eb0:	b570      	push	{r4, r5, r6, lr}
10019eb2:	000c      	movs	r4, r1
10019eb4:	250e      	movs	r5, #14
10019eb6:	5f49      	ldrsh	r1, [r1, r5]
10019eb8:	f000 f860 	bl	10019f7c <_lseek_r>
10019ebc:	89a3      	ldrh	r3, [r4, #12]
10019ebe:	1c42      	adds	r2, r0, #1
10019ec0:	d103      	bne.n	10019eca <__sseek+0x1a>
10019ec2:	4a05      	ldr	r2, [pc, #20]	; (10019ed8 <__sseek+0x28>)
10019ec4:	4013      	ands	r3, r2
10019ec6:	81a3      	strh	r3, [r4, #12]
10019ec8:	e004      	b.n	10019ed4 <__sseek+0x24>
10019eca:	2280      	movs	r2, #128	; 0x80
10019ecc:	0152      	lsls	r2, r2, #5
10019ece:	4313      	orrs	r3, r2
10019ed0:	81a3      	strh	r3, [r4, #12]
10019ed2:	6560      	str	r0, [r4, #84]	; 0x54
10019ed4:	bd70      	pop	{r4, r5, r6, pc}
10019ed6:	46c0      	nop			; (mov r8, r8)
10019ed8:	ffffefff 	.word	0xffffefff

10019edc <__sclose>:
10019edc:	b510      	push	{r4, lr}
10019ede:	230e      	movs	r3, #14
10019ee0:	5ec9      	ldrsh	r1, [r1, r3]
10019ee2:	f000 f815 	bl	10019f10 <_close_r>
10019ee6:	bd10      	pop	{r4, pc}

10019ee8 <_write_r>:
10019ee8:	b570      	push	{r4, r5, r6, lr}
10019eea:	0005      	movs	r5, r0
10019eec:	0008      	movs	r0, r1
10019eee:	0011      	movs	r1, r2
10019ef0:	2200      	movs	r2, #0
10019ef2:	4c06      	ldr	r4, [pc, #24]	; (10019f0c <_write_r+0x24>)
10019ef4:	6022      	str	r2, [r4, #0]
10019ef6:	001a      	movs	r2, r3
10019ef8:	f7f6 fb90 	bl	1001061c <_write>
10019efc:	1c43      	adds	r3, r0, #1
10019efe:	d103      	bne.n	10019f08 <_write_r+0x20>
10019f00:	6823      	ldr	r3, [r4, #0]
10019f02:	2b00      	cmp	r3, #0
10019f04:	d000      	beq.n	10019f08 <_write_r+0x20>
10019f06:	602b      	str	r3, [r5, #0]
10019f08:	bd70      	pop	{r4, r5, r6, pc}
10019f0a:	46c0      	nop			; (mov r8, r8)
10019f0c:	1001d6d4 	.word	0x1001d6d4

10019f10 <_close_r>:
10019f10:	2300      	movs	r3, #0
10019f12:	b570      	push	{r4, r5, r6, lr}
10019f14:	4c06      	ldr	r4, [pc, #24]	; (10019f30 <_close_r+0x20>)
10019f16:	0005      	movs	r5, r0
10019f18:	0008      	movs	r0, r1
10019f1a:	6023      	str	r3, [r4, #0]
10019f1c:	f7f6 fbd2 	bl	100106c4 <_close>
10019f20:	1c43      	adds	r3, r0, #1
10019f22:	d103      	bne.n	10019f2c <_close_r+0x1c>
10019f24:	6823      	ldr	r3, [r4, #0]
10019f26:	2b00      	cmp	r3, #0
10019f28:	d000      	beq.n	10019f2c <_close_r+0x1c>
10019f2a:	602b      	str	r3, [r5, #0]
10019f2c:	bd70      	pop	{r4, r5, r6, pc}
10019f2e:	46c0      	nop			; (mov r8, r8)
10019f30:	1001d6d4 	.word	0x1001d6d4

10019f34 <_fstat_r>:
10019f34:	2300      	movs	r3, #0
10019f36:	b570      	push	{r4, r5, r6, lr}
10019f38:	4c06      	ldr	r4, [pc, #24]	; (10019f54 <_fstat_r+0x20>)
10019f3a:	0005      	movs	r5, r0
10019f3c:	0008      	movs	r0, r1
10019f3e:	0011      	movs	r1, r2
10019f40:	6023      	str	r3, [r4, #0]
10019f42:	f7f6 fbc9 	bl	100106d8 <_fstat>
10019f46:	1c43      	adds	r3, r0, #1
10019f48:	d103      	bne.n	10019f52 <_fstat_r+0x1e>
10019f4a:	6823      	ldr	r3, [r4, #0]
10019f4c:	2b00      	cmp	r3, #0
10019f4e:	d000      	beq.n	10019f52 <_fstat_r+0x1e>
10019f50:	602b      	str	r3, [r5, #0]
10019f52:	bd70      	pop	{r4, r5, r6, pc}
10019f54:	1001d6d4 	.word	0x1001d6d4

10019f58 <_isatty_r>:
10019f58:	2300      	movs	r3, #0
10019f5a:	b570      	push	{r4, r5, r6, lr}
10019f5c:	4c06      	ldr	r4, [pc, #24]	; (10019f78 <_isatty_r+0x20>)
10019f5e:	0005      	movs	r5, r0
10019f60:	0008      	movs	r0, r1
10019f62:	6023      	str	r3, [r4, #0]
10019f64:	f7f6 fbc6 	bl	100106f4 <_isatty>
10019f68:	1c43      	adds	r3, r0, #1
10019f6a:	d103      	bne.n	10019f74 <_isatty_r+0x1c>
10019f6c:	6823      	ldr	r3, [r4, #0]
10019f6e:	2b00      	cmp	r3, #0
10019f70:	d000      	beq.n	10019f74 <_isatty_r+0x1c>
10019f72:	602b      	str	r3, [r5, #0]
10019f74:	bd70      	pop	{r4, r5, r6, pc}
10019f76:	46c0      	nop			; (mov r8, r8)
10019f78:	1001d6d4 	.word	0x1001d6d4

10019f7c <_lseek_r>:
10019f7c:	b570      	push	{r4, r5, r6, lr}
10019f7e:	0005      	movs	r5, r0
10019f80:	0008      	movs	r0, r1
10019f82:	0011      	movs	r1, r2
10019f84:	2200      	movs	r2, #0
10019f86:	4c06      	ldr	r4, [pc, #24]	; (10019fa0 <_lseek_r+0x24>)
10019f88:	6022      	str	r2, [r4, #0]
10019f8a:	001a      	movs	r2, r3
10019f8c:	f7f6 fbbc 	bl	10010708 <_lseek>
10019f90:	1c43      	adds	r3, r0, #1
10019f92:	d103      	bne.n	10019f9c <_lseek_r+0x20>
10019f94:	6823      	ldr	r3, [r4, #0]
10019f96:	2b00      	cmp	r3, #0
10019f98:	d000      	beq.n	10019f9c <_lseek_r+0x20>
10019f9a:	602b      	str	r3, [r5, #0]
10019f9c:	bd70      	pop	{r4, r5, r6, pc}
10019f9e:	46c0      	nop			; (mov r8, r8)
10019fa0:	1001d6d4 	.word	0x1001d6d4

10019fa4 <memchr>:
10019fa4:	b2c9      	uxtb	r1, r1
10019fa6:	1882      	adds	r2, r0, r2
10019fa8:	4290      	cmp	r0, r2
10019faa:	d004      	beq.n	10019fb6 <memchr+0x12>
10019fac:	7803      	ldrb	r3, [r0, #0]
10019fae:	428b      	cmp	r3, r1
10019fb0:	d002      	beq.n	10019fb8 <memchr+0x14>
10019fb2:	3001      	adds	r0, #1
10019fb4:	e7f8      	b.n	10019fa8 <memchr+0x4>
10019fb6:	2000      	movs	r0, #0
10019fb8:	4770      	bx	lr
	...

10019fbc <_read_r>:
10019fbc:	b570      	push	{r4, r5, r6, lr}
10019fbe:	0005      	movs	r5, r0
10019fc0:	0008      	movs	r0, r1
10019fc2:	0011      	movs	r1, r2
10019fc4:	2200      	movs	r2, #0
10019fc6:	4c06      	ldr	r4, [pc, #24]	; (10019fe0 <_read_r+0x24>)
10019fc8:	6022      	str	r2, [r4, #0]
10019fca:	001a      	movs	r2, r3
10019fcc:	f7f6 fafc 	bl	100105c8 <_read>
10019fd0:	1c43      	adds	r3, r0, #1
10019fd2:	d103      	bne.n	10019fdc <_read_r+0x20>
10019fd4:	6823      	ldr	r3, [r4, #0]
10019fd6:	2b00      	cmp	r3, #0
10019fd8:	d000      	beq.n	10019fdc <_read_r+0x20>
10019fda:	602b      	str	r3, [r5, #0]
10019fdc:	bd70      	pop	{r4, r5, r6, pc}
10019fde:	46c0      	nop			; (mov r8, r8)
10019fe0:	1001d6d4 	.word	0x1001d6d4
10019fe4:	0000000d 	.word	0x0000000d
10019fe8:	6332695b 	.word	0x6332695b
10019fec:	6972775f 	.word	0x6972775f
10019ff0:	205d6574 	.word	0x205d6574
10019ff4:	43324920 	.word	0x43324920
10019ff8:	4d495420 	.word	0x4d495420
10019ffc:	54554f45 	.word	0x54554f45
1001a000:	00002121 	.word	0x00002121
1001a004:	6332695b 	.word	0x6332695b
1001a008:	6165725f 	.word	0x6165725f
1001a00c:	20205d64 	.word	0x20205d64
1001a010:	20433249 	.word	0x20433249
1001a014:	454d4954 	.word	0x454d4954
1001a018:	2154554f 	.word	0x2154554f
1001a01c:	00000021 	.word	0x00000021
1001a020:	0d0a6425 	.word	0x0d0a6425
1001a024:	00000000 	.word	0x00000000
1001a028:	78352325 	.word	0x78352325
1001a02c:	2325203a 	.word	0x2325203a
1001a030:	0a0d7835 	.word	0x0a0d7835
1001a034:	00000000 	.word	0x00000000
1001a038:	5f504d44 	.word	0x5f504d44
1001a03c:	0a214e4f 	.word	0x0a214e4f
1001a040:	0000000d 	.word	0x0000000d
1001a044:	534e4553 	.word	0x534e4553
1001a048:	2153524f 	.word	0x2153524f
1001a04c:	00000d0a 	.word	0x00000d0a
1001a050:	64616552 	.word	0x64616552
1001a054:	20676e69 	.word	0x20676e69
1001a058:	2050544f 	.word	0x2050544f
1001a05c:	69676552 	.word	0x69676552
1001a060:	72657473 	.word	0x72657473
1001a064:	72724520 	.word	0x72724520
1001a068:	002e726f 	.word	0x002e726f
1001a06c:	65636341 	.word	0x65636341
1001a070:	544f206c 	.word	0x544f206c
1001a074:	64253a50 	.word	0x64253a50
1001a078:	6425202c 	.word	0x6425202c
1001a07c:	6425202c 	.word	0x6425202c
1001a080:	0000000a 	.word	0x0000000a
1001a084:	45434341 	.word	0x45434341
1001a088:	52433a4c 	.word	0x52433a4c
1001a08c:	52455449 	.word	0x52455449
1001a090:	41204149 	.word	0x41204149
1001a094:	00000000 	.word	0x00000000
1001a098:	73616942 	.word	0x73616942
1001a09c:	6968535f 	.word	0x6968535f
1001a0a0:	253d7466 	.word	0x253d7466
1001a0a4:	66342e37 	.word	0x66342e37
1001a0a8:	6942202c 	.word	0x6942202c
1001a0ac:	525f7361 	.word	0x525f7361
1001a0b0:	253d6765 	.word	0x253d6765
1001a0b4:	66342e37 	.word	0x66342e37
1001a0b8:	6942202c 	.word	0x6942202c
1001a0bc:	485f7361 	.word	0x485f7361
1001a0c0:	3d545357 	.word	0x3d545357
1001a0c4:	342e3725 	.word	0x342e3725
1001a0c8:	000a0d66 	.word	0x000a0d66
1001a0cc:	2050544f 	.word	0x2050544f
1001a0d0:	756c6176 	.word	0x756c6176
1001a0d4:	25203a65 	.word	0x25203a65
1001a0d8:	66342e37 	.word	0x66342e37
1001a0dc:	00000a0d 	.word	0x00000a0d
1001a0e0:	69746172 	.word	0x69746172
1001a0e4:	37253d6f 	.word	0x37253d6f
1001a0e8:	2c66342e 	.word	0x2c66342e
1001a0ec:	72687420 	.word	0x72687420
1001a0f0:	6f687365 	.word	0x6f687365
1001a0f4:	253d646c 	.word	0x253d646c
1001a0f8:	66342e37 	.word	0x66342e37
1001a0fc:	00000a0d 	.word	0x00000a0d
1001a100:	45434341 	.word	0x45434341
1001a104:	6146204c 	.word	0x6146204c
1001a108:	41206c69 	.word	0x41206c69
1001a10c:	20736978 	.word	0x20736978
1001a110:	6425203d 	.word	0x6425203d
1001a114:	0000000a 	.word	0x0000000a
1001a118:	45434341 	.word	0x45434341
1001a11c:	52433a4c 	.word	0x52433a4c
1001a120:	52455449 	.word	0x52455449
1001a124:	42204149 	.word	0x42204149
1001a128:	0000000d 	.word	0x0000000d
1001a12c:	206e694d 	.word	0x206e694d
1001a130:	203a474d 	.word	0x203a474d
1001a134:	342e3725 	.word	0x342e3725
1001a138:	000a0d66 	.word	0x000a0d66
1001a13c:	2078614d 	.word	0x2078614d
1001a140:	203a474d 	.word	0x203a474d
1001a144:	342e3725 	.word	0x342e3725
1001a148:	000a0d66 	.word	0x000a0d66
1001a14c:	73616942 	.word	0x73616942
1001a150:	6968735f 	.word	0x6968735f
1001a154:	253d7466 	.word	0x253d7466
1001a158:	66342e37 	.word	0x66342e37
1001a15c:	7473202c 	.word	0x7473202c
1001a160:	2e37253d 	.word	0x2e37253d
1001a164:	202c6634 	.word	0x202c6634
1001a168:	3d676572 	.word	0x3d676572
1001a16c:	342e3725 	.word	0x342e3725
1001a170:	00000a66 	.word	0x00000a66
1001a174:	65636341 	.word	0x65636341
1001a178:	4146206c 	.word	0x4146206c
1001a17c:	61204c49 	.word	0x61204c49
1001a180:	3a736978 	.word	0x3a736978
1001a184:	3c206425 	.word	0x3c206425
1001a188:	3232203d 	.word	0x3232203d
1001a18c:	20676d35 	.word	0x20676d35
1001a190:	3e20726f 	.word	0x3e20726f
1001a194:	3736203d 	.word	0x3736203d
1001a198:	0a676d35 	.word	0x0a676d35
1001a19c:	00000000 	.word	0x00000000
1001a1a0:	65636341 	.word	0x65636341
1001a1a4:	52433a6c 	.word	0x52433a6c
1001a1a8:	52455449 	.word	0x52455449
1001a1ac:	43204149 	.word	0x43204149
1001a1b0:	6962203a 	.word	0x6962203a
1001a1b4:	6c207361 	.word	0x6c207361
1001a1b8:	20737365 	.word	0x20737365
1001a1bc:	6e616874 	.word	0x6e616874
1001a1c0:	2e372520 	.word	0x2e372520
1001a1c4:	000a6634 	.word	0x000a6634
1001a1c8:	4c494146 	.word	0x4c494146
1001a1cc:	203a4445 	.word	0x203a4445
1001a1d0:	65636341 	.word	0x65636341
1001a1d4:	7861206c 	.word	0x7861206c
1001a1d8:	253a7369 	.word	0x253a7369
1001a1dc:	203d2064 	.word	0x203d2064
1001a1e0:	20646c25 	.word	0x20646c25
1001a1e4:	3035203e 	.word	0x3035203e
1001a1e8:	0a676d30 	.word	0x0a676d30
1001a1ec:	00000000 	.word	0x00000000
1001a1f0:	6f727947 	.word	0x6f727947
1001a1f4:	50544f20 	.word	0x50544f20
1001a1f8:	2c64253a 	.word	0x2c64253a
1001a1fc:	2c642520 	.word	0x2c642520
1001a200:	0d642520 	.word	0x0d642520
1001a204:	0000000a 	.word	0x0000000a
1001a208:	4f525947 	.word	0x4f525947
1001a20c:	4952433a 	.word	0x4952433a
1001a210:	49524554 	.word	0x49524554
1001a214:	00412041 	.word	0x00412041
1001a218:	6f727947 	.word	0x6f727947
1001a21c:	69614620 	.word	0x69614620
1001a220:	7841206c 	.word	0x7841206c
1001a224:	3d207369 	.word	0x3d207369
1001a228:	0a642520 	.word	0x0a642520
1001a22c:	00000000 	.word	0x00000000
1001a230:	4f525947 	.word	0x4f525947
1001a234:	4952433a 	.word	0x4952433a
1001a238:	49524554 	.word	0x49524554
1001a23c:	0d422041 	.word	0x0d422041
1001a240:	00000000 	.word	0x00000000
1001a244:	2078614d 	.word	0x2078614d
1001a248:	3a535044 	.word	0x3a535044
1001a24c:	2e372520 	.word	0x2e372520
1001a250:	0a0d6634 	.word	0x0a0d6634
1001a254:	00000000 	.word	0x00000000
1001a258:	4f525947 	.word	0x4f525947
1001a25c:	49414620 	.word	0x49414620
1001a260:	7861204c 	.word	0x7861204c
1001a264:	253a7369 	.word	0x253a7369
1001a268:	72672064 	.word	0x72672064
1001a26c:	65746165 	.word	0x65746165
1001a270:	68742072 	.word	0x68742072
1001a274:	36206e61 	.word	0x36206e61
1001a278:	73706430 	.word	0x73706430
1001a27c:	0000000a 	.word	0x0000000a
1001a280:	6f727947 	.word	0x6f727947
1001a284:	4952433a 	.word	0x4952433a
1001a288:	49524554 	.word	0x49524554
1001a28c:	3a432041 	.word	0x3a432041
1001a290:	61696220 	.word	0x61696220
1001a294:	656c2073 	.word	0x656c2073
1001a298:	74207373 	.word	0x74207373
1001a29c:	206e6168 	.word	0x206e6168
1001a2a0:	342e3725 	.word	0x342e3725
1001a2a4:	00000a66 	.word	0x00000a66
1001a2a8:	4c494146 	.word	0x4c494146
1001a2ac:	203a4445 	.word	0x203a4445
1001a2b0:	6f727947 	.word	0x6f727947
1001a2b4:	69786120 	.word	0x69786120
1001a2b8:	64253a73 	.word	0x64253a73
1001a2bc:	25203d20 	.word	0x25203d20
1001a2c0:	3e20646c 	.word	0x3e20646c
1001a2c4:	64303220 	.word	0x64303220
1001a2c8:	000a7370 	.word	0x000a7370
1001a2cc:	72617453 	.word	0x72617453
1001a2d0:	676e6974 	.word	0x676e6974
1001a2d4:	61694220 	.word	0x61694220
1001a2d8:	6f4c2073 	.word	0x6f4c2073
1001a2dc:	5220706f 	.word	0x5220706f
1001a2e0:	73646165 	.word	0x73646165
1001a2e4:	00000000 	.word	0x00000000
1001a2e8:	706d6153 	.word	0x706d6153
1001a2ec:	3a73656c 	.word	0x3a73656c
1001a2f0:	0a642520 	.word	0x0a642520
1001a2f4:	00000000 	.word	0x00000000
1001a2f8:	65636341 	.word	0x65636341
1001a2fc:	666f206c 	.word	0x666f206c
1001a300:	74657366 	.word	0x74657366
1001a304:	74616420 	.word	0x74616420
1001a308:	57482061 	.word	0x57482061
1001a30c:	62205453 	.word	0x62205453
1001a310:	253d7469 	.word	0x253d7469
1001a314:	25203a64 	.word	0x25203a64
1001a318:	66342e37 	.word	0x66342e37
1001a31c:	2e372520 	.word	0x2e372520
1001a320:	25206634 	.word	0x25206634
1001a324:	66342e37 	.word	0x66342e37
1001a328:	00000a0d 	.word	0x00000a0d
1001a32c:	6f727947 	.word	0x6f727947
1001a330:	66666f20 	.word	0x66666f20
1001a334:	20746573 	.word	0x20746573
1001a338:	61746164 	.word	0x61746164
1001a33c:	53574820 	.word	0x53574820
1001a340:	69622054 	.word	0x69622054
1001a344:	64253d74 	.word	0x64253d74
1001a348:	3725203a 	.word	0x3725203a
1001a34c:	2066342e 	.word	0x2066342e
1001a350:	342e3725 	.word	0x342e3725
1001a354:	37252066 	.word	0x37252066
1001a358:	0d66342e 	.word	0x0d66342e
1001a35c:	0000000a 	.word	0x0000000a
1001a360:	72617453 	.word	0x72617453
1001a364:	676e6974 	.word	0x676e6974
1001a368:	55504d20 	.word	0x55504d20
1001a36c:	30303536 	.word	0x30303536
1001a370:	53574820 	.word	0x53574820
1001a374:	000d2154 	.word	0x000d2154
1001a378:	72746552 	.word	0x72746552
1001a37c:	69766569 	.word	0x69766569
1001a380:	4220676e 	.word	0x4220676e
1001a384:	65736169 	.word	0x65736169
1001a388:	00000d73 	.word	0x00000d73
1001a38c:	72746552 	.word	0x72746552
1001a390:	69766569 	.word	0x69766569
1001a394:	4220676e 	.word	0x4220676e
1001a398:	65736169 	.word	0x65736169
1001a39c:	72452073 	.word	0x72452073
1001a3a0:	20726f72 	.word	0x20726f72
1001a3a4:	6f70202d 	.word	0x6f70202d
1001a3a8:	62697373 	.word	0x62697373
1001a3ac:	4920656c 	.word	0x4920656c
1001a3b0:	65204332 	.word	0x65204332
1001a3b4:	726f7272 	.word	0x726f7272
1001a3b8:	00000000 	.word	0x00000000
1001a3bc:	72746552 	.word	0x72746552
1001a3c0:	69766569 	.word	0x69766569
1001a3c4:	5320676e 	.word	0x5320676e
1001a3c8:	69422054 	.word	0x69422054
1001a3cc:	73657361 	.word	0x73657361
1001a3d0:	00000000 	.word	0x00000000
1001a3d4:	72746552 	.word	0x72746552
1001a3d8:	69766569 	.word	0x69766569
1001a3dc:	5320676e 	.word	0x5320676e
1001a3e0:	69422054 	.word	0x69422054
1001a3e4:	73657361 	.word	0x73657361
1001a3e8:	72724520 	.word	0x72724520
1001a3ec:	2d20726f 	.word	0x2d20726f
1001a3f0:	736f7020 	.word	0x736f7020
1001a3f4:	6c626973 	.word	0x6c626973
1001a3f8:	32492065 	.word	0x32492065
1001a3fc:	72652043 	.word	0x72652043
1001a400:	00726f72 	.word	0x00726f72
1001a404:	65636341 	.word	0x65636341
1001a408:	6553206c 	.word	0x6553206c
1001a40c:	5420666c 	.word	0x5420666c
1001a410:	20747365 	.word	0x20747365
1001a414:	75736552 	.word	0x75736552
1001a418:	3a73746c 	.word	0x3a73746c
1001a41c:	0a642520 	.word	0x0a642520
1001a420:	00000000 	.word	0x00000000
1001a424:	6f727947 	.word	0x6f727947
1001a428:	6c655320 	.word	0x6c655320
1001a42c:	65542066 	.word	0x65542066
1001a430:	52207473 	.word	0x52207473
1001a434:	6c757365 	.word	0x6c757365
1001a438:	203a7374 	.word	0x203a7374
1001a43c:	000a6425 	.word	0x000a6425
1001a440:	706d6f43 	.word	0x706d6f43
1001a444:	20737361 	.word	0x20737361
1001a448:	666c6553 	.word	0x666c6553
1001a44c:	73655420 	.word	0x73655420
1001a450:	65522074 	.word	0x65522074
1001a454:	746c7573 	.word	0x746c7573
1001a458:	25203a73 	.word	0x25203a73
1001a45c:	00000a64 	.word	0x00000a64
1001a460:	74697845 	.word	0x74697845
1001a464:	20676e69 	.word	0x20676e69
1001a468:	54535748 	.word	0x54535748
1001a46c:	00000000 	.word	0x00000000
1001a470:	706d6f43 	.word	0x706d6f43
1001a474:	20737361 	.word	0x20737361
1001a478:	20746f6e 	.word	0x20746f6e
1001a47c:	6e756f66 	.word	0x6e756f66
1001a480:	00002e64 	.word	0x00002e64

1001a484 <reg>:
1001a484:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
1001a494:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
1001a4a4:	2a292827 67646334 00000049              '()*4cdgI...

1001a4b0 <hw>:
1001a4b0:	04000069 01410080 01000000 00001333     i.....A.....3...

1001a4c0 <test>:
1001a4c0:	00000083 00004000 00000200 00c800c8     .....@..........
1001a4d0:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001a4e0:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
1001a4f0:	006ccd4c 002cc90c 00765636 00664626     L.l...,.6Vv.&Ff.
1001a500:	c4abf2fe dfdff1aa dfdfafbb 8db3aab8     ................
1001a510:	350d98b4 0000005d aaaaaab8 c5c388b0     ...5]...........
1001a520:	000000c7 f3b9b1d8 b691a38b 00d9b409     ................
1001a530:	f3b9b1da b691a38b 00dab4da 0000000d     ................
1001a540:	706d645b 6165725f 69665f64 205d6f66     [dmp_read_fifo] 
1001a550:	72726520 7720726f 656c6968 61657220      error while rea
1001a560:	676e6964 66696620 7473206f 6d616572     ding fifo stream
1001a570:	00000021 0000000d 736d735b 7265735f     !.......[sms_ser
1001a580:	65636976 7664615f 69747265 205d6573     vice_advertise] 
1001a590:	76646120 69747265 656d6573 6420746e      advertisement d
1001a5a0:	20617461 20746573 6c696166 00216465     ata set failed!.
1001a5b0:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
1001a5c0:	69747265 205d6573 454c4220 61745320     ertise]  BLE Sta
1001a5d0:	64657472 76644120 69747265 656d6573     rted Advertiseme
1001a5e0:	0000746e 0000000d 6332695b 73616d5f     nt......[i2c_mas
1001a5f0:	5f726574 666e6f63 72756769 20205d65     ter_configure]  
1001a600:	666e6f63 72756769 20676e69 20433249     configuring I2C 
1001a610:	7473616d 2e2e7265 0000002e 6332695b     master......[i2c
1001a620:	73616d5f 5f726574 666e6f63 72756769     _master_configur
1001a630:	61635f65 61626c6c 5d736b63 6f632020     e_callbacks]  co
1001a640:	6769666e 6e697275 32692067 61632063     nfiguring i2c ca
1001a650:	61626c6c 2e736b63 00002e2e 4c504d65     llbacks.....eMPL
1001a660:	312e3520 00000000 0000000d 736d735b      5.1........[sms
1001a670:	756d695f 6174735f 70757472 6320205d     _imu_startup]  c
1001a680:	5f6d6d6f 6f727265 203d2072 65757274     omm_error = true
1001a690:	00000000 736d735b 756d695f 696e695f     ....[sms_imu_ini
1001a6a0:	6c616974 5d657a69 20200d0a 74696e69     tialize]..  init
1001a6b0:	696c6169 676e697a 554d4920 002e2e2e     ializing IMU....
1001a6c0:	736d735b 756d695f 6e6f635f 75676966     [sms_imu_configu
1001a6d0:	205d6572 72726520 7720726f 656c6968     re]  error while
1001a6e0:	616e6520 6e696c62 6d642067 65662070      enabling dmp fe
1001a6f0:	72757461 00007365 4f525245 72202152     atures..ERROR! r
1001a700:	72757465 3a64656e 00642520 736d735b     eturned: %d.[sms
1001a710:	756d695f 6c6f705f 61645f6c 205d6174     _imu_poll_data] 
1001a720:	6d6f6320 72655f6d 20726f72 7274203d      comm_error = tr
1001a730:	00006575 736d735b 756d695f 6365725f     ue..[sms_imu_rec
1001a740:	65766965 7461645f 20205d61 61647075     eive_data]  upda
1001a750:	676e6974 65687420 61686320 74636172     ting the charact
1001a760:	73697265 20636974 6c696166 202c6465     eristic failed, 
1001a770:	73616572 25206e6f 00000064 736d735b     reason %d...[sms
1001a780:	756d695f 6365725f 65766965 7461645f     _imu_receive_dat
1001a790:	20205d61 646e6573 20676e69 69746f6e     a]  sending noti
1001a7a0:	61636966 6e6f6974 69616620 0064656c     fication failed.
1001a7b0:	736d735b 756d695f 6365725f 65766965     [sms_imu_receive
1001a7c0:	7461645f 20205d61 646e6573 20676e69     _data]  sending 
1001a7d0:	69746f6e 61636966 6e6f6974 002e2e2e     notification....
1001a7e0:	0000000d 736d735b 6572705f 72757373     ....[sms_pressur
1001a7f0:	736d5f65 635f3835 75636c61 6574616c     e_ms58_calculate
1001a800:	6574205d 7265706d 72757461 203d2065     ] temperature = 
1001a810:	30257830 20786c38 65727020 72757373     0x%08lx  pressur
1001a820:	203d2065 30257830 00786c38 736d735b     e = 0x%08lx.[sms
1001a830:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
1001a840:	75636c61 6574616c 7520205d 74616470     alculate]  updat
1001a850:	20676e69 20656874 72616863 65746361     ing the characte
1001a860:	74736972 66206369 656c6961 72202c64     ristic failed, r
1001a870:	6f736165 6425206e 00000000 736d735b     eason %d....[sms
1001a880:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
1001a890:	75636c61 6574616c 7320205d 69646e65     alculate]  sendi
1001a8a0:	6e20676e 6669746f 74616369 206e6f69     ng notification 
1001a8b0:	6c696166 00006465 736d735b 6572705f     failed..[sms_pre
1001a8c0:	72757373 736d5f65 635f3835 75636c61     ssure_ms58_calcu
1001a8d0:	6574616c 7320205d 69646e65 6e20676e     late]  sending n
1001a8e0:	6669746f 74616369 2e6e6f69 00002e2e     otification.....
1001a8f0:	0000000d 6970735b 73616d5f 5f726574     ....[spi_master_
1001a900:	666e6f63 72756769 20205d65 666e6f63     configure]  conf
1001a910:	72756769 20676e69 20495053 7473616d     iguring SPI mast
1001a920:	20737265 20646e61 61747461 6e696863     ers and attachin
1001a930:	6c732067 73657661 002e2e2e 6970735b     g slaves....[spi
1001a940:	73616d5f 5f726574 666e6f63 72756769     _master_configur
1001a950:	61635f65 61626c6c 5d736b63 6f632020     e_callbacks]  co
1001a960:	6769666e 6e697275 50532067 61632049     nfiguring SPI ca
1001a970:	61626c6c 2e736b63 00002e2e 0000000d     llbacks.........
1001a980:	656c625b 7664615f 7065725f 5f74726f     [ble_adv_report_
1001a990:	6e657665 20205d74 65766461 73697472     event]  advertis
1001a9a0:	6e656d65 69742074 756f656d 00000074     ement timeout...
1001a9b0:	6e696f47 6f742067 656c7320 2e2e7065     Going to sleep..
1001a9c0:	0000002e 656c625b 6e6f635f 7463656e     ....[ble_connect
1001a9d0:	615f6465 655f7070 746e6576 6564205d     ed_app_event] de
1001a9e0:	65636976 6f632073 63656e6e 00646574     vices connected.
1001a9f0:	656c625b 7369645f 6e6e6f63 65746365     [ble_disconnecte
1001aa00:	70615f64 76655f70 5d746e65 65657020     d_app_event] pee
1001aa10:	69642072 6e6f6373 7463656e 2e2e6465     r disconnected..
1001aa20:	0000002e 656c625b 6961705f 5f646572     ....[ble_paired_
1001aa30:	5f707061 6e657665 44205d74 63697665     app_event] Devic
1001aa40:	70207365 65726961 2e2e2e64 00000000     es paired.......
1001aa50:	616e6520 6e696c62 6c732067 2e706565      enabling sleep.
1001aa60:	00000000 656c625b 746f6e5f 63696669     ....[ble_notific
1001aa70:	6f697461 6f635f6e 7269666e 5f64656d     ation_confirmed_
1001aa80:	5f707061 6e657665 6e205d74 6669746f     app_event] notif
1001aa90:	74616369 206e6f69 746e6573 63757320     ication sent suc
1001aaa0:	73736563 6c6c7566 00000079 69616d5b     cessfully...[mai
1001aab0:	69205d6e 6974696e 7a696c61 20676e69     n] initializing 
1001aac0:	20454c42 6c707061 74616369 006e6f69     BLE application.
1001aad0:	69616d5b 62205d6e 6f747475 7020316e     [main] button1 p
1001aae0:	73736572 2e2e6465 0000002e 69616d5b     ressed......[mai
1001aaf0:	62205d6e 6f747475 7020326e 73736572     n] button2 press
1001ab00:	2e2e6465 0000002e 69616d5b 20205d6e     ed......[main]  
1001ab10:	70616c65 20646573 656d6974 25203a72     elapsed timer: %
1001ab20:	6d20646c 00000073 2e2e2e20 656d6974     ld ms... ...time
1001ab30:	206f7420 64616572 35736d20 00000038      to read ms58...
1001ab40:	2e2e2e20 20746f6e 00746579 69616d5b      ...not yet.[mai
1001ab50:	61205d6e 74206e6f 72656d69 746e6920     n] aon timer int
1001ab60:	75727265 6f697470 2e2e2e6e 61657220     erruption... rea
1001ab70:	676e6964 35736d20 00000038 69616d5b     ding ms58...[mai
1001ab80:	20205d6e 6c617564 656d6974 69203172     n]  dualtimer1 i
1001ab90:	7265746e 74707572 2e6e6f69 00002e2e     nterruption.....
1001aba0:	69616d5b 20205d6e 6c617564 656d6974     [main]  dualtime
1001abb0:	69203272 7265746e 74707572 2e6e6f69     r2 interruption.
1001abc0:	00002e2e 1000bfbc 1000bfbc 1000bfbc     ................
1001abd0:	1000bfbc 1000bfbc 1000bfbc 1000bfbc     ................
1001abe0:	1000bfbc                                ....

1001abe4 <startup_template_app_gap_cb>:
	...
1001abf0:	1000bef1 00000000 1000bf41 1000bf8d     ........A.......
	...
1001ac08:	1000bfed 00000000 00000000 00000000     ................
1001ac18:	00000000 1000bfed 00000000 00000000     ................
	...

1001ac30 <startup_template_app_gatt_server_cb>:
1001ac30:	1000c02d 00000000 1000c071 00000000     -.......q.......
	...
1001ac58:	1000c324 1000c224 1000c23a 1000c250     $...$...:...P...
1001ac68:	1000c2da 1000c300 1000c312 1000d138     ............8...
1001ac78:	1000d1be 1000d244 1000d2ca 1000d350     ....D.......P...
1001ac88:	1000ef08 1000ef16 1000ef24 1000ef32     ........$...2...
1001ac98:	1000ef40 1000ef4e 1000ef5c 1000ef6c     @...N...\...l...
1001aca8:	1000ef7c 1000ef8c 1000ef9c 1000efac     |...............
1001acb8:	1000efbc 1000efcc 1000efdc 1000efec     ................
1001acc8:	1000effc 1000f00c 1000f01c 1000f02c     ............,...
1001acd8:	1000f03c 1000f04c 1000f05c 1000f06c     <...L...\...l...
1001ace8:	1000f07c 1000f08c 1000f09c 1000f0ac     |...............
1001acf8:	1000f0ba 1000f0c8 1000f0d6 1000f0e4     ................
1001ad08:	1000f0f2 1000f100 1000f10e 1000f11c     ................
1001ad18:	1000f12c 1000f13c 1000f14c 1000f15c     ,...<...L...\...
1001ad28:	1000f16c 1000f17c 1000f18c 1000f19c     l...|...........
1001ad38:	1000f1ac 1000f1bc 1000f1cc 1000f1dc     ................
1001ad48:	1000f1ec 1000f1fc 1000f20c 1000f21c     ................
1001ad58:	1000f22e 1000f240 1000f288 1000f296     ....@...........
1001ad68:	1000f2a4 1000f2b2 1000f2c0 1000f2ce     ................
1001ad78:	1000f2dc 1000f2ea 1000f2f8 1000f306     ................
1001ad88:	1000f314 1000f322 1000f330 1000f33e     ...."...0...>...
1001ad98:	1000f34c 1000f35a 1000f368 1000f376     L...Z...h...v...
1001ada8:	1000f384 1000f392 1000f3a0 1000f3ae     ................
1001adb8:	1000f3bc 1000f3ca 1000f3d8 1000f3e6     ................
1001adc8:	1000f3f4 1000f402 1000f410 1000f41e     ................
1001add8:	1000f42c 1000f43a 1000f448 1000f456     ,...:...H...V...
1001ade8:	1000f464 1000f472 1000f480 1000f48e     d...r...........
1001adf8:	1000f49c 1000f4aa 1000f4b8 1000f4c6     ................
1001ae08:	1000f4d4 1000f4e2 1000f4f0 1000f4fe     ................
1001ae18:	1000f50c 1000f51a 1000f528 1000f536     ........(...6...
1001ae28:	1000f544 1000f552 1000f564 1000f576     D...R...d...v...
1001ae38:	1000f636 1000f66a 1000f69e 1000f6d2     6...j...........
1001ae48:	1000f972 1000f70a 1000f726 1000f7b2     r.......&.......
1001ae58:	1000f7ce 1000f742 1000f75e 1000f77a     ....B...^...z...
1001ae68:	1000f796 1000f7ea 1000fb78 1000fb78     ........x...x...
1001ae78:	1000fb78 1000fb78 1000fb78 1000fb78     x...x...x...x...
1001ae88:	1000fb78 1000fb78 1000f8ae 1000f8ca     x...x...........
1001ae98:	1000f8e6 1000f994 1000f822 1000fb78     ........"...x...
1001aea8:	1000fb78 1000fb78 1000fb78 1000fb78     x...x...x...x...
1001aeb8:	1000fb78 1000f902 1000f91e 1000f93a     x...........:...
1001aec8:	1000f956 1000fb78 1000fb0c 1000fb30     V...x.......0...
1001aed8:	1000fb78 1000fb78 1000fa3e 1000fa60     x...x...>...`...
1001aee8:	1000fa82 1000faa4 1000fb78 1000fb78     ........x...x...
1001aef8:	1000fb78 1000fb78 1000fb78 1000fb78     x...x...x...x...
1001af08:	1000fb78 1000fb78 1000f61c 1000f650     x...x.......P...
1001af18:	1000f684 1000f6b8 1000f6ee 1000f806     ................
1001af28:	1000f83e 1000f85a 1000f876 1000f892     >...Z...v.......
1001af38:	1000fa1c 1000fac6 1000fae8 1000fb54     ............T...
1001af48:	100102a2 100102b0 100102ce 100102f0     ................
1001af58:	10010312                                ....

1001af5c <ble_mgr_gap_handle>:
1001af5c:	10010d79 10010dad 10010e15 00000000     y...............
1001af6c:	00000000 10010e69 1001144d 100115fd     ....i...M.......
1001af7c:	10011615 10011f05 10011a0d 1001163d     ............=...
1001af8c:	10011cc9 10012275 10012101 100111cd     ....u"...!......
	...

1001afa8 <ble_mgr_gatt_server_handle>:
	...
1001afc0:	100113ed 10011405 10011429 00000000     ........).......
1001afd0:	52424153 4d532d65 00000053 efcdab00     SABRe-SMS.......
1001afe0:	00efcdab 0000000d 65646e55 656e6966     ........Undefine
1001aff0:	76452064 20746e65 65636552 64657669     d Event Received
1001b000:	00000000 6f736552 6e69766c 61522067     ....Resolving Ra
1001b010:	6d6f646e 64646120 73736572 63757320     ndom address suc
1001b020:	73736563 00002a2a 6f736552 6e69766c     cess**..Resolvin
1001b030:	61522067 6d6f646e 64646120 73736572     g Random address
1001b040:	69616620 2a64656c 0000002a 2077654e      failed**...New 
1001b050:	6e6e6f43 69746365 00006e6f 2078614d     Connection..Max 
1001b060:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001b070:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001b080:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001b090:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001b0a0:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001b0b0:	53202d20 75746174 25203a73 00000064      - Status: %d...
1001b0c0:	23232323 23232323 65442323 65636976     ##########Device
1001b0d0:	756f4620 0000646e 23232323 23232323      Found..########
1001b0e0:	65442323 65636976 746f4e20 756f4620     ##Device Not Fou
1001b0f0:	0000646e 69766544 69206563 253a7864     nd..Device idx:%
1001b100:	00000064 74617453 6f4e2065 61482074     d...State Not Ha
1001b110:	656c646e 64252064 00000000 69766544     ndled %d....Devi
1001b120:	64206563 6f637369 63656e6e 20646574     ce disconnected 
1001b130:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
1001b140:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
1001b150:	69747079 4e206e6f 7320746f 74726174     yption Not start
1001b160:	00006465 72696150 71655220 74736575     ed..Pair Request
1001b170:	41202d20 65687475 6369746e 6f697461      - Authenticatio
1001b180:	6146206e 64656c69 00000000 65746e45     n Failed....Ente
1001b190:	68742072 61502065 656b7373 2d362879     r the Passkey(6-
1001b1a0:	69676944 69202974 6554206e 6e696d72     Digit) in Termin
1001b1b0:	003a6c61 206e6950 656d6954 0074756f     al:.Pin Timeout.
1001b1c0:	63736944 656e6e6f 6e697463 2e2e2067     Disconnecting ..
1001b1d0:	0000002e 63736944 656e6e6f 52207463     ....Disconnect R
1001b1e0:	65757165 46207473 656c6961 00000064     equest Failed...
1001b1f0:	65746e45 20646572 73736150 646f632d     Entered Pass-cod
1001b200:	00003a65 61656c50 45206573 7265746e     e:..Please Enter
1001b210:	65687420 6c6f6620 69776f6c 5020676e      the following P
1001b220:	2d737361 65646f63 206e6f28 6568746f     ass-code(on othe
1001b230:	65442072 65636976 00003a29 72696150     r Device):..Pair
1001b240:	79656b2d 70657220 6620796c 656c6961     -key reply faile
1001b250:	00000064 20424f4f 74616546 20657275     d...OOB Feature 
1001b260:	20746f4e 70707573 6574726f 00000064     Not supported...
1001b270:	34333231 00003635 20454c42 69766544     123456..BLE Devi
1001b280:	6e206563 6620746f 646e756f 206f7420     ce not found to 
1001b290:	726f7473 68742065 61702065 6e697269     store the pairin
1001b2a0:	6e692067 00006f66 72696150 20676e69     g info..Pairing 
1001b2b0:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
1001b2c0:	69746365 0000676e 72636e45 69747079     ecting..Encrypti
1001b2d0:	63206e6f 6c706d6f 64657465 63757320     on completed suc
1001b2e0:	73736563 6c6c7566 00000079 20454c42     cessfully...BLE 
1001b2f0:	69766544 6e206563 6620746f 646e756f     Device not found
1001b300:	636e6520 74707972 206e6f69 6f666e69      encryption info
1001b310:	00000000 72636e45 69747079 66206e6f     ....Encryption f
1001b320:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
1001b330:	6f666e69 74616d72 206e6f69 7020666f     information of p
1001b340:	20726565 69766564 69206563 6f6e2073     eer device is no
1001b350:	76612074 616c6961 2e656c62 00000000     t available.....
1001b360:	61656c50 75206573 6961706e 68742072     Please unpair th
1001b370:	65642065 65636976 6f726620 6570206d     e device from pe
1001b380:	64207265 63697665 6f6d2865 656c6962     er device(mobile
1001b390:	65732029 6e697474 6d207367 20756e65     ) settings menu 
1001b3a0:	20646e61 72617473 61702074 6e697269     and start pairin
1001b3b0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
1001b3c0:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001b3d0:	69614620 0064656c 656c625b 6576655f      Failed.[ble_eve
1001b3e0:	6d5f746e 67616e61 205d7265 454c4220     nt_manager]  BLE
1001b3f0:	6576452d 253a746e 00000064 5f454c42     -Event:%d...BLE_
1001b400:	5f504147 5f564441 504d4f43 4554454c     GAP_ADV_COMPLETE
1001b410:	434f4c5f 4e5f4c41 5f454d41 42414e45     _LOCAL_NAME_ENAB
1001b420:	2620454c 42212026 475f454c 415f5041     LE && !BLE_GAP_A
1001b430:	535f5644 54524f48 44454e45 434f4c5f     DV_SHORTENED_LOC
1001b440:	4e5f4c41 5f454d41 42414e45 0000454c     AL_NAME_ENABLE..
1001b450:	4c420a0d 44412d45 00203a56 6c696146     ..BLE-ADV: .Fail
1001b460:	74206465 6461206f 6f432064 656c706d     ed to add Comple
1001b470:	6c206574 6c61636f 6d616e20 00000065     te local name...
1001b480:	5f454c42 5f504147 5f564441 554e414d     BLE_GAP_ADV_MANU
1001b490:	54434146 52455255 4550535f 49464943     FACTURER_SPECIFI
1001b4a0:	41445f43 455f4154 4c42414e 00000045     C_DATA_ENABLE...
1001b4b0:	5a2d571c 50532dbe 00000000 6c696146     .W-Z.-SP....Fail
1001b4c0:	74206465 6461206f 614d2064 6166756e     ed to add Manufa
1001b4d0:	72757463 73207265 69636570 20636966     cturer specific 
1001b4e0:	61746164 00000000 65766441 73697472     data....Advertis
1001b4f0:	6e656d65 61642074 203a6174 00207830     ement data: 0x .
1001b500:	78323025 29632528 00000020 20454c42     %02x(%c) ...BLE 
1001b510:	65766441 73697472 6e656d65 61642074     Advertisement da
1001b520:	73206174 73207465 65636375 00007373     ta set success..
1001b530:	10010c06 10010c14 10010c22 10010c30     ........"...0...
1001b540:	10010c3e 10010c4c 10010c5a 1001154c     >...L...Z...L...
1001b550:	10011594 10011518 10011518 10011518     ................
1001b560:	1001154c 10011518 10011518 10012494     L............$..
1001b570:	10012494 10012494 10012494 10012494     .$...$...$...$..
1001b580:	10012494 10012494 10012494 10012494     .$...$...$...$..
1001b590:	10012494 10012494 10012494 10012494     .$...$...$...$..
1001b5a0:	10012494 10012494 10012494 10012494     .$...$...$...$..
1001b5b0:	10012494 10012494 100124f8 100124f8     .$...$...$...$..
1001b5c0:	100124f8 100124f8 100124f8 100124f8     .$...$...$...$..
1001b5d0:	100124f8 100124f8 100124f8 100124f8     .$...$...$...$..
1001b5e0:	10012566 10012566 10012566 10012566     f%..f%..f%..f%..
1001b5f0:	10012566 10012566 10012566 10012566     f%..f%..f%..f%..
1001b600:	10012566 10012566 100125d4 100125d4     f%..f%...%...%..
1001b610:	100125d4 100125d4 100125d4 100125d4     .%...%...%...%..
1001b620:	10012642 10012642 10012642 10012642     B&..B&..B&..B&..
1001b630:	10012642 10012642 10012642 10012642     B&..B&..B&..B&..
1001b640:	10012642 100126b0 100126b0 1001271e     B&...&...&...'..
1001b650:	1001271e 1001278c 1001271e 656d7441     .'...'...'..Atme
1001b660:	6f43206c 002e7072                                l Corp.

1001b667 <CSWTCH.51>:
1001b667:	03010300 03030303 03030303 02020303              ...............

1001b676 <CSWTCH.49>:
1001b676:	02100402                                         ...

1001b679 <client_conf_uuid>:
1001b679:	29042902                                         .)

1001b67b <presentation_format_uuid>:
1001b67b:	29012904                                         .)

1001b67d <user_desc_uuid>:
1001b67d:	29032901                                         .)

1001b67f <server_conf_uuid>:
1001b67f:	29002903                                         .)

1001b681 <extended_props_uuid>:
1001b681:	28022900                                         .)

1001b683 <include_uuid>:
1001b683:	28032802                                         .(

1001b685 <char_uuid>:
1001b685:	96002803 ba100176 78100175 50100176     .(..v...u..xv..P
1001b695:	78100176 44100176 78100176 50100176     v..xv..Dv..xv..P
1001b6a5:	ba100176 ba100175 44100175 50100176     v...u...u..Dv..P
1001b6b5:	fc100176 fc100176 fc100176 7e100176     v...v...v...v..~
1001b6c5:	ba100176 ba100175 64100175 4e100176     v...u...u..dv..N
1001b6d5:	64100176 44100176 64100176 4e100176     v..dv..Dv..dv..N
1001b6e5:	ba100176 ba100175 44100175 4e100176     v...u...u..Dv..N
1001b6f5:	fc100176 fc100176 fc100176 08100176     v...v...v...v...
1001b705:	f4100177 52100179 52100179 50100179     w...y..Ry..Ry..P
1001b715:	e6100179 e6100179 dc100179 50100179     y...y...y...y..P
1001b725:	e6100179 dc100179 e6100179 50100179     y...y...y...y..P
1001b735:	ec100179 ec100179 ec100179 76100179     y...y...y...y..v
1001b745:	d810017a 98100182 98100181 96100181     z...............
1001b755:	b0100181 b0100182 a2100182 96100182     ................
1001b765:	b0100181 a2100182 b0100182 96100182     ................
1001b775:	b8100181 b8100182 b8100182 b8100182     ................
1001b785:	43100184 94000000                                ...C...

1001b78c <_global_impure_ptr>:
1001b78c:	1001b894                                ....

1001b790 <__sf_fake_stdin>:
	...

1001b7b0 <__sf_fake_stdout>:
	...

1001b7d0 <__sf_fake_stderr>:
	...
1001b7f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001b800:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001b810:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001b820:	00006665                                ef..

1001b824 <_init>:
1001b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b826:	46c0      	nop			; (mov r8, r8)
1001b828:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b82a:	bc08      	pop	{r3}
1001b82c:	469e      	mov	lr, r3
1001b82e:	4770      	bx	lr

1001b830 <__init_array_start>:
1001b830:	1000809d 	.word	0x1000809d

1001b834 <_fini>:
1001b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b836:	46c0      	nop			; (mov r8, r8)
1001b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b83a:	bc08      	pop	{r3}
1001b83c:	469e      	mov	lr, r3
1001b83e:	4770      	bx	lr

1001b840 <__fini_array_start>:
1001b840:	10008075 	.word	0x10008075
