
SMSnode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e150  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  10016150  10016150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001b88  100161c4  100161c4  000161c4  2**2
                  ALLOC
  3 .stack        00000804  10017d4c  10017d4c  000161c4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000161ec  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002311b  00000000  00000000  00016247  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025f1  00000000  00000000  00039362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002af6  00000000  00000000  0003b953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000828  00000000  00000000  0003e449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006f8  00000000  00000000  0003ec71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d5eb  00000000  00000000  0003f369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d381  00000000  00000000  0005c954  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001095a6  00000000  00000000  00069cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000251c  00000000  00000000  0017327c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b580      	push	{r7, lr}
10008002:	b082      	sub	sp, #8
10008004:	af00      	add	r7, sp, #0
    uint32_t *pSrc, *pDest;

    /* Initialize the relocate segment */
    pSrc = &_etext;
10008006:	4b14      	ldr	r3, [pc, #80]	; (10008058 <app_entry+0x58>)
10008008:	607b      	str	r3, [r7, #4]
    pDest = &_srelocate;
1000800a:	4b14      	ldr	r3, [pc, #80]	; (1000805c <app_entry+0x5c>)
1000800c:	603b      	str	r3, [r7, #0]

    if (pSrc != pDest) {
1000800e:	687a      	ldr	r2, [r7, #4]
10008010:	683b      	ldr	r3, [r7, #0]
10008012:	429a      	cmp	r2, r3
10008014:	d00c      	beq.n	10008030 <app_entry+0x30>
        for (; pDest < &_erelocate;) {
10008016:	e007      	b.n	10008028 <app_entry+0x28>
            *pDest++ = *pSrc++;
10008018:	683b      	ldr	r3, [r7, #0]
1000801a:	1d1a      	adds	r2, r3, #4
1000801c:	603a      	str	r2, [r7, #0]
1000801e:	687a      	ldr	r2, [r7, #4]
10008020:	1d11      	adds	r1, r2, #4
10008022:	6079      	str	r1, [r7, #4]
10008024:	6812      	ldr	r2, [r2, #0]
10008026:	601a      	str	r2, [r3, #0]
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008028:	683a      	ldr	r2, [r7, #0]
1000802a:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802c:	429a      	cmp	r2, r3
1000802e:	d3f3      	bcc.n	10008018 <app_entry+0x18>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008030:	4b0c      	ldr	r3, [pc, #48]	; (10008064 <app_entry+0x64>)
10008032:	603b      	str	r3, [r7, #0]
10008034:	e004      	b.n	10008040 <app_entry+0x40>
        *pDest++ = 0;
10008036:	683b      	ldr	r3, [r7, #0]
10008038:	1d1a      	adds	r2, r3, #4
1000803a:	603a      	str	r2, [r7, #0]
1000803c:	2200      	movs	r2, #0
1000803e:	601a      	str	r2, [r3, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008040:	683a      	ldr	r2, [r7, #0]
10008042:	4b09      	ldr	r3, [pc, #36]	; (10008068 <app_entry+0x68>)
10008044:	429a      	cmp	r2, r3
10008046:	d3f6      	bcc.n	10008036 <app_entry+0x36>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008048:	4b08      	ldr	r3, [pc, #32]	; (1000806c <app_entry+0x6c>)
1000804a:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804c:	4b08      	ldr	r3, [pc, #32]	; (10008070 <app_entry+0x70>)
1000804e:	4798      	blx	r3

    /* return to BLE OS*/
    return;
10008050:	46c0      	nop			; (mov r8, r8)
}
10008052:	46bd      	mov	sp, r7
10008054:	b002      	add	sp, #8
10008056:	bd80      	pop	{r7, pc}
10008058:	10016150 	.word	0x10016150
1000805c:	10016150 	.word	0x10016150
10008060:	100161c4 	.word	0x100161c4
10008064:	100161c4 	.word	0x100161c4
10008068:	10017d4c 	.word	0x10017d4c
1000806c:	10013371 	.word	0x10013371
10008070:	100088f9 	.word	0x100088f9

10008074 <__do_global_dtors_aux>:
10008074:	b510      	push	{r4, lr}
10008076:	4c06      	ldr	r4, [pc, #24]	; (10008090 <__do_global_dtors_aux+0x1c>)
10008078:	7823      	ldrb	r3, [r4, #0]
1000807a:	2b00      	cmp	r3, #0
1000807c:	d107      	bne.n	1000808e <__do_global_dtors_aux+0x1a>
1000807e:	4b05      	ldr	r3, [pc, #20]	; (10008094 <__do_global_dtors_aux+0x20>)
10008080:	2b00      	cmp	r3, #0
10008082:	d002      	beq.n	1000808a <__do_global_dtors_aux+0x16>
10008084:	4804      	ldr	r0, [pc, #16]	; (10008098 <__do_global_dtors_aux+0x24>)
10008086:	e000      	b.n	1000808a <__do_global_dtors_aux+0x16>
10008088:	bf00      	nop
1000808a:	2301      	movs	r3, #1
1000808c:	7023      	strb	r3, [r4, #0]
1000808e:	bd10      	pop	{r4, pc}
10008090:	100161c4 	.word	0x100161c4
10008094:	00000000 	.word	0x00000000
10008098:	10016150 	.word	0x10016150

1000809c <frame_dummy>:
1000809c:	b508      	push	{r3, lr}
1000809e:	4b08      	ldr	r3, [pc, #32]	; (100080c0 <frame_dummy+0x24>)
100080a0:	2b00      	cmp	r3, #0
100080a2:	d003      	beq.n	100080ac <frame_dummy+0x10>
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x28>)
100080a6:	4908      	ldr	r1, [pc, #32]	; (100080c8 <frame_dummy+0x2c>)
100080a8:	e000      	b.n	100080ac <frame_dummy+0x10>
100080aa:	bf00      	nop
100080ac:	4807      	ldr	r0, [pc, #28]	; (100080cc <frame_dummy+0x30>)
100080ae:	6803      	ldr	r3, [r0, #0]
100080b0:	2b00      	cmp	r3, #0
100080b2:	d100      	bne.n	100080b6 <frame_dummy+0x1a>
100080b4:	bd08      	pop	{r3, pc}
100080b6:	4b06      	ldr	r3, [pc, #24]	; (100080d0 <frame_dummy+0x34>)
100080b8:	2b00      	cmp	r3, #0
100080ba:	d0fb      	beq.n	100080b4 <frame_dummy+0x18>
100080bc:	4798      	blx	r3
100080be:	e7f9      	b.n	100080b4 <frame_dummy+0x18>
100080c0:	00000000 	.word	0x00000000
100080c4:	10016150 	.word	0x10016150
100080c8:	100161c8 	.word	0x100161c8
100080cc:	10016150 	.word	0x10016150
100080d0:	00000000 	.word	0x00000000

100080d4 <sms_service_init>:
 */ 

#include "../Inc/sms_ble.h"

 void sms_service_init(gatt_service_handler_t *sms_button_serv, uint8_t *sms_button_value)
 {
100080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100080d6:	b085      	sub	sp, #20
100080d8:	af02      	add	r7, sp, #8
100080da:	6078      	str	r0, [r7, #4]
100080dc:	6039      	str	r1, [r7, #0]
     //SMS button service characteristic
     sms_button_serv->serv_handle = 0;
100080de:	687b      	ldr	r3, [r7, #4]
100080e0:	2200      	movs	r2, #0
100080e2:	825a      	strh	r2, [r3, #18]
     sms_button_serv->serv_uuid.type = AT_BLE_UUID_128;
100080e4:	687b      	ldr	r3, [r7, #4]
100080e6:	2202      	movs	r2, #2
100080e8:	701a      	strb	r2, [r3, #0]
     sms_button_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100080ea:	687b      	ldr	r3, [r7, #4]
100080ec:	2200      	movs	r2, #0
100080ee:	705a      	strb	r2, [r3, #1]
     sms_button_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100080f0:	687b      	ldr	r3, [r7, #4]
100080f2:	2200      	movs	r2, #0
100080f4:	709a      	strb	r2, [r3, #2]
     sms_button_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100080f6:	687b      	ldr	r3, [r7, #4]
100080f8:	2257      	movs	r2, #87	; 0x57
100080fa:	70da      	strb	r2, [r3, #3]
     sms_button_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100080fc:	687b      	ldr	r3, [r7, #4]
100080fe:	221c      	movs	r2, #28
10008100:	711a      	strb	r2, [r3, #4]
     sms_button_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
10008102:	687b      	ldr	r3, [r7, #4]
10008104:	2200      	movs	r2, #0
10008106:	715a      	strb	r2, [r3, #5]
     sms_button_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
10008108:	687b      	ldr	r3, [r7, #4]
1000810a:	2200      	movs	r2, #0
1000810c:	719a      	strb	r2, [r3, #6]
     sms_button_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000810e:	687b      	ldr	r3, [r7, #4]
10008110:	22be      	movs	r2, #190	; 0xbe
10008112:	71da      	strb	r2, [r3, #7]
     sms_button_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10008114:	687b      	ldr	r3, [r7, #4]
10008116:	225a      	movs	r2, #90	; 0x5a
10008118:	721a      	strb	r2, [r3, #8]
     sms_button_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
1000811a:	687b      	ldr	r3, [r7, #4]
1000811c:	2200      	movs	r2, #0
1000811e:	725a      	strb	r2, [r3, #9]
     sms_button_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
10008120:	687b      	ldr	r3, [r7, #4]
10008122:	2200      	movs	r2, #0
10008124:	729a      	strb	r2, [r3, #10]
     sms_button_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
10008126:	687b      	ldr	r3, [r7, #4]
10008128:	2230      	movs	r2, #48	; 0x30
1000812a:	72da      	strb	r2, [r3, #11]
     sms_button_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000812c:	687b      	ldr	r3, [r7, #4]
1000812e:	2250      	movs	r2, #80	; 0x50
10008130:	731a      	strb	r2, [r3, #12]
     sms_button_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
10008132:	687b      	ldr	r3, [r7, #4]
10008134:	2200      	movs	r2, #0
10008136:	735a      	strb	r2, [r3, #13]
     sms_button_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
10008138:	687b      	ldr	r3, [r7, #4]
1000813a:	2200      	movs	r2, #0
1000813c:	739a      	strb	r2, [r3, #14]
     sms_button_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000813e:	687b      	ldr	r3, [r7, #4]
10008140:	22bb      	movs	r2, #187	; 0xbb
10008142:	73da      	strb	r2, [r3, #15]
     sms_button_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
10008144:	687b      	ldr	r3, [r7, #4]
10008146:	22bb      	movs	r2, #187	; 0xbb
10008148:	741a      	strb	r2, [r3, #16]
     
     sms_button_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
1000814a:	687b      	ldr	r3, [r7, #4]
1000814c:	2212      	movs	r2, #18
1000814e:	851a      	strh	r2, [r3, #40]	; 0x28
     sms_button_serv->serv_chars.init_value = sms_button_value;             /* value */
10008150:	687b      	ldr	r3, [r7, #4]
10008152:	683a      	ldr	r2, [r7, #0]
10008154:	62da      	str	r2, [r3, #44]	; 0x2c
     sms_button_serv->serv_chars.value_init_len = sizeof(uint8_t);
10008156:	687b      	ldr	r3, [r7, #4]
10008158:	2201      	movs	r2, #1
1000815a:	861a      	strh	r2, [r3, #48]	; 0x30
     sms_button_serv->serv_chars.value_max_len = sizeof(uint8_t);
1000815c:	687b      	ldr	r3, [r7, #4]
1000815e:	2201      	movs	r2, #1
10008160:	865a      	strh	r2, [r3, #50]	; 0x32
     sms_button_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
10008162:	687b      	ldr	r3, [r7, #4]
10008164:	2234      	movs	r2, #52	; 0x34
10008166:	2111      	movs	r1, #17
10008168:	5499      	strb	r1, [r3, r2]
     sms_button_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000816a:	687b      	ldr	r3, [r7, #4]
1000816c:	2200      	movs	r2, #0
1000816e:	639a      	str	r2, [r3, #56]	; 0x38
     sms_button_serv->serv_chars.user_desc_len = 0;
10008170:	687b      	ldr	r3, [r7, #4]
10008172:	2200      	movs	r2, #0
10008174:	879a      	strh	r2, [r3, #60]	; 0x3c
     sms_button_serv->serv_chars.user_desc_max_len = 0;
10008176:	687b      	ldr	r3, [r7, #4]
10008178:	2200      	movs	r2, #0
1000817a:	87da      	strh	r2, [r3, #62]	; 0x3e
     sms_button_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000817c:	687b      	ldr	r3, [r7, #4]
1000817e:	2244      	movs	r2, #68	; 0x44
10008180:	2100      	movs	r1, #0
10008182:	5499      	strb	r1, [r3, r2]
     sms_button_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
10008184:	687b      	ldr	r3, [r7, #4]
10008186:	2245      	movs	r2, #69	; 0x45
10008188:	2100      	movs	r1, #0
1000818a:	5499      	strb	r1, [r3, r2]
     sms_button_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000818c:	687b      	ldr	r3, [r7, #4]
1000818e:	2246      	movs	r2, #70	; 0x46
10008190:	2100      	movs	r1, #0
10008192:	5499      	strb	r1, [r3, r2]
     sms_button_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
10008194:	687b      	ldr	r3, [r7, #4]
10008196:	2248      	movs	r2, #72	; 0x48
10008198:	2100      	movs	r1, #0
1000819a:	5299      	strh	r1, [r3, r2]
     sms_button_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
1000819c:	687b      	ldr	r3, [r7, #4]
1000819e:	224a      	movs	r2, #74	; 0x4a
100081a0:	2100      	movs	r1, #0
100081a2:	5299      	strh	r1, [r3, r2]
     sms_button_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
100081a4:	687b      	ldr	r3, [r7, #4]
100081a6:	224c      	movs	r2, #76	; 0x4c
100081a8:	2100      	movs	r1, #0
100081aa:	5299      	strh	r1, [r3, r2]
     //presentation_format.unit = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_UNIT >> 8);
     //presentation_format.name_space = SMS_BUTTON_PRESENTATION_FORMAT_NAMESPACE;
     //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
     //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
     
     sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */
100081ac:	687b      	ldr	r3, [r7, #4]
100081ae:	2200      	movs	r2, #0
100081b0:	641a      	str	r2, [r3, #64]	; 0x40

     DBG_LOG("\n\r[sms_service_init]\n\rsetting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
100081b2:	4b0f      	ldr	r3, [pc, #60]	; (100081f0 <sms_service_init+0x11c>)
100081b4:	1c18      	adds	r0, r3, #0
100081b6:	4b0f      	ldr	r3, [pc, #60]	; (100081f4 <sms_service_init+0x120>)
100081b8:	4798      	blx	r3
     (unsigned int)sms_button_serv->serv_uuid.uuid,
100081ba:	687b      	ldr	r3, [r7, #4]
100081bc:	3301      	adds	r3, #1
     //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
     //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
     
     sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */

     DBG_LOG("\n\r[sms_service_init]\n\rsetting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
100081be:	1c1e      	adds	r6, r3, #0
     (unsigned int)sms_button_serv->serv_uuid.uuid,
     sms_button_serv->serv_handle,
100081c0:	687b      	ldr	r3, [r7, #4]
100081c2:	8a5b      	ldrh	r3, [r3, #18]
     //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
     //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
     
     sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */

     DBG_LOG("\n\r[sms_service_init]\n\rsetting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
100081c4:	1c1d      	adds	r5, r3, #0
     (unsigned int)sms_button_serv->serv_uuid.uuid,
     sms_button_serv->serv_handle,
     sms_button_serv->serv_chars.uuid.uuid[1], sms_button_serv->serv_chars.uuid.uuid[0],
100081c6:	687b      	ldr	r3, [r7, #4]
100081c8:	7e1b      	ldrb	r3, [r3, #24]
     //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
     //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
     
     sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */

     DBG_LOG("\n\r[sms_service_init]\n\rsetting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
100081ca:	1c1c      	adds	r4, r3, #0
     (unsigned int)sms_button_serv->serv_uuid.uuid,
     sms_button_serv->serv_handle,
     sms_button_serv->serv_chars.uuid.uuid[1], sms_button_serv->serv_chars.uuid.uuid[0],
100081cc:	687b      	ldr	r3, [r7, #4]
100081ce:	7ddb      	ldrb	r3, [r3, #23]
     //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
     //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
     
     sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */

     DBG_LOG("\n\r[sms_service_init]\n\rsetting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
100081d0:	1c19      	adds	r1, r3, #0
     (unsigned int)sms_button_serv->serv_uuid.uuid,
     sms_button_serv->serv_handle,
     sms_button_serv->serv_chars.uuid.uuid[1], sms_button_serv->serv_chars.uuid.uuid[0],
     sms_button_serv->serv_chars.value_init_len);
100081d2:	687b      	ldr	r3, [r7, #4]
100081d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     //presentation_format.description = (uint8_t) SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR;
     //presentation_format.description = (uint8_t) (SMS_BUTTON_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
     
     sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */

     DBG_LOG("\n\r[sms_service_init]\n\rsetting primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
100081d6:	1c1a      	adds	r2, r3, #0
100081d8:	4b07      	ldr	r3, [pc, #28]	; (100081f8 <sms_service_init+0x124>)
100081da:	9100      	str	r1, [sp, #0]
100081dc:	9201      	str	r2, [sp, #4]
100081de:	1c18      	adds	r0, r3, #0
100081e0:	1c31      	adds	r1, r6, #0
100081e2:	1c2a      	adds	r2, r5, #0
100081e4:	1c23      	adds	r3, r4, #0
100081e6:	4c05      	ldr	r4, [pc, #20]	; (100081fc <sms_service_init+0x128>)
100081e8:	47a0      	blx	r4
     (unsigned int)sms_button_serv->serv_uuid.uuid,
     sms_button_serv->serv_handle,
     sms_button_serv->serv_chars.uuid.uuid[1], sms_button_serv->serv_chars.uuid.uuid[0],
     sms_button_serv->serv_chars.value_init_len);
 }
100081ea:	46bd      	mov	sp, r7
100081ec:	b003      	add	sp, #12
100081ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100081f0:	10014584 	.word	0x10014584
100081f4:	1001351d 	.word	0x1001351d
100081f8:	10014588 	.word	0x10014588
100081fc:	100133fd 	.word	0x100133fd

10008200 <sms_button_primary_service_define>:

 at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
 {
10008200:	b5f0      	push	{r4, r5, r6, r7, lr}
10008202:	b085      	sub	sp, #20
10008204:	af02      	add	r7, sp, #8
10008206:	6078      	str	r0, [r7, #4]
     DBG_LOG("\n\r[sms_button_primary_service_define]\n\rdefining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
10008208:	4b17      	ldr	r3, [pc, #92]	; (10008268 <sms_button_primary_service_define+0x68>)
1000820a:	1c18      	adds	r0, r3, #0
1000820c:	4b17      	ldr	r3, [pc, #92]	; (1000826c <sms_button_primary_service_define+0x6c>)
1000820e:	4798      	blx	r3
     (unsigned int)sms_service->serv_uuid.uuid,
10008210:	687b      	ldr	r3, [r7, #4]
10008212:	3301      	adds	r3, #1
     sms_button_serv->serv_chars.value_init_len);
 }

 at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
 {
     DBG_LOG("\n\r[sms_button_primary_service_define]\n\rdefining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
10008214:	1c1e      	adds	r6, r3, #0
     (unsigned int)sms_service->serv_uuid.uuid,
     sms_service->serv_handle,
10008216:	687b      	ldr	r3, [r7, #4]
10008218:	8a5b      	ldrh	r3, [r3, #18]
     sms_button_serv->serv_chars.value_init_len);
 }

 at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
 {
     DBG_LOG("\n\r[sms_button_primary_service_define]\n\rdefining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
1000821a:	1c1d      	adds	r5, r3, #0
     (unsigned int)sms_service->serv_uuid.uuid,
     sms_service->serv_handle,
     sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
1000821c:	687b      	ldr	r3, [r7, #4]
1000821e:	7e1b      	ldrb	r3, [r3, #24]
     sms_button_serv->serv_chars.value_init_len);
 }

 at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
 {
     DBG_LOG("\n\r[sms_button_primary_service_define]\n\rdefining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
10008220:	1c1c      	adds	r4, r3, #0
     (unsigned int)sms_service->serv_uuid.uuid,
     sms_service->serv_handle,
     sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
10008222:	687b      	ldr	r3, [r7, #4]
10008224:	7ddb      	ldrb	r3, [r3, #23]
     sms_button_serv->serv_chars.value_init_len);
 }

 at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
 {
     DBG_LOG("\n\r[sms_button_primary_service_define]\n\rdefining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
10008226:	1c19      	adds	r1, r3, #0
     (unsigned int)sms_service->serv_uuid.uuid,
     sms_service->serv_handle,
     sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
     sms_service->serv_chars.value_init_len);
10008228:	687b      	ldr	r3, [r7, #4]
1000822a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     sms_button_serv->serv_chars.value_init_len);
 }

 at_ble_status_t sms_button_primary_service_define(gatt_service_handler_t *sms_service)
 {
     DBG_LOG("\n\r[sms_button_primary_service_define]\n\rdefining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d",
1000822c:	1c1a      	adds	r2, r3, #0
1000822e:	4b10      	ldr	r3, [pc, #64]	; (10008270 <sms_button_primary_service_define+0x70>)
10008230:	9100      	str	r1, [sp, #0]
10008232:	9201      	str	r2, [sp, #4]
10008234:	1c18      	adds	r0, r3, #0
10008236:	1c31      	adds	r1, r6, #0
10008238:	1c2a      	adds	r2, r5, #0
1000823a:	1c23      	adds	r3, r4, #0
1000823c:	4c0d      	ldr	r4, [pc, #52]	; (10008274 <sms_button_primary_service_define+0x74>)
1000823e:	47a0      	blx	r4
     (unsigned int)sms_service->serv_uuid.uuid,
     sms_service->serv_handle,
     sms_service->serv_chars.uuid.uuid[1], sms_service->serv_chars.uuid.uuid[0],
     sms_service->serv_chars.value_init_len);
     return(at_ble_primary_service_define(&sms_service->serv_uuid, &sms_service->serv_handle, NULL, 0, &sms_service->serv_chars, 1));
10008240:	6879      	ldr	r1, [r7, #4]
10008242:	687b      	ldr	r3, [r7, #4]
10008244:	3312      	adds	r3, #18
10008246:	1c1a      	adds	r2, r3, #0
10008248:	687b      	ldr	r3, [r7, #4]
1000824a:	3314      	adds	r3, #20
1000824c:	9300      	str	r3, [sp, #0]
1000824e:	2301      	movs	r3, #1
10008250:	9301      	str	r3, [sp, #4]
10008252:	1c08      	adds	r0, r1, #0
10008254:	1c11      	adds	r1, r2, #0
10008256:	2200      	movs	r2, #0
10008258:	2300      	movs	r3, #0
1000825a:	4c07      	ldr	r4, [pc, #28]	; (10008278 <sms_button_primary_service_define+0x78>)
1000825c:	47a0      	blx	r4
1000825e:	1c03      	adds	r3, r0, #0
 }
10008260:	1c18      	adds	r0, r3, #0
10008262:	46bd      	mov	sp, r7
10008264:	b003      	add	sp, #12
10008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008268:	10014584 	.word	0x10014584
1000826c:	1001351d 	.word	0x1001351d
10008270:	10014608 	.word	0x10014608
10008274:	100133fd 	.word	0x100133fd
10008278:	100102c1 	.word	0x100102c1

1000827c <sms_service_advertise>:

 at_ble_status_t sms_service_advertise(void)
 {
1000827c:	b5b0      	push	{r4, r5, r7, lr}
1000827e:	b086      	sub	sp, #24
10008280:	af04      	add	r7, sp, #16
     at_ble_status_t status = AT_BLE_FAILURE;
10008282:	1dfb      	adds	r3, r7, #7
10008284:	22e2      	movs	r2, #226	; 0xe2
10008286:	701a      	strb	r2, [r3, #0]

     /* Set the advertisement data */
     if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008288:	1dfc      	adds	r4, r7, #7
1000828a:	4b20      	ldr	r3, [pc, #128]	; (1000830c <sms_service_advertise+0x90>)
1000828c:	4798      	blx	r3
1000828e:	1c03      	adds	r3, r0, #0
10008290:	7023      	strb	r3, [r4, #0]
10008292:	1dfb      	adds	r3, r7, #7
10008294:	781b      	ldrb	r3, [r3, #0]
10008296:	2b00      	cmp	r3, #0
10008298:	d00a      	beq.n	100082b0 <sms_service_advertise+0x34>
         DBG_LOG("\n\r[sms_service_advertise]\n\radvertisement data set failed!");
1000829a:	4b1d      	ldr	r3, [pc, #116]	; (10008310 <sms_service_advertise+0x94>)
1000829c:	1c18      	adds	r0, r3, #0
1000829e:	4b1d      	ldr	r3, [pc, #116]	; (10008314 <sms_service_advertise+0x98>)
100082a0:	4798      	blx	r3
100082a2:	4b1d      	ldr	r3, [pc, #116]	; (10008318 <sms_service_advertise+0x9c>)
100082a4:	1c18      	adds	r0, r3, #0
100082a6:	4b1d      	ldr	r3, [pc, #116]	; (1000831c <sms_service_advertise+0xa0>)
100082a8:	4798      	blx	r3
         return status;
100082aa:	1dfb      	adds	r3, r7, #7
100082ac:	781b      	ldrb	r3, [r3, #0]
100082ae:	e029      	b.n	10008304 <sms_service_advertise+0x88>
     }

     /* Start of advertisement */
     if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100082b0:	1dfc      	adds	r4, r7, #7
100082b2:	23c8      	movs	r3, #200	; 0xc8
100082b4:	00db      	lsls	r3, r3, #3
100082b6:	9300      	str	r3, [sp, #0]
100082b8:	4b19      	ldr	r3, [pc, #100]	; (10008320 <sms_service_advertise+0xa4>)
100082ba:	9301      	str	r3, [sp, #4]
100082bc:	2300      	movs	r3, #0
100082be:	9302      	str	r3, [sp, #8]
100082c0:	2000      	movs	r0, #0
100082c2:	2101      	movs	r1, #1
100082c4:	2200      	movs	r2, #0
100082c6:	2300      	movs	r3, #0
100082c8:	4d16      	ldr	r5, [pc, #88]	; (10008324 <sms_service_advertise+0xa8>)
100082ca:	47a8      	blx	r5
100082cc:	1c03      	adds	r3, r0, #0
100082ce:	7023      	strb	r3, [r4, #0]
100082d0:	1dfb      	adds	r3, r7, #7
100082d2:	781b      	ldrb	r3, [r3, #0]
100082d4:	2b00      	cmp	r3, #0
100082d6:	d109      	bne.n	100082ec <sms_service_advertise+0x70>
     {
         DBG_LOG("\n\r[sms_service_advertise]\n\rBLE Started Advertisement");
100082d8:	4b0d      	ldr	r3, [pc, #52]	; (10008310 <sms_service_advertise+0x94>)
100082da:	1c18      	adds	r0, r3, #0
100082dc:	4b0d      	ldr	r3, [pc, #52]	; (10008314 <sms_service_advertise+0x98>)
100082de:	4798      	blx	r3
100082e0:	4b11      	ldr	r3, [pc, #68]	; (10008328 <sms_service_advertise+0xac>)
100082e2:	1c18      	adds	r0, r3, #0
100082e4:	4b0d      	ldr	r3, [pc, #52]	; (1000831c <sms_service_advertise+0xa0>)
100082e6:	4798      	blx	r3
         return AT_BLE_SUCCESS;
100082e8:	2300      	movs	r3, #0
100082ea:	e00b      	b.n	10008304 <sms_service_advertise+0x88>
         } else {
         DBG_LOG("\n\r[sms_service_advertise]\n\rBLE Advertisement start failed: reason 0x%x", status);
100082ec:	4b08      	ldr	r3, [pc, #32]	; (10008310 <sms_service_advertise+0x94>)
100082ee:	1c18      	adds	r0, r3, #0
100082f0:	4b08      	ldr	r3, [pc, #32]	; (10008314 <sms_service_advertise+0x98>)
100082f2:	4798      	blx	r3
100082f4:	1dfb      	adds	r3, r7, #7
100082f6:	781b      	ldrb	r3, [r3, #0]
100082f8:	4a0c      	ldr	r2, [pc, #48]	; (1000832c <sms_service_advertise+0xb0>)
100082fa:	1c10      	adds	r0, r2, #0
100082fc:	1c19      	adds	r1, r3, #0
100082fe:	4b07      	ldr	r3, [pc, #28]	; (1000831c <sms_service_advertise+0xa0>)
10008300:	4798      	blx	r3
     }
     return AT_BLE_FAILURE;
10008302:	23e2      	movs	r3, #226	; 0xe2
 }
10008304:	1c18      	adds	r0, r3, #0
10008306:	46bd      	mov	sp, r7
10008308:	b002      	add	sp, #8
1000830a:	bdb0      	pop	{r4, r5, r7, pc}
1000830c:	1000d8a1 	.word	0x1000d8a1
10008310:	10014584 	.word	0x10014584
10008314:	1001351d 	.word	0x1001351d
10008318:	1001469c 	.word	0x1001469c
1000831c:	100133fd 	.word	0x100133fd
10008320:	0000028f 	.word	0x0000028f
10008324:	1000fa35 	.word	0x1000fa35
10008328:	100146d8 	.word	0x100146d8
1000832c:	10014710 	.word	0x10014710

10008330 <sms_button_configure_gpio>:
volatile bool dbg_gpio_pin_state = false;


/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
10008330:	b580      	push	{r7, lr}
10008332:	b082      	sub	sp, #8
10008334:	af00      	add	r7, sp, #0
		//DBG_LOG("Problem while setting up dbg pin");
	//}
	//gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);

	/* Wake up input @ PIN_A0_GPIO_0 */
	gpio_get_config_defaults(&config_gpio_pin);
10008336:	1d3b      	adds	r3, r7, #4
10008338:	1c18      	adds	r0, r3, #0
1000833a:	4b1a      	ldr	r3, [pc, #104]	; (100083a4 <sms_button_configure_gpio+0x74>)
1000833c:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000833e:	1d3b      	adds	r3, r7, #4
10008340:	2200      	movs	r2, #0
10008342:	701a      	strb	r2, [r3, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008344:	1d3b      	adds	r3, r7, #4
10008346:	2202      	movs	r2, #2
10008348:	705a      	strb	r2, [r3, #1]
	config_gpio_pin.aon_wakeup = true;
1000834a:	1d3b      	adds	r3, r7, #4
1000834c:	2201      	movs	r2, #1
1000834e:	70da      	strb	r2, [r3, #3]
	if(gpio_pin_set_config(PIN_AO_GPIO_0, &config_gpio_pin) != STATUS_OK) {
10008350:	1d3b      	adds	r3, r7, #4
10008352:	201f      	movs	r0, #31
10008354:	1c19      	adds	r1, r3, #0
10008356:	4b14      	ldr	r3, [pc, #80]	; (100083a8 <sms_button_configure_gpio+0x78>)
10008358:	4798      	blx	r3
1000835a:	1e03      	subs	r3, r0, #0
1000835c:	d008      	beq.n	10008370 <sms_button_configure_gpio+0x40>
		DBG_LOG("\n\r[sms_button_configure]\n\rproblem while setting up wake-up pin");
1000835e:	4b13      	ldr	r3, [pc, #76]	; (100083ac <sms_button_configure_gpio+0x7c>)
10008360:	1c18      	adds	r0, r3, #0
10008362:	4b13      	ldr	r3, [pc, #76]	; (100083b0 <sms_button_configure_gpio+0x80>)
10008364:	4798      	blx	r3
10008366:	4b13      	ldr	r3, [pc, #76]	; (100083b4 <sms_button_configure_gpio+0x84>)
10008368:	1c18      	adds	r0, r3, #0
1000836a:	4b13      	ldr	r3, [pc, #76]	; (100083b8 <sms_button_configure_gpio+0x88>)
1000836c:	4798      	blx	r3
1000836e:	e007      	b.n	10008380 <sms_button_configure_gpio+0x50>
	}
	else {
		DBG_LOG_DEV("\n\r[sms_button_configure]\n\rwake-up pin set up correctly");
10008370:	4b0e      	ldr	r3, [pc, #56]	; (100083ac <sms_button_configure_gpio+0x7c>)
10008372:	1c18      	adds	r0, r3, #0
10008374:	4b0e      	ldr	r3, [pc, #56]	; (100083b0 <sms_button_configure_gpio+0x80>)
10008376:	4798      	blx	r3
10008378:	4b10      	ldr	r3, [pc, #64]	; (100083bc <sms_button_configure_gpio+0x8c>)
1000837a:	1c18      	adds	r0, r3, #0
1000837c:	4b0e      	ldr	r3, [pc, #56]	; (100083b8 <sms_button_configure_gpio+0x88>)
1000837e:	4798      	blx	r3
	}

	/* Button 0 on SAMB11 XPLAINED */
	gpio_get_config_defaults(&config_gpio_pin);
10008380:	1d3b      	adds	r3, r7, #4
10008382:	1c18      	adds	r0, r3, #0
10008384:	4b07      	ldr	r3, [pc, #28]	; (100083a4 <sms_button_configure_gpio+0x74>)
10008386:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008388:	1d3b      	adds	r3, r7, #4
1000838a:	2200      	movs	r2, #0
1000838c:	701a      	strb	r2, [r3, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000838e:	1d3b      	adds	r3, r7, #4
10008390:	2200      	movs	r2, #0
10008392:	705a      	strb	r2, [r3, #1]
	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
10008394:	1d3b      	adds	r3, r7, #4
10008396:	2017      	movs	r0, #23
10008398:	1c19      	adds	r1, r3, #0
1000839a:	4b03      	ldr	r3, [pc, #12]	; (100083a8 <sms_button_configure_gpio+0x78>)
1000839c:	4798      	blx	r3
}
1000839e:	46bd      	mov	sp, r7
100083a0:	b002      	add	sp, #8
100083a2:	bd80      	pop	{r7, pc}
100083a4:	10008ead 	.word	0x10008ead
100083a8:	10008ed5 	.word	0x10008ed5
100083ac:	10014758 	.word	0x10014758
100083b0:	1001351d 	.word	0x1001351d
100083b4:	1001475c 	.word	0x1001475c
100083b8:	100133fd 	.word	0x100133fd
100083bc:	1001479c 	.word	0x1001479c

100083c0 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100083c0:	b580      	push	{r7, lr}
100083c2:	af00      	add	r7, sp, #0
	gpio_init();
100083c4:	4b09      	ldr	r3, [pc, #36]	; (100083ec <sms_button_register_callbacks+0x2c>)
100083c6:	4798      	blx	r3

	/* Button 0 callback */
	gpio_register_callback(BUTTON_0_PIN, sms_button_bt2_callback, GPIO_CALLBACK_RISING);
100083c8:	4b09      	ldr	r3, [pc, #36]	; (100083f0 <sms_button_register_callbacks+0x30>)
100083ca:	2017      	movs	r0, #23
100083cc:	1c19      	adds	r1, r3, #0
100083ce:	2202      	movs	r2, #2
100083d0:	4b08      	ldr	r3, [pc, #32]	; (100083f4 <sms_button_register_callbacks+0x34>)
100083d2:	4798      	blx	r3
	gpio_enable_callback(BUTTON_0_PIN);
100083d4:	2017      	movs	r0, #23
100083d6:	4b08      	ldr	r3, [pc, #32]	; (100083f8 <sms_button_register_callbacks+0x38>)
100083d8:	4798      	blx	r3

	/* GPIO0 callback */
	gpio_register_callback(PIN_AO_GPIO_0, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
100083da:	4b08      	ldr	r3, [pc, #32]	; (100083fc <sms_button_register_callbacks+0x3c>)
100083dc:	201f      	movs	r0, #31
100083de:	1c19      	adds	r1, r3, #0
100083e0:	2202      	movs	r2, #2
100083e2:	4b04      	ldr	r3, [pc, #16]	; (100083f4 <sms_button_register_callbacks+0x34>)
100083e4:	4798      	blx	r3
	//gpio_enable_callback(PIN_AO_GPIO_0);
}
100083e6:	46bd      	mov	sp, r7
100083e8:	bd80      	pop	{r7, pc}
100083ea:	46c0      	nop			; (mov r8, r8)
100083ec:	10009a5d 	.word	0x10009a5d
100083f0:	10008431 	.word	0x10008431
100083f4:	10009459 	.word	0x10009459
100083f8:	1000974d 	.word	0x1000974d
100083fc:	10008401 	.word	0x10008401

10008400 <sms_button_bt1_callback>:

/* Callbacks --> sending interrupt message to platform */
void sms_button_bt1_callback(void)
{
10008400:	b598      	push	{r3, r4, r7, lr}
10008402:	af00      	add	r7, sp, #0
    if(conn_status) {
10008404:	4b07      	ldr	r3, [pc, #28]	; (10008424 <sms_button_bt1_callback+0x24>)
10008406:	781b      	ldrb	r3, [r3, #0]
10008408:	2b00      	cmp	r3, #0
1000840a:	d008      	beq.n	1000841e <sms_button_bt1_callback+0x1e>
        sms_button_callback = SMS_BUTTON_BT1;
1000840c:	4b06      	ldr	r3, [pc, #24]	; (10008428 <sms_button_bt1_callback+0x28>)
1000840e:	2200      	movs	r2, #0
10008410:	701a      	strb	r2, [r3, #0]
        send_plf_int_msg_ind(PIN_AO_GPIO_0, GPIO_CALLBACK_RISING, NULL, 0);
10008412:	201f      	movs	r0, #31
10008414:	2102      	movs	r1, #2
10008416:	2200      	movs	r2, #0
10008418:	2300      	movs	r3, #0
1000841a:	4c04      	ldr	r4, [pc, #16]	; (1000842c <sms_button_bt1_callback+0x2c>)
1000841c:	47a0      	blx	r4
    }
}
1000841e:	46bd      	mov	sp, r7
10008420:	bd98      	pop	{r3, r4, r7, pc}
10008422:	46c0      	nop			; (mov r8, r8)
10008424:	100161e0 	.word	0x100161e0
10008428:	10016968 	.word	0x10016968
1000842c:	1000e555 	.word	0x1000e555

10008430 <sms_button_bt2_callback>:
void sms_button_bt2_callback(void)
{
10008430:	b598      	push	{r3, r4, r7, lr}
10008432:	af00      	add	r7, sp, #0
	/* Add button callback functionality here */
	if(conn_status) {
10008434:	4b07      	ldr	r3, [pc, #28]	; (10008454 <sms_button_bt2_callback+0x24>)
10008436:	781b      	ldrb	r3, [r3, #0]
10008438:	2b00      	cmp	r3, #0
1000843a:	d008      	beq.n	1000844e <sms_button_bt2_callback+0x1e>
        sms_button_callback = SMS_BUTTON_BT2;
1000843c:	4b06      	ldr	r3, [pc, #24]	; (10008458 <sms_button_bt2_callback+0x28>)
1000843e:	2201      	movs	r2, #1
10008440:	701a      	strb	r2, [r3, #0]
		send_plf_int_msg_ind(BUTTON_0_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008442:	2017      	movs	r0, #23
10008444:	2102      	movs	r1, #2
10008446:	2200      	movs	r2, #0
10008448:	2300      	movs	r3, #0
1000844a:	4c04      	ldr	r4, [pc, #16]	; (1000845c <sms_button_bt2_callback+0x2c>)
1000844c:	47a0      	blx	r4
	}
}
1000844e:	46bd      	mov	sp, r7
10008450:	bd98      	pop	{r3, r4, r7, pc}
10008452:	46c0      	nop			; (mov r8, r8)
10008454:	100161e0 	.word	0x100161e0
10008458:	10016968 	.word	0x10016968
1000845c:	1000e555 	.word	0x1000e555

10008460 <sms_button_bt1_fn>:

/* Callback functions --> doing things */
void sms_button_bt1_fn(void)
{
10008460:	b590      	push	{r4, r7, lr}
10008462:	b083      	sub	sp, #12
10008464:	af00      	add	r7, sp, #0
	at_ble_status_t status;
    uint32_t timer_val;

    /* Disable GPIO interrupt in order to debounce */
    gpio_disable_callback(PIN_AO_GPIO_0);
10008466:	201f      	movs	r0, #31
10008468:	4b3d      	ldr	r3, [pc, #244]	; (10008560 <sms_button_bt1_fn+0x100>)
1000846a:	4798      	blx	r3
    DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rdisabling GPIO interrupts");
1000846c:	4b3d      	ldr	r3, [pc, #244]	; (10008564 <sms_button_bt1_fn+0x104>)
1000846e:	1c18      	adds	r0, r3, #0
10008470:	4b3d      	ldr	r3, [pc, #244]	; (10008568 <sms_button_bt1_fn+0x108>)
10008472:	4798      	blx	r3
10008474:	4b3d      	ldr	r3, [pc, #244]	; (1000856c <sms_button_bt1_fn+0x10c>)
10008476:	1c18      	adds	r0, r3, #0
10008478:	4b3d      	ldr	r3, [pc, #244]	; (10008570 <sms_button_bt1_fn+0x110>)
1000847a:	4798      	blx	r3
    /* Prevent sleeping */
    //acquire_sleep_lock();
    //DBG_LOG_DEV("Preventing sleep...");

    /* Updating characteristic value */
	sms_button_char_value = ((sms_button_char_value >= 255) ? 0 : (sms_button_char_value+1));
1000847c:	4b3d      	ldr	r3, [pc, #244]	; (10008574 <sms_button_bt1_fn+0x114>)
1000847e:	781b      	ldrb	r3, [r3, #0]
10008480:	2bff      	cmp	r3, #255	; 0xff
10008482:	d004      	beq.n	1000848e <sms_button_bt1_fn+0x2e>
10008484:	4b3b      	ldr	r3, [pc, #236]	; (10008574 <sms_button_bt1_fn+0x114>)
10008486:	781b      	ldrb	r3, [r3, #0]
10008488:	3301      	adds	r3, #1
1000848a:	b2da      	uxtb	r2, r3
1000848c:	e000      	b.n	10008490 <sms_button_bt1_fn+0x30>
1000848e:	2200      	movs	r2, #0
10008490:	4b38      	ldr	r3, [pc, #224]	; (10008574 <sms_button_bt1_fn+0x114>)
10008492:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rcurrent characteristic value: %d", sms_button_char_value);
10008494:	4b33      	ldr	r3, [pc, #204]	; (10008564 <sms_button_bt1_fn+0x104>)
10008496:	1c18      	adds	r0, r3, #0
10008498:	4b33      	ldr	r3, [pc, #204]	; (10008568 <sms_button_bt1_fn+0x108>)
1000849a:	4798      	blx	r3
1000849c:	4b35      	ldr	r3, [pc, #212]	; (10008574 <sms_button_bt1_fn+0x114>)
1000849e:	781b      	ldrb	r3, [r3, #0]
100084a0:	1c1a      	adds	r2, r3, #0
100084a2:	4b35      	ldr	r3, [pc, #212]	; (10008578 <sms_button_bt1_fn+0x118>)
100084a4:	1c18      	adds	r0, r3, #0
100084a6:	1c11      	adds	r1, r2, #0
100084a8:	4b31      	ldr	r3, [pc, #196]	; (10008570 <sms_button_bt1_fn+0x110>)
100084aa:	4798      	blx	r3
    /* Timing measurement pin */
	//dbg_gpio_pin_state = !dbg_gpio_pin_state;
	//gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);

    /* Set and send the new characteristic value before debouncing (latency) */
	status = at_ble_characteristic_value_set(sms_button_service_handler.serv_chars.char_val_handle, &sms_button_char_value, sizeof(uint8_t));
100084ac:	4b33      	ldr	r3, [pc, #204]	; (1000857c <sms_button_bt1_fn+0x11c>)
100084ae:	8a9a      	ldrh	r2, [r3, #20]
100084b0:	1dfc      	adds	r4, r7, #7
100084b2:	4b30      	ldr	r3, [pc, #192]	; (10008574 <sms_button_bt1_fn+0x114>)
100084b4:	1c10      	adds	r0, r2, #0
100084b6:	1c19      	adds	r1, r3, #0
100084b8:	2201      	movs	r2, #1
100084ba:	4b31      	ldr	r3, [pc, #196]	; (10008580 <sms_button_bt1_fn+0x120>)
100084bc:	4798      	blx	r3
100084be:	1c03      	adds	r3, r0, #0
100084c0:	7023      	strb	r3, [r4, #0]
	if(status != AT_BLE_SUCCESS) {
100084c2:	1dfb      	adds	r3, r7, #7
100084c4:	781b      	ldrb	r3, [r3, #0]
100084c6:	2b00      	cmp	r3, #0
100084c8:	d008      	beq.n	100084dc <sms_button_bt1_fn+0x7c>
    	DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rupdating the characteristic failed!");
100084ca:	4b26      	ldr	r3, [pc, #152]	; (10008564 <sms_button_bt1_fn+0x104>)
100084cc:	1c18      	adds	r0, r3, #0
100084ce:	4b26      	ldr	r3, [pc, #152]	; (10008568 <sms_button_bt1_fn+0x108>)
100084d0:	4798      	blx	r3
100084d2:	4b2c      	ldr	r3, [pc, #176]	; (10008584 <sms_button_bt1_fn+0x124>)
100084d4:	1c18      	adds	r0, r3, #0
100084d6:	4b26      	ldr	r3, [pc, #152]	; (10008570 <sms_button_bt1_fn+0x110>)
100084d8:	4798      	blx	r3
100084da:	e02a      	b.n	10008532 <sms_button_bt1_fn+0xd2>
    	} else {
    	DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rupdating the characteristic successful");
100084dc:	4b21      	ldr	r3, [pc, #132]	; (10008564 <sms_button_bt1_fn+0x104>)
100084de:	1c18      	adds	r0, r3, #0
100084e0:	4b21      	ldr	r3, [pc, #132]	; (10008568 <sms_button_bt1_fn+0x108>)
100084e2:	4798      	blx	r3
100084e4:	4b28      	ldr	r3, [pc, #160]	; (10008588 <sms_button_bt1_fn+0x128>)
100084e6:	1c18      	adds	r0, r3, #0
100084e8:	4b21      	ldr	r3, [pc, #132]	; (10008570 <sms_button_bt1_fn+0x110>)
100084ea:	4798      	blx	r3
    	status = at_ble_notification_send(sms_connection_handle, sms_button_service_handler.serv_chars.char_val_handle);
100084ec:	4b27      	ldr	r3, [pc, #156]	; (1000858c <sms_button_bt1_fn+0x12c>)
100084ee:	881a      	ldrh	r2, [r3, #0]
100084f0:	4b22      	ldr	r3, [pc, #136]	; (1000857c <sms_button_bt1_fn+0x11c>)
100084f2:	8a9b      	ldrh	r3, [r3, #20]
100084f4:	1dfc      	adds	r4, r7, #7
100084f6:	1c10      	adds	r0, r2, #0
100084f8:	1c19      	adds	r1, r3, #0
100084fa:	4b25      	ldr	r3, [pc, #148]	; (10008590 <sms_button_bt1_fn+0x130>)
100084fc:	4798      	blx	r3
100084fe:	1c03      	adds	r3, r0, #0
10008500:	7023      	strb	r3, [r4, #0]
    	if(status != AT_BLE_SUCCESS) {
10008502:	1dfb      	adds	r3, r7, #7
10008504:	781b      	ldrb	r3, [r3, #0]
10008506:	2b00      	cmp	r3, #0
10008508:	d00b      	beq.n	10008522 <sms_button_bt1_fn+0xc2>
        	DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rsending notification failed: reason 0x%x", status);
1000850a:	4b16      	ldr	r3, [pc, #88]	; (10008564 <sms_button_bt1_fn+0x104>)
1000850c:	1c18      	adds	r0, r3, #0
1000850e:	4b16      	ldr	r3, [pc, #88]	; (10008568 <sms_button_bt1_fn+0x108>)
10008510:	4798      	blx	r3
10008512:	1dfb      	adds	r3, r7, #7
10008514:	781b      	ldrb	r3, [r3, #0]
10008516:	4a1f      	ldr	r2, [pc, #124]	; (10008594 <sms_button_bt1_fn+0x134>)
10008518:	1c10      	adds	r0, r2, #0
1000851a:	1c19      	adds	r1, r3, #0
1000851c:	4b14      	ldr	r3, [pc, #80]	; (10008570 <sms_button_bt1_fn+0x110>)
1000851e:	4798      	blx	r3
10008520:	e007      	b.n	10008532 <sms_button_bt1_fn+0xd2>
        	} else {
        	DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rsending notification...");
10008522:	4b10      	ldr	r3, [pc, #64]	; (10008564 <sms_button_bt1_fn+0x104>)
10008524:	1c18      	adds	r0, r3, #0
10008526:	4b10      	ldr	r3, [pc, #64]	; (10008568 <sms_button_bt1_fn+0x108>)
10008528:	4798      	blx	r3
1000852a:	4b1b      	ldr	r3, [pc, #108]	; (10008598 <sms_button_bt1_fn+0x138>)
1000852c:	1c18      	adds	r0, r3, #0
1000852e:	4b10      	ldr	r3, [pc, #64]	; (10008570 <sms_button_bt1_fn+0x110>)
10008530:	4798      	blx	r3
    /* Timing measurement pin */
	//dbg_gpio_pin_state = !dbg_gpio_pin_state;
	//gpio_pin_set_output_level(dbg_gpio_pin, dbg_gpio_pin_state);

    /* Start timer to debounce */
    DBG_LOG_DEV("\n\r[sms_button_bt1_fn]\n\rsarting timer for %d ms", SMS_BUTTON_DEBOUNCE_MS);
10008532:	4b0c      	ldr	r3, [pc, #48]	; (10008564 <sms_button_bt1_fn+0x104>)
10008534:	1c18      	adds	r0, r3, #0
10008536:	4b0c      	ldr	r3, [pc, #48]	; (10008568 <sms_button_bt1_fn+0x108>)
10008538:	4798      	blx	r3
1000853a:	4b18      	ldr	r3, [pc, #96]	; (1000859c <sms_button_bt1_fn+0x13c>)
1000853c:	1c18      	adds	r0, r3, #0
1000853e:	2164      	movs	r1, #100	; 0x64
10008540:	4b0b      	ldr	r3, [pc, #44]	; (10008570 <sms_button_bt1_fn+0x110>)
10008542:	4798      	blx	r3

    timer_val = SMS_TIMER_MS_TO_LOAD(SMS_BUTTON_DEBOUNCE_MS);
10008544:	4b16      	ldr	r3, [pc, #88]	; (100085a0 <sms_button_bt1_fn+0x140>)
10008546:	603b      	str	r3, [r7, #0]
    timer_set_value(timer_val);
10008548:	683b      	ldr	r3, [r7, #0]
1000854a:	1c18      	adds	r0, r3, #0
1000854c:	4b15      	ldr	r3, [pc, #84]	; (100085a4 <sms_button_bt1_fn+0x144>)
1000854e:	4798      	blx	r3
    timer_state = SMS_TIMER_DEBOUNCE;
10008550:	4b15      	ldr	r3, [pc, #84]	; (100085a8 <sms_button_bt1_fn+0x148>)
10008552:	2200      	movs	r2, #0
10008554:	701a      	strb	r2, [r3, #0]
    timer_enable();
10008556:	4b15      	ldr	r3, [pc, #84]	; (100085ac <sms_button_bt1_fn+0x14c>)
10008558:	4798      	blx	r3
    //hw_timer_start(SMS_BUTTON_DEBOUNCE_MS);
}
1000855a:	46bd      	mov	sp, r7
1000855c:	b003      	add	sp, #12
1000855e:	bd90      	pop	{r4, r7, pc}
10008560:	10009815 	.word	0x10009815
10008564:	10014758 	.word	0x10014758
10008568:	1001351d 	.word	0x1001351d
1000856c:	100147d4 	.word	0x100147d4
10008570:	100133fd 	.word	0x100133fd
10008574:	10016908 	.word	0x10016908
10008578:	10014808 	.word	0x10014808
1000857c:	1001690c 	.word	0x1001690c
10008580:	100102f5 	.word	0x100102f5
10008584:	10014840 	.word	0x10014840
10008588:	1001487c 	.word	0x1001487c
1000858c:	1001695c 	.word	0x1001695c
10008590:	10010495 	.word	0x10010495
10008594:	100148bc 	.word	0x100148bc
10008598:	100148fc 	.word	0x100148fc
1000859c:	1001492c 	.word	0x1001492c
100085a0:	0027ac40 	.word	0x0027ac40
100085a4:	1000a555 	.word	0x1000a555
100085a8:	10016909 	.word	0x10016909
100085ac:	1000a5a1 	.word	0x1000a5a1

100085b0 <sms_button_bt2_fn>:
void sms_button_bt2_fn(void)
{
100085b0:	b580      	push	{r7, lr}
100085b2:	af00      	add	r7, sp, #0
}
100085b4:	46bd      	mov	sp, r7
100085b6:	bd80      	pop	{r7, pc}

100085b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
100085b8:	b580      	push	{r7, lr}
100085ba:	b082      	sub	sp, #8
100085bc:	af00      	add	r7, sp, #0
100085be:	1c02      	adds	r2, r0, #0
100085c0:	1dfb      	adds	r3, r7, #7
100085c2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100085c4:	4b06      	ldr	r3, [pc, #24]	; (100085e0 <NVIC_EnableIRQ+0x28>)
100085c6:	1dfa      	adds	r2, r7, #7
100085c8:	7812      	ldrb	r2, [r2, #0]
100085ca:	1c11      	adds	r1, r2, #0
100085cc:	221f      	movs	r2, #31
100085ce:	400a      	ands	r2, r1
100085d0:	2101      	movs	r1, #1
100085d2:	4091      	lsls	r1, r2
100085d4:	1c0a      	adds	r2, r1, #0
100085d6:	601a      	str	r2, [r3, #0]
}
100085d8:	46bd      	mov	sp, r7
100085da:	b002      	add	sp, #8
100085dc:	bd80      	pop	{r7, pc}
100085de:	46c0      	nop			; (mov r8, r8)
100085e0:	e000e100 	.word	0xe000e100

100085e4 <sms_timer_fn>:
#include "ble_utils.h"
#include "app_include.h"
#include "../Inc/sms_timer.h"

void sms_timer_fn(sms_timer_state_t state)
{
100085e4:	b580      	push	{r7, lr}
100085e6:	b082      	sub	sp, #8
100085e8:	af00      	add	r7, sp, #0
100085ea:	1c02      	adds	r2, r0, #0
100085ec:	1dfb      	adds	r3, r7, #7
100085ee:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("\n\r[sms_timer_fn]\n\rstopping timer");
100085f0:	4b12      	ldr	r3, [pc, #72]	; (1000863c <sms_timer_fn+0x58>)
100085f2:	1c18      	adds	r0, r3, #0
100085f4:	4b12      	ldr	r3, [pc, #72]	; (10008640 <sms_timer_fn+0x5c>)
100085f6:	4798      	blx	r3
100085f8:	4b12      	ldr	r3, [pc, #72]	; (10008644 <sms_timer_fn+0x60>)
100085fa:	1c18      	adds	r0, r3, #0
100085fc:	4b12      	ldr	r3, [pc, #72]	; (10008648 <sms_timer_fn+0x64>)
100085fe:	4798      	blx	r3
    timer_disable();
10008600:	4b12      	ldr	r3, [pc, #72]	; (1000864c <sms_timer_fn+0x68>)
10008602:	4798      	blx	r3

    switch(state) {
10008604:	1dfb      	adds	r3, r7, #7
10008606:	781b      	ldrb	r3, [r3, #0]
10008608:	2b04      	cmp	r3, #4
1000860a:	d810      	bhi.n	1000862e <sms_timer_fn+0x4a>
1000860c:	009a      	lsls	r2, r3, #2
1000860e:	4b10      	ldr	r3, [pc, #64]	; (10008650 <sms_timer_fn+0x6c>)
10008610:	18d3      	adds	r3, r2, r3
10008612:	681b      	ldr	r3, [r3, #0]
10008614:	469f      	mov	pc, r3
        case SMS_TIMER_DEBOUNCE:
        DBG_LOG_DEV("\n\r[sms_timer_fn]\n\renabling GPIO interrupts");
10008616:	4b09      	ldr	r3, [pc, #36]	; (1000863c <sms_timer_fn+0x58>)
10008618:	1c18      	adds	r0, r3, #0
1000861a:	4b09      	ldr	r3, [pc, #36]	; (10008640 <sms_timer_fn+0x5c>)
1000861c:	4798      	blx	r3
1000861e:	4b0d      	ldr	r3, [pc, #52]	; (10008654 <sms_timer_fn+0x70>)
10008620:	1c18      	adds	r0, r3, #0
10008622:	4b09      	ldr	r3, [pc, #36]	; (10008648 <sms_timer_fn+0x64>)
10008624:	4798      	blx	r3
        gpio_enable_callback(PIN_AO_GPIO_0);
10008626:	201f      	movs	r0, #31
10008628:	4b0b      	ldr	r3, [pc, #44]	; (10008658 <sms_timer_fn+0x74>)
1000862a:	4798      	blx	r3
        //DBG_LOG_DEV("Enabling sleep...");
        //release_sleep_lock();
        break;
1000862c:	e002      	b.n	10008634 <sms_timer_fn+0x50>

        case SMS_TIMER_DELTA_CNT:
        break;

        default:
        break;
1000862e:	46c0      	nop			; (mov r8, r8)
10008630:	e000      	b.n	10008634 <sms_timer_fn+0x50>

        case SMS_TIMER_SPI_FINISH:
        break;

        case SMS_TIMER_DELTA_CNT:
        break;
10008632:	46c0      	nop			; (mov r8, r8)

        default:
        break;
    }
}
10008634:	46bd      	mov	sp, r7
10008636:	b002      	add	sp, #8
10008638:	bd80      	pop	{r7, pc}
1000863a:	46c0      	nop			; (mov r8, r8)
1000863c:	1001495c 	.word	0x1001495c
10008640:	1001351d 	.word	0x1001351d
10008644:	10014960 	.word	0x10014960
10008648:	100133fd 	.word	0x100133fd
1000864c:	1000a5bd 	.word	0x1000a5bd
10008650:	100149d8 	.word	0x100149d8
10008654:	10014984 	.word	0x10014984
10008658:	1000974d 	.word	0x1000974d

1000865c <sms_timer_callback>:

void sms_timer_callback(void)
{
1000865c:	b580      	push	{r7, lr}
1000865e:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("\n\r[sms_timer_callback]\n\rsms timer done!");
10008660:	4b07      	ldr	r3, [pc, #28]	; (10008680 <sms_timer_callback+0x24>)
10008662:	1c18      	adds	r0, r3, #0
10008664:	4b07      	ldr	r3, [pc, #28]	; (10008684 <sms_timer_callback+0x28>)
10008666:	4798      	blx	r3
10008668:	4b07      	ldr	r3, [pc, #28]	; (10008688 <sms_timer_callback+0x2c>)
1000866a:	1c18      	adds	r0, r3, #0
1000866c:	4b07      	ldr	r3, [pc, #28]	; (1000868c <sms_timer_callback+0x30>)
1000866e:	4798      	blx	r3
    sms_timer_fn(timer_state);
10008670:	4b07      	ldr	r3, [pc, #28]	; (10008690 <sms_timer_callback+0x34>)
10008672:	781b      	ldrb	r3, [r3, #0]
10008674:	b2db      	uxtb	r3, r3
10008676:	1c18      	adds	r0, r3, #0
10008678:	4b06      	ldr	r3, [pc, #24]	; (10008694 <sms_timer_callback+0x38>)
1000867a:	4798      	blx	r3
}
1000867c:	46bd      	mov	sp, r7
1000867e:	bd80      	pop	{r7, pc}
10008680:	1001495c 	.word	0x1001495c
10008684:	1001351d 	.word	0x1001351d
10008688:	100149b0 	.word	0x100149b0
1000868c:	100133fd 	.word	0x100133fd
10008690:	10016909 	.word	0x10016909
10008694:	100085e5 	.word	0x100085e5

10008698 <sms_timer_configure>:

void sms_timer_configure(void)
{
10008698:	b580      	push	{r7, lr}
1000869a:	b082      	sub	sp, #8
1000869c:	af00      	add	r7, sp, #0
    struct timer_config config_timer;
    timer_get_config_defaults(&config_timer);
1000869e:	1c3b      	adds	r3, r7, #0
100086a0:	1c18      	adds	r0, r3, #0
100086a2:	4b06      	ldr	r3, [pc, #24]	; (100086bc <sms_timer_configure+0x24>)
100086a4:	4798      	blx	r3
    config_timer.reload_value = 26000000;
100086a6:	1c3b      	adds	r3, r7, #0
100086a8:	4a05      	ldr	r2, [pc, #20]	; (100086c0 <sms_timer_configure+0x28>)
100086aa:	601a      	str	r2, [r3, #0]
    timer_init(&config_timer);
100086ac:	1c3b      	adds	r3, r7, #0
100086ae:	1c18      	adds	r0, r3, #0
100086b0:	4b04      	ldr	r3, [pc, #16]	; (100086c4 <sms_timer_configure+0x2c>)
100086b2:	4798      	blx	r3
}
100086b4:	46bd      	mov	sp, r7
100086b6:	b002      	add	sp, #8
100086b8:	bd80      	pop	{r7, pc}
100086ba:	46c0      	nop			; (mov r8, r8)
100086bc:	1000a539 	.word	0x1000a539
100086c0:	018cba80 	.word	0x018cba80
100086c4:	1000a621 	.word	0x1000a621

100086c8 <sms_timer_configure_callback>:

void sms_timer_configure_callback(void)
{
100086c8:	b580      	push	{r7, lr}
100086ca:	af00      	add	r7, sp, #0
    timer_register_callback(sms_timer_callback);
100086cc:	4b04      	ldr	r3, [pc, #16]	; (100086e0 <sms_timer_configure_callback+0x18>)
100086ce:	1c18      	adds	r0, r3, #0
100086d0:	4b04      	ldr	r3, [pc, #16]	; (100086e4 <sms_timer_configure_callback+0x1c>)
100086d2:	4798      	blx	r3
    NVIC_EnableIRQ(TIMER0_IRQn);
100086d4:	201a      	movs	r0, #26
100086d6:	4b04      	ldr	r3, [pc, #16]	; (100086e8 <sms_timer_configure_callback+0x20>)
100086d8:	4798      	blx	r3
100086da:	46bd      	mov	sp, r7
100086dc:	bd80      	pop	{r7, pc}
100086de:	46c0      	nop			; (mov r8, r8)
100086e0:	1000865d 	.word	0x1000865d
100086e4:	1000a5d9 	.word	0x1000a5d9
100086e8:	100085b9 	.word	0x100085b9

100086ec <ble_connected_app_event>:
* BLE callback functions
* ---------------------- */

/* Callback registered for AT_BLE_CONNECTED (#5) event from stack */
static at_ble_status_t ble_connected_app_event(void *params)
{
100086ec:	b580      	push	{r7, lr}
100086ee:	b084      	sub	sp, #16
100086f0:	af00      	add	r7, sp, #0
100086f2:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("\n\r[ble_connected_app_event]\n\rdevices connected");
100086f4:	4b0a      	ldr	r3, [pc, #40]	; (10008720 <ble_connected_app_event+0x34>)
100086f6:	1c18      	adds	r0, r3, #0
100086f8:	4b0a      	ldr	r3, [pc, #40]	; (10008724 <ble_connected_app_event+0x38>)
100086fa:	4798      	blx	r3
100086fc:	4b0a      	ldr	r3, [pc, #40]	; (10008728 <ble_connected_app_event+0x3c>)
100086fe:	1c18      	adds	r0, r3, #0
10008700:	4b0a      	ldr	r3, [pc, #40]	; (1000872c <ble_connected_app_event+0x40>)
10008702:	4798      	blx	r3
    at_ble_connected_t *connected = (at_ble_connected_t *)params;
10008704:	687b      	ldr	r3, [r7, #4]
10008706:	60fb      	str	r3, [r7, #12]
    sms_connection_handle = connected->handle;
10008708:	68fb      	ldr	r3, [r7, #12]
1000870a:	891a      	ldrh	r2, [r3, #8]
1000870c:	4b08      	ldr	r3, [pc, #32]	; (10008730 <ble_connected_app_event+0x44>)
1000870e:	801a      	strh	r2, [r3, #0]
    conn_status = 1;
10008710:	4b08      	ldr	r3, [pc, #32]	; (10008734 <ble_connected_app_event+0x48>)
10008712:	2201      	movs	r2, #1
10008714:	701a      	strb	r2, [r3, #0]
    return AT_BLE_SUCCESS;
10008716:	2300      	movs	r3, #0
}
10008718:	1c18      	adds	r0, r3, #0
1000871a:	46bd      	mov	sp, r7
1000871c:	b004      	add	sp, #16
1000871e:	bd80      	pop	{r7, pc}
10008720:	100149ec 	.word	0x100149ec
10008724:	1001351d 	.word	0x1001351d
10008728:	100149f0 	.word	0x100149f0
1000872c:	100133fd 	.word	0x100133fd
10008730:	1001695c 	.word	0x1001695c
10008734:	100161e0 	.word	0x100161e0

10008738 <ble_disconnected_app_event>:

/* Callback registered for AT_BLE_DISCONNECTED (#6) event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
10008738:	b580      	push	{r7, lr}
1000873a:	b082      	sub	sp, #8
1000873c:	af00      	add	r7, sp, #0
1000873e:	6078      	str	r0, [r7, #4]
    conn_status = 0;
10008740:	4b08      	ldr	r3, [pc, #32]	; (10008764 <ble_disconnected_app_event+0x2c>)
10008742:	2200      	movs	r2, #0
10008744:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("\n\r[ble_disconnected_app_event]\n\rpeer disconnected...");
10008746:	4b08      	ldr	r3, [pc, #32]	; (10008768 <ble_disconnected_app_event+0x30>)
10008748:	1c18      	adds	r0, r3, #0
1000874a:	4b08      	ldr	r3, [pc, #32]	; (1000876c <ble_disconnected_app_event+0x34>)
1000874c:	4798      	blx	r3
1000874e:	4b08      	ldr	r3, [pc, #32]	; (10008770 <ble_disconnected_app_event+0x38>)
10008750:	1c18      	adds	r0, r3, #0
10008752:	4b08      	ldr	r3, [pc, #32]	; (10008774 <ble_disconnected_app_event+0x3c>)
10008754:	4798      	blx	r3
    sms_service_advertise();
10008756:	4b08      	ldr	r3, [pc, #32]	; (10008778 <ble_disconnected_app_event+0x40>)
10008758:	4798      	blx	r3
    ALL_UNUSED(param);
    return AT_BLE_SUCCESS;
1000875a:	2300      	movs	r3, #0
}
1000875c:	1c18      	adds	r0, r3, #0
1000875e:	46bd      	mov	sp, r7
10008760:	b002      	add	sp, #8
10008762:	bd80      	pop	{r7, pc}
10008764:	100161e0 	.word	0x100161e0
10008768:	100149ec 	.word	0x100149ec
1000876c:	1001351d 	.word	0x1001351d
10008770:	10014a20 	.word	0x10014a20
10008774:	100133fd 	.word	0x100133fd
10008778:	1000827d 	.word	0x1000827d

1000877c <ble_paired_app_event>:

/* Callback registered for AT_BLE_PAIR_DONE (#9) event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
1000877c:	b580      	push	{r7, lr}
1000877e:	b082      	sub	sp, #8
10008780:	af00      	add	r7, sp, #0
10008782:	6078      	str	r0, [r7, #4]
    DBG_LOG_DEV("\n\r[ble_paired_app_event]\n\rDevices paired... enabling IRQ on GPIO0");
10008784:	4b07      	ldr	r3, [pc, #28]	; (100087a4 <ble_paired_app_event+0x28>)
10008786:	1c18      	adds	r0, r3, #0
10008788:	4b07      	ldr	r3, [pc, #28]	; (100087a8 <ble_paired_app_event+0x2c>)
1000878a:	4798      	blx	r3
1000878c:	4b07      	ldr	r3, [pc, #28]	; (100087ac <ble_paired_app_event+0x30>)
1000878e:	1c18      	adds	r0, r3, #0
10008790:	4b07      	ldr	r3, [pc, #28]	; (100087b0 <ble_paired_app_event+0x34>)
10008792:	4798      	blx	r3
    gpio_enable_callback(PIN_AO_GPIO_0);
10008794:	201f      	movs	r0, #31
10008796:	4b07      	ldr	r3, [pc, #28]	; (100087b4 <ble_paired_app_event+0x38>)
10008798:	4798      	blx	r3
    //DBG_LOG_CONT_DEV(" ...and enabling sleep.");
    //release_sleep_lock();
    ALL_UNUSED(param);
    return AT_BLE_SUCCESS;
1000879a:	2300      	movs	r3, #0
}
1000879c:	1c18      	adds	r0, r3, #0
1000879e:	46bd      	mov	sp, r7
100087a0:	b002      	add	sp, #8
100087a2:	bd80      	pop	{r7, pc}
100087a4:	100149ec 	.word	0x100149ec
100087a8:	1001351d 	.word	0x1001351d
100087ac:	10014a58 	.word	0x10014a58
100087b0:	100133fd 	.word	0x100133fd
100087b4:	1000974d 	.word	0x1000974d

100087b8 <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED (#29) event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
100087b8:	b580      	push	{r7, lr}
100087ba:	b084      	sub	sp, #16
100087bc:	af00      	add	r7, sp, #0
100087be:	6078      	str	r0, [r7, #4]
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
100087c0:	687b      	ldr	r3, [r7, #4]
100087c2:	60fb      	str	r3, [r7, #12]
    if(!notification_status->status)
100087c4:	68fb      	ldr	r3, [r7, #12]
100087c6:	78db      	ldrb	r3, [r3, #3]
100087c8:	2b00      	cmp	r3, #0
100087ca:	d109      	bne.n	100087e0 <ble_notification_confirmed_app_event+0x28>
    {
        DBG_LOG_DEV("\n\r[ble_notification_confirmed_app_event]\n\rnotification sent successfully");
100087cc:	4b07      	ldr	r3, [pc, #28]	; (100087ec <ble_notification_confirmed_app_event+0x34>)
100087ce:	1c18      	adds	r0, r3, #0
100087d0:	4b07      	ldr	r3, [pc, #28]	; (100087f0 <ble_notification_confirmed_app_event+0x38>)
100087d2:	4798      	blx	r3
100087d4:	4b07      	ldr	r3, [pc, #28]	; (100087f4 <ble_notification_confirmed_app_event+0x3c>)
100087d6:	1c18      	adds	r0, r3, #0
100087d8:	4b07      	ldr	r3, [pc, #28]	; (100087f8 <ble_notification_confirmed_app_event+0x40>)
100087da:	4798      	blx	r3
        return AT_BLE_SUCCESS;
100087dc:	2300      	movs	r3, #0
100087de:	e000      	b.n	100087e2 <ble_notification_confirmed_app_event+0x2a>
    }
    return AT_BLE_FAILURE;
100087e0:	23e2      	movs	r3, #226	; 0xe2
}
100087e2:	1c18      	adds	r0, r3, #0
100087e4:	46bd      	mov	sp, r7
100087e6:	b004      	add	sp, #16
100087e8:	bd80      	pop	{r7, pc}
100087ea:	46c0      	nop			; (mov r8, r8)
100087ec:	100149ec 	.word	0x100149ec
100087f0:	1001351d 	.word	0x1001351d
100087f4:	10014a9c 	.word	0x10014a9c
100087f8:	100133fd 	.word	0x100133fd

100087fc <ble_char_changed_app_event>:

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED (#31) event from stack */
static at_ble_status_t ble_char_changed_app_event(void *params)
{
100087fc:	b580      	push	{r7, lr}
100087fe:	b082      	sub	sp, #8
10008800:	af00      	add	r7, sp, #0
10008802:	6078      	str	r0, [r7, #4]
    ALL_UNUSED(params);
    return AT_BLE_SUCCESS;
10008804:	2300      	movs	r3, #0
}
10008806:	1c18      	adds	r0, r3, #0
10008808:	46bd      	mov	sp, r7
1000880a:	b002      	add	sp, #8
1000880c:	bd80      	pop	{r7, pc}
1000880e:	46c0      	nop			; (mov r8, r8)

10008810 <sms_platform_interrupt>:

/* Callback registered for AT_PLATFORM_EVENT (#58) event */
static void sms_platform_interrupt(void)
{
10008810:	b580      	push	{r7, lr}
10008812:	af00      	add	r7, sp, #0
    //acquire_sleep_lock();
    DBG_LOG_DEV("\n\r[sms_platform_interrupt]\n\rsms_button_callback... %d", sms_button_callback);
10008814:	4b15      	ldr	r3, [pc, #84]	; (1000886c <sms_platform_interrupt+0x5c>)
10008816:	1c18      	adds	r0, r3, #0
10008818:	4b15      	ldr	r3, [pc, #84]	; (10008870 <sms_platform_interrupt+0x60>)
1000881a:	4798      	blx	r3
1000881c:	4b15      	ldr	r3, [pc, #84]	; (10008874 <sms_platform_interrupt+0x64>)
1000881e:	781b      	ldrb	r3, [r3, #0]
10008820:	1c1a      	adds	r2, r3, #0
10008822:	4b15      	ldr	r3, [pc, #84]	; (10008878 <sms_platform_interrupt+0x68>)
10008824:	1c18      	adds	r0, r3, #0
10008826:	1c11      	adds	r1, r2, #0
10008828:	4b14      	ldr	r3, [pc, #80]	; (1000887c <sms_platform_interrupt+0x6c>)
1000882a:	4798      	blx	r3
    switch(sms_button_callback) {
1000882c:	4b11      	ldr	r3, [pc, #68]	; (10008874 <sms_platform_interrupt+0x64>)
1000882e:	781b      	ldrb	r3, [r3, #0]
10008830:	2b00      	cmp	r3, #0
10008832:	d002      	beq.n	1000883a <sms_platform_interrupt+0x2a>
10008834:	2b01      	cmp	r3, #1
10008836:	d00b      	beq.n	10008850 <sms_platform_interrupt+0x40>
        DBG_LOG_DEV("\n\r[sms_platform_interrupt]\n\rbutton2 pressed...");
        sms_button_bt2_fn();
        break;

        default:
        break;
10008838:	e015      	b.n	10008866 <sms_platform_interrupt+0x56>
{
    //acquire_sleep_lock();
    DBG_LOG_DEV("\n\r[sms_platform_interrupt]\n\rsms_button_callback... %d", sms_button_callback);
    switch(sms_button_callback) {
        case SMS_BUTTON_BT1:
        DBG_LOG_DEV("\n\r[sms_platform_interrupt]\n\rbutton1 pressed...");
1000883a:	4b0c      	ldr	r3, [pc, #48]	; (1000886c <sms_platform_interrupt+0x5c>)
1000883c:	1c18      	adds	r0, r3, #0
1000883e:	4b0c      	ldr	r3, [pc, #48]	; (10008870 <sms_platform_interrupt+0x60>)
10008840:	4798      	blx	r3
10008842:	4b0f      	ldr	r3, [pc, #60]	; (10008880 <sms_platform_interrupt+0x70>)
10008844:	1c18      	adds	r0, r3, #0
10008846:	4b0d      	ldr	r3, [pc, #52]	; (1000887c <sms_platform_interrupt+0x6c>)
10008848:	4798      	blx	r3
        sms_button_bt1_fn();
1000884a:	4b0e      	ldr	r3, [pc, #56]	; (10008884 <sms_platform_interrupt+0x74>)
1000884c:	4798      	blx	r3
        break;
1000884e:	e00a      	b.n	10008866 <sms_platform_interrupt+0x56>

        case SMS_BUTTON_BT2:
        DBG_LOG_DEV("\n\r[sms_platform_interrupt]\n\rbutton2 pressed...");
10008850:	4b06      	ldr	r3, [pc, #24]	; (1000886c <sms_platform_interrupt+0x5c>)
10008852:	1c18      	adds	r0, r3, #0
10008854:	4b06      	ldr	r3, [pc, #24]	; (10008870 <sms_platform_interrupt+0x60>)
10008856:	4798      	blx	r3
10008858:	4b0b      	ldr	r3, [pc, #44]	; (10008888 <sms_platform_interrupt+0x78>)
1000885a:	1c18      	adds	r0, r3, #0
1000885c:	4b07      	ldr	r3, [pc, #28]	; (1000887c <sms_platform_interrupt+0x6c>)
1000885e:	4798      	blx	r3
        sms_button_bt2_fn();
10008860:	4b0a      	ldr	r3, [pc, #40]	; (1000888c <sms_platform_interrupt+0x7c>)
10008862:	4798      	blx	r3
        break;
10008864:	46c0      	nop			; (mov r8, r8)

        default:
        break;
    }
    //return AT_BLE_SUCCESS;
}
10008866:	46bd      	mov	sp, r7
10008868:	bd80      	pop	{r7, pc}
1000886a:	46c0      	nop			; (mov r8, r8)
1000886c:	100149ec 	.word	0x100149ec
10008870:	1001351d 	.word	0x1001351d
10008874:	10016968 	.word	0x10016968
10008878:	10014ae8 	.word	0x10014ae8
1000887c:	100133fd 	.word	0x100133fd
10008880:	10014b20 	.word	0x10014b20
10008884:	10008461 	.word	0x10008461
10008888:	10014b50 	.word	0x10014b50
1000888c:	100085b1 	.word	0x100085b1

10008890 <timer_callback_fn>:

/* ------------------------
* Timer callback functions
* ------------------------ */
static void timer_callback_fn(void)
{
10008890:	b580      	push	{r7, lr}
10008892:	af00      	add	r7, sp, #0
    DBG_LOG_DEV("\n\r[timer_callback_fn]\n\r");
10008894:	4b04      	ldr	r3, [pc, #16]	; (100088a8 <timer_callback_fn+0x18>)
10008896:	1c18      	adds	r0, r3, #0
10008898:	4b04      	ldr	r3, [pc, #16]	; (100088ac <timer_callback_fn+0x1c>)
1000889a:	4798      	blx	r3
1000889c:	4b04      	ldr	r3, [pc, #16]	; (100088b0 <timer_callback_fn+0x20>)
1000889e:	1c18      	adds	r0, r3, #0
100088a0:	4b04      	ldr	r3, [pc, #16]	; (100088b4 <timer_callback_fn+0x24>)
100088a2:	4798      	blx	r3
}
100088a4:	46bd      	mov	sp, r7
100088a6:	bd80      	pop	{r7, pc}
100088a8:	100149ec 	.word	0x100149ec
100088ac:	1001351d 	.word	0x1001351d
100088b0:	10014b80 	.word	0x10014b80
100088b4:	100133fd 	.word	0x100133fd

100088b8 <resume_cb>:

/* -------------------------
* Resume callback functions
* ------------------------- */
static void resume_cb(void)
{
100088b8:	b580      	push	{r7, lr}
100088ba:	af00      	add	r7, sp, #0
    init_port_list();
100088bc:	4b07      	ldr	r3, [pc, #28]	; (100088dc <resume_cb+0x24>)
100088be:	4798      	blx	r3
    serial_console_init();
100088c0:	4b07      	ldr	r3, [pc, #28]	; (100088e0 <resume_cb+0x28>)
100088c2:	4798      	blx	r3
    hw_timer_init();
100088c4:	4b07      	ldr	r3, [pc, #28]	; (100088e4 <resume_cb+0x2c>)
100088c6:	4798      	blx	r3
    sms_button_configure_gpio();
100088c8:	4b07      	ldr	r3, [pc, #28]	; (100088e8 <resume_cb+0x30>)
100088ca:	4798      	blx	r3
    hw_timer_register_callback(timer_callback_fn);
100088cc:	4b07      	ldr	r3, [pc, #28]	; (100088ec <resume_cb+0x34>)
100088ce:	1c18      	adds	r0, r3, #0
100088d0:	4b07      	ldr	r3, [pc, #28]	; (100088f0 <resume_cb+0x38>)
100088d2:	4798      	blx	r3
    sms_button_register_callbacks();
100088d4:	4b07      	ldr	r3, [pc, #28]	; (100088f4 <resume_cb+0x3c>)
100088d6:	4798      	blx	r3
}
100088d8:	46bd      	mov	sp, r7
100088da:	bd80      	pop	{r7, pc}
100088dc:	1000e05d 	.word	0x1000e05d
100088e0:	1000dc71 	.word	0x1000dc71
100088e4:	1000de81 	.word	0x1000de81
100088e8:	10008331 	.word	0x10008331
100088ec:	10008891 	.word	0x10008891
100088f0:	1000deb9 	.word	0x1000deb9
100088f4:	100083c1 	.word	0x100083c1

100088f8 <main>:

/**@brief Initialize the service with its included service, characteristics, and descriptors
*/

int main(void)
{
100088f8:	b590      	push	{r4, r7, lr}
100088fa:	b083      	sub	sp, #12
100088fc:	af00      	add	r7, sp, #0
    at_ble_status_t status;

    /* Initialize platform */
    platform_driver_init();
100088fe:	4b4e      	ldr	r3, [pc, #312]	; (10008a38 <main+0x140>)
10008900:	4798      	blx	r3
    /* Prevent sleep mode */
    //DBG_LOG_DEV("Preventing sleep...");
    acquire_sleep_lock();
10008902:	4b4e      	ldr	r3, [pc, #312]	; (10008a3c <main+0x144>)
10008904:	4798      	blx	r3
    /* Initialize serial console */
    serial_console_init();
10008906:	4b4e      	ldr	r3, [pc, #312]	; (10008a40 <main+0x148>)
10008908:	4798      	blx	r3
    /* Welcome... */
    DBG_LOG_DEV("\n\n\n\r"\
1000890a:	4b4e      	ldr	r3, [pc, #312]	; (10008a44 <main+0x14c>)
1000890c:	1c18      	adds	r0, r3, #0
1000890e:	4b4e      	ldr	r3, [pc, #312]	; (10008a48 <main+0x150>)
10008910:	4798      	blx	r3
10008912:	4b4e      	ldr	r3, [pc, #312]	; (10008a4c <main+0x154>)
10008914:	1c18      	adds	r0, r3, #0
10008916:	4b4e      	ldr	r3, [pc, #312]	; (10008a50 <main+0x158>)
10008918:	4798      	blx	r3
    "********************************\n\r"\
    "********************************\n\r"\
    "**   SABRe SMS application    **\n\r"\
    "**----------------------------**");
    switch(sms_device) {
1000891a:	4b4e      	ldr	r3, [pc, #312]	; (10008a54 <main+0x15c>)
1000891c:	781b      	ldrb	r3, [r3, #0]
1000891e:	2b01      	cmp	r3, #1
10008920:	d00d      	beq.n	1000893e <main+0x46>
10008922:	2b02      	cmp	r3, #2
10008924:	d014      	beq.n	10008950 <main+0x58>
10008926:	2b00      	cmp	r3, #0
10008928:	d000      	beq.n	1000892c <main+0x34>
        case SMS_DEVICE_NODE_2:
        DBG_LOG_DEV("** - SMS_DEVICE_NODE_2        **");
        break;

        default:
        break;
1000892a:	e01a      	b.n	10008962 <main+0x6a>
    "********************************\n\r"\
    "**   SABRe SMS application    **\n\r"\
    "**----------------------------**");
    switch(sms_device) {
        case SMS_DEVICE_GATEWAY_1:
        DBG_LOG_DEV("** - SMS_DEVICE_GATEWAY_1     **");
1000892c:	4b45      	ldr	r3, [pc, #276]	; (10008a44 <main+0x14c>)
1000892e:	1c18      	adds	r0, r3, #0
10008930:	4b45      	ldr	r3, [pc, #276]	; (10008a48 <main+0x150>)
10008932:	4798      	blx	r3
10008934:	4b48      	ldr	r3, [pc, #288]	; (10008a58 <main+0x160>)
10008936:	1c18      	adds	r0, r3, #0
10008938:	4b45      	ldr	r3, [pc, #276]	; (10008a50 <main+0x158>)
1000893a:	4798      	blx	r3
        break;
1000893c:	e011      	b.n	10008962 <main+0x6a>

        case SMS_DEVICE_NODE_1:
        DBG_LOG_DEV("** - SMS_DEVICE_NODE_1        **");
1000893e:	4b41      	ldr	r3, [pc, #260]	; (10008a44 <main+0x14c>)
10008940:	1c18      	adds	r0, r3, #0
10008942:	4b41      	ldr	r3, [pc, #260]	; (10008a48 <main+0x150>)
10008944:	4798      	blx	r3
10008946:	4b45      	ldr	r3, [pc, #276]	; (10008a5c <main+0x164>)
10008948:	1c18      	adds	r0, r3, #0
1000894a:	4b41      	ldr	r3, [pc, #260]	; (10008a50 <main+0x158>)
1000894c:	4798      	blx	r3
        break;
1000894e:	e008      	b.n	10008962 <main+0x6a>

        case SMS_DEVICE_NODE_2:
        DBG_LOG_DEV("** - SMS_DEVICE_NODE_2        **");
10008950:	4b3c      	ldr	r3, [pc, #240]	; (10008a44 <main+0x14c>)
10008952:	1c18      	adds	r0, r3, #0
10008954:	4b3c      	ldr	r3, [pc, #240]	; (10008a48 <main+0x150>)
10008956:	4798      	blx	r3
10008958:	4b41      	ldr	r3, [pc, #260]	; (10008a60 <main+0x168>)
1000895a:	1c18      	adds	r0, r3, #0
1000895c:	4b3c      	ldr	r3, [pc, #240]	; (10008a50 <main+0x158>)
1000895e:	4798      	blx	r3
        break;
10008960:	46c0      	nop			; (mov r8, r8)

        default:
        break;
    }
    DBG_LOG_DEV("********************************\n\r"\
10008962:	4b38      	ldr	r3, [pc, #224]	; (10008a44 <main+0x14c>)
10008964:	1c18      	adds	r0, r3, #0
10008966:	4b38      	ldr	r3, [pc, #224]	; (10008a48 <main+0x150>)
10008968:	4798      	blx	r3
1000896a:	4b3e      	ldr	r3, [pc, #248]	; (10008a64 <main+0x16c>)
1000896c:	1c18      	adds	r0, r3, #0
1000896e:	4b38      	ldr	r3, [pc, #224]	; (10008a50 <main+0x158>)
10008970:	4798      	blx	r3
    "********************************\n\r");
    /* Initialize hardware timer for BLE use */
    hw_timer_init();
10008972:	4b3d      	ldr	r3, [pc, #244]	; (10008a68 <main+0x170>)
10008974:	4798      	blx	r3
    hw_timer_stop();
10008976:	4b3d      	ldr	r3, [pc, #244]	; (10008a6c <main+0x174>)
10008978:	4798      	blx	r3
    /* Initialize SMS timer (not automatically starting). */
    sms_timer_configure();
1000897a:	4b3d      	ldr	r3, [pc, #244]	; (10008a70 <main+0x178>)
1000897c:	4798      	blx	r3
    /* Initialize GPIO */
    sms_button_configure_gpio();
1000897e:	4b3d      	ldr	r3, [pc, #244]	; (10008a74 <main+0x17c>)
10008980:	4798      	blx	r3
    /* Initialize the BLE chip and Set the Device Address */
    DBG_LOG("\n\r[main]\n\rinitializing BLE application");
10008982:	4b30      	ldr	r3, [pc, #192]	; (10008a44 <main+0x14c>)
10008984:	1c18      	adds	r0, r3, #0
10008986:	4b30      	ldr	r3, [pc, #192]	; (10008a48 <main+0x150>)
10008988:	4798      	blx	r3
1000898a:	4b3b      	ldr	r3, [pc, #236]	; (10008a78 <main+0x180>)
1000898c:	1c18      	adds	r0, r3, #0
1000898e:	4b30      	ldr	r3, [pc, #192]	; (10008a50 <main+0x158>)
10008990:	4798      	blx	r3
    ble_device_init(NULL);
10008992:	2000      	movs	r0, #0
10008994:	4b39      	ldr	r3, [pc, #228]	; (10008a7c <main+0x184>)
10008996:	4798      	blx	r3


    /* Register timer callback */
    hw_timer_register_callback(timer_callback_fn);
10008998:	4b39      	ldr	r3, [pc, #228]	; (10008a80 <main+0x188>)
1000899a:	1c18      	adds	r0, r3, #0
1000899c:	4b39      	ldr	r3, [pc, #228]	; (10008a84 <main+0x18c>)
1000899e:	4798      	blx	r3
    /* Register sms timer callback */
    sms_timer_configure_callback();
100089a0:	4b39      	ldr	r3, [pc, #228]	; (10008a88 <main+0x190>)
100089a2:	4798      	blx	r3
    /* Register gpio callbacks */
    sms_button_register_callbacks();
100089a4:	4b39      	ldr	r3, [pc, #228]	; (10008a8c <main+0x194>)
100089a6:	4798      	blx	r3
    /* Register sleep resume callback */
    register_resume_callback(resume_cb);
100089a8:	4b39      	ldr	r3, [pc, #228]	; (10008a90 <main+0x198>)
100089aa:	1c18      	adds	r0, r3, #0
100089ac:	4b39      	ldr	r3, [pc, #228]	; (10008a94 <main+0x19c>)
100089ae:	4798      	blx	r3

    /* Register primary BLE service */
    sms_button_char_init_value = 0;
100089b0:	4b39      	ldr	r3, [pc, #228]	; (10008a98 <main+0x1a0>)
100089b2:	2200      	movs	r2, #0
100089b4:	701a      	strb	r2, [r3, #0]
    sms_service_init(&sms_button_service_handler, &sms_button_char_init_value);
100089b6:	4a39      	ldr	r2, [pc, #228]	; (10008a9c <main+0x1a4>)
100089b8:	4b37      	ldr	r3, [pc, #220]	; (10008a98 <main+0x1a0>)
100089ba:	1c10      	adds	r0, r2, #0
100089bc:	1c19      	adds	r1, r3, #0
100089be:	4b38      	ldr	r3, [pc, #224]	; (10008aa0 <main+0x1a8>)
100089c0:	4798      	blx	r3

    /* Define primary service */
    if((status = sms_button_primary_service_define(&sms_button_service_handler)) != AT_BLE_SUCCESS) {
100089c2:	1dfc      	adds	r4, r7, #7
100089c4:	4b35      	ldr	r3, [pc, #212]	; (10008a9c <main+0x1a4>)
100089c6:	1c18      	adds	r0, r3, #0
100089c8:	4b36      	ldr	r3, [pc, #216]	; (10008aa4 <main+0x1ac>)
100089ca:	4798      	blx	r3
100089cc:	1c03      	adds	r3, r0, #0
100089ce:	7023      	strb	r3, [r4, #0]
100089d0:	1dfb      	adds	r3, r7, #7
100089d2:	781b      	ldrb	r3, [r3, #0]
100089d4:	2b00      	cmp	r3, #0
100089d6:	d00b      	beq.n	100089f0 <main+0xf8>
        DBG_LOG("\n\r[main]\n\rdefining SMS button service failed, reason 0x%x", status);
100089d8:	4b1a      	ldr	r3, [pc, #104]	; (10008a44 <main+0x14c>)
100089da:	1c18      	adds	r0, r3, #0
100089dc:	4b1a      	ldr	r3, [pc, #104]	; (10008a48 <main+0x150>)
100089de:	4798      	blx	r3
100089e0:	1dfb      	adds	r3, r7, #7
100089e2:	781b      	ldrb	r3, [r3, #0]
100089e4:	4a30      	ldr	r2, [pc, #192]	; (10008aa8 <main+0x1b0>)
100089e6:	1c10      	adds	r0, r2, #0
100089e8:	1c19      	adds	r1, r3, #0
100089ea:	4b19      	ldr	r3, [pc, #100]	; (10008a50 <main+0x158>)
100089ec:	4798      	blx	r3
100089ee:	e00b      	b.n	10008a08 <main+0x110>
        } else {
        DBG_LOG_DEV("\n\r[main]\n\rSMS primary service defined, sms button handle %d", sms_button_service_handler.serv_handle);
100089f0:	4b14      	ldr	r3, [pc, #80]	; (10008a44 <main+0x14c>)
100089f2:	1c18      	adds	r0, r3, #0
100089f4:	4b14      	ldr	r3, [pc, #80]	; (10008a48 <main+0x150>)
100089f6:	4798      	blx	r3
100089f8:	4b28      	ldr	r3, [pc, #160]	; (10008a9c <main+0x1a4>)
100089fa:	8a5b      	ldrh	r3, [r3, #18]
100089fc:	1c1a      	adds	r2, r3, #0
100089fe:	4b2b      	ldr	r3, [pc, #172]	; (10008aac <main+0x1b4>)
10008a00:	1c18      	adds	r0, r3, #0
10008a02:	1c11      	adds	r1, r2, #0
10008a04:	4b12      	ldr	r3, [pc, #72]	; (10008a50 <main+0x158>)
10008a06:	4798      	blx	r3
    }
    
    /* Register callbacks for GAP related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, startup_template_app_gap_cb);
10008a08:	4b29      	ldr	r3, [pc, #164]	; (10008ab0 <main+0x1b8>)
10008a0a:	2000      	movs	r0, #0
10008a0c:	2100      	movs	r1, #0
10008a0e:	1c1a      	adds	r2, r3, #0
10008a10:	4b28      	ldr	r3, [pc, #160]	; (10008ab4 <main+0x1bc>)
10008a12:	4798      	blx	r3
    /* Register callbacks for GATT SERVER related events */
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, startup_template_app_gatt_server_cb);
10008a14:	4b28      	ldr	r3, [pc, #160]	; (10008ab8 <main+0x1c0>)
10008a16:	2000      	movs	r0, #0
10008a18:	2102      	movs	r1, #2
10008a1a:	1c1a      	adds	r2, r3, #0
10008a1c:	4b25      	ldr	r3, [pc, #148]	; (10008ab4 <main+0x1bc>)
10008a1e:	4798      	blx	r3
    
    register_ble_user_event_cb(sms_platform_cb);
10008a20:	4b26      	ldr	r3, [pc, #152]	; (10008abc <main+0x1c4>)
10008a22:	1c18      	adds	r0, r3, #0
10008a24:	4b26      	ldr	r3, [pc, #152]	; (10008ac0 <main+0x1c8>)
10008a26:	4798      	blx	r3

    /* Setup & start the advertisement */
    sms_service_advertise();
10008a28:	4b26      	ldr	r3, [pc, #152]	; (10008ac4 <main+0x1cc>)
10008a2a:	4798      	blx	r3

    while(true)
    {
        /* BLE Event task */
        ble_event_task(BLE_EVENT_TIMEOUT);
10008a2c:	2301      	movs	r3, #1
10008a2e:	425b      	negs	r3, r3
10008a30:	1c18      	adds	r0, r3, #0
10008a32:	4b25      	ldr	r3, [pc, #148]	; (10008ac8 <main+0x1d0>)
10008a34:	4798      	blx	r3
    }
10008a36:	e7f9      	b.n	10008a2c <main+0x134>
10008a38:	1000e1bd 	.word	0x1000e1bd
10008a3c:	1000ec09 	.word	0x1000ec09
10008a40:	1000dc71 	.word	0x1000dc71
10008a44:	100149ec 	.word	0x100149ec
10008a48:	1001351d 	.word	0x1001351d
10008a4c:	10014b98 	.word	0x10014b98
10008a50:	100133fd 	.word	0x100133fd
10008a54:	10016150 	.word	0x10016150
10008a58:	10014c24 	.word	0x10014c24
10008a5c:	10014c48 	.word	0x10014c48
10008a60:	10014c6c 	.word	0x10014c6c
10008a64:	10014c90 	.word	0x10014c90
10008a68:	1000de81 	.word	0x1000de81
10008a6c:	1000defd 	.word	0x1000defd
10008a70:	10008699 	.word	0x10008699
10008a74:	10008331 	.word	0x10008331
10008a78:	10014cd8 	.word	0x10014cd8
10008a7c:	1000b2a5 	.word	0x1000b2a5
10008a80:	10008891 	.word	0x10008891
10008a84:	1000deb9 	.word	0x1000deb9
10008a88:	100086c9 	.word	0x100086c9
10008a8c:	100083c1 	.word	0x100083c1
10008a90:	100088b9 	.word	0x100088b9
10008a94:	1000ecd9 	.word	0x1000ecd9
10008a98:	1001695e 	.word	0x1001695e
10008a9c:	1001690c 	.word	0x1001690c
10008aa0:	100080d5 	.word	0x100080d5
10008aa4:	10008201 	.word	0x10008201
10008aa8:	10014d00 	.word	0x10014d00
10008aac:	10014d3c 	.word	0x10014d3c
10008ab0:	10014d78 	.word	0x10014d78
10008ab4:	1000b779 	.word	0x1000b779
10008ab8:	10014dc4 	.word	0x10014dc4
10008abc:	10008811 	.word	0x10008811
10008ac0:	1000db45 	.word	0x1000db45
10008ac4:	1000827d 	.word	0x1000827d
10008ac8:	1000b249 	.word	0x1000b249

10008acc <dualtimer_get_config_defaults>:
 * modified by the user application.
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
10008acc:	b580      	push	{r7, lr}
10008ace:	b082      	sub	sp, #8
10008ad0:	af00      	add	r7, sp, #0
10008ad2:	6078      	str	r0, [r7, #4]
	config->timer1.timer_enable = true;
10008ad4:	687b      	ldr	r3, [r7, #4]
10008ad6:	2201      	movs	r2, #1
10008ad8:	701a      	strb	r2, [r3, #0]
	config->timer2.timer_enable = true;
10008ada:	687b      	ldr	r3, [r7, #4]
10008adc:	2201      	movs	r2, #1
10008ade:	731a      	strb	r2, [r3, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008ae0:	687b      	ldr	r3, [r7, #4]
10008ae2:	2202      	movs	r2, #2
10008ae4:	705a      	strb	r2, [r3, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008ae6:	687b      	ldr	r3, [r7, #4]
10008ae8:	2202      	movs	r2, #2
10008aea:	735a      	strb	r2, [r3, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008aec:	687b      	ldr	r3, [r7, #4]
10008aee:	2201      	movs	r2, #1
10008af0:	709a      	strb	r2, [r3, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008af2:	687b      	ldr	r3, [r7, #4]
10008af4:	2201      	movs	r2, #1
10008af6:	739a      	strb	r2, [r3, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008af8:	687b      	ldr	r3, [r7, #4]
10008afa:	2200      	movs	r2, #0
10008afc:	70da      	strb	r2, [r3, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008afe:	687b      	ldr	r3, [r7, #4]
10008b00:	2200      	movs	r2, #0
10008b02:	73da      	strb	r2, [r3, #15]

	config->timer1.interrup_enable = true;
10008b04:	687b      	ldr	r3, [r7, #4]
10008b06:	2201      	movs	r2, #1
10008b08:	711a      	strb	r2, [r3, #4]
	config->timer2.interrup_enable = true;
10008b0a:	687b      	ldr	r3, [r7, #4]
10008b0c:	2201      	movs	r2, #1
10008b0e:	741a      	strb	r2, [r3, #16]

	config->timer1.load_value = 0;
10008b10:	687b      	ldr	r3, [r7, #4]
10008b12:	2200      	movs	r2, #0
10008b14:	609a      	str	r2, [r3, #8]
	config->timer2.load_value = 0;
10008b16:	687b      	ldr	r3, [r7, #4]
10008b18:	2200      	movs	r2, #0
10008b1a:	615a      	str	r2, [r3, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10008b1c:	687b      	ldr	r3, [r7, #4]
10008b1e:	2200      	movs	r2, #0
10008b20:	761a      	strb	r2, [r3, #24]
}
10008b22:	46bd      	mov	sp, r7
10008b24:	b002      	add	sp, #8
10008b26:	bd80      	pop	{r7, pc}

10008b28 <dualtimer_get_interrupt_status>:
 * \param[in]     timer        Timer1/Timer2
 *
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
10008b28:	b580      	push	{r7, lr}
10008b2a:	b082      	sub	sp, #8
10008b2c:	af00      	add	r7, sp, #0
10008b2e:	1c02      	adds	r2, r0, #0
10008b30:	1dfb      	adds	r3, r7, #7
10008b32:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
10008b34:	1dfb      	adds	r3, r7, #7
10008b36:	781b      	ldrb	r3, [r3, #0]
10008b38:	2b00      	cmp	r3, #0
10008b3a:	d103      	bne.n	10008b44 <dualtimer_get_interrupt_status+0x1c>
		return DUALTIMER0->TIMER1MIS.reg;
10008b3c:	4b05      	ldr	r3, [pc, #20]	; (10008b54 <dualtimer_get_interrupt_status+0x2c>)
10008b3e:	7d1b      	ldrb	r3, [r3, #20]
10008b40:	b2db      	uxtb	r3, r3
10008b42:	e003      	b.n	10008b4c <dualtimer_get_interrupt_status+0x24>
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008b44:	4a03      	ldr	r2, [pc, #12]	; (10008b54 <dualtimer_get_interrupt_status+0x2c>)
10008b46:	2334      	movs	r3, #52	; 0x34
10008b48:	5cd3      	ldrb	r3, [r2, r3]
10008b4a:	b2db      	uxtb	r3, r3
	}
}
10008b4c:	1c18      	adds	r0, r3, #0
10008b4e:	46bd      	mov	sp, r7
10008b50:	b002      	add	sp, #8
10008b52:	bd80      	pop	{r7, pc}
10008b54:	40001000 	.word	0x40001000

10008b58 <dualtimer_clear_interrupt_status>:
 * Clear the Dualtimer module timer1/timer2 interrupt status
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
10008b58:	b580      	push	{r7, lr}
10008b5a:	b082      	sub	sp, #8
10008b5c:	af00      	add	r7, sp, #0
10008b5e:	1c02      	adds	r2, r0, #0
10008b60:	1dfb      	adds	r3, r7, #7
10008b62:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
10008b64:	1dfb      	adds	r3, r7, #7
10008b66:	781b      	ldrb	r3, [r3, #0]
10008b68:	2b00      	cmp	r3, #0
10008b6a:	d103      	bne.n	10008b74 <dualtimer_clear_interrupt_status+0x1c>
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008b6c:	4b05      	ldr	r3, [pc, #20]	; (10008b84 <dualtimer_clear_interrupt_status+0x2c>)
10008b6e:	2201      	movs	r2, #1
10008b70:	731a      	strb	r2, [r3, #12]
10008b72:	e003      	b.n	10008b7c <dualtimer_clear_interrupt_status+0x24>
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008b74:	4a03      	ldr	r2, [pc, #12]	; (10008b84 <dualtimer_clear_interrupt_status+0x2c>)
10008b76:	232c      	movs	r3, #44	; 0x2c
10008b78:	2101      	movs	r1, #1
10008b7a:	54d1      	strb	r1, [r2, r3]
	}
}
10008b7c:	46bd      	mov	sp, r7
10008b7e:	b002      	add	sp, #8
10008b80:	bd80      	pop	{r7, pc}
10008b82:	46c0      	nop			; (mov r8, r8)
10008b84:	40001000 	.word	0x40001000

10008b88 <dualtimer_enable>:
 * Enable the Dualtimer module timer1/timer2
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
10008b88:	b580      	push	{r7, lr}
10008b8a:	b082      	sub	sp, #8
10008b8c:	af00      	add	r7, sp, #0
10008b8e:	1c02      	adds	r2, r0, #0
10008b90:	1dfb      	adds	r3, r7, #7
10008b92:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
10008b94:	1dfb      	adds	r3, r7, #7
10008b96:	781b      	ldrb	r3, [r3, #0]
10008b98:	2b00      	cmp	r3, #0
10008b9a:	d109      	bne.n	10008bb0 <dualtimer_enable+0x28>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008b9c:	490b      	ldr	r1, [pc, #44]	; (10008bcc <dualtimer_enable+0x44>)
10008b9e:	4b0b      	ldr	r3, [pc, #44]	; (10008bcc <dualtimer_enable+0x44>)
10008ba0:	7a1b      	ldrb	r3, [r3, #8]
10008ba2:	b2db      	uxtb	r3, r3
10008ba4:	2280      	movs	r2, #128	; 0x80
10008ba6:	4252      	negs	r2, r2
10008ba8:	4313      	orrs	r3, r2
10008baa:	b2db      	uxtb	r3, r3
10008bac:	720b      	strb	r3, [r1, #8]
10008bae:	e00a      	b.n	10008bc6 <dualtimer_enable+0x3e>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008bb0:	4906      	ldr	r1, [pc, #24]	; (10008bcc <dualtimer_enable+0x44>)
10008bb2:	4a06      	ldr	r2, [pc, #24]	; (10008bcc <dualtimer_enable+0x44>)
10008bb4:	2328      	movs	r3, #40	; 0x28
10008bb6:	5cd3      	ldrb	r3, [r2, r3]
10008bb8:	b2db      	uxtb	r3, r3
10008bba:	2280      	movs	r2, #128	; 0x80
10008bbc:	4252      	negs	r2, r2
10008bbe:	4313      	orrs	r3, r2
10008bc0:	b2da      	uxtb	r2, r3
10008bc2:	2328      	movs	r3, #40	; 0x28
10008bc4:	54ca      	strb	r2, [r1, r3]
	}
}
10008bc6:	46bd      	mov	sp, r7
10008bc8:	b002      	add	sp, #8
10008bca:	bd80      	pop	{r7, pc}
10008bcc:	40001000 	.word	0x40001000

10008bd0 <dualtimer_disable>:
 * Disable the Dualtimer module timer1/timer2
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
10008bd0:	b580      	push	{r7, lr}
10008bd2:	b082      	sub	sp, #8
10008bd4:	af00      	add	r7, sp, #0
10008bd6:	1c02      	adds	r2, r0, #0
10008bd8:	1dfb      	adds	r3, r7, #7
10008bda:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
10008bdc:	1dfb      	adds	r3, r7, #7
10008bde:	781b      	ldrb	r3, [r3, #0]
10008be0:	2b00      	cmp	r3, #0
10008be2:	d108      	bne.n	10008bf6 <dualtimer_disable+0x26>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008be4:	4a0a      	ldr	r2, [pc, #40]	; (10008c10 <dualtimer_disable+0x40>)
10008be6:	4b0a      	ldr	r3, [pc, #40]	; (10008c10 <dualtimer_disable+0x40>)
10008be8:	7a1b      	ldrb	r3, [r3, #8]
10008bea:	b2db      	uxtb	r3, r3
10008bec:	217f      	movs	r1, #127	; 0x7f
10008bee:	400b      	ands	r3, r1
10008bf0:	b2db      	uxtb	r3, r3
10008bf2:	7213      	strb	r3, [r2, #8]
10008bf4:	e009      	b.n	10008c0a <dualtimer_disable+0x3a>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008bf6:	4a06      	ldr	r2, [pc, #24]	; (10008c10 <dualtimer_disable+0x40>)
10008bf8:	4905      	ldr	r1, [pc, #20]	; (10008c10 <dualtimer_disable+0x40>)
10008bfa:	2328      	movs	r3, #40	; 0x28
10008bfc:	5ccb      	ldrb	r3, [r1, r3]
10008bfe:	b2db      	uxtb	r3, r3
10008c00:	217f      	movs	r1, #127	; 0x7f
10008c02:	400b      	ands	r3, r1
10008c04:	b2d9      	uxtb	r1, r3
10008c06:	2328      	movs	r3, #40	; 0x28
10008c08:	54d1      	strb	r1, [r2, r3]
	}
}
10008c0a:	46bd      	mov	sp, r7
10008c0c:	b002      	add	sp, #8
10008c0e:	bd80      	pop	{r7, pc}
10008c10:	40001000 	.word	0x40001000

10008c14 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008c14:	b580      	push	{r7, lr}
10008c16:	af00      	add	r7, sp, #0
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008c18:	2000      	movs	r0, #0
10008c1a:	4b0f      	ldr	r3, [pc, #60]	; (10008c58 <dualtimer_isr_handler+0x44>)
10008c1c:	4798      	blx	r3
10008c1e:	1e03      	subs	r3, r0, #0
10008c20:	d009      	beq.n	10008c36 <dualtimer_isr_handler+0x22>
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
10008c22:	2000      	movs	r0, #0
10008c24:	4b0d      	ldr	r3, [pc, #52]	; (10008c5c <dualtimer_isr_handler+0x48>)
10008c26:	4798      	blx	r3
		if (dualtimer_callback_timer1)
10008c28:	4b0d      	ldr	r3, [pc, #52]	; (10008c60 <dualtimer_isr_handler+0x4c>)
10008c2a:	681b      	ldr	r3, [r3, #0]
10008c2c:	2b00      	cmp	r3, #0
10008c2e:	d002      	beq.n	10008c36 <dualtimer_isr_handler+0x22>
			dualtimer_callback_timer1();
10008c30:	4b0b      	ldr	r3, [pc, #44]	; (10008c60 <dualtimer_isr_handler+0x4c>)
10008c32:	681b      	ldr	r3, [r3, #0]
10008c34:	4798      	blx	r3
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008c36:	2001      	movs	r0, #1
10008c38:	4b07      	ldr	r3, [pc, #28]	; (10008c58 <dualtimer_isr_handler+0x44>)
10008c3a:	4798      	blx	r3
10008c3c:	1e03      	subs	r3, r0, #0
10008c3e:	d009      	beq.n	10008c54 <dualtimer_isr_handler+0x40>
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
10008c40:	2001      	movs	r0, #1
10008c42:	4b06      	ldr	r3, [pc, #24]	; (10008c5c <dualtimer_isr_handler+0x48>)
10008c44:	4798      	blx	r3
		if (dualtimer_callback_timer2)
10008c46:	4b07      	ldr	r3, [pc, #28]	; (10008c64 <dualtimer_isr_handler+0x50>)
10008c48:	681b      	ldr	r3, [r3, #0]
10008c4a:	2b00      	cmp	r3, #0
10008c4c:	d002      	beq.n	10008c54 <dualtimer_isr_handler+0x40>
			dualtimer_callback_timer2();
10008c4e:	4b05      	ldr	r3, [pc, #20]	; (10008c64 <dualtimer_isr_handler+0x50>)
10008c50:	681b      	ldr	r3, [r3, #0]
10008c52:	4798      	blx	r3
	}
}
10008c54:	46bd      	mov	sp, r7
10008c56:	bd80      	pop	{r7, pc}
10008c58:	10008b29 	.word	0x10008b29
10008c5c:	10008b59 	.word	0x10008b59
10008c60:	100161e4 	.word	0x100161e4
10008c64:	100161e8 	.word	0x100161e8

10008c68 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008c68:	b580      	push	{r7, lr}
10008c6a:	b084      	sub	sp, #16
10008c6c:	af00      	add	r7, sp, #0
10008c6e:	6078      	str	r0, [r7, #4]
	uint8_t regval = 0;
10008c70:	230f      	movs	r3, #15
10008c72:	18fb      	adds	r3, r7, r3
10008c74:	2200      	movs	r2, #0
10008c76:	701a      	strb	r2, [r3, #0]

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008c78:	2004      	movs	r0, #4
10008c7a:	4b6d      	ldr	r3, [pc, #436]	; (10008e30 <dualtimer_init+0x1c8>)
10008c7c:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008c7e:	687b      	ldr	r3, [r7, #4]
10008c80:	781b      	ldrb	r3, [r3, #0]
10008c82:	2b00      	cmp	r3, #0
10008c84:	d103      	bne.n	10008c8e <dualtimer_init+0x26>
10008c86:	687b      	ldr	r3, [r7, #4]
10008c88:	7b1b      	ldrb	r3, [r3, #12]
10008c8a:	2b00      	cmp	r3, #0
10008c8c:	d014      	beq.n	10008cb8 <dualtimer_init+0x50>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008c8e:	4b69      	ldr	r3, [pc, #420]	; (10008e34 <dualtimer_init+0x1cc>)
10008c90:	4a68      	ldr	r2, [pc, #416]	; (10008e34 <dualtimer_init+0x1cc>)
10008c92:	68d2      	ldr	r2, [r2, #12]
10008c94:	2120      	movs	r1, #32
10008c96:	430a      	orrs	r2, r1
10008c98:	60da      	str	r2, [r3, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008c9a:	4b66      	ldr	r3, [pc, #408]	; (10008e34 <dualtimer_init+0x1cc>)
10008c9c:	687a      	ldr	r2, [r7, #4]
10008c9e:	7e12      	ldrb	r2, [r2, #24]
10008ca0:	1c11      	adds	r1, r2, #0
10008ca2:	2203      	movs	r2, #3
10008ca4:	400a      	ands	r2, r1
10008ca6:	b2d2      	uxtb	r2, r2
10008ca8:	2103      	movs	r1, #3
10008caa:	400a      	ands	r2, r1
10008cac:	0112      	lsls	r2, r2, #4
10008cae:	6999      	ldr	r1, [r3, #24]
10008cb0:	2030      	movs	r0, #48	; 0x30
10008cb2:	4381      	bics	r1, r0
10008cb4:	430a      	orrs	r2, r1
10008cb6:	619a      	str	r2, [r3, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008cb8:	687b      	ldr	r3, [r7, #4]
10008cba:	781b      	ldrb	r3, [r3, #0]
10008cbc:	2b00      	cmp	r3, #0
10008cbe:	d054      	beq.n	10008d6a <dualtimer_init+0x102>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008cc0:	687b      	ldr	r3, [r7, #4]
10008cc2:	785b      	ldrb	r3, [r3, #1]
10008cc4:	2b00      	cmp	r3, #0
10008cc6:	d104      	bne.n	10008cd2 <dualtimer_init+0x6a>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008cc8:	230f      	movs	r3, #15
10008cca:	18fb      	adds	r3, r7, r3
10008ccc:	2201      	movs	r2, #1
10008cce:	701a      	strb	r2, [r3, #0]
10008cd0:	e010      	b.n	10008cf4 <dualtimer_init+0x8c>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008cd2:	687b      	ldr	r3, [r7, #4]
10008cd4:	785b      	ldrb	r3, [r3, #1]
10008cd6:	2b01      	cmp	r3, #1
10008cd8:	d104      	bne.n	10008ce4 <dualtimer_init+0x7c>
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
10008cda:	230f      	movs	r3, #15
10008cdc:	18fb      	adds	r3, r7, r3
10008cde:	2200      	movs	r2, #0
10008ce0:	701a      	strb	r2, [r3, #0]
10008ce2:	e007      	b.n	10008cf4 <dualtimer_init+0x8c>
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008ce4:	687b      	ldr	r3, [r7, #4]
10008ce6:	785b      	ldrb	r3, [r3, #1]
10008ce8:	2b02      	cmp	r3, #2
10008cea:	d103      	bne.n	10008cf4 <dualtimer_init+0x8c>
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008cec:	230f      	movs	r3, #15
10008cee:	18fb      	adds	r3, r7, r3
10008cf0:	2240      	movs	r2, #64	; 0x40
10008cf2:	701a      	strb	r2, [r3, #0]
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008cf4:	687b      	ldr	r3, [r7, #4]
10008cf6:	789b      	ldrb	r3, [r3, #2]
10008cf8:	18db      	adds	r3, r3, r3
10008cfa:	b2db      	uxtb	r3, r3
10008cfc:	2202      	movs	r2, #2
10008cfe:	4013      	ands	r3, r2
10008d00:	b2da      	uxtb	r2, r3
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
10008d02:	687b      	ldr	r3, [r7, #4]
10008d04:	78db      	ldrb	r3, [r3, #3]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008d06:	009b      	lsls	r3, r3, #2
10008d08:	b2db      	uxtb	r3, r3
10008d0a:	210c      	movs	r1, #12
10008d0c:	400b      	ands	r3, r1
10008d0e:	b2db      	uxtb	r3, r3
10008d10:	4313      	orrs	r3, r2
10008d12:	b2d9      	uxtb	r1, r3
10008d14:	230f      	movs	r3, #15
10008d16:	18fb      	adds	r3, r7, r3
10008d18:	220f      	movs	r2, #15
10008d1a:	18ba      	adds	r2, r7, r2
10008d1c:	7812      	ldrb	r2, [r2, #0]
10008d1e:	430a      	orrs	r2, r1
10008d20:	701a      	strb	r2, [r3, #0]
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008d22:	687b      	ldr	r3, [r7, #4]
10008d24:	791b      	ldrb	r3, [r3, #4]
10008d26:	2b00      	cmp	r3, #0
10008d28:	d007      	beq.n	10008d3a <dualtimer_init+0xd2>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008d2a:	230f      	movs	r3, #15
10008d2c:	18fb      	adds	r3, r7, r3
10008d2e:	220f      	movs	r2, #15
10008d30:	18ba      	adds	r2, r7, r2
10008d32:	7812      	ldrb	r2, [r2, #0]
10008d34:	2120      	movs	r1, #32
10008d36:	430a      	orrs	r2, r1
10008d38:	701a      	strb	r2, [r3, #0]
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008d3a:	4a3f      	ldr	r2, [pc, #252]	; (10008e38 <dualtimer_init+0x1d0>)
10008d3c:	687b      	ldr	r3, [r7, #4]
10008d3e:	689b      	ldr	r3, [r3, #8]
10008d40:	6013      	str	r3, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008d42:	4a3d      	ldr	r2, [pc, #244]	; (10008e38 <dualtimer_init+0x1d0>)
10008d44:	230f      	movs	r3, #15
10008d46:	18fb      	adds	r3, r7, r3
10008d48:	781b      	ldrb	r3, [r3, #0]
10008d4a:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008d4c:	4a39      	ldr	r2, [pc, #228]	; (10008e34 <dualtimer_init+0x1cc>)
10008d4e:	4939      	ldr	r1, [pc, #228]	; (10008e34 <dualtimer_init+0x1cc>)
10008d50:	23c4      	movs	r3, #196	; 0xc4
10008d52:	005b      	lsls	r3, r3, #1
10008d54:	5ccb      	ldrb	r3, [r1, r3]
10008d56:	b2db      	uxtb	r3, r3
10008d58:	2101      	movs	r1, #1
10008d5a:	430b      	orrs	r3, r1
10008d5c:	b2d9      	uxtb	r1, r3
10008d5e:	23c4      	movs	r3, #196	; 0xc4
10008d60:	005b      	lsls	r3, r3, #1
10008d62:	54d1      	strb	r1, [r2, r3]
		dualtimer_enable(DUALTIMER_TIMER1);
10008d64:	2000      	movs	r0, #0
10008d66:	4b35      	ldr	r3, [pc, #212]	; (10008e3c <dualtimer_init+0x1d4>)
10008d68:	4798      	blx	r3
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008d6a:	687b      	ldr	r3, [r7, #4]
10008d6c:	7b1b      	ldrb	r3, [r3, #12]
10008d6e:	2b00      	cmp	r3, #0
10008d70:	d055      	beq.n	10008e1e <dualtimer_init+0x1b6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008d72:	687b      	ldr	r3, [r7, #4]
10008d74:	7b5b      	ldrb	r3, [r3, #13]
10008d76:	2b00      	cmp	r3, #0
10008d78:	d104      	bne.n	10008d84 <dualtimer_init+0x11c>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008d7a:	230f      	movs	r3, #15
10008d7c:	18fb      	adds	r3, r7, r3
10008d7e:	2201      	movs	r2, #1
10008d80:	701a      	strb	r2, [r3, #0]
10008d82:	e010      	b.n	10008da6 <dualtimer_init+0x13e>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008d84:	687b      	ldr	r3, [r7, #4]
10008d86:	7b5b      	ldrb	r3, [r3, #13]
10008d88:	2b01      	cmp	r3, #1
10008d8a:	d104      	bne.n	10008d96 <dualtimer_init+0x12e>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008d8c:	230f      	movs	r3, #15
10008d8e:	18fb      	adds	r3, r7, r3
10008d90:	2200      	movs	r2, #0
10008d92:	701a      	strb	r2, [r3, #0]
10008d94:	e007      	b.n	10008da6 <dualtimer_init+0x13e>
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008d96:	687b      	ldr	r3, [r7, #4]
10008d98:	7b5b      	ldrb	r3, [r3, #13]
10008d9a:	2b02      	cmp	r3, #2
10008d9c:	d103      	bne.n	10008da6 <dualtimer_init+0x13e>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008d9e:	230f      	movs	r3, #15
10008da0:	18fb      	adds	r3, r7, r3
10008da2:	2240      	movs	r2, #64	; 0x40
10008da4:	701a      	strb	r2, [r3, #0]
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008da6:	687b      	ldr	r3, [r7, #4]
10008da8:	7b9b      	ldrb	r3, [r3, #14]
10008daa:	18db      	adds	r3, r3, r3
10008dac:	b2db      	uxtb	r3, r3
10008dae:	2202      	movs	r2, #2
10008db0:	4013      	ands	r3, r2
10008db2:	b2da      	uxtb	r2, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
10008db4:	687b      	ldr	r3, [r7, #4]
10008db6:	7bdb      	ldrb	r3, [r3, #15]
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008db8:	009b      	lsls	r3, r3, #2
10008dba:	b2db      	uxtb	r3, r3
10008dbc:	210c      	movs	r1, #12
10008dbe:	400b      	ands	r3, r1
10008dc0:	b2db      	uxtb	r3, r3
10008dc2:	4313      	orrs	r3, r2
10008dc4:	b2d9      	uxtb	r1, r3
10008dc6:	230f      	movs	r3, #15
10008dc8:	18fb      	adds	r3, r7, r3
10008dca:	220f      	movs	r2, #15
10008dcc:	18ba      	adds	r2, r7, r2
10008dce:	7812      	ldrb	r2, [r2, #0]
10008dd0:	430a      	orrs	r2, r1
10008dd2:	701a      	strb	r2, [r3, #0]
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008dd4:	687b      	ldr	r3, [r7, #4]
10008dd6:	7c1b      	ldrb	r3, [r3, #16]
10008dd8:	2b00      	cmp	r3, #0
10008dda:	d007      	beq.n	10008dec <dualtimer_init+0x184>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008ddc:	230f      	movs	r3, #15
10008dde:	18fb      	adds	r3, r7, r3
10008de0:	220f      	movs	r2, #15
10008de2:	18ba      	adds	r2, r7, r2
10008de4:	7812      	ldrb	r2, [r2, #0]
10008de6:	2120      	movs	r1, #32
10008de8:	430a      	orrs	r2, r1
10008dea:	701a      	strb	r2, [r3, #0]
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008dec:	4a12      	ldr	r2, [pc, #72]	; (10008e38 <dualtimer_init+0x1d0>)
10008dee:	687b      	ldr	r3, [r7, #4]
10008df0:	695b      	ldr	r3, [r3, #20]
10008df2:	6213      	str	r3, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008df4:	4910      	ldr	r1, [pc, #64]	; (10008e38 <dualtimer_init+0x1d0>)
10008df6:	230f      	movs	r3, #15
10008df8:	18fb      	adds	r3, r7, r3
10008dfa:	2228      	movs	r2, #40	; 0x28
10008dfc:	781b      	ldrb	r3, [r3, #0]
10008dfe:	548b      	strb	r3, [r1, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
10008e00:	4a0c      	ldr	r2, [pc, #48]	; (10008e34 <dualtimer_init+0x1cc>)
10008e02:	490c      	ldr	r1, [pc, #48]	; (10008e34 <dualtimer_init+0x1cc>)
10008e04:	23c4      	movs	r3, #196	; 0xc4
10008e06:	005b      	lsls	r3, r3, #1
10008e08:	5ccb      	ldrb	r3, [r1, r3]
10008e0a:	b2db      	uxtb	r3, r3
10008e0c:	2102      	movs	r1, #2
10008e0e:	430b      	orrs	r3, r1
10008e10:	b2d9      	uxtb	r1, r3
10008e12:	23c4      	movs	r3, #196	; 0xc4
10008e14:	005b      	lsls	r3, r3, #1
10008e16:	54d1      	strb	r1, [r2, r3]
		dualtimer_enable(DUALTIMER_TIMER2);
10008e18:	2001      	movs	r0, #1
10008e1a:	4b08      	ldr	r3, [pc, #32]	; (10008e3c <dualtimer_init+0x1d4>)
10008e1c:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008e1e:	4b08      	ldr	r3, [pc, #32]	; (10008e40 <dualtimer_init+0x1d8>)
10008e20:	201e      	movs	r0, #30
10008e22:	1c19      	adds	r1, r3, #0
10008e24:	4b07      	ldr	r3, [pc, #28]	; (10008e44 <dualtimer_init+0x1dc>)
10008e26:	4798      	blx	r3
}
10008e28:	46bd      	mov	sp, r7
10008e2a:	b004      	add	sp, #16
10008e2c:	bd80      	pop	{r7, pc}
10008e2e:	46c0      	nop			; (mov r8, r8)
10008e30:	10009f6d 	.word	0x10009f6d
10008e34:	4000b000 	.word	0x4000b000
10008e38:	40001000 	.word	0x40001000
10008e3c:	10008b89 	.word	0x10008b89
10008e40:	10008c15 	.word	0x10008c15
10008e44:	1000a50d 	.word	0x1000a50d

10008e48 <dualtimer_register_callback>:
 * Registers and enable a callback function which is implemented by the user.
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
10008e48:	b580      	push	{r7, lr}
10008e4a:	b082      	sub	sp, #8
10008e4c:	af00      	add	r7, sp, #0
10008e4e:	1c02      	adds	r2, r0, #0
10008e50:	6039      	str	r1, [r7, #0]
10008e52:	1dfb      	adds	r3, r7, #7
10008e54:	701a      	strb	r2, [r3, #0]
	if (timer == DUALTIMER_TIMER1) {
10008e56:	1dfb      	adds	r3, r7, #7
10008e58:	781b      	ldrb	r3, [r3, #0]
10008e5a:	2b00      	cmp	r3, #0
10008e5c:	d103      	bne.n	10008e66 <dualtimer_register_callback+0x1e>
		dualtimer_callback_timer1 = fun;
10008e5e:	4b05      	ldr	r3, [pc, #20]	; (10008e74 <dualtimer_register_callback+0x2c>)
10008e60:	683a      	ldr	r2, [r7, #0]
10008e62:	601a      	str	r2, [r3, #0]
10008e64:	e002      	b.n	10008e6c <dualtimer_register_callback+0x24>
	} else {
		dualtimer_callback_timer2 = fun;
10008e66:	4b04      	ldr	r3, [pc, #16]	; (10008e78 <dualtimer_register_callback+0x30>)
10008e68:	683a      	ldr	r2, [r7, #0]
10008e6a:	601a      	str	r2, [r3, #0]
	}
}
10008e6c:	46bd      	mov	sp, r7
10008e6e:	b002      	add	sp, #8
10008e70:	bd80      	pop	{r7, pc}
10008e72:	46c0      	nop			; (mov r8, r8)
10008e74:	100161e4 	.word	0x100161e4
10008e78:	100161e8 	.word	0x100161e8

10008e7c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10008e7c:	b580      	push	{r7, lr}
10008e7e:	b082      	sub	sp, #8
10008e80:	af00      	add	r7, sp, #0
10008e82:	1c02      	adds	r2, r0, #0
10008e84:	1dfb      	adds	r3, r7, #7
10008e86:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008e88:	4a07      	ldr	r2, [pc, #28]	; (10008ea8 <NVIC_ClearPendingIRQ+0x2c>)
10008e8a:	1dfb      	adds	r3, r7, #7
10008e8c:	781b      	ldrb	r3, [r3, #0]
10008e8e:	1c19      	adds	r1, r3, #0
10008e90:	231f      	movs	r3, #31
10008e92:	400b      	ands	r3, r1
10008e94:	2101      	movs	r1, #1
10008e96:	4099      	lsls	r1, r3
10008e98:	1c0b      	adds	r3, r1, #0
10008e9a:	1c19      	adds	r1, r3, #0
10008e9c:	23c0      	movs	r3, #192	; 0xc0
10008e9e:	005b      	lsls	r3, r3, #1
10008ea0:	50d1      	str	r1, [r2, r3]
}
10008ea2:	46bd      	mov	sp, r7
10008ea4:	b002      	add	sp, #8
10008ea6:	bd80      	pop	{r7, pc}
10008ea8:	e000e100 	.word	0xe000e100

10008eac <gpio_get_config_defaults>:
 *   \li Input mode with internal pullup enabled
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
10008eac:	b580      	push	{r7, lr}
10008eae:	b082      	sub	sp, #8
10008eb0:	af00      	add	r7, sp, #0
10008eb2:	6078      	str	r0, [r7, #4]
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008eb4:	687b      	ldr	r3, [r7, #4]
10008eb6:	2200      	movs	r2, #0
10008eb8:	701a      	strb	r2, [r3, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008eba:	687b      	ldr	r3, [r7, #4]
10008ebc:	2201      	movs	r2, #1
10008ebe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
10008ec0:	687b      	ldr	r3, [r7, #4]
10008ec2:	2200      	movs	r2, #0
10008ec4:	709a      	strb	r2, [r3, #2]
	config->aon_wakeup = false;
10008ec6:	687b      	ldr	r3, [r7, #4]
10008ec8:	2200      	movs	r2, #0
10008eca:	70da      	strb	r2, [r3, #3]
}
10008ecc:	46bd      	mov	sp, r7
10008ece:	b002      	add	sp, #8
10008ed0:	bd80      	pop	{r7, pc}
10008ed2:	46c0      	nop			; (mov r8, r8)

10008ed4 <gpio_pin_set_config>:
 *  \retval STATUS_ERR_INVALID_ARG          Invalid pull-up/pull-down configuration.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008ed4:	b580      	push	{r7, lr}
10008ed6:	b084      	sub	sp, #16
10008ed8:	af00      	add	r7, sp, #0
10008eda:	1c02      	adds	r2, r0, #0
10008edc:	6039      	str	r1, [r7, #0]
10008ede:	1dfb      	adds	r3, r7, #7
10008ee0:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
10008ee2:	230f      	movs	r3, #15
10008ee4:	18fb      	adds	r3, r7, r3
10008ee6:	2200      	movs	r2, #0
10008ee8:	701a      	strb	r2, [r3, #0]

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD
	* GPIO_14 is used by firmware for coex.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008eea:	1dfb      	adds	r3, r7, #7
10008eec:	781b      	ldrb	r3, [r3, #0]
10008eee:	2b00      	cmp	r3, #0
10008ef0:	d007      	beq.n	10008f02 <gpio_pin_set_config+0x2e>
10008ef2:	1dfb      	adds	r3, r7, #7
10008ef4:	781b      	ldrb	r3, [r3, #0]
10008ef6:	2b01      	cmp	r3, #1
10008ef8:	d003      	beq.n	10008f02 <gpio_pin_set_config+0x2e>
		(gpio_pin == PIN_LP_GPIO_1) || \
10008efa:	1dfb      	adds	r3, r7, #7
10008efc:	781b      	ldrb	r3, [r3, #0]
10008efe:	2b0e      	cmp	r3, #14
10008f00:	d104      	bne.n	10008f0c <gpio_pin_set_config+0x38>
		(gpio_pin == PIN_LP_GPIO_14))
	{
		status = STATUS_ERR_INVALID_ARG;
10008f02:	230f      	movs	r3, #15
10008f04:	18fb      	adds	r3, r7, r3
10008f06:	2217      	movs	r2, #23
10008f08:	701a      	strb	r2, [r3, #0]
10008f0a:	e10d      	b.n	10009128 <gpio_pin_set_config+0x254>
	} else {
		if (gpio_pin <= 7) {
10008f0c:	1dfb      	adds	r3, r7, #7
10008f0e:	781b      	ldrb	r3, [r3, #0]
10008f10:	2b07      	cmp	r3, #7
10008f12:	d80e      	bhi.n	10008f32 <gpio_pin_set_config+0x5e>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008f14:	4b88      	ldr	r3, [pc, #544]	; (10009138 <gpio_pin_set_config+0x264>)
10008f16:	4a88      	ldr	r2, [pc, #544]	; (10009138 <gpio_pin_set_config+0x264>)
10008f18:	6c52      	ldr	r2, [r2, #68]	; 0x44
10008f1a:	1df9      	adds	r1, r7, #7
10008f1c:	7809      	ldrb	r1, [r1, #0]
10008f1e:	2007      	movs	r0, #7
10008f20:	4001      	ands	r1, r0
10008f22:	0089      	lsls	r1, r1, #2
10008f24:	2007      	movs	r0, #7
10008f26:	4088      	lsls	r0, r1
10008f28:	1c01      	adds	r1, r0, #0
10008f2a:	43c9      	mvns	r1, r1
10008f2c:	400a      	ands	r2, r1
10008f2e:	645a      	str	r2, [r3, #68]	; 0x44
10008f30:	e024      	b.n	10008f7c <gpio_pin_set_config+0xa8>
		} else if (gpio_pin <= 15) {
10008f32:	1dfb      	adds	r3, r7, #7
10008f34:	781b      	ldrb	r3, [r3, #0]
10008f36:	2b0f      	cmp	r3, #15
10008f38:	d80e      	bhi.n	10008f58 <gpio_pin_set_config+0x84>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008f3a:	4b7f      	ldr	r3, [pc, #508]	; (10009138 <gpio_pin_set_config+0x264>)
10008f3c:	4a7e      	ldr	r2, [pc, #504]	; (10009138 <gpio_pin_set_config+0x264>)
10008f3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
10008f40:	1df9      	adds	r1, r7, #7
10008f42:	7809      	ldrb	r1, [r1, #0]
10008f44:	2007      	movs	r0, #7
10008f46:	4001      	ands	r1, r0
10008f48:	0089      	lsls	r1, r1, #2
10008f4a:	2007      	movs	r0, #7
10008f4c:	4088      	lsls	r0, r1
10008f4e:	1c01      	adds	r1, r0, #0
10008f50:	43c9      	mvns	r1, r1
10008f52:	400a      	ands	r2, r1
10008f54:	649a      	str	r2, [r3, #72]	; 0x48
10008f56:	e011      	b.n	10008f7c <gpio_pin_set_config+0xa8>
		} else if (gpio_pin <= 23) {
10008f58:	1dfb      	adds	r3, r7, #7
10008f5a:	781b      	ldrb	r3, [r3, #0]
10008f5c:	2b17      	cmp	r3, #23
10008f5e:	d80d      	bhi.n	10008f7c <gpio_pin_set_config+0xa8>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008f60:	4b75      	ldr	r3, [pc, #468]	; (10009138 <gpio_pin_set_config+0x264>)
10008f62:	4a75      	ldr	r2, [pc, #468]	; (10009138 <gpio_pin_set_config+0x264>)
10008f64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
10008f66:	1df9      	adds	r1, r7, #7
10008f68:	7809      	ldrb	r1, [r1, #0]
10008f6a:	2007      	movs	r0, #7
10008f6c:	4001      	ands	r1, r0
10008f6e:	0089      	lsls	r1, r1, #2
10008f70:	2007      	movs	r0, #7
10008f72:	4088      	lsls	r0, r1
10008f74:	1c01      	adds	r1, r0, #0
10008f76:	43c9      	mvns	r1, r1
10008f78:	400a      	ands	r2, r1
10008f7a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008f7c:	1dfb      	adds	r3, r7, #7
10008f7e:	781b      	ldrb	r3, [r3, #0]
10008f80:	2b1f      	cmp	r3, #31
10008f82:	d007      	beq.n	10008f94 <gpio_pin_set_config+0xc0>
10008f84:	1dfb      	adds	r3, r7, #7
10008f86:	781b      	ldrb	r3, [r3, #0]
10008f88:	2b1e      	cmp	r3, #30
10008f8a:	d003      	beq.n	10008f94 <gpio_pin_set_config+0xc0>
10008f8c:	1dfb      	adds	r3, r7, #7
10008f8e:	781b      	ldrb	r3, [r3, #0]
10008f90:	2b1d      	cmp	r3, #29
10008f92:	d148      	bne.n	10009026 <gpio_pin_set_config+0x152>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008f94:	683b      	ldr	r3, [r7, #0]
10008f96:	785b      	ldrb	r3, [r3, #1]
10008f98:	2b01      	cmp	r3, #1
10008f9a:	d114      	bne.n	10008fc6 <gpio_pin_set_config+0xf2>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008f9c:	4a67      	ldr	r2, [pc, #412]	; (1000913c <gpio_pin_set_config+0x268>)
10008f9e:	4b67      	ldr	r3, [pc, #412]	; (1000913c <gpio_pin_set_config+0x268>)
10008fa0:	7d1b      	ldrb	r3, [r3, #20]
10008fa2:	b2db      	uxtb	r3, r3
10008fa4:	b2d8      	uxtb	r0, r3
10008fa6:	1dfb      	adds	r3, r7, #7
10008fa8:	781b      	ldrb	r3, [r3, #0]
10008faa:	211f      	movs	r1, #31
10008fac:	1acb      	subs	r3, r1, r3
10008fae:	2101      	movs	r1, #1
10008fb0:	4099      	lsls	r1, r3
10008fb2:	1c0b      	adds	r3, r1, #0
10008fb4:	b2db      	uxtb	r3, r3
10008fb6:	43db      	mvns	r3, r3
10008fb8:	b2d9      	uxtb	r1, r3
10008fba:	1c03      	adds	r3, r0, #0
10008fbc:	400b      	ands	r3, r1
10008fbe:	b2db      	uxtb	r3, r3
10008fc0:	b2db      	uxtb	r3, r3
10008fc2:	7513      	strb	r3, [r2, #20]
10008fc4:	e011      	b.n	10008fea <gpio_pin_set_config+0x116>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008fc6:	4a5d      	ldr	r2, [pc, #372]	; (1000913c <gpio_pin_set_config+0x268>)
10008fc8:	4b5c      	ldr	r3, [pc, #368]	; (1000913c <gpio_pin_set_config+0x268>)
10008fca:	7d1b      	ldrb	r3, [r3, #20]
10008fcc:	b2db      	uxtb	r3, r3
10008fce:	b2d8      	uxtb	r0, r3
10008fd0:	1dfb      	adds	r3, r7, #7
10008fd2:	781b      	ldrb	r3, [r3, #0]
10008fd4:	211f      	movs	r1, #31
10008fd6:	1acb      	subs	r3, r1, r3
10008fd8:	2101      	movs	r1, #1
10008fda:	4099      	lsls	r1, r3
10008fdc:	1c0b      	adds	r3, r1, #0
10008fde:	b2db      	uxtb	r3, r3
10008fe0:	1c01      	adds	r1, r0, #0
10008fe2:	430b      	orrs	r3, r1
10008fe4:	b2db      	uxtb	r3, r3
10008fe6:	b2db      	uxtb	r3, r3
10008fe8:	7513      	strb	r3, [r2, #20]
			}
			if (config->aon_wakeup) {
10008fea:	683b      	ldr	r3, [r7, #0]
10008fec:	78db      	ldrb	r3, [r3, #3]
10008fee:	2b00      	cmp	r3, #0
10008ff0:	d018      	beq.n	10009024 <gpio_pin_set_config+0x150>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008ff2:	4a52      	ldr	r2, [pc, #328]	; (1000913c <gpio_pin_set_config+0x268>)
10008ff4:	4b51      	ldr	r3, [pc, #324]	; (1000913c <gpio_pin_set_config+0x268>)
10008ff6:	881b      	ldrh	r3, [r3, #0]
10008ff8:	b29b      	uxth	r3, r3
10008ffa:	b298      	uxth	r0, r3
10008ffc:	1dfb      	adds	r3, r7, #7
10008ffe:	781b      	ldrb	r3, [r3, #0]
10009000:	211f      	movs	r1, #31
10009002:	1acb      	subs	r3, r1, r3
10009004:	009b      	lsls	r3, r3, #2
10009006:	2101      	movs	r1, #1
10009008:	4099      	lsls	r1, r3
1000900a:	1c0b      	adds	r3, r1, #0
1000900c:	b29b      	uxth	r3, r3
1000900e:	1c01      	adds	r1, r0, #0
10009010:	430b      	orrs	r3, r1
10009012:	b29b      	uxth	r3, r3
10009014:	b29b      	uxth	r3, r3
10009016:	8013      	strh	r3, [r2, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10009018:	4b49      	ldr	r3, [pc, #292]	; (10009140 <gpio_pin_set_config+0x26c>)
1000901a:	781a      	ldrb	r2, [r3, #0]
1000901c:	2102      	movs	r1, #2
1000901e:	430a      	orrs	r2, r1
10009020:	701a      	strb	r2, [r3, #0]
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10009022:	e081      	b.n	10009128 <gpio_pin_set_config+0x254>
10009024:	e080      	b.n	10009128 <gpio_pin_set_config+0x254>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10009026:	683b      	ldr	r3, [r7, #0]
10009028:	781b      	ldrb	r3, [r3, #0]
1000902a:	2b00      	cmp	r3, #0
1000902c:	d151      	bne.n	100090d2 <gpio_pin_set_config+0x1fe>
				if(gpio_pin < 16) {
1000902e:	1dfb      	adds	r3, r7, #7
10009030:	781b      	ldrb	r3, [r3, #0]
10009032:	2b0f      	cmp	r3, #15
10009034:	d808      	bhi.n	10009048 <gpio_pin_set_config+0x174>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10009036:	4a43      	ldr	r2, [pc, #268]	; (10009144 <gpio_pin_set_config+0x270>)
10009038:	1dfb      	adds	r3, r7, #7
1000903a:	781b      	ldrb	r3, [r3, #0]
1000903c:	2101      	movs	r1, #1
1000903e:	4099      	lsls	r1, r3
10009040:	1c0b      	adds	r3, r1, #0
10009042:	b29b      	uxth	r3, r3
10009044:	8293      	strh	r3, [r2, #20]
10009046:	e009      	b.n	1000905c <gpio_pin_set_config+0x188>
				} else {
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10009048:	4a3f      	ldr	r2, [pc, #252]	; (10009148 <gpio_pin_set_config+0x274>)
1000904a:	1dfb      	adds	r3, r7, #7
1000904c:	781b      	ldrb	r3, [r3, #0]
1000904e:	210f      	movs	r1, #15
10009050:	400b      	ands	r3, r1
10009052:	2101      	movs	r1, #1
10009054:	4099      	lsls	r1, r3
10009056:	1c0b      	adds	r3, r1, #0
10009058:	b29b      	uxth	r3, r3
1000905a:	8293      	strh	r3, [r2, #20]
				}
				/* pull_enable. */
				switch(config->input_pull) {
1000905c:	683b      	ldr	r3, [r7, #0]
1000905e:	785b      	ldrb	r3, [r3, #1]
10009060:	2b01      	cmp	r3, #1
10009062:	d00e      	beq.n	10009082 <gpio_pin_set_config+0x1ae>
10009064:	2b02      	cmp	r3, #2
10009066:	d018      	beq.n	1000909a <gpio_pin_set_config+0x1c6>
10009068:	2b00      	cmp	r3, #0
1000906a:	d12c      	bne.n	100090c6 <gpio_pin_set_config+0x1f2>
					case GPIO_PIN_PULL_NONE:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000906c:	4b32      	ldr	r3, [pc, #200]	; (10009138 <gpio_pin_set_config+0x264>)
1000906e:	4a32      	ldr	r2, [pc, #200]	; (10009138 <gpio_pin_set_config+0x264>)
10009070:	6d12      	ldr	r2, [r2, #80]	; 0x50
10009072:	1df9      	adds	r1, r7, #7
10009074:	7809      	ldrb	r1, [r1, #0]
10009076:	2001      	movs	r0, #1
10009078:	4088      	lsls	r0, r1
1000907a:	1c01      	adds	r1, r0, #0
1000907c:	430a      	orrs	r2, r1
1000907e:	651a      	str	r2, [r3, #80]	; 0x50
						break;
10009080:	e026      	b.n	100090d0 <gpio_pin_set_config+0x1fc>
					case GPIO_PIN_PULL_UP:
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10009082:	4b2d      	ldr	r3, [pc, #180]	; (10009138 <gpio_pin_set_config+0x264>)
10009084:	4a2c      	ldr	r2, [pc, #176]	; (10009138 <gpio_pin_set_config+0x264>)
10009086:	6d12      	ldr	r2, [r2, #80]	; 0x50
10009088:	1df9      	adds	r1, r7, #7
1000908a:	7809      	ldrb	r1, [r1, #0]
1000908c:	2001      	movs	r0, #1
1000908e:	4088      	lsls	r0, r1
10009090:	1c01      	adds	r1, r0, #0
10009092:	43c9      	mvns	r1, r1
10009094:	400a      	ands	r2, r1
10009096:	651a      	str	r2, [r3, #80]	; 0x50
						break;
10009098:	e01a      	b.n	100090d0 <gpio_pin_set_config+0x1fc>
					case GPIO_PIN_PULL_DOWN:
						/* Set R-Type */
						LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000909a:	4b27      	ldr	r3, [pc, #156]	; (10009138 <gpio_pin_set_config+0x264>)
1000909c:	4a26      	ldr	r2, [pc, #152]	; (10009138 <gpio_pin_set_config+0x264>)
1000909e:	6d52      	ldr	r2, [r2, #84]	; 0x54
100090a0:	1df9      	adds	r1, r7, #7
100090a2:	7809      	ldrb	r1, [r1, #0]
100090a4:	2001      	movs	r0, #1
100090a6:	4088      	lsls	r0, r1
100090a8:	1c01      	adds	r1, r0, #0
100090aa:	430a      	orrs	r2, r1
100090ac:	655a      	str	r2, [r3, #84]	; 0x54
						/* Set REN */
						LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100090ae:	4b22      	ldr	r3, [pc, #136]	; (10009138 <gpio_pin_set_config+0x264>)
100090b0:	4a21      	ldr	r2, [pc, #132]	; (10009138 <gpio_pin_set_config+0x264>)
100090b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
100090b4:	1df9      	adds	r1, r7, #7
100090b6:	7809      	ldrb	r1, [r1, #0]
100090b8:	2001      	movs	r0, #1
100090ba:	4088      	lsls	r0, r1
100090bc:	1c01      	adds	r1, r0, #0
100090be:	43c9      	mvns	r1, r1
100090c0:	400a      	ands	r2, r1
100090c2:	651a      	str	r2, [r3, #80]	; 0x50
						break;
100090c4:	e004      	b.n	100090d0 <gpio_pin_set_config+0x1fc>
					default:
						status = STATUS_ERR_INVALID_ARG;
100090c6:	230f      	movs	r3, #15
100090c8:	18fb      	adds	r3, r7, r3
100090ca:	2217      	movs	r2, #23
100090cc:	701a      	strb	r2, [r3, #0]
						break;
100090ce:	46c0      	nop			; (mov r8, r8)
100090d0:	e02a      	b.n	10009128 <gpio_pin_set_config+0x254>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
100090d2:	683b      	ldr	r3, [r7, #0]
100090d4:	781b      	ldrb	r3, [r3, #0]
100090d6:	2b01      	cmp	r3, #1
100090d8:	d126      	bne.n	10009128 <gpio_pin_set_config+0x254>
				if (gpio_pin < 16) {
100090da:	1dfb      	adds	r3, r7, #7
100090dc:	781b      	ldrb	r3, [r3, #0]
100090de:	2b0f      	cmp	r3, #15
100090e0:	d810      	bhi.n	10009104 <gpio_pin_set_config+0x230>
					GPIO0->OUTENSET.reg |= (1 << gpio_pin);
100090e2:	4a18      	ldr	r2, [pc, #96]	; (10009144 <gpio_pin_set_config+0x270>)
100090e4:	4b17      	ldr	r3, [pc, #92]	; (10009144 <gpio_pin_set_config+0x270>)
100090e6:	8a1b      	ldrh	r3, [r3, #16]
100090e8:	b29b      	uxth	r3, r3
100090ea:	b298      	uxth	r0, r3
100090ec:	1dfb      	adds	r3, r7, #7
100090ee:	781b      	ldrb	r3, [r3, #0]
100090f0:	2101      	movs	r1, #1
100090f2:	4099      	lsls	r1, r3
100090f4:	1c0b      	adds	r3, r1, #0
100090f6:	b29b      	uxth	r3, r3
100090f8:	1c01      	adds	r1, r0, #0
100090fa:	430b      	orrs	r3, r1
100090fc:	b29b      	uxth	r3, r3
100090fe:	b29b      	uxth	r3, r3
10009100:	8213      	strh	r3, [r2, #16]
10009102:	e011      	b.n	10009128 <gpio_pin_set_config+0x254>
				} else {
					GPIO1->OUTENSET.reg |= (1 << (gpio_pin % 16));
10009104:	4a10      	ldr	r2, [pc, #64]	; (10009148 <gpio_pin_set_config+0x274>)
10009106:	4b10      	ldr	r3, [pc, #64]	; (10009148 <gpio_pin_set_config+0x274>)
10009108:	8a1b      	ldrh	r3, [r3, #16]
1000910a:	b29b      	uxth	r3, r3
1000910c:	b298      	uxth	r0, r3
1000910e:	1dfb      	adds	r3, r7, #7
10009110:	781b      	ldrb	r3, [r3, #0]
10009112:	210f      	movs	r1, #15
10009114:	400b      	ands	r3, r1
10009116:	2101      	movs	r1, #1
10009118:	4099      	lsls	r1, r3
1000911a:	1c0b      	adds	r3, r1, #0
1000911c:	b29b      	uxth	r3, r3
1000911e:	1c01      	adds	r1, r0, #0
10009120:	430b      	orrs	r3, r1
10009122:	b29b      	uxth	r3, r3
10009124:	b29b      	uxth	r3, r3
10009126:	8213      	strh	r3, [r2, #16]
				}
			}
		}
	}
	return status;
10009128:	230f      	movs	r3, #15
1000912a:	18fb      	adds	r3, r7, r3
1000912c:	781b      	ldrb	r3, [r3, #0]
}
1000912e:	1c18      	adds	r0, r3, #0
10009130:	46bd      	mov	sp, r7
10009132:	b004      	add	sp, #16
10009134:	bd80      	pop	{r7, pc}
10009136:	46c0      	nop			; (mov r8, r8)
10009138:	4000b000 	.word	0x4000b000
1000913c:	4000f000 	.word	0x4000f000
10009140:	4000e000 	.word	0x4000e000
10009144:	40010000 	.word	0x40010000
10009148:	40011000 	.word	0x40011000

1000914c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000914c:	b590      	push	{r4, r7, lr}
1000914e:	b085      	sub	sp, #20
10009150:	af00      	add	r7, sp, #0
10009152:	1c02      	adds	r2, r0, #0
10009154:	1dfb      	adds	r3, r7, #7
10009156:	701a      	strb	r2, [r3, #0]
10009158:	1d3b      	adds	r3, r7, #4
1000915a:	1c0a      	adds	r2, r1, #0
1000915c:	801a      	strh	r2, [r3, #0]
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000915e:	1d3b      	adds	r3, r7, #4
10009160:	881b      	ldrh	r3, [r3, #0]
10009162:	0a1b      	lsrs	r3, r3, #8
10009164:	b29a      	uxth	r2, r3
10009166:	230f      	movs	r3, #15
10009168:	18fb      	adds	r3, r7, r3
1000916a:	701a      	strb	r2, [r3, #0]

	pinmux_sel &= 0xFF;
1000916c:	1d3b      	adds	r3, r7, #4
1000916e:	1d3a      	adds	r2, r7, #4
10009170:	8812      	ldrh	r2, [r2, #0]
10009172:	21ff      	movs	r1, #255	; 0xff
10009174:	400a      	ands	r2, r1
10009176:	801a      	strh	r2, [r3, #0]

	if (gpio_pin <= 7) {
10009178:	1dfb      	adds	r3, r7, #7
1000917a:	781b      	ldrb	r3, [r3, #0]
1000917c:	2b07      	cmp	r3, #7
1000917e:	d875      	bhi.n	1000926c <gpio_pinmux_cofiguration+0x120>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009180:	4bb4      	ldr	r3, [pc, #720]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009182:	4ab4      	ldr	r2, [pc, #720]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009184:	6c52      	ldr	r2, [r2, #68]	; 0x44
10009186:	1df9      	adds	r1, r7, #7
10009188:	7809      	ldrb	r1, [r1, #0]
1000918a:	2007      	movs	r0, #7
1000918c:	4001      	ands	r1, r0
1000918e:	0089      	lsls	r1, r1, #2
10009190:	2007      	movs	r0, #7
10009192:	4088      	lsls	r0, r1
10009194:	1c01      	adds	r1, r0, #0
10009196:	43c9      	mvns	r1, r1
10009198:	400a      	ands	r2, r1
1000919a:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000919c:	4bad      	ldr	r3, [pc, #692]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000919e:	4aad      	ldr	r2, [pc, #692]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100091a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
100091a2:	1d39      	adds	r1, r7, #4
100091a4:	8808      	ldrh	r0, [r1, #0]
100091a6:	1df9      	adds	r1, r7, #7
100091a8:	7809      	ldrb	r1, [r1, #0]
100091aa:	2407      	movs	r4, #7
100091ac:	4021      	ands	r1, r4
100091ae:	0089      	lsls	r1, r1, #2
100091b0:	4088      	lsls	r0, r1
100091b2:	1c01      	adds	r1, r0, #0
100091b4:	430a      	orrs	r2, r1
100091b6:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
100091b8:	1d3b      	adds	r3, r7, #4
100091ba:	881b      	ldrh	r3, [r3, #0]
100091bc:	2b01      	cmp	r3, #1
100091be:	d000      	beq.n	100091c2 <gpio_pinmux_cofiguration+0x76>
100091c0:	e145      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 3) {
100091c2:	1dfb      	adds	r3, r7, #7
100091c4:	781b      	ldrb	r3, [r3, #0]
100091c6:	2b03      	cmp	r3, #3
100091c8:	d825      	bhi.n	10009216 <gpio_pinmux_cofiguration+0xca>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100091ca:	49a2      	ldr	r1, [pc, #648]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100091cc:	4aa1      	ldr	r2, [pc, #644]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100091ce:	23d0      	movs	r3, #208	; 0xd0
100091d0:	005b      	lsls	r3, r3, #1
100091d2:	58d3      	ldr	r3, [r2, r3]
100091d4:	1dfa      	adds	r2, r7, #7
100091d6:	7812      	ldrb	r2, [r2, #0]
100091d8:	2003      	movs	r0, #3
100091da:	4002      	ands	r2, r0
100091dc:	00d2      	lsls	r2, r2, #3
100091de:	203f      	movs	r0, #63	; 0x3f
100091e0:	4090      	lsls	r0, r2
100091e2:	1c02      	adds	r2, r0, #0
100091e4:	43d2      	mvns	r2, r2
100091e6:	401a      	ands	r2, r3
100091e8:	23d0      	movs	r3, #208	; 0xd0
100091ea:	005b      	lsls	r3, r3, #1
100091ec:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100091ee:	4899      	ldr	r0, [pc, #612]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100091f0:	4a98      	ldr	r2, [pc, #608]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100091f2:	23d0      	movs	r3, #208	; 0xd0
100091f4:	005b      	lsls	r3, r3, #1
100091f6:	58d3      	ldr	r3, [r2, r3]
100091f8:	220f      	movs	r2, #15
100091fa:	18ba      	adds	r2, r7, r2
100091fc:	7811      	ldrb	r1, [r2, #0]
100091fe:	1dfa      	adds	r2, r7, #7
10009200:	7812      	ldrb	r2, [r2, #0]
10009202:	2403      	movs	r4, #3
10009204:	4022      	ands	r2, r4
10009206:	00d2      	lsls	r2, r2, #3
10009208:	4091      	lsls	r1, r2
1000920a:	1c0a      	adds	r2, r1, #0
1000920c:	431a      	orrs	r2, r3
1000920e:	23d0      	movs	r3, #208	; 0xd0
10009210:	005b      	lsls	r3, r3, #1
10009212:	50c2      	str	r2, [r0, r3]
10009214:	e11b      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 7) {
10009216:	1dfb      	adds	r3, r7, #7
10009218:	781b      	ldrb	r3, [r3, #0]
1000921a:	2b07      	cmp	r3, #7
1000921c:	d900      	bls.n	10009220 <gpio_pinmux_cofiguration+0xd4>
1000921e:	e116      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009220:	498c      	ldr	r1, [pc, #560]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009222:	4a8c      	ldr	r2, [pc, #560]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009224:	23d2      	movs	r3, #210	; 0xd2
10009226:	005b      	lsls	r3, r3, #1
10009228:	58d3      	ldr	r3, [r2, r3]
1000922a:	1dfa      	adds	r2, r7, #7
1000922c:	7812      	ldrb	r2, [r2, #0]
1000922e:	2003      	movs	r0, #3
10009230:	4002      	ands	r2, r0
10009232:	00d2      	lsls	r2, r2, #3
10009234:	203f      	movs	r0, #63	; 0x3f
10009236:	4090      	lsls	r0, r2
10009238:	1c02      	adds	r2, r0, #0
1000923a:	43d2      	mvns	r2, r2
1000923c:	401a      	ands	r2, r3
1000923e:	23d2      	movs	r3, #210	; 0xd2
10009240:	005b      	lsls	r3, r3, #1
10009242:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009244:	4883      	ldr	r0, [pc, #524]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009246:	4a83      	ldr	r2, [pc, #524]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009248:	23d2      	movs	r3, #210	; 0xd2
1000924a:	005b      	lsls	r3, r3, #1
1000924c:	58d3      	ldr	r3, [r2, r3]
1000924e:	220f      	movs	r2, #15
10009250:	18ba      	adds	r2, r7, r2
10009252:	7811      	ldrb	r1, [r2, #0]
10009254:	1dfa      	adds	r2, r7, #7
10009256:	7812      	ldrb	r2, [r2, #0]
10009258:	2403      	movs	r4, #3
1000925a:	4022      	ands	r2, r4
1000925c:	00d2      	lsls	r2, r2, #3
1000925e:	4091      	lsls	r1, r2
10009260:	1c0a      	adds	r2, r1, #0
10009262:	431a      	orrs	r2, r3
10009264:	23d2      	movs	r3, #210	; 0xd2
10009266:	005b      	lsls	r3, r3, #1
10009268:	50c2      	str	r2, [r0, r3]
1000926a:	e0f0      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			}
		}
	} else if (gpio_pin <= 15) {
1000926c:	1dfb      	adds	r3, r7, #7
1000926e:	781b      	ldrb	r3, [r3, #0]
10009270:	2b0f      	cmp	r3, #15
10009272:	d875      	bhi.n	10009360 <gpio_pinmux_cofiguration+0x214>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009274:	4b77      	ldr	r3, [pc, #476]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009276:	4a77      	ldr	r2, [pc, #476]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009278:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000927a:	1df9      	adds	r1, r7, #7
1000927c:	7809      	ldrb	r1, [r1, #0]
1000927e:	2007      	movs	r0, #7
10009280:	4001      	ands	r1, r0
10009282:	0089      	lsls	r1, r1, #2
10009284:	2007      	movs	r0, #7
10009286:	4088      	lsls	r0, r1
10009288:	1c01      	adds	r1, r0, #0
1000928a:	43c9      	mvns	r1, r1
1000928c:	400a      	ands	r2, r1
1000928e:	649a      	str	r2, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10009290:	4b70      	ldr	r3, [pc, #448]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009292:	4a70      	ldr	r2, [pc, #448]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009294:	6c92      	ldr	r2, [r2, #72]	; 0x48
10009296:	1d39      	adds	r1, r7, #4
10009298:	8808      	ldrh	r0, [r1, #0]
1000929a:	1df9      	adds	r1, r7, #7
1000929c:	7809      	ldrb	r1, [r1, #0]
1000929e:	2407      	movs	r4, #7
100092a0:	4021      	ands	r1, r4
100092a2:	0089      	lsls	r1, r1, #2
100092a4:	4088      	lsls	r0, r1
100092a6:	1c01      	adds	r1, r0, #0
100092a8:	430a      	orrs	r2, r1
100092aa:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100092ac:	1d3b      	adds	r3, r7, #4
100092ae:	881b      	ldrh	r3, [r3, #0]
100092b0:	2b01      	cmp	r3, #1
100092b2:	d000      	beq.n	100092b6 <gpio_pinmux_cofiguration+0x16a>
100092b4:	e0cb      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 11) {
100092b6:	1dfb      	adds	r3, r7, #7
100092b8:	781b      	ldrb	r3, [r3, #0]
100092ba:	2b0b      	cmp	r3, #11
100092bc:	d825      	bhi.n	1000930a <gpio_pinmux_cofiguration+0x1be>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100092be:	4965      	ldr	r1, [pc, #404]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100092c0:	4a64      	ldr	r2, [pc, #400]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100092c2:	23d4      	movs	r3, #212	; 0xd4
100092c4:	005b      	lsls	r3, r3, #1
100092c6:	58d3      	ldr	r3, [r2, r3]
100092c8:	1dfa      	adds	r2, r7, #7
100092ca:	7812      	ldrb	r2, [r2, #0]
100092cc:	2003      	movs	r0, #3
100092ce:	4002      	ands	r2, r0
100092d0:	00d2      	lsls	r2, r2, #3
100092d2:	203f      	movs	r0, #63	; 0x3f
100092d4:	4090      	lsls	r0, r2
100092d6:	1c02      	adds	r2, r0, #0
100092d8:	43d2      	mvns	r2, r2
100092da:	401a      	ands	r2, r3
100092dc:	23d4      	movs	r3, #212	; 0xd4
100092de:	005b      	lsls	r3, r3, #1
100092e0:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100092e2:	485c      	ldr	r0, [pc, #368]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100092e4:	4a5b      	ldr	r2, [pc, #364]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100092e6:	23d4      	movs	r3, #212	; 0xd4
100092e8:	005b      	lsls	r3, r3, #1
100092ea:	58d3      	ldr	r3, [r2, r3]
100092ec:	220f      	movs	r2, #15
100092ee:	18ba      	adds	r2, r7, r2
100092f0:	7811      	ldrb	r1, [r2, #0]
100092f2:	1dfa      	adds	r2, r7, #7
100092f4:	7812      	ldrb	r2, [r2, #0]
100092f6:	2403      	movs	r4, #3
100092f8:	4022      	ands	r2, r4
100092fa:	00d2      	lsls	r2, r2, #3
100092fc:	4091      	lsls	r1, r2
100092fe:	1c0a      	adds	r2, r1, #0
10009300:	431a      	orrs	r2, r3
10009302:	23d4      	movs	r3, #212	; 0xd4
10009304:	005b      	lsls	r3, r3, #1
10009306:	50c2      	str	r2, [r0, r3]
10009308:	e0a1      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 15) {
1000930a:	1dfb      	adds	r3, r7, #7
1000930c:	781b      	ldrb	r3, [r3, #0]
1000930e:	2b0f      	cmp	r3, #15
10009310:	d900      	bls.n	10009314 <gpio_pinmux_cofiguration+0x1c8>
10009312:	e09c      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009314:	494f      	ldr	r1, [pc, #316]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009316:	4a4f      	ldr	r2, [pc, #316]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009318:	23d6      	movs	r3, #214	; 0xd6
1000931a:	005b      	lsls	r3, r3, #1
1000931c:	58d3      	ldr	r3, [r2, r3]
1000931e:	1dfa      	adds	r2, r7, #7
10009320:	7812      	ldrb	r2, [r2, #0]
10009322:	2003      	movs	r0, #3
10009324:	4002      	ands	r2, r0
10009326:	00d2      	lsls	r2, r2, #3
10009328:	203f      	movs	r0, #63	; 0x3f
1000932a:	4090      	lsls	r0, r2
1000932c:	1c02      	adds	r2, r0, #0
1000932e:	43d2      	mvns	r2, r2
10009330:	401a      	ands	r2, r3
10009332:	23d6      	movs	r3, #214	; 0xd6
10009334:	005b      	lsls	r3, r3, #1
10009336:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009338:	4846      	ldr	r0, [pc, #280]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000933a:	4a46      	ldr	r2, [pc, #280]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000933c:	23d6      	movs	r3, #214	; 0xd6
1000933e:	005b      	lsls	r3, r3, #1
10009340:	58d3      	ldr	r3, [r2, r3]
10009342:	220f      	movs	r2, #15
10009344:	18ba      	adds	r2, r7, r2
10009346:	7811      	ldrb	r1, [r2, #0]
10009348:	1dfa      	adds	r2, r7, #7
1000934a:	7812      	ldrb	r2, [r2, #0]
1000934c:	2403      	movs	r4, #3
1000934e:	4022      	ands	r2, r4
10009350:	00d2      	lsls	r2, r2, #3
10009352:	4091      	lsls	r1, r2
10009354:	1c0a      	adds	r2, r1, #0
10009356:	431a      	orrs	r2, r3
10009358:	23d6      	movs	r3, #214	; 0xd6
1000935a:	005b      	lsls	r3, r3, #1
1000935c:	50c2      	str	r2, [r0, r3]
1000935e:	e076      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			}
		}
	} else if (gpio_pin <= 23) {
10009360:	1dfb      	adds	r3, r7, #7
10009362:	781b      	ldrb	r3, [r3, #0]
10009364:	2b17      	cmp	r3, #23
10009366:	d872      	bhi.n	1000944e <gpio_pinmux_cofiguration+0x302>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009368:	4b3a      	ldr	r3, [pc, #232]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000936a:	4a3a      	ldr	r2, [pc, #232]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000936c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000936e:	1df9      	adds	r1, r7, #7
10009370:	7809      	ldrb	r1, [r1, #0]
10009372:	2007      	movs	r0, #7
10009374:	4001      	ands	r1, r0
10009376:	0089      	lsls	r1, r1, #2
10009378:	2007      	movs	r0, #7
1000937a:	4088      	lsls	r0, r1
1000937c:	1c01      	adds	r1, r0, #0
1000937e:	43c9      	mvns	r1, r1
10009380:	400a      	ands	r2, r1
10009382:	64da      	str	r2, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10009384:	4b33      	ldr	r3, [pc, #204]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009386:	4a33      	ldr	r2, [pc, #204]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009388:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
1000938a:	1d39      	adds	r1, r7, #4
1000938c:	8808      	ldrh	r0, [r1, #0]
1000938e:	1df9      	adds	r1, r7, #7
10009390:	7809      	ldrb	r1, [r1, #0]
10009392:	2407      	movs	r4, #7
10009394:	4021      	ands	r1, r4
10009396:	0089      	lsls	r1, r1, #2
10009398:	4088      	lsls	r0, r1
1000939a:	1c01      	adds	r1, r0, #0
1000939c:	430a      	orrs	r2, r1
1000939e:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
100093a0:	1d3b      	adds	r3, r7, #4
100093a2:	881b      	ldrh	r3, [r3, #0]
100093a4:	2b01      	cmp	r3, #1
100093a6:	d152      	bne.n	1000944e <gpio_pinmux_cofiguration+0x302>
			if (gpio_pin <= 19) {
100093a8:	1dfb      	adds	r3, r7, #7
100093aa:	781b      	ldrb	r3, [r3, #0]
100093ac:	2b13      	cmp	r3, #19
100093ae:	d825      	bhi.n	100093fc <gpio_pinmux_cofiguration+0x2b0>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100093b0:	4928      	ldr	r1, [pc, #160]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100093b2:	4a28      	ldr	r2, [pc, #160]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100093b4:	23d8      	movs	r3, #216	; 0xd8
100093b6:	005b      	lsls	r3, r3, #1
100093b8:	58d3      	ldr	r3, [r2, r3]
100093ba:	1dfa      	adds	r2, r7, #7
100093bc:	7812      	ldrb	r2, [r2, #0]
100093be:	2003      	movs	r0, #3
100093c0:	4002      	ands	r2, r0
100093c2:	00d2      	lsls	r2, r2, #3
100093c4:	203f      	movs	r0, #63	; 0x3f
100093c6:	4090      	lsls	r0, r2
100093c8:	1c02      	adds	r2, r0, #0
100093ca:	43d2      	mvns	r2, r2
100093cc:	401a      	ands	r2, r3
100093ce:	23d8      	movs	r3, #216	; 0xd8
100093d0:	005b      	lsls	r3, r3, #1
100093d2:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100093d4:	481f      	ldr	r0, [pc, #124]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100093d6:	4a1f      	ldr	r2, [pc, #124]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
100093d8:	23d8      	movs	r3, #216	; 0xd8
100093da:	005b      	lsls	r3, r3, #1
100093dc:	58d3      	ldr	r3, [r2, r3]
100093de:	220f      	movs	r2, #15
100093e0:	18ba      	adds	r2, r7, r2
100093e2:	7811      	ldrb	r1, [r2, #0]
100093e4:	1dfa      	adds	r2, r7, #7
100093e6:	7812      	ldrb	r2, [r2, #0]
100093e8:	2403      	movs	r4, #3
100093ea:	4022      	ands	r2, r4
100093ec:	00d2      	lsls	r2, r2, #3
100093ee:	4091      	lsls	r1, r2
100093f0:	1c0a      	adds	r2, r1, #0
100093f2:	431a      	orrs	r2, r3
100093f4:	23d8      	movs	r3, #216	; 0xd8
100093f6:	005b      	lsls	r3, r3, #1
100093f8:	50c2      	str	r2, [r0, r3]
100093fa:	e028      	b.n	1000944e <gpio_pinmux_cofiguration+0x302>
			} else if (gpio_pin <= 23) {
100093fc:	1dfb      	adds	r3, r7, #7
100093fe:	781b      	ldrb	r3, [r3, #0]
10009400:	2b17      	cmp	r3, #23
10009402:	d824      	bhi.n	1000944e <gpio_pinmux_cofiguration+0x302>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009404:	4913      	ldr	r1, [pc, #76]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009406:	4a13      	ldr	r2, [pc, #76]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
10009408:	23da      	movs	r3, #218	; 0xda
1000940a:	005b      	lsls	r3, r3, #1
1000940c:	58d3      	ldr	r3, [r2, r3]
1000940e:	1dfa      	adds	r2, r7, #7
10009410:	7812      	ldrb	r2, [r2, #0]
10009412:	2003      	movs	r0, #3
10009414:	4002      	ands	r2, r0
10009416:	00d2      	lsls	r2, r2, #3
10009418:	203f      	movs	r0, #63	; 0x3f
1000941a:	4090      	lsls	r0, r2
1000941c:	1c02      	adds	r2, r0, #0
1000941e:	43d2      	mvns	r2, r2
10009420:	401a      	ands	r2, r3
10009422:	23da      	movs	r3, #218	; 0xda
10009424:	005b      	lsls	r3, r3, #1
10009426:	50ca      	str	r2, [r1, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009428:	480a      	ldr	r0, [pc, #40]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000942a:	4a0a      	ldr	r2, [pc, #40]	; (10009454 <gpio_pinmux_cofiguration+0x308>)
1000942c:	23da      	movs	r3, #218	; 0xda
1000942e:	005b      	lsls	r3, r3, #1
10009430:	58d3      	ldr	r3, [r2, r3]
10009432:	220f      	movs	r2, #15
10009434:	18ba      	adds	r2, r7, r2
10009436:	7811      	ldrb	r1, [r2, #0]
10009438:	1dfa      	adds	r2, r7, #7
1000943a:	7812      	ldrb	r2, [r2, #0]
1000943c:	2403      	movs	r4, #3
1000943e:	4022      	ands	r2, r4
10009440:	00d2      	lsls	r2, r2, #3
10009442:	4091      	lsls	r1, r2
10009444:	1c0a      	adds	r2, r1, #0
10009446:	431a      	orrs	r2, r3
10009448:	23da      	movs	r3, #218	; 0xda
1000944a:	005b      	lsls	r3, r3, #1
1000944c:	50c2      	str	r2, [r0, r3]
			}
		}
	}
}
1000944e:	46bd      	mov	sp, r7
10009450:	b005      	add	sp, #20
10009452:	bd90      	pop	{r4, r7, pc}
10009454:	4000b000 	.word	0x4000b000

10009458 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
10009458:	b590      	push	{r4, r7, lr}
1000945a:	b085      	sub	sp, #20
1000945c:	af00      	add	r7, sp, #0
1000945e:	6039      	str	r1, [r7, #0]
10009460:	1c11      	adds	r1, r2, #0
10009462:	1dfb      	adds	r3, r7, #7
10009464:	1c02      	adds	r2, r0, #0
10009466:	701a      	strb	r2, [r3, #0]
10009468:	1dbb      	adds	r3, r7, #6
1000946a:	1c0a      	adds	r2, r1, #0
1000946c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback_func);
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
1000946e:	230f      	movs	r3, #15
10009470:	18fb      	adds	r3, r7, r3
10009472:	2200      	movs	r2, #0
10009474:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
10009476:	1dfb      	adds	r3, r7, #7
10009478:	781b      	ldrb	r3, [r3, #0]
1000947a:	2b0f      	cmp	r3, #15
1000947c:	d804      	bhi.n	10009488 <gpio_register_callback+0x30>
		gpio_port = 0;
1000947e:	230f      	movs	r3, #15
10009480:	18fb      	adds	r3, r7, r3
10009482:	2200      	movs	r2, #0
10009484:	701a      	strb	r2, [r3, #0]
10009486:	e003      	b.n	10009490 <gpio_register_callback+0x38>
	} else {
		gpio_port = 1;
10009488:	230f      	movs	r3, #15
1000948a:	18fb      	adds	r3, r7, r3
1000948c:	2201      	movs	r2, #1
1000948e:	701a      	strb	r2, [r3, #0]
	}
	switch (callback_type) {
10009490:	1dbb      	adds	r3, r7, #6
10009492:	781b      	ldrb	r3, [r3, #0]
10009494:	2b04      	cmp	r3, #4
10009496:	d900      	bls.n	1000949a <gpio_register_callback+0x42>
10009498:	e119      	b.n	100096ce <gpio_register_callback+0x276>
1000949a:	009a      	lsls	r2, r3, #2
1000949c:	4ba9      	ldr	r3, [pc, #676]	; (10009744 <gpio_register_callback+0x2ec>)
1000949e:	18d3      	adds	r3, r2, r3
100094a0:	681b      	ldr	r3, [r3, #0]
100094a2:	469f      	mov	pc, r3
		case GPIO_CALLBACK_LOW:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
100094a4:	230f      	movs	r3, #15
100094a6:	18fb      	adds	r3, r7, r3
100094a8:	781a      	ldrb	r2, [r3, #0]
100094aa:	49a7      	ldr	r1, [pc, #668]	; (10009748 <gpio_register_callback+0x2f0>)
100094ac:	1c13      	adds	r3, r2, #0
100094ae:	00db      	lsls	r3, r3, #3
100094b0:	189b      	adds	r3, r3, r2
100094b2:	00db      	lsls	r3, r3, #3
100094b4:	5859      	ldr	r1, [r3, r1]
100094b6:	230f      	movs	r3, #15
100094b8:	18fb      	adds	r3, r7, r3
100094ba:	781a      	ldrb	r2, [r3, #0]
100094bc:	48a2      	ldr	r0, [pc, #648]	; (10009748 <gpio_register_callback+0x2f0>)
100094be:	1c13      	adds	r3, r2, #0
100094c0:	00db      	lsls	r3, r3, #3
100094c2:	189b      	adds	r3, r3, r2
100094c4:	00db      	lsls	r3, r3, #3
100094c6:	581b      	ldr	r3, [r3, r0]
100094c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
100094ca:	b29b      	uxth	r3, r3
100094cc:	b298      	uxth	r0, r3
100094ce:	1dfb      	adds	r3, r7, #7
100094d0:	781b      	ldrb	r3, [r3, #0]
100094d2:	220f      	movs	r2, #15
100094d4:	4013      	ands	r3, r2
100094d6:	2201      	movs	r2, #1
100094d8:	409a      	lsls	r2, r3
100094da:	1c13      	adds	r3, r2, #0
100094dc:	b29b      	uxth	r3, r3
100094de:	1c02      	adds	r2, r0, #0
100094e0:	4313      	orrs	r3, r2
100094e2:	b29b      	uxth	r3, r3
100094e4:	b29b      	uxth	r3, r3
100094e6:	858b      	strh	r3, [r1, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= 1 << (gpio_pin % 16);
100094e8:	230f      	movs	r3, #15
100094ea:	18fb      	adds	r3, r7, r3
100094ec:	781a      	ldrb	r2, [r3, #0]
100094ee:	4996      	ldr	r1, [pc, #600]	; (10009748 <gpio_register_callback+0x2f0>)
100094f0:	1c13      	adds	r3, r2, #0
100094f2:	00db      	lsls	r3, r3, #3
100094f4:	189b      	adds	r3, r3, r2
100094f6:	00db      	lsls	r3, r3, #3
100094f8:	5859      	ldr	r1, [r3, r1]
100094fa:	230f      	movs	r3, #15
100094fc:	18fb      	adds	r3, r7, r3
100094fe:	781a      	ldrb	r2, [r3, #0]
10009500:	4891      	ldr	r0, [pc, #580]	; (10009748 <gpio_register_callback+0x2f0>)
10009502:	1c13      	adds	r3, r2, #0
10009504:	00db      	lsls	r3, r3, #3
10009506:	189b      	adds	r3, r3, r2
10009508:	00db      	lsls	r3, r3, #3
1000950a:	581b      	ldr	r3, [r3, r0]
1000950c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
1000950e:	b29b      	uxth	r3, r3
10009510:	b298      	uxth	r0, r3
10009512:	1dfb      	adds	r3, r7, #7
10009514:	781b      	ldrb	r3, [r3, #0]
10009516:	220f      	movs	r2, #15
10009518:	4013      	ands	r3, r2
1000951a:	2201      	movs	r2, #1
1000951c:	409a      	lsls	r2, r3
1000951e:	1c13      	adds	r3, r2, #0
10009520:	b29b      	uxth	r3, r3
10009522:	1c02      	adds	r2, r0, #0
10009524:	4313      	orrs	r3, r2
10009526:	b29b      	uxth	r3, r3
10009528:	b29b      	uxth	r3, r3
1000952a:	868b      	strh	r3, [r1, #52]	; 0x34
			break;
1000952c:	e0cf      	b.n	100096ce <gpio_register_callback+0x276>

		case GPIO_CALLBACK_HIGH:
			_gpio_instances[gpio_port].hw->INTTYPECLR.reg |= 1 << (gpio_pin % 16);
1000952e:	230f      	movs	r3, #15
10009530:	18fb      	adds	r3, r7, r3
10009532:	781a      	ldrb	r2, [r3, #0]
10009534:	4984      	ldr	r1, [pc, #528]	; (10009748 <gpio_register_callback+0x2f0>)
10009536:	1c13      	adds	r3, r2, #0
10009538:	00db      	lsls	r3, r3, #3
1000953a:	189b      	adds	r3, r3, r2
1000953c:	00db      	lsls	r3, r3, #3
1000953e:	5859      	ldr	r1, [r3, r1]
10009540:	230f      	movs	r3, #15
10009542:	18fb      	adds	r3, r7, r3
10009544:	781a      	ldrb	r2, [r3, #0]
10009546:	4880      	ldr	r0, [pc, #512]	; (10009748 <gpio_register_callback+0x2f0>)
10009548:	1c13      	adds	r3, r2, #0
1000954a:	00db      	lsls	r3, r3, #3
1000954c:	189b      	adds	r3, r3, r2
1000954e:	00db      	lsls	r3, r3, #3
10009550:	581b      	ldr	r3, [r3, r0]
10009552:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
10009554:	b29b      	uxth	r3, r3
10009556:	b298      	uxth	r0, r3
10009558:	1dfb      	adds	r3, r7, #7
1000955a:	781b      	ldrb	r3, [r3, #0]
1000955c:	220f      	movs	r2, #15
1000955e:	4013      	ands	r3, r2
10009560:	2201      	movs	r2, #1
10009562:	409a      	lsls	r2, r3
10009564:	1c13      	adds	r3, r2, #0
10009566:	b29b      	uxth	r3, r3
10009568:	1c02      	adds	r2, r0, #0
1000956a:	4313      	orrs	r3, r2
1000956c:	b29b      	uxth	r3, r3
1000956e:	b29b      	uxth	r3, r3
10009570:	858b      	strh	r3, [r1, #44]	; 0x2c
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
10009572:	230f      	movs	r3, #15
10009574:	18fb      	adds	r3, r7, r3
10009576:	781a      	ldrb	r2, [r3, #0]
10009578:	4973      	ldr	r1, [pc, #460]	; (10009748 <gpio_register_callback+0x2f0>)
1000957a:	1c13      	adds	r3, r2, #0
1000957c:	00db      	lsls	r3, r3, #3
1000957e:	189b      	adds	r3, r3, r2
10009580:	00db      	lsls	r3, r3, #3
10009582:	5859      	ldr	r1, [r3, r1]
10009584:	230f      	movs	r3, #15
10009586:	18fb      	adds	r3, r7, r3
10009588:	781a      	ldrb	r2, [r3, #0]
1000958a:	486f      	ldr	r0, [pc, #444]	; (10009748 <gpio_register_callback+0x2f0>)
1000958c:	1c13      	adds	r3, r2, #0
1000958e:	00db      	lsls	r3, r3, #3
10009590:	189b      	adds	r3, r3, r2
10009592:	00db      	lsls	r3, r3, #3
10009594:	581b      	ldr	r3, [r3, r0]
10009596:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
10009598:	b29b      	uxth	r3, r3
1000959a:	b298      	uxth	r0, r3
1000959c:	1dfb      	adds	r3, r7, #7
1000959e:	781b      	ldrb	r3, [r3, #0]
100095a0:	220f      	movs	r2, #15
100095a2:	4013      	ands	r3, r2
100095a4:	2201      	movs	r2, #1
100095a6:	409a      	lsls	r2, r3
100095a8:	1c13      	adds	r3, r2, #0
100095aa:	b29b      	uxth	r3, r3
100095ac:	1c02      	adds	r2, r0, #0
100095ae:	4313      	orrs	r3, r2
100095b0:	b29b      	uxth	r3, r3
100095b2:	b29b      	uxth	r3, r3
100095b4:	860b      	strh	r3, [r1, #48]	; 0x30
			break;
100095b6:	e08a      	b.n	100096ce <gpio_register_callback+0x276>

		case GPIO_CALLBACK_RISING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
100095b8:	230f      	movs	r3, #15
100095ba:	18fb      	adds	r3, r7, r3
100095bc:	781a      	ldrb	r2, [r3, #0]
100095be:	4962      	ldr	r1, [pc, #392]	; (10009748 <gpio_register_callback+0x2f0>)
100095c0:	1c13      	adds	r3, r2, #0
100095c2:	00db      	lsls	r3, r3, #3
100095c4:	189b      	adds	r3, r3, r2
100095c6:	00db      	lsls	r3, r3, #3
100095c8:	5859      	ldr	r1, [r3, r1]
100095ca:	230f      	movs	r3, #15
100095cc:	18fb      	adds	r3, r7, r3
100095ce:	781a      	ldrb	r2, [r3, #0]
100095d0:	485d      	ldr	r0, [pc, #372]	; (10009748 <gpio_register_callback+0x2f0>)
100095d2:	1c13      	adds	r3, r2, #0
100095d4:	00db      	lsls	r3, r3, #3
100095d6:	189b      	adds	r3, r3, r2
100095d8:	00db      	lsls	r3, r3, #3
100095da:	581b      	ldr	r3, [r3, r0]
100095dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100095de:	b29b      	uxth	r3, r3
100095e0:	b298      	uxth	r0, r3
100095e2:	1dfb      	adds	r3, r7, #7
100095e4:	781b      	ldrb	r3, [r3, #0]
100095e6:	220f      	movs	r2, #15
100095e8:	4013      	ands	r3, r2
100095ea:	2201      	movs	r2, #1
100095ec:	409a      	lsls	r2, r3
100095ee:	1c13      	adds	r3, r2, #0
100095f0:	b29b      	uxth	r3, r3
100095f2:	1c02      	adds	r2, r0, #0
100095f4:	4313      	orrs	r3, r2
100095f6:	b29b      	uxth	r3, r3
100095f8:	b29b      	uxth	r3, r3
100095fa:	850b      	strh	r3, [r1, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLSET.reg |= 1 << (gpio_pin % 16);
100095fc:	230f      	movs	r3, #15
100095fe:	18fb      	adds	r3, r7, r3
10009600:	781a      	ldrb	r2, [r3, #0]
10009602:	4951      	ldr	r1, [pc, #324]	; (10009748 <gpio_register_callback+0x2f0>)
10009604:	1c13      	adds	r3, r2, #0
10009606:	00db      	lsls	r3, r3, #3
10009608:	189b      	adds	r3, r3, r2
1000960a:	00db      	lsls	r3, r3, #3
1000960c:	5859      	ldr	r1, [r3, r1]
1000960e:	230f      	movs	r3, #15
10009610:	18fb      	adds	r3, r7, r3
10009612:	781a      	ldrb	r2, [r3, #0]
10009614:	484c      	ldr	r0, [pc, #304]	; (10009748 <gpio_register_callback+0x2f0>)
10009616:	1c13      	adds	r3, r2, #0
10009618:	00db      	lsls	r3, r3, #3
1000961a:	189b      	adds	r3, r3, r2
1000961c:	00db      	lsls	r3, r3, #3
1000961e:	581b      	ldr	r3, [r3, r0]
10009620:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
10009622:	b29b      	uxth	r3, r3
10009624:	b298      	uxth	r0, r3
10009626:	1dfb      	adds	r3, r7, #7
10009628:	781b      	ldrb	r3, [r3, #0]
1000962a:	220f      	movs	r2, #15
1000962c:	4013      	ands	r3, r2
1000962e:	2201      	movs	r2, #1
10009630:	409a      	lsls	r2, r3
10009632:	1c13      	adds	r3, r2, #0
10009634:	b29b      	uxth	r3, r3
10009636:	1c02      	adds	r2, r0, #0
10009638:	4313      	orrs	r3, r2
1000963a:	b29b      	uxth	r3, r3
1000963c:	b29b      	uxth	r3, r3
1000963e:	860b      	strh	r3, [r1, #48]	; 0x30
			break;
10009640:	e045      	b.n	100096ce <gpio_register_callback+0x276>

		case GPIO_CALLBACK_FALLING:
			_gpio_instances[gpio_port].hw->INTTYPESET.reg |= 1 << (gpio_pin % 16);
10009642:	230f      	movs	r3, #15
10009644:	18fb      	adds	r3, r7, r3
10009646:	781a      	ldrb	r2, [r3, #0]
10009648:	493f      	ldr	r1, [pc, #252]	; (10009748 <gpio_register_callback+0x2f0>)
1000964a:	1c13      	adds	r3, r2, #0
1000964c:	00db      	lsls	r3, r3, #3
1000964e:	189b      	adds	r3, r3, r2
10009650:	00db      	lsls	r3, r3, #3
10009652:	5859      	ldr	r1, [r3, r1]
10009654:	230f      	movs	r3, #15
10009656:	18fb      	adds	r3, r7, r3
10009658:	781a      	ldrb	r2, [r3, #0]
1000965a:	483b      	ldr	r0, [pc, #236]	; (10009748 <gpio_register_callback+0x2f0>)
1000965c:	1c13      	adds	r3, r2, #0
1000965e:	00db      	lsls	r3, r3, #3
10009660:	189b      	adds	r3, r3, r2
10009662:	00db      	lsls	r3, r3, #3
10009664:	581b      	ldr	r3, [r3, r0]
10009666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10009668:	b29b      	uxth	r3, r3
1000966a:	b298      	uxth	r0, r3
1000966c:	1dfb      	adds	r3, r7, #7
1000966e:	781b      	ldrb	r3, [r3, #0]
10009670:	220f      	movs	r2, #15
10009672:	4013      	ands	r3, r2
10009674:	2201      	movs	r2, #1
10009676:	409a      	lsls	r2, r3
10009678:	1c13      	adds	r3, r2, #0
1000967a:	b29b      	uxth	r3, r3
1000967c:	1c02      	adds	r2, r0, #0
1000967e:	4313      	orrs	r3, r2
10009680:	b29b      	uxth	r3, r3
10009682:	b29b      	uxth	r3, r3
10009684:	850b      	strh	r3, [r1, #40]	; 0x28
			_gpio_instances[gpio_port].hw->INTPOLCLR.reg |= (1 << (gpio_pin % 16));
10009686:	230f      	movs	r3, #15
10009688:	18fb      	adds	r3, r7, r3
1000968a:	781a      	ldrb	r2, [r3, #0]
1000968c:	492e      	ldr	r1, [pc, #184]	; (10009748 <gpio_register_callback+0x2f0>)
1000968e:	1c13      	adds	r3, r2, #0
10009690:	00db      	lsls	r3, r3, #3
10009692:	189b      	adds	r3, r3, r2
10009694:	00db      	lsls	r3, r3, #3
10009696:	5859      	ldr	r1, [r3, r1]
10009698:	230f      	movs	r3, #15
1000969a:	18fb      	adds	r3, r7, r3
1000969c:	781a      	ldrb	r2, [r3, #0]
1000969e:	482a      	ldr	r0, [pc, #168]	; (10009748 <gpio_register_callback+0x2f0>)
100096a0:	1c13      	adds	r3, r2, #0
100096a2:	00db      	lsls	r3, r3, #3
100096a4:	189b      	adds	r3, r3, r2
100096a6:	00db      	lsls	r3, r3, #3
100096a8:	581b      	ldr	r3, [r3, r0]
100096aa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
100096ac:	b29b      	uxth	r3, r3
100096ae:	b298      	uxth	r0, r3
100096b0:	1dfb      	adds	r3, r7, #7
100096b2:	781b      	ldrb	r3, [r3, #0]
100096b4:	220f      	movs	r2, #15
100096b6:	4013      	ands	r3, r2
100096b8:	2201      	movs	r2, #1
100096ba:	409a      	lsls	r2, r3
100096bc:	1c13      	adds	r3, r2, #0
100096be:	b29b      	uxth	r3, r3
100096c0:	1c02      	adds	r2, r0, #0
100096c2:	4313      	orrs	r3, r2
100096c4:	b29b      	uxth	r3, r3
100096c6:	b29b      	uxth	r3, r3
100096c8:	868b      	strh	r3, [r1, #52]	; 0x34
			break;
100096ca:	e000      	b.n	100096ce <gpio_register_callback+0x276>

		case GPIO_CALLBACK_N:
			break;
100096cc:	46c0      	nop			; (mov r8, r8)
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
100096ce:	230f      	movs	r3, #15
100096d0:	18fb      	adds	r3, r7, r3
100096d2:	781a      	ldrb	r2, [r3, #0]
100096d4:	1dfb      	adds	r3, r7, #7
100096d6:	781b      	ldrb	r3, [r3, #0]
100096d8:	210f      	movs	r1, #15
100096da:	400b      	ands	r3, r1
100096dc:	1c18      	adds	r0, r3, #0
100096de:	491a      	ldr	r1, [pc, #104]	; (10009748 <gpio_register_callback+0x2f0>)
100096e0:	1c13      	adds	r3, r2, #0
100096e2:	00db      	lsls	r3, r3, #3
100096e4:	189b      	adds	r3, r3, r2
100096e6:	005b      	lsls	r3, r3, #1
100096e8:	181b      	adds	r3, r3, r0
100096ea:	009b      	lsls	r3, r3, #2
100096ec:	18cb      	adds	r3, r1, r3
100096ee:	683a      	ldr	r2, [r7, #0]
100096f0:	605a      	str	r2, [r3, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
100096f2:	230f      	movs	r3, #15
100096f4:	18fb      	adds	r3, r7, r3
100096f6:	781a      	ldrb	r2, [r3, #0]
100096f8:	230f      	movs	r3, #15
100096fa:	18fb      	adds	r3, r7, r3
100096fc:	7819      	ldrb	r1, [r3, #0]
100096fe:	4812      	ldr	r0, [pc, #72]	; (10009748 <gpio_register_callback+0x2f0>)
10009700:	2440      	movs	r4, #64	; 0x40
10009702:	1c0b      	adds	r3, r1, #0
10009704:	00db      	lsls	r3, r3, #3
10009706:	185b      	adds	r3, r3, r1
10009708:	00db      	lsls	r3, r3, #3
1000970a:	18c3      	adds	r3, r0, r3
1000970c:	191b      	adds	r3, r3, r4
1000970e:	889b      	ldrh	r3, [r3, #4]
10009710:	b298      	uxth	r0, r3
10009712:	1dfb      	adds	r3, r7, #7
10009714:	781b      	ldrb	r3, [r3, #0]
10009716:	210f      	movs	r1, #15
10009718:	400b      	ands	r3, r1
1000971a:	2101      	movs	r1, #1
1000971c:	4099      	lsls	r1, r3
1000971e:	1c0b      	adds	r3, r1, #0
10009720:	b29b      	uxth	r3, r3
10009722:	1c01      	adds	r1, r0, #0
10009724:	430b      	orrs	r3, r1
10009726:	b29b      	uxth	r3, r3
10009728:	b29c      	uxth	r4, r3
1000972a:	4907      	ldr	r1, [pc, #28]	; (10009748 <gpio_register_callback+0x2f0>)
1000972c:	2040      	movs	r0, #64	; 0x40
1000972e:	1c13      	adds	r3, r2, #0
10009730:	00db      	lsls	r3, r3, #3
10009732:	189b      	adds	r3, r3, r2
10009734:	00db      	lsls	r3, r3, #3
10009736:	18cb      	adds	r3, r1, r3
10009738:	181b      	adds	r3, r3, r0
1000973a:	1c22      	adds	r2, r4, #0
1000973c:	809a      	strh	r2, [r3, #4]
}
1000973e:	46bd      	mov	sp, r7
10009740:	b005      	add	sp, #20
10009742:	bd90      	pop	{r4, r7, pc}
10009744:	10014dec 	.word	0x10014dec
10009748:	1001696c 	.word	0x1001696c

1000974c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000974c:	b590      	push	{r4, r7, lr}
1000974e:	b085      	sub	sp, #20
10009750:	af00      	add	r7, sp, #0
10009752:	1c02      	adds	r2, r0, #0
10009754:	1dfb      	adds	r3, r7, #7
10009756:	701a      	strb	r2, [r3, #0]
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
10009758:	230f      	movs	r3, #15
1000975a:	18fb      	adds	r3, r7, r3
1000975c:	2200      	movs	r2, #0
1000975e:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
10009760:	1dfb      	adds	r3, r7, #7
10009762:	781b      	ldrb	r3, [r3, #0]
10009764:	2b0f      	cmp	r3, #15
10009766:	d804      	bhi.n	10009772 <gpio_enable_callback+0x26>
		gpio_port = 0;
10009768:	230f      	movs	r3, #15
1000976a:	18fb      	adds	r3, r7, r3
1000976c:	2200      	movs	r2, #0
1000976e:	701a      	strb	r2, [r3, #0]
10009770:	e003      	b.n	1000977a <gpio_enable_callback+0x2e>
	} else {
		gpio_port = 1;
10009772:	230f      	movs	r3, #15
10009774:	18fb      	adds	r3, r7, r3
10009776:	2201      	movs	r2, #1
10009778:	701a      	strb	r2, [r3, #0]
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000977a:	230f      	movs	r3, #15
1000977c:	18fb      	adds	r3, r7, r3
1000977e:	781a      	ldrb	r2, [r3, #0]
10009780:	230f      	movs	r3, #15
10009782:	18fb      	adds	r3, r7, r3
10009784:	7819      	ldrb	r1, [r3, #0]
10009786:	4822      	ldr	r0, [pc, #136]	; (10009810 <gpio_enable_callback+0xc4>)
10009788:	2440      	movs	r4, #64	; 0x40
1000978a:	1c0b      	adds	r3, r1, #0
1000978c:	00db      	lsls	r3, r3, #3
1000978e:	185b      	adds	r3, r3, r1
10009790:	00db      	lsls	r3, r3, #3
10009792:	18c3      	adds	r3, r0, r3
10009794:	191b      	adds	r3, r3, r4
10009796:	88db      	ldrh	r3, [r3, #6]
10009798:	b298      	uxth	r0, r3
1000979a:	1dfb      	adds	r3, r7, #7
1000979c:	781b      	ldrb	r3, [r3, #0]
1000979e:	210f      	movs	r1, #15
100097a0:	400b      	ands	r3, r1
100097a2:	2101      	movs	r1, #1
100097a4:	4099      	lsls	r1, r3
100097a6:	1c0b      	adds	r3, r1, #0
100097a8:	b29b      	uxth	r3, r3
100097aa:	1c01      	adds	r1, r0, #0
100097ac:	430b      	orrs	r3, r1
100097ae:	b29b      	uxth	r3, r3
100097b0:	b29c      	uxth	r4, r3
100097b2:	4917      	ldr	r1, [pc, #92]	; (10009810 <gpio_enable_callback+0xc4>)
100097b4:	2040      	movs	r0, #64	; 0x40
100097b6:	1c13      	adds	r3, r2, #0
100097b8:	00db      	lsls	r3, r3, #3
100097ba:	189b      	adds	r3, r3, r2
100097bc:	00db      	lsls	r3, r3, #3
100097be:	18cb      	adds	r3, r1, r3
100097c0:	181b      	adds	r3, r3, r0
100097c2:	1c22      	adds	r2, r4, #0
100097c4:	80da      	strh	r2, [r3, #6]
	_gpio_instances[gpio_port].hw->INTENSET.reg |= (1 << (gpio_pin % 16));
100097c6:	230f      	movs	r3, #15
100097c8:	18fb      	adds	r3, r7, r3
100097ca:	781a      	ldrb	r2, [r3, #0]
100097cc:	4910      	ldr	r1, [pc, #64]	; (10009810 <gpio_enable_callback+0xc4>)
100097ce:	1c13      	adds	r3, r2, #0
100097d0:	00db      	lsls	r3, r3, #3
100097d2:	189b      	adds	r3, r3, r2
100097d4:	00db      	lsls	r3, r3, #3
100097d6:	5859      	ldr	r1, [r3, r1]
100097d8:	230f      	movs	r3, #15
100097da:	18fb      	adds	r3, r7, r3
100097dc:	781a      	ldrb	r2, [r3, #0]
100097de:	480c      	ldr	r0, [pc, #48]	; (10009810 <gpio_enable_callback+0xc4>)
100097e0:	1c13      	adds	r3, r2, #0
100097e2:	00db      	lsls	r3, r3, #3
100097e4:	189b      	adds	r3, r3, r2
100097e6:	00db      	lsls	r3, r3, #3
100097e8:	581b      	ldr	r3, [r3, r0]
100097ea:	8c1b      	ldrh	r3, [r3, #32]
100097ec:	b29b      	uxth	r3, r3
100097ee:	b298      	uxth	r0, r3
100097f0:	1dfb      	adds	r3, r7, #7
100097f2:	781b      	ldrb	r3, [r3, #0]
100097f4:	220f      	movs	r2, #15
100097f6:	4013      	ands	r3, r2
100097f8:	2201      	movs	r2, #1
100097fa:	409a      	lsls	r2, r3
100097fc:	1c13      	adds	r3, r2, #0
100097fe:	b29b      	uxth	r3, r3
10009800:	1c02      	adds	r2, r0, #0
10009802:	4313      	orrs	r3, r2
10009804:	b29b      	uxth	r3, r3
10009806:	b29b      	uxth	r3, r3
10009808:	840b      	strh	r3, [r1, #32]
}
1000980a:	46bd      	mov	sp, r7
1000980c:	b005      	add	sp, #20
1000980e:	bd90      	pop	{r4, r7, pc}
10009810:	1001696c 	.word	0x1001696c

10009814 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
10009814:	b590      	push	{r4, r7, lr}
10009816:	b085      	sub	sp, #20
10009818:	af00      	add	r7, sp, #0
1000981a:	1c02      	adds	r2, r0, #0
1000981c:	1dfb      	adds	r3, r7, #7
1000981e:	701a      	strb	r2, [r3, #0]
	Assert(gpio_pin < 32);

	uint8_t gpio_port = 0;
10009820:	230f      	movs	r3, #15
10009822:	18fb      	adds	r3, r7, r3
10009824:	2200      	movs	r2, #0
10009826:	701a      	strb	r2, [r3, #0]

	if (gpio_pin < 16) {
10009828:	1dfb      	adds	r3, r7, #7
1000982a:	781b      	ldrb	r3, [r3, #0]
1000982c:	2b0f      	cmp	r3, #15
1000982e:	d804      	bhi.n	1000983a <gpio_disable_callback+0x26>
		gpio_port = 0;
10009830:	230f      	movs	r3, #15
10009832:	18fb      	adds	r3, r7, r3
10009834:	2200      	movs	r2, #0
10009836:	701a      	strb	r2, [r3, #0]
10009838:	e003      	b.n	10009842 <gpio_disable_callback+0x2e>
	} else {
		gpio_port = 1;
1000983a:	230f      	movs	r3, #15
1000983c:	18fb      	adds	r3, r7, r3
1000983e:	2201      	movs	r2, #1
10009840:	701a      	strb	r2, [r3, #0]
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
10009842:	230f      	movs	r3, #15
10009844:	18fb      	adds	r3, r7, r3
10009846:	781a      	ldrb	r2, [r3, #0]
10009848:	230f      	movs	r3, #15
1000984a:	18fb      	adds	r3, r7, r3
1000984c:	7819      	ldrb	r1, [r3, #0]
1000984e:	4823      	ldr	r0, [pc, #140]	; (100098dc <gpio_disable_callback+0xc8>)
10009850:	2440      	movs	r4, #64	; 0x40
10009852:	1c0b      	adds	r3, r1, #0
10009854:	00db      	lsls	r3, r3, #3
10009856:	185b      	adds	r3, r3, r1
10009858:	00db      	lsls	r3, r3, #3
1000985a:	18c3      	adds	r3, r0, r3
1000985c:	191b      	adds	r3, r3, r4
1000985e:	88db      	ldrh	r3, [r3, #6]
10009860:	b298      	uxth	r0, r3
10009862:	1dfb      	adds	r3, r7, #7
10009864:	781b      	ldrb	r3, [r3, #0]
10009866:	210f      	movs	r1, #15
10009868:	400b      	ands	r3, r1
1000986a:	2101      	movs	r1, #1
1000986c:	4099      	lsls	r1, r3
1000986e:	1c0b      	adds	r3, r1, #0
10009870:	b29b      	uxth	r3, r3
10009872:	43db      	mvns	r3, r3
10009874:	b299      	uxth	r1, r3
10009876:	1c03      	adds	r3, r0, #0
10009878:	400b      	ands	r3, r1
1000987a:	b29b      	uxth	r3, r3
1000987c:	b29c      	uxth	r4, r3
1000987e:	4917      	ldr	r1, [pc, #92]	; (100098dc <gpio_disable_callback+0xc8>)
10009880:	2040      	movs	r0, #64	; 0x40
10009882:	1c13      	adds	r3, r2, #0
10009884:	00db      	lsls	r3, r3, #3
10009886:	189b      	adds	r3, r3, r2
10009888:	00db      	lsls	r3, r3, #3
1000988a:	18cb      	adds	r3, r1, r3
1000988c:	181b      	adds	r3, r3, r0
1000988e:	1c22      	adds	r2, r4, #0
10009890:	80da      	strh	r2, [r3, #6]
	_gpio_instances[gpio_port].hw->INTENCLR.reg |= (1 << (gpio_pin % 16));
10009892:	230f      	movs	r3, #15
10009894:	18fb      	adds	r3, r7, r3
10009896:	781a      	ldrb	r2, [r3, #0]
10009898:	4910      	ldr	r1, [pc, #64]	; (100098dc <gpio_disable_callback+0xc8>)
1000989a:	1c13      	adds	r3, r2, #0
1000989c:	00db      	lsls	r3, r3, #3
1000989e:	189b      	adds	r3, r3, r2
100098a0:	00db      	lsls	r3, r3, #3
100098a2:	5859      	ldr	r1, [r3, r1]
100098a4:	230f      	movs	r3, #15
100098a6:	18fb      	adds	r3, r7, r3
100098a8:	781a      	ldrb	r2, [r3, #0]
100098aa:	480c      	ldr	r0, [pc, #48]	; (100098dc <gpio_disable_callback+0xc8>)
100098ac:	1c13      	adds	r3, r2, #0
100098ae:	00db      	lsls	r3, r3, #3
100098b0:	189b      	adds	r3, r3, r2
100098b2:	00db      	lsls	r3, r3, #3
100098b4:	581b      	ldr	r3, [r3, r0]
100098b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
100098b8:	b29b      	uxth	r3, r3
100098ba:	b298      	uxth	r0, r3
100098bc:	1dfb      	adds	r3, r7, #7
100098be:	781b      	ldrb	r3, [r3, #0]
100098c0:	220f      	movs	r2, #15
100098c2:	4013      	ands	r3, r2
100098c4:	2201      	movs	r2, #1
100098c6:	409a      	lsls	r2, r3
100098c8:	1c13      	adds	r3, r2, #0
100098ca:	b29b      	uxth	r3, r3
100098cc:	1c02      	adds	r2, r0, #0
100098ce:	4313      	orrs	r3, r2
100098d0:	b29b      	uxth	r3, r3
100098d2:	b29b      	uxth	r3, r3
100098d4:	848b      	strh	r3, [r1, #36]	; 0x24
}
100098d6:	46bd      	mov	sp, r7
100098d8:	b005      	add	sp, #20
100098da:	bd90      	pop	{r4, r7, pc}
100098dc:	1001696c 	.word	0x1001696c

100098e0 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
100098e0:	b580      	push	{r7, lr}
100098e2:	b082      	sub	sp, #8
100098e4:	af00      	add	r7, sp, #0
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
100098e6:	4b29      	ldr	r3, [pc, #164]	; (1000998c <gpio_port0_isr_handler+0xac>)
100098e8:	681b      	ldr	r3, [r3, #0]
100098ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
100098ec:	b29b      	uxth	r3, r3
100098ee:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < 16; i++){
100098f0:	1dfb      	adds	r3, r7, #7
100098f2:	2200      	movs	r2, #0
100098f4:	701a      	strb	r2, [r3, #0]
100098f6:	e03e      	b.n	10009976 <gpio_port0_isr_handler+0x96>
		if (flag & (1 << i)) {
100098f8:	1dfb      	adds	r3, r7, #7
100098fa:	781b      	ldrb	r3, [r3, #0]
100098fc:	2201      	movs	r2, #1
100098fe:	409a      	lsls	r2, r3
10009900:	1c13      	adds	r3, r2, #0
10009902:	1c1a      	adds	r2, r3, #0
10009904:	683b      	ldr	r3, [r7, #0]
10009906:	4013      	ands	r3, r2
10009908:	d030      	beq.n	1000996c <gpio_port0_isr_handler+0x8c>
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
1000990a:	4b20      	ldr	r3, [pc, #128]	; (1000998c <gpio_port0_isr_handler+0xac>)
1000990c:	681a      	ldr	r2, [r3, #0]
1000990e:	4b1f      	ldr	r3, [pc, #124]	; (1000998c <gpio_port0_isr_handler+0xac>)
10009910:	681b      	ldr	r3, [r3, #0]
10009912:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10009914:	b29b      	uxth	r3, r3
10009916:	b298      	uxth	r0, r3
10009918:	1dfb      	adds	r3, r7, #7
1000991a:	781b      	ldrb	r3, [r3, #0]
1000991c:	2101      	movs	r1, #1
1000991e:	4099      	lsls	r1, r3
10009920:	1c0b      	adds	r3, r1, #0
10009922:	b29b      	uxth	r3, r3
10009924:	1c01      	adds	r1, r0, #0
10009926:	430b      	orrs	r3, r1
10009928:	b29b      	uxth	r3, r3
1000992a:	b29b      	uxth	r3, r3
1000992c:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000992e:	4b17      	ldr	r3, [pc, #92]	; (1000998c <gpio_port0_isr_handler+0xac>)
10009930:	2246      	movs	r2, #70	; 0x46
10009932:	5a9b      	ldrh	r3, [r3, r2]
10009934:	1c1a      	adds	r2, r3, #0
10009936:	1dfb      	adds	r3, r7, #7
10009938:	781b      	ldrb	r3, [r3, #0]
1000993a:	411a      	asrs	r2, r3
1000993c:	1c13      	adds	r3, r2, #0
1000993e:	2201      	movs	r2, #1
10009940:	4013      	ands	r3, r2
10009942:	d012      	beq.n	1000996a <gpio_port0_isr_handler+0x8a>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
10009944:	4b11      	ldr	r3, [pc, #68]	; (1000998c <gpio_port0_isr_handler+0xac>)
10009946:	2244      	movs	r2, #68	; 0x44
10009948:	5a9b      	ldrh	r3, [r3, r2]

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000994a:	1c1a      	adds	r2, r3, #0
1000994c:	1dfb      	adds	r3, r7, #7
1000994e:	781b      	ldrb	r3, [r3, #0]
10009950:	411a      	asrs	r2, r3
10009952:	1c13      	adds	r3, r2, #0
10009954:	2201      	movs	r2, #1
10009956:	4013      	ands	r3, r2
10009958:	d007      	beq.n	1000996a <gpio_port0_isr_handler+0x8a>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
1000995a:	1dfb      	adds	r3, r7, #7
1000995c:	781b      	ldrb	r3, [r3, #0]
1000995e:	4a0b      	ldr	r2, [pc, #44]	; (1000998c <gpio_port0_isr_handler+0xac>)
10009960:	009b      	lsls	r3, r3, #2
10009962:	18d3      	adds	r3, r2, r3
10009964:	685b      	ldr	r3, [r3, #4]
10009966:	4798      	blx	r3
			break;
10009968:	e009      	b.n	1000997e <gpio_port0_isr_handler+0x9e>
1000996a:	e008      	b.n	1000997e <gpio_port0_isr_handler+0x9e>
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000996c:	1dfb      	adds	r3, r7, #7
1000996e:	781a      	ldrb	r2, [r3, #0]
10009970:	1dfb      	adds	r3, r7, #7
10009972:	3201      	adds	r2, #1
10009974:	701a      	strb	r2, [r3, #0]
10009976:	1dfb      	adds	r3, r7, #7
10009978:	781b      	ldrb	r3, [r3, #0]
1000997a:	2b0f      	cmp	r3, #15
1000997c:	d9bc      	bls.n	100098f8 <gpio_port0_isr_handler+0x18>
			(_gpio_instances[0].callback_reg_mask & (1 << i)))
			_gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
1000997e:	2017      	movs	r0, #23
10009980:	4b03      	ldr	r3, [pc, #12]	; (10009990 <gpio_port0_isr_handler+0xb0>)
10009982:	4798      	blx	r3
}
10009984:	46bd      	mov	sp, r7
10009986:	b002      	add	sp, #8
10009988:	bd80      	pop	{r7, pc}
1000998a:	46c0      	nop			; (mov r8, r8)
1000998c:	1001696c 	.word	0x1001696c
10009990:	10008e7d 	.word	0x10008e7d

10009994 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10009994:	b580      	push	{r7, lr}
10009996:	b082      	sub	sp, #8
10009998:	af00      	add	r7, sp, #0
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000999a:	4b2d      	ldr	r3, [pc, #180]	; (10009a50 <gpio_port1_isr_handler+0xbc>)
1000999c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000999e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
100099a0:	b29b      	uxth	r3, r3
100099a2:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < 16; i++){
100099a4:	1dfb      	adds	r3, r7, #7
100099a6:	2200      	movs	r2, #0
100099a8:	701a      	strb	r2, [r3, #0]
100099aa:	e046      	b.n	10009a3a <gpio_port1_isr_handler+0xa6>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100099ac:	683a      	ldr	r2, [r7, #0]
100099ae:	23e0      	movs	r3, #224	; 0xe0
100099b0:	021b      	lsls	r3, r3, #8
100099b2:	4013      	ands	r3, r2
100099b4:	d002      	beq.n	100099bc <gpio_port1_isr_handler+0x28>
			aon_handle_ext_wakeup_isr();
100099b6:	4b27      	ldr	r3, [pc, #156]	; (10009a54 <gpio_port1_isr_handler+0xc0>)
100099b8:	681b      	ldr	r3, [r3, #0]
100099ba:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100099bc:	1dfb      	adds	r3, r7, #7
100099be:	781b      	ldrb	r3, [r3, #0]
100099c0:	2201      	movs	r2, #1
100099c2:	409a      	lsls	r2, r3
100099c4:	1c13      	adds	r3, r2, #0
100099c6:	1c1a      	adds	r2, r3, #0
100099c8:	683b      	ldr	r3, [r7, #0]
100099ca:	4013      	ands	r3, r2
100099cc:	d030      	beq.n	10009a30 <gpio_port1_isr_handler+0x9c>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
100099ce:	4b20      	ldr	r3, [pc, #128]	; (10009a50 <gpio_port1_isr_handler+0xbc>)
100099d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
100099d2:	4b1f      	ldr	r3, [pc, #124]	; (10009a50 <gpio_port1_isr_handler+0xbc>)
100099d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100099d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
100099d8:	b29b      	uxth	r3, r3
100099da:	b298      	uxth	r0, r3
100099dc:	1dfb      	adds	r3, r7, #7
100099de:	781b      	ldrb	r3, [r3, #0]
100099e0:	2101      	movs	r1, #1
100099e2:	4099      	lsls	r1, r3
100099e4:	1c0b      	adds	r3, r1, #0
100099e6:	b29b      	uxth	r3, r3
100099e8:	1c01      	adds	r1, r0, #0
100099ea:	430b      	orrs	r3, r1
100099ec:	b29b      	uxth	r3, r3
100099ee:	b29b      	uxth	r3, r3
100099f0:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100099f2:	4b17      	ldr	r3, [pc, #92]	; (10009a50 <gpio_port1_isr_handler+0xbc>)
100099f4:	228e      	movs	r2, #142	; 0x8e
100099f6:	5a9b      	ldrh	r3, [r3, r2]
100099f8:	1c1a      	adds	r2, r3, #0
100099fa:	1dfb      	adds	r3, r7, #7
100099fc:	781b      	ldrb	r3, [r3, #0]
100099fe:	411a      	asrs	r2, r3
10009a00:	1c13      	adds	r3, r2, #0
10009a02:	2201      	movs	r2, #1
10009a04:	4013      	ands	r3, r2
10009a06:	d013      	beq.n	10009a30 <gpio_port1_isr_handler+0x9c>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10009a08:	4b11      	ldr	r3, [pc, #68]	; (10009a50 <gpio_port1_isr_handler+0xbc>)
10009a0a:	228c      	movs	r2, #140	; 0x8c
10009a0c:	5a9b      	ldrh	r3, [r3, r2]
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg |= (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10009a0e:	1c1a      	adds	r2, r3, #0
10009a10:	1dfb      	adds	r3, r7, #7
10009a12:	781b      	ldrb	r3, [r3, #0]
10009a14:	411a      	asrs	r2, r3
10009a16:	1c13      	adds	r3, r2, #0
10009a18:	2201      	movs	r2, #1
10009a1a:	4013      	ands	r3, r2
10009a1c:	d008      	beq.n	10009a30 <gpio_port1_isr_handler+0x9c>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
10009a1e:	1dfb      	adds	r3, r7, #7
10009a20:	781b      	ldrb	r3, [r3, #0]
10009a22:	4a0b      	ldr	r2, [pc, #44]	; (10009a50 <gpio_port1_isr_handler+0xbc>)
10009a24:	3312      	adds	r3, #18
10009a26:	009b      	lsls	r3, r3, #2
10009a28:	18d3      	adds	r3, r2, r3
10009a2a:	685b      	ldr	r3, [r3, #4]
10009a2c:	4798      	blx	r3
				break;
10009a2e:	e008      	b.n	10009a42 <gpio_port1_isr_handler+0xae>
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10009a30:	1dfb      	adds	r3, r7, #7
10009a32:	781a      	ldrb	r2, [r3, #0]
10009a34:	1dfb      	adds	r3, r7, #7
10009a36:	3201      	adds	r2, #1
10009a38:	701a      	strb	r2, [r3, #0]
10009a3a:	1dfb      	adds	r3, r7, #7
10009a3c:	781b      	ldrb	r3, [r3, #0]
10009a3e:	2b0f      	cmp	r3, #15
10009a40:	d9b4      	bls.n	100099ac <gpio_port1_isr_handler+0x18>
				_gpio_instances[1].callback[i]();
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
10009a42:	2018      	movs	r0, #24
10009a44:	4b04      	ldr	r3, [pc, #16]	; (10009a58 <gpio_port1_isr_handler+0xc4>)
10009a46:	4798      	blx	r3
}
10009a48:	46bd      	mov	sp, r7
10009a4a:	b002      	add	sp, #8
10009a4c:	bd80      	pop	{r7, pc}
10009a4e:	46c0      	nop			; (mov r8, r8)
10009a50:	1001696c 	.word	0x1001696c
10009a54:	10016154 	.word	0x10016154
10009a58:	10008e7d 	.word	0x10008e7d

10009a5c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
10009a5c:	b580      	push	{r7, lr}
10009a5e:	b082      	sub	sp, #8
10009a60:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
10009a62:	1dfb      	adds	r3, r7, #7
10009a64:	2200      	movs	r2, #0
10009a66:	701a      	strb	r2, [r3, #0]
10009a68:	e037      	b.n	10009ada <gpio_init+0x7e>
		for(j = 0; j < 16; j++) {
10009a6a:	1dbb      	adds	r3, r7, #6
10009a6c:	2200      	movs	r2, #0
10009a6e:	701a      	strb	r2, [r3, #0]
10009a70:	e012      	b.n	10009a98 <gpio_init+0x3c>
			_gpio_instances[i].callback[j] = NULL;
10009a72:	1dfb      	adds	r3, r7, #7
10009a74:	781a      	ldrb	r2, [r3, #0]
10009a76:	1dbb      	adds	r3, r7, #6
10009a78:	7818      	ldrb	r0, [r3, #0]
10009a7a:	4923      	ldr	r1, [pc, #140]	; (10009b08 <gpio_init+0xac>)
10009a7c:	1c13      	adds	r3, r2, #0
10009a7e:	00db      	lsls	r3, r3, #3
10009a80:	189b      	adds	r3, r3, r2
10009a82:	005b      	lsls	r3, r3, #1
10009a84:	181b      	adds	r3, r3, r0
10009a86:	009b      	lsls	r3, r3, #2
10009a88:	18cb      	adds	r3, r1, r3
10009a8a:	2200      	movs	r2, #0
10009a8c:	605a      	str	r2, [r3, #4]
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
		for(j = 0; j < 16; j++) {
10009a8e:	1dbb      	adds	r3, r7, #6
10009a90:	781a      	ldrb	r2, [r3, #0]
10009a92:	1dbb      	adds	r3, r7, #6
10009a94:	3201      	adds	r2, #1
10009a96:	701a      	strb	r2, [r3, #0]
10009a98:	1dbb      	adds	r3, r7, #6
10009a9a:	781b      	ldrb	r3, [r3, #0]
10009a9c:	2b0f      	cmp	r3, #15
10009a9e:	d9e8      	bls.n	10009a72 <gpio_init+0x16>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
10009aa0:	1dfb      	adds	r3, r7, #7
10009aa2:	781a      	ldrb	r2, [r3, #0]
10009aa4:	4918      	ldr	r1, [pc, #96]	; (10009b08 <gpio_init+0xac>)
10009aa6:	2040      	movs	r0, #64	; 0x40
10009aa8:	1c13      	adds	r3, r2, #0
10009aaa:	00db      	lsls	r3, r3, #3
10009aac:	189b      	adds	r3, r3, r2
10009aae:	00db      	lsls	r3, r3, #3
10009ab0:	18cb      	adds	r3, r1, r3
10009ab2:	181b      	adds	r3, r3, r0
10009ab4:	2200      	movs	r2, #0
10009ab6:	80da      	strh	r2, [r3, #6]
		_gpio_instances[i].callback_reg_mask = 0;
10009ab8:	1dfb      	adds	r3, r7, #7
10009aba:	781a      	ldrb	r2, [r3, #0]
10009abc:	4912      	ldr	r1, [pc, #72]	; (10009b08 <gpio_init+0xac>)
10009abe:	2040      	movs	r0, #64	; 0x40
10009ac0:	1c13      	adds	r3, r2, #0
10009ac2:	00db      	lsls	r3, r3, #3
10009ac4:	189b      	adds	r3, r3, r2
10009ac6:	00db      	lsls	r3, r3, #3
10009ac8:	18cb      	adds	r3, r1, r3
10009aca:	181b      	adds	r3, r3, r0
10009acc:	2200      	movs	r2, #0
10009ace:	809a      	strh	r2, [r3, #4]
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 2; i++) {
10009ad0:	1dfb      	adds	r3, r7, #7
10009ad2:	781a      	ldrb	r2, [r3, #0]
10009ad4:	1dfb      	adds	r3, r7, #7
10009ad6:	3201      	adds	r2, #1
10009ad8:	701a      	strb	r2, [r3, #0]
10009ada:	1dfb      	adds	r3, r7, #7
10009adc:	781b      	ldrb	r3, [r3, #0]
10009ade:	2b01      	cmp	r3, #1
10009ae0:	d9c3      	bls.n	10009a6a <gpio_init+0xe>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
10009ae2:	4b09      	ldr	r3, [pc, #36]	; (10009b08 <gpio_init+0xac>)
10009ae4:	4a09      	ldr	r2, [pc, #36]	; (10009b0c <gpio_init+0xb0>)
10009ae6:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
10009ae8:	4b07      	ldr	r3, [pc, #28]	; (10009b08 <gpio_init+0xac>)
10009aea:	4a09      	ldr	r2, [pc, #36]	; (10009b10 <gpio_init+0xb4>)
10009aec:	649a      	str	r2, [r3, #72]	; 0x48
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
10009aee:	4b09      	ldr	r3, [pc, #36]	; (10009b14 <gpio_init+0xb8>)
10009af0:	2027      	movs	r0, #39	; 0x27
10009af2:	1c19      	adds	r1, r3, #0
10009af4:	4b08      	ldr	r3, [pc, #32]	; (10009b18 <gpio_init+0xbc>)
10009af6:	4798      	blx	r3
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
10009af8:	4b08      	ldr	r3, [pc, #32]	; (10009b1c <gpio_init+0xc0>)
10009afa:	2028      	movs	r0, #40	; 0x28
10009afc:	1c19      	adds	r1, r3, #0
10009afe:	4b06      	ldr	r3, [pc, #24]	; (10009b18 <gpio_init+0xbc>)
10009b00:	4798      	blx	r3
}
10009b02:	46bd      	mov	sp, r7
10009b04:	b002      	add	sp, #8
10009b06:	bd80      	pop	{r7, pc}
10009b08:	1001696c 	.word	0x1001696c
10009b0c:	40010000 	.word	0x40010000
10009b10:	40011000 	.word	0x40011000
10009b14:	100098e1 	.word	0x100098e1
10009b18:	1000a50d 	.word	0x1000a50d
10009b1c:	10009995 	.word	0x10009995

10009b20 <system_clock_config>:
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
10009b20:	b580      	push	{r7, lr}
10009b22:	b082      	sub	sp, #8
10009b24:	af00      	add	r7, sp, #0
10009b26:	1c02      	adds	r2, r0, #0
10009b28:	1dfb      	adds	r3, r7, #7
10009b2a:	701a      	strb	r2, [r3, #0]
10009b2c:	1dbb      	adds	r3, r7, #6
10009b2e:	1c0a      	adds	r2, r1, #0
10009b30:	701a      	strb	r2, [r3, #0]
	switch (resoure) {
10009b32:	1dfb      	adds	r3, r7, #7
10009b34:	781b      	ldrb	r3, [r3, #0]
10009b36:	2b01      	cmp	r3, #1
10009b38:	d00d      	beq.n	10009b56 <system_clock_config+0x36>
10009b3a:	2b02      	cmp	r3, #2
10009b3c:	d022      	beq.n	10009b84 <system_clock_config+0x64>
10009b3e:	2b00      	cmp	r3, #0
10009b40:	d12a      	bne.n	10009b98 <system_clock_config+0x78>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10009b42:	4b20      	ldr	r3, [pc, #128]	; (10009bc4 <system_clock_config+0xa4>)
10009b44:	4a1f      	ldr	r2, [pc, #124]	; (10009bc4 <system_clock_config+0xa4>)
10009b46:	6992      	ldr	r2, [r2, #24]
10009b48:	210c      	movs	r1, #12
10009b4a:	430a      	orrs	r2, r1
10009b4c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10009b4e:	4b1e      	ldr	r3, [pc, #120]	; (10009bc8 <system_clock_config+0xa8>)
10009b50:	4a1e      	ldr	r2, [pc, #120]	; (10009bcc <system_clock_config+0xac>)
10009b52:	601a      	str	r2, [r3, #0]
			break;
10009b54:	e022      	b.n	10009b9c <system_clock_config+0x7c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10009b56:	4b1b      	ldr	r3, [pc, #108]	; (10009bc4 <system_clock_config+0xa4>)
10009b58:	4a1a      	ldr	r2, [pc, #104]	; (10009bc4 <system_clock_config+0xa4>)
10009b5a:	6992      	ldr	r2, [r2, #24]
10009b5c:	2108      	movs	r1, #8
10009b5e:	430a      	orrs	r2, r1
10009b60:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10009b62:	4b18      	ldr	r3, [pc, #96]	; (10009bc4 <system_clock_config+0xa4>)
10009b64:	4a17      	ldr	r2, [pc, #92]	; (10009bc4 <system_clock_config+0xa4>)
10009b66:	6992      	ldr	r2, [r2, #24]
10009b68:	2104      	movs	r1, #4
10009b6a:	438a      	bics	r2, r1
10009b6c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10009b6e:	4b18      	ldr	r3, [pc, #96]	; (10009bd0 <system_clock_config+0xb0>)
10009b70:	4a17      	ldr	r2, [pc, #92]	; (10009bd0 <system_clock_config+0xb0>)
10009b72:	6852      	ldr	r2, [r2, #4]
10009b74:	2180      	movs	r1, #128	; 0x80
10009b76:	0309      	lsls	r1, r1, #12
10009b78:	430a      	orrs	r2, r1
10009b7a:	605a      	str	r2, [r3, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10009b7c:	4b12      	ldr	r3, [pc, #72]	; (10009bc8 <system_clock_config+0xa8>)
10009b7e:	4a15      	ldr	r2, [pc, #84]	; (10009bd4 <system_clock_config+0xb4>)
10009b80:	601a      	str	r2, [r3, #0]
			break;
10009b82:	e00b      	b.n	10009b9c <system_clock_config+0x7c>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10009b84:	4b0f      	ldr	r3, [pc, #60]	; (10009bc4 <system_clock_config+0xa4>)
10009b86:	4a0f      	ldr	r2, [pc, #60]	; (10009bc4 <system_clock_config+0xa4>)
10009b88:	6992      	ldr	r2, [r2, #24]
10009b8a:	210c      	movs	r1, #12
10009b8c:	438a      	bics	r2, r1
10009b8e:	619a      	str	r2, [r3, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10009b90:	4b0d      	ldr	r3, [pc, #52]	; (10009bc8 <system_clock_config+0xa8>)
10009b92:	4a0e      	ldr	r2, [pc, #56]	; (10009bcc <system_clock_config+0xac>)
10009b94:	601a      	str	r2, [r3, #0]
			break;
10009b96:	e001      	b.n	10009b9c <system_clock_config+0x7c>

		default:
			return STATUS_ERR_INVALID_ARG;
10009b98:	2317      	movs	r3, #23
10009b9a:	e00f      	b.n	10009bbc <system_clock_config+0x9c>
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10009b9c:	4b09      	ldr	r3, [pc, #36]	; (10009bc4 <system_clock_config+0xa4>)
10009b9e:	4a09      	ldr	r2, [pc, #36]	; (10009bc4 <system_clock_config+0xa4>)
10009ba0:	6992      	ldr	r2, [r2, #24]
10009ba2:	2103      	movs	r1, #3
10009ba4:	438a      	bics	r2, r1
10009ba6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10009ba8:	4b06      	ldr	r3, [pc, #24]	; (10009bc4 <system_clock_config+0xa4>)
10009baa:	4a06      	ldr	r2, [pc, #24]	; (10009bc4 <system_clock_config+0xa4>)
10009bac:	6991      	ldr	r1, [r2, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);
10009bae:	1dba      	adds	r2, r7, #6
10009bb0:	7812      	ldrb	r2, [r2, #0]
10009bb2:	2003      	movs	r0, #3
10009bb4:	4002      	ands	r2, r0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10009bb6:	430a      	orrs	r2, r1
10009bb8:	619a      	str	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10009bba:	2300      	movs	r3, #0
}
10009bbc:	1c18      	adds	r0, r3, #0
10009bbe:	46bd      	mov	sp, r7
10009bc0:	b002      	add	sp, #8
10009bc2:	bd80      	pop	{r7, pc}
10009bc4:	4000b000 	.word	0x4000b000
10009bc8:	100169fc 	.word	0x100169fc
10009bcc:	018cba80 	.word	0x018cba80
10009bd0:	4000f000 	.word	0x4000f000
10009bd4:	001e8480 	.word	0x001e8480

10009bd8 <system_clock_get_value>:
 * Use this function to get system clock value.
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
10009bd8:	b580      	push	{r7, lr}
10009bda:	af00      	add	r7, sp, #0
	return system_clock_value;
10009bdc:	4b02      	ldr	r3, [pc, #8]	; (10009be8 <system_clock_get_value+0x10>)
10009bde:	681b      	ldr	r3, [r3, #0]
}
10009be0:	1c18      	adds	r0, r3, #0
10009be2:	46bd      	mov	sp, r7
10009be4:	bd80      	pop	{r7, pc}
10009be6:	46c0      	nop			; (mov r8, r8)
10009be8:	100169fc 	.word	0x100169fc

10009bec <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10009bec:	b580      	push	{r7, lr}
10009bee:	b082      	sub	sp, #8
10009bf0:	af00      	add	r7, sp, #0
10009bf2:	1c02      	adds	r2, r0, #0
10009bf4:	1dfb      	adds	r3, r7, #7
10009bf6:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
10009bf8:	1dfb      	adds	r3, r7, #7
10009bfa:	781b      	ldrb	r3, [r3, #0]
10009bfc:	2b35      	cmp	r3, #53	; 0x35
10009bfe:	d900      	bls.n	10009c02 <system_clock_peripheral_enable+0x16>
10009c00:	e1a9      	b.n	10009f56 <system_clock_peripheral_enable+0x36a>
10009c02:	009a      	lsls	r2, r3, #2
10009c04:	4bd7      	ldr	r3, [pc, #860]	; (10009f64 <system_clock_peripheral_enable+0x378>)
10009c06:	18d3      	adds	r3, r2, r3
10009c08:	681b      	ldr	r3, [r3, #0]
10009c0a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c0c:	4bd6      	ldr	r3, [pc, #856]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c0e:	4ad6      	ldr	r2, [pc, #856]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c10:	68d2      	ldr	r2, [r2, #12]
10009c12:	2102      	movs	r1, #2
10009c14:	430a      	orrs	r2, r1
10009c16:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10009c18:	e19f      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c1a:	4bd3      	ldr	r3, [pc, #844]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c1c:	4ad2      	ldr	r2, [pc, #840]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c1e:	68d2      	ldr	r2, [r2, #12]
10009c20:	2104      	movs	r1, #4
10009c22:	430a      	orrs	r2, r1
10009c24:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10009c26:	e198      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c28:	4bcf      	ldr	r3, [pc, #828]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c2a:	4acf      	ldr	r2, [pc, #828]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c2c:	68d2      	ldr	r2, [r2, #12]
10009c2e:	2108      	movs	r1, #8
10009c30:	430a      	orrs	r2, r1
10009c32:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10009c34:	e191      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c36:	4bcc      	ldr	r3, [pc, #816]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c38:	4acb      	ldr	r2, [pc, #812]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c3a:	68d2      	ldr	r2, [r2, #12]
10009c3c:	2110      	movs	r1, #16
10009c3e:	430a      	orrs	r2, r1
10009c40:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10009c42:	e18a      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c44:	4bc8      	ldr	r3, [pc, #800]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c46:	4ac8      	ldr	r2, [pc, #800]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c48:	68d2      	ldr	r2, [r2, #12]
10009c4a:	2120      	movs	r1, #32
10009c4c:	430a      	orrs	r2, r1
10009c4e:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10009c50:	e183      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c52:	4bc5      	ldr	r3, [pc, #788]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c54:	4ac4      	ldr	r2, [pc, #784]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c56:	68d2      	ldr	r2, [r2, #12]
10009c58:	2180      	movs	r1, #128	; 0x80
10009c5a:	430a      	orrs	r2, r1
10009c5c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10009c5e:	e17c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c60:	4bc1      	ldr	r3, [pc, #772]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c62:	4ac1      	ldr	r2, [pc, #772]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c64:	68d2      	ldr	r2, [r2, #12]
10009c66:	2180      	movs	r1, #128	; 0x80
10009c68:	0049      	lsls	r1, r1, #1
10009c6a:	430a      	orrs	r2, r1
10009c6c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10009c6e:	e174      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c70:	4bbd      	ldr	r3, [pc, #756]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c72:	4abd      	ldr	r2, [pc, #756]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c74:	68d2      	ldr	r2, [r2, #12]
10009c76:	2180      	movs	r1, #128	; 0x80
10009c78:	0109      	lsls	r1, r1, #4
10009c7a:	430a      	orrs	r2, r1
10009c7c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10009c7e:	e16c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c80:	4bb9      	ldr	r3, [pc, #740]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c82:	4ab9      	ldr	r2, [pc, #740]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c84:	68d2      	ldr	r2, [r2, #12]
10009c86:	2180      	movs	r1, #128	; 0x80
10009c88:	0149      	lsls	r1, r1, #5
10009c8a:	430a      	orrs	r2, r1
10009c8c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10009c8e:	e164      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009c90:	4bb5      	ldr	r3, [pc, #724]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c92:	4ab5      	ldr	r2, [pc, #724]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009c94:	68d2      	ldr	r2, [r2, #12]
10009c96:	2180      	movs	r1, #128	; 0x80
10009c98:	0189      	lsls	r1, r1, #6
10009c9a:	430a      	orrs	r2, r1
10009c9c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10009c9e:	e15c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009ca0:	4bb1      	ldr	r3, [pc, #708]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ca2:	4ab1      	ldr	r2, [pc, #708]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ca4:	68d2      	ldr	r2, [r2, #12]
10009ca6:	2180      	movs	r1, #128	; 0x80
10009ca8:	01c9      	lsls	r1, r1, #7
10009caa:	430a      	orrs	r2, r1
10009cac:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10009cae:	e154      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009cb0:	4bad      	ldr	r3, [pc, #692]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cb2:	4aad      	ldr	r2, [pc, #692]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cb4:	68d2      	ldr	r2, [r2, #12]
10009cb6:	2180      	movs	r1, #128	; 0x80
10009cb8:	0209      	lsls	r1, r1, #8
10009cba:	430a      	orrs	r2, r1
10009cbc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10009cbe:	e14c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009cc0:	4ba9      	ldr	r3, [pc, #676]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cc2:	4aa9      	ldr	r2, [pc, #676]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cc4:	68d2      	ldr	r2, [r2, #12]
10009cc6:	2180      	movs	r1, #128	; 0x80
10009cc8:	0249      	lsls	r1, r1, #9
10009cca:	430a      	orrs	r2, r1
10009ccc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10009cce:	e144      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009cd0:	4ba5      	ldr	r3, [pc, #660]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cd2:	4aa5      	ldr	r2, [pc, #660]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cd4:	68d2      	ldr	r2, [r2, #12]
10009cd6:	2180      	movs	r1, #128	; 0x80
10009cd8:	0289      	lsls	r1, r1, #10
10009cda:	430a      	orrs	r2, r1
10009cdc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10009cde:	e13c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009ce0:	4ba1      	ldr	r3, [pc, #644]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ce2:	4aa1      	ldr	r2, [pc, #644]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ce4:	68d2      	ldr	r2, [r2, #12]
10009ce6:	2180      	movs	r1, #128	; 0x80
10009ce8:	02c9      	lsls	r1, r1, #11
10009cea:	430a      	orrs	r2, r1
10009cec:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10009cee:	e134      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009cf0:	4b9d      	ldr	r3, [pc, #628]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cf2:	4a9d      	ldr	r2, [pc, #628]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009cf4:	68d2      	ldr	r2, [r2, #12]
10009cf6:	2180      	movs	r1, #128	; 0x80
10009cf8:	0309      	lsls	r1, r1, #12
10009cfa:	430a      	orrs	r2, r1
10009cfc:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10009cfe:	e12c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d00:	4b99      	ldr	r3, [pc, #612]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d02:	4a99      	ldr	r2, [pc, #612]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d04:	68d2      	ldr	r2, [r2, #12]
10009d06:	2180      	movs	r1, #128	; 0x80
10009d08:	0349      	lsls	r1, r1, #13
10009d0a:	430a      	orrs	r2, r1
10009d0c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009d0e:	e124      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d10:	4b95      	ldr	r3, [pc, #596]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d12:	4a95      	ldr	r2, [pc, #596]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d14:	68d2      	ldr	r2, [r2, #12]
10009d16:	2180      	movs	r1, #128	; 0x80
10009d18:	0389      	lsls	r1, r1, #14
10009d1a:	430a      	orrs	r2, r1
10009d1c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009d1e:	e11c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d20:	4b91      	ldr	r3, [pc, #580]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d22:	4a91      	ldr	r2, [pc, #580]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d24:	68d2      	ldr	r2, [r2, #12]
10009d26:	2180      	movs	r1, #128	; 0x80
10009d28:	03c9      	lsls	r1, r1, #15
10009d2a:	430a      	orrs	r2, r1
10009d2c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009d2e:	e114      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d30:	4b8d      	ldr	r3, [pc, #564]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d32:	4a8d      	ldr	r2, [pc, #564]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d34:	68d2      	ldr	r2, [r2, #12]
10009d36:	2180      	movs	r1, #128	; 0x80
10009d38:	0409      	lsls	r1, r1, #16
10009d3a:	430a      	orrs	r2, r1
10009d3c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10009d3e:	e10c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d40:	4b89      	ldr	r3, [pc, #548]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d42:	4a89      	ldr	r2, [pc, #548]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d44:	68d2      	ldr	r2, [r2, #12]
10009d46:	2180      	movs	r1, #128	; 0x80
10009d48:	0449      	lsls	r1, r1, #17
10009d4a:	430a      	orrs	r2, r1
10009d4c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10009d4e:	e104      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d50:	4b85      	ldr	r3, [pc, #532]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d52:	4a85      	ldr	r2, [pc, #532]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d54:	68d2      	ldr	r2, [r2, #12]
10009d56:	2180      	movs	r1, #128	; 0x80
10009d58:	0489      	lsls	r1, r1, #18
10009d5a:	430a      	orrs	r2, r1
10009d5c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10009d5e:	e0fc      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d60:	4b81      	ldr	r3, [pc, #516]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d62:	4a81      	ldr	r2, [pc, #516]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d64:	68d2      	ldr	r2, [r2, #12]
10009d66:	2180      	movs	r1, #128	; 0x80
10009d68:	04c9      	lsls	r1, r1, #19
10009d6a:	430a      	orrs	r2, r1
10009d6c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10009d6e:	e0f4      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d70:	4b7d      	ldr	r3, [pc, #500]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d72:	4a7d      	ldr	r2, [pc, #500]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d74:	68d2      	ldr	r2, [r2, #12]
10009d76:	2180      	movs	r1, #128	; 0x80
10009d78:	0509      	lsls	r1, r1, #20
10009d7a:	430a      	orrs	r2, r1
10009d7c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10009d7e:	e0ec      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d80:	4b79      	ldr	r3, [pc, #484]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d82:	4a79      	ldr	r2, [pc, #484]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d84:	68d2      	ldr	r2, [r2, #12]
10009d86:	2180      	movs	r1, #128	; 0x80
10009d88:	0549      	lsls	r1, r1, #21
10009d8a:	430a      	orrs	r2, r1
10009d8c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10009d8e:	e0e4      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009d90:	4b75      	ldr	r3, [pc, #468]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d92:	4a75      	ldr	r2, [pc, #468]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009d94:	68d2      	ldr	r2, [r2, #12]
10009d96:	2180      	movs	r1, #128	; 0x80
10009d98:	0589      	lsls	r1, r1, #22
10009d9a:	430a      	orrs	r2, r1
10009d9c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10009d9e:	e0dc      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009da0:	4b71      	ldr	r3, [pc, #452]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009da2:	4a71      	ldr	r2, [pc, #452]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009da4:	68d2      	ldr	r2, [r2, #12]
10009da6:	2180      	movs	r1, #128	; 0x80
10009da8:	05c9      	lsls	r1, r1, #23
10009daa:	430a      	orrs	r2, r1
10009dac:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009dae:	e0d4      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009db0:	4b6d      	ldr	r3, [pc, #436]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009db2:	4a6d      	ldr	r2, [pc, #436]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009db4:	6912      	ldr	r2, [r2, #16]
10009db6:	2101      	movs	r1, #1
10009db8:	430a      	orrs	r2, r1
10009dba:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10009dbc:	e0cd      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009dbe:	4b6a      	ldr	r3, [pc, #424]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dc0:	4a69      	ldr	r2, [pc, #420]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dc2:	6912      	ldr	r2, [r2, #16]
10009dc4:	2102      	movs	r1, #2
10009dc6:	430a      	orrs	r2, r1
10009dc8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10009dca:	e0c6      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009dcc:	4b66      	ldr	r3, [pc, #408]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dce:	4a66      	ldr	r2, [pc, #408]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dd0:	6912      	ldr	r2, [r2, #16]
10009dd2:	2104      	movs	r1, #4
10009dd4:	430a      	orrs	r2, r1
10009dd6:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10009dd8:	e0bf      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009dda:	4b63      	ldr	r3, [pc, #396]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ddc:	4a62      	ldr	r2, [pc, #392]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dde:	6912      	ldr	r2, [r2, #16]
10009de0:	2108      	movs	r1, #8
10009de2:	430a      	orrs	r2, r1
10009de4:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10009de6:	e0b8      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009de8:	4b5f      	ldr	r3, [pc, #380]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dea:	4a5f      	ldr	r2, [pc, #380]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dec:	6912      	ldr	r2, [r2, #16]
10009dee:	2110      	movs	r1, #16
10009df0:	430a      	orrs	r2, r1
10009df2:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10009df4:	e0b1      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009df6:	4b5c      	ldr	r3, [pc, #368]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009df8:	4a5b      	ldr	r2, [pc, #364]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009dfa:	6912      	ldr	r2, [r2, #16]
10009dfc:	2120      	movs	r1, #32
10009dfe:	430a      	orrs	r2, r1
10009e00:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10009e02:	e0aa      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e04:	4b58      	ldr	r3, [pc, #352]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e06:	4a58      	ldr	r2, [pc, #352]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e08:	6912      	ldr	r2, [r2, #16]
10009e0a:	2140      	movs	r1, #64	; 0x40
10009e0c:	430a      	orrs	r2, r1
10009e0e:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10009e10:	e0a3      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e12:	4b55      	ldr	r3, [pc, #340]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e14:	4a54      	ldr	r2, [pc, #336]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e16:	6912      	ldr	r2, [r2, #16]
10009e18:	2180      	movs	r1, #128	; 0x80
10009e1a:	430a      	orrs	r2, r1
10009e1c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10009e1e:	e09c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e20:	4b51      	ldr	r3, [pc, #324]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e22:	4a51      	ldr	r2, [pc, #324]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e24:	6912      	ldr	r2, [r2, #16]
10009e26:	2180      	movs	r1, #128	; 0x80
10009e28:	0049      	lsls	r1, r1, #1
10009e2a:	430a      	orrs	r2, r1
10009e2c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10009e2e:	e094      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e30:	4b4d      	ldr	r3, [pc, #308]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e32:	4a4d      	ldr	r2, [pc, #308]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e34:	6912      	ldr	r2, [r2, #16]
10009e36:	2180      	movs	r1, #128	; 0x80
10009e38:	0089      	lsls	r1, r1, #2
10009e3a:	430a      	orrs	r2, r1
10009e3c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10009e3e:	e08c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e40:	4b49      	ldr	r3, [pc, #292]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e42:	4a49      	ldr	r2, [pc, #292]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e44:	6912      	ldr	r2, [r2, #16]
10009e46:	2180      	movs	r1, #128	; 0x80
10009e48:	00c9      	lsls	r1, r1, #3
10009e4a:	430a      	orrs	r2, r1
10009e4c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009e4e:	e084      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e50:	4b45      	ldr	r3, [pc, #276]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e52:	4a45      	ldr	r2, [pc, #276]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e54:	6912      	ldr	r2, [r2, #16]
10009e56:	2180      	movs	r1, #128	; 0x80
10009e58:	0109      	lsls	r1, r1, #4
10009e5a:	430a      	orrs	r2, r1
10009e5c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009e5e:	e07c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e60:	4b41      	ldr	r3, [pc, #260]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e62:	4a41      	ldr	r2, [pc, #260]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e64:	6912      	ldr	r2, [r2, #16]
10009e66:	2180      	movs	r1, #128	; 0x80
10009e68:	0149      	lsls	r1, r1, #5
10009e6a:	430a      	orrs	r2, r1
10009e6c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009e6e:	e074      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e70:	4b3d      	ldr	r3, [pc, #244]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e72:	4a3d      	ldr	r2, [pc, #244]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e74:	6912      	ldr	r2, [r2, #16]
10009e76:	2180      	movs	r1, #128	; 0x80
10009e78:	0189      	lsls	r1, r1, #6
10009e7a:	430a      	orrs	r2, r1
10009e7c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009e7e:	e06c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e80:	4b39      	ldr	r3, [pc, #228]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e82:	4a39      	ldr	r2, [pc, #228]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e84:	6912      	ldr	r2, [r2, #16]
10009e86:	2180      	movs	r1, #128	; 0x80
10009e88:	01c9      	lsls	r1, r1, #7
10009e8a:	430a      	orrs	r2, r1
10009e8c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10009e8e:	e064      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009e90:	4b35      	ldr	r3, [pc, #212]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e92:	4a35      	ldr	r2, [pc, #212]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009e94:	6912      	ldr	r2, [r2, #16]
10009e96:	2180      	movs	r1, #128	; 0x80
10009e98:	0209      	lsls	r1, r1, #8
10009e9a:	430a      	orrs	r2, r1
10009e9c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009e9e:	e05c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009ea0:	4b31      	ldr	r3, [pc, #196]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ea2:	4a31      	ldr	r2, [pc, #196]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ea4:	6912      	ldr	r2, [r2, #16]
10009ea6:	2180      	movs	r1, #128	; 0x80
10009ea8:	0249      	lsls	r1, r1, #9
10009eaa:	430a      	orrs	r2, r1
10009eac:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009eae:	e054      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009eb0:	4b2d      	ldr	r3, [pc, #180]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009eb2:	4a2d      	ldr	r2, [pc, #180]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009eb4:	6912      	ldr	r2, [r2, #16]
10009eb6:	2180      	movs	r1, #128	; 0x80
10009eb8:	0289      	lsls	r1, r1, #10
10009eba:	430a      	orrs	r2, r1
10009ebc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009ebe:	e04c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009ec0:	4b29      	ldr	r3, [pc, #164]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ec2:	4a29      	ldr	r2, [pc, #164]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ec4:	6912      	ldr	r2, [r2, #16]
10009ec6:	2180      	movs	r1, #128	; 0x80
10009ec8:	02c9      	lsls	r1, r1, #11
10009eca:	430a      	orrs	r2, r1
10009ecc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10009ece:	e044      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009ed0:	4b25      	ldr	r3, [pc, #148]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ed2:	4a25      	ldr	r2, [pc, #148]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ed4:	6912      	ldr	r2, [r2, #16]
10009ed6:	2180      	movs	r1, #128	; 0x80
10009ed8:	0309      	lsls	r1, r1, #12
10009eda:	430a      	orrs	r2, r1
10009edc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009ede:	e03c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009ee0:	4b21      	ldr	r3, [pc, #132]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ee2:	4a21      	ldr	r2, [pc, #132]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ee4:	6912      	ldr	r2, [r2, #16]
10009ee6:	2180      	movs	r1, #128	; 0x80
10009ee8:	0349      	lsls	r1, r1, #13
10009eea:	430a      	orrs	r2, r1
10009eec:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009eee:	e034      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009ef0:	4b1d      	ldr	r3, [pc, #116]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ef2:	4a1d      	ldr	r2, [pc, #116]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009ef4:	6912      	ldr	r2, [r2, #16]
10009ef6:	2180      	movs	r1, #128	; 0x80
10009ef8:	0389      	lsls	r1, r1, #14
10009efa:	430a      	orrs	r2, r1
10009efc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009efe:	e02c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009f00:	4b19      	ldr	r3, [pc, #100]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f02:	4a19      	ldr	r2, [pc, #100]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f04:	6912      	ldr	r2, [r2, #16]
10009f06:	2180      	movs	r1, #128	; 0x80
10009f08:	03c9      	lsls	r1, r1, #15
10009f0a:	430a      	orrs	r2, r1
10009f0c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009f0e:	e024      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009f10:	4b15      	ldr	r3, [pc, #84]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f12:	4a15      	ldr	r2, [pc, #84]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f14:	6912      	ldr	r2, [r2, #16]
10009f16:	2180      	movs	r1, #128	; 0x80
10009f18:	0409      	lsls	r1, r1, #16
10009f1a:	430a      	orrs	r2, r1
10009f1c:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009f1e:	e01c      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009f20:	4a11      	ldr	r2, [pc, #68]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f22:	4b11      	ldr	r3, [pc, #68]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f24:	7d1b      	ldrb	r3, [r3, #20]
10009f26:	b2db      	uxtb	r3, r3
10009f28:	2101      	movs	r1, #1
10009f2a:	430b      	orrs	r3, r1
10009f2c:	b2db      	uxtb	r3, r3
10009f2e:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10009f30:	e013      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009f32:	4a0d      	ldr	r2, [pc, #52]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f34:	4b0c      	ldr	r3, [pc, #48]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f36:	7d1b      	ldrb	r3, [r3, #20]
10009f38:	b2db      	uxtb	r3, r3
10009f3a:	2102      	movs	r1, #2
10009f3c:	430b      	orrs	r3, r1
10009f3e:	b2db      	uxtb	r3, r3
10009f40:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10009f42:	e00a      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009f44:	4a08      	ldr	r2, [pc, #32]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f46:	4b08      	ldr	r3, [pc, #32]	; (10009f68 <system_clock_peripheral_enable+0x37c>)
10009f48:	7d1b      	ldrb	r3, [r3, #20]
10009f4a:	b2db      	uxtb	r3, r3
10009f4c:	2104      	movs	r1, #4
10009f4e:	430b      	orrs	r3, r1
10009f50:	b2db      	uxtb	r3, r3
10009f52:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10009f54:	e001      	b.n	10009f5a <system_clock_peripheral_enable+0x36e>

		default:
			return STATUS_ERR_INVALID_ARG;
10009f56:	2317      	movs	r3, #23
10009f58:	e000      	b.n	10009f5c <system_clock_peripheral_enable+0x370>
	}

	return STATUS_OK;
10009f5a:	2300      	movs	r3, #0
}
10009f5c:	1c18      	adds	r0, r3, #0
10009f5e:	46bd      	mov	sp, r7
10009f60:	b002      	add	sp, #8
10009f62:	bd80      	pop	{r7, pc}
10009f64:	10014e00 	.word	0x10014e00
10009f68:	4000b000 	.word	0x4000b000

10009f6c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009f6c:	b580      	push	{r7, lr}
10009f6e:	b082      	sub	sp, #8
10009f70:	af00      	add	r7, sp, #0
10009f72:	1c02      	adds	r2, r0, #0
10009f74:	1dfb      	adds	r3, r7, #7
10009f76:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
10009f78:	1dfb      	adds	r3, r7, #7
10009f7a:	781b      	ldrb	r3, [r3, #0]
10009f7c:	2b43      	cmp	r3, #67	; 0x43
10009f7e:	d900      	bls.n	10009f82 <system_peripheral_reset+0x16>
10009f80:	e2b2      	b.n	1000a4e8 <system_peripheral_reset+0x57c>
10009f82:	009a      	lsls	r2, r3, #2
10009f84:	4be8      	ldr	r3, [pc, #928]	; (1000a328 <system_peripheral_reset+0x3bc>)
10009f86:	18d3      	adds	r3, r2, r3
10009f88:	681b      	ldr	r3, [r3, #0]
10009f8a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009f8c:	4be7      	ldr	r3, [pc, #924]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009f8e:	4ae7      	ldr	r2, [pc, #924]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009f90:	6852      	ldr	r2, [r2, #4]
10009f92:	2102      	movs	r1, #2
10009f94:	438a      	bics	r2, r1
10009f96:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009f98:	4be4      	ldr	r3, [pc, #912]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009f9a:	4ae4      	ldr	r2, [pc, #912]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009f9c:	6852      	ldr	r2, [r2, #4]
10009f9e:	2102      	movs	r1, #2
10009fa0:	430a      	orrs	r2, r1
10009fa2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10009fa4:	e2a2      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009fa6:	4be1      	ldr	r3, [pc, #900]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fa8:	4ae0      	ldr	r2, [pc, #896]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009faa:	6852      	ldr	r2, [r2, #4]
10009fac:	2104      	movs	r1, #4
10009fae:	438a      	bics	r2, r1
10009fb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009fb2:	4bde      	ldr	r3, [pc, #888]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fb4:	4add      	ldr	r2, [pc, #884]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fb6:	6852      	ldr	r2, [r2, #4]
10009fb8:	2104      	movs	r1, #4
10009fba:	430a      	orrs	r2, r1
10009fbc:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10009fbe:	e295      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009fc0:	4bda      	ldr	r3, [pc, #872]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fc2:	4ada      	ldr	r2, [pc, #872]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fc4:	6852      	ldr	r2, [r2, #4]
10009fc6:	2108      	movs	r1, #8
10009fc8:	438a      	bics	r2, r1
10009fca:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009fcc:	4bd7      	ldr	r3, [pc, #860]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fce:	4ad7      	ldr	r2, [pc, #860]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fd0:	6852      	ldr	r2, [r2, #4]
10009fd2:	2108      	movs	r1, #8
10009fd4:	430a      	orrs	r2, r1
10009fd6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10009fd8:	e288      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009fda:	4bd4      	ldr	r3, [pc, #848]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fdc:	4ad3      	ldr	r2, [pc, #844]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fde:	6852      	ldr	r2, [r2, #4]
10009fe0:	2110      	movs	r1, #16
10009fe2:	438a      	bics	r2, r1
10009fe4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009fe6:	4bd1      	ldr	r3, [pc, #836]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fe8:	4ad0      	ldr	r2, [pc, #832]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009fea:	6852      	ldr	r2, [r2, #4]
10009fec:	2110      	movs	r1, #16
10009fee:	430a      	orrs	r2, r1
10009ff0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10009ff2:	e27b      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ff4:	4bcd      	ldr	r3, [pc, #820]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009ff6:	4acd      	ldr	r2, [pc, #820]	; (1000a32c <system_peripheral_reset+0x3c0>)
10009ff8:	6852      	ldr	r2, [r2, #4]
10009ffa:	2120      	movs	r1, #32
10009ffc:	438a      	bics	r2, r1
10009ffe:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a000:	4bca      	ldr	r3, [pc, #808]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a002:	4aca      	ldr	r2, [pc, #808]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a004:	6852      	ldr	r2, [r2, #4]
1000a006:	2120      	movs	r1, #32
1000a008:	430a      	orrs	r2, r1
1000a00a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
1000a00c:	e26e      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a00e:	4bc7      	ldr	r3, [pc, #796]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a010:	4ac6      	ldr	r2, [pc, #792]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a012:	6852      	ldr	r2, [r2, #4]
1000a014:	2140      	movs	r1, #64	; 0x40
1000a016:	438a      	bics	r2, r1
1000a018:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a01a:	4bc4      	ldr	r3, [pc, #784]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a01c:	4ac3      	ldr	r2, [pc, #780]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a01e:	6852      	ldr	r2, [r2, #4]
1000a020:	2140      	movs	r1, #64	; 0x40
1000a022:	430a      	orrs	r2, r1
1000a024:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
1000a026:	e261      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a028:	4bc0      	ldr	r3, [pc, #768]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a02a:	4ac0      	ldr	r2, [pc, #768]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a02c:	6852      	ldr	r2, [r2, #4]
1000a02e:	2180      	movs	r1, #128	; 0x80
1000a030:	438a      	bics	r2, r1
1000a032:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a034:	4bbd      	ldr	r3, [pc, #756]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a036:	4abd      	ldr	r2, [pc, #756]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a038:	6852      	ldr	r2, [r2, #4]
1000a03a:	2180      	movs	r1, #128	; 0x80
1000a03c:	430a      	orrs	r2, r1
1000a03e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
1000a040:	e254      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a042:	4bba      	ldr	r3, [pc, #744]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a044:	4ab9      	ldr	r2, [pc, #740]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a046:	6852      	ldr	r2, [r2, #4]
1000a048:	49b9      	ldr	r1, [pc, #740]	; (1000a330 <system_peripheral_reset+0x3c4>)
1000a04a:	400a      	ands	r2, r1
1000a04c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a04e:	4bb7      	ldr	r3, [pc, #732]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a050:	4ab6      	ldr	r2, [pc, #728]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a052:	6852      	ldr	r2, [r2, #4]
1000a054:	2180      	movs	r1, #128	; 0x80
1000a056:	0049      	lsls	r1, r1, #1
1000a058:	430a      	orrs	r2, r1
1000a05a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
1000a05c:	e246      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a05e:	4bb3      	ldr	r3, [pc, #716]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a060:	4ab2      	ldr	r2, [pc, #712]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a062:	6852      	ldr	r2, [r2, #4]
1000a064:	49b3      	ldr	r1, [pc, #716]	; (1000a334 <system_peripheral_reset+0x3c8>)
1000a066:	400a      	ands	r2, r1
1000a068:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a06a:	4bb0      	ldr	r3, [pc, #704]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a06c:	4aaf      	ldr	r2, [pc, #700]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a06e:	6852      	ldr	r2, [r2, #4]
1000a070:	2180      	movs	r1, #128	; 0x80
1000a072:	0089      	lsls	r1, r1, #2
1000a074:	430a      	orrs	r2, r1
1000a076:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000a078:	e238      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a07a:	4bac      	ldr	r3, [pc, #688]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a07c:	4aab      	ldr	r2, [pc, #684]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a07e:	6852      	ldr	r2, [r2, #4]
1000a080:	49ad      	ldr	r1, [pc, #692]	; (1000a338 <system_peripheral_reset+0x3cc>)
1000a082:	400a      	ands	r2, r1
1000a084:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a086:	4ba9      	ldr	r3, [pc, #676]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a088:	4aa8      	ldr	r2, [pc, #672]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a08a:	6852      	ldr	r2, [r2, #4]
1000a08c:	2180      	movs	r1, #128	; 0x80
1000a08e:	00c9      	lsls	r1, r1, #3
1000a090:	430a      	orrs	r2, r1
1000a092:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000a094:	e22a      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a096:	4ba5      	ldr	r3, [pc, #660]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a098:	4aa4      	ldr	r2, [pc, #656]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a09a:	6852      	ldr	r2, [r2, #4]
1000a09c:	49a7      	ldr	r1, [pc, #668]	; (1000a33c <system_peripheral_reset+0x3d0>)
1000a09e:	400a      	ands	r2, r1
1000a0a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a0a2:	4ba2      	ldr	r3, [pc, #648]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0a4:	4aa1      	ldr	r2, [pc, #644]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0a6:	6852      	ldr	r2, [r2, #4]
1000a0a8:	2180      	movs	r1, #128	; 0x80
1000a0aa:	0109      	lsls	r1, r1, #4
1000a0ac:	430a      	orrs	r2, r1
1000a0ae:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000a0b0:	e21c      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a0b2:	4b9e      	ldr	r3, [pc, #632]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0b4:	4a9d      	ldr	r2, [pc, #628]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0b6:	6852      	ldr	r2, [r2, #4]
1000a0b8:	49a1      	ldr	r1, [pc, #644]	; (1000a340 <system_peripheral_reset+0x3d4>)
1000a0ba:	400a      	ands	r2, r1
1000a0bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a0be:	4b9b      	ldr	r3, [pc, #620]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0c0:	4a9a      	ldr	r2, [pc, #616]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0c2:	6852      	ldr	r2, [r2, #4]
1000a0c4:	2180      	movs	r1, #128	; 0x80
1000a0c6:	0149      	lsls	r1, r1, #5
1000a0c8:	430a      	orrs	r2, r1
1000a0ca:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000a0cc:	e20e      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a0ce:	4b97      	ldr	r3, [pc, #604]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0d0:	4a96      	ldr	r2, [pc, #600]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0d2:	6852      	ldr	r2, [r2, #4]
1000a0d4:	499b      	ldr	r1, [pc, #620]	; (1000a344 <system_peripheral_reset+0x3d8>)
1000a0d6:	400a      	ands	r2, r1
1000a0d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a0da:	4b94      	ldr	r3, [pc, #592]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0dc:	4a93      	ldr	r2, [pc, #588]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0de:	6852      	ldr	r2, [r2, #4]
1000a0e0:	2180      	movs	r1, #128	; 0x80
1000a0e2:	0189      	lsls	r1, r1, #6
1000a0e4:	430a      	orrs	r2, r1
1000a0e6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
1000a0e8:	e200      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a0ea:	4b90      	ldr	r3, [pc, #576]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0ec:	4a8f      	ldr	r2, [pc, #572]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0ee:	6852      	ldr	r2, [r2, #4]
1000a0f0:	4995      	ldr	r1, [pc, #596]	; (1000a348 <system_peripheral_reset+0x3dc>)
1000a0f2:	400a      	ands	r2, r1
1000a0f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a0f6:	4b8d      	ldr	r3, [pc, #564]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0f8:	4a8c      	ldr	r2, [pc, #560]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a0fa:	6852      	ldr	r2, [r2, #4]
1000a0fc:	2180      	movs	r1, #128	; 0x80
1000a0fe:	01c9      	lsls	r1, r1, #7
1000a100:	430a      	orrs	r2, r1
1000a102:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
1000a104:	e1f2      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a106:	4b89      	ldr	r3, [pc, #548]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a108:	4a88      	ldr	r2, [pc, #544]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a10a:	6852      	ldr	r2, [r2, #4]
1000a10c:	498f      	ldr	r1, [pc, #572]	; (1000a34c <system_peripheral_reset+0x3e0>)
1000a10e:	400a      	ands	r2, r1
1000a110:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a112:	4b86      	ldr	r3, [pc, #536]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a114:	4a85      	ldr	r2, [pc, #532]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a116:	6852      	ldr	r2, [r2, #4]
1000a118:	2180      	movs	r1, #128	; 0x80
1000a11a:	0209      	lsls	r1, r1, #8
1000a11c:	430a      	orrs	r2, r1
1000a11e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000a120:	e1e4      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a122:	4b82      	ldr	r3, [pc, #520]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a124:	4a81      	ldr	r2, [pc, #516]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a126:	6852      	ldr	r2, [r2, #4]
1000a128:	4989      	ldr	r1, [pc, #548]	; (1000a350 <system_peripheral_reset+0x3e4>)
1000a12a:	400a      	ands	r2, r1
1000a12c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a12e:	4b7f      	ldr	r3, [pc, #508]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a130:	4a7e      	ldr	r2, [pc, #504]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a132:	6852      	ldr	r2, [r2, #4]
1000a134:	2180      	movs	r1, #128	; 0x80
1000a136:	0249      	lsls	r1, r1, #9
1000a138:	430a      	orrs	r2, r1
1000a13a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
1000a13c:	e1d6      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a13e:	4b7b      	ldr	r3, [pc, #492]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a140:	4a7a      	ldr	r2, [pc, #488]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a142:	6852      	ldr	r2, [r2, #4]
1000a144:	4983      	ldr	r1, [pc, #524]	; (1000a354 <system_peripheral_reset+0x3e8>)
1000a146:	400a      	ands	r2, r1
1000a148:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a14a:	4b78      	ldr	r3, [pc, #480]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a14c:	4a77      	ldr	r2, [pc, #476]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a14e:	6852      	ldr	r2, [r2, #4]
1000a150:	2180      	movs	r1, #128	; 0x80
1000a152:	0289      	lsls	r1, r1, #10
1000a154:	430a      	orrs	r2, r1
1000a156:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
1000a158:	e1c8      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a15a:	4b74      	ldr	r3, [pc, #464]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a15c:	4a73      	ldr	r2, [pc, #460]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a15e:	6852      	ldr	r2, [r2, #4]
1000a160:	497d      	ldr	r1, [pc, #500]	; (1000a358 <system_peripheral_reset+0x3ec>)
1000a162:	400a      	ands	r2, r1
1000a164:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a166:	4b71      	ldr	r3, [pc, #452]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a168:	4a70      	ldr	r2, [pc, #448]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a16a:	6852      	ldr	r2, [r2, #4]
1000a16c:	2180      	movs	r1, #128	; 0x80
1000a16e:	02c9      	lsls	r1, r1, #11
1000a170:	430a      	orrs	r2, r1
1000a172:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000a174:	e1ba      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a176:	4b6d      	ldr	r3, [pc, #436]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a178:	4a6c      	ldr	r2, [pc, #432]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a17a:	6852      	ldr	r2, [r2, #4]
1000a17c:	4977      	ldr	r1, [pc, #476]	; (1000a35c <system_peripheral_reset+0x3f0>)
1000a17e:	400a      	ands	r2, r1
1000a180:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a182:	4b6a      	ldr	r3, [pc, #424]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a184:	4a69      	ldr	r2, [pc, #420]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a186:	6852      	ldr	r2, [r2, #4]
1000a188:	2180      	movs	r1, #128	; 0x80
1000a18a:	0309      	lsls	r1, r1, #12
1000a18c:	430a      	orrs	r2, r1
1000a18e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000a190:	e1ac      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a192:	4b66      	ldr	r3, [pc, #408]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a194:	4a65      	ldr	r2, [pc, #404]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a196:	6852      	ldr	r2, [r2, #4]
1000a198:	4971      	ldr	r1, [pc, #452]	; (1000a360 <system_peripheral_reset+0x3f4>)
1000a19a:	400a      	ands	r2, r1
1000a19c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a19e:	4b63      	ldr	r3, [pc, #396]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1a0:	4a62      	ldr	r2, [pc, #392]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1a2:	6852      	ldr	r2, [r2, #4]
1000a1a4:	2180      	movs	r1, #128	; 0x80
1000a1a6:	0349      	lsls	r1, r1, #13
1000a1a8:	430a      	orrs	r2, r1
1000a1aa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000a1ac:	e19e      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a1ae:	4b5f      	ldr	r3, [pc, #380]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1b0:	4a5e      	ldr	r2, [pc, #376]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1b2:	6852      	ldr	r2, [r2, #4]
1000a1b4:	496b      	ldr	r1, [pc, #428]	; (1000a364 <system_peripheral_reset+0x3f8>)
1000a1b6:	400a      	ands	r2, r1
1000a1b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a1ba:	4b5c      	ldr	r3, [pc, #368]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1bc:	4a5b      	ldr	r2, [pc, #364]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1be:	6852      	ldr	r2, [r2, #4]
1000a1c0:	2180      	movs	r1, #128	; 0x80
1000a1c2:	0389      	lsls	r1, r1, #14
1000a1c4:	430a      	orrs	r2, r1
1000a1c6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000a1c8:	e190      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a1ca:	4b58      	ldr	r3, [pc, #352]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1cc:	4a57      	ldr	r2, [pc, #348]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1ce:	6852      	ldr	r2, [r2, #4]
1000a1d0:	4965      	ldr	r1, [pc, #404]	; (1000a368 <system_peripheral_reset+0x3fc>)
1000a1d2:	400a      	ands	r2, r1
1000a1d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a1d6:	4b55      	ldr	r3, [pc, #340]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1d8:	4a54      	ldr	r2, [pc, #336]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1da:	6852      	ldr	r2, [r2, #4]
1000a1dc:	2180      	movs	r1, #128	; 0x80
1000a1de:	03c9      	lsls	r1, r1, #15
1000a1e0:	430a      	orrs	r2, r1
1000a1e2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000a1e4:	e182      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a1e6:	4b51      	ldr	r3, [pc, #324]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1e8:	4a50      	ldr	r2, [pc, #320]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1ea:	6852      	ldr	r2, [r2, #4]
1000a1ec:	495f      	ldr	r1, [pc, #380]	; (1000a36c <system_peripheral_reset+0x400>)
1000a1ee:	400a      	ands	r2, r1
1000a1f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a1f2:	4b4e      	ldr	r3, [pc, #312]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1f4:	4a4d      	ldr	r2, [pc, #308]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a1f6:	6852      	ldr	r2, [r2, #4]
1000a1f8:	2180      	movs	r1, #128	; 0x80
1000a1fa:	0409      	lsls	r1, r1, #16
1000a1fc:	430a      	orrs	r2, r1
1000a1fe:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000a200:	e174      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a202:	4b4a      	ldr	r3, [pc, #296]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a204:	4a49      	ldr	r2, [pc, #292]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a206:	6852      	ldr	r2, [r2, #4]
1000a208:	4959      	ldr	r1, [pc, #356]	; (1000a370 <system_peripheral_reset+0x404>)
1000a20a:	400a      	ands	r2, r1
1000a20c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a20e:	4b47      	ldr	r3, [pc, #284]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a210:	4a46      	ldr	r2, [pc, #280]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a212:	6852      	ldr	r2, [r2, #4]
1000a214:	2180      	movs	r1, #128	; 0x80
1000a216:	0449      	lsls	r1, r1, #17
1000a218:	430a      	orrs	r2, r1
1000a21a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000a21c:	e166      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a21e:	4b43      	ldr	r3, [pc, #268]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a220:	4a42      	ldr	r2, [pc, #264]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a222:	6852      	ldr	r2, [r2, #4]
1000a224:	4953      	ldr	r1, [pc, #332]	; (1000a374 <system_peripheral_reset+0x408>)
1000a226:	400a      	ands	r2, r1
1000a228:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a22a:	4b40      	ldr	r3, [pc, #256]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a22c:	4a3f      	ldr	r2, [pc, #252]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a22e:	6852      	ldr	r2, [r2, #4]
1000a230:	2180      	movs	r1, #128	; 0x80
1000a232:	0489      	lsls	r1, r1, #18
1000a234:	430a      	orrs	r2, r1
1000a236:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
1000a238:	e158      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a23a:	4b3c      	ldr	r3, [pc, #240]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a23c:	4a3b      	ldr	r2, [pc, #236]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a23e:	6852      	ldr	r2, [r2, #4]
1000a240:	494d      	ldr	r1, [pc, #308]	; (1000a378 <system_peripheral_reset+0x40c>)
1000a242:	400a      	ands	r2, r1
1000a244:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a246:	4b39      	ldr	r3, [pc, #228]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a248:	4a38      	ldr	r2, [pc, #224]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a24a:	6852      	ldr	r2, [r2, #4]
1000a24c:	2180      	movs	r1, #128	; 0x80
1000a24e:	04c9      	lsls	r1, r1, #19
1000a250:	430a      	orrs	r2, r1
1000a252:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
1000a254:	e14a      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a256:	4b35      	ldr	r3, [pc, #212]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a258:	4a34      	ldr	r2, [pc, #208]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a25a:	6852      	ldr	r2, [r2, #4]
1000a25c:	4947      	ldr	r1, [pc, #284]	; (1000a37c <system_peripheral_reset+0x410>)
1000a25e:	400a      	ands	r2, r1
1000a260:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a262:	4b32      	ldr	r3, [pc, #200]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a264:	4a31      	ldr	r2, [pc, #196]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a266:	6852      	ldr	r2, [r2, #4]
1000a268:	2180      	movs	r1, #128	; 0x80
1000a26a:	0509      	lsls	r1, r1, #20
1000a26c:	430a      	orrs	r2, r1
1000a26e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
1000a270:	e13c      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a272:	4b2e      	ldr	r3, [pc, #184]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a274:	4a2d      	ldr	r2, [pc, #180]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a276:	6852      	ldr	r2, [r2, #4]
1000a278:	4941      	ldr	r1, [pc, #260]	; (1000a380 <system_peripheral_reset+0x414>)
1000a27a:	400a      	ands	r2, r1
1000a27c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a27e:	4b2b      	ldr	r3, [pc, #172]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a280:	4a2a      	ldr	r2, [pc, #168]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a282:	6852      	ldr	r2, [r2, #4]
1000a284:	2180      	movs	r1, #128	; 0x80
1000a286:	0549      	lsls	r1, r1, #21
1000a288:	430a      	orrs	r2, r1
1000a28a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
1000a28c:	e12e      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a28e:	4b27      	ldr	r3, [pc, #156]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a290:	4a26      	ldr	r2, [pc, #152]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a292:	6852      	ldr	r2, [r2, #4]
1000a294:	493b      	ldr	r1, [pc, #236]	; (1000a384 <system_peripheral_reset+0x418>)
1000a296:	400a      	ands	r2, r1
1000a298:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a29a:	4b24      	ldr	r3, [pc, #144]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a29c:	4a23      	ldr	r2, [pc, #140]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a29e:	6852      	ldr	r2, [r2, #4]
1000a2a0:	2180      	movs	r1, #128	; 0x80
1000a2a2:	0589      	lsls	r1, r1, #22
1000a2a4:	430a      	orrs	r2, r1
1000a2a6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
1000a2a8:	e120      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a2aa:	4b20      	ldr	r3, [pc, #128]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2ac:	4a1f      	ldr	r2, [pc, #124]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2ae:	6852      	ldr	r2, [r2, #4]
1000a2b0:	4935      	ldr	r1, [pc, #212]	; (1000a388 <system_peripheral_reset+0x41c>)
1000a2b2:	400a      	ands	r2, r1
1000a2b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a2b6:	4b1d      	ldr	r3, [pc, #116]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2b8:	4a1c      	ldr	r2, [pc, #112]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2ba:	6852      	ldr	r2, [r2, #4]
1000a2bc:	2180      	movs	r1, #128	; 0x80
1000a2be:	05c9      	lsls	r1, r1, #23
1000a2c0:	430a      	orrs	r2, r1
1000a2c2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
1000a2c4:	e112      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000a2c6:	4b19      	ldr	r3, [pc, #100]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2c8:	4a18      	ldr	r2, [pc, #96]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2ca:	6852      	ldr	r2, [r2, #4]
1000a2cc:	0052      	lsls	r2, r2, #1
1000a2ce:	0852      	lsrs	r2, r2, #1
1000a2d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000a2d2:	4b16      	ldr	r3, [pc, #88]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2d4:	4a15      	ldr	r2, [pc, #84]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2d6:	6852      	ldr	r2, [r2, #4]
1000a2d8:	2180      	movs	r1, #128	; 0x80
1000a2da:	0609      	lsls	r1, r1, #24
1000a2dc:	430a      	orrs	r2, r1
1000a2de:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000a2e0:	e104      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a2e2:	4a12      	ldr	r2, [pc, #72]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2e4:	4b11      	ldr	r3, [pc, #68]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2e6:	891b      	ldrh	r3, [r3, #8]
1000a2e8:	b29b      	uxth	r3, r3
1000a2ea:	2101      	movs	r1, #1
1000a2ec:	438b      	bics	r3, r1
1000a2ee:	b29b      	uxth	r3, r3
1000a2f0:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a2f2:	4a0e      	ldr	r2, [pc, #56]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2f4:	4b0d      	ldr	r3, [pc, #52]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a2f6:	891b      	ldrh	r3, [r3, #8]
1000a2f8:	b29b      	uxth	r3, r3
1000a2fa:	2101      	movs	r1, #1
1000a2fc:	430b      	orrs	r3, r1
1000a2fe:	b29b      	uxth	r3, r3
1000a300:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
1000a302:	e0f3      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a304:	4a09      	ldr	r2, [pc, #36]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a306:	4b09      	ldr	r3, [pc, #36]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a308:	891b      	ldrh	r3, [r3, #8]
1000a30a:	b29b      	uxth	r3, r3
1000a30c:	2102      	movs	r1, #2
1000a30e:	438b      	bics	r3, r1
1000a310:	b29b      	uxth	r3, r3
1000a312:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a314:	4a05      	ldr	r2, [pc, #20]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a316:	4b05      	ldr	r3, [pc, #20]	; (1000a32c <system_peripheral_reset+0x3c0>)
1000a318:	891b      	ldrh	r3, [r3, #8]
1000a31a:	b29b      	uxth	r3, r3
1000a31c:	2102      	movs	r1, #2
1000a31e:	430b      	orrs	r3, r1
1000a320:	b29b      	uxth	r3, r3
1000a322:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
1000a324:	e0e2      	b.n	1000a4ec <system_peripheral_reset+0x580>
1000a326:	46c0      	nop			; (mov r8, r8)
1000a328:	10014ed8 	.word	0x10014ed8
1000a32c:	4000b000 	.word	0x4000b000
1000a330:	fffffeff 	.word	0xfffffeff
1000a334:	fffffdff 	.word	0xfffffdff
1000a338:	fffffbff 	.word	0xfffffbff
1000a33c:	fffff7ff 	.word	0xfffff7ff
1000a340:	ffffefff 	.word	0xffffefff
1000a344:	ffffdfff 	.word	0xffffdfff
1000a348:	ffffbfff 	.word	0xffffbfff
1000a34c:	ffff7fff 	.word	0xffff7fff
1000a350:	fffeffff 	.word	0xfffeffff
1000a354:	fffdffff 	.word	0xfffdffff
1000a358:	fffbffff 	.word	0xfffbffff
1000a35c:	fff7ffff 	.word	0xfff7ffff
1000a360:	ffefffff 	.word	0xffefffff
1000a364:	ffdfffff 	.word	0xffdfffff
1000a368:	ffbfffff 	.word	0xffbfffff
1000a36c:	ff7fffff 	.word	0xff7fffff
1000a370:	feffffff 	.word	0xfeffffff
1000a374:	fdffffff 	.word	0xfdffffff
1000a378:	fbffffff 	.word	0xfbffffff
1000a37c:	f7ffffff 	.word	0xf7ffffff
1000a380:	efffffff 	.word	0xefffffff
1000a384:	dfffffff 	.word	0xdfffffff
1000a388:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a38c:	4a5a      	ldr	r2, [pc, #360]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a38e:	4b5a      	ldr	r3, [pc, #360]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a390:	891b      	ldrh	r3, [r3, #8]
1000a392:	b29b      	uxth	r3, r3
1000a394:	2104      	movs	r1, #4
1000a396:	438b      	bics	r3, r1
1000a398:	b29b      	uxth	r3, r3
1000a39a:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a39c:	4a56      	ldr	r2, [pc, #344]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a39e:	4b56      	ldr	r3, [pc, #344]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3a0:	891b      	ldrh	r3, [r3, #8]
1000a3a2:	b29b      	uxth	r3, r3
1000a3a4:	2104      	movs	r1, #4
1000a3a6:	430b      	orrs	r3, r1
1000a3a8:	b29b      	uxth	r3, r3
1000a3aa:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
1000a3ac:	e09e      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a3ae:	4a52      	ldr	r2, [pc, #328]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3b0:	4b51      	ldr	r3, [pc, #324]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3b2:	891b      	ldrh	r3, [r3, #8]
1000a3b4:	b29b      	uxth	r3, r3
1000a3b6:	2108      	movs	r1, #8
1000a3b8:	438b      	bics	r3, r1
1000a3ba:	b29b      	uxth	r3, r3
1000a3bc:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a3be:	4a4e      	ldr	r2, [pc, #312]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3c0:	4b4d      	ldr	r3, [pc, #308]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3c2:	891b      	ldrh	r3, [r3, #8]
1000a3c4:	b29b      	uxth	r3, r3
1000a3c6:	2108      	movs	r1, #8
1000a3c8:	430b      	orrs	r3, r1
1000a3ca:	b29b      	uxth	r3, r3
1000a3cc:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000a3ce:	e08d      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a3d0:	4a49      	ldr	r2, [pc, #292]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3d2:	4b49      	ldr	r3, [pc, #292]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3d4:	891b      	ldrh	r3, [r3, #8]
1000a3d6:	b29b      	uxth	r3, r3
1000a3d8:	2110      	movs	r1, #16
1000a3da:	438b      	bics	r3, r1
1000a3dc:	b29b      	uxth	r3, r3
1000a3de:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a3e0:	4a45      	ldr	r2, [pc, #276]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3e2:	4b45      	ldr	r3, [pc, #276]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3e4:	891b      	ldrh	r3, [r3, #8]
1000a3e6:	b29b      	uxth	r3, r3
1000a3e8:	2110      	movs	r1, #16
1000a3ea:	430b      	orrs	r3, r1
1000a3ec:	b29b      	uxth	r3, r3
1000a3ee:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000a3f0:	e07c      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a3f2:	4a41      	ldr	r2, [pc, #260]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3f4:	4b40      	ldr	r3, [pc, #256]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a3f6:	891b      	ldrh	r3, [r3, #8]
1000a3f8:	b29b      	uxth	r3, r3
1000a3fa:	2120      	movs	r1, #32
1000a3fc:	438b      	bics	r3, r1
1000a3fe:	b29b      	uxth	r3, r3
1000a400:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a402:	4a3d      	ldr	r2, [pc, #244]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a404:	4b3c      	ldr	r3, [pc, #240]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a406:	891b      	ldrh	r3, [r3, #8]
1000a408:	b29b      	uxth	r3, r3
1000a40a:	2120      	movs	r1, #32
1000a40c:	430b      	orrs	r3, r1
1000a40e:	b29b      	uxth	r3, r3
1000a410:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000a412:	e06b      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a414:	4a38      	ldr	r2, [pc, #224]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a416:	4b38      	ldr	r3, [pc, #224]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a418:	891b      	ldrh	r3, [r3, #8]
1000a41a:	b29b      	uxth	r3, r3
1000a41c:	2140      	movs	r1, #64	; 0x40
1000a41e:	438b      	bics	r3, r1
1000a420:	b29b      	uxth	r3, r3
1000a422:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a424:	4a34      	ldr	r2, [pc, #208]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a426:	4b34      	ldr	r3, [pc, #208]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a428:	891b      	ldrh	r3, [r3, #8]
1000a42a:	b29b      	uxth	r3, r3
1000a42c:	2140      	movs	r1, #64	; 0x40
1000a42e:	430b      	orrs	r3, r1
1000a430:	b29b      	uxth	r3, r3
1000a432:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000a434:	e05a      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a436:	4a30      	ldr	r2, [pc, #192]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a438:	4b2f      	ldr	r3, [pc, #188]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a43a:	891b      	ldrh	r3, [r3, #8]
1000a43c:	b29b      	uxth	r3, r3
1000a43e:	2180      	movs	r1, #128	; 0x80
1000a440:	438b      	bics	r3, r1
1000a442:	b29b      	uxth	r3, r3
1000a444:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a446:	4a2c      	ldr	r2, [pc, #176]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a448:	4b2b      	ldr	r3, [pc, #172]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a44a:	891b      	ldrh	r3, [r3, #8]
1000a44c:	b29b      	uxth	r3, r3
1000a44e:	2180      	movs	r1, #128	; 0x80
1000a450:	430b      	orrs	r3, r1
1000a452:	b29b      	uxth	r3, r3
1000a454:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000a456:	e049      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a458:	4a27      	ldr	r2, [pc, #156]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a45a:	4b27      	ldr	r3, [pc, #156]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a45c:	891b      	ldrh	r3, [r3, #8]
1000a45e:	b29b      	uxth	r3, r3
1000a460:	4926      	ldr	r1, [pc, #152]	; (1000a4fc <system_peripheral_reset+0x590>)
1000a462:	400b      	ands	r3, r1
1000a464:	b29b      	uxth	r3, r3
1000a466:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a468:	4923      	ldr	r1, [pc, #140]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a46a:	4b23      	ldr	r3, [pc, #140]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a46c:	891b      	ldrh	r3, [r3, #8]
1000a46e:	b29b      	uxth	r3, r3
1000a470:	2280      	movs	r2, #128	; 0x80
1000a472:	0052      	lsls	r2, r2, #1
1000a474:	4313      	orrs	r3, r2
1000a476:	b29b      	uxth	r3, r3
1000a478:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
1000a47a:	e037      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a47c:	4a1e      	ldr	r2, [pc, #120]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a47e:	4b1e      	ldr	r3, [pc, #120]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a480:	891b      	ldrh	r3, [r3, #8]
1000a482:	b29b      	uxth	r3, r3
1000a484:	491e      	ldr	r1, [pc, #120]	; (1000a500 <system_peripheral_reset+0x594>)
1000a486:	400b      	ands	r3, r1
1000a488:	b29b      	uxth	r3, r3
1000a48a:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a48c:	491a      	ldr	r1, [pc, #104]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a48e:	4b1a      	ldr	r3, [pc, #104]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a490:	891b      	ldrh	r3, [r3, #8]
1000a492:	b29b      	uxth	r3, r3
1000a494:	2280      	movs	r2, #128	; 0x80
1000a496:	0092      	lsls	r2, r2, #2
1000a498:	4313      	orrs	r3, r2
1000a49a:	b29b      	uxth	r3, r3
1000a49c:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000a49e:	e025      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a4a0:	4a15      	ldr	r2, [pc, #84]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4a2:	4b15      	ldr	r3, [pc, #84]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4a4:	891b      	ldrh	r3, [r3, #8]
1000a4a6:	b29b      	uxth	r3, r3
1000a4a8:	4916      	ldr	r1, [pc, #88]	; (1000a504 <system_peripheral_reset+0x598>)
1000a4aa:	400b      	ands	r3, r1
1000a4ac:	b29b      	uxth	r3, r3
1000a4ae:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a4b0:	4911      	ldr	r1, [pc, #68]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4b2:	4b11      	ldr	r3, [pc, #68]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4b4:	891b      	ldrh	r3, [r3, #8]
1000a4b6:	b29b      	uxth	r3, r3
1000a4b8:	2280      	movs	r2, #128	; 0x80
1000a4ba:	00d2      	lsls	r2, r2, #3
1000a4bc:	4313      	orrs	r3, r2
1000a4be:	b29b      	uxth	r3, r3
1000a4c0:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000a4c2:	e013      	b.n	1000a4ec <system_peripheral_reset+0x580>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000a4c4:	4a0c      	ldr	r2, [pc, #48]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4c6:	4b0c      	ldr	r3, [pc, #48]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4c8:	891b      	ldrh	r3, [r3, #8]
1000a4ca:	b29b      	uxth	r3, r3
1000a4cc:	490e      	ldr	r1, [pc, #56]	; (1000a508 <system_peripheral_reset+0x59c>)
1000a4ce:	400b      	ands	r3, r1
1000a4d0:	b29b      	uxth	r3, r3
1000a4d2:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000a4d4:	4908      	ldr	r1, [pc, #32]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4d6:	4b08      	ldr	r3, [pc, #32]	; (1000a4f8 <system_peripheral_reset+0x58c>)
1000a4d8:	891b      	ldrh	r3, [r3, #8]
1000a4da:	b29b      	uxth	r3, r3
1000a4dc:	2280      	movs	r2, #128	; 0x80
1000a4de:	0112      	lsls	r2, r2, #4
1000a4e0:	4313      	orrs	r3, r2
1000a4e2:	b29b      	uxth	r3, r3
1000a4e4:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
1000a4e6:	e001      	b.n	1000a4ec <system_peripheral_reset+0x580>

		default:
			return STATUS_ERR_INVALID_ARG;
1000a4e8:	2317      	movs	r3, #23
1000a4ea:	e000      	b.n	1000a4ee <system_peripheral_reset+0x582>
	}

	return STATUS_OK;
1000a4ec:	2300      	movs	r3, #0
}
1000a4ee:	1c18      	adds	r0, r3, #0
1000a4f0:	46bd      	mov	sp, r7
1000a4f2:	b002      	add	sp, #8
1000a4f4:	bd80      	pop	{r7, pc}
1000a4f6:	46c0      	nop			; (mov r8, r8)
1000a4f8:	4000b000 	.word	0x4000b000
1000a4fc:	fffffeff 	.word	0xfffffeff
1000a500:	fffffdff 	.word	0xfffffdff
1000a504:	fffffbff 	.word	0xfffffbff
1000a508:	fffff7ff 	.word	0xfffff7ff

1000a50c <system_register_isr>:
 * \param[in] isr_address Address of the ISR
 *
 */
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
1000a50c:	b580      	push	{r7, lr}
1000a50e:	b084      	sub	sp, #16
1000a510:	af00      	add	r7, sp, #0
1000a512:	1c02      	adds	r2, r0, #0
1000a514:	6039      	str	r1, [r7, #0]
1000a516:	1dfb      	adds	r3, r7, #7
1000a518:	701a      	strb	r2, [r3, #0]
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
1000a51a:	1dfb      	adds	r3, r7, #7
1000a51c:	781b      	ldrb	r3, [r3, #0]
1000a51e:	2280      	movs	r2, #128	; 0x80
1000a520:	04d2      	lsls	r2, r2, #19
1000a522:	4694      	mov	ip, r2
1000a524:	4463      	add	r3, ip
1000a526:	009b      	lsls	r3, r3, #2
1000a528:	60fb      	str	r3, [r7, #12]
	*temp = isr_address;
1000a52a:	68fb      	ldr	r3, [r7, #12]
1000a52c:	683a      	ldr	r2, [r7, #0]
1000a52e:	601a      	str	r2, [r3, #0]
}
1000a530:	46bd      	mov	sp, r7
1000a532:	b004      	add	sp, #16
1000a534:	bd80      	pop	{r7, pc}
1000a536:	46c0      	nop			; (mov r8, r8)

1000a538 <timer_get_config_defaults>:
 *  \li Set relaod value as 0
 *
 * \param[out]  config  Pointer to a TIMER module configuration structure to set
 */
void timer_get_config_defaults(struct timer_config *config)
{
1000a538:	b580      	push	{r7, lr}
1000a53a:	b082      	sub	sp, #8
1000a53c:	af00      	add	r7, sp, #0
1000a53e:	6078      	str	r0, [r7, #4]
	config->reload_value = 0;
1000a540:	687b      	ldr	r3, [r7, #4]
1000a542:	2200      	movs	r2, #0
1000a544:	601a      	str	r2, [r3, #0]
	config->interrupt_enable = true;
1000a546:	687b      	ldr	r3, [r7, #4]
1000a548:	2201      	movs	r2, #1
1000a54a:	711a      	strb	r2, [r3, #4]
}
1000a54c:	46bd      	mov	sp, r7
1000a54e:	b002      	add	sp, #8
1000a550:	bd80      	pop	{r7, pc}
1000a552:	46c0      	nop			; (mov r8, r8)

1000a554 <timer_set_value>:
 * \brief Set TIMER0 module value.
 *
 * \param[in]     value        Reload value
 */
void timer_set_value(uint32_t value)
{
1000a554:	b580      	push	{r7, lr}
1000a556:	b082      	sub	sp, #8
1000a558:	af00      	add	r7, sp, #0
1000a55a:	6078      	str	r0, [r7, #4]
	TIMER0->RELOAD.reg = value;
1000a55c:	2380      	movs	r3, #128	; 0x80
1000a55e:	05db      	lsls	r3, r3, #23
1000a560:	687a      	ldr	r2, [r7, #4]
1000a562:	609a      	str	r2, [r3, #8]
}
1000a564:	46bd      	mov	sp, r7
1000a566:	b002      	add	sp, #8
1000a568:	bd80      	pop	{r7, pc}
1000a56a:	46c0      	nop			; (mov r8, r8)

1000a56c <timer_get_interrupt_status>:
 * \brief Get TIMER0 module interrupt status
 *
 * \retval The status of module
 */
uint32_t timer_get_interrupt_status(void)
{
1000a56c:	b580      	push	{r7, lr}
1000a56e:	af00      	add	r7, sp, #0
	return TIMER0->INTSTATUSCLEAR.reg;
1000a570:	2380      	movs	r3, #128	; 0x80
1000a572:	05db      	lsls	r3, r3, #23
1000a574:	7b1b      	ldrb	r3, [r3, #12]
1000a576:	b2db      	uxtb	r3, r3
}
1000a578:	1c18      	adds	r0, r3, #0
1000a57a:	46bd      	mov	sp, r7
1000a57c:	bd80      	pop	{r7, pc}
1000a57e:	46c0      	nop			; (mov r8, r8)

1000a580 <timer_clear_interrupt_status>:
 * \brief Clear TIMER0 module interrupt status
 *
 * Clear the TIMER0 module interrupt status
 */
void timer_clear_interrupt_status(void)
{
1000a580:	b580      	push	{r7, lr}
1000a582:	af00      	add	r7, sp, #0
	TIMER0->INTSTATUSCLEAR.reg = 1;
1000a584:	2380      	movs	r3, #128	; 0x80
1000a586:	05db      	lsls	r3, r3, #23
1000a588:	2201      	movs	r2, #1
1000a58a:	731a      	strb	r2, [r3, #12]
	/* Wait for operation finish */
	while (TIMER0->INTSTATUSCLEAR.reg);
1000a58c:	46c0      	nop			; (mov r8, r8)
1000a58e:	2380      	movs	r3, #128	; 0x80
1000a590:	05db      	lsls	r3, r3, #23
1000a592:	7b1b      	ldrb	r3, [r3, #12]
1000a594:	b2db      	uxtb	r3, r3
1000a596:	2b00      	cmp	r3, #0
1000a598:	d1f9      	bne.n	1000a58e <timer_clear_interrupt_status+0xe>
}
1000a59a:	46bd      	mov	sp, r7
1000a59c:	bd80      	pop	{r7, pc}
1000a59e:	46c0      	nop			; (mov r8, r8)

1000a5a0 <timer_enable>:
 * \brief Set TIMER0 module enable
 *
 * Enable the TIMER0 module
 */
void timer_enable(void)
{
1000a5a0:	b580      	push	{r7, lr}
1000a5a2:	af00      	add	r7, sp, #0
	TIMER0->CTRL.reg |= TIMER_CTRL_ENABLE;
1000a5a4:	2380      	movs	r3, #128	; 0x80
1000a5a6:	05db      	lsls	r3, r3, #23
1000a5a8:	2280      	movs	r2, #128	; 0x80
1000a5aa:	05d2      	lsls	r2, r2, #23
1000a5ac:	7812      	ldrb	r2, [r2, #0]
1000a5ae:	b2d2      	uxtb	r2, r2
1000a5b0:	2101      	movs	r1, #1
1000a5b2:	430a      	orrs	r2, r1
1000a5b4:	b2d2      	uxtb	r2, r2
1000a5b6:	701a      	strb	r2, [r3, #0]
}
1000a5b8:	46bd      	mov	sp, r7
1000a5ba:	bd80      	pop	{r7, pc}

1000a5bc <timer_disable>:
 * \brief Set TIMER0 disable
 *
 * Disable the TIMER0 module
 */
void timer_disable(void)
{
1000a5bc:	b580      	push	{r7, lr}
1000a5be:	af00      	add	r7, sp, #0
	TIMER0->CTRL.reg &= (~TIMER_CTRL_ENABLE);
1000a5c0:	2380      	movs	r3, #128	; 0x80
1000a5c2:	05db      	lsls	r3, r3, #23
1000a5c4:	2280      	movs	r2, #128	; 0x80
1000a5c6:	05d2      	lsls	r2, r2, #23
1000a5c8:	7812      	ldrb	r2, [r2, #0]
1000a5ca:	b2d2      	uxtb	r2, r2
1000a5cc:	2101      	movs	r1, #1
1000a5ce:	438a      	bics	r2, r1
1000a5d0:	b2d2      	uxtb	r2, r2
1000a5d2:	701a      	strb	r2, [r3, #0]
}
1000a5d4:	46bd      	mov	sp, r7
1000a5d6:	bd80      	pop	{r7, pc}

1000a5d8 <timer_register_callback>:
 * Registers and enable a callback function which is implemented by the user.
 *
 * \param[in]     callback_func Pointer to callback function
 */
void timer_register_callback(timer_callback_t fun)
{
1000a5d8:	b580      	push	{r7, lr}
1000a5da:	b082      	sub	sp, #8
1000a5dc:	af00      	add	r7, sp, #0
1000a5de:	6078      	str	r0, [r7, #4]
	timer_callback = fun; 
1000a5e0:	4b02      	ldr	r3, [pc, #8]	; (1000a5ec <timer_register_callback+0x14>)
1000a5e2:	687a      	ldr	r2, [r7, #4]
1000a5e4:	601a      	str	r2, [r3, #0]
}
1000a5e6:	46bd      	mov	sp, r7
1000a5e8:	b002      	add	sp, #8
1000a5ea:	bd80      	pop	{r7, pc}
1000a5ec:	100161ec 	.word	0x100161ec

1000a5f0 <timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
1000a5f0:	b580      	push	{r7, lr}
1000a5f2:	af00      	add	r7, sp, #0
	if (timer_get_interrupt_status()) {
1000a5f4:	4b07      	ldr	r3, [pc, #28]	; (1000a614 <timer_isr_handler+0x24>)
1000a5f6:	4798      	blx	r3
1000a5f8:	1e03      	subs	r3, r0, #0
1000a5fa:	d008      	beq.n	1000a60e <timer_isr_handler+0x1e>
		timer_clear_interrupt_status();
1000a5fc:	4b06      	ldr	r3, [pc, #24]	; (1000a618 <timer_isr_handler+0x28>)
1000a5fe:	4798      	blx	r3
		
		if (timer_callback) {
1000a600:	4b06      	ldr	r3, [pc, #24]	; (1000a61c <timer_isr_handler+0x2c>)
1000a602:	681b      	ldr	r3, [r3, #0]
1000a604:	2b00      	cmp	r3, #0
1000a606:	d002      	beq.n	1000a60e <timer_isr_handler+0x1e>
			timer_callback();
1000a608:	4b04      	ldr	r3, [pc, #16]	; (1000a61c <timer_isr_handler+0x2c>)
1000a60a:	681b      	ldr	r3, [r3, #0]
1000a60c:	4798      	blx	r3
		}
	}
}
1000a60e:	46bd      	mov	sp, r7
1000a610:	bd80      	pop	{r7, pc}
1000a612:	46c0      	nop			; (mov r8, r8)
1000a614:	1000a56d 	.word	0x1000a56d
1000a618:	1000a581 	.word	0x1000a581
1000a61c:	100161ec 	.word	0x100161ec

1000a620 <timer_init>:
 * \param[in]     config       Pointer to the TIMER configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void timer_init(const struct timer_config *config)
{
1000a620:	b580      	push	{r7, lr}
1000a622:	b082      	sub	sp, #8
1000a624:	af00      	add	r7, sp, #0
1000a626:	6078      	str	r0, [r7, #4]
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_TIMER);
1000a628:	2006      	movs	r0, #6
1000a62a:	4b0c      	ldr	r3, [pc, #48]	; (1000a65c <timer_init+0x3c>)
1000a62c:	4798      	blx	r3

	TIMER0->CTRL.reg = config->interrupt_enable << TIMER_CTRL_INTERRUPT_ENABLE_Pos;
1000a62e:	2380      	movs	r3, #128	; 0x80
1000a630:	05db      	lsls	r3, r3, #23
1000a632:	687a      	ldr	r2, [r7, #4]
1000a634:	7912      	ldrb	r2, [r2, #4]
1000a636:	00d2      	lsls	r2, r2, #3
1000a638:	b2d2      	uxtb	r2, r2
1000a63a:	701a      	strb	r2, [r3, #0]
	TIMER0->RELOAD.reg = config->reload_value;
1000a63c:	2380      	movs	r3, #128	; 0x80
1000a63e:	05db      	lsls	r3, r3, #23
1000a640:	687a      	ldr	r2, [r7, #4]
1000a642:	6812      	ldr	r2, [r2, #0]
1000a644:	609a      	str	r2, [r3, #8]
	
	timer_callback = NULL;
1000a646:	4b06      	ldr	r3, [pc, #24]	; (1000a660 <timer_init+0x40>)
1000a648:	2200      	movs	r2, #0
1000a64a:	601a      	str	r2, [r3, #0]
	system_register_isr(RAM_ISR_TABLE_TIMER0_INDEX, (uint32_t)timer_isr_handler);
1000a64c:	4b05      	ldr	r3, [pc, #20]	; (1000a664 <timer_init+0x44>)
1000a64e:	202a      	movs	r0, #42	; 0x2a
1000a650:	1c19      	adds	r1, r3, #0
1000a652:	4b05      	ldr	r3, [pc, #20]	; (1000a668 <timer_init+0x48>)
1000a654:	4798      	blx	r3
1000a656:	46bd      	mov	sp, r7
1000a658:	b002      	add	sp, #8
1000a65a:	bd80      	pop	{r7, pc}
1000a65c:	10009f6d 	.word	0x10009f6d
1000a660:	100161ec 	.word	0x100161ec
1000a664:	1000a5f1 	.word	0x1000a5f1
1000a668:	1000a50d 	.word	0x1000a50d

1000a66c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000a66c:	b580      	push	{r7, lr}
1000a66e:	b082      	sub	sp, #8
1000a670:	af00      	add	r7, sp, #0
1000a672:	1c02      	adds	r2, r0, #0
1000a674:	1dfb      	adds	r3, r7, #7
1000a676:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a678:	4b06      	ldr	r3, [pc, #24]	; (1000a694 <NVIC_EnableIRQ+0x28>)
1000a67a:	1dfa      	adds	r2, r7, #7
1000a67c:	7812      	ldrb	r2, [r2, #0]
1000a67e:	1c11      	adds	r1, r2, #0
1000a680:	221f      	movs	r2, #31
1000a682:	400a      	ands	r2, r1
1000a684:	2101      	movs	r1, #1
1000a686:	4091      	lsls	r1, r2
1000a688:	1c0a      	adds	r2, r1, #0
1000a68a:	601a      	str	r2, [r3, #0]
}
1000a68c:	46bd      	mov	sp, r7
1000a68e:	b002      	add	sp, #8
1000a690:	bd80      	pop	{r7, pc}
1000a692:	46c0      	nop			; (mov r8, r8)
1000a694:	e000e100 	.word	0xe000e100

1000a698 <_uart_write>:
 * Writes a character from the TX buffer to the Data register.
 *
 * \param[in,out]  module  Pointer to UART software instance struct
 */
static void _uart_write(struct uart_module *const module)
{
1000a698:	b580      	push	{r7, lr}
1000a69a:	b084      	sub	sp, #16
1000a69c:	af00      	add	r7, sp, #0
1000a69e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;
1000a6a0:	687b      	ldr	r3, [r7, #4]
1000a6a2:	681b      	ldr	r3, [r3, #0]
1000a6a4:	60fb      	str	r3, [r7, #12]

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000a6a6:	687b      	ldr	r3, [r7, #4]
1000a6a8:	699a      	ldr	r2, [r3, #24]
1000a6aa:	230b      	movs	r3, #11
1000a6ac:	18fb      	adds	r3, r7, r3
1000a6ae:	7812      	ldrb	r2, [r2, #0]
1000a6b0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000a6b2:	687b      	ldr	r3, [r7, #4]
1000a6b4:	699b      	ldr	r3, [r3, #24]
1000a6b6:	1c5a      	adds	r2, r3, #1
1000a6b8:	687b      	ldr	r3, [r7, #4]
1000a6ba:	619a      	str	r2, [r3, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000a6bc:	68fb      	ldr	r3, [r7, #12]
1000a6be:	220b      	movs	r2, #11
1000a6c0:	18ba      	adds	r2, r7, r2
1000a6c2:	7812      	ldrb	r2, [r2, #0]
1000a6c4:	701a      	strb	r2, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000a6c6:	687b      	ldr	r3, [r7, #4]
1000a6c8:	8bdb      	ldrh	r3, [r3, #30]
1000a6ca:	b29b      	uxth	r3, r3
1000a6cc:	3b01      	subs	r3, #1
1000a6ce:	b29a      	uxth	r2, r3
1000a6d0:	687b      	ldr	r3, [r7, #4]
1000a6d2:	83da      	strh	r2, [r3, #30]
}
1000a6d4:	46bd      	mov	sp, r7
1000a6d6:	b004      	add	sp, #16
1000a6d8:	bd80      	pop	{r7, pc}
1000a6da:	46c0      	nop			; (mov r8, r8)

1000a6dc <_uart_read>:
 *
 * \param[in,out]  module  Pointer to UART software instance struct
 */
static void _uart_read(
		struct uart_module *const module)
{
1000a6dc:	b580      	push	{r7, lr}
1000a6de:	b084      	sub	sp, #16
1000a6e0:	af00      	add	r7, sp, #0
1000a6e2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;
1000a6e4:	687b      	ldr	r3, [r7, #4]
1000a6e6:	681b      	ldr	r3, [r3, #0]
1000a6e8:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000a6ea:	68fb      	ldr	r3, [r7, #12]
1000a6ec:	7c1b      	ldrb	r3, [r3, #16]
1000a6ee:	b2da      	uxtb	r2, r3
1000a6f0:	230a      	movs	r3, #10
1000a6f2:	18fb      	adds	r3, r7, r3
1000a6f4:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000a6f6:	687b      	ldr	r3, [r7, #4]
1000a6f8:	695b      	ldr	r3, [r3, #20]
1000a6fa:	220a      	movs	r2, #10
1000a6fc:	18ba      	adds	r2, r7, r2
1000a6fe:	8812      	ldrh	r2, [r2, #0]
1000a700:	b2d2      	uxtb	r2, r2
1000a702:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000a704:	687b      	ldr	r3, [r7, #4]
1000a706:	695b      	ldr	r3, [r3, #20]
1000a708:	1c5a      	adds	r2, r3, #1
1000a70a:	687b      	ldr	r3, [r7, #4]
1000a70c:	615a      	str	r2, [r3, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000a70e:	687b      	ldr	r3, [r7, #4]
1000a710:	8b9b      	ldrh	r3, [r3, #28]
1000a712:	b29b      	uxth	r3, r3
1000a714:	3b01      	subs	r3, #1
1000a716:	b29a      	uxth	r2, r3
1000a718:	687b      	ldr	r3, [r7, #4]
1000a71a:	839a      	strh	r2, [r3, #28]
}
1000a71c:	46bd      	mov	sp, r7
1000a71e:	b004      	add	sp, #16
1000a720:	bd80      	pop	{r7, pc}
1000a722:	46c0      	nop			; (mov r8, r8)

1000a724 <uart_rx0_isr_handler>:

static void uart_rx0_isr_handler(void)
{
1000a724:	b580      	push	{r7, lr}
1000a726:	b084      	sub	sp, #16
1000a728:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[0];
1000a72a:	4b31      	ldr	r3, [pc, #196]	; (1000a7f0 <uart_rx0_isr_handler+0xcc>)
1000a72c:	681b      	ldr	r3, [r3, #0]
1000a72e:	60fb      	str	r3, [r7, #12]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000a730:	68fb      	ldr	r3, [r7, #12]
1000a732:	681b      	ldr	r3, [r3, #0]
1000a734:	7d1b      	ldrb	r3, [r3, #20]
1000a736:	b2db      	uxtb	r3, r3
1000a738:	60bb      	str	r3, [r7, #8]
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000a73a:	68bb      	ldr	r3, [r7, #8]
1000a73c:	2240      	movs	r2, #64	; 0x40
1000a73e:	4013      	ands	r3, r2
1000a740:	d025      	beq.n	1000a78e <uart_rx0_isr_handler+0x6a>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000a742:	68fb      	ldr	r3, [r7, #12]
1000a744:	2222      	movs	r2, #34	; 0x22
1000a746:	211e      	movs	r1, #30
1000a748:	5499      	strb	r1, [r3, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000a74a:	68fb      	ldr	r3, [r7, #12]
1000a74c:	681a      	ldr	r2, [r3, #0]
1000a74e:	68fb      	ldr	r3, [r7, #12]
1000a750:	681b      	ldr	r3, [r3, #0]
1000a752:	7e1b      	ldrb	r3, [r3, #24]
1000a754:	b2db      	uxtb	r3, r3
1000a756:	2141      	movs	r1, #65	; 0x41
1000a758:	438b      	bics	r3, r1
1000a75a:	b2db      	uxtb	r3, r3
1000a75c:	7613      	strb	r3, [r2, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000a75e:	68fb      	ldr	r3, [r7, #12]
1000a760:	2221      	movs	r2, #33	; 0x21
1000a762:	5c9b      	ldrb	r3, [r3, r2]
1000a764:	1c1a      	adds	r2, r3, #0
1000a766:	2308      	movs	r3, #8
1000a768:	4013      	ands	r3, r2
1000a76a:	d00b      	beq.n	1000a784 <uart_rx0_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000a76c:	68fb      	ldr	r3, [r7, #12]
1000a76e:	2220      	movs	r2, #32
1000a770:	5c9b      	ldrb	r3, [r3, r2]
1000a772:	1c1a      	adds	r2, r3, #0
1000a774:	2308      	movs	r3, #8
1000a776:	4013      	ands	r3, r2
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000a778:	d004      	beq.n	1000a784 <uart_rx0_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000a77a:	68fb      	ldr	r3, [r7, #12]
1000a77c:	691b      	ldr	r3, [r3, #16]
1000a77e:	68fa      	ldr	r2, [r7, #12]
1000a780:	1c10      	adds	r0, r2, #0
1000a782:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000a784:	68fb      	ldr	r3, [r7, #12]
1000a786:	681a      	ldr	r2, [r3, #0]
1000a788:	1dfb      	adds	r3, r7, #7
1000a78a:	7c12      	ldrb	r2, [r2, #16]
1000a78c:	701a      	strb	r2, [r3, #0]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000a78e:	68bb      	ldr	r3, [r7, #8]
1000a790:	2201      	movs	r2, #1
1000a792:	4013      	ands	r3, r2
1000a794:	d029      	beq.n	1000a7ea <uart_rx0_isr_handler+0xc6>
		_uart_read(module);
1000a796:	68fb      	ldr	r3, [r7, #12]
1000a798:	1c18      	adds	r0, r3, #0
1000a79a:	4b16      	ldr	r3, [pc, #88]	; (1000a7f4 <uart_rx0_isr_handler+0xd0>)
1000a79c:	4798      	blx	r3
		if (module->remaining_rx_buffer_length == 0) {
1000a79e:	68fb      	ldr	r3, [r7, #12]
1000a7a0:	8b9b      	ldrh	r3, [r3, #28]
1000a7a2:	b29b      	uxth	r3, r3
1000a7a4:	2b00      	cmp	r3, #0
1000a7a6:	d120      	bne.n	1000a7ea <uart_rx0_isr_handler+0xc6>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a7a8:	68fb      	ldr	r3, [r7, #12]
1000a7aa:	2221      	movs	r2, #33	; 0x21
1000a7ac:	5c9b      	ldrb	r3, [r3, r2]
1000a7ae:	1c1a      	adds	r2, r3, #0
1000a7b0:	2304      	movs	r3, #4
1000a7b2:	4013      	ands	r3, r2
1000a7b4:	d019      	beq.n	1000a7ea <uart_rx0_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000a7b6:	68fb      	ldr	r3, [r7, #12]
1000a7b8:	2220      	movs	r2, #32
1000a7ba:	5c9b      	ldrb	r3, [r3, r2]
1000a7bc:	1c1a      	adds	r2, r3, #0
1000a7be:	2304      	movs	r3, #4
1000a7c0:	4013      	ands	r3, r2
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a7c2:	d012      	beq.n	1000a7ea <uart_rx0_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000a7c4:	68fb      	ldr	r3, [r7, #12]
1000a7c6:	2222      	movs	r2, #34	; 0x22
1000a7c8:	2100      	movs	r1, #0
1000a7ca:	5499      	strb	r1, [r3, r2]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000a7cc:	68fb      	ldr	r3, [r7, #12]
1000a7ce:	681a      	ldr	r2, [r3, #0]
1000a7d0:	68fb      	ldr	r3, [r7, #12]
1000a7d2:	681b      	ldr	r3, [r3, #0]
1000a7d4:	7e1b      	ldrb	r3, [r3, #24]
1000a7d6:	b2db      	uxtb	r3, r3
1000a7d8:	2101      	movs	r1, #1
1000a7da:	438b      	bics	r3, r1
1000a7dc:	b2db      	uxtb	r3, r3
1000a7de:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000a7e0:	68fb      	ldr	r3, [r7, #12]
1000a7e2:	68db      	ldr	r3, [r3, #12]
1000a7e4:	68fa      	ldr	r2, [r7, #12]
1000a7e6:	1c10      	adds	r0, r2, #0
1000a7e8:	4798      	blx	r3
			}
		}
	}
}
1000a7ea:	46bd      	mov	sp, r7
1000a7ec:	b004      	add	sp, #16
1000a7ee:	bd80      	pop	{r7, pc}
1000a7f0:	10016a00 	.word	0x10016a00
1000a7f4:	1000a6dd 	.word	0x1000a6dd

1000a7f8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000a7f8:	b580      	push	{r7, lr}
1000a7fa:	b082      	sub	sp, #8
1000a7fc:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[0];
1000a7fe:	4b34      	ldr	r3, [pc, #208]	; (1000a8d0 <uart_tx0_isr_handler+0xd8>)
1000a800:	681b      	ldr	r3, [r3, #0]
1000a802:	607b      	str	r3, [r7, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000a804:	687b      	ldr	r3, [r7, #4]
1000a806:	681b      	ldr	r3, [r3, #0]
1000a808:	791b      	ldrb	r3, [r3, #4]
1000a80a:	b2db      	uxtb	r3, r3
1000a80c:	603b      	str	r3, [r7, #0]
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000a80e:	683b      	ldr	r3, [r7, #0]
1000a810:	2201      	movs	r2, #1
1000a812:	4013      	ands	r3, r2
1000a814:	d01c      	beq.n	1000a850 <uart_tx0_isr_handler+0x58>
		_uart_write(module);
1000a816:	687b      	ldr	r3, [r7, #4]
1000a818:	1c18      	adds	r0, r3, #0
1000a81a:	4b2e      	ldr	r3, [pc, #184]	; (1000a8d4 <uart_tx0_isr_handler+0xdc>)
1000a81c:	4798      	blx	r3
		if (module->remaining_tx_buffer_length == 0) {
1000a81e:	687b      	ldr	r3, [r7, #4]
1000a820:	8bdb      	ldrh	r3, [r3, #30]
1000a822:	b29b      	uxth	r3, r3
1000a824:	2b00      	cmp	r3, #0
1000a826:	d113      	bne.n	1000a850 <uart_tx0_isr_handler+0x58>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a828:	687b      	ldr	r3, [r7, #4]
1000a82a:	681a      	ldr	r2, [r3, #0]
1000a82c:	687b      	ldr	r3, [r7, #4]
1000a82e:	681b      	ldr	r3, [r3, #0]
1000a830:	7a1b      	ldrb	r3, [r3, #8]
1000a832:	b2db      	uxtb	r3, r3
1000a834:	2101      	movs	r1, #1
1000a836:	438b      	bics	r3, r1
1000a838:	b2db      	uxtb	r3, r3
1000a83a:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000a83c:	687b      	ldr	r3, [r7, #4]
1000a83e:	681a      	ldr	r2, [r3, #0]
1000a840:	687b      	ldr	r3, [r7, #4]
1000a842:	681b      	ldr	r3, [r3, #0]
1000a844:	7a1b      	ldrb	r3, [r3, #8]
1000a846:	b2db      	uxtb	r3, r3
1000a848:	2110      	movs	r1, #16
1000a84a:	430b      	orrs	r3, r1
1000a84c:	b2db      	uxtb	r3, r3
1000a84e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000a850:	683b      	ldr	r3, [r7, #0]
1000a852:	2210      	movs	r2, #16
1000a854:	4013      	ands	r3, r2
1000a856:	d020      	beq.n	1000a89a <uart_tx0_isr_handler+0xa2>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000a858:	687b      	ldr	r3, [r7, #4]
1000a85a:	2221      	movs	r2, #33	; 0x21
1000a85c:	5c9b      	ldrb	r3, [r3, r2]
1000a85e:	1c1a      	adds	r2, r3, #0
1000a860:	2301      	movs	r3, #1
1000a862:	4013      	ands	r3, r2
1000a864:	d019      	beq.n	1000a89a <uart_tx0_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000a866:	687b      	ldr	r3, [r7, #4]
1000a868:	2220      	movs	r2, #32
1000a86a:	5c9b      	ldrb	r3, [r3, r2]
1000a86c:	1c1a      	adds	r2, r3, #0
1000a86e:	2301      	movs	r3, #1
1000a870:	4013      	ands	r3, r2
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000a872:	d012      	beq.n	1000a89a <uart_tx0_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000a874:	687b      	ldr	r3, [r7, #4]
1000a876:	2222      	movs	r2, #34	; 0x22
1000a878:	2100      	movs	r1, #0
1000a87a:	5499      	strb	r1, [r3, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a87c:	687b      	ldr	r3, [r7, #4]
1000a87e:	681a      	ldr	r2, [r3, #0]
1000a880:	687b      	ldr	r3, [r7, #4]
1000a882:	681b      	ldr	r3, [r3, #0]
1000a884:	7a1b      	ldrb	r3, [r3, #8]
1000a886:	b2db      	uxtb	r3, r3
1000a888:	2110      	movs	r1, #16
1000a88a:	438b      	bics	r3, r1
1000a88c:	b2db      	uxtb	r3, r3
1000a88e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000a890:	687b      	ldr	r3, [r7, #4]
1000a892:	685b      	ldr	r3, [r3, #4]
1000a894:	687a      	ldr	r2, [r7, #4]
1000a896:	1c10      	adds	r0, r2, #0
1000a898:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000a89a:	683b      	ldr	r3, [r7, #0]
1000a89c:	2220      	movs	r2, #32
1000a89e:	4013      	ands	r3, r2
1000a8a0:	d012      	beq.n	1000a8c8 <uart_tx0_isr_handler+0xd0>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000a8a2:	687b      	ldr	r3, [r7, #4]
1000a8a4:	2221      	movs	r2, #33	; 0x21
1000a8a6:	5c9b      	ldrb	r3, [r3, r2]
1000a8a8:	1c1a      	adds	r2, r3, #0
1000a8aa:	2302      	movs	r3, #2
1000a8ac:	4013      	ands	r3, r2
1000a8ae:	d00b      	beq.n	1000a8c8 <uart_tx0_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000a8b0:	687b      	ldr	r3, [r7, #4]
1000a8b2:	2220      	movs	r2, #32
1000a8b4:	5c9b      	ldrb	r3, [r3, r2]
1000a8b6:	1c1a      	adds	r2, r3, #0
1000a8b8:	2302      	movs	r3, #2
1000a8ba:	4013      	ands	r3, r2
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000a8bc:	d004      	beq.n	1000a8c8 <uart_tx0_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000a8be:	687b      	ldr	r3, [r7, #4]
1000a8c0:	689b      	ldr	r3, [r3, #8]
1000a8c2:	687a      	ldr	r2, [r7, #4]
1000a8c4:	1c10      	adds	r0, r2, #0
1000a8c6:	4798      	blx	r3
		}

	}
}
1000a8c8:	46bd      	mov	sp, r7
1000a8ca:	b002      	add	sp, #8
1000a8cc:	bd80      	pop	{r7, pc}
1000a8ce:	46c0      	nop			; (mov r8, r8)
1000a8d0:	10016a00 	.word	0x10016a00
1000a8d4:	1000a699 	.word	0x1000a699

1000a8d8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000a8d8:	b580      	push	{r7, lr}
1000a8da:	b084      	sub	sp, #16
1000a8dc:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[1];
1000a8de:	4b31      	ldr	r3, [pc, #196]	; (1000a9a4 <uart_rx1_isr_handler+0xcc>)
1000a8e0:	685b      	ldr	r3, [r3, #4]
1000a8e2:	60fb      	str	r3, [r7, #12]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000a8e4:	68fb      	ldr	r3, [r7, #12]
1000a8e6:	681b      	ldr	r3, [r3, #0]
1000a8e8:	7d1b      	ldrb	r3, [r3, #20]
1000a8ea:	b2db      	uxtb	r3, r3
1000a8ec:	60bb      	str	r3, [r7, #8]
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000a8ee:	68bb      	ldr	r3, [r7, #8]
1000a8f0:	2240      	movs	r2, #64	; 0x40
1000a8f2:	4013      	ands	r3, r2
1000a8f4:	d025      	beq.n	1000a942 <uart_rx1_isr_handler+0x6a>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000a8f6:	68fb      	ldr	r3, [r7, #12]
1000a8f8:	2222      	movs	r2, #34	; 0x22
1000a8fa:	211e      	movs	r1, #30
1000a8fc:	5499      	strb	r1, [r3, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000a8fe:	68fb      	ldr	r3, [r7, #12]
1000a900:	681a      	ldr	r2, [r3, #0]
1000a902:	68fb      	ldr	r3, [r7, #12]
1000a904:	681b      	ldr	r3, [r3, #0]
1000a906:	7e1b      	ldrb	r3, [r3, #24]
1000a908:	b2db      	uxtb	r3, r3
1000a90a:	2141      	movs	r1, #65	; 0x41
1000a90c:	438b      	bics	r3, r1
1000a90e:	b2db      	uxtb	r3, r3
1000a910:	7613      	strb	r3, [r2, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000a912:	68fb      	ldr	r3, [r7, #12]
1000a914:	2221      	movs	r2, #33	; 0x21
1000a916:	5c9b      	ldrb	r3, [r3, r2]
1000a918:	1c1a      	adds	r2, r3, #0
1000a91a:	2308      	movs	r3, #8
1000a91c:	4013      	ands	r3, r2
1000a91e:	d00b      	beq.n	1000a938 <uart_rx1_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000a920:	68fb      	ldr	r3, [r7, #12]
1000a922:	2220      	movs	r2, #32
1000a924:	5c9b      	ldrb	r3, [r3, r2]
1000a926:	1c1a      	adds	r2, r3, #0
1000a928:	2308      	movs	r3, #8
1000a92a:	4013      	ands	r3, r2
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000a92c:	d004      	beq.n	1000a938 <uart_rx1_isr_handler+0x60>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000a92e:	68fb      	ldr	r3, [r7, #12]
1000a930:	691b      	ldr	r3, [r3, #16]
1000a932:	68fa      	ldr	r2, [r7, #12]
1000a934:	1c10      	adds	r0, r2, #0
1000a936:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000a938:	68fb      	ldr	r3, [r7, #12]
1000a93a:	681a      	ldr	r2, [r3, #0]
1000a93c:	1dfb      	adds	r3, r7, #7
1000a93e:	7c12      	ldrb	r2, [r2, #16]
1000a940:	701a      	strb	r2, [r3, #0]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000a942:	68bb      	ldr	r3, [r7, #8]
1000a944:	2201      	movs	r2, #1
1000a946:	4013      	ands	r3, r2
1000a948:	d029      	beq.n	1000a99e <uart_rx1_isr_handler+0xc6>
		_uart_read(module);
1000a94a:	68fb      	ldr	r3, [r7, #12]
1000a94c:	1c18      	adds	r0, r3, #0
1000a94e:	4b16      	ldr	r3, [pc, #88]	; (1000a9a8 <uart_rx1_isr_handler+0xd0>)
1000a950:	4798      	blx	r3
		if (module->remaining_rx_buffer_length == 0) {
1000a952:	68fb      	ldr	r3, [r7, #12]
1000a954:	8b9b      	ldrh	r3, [r3, #28]
1000a956:	b29b      	uxth	r3, r3
1000a958:	2b00      	cmp	r3, #0
1000a95a:	d120      	bne.n	1000a99e <uart_rx1_isr_handler+0xc6>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a95c:	68fb      	ldr	r3, [r7, #12]
1000a95e:	2221      	movs	r2, #33	; 0x21
1000a960:	5c9b      	ldrb	r3, [r3, r2]
1000a962:	1c1a      	adds	r2, r3, #0
1000a964:	2304      	movs	r3, #4
1000a966:	4013      	ands	r3, r2
1000a968:	d019      	beq.n	1000a99e <uart_rx1_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000a96a:	68fb      	ldr	r3, [r7, #12]
1000a96c:	2220      	movs	r2, #32
1000a96e:	5c9b      	ldrb	r3, [r3, r2]
1000a970:	1c1a      	adds	r2, r3, #0
1000a972:	2304      	movs	r3, #4
1000a974:	4013      	ands	r3, r2
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a976:	d012      	beq.n	1000a99e <uart_rx1_isr_handler+0xc6>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000a978:	68fb      	ldr	r3, [r7, #12]
1000a97a:	2222      	movs	r2, #34	; 0x22
1000a97c:	2100      	movs	r1, #0
1000a97e:	5499      	strb	r1, [r3, r2]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000a980:	68fb      	ldr	r3, [r7, #12]
1000a982:	681a      	ldr	r2, [r3, #0]
1000a984:	68fb      	ldr	r3, [r7, #12]
1000a986:	681b      	ldr	r3, [r3, #0]
1000a988:	7e1b      	ldrb	r3, [r3, #24]
1000a98a:	b2db      	uxtb	r3, r3
1000a98c:	2101      	movs	r1, #1
1000a98e:	438b      	bics	r3, r1
1000a990:	b2db      	uxtb	r3, r3
1000a992:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000a994:	68fb      	ldr	r3, [r7, #12]
1000a996:	68db      	ldr	r3, [r3, #12]
1000a998:	68fa      	ldr	r2, [r7, #12]
1000a99a:	1c10      	adds	r0, r2, #0
1000a99c:	4798      	blx	r3
			}
		}
	}
}
1000a99e:	46bd      	mov	sp, r7
1000a9a0:	b004      	add	sp, #16
1000a9a2:	bd80      	pop	{r7, pc}
1000a9a4:	10016a00 	.word	0x10016a00
1000a9a8:	1000a6dd 	.word	0x1000a6dd

1000a9ac <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000a9ac:	b580      	push	{r7, lr}
1000a9ae:	b082      	sub	sp, #8
1000a9b0:	af00      	add	r7, sp, #0
	struct uart_module *module = _uart_instances[1];
1000a9b2:	4b34      	ldr	r3, [pc, #208]	; (1000aa84 <uart_tx1_isr_handler+0xd8>)
1000a9b4:	685b      	ldr	r3, [r3, #4]
1000a9b6:	607b      	str	r3, [r7, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000a9b8:	687b      	ldr	r3, [r7, #4]
1000a9ba:	681b      	ldr	r3, [r3, #0]
1000a9bc:	791b      	ldrb	r3, [r3, #4]
1000a9be:	b2db      	uxtb	r3, r3
1000a9c0:	603b      	str	r3, [r7, #0]
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000a9c2:	683b      	ldr	r3, [r7, #0]
1000a9c4:	2201      	movs	r2, #1
1000a9c6:	4013      	ands	r3, r2
1000a9c8:	d01c      	beq.n	1000aa04 <uart_tx1_isr_handler+0x58>
		_uart_write(module);
1000a9ca:	687b      	ldr	r3, [r7, #4]
1000a9cc:	1c18      	adds	r0, r3, #0
1000a9ce:	4b2e      	ldr	r3, [pc, #184]	; (1000aa88 <uart_tx1_isr_handler+0xdc>)
1000a9d0:	4798      	blx	r3
		if (module->remaining_tx_buffer_length == 0) {
1000a9d2:	687b      	ldr	r3, [r7, #4]
1000a9d4:	8bdb      	ldrh	r3, [r3, #30]
1000a9d6:	b29b      	uxth	r3, r3
1000a9d8:	2b00      	cmp	r3, #0
1000a9da:	d113      	bne.n	1000aa04 <uart_tx1_isr_handler+0x58>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a9dc:	687b      	ldr	r3, [r7, #4]
1000a9de:	681a      	ldr	r2, [r3, #0]
1000a9e0:	687b      	ldr	r3, [r7, #4]
1000a9e2:	681b      	ldr	r3, [r3, #0]
1000a9e4:	7a1b      	ldrb	r3, [r3, #8]
1000a9e6:	b2db      	uxtb	r3, r3
1000a9e8:	2101      	movs	r1, #1
1000a9ea:	438b      	bics	r3, r1
1000a9ec:	b2db      	uxtb	r3, r3
1000a9ee:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000a9f0:	687b      	ldr	r3, [r7, #4]
1000a9f2:	681a      	ldr	r2, [r3, #0]
1000a9f4:	687b      	ldr	r3, [r7, #4]
1000a9f6:	681b      	ldr	r3, [r3, #0]
1000a9f8:	7a1b      	ldrb	r3, [r3, #8]
1000a9fa:	b2db      	uxtb	r3, r3
1000a9fc:	2110      	movs	r1, #16
1000a9fe:	430b      	orrs	r3, r1
1000aa00:	b2db      	uxtb	r3, r3
1000aa02:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000aa04:	683b      	ldr	r3, [r7, #0]
1000aa06:	2210      	movs	r2, #16
1000aa08:	4013      	ands	r3, r2
1000aa0a:	d020      	beq.n	1000aa4e <uart_tx1_isr_handler+0xa2>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000aa0c:	687b      	ldr	r3, [r7, #4]
1000aa0e:	2221      	movs	r2, #33	; 0x21
1000aa10:	5c9b      	ldrb	r3, [r3, r2]
1000aa12:	1c1a      	adds	r2, r3, #0
1000aa14:	2301      	movs	r3, #1
1000aa16:	4013      	ands	r3, r2
1000aa18:	d019      	beq.n	1000aa4e <uart_tx1_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000aa1a:	687b      	ldr	r3, [r7, #4]
1000aa1c:	2220      	movs	r2, #32
1000aa1e:	5c9b      	ldrb	r3, [r3, r2]
1000aa20:	1c1a      	adds	r2, r3, #0
1000aa22:	2301      	movs	r3, #1
1000aa24:	4013      	ands	r3, r2
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000aa26:	d012      	beq.n	1000aa4e <uart_tx1_isr_handler+0xa2>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000aa28:	687b      	ldr	r3, [r7, #4]
1000aa2a:	2222      	movs	r2, #34	; 0x22
1000aa2c:	2100      	movs	r1, #0
1000aa2e:	5499      	strb	r1, [r3, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000aa30:	687b      	ldr	r3, [r7, #4]
1000aa32:	681a      	ldr	r2, [r3, #0]
1000aa34:	687b      	ldr	r3, [r7, #4]
1000aa36:	681b      	ldr	r3, [r3, #0]
1000aa38:	7a1b      	ldrb	r3, [r3, #8]
1000aa3a:	b2db      	uxtb	r3, r3
1000aa3c:	2110      	movs	r1, #16
1000aa3e:	438b      	bics	r3, r1
1000aa40:	b2db      	uxtb	r3, r3
1000aa42:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000aa44:	687b      	ldr	r3, [r7, #4]
1000aa46:	685b      	ldr	r3, [r3, #4]
1000aa48:	687a      	ldr	r2, [r7, #4]
1000aa4a:	1c10      	adds	r0, r2, #0
1000aa4c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000aa4e:	683b      	ldr	r3, [r7, #0]
1000aa50:	2220      	movs	r2, #32
1000aa52:	4013      	ands	r3, r2
1000aa54:	d012      	beq.n	1000aa7c <uart_tx1_isr_handler+0xd0>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000aa56:	687b      	ldr	r3, [r7, #4]
1000aa58:	2221      	movs	r2, #33	; 0x21
1000aa5a:	5c9b      	ldrb	r3, [r3, r2]
1000aa5c:	1c1a      	adds	r2, r3, #0
1000aa5e:	2302      	movs	r3, #2
1000aa60:	4013      	ands	r3, r2
1000aa62:	d00b      	beq.n	1000aa7c <uart_tx1_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000aa64:	687b      	ldr	r3, [r7, #4]
1000aa66:	2220      	movs	r2, #32
1000aa68:	5c9b      	ldrb	r3, [r3, r2]
1000aa6a:	1c1a      	adds	r2, r3, #0
1000aa6c:	2302      	movs	r3, #2
1000aa6e:	4013      	ands	r3, r2
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000aa70:	d004      	beq.n	1000aa7c <uart_tx1_isr_handler+0xd0>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000aa72:	687b      	ldr	r3, [r7, #4]
1000aa74:	689b      	ldr	r3, [r3, #8]
1000aa76:	687a      	ldr	r2, [r7, #4]
1000aa78:	1c10      	adds	r0, r2, #0
1000aa7a:	4798      	blx	r3
		}

	}
}
1000aa7c:	46bd      	mov	sp, r7
1000aa7e:	b002      	add	sp, #8
1000aa80:	bd80      	pop	{r7, pc}
1000aa82:	46c0      	nop			; (mov r8, r8)
1000aa84:	10016a00 	.word	0x10016a00
1000aa88:	1000a699 	.word	0x1000a699

1000aa8c <uart_set_baudrate>:

static void uart_set_baudrate(struct uart_module *const module,
		const uint32_t baud_rate)
{
1000aa8c:	b580      	push	{r7, lr}
1000aa8e:	b086      	sub	sp, #24
1000aa90:	af00      	add	r7, sp, #0
1000aa92:	6078      	str	r0, [r7, #4]
1000aa94:	6039      	str	r1, [r7, #0]
	uint32_t clock;
	uint16_t integerpart = 0;
1000aa96:	2310      	movs	r3, #16
1000aa98:	18fb      	adds	r3, r7, r3
1000aa9a:	2200      	movs	r2, #0
1000aa9c:	801a      	strh	r2, [r3, #0]
	uint8_t fractionalpart = 0;
1000aa9e:	230f      	movs	r3, #15
1000aaa0:	18fb      	adds	r3, r7, r3
1000aaa2:	2200      	movs	r2, #0
1000aaa4:	701a      	strb	r2, [r3, #0]
	uint32_t diff;
	uint8_t i = 0;
1000aaa6:	2313      	movs	r3, #19
1000aaa8:	18fb      	adds	r3, r7, r3
1000aaaa:	2200      	movs	r2, #0
1000aaac:	701a      	strb	r2, [r3, #0]

	clock = system_clock_get_value();
1000aaae:	4b28      	ldr	r3, [pc, #160]	; (1000ab50 <uart_set_baudrate+0xc4>)
1000aab0:	4798      	blx	r3
1000aab2:	1c03      	adds	r3, r0, #0
1000aab4:	60bb      	str	r3, [r7, #8]
	integerpart = clock / baud_rate;
1000aab6:	4b27      	ldr	r3, [pc, #156]	; (1000ab54 <uart_set_baudrate+0xc8>)
1000aab8:	68b8      	ldr	r0, [r7, #8]
1000aaba:	6839      	ldr	r1, [r7, #0]
1000aabc:	4798      	blx	r3
1000aabe:	1c03      	adds	r3, r0, #0
1000aac0:	1c1a      	adds	r2, r3, #0
1000aac2:	2310      	movs	r3, #16
1000aac4:	18fb      	adds	r3, r7, r3
1000aac6:	801a      	strh	r2, [r3, #0]
	diff = clock - (baud_rate * integerpart);
1000aac8:	2310      	movs	r3, #16
1000aaca:	18fb      	adds	r3, r7, r3
1000aacc:	881b      	ldrh	r3, [r3, #0]
1000aace:	683a      	ldr	r2, [r7, #0]
1000aad0:	4353      	muls	r3, r2
1000aad2:	68ba      	ldr	r2, [r7, #8]
1000aad4:	1ad3      	subs	r3, r2, r3
1000aad6:	617b      	str	r3, [r7, #20]
	i = 0;
1000aad8:	2313      	movs	r3, #19
1000aada:	18fb      	adds	r3, r7, r3
1000aadc:	2200      	movs	r2, #0
1000aade:	701a      	strb	r2, [r3, #0]
	while(diff > (baud_rate / 16)) {
1000aae0:	e00b      	b.n	1000aafa <uart_set_baudrate+0x6e>
		i++;
1000aae2:	2313      	movs	r3, #19
1000aae4:	18fb      	adds	r3, r7, r3
1000aae6:	781a      	ldrb	r2, [r3, #0]
1000aae8:	2313      	movs	r3, #19
1000aaea:	18fb      	adds	r3, r7, r3
1000aaec:	3201      	adds	r2, #1
1000aaee:	701a      	strb	r2, [r3, #0]
		diff -= (baud_rate / 16);
1000aaf0:	683b      	ldr	r3, [r7, #0]
1000aaf2:	091b      	lsrs	r3, r3, #4
1000aaf4:	697a      	ldr	r2, [r7, #20]
1000aaf6:	1ad3      	subs	r3, r2, r3
1000aaf8:	617b      	str	r3, [r7, #20]

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000aafa:	683b      	ldr	r3, [r7, #0]
1000aafc:	091a      	lsrs	r2, r3, #4
1000aafe:	697b      	ldr	r3, [r7, #20]
1000ab00:	429a      	cmp	r2, r3
1000ab02:	d3ee      	bcc.n	1000aae2 <uart_set_baudrate+0x56>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;
1000ab04:	2313      	movs	r3, #19
1000ab06:	18fb      	adds	r3, r7, r3
1000ab08:	781b      	ldrb	r3, [r3, #0]
1000ab0a:	3301      	adds	r3, #1
1000ab0c:	2b00      	cmp	r3, #0
1000ab0e:	da00      	bge.n	1000ab12 <uart_set_baudrate+0x86>
1000ab10:	3301      	adds	r3, #1
1000ab12:	105b      	asrs	r3, r3, #1
1000ab14:	1c1a      	adds	r2, r3, #0
1000ab16:	230f      	movs	r3, #15
1000ab18:	18fb      	adds	r3, r7, r3
1000ab1a:	701a      	strb	r2, [r3, #0]

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000ab1c:	687b      	ldr	r3, [r7, #4]
1000ab1e:	681b      	ldr	r3, [r3, #0]
1000ab20:	2228      	movs	r2, #40	; 0x28
1000ab22:	2100      	movs	r1, #0
1000ab24:	5499      	strb	r1, [r3, r2]
	module->hw->UART_BAUD_RATE.reg =
1000ab26:	687b      	ldr	r3, [r7, #4]
1000ab28:	681b      	ldr	r3, [r3, #0]
1000ab2a:	2210      	movs	r2, #16
1000ab2c:	18ba      	adds	r2, r7, r2
1000ab2e:	8812      	ldrh	r2, [r2, #0]
1000ab30:	00d2      	lsls	r2, r2, #3
1000ab32:	b291      	uxth	r1, r2
1000ab34:	220f      	movs	r2, #15
1000ab36:	18ba      	adds	r2, r7, r2
1000ab38:	7812      	ldrb	r2, [r2, #0]
1000ab3a:	b292      	uxth	r2, r2
1000ab3c:	2007      	movs	r0, #7
1000ab3e:	4002      	ands	r2, r0
1000ab40:	b292      	uxth	r2, r2
1000ab42:	430a      	orrs	r2, r1
1000ab44:	b292      	uxth	r2, r2
1000ab46:	849a      	strh	r2, [r3, #36]	; 0x24
		UART_UART_BAUD_RATE_INTEGER_DIVISION(integerpart) |
		UART_UART_BAUD_RATE_FRACTIONAL_DIVISION(fractionalpart);
}
1000ab48:	46bd      	mov	sp, r7
1000ab4a:	b006      	add	sp, #24
1000ab4c:	bd80      	pop	{r7, pc}
1000ab4e:	46c0      	nop			; (mov r8, r8)
1000ab50:	10009bd9 	.word	0x10009bd9
1000ab54:	1001222d 	.word	0x1001222d

1000ab58 <uart_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
1000ab58:	b580      	push	{r7, lr}
1000ab5a:	b082      	sub	sp, #8
1000ab5c:	af00      	add	r7, sp, #0
1000ab5e:	6078      	str	r0, [r7, #4]
	config->baud_rate = 115200;
1000ab60:	687b      	ldr	r3, [r7, #4]
1000ab62:	22e1      	movs	r2, #225	; 0xe1
1000ab64:	0252      	lsls	r2, r2, #9
1000ab66:	601a      	str	r2, [r3, #0]
	config->data_bits = UART_8_BITS;
1000ab68:	687b      	ldr	r3, [r7, #4]
1000ab6a:	2200      	movs	r2, #0
1000ab6c:	711a      	strb	r2, [r3, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000ab6e:	687b      	ldr	r3, [r7, #4]
1000ab70:	2200      	movs	r2, #0
1000ab72:	715a      	strb	r2, [r3, #5]
	config->parity = UART_NO_PARITY;
1000ab74:	687b      	ldr	r3, [r7, #4]
1000ab76:	2200      	movs	r2, #0
1000ab78:	719a      	strb	r2, [r3, #6]
	config->flow_control = false;
1000ab7a:	687b      	ldr	r3, [r7, #4]
1000ab7c:	2200      	movs	r2, #0
1000ab7e:	71da      	strb	r2, [r3, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
1000ab80:	687b      	ldr	r3, [r7, #4]
1000ab82:	2202      	movs	r2, #2
1000ab84:	609a      	str	r2, [r3, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
1000ab86:	687b      	ldr	r3, [r7, #4]
1000ab88:	2203      	movs	r2, #3
1000ab8a:	60da      	str	r2, [r3, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
1000ab8c:	687b      	ldr	r3, [r7, #4]
1000ab8e:	2204      	movs	r2, #4
1000ab90:	611a      	str	r2, [r3, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
1000ab92:	687b      	ldr	r3, [r7, #4]
1000ab94:	2205      	movs	r2, #5
1000ab96:	615a      	str	r2, [r3, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
1000ab98:	687b      	ldr	r3, [r7, #4]
1000ab9a:	2202      	movs	r2, #2
1000ab9c:	619a      	str	r2, [r3, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
1000ab9e:	687b      	ldr	r3, [r7, #4]
1000aba0:	2202      	movs	r2, #2
1000aba2:	61da      	str	r2, [r3, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
1000aba4:	687b      	ldr	r3, [r7, #4]
1000aba6:	2202      	movs	r2, #2
1000aba8:	621a      	str	r2, [r3, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000abaa:	687b      	ldr	r3, [r7, #4]
1000abac:	2202      	movs	r2, #2
1000abae:	625a      	str	r2, [r3, #36]	; 0x24
}
1000abb0:	46bd      	mov	sp, r7
1000abb2:	b002      	add	sp, #8
1000abb4:	bd80      	pop	{r7, pc}
1000abb6:	46c0      	nop			; (mov r8, r8)

1000abb8 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000abb8:	b580      	push	{r7, lr}
1000abba:	b086      	sub	sp, #24
1000abbc:	af00      	add	r7, sp, #0
1000abbe:	60f8      	str	r0, [r7, #12]
1000abc0:	60b9      	str	r1, [r7, #8]
1000abc2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000abc4:	2317      	movs	r3, #23
1000abc6:	18fb      	adds	r3, r7, r3
1000abc8:	2200      	movs	r2, #0
1000abca:	701a      	strb	r2, [r3, #0]
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000abcc:	68fb      	ldr	r3, [r7, #12]
1000abce:	68ba      	ldr	r2, [r7, #8]
1000abd0:	601a      	str	r2, [r3, #0]

	if (hw == UART0) {
1000abd2:	68bb      	ldr	r3, [r7, #8]
1000abd4:	4a8d      	ldr	r2, [pc, #564]	; (1000ae0c <uart_init+0x254>)
1000abd6:	4293      	cmp	r3, r2
1000abd8:	d11f      	bne.n	1000ac1a <uart_init+0x62>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000abda:	2009      	movs	r0, #9
1000abdc:	4b8c      	ldr	r3, [pc, #560]	; (1000ae10 <uart_init+0x258>)
1000abde:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000abe0:	200a      	movs	r0, #10
1000abe2:	4b8b      	ldr	r3, [pc, #556]	; (1000ae10 <uart_init+0x258>)
1000abe4:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000abe6:	2009      	movs	r0, #9
1000abe8:	4b8a      	ldr	r3, [pc, #552]	; (1000ae14 <uart_init+0x25c>)
1000abea:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000abec:	200a      	movs	r0, #10
1000abee:	4b89      	ldr	r3, [pc, #548]	; (1000ae14 <uart_init+0x25c>)
1000abf0:	4798      	blx	r3
		_uart_instances[0] = module;
1000abf2:	4b89      	ldr	r3, [pc, #548]	; (1000ae18 <uart_init+0x260>)
1000abf4:	68fa      	ldr	r2, [r7, #12]
1000abf6:	601a      	str	r2, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000abf8:	4b88      	ldr	r3, [pc, #544]	; (1000ae1c <uart_init+0x264>)
1000abfa:	2010      	movs	r0, #16
1000abfc:	1c19      	adds	r1, r3, #0
1000abfe:	4b88      	ldr	r3, [pc, #544]	; (1000ae20 <uart_init+0x268>)
1000ac00:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000ac02:	4b88      	ldr	r3, [pc, #544]	; (1000ae24 <uart_init+0x26c>)
1000ac04:	2011      	movs	r0, #17
1000ac06:	1c19      	adds	r1, r3, #0
1000ac08:	4b85      	ldr	r3, [pc, #532]	; (1000ae20 <uart_init+0x268>)
1000ac0a:	4798      	blx	r3
		NVIC_EnableIRQ(UART0_RX_IRQn);
1000ac0c:	2000      	movs	r0, #0
1000ac0e:	4b86      	ldr	r3, [pc, #536]	; (1000ae28 <uart_init+0x270>)
1000ac10:	4798      	blx	r3
		NVIC_EnableIRQ(UART0_TX_IRQn);
1000ac12:	2001      	movs	r0, #1
1000ac14:	4b84      	ldr	r3, [pc, #528]	; (1000ae28 <uart_init+0x270>)
1000ac16:	4798      	blx	r3
1000ac18:	e022      	b.n	1000ac60 <uart_init+0xa8>
	} else if (hw == UART1) {
1000ac1a:	68bb      	ldr	r3, [r7, #8]
1000ac1c:	4a83      	ldr	r2, [pc, #524]	; (1000ae2c <uart_init+0x274>)
1000ac1e:	4293      	cmp	r3, r2
1000ac20:	d11e      	bne.n	1000ac60 <uart_init+0xa8>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000ac22:	200b      	movs	r0, #11
1000ac24:	4b7a      	ldr	r3, [pc, #488]	; (1000ae10 <uart_init+0x258>)
1000ac26:	4798      	blx	r3
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000ac28:	200c      	movs	r0, #12
1000ac2a:	4b79      	ldr	r3, [pc, #484]	; (1000ae10 <uart_init+0x258>)
1000ac2c:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000ac2e:	200b      	movs	r0, #11
1000ac30:	4b78      	ldr	r3, [pc, #480]	; (1000ae14 <uart_init+0x25c>)
1000ac32:	4798      	blx	r3
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000ac34:	200c      	movs	r0, #12
1000ac36:	4b77      	ldr	r3, [pc, #476]	; (1000ae14 <uart_init+0x25c>)
1000ac38:	4798      	blx	r3
		_uart_instances[1] = module;
1000ac3a:	4b77      	ldr	r3, [pc, #476]	; (1000ae18 <uart_init+0x260>)
1000ac3c:	68fa      	ldr	r2, [r7, #12]
1000ac3e:	605a      	str	r2, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000ac40:	4b7b      	ldr	r3, [pc, #492]	; (1000ae30 <uart_init+0x278>)
1000ac42:	2012      	movs	r0, #18
1000ac44:	1c19      	adds	r1, r3, #0
1000ac46:	4b76      	ldr	r3, [pc, #472]	; (1000ae20 <uart_init+0x268>)
1000ac48:	4798      	blx	r3
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000ac4a:	4b7a      	ldr	r3, [pc, #488]	; (1000ae34 <uart_init+0x27c>)
1000ac4c:	2013      	movs	r0, #19
1000ac4e:	1c19      	adds	r1, r3, #0
1000ac50:	4b73      	ldr	r3, [pc, #460]	; (1000ae20 <uart_init+0x268>)
1000ac52:	4798      	blx	r3
		NVIC_EnableIRQ(UART1_RX_IRQn);
1000ac54:	2002      	movs	r0, #2
1000ac56:	4b74      	ldr	r3, [pc, #464]	; (1000ae28 <uart_init+0x270>)
1000ac58:	4798      	blx	r3
		NVIC_EnableIRQ(UART1_TX_IRQn);
1000ac5a:	2003      	movs	r0, #3
1000ac5c:	4b72      	ldr	r3, [pc, #456]	; (1000ae28 <uart_init+0x270>)
1000ac5e:	4798      	blx	r3
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000ac60:	687b      	ldr	r3, [r7, #4]
1000ac62:	79db      	ldrb	r3, [r3, #7]
1000ac64:	2b00      	cmp	r3, #0
1000ac66:	d004      	beq.n	1000ac72 <uart_init+0xba>
		index = 4;
1000ac68:	2315      	movs	r3, #21
1000ac6a:	18fb      	adds	r3, r7, r3
1000ac6c:	2204      	movs	r2, #4
1000ac6e:	701a      	strb	r2, [r3, #0]
1000ac70:	e003      	b.n	1000ac7a <uart_init+0xc2>
	} else {
		index = 2;
1000ac72:	2315      	movs	r3, #21
1000ac74:	18fb      	adds	r3, r7, r3
1000ac76:	2202      	movs	r2, #2
1000ac78:	701a      	strb	r2, [r3, #0]
	}
	for(i = 0; i < index; i++) {
1000ac7a:	2316      	movs	r3, #22
1000ac7c:	18fb      	adds	r3, r7, r3
1000ac7e:	2200      	movs	r2, #0
1000ac80:	701a      	strb	r2, [r3, #0]
1000ac82:	e01a      	b.n	1000acba <uart_init+0x102>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000ac84:	2316      	movs	r3, #22
1000ac86:	18fb      	adds	r3, r7, r3
1000ac88:	781a      	ldrb	r2, [r3, #0]
1000ac8a:	687b      	ldr	r3, [r7, #4]
1000ac8c:	3202      	adds	r2, #2
1000ac8e:	0092      	lsls	r2, r2, #2
1000ac90:	58d3      	ldr	r3, [r2, r3]
1000ac92:	b2d9      	uxtb	r1, r3
								(uint16_t)(config->pinmux_sel_pad[i]));
1000ac94:	2316      	movs	r3, #22
1000ac96:	18fb      	adds	r3, r7, r3
1000ac98:	781a      	ldrb	r2, [r3, #0]
1000ac9a:	687b      	ldr	r3, [r7, #4]
1000ac9c:	3206      	adds	r2, #6
1000ac9e:	0092      	lsls	r2, r2, #2
1000aca0:	58d3      	ldr	r3, [r2, r3]
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000aca2:	b29b      	uxth	r3, r3
1000aca4:	1c08      	adds	r0, r1, #0
1000aca6:	1c19      	adds	r1, r3, #0
1000aca8:	4b63      	ldr	r3, [pc, #396]	; (1000ae38 <uart_init+0x280>)
1000acaa:	4798      	blx	r3
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
1000acac:	2316      	movs	r3, #22
1000acae:	18fb      	adds	r3, r7, r3
1000acb0:	781a      	ldrb	r2, [r3, #0]
1000acb2:	2316      	movs	r3, #22
1000acb4:	18fb      	adds	r3, r7, r3
1000acb6:	3201      	adds	r2, #1
1000acb8:	701a      	strb	r2, [r3, #0]
1000acba:	2316      	movs	r3, #22
1000acbc:	18fa      	adds	r2, r7, r3
1000acbe:	2315      	movs	r3, #21
1000acc0:	18fb      	adds	r3, r7, r3
1000acc2:	7812      	ldrb	r2, [r2, #0]
1000acc4:	781b      	ldrb	r3, [r3, #0]
1000acc6:	429a      	cmp	r2, r3
1000acc8:	d3dc      	bcc.n	1000ac84 <uart_init+0xcc>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000acca:	e005      	b.n	1000acd8 <uart_init+0x120>
		i = module->hw->RECEIVE_DATA.reg;
1000accc:	68fb      	ldr	r3, [r7, #12]
1000acce:	681a      	ldr	r2, [r3, #0]
1000acd0:	2316      	movs	r3, #22
1000acd2:	18fb      	adds	r3, r7, r3
1000acd4:	7c12      	ldrb	r2, [r2, #16]
1000acd6:	701a      	strb	r2, [r3, #0]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000acd8:	68fb      	ldr	r3, [r7, #12]
1000acda:	681b      	ldr	r3, [r3, #0]
1000acdc:	7d1b      	ldrb	r3, [r3, #20]
1000acde:	b2db      	uxtb	r3, r3
1000ace0:	1c1a      	adds	r2, r3, #0
1000ace2:	2301      	movs	r3, #1
1000ace4:	4013      	ands	r3, r2
1000ace6:	d1f1      	bne.n	1000accc <uart_init+0x114>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000ace8:	68fb      	ldr	r3, [r7, #12]
1000acea:	681b      	ldr	r3, [r3, #0]
1000acec:	2220      	movs	r2, #32
1000acee:	2100      	movs	r1, #0
1000acf0:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000acf2:	687b      	ldr	r3, [r7, #4]
1000acf4:	79db      	ldrb	r3, [r3, #7]
1000acf6:	2b00      	cmp	r3, #0
1000acf8:	d007      	beq.n	1000ad0a <uart_init+0x152>
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
1000acfa:	2317      	movs	r3, #23
1000acfc:	18fb      	adds	r3, r7, r3
1000acfe:	2217      	movs	r2, #23
1000ad00:	18ba      	adds	r2, r7, r2
1000ad02:	7812      	ldrb	r2, [r2, #0]
1000ad04:	2120      	movs	r1, #32
1000ad06:	430a      	orrs	r2, r1
1000ad08:	701a      	strb	r2, [r3, #0]
	}
	config_temp |= config->data_bits;
1000ad0a:	687b      	ldr	r3, [r7, #4]
1000ad0c:	7919      	ldrb	r1, [r3, #4]
1000ad0e:	2317      	movs	r3, #23
1000ad10:	18fb      	adds	r3, r7, r3
1000ad12:	2217      	movs	r2, #23
1000ad14:	18ba      	adds	r2, r7, r2
1000ad16:	7812      	ldrb	r2, [r2, #0]
1000ad18:	430a      	orrs	r2, r1
1000ad1a:	701a      	strb	r2, [r3, #0]
	config_temp |= config->stop_bits;
1000ad1c:	687b      	ldr	r3, [r7, #4]
1000ad1e:	7959      	ldrb	r1, [r3, #5]
1000ad20:	2317      	movs	r3, #23
1000ad22:	18fb      	adds	r3, r7, r3
1000ad24:	2217      	movs	r2, #23
1000ad26:	18ba      	adds	r2, r7, r2
1000ad28:	7812      	ldrb	r2, [r2, #0]
1000ad2a:	430a      	orrs	r2, r1
1000ad2c:	701a      	strb	r2, [r3, #0]
	switch(config->parity) {
1000ad2e:	687b      	ldr	r3, [r7, #4]
1000ad30:	799b      	ldrb	r3, [r3, #6]
1000ad32:	2b04      	cmp	r3, #4
1000ad34:	d84d      	bhi.n	1000add2 <uart_init+0x21a>
1000ad36:	009a      	lsls	r2, r3, #2
1000ad38:	4b40      	ldr	r3, [pc, #256]	; (1000ae3c <uart_init+0x284>)
1000ad3a:	18d3      	adds	r3, r2, r3
1000ad3c:	681b      	ldr	r3, [r3, #0]
1000ad3e:	469f      	mov	pc, r3
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
1000ad40:	2317      	movs	r3, #23
1000ad42:	18fb      	adds	r3, r7, r3
1000ad44:	2217      	movs	r2, #23
1000ad46:	18ba      	adds	r2, r7, r2
1000ad48:	7812      	ldrb	r2, [r2, #0]
1000ad4a:	701a      	strb	r2, [r3, #0]
			break;
1000ad4c:	e042      	b.n	1000add4 <uart_init+0x21c>

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ad4e:	2317      	movs	r3, #23
1000ad50:	18fb      	adds	r3, r7, r3
1000ad52:	2217      	movs	r2, #23
1000ad54:	18ba      	adds	r2, r7, r2
1000ad56:	7812      	ldrb	r2, [r2, #0]
1000ad58:	2102      	movs	r1, #2
1000ad5a:	430a      	orrs	r2, r1
1000ad5c:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
1000ad5e:	2317      	movs	r3, #23
1000ad60:	18fb      	adds	r3, r7, r3
1000ad62:	2217      	movs	r2, #23
1000ad64:	18ba      	adds	r2, r7, r2
1000ad66:	7812      	ldrb	r2, [r2, #0]
1000ad68:	701a      	strb	r2, [r3, #0]
			break;
1000ad6a:	e033      	b.n	1000add4 <uart_init+0x21c>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ad6c:	2317      	movs	r3, #23
1000ad6e:	18fb      	adds	r3, r7, r3
1000ad70:	2217      	movs	r2, #23
1000ad72:	18ba      	adds	r2, r7, r2
1000ad74:	7812      	ldrb	r2, [r2, #0]
1000ad76:	2102      	movs	r1, #2
1000ad78:	430a      	orrs	r2, r1
1000ad7a:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
1000ad7c:	2317      	movs	r3, #23
1000ad7e:	18fb      	adds	r3, r7, r3
1000ad80:	2217      	movs	r2, #23
1000ad82:	18ba      	adds	r2, r7, r2
1000ad84:	7812      	ldrb	r2, [r2, #0]
1000ad86:	2104      	movs	r1, #4
1000ad88:	430a      	orrs	r2, r1
1000ad8a:	701a      	strb	r2, [r3, #0]
			break;
1000ad8c:	e022      	b.n	1000add4 <uart_init+0x21c>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000ad8e:	2317      	movs	r3, #23
1000ad90:	18fb      	adds	r3, r7, r3
1000ad92:	2217      	movs	r2, #23
1000ad94:	18ba      	adds	r2, r7, r2
1000ad96:	7812      	ldrb	r2, [r2, #0]
1000ad98:	2102      	movs	r1, #2
1000ad9a:	430a      	orrs	r2, r1
1000ad9c:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
1000ad9e:	2317      	movs	r3, #23
1000ada0:	18fb      	adds	r3, r7, r3
1000ada2:	2217      	movs	r2, #23
1000ada4:	18ba      	adds	r2, r7, r2
1000ada6:	7812      	ldrb	r2, [r2, #0]
1000ada8:	2108      	movs	r1, #8
1000adaa:	430a      	orrs	r2, r1
1000adac:	701a      	strb	r2, [r3, #0]
			break;
1000adae:	e011      	b.n	1000add4 <uart_init+0x21c>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000adb0:	2317      	movs	r3, #23
1000adb2:	18fb      	adds	r3, r7, r3
1000adb4:	2217      	movs	r2, #23
1000adb6:	18ba      	adds	r2, r7, r2
1000adb8:	7812      	ldrb	r2, [r2, #0]
1000adba:	2102      	movs	r1, #2
1000adbc:	430a      	orrs	r2, r1
1000adbe:	701a      	strb	r2, [r3, #0]
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
1000adc0:	2317      	movs	r3, #23
1000adc2:	18fb      	adds	r3, r7, r3
1000adc4:	2217      	movs	r2, #23
1000adc6:	18ba      	adds	r2, r7, r2
1000adc8:	7812      	ldrb	r2, [r2, #0]
1000adca:	210c      	movs	r1, #12
1000adcc:	430a      	orrs	r2, r1
1000adce:	701a      	strb	r2, [r3, #0]
			break;
1000add0:	e000      	b.n	1000add4 <uart_init+0x21c>

		default:
			break;
1000add2:	46c0      	nop			; (mov r8, r8)
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000add4:	68fb      	ldr	r3, [r7, #12]
1000add6:	681b      	ldr	r3, [r3, #0]
1000add8:	2217      	movs	r2, #23
1000adda:	18ba      	adds	r2, r7, r2
1000addc:	2120      	movs	r1, #32
1000adde:	7812      	ldrb	r2, [r2, #0]
1000ade0:	545a      	strb	r2, [r3, r1]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000ade2:	687b      	ldr	r3, [r7, #4]
1000ade4:	681b      	ldr	r3, [r3, #0]
1000ade6:	68fa      	ldr	r2, [r7, #12]
1000ade8:	1c10      	adds	r0, r2, #0
1000adea:	1c19      	adds	r1, r3, #0
1000adec:	4b14      	ldr	r3, [pc, #80]	; (1000ae40 <uart_init+0x288>)
1000adee:	4798      	blx	r3

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000adf0:	68fb      	ldr	r3, [r7, #12]
1000adf2:	681b      	ldr	r3, [r3, #0]
1000adf4:	2200      	movs	r2, #0
1000adf6:	761a      	strb	r2, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000adf8:	68fb      	ldr	r3, [r7, #12]
1000adfa:	681b      	ldr	r3, [r3, #0]
1000adfc:	2200      	movs	r2, #0
1000adfe:	721a      	strb	r2, [r3, #8]
	
	return STATUS_OK;
1000ae00:	2300      	movs	r3, #0
}
1000ae02:	1c18      	adds	r0, r3, #0
1000ae04:	46bd      	mov	sp, r7
1000ae06:	b006      	add	sp, #24
1000ae08:	bd80      	pop	{r7, pc}
1000ae0a:	46c0      	nop			; (mov r8, r8)
1000ae0c:	40004000 	.word	0x40004000
1000ae10:	10009f6d 	.word	0x10009f6d
1000ae14:	10009bed 	.word	0x10009bed
1000ae18:	10016a00 	.word	0x10016a00
1000ae1c:	1000a725 	.word	0x1000a725
1000ae20:	1000a50d 	.word	0x1000a50d
1000ae24:	1000a7f9 	.word	0x1000a7f9
1000ae28:	1000a66d 	.word	0x1000a66d
1000ae2c:	40005000 	.word	0x40005000
1000ae30:	1000a8d9 	.word	0x1000a8d9
1000ae34:	1000a9ad 	.word	0x1000a9ad
1000ae38:	1000914d 	.word	0x1000914d
1000ae3c:	10014fe8 	.word	0x10014fe8
1000ae40:	1000aa8d 	.word	0x1000aa8d

1000ae44 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000ae44:	b580      	push	{r7, lr}
1000ae46:	b082      	sub	sp, #8
1000ae48:	af00      	add	r7, sp, #0
1000ae4a:	6078      	str	r0, [r7, #4]
1000ae4c:	1c0a      	adds	r2, r1, #0
1000ae4e:	1cfb      	adds	r3, r7, #3
1000ae50:	701a      	strb	r2, [r3, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000ae52:	46c0      	nop			; (mov r8, r8)
1000ae54:	687b      	ldr	r3, [r7, #4]
1000ae56:	681b      	ldr	r3, [r3, #0]
1000ae58:	791b      	ldrb	r3, [r3, #4]
1000ae5a:	b2db      	uxtb	r3, r3
1000ae5c:	1c1a      	adds	r2, r3, #0
1000ae5e:	2301      	movs	r3, #1
1000ae60:	4013      	ands	r3, r2
1000ae62:	d0f7      	beq.n	1000ae54 <uart_write_wait+0x10>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000ae64:	687b      	ldr	r3, [r7, #4]
1000ae66:	681b      	ldr	r3, [r3, #0]
1000ae68:	1cfa      	adds	r2, r7, #3
1000ae6a:	7812      	ldrb	r2, [r2, #0]
1000ae6c:	701a      	strb	r2, [r3, #0]
	
	return STATUS_OK;
1000ae6e:	2300      	movs	r3, #0
}
1000ae70:	1c18      	adds	r0, r3, #0
1000ae72:	46bd      	mov	sp, r7
1000ae74:	b002      	add	sp, #8
1000ae76:	bd80      	pop	{r7, pc}

1000ae78 <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000ae78:	b580      	push	{r7, lr}
1000ae7a:	b082      	sub	sp, #8
1000ae7c:	af00      	add	r7, sp, #0
1000ae7e:	6078      	str	r0, [r7, #4]
1000ae80:	6039      	str	r1, [r7, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000ae82:	46c0      	nop			; (mov r8, r8)
1000ae84:	687b      	ldr	r3, [r7, #4]
1000ae86:	681b      	ldr	r3, [r3, #0]
1000ae88:	7d1b      	ldrb	r3, [r3, #20]
1000ae8a:	b2db      	uxtb	r3, r3
1000ae8c:	1c1a      	adds	r2, r3, #0
1000ae8e:	2301      	movs	r3, #1
1000ae90:	4013      	ands	r3, r2
1000ae92:	d0f7      	beq.n	1000ae84 <uart_read_wait+0xc>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ae94:	687b      	ldr	r3, [r7, #4]
1000ae96:	681b      	ldr	r3, [r3, #0]
1000ae98:	7c1b      	ldrb	r3, [r3, #16]
1000ae9a:	b2da      	uxtb	r2, r3
1000ae9c:	683b      	ldr	r3, [r7, #0]
1000ae9e:	701a      	strb	r2, [r3, #0]
	
	return STATUS_OK;
1000aea0:	2300      	movs	r3, #0
}
1000aea2:	1c18      	adds	r0, r3, #0
1000aea4:	46bd      	mov	sp, r7
1000aea6:	b002      	add	sp, #8
1000aea8:	bd80      	pop	{r7, pc}
1000aeaa:	46c0      	nop			; (mov r8, r8)

1000aeac <_uart_read_buffer>:
 */
static void _uart_read_buffer(
		struct uart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
1000aeac:	b580      	push	{r7, lr}
1000aeae:	b084      	sub	sp, #16
1000aeb0:	af00      	add	r7, sp, #0
1000aeb2:	60f8      	str	r0, [r7, #12]
1000aeb4:	60b9      	str	r1, [r7, #8]
1000aeb6:	1dbb      	adds	r3, r7, #6
1000aeb8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000aeba:	68fb      	ldr	r3, [r7, #12]
1000aebc:	1dba      	adds	r2, r7, #6
1000aebe:	8812      	ldrh	r2, [r2, #0]
1000aec0:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr = rx_data;
1000aec2:	68fb      	ldr	r3, [r7, #12]
1000aec4:	68ba      	ldr	r2, [r7, #8]
1000aec6:	615a      	str	r2, [r3, #20]
	module->status = STATUS_BUSY;
1000aec8:	68fb      	ldr	r3, [r7, #12]
1000aeca:	2222      	movs	r2, #34	; 0x22
1000aecc:	2105      	movs	r1, #5
1000aece:	5499      	strb	r1, [r3, r2]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000aed0:	68fb      	ldr	r3, [r7, #12]
1000aed2:	681b      	ldr	r3, [r3, #0]
1000aed4:	2201      	movs	r2, #1
1000aed6:	761a      	strb	r2, [r3, #24]
}
1000aed8:	46bd      	mov	sp, r7
1000aeda:	b004      	add	sp, #16
1000aedc:	bd80      	pop	{r7, pc}
1000aede:	46c0      	nop			; (mov r8, r8)

1000aee0 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000aee0:	b580      	push	{r7, lr}
1000aee2:	b084      	sub	sp, #16
1000aee4:	af00      	add	r7, sp, #0
1000aee6:	60f8      	str	r0, [r7, #12]
1000aee8:	60b9      	str	r1, [r7, #8]
1000aeea:	1dbb      	adds	r3, r7, #6
1000aeec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000aeee:	1dbb      	adds	r3, r7, #6
1000aef0:	881b      	ldrh	r3, [r3, #0]
1000aef2:	2b00      	cmp	r3, #0
1000aef4:	d101      	bne.n	1000aefa <uart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
1000aef6:	2317      	movs	r3, #23
1000aef8:	e011      	b.n	1000af1e <uart_read_buffer_job+0x3e>
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000aefa:	68fb      	ldr	r3, [r7, #12]
1000aefc:	2222      	movs	r2, #34	; 0x22
1000aefe:	5c9b      	ldrb	r3, [r3, r2]
1000af00:	b2db      	uxtb	r3, r3
1000af02:	2b05      	cmp	r3, #5
1000af04:	d101      	bne.n	1000af0a <uart_read_buffer_job+0x2a>
		return STATUS_BUSY;
1000af06:	2305      	movs	r3, #5
1000af08:	e009      	b.n	1000af1e <uart_read_buffer_job+0x3e>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
1000af0a:	68f9      	ldr	r1, [r7, #12]
1000af0c:	68ba      	ldr	r2, [r7, #8]
1000af0e:	1dbb      	adds	r3, r7, #6
1000af10:	881b      	ldrh	r3, [r3, #0]
1000af12:	1c08      	adds	r0, r1, #0
1000af14:	1c11      	adds	r1, r2, #0
1000af16:	1c1a      	adds	r2, r3, #0
1000af18:	4b03      	ldr	r3, [pc, #12]	; (1000af28 <uart_read_buffer_job+0x48>)
1000af1a:	4798      	blx	r3
	return STATUS_OK;
1000af1c:	2300      	movs	r3, #0
}
1000af1e:	1c18      	adds	r0, r3, #0
1000af20:	46bd      	mov	sp, r7
1000af22:	b004      	add	sp, #16
1000af24:	bd80      	pop	{r7, pc}
1000af26:	46c0      	nop			; (mov r8, r8)
1000af28:	1000aead 	.word	0x1000aead

1000af2c <uart_register_callback>:
 *
 */
void uart_register_callback(struct uart_module *const module,
		uart_callback_t callback_func,
		enum uart_callback callback_type)
{
1000af2c:	b580      	push	{r7, lr}
1000af2e:	b084      	sub	sp, #16
1000af30:	af00      	add	r7, sp, #0
1000af32:	60f8      	str	r0, [r7, #12]
1000af34:	60b9      	str	r1, [r7, #8]
1000af36:	1dfb      	adds	r3, r7, #7
1000af38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000af3a:	1dfb      	adds	r3, r7, #7
1000af3c:	781b      	ldrb	r3, [r3, #0]
1000af3e:	68fa      	ldr	r2, [r7, #12]
1000af40:	009b      	lsls	r3, r3, #2
1000af42:	18d3      	adds	r3, r2, r3
1000af44:	68ba      	ldr	r2, [r7, #8]
1000af46:	605a      	str	r2, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000af48:	68fb      	ldr	r3, [r7, #12]
1000af4a:	2220      	movs	r2, #32
1000af4c:	5c9b      	ldrb	r3, [r3, r2]
1000af4e:	b2d9      	uxtb	r1, r3
1000af50:	1dfb      	adds	r3, r7, #7
1000af52:	781b      	ldrb	r3, [r3, #0]
1000af54:	2201      	movs	r2, #1
1000af56:	409a      	lsls	r2, r3
1000af58:	1c13      	adds	r3, r2, #0
1000af5a:	b2db      	uxtb	r3, r3
1000af5c:	1c0a      	adds	r2, r1, #0
1000af5e:	4313      	orrs	r3, r2
1000af60:	b2db      	uxtb	r3, r3
1000af62:	b2d9      	uxtb	r1, r3
1000af64:	68fb      	ldr	r3, [r7, #12]
1000af66:	2220      	movs	r2, #32
1000af68:	5499      	strb	r1, [r3, r2]
}
1000af6a:	46bd      	mov	sp, r7
1000af6c:	b004      	add	sp, #16
1000af6e:	bd80      	pop	{r7, pc}

1000af70 <uart_unregister_callback>:
 * \param[in]      callback_type  Callback type given by an enum
 *
 */
void uart_unregister_callback(struct uart_module *module,
		enum uart_callback callback_type)
{
1000af70:	b580      	push	{r7, lr}
1000af72:	b082      	sub	sp, #8
1000af74:	af00      	add	r7, sp, #0
1000af76:	6078      	str	r0, [r7, #4]
1000af78:	1c0a      	adds	r2, r1, #0
1000af7a:	1cfb      	adds	r3, r7, #3
1000af7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
1000af7e:	1cfb      	adds	r3, r7, #3
1000af80:	781b      	ldrb	r3, [r3, #0]
1000af82:	687a      	ldr	r2, [r7, #4]
1000af84:	009b      	lsls	r3, r3, #2
1000af86:	18d3      	adds	r3, r2, r3
1000af88:	2200      	movs	r2, #0
1000af8a:	605a      	str	r2, [r3, #4]
	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
1000af8c:	687b      	ldr	r3, [r7, #4]
1000af8e:	2220      	movs	r2, #32
1000af90:	5c9b      	ldrb	r3, [r3, r2]
1000af92:	b2d9      	uxtb	r1, r3
1000af94:	1cfb      	adds	r3, r7, #3
1000af96:	781b      	ldrb	r3, [r3, #0]
1000af98:	2201      	movs	r2, #1
1000af9a:	409a      	lsls	r2, r3
1000af9c:	1c13      	adds	r3, r2, #0
1000af9e:	b2db      	uxtb	r3, r3
1000afa0:	43db      	mvns	r3, r3
1000afa2:	b2da      	uxtb	r2, r3
1000afa4:	1c0b      	adds	r3, r1, #0
1000afa6:	4013      	ands	r3, r2
1000afa8:	b2db      	uxtb	r3, r3
1000afaa:	b2d9      	uxtb	r1, r3
1000afac:	687b      	ldr	r3, [r7, #4]
1000afae:	2220      	movs	r2, #32
1000afb0:	5499      	strb	r1, [r3, r2]
}
1000afb2:	46bd      	mov	sp, r7
1000afb4:	b002      	add	sp, #8
1000afb6:	bd80      	pop	{r7, pc}

1000afb8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000afb8:	b580      	push	{r7, lr}
1000afba:	b082      	sub	sp, #8
1000afbc:	af00      	add	r7, sp, #0
1000afbe:	6078      	str	r0, [r7, #4]
1000afc0:	1c0a      	adds	r2, r1, #0
1000afc2:	1cfb      	adds	r3, r7, #3
1000afc4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000afc6:	687b      	ldr	r3, [r7, #4]
1000afc8:	2221      	movs	r2, #33	; 0x21
1000afca:	5c9b      	ldrb	r3, [r3, r2]
1000afcc:	b2d9      	uxtb	r1, r3
1000afce:	1cfb      	adds	r3, r7, #3
1000afd0:	781b      	ldrb	r3, [r3, #0]
1000afd2:	2201      	movs	r2, #1
1000afd4:	409a      	lsls	r2, r3
1000afd6:	1c13      	adds	r3, r2, #0
1000afd8:	b2db      	uxtb	r3, r3
1000afda:	1c0a      	adds	r2, r1, #0
1000afdc:	4313      	orrs	r3, r2
1000afde:	b2db      	uxtb	r3, r3
1000afe0:	b2d9      	uxtb	r1, r3
1000afe2:	687b      	ldr	r3, [r7, #4]
1000afe4:	2221      	movs	r2, #33	; 0x21
1000afe6:	5499      	strb	r1, [r3, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000afe8:	1cfb      	adds	r3, r7, #3
1000afea:	781b      	ldrb	r3, [r3, #0]
1000afec:	2b01      	cmp	r3, #1
1000afee:	d109      	bne.n	1000b004 <uart_enable_callback+0x4c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000aff0:	687b      	ldr	r3, [r7, #4]
1000aff2:	681a      	ldr	r2, [r3, #0]
1000aff4:	687b      	ldr	r3, [r7, #4]
1000aff6:	681b      	ldr	r3, [r3, #0]
1000aff8:	7a1b      	ldrb	r3, [r3, #8]
1000affa:	b2db      	uxtb	r3, r3
1000affc:	2120      	movs	r1, #32
1000affe:	430b      	orrs	r3, r1
1000b000:	b2db      	uxtb	r3, r3
1000b002:	7213      	strb	r3, [r2, #8]
	}
}
1000b004:	46bd      	mov	sp, r7
1000b006:	b002      	add	sp, #8
1000b008:	bd80      	pop	{r7, pc}
1000b00a:	46c0      	nop			; (mov r8, r8)

1000b00c <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b00c:	b580      	push	{r7, lr}
1000b00e:	b082      	sub	sp, #8
1000b010:	af00      	add	r7, sp, #0
1000b012:	6078      	str	r0, [r7, #4]
1000b014:	1c0a      	adds	r2, r1, #0
1000b016:	1cfb      	adds	r3, r7, #3
1000b018:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b01a:	687b      	ldr	r3, [r7, #4]
1000b01c:	2221      	movs	r2, #33	; 0x21
1000b01e:	5c9b      	ldrb	r3, [r3, r2]
1000b020:	b2d9      	uxtb	r1, r3
1000b022:	1cfb      	adds	r3, r7, #3
1000b024:	781b      	ldrb	r3, [r3, #0]
1000b026:	2201      	movs	r2, #1
1000b028:	409a      	lsls	r2, r3
1000b02a:	1c13      	adds	r3, r2, #0
1000b02c:	b2db      	uxtb	r3, r3
1000b02e:	43db      	mvns	r3, r3
1000b030:	b2da      	uxtb	r2, r3
1000b032:	1c0b      	adds	r3, r1, #0
1000b034:	4013      	ands	r3, r2
1000b036:	b2db      	uxtb	r3, r3
1000b038:	b2d9      	uxtb	r1, r3
1000b03a:	687b      	ldr	r3, [r7, #4]
1000b03c:	2221      	movs	r2, #33	; 0x21
1000b03e:	5499      	strb	r1, [r3, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b040:	1cfb      	adds	r3, r7, #3
1000b042:	781b      	ldrb	r3, [r3, #0]
1000b044:	2b01      	cmp	r3, #1
1000b046:	d109      	bne.n	1000b05c <uart_disable_callback+0x50>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b048:	687b      	ldr	r3, [r7, #4]
1000b04a:	681a      	ldr	r2, [r3, #0]
1000b04c:	687b      	ldr	r3, [r7, #4]
1000b04e:	681b      	ldr	r3, [r3, #0]
1000b050:	7a1b      	ldrb	r3, [r3, #8]
1000b052:	b2db      	uxtb	r3, r3
1000b054:	2120      	movs	r1, #32
1000b056:	438b      	bics	r3, r1
1000b058:	b2db      	uxtb	r3, r3
1000b05a:	7213      	strb	r3, [r2, #8]
	}

}
1000b05c:	46bd      	mov	sp, r7
1000b05e:	b002      	add	sp, #8
1000b060:	bd80      	pop	{r7, pc}
1000b062:	46c0      	nop			; (mov r8, r8)

1000b064 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b064:	b580      	push	{r7, lr}
1000b066:	b086      	sub	sp, #24
1000b068:	af00      	add	r7, sp, #0
1000b06a:	60f8      	str	r0, [r7, #12]
1000b06c:	60b9      	str	r1, [r7, #8]
1000b06e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
1000b070:	2300      	movs	r3, #0
1000b072:	617b      	str	r3, [r7, #20]

	if (file != 0) {
1000b074:	68fb      	ldr	r3, [r7, #12]
1000b076:	2b00      	cmp	r3, #0
1000b078:	d002      	beq.n	1000b080 <_read+0x1c>
		return -1;
1000b07a:	2301      	movs	r3, #1
1000b07c:	425b      	negs	r3, r3
1000b07e:	e015      	b.n	1000b0ac <_read+0x48>
	}

	for (; len > 0; --len) {
1000b080:	e010      	b.n	1000b0a4 <_read+0x40>
		ptr_get(stdio_base, ptr);
1000b082:	4b0c      	ldr	r3, [pc, #48]	; (1000b0b4 <_read+0x50>)
1000b084:	681a      	ldr	r2, [r3, #0]
1000b086:	4b0c      	ldr	r3, [pc, #48]	; (1000b0b8 <_read+0x54>)
1000b088:	6819      	ldr	r1, [r3, #0]
1000b08a:	68bb      	ldr	r3, [r7, #8]
1000b08c:	1c08      	adds	r0, r1, #0
1000b08e:	1c19      	adds	r1, r3, #0
1000b090:	4790      	blx	r2
		ptr++;
1000b092:	68bb      	ldr	r3, [r7, #8]
1000b094:	3301      	adds	r3, #1
1000b096:	60bb      	str	r3, [r7, #8]
		nChars++;
1000b098:	697b      	ldr	r3, [r7, #20]
1000b09a:	3301      	adds	r3, #1
1000b09c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b09e:	687b      	ldr	r3, [r7, #4]
1000b0a0:	3b01      	subs	r3, #1
1000b0a2:	607b      	str	r3, [r7, #4]
1000b0a4:	687b      	ldr	r3, [r7, #4]
1000b0a6:	2b00      	cmp	r3, #0
1000b0a8:	dceb      	bgt.n	1000b082 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
1000b0aa:	697b      	ldr	r3, [r7, #20]
}
1000b0ac:	1c18      	adds	r0, r3, #0
1000b0ae:	46bd      	mov	sp, r7
1000b0b0:	b006      	add	sp, #24
1000b0b2:	bd80      	pop	{r7, pc}
1000b0b4:	10016a08 	.word	0x10016a08
1000b0b8:	10016a10 	.word	0x10016a10

1000b0bc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b0bc:	b580      	push	{r7, lr}
1000b0be:	b086      	sub	sp, #24
1000b0c0:	af00      	add	r7, sp, #0
1000b0c2:	60f8      	str	r0, [r7, #12]
1000b0c4:	60b9      	str	r1, [r7, #8]
1000b0c6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
1000b0c8:	2300      	movs	r3, #0
1000b0ca:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b0cc:	68fb      	ldr	r3, [r7, #12]
1000b0ce:	2b01      	cmp	r3, #1
1000b0d0:	d008      	beq.n	1000b0e4 <_write+0x28>
1000b0d2:	68fb      	ldr	r3, [r7, #12]
1000b0d4:	2b02      	cmp	r3, #2
1000b0d6:	d005      	beq.n	1000b0e4 <_write+0x28>
1000b0d8:	68fb      	ldr	r3, [r7, #12]
1000b0da:	2b03      	cmp	r3, #3
1000b0dc:	d002      	beq.n	1000b0e4 <_write+0x28>
		return -1;
1000b0de:	2301      	movs	r3, #1
1000b0e0:	425b      	negs	r3, r3
1000b0e2:	e019      	b.n	1000b118 <_write+0x5c>
	}

	for (; len != 0; --len) {
1000b0e4:	e014      	b.n	1000b110 <_write+0x54>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b0e6:	4b0e      	ldr	r3, [pc, #56]	; (1000b120 <_write+0x64>)
1000b0e8:	681a      	ldr	r2, [r3, #0]
1000b0ea:	4b0e      	ldr	r3, [pc, #56]	; (1000b124 <_write+0x68>)
1000b0ec:	6818      	ldr	r0, [r3, #0]
1000b0ee:	68bb      	ldr	r3, [r7, #8]
1000b0f0:	1c59      	adds	r1, r3, #1
1000b0f2:	60b9      	str	r1, [r7, #8]
1000b0f4:	781b      	ldrb	r3, [r3, #0]
1000b0f6:	1c19      	adds	r1, r3, #0
1000b0f8:	4790      	blx	r2
1000b0fa:	1e03      	subs	r3, r0, #0
1000b0fc:	da02      	bge.n	1000b104 <_write+0x48>
			return -1;
1000b0fe:	2301      	movs	r3, #1
1000b100:	425b      	negs	r3, r3
1000b102:	e009      	b.n	1000b118 <_write+0x5c>
		}
		++nChars;
1000b104:	697b      	ldr	r3, [r7, #20]
1000b106:	3301      	adds	r3, #1
1000b108:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b10a:	687b      	ldr	r3, [r7, #4]
1000b10c:	3b01      	subs	r3, #1
1000b10e:	607b      	str	r3, [r7, #4]
1000b110:	687b      	ldr	r3, [r7, #4]
1000b112:	2b00      	cmp	r3, #0
1000b114:	d1e7      	bne.n	1000b0e6 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
1000b116:	697b      	ldr	r3, [r7, #20]
}
1000b118:	1c18      	adds	r0, r3, #0
1000b11a:	46bd      	mov	sp, r7
1000b11c:	b006      	add	sp, #24
1000b11e:	bd80      	pop	{r7, pc}
1000b120:	10016a0c 	.word	0x10016a0c
1000b124:	10016a10 	.word	0x10016a10

1000b128 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000b128:	b580      	push	{r7, lr}
1000b12a:	b084      	sub	sp, #16
1000b12c:	af00      	add	r7, sp, #0
1000b12e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000b130:	4b0a      	ldr	r3, [pc, #40]	; (1000b15c <_sbrk+0x34>)
1000b132:	681b      	ldr	r3, [r3, #0]
1000b134:	2b00      	cmp	r3, #0
1000b136:	d102      	bne.n	1000b13e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
1000b138:	4b08      	ldr	r3, [pc, #32]	; (1000b15c <_sbrk+0x34>)
1000b13a:	4a09      	ldr	r2, [pc, #36]	; (1000b160 <_sbrk+0x38>)
1000b13c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
1000b13e:	4b07      	ldr	r3, [pc, #28]	; (1000b15c <_sbrk+0x34>)
1000b140:	681b      	ldr	r3, [r3, #0]
1000b142:	60fb      	str	r3, [r7, #12]

	heap += incr;
1000b144:	4b05      	ldr	r3, [pc, #20]	; (1000b15c <_sbrk+0x34>)
1000b146:	681a      	ldr	r2, [r3, #0]
1000b148:	687b      	ldr	r3, [r7, #4]
1000b14a:	18d2      	adds	r2, r2, r3
1000b14c:	4b03      	ldr	r3, [pc, #12]	; (1000b15c <_sbrk+0x34>)
1000b14e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
1000b150:	68fb      	ldr	r3, [r7, #12]
}
1000b152:	1c18      	adds	r0, r3, #0
1000b154:	46bd      	mov	sp, r7
1000b156:	b004      	add	sp, #16
1000b158:	bd80      	pop	{r7, pc}
1000b15a:	46c0      	nop			; (mov r8, r8)
1000b15c:	100161f0 	.word	0x100161f0
1000b160:	10018550 	.word	0x10018550

1000b164 <_close>:
{
	return -1;
}

extern int _close(int file)
{
1000b164:	b580      	push	{r7, lr}
1000b166:	b082      	sub	sp, #8
1000b168:	af00      	add	r7, sp, #0
1000b16a:	6078      	str	r0, [r7, #4]
	return -1;
1000b16c:	2301      	movs	r3, #1
1000b16e:	425b      	negs	r3, r3
}
1000b170:	1c18      	adds	r0, r3, #0
1000b172:	46bd      	mov	sp, r7
1000b174:	b002      	add	sp, #8
1000b176:	bd80      	pop	{r7, pc}

1000b178 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
1000b178:	b580      	push	{r7, lr}
1000b17a:	b082      	sub	sp, #8
1000b17c:	af00      	add	r7, sp, #0
1000b17e:	6078      	str	r0, [r7, #4]
1000b180:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
1000b182:	683b      	ldr	r3, [r7, #0]
1000b184:	2280      	movs	r2, #128	; 0x80
1000b186:	0192      	lsls	r2, r2, #6
1000b188:	605a      	str	r2, [r3, #4]

	return 0;
1000b18a:	2300      	movs	r3, #0
}
1000b18c:	1c18      	adds	r0, r3, #0
1000b18e:	46bd      	mov	sp, r7
1000b190:	b002      	add	sp, #8
1000b192:	bd80      	pop	{r7, pc}

1000b194 <_isatty>:

extern int _isatty(int file)
{
1000b194:	b580      	push	{r7, lr}
1000b196:	b082      	sub	sp, #8
1000b198:	af00      	add	r7, sp, #0
1000b19a:	6078      	str	r0, [r7, #4]
	return 1;
1000b19c:	2301      	movs	r3, #1
}
1000b19e:	1c18      	adds	r0, r3, #0
1000b1a0:	46bd      	mov	sp, r7
1000b1a2:	b002      	add	sp, #8
1000b1a4:	bd80      	pop	{r7, pc}
1000b1a6:	46c0      	nop			; (mov r8, r8)

1000b1a8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
1000b1a8:	b580      	push	{r7, lr}
1000b1aa:	b084      	sub	sp, #16
1000b1ac:	af00      	add	r7, sp, #0
1000b1ae:	60f8      	str	r0, [r7, #12]
1000b1b0:	60b9      	str	r1, [r7, #8]
1000b1b2:	607a      	str	r2, [r7, #4]
	return 0;
1000b1b4:	2300      	movs	r3, #0
}
1000b1b6:	1c18      	adds	r0, r3, #0
1000b1b8:	46bd      	mov	sp, r7
1000b1ba:	b004      	add	sp, #16
1000b1bc:	bd80      	pop	{r7, pc}
1000b1be:	46c0      	nop			; (mov r8, r8)

1000b1c0 <init_global_var>:

/** @brief Set BLE Address, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr);

static void init_global_var(void)
{
1000b1c0:	b580      	push	{r7, lr}
1000b1c2:	af00      	add	r7, sp, #0
	ble_user_event_cb = 0;
1000b1c4:	4b16      	ldr	r3, [pc, #88]	; (1000b220 <init_global_var+0x60>)
1000b1c6:	2200      	movs	r2, #0
1000b1c8:	601a      	str	r2, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b1ca:	4b16      	ldr	r3, [pc, #88]	; (1000b224 <init_global_var+0x64>)
1000b1cc:	1c18      	adds	r0, r3, #0
1000b1ce:	2100      	movs	r1, #0
1000b1d0:	2207      	movs	r2, #7
1000b1d2:	4b15      	ldr	r3, [pc, #84]	; (1000b228 <init_global_var+0x68>)
1000b1d4:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b1d6:	4b15      	ldr	r3, [pc, #84]	; (1000b22c <init_global_var+0x6c>)
1000b1d8:	1c18      	adds	r0, r3, #0
1000b1da:	2100      	movs	r1, #0
1000b1dc:	2212      	movs	r2, #18
1000b1de:	4b12      	ldr	r3, [pc, #72]	; (1000b228 <init_global_var+0x68>)
1000b1e0:	4798      	blx	r3
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000b1e2:	4b13      	ldr	r3, [pc, #76]	; (1000b230 <init_global_var+0x70>)
1000b1e4:	4a13      	ldr	r2, [pc, #76]	; (1000b234 <init_global_var+0x74>)
1000b1e6:	1c18      	adds	r0, r3, #0
1000b1e8:	2100      	movs	r1, #0
1000b1ea:	4b0f      	ldr	r3, [pc, #60]	; (1000b228 <init_global_var+0x68>)
1000b1ec:	4798      	blx	r3
#endif

	scan_response_count = 0;
1000b1ee:	4b12      	ldr	r3, [pc, #72]	; (1000b238 <init_global_var+0x78>)
1000b1f0:	2200      	movs	r2, #0
1000b1f2:	701a      	strb	r2, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b1f4:	4a11      	ldr	r2, [pc, #68]	; (1000b23c <init_global_var+0x7c>)
1000b1f6:	23cd      	movs	r3, #205	; 0xcd
1000b1f8:	009b      	lsls	r3, r3, #2
1000b1fa:	1c10      	adds	r0, r2, #0
1000b1fc:	2100      	movs	r1, #0
1000b1fe:	1c1a      	adds	r2, r3, #0
1000b200:	4b09      	ldr	r3, [pc, #36]	; (1000b228 <init_global_var+0x68>)
1000b202:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
1000b204:	4b0e      	ldr	r3, [pc, #56]	; (1000b240 <init_global_var+0x80>)
1000b206:	2200      	movs	r2, #0
1000b208:	701a      	strb	r2, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b20a:	4a0e      	ldr	r2, [pc, #56]	; (1000b244 <init_global_var+0x84>)
1000b20c:	2383      	movs	r3, #131	; 0x83
1000b20e:	009b      	lsls	r3, r3, #2
1000b210:	1c10      	adds	r0, r2, #0
1000b212:	2100      	movs	r1, #0
1000b214:	1c1a      	adds	r2, r3, #0
1000b216:	4b04      	ldr	r3, [pc, #16]	; (1000b228 <init_global_var+0x68>)
1000b218:	4798      	blx	r3
}
1000b21a:	46bd      	mov	sp, r7
1000b21c:	bd80      	pop	{r7, pc}
1000b21e:	46c0      	nop			; (mov r8, r8)
1000b220:	100166dc 	.word	0x100166dc
1000b224:	100166d4 	.word	0x100166d4
1000b228:	100133ed 	.word	0x100133ed
1000b22c:	10016cd8 	.word	0x10016cd8
1000b230:	100161f4 	.word	0x100161f4
1000b234:	000004e2 	.word	0x000004e2
1000b238:	100166e0 	.word	0x100166e0
1000b23c:	10016d00 	.word	0x10016d00
1000b240:	10016cf8 	.word	0x10016cf8
1000b244:	10017034 	.word	0x10017034

1000b248 <ble_event_task>:

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b248:	b590      	push	{r4, r7, lr}
1000b24a:	b085      	sub	sp, #20
1000b24c:	af00      	add	r7, sp, #0
1000b24e:	6078      	str	r0, [r7, #4]
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000b250:	230f      	movs	r3, #15
1000b252:	18fc      	adds	r4, r7, r3
1000b254:	490f      	ldr	r1, [pc, #60]	; (1000b294 <ble_event_task+0x4c>)
1000b256:	4a10      	ldr	r2, [pc, #64]	; (1000b298 <ble_event_task+0x50>)
1000b258:	687b      	ldr	r3, [r7, #4]
1000b25a:	1c08      	adds	r0, r1, #0
1000b25c:	1c11      	adds	r1, r2, #0
1000b25e:	1c1a      	adds	r2, r3, #0
1000b260:	4b0e      	ldr	r3, [pc, #56]	; (1000b29c <ble_event_task+0x54>)
1000b262:	4798      	blx	r3
1000b264:	1c03      	adds	r3, r0, #0
1000b266:	7023      	strb	r3, [r4, #0]
    if (status == AT_BLE_SUCCESS) 
1000b268:	230f      	movs	r3, #15
1000b26a:	18fb      	adds	r3, r7, r3
1000b26c:	781b      	ldrb	r3, [r3, #0]
1000b26e:	2b00      	cmp	r3, #0
1000b270:	d108      	bne.n	1000b284 <ble_event_task+0x3c>
    {
            ble_event_manager(event, ble_event_params);
1000b272:	4b08      	ldr	r3, [pc, #32]	; (1000b294 <ble_event_task+0x4c>)
1000b274:	781a      	ldrb	r2, [r3, #0]
1000b276:	4b08      	ldr	r3, [pc, #32]	; (1000b298 <ble_event_task+0x50>)
1000b278:	1c10      	adds	r0, r2, #0
1000b27a:	1c19      	adds	r1, r3, #0
1000b27c:	4b08      	ldr	r3, [pc, #32]	; (1000b2a0 <ble_event_task+0x58>)
1000b27e:	4798      	blx	r3
            return AT_BLE_SUCCESS;
1000b280:	2300      	movs	r3, #0
1000b282:	e002      	b.n	1000b28a <ble_event_task+0x42>
    }
    
    return status;
1000b284:	230f      	movs	r3, #15
1000b286:	18fb      	adds	r3, r7, r3
1000b288:	781b      	ldrb	r3, [r3, #0]
}
1000b28a:	1c18      	adds	r0, r3, #0
1000b28c:	46bd      	mov	sp, r7
1000b28e:	b005      	add	sp, #20
1000b290:	bd90      	pop	{r4, r7, pc}
1000b292:	46c0      	nop			; (mov r8, r8)
1000b294:	10016cf8 	.word	0x10016cf8
1000b298:	10017034 	.word	0x10017034
1000b29c:	1000f01d 	.word	0x1000f01d
1000b2a0:	1000d4d1 	.word	0x1000d4d1

1000b2a4 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b2a4:	b580      	push	{r7, lr}
1000b2a6:	b084      	sub	sp, #16
1000b2a8:	af00      	add	r7, sp, #0
1000b2aa:	6078      	str	r0, [r7, #4]
	uint8_t idx;	
	char *dev_name = NULL;
1000b2ac:	2300      	movs	r3, #0
1000b2ae:	60bb      	str	r3, [r7, #8]
	init_global_var();
1000b2b0:	4b8f      	ldr	r3, [pc, #572]	; (1000b4f0 <ble_device_init+0x24c>)
1000b2b2:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000b2b4:	4b8f      	ldr	r3, [pc, #572]	; (1000b4f4 <ble_device_init+0x250>)
1000b2b6:	1c18      	adds	r0, r3, #0
1000b2b8:	2100      	movs	r1, #0
1000b2ba:	220c      	movs	r2, #12
1000b2bc:	4b8e      	ldr	r3, [pc, #568]	; (1000b4f8 <ble_device_init+0x254>)
1000b2be:	4798      	blx	r3

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b2c0:	230f      	movs	r3, #15
1000b2c2:	18fb      	adds	r3, r7, r3
1000b2c4:	2200      	movs	r2, #0
1000b2c6:	701a      	strb	r2, [r3, #0]
1000b2c8:	e00d      	b.n	1000b2e6 <ble_device_init+0x42>
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b2ca:	230f      	movs	r3, #15
1000b2cc:	18fb      	adds	r3, r7, r3
1000b2ce:	781a      	ldrb	r2, [r3, #0]
1000b2d0:	4b8a      	ldr	r3, [pc, #552]	; (1000b4fc <ble_device_init+0x258>)
1000b2d2:	0092      	lsls	r2, r2, #2
1000b2d4:	2100      	movs	r1, #0
1000b2d6:	50d1      	str	r1, [r2, r3]
	init_global_var();

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b2d8:	230f      	movs	r3, #15
1000b2da:	18fb      	adds	r3, r7, r3
1000b2dc:	781a      	ldrb	r2, [r3, #0]
1000b2de:	230f      	movs	r3, #15
1000b2e0:	18fb      	adds	r3, r7, r3
1000b2e2:	3201      	adds	r2, #1
1000b2e4:	701a      	strb	r2, [r3, #0]
1000b2e6:	230f      	movs	r3, #15
1000b2e8:	18fb      	adds	r3, r7, r3
1000b2ea:	781b      	ldrb	r3, [r3, #0]
1000b2ec:	2b04      	cmp	r3, #4
1000b2ee:	d9ec      	bls.n	1000b2ca <ble_device_init+0x26>
	{
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b2f0:	230f      	movs	r3, #15
1000b2f2:	18fb      	adds	r3, r7, r3
1000b2f4:	2200      	movs	r2, #0
1000b2f6:	701a      	strb	r2, [r3, #0]
1000b2f8:	e00d      	b.n	1000b316 <ble_device_init+0x72>
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b2fa:	230f      	movs	r3, #15
1000b2fc:	18fb      	adds	r3, r7, r3
1000b2fe:	781a      	ldrb	r2, [r3, #0]
1000b300:	4b7f      	ldr	r3, [pc, #508]	; (1000b500 <ble_device_init+0x25c>)
1000b302:	0092      	lsls	r2, r2, #2
1000b304:	2100      	movs	r1, #0
1000b306:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b308:	230f      	movs	r3, #15
1000b30a:	18fb      	adds	r3, r7, r3
1000b30c:	781a      	ldrb	r2, [r3, #0]
1000b30e:	230f      	movs	r3, #15
1000b310:	18fb      	adds	r3, r7, r3
1000b312:	3201      	adds	r2, #1
1000b314:	701a      	strb	r2, [r3, #0]
1000b316:	230f      	movs	r3, #15
1000b318:	18fb      	adds	r3, r7, r3
1000b31a:	781b      	ldrb	r3, [r3, #0]
1000b31c:	2b04      	cmp	r3, #4
1000b31e:	d9ec      	bls.n	1000b2fa <ble_device_init+0x56>
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b320:	230f      	movs	r3, #15
1000b322:	18fb      	adds	r3, r7, r3
1000b324:	2200      	movs	r2, #0
1000b326:	701a      	strb	r2, [r3, #0]
1000b328:	e00d      	b.n	1000b346 <ble_device_init+0xa2>
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b32a:	230f      	movs	r3, #15
1000b32c:	18fb      	adds	r3, r7, r3
1000b32e:	781a      	ldrb	r2, [r3, #0]
1000b330:	4b74      	ldr	r3, [pc, #464]	; (1000b504 <ble_device_init+0x260>)
1000b332:	0092      	lsls	r2, r2, #2
1000b334:	2100      	movs	r1, #0
1000b336:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b338:	230f      	movs	r3, #15
1000b33a:	18fb      	adds	r3, r7, r3
1000b33c:	781a      	ldrb	r2, [r3, #0]
1000b33e:	230f      	movs	r3, #15
1000b340:	18fb      	adds	r3, r7, r3
1000b342:	3201      	adds	r2, #1
1000b344:	701a      	strb	r2, [r3, #0]
1000b346:	230f      	movs	r3, #15
1000b348:	18fb      	adds	r3, r7, r3
1000b34a:	781b      	ldrb	r3, [r3, #0]
1000b34c:	2b04      	cmp	r3, #4
1000b34e:	d9ec      	bls.n	1000b32a <ble_device_init+0x86>
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
1000b350:	230f      	movs	r3, #15
1000b352:	18fb      	adds	r3, r7, r3
1000b354:	2200      	movs	r2, #0
1000b356:	701a      	strb	r2, [r3, #0]
1000b358:	e00d      	b.n	1000b376 <ble_device_init+0xd2>
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b35a:	230f      	movs	r3, #15
1000b35c:	18fb      	adds	r3, r7, r3
1000b35e:	781a      	ldrb	r2, [r3, #0]
1000b360:	4b69      	ldr	r3, [pc, #420]	; (1000b508 <ble_device_init+0x264>)
1000b362:	0092      	lsls	r2, r2, #2
1000b364:	2100      	movs	r1, #0
1000b366:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
1000b368:	230f      	movs	r3, #15
1000b36a:	18fb      	adds	r3, r7, r3
1000b36c:	781a      	ldrb	r2, [r3, #0]
1000b36e:	230f      	movs	r3, #15
1000b370:	18fb      	adds	r3, r7, r3
1000b372:	3201      	adds	r2, #1
1000b374:	701a      	strb	r2, [r3, #0]
1000b376:	230f      	movs	r3, #15
1000b378:	18fb      	adds	r3, r7, r3
1000b37a:	781b      	ldrb	r3, [r3, #0]
1000b37c:	2b00      	cmp	r3, #0
1000b37e:	d0ec      	beq.n	1000b35a <ble_device_init+0xb6>
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1000b380:	230f      	movs	r3, #15
1000b382:	18fb      	adds	r3, r7, r3
1000b384:	2200      	movs	r2, #0
1000b386:	701a      	strb	r2, [r3, #0]
1000b388:	e00d      	b.n	1000b3a6 <ble_device_init+0x102>
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b38a:	230f      	movs	r3, #15
1000b38c:	18fb      	adds	r3, r7, r3
1000b38e:	781a      	ldrb	r2, [r3, #0]
1000b390:	4b5e      	ldr	r3, [pc, #376]	; (1000b50c <ble_device_init+0x268>)
1000b392:	0092      	lsls	r2, r2, #2
1000b394:	2100      	movs	r1, #0
1000b396:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1000b398:	230f      	movs	r3, #15
1000b39a:	18fb      	adds	r3, r7, r3
1000b39c:	781a      	ldrb	r2, [r3, #0]
1000b39e:	230f      	movs	r3, #15
1000b3a0:	18fb      	adds	r3, r7, r3
1000b3a2:	3201      	adds	r2, #1
1000b3a4:	701a      	strb	r2, [r3, #0]
1000b3a6:	230f      	movs	r3, #15
1000b3a8:	18fb      	adds	r3, r7, r3
1000b3aa:	781b      	ldrb	r3, [r3, #0]
1000b3ac:	2b00      	cmp	r3, #0
1000b3ae:	d0ec      	beq.n	1000b38a <ble_device_init+0xe6>
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b3b0:	230f      	movs	r3, #15
1000b3b2:	18fb      	adds	r3, r7, r3
1000b3b4:	2200      	movs	r2, #0
1000b3b6:	701a      	strb	r2, [r3, #0]
1000b3b8:	e00d      	b.n	1000b3d6 <ble_device_init+0x132>
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b3ba:	230f      	movs	r3, #15
1000b3bc:	18fb      	adds	r3, r7, r3
1000b3be:	781a      	ldrb	r2, [r3, #0]
1000b3c0:	4b53      	ldr	r3, [pc, #332]	; (1000b510 <ble_device_init+0x26c>)
1000b3c2:	0092      	lsls	r2, r2, #2
1000b3c4:	2100      	movs	r1, #0
1000b3c6:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b3c8:	230f      	movs	r3, #15
1000b3ca:	18fb      	adds	r3, r7, r3
1000b3cc:	781a      	ldrb	r2, [r3, #0]
1000b3ce:	230f      	movs	r3, #15
1000b3d0:	18fb      	adds	r3, r7, r3
1000b3d2:	3201      	adds	r2, #1
1000b3d4:	701a      	strb	r2, [r3, #0]
1000b3d6:	230f      	movs	r3, #15
1000b3d8:	18fb      	adds	r3, r7, r3
1000b3da:	781b      	ldrb	r3, [r3, #0]
1000b3dc:	2b04      	cmp	r3, #4
1000b3de:	d9ec      	bls.n	1000b3ba <ble_device_init+0x116>
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
1000b3e0:	230f      	movs	r3, #15
1000b3e2:	18fb      	adds	r3, r7, r3
1000b3e4:	2200      	movs	r2, #0
1000b3e6:	701a      	strb	r2, [r3, #0]
1000b3e8:	e00d      	b.n	1000b406 <ble_device_init+0x162>
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000b3ea:	230f      	movs	r3, #15
1000b3ec:	18fb      	adds	r3, r7, r3
1000b3ee:	781a      	ldrb	r2, [r3, #0]
1000b3f0:	4b48      	ldr	r3, [pc, #288]	; (1000b514 <ble_device_init+0x270>)
1000b3f2:	0092      	lsls	r2, r2, #2
1000b3f4:	2100      	movs	r1, #0
1000b3f6:	50d1      	str	r1, [r2, r3]
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
1000b3f8:	230f      	movs	r3, #15
1000b3fa:	18fb      	adds	r3, r7, r3
1000b3fc:	781a      	ldrb	r2, [r3, #0]
1000b3fe:	230f      	movs	r3, #15
1000b400:	18fb      	adds	r3, r7, r3
1000b402:	3201      	adds	r2, #1
1000b404:	701a      	strb	r2, [r3, #0]
1000b406:	230f      	movs	r3, #15
1000b408:	18fb      	adds	r3, r7, r3
1000b40a:	781b      	ldrb	r3, [r3, #0]
1000b40c:	2b00      	cmp	r3, #0
1000b40e:	d0ec      	beq.n	1000b3ea <ble_device_init+0x146>
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b410:	230f      	movs	r3, #15
1000b412:	18fb      	adds	r3, r7, r3
1000b414:	2200      	movs	r2, #0
1000b416:	701a      	strb	r2, [r3, #0]
1000b418:	e02d      	b.n	1000b476 <ble_device_init+0x1d2>
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b41a:	230f      	movs	r3, #15
1000b41c:	18fb      	adds	r3, r7, r3
1000b41e:	781a      	ldrb	r2, [r3, #0]
1000b420:	1c13      	adds	r3, r2, #0
1000b422:	015b      	lsls	r3, r3, #5
1000b424:	1a9b      	subs	r3, r3, r2
1000b426:	009b      	lsls	r3, r3, #2
1000b428:	4a3b      	ldr	r2, [pc, #236]	; (1000b518 <ble_device_init+0x274>)
1000b42a:	189b      	adds	r3, r3, r2
1000b42c:	1c18      	adds	r0, r3, #0
1000b42e:	2100      	movs	r1, #0
1000b430:	227c      	movs	r2, #124	; 0x7c
1000b432:	4b31      	ldr	r3, [pc, #196]	; (1000b4f8 <ble_device_init+0x254>)
1000b434:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b436:	230f      	movs	r3, #15
1000b438:	18fb      	adds	r3, r7, r3
1000b43a:	781a      	ldrb	r2, [r3, #0]
1000b43c:	4936      	ldr	r1, [pc, #216]	; (1000b518 <ble_device_init+0x274>)
1000b43e:	2058      	movs	r0, #88	; 0x58
1000b440:	1c13      	adds	r3, r2, #0
1000b442:	015b      	lsls	r3, r3, #5
1000b444:	1a9b      	subs	r3, r3, r2
1000b446:	009b      	lsls	r3, r3, #2
1000b448:	18cb      	adds	r3, r1, r3
1000b44a:	181b      	adds	r3, r3, r0
1000b44c:	2200      	movs	r2, #0
1000b44e:	719a      	strb	r2, [r3, #6]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b450:	230f      	movs	r3, #15
1000b452:	18fb      	adds	r3, r7, r3
1000b454:	781a      	ldrb	r2, [r3, #0]
1000b456:	4930      	ldr	r1, [pc, #192]	; (1000b518 <ble_device_init+0x274>)
1000b458:	1c13      	adds	r3, r2, #0
1000b45a:	015b      	lsls	r3, r3, #5
1000b45c:	1a9b      	subs	r3, r3, r2
1000b45e:	009b      	lsls	r3, r3, #2
1000b460:	18cb      	adds	r3, r1, r3
1000b462:	3310      	adds	r3, #16
1000b464:	2240      	movs	r2, #64	; 0x40
1000b466:	721a      	strb	r2, [r3, #8]
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b468:	230f      	movs	r3, #15
1000b46a:	18fb      	adds	r3, r7, r3
1000b46c:	781a      	ldrb	r2, [r3, #0]
1000b46e:	230f      	movs	r3, #15
1000b470:	18fb      	adds	r3, r7, r3
1000b472:	3201      	adds	r2, #1
1000b474:	701a      	strb	r2, [r3, #0]
1000b476:	230f      	movs	r3, #15
1000b478:	18fb      	adds	r3, r7, r3
1000b47a:	781b      	ldrb	r3, [r3, #0]
1000b47c:	2b04      	cmp	r3, #4
1000b47e:	d9cc      	bls.n	1000b41a <ble_device_init+0x176>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000b480:	4b26      	ldr	r3, [pc, #152]	; (1000b51c <ble_device_init+0x278>)
1000b482:	2200      	movs	r2, #0
1000b484:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000b486:	4b1b      	ldr	r3, [pc, #108]	; (1000b4f4 <ble_device_init+0x250>)
1000b488:	4a25      	ldr	r2, [pc, #148]	; (1000b520 <ble_device_init+0x27c>)
1000b48a:	605a      	str	r2, [r3, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
1000b48c:	4b19      	ldr	r3, [pc, #100]	; (1000b4f4 <ble_device_init+0x250>)
1000b48e:	4a25      	ldr	r2, [pc, #148]	; (1000b524 <ble_device_init+0x280>)
1000b490:	601a      	str	r2, [r3, #0]
#else
	pf_cfg.memPool.memSize = 0;
	pf_cfg.memPool.memStartAdd = NULL;
#endif
	
	ble_init(&pf_cfg);
1000b492:	4b18      	ldr	r3, [pc, #96]	; (1000b4f4 <ble_device_init+0x250>)
1000b494:	1c18      	adds	r0, r3, #0
1000b496:	4b24      	ldr	r3, [pc, #144]	; (1000b528 <ble_device_init+0x284>)
1000b498:	4798      	blx	r3

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000b49a:	4b24      	ldr	r3, [pc, #144]	; (1000b52c <ble_device_init+0x288>)
1000b49c:	2000      	movs	r0, #0
1000b49e:	2100      	movs	r1, #0
1000b4a0:	1c1a      	adds	r2, r3, #0
1000b4a2:	4b23      	ldr	r3, [pc, #140]	; (1000b530 <ble_device_init+0x28c>)
1000b4a4:	4798      	blx	r3
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b4a6:	4b23      	ldr	r3, [pc, #140]	; (1000b534 <ble_device_init+0x290>)
1000b4a8:	2000      	movs	r0, #0
1000b4aa:	2102      	movs	r1, #2
1000b4ac:	1c1a      	adds	r2, r3, #0
1000b4ae:	4b20      	ldr	r3, [pc, #128]	; (1000b530 <ble_device_init+0x28c>)
1000b4b0:	4798      	blx	r3
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
1000b4b2:	4b21      	ldr	r3, [pc, #132]	; (1000b538 <ble_device_init+0x294>)
1000b4b4:	60bb      	str	r3, [r7, #8]
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000b4b6:	68bb      	ldr	r3, [r7, #8]
1000b4b8:	1c18      	adds	r0, r3, #0
1000b4ba:	4b20      	ldr	r3, [pc, #128]	; (1000b53c <ble_device_init+0x298>)
1000b4bc:	4798      	blx	r3
1000b4be:	1c03      	adds	r3, r0, #0
1000b4c0:	b2db      	uxtb	r3, r3
1000b4c2:	68ba      	ldr	r2, [r7, #8]
1000b4c4:	1c10      	adds	r0, r2, #0
1000b4c6:	1c19      	adds	r1, r3, #0
1000b4c8:	4b1d      	ldr	r3, [pc, #116]	; (1000b540 <ble_device_init+0x29c>)
1000b4ca:	4798      	blx	r3
1000b4cc:	1e03      	subs	r3, r0, #0
1000b4ce:	d007      	beq.n	1000b4e0 <ble_device_init+0x23c>
	{
		DBG_LOG("\n\r[ble_device_init]\n\revice name set failed");
1000b4d0:	4b1c      	ldr	r3, [pc, #112]	; (1000b544 <ble_device_init+0x2a0>)
1000b4d2:	1c18      	adds	r0, r3, #0
1000b4d4:	4b1c      	ldr	r3, [pc, #112]	; (1000b548 <ble_device_init+0x2a4>)
1000b4d6:	4798      	blx	r3
1000b4d8:	4b1c      	ldr	r3, [pc, #112]	; (1000b54c <ble_device_init+0x2a8>)
1000b4da:	1c18      	adds	r0, r3, #0
1000b4dc:	4b1c      	ldr	r3, [pc, #112]	; (1000b550 <ble_device_init+0x2ac>)
1000b4de:	4798      	blx	r3
	}
	
	ble_set_dev_config(addr);	
1000b4e0:	687b      	ldr	r3, [r7, #4]
1000b4e2:	1c18      	adds	r0, r3, #0
1000b4e4:	4b1b      	ldr	r3, [pc, #108]	; (1000b554 <ble_device_init+0x2b0>)
1000b4e6:	4798      	blx	r3
}
1000b4e8:	46bd      	mov	sp, r7
1000b4ea:	b004      	add	sp, #16
1000b4ec:	bd80      	pop	{r7, pc}
1000b4ee:	46c0      	nop			; (mov r8, r8)
1000b4f0:	1000b1c1 	.word	0x1000b1c1
1000b4f4:	10016cec 	.word	0x10016cec
1000b4f8:	100133ed 	.word	0x100133ed
1000b4fc:	10016cb0 	.word	0x10016cb0
1000b500:	10016cc4 	.word	0x10016cc4
1000b504:	10016a18 	.word	0x10016a18
1000b508:	10016cfc 	.word	0x10016cfc
1000b50c:	10016a14 	.word	0x10016a14
1000b510:	10016c9c 	.word	0x10016c9c
1000b514:	10017240 	.word	0x10017240
1000b518:	10016a2c 	.word	0x10016a2c
1000b51c:	10016c98 	.word	0x10016c98
1000b520:	000004e2 	.word	0x000004e2
1000b524:	100161f4 	.word	0x100161f4
1000b528:	1000b595 	.word	0x1000b595
1000b52c:	10014ffc 	.word	0x10014ffc
1000b530:	1000b779 	.word	0x1000b779
1000b534:	10015048 	.word	0x10015048
1000b538:	10015070 	.word	0x10015070
1000b53c:	100136c9 	.word	0x100136c9
1000b540:	1000b559 	.word	0x1000b559
1000b544:	1001507c 	.word	0x1001507c
1000b548:	1001351d 	.word	0x1001351d
1000b54c:	10015080 	.word	0x10015080
1000b550:	100133fd 	.word	0x100133fd
1000b554:	1000b5fd 	.word	0x1000b5fd

1000b558 <ble_set_device_name>:

/** @brief set device name to BLE Device*/
at_ble_status_t ble_set_device_name(uint8_t *name, uint8_t name_len)
{
1000b558:	b580      	push	{r7, lr}
1000b55a:	b082      	sub	sp, #8
1000b55c:	af00      	add	r7, sp, #0
1000b55e:	6078      	str	r0, [r7, #4]
1000b560:	1c0a      	adds	r2, r1, #0
1000b562:	1cfb      	adds	r3, r7, #3
1000b564:	701a      	strb	r2, [r3, #0]
	if ((name == NULL) || (name_len < 1))
1000b566:	687b      	ldr	r3, [r7, #4]
1000b568:	2b00      	cmp	r3, #0
1000b56a:	d003      	beq.n	1000b574 <ble_set_device_name+0x1c>
1000b56c:	1cfb      	adds	r3, r7, #3
1000b56e:	781b      	ldrb	r3, [r3, #0]
1000b570:	2b00      	cmp	r3, #0
1000b572:	d101      	bne.n	1000b578 <ble_set_device_name+0x20>
	{
		return AT_BLE_INVALID_PARAM;
1000b574:	23cf      	movs	r3, #207	; 0xcf
1000b576:	e007      	b.n	1000b588 <ble_set_device_name+0x30>
	}
	return at_ble_device_name_set(name, name_len);
1000b578:	687a      	ldr	r2, [r7, #4]
1000b57a:	1cfb      	adds	r3, r7, #3
1000b57c:	781b      	ldrb	r3, [r3, #0]
1000b57e:	1c10      	adds	r0, r2, #0
1000b580:	1c19      	adds	r1, r3, #0
1000b582:	4b03      	ldr	r3, [pc, #12]	; (1000b590 <ble_set_device_name+0x38>)
1000b584:	4798      	blx	r3
1000b586:	1c03      	adds	r3, r0, #0
}
1000b588:	1c18      	adds	r0, r3, #0
1000b58a:	46bd      	mov	sp, r7
1000b58c:	b002      	add	sp, #8
1000b58e:	bd80      	pop	{r7, pc}
1000b590:	1000f6dd 	.word	0x1000f6dd

1000b594 <ble_init>:

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
1000b594:	b580      	push	{r7, lr}
1000b596:	b082      	sub	sp, #8
1000b598:	af00      	add	r7, sp, #0
1000b59a:	6078      	str	r0, [r7, #4]
	/* Initialize the platform */
	DBG_LOG("\n\r[ble_init]\n\rinitializing SAMB11");
1000b59c:	4b10      	ldr	r3, [pc, #64]	; (1000b5e0 <ble_init+0x4c>)
1000b59e:	1c18      	adds	r0, r3, #0
1000b5a0:	4b10      	ldr	r3, [pc, #64]	; (1000b5e4 <ble_init+0x50>)
1000b5a2:	4798      	blx	r3
1000b5a4:	4b10      	ldr	r3, [pc, #64]	; (1000b5e8 <ble_init+0x54>)
1000b5a6:	1c18      	adds	r0, r3, #0
1000b5a8:	4b10      	ldr	r3, [pc, #64]	; (1000b5ec <ble_init+0x58>)
1000b5aa:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000b5ac:	687b      	ldr	r3, [r7, #4]
1000b5ae:	1c18      	adds	r0, r3, #0
1000b5b0:	4b0f      	ldr	r3, [pc, #60]	; (1000b5f0 <ble_init+0x5c>)
1000b5b2:	4798      	blx	r3
1000b5b4:	1e03      	subs	r3, r0, #0
1000b5b6:	d010      	beq.n	1000b5da <ble_init+0x46>
	{
		DBG_LOG("\n\r[ble_init]\n\rSAMB11 Initialization failed");
1000b5b8:	4b09      	ldr	r3, [pc, #36]	; (1000b5e0 <ble_init+0x4c>)
1000b5ba:	1c18      	adds	r0, r3, #0
1000b5bc:	4b09      	ldr	r3, [pc, #36]	; (1000b5e4 <ble_init+0x50>)
1000b5be:	4798      	blx	r3
1000b5c0:	4b0c      	ldr	r3, [pc, #48]	; (1000b5f4 <ble_init+0x60>)
1000b5c2:	1c18      	adds	r0, r3, #0
1000b5c4:	4b09      	ldr	r3, [pc, #36]	; (1000b5ec <ble_init+0x58>)
1000b5c6:	4798      	blx	r3
		DBG_LOG("\n\r[ble_init]\n\rplease check the power and connection / hardware connector");	
1000b5c8:	4b05      	ldr	r3, [pc, #20]	; (1000b5e0 <ble_init+0x4c>)
1000b5ca:	1c18      	adds	r0, r3, #0
1000b5cc:	4b05      	ldr	r3, [pc, #20]	; (1000b5e4 <ble_init+0x50>)
1000b5ce:	4798      	blx	r3
1000b5d0:	4b09      	ldr	r3, [pc, #36]	; (1000b5f8 <ble_init+0x64>)
1000b5d2:	1c18      	adds	r0, r3, #0
1000b5d4:	4b05      	ldr	r3, [pc, #20]	; (1000b5ec <ble_init+0x58>)
1000b5d6:	4798      	blx	r3
		while(1);
1000b5d8:	e7fe      	b.n	1000b5d8 <ble_init+0x44>
	}
}
1000b5da:	46bd      	mov	sp, r7
1000b5dc:	b002      	add	sp, #8
1000b5de:	bd80      	pop	{r7, pc}
1000b5e0:	1001507c 	.word	0x1001507c
1000b5e4:	1001351d 	.word	0x1001351d
1000b5e8:	100150ac 	.word	0x100150ac
1000b5ec:	100133fd 	.word	0x100133fd
1000b5f0:	1000f7c5 	.word	0x1000f7c5
1000b5f4:	100150d0 	.word	0x100150d0
1000b5f8:	100150fc 	.word	0x100150fc

1000b5fc <ble_set_dev_config>:


/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
1000b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b5fe:	b093      	sub	sp, #76	; 0x4c
1000b600:	af04      	add	r7, sp, #16
1000b602:	6078      	str	r0, [r7, #4]
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b604:	2308      	movs	r3, #8
1000b606:	18fa      	adds	r2, r7, r3
1000b608:	4b4d      	ldr	r3, [pc, #308]	; (1000b740 <ble_set_dev_config+0x144>)
1000b60a:	1c11      	adds	r1, r2, #0
1000b60c:	1c1a      	adds	r2, r3, #0
1000b60e:	2307      	movs	r3, #7
1000b610:	1c08      	adds	r0, r1, #0
1000b612:	1c11      	adds	r1, r2, #0
1000b614:	1c1a      	adds	r2, r3, #0
1000b616:	4b4b      	ldr	r3, [pc, #300]	; (1000b744 <ble_set_dev_config+0x148>)
1000b618:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b61a:	2310      	movs	r3, #16
1000b61c:	18fb      	adds	r3, r7, r3
1000b61e:	1c18      	adds	r0, r3, #0
1000b620:	2100      	movs	r1, #0
1000b622:	2226      	movs	r2, #38	; 0x26
1000b624:	4b48      	ldr	r3, [pc, #288]	; (1000b748 <ble_set_dev_config+0x14c>)
1000b626:	4798      	blx	r3
	
	if (addr == NULL)
1000b628:	687b      	ldr	r3, [r7, #4]
1000b62a:	2b00      	cmp	r3, #0
1000b62c:	d111      	bne.n	1000b652 <ble_set_dev_config+0x56>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b62e:	2308      	movs	r3, #8
1000b630:	18fb      	adds	r3, r7, r3
1000b632:	1c18      	adds	r0, r3, #0
1000b634:	4b45      	ldr	r3, [pc, #276]	; (1000b74c <ble_set_dev_config+0x150>)
1000b636:	4798      	blx	r3
1000b638:	1e03      	subs	r3, r0, #0
1000b63a:	d007      	beq.n	1000b64c <ble_set_dev_config+0x50>
		{
			DBG_LOG("\n\r[ble_set_dev_config]\n\rBD address get failed");
1000b63c:	4b44      	ldr	r3, [pc, #272]	; (1000b750 <ble_set_dev_config+0x154>)
1000b63e:	1c18      	adds	r0, r3, #0
1000b640:	4b44      	ldr	r3, [pc, #272]	; (1000b754 <ble_set_dev_config+0x158>)
1000b642:	4798      	blx	r3
1000b644:	4b44      	ldr	r3, [pc, #272]	; (1000b758 <ble_set_dev_config+0x15c>)
1000b646:	1c18      	adds	r0, r3, #0
1000b648:	4b44      	ldr	r3, [pc, #272]	; (1000b75c <ble_set_dev_config+0x160>)
1000b64a:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000b64c:	2308      	movs	r3, #8
1000b64e:	18fb      	adds	r3, r7, r3
1000b650:	607b      	str	r3, [r7, #4]
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b652:	4b3f      	ldr	r3, [pc, #252]	; (1000b750 <ble_set_dev_config+0x154>)
1000b654:	1c18      	adds	r0, r3, #0
1000b656:	4b3f      	ldr	r3, [pc, #252]	; (1000b754 <ble_set_dev_config+0x158>)
1000b658:	4798      	blx	r3
	addr->addr[5],
1000b65a:	687b      	ldr	r3, [r7, #4]
1000b65c:	799b      	ldrb	r3, [r3, #6]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b65e:	603b      	str	r3, [r7, #0]
	addr->addr[5],
	addr->addr[4],
1000b660:	687b      	ldr	r3, [r7, #4]
1000b662:	795b      	ldrb	r3, [r3, #5]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b664:	1c1e      	adds	r6, r3, #0
	addr->addr[5],
	addr->addr[4],
	addr->addr[3],
1000b666:	687b      	ldr	r3, [r7, #4]
1000b668:	791b      	ldrb	r3, [r3, #4]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b66a:	1c1d      	adds	r5, r3, #0
	addr->addr[5],
	addr->addr[4],
	addr->addr[3],
	addr->addr[2],
1000b66c:	687b      	ldr	r3, [r7, #4]
1000b66e:	78db      	ldrb	r3, [r3, #3]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b670:	1c1c      	adds	r4, r3, #0
	addr->addr[5],
	addr->addr[4],
	addr->addr[3],
	addr->addr[2],
	addr->addr[1],
1000b672:	687b      	ldr	r3, [r7, #4]
1000b674:	789b      	ldrb	r3, [r3, #2]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b676:	1c18      	adds	r0, r3, #0
	addr->addr[5],
	addr->addr[4],
	addr->addr[3],
	addr->addr[2],
	addr->addr[1],
	addr->addr[0], addr->type);
1000b678:	687b      	ldr	r3, [r7, #4]
1000b67a:	785b      	ldrb	r3, [r3, #1]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b67c:	1c19      	adds	r1, r3, #0
	addr->addr[5],
	addr->addr[4],
	addr->addr[3],
	addr->addr[2],
	addr->addr[1],
	addr->addr[0], addr->type);
1000b67e:	687b      	ldr	r3, [r7, #4]
1000b680:	781b      	ldrb	r3, [r3, #0]
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("\n\r[ble_set_dev_config]\n\rBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b682:	1c1a      	adds	r2, r3, #0
1000b684:	4b36      	ldr	r3, [pc, #216]	; (1000b760 <ble_set_dev_config+0x164>)
1000b686:	9400      	str	r4, [sp, #0]
1000b688:	9001      	str	r0, [sp, #4]
1000b68a:	9102      	str	r1, [sp, #8]
1000b68c:	9203      	str	r2, [sp, #12]
1000b68e:	1c18      	adds	r0, r3, #0
1000b690:	6839      	ldr	r1, [r7, #0]
1000b692:	1c32      	adds	r2, r6, #0
1000b694:	1c2b      	adds	r3, r5, #0
1000b696:	4c31      	ldr	r4, [pc, #196]	; (1000b75c <ble_set_dev_config+0x160>)
1000b698:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000b69a:	2310      	movs	r3, #16
1000b69c:	18fb      	adds	r3, r7, r3
1000b69e:	220a      	movs	r2, #10
1000b6a0:	701a      	strb	r2, [r3, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b6a2:	2310      	movs	r3, #16
1000b6a4:	18fb      	adds	r3, r7, r3
1000b6a6:	4a2f      	ldr	r2, [pc, #188]	; (1000b764 <ble_set_dev_config+0x168>)
1000b6a8:	805a      	strh	r2, [r3, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b6aa:	2310      	movs	r3, #16
1000b6ac:	18fb      	adds	r3, r7, r3
1000b6ae:	687a      	ldr	r2, [r7, #4]
1000b6b0:	3304      	adds	r3, #4
1000b6b2:	1c11      	adds	r1, r2, #0
1000b6b4:	2207      	movs	r2, #7
1000b6b6:	1c18      	adds	r0, r3, #0
1000b6b8:	4b22      	ldr	r3, [pc, #136]	; (1000b744 <ble_set_dev_config+0x148>)
1000b6ba:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000b6bc:	2310      	movs	r3, #16
1000b6be:	18fb      	adds	r3, r7, r3
1000b6c0:	2200      	movs	r2, #0
1000b6c2:	76da      	strb	r2, [r3, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000b6c4:	2310      	movs	r3, #16
1000b6c6:	18fb      	adds	r3, r7, r3
1000b6c8:	2200      	movs	r2, #0
1000b6ca:	771a      	strb	r2, [r3, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000b6cc:	2310      	movs	r3, #16
1000b6ce:	18fb      	adds	r3, r7, r3
1000b6d0:	2200      	movs	r2, #0
1000b6d2:	775a      	strb	r2, [r3, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000b6d4:	2310      	movs	r3, #16
1000b6d6:	18fb      	adds	r3, r7, r3
1000b6d8:	2200      	movs	r2, #0
1000b6da:	779a      	strb	r2, [r3, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000b6dc:	2310      	movs	r3, #16
1000b6de:	18fb      	adds	r3, r7, r3
1000b6e0:	2200      	movs	r2, #0
1000b6e2:	77da      	strb	r2, [r3, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b6e4:	2310      	movs	r3, #16
1000b6e6:	18fb      	adds	r3, r7, r3
1000b6e8:	2200      	movs	r2, #0
1000b6ea:	841a      	strh	r2, [r3, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b6ec:	2310      	movs	r3, #16
1000b6ee:	18fb      	adds	r3, r7, r3
1000b6f0:	2200      	movs	r2, #0
1000b6f2:	845a      	strh	r2, [r3, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000b6f4:	2310      	movs	r3, #16
1000b6f6:	18fb      	adds	r3, r7, r3
1000b6f8:	2280      	movs	r2, #128	; 0x80
1000b6fa:	0092      	lsls	r2, r2, #2
1000b6fc:	849a      	strh	r2, [r3, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000b6fe:	2310      	movs	r3, #16
1000b700:	18fb      	adds	r3, r7, r3
1000b702:	1c18      	adds	r0, r3, #0
1000b704:	4b18      	ldr	r3, [pc, #96]	; (1000b768 <ble_set_dev_config+0x16c>)
1000b706:	4798      	blx	r3
1000b708:	1e03      	subs	r3, r0, #0
1000b70a:	d007      	beq.n	1000b71c <ble_set_dev_config+0x120>
	{
		DBG_LOG("\n\r[ble_set_dev_config]\n\rset BLE Device configuration failed");
1000b70c:	4b10      	ldr	r3, [pc, #64]	; (1000b750 <ble_set_dev_config+0x154>)
1000b70e:	1c18      	adds	r0, r3, #0
1000b710:	4b10      	ldr	r3, [pc, #64]	; (1000b754 <ble_set_dev_config+0x158>)
1000b712:	4798      	blx	r3
1000b714:	4b15      	ldr	r3, [pc, #84]	; (1000b76c <ble_set_dev_config+0x170>)
1000b716:	1c18      	adds	r0, r3, #0
1000b718:	4b10      	ldr	r3, [pc, #64]	; (1000b75c <ble_set_dev_config+0x160>)
1000b71a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000b71c:	687b      	ldr	r3, [r7, #4]
1000b71e:	1c18      	adds	r0, r3, #0
1000b720:	4b13      	ldr	r3, [pc, #76]	; (1000b770 <ble_set_dev_config+0x174>)
1000b722:	4798      	blx	r3
1000b724:	1e03      	subs	r3, r0, #0
1000b726:	d007      	beq.n	1000b738 <ble_set_dev_config+0x13c>
	{
		DBG_LOG("\n\r[ble_set_dev_config]\n\rset BLE Device Address failed");
1000b728:	4b09      	ldr	r3, [pc, #36]	; (1000b750 <ble_set_dev_config+0x154>)
1000b72a:	1c18      	adds	r0, r3, #0
1000b72c:	4b09      	ldr	r3, [pc, #36]	; (1000b754 <ble_set_dev_config+0x158>)
1000b72e:	4798      	blx	r3
1000b730:	4b10      	ldr	r3, [pc, #64]	; (1000b774 <ble_set_dev_config+0x178>)
1000b732:	1c18      	adds	r0, r3, #0
1000b734:	4b09      	ldr	r3, [pc, #36]	; (1000b75c <ble_set_dev_config+0x160>)
1000b736:	4798      	blx	r3
	}
}
1000b738:	46bd      	mov	sp, r7
1000b73a:	b00f      	add	sp, #60	; 0x3c
1000b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b73e:	46c0      	nop			; (mov r8, r8)
1000b740:	1001523c 	.word	0x1001523c
1000b744:	100133db 	.word	0x100133db
1000b748:	100133ed 	.word	0x100133ed
1000b74c:	1000f711 	.word	0x1000f711
1000b750:	1001507c 	.word	0x1001507c
1000b754:	1001351d 	.word	0x1001351d
1000b758:	10015148 	.word	0x10015148
1000b75c:	100133fd 	.word	0x100133fd
1000b760:	10015178 	.word	0x10015178
1000b764:	00003a98 	.word	0x00003a98
1000b768:	1000f735 	.word	0x1000f735
1000b76c:	100151c8 	.word	0x100151c8
1000b770:	1000f95d 	.word	0x1000f95d
1000b774:	10015204 	.word	0x10015204

1000b778 <ble_mgr_events_callback_handler>:

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000b778:	b580      	push	{r7, lr}
1000b77a:	b084      	sub	sp, #16
1000b77c:	af00      	add	r7, sp, #0
1000b77e:	603a      	str	r2, [r7, #0]
1000b780:	1dfb      	adds	r3, r7, #7
1000b782:	1c02      	adds	r2, r0, #0
1000b784:	701a      	strb	r2, [r3, #0]
1000b786:	1dbb      	adds	r3, r7, #6
1000b788:	1c0a      	adds	r2, r1, #0
1000b78a:	701a      	strb	r2, [r3, #0]
	uint8_t idx;
	uint8_t max_event_handler = 0;
1000b78c:	230e      	movs	r3, #14
1000b78e:	18fb      	adds	r3, r7, r3
1000b790:	2200      	movs	r2, #0
1000b792:	701a      	strb	r2, [r3, #0]
	bool status = true;
1000b794:	230d      	movs	r3, #13
1000b796:	18fb      	adds	r3, r7, r3
1000b798:	2201      	movs	r2, #1
1000b79a:	701a      	strb	r2, [r3, #0]
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
1000b79c:	2300      	movs	r3, #0
1000b79e:	60bb      	str	r3, [r7, #8]
	if (ble_event_handler != NULL)
1000b7a0:	683b      	ldr	r3, [r7, #0]
1000b7a2:	2b00      	cmp	r3, #0
1000b7a4:	d100      	bne.n	1000b7a8 <ble_mgr_events_callback_handler+0x30>
1000b7a6:	e0a8      	b.n	1000b8fa <ble_mgr_events_callback_handler+0x182>
	{
		switch(event_type)
1000b7a8:	1dbb      	adds	r3, r7, #6
1000b7aa:	781b      	ldrb	r3, [r3, #0]
1000b7ac:	2b06      	cmp	r3, #6
1000b7ae:	d835      	bhi.n	1000b81c <ble_mgr_events_callback_handler+0xa4>
1000b7b0:	009a      	lsls	r2, r3, #2
1000b7b2:	4b57      	ldr	r3, [pc, #348]	; (1000b910 <ble_mgr_events_callback_handler+0x198>)
1000b7b4:	18d3      	adds	r3, r2, r3
1000b7b6:	681b      	ldr	r3, [r3, #0]
1000b7b8:	469f      	mov	pc, r3
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000b7ba:	4b56      	ldr	r3, [pc, #344]	; (1000b914 <ble_mgr_events_callback_handler+0x19c>)
1000b7bc:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000b7be:	230e      	movs	r3, #14
1000b7c0:	18fb      	adds	r3, r7, r3
1000b7c2:	2205      	movs	r2, #5
1000b7c4:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b7c6:	e02e      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000b7c8:	4b53      	ldr	r3, [pc, #332]	; (1000b918 <ble_mgr_events_callback_handler+0x1a0>)
1000b7ca:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000b7cc:	230e      	movs	r3, #14
1000b7ce:	18fb      	adds	r3, r7, r3
1000b7d0:	2205      	movs	r2, #5
1000b7d2:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b7d4:	e027      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000b7d6:	4b51      	ldr	r3, [pc, #324]	; (1000b91c <ble_mgr_events_callback_handler+0x1a4>)
1000b7d8:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000b7da:	230e      	movs	r3, #14
1000b7dc:	18fb      	adds	r3, r7, r3
1000b7de:	2205      	movs	r2, #5
1000b7e0:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b7e2:	e020      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000b7e4:	4b4e      	ldr	r3, [pc, #312]	; (1000b920 <ble_mgr_events_callback_handler+0x1a8>)
1000b7e6:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000b7e8:	230e      	movs	r3, #14
1000b7ea:	18fb      	adds	r3, r7, r3
1000b7ec:	2201      	movs	r2, #1
1000b7ee:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b7f0:	e019      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000b7f2:	4b4c      	ldr	r3, [pc, #304]	; (1000b924 <ble_mgr_events_callback_handler+0x1ac>)
1000b7f4:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000b7f6:	230e      	movs	r3, #14
1000b7f8:	18fb      	adds	r3, r7, r3
1000b7fa:	2201      	movs	r2, #1
1000b7fc:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b7fe:	e012      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000b800:	4b49      	ldr	r3, [pc, #292]	; (1000b928 <ble_mgr_events_callback_handler+0x1b0>)
1000b802:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000b804:	230e      	movs	r3, #14
1000b806:	18fb      	adds	r3, r7, r3
1000b808:	2205      	movs	r2, #5
1000b80a:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b80c:	e00b      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000b80e:	4b47      	ldr	r3, [pc, #284]	; (1000b92c <ble_mgr_events_callback_handler+0x1b4>)
1000b810:	60bb      	str	r3, [r7, #8]
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000b812:	230e      	movs	r3, #14
1000b814:	18fb      	adds	r3, r7, r3
1000b816:	2201      	movs	r2, #1
1000b818:	701a      	strb	r2, [r3, #0]
			}
			break;
1000b81a:	e004      	b.n	1000b826 <ble_mgr_events_callback_handler+0xae>
			
			default:
			{
				status = false; //Invalid Parameter
1000b81c:	230d      	movs	r3, #13
1000b81e:	18fb      	adds	r3, r7, r3
1000b820:	2200      	movs	r2, #0
1000b822:	701a      	strb	r2, [r3, #0]
			}			
			break;
1000b824:	46c0      	nop			; (mov r8, r8)
		}
		
		if (status)
1000b826:	230d      	movs	r3, #13
1000b828:	18fb      	adds	r3, r7, r3
1000b82a:	781b      	ldrb	r3, [r3, #0]
1000b82c:	2b00      	cmp	r3, #0
1000b82e:	d068      	beq.n	1000b902 <ble_mgr_events_callback_handler+0x18a>
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b830:	230d      	movs	r3, #13
1000b832:	18fb      	adds	r3, r7, r3
1000b834:	2200      	movs	r2, #0
1000b836:	701a      	strb	r2, [r3, #0]
			if (event_cb_type == REGISTER_CALL_BACK)
1000b838:	1dfb      	adds	r3, r7, #7
1000b83a:	781b      	ldrb	r3, [r3, #0]
1000b83c:	2b00      	cmp	r3, #0
1000b83e:	d12b      	bne.n	1000b898 <ble_mgr_events_callback_handler+0x120>
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b840:	230f      	movs	r3, #15
1000b842:	18fb      	adds	r3, r7, r3
1000b844:	2200      	movs	r2, #0
1000b846:	701a      	strb	r2, [r3, #0]
1000b848:	e01d      	b.n	1000b886 <ble_mgr_events_callback_handler+0x10e>
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b84a:	230f      	movs	r3, #15
1000b84c:	18fb      	adds	r3, r7, r3
1000b84e:	781b      	ldrb	r3, [r3, #0]
1000b850:	009b      	lsls	r3, r3, #2
1000b852:	68ba      	ldr	r2, [r7, #8]
1000b854:	18d3      	adds	r3, r2, r3
1000b856:	681b      	ldr	r3, [r3, #0]
1000b858:	2b00      	cmp	r3, #0
1000b85a:	d10d      	bne.n	1000b878 <ble_mgr_events_callback_handler+0x100>
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b85c:	230f      	movs	r3, #15
1000b85e:	18fb      	adds	r3, r7, r3
1000b860:	781b      	ldrb	r3, [r3, #0]
1000b862:	009b      	lsls	r3, r3, #2
1000b864:	68ba      	ldr	r2, [r7, #8]
1000b866:	18d3      	adds	r3, r2, r3
1000b868:	683a      	ldr	r2, [r7, #0]
1000b86a:	601a      	str	r2, [r3, #0]
						status = true; //Successfully registered to table
1000b86c:	230d      	movs	r3, #13
1000b86e:	18fb      	adds	r3, r7, r3
1000b870:	2201      	movs	r2, #1
1000b872:	701a      	strb	r2, [r3, #0]
						break;
1000b874:	46c0      	nop			; (mov r8, r8)
1000b876:	e044      	b.n	1000b902 <ble_mgr_events_callback_handler+0x18a>
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b878:	230f      	movs	r3, #15
1000b87a:	18fb      	adds	r3, r7, r3
1000b87c:	781a      	ldrb	r2, [r3, #0]
1000b87e:	230f      	movs	r3, #15
1000b880:	18fb      	adds	r3, r7, r3
1000b882:	3201      	adds	r2, #1
1000b884:	701a      	strb	r2, [r3, #0]
1000b886:	230f      	movs	r3, #15
1000b888:	18fa      	adds	r2, r7, r3
1000b88a:	230e      	movs	r3, #14
1000b88c:	18fb      	adds	r3, r7, r3
1000b88e:	7812      	ldrb	r2, [r2, #0]
1000b890:	781b      	ldrb	r3, [r3, #0]
1000b892:	429a      	cmp	r2, r3
1000b894:	d3d9      	bcc.n	1000b84a <ble_mgr_events_callback_handler+0xd2>
1000b896:	e034      	b.n	1000b902 <ble_mgr_events_callback_handler+0x18a>
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000b898:	1dfb      	adds	r3, r7, #7
1000b89a:	781b      	ldrb	r3, [r3, #0]
1000b89c:	2b01      	cmp	r3, #1
1000b89e:	d130      	bne.n	1000b902 <ble_mgr_events_callback_handler+0x18a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b8a0:	230f      	movs	r3, #15
1000b8a2:	18fb      	adds	r3, r7, r3
1000b8a4:	2200      	movs	r2, #0
1000b8a6:	701a      	strb	r2, [r3, #0]
1000b8a8:	e01e      	b.n	1000b8e8 <ble_mgr_events_callback_handler+0x170>
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b8aa:	230f      	movs	r3, #15
1000b8ac:	18fb      	adds	r3, r7, r3
1000b8ae:	781b      	ldrb	r3, [r3, #0]
1000b8b0:	009b      	lsls	r3, r3, #2
1000b8b2:	68ba      	ldr	r2, [r7, #8]
1000b8b4:	18d3      	adds	r3, r2, r3
1000b8b6:	681a      	ldr	r2, [r3, #0]
1000b8b8:	683b      	ldr	r3, [r7, #0]
1000b8ba:	429a      	cmp	r2, r3
1000b8bc:	d10d      	bne.n	1000b8da <ble_mgr_events_callback_handler+0x162>
					{
						ble_event_cb_ptr[idx] = NULL;
1000b8be:	230f      	movs	r3, #15
1000b8c0:	18fb      	adds	r3, r7, r3
1000b8c2:	781b      	ldrb	r3, [r3, #0]
1000b8c4:	009b      	lsls	r3, r3, #2
1000b8c6:	68ba      	ldr	r2, [r7, #8]
1000b8c8:	18d3      	adds	r3, r2, r3
1000b8ca:	2200      	movs	r2, #0
1000b8cc:	601a      	str	r2, [r3, #0]
						status = true;//Successfully unregistered from table
1000b8ce:	230d      	movs	r3, #13
1000b8d0:	18fb      	adds	r3, r7, r3
1000b8d2:	2201      	movs	r2, #1
1000b8d4:	701a      	strb	r2, [r3, #0]
						break;
1000b8d6:	46c0      	nop			; (mov r8, r8)
1000b8d8:	e013      	b.n	1000b902 <ble_mgr_events_callback_handler+0x18a>
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b8da:	230f      	movs	r3, #15
1000b8dc:	18fb      	adds	r3, r7, r3
1000b8de:	781a      	ldrb	r2, [r3, #0]
1000b8e0:	230f      	movs	r3, #15
1000b8e2:	18fb      	adds	r3, r7, r3
1000b8e4:	3201      	adds	r2, #1
1000b8e6:	701a      	strb	r2, [r3, #0]
1000b8e8:	230f      	movs	r3, #15
1000b8ea:	18fa      	adds	r2, r7, r3
1000b8ec:	230e      	movs	r3, #14
1000b8ee:	18fb      	adds	r3, r7, r3
1000b8f0:	7812      	ldrb	r2, [r2, #0]
1000b8f2:	781b      	ldrb	r3, [r3, #0]
1000b8f4:	429a      	cmp	r2, r3
1000b8f6:	d3d8      	bcc.n	1000b8aa <ble_mgr_events_callback_handler+0x132>
1000b8f8:	e003      	b.n	1000b902 <ble_mgr_events_callback_handler+0x18a>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000b8fa:	230d      	movs	r3, #13
1000b8fc:	18fb      	adds	r3, r7, r3
1000b8fe:	2200      	movs	r2, #0
1000b900:	701a      	strb	r2, [r3, #0]
	}
	return status;
1000b902:	230d      	movs	r3, #13
1000b904:	18fb      	adds	r3, r7, r3
1000b906:	781b      	ldrb	r3, [r3, #0]
}
1000b908:	1c18      	adds	r0, r3, #0
1000b90a:	46bd      	mov	sp, r7
1000b90c:	b004      	add	sp, #16
1000b90e:	bd80      	pop	{r7, pc}
1000b910:	10015eec 	.word	0x10015eec
1000b914:	10016cb0 	.word	0x10016cb0
1000b918:	10016cc4 	.word	0x10016cc4
1000b91c:	10016a18 	.word	0x10016a18
1000b920:	10016cfc 	.word	0x10016cfc
1000b924:	10016a14 	.word	0x10016a14
1000b928:	10016c9c 	.word	0x10016c9c
1000b92c:	10017240 	.word	0x10017240

1000b930 <ble_undefined_event_handler>:

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000b930:	b580      	push	{r7, lr}
1000b932:	b082      	sub	sp, #8
1000b934:	af00      	add	r7, sp, #0
1000b936:	6078      	str	r0, [r7, #4]
	DBG_LOG_DEV("Undefined Event Received");
1000b938:	4b06      	ldr	r3, [pc, #24]	; (1000b954 <ble_undefined_event_handler+0x24>)
1000b93a:	1c18      	adds	r0, r3, #0
1000b93c:	4b06      	ldr	r3, [pc, #24]	; (1000b958 <ble_undefined_event_handler+0x28>)
1000b93e:	4798      	blx	r3
1000b940:	4b06      	ldr	r3, [pc, #24]	; (1000b95c <ble_undefined_event_handler+0x2c>)
1000b942:	1c18      	adds	r0, r3, #0
1000b944:	4b06      	ldr	r3, [pc, #24]	; (1000b960 <ble_undefined_event_handler+0x30>)
1000b946:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
1000b948:	2300      	movs	r3, #0
}
1000b94a:	1c18      	adds	r0, r3, #0
1000b94c:	46bd      	mov	sp, r7
1000b94e:	b002      	add	sp, #8
1000b950:	bd80      	pop	{r7, pc}
1000b952:	46c0      	nop			; (mov r8, r8)
1000b954:	1001507c 	.word	0x1001507c
1000b958:	1001351d 	.word	0x1001351d
1000b95c:	10015244 	.word	0x10015244
1000b960:	100133fd 	.word	0x100133fd

1000b964 <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b964:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b966:	b089      	sub	sp, #36	; 0x24
1000b968:	af04      	add	r7, sp, #16
1000b96a:	6078      	str	r0, [r7, #4]
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
1000b96c:	687b      	ldr	r3, [r7, #4]
1000b96e:	60fb      	str	r3, [r7, #12]
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b970:	4b2f      	ldr	r3, [pc, #188]	; (1000ba30 <ble_scan_info_handler+0xcc>)
1000b972:	781b      	ldrb	r3, [r3, #0]
1000b974:	b2db      	uxtb	r3, r3
1000b976:	2b13      	cmp	r3, #19
1000b978:	d841      	bhi.n	1000b9fe <ble_scan_info_handler+0x9a>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b97a:	4b2d      	ldr	r3, [pc, #180]	; (1000ba30 <ble_scan_info_handler+0xcc>)
1000b97c:	781b      	ldrb	r3, [r3, #0]
1000b97e:	b2db      	uxtb	r3, r3
1000b980:	1c1a      	adds	r2, r3, #0
1000b982:	1c13      	adds	r3, r2, #0
1000b984:	009b      	lsls	r3, r3, #2
1000b986:	189b      	adds	r3, r3, r2
1000b988:	00db      	lsls	r3, r3, #3
1000b98a:	189b      	adds	r3, r3, r2
1000b98c:	4a29      	ldr	r2, [pc, #164]	; (1000ba34 <ble_scan_info_handler+0xd0>)
1000b98e:	189a      	adds	r2, r3, r2
1000b990:	68fb      	ldr	r3, [r7, #12]
1000b992:	1c11      	adds	r1, r2, #0
1000b994:	1c1a      	adds	r2, r3, #0
1000b996:	2329      	movs	r3, #41	; 0x29
1000b998:	1c08      	adds	r0, r1, #0
1000b99a:	1c11      	adds	r1, r2, #0
1000b99c:	1c1a      	adds	r2, r3, #0
1000b99e:	4b26      	ldr	r3, [pc, #152]	; (1000ba38 <ble_scan_info_handler+0xd4>)
1000b9a0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9a2:	4b26      	ldr	r3, [pc, #152]	; (1000ba3c <ble_scan_info_handler+0xd8>)
1000b9a4:	1c18      	adds	r0, r3, #0
1000b9a6:	4b26      	ldr	r3, [pc, #152]	; (1000ba40 <ble_scan_info_handler+0xdc>)
1000b9a8:	4798      	blx	r3
1000b9aa:	4b21      	ldr	r3, [pc, #132]	; (1000ba30 <ble_scan_info_handler+0xcc>)
1000b9ac:	781b      	ldrb	r3, [r3, #0]
1000b9ae:	b2db      	uxtb	r3, r3
1000b9b0:	603b      	str	r3, [r7, #0]
		scan_response_count,
		scan_param->dev_addr.addr[5],
1000b9b2:	68fb      	ldr	r3, [r7, #12]
1000b9b4:	79db      	ldrb	r3, [r3, #7]
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9b6:	1c1e      	adds	r6, r3, #0
		scan_response_count,
		scan_param->dev_addr.addr[5],
		scan_param->dev_addr.addr[4],
1000b9b8:	68fb      	ldr	r3, [r7, #12]
1000b9ba:	799b      	ldrb	r3, [r3, #6]
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9bc:	1c1d      	adds	r5, r3, #0
		scan_response_count,
		scan_param->dev_addr.addr[5],
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
1000b9be:	68fb      	ldr	r3, [r7, #12]
1000b9c0:	795b      	ldrb	r3, [r3, #5]
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9c2:	1c1c      	adds	r4, r3, #0
		scan_response_count,
		scan_param->dev_addr.addr[5],
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
1000b9c4:	68fb      	ldr	r3, [r7, #12]
1000b9c6:	791b      	ldrb	r3, [r3, #4]
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9c8:	1c18      	adds	r0, r3, #0
		scan_response_count,
		scan_param->dev_addr.addr[5],
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
1000b9ca:	68fb      	ldr	r3, [r7, #12]
1000b9cc:	78db      	ldrb	r3, [r3, #3]
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9ce:	1c19      	adds	r1, r3, #0
		scan_param->dev_addr.addr[5],
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
1000b9d0:	68fb      	ldr	r3, [r7, #12]
1000b9d2:	789b      	ldrb	r3, [r3, #2]
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b9d4:	1c1a      	adds	r2, r3, #0
1000b9d6:	4b1b      	ldr	r3, [pc, #108]	; (1000ba44 <ble_scan_info_handler+0xe0>)
1000b9d8:	9400      	str	r4, [sp, #0]
1000b9da:	9001      	str	r0, [sp, #4]
1000b9dc:	9102      	str	r1, [sp, #8]
1000b9de:	9203      	str	r2, [sp, #12]
1000b9e0:	1c18      	adds	r0, r3, #0
1000b9e2:	6839      	ldr	r1, [r7, #0]
1000b9e4:	1c32      	adds	r2, r6, #0
1000b9e6:	1c2b      	adds	r3, r5, #0
1000b9e8:	4c17      	ldr	r4, [pc, #92]	; (1000ba48 <ble_scan_info_handler+0xe4>)
1000b9ea:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b9ec:	4b10      	ldr	r3, [pc, #64]	; (1000ba30 <ble_scan_info_handler+0xcc>)
1000b9ee:	781b      	ldrb	r3, [r3, #0]
1000b9f0:	b2db      	uxtb	r3, r3
1000b9f2:	3301      	adds	r3, #1
1000b9f4:	b2da      	uxtb	r2, r3
1000b9f6:	4b0e      	ldr	r3, [pc, #56]	; (1000ba30 <ble_scan_info_handler+0xcc>)
1000b9f8:	701a      	strb	r2, [r3, #0]
		return AT_BLE_SUCCESS;
1000b9fa:	2300      	movs	r3, #0
1000b9fc:	e014      	b.n	1000ba28 <ble_scan_info_handler+0xc4>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b9fe:	4b0f      	ldr	r3, [pc, #60]	; (1000ba3c <ble_scan_info_handler+0xd8>)
1000ba00:	1c18      	adds	r0, r3, #0
1000ba02:	4b0f      	ldr	r3, [pc, #60]	; (1000ba40 <ble_scan_info_handler+0xdc>)
1000ba04:	4798      	blx	r3
1000ba06:	4b11      	ldr	r3, [pc, #68]	; (1000ba4c <ble_scan_info_handler+0xe8>)
1000ba08:	1c18      	adds	r0, r3, #0
1000ba0a:	4b0f      	ldr	r3, [pc, #60]	; (1000ba48 <ble_scan_info_handler+0xe4>)
1000ba0c:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000ba0e:	4b10      	ldr	r3, [pc, #64]	; (1000ba50 <ble_scan_info_handler+0xec>)
1000ba10:	4798      	blx	r3
1000ba12:	1e03      	subs	r3, r0, #0
1000ba14:	d007      	beq.n	1000ba26 <ble_scan_info_handler+0xc2>
		{
			DBG_LOG("Failed to stop scanning");
1000ba16:	4b09      	ldr	r3, [pc, #36]	; (1000ba3c <ble_scan_info_handler+0xd8>)
1000ba18:	1c18      	adds	r0, r3, #0
1000ba1a:	4b09      	ldr	r3, [pc, #36]	; (1000ba40 <ble_scan_info_handler+0xdc>)
1000ba1c:	4798      	blx	r3
1000ba1e:	4b0d      	ldr	r3, [pc, #52]	; (1000ba54 <ble_scan_info_handler+0xf0>)
1000ba20:	1c18      	adds	r0, r3, #0
1000ba22:	4b09      	ldr	r3, [pc, #36]	; (1000ba48 <ble_scan_info_handler+0xe4>)
1000ba24:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
1000ba26:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000ba28:	1c18      	adds	r0, r3, #0
1000ba2a:	46bd      	mov	sp, r7
1000ba2c:	b005      	add	sp, #20
1000ba2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba30:	100166e0 	.word	0x100166e0
1000ba34:	10016d00 	.word	0x10016d00
1000ba38:	100133db 	.word	0x100133db
1000ba3c:	1001507c 	.word	0x1001507c
1000ba40:	1001351d 	.word	0x1001351d
1000ba44:	1001527c 	.word	0x1001527c
1000ba48:	100133fd 	.word	0x100133fd
1000ba4c:	100152b8 	.word	0x100152b8
1000ba50:	1000fb71 	.word	0x1000fb71
1000ba54:	100152f0 	.word	0x100152f0

1000ba58 <ble_scan_report_handler>:

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000ba58:	b580      	push	{r7, lr}
1000ba5a:	b084      	sub	sp, #16
1000ba5c:	af00      	add	r7, sp, #0
1000ba5e:	6078      	str	r0, [r7, #4]
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
1000ba60:	687b      	ldr	r3, [r7, #4]
1000ba62:	60fb      	str	r3, [r7, #12]
	if (scan_report->status == AT_BLE_SUCCESS)
1000ba64:	68fb      	ldr	r3, [r7, #12]
1000ba66:	781b      	ldrb	r3, [r3, #0]
1000ba68:	2b00      	cmp	r3, #0
1000ba6a:	d101      	bne.n	1000ba70 <ble_scan_report_handler+0x18>
	{
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
1000ba6c:	2300      	movs	r3, #0
1000ba6e:	e008      	b.n	1000ba82 <ble_scan_report_handler+0x2a>
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000ba70:	4b06      	ldr	r3, [pc, #24]	; (1000ba8c <ble_scan_report_handler+0x34>)
1000ba72:	1c18      	adds	r0, r3, #0
1000ba74:	4b06      	ldr	r3, [pc, #24]	; (1000ba90 <ble_scan_report_handler+0x38>)
1000ba76:	4798      	blx	r3
1000ba78:	4b06      	ldr	r3, [pc, #24]	; (1000ba94 <ble_scan_report_handler+0x3c>)
1000ba7a:	1c18      	adds	r0, r3, #0
1000ba7c:	4b06      	ldr	r3, [pc, #24]	; (1000ba98 <ble_scan_report_handler+0x40>)
1000ba7e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000ba80:	23e2      	movs	r3, #226	; 0xe2
}
1000ba82:	1c18      	adds	r0, r3, #0
1000ba84:	46bd      	mov	sp, r7
1000ba86:	b004      	add	sp, #16
1000ba88:	bd80      	pop	{r7, pc}
1000ba8a:	46c0      	nop			; (mov r8, r8)
1000ba8c:	1001507c 	.word	0x1001507c
1000ba90:	1001351d 	.word	0x1001351d
1000ba94:	10015308 	.word	0x10015308
1000ba98:	100133fd 	.word	0x100133fd

1000ba9c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000ba9c:	b580      	push	{r7, lr}
1000ba9e:	b082      	sub	sp, #8
1000baa0:	af00      	add	r7, sp, #0
1000baa2:	1c02      	adds	r2, r0, #0
1000baa4:	1dbb      	adds	r3, r7, #6
1000baa6:	801a      	strh	r2, [r3, #0]
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000baa8:	1dbb      	adds	r3, r7, #6
1000baaa:	881b      	ldrh	r3, [r3, #0]
1000baac:	1c18      	adds	r0, r3, #0
1000baae:	2100      	movs	r1, #0
1000bab0:	2200      	movs	r2, #0
1000bab2:	4b0d      	ldr	r3, [pc, #52]	; (1000bae8 <ble_send_slave_sec_request+0x4c>)
1000bab4:	4798      	blx	r3
1000bab6:	1e03      	subs	r3, r0, #0
1000bab8:	d109      	bne.n	1000bace <ble_send_slave_sec_request+0x32>
		{
			DBG_LOG_DEV("\n\r[ble_send_slave_sec_request]\n\rslave security request successful");
1000baba:	4b0c      	ldr	r3, [pc, #48]	; (1000baec <ble_send_slave_sec_request+0x50>)
1000babc:	1c18      	adds	r0, r3, #0
1000babe:	4b0c      	ldr	r3, [pc, #48]	; (1000baf0 <ble_send_slave_sec_request+0x54>)
1000bac0:	4798      	blx	r3
1000bac2:	4b0c      	ldr	r3, [pc, #48]	; (1000baf4 <ble_send_slave_sec_request+0x58>)
1000bac4:	1c18      	adds	r0, r3, #0
1000bac6:	4b0c      	ldr	r3, [pc, #48]	; (1000baf8 <ble_send_slave_sec_request+0x5c>)
1000bac8:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000baca:	2300      	movs	r3, #0
1000bacc:	e008      	b.n	1000bae0 <ble_send_slave_sec_request+0x44>
		}
		else
		{
			DBG_LOG("\n\r[ble_send_slave_sec_request]\n\rslave security request failed");
1000bace:	4b07      	ldr	r3, [pc, #28]	; (1000baec <ble_send_slave_sec_request+0x50>)
1000bad0:	1c18      	adds	r0, r3, #0
1000bad2:	4b07      	ldr	r3, [pc, #28]	; (1000baf0 <ble_send_slave_sec_request+0x54>)
1000bad4:	4798      	blx	r3
1000bad6:	4b09      	ldr	r3, [pc, #36]	; (1000bafc <ble_send_slave_sec_request+0x60>)
1000bad8:	1c18      	adds	r0, r3, #0
1000bada:	4b07      	ldr	r3, [pc, #28]	; (1000baf8 <ble_send_slave_sec_request+0x5c>)
1000badc:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000bade:	23e2      	movs	r3, #226	; 0xe2
}
1000bae0:	1c18      	adds	r0, r3, #0
1000bae2:	46bd      	mov	sp, r7
1000bae4:	b002      	add	sp, #8
1000bae6:	bd80      	pop	{r7, pc}
1000bae8:	1001071d 	.word	0x1001071d
1000baec:	1001507c 	.word	0x1001507c
1000baf0:	1001351d 	.word	0x1001351d
1000baf4:	1001531c 	.word	0x1001531c
1000baf8:	100133fd 	.word	0x100133fd
1000bafc:	10015360 	.word	0x10015360

1000bb00 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bb00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bb02:	b09f      	sub	sp, #124	; 0x7c
1000bb04:	af04      	add	r7, sp, #16
1000bb06:	6078      	str	r0, [r7, #4]
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
1000bb08:	2367      	movs	r3, #103	; 0x67
1000bb0a:	18fb      	adds	r3, r7, r3
1000bb0c:	2200      	movs	r2, #0
1000bb0e:	701a      	strb	r2, [r3, #0]
	conn_params = (at_ble_connected_t *)params;
1000bb10:	687b      	ldr	r3, [r7, #4]
1000bb12:	65fb      	str	r3, [r7, #92]	; 0x5c
	bool peripheral_device_added = false;
1000bb14:	2366      	movs	r3, #102	; 0x66
1000bb16:	18fb      	adds	r3, r7, r3
1000bb18:	2200      	movs	r2, #0
1000bb1a:	701a      	strb	r2, [r3, #0]
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000bb1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb1e:	7a9b      	ldrb	r3, [r3, #10]
1000bb20:	2b00      	cmp	r3, #0
1000bb22:	d000      	beq.n	1000bb26 <ble_connected_state_handler+0x26>
1000bb24:	e19b      	b.n	1000be5e <ble_connected_state_handler+0x35e>
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb26:	4bd6      	ldr	r3, [pc, #856]	; (1000be80 <ble_connected_state_handler+0x380>)
1000bb28:	1c18      	adds	r0, r3, #0
1000bb2a:	4bd6      	ldr	r3, [pc, #856]	; (1000be84 <ble_connected_state_handler+0x384>)
1000bb2c:	4798      	blx	r3
		conn_params->peer_addr.addr[5],
1000bb2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb30:	799b      	ldrb	r3, [r3, #6]
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb32:	1c1e      	adds	r6, r3, #0
		conn_params->peer_addr.addr[5],
		conn_params->peer_addr.addr[4],
1000bb34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb36:	795b      	ldrb	r3, [r3, #5]
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb38:	1c1d      	adds	r5, r3, #0
		conn_params->peer_addr.addr[5],
		conn_params->peer_addr.addr[4],
		conn_params->peer_addr.addr[3],
1000bb3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb3c:	791b      	ldrb	r3, [r3, #4]
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb3e:	1c1c      	adds	r4, r3, #0
		conn_params->peer_addr.addr[5],
		conn_params->peer_addr.addr[4],
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
1000bb40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb42:	78db      	ldrb	r3, [r3, #3]
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb44:	1c18      	adds	r0, r3, #0
		conn_params->peer_addr.addr[5],
		conn_params->peer_addr.addr[4],
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
1000bb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb48:	789b      	ldrb	r3, [r3, #2]
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb4a:	1c19      	adds	r1, r3, #0
		conn_params->peer_addr.addr[5],
		conn_params->peer_addr.addr[4],
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
1000bb4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb4e:	785b      	ldrb	r3, [r3, #1]
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bb50:	1c1a      	adds	r2, r3, #0
1000bb52:	4bcd      	ldr	r3, [pc, #820]	; (1000be88 <ble_connected_state_handler+0x388>)
1000bb54:	9000      	str	r0, [sp, #0]
1000bb56:	9101      	str	r1, [sp, #4]
1000bb58:	9202      	str	r2, [sp, #8]
1000bb5a:	1c18      	adds	r0, r3, #0
1000bb5c:	1c31      	adds	r1, r6, #0
1000bb5e:	1c2a      	adds	r2, r5, #0
1000bb60:	1c23      	adds	r3, r4, #0
1000bb62:	4cca      	ldr	r4, [pc, #808]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000bb64:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rconnection Handle %d", conn_params->handle);
1000bb66:	4bc6      	ldr	r3, [pc, #792]	; (1000be80 <ble_connected_state_handler+0x380>)
1000bb68:	1c18      	adds	r0, r3, #0
1000bb6a:	4bc6      	ldr	r3, [pc, #792]	; (1000be84 <ble_connected_state_handler+0x384>)
1000bb6c:	4798      	blx	r3
1000bb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb70:	891b      	ldrh	r3, [r3, #8]
1000bb72:	1c1a      	adds	r2, r3, #0
1000bb74:	4bc6      	ldr	r3, [pc, #792]	; (1000be90 <ble_connected_state_handler+0x390>)
1000bb76:	1c18      	adds	r0, r3, #0
1000bb78:	1c11      	adds	r1, r2, #0
1000bb7a:	4bc4      	ldr	r3, [pc, #784]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000bb7c:	4798      	blx	r3
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000bb7e:	4ac5      	ldr	r2, [pc, #788]	; (1000be94 <ble_connected_state_handler+0x394>)
1000bb80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb82:	1c10      	adds	r0, r2, #0
1000bb84:	1c19      	adds	r1, r3, #0
1000bb86:	2212      	movs	r2, #18
1000bb88:	4bc3      	ldr	r3, [pc, #780]	; (1000be98 <ble_connected_state_handler+0x398>)
1000bb8a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bb8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bb8e:	4ac3      	ldr	r2, [pc, #780]	; (1000be9c <ble_connected_state_handler+0x39c>)
1000bb90:	1c10      	adds	r0, r2, #0
1000bb92:	1c19      	adds	r1, r3, #0
1000bb94:	2207      	movs	r2, #7
1000bb96:	4bc2      	ldr	r3, [pc, #776]	; (1000bea0 <ble_connected_state_handler+0x3a0>)
1000bb98:	4798      	blx	r3
1000bb9a:	1e03      	subs	r3, r0, #0
1000bb9c:	d100      	bne.n	1000bba0 <ble_connected_state_handler+0xa0>
1000bb9e:	e07d      	b.n	1000bc9c <ble_connected_state_handler+0x19c>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000bba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bba2:	781b      	ldrb	r3, [r3, #0]
1000bba4:	2b02      	cmp	r3, #2
1000bba6:	d000      	beq.n	1000bbaa <ble_connected_state_handler+0xaa>
1000bba8:	e078      	b.n	1000bc9c <ble_connected_state_handler+0x19c>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000bbaa:	2362      	movs	r3, #98	; 0x62
1000bbac:	18fb      	adds	r3, r7, r3
1000bbae:	2200      	movs	r2, #0
1000bbb0:	801a      	strh	r2, [r3, #0]
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
1000bbb2:	235b      	movs	r3, #91	; 0x5b
1000bbb4:	18fb      	adds	r3, r7, r3
1000bbb6:	2205      	movs	r2, #5
1000bbb8:	701a      	strb	r2, [r3, #0]
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000bbba:	2308      	movs	r3, #8
1000bbbc:	18fb      	adds	r3, r7, r3
1000bbbe:	1c1a      	adds	r2, r3, #0
1000bbc0:	2350      	movs	r3, #80	; 0x50
1000bbc2:	1c10      	adds	r0, r2, #0
1000bbc4:	2100      	movs	r1, #0
1000bbc6:	1c1a      	adds	r2, r3, #0
1000bbc8:	4bb6      	ldr	r3, [pc, #728]	; (1000bea4 <ble_connected_state_handler+0x3a4>)
1000bbca:	4798      	blx	r3
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bbcc:	2365      	movs	r3, #101	; 0x65
1000bbce:	18fb      	adds	r3, r7, r3
1000bbd0:	2200      	movs	r2, #0
1000bbd2:	701a      	strb	r2, [r3, #0]
1000bbd4:	e032      	b.n	1000bc3c <ble_connected_state_handler+0x13c>
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bbd6:	2364      	movs	r3, #100	; 0x64
1000bbd8:	18fb      	adds	r3, r7, r3
1000bbda:	2200      	movs	r2, #0
1000bbdc:	701a      	strb	r2, [r3, #0]
1000bbde:	e021      	b.n	1000bc24 <ble_connected_state_handler+0x124>
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bbe0:	2362      	movs	r3, #98	; 0x62
1000bbe2:	18fb      	adds	r3, r7, r3
1000bbe4:	881b      	ldrh	r3, [r3, #0]
1000bbe6:	2262      	movs	r2, #98	; 0x62
1000bbe8:	18ba      	adds	r2, r7, r2
1000bbea:	1c59      	adds	r1, r3, #1
1000bbec:	8011      	strh	r1, [r2, #0]
1000bbee:	1c1d      	adds	r5, r3, #0
1000bbf0:	2365      	movs	r3, #101	; 0x65
1000bbf2:	18fb      	adds	r3, r7, r3
1000bbf4:	781a      	ldrb	r2, [r3, #0]
1000bbf6:	2364      	movs	r3, #100	; 0x64
1000bbf8:	18fb      	adds	r3, r7, r3
1000bbfa:	7819      	ldrb	r1, [r3, #0]
1000bbfc:	48aa      	ldr	r0, [pc, #680]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bbfe:	2440      	movs	r4, #64	; 0x40
1000bc00:	1c13      	adds	r3, r2, #0
1000bc02:	015b      	lsls	r3, r3, #5
1000bc04:	1a9b      	subs	r3, r3, r2
1000bc06:	009b      	lsls	r3, r3, #2
1000bc08:	18c3      	adds	r3, r0, r3
1000bc0a:	185b      	adds	r3, r3, r1
1000bc0c:	191b      	adds	r3, r3, r4
1000bc0e:	799a      	ldrb	r2, [r3, #6]
1000bc10:	2308      	movs	r3, #8
1000bc12:	18fb      	adds	r3, r7, r3
1000bc14:	555a      	strb	r2, [r3, r5]
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bc16:	2364      	movs	r3, #100	; 0x64
1000bc18:	18fb      	adds	r3, r7, r3
1000bc1a:	781a      	ldrb	r2, [r3, #0]
1000bc1c:	2364      	movs	r3, #100	; 0x64
1000bc1e:	18fb      	adds	r3, r7, r3
1000bc20:	3201      	adds	r2, #1
1000bc22:	701a      	strb	r2, [r3, #0]
1000bc24:	2364      	movs	r3, #100	; 0x64
1000bc26:	18fb      	adds	r3, r7, r3
1000bc28:	781b      	ldrb	r3, [r3, #0]
1000bc2a:	2b0f      	cmp	r3, #15
1000bc2c:	d9d8      	bls.n	1000bbe0 <ble_connected_state_handler+0xe0>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bc2e:	2365      	movs	r3, #101	; 0x65
1000bc30:	18fb      	adds	r3, r7, r3
1000bc32:	781a      	ldrb	r2, [r3, #0]
1000bc34:	2365      	movs	r3, #101	; 0x65
1000bc36:	18fb      	adds	r3, r7, r3
1000bc38:	3201      	adds	r2, #1
1000bc3a:	701a      	strb	r2, [r3, #0]
1000bc3c:	2365      	movs	r3, #101	; 0x65
1000bc3e:	18fb      	adds	r3, r7, r3
1000bc40:	781b      	ldrb	r3, [r3, #0]
1000bc42:	2b04      	cmp	r3, #4
1000bc44:	d9c7      	bls.n	1000bbd6 <ble_connected_state_handler+0xd6>
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
					}
					
				}
				if (nb_keys)
1000bc46:	235b      	movs	r3, #91	; 0x5b
1000bc48:	18fb      	adds	r3, r7, r3
1000bc4a:	781b      	ldrb	r3, [r3, #0]
1000bc4c:	2b00      	cmp	r3, #0
1000bc4e:	d01d      	beq.n	1000bc8c <ble_connected_state_handler+0x18c>
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000bc50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000bc52:	2308      	movs	r3, #8
1000bc54:	18fb      	adds	r3, r7, r3
1000bc56:	2005      	movs	r0, #5
1000bc58:	1c11      	adds	r1, r2, #0
1000bc5a:	1c1a      	adds	r2, r3, #0
1000bc5c:	4b93      	ldr	r3, [pc, #588]	; (1000beac <ble_connected_state_handler+0x3ac>)
1000bc5e:	4798      	blx	r3
1000bc60:	1e03      	subs	r3, r0, #0
1000bc62:	d109      	bne.n	1000bc78 <ble_connected_state_handler+0x178>
					{
						DBG_LOG_DEV("\n\r[ble_connected_state_handler]\n\rcesolving Random address success**");
1000bc64:	4b86      	ldr	r3, [pc, #536]	; (1000be80 <ble_connected_state_handler+0x380>)
1000bc66:	1c18      	adds	r0, r3, #0
1000bc68:	4b86      	ldr	r3, [pc, #536]	; (1000be84 <ble_connected_state_handler+0x384>)
1000bc6a:	4798      	blx	r3
1000bc6c:	4b90      	ldr	r3, [pc, #576]	; (1000beb0 <ble_connected_state_handler+0x3b0>)
1000bc6e:	1c18      	adds	r0, r3, #0
1000bc70:	4b86      	ldr	r3, [pc, #536]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000bc72:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000bc74:	2300      	movs	r3, #0
1000bc76:	e0ff      	b.n	1000be78 <ble_connected_state_handler+0x378>
					}
					else
					{
						DBG_LOG("\n\r[ble_connected_state_handler]\n\rresolving Random address failed**");
1000bc78:	4b81      	ldr	r3, [pc, #516]	; (1000be80 <ble_connected_state_handler+0x380>)
1000bc7a:	1c18      	adds	r0, r3, #0
1000bc7c:	4b81      	ldr	r3, [pc, #516]	; (1000be84 <ble_connected_state_handler+0x384>)
1000bc7e:	4798      	blx	r3
1000bc80:	4b8c      	ldr	r3, [pc, #560]	; (1000beb4 <ble_connected_state_handler+0x3b4>)
1000bc82:	1c18      	adds	r0, r3, #0
1000bc84:	4b81      	ldr	r3, [pc, #516]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000bc86:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000bc88:	23e2      	movs	r3, #226	; 0xe2
1000bc8a:	e0f5      	b.n	1000be78 <ble_connected_state_handler+0x378>
					}					
				}
				else
				{
					DBG_LOG_DEV("New Connection");
1000bc8c:	4b7c      	ldr	r3, [pc, #496]	; (1000be80 <ble_connected_state_handler+0x380>)
1000bc8e:	1c18      	adds	r0, r3, #0
1000bc90:	4b7c      	ldr	r3, [pc, #496]	; (1000be84 <ble_connected_state_handler+0x384>)
1000bc92:	4798      	blx	r3
1000bc94:	4b88      	ldr	r3, [pc, #544]	; (1000beb8 <ble_connected_state_handler+0x3b8>)
1000bc96:	1c18      	adds	r0, r3, #0
1000bc98:	4b7c      	ldr	r3, [pc, #496]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000bc9a:	4798      	blx	r3
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000bc9c:	4b87      	ldr	r3, [pc, #540]	; (1000bebc <ble_connected_state_handler+0x3bc>)
1000bc9e:	781b      	ldrb	r3, [r3, #0]
1000bca0:	b2db      	uxtb	r3, r3
1000bca2:	2b04      	cmp	r3, #4
1000bca4:	d900      	bls.n	1000bca8 <ble_connected_state_handler+0x1a8>
1000bca6:	e0af      	b.n	1000be08 <ble_connected_state_handler+0x308>
		{
			bool conn_exists = false;
1000bca8:	2361      	movs	r3, #97	; 0x61
1000bcaa:	18fb      	adds	r3, r7, r3
1000bcac:	2200      	movs	r2, #0
1000bcae:	701a      	strb	r2, [r3, #0]
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bcb0:	2367      	movs	r3, #103	; 0x67
1000bcb2:	18fb      	adds	r3, r7, r3
1000bcb4:	2200      	movs	r2, #0
1000bcb6:	701a      	strb	r2, [r3, #0]
1000bcb8:	e029      	b.n	1000bd0e <ble_connected_state_handler+0x20e>
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bcba:	2367      	movs	r3, #103	; 0x67
1000bcbc:	18fb      	adds	r3, r7, r3
1000bcbe:	781a      	ldrb	r2, [r3, #0]
1000bcc0:	1c13      	adds	r3, r2, #0
1000bcc2:	015b      	lsls	r3, r3, #5
1000bcc4:	1a9b      	subs	r3, r3, r2
1000bcc6:	009b      	lsls	r3, r3, #2
1000bcc8:	4a77      	ldr	r2, [pc, #476]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bcca:	189a      	adds	r2, r3, r2
1000bccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bcce:	1c10      	adds	r0, r2, #0
1000bcd0:	1c19      	adds	r1, r3, #0
1000bcd2:	2207      	movs	r2, #7
1000bcd4:	4b72      	ldr	r3, [pc, #456]	; (1000bea0 <ble_connected_state_handler+0x3a0>)
1000bcd6:	4798      	blx	r3
1000bcd8:	1e03      	subs	r3, r0, #0
1000bcda:	d111      	bne.n	1000bd00 <ble_connected_state_handler+0x200>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bcdc:	2367      	movs	r3, #103	; 0x67
1000bcde:	18fb      	adds	r3, r7, r3
1000bce0:	781a      	ldrb	r2, [r3, #0]
1000bce2:	4971      	ldr	r1, [pc, #452]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bce4:	2058      	movs	r0, #88	; 0x58
1000bce6:	1c13      	adds	r3, r2, #0
1000bce8:	015b      	lsls	r3, r3, #5
1000bcea:	1a9b      	subs	r3, r3, r2
1000bcec:	009b      	lsls	r3, r3, #2
1000bcee:	18cb      	adds	r3, r1, r3
1000bcf0:	181b      	adds	r3, r3, r0
1000bcf2:	2202      	movs	r2, #2
1000bcf4:	719a      	strb	r2, [r3, #6]
					conn_exists = true;
1000bcf6:	2361      	movs	r3, #97	; 0x61
1000bcf8:	18fb      	adds	r3, r7, r3
1000bcfa:	2201      	movs	r2, #1
1000bcfc:	701a      	strb	r2, [r3, #0]
					break;
1000bcfe:	e00b      	b.n	1000bd18 <ble_connected_state_handler+0x218>
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd00:	2367      	movs	r3, #103	; 0x67
1000bd02:	18fb      	adds	r3, r7, r3
1000bd04:	781a      	ldrb	r2, [r3, #0]
1000bd06:	2367      	movs	r3, #103	; 0x67
1000bd08:	18fb      	adds	r3, r7, r3
1000bd0a:	3201      	adds	r2, #1
1000bd0c:	701a      	strb	r2, [r3, #0]
1000bd0e:	2367      	movs	r3, #103	; 0x67
1000bd10:	18fb      	adds	r3, r7, r3
1000bd12:	781b      	ldrb	r3, [r3, #0]
1000bd14:	2b04      	cmp	r3, #4
1000bd16:	d9d0      	bls.n	1000bcba <ble_connected_state_handler+0x1ba>
					conn_exists = true;
					break;
				}
			}
			
			if (!conn_exists)
1000bd18:	2361      	movs	r3, #97	; 0x61
1000bd1a:	18fb      	adds	r3, r7, r3
1000bd1c:	781b      	ldrb	r3, [r3, #0]
1000bd1e:	2201      	movs	r2, #1
1000bd20:	4053      	eors	r3, r2
1000bd22:	b2db      	uxtb	r3, r3
1000bd24:	2b00      	cmp	r3, #0
1000bd26:	d042      	beq.n	1000bdae <ble_connected_state_handler+0x2ae>
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd28:	2367      	movs	r3, #103	; 0x67
1000bd2a:	18fb      	adds	r3, r7, r3
1000bd2c:	2200      	movs	r2, #0
1000bd2e:	701a      	strb	r2, [r3, #0]
1000bd30:	e038      	b.n	1000bda4 <ble_connected_state_handler+0x2a4>
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bd32:	2367      	movs	r3, #103	; 0x67
1000bd34:	18fb      	adds	r3, r7, r3
1000bd36:	781a      	ldrb	r2, [r3, #0]
1000bd38:	495b      	ldr	r1, [pc, #364]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bd3a:	2058      	movs	r0, #88	; 0x58
1000bd3c:	1c13      	adds	r3, r2, #0
1000bd3e:	015b      	lsls	r3, r3, #5
1000bd40:	1a9b      	subs	r3, r3, r2
1000bd42:	009b      	lsls	r3, r3, #2
1000bd44:	18cb      	adds	r3, r1, r3
1000bd46:	181b      	adds	r3, r3, r0
1000bd48:	799b      	ldrb	r3, [r3, #6]
1000bd4a:	2b00      	cmp	r3, #0
1000bd4c:	d123      	bne.n	1000bd96 <ble_connected_state_handler+0x296>
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000bd4e:	2367      	movs	r3, #103	; 0x67
1000bd50:	18fb      	adds	r3, r7, r3
1000bd52:	781a      	ldrb	r2, [r3, #0]
1000bd54:	1c13      	adds	r3, r2, #0
1000bd56:	015b      	lsls	r3, r3, #5
1000bd58:	1a9b      	subs	r3, r3, r2
1000bd5a:	009b      	lsls	r3, r3, #2
1000bd5c:	4a52      	ldr	r2, [pc, #328]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bd5e:	189a      	adds	r2, r3, r2
1000bd60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bd62:	1c10      	adds	r0, r2, #0
1000bd64:	1c19      	adds	r1, r3, #0
1000bd66:	2212      	movs	r2, #18
1000bd68:	4b4b      	ldr	r3, [pc, #300]	; (1000be98 <ble_connected_state_handler+0x398>)
1000bd6a:	4798      	blx	r3
						ble_device_count++;
1000bd6c:	4b53      	ldr	r3, [pc, #332]	; (1000bebc <ble_connected_state_handler+0x3bc>)
1000bd6e:	781b      	ldrb	r3, [r3, #0]
1000bd70:	b2db      	uxtb	r3, r3
1000bd72:	3301      	adds	r3, #1
1000bd74:	b2da      	uxtb	r2, r3
1000bd76:	4b51      	ldr	r3, [pc, #324]	; (1000bebc <ble_connected_state_handler+0x3bc>)
1000bd78:	701a      	strb	r2, [r3, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bd7a:	2367      	movs	r3, #103	; 0x67
1000bd7c:	18fb      	adds	r3, r7, r3
1000bd7e:	781a      	ldrb	r2, [r3, #0]
1000bd80:	4949      	ldr	r1, [pc, #292]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bd82:	2058      	movs	r0, #88	; 0x58
1000bd84:	1c13      	adds	r3, r2, #0
1000bd86:	015b      	lsls	r3, r3, #5
1000bd88:	1a9b      	subs	r3, r3, r2
1000bd8a:	009b      	lsls	r3, r3, #2
1000bd8c:	18cb      	adds	r3, r1, r3
1000bd8e:	181b      	adds	r3, r3, r0
1000bd90:	2202      	movs	r2, #2
1000bd92:	719a      	strb	r2, [r3, #6]
						break;
1000bd94:	e00b      	b.n	1000bdae <ble_connected_state_handler+0x2ae>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd96:	2367      	movs	r3, #103	; 0x67
1000bd98:	18fb      	adds	r3, r7, r3
1000bd9a:	781a      	ldrb	r2, [r3, #0]
1000bd9c:	2367      	movs	r3, #103	; 0x67
1000bd9e:	18fb      	adds	r3, r7, r3
1000bda0:	3201      	adds	r2, #1
1000bda2:	701a      	strb	r2, [r3, #0]
1000bda4:	2367      	movs	r3, #103	; 0x67
1000bda6:	18fb      	adds	r3, r7, r3
1000bda8:	781b      	ldrb	r3, [r3, #0]
1000bdaa:	2b04      	cmp	r3, #4
1000bdac:	d9c1      	bls.n	1000bd32 <ble_connected_state_handler+0x232>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bdae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000bdb0:	4a3a      	ldr	r2, [pc, #232]	; (1000be9c <ble_connected_state_handler+0x39c>)
1000bdb2:	1c10      	adds	r0, r2, #0
1000bdb4:	1c19      	adds	r1, r3, #0
1000bdb6:	2207      	movs	r2, #7
1000bdb8:	4b39      	ldr	r3, [pc, #228]	; (1000bea0 <ble_connected_state_handler+0x3a0>)
1000bdba:	4798      	blx	r3
1000bdbc:	1e03      	subs	r3, r0, #0
1000bdbe:	d10c      	bne.n	1000bdda <ble_connected_state_handler+0x2da>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000bdc0:	2367      	movs	r3, #103	; 0x67
1000bdc2:	18fb      	adds	r3, r7, r3
1000bdc4:	781a      	ldrb	r2, [r3, #0]
1000bdc6:	4938      	ldr	r1, [pc, #224]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bdc8:	1c13      	adds	r3, r2, #0
1000bdca:	015b      	lsls	r3, r3, #5
1000bdcc:	1a9b      	subs	r3, r3, r2
1000bdce:	009b      	lsls	r3, r3, #2
1000bdd0:	18cb      	adds	r3, r1, r3
1000bdd2:	3310      	adds	r3, #16
1000bdd4:	2205      	movs	r2, #5
1000bdd6:	709a      	strb	r2, [r3, #2]
1000bdd8:	e00f      	b.n	1000bdfa <ble_connected_state_handler+0x2fa>
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bdda:	2367      	movs	r3, #103	; 0x67
1000bddc:	18fb      	adds	r3, r7, r3
1000bdde:	781a      	ldrb	r2, [r3, #0]
1000bde0:	4931      	ldr	r1, [pc, #196]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000bde2:	1c13      	adds	r3, r2, #0
1000bde4:	015b      	lsls	r3, r3, #5
1000bde6:	1a9b      	subs	r3, r3, r2
1000bde8:	009b      	lsls	r3, r3, #2
1000bdea:	18cb      	adds	r3, r1, r3
1000bdec:	3310      	adds	r3, #16
1000bdee:	220a      	movs	r2, #10
1000bdf0:	709a      	strb	r2, [r3, #2]
				peripheral_device_added = true;
1000bdf2:	2366      	movs	r3, #102	; 0x66
1000bdf4:	18fb      	adds	r3, r7, r3
1000bdf6:	2201      	movs	r2, #1
1000bdf8:	701a      	strb	r2, [r3, #0]
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bdfa:	4b28      	ldr	r3, [pc, #160]	; (1000be9c <ble_connected_state_handler+0x39c>)
1000bdfc:	1c18      	adds	r0, r3, #0
1000bdfe:	2100      	movs	r1, #0
1000be00:	2207      	movs	r2, #7
1000be02:	4b28      	ldr	r3, [pc, #160]	; (1000bea4 <ble_connected_state_handler+0x3a4>)
1000be04:	4798      	blx	r3
1000be06:	e012      	b.n	1000be2e <ble_connected_state_handler+0x32e>
					
		}
		else
		{
			DBG_LOG("\n\r[ble_connected_state_handler]\n\rmax number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000be08:	4b1d      	ldr	r3, [pc, #116]	; (1000be80 <ble_connected_state_handler+0x380>)
1000be0a:	1c18      	adds	r0, r3, #0
1000be0c:	4b1d      	ldr	r3, [pc, #116]	; (1000be84 <ble_connected_state_handler+0x384>)
1000be0e:	4798      	blx	r3
1000be10:	4b2a      	ldr	r3, [pc, #168]	; (1000bebc <ble_connected_state_handler+0x3bc>)
1000be12:	781b      	ldrb	r3, [r3, #0]
1000be14:	b2db      	uxtb	r3, r3
1000be16:	1c1a      	adds	r2, r3, #0
1000be18:	4b29      	ldr	r3, [pc, #164]	; (1000bec0 <ble_connected_state_handler+0x3c0>)
1000be1a:	1c18      	adds	r0, r3, #0
1000be1c:	1c11      	adds	r1, r2, #0
1000be1e:	4b1b      	ldr	r3, [pc, #108]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000be20:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000be22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000be24:	891b      	ldrh	r3, [r3, #8]
1000be26:	1c18      	adds	r0, r3, #0
1000be28:	2113      	movs	r1, #19
1000be2a:	4b26      	ldr	r3, [pc, #152]	; (1000bec4 <ble_connected_state_handler+0x3c4>)
1000be2c:	4798      	blx	r3
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000be2e:	2367      	movs	r3, #103	; 0x67
1000be30:	18fb      	adds	r3, r7, r3
1000be32:	781a      	ldrb	r2, [r3, #0]
1000be34:	491c      	ldr	r1, [pc, #112]	; (1000bea8 <ble_connected_state_handler+0x3a8>)
1000be36:	1c13      	adds	r3, r2, #0
1000be38:	015b      	lsls	r3, r3, #5
1000be3a:	1a9b      	subs	r3, r3, r2
1000be3c:	009b      	lsls	r3, r3, #2
1000be3e:	18cb      	adds	r3, r1, r3
1000be40:	3310      	adds	r3, #16
1000be42:	789b      	ldrb	r3, [r3, #2]
1000be44:	2b0a      	cmp	r3, #10
1000be46:	d116      	bne.n	1000be76 <ble_connected_state_handler+0x376>
1000be48:	2366      	movs	r3, #102	; 0x66
1000be4a:	18fb      	adds	r3, r7, r3
1000be4c:	781b      	ldrb	r3, [r3, #0]
1000be4e:	2b00      	cmp	r3, #0
1000be50:	d011      	beq.n	1000be76 <ble_connected_state_handler+0x376>
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000be52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000be54:	891b      	ldrh	r3, [r3, #8]
1000be56:	1c18      	adds	r0, r3, #0
1000be58:	4b1b      	ldr	r3, [pc, #108]	; (1000bec8 <ble_connected_state_handler+0x3c8>)
1000be5a:	4798      	blx	r3
1000be5c:	e00b      	b.n	1000be76 <ble_connected_state_handler+0x376>
        }
#endif
	} 
	else
	{
		DBG_LOG("\n\r[ble_connected_state_handler]\n\rdevice Connection Failed - Status: %d", conn_params->conn_status);
1000be5e:	4b08      	ldr	r3, [pc, #32]	; (1000be80 <ble_connected_state_handler+0x380>)
1000be60:	1c18      	adds	r0, r3, #0
1000be62:	4b08      	ldr	r3, [pc, #32]	; (1000be84 <ble_connected_state_handler+0x384>)
1000be64:	4798      	blx	r3
1000be66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000be68:	7a9b      	ldrb	r3, [r3, #10]
1000be6a:	1c1a      	adds	r2, r3, #0
1000be6c:	4b17      	ldr	r3, [pc, #92]	; (1000becc <ble_connected_state_handler+0x3cc>)
1000be6e:	1c18      	adds	r0, r3, #0
1000be70:	1c11      	adds	r1, r2, #0
1000be72:	4b06      	ldr	r3, [pc, #24]	; (1000be8c <ble_connected_state_handler+0x38c>)
1000be74:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000be76:	2300      	movs	r3, #0
}
1000be78:	1c18      	adds	r0, r3, #0
1000be7a:	46bd      	mov	sp, r7
1000be7c:	b01b      	add	sp, #108	; 0x6c
1000be7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be80:	1001507c 	.word	0x1001507c
1000be84:	1001351d 	.word	0x1001351d
1000be88:	100153a0 	.word	0x100153a0
1000be8c:	100133fd 	.word	0x100133fd
1000be90:	10015404 	.word	0x10015404
1000be94:	10016cd8 	.word	0x10016cd8
1000be98:	100133db 	.word	0x100133db
1000be9c:	100166d4 	.word	0x100166d4
1000bea0:	100133bd 	.word	0x100133bd
1000bea4:	100133ed 	.word	0x100133ed
1000bea8:	10016a2c 	.word	0x10016a2c
1000beac:	1000fbbd 	.word	0x1000fbbd
1000beb0:	1001543c 	.word	0x1001543c
1000beb4:	10015480 	.word	0x10015480
1000beb8:	100154c4 	.word	0x100154c4
1000bebc:	10016c98 	.word	0x10016c98
1000bec0:	100154d4 	.word	0x100154d4
1000bec4:	1000fb91 	.word	0x1000fb91
1000bec8:	1000ba9d 	.word	0x1000ba9d
1000becc:	10015530 	.word	0x10015530

1000bed0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000bed0:	b580      	push	{r7, lr}
1000bed2:	b084      	sub	sp, #16
1000bed4:	af00      	add	r7, sp, #0
1000bed6:	6078      	str	r0, [r7, #4]
	at_ble_resolv_rand_addr_status_t *ble_resolv_rand_addr_status;
	uint8_t idx;	
	bool device_found = false;
1000bed8:	230e      	movs	r3, #14
1000beda:	18fb      	adds	r3, r7, r3
1000bedc:	2200      	movs	r2, #0
1000bede:	701a      	strb	r2, [r3, #0]
	bool peripheral_device_added = false;
1000bee0:	230d      	movs	r3, #13
1000bee2:	18fb      	adds	r3, r7, r3
1000bee4:	2200      	movs	r2, #0
1000bee6:	701a      	strb	r2, [r3, #0]
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
1000bee8:	687b      	ldr	r3, [r7, #4]
1000beea:	60bb      	str	r3, [r7, #8]
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000beec:	68bb      	ldr	r3, [r7, #8]
1000beee:	781b      	ldrb	r3, [r3, #0]
1000bef0:	2b00      	cmp	r3, #0
1000bef2:	d12a      	bne.n	1000bf4a <ble_resolv_rand_addr_handler+0x7a>
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bef4:	230f      	movs	r3, #15
1000bef6:	18fb      	adds	r3, r7, r3
1000bef8:	2200      	movs	r2, #0
1000befa:	701a      	strb	r2, [r3, #0]
1000befc:	e020      	b.n	1000bf40 <ble_resolv_rand_addr_handler+0x70>
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000befe:	68bb      	ldr	r3, [r7, #8]
1000bf00:	1c59      	adds	r1, r3, #1
1000bf02:	230f      	movs	r3, #15
1000bf04:	18fb      	adds	r3, r7, r3
1000bf06:	781a      	ldrb	r2, [r3, #0]
1000bf08:	1c13      	adds	r3, r2, #0
1000bf0a:	015b      	lsls	r3, r3, #5
1000bf0c:	1a9b      	subs	r3, r3, r2
1000bf0e:	009b      	lsls	r3, r3, #2
1000bf10:	3340      	adds	r3, #64	; 0x40
1000bf12:	1c1a      	adds	r2, r3, #0
1000bf14:	4b6e      	ldr	r3, [pc, #440]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000bf16:	18d3      	adds	r3, r2, r3
1000bf18:	3306      	adds	r3, #6
1000bf1a:	1c08      	adds	r0, r1, #0
1000bf1c:	1c19      	adds	r1, r3, #0
1000bf1e:	2210      	movs	r2, #16
1000bf20:	4b6c      	ldr	r3, [pc, #432]	; (1000c0d4 <ble_resolv_rand_addr_handler+0x204>)
1000bf22:	4798      	blx	r3
1000bf24:	1e03      	subs	r3, r0, #0
1000bf26:	d104      	bne.n	1000bf32 <ble_resolv_rand_addr_handler+0x62>
			{
				device_found = true;
1000bf28:	230e      	movs	r3, #14
1000bf2a:	18fb      	adds	r3, r7, r3
1000bf2c:	2201      	movs	r2, #1
1000bf2e:	701a      	strb	r2, [r3, #0]
				break;
1000bf30:	e00b      	b.n	1000bf4a <ble_resolv_rand_addr_handler+0x7a>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf32:	230f      	movs	r3, #15
1000bf34:	18fb      	adds	r3, r7, r3
1000bf36:	781a      	ldrb	r2, [r3, #0]
1000bf38:	230f      	movs	r3, #15
1000bf3a:	18fb      	adds	r3, r7, r3
1000bf3c:	3201      	adds	r2, #1
1000bf3e:	701a      	strb	r2, [r3, #0]
1000bf40:	230f      	movs	r3, #15
1000bf42:	18fb      	adds	r3, r7, r3
1000bf44:	781b      	ldrb	r3, [r3, #0]
1000bf46:	2b04      	cmp	r3, #4
1000bf48:	d9d9      	bls.n	1000befe <ble_resolv_rand_addr_handler+0x2e>
			}
		}	
		
	}
	
	if (device_found)
1000bf4a:	230e      	movs	r3, #14
1000bf4c:	18fb      	adds	r3, r7, r3
1000bf4e:	781b      	ldrb	r3, [r3, #0]
1000bf50:	2b00      	cmp	r3, #0
1000bf52:	d037      	beq.n	1000bfc4 <ble_resolv_rand_addr_handler+0xf4>
	{
		DBG_LOG_DEV("##########Device Found");
1000bf54:	4b60      	ldr	r3, [pc, #384]	; (1000c0d8 <ble_resolv_rand_addr_handler+0x208>)
1000bf56:	1c18      	adds	r0, r3, #0
1000bf58:	4b60      	ldr	r3, [pc, #384]	; (1000c0dc <ble_resolv_rand_addr_handler+0x20c>)
1000bf5a:	4798      	blx	r3
1000bf5c:	4b60      	ldr	r3, [pc, #384]	; (1000c0e0 <ble_resolv_rand_addr_handler+0x210>)
1000bf5e:	1c18      	adds	r0, r3, #0
1000bf60:	4b60      	ldr	r3, [pc, #384]	; (1000c0e4 <ble_resolv_rand_addr_handler+0x214>)
1000bf62:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bf64:	230f      	movs	r3, #15
1000bf66:	18fb      	adds	r3, r7, r3
1000bf68:	781a      	ldrb	r2, [r3, #0]
1000bf6a:	4959      	ldr	r1, [pc, #356]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000bf6c:	2058      	movs	r0, #88	; 0x58
1000bf6e:	1c13      	adds	r3, r2, #0
1000bf70:	015b      	lsls	r3, r3, #5
1000bf72:	1a9b      	subs	r3, r3, r2
1000bf74:	009b      	lsls	r3, r3, #2
1000bf76:	18cb      	adds	r3, r1, r3
1000bf78:	181b      	adds	r3, r3, r0
1000bf7a:	2202      	movs	r2, #2
1000bf7c:	719a      	strb	r2, [r3, #6]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bf7e:	230f      	movs	r3, #15
1000bf80:	18fb      	adds	r3, r7, r3
1000bf82:	781a      	ldrb	r2, [r3, #0]
1000bf84:	4952      	ldr	r1, [pc, #328]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000bf86:	1c13      	adds	r3, r2, #0
1000bf88:	015b      	lsls	r3, r3, #5
1000bf8a:	1a9b      	subs	r3, r3, r2
1000bf8c:	009b      	lsls	r3, r3, #2
1000bf8e:	18cb      	adds	r3, r1, r3
1000bf90:	3310      	adds	r3, #16
1000bf92:	220a      	movs	r2, #10
1000bf94:	709a      	strb	r2, [r3, #2]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bf96:	230f      	movs	r3, #15
1000bf98:	18fb      	adds	r3, r7, r3
1000bf9a:	781a      	ldrb	r2, [r3, #0]
1000bf9c:	1c13      	adds	r3, r2, #0
1000bf9e:	015b      	lsls	r3, r3, #5
1000bfa0:	1a9b      	subs	r3, r3, r2
1000bfa2:	009b      	lsls	r3, r3, #2
1000bfa4:	4a4a      	ldr	r2, [pc, #296]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000bfa6:	189a      	adds	r2, r3, r2
1000bfa8:	4b4f      	ldr	r3, [pc, #316]	; (1000c0e8 <ble_resolv_rand_addr_handler+0x218>)
1000bfaa:	1c11      	adds	r1, r2, #0
1000bfac:	1c1a      	adds	r2, r3, #0
1000bfae:	2312      	movs	r3, #18
1000bfb0:	1c08      	adds	r0, r1, #0
1000bfb2:	1c11      	adds	r1, r2, #0
1000bfb4:	1c1a      	adds	r2, r3, #0
1000bfb6:	4b4d      	ldr	r3, [pc, #308]	; (1000c0ec <ble_resolv_rand_addr_handler+0x21c>)
1000bfb8:	4798      	blx	r3
		peripheral_device_added = true;
1000bfba:	230d      	movs	r3, #13
1000bfbc:	18fb      	adds	r3, r7, r3
1000bfbe:	2201      	movs	r2, #1
1000bfc0:	701a      	strb	r2, [r3, #0]
1000bfc2:	e05d      	b.n	1000c080 <ble_resolv_rand_addr_handler+0x1b0>
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000bfc4:	4b44      	ldr	r3, [pc, #272]	; (1000c0d8 <ble_resolv_rand_addr_handler+0x208>)
1000bfc6:	1c18      	adds	r0, r3, #0
1000bfc8:	4b44      	ldr	r3, [pc, #272]	; (1000c0dc <ble_resolv_rand_addr_handler+0x20c>)
1000bfca:	4798      	blx	r3
1000bfcc:	4b48      	ldr	r3, [pc, #288]	; (1000c0f0 <ble_resolv_rand_addr_handler+0x220>)
1000bfce:	1c18      	adds	r0, r3, #0
1000bfd0:	4b44      	ldr	r3, [pc, #272]	; (1000c0e4 <ble_resolv_rand_addr_handler+0x214>)
1000bfd2:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bfd4:	230f      	movs	r3, #15
1000bfd6:	18fb      	adds	r3, r7, r3
1000bfd8:	2200      	movs	r2, #0
1000bfda:	701a      	strb	r2, [r3, #0]
1000bfdc:	e04b      	b.n	1000c076 <ble_resolv_rand_addr_handler+0x1a6>
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bfde:	230f      	movs	r3, #15
1000bfe0:	18fb      	adds	r3, r7, r3
1000bfe2:	781a      	ldrb	r2, [r3, #0]
1000bfe4:	493a      	ldr	r1, [pc, #232]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000bfe6:	2058      	movs	r0, #88	; 0x58
1000bfe8:	1c13      	adds	r3, r2, #0
1000bfea:	015b      	lsls	r3, r3, #5
1000bfec:	1a9b      	subs	r3, r3, r2
1000bfee:	009b      	lsls	r3, r3, #2
1000bff0:	18cb      	adds	r3, r1, r3
1000bff2:	181b      	adds	r3, r3, r0
1000bff4:	799b      	ldrb	r3, [r3, #6]
1000bff6:	2b00      	cmp	r3, #0
1000bff8:	d136      	bne.n	1000c068 <ble_resolv_rand_addr_handler+0x198>
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bffa:	230f      	movs	r3, #15
1000bffc:	18fb      	adds	r3, r7, r3
1000bffe:	781a      	ldrb	r2, [r3, #0]
1000c000:	1c13      	adds	r3, r2, #0
1000c002:	015b      	lsls	r3, r3, #5
1000c004:	1a9b      	subs	r3, r3, r2
1000c006:	009b      	lsls	r3, r3, #2
1000c008:	4a31      	ldr	r2, [pc, #196]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000c00a:	189a      	adds	r2, r3, r2
1000c00c:	4b36      	ldr	r3, [pc, #216]	; (1000c0e8 <ble_resolv_rand_addr_handler+0x218>)
1000c00e:	1c11      	adds	r1, r2, #0
1000c010:	1c1a      	adds	r2, r3, #0
1000c012:	2312      	movs	r3, #18
1000c014:	1c08      	adds	r0, r1, #0
1000c016:	1c11      	adds	r1, r2, #0
1000c018:	1c1a      	adds	r2, r3, #0
1000c01a:	4b34      	ldr	r3, [pc, #208]	; (1000c0ec <ble_resolv_rand_addr_handler+0x21c>)
1000c01c:	4798      	blx	r3
				ble_device_count++;
1000c01e:	4b35      	ldr	r3, [pc, #212]	; (1000c0f4 <ble_resolv_rand_addr_handler+0x224>)
1000c020:	781b      	ldrb	r3, [r3, #0]
1000c022:	b2db      	uxtb	r3, r3
1000c024:	3301      	adds	r3, #1
1000c026:	b2da      	uxtb	r2, r3
1000c028:	4b32      	ldr	r3, [pc, #200]	; (1000c0f4 <ble_resolv_rand_addr_handler+0x224>)
1000c02a:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c02c:	230f      	movs	r3, #15
1000c02e:	18fb      	adds	r3, r7, r3
1000c030:	781a      	ldrb	r2, [r3, #0]
1000c032:	4927      	ldr	r1, [pc, #156]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000c034:	2058      	movs	r0, #88	; 0x58
1000c036:	1c13      	adds	r3, r2, #0
1000c038:	015b      	lsls	r3, r3, #5
1000c03a:	1a9b      	subs	r3, r3, r2
1000c03c:	009b      	lsls	r3, r3, #2
1000c03e:	18cb      	adds	r3, r1, r3
1000c040:	181b      	adds	r3, r3, r0
1000c042:	2202      	movs	r2, #2
1000c044:	719a      	strb	r2, [r3, #6]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c046:	230f      	movs	r3, #15
1000c048:	18fb      	adds	r3, r7, r3
1000c04a:	781a      	ldrb	r2, [r3, #0]
1000c04c:	4920      	ldr	r1, [pc, #128]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000c04e:	1c13      	adds	r3, r2, #0
1000c050:	015b      	lsls	r3, r3, #5
1000c052:	1a9b      	subs	r3, r3, r2
1000c054:	009b      	lsls	r3, r3, #2
1000c056:	18cb      	adds	r3, r1, r3
1000c058:	3310      	adds	r3, #16
1000c05a:	220a      	movs	r2, #10
1000c05c:	709a      	strb	r2, [r3, #2]
				peripheral_device_added = true;
1000c05e:	230d      	movs	r3, #13
1000c060:	18fb      	adds	r3, r7, r3
1000c062:	2201      	movs	r2, #1
1000c064:	701a      	strb	r2, [r3, #0]
				break;
1000c066:	e00b      	b.n	1000c080 <ble_resolv_rand_addr_handler+0x1b0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c068:	230f      	movs	r3, #15
1000c06a:	18fb      	adds	r3, r7, r3
1000c06c:	781a      	ldrb	r2, [r3, #0]
1000c06e:	230f      	movs	r3, #15
1000c070:	18fb      	adds	r3, r7, r3
1000c072:	3201      	adds	r2, #1
1000c074:	701a      	strb	r2, [r3, #0]
1000c076:	230f      	movs	r3, #15
1000c078:	18fb      	adds	r3, r7, r3
1000c07a:	781b      	ldrb	r3, [r3, #0]
1000c07c:	2b04      	cmp	r3, #4
1000c07e:	d9ae      	bls.n	1000bfde <ble_resolv_rand_addr_handler+0x10e>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000c080:	4b15      	ldr	r3, [pc, #84]	; (1000c0d8 <ble_resolv_rand_addr_handler+0x208>)
1000c082:	1c18      	adds	r0, r3, #0
1000c084:	4b15      	ldr	r3, [pc, #84]	; (1000c0dc <ble_resolv_rand_addr_handler+0x20c>)
1000c086:	4798      	blx	r3
1000c088:	230f      	movs	r3, #15
1000c08a:	18fb      	adds	r3, r7, r3
1000c08c:	781b      	ldrb	r3, [r3, #0]
1000c08e:	4a1a      	ldr	r2, [pc, #104]	; (1000c0f8 <ble_resolv_rand_addr_handler+0x228>)
1000c090:	1c10      	adds	r0, r2, #0
1000c092:	1c19      	adds	r1, r3, #0
1000c094:	4b13      	ldr	r3, [pc, #76]	; (1000c0e4 <ble_resolv_rand_addr_handler+0x214>)
1000c096:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c098:	230f      	movs	r3, #15
1000c09a:	18fb      	adds	r3, r7, r3
1000c09c:	781a      	ldrb	r2, [r3, #0]
1000c09e:	490c      	ldr	r1, [pc, #48]	; (1000c0d0 <ble_resolv_rand_addr_handler+0x200>)
1000c0a0:	1c13      	adds	r3, r2, #0
1000c0a2:	015b      	lsls	r3, r3, #5
1000c0a4:	1a9b      	subs	r3, r3, r2
1000c0a6:	009b      	lsls	r3, r3, #2
1000c0a8:	18cb      	adds	r3, r1, r3
1000c0aa:	3310      	adds	r3, #16
1000c0ac:	789b      	ldrb	r3, [r3, #2]
1000c0ae:	2b0a      	cmp	r3, #10
1000c0b0:	d109      	bne.n	1000c0c6 <ble_resolv_rand_addr_handler+0x1f6>
1000c0b2:	230d      	movs	r3, #13
1000c0b4:	18fb      	adds	r3, r7, r3
1000c0b6:	781b      	ldrb	r3, [r3, #0]
1000c0b8:	2b00      	cmp	r3, #0
1000c0ba:	d004      	beq.n	1000c0c6 <ble_resolv_rand_addr_handler+0x1f6>
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000c0bc:	4b0a      	ldr	r3, [pc, #40]	; (1000c0e8 <ble_resolv_rand_addr_handler+0x218>)
1000c0be:	891b      	ldrh	r3, [r3, #8]
1000c0c0:	1c18      	adds	r0, r3, #0
1000c0c2:	4b0e      	ldr	r3, [pc, #56]	; (1000c0fc <ble_resolv_rand_addr_handler+0x22c>)
1000c0c4:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000c0c6:	2300      	movs	r3, #0
	
}
1000c0c8:	1c18      	adds	r0, r3, #0
1000c0ca:	46bd      	mov	sp, r7
1000c0cc:	b004      	add	sp, #16
1000c0ce:	bd80      	pop	{r7, pc}
1000c0d0:	10016a2c 	.word	0x10016a2c
1000c0d4:	100133bd 	.word	0x100133bd
1000c0d8:	1001507c 	.word	0x1001507c
1000c0dc:	1001351d 	.word	0x1001351d
1000c0e0:	10015578 	.word	0x10015578
1000c0e4:	100133fd 	.word	0x100133fd
1000c0e8:	10016cd8 	.word	0x10016cd8
1000c0ec:	100133db 	.word	0x100133db
1000c0f0:	10015590 	.word	0x10015590
1000c0f4:	10016c98 	.word	0x10016c98
1000c0f8:	100155ac 	.word	0x100155ac
1000c0fc:	1000ba9d 	.word	0x1000ba9d

1000c100 <ble_mtu_changed_indication_handler>:

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000c100:	b580      	push	{r7, lr}
1000c102:	b084      	sub	sp, #16
1000c104:	af00      	add	r7, sp, #0
1000c106:	6078      	str	r0, [r7, #4]
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
1000c108:	687b      	ldr	r3, [r7, #4]
1000c10a:	60fb      	str	r3, [r7, #12]
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c10c:	4b09      	ldr	r3, [pc, #36]	; (1000c134 <ble_mtu_changed_indication_handler+0x34>)
1000c10e:	1c18      	adds	r0, r3, #0
1000c110:	4b09      	ldr	r3, [pc, #36]	; (1000c138 <ble_mtu_changed_indication_handler+0x38>)
1000c112:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
1000c114:	68fb      	ldr	r3, [r7, #12]
1000c116:	881b      	ldrh	r3, [r3, #0]

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c118:	1c19      	adds	r1, r3, #0
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
1000c11a:	68fb      	ldr	r3, [r7, #12]
1000c11c:	885b      	ldrh	r3, [r3, #2]

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c11e:	1c1a      	adds	r2, r3, #0
1000c120:	4b06      	ldr	r3, [pc, #24]	; (1000c13c <ble_mtu_changed_indication_handler+0x3c>)
1000c122:	1c18      	adds	r0, r3, #0
1000c124:	4b06      	ldr	r3, [pc, #24]	; (1000c140 <ble_mtu_changed_indication_handler+0x40>)
1000c126:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
1000c128:	2300      	movs	r3, #0
}
1000c12a:	1c18      	adds	r0, r3, #0
1000c12c:	46bd      	mov	sp, r7
1000c12e:	b004      	add	sp, #16
1000c130:	bd80      	pop	{r7, pc}
1000c132:	46c0      	nop			; (mov r8, r8)
1000c134:	1001507c 	.word	0x1001507c
1000c138:	1001351d 	.word	0x1001351d
1000c13c:	100155bc 	.word	0x100155bc
1000c140:	100133fd 	.word	0x100133fd

1000c144 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c144:	b580      	push	{r7, lr}
1000c146:	b084      	sub	sp, #16
1000c148:	af00      	add	r7, sp, #0
1000c14a:	6078      	str	r0, [r7, #4]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
1000c14c:	687b      	ldr	r3, [r7, #4]
1000c14e:	60fb      	str	r3, [r7, #12]
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c150:	68fb      	ldr	r3, [r7, #12]
1000c152:	78db      	ldrb	r3, [r3, #3]
1000c154:	2b00      	cmp	r3, #0
1000c156:	d10f      	bne.n	1000c178 <ble_mtu_changed_cmd_complete_handler+0x34>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c158:	4b11      	ldr	r3, [pc, #68]	; (1000c1a0 <ble_mtu_changed_cmd_complete_handler+0x5c>)
1000c15a:	1c18      	adds	r0, r3, #0
1000c15c:	4b11      	ldr	r3, [pc, #68]	; (1000c1a4 <ble_mtu_changed_cmd_complete_handler+0x60>)
1000c15e:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
1000c160:	68fb      	ldr	r3, [r7, #12]
1000c162:	881b      	ldrh	r3, [r3, #0]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c164:	1c19      	adds	r1, r3, #0
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
1000c166:	68fb      	ldr	r3, [r7, #12]
1000c168:	789b      	ldrb	r3, [r3, #2]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c16a:	1c1a      	adds	r2, r3, #0
1000c16c:	4b0e      	ldr	r3, [pc, #56]	; (1000c1a8 <ble_mtu_changed_cmd_complete_handler+0x64>)
1000c16e:	1c18      	adds	r0, r3, #0
1000c170:	4b0e      	ldr	r3, [pc, #56]	; (1000c1ac <ble_mtu_changed_cmd_complete_handler+0x68>)
1000c172:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c174:	2300      	movs	r3, #0
1000c176:	e00e      	b.n	1000c196 <ble_mtu_changed_cmd_complete_handler+0x52>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c178:	4b09      	ldr	r3, [pc, #36]	; (1000c1a0 <ble_mtu_changed_cmd_complete_handler+0x5c>)
1000c17a:	1c18      	adds	r0, r3, #0
1000c17c:	4b09      	ldr	r3, [pc, #36]	; (1000c1a4 <ble_mtu_changed_cmd_complete_handler+0x60>)
1000c17e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
1000c180:	68fb      	ldr	r3, [r7, #12]
1000c182:	881b      	ldrh	r3, [r3, #0]
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c184:	1c19      	adds	r1, r3, #0
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
1000c186:	68fb      	ldr	r3, [r7, #12]
1000c188:	789b      	ldrb	r3, [r3, #2]
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c18a:	1c1a      	adds	r2, r3, #0
1000c18c:	4b08      	ldr	r3, [pc, #32]	; (1000c1b0 <ble_mtu_changed_cmd_complete_handler+0x6c>)
1000c18e:	1c18      	adds	r0, r3, #0
1000c190:	4b06      	ldr	r3, [pc, #24]	; (1000c1ac <ble_mtu_changed_cmd_complete_handler+0x68>)
1000c192:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c194:	23e2      	movs	r3, #226	; 0xe2
}
1000c196:	1c18      	adds	r0, r3, #0
1000c198:	46bd      	mov	sp, r7
1000c19a:	b004      	add	sp, #16
1000c19c:	bd80      	pop	{r7, pc}
1000c19e:	46c0      	nop			; (mov r8, r8)
1000c1a0:	1001507c 	.word	0x1001507c
1000c1a4:	1001351d 	.word	0x1001351d
1000c1a8:	100155f4 	.word	0x100155f4
1000c1ac:	100133fd 	.word	0x100133fd
1000c1b0:	10015624 	.word	0x10015624

1000c1b4 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000c1b4:	b580      	push	{r7, lr}
1000c1b6:	b084      	sub	sp, #16
1000c1b8:	af00      	add	r7, sp, #0
1000c1ba:	6078      	str	r0, [r7, #4]
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
1000c1bc:	687b      	ldr	r3, [r7, #4]
1000c1be:	60fb      	str	r3, [r7, #12]
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c1c0:	68fb      	ldr	r3, [r7, #12]
1000c1c2:	78db      	ldrb	r3, [r3, #3]
1000c1c4:	2b00      	cmp	r3, #0
1000c1c6:	d10f      	bne.n	1000c1e8 <ble_characteristic_write_cmd_complete_handler+0x34>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c1c8:	4b11      	ldr	r3, [pc, #68]	; (1000c210 <ble_characteristic_write_cmd_complete_handler+0x5c>)
1000c1ca:	1c18      	adds	r0, r3, #0
1000c1cc:	4b11      	ldr	r3, [pc, #68]	; (1000c214 <ble_characteristic_write_cmd_complete_handler+0x60>)
1000c1ce:	4798      	blx	r3
		cmd_complete_event->conn_handle,
1000c1d0:	68fb      	ldr	r3, [r7, #12]
1000c1d2:	881b      	ldrh	r3, [r3, #0]
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c1d4:	1c19      	adds	r1, r3, #0
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
1000c1d6:	68fb      	ldr	r3, [r7, #12]
1000c1d8:	789b      	ldrb	r3, [r3, #2]
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c1da:	1c1a      	adds	r2, r3, #0
1000c1dc:	4b0e      	ldr	r3, [pc, #56]	; (1000c218 <ble_characteristic_write_cmd_complete_handler+0x64>)
1000c1de:	1c18      	adds	r0, r3, #0
1000c1e0:	4b0e      	ldr	r3, [pc, #56]	; (1000c21c <ble_characteristic_write_cmd_complete_handler+0x68>)
1000c1e2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c1e4:	2300      	movs	r3, #0
1000c1e6:	e00e      	b.n	1000c206 <ble_characteristic_write_cmd_complete_handler+0x52>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c1e8:	4b09      	ldr	r3, [pc, #36]	; (1000c210 <ble_characteristic_write_cmd_complete_handler+0x5c>)
1000c1ea:	1c18      	adds	r0, r3, #0
1000c1ec:	4b09      	ldr	r3, [pc, #36]	; (1000c214 <ble_characteristic_write_cmd_complete_handler+0x60>)
1000c1ee:	4798      	blx	r3
		cmd_complete_event->conn_handle,
1000c1f0:	68fb      	ldr	r3, [r7, #12]
1000c1f2:	881b      	ldrh	r3, [r3, #0]
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c1f4:	1c19      	adds	r1, r3, #0
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
1000c1f6:	68fb      	ldr	r3, [r7, #12]
1000c1f8:	789b      	ldrb	r3, [r3, #2]
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c1fa:	1c1a      	adds	r2, r3, #0
1000c1fc:	4b08      	ldr	r3, [pc, #32]	; (1000c220 <ble_characteristic_write_cmd_complete_handler+0x6c>)
1000c1fe:	1c18      	adds	r0, r3, #0
1000c200:	4b06      	ldr	r3, [pc, #24]	; (1000c21c <ble_characteristic_write_cmd_complete_handler+0x68>)
1000c202:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c204:	23e2      	movs	r3, #226	; 0xe2
}
1000c206:	1c18      	adds	r0, r3, #0
1000c208:	46bd      	mov	sp, r7
1000c20a:	b004      	add	sp, #16
1000c20c:	bd80      	pop	{r7, pc}
1000c20e:	46c0      	nop			; (mov r8, r8)
1000c210:	1001507c 	.word	0x1001507c
1000c214:	1001351d 	.word	0x1001351d
1000c218:	1001565c 	.word	0x1001565c
1000c21c:	100133fd 	.word	0x100133fd
1000c220:	10015698 	.word	0x10015698

1000c224 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c224:	b580      	push	{r7, lr}
1000c226:	b084      	sub	sp, #16
1000c228:	af00      	add	r7, sp, #0
1000c22a:	6078      	str	r0, [r7, #4]
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
1000c22c:	687b      	ldr	r3, [r7, #4]
1000c22e:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c230:	230f      	movs	r3, #15
1000c232:	18fb      	adds	r3, r7, r3
1000c234:	2200      	movs	r2, #0
1000c236:	701a      	strb	r2, [r3, #0]
1000c238:	e0a1      	b.n	1000c37e <ble_disconnected_state_handler+0x15a>
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c23a:	230f      	movs	r3, #15
1000c23c:	18fb      	adds	r3, r7, r3
1000c23e:	781a      	ldrb	r2, [r3, #0]
1000c240:	495b      	ldr	r1, [pc, #364]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c242:	1c13      	adds	r3, r2, #0
1000c244:	015b      	lsls	r3, r3, #5
1000c246:	1a9b      	subs	r3, r3, r2
1000c248:	009b      	lsls	r3, r3, #2
1000c24a:	18cb      	adds	r3, r1, r3
1000c24c:	3308      	adds	r3, #8
1000c24e:	881a      	ldrh	r2, [r3, #0]
1000c250:	68bb      	ldr	r3, [r7, #8]
1000c252:	881b      	ldrh	r3, [r3, #0]
1000c254:	429a      	cmp	r2, r3
1000c256:	d129      	bne.n	1000c2ac <ble_disconnected_state_handler+0x88>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c258:	230f      	movs	r3, #15
1000c25a:	18fb      	adds	r3, r7, r3
1000c25c:	781a      	ldrb	r2, [r3, #0]
1000c25e:	4954      	ldr	r1, [pc, #336]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c260:	2058      	movs	r0, #88	; 0x58
1000c262:	1c13      	adds	r3, r2, #0
1000c264:	015b      	lsls	r3, r3, #5
1000c266:	1a9b      	subs	r3, r3, r2
1000c268:	009b      	lsls	r3, r3, #2
1000c26a:	18cb      	adds	r3, r1, r3
1000c26c:	181b      	adds	r3, r3, r0
1000c26e:	799b      	ldrb	r3, [r3, #6]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c270:	2b05      	cmp	r3, #5
1000c272:	d00d      	beq.n	1000c290 <ble_disconnected_state_handler+0x6c>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c274:	230f      	movs	r3, #15
1000c276:	18fb      	adds	r3, r7, r3
1000c278:	781a      	ldrb	r2, [r3, #0]
1000c27a:	494d      	ldr	r1, [pc, #308]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c27c:	2058      	movs	r0, #88	; 0x58
1000c27e:	1c13      	adds	r3, r2, #0
1000c280:	015b      	lsls	r3, r3, #5
1000c282:	1a9b      	subs	r3, r3, r2
1000c284:	009b      	lsls	r3, r3, #2
1000c286:	18cb      	adds	r3, r1, r3
1000c288:	181b      	adds	r3, r3, r0
1000c28a:	799b      	ldrb	r3, [r3, #6]
1000c28c:	2b08      	cmp	r3, #8
1000c28e:	d10d      	bne.n	1000c2ac <ble_disconnected_state_handler+0x88>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c290:	230f      	movs	r3, #15
1000c292:	18fb      	adds	r3, r7, r3
1000c294:	781a      	ldrb	r2, [r3, #0]
1000c296:	4946      	ldr	r1, [pc, #280]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c298:	2058      	movs	r0, #88	; 0x58
1000c29a:	1c13      	adds	r3, r2, #0
1000c29c:	015b      	lsls	r3, r3, #5
1000c29e:	1a9b      	subs	r3, r3, r2
1000c2a0:	009b      	lsls	r3, r3, #2
1000c2a2:	18cb      	adds	r3, r1, r3
1000c2a4:	181b      	adds	r3, r3, r0
1000c2a6:	2201      	movs	r2, #1
1000c2a8:	719a      	strb	r2, [r3, #6]
1000c2aa:	e061      	b.n	1000c370 <ble_disconnected_state_handler+0x14c>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
1000c2ac:	230f      	movs	r3, #15
1000c2ae:	18fb      	adds	r3, r7, r3
1000c2b0:	781a      	ldrb	r2, [r3, #0]
1000c2b2:	493f      	ldr	r1, [pc, #252]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c2b4:	1c13      	adds	r3, r2, #0
1000c2b6:	015b      	lsls	r3, r3, #5
1000c2b8:	1a9b      	subs	r3, r3, r2
1000c2ba:	009b      	lsls	r3, r3, #2
1000c2bc:	18cb      	adds	r3, r1, r3
1000c2be:	3308      	adds	r3, #8
1000c2c0:	881a      	ldrh	r2, [r3, #0]
1000c2c2:	68bb      	ldr	r3, [r7, #8]
1000c2c4:	881b      	ldrh	r3, [r3, #0]
1000c2c6:	429a      	cmp	r2, r3
1000c2c8:	d152      	bne.n	1000c370 <ble_disconnected_state_handler+0x14c>
		{
			switch (ble_dev_info[idx].conn_state)
1000c2ca:	230f      	movs	r3, #15
1000c2cc:	18fb      	adds	r3, r7, r3
1000c2ce:	781a      	ldrb	r2, [r3, #0]
1000c2d0:	4937      	ldr	r1, [pc, #220]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c2d2:	2058      	movs	r0, #88	; 0x58
1000c2d4:	1c13      	adds	r3, r2, #0
1000c2d6:	015b      	lsls	r3, r3, #5
1000c2d8:	1a9b      	subs	r3, r3, r2
1000c2da:	009b      	lsls	r3, r3, #2
1000c2dc:	18cb      	adds	r3, r1, r3
1000c2de:	181b      	adds	r3, r3, r0
1000c2e0:	799b      	ldrb	r3, [r3, #6]
1000c2e2:	2b07      	cmp	r3, #7
1000c2e4:	d81f      	bhi.n	1000c326 <ble_disconnected_state_handler+0x102>
1000c2e6:	009a      	lsls	r2, r3, #2
1000c2e8:	4b32      	ldr	r3, [pc, #200]	; (1000c3b4 <ble_disconnected_state_handler+0x190>)
1000c2ea:	18d3      	adds	r3, r2, r3
1000c2ec:	681b      	ldr	r3, [r3, #0]
1000c2ee:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c2f0:	230f      	movs	r3, #15
1000c2f2:	18fb      	adds	r3, r7, r3
1000c2f4:	781a      	ldrb	r2, [r3, #0]
1000c2f6:	492e      	ldr	r1, [pc, #184]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c2f8:	2058      	movs	r0, #88	; 0x58
1000c2fa:	1c13      	adds	r3, r2, #0
1000c2fc:	015b      	lsls	r3, r3, #5
1000c2fe:	1a9b      	subs	r3, r3, r2
1000c300:	009b      	lsls	r3, r3, #2
1000c302:	18cb      	adds	r3, r1, r3
1000c304:	181b      	adds	r3, r3, r0
1000c306:	2200      	movs	r2, #0
1000c308:	719a      	strb	r2, [r3, #6]
					if (ble_device_count > 0)
1000c30a:	4b2b      	ldr	r3, [pc, #172]	; (1000c3b8 <ble_disconnected_state_handler+0x194>)
1000c30c:	781b      	ldrb	r3, [r3, #0]
1000c30e:	b2db      	uxtb	r3, r3
1000c310:	2b00      	cmp	r3, #0
1000c312:	d007      	beq.n	1000c324 <ble_disconnected_state_handler+0x100>
					{
						ble_device_count--;
1000c314:	4b28      	ldr	r3, [pc, #160]	; (1000c3b8 <ble_disconnected_state_handler+0x194>)
1000c316:	781b      	ldrb	r3, [r3, #0]
1000c318:	b2db      	uxtb	r3, r3
1000c31a:	3b01      	subs	r3, #1
1000c31c:	b2da      	uxtb	r2, r3
1000c31e:	4b26      	ldr	r3, [pc, #152]	; (1000c3b8 <ble_disconnected_state_handler+0x194>)
1000c320:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
1000c322:	e025      	b.n	1000c370 <ble_disconnected_state_handler+0x14c>
1000c324:	e024      	b.n	1000c370 <ble_disconnected_state_handler+0x14c>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c326:	4b25      	ldr	r3, [pc, #148]	; (1000c3bc <ble_disconnected_state_handler+0x198>)
1000c328:	1c18      	adds	r0, r3, #0
1000c32a:	4b25      	ldr	r3, [pc, #148]	; (1000c3c0 <ble_disconnected_state_handler+0x19c>)
1000c32c:	4798      	blx	r3
1000c32e:	230f      	movs	r3, #15
1000c330:	18fb      	adds	r3, r7, r3
1000c332:	781a      	ldrb	r2, [r3, #0]
1000c334:	491e      	ldr	r1, [pc, #120]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c336:	2058      	movs	r0, #88	; 0x58
1000c338:	1c13      	adds	r3, r2, #0
1000c33a:	015b      	lsls	r3, r3, #5
1000c33c:	1a9b      	subs	r3, r3, r2
1000c33e:	009b      	lsls	r3, r3, #2
1000c340:	18cb      	adds	r3, r1, r3
1000c342:	181b      	adds	r3, r3, r0
1000c344:	799b      	ldrb	r3, [r3, #6]
1000c346:	1c1a      	adds	r2, r3, #0
1000c348:	4b1e      	ldr	r3, [pc, #120]	; (1000c3c4 <ble_disconnected_state_handler+0x1a0>)
1000c34a:	1c18      	adds	r0, r3, #0
1000c34c:	1c11      	adds	r1, r2, #0
1000c34e:	4b1e      	ldr	r3, [pc, #120]	; (1000c3c8 <ble_disconnected_state_handler+0x1a4>)
1000c350:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c352:	230f      	movs	r3, #15
1000c354:	18fb      	adds	r3, r7, r3
1000c356:	781a      	ldrb	r2, [r3, #0]
1000c358:	4915      	ldr	r1, [pc, #84]	; (1000c3b0 <ble_disconnected_state_handler+0x18c>)
1000c35a:	2058      	movs	r0, #88	; 0x58
1000c35c:	1c13      	adds	r3, r2, #0
1000c35e:	015b      	lsls	r3, r3, #5
1000c360:	1a9b      	subs	r3, r3, r2
1000c362:	009b      	lsls	r3, r3, #2
1000c364:	18cb      	adds	r3, r1, r3
1000c366:	181b      	adds	r3, r3, r0
1000c368:	2200      	movs	r2, #0
1000c36a:	719a      	strb	r2, [r3, #6]
				break;				
1000c36c:	e000      	b.n	1000c370 <ble_disconnected_state_handler+0x14c>
					}
				}
				break;
				
				case BLE_DEVICE_DISCONNECTED:
				break;
1000c36e:	46c0      	nop			; (mov r8, r8)
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c370:	230f      	movs	r3, #15
1000c372:	18fb      	adds	r3, r7, r3
1000c374:	781a      	ldrb	r2, [r3, #0]
1000c376:	230f      	movs	r3, #15
1000c378:	18fb      	adds	r3, r7, r3
1000c37a:	3201      	adds	r2, #1
1000c37c:	701a      	strb	r2, [r3, #0]
1000c37e:	230f      	movs	r3, #15
1000c380:	18fb      	adds	r3, r7, r3
1000c382:	781b      	ldrb	r3, [r3, #0]
1000c384:	2b04      	cmp	r3, #4
1000c386:	d800      	bhi.n	1000c38a <ble_disconnected_state_handler+0x166>
1000c388:	e757      	b.n	1000c23a <ble_disconnected_state_handler+0x16>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c38a:	4b0c      	ldr	r3, [pc, #48]	; (1000c3bc <ble_disconnected_state_handler+0x198>)
1000c38c:	1c18      	adds	r0, r3, #0
1000c38e:	4b0c      	ldr	r3, [pc, #48]	; (1000c3c0 <ble_disconnected_state_handler+0x19c>)
1000c390:	4798      	blx	r3
1000c392:	68bb      	ldr	r3, [r7, #8]
1000c394:	789b      	ldrb	r3, [r3, #2]
1000c396:	1c19      	adds	r1, r3, #0
1000c398:	68bb      	ldr	r3, [r7, #8]
1000c39a:	881b      	ldrh	r3, [r3, #0]
1000c39c:	1c1a      	adds	r2, r3, #0
1000c39e:	4b0b      	ldr	r3, [pc, #44]	; (1000c3cc <ble_disconnected_state_handler+0x1a8>)
1000c3a0:	1c18      	adds	r0, r3, #0
1000c3a2:	4b09      	ldr	r3, [pc, #36]	; (1000c3c8 <ble_disconnected_state_handler+0x1a4>)
1000c3a4:	4798      	blx	r3
	return AT_BLE_SUCCESS;
1000c3a6:	2300      	movs	r3, #0
}
1000c3a8:	1c18      	adds	r0, r3, #0
1000c3aa:	46bd      	mov	sp, r7
1000c3ac:	b004      	add	sp, #16
1000c3ae:	bd80      	pop	{r7, pc}
1000c3b0:	10016a2c 	.word	0x10016a2c
1000c3b4:	10015f08 	.word	0x10015f08
1000c3b8:	10016c98 	.word	0x10016c98
1000c3bc:	1001507c 	.word	0x1001507c
1000c3c0:	1001351d 	.word	0x1001351d
1000c3c4:	100156d4 	.word	0x100156d4
1000c3c8:	100133fd 	.word	0x100133fd
1000c3cc:	100156ec 	.word	0x100156ec

1000c3d0 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c3d0:	b580      	push	{r7, lr}
1000c3d2:	b084      	sub	sp, #16
1000c3d4:	af00      	add	r7, sp, #0
1000c3d6:	6078      	str	r0, [r7, #4]
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
1000c3d8:	687b      	ldr	r3, [r7, #4]
1000c3da:	60fb      	str	r3, [r7, #12]
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c3dc:	4b06      	ldr	r3, [pc, #24]	; (1000c3f8 <ble_conn_param_update+0x28>)
1000c3de:	1c18      	adds	r0, r3, #0
1000c3e0:	4b06      	ldr	r3, [pc, #24]	; (1000c3fc <ble_conn_param_update+0x2c>)
1000c3e2:	4798      	blx	r3
1000c3e4:	4b06      	ldr	r3, [pc, #24]	; (1000c400 <ble_conn_param_update+0x30>)
1000c3e6:	1c18      	adds	r0, r3, #0
1000c3e8:	4b06      	ldr	r3, [pc, #24]	; (1000c404 <ble_conn_param_update+0x34>)
1000c3ea:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
1000c3ec:	2300      	movs	r3, #0
}
1000c3ee:	1c18      	adds	r0, r3, #0
1000c3f0:	46bd      	mov	sp, r7
1000c3f2:	b004      	add	sp, #16
1000c3f4:	bd80      	pop	{r7, pc}
1000c3f6:	46c0      	nop			; (mov r8, r8)
1000c3f8:	1001507c 	.word	0x1001507c
1000c3fc:	1001351d 	.word	0x1001351d
1000c400:	1001571c 	.word	0x1001571c
1000c404:	100133fd 	.word	0x100133fd

1000c408 <ble_conn_param_update_req>:

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c408:	b590      	push	{r4, r7, lr}
1000c40a:	b085      	sub	sp, #20
1000c40c:	af00      	add	r7, sp, #0
1000c40e:	6078      	str	r0, [r7, #4]
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
1000c410:	687b      	ldr	r3, [r7, #4]
1000c412:	60fb      	str	r3, [r7, #12]
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c414:	68fb      	ldr	r3, [r7, #12]
1000c416:	881b      	ldrh	r3, [r3, #0]
1000c418:	1c18      	adds	r0, r3, #0
1000c41a:	2101      	movs	r1, #1
1000c41c:	2201      	movs	r2, #1
1000c41e:	2378      	movs	r3, #120	; 0x78
1000c420:	4c03      	ldr	r4, [pc, #12]	; (1000c430 <ble_conn_param_update_req+0x28>)
1000c422:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
1000c424:	2300      	movs	r3, #0
}
1000c426:	1c18      	adds	r0, r3, #0
1000c428:	46bd      	mov	sp, r7
1000c42a:	b005      	add	sp, #20
1000c42c:	bd90      	pop	{r4, r7, pc}
1000c42e:	46c0      	nop			; (mov r8, r8)
1000c430:	1000fbb1 	.word	0x1000fbb1

1000c434 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c434:	b5b0      	push	{r4, r5, r7, lr}
1000c436:	b088      	sub	sp, #32
1000c438:	af00      	add	r7, sp, #0
1000c43a:	6078      	str	r0, [r7, #4]
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
1000c43c:	231f      	movs	r3, #31
1000c43e:	18fb      	adds	r3, r7, r3
1000c440:	2200      	movs	r2, #0
1000c442:	701a      	strb	r2, [r3, #0]
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
1000c444:	231d      	movs	r3, #29
1000c446:	18fb      	adds	r3, r7, r3
1000c448:	2200      	movs	r2, #0
1000c44a:	701a      	strb	r2, [r3, #0]
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
1000c44c:	687b      	ldr	r3, [r7, #4]
1000c44e:	61bb      	str	r3, [r7, #24]
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c450:	230c      	movs	r3, #12
1000c452:	18fb      	adds	r3, r7, r3
1000c454:	1c18      	adds	r0, r3, #0
1000c456:	2100      	movs	r1, #0
1000c458:	2209      	movs	r2, #9
1000c45a:	4be3      	ldr	r3, [pc, #908]	; (1000c7e8 <ble_slave_security_request_handler+0x3b4>)
1000c45c:	4798      	blx	r3
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c45e:	231e      	movs	r3, #30
1000c460:	18fb      	adds	r3, r7, r3
1000c462:	2200      	movs	r2, #0
1000c464:	701a      	strb	r2, [r3, #0]
1000c466:	e035      	b.n	1000c4d4 <ble_slave_security_request_handler+0xa0>
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c468:	231e      	movs	r3, #30
1000c46a:	18fb      	adds	r3, r7, r3
1000c46c:	781a      	ldrb	r2, [r3, #0]
1000c46e:	49df      	ldr	r1, [pc, #892]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c470:	1c13      	adds	r3, r2, #0
1000c472:	015b      	lsls	r3, r3, #5
1000c474:	1a9b      	subs	r3, r3, r2
1000c476:	009b      	lsls	r3, r3, #2
1000c478:	18cb      	adds	r3, r1, r3
1000c47a:	3308      	adds	r3, #8
1000c47c:	881a      	ldrh	r2, [r3, #0]
1000c47e:	69bb      	ldr	r3, [r7, #24]
1000c480:	881b      	ldrh	r3, [r3, #0]
1000c482:	429a      	cmp	r2, r3
1000c484:	d11f      	bne.n	1000c4c6 <ble_slave_security_request_handler+0x92>
1000c486:	231e      	movs	r3, #30
1000c488:	18fb      	adds	r3, r7, r3
1000c48a:	781a      	ldrb	r2, [r3, #0]
1000c48c:	49d7      	ldr	r1, [pc, #860]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c48e:	2058      	movs	r0, #88	; 0x58
1000c490:	1c13      	adds	r3, r2, #0
1000c492:	015b      	lsls	r3, r3, #5
1000c494:	1a9b      	subs	r3, r3, r2
1000c496:	009b      	lsls	r3, r3, #2
1000c498:	18cb      	adds	r3, r1, r3
1000c49a:	181b      	adds	r3, r3, r0
1000c49c:	799b      	ldrb	r3, [r3, #6]
1000c49e:	2b02      	cmp	r3, #2
1000c4a0:	d111      	bne.n	1000c4c6 <ble_slave_security_request_handler+0x92>
		{
			device_found = true;
1000c4a2:	231d      	movs	r3, #29
1000c4a4:	18fb      	adds	r3, r7, r3
1000c4a6:	2201      	movs	r2, #1
1000c4a8:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c4aa:	231e      	movs	r3, #30
1000c4ac:	18fb      	adds	r3, r7, r3
1000c4ae:	781a      	ldrb	r2, [r3, #0]
1000c4b0:	49ce      	ldr	r1, [pc, #824]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c4b2:	2058      	movs	r0, #88	; 0x58
1000c4b4:	1c13      	adds	r3, r2, #0
1000c4b6:	015b      	lsls	r3, r3, #5
1000c4b8:	1a9b      	subs	r3, r3, r2
1000c4ba:	009b      	lsls	r3, r3, #2
1000c4bc:	18cb      	adds	r3, r1, r3
1000c4be:	181b      	adds	r3, r3, r0
1000c4c0:	2206      	movs	r2, #6
1000c4c2:	719a      	strb	r2, [r3, #6]
			break;
1000c4c4:	e00b      	b.n	1000c4de <ble_slave_security_request_handler+0xaa>
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c4c6:	231e      	movs	r3, #30
1000c4c8:	18fb      	adds	r3, r7, r3
1000c4ca:	781a      	ldrb	r2, [r3, #0]
1000c4cc:	231e      	movs	r3, #30
1000c4ce:	18fb      	adds	r3, r7, r3
1000c4d0:	3201      	adds	r2, #1
1000c4d2:	701a      	strb	r2, [r3, #0]
1000c4d4:	231e      	movs	r3, #30
1000c4d6:	18fb      	adds	r3, r7, r3
1000c4d8:	781b      	ldrb	r3, [r3, #0]
1000c4da:	2b04      	cmp	r3, #4
1000c4dc:	d9c4      	bls.n	1000c468 <ble_slave_security_request_handler+0x34>
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
			break;
		}
	}
	
	if (device_found)
1000c4de:	231d      	movs	r3, #29
1000c4e0:	18fb      	adds	r3, r7, r3
1000c4e2:	781b      	ldrb	r3, [r3, #0]
1000c4e4:	2b00      	cmp	r3, #0
1000c4e6:	d04b      	beq.n	1000c580 <ble_slave_security_request_handler+0x14c>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c4e8:	231e      	movs	r3, #30
1000c4ea:	18fb      	adds	r3, r7, r3
1000c4ec:	781a      	ldrb	r2, [r3, #0]
1000c4ee:	49bf      	ldr	r1, [pc, #764]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c4f0:	1c13      	adds	r3, r2, #0
1000c4f2:	015b      	lsls	r3, r3, #5
1000c4f4:	1a9b      	subs	r3, r3, r2
1000c4f6:	009b      	lsls	r3, r3, #2
1000c4f8:	18cb      	adds	r3, r1, r3
1000c4fa:	3310      	adds	r3, #16
1000c4fc:	791b      	ldrb	r3, [r3, #4]
1000c4fe:	1c1a      	adds	r2, r3, #0
1000c500:	2301      	movs	r3, #1
1000c502:	4013      	ands	r3, r2
1000c504:	d02f      	beq.n	1000c566 <ble_slave_security_request_handler+0x132>
1000c506:	69bb      	ldr	r3, [r7, #24]
1000c508:	78db      	ldrb	r3, [r3, #3]
1000c50a:	2b00      	cmp	r3, #0
1000c50c:	d02b      	beq.n	1000c566 <ble_slave_security_request_handler+0x132>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c50e:	69bb      	ldr	r3, [r7, #24]
1000c510:	8818      	ldrh	r0, [r3, #0]
1000c512:	231e      	movs	r3, #30
1000c514:	18fb      	adds	r3, r7, r3
1000c516:	781a      	ldrb	r2, [r3, #0]
1000c518:	1c13      	adds	r3, r2, #0
1000c51a:	015b      	lsls	r3, r3, #5
1000c51c:	1a9b      	subs	r3, r3, r2
1000c51e:	009b      	lsls	r3, r3, #2
1000c520:	3310      	adds	r3, #16
1000c522:	1c1a      	adds	r2, r3, #0
1000c524:	4bb1      	ldr	r3, [pc, #708]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c526:	18d3      	adds	r3, r2, r3
1000c528:	330a      	adds	r3, #10
1000c52a:	1c1c      	adds	r4, r3, #0
1000c52c:	231e      	movs	r3, #30
1000c52e:	18fb      	adds	r3, r7, r3
1000c530:	781a      	ldrb	r2, [r3, #0]
1000c532:	49ae      	ldr	r1, [pc, #696]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c534:	1c13      	adds	r3, r2, #0
1000c536:	015b      	lsls	r3, r3, #5
1000c538:	1a9b      	subs	r3, r3, r2
1000c53a:	009b      	lsls	r3, r3, #2
1000c53c:	18cb      	adds	r3, r1, r3
1000c53e:	3310      	adds	r3, #16
1000c540:	791b      	ldrb	r3, [r3, #4]
1000c542:	1c21      	adds	r1, r4, #0
1000c544:	1c1a      	adds	r2, r3, #0
1000c546:	4baa      	ldr	r3, [pc, #680]	; (1000c7f0 <ble_slave_security_request_handler+0x3bc>)
1000c548:	4798      	blx	r3
1000c54a:	1e03      	subs	r3, r0, #0
1000c54c:	d101      	bne.n	1000c552 <ble_slave_security_request_handler+0x11e>
			{
				return  AT_BLE_SUCCESS;
1000c54e:	2300      	movs	r3, #0
1000c550:	e15f      	b.n	1000c812 <ble_slave_security_request_handler+0x3de>
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c552:	4ba8      	ldr	r3, [pc, #672]	; (1000c7f4 <ble_slave_security_request_handler+0x3c0>)
1000c554:	1c18      	adds	r0, r3, #0
1000c556:	4ba8      	ldr	r3, [pc, #672]	; (1000c7f8 <ble_slave_security_request_handler+0x3c4>)
1000c558:	4798      	blx	r3
1000c55a:	4ba8      	ldr	r3, [pc, #672]	; (1000c7fc <ble_slave_security_request_handler+0x3c8>)
1000c55c:	1c18      	adds	r0, r3, #0
1000c55e:	4ba8      	ldr	r3, [pc, #672]	; (1000c800 <ble_slave_security_request_handler+0x3cc>)
1000c560:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c562:	23e2      	movs	r3, #226	; 0xe2
1000c564:	e155      	b.n	1000c812 <ble_slave_security_request_handler+0x3de>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c566:	231e      	movs	r3, #30
1000c568:	18fb      	adds	r3, r7, r3
1000c56a:	781a      	ldrb	r2, [r3, #0]
1000c56c:	499f      	ldr	r1, [pc, #636]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c56e:	2058      	movs	r0, #88	; 0x58
1000c570:	1c13      	adds	r3, r2, #0
1000c572:	015b      	lsls	r3, r3, #5
1000c574:	1a9b      	subs	r3, r3, r2
1000c576:	009b      	lsls	r3, r3, #2
1000c578:	18cb      	adds	r3, r1, r3
1000c57a:	181b      	adds	r3, r3, r0
1000c57c:	2202      	movs	r2, #2
1000c57e:	719a      	strb	r2, [r3, #6]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c580:	231e      	movs	r3, #30
1000c582:	18fb      	adds	r3, r7, r3
1000c584:	2200      	movs	r2, #0
1000c586:	701a      	strb	r2, [r3, #0]
1000c588:	e031      	b.n	1000c5ee <ble_slave_security_request_handler+0x1ba>
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c58a:	231e      	movs	r3, #30
1000c58c:	18fb      	adds	r3, r7, r3
1000c58e:	781a      	ldrb	r2, [r3, #0]
1000c590:	4996      	ldr	r1, [pc, #600]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c592:	1c13      	adds	r3, r2, #0
1000c594:	015b      	lsls	r3, r3, #5
1000c596:	1a9b      	subs	r3, r3, r2
1000c598:	009b      	lsls	r3, r3, #2
1000c59a:	18cb      	adds	r3, r1, r3
1000c59c:	3308      	adds	r3, #8
1000c59e:	881a      	ldrh	r2, [r3, #0]
1000c5a0:	69bb      	ldr	r3, [r7, #24]
1000c5a2:	881b      	ldrh	r3, [r3, #0]
1000c5a4:	429a      	cmp	r2, r3
1000c5a6:	d11b      	bne.n	1000c5e0 <ble_slave_security_request_handler+0x1ac>
1000c5a8:	231e      	movs	r3, #30
1000c5aa:	18fb      	adds	r3, r7, r3
1000c5ac:	781a      	ldrb	r2, [r3, #0]
1000c5ae:	498f      	ldr	r1, [pc, #572]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c5b0:	2058      	movs	r0, #88	; 0x58
1000c5b2:	1c13      	adds	r3, r2, #0
1000c5b4:	015b      	lsls	r3, r3, #5
1000c5b6:	1a9b      	subs	r3, r3, r2
1000c5b8:	009b      	lsls	r3, r3, #2
1000c5ba:	18cb      	adds	r3, r1, r3
1000c5bc:	181b      	adds	r3, r3, r0
1000c5be:	799b      	ldrb	r3, [r3, #6]
1000c5c0:	2b02      	cmp	r3, #2
1000c5c2:	d10d      	bne.n	1000c5e0 <ble_slave_security_request_handler+0x1ac>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c5c4:	231e      	movs	r3, #30
1000c5c6:	18fb      	adds	r3, r7, r3
1000c5c8:	781a      	ldrb	r2, [r3, #0]
1000c5ca:	4988      	ldr	r1, [pc, #544]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c5cc:	2058      	movs	r0, #88	; 0x58
1000c5ce:	1c13      	adds	r3, r2, #0
1000c5d0:	015b      	lsls	r3, r3, #5
1000c5d2:	1a9b      	subs	r3, r3, r2
1000c5d4:	009b      	lsls	r3, r3, #2
1000c5d6:	18cb      	adds	r3, r1, r3
1000c5d8:	181b      	adds	r3, r3, r0
1000c5da:	2203      	movs	r2, #3
1000c5dc:	719a      	strb	r2, [r3, #6]
			break;
1000c5de:	e00b      	b.n	1000c5f8 <ble_slave_security_request_handler+0x1c4>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5e0:	231e      	movs	r3, #30
1000c5e2:	18fb      	adds	r3, r7, r3
1000c5e4:	781a      	ldrb	r2, [r3, #0]
1000c5e6:	231e      	movs	r3, #30
1000c5e8:	18fb      	adds	r3, r7, r3
1000c5ea:	3201      	adds	r2, #1
1000c5ec:	701a      	strb	r2, [r3, #0]
1000c5ee:	231e      	movs	r3, #30
1000c5f0:	18fb      	adds	r3, r7, r3
1000c5f2:	781b      	ldrb	r3, [r3, #0]
1000c5f4:	2b04      	cmp	r3, #4
1000c5f6:	d9c8      	bls.n	1000c58a <ble_slave_security_request_handler+0x156>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c5f8:	230c      	movs	r3, #12
1000c5fa:	18fb      	adds	r3, r7, r3
1000c5fc:	2200      	movs	r2, #0
1000c5fe:	721a      	strb	r2, [r3, #8]
	features.bond = slave_sec_req->bond;
1000c600:	69bb      	ldr	r3, [r7, #24]
1000c602:	78da      	ldrb	r2, [r3, #3]
1000c604:	230c      	movs	r3, #12
1000c606:	18fb      	adds	r3, r7, r3
1000c608:	709a      	strb	r2, [r3, #2]
	features.mitm_protection = true;
1000c60a:	230c      	movs	r3, #12
1000c60c:	18fb      	adds	r3, r7, r3
1000c60e:	2201      	movs	r2, #1
1000c610:	705a      	strb	r2, [r3, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c612:	230c      	movs	r3, #12
1000c614:	18fb      	adds	r3, r7, r3
1000c616:	2204      	movs	r2, #4
1000c618:	701a      	strb	r2, [r3, #0]

	features.oob_avaiable = false;
1000c61a:	230c      	movs	r3, #12
1000c61c:	18fb      	adds	r3, r7, r3
1000c61e:	2200      	movs	r2, #0
1000c620:	70da      	strb	r2, [r3, #3]
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c622:	231e      	movs	r3, #30
1000c624:	18fb      	adds	r3, r7, r3
1000c626:	781a      	ldrb	r2, [r3, #0]
1000c628:	4970      	ldr	r1, [pc, #448]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c62a:	1c13      	adds	r3, r2, #0
1000c62c:	015b      	lsls	r3, r3, #5
1000c62e:	1a9b      	subs	r3, r3, r2
1000c630:	009b      	lsls	r3, r3, #2
1000c632:	5c5b      	ldrb	r3, [r3, r1]
1000c634:	2b02      	cmp	r3, #2
1000c636:	d108      	bne.n	1000c64a <ble_slave_security_request_handler+0x216>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c638:	230c      	movs	r3, #12
1000c63a:	18fb      	adds	r3, r7, r3
1000c63c:	2203      	movs	r2, #3
1000c63e:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c640:	230c      	movs	r3, #12
1000c642:	18fb      	adds	r3, r7, r3
1000c644:	2203      	movs	r2, #3
1000c646:	71da      	strb	r2, [r3, #7]
1000c648:	e007      	b.n	1000c65a <ble_slave_security_request_handler+0x226>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c64a:	230c      	movs	r3, #12
1000c64c:	18fb      	adds	r3, r7, r3
1000c64e:	2201      	movs	r2, #1
1000c650:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c652:	230c      	movs	r3, #12
1000c654:	18fb      	adds	r3, r7, r3
1000c656:	2201      	movs	r2, #1
1000c658:	71da      	strb	r2, [r3, #7]
	}
	features.max_key_size = 16;
1000c65a:	230c      	movs	r3, #12
1000c65c:	18fb      	adds	r3, r7, r3
1000c65e:	2210      	movs	r2, #16
1000c660:	715a      	strb	r2, [r3, #5]
	features.min_key_size = 16;
1000c662:	230c      	movs	r3, #12
1000c664:	18fb      	adds	r3, r7, r3
1000c666:	2210      	movs	r2, #16
1000c668:	711a      	strb	r2, [r3, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c66a:	231e      	movs	r3, #30
1000c66c:	18fb      	adds	r3, r7, r3
1000c66e:	781a      	ldrb	r2, [r3, #0]
1000c670:	495e      	ldr	r1, [pc, #376]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c672:	1c13      	adds	r3, r2, #0
1000c674:	015b      	lsls	r3, r3, #5
1000c676:	1a9b      	subs	r3, r3, r2
1000c678:	009b      	lsls	r3, r3, #2
1000c67a:	18cb      	adds	r3, r1, r3
1000c67c:	3310      	adds	r3, #16
1000c67e:	7a1b      	ldrb	r3, [r3, #8]
1000c680:	2b40      	cmp	r3, #64	; 0x40
1000c682:	d000      	beq.n	1000c686 <ble_slave_security_request_handler+0x252>
1000c684:	e087      	b.n	1000c796 <ble_slave_security_request_handler+0x362>
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c686:	231f      	movs	r3, #31
1000c688:	18fb      	adds	r3, r7, r3
1000c68a:	2200      	movs	r2, #0
1000c68c:	701a      	strb	r2, [r3, #0]
1000c68e:	e036      	b.n	1000c6fe <ble_slave_security_request_handler+0x2ca>
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c690:	231e      	movs	r3, #30
1000c692:	18fb      	adds	r3, r7, r3
1000c694:	781c      	ldrb	r4, [r3, #0]
1000c696:	231f      	movs	r3, #31
1000c698:	18fb      	adds	r3, r7, r3
1000c69a:	781d      	ldrb	r5, [r3, #0]
1000c69c:	4b59      	ldr	r3, [pc, #356]	; (1000c804 <ble_slave_security_request_handler+0x3d0>)
1000c69e:	4798      	blx	r3
1000c6a0:	1c03      	adds	r3, r0, #0
1000c6a2:	b2db      	uxtb	r3, r3
1000c6a4:	220f      	movs	r2, #15
1000c6a6:	4013      	ands	r3, r2
1000c6a8:	b2d8      	uxtb	r0, r3
1000c6aa:	4a50      	ldr	r2, [pc, #320]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c6ac:	2160      	movs	r1, #96	; 0x60
1000c6ae:	1c23      	adds	r3, r4, #0
1000c6b0:	015b      	lsls	r3, r3, #5
1000c6b2:	1b1b      	subs	r3, r3, r4
1000c6b4:	009b      	lsls	r3, r3, #2
1000c6b6:	18d3      	adds	r3, r2, r3
1000c6b8:	195b      	adds	r3, r3, r5
1000c6ba:	185b      	adds	r3, r3, r1
1000c6bc:	1c02      	adds	r2, r0, #0
1000c6be:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c6c0:	231e      	movs	r3, #30
1000c6c2:	18fb      	adds	r3, r7, r3
1000c6c4:	781c      	ldrb	r4, [r3, #0]
1000c6c6:	231f      	movs	r3, #31
1000c6c8:	18fb      	adds	r3, r7, r3
1000c6ca:	781d      	ldrb	r5, [r3, #0]
1000c6cc:	4b4d      	ldr	r3, [pc, #308]	; (1000c804 <ble_slave_security_request_handler+0x3d0>)
1000c6ce:	4798      	blx	r3
1000c6d0:	1c03      	adds	r3, r0, #0
1000c6d2:	b2db      	uxtb	r3, r3
1000c6d4:	220f      	movs	r2, #15
1000c6d6:	4013      	ands	r3, r2
1000c6d8:	b2d8      	uxtb	r0, r3
1000c6da:	4a44      	ldr	r2, [pc, #272]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c6dc:	2170      	movs	r1, #112	; 0x70
1000c6de:	1c23      	adds	r3, r4, #0
1000c6e0:	015b      	lsls	r3, r3, #5
1000c6e2:	1b1b      	subs	r3, r3, r4
1000c6e4:	009b      	lsls	r3, r3, #2
1000c6e6:	18d3      	adds	r3, r2, r3
1000c6e8:	195b      	adds	r3, r3, r5
1000c6ea:	185b      	adds	r3, r3, r1
1000c6ec:	1c02      	adds	r2, r0, #0
1000c6ee:	709a      	strb	r2, [r3, #2]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c6f0:	231f      	movs	r3, #31
1000c6f2:	18fb      	adds	r3, r7, r3
1000c6f4:	781a      	ldrb	r2, [r3, #0]
1000c6f6:	231f      	movs	r3, #31
1000c6f8:	18fb      	adds	r3, r7, r3
1000c6fa:	3201      	adds	r2, #1
1000c6fc:	701a      	strb	r2, [r3, #0]
1000c6fe:	231f      	movs	r3, #31
1000c700:	18fb      	adds	r3, r7, r3
1000c702:	781b      	ldrb	r3, [r3, #0]
1000c704:	2b07      	cmp	r3, #7
1000c706:	d9c3      	bls.n	1000c690 <ble_slave_security_request_handler+0x25c>
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c708:	231f      	movs	r3, #31
1000c70a:	18fb      	adds	r3, r7, r3
1000c70c:	2208      	movs	r2, #8
1000c70e:	701a      	strb	r2, [r3, #0]
1000c710:	e01e      	b.n	1000c750 <ble_slave_security_request_handler+0x31c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c712:	231e      	movs	r3, #30
1000c714:	18fb      	adds	r3, r7, r3
1000c716:	781c      	ldrb	r4, [r3, #0]
1000c718:	231f      	movs	r3, #31
1000c71a:	18fb      	adds	r3, r7, r3
1000c71c:	781d      	ldrb	r5, [r3, #0]
1000c71e:	4b39      	ldr	r3, [pc, #228]	; (1000c804 <ble_slave_security_request_handler+0x3d0>)
1000c720:	4798      	blx	r3
1000c722:	1c03      	adds	r3, r0, #0
1000c724:	b2db      	uxtb	r3, r3
1000c726:	220f      	movs	r2, #15
1000c728:	4013      	ands	r3, r2
1000c72a:	b2d8      	uxtb	r0, r3
1000c72c:	4a2f      	ldr	r2, [pc, #188]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c72e:	2160      	movs	r1, #96	; 0x60
1000c730:	1c23      	adds	r3, r4, #0
1000c732:	015b      	lsls	r3, r3, #5
1000c734:	1b1b      	subs	r3, r3, r4
1000c736:	009b      	lsls	r3, r3, #2
1000c738:	18d3      	adds	r3, r2, r3
1000c73a:	195b      	adds	r3, r3, r5
1000c73c:	185b      	adds	r3, r3, r1
1000c73e:	1c02      	adds	r2, r0, #0
1000c740:	701a      	strb	r2, [r3, #0]
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c742:	231f      	movs	r3, #31
1000c744:	18fb      	adds	r3, r7, r3
1000c746:	781a      	ldrb	r2, [r3, #0]
1000c748:	231f      	movs	r3, #31
1000c74a:	18fb      	adds	r3, r7, r3
1000c74c:	3201      	adds	r2, #1
1000c74e:	701a      	strb	r2, [r3, #0]
1000c750:	231f      	movs	r3, #31
1000c752:	18fb      	adds	r3, r7, r3
1000c754:	781b      	ldrb	r3, [r3, #0]
1000c756:	2b0f      	cmp	r3, #15
1000c758:	d9db      	bls.n	1000c712 <ble_slave_security_request_handler+0x2de>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c75a:	231e      	movs	r3, #30
1000c75c:	18fb      	adds	r3, r7, r3
1000c75e:	781c      	ldrb	r4, [r3, #0]
1000c760:	4b28      	ldr	r3, [pc, #160]	; (1000c804 <ble_slave_security_request_handler+0x3d0>)
1000c762:	4798      	blx	r3
1000c764:	1c03      	adds	r3, r0, #0
1000c766:	b298      	uxth	r0, r3
1000c768:	4a20      	ldr	r2, [pc, #128]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c76a:	2170      	movs	r1, #112	; 0x70
1000c76c:	1c23      	adds	r3, r4, #0
1000c76e:	015b      	lsls	r3, r3, #5
1000c770:	1b1b      	subs	r3, r3, r4
1000c772:	009b      	lsls	r3, r3, #2
1000c774:	18d3      	adds	r3, r2, r3
1000c776:	185b      	adds	r3, r3, r1
1000c778:	1c02      	adds	r2, r0, #0
1000c77a:	801a      	strh	r2, [r3, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c77c:	231e      	movs	r3, #30
1000c77e:	18fb      	adds	r3, r7, r3
1000c780:	781a      	ldrb	r2, [r3, #0]
1000c782:	491a      	ldr	r1, [pc, #104]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c784:	2078      	movs	r0, #120	; 0x78
1000c786:	1c13      	adds	r3, r2, #0
1000c788:	015b      	lsls	r3, r3, #5
1000c78a:	1a9b      	subs	r3, r3, r2
1000c78c:	009b      	lsls	r3, r3, #2
1000c78e:	18cb      	adds	r3, r1, r3
1000c790:	181b      	adds	r3, r3, r0
1000c792:	2210      	movs	r2, #16
1000c794:	709a      	strb	r2, [r3, #2]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c796:	69bb      	ldr	r3, [r7, #24]
1000c798:	8819      	ldrh	r1, [r3, #0]
1000c79a:	231e      	movs	r3, #30
1000c79c:	18fb      	adds	r3, r7, r3
1000c79e:	781a      	ldrb	r2, [r3, #0]
1000c7a0:	1c13      	adds	r3, r2, #0
1000c7a2:	015b      	lsls	r3, r3, #5
1000c7a4:	1a9b      	subs	r3, r3, r2
1000c7a6:	009b      	lsls	r3, r3, #2
1000c7a8:	3360      	adds	r3, #96	; 0x60
1000c7aa:	1c1a      	adds	r2, r3, #0
1000c7ac:	4b0f      	ldr	r3, [pc, #60]	; (1000c7ec <ble_slave_security_request_handler+0x3b8>)
1000c7ae:	18d3      	adds	r3, r2, r3
1000c7b0:	220c      	movs	r2, #12
1000c7b2:	18ba      	adds	r2, r7, r2
1000c7b4:	1c08      	adds	r0, r1, #0
1000c7b6:	1c11      	adds	r1, r2, #0
1000c7b8:	1c1a      	adds	r2, r3, #0
1000c7ba:	2300      	movs	r3, #0
1000c7bc:	4c12      	ldr	r4, [pc, #72]	; (1000c808 <ble_slave_security_request_handler+0x3d4>)
1000c7be:	47a0      	blx	r4
1000c7c0:	1e03      	subs	r3, r0, #0
1000c7c2:	d025      	beq.n	1000c810 <ble_slave_security_request_handler+0x3dc>
	{
		features.bond = false;
1000c7c4:	230c      	movs	r3, #12
1000c7c6:	18fb      	adds	r3, r7, r3
1000c7c8:	2200      	movs	r2, #0
1000c7ca:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c7cc:	230c      	movs	r3, #12
1000c7ce:	18fb      	adds	r3, r7, r3
1000c7d0:	2200      	movs	r2, #0
1000c7d2:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c7d4:	4b07      	ldr	r3, [pc, #28]	; (1000c7f4 <ble_slave_security_request_handler+0x3c0>)
1000c7d6:	1c18      	adds	r0, r3, #0
1000c7d8:	4b07      	ldr	r3, [pc, #28]	; (1000c7f8 <ble_slave_security_request_handler+0x3c4>)
1000c7da:	4798      	blx	r3
1000c7dc:	4b0b      	ldr	r3, [pc, #44]	; (1000c80c <ble_slave_security_request_handler+0x3d8>)
1000c7de:	1c18      	adds	r0, r3, #0
1000c7e0:	4b07      	ldr	r3, [pc, #28]	; (1000c800 <ble_slave_security_request_handler+0x3cc>)
1000c7e2:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c7e4:	23e2      	movs	r3, #226	; 0xe2
1000c7e6:	e014      	b.n	1000c812 <ble_slave_security_request_handler+0x3de>
1000c7e8:	100133ed 	.word	0x100133ed
1000c7ec:	10016a2c 	.word	0x10016a2c
1000c7f0:	1001075d 	.word	0x1001075d
1000c7f4:	1001507c 	.word	0x1001507c
1000c7f8:	1001351d 	.word	0x1001351d
1000c7fc:	10015738 	.word	0x10015738
1000c800:	100133fd 	.word	0x100133fd
1000c804:	10013531 	.word	0x10013531
1000c808:	10010571 	.word	0x10010571
1000c80c:	10015750 	.word	0x10015750
	}
	return AT_BLE_SUCCESS;
1000c810:	2300      	movs	r3, #0
}
1000c812:	1c18      	adds	r0, r3, #0
1000c814:	46bd      	mov	sp, r7
1000c816:	b008      	add	sp, #32
1000c818:	bdb0      	pop	{r4, r5, r7, pc}
1000c81a:	46c0      	nop			; (mov r8, r8)

1000c81c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c81c:	b5b0      	push	{r4, r5, r7, lr}
1000c81e:	b088      	sub	sp, #32
1000c820:	af00      	add	r7, sp, #0
1000c822:	6078      	str	r0, [r7, #4]
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
1000c824:	231f      	movs	r3, #31
1000c826:	18fb      	adds	r3, r7, r3
1000c828:	2200      	movs	r2, #0
1000c82a:	701a      	strb	r2, [r3, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
1000c82c:	687b      	ldr	r3, [r7, #4]
1000c82e:	61bb      	str	r3, [r7, #24]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c830:	231e      	movs	r3, #30
1000c832:	18fb      	adds	r3, r7, r3
1000c834:	2200      	movs	r2, #0
1000c836:	701a      	strb	r2, [r3, #0]
1000c838:	e031      	b.n	1000c89e <ble_pair_request_handler+0x82>
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c83a:	231e      	movs	r3, #30
1000c83c:	18fb      	adds	r3, r7, r3
1000c83e:	781a      	ldrb	r2, [r3, #0]
1000c840:	49b3      	ldr	r1, [pc, #716]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c842:	1c13      	adds	r3, r2, #0
1000c844:	015b      	lsls	r3, r3, #5
1000c846:	1a9b      	subs	r3, r3, r2
1000c848:	009b      	lsls	r3, r3, #2
1000c84a:	18cb      	adds	r3, r1, r3
1000c84c:	3308      	adds	r3, #8
1000c84e:	881a      	ldrh	r2, [r3, #0]
1000c850:	69bb      	ldr	r3, [r7, #24]
1000c852:	881b      	ldrh	r3, [r3, #0]
1000c854:	429a      	cmp	r2, r3
1000c856:	d11b      	bne.n	1000c890 <ble_pair_request_handler+0x74>
1000c858:	231e      	movs	r3, #30
1000c85a:	18fb      	adds	r3, r7, r3
1000c85c:	781a      	ldrb	r2, [r3, #0]
1000c85e:	49ac      	ldr	r1, [pc, #688]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c860:	2058      	movs	r0, #88	; 0x58
1000c862:	1c13      	adds	r3, r2, #0
1000c864:	015b      	lsls	r3, r3, #5
1000c866:	1a9b      	subs	r3, r3, r2
1000c868:	009b      	lsls	r3, r3, #2
1000c86a:	18cb      	adds	r3, r1, r3
1000c86c:	181b      	adds	r3, r3, r0
1000c86e:	799b      	ldrb	r3, [r3, #6]
1000c870:	2b02      	cmp	r3, #2
1000c872:	d10d      	bne.n	1000c890 <ble_pair_request_handler+0x74>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c874:	231e      	movs	r3, #30
1000c876:	18fb      	adds	r3, r7, r3
1000c878:	781a      	ldrb	r2, [r3, #0]
1000c87a:	49a5      	ldr	r1, [pc, #660]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c87c:	2058      	movs	r0, #88	; 0x58
1000c87e:	1c13      	adds	r3, r2, #0
1000c880:	015b      	lsls	r3, r3, #5
1000c882:	1a9b      	subs	r3, r3, r2
1000c884:	009b      	lsls	r3, r3, #2
1000c886:	18cb      	adds	r3, r1, r3
1000c888:	181b      	adds	r3, r3, r0
1000c88a:	2203      	movs	r2, #3
1000c88c:	719a      	strb	r2, [r3, #6]
			break;
1000c88e:	e00b      	b.n	1000c8a8 <ble_pair_request_handler+0x8c>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c890:	231e      	movs	r3, #30
1000c892:	18fb      	adds	r3, r7, r3
1000c894:	781a      	ldrb	r2, [r3, #0]
1000c896:	231e      	movs	r3, #30
1000c898:	18fb      	adds	r3, r7, r3
1000c89a:	3201      	adds	r2, #1
1000c89c:	701a      	strb	r2, [r3, #0]
1000c89e:	231e      	movs	r3, #30
1000c8a0:	18fb      	adds	r3, r7, r3
1000c8a2:	781b      	ldrb	r3, [r3, #0]
1000c8a4:	2b04      	cmp	r3, #4
1000c8a6:	d9c8      	bls.n	1000c83a <ble_pair_request_handler+0x1e>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c8a8:	230c      	movs	r3, #12
1000c8aa:	18fb      	adds	r3, r7, r3
1000c8ac:	2200      	movs	r2, #0
1000c8ae:	721a      	strb	r2, [r3, #8]
	features.bond = BLE_BOND_REQ;
1000c8b0:	230c      	movs	r3, #12
1000c8b2:	18fb      	adds	r3, r7, r3
1000c8b4:	2200      	movs	r2, #0
1000c8b6:	709a      	strb	r2, [r3, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c8b8:	230c      	movs	r3, #12
1000c8ba:	18fb      	adds	r3, r7, r3
1000c8bc:	2200      	movs	r2, #0
1000c8be:	705a      	strb	r2, [r3, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c8c0:	230c      	movs	r3, #12
1000c8c2:	18fb      	adds	r3, r7, r3
1000c8c4:	2203      	movs	r2, #3
1000c8c6:	701a      	strb	r2, [r3, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c8c8:	230c      	movs	r3, #12
1000c8ca:	18fb      	adds	r3, r7, r3
1000c8cc:	2200      	movs	r2, #0
1000c8ce:	70da      	strb	r2, [r3, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c8d0:	231e      	movs	r3, #30
1000c8d2:	18fb      	adds	r3, r7, r3
1000c8d4:	781a      	ldrb	r2, [r3, #0]
1000c8d6:	498e      	ldr	r1, [pc, #568]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c8d8:	1c13      	adds	r3, r2, #0
1000c8da:	015b      	lsls	r3, r3, #5
1000c8dc:	1a9b      	subs	r3, r3, r2
1000c8de:	009b      	lsls	r3, r3, #2
1000c8e0:	5c5b      	ldrb	r3, [r3, r1]
1000c8e2:	2b02      	cmp	r3, #2
1000c8e4:	d108      	bne.n	1000c8f8 <ble_pair_request_handler+0xdc>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c8e6:	230c      	movs	r3, #12
1000c8e8:	18fb      	adds	r3, r7, r3
1000c8ea:	2203      	movs	r2, #3
1000c8ec:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c8ee:	230c      	movs	r3, #12
1000c8f0:	18fb      	adds	r3, r7, r3
1000c8f2:	2203      	movs	r2, #3
1000c8f4:	71da      	strb	r2, [r3, #7]
1000c8f6:	e007      	b.n	1000c908 <ble_pair_request_handler+0xec>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c8f8:	230c      	movs	r3, #12
1000c8fa:	18fb      	adds	r3, r7, r3
1000c8fc:	2201      	movs	r2, #1
1000c8fe:	719a      	strb	r2, [r3, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c900:	230c      	movs	r3, #12
1000c902:	18fb      	adds	r3, r7, r3
1000c904:	2201      	movs	r2, #1
1000c906:	71da      	strb	r2, [r3, #7]
	}
			
	features.max_key_size = 16;
1000c908:	230c      	movs	r3, #12
1000c90a:	18fb      	adds	r3, r7, r3
1000c90c:	2210      	movs	r2, #16
1000c90e:	715a      	strb	r2, [r3, #5]
	features.min_key_size = 16;
1000c910:	230c      	movs	r3, #12
1000c912:	18fb      	adds	r3, r7, r3
1000c914:	2210      	movs	r2, #16
1000c916:	711a      	strb	r2, [r3, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c918:	231e      	movs	r3, #30
1000c91a:	18fb      	adds	r3, r7, r3
1000c91c:	781a      	ldrb	r2, [r3, #0]
1000c91e:	497c      	ldr	r1, [pc, #496]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c920:	1c13      	adds	r3, r2, #0
1000c922:	015b      	lsls	r3, r3, #5
1000c924:	1a9b      	subs	r3, r3, r2
1000c926:	009b      	lsls	r3, r3, #2
1000c928:	18cb      	adds	r3, r1, r3
1000c92a:	3310      	adds	r3, #16
1000c92c:	7a1b      	ldrb	r3, [r3, #8]
1000c92e:	2b40      	cmp	r3, #64	; 0x40
1000c930:	d000      	beq.n	1000c934 <ble_pair_request_handler+0x118>
1000c932:	e0b6      	b.n	1000caa2 <ble_pair_request_handler+0x286>
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c934:	231f      	movs	r3, #31
1000c936:	18fb      	adds	r3, r7, r3
1000c938:	2200      	movs	r2, #0
1000c93a:	701a      	strb	r2, [r3, #0]
1000c93c:	e036      	b.n	1000c9ac <ble_pair_request_handler+0x190>
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c93e:	231e      	movs	r3, #30
1000c940:	18fb      	adds	r3, r7, r3
1000c942:	781c      	ldrb	r4, [r3, #0]
1000c944:	231f      	movs	r3, #31
1000c946:	18fb      	adds	r3, r7, r3
1000c948:	781d      	ldrb	r5, [r3, #0]
1000c94a:	4b72      	ldr	r3, [pc, #456]	; (1000cb14 <ble_pair_request_handler+0x2f8>)
1000c94c:	4798      	blx	r3
1000c94e:	1c03      	adds	r3, r0, #0
1000c950:	b2db      	uxtb	r3, r3
1000c952:	220f      	movs	r2, #15
1000c954:	4013      	ands	r3, r2
1000c956:	b2d8      	uxtb	r0, r3
1000c958:	4a6d      	ldr	r2, [pc, #436]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c95a:	2160      	movs	r1, #96	; 0x60
1000c95c:	1c23      	adds	r3, r4, #0
1000c95e:	015b      	lsls	r3, r3, #5
1000c960:	1b1b      	subs	r3, r3, r4
1000c962:	009b      	lsls	r3, r3, #2
1000c964:	18d3      	adds	r3, r2, r3
1000c966:	195b      	adds	r3, r3, r5
1000c968:	185b      	adds	r3, r3, r1
1000c96a:	1c02      	adds	r2, r0, #0
1000c96c:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c96e:	231e      	movs	r3, #30
1000c970:	18fb      	adds	r3, r7, r3
1000c972:	781c      	ldrb	r4, [r3, #0]
1000c974:	231f      	movs	r3, #31
1000c976:	18fb      	adds	r3, r7, r3
1000c978:	781d      	ldrb	r5, [r3, #0]
1000c97a:	4b66      	ldr	r3, [pc, #408]	; (1000cb14 <ble_pair_request_handler+0x2f8>)
1000c97c:	4798      	blx	r3
1000c97e:	1c03      	adds	r3, r0, #0
1000c980:	b2db      	uxtb	r3, r3
1000c982:	220f      	movs	r2, #15
1000c984:	4013      	ands	r3, r2
1000c986:	b2d8      	uxtb	r0, r3
1000c988:	4a61      	ldr	r2, [pc, #388]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c98a:	2170      	movs	r1, #112	; 0x70
1000c98c:	1c23      	adds	r3, r4, #0
1000c98e:	015b      	lsls	r3, r3, #5
1000c990:	1b1b      	subs	r3, r3, r4
1000c992:	009b      	lsls	r3, r3, #2
1000c994:	18d3      	adds	r3, r2, r3
1000c996:	195b      	adds	r3, r3, r5
1000c998:	185b      	adds	r3, r3, r1
1000c99a:	1c02      	adds	r2, r0, #0
1000c99c:	709a      	strb	r2, [r3, #2]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c99e:	231f      	movs	r3, #31
1000c9a0:	18fb      	adds	r3, r7, r3
1000c9a2:	781a      	ldrb	r2, [r3, #0]
1000c9a4:	231f      	movs	r3, #31
1000c9a6:	18fb      	adds	r3, r7, r3
1000c9a8:	3201      	adds	r2, #1
1000c9aa:	701a      	strb	r2, [r3, #0]
1000c9ac:	231f      	movs	r3, #31
1000c9ae:	18fb      	adds	r3, r7, r3
1000c9b0:	781b      	ldrb	r3, [r3, #0]
1000c9b2:	2b07      	cmp	r3, #7
1000c9b4:	d9c3      	bls.n	1000c93e <ble_pair_request_handler+0x122>
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c9b6:	231f      	movs	r3, #31
1000c9b8:	18fb      	adds	r3, r7, r3
1000c9ba:	2208      	movs	r2, #8
1000c9bc:	701a      	strb	r2, [r3, #0]
1000c9be:	e01e      	b.n	1000c9fe <ble_pair_request_handler+0x1e2>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c9c0:	231e      	movs	r3, #30
1000c9c2:	18fb      	adds	r3, r7, r3
1000c9c4:	781c      	ldrb	r4, [r3, #0]
1000c9c6:	231f      	movs	r3, #31
1000c9c8:	18fb      	adds	r3, r7, r3
1000c9ca:	781d      	ldrb	r5, [r3, #0]
1000c9cc:	4b51      	ldr	r3, [pc, #324]	; (1000cb14 <ble_pair_request_handler+0x2f8>)
1000c9ce:	4798      	blx	r3
1000c9d0:	1c03      	adds	r3, r0, #0
1000c9d2:	b2db      	uxtb	r3, r3
1000c9d4:	220f      	movs	r2, #15
1000c9d6:	4013      	ands	r3, r2
1000c9d8:	b2d8      	uxtb	r0, r3
1000c9da:	4a4d      	ldr	r2, [pc, #308]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000c9dc:	2160      	movs	r1, #96	; 0x60
1000c9de:	1c23      	adds	r3, r4, #0
1000c9e0:	015b      	lsls	r3, r3, #5
1000c9e2:	1b1b      	subs	r3, r3, r4
1000c9e4:	009b      	lsls	r3, r3, #2
1000c9e6:	18d3      	adds	r3, r2, r3
1000c9e8:	195b      	adds	r3, r3, r5
1000c9ea:	185b      	adds	r3, r3, r1
1000c9ec:	1c02      	adds	r2, r0, #0
1000c9ee:	701a      	strb	r2, [r3, #0]
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c9f0:	231f      	movs	r3, #31
1000c9f2:	18fb      	adds	r3, r7, r3
1000c9f4:	781a      	ldrb	r2, [r3, #0]
1000c9f6:	231f      	movs	r3, #31
1000c9f8:	18fb      	adds	r3, r7, r3
1000c9fa:	3201      	adds	r2, #1
1000c9fc:	701a      	strb	r2, [r3, #0]
1000c9fe:	231f      	movs	r3, #31
1000ca00:	18fb      	adds	r3, r7, r3
1000ca02:	781b      	ldrb	r3, [r3, #0]
1000ca04:	2b0f      	cmp	r3, #15
1000ca06:	d9db      	bls.n	1000c9c0 <ble_pair_request_handler+0x1a4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("\n\r[ble_pair_request_handler]\n\rgenerated LTK: ");
1000ca08:	4b43      	ldr	r3, [pc, #268]	; (1000cb18 <ble_pair_request_handler+0x2fc>)
1000ca0a:	1c18      	adds	r0, r3, #0
1000ca0c:	4b43      	ldr	r3, [pc, #268]	; (1000cb1c <ble_pair_request_handler+0x300>)
1000ca0e:	4798      	blx	r3
1000ca10:	4b43      	ldr	r3, [pc, #268]	; (1000cb20 <ble_pair_request_handler+0x304>)
1000ca12:	1c18      	adds	r0, r3, #0
1000ca14:	4b43      	ldr	r3, [pc, #268]	; (1000cb24 <ble_pair_request_handler+0x308>)
1000ca16:	4798      	blx	r3
		for (i = 0; i < 16; i++)
1000ca18:	231f      	movs	r3, #31
1000ca1a:	18fb      	adds	r3, r7, r3
1000ca1c:	2200      	movs	r2, #0
1000ca1e:	701a      	strb	r2, [r3, #0]
1000ca20:	e01c      	b.n	1000ca5c <ble_pair_request_handler+0x240>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000ca22:	231e      	movs	r3, #30
1000ca24:	18fb      	adds	r3, r7, r3
1000ca26:	781a      	ldrb	r2, [r3, #0]
1000ca28:	231f      	movs	r3, #31
1000ca2a:	18fb      	adds	r3, r7, r3
1000ca2c:	7819      	ldrb	r1, [r3, #0]
1000ca2e:	4838      	ldr	r0, [pc, #224]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000ca30:	2460      	movs	r4, #96	; 0x60
1000ca32:	1c13      	adds	r3, r2, #0
1000ca34:	015b      	lsls	r3, r3, #5
1000ca36:	1a9b      	subs	r3, r3, r2
1000ca38:	009b      	lsls	r3, r3, #2
1000ca3a:	18c3      	adds	r3, r0, r3
1000ca3c:	185b      	adds	r3, r3, r1
1000ca3e:	191b      	adds	r3, r3, r4
1000ca40:	781b      	ldrb	r3, [r3, #0]
1000ca42:	1c1a      	adds	r2, r3, #0
1000ca44:	4b38      	ldr	r3, [pc, #224]	; (1000cb28 <ble_pair_request_handler+0x30c>)
1000ca46:	1c18      	adds	r0, r3, #0
1000ca48:	1c11      	adds	r1, r2, #0
1000ca4a:	4b36      	ldr	r3, [pc, #216]	; (1000cb24 <ble_pair_request_handler+0x308>)
1000ca4c:	4798      	blx	r3
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("\n\r[ble_pair_request_handler]\n\rgenerated LTK: ");
		for (i = 0; i < 16; i++)
1000ca4e:	231f      	movs	r3, #31
1000ca50:	18fb      	adds	r3, r7, r3
1000ca52:	781a      	ldrb	r2, [r3, #0]
1000ca54:	231f      	movs	r3, #31
1000ca56:	18fb      	adds	r3, r7, r3
1000ca58:	3201      	adds	r2, #1
1000ca5a:	701a      	strb	r2, [r3, #0]
1000ca5c:	231f      	movs	r3, #31
1000ca5e:	18fb      	adds	r3, r7, r3
1000ca60:	781b      	ldrb	r3, [r3, #0]
1000ca62:	2b0f      	cmp	r3, #15
1000ca64:	d9dd      	bls.n	1000ca22 <ble_pair_request_handler+0x206>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ca66:	231e      	movs	r3, #30
1000ca68:	18fb      	adds	r3, r7, r3
1000ca6a:	781c      	ldrb	r4, [r3, #0]
1000ca6c:	4b29      	ldr	r3, [pc, #164]	; (1000cb14 <ble_pair_request_handler+0x2f8>)
1000ca6e:	4798      	blx	r3
1000ca70:	1c03      	adds	r3, r0, #0
1000ca72:	b298      	uxth	r0, r3
1000ca74:	4a26      	ldr	r2, [pc, #152]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000ca76:	2170      	movs	r1, #112	; 0x70
1000ca78:	1c23      	adds	r3, r4, #0
1000ca7a:	015b      	lsls	r3, r3, #5
1000ca7c:	1b1b      	subs	r3, r3, r4
1000ca7e:	009b      	lsls	r3, r3, #2
1000ca80:	18d3      	adds	r3, r2, r3
1000ca82:	185b      	adds	r3, r3, r1
1000ca84:	1c02      	adds	r2, r0, #0
1000ca86:	801a      	strh	r2, [r3, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ca88:	231e      	movs	r3, #30
1000ca8a:	18fb      	adds	r3, r7, r3
1000ca8c:	781a      	ldrb	r2, [r3, #0]
1000ca8e:	4920      	ldr	r1, [pc, #128]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000ca90:	2078      	movs	r0, #120	; 0x78
1000ca92:	1c13      	adds	r3, r2, #0
1000ca94:	015b      	lsls	r3, r3, #5
1000ca96:	1a9b      	subs	r3, r3, r2
1000ca98:	009b      	lsls	r3, r3, #2
1000ca9a:	18cb      	adds	r3, r1, r3
1000ca9c:	181b      	adds	r3, r3, r0
1000ca9e:	2210      	movs	r2, #16
1000caa0:	709a      	strb	r2, [r3, #2]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("\n\r[ble_pair_request_handler]\n\rsending pairing response");
1000caa2:	4b1d      	ldr	r3, [pc, #116]	; (1000cb18 <ble_pair_request_handler+0x2fc>)
1000caa4:	1c18      	adds	r0, r3, #0
1000caa6:	4b1d      	ldr	r3, [pc, #116]	; (1000cb1c <ble_pair_request_handler+0x300>)
1000caa8:	4798      	blx	r3
1000caaa:	4b20      	ldr	r3, [pc, #128]	; (1000cb2c <ble_pair_request_handler+0x310>)
1000caac:	1c18      	adds	r0, r3, #0
1000caae:	4b1d      	ldr	r3, [pc, #116]	; (1000cb24 <ble_pair_request_handler+0x308>)
1000cab0:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000cab2:	69bb      	ldr	r3, [r7, #24]
1000cab4:	8819      	ldrh	r1, [r3, #0]
1000cab6:	231e      	movs	r3, #30
1000cab8:	18fb      	adds	r3, r7, r3
1000caba:	781a      	ldrb	r2, [r3, #0]
1000cabc:	1c13      	adds	r3, r2, #0
1000cabe:	015b      	lsls	r3, r3, #5
1000cac0:	1a9b      	subs	r3, r3, r2
1000cac2:	009b      	lsls	r3, r3, #2
1000cac4:	3360      	adds	r3, #96	; 0x60
1000cac6:	1c1a      	adds	r2, r3, #0
1000cac8:	4b11      	ldr	r3, [pc, #68]	; (1000cb10 <ble_pair_request_handler+0x2f4>)
1000caca:	18d3      	adds	r3, r2, r3
1000cacc:	220c      	movs	r2, #12
1000cace:	18ba      	adds	r2, r7, r2
1000cad0:	1c08      	adds	r0, r1, #0
1000cad2:	1c11      	adds	r1, r2, #0
1000cad4:	1c1a      	adds	r2, r3, #0
1000cad6:	2300      	movs	r3, #0
1000cad8:	4c15      	ldr	r4, [pc, #84]	; (1000cb30 <ble_pair_request_handler+0x314>)
1000cada:	47a0      	blx	r4
1000cadc:	1e03      	subs	r3, r0, #0
1000cade:	d011      	beq.n	1000cb04 <ble_pair_request_handler+0x2e8>
	{
		features.bond = false;
1000cae0:	230c      	movs	r3, #12
1000cae2:	18fb      	adds	r3, r7, r3
1000cae4:	2200      	movs	r2, #0
1000cae6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000cae8:	230c      	movs	r3, #12
1000caea:	18fb      	adds	r3, r7, r3
1000caec:	2200      	movs	r2, #0
1000caee:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000caf0:	4b09      	ldr	r3, [pc, #36]	; (1000cb18 <ble_pair_request_handler+0x2fc>)
1000caf2:	1c18      	adds	r0, r3, #0
1000caf4:	4b09      	ldr	r3, [pc, #36]	; (1000cb1c <ble_pair_request_handler+0x300>)
1000caf6:	4798      	blx	r3
1000caf8:	4b0e      	ldr	r3, [pc, #56]	; (1000cb34 <ble_pair_request_handler+0x318>)
1000cafa:	1c18      	adds	r0, r3, #0
1000cafc:	4b09      	ldr	r3, [pc, #36]	; (1000cb24 <ble_pair_request_handler+0x308>)
1000cafe:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cb00:	23e2      	movs	r3, #226	; 0xe2
1000cb02:	e000      	b.n	1000cb06 <ble_pair_request_handler+0x2ea>
	}
	return AT_BLE_SUCCESS;
1000cb04:	2300      	movs	r3, #0
}
1000cb06:	1c18      	adds	r0, r3, #0
1000cb08:	46bd      	mov	sp, r7
1000cb0a:	b008      	add	sp, #32
1000cb0c:	bdb0      	pop	{r4, r5, r7, pc}
1000cb0e:	46c0      	nop			; (mov r8, r8)
1000cb10:	10016a2c 	.word	0x10016a2c
1000cb14:	10013531 	.word	0x10013531
1000cb18:	1001507c 	.word	0x1001507c
1000cb1c:	1001351d 	.word	0x1001351d
1000cb20:	1001577c 	.word	0x1001577c
1000cb24:	100133fd 	.word	0x100133fd
1000cb28:	100157ac 	.word	0x100157ac
1000cb2c:	100157b4 	.word	0x100157b4
1000cb30:	10010571 	.word	0x10010571
1000cb34:	100157ec 	.word	0x100157ec

1000cb38 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000cb38:	b580      	push	{r7, lr}
1000cb3a:	b088      	sub	sp, #32
1000cb3c:	af00      	add	r7, sp, #0
1000cb3e:	6078      	str	r0, [r7, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
1000cb40:	687b      	ldr	r3, [r7, #4]
1000cb42:	61bb      	str	r3, [r7, #24]
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000cb44:	2310      	movs	r3, #16
1000cb46:	18fa      	adds	r2, r7, r3
1000cb48:	4b7c      	ldr	r3, [pc, #496]	; (1000cd3c <ble_pair_key_request_handler+0x204>)
1000cb4a:	1c11      	adds	r1, r2, #0
1000cb4c:	1c1a      	adds	r2, r3, #0
1000cb4e:	2306      	movs	r3, #6
1000cb50:	1c08      	adds	r0, r1, #0
1000cb52:	1c11      	adds	r1, r2, #0
1000cb54:	1c1a      	adds	r2, r3, #0
1000cb56:	4b7a      	ldr	r3, [pc, #488]	; (1000cd40 <ble_pair_key_request_handler+0x208>)
1000cb58:	4798      	blx	r3
	uint8_t idx = 0;
1000cb5a:	231f      	movs	r3, #31
1000cb5c:	18fb      	adds	r3, r7, r3
1000cb5e:	2200      	movs	r2, #0
1000cb60:	701a      	strb	r2, [r3, #0]
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000cb62:	230c      	movs	r3, #12
1000cb64:	18fa      	adds	r2, r7, r3
1000cb66:	69bb      	ldr	r3, [r7, #24]
1000cb68:	1c10      	adds	r0, r2, #0
1000cb6a:	1c19      	adds	r1, r3, #0
1000cb6c:	2204      	movs	r2, #4
1000cb6e:	4b74      	ldr	r3, [pc, #464]	; (1000cd40 <ble_pair_key_request_handler+0x208>)
1000cb70:	4798      	blx	r3
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000cb72:	230c      	movs	r3, #12
1000cb74:	18fb      	adds	r3, r7, r3
1000cb76:	78db      	ldrb	r3, [r3, #3]
1000cb78:	2b00      	cmp	r3, #0
1000cb7a:	d169      	bne.n	1000cc50 <ble_pair_key_request_handler+0x118>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000cb7c:	4b71      	ldr	r3, [pc, #452]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cb7e:	1c18      	adds	r0, r3, #0
1000cb80:	4b71      	ldr	r3, [pc, #452]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cb82:	4798      	blx	r3
1000cb84:	4b71      	ldr	r3, [pc, #452]	; (1000cd4c <ble_pair_key_request_handler+0x214>)
1000cb86:	1c18      	adds	r0, r3, #0
1000cb88:	4b71      	ldr	r3, [pc, #452]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cb8a:	4798      	blx	r3
		for (idx = 0; idx < 6;) {          
1000cb8c:	231f      	movs	r3, #31
1000cb8e:	18fb      	adds	r3, r7, r3
1000cb90:	2200      	movs	r2, #0
1000cb92:	701a      	strb	r2, [r3, #0]
1000cb94:	e057      	b.n	1000cc46 <ble_pair_key_request_handler+0x10e>
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000cb96:	201e      	movs	r0, #30
1000cb98:	4b6e      	ldr	r3, [pc, #440]	; (1000cd54 <ble_pair_key_request_handler+0x21c>)
1000cb9a:	4798      	blx	r3
1000cb9c:	1c02      	adds	r2, r0, #0
1000cb9e:	2317      	movs	r3, #23
1000cba0:	18fb      	adds	r3, r7, r3
1000cba2:	701a      	strb	r2, [r3, #0]

			if (!pin) {
1000cba4:	2317      	movs	r3, #23
1000cba6:	18fb      	adds	r3, r7, r3
1000cba8:	781b      	ldrb	r3, [r3, #0]
1000cbaa:	2b00      	cmp	r3, #0
1000cbac:	d121      	bne.n	1000cbf2 <ble_pair_key_request_handler+0xba>
			DBG_LOG("Pin Timeout");
1000cbae:	4b65      	ldr	r3, [pc, #404]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cbb0:	1c18      	adds	r0, r3, #0
1000cbb2:	4b65      	ldr	r3, [pc, #404]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cbb4:	4798      	blx	r3
1000cbb6:	4b68      	ldr	r3, [pc, #416]	; (1000cd58 <ble_pair_key_request_handler+0x220>)
1000cbb8:	1c18      	adds	r0, r3, #0
1000cbba:	4b65      	ldr	r3, [pc, #404]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cbbc:	4798      	blx	r3
				DBG_LOG("Disconnecting ...");
1000cbbe:	4b61      	ldr	r3, [pc, #388]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cbc0:	1c18      	adds	r0, r3, #0
1000cbc2:	4b61      	ldr	r3, [pc, #388]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cbc4:	4798      	blx	r3
1000cbc6:	4b65      	ldr	r3, [pc, #404]	; (1000cd5c <ble_pair_key_request_handler+0x224>)
1000cbc8:	1c18      	adds	r0, r3, #0
1000cbca:	4b61      	ldr	r3, [pc, #388]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cbcc:	4798      	blx	r3
				if (!(at_ble_disconnect(pair_key->handle,
1000cbce:	69bb      	ldr	r3, [r7, #24]
1000cbd0:	881b      	ldrh	r3, [r3, #0]
1000cbd2:	1c18      	adds	r0, r3, #0
1000cbd4:	2113      	movs	r1, #19
1000cbd6:	4b62      	ldr	r3, [pc, #392]	; (1000cd60 <ble_pair_key_request_handler+0x228>)
1000cbd8:	4798      	blx	r3
1000cbda:	1e03      	subs	r3, r0, #0
1000cbdc:	d007      	beq.n	1000cbee <ble_pair_key_request_handler+0xb6>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000cbde:	4b59      	ldr	r3, [pc, #356]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cbe0:	1c18      	adds	r0, r3, #0
1000cbe2:	4b59      	ldr	r3, [pc, #356]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cbe4:	4798      	blx	r3
1000cbe6:	4b5f      	ldr	r3, [pc, #380]	; (1000cd64 <ble_pair_key_request_handler+0x22c>)
1000cbe8:	1c18      	adds	r0, r3, #0
1000cbea:	4b59      	ldr	r3, [pc, #356]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cbec:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000cbee:	23e2      	movs	r3, #226	; 0xe2
1000cbf0:	e09f      	b.n	1000cd32 <ble_pair_key_request_handler+0x1fa>
1000cbf2:	231f      	movs	r3, #31
1000cbf4:	18fb      	adds	r3, r7, r3
1000cbf6:	221f      	movs	r2, #31
1000cbf8:	18ba      	adds	r2, r7, r2
1000cbfa:	7812      	ldrb	r2, [r2, #0]
1000cbfc:	701a      	strb	r2, [r3, #0]
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000cbfe:	2317      	movs	r3, #23
1000cc00:	18fb      	adds	r3, r7, r3
1000cc02:	781b      	ldrb	r3, [r3, #0]
1000cc04:	2b2f      	cmp	r3, #47	; 0x2f
1000cc06:	d91e      	bls.n	1000cc46 <ble_pair_key_request_handler+0x10e>
1000cc08:	231f      	movs	r3, #31
1000cc0a:	18fb      	adds	r3, r7, r3
1000cc0c:	221f      	movs	r2, #31
1000cc0e:	18ba      	adds	r2, r7, r2
1000cc10:	7812      	ldrb	r2, [r2, #0]
1000cc12:	701a      	strb	r2, [r3, #0]
1000cc14:	2317      	movs	r3, #23
1000cc16:	18fb      	adds	r3, r7, r3
1000cc18:	781b      	ldrb	r3, [r3, #0]
1000cc1a:	2b39      	cmp	r3, #57	; 0x39
1000cc1c:	d813      	bhi.n	1000cc46 <ble_pair_key_request_handler+0x10e>
			  passkey[idx++] = pin;
1000cc1e:	231f      	movs	r3, #31
1000cc20:	18fb      	adds	r3, r7, r3
1000cc22:	781b      	ldrb	r3, [r3, #0]
1000cc24:	221f      	movs	r2, #31
1000cc26:	18ba      	adds	r2, r7, r2
1000cc28:	1c59      	adds	r1, r3, #1
1000cc2a:	7011      	strb	r1, [r2, #0]
1000cc2c:	1c19      	adds	r1, r3, #0
1000cc2e:	2310      	movs	r3, #16
1000cc30:	18fb      	adds	r3, r7, r3
1000cc32:	2217      	movs	r2, #23
1000cc34:	18ba      	adds	r2, r7, r2
1000cc36:	7812      	ldrb	r2, [r2, #0]
1000cc38:	545a      	strb	r2, [r3, r1]
			  DBG_LOG_CONT("%c", pin);
1000cc3a:	2317      	movs	r3, #23
1000cc3c:	18fb      	adds	r3, r7, r3
1000cc3e:	781b      	ldrb	r3, [r3, #0]
1000cc40:	1c18      	adds	r0, r3, #0
1000cc42:	4b49      	ldr	r3, [pc, #292]	; (1000cd68 <ble_pair_key_request_handler+0x230>)
1000cc44:	4798      	blx	r3
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000cc46:	231f      	movs	r3, #31
1000cc48:	18fb      	adds	r3, r7, r3
1000cc4a:	781b      	ldrb	r3, [r3, #0]
1000cc4c:	2b05      	cmp	r3, #5
1000cc4e:	d9a2      	bls.n	1000cb96 <ble_pair_key_request_handler+0x5e>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000cc50:	230c      	movs	r3, #12
1000cc52:	18fb      	adds	r3, r7, r3
1000cc54:	78db      	ldrb	r3, [r3, #3]
1000cc56:	2b01      	cmp	r3, #1
1000cc58:	d104      	bne.n	1000cc64 <ble_pair_key_request_handler+0x12c>
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
1000cc5a:	230c      	movs	r3, #12
1000cc5c:	18fb      	adds	r3, r7, r3
1000cc5e:	789b      	ldrb	r3, [r3, #2]
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000cc60:	2b00      	cmp	r3, #0
1000cc62:	d004      	beq.n	1000cc6e <ble_pair_key_request_handler+0x136>
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
1000cc64:	230c      	movs	r3, #12
1000cc66:	18fb      	adds	r3, r7, r3
1000cc68:	78db      	ldrb	r3, [r3, #3]
1000cc6a:	2b00      	cmp	r3, #0
1000cc6c:	d153      	bne.n	1000cd16 <ble_pair_key_request_handler+0x1de>
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
1000cc6e:	230c      	movs	r3, #12
1000cc70:	18fb      	adds	r3, r7, r3
1000cc72:	78db      	ldrb	r3, [r3, #3]
1000cc74:	2b00      	cmp	r3, #0
1000cc76:	d108      	bne.n	1000cc8a <ble_pair_key_request_handler+0x152>
          {
            DBG_LOG("Entered Pass-code:");
1000cc78:	4b32      	ldr	r3, [pc, #200]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cc7a:	1c18      	adds	r0, r3, #0
1000cc7c:	4b32      	ldr	r3, [pc, #200]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cc7e:	4798      	blx	r3
1000cc80:	4b3a      	ldr	r3, [pc, #232]	; (1000cd6c <ble_pair_key_request_handler+0x234>)
1000cc82:	1c18      	adds	r0, r3, #0
1000cc84:	4b32      	ldr	r3, [pc, #200]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cc86:	4798      	blx	r3
1000cc88:	e007      	b.n	1000cc9a <ble_pair_key_request_handler+0x162>
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000cc8a:	4b2e      	ldr	r3, [pc, #184]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cc8c:	1c18      	adds	r0, r3, #0
1000cc8e:	4b2e      	ldr	r3, [pc, #184]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cc90:	4798      	blx	r3
1000cc92:	4b37      	ldr	r3, [pc, #220]	; (1000cd70 <ble_pair_key_request_handler+0x238>)
1000cc94:	1c18      	adds	r0, r3, #0
1000cc96:	4b2e      	ldr	r3, [pc, #184]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cc98:	4798      	blx	r3
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000cc9a:	231f      	movs	r3, #31
1000cc9c:	18fb      	adds	r3, r7, r3
1000cc9e:	2200      	movs	r2, #0
1000cca0:	701a      	strb	r2, [r3, #0]
1000cca2:	e01b      	b.n	1000ccdc <ble_pair_key_request_handler+0x1a4>
          {
                  passkey[idx] = (passkey[idx]);
1000cca4:	231f      	movs	r3, #31
1000cca6:	18fb      	adds	r3, r7, r3
1000cca8:	781b      	ldrb	r3, [r3, #0]
1000ccaa:	221f      	movs	r2, #31
1000ccac:	18ba      	adds	r2, r7, r2
1000ccae:	7812      	ldrb	r2, [r2, #0]
1000ccb0:	2110      	movs	r1, #16
1000ccb2:	1879      	adds	r1, r7, r1
1000ccb4:	5c89      	ldrb	r1, [r1, r2]
1000ccb6:	2210      	movs	r2, #16
1000ccb8:	18ba      	adds	r2, r7, r2
1000ccba:	54d1      	strb	r1, [r2, r3]
                  DBG_LOG_CONT("%c",passkey[idx]);
1000ccbc:	231f      	movs	r3, #31
1000ccbe:	18fb      	adds	r3, r7, r3
1000ccc0:	781b      	ldrb	r3, [r3, #0]
1000ccc2:	2210      	movs	r2, #16
1000ccc4:	18ba      	adds	r2, r7, r2
1000ccc6:	5cd3      	ldrb	r3, [r2, r3]
1000ccc8:	1c18      	adds	r0, r3, #0
1000ccca:	4b27      	ldr	r3, [pc, #156]	; (1000cd68 <ble_pair_key_request_handler+0x230>)
1000cccc:	4798      	blx	r3
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000ccce:	231f      	movs	r3, #31
1000ccd0:	18fb      	adds	r3, r7, r3
1000ccd2:	781a      	ldrb	r2, [r3, #0]
1000ccd4:	231f      	movs	r3, #31
1000ccd6:	18fb      	adds	r3, r7, r3
1000ccd8:	3201      	adds	r2, #1
1000ccda:	701a      	strb	r2, [r3, #0]
1000ccdc:	231f      	movs	r3, #31
1000ccde:	18fb      	adds	r3, r7, r3
1000cce0:	781b      	ldrb	r3, [r3, #0]
1000cce2:	2b05      	cmp	r3, #5
1000cce4:	d9de      	bls.n	1000cca4 <ble_pair_key_request_handler+0x16c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000cce6:	69bb      	ldr	r3, [r7, #24]
1000cce8:	8819      	ldrh	r1, [r3, #0]
1000ccea:	230c      	movs	r3, #12
1000ccec:	18fb      	adds	r3, r7, r3
1000ccee:	789a      	ldrb	r2, [r3, #2]
1000ccf0:	2310      	movs	r3, #16
1000ccf2:	18fb      	adds	r3, r7, r3
1000ccf4:	1c08      	adds	r0, r1, #0
1000ccf6:	1c11      	adds	r1, r2, #0
1000ccf8:	1c1a      	adds	r2, r3, #0
1000ccfa:	4b1e      	ldr	r3, [pc, #120]	; (1000cd74 <ble_pair_key_request_handler+0x23c>)
1000ccfc:	4798      	blx	r3
1000ccfe:	1e03      	subs	r3, r0, #0
1000cd00:	d008      	beq.n	1000cd14 <ble_pair_key_request_handler+0x1dc>
          {
                  DBG_LOG("Pair-key reply failed");
1000cd02:	4b10      	ldr	r3, [pc, #64]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cd04:	1c18      	adds	r0, r3, #0
1000cd06:	4b10      	ldr	r3, [pc, #64]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cd08:	4798      	blx	r3
1000cd0a:	4b1b      	ldr	r3, [pc, #108]	; (1000cd78 <ble_pair_key_request_handler+0x240>)
1000cd0c:	1c18      	adds	r0, r3, #0
1000cd0e:	4b10      	ldr	r3, [pc, #64]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cd10:	4798      	blx	r3
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000cd12:	e00d      	b.n	1000cd30 <ble_pair_key_request_handler+0x1f8>
1000cd14:	e00c      	b.n	1000cd30 <ble_pair_key_request_handler+0x1f8>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000cd16:	230c      	movs	r3, #12
1000cd18:	18fb      	adds	r3, r7, r3
1000cd1a:	789b      	ldrb	r3, [r3, #2]
1000cd1c:	2b01      	cmp	r3, #1
1000cd1e:	d107      	bne.n	1000cd30 <ble_pair_key_request_handler+0x1f8>
		{
			DBG_LOG("OOB Feature Not supported");
1000cd20:	4b08      	ldr	r3, [pc, #32]	; (1000cd44 <ble_pair_key_request_handler+0x20c>)
1000cd22:	1c18      	adds	r0, r3, #0
1000cd24:	4b08      	ldr	r3, [pc, #32]	; (1000cd48 <ble_pair_key_request_handler+0x210>)
1000cd26:	4798      	blx	r3
1000cd28:	4b14      	ldr	r3, [pc, #80]	; (1000cd7c <ble_pair_key_request_handler+0x244>)
1000cd2a:	1c18      	adds	r0, r3, #0
1000cd2c:	4b08      	ldr	r3, [pc, #32]	; (1000cd50 <ble_pair_key_request_handler+0x218>)
1000cd2e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000cd30:	2300      	movs	r3, #0
}
1000cd32:	1c18      	adds	r0, r3, #0
1000cd34:	46bd      	mov	sp, r7
1000cd36:	b008      	add	sp, #32
1000cd38:	bd80      	pop	{r7, pc}
1000cd3a:	46c0      	nop			; (mov r8, r8)
1000cd3c:	100158f8 	.word	0x100158f8
1000cd40:	100133db 	.word	0x100133db
1000cd44:	1001507c 	.word	0x1001507c
1000cd48:	1001351d 	.word	0x1001351d
1000cd4c:	10015814 	.word	0x10015814
1000cd50:	100133fd 	.word	0x100133fd
1000cd54:	1000dd89 	.word	0x1000dd89
1000cd58:	1001583c 	.word	0x1001583c
1000cd5c:	10015848 	.word	0x10015848
1000cd60:	1000fb91 	.word	0x1000fb91
1000cd64:	1001585c 	.word	0x1001585c
1000cd68:	10013431 	.word	0x10013431
1000cd6c:	10015878 	.word	0x10015878
1000cd70:	1001588c 	.word	0x1001588c
1000cd74:	100106a1 	.word	0x100106a1
1000cd78:	100158c4 	.word	0x100158c4
1000cd7c:	100158dc 	.word	0x100158dc

1000cd80 <ble_pair_done_handler>:

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000cd80:	b580      	push	{r7, lr}
1000cd82:	b084      	sub	sp, #16
1000cd84:	af00      	add	r7, sp, #0
1000cd86:	6078      	str	r0, [r7, #4]
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
1000cd88:	230e      	movs	r3, #14
1000cd8a:	18fb      	adds	r3, r7, r3
1000cd8c:	2200      	movs	r2, #0
1000cd8e:	701a      	strb	r2, [r3, #0]
	pairing_params = (at_ble_pair_done_t *)params;
1000cd90:	687b      	ldr	r3, [r7, #4]
1000cd92:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd94:	230f      	movs	r3, #15
1000cd96:	18fb      	adds	r3, r7, r3
1000cd98:	2200      	movs	r2, #0
1000cd9a:	701a      	strb	r2, [r3, #0]
1000cd9c:	e028      	b.n	1000cdf0 <ble_pair_done_handler+0x70>
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cd9e:	230f      	movs	r3, #15
1000cda0:	18fb      	adds	r3, r7, r3
1000cda2:	781a      	ldrb	r2, [r3, #0]
1000cda4:	49ad      	ldr	r1, [pc, #692]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000cda6:	1c13      	adds	r3, r2, #0
1000cda8:	015b      	lsls	r3, r3, #5
1000cdaa:	1a9b      	subs	r3, r3, r2
1000cdac:	009b      	lsls	r3, r3, #2
1000cdae:	18cb      	adds	r3, r1, r3
1000cdb0:	3308      	adds	r3, #8
1000cdb2:	881a      	ldrh	r2, [r3, #0]
1000cdb4:	68bb      	ldr	r3, [r7, #8]
1000cdb6:	885b      	ldrh	r3, [r3, #2]
1000cdb8:	429a      	cmp	r2, r3
1000cdba:	d112      	bne.n	1000cde2 <ble_pair_done_handler+0x62>
1000cdbc:	230f      	movs	r3, #15
1000cdbe:	18fb      	adds	r3, r7, r3
1000cdc0:	781a      	ldrb	r2, [r3, #0]
1000cdc2:	49a6      	ldr	r1, [pc, #664]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000cdc4:	2058      	movs	r0, #88	; 0x58
1000cdc6:	1c13      	adds	r3, r2, #0
1000cdc8:	015b      	lsls	r3, r3, #5
1000cdca:	1a9b      	subs	r3, r3, r2
1000cdcc:	009b      	lsls	r3, r3, #2
1000cdce:	18cb      	adds	r3, r1, r3
1000cdd0:	181b      	adds	r3, r3, r0
1000cdd2:	799b      	ldrb	r3, [r3, #6]
1000cdd4:	2b03      	cmp	r3, #3
1000cdd6:	d104      	bne.n	1000cde2 <ble_pair_done_handler+0x62>
		{
			device_found = true;
1000cdd8:	230e      	movs	r3, #14
1000cdda:	18fb      	adds	r3, r7, r3
1000cddc:	2201      	movs	r2, #1
1000cdde:	701a      	strb	r2, [r3, #0]
			break;
1000cde0:	e00b      	b.n	1000cdfa <ble_pair_done_handler+0x7a>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cde2:	230f      	movs	r3, #15
1000cde4:	18fb      	adds	r3, r7, r3
1000cde6:	781a      	ldrb	r2, [r3, #0]
1000cde8:	230f      	movs	r3, #15
1000cdea:	18fb      	adds	r3, r7, r3
1000cdec:	3201      	adds	r2, #1
1000cdee:	701a      	strb	r2, [r3, #0]
1000cdf0:	230f      	movs	r3, #15
1000cdf2:	18fb      	adds	r3, r7, r3
1000cdf4:	781b      	ldrb	r3, [r3, #0]
1000cdf6:	2b04      	cmp	r3, #4
1000cdf8:	d9d1      	bls.n	1000cd9e <ble_pair_done_handler+0x1e>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cdfa:	68bb      	ldr	r3, [r7, #8]
1000cdfc:	791b      	ldrb	r3, [r3, #4]
1000cdfe:	2b00      	cmp	r3, #0
1000ce00:	d000      	beq.n	1000ce04 <ble_pair_done_handler+0x84>
1000ce02:	e0f0      	b.n	1000cfe6 <ble_pair_done_handler+0x266>
	{
		DBG_LOG("\n\r[ble_pair_done_handler]\n\rpairing procedure completed successfully");
1000ce04:	4b96      	ldr	r3, [pc, #600]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000ce06:	1c18      	adds	r0, r3, #0
1000ce08:	4b96      	ldr	r3, [pc, #600]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000ce0a:	4798      	blx	r3
1000ce0c:	4b96      	ldr	r3, [pc, #600]	; (1000d068 <ble_pair_done_handler+0x2e8>)
1000ce0e:	1c18      	adds	r0, r3, #0
1000ce10:	4b96      	ldr	r3, [pc, #600]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000ce12:	4798      	blx	r3
		if (device_found)
1000ce14:	230e      	movs	r3, #14
1000ce16:	18fb      	adds	r3, r7, r3
1000ce18:	781b      	ldrb	r3, [r3, #0]
1000ce1a:	2b00      	cmp	r3, #0
1000ce1c:	d100      	bne.n	1000ce20 <ble_pair_done_handler+0xa0>
1000ce1e:	e0d8      	b.n	1000cfd2 <ble_pair_done_handler+0x252>
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000ce20:	230f      	movs	r3, #15
1000ce22:	18fb      	adds	r3, r7, r3
1000ce24:	781a      	ldrb	r2, [r3, #0]
1000ce26:	68bb      	ldr	r3, [r7, #8]
1000ce28:	7818      	ldrb	r0, [r3, #0]
1000ce2a:	498c      	ldr	r1, [pc, #560]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000ce2c:	1c13      	adds	r3, r2, #0
1000ce2e:	015b      	lsls	r3, r3, #5
1000ce30:	1a9b      	subs	r3, r3, r2
1000ce32:	009b      	lsls	r3, r3, #2
1000ce34:	18cb      	adds	r3, r1, r3
1000ce36:	3310      	adds	r3, #16
1000ce38:	1c02      	adds	r2, r0, #0
1000ce3a:	711a      	strb	r2, [r3, #4]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000ce3c:	230f      	movs	r3, #15
1000ce3e:	18fb      	adds	r3, r7, r3
1000ce40:	781a      	ldrb	r2, [r3, #0]
1000ce42:	68bb      	ldr	r3, [r7, #8]
1000ce44:	7918      	ldrb	r0, [r3, #4]
1000ce46:	4985      	ldr	r1, [pc, #532]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000ce48:	1c13      	adds	r3, r2, #0
1000ce4a:	015b      	lsls	r3, r3, #5
1000ce4c:	1a9b      	subs	r3, r3, r2
1000ce4e:	009b      	lsls	r3, r3, #2
1000ce50:	18cb      	adds	r3, r1, r3
1000ce52:	3310      	adds	r3, #16
1000ce54:	1c02      	adds	r2, r0, #0
1000ce56:	721a      	strb	r2, [r3, #8]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000ce58:	230f      	movs	r3, #15
1000ce5a:	18fb      	adds	r3, r7, r3
1000ce5c:	781a      	ldrb	r2, [r3, #0]
1000ce5e:	497f      	ldr	r1, [pc, #508]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000ce60:	2058      	movs	r0, #88	; 0x58
1000ce62:	1c13      	adds	r3, r2, #0
1000ce64:	015b      	lsls	r3, r3, #5
1000ce66:	1a9b      	subs	r3, r3, r2
1000ce68:	009b      	lsls	r3, r3, #2
1000ce6a:	18cb      	adds	r3, r1, r3
1000ce6c:	181b      	adds	r3, r3, r0
1000ce6e:	2205      	movs	r2, #5
1000ce70:	719a      	strb	r2, [r3, #6]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000ce72:	230f      	movs	r3, #15
1000ce74:	18fb      	adds	r3, r7, r3
1000ce76:	781a      	ldrb	r2, [r3, #0]
1000ce78:	1c13      	adds	r3, r2, #0
1000ce7a:	015b      	lsls	r3, r3, #5
1000ce7c:	1a9b      	subs	r3, r3, r2
1000ce7e:	009b      	lsls	r3, r3, #2
1000ce80:	3330      	adds	r3, #48	; 0x30
1000ce82:	1c1a      	adds	r2, r3, #0
1000ce84:	4b75      	ldr	r3, [pc, #468]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000ce86:	18d3      	adds	r3, r2, r3
1000ce88:	1d99      	adds	r1, r3, #6
1000ce8a:	68bb      	ldr	r3, [r7, #8]
1000ce8c:	2222      	movs	r2, #34	; 0x22
1000ce8e:	189b      	adds	r3, r3, r2
1000ce90:	2210      	movs	r2, #16
1000ce92:	1c08      	adds	r0, r1, #0
1000ce94:	1c19      	adds	r1, r3, #0
1000ce96:	4b76      	ldr	r3, [pc, #472]	; (1000d070 <ble_pair_done_handler+0x2f0>)
1000ce98:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000ce9a:	230f      	movs	r3, #15
1000ce9c:	18fb      	adds	r3, r7, r3
1000ce9e:	781a      	ldrb	r2, [r3, #0]
1000cea0:	1c13      	adds	r3, r2, #0
1000cea2:	015b      	lsls	r3, r3, #5
1000cea4:	1a9b      	subs	r3, r3, r2
1000cea6:	009b      	lsls	r3, r3, #2
1000cea8:	3340      	adds	r3, #64	; 0x40
1000ceaa:	1c1a      	adds	r2, r3, #0
1000ceac:	4b6b      	ldr	r3, [pc, #428]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000ceae:	18d3      	adds	r3, r2, r3
1000ceb0:	1d99      	adds	r1, r3, #6
1000ceb2:	68bb      	ldr	r3, [r7, #8]
1000ceb4:	2232      	movs	r2, #50	; 0x32
1000ceb6:	189b      	adds	r3, r3, r2
1000ceb8:	2217      	movs	r2, #23
1000ceba:	1c08      	adds	r0, r1, #0
1000cebc:	1c19      	adds	r1, r3, #0
1000cebe:	4b6c      	ldr	r3, [pc, #432]	; (1000d070 <ble_pair_done_handler+0x2f0>)
1000cec0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000cec2:	230f      	movs	r3, #15
1000cec4:	18fb      	adds	r3, r7, r3
1000cec6:	781a      	ldrb	r2, [r3, #0]
1000cec8:	1c13      	adds	r3, r2, #0
1000ceca:	015b      	lsls	r3, r3, #5
1000cecc:	1a9b      	subs	r3, r3, r2
1000cece:	009b      	lsls	r3, r3, #2
1000ced0:	3310      	adds	r3, #16
1000ced2:	1c1a      	adds	r2, r3, #0
1000ced4:	4b61      	ldr	r3, [pc, #388]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000ced6:	18d3      	adds	r3, r2, r3
1000ced8:	330a      	adds	r3, #10
1000ceda:	1c1a      	adds	r2, r3, #0
1000cedc:	68bb      	ldr	r3, [r7, #8]
1000cede:	3306      	adds	r3, #6
1000cee0:	1c10      	adds	r0, r2, #0
1000cee2:	1c19      	adds	r1, r3, #0
1000cee4:	221c      	movs	r2, #28
1000cee6:	4b62      	ldr	r3, [pc, #392]	; (1000d070 <ble_pair_done_handler+0x2f0>)
1000cee8:	4798      	blx	r3
			
			DBG_LOG_DEV("\n\r[ble_pair_done_handler]\n\rLTK: ");
1000ceea:	4b5d      	ldr	r3, [pc, #372]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000ceec:	1c18      	adds	r0, r3, #0
1000ceee:	4b5d      	ldr	r3, [pc, #372]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000cef0:	4798      	blx	r3
1000cef2:	4b60      	ldr	r3, [pc, #384]	; (1000d074 <ble_pair_done_handler+0x2f4>)
1000cef4:	1c18      	adds	r0, r3, #0
1000cef6:	4b5d      	ldr	r3, [pc, #372]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cef8:	4798      	blx	r3
			for (idx = 0; idx < 16; idx++)
1000cefa:	230f      	movs	r3, #15
1000cefc:	18fb      	adds	r3, r7, r3
1000cefe:	2200      	movs	r2, #0
1000cf00:	701a      	strb	r2, [r3, #0]
1000cf02:	e012      	b.n	1000cf2a <ble_pair_done_handler+0x1aa>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000cf04:	230f      	movs	r3, #15
1000cf06:	18fb      	adds	r3, r7, r3
1000cf08:	781b      	ldrb	r3, [r3, #0]
1000cf0a:	68ba      	ldr	r2, [r7, #8]
1000cf0c:	18d3      	adds	r3, r2, r3
1000cf0e:	799b      	ldrb	r3, [r3, #6]
1000cf10:	1c1a      	adds	r2, r3, #0
1000cf12:	4b59      	ldr	r3, [pc, #356]	; (1000d078 <ble_pair_done_handler+0x2f8>)
1000cf14:	1c18      	adds	r0, r3, #0
1000cf16:	1c11      	adds	r1, r2, #0
1000cf18:	4b54      	ldr	r3, [pc, #336]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cf1a:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("\n\r[ble_pair_done_handler]\n\rLTK: ");
			for (idx = 0; idx < 16; idx++)
1000cf1c:	230f      	movs	r3, #15
1000cf1e:	18fb      	adds	r3, r7, r3
1000cf20:	781a      	ldrb	r2, [r3, #0]
1000cf22:	230f      	movs	r3, #15
1000cf24:	18fb      	adds	r3, r7, r3
1000cf26:	3201      	adds	r2, #1
1000cf28:	701a      	strb	r2, [r3, #0]
1000cf2a:	230f      	movs	r3, #15
1000cf2c:	18fb      	adds	r3, r7, r3
1000cf2e:	781b      	ldrb	r3, [r3, #0]
1000cf30:	2b0f      	cmp	r3, #15
1000cf32:	d9e7      	bls.n	1000cf04 <ble_pair_done_handler+0x184>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("\n\r[ble_pair_done_handler]\n\rCSRK: ");
1000cf34:	4b4a      	ldr	r3, [pc, #296]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000cf36:	1c18      	adds	r0, r3, #0
1000cf38:	4b4a      	ldr	r3, [pc, #296]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000cf3a:	4798      	blx	r3
1000cf3c:	4b4f      	ldr	r3, [pc, #316]	; (1000d07c <ble_pair_done_handler+0x2fc>)
1000cf3e:	1c18      	adds	r0, r3, #0
1000cf40:	4b4a      	ldr	r3, [pc, #296]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cf42:	4798      	blx	r3
			for (idx = 0; idx < 16; idx++)
1000cf44:	230f      	movs	r3, #15
1000cf46:	18fb      	adds	r3, r7, r3
1000cf48:	2200      	movs	r2, #0
1000cf4a:	701a      	strb	r2, [r3, #0]
1000cf4c:	e014      	b.n	1000cf78 <ble_pair_done_handler+0x1f8>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000cf4e:	230f      	movs	r3, #15
1000cf50:	18fb      	adds	r3, r7, r3
1000cf52:	781b      	ldrb	r3, [r3, #0]
1000cf54:	68ba      	ldr	r2, [r7, #8]
1000cf56:	2120      	movs	r1, #32
1000cf58:	18d3      	adds	r3, r2, r3
1000cf5a:	185b      	adds	r3, r3, r1
1000cf5c:	789b      	ldrb	r3, [r3, #2]
1000cf5e:	1c1a      	adds	r2, r3, #0
1000cf60:	4b45      	ldr	r3, [pc, #276]	; (1000d078 <ble_pair_done_handler+0x2f8>)
1000cf62:	1c18      	adds	r0, r3, #0
1000cf64:	1c11      	adds	r1, r2, #0
1000cf66:	4b41      	ldr	r3, [pc, #260]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cf68:	4798      	blx	r3
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("\n\r[ble_pair_done_handler]\n\rCSRK: ");
			for (idx = 0; idx < 16; idx++)
1000cf6a:	230f      	movs	r3, #15
1000cf6c:	18fb      	adds	r3, r7, r3
1000cf6e:	781a      	ldrb	r2, [r3, #0]
1000cf70:	230f      	movs	r3, #15
1000cf72:	18fb      	adds	r3, r7, r3
1000cf74:	3201      	adds	r2, #1
1000cf76:	701a      	strb	r2, [r3, #0]
1000cf78:	230f      	movs	r3, #15
1000cf7a:	18fb      	adds	r3, r7, r3
1000cf7c:	781b      	ldrb	r3, [r3, #0]
1000cf7e:	2b0f      	cmp	r3, #15
1000cf80:	d9e5      	bls.n	1000cf4e <ble_pair_done_handler+0x1ce>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("\n\r[ble_pair_done_handler]\n\rIRK:");
1000cf82:	4b37      	ldr	r3, [pc, #220]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000cf84:	1c18      	adds	r0, r3, #0
1000cf86:	4b37      	ldr	r3, [pc, #220]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000cf88:	4798      	blx	r3
1000cf8a:	4b3d      	ldr	r3, [pc, #244]	; (1000d080 <ble_pair_done_handler+0x300>)
1000cf8c:	1c18      	adds	r0, r3, #0
1000cf8e:	4b37      	ldr	r3, [pc, #220]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cf90:	4798      	blx	r3
			for (idx = 0; idx < 16; idx++)
1000cf92:	230f      	movs	r3, #15
1000cf94:	18fb      	adds	r3, r7, r3
1000cf96:	2200      	movs	r2, #0
1000cf98:	701a      	strb	r2, [r3, #0]
1000cf9a:	e014      	b.n	1000cfc6 <ble_pair_done_handler+0x246>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000cf9c:	230f      	movs	r3, #15
1000cf9e:	18fb      	adds	r3, r7, r3
1000cfa0:	781b      	ldrb	r3, [r3, #0]
1000cfa2:	68ba      	ldr	r2, [r7, #8]
1000cfa4:	2130      	movs	r1, #48	; 0x30
1000cfa6:	18d3      	adds	r3, r2, r3
1000cfa8:	185b      	adds	r3, r3, r1
1000cfaa:	789b      	ldrb	r3, [r3, #2]
1000cfac:	1c1a      	adds	r2, r3, #0
1000cfae:	4b32      	ldr	r3, [pc, #200]	; (1000d078 <ble_pair_done_handler+0x2f8>)
1000cfb0:	1c18      	adds	r0, r3, #0
1000cfb2:	1c11      	adds	r1, r2, #0
1000cfb4:	4b2d      	ldr	r3, [pc, #180]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cfb6:	4798      	blx	r3
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("\n\r[ble_pair_done_handler]\n\rIRK:");
			for (idx = 0; idx < 16; idx++)
1000cfb8:	230f      	movs	r3, #15
1000cfba:	18fb      	adds	r3, r7, r3
1000cfbc:	781a      	ldrb	r2, [r3, #0]
1000cfbe:	230f      	movs	r3, #15
1000cfc0:	18fb      	adds	r3, r7, r3
1000cfc2:	3201      	adds	r2, #1
1000cfc4:	701a      	strb	r2, [r3, #0]
1000cfc6:	230f      	movs	r3, #15
1000cfc8:	18fb      	adds	r3, r7, r3
1000cfca:	781b      	ldrb	r3, [r3, #0]
1000cfcc:	2b0f      	cmp	r3, #15
1000cfce:	d9e5      	bls.n	1000cf9c <ble_pair_done_handler+0x21c>
1000cfd0:	e03f      	b.n	1000d052 <ble_pair_done_handler+0x2d2>
				
			}
		}
		else
		{
			DBG_LOG("\n\r[ble_pair_done_handler]\n\rBLE Device not found to store the pairing info");
1000cfd2:	4b23      	ldr	r3, [pc, #140]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000cfd4:	1c18      	adds	r0, r3, #0
1000cfd6:	4b23      	ldr	r3, [pc, #140]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000cfd8:	4798      	blx	r3
1000cfda:	4b2a      	ldr	r3, [pc, #168]	; (1000d084 <ble_pair_done_handler+0x304>)
1000cfdc:	1c18      	adds	r0, r3, #0
1000cfde:	4b23      	ldr	r3, [pc, #140]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000cfe0:	4798      	blx	r3
			return AT_BLE_FAILURE;
1000cfe2:	23e2      	movs	r3, #226	; 0xe2
1000cfe4:	e036      	b.n	1000d054 <ble_pair_done_handler+0x2d4>
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000cfe6:	230f      	movs	r3, #15
1000cfe8:	18fb      	adds	r3, r7, r3
1000cfea:	781a      	ldrb	r2, [r3, #0]
1000cfec:	491b      	ldr	r1, [pc, #108]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000cfee:	2058      	movs	r0, #88	; 0x58
1000cff0:	1c13      	adds	r3, r2, #0
1000cff2:	015b      	lsls	r3, r3, #5
1000cff4:	1a9b      	subs	r3, r3, r2
1000cff6:	009b      	lsls	r3, r3, #2
1000cff8:	18cb      	adds	r3, r1, r3
1000cffa:	181b      	adds	r3, r3, r0
1000cffc:	799b      	ldrb	r3, [r3, #6]
1000cffe:	2b00      	cmp	r3, #0
1000d000:	d027      	beq.n	1000d052 <ble_pair_done_handler+0x2d2>
1000d002:	230f      	movs	r3, #15
1000d004:	18fb      	adds	r3, r7, r3
1000d006:	781a      	ldrb	r2, [r3, #0]
1000d008:	4914      	ldr	r1, [pc, #80]	; (1000d05c <ble_pair_done_handler+0x2dc>)
1000d00a:	2058      	movs	r0, #88	; 0x58
1000d00c:	1c13      	adds	r3, r2, #0
1000d00e:	015b      	lsls	r3, r3, #5
1000d010:	1a9b      	subs	r3, r3, r2
1000d012:	009b      	lsls	r3, r3, #2
1000d014:	18cb      	adds	r3, r1, r3
1000d016:	181b      	adds	r3, r3, r0
1000d018:	799b      	ldrb	r3, [r3, #6]
1000d01a:	2b01      	cmp	r3, #1
1000d01c:	d019      	beq.n	1000d052 <ble_pair_done_handler+0x2d2>
			DBG_LOG("\n\r[ble_pair_done_handler]\n\rpairing failed...Disconnecting");
1000d01e:	4b10      	ldr	r3, [pc, #64]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000d020:	1c18      	adds	r0, r3, #0
1000d022:	4b10      	ldr	r3, [pc, #64]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000d024:	4798      	blx	r3
1000d026:	4b18      	ldr	r3, [pc, #96]	; (1000d088 <ble_pair_done_handler+0x308>)
1000d028:	1c18      	adds	r0, r3, #0
1000d02a:	4b10      	ldr	r3, [pc, #64]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000d02c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d02e:	68bb      	ldr	r3, [r7, #8]
1000d030:	885b      	ldrh	r3, [r3, #2]
1000d032:	1c18      	adds	r0, r3, #0
1000d034:	2113      	movs	r1, #19
1000d036:	4b15      	ldr	r3, [pc, #84]	; (1000d08c <ble_pair_done_handler+0x30c>)
1000d038:	4798      	blx	r3
1000d03a:	1e03      	subs	r3, r0, #0
1000d03c:	d009      	beq.n	1000d052 <ble_pair_done_handler+0x2d2>
			{
				DBG_LOG("\n\r[ble_pair_done_handler]\n\rdisconnect Request Failed");
1000d03e:	4b08      	ldr	r3, [pc, #32]	; (1000d060 <ble_pair_done_handler+0x2e0>)
1000d040:	1c18      	adds	r0, r3, #0
1000d042:	4b08      	ldr	r3, [pc, #32]	; (1000d064 <ble_pair_done_handler+0x2e4>)
1000d044:	4798      	blx	r3
1000d046:	4b12      	ldr	r3, [pc, #72]	; (1000d090 <ble_pair_done_handler+0x310>)
1000d048:	1c18      	adds	r0, r3, #0
1000d04a:	4b08      	ldr	r3, [pc, #32]	; (1000d06c <ble_pair_done_handler+0x2ec>)
1000d04c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d04e:	23e2      	movs	r3, #226	; 0xe2
1000d050:	e000      	b.n	1000d054 <ble_pair_done_handler+0x2d4>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d052:	2300      	movs	r3, #0
}
1000d054:	1c18      	adds	r0, r3, #0
1000d056:	46bd      	mov	sp, r7
1000d058:	b004      	add	sp, #16
1000d05a:	bd80      	pop	{r7, pc}
1000d05c:	10016a2c 	.word	0x10016a2c
1000d060:	1001507c 	.word	0x1001507c
1000d064:	1001351d 	.word	0x1001351d
1000d068:	10015900 	.word	0x10015900
1000d06c:	100133fd 	.word	0x100133fd
1000d070:	100133db 	.word	0x100133db
1000d074:	10015944 	.word	0x10015944
1000d078:	10015968 	.word	0x10015968
1000d07c:	10015974 	.word	0x10015974
1000d080:	10015998 	.word	0x10015998
1000d084:	100159b8 	.word	0x100159b8
1000d088:	10015a04 	.word	0x10015a04
1000d08c:	1000fb91 	.word	0x1000fb91
1000d090:	10015a40 	.word	0x10015a40

1000d094 <ble_encryption_status_change_handler>:

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d094:	b580      	push	{r7, lr}
1000d096:	b084      	sub	sp, #16
1000d098:	af00      	add	r7, sp, #0
1000d09a:	6078      	str	r0, [r7, #4]
	at_ble_encryption_status_changed_t *enc_status;
	uint8_t idx;
	bool device_found = false;
1000d09c:	230e      	movs	r3, #14
1000d09e:	18fb      	adds	r3, r7, r3
1000d0a0:	2200      	movs	r2, #0
1000d0a2:	701a      	strb	r2, [r3, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
1000d0a4:	687b      	ldr	r3, [r7, #4]
1000d0a6:	60bb      	str	r3, [r7, #8]
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d0a8:	230f      	movs	r3, #15
1000d0aa:	18fb      	adds	r3, r7, r3
1000d0ac:	2200      	movs	r2, #0
1000d0ae:	701a      	strb	r2, [r3, #0]
1000d0b0:	e028      	b.n	1000d104 <ble_encryption_status_change_handler+0x70>
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d0b2:	230f      	movs	r3, #15
1000d0b4:	18fb      	adds	r3, r7, r3
1000d0b6:	781a      	ldrb	r2, [r3, #0]
1000d0b8:	494c      	ldr	r1, [pc, #304]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d0ba:	1c13      	adds	r3, r2, #0
1000d0bc:	015b      	lsls	r3, r3, #5
1000d0be:	1a9b      	subs	r3, r3, r2
1000d0c0:	009b      	lsls	r3, r3, #2
1000d0c2:	18cb      	adds	r3, r1, r3
1000d0c4:	3308      	adds	r3, #8
1000d0c6:	881a      	ldrh	r2, [r3, #0]
1000d0c8:	68bb      	ldr	r3, [r7, #8]
1000d0ca:	881b      	ldrh	r3, [r3, #0]
1000d0cc:	429a      	cmp	r2, r3
1000d0ce:	d112      	bne.n	1000d0f6 <ble_encryption_status_change_handler+0x62>
1000d0d0:	230f      	movs	r3, #15
1000d0d2:	18fb      	adds	r3, r7, r3
1000d0d4:	781a      	ldrb	r2, [r3, #0]
1000d0d6:	4945      	ldr	r1, [pc, #276]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d0d8:	2058      	movs	r0, #88	; 0x58
1000d0da:	1c13      	adds	r3, r2, #0
1000d0dc:	015b      	lsls	r3, r3, #5
1000d0de:	1a9b      	subs	r3, r3, r2
1000d0e0:	009b      	lsls	r3, r3, #2
1000d0e2:	18cb      	adds	r3, r1, r3
1000d0e4:	181b      	adds	r3, r3, r0
1000d0e6:	799b      	ldrb	r3, [r3, #6]
1000d0e8:	2b06      	cmp	r3, #6
1000d0ea:	d104      	bne.n	1000d0f6 <ble_encryption_status_change_handler+0x62>
		{
			device_found = true;
1000d0ec:	230e      	movs	r3, #14
1000d0ee:	18fb      	adds	r3, r7, r3
1000d0f0:	2201      	movs	r2, #1
1000d0f2:	701a      	strb	r2, [r3, #0]
			break;
1000d0f4:	e00b      	b.n	1000d10e <ble_encryption_status_change_handler+0x7a>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d0f6:	230f      	movs	r3, #15
1000d0f8:	18fb      	adds	r3, r7, r3
1000d0fa:	781a      	ldrb	r2, [r3, #0]
1000d0fc:	230f      	movs	r3, #15
1000d0fe:	18fb      	adds	r3, r7, r3
1000d100:	3201      	adds	r2, #1
1000d102:	701a      	strb	r2, [r3, #0]
1000d104:	230f      	movs	r3, #15
1000d106:	18fb      	adds	r3, r7, r3
1000d108:	781b      	ldrb	r3, [r3, #0]
1000d10a:	2b04      	cmp	r3, #4
1000d10c:	d9d1      	bls.n	1000d0b2 <ble_encryption_status_change_handler+0x1e>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d10e:	68bb      	ldr	r3, [r7, #8]
1000d110:	789b      	ldrb	r3, [r3, #2]
1000d112:	2b00      	cmp	r3, #0
1000d114:	d141      	bne.n	1000d19a <ble_encryption_status_change_handler+0x106>
	{
		DBG_LOG("Encryption completed successfully");
1000d116:	4b36      	ldr	r3, [pc, #216]	; (1000d1f0 <ble_encryption_status_change_handler+0x15c>)
1000d118:	1c18      	adds	r0, r3, #0
1000d11a:	4b36      	ldr	r3, [pc, #216]	; (1000d1f4 <ble_encryption_status_change_handler+0x160>)
1000d11c:	4798      	blx	r3
1000d11e:	4b36      	ldr	r3, [pc, #216]	; (1000d1f8 <ble_encryption_status_change_handler+0x164>)
1000d120:	1c18      	adds	r0, r3, #0
1000d122:	4b36      	ldr	r3, [pc, #216]	; (1000d1fc <ble_encryption_status_change_handler+0x168>)
1000d124:	4798      	blx	r3
		if (device_found)
1000d126:	230e      	movs	r3, #14
1000d128:	18fb      	adds	r3, r7, r3
1000d12a:	781b      	ldrb	r3, [r3, #0]
1000d12c:	2b00      	cmp	r3, #0
1000d12e:	d02a      	beq.n	1000d186 <ble_encryption_status_change_handler+0xf2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d130:	230f      	movs	r3, #15
1000d132:	18fb      	adds	r3, r7, r3
1000d134:	781a      	ldrb	r2, [r3, #0]
1000d136:	492d      	ldr	r1, [pc, #180]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d138:	2058      	movs	r0, #88	; 0x58
1000d13a:	1c13      	adds	r3, r2, #0
1000d13c:	015b      	lsls	r3, r3, #5
1000d13e:	1a9b      	subs	r3, r3, r2
1000d140:	009b      	lsls	r3, r3, #2
1000d142:	18cb      	adds	r3, r1, r3
1000d144:	181b      	adds	r3, r3, r0
1000d146:	2208      	movs	r2, #8
1000d148:	719a      	strb	r2, [r3, #6]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d14a:	230f      	movs	r3, #15
1000d14c:	18fb      	adds	r3, r7, r3
1000d14e:	781a      	ldrb	r2, [r3, #0]
1000d150:	68bb      	ldr	r3, [r7, #8]
1000d152:	78d8      	ldrb	r0, [r3, #3]
1000d154:	4925      	ldr	r1, [pc, #148]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d156:	1c13      	adds	r3, r2, #0
1000d158:	015b      	lsls	r3, r3, #5
1000d15a:	1a9b      	subs	r3, r3, r2
1000d15c:	009b      	lsls	r3, r3, #2
1000d15e:	18cb      	adds	r3, r1, r3
1000d160:	3310      	adds	r3, #16
1000d162:	1c02      	adds	r2, r0, #0
1000d164:	711a      	strb	r2, [r3, #4]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d166:	230f      	movs	r3, #15
1000d168:	18fb      	adds	r3, r7, r3
1000d16a:	781a      	ldrb	r2, [r3, #0]
1000d16c:	68bb      	ldr	r3, [r7, #8]
1000d16e:	7898      	ldrb	r0, [r3, #2]
1000d170:	491e      	ldr	r1, [pc, #120]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d172:	1c13      	adds	r3, r2, #0
1000d174:	015b      	lsls	r3, r3, #5
1000d176:	1a9b      	subs	r3, r3, r2
1000d178:	009b      	lsls	r3, r3, #2
1000d17a:	18cb      	adds	r3, r1, r3
1000d17c:	3310      	adds	r3, #16
1000d17e:	1c02      	adds	r2, r0, #0
1000d180:	721a      	strb	r2, [r3, #8]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d182:	2300      	movs	r3, #0
1000d184:	e02d      	b.n	1000d1e2 <ble_encryption_status_change_handler+0x14e>
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d186:	4b1a      	ldr	r3, [pc, #104]	; (1000d1f0 <ble_encryption_status_change_handler+0x15c>)
1000d188:	1c18      	adds	r0, r3, #0
1000d18a:	4b1a      	ldr	r3, [pc, #104]	; (1000d1f4 <ble_encryption_status_change_handler+0x160>)
1000d18c:	4798      	blx	r3
1000d18e:	4b1c      	ldr	r3, [pc, #112]	; (1000d200 <ble_encryption_status_change_handler+0x16c>)
1000d190:	1c18      	adds	r0, r3, #0
1000d192:	4b1a      	ldr	r3, [pc, #104]	; (1000d1fc <ble_encryption_status_change_handler+0x168>)
1000d194:	4798      	blx	r3
			return AT_BLE_FAILURE;
1000d196:	23e2      	movs	r3, #226	; 0xe2
1000d198:	e023      	b.n	1000d1e2 <ble_encryption_status_change_handler+0x14e>
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d19a:	230f      	movs	r3, #15
1000d19c:	18fb      	adds	r3, r7, r3
1000d19e:	781a      	ldrb	r2, [r3, #0]
1000d1a0:	68bb      	ldr	r3, [r7, #8]
1000d1a2:	7898      	ldrb	r0, [r3, #2]
1000d1a4:	4911      	ldr	r1, [pc, #68]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d1a6:	1c13      	adds	r3, r2, #0
1000d1a8:	015b      	lsls	r3, r3, #5
1000d1aa:	1a9b      	subs	r3, r3, r2
1000d1ac:	009b      	lsls	r3, r3, #2
1000d1ae:	18cb      	adds	r3, r1, r3
1000d1b0:	3310      	adds	r3, #16
1000d1b2:	1c02      	adds	r2, r0, #0
1000d1b4:	721a      	strb	r2, [r3, #8]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d1b6:	230f      	movs	r3, #15
1000d1b8:	18fb      	adds	r3, r7, r3
1000d1ba:	781a      	ldrb	r2, [r3, #0]
1000d1bc:	490b      	ldr	r1, [pc, #44]	; (1000d1ec <ble_encryption_status_change_handler+0x158>)
1000d1be:	2058      	movs	r0, #88	; 0x58
1000d1c0:	1c13      	adds	r3, r2, #0
1000d1c2:	015b      	lsls	r3, r3, #5
1000d1c4:	1a9b      	subs	r3, r3, r2
1000d1c6:	009b      	lsls	r3, r3, #2
1000d1c8:	18cb      	adds	r3, r1, r3
1000d1ca:	181b      	adds	r3, r3, r0
1000d1cc:	2207      	movs	r2, #7
1000d1ce:	719a      	strb	r2, [r3, #6]
		DBG_LOG("Encryption failed");
1000d1d0:	4b07      	ldr	r3, [pc, #28]	; (1000d1f0 <ble_encryption_status_change_handler+0x15c>)
1000d1d2:	1c18      	adds	r0, r3, #0
1000d1d4:	4b07      	ldr	r3, [pc, #28]	; (1000d1f4 <ble_encryption_status_change_handler+0x160>)
1000d1d6:	4798      	blx	r3
1000d1d8:	4b0a      	ldr	r3, [pc, #40]	; (1000d204 <ble_encryption_status_change_handler+0x170>)
1000d1da:	1c18      	adds	r0, r3, #0
1000d1dc:	4b07      	ldr	r3, [pc, #28]	; (1000d1fc <ble_encryption_status_change_handler+0x168>)
1000d1de:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d1e0:	23e2      	movs	r3, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d1e2:	1c18      	adds	r0, r3, #0
1000d1e4:	46bd      	mov	sp, r7
1000d1e6:	b004      	add	sp, #16
1000d1e8:	bd80      	pop	{r7, pc}
1000d1ea:	46c0      	nop			; (mov r8, r8)
1000d1ec:	10016a2c 	.word	0x10016a2c
1000d1f0:	1001507c 	.word	0x1001507c
1000d1f4:	1001351d 	.word	0x1001351d
1000d1f8:	10015a78 	.word	0x10015a78
1000d1fc:	100133fd 	.word	0x100133fd
1000d200:	10015a9c 	.word	0x10015a9c
1000d204:	10015ac4 	.word	0x10015ac4

1000d208 <ble_encryption_request_handler>:

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d208:	b590      	push	{r4, r7, lr}
1000d20a:	b085      	sub	sp, #20
1000d20c:	af00      	add	r7, sp, #0
1000d20e:	6078      	str	r0, [r7, #4]
	at_ble_encryption_request_t *enc_req;
	bool key_found = false;
1000d210:	230f      	movs	r3, #15
1000d212:	18fb      	adds	r3, r7, r3
1000d214:	2200      	movs	r2, #0
1000d216:	701a      	strb	r2, [r3, #0]
	bool device_found = false;
1000d218:	230e      	movs	r3, #14
1000d21a:	18fb      	adds	r3, r7, r3
1000d21c:	2200      	movs	r2, #0
1000d21e:	701a      	strb	r2, [r3, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;
1000d220:	687b      	ldr	r3, [r7, #4]
1000d222:	60bb      	str	r3, [r7, #8]

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d224:	230d      	movs	r3, #13
1000d226:	18fb      	adds	r3, r7, r3
1000d228:	2200      	movs	r2, #0
1000d22a:	701a      	strb	r2, [r3, #0]
1000d22c:	e04f      	b.n	1000d2ce <ble_encryption_request_handler+0xc6>
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d22e:	230d      	movs	r3, #13
1000d230:	18fb      	adds	r3, r7, r3
1000d232:	781a      	ldrb	r2, [r3, #0]
1000d234:	4995      	ldr	r1, [pc, #596]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d236:	1c13      	adds	r3, r2, #0
1000d238:	015b      	lsls	r3, r3, #5
1000d23a:	1a9b      	subs	r3, r3, r2
1000d23c:	009b      	lsls	r3, r3, #2
1000d23e:	18cb      	adds	r3, r1, r3
1000d240:	3308      	adds	r3, #8
1000d242:	881a      	ldrh	r2, [r3, #0]
1000d244:	68bb      	ldr	r3, [r7, #8]
1000d246:	881b      	ldrh	r3, [r3, #0]
1000d248:	429a      	cmp	r2, r3
1000d24a:	d139      	bne.n	1000d2c0 <ble_encryption_request_handler+0xb8>
1000d24c:	230d      	movs	r3, #13
1000d24e:	18fb      	adds	r3, r7, r3
1000d250:	781a      	ldrb	r2, [r3, #0]
1000d252:	498e      	ldr	r1, [pc, #568]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d254:	2058      	movs	r0, #88	; 0x58
1000d256:	1c13      	adds	r3, r2, #0
1000d258:	015b      	lsls	r3, r3, #5
1000d25a:	1a9b      	subs	r3, r3, r2
1000d25c:	009b      	lsls	r3, r3, #2
1000d25e:	18cb      	adds	r3, r1, r3
1000d260:	181b      	adds	r3, r3, r0
1000d262:	799b      	ldrb	r3, [r3, #6]
1000d264:	2b01      	cmp	r3, #1
1000d266:	d02b      	beq.n	1000d2c0 <ble_encryption_request_handler+0xb8>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
1000d268:	230d      	movs	r3, #13
1000d26a:	18fb      	adds	r3, r7, r3
1000d26c:	781a      	ldrb	r2, [r3, #0]
1000d26e:	4987      	ldr	r1, [pc, #540]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d270:	2058      	movs	r0, #88	; 0x58
1000d272:	1c13      	adds	r3, r2, #0
1000d274:	015b      	lsls	r3, r3, #5
1000d276:	1a9b      	subs	r3, r3, r2
1000d278:	009b      	lsls	r3, r3, #2
1000d27a:	18cb      	adds	r3, r1, r3
1000d27c:	181b      	adds	r3, r3, r0
1000d27e:	799b      	ldrb	r3, [r3, #6]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d280:	2b00      	cmp	r3, #0
1000d282:	d01d      	beq.n	1000d2c0 <ble_encryption_request_handler+0xb8>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
1000d284:	230e      	movs	r3, #14
1000d286:	18fb      	adds	r3, r7, r3
1000d288:	2201      	movs	r2, #1
1000d28a:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d28c:	230d      	movs	r3, #13
1000d28e:	18fb      	adds	r3, r7, r3
1000d290:	781a      	ldrb	r2, [r3, #0]
1000d292:	497e      	ldr	r1, [pc, #504]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d294:	2058      	movs	r0, #88	; 0x58
1000d296:	1c13      	adds	r3, r2, #0
1000d298:	015b      	lsls	r3, r3, #5
1000d29a:	1a9b      	subs	r3, r3, r2
1000d29c:	009b      	lsls	r3, r3, #2
1000d29e:	18cb      	adds	r3, r1, r3
1000d2a0:	181b      	adds	r3, r3, r0
1000d2a2:	2206      	movs	r2, #6
1000d2a4:	719a      	strb	r2, [r3, #6]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000d2a6:	4b7a      	ldr	r3, [pc, #488]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d2a8:	1c18      	adds	r0, r3, #0
1000d2aa:	4b7a      	ldr	r3, [pc, #488]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d2ac:	4798      	blx	r3
1000d2ae:	68bb      	ldr	r3, [r7, #8]
1000d2b0:	881b      	ldrh	r3, [r3, #0]
1000d2b2:	1c1a      	adds	r2, r3, #0
1000d2b4:	4b78      	ldr	r3, [pc, #480]	; (1000d498 <ble_encryption_request_handler+0x290>)
1000d2b6:	1c18      	adds	r0, r3, #0
1000d2b8:	1c11      	adds	r1, r2, #0
1000d2ba:	4b78      	ldr	r3, [pc, #480]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d2bc:	4798      	blx	r3
			break;
1000d2be:	e00b      	b.n	1000d2d8 <ble_encryption_request_handler+0xd0>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2c0:	230d      	movs	r3, #13
1000d2c2:	18fb      	adds	r3, r7, r3
1000d2c4:	781a      	ldrb	r2, [r3, #0]
1000d2c6:	230d      	movs	r3, #13
1000d2c8:	18fb      	adds	r3, r7, r3
1000d2ca:	3201      	adds	r2, #1
1000d2cc:	701a      	strb	r2, [r3, #0]
1000d2ce:	230d      	movs	r3, #13
1000d2d0:	18fb      	adds	r3, r7, r3
1000d2d2:	781b      	ldrb	r3, [r3, #0]
1000d2d4:	2b04      	cmp	r3, #4
1000d2d6:	d9aa      	bls.n	1000d22e <ble_encryption_request_handler+0x26>
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
			break;
		}
	}
	
	if (device_found)
1000d2d8:	230e      	movs	r3, #14
1000d2da:	18fb      	adds	r3, r7, r3
1000d2dc:	781b      	ldrb	r3, [r3, #0]
1000d2de:	2b00      	cmp	r3, #0
1000d2e0:	d073      	beq.n	1000d3ca <ble_encryption_request_handler+0x1c2>
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000d2e2:	4b6b      	ldr	r3, [pc, #428]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d2e4:	1c18      	adds	r0, r3, #0
1000d2e6:	4b6b      	ldr	r3, [pc, #428]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d2e8:	4798      	blx	r3
1000d2ea:	230d      	movs	r3, #13
1000d2ec:	18fb      	adds	r3, r7, r3
1000d2ee:	781a      	ldrb	r2, [r3, #0]
1000d2f0:	4966      	ldr	r1, [pc, #408]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d2f2:	2070      	movs	r0, #112	; 0x70
1000d2f4:	1c13      	adds	r3, r2, #0
1000d2f6:	015b      	lsls	r3, r3, #5
1000d2f8:	1a9b      	subs	r3, r3, r2
1000d2fa:	009b      	lsls	r3, r3, #2
1000d2fc:	18cb      	adds	r3, r1, r3
1000d2fe:	181b      	adds	r3, r3, r0
1000d300:	881b      	ldrh	r3, [r3, #0]
1000d302:	1c1a      	adds	r2, r3, #0
1000d304:	4b66      	ldr	r3, [pc, #408]	; (1000d4a0 <ble_encryption_request_handler+0x298>)
1000d306:	1c18      	adds	r0, r3, #0
1000d308:	1c11      	adds	r1, r2, #0
1000d30a:	4b64      	ldr	r3, [pc, #400]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d30c:	4798      	blx	r3
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000d30e:	4b60      	ldr	r3, [pc, #384]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d310:	1c18      	adds	r0, r3, #0
1000d312:	4b60      	ldr	r3, [pc, #384]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d314:	4798      	blx	r3
1000d316:	230d      	movs	r3, #13
1000d318:	18fb      	adds	r3, r7, r3
1000d31a:	781a      	ldrb	r2, [r3, #0]
1000d31c:	495b      	ldr	r1, [pc, #364]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d31e:	1c13      	adds	r3, r2, #0
1000d320:	015b      	lsls	r3, r3, #5
1000d322:	1a9b      	subs	r3, r3, r2
1000d324:	009b      	lsls	r3, r3, #2
1000d326:	18cb      	adds	r3, r1, r3
1000d328:	3320      	adds	r3, #32
1000d32a:	895b      	ldrh	r3, [r3, #10]
1000d32c:	1c1a      	adds	r2, r3, #0
1000d32e:	4b5d      	ldr	r3, [pc, #372]	; (1000d4a4 <ble_encryption_request_handler+0x29c>)
1000d330:	1c18      	adds	r0, r3, #0
1000d332:	1c11      	adds	r1, r2, #0
1000d334:	4b59      	ldr	r3, [pc, #356]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d336:	4798      	blx	r3
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000d338:	4b55      	ldr	r3, [pc, #340]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d33a:	1c18      	adds	r0, r3, #0
1000d33c:	4b55      	ldr	r3, [pc, #340]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d33e:	4798      	blx	r3
1000d340:	68bb      	ldr	r3, [r7, #8]
1000d342:	885b      	ldrh	r3, [r3, #2]
1000d344:	1c1a      	adds	r2, r3, #0
1000d346:	4b58      	ldr	r3, [pc, #352]	; (1000d4a8 <ble_encryption_request_handler+0x2a0>)
1000d348:	1c18      	adds	r0, r3, #0
1000d34a:	1c11      	adds	r1, r2, #0
1000d34c:	4b53      	ldr	r3, [pc, #332]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d34e:	4798      	blx	r3
		DBG_LOG_DEV("The index is %d",idx);
1000d350:	4b4f      	ldr	r3, [pc, #316]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d352:	1c18      	adds	r0, r3, #0
1000d354:	4b4f      	ldr	r3, [pc, #316]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d356:	4798      	blx	r3
1000d358:	230d      	movs	r3, #13
1000d35a:	18fb      	adds	r3, r7, r3
1000d35c:	781b      	ldrb	r3, [r3, #0]
1000d35e:	4a53      	ldr	r2, [pc, #332]	; (1000d4ac <ble_encryption_request_handler+0x2a4>)
1000d360:	1c10      	adds	r0, r2, #0
1000d362:	1c19      	adds	r1, r3, #0
1000d364:	4b4d      	ldr	r3, [pc, #308]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d366:	4798      	blx	r3
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d368:	230d      	movs	r3, #13
1000d36a:	18fb      	adds	r3, r7, r3
1000d36c:	781a      	ldrb	r2, [r3, #0]
1000d36e:	4947      	ldr	r1, [pc, #284]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d370:	2070      	movs	r0, #112	; 0x70
1000d372:	1c13      	adds	r3, r2, #0
1000d374:	015b      	lsls	r3, r3, #5
1000d376:	1a9b      	subs	r3, r3, r2
1000d378:	009b      	lsls	r3, r3, #2
1000d37a:	18cb      	adds	r3, r1, r3
1000d37c:	181b      	adds	r3, r3, r0
1000d37e:	881a      	ldrh	r2, [r3, #0]
1000d380:	68bb      	ldr	r3, [r7, #8]
1000d382:	885b      	ldrh	r3, [r3, #2]
1000d384:	429a      	cmp	r2, r3
1000d386:	d120      	bne.n	1000d3ca <ble_encryption_request_handler+0x1c2>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d388:	68bb      	ldr	r3, [r7, #8]
1000d38a:	1d19      	adds	r1, r3, #4
1000d38c:	230d      	movs	r3, #13
1000d38e:	18fb      	adds	r3, r7, r3
1000d390:	781a      	ldrb	r2, [r3, #0]
1000d392:	1c13      	adds	r3, r2, #0
1000d394:	015b      	lsls	r3, r3, #5
1000d396:	1a9b      	subs	r3, r3, r2
1000d398:	009b      	lsls	r3, r3, #2
1000d39a:	3370      	adds	r3, #112	; 0x70
1000d39c:	1c1a      	adds	r2, r3, #0
1000d39e:	4b3b      	ldr	r3, [pc, #236]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d3a0:	18d3      	adds	r3, r2, r3
1000d3a2:	3302      	adds	r3, #2
1000d3a4:	1c08      	adds	r0, r1, #0
1000d3a6:	1c19      	adds	r1, r3, #0
1000d3a8:	2208      	movs	r2, #8
1000d3aa:	4b41      	ldr	r3, [pc, #260]	; (1000d4b0 <ble_encryption_request_handler+0x2a8>)
1000d3ac:	4798      	blx	r3
1000d3ae:	1e03      	subs	r3, r0, #0
1000d3b0:	d10b      	bne.n	1000d3ca <ble_encryption_request_handler+0x1c2>
		{
			key_found = true;
1000d3b2:	230f      	movs	r3, #15
1000d3b4:	18fb      	adds	r3, r7, r3
1000d3b6:	2201      	movs	r2, #1
1000d3b8:	701a      	strb	r2, [r3, #0]
			DBG_LOG_DEV("ENC-Req: Key Found");
1000d3ba:	4b35      	ldr	r3, [pc, #212]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d3bc:	1c18      	adds	r0, r3, #0
1000d3be:	4b35      	ldr	r3, [pc, #212]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d3c0:	4798      	blx	r3
1000d3c2:	4b3c      	ldr	r3, [pc, #240]	; (1000d4b4 <ble_encryption_request_handler+0x2ac>)
1000d3c4:	1c18      	adds	r0, r3, #0
1000d3c6:	4b35      	ldr	r3, [pc, #212]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d3c8:	4798      	blx	r3
		}
	}
	
	
    if(key_found == false)
1000d3ca:	230f      	movs	r3, #15
1000d3cc:	18fb      	adds	r3, r7, r3
1000d3ce:	781b      	ldrb	r3, [r3, #0]
1000d3d0:	2201      	movs	r2, #1
1000d3d2:	4053      	eors	r3, r2
1000d3d4:	b2db      	uxtb	r3, r3
1000d3d6:	2b00      	cmp	r3, #0
1000d3d8:	d020      	beq.n	1000d41c <ble_encryption_request_handler+0x214>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d3da:	4b2d      	ldr	r3, [pc, #180]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d3dc:	1c18      	adds	r0, r3, #0
1000d3de:	4b2d      	ldr	r3, [pc, #180]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d3e0:	4798      	blx	r3
1000d3e2:	4b35      	ldr	r3, [pc, #212]	; (1000d4b8 <ble_encryption_request_handler+0x2b0>)
1000d3e4:	1c18      	adds	r0, r3, #0
1000d3e6:	4b2d      	ldr	r3, [pc, #180]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d3e8:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d3ea:	4b29      	ldr	r3, [pc, #164]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d3ec:	1c18      	adds	r0, r3, #0
1000d3ee:	4b29      	ldr	r3, [pc, #164]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d3f0:	4798      	blx	r3
1000d3f2:	4b32      	ldr	r3, [pc, #200]	; (1000d4bc <ble_encryption_request_handler+0x2b4>)
1000d3f4:	1c18      	adds	r0, r3, #0
1000d3f6:	4b29      	ldr	r3, [pc, #164]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d3f8:	4798      	blx	r3
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d3fa:	230d      	movs	r3, #13
1000d3fc:	18fb      	adds	r3, r7, r3
1000d3fe:	781a      	ldrb	r2, [r3, #0]
1000d400:	4922      	ldr	r1, [pc, #136]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d402:	1c13      	adds	r3, r2, #0
1000d404:	015b      	lsls	r3, r3, #5
1000d406:	1a9b      	subs	r3, r3, r2
1000d408:	009b      	lsls	r3, r3, #2
1000d40a:	18cb      	adds	r3, r1, r3
1000d40c:	3308      	adds	r3, #8
1000d40e:	881b      	ldrh	r3, [r3, #0]
1000d410:	1c18      	adds	r0, r3, #0
1000d412:	2105      	movs	r1, #5
1000d414:	4b2a      	ldr	r3, [pc, #168]	; (1000d4c0 <ble_encryption_request_handler+0x2b8>)
1000d416:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d418:	23e2      	movs	r3, #226	; 0xe2
1000d41a:	e032      	b.n	1000d482 <ble_encryption_request_handler+0x27a>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d41c:	68bb      	ldr	r3, [r7, #8]
1000d41e:	8818      	ldrh	r0, [r3, #0]
1000d420:	230d      	movs	r3, #13
1000d422:	18fb      	adds	r3, r7, r3
1000d424:	781a      	ldrb	r2, [r3, #0]
1000d426:	4919      	ldr	r1, [pc, #100]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d428:	1c13      	adds	r3, r2, #0
1000d42a:	015b      	lsls	r3, r3, #5
1000d42c:	1a9b      	subs	r3, r3, r2
1000d42e:	009b      	lsls	r3, r3, #2
1000d430:	18cb      	adds	r3, r1, r3
1000d432:	3310      	adds	r3, #16
1000d434:	7919      	ldrb	r1, [r3, #4]
1000d436:	230d      	movs	r3, #13
1000d438:	18fb      	adds	r3, r7, r3
1000d43a:	781a      	ldrb	r2, [r3, #0]
1000d43c:	1c13      	adds	r3, r2, #0
1000d43e:	015b      	lsls	r3, r3, #5
1000d440:	1a9b      	subs	r3, r3, r2
1000d442:	009b      	lsls	r3, r3, #2
1000d444:	3360      	adds	r3, #96	; 0x60
1000d446:	1c1a      	adds	r2, r3, #0
1000d448:	4b10      	ldr	r3, [pc, #64]	; (1000d48c <ble_encryption_request_handler+0x284>)
1000d44a:	18d4      	adds	r4, r2, r3
1000d44c:	230f      	movs	r3, #15
1000d44e:	18fb      	adds	r3, r7, r3
1000d450:	781b      	ldrb	r3, [r3, #0]
1000d452:	1c1a      	adds	r2, r3, #0
1000d454:	1c23      	adds	r3, r4, #0
1000d456:	4c1b      	ldr	r4, [pc, #108]	; (1000d4c4 <ble_encryption_request_handler+0x2bc>)
1000d458:	47a0      	blx	r4
1000d45a:	1e03      	subs	r3, r0, #0
1000d45c:	d008      	beq.n	1000d470 <ble_encryption_request_handler+0x268>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d45e:	4b0c      	ldr	r3, [pc, #48]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d460:	1c18      	adds	r0, r3, #0
1000d462:	4b0c      	ldr	r3, [pc, #48]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d464:	4798      	blx	r3
1000d466:	4b18      	ldr	r3, [pc, #96]	; (1000d4c8 <ble_encryption_request_handler+0x2c0>)
1000d468:	1c18      	adds	r0, r3, #0
1000d46a:	4b0c      	ldr	r3, [pc, #48]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d46c:	4798      	blx	r3
1000d46e:	e007      	b.n	1000d480 <ble_encryption_request_handler+0x278>
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000d470:	4b07      	ldr	r3, [pc, #28]	; (1000d490 <ble_encryption_request_handler+0x288>)
1000d472:	1c18      	adds	r0, r3, #0
1000d474:	4b07      	ldr	r3, [pc, #28]	; (1000d494 <ble_encryption_request_handler+0x28c>)
1000d476:	4798      	blx	r3
1000d478:	4b14      	ldr	r3, [pc, #80]	; (1000d4cc <ble_encryption_request_handler+0x2c4>)
1000d47a:	1c18      	adds	r0, r3, #0
1000d47c:	4b07      	ldr	r3, [pc, #28]	; (1000d49c <ble_encryption_request_handler+0x294>)
1000d47e:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
1000d480:	2300      	movs	r3, #0
}
1000d482:	1c18      	adds	r0, r3, #0
1000d484:	46bd      	mov	sp, r7
1000d486:	b005      	add	sp, #20
1000d488:	bd90      	pop	{r4, r7, pc}
1000d48a:	46c0      	nop			; (mov r8, r8)
1000d48c:	10016a2c 	.word	0x10016a2c
1000d490:	1001507c 	.word	0x1001507c
1000d494:	1001351d 	.word	0x1001351d
1000d498:	10015ad8 	.word	0x10015ad8
1000d49c:	100133fd 	.word	0x100133fd
1000d4a0:	10015b04 	.word	0x10015b04
1000d4a4:	10015b18 	.word	0x10015b18
1000d4a8:	10015b2c 	.word	0x10015b2c
1000d4ac:	10015b3c 	.word	0x10015b3c
1000d4b0:	100133bd 	.word	0x100133bd
1000d4b4:	10015b4c 	.word	0x10015b4c
1000d4b8:	10015b60 	.word	0x10015b60
1000d4bc:	10015b98 	.word	0x10015b98
1000d4c0:	1000fb91 	.word	0x1000fb91
1000d4c4:	100107d5 	.word	0x100107d5
1000d4c8:	10015bf0 	.word	0x10015bf0
1000d4cc:	10015c10 	.word	0x10015c10

1000d4d0 <ble_event_manager>:

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d4d0:	b580      	push	{r7, lr}
1000d4d2:	b08c      	sub	sp, #48	; 0x30
1000d4d4:	af00      	add	r7, sp, #0
1000d4d6:	1c02      	adds	r2, r0, #0
1000d4d8:	6039      	str	r1, [r7, #0]
1000d4da:	1dfb      	adds	r3, r7, #7
1000d4dc:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("\n\r[ble_event_manager]\n\rBLE-Event:%d", events);
1000d4de:	4bd2      	ldr	r3, [pc, #840]	; (1000d828 <ble_event_manager+0x358>)
1000d4e0:	1c18      	adds	r0, r3, #0
1000d4e2:	4bd2      	ldr	r3, [pc, #840]	; (1000d82c <ble_event_manager+0x35c>)
1000d4e4:	4798      	blx	r3
1000d4e6:	1dfb      	adds	r3, r7, #7
1000d4e8:	781b      	ldrb	r3, [r3, #0]
1000d4ea:	4ad1      	ldr	r2, [pc, #836]	; (1000d830 <ble_event_manager+0x360>)
1000d4ec:	1c10      	adds	r0, r2, #0
1000d4ee:	1c19      	adds	r1, r3, #0
1000d4f0:	4bd0      	ldr	r3, [pc, #832]	; (1000d834 <ble_event_manager+0x364>)
1000d4f2:	4798      	blx	r3
	switch(events)
1000d4f4:	1dfb      	adds	r3, r7, #7
1000d4f6:	781b      	ldrb	r3, [r3, #0]
1000d4f8:	2b3b      	cmp	r3, #59	; 0x3b
1000d4fa:	d900      	bls.n	1000d4fe <ble_event_manager+0x2e>
1000d4fc:	e1b0      	b.n	1000d860 <ble_event_manager+0x390>
1000d4fe:	009a      	lsls	r2, r3, #2
1000d500:	4bcd      	ldr	r3, [pc, #820]	; (1000d838 <ble_event_manager+0x368>)
1000d502:	18d3      	adds	r3, r2, r3
1000d504:	681b      	ldr	r3, [r3, #0]
1000d506:	469f      	mov	pc, r3
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d508:	232f      	movs	r3, #47	; 0x2f
1000d50a:	18fb      	adds	r3, r7, r3
1000d50c:	2200      	movs	r2, #0
1000d50e:	701a      	strb	r2, [r3, #0]
1000d510:	e026      	b.n	1000d560 <ble_event_manager+0x90>
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d512:	232f      	movs	r3, #47	; 0x2f
1000d514:	18fb      	adds	r3, r7, r3
1000d516:	781a      	ldrb	r2, [r3, #0]
1000d518:	4bc8      	ldr	r3, [pc, #800]	; (1000d83c <ble_event_manager+0x36c>)
1000d51a:	0092      	lsls	r2, r2, #2
1000d51c:	58d3      	ldr	r3, [r2, r3]
1000d51e:	2b00      	cmp	r3, #0
1000d520:	d017      	beq.n	1000d552 <ble_event_manager+0x82>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
1000d522:	232f      	movs	r3, #47	; 0x2f
1000d524:	18fb      	adds	r3, r7, r3
1000d526:	781a      	ldrb	r2, [r3, #0]
1000d528:	4bc4      	ldr	r3, [pc, #784]	; (1000d83c <ble_event_manager+0x36c>)
1000d52a:	0092      	lsls	r2, r2, #2
1000d52c:	58d3      	ldr	r3, [r2, r3]
1000d52e:	627b      	str	r3, [r7, #36]	; 0x24
				if(event_cb_fn[events] != NULL)
1000d530:	1dfb      	adds	r3, r7, #7
1000d532:	781b      	ldrb	r3, [r3, #0]
1000d534:	009b      	lsls	r3, r3, #2
1000d536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000d538:	18d3      	adds	r3, r2, r3
1000d53a:	681b      	ldr	r3, [r3, #0]
1000d53c:	2b00      	cmp	r3, #0
1000d53e:	d008      	beq.n	1000d552 <ble_event_manager+0x82>
				{
					event_cb_fn[events](event_params);
1000d540:	1dfb      	adds	r3, r7, #7
1000d542:	781b      	ldrb	r3, [r3, #0]
1000d544:	009b      	lsls	r3, r3, #2
1000d546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000d548:	18d3      	adds	r3, r2, r3
1000d54a:	681b      	ldr	r3, [r3, #0]
1000d54c:	683a      	ldr	r2, [r7, #0]
1000d54e:	1c10      	adds	r0, r2, #0
1000d550:	4798      	blx	r3
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d552:	232f      	movs	r3, #47	; 0x2f
1000d554:	18fb      	adds	r3, r7, r3
1000d556:	781a      	ldrb	r2, [r3, #0]
1000d558:	232f      	movs	r3, #47	; 0x2f
1000d55a:	18fb      	adds	r3, r7, r3
1000d55c:	3201      	adds	r2, #1
1000d55e:	701a      	strb	r2, [r3, #0]
1000d560:	232f      	movs	r3, #47	; 0x2f
1000d562:	18fb      	adds	r3, r7, r3
1000d564:	781b      	ldrb	r3, [r3, #0]
1000d566:	2b04      	cmp	r3, #4
1000d568:	d9d3      	bls.n	1000d512 <ble_event_manager+0x42>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d56a:	e18d      	b.n	1000d888 <ble_event_manager+0x3b8>
	case AT_BLE_CHARACTERISTIC_WRITE_RESPONSE:
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
1000d56c:	1dfb      	adds	r3, r7, #7
1000d56e:	1dfa      	adds	r2, r7, #7
1000d570:	7812      	ldrb	r2, [r2, #0]
1000d572:	3a13      	subs	r2, #19
1000d574:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d576:	232e      	movs	r3, #46	; 0x2e
1000d578:	18fb      	adds	r3, r7, r3
1000d57a:	2200      	movs	r2, #0
1000d57c:	701a      	strb	r2, [r3, #0]
1000d57e:	e026      	b.n	1000d5ce <ble_event_manager+0xfe>
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d580:	232e      	movs	r3, #46	; 0x2e
1000d582:	18fb      	adds	r3, r7, r3
1000d584:	781a      	ldrb	r2, [r3, #0]
1000d586:	4bae      	ldr	r3, [pc, #696]	; (1000d840 <ble_event_manager+0x370>)
1000d588:	0092      	lsls	r2, r2, #2
1000d58a:	58d3      	ldr	r3, [r2, r3]
1000d58c:	2b00      	cmp	r3, #0
1000d58e:	d017      	beq.n	1000d5c0 <ble_event_manager+0xf0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
1000d590:	232e      	movs	r3, #46	; 0x2e
1000d592:	18fb      	adds	r3, r7, r3
1000d594:	781a      	ldrb	r2, [r3, #0]
1000d596:	4baa      	ldr	r3, [pc, #680]	; (1000d840 <ble_event_manager+0x370>)
1000d598:	0092      	lsls	r2, r2, #2
1000d59a:	58d3      	ldr	r3, [r2, r3]
1000d59c:	623b      	str	r3, [r7, #32]
				if(event_cb_fn[events] != NULL)
1000d59e:	1dfb      	adds	r3, r7, #7
1000d5a0:	781b      	ldrb	r3, [r3, #0]
1000d5a2:	009b      	lsls	r3, r3, #2
1000d5a4:	6a3a      	ldr	r2, [r7, #32]
1000d5a6:	18d3      	adds	r3, r2, r3
1000d5a8:	681b      	ldr	r3, [r3, #0]
1000d5aa:	2b00      	cmp	r3, #0
1000d5ac:	d008      	beq.n	1000d5c0 <ble_event_manager+0xf0>
				{
					event_cb_fn[events](event_params);
1000d5ae:	1dfb      	adds	r3, r7, #7
1000d5b0:	781b      	ldrb	r3, [r3, #0]
1000d5b2:	009b      	lsls	r3, r3, #2
1000d5b4:	6a3a      	ldr	r2, [r7, #32]
1000d5b6:	18d3      	adds	r3, r2, r3
1000d5b8:	681b      	ldr	r3, [r3, #0]
1000d5ba:	683a      	ldr	r2, [r7, #0]
1000d5bc:	1c10      	adds	r0, r2, #0
1000d5be:	4798      	blx	r3
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d5c0:	232e      	movs	r3, #46	; 0x2e
1000d5c2:	18fb      	adds	r3, r7, r3
1000d5c4:	781a      	ldrb	r2, [r3, #0]
1000d5c6:	232e      	movs	r3, #46	; 0x2e
1000d5c8:	18fb      	adds	r3, r7, r3
1000d5ca:	3201      	adds	r2, #1
1000d5cc:	701a      	strb	r2, [r3, #0]
1000d5ce:	232e      	movs	r3, #46	; 0x2e
1000d5d0:	18fb      	adds	r3, r7, r3
1000d5d2:	781b      	ldrb	r3, [r3, #0]
1000d5d4:	2b04      	cmp	r3, #4
1000d5d6:	d9d3      	bls.n	1000d580 <ble_event_manager+0xb0>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d5d8:	e156      	b.n	1000d888 <ble_event_manager+0x3b8>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000d5da:	1dfb      	adds	r3, r7, #7
1000d5dc:	1dfa      	adds	r2, r7, #7
1000d5de:	7812      	ldrb	r2, [r2, #0]
1000d5e0:	3a1d      	subs	r2, #29
1000d5e2:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("\n\r[ble_event_manager]\n\rGATT_Server Event:%d", events);
1000d5e4:	4b90      	ldr	r3, [pc, #576]	; (1000d828 <ble_event_manager+0x358>)
1000d5e6:	1c18      	adds	r0, r3, #0
1000d5e8:	4b90      	ldr	r3, [pc, #576]	; (1000d82c <ble_event_manager+0x35c>)
1000d5ea:	4798      	blx	r3
1000d5ec:	1dfb      	adds	r3, r7, #7
1000d5ee:	781b      	ldrb	r3, [r3, #0]
1000d5f0:	4a94      	ldr	r2, [pc, #592]	; (1000d844 <ble_event_manager+0x374>)
1000d5f2:	1c10      	adds	r0, r2, #0
1000d5f4:	1c19      	adds	r1, r3, #0
1000d5f6:	4b8f      	ldr	r3, [pc, #572]	; (1000d834 <ble_event_manager+0x364>)
1000d5f8:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d5fa:	232d      	movs	r3, #45	; 0x2d
1000d5fc:	18fb      	adds	r3, r7, r3
1000d5fe:	2200      	movs	r2, #0
1000d600:	701a      	strb	r2, [r3, #0]
1000d602:	e026      	b.n	1000d652 <ble_event_manager+0x182>
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d604:	232d      	movs	r3, #45	; 0x2d
1000d606:	18fb      	adds	r3, r7, r3
1000d608:	781a      	ldrb	r2, [r3, #0]
1000d60a:	4b8f      	ldr	r3, [pc, #572]	; (1000d848 <ble_event_manager+0x378>)
1000d60c:	0092      	lsls	r2, r2, #2
1000d60e:	58d3      	ldr	r3, [r2, r3]
1000d610:	2b00      	cmp	r3, #0
1000d612:	d017      	beq.n	1000d644 <ble_event_manager+0x174>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
1000d614:	232d      	movs	r3, #45	; 0x2d
1000d616:	18fb      	adds	r3, r7, r3
1000d618:	781a      	ldrb	r2, [r3, #0]
1000d61a:	4b8b      	ldr	r3, [pc, #556]	; (1000d848 <ble_event_manager+0x378>)
1000d61c:	0092      	lsls	r2, r2, #2
1000d61e:	58d3      	ldr	r3, [r2, r3]
1000d620:	61fb      	str	r3, [r7, #28]
				if(event_cb_fn[events] != NULL)
1000d622:	1dfb      	adds	r3, r7, #7
1000d624:	781b      	ldrb	r3, [r3, #0]
1000d626:	009b      	lsls	r3, r3, #2
1000d628:	69fa      	ldr	r2, [r7, #28]
1000d62a:	18d3      	adds	r3, r2, r3
1000d62c:	681b      	ldr	r3, [r3, #0]
1000d62e:	2b00      	cmp	r3, #0
1000d630:	d008      	beq.n	1000d644 <ble_event_manager+0x174>
				{
					event_cb_fn[events](event_params);
1000d632:	1dfb      	adds	r3, r7, #7
1000d634:	781b      	ldrb	r3, [r3, #0]
1000d636:	009b      	lsls	r3, r3, #2
1000d638:	69fa      	ldr	r2, [r7, #28]
1000d63a:	18d3      	adds	r3, r2, r3
1000d63c:	681b      	ldr	r3, [r3, #0]
1000d63e:	683a      	ldr	r2, [r7, #0]
1000d640:	1c10      	adds	r0, r2, #0
1000d642:	4798      	blx	r3
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("\n\r[ble_event_manager]\n\rGATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d644:	232d      	movs	r3, #45	; 0x2d
1000d646:	18fb      	adds	r3, r7, r3
1000d648:	781a      	ldrb	r2, [r3, #0]
1000d64a:	232d      	movs	r3, #45	; 0x2d
1000d64c:	18fb      	adds	r3, r7, r3
1000d64e:	3201      	adds	r2, #1
1000d650:	701a      	strb	r2, [r3, #0]
1000d652:	232d      	movs	r3, #45	; 0x2d
1000d654:	18fb      	adds	r3, r7, r3
1000d656:	781b      	ldrb	r3, [r3, #0]
1000d658:	2b04      	cmp	r3, #4
1000d65a:	d9d3      	bls.n	1000d604 <ble_event_manager+0x134>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d65c:	e114      	b.n	1000d888 <ble_event_manager+0x3b8>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d65e:	1dfb      	adds	r3, r7, #7
1000d660:	1dfa      	adds	r2, r7, #7
1000d662:	7812      	ldrb	r2, [r2, #0]
1000d664:	3a27      	subs	r2, #39	; 0x27
1000d666:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
1000d668:	232c      	movs	r3, #44	; 0x2c
1000d66a:	18fb      	adds	r3, r7, r3
1000d66c:	2200      	movs	r2, #0
1000d66e:	701a      	strb	r2, [r3, #0]
1000d670:	e026      	b.n	1000d6c0 <ble_event_manager+0x1f0>
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d672:	232c      	movs	r3, #44	; 0x2c
1000d674:	18fb      	adds	r3, r7, r3
1000d676:	781a      	ldrb	r2, [r3, #0]
1000d678:	4b74      	ldr	r3, [pc, #464]	; (1000d84c <ble_event_manager+0x37c>)
1000d67a:	0092      	lsls	r2, r2, #2
1000d67c:	58d3      	ldr	r3, [r2, r3]
1000d67e:	2b00      	cmp	r3, #0
1000d680:	d017      	beq.n	1000d6b2 <ble_event_manager+0x1e2>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
1000d682:	232c      	movs	r3, #44	; 0x2c
1000d684:	18fb      	adds	r3, r7, r3
1000d686:	781a      	ldrb	r2, [r3, #0]
1000d688:	4b70      	ldr	r3, [pc, #448]	; (1000d84c <ble_event_manager+0x37c>)
1000d68a:	0092      	lsls	r2, r2, #2
1000d68c:	58d3      	ldr	r3, [r2, r3]
1000d68e:	61bb      	str	r3, [r7, #24]
				if(event_cb_fn[events] != NULL)
1000d690:	1dfb      	adds	r3, r7, #7
1000d692:	781b      	ldrb	r3, [r3, #0]
1000d694:	009b      	lsls	r3, r3, #2
1000d696:	69ba      	ldr	r2, [r7, #24]
1000d698:	18d3      	adds	r3, r2, r3
1000d69a:	681b      	ldr	r3, [r3, #0]
1000d69c:	2b00      	cmp	r3, #0
1000d69e:	d008      	beq.n	1000d6b2 <ble_event_manager+0x1e2>
				{
					event_cb_fn[events](event_params);
1000d6a0:	1dfb      	adds	r3, r7, #7
1000d6a2:	781b      	ldrb	r3, [r3, #0]
1000d6a4:	009b      	lsls	r3, r3, #2
1000d6a6:	69ba      	ldr	r2, [r7, #24]
1000d6a8:	18d3      	adds	r3, r2, r3
1000d6aa:	681b      	ldr	r3, [r3, #0]
1000d6ac:	683a      	ldr	r2, [r7, #0]
1000d6ae:	1c10      	adds	r0, r2, #0
1000d6b0:	4798      	blx	r3
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
1000d6b2:	232c      	movs	r3, #44	; 0x2c
1000d6b4:	18fb      	adds	r3, r7, r3
1000d6b6:	781a      	ldrb	r2, [r3, #0]
1000d6b8:	232c      	movs	r3, #44	; 0x2c
1000d6ba:	18fb      	adds	r3, r7, r3
1000d6bc:	3201      	adds	r2, #1
1000d6be:	701a      	strb	r2, [r3, #0]
1000d6c0:	232c      	movs	r3, #44	; 0x2c
1000d6c2:	18fb      	adds	r3, r7, r3
1000d6c4:	781b      	ldrb	r3, [r3, #0]
1000d6c6:	2b00      	cmp	r3, #0
1000d6c8:	d0d3      	beq.n	1000d672 <ble_event_manager+0x1a2>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d6ca:	e0dd      	b.n	1000d888 <ble_event_manager+0x3b8>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d6cc:	1dfb      	adds	r3, r7, #7
1000d6ce:	1dfa      	adds	r2, r7, #7
1000d6d0:	7812      	ldrb	r2, [r2, #0]
1000d6d2:	3a2d      	subs	r2, #45	; 0x2d
1000d6d4:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1000d6d6:	232b      	movs	r3, #43	; 0x2b
1000d6d8:	18fb      	adds	r3, r7, r3
1000d6da:	2200      	movs	r2, #0
1000d6dc:	701a      	strb	r2, [r3, #0]
1000d6de:	e026      	b.n	1000d72e <ble_event_manager+0x25e>
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d6e0:	232b      	movs	r3, #43	; 0x2b
1000d6e2:	18fb      	adds	r3, r7, r3
1000d6e4:	781a      	ldrb	r2, [r3, #0]
1000d6e6:	4b5a      	ldr	r3, [pc, #360]	; (1000d850 <ble_event_manager+0x380>)
1000d6e8:	0092      	lsls	r2, r2, #2
1000d6ea:	58d3      	ldr	r3, [r2, r3]
1000d6ec:	2b00      	cmp	r3, #0
1000d6ee:	d017      	beq.n	1000d720 <ble_event_manager+0x250>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
1000d6f0:	232b      	movs	r3, #43	; 0x2b
1000d6f2:	18fb      	adds	r3, r7, r3
1000d6f4:	781a      	ldrb	r2, [r3, #0]
1000d6f6:	4b56      	ldr	r3, [pc, #344]	; (1000d850 <ble_event_manager+0x380>)
1000d6f8:	0092      	lsls	r2, r2, #2
1000d6fa:	58d3      	ldr	r3, [r2, r3]
1000d6fc:	617b      	str	r3, [r7, #20]
				if(event_cb_fn[events] != NULL)
1000d6fe:	1dfb      	adds	r3, r7, #7
1000d700:	781b      	ldrb	r3, [r3, #0]
1000d702:	009b      	lsls	r3, r3, #2
1000d704:	697a      	ldr	r2, [r7, #20]
1000d706:	18d3      	adds	r3, r2, r3
1000d708:	681b      	ldr	r3, [r3, #0]
1000d70a:	2b00      	cmp	r3, #0
1000d70c:	d008      	beq.n	1000d720 <ble_event_manager+0x250>
				{
					event_cb_fn[events](event_params);
1000d70e:	1dfb      	adds	r3, r7, #7
1000d710:	781b      	ldrb	r3, [r3, #0]
1000d712:	009b      	lsls	r3, r3, #2
1000d714:	697a      	ldr	r2, [r7, #20]
1000d716:	18d3      	adds	r3, r2, r3
1000d718:	681b      	ldr	r3, [r3, #0]
1000d71a:	683a      	ldr	r2, [r7, #0]
1000d71c:	1c10      	adds	r0, r2, #0
1000d71e:	4798      	blx	r3
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
1000d720:	232b      	movs	r3, #43	; 0x2b
1000d722:	18fb      	adds	r3, r7, r3
1000d724:	781a      	ldrb	r2, [r3, #0]
1000d726:	232b      	movs	r3, #43	; 0x2b
1000d728:	18fb      	adds	r3, r7, r3
1000d72a:	3201      	adds	r2, #1
1000d72c:	701a      	strb	r2, [r3, #0]
1000d72e:	232b      	movs	r3, #43	; 0x2b
1000d730:	18fb      	adds	r3, r7, r3
1000d732:	781b      	ldrb	r3, [r3, #0]
1000d734:	2b00      	cmp	r3, #0
1000d736:	d0d3      	beq.n	1000d6e0 <ble_event_manager+0x210>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d738:	e0a6      	b.n	1000d888 <ble_event_manager+0x3b8>
	
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
1000d73a:	1dfb      	adds	r3, r7, #7
1000d73c:	1dfa      	adds	r2, r7, #7
1000d73e:	7812      	ldrb	r2, [r2, #0]
1000d740:	3a36      	subs	r2, #54	; 0x36
1000d742:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d744:	232a      	movs	r3, #42	; 0x2a
1000d746:	18fb      	adds	r3, r7, r3
1000d748:	2200      	movs	r2, #0
1000d74a:	701a      	strb	r2, [r3, #0]
1000d74c:	e026      	b.n	1000d79c <ble_event_manager+0x2cc>
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d74e:	232a      	movs	r3, #42	; 0x2a
1000d750:	18fb      	adds	r3, r7, r3
1000d752:	781a      	ldrb	r2, [r3, #0]
1000d754:	4b3f      	ldr	r3, [pc, #252]	; (1000d854 <ble_event_manager+0x384>)
1000d756:	0092      	lsls	r2, r2, #2
1000d758:	58d3      	ldr	r3, [r2, r3]
1000d75a:	2b00      	cmp	r3, #0
1000d75c:	d017      	beq.n	1000d78e <ble_event_manager+0x2be>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
1000d75e:	232a      	movs	r3, #42	; 0x2a
1000d760:	18fb      	adds	r3, r7, r3
1000d762:	781a      	ldrb	r2, [r3, #0]
1000d764:	4b3b      	ldr	r3, [pc, #236]	; (1000d854 <ble_event_manager+0x384>)
1000d766:	0092      	lsls	r2, r2, #2
1000d768:	58d3      	ldr	r3, [r2, r3]
1000d76a:	613b      	str	r3, [r7, #16]
				if(event_cb_fn[events] != NULL)
1000d76c:	1dfb      	adds	r3, r7, #7
1000d76e:	781b      	ldrb	r3, [r3, #0]
1000d770:	009b      	lsls	r3, r3, #2
1000d772:	693a      	ldr	r2, [r7, #16]
1000d774:	18d3      	adds	r3, r2, r3
1000d776:	681b      	ldr	r3, [r3, #0]
1000d778:	2b00      	cmp	r3, #0
1000d77a:	d008      	beq.n	1000d78e <ble_event_manager+0x2be>
				{
					event_cb_fn[events](event_params);
1000d77c:	1dfb      	adds	r3, r7, #7
1000d77e:	781b      	ldrb	r3, [r3, #0]
1000d780:	009b      	lsls	r3, r3, #2
1000d782:	693a      	ldr	r2, [r7, #16]
1000d784:	18d3      	adds	r3, r2, r3
1000d786:	681b      	ldr	r3, [r3, #0]
1000d788:	683a      	ldr	r2, [r7, #0]
1000d78a:	1c10      	adds	r0, r2, #0
1000d78c:	4798      	blx	r3
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d78e:	232a      	movs	r3, #42	; 0x2a
1000d790:	18fb      	adds	r3, r7, r3
1000d792:	781a      	ldrb	r2, [r3, #0]
1000d794:	232a      	movs	r3, #42	; 0x2a
1000d796:	18fb      	adds	r3, r7, r3
1000d798:	3201      	adds	r2, #1
1000d79a:	701a      	strb	r2, [r3, #0]
1000d79c:	232a      	movs	r3, #42	; 0x2a
1000d79e:	18fb      	adds	r3, r7, r3
1000d7a0:	781b      	ldrb	r3, [r3, #0]
1000d7a2:	2b04      	cmp	r3, #4
1000d7a4:	d9d3      	bls.n	1000d74e <ble_event_manager+0x27e>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d7a6:	e06f      	b.n	1000d888 <ble_event_manager+0x3b8>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d7a8:	1dfb      	adds	r3, r7, #7
1000d7aa:	1dfa      	adds	r2, r7, #7
1000d7ac:	7812      	ldrb	r2, [r2, #0]
1000d7ae:	3a38      	subs	r2, #56	; 0x38
1000d7b0:	701a      	strb	r2, [r3, #0]
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
1000d7b2:	2329      	movs	r3, #41	; 0x29
1000d7b4:	18fb      	adds	r3, r7, r3
1000d7b6:	2200      	movs	r2, #0
1000d7b8:	701a      	strb	r2, [r3, #0]
1000d7ba:	e026      	b.n	1000d80a <ble_event_manager+0x33a>
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d7bc:	2329      	movs	r3, #41	; 0x29
1000d7be:	18fb      	adds	r3, r7, r3
1000d7c0:	781a      	ldrb	r2, [r3, #0]
1000d7c2:	4b25      	ldr	r3, [pc, #148]	; (1000d858 <ble_event_manager+0x388>)
1000d7c4:	0092      	lsls	r2, r2, #2
1000d7c6:	58d3      	ldr	r3, [r2, r3]
1000d7c8:	2b00      	cmp	r3, #0
1000d7ca:	d017      	beq.n	1000d7fc <ble_event_manager+0x32c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
1000d7cc:	2329      	movs	r3, #41	; 0x29
1000d7ce:	18fb      	adds	r3, r7, r3
1000d7d0:	781a      	ldrb	r2, [r3, #0]
1000d7d2:	4b21      	ldr	r3, [pc, #132]	; (1000d858 <ble_event_manager+0x388>)
1000d7d4:	0092      	lsls	r2, r2, #2
1000d7d6:	58d3      	ldr	r3, [r2, r3]
1000d7d8:	60fb      	str	r3, [r7, #12]
				if(event_cb_fn[events] != NULL)
1000d7da:	1dfb      	adds	r3, r7, #7
1000d7dc:	781b      	ldrb	r3, [r3, #0]
1000d7de:	009b      	lsls	r3, r3, #2
1000d7e0:	68fa      	ldr	r2, [r7, #12]
1000d7e2:	18d3      	adds	r3, r2, r3
1000d7e4:	681b      	ldr	r3, [r3, #0]
1000d7e6:	2b00      	cmp	r3, #0
1000d7e8:	d008      	beq.n	1000d7fc <ble_event_manager+0x32c>
				{
					event_cb_fn[events](event_params);
1000d7ea:	1dfb      	adds	r3, r7, #7
1000d7ec:	781b      	ldrb	r3, [r3, #0]
1000d7ee:	009b      	lsls	r3, r3, #2
1000d7f0:	68fa      	ldr	r2, [r7, #12]
1000d7f2:	18d3      	adds	r3, r2, r3
1000d7f4:	681b      	ldr	r3, [r3, #0]
1000d7f6:	683a      	ldr	r2, [r7, #0]
1000d7f8:	1c10      	adds	r0, r2, #0
1000d7fa:	4798      	blx	r3
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
1000d7fc:	2329      	movs	r3, #41	; 0x29
1000d7fe:	18fb      	adds	r3, r7, r3
1000d800:	781a      	ldrb	r2, [r3, #0]
1000d802:	2329      	movs	r3, #41	; 0x29
1000d804:	18fb      	adds	r3, r7, r3
1000d806:	3201      	adds	r2, #1
1000d808:	701a      	strb	r2, [r3, #0]
1000d80a:	2329      	movs	r3, #41	; 0x29
1000d80c:	18fb      	adds	r3, r7, r3
1000d80e:	781b      	ldrb	r3, [r3, #0]
1000d810:	2b00      	cmp	r3, #0
1000d812:	d0d3      	beq.n	1000d7bc <ble_event_manager+0x2ec>
					event_cb_fn[events](event_params);
				}
			}
		}
	}
	break;
1000d814:	e038      	b.n	1000d888 <ble_event_manager+0x3b8>

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d816:	4b11      	ldr	r3, [pc, #68]	; (1000d85c <ble_event_manager+0x38c>)
1000d818:	681b      	ldr	r3, [r3, #0]
1000d81a:	2b00      	cmp	r3, #0
1000d81c:	d003      	beq.n	1000d826 <ble_event_manager+0x356>
			ble_user_event_cb();
1000d81e:	4b0f      	ldr	r3, [pc, #60]	; (1000d85c <ble_event_manager+0x38c>)
1000d820:	681b      	ldr	r3, [r3, #0]
1000d822:	4798      	blx	r3
		}
	}
	break;
1000d824:	e030      	b.n	1000d888 <ble_event_manager+0x3b8>
1000d826:	e02f      	b.n	1000d888 <ble_event_manager+0x3b8>
1000d828:	1001507c 	.word	0x1001507c
1000d82c:	1001351d 	.word	0x1001351d
1000d830:	10015c2c 	.word	0x10015c2c
1000d834:	100133fd 	.word	0x100133fd
1000d838:	10015f28 	.word	0x10015f28
1000d83c:	10016cb0 	.word	0x10016cb0
1000d840:	10016cc4 	.word	0x10016cc4
1000d844:	10015c50 	.word	0x10015c50
1000d848:	10016a18 	.word	0x10016a18
1000d84c:	10016cfc 	.word	0x10016cfc
1000d850:	10016a14 	.word	0x10016a14
1000d854:	10016c9c 	.word	0x10016c9c
1000d858:	10017240 	.word	0x10017240
1000d85c:	100166dc 	.word	0x100166dc

	default:
	{
		DBG_LOG_DEV("\n\r[ble_event_manager]\n\rBLE-Manager:Unknown Event=0x%X", events);
1000d860:	4b0b      	ldr	r3, [pc, #44]	; (1000d890 <ble_event_manager+0x3c0>)
1000d862:	1c18      	adds	r0, r3, #0
1000d864:	4b0b      	ldr	r3, [pc, #44]	; (1000d894 <ble_event_manager+0x3c4>)
1000d866:	4798      	blx	r3
1000d868:	1dfb      	adds	r3, r7, #7
1000d86a:	781b      	ldrb	r3, [r3, #0]
1000d86c:	4a0a      	ldr	r2, [pc, #40]	; (1000d898 <ble_event_manager+0x3c8>)
1000d86e:	1c10      	adds	r0, r2, #0
1000d870:	1c19      	adds	r1, r3, #0
1000d872:	4b0a      	ldr	r3, [pc, #40]	; (1000d89c <ble_event_manager+0x3cc>)
1000d874:	4798      	blx	r3
		DBG_LOG("\r\n");
1000d876:	4b06      	ldr	r3, [pc, #24]	; (1000d890 <ble_event_manager+0x3c0>)
1000d878:	1c18      	adds	r0, r3, #0
1000d87a:	4b06      	ldr	r3, [pc, #24]	; (1000d894 <ble_event_manager+0x3c4>)
1000d87c:	4798      	blx	r3
1000d87e:	4b04      	ldr	r3, [pc, #16]	; (1000d890 <ble_event_manager+0x3c0>)
1000d880:	1c18      	adds	r0, r3, #0
1000d882:	4b04      	ldr	r3, [pc, #16]	; (1000d894 <ble_event_manager+0x3c4>)
1000d884:	4798      	blx	r3
	}
	break;		
1000d886:	46c0      	nop			; (mov r8, r8)
	}
}
1000d888:	46bd      	mov	sp, r7
1000d88a:	b00c      	add	sp, #48	; 0x30
1000d88c:	bd80      	pop	{r7, pc}
1000d88e:	46c0      	nop			; (mov r8, r8)
1000d890:	1001507c 	.word	0x1001507c
1000d894:	1001351d 	.word	0x1001351d
1000d898:	10015c7c 	.word	0x10015c7c
1000d89c:	100133fd 	.word	0x100133fd

1000d8a0 <ble_advertisement_data_set>:

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d8a0:	b590      	push	{r4, r7, lr}
1000d8a2:	b097      	sub	sp, #92	; 0x5c
1000d8a4:	af00      	add	r7, sp, #0
	uint8_t adv_buf[AT_BLE_ADV_MAX_SIZE];
	uint8_t scn_resp[AT_BLE_ADV_MAX_SIZE];
	adv_element_container_t adv_data_element = {0, NULL};
1000d8a6:	230c      	movs	r3, #12
1000d8a8:	18fb      	adds	r3, r7, r3
1000d8aa:	2200      	movs	r2, #0
1000d8ac:	701a      	strb	r2, [r3, #0]
1000d8ae:	230c      	movs	r3, #12
1000d8b0:	18fb      	adds	r3, r7, r3
1000d8b2:	2200      	movs	r2, #0
1000d8b4:	605a      	str	r2, [r3, #4]
	scan_resp_element_t scan_resp_data_element = {0, NULL};
1000d8b6:	1d3b      	adds	r3, r7, #4
1000d8b8:	2200      	movs	r2, #0
1000d8ba:	701a      	strb	r2, [r3, #0]
1000d8bc:	1d3b      	adds	r3, r7, #4
1000d8be:	2200      	movs	r2, #0
1000d8c0:	605a      	str	r2, [r3, #4]
	adv_data_element.adv_ptr = adv_buf;
1000d8c2:	230c      	movs	r3, #12
1000d8c4:	18fb      	adds	r3, r7, r3
1000d8c6:	2234      	movs	r2, #52	; 0x34
1000d8c8:	18ba      	adds	r2, r7, r2
1000d8ca:	605a      	str	r2, [r3, #4]
	scan_resp_data_element.scn_ptr = scn_resp;
1000d8cc:	1d3b      	adds	r3, r7, #4
1000d8ce:	2214      	movs	r2, #20
1000d8d0:	18ba      	adds	r2, r7, r2
1000d8d2:	605a      	str	r2, [r3, #4]
	at_ble_status_t status = AT_BLE_SUCCESS;
1000d8d4:	2356      	movs	r3, #86	; 0x56
1000d8d6:	18fb      	adds	r3, r7, r3
1000d8d8:	2200      	movs	r2, #0
1000d8da:	701a      	strb	r2, [r3, #0]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	DBG_LOG_DEV("\n\r[ble_advertisement_data_set]\n\rBLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE");
1000d8dc:	4b89      	ldr	r3, [pc, #548]	; (1000db04 <ble_advertisement_data_set+0x264>)
1000d8de:	1c18      	adds	r0, r3, #0
1000d8e0:	4b89      	ldr	r3, [pc, #548]	; (1000db08 <ble_advertisement_data_set+0x268>)
1000d8e2:	4798      	blx	r3
1000d8e4:	4b89      	ldr	r3, [pc, #548]	; (1000db0c <ble_advertisement_data_set+0x26c>)
1000d8e6:	1c18      	adds	r0, r3, #0
1000d8e8:	4b89      	ldr	r3, [pc, #548]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000d8ea:	4798      	blx	r3
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
1000d8ec:	230c      	movs	r3, #12
1000d8ee:	18fb      	adds	r3, r7, r3
1000d8f0:	781b      	ldrb	r3, [r3, #0]
1000d8f2:	2b11      	cmp	r3, #17
1000d8f4:	d83c      	bhi.n	1000d970 <ble_advertisement_data_set+0xd0>
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d8f6:	230c      	movs	r3, #12
1000d8f8:	18fb      	adds	r3, r7, r3
1000d8fa:	781b      	ldrb	r3, [r3, #0]
1000d8fc:	1c5a      	adds	r2, r3, #1
1000d8fe:	b2d1      	uxtb	r1, r2
1000d900:	220c      	movs	r2, #12
1000d902:	18ba      	adds	r2, r7, r2
1000d904:	7011      	strb	r1, [r2, #0]
1000d906:	1c1a      	adds	r2, r3, #0
1000d908:	2334      	movs	r3, #52	; 0x34
1000d90a:	18fb      	adds	r3, r7, r3
1000d90c:	210a      	movs	r1, #10
1000d90e:	5499      	strb	r1, [r3, r2]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d910:	230c      	movs	r3, #12
1000d912:	18fb      	adds	r3, r7, r3
1000d914:	781b      	ldrb	r3, [r3, #0]
1000d916:	1c5a      	adds	r2, r3, #1
1000d918:	b2d1      	uxtb	r1, r2
1000d91a:	220c      	movs	r2, #12
1000d91c:	18ba      	adds	r2, r7, r2
1000d91e:	7011      	strb	r1, [r2, #0]
1000d920:	1c1a      	adds	r2, r3, #0
1000d922:	2334      	movs	r3, #52	; 0x34
1000d924:	18fb      	adds	r3, r7, r3
1000d926:	2109      	movs	r1, #9
1000d928:	5499      	strb	r1, [r3, r2]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d92a:	230c      	movs	r3, #12
1000d92c:	18fb      	adds	r3, r7, r3
1000d92e:	781b      	ldrb	r3, [r3, #0]
1000d930:	1c1a      	adds	r2, r3, #0
1000d932:	2334      	movs	r3, #52	; 0x34
1000d934:	18fb      	adds	r3, r7, r3
1000d936:	189a      	adds	r2, r3, r2
1000d938:	4b76      	ldr	r3, [pc, #472]	; (1000db14 <ble_advertisement_data_set+0x274>)
1000d93a:	1c10      	adds	r0, r2, #0
1000d93c:	1c19      	adds	r1, r3, #0
1000d93e:	2209      	movs	r2, #9
1000d940:	4b75      	ldr	r3, [pc, #468]	; (1000db18 <ble_advertisement_data_set+0x278>)
1000d942:	4798      	blx	r3
		adv_data_element.len += BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH;
1000d944:	230c      	movs	r3, #12
1000d946:	18fb      	adds	r3, r7, r3
1000d948:	781b      	ldrb	r3, [r3, #0]
1000d94a:	3309      	adds	r3, #9
1000d94c:	b2da      	uxtb	r2, r3
1000d94e:	230c      	movs	r3, #12
1000d950:	18fb      	adds	r3, r7, r3
1000d952:	701a      	strb	r2, [r3, #0]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	DBG_LOG_DEV("\n\r[ble_advertisement_data_set]\n\rBLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE");
1000d954:	4b6b      	ldr	r3, [pc, #428]	; (1000db04 <ble_advertisement_data_set+0x264>)
1000d956:	1c18      	adds	r0, r3, #0
1000d958:	4b6b      	ldr	r3, [pc, #428]	; (1000db08 <ble_advertisement_data_set+0x268>)
1000d95a:	4798      	blx	r3
1000d95c:	4b6f      	ldr	r3, [pc, #444]	; (1000db1c <ble_advertisement_data_set+0x27c>)
1000d95e:	1c18      	adds	r0, r3, #0
1000d960:	4b6b      	ldr	r3, [pc, #428]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000d962:	4798      	blx	r3
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
1000d964:	230c      	movs	r3, #12
1000d966:	18fb      	adds	r3, r7, r3
1000d968:	781b      	ldrb	r3, [r3, #0]
1000d96a:	2b12      	cmp	r3, #18
1000d96c:	d83a      	bhi.n	1000d9e4 <ble_advertisement_data_set+0x144>
1000d96e:	e009      	b.n	1000d984 <ble_advertisement_data_set+0xe4>
	}
	#else
	if(false){}
	#endif
	else {
		DBG_LOG_ADV("\n\r[ble_advertisement_data_set]\n\rfailed to add Complete local name");
1000d970:	4b6b      	ldr	r3, [pc, #428]	; (1000db20 <ble_advertisement_data_set+0x280>)
1000d972:	1c18      	adds	r0, r3, #0
1000d974:	4b66      	ldr	r3, [pc, #408]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000d976:	4798      	blx	r3
1000d978:	4b6a      	ldr	r3, [pc, #424]	; (1000db24 <ble_advertisement_data_set+0x284>)
1000d97a:	1c18      	adds	r0, r3, #0
1000d97c:	4b64      	ldr	r3, [pc, #400]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000d97e:	4798      	blx	r3
		return AT_BLE_GAP_INVALID_PARAM;
1000d980:	2340      	movs	r3, #64	; 0x40
1000d982:	e0ba      	b.n	1000dafa <ble_advertisement_data_set+0x25a>
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	DBG_LOG_DEV("\n\r[ble_advertisement_data_set]\n\rBLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE");
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d984:	230c      	movs	r3, #12
1000d986:	18fb      	adds	r3, r7, r3
1000d988:	781b      	ldrb	r3, [r3, #0]
1000d98a:	1c5a      	adds	r2, r3, #1
1000d98c:	b2d1      	uxtb	r1, r2
1000d98e:	220c      	movs	r2, #12
1000d990:	18ba      	adds	r2, r7, r2
1000d992:	7011      	strb	r1, [r2, #0]
1000d994:	1c1a      	adds	r2, r3, #0
1000d996:	2334      	movs	r3, #52	; 0x34
1000d998:	18fb      	adds	r3, r7, r3
1000d99a:	2109      	movs	r1, #9
1000d99c:	5499      	strb	r1, [r3, r2]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d99e:	230c      	movs	r3, #12
1000d9a0:	18fb      	adds	r3, r7, r3
1000d9a2:	781b      	ldrb	r3, [r3, #0]
1000d9a4:	1c5a      	adds	r2, r3, #1
1000d9a6:	b2d1      	uxtb	r1, r2
1000d9a8:	220c      	movs	r2, #12
1000d9aa:	18ba      	adds	r2, r7, r2
1000d9ac:	7011      	strb	r1, [r2, #0]
1000d9ae:	1c1a      	adds	r2, r3, #0
1000d9b0:	2334      	movs	r3, #52	; 0x34
1000d9b2:	18fb      	adds	r3, r7, r3
1000d9b4:	21ff      	movs	r1, #255	; 0xff
1000d9b6:	5499      	strb	r1, [r3, r2]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d9b8:	230c      	movs	r3, #12
1000d9ba:	18fb      	adds	r3, r7, r3
1000d9bc:	781b      	ldrb	r3, [r3, #0]
1000d9be:	1c1a      	adds	r2, r3, #0
1000d9c0:	2334      	movs	r3, #52	; 0x34
1000d9c2:	18fb      	adds	r3, r7, r3
1000d9c4:	189a      	adds	r2, r3, r2
1000d9c6:	4b58      	ldr	r3, [pc, #352]	; (1000db28 <ble_advertisement_data_set+0x288>)
1000d9c8:	1c10      	adds	r0, r2, #0
1000d9ca:	1c19      	adds	r1, r3, #0
1000d9cc:	2208      	movs	r2, #8
1000d9ce:	4b52      	ldr	r3, [pc, #328]	; (1000db18 <ble_advertisement_data_set+0x278>)
1000d9d0:	4798      	blx	r3
		adv_data_element.len += BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE;
1000d9d2:	230c      	movs	r3, #12
1000d9d4:	18fb      	adds	r3, r7, r3
1000d9d6:	781b      	ldrb	r3, [r3, #0]
1000d9d8:	3308      	adds	r3, #8
1000d9da:	b2da      	uxtb	r2, r3
1000d9dc:	230c      	movs	r3, #12
1000d9de:	18fb      	adds	r3, r7, r3
1000d9e0:	701a      	strb	r2, [r3, #0]
1000d9e2:	e036      	b.n	1000da52 <ble_advertisement_data_set+0x1b2>
	}
	#else
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
1000d9e4:	1d3b      	adds	r3, r7, #4
1000d9e6:	781b      	ldrb	r3, [r3, #0]
1000d9e8:	2b15      	cmp	r3, #21
1000d9ea:	d828      	bhi.n	1000da3e <ble_advertisement_data_set+0x19e>
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d9ec:	1d3b      	adds	r3, r7, #4
1000d9ee:	781b      	ldrb	r3, [r3, #0]
1000d9f0:	1c5a      	adds	r2, r3, #1
1000d9f2:	b2d1      	uxtb	r1, r2
1000d9f4:	1d3a      	adds	r2, r7, #4
1000d9f6:	7011      	strb	r1, [r2, #0]
1000d9f8:	1c1a      	adds	r2, r3, #0
1000d9fa:	2314      	movs	r3, #20
1000d9fc:	18fb      	adds	r3, r7, r3
1000d9fe:	2109      	movs	r1, #9
1000da00:	5499      	strb	r1, [r3, r2]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000da02:	1d3b      	adds	r3, r7, #4
1000da04:	781b      	ldrb	r3, [r3, #0]
1000da06:	1c5a      	adds	r2, r3, #1
1000da08:	b2d1      	uxtb	r1, r2
1000da0a:	1d3a      	adds	r2, r7, #4
1000da0c:	7011      	strb	r1, [r2, #0]
1000da0e:	1c1a      	adds	r2, r3, #0
1000da10:	2314      	movs	r3, #20
1000da12:	18fb      	adds	r3, r7, r3
1000da14:	21ff      	movs	r1, #255	; 0xff
1000da16:	5499      	strb	r1, [r3, r2]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000da18:	1d3b      	adds	r3, r7, #4
1000da1a:	781b      	ldrb	r3, [r3, #0]
1000da1c:	1c1a      	adds	r2, r3, #0
1000da1e:	2314      	movs	r3, #20
1000da20:	18fb      	adds	r3, r7, r3
1000da22:	189a      	adds	r2, r3, r2
1000da24:	4b40      	ldr	r3, [pc, #256]	; (1000db28 <ble_advertisement_data_set+0x288>)
1000da26:	1c10      	adds	r0, r2, #0
1000da28:	1c19      	adds	r1, r3, #0
1000da2a:	2208      	movs	r2, #8
1000da2c:	4b3a      	ldr	r3, [pc, #232]	; (1000db18 <ble_advertisement_data_set+0x278>)
1000da2e:	4798      	blx	r3
		scan_resp_data_element.len += BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE;
1000da30:	1d3b      	adds	r3, r7, #4
1000da32:	781b      	ldrb	r3, [r3, #0]
1000da34:	3308      	adds	r3, #8
1000da36:	b2da      	uxtb	r2, r3
1000da38:	1d3b      	adds	r3, r7, #4
1000da3a:	701a      	strb	r2, [r3, #0]
1000da3c:	e009      	b.n	1000da52 <ble_advertisement_data_set+0x1b2>
	}
	#endif
	else {
		DBG_LOG_ADV("\n\r[ble_advertisement_data_set]\n\rfailed to add Manufacturer specific data");
1000da3e:	4b38      	ldr	r3, [pc, #224]	; (1000db20 <ble_advertisement_data_set+0x280>)
1000da40:	1c18      	adds	r0, r3, #0
1000da42:	4b33      	ldr	r3, [pc, #204]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000da44:	4798      	blx	r3
1000da46:	4b39      	ldr	r3, [pc, #228]	; (1000db2c <ble_advertisement_data_set+0x28c>)
1000da48:	1c18      	adds	r0, r3, #0
1000da4a:	4b31      	ldr	r3, [pc, #196]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000da4c:	4798      	blx	r3
		return AT_BLE_GAP_INVALID_PARAM;
1000da4e:	2340      	movs	r3, #64	; 0x40
1000da50:	e053      	b.n	1000dafa <ble_advertisement_data_set+0x25a>
	}
	#endif
	
	uint8_t i = 0;
1000da52:	2357      	movs	r3, #87	; 0x57
1000da54:	18fb      	adds	r3, r7, r3
1000da56:	2200      	movs	r2, #0
1000da58:	701a      	strb	r2, [r3, #0]

	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000da5a:	230c      	movs	r3, #12
1000da5c:	18fb      	adds	r3, r7, r3
1000da5e:	7819      	ldrb	r1, [r3, #0]
1000da60:	1d3b      	adds	r3, r7, #4
1000da62:	781b      	ldrb	r3, [r3, #0]
1000da64:	2234      	movs	r2, #52	; 0x34
1000da66:	18b8      	adds	r0, r7, r2
1000da68:	2214      	movs	r2, #20
1000da6a:	18ba      	adds	r2, r7, r2
1000da6c:	4c30      	ldr	r4, [pc, #192]	; (1000db30 <ble_advertisement_data_set+0x290>)
1000da6e:	47a0      	blx	r4
1000da70:	1e03      	subs	r3, r0, #0
1000da72:	d00b      	beq.n	1000da8c <ble_advertisement_data_set+0x1ec>
							scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("\n\r[ble_advertisement_data_set]\n\rBLE Advertisement data set failed");
1000da74:	4b23      	ldr	r3, [pc, #140]	; (1000db04 <ble_advertisement_data_set+0x264>)
1000da76:	1c18      	adds	r0, r3, #0
1000da78:	4b23      	ldr	r3, [pc, #140]	; (1000db08 <ble_advertisement_data_set+0x268>)
1000da7a:	4798      	blx	r3
1000da7c:	4b2d      	ldr	r3, [pc, #180]	; (1000db34 <ble_advertisement_data_set+0x294>)
1000da7e:	1c18      	adds	r0, r3, #0
1000da80:	4b23      	ldr	r3, [pc, #140]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000da82:	4798      	blx	r3
		return status;
1000da84:	2356      	movs	r3, #86	; 0x56
1000da86:	18fb      	adds	r3, r7, r3
1000da88:	781b      	ldrb	r3, [r3, #0]
1000da8a:	e036      	b.n	1000dafa <ble_advertisement_data_set+0x25a>
	} else {
		DBG_LOG_DEV("\n\r[ble_advertisement_data_set]\n\radvertisement data: 0x ");
1000da8c:	4b1d      	ldr	r3, [pc, #116]	; (1000db04 <ble_advertisement_data_set+0x264>)
1000da8e:	1c18      	adds	r0, r3, #0
1000da90:	4b1d      	ldr	r3, [pc, #116]	; (1000db08 <ble_advertisement_data_set+0x268>)
1000da92:	4798      	blx	r3
1000da94:	4b28      	ldr	r3, [pc, #160]	; (1000db38 <ble_advertisement_data_set+0x298>)
1000da96:	1c18      	adds	r0, r3, #0
1000da98:	4b1d      	ldr	r3, [pc, #116]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000da9a:	4798      	blx	r3
		for(i = 0; i < adv_data_element.len; i++) {
1000da9c:	2357      	movs	r3, #87	; 0x57
1000da9e:	18fb      	adds	r3, r7, r3
1000daa0:	2200      	movs	r2, #0
1000daa2:	701a      	strb	r2, [r3, #0]
1000daa4:	e018      	b.n	1000dad8 <ble_advertisement_data_set+0x238>
			DBG_LOG_CONT_DEV("%02x(%c) ", adv_buf[i], adv_buf[i]);
1000daa6:	2357      	movs	r3, #87	; 0x57
1000daa8:	18fb      	adds	r3, r7, r3
1000daaa:	781b      	ldrb	r3, [r3, #0]
1000daac:	2234      	movs	r2, #52	; 0x34
1000daae:	18ba      	adds	r2, r7, r2
1000dab0:	5cd3      	ldrb	r3, [r2, r3]
1000dab2:	1c19      	adds	r1, r3, #0
1000dab4:	2357      	movs	r3, #87	; 0x57
1000dab6:	18fb      	adds	r3, r7, r3
1000dab8:	781b      	ldrb	r3, [r3, #0]
1000daba:	2234      	movs	r2, #52	; 0x34
1000dabc:	18ba      	adds	r2, r7, r2
1000dabe:	5cd3      	ldrb	r3, [r2, r3]
1000dac0:	1c1a      	adds	r2, r3, #0
1000dac2:	4b1e      	ldr	r3, [pc, #120]	; (1000db3c <ble_advertisement_data_set+0x29c>)
1000dac4:	1c18      	adds	r0, r3, #0
1000dac6:	4b12      	ldr	r3, [pc, #72]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000dac8:	4798      	blx	r3
							scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("\n\r[ble_advertisement_data_set]\n\rBLE Advertisement data set failed");
		return status;
	} else {
		DBG_LOG_DEV("\n\r[ble_advertisement_data_set]\n\radvertisement data: 0x ");
		for(i = 0; i < adv_data_element.len; i++) {
1000daca:	2357      	movs	r3, #87	; 0x57
1000dacc:	18fb      	adds	r3, r7, r3
1000dace:	781a      	ldrb	r2, [r3, #0]
1000dad0:	2357      	movs	r3, #87	; 0x57
1000dad2:	18fb      	adds	r3, r7, r3
1000dad4:	3201      	adds	r2, #1
1000dad6:	701a      	strb	r2, [r3, #0]
1000dad8:	230c      	movs	r3, #12
1000dada:	18fb      	adds	r3, r7, r3
1000dadc:	781b      	ldrb	r3, [r3, #0]
1000dade:	2257      	movs	r2, #87	; 0x57
1000dae0:	18ba      	adds	r2, r7, r2
1000dae2:	7812      	ldrb	r2, [r2, #0]
1000dae4:	429a      	cmp	r2, r3
1000dae6:	d3de      	bcc.n	1000daa6 <ble_advertisement_data_set+0x206>
			DBG_LOG_CONT_DEV("%02x(%c) ", adv_buf[i], adv_buf[i]);
		}
		DBG_LOG_DEV("\n\r[ble_advertisement_data_set]\n\rBLE Advertisement data set success");
1000dae8:	4b06      	ldr	r3, [pc, #24]	; (1000db04 <ble_advertisement_data_set+0x264>)
1000daea:	1c18      	adds	r0, r3, #0
1000daec:	4b06      	ldr	r3, [pc, #24]	; (1000db08 <ble_advertisement_data_set+0x268>)
1000daee:	4798      	blx	r3
1000daf0:	4b13      	ldr	r3, [pc, #76]	; (1000db40 <ble_advertisement_data_set+0x2a0>)
1000daf2:	1c18      	adds	r0, r3, #0
1000daf4:	4b06      	ldr	r3, [pc, #24]	; (1000db10 <ble_advertisement_data_set+0x270>)
1000daf6:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000daf8:	2300      	movs	r3, #0
	}
}
1000dafa:	1c18      	adds	r0, r3, #0
1000dafc:	46bd      	mov	sp, r7
1000dafe:	b017      	add	sp, #92	; 0x5c
1000db00:	bd90      	pop	{r4, r7, pc}
1000db02:	46c0      	nop			; (mov r8, r8)
1000db04:	1001507c 	.word	0x1001507c
1000db08:	1001351d 	.word	0x1001351d
1000db0c:	10015cb4 	.word	0x10015cb4
1000db10:	100133fd 	.word	0x100133fd
1000db14:	10015070 	.word	0x10015070
1000db18:	100133db 	.word	0x100133db
1000db1c:	10015d78 	.word	0x10015d78
1000db20:	10015d28 	.word	0x10015d28
1000db24:	10015d34 	.word	0x10015d34
1000db28:	10015dc8 	.word	0x10015dc8
1000db2c:	10015dd4 	.word	0x10015dd4
1000db30:	1000f9b1 	.word	0x1000f9b1
1000db34:	10015e20 	.word	0x10015e20
1000db38:	10015e64 	.word	0x10015e64
1000db3c:	10015e9c 	.word	0x10015e9c
1000db40:	10015ea8 	.word	0x10015ea8

1000db44 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
1000db44:	b580      	push	{r7, lr}
1000db46:	b082      	sub	sp, #8
1000db48:	af00      	add	r7, sp, #0
1000db4a:	6078      	str	r0, [r7, #4]
	ble_user_event_cb = cb_fn;
1000db4c:	4b02      	ldr	r3, [pc, #8]	; (1000db58 <register_ble_user_event_cb+0x14>)
1000db4e:	687a      	ldr	r2, [r7, #4]
1000db50:	601a      	str	r2, [r3, #0]
}
1000db52:	46bd      	mov	sp, r7
1000db54:	b002      	add	sp, #8
1000db56:	bd80      	pop	{r7, pc}
1000db58:	100166dc 	.word	0x100166dc

1000db5c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
1000db5c:	b580      	push	{r7, lr}
1000db5e:	b084      	sub	sp, #16
1000db60:	af00      	add	r7, sp, #0
1000db62:	60f8      	str	r0, [r7, #12]
1000db64:	60b9      	str	r1, [r7, #8]
1000db66:	607a      	str	r2, [r7, #4]
	if (uart_init(module, hw, config) == STATUS_OK) {
1000db68:	68f9      	ldr	r1, [r7, #12]
1000db6a:	68ba      	ldr	r2, [r7, #8]
1000db6c:	687b      	ldr	r3, [r7, #4]
1000db6e:	1c08      	adds	r0, r1, #0
1000db70:	1c11      	adds	r1, r2, #0
1000db72:	1c1a      	adds	r2, r3, #0
1000db74:	4b05      	ldr	r3, [pc, #20]	; (1000db8c <usart_serial_init+0x30>)
1000db76:	4798      	blx	r3
1000db78:	1e03      	subs	r3, r0, #0
1000db7a:	d101      	bne.n	1000db80 <usart_serial_init+0x24>
		return true;
1000db7c:	2301      	movs	r3, #1
1000db7e:	e000      	b.n	1000db82 <usart_serial_init+0x26>
	}
	else {
		return false;
1000db80:	2300      	movs	r3, #0
	}
}
1000db82:	1c18      	adds	r0, r3, #0
1000db84:	46bd      	mov	sp, r7
1000db86:	b004      	add	sp, #16
1000db88:	bd80      	pop	{r7, pc}
1000db8a:	46c0      	nop			; (mov r8, r8)
1000db8c:	1000abb9 	.word	0x1000abb9

1000db90 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000db90:	b580      	push	{r7, lr}
1000db92:	b082      	sub	sp, #8
1000db94:	af00      	add	r7, sp, #0
1000db96:	6078      	str	r0, [r7, #4]
1000db98:	1c0a      	adds	r2, r1, #0
1000db9a:	1cfb      	adds	r3, r7, #3
1000db9c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=uart_write_wait(module, c));
1000db9e:	46c0      	nop			; (mov r8, r8)
1000dba0:	687a      	ldr	r2, [r7, #4]
1000dba2:	1cfb      	adds	r3, r7, #3
1000dba4:	781b      	ldrb	r3, [r3, #0]
1000dba6:	1c10      	adds	r0, r2, #0
1000dba8:	1c19      	adds	r1, r3, #0
1000dbaa:	4b04      	ldr	r3, [pc, #16]	; (1000dbbc <usart_serial_putchar+0x2c>)
1000dbac:	4798      	blx	r3
1000dbae:	1e03      	subs	r3, r0, #0
1000dbb0:	d1f6      	bne.n	1000dba0 <usart_serial_putchar+0x10>

	return STATUS_OK;
1000dbb2:	2300      	movs	r3, #0
}
1000dbb4:	1c18      	adds	r0, r3, #0
1000dbb6:	46bd      	mov	sp, r7
1000dbb8:	b002      	add	sp, #8
1000dbba:	bd80      	pop	{r7, pc}
1000dbbc:	1000ae45 	.word	0x1000ae45

1000dbc0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000dbc0:	b580      	push	{r7, lr}
1000dbc2:	b082      	sub	sp, #8
1000dbc4:	af00      	add	r7, sp, #0
1000dbc6:	6078      	str	r0, [r7, #4]
1000dbc8:	6039      	str	r1, [r7, #0]
	while(STATUS_OK != uart_read_wait(module, c));
1000dbca:	46c0      	nop			; (mov r8, r8)
1000dbcc:	687a      	ldr	r2, [r7, #4]
1000dbce:	683b      	ldr	r3, [r7, #0]
1000dbd0:	1c10      	adds	r0, r2, #0
1000dbd2:	1c19      	adds	r1, r3, #0
1000dbd4:	4b03      	ldr	r3, [pc, #12]	; (1000dbe4 <usart_serial_getchar+0x24>)
1000dbd6:	4798      	blx	r3
1000dbd8:	1e03      	subs	r3, r0, #0
1000dbda:	d1f7      	bne.n	1000dbcc <usart_serial_getchar+0xc>
}
1000dbdc:	46bd      	mov	sp, r7
1000dbde:	b002      	add	sp, #8
1000dbe0:	bd80      	pop	{r7, pc}
1000dbe2:	46c0      	nop			; (mov r8, r8)
1000dbe4:	1000ae79 	.word	0x1000ae79

1000dbe8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
1000dbe8:	b580      	push	{r7, lr}
1000dbea:	b084      	sub	sp, #16
1000dbec:	af00      	add	r7, sp, #0
1000dbee:	60f8      	str	r0, [r7, #12]
1000dbf0:	60b9      	str	r1, [r7, #8]
1000dbf2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
1000dbf4:	4b10      	ldr	r3, [pc, #64]	; (1000dc38 <stdio_serial_init+0x50>)
1000dbf6:	68fa      	ldr	r2, [r7, #12]
1000dbf8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000dbfa:	4b10      	ldr	r3, [pc, #64]	; (1000dc3c <stdio_serial_init+0x54>)
1000dbfc:	4a10      	ldr	r2, [pc, #64]	; (1000dc40 <stdio_serial_init+0x58>)
1000dbfe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000dc00:	4b10      	ldr	r3, [pc, #64]	; (1000dc44 <stdio_serial_init+0x5c>)
1000dc02:	4a11      	ldr	r2, [pc, #68]	; (1000dc48 <stdio_serial_init+0x60>)
1000dc04:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
1000dc06:	68f9      	ldr	r1, [r7, #12]
1000dc08:	68ba      	ldr	r2, [r7, #8]
1000dc0a:	687b      	ldr	r3, [r7, #4]
1000dc0c:	1c08      	adds	r0, r1, #0
1000dc0e:	1c11      	adds	r1, r2, #0
1000dc10:	1c1a      	adds	r2, r3, #0
1000dc12:	4b0e      	ldr	r3, [pc, #56]	; (1000dc4c <stdio_serial_init+0x64>)
1000dc14:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000dc16:	4b0e      	ldr	r3, [pc, #56]	; (1000dc50 <stdio_serial_init+0x68>)
1000dc18:	681b      	ldr	r3, [r3, #0]
1000dc1a:	689b      	ldr	r3, [r3, #8]
1000dc1c:	1c18      	adds	r0, r3, #0
1000dc1e:	2100      	movs	r1, #0
1000dc20:	4b0c      	ldr	r3, [pc, #48]	; (1000dc54 <stdio_serial_init+0x6c>)
1000dc22:	4798      	blx	r3
	setbuf(stdin, NULL);
1000dc24:	4b0a      	ldr	r3, [pc, #40]	; (1000dc50 <stdio_serial_init+0x68>)
1000dc26:	681b      	ldr	r3, [r3, #0]
1000dc28:	685b      	ldr	r3, [r3, #4]
1000dc2a:	1c18      	adds	r0, r3, #0
1000dc2c:	2100      	movs	r1, #0
1000dc2e:	4b09      	ldr	r3, [pc, #36]	; (1000dc54 <stdio_serial_init+0x6c>)
1000dc30:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
1000dc32:	46bd      	mov	sp, r7
1000dc34:	b004      	add	sp, #16
1000dc36:	bd80      	pop	{r7, pc}
1000dc38:	10016a10 	.word	0x10016a10
1000dc3c:	10016a0c 	.word	0x10016a0c
1000dc40:	1000db91 	.word	0x1000db91
1000dc44:	10016a08 	.word	0x10016a08
1000dc48:	1000dbc1 	.word	0x1000dbc1
1000dc4c:	1000db5d 	.word	0x1000db5d
1000dc50:	100161c0 	.word	0x100161c0
1000dc54:	100135a9 	.word	0x100135a9

1000dc58 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000dc58:	b580      	push	{r7, lr}
1000dc5a:	b082      	sub	sp, #8
1000dc5c:	af00      	add	r7, sp, #0
1000dc5e:	6078      	str	r0, [r7, #4]
	read_complete_flag = true;
1000dc60:	4b02      	ldr	r3, [pc, #8]	; (1000dc6c <uart_read_complete_callback+0x14>)
1000dc62:	2201      	movs	r2, #1
1000dc64:	701a      	strb	r2, [r3, #0]
}
1000dc66:	46bd      	mov	sp, r7
1000dc68:	b002      	add	sp, #8
1000dc6a:	bd80      	pop	{r7, pc}
1000dc6c:	100166e1 	.word	0x100166e1

1000dc70 <serial_console_init>:

void serial_console_init(void)
{
1000dc70:	b580      	push	{r7, lr}
1000dc72:	af00      	add	r7, sp, #0
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000dc74:	2000      	movs	r0, #0
1000dc76:	2100      	movs	r1, #0
1000dc78:	4b15      	ldr	r3, [pc, #84]	; (1000dcd0 <serial_console_init+0x60>)
1000dc7a:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000dc7c:	4b15      	ldr	r3, [pc, #84]	; (1000dcd4 <serial_console_init+0x64>)
1000dc7e:	1c18      	adds	r0, r3, #0
1000dc80:	4b15      	ldr	r3, [pc, #84]	; (1000dcd8 <serial_console_init+0x68>)
1000dc82:	4798      	blx	r3

	config_uart.baud_rate = 115200;
1000dc84:	4b13      	ldr	r3, [pc, #76]	; (1000dcd4 <serial_console_init+0x64>)
1000dc86:	22e1      	movs	r2, #225	; 0xe1
1000dc88:	0252      	lsls	r2, r2, #9
1000dc8a:	601a      	str	r2, [r3, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000dc8c:	4b11      	ldr	r3, [pc, #68]	; (1000dcd4 <serial_console_init+0x64>)
1000dc8e:	2202      	movs	r2, #2
1000dc90:	609a      	str	r2, [r3, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000dc92:	4b10      	ldr	r3, [pc, #64]	; (1000dcd4 <serial_console_init+0x64>)
1000dc94:	2203      	movs	r2, #3
1000dc96:	60da      	str	r2, [r3, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000dc98:	4b0e      	ldr	r3, [pc, #56]	; (1000dcd4 <serial_console_init+0x64>)
1000dc9a:	2204      	movs	r2, #4
1000dc9c:	611a      	str	r2, [r3, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000dc9e:	4b0d      	ldr	r3, [pc, #52]	; (1000dcd4 <serial_console_init+0x64>)
1000dca0:	2205      	movs	r2, #5
1000dca2:	615a      	str	r2, [r3, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000dca4:	4b0b      	ldr	r3, [pc, #44]	; (1000dcd4 <serial_console_init+0x64>)
1000dca6:	2202      	movs	r2, #2
1000dca8:	619a      	str	r2, [r3, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000dcaa:	4b0a      	ldr	r3, [pc, #40]	; (1000dcd4 <serial_console_init+0x64>)
1000dcac:	2202      	movs	r2, #2
1000dcae:	61da      	str	r2, [r3, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000dcb0:	4b08      	ldr	r3, [pc, #32]	; (1000dcd4 <serial_console_init+0x64>)
1000dcb2:	2202      	movs	r2, #2
1000dcb4:	621a      	str	r2, [r3, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000dcb6:	4b07      	ldr	r3, [pc, #28]	; (1000dcd4 <serial_console_init+0x64>)
1000dcb8:	2202      	movs	r2, #2
1000dcba:	625a      	str	r2, [r3, #36]	; 0x24

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
1000dcbc:	4a07      	ldr	r2, [pc, #28]	; (1000dcdc <serial_console_init+0x6c>)
1000dcbe:	4908      	ldr	r1, [pc, #32]	; (1000dce0 <serial_console_init+0x70>)
1000dcc0:	4b04      	ldr	r3, [pc, #16]	; (1000dcd4 <serial_console_init+0x64>)
1000dcc2:	1c10      	adds	r0, r2, #0
1000dcc4:	1c1a      	adds	r2, r3, #0
1000dcc6:	4b07      	ldr	r3, [pc, #28]	; (1000dce4 <serial_console_init+0x74>)
1000dcc8:	4798      	blx	r3
}
1000dcca:	46bd      	mov	sp, r7
1000dccc:	bd80      	pop	{r7, pc}
1000dcce:	46c0      	nop			; (mov r8, r8)
1000dcd0:	10009b21 	.word	0x10009b21
1000dcd4:	10017268 	.word	0x10017268
1000dcd8:	1000ab59 	.word	0x1000ab59
1000dcdc:	10017244 	.word	0x10017244
1000dce0:	40004000 	.word	0x40004000
1000dce4:	1000dbe9 	.word	0x1000dbe9

1000dce8 <_time_start>:

void _time_start(unsigned int sec)
{
1000dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcea:	b085      	sub	sp, #20
1000dcec:	af00      	add	r7, sp, #0
1000dcee:	6078      	str	r0, [r7, #4]
	system_clock_get_value();
1000dcf0:	4b17      	ldr	r3, [pc, #92]	; (1000dd50 <_time_start+0x68>)
1000dcf2:	4798      	blx	r3
	unsigned int main_clk = system_clock_get_value();
1000dcf4:	4b16      	ldr	r3, [pc, #88]	; (1000dd50 <_time_start+0x68>)
1000dcf6:	4798      	blx	r3
1000dcf8:	1c03      	adds	r3, r0, #0
1000dcfa:	60fb      	str	r3, [r7, #12]

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000dcfc:	4b15      	ldr	r3, [pc, #84]	; (1000dd54 <_time_start+0x6c>)
1000dcfe:	68f8      	ldr	r0, [r7, #12]
1000dd00:	4798      	blx	r3
1000dd02:	1c02      	adds	r2, r0, #0
1000dd04:	1c0b      	adds	r3, r1, #0
1000dd06:	4c14      	ldr	r4, [pc, #80]	; (1000dd58 <_time_start+0x70>)
1000dd08:	1c10      	adds	r0, r2, #0
1000dd0a:	1c19      	adds	r1, r3, #0
1000dd0c:	4a13      	ldr	r2, [pc, #76]	; (1000dd5c <_time_start+0x74>)
1000dd0e:	4b14      	ldr	r3, [pc, #80]	; (1000dd60 <_time_start+0x78>)
1000dd10:	47a0      	blx	r4
1000dd12:	1c03      	adds	r3, r0, #0
1000dd14:	1c0c      	adds	r4, r1, #0
1000dd16:	1c1d      	adds	r5, r3, #0
1000dd18:	1c26      	adds	r6, r4, #0
1000dd1a:	687b      	ldr	r3, [r7, #4]
1000dd1c:	22fa      	movs	r2, #250	; 0xfa
1000dd1e:	0092      	lsls	r2, r2, #2
1000dd20:	435a      	muls	r2, r3
1000dd22:	4b0c      	ldr	r3, [pc, #48]	; (1000dd54 <_time_start+0x6c>)
1000dd24:	1c10      	adds	r0, r2, #0
1000dd26:	4798      	blx	r3
1000dd28:	1c02      	adds	r2, r0, #0
1000dd2a:	1c0b      	adds	r3, r1, #0
1000dd2c:	4c0a      	ldr	r4, [pc, #40]	; (1000dd58 <_time_start+0x70>)
1000dd2e:	1c28      	adds	r0, r5, #0
1000dd30:	1c31      	adds	r1, r6, #0
1000dd32:	47a0      	blx	r4
1000dd34:	1c03      	adds	r3, r0, #0
1000dd36:	1c0c      	adds	r4, r1, #0
1000dd38:	1c19      	adds	r1, r3, #0
1000dd3a:	1c22      	adds	r2, r4, #0
1000dd3c:	4b09      	ldr	r3, [pc, #36]	; (1000dd64 <_time_start+0x7c>)
1000dd3e:	1c08      	adds	r0, r1, #0
1000dd40:	1c11      	adds	r1, r2, #0
1000dd42:	4798      	blx	r3
1000dd44:	1c02      	adds	r2, r0, #0
1000dd46:	4b08      	ldr	r3, [pc, #32]	; (1000dd68 <_time_start+0x80>)
1000dd48:	601a      	str	r2, [r3, #0]
}
1000dd4a:	46bd      	mov	sp, r7
1000dd4c:	b005      	add	sp, #20
1000dd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd50:	10009bd9 	.word	0x10009bd9
1000dd54:	10013021 	.word	0x10013021
1000dd58:	1001238d 	.word	0x1001238d
1000dd5c:	19feaec7 	.word	0x19feaec7
1000dd60:	3f09d8ef 	.word	0x3f09d8ef
1000dd64:	10012351 	.word	0x10012351
1000dd68:	100166e8 	.word	0x100166e8

1000dd6c <_time_done>:

unsigned int _time_done()
{
1000dd6c:	b580      	push	{r7, lr}
1000dd6e:	af00      	add	r7, sp, #0
	return --tick;
1000dd70:	4b04      	ldr	r3, [pc, #16]	; (1000dd84 <_time_done+0x18>)
1000dd72:	681b      	ldr	r3, [r3, #0]
1000dd74:	1e5a      	subs	r2, r3, #1
1000dd76:	4b03      	ldr	r3, [pc, #12]	; (1000dd84 <_time_done+0x18>)
1000dd78:	601a      	str	r2, [r3, #0]
1000dd7a:	4b02      	ldr	r3, [pc, #8]	; (1000dd84 <_time_done+0x18>)
1000dd7c:	681b      	ldr	r3, [r3, #0]
}
1000dd7e:	1c18      	adds	r0, r3, #0
1000dd80:	46bd      	mov	sp, r7
1000dd82:	bd80      	pop	{r7, pc}
1000dd84:	100166e8 	.word	0x100166e8

1000dd88 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000dd88:	b580      	push	{r7, lr}
1000dd8a:	b082      	sub	sp, #8
1000dd8c:	af00      	add	r7, sp, #0
1000dd8e:	6078      	str	r0, [r7, #4]
	
	read_complete_flag = false;
1000dd90:	4b1e      	ldr	r3, [pc, #120]	; (1000de0c <getchar_b11_timeout+0x84>)
1000dd92:	2200      	movs	r2, #0
1000dd94:	701a      	strb	r2, [r3, #0]
	_time_start(sec);
1000dd96:	687b      	ldr	r3, [r7, #4]
1000dd98:	1c18      	adds	r0, r3, #0
1000dd9a:	4b1d      	ldr	r3, [pc, #116]	; (1000de10 <getchar_b11_timeout+0x88>)
1000dd9c:	4798      	blx	r3
	
	string_input[0] = 0;
1000dd9e:	4b1d      	ldr	r3, [pc, #116]	; (1000de14 <getchar_b11_timeout+0x8c>)
1000dda0:	2200      	movs	r2, #0
1000dda2:	701a      	strb	r2, [r3, #0]
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000dda4:	4a1c      	ldr	r2, [pc, #112]	; (1000de18 <getchar_b11_timeout+0x90>)
1000dda6:	4b1d      	ldr	r3, [pc, #116]	; (1000de1c <getchar_b11_timeout+0x94>)
1000dda8:	1c10      	adds	r0, r2, #0
1000ddaa:	1c19      	adds	r1, r3, #0
1000ddac:	2202      	movs	r2, #2
1000ddae:	4b1c      	ldr	r3, [pc, #112]	; (1000de20 <getchar_b11_timeout+0x98>)
1000ddb0:	4798      	blx	r3
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ddb2:	4b19      	ldr	r3, [pc, #100]	; (1000de18 <getchar_b11_timeout+0x90>)
1000ddb4:	1c18      	adds	r0, r3, #0
1000ddb6:	2102      	movs	r1, #2
1000ddb8:	4b1a      	ldr	r3, [pc, #104]	; (1000de24 <getchar_b11_timeout+0x9c>)
1000ddba:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ddbc:	4a16      	ldr	r2, [pc, #88]	; (1000de18 <getchar_b11_timeout+0x90>)
1000ddbe:	4b15      	ldr	r3, [pc, #84]	; (1000de14 <getchar_b11_timeout+0x8c>)
1000ddc0:	1c10      	adds	r0, r2, #0
1000ddc2:	1c19      	adds	r1, r3, #0
1000ddc4:	2201      	movs	r2, #1
1000ddc6:	4b18      	ldr	r3, [pc, #96]	; (1000de28 <getchar_b11_timeout+0xa0>)
1000ddc8:	4798      	blx	r3
	
	while (!read_complete_flag && _time_done() > 0 );
1000ddca:	46c0      	nop			; (mov r8, r8)
1000ddcc:	4b0f      	ldr	r3, [pc, #60]	; (1000de0c <getchar_b11_timeout+0x84>)
1000ddce:	781b      	ldrb	r3, [r3, #0]
1000ddd0:	b2db      	uxtb	r3, r3
1000ddd2:	2201      	movs	r2, #1
1000ddd4:	4053      	eors	r3, r2
1000ddd6:	b2db      	uxtb	r3, r3
1000ddd8:	2b00      	cmp	r3, #0
1000ddda:	d003      	beq.n	1000dde4 <getchar_b11_timeout+0x5c>
1000dddc:	4b13      	ldr	r3, [pc, #76]	; (1000de2c <getchar_b11_timeout+0xa4>)
1000ddde:	4798      	blx	r3
1000dde0:	1e03      	subs	r3, r0, #0
1000dde2:	d1f3      	bne.n	1000ddcc <getchar_b11_timeout+0x44>
	
	if( tick == 0 )
1000dde4:	4b12      	ldr	r3, [pc, #72]	; (1000de30 <getchar_b11_timeout+0xa8>)
1000dde6:	681b      	ldr	r3, [r3, #0]
1000dde8:	2b00      	cmp	r3, #0
1000ddea:	d109      	bne.n	1000de00 <getchar_b11_timeout+0x78>
	{
		uart_unregister_callback(&uart_instance, UART_RX_COMPLETE);
1000ddec:	4b0a      	ldr	r3, [pc, #40]	; (1000de18 <getchar_b11_timeout+0x90>)
1000ddee:	1c18      	adds	r0, r3, #0
1000ddf0:	2102      	movs	r1, #2
1000ddf2:	4b10      	ldr	r3, [pc, #64]	; (1000de34 <getchar_b11_timeout+0xac>)
1000ddf4:	4798      	blx	r3
		uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ddf6:	4b08      	ldr	r3, [pc, #32]	; (1000de18 <getchar_b11_timeout+0x90>)
1000ddf8:	1c18      	adds	r0, r3, #0
1000ddfa:	2102      	movs	r1, #2
1000ddfc:	4b0e      	ldr	r3, [pc, #56]	; (1000de38 <getchar_b11_timeout+0xb0>)
1000ddfe:	4798      	blx	r3
	}
	return string_input[0];
1000de00:	4b04      	ldr	r3, [pc, #16]	; (1000de14 <getchar_b11_timeout+0x8c>)
1000de02:	781b      	ldrb	r3, [r3, #0]
}
1000de04:	1c18      	adds	r0, r3, #0
1000de06:	46bd      	mov	sp, r7
1000de08:	b002      	add	sp, #8
1000de0a:	bd80      	pop	{r7, pc}
1000de0c:	100166e1 	.word	0x100166e1
1000de10:	1000dce9 	.word	0x1000dce9
1000de14:	100166e4 	.word	0x100166e4
1000de18:	10017244 	.word	0x10017244
1000de1c:	1000dc59 	.word	0x1000dc59
1000de20:	1000af2d 	.word	0x1000af2d
1000de24:	1000afb9 	.word	0x1000afb9
1000de28:	1000aee1 	.word	0x1000aee1
1000de2c:	1000dd6d 	.word	0x1000dd6d
1000de30:	100166e8 	.word	0x100166e8
1000de34:	1000af71 	.word	0x1000af71
1000de38:	1000b00d 	.word	0x1000b00d

1000de3c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000de3c:	b580      	push	{r7, lr}
1000de3e:	b082      	sub	sp, #8
1000de40:	af00      	add	r7, sp, #0
1000de42:	1c02      	adds	r2, r0, #0
1000de44:	1dfb      	adds	r3, r7, #7
1000de46:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000de48:	4b06      	ldr	r3, [pc, #24]	; (1000de64 <NVIC_EnableIRQ+0x28>)
1000de4a:	1dfa      	adds	r2, r7, #7
1000de4c:	7812      	ldrb	r2, [r2, #0]
1000de4e:	1c11      	adds	r1, r2, #0
1000de50:	221f      	movs	r2, #31
1000de52:	400a      	ands	r2, r1
1000de54:	2101      	movs	r1, #1
1000de56:	4091      	lsls	r1, r2
1000de58:	1c0a      	adds	r2, r1, #0
1000de5a:	601a      	str	r2, [r3, #0]
}
1000de5c:	46bd      	mov	sp, r7
1000de5e:	b002      	add	sp, #8
1000de60:	bd80      	pop	{r7, pc}
1000de62:	46c0      	nop			; (mov r8, r8)
1000de64:	e000e100 	.word	0xe000e100

1000de68 <dualtimer_callback2>:
#include "conf_dualtimer.h"

extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
1000de68:	b580      	push	{r7, lr}
1000de6a:	af00      	add	r7, sp, #0
	puts("Timer2 trigger\r\n");
1000de6c:	4b02      	ldr	r3, [pc, #8]	; (1000de78 <dualtimer_callback2+0x10>)
1000de6e:	1c18      	adds	r0, r3, #0
1000de70:	4b02      	ldr	r3, [pc, #8]	; (1000de7c <dualtimer_callback2+0x14>)
1000de72:	4798      	blx	r3
}
1000de74:	46bd      	mov	sp, r7
1000de76:	bd80      	pop	{r7, pc}
1000de78:	10016018 	.word	0x10016018
1000de7c:	1001351d 	.word	0x1001351d

1000de80 <hw_timer_init>:

void hw_timer_init(void)
{
1000de80:	b580      	push	{r7, lr}
1000de82:	b088      	sub	sp, #32
1000de84:	af00      	add	r7, sp, #0
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000de86:	1d3b      	adds	r3, r7, #4
1000de88:	1c18      	adds	r0, r3, #0
1000de8a:	4b07      	ldr	r3, [pc, #28]	; (1000dea8 <hw_timer_init+0x28>)
1000de8c:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000de8e:	1d3b      	adds	r3, r7, #4
1000de90:	4a06      	ldr	r2, [pc, #24]	; (1000deac <hw_timer_init+0x2c>)
1000de92:	609a      	str	r2, [r3, #8]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000de94:	1d3b      	adds	r3, r7, #4
1000de96:	4a06      	ldr	r2, [pc, #24]	; (1000deb0 <hw_timer_init+0x30>)
1000de98:	615a      	str	r2, [r3, #20]

	dualtimer_init(&config_dualtimer);
1000de9a:	1d3b      	adds	r3, r7, #4
1000de9c:	1c18      	adds	r0, r3, #0
1000de9e:	4b05      	ldr	r3, [pc, #20]	; (1000deb4 <hw_timer_init+0x34>)
1000dea0:	4798      	blx	r3
}
1000dea2:	46bd      	mov	sp, r7
1000dea4:	b008      	add	sp, #32
1000dea6:	bd80      	pop	{r7, pc}
1000dea8:	10008acd 	.word	0x10008acd
1000deac:	00006590 	.word	0x00006590
1000deb0:	0000cb20 	.word	0x0000cb20
1000deb4:	10008c69 	.word	0x10008c69

1000deb8 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000deb8:	b580      	push	{r7, lr}
1000deba:	b082      	sub	sp, #8
1000debc:	af00      	add	r7, sp, #0
1000debe:	6078      	str	r0, [r7, #4]
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000dec0:	687b      	ldr	r3, [r7, #4]
1000dec2:	2000      	movs	r0, #0
1000dec4:	1c19      	adds	r1, r3, #0
1000dec6:	4b09      	ldr	r3, [pc, #36]	; (1000deec <hw_timer_register_callback+0x34>)
1000dec8:	4798      	blx	r3
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000deca:	4b09      	ldr	r3, [pc, #36]	; (1000def0 <hw_timer_register_callback+0x38>)
1000decc:	2001      	movs	r0, #1
1000dece:	1c19      	adds	r1, r3, #0
1000ded0:	4b06      	ldr	r3, [pc, #24]	; (1000deec <hw_timer_register_callback+0x34>)
1000ded2:	4798      	blx	r3

	dualtimer_disable(DUALTIMER_TIMER1);
1000ded4:	2000      	movs	r0, #0
1000ded6:	4b07      	ldr	r3, [pc, #28]	; (1000def4 <hw_timer_register_callback+0x3c>)
1000ded8:	4798      	blx	r3
	dualtimer_disable(DUALTIMER_TIMER2);
1000deda:	2001      	movs	r0, #1
1000dedc:	4b05      	ldr	r3, [pc, #20]	; (1000def4 <hw_timer_register_callback+0x3c>)
1000dede:	4798      	blx	r3

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
1000dee0:	200e      	movs	r0, #14
1000dee2:	4b05      	ldr	r3, [pc, #20]	; (1000def8 <hw_timer_register_callback+0x40>)
1000dee4:	4798      	blx	r3
}
1000dee6:	46bd      	mov	sp, r7
1000dee8:	b002      	add	sp, #8
1000deea:	bd80      	pop	{r7, pc}
1000deec:	10008e49 	.word	0x10008e49
1000def0:	1000de69 	.word	0x1000de69
1000def4:	10008bd1 	.word	0x10008bd1
1000def8:	1000de3d 	.word	0x1000de3d

1000defc <hw_timer_stop>:
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay_ms);
	dualtimer_enable(DUALTIMER_TIMER1);
}

void hw_timer_stop(void)
{
1000defc:	b580      	push	{r7, lr}
1000defe:	af00      	add	r7, sp, #0
	dualtimer_disable(DUALTIMER_TIMER1);
1000df00:	2000      	movs	r0, #0
1000df02:	4b02      	ldr	r3, [pc, #8]	; (1000df0c <hw_timer_stop+0x10>)
1000df04:	4798      	blx	r3
}
1000df06:	46bd      	mov	sp, r7
1000df08:	bd80      	pop	{r7, pc}
1000df0a:	46c0      	nop			; (mov r8, r8)
1000df0c:	10008bd1 	.word	0x10008bd1

1000df10 <platform_event_free>:
static struct platform_event* platform_event_pending_list = NULL;
void platform_event_free(struct platform_event *event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
1000df10:	b580      	push	{r7, lr}
1000df12:	b082      	sub	sp, #8
1000df14:	af00      	add	r7, sp, #0
1000df16:	6078      	str	r0, [r7, #4]
	event->next = platform_event_free_list;
1000df18:	4b04      	ldr	r3, [pc, #16]	; (1000df2c <platform_event_free+0x1c>)
1000df1a:	681a      	ldr	r2, [r3, #0]
1000df1c:	687b      	ldr	r3, [r7, #4]
1000df1e:	601a      	str	r2, [r3, #0]
	platform_event_free_list = event;
1000df20:	4b02      	ldr	r3, [pc, #8]	; (1000df2c <platform_event_free+0x1c>)
1000df22:	687a      	ldr	r2, [r7, #4]
1000df24:	601a      	str	r2, [r3, #0]
}
1000df26:	46bd      	mov	sp, r7
1000df28:	b002      	add	sp, #8
1000df2a:	bd80      	pop	{r7, pc}
1000df2c:	10016764 	.word	0x10016764

1000df30 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000df30:	b580      	push	{r7, lr}
1000df32:	b084      	sub	sp, #16
1000df34:	af00      	add	r7, sp, #0
1000df36:	6039      	str	r1, [r7, #0]
1000df38:	1c11      	adds	r1, r2, #0
1000df3a:	1dbb      	adds	r3, r7, #6
1000df3c:	1c02      	adds	r2, r0, #0
1000df3e:	801a      	strh	r2, [r3, #0]
1000df40:	1d3b      	adds	r3, r7, #4
1000df42:	1c0a      	adds	r2, r1, #0
1000df44:	801a      	strh	r2, [r3, #0]
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000df46:	4b18      	ldr	r3, [pc, #96]	; (1000dfa8 <platform_event_post+0x78>)
1000df48:	681b      	ldr	r3, [r3, #0]
1000df4a:	60bb      	str	r3, [r7, #8]
	if(evt != NULL)
1000df4c:	68bb      	ldr	r3, [r7, #8]
1000df4e:	2b00      	cmp	r3, #0
1000df50:	d027      	beq.n	1000dfa2 <platform_event_post+0x72>
	{
		platform_event_free_list = evt->next;
1000df52:	68bb      	ldr	r3, [r7, #8]
1000df54:	681a      	ldr	r2, [r3, #0]
1000df56:	4b14      	ldr	r3, [pc, #80]	; (1000dfa8 <platform_event_post+0x78>)
1000df58:	601a      	str	r2, [r3, #0]
		
		evt->next = NULL;
1000df5a:	68bb      	ldr	r3, [r7, #8]
1000df5c:	2200      	movs	r2, #0
1000df5e:	601a      	str	r2, [r3, #0]
		evt->data = data;
1000df60:	68bb      	ldr	r3, [r7, #8]
1000df62:	683a      	ldr	r2, [r7, #0]
1000df64:	609a      	str	r2, [r3, #8]
		evt->data_len = data_len;
1000df66:	68bb      	ldr	r3, [r7, #8]
1000df68:	1d3a      	adds	r2, r7, #4
1000df6a:	8812      	ldrh	r2, [r2, #0]
1000df6c:	80da      	strh	r2, [r3, #6]
		evt->event_type = event_type;
1000df6e:	68bb      	ldr	r3, [r7, #8]
1000df70:	1dba      	adds	r2, r7, #6
1000df72:	8812      	ldrh	r2, [r2, #0]
1000df74:	809a      	strh	r2, [r3, #4]

		if(platform_event_pending_list == NULL)
1000df76:	4b0d      	ldr	r3, [pc, #52]	; (1000dfac <platform_event_post+0x7c>)
1000df78:	681b      	ldr	r3, [r3, #0]
1000df7a:	2b00      	cmp	r3, #0
1000df7c:	d103      	bne.n	1000df86 <platform_event_post+0x56>
		{
			platform_event_pending_list = evt;
1000df7e:	4b0b      	ldr	r3, [pc, #44]	; (1000dfac <platform_event_post+0x7c>)
1000df80:	68ba      	ldr	r2, [r7, #8]
1000df82:	601a      	str	r2, [r3, #0]
1000df84:	e00d      	b.n	1000dfa2 <platform_event_post+0x72>
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
1000df86:	4b09      	ldr	r3, [pc, #36]	; (1000dfac <platform_event_post+0x7c>)
1000df88:	681b      	ldr	r3, [r3, #0]
1000df8a:	60fb      	str	r3, [r7, #12]
			while(cur->next != NULL)
1000df8c:	e002      	b.n	1000df94 <platform_event_post+0x64>
			{
				cur = cur->next;
1000df8e:	68fb      	ldr	r3, [r7, #12]
1000df90:	681b      	ldr	r3, [r3, #0]
1000df92:	60fb      	str	r3, [r7, #12]
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000df94:	68fb      	ldr	r3, [r7, #12]
1000df96:	681b      	ldr	r3, [r3, #0]
1000df98:	2b00      	cmp	r3, #0
1000df9a:	d1f8      	bne.n	1000df8e <platform_event_post+0x5e>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000df9c:	68fb      	ldr	r3, [r7, #12]
1000df9e:	68ba      	ldr	r2, [r7, #8]
1000dfa0:	601a      	str	r2, [r3, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000dfa2:	46bd      	mov	sp, r7
1000dfa4:	b004      	add	sp, #16
1000dfa6:	bd80      	pop	{r7, pc}
1000dfa8:	10016764 	.word	0x10016764
1000dfac:	10016768 	.word	0x10016768

1000dfb0 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000dfb0:	b580      	push	{r7, lr}
1000dfb2:	b082      	sub	sp, #8
1000dfb4:	af00      	add	r7, sp, #0
	uint32_t i;
	platform_event_free_list = NULL;
1000dfb6:	4b0e      	ldr	r3, [pc, #56]	; (1000dff0 <platform_event_init+0x40>)
1000dfb8:	2200      	movs	r2, #0
1000dfba:	601a      	str	r2, [r3, #0]
	platform_event_pending_list = NULL;
1000dfbc:	4b0d      	ldr	r3, [pc, #52]	; (1000dff4 <platform_event_init+0x44>)
1000dfbe:	2200      	movs	r2, #0
1000dfc0:	601a      	str	r2, [r3, #0]
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000dfc2:	2300      	movs	r3, #0
1000dfc4:	607b      	str	r3, [r7, #4]
1000dfc6:	e00c      	b.n	1000dfe2 <platform_event_init+0x32>
	{
		platform_event_free(&platform_event_pool[i]);
1000dfc8:	687a      	ldr	r2, [r7, #4]
1000dfca:	1c13      	adds	r3, r2, #0
1000dfcc:	005b      	lsls	r3, r3, #1
1000dfce:	189b      	adds	r3, r3, r2
1000dfd0:	009b      	lsls	r3, r3, #2
1000dfd2:	4a09      	ldr	r2, [pc, #36]	; (1000dff8 <platform_event_init+0x48>)
1000dfd4:	189b      	adds	r3, r3, r2
1000dfd6:	1c18      	adds	r0, r3, #0
1000dfd8:	4b08      	ldr	r3, [pc, #32]	; (1000dffc <platform_event_init+0x4c>)
1000dfda:	4798      	blx	r3
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000dfdc:	687b      	ldr	r3, [r7, #4]
1000dfde:	3301      	adds	r3, #1
1000dfe0:	607b      	str	r3, [r7, #4]
1000dfe2:	687b      	ldr	r3, [r7, #4]
1000dfe4:	2b09      	cmp	r3, #9
1000dfe6:	d9ef      	bls.n	1000dfc8 <platform_event_init+0x18>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000dfe8:	46bd      	mov	sp, r7
1000dfea:	b002      	add	sp, #8
1000dfec:	bd80      	pop	{r7, pc}
1000dfee:	46c0      	nop			; (mov r8, r8)
1000dff0:	10016764 	.word	0x10016764
1000dff4:	10016768 	.word	0x10016768
1000dff8:	100166ec 	.word	0x100166ec
1000dffc:	1000df11 	.word	0x1000df11

1000e000 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000e000:	b580      	push	{r7, lr}
1000e002:	b082      	sub	sp, #8
1000e004:	af00      	add	r7, sp, #0
1000e006:	1c02      	adds	r2, r0, #0
1000e008:	1dfb      	adds	r3, r7, #7
1000e00a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e00c:	4b06      	ldr	r3, [pc, #24]	; (1000e028 <NVIC_EnableIRQ+0x28>)
1000e00e:	1dfa      	adds	r2, r7, #7
1000e010:	7812      	ldrb	r2, [r2, #0]
1000e012:	1c11      	adds	r1, r2, #0
1000e014:	221f      	movs	r2, #31
1000e016:	400a      	ands	r2, r1
1000e018:	2101      	movs	r1, #1
1000e01a:	4091      	lsls	r1, r2
1000e01c:	1c0a      	adds	r2, r1, #0
1000e01e:	601a      	str	r2, [r3, #0]
}
1000e020:	46bd      	mov	sp, r7
1000e022:	b002      	add	sp, #8
1000e024:	bd80      	pop	{r7, pc}
1000e026:	46c0      	nop			; (mov r8, r8)
1000e028:	e000e100 	.word	0xe000e100

1000e02c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
1000e02c:	b580      	push	{r7, lr}
1000e02e:	b082      	sub	sp, #8
1000e030:	af00      	add	r7, sp, #0
1000e032:	1c02      	adds	r2, r0, #0
1000e034:	1dfb      	adds	r3, r7, #7
1000e036:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e038:	4a07      	ldr	r2, [pc, #28]	; (1000e058 <NVIC_DisableIRQ+0x2c>)
1000e03a:	1dfb      	adds	r3, r7, #7
1000e03c:	781b      	ldrb	r3, [r3, #0]
1000e03e:	1c19      	adds	r1, r3, #0
1000e040:	231f      	movs	r3, #31
1000e042:	400b      	ands	r3, r1
1000e044:	2101      	movs	r1, #1
1000e046:	4099      	lsls	r1, r3
1000e048:	1c0b      	adds	r3, r1, #0
1000e04a:	1c19      	adds	r1, r3, #0
1000e04c:	2380      	movs	r3, #128	; 0x80
1000e04e:	50d1      	str	r1, [r2, r3]
}
1000e050:	46bd      	mov	sp, r7
1000e052:	b002      	add	sp, #8
1000e054:	bd80      	pop	{r7, pc}
1000e056:	46c0      	nop			; (mov r8, r8)
1000e058:	e000e100 	.word	0xe000e100

1000e05c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000e05c:	b580      	push	{r7, lr}
1000e05e:	b082      	sub	sp, #8
1000e060:	af00      	add	r7, sp, #0
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000e062:	4b1f      	ldr	r3, [pc, #124]	; (1000e0e0 <init_port_list+0x84>)
1000e064:	1c18      	adds	r0, r3, #0
1000e066:	2100      	movs	r1, #0
1000e068:	2232      	movs	r2, #50	; 0x32
1000e06a:	4b1e      	ldr	r3, [pc, #120]	; (1000e0e4 <init_port_list+0x88>)
1000e06c:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e06e:	1dfb      	adds	r3, r7, #7
1000e070:	2200      	movs	r2, #0
1000e072:	701a      	strb	r2, [r3, #0]
1000e074:	e01d      	b.n	1000e0b2 <init_port_list+0x56>
		port_list[i].bit.gpio_num = i;
1000e076:	1dfb      	adds	r3, r7, #7
1000e078:	781a      	ldrb	r2, [r3, #0]
1000e07a:	4b19      	ldr	r3, [pc, #100]	; (1000e0e0 <init_port_list+0x84>)
1000e07c:	0052      	lsls	r2, r2, #1
1000e07e:	1df9      	adds	r1, r7, #7
1000e080:	7809      	ldrb	r1, [r1, #0]
1000e082:	54d1      	strb	r1, [r2, r3]
		port_list[i].bit.available = 1;
1000e084:	1dfb      	adds	r3, r7, #7
1000e086:	781b      	ldrb	r3, [r3, #0]
1000e088:	4a15      	ldr	r2, [pc, #84]	; (1000e0e0 <init_port_list+0x84>)
1000e08a:	005b      	lsls	r3, r3, #1
1000e08c:	18d3      	adds	r3, r2, r3
1000e08e:	785a      	ldrb	r2, [r3, #1]
1000e090:	2101      	movs	r1, #1
1000e092:	430a      	orrs	r2, r1
1000e094:	705a      	strb	r2, [r3, #1]
		port_list[i].bit.configured = 0;
1000e096:	1dfb      	adds	r3, r7, #7
1000e098:	781b      	ldrb	r3, [r3, #0]
1000e09a:	4a11      	ldr	r2, [pc, #68]	; (1000e0e0 <init_port_list+0x84>)
1000e09c:	005b      	lsls	r3, r3, #1
1000e09e:	18d3      	adds	r3, r2, r3
1000e0a0:	785a      	ldrb	r2, [r3, #1]
1000e0a2:	2102      	movs	r1, #2
1000e0a4:	438a      	bics	r2, r1
1000e0a6:	705a      	strb	r2, [r3, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e0a8:	1dfb      	adds	r3, r7, #7
1000e0aa:	781a      	ldrb	r2, [r3, #0]
1000e0ac:	1dfb      	adds	r3, r7, #7
1000e0ae:	3201      	adds	r2, #1
1000e0b0:	701a      	strb	r2, [r3, #0]
1000e0b2:	1dfb      	adds	r3, r7, #7
1000e0b4:	781b      	ldrb	r3, [r3, #0]
1000e0b6:	2b18      	cmp	r3, #24
1000e0b8:	d9dd      	bls.n	1000e076 <init_port_list+0x1a>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000e0ba:	4b09      	ldr	r3, [pc, #36]	; (1000e0e0 <init_port_list+0x84>)
1000e0bc:	785a      	ldrb	r2, [r3, #1]
1000e0be:	2101      	movs	r1, #1
1000e0c0:	438a      	bics	r2, r1
1000e0c2:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000e0c4:	4b06      	ldr	r3, [pc, #24]	; (1000e0e0 <init_port_list+0x84>)
1000e0c6:	78da      	ldrb	r2, [r3, #3]
1000e0c8:	2101      	movs	r1, #1
1000e0ca:	438a      	bics	r2, r1
1000e0cc:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	port_list[14].bit.available = 0;
1000e0ce:	4b04      	ldr	r3, [pc, #16]	; (1000e0e0 <init_port_list+0x84>)
1000e0d0:	7f5a      	ldrb	r2, [r3, #29]
1000e0d2:	2101      	movs	r1, #1
1000e0d4:	438a      	bics	r2, r1
1000e0d6:	775a      	strb	r2, [r3, #29]
}
1000e0d8:	46bd      	mov	sp, r7
1000e0da:	b002      	add	sp, #8
1000e0dc:	bd80      	pop	{r7, pc}
1000e0de:	46c0      	nop			; (mov r8, r8)
1000e0e0:	100172a8 	.word	0x100172a8
1000e0e4:	100133ed 	.word	0x100133ed

1000e0e8 <init_clock>:

void init_clock(void)
{
1000e0e8:	b580      	push	{r7, lr}
1000e0ea:	b082      	sub	sp, #8
1000e0ec:	af00      	add	r7, sp, #0
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000e0ee:	4b2a      	ldr	r3, [pc, #168]	; (1000e198 <init_clock+0xb0>)
1000e0f0:	681b      	ldr	r3, [r3, #0]
1000e0f2:	607b      	str	r3, [r7, #4]
	//disable SPI-FLASH core clock
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN);
	//disable SPI core clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN);
1000e0f4:	687b      	ldr	r3, [r7, #4]
1000e0f6:	2204      	movs	r2, #4
1000e0f8:	4393      	bics	r3, r2
1000e0fa:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN);
1000e0fc:	687b      	ldr	r3, [r7, #4]
1000e0fe:	2208      	movs	r2, #8
1000e100:	4393      	bics	r3, r2
1000e102:	607b      	str	r3, [r7, #4]
	//disable I2C0 Core clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	//disable ARM dual timer core clocks.
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN);
1000e104:	687b      	ldr	r3, [r7, #4]
1000e106:	2220      	movs	r2, #32
1000e108:	4393      	bics	r3, r2
1000e10a:	607b      	str	r3, [r7, #4]
	//disable counter0 clock 
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN);
	//disable Watchdog core clocks.
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
1000e10c:	687b      	ldr	r3, [r7, #4]
1000e10e:	4a23      	ldr	r2, [pc, #140]	; (1000e19c <init_clock+0xb4>)
1000e110:	4013      	ands	r3, r2
1000e112:	607b      	str	r3, [r7, #4]
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
1000e114:	687b      	ldr	r3, [r7, #4]
1000e116:	4a22      	ldr	r2, [pc, #136]	; (1000e1a0 <init_clock+0xb8>)
1000e118:	4013      	ands	r3, r2
1000e11a:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
1000e11c:	687b      	ldr	r3, [r7, #4]
1000e11e:	4a21      	ldr	r2, [pc, #132]	; (1000e1a4 <init_clock+0xbc>)
1000e120:	4013      	ands	r3, r2
1000e122:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
1000e124:	687b      	ldr	r3, [r7, #4]
1000e126:	4a20      	ldr	r2, [pc, #128]	; (1000e1a8 <init_clock+0xc0>)
1000e128:	4013      	ands	r3, r2
1000e12a:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000e12c:	687b      	ldr	r3, [r7, #4]
1000e12e:	4a1f      	ldr	r2, [pc, #124]	; (1000e1ac <init_clock+0xc4>)
1000e130:	4013      	ands	r3, r2
1000e132:	607b      	str	r3, [r7, #4]
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000e134:	4b18      	ldr	r3, [pc, #96]	; (1000e198 <init_clock+0xb0>)
1000e136:	687a      	ldr	r2, [r7, #4]
1000e138:	601a      	str	r2, [r3, #0]
	default_samb11_clock_init[0] = regval;
1000e13a:	4b1d      	ldr	r3, [pc, #116]	; (1000e1b0 <init_clock+0xc8>)
1000e13c:	687a      	ldr	r2, [r7, #4]
1000e13e:	601a      	str	r2, [r3, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000e140:	4b1c      	ldr	r3, [pc, #112]	; (1000e1b4 <init_clock+0xcc>)
1000e142:	681b      	ldr	r3, [r3, #0]
1000e144:	607b      	str	r3, [r7, #4]
	//disable efuse clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN);
1000e146:	687b      	ldr	r3, [r7, #4]
1000e148:	2201      	movs	r2, #1
1000e14a:	4393      	bics	r3, r2
1000e14c:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN);
1000e14e:	687b      	ldr	r3, [r7, #4]
1000e150:	2202      	movs	r2, #2
1000e152:	4393      	bics	r3, r2
1000e154:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN);
1000e156:	687b      	ldr	r3, [r7, #4]
1000e158:	2204      	movs	r2, #4
1000e15a:	4393      	bics	r3, r2
1000e15c:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
1000e15e:	687b      	ldr	r3, [r7, #4]
1000e160:	2208      	movs	r2, #8
1000e162:	4393      	bics	r3, r2
1000e164:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
1000e166:	687b      	ldr	r3, [r7, #4]
1000e168:	2210      	movs	r2, #16
1000e16a:	4393      	bics	r3, r2
1000e16c:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
1000e16e:	687b      	ldr	r3, [r7, #4]
1000e170:	2220      	movs	r2, #32
1000e172:	4393      	bics	r3, r2
1000e174:	607b      	str	r3, [r7, #4]
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
1000e176:	687b      	ldr	r3, [r7, #4]
1000e178:	4a0f      	ldr	r2, [pc, #60]	; (1000e1b8 <init_clock+0xd0>)
1000e17a:	4013      	ands	r3, r2
1000e17c:	607b      	str	r3, [r7, #4]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000e17e:	687b      	ldr	r3, [r7, #4]
1000e180:	4a06      	ldr	r2, [pc, #24]	; (1000e19c <init_clock+0xb4>)
1000e182:	4013      	ands	r3, r2
1000e184:	607b      	str	r3, [r7, #4]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000e186:	4b0b      	ldr	r3, [pc, #44]	; (1000e1b4 <init_clock+0xcc>)
1000e188:	687a      	ldr	r2, [r7, #4]
1000e18a:	601a      	str	r2, [r3, #0]
	default_samb11_clock_init[1] = regval;
1000e18c:	4b08      	ldr	r3, [pc, #32]	; (1000e1b0 <init_clock+0xc8>)
1000e18e:	687a      	ldr	r2, [r7, #4]
1000e190:	605a      	str	r2, [r3, #4]
	//ARM debugger
	
	//store default values
}
1000e192:	46bd      	mov	sp, r7
1000e194:	b002      	add	sp, #8
1000e196:	bd80      	pop	{r7, pc}
1000e198:	4000b00c 	.word	0x4000b00c
1000e19c:	ffffefff 	.word	0xffffefff
1000e1a0:	ffffdfff 	.word	0xffffdfff
1000e1a4:	ffffbfff 	.word	0xffffbfff
1000e1a8:	ffff7fff 	.word	0xffff7fff
1000e1ac:	fffeffff 	.word	0xfffeffff
1000e1b0:	10017290 	.word	0x10017290
1000e1b4:	4000b010 	.word	0x4000b010
1000e1b8:	fffff7ff 	.word	0xfffff7ff

1000e1bc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000e1bc:	b580      	push	{r7, lr}
1000e1be:	b082      	sub	sp, #8
1000e1c0:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_NOT_INITIALIZED;
1000e1c2:	1dfb      	adds	r3, r7, #7
1000e1c4:	2205      	movs	r2, #5
1000e1c6:	701a      	strb	r2, [r3, #0]
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000e1c8:	4b4e      	ldr	r3, [pc, #312]	; (1000e304 <platform_driver_init+0x148>)
1000e1ca:	781b      	ldrb	r3, [r3, #0]
1000e1cc:	b2db      	uxtb	r3, r3
1000e1ce:	2b00      	cmp	r3, #0
1000e1d0:	d005      	beq.n	1000e1de <platform_driver_init+0x22>
1000e1d2:	4b4c      	ldr	r3, [pc, #304]	; (1000e304 <platform_driver_init+0x148>)
1000e1d4:	781b      	ldrb	r3, [r3, #0]
1000e1d6:	b2db      	uxtb	r3, r3
1000e1d8:	2b01      	cmp	r3, #1
1000e1da:	d100      	bne.n	1000e1de <platform_driver_init+0x22>
1000e1dc:	e086      	b.n	1000e2ec <platform_driver_init+0x130>
		init_port_list();
1000e1de:	4b4a      	ldr	r3, [pc, #296]	; (1000e308 <platform_driver_init+0x14c>)
1000e1e0:	4798      	blx	r3
		init_clock();
1000e1e2:	4b4a      	ldr	r3, [pc, #296]	; (1000e30c <platform_driver_init+0x150>)
1000e1e4:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000e1e6:	4b4a      	ldr	r3, [pc, #296]	; (1000e310 <platform_driver_init+0x154>)
1000e1e8:	2200      	movs	r2, #0
1000e1ea:	601a      	str	r2, [r3, #0]

#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
1000e1ec:	2017      	movs	r0, #23
1000e1ee:	4b49      	ldr	r3, [pc, #292]	; (1000e314 <platform_driver_init+0x158>)
1000e1f0:	4798      	blx	r3
		NVIC_DisableIRQ(GPIO1_IRQn);
1000e1f2:	2018      	movs	r0, #24
1000e1f4:	4b47      	ldr	r3, [pc, #284]	; (1000e314 <platform_driver_init+0x158>)
1000e1f6:	4798      	blx	r3
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e1f8:	4b47      	ldr	r3, [pc, #284]	; (1000e318 <platform_driver_init+0x15c>)
1000e1fa:	4a48      	ldr	r2, [pc, #288]	; (1000e31c <platform_driver_init+0x160>)
1000e1fc:	601a      	str	r2, [r3, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e1fe:	4b48      	ldr	r3, [pc, #288]	; (1000e320 <platform_driver_init+0x164>)
1000e200:	4a48      	ldr	r2, [pc, #288]	; (1000e324 <platform_driver_init+0x168>)
1000e202:	601a      	str	r2, [r3, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e204:	4b48      	ldr	r3, [pc, #288]	; (1000e328 <platform_driver_init+0x16c>)
1000e206:	4a49      	ldr	r2, [pc, #292]	; (1000e32c <platform_driver_init+0x170>)
1000e208:	601a      	str	r2, [r3, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e20a:	4b49      	ldr	r3, [pc, #292]	; (1000e330 <platform_driver_init+0x174>)
1000e20c:	681b      	ldr	r3, [r3, #0]
1000e20e:	1c1a      	adds	r2, r3, #0
1000e210:	4b48      	ldr	r3, [pc, #288]	; (1000e334 <platform_driver_init+0x178>)
1000e212:	601a      	str	r2, [r3, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e214:	4b48      	ldr	r3, [pc, #288]	; (1000e338 <platform_driver_init+0x17c>)
1000e216:	681b      	ldr	r3, [r3, #0]
1000e218:	1c1a      	adds	r2, r3, #0
1000e21a:	4b48      	ldr	r3, [pc, #288]	; (1000e33c <platform_driver_init+0x180>)
1000e21c:	601a      	str	r2, [r3, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e21e:	4b48      	ldr	r3, [pc, #288]	; (1000e340 <platform_driver_init+0x184>)
1000e220:	4a48      	ldr	r2, [pc, #288]	; (1000e344 <platform_driver_init+0x188>)
1000e222:	601a      	str	r2, [r3, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e224:	4b48      	ldr	r3, [pc, #288]	; (1000e348 <platform_driver_init+0x18c>)
1000e226:	4a49      	ldr	r2, [pc, #292]	; (1000e34c <platform_driver_init+0x190>)
1000e228:	601a      	str	r2, [r3, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e22a:	4b49      	ldr	r3, [pc, #292]	; (1000e350 <platform_driver_init+0x194>)
1000e22c:	4a49      	ldr	r2, [pc, #292]	; (1000e354 <platform_driver_init+0x198>)
1000e22e:	601a      	str	r2, [r3, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e230:	4b49      	ldr	r3, [pc, #292]	; (1000e358 <platform_driver_init+0x19c>)
1000e232:	4a4a      	ldr	r2, [pc, #296]	; (1000e35c <platform_driver_init+0x1a0>)
1000e234:	601a      	str	r2, [r3, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e236:	4b4a      	ldr	r3, [pc, #296]	; (1000e360 <platform_driver_init+0x1a4>)
1000e238:	4a4a      	ldr	r2, [pc, #296]	; (1000e364 <platform_driver_init+0x1a8>)
1000e23a:	601a      	str	r2, [r3, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e23c:	4b4a      	ldr	r3, [pc, #296]	; (1000e368 <platform_driver_init+0x1ac>)
1000e23e:	4a4b      	ldr	r2, [pc, #300]	; (1000e36c <platform_driver_init+0x1b0>)
1000e240:	601a      	str	r2, [r3, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e242:	4b4b      	ldr	r3, [pc, #300]	; (1000e370 <platform_driver_init+0x1b4>)
1000e244:	4a4b      	ldr	r2, [pc, #300]	; (1000e374 <platform_driver_init+0x1b8>)
1000e246:	601a      	str	r2, [r3, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e248:	4b4b      	ldr	r3, [pc, #300]	; (1000e378 <platform_driver_init+0x1bc>)
1000e24a:	4a4c      	ldr	r2, [pc, #304]	; (1000e37c <platform_driver_init+0x1c0>)
1000e24c:	601a      	str	r2, [r3, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e24e:	4b4c      	ldr	r3, [pc, #304]	; (1000e380 <platform_driver_init+0x1c4>)
1000e250:	4a4c      	ldr	r2, [pc, #304]	; (1000e384 <platform_driver_init+0x1c8>)
1000e252:	601a      	str	r2, [r3, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e254:	4b32      	ldr	r3, [pc, #200]	; (1000e320 <platform_driver_init+0x164>)
1000e256:	681b      	ldr	r3, [r3, #0]
1000e258:	2028      	movs	r0, #40	; 0x28
1000e25a:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e25c:	4b2e      	ldr	r3, [pc, #184]	; (1000e318 <platform_driver_init+0x15c>)
1000e25e:	681b      	ldr	r3, [r3, #0]
1000e260:	4a49      	ldr	r2, [pc, #292]	; (1000e388 <platform_driver_init+0x1cc>)
1000e262:	2028      	movs	r0, #40	; 0x28
1000e264:	1c11      	adds	r1, r2, #0
1000e266:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e268:	4b2b      	ldr	r3, [pc, #172]	; (1000e318 <platform_driver_init+0x15c>)
1000e26a:	681b      	ldr	r3, [r3, #0]
1000e26c:	4a47      	ldr	r2, [pc, #284]	; (1000e38c <platform_driver_init+0x1d0>)
1000e26e:	2027      	movs	r0, #39	; 0x27
1000e270:	1c11      	adds	r1, r2, #0
1000e272:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e274:	4b46      	ldr	r3, [pc, #280]	; (1000e390 <platform_driver_init+0x1d4>)
1000e276:	681b      	ldr	r3, [r3, #0]
1000e278:	1c1a      	adds	r2, r3, #0
1000e27a:	4b46      	ldr	r3, [pc, #280]	; (1000e394 <platform_driver_init+0x1d8>)
1000e27c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e27e:	4b46      	ldr	r3, [pc, #280]	; (1000e398 <platform_driver_init+0x1dc>)
1000e280:	4a46      	ldr	r2, [pc, #280]	; (1000e39c <platform_driver_init+0x1e0>)
1000e282:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e284:	4b46      	ldr	r3, [pc, #280]	; (1000e3a0 <platform_driver_init+0x1e4>)
1000e286:	4a47      	ldr	r2, [pc, #284]	; (1000e3a4 <platform_driver_init+0x1e8>)
1000e288:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e28a:	4b47      	ldr	r3, [pc, #284]	; (1000e3a8 <platform_driver_init+0x1ec>)
1000e28c:	4a47      	ldr	r2, [pc, #284]	; (1000e3ac <platform_driver_init+0x1f0>)
1000e28e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e290:	4b47      	ldr	r3, [pc, #284]	; (1000e3b0 <platform_driver_init+0x1f4>)
1000e292:	4a48      	ldr	r2, [pc, #288]	; (1000e3b4 <platform_driver_init+0x1f8>)
1000e294:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e296:	4b48      	ldr	r3, [pc, #288]	; (1000e3b8 <platform_driver_init+0x1fc>)
1000e298:	4a48      	ldr	r2, [pc, #288]	; (1000e3bc <platform_driver_init+0x200>)
1000e29a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e29c:	4b48      	ldr	r3, [pc, #288]	; (1000e3c0 <platform_driver_init+0x204>)
1000e29e:	4a49      	ldr	r2, [pc, #292]	; (1000e3c4 <platform_driver_init+0x208>)
1000e2a0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e2a2:	4b49      	ldr	r3, [pc, #292]	; (1000e3c8 <platform_driver_init+0x20c>)
1000e2a4:	4a49      	ldr	r2, [pc, #292]	; (1000e3cc <platform_driver_init+0x210>)
1000e2a6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e2a8:	4a49      	ldr	r2, [pc, #292]	; (1000e3d0 <platform_driver_init+0x214>)
1000e2aa:	23a0      	movs	r3, #160	; 0xa0
1000e2ac:	009b      	lsls	r3, r3, #2
1000e2ae:	1c10      	adds	r0, r2, #0
1000e2b0:	2100      	movs	r1, #0
1000e2b2:	1c1a      	adds	r2, r3, #0
1000e2b4:	4b47      	ldr	r3, [pc, #284]	; (1000e3d4 <platform_driver_init+0x218>)
1000e2b6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e2b8:	4b47      	ldr	r3, [pc, #284]	; (1000e3d8 <platform_driver_init+0x21c>)
1000e2ba:	2280      	movs	r2, #128	; 0x80
1000e2bc:	0092      	lsls	r2, r2, #2
1000e2be:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e2c0:	4b46      	ldr	r3, [pc, #280]	; (1000e3dc <platform_driver_init+0x220>)
1000e2c2:	4798      	blx	r3
		
#ifdef CHIPVERSION_B0
		/* NVIC_EnableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_EnableIRQ(PORT1_COMB_IRQn); */
		NVIC_EnableIRQ(GPIO0_IRQn);
1000e2c4:	2017      	movs	r0, #23
1000e2c6:	4b46      	ldr	r3, [pc, #280]	; (1000e3e0 <platform_driver_init+0x224>)
1000e2c8:	4798      	blx	r3
		NVIC_EnableIRQ(GPIO1_IRQn);
1000e2ca:	2018      	movs	r0, #24
1000e2cc:	4b44      	ldr	r3, [pc, #272]	; (1000e3e0 <platform_driver_init+0x224>)
1000e2ce:	4798      	blx	r3
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e2d0:	4b44      	ldr	r3, [pc, #272]	; (1000e3e4 <platform_driver_init+0x228>)
1000e2d2:	2200      	movs	r2, #0
1000e2d4:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e2d6:	4b1e      	ldr	r3, [pc, #120]	; (1000e350 <platform_driver_init+0x194>)
1000e2d8:	681b      	ldr	r3, [r3, #0]
1000e2da:	4a43      	ldr	r2, [pc, #268]	; (1000e3e8 <platform_driver_init+0x22c>)
1000e2dc:	601a      	str	r2, [r3, #0]
		platform_initialized = 1;
1000e2de:	4b09      	ldr	r3, [pc, #36]	; (1000e304 <platform_driver_init+0x148>)
1000e2e0:	2201      	movs	r2, #1
1000e2e2:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e2e4:	1dfb      	adds	r3, r7, #7
1000e2e6:	2200      	movs	r2, #0
1000e2e8:	701a      	strb	r2, [r3, #0]
1000e2ea:	e005      	b.n	1000e2f8 <platform_driver_init+0x13c>
	}
	else {
		platform_initialized = 1;
1000e2ec:	4b05      	ldr	r3, [pc, #20]	; (1000e304 <platform_driver_init+0x148>)
1000e2ee:	2201      	movs	r2, #1
1000e2f0:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e2f2:	1dfb      	adds	r3, r7, #7
1000e2f4:	2201      	movs	r2, #1
1000e2f6:	701a      	strb	r2, [r3, #0]
	}
	return status;
1000e2f8:	1dfb      	adds	r3, r7, #7
1000e2fa:	781b      	ldrb	r3, [r3, #0]
}
1000e2fc:	1c18      	adds	r0, r3, #0
1000e2fe:	46bd      	mov	sp, r7
1000e300:	b002      	add	sp, #8
1000e302:	bd80      	pop	{r7, pc}
1000e304:	100167a4 	.word	0x100167a4
1000e308:	1000e05d 	.word	0x1000e05d
1000e30c:	1000e0e9 	.word	0x1000e0e9
1000e310:	100167a8 	.word	0x100167a8
1000e314:	1000e02d 	.word	0x1000e02d
1000e318:	1001755c 	.word	0x1001755c
1000e31c:	000007d7 	.word	0x000007d7
1000e320:	1001729c 	.word	0x1001729c
1000e324:	000007bd 	.word	0x000007bd
1000e328:	10017560 	.word	0x10017560
1000e32c:	0001bc51 	.word	0x0001bc51
1000e330:	100400bc 	.word	0x100400bc
1000e334:	1001679c 	.word	0x1001679c
1000e338:	100400b8 	.word	0x100400b8
1000e33c:	100167a0 	.word	0x100167a0
1000e340:	10017298 	.word	0x10017298
1000e344:	0001b99f 	.word	0x0001b99f
1000e348:	100172a0 	.word	0x100172a0
1000e34c:	0001b9db 	.word	0x0001b9db
1000e350:	1001756c 	.word	0x1001756c
1000e354:	1004003c 	.word	0x1004003c
1000e358:	100172a4 	.word	0x100172a4
1000e35c:	10041fc0 	.word	0x10041fc0
1000e360:	10017568 	.word	0x10017568
1000e364:	10041fc4 	.word	0x10041fc4
1000e368:	1001676c 	.word	0x1001676c
1000e36c:	0001cbe9 	.word	0x0001cbe9
1000e370:	10016770 	.word	0x10016770
1000e374:	0001cd8f 	.word	0x0001cd8f
1000e378:	10016774 	.word	0x10016774
1000e37c:	0001cea3 	.word	0x0001cea3
1000e380:	10016778 	.word	0x10016778
1000e384:	0001cbcf 	.word	0x0001cbcf
1000e388:	1000eec1 	.word	0x1000eec1
1000e38c:	1000ee01 	.word	0x1000ee01
1000e390:	100400e4 	.word	0x100400e4
1000e394:	10016784 	.word	0x10016784
1000e398:	10016788 	.word	0x10016788
1000e39c:	00019fe9 	.word	0x00019fe9
1000e3a0:	1001678c 	.word	0x1001678c
1000e3a4:	0001dbdd 	.word	0x0001dbdd
1000e3a8:	10016790 	.word	0x10016790
1000e3ac:	0001dc5b 	.word	0x0001dc5b
1000e3b0:	1001677c 	.word	0x1001677c
1000e3b4:	100405ec 	.word	0x100405ec
1000e3b8:	10016794 	.word	0x10016794
1000e3bc:	0001d5e3 	.word	0x0001d5e3
1000e3c0:	10016780 	.word	0x10016780
1000e3c4:	10040c20 	.word	0x10040c20
1000e3c8:	10016798 	.word	0x10016798
1000e3cc:	00019f09 	.word	0x00019f09
1000e3d0:	100172dc 	.word	0x100172dc
1000e3d4:	100133ed 	.word	0x100133ed
1000e3d8:	10017570 	.word	0x10017570
1000e3dc:	1000dfb1 	.word	0x1000dfb1
1000e3e0:	1000e001 	.word	0x1000e001
1000e3e4:	10017564 	.word	0x10017564
1000e3e8:	1000eca1 	.word	0x1000eca1

1000e3ec <platform_register_ble_msg_handler>:
}
#endif	//CHIPVERSION_A4


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
1000e3ec:	b580      	push	{r7, lr}
1000e3ee:	b084      	sub	sp, #16
1000e3f0:	af00      	add	r7, sp, #0
1000e3f2:	6078      	str	r0, [r7, #4]
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e3f4:	4b0b      	ldr	r3, [pc, #44]	; (1000e424 <platform_register_ble_msg_handler+0x38>)
1000e3f6:	781b      	ldrb	r3, [r3, #0]
1000e3f8:	b2db      	uxtb	r3, r3
1000e3fa:	2b01      	cmp	r3, #1
1000e3fc:	d107      	bne.n	1000e40e <platform_register_ble_msg_handler+0x22>
		ble_stack_message_handler = fp;
1000e3fe:	4b0a      	ldr	r3, [pc, #40]	; (1000e428 <platform_register_ble_msg_handler+0x3c>)
1000e400:	687a      	ldr	r2, [r7, #4]
1000e402:	601a      	str	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e404:	230f      	movs	r3, #15
1000e406:	18fb      	adds	r3, r7, r3
1000e408:	2200      	movs	r2, #0
1000e40a:	701a      	strb	r2, [r3, #0]
1000e40c:	e003      	b.n	1000e416 <platform_register_ble_msg_handler+0x2a>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e40e:	230f      	movs	r3, #15
1000e410:	18fb      	adds	r3, r7, r3
1000e412:	2205      	movs	r2, #5
1000e414:	701a      	strb	r2, [r3, #0]
	}
	return status;
1000e416:	230f      	movs	r3, #15
1000e418:	18fb      	adds	r3, r7, r3
1000e41a:	781b      	ldrb	r3, [r3, #0]
}
1000e41c:	1c18      	adds	r0, r3, #0
1000e41e:	46bd      	mov	sp, r7
1000e420:	b004      	add	sp, #16
1000e422:	bd80      	pop	{r7, pc}
1000e424:	100167a4 	.word	0x100167a4
1000e428:	100167a8 	.word	0x100167a8

1000e42c <at_ke_msg_send>:

static void at_ke_msg_send(void const * param_ptr)
{
1000e42c:	b580      	push	{r7, lr}
1000e42e:	b084      	sub	sp, #16
1000e430:	af00      	add	r7, sp, #0
1000e432:	6078      	str	r0, [r7, #4]
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000e434:	4b18      	ldr	r3, [pc, #96]	; (1000e498 <at_ke_msg_send+0x6c>)
1000e436:	681b      	ldr	r3, [r3, #0]
1000e438:	b2da      	uxtb	r2, r3
1000e43a:	230f      	movs	r3, #15
1000e43c:	18fb      	adds	r3, r7, r3
1000e43e:	2101      	movs	r1, #1
1000e440:	400a      	ands	r2, r1
1000e442:	701a      	strb	r2, [r3, #0]
	ke_msg_send(param_ptr);
1000e444:	4b15      	ldr	r3, [pc, #84]	; (1000e49c <at_ke_msg_send+0x70>)
1000e446:	681b      	ldr	r3, [r3, #0]
1000e448:	687a      	ldr	r2, [r7, #4]
1000e44a:	1c10      	adds	r0, r2, #0
1000e44c:	4798      	blx	r3
	if(osc_en == 0)
1000e44e:	230f      	movs	r3, #15
1000e450:	18fb      	adds	r3, r7, r3
1000e452:	781b      	ldrb	r3, [r3, #0]
1000e454:	2b00      	cmp	r3, #0
1000e456:	d115      	bne.n	1000e484 <at_ke_msg_send+0x58>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000e458:	4b11      	ldr	r3, [pc, #68]	; (1000e4a0 <at_ke_msg_send+0x74>)
1000e45a:	681b      	ldr	r3, [r3, #0]
1000e45c:	2002      	movs	r0, #2
1000e45e:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000e460:	4b10      	ldr	r3, [pc, #64]	; (1000e4a4 <at_ke_msg_send+0x78>)
1000e462:	681b      	ldr	r3, [r3, #0]
1000e464:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000e466:	46c0      	nop			; (mov r8, r8)
1000e468:	4b0f      	ldr	r3, [pc, #60]	; (1000e4a8 <at_ke_msg_send+0x7c>)
1000e46a:	681b      	ldr	r3, [r3, #0]
1000e46c:	2003      	movs	r0, #3
1000e46e:	4798      	blx	r3
1000e470:	1e03      	subs	r3, r0, #0
1000e472:	d1f9      	bne.n	1000e468 <at_ke_msg_send+0x3c>
		pwr_disable_arm_wakeup(1<<1);
1000e474:	4b0d      	ldr	r3, [pc, #52]	; (1000e4ac <at_ke_msg_send+0x80>)
1000e476:	681b      	ldr	r3, [r3, #0]
1000e478:	2002      	movs	r0, #2
1000e47a:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000e47c:	4b0c      	ldr	r3, [pc, #48]	; (1000e4b0 <at_ke_msg_send+0x84>)
1000e47e:	2201      	movs	r2, #1
1000e480:	601a      	str	r2, [r3, #0]
1000e482:	e005      	b.n	1000e490 <at_ke_msg_send+0x64>
		#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		os_sem_up(gstrFwSem);
1000e484:	4b0b      	ldr	r3, [pc, #44]	; (1000e4b4 <at_ke_msg_send+0x88>)
1000e486:	681a      	ldr	r2, [r3, #0]
1000e488:	4b0b      	ldr	r3, [pc, #44]	; (1000e4b8 <at_ke_msg_send+0x8c>)
1000e48a:	681b      	ldr	r3, [r3, #0]
1000e48c:	1c18      	adds	r0, r3, #0
1000e48e:	4790      	blx	r2
	}
}
1000e490:	46bd      	mov	sp, r7
1000e492:	b004      	add	sp, #16
1000e494:	bd80      	pop	{r7, pc}
1000e496:	46c0      	nop			; (mov r8, r8)
1000e498:	4000b1ec 	.word	0x4000b1ec
1000e49c:	10016784 	.word	0x10016784
1000e4a0:	1001676c 	.word	0x1001676c
1000e4a4:	10016774 	.word	0x10016774
1000e4a8:	10016778 	.word	0x10016778
1000e4ac:	10016770 	.word	0x10016770
1000e4b0:	4000b020 	.word	0x4000b020
1000e4b4:	1001678c 	.word	0x1001678c
1000e4b8:	1001677c 	.word	0x1001677c

1000e4bc <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e4bc:	b590      	push	{r4, r7, lr}
1000e4be:	b087      	sub	sp, #28
1000e4c0:	af00      	add	r7, sp, #0
1000e4c2:	6078      	str	r0, [r7, #4]
1000e4c4:	6039      	str	r1, [r7, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
1000e4c6:	687b      	ldr	r3, [r7, #4]
1000e4c8:	617b      	str	r3, [r7, #20]
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000e4ca:	2312      	movs	r3, #18
1000e4cc:	18fb      	adds	r3, r7, r3
1000e4ce:	697a      	ldr	r2, [r7, #20]
1000e4d0:	8852      	ldrh	r2, [r2, #2]
1000e4d2:	801a      	strh	r2, [r3, #0]
	if(gapm_get_task_from_id != NULL)
1000e4d4:	4b1b      	ldr	r3, [pc, #108]	; (1000e544 <platform_interface_send+0x88>)
1000e4d6:	681b      	ldr	r3, [r3, #0]
1000e4d8:	2b00      	cmp	r3, #0
1000e4da:	d00a      	beq.n	1000e4f2 <platform_interface_send+0x36>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e4dc:	4b19      	ldr	r3, [pc, #100]	; (1000e544 <platform_interface_send+0x88>)
1000e4de:	681b      	ldr	r3, [r3, #0]
1000e4e0:	2212      	movs	r2, #18
1000e4e2:	18ba      	adds	r2, r7, r2
1000e4e4:	8812      	ldrh	r2, [r2, #0]
1000e4e6:	1c10      	adds	r0, r2, #0
1000e4e8:	4798      	blx	r3
1000e4ea:	1c03      	adds	r3, r0, #0
1000e4ec:	1c1a      	adds	r2, r3, #0
1000e4ee:	697b      	ldr	r3, [r7, #20]
1000e4f0:	805a      	strh	r2, [r3, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e4f2:	4b15      	ldr	r3, [pc, #84]	; (1000e548 <platform_interface_send+0x8c>)
1000e4f4:	681c      	ldr	r4, [r3, #0]
1000e4f6:	697b      	ldr	r3, [r7, #20]
1000e4f8:	8818      	ldrh	r0, [r3, #0]
1000e4fa:	697b      	ldr	r3, [r7, #20]
1000e4fc:	8859      	ldrh	r1, [r3, #2]
1000e4fe:	697b      	ldr	r3, [r7, #20]
1000e500:	889a      	ldrh	r2, [r3, #4]
1000e502:	697b      	ldr	r3, [r7, #20]
1000e504:	88db      	ldrh	r3, [r3, #6]
1000e506:	47a0      	blx	r4
1000e508:	1c03      	adds	r3, r0, #0
1000e50a:	60fb      	str	r3, [r7, #12]
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e50c:	697b      	ldr	r3, [r7, #20]
1000e50e:	88db      	ldrh	r3, [r3, #6]
1000e510:	2b00      	cmp	r3, #0
1000e512:	d104      	bne.n	1000e51e <platform_interface_send+0x62>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e514:	68fb      	ldr	r3, [r7, #12]
1000e516:	1c18      	adds	r0, r3, #0
1000e518:	4b0c      	ldr	r3, [pc, #48]	; (1000e54c <platform_interface_send+0x90>)
1000e51a:	4798      	blx	r3
1000e51c:	e00f      	b.n	1000e53e <platform_interface_send+0x82>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e51e:	687b      	ldr	r3, [r7, #4]
1000e520:	3308      	adds	r3, #8
1000e522:	1c1a      	adds	r2, r3, #0
1000e524:	697b      	ldr	r3, [r7, #20]
1000e526:	88db      	ldrh	r3, [r3, #6]
1000e528:	1c1c      	adds	r4, r3, #0
1000e52a:	68fb      	ldr	r3, [r7, #12]
1000e52c:	1c18      	adds	r0, r3, #0
1000e52e:	1c11      	adds	r1, r2, #0
1000e530:	1c22      	adds	r2, r4, #0
1000e532:	4b07      	ldr	r3, [pc, #28]	; (1000e550 <platform_interface_send+0x94>)
1000e534:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e536:	68fb      	ldr	r3, [r7, #12]
1000e538:	1c18      	adds	r0, r3, #0
1000e53a:	4b04      	ldr	r3, [pc, #16]	; (1000e54c <platform_interface_send+0x90>)
1000e53c:	4798      	blx	r3
	}
}
1000e53e:	46bd      	mov	sp, r7
1000e540:	b007      	add	sp, #28
1000e542:	bd90      	pop	{r4, r7, pc}
1000e544:	1001679c 	.word	0x1001679c
1000e548:	10016788 	.word	0x10016788
1000e54c:	1000e42d 	.word	0x1000e42d
1000e550:	100133db 	.word	0x100133db

1000e554 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e554:	b590      	push	{r4, r7, lr}
1000e556:	b085      	sub	sp, #20
1000e558:	af00      	add	r7, sp, #0
1000e55a:	1c04      	adds	r4, r0, #0
1000e55c:	1c08      	adds	r0, r1, #0
1000e55e:	603a      	str	r2, [r7, #0]
1000e560:	1c19      	adds	r1, r3, #0
1000e562:	1dfb      	adds	r3, r7, #7
1000e564:	1c22      	adds	r2, r4, #0
1000e566:	701a      	strb	r2, [r3, #0]
1000e568:	1dbb      	adds	r3, r7, #6
1000e56a:	1c02      	adds	r2, r0, #0
1000e56c:	701a      	strb	r2, [r3, #0]
1000e56e:	1d3b      	adds	r3, r7, #4
1000e570:	1c0a      	adds	r2, r1, #0
1000e572:	801a      	strh	r2, [r3, #0]
	void* params;
//#if (CHIPVERSION_A4)	
	os_sem_up(gstrFwSem);
1000e574:	4b1a      	ldr	r3, [pc, #104]	; (1000e5e0 <send_plf_int_msg_ind+0x8c>)
1000e576:	681a      	ldr	r2, [r3, #0]
1000e578:	4b1a      	ldr	r3, [pc, #104]	; (1000e5e4 <send_plf_int_msg_ind+0x90>)
1000e57a:	681b      	ldr	r3, [r3, #0]
1000e57c:	1c18      	adds	r0, r3, #0
1000e57e:	4790      	blx	r2
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e580:	4b19      	ldr	r3, [pc, #100]	; (1000e5e8 <send_plf_int_msg_ind+0x94>)
1000e582:	681c      	ldr	r4, [r3, #0]
1000e584:	1dbb      	adds	r3, r7, #6
1000e586:	781b      	ldrb	r3, [r3, #0]
1000e588:	021b      	lsls	r3, r3, #8
1000e58a:	b29a      	uxth	r2, r3
1000e58c:	1dfb      	adds	r3, r7, #7
1000e58e:	781b      	ldrb	r3, [r3, #0]
1000e590:	b29b      	uxth	r3, r3
1000e592:	4313      	orrs	r3, r2
1000e594:	b29b      	uxth	r3, r3
1000e596:	b29a      	uxth	r2, r3
1000e598:	23a0      	movs	r3, #160	; 0xa0
1000e59a:	00d9      	lsls	r1, r3, #3
1000e59c:	1d3b      	adds	r3, r7, #4
1000e59e:	881b      	ldrh	r3, [r3, #0]
1000e5a0:	1c08      	adds	r0, r1, #0
1000e5a2:	2105      	movs	r1, #5
1000e5a4:	47a0      	blx	r4
1000e5a6:	1c03      	adds	r3, r0, #0
1000e5a8:	60fb      	str	r3, [r7, #12]
											
	//no params
	if(params != NULL) {
1000e5aa:	68fb      	ldr	r3, [r7, #12]
1000e5ac:	2b00      	cmp	r3, #0
1000e5ae:	d013      	beq.n	1000e5d8 <send_plf_int_msg_ind+0x84>
		if((data_len != 0) && (NULL != data))
1000e5b0:	1d3b      	adds	r3, r7, #4
1000e5b2:	881b      	ldrh	r3, [r3, #0]
1000e5b4:	2b00      	cmp	r3, #0
1000e5b6:	d00b      	beq.n	1000e5d0 <send_plf_int_msg_ind+0x7c>
1000e5b8:	683b      	ldr	r3, [r7, #0]
1000e5ba:	2b00      	cmp	r3, #0
1000e5bc:	d008      	beq.n	1000e5d0 <send_plf_int_msg_ind+0x7c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e5be:	1d3b      	adds	r3, r7, #4
1000e5c0:	881b      	ldrh	r3, [r3, #0]
1000e5c2:	68f9      	ldr	r1, [r7, #12]
1000e5c4:	683a      	ldr	r2, [r7, #0]
1000e5c6:	1c08      	adds	r0, r1, #0
1000e5c8:	1c11      	adds	r1, r2, #0
1000e5ca:	1c1a      	adds	r2, r3, #0
1000e5cc:	4b07      	ldr	r3, [pc, #28]	; (1000e5ec <send_plf_int_msg_ind+0x98>)
1000e5ce:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e5d0:	68fb      	ldr	r3, [r7, #12]
1000e5d2:	1c18      	adds	r0, r3, #0
1000e5d4:	4b06      	ldr	r3, [pc, #24]	; (1000e5f0 <send_plf_int_msg_ind+0x9c>)
1000e5d6:	4798      	blx	r3
	}
}
1000e5d8:	46bd      	mov	sp, r7
1000e5da:	b005      	add	sp, #20
1000e5dc:	bd90      	pop	{r4, r7, pc}
1000e5de:	46c0      	nop			; (mov r8, r8)
1000e5e0:	1001678c 	.word	0x1001678c
1000e5e4:	1001677c 	.word	0x1001677c
1000e5e8:	10016788 	.word	0x10016788
1000e5ec:	100133db 	.word	0x100133db
1000e5f0:	1000e42d 	.word	0x1000e42d

1000e5f4 <NMI_MsgQueueDestroyOnKeID>:
	os_sem_up(&pHandle->strCriticalSection);
	return MsgQueueNoMsgs;
}
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
1000e5f4:	b580      	push	{r7, lr}
1000e5f6:	b086      	sub	sp, #24
1000e5f8:	af00      	add	r7, sp, #0
1000e5fa:	6078      	str	r0, [r7, #4]
1000e5fc:	1c0a      	adds	r2, r1, #0
1000e5fe:	1cbb      	adds	r3, r7, #2
1000e600:	801a      	strh	r2, [r3, #0]
	int num_of_freed=0;
1000e602:	2300      	movs	r3, #0
1000e604:	617b      	str	r3, [r7, #20]
	Message * current , *prev = NULL;
1000e606:	2300      	movs	r3, #0
1000e608:	60fb      	str	r3, [r7, #12]
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e60a:	687b      	ldr	r3, [r7, #4]
1000e60c:	2b00      	cmp	r3, #0
1000e60e:	d105      	bne.n	1000e61c <NMI_MsgQueueDestroyOnKeID+0x28>
1000e610:	687b      	ldr	r3, [r7, #4]
1000e612:	6a1b      	ldr	r3, [r3, #32]
1000e614:	2b00      	cmp	r3, #0
1000e616:	d101      	bne.n	1000e61c <NMI_MsgQueueDestroyOnKeID+0x28>
	{
		return num_of_freed;
1000e618:	697b      	ldr	r3, [r7, #20]
1000e61a:	e03f      	b.n	1000e69c <NMI_MsgQueueDestroyOnKeID+0xa8>
	}

	current = pHandle->pstrMessageList;
1000e61c:	687b      	ldr	r3, [r7, #4]
1000e61e:	6a1b      	ldr	r3, [r3, #32]
1000e620:	613b      	str	r3, [r7, #16]
	os_sem_down(&pHandle->strCriticalSection);
1000e622:	4b20      	ldr	r3, [pc, #128]	; (1000e6a4 <NMI_MsgQueueDestroyOnKeID+0xb0>)
1000e624:	681b      	ldr	r3, [r3, #0]
1000e626:	687a      	ldr	r2, [r7, #4]
1000e628:	3214      	adds	r2, #20
1000e62a:	1c10      	adds	r0, r2, #0
1000e62c:	4798      	blx	r3
	while(NULL != current)
1000e62e:	e02b      	b.n	1000e688 <NMI_MsgQueueDestroyOnKeID+0x94>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e630:	693b      	ldr	r3, [r7, #16]
1000e632:	681b      	ldr	r3, [r3, #0]
1000e634:	889b      	ldrh	r3, [r3, #4]
1000e636:	1cba      	adds	r2, r7, #2
1000e638:	8812      	ldrh	r2, [r2, #0]
1000e63a:	429a      	cmp	r2, r3
1000e63c:	d11f      	bne.n	1000e67e <NMI_MsgQueueDestroyOnKeID+0x8a>
		{
			num_of_freed++;
1000e63e:	697b      	ldr	r3, [r7, #20]
1000e640:	3301      	adds	r3, #1
1000e642:	617b      	str	r3, [r7, #20]
			if(NULL != prev)
1000e644:	68fb      	ldr	r3, [r7, #12]
1000e646:	2b00      	cmp	r3, #0
1000e648:	d00c      	beq.n	1000e664 <NMI_MsgQueueDestroyOnKeID+0x70>
			{
				prev->pstrNext = current->pstrNext;
1000e64a:	693b      	ldr	r3, [r7, #16]
1000e64c:	689a      	ldr	r2, [r3, #8]
1000e64e:	68fb      	ldr	r3, [r7, #12]
1000e650:	609a      	str	r2, [r3, #8]
				ke_free(current);
1000e652:	4b15      	ldr	r3, [pc, #84]	; (1000e6a8 <NMI_MsgQueueDestroyOnKeID+0xb4>)
1000e654:	681b      	ldr	r3, [r3, #0]
1000e656:	693a      	ldr	r2, [r7, #16]
1000e658:	1c10      	adds	r0, r2, #0
1000e65a:	4798      	blx	r3
				current = prev->pstrNext;
1000e65c:	68fb      	ldr	r3, [r7, #12]
1000e65e:	689b      	ldr	r3, [r3, #8]
1000e660:	613b      	str	r3, [r7, #16]
1000e662:	e011      	b.n	1000e688 <NMI_MsgQueueDestroyOnKeID+0x94>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e664:	693b      	ldr	r3, [r7, #16]
1000e666:	689a      	ldr	r2, [r3, #8]
1000e668:	687b      	ldr	r3, [r7, #4]
1000e66a:	621a      	str	r2, [r3, #32]
				ke_free(current);
1000e66c:	4b0e      	ldr	r3, [pc, #56]	; (1000e6a8 <NMI_MsgQueueDestroyOnKeID+0xb4>)
1000e66e:	681b      	ldr	r3, [r3, #0]
1000e670:	693a      	ldr	r2, [r7, #16]
1000e672:	1c10      	adds	r0, r2, #0
1000e674:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e676:	687b      	ldr	r3, [r7, #4]
1000e678:	6a1b      	ldr	r3, [r3, #32]
1000e67a:	613b      	str	r3, [r7, #16]
1000e67c:	e004      	b.n	1000e688 <NMI_MsgQueueDestroyOnKeID+0x94>
			}
		}
		else
		{
			prev = current;
1000e67e:	693b      	ldr	r3, [r7, #16]
1000e680:	60fb      	str	r3, [r7, #12]
			current = current ->pstrNext;
1000e682:	693b      	ldr	r3, [r7, #16]
1000e684:	689b      	ldr	r3, [r3, #8]
1000e686:	613b      	str	r3, [r7, #16]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e688:	693b      	ldr	r3, [r7, #16]
1000e68a:	2b00      	cmp	r3, #0
1000e68c:	d1d0      	bne.n	1000e630 <NMI_MsgQueueDestroyOnKeID+0x3c>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e68e:	4b07      	ldr	r3, [pc, #28]	; (1000e6ac <NMI_MsgQueueDestroyOnKeID+0xb8>)
1000e690:	681b      	ldr	r3, [r3, #0]
1000e692:	687a      	ldr	r2, [r7, #4]
1000e694:	3214      	adds	r2, #20
1000e696:	1c10      	adds	r0, r2, #0
1000e698:	4798      	blx	r3
	return num_of_freed;
1000e69a:	697b      	ldr	r3, [r7, #20]
}
1000e69c:	1c18      	adds	r0, r3, #0
1000e69e:	46bd      	mov	sp, r7
1000e6a0:	b006      	add	sp, #24
1000e6a2:	bd80      	pop	{r7, pc}
1000e6a4:	10016790 	.word	0x10016790
1000e6a8:	10016798 	.word	0x10016798
1000e6ac:	1001678c 	.word	0x1001678c

1000e6b0 <platform_start_event_timeout>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
static void platform_start_event_timeout(uint32_t timeout)
{
1000e6b0:	b580      	push	{r7, lr}
1000e6b2:	b086      	sub	sp, #24
1000e6b4:	af00      	add	r7, sp, #0
1000e6b6:	6078      	str	r0, [r7, #4]
	uint8_t msg[8+5] = {0};
1000e6b8:	2308      	movs	r3, #8
1000e6ba:	18fb      	adds	r3, r7, r3
1000e6bc:	2200      	movs	r2, #0
1000e6be:	601a      	str	r2, [r3, #0]
1000e6c0:	2200      	movs	r2, #0
1000e6c2:	605a      	str	r2, [r3, #4]
1000e6c4:	2200      	movs	r2, #0
1000e6c6:	609a      	str	r2, [r3, #8]
1000e6c8:	2200      	movs	r2, #0
1000e6ca:	731a      	strb	r2, [r3, #12]
	uint8_t u16TxLen = 0;
1000e6cc:	2317      	movs	r3, #23
1000e6ce:	18fb      	adds	r3, r7, r3
1000e6d0:	2200      	movs	r2, #0
1000e6d2:	701a      	strb	r2, [r3, #0]

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e6d4:	2317      	movs	r3, #23
1000e6d6:	18fb      	adds	r3, r7, r3
1000e6d8:	781b      	ldrb	r3, [r3, #0]
1000e6da:	2217      	movs	r2, #23
1000e6dc:	18ba      	adds	r2, r7, r2
1000e6de:	1c59      	adds	r1, r3, #1
1000e6e0:	7011      	strb	r1, [r2, #0]
1000e6e2:	1c1a      	adds	r2, r3, #0
1000e6e4:	2308      	movs	r3, #8
1000e6e6:	18fb      	adds	r3, r7, r3
1000e6e8:	2119      	movs	r1, #25
1000e6ea:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e6ec:	2317      	movs	r3, #23
1000e6ee:	18fb      	adds	r3, r7, r3
1000e6f0:	781b      	ldrb	r3, [r3, #0]
1000e6f2:	2217      	movs	r2, #23
1000e6f4:	18ba      	adds	r2, r7, r2
1000e6f6:	1c59      	adds	r1, r3, #1
1000e6f8:	7011      	strb	r1, [r2, #0]
1000e6fa:	1c1a      	adds	r2, r3, #0
1000e6fc:	2308      	movs	r3, #8
1000e6fe:	18fb      	adds	r3, r7, r3
1000e700:	2103      	movs	r1, #3
1000e702:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e704:	2317      	movs	r3, #23
1000e706:	18fb      	adds	r3, r7, r3
1000e708:	781b      	ldrb	r3, [r3, #0]
1000e70a:	2217      	movs	r2, #23
1000e70c:	18ba      	adds	r2, r7, r2
1000e70e:	1c59      	adds	r1, r3, #1
1000e710:	7011      	strb	r1, [r2, #0]
1000e712:	1c1a      	adds	r2, r3, #0
1000e714:	2308      	movs	r3, #8
1000e716:	18fb      	adds	r3, r7, r3
1000e718:	2103      	movs	r1, #3
1000e71a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
1000e71c:	2317      	movs	r3, #23
1000e71e:	18fb      	adds	r3, r7, r3
1000e720:	781b      	ldrb	r3, [r3, #0]
1000e722:	2217      	movs	r2, #23
1000e724:	18ba      	adds	r2, r7, r2
1000e726:	1c59      	adds	r1, r3, #1
1000e728:	7011      	strb	r1, [r2, #0]
1000e72a:	1c1a      	adds	r2, r3, #0
1000e72c:	2308      	movs	r3, #8
1000e72e:	18fb      	adds	r3, r7, r3
1000e730:	2100      	movs	r1, #0
1000e732:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e734:	2317      	movs	r3, #23
1000e736:	18fb      	adds	r3, r7, r3
1000e738:	781b      	ldrb	r3, [r3, #0]
1000e73a:	2217      	movs	r2, #23
1000e73c:	18ba      	adds	r2, r7, r2
1000e73e:	1c59      	adds	r1, r3, #1
1000e740:	7011      	strb	r1, [r2, #0]
1000e742:	1c1a      	adds	r2, r3, #0
1000e744:	2308      	movs	r3, #8
1000e746:	18fb      	adds	r3, r7, r3
1000e748:	2105      	movs	r1, #5
1000e74a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
1000e74c:	2317      	movs	r3, #23
1000e74e:	18fb      	adds	r3, r7, r3
1000e750:	781b      	ldrb	r3, [r3, #0]
1000e752:	2217      	movs	r2, #23
1000e754:	18ba      	adds	r2, r7, r2
1000e756:	1c59      	adds	r1, r3, #1
1000e758:	7011      	strb	r1, [r2, #0]
1000e75a:	1c1a      	adds	r2, r3, #0
1000e75c:	2308      	movs	r3, #8
1000e75e:	18fb      	adds	r3, r7, r3
1000e760:	2100      	movs	r1, #0
1000e762:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e764:	2317      	movs	r3, #23
1000e766:	18fb      	adds	r3, r7, r3
1000e768:	781b      	ldrb	r3, [r3, #0]
1000e76a:	2217      	movs	r2, #23
1000e76c:	18ba      	adds	r2, r7, r2
1000e76e:	1c59      	adds	r1, r3, #1
1000e770:	7011      	strb	r1, [r2, #0]
1000e772:	1c1a      	adds	r2, r3, #0
1000e774:	2308      	movs	r3, #8
1000e776:	18fb      	adds	r3, r7, r3
1000e778:	2105      	movs	r1, #5
1000e77a:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
1000e77c:	2317      	movs	r3, #23
1000e77e:	18fb      	adds	r3, r7, r3
1000e780:	781b      	ldrb	r3, [r3, #0]
1000e782:	2217      	movs	r2, #23
1000e784:	18ba      	adds	r2, r7, r2
1000e786:	1c59      	adds	r1, r3, #1
1000e788:	7011      	strb	r1, [r2, #0]
1000e78a:	1c1a      	adds	r2, r3, #0
1000e78c:	2308      	movs	r3, #8
1000e78e:	18fb      	adds	r3, r7, r3
1000e790:	2100      	movs	r1, #0
1000e792:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e794:	2317      	movs	r3, #23
1000e796:	18fb      	adds	r3, r7, r3
1000e798:	781b      	ldrb	r3, [r3, #0]
1000e79a:	2217      	movs	r2, #23
1000e79c:	18ba      	adds	r2, r7, r2
1000e79e:	1c59      	adds	r1, r3, #1
1000e7a0:	7011      	strb	r1, [r2, #0]
1000e7a2:	1c1a      	adds	r2, r3, #0
1000e7a4:	687b      	ldr	r3, [r7, #4]
1000e7a6:	b2d9      	uxtb	r1, r3
1000e7a8:	2308      	movs	r3, #8
1000e7aa:	18fb      	adds	r3, r7, r3
1000e7ac:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e7ae:	2317      	movs	r3, #23
1000e7b0:	18fb      	adds	r3, r7, r3
1000e7b2:	781b      	ldrb	r3, [r3, #0]
1000e7b4:	2217      	movs	r2, #23
1000e7b6:	18ba      	adds	r2, r7, r2
1000e7b8:	1c59      	adds	r1, r3, #1
1000e7ba:	7011      	strb	r1, [r2, #0]
1000e7bc:	1c1a      	adds	r2, r3, #0
1000e7be:	687b      	ldr	r3, [r7, #4]
1000e7c0:	0a1b      	lsrs	r3, r3, #8
1000e7c2:	b2d9      	uxtb	r1, r3
1000e7c4:	2308      	movs	r3, #8
1000e7c6:	18fb      	adds	r3, r7, r3
1000e7c8:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e7ca:	2317      	movs	r3, #23
1000e7cc:	18fb      	adds	r3, r7, r3
1000e7ce:	781b      	ldrb	r3, [r3, #0]
1000e7d0:	2217      	movs	r2, #23
1000e7d2:	18ba      	adds	r2, r7, r2
1000e7d4:	1c59      	adds	r1, r3, #1
1000e7d6:	7011      	strb	r1, [r2, #0]
1000e7d8:	1c1a      	adds	r2, r3, #0
1000e7da:	687b      	ldr	r3, [r7, #4]
1000e7dc:	0c1b      	lsrs	r3, r3, #16
1000e7de:	b2d9      	uxtb	r1, r3
1000e7e0:	2308      	movs	r3, #8
1000e7e2:	18fb      	adds	r3, r7, r3
1000e7e4:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e7e6:	2317      	movs	r3, #23
1000e7e8:	18fb      	adds	r3, r7, r3
1000e7ea:	781b      	ldrb	r3, [r3, #0]
1000e7ec:	2217      	movs	r2, #23
1000e7ee:	18ba      	adds	r2, r7, r2
1000e7f0:	1c59      	adds	r1, r3, #1
1000e7f2:	7011      	strb	r1, [r2, #0]
1000e7f4:	1c1a      	adds	r2, r3, #0
1000e7f6:	687b      	ldr	r3, [r7, #4]
1000e7f8:	0e1b      	lsrs	r3, r3, #24
1000e7fa:	b2d9      	uxtb	r1, r3
1000e7fc:	2308      	movs	r3, #8
1000e7fe:	18fb      	adds	r3, r7, r3
1000e800:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e802:	2317      	movs	r3, #23
1000e804:	18fb      	adds	r3, r7, r3
1000e806:	781b      	ldrb	r3, [r3, #0]
1000e808:	2217      	movs	r2, #23
1000e80a:	18ba      	adds	r2, r7, r2
1000e80c:	1c59      	adds	r1, r3, #1
1000e80e:	7011      	strb	r1, [r2, #0]
1000e810:	1c1a      	adds	r2, r3, #0
1000e812:	2308      	movs	r3, #8
1000e814:	18fb      	adds	r3, r7, r3
1000e816:	2101      	movs	r1, #1
1000e818:	5499      	strb	r1, [r3, r2]
	
	platform_interface_send(msg, u16TxLen);
1000e81a:	2317      	movs	r3, #23
1000e81c:	18fb      	adds	r3, r7, r3
1000e81e:	781b      	ldrb	r3, [r3, #0]
1000e820:	2208      	movs	r2, #8
1000e822:	18ba      	adds	r2, r7, r2
1000e824:	1c10      	adds	r0, r2, #0
1000e826:	1c19      	adds	r1, r3, #0
1000e828:	4b02      	ldr	r3, [pc, #8]	; (1000e834 <platform_start_event_timeout+0x184>)
1000e82a:	4798      	blx	r3
}
1000e82c:	46bd      	mov	sp, r7
1000e82e:	b006      	add	sp, #24
1000e830:	bd80      	pop	{r7, pc}
1000e832:	46c0      	nop			; (mov r8, r8)
1000e834:	1000e4bd 	.word	0x1000e4bd

1000e838 <platform_stop_event_timeout>:

static void platform_stop_event_timeout(void)
{
1000e838:	b580      	push	{r7, lr}
1000e83a:	b084      	sub	sp, #16
1000e83c:	af00      	add	r7, sp, #0
	uint8_t msg[8+5] = {0};
1000e83e:	1c3b      	adds	r3, r7, #0
1000e840:	2200      	movs	r2, #0
1000e842:	601a      	str	r2, [r3, #0]
1000e844:	2200      	movs	r2, #0
1000e846:	605a      	str	r2, [r3, #4]
1000e848:	2200      	movs	r2, #0
1000e84a:	609a      	str	r2, [r3, #8]
1000e84c:	2200      	movs	r2, #0
1000e84e:	731a      	strb	r2, [r3, #12]
	uint8_t u16TxLen = 0;
1000e850:	230f      	movs	r3, #15
1000e852:	18fb      	adds	r3, r7, r3
1000e854:	2200      	movs	r2, #0
1000e856:	701a      	strb	r2, [r3, #0]

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e858:	230f      	movs	r3, #15
1000e85a:	18fb      	adds	r3, r7, r3
1000e85c:	781b      	ldrb	r3, [r3, #0]
1000e85e:	220f      	movs	r2, #15
1000e860:	18ba      	adds	r2, r7, r2
1000e862:	1c59      	adds	r1, r3, #1
1000e864:	7011      	strb	r1, [r2, #0]
1000e866:	1c1a      	adds	r2, r3, #0
1000e868:	1c3b      	adds	r3, r7, #0
1000e86a:	2119      	movs	r1, #25
1000e86c:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e86e:	230f      	movs	r3, #15
1000e870:	18fb      	adds	r3, r7, r3
1000e872:	781b      	ldrb	r3, [r3, #0]
1000e874:	220f      	movs	r2, #15
1000e876:	18ba      	adds	r2, r7, r2
1000e878:	1c59      	adds	r1, r3, #1
1000e87a:	7011      	strb	r1, [r2, #0]
1000e87c:	1c1a      	adds	r2, r3, #0
1000e87e:	1c3b      	adds	r3, r7, #0
1000e880:	2103      	movs	r1, #3
1000e882:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e884:	230f      	movs	r3, #15
1000e886:	18fb      	adds	r3, r7, r3
1000e888:	781b      	ldrb	r3, [r3, #0]
1000e88a:	220f      	movs	r2, #15
1000e88c:	18ba      	adds	r2, r7, r2
1000e88e:	1c59      	adds	r1, r3, #1
1000e890:	7011      	strb	r1, [r2, #0]
1000e892:	1c1a      	adds	r2, r3, #0
1000e894:	1c3b      	adds	r3, r7, #0
1000e896:	2103      	movs	r1, #3
1000e898:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
1000e89a:	230f      	movs	r3, #15
1000e89c:	18fb      	adds	r3, r7, r3
1000e89e:	781b      	ldrb	r3, [r3, #0]
1000e8a0:	220f      	movs	r2, #15
1000e8a2:	18ba      	adds	r2, r7, r2
1000e8a4:	1c59      	adds	r1, r3, #1
1000e8a6:	7011      	strb	r1, [r2, #0]
1000e8a8:	1c1a      	adds	r2, r3, #0
1000e8aa:	1c3b      	adds	r3, r7, #0
1000e8ac:	2100      	movs	r1, #0
1000e8ae:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e8b0:	230f      	movs	r3, #15
1000e8b2:	18fb      	adds	r3, r7, r3
1000e8b4:	781b      	ldrb	r3, [r3, #0]
1000e8b6:	220f      	movs	r2, #15
1000e8b8:	18ba      	adds	r2, r7, r2
1000e8ba:	1c59      	adds	r1, r3, #1
1000e8bc:	7011      	strb	r1, [r2, #0]
1000e8be:	1c1a      	adds	r2, r3, #0
1000e8c0:	1c3b      	adds	r3, r7, #0
1000e8c2:	2105      	movs	r1, #5
1000e8c4:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
1000e8c6:	230f      	movs	r3, #15
1000e8c8:	18fb      	adds	r3, r7, r3
1000e8ca:	781b      	ldrb	r3, [r3, #0]
1000e8cc:	220f      	movs	r2, #15
1000e8ce:	18ba      	adds	r2, r7, r2
1000e8d0:	1c59      	adds	r1, r3, #1
1000e8d2:	7011      	strb	r1, [r2, #0]
1000e8d4:	1c1a      	adds	r2, r3, #0
1000e8d6:	1c3b      	adds	r3, r7, #0
1000e8d8:	2100      	movs	r1, #0
1000e8da:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e8dc:	230f      	movs	r3, #15
1000e8de:	18fb      	adds	r3, r7, r3
1000e8e0:	781b      	ldrb	r3, [r3, #0]
1000e8e2:	220f      	movs	r2, #15
1000e8e4:	18ba      	adds	r2, r7, r2
1000e8e6:	1c59      	adds	r1, r3, #1
1000e8e8:	7011      	strb	r1, [r2, #0]
1000e8ea:	1c1a      	adds	r2, r3, #0
1000e8ec:	1c3b      	adds	r3, r7, #0
1000e8ee:	2105      	movs	r1, #5
1000e8f0:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
1000e8f2:	230f      	movs	r3, #15
1000e8f4:	18fb      	adds	r3, r7, r3
1000e8f6:	781b      	ldrb	r3, [r3, #0]
1000e8f8:	220f      	movs	r2, #15
1000e8fa:	18ba      	adds	r2, r7, r2
1000e8fc:	1c59      	adds	r1, r3, #1
1000e8fe:	7011      	strb	r1, [r2, #0]
1000e900:	1c1a      	adds	r2, r3, #0
1000e902:	1c3b      	adds	r3, r7, #0
1000e904:	2100      	movs	r1, #0
1000e906:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = (uint8_t)((0) & 0x00FF );
1000e908:	230f      	movs	r3, #15
1000e90a:	18fb      	adds	r3, r7, r3
1000e90c:	781b      	ldrb	r3, [r3, #0]
1000e90e:	220f      	movs	r2, #15
1000e910:	18ba      	adds	r2, r7, r2
1000e912:	1c59      	adds	r1, r3, #1
1000e914:	7011      	strb	r1, [r2, #0]
1000e916:	1c1a      	adds	r2, r3, #0
1000e918:	1c3b      	adds	r3, r7, #0
1000e91a:	2100      	movs	r1, #0
1000e91c:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 8) & 0x00FF) ;
1000e91e:	230f      	movs	r3, #15
1000e920:	18fb      	adds	r3, r7, r3
1000e922:	781b      	ldrb	r3, [r3, #0]
1000e924:	220f      	movs	r2, #15
1000e926:	18ba      	adds	r2, r7, r2
1000e928:	1c59      	adds	r1, r3, #1
1000e92a:	7011      	strb	r1, [r2, #0]
1000e92c:	1c1a      	adds	r2, r3, #0
1000e92e:	1c3b      	adds	r3, r7, #0
1000e930:	2100      	movs	r1, #0
1000e932:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
1000e934:	230f      	movs	r3, #15
1000e936:	18fb      	adds	r3, r7, r3
1000e938:	781b      	ldrb	r3, [r3, #0]
1000e93a:	220f      	movs	r2, #15
1000e93c:	18ba      	adds	r2, r7, r2
1000e93e:	1c59      	adds	r1, r3, #1
1000e940:	7011      	strb	r1, [r2, #0]
1000e942:	1c1a      	adds	r2, r3, #0
1000e944:	1c3b      	adds	r3, r7, #0
1000e946:	2100      	movs	r1, #0
1000e948:	5499      	strb	r1, [r3, r2]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
1000e94a:	230f      	movs	r3, #15
1000e94c:	18fb      	adds	r3, r7, r3
1000e94e:	781b      	ldrb	r3, [r3, #0]
1000e950:	220f      	movs	r2, #15
1000e952:	18ba      	adds	r2, r7, r2
1000e954:	1c59      	adds	r1, r3, #1
1000e956:	7011      	strb	r1, [r2, #0]
1000e958:	1c1a      	adds	r2, r3, #0
1000e95a:	1c3b      	adds	r3, r7, #0
1000e95c:	2100      	movs	r1, #0
1000e95e:	5499      	strb	r1, [r3, r2]
	
	msg[u16TxLen++] = ((0) & 0x00FF );
1000e960:	230f      	movs	r3, #15
1000e962:	18fb      	adds	r3, r7, r3
1000e964:	781b      	ldrb	r3, [r3, #0]
1000e966:	220f      	movs	r2, #15
1000e968:	18ba      	adds	r2, r7, r2
1000e96a:	1c59      	adds	r1, r3, #1
1000e96c:	7011      	strb	r1, [r2, #0]
1000e96e:	1c1a      	adds	r2, r3, #0
1000e970:	1c3b      	adds	r3, r7, #0
1000e972:	2100      	movs	r1, #0
1000e974:	5499      	strb	r1, [r3, r2]
	
	platform_interface_send(msg, u16TxLen);
1000e976:	230f      	movs	r3, #15
1000e978:	18fb      	adds	r3, r7, r3
1000e97a:	781b      	ldrb	r3, [r3, #0]
1000e97c:	1c3a      	adds	r2, r7, #0
1000e97e:	1c10      	adds	r0, r2, #0
1000e980:	1c19      	adds	r1, r3, #0
1000e982:	4b02      	ldr	r3, [pc, #8]	; (1000e98c <platform_stop_event_timeout+0x154>)
1000e984:	4798      	blx	r3
}
1000e986:	46bd      	mov	sp, r7
1000e988:	b004      	add	sp, #16
1000e98a:	bd80      	pop	{r7, pc}
1000e98c:	1000e4bd 	.word	0x1000e4bd

1000e990 <platform_event_wait>:

plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e990:	b590      	push	{r4, r7, lr}
1000e992:	b087      	sub	sp, #28
1000e994:	af00      	add	r7, sp, #0
1000e996:	6078      	str	r0, [r7, #4]
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
1000e998:	2317      	movs	r3, #23
1000e99a:	18fb      	adds	r3, r7, r3
1000e99c:	2200      	movs	r2, #0
1000e99e:	701a      	strb	r2, [r3, #0]
	uint8_t bEventTimeoutFlag = 0;
1000e9a0:	2316      	movs	r3, #22
1000e9a2:	18fb      	adds	r3, r7, r3
1000e9a4:	2200      	movs	r2, #0
1000e9a6:	701a      	strb	r2, [r3, #0]
	uint8_t bLoopAgain = 0;
1000e9a8:	2315      	movs	r3, #21
1000e9aa:	18fb      	adds	r3, r7, r3
1000e9ac:	2200      	movs	r2, #0
1000e9ae:	701a      	strb	r2, [r3, #0]
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e9b0:	687b      	ldr	r3, [r7, #4]
1000e9b2:	3301      	adds	r3, #1
1000e9b4:	d00b      	beq.n	1000e9ce <platform_event_wait+0x3e>
1000e9b6:	687b      	ldr	r3, [r7, #4]
1000e9b8:	2b00      	cmp	r3, #0
1000e9ba:	d008      	beq.n	1000e9ce <platform_event_wait+0x3e>
	{			
		platform_start_event_timeout(timeout-1);
1000e9bc:	687b      	ldr	r3, [r7, #4]
1000e9be:	3b01      	subs	r3, #1
1000e9c0:	1c18      	adds	r0, r3, #0
1000e9c2:	4b83      	ldr	r3, [pc, #524]	; (1000ebd0 <platform_event_wait+0x240>)
1000e9c4:	4798      	blx	r3
		bEventTimeoutFlag = 1;
1000e9c6:	2316      	movs	r3, #22
1000e9c8:	18fb      	adds	r3, r7, r3
1000e9ca:	2201      	movs	r2, #1
1000e9cc:	701a      	strb	r2, [r3, #0]
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e9ce:	4b81      	ldr	r3, [pc, #516]	; (1000ebd4 <platform_event_wait+0x244>)
1000e9d0:	681a      	ldr	r2, [r3, #0]
1000e9d2:	4b81      	ldr	r3, [pc, #516]	; (1000ebd8 <platform_event_wait+0x248>)
1000e9d4:	6819      	ldr	r1, [r3, #0]
1000e9d6:	4b81      	ldr	r3, [pc, #516]	; (1000ebdc <platform_event_wait+0x24c>)
1000e9d8:	1c08      	adds	r0, r1, #0
1000e9da:	1c19      	adds	r1, r3, #0
1000e9dc:	4790      	blx	r2
1000e9de:	1e03      	subs	r3, r0, #0
1000e9e0:	d000      	beq.n	1000e9e4 <platform_event_wait+0x54>
1000e9e2:	e0d1      	b.n	1000eb88 <platform_event_wait+0x1f8>
		{
			uint16_t msg_id = rcv_msg->id;
1000e9e4:	4b7d      	ldr	r3, [pc, #500]	; (1000ebdc <platform_event_wait+0x24c>)
1000e9e6:	681a      	ldr	r2, [r3, #0]
1000e9e8:	2312      	movs	r3, #18
1000e9ea:	18fb      	adds	r3, r7, r3
1000e9ec:	8892      	ldrh	r2, [r2, #4]
1000e9ee:	801a      	strh	r2, [r3, #0]
			uint16_t src_id = rcv_msg->src_id;
1000e9f0:	4b7a      	ldr	r3, [pc, #488]	; (1000ebdc <platform_event_wait+0x24c>)
1000e9f2:	681a      	ldr	r2, [r3, #0]
1000e9f4:	2310      	movs	r3, #16
1000e9f6:	18fb      	adds	r3, r7, r3
1000e9f8:	8912      	ldrh	r2, [r2, #8]
1000e9fa:	801a      	strh	r2, [r3, #0]
			uint8_t* data = (uint8_t*)rcv_msg->param;
1000e9fc:	4b77      	ldr	r3, [pc, #476]	; (1000ebdc <platform_event_wait+0x24c>)
1000e9fe:	681b      	ldr	r3, [r3, #0]
1000ea00:	330c      	adds	r3, #12
1000ea02:	60fb      	str	r3, [r7, #12]
			uint16_t len = rcv_msg->param_len;
1000ea04:	4b75      	ldr	r3, [pc, #468]	; (1000ebdc <platform_event_wait+0x24c>)
1000ea06:	681a      	ldr	r2, [r3, #0]
1000ea08:	230a      	movs	r3, #10
1000ea0a:	18fb      	adds	r3, r7, r3
1000ea0c:	8952      	ldrh	r2, [r2, #10]
1000ea0e:	801a      	strh	r2, [r3, #0]
			bLoopAgain = 0;
1000ea10:	2315      	movs	r3, #21
1000ea12:	18fb      	adds	r3, r7, r3
1000ea14:	2200      	movs	r2, #0
1000ea16:	701a      	strb	r2, [r3, #0]
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ea18:	4b70      	ldr	r3, [pc, #448]	; (1000ebdc <platform_event_wait+0x24c>)
1000ea1a:	681b      	ldr	r3, [r3, #0]
1000ea1c:	889a      	ldrh	r2, [r3, #4]
1000ea1e:	23cd      	movs	r3, #205	; 0xcd
1000ea20:	009b      	lsls	r3, r3, #2
1000ea22:	429a      	cmp	r2, r3
1000ea24:	d006      	beq.n	1000ea34 <platform_event_wait+0xa4>
1000ea26:	2316      	movs	r3, #22
1000ea28:	18fb      	adds	r3, r7, r3
1000ea2a:	781b      	ldrb	r3, [r3, #0]
1000ea2c:	2b00      	cmp	r3, #0
1000ea2e:	d001      	beq.n	1000ea34 <platform_event_wait+0xa4>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
1000ea30:	4b6b      	ldr	r3, [pc, #428]	; (1000ebe0 <platform_event_wait+0x250>)
1000ea32:	4798      	blx	r3
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000ea34:	2312      	movs	r3, #18
1000ea36:	18fb      	adds	r3, r7, r3
1000ea38:	881a      	ldrh	r2, [r3, #0]
1000ea3a:	23a0      	movs	r3, #160	; 0xa0
1000ea3c:	00db      	lsls	r3, r3, #3
1000ea3e:	429a      	cmp	r2, r3
1000ea40:	d13a      	bne.n	1000eab8 <platform_event_wait+0x128>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000ea42:	4b68      	ldr	r3, [pc, #416]	; (1000ebe4 <platform_event_wait+0x254>)
1000ea44:	881b      	ldrh	r3, [r3, #0]
1000ea46:	1c1a      	adds	r2, r3, #0
1000ea48:	230a      	movs	r3, #10
1000ea4a:	18fb      	adds	r3, r7, r3
1000ea4c:	881b      	ldrh	r3, [r3, #0]
1000ea4e:	18d2      	adds	r2, r2, r3
1000ea50:	23a0      	movs	r3, #160	; 0xa0
1000ea52:	009b      	lsls	r3, r3, #2
1000ea54:	429a      	cmp	r2, r3
1000ea56:	dd03      	ble.n	1000ea60 <platform_event_wait+0xd0>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ea58:	4b62      	ldr	r3, [pc, #392]	; (1000ebe4 <platform_event_wait+0x254>)
1000ea5a:	2280      	movs	r2, #128	; 0x80
1000ea5c:	0092      	lsls	r2, r2, #2
1000ea5e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ea60:	4b60      	ldr	r3, [pc, #384]	; (1000ebe4 <platform_event_wait+0x254>)
1000ea62:	881b      	ldrh	r3, [r3, #0]
1000ea64:	1c1a      	adds	r2, r3, #0
1000ea66:	4b60      	ldr	r3, [pc, #384]	; (1000ebe8 <platform_event_wait+0x258>)
1000ea68:	18d1      	adds	r1, r2, r3
1000ea6a:	230a      	movs	r3, #10
1000ea6c:	18fb      	adds	r3, r7, r3
1000ea6e:	881b      	ldrh	r3, [r3, #0]
1000ea70:	68fa      	ldr	r2, [r7, #12]
1000ea72:	1c08      	adds	r0, r1, #0
1000ea74:	1c11      	adds	r1, r2, #0
1000ea76:	1c1a      	adds	r2, r3, #0
1000ea78:	4b5c      	ldr	r3, [pc, #368]	; (1000ebec <platform_event_wait+0x25c>)
1000ea7a:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000ea7c:	4b59      	ldr	r3, [pc, #356]	; (1000ebe4 <platform_event_wait+0x254>)
1000ea7e:	881b      	ldrh	r3, [r3, #0]
1000ea80:	1c1a      	adds	r2, r3, #0
1000ea82:	4b59      	ldr	r3, [pc, #356]	; (1000ebe8 <platform_event_wait+0x258>)
1000ea84:	18d2      	adds	r2, r2, r3
1000ea86:	2310      	movs	r3, #16
1000ea88:	18fb      	adds	r3, r7, r3
1000ea8a:	8819      	ldrh	r1, [r3, #0]
1000ea8c:	230a      	movs	r3, #10
1000ea8e:	18fb      	adds	r3, r7, r3
1000ea90:	881b      	ldrh	r3, [r3, #0]
1000ea92:	1c08      	adds	r0, r1, #0
1000ea94:	1c11      	adds	r1, r2, #0
1000ea96:	1c1a      	adds	r2, r3, #0
1000ea98:	4b55      	ldr	r3, [pc, #340]	; (1000ebf0 <platform_event_wait+0x260>)
1000ea9a:	4798      	blx	r3
				plf_event_buff_index += len;
1000ea9c:	4b51      	ldr	r3, [pc, #324]	; (1000ebe4 <platform_event_wait+0x254>)
1000ea9e:	881a      	ldrh	r2, [r3, #0]
1000eaa0:	230a      	movs	r3, #10
1000eaa2:	18fb      	adds	r3, r7, r3
1000eaa4:	881b      	ldrh	r3, [r3, #0]
1000eaa6:	18d3      	adds	r3, r2, r3
1000eaa8:	b29a      	uxth	r2, r3
1000eaaa:	4b4e      	ldr	r3, [pc, #312]	; (1000ebe4 <platform_event_wait+0x254>)
1000eaac:	801a      	strh	r2, [r3, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000eaae:	2317      	movs	r3, #23
1000eab0:	18fb      	adds	r3, r7, r3
1000eab2:	2202      	movs	r2, #2
1000eab4:	701a      	strb	r2, [r3, #0]
1000eab6:	e060      	b.n	1000eb7a <platform_event_wait+0x1ea>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000eab8:	4b4e      	ldr	r3, [pc, #312]	; (1000ebf4 <platform_event_wait+0x264>)
1000eaba:	681b      	ldr	r3, [r3, #0]
1000eabc:	2b00      	cmp	r3, #0
1000eabe:	d05c      	beq.n	1000eb7a <platform_event_wait+0x1ea>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000eac0:	4b46      	ldr	r3, [pc, #280]	; (1000ebdc <platform_event_wait+0x24c>)
1000eac2:	681b      	ldr	r3, [r3, #0]
1000eac4:	889a      	ldrh	r2, [r3, #4]
1000eac6:	23cd      	movs	r3, #205	; 0xcd
1000eac8:	009b      	lsls	r3, r3, #2
1000eaca:	429a      	cmp	r2, r3
1000eacc:	d10e      	bne.n	1000eaec <platform_event_wait+0x15c>
					{
						if(bEventTimeoutFlag)
1000eace:	2316      	movs	r3, #22
1000ead0:	18fb      	adds	r3, r7, r3
1000ead2:	781b      	ldrb	r3, [r3, #0]
1000ead4:	2b00      	cmp	r3, #0
1000ead6:	d004      	beq.n	1000eae2 <platform_event_wait+0x152>
						{
							status = STATUS_TIMEOUT;	
1000ead8:	2317      	movs	r3, #23
1000eada:	18fb      	adds	r3, r7, r3
1000eadc:	22d0      	movs	r2, #208	; 0xd0
1000eade:	701a      	strb	r2, [r3, #0]
1000eae0:	e04b      	b.n	1000eb7a <platform_event_wait+0x1ea>
						}
						else
						{
							bLoopAgain = 1;
1000eae2:	2315      	movs	r3, #21
1000eae4:	18fb      	adds	r3, r7, r3
1000eae6:	2201      	movs	r2, #1
1000eae8:	701a      	strb	r2, [r3, #0]
1000eaea:	e046      	b.n	1000eb7a <platform_event_wait+0x1ea>
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000eaec:	4b42      	ldr	r3, [pc, #264]	; (1000ebf8 <platform_event_wait+0x268>)
1000eaee:	4a3e      	ldr	r2, [pc, #248]	; (1000ebe8 <platform_event_wait+0x258>)
1000eaf0:	601a      	str	r2, [r3, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000eaf2:	4b41      	ldr	r3, [pc, #260]	; (1000ebf8 <platform_event_wait+0x268>)
1000eaf4:	681a      	ldr	r2, [r3, #0]
1000eaf6:	4b39      	ldr	r3, [pc, #228]	; (1000ebdc <platform_event_wait+0x24c>)
1000eaf8:	681b      	ldr	r3, [r3, #0]
1000eafa:	889b      	ldrh	r3, [r3, #4]
1000eafc:	8013      	strh	r3, [r2, #0]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000eafe:	4b3e      	ldr	r3, [pc, #248]	; (1000ebf8 <platform_event_wait+0x268>)
1000eb00:	681c      	ldr	r4, [r3, #0]
1000eb02:	4b3e      	ldr	r3, [pc, #248]	; (1000ebfc <platform_event_wait+0x26c>)
1000eb04:	681a      	ldr	r2, [r3, #0]
1000eb06:	4b35      	ldr	r3, [pc, #212]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb08:	681b      	ldr	r3, [r3, #0]
1000eb0a:	891b      	ldrh	r3, [r3, #8]
1000eb0c:	1c18      	adds	r0, r3, #0
1000eb0e:	4790      	blx	r2
1000eb10:	1c03      	adds	r3, r0, #0
1000eb12:	80a3      	strh	r3, [r4, #4]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000eb14:	4b38      	ldr	r3, [pc, #224]	; (1000ebf8 <platform_event_wait+0x268>)
1000eb16:	681a      	ldr	r2, [r3, #0]
1000eb18:	4b30      	ldr	r3, [pc, #192]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb1a:	681b      	ldr	r3, [r3, #0]
1000eb1c:	88db      	ldrh	r3, [r3, #6]
1000eb1e:	8053      	strh	r3, [r2, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000eb20:	4b35      	ldr	r3, [pc, #212]	; (1000ebf8 <platform_event_wait+0x268>)
1000eb22:	681a      	ldr	r2, [r3, #0]
1000eb24:	4b2d      	ldr	r3, [pc, #180]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb26:	681b      	ldr	r3, [r3, #0]
1000eb28:	895b      	ldrh	r3, [r3, #10]
1000eb2a:	80d3      	strh	r3, [r2, #6]
						ke_msg_hdr++;
1000eb2c:	4b32      	ldr	r3, [pc, #200]	; (1000ebf8 <platform_event_wait+0x268>)
1000eb2e:	681b      	ldr	r3, [r3, #0]
1000eb30:	3308      	adds	r3, #8
1000eb32:	1c1a      	adds	r2, r3, #0
1000eb34:	4b30      	ldr	r3, [pc, #192]	; (1000ebf8 <platform_event_wait+0x268>)
1000eb36:	601a      	str	r2, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000eb38:	4b28      	ldr	r3, [pc, #160]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb3a:	681b      	ldr	r3, [r3, #0]
1000eb3c:	895b      	ldrh	r3, [r3, #10]
1000eb3e:	2b00      	cmp	r3, #0
1000eb40:	d00d      	beq.n	1000eb5e <platform_event_wait+0x1ce>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000eb42:	4b2d      	ldr	r3, [pc, #180]	; (1000ebf8 <platform_event_wait+0x268>)
1000eb44:	6819      	ldr	r1, [r3, #0]
1000eb46:	4b25      	ldr	r3, [pc, #148]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb48:	681b      	ldr	r3, [r3, #0]
1000eb4a:	330c      	adds	r3, #12
1000eb4c:	1c1a      	adds	r2, r3, #0
1000eb4e:	4b23      	ldr	r3, [pc, #140]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb50:	681b      	ldr	r3, [r3, #0]
1000eb52:	895b      	ldrh	r3, [r3, #10]
1000eb54:	1c08      	adds	r0, r1, #0
1000eb56:	1c11      	adds	r1, r2, #0
1000eb58:	1c1a      	adds	r2, r3, #0
1000eb5a:	4b24      	ldr	r3, [pc, #144]	; (1000ebec <platform_event_wait+0x25c>)
1000eb5c:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000eb5e:	4b25      	ldr	r3, [pc, #148]	; (1000ebf4 <platform_event_wait+0x264>)
1000eb60:	681a      	ldr	r2, [r3, #0]
1000eb62:	4b1e      	ldr	r3, [pc, #120]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb64:	681b      	ldr	r3, [r3, #0]
1000eb66:	895b      	ldrh	r3, [r3, #10]
1000eb68:	3308      	adds	r3, #8
1000eb6a:	491f      	ldr	r1, [pc, #124]	; (1000ebe8 <platform_event_wait+0x258>)
1000eb6c:	1c08      	adds	r0, r1, #0
1000eb6e:	1c19      	adds	r1, r3, #0
1000eb70:	4790      	blx	r2
						status = STATUS_RECEIVED_BLE_MSG;
1000eb72:	2317      	movs	r3, #23
1000eb74:	18fb      	adds	r3, r7, r3
1000eb76:	2203      	movs	r2, #3
1000eb78:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			ke_free(rcv_msg);
1000eb7a:	4b21      	ldr	r3, [pc, #132]	; (1000ec00 <platform_event_wait+0x270>)
1000eb7c:	681a      	ldr	r2, [r3, #0]
1000eb7e:	4b17      	ldr	r3, [pc, #92]	; (1000ebdc <platform_event_wait+0x24c>)
1000eb80:	681b      	ldr	r3, [r3, #0]
1000eb82:	1c18      	adds	r0, r3, #0
1000eb84:	4790      	blx	r2
1000eb86:	e003      	b.n	1000eb90 <platform_event_wait+0x200>
		}
		else
		{
			status = STATUS_FAILURE;
1000eb88:	2317      	movs	r3, #23
1000eb8a:	18fb      	adds	r3, r7, r3
1000eb8c:	2207      	movs	r2, #7
1000eb8e:	701a      	strb	r2, [r3, #0]
1000eb90:	2316      	movs	r3, #22
1000eb92:	18fb      	adds	r3, r7, r3
1000eb94:	2216      	movs	r2, #22
1000eb96:	18ba      	adds	r2, r7, r2
1000eb98:	7812      	ldrb	r2, [r2, #0]
1000eb9a:	701a      	strb	r2, [r3, #0]
		}
	}while(bLoopAgain);
1000eb9c:	2315      	movs	r3, #21
1000eb9e:	18fb      	adds	r3, r7, r3
1000eba0:	781b      	ldrb	r3, [r3, #0]
1000eba2:	2b00      	cmp	r3, #0
1000eba4:	d000      	beq.n	1000eba8 <platform_event_wait+0x218>
1000eba6:	e712      	b.n	1000e9ce <platform_event_wait+0x3e>
	
	if(bEventTimeoutFlag)
1000eba8:	2316      	movs	r3, #22
1000ebaa:	18fb      	adds	r3, r7, r3
1000ebac:	781b      	ldrb	r3, [r3, #0]
1000ebae:	2b00      	cmp	r3, #0
1000ebb0:	d007      	beq.n	1000ebc2 <platform_event_wait+0x232>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000ebb2:	4b09      	ldr	r3, [pc, #36]	; (1000ebd8 <platform_event_wait+0x248>)
1000ebb4:	681a      	ldr	r2, [r3, #0]
1000ebb6:	23cd      	movs	r3, #205	; 0xcd
1000ebb8:	009b      	lsls	r3, r3, #2
1000ebba:	1c10      	adds	r0, r2, #0
1000ebbc:	1c19      	adds	r1, r3, #0
1000ebbe:	4b11      	ldr	r3, [pc, #68]	; (1000ec04 <platform_event_wait+0x274>)
1000ebc0:	4798      	blx	r3
	}
	return status;
1000ebc2:	2317      	movs	r3, #23
1000ebc4:	18fb      	adds	r3, r7, r3
1000ebc6:	781b      	ldrb	r3, [r3, #0]
}
1000ebc8:	1c18      	adds	r0, r3, #0
1000ebca:	46bd      	mov	sp, r7
1000ebcc:	b007      	add	sp, #28
1000ebce:	bd90      	pop	{r4, r7, pc}
1000ebd0:	1000e6b1 	.word	0x1000e6b1
1000ebd4:	10016794 	.word	0x10016794
1000ebd8:	10016780 	.word	0x10016780
1000ebdc:	100167ac 	.word	0x100167ac
1000ebe0:	1000e839 	.word	0x1000e839
1000ebe4:	10017570 	.word	0x10017570
1000ebe8:	100172dc 	.word	0x100172dc
1000ebec:	100133db 	.word	0x100133db
1000ebf0:	1000df31 	.word	0x1000df31
1000ebf4:	100167a8 	.word	0x100167a8
1000ebf8:	100167b0 	.word	0x100167b0
1000ebfc:	100167a0 	.word	0x100167a0
1000ec00:	10016798 	.word	0x10016798
1000ec04:	1000e5f5 	.word	0x1000e5f5

1000ec08 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ec08:	b580      	push	{r7, lr}
1000ec0a:	b082      	sub	sp, #8
1000ec0c:	af00      	add	r7, sp, #0
	plf_drv_status status = STATUS_RESOURCE_BUSY;
1000ec0e:	1dfb      	adds	r3, r7, #7
1000ec10:	2208      	movs	r2, #8
1000ec12:	701a      	strb	r2, [r3, #0]
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ec14:	4b19      	ldr	r3, [pc, #100]	; (1000ec7c <acquire_sleep_lock+0x74>)
1000ec16:	681b      	ldr	r3, [r3, #0]
1000ec18:	b2da      	uxtb	r2, r3
1000ec1a:	1dbb      	adds	r3, r7, #6
1000ec1c:	2101      	movs	r1, #1
1000ec1e:	400a      	ands	r2, r1
1000ec20:	701a      	strb	r2, [r3, #0]
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ec22:	4b17      	ldr	r3, [pc, #92]	; (1000ec80 <acquire_sleep_lock+0x78>)
1000ec24:	681b      	ldr	r3, [r3, #0]
1000ec26:	2280      	movs	r2, #128	; 0x80
1000ec28:	0212      	lsls	r2, r2, #8
1000ec2a:	1c10      	adds	r0, r2, #0
1000ec2c:	4798      	blx	r3
	if(osc_en == 0)
1000ec2e:	1dbb      	adds	r3, r7, #6
1000ec30:	781b      	ldrb	r3, [r3, #0]
1000ec32:	2b00      	cmp	r3, #0
1000ec34:	d115      	bne.n	1000ec62 <acquire_sleep_lock+0x5a>
	{
		/* BLE Core is off, issue a wakeup request*/
		/* First, make sure PD4 is powered up and out of reset */
		pwr_enable_arm_wakeup(1<<1);
1000ec36:	4b13      	ldr	r3, [pc, #76]	; (1000ec84 <acquire_sleep_lock+0x7c>)
1000ec38:	681b      	ldr	r3, [r3, #0]
1000ec3a:	2002      	movs	r0, #2
1000ec3c:	4798      	blx	r3
		pwr_arm_wakeup_req();
1000ec3e:	4b12      	ldr	r3, [pc, #72]	; (1000ec88 <acquire_sleep_lock+0x80>)
1000ec40:	681b      	ldr	r3, [r3, #0]
1000ec42:	4798      	blx	r3
		while (pwr_wait_BLE_out_of_reset(3));
1000ec44:	46c0      	nop			; (mov r8, r8)
1000ec46:	4b11      	ldr	r3, [pc, #68]	; (1000ec8c <acquire_sleep_lock+0x84>)
1000ec48:	681b      	ldr	r3, [r3, #0]
1000ec4a:	2003      	movs	r0, #3
1000ec4c:	4798      	blx	r3
1000ec4e:	1e03      	subs	r3, r0, #0
1000ec50:	d1f9      	bne.n	1000ec46 <acquire_sleep_lock+0x3e>
		pwr_disable_arm_wakeup(1<<1);
1000ec52:	4b0f      	ldr	r3, [pc, #60]	; (1000ec90 <acquire_sleep_lock+0x88>)
1000ec54:	681b      	ldr	r3, [r3, #0]
1000ec56:	2002      	movs	r0, #2
1000ec58:	4798      	blx	r3
		REG_PL_WR(0x4000B020, 1);
1000ec5a:	4b0e      	ldr	r3, [pc, #56]	; (1000ec94 <acquire_sleep_lock+0x8c>)
1000ec5c:	2201      	movs	r2, #1
1000ec5e:	601a      	str	r2, [r3, #0]
1000ec60:	e005      	b.n	1000ec6e <acquire_sleep_lock+0x66>
#endif	//CHIPVERSION_B0
	}
	else
	{
		/*  */
		 os_sem_up(gstrFwSem);
1000ec62:	4b0d      	ldr	r3, [pc, #52]	; (1000ec98 <acquire_sleep_lock+0x90>)
1000ec64:	681a      	ldr	r2, [r3, #0]
1000ec66:	4b0d      	ldr	r3, [pc, #52]	; (1000ec9c <acquire_sleep_lock+0x94>)
1000ec68:	681b      	ldr	r3, [r3, #0]
1000ec6a:	1c18      	adds	r0, r3, #0
1000ec6c:	4790      	blx	r2
	}
	return status;
1000ec6e:	1dfb      	adds	r3, r7, #7
1000ec70:	781b      	ldrb	r3, [r3, #0]
}
1000ec72:	1c18      	adds	r0, r3, #0
1000ec74:	46bd      	mov	sp, r7
1000ec76:	b002      	add	sp, #8
1000ec78:	bd80      	pop	{r7, pc}
1000ec7a:	46c0      	nop			; (mov r8, r8)
1000ec7c:	4000b1ec 	.word	0x4000b1ec
1000ec80:	10017298 	.word	0x10017298
1000ec84:	1001676c 	.word	0x1001676c
1000ec88:	10016774 	.word	0x10016774
1000ec8c:	10016778 	.word	0x10016778
1000ec90:	10016770 	.word	0x10016770
1000ec94:	4000b020 	.word	0x4000b020
1000ec98:	1001678c 	.word	0x1001678c
1000ec9c:	1001677c 	.word	0x1001677c

1000eca0 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000eca0:	b580      	push	{r7, lr}
1000eca2:	af00      	add	r7, sp, #0
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000eca4:	4a08      	ldr	r2, [pc, #32]	; (1000ecc8 <samb11_plf_resume_callback+0x28>)
1000eca6:	4b09      	ldr	r3, [pc, #36]	; (1000eccc <samb11_plf_resume_callback+0x2c>)
1000eca8:	681b      	ldr	r3, [r3, #0]
1000ecaa:	6013      	str	r3, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ecac:	4a08      	ldr	r2, [pc, #32]	; (1000ecd0 <samb11_plf_resume_callback+0x30>)
1000ecae:	4b07      	ldr	r3, [pc, #28]	; (1000eccc <samb11_plf_resume_callback+0x2c>)
1000ecb0:	685b      	ldr	r3, [r3, #4]
1000ecb2:	6013      	str	r3, [r2, #0]
	if(samb11_app_resume_cb != NULL)
1000ecb4:	4b07      	ldr	r3, [pc, #28]	; (1000ecd4 <samb11_plf_resume_callback+0x34>)
1000ecb6:	681b      	ldr	r3, [r3, #0]
1000ecb8:	2b00      	cmp	r3, #0
1000ecba:	d002      	beq.n	1000ecc2 <samb11_plf_resume_callback+0x22>
	{
		samb11_app_resume_cb();
1000ecbc:	4b05      	ldr	r3, [pc, #20]	; (1000ecd4 <samb11_plf_resume_callback+0x34>)
1000ecbe:	681b      	ldr	r3, [r3, #0]
1000ecc0:	4798      	blx	r3
	}
}
1000ecc2:	46bd      	mov	sp, r7
1000ecc4:	bd80      	pop	{r7, pc}
1000ecc6:	46c0      	nop			; (mov r8, r8)
1000ecc8:	4000b00c 	.word	0x4000b00c
1000eccc:	10017290 	.word	0x10017290
1000ecd0:	4000b010 	.word	0x4000b010
1000ecd4:	10017564 	.word	0x10017564

1000ecd8 <register_resume_callback>:

plf_drv_status register_resume_callback(resume_callback cb)
{
1000ecd8:	b580      	push	{r7, lr}
1000ecda:	b084      	sub	sp, #16
1000ecdc:	af00      	add	r7, sp, #0
1000ecde:	6078      	str	r0, [r7, #4]
	plf_drv_status status = STATUS_SUCCESS;
1000ece0:	230f      	movs	r3, #15
1000ece2:	18fb      	adds	r3, r7, r3
1000ece4:	2200      	movs	r2, #0
1000ece6:	701a      	strb	r2, [r3, #0]
	if(cb == NULL)
1000ece8:	687b      	ldr	r3, [r7, #4]
1000ecea:	2b00      	cmp	r3, #0
1000ecec:	d104      	bne.n	1000ecf8 <register_resume_callback+0x20>
	{
		status = STATUS_INVALID_ARGUMENT;
1000ecee:	230f      	movs	r3, #15
1000ecf0:	18fb      	adds	r3, r7, r3
1000ecf2:	2209      	movs	r2, #9
1000ecf4:	701a      	strb	r2, [r3, #0]
1000ecf6:	e002      	b.n	1000ecfe <register_resume_callback+0x26>
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000ecf8:	4b04      	ldr	r3, [pc, #16]	; (1000ed0c <register_resume_callback+0x34>)
1000ecfa:	687a      	ldr	r2, [r7, #4]
1000ecfc:	601a      	str	r2, [r3, #0]
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
1000ecfe:	230f      	movs	r3, #15
1000ed00:	18fb      	adds	r3, r7, r3
1000ed02:	781b      	ldrb	r3, [r3, #0]
}
1000ed04:	1c18      	adds	r0, r3, #0
1000ed06:	46bd      	mov	sp, r7
1000ed08:	b004      	add	sp, #16
1000ed0a:	bd80      	pop	{r7, pc}
1000ed0c:	10017564 	.word	0x10017564

1000ed10 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
1000ed10:	b580      	push	{r7, lr}
1000ed12:	b082      	sub	sp, #8
1000ed14:	af00      	add	r7, sp, #0
1000ed16:	1c02      	adds	r2, r0, #0
1000ed18:	1dfb      	adds	r3, r7, #7
1000ed1a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000ed1c:	4a07      	ldr	r2, [pc, #28]	; (1000ed3c <NVIC_ClearPendingIRQ+0x2c>)
1000ed1e:	1dfb      	adds	r3, r7, #7
1000ed20:	781b      	ldrb	r3, [r3, #0]
1000ed22:	1c19      	adds	r1, r3, #0
1000ed24:	231f      	movs	r3, #31
1000ed26:	400b      	ands	r3, r1
1000ed28:	2101      	movs	r1, #1
1000ed2a:	4099      	lsls	r1, r3
1000ed2c:	1c0b      	adds	r3, r1, #0
1000ed2e:	1c19      	adds	r1, r3, #0
1000ed30:	23c0      	movs	r3, #192	; 0xc0
1000ed32:	005b      	lsls	r3, r3, #1
1000ed34:	50d1      	str	r1, [r2, r3]
}
1000ed36:	46bd      	mov	sp, r7
1000ed38:	b002      	add	sp, #8
1000ed3a:	bd80      	pop	{r7, pc}
1000ed3c:	e000e100 	.word	0xe000e100

1000ed40 <gpio1_combined_isr_handler>:
//extern void (*handle_ext_wakeup_isr)(void);
//handle_ext_wakeup_isrvoid gpio1_combined_isr_handler(void);

/* chris.choi : jeffy's code 150908, so it's better code i think so use this */
void gpio1_combined_isr_handler(void)
{
1000ed40:	b580      	push	{r7, lr}
1000ed42:	b082      	sub	sp, #8
1000ed44:	af00      	add	r7, sp, #0
	uint8_t index = 0;
1000ed46:	1dfb      	adds	r3, r7, #7
1000ed48:	2200      	movs	r2, #0
1000ed4a:	701a      	strb	r2, [r3, #0]
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
1000ed4c:	1dbb      	adds	r3, r7, #6
1000ed4e:	2210      	movs	r2, #16
1000ed50:	701a      	strb	r2, [r3, #0]
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ed52:	4b28      	ldr	r3, [pc, #160]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000ed54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ed56:	b29b      	uxth	r3, r3
1000ed58:	603b      	str	r3, [r7, #0]
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ed5a:	4a26      	ldr	r2, [pc, #152]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000ed5c:	4b25      	ldr	r3, [pc, #148]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000ed5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000ed60:	b29b      	uxth	r3, r3
1000ed62:	4925      	ldr	r1, [pc, #148]	; (1000edf8 <gpio1_combined_isr_handler+0xb8>)
1000ed64:	430b      	orrs	r3, r1
1000ed66:	b29b      	uxth	r3, r3
1000ed68:	8513      	strh	r3, [r2, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ed6a:	683b      	ldr	r3, [r7, #0]
1000ed6c:	05db      	lsls	r3, r3, #23
1000ed6e:	0ddb      	lsrs	r3, r3, #23
1000ed70:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ed72:	1dfb      	adds	r3, r7, #7
1000ed74:	2200      	movs	r2, #0
1000ed76:	701a      	strb	r2, [r3, #0]
		if (intstatus != 0) {
1000ed78:	683b      	ldr	r3, [r7, #0]
1000ed7a:	2b00      	cmp	r3, #0
1000ed7c:	d020      	beq.n	1000edc0 <gpio1_combined_isr_handler+0x80>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ed7e:	683b      	ldr	r3, [r7, #0]
1000ed80:	b2db      	uxtb	r3, r3
1000ed82:	425b      	negs	r3, r3
1000ed84:	b2da      	uxtb	r2, r3
1000ed86:	683b      	ldr	r3, [r7, #0]
1000ed88:	b2d9      	uxtb	r1, r3
1000ed8a:	1dbb      	adds	r3, r7, #6
1000ed8c:	400a      	ands	r2, r1
1000ed8e:	701a      	strb	r2, [r3, #0]
			while (!(port_gpio1 == 1)) {
1000ed90:	e009      	b.n	1000eda6 <gpio1_combined_isr_handler+0x66>
				port_gpio1 = port_gpio1 >> 1;
1000ed92:	1dbb      	adds	r3, r7, #6
1000ed94:	1dba      	adds	r2, r7, #6
1000ed96:	7812      	ldrb	r2, [r2, #0]
1000ed98:	0852      	lsrs	r2, r2, #1
1000ed9a:	701a      	strb	r2, [r3, #0]
				index++;
1000ed9c:	1dfb      	adds	r3, r7, #7
1000ed9e:	781a      	ldrb	r2, [r3, #0]
1000eda0:	1dfb      	adds	r3, r7, #7
1000eda2:	3201      	adds	r2, #1
1000eda4:	701a      	strb	r2, [r3, #0]
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000eda6:	1dbb      	adds	r3, r7, #6
1000eda8:	781b      	ldrb	r3, [r3, #0]
1000edaa:	2b01      	cmp	r3, #1
1000edac:	d1f1      	bne.n	1000ed92 <gpio1_combined_isr_handler+0x52>
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000edae:	4a11      	ldr	r2, [pc, #68]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000edb0:	1dfb      	adds	r3, r7, #7
1000edb2:	781b      	ldrb	r3, [r3, #0]
1000edb4:	2101      	movs	r1, #1
1000edb6:	4099      	lsls	r1, r3
1000edb8:	1c0b      	adds	r3, r1, #0
1000edba:	b29b      	uxth	r3, r3
1000edbc:	8713      	strh	r3, [r2, #56]	; 0x38
1000edbe:	e007      	b.n	1000edd0 <gpio1_combined_isr_handler+0x90>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000edc0:	4a0c      	ldr	r2, [pc, #48]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000edc2:	4b0c      	ldr	r3, [pc, #48]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000edc4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000edc6:	b29b      	uxth	r3, r3
1000edc8:	490b      	ldr	r1, [pc, #44]	; (1000edf8 <gpio1_combined_isr_handler+0xb8>)
1000edca:	430b      	orrs	r3, r1
1000edcc:	b29b      	uxth	r3, r3
1000edce:	8713      	strh	r3, [r2, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000edd0:	4b08      	ldr	r3, [pc, #32]	; (1000edf4 <gpio1_combined_isr_handler+0xb4>)
1000edd2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000edd4:	b29b      	uxth	r3, r3
1000edd6:	603b      	str	r3, [r7, #0]
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000edd8:	683b      	ldr	r3, [r7, #0]
1000edda:	05db      	lsls	r3, r3, #23
1000eddc:	0ddb      	lsrs	r3, r3, #23
1000edde:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ede0:	683b      	ldr	r3, [r7, #0]
1000ede2:	2b00      	cmp	r3, #0
1000ede4:	d1c1      	bne.n	1000ed6a <gpio1_combined_isr_handler+0x2a>

	NVIC_ClearPendingIRQ(8);
1000ede6:	2008      	movs	r0, #8
1000ede8:	4b04      	ldr	r3, [pc, #16]	; (1000edfc <gpio1_combined_isr_handler+0xbc>)
1000edea:	4798      	blx	r3
}
1000edec:	46bd      	mov	sp, r7
1000edee:	b002      	add	sp, #8
1000edf0:	bd80      	pop	{r7, pc}
1000edf2:	46c0      	nop			; (mov r8, r8)
1000edf4:	40011000 	.word	0x40011000
1000edf8:	ffff8000 	.word	0xffff8000
1000edfc:	1000ed11 	.word	0x1000ed11

1000ee00 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000ee00:	b580      	push	{r7, lr}
1000ee02:	b082      	sub	sp, #8
1000ee04:	af00      	add	r7, sp, #0
	uint8_t index = 0;
1000ee06:	1dfb      	adds	r3, r7, #7
1000ee08:	2200      	movs	r2, #0
1000ee0a:	701a      	strb	r2, [r3, #0]
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
1000ee0c:	1dbb      	adds	r3, r7, #6
1000ee0e:	2200      	movs	r2, #0
1000ee10:	701a      	strb	r2, [r3, #0]
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000ee12:	4b28      	ldr	r3, [pc, #160]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee14:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ee16:	b29b      	uxth	r3, r3
1000ee18:	603b      	str	r3, [r7, #0]
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ee1a:	4a26      	ldr	r2, [pc, #152]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee1c:	4b25      	ldr	r3, [pc, #148]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000ee20:	b29b      	uxth	r3, r3
1000ee22:	4925      	ldr	r1, [pc, #148]	; (1000eeb8 <gpio0_combined_isr_handler+0xb8>)
1000ee24:	430b      	orrs	r3, r1
1000ee26:	b29b      	uxth	r3, r3
1000ee28:	8513      	strh	r3, [r2, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ee2a:	683b      	ldr	r3, [r7, #0]
1000ee2c:	05db      	lsls	r3, r3, #23
1000ee2e:	0ddb      	lsrs	r3, r3, #23
1000ee30:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ee32:	1dfb      	adds	r3, r7, #7
1000ee34:	2200      	movs	r2, #0
1000ee36:	701a      	strb	r2, [r3, #0]
		if (intstatus != 0) {
1000ee38:	683b      	ldr	r3, [r7, #0]
1000ee3a:	2b00      	cmp	r3, #0
1000ee3c:	d020      	beq.n	1000ee80 <gpio0_combined_isr_handler+0x80>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000ee3e:	683b      	ldr	r3, [r7, #0]
1000ee40:	b2db      	uxtb	r3, r3
1000ee42:	425b      	negs	r3, r3
1000ee44:	b2da      	uxtb	r2, r3
1000ee46:	683b      	ldr	r3, [r7, #0]
1000ee48:	b2d9      	uxtb	r1, r3
1000ee4a:	1dbb      	adds	r3, r7, #6
1000ee4c:	400a      	ands	r2, r1
1000ee4e:	701a      	strb	r2, [r3, #0]
			while (!(port_gpio0 == 1)) {
1000ee50:	e009      	b.n	1000ee66 <gpio0_combined_isr_handler+0x66>
				port_gpio0 = port_gpio0 >> 1;
1000ee52:	1dbb      	adds	r3, r7, #6
1000ee54:	1dba      	adds	r2, r7, #6
1000ee56:	7812      	ldrb	r2, [r2, #0]
1000ee58:	0852      	lsrs	r2, r2, #1
1000ee5a:	701a      	strb	r2, [r3, #0]
				index++;
1000ee5c:	1dfb      	adds	r3, r7, #7
1000ee5e:	781a      	ldrb	r2, [r3, #0]
1000ee60:	1dfb      	adds	r3, r7, #7
1000ee62:	3201      	adds	r2, #1
1000ee64:	701a      	strb	r2, [r3, #0]
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000ee66:	1dbb      	adds	r3, r7, #6
1000ee68:	781b      	ldrb	r3, [r3, #0]
1000ee6a:	2b01      	cmp	r3, #1
1000ee6c:	d1f1      	bne.n	1000ee52 <gpio0_combined_isr_handler+0x52>
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ee6e:	4a11      	ldr	r2, [pc, #68]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee70:	1dfb      	adds	r3, r7, #7
1000ee72:	781b      	ldrb	r3, [r3, #0]
1000ee74:	2101      	movs	r1, #1
1000ee76:	4099      	lsls	r1, r3
1000ee78:	1c0b      	adds	r3, r1, #0
1000ee7a:	b29b      	uxth	r3, r3
1000ee7c:	8713      	strh	r3, [r2, #56]	; 0x38
1000ee7e:	e007      	b.n	1000ee90 <gpio0_combined_isr_handler+0x90>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ee80:	4a0c      	ldr	r2, [pc, #48]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee82:	4b0c      	ldr	r3, [pc, #48]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee84:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ee86:	b29b      	uxth	r3, r3
1000ee88:	490b      	ldr	r1, [pc, #44]	; (1000eeb8 <gpio0_combined_isr_handler+0xb8>)
1000ee8a:	430b      	orrs	r3, r1
1000ee8c:	b29b      	uxth	r3, r3
1000ee8e:	8713      	strh	r3, [r2, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000ee90:	4b08      	ldr	r3, [pc, #32]	; (1000eeb4 <gpio0_combined_isr_handler+0xb4>)
1000ee92:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ee94:	b29b      	uxth	r3, r3
1000ee96:	603b      	str	r3, [r7, #0]
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ee98:	683b      	ldr	r3, [r7, #0]
1000ee9a:	05db      	lsls	r3, r3, #23
1000ee9c:	0ddb      	lsrs	r3, r3, #23
1000ee9e:	603b      	str	r3, [r7, #0]
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000eea0:	683b      	ldr	r3, [r7, #0]
1000eea2:	2b00      	cmp	r3, #0
1000eea4:	d1c1      	bne.n	1000ee2a <gpio0_combined_isr_handler+0x2a>

	NVIC_ClearPendingIRQ(7);
1000eea6:	2007      	movs	r0, #7
1000eea8:	4b04      	ldr	r3, [pc, #16]	; (1000eebc <gpio0_combined_isr_handler+0xbc>)
1000eeaa:	4798      	blx	r3
}
1000eeac:	46bd      	mov	sp, r7
1000eeae:	b002      	add	sp, #8
1000eeb0:	bd80      	pop	{r7, pc}
1000eeb2:	46c0      	nop			; (mov r8, r8)
1000eeb4:	40010000 	.word	0x40010000
1000eeb8:	ffff8000 	.word	0xffff8000
1000eebc:	1000ed11 	.word	0x1000ed11

1000eec0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000eec0:	b580      	push	{r7, lr}
1000eec2:	af00      	add	r7, sp, #0
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000eec4:	4b12      	ldr	r3, [pc, #72]	; (1000ef10 <PORT1_COMB_Handler+0x50>)
1000eec6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000eec8:	b29b      	uxth	r3, r3
1000eeca:	1c1a      	adds	r2, r3, #0
1000eecc:	23e0      	movs	r3, #224	; 0xe0
1000eece:	021b      	lsls	r3, r3, #8
1000eed0:	4013      	ands	r3, r2
1000eed2:	d018      	beq.n	1000ef06 <PORT1_COMB_Handler+0x46>
		handle_ext_wakeup_isr();
1000eed4:	4b0f      	ldr	r3, [pc, #60]	; (1000ef14 <PORT1_COMB_Handler+0x54>)
1000eed6:	681b      	ldr	r3, [r3, #0]
1000eed8:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000eeda:	4b0d      	ldr	r3, [pc, #52]	; (1000ef10 <PORT1_COMB_Handler+0x50>)
1000eedc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000eede:	b29b      	uxth	r3, r3
1000eee0:	1c1a      	adds	r2, r3, #0
1000eee2:	23e0      	movs	r3, #224	; 0xe0
1000eee4:	021b      	lsls	r3, r3, #8
1000eee6:	401a      	ands	r2, r3
1000eee8:	1c10      	adds	r0, r2, #0
1000eeea:	4b09      	ldr	r3, [pc, #36]	; (1000ef10 <PORT1_COMB_Handler+0x50>)
1000eeec:	4a08      	ldr	r2, [pc, #32]	; (1000ef10 <PORT1_COMB_Handler+0x50>)
1000eeee:	8f12      	ldrh	r2, [r2, #56]	; 0x38
1000eef0:	b292      	uxth	r2, r2
1000eef2:	b291      	uxth	r1, r2
1000eef4:	b282      	uxth	r2, r0
1000eef6:	430a      	orrs	r2, r1
1000eef8:	b292      	uxth	r2, r2
1000eefa:	b292      	uxth	r2, r2
1000eefc:	871a      	strh	r2, [r3, #56]	; 0x38
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
1000eefe:	2008      	movs	r0, #8
1000ef00:	4b05      	ldr	r3, [pc, #20]	; (1000ef18 <PORT1_COMB_Handler+0x58>)
1000ef02:	4798      	blx	r3
1000ef04:	e001      	b.n	1000ef0a <PORT1_COMB_Handler+0x4a>
	} else {
		gpio1_combined_isr_handler();
1000ef06:	4b05      	ldr	r3, [pc, #20]	; (1000ef1c <PORT1_COMB_Handler+0x5c>)
1000ef08:	4798      	blx	r3
	}
}
1000ef0a:	46bd      	mov	sp, r7
1000ef0c:	bd80      	pop	{r7, pc}
1000ef0e:	46c0      	nop			; (mov r8, r8)
1000ef10:	40011000 	.word	0x40011000
1000ef14:	10017560 	.word	0x10017560
1000ef18:	1000ed11 	.word	0x1000ed11
1000ef1c:	1000ed41 	.word	0x1000ed41

1000ef20 <internal_event_post>:
1000ef20:	b570      	push	{r4, r5, r6, lr}
1000ef22:	4d0c      	ldr	r5, [pc, #48]	; (1000ef54 <internal_event_post+0x34>)
1000ef24:	682c      	ldr	r4, [r5, #0]
1000ef26:	2c00      	cmp	r4, #0
1000ef28:	d013      	beq.n	1000ef52 <internal_event_post+0x32>
1000ef2a:	6826      	ldr	r6, [r4, #0]
1000ef2c:	60e2      	str	r2, [r4, #12]
1000ef2e:	602e      	str	r6, [r5, #0]
1000ef30:	2500      	movs	r5, #0
1000ef32:	4a09      	ldr	r2, [pc, #36]	; (1000ef58 <internal_event_post+0x38>)
1000ef34:	8123      	strh	r3, [r4, #8]
1000ef36:	6813      	ldr	r3, [r2, #0]
1000ef38:	6025      	str	r5, [r4, #0]
1000ef3a:	80a0      	strh	r0, [r4, #4]
1000ef3c:	80e1      	strh	r1, [r4, #6]
1000ef3e:	42ab      	cmp	r3, r5
1000ef40:	d101      	bne.n	1000ef46 <internal_event_post+0x26>
1000ef42:	6014      	str	r4, [r2, #0]
1000ef44:	e005      	b.n	1000ef52 <internal_event_post+0x32>
1000ef46:	681a      	ldr	r2, [r3, #0]
1000ef48:	2a00      	cmp	r2, #0
1000ef4a:	d001      	beq.n	1000ef50 <internal_event_post+0x30>
1000ef4c:	1c13      	adds	r3, r2, #0
1000ef4e:	e7fa      	b.n	1000ef46 <internal_event_post+0x26>
1000ef50:	601c      	str	r4, [r3, #0]
1000ef52:	bd70      	pop	{r4, r5, r6, pc}
1000ef54:	10016858 	.word	0x10016858
1000ef58:	10016854 	.word	0x10016854

1000ef5c <internal_event_init>:
1000ef5c:	4b08      	ldr	r3, [pc, #32]	; (1000ef80 <internal_event_init+0x24>)
1000ef5e:	2200      	movs	r2, #0
1000ef60:	1c19      	adds	r1, r3, #0
1000ef62:	b510      	push	{r4, lr}
1000ef64:	6818      	ldr	r0, [r3, #0]
1000ef66:	4b07      	ldr	r3, [pc, #28]	; (1000ef84 <internal_event_init+0x28>)
1000ef68:	189c      	adds	r4, r3, r2
1000ef6a:	50d0      	str	r0, [r2, r3]
1000ef6c:	3210      	adds	r2, #16
1000ef6e:	1c20      	adds	r0, r4, #0
1000ef70:	2aa0      	cmp	r2, #160	; 0xa0
1000ef72:	d1f8      	bne.n	1000ef66 <internal_event_init+0xa>
1000ef74:	2200      	movs	r2, #0
1000ef76:	3390      	adds	r3, #144	; 0x90
1000ef78:	600b      	str	r3, [r1, #0]
1000ef7a:	4b03      	ldr	r3, [pc, #12]	; (1000ef88 <internal_event_init+0x2c>)
1000ef7c:	601a      	str	r2, [r3, #0]
1000ef7e:	bd10      	pop	{r4, pc}
1000ef80:	10016858 	.word	0x10016858
1000ef84:	100167b4 	.word	0x100167b4
1000ef88:	10016854 	.word	0x10016854

1000ef8c <special_events_handler>:
1000ef8c:	b538      	push	{r3, r4, r5, lr}
1000ef8e:	4c1b      	ldr	r4, [pc, #108]	; (1000effc <special_events_handler+0x70>)
1000ef90:	1c03      	adds	r3, r0, #0
1000ef92:	8825      	ldrh	r5, [r4, #0]
1000ef94:	1c08      	adds	r0, r1, #0
1000ef96:	1c21      	adds	r1, r4, #0
1000ef98:	429d      	cmp	r5, r3
1000ef9a:	d107      	bne.n	1000efac <special_events_handler+0x20>
1000ef9c:	88a5      	ldrh	r5, [r4, #4]
1000ef9e:	4285      	cmp	r5, r0
1000efa0:	d104      	bne.n	1000efac <special_events_handler+0x20>
1000efa2:	2301      	movs	r3, #1
1000efa4:	425b      	negs	r3, r3
1000efa6:	8023      	strh	r3, [r4, #0]
1000efa8:	60a2      	str	r2, [r4, #8]
1000efaa:	e009      	b.n	1000efc0 <special_events_handler+0x34>
1000efac:	884c      	ldrh	r4, [r1, #2]
1000efae:	429c      	cmp	r4, r3
1000efb0:	d10a      	bne.n	1000efc8 <special_events_handler+0x3c>
1000efb2:	888c      	ldrh	r4, [r1, #4]
1000efb4:	4284      	cmp	r4, r0
1000efb6:	d107      	bne.n	1000efc8 <special_events_handler+0x3c>
1000efb8:	2301      	movs	r3, #1
1000efba:	425b      	negs	r3, r3
1000efbc:	804b      	strh	r3, [r1, #2]
1000efbe:	608a      	str	r2, [r1, #8]
1000efc0:	4b0f      	ldr	r3, [pc, #60]	; (1000f000 <special_events_handler+0x74>)
1000efc2:	4798      	blx	r3
1000efc4:	2001      	movs	r0, #1
1000efc6:	e017      	b.n	1000eff8 <special_events_handler+0x6c>
1000efc8:	490e      	ldr	r1, [pc, #56]	; (1000f004 <special_events_handler+0x78>)
1000efca:	428b      	cmp	r3, r1
1000efcc:	d00e      	beq.n	1000efec <special_events_handler+0x60>
1000efce:	490e      	ldr	r1, [pc, #56]	; (1000f008 <special_events_handler+0x7c>)
1000efd0:	428b      	cmp	r3, r1
1000efd2:	d007      	beq.n	1000efe4 <special_events_handler+0x58>
1000efd4:	490d      	ldr	r1, [pc, #52]	; (1000f00c <special_events_handler+0x80>)
1000efd6:	2000      	movs	r0, #0
1000efd8:	428b      	cmp	r3, r1
1000efda:	d10d      	bne.n	1000eff8 <special_events_handler+0x6c>
1000efdc:	1c10      	adds	r0, r2, #0
1000efde:	4b0c      	ldr	r3, [pc, #48]	; (1000f010 <special_events_handler+0x84>)
1000efe0:	4798      	blx	r3
1000efe2:	e7ef      	b.n	1000efc4 <special_events_handler+0x38>
1000efe4:	1c11      	adds	r1, r2, #0
1000efe6:	4b0b      	ldr	r3, [pc, #44]	; (1000f014 <special_events_handler+0x88>)
1000efe8:	2200      	movs	r2, #0
1000efea:	e002      	b.n	1000eff2 <special_events_handler+0x66>
1000efec:	1c11      	adds	r1, r2, #0
1000efee:	2200      	movs	r2, #0
1000eff0:	4b09      	ldr	r3, [pc, #36]	; (1000f018 <special_events_handler+0x8c>)
1000eff2:	4798      	blx	r3
1000eff4:	4243      	negs	r3, r0
1000eff6:	4158      	adcs	r0, r3
1000eff8:	bd38      	pop	{r3, r4, r5, pc}
1000effa:	46c0      	nop			; (mov r8, r8)
1000effc:	10017574 	.word	0x10017574
1000f000:	100108e1 	.word	0x100108e1
1000f004:	00000e13 	.word	0x00000e13
1000f008:	00000e15 	.word	0x00000e15
1000f00c:	00000e01 	.word	0x00000e01
1000f010:	10010c51 	.word	0x10010c51
1000f014:	10010e11 	.word	0x10010e11
1000f018:	10010ee9 	.word	0x10010ee9

1000f01c <at_ble_event_get>:
1000f01c:	2300      	movs	r3, #0
1000f01e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f020:	b085      	sub	sp, #20
1000f022:	9202      	str	r2, [sp, #8]
1000f024:	7003      	strb	r3, [r0, #0]
1000f026:	9b02      	ldr	r3, [sp, #8]
1000f028:	9001      	str	r0, [sp, #4]
1000f02a:	3b01      	subs	r3, #1
1000f02c:	1c0d      	adds	r5, r1, #0
1000f02e:	9303      	str	r3, [sp, #12]
1000f030:	3303      	adds	r3, #3
1000f032:	d802      	bhi.n	1000f03a <at_ble_event_get+0x1e>
1000f034:	9802      	ldr	r0, [sp, #8]
1000f036:	4bad      	ldr	r3, [pc, #692]	; (1000f2ec <at_ble_event_get+0x2d0>)
1000f038:	4798      	blx	r3
1000f03a:	9b03      	ldr	r3, [sp, #12]
1000f03c:	4fac      	ldr	r7, [pc, #688]	; (1000f2f0 <at_ble_event_get+0x2d4>)
1000f03e:	2400      	movs	r4, #0
1000f040:	3303      	adds	r3, #3
1000f042:	d812      	bhi.n	1000f06a <at_ble_event_get+0x4e>
1000f044:	683b      	ldr	r3, [r7, #0]
1000f046:	2b00      	cmp	r3, #0
1000f048:	d112      	bne.n	1000f070 <at_ble_event_get+0x54>
1000f04a:	2cd0      	cmp	r4, #208	; 0xd0
1000f04c:	d100      	bne.n	1000f050 <at_ble_event_get+0x34>
1000f04e:	e29c      	b.n	1000f58a <at_ble_event_get+0x56e>
1000f050:	9802      	ldr	r0, [sp, #8]
1000f052:	4ba8      	ldr	r3, [pc, #672]	; (1000f2f4 <at_ble_event_get+0x2d8>)
1000f054:	4798      	blx	r3
1000f056:	1e04      	subs	r4, r0, #0
1000f058:	2c02      	cmp	r4, #2
1000f05a:	d1f3      	bne.n	1000f044 <at_ble_event_get+0x28>
1000f05c:	e025      	b.n	1000f0aa <at_ble_event_get+0x8e>
1000f05e:	9802      	ldr	r0, [sp, #8]
1000f060:	4ba4      	ldr	r3, [pc, #656]	; (1000f2f4 <at_ble_event_get+0x2d8>)
1000f062:	4798      	blx	r3
1000f064:	1e04      	subs	r4, r0, #0
1000f066:	2c02      	cmp	r4, #2
1000f068:	d01f      	beq.n	1000f0aa <at_ble_event_get+0x8e>
1000f06a:	683b      	ldr	r3, [r7, #0]
1000f06c:	2b00      	cmp	r3, #0
1000f06e:	d0f6      	beq.n	1000f05e <at_ble_event_get+0x42>
1000f070:	2cd0      	cmp	r4, #208	; 0xd0
1000f072:	d100      	bne.n	1000f076 <at_ble_event_get+0x5a>
1000f074:	e289      	b.n	1000f58a <at_ble_event_get+0x56e>
1000f076:	1ee3      	subs	r3, r4, #3
1000f078:	1e5a      	subs	r2, r3, #1
1000f07a:	4193      	sbcs	r3, r2
1000f07c:	6838      	ldr	r0, [r7, #0]
1000f07e:	425b      	negs	r3, r3
1000f080:	401c      	ands	r4, r3
1000f082:	2800      	cmp	r0, #0
1000f084:	d100      	bne.n	1000f088 <at_ble_event_get+0x6c>
1000f086:	e286      	b.n	1000f596 <at_ble_event_get+0x57a>
1000f088:	6803      	ldr	r3, [r0, #0]
1000f08a:	68c1      	ldr	r1, [r0, #12]
1000f08c:	603b      	str	r3, [r7, #0]
1000f08e:	4f9a      	ldr	r7, [pc, #616]	; (1000f2f8 <at_ble_event_get+0x2dc>)
1000f090:	88c2      	ldrh	r2, [r0, #6]
1000f092:	683e      	ldr	r6, [r7, #0]
1000f094:	8883      	ldrh	r3, [r0, #4]
1000f096:	6006      	str	r6, [r0, #0]
1000f098:	6038      	str	r0, [r7, #0]
1000f09a:	2c00      	cmp	r4, #0
1000f09c:	d112      	bne.n	1000f0c4 <at_ble_event_get+0xa8>
1000f09e:	4897      	ldr	r0, [pc, #604]	; (1000f2fc <at_ble_event_get+0x2e0>)
1000f0a0:	4283      	cmp	r3, r0
1000f0a2:	d008      	beq.n	1000f0b6 <at_ble_event_get+0x9a>
1000f0a4:	4896      	ldr	r0, [pc, #600]	; (1000f300 <at_ble_event_get+0x2e4>)
1000f0a6:	4283      	cmp	r3, r0
1000f0a8:	d11d      	bne.n	1000f0e6 <at_ble_event_get+0xca>
1000f0aa:	233a      	movs	r3, #58	; 0x3a
1000f0ac:	2400      	movs	r4, #0
1000f0ae:	9a01      	ldr	r2, [sp, #4]
1000f0b0:	1c25      	adds	r5, r4, #0
1000f0b2:	7013      	strb	r3, [r2, #0]
1000f0b4:	e006      	b.n	1000f0c4 <at_ble_event_get+0xa8>
1000f0b6:	429a      	cmp	r2, r3
1000f0b8:	d000      	beq.n	1000f0bc <at_ble_event_get+0xa0>
1000f0ba:	e268      	b.n	1000f58e <at_ble_event_get+0x572>
1000f0bc:	2338      	movs	r3, #56	; 0x38
1000f0be:	9a01      	ldr	r2, [sp, #4]
1000f0c0:	7013      	strb	r3, [r2, #0]
1000f0c2:	6029      	str	r1, [r5, #0]
1000f0c4:	9b01      	ldr	r3, [sp, #4]
1000f0c6:	781b      	ldrb	r3, [r3, #0]
1000f0c8:	2b3b      	cmp	r3, #59	; 0x3b
1000f0ca:	d003      	beq.n	1000f0d4 <at_ble_event_get+0xb8>
1000f0cc:	9b03      	ldr	r3, [sp, #12]
1000f0ce:	3303      	adds	r3, #3
1000f0d0:	d903      	bls.n	1000f0da <at_ble_event_get+0xbe>
1000f0d2:	e264      	b.n	1000f59e <at_ble_event_get+0x582>
1000f0d4:	2c00      	cmp	r4, #0
1000f0d6:	d0b0      	beq.n	1000f03a <at_ble_event_get+0x1e>
1000f0d8:	e7f8      	b.n	1000f0cc <at_ble_event_get+0xb0>
1000f0da:	2cd0      	cmp	r4, #208	; 0xd0
1000f0dc:	d100      	bne.n	1000f0e0 <at_ble_event_get+0xc4>
1000f0de:	e25e      	b.n	1000f59e <at_ble_event_get+0x582>
1000f0e0:	4b88      	ldr	r3, [pc, #544]	; (1000f304 <at_ble_event_get+0x2e8>)
1000f0e2:	4798      	blx	r3
1000f0e4:	e25b      	b.n	1000f59e <at_ble_event_get+0x582>
1000f0e6:	2abb      	cmp	r2, #187	; 0xbb
1000f0e8:	d123      	bne.n	1000f132 <at_ble_event_get+0x116>
1000f0ea:	2bbb      	cmp	r3, #187	; 0xbb
1000f0ec:	d121      	bne.n	1000f132 <at_ble_event_get+0x116>
1000f0ee:	80ac      	strh	r4, [r5, #4]
1000f0f0:	788b      	ldrb	r3, [r1, #2]
1000f0f2:	784a      	ldrb	r2, [r1, #1]
1000f0f4:	021b      	lsls	r3, r3, #8
1000f0f6:	78cf      	ldrb	r7, [r1, #3]
1000f0f8:	7908      	ldrb	r0, [r1, #4]
1000f0fa:	4313      	orrs	r3, r2
1000f0fc:	794a      	ldrb	r2, [r1, #5]
1000f0fe:	4982      	ldr	r1, [pc, #520]	; (1000f308 <at_ble_event_get+0x2ec>)
1000f100:	70af      	strb	r7, [r5, #2]
1000f102:	802b      	strh	r3, [r5, #0]
1000f104:	428b      	cmp	r3, r1
1000f106:	d806      	bhi.n	1000f116 <at_ble_event_get+0xfa>
1000f108:	4a80      	ldr	r2, [pc, #512]	; (1000f30c <at_ble_event_get+0x2f0>)
1000f10a:	4293      	cmp	r3, r2
1000f10c:	d20b      	bcs.n	1000f126 <at_ble_event_get+0x10a>
1000f10e:	4a80      	ldr	r2, [pc, #512]	; (1000f310 <at_ble_event_get+0x2f4>)
1000f110:	4293      	cmp	r3, r2
1000f112:	d008      	beq.n	1000f126 <at_ble_event_get+0x10a>
1000f114:	e009      	b.n	1000f12a <at_ble_event_get+0x10e>
1000f116:	497f      	ldr	r1, [pc, #508]	; (1000f314 <at_ble_event_get+0x2f8>)
1000f118:	428b      	cmp	r3, r1
1000f11a:	d106      	bne.n	1000f12a <at_ble_event_get+0x10e>
1000f11c:	0213      	lsls	r3, r2, #8
1000f11e:	4303      	orrs	r3, r0
1000f120:	80ab      	strh	r3, [r5, #4]
1000f122:	2337      	movs	r3, #55	; 0x37
1000f124:	e002      	b.n	1000f12c <at_ble_event_get+0x110>
1000f126:	2336      	movs	r3, #54	; 0x36
1000f128:	e000      	b.n	1000f12c <at_ble_event_get+0x110>
1000f12a:	2300      	movs	r3, #0
1000f12c:	9a01      	ldr	r2, [sp, #4]
1000f12e:	7013      	strb	r3, [r2, #0]
1000f130:	e7c8      	b.n	1000f0c4 <at_ble_event_get+0xa8>
1000f132:	4879      	ldr	r0, [pc, #484]	; (1000f318 <at_ble_event_get+0x2fc>)
1000f134:	4283      	cmp	r3, r0
1000f136:	d100      	bne.n	1000f13a <at_ble_event_get+0x11e>
1000f138:	e14c      	b.n	1000f3d4 <at_ble_event_get+0x3b8>
1000f13a:	d864      	bhi.n	1000f206 <at_ble_event_get+0x1ea>
1000f13c:	4877      	ldr	r0, [pc, #476]	; (1000f31c <at_ble_event_get+0x300>)
1000f13e:	4283      	cmp	r3, r0
1000f140:	d100      	bne.n	1000f144 <at_ble_event_get+0x128>
1000f142:	e1cd      	b.n	1000f4e0 <at_ble_event_get+0x4c4>
1000f144:	d82f      	bhi.n	1000f1a6 <at_ble_event_get+0x18a>
1000f146:	4876      	ldr	r0, [pc, #472]	; (1000f320 <at_ble_event_get+0x304>)
1000f148:	4283      	cmp	r3, r0
1000f14a:	d100      	bne.n	1000f14e <at_ble_event_get+0x132>
1000f14c:	e1d6      	b.n	1000f4fc <at_ble_event_get+0x4e0>
1000f14e:	d813      	bhi.n	1000f178 <at_ble_event_get+0x15c>
1000f150:	4874      	ldr	r0, [pc, #464]	; (1000f324 <at_ble_event_get+0x308>)
1000f152:	4283      	cmp	r3, r0
1000f154:	d100      	bne.n	1000f158 <at_ble_event_get+0x13c>
1000f156:	e19f      	b.n	1000f498 <at_ble_event_get+0x47c>
1000f158:	d804      	bhi.n	1000f164 <at_ble_event_get+0x148>
1000f15a:	2438      	movs	r4, #56	; 0x38
1000f15c:	42a3      	cmp	r3, r4
1000f15e:	d100      	bne.n	1000f162 <at_ble_event_get+0x146>
1000f160:	e20f      	b.n	1000f582 <at_ble_event_get+0x566>
1000f162:	e0b6      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f164:	4870      	ldr	r0, [pc, #448]	; (1000f328 <at_ble_event_get+0x30c>)
1000f166:	4283      	cmp	r3, r0
1000f168:	d100      	bne.n	1000f16c <at_ble_event_get+0x150>
1000f16a:	e19b      	b.n	1000f4a4 <at_ble_event_get+0x488>
1000f16c:	30fe      	adds	r0, #254	; 0xfe
1000f16e:	30ff      	adds	r0, #255	; 0xff
1000f170:	4283      	cmp	r3, r0
1000f172:	d100      	bne.n	1000f176 <at_ble_event_get+0x15a>
1000f174:	e1c8      	b.n	1000f508 <at_ble_event_get+0x4ec>
1000f176:	e0ac      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f178:	486c      	ldr	r0, [pc, #432]	; (1000f32c <at_ble_event_get+0x310>)
1000f17a:	4283      	cmp	r3, r0
1000f17c:	d100      	bne.n	1000f180 <at_ble_event_get+0x164>
1000f17e:	e1a3      	b.n	1000f4c8 <at_ble_event_get+0x4ac>
1000f180:	d808      	bhi.n	1000f194 <at_ble_event_get+0x178>
1000f182:	486b      	ldr	r0, [pc, #428]	; (1000f330 <at_ble_event_get+0x314>)
1000f184:	4283      	cmp	r3, r0
1000f186:	d100      	bne.n	1000f18a <at_ble_event_get+0x16e>
1000f188:	e192      	b.n	1000f4b0 <at_ble_event_get+0x494>
1000f18a:	486a      	ldr	r0, [pc, #424]	; (1000f334 <at_ble_event_get+0x318>)
1000f18c:	4283      	cmp	r3, r0
1000f18e:	d100      	bne.n	1000f192 <at_ble_event_get+0x176>
1000f190:	e194      	b.n	1000f4bc <at_ble_event_get+0x4a0>
1000f192:	e09e      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f194:	4868      	ldr	r0, [pc, #416]	; (1000f338 <at_ble_event_get+0x31c>)
1000f196:	4283      	cmp	r3, r0
1000f198:	d100      	bne.n	1000f19c <at_ble_event_get+0x180>
1000f19a:	e19b      	b.n	1000f4d4 <at_ble_event_get+0x4b8>
1000f19c:	4867      	ldr	r0, [pc, #412]	; (1000f33c <at_ble_event_get+0x320>)
1000f19e:	4283      	cmp	r3, r0
1000f1a0:	d100      	bne.n	1000f1a4 <at_ble_event_get+0x188>
1000f1a2:	e1c5      	b.n	1000f530 <at_ble_event_get+0x514>
1000f1a4:	e095      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f1a6:	4866      	ldr	r0, [pc, #408]	; (1000f340 <at_ble_event_get+0x324>)
1000f1a8:	4283      	cmp	r3, r0
1000f1aa:	d100      	bne.n	1000f1ae <at_ble_event_get+0x192>
1000f1ac:	e1ba      	b.n	1000f524 <at_ble_event_get+0x508>
1000f1ae:	d812      	bhi.n	1000f1d6 <at_ble_event_get+0x1ba>
1000f1b0:	4864      	ldr	r0, [pc, #400]	; (1000f344 <at_ble_event_get+0x328>)
1000f1b2:	4283      	cmp	r3, r0
1000f1b4:	d100      	bne.n	1000f1b8 <at_ble_event_get+0x19c>
1000f1b6:	e1c1      	b.n	1000f53c <at_ble_event_get+0x520>
1000f1b8:	d804      	bhi.n	1000f1c4 <at_ble_event_get+0x1a8>
1000f1ba:	4863      	ldr	r0, [pc, #396]	; (1000f348 <at_ble_event_get+0x32c>)
1000f1bc:	4283      	cmp	r3, r0
1000f1be:	d100      	bne.n	1000f1c2 <at_ble_event_get+0x1a6>
1000f1c0:	e192      	b.n	1000f4e8 <at_ble_event_get+0x4cc>
1000f1c2:	e086      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f1c4:	4861      	ldr	r0, [pc, #388]	; (1000f34c <at_ble_event_get+0x330>)
1000f1c6:	4283      	cmp	r3, r0
1000f1c8:	d100      	bne.n	1000f1cc <at_ble_event_get+0x1b0>
1000f1ca:	e1a1      	b.n	1000f510 <at_ble_event_get+0x4f4>
1000f1cc:	4860      	ldr	r0, [pc, #384]	; (1000f350 <at_ble_event_get+0x334>)
1000f1ce:	4283      	cmp	r3, r0
1000f1d0:	d100      	bne.n	1000f1d4 <at_ble_event_get+0x1b8>
1000f1d2:	e1a3      	b.n	1000f51c <at_ble_event_get+0x500>
1000f1d4:	e07d      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f1d6:	4a5f      	ldr	r2, [pc, #380]	; (1000f354 <at_ble_event_get+0x338>)
1000f1d8:	4293      	cmp	r3, r2
1000f1da:	d100      	bne.n	1000f1de <at_ble_event_get+0x1c2>
1000f1dc:	e07f      	b.n	1000f2de <at_ble_event_get+0x2c2>
1000f1de:	d808      	bhi.n	1000f1f2 <at_ble_event_get+0x1d6>
1000f1e0:	3a08      	subs	r2, #8
1000f1e2:	4293      	cmp	r3, r2
1000f1e4:	d077      	beq.n	1000f2d6 <at_ble_event_get+0x2ba>
1000f1e6:	4a5c      	ldr	r2, [pc, #368]	; (1000f358 <at_ble_event_get+0x33c>)
1000f1e8:	2439      	movs	r4, #57	; 0x39
1000f1ea:	4293      	cmp	r3, r2
1000f1ec:	d100      	bne.n	1000f1f0 <at_ble_event_get+0x1d4>
1000f1ee:	e1c8      	b.n	1000f582 <at_ble_event_get+0x566>
1000f1f0:	e06f      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f1f2:	22d1      	movs	r2, #209	; 0xd1
1000f1f4:	0112      	lsls	r2, r2, #4
1000f1f6:	4293      	cmp	r3, r2
1000f1f8:	d100      	bne.n	1000f1fc <at_ble_event_get+0x1e0>
1000f1fa:	e0df      	b.n	1000f3bc <at_ble_event_get+0x3a0>
1000f1fc:	4a57      	ldr	r2, [pc, #348]	; (1000f35c <at_ble_event_get+0x340>)
1000f1fe:	4293      	cmp	r3, r2
1000f200:	d100      	bne.n	1000f204 <at_ble_event_get+0x1e8>
1000f202:	e0e1      	b.n	1000f3c8 <at_ble_event_get+0x3ac>
1000f204:	e065      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f206:	4856      	ldr	r0, [pc, #344]	; (1000f360 <at_ble_event_get+0x344>)
1000f208:	4283      	cmp	r3, r0
1000f20a:	d100      	bne.n	1000f20e <at_ble_event_get+0x1f2>
1000f20c:	e118      	b.n	1000f440 <at_ble_event_get+0x424>
1000f20e:	d82e      	bhi.n	1000f26e <at_ble_event_get+0x252>
1000f210:	4854      	ldr	r0, [pc, #336]	; (1000f364 <at_ble_event_get+0x348>)
1000f212:	4283      	cmp	r3, r0
1000f214:	d100      	bne.n	1000f218 <at_ble_event_get+0x1fc>
1000f216:	e13b      	b.n	1000f490 <at_ble_event_get+0x474>
1000f218:	d812      	bhi.n	1000f240 <at_ble_event_get+0x224>
1000f21a:	4853      	ldr	r0, [pc, #332]	; (1000f368 <at_ble_event_get+0x34c>)
1000f21c:	4283      	cmp	r3, r0
1000f21e:	d100      	bne.n	1000f222 <at_ble_event_get+0x206>
1000f220:	e0ee      	b.n	1000f400 <at_ble_event_get+0x3e4>
1000f222:	d804      	bhi.n	1000f22e <at_ble_event_get+0x212>
1000f224:	3803      	subs	r0, #3
1000f226:	4283      	cmp	r3, r0
1000f228:	d100      	bne.n	1000f22c <at_ble_event_get+0x210>
1000f22a:	e0d9      	b.n	1000f3e0 <at_ble_event_get+0x3c4>
1000f22c:	e051      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f22e:	484f      	ldr	r0, [pc, #316]	; (1000f36c <at_ble_event_get+0x350>)
1000f230:	4283      	cmp	r3, r0
1000f232:	d100      	bne.n	1000f236 <at_ble_event_get+0x21a>
1000f234:	e0d8      	b.n	1000f3e8 <at_ble_event_get+0x3cc>
1000f236:	484e      	ldr	r0, [pc, #312]	; (1000f370 <at_ble_event_get+0x354>)
1000f238:	4283      	cmp	r3, r0
1000f23a:	d100      	bne.n	1000f23e <at_ble_event_get+0x222>
1000f23c:	e0fb      	b.n	1000f436 <at_ble_event_get+0x41a>
1000f23e:	e048      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f240:	484c      	ldr	r0, [pc, #304]	; (1000f374 <at_ble_event_get+0x358>)
1000f242:	4283      	cmp	r3, r0
1000f244:	d100      	bne.n	1000f248 <at_ble_event_get+0x22c>
1000f246:	e0e1      	b.n	1000f40c <at_ble_event_get+0x3f0>
1000f248:	d808      	bhi.n	1000f25c <at_ble_event_get+0x240>
1000f24a:	484b      	ldr	r0, [pc, #300]	; (1000f378 <at_ble_event_get+0x35c>)
1000f24c:	4283      	cmp	r3, r0
1000f24e:	d100      	bne.n	1000f252 <at_ble_event_get+0x236>
1000f250:	e11a      	b.n	1000f488 <at_ble_event_get+0x46c>
1000f252:	484a      	ldr	r0, [pc, #296]	; (1000f37c <at_ble_event_get+0x360>)
1000f254:	4283      	cmp	r3, r0
1000f256:	d100      	bne.n	1000f25a <at_ble_event_get+0x23e>
1000f258:	e0dd      	b.n	1000f416 <at_ble_event_get+0x3fa>
1000f25a:	e03a      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f25c:	4848      	ldr	r0, [pc, #288]	; (1000f380 <at_ble_event_get+0x364>)
1000f25e:	4283      	cmp	r3, r0
1000f260:	d100      	bne.n	1000f264 <at_ble_event_get+0x248>
1000f262:	e0dc      	b.n	1000f41e <at_ble_event_get+0x402>
1000f264:	4847      	ldr	r0, [pc, #284]	; (1000f384 <at_ble_event_get+0x368>)
1000f266:	4283      	cmp	r3, r0
1000f268:	d100      	bne.n	1000f26c <at_ble_event_get+0x250>
1000f26a:	e0de      	b.n	1000f42a <at_ble_event_get+0x40e>
1000f26c:	e031      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f26e:	4846      	ldr	r0, [pc, #280]	; (1000f388 <at_ble_event_get+0x36c>)
1000f270:	4283      	cmp	r3, r0
1000f272:	d100      	bne.n	1000f276 <at_ble_event_get+0x25a>
1000f274:	e0f6      	b.n	1000f464 <at_ble_event_get+0x448>
1000f276:	d816      	bhi.n	1000f2a6 <at_ble_event_get+0x28a>
1000f278:	4844      	ldr	r0, [pc, #272]	; (1000f38c <at_ble_event_get+0x370>)
1000f27a:	4283      	cmp	r3, r0
1000f27c:	d100      	bne.n	1000f280 <at_ble_event_get+0x264>
1000f27e:	e0f7      	b.n	1000f470 <at_ble_event_get+0x454>
1000f280:	d808      	bhi.n	1000f294 <at_ble_event_get+0x278>
1000f282:	4843      	ldr	r0, [pc, #268]	; (1000f390 <at_ble_event_get+0x374>)
1000f284:	4283      	cmp	r3, r0
1000f286:	d100      	bne.n	1000f28a <at_ble_event_get+0x26e>
1000f288:	e0e0      	b.n	1000f44c <at_ble_event_get+0x430>
1000f28a:	4842      	ldr	r0, [pc, #264]	; (1000f394 <at_ble_event_get+0x378>)
1000f28c:	4283      	cmp	r3, r0
1000f28e:	d100      	bne.n	1000f292 <at_ble_event_get+0x276>
1000f290:	e0b0      	b.n	1000f3f4 <at_ble_event_get+0x3d8>
1000f292:	e01e      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f294:	4a40      	ldr	r2, [pc, #256]	; (1000f398 <at_ble_event_get+0x37c>)
1000f296:	4293      	cmp	r3, r2
1000f298:	d100      	bne.n	1000f29c <at_ble_event_get+0x280>
1000f29a:	e0dd      	b.n	1000f458 <at_ble_event_get+0x43c>
1000f29c:	4a3f      	ldr	r2, [pc, #252]	; (1000f39c <at_ble_event_get+0x380>)
1000f29e:	4293      	cmp	r3, r2
1000f2a0:	d100      	bne.n	1000f2a4 <at_ble_event_get+0x288>
1000f2a2:	e0eb      	b.n	1000f47c <at_ble_event_get+0x460>
1000f2a4:	e015      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f2a6:	483e      	ldr	r0, [pc, #248]	; (1000f3a0 <at_ble_event_get+0x384>)
1000f2a8:	4283      	cmp	r3, r0
1000f2aa:	d100      	bne.n	1000f2ae <at_ble_event_get+0x292>
1000f2ac:	e158      	b.n	1000f560 <at_ble_event_get+0x544>
1000f2ae:	d808      	bhi.n	1000f2c2 <at_ble_event_get+0x2a6>
1000f2b0:	483c      	ldr	r0, [pc, #240]	; (1000f3a4 <at_ble_event_get+0x388>)
1000f2b2:	4283      	cmp	r3, r0
1000f2b4:	d100      	bne.n	1000f2b8 <at_ble_event_get+0x29c>
1000f2b6:	e147      	b.n	1000f548 <at_ble_event_get+0x52c>
1000f2b8:	483b      	ldr	r0, [pc, #236]	; (1000f3a8 <at_ble_event_get+0x38c>)
1000f2ba:	4283      	cmp	r3, r0
1000f2bc:	d100      	bne.n	1000f2c0 <at_ble_event_get+0x2a4>
1000f2be:	e149      	b.n	1000f554 <at_ble_event_get+0x538>
1000f2c0:	e007      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f2c2:	483a      	ldr	r0, [pc, #232]	; (1000f3ac <at_ble_event_get+0x390>)
1000f2c4:	4283      	cmp	r3, r0
1000f2c6:	d100      	bne.n	1000f2ca <at_ble_event_get+0x2ae>
1000f2c8:	e150      	b.n	1000f56c <at_ble_event_get+0x550>
1000f2ca:	4839      	ldr	r0, [pc, #228]	; (1000f3b0 <at_ble_event_get+0x394>)
1000f2cc:	4283      	cmp	r3, r0
1000f2ce:	d100      	bne.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f2d0:	e152      	b.n	1000f578 <at_ble_event_get+0x55c>
1000f2d2:	2400      	movs	r4, #0
1000f2d4:	e155      	b.n	1000f582 <at_ble_event_get+0x566>
1000f2d6:	1c08      	adds	r0, r1, #0
1000f2d8:	4b36      	ldr	r3, [pc, #216]	; (1000f3b4 <at_ble_event_get+0x398>)
1000f2da:	1c29      	adds	r1, r5, #0
1000f2dc:	e07d      	b.n	1000f3da <at_ble_event_get+0x3be>
1000f2de:	1c08      	adds	r0, r1, #0
1000f2e0:	4b35      	ldr	r3, [pc, #212]	; (1000f3b8 <at_ble_event_get+0x39c>)
1000f2e2:	1c29      	adds	r1, r5, #0
1000f2e4:	4798      	blx	r3
1000f2e6:	2404      	movs	r4, #4
1000f2e8:	e14b      	b.n	1000f582 <at_ble_event_get+0x566>
1000f2ea:	46c0      	nop			; (mov r8, r8)
1000f2ec:	10010919 	.word	0x10010919
1000f2f0:	10016854 	.word	0x10016854
1000f2f4:	1000e991 	.word	0x1000e991
1000f2f8:	10016858 	.word	0x10016858
1000f2fc:	0000ffff 	.word	0x0000ffff
1000f300:	0000fffe 	.word	0x0000fffe
1000f304:	1001091b 	.word	0x1001091b
1000f308:	0000201e 	.word	0x0000201e
1000f30c:	0000201d 	.word	0x0000201d
1000f310:	00000c03 	.word	0x00000c03
1000f314:	0000201f 	.word	0x0000201f
1000f318:	00000d1c 	.word	0x00000d1c
1000f31c:	00000c0c 	.word	0x00000c0c
1000f320:	00000c02 	.word	0x00000c02
1000f324:	00000a02 	.word	0x00000a02
1000f328:	00000a03 	.word	0x00000a03
1000f32c:	00000c06 	.word	0x00000c06
1000f330:	00000c04 	.word	0x00000c04
1000f334:	00000c05 	.word	0x00000c05
1000f338:	00000c07 	.word	0x00000c07
1000f33c:	00000c09 	.word	0x00000c09
1000f340:	00000c17 	.word	0x00000c17
1000f344:	00000c12 	.word	0x00000c12
1000f348:	00000c0d 	.word	0x00000c0d
1000f34c:	00000c13 	.word	0x00000c13
1000f350:	00000c15 	.word	0x00000c15
1000f354:	00000d08 	.word	0x00000d08
1000f358:	00000d01 	.word	0x00000d01
1000f35c:	00000d15 	.word	0x00000d15
1000f360:	00000e1b 	.word	0x00000e1b
1000f364:	00000e0f 	.word	0x00000e0f
1000f368:	00000e03 	.word	0x00000e03
1000f36c:	00000e06 	.word	0x00000e06
1000f370:	00000e0a 	.word	0x00000e0a
1000f374:	00000e15 	.word	0x00000e15
1000f378:	00000e11 	.word	0x00000e11
1000f37c:	00000e13 	.word	0x00000e13
1000f380:	00000e17 	.word	0x00000e17
1000f384:	00000e19 	.word	0x00000e19
1000f388:	00000e27 	.word	0x00000e27
1000f38c:	00000e21 	.word	0x00000e21
1000f390:	00000e1c 	.word	0x00000e1c
1000f394:	00000e1d 	.word	0x00000e1d
1000f398:	00000e22 	.word	0x00000e22
1000f39c:	00000e25 	.word	0x00000e25
1000f3a0:	00001b05 	.word	0x00001b05
1000f3a4:	00001b01 	.word	0x00001b01
1000f3a8:	00001b03 	.word	0x00001b03
1000f3ac:	00001b06 	.word	0x00001b06
1000f3b0:	00001b08 	.word	0x00001b08
1000f3b4:	10011745 	.word	0x10011745
1000f3b8:	10011729 	.word	0x10011729
1000f3bc:	1c08      	adds	r0, r1, #0
1000f3be:	4b79      	ldr	r3, [pc, #484]	; (1000f5a4 <at_ble_event_get+0x588>)
1000f3c0:	1c29      	adds	r1, r5, #0
1000f3c2:	4798      	blx	r3
1000f3c4:	2401      	movs	r4, #1
1000f3c6:	e0dc      	b.n	1000f582 <at_ble_event_get+0x566>
1000f3c8:	1c08      	adds	r0, r1, #0
1000f3ca:	4b77      	ldr	r3, [pc, #476]	; (1000f5a8 <at_ble_event_get+0x58c>)
1000f3cc:	1c29      	adds	r1, r5, #0
1000f3ce:	4798      	blx	r3
1000f3d0:	240f      	movs	r4, #15
1000f3d2:	e0d6      	b.n	1000f582 <at_ble_event_get+0x566>
1000f3d4:	1c08      	adds	r0, r1, #0
1000f3d6:	1c29      	adds	r1, r5, #0
1000f3d8:	4b74      	ldr	r3, [pc, #464]	; (1000f5ac <at_ble_event_get+0x590>)
1000f3da:	4798      	blx	r3
1000f3dc:	1c04      	adds	r4, r0, #0
1000f3de:	e0d0      	b.n	1000f582 <at_ble_event_get+0x566>
1000f3e0:	1c10      	adds	r0, r2, #0
1000f3e2:	4b73      	ldr	r3, [pc, #460]	; (1000f5b0 <at_ble_event_get+0x594>)
1000f3e4:	1c2a      	adds	r2, r5, #0
1000f3e6:	e014      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f3e8:	1c10      	adds	r0, r2, #0
1000f3ea:	4b72      	ldr	r3, [pc, #456]	; (1000f5b4 <at_ble_event_get+0x598>)
1000f3ec:	1c2a      	adds	r2, r5, #0
1000f3ee:	4798      	blx	r3
1000f3f0:	2411      	movs	r4, #17
1000f3f2:	e0c6      	b.n	1000f582 <at_ble_event_get+0x566>
1000f3f4:	1c10      	adds	r0, r2, #0
1000f3f6:	4b70      	ldr	r3, [pc, #448]	; (1000f5b8 <at_ble_event_get+0x59c>)
1000f3f8:	1c2a      	adds	r2, r5, #0
1000f3fa:	4798      	blx	r3
1000f3fc:	2412      	movs	r4, #18
1000f3fe:	e0c0      	b.n	1000f582 <at_ble_event_get+0x566>
1000f400:	1c08      	adds	r0, r1, #0
1000f402:	4b6e      	ldr	r3, [pc, #440]	; (1000f5bc <at_ble_event_get+0x5a0>)
1000f404:	1c29      	adds	r1, r5, #0
1000f406:	4798      	blx	r3
1000f408:	2406      	movs	r4, #6
1000f40a:	e0ba      	b.n	1000f582 <at_ble_event_get+0x566>
1000f40c:	1c10      	adds	r0, r2, #0
1000f40e:	1c2a      	adds	r2, r5, #0
1000f410:	4b6b      	ldr	r3, [pc, #428]	; (1000f5c0 <at_ble_event_get+0x5a4>)
1000f412:	4798      	blx	r3
1000f414:	e7e2      	b.n	1000f3dc <at_ble_event_get+0x3c0>
1000f416:	1c10      	adds	r0, r2, #0
1000f418:	4b6a      	ldr	r3, [pc, #424]	; (1000f5c4 <at_ble_event_get+0x5a8>)
1000f41a:	1c2a      	adds	r2, r5, #0
1000f41c:	e7f9      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f41e:	1c10      	adds	r0, r2, #0
1000f420:	4b69      	ldr	r3, [pc, #420]	; (1000f5c8 <at_ble_event_get+0x5ac>)
1000f422:	1c2a      	adds	r2, r5, #0
1000f424:	4798      	blx	r3
1000f426:	240d      	movs	r4, #13
1000f428:	e0ab      	b.n	1000f582 <at_ble_event_get+0x566>
1000f42a:	1c10      	adds	r0, r2, #0
1000f42c:	4b67      	ldr	r3, [pc, #412]	; (1000f5cc <at_ble_event_get+0x5b0>)
1000f42e:	1c2a      	adds	r2, r5, #0
1000f430:	4798      	blx	r3
1000f432:	240e      	movs	r4, #14
1000f434:	e0a5      	b.n	1000f582 <at_ble_event_get+0x566>
1000f436:	1c10      	adds	r0, r2, #0
1000f438:	4b65      	ldr	r3, [pc, #404]	; (1000f5d0 <at_ble_event_get+0x5b4>)
1000f43a:	1c2a      	adds	r2, r5, #0
1000f43c:	4798      	blx	r3
1000f43e:	e075      	b.n	1000f52c <at_ble_event_get+0x510>
1000f440:	1c10      	adds	r0, r2, #0
1000f442:	4b64      	ldr	r3, [pc, #400]	; (1000f5d4 <at_ble_event_get+0x5b8>)
1000f444:	1c2a      	adds	r2, r5, #0
1000f446:	4798      	blx	r3
1000f448:	240b      	movs	r4, #11
1000f44a:	e09a      	b.n	1000f582 <at_ble_event_get+0x566>
1000f44c:	1c10      	adds	r0, r2, #0
1000f44e:	4b62      	ldr	r3, [pc, #392]	; (1000f5d8 <at_ble_event_get+0x5bc>)
1000f450:	1c2a      	adds	r2, r5, #0
1000f452:	4798      	blx	r3
1000f454:	2410      	movs	r4, #16
1000f456:	e094      	b.n	1000f582 <at_ble_event_get+0x566>
1000f458:	1c08      	adds	r0, r1, #0
1000f45a:	4b60      	ldr	r3, [pc, #384]	; (1000f5dc <at_ble_event_get+0x5c0>)
1000f45c:	1c29      	adds	r1, r5, #0
1000f45e:	4798      	blx	r3
1000f460:	2428      	movs	r4, #40	; 0x28
1000f462:	e08e      	b.n	1000f582 <at_ble_event_get+0x566>
1000f464:	1c08      	adds	r0, r1, #0
1000f466:	4b5e      	ldr	r3, [pc, #376]	; (1000f5e0 <at_ble_event_get+0x5c4>)
1000f468:	1c29      	adds	r1, r5, #0
1000f46a:	4798      	blx	r3
1000f46c:	2429      	movs	r4, #41	; 0x29
1000f46e:	e088      	b.n	1000f582 <at_ble_event_get+0x566>
1000f470:	1c08      	adds	r0, r1, #0
1000f472:	4b5c      	ldr	r3, [pc, #368]	; (1000f5e4 <at_ble_event_get+0x5c8>)
1000f474:	1c29      	adds	r1, r5, #0
1000f476:	4798      	blx	r3
1000f478:	2427      	movs	r4, #39	; 0x27
1000f47a:	e082      	b.n	1000f582 <at_ble_event_get+0x566>
1000f47c:	1c08      	adds	r0, r1, #0
1000f47e:	4b5a      	ldr	r3, [pc, #360]	; (1000f5e8 <at_ble_event_get+0x5cc>)
1000f480:	1c29      	adds	r1, r5, #0
1000f482:	4798      	blx	r3
1000f484:	242a      	movs	r4, #42	; 0x2a
1000f486:	e07c      	b.n	1000f582 <at_ble_event_get+0x566>
1000f488:	1c10      	adds	r0, r2, #0
1000f48a:	4b58      	ldr	r3, [pc, #352]	; (1000f5ec <at_ble_event_get+0x5d0>)
1000f48c:	1c2a      	adds	r2, r5, #0
1000f48e:	e7c0      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f490:	1c10      	adds	r0, r2, #0
1000f492:	4b57      	ldr	r3, [pc, #348]	; (1000f5f0 <at_ble_event_get+0x5d4>)
1000f494:	1c2a      	adds	r2, r5, #0
1000f496:	e7bc      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f498:	1c08      	adds	r0, r1, #0
1000f49a:	4b56      	ldr	r3, [pc, #344]	; (1000f5f4 <at_ble_event_get+0x5d8>)
1000f49c:	1c29      	adds	r1, r5, #0
1000f49e:	4798      	blx	r3
1000f4a0:	242b      	movs	r4, #43	; 0x2b
1000f4a2:	e06e      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4a4:	1c08      	adds	r0, r1, #0
1000f4a6:	4b54      	ldr	r3, [pc, #336]	; (1000f5f8 <at_ble_event_get+0x5dc>)
1000f4a8:	1c29      	adds	r1, r5, #0
1000f4aa:	4798      	blx	r3
1000f4ac:	242c      	movs	r4, #44	; 0x2c
1000f4ae:	e068      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4b0:	1c10      	adds	r0, r2, #0
1000f4b2:	4b52      	ldr	r3, [pc, #328]	; (1000f5fc <at_ble_event_get+0x5e0>)
1000f4b4:	1c2a      	adds	r2, r5, #0
1000f4b6:	4798      	blx	r3
1000f4b8:	2413      	movs	r4, #19
1000f4ba:	e062      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4bc:	1c10      	adds	r0, r2, #0
1000f4be:	4b50      	ldr	r3, [pc, #320]	; (1000f600 <at_ble_event_get+0x5e4>)
1000f4c0:	1c2a      	adds	r2, r5, #0
1000f4c2:	4798      	blx	r3
1000f4c4:	2414      	movs	r4, #20
1000f4c6:	e05c      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4c8:	1c10      	adds	r0, r2, #0
1000f4ca:	4b4e      	ldr	r3, [pc, #312]	; (1000f604 <at_ble_event_get+0x5e8>)
1000f4cc:	1c2a      	adds	r2, r5, #0
1000f4ce:	4798      	blx	r3
1000f4d0:	2415      	movs	r4, #21
1000f4d2:	e056      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4d4:	1c10      	adds	r0, r2, #0
1000f4d6:	4b4c      	ldr	r3, [pc, #304]	; (1000f608 <at_ble_event_get+0x5ec>)
1000f4d8:	1c2a      	adds	r2, r5, #0
1000f4da:	4798      	blx	r3
1000f4dc:	2416      	movs	r4, #22
1000f4de:	e050      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4e0:	1c10      	adds	r0, r2, #0
1000f4e2:	4b4a      	ldr	r3, [pc, #296]	; (1000f60c <at_ble_event_get+0x5f0>)
1000f4e4:	1c2a      	adds	r2, r5, #0
1000f4e6:	e794      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f4e8:	1c10      	adds	r0, r2, #0
1000f4ea:	4b48      	ldr	r3, [pc, #288]	; (1000f60c <at_ble_event_get+0x5f0>)
1000f4ec:	1c2a      	adds	r2, r5, #0
1000f4ee:	4798      	blx	r3
1000f4f0:	88a9      	ldrh	r1, [r5, #4]
1000f4f2:	1c04      	adds	r4, r0, #0
1000f4f4:	4b46      	ldr	r3, [pc, #280]	; (1000f610 <at_ble_event_get+0x5f4>)
1000f4f6:	8828      	ldrh	r0, [r5, #0]
1000f4f8:	4798      	blx	r3
1000f4fa:	e042      	b.n	1000f582 <at_ble_event_get+0x566>
1000f4fc:	1c10      	adds	r0, r2, #0
1000f4fe:	4b45      	ldr	r3, [pc, #276]	; (1000f614 <at_ble_event_get+0x5f8>)
1000f500:	1c2a      	adds	r2, r5, #0
1000f502:	4798      	blx	r3
1000f504:	2423      	movs	r4, #35	; 0x23
1000f506:	e03c      	b.n	1000f582 <at_ble_event_get+0x566>
1000f508:	1c10      	adds	r0, r2, #0
1000f50a:	4b43      	ldr	r3, [pc, #268]	; (1000f618 <at_ble_event_get+0x5fc>)
1000f50c:	1c2a      	adds	r2, r5, #0
1000f50e:	e780      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f510:	0a12      	lsrs	r2, r2, #8
1000f512:	1c08      	adds	r0, r1, #0
1000f514:	802a      	strh	r2, [r5, #0]
1000f516:	1c29      	adds	r1, r5, #0
1000f518:	4b40      	ldr	r3, [pc, #256]	; (1000f61c <at_ble_event_get+0x600>)
1000f51a:	e75e      	b.n	1000f3da <at_ble_event_get+0x3be>
1000f51c:	1c10      	adds	r0, r2, #0
1000f51e:	4b40      	ldr	r3, [pc, #256]	; (1000f620 <at_ble_event_get+0x604>)
1000f520:	1c2a      	adds	r2, r5, #0
1000f522:	e776      	b.n	1000f412 <at_ble_event_get+0x3f6>
1000f524:	1c08      	adds	r0, r1, #0
1000f526:	4b3f      	ldr	r3, [pc, #252]	; (1000f624 <at_ble_event_get+0x608>)
1000f528:	1c29      	adds	r1, r5, #0
1000f52a:	4798      	blx	r3
1000f52c:	243b      	movs	r4, #59	; 0x3b
1000f52e:	e028      	b.n	1000f582 <at_ble_event_get+0x566>
1000f530:	1c10      	adds	r0, r2, #0
1000f532:	4b3d      	ldr	r3, [pc, #244]	; (1000f628 <at_ble_event_get+0x60c>)
1000f534:	1c2a      	adds	r2, r5, #0
1000f536:	4798      	blx	r3
1000f538:	2418      	movs	r4, #24
1000f53a:	e022      	b.n	1000f582 <at_ble_event_get+0x566>
1000f53c:	1c10      	adds	r0, r2, #0
1000f53e:	4b3b      	ldr	r3, [pc, #236]	; (1000f62c <at_ble_event_get+0x610>)
1000f540:	1c2a      	adds	r2, r5, #0
1000f542:	4798      	blx	r3
1000f544:	2420      	movs	r4, #32
1000f546:	e01c      	b.n	1000f582 <at_ble_event_get+0x566>
1000f548:	1c10      	adds	r0, r2, #0
1000f54a:	4b39      	ldr	r3, [pc, #228]	; (1000f630 <at_ble_event_get+0x614>)
1000f54c:	1c2a      	adds	r2, r5, #0
1000f54e:	4798      	blx	r3
1000f550:	2433      	movs	r4, #51	; 0x33
1000f552:	e016      	b.n	1000f582 <at_ble_event_get+0x566>
1000f554:	1c10      	adds	r0, r2, #0
1000f556:	4b37      	ldr	r3, [pc, #220]	; (1000f634 <at_ble_event_get+0x618>)
1000f558:	1c2a      	adds	r2, r5, #0
1000f55a:	4798      	blx	r3
1000f55c:	2430      	movs	r4, #48	; 0x30
1000f55e:	e010      	b.n	1000f582 <at_ble_event_get+0x566>
1000f560:	1c10      	adds	r0, r2, #0
1000f562:	4b35      	ldr	r3, [pc, #212]	; (1000f638 <at_ble_event_get+0x61c>)
1000f564:	1c2a      	adds	r2, r5, #0
1000f566:	4798      	blx	r3
1000f568:	2434      	movs	r4, #52	; 0x34
1000f56a:	e00a      	b.n	1000f582 <at_ble_event_get+0x566>
1000f56c:	1c10      	adds	r0, r2, #0
1000f56e:	4b33      	ldr	r3, [pc, #204]	; (1000f63c <at_ble_event_get+0x620>)
1000f570:	1c2a      	adds	r2, r5, #0
1000f572:	4798      	blx	r3
1000f574:	2435      	movs	r4, #53	; 0x35
1000f576:	e004      	b.n	1000f582 <at_ble_event_get+0x566>
1000f578:	1c10      	adds	r0, r2, #0
1000f57a:	4b31      	ldr	r3, [pc, #196]	; (1000f640 <at_ble_event_get+0x624>)
1000f57c:	1c2a      	adds	r2, r5, #0
1000f57e:	4798      	blx	r3
1000f580:	2432      	movs	r4, #50	; 0x32
1000f582:	9b01      	ldr	r3, [sp, #4]
1000f584:	701c      	strb	r4, [r3, #0]
1000f586:	2400      	movs	r4, #0
1000f588:	e59c      	b.n	1000f0c4 <at_ble_event_get+0xa8>
1000f58a:	24d0      	movs	r4, #208	; 0xd0
1000f58c:	e59a      	b.n	1000f0c4 <at_ble_event_get+0xa8>
1000f58e:	2abb      	cmp	r2, #187	; 0xbb
1000f590:	d000      	beq.n	1000f594 <at_ble_event_get+0x578>
1000f592:	e69e      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f594:	e7f5      	b.n	1000f582 <at_ble_event_get+0x566>
1000f596:	2c00      	cmp	r4, #0
1000f598:	d000      	beq.n	1000f59c <at_ble_event_get+0x580>
1000f59a:	e593      	b.n	1000f0c4 <at_ble_event_get+0xa8>
1000f59c:	e699      	b.n	1000f2d2 <at_ble_event_get+0x2b6>
1000f59e:	1c20      	adds	r0, r4, #0
1000f5a0:	b005      	add	sp, #20
1000f5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5a4:	100119c5 	.word	0x100119c5
1000f5a8:	10011ab5 	.word	0x10011ab5
1000f5ac:	10011ad9 	.word	0x10011ad9
1000f5b0:	10010abd 	.word	0x10010abd
1000f5b4:	1001133d 	.word	0x1001133d
1000f5b8:	100113b9 	.word	0x100113b9
1000f5bc:	10010d75 	.word	0x10010d75
1000f5c0:	10010e11 	.word	0x10010e11
1000f5c4:	10010ee9 	.word	0x10010ee9
1000f5c8:	10011171 	.word	0x10011171
1000f5cc:	10011211 	.word	0x10011211
1000f5d0:	100112c9 	.word	0x100112c9
1000f5d4:	100112f1 	.word	0x100112f1
1000f5d8:	10011307 	.word	0x10011307
1000f5dc:	100113d1 	.word	0x100113d1
1000f5e0:	100113ff 	.word	0x100113ff
1000f5e4:	10011415 	.word	0x10011415
1000f5e8:	1001143f 	.word	0x1001143f
1000f5ec:	1001126d 	.word	0x1001126d
1000f5f0:	10011297 	.word	0x10011297
1000f5f4:	10010515 	.word	0x10010515
1000f5f8:	10010541 	.word	0x10010541
1000f5fc:	10011cf9 	.word	0x10011cf9
1000f600:	10011d35 	.word	0x10011d35
1000f604:	10011d7d 	.word	0x10011d7d
1000f608:	10011dc1 	.word	0x10011dc1
1000f60c:	10011df5 	.word	0x10011df5
1000f610:	10011cb9 	.word	0x10011cb9
1000f614:	10011ec1 	.word	0x10011ec1
1000f618:	10011e49 	.word	0x10011e49
1000f61c:	100103f9 	.word	0x100103f9
1000f620:	10010465 	.word	0x10010465
1000f624:	10010429 	.word	0x10010429
1000f628:	10011ed1 	.word	0x10011ed1
1000f62c:	10011f11 	.word	0x10011f11
1000f630:	100121d9 	.word	0x100121d9
1000f634:	100121e3 	.word	0x100121e3
1000f638:	100121e9 	.word	0x100121e9
1000f63c:	100121ef 	.word	0x100121ef
1000f640:	100121fb 	.word	0x100121fb

1000f644 <internal_event_flush>:
1000f644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f646:	490e      	ldr	r1, [pc, #56]	; (1000f680 <internal_event_flush+0x3c>)
1000f648:	2400      	movs	r4, #0
1000f64a:	680b      	ldr	r3, [r1, #0]
1000f64c:	1c0f      	adds	r7, r1, #0
1000f64e:	1c1e      	adds	r6, r3, #0
1000f650:	4a0c      	ldr	r2, [pc, #48]	; (1000f684 <internal_event_flush+0x40>)
1000f652:	6815      	ldr	r5, [r2, #0]
1000f654:	9201      	str	r2, [sp, #4]
1000f656:	2b00      	cmp	r3, #0
1000f658:	d00e      	beq.n	1000f678 <internal_event_flush+0x34>
1000f65a:	889a      	ldrh	r2, [r3, #4]
1000f65c:	6819      	ldr	r1, [r3, #0]
1000f65e:	4282      	cmp	r2, r0
1000f660:	d107      	bne.n	1000f672 <internal_event_flush+0x2e>
1000f662:	2c00      	cmp	r4, #0
1000f664:	d001      	beq.n	1000f66a <internal_event_flush+0x26>
1000f666:	6021      	str	r1, [r4, #0]
1000f668:	e000      	b.n	1000f66c <internal_event_flush+0x28>
1000f66a:	1c0e      	adds	r6, r1, #0
1000f66c:	601d      	str	r5, [r3, #0]
1000f66e:	1c1d      	adds	r5, r3, #0
1000f670:	1c23      	adds	r3, r4, #0
1000f672:	1c1c      	adds	r4, r3, #0
1000f674:	1c0b      	adds	r3, r1, #0
1000f676:	e7ee      	b.n	1000f656 <internal_event_flush+0x12>
1000f678:	9b01      	ldr	r3, [sp, #4]
1000f67a:	603e      	str	r6, [r7, #0]
1000f67c:	601d      	str	r5, [r3, #0]
1000f67e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f680:	10016854 	.word	0x10016854
1000f684:	10016858 	.word	0x10016858

1000f688 <internal_conn_flush>:
1000f688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f68a:	4a12      	ldr	r2, [pc, #72]	; (1000f6d4 <internal_conn_flush+0x4c>)
1000f68c:	9000      	str	r0, [sp, #0]
1000f68e:	6813      	ldr	r3, [r2, #0]
1000f690:	4811      	ldr	r0, [pc, #68]	; (1000f6d8 <internal_conn_flush+0x50>)
1000f692:	1c1f      	adds	r7, r3, #0
1000f694:	2100      	movs	r1, #0
1000f696:	4684      	mov	ip, r0
1000f698:	6804      	ldr	r4, [r0, #0]
1000f69a:	9201      	str	r2, [sp, #4]
1000f69c:	2b00      	cmp	r3, #0
1000f69e:	d014      	beq.n	1000f6ca <internal_conn_flush+0x42>
1000f6a0:	88d8      	ldrh	r0, [r3, #6]
1000f6a2:	9a00      	ldr	r2, [sp, #0]
1000f6a4:	681d      	ldr	r5, [r3, #0]
1000f6a6:	0a06      	lsrs	r6, r0, #8
1000f6a8:	4296      	cmp	r6, r2
1000f6aa:	d10b      	bne.n	1000f6c4 <internal_conn_flush+0x3c>
1000f6ac:	26fd      	movs	r6, #253	; 0xfd
1000f6ae:	4006      	ands	r6, r0
1000f6b0:	2e0c      	cmp	r6, #12
1000f6b2:	d107      	bne.n	1000f6c4 <internal_conn_flush+0x3c>
1000f6b4:	2900      	cmp	r1, #0
1000f6b6:	d001      	beq.n	1000f6bc <internal_conn_flush+0x34>
1000f6b8:	600d      	str	r5, [r1, #0]
1000f6ba:	e000      	b.n	1000f6be <internal_conn_flush+0x36>
1000f6bc:	1c2f      	adds	r7, r5, #0
1000f6be:	601c      	str	r4, [r3, #0]
1000f6c0:	1c1c      	adds	r4, r3, #0
1000f6c2:	1c0b      	adds	r3, r1, #0
1000f6c4:	1c19      	adds	r1, r3, #0
1000f6c6:	1c2b      	adds	r3, r5, #0
1000f6c8:	e7e8      	b.n	1000f69c <internal_conn_flush+0x14>
1000f6ca:	9b01      	ldr	r3, [sp, #4]
1000f6cc:	601f      	str	r7, [r3, #0]
1000f6ce:	4663      	mov	r3, ip
1000f6d0:	601c      	str	r4, [r3, #0]
1000f6d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f6d4:	10016854 	.word	0x10016854
1000f6d8:	10016858 	.word	0x10016858

1000f6dc <at_ble_device_name_set>:
1000f6dc:	b530      	push	{r4, r5, lr}
1000f6de:	23cf      	movs	r3, #207	; 0xcf
1000f6e0:	2800      	cmp	r0, #0
1000f6e2:	d010      	beq.n	1000f706 <at_ble_device_name_set+0x2a>
1000f6e4:	1e4a      	subs	r2, r1, #1
1000f6e6:	2a1f      	cmp	r2, #31
1000f6e8:	d80d      	bhi.n	1000f706 <at_ble_device_name_set+0x2a>
1000f6ea:	4a08      	ldr	r2, [pc, #32]	; (1000f70c <at_ble_device_name_set+0x30>)
1000f6ec:	1c13      	adds	r3, r2, #0
1000f6ee:	33aa      	adds	r3, #170	; 0xaa
1000f6f0:	8019      	strh	r1, [r3, #0]
1000f6f2:	2300      	movs	r3, #0
1000f6f4:	1c1c      	adds	r4, r3, #0
1000f6f6:	5cc5      	ldrb	r5, [r0, r3]
1000f6f8:	34ac      	adds	r4, #172	; 0xac
1000f6fa:	3301      	adds	r3, #1
1000f6fc:	5515      	strb	r5, [r2, r4]
1000f6fe:	b2dc      	uxtb	r4, r3
1000f700:	428c      	cmp	r4, r1
1000f702:	d3f7      	bcc.n	1000f6f4 <at_ble_device_name_set+0x18>
1000f704:	2300      	movs	r3, #0
1000f706:	1c18      	adds	r0, r3, #0
1000f708:	bd30      	pop	{r4, r5, pc}
1000f70a:	46c0      	nop			; (mov r8, r8)
1000f70c:	10017612 	.word	0x10017612

1000f710 <at_ble_addr_get>:
1000f710:	b510      	push	{r4, lr}
1000f712:	1c04      	adds	r4, r0, #0
1000f714:	20cf      	movs	r0, #207	; 0xcf
1000f716:	2c00      	cmp	r4, #0
1000f718:	d006      	beq.n	1000f728 <at_ble_addr_get+0x18>
1000f71a:	4b04      	ldr	r3, [pc, #16]	; (1000f72c <at_ble_addr_get+0x1c>)
1000f71c:	38ce      	subs	r0, #206	; 0xce
1000f71e:	1c21      	adds	r1, r4, #0
1000f720:	4798      	blx	r3
1000f722:	4b03      	ldr	r3, [pc, #12]	; (1000f730 <at_ble_addr_get+0x20>)
1000f724:	791b      	ldrb	r3, [r3, #4]
1000f726:	7023      	strb	r3, [r4, #0]
1000f728:	bd10      	pop	{r4, pc}
1000f72a:	46c0      	nop			; (mov r8, r8)
1000f72c:	100115d9 	.word	0x100115d9
1000f730:	10017612 	.word	0x10017612

1000f734 <at_ble_set_dev_config>:
1000f734:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f736:	7906      	ldrb	r6, [r0, #4]
1000f738:	b089      	sub	sp, #36	; 0x24
1000f73a:	25cf      	movs	r5, #207	; 0xcf
1000f73c:	2e03      	cmp	r6, #3
1000f73e:	d838      	bhi.n	1000f7b2 <at_ble_set_dev_config+0x7e>
1000f740:	7803      	ldrb	r3, [r0, #0]
1000f742:	3511      	adds	r5, #17
1000f744:	2b0f      	cmp	r3, #15
1000f746:	d834      	bhi.n	1000f7b2 <at_ble_set_dev_config+0x7e>
1000f748:	2380      	movs	r3, #128	; 0x80
1000f74a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f74c:	3d11      	subs	r5, #17
1000f74e:	009b      	lsls	r3, r3, #2
1000f750:	429f      	cmp	r7, r3
1000f752:	d82e      	bhi.n	1000f7b2 <at_ble_set_dev_config+0x7e>
1000f754:	7fc5      	ldrb	r5, [r0, #31]
1000f756:	7f83      	ldrb	r3, [r0, #30]
1000f758:	01ad      	lsls	r5, r5, #6
1000f75a:	015b      	lsls	r3, r3, #5
1000f75c:	431d      	orrs	r5, r3
1000f75e:	7ec3      	ldrb	r3, [r0, #27]
1000f760:	431d      	orrs	r5, r3
1000f762:	7f43      	ldrb	r3, [r0, #29]
1000f764:	011b      	lsls	r3, r3, #4
1000f766:	431d      	orrs	r5, r3
1000f768:	7f03      	ldrb	r3, [r0, #28]
1000f76a:	009b      	lsls	r3, r3, #2
1000f76c:	431d      	orrs	r5, r3
1000f76e:	4b12      	ldr	r3, [pc, #72]	; (1000f7b8 <at_ble_set_dev_config+0x84>)
1000f770:	b2ed      	uxtb	r5, r5
1000f772:	711e      	strb	r6, [r3, #4]
1000f774:	7903      	ldrb	r3, [r0, #4]
1000f776:	3b02      	subs	r3, #2
1000f778:	2b01      	cmp	r3, #1
1000f77a:	d801      	bhi.n	1000f780 <at_ble_set_dev_config+0x4c>
1000f77c:	2302      	movs	r3, #2
1000f77e:	7103      	strb	r3, [r0, #4]
1000f780:	1c04      	adds	r4, r0, #0
1000f782:	1c23      	adds	r3, r4, #0
1000f784:	330b      	adds	r3, #11
1000f786:	8861      	ldrh	r1, [r4, #2]
1000f788:	9307      	str	r3, [sp, #28]
1000f78a:	7923      	ldrb	r3, [r4, #4]
1000f78c:	7800      	ldrb	r0, [r0, #0]
1000f78e:	9300      	str	r3, [sp, #0]
1000f790:	9501      	str	r5, [sp, #4]
1000f792:	8c25      	ldrh	r5, [r4, #32]
1000f794:	1d62      	adds	r2, r4, #5
1000f796:	9502      	str	r5, [sp, #8]
1000f798:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f79a:	9b07      	ldr	r3, [sp, #28]
1000f79c:	9503      	str	r5, [sp, #12]
1000f79e:	9704      	str	r7, [sp, #16]
1000f7a0:	4d06      	ldr	r5, [pc, #24]	; (1000f7bc <at_ble_set_dev_config+0x88>)
1000f7a2:	47a8      	blx	r5
1000f7a4:	7126      	strb	r6, [r4, #4]
1000f7a6:	1c05      	adds	r5, r0, #0
1000f7a8:	1c21      	adds	r1, r4, #0
1000f7aa:	4803      	ldr	r0, [pc, #12]	; (1000f7b8 <at_ble_set_dev_config+0x84>)
1000f7ac:	2226      	movs	r2, #38	; 0x26
1000f7ae:	4b04      	ldr	r3, [pc, #16]	; (1000f7c0 <at_ble_set_dev_config+0x8c>)
1000f7b0:	4798      	blx	r3
1000f7b2:	1c28      	adds	r0, r5, #0
1000f7b4:	b009      	add	sp, #36	; 0x24
1000f7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7b8:	10017612 	.word	0x10017612
1000f7bc:	100114d1 	.word	0x100114d1
1000f7c0:	100133db 	.word	0x100133db

1000f7c4 <at_ble_init>:
1000f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f7c6:	b087      	sub	sp, #28
1000f7c8:	af03      	add	r7, sp, #12
1000f7ca:	494d      	ldr	r1, [pc, #308]	; (1000f900 <at_ble_init+0x13c>)
1000f7cc:	1c04      	adds	r4, r0, #0
1000f7ce:	220b      	movs	r2, #11
1000f7d0:	4b4c      	ldr	r3, [pc, #304]	; (1000f904 <at_ble_init+0x140>)
1000f7d2:	1c38      	adds	r0, r7, #0
1000f7d4:	4798      	blx	r3
1000f7d6:	2205      	movs	r2, #5
1000f7d8:	4b4b      	ldr	r3, [pc, #300]	; (1000f908 <at_ble_init+0x144>)
1000f7da:	801a      	strh	r2, [r3, #0]
1000f7dc:	2300      	movs	r3, #0
1000f7de:	4a4b      	ldr	r2, [pc, #300]	; (1000f90c <at_ble_init+0x148>)
1000f7e0:	6013      	str	r3, [r2, #0]
1000f7e2:	4a4b      	ldr	r2, [pc, #300]	; (1000f910 <at_ble_init+0x14c>)
1000f7e4:	7013      	strb	r3, [r2, #0]
1000f7e6:	4a4b      	ldr	r2, [pc, #300]	; (1000f914 <at_ble_init+0x150>)
1000f7e8:	7013      	strb	r3, [r2, #0]
1000f7ea:	4b4b      	ldr	r3, [pc, #300]	; (1000f918 <at_ble_init+0x154>)
1000f7ec:	4798      	blx	r3
1000f7ee:	4b4b      	ldr	r3, [pc, #300]	; (1000f91c <at_ble_init+0x158>)
1000f7f0:	4798      	blx	r3
1000f7f2:	4b4b      	ldr	r3, [pc, #300]	; (1000f920 <at_ble_init+0x15c>)
1000f7f4:	4798      	blx	r3
1000f7f6:	4b4b      	ldr	r3, [pc, #300]	; (1000f924 <at_ble_init+0x160>)
1000f7f8:	4798      	blx	r3
1000f7fa:	2c00      	cmp	r4, #0
1000f7fc:	d009      	beq.n	1000f812 <at_ble_init+0x4e>
1000f7fe:	6820      	ldr	r0, [r4, #0]
1000f800:	2800      	cmp	r0, #0
1000f802:	d006      	beq.n	1000f812 <at_ble_init+0x4e>
1000f804:	6861      	ldr	r1, [r4, #4]
1000f806:	2900      	cmp	r1, #0
1000f808:	d101      	bne.n	1000f80e <at_ble_init+0x4a>
1000f80a:	26e2      	movs	r6, #226	; 0xe2
1000f80c:	e075      	b.n	1000f8fa <at_ble_init+0x136>
1000f80e:	4b46      	ldr	r3, [pc, #280]	; (1000f928 <at_ble_init+0x164>)
1000f810:	4798      	blx	r3
1000f812:	4b46      	ldr	r3, [pc, #280]	; (1000f92c <at_ble_init+0x168>)
1000f814:	4798      	blx	r3
1000f816:	2801      	cmp	r0, #1
1000f818:	d8f7      	bhi.n	1000f80a <at_ble_init+0x46>
1000f81a:	4845      	ldr	r0, [pc, #276]	; (1000f930 <at_ble_init+0x16c>)
1000f81c:	4b45      	ldr	r3, [pc, #276]	; (1000f934 <at_ble_init+0x170>)
1000f81e:	4798      	blx	r3
1000f820:	2800      	cmp	r0, #0
1000f822:	d1f2      	bne.n	1000f80a <at_ble_init+0x46>
1000f824:	4b44      	ldr	r3, [pc, #272]	; (1000f938 <at_ble_init+0x174>)
1000f826:	4798      	blx	r3
1000f828:	4b44      	ldr	r3, [pc, #272]	; (1000f93c <at_ble_init+0x178>)
1000f82a:	4798      	blx	r3
1000f82c:	466b      	mov	r3, sp
1000f82e:	2201      	movs	r2, #1
1000f830:	1cdc      	adds	r4, r3, #3
1000f832:	1c20      	adds	r0, r4, #0
1000f834:	a901      	add	r1, sp, #4
1000f836:	4252      	negs	r2, r2
1000f838:	4b41      	ldr	r3, [pc, #260]	; (1000f940 <at_ble_init+0x17c>)
1000f83a:	4798      	blx	r3
1000f83c:	2800      	cmp	r0, #0
1000f83e:	d102      	bne.n	1000f846 <at_ble_init+0x82>
1000f840:	7823      	ldrb	r3, [r4, #0]
1000f842:	2b39      	cmp	r3, #57	; 0x39
1000f844:	d1f2      	bne.n	1000f82c <at_ble_init+0x68>
1000f846:	4b3f      	ldr	r3, [pc, #252]	; (1000f944 <at_ble_init+0x180>)
1000f848:	4798      	blx	r3
1000f84a:	1e06      	subs	r6, r0, #0
1000f84c:	d155      	bne.n	1000f8fa <at_ble_init+0x136>
1000f84e:	1c03      	adds	r3, r0, #0
1000f850:	2101      	movs	r1, #1
1000f852:	4a3d      	ldr	r2, [pc, #244]	; (1000f948 <at_ble_init+0x184>)
1000f854:	4249      	negs	r1, r1
1000f856:	189a      	adds	r2, r3, r2
1000f858:	3312      	adds	r3, #18
1000f85a:	8151      	strh	r1, [r2, #10]
1000f85c:	2b90      	cmp	r3, #144	; 0x90
1000f85e:	d1f7      	bne.n	1000f850 <at_ble_init+0x8c>
1000f860:	4c3a      	ldr	r4, [pc, #232]	; (1000f94c <at_ble_init+0x188>)
1000f862:	3b81      	subs	r3, #129	; 0x81
1000f864:	7023      	strb	r3, [r4, #0]
1000f866:	4b3a      	ldr	r3, [pc, #232]	; (1000f950 <at_ble_init+0x18c>)
1000f868:	4a3a      	ldr	r2, [pc, #232]	; (1000f954 <at_ble_init+0x190>)
1000f86a:	8063      	strh	r3, [r4, #2]
1000f86c:	2300      	movs	r3, #0
1000f86e:	7123      	strb	r3, [r4, #4]
1000f870:	3301      	adds	r3, #1
1000f872:	1e58      	subs	r0, r3, #1
1000f874:	0119      	lsls	r1, r3, #4
1000f876:	4301      	orrs	r1, r0
1000f878:	3302      	adds	r3, #2
1000f87a:	7011      	strb	r1, [r2, #0]
1000f87c:	3201      	adds	r2, #1
1000f87e:	2b21      	cmp	r3, #33	; 0x21
1000f880:	d1f7      	bne.n	1000f872 <at_ble_init+0xae>
1000f882:	33e0      	adds	r3, #224	; 0xe0
1000f884:	33ff      	adds	r3, #255	; 0xff
1000f886:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f888:	1c23      	adds	r3, r4, #0
1000f88a:	2500      	movs	r5, #0
1000f88c:	3373      	adds	r3, #115	; 0x73
1000f88e:	701d      	strb	r5, [r3, #0]
1000f890:	1c23      	adds	r3, r4, #0
1000f892:	3372      	adds	r3, #114	; 0x72
1000f894:	701d      	strb	r5, [r3, #0]
1000f896:	1c23      	adds	r3, r4, #0
1000f898:	3376      	adds	r3, #118	; 0x76
1000f89a:	701d      	strb	r5, [r3, #0]
1000f89c:	1c23      	adds	r3, r4, #0
1000f89e:	33cc      	adds	r3, #204	; 0xcc
1000f8a0:	801d      	strh	r5, [r3, #0]
1000f8a2:	1c22      	adds	r2, r4, #0
1000f8a4:	23a0      	movs	r3, #160	; 0xa0
1000f8a6:	32d0      	adds	r2, #208	; 0xd0
1000f8a8:	005b      	lsls	r3, r3, #1
1000f8aa:	8013      	strh	r3, [r2, #0]
1000f8ac:	1c22      	adds	r2, r4, #0
1000f8ae:	32ce      	adds	r2, #206	; 0xce
1000f8b0:	8013      	strh	r3, [r2, #0]
1000f8b2:	1c23      	adds	r3, r4, #0
1000f8b4:	33d2      	adds	r3, #210	; 0xd2
1000f8b6:	801d      	strh	r5, [r3, #0]
1000f8b8:	22fa      	movs	r2, #250	; 0xfa
1000f8ba:	1c23      	adds	r3, r4, #0
1000f8bc:	0052      	lsls	r2, r2, #1
1000f8be:	33d4      	adds	r3, #212	; 0xd4
1000f8c0:	801a      	strh	r2, [r3, #0]
1000f8c2:	1c23      	adds	r3, r4, #0
1000f8c4:	33d6      	adds	r3, #214	; 0xd6
1000f8c6:	701d      	strb	r5, [r3, #0]
1000f8c8:	1c20      	adds	r0, r4, #0
1000f8ca:	4b23      	ldr	r3, [pc, #140]	; (1000f958 <at_ble_init+0x194>)
1000f8cc:	76e5      	strb	r5, [r4, #27]
1000f8ce:	7725      	strb	r5, [r4, #28]
1000f8d0:	7765      	strb	r5, [r4, #29]
1000f8d2:	77a5      	strb	r5, [r4, #30]
1000f8d4:	77e5      	strb	r5, [r4, #31]
1000f8d6:	8425      	strh	r5, [r4, #32]
1000f8d8:	8465      	strh	r5, [r4, #34]	; 0x22
1000f8da:	4798      	blx	r3
1000f8dc:	1c23      	adds	r3, r4, #0
1000f8de:	2207      	movs	r2, #7
1000f8e0:	3374      	adds	r3, #116	; 0x74
1000f8e2:	701a      	strb	r2, [r3, #0]
1000f8e4:	1c23      	adds	r3, r4, #0
1000f8e6:	3204      	adds	r2, #4
1000f8e8:	33aa      	adds	r3, #170	; 0xaa
1000f8ea:	801a      	strh	r2, [r3, #0]
1000f8ec:	1c2b      	adds	r3, r5, #0
1000f8ee:	5d7a      	ldrb	r2, [r7, r5]
1000f8f0:	33ac      	adds	r3, #172	; 0xac
1000f8f2:	3501      	adds	r5, #1
1000f8f4:	54e2      	strb	r2, [r4, r3]
1000f8f6:	2d0b      	cmp	r5, #11
1000f8f8:	d1f8      	bne.n	1000f8ec <at_ble_init+0x128>
1000f8fa:	1c30      	adds	r0, r6, #0
1000f8fc:	b007      	add	sp, #28
1000f8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f900:	10016029 	.word	0x10016029
1000f904:	100133db 	.word	0x100133db
1000f908:	10017580 	.word	0x10017580
1000f90c:	100168fc 	.word	0x100168fc
1000f910:	10016864 	.word	0x10016864
1000f914:	10016158 	.word	0x10016158
1000f918:	10011f21 	.word	0x10011f21
1000f91c:	1000fc0d 	.word	0x1000fc0d
1000f920:	10010249 	.word	0x10010249
1000f924:	10010509 	.word	0x10010509
1000f928:	1001027d 	.word	0x1001027d
1000f92c:	1000e1bd 	.word	0x1000e1bd
1000f930:	10010809 	.word	0x10010809
1000f934:	1000e3ed 	.word	0x1000e3ed
1000f938:	100108a1 	.word	0x100108a1
1000f93c:	1000ef5d 	.word	0x1000ef5d
1000f940:	1000f01d 	.word	0x1000f01d
1000f944:	10011461 	.word	0x10011461
1000f948:	10017582 	.word	0x10017582
1000f94c:	10017612 	.word	0x10017612
1000f950:	00003a98 	.word	0x00003a98
1000f954:	1001761d 	.word	0x1001761d
1000f958:	1000f735 	.word	0x1000f735

1000f95c <at_ble_addr_set>:
1000f95c:	b538      	push	{r3, r4, r5, lr}
1000f95e:	1c45      	adds	r5, r0, #1
1000f960:	1c03      	adds	r3, r0, #0
1000f962:	20cf      	movs	r0, #207	; 0xcf
1000f964:	2d00      	cmp	r5, #0
1000f966:	d018      	beq.n	1000f99a <at_ble_addr_set+0x3e>
1000f968:	781a      	ldrb	r2, [r3, #0]
1000f96a:	2a03      	cmp	r2, #3
1000f96c:	d815      	bhi.n	1000f99a <at_ble_addr_set+0x3e>
1000f96e:	2a01      	cmp	r2, #1
1000f970:	d102      	bne.n	1000f978 <at_ble_addr_set+0x1c>
1000f972:	785a      	ldrb	r2, [r3, #1]
1000f974:	2a00      	cmp	r2, #0
1000f976:	d010      	beq.n	1000f99a <at_ble_addr_set+0x3e>
1000f978:	1c1c      	adds	r4, r3, #0
1000f97a:	1c29      	adds	r1, r5, #0
1000f97c:	2206      	movs	r2, #6
1000f97e:	4b07      	ldr	r3, [pc, #28]	; (1000f99c <at_ble_addr_set+0x40>)
1000f980:	4807      	ldr	r0, [pc, #28]	; (1000f9a0 <at_ble_addr_set+0x44>)
1000f982:	4798      	blx	r3
1000f984:	7823      	ldrb	r3, [r4, #0]
1000f986:	4807      	ldr	r0, [pc, #28]	; (1000f9a4 <at_ble_addr_set+0x48>)
1000f988:	7103      	strb	r3, [r0, #4]
1000f98a:	4b07      	ldr	r3, [pc, #28]	; (1000f9a8 <at_ble_addr_set+0x4c>)
1000f98c:	4798      	blx	r3
1000f98e:	7823      	ldrb	r3, [r4, #0]
1000f990:	2b00      	cmp	r3, #0
1000f992:	d102      	bne.n	1000f99a <at_ble_addr_set+0x3e>
1000f994:	1c28      	adds	r0, r5, #0
1000f996:	4b05      	ldr	r3, [pc, #20]	; (1000f9ac <at_ble_addr_set+0x50>)
1000f998:	4798      	blx	r3
1000f99a:	bd38      	pop	{r3, r4, r5, pc}
1000f99c:	100133db 	.word	0x100133db
1000f9a0:	10017617 	.word	0x10017617
1000f9a4:	10017612 	.word	0x10017612
1000f9a8:	1000f735 	.word	0x1000f735
1000f9ac:	1001091d 	.word	0x1001091d

1000f9b0 <at_ble_adv_data_set>:
1000f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f9b2:	4684      	mov	ip, r0
1000f9b4:	1c0f      	adds	r7, r1, #0
1000f9b6:	1c16      	adds	r6, r2, #0
1000f9b8:	1c1c      	adds	r4, r3, #0
1000f9ba:	2800      	cmp	r0, #0
1000f9bc:	d102      	bne.n	1000f9c4 <at_ble_adv_data_set+0x14>
1000f9be:	20e2      	movs	r0, #226	; 0xe2
1000f9c0:	2a00      	cmp	r2, #0
1000f9c2:	d02b      	beq.n	1000fa1c <at_ble_adv_data_set+0x6c>
1000f9c4:	20cf      	movs	r0, #207	; 0xcf
1000f9c6:	2f1f      	cmp	r7, #31
1000f9c8:	d828      	bhi.n	1000fa1c <at_ble_adv_data_set+0x6c>
1000f9ca:	2c1f      	cmp	r4, #31
1000f9cc:	d826      	bhi.n	1000fa1c <at_ble_adv_data_set+0x6c>
1000f9ce:	4663      	mov	r3, ip
1000f9d0:	2b00      	cmp	r3, #0
1000f9d2:	d00e      	beq.n	1000f9f2 <at_ble_adv_data_set+0x42>
1000f9d4:	4812      	ldr	r0, [pc, #72]	; (1000fa20 <at_ble_adv_data_set+0x70>)
1000f9d6:	4d13      	ldr	r5, [pc, #76]	; (1000fa24 <at_ble_adv_data_set+0x74>)
1000f9d8:	2f00      	cmp	r7, #0
1000f9da:	d104      	bne.n	1000f9e6 <at_ble_adv_data_set+0x36>
1000f9dc:	1c39      	adds	r1, r7, #0
1000f9de:	221f      	movs	r2, #31
1000f9e0:	4b11      	ldr	r3, [pc, #68]	; (1000fa28 <at_ble_adv_data_set+0x78>)
1000f9e2:	4798      	blx	r3
1000f9e4:	e003      	b.n	1000f9ee <at_ble_adv_data_set+0x3e>
1000f9e6:	4661      	mov	r1, ip
1000f9e8:	1c3a      	adds	r2, r7, #0
1000f9ea:	4b10      	ldr	r3, [pc, #64]	; (1000fa2c <at_ble_adv_data_set+0x7c>)
1000f9ec:	4798      	blx	r3
1000f9ee:	3572      	adds	r5, #114	; 0x72
1000f9f0:	702f      	strb	r7, [r5, #0]
1000f9f2:	1e30      	subs	r0, r6, #0
1000f9f4:	d012      	beq.n	1000fa1c <at_ble_adv_data_set+0x6c>
1000f9f6:	4d0b      	ldr	r5, [pc, #44]	; (1000fa24 <at_ble_adv_data_set+0x74>)
1000f9f8:	480d      	ldr	r0, [pc, #52]	; (1000fa30 <at_ble_adv_data_set+0x80>)
1000f9fa:	2c00      	cmp	r4, #0
1000f9fc:	d107      	bne.n	1000fa0e <at_ble_adv_data_set+0x5e>
1000f9fe:	1c21      	adds	r1, r4, #0
1000fa00:	221f      	movs	r2, #31
1000fa02:	4b09      	ldr	r3, [pc, #36]	; (1000fa28 <at_ble_adv_data_set+0x78>)
1000fa04:	3573      	adds	r5, #115	; 0x73
1000fa06:	4798      	blx	r3
1000fa08:	702c      	strb	r4, [r5, #0]
1000fa0a:	1c20      	adds	r0, r4, #0
1000fa0c:	e006      	b.n	1000fa1c <at_ble_adv_data_set+0x6c>
1000fa0e:	1c31      	adds	r1, r6, #0
1000fa10:	1c22      	adds	r2, r4, #0
1000fa12:	4b06      	ldr	r3, [pc, #24]	; (1000fa2c <at_ble_adv_data_set+0x7c>)
1000fa14:	4798      	blx	r3
1000fa16:	2000      	movs	r0, #0
1000fa18:	3573      	adds	r5, #115	; 0x73
1000fa1a:	702c      	strb	r4, [r5, #0]
1000fa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fa1e:	46c0      	nop			; (mov r8, r8)
1000fa20:	10017646 	.word	0x10017646
1000fa24:	10017612 	.word	0x10017612
1000fa28:	100133ed 	.word	0x100133ed
1000fa2c:	100133db 	.word	0x100133db
1000fa30:	10017665 	.word	0x10017665

1000fa34 <at_ble_adv_start>:
1000fa34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa36:	b091      	sub	sp, #68	; 0x44
1000fa38:	1c1f      	adds	r7, r3, #0
1000fa3a:	ab16      	add	r3, sp, #88	; 0x58
1000fa3c:	881d      	ldrh	r5, [r3, #0]
1000fa3e:	ab17      	add	r3, sp, #92	; 0x5c
1000fa40:	881b      	ldrh	r3, [r3, #0]
1000fa42:	910d      	str	r1, [sp, #52]	; 0x34
1000fa44:	930e      	str	r3, [sp, #56]	; 0x38
1000fa46:	ab18      	add	r3, sp, #96	; 0x60
1000fa48:	781b      	ldrb	r3, [r3, #0]
1000fa4a:	1c04      	adds	r4, r0, #0
1000fa4c:	930f      	str	r3, [sp, #60]	; 0x3c
1000fa4e:	4b42      	ldr	r3, [pc, #264]	; (1000fb58 <at_ble_adv_start+0x124>)
1000fa50:	1c16      	adds	r6, r2, #0
1000fa52:	3373      	adds	r3, #115	; 0x73
1000fa54:	781b      	ldrb	r3, [r3, #0]
1000fa56:	20cf      	movs	r0, #207	; 0xcf
1000fa58:	930c      	str	r3, [sp, #48]	; 0x30
1000fa5a:	2c01      	cmp	r4, #1
1000fa5c:	d103      	bne.n	1000fa66 <at_ble_adv_start+0x32>
1000fa5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000fa60:	2b00      	cmp	r3, #0
1000fa62:	d176      	bne.n	1000fb52 <at_ble_adv_start+0x11e>
1000fa64:	e024      	b.n	1000fab0 <at_ble_adv_start+0x7c>
1000fa66:	2c04      	cmp	r4, #4
1000fa68:	d873      	bhi.n	1000fb52 <at_ble_adv_start+0x11e>
1000fa6a:	2380      	movs	r3, #128	; 0x80
1000fa6c:	01db      	lsls	r3, r3, #7
1000fa6e:	429d      	cmp	r5, r3
1000fa70:	d86f      	bhi.n	1000fb52 <at_ble_adv_start+0x11e>
1000fa72:	2c00      	cmp	r4, #0
1000fa74:	d102      	bne.n	1000fa7c <at_ble_adv_start+0x48>
1000fa76:	2d1f      	cmp	r5, #31
1000fa78:	d96b      	bls.n	1000fb52 <at_ble_adv_start+0x11e>
1000fa7a:	e003      	b.n	1000fa84 <at_ble_adv_start+0x50>
1000fa7c:	2d9f      	cmp	r5, #159	; 0x9f
1000fa7e:	d801      	bhi.n	1000fa84 <at_ble_adv_start+0x50>
1000fa80:	2c01      	cmp	r4, #1
1000fa82:	d166      	bne.n	1000fb52 <at_ble_adv_start+0x11e>
1000fa84:	2f00      	cmp	r7, #0
1000fa86:	d009      	beq.n	1000fa9c <at_ble_adv_start+0x68>
1000fa88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000fa8a:	20cf      	movs	r0, #207	; 0xcf
1000fa8c:	3b01      	subs	r3, #1
1000fa8e:	2b01      	cmp	r3, #1
1000fa90:	d95f      	bls.n	1000fb52 <at_ble_adv_start+0x11e>
1000fa92:	2c01      	cmp	r4, #1
1000fa94:	d102      	bne.n	1000fa9c <at_ble_adv_start+0x68>
1000fa96:	2d00      	cmp	r5, #0
1000fa98:	d100      	bne.n	1000fa9c <at_ble_adv_start+0x68>
1000fa9a:	3520      	adds	r5, #32
1000fa9c:	4b2f      	ldr	r3, [pc, #188]	; (1000fb5c <at_ble_adv_start+0x128>)
1000fa9e:	4798      	blx	r3
1000faa0:	1c01      	adds	r1, r0, #0
1000faa2:	2e00      	cmp	r6, #0
1000faa4:	d043      	beq.n	1000fb2e <at_ble_adv_start+0xfa>
1000faa6:	7833      	ldrb	r3, [r6, #0]
1000faa8:	1e60      	subs	r0, r4, #1
1000faaa:	2b00      	cmp	r3, #0
1000faac:	d109      	bne.n	1000fac2 <at_ble_adv_start+0x8e>
1000faae:	e03b      	b.n	1000fb28 <at_ble_adv_start+0xf4>
1000fab0:	2380      	movs	r3, #128	; 0x80
1000fab2:	01db      	lsls	r3, r3, #7
1000fab4:	429d      	cmp	r5, r3
1000fab6:	d84c      	bhi.n	1000fb52 <at_ble_adv_start+0x11e>
1000fab8:	2e00      	cmp	r6, #0
1000faba:	d04a      	beq.n	1000fb52 <at_ble_adv_start+0x11e>
1000fabc:	2f00      	cmp	r7, #0
1000fabe:	d1e3      	bne.n	1000fa88 <at_ble_adv_start+0x54>
1000fac0:	e02b      	b.n	1000fb1a <at_ble_adv_start+0xe6>
1000fac2:	2301      	movs	r3, #1
1000fac4:	2803      	cmp	r0, #3
1000fac6:	d93a      	bls.n	1000fb3e <at_ble_adv_start+0x10a>
1000fac8:	200d      	movs	r0, #13
1000faca:	1c72      	adds	r2, r6, #1
1000facc:	e002      	b.n	1000fad4 <at_ble_adv_start+0xa0>
1000face:	200e      	movs	r0, #14
1000fad0:	1e32      	subs	r2, r6, #0
1000fad2:	d1fa      	bne.n	1000faca <at_ble_adv_start+0x96>
1000fad4:	4c20      	ldr	r4, [pc, #128]	; (1000fb58 <at_ble_adv_start+0x124>)
1000fad6:	3474      	adds	r4, #116	; 0x74
1000fad8:	7826      	ldrb	r6, [r4, #0]
1000fada:	2407      	movs	r4, #7
1000fadc:	2e00      	cmp	r6, #0
1000fade:	d000      	beq.n	1000fae2 <at_ble_adv_start+0xae>
1000fae0:	1c34      	adds	r4, r6, #0
1000fae2:	9200      	str	r2, [sp, #0]
1000fae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000fae6:	9403      	str	r4, [sp, #12]
1000fae8:	9204      	str	r2, [sp, #16]
1000faea:	4a1b      	ldr	r2, [pc, #108]	; (1000fb58 <at_ble_adv_start+0x124>)
1000faec:	9501      	str	r5, [sp, #4]
1000faee:	9502      	str	r5, [sp, #8]
1000faf0:	9705      	str	r7, [sp, #20]
1000faf2:	3272      	adds	r2, #114	; 0x72
1000faf4:	7812      	ldrb	r2, [r2, #0]
1000faf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000faf8:	9206      	str	r2, [sp, #24]
1000fafa:	4a19      	ldr	r2, [pc, #100]	; (1000fb60 <at_ble_adv_start+0x12c>)
1000fafc:	9207      	str	r2, [sp, #28]
1000fafe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000fb00:	9208      	str	r2, [sp, #32]
1000fb02:	4a18      	ldr	r2, [pc, #96]	; (1000fb64 <at_ble_adv_start+0x130>)
1000fb04:	9209      	str	r2, [sp, #36]	; 0x24
1000fb06:	2264      	movs	r2, #100	; 0x64
1000fb08:	4362      	muls	r2, r4
1000fb0a:	b292      	uxth	r2, r2
1000fb0c:	920a      	str	r2, [sp, #40]	; 0x28
1000fb0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000fb10:	4c15      	ldr	r4, [pc, #84]	; (1000fb68 <at_ble_adv_start+0x134>)
1000fb12:	920b      	str	r2, [sp, #44]	; 0x2c
1000fb14:	4a15      	ldr	r2, [pc, #84]	; (1000fb6c <at_ble_adv_start+0x138>)
1000fb16:	47a0      	blx	r4
1000fb18:	e01b      	b.n	1000fb52 <at_ble_adv_start+0x11e>
1000fb1a:	2d00      	cmp	r5, #0
1000fb1c:	d1be      	bne.n	1000fa9c <at_ble_adv_start+0x68>
1000fb1e:	4b0f      	ldr	r3, [pc, #60]	; (1000fb5c <at_ble_adv_start+0x128>)
1000fb20:	4798      	blx	r3
1000fb22:	2520      	movs	r5, #32
1000fb24:	1c01      	adds	r1, r0, #0
1000fb26:	e7be      	b.n	1000faa6 <at_ble_adv_start+0x72>
1000fb28:	2803      	cmp	r0, #3
1000fb2a:	d8cd      	bhi.n	1000fac8 <at_ble_adv_start+0x94>
1000fb2c:	e006      	b.n	1000fb3c <at_ble_adv_start+0x108>
1000fb2e:	1e60      	subs	r0, r4, #1
1000fb30:	2803      	cmp	r0, #3
1000fb32:	d903      	bls.n	1000fb3c <at_ble_adv_start+0x108>
1000fb34:	1c33      	adds	r3, r6, #0
1000fb36:	200d      	movs	r0, #13
1000fb38:	1c32      	adds	r2, r6, #0
1000fb3a:	e7cb      	b.n	1000fad4 <at_ble_adv_start+0xa0>
1000fb3c:	2300      	movs	r3, #0
1000fb3e:	f002 fb61 	bl	10012204 <__gnu_thumb1_case_sqi>
1000fb42:	06c6      	.short	0x06c6
1000fb44:	0204      	.short	0x0204
1000fb46:	200f      	movs	r0, #15
1000fb48:	e7c2      	b.n	1000fad0 <at_ble_adv_start+0x9c>
1000fb4a:	2200      	movs	r2, #0
1000fb4c:	920c      	str	r2, [sp, #48]	; 0x30
1000fb4e:	200c      	movs	r0, #12
1000fb50:	e7be      	b.n	1000fad0 <at_ble_adv_start+0x9c>
1000fb52:	b011      	add	sp, #68	; 0x44
1000fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb56:	46c0      	nop			; (mov r8, r8)
1000fb58:	10017612 	.word	0x10017612
1000fb5c:	100119ad 	.word	0x100119ad
1000fb60:	10017646 	.word	0x10017646
1000fb64:	10017665 	.word	0x10017665
1000fb68:	1001188d 	.word	0x1001188d
1000fb6c:	00003a98 	.word	0x00003a98

1000fb70 <at_ble_scan_stop>:
1000fb70:	b510      	push	{r4, lr}
1000fb72:	4b05      	ldr	r3, [pc, #20]	; (1000fb88 <at_ble_scan_stop+0x18>)
1000fb74:	4798      	blx	r3
1000fb76:	1e04      	subs	r4, r0, #0
1000fb78:	d103      	bne.n	1000fb82 <at_ble_scan_stop+0x12>
1000fb7a:	20d1      	movs	r0, #209	; 0xd1
1000fb7c:	4b03      	ldr	r3, [pc, #12]	; (1000fb8c <at_ble_scan_stop+0x1c>)
1000fb7e:	0100      	lsls	r0, r0, #4
1000fb80:	4798      	blx	r3
1000fb82:	1c20      	adds	r0, r4, #0
1000fb84:	bd10      	pop	{r4, pc}
1000fb86:	46c0      	nop			; (mov r8, r8)
1000fb88:	100116b9 	.word	0x100116b9
1000fb8c:	1000f645 	.word	0x1000f645

1000fb90 <at_ble_disconnect>:
1000fb90:	b538      	push	{r3, r4, r5, lr}
1000fb92:	1c04      	adds	r4, r0, #0
1000fb94:	4b04      	ldr	r3, [pc, #16]	; (1000fba8 <at_ble_disconnect+0x18>)
1000fb96:	1c08      	adds	r0, r1, #0
1000fb98:	1c21      	adds	r1, r4, #0
1000fb9a:	4798      	blx	r3
1000fb9c:	1c05      	adds	r5, r0, #0
1000fb9e:	4b03      	ldr	r3, [pc, #12]	; (1000fbac <at_ble_disconnect+0x1c>)
1000fba0:	1c20      	adds	r0, r4, #0
1000fba2:	4798      	blx	r3
1000fba4:	1c28      	adds	r0, r5, #0
1000fba6:	bd38      	pop	{r3, r4, r5, pc}
1000fba8:	10010d31 	.word	0x10010d31
1000fbac:	1000f689 	.word	0x1000f689

1000fbb0 <at_ble_conn_update_reply>:
1000fbb0:	b510      	push	{r4, lr}
1000fbb2:	4c01      	ldr	r4, [pc, #4]	; (1000fbb8 <at_ble_conn_update_reply+0x8>)
1000fbb4:	47a0      	blx	r4
1000fbb6:	bd10      	pop	{r4, pc}
1000fbb8:	10011221 	.word	0x10011221

1000fbbc <at_ble_random_address_resolve>:
1000fbbc:	b510      	push	{r4, lr}
1000fbbe:	23cf      	movs	r3, #207	; 0xcf
1000fbc0:	2800      	cmp	r0, #0
1000fbc2:	d00a      	beq.n	1000fbda <at_ble_random_address_resolve+0x1e>
1000fbc4:	2900      	cmp	r1, #0
1000fbc6:	d008      	beq.n	1000fbda <at_ble_random_address_resolve+0x1e>
1000fbc8:	2a00      	cmp	r2, #0
1000fbca:	d006      	beq.n	1000fbda <at_ble_random_address_resolve+0x1e>
1000fbcc:	780c      	ldrb	r4, [r1, #0]
1000fbce:	2c02      	cmp	r4, #2
1000fbd0:	d103      	bne.n	1000fbda <at_ble_random_address_resolve+0x1e>
1000fbd2:	4b03      	ldr	r3, [pc, #12]	; (1000fbe0 <at_ble_random_address_resolve+0x24>)
1000fbd4:	3101      	adds	r1, #1
1000fbd6:	4798      	blx	r3
1000fbd8:	2300      	movs	r3, #0
1000fbda:	1c18      	adds	r0, r3, #0
1000fbdc:	bd10      	pop	{r4, pc}
1000fbde:	46c0      	nop			; (mov r8, r8)
1000fbe0:	10011a4d 	.word	0x10011a4d

1000fbe4 <at_ble_uuid_type2len>:
1000fbe4:	23cf      	movs	r3, #207	; 0xcf
1000fbe6:	2802      	cmp	r0, #2
1000fbe8:	d801      	bhi.n	1000fbee <at_ble_uuid_type2len+0xa>
1000fbea:	4b02      	ldr	r3, [pc, #8]	; (1000fbf4 <at_ble_uuid_type2len+0x10>)
1000fbec:	5c1b      	ldrb	r3, [r3, r0]
1000fbee:	1c18      	adds	r0, r3, #0
1000fbf0:	4770      	bx	lr
1000fbf2:	46c0      	nop			; (mov r8, r8)
1000fbf4:	10016043 	.word	0x10016043

1000fbf8 <at_ble_uuid_len2type>:
1000fbf8:	1e83      	subs	r3, r0, #2
1000fbfa:	b2db      	uxtb	r3, r3
1000fbfc:	2003      	movs	r0, #3
1000fbfe:	2b0e      	cmp	r3, #14
1000fc00:	d801      	bhi.n	1000fc06 <at_ble_uuid_len2type+0xe>
1000fc02:	4a01      	ldr	r2, [pc, #4]	; (1000fc08 <at_ble_uuid_len2type+0x10>)
1000fc04:	5cd0      	ldrb	r0, [r2, r3]
1000fc06:	4770      	bx	lr
1000fc08:	10016034 	.word	0x10016034

1000fc0c <init_gatt_client_module>:
1000fc0c:	2200      	movs	r2, #0
1000fc0e:	4b01      	ldr	r3, [pc, #4]	; (1000fc14 <init_gatt_client_module+0x8>)
1000fc10:	801a      	strh	r2, [r3, #0]
1000fc12:	4770      	bx	lr
1000fc14:	1001685c 	.word	0x1001685c

1000fc18 <db_searchATT>:
1000fc18:	b570      	push	{r4, r5, r6, lr}
1000fc1a:	1c05      	adds	r5, r0, #0
1000fc1c:	2400      	movs	r4, #0
1000fc1e:	4b0c      	ldr	r3, [pc, #48]	; (1000fc50 <db_searchATT+0x38>)
1000fc20:	6819      	ldr	r1, [r3, #0]
1000fc22:	4b0c      	ldr	r3, [pc, #48]	; (1000fc54 <db_searchATT+0x3c>)
1000fc24:	681e      	ldr	r6, [r3, #0]
1000fc26:	428c      	cmp	r4, r1
1000fc28:	dc10      	bgt.n	1000fc4c <db_searchATT+0x34>
1000fc2a:	200c      	movs	r0, #12
1000fc2c:	1863      	adds	r3, r4, r1
1000fc2e:	0fda      	lsrs	r2, r3, #31
1000fc30:	18d3      	adds	r3, r2, r3
1000fc32:	1c02      	adds	r2, r0, #0
1000fc34:	105b      	asrs	r3, r3, #1
1000fc36:	435a      	muls	r2, r3
1000fc38:	18b0      	adds	r0, r6, r2
1000fc3a:	8802      	ldrh	r2, [r0, #0]
1000fc3c:	42aa      	cmp	r2, r5
1000fc3e:	d201      	bcs.n	1000fc44 <db_searchATT+0x2c>
1000fc40:	1e59      	subs	r1, r3, #1
1000fc42:	e7f0      	b.n	1000fc26 <db_searchATT+0xe>
1000fc44:	42aa      	cmp	r2, r5
1000fc46:	d902      	bls.n	1000fc4e <db_searchATT+0x36>
1000fc48:	1c5c      	adds	r4, r3, #1
1000fc4a:	e7ec      	b.n	1000fc26 <db_searchATT+0xe>
1000fc4c:	2000      	movs	r0, #0
1000fc4e:	bd70      	pop	{r4, r5, r6, pc}
1000fc50:	10016870 	.word	0x10016870
1000fc54:	10016868 	.word	0x10016868

1000fc58 <att_permissions>:
1000fc58:	b530      	push	{r4, r5, lr}
1000fc5a:	2403      	movs	r4, #3
1000fc5c:	1c05      	adds	r5, r0, #0
1000fc5e:	2301      	movs	r3, #1
1000fc60:	4025      	ands	r5, r4
1000fc62:	42a5      	cmp	r5, r4
1000fc64:	d009      	beq.n	1000fc7a <att_permissions+0x22>
1000fc66:	1c23      	adds	r3, r4, #0
1000fc68:	1924      	adds	r4, r4, r4
1000fc6a:	4220      	tst	r0, r4
1000fc6c:	d105      	bne.n	1000fc7a <att_permissions+0x22>
1000fc6e:	3b02      	subs	r3, #2
1000fc70:	4218      	tst	r0, r3
1000fc72:	d102      	bne.n	1000fc7a <att_permissions+0x22>
1000fc74:	1e4b      	subs	r3, r1, #1
1000fc76:	4199      	sbcs	r1, r3
1000fc78:	b28b      	uxth	r3, r1
1000fc7a:	2130      	movs	r1, #48	; 0x30
1000fc7c:	4001      	ands	r1, r0
1000fc7e:	2930      	cmp	r1, #48	; 0x30
1000fc80:	d007      	beq.n	1000fc92 <att_permissions+0x3a>
1000fc82:	0641      	lsls	r1, r0, #25
1000fc84:	d401      	bmi.n	1000fc8a <att_permissions+0x32>
1000fc86:	0681      	lsls	r1, r0, #26
1000fc88:	d501      	bpl.n	1000fc8e <att_permissions+0x36>
1000fc8a:	4807      	ldr	r0, [pc, #28]	; (1000fca8 <att_permissions+0x50>)
1000fc8c:	e009      	b.n	1000fca2 <att_permissions+0x4a>
1000fc8e:	06c1      	lsls	r1, r0, #27
1000fc90:	d501      	bpl.n	1000fc96 <att_permissions+0x3e>
1000fc92:	4806      	ldr	r0, [pc, #24]	; (1000fcac <att_permissions+0x54>)
1000fc94:	e005      	b.n	1000fca2 <att_permissions+0x4a>
1000fc96:	2a00      	cmp	r2, #0
1000fc98:	d001      	beq.n	1000fc9e <att_permissions+0x46>
1000fc9a:	2204      	movs	r2, #4
1000fc9c:	4313      	orrs	r3, r2
1000fc9e:	2080      	movs	r0, #128	; 0x80
1000fca0:	0180      	lsls	r0, r0, #6
1000fca2:	4318      	orrs	r0, r3
1000fca4:	bd30      	pop	{r4, r5, pc}
1000fca6:	46c0      	nop			; (mov r8, r8)
1000fca8:	0000200c 	.word	0x0000200c
1000fcac:	00002004 	.word	0x00002004

1000fcb0 <char_permissions>:
1000fcb0:	b530      	push	{r4, r5, lr}
1000fcb2:	2300      	movs	r3, #0
1000fcb4:	0784      	lsls	r4, r0, #30
1000fcb6:	d503      	bpl.n	1000fcc0 <char_permissions+0x10>
1000fcb8:	3301      	adds	r3, #1
1000fcba:	4219      	tst	r1, r3
1000fcbc:	d100      	bne.n	1000fcc0 <char_permissions+0x10>
1000fcbe:	3302      	adds	r3, #2
1000fcc0:	0704      	lsls	r4, r0, #28
1000fcc2:	d508      	bpl.n	1000fcd6 <char_permissions+0x26>
1000fcc4:	06cc      	lsls	r4, r1, #27
1000fcc6:	d501      	bpl.n	1000fccc <char_permissions+0x1c>
1000fcc8:	2404      	movs	r4, #4
1000fcca:	e000      	b.n	1000fcce <char_permissions+0x1e>
1000fccc:	240c      	movs	r4, #12
1000fcce:	4323      	orrs	r3, r4
1000fcd0:	2480      	movs	r4, #128	; 0x80
1000fcd2:	01a4      	lsls	r4, r4, #6
1000fcd4:	4323      	orrs	r3, r4
1000fcd6:	0684      	lsls	r4, r0, #26
1000fcd8:	d506      	bpl.n	1000fce8 <char_permissions+0x38>
1000fcda:	2406      	movs	r4, #6
1000fcdc:	4221      	tst	r1, r4
1000fcde:	d101      	bne.n	1000fce4 <char_permissions+0x34>
1000fce0:	340a      	adds	r4, #10
1000fce2:	e000      	b.n	1000fce6 <char_permissions+0x36>
1000fce4:	2430      	movs	r4, #48	; 0x30
1000fce6:	4323      	orrs	r3, r4
1000fce8:	06c4      	lsls	r4, r0, #27
1000fcea:	d506      	bpl.n	1000fcfa <char_permissions+0x4a>
1000fcec:	2406      	movs	r4, #6
1000fcee:	4221      	tst	r1, r4
1000fcf0:	d101      	bne.n	1000fcf6 <char_permissions+0x46>
1000fcf2:	343a      	adds	r4, #58	; 0x3a
1000fcf4:	e000      	b.n	1000fcf8 <char_permissions+0x48>
1000fcf6:	24c0      	movs	r4, #192	; 0xc0
1000fcf8:	4323      	orrs	r3, r4
1000fcfa:	2480      	movs	r4, #128	; 0x80
1000fcfc:	0064      	lsls	r4, r4, #1
1000fcfe:	4220      	tst	r0, r4
1000fd00:	d000      	beq.n	1000fd04 <char_permissions+0x54>
1000fd02:	4323      	orrs	r3, r4
1000fd04:	07c4      	lsls	r4, r0, #31
1000fd06:	d502      	bpl.n	1000fd0e <char_permissions+0x5e>
1000fd08:	2480      	movs	r4, #128	; 0x80
1000fd0a:	00a4      	lsls	r4, r4, #2
1000fd0c:	4323      	orrs	r3, r4
1000fd0e:	2404      	movs	r4, #4
1000fd10:	4220      	tst	r0, r4
1000fd12:	d006      	beq.n	1000fd22 <char_permissions+0x72>
1000fd14:	06cd      	lsls	r5, r1, #27
1000fd16:	d400      	bmi.n	1000fd1a <char_permissions+0x6a>
1000fd18:	240c      	movs	r4, #12
1000fd1a:	4323      	orrs	r3, r4
1000fd1c:	2480      	movs	r4, #128	; 0x80
1000fd1e:	0124      	lsls	r4, r4, #4
1000fd20:	4323      	orrs	r3, r4
1000fd22:	0644      	lsls	r4, r0, #25
1000fd24:	d501      	bpl.n	1000fd2a <char_permissions+0x7a>
1000fd26:	4c08      	ldr	r4, [pc, #32]	; (1000fd48 <char_permissions+0x98>)
1000fd28:	4323      	orrs	r3, r4
1000fd2a:	0600      	lsls	r0, r0, #24
1000fd2c:	d507      	bpl.n	1000fd3e <char_permissions+0x8e>
1000fd2e:	2004      	movs	r0, #4
1000fd30:	06c9      	lsls	r1, r1, #27
1000fd32:	d400      	bmi.n	1000fd36 <char_permissions+0x86>
1000fd34:	200c      	movs	r0, #12
1000fd36:	4303      	orrs	r3, r0
1000fd38:	2084      	movs	r0, #132	; 0x84
1000fd3a:	0180      	lsls	r0, r0, #6
1000fd3c:	4303      	orrs	r3, r0
1000fd3e:	0390      	lsls	r0, r2, #14
1000fd40:	4303      	orrs	r3, r0
1000fd42:	b298      	uxth	r0, r3
1000fd44:	bd30      	pop	{r4, r5, pc}
1000fd46:	46c0      	nop			; (mov r8, r8)
1000fd48:	00001004 	.word	0x00001004

1000fd4c <presentation_format_define>:
1000fd4c:	b507      	push	{r0, r1, r2, lr}
1000fd4e:	466a      	mov	r2, sp
1000fd50:	780b      	ldrb	r3, [r1, #0]
1000fd52:	7013      	strb	r3, [r2, #0]
1000fd54:	784b      	ldrb	r3, [r1, #1]
1000fd56:	7053      	strb	r3, [r2, #1]
1000fd58:	884b      	ldrh	r3, [r1, #2]
1000fd5a:	7093      	strb	r3, [r2, #2]
1000fd5c:	0a1b      	lsrs	r3, r3, #8
1000fd5e:	70d3      	strb	r3, [r2, #3]
1000fd60:	790b      	ldrb	r3, [r1, #4]
1000fd62:	7113      	strb	r3, [r2, #4]
1000fd64:	88cb      	ldrh	r3, [r1, #6]
1000fd66:	2107      	movs	r1, #7
1000fd68:	7153      	strb	r3, [r2, #5]
1000fd6a:	0a1b      	lsrs	r3, r3, #8
1000fd6c:	7193      	strb	r3, [r2, #6]
1000fd6e:	4b01      	ldr	r3, [pc, #4]	; (1000fd74 <presentation_format_define+0x28>)
1000fd70:	4798      	blx	r3
1000fd72:	bd0e      	pop	{r1, r2, r3, pc}
1000fd74:	100120b1 	.word	0x100120b1

1000fd78 <db_addATT>:
1000fd78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd7a:	4c29      	ldr	r4, [pc, #164]	; (1000fe20 <db_addATT+0xa8>)
1000fd7c:	1c1d      	adds	r5, r3, #0
1000fd7e:	6823      	ldr	r3, [r4, #0]
1000fd80:	9001      	str	r0, [sp, #4]
1000fd82:	26d3      	movs	r6, #211	; 0xd3
1000fd84:	2b00      	cmp	r3, #0
1000fd86:	d048      	beq.n	1000fe1a <db_addATT+0xa2>
1000fd88:	1c1e      	adds	r6, r3, #0
1000fd8a:	3e0c      	subs	r6, #12
1000fd8c:	6026      	str	r6, [r4, #0]
1000fd8e:	2900      	cmp	r1, #0
1000fd90:	d005      	beq.n	1000fd9e <db_addATT+0x26>
1000fd92:	4f24      	ldr	r7, [pc, #144]	; (1000fe24 <db_addATT+0xac>)
1000fd94:	46bc      	mov	ip, r7
1000fd96:	4660      	mov	r0, ip
1000fd98:	683f      	ldr	r7, [r7, #0]
1000fd9a:	18bf      	adds	r7, r7, r2
1000fd9c:	6007      	str	r7, [r0, #0]
1000fd9e:	4821      	ldr	r0, [pc, #132]	; (1000fe24 <db_addATT+0xac>)
1000fda0:	6807      	ldr	r7, [r0, #0]
1000fda2:	4684      	mov	ip, r0
1000fda4:	42be      	cmp	r6, r7
1000fda6:	d932      	bls.n	1000fe0e <db_addATT+0x96>
1000fda8:	4668      	mov	r0, sp
1000fdaa:	8880      	ldrh	r0, [r0, #4]
1000fdac:	3b0c      	subs	r3, #12
1000fdae:	8018      	strh	r0, [r3, #0]
1000fdb0:	6823      	ldr	r3, [r4, #0]
1000fdb2:	2900      	cmp	r1, #0
1000fdb4:	d009      	beq.n	1000fdca <db_addATT+0x52>
1000fdb6:	2a00      	cmp	r2, #0
1000fdb8:	d007      	beq.n	1000fdca <db_addATT+0x52>
1000fdba:	4660      	mov	r0, ip
1000fdbc:	6800      	ldr	r0, [r0, #0]
1000fdbe:	809a      	strh	r2, [r3, #4]
1000fdc0:	1a80      	subs	r0, r0, r2
1000fdc2:	6098      	str	r0, [r3, #8]
1000fdc4:	4b18      	ldr	r3, [pc, #96]	; (1000fe28 <db_addATT+0xb0>)
1000fdc6:	4798      	blx	r3
1000fdc8:	e002      	b.n	1000fdd0 <db_addATT+0x58>
1000fdca:	2100      	movs	r1, #0
1000fdcc:	809a      	strh	r2, [r3, #4]
1000fdce:	6099      	str	r1, [r3, #8]
1000fdd0:	2300      	movs	r3, #0
1000fdd2:	6822      	ldr	r2, [r4, #0]
1000fdd4:	7093      	strb	r3, [r2, #2]
1000fdd6:	3303      	adds	r3, #3
1000fdd8:	402b      	ands	r3, r5
1000fdda:	2b03      	cmp	r3, #3
1000fddc:	d001      	beq.n	1000fde2 <db_addATT+0x6a>
1000fdde:	076b      	lsls	r3, r5, #29
1000fde0:	d504      	bpl.n	1000fdec <db_addATT+0x74>
1000fde2:	2101      	movs	r1, #1
1000fde4:	6822      	ldr	r2, [r4, #0]
1000fde6:	7893      	ldrb	r3, [r2, #2]
1000fde8:	430b      	orrs	r3, r1
1000fdea:	7093      	strb	r3, [r2, #2]
1000fdec:	2330      	movs	r3, #48	; 0x30
1000fdee:	402b      	ands	r3, r5
1000fdf0:	2b30      	cmp	r3, #48	; 0x30
1000fdf2:	d001      	beq.n	1000fdf8 <db_addATT+0x80>
1000fdf4:	066b      	lsls	r3, r5, #25
1000fdf6:	d504      	bpl.n	1000fe02 <db_addATT+0x8a>
1000fdf8:	2102      	movs	r1, #2
1000fdfa:	6822      	ldr	r2, [r4, #0]
1000fdfc:	7893      	ldrb	r3, [r2, #2]
1000fdfe:	430b      	orrs	r3, r1
1000fe00:	7093      	strb	r3, [r2, #2]
1000fe02:	4a0a      	ldr	r2, [pc, #40]	; (1000fe2c <db_addATT+0xb4>)
1000fe04:	2600      	movs	r6, #0
1000fe06:	6813      	ldr	r3, [r2, #0]
1000fe08:	3301      	adds	r3, #1
1000fe0a:	6013      	str	r3, [r2, #0]
1000fe0c:	e005      	b.n	1000fe1a <db_addATT+0xa2>
1000fe0e:	6023      	str	r3, [r4, #0]
1000fe10:	2611      	movs	r6, #17
1000fe12:	2900      	cmp	r1, #0
1000fe14:	d001      	beq.n	1000fe1a <db_addATT+0xa2>
1000fe16:	1aba      	subs	r2, r7, r2
1000fe18:	6002      	str	r2, [r0, #0]
1000fe1a:	1c30      	adds	r0, r6, #0
1000fe1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fe1e:	46c0      	nop			; (mov r8, r8)
1000fe20:	10016868 	.word	0x10016868
1000fe24:	1001686c 	.word	0x1001686c
1000fe28:	100133db 	.word	0x100133db
1000fe2c:	10016870 	.word	0x10016870

1000fe30 <user_description_define>:
1000fe30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fe32:	1c05      	adds	r5, r0, #0
1000fe34:	20cf      	movs	r0, #207	; 0xcf
1000fe36:	2a00      	cmp	r2, #0
1000fe38:	d01c      	beq.n	1000fe74 <user_description_define+0x44>
1000fe3a:	1c14      	adds	r4, r2, #0
1000fe3c:	2203      	movs	r2, #3
1000fe3e:	1c1e      	adds	r6, r3, #0
1000fe40:	400a      	ands	r2, r1
1000fe42:	1c0b      	adds	r3, r1, #0
1000fe44:	3a03      	subs	r2, #3
1000fe46:	4251      	negs	r1, r2
1000fe48:	4151      	adcs	r1, r2
1000fe4a:	075a      	lsls	r2, r3, #29
1000fe4c:	0fd2      	lsrs	r2, r2, #31
1000fe4e:	430a      	orrs	r2, r1
1000fe50:	03d2      	lsls	r2, r2, #15
1000fe52:	4f09      	ldr	r7, [pc, #36]	; (1000fe78 <user_description_define+0x48>)
1000fe54:	1c28      	adds	r0, r5, #0
1000fe56:	2a00      	cmp	r2, #0
1000fe58:	d003      	beq.n	1000fe62 <user_description_define+0x32>
1000fe5a:	1c21      	adds	r1, r4, #0
1000fe5c:	1c32      	adds	r2, r6, #0
1000fe5e:	47b8      	blx	r7
1000fe60:	e008      	b.n	1000fe74 <user_description_define+0x44>
1000fe62:	1c11      	adds	r1, r2, #0
1000fe64:	47b8      	blx	r7
1000fe66:	2800      	cmp	r0, #0
1000fe68:	d104      	bne.n	1000fe74 <user_description_define+0x44>
1000fe6a:	1c28      	adds	r0, r5, #0
1000fe6c:	1c31      	adds	r1, r6, #0
1000fe6e:	1c22      	adds	r2, r4, #0
1000fe70:	4b02      	ldr	r3, [pc, #8]	; (1000fe7c <user_description_define+0x4c>)
1000fe72:	4798      	blx	r3
1000fe74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fe76:	46c0      	nop			; (mov r8, r8)
1000fe78:	1000fd79 	.word	0x1000fd79
1000fe7c:	100120b1 	.word	0x100120b1

1000fe80 <at_ble_read_authorize_reply.part.2>:
1000fe80:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fe82:	4b09      	ldr	r3, [pc, #36]	; (1000fea8 <at_ble_read_authorize_reply.part.2+0x28>)
1000fe84:	1c05      	adds	r5, r0, #0
1000fe86:	1c08      	adds	r0, r1, #0
1000fe88:	1c0c      	adds	r4, r1, #0
1000fe8a:	4798      	blx	r3
1000fe8c:	2800      	cmp	r0, #0
1000fe8e:	d009      	beq.n	1000fea4 <at_ble_read_authorize_reply.part.2+0x24>
1000fe90:	6882      	ldr	r2, [r0, #8]
1000fe92:	2a00      	cmp	r2, #0
1000fe94:	d006      	beq.n	1000fea4 <at_ble_read_authorize_reply.part.2+0x24>
1000fe96:	8883      	ldrh	r3, [r0, #4]
1000fe98:	1c29      	adds	r1, r5, #0
1000fe9a:	9200      	str	r2, [sp, #0]
1000fe9c:	1c20      	adds	r0, r4, #0
1000fe9e:	2200      	movs	r2, #0
1000fea0:	4c02      	ldr	r4, [pc, #8]	; (1000feac <at_ble_read_authorize_reply.part.2+0x2c>)
1000fea2:	47a0      	blx	r4
1000fea4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000fea6:	46c0      	nop			; (mov r8, r8)
1000fea8:	1000fc19 	.word	0x1000fc19
1000feac:	10011b49 	.word	0x10011b49

1000feb0 <internal_at_ble_service_define.part.1>:
1000feb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000feb2:	2400      	movs	r4, #0
1000feb4:	1c05      	adds	r5, r0, #0
1000feb6:	b08b      	sub	sp, #44	; 0x2c
1000feb8:	9304      	str	r3, [sp, #16]
1000feba:	ab10      	add	r3, sp, #64	; 0x40
1000febc:	9202      	str	r2, [sp, #8]
1000febe:	cb04      	ldmia	r3!, {r2}
1000fec0:	9106      	str	r1, [sp, #24]
1000fec2:	881b      	ldrh	r3, [r3, #0]
1000fec4:	1c21      	adds	r1, r4, #0
1000fec6:	9305      	str	r3, [sp, #20]
1000fec8:	ab12      	add	r3, sp, #72	; 0x48
1000feca:	781b      	ldrb	r3, [r3, #0]
1000fecc:	2210      	movs	r2, #16
1000fece:	9303      	str	r3, [sp, #12]
1000fed0:	4bc5      	ldr	r3, [pc, #788]	; (100101e8 <internal_at_ble_service_define.part.1+0x338>)
1000fed2:	681e      	ldr	r6, [r3, #0]
1000fed4:	4bc5      	ldr	r3, [pc, #788]	; (100101ec <internal_at_ble_service_define.part.1+0x33c>)
1000fed6:	8034      	strh	r4, [r6, #0]
1000fed8:	881b      	ldrh	r3, [r3, #0]
1000feda:	1db7      	adds	r7, r6, #6
1000fedc:	8073      	strh	r3, [r6, #2]
1000fede:	1c38      	adds	r0, r7, #0
1000fee0:	4bc3      	ldr	r3, [pc, #780]	; (100101f0 <internal_at_ble_service_define.part.1+0x340>)
1000fee2:	4798      	blx	r3
1000fee4:	4bc3      	ldr	r3, [pc, #780]	; (100101f4 <internal_at_ble_service_define.part.1+0x344>)
1000fee6:	7828      	ldrb	r0, [r5, #0]
1000fee8:	4798      	blx	r3
1000feea:	4bc3      	ldr	r3, [pc, #780]	; (100101f8 <internal_at_ble_service_define.part.1+0x348>)
1000feec:	1c02      	adds	r2, r0, #0
1000feee:	1c69      	adds	r1, r5, #1
1000fef0:	1c38      	adds	r0, r7, #0
1000fef2:	4798      	blx	r3
1000fef4:	2204      	movs	r2, #4
1000fef6:	782b      	ldrb	r3, [r5, #0]
1000fef8:	7174      	strb	r4, [r6, #5]
1000fefa:	011b      	lsls	r3, r3, #4
1000fefc:	4313      	orrs	r3, r2
1000fefe:	9a03      	ldr	r2, [sp, #12]
1000ff00:	9c02      	ldr	r4, [sp, #8]
1000ff02:	0192      	lsls	r2, r2, #6
1000ff04:	4313      	orrs	r3, r2
1000ff06:	7133      	strb	r3, [r6, #4]
1000ff08:	2316      	movs	r3, #22
1000ff0a:	9a04      	ldr	r2, [sp, #16]
1000ff0c:	3412      	adds	r4, #18
1000ff0e:	4353      	muls	r3, r2
1000ff10:	9a02      	ldr	r2, [sp, #8]
1000ff12:	3312      	adds	r3, #18
1000ff14:	18d7      	adds	r7, r2, r3
1000ff16:	42bc      	cmp	r4, r7
1000ff18:	d00f      	beq.n	1000ff3a <internal_at_ble_service_define.part.1+0x8a>
1000ff1a:	4bb8      	ldr	r3, [pc, #736]	; (100101fc <internal_at_ble_service_define.part.1+0x34c>)
1000ff1c:	8821      	ldrh	r1, [r4, #0]
1000ff1e:	9300      	str	r3, [sp, #0]
1000ff20:	230e      	movs	r3, #14
1000ff22:	aa06      	add	r2, sp, #24
1000ff24:	189b      	adds	r3, r3, r2
1000ff26:	9301      	str	r3, [sp, #4]
1000ff28:	4db5      	ldr	r5, [pc, #724]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
1000ff2a:	1c30      	adds	r0, r6, #0
1000ff2c:	2201      	movs	r2, #1
1000ff2e:	2302      	movs	r3, #2
1000ff30:	47a8      	blx	r5
1000ff32:	3416      	adds	r4, #22
1000ff34:	1e05      	subs	r5, r0, #0
1000ff36:	d0ee      	beq.n	1000ff16 <internal_at_ble_service_define.part.1+0x66>
1000ff38:	e183      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
1000ff3a:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000ff3c:	2300      	movs	r3, #0
1000ff3e:	3714      	adds	r7, #20
1000ff40:	1c3c      	adds	r4, r7, #0
1000ff42:	9302      	str	r3, [sp, #8]
1000ff44:	9b02      	ldr	r3, [sp, #8]
1000ff46:	9a05      	ldr	r2, [sp, #20]
1000ff48:	4293      	cmp	r3, r2
1000ff4a:	db00      	blt.n	1000ff4e <internal_at_ble_service_define.part.1+0x9e>
1000ff4c:	e0bf      	b.n	100100ce <internal_at_ble_service_define.part.1+0x21e>
1000ff4e:	4bad      	ldr	r3, [pc, #692]	; (10010204 <internal_at_ble_service_define.part.1+0x354>)
1000ff50:	aa06      	add	r2, sp, #24
1000ff52:	9300      	str	r3, [sp, #0]
1000ff54:	230e      	movs	r3, #14
1000ff56:	189b      	adds	r3, r3, r2
1000ff58:	9301      	str	r3, [sp, #4]
1000ff5a:	4da9      	ldr	r5, [pc, #676]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
1000ff5c:	1c30      	adds	r0, r6, #0
1000ff5e:	2104      	movs	r1, #4
1000ff60:	2201      	movs	r2, #1
1000ff62:	2302      	movs	r3, #2
1000ff64:	47a8      	blx	r5
1000ff66:	1e05      	subs	r5, r0, #0
1000ff68:	d000      	beq.n	1000ff6c <internal_at_ble_service_define.part.1+0xbc>
1000ff6a:	e16a      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
1000ff6c:	1c23      	adds	r3, r4, #0
1000ff6e:	3b12      	subs	r3, #18
1000ff70:	7b25      	ldrb	r5, [r4, #12]
1000ff72:	781b      	ldrb	r3, [r3, #0]
1000ff74:	1c29      	adds	r1, r5, #0
1000ff76:	1c1a      	adds	r2, r3, #0
1000ff78:	9303      	str	r3, [sp, #12]
1000ff7a:	8820      	ldrh	r0, [r4, #0]
1000ff7c:	4ba2      	ldr	r3, [pc, #648]	; (10010208 <internal_at_ble_service_define.part.1+0x358>)
1000ff7e:	4798      	blx	r3
1000ff80:	2303      	movs	r3, #3
1000ff82:	402b      	ands	r3, r5
1000ff84:	3b03      	subs	r3, #3
1000ff86:	4259      	negs	r1, r3
1000ff88:	4159      	adcs	r1, r3
1000ff8a:	2301      	movs	r3, #1
1000ff8c:	08ad      	lsrs	r5, r5, #2
1000ff8e:	401d      	ands	r5, r3
1000ff90:	430d      	orrs	r5, r1
1000ff92:	8963      	ldrh	r3, [r4, #10]
1000ff94:	03ed      	lsls	r5, r5, #15
1000ff96:	431d      	orrs	r5, r3
1000ff98:	9007      	str	r0, [sp, #28]
1000ff9a:	4b96      	ldr	r3, [pc, #600]	; (100101f4 <internal_at_ble_service_define.part.1+0x344>)
1000ff9c:	9803      	ldr	r0, [sp, #12]
1000ff9e:	4798      	blx	r3
1000ffa0:	1c22      	adds	r2, r4, #0
1000ffa2:	3a11      	subs	r2, #17
1000ffa4:	9200      	str	r2, [sp, #0]
1000ffa6:	3a03      	subs	r2, #3
1000ffa8:	1c03      	adds	r3, r0, #0
1000ffaa:	9201      	str	r2, [sp, #4]
1000ffac:	1c29      	adds	r1, r5, #0
1000ffae:	1c30      	adds	r0, r6, #0
1000ffb0:	4d93      	ldr	r5, [pc, #588]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
1000ffb2:	9a07      	ldr	r2, [sp, #28]
1000ffb4:	47a8      	blx	r5
1000ffb6:	1e05      	subs	r5, r0, #0
1000ffb8:	d000      	beq.n	1000ffbc <internal_at_ble_service_define.part.1+0x10c>
1000ffba:	e142      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
1000ffbc:	22c0      	movs	r2, #192	; 0xc0
1000ffbe:	8823      	ldrh	r3, [r4, #0]
1000ffc0:	0052      	lsls	r2, r2, #1
1000ffc2:	4213      	tst	r3, r2
1000ffc4:	d104      	bne.n	1000ffd0 <internal_at_ble_service_define.part.1+0x120>
1000ffc6:	8aa3      	ldrh	r3, [r4, #20]
1000ffc8:	9303      	str	r3, [sp, #12]
1000ffca:	2b00      	cmp	r3, #0
1000ffcc:	d116      	bne.n	1000fffc <internal_at_ble_service_define.part.1+0x14c>
1000ffce:	e03a      	b.n	10010046 <internal_at_ble_service_define.part.1+0x196>
1000ffd0:	2201      	movs	r2, #1
1000ffd2:	09d9      	lsrs	r1, r3, #7
1000ffd4:	4011      	ands	r1, r2
1000ffd6:	05db      	lsls	r3, r3, #23
1000ffd8:	d501      	bpl.n	1000ffde <internal_at_ble_service_define.part.1+0x12e>
1000ffda:	2302      	movs	r3, #2
1000ffdc:	4319      	orrs	r1, r3
1000ffde:	4b8b      	ldr	r3, [pc, #556]	; (1001020c <internal_at_ble_service_define.part.1+0x35c>)
1000ffe0:	aa06      	add	r2, sp, #24
1000ffe2:	9300      	str	r3, [sp, #0]
1000ffe4:	230e      	movs	r3, #14
1000ffe6:	189b      	adds	r3, r3, r2
1000ffe8:	9301      	str	r3, [sp, #4]
1000ffea:	4d85      	ldr	r5, [pc, #532]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
1000ffec:	0209      	lsls	r1, r1, #8
1000ffee:	1c30      	adds	r0, r6, #0
1000fff0:	2201      	movs	r2, #1
1000fff2:	2302      	movs	r3, #2
1000fff4:	47a8      	blx	r5
1000fff6:	1e05      	subs	r5, r0, #0
1000fff8:	d0e5      	beq.n	1000ffc6 <internal_at_ble_service_define.part.1+0x116>
1000fffa:	e122      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
1000fffc:	2380      	movs	r3, #128	; 0x80
1000fffe:	8822      	ldrh	r2, [r4, #0]
10010000:	7f25      	ldrb	r5, [r4, #28]
10010002:	005b      	lsls	r3, r3, #1
10010004:	401a      	ands	r2, r3
10010006:	1c28      	adds	r0, r5, #0
10010008:	2101      	movs	r1, #1
1001000a:	2a00      	cmp	r2, #0
1001000c:	d000      	beq.n	10010010 <internal_at_ble_service_define.part.1+0x160>
1001000e:	1c0a      	adds	r2, r1, #0
10010010:	4b7f      	ldr	r3, [pc, #508]	; (10010210 <internal_at_ble_service_define.part.1+0x360>)
10010012:	4798      	blx	r3
10010014:	2203      	movs	r2, #3
10010016:	402a      	ands	r2, r5
10010018:	3a03      	subs	r2, #3
1001001a:	4251      	negs	r1, r2
1001001c:	4151      	adcs	r1, r2
1001001e:	4b7d      	ldr	r3, [pc, #500]	; (10010214 <internal_at_ble_service_define.part.1+0x364>)
10010020:	1c0a      	adds	r2, r1, #0
10010022:	9300      	str	r3, [sp, #0]
10010024:	1c23      	adds	r3, r4, #0
10010026:	076d      	lsls	r5, r5, #29
10010028:	0fed      	lsrs	r5, r5, #31
1001002a:	432a      	orrs	r2, r5
1001002c:	03d2      	lsls	r2, r2, #15
1001002e:	4310      	orrs	r0, r2
10010030:	3320      	adds	r3, #32
10010032:	b282      	uxth	r2, r0
10010034:	9301      	str	r3, [sp, #4]
10010036:	4d72      	ldr	r5, [pc, #456]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
10010038:	1c30      	adds	r0, r6, #0
1001003a:	9903      	ldr	r1, [sp, #12]
1001003c:	2302      	movs	r3, #2
1001003e:	47a8      	blx	r5
10010040:	1e05      	subs	r5, r0, #0
10010042:	d000      	beq.n	10010046 <internal_at_ble_service_define.part.1+0x196>
10010044:	e0fd      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
10010046:	2101      	movs	r1, #1
10010048:	8823      	ldrh	r3, [r4, #0]
1001004a:	420b      	tst	r3, r1
1001004c:	d011      	beq.n	10010072 <internal_at_ble_service_define.part.1+0x1c2>
1001004e:	7fa0      	ldrb	r0, [r4, #30]
10010050:	4b6f      	ldr	r3, [pc, #444]	; (10010210 <internal_at_ble_service_define.part.1+0x360>)
10010052:	2200      	movs	r2, #0
10010054:	4798      	blx	r3
10010056:	4b70      	ldr	r3, [pc, #448]	; (10010218 <internal_at_ble_service_define.part.1+0x368>)
10010058:	1c02      	adds	r2, r0, #0
1001005a:	9300      	str	r3, [sp, #0]
1001005c:	1c23      	adds	r3, r4, #0
1001005e:	3324      	adds	r3, #36	; 0x24
10010060:	9301      	str	r3, [sp, #4]
10010062:	4d67      	ldr	r5, [pc, #412]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
10010064:	1c30      	adds	r0, r6, #0
10010066:	496d      	ldr	r1, [pc, #436]	; (1001021c <internal_at_ble_service_define.part.1+0x36c>)
10010068:	2302      	movs	r3, #2
1001006a:	47a8      	blx	r5
1001006c:	1e05      	subs	r5, r0, #0
1001006e:	d000      	beq.n	10010072 <internal_at_ble_service_define.part.1+0x1c2>
10010070:	e0e7      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
10010072:	2330      	movs	r3, #48	; 0x30
10010074:	8822      	ldrh	r2, [r4, #0]
10010076:	421a      	tst	r2, r3
10010078:	d012      	beq.n	100100a0 <internal_at_ble_service_define.part.1+0x1f0>
1001007a:	2101      	movs	r1, #1
1001007c:	7f60      	ldrb	r0, [r4, #29]
1001007e:	1c0a      	adds	r2, r1, #0
10010080:	4b63      	ldr	r3, [pc, #396]	; (10010210 <internal_at_ble_service_define.part.1+0x360>)
10010082:	4798      	blx	r3
10010084:	4b66      	ldr	r3, [pc, #408]	; (10010220 <internal_at_ble_service_define.part.1+0x370>)
10010086:	1c02      	adds	r2, r0, #0
10010088:	9300      	str	r3, [sp, #0]
1001008a:	1c23      	adds	r3, r4, #0
1001008c:	3322      	adds	r3, #34	; 0x22
1001008e:	9301      	str	r3, [sp, #4]
10010090:	4d5b      	ldr	r5, [pc, #364]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
10010092:	1c30      	adds	r0, r6, #0
10010094:	4961      	ldr	r1, [pc, #388]	; (1001021c <internal_at_ble_service_define.part.1+0x36c>)
10010096:	2302      	movs	r3, #2
10010098:	47a8      	blx	r5
1001009a:	1e05      	subs	r5, r0, #0
1001009c:	d000      	beq.n	100100a0 <internal_at_ble_service_define.part.1+0x1f0>
1001009e:	e0d0      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
100100a0:	69a3      	ldr	r3, [r4, #24]
100100a2:	2b00      	cmp	r3, #0
100100a4:	d00e      	beq.n	100100c4 <internal_at_ble_service_define.part.1+0x214>
100100a6:	4b5f      	ldr	r3, [pc, #380]	; (10010224 <internal_at_ble_service_define.part.1+0x374>)
100100a8:	aa06      	add	r2, sp, #24
100100aa:	9300      	str	r3, [sp, #0]
100100ac:	230e      	movs	r3, #14
100100ae:	189b      	adds	r3, r3, r2
100100b0:	9301      	str	r3, [sp, #4]
100100b2:	4d53      	ldr	r5, [pc, #332]	; (10010200 <internal_at_ble_service_define.part.1+0x350>)
100100b4:	1c30      	adds	r0, r6, #0
100100b6:	2107      	movs	r1, #7
100100b8:	2201      	movs	r2, #1
100100ba:	2302      	movs	r3, #2
100100bc:	47a8      	blx	r5
100100be:	1e05      	subs	r5, r0, #0
100100c0:	d000      	beq.n	100100c4 <internal_at_ble_service_define.part.1+0x214>
100100c2:	e0be      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
100100c4:	9b02      	ldr	r3, [sp, #8]
100100c6:	343c      	adds	r4, #60	; 0x3c
100100c8:	3301      	adds	r3, #1
100100ca:	9302      	str	r3, [sp, #8]
100100cc:	e73a      	b.n	1000ff44 <internal_at_ble_service_define.part.1+0x94>
100100ce:	1c30      	adds	r0, r6, #0
100100d0:	4b55      	ldr	r3, [pc, #340]	; (10010228 <internal_at_ble_service_define.part.1+0x378>)
100100d2:	4798      	blx	r3
100100d4:	1e05      	subs	r5, r0, #0
100100d6:	d000      	beq.n	100100da <internal_at_ble_service_define.part.1+0x22a>
100100d8:	e0b3      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
100100da:	8833      	ldrh	r3, [r6, #0]
100100dc:	9a06      	ldr	r2, [sp, #24]
100100de:	8013      	strh	r3, [r2, #0]
100100e0:	8836      	ldrh	r6, [r6, #0]
100100e2:	9b04      	ldr	r3, [sp, #16]
100100e4:	9a05      	ldr	r2, [sp, #20]
100100e6:	18f6      	adds	r6, r6, r3
100100e8:	b2b3      	uxth	r3, r6
100100ea:	9302      	str	r3, [sp, #8]
100100ec:	233c      	movs	r3, #60	; 0x3c
100100ee:	4353      	muls	r3, r2
100100f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
100100f2:	3314      	adds	r3, #20
100100f4:	18d3      	adds	r3, r2, r3
100100f6:	9304      	str	r3, [sp, #16]
100100f8:	9b04      	ldr	r3, [sp, #16]
100100fa:	429f      	cmp	r7, r3
100100fc:	d100      	bne.n	10010100 <internal_at_ble_service_define.part.1+0x250>
100100fe:	e0a0      	b.n	10010242 <internal_at_ble_service_define.part.1+0x392>
10010100:	9b02      	ldr	r3, [sp, #8]
10010102:	1c9c      	adds	r4, r3, #2
10010104:	1c3b      	adds	r3, r7, #0
10010106:	b2a4      	uxth	r4, r4
10010108:	3b14      	subs	r3, #20
1001010a:	801c      	strh	r4, [r3, #0]
1001010c:	9303      	str	r3, [sp, #12]
1001010e:	893b      	ldrh	r3, [r7, #8]
10010110:	2b00      	cmp	r3, #0
10010112:	d108      	bne.n	10010126 <internal_at_ble_service_define.part.1+0x276>
10010114:	23c0      	movs	r3, #192	; 0xc0
10010116:	883a      	ldrh	r2, [r7, #0]
10010118:	005b      	lsls	r3, r3, #1
1001011a:	421a      	tst	r2, r3
1001011c:	d026      	beq.n	1001016c <internal_at_ble_service_define.part.1+0x2bc>
1001011e:	9e02      	ldr	r6, [sp, #8]
10010120:	3603      	adds	r6, #3
10010122:	b2b4      	uxth	r4, r6
10010124:	e022      	b.n	1001016c <internal_at_ble_service_define.part.1+0x2bc>
10010126:	2103      	movs	r1, #3
10010128:	7b3b      	ldrb	r3, [r7, #12]
1001012a:	4019      	ands	r1, r3
1001012c:	3903      	subs	r1, #3
1001012e:	424a      	negs	r2, r1
10010130:	414a      	adcs	r2, r1
10010132:	0759      	lsls	r1, r3, #29
10010134:	0fc9      	lsrs	r1, r1, #31
10010136:	4311      	orrs	r1, r2
10010138:	03c9      	lsls	r1, r1, #15
1001013a:	897a      	ldrh	r2, [r7, #10]
1001013c:	2900      	cmp	r1, #0
1001013e:	d007      	beq.n	10010150 <internal_at_ble_service_define.part.1+0x2a0>
10010140:	6879      	ldr	r1, [r7, #4]
10010142:	2900      	cmp	r1, #0
10010144:	d100      	bne.n	10010148 <internal_at_ble_service_define.part.1+0x298>
10010146:	4939      	ldr	r1, [pc, #228]	; (1001022c <internal_at_ble_service_define.part.1+0x37c>)
10010148:	1c20      	adds	r0, r4, #0
1001014a:	4e39      	ldr	r6, [pc, #228]	; (10010230 <internal_at_ble_service_define.part.1+0x380>)
1001014c:	47b0      	blx	r6
1001014e:	e00a      	b.n	10010166 <internal_at_ble_service_define.part.1+0x2b6>
10010150:	1c20      	adds	r0, r4, #0
10010152:	4e37      	ldr	r6, [pc, #220]	; (10010230 <internal_at_ble_service_define.part.1+0x380>)
10010154:	47b0      	blx	r6
10010156:	2800      	cmp	r0, #0
10010158:	d172      	bne.n	10010240 <internal_at_ble_service_define.part.1+0x390>
1001015a:	9b03      	ldr	r3, [sp, #12]
1001015c:	8939      	ldrh	r1, [r7, #8]
1001015e:	8818      	ldrh	r0, [r3, #0]
10010160:	687a      	ldr	r2, [r7, #4]
10010162:	4b34      	ldr	r3, [pc, #208]	; (10010234 <internal_at_ble_service_define.part.1+0x384>)
10010164:	4798      	blx	r3
10010166:	2800      	cmp	r0, #0
10010168:	d0d4      	beq.n	10010114 <internal_at_ble_service_define.part.1+0x264>
1001016a:	e069      	b.n	10010240 <internal_at_ble_service_define.part.1+0x390>
1001016c:	8abb      	ldrh	r3, [r7, #20]
1001016e:	2b00      	cmp	r3, #0
10010170:	d00a      	beq.n	10010188 <internal_at_ble_service_define.part.1+0x2d8>
10010172:	3401      	adds	r4, #1
10010174:	b2a4      	uxth	r4, r4
10010176:	843c      	strh	r4, [r7, #32]
10010178:	7f39      	ldrb	r1, [r7, #28]
1001017a:	8afb      	ldrh	r3, [r7, #22]
1001017c:	1c20      	adds	r0, r4, #0
1001017e:	693a      	ldr	r2, [r7, #16]
10010180:	4e2d      	ldr	r6, [pc, #180]	; (10010238 <internal_at_ble_service_define.part.1+0x388>)
10010182:	47b0      	blx	r6
10010184:	2800      	cmp	r0, #0
10010186:	d15b      	bne.n	10010240 <internal_at_ble_service_define.part.1+0x390>
10010188:	883b      	ldrh	r3, [r7, #0]
1001018a:	07db      	lsls	r3, r3, #31
1001018c:	d50d      	bpl.n	100101aa <internal_at_ble_service_define.part.1+0x2fa>
1001018e:	2200      	movs	r2, #0
10010190:	3401      	adds	r4, #1
10010192:	b2a4      	uxth	r4, r4
10010194:	a909      	add	r1, sp, #36	; 0x24
10010196:	84bc      	strh	r4, [r7, #36]	; 0x24
10010198:	7fbb      	ldrb	r3, [r7, #30]
1001019a:	1c20      	adds	r0, r4, #0
1001019c:	700a      	strb	r2, [r1, #0]
1001019e:	704a      	strb	r2, [r1, #1]
100101a0:	4e23      	ldr	r6, [pc, #140]	; (10010230 <internal_at_ble_service_define.part.1+0x380>)
100101a2:	3202      	adds	r2, #2
100101a4:	47b0      	blx	r6
100101a6:	2800      	cmp	r0, #0
100101a8:	d14a      	bne.n	10010240 <internal_at_ble_service_define.part.1+0x390>
100101aa:	2330      	movs	r3, #48	; 0x30
100101ac:	883a      	ldrh	r2, [r7, #0]
100101ae:	421a      	tst	r2, r3
100101b0:	d00d      	beq.n	100101ce <internal_at_ble_service_define.part.1+0x31e>
100101b2:	2200      	movs	r2, #0
100101b4:	3401      	adds	r4, #1
100101b6:	b2a4      	uxth	r4, r4
100101b8:	a909      	add	r1, sp, #36	; 0x24
100101ba:	847c      	strh	r4, [r7, #34]	; 0x22
100101bc:	7f7b      	ldrb	r3, [r7, #29]
100101be:	1c20      	adds	r0, r4, #0
100101c0:	700a      	strb	r2, [r1, #0]
100101c2:	704a      	strb	r2, [r1, #1]
100101c4:	4e1a      	ldr	r6, [pc, #104]	; (10010230 <internal_at_ble_service_define.part.1+0x380>)
100101c6:	3202      	adds	r2, #2
100101c8:	47b0      	blx	r6
100101ca:	2800      	cmp	r0, #0
100101cc:	d138      	bne.n	10010240 <internal_at_ble_service_define.part.1+0x390>
100101ce:	69b9      	ldr	r1, [r7, #24]
100101d0:	2900      	cmp	r1, #0
100101d2:	d006      	beq.n	100101e2 <internal_at_ble_service_define.part.1+0x332>
100101d4:	3401      	adds	r4, #1
100101d6:	b2a4      	uxth	r4, r4
100101d8:	1c20      	adds	r0, r4, #0
100101da:	4b18      	ldr	r3, [pc, #96]	; (1001023c <internal_at_ble_service_define.part.1+0x38c>)
100101dc:	4798      	blx	r3
100101de:	2800      	cmp	r0, #0
100101e0:	d12e      	bne.n	10010240 <internal_at_ble_service_define.part.1+0x390>
100101e2:	373c      	adds	r7, #60	; 0x3c
100101e4:	9402      	str	r4, [sp, #8]
100101e6:	e787      	b.n	100100f8 <internal_at_ble_service_define.part.1+0x248>
100101e8:	10016878 	.word	0x10016878
100101ec:	10017580 	.word	0x10017580
100101f0:	100133ed 	.word	0x100133ed
100101f4:	1000fbe5 	.word	0x1000fbe5
100101f8:	100133db 	.word	0x100133db
100101fc:	10016050 	.word	0x10016050
10010200:	10012041 	.word	0x10012041
10010204:	10016052 	.word	0x10016052
10010208:	1000fcb1 	.word	0x1000fcb1
1001020c:	1001604e 	.word	0x1001604e
10010210:	1000fc59 	.word	0x1000fc59
10010214:	1001604a 	.word	0x1001604a
10010218:	1001604c 	.word	0x1001604c
1001021c:	00008002 	.word	0x00008002
10010220:	10016046 	.word	0x10016046
10010224:	10016048 	.word	0x10016048
10010228:	10011f35 	.word	0x10011f35
1001022c:	10016864 	.word	0x10016864
10010230:	1000fd79 	.word	0x1000fd79
10010234:	100120b1 	.word	0x100120b1
10010238:	1000fe31 	.word	0x1000fe31
1001023c:	1000fd4d 	.word	0x1000fd4d
10010240:	1c05      	adds	r5, r0, #0
10010242:	1c28      	adds	r0, r5, #0
10010244:	b00b      	add	sp, #44	; 0x2c
10010246:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010248 <initi_gatt_server_module>:
10010248:	2300      	movs	r3, #0
1001024a:	4a06      	ldr	r2, [pc, #24]	; (10010264 <initi_gatt_server_module+0x1c>)
1001024c:	7013      	strb	r3, [r2, #0]
1001024e:	4a06      	ldr	r2, [pc, #24]	; (10010268 <initi_gatt_server_module+0x20>)
10010250:	6013      	str	r3, [r2, #0]
10010252:	4a06      	ldr	r2, [pc, #24]	; (1001026c <initi_gatt_server_module+0x24>)
10010254:	6013      	str	r3, [r2, #0]
10010256:	4a06      	ldr	r2, [pc, #24]	; (10010270 <initi_gatt_server_module+0x28>)
10010258:	6013      	str	r3, [r2, #0]
1001025a:	4a06      	ldr	r2, [pc, #24]	; (10010274 <initi_gatt_server_module+0x2c>)
1001025c:	6013      	str	r3, [r2, #0]
1001025e:	4a06      	ldr	r2, [pc, #24]	; (10010278 <initi_gatt_server_module+0x30>)
10010260:	6013      	str	r3, [r2, #0]
10010262:	4770      	bx	lr
10010264:	10016864 	.word	0x10016864
10010268:	10016874 	.word	0x10016874
1001026c:	10016870 	.word	0x10016870
10010270:	10016860 	.word	0x10016860
10010274:	1001686c 	.word	0x1001686c
10010278:	10016868 	.word	0x10016868

1001027c <db_init>:
1001027c:	4b0a      	ldr	r3, [pc, #40]	; (100102a8 <db_init+0x2c>)
1001027e:	4a0b      	ldr	r2, [pc, #44]	; (100102ac <db_init+0x30>)
10010280:	6018      	str	r0, [r3, #0]
10010282:	084b      	lsrs	r3, r1, #1
10010284:	6013      	str	r3, [r2, #0]
10010286:	4a0a      	ldr	r2, [pc, #40]	; (100102b0 <db_init+0x34>)
10010288:	18c3      	adds	r3, r0, r3
1001028a:	6013      	str	r3, [r2, #0]
1001028c:	4a09      	ldr	r2, [pc, #36]	; (100102b4 <db_init+0x38>)
1001028e:	1841      	adds	r1, r0, r1
10010290:	6013      	str	r3, [r2, #0]
10010292:	2303      	movs	r3, #3
10010294:	2200      	movs	r2, #0
10010296:	3103      	adds	r1, #3
10010298:	4399      	bics	r1, r3
1001029a:	4b07      	ldr	r3, [pc, #28]	; (100102b8 <db_init+0x3c>)
1001029c:	3904      	subs	r1, #4
1001029e:	6019      	str	r1, [r3, #0]
100102a0:	4b06      	ldr	r3, [pc, #24]	; (100102bc <db_init+0x40>)
100102a2:	601a      	str	r2, [r3, #0]
100102a4:	4770      	bx	lr
100102a6:	46c0      	nop			; (mov r8, r8)
100102a8:	10016878 	.word	0x10016878
100102ac:	10016874 	.word	0x10016874
100102b0:	10016860 	.word	0x10016860
100102b4:	1001686c 	.word	0x1001686c
100102b8:	10016868 	.word	0x10016868
100102bc:	10016870 	.word	0x10016870

100102c0 <at_ble_primary_service_define>:
100102c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
100102c2:	ac08      	add	r4, sp, #32
100102c4:	cc40      	ldmia	r4!, {r6}
100102c6:	1c05      	adds	r5, r0, #0
100102c8:	8824      	ldrh	r4, [r4, #0]
100102ca:	20cf      	movs	r0, #207	; 0xcf
100102cc:	2d00      	cmp	r5, #0
100102ce:	d00c      	beq.n	100102ea <at_ble_primary_service_define+0x2a>
100102d0:	2900      	cmp	r1, #0
100102d2:	d00a      	beq.n	100102ea <at_ble_primary_service_define+0x2a>
100102d4:	2e00      	cmp	r6, #0
100102d6:	d008      	beq.n	100102ea <at_ble_primary_service_define+0x2a>
100102d8:	2c00      	cmp	r4, #0
100102da:	d006      	beq.n	100102ea <at_ble_primary_service_define+0x2a>
100102dc:	38ce      	subs	r0, #206	; 0xce
100102de:	9401      	str	r4, [sp, #4]
100102e0:	9002      	str	r0, [sp, #8]
100102e2:	9600      	str	r6, [sp, #0]
100102e4:	1c28      	adds	r0, r5, #0
100102e6:	4c02      	ldr	r4, [pc, #8]	; (100102f0 <at_ble_primary_service_define+0x30>)
100102e8:	47a0      	blx	r4
100102ea:	b004      	add	sp, #16
100102ec:	bd70      	pop	{r4, r5, r6, pc}
100102ee:	46c0      	nop			; (mov r8, r8)
100102f0:	1000feb1 	.word	0x1000feb1

100102f4 <at_ble_characteristic_value_set>:
100102f4:	b570      	push	{r4, r5, r6, lr}
100102f6:	4b0b      	ldr	r3, [pc, #44]	; (10010324 <at_ble_characteristic_value_set+0x30>)
100102f8:	1c06      	adds	r6, r0, #0
100102fa:	1c0c      	adds	r4, r1, #0
100102fc:	1c15      	adds	r5, r2, #0
100102fe:	4798      	blx	r3
10010300:	2800      	cmp	r0, #0
10010302:	d008      	beq.n	10010316 <at_ble_characteristic_value_set+0x22>
10010304:	6880      	ldr	r0, [r0, #8]
10010306:	2800      	cmp	r0, #0
10010308:	d005      	beq.n	10010316 <at_ble_characteristic_value_set+0x22>
1001030a:	1c21      	adds	r1, r4, #0
1001030c:	1c2a      	adds	r2, r5, #0
1001030e:	4b06      	ldr	r3, [pc, #24]	; (10010328 <at_ble_characteristic_value_set+0x34>)
10010310:	4798      	blx	r3
10010312:	2000      	movs	r0, #0
10010314:	e004      	b.n	10010320 <at_ble_characteristic_value_set+0x2c>
10010316:	1c30      	adds	r0, r6, #0
10010318:	1c29      	adds	r1, r5, #0
1001031a:	1c22      	adds	r2, r4, #0
1001031c:	4b03      	ldr	r3, [pc, #12]	; (1001032c <at_ble_characteristic_value_set+0x38>)
1001031e:	4798      	blx	r3
10010320:	bd70      	pop	{r4, r5, r6, pc}
10010322:	46c0      	nop			; (mov r8, r8)
10010324:	1000fc19 	.word	0x1000fc19
10010328:	100133db 	.word	0x100133db
1001032c:	100120b1 	.word	0x100120b1

10010330 <at_ble_characteristic_value_get>:
10010330:	b570      	push	{r4, r5, r6, lr}
10010332:	4b0c      	ldr	r3, [pc, #48]	; (10010364 <at_ble_characteristic_value_get+0x34>)
10010334:	1c06      	adds	r6, r0, #0
10010336:	1c0c      	adds	r4, r1, #0
10010338:	1c15      	adds	r5, r2, #0
1001033a:	4798      	blx	r3
1001033c:	2800      	cmp	r0, #0
1001033e:	d00b      	beq.n	10010358 <at_ble_characteristic_value_get+0x28>
10010340:	6883      	ldr	r3, [r0, #8]
10010342:	2b00      	cmp	r3, #0
10010344:	d008      	beq.n	10010358 <at_ble_characteristic_value_get+0x28>
10010346:	8883      	ldrh	r3, [r0, #4]
10010348:	802b      	strh	r3, [r5, #0]
1001034a:	8882      	ldrh	r2, [r0, #4]
1001034c:	6881      	ldr	r1, [r0, #8]
1001034e:	4b06      	ldr	r3, [pc, #24]	; (10010368 <at_ble_characteristic_value_get+0x38>)
10010350:	1c20      	adds	r0, r4, #0
10010352:	4798      	blx	r3
10010354:	2000      	movs	r0, #0
10010356:	e004      	b.n	10010362 <at_ble_characteristic_value_get+0x32>
10010358:	1c30      	adds	r0, r6, #0
1001035a:	1c29      	adds	r1, r5, #0
1001035c:	1c22      	adds	r2, r4, #0
1001035e:	4b03      	ldr	r3, [pc, #12]	; (1001036c <at_ble_characteristic_value_get+0x3c>)
10010360:	4798      	blx	r3
10010362:	bd70      	pop	{r4, r5, r6, pc}
10010364:	1000fc19 	.word	0x1000fc19
10010368:	100133db 	.word	0x100133db
1001036c:	1001213d 	.word	0x1001213d

10010370 <at_ble_write_authorize_reply>:
10010370:	b5f0      	push	{r4, r5, r6, r7, lr}
10010372:	b085      	sub	sp, #20
10010374:	1c04      	adds	r4, r0, #0
10010376:	9101      	str	r1, [sp, #4]
10010378:	2900      	cmp	r1, #0
1001037a:	d128      	bne.n	100103ce <at_ble_write_authorize_reply+0x5e>
1001037c:	8843      	ldrh	r3, [r0, #2]
1001037e:	1c27      	adds	r7, r4, #0
10010380:	9300      	str	r3, [sp, #0]
10010382:	1c18      	adds	r0, r3, #0
10010384:	4b16      	ldr	r3, [pc, #88]	; (100103e0 <at_ble_write_authorize_reply+0x70>)
10010386:	4798      	blx	r3
10010388:	3708      	adds	r7, #8
1001038a:	2800      	cmp	r0, #0
1001038c:	d009      	beq.n	100103a2 <at_ble_write_authorize_reply+0x32>
1001038e:	6880      	ldr	r0, [r0, #8]
10010390:	2800      	cmp	r0, #0
10010392:	d006      	beq.n	100103a2 <at_ble_write_authorize_reply+0x32>
10010394:	88a3      	ldrh	r3, [r4, #4]
10010396:	88e2      	ldrh	r2, [r4, #6]
10010398:	18c0      	adds	r0, r0, r3
1001039a:	1c39      	adds	r1, r7, #0
1001039c:	4b11      	ldr	r3, [pc, #68]	; (100103e4 <at_ble_write_authorize_reply+0x74>)
1001039e:	4798      	blx	r3
100103a0:	e015      	b.n	100103ce <at_ble_write_authorize_reply+0x5e>
100103a2:	ab02      	add	r3, sp, #8
100103a4:	1d9e      	adds	r6, r3, #6
100103a6:	2300      	movs	r3, #0
100103a8:	4d0f      	ldr	r5, [pc, #60]	; (100103e8 <at_ble_write_authorize_reply+0x78>)
100103aa:	8033      	strh	r3, [r6, #0]
100103ac:	6829      	ldr	r1, [r5, #0]
100103ae:	1c32      	adds	r2, r6, #0
100103b0:	4b0e      	ldr	r3, [pc, #56]	; (100103ec <at_ble_write_authorize_reply+0x7c>)
100103b2:	9800      	ldr	r0, [sp, #0]
100103b4:	4798      	blx	r3
100103b6:	682b      	ldr	r3, [r5, #0]
100103b8:	88a0      	ldrh	r0, [r4, #4]
100103ba:	88e2      	ldrh	r2, [r4, #6]
100103bc:	1818      	adds	r0, r3, r0
100103be:	1c39      	adds	r1, r7, #0
100103c0:	4b08      	ldr	r3, [pc, #32]	; (100103e4 <at_ble_write_authorize_reply+0x74>)
100103c2:	4798      	blx	r3
100103c4:	8860      	ldrh	r0, [r4, #2]
100103c6:	8832      	ldrh	r2, [r6, #0]
100103c8:	6829      	ldr	r1, [r5, #0]
100103ca:	4b09      	ldr	r3, [pc, #36]	; (100103f0 <at_ble_write_authorize_reply+0x80>)
100103cc:	4798      	blx	r3
100103ce:	8860      	ldrh	r0, [r4, #2]
100103d0:	8821      	ldrh	r1, [r4, #0]
100103d2:	9a01      	ldr	r2, [sp, #4]
100103d4:	4b07      	ldr	r3, [pc, #28]	; (100103f4 <at_ble_write_authorize_reply+0x84>)
100103d6:	4798      	blx	r3
100103d8:	2000      	movs	r0, #0
100103da:	b005      	add	sp, #20
100103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103de:	46c0      	nop			; (mov r8, r8)
100103e0:	1000fc19 	.word	0x1000fc19
100103e4:	100133db 	.word	0x100133db
100103e8:	1001615c 	.word	0x1001615c
100103ec:	10010331 	.word	0x10010331
100103f0:	100102f5 	.word	0x100102f5
100103f4:	10011bb5 	.word	0x10011bb5

100103f8 <gatts_handle_read_req>:
100103f8:	b538      	push	{r3, r4, r5, lr}
100103fa:	1c0c      	adds	r4, r1, #0
100103fc:	4b07      	ldr	r3, [pc, #28]	; (1001041c <gatts_handle_read_req+0x24>)
100103fe:	4798      	blx	r3
10010400:	8865      	ldrh	r5, [r4, #2]
10010402:	4b07      	ldr	r3, [pc, #28]	; (10010420 <gatts_handle_read_req+0x28>)
10010404:	1c28      	adds	r0, r5, #0
10010406:	4798      	blx	r3
10010408:	7883      	ldrb	r3, [r0, #2]
1001040a:	2026      	movs	r0, #38	; 0x26
1001040c:	07db      	lsls	r3, r3, #31
1001040e:	d404      	bmi.n	1001041a <gatts_handle_read_req+0x22>
10010410:	8820      	ldrh	r0, [r4, #0]
10010412:	1c29      	adds	r1, r5, #0
10010414:	4b03      	ldr	r3, [pc, #12]	; (10010424 <gatts_handle_read_req+0x2c>)
10010416:	4798      	blx	r3
10010418:	203b      	movs	r0, #59	; 0x3b
1001041a:	bd38      	pop	{r3, r4, r5, pc}
1001041c:	10011af9 	.word	0x10011af9
10010420:	1000fc19 	.word	0x1000fc19
10010424:	1000fe81 	.word	0x1000fe81

10010428 <gatts_handle_att_info_req>:
10010428:	b538      	push	{r3, r4, r5, lr}
1001042a:	1c0d      	adds	r5, r1, #0
1001042c:	4b0a      	ldr	r3, [pc, #40]	; (10010458 <gatts_handle_att_info_req+0x30>)
1001042e:	1c14      	adds	r4, r2, #0
10010430:	4798      	blx	r3
10010432:	882d      	ldrh	r5, [r5, #0]
10010434:	4b09      	ldr	r3, [pc, #36]	; (1001045c <gatts_handle_att_info_req+0x34>)
10010436:	1c28      	adds	r0, r5, #0
10010438:	4798      	blx	r3
1001043a:	0a22      	lsrs	r2, r4, #8
1001043c:	1c03      	adds	r3, r0, #0
1001043e:	4c08      	ldr	r4, [pc, #32]	; (10010460 <gatts_handle_att_info_req+0x38>)
10010440:	b291      	uxth	r1, r2
10010442:	2800      	cmp	r0, #0
10010444:	d003      	beq.n	1001044e <gatts_handle_att_info_req+0x26>
10010446:	8882      	ldrh	r2, [r0, #4]
10010448:	2300      	movs	r3, #0
1001044a:	1c28      	adds	r0, r5, #0
1001044c:	e001      	b.n	10010452 <gatts_handle_att_info_req+0x2a>
1001044e:	1c28      	adds	r0, r5, #0
10010450:	2201      	movs	r2, #1
10010452:	47a0      	blx	r4
10010454:	203b      	movs	r0, #59	; 0x3b
10010456:	bd38      	pop	{r3, r4, r5, pc}
10010458:	10011b3d 	.word	0x10011b3d
1001045c:	1000fc19 	.word	0x1000fc19
10010460:	10011bf9 	.word	0x10011bf9

10010464 <gatts_handle_write_req>:
10010464:	b510      	push	{r4, lr}
10010466:	1c14      	adds	r4, r2, #0
10010468:	4b07      	ldr	r3, [pc, #28]	; (10010488 <gatts_handle_write_req+0x24>)
1001046a:	4798      	blx	r3
1001046c:	4b07      	ldr	r3, [pc, #28]	; (1001048c <gatts_handle_write_req+0x28>)
1001046e:	8860      	ldrh	r0, [r4, #2]
10010470:	4798      	blx	r3
10010472:	2302      	movs	r3, #2
10010474:	7881      	ldrb	r1, [r0, #2]
10010476:	2022      	movs	r0, #34	; 0x22
10010478:	4019      	ands	r1, r3
1001047a:	d103      	bne.n	10010484 <gatts_handle_write_req+0x20>
1001047c:	1c20      	adds	r0, r4, #0
1001047e:	4b04      	ldr	r3, [pc, #16]	; (10010490 <gatts_handle_write_req+0x2c>)
10010480:	4798      	blx	r3
10010482:	201f      	movs	r0, #31
10010484:	bd10      	pop	{r4, pc}
10010486:	46c0      	nop			; (mov r8, r8)
10010488:	10011b05 	.word	0x10011b05
1001048c:	1000fc19 	.word	0x1000fc19
10010490:	10010371 	.word	0x10010371

10010494 <at_ble_notification_send>:
10010494:	b5f0      	push	{r4, r5, r6, r7, lr}
10010496:	4d17      	ldr	r5, [pc, #92]	; (100104f4 <at_ble_notification_send+0x60>)
10010498:	4c17      	ldr	r4, [pc, #92]	; (100104f8 <at_ble_notification_send+0x64>)
1001049a:	682a      	ldr	r2, [r5, #0]
1001049c:	44a5      	add	sp, r4
1001049e:	23d2      	movs	r3, #210	; 0xd2
100104a0:	2a04      	cmp	r2, #4
100104a2:	d822      	bhi.n	100104ea <at_ble_notification_send+0x56>
100104a4:	1c06      	adds	r6, r0, #0
100104a6:	4b15      	ldr	r3, [pc, #84]	; (100104fc <at_ble_notification_send+0x68>)
100104a8:	1c08      	adds	r0, r1, #0
100104aa:	1c0c      	adds	r4, r1, #0
100104ac:	4798      	blx	r3
100104ae:	2800      	cmp	r0, #0
100104b0:	d008      	beq.n	100104c4 <at_ble_notification_send+0x30>
100104b2:	6883      	ldr	r3, [r0, #8]
100104b4:	2b00      	cmp	r3, #0
100104b6:	d005      	beq.n	100104c4 <at_ble_notification_send+0x30>
100104b8:	8882      	ldrh	r2, [r0, #4]
100104ba:	1c21      	adds	r1, r4, #0
100104bc:	9200      	str	r2, [sp, #0]
100104be:	2012      	movs	r0, #18
100104c0:	1c32      	adds	r2, r6, #0
100104c2:	e00c      	b.n	100104de <at_ble_notification_send+0x4a>
100104c4:	270e      	movs	r7, #14
100104c6:	446f      	add	r7, sp
100104c8:	1c39      	adds	r1, r7, #0
100104ca:	aa04      	add	r2, sp, #16
100104cc:	4b0c      	ldr	r3, [pc, #48]	; (10010500 <at_ble_notification_send+0x6c>)
100104ce:	1c20      	adds	r0, r4, #0
100104d0:	4798      	blx	r3
100104d2:	2012      	movs	r0, #18
100104d4:	1c21      	adds	r1, r4, #0
100104d6:	1c32      	adds	r2, r6, #0
100104d8:	883b      	ldrh	r3, [r7, #0]
100104da:	9300      	str	r3, [sp, #0]
100104dc:	ab04      	add	r3, sp, #16
100104de:	4c09      	ldr	r4, [pc, #36]	; (10010504 <at_ble_notification_send+0x70>)
100104e0:	47a0      	blx	r4
100104e2:	682b      	ldr	r3, [r5, #0]
100104e4:	3301      	adds	r3, #1
100104e6:	602b      	str	r3, [r5, #0]
100104e8:	2300      	movs	r3, #0
100104ea:	1c18      	adds	r0, r3, #0
100104ec:	2385      	movs	r3, #133	; 0x85
100104ee:	009b      	lsls	r3, r3, #2
100104f0:	449d      	add	sp, r3
100104f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104f4:	100168fc 	.word	0x100168fc
100104f8:	fffffdec 	.word	0xfffffdec
100104fc:	1000fc19 	.word	0x1000fc19
10010500:	1001213d 	.word	0x1001213d
10010504:	10011c41 	.word	0x10011c41

10010508 <init_l2cc_task_module>:
10010508:	220a      	movs	r2, #10
1001050a:	4b01      	ldr	r3, [pc, #4]	; (10010510 <init_l2cc_task_module+0x8>)
1001050c:	701a      	strb	r2, [r3, #0]
1001050e:	4770      	bx	lr
10010510:	10016158 	.word	0x10016158

10010514 <l2cc_data_send_rsp_handler>:
10010514:	b510      	push	{r4, lr}
10010516:	7802      	ldrb	r2, [r0, #0]
10010518:	700a      	strb	r2, [r1, #0]
1001051a:	7883      	ldrb	r3, [r0, #2]
1001051c:	7844      	ldrb	r4, [r0, #1]
1001051e:	021b      	lsls	r3, r3, #8
10010520:	4323      	orrs	r3, r4
10010522:	804b      	strh	r3, [r1, #2]
10010524:	7903      	ldrb	r3, [r0, #4]
10010526:	78c0      	ldrb	r0, [r0, #3]
10010528:	021b      	lsls	r3, r3, #8
1001052a:	4303      	orrs	r3, r0
1001052c:	808b      	strh	r3, [r1, #4]
1001052e:	2a00      	cmp	r2, #0
10010530:	d103      	bne.n	1001053a <l2cc_data_send_rsp_handler+0x26>
10010532:	4a02      	ldr	r2, [pc, #8]	; (1001053c <l2cc_data_send_rsp_handler+0x28>)
10010534:	7813      	ldrb	r3, [r2, #0]
10010536:	3301      	adds	r3, #1
10010538:	7013      	strb	r3, [r2, #0]
1001053a:	bd10      	pop	{r4, pc}
1001053c:	10016158 	.word	0x10016158

10010540 <l2cc_data_received_handler>:
10010540:	b508      	push	{r3, lr}
10010542:	1c03      	adds	r3, r0, #0
10010544:	7842      	ldrb	r2, [r0, #1]
10010546:	7800      	ldrb	r0, [r0, #0]
10010548:	0212      	lsls	r2, r2, #8
1001054a:	4302      	orrs	r2, r0
1001054c:	800a      	strh	r2, [r1, #0]
1001054e:	78da      	ldrb	r2, [r3, #3]
10010550:	7898      	ldrb	r0, [r3, #2]
10010552:	0212      	lsls	r2, r2, #8
10010554:	4302      	orrs	r2, r0
10010556:	804a      	strh	r2, [r1, #2]
10010558:	795a      	ldrb	r2, [r3, #5]
1001055a:	7918      	ldrb	r0, [r3, #4]
1001055c:	0212      	lsls	r2, r2, #8
1001055e:	4302      	orrs	r2, r0
10010560:	808a      	strh	r2, [r1, #4]
10010562:	1d88      	adds	r0, r1, #6
10010564:	1d99      	adds	r1, r3, #6
10010566:	4b01      	ldr	r3, [pc, #4]	; (1001056c <l2cc_data_received_handler+0x2c>)
10010568:	4798      	blx	r3
1001056a:	bd08      	pop	{r3, pc}
1001056c:	100133db 	.word	0x100133db

10010570 <at_ble_authenticate>:
10010570:	b5f0      	push	{r4, r5, r6, r7, lr}
10010572:	1c0c      	adds	r4, r1, #0
10010574:	211f      	movs	r1, #31
10010576:	b08b      	sub	sp, #44	; 0x2c
10010578:	9307      	str	r3, [sp, #28]
1001057a:	ab02      	add	r3, sp, #8
1001057c:	18c9      	adds	r1, r1, r3
1001057e:	230f      	movs	r3, #15
10010580:	700b      	strb	r3, [r1, #0]
10010582:	4b40      	ldr	r3, [pc, #256]	; (10010684 <at_ble_authenticate+0x114>)
10010584:	1c05      	adds	r5, r0, #0
10010586:	1c16      	adds	r6, r2, #0
10010588:	4798      	blx	r3
1001058a:	1c07      	adds	r7, r0, #0
1001058c:	2001      	movs	r0, #1
1001058e:	2f07      	cmp	r7, #7
10010590:	d875      	bhi.n	1001067e <at_ble_authenticate+0x10e>
10010592:	2c00      	cmp	r4, #0
10010594:	d113      	bne.n	100105be <at_ble_authenticate+0x4e>
10010596:	2312      	movs	r3, #18
10010598:	435f      	muls	r7, r3
1001059a:	4b3b      	ldr	r3, [pc, #236]	; (10010688 <at_ble_authenticate+0x118>)
1001059c:	5cfb      	ldrb	r3, [r7, r3]
1001059e:	4283      	cmp	r3, r0
100105a0:	d001      	beq.n	100105a6 <at_ble_authenticate+0x36>
100105a2:	20cf      	movs	r0, #207	; 0xcf
100105a4:	e06b      	b.n	1001067e <at_ble_authenticate+0x10e>
100105a6:	9504      	str	r5, [sp, #16]
100105a8:	9400      	str	r4, [sp, #0]
100105aa:	9401      	str	r4, [sp, #4]
100105ac:	9402      	str	r4, [sp, #8]
100105ae:	9403      	str	r4, [sp, #12]
100105b0:	1c20      	adds	r0, r4, #0
100105b2:	1c21      	adds	r1, r4, #0
100105b4:	1c22      	adds	r2, r4, #0
100105b6:	1c23      	adds	r3, r4, #0
100105b8:	4d34      	ldr	r5, [pc, #208]	; (1001068c <at_ble_authenticate+0x11c>)
100105ba:	47a8      	blx	r5
100105bc:	e05e      	b.n	1001067c <at_ble_authenticate+0x10c>
100105be:	7922      	ldrb	r2, [r4, #4]
100105c0:	2a06      	cmp	r2, #6
100105c2:	d9ee      	bls.n	100105a2 <at_ble_authenticate+0x32>
100105c4:	7963      	ldrb	r3, [r4, #5]
100105c6:	2b10      	cmp	r3, #16
100105c8:	d8eb      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105ca:	429a      	cmp	r2, r3
100105cc:	d8e9      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105ce:	7a23      	ldrb	r3, [r4, #8]
100105d0:	2b04      	cmp	r3, #4
100105d2:	d8e6      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105d4:	79a3      	ldrb	r3, [r4, #6]
100105d6:	2b07      	cmp	r3, #7
100105d8:	d8e3      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105da:	79e3      	ldrb	r3, [r4, #7]
100105dc:	2b07      	cmp	r3, #7
100105de:	d8e0      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105e0:	78a3      	ldrb	r3, [r4, #2]
100105e2:	2b00      	cmp	r3, #0
100105e4:	d006      	beq.n	100105f4 <at_ble_authenticate+0x84>
100105e6:	2e00      	cmp	r6, #0
100105e8:	d0db      	beq.n	100105a2 <at_ble_authenticate+0x32>
100105ea:	4829      	ldr	r0, [pc, #164]	; (10010690 <at_ble_authenticate+0x120>)
100105ec:	1c31      	adds	r1, r6, #0
100105ee:	221c      	movs	r2, #28
100105f0:	4b28      	ldr	r3, [pc, #160]	; (10010694 <at_ble_authenticate+0x124>)
100105f2:	4798      	blx	r3
100105f4:	9b07      	ldr	r3, [sp, #28]
100105f6:	2b00      	cmp	r3, #0
100105f8:	d005      	beq.n	10010606 <at_ble_authenticate+0x96>
100105fa:	4827      	ldr	r0, [pc, #156]	; (10010698 <at_ble_authenticate+0x128>)
100105fc:	1c19      	adds	r1, r3, #0
100105fe:	309a      	adds	r0, #154	; 0x9a
10010600:	2210      	movs	r2, #16
10010602:	4b24      	ldr	r3, [pc, #144]	; (10010694 <at_ble_authenticate+0x124>)
10010604:	4798      	blx	r3
10010606:	7863      	ldrb	r3, [r4, #1]
10010608:	78a2      	ldrb	r2, [r4, #2]
1001060a:	009b      	lsls	r3, r3, #2
1001060c:	4313      	orrs	r3, r2
1001060e:	2212      	movs	r2, #18
10010610:	4357      	muls	r7, r2
10010612:	4a1d      	ldr	r2, [pc, #116]	; (10010688 <at_ble_authenticate+0x118>)
10010614:	b2db      	uxtb	r3, r3
10010616:	5cba      	ldrb	r2, [r7, r2]
10010618:	2a00      	cmp	r2, #0
1001061a:	d116      	bne.n	1001064a <at_ble_authenticate+0xda>
1001061c:	79a0      	ldrb	r0, [r4, #6]
1001061e:	0742      	lsls	r2, r0, #29
10010620:	d502      	bpl.n	10010628 <at_ble_authenticate+0xb8>
10010622:	9a07      	ldr	r2, [sp, #28]
10010624:	2a00      	cmp	r2, #0
10010626:	d0bc      	beq.n	100105a2 <at_ble_authenticate+0x32>
10010628:	07c2      	lsls	r2, r0, #31
1001062a:	d501      	bpl.n	10010630 <at_ble_authenticate+0xc0>
1001062c:	2e00      	cmp	r6, #0
1001062e:	d0b8      	beq.n	100105a2 <at_ble_authenticate+0x32>
10010630:	7966      	ldrb	r6, [r4, #5]
10010632:	7821      	ldrb	r1, [r4, #0]
10010634:	78e2      	ldrb	r2, [r4, #3]
10010636:	9600      	str	r6, [sp, #0]
10010638:	9001      	str	r0, [sp, #4]
1001063a:	79e0      	ldrb	r0, [r4, #7]
1001063c:	9002      	str	r0, [sp, #8]
1001063e:	7a20      	ldrb	r0, [r4, #8]
10010640:	4c16      	ldr	r4, [pc, #88]	; (1001069c <at_ble_authenticate+0x12c>)
10010642:	9003      	str	r0, [sp, #12]
10010644:	1c28      	adds	r0, r5, #0
10010646:	47a0      	blx	r4
10010648:	e018      	b.n	1001067c <at_ble_authenticate+0x10c>
1001064a:	2a01      	cmp	r2, #1
1001064c:	d1a9      	bne.n	100105a2 <at_ble_authenticate+0x32>
1001064e:	79e0      	ldrb	r0, [r4, #7]
10010650:	0742      	lsls	r2, r0, #29
10010652:	d502      	bpl.n	1001065a <at_ble_authenticate+0xea>
10010654:	9a07      	ldr	r2, [sp, #28]
10010656:	2a00      	cmp	r2, #0
10010658:	d0a3      	beq.n	100105a2 <at_ble_authenticate+0x32>
1001065a:	07c2      	lsls	r2, r0, #31
1001065c:	d501      	bpl.n	10010662 <at_ble_authenticate+0xf2>
1001065e:	2e00      	cmp	r6, #0
10010660:	d09f      	beq.n	100105a2 <at_ble_authenticate+0x32>
10010662:	7966      	ldrb	r6, [r4, #5]
10010664:	7821      	ldrb	r1, [r4, #0]
10010666:	78e2      	ldrb	r2, [r4, #3]
10010668:	9600      	str	r6, [sp, #0]
1001066a:	79a6      	ldrb	r6, [r4, #6]
1001066c:	9002      	str	r0, [sp, #8]
1001066e:	9601      	str	r6, [sp, #4]
10010670:	7a20      	ldrb	r0, [r4, #8]
10010672:	9504      	str	r5, [sp, #16]
10010674:	9003      	str	r0, [sp, #12]
10010676:	4c05      	ldr	r4, [pc, #20]	; (1001068c <at_ble_authenticate+0x11c>)
10010678:	2001      	movs	r0, #1
1001067a:	47a0      	blx	r4
1001067c:	2000      	movs	r0, #0
1001067e:	b00b      	add	sp, #44	; 0x2c
10010680:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010682:	46c0      	nop			; (mov r8, r8)
10010684:	10010a59 	.word	0x10010a59
10010688:	10017582 	.word	0x10017582
1001068c:	10010fc9 	.word	0x10010fc9
10010690:	10017690 	.word	0x10017690
10010694:	100133db 	.word	0x100133db
10010698:	10017612 	.word	0x10017612
1001069c:	10010da9 	.word	0x10010da9

100106a0 <at_ble_pair_key_reply>:
100106a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100106a2:	b085      	sub	sp, #20
100106a4:	1c05      	adds	r5, r0, #0
100106a6:	1c0c      	adds	r4, r1, #0
100106a8:	1c16      	adds	r6, r2, #0
100106aa:	2100      	movs	r1, #0
100106ac:	4668      	mov	r0, sp
100106ae:	2210      	movs	r2, #16
100106b0:	4b18      	ldr	r3, [pc, #96]	; (10010714 <at_ble_pair_key_reply+0x74>)
100106b2:	4798      	blx	r3
100106b4:	2101      	movs	r1, #1
100106b6:	2e00      	cmp	r6, #0
100106b8:	d101      	bne.n	100106be <at_ble_pair_key_reply+0x1e>
100106ba:	1c31      	adds	r1, r6, #0
100106bc:	466e      	mov	r6, sp
100106be:	2c00      	cmp	r4, #0
100106c0:	d116      	bne.n	100106f0 <at_ble_pair_key_reply+0x50>
100106c2:	2701      	movs	r7, #1
100106c4:	1c23      	adds	r3, r4, #0
100106c6:	1d70      	adds	r0, r6, #5
100106c8:	3e01      	subs	r6, #1
100106ca:	7802      	ldrb	r2, [r0, #0]
100106cc:	3801      	subs	r0, #1
100106ce:	3a30      	subs	r2, #48	; 0x30
100106d0:	437a      	muls	r2, r7
100106d2:	189b      	adds	r3, r3, r2
100106d4:	220a      	movs	r2, #10
100106d6:	4357      	muls	r7, r2
100106d8:	42b0      	cmp	r0, r6
100106da:	d1f6      	bne.n	100106ca <at_ble_pair_key_reply+0x2a>
100106dc:	466a      	mov	r2, sp
100106de:	4668      	mov	r0, sp
100106e0:	7013      	strb	r3, [r2, #0]
100106e2:	0a1a      	lsrs	r2, r3, #8
100106e4:	7042      	strb	r2, [r0, #1]
100106e6:	0c1a      	lsrs	r2, r3, #16
100106e8:	0e1b      	lsrs	r3, r3, #24
100106ea:	7082      	strb	r2, [r0, #2]
100106ec:	70c3      	strb	r3, [r0, #3]
100106ee:	e009      	b.n	10010704 <at_ble_pair_key_reply+0x64>
100106f0:	20cf      	movs	r0, #207	; 0xcf
100106f2:	2c01      	cmp	r4, #1
100106f4:	d10c      	bne.n	10010710 <at_ble_pair_key_reply+0x70>
100106f6:	2300      	movs	r3, #0
100106f8:	4668      	mov	r0, sp
100106fa:	5cf2      	ldrb	r2, [r6, r3]
100106fc:	54c2      	strb	r2, [r0, r3]
100106fe:	3301      	adds	r3, #1
10010700:	2b10      	cmp	r3, #16
10010702:	d1f9      	bne.n	100106f8 <at_ble_pair_key_reply+0x58>
10010704:	2004      	movs	r0, #4
10010706:	466a      	mov	r2, sp
10010708:	1c2b      	adds	r3, r5, #0
1001070a:	4c03      	ldr	r4, [pc, #12]	; (10010718 <at_ble_pair_key_reply+0x78>)
1001070c:	47a0      	blx	r4
1001070e:	2000      	movs	r0, #0
10010710:	b005      	add	sp, #20
10010712:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010714:	100133ed 	.word	0x100133ed
10010718:	10011045 	.word	0x10011045

1001071c <at_ble_send_slave_sec_request>:
1001071c:	b570      	push	{r4, r5, r6, lr}
1001071e:	4b0c      	ldr	r3, [pc, #48]	; (10010750 <at_ble_send_slave_sec_request+0x34>)
10010720:	1c0e      	adds	r6, r1, #0
10010722:	2100      	movs	r1, #0
10010724:	1c05      	adds	r5, r0, #0
10010726:	1c14      	adds	r4, r2, #0
10010728:	4798      	blx	r3
1001072a:	2301      	movs	r3, #1
1001072c:	2807      	cmp	r0, #7
1001072e:	d80d      	bhi.n	1001074c <at_ble_send_slave_sec_request+0x30>
10010730:	3311      	adds	r3, #17
10010732:	4358      	muls	r0, r3
10010734:	4b07      	ldr	r3, [pc, #28]	; (10010754 <at_ble_send_slave_sec_request+0x38>)
10010736:	5cc2      	ldrb	r2, [r0, r3]
10010738:	23e0      	movs	r3, #224	; 0xe0
1001073a:	2a01      	cmp	r2, #1
1001073c:	d106      	bne.n	1001074c <at_ble_send_slave_sec_request+0x30>
1001073e:	00b1      	lsls	r1, r6, #2
10010740:	430c      	orrs	r4, r1
10010742:	4b05      	ldr	r3, [pc, #20]	; (10010758 <at_ble_send_slave_sec_request+0x3c>)
10010744:	b2e1      	uxtb	r1, r4
10010746:	1c28      	adds	r0, r5, #0
10010748:	4798      	blx	r3
1001074a:	2300      	movs	r3, #0
1001074c:	1c18      	adds	r0, r3, #0
1001074e:	bd70      	pop	{r4, r5, r6, pc}
10010750:	10010a59 	.word	0x10010a59
10010754:	10017582 	.word	0x10017582
10010758:	10011095 	.word	0x10011095

1001075c <at_ble_encryption_start>:
1001075c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001075e:	23cf      	movs	r3, #207	; 0xcf
10010760:	2900      	cmp	r1, #0
10010762:	d02b      	beq.n	100107bc <at_ble_encryption_start+0x60>
10010764:	2a05      	cmp	r2, #5
10010766:	d829      	bhi.n	100107bc <at_ble_encryption_start+0x60>
10010768:	2701      	movs	r7, #1
1001076a:	1c3d      	adds	r5, r7, #0
1001076c:	2433      	movs	r4, #51	; 0x33
1001076e:	4095      	lsls	r5, r2
10010770:	4225      	tst	r5, r4
10010772:	d023      	beq.n	100107bc <at_ble_encryption_start+0x60>
10010774:	7e8c      	ldrb	r4, [r1, #26]
10010776:	3c07      	subs	r4, #7
10010778:	2c09      	cmp	r4, #9
1001077a:	d81f      	bhi.n	100107bc <at_ble_encryption_start+0x60>
1001077c:	4b10      	ldr	r3, [pc, #64]	; (100107c0 <at_ble_encryption_start+0x64>)
1001077e:	1c0c      	adds	r4, r1, #0
10010780:	2100      	movs	r1, #0
10010782:	1c15      	adds	r5, r2, #0
10010784:	1c06      	adds	r6, r0, #0
10010786:	4798      	blx	r3
10010788:	1c3b      	adds	r3, r7, #0
1001078a:	2807      	cmp	r0, #7
1001078c:	d816      	bhi.n	100107bc <at_ble_encryption_start+0x60>
1001078e:	2312      	movs	r3, #18
10010790:	4358      	muls	r0, r3
10010792:	4b0c      	ldr	r3, [pc, #48]	; (100107c4 <at_ble_encryption_start+0x68>)
10010794:	5cc7      	ldrb	r7, [r0, r3]
10010796:	23e0      	movs	r3, #224	; 0xe0
10010798:	2f00      	cmp	r7, #0
1001079a:	d10f      	bne.n	100107bc <at_ble_encryption_start+0x60>
1001079c:	1c21      	adds	r1, r4, #0
1001079e:	221c      	movs	r2, #28
100107a0:	4b09      	ldr	r3, [pc, #36]	; (100107c8 <at_ble_encryption_start+0x6c>)
100107a2:	480a      	ldr	r0, [pc, #40]	; (100107cc <at_ble_encryption_start+0x70>)
100107a4:	4798      	blx	r3
100107a6:	1c23      	adds	r3, r4, #0
100107a8:	7ea1      	ldrb	r1, [r4, #26]
100107aa:	8a22      	ldrh	r2, [r4, #16]
100107ac:	3312      	adds	r3, #18
100107ae:	9100      	str	r1, [sp, #0]
100107b0:	9501      	str	r5, [sp, #4]
100107b2:	1c21      	adds	r1, r4, #0
100107b4:	1c30      	adds	r0, r6, #0
100107b6:	4c06      	ldr	r4, [pc, #24]	; (100107d0 <at_ble_encryption_start+0x74>)
100107b8:	47a0      	blx	r4
100107ba:	1c3b      	adds	r3, r7, #0
100107bc:	1c18      	adds	r0, r3, #0
100107be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100107c0:	10010a59 	.word	0x10010a59
100107c4:	10017582 	.word	0x10017582
100107c8:	100133db 	.word	0x100133db
100107cc:	10017690 	.word	0x10017690
100107d0:	100110d5 	.word	0x100110d5

100107d4 <at_ble_encryption_request_reply>:
100107d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100107d6:	24cf      	movs	r4, #207	; 0xcf
100107d8:	2b00      	cmp	r3, #0
100107da:	d011      	beq.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107dc:	2a00      	cmp	r2, #0
100107de:	d00a      	beq.n	100107f6 <at_ble_encryption_request_reply+0x22>
100107e0:	2905      	cmp	r1, #5
100107e2:	d80d      	bhi.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107e4:	2501      	movs	r5, #1
100107e6:	2633      	movs	r6, #51	; 0x33
100107e8:	408d      	lsls	r5, r1
100107ea:	4235      	tst	r5, r6
100107ec:	d008      	beq.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107ee:	7e9d      	ldrb	r5, [r3, #26]
100107f0:	3d07      	subs	r5, #7
100107f2:	2d09      	cmp	r5, #9
100107f4:	d804      	bhi.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107f6:	7e9c      	ldrb	r4, [r3, #26]
100107f8:	9400      	str	r4, [sp, #0]
100107fa:	4c02      	ldr	r4, [pc, #8]	; (10010804 <at_ble_encryption_request_reply+0x30>)
100107fc:	47a0      	blx	r4
100107fe:	2400      	movs	r4, #0
10010800:	1c20      	adds	r0, r4, #0
10010802:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010804:	10011191 	.word	0x10011191

10010808 <rx_callback>:
10010808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001080a:	88c5      	ldrh	r5, [r0, #6]
1001080c:	8807      	ldrh	r7, [r0, #0]
1001080e:	8886      	ldrh	r6, [r0, #4]
10010810:	2d00      	cmp	r5, #0
10010812:	d10c      	bne.n	1001082e <rx_callback+0x26>
10010814:	4b19      	ldr	r3, [pc, #100]	; (1001087c <rx_callback+0x74>)
10010816:	1c38      	adds	r0, r7, #0
10010818:	1c31      	adds	r1, r6, #0
1001081a:	1c2a      	adds	r2, r5, #0
1001081c:	4798      	blx	r3
1001081e:	1e03      	subs	r3, r0, #0
10010820:	d12a      	bne.n	10010878 <rx_callback+0x70>
10010822:	1c38      	adds	r0, r7, #0
10010824:	1c31      	adds	r1, r6, #0
10010826:	1c1a      	adds	r2, r3, #0
10010828:	4c15      	ldr	r4, [pc, #84]	; (10010880 <rx_callback+0x78>)
1001082a:	47a0      	blx	r4
1001082c:	e024      	b.n	10010878 <rx_callback+0x70>
1001082e:	2296      	movs	r2, #150	; 0x96
10010830:	4c14      	ldr	r4, [pc, #80]	; (10010884 <rx_callback+0x7c>)
10010832:	0092      	lsls	r2, r2, #2
10010834:	8823      	ldrh	r3, [r4, #0]
10010836:	195b      	adds	r3, r3, r5
10010838:	4293      	cmp	r3, r2
1001083a:	dd01      	ble.n	10010840 <rx_callback+0x38>
1001083c:	2300      	movs	r3, #0
1001083e:	8023      	strh	r3, [r4, #0]
10010840:	1c01      	adds	r1, r0, #0
10010842:	4a11      	ldr	r2, [pc, #68]	; (10010888 <rx_callback+0x80>)
10010844:	8823      	ldrh	r3, [r4, #0]
10010846:	3108      	adds	r1, #8
10010848:	189b      	adds	r3, r3, r2
1001084a:	9301      	str	r3, [sp, #4]
1001084c:	1c18      	adds	r0, r3, #0
1001084e:	1c2a      	adds	r2, r5, #0
10010850:	4b0e      	ldr	r3, [pc, #56]	; (1001088c <rx_callback+0x84>)
10010852:	4798      	blx	r3
10010854:	1c38      	adds	r0, r7, #0
10010856:	1c31      	adds	r1, r6, #0
10010858:	9a01      	ldr	r2, [sp, #4]
1001085a:	4b08      	ldr	r3, [pc, #32]	; (1001087c <rx_callback+0x74>)
1001085c:	4798      	blx	r3
1001085e:	2800      	cmp	r0, #0
10010860:	d10a      	bne.n	10010878 <rx_callback+0x70>
10010862:	4b09      	ldr	r3, [pc, #36]	; (10010888 <rx_callback+0x80>)
10010864:	8822      	ldrh	r2, [r4, #0]
10010866:	1c31      	adds	r1, r6, #0
10010868:	18d2      	adds	r2, r2, r3
1001086a:	1c38      	adds	r0, r7, #0
1001086c:	1c2b      	adds	r3, r5, #0
1001086e:	4e04      	ldr	r6, [pc, #16]	; (10010880 <rx_callback+0x78>)
10010870:	47b0      	blx	r6
10010872:	8823      	ldrh	r3, [r4, #0]
10010874:	18ed      	adds	r5, r5, r3
10010876:	8025      	strh	r5, [r4, #0]
10010878:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001087a:	46c0      	nop			; (mov r8, r8)
1001087c:	1000ef8d 	.word	0x1000ef8d
10010880:	1000ef21 	.word	0x1000ef21
10010884:	100176ec 	.word	0x100176ec
10010888:	10017af0 	.word	0x10017af0
1001088c:	100133db 	.word	0x100133db

10010890 <interface_send>:
10010890:	b508      	push	{r3, lr}
10010892:	4b02      	ldr	r3, [pc, #8]	; (1001089c <interface_send+0xc>)
10010894:	4798      	blx	r3
10010896:	2000      	movs	r0, #0
10010898:	bd08      	pop	{r3, pc}
1001089a:	46c0      	nop			; (mov r8, r8)
1001089c:	1000e4bd 	.word	0x1000e4bd

100108a0 <interface_init>:
100108a0:	2280      	movs	r2, #128	; 0x80
100108a2:	b510      	push	{r4, lr}
100108a4:	2100      	movs	r1, #0
100108a6:	4c08      	ldr	r4, [pc, #32]	; (100108c8 <interface_init+0x28>)
100108a8:	0092      	lsls	r2, r2, #2
100108aa:	4808      	ldr	r0, [pc, #32]	; (100108cc <interface_init+0x2c>)
100108ac:	47a0      	blx	r4
100108ae:	2296      	movs	r2, #150	; 0x96
100108b0:	2100      	movs	r1, #0
100108b2:	0092      	lsls	r2, r2, #2
100108b4:	4806      	ldr	r0, [pc, #24]	; (100108d0 <interface_init+0x30>)
100108b6:	47a0      	blx	r4
100108b8:	2200      	movs	r2, #0
100108ba:	4b06      	ldr	r3, [pc, #24]	; (100108d4 <interface_init+0x34>)
100108bc:	801a      	strh	r2, [r3, #0]
100108be:	4a06      	ldr	r2, [pc, #24]	; (100108d8 <interface_init+0x38>)
100108c0:	4b06      	ldr	r3, [pc, #24]	; (100108dc <interface_init+0x3c>)
100108c2:	601a      	str	r2, [r3, #0]
100108c4:	bd10      	pop	{r4, pc}
100108c6:	46c0      	nop			; (mov r8, r8)
100108c8:	100133ed 	.word	0x100133ed
100108cc:	100178f0 	.word	0x100178f0
100108d0:	10017af0 	.word	0x10017af0
100108d4:	100176ec 	.word	0x100176ec
100108d8:	100176f0 	.word	0x100176f0
100108dc:	1001615c 	.word	0x1001615c

100108e0 <platform_cmd_cmpl_signal>:
100108e0:	2201      	movs	r2, #1
100108e2:	4b01      	ldr	r3, [pc, #4]	; (100108e8 <platform_cmd_cmpl_signal+0x8>)
100108e4:	601a      	str	r2, [r3, #0]
100108e6:	4770      	bx	lr
100108e8:	1001687c 	.word	0x1001687c

100108ec <platform_cmd_cmpl_wait>:
100108ec:	b510      	push	{r4, lr}
100108ee:	1c04      	adds	r4, r0, #0
100108f0:	4b07      	ldr	r3, [pc, #28]	; (10010910 <platform_cmd_cmpl_wait+0x24>)
100108f2:	681a      	ldr	r2, [r3, #0]
100108f4:	2a01      	cmp	r2, #1
100108f6:	d003      	beq.n	10010900 <platform_cmd_cmpl_wait+0x14>
100108f8:	4b06      	ldr	r3, [pc, #24]	; (10010914 <platform_cmd_cmpl_wait+0x28>)
100108fa:	2000      	movs	r0, #0
100108fc:	4798      	blx	r3
100108fe:	e7f7      	b.n	100108f0 <platform_cmd_cmpl_wait+0x4>
10010900:	6819      	ldr	r1, [r3, #0]
10010902:	2901      	cmp	r1, #1
10010904:	d102      	bne.n	1001090c <platform_cmd_cmpl_wait+0x20>
10010906:	2200      	movs	r2, #0
10010908:	601a      	str	r2, [r3, #0]
1001090a:	e000      	b.n	1001090e <platform_cmd_cmpl_wait+0x22>
1001090c:	7022      	strb	r2, [r4, #0]
1001090e:	bd10      	pop	{r4, pc}
10010910:	1001687c 	.word	0x1001687c
10010914:	1000e991 	.word	0x1000e991

10010918 <start_timer>:
10010918:	4770      	bx	lr

1001091a <stop_timer>:
1001091a:	4770      	bx	lr

1001091c <dbg_le_set_bd_addr_req_handler>:
1001091c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001091e:	466b      	mov	r3, sp
10010920:	1dde      	adds	r6, r3, #7
10010922:	2300      	movs	r3, #0
10010924:	7033      	strb	r3, [r6, #0]
10010926:	230f      	movs	r3, #15
10010928:	4c13      	ldr	r4, [pc, #76]	; (10010978 <dbg_le_set_bd_addr_req_handler+0x5c>)
1001092a:	2703      	movs	r7, #3
1001092c:	7023      	strb	r3, [r4, #0]
1001092e:	2300      	movs	r3, #0
10010930:	70e3      	strb	r3, [r4, #3]
10010932:	4b12      	ldr	r3, [pc, #72]	; (1001097c <dbg_le_set_bd_addr_req_handler+0x60>)
10010934:	1c01      	adds	r1, r0, #0
10010936:	881a      	ldrh	r2, [r3, #0]
10010938:	881b      	ldrh	r3, [r3, #0]
1001093a:	7122      	strb	r2, [r4, #4]
1001093c:	0a1b      	lsrs	r3, r3, #8
1001093e:	2206      	movs	r2, #6
10010940:	7163      	strb	r3, [r4, #5]
10010942:	480f      	ldr	r0, [pc, #60]	; (10010980 <dbg_le_set_bd_addr_req_handler+0x64>)
10010944:	4b0f      	ldr	r3, [pc, #60]	; (10010984 <dbg_le_set_bd_addr_req_handler+0x68>)
10010946:	7067      	strb	r7, [r4, #1]
10010948:	70a7      	strb	r7, [r4, #2]
1001094a:	4798      	blx	r3
1001094c:	4d0e      	ldr	r5, [pc, #56]	; (10010988 <dbg_le_set_bd_addr_req_handler+0x6c>)
1001094e:	4b0f      	ldr	r3, [pc, #60]	; (1001098c <dbg_le_set_bd_addr_req_handler+0x70>)
10010950:	210e      	movs	r1, #14
10010952:	802b      	strh	r3, [r5, #0]
10010954:	2306      	movs	r3, #6
10010956:	71a3      	strb	r3, [r4, #6]
10010958:	2300      	movs	r3, #0
1001095a:	1c20      	adds	r0, r4, #0
1001095c:	71e3      	strb	r3, [r4, #7]
1001095e:	4b0c      	ldr	r3, [pc, #48]	; (10010990 <dbg_le_set_bd_addr_req_handler+0x74>)
10010960:	80af      	strh	r7, [r5, #4]
10010962:	4798      	blx	r3
10010964:	1c30      	adds	r0, r6, #0
10010966:	4b0b      	ldr	r3, [pc, #44]	; (10010994 <dbg_le_set_bd_addr_req_handler+0x78>)
10010968:	4798      	blx	r3
1001096a:	7833      	ldrb	r3, [r6, #0]
1001096c:	20e2      	movs	r0, #226	; 0xe2
1001096e:	2b00      	cmp	r3, #0
10010970:	d101      	bne.n	10010976 <dbg_le_set_bd_addr_req_handler+0x5a>
10010972:	68ab      	ldr	r3, [r5, #8]
10010974:	7818      	ldrb	r0, [r3, #0]
10010976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010978:	100178f0 	.word	0x100178f0
1001097c:	10017580 	.word	0x10017580
10010980:	100178f8 	.word	0x100178f8
10010984:	100133db 	.word	0x100133db
10010988:	10017574 	.word	0x10017574
1001098c:	00000329 	.word	0x00000329
10010990:	10010891 	.word	0x10010891
10010994:	100108ed 	.word	0x100108ed

10010998 <gapc_get_dev_info_cfm.constprop.1>:
10010998:	b538      	push	{r3, r4, r5, lr}
1001099a:	230b      	movs	r3, #11
1001099c:	4c27      	ldr	r4, [pc, #156]	; (10010a3c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1001099e:	7023      	strb	r3, [r4, #0]
100109a0:	3303      	adds	r3, #3
100109a2:	7063      	strb	r3, [r4, #1]
100109a4:	3329      	adds	r3, #41	; 0x29
100109a6:	70a3      	strb	r3, [r4, #2]
100109a8:	4b25      	ldr	r3, [pc, #148]	; (10010a40 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100109aa:	70e1      	strb	r1, [r4, #3]
100109ac:	881a      	ldrh	r2, [r3, #0]
100109ae:	881b      	ldrh	r3, [r3, #0]
100109b0:	7122      	strb	r2, [r4, #4]
100109b2:	0a1b      	lsrs	r3, r3, #8
100109b4:	7163      	strb	r3, [r4, #5]
100109b6:	2300      	movs	r3, #0
100109b8:	7220      	strb	r0, [r4, #8]
100109ba:	7263      	strb	r3, [r4, #9]
100109bc:	2801      	cmp	r0, #1
100109be:	d02b      	beq.n	10010a18 <gapc_get_dev_info_cfm.constprop.1+0x80>
100109c0:	4298      	cmp	r0, r3
100109c2:	d01b      	beq.n	100109fc <gapc_get_dev_info_cfm.constprop.1+0x64>
100109c4:	2802      	cmp	r0, #2
100109c6:	d12f      	bne.n	10010a28 <gapc_get_dev_info_cfm.constprop.1+0x90>
100109c8:	4b1e      	ldr	r3, [pc, #120]	; (10010a44 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100109ca:	2112      	movs	r1, #18
100109cc:	1c1a      	adds	r2, r3, #0
100109ce:	32ce      	adds	r2, #206	; 0xce
100109d0:	8812      	ldrh	r2, [r2, #0]
100109d2:	72a2      	strb	r2, [r4, #10]
100109d4:	0a12      	lsrs	r2, r2, #8
100109d6:	72e2      	strb	r2, [r4, #11]
100109d8:	1c1a      	adds	r2, r3, #0
100109da:	32d0      	adds	r2, #208	; 0xd0
100109dc:	8812      	ldrh	r2, [r2, #0]
100109de:	7322      	strb	r2, [r4, #12]
100109e0:	0a12      	lsrs	r2, r2, #8
100109e2:	7362      	strb	r2, [r4, #13]
100109e4:	1c1a      	adds	r2, r3, #0
100109e6:	32d2      	adds	r2, #210	; 0xd2
100109e8:	8812      	ldrh	r2, [r2, #0]
100109ea:	33d4      	adds	r3, #212	; 0xd4
100109ec:	73a2      	strb	r2, [r4, #14]
100109ee:	0a12      	lsrs	r2, r2, #8
100109f0:	73e2      	strb	r2, [r4, #15]
100109f2:	881b      	ldrh	r3, [r3, #0]
100109f4:	7423      	strb	r3, [r4, #16]
100109f6:	0a1b      	lsrs	r3, r3, #8
100109f8:	7463      	strb	r3, [r4, #17]
100109fa:	e016      	b.n	10010a2a <gapc_get_dev_info_cfm.constprop.1+0x92>
100109fc:	4b11      	ldr	r3, [pc, #68]	; (10010a44 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100109fe:	4912      	ldr	r1, [pc, #72]	; (10010a48 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010a00:	33aa      	adds	r3, #170	; 0xaa
10010a02:	881d      	ldrh	r5, [r3, #0]
10010a04:	4811      	ldr	r0, [pc, #68]	; (10010a4c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10010a06:	0a2b      	lsrs	r3, r5, #8
10010a08:	72a5      	strb	r5, [r4, #10]
10010a0a:	72e3      	strb	r3, [r4, #11]
10010a0c:	1c2a      	adds	r2, r5, #0
10010a0e:	4b10      	ldr	r3, [pc, #64]	; (10010a50 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010a10:	350c      	adds	r5, #12
10010a12:	4798      	blx	r3
10010a14:	b2a9      	uxth	r1, r5
10010a16:	e008      	b.n	10010a2a <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a18:	4b0a      	ldr	r3, [pc, #40]	; (10010a44 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010a1a:	210c      	movs	r1, #12
10010a1c:	33cc      	adds	r3, #204	; 0xcc
10010a1e:	881b      	ldrh	r3, [r3, #0]
10010a20:	72a3      	strb	r3, [r4, #10]
10010a22:	0a1b      	lsrs	r3, r3, #8
10010a24:	72e3      	strb	r3, [r4, #11]
10010a26:	e000      	b.n	10010a2a <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a28:	210a      	movs	r1, #10
10010a2a:	1c0b      	adds	r3, r1, #0
10010a2c:	3b08      	subs	r3, #8
10010a2e:	71a3      	strb	r3, [r4, #6]
10010a30:	121b      	asrs	r3, r3, #8
10010a32:	71e3      	strb	r3, [r4, #7]
10010a34:	1c20      	adds	r0, r4, #0
10010a36:	4b07      	ldr	r3, [pc, #28]	; (10010a54 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010a38:	4798      	blx	r3
10010a3a:	bd38      	pop	{r3, r4, r5, pc}
10010a3c:	100178f0 	.word	0x100178f0
10010a40:	10017580 	.word	0x10017580
10010a44:	10017612 	.word	0x10017612
10010a48:	100176be 	.word	0x100176be
10010a4c:	100178fc 	.word	0x100178fc
10010a50:	100133db 	.word	0x100133db
10010a54:	10010891 	.word	0x10010891

10010a58 <check_ConnData_idx_role>:
10010a58:	4b0c      	ldr	r3, [pc, #48]	; (10010a8c <check_ConnData_idx_role+0x34>)
10010a5a:	b570      	push	{r4, r5, r6, lr}
10010a5c:	1c04      	adds	r4, r0, #0
10010a5e:	2008      	movs	r0, #8
10010a60:	429c      	cmp	r4, r3
10010a62:	d011      	beq.n	10010a88 <check_ConnData_idx_role+0x30>
10010a64:	2300      	movs	r3, #0
10010a66:	2212      	movs	r2, #18
10010a68:	435a      	muls	r2, r3
10010a6a:	4d09      	ldr	r5, [pc, #36]	; (10010a90 <check_ConnData_idx_role+0x38>)
10010a6c:	b2d8      	uxtb	r0, r3
10010a6e:	1956      	adds	r6, r2, r5
10010a70:	8976      	ldrh	r6, [r6, #10]
10010a72:	42a6      	cmp	r6, r4
10010a74:	d104      	bne.n	10010a80 <check_ConnData_idx_role+0x28>
10010a76:	2900      	cmp	r1, #0
10010a78:	d006      	beq.n	10010a88 <check_ConnData_idx_role+0x30>
10010a7a:	5d53      	ldrb	r3, [r2, r5]
10010a7c:	700b      	strb	r3, [r1, #0]
10010a7e:	e003      	b.n	10010a88 <check_ConnData_idx_role+0x30>
10010a80:	3301      	adds	r3, #1
10010a82:	2b08      	cmp	r3, #8
10010a84:	d1ef      	bne.n	10010a66 <check_ConnData_idx_role+0xe>
10010a86:	1c18      	adds	r0, r3, #0
10010a88:	bd70      	pop	{r4, r5, r6, pc}
10010a8a:	46c0      	nop			; (mov r8, r8)
10010a8c:	0000ffff 	.word	0x0000ffff
10010a90:	10017582 	.word	0x10017582

10010a94 <check_ConnData_emptyEntry>:
10010a94:	2300      	movs	r3, #0
10010a96:	2212      	movs	r2, #18
10010a98:	435a      	muls	r2, r3
10010a9a:	4906      	ldr	r1, [pc, #24]	; (10010ab4 <check_ConnData_emptyEntry+0x20>)
10010a9c:	b2d8      	uxtb	r0, r3
10010a9e:	1852      	adds	r2, r2, r1
10010aa0:	8951      	ldrh	r1, [r2, #10]
10010aa2:	4a05      	ldr	r2, [pc, #20]	; (10010ab8 <check_ConnData_emptyEntry+0x24>)
10010aa4:	4291      	cmp	r1, r2
10010aa6:	d003      	beq.n	10010ab0 <check_ConnData_emptyEntry+0x1c>
10010aa8:	3301      	adds	r3, #1
10010aaa:	2b08      	cmp	r3, #8
10010aac:	d1f3      	bne.n	10010a96 <check_ConnData_emptyEntry+0x2>
10010aae:	1c18      	adds	r0, r3, #0
10010ab0:	4770      	bx	lr
10010ab2:	46c0      	nop			; (mov r8, r8)
10010ab4:	10017582 	.word	0x10017582
10010ab8:	0000ffff 	.word	0x0000ffff

10010abc <gapc_cmp_evt>:
10010abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010abe:	780b      	ldrb	r3, [r1, #0]
10010ac0:	1c05      	adds	r5, r0, #0
10010ac2:	1e58      	subs	r0, r3, #1
10010ac4:	784e      	ldrb	r6, [r1, #1]
10010ac6:	280f      	cmp	r0, #15
10010ac8:	d85a      	bhi.n	10010b80 <gapc_cmp_evt+0xc4>
10010aca:	1c14      	adds	r4, r2, #0
10010acc:	f001 fba4 	bl	10012218 <__gnu_thumb1_case_uqi>
10010ad0:	5858440a 	.word	0x5858440a
10010ad4:	4b584444 	.word	0x4b584444
10010ad8:	0825122d 	.word	0x0825122d
10010adc:	3e395858 	.word	0x3e395858
10010ae0:	203b      	movs	r0, #59	; 0x3b
10010ae2:	e04e      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010ae4:	203b      	movs	r0, #59	; 0x3b
10010ae6:	2e00      	cmp	r6, #0
10010ae8:	d04b      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010aea:	0a2d      	lsrs	r5, r5, #8
10010aec:	8015      	strh	r5, [r2, #0]
10010aee:	7096      	strb	r6, [r2, #2]
10010af0:	3835      	subs	r0, #53	; 0x35
10010af2:	e046      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010af4:	466b      	mov	r3, sp
10010af6:	1ddf      	adds	r7, r3, #7
10010af8:	2301      	movs	r3, #1
10010afa:	0a2d      	lsrs	r5, r5, #8
10010afc:	703b      	strb	r3, [r7, #0]
10010afe:	1c28      	adds	r0, r5, #0
10010b00:	1c39      	adds	r1, r7, #0
10010b02:	4b20      	ldr	r3, [pc, #128]	; (10010b84 <gapc_cmp_evt+0xc8>)
10010b04:	4798      	blx	r3
10010b06:	2807      	cmp	r0, #7
10010b08:	d803      	bhi.n	10010b12 <gapc_cmp_evt+0x56>
10010b0a:	783b      	ldrb	r3, [r7, #0]
10010b0c:	203b      	movs	r0, #59	; 0x3b
10010b0e:	2b00      	cmp	r3, #0
10010b10:	d037      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b12:	8065      	strh	r5, [r4, #2]
10010b14:	7126      	strb	r6, [r4, #4]
10010b16:	2009      	movs	r0, #9
10010b18:	e033      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010b1a:	203b      	movs	r0, #59	; 0x3b
10010b1c:	2e00      	cmp	r6, #0
10010b1e:	d030      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b20:	0a2d      	lsrs	r5, r5, #8
10010b22:	8015      	strh	r5, [r2, #0]
10010b24:	7096      	strb	r6, [r2, #2]
10010b26:	382d      	subs	r0, #45	; 0x2d
10010b28:	e02b      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010b2a:	203b      	movs	r0, #59	; 0x3b
10010b2c:	2e00      	cmp	r6, #0
10010b2e:	d028      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b30:	2300      	movs	r3, #0
10010b32:	0a2d      	lsrs	r5, r5, #8
10010b34:	8015      	strh	r5, [r2, #0]
10010b36:	7096      	strb	r6, [r2, #2]
10010b38:	8093      	strh	r3, [r2, #4]
10010b3a:	80d3      	strh	r3, [r2, #6]
10010b3c:	8113      	strh	r3, [r2, #8]
10010b3e:	3834      	subs	r0, #52	; 0x34
10010b40:	e01f      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010b42:	203b      	movs	r0, #59	; 0x3b
10010b44:	2e00      	cmp	r6, #0
10010b46:	d01c      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b48:	7216      	strb	r6, [r2, #8]
10010b4a:	e003      	b.n	10010b54 <gapc_cmp_evt+0x98>
10010b4c:	203b      	movs	r0, #59	; 0x3b
10010b4e:	2e00      	cmp	r6, #0
10010b50:	d017      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b52:	7116      	strb	r6, [r2, #4]
10010b54:	3812      	subs	r0, #18
10010b56:	e014      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010b58:	203b      	movs	r0, #59	; 0x3b
10010b5a:	2e00      	cmp	r6, #0
10010b5c:	d011      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b5e:	7093      	strb	r3, [r2, #2]
10010b60:	70d6      	strb	r6, [r2, #3]
10010b62:	382a      	subs	r0, #42	; 0x2a
10010b64:	e00d      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010b66:	203b      	movs	r0, #59	; 0x3b
10010b68:	2e00      	cmp	r6, #0
10010b6a:	d00a      	beq.n	10010b82 <gapc_cmp_evt+0xc6>
10010b6c:	0a2d      	lsrs	r5, r5, #8
10010b6e:	7016      	strb	r6, [r2, #0]
10010b70:	8055      	strh	r5, [r2, #2]
10010b72:	1d10      	adds	r0, r2, #4
10010b74:	2100      	movs	r1, #0
10010b76:	2205      	movs	r2, #5
10010b78:	4b03      	ldr	r3, [pc, #12]	; (10010b88 <gapc_cmp_evt+0xcc>)
10010b7a:	4798      	blx	r3
10010b7c:	2012      	movs	r0, #18
10010b7e:	e000      	b.n	10010b82 <gapc_cmp_evt+0xc6>
10010b80:	2000      	movs	r0, #0
10010b82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010b84:	10010a59 	.word	0x10010a59
10010b88:	100133ed 	.word	0x100133ed

10010b8c <gapc_connection_cfm_handler>:
10010b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b8e:	b085      	sub	sp, #20
10010b90:	1c1d      	adds	r5, r3, #0
10010b92:	ab0a      	add	r3, sp, #40	; 0x28
10010b94:	781b      	ldrb	r3, [r3, #0]
10010b96:	9201      	str	r2, [sp, #4]
10010b98:	9302      	str	r3, [sp, #8]
10010b9a:	ab0b      	add	r3, sp, #44	; 0x2c
10010b9c:	781b      	ldrb	r3, [r3, #0]
10010b9e:	1c07      	adds	r7, r0, #0
10010ba0:	9303      	str	r3, [sp, #12]
10010ba2:	ab0c      	add	r3, sp, #48	; 0x30
10010ba4:	881a      	ldrh	r2, [r3, #0]
10010ba6:	2302      	movs	r3, #2
10010ba8:	1c0e      	adds	r6, r1, #0
10010baa:	4c23      	ldr	r4, [pc, #140]	; (10010c38 <gapc_connection_cfm_handler+0xac>)
10010bac:	1c39      	adds	r1, r7, #0
10010bae:	7023      	strb	r3, [r4, #0]
10010bb0:	330c      	adds	r3, #12
10010bb2:	7063      	strb	r3, [r4, #1]
10010bb4:	70a3      	strb	r3, [r4, #2]
10010bb6:	4b21      	ldr	r3, [pc, #132]	; (10010c3c <gapc_connection_cfm_handler+0xb0>)
10010bb8:	70e2      	strb	r2, [r4, #3]
10010bba:	881a      	ldrh	r2, [r3, #0]
10010bbc:	881b      	ldrh	r3, [r3, #0]
10010bbe:	7122      	strb	r2, [r4, #4]
10010bc0:	0a1b      	lsrs	r3, r3, #8
10010bc2:	4f1f      	ldr	r7, [pc, #124]	; (10010c40 <gapc_connection_cfm_handler+0xb4>)
10010bc4:	2210      	movs	r2, #16
10010bc6:	481f      	ldr	r0, [pc, #124]	; (10010c44 <gapc_connection_cfm_handler+0xb8>)
10010bc8:	7163      	strb	r3, [r4, #5]
10010bca:	47b8      	blx	r7
10010bcc:	0a33      	lsrs	r3, r6, #8
10010bce:	7626      	strb	r6, [r4, #24]
10010bd0:	7663      	strb	r3, [r4, #25]
10010bd2:	9901      	ldr	r1, [sp, #4]
10010bd4:	0c33      	lsrs	r3, r6, #16
10010bd6:	2210      	movs	r2, #16
10010bd8:	0e36      	lsrs	r6, r6, #24
10010bda:	481b      	ldr	r0, [pc, #108]	; (10010c48 <gapc_connection_cfm_handler+0xbc>)
10010bdc:	76a3      	strb	r3, [r4, #26]
10010bde:	76e6      	strb	r6, [r4, #27]
10010be0:	47b8      	blx	r7
10010be2:	1c23      	adds	r3, r4, #0
10010be4:	332c      	adds	r3, #44	; 0x2c
10010be6:	701d      	strb	r5, [r3, #0]
10010be8:	1c23      	adds	r3, r4, #0
10010bea:	0a2a      	lsrs	r2, r5, #8
10010bec:	332d      	adds	r3, #45	; 0x2d
10010bee:	701a      	strb	r2, [r3, #0]
10010bf0:	1c23      	adds	r3, r4, #0
10010bf2:	0c2a      	lsrs	r2, r5, #16
10010bf4:	332e      	adds	r3, #46	; 0x2e
10010bf6:	701a      	strb	r2, [r3, #0]
10010bf8:	1c23      	adds	r3, r4, #0
10010bfa:	0e2d      	lsrs	r5, r5, #24
10010bfc:	332f      	adds	r3, #47	; 0x2f
10010bfe:	466a      	mov	r2, sp
10010c00:	701d      	strb	r5, [r3, #0]
10010c02:	1c23      	adds	r3, r4, #0
10010c04:	7a12      	ldrb	r2, [r2, #8]
10010c06:	3330      	adds	r3, #48	; 0x30
10010c08:	701a      	strb	r2, [r3, #0]
10010c0a:	1c23      	adds	r3, r4, #0
10010c0c:	2500      	movs	r5, #0
10010c0e:	3331      	adds	r3, #49	; 0x31
10010c10:	466a      	mov	r2, sp
10010c12:	701d      	strb	r5, [r3, #0]
10010c14:	1c23      	adds	r3, r4, #0
10010c16:	7b12      	ldrb	r2, [r2, #12]
10010c18:	3332      	adds	r3, #50	; 0x32
10010c1a:	701a      	strb	r2, [r3, #0]
10010c1c:	1c23      	adds	r3, r4, #0
10010c1e:	3333      	adds	r3, #51	; 0x33
10010c20:	701d      	strb	r5, [r3, #0]
10010c22:	232c      	movs	r3, #44	; 0x2c
10010c24:	1c20      	adds	r0, r4, #0
10010c26:	71a3      	strb	r3, [r4, #6]
10010c28:	2134      	movs	r1, #52	; 0x34
10010c2a:	4b08      	ldr	r3, [pc, #32]	; (10010c4c <gapc_connection_cfm_handler+0xc0>)
10010c2c:	71e5      	strb	r5, [r4, #7]
10010c2e:	4798      	blx	r3
10010c30:	1c28      	adds	r0, r5, #0
10010c32:	b005      	add	sp, #20
10010c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c36:	46c0      	nop			; (mov r8, r8)
10010c38:	100178f0 	.word	0x100178f0
10010c3c:	10017580 	.word	0x10017580
10010c40:	100133db 	.word	0x100133db
10010c44:	100178f8 	.word	0x100178f8
10010c48:	1001790c 	.word	0x1001790c
10010c4c:	10010891 	.word	0x10010891

10010c50 <gapc_con_req_ind>:
10010c50:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c52:	7845      	ldrb	r5, [r0, #1]
10010c54:	7803      	ldrb	r3, [r0, #0]
10010c56:	4c30      	ldr	r4, [pc, #192]	; (10010d18 <gapc_con_req_ind+0xc8>)
10010c58:	022d      	lsls	r5, r5, #8
10010c5a:	431d      	orrs	r5, r3
10010c5c:	85a5      	strh	r5, [r4, #44]	; 0x2c
10010c5e:	78c3      	ldrb	r3, [r0, #3]
10010c60:	7882      	ldrb	r2, [r0, #2]
10010c62:	b08b      	sub	sp, #44	; 0x2c
10010c64:	021b      	lsls	r3, r3, #8
10010c66:	431a      	orrs	r2, r3
10010c68:	466b      	mov	r3, sp
10010c6a:	9205      	str	r2, [sp, #20]
10010c6c:	8a9b      	ldrh	r3, [r3, #20]
10010c6e:	2120      	movs	r1, #32
10010c70:	85e3      	strh	r3, [r4, #46]	; 0x2e
10010c72:	7943      	ldrb	r3, [r0, #5]
10010c74:	7902      	ldrb	r2, [r0, #4]
10010c76:	021b      	lsls	r3, r3, #8
10010c78:	431a      	orrs	r2, r3
10010c7a:	466b      	mov	r3, sp
10010c7c:	9206      	str	r2, [sp, #24]
10010c7e:	8b1b      	ldrh	r3, [r3, #24]
10010c80:	1c06      	adds	r6, r0, #0
10010c82:	8623      	strh	r3, [r4, #48]	; 0x30
10010c84:	79c3      	ldrb	r3, [r0, #7]
10010c86:	7982      	ldrb	r2, [r0, #6]
10010c88:	021b      	lsls	r3, r3, #8
10010c8a:	431a      	orrs	r2, r3
10010c8c:	466b      	mov	r3, sp
10010c8e:	9207      	str	r2, [sp, #28]
10010c90:	466a      	mov	r2, sp
10010c92:	8b9b      	ldrh	r3, [r3, #28]
10010c94:	1852      	adds	r2, r2, r1
10010c96:	8663      	strh	r3, [r4, #50]	; 0x32
10010c98:	7a43      	ldrb	r3, [r0, #9]
10010c9a:	1c01      	adds	r1, r0, #0
10010c9c:	9308      	str	r3, [sp, #32]
10010c9e:	1c23      	adds	r3, r4, #0
10010ca0:	7812      	ldrb	r2, [r2, #0]
10010ca2:	3377      	adds	r3, #119	; 0x77
10010ca4:	3478      	adds	r4, #120	; 0x78
10010ca6:	701a      	strb	r2, [r3, #0]
10010ca8:	310a      	adds	r1, #10
10010caa:	2206      	movs	r2, #6
10010cac:	4b1b      	ldr	r3, [pc, #108]	; (10010d1c <gapc_con_req_ind+0xcc>)
10010cae:	1c20      	adds	r0, r4, #0
10010cb0:	4798      	blx	r3
10010cb2:	7c33      	ldrb	r3, [r6, #16]
10010cb4:	9309      	str	r3, [sp, #36]	; 0x24
10010cb6:	4b1a      	ldr	r3, [pc, #104]	; (10010d20 <gapc_con_req_ind+0xd0>)
10010cb8:	4798      	blx	r3
10010cba:	4e1a      	ldr	r6, [pc, #104]	; (10010d24 <gapc_con_req_ind+0xd4>)
10010cbc:	1e07      	subs	r7, r0, #0
10010cbe:	2f07      	cmp	r7, #7
10010cc0:	d81b      	bhi.n	10010cfa <gapc_con_req_ind+0xaa>
10010cc2:	2312      	movs	r3, #18
10010cc4:	4343      	muls	r3, r0
10010cc6:	18f0      	adds	r0, r6, r3
10010cc8:	8145      	strh	r5, [r0, #10]
10010cca:	4669      	mov	r1, sp
10010ccc:	2524      	movs	r5, #36	; 0x24
10010cce:	1949      	adds	r1, r1, r5
10010cd0:	7809      	ldrb	r1, [r1, #0]
10010cd2:	2206      	movs	r2, #6
10010cd4:	54f1      	strb	r1, [r6, r3]
10010cd6:	2120      	movs	r1, #32
10010cd8:	466b      	mov	r3, sp
10010cda:	185b      	adds	r3, r3, r1
10010cdc:	781b      	ldrb	r3, [r3, #0]
10010cde:	1c21      	adds	r1, r4, #0
10010ce0:	7043      	strb	r3, [r0, #1]
10010ce2:	466b      	mov	r3, sp
10010ce4:	8a9b      	ldrh	r3, [r3, #20]
10010ce6:	3002      	adds	r0, #2
10010ce8:	8143      	strh	r3, [r0, #10]
10010cea:	466b      	mov	r3, sp
10010cec:	8b1b      	ldrh	r3, [r3, #24]
10010cee:	8183      	strh	r3, [r0, #12]
10010cf0:	466b      	mov	r3, sp
10010cf2:	8b9b      	ldrh	r3, [r3, #28]
10010cf4:	81c3      	strh	r3, [r0, #14]
10010cf6:	4b09      	ldr	r3, [pc, #36]	; (10010d1c <gapc_con_req_ind+0xcc>)
10010cf8:	4798      	blx	r3
10010cfa:	2112      	movs	r1, #18
10010cfc:	2300      	movs	r3, #0
10010cfe:	434f      	muls	r7, r1
10010d00:	9300      	str	r3, [sp, #0]
10010d02:	9301      	str	r3, [sp, #4]
10010d04:	19f6      	adds	r6, r6, r7
10010d06:	8971      	ldrh	r1, [r6, #10]
10010d08:	4a07      	ldr	r2, [pc, #28]	; (10010d28 <gapc_con_req_ind+0xd8>)
10010d0a:	9102      	str	r1, [sp, #8]
10010d0c:	1c10      	adds	r0, r2, #0
10010d0e:	1c19      	adds	r1, r3, #0
10010d10:	4c06      	ldr	r4, [pc, #24]	; (10010d2c <gapc_con_req_ind+0xdc>)
10010d12:	47a0      	blx	r4
10010d14:	b00b      	add	sp, #44	; 0x2c
10010d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d18:	10017612 	.word	0x10017612
10010d1c:	100133db 	.word	0x100133db
10010d20:	10010a95 	.word	0x10010a95
10010d24:	10017582 	.word	0x10017582
10010d28:	100168e6 	.word	0x100168e6
10010d2c:	10010b8d 	.word	0x10010b8d

10010d30 <gapc_disconnect_cmd_handler>:
10010d30:	2204      	movs	r2, #4
10010d32:	b510      	push	{r4, lr}
10010d34:	4b0c      	ldr	r3, [pc, #48]	; (10010d68 <gapc_disconnect_cmd_handler+0x38>)
10010d36:	2400      	movs	r4, #0
10010d38:	701a      	strb	r2, [r3, #0]
10010d3a:	320a      	adds	r2, #10
10010d3c:	705a      	strb	r2, [r3, #1]
10010d3e:	709a      	strb	r2, [r3, #2]
10010d40:	4a0a      	ldr	r2, [pc, #40]	; (10010d6c <gapc_disconnect_cmd_handler+0x3c>)
10010d42:	70d9      	strb	r1, [r3, #3]
10010d44:	8811      	ldrh	r1, [r2, #0]
10010d46:	8812      	ldrh	r2, [r2, #0]
10010d48:	7119      	strb	r1, [r3, #4]
10010d4a:	0a12      	lsrs	r2, r2, #8
10010d4c:	715a      	strb	r2, [r3, #5]
10010d4e:	2201      	movs	r2, #1
10010d50:	721a      	strb	r2, [r3, #8]
10010d52:	1892      	adds	r2, r2, r2
10010d54:	7258      	strb	r0, [r3, #9]
10010d56:	719a      	strb	r2, [r3, #6]
10010d58:	71dc      	strb	r4, [r3, #7]
10010d5a:	1c18      	adds	r0, r3, #0
10010d5c:	210a      	movs	r1, #10
10010d5e:	4b04      	ldr	r3, [pc, #16]	; (10010d70 <gapc_disconnect_cmd_handler+0x40>)
10010d60:	4798      	blx	r3
10010d62:	1c20      	adds	r0, r4, #0
10010d64:	bd10      	pop	{r4, pc}
10010d66:	46c0      	nop			; (mov r8, r8)
10010d68:	100178f0 	.word	0x100178f0
10010d6c:	10017580 	.word	0x10017580
10010d70:	10010891 	.word	0x10010891

10010d74 <gapc_disconnect_ind>:
10010d74:	1c02      	adds	r2, r0, #0
10010d76:	b508      	push	{r3, lr}
10010d78:	7843      	ldrb	r3, [r0, #1]
10010d7a:	7800      	ldrb	r0, [r0, #0]
10010d7c:	021b      	lsls	r3, r3, #8
10010d7e:	4318      	orrs	r0, r3
10010d80:	8008      	strh	r0, [r1, #0]
10010d82:	7893      	ldrb	r3, [r2, #2]
10010d84:	708b      	strb	r3, [r1, #2]
10010d86:	2100      	movs	r1, #0
10010d88:	4b05      	ldr	r3, [pc, #20]	; (10010da0 <gapc_disconnect_ind+0x2c>)
10010d8a:	4798      	blx	r3
10010d8c:	2807      	cmp	r0, #7
10010d8e:	d806      	bhi.n	10010d9e <gapc_disconnect_ind+0x2a>
10010d90:	2312      	movs	r3, #18
10010d92:	4358      	muls	r0, r3
10010d94:	4b03      	ldr	r3, [pc, #12]	; (10010da4 <gapc_disconnect_ind+0x30>)
10010d96:	1818      	adds	r0, r3, r0
10010d98:	2301      	movs	r3, #1
10010d9a:	425b      	negs	r3, r3
10010d9c:	8143      	strh	r3, [r0, #10]
10010d9e:	bd08      	pop	{r3, pc}
10010da0:	10010a59 	.word	0x10010a59
10010da4:	10017582 	.word	0x10017582

10010da8 <gapc_bond_cmd_handler>:
10010da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010daa:	9300      	str	r3, [sp, #0]
10010dac:	2312      	movs	r3, #18
10010dae:	1c04      	adds	r4, r0, #0
10010db0:	a808      	add	r0, sp, #32
10010db2:	7807      	ldrb	r7, [r0, #0]
10010db4:	a809      	add	r0, sp, #36	; 0x24
10010db6:	7806      	ldrb	r6, [r0, #0]
10010db8:	a80a      	add	r0, sp, #40	; 0x28
10010dba:	7805      	ldrb	r5, [r0, #0]
10010dbc:	a80b      	add	r0, sp, #44	; 0x2c
10010dbe:	7800      	ldrb	r0, [r0, #0]
10010dc0:	9001      	str	r0, [sp, #4]
10010dc2:	4810      	ldr	r0, [pc, #64]	; (10010e04 <gapc_bond_cmd_handler+0x5c>)
10010dc4:	7003      	strb	r3, [r0, #0]
10010dc6:	230e      	movs	r3, #14
10010dc8:	70c4      	strb	r4, [r0, #3]
10010dca:	4c0f      	ldr	r4, [pc, #60]	; (10010e08 <gapc_bond_cmd_handler+0x60>)
10010dcc:	7043      	strb	r3, [r0, #1]
10010dce:	7083      	strb	r3, [r0, #2]
10010dd0:	8823      	ldrh	r3, [r4, #0]
10010dd2:	8824      	ldrh	r4, [r4, #0]
10010dd4:	7103      	strb	r3, [r0, #4]
10010dd6:	466b      	mov	r3, sp
10010dd8:	781b      	ldrb	r3, [r3, #0]
10010dda:	0a24      	lsrs	r4, r4, #8
10010ddc:	72c3      	strb	r3, [r0, #11]
10010dde:	466b      	mov	r3, sp
10010de0:	791b      	ldrb	r3, [r3, #4]
10010de2:	7144      	strb	r4, [r0, #5]
10010de4:	73c3      	strb	r3, [r0, #15]
10010de6:	2308      	movs	r3, #8
10010de8:	7183      	strb	r3, [r0, #6]
10010dea:	2300      	movs	r3, #0
10010dec:	240a      	movs	r4, #10
10010dee:	7241      	strb	r1, [r0, #9]
10010df0:	71c3      	strb	r3, [r0, #7]
10010df2:	2110      	movs	r1, #16
10010df4:	4b05      	ldr	r3, [pc, #20]	; (10010e0c <gapc_bond_cmd_handler+0x64>)
10010df6:	7307      	strb	r7, [r0, #12]
10010df8:	7346      	strb	r6, [r0, #13]
10010dfa:	7385      	strb	r5, [r0, #14]
10010dfc:	7204      	strb	r4, [r0, #8]
10010dfe:	7282      	strb	r2, [r0, #10]
10010e00:	4798      	blx	r3
10010e02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010e04:	100178f0 	.word	0x100178f0
10010e08:	10017580 	.word	0x10017580
10010e0c:	10010891 	.word	0x10010891

10010e10 <gapc_bond_ind>:
10010e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010e12:	780e      	ldrb	r6, [r1, #0]
10010e14:	1c03      	adds	r3, r0, #0
10010e16:	1eb0      	subs	r0, r6, #2
10010e18:	2805      	cmp	r0, #5
10010e1a:	d85d      	bhi.n	10010ed8 <gapc_bond_ind+0xc8>
10010e1c:	1c15      	adds	r5, r2, #0
10010e1e:	1c0c      	adds	r4, r1, #0
10010e20:	f001 f9fa 	bl	10012218 <__gnu_thumb1_case_uqi>
10010e24:	2f5a030d 	.word	0x2f5a030d
10010e28:	4740      	.short	0x4740
10010e2a:	2009      	movs	r0, #9
10010e2c:	2a00      	cmp	r2, #0
10010e2e:	d054      	beq.n	10010eda <gapc_bond_ind+0xca>
10010e30:	0a1b      	lsrs	r3, r3, #8
10010e32:	8053      	strh	r3, [r2, #2]
10010e34:	788b      	ldrb	r3, [r1, #2]
10010e36:	4829      	ldr	r0, [pc, #164]	; (10010edc <gapc_bond_ind+0xcc>)
10010e38:	7113      	strb	r3, [r2, #4]
10010e3a:	2100      	movs	r1, #0
10010e3c:	e01c      	b.n	10010e78 <gapc_bond_ind+0x68>
10010e3e:	2009      	movs	r0, #9
10010e40:	2a00      	cmp	r2, #0
10010e42:	d04a      	beq.n	10010eda <gapc_bond_ind+0xca>
10010e44:	4c25      	ldr	r4, [pc, #148]	; (10010edc <gapc_bond_ind+0xcc>)
10010e46:	0a1b      	lsrs	r3, r3, #8
10010e48:	8053      	strh	r3, [r2, #2]
10010e4a:	788b      	ldrb	r3, [r1, #2]
10010e4c:	2700      	movs	r7, #0
10010e4e:	1c10      	adds	r0, r2, #0
10010e50:	1c21      	adds	r1, r4, #0
10010e52:	7013      	strb	r3, [r2, #0]
10010e54:	4e22      	ldr	r6, [pc, #136]	; (10010ee0 <gapc_bond_ind+0xd0>)
10010e56:	7117      	strb	r7, [r2, #4]
10010e58:	312e      	adds	r1, #46	; 0x2e
10010e5a:	2217      	movs	r2, #23
10010e5c:	3032      	adds	r0, #50	; 0x32
10010e5e:	47b0      	blx	r6
10010e60:	1c28      	adds	r0, r5, #0
10010e62:	1c21      	adds	r1, r4, #0
10010e64:	2210      	movs	r2, #16
10010e66:	311e      	adds	r1, #30
10010e68:	3022      	adds	r0, #34	; 0x22
10010e6a:	47b0      	blx	r6
10010e6c:	1ca1      	adds	r1, r4, #2
10010e6e:	1da8      	adds	r0, r5, #6
10010e70:	221c      	movs	r2, #28
10010e72:	47b0      	blx	r6
10010e74:	1c20      	adds	r0, r4, #0
10010e76:	1c39      	adds	r1, r7, #0
10010e78:	2246      	movs	r2, #70	; 0x46
10010e7a:	4b1a      	ldr	r3, [pc, #104]	; (10010ee4 <gapc_bond_ind+0xd4>)
10010e7c:	4798      	blx	r3
10010e7e:	2009      	movs	r0, #9
10010e80:	e02b      	b.n	10010eda <gapc_bond_ind+0xca>
10010e82:	4d16      	ldr	r5, [pc, #88]	; (10010edc <gapc_bond_ind+0xcc>)
10010e84:	3102      	adds	r1, #2
10010e86:	1c28      	adds	r0, r5, #0
10010e88:	2210      	movs	r2, #16
10010e8a:	4e15      	ldr	r6, [pc, #84]	; (10010ee0 <gapc_bond_ind+0xd0>)
10010e8c:	302e      	adds	r0, #46	; 0x2e
10010e8e:	47b0      	blx	r6
10010e90:	1c28      	adds	r0, r5, #0
10010e92:	1c21      	adds	r1, r4, #0
10010e94:	303f      	adds	r0, #63	; 0x3f
10010e96:	3112      	adds	r1, #18
10010e98:	2206      	movs	r2, #6
10010e9a:	47b0      	blx	r6
10010e9c:	7e23      	ldrb	r3, [r4, #24]
10010e9e:	353e      	adds	r5, #62	; 0x3e
10010ea0:	702b      	strb	r3, [r5, #0]
10010ea2:	e019      	b.n	10010ed8 <gapc_bond_ind+0xc8>
10010ea4:	480d      	ldr	r0, [pc, #52]	; (10010edc <gapc_bond_ind+0xcc>)
10010ea6:	3102      	adds	r1, #2
10010ea8:	2210      	movs	r2, #16
10010eaa:	4b0d      	ldr	r3, [pc, #52]	; (10010ee0 <gapc_bond_ind+0xd0>)
10010eac:	301e      	adds	r0, #30
10010eae:	4798      	blx	r3
10010eb0:	e012      	b.n	10010ed8 <gapc_bond_ind+0xc8>
10010eb2:	4d0a      	ldr	r5, [pc, #40]	; (10010edc <gapc_bond_ind+0xcc>)
10010eb4:	3102      	adds	r1, #2
10010eb6:	2210      	movs	r2, #16
10010eb8:	4e09      	ldr	r6, [pc, #36]	; (10010ee0 <gapc_bond_ind+0xd0>)
10010eba:	1ca8      	adds	r0, r5, #2
10010ebc:	47b0      	blx	r6
10010ebe:	1c28      	adds	r0, r5, #0
10010ec0:	1c21      	adds	r1, r4, #0
10010ec2:	7ce3      	ldrb	r3, [r4, #19]
10010ec4:	7ca2      	ldrb	r2, [r4, #18]
10010ec6:	021b      	lsls	r3, r3, #8
10010ec8:	4313      	orrs	r3, r2
10010eca:	3014      	adds	r0, #20
10010ecc:	3114      	adds	r1, #20
10010ece:	2208      	movs	r2, #8
10010ed0:	826b      	strh	r3, [r5, #18]
10010ed2:	47b0      	blx	r6
10010ed4:	7f23      	ldrb	r3, [r4, #28]
10010ed6:	772b      	strb	r3, [r5, #28]
10010ed8:	2000      	movs	r0, #0
10010eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010edc:	100168a0 	.word	0x100168a0
10010ee0:	100133db 	.word	0x100133db
10010ee4:	100133ed 	.word	0x100133ed

10010ee8 <gapc_bond_req_ind>:
10010ee8:	b570      	push	{r4, r5, r6, lr}
10010eea:	780c      	ldrb	r4, [r1, #0]
10010eec:	1c03      	adds	r3, r0, #0
10010eee:	7849      	ldrb	r1, [r1, #1]
10010ef0:	2c07      	cmp	r4, #7
10010ef2:	d85c      	bhi.n	10010fae <gapc_bond_req_ind+0xc6>
10010ef4:	1c20      	adds	r0, r4, #0
10010ef6:	f001 f98f 	bl	10012218 <__gnu_thumb1_case_uqi>
10010efa:	5a04      	.short	0x5a04
10010efc:	5a0b5a5a 	.word	0x5a0b5a5a
10010f00:	1f1f      	.short	0x1f1f
10010f02:	200a      	movs	r0, #10
10010f04:	2a00      	cmp	r2, #0
10010f06:	d053      	beq.n	10010fb0 <gapc_bond_req_ind+0xc8>
10010f08:	0a1b      	lsrs	r3, r3, #8
10010f0a:	8013      	strh	r3, [r2, #0]
10010f0c:	7091      	strb	r1, [r2, #2]
10010f0e:	e04f      	b.n	10010fb0 <gapc_bond_req_ind+0xc8>
10010f10:	2a00      	cmp	r2, #0
10010f12:	d00b      	beq.n	10010f2c <gapc_bond_req_ind+0x44>
10010f14:	0a1b      	lsrs	r3, r3, #8
10010f16:	8013      	strh	r3, [r2, #0]
10010f18:	2900      	cmp	r1, #0
10010f1a:	d102      	bne.n	10010f22 <gapc_bond_req_ind+0x3a>
10010f1c:	2301      	movs	r3, #1
10010f1e:	7093      	strb	r3, [r2, #2]
10010f20:	e004      	b.n	10010f2c <gapc_bond_req_ind+0x44>
10010f22:	2300      	movs	r3, #0
10010f24:	7093      	strb	r3, [r2, #2]
10010f26:	2902      	cmp	r1, #2
10010f28:	d102      	bne.n	10010f30 <gapc_bond_req_ind+0x48>
10010f2a:	70d3      	strb	r3, [r2, #3]
10010f2c:	200c      	movs	r0, #12
10010f2e:	e03f      	b.n	10010fb0 <gapc_bond_req_ind+0xc8>
10010f30:	2901      	cmp	r1, #1
10010f32:	d1fb      	bne.n	10010f2c <gapc_bond_req_ind+0x44>
10010f34:	70d1      	strb	r1, [r2, #3]
10010f36:	e7f9      	b.n	10010f2c <gapc_bond_req_ind+0x44>
10010f38:	2214      	movs	r2, #20
10010f3a:	481e      	ldr	r0, [pc, #120]	; (10010fb4 <gapc_bond_req_ind+0xcc>)
10010f3c:	0a1b      	lsrs	r3, r3, #8
10010f3e:	70c3      	strb	r3, [r0, #3]
10010f40:	4b1d      	ldr	r3, [pc, #116]	; (10010fb8 <gapc_bond_req_ind+0xd0>)
10010f42:	7002      	strb	r2, [r0, #0]
10010f44:	3a06      	subs	r2, #6
10010f46:	7042      	strb	r2, [r0, #1]
10010f48:	7082      	strb	r2, [r0, #2]
10010f4a:	881a      	ldrh	r2, [r3, #0]
10010f4c:	881b      	ldrh	r3, [r3, #0]
10010f4e:	4e1b      	ldr	r6, [pc, #108]	; (10010fbc <gapc_bond_req_ind+0xd4>)
10010f50:	0a1b      	lsrs	r3, r3, #8
10010f52:	7143      	strb	r3, [r0, #5]
10010f54:	2301      	movs	r3, #1
10010f56:	7102      	strb	r2, [r0, #4]
10010f58:	7204      	strb	r4, [r0, #8]
10010f5a:	7243      	strb	r3, [r0, #9]
10010f5c:	1c05      	adds	r5, r0, #0
10010f5e:	1c31      	adds	r1, r6, #0
10010f60:	300a      	adds	r0, #10
10010f62:	2c07      	cmp	r4, #7
10010f64:	d116      	bne.n	10010f94 <gapc_bond_req_ind+0xac>
10010f66:	317e      	adds	r1, #126	; 0x7e
10010f68:	2210      	movs	r2, #16
10010f6a:	4c15      	ldr	r4, [pc, #84]	; (10010fc0 <gapc_bond_req_ind+0xd8>)
10010f6c:	47a0      	blx	r4
10010f6e:	1c33      	adds	r3, r6, #0
10010f70:	1c31      	adds	r1, r6, #0
10010f72:	1c28      	adds	r0, r5, #0
10010f74:	338e      	adds	r3, #142	; 0x8e
10010f76:	881b      	ldrh	r3, [r3, #0]
10010f78:	3190      	adds	r1, #144	; 0x90
10010f7a:	76ab      	strb	r3, [r5, #26]
10010f7c:	2208      	movs	r2, #8
10010f7e:	0a1b      	lsrs	r3, r3, #8
10010f80:	301c      	adds	r0, #28
10010f82:	76eb      	strb	r3, [r5, #27]
10010f84:	47a0      	blx	r4
10010f86:	1c31      	adds	r1, r6, #0
10010f88:	3198      	adds	r1, #152	; 0x98
10010f8a:	780a      	ldrb	r2, [r1, #0]
10010f8c:	1d6b      	adds	r3, r5, #5
10010f8e:	77da      	strb	r2, [r3, #31]
10010f90:	2125      	movs	r1, #37	; 0x25
10010f92:	e004      	b.n	10010f9e <gapc_bond_req_ind+0xb6>
10010f94:	319a      	adds	r1, #154	; 0x9a
10010f96:	2210      	movs	r2, #16
10010f98:	4b09      	ldr	r3, [pc, #36]	; (10010fc0 <gapc_bond_req_ind+0xd8>)
10010f9a:	4798      	blx	r3
10010f9c:	211a      	movs	r1, #26
10010f9e:	1c0b      	adds	r3, r1, #0
10010fa0:	2400      	movs	r4, #0
10010fa2:	3b08      	subs	r3, #8
10010fa4:	71ab      	strb	r3, [r5, #6]
10010fa6:	1c28      	adds	r0, r5, #0
10010fa8:	4b06      	ldr	r3, [pc, #24]	; (10010fc4 <gapc_bond_req_ind+0xdc>)
10010faa:	71ec      	strb	r4, [r5, #7]
10010fac:	4798      	blx	r3
10010fae:	2000      	movs	r0, #0
10010fb0:	bd70      	pop	{r4, r5, r6, pc}
10010fb2:	46c0      	nop			; (mov r8, r8)
10010fb4:	100178f0 	.word	0x100178f0
10010fb8:	10017580 	.word	0x10017580
10010fbc:	10017612 	.word	0x10017612
10010fc0:	100133db 	.word	0x100133db
10010fc4:	10010891 	.word	0x10010891

10010fc8 <gapc_bond_cfm_handler_pair_resp>:
10010fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fca:	b085      	sub	sp, #20
10010fcc:	1c07      	adds	r7, r0, #0
10010fce:	a80a      	add	r0, sp, #40	; 0x28
10010fd0:	7806      	ldrb	r6, [r0, #0]
10010fd2:	a80b      	add	r0, sp, #44	; 0x2c
10010fd4:	7805      	ldrb	r5, [r0, #0]
10010fd6:	a80c      	add	r0, sp, #48	; 0x30
10010fd8:	7800      	ldrb	r0, [r0, #0]
10010fda:	2414      	movs	r4, #20
10010fdc:	9002      	str	r0, [sp, #8]
10010fde:	a80d      	add	r0, sp, #52	; 0x34
10010fe0:	7800      	ldrb	r0, [r0, #0]
10010fe2:	9301      	str	r3, [sp, #4]
10010fe4:	9003      	str	r0, [sp, #12]
10010fe6:	a80e      	add	r0, sp, #56	; 0x38
10010fe8:	8800      	ldrh	r0, [r0, #0]
10010fea:	4684      	mov	ip, r0
10010fec:	4812      	ldr	r0, [pc, #72]	; (10011038 <gapc_bond_cfm_handler_pair_resp+0x70>)
10010fee:	7004      	strb	r4, [r0, #0]
10010ff0:	3c06      	subs	r4, #6
10010ff2:	7044      	strb	r4, [r0, #1]
10010ff4:	7084      	strb	r4, [r0, #2]
10010ff6:	4664      	mov	r4, ip
10010ff8:	70c4      	strb	r4, [r0, #3]
10010ffa:	4c10      	ldr	r4, [pc, #64]	; (1001103c <gapc_bond_cfm_handler_pair_resp+0x74>)
10010ffc:	7247      	strb	r7, [r0, #9]
10010ffe:	8823      	ldrh	r3, [r4, #0]
10011000:	8824      	ldrh	r4, [r4, #0]
10011002:	7103      	strb	r3, [r0, #4]
10011004:	466b      	mov	r3, sp
10011006:	791b      	ldrb	r3, [r3, #4]
10011008:	0a24      	lsrs	r4, r4, #8
1001100a:	7303      	strb	r3, [r0, #12]
1001100c:	466b      	mov	r3, sp
1001100e:	7a1b      	ldrb	r3, [r3, #8]
10011010:	7144      	strb	r4, [r0, #5]
10011012:	73c3      	strb	r3, [r0, #15]
10011014:	466b      	mov	r3, sp
10011016:	7b1b      	ldrb	r3, [r3, #12]
10011018:	2401      	movs	r4, #1
1001101a:	7403      	strb	r3, [r0, #16]
1001101c:	2309      	movs	r3, #9
1001101e:	7183      	strb	r3, [r0, #6]
10011020:	2300      	movs	r3, #0
10011022:	7204      	strb	r4, [r0, #8]
10011024:	7281      	strb	r1, [r0, #10]
10011026:	72c2      	strb	r2, [r0, #11]
10011028:	7346      	strb	r6, [r0, #13]
1001102a:	7385      	strb	r5, [r0, #14]
1001102c:	71c3      	strb	r3, [r0, #7]
1001102e:	2111      	movs	r1, #17
10011030:	4b03      	ldr	r3, [pc, #12]	; (10011040 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011032:	4798      	blx	r3
10011034:	b005      	add	sp, #20
10011036:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011038:	100178f0 	.word	0x100178f0
1001103c:	10017580 	.word	0x10017580
10011040:	10010891 	.word	0x10010891

10011044 <gapc_bond_cfm_handler_key_exch>:
10011044:	b538      	push	{r3, r4, r5, lr}
10011046:	2514      	movs	r5, #20
10011048:	4c0d      	ldr	r4, [pc, #52]	; (10011080 <gapc_bond_cfm_handler_key_exch+0x3c>)
1001104a:	70e3      	strb	r3, [r4, #3]
1001104c:	4b0d      	ldr	r3, [pc, #52]	; (10011084 <gapc_bond_cfm_handler_key_exch+0x40>)
1001104e:	7025      	strb	r5, [r4, #0]
10011050:	3d06      	subs	r5, #6
10011052:	7065      	strb	r5, [r4, #1]
10011054:	70a5      	strb	r5, [r4, #2]
10011056:	881d      	ldrh	r5, [r3, #0]
10011058:	881b      	ldrh	r3, [r3, #0]
1001105a:	7220      	strb	r0, [r4, #8]
1001105c:	0a1b      	lsrs	r3, r3, #8
1001105e:	7163      	strb	r3, [r4, #5]
10011060:	7261      	strb	r1, [r4, #9]
10011062:	4b09      	ldr	r3, [pc, #36]	; (10011088 <gapc_bond_cfm_handler_key_exch+0x44>)
10011064:	1c11      	adds	r1, r2, #0
10011066:	4809      	ldr	r0, [pc, #36]	; (1001108c <gapc_bond_cfm_handler_key_exch+0x48>)
10011068:	2210      	movs	r2, #16
1001106a:	7125      	strb	r5, [r4, #4]
1001106c:	4798      	blx	r3
1001106e:	2312      	movs	r3, #18
10011070:	71a3      	strb	r3, [r4, #6]
10011072:	2300      	movs	r3, #0
10011074:	1c20      	adds	r0, r4, #0
10011076:	71e3      	strb	r3, [r4, #7]
10011078:	211a      	movs	r1, #26
1001107a:	4b05      	ldr	r3, [pc, #20]	; (10011090 <gapc_bond_cfm_handler_key_exch+0x4c>)
1001107c:	4798      	blx	r3
1001107e:	bd38      	pop	{r3, r4, r5, pc}
10011080:	100178f0 	.word	0x100178f0
10011084:	10017580 	.word	0x10017580
10011088:	100133db 	.word	0x100133db
1001108c:	100178fa 	.word	0x100178fa
10011090:	10010891 	.word	0x10010891

10011094 <gapc_security_cmd_handler>:
10011094:	221a      	movs	r2, #26
10011096:	b508      	push	{r3, lr}
10011098:	4b0b      	ldr	r3, [pc, #44]	; (100110c8 <gapc_security_cmd_handler+0x34>)
1001109a:	701a      	strb	r2, [r3, #0]
1001109c:	3a0c      	subs	r2, #12
1001109e:	705a      	strb	r2, [r3, #1]
100110a0:	709a      	strb	r2, [r3, #2]
100110a2:	4a0a      	ldr	r2, [pc, #40]	; (100110cc <gapc_security_cmd_handler+0x38>)
100110a4:	70d8      	strb	r0, [r3, #3]
100110a6:	8810      	ldrh	r0, [r2, #0]
100110a8:	8812      	ldrh	r2, [r2, #0]
100110aa:	7118      	strb	r0, [r3, #4]
100110ac:	0a12      	lsrs	r2, r2, #8
100110ae:	715a      	strb	r2, [r3, #5]
100110b0:	220c      	movs	r2, #12
100110b2:	721a      	strb	r2, [r3, #8]
100110b4:	3a0a      	subs	r2, #10
100110b6:	719a      	strb	r2, [r3, #6]
100110b8:	2200      	movs	r2, #0
100110ba:	7259      	strb	r1, [r3, #9]
100110bc:	71da      	strb	r2, [r3, #7]
100110be:	1c18      	adds	r0, r3, #0
100110c0:	210a      	movs	r1, #10
100110c2:	4b03      	ldr	r3, [pc, #12]	; (100110d0 <gapc_security_cmd_handler+0x3c>)
100110c4:	4798      	blx	r3
100110c6:	bd08      	pop	{r3, pc}
100110c8:	100178f0 	.word	0x100178f0
100110cc:	10017580 	.word	0x10017580
100110d0:	10010891 	.word	0x10010891

100110d4 <gapc_encrypt_cmd_handler>:
100110d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100110d6:	2500      	movs	r5, #0
100110d8:	b089      	sub	sp, #36	; 0x24
100110da:	9306      	str	r3, [sp, #24]
100110dc:	ab0e      	add	r3, sp, #56	; 0x38
100110de:	781b      	ldrb	r3, [r3, #0]
100110e0:	1c17      	adds	r7, r2, #0
100110e2:	9307      	str	r3, [sp, #28]
100110e4:	ab0f      	add	r3, sp, #60	; 0x3c
100110e6:	781b      	ldrb	r3, [r3, #0]
100110e8:	4a19      	ldr	r2, [pc, #100]	; (10011150 <gapc_encrypt_cmd_handler+0x7c>)
100110ea:	1c06      	adds	r6, r0, #0
100110ec:	9105      	str	r1, [sp, #20]
100110ee:	9300      	str	r3, [sp, #0]
100110f0:	9002      	str	r0, [sp, #8]
100110f2:	1c29      	adds	r1, r5, #0
100110f4:	1c2b      	adds	r3, r5, #0
100110f6:	9501      	str	r5, [sp, #4]
100110f8:	1c10      	adds	r0, r2, #0
100110fa:	4c16      	ldr	r4, [pc, #88]	; (10011154 <gapc_encrypt_cmd_handler+0x80>)
100110fc:	47a0      	blx	r4
100110fe:	2316      	movs	r3, #22
10011100:	4c15      	ldr	r4, [pc, #84]	; (10011158 <gapc_encrypt_cmd_handler+0x84>)
10011102:	9905      	ldr	r1, [sp, #20]
10011104:	7023      	strb	r3, [r4, #0]
10011106:	3b08      	subs	r3, #8
10011108:	7063      	strb	r3, [r4, #1]
1001110a:	70a3      	strb	r3, [r4, #2]
1001110c:	4b13      	ldr	r3, [pc, #76]	; (1001115c <gapc_encrypt_cmd_handler+0x88>)
1001110e:	70e6      	strb	r6, [r4, #3]
10011110:	881a      	ldrh	r2, [r3, #0]
10011112:	881b      	ldrh	r3, [r3, #0]
10011114:	7122      	strb	r2, [r4, #4]
10011116:	0a1b      	lsrs	r3, r3, #8
10011118:	7163      	strb	r3, [r4, #5]
1001111a:	230b      	movs	r3, #11
1001111c:	4e10      	ldr	r6, [pc, #64]	; (10011160 <gapc_encrypt_cmd_handler+0x8c>)
1001111e:	2210      	movs	r2, #16
10011120:	4810      	ldr	r0, [pc, #64]	; (10011164 <gapc_encrypt_cmd_handler+0x90>)
10011122:	7223      	strb	r3, [r4, #8]
10011124:	7265      	strb	r5, [r4, #9]
10011126:	47b0      	blx	r6
10011128:	0a3b      	lsrs	r3, r7, #8
1001112a:	9906      	ldr	r1, [sp, #24]
1001112c:	2208      	movs	r2, #8
1001112e:	480e      	ldr	r0, [pc, #56]	; (10011168 <gapc_encrypt_cmd_handler+0x94>)
10011130:	76e3      	strb	r3, [r4, #27]
10011132:	76a7      	strb	r7, [r4, #26]
10011134:	47b0      	blx	r6
10011136:	466a      	mov	r2, sp
10011138:	7f12      	ldrb	r2, [r2, #28]
1001113a:	1d63      	adds	r3, r4, #5
1001113c:	77da      	strb	r2, [r3, #31]
1001113e:	231d      	movs	r3, #29
10011140:	1c20      	adds	r0, r4, #0
10011142:	71a3      	strb	r3, [r4, #6]
10011144:	2125      	movs	r1, #37	; 0x25
10011146:	4b09      	ldr	r3, [pc, #36]	; (1001116c <gapc_encrypt_cmd_handler+0x98>)
10011148:	71e5      	strb	r5, [r4, #7]
1001114a:	4798      	blx	r3
1001114c:	b009      	add	sp, #36	; 0x24
1001114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011150:	10016880 	.word	0x10016880
10011154:	10010b8d 	.word	0x10010b8d
10011158:	100178f0 	.word	0x100178f0
1001115c:	10017580 	.word	0x10017580
10011160:	100133db 	.word	0x100133db
10011164:	100178fa 	.word	0x100178fa
10011168:	1001790c 	.word	0x1001790c
1001116c:	10010891 	.word	0x10010891

10011170 <gapc_encrypt_req_ind>:
10011170:	b508      	push	{r3, lr}
10011172:	0a00      	lsrs	r0, r0, #8
10011174:	8010      	strh	r0, [r2, #0]
10011176:	784b      	ldrb	r3, [r1, #1]
10011178:	7808      	ldrb	r0, [r1, #0]
1001117a:	021b      	lsls	r3, r3, #8
1001117c:	4303      	orrs	r3, r0
1001117e:	8053      	strh	r3, [r2, #2]
10011180:	1d10      	adds	r0, r2, #4
10011182:	3102      	adds	r1, #2
10011184:	2208      	movs	r2, #8
10011186:	4b01      	ldr	r3, [pc, #4]	; (1001118c <gapc_encrypt_req_ind+0x1c>)
10011188:	4798      	blx	r3
1001118a:	bd08      	pop	{r3, pc}
1001118c:	100133db 	.word	0x100133db

10011190 <gapc_encrypt_cfm_handler>:
10011190:	b5f0      	push	{r4, r5, r6, r7, lr}
10011192:	2500      	movs	r5, #0
10011194:	b087      	sub	sp, #28
10011196:	9304      	str	r3, [sp, #16]
10011198:	ab0c      	add	r3, sp, #48	; 0x30
1001119a:	781b      	ldrb	r3, [r3, #0]
1001119c:	1c17      	adds	r7, r2, #0
1001119e:	4a15      	ldr	r2, [pc, #84]	; (100111f4 <gapc_encrypt_cfm_handler+0x64>)
100111a0:	1c06      	adds	r6, r0, #0
100111a2:	9305      	str	r3, [sp, #20]
100111a4:	9100      	str	r1, [sp, #0]
100111a6:	9002      	str	r0, [sp, #8]
100111a8:	1c29      	adds	r1, r5, #0
100111aa:	1c2b      	adds	r3, r5, #0
100111ac:	9501      	str	r5, [sp, #4]
100111ae:	1c10      	adds	r0, r2, #0
100111b0:	4c11      	ldr	r4, [pc, #68]	; (100111f8 <gapc_encrypt_cfm_handler+0x68>)
100111b2:	47a0      	blx	r4
100111b4:	2318      	movs	r3, #24
100111b6:	4c11      	ldr	r4, [pc, #68]	; (100111fc <gapc_encrypt_cfm_handler+0x6c>)
100111b8:	9904      	ldr	r1, [sp, #16]
100111ba:	7023      	strb	r3, [r4, #0]
100111bc:	3b0a      	subs	r3, #10
100111be:	7063      	strb	r3, [r4, #1]
100111c0:	70a3      	strb	r3, [r4, #2]
100111c2:	4b0f      	ldr	r3, [pc, #60]	; (10011200 <gapc_encrypt_cfm_handler+0x70>)
100111c4:	480f      	ldr	r0, [pc, #60]	; (10011204 <gapc_encrypt_cfm_handler+0x74>)
100111c6:	881a      	ldrh	r2, [r3, #0]
100111c8:	881b      	ldrh	r3, [r3, #0]
100111ca:	7122      	strb	r2, [r4, #4]
100111cc:	0a1b      	lsrs	r3, r3, #8
100111ce:	7163      	strb	r3, [r4, #5]
100111d0:	2210      	movs	r2, #16
100111d2:	4b0d      	ldr	r3, [pc, #52]	; (10011208 <gapc_encrypt_cfm_handler+0x78>)
100111d4:	70e6      	strb	r6, [r4, #3]
100111d6:	7227      	strb	r7, [r4, #8]
100111d8:	4798      	blx	r3
100111da:	466b      	mov	r3, sp
100111dc:	7d1b      	ldrb	r3, [r3, #20]
100111de:	1c20      	adds	r0, r4, #0
100111e0:	7663      	strb	r3, [r4, #25]
100111e2:	2312      	movs	r3, #18
100111e4:	211a      	movs	r1, #26
100111e6:	71a3      	strb	r3, [r4, #6]
100111e8:	4b08      	ldr	r3, [pc, #32]	; (1001120c <gapc_encrypt_cfm_handler+0x7c>)
100111ea:	71e5      	strb	r5, [r4, #7]
100111ec:	4798      	blx	r3
100111ee:	b007      	add	sp, #28
100111f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111f2:	46c0      	nop			; (mov r8, r8)
100111f4:	10016890 	.word	0x10016890
100111f8:	10010b8d 	.word	0x10010b8d
100111fc:	100178f0 	.word	0x100178f0
10011200:	10017580 	.word	0x10017580
10011204:	100178f9 	.word	0x100178f9
10011208:	100133db 	.word	0x100133db
1001120c:	10010891 	.word	0x10010891

10011210 <gapc_encrypt_ind>:
10011210:	780b      	ldrb	r3, [r1, #0]
10011212:	0a00      	lsrs	r0, r0, #8
10011214:	70d3      	strb	r3, [r2, #3]
10011216:	2300      	movs	r3, #0
10011218:	8010      	strh	r0, [r2, #0]
1001121a:	7093      	strb	r3, [r2, #2]
1001121c:	4770      	bx	lr
	...

10011220 <gapc_param_update_cfm_handler>:
10011220:	b538      	push	{r3, r4, r5, lr}
10011222:	2410      	movs	r4, #16
10011224:	1c05      	adds	r5, r0, #0
10011226:	480e      	ldr	r0, [pc, #56]	; (10011260 <gapc_param_update_cfm_handler+0x40>)
10011228:	7004      	strb	r4, [r0, #0]
1001122a:	3c02      	subs	r4, #2
1001122c:	7044      	strb	r4, [r0, #1]
1001122e:	7084      	strb	r4, [r0, #2]
10011230:	4c0c      	ldr	r4, [pc, #48]	; (10011264 <gapc_param_update_cfm_handler+0x44>)
10011232:	70c5      	strb	r5, [r0, #3]
10011234:	8825      	ldrh	r5, [r4, #0]
10011236:	8824      	ldrh	r4, [r4, #0]
10011238:	72c3      	strb	r3, [r0, #11]
1001123a:	0a1b      	lsrs	r3, r3, #8
1001123c:	0a24      	lsrs	r4, r4, #8
1001123e:	7303      	strb	r3, [r0, #12]
10011240:	2305      	movs	r3, #5
10011242:	7144      	strb	r4, [r0, #5]
10011244:	2400      	movs	r4, #0
10011246:	7201      	strb	r1, [r0, #8]
10011248:	7242      	strb	r2, [r0, #9]
1001124a:	7183      	strb	r3, [r0, #6]
1001124c:	0a12      	lsrs	r2, r2, #8
1001124e:	210d      	movs	r1, #13
10011250:	4b05      	ldr	r3, [pc, #20]	; (10011268 <gapc_param_update_cfm_handler+0x48>)
10011252:	7105      	strb	r5, [r0, #4]
10011254:	7282      	strb	r2, [r0, #10]
10011256:	71c4      	strb	r4, [r0, #7]
10011258:	4798      	blx	r3
1001125a:	1c20      	adds	r0, r4, #0
1001125c:	bd38      	pop	{r3, r4, r5, pc}
1001125e:	46c0      	nop			; (mov r8, r8)
10011260:	100178f0 	.word	0x100178f0
10011264:	10017580 	.word	0x10017580
10011268:	10010891 	.word	0x10010891

1001126c <gapc_param_updated_ind>:
1001126c:	2300      	movs	r3, #0
1001126e:	0a00      	lsrs	r0, r0, #8
10011270:	8010      	strh	r0, [r2, #0]
10011272:	7093      	strb	r3, [r2, #2]
10011274:	784b      	ldrb	r3, [r1, #1]
10011276:	7808      	ldrb	r0, [r1, #0]
10011278:	021b      	lsls	r3, r3, #8
1001127a:	4303      	orrs	r3, r0
1001127c:	8093      	strh	r3, [r2, #4]
1001127e:	78cb      	ldrb	r3, [r1, #3]
10011280:	7888      	ldrb	r0, [r1, #2]
10011282:	021b      	lsls	r3, r3, #8
10011284:	4303      	orrs	r3, r0
10011286:	80d3      	strh	r3, [r2, #6]
10011288:	794b      	ldrb	r3, [r1, #5]
1001128a:	7909      	ldrb	r1, [r1, #4]
1001128c:	021b      	lsls	r3, r3, #8
1001128e:	430b      	orrs	r3, r1
10011290:	2007      	movs	r0, #7
10011292:	8113      	strh	r3, [r2, #8]
10011294:	4770      	bx	lr

10011296 <gapc_param_updated_req_ind>:
10011296:	0a00      	lsrs	r0, r0, #8
10011298:	8010      	strh	r0, [r2, #0]
1001129a:	784b      	ldrb	r3, [r1, #1]
1001129c:	7808      	ldrb	r0, [r1, #0]
1001129e:	021b      	lsls	r3, r3, #8
100112a0:	4303      	orrs	r3, r0
100112a2:	8053      	strh	r3, [r2, #2]
100112a4:	78cb      	ldrb	r3, [r1, #3]
100112a6:	7888      	ldrb	r0, [r1, #2]
100112a8:	021b      	lsls	r3, r3, #8
100112aa:	4303      	orrs	r3, r0
100112ac:	8093      	strh	r3, [r2, #4]
100112ae:	794b      	ldrb	r3, [r1, #5]
100112b0:	7908      	ldrb	r0, [r1, #4]
100112b2:	021b      	lsls	r3, r3, #8
100112b4:	4303      	orrs	r3, r0
100112b6:	80d3      	strh	r3, [r2, #6]
100112b8:	79cb      	ldrb	r3, [r1, #7]
100112ba:	7989      	ldrb	r1, [r1, #6]
100112bc:	021b      	lsls	r3, r3, #8
100112be:	430b      	orrs	r3, r1
100112c0:	2008      	movs	r0, #8
100112c2:	8113      	strh	r3, [r2, #8]
100112c4:	4770      	bx	lr
	...

100112c8 <gapc_dev_info_req_ind_handler>:
100112c8:	b508      	push	{r3, lr}
100112ca:	1c0b      	adds	r3, r1, #0
100112cc:	0a01      	lsrs	r1, r0, #8
100112ce:	8011      	strh	r1, [r2, #0]
100112d0:	7818      	ldrb	r0, [r3, #0]
100112d2:	7090      	strb	r0, [r2, #2]
100112d4:	2800      	cmp	r0, #0
100112d6:	d104      	bne.n	100112e2 <gapc_dev_info_req_ind_handler+0x1a>
100112d8:	4b03      	ldr	r3, [pc, #12]	; (100112e8 <gapc_dev_info_req_ind_handler+0x20>)
100112da:	33aa      	adds	r3, #170	; 0xaa
100112dc:	881b      	ldrh	r3, [r3, #0]
100112de:	2b00      	cmp	r3, #0
100112e0:	d001      	beq.n	100112e6 <gapc_dev_info_req_ind_handler+0x1e>
100112e2:	4b02      	ldr	r3, [pc, #8]	; (100112ec <gapc_dev_info_req_ind_handler+0x24>)
100112e4:	4798      	blx	r3
100112e6:	bd08      	pop	{r3, pc}
100112e8:	10017612 	.word	0x10017612
100112ec:	10010999 	.word	0x10010999

100112f0 <gapc_sec_req_ind>:
100112f0:	0a00      	lsrs	r0, r0, #8
100112f2:	8010      	strh	r0, [r2, #0]
100112f4:	7809      	ldrb	r1, [r1, #0]
100112f6:	2301      	movs	r3, #1
100112f8:	1c08      	adds	r0, r1, #0
100112fa:	0889      	lsrs	r1, r1, #2
100112fc:	4018      	ands	r0, r3
100112fe:	400b      	ands	r3, r1
10011300:	70d0      	strb	r0, [r2, #3]
10011302:	7113      	strb	r3, [r2, #4]
10011304:	4770      	bx	lr

10011306 <gapc_sign_counter_ind_handler>:
10011306:	0a00      	lsrs	r0, r0, #8
10011308:	8010      	strh	r0, [r2, #0]
1001130a:	784b      	ldrb	r3, [r1, #1]
1001130c:	0218      	lsls	r0, r3, #8
1001130e:	788b      	ldrb	r3, [r1, #2]
10011310:	041b      	lsls	r3, r3, #16
10011312:	4303      	orrs	r3, r0
10011314:	7808      	ldrb	r0, [r1, #0]
10011316:	4303      	orrs	r3, r0
10011318:	78c8      	ldrb	r0, [r1, #3]
1001131a:	0600      	lsls	r0, r0, #24
1001131c:	4303      	orrs	r3, r0
1001131e:	6053      	str	r3, [r2, #4]
10011320:	794b      	ldrb	r3, [r1, #5]
10011322:	0218      	lsls	r0, r3, #8
10011324:	798b      	ldrb	r3, [r1, #6]
10011326:	041b      	lsls	r3, r3, #16
10011328:	4303      	orrs	r3, r0
1001132a:	7908      	ldrb	r0, [r1, #4]
1001132c:	79c9      	ldrb	r1, [r1, #7]
1001132e:	4303      	orrs	r3, r0
10011330:	0609      	lsls	r1, r1, #24
10011332:	430b      	orrs	r3, r1
10011334:	2000      	movs	r0, #0
10011336:	6093      	str	r3, [r2, #8]
10011338:	4770      	bx	lr
	...

1001133c <gapc_peer_att_info_ind_handler>:
1001133c:	b510      	push	{r4, lr}
1001133e:	0a00      	lsrs	r0, r0, #8
10011340:	8010      	strh	r0, [r2, #0]
10011342:	7808      	ldrb	r0, [r1, #0]
10011344:	7090      	strb	r0, [r2, #2]
10011346:	788b      	ldrb	r3, [r1, #2]
10011348:	784c      	ldrb	r4, [r1, #1]
1001134a:	021b      	lsls	r3, r3, #8
1001134c:	4323      	orrs	r3, r4
1001134e:	8093      	strh	r3, [r2, #4]
10011350:	2801      	cmp	r0, #1
10011352:	d027      	beq.n	100113a4 <gapc_peer_att_info_ind_handler+0x68>
10011354:	2800      	cmp	r0, #0
10011356:	d017      	beq.n	10011388 <gapc_peer_att_info_ind_handler+0x4c>
10011358:	2802      	cmp	r0, #2
1001135a:	d12a      	bne.n	100113b2 <gapc_peer_att_info_ind_handler+0x76>
1001135c:	790b      	ldrb	r3, [r1, #4]
1001135e:	78c8      	ldrb	r0, [r1, #3]
10011360:	021b      	lsls	r3, r3, #8
10011362:	4303      	orrs	r3, r0
10011364:	8113      	strh	r3, [r2, #8]
10011366:	798b      	ldrb	r3, [r1, #6]
10011368:	7948      	ldrb	r0, [r1, #5]
1001136a:	021b      	lsls	r3, r3, #8
1001136c:	4303      	orrs	r3, r0
1001136e:	80d3      	strh	r3, [r2, #6]
10011370:	7a0b      	ldrb	r3, [r1, #8]
10011372:	79c8      	ldrb	r0, [r1, #7]
10011374:	021b      	lsls	r3, r3, #8
10011376:	4303      	orrs	r3, r0
10011378:	8193      	strh	r3, [r2, #12]
1001137a:	7a8b      	ldrb	r3, [r1, #10]
1001137c:	7a49      	ldrb	r1, [r1, #9]
1001137e:	021b      	lsls	r3, r3, #8
10011380:	430b      	orrs	r3, r1
10011382:	8153      	strh	r3, [r2, #10]
10011384:	2306      	movs	r3, #6
10011386:	e013      	b.n	100113b0 <gapc_peer_att_info_ind_handler+0x74>
10011388:	1c14      	adds	r4, r2, #0
1001138a:	1c20      	adds	r0, r4, #0
1001138c:	790a      	ldrb	r2, [r1, #4]
1001138e:	78cb      	ldrb	r3, [r1, #3]
10011390:	0212      	lsls	r2, r2, #8
10011392:	431a      	orrs	r2, r3
10011394:	80e2      	strh	r2, [r4, #6]
10011396:	4b07      	ldr	r3, [pc, #28]	; (100113b4 <gapc_peer_att_info_ind_handler+0x78>)
10011398:	3008      	adds	r0, #8
1001139a:	3105      	adds	r1, #5
1001139c:	4798      	blx	r3
1001139e:	2302      	movs	r3, #2
100113a0:	70a3      	strb	r3, [r4, #2]
100113a2:	e006      	b.n	100113b2 <gapc_peer_att_info_ind_handler+0x76>
100113a4:	790b      	ldrb	r3, [r1, #4]
100113a6:	78c9      	ldrb	r1, [r1, #3]
100113a8:	021b      	lsls	r3, r3, #8
100113aa:	430b      	orrs	r3, r1
100113ac:	80d3      	strh	r3, [r2, #6]
100113ae:	2305      	movs	r3, #5
100113b0:	7093      	strb	r3, [r2, #2]
100113b2:	bd10      	pop	{r4, pc}
100113b4:	100133db 	.word	0x100133db

100113b8 <gapc_con_channel_map_ind_handler>:
100113b8:	b508      	push	{r3, lr}
100113ba:	2300      	movs	r3, #0
100113bc:	0a00      	lsrs	r0, r0, #8
100113be:	7013      	strb	r3, [r2, #0]
100113c0:	8050      	strh	r0, [r2, #2]
100113c2:	4b02      	ldr	r3, [pc, #8]	; (100113cc <gapc_con_channel_map_ind_handler+0x14>)
100113c4:	1d10      	adds	r0, r2, #4
100113c6:	2205      	movs	r2, #5
100113c8:	4798      	blx	r3
100113ca:	bd08      	pop	{r3, pc}
100113cc:	100133db 	.word	0x100133db

100113d0 <gapc_lecb_connected>:
100113d0:	7843      	ldrb	r3, [r0, #1]
100113d2:	7802      	ldrb	r2, [r0, #0]
100113d4:	021b      	lsls	r3, r3, #8
100113d6:	4313      	orrs	r3, r2
100113d8:	800b      	strh	r3, [r1, #0]
100113da:	78c3      	ldrb	r3, [r0, #3]
100113dc:	7882      	ldrb	r2, [r0, #2]
100113de:	021b      	lsls	r3, r3, #8
100113e0:	4313      	orrs	r3, r2
100113e2:	804b      	strh	r3, [r1, #2]
100113e4:	7943      	ldrb	r3, [r0, #5]
100113e6:	7902      	ldrb	r2, [r0, #4]
100113e8:	021b      	lsls	r3, r3, #8
100113ea:	4313      	orrs	r3, r2
100113ec:	808b      	strh	r3, [r1, #4]
100113ee:	79c3      	ldrb	r3, [r0, #7]
100113f0:	7982      	ldrb	r2, [r0, #6]
100113f2:	021b      	lsls	r3, r3, #8
100113f4:	4313      	orrs	r3, r2
100113f6:	80cb      	strh	r3, [r1, #6]
100113f8:	2300      	movs	r3, #0
100113fa:	720b      	strb	r3, [r1, #8]
100113fc:	4770      	bx	lr

100113fe <gapc_lecb_disconnected>:
100113fe:	7843      	ldrb	r3, [r0, #1]
10011400:	7802      	ldrb	r2, [r0, #0]
10011402:	021b      	lsls	r3, r3, #8
10011404:	4313      	orrs	r3, r2
10011406:	800b      	strh	r3, [r1, #0]
10011408:	78c3      	ldrb	r3, [r0, #3]
1001140a:	7882      	ldrb	r2, [r0, #2]
1001140c:	021b      	lsls	r3, r3, #8
1001140e:	4313      	orrs	r3, r2
10011410:	804b      	strh	r3, [r1, #2]
10011412:	4770      	bx	lr

10011414 <gapc_lecb_connect_req_ind>:
10011414:	7843      	ldrb	r3, [r0, #1]
10011416:	7802      	ldrb	r2, [r0, #0]
10011418:	021b      	lsls	r3, r3, #8
1001141a:	4313      	orrs	r3, r2
1001141c:	800b      	strh	r3, [r1, #0]
1001141e:	78c3      	ldrb	r3, [r0, #3]
10011420:	7882      	ldrb	r2, [r0, #2]
10011422:	021b      	lsls	r3, r3, #8
10011424:	4313      	orrs	r3, r2
10011426:	804b      	strh	r3, [r1, #2]
10011428:	7943      	ldrb	r3, [r0, #5]
1001142a:	7902      	ldrb	r2, [r0, #4]
1001142c:	021b      	lsls	r3, r3, #8
1001142e:	4313      	orrs	r3, r2
10011430:	808b      	strh	r3, [r1, #4]
10011432:	79c3      	ldrb	r3, [r0, #7]
10011434:	7982      	ldrb	r2, [r0, #6]
10011436:	021b      	lsls	r3, r3, #8
10011438:	4313      	orrs	r3, r2
1001143a:	80cb      	strh	r3, [r1, #6]
1001143c:	4770      	bx	lr

1001143e <gapc_lecb_add_credit_resp_handler>:
1001143e:	7843      	ldrb	r3, [r0, #1]
10011440:	7802      	ldrb	r2, [r0, #0]
10011442:	021b      	lsls	r3, r3, #8
10011444:	4313      	orrs	r3, r2
10011446:	800b      	strh	r3, [r1, #0]
10011448:	78c3      	ldrb	r3, [r0, #3]
1001144a:	7882      	ldrb	r2, [r0, #2]
1001144c:	021b      	lsls	r3, r3, #8
1001144e:	4313      	orrs	r3, r2
10011450:	804b      	strh	r3, [r1, #2]
10011452:	7943      	ldrb	r3, [r0, #5]
10011454:	7902      	ldrb	r2, [r0, #4]
10011456:	021b      	lsls	r3, r3, #8
10011458:	4313      	orrs	r3, r2
1001145a:	808b      	strh	r3, [r1, #4]
1001145c:	4770      	bx	lr
	...

10011460 <gapm_reset_req_handler>:
10011460:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011462:	466b      	mov	r3, sp
10011464:	4915      	ldr	r1, [pc, #84]	; (100114bc <gapm_reset_req_handler+0x5c>)
10011466:	4816      	ldr	r0, [pc, #88]	; (100114c0 <gapm_reset_req_handler+0x60>)
10011468:	880c      	ldrh	r4, [r1, #0]
1001146a:	8809      	ldrh	r1, [r1, #0]
1001146c:	1ddd      	adds	r5, r3, #7
1001146e:	0a09      	lsrs	r1, r1, #8
10011470:	2300      	movs	r3, #0
10011472:	2202      	movs	r2, #2
10011474:	7141      	strb	r1, [r0, #5]
10011476:	26d0      	movs	r6, #208	; 0xd0
10011478:	2101      	movs	r1, #1
1001147a:	7104      	strb	r4, [r0, #4]
1001147c:	4c11      	ldr	r4, [pc, #68]	; (100114c4 <gapm_reset_req_handler+0x64>)
1001147e:	702b      	strb	r3, [r5, #0]
10011480:	7002      	strb	r2, [r0, #0]
10011482:	70c3      	strb	r3, [r0, #3]
10011484:	320b      	adds	r2, #11
10011486:	7201      	strb	r1, [r0, #8]
10011488:	7181      	strb	r1, [r0, #6]
1001148a:	71c3      	strb	r3, [r0, #7]
1001148c:	3108      	adds	r1, #8
1001148e:	4b0e      	ldr	r3, [pc, #56]	; (100114c8 <gapm_reset_req_handler+0x68>)
10011490:	0136      	lsls	r6, r6, #4
10011492:	7042      	strb	r2, [r0, #1]
10011494:	7082      	strb	r2, [r0, #2]
10011496:	80a2      	strh	r2, [r4, #4]
10011498:	8026      	strh	r6, [r4, #0]
1001149a:	4798      	blx	r3
1001149c:	1c28      	adds	r0, r5, #0
1001149e:	4b0b      	ldr	r3, [pc, #44]	; (100114cc <gapm_reset_req_handler+0x6c>)
100114a0:	4798      	blx	r3
100114a2:	782b      	ldrb	r3, [r5, #0]
100114a4:	20e2      	movs	r0, #226	; 0xe2
100114a6:	2b00      	cmp	r3, #0
100114a8:	d106      	bne.n	100114b8 <gapm_reset_req_handler+0x58>
100114aa:	68a3      	ldr	r3, [r4, #8]
100114ac:	20e2      	movs	r0, #226	; 0xe2
100114ae:	781a      	ldrb	r2, [r3, #0]
100114b0:	785b      	ldrb	r3, [r3, #1]
100114b2:	2a01      	cmp	r2, #1
100114b4:	d100      	bne.n	100114b8 <gapm_reset_req_handler+0x58>
100114b6:	1c18      	adds	r0, r3, #0
100114b8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100114ba:	46c0      	nop			; (mov r8, r8)
100114bc:	10017580 	.word	0x10017580
100114c0:	100178f0 	.word	0x100178f0
100114c4:	10017574 	.word	0x10017574
100114c8:	10010891 	.word	0x10010891
100114cc:	100108ed 	.word	0x100108ed

100114d0 <gapm_set_dev_config_cmd_handler>:
100114d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100114d2:	b089      	sub	sp, #36	; 0x24
100114d4:	9303      	str	r3, [sp, #12]
100114d6:	ab0e      	add	r3, sp, #56	; 0x38
100114d8:	781b      	ldrb	r3, [r3, #0]
100114da:	4c37      	ldr	r4, [pc, #220]	; (100115b8 <gapm_set_dev_config_cmd_handler+0xe8>)
100114dc:	9304      	str	r3, [sp, #16]
100114de:	ab0f      	add	r3, sp, #60	; 0x3c
100114e0:	781b      	ldrb	r3, [r3, #0]
100114e2:	270d      	movs	r7, #13
100114e4:	9305      	str	r3, [sp, #20]
100114e6:	ab10      	add	r3, sp, #64	; 0x40
100114e8:	881b      	ldrh	r3, [r3, #0]
100114ea:	72a1      	strb	r1, [r4, #10]
100114ec:	9300      	str	r3, [sp, #0]
100114ee:	ab11      	add	r3, sp, #68	; 0x44
100114f0:	881b      	ldrh	r3, [r3, #0]
100114f2:	0a09      	lsrs	r1, r1, #8
100114f4:	9301      	str	r3, [sp, #4]
100114f6:	ab12      	add	r3, sp, #72	; 0x48
100114f8:	881b      	ldrh	r3, [r3, #0]
100114fa:	7260      	strb	r0, [r4, #9]
100114fc:	9302      	str	r3, [sp, #8]
100114fe:	ab06      	add	r3, sp, #24
10011500:	1dde      	adds	r6, r3, #7
10011502:	2300      	movs	r3, #0
10011504:	7033      	strb	r3, [r6, #0]
10011506:	2304      	movs	r3, #4
10011508:	7023      	strb	r3, [r4, #0]
1001150a:	2300      	movs	r3, #0
1001150c:	70e3      	strb	r3, [r4, #3]
1001150e:	4b2b      	ldr	r3, [pc, #172]	; (100115bc <gapm_set_dev_config_cmd_handler+0xec>)
10011510:	72e1      	strb	r1, [r4, #11]
10011512:	881d      	ldrh	r5, [r3, #0]
10011514:	881b      	ldrh	r3, [r3, #0]
10011516:	1c11      	adds	r1, r2, #0
10011518:	0a1b      	lsrs	r3, r3, #8
1001151a:	7163      	strb	r3, [r4, #5]
1001151c:	2303      	movs	r3, #3
1001151e:	7125      	strb	r5, [r4, #4]
10011520:	2206      	movs	r2, #6
10011522:	4d27      	ldr	r5, [pc, #156]	; (100115c0 <gapm_set_dev_config_cmd_handler+0xf0>)
10011524:	4827      	ldr	r0, [pc, #156]	; (100115c4 <gapm_set_dev_config_cmd_handler+0xf4>)
10011526:	7223      	strb	r3, [r4, #8]
10011528:	7067      	strb	r7, [r4, #1]
1001152a:	70a7      	strb	r7, [r4, #2]
1001152c:	47a8      	blx	r5
1001152e:	9903      	ldr	r1, [sp, #12]
10011530:	2210      	movs	r2, #16
10011532:	4825      	ldr	r0, [pc, #148]	; (100115c8 <gapm_set_dev_config_cmd_handler+0xf8>)
10011534:	47a8      	blx	r5
10011536:	466a      	mov	r2, sp
10011538:	7c12      	ldrb	r2, [r2, #16]
1001153a:	1ce3      	adds	r3, r4, #3
1001153c:	77da      	strb	r2, [r3, #31]
1001153e:	466a      	mov	r2, sp
10011540:	7d12      	ldrb	r2, [r2, #20]
10011542:	1d23      	adds	r3, r4, #4
10011544:	77da      	strb	r2, [r3, #31]
10011546:	466a      	mov	r2, sp
10011548:	7812      	ldrb	r2, [r2, #0]
1001154a:	1d63      	adds	r3, r4, #5
1001154c:	77da      	strb	r2, [r3, #31]
1001154e:	9b00      	ldr	r3, [sp, #0]
10011550:	1da2      	adds	r2, r4, #6
10011552:	0a1b      	lsrs	r3, r3, #8
10011554:	77d3      	strb	r3, [r2, #31]
10011556:	466a      	mov	r2, sp
10011558:	7912      	ldrb	r2, [r2, #4]
1001155a:	1de3      	adds	r3, r4, #7
1001155c:	77da      	strb	r2, [r3, #31]
1001155e:	1c22      	adds	r2, r4, #0
10011560:	9b01      	ldr	r3, [sp, #4]
10011562:	3208      	adds	r2, #8
10011564:	0a1b      	lsrs	r3, r3, #8
10011566:	77d3      	strb	r3, [r2, #31]
10011568:	466a      	mov	r2, sp
1001156a:	1c23      	adds	r3, r4, #0
1001156c:	7a12      	ldrb	r2, [r2, #8]
1001156e:	3328      	adds	r3, #40	; 0x28
10011570:	701a      	strb	r2, [r3, #0]
10011572:	1c22      	adds	r2, r4, #0
10011574:	9b02      	ldr	r3, [sp, #8]
10011576:	3229      	adds	r2, #41	; 0x29
10011578:	0a1b      	lsrs	r3, r3, #8
1001157a:	7013      	strb	r3, [r2, #0]
1001157c:	23d0      	movs	r3, #208	; 0xd0
1001157e:	4d13      	ldr	r5, [pc, #76]	; (100115cc <gapm_set_dev_config_cmd_handler+0xfc>)
10011580:	011b      	lsls	r3, r3, #4
10011582:	802b      	strh	r3, [r5, #0]
10011584:	2322      	movs	r3, #34	; 0x22
10011586:	71a3      	strb	r3, [r4, #6]
10011588:	2300      	movs	r3, #0
1001158a:	212a      	movs	r1, #42	; 0x2a
1001158c:	71e3      	strb	r3, [r4, #7]
1001158e:	1c20      	adds	r0, r4, #0
10011590:	4b0f      	ldr	r3, [pc, #60]	; (100115d0 <gapm_set_dev_config_cmd_handler+0x100>)
10011592:	80af      	strh	r7, [r5, #4]
10011594:	4798      	blx	r3
10011596:	1c30      	adds	r0, r6, #0
10011598:	4b0e      	ldr	r3, [pc, #56]	; (100115d4 <gapm_set_dev_config_cmd_handler+0x104>)
1001159a:	4798      	blx	r3
1001159c:	7833      	ldrb	r3, [r6, #0]
1001159e:	20e2      	movs	r0, #226	; 0xe2
100115a0:	2b00      	cmp	r3, #0
100115a2:	d106      	bne.n	100115b2 <gapm_set_dev_config_cmd_handler+0xe2>
100115a4:	68ab      	ldr	r3, [r5, #8]
100115a6:	20e2      	movs	r0, #226	; 0xe2
100115a8:	781a      	ldrb	r2, [r3, #0]
100115aa:	785b      	ldrb	r3, [r3, #1]
100115ac:	2a03      	cmp	r2, #3
100115ae:	d100      	bne.n	100115b2 <gapm_set_dev_config_cmd_handler+0xe2>
100115b0:	1c18      	adds	r0, r3, #0
100115b2:	b009      	add	sp, #36	; 0x24
100115b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115b6:	46c0      	nop			; (mov r8, r8)
100115b8:	100178f0 	.word	0x100178f0
100115bc:	10017580 	.word	0x10017580
100115c0:	100133db 	.word	0x100133db
100115c4:	100178fc 	.word	0x100178fc
100115c8:	10017902 	.word	0x10017902
100115cc:	10017574 	.word	0x10017574
100115d0:	10010891 	.word	0x10010891
100115d4:	100108ed 	.word	0x100108ed

100115d8 <gapm_get_dev_config_cmd_handler>:
100115d8:	4684      	mov	ip, r0
100115da:	4663      	mov	r3, ip
100115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100115de:	b085      	sub	sp, #20
100115e0:	9100      	str	r1, [sp, #0]
100115e2:	20cf      	movs	r0, #207	; 0xcf
100115e4:	2b01      	cmp	r3, #1
100115e6:	d854      	bhi.n	10011692 <gapm_get_dev_config_cmd_handler+0xba>
100115e8:	2900      	cmp	r1, #0
100115ea:	d052      	beq.n	10011692 <gapm_get_dev_config_cmd_handler+0xba>
100115ec:	2200      	movs	r2, #0
100115ee:	492a      	ldr	r1, [pc, #168]	; (10011698 <gapm_get_dev_config_cmd_handler+0xc0>)
100115f0:	ab02      	add	r3, sp, #8
100115f2:	880c      	ldrh	r4, [r1, #0]
100115f4:	8809      	ldrh	r1, [r1, #0]
100115f6:	1d9f      	adds	r7, r3, #6
100115f8:	719a      	strb	r2, [r3, #6]
100115fa:	4b28      	ldr	r3, [pc, #160]	; (1001169c <gapm_get_dev_config_cmd_handler+0xc4>)
100115fc:	0a09      	lsrs	r1, r1, #8
100115fe:	250d      	movs	r5, #13
10011600:	2606      	movs	r6, #6
10011602:	7159      	strb	r1, [r3, #5]
10011604:	4661      	mov	r1, ip
10011606:	701e      	strb	r6, [r3, #0]
10011608:	705d      	strb	r5, [r3, #1]
1001160a:	709d      	strb	r5, [r3, #2]
1001160c:	70da      	strb	r2, [r3, #3]
1001160e:	711c      	strb	r4, [r3, #4]
10011610:	2901      	cmp	r1, #1
10011612:	d13e      	bne.n	10011692 <gapm_get_dev_config_cmd_handler+0xba>
10011614:	21d0      	movs	r1, #208	; 0xd0
10011616:	4c22      	ldr	r4, [pc, #136]	; (100116a0 <gapm_get_dev_config_cmd_handler+0xc8>)
10011618:	0109      	lsls	r1, r1, #4
1001161a:	8061      	strh	r1, [r4, #2]
1001161c:	4921      	ldr	r1, [pc, #132]	; (100116a4 <gapm_get_dev_config_cmd_handler+0xcc>)
1001161e:	71da      	strb	r2, [r3, #7]
10011620:	8021      	strh	r1, [r4, #0]
10011622:	4661      	mov	r1, ip
10011624:	721e      	strb	r6, [r3, #8]
10011626:	7199      	strb	r1, [r3, #6]
10011628:	1c18      	adds	r0, r3, #0
1001162a:	2109      	movs	r1, #9
1001162c:	4b1e      	ldr	r3, [pc, #120]	; (100116a8 <gapm_get_dev_config_cmd_handler+0xd0>)
1001162e:	80a5      	strh	r5, [r4, #4]
10011630:	4798      	blx	r3
10011632:	1c38      	adds	r0, r7, #0
10011634:	4b1d      	ldr	r3, [pc, #116]	; (100116ac <gapm_get_dev_config_cmd_handler+0xd4>)
10011636:	4798      	blx	r3
10011638:	783b      	ldrb	r3, [r7, #0]
1001163a:	20e2      	movs	r0, #226	; 0xe2
1001163c:	9301      	str	r3, [sp, #4]
1001163e:	2b00      	cmp	r3, #0
10011640:	d127      	bne.n	10011692 <gapm_get_dev_config_cmd_handler+0xba>
10011642:	8821      	ldrh	r1, [r4, #0]
10011644:	4a1a      	ldr	r2, [pc, #104]	; (100116b0 <gapm_get_dev_config_cmd_handler+0xd8>)
10011646:	68a7      	ldr	r7, [r4, #8]
10011648:	3b01      	subs	r3, #1
1001164a:	4291      	cmp	r1, r2
1001164c:	d001      	beq.n	10011652 <gapm_get_dev_config_cmd_handler+0x7a>
1001164e:	8023      	strh	r3, [r4, #0]
10011650:	e01a      	b.n	10011688 <gapm_get_dev_config_cmd_handler+0xb0>
10011652:	8063      	strh	r3, [r4, #2]
10011654:	9b00      	ldr	r3, [sp, #0]
10011656:	1c39      	adds	r1, r7, #0
10011658:	1c58      	adds	r0, r3, #1
1001165a:	1c32      	adds	r2, r6, #0
1001165c:	4b15      	ldr	r3, [pc, #84]	; (100116b4 <gapm_get_dev_config_cmd_handler+0xdc>)
1001165e:	4798      	blx	r3
10011660:	79bb      	ldrb	r3, [r7, #6]
10011662:	9a00      	ldr	r2, [sp, #0]
10011664:	7013      	strb	r3, [r2, #0]
10011666:	23d0      	movs	r3, #208	; 0xd0
10011668:	011b      	lsls	r3, r3, #4
1001166a:	8023      	strh	r3, [r4, #0]
1001166c:	ab02      	add	r3, sp, #8
1001166e:	80a5      	strh	r5, [r4, #4]
10011670:	1ddd      	adds	r5, r3, #7
10011672:	466b      	mov	r3, sp
10011674:	791b      	ldrb	r3, [r3, #4]
10011676:	1c28      	adds	r0, r5, #0
10011678:	702b      	strb	r3, [r5, #0]
1001167a:	4b0c      	ldr	r3, [pc, #48]	; (100116ac <gapm_get_dev_config_cmd_handler+0xd4>)
1001167c:	4798      	blx	r3
1001167e:	782b      	ldrb	r3, [r5, #0]
10011680:	20d0      	movs	r0, #208	; 0xd0
10011682:	2b00      	cmp	r3, #0
10011684:	d105      	bne.n	10011692 <gapm_get_dev_config_cmd_handler+0xba>
10011686:	68a7      	ldr	r7, [r4, #8]
10011688:	783b      	ldrb	r3, [r7, #0]
1001168a:	7878      	ldrb	r0, [r7, #1]
1001168c:	2b06      	cmp	r3, #6
1001168e:	d000      	beq.n	10011692 <gapm_get_dev_config_cmd_handler+0xba>
10011690:	20e2      	movs	r0, #226	; 0xe2
10011692:	b005      	add	sp, #20
10011694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011696:	46c0      	nop			; (mov r8, r8)
10011698:	10017580 	.word	0x10017580
1001169c:	100178f0 	.word	0x100178f0
100116a0:	10017574 	.word	0x10017574
100116a4:	00000d08 	.word	0x00000d08
100116a8:	10010891 	.word	0x10010891
100116ac:	100108ed 	.word	0x100108ed
100116b0:	0000ffff 	.word	0x0000ffff
100116b4:	100133db 	.word	0x100133db

100116b8 <gapm_cancel_cmd_handler>:
100116b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
100116ba:	4916      	ldr	r1, [pc, #88]	; (10011714 <gapm_cancel_cmd_handler+0x5c>)
100116bc:	4816      	ldr	r0, [pc, #88]	; (10011718 <gapm_cancel_cmd_handler+0x60>)
100116be:	880c      	ldrh	r4, [r1, #0]
100116c0:	8809      	ldrh	r1, [r1, #0]
100116c2:	466b      	mov	r3, sp
100116c4:	0a09      	lsrs	r1, r1, #8
100116c6:	7141      	strb	r1, [r0, #5]
100116c8:	2102      	movs	r1, #2
100116ca:	2203      	movs	r2, #3
100116cc:	7201      	strb	r1, [r0, #8]
100116ce:	21d0      	movs	r1, #208	; 0xd0
100116d0:	1ddd      	adds	r5, r3, #7
100116d2:	2300      	movs	r3, #0
100116d4:	7104      	strb	r4, [r0, #4]
100116d6:	4c11      	ldr	r4, [pc, #68]	; (1001171c <gapm_cancel_cmd_handler+0x64>)
100116d8:	7002      	strb	r2, [r0, #0]
100116da:	0109      	lsls	r1, r1, #4
100116dc:	320a      	adds	r2, #10
100116de:	702b      	strb	r3, [r5, #0]
100116e0:	7042      	strb	r2, [r0, #1]
100116e2:	7082      	strb	r2, [r0, #2]
100116e4:	70c3      	strb	r3, [r0, #3]
100116e6:	8021      	strh	r1, [r4, #0]
100116e8:	80a2      	strh	r2, [r4, #4]
100116ea:	71c3      	strb	r3, [r0, #7]
100116ec:	3a0c      	subs	r2, #12
100116ee:	2109      	movs	r1, #9
100116f0:	4b0b      	ldr	r3, [pc, #44]	; (10011720 <gapm_cancel_cmd_handler+0x68>)
100116f2:	7182      	strb	r2, [r0, #6]
100116f4:	4798      	blx	r3
100116f6:	1c28      	adds	r0, r5, #0
100116f8:	4b0a      	ldr	r3, [pc, #40]	; (10011724 <gapm_cancel_cmd_handler+0x6c>)
100116fa:	4798      	blx	r3
100116fc:	7828      	ldrb	r0, [r5, #0]
100116fe:	2800      	cmp	r0, #0
10011700:	d001      	beq.n	10011706 <gapm_cancel_cmd_handler+0x4e>
10011702:	20e2      	movs	r0, #226	; 0xe2
10011704:	e004      	b.n	10011710 <gapm_cancel_cmd_handler+0x58>
10011706:	68a3      	ldr	r3, [r4, #8]
10011708:	785b      	ldrb	r3, [r3, #1]
1001170a:	2b44      	cmp	r3, #68	; 0x44
1001170c:	d000      	beq.n	10011710 <gapm_cancel_cmd_handler+0x58>
1001170e:	1c18      	adds	r0, r3, #0
10011710:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10011712:	46c0      	nop			; (mov r8, r8)
10011714:	10017580 	.word	0x10017580
10011718:	100178f0 	.word	0x100178f0
1001171c:	10017574 	.word	0x10017574
10011720:	10010891 	.word	0x10010891
10011724:	100108ed 	.word	0x100108ed

10011728 <gapm_dev_bdaddr_ind_handler>:
10011728:	b538      	push	{r3, r4, r5, lr}
1001172a:	1c05      	adds	r5, r0, #0
1001172c:	1c0c      	adds	r4, r1, #0
1001172e:	1c48      	adds	r0, r1, #1
10011730:	2206      	movs	r2, #6
10011732:	1c29      	adds	r1, r5, #0
10011734:	4b02      	ldr	r3, [pc, #8]	; (10011740 <gapm_dev_bdaddr_ind_handler+0x18>)
10011736:	4798      	blx	r3
10011738:	79ab      	ldrb	r3, [r5, #6]
1001173a:	2000      	movs	r0, #0
1001173c:	7023      	strb	r3, [r4, #0]
1001173e:	bd38      	pop	{r3, r4, r5, pc}
10011740:	100133db 	.word	0x100133db

10011744 <gapm_cmp_evt>:
10011744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011746:	7803      	ldrb	r3, [r0, #0]
10011748:	7845      	ldrb	r5, [r0, #1]
1001174a:	3b0c      	subs	r3, #12
1001174c:	1e18      	subs	r0, r3, #0
1001174e:	280b      	cmp	r0, #11
10011750:	d900      	bls.n	10011754 <gapm_cmp_evt+0x10>
10011752:	e08d      	b.n	10011870 <gapm_cmp_evt+0x12c>
10011754:	1c0c      	adds	r4, r1, #0
10011756:	f000 fd5f 	bl	10012218 <__gnu_thumb1_case_uqi>
1001175a:	1952      	.short	0x1952
1001175c:	068b1919 	.word	0x068b1919
10011760:	8b595906 	.word	0x8b595906
10011764:	0d8b      	.short	0x0d8b
10011766:	2300      	movs	r3, #0
10011768:	2d45      	cmp	r5, #69	; 0x45
1001176a:	d000      	beq.n	1001176e <gapm_cmp_evt+0x2a>
1001176c:	1c2b      	adds	r3, r5, #0
1001176e:	7023      	strb	r3, [r4, #0]
10011770:	2002      	movs	r0, #2
10011772:	e07e      	b.n	10011872 <gapm_cmp_evt+0x12e>
10011774:	203b      	movs	r0, #59	; 0x3b
10011776:	2d00      	cmp	r5, #0
10011778:	d100      	bne.n	1001177c <gapm_cmp_evt+0x38>
1001177a:	e07a      	b.n	10011872 <gapm_cmp_evt+0x12e>
1001177c:	700d      	strb	r5, [r1, #0]
1001177e:	1c48      	adds	r0, r1, #1
10011780:	2210      	movs	r2, #16
10011782:	2100      	movs	r1, #0
10011784:	4b3b      	ldr	r3, [pc, #236]	; (10011874 <gapm_cmp_evt+0x130>)
10011786:	4798      	blx	r3
10011788:	200f      	movs	r0, #15
1001178a:	e072      	b.n	10011872 <gapm_cmp_evt+0x12e>
1001178c:	2d00      	cmp	r5, #0
1001178e:	d134      	bne.n	100117fa <gapm_cmp_evt+0xb6>
10011790:	4b39      	ldr	r3, [pc, #228]	; (10011878 <gapm_cmp_evt+0x134>)
10011792:	4798      	blx	r3
10011794:	1e43      	subs	r3, r0, #1
10011796:	b2db      	uxtb	r3, r3
10011798:	1c28      	adds	r0, r5, #0
1001179a:	2b06      	cmp	r3, #6
1001179c:	d869      	bhi.n	10011872 <gapm_cmp_evt+0x12e>
1001179e:	466b      	mov	r3, sp
100117a0:	4e36      	ldr	r6, [pc, #216]	; (1001187c <gapm_cmp_evt+0x138>)
100117a2:	1dd9      	adds	r1, r3, #7
100117a4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100117a6:	4b36      	ldr	r3, [pc, #216]	; (10011880 <gapm_cmp_evt+0x13c>)
100117a8:	4798      	blx	r3
100117aa:	2312      	movs	r3, #18
100117ac:	4358      	muls	r0, r3
100117ae:	4935      	ldr	r1, [pc, #212]	; (10011884 <gapm_cmp_evt+0x140>)
100117b0:	1809      	adds	r1, r1, r0
100117b2:	1c0b      	adds	r3, r1, #0
100117b4:	894a      	ldrh	r2, [r1, #10]
100117b6:	3308      	adds	r3, #8
100117b8:	8122      	strh	r2, [r4, #8]
100117ba:	784f      	ldrb	r7, [r1, #1]
100117bc:	72a5      	strb	r5, [r4, #10]
100117be:	7027      	strb	r7, [r4, #0]
100117c0:	898a      	ldrh	r2, [r1, #12]
100117c2:	1c60      	adds	r0, r4, #1
100117c4:	81a2      	strh	r2, [r4, #12]
100117c6:	88db      	ldrh	r3, [r3, #6]
100117c8:	3102      	adds	r1, #2
100117ca:	81e3      	strh	r3, [r4, #14]
100117cc:	89cb      	ldrh	r3, [r1, #14]
100117ce:	2206      	movs	r2, #6
100117d0:	8223      	strh	r3, [r4, #16]
100117d2:	4b2d      	ldr	r3, [pc, #180]	; (10011888 <gapm_cmp_evt+0x144>)
100117d4:	4798      	blx	r3
100117d6:	2f00      	cmp	r7, #0
100117d8:	d00a      	beq.n	100117f0 <gapm_cmp_evt+0xac>
100117da:	79a3      	ldrb	r3, [r4, #6]
100117dc:	223f      	movs	r2, #63	; 0x3f
100117de:	1c19      	adds	r1, r3, #0
100117e0:	3501      	adds	r5, #1
100117e2:	4391      	bics	r1, r2
100117e4:	29c0      	cmp	r1, #192	; 0xc0
100117e6:	d003      	beq.n	100117f0 <gapm_cmp_evt+0xac>
100117e8:	065b      	lsls	r3, r3, #25
100117ea:	0fdb      	lsrs	r3, r3, #31
100117ec:	3502      	adds	r5, #2
100117ee:	1aed      	subs	r5, r5, r3
100117f0:	2301      	movs	r3, #1
100117f2:	425b      	negs	r3, r3
100117f4:	7025      	strb	r5, [r4, #0]
100117f6:	85b3      	strh	r3, [r6, #44]	; 0x2c
100117f8:	e038      	b.n	1001186c <gapm_cmp_evt+0x128>
100117fa:	700d      	strb	r5, [r1, #0]
100117fc:	e004      	b.n	10011808 <gapm_cmp_evt+0xc4>
100117fe:	2300      	movs	r3, #0
10011800:	2d45      	cmp	r5, #69	; 0x45
10011802:	d000      	beq.n	10011806 <gapm_cmp_evt+0xc2>
10011804:	1c2b      	adds	r3, r5, #0
10011806:	7023      	strb	r3, [r4, #0]
10011808:	2003      	movs	r0, #3
1001180a:	e032      	b.n	10011872 <gapm_cmp_evt+0x12e>
1001180c:	4e1b      	ldr	r6, [pc, #108]	; (1001187c <gapm_cmp_evt+0x138>)
1001180e:	2100      	movs	r1, #0
10011810:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011812:	4b1b      	ldr	r3, [pc, #108]	; (10011880 <gapm_cmp_evt+0x13c>)
10011814:	4798      	blx	r3
10011816:	2807      	cmp	r0, #7
10011818:	d818      	bhi.n	1001184c <gapm_cmp_evt+0x108>
1001181a:	2301      	movs	r3, #1
1001181c:	425b      	negs	r3, r3
1001181e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011820:	3313      	adds	r3, #19
10011822:	4358      	muls	r0, r3
10011824:	4917      	ldr	r1, [pc, #92]	; (10011884 <gapm_cmp_evt+0x140>)
10011826:	1809      	adds	r1, r1, r0
10011828:	1c0b      	adds	r3, r1, #0
1001182a:	894a      	ldrh	r2, [r1, #10]
1001182c:	3308      	adds	r3, #8
1001182e:	8122      	strh	r2, [r4, #8]
10011830:	784a      	ldrb	r2, [r1, #1]
10011832:	72a5      	strb	r5, [r4, #10]
10011834:	7022      	strb	r2, [r4, #0]
10011836:	898a      	ldrh	r2, [r1, #12]
10011838:	1c60      	adds	r0, r4, #1
1001183a:	81a2      	strh	r2, [r4, #12]
1001183c:	88db      	ldrh	r3, [r3, #6]
1001183e:	3102      	adds	r1, #2
10011840:	81e3      	strh	r3, [r4, #14]
10011842:	89cb      	ldrh	r3, [r1, #14]
10011844:	2206      	movs	r2, #6
10011846:	8223      	strh	r3, [r4, #16]
10011848:	4b0f      	ldr	r3, [pc, #60]	; (10011888 <gapm_cmp_evt+0x144>)
1001184a:	4798      	blx	r3
1001184c:	2200      	movs	r2, #0
1001184e:	7823      	ldrb	r3, [r4, #0]
10011850:	4293      	cmp	r3, r2
10011852:	d00a      	beq.n	1001186a <gapm_cmp_evt+0x126>
10011854:	79a3      	ldrb	r3, [r4, #6]
10011856:	323f      	adds	r2, #63	; 0x3f
10011858:	1c19      	adds	r1, r3, #0
1001185a:	4391      	bics	r1, r2
1001185c:	3a3e      	subs	r2, #62	; 0x3e
1001185e:	29c0      	cmp	r1, #192	; 0xc0
10011860:	d003      	beq.n	1001186a <gapm_cmp_evt+0x126>
10011862:	065b      	lsls	r3, r3, #25
10011864:	0fdb      	lsrs	r3, r3, #31
10011866:	3202      	adds	r2, #2
10011868:	1ad2      	subs	r2, r2, r3
1001186a:	7022      	strb	r2, [r4, #0]
1001186c:	2005      	movs	r0, #5
1001186e:	e000      	b.n	10011872 <gapm_cmp_evt+0x12e>
10011870:	2000      	movs	r0, #0
10011872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011874:	100133ed 	.word	0x100133ed
10011878:	10010a95 	.word	0x10010a95
1001187c:	10017612 	.word	0x10017612
10011880:	10010a59 	.word	0x10010a59
10011884:	10017582 	.word	0x10017582
10011888:	100133db 	.word	0x100133db

1001188c <gapm_start_adv_cmd_handler>:
1001188c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001188e:	b089      	sub	sp, #36	; 0x24
10011890:	9303      	str	r3, [sp, #12]
10011892:	ab0e      	add	r3, sp, #56	; 0x38
10011894:	9102      	str	r1, [sp, #8]
10011896:	cb02      	ldmia	r3!, {r1}
10011898:	aa08      	add	r2, sp, #32
1001189a:	881b      	ldrh	r3, [r3, #0]
1001189c:	4e3c      	ldr	r6, [pc, #240]	; (10011990 <gapm_start_adv_cmd_handler+0x104>)
1001189e:	9300      	str	r3, [sp, #0]
100118a0:	ab10      	add	r3, sp, #64	; 0x40
100118a2:	881b      	ldrh	r3, [r3, #0]
100118a4:	240d      	movs	r4, #13
100118a6:	469c      	mov	ip, r3
100118a8:	ab11      	add	r3, sp, #68	; 0x44
100118aa:	781b      	ldrb	r3, [r3, #0]
100118ac:	9304      	str	r3, [sp, #16]
100118ae:	ab12      	add	r3, sp, #72	; 0x48
100118b0:	781b      	ldrb	r3, [r3, #0]
100118b2:	9305      	str	r3, [sp, #20]
100118b4:	ab13      	add	r3, sp, #76	; 0x4c
100118b6:	781b      	ldrb	r3, [r3, #0]
100118b8:	9306      	str	r3, [sp, #24]
100118ba:	ab14      	add	r3, sp, #80	; 0x50
100118bc:	781b      	ldrb	r3, [r3, #0]
100118be:	9301      	str	r3, [sp, #4]
100118c0:	2319      	movs	r3, #25
100118c2:	189b      	adds	r3, r3, r2
100118c4:	7fdd      	ldrb	r5, [r3, #31]
100118c6:	ab18      	add	r3, sp, #96	; 0x60
100118c8:	881f      	ldrh	r7, [r3, #0]
100118ca:	ab19      	add	r3, sp, #100	; 0x64
100118cc:	781b      	ldrb	r3, [r3, #0]
100118ce:	8832      	ldrh	r2, [r6, #0]
100118d0:	9307      	str	r3, [sp, #28]
100118d2:	4b30      	ldr	r3, [pc, #192]	; (10011994 <gapm_start_adv_cmd_handler+0x108>)
100118d4:	8836      	ldrh	r6, [r6, #0]
100118d6:	711a      	strb	r2, [r3, #4]
100118d8:	466a      	mov	r2, sp
100118da:	7a12      	ldrb	r2, [r2, #8]
100118dc:	701c      	strb	r4, [r3, #0]
100118de:	705c      	strb	r4, [r3, #1]
100118e0:	709c      	strb	r4, [r3, #2]
100118e2:	725a      	strb	r2, [r3, #9]
100118e4:	2400      	movs	r4, #0
100118e6:	466a      	mov	r2, sp
100118e8:	0a36      	lsrs	r6, r6, #8
100118ea:	70dc      	strb	r4, [r3, #3]
100118ec:	7218      	strb	r0, [r3, #8]
100118ee:	729c      	strb	r4, [r3, #10]
100118f0:	715e      	strb	r6, [r3, #5]
100118f2:	72dc      	strb	r4, [r3, #11]
100118f4:	7812      	ldrb	r2, [r2, #0]
100118f6:	380e      	subs	r0, #14
100118f8:	731a      	strb	r2, [r3, #12]
100118fa:	9a00      	ldr	r2, [sp, #0]
100118fc:	0a14      	lsrs	r4, r2, #8
100118fe:	4662      	mov	r2, ip
10011900:	739a      	strb	r2, [r3, #14]
10011902:	4662      	mov	r2, ip
10011904:	735c      	strb	r4, [r3, #13]
10011906:	0a14      	lsrs	r4, r2, #8
10011908:	466a      	mov	r2, sp
1001190a:	7c12      	ldrb	r2, [r2, #16]
1001190c:	73dc      	strb	r4, [r3, #15]
1001190e:	741a      	strb	r2, [r3, #16]
10011910:	1c1c      	adds	r4, r3, #0
10011912:	2801      	cmp	r0, #1
10011914:	d809      	bhi.n	1001192a <gapm_start_adv_cmd_handler+0x9e>
10011916:	2900      	cmp	r1, #0
10011918:	d003      	beq.n	10011922 <gapm_start_adv_cmd_handler+0x96>
1001191a:	481f      	ldr	r0, [pc, #124]	; (10011998 <gapm_start_adv_cmd_handler+0x10c>)
1001191c:	2206      	movs	r2, #6
1001191e:	4b1f      	ldr	r3, [pc, #124]	; (1001199c <gapm_start_adv_cmd_handler+0x110>)
10011920:	4798      	blx	r3
10011922:	466b      	mov	r3, sp
10011924:	7b1b      	ldrb	r3, [r3, #12]
10011926:	75e3      	strb	r3, [r4, #23]
10011928:	e014      	b.n	10011954 <gapm_start_adv_cmd_handler+0xc8>
1001192a:	466b      	mov	r3, sp
1001192c:	7d1b      	ldrb	r3, [r3, #20]
1001192e:	9915      	ldr	r1, [sp, #84]	; 0x54
10011930:	7463      	strb	r3, [r4, #17]
10011932:	466b      	mov	r3, sp
10011934:	7e1b      	ldrb	r3, [r3, #24]
10011936:	9a01      	ldr	r2, [sp, #4]
10011938:	74a3      	strb	r3, [r4, #18]
1001193a:	466b      	mov	r3, sp
1001193c:	791b      	ldrb	r3, [r3, #4]
1001193e:	4818      	ldr	r0, [pc, #96]	; (100119a0 <gapm_start_adv_cmd_handler+0x114>)
10011940:	4e16      	ldr	r6, [pc, #88]	; (1001199c <gapm_start_adv_cmd_handler+0x110>)
10011942:	74e3      	strb	r3, [r4, #19]
10011944:	47b0      	blx	r6
10011946:	1c23      	adds	r3, r4, #0
10011948:	4816      	ldr	r0, [pc, #88]	; (100119a4 <gapm_start_adv_cmd_handler+0x118>)
1001194a:	3330      	adds	r3, #48	; 0x30
1001194c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001194e:	1c2a      	adds	r2, r5, #0
10011950:	701d      	strb	r5, [r3, #0]
10011952:	47b0      	blx	r6
10011954:	1c22      	adds	r2, r4, #0
10011956:	23a5      	movs	r3, #165	; 0xa5
10011958:	3250      	adds	r2, #80	; 0x50
1001195a:	7013      	strb	r3, [r2, #0]
1001195c:	1c22      	adds	r2, r4, #0
1001195e:	3251      	adds	r2, #81	; 0x51
10011960:	7013      	strb	r3, [r2, #0]
10011962:	1c23      	adds	r3, r4, #0
10011964:	1c22      	adds	r2, r4, #0
10011966:	3352      	adds	r3, #82	; 0x52
10011968:	701f      	strb	r7, [r3, #0]
1001196a:	3253      	adds	r2, #83	; 0x53
1001196c:	0a3b      	lsrs	r3, r7, #8
1001196e:	7013      	strb	r3, [r2, #0]
10011970:	466a      	mov	r2, sp
10011972:	1c23      	adds	r3, r4, #0
10011974:	7f12      	ldrb	r2, [r2, #28]
10011976:	3354      	adds	r3, #84	; 0x54
10011978:	701a      	strb	r2, [r3, #0]
1001197a:	234d      	movs	r3, #77	; 0x4d
1001197c:	2500      	movs	r5, #0
1001197e:	71a3      	strb	r3, [r4, #6]
10011980:	1c20      	adds	r0, r4, #0
10011982:	2155      	movs	r1, #85	; 0x55
10011984:	4b08      	ldr	r3, [pc, #32]	; (100119a8 <gapm_start_adv_cmd_handler+0x11c>)
10011986:	71e5      	strb	r5, [r4, #7]
10011988:	4798      	blx	r3
1001198a:	1c28      	adds	r0, r5, #0
1001198c:	b009      	add	sp, #36	; 0x24
1001198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011990:	10017580 	.word	0x10017580
10011994:	100178f0 	.word	0x100178f0
10011998:	10017901 	.word	0x10017901
1001199c:	100133db 	.word	0x100133db
100119a0:	10017904 	.word	0x10017904
100119a4:	10017921 	.word	0x10017921
100119a8:	10010891 	.word	0x10010891

100119ac <get_gap_local_addr_type>:
100119ac:	4b04      	ldr	r3, [pc, #16]	; (100119c0 <get_gap_local_addr_type+0x14>)
100119ae:	2001      	movs	r0, #1
100119b0:	791b      	ldrb	r3, [r3, #4]
100119b2:	2b02      	cmp	r3, #2
100119b4:	d003      	beq.n	100119be <get_gap_local_addr_type+0x12>
100119b6:	3b03      	subs	r3, #3
100119b8:	4258      	negs	r0, r3
100119ba:	4158      	adcs	r0, r3
100119bc:	0040      	lsls	r0, r0, #1
100119be:	4770      	bx	lr
100119c0:	10017612 	.word	0x10017612

100119c4 <gapm_adv_report_evt_handler>:
100119c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100119c6:	7843      	ldrb	r3, [r0, #1]
100119c8:	1c05      	adds	r5, r0, #0
100119ca:	9301      	str	r3, [sp, #4]
100119cc:	466b      	mov	r3, sp
100119ce:	1c0c      	adds	r4, r1, #0
100119d0:	791b      	ldrb	r3, [r3, #4]
100119d2:	7806      	ldrb	r6, [r0, #0]
100119d4:	2206      	movs	r2, #6
100119d6:	704b      	strb	r3, [r1, #1]
100119d8:	1c88      	adds	r0, r1, #2
100119da:	4f1b      	ldr	r7, [pc, #108]	; (10011a48 <gapm_adv_report_evt_handler+0x84>)
100119dc:	1ca9      	adds	r1, r5, #2
100119de:	47b8      	blx	r7
100119e0:	1c20      	adds	r0, r4, #0
100119e2:	1c29      	adds	r1, r5, #0
100119e4:	7a2a      	ldrb	r2, [r5, #8]
100119e6:	3008      	adds	r0, #8
100119e8:	77c2      	strb	r2, [r0, #31]
100119ea:	3109      	adds	r1, #9
100119ec:	3528      	adds	r5, #40	; 0x28
100119ee:	47b8      	blx	r7
100119f0:	782b      	ldrb	r3, [r5, #0]
100119f2:	b25a      	sxtb	r2, r3
100119f4:	2a00      	cmp	r2, #0
100119f6:	da01      	bge.n	100119fc <gapm_adv_report_evt_handler+0x38>
100119f8:	3301      	adds	r3, #1
100119fa:	b2db      	uxtb	r3, r3
100119fc:	1c22      	adds	r2, r4, #0
100119fe:	3228      	adds	r2, #40	; 0x28
10011a00:	7013      	strb	r3, [r2, #0]
10011a02:	2200      	movs	r2, #0
10011a04:	9b01      	ldr	r3, [sp, #4]
10011a06:	4293      	cmp	r3, r2
10011a08:	d00a      	beq.n	10011a20 <gapm_adv_report_evt_handler+0x5c>
10011a0a:	79e3      	ldrb	r3, [r4, #7]
10011a0c:	323f      	adds	r2, #63	; 0x3f
10011a0e:	1c19      	adds	r1, r3, #0
10011a10:	4391      	bics	r1, r2
10011a12:	3a3e      	subs	r2, #62	; 0x3e
10011a14:	29c0      	cmp	r1, #192	; 0xc0
10011a16:	d003      	beq.n	10011a20 <gapm_adv_report_evt_handler+0x5c>
10011a18:	065b      	lsls	r3, r3, #25
10011a1a:	0fdb      	lsrs	r3, r3, #31
10011a1c:	3202      	adds	r2, #2
10011a1e:	1ad2      	subs	r2, r2, r3
10011a20:	7062      	strb	r2, [r4, #1]
10011a22:	2e04      	cmp	r6, #4
10011a24:	d80f      	bhi.n	10011a46 <gapm_adv_report_evt_handler+0x82>
10011a26:	1c30      	adds	r0, r6, #0
10011a28:	f000 fbf6 	bl	10012218 <__gnu_thumb1_case_uqi>
10011a2c:	09070503 	.word	0x09070503
10011a30:	0b          	.byte	0x0b
10011a31:	00          	.byte	0x00
10011a32:	2300      	movs	r3, #0
10011a34:	e006      	b.n	10011a44 <gapm_adv_report_evt_handler+0x80>
10011a36:	2301      	movs	r3, #1
10011a38:	e004      	b.n	10011a44 <gapm_adv_report_evt_handler+0x80>
10011a3a:	2302      	movs	r3, #2
10011a3c:	e002      	b.n	10011a44 <gapm_adv_report_evt_handler+0x80>
10011a3e:	2303      	movs	r3, #3
10011a40:	e000      	b.n	10011a44 <gapm_adv_report_evt_handler+0x80>
10011a42:	2305      	movs	r3, #5
10011a44:	7023      	strb	r3, [r4, #0]
10011a46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011a48:	100133db 	.word	0x100133db

10011a4c <gapm_resolv_addr_cmd_handler>:
10011a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a4e:	2314      	movs	r3, #20
10011a50:	4c12      	ldr	r4, [pc, #72]	; (10011a9c <gapm_resolv_addr_cmd_handler+0x50>)
10011a52:	1c17      	adds	r7, r2, #0
10011a54:	7023      	strb	r3, [r4, #0]
10011a56:	3b07      	subs	r3, #7
10011a58:	7063      	strb	r3, [r4, #1]
10011a5a:	70a3      	strb	r3, [r4, #2]
10011a5c:	2300      	movs	r3, #0
10011a5e:	70e3      	strb	r3, [r4, #3]
10011a60:	4b0f      	ldr	r3, [pc, #60]	; (10011aa0 <gapm_resolv_addr_cmd_handler+0x54>)
10011a62:	1c05      	adds	r5, r0, #0
10011a64:	881a      	ldrh	r2, [r3, #0]
10011a66:	881b      	ldrh	r3, [r3, #0]
10011a68:	4e0e      	ldr	r6, [pc, #56]	; (10011aa4 <gapm_resolv_addr_cmd_handler+0x58>)
10011a6a:	0a1b      	lsrs	r3, r3, #8
10011a6c:	7163      	strb	r3, [r4, #5]
10011a6e:	2317      	movs	r3, #23
10011a70:	012d      	lsls	r5, r5, #4
10011a72:	7122      	strb	r2, [r4, #4]
10011a74:	7260      	strb	r0, [r4, #9]
10011a76:	2206      	movs	r2, #6
10011a78:	480b      	ldr	r0, [pc, #44]	; (10011aa8 <gapm_resolv_addr_cmd_handler+0x5c>)
10011a7a:	7223      	strb	r3, [r4, #8]
10011a7c:	47b0      	blx	r6
10011a7e:	1c39      	adds	r1, r7, #0
10011a80:	1c2a      	adds	r2, r5, #0
10011a82:	480a      	ldr	r0, [pc, #40]	; (10011aac <gapm_resolv_addr_cmd_handler+0x60>)
10011a84:	47b0      	blx	r6
10011a86:	1c29      	adds	r1, r5, #0
10011a88:	3110      	adds	r1, #16
10011a8a:	1c0b      	adds	r3, r1, #0
10011a8c:	3b08      	subs	r3, #8
10011a8e:	71a3      	strb	r3, [r4, #6]
10011a90:	121b      	asrs	r3, r3, #8
10011a92:	71e3      	strb	r3, [r4, #7]
10011a94:	1c20      	adds	r0, r4, #0
10011a96:	4b06      	ldr	r3, [pc, #24]	; (10011ab0 <gapm_resolv_addr_cmd_handler+0x64>)
10011a98:	4798      	blx	r3
10011a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011a9c:	100178f0 	.word	0x100178f0
10011aa0:	10017580 	.word	0x10017580
10011aa4:	100133db 	.word	0x100133db
10011aa8:	100178fa 	.word	0x100178fa
10011aac:	10017900 	.word	0x10017900
10011ab0:	10010891 	.word	0x10010891

10011ab4 <gapm_addr_solved_ind_handler>:
10011ab4:	b570      	push	{r4, r5, r6, lr}
10011ab6:	1c04      	adds	r4, r0, #0
10011ab8:	1c08      	adds	r0, r1, #0
10011aba:	1c0d      	adds	r5, r1, #0
10011abc:	4e05      	ldr	r6, [pc, #20]	; (10011ad4 <gapm_addr_solved_ind_handler+0x20>)
10011abe:	1c21      	adds	r1, r4, #0
10011ac0:	2206      	movs	r2, #6
10011ac2:	3011      	adds	r0, #17
10011ac4:	47b0      	blx	r6
10011ac6:	1c68      	adds	r0, r5, #1
10011ac8:	1da1      	adds	r1, r4, #6
10011aca:	2210      	movs	r2, #16
10011acc:	47b0      	blx	r6
10011ace:	2300      	movs	r3, #0
10011ad0:	702b      	strb	r3, [r5, #0]
10011ad2:	bd70      	pop	{r4, r5, r6, pc}
10011ad4:	100133db 	.word	0x100133db

10011ad8 <gapm_profile_added_ind_handler>:
10011ad8:	b510      	push	{r4, lr}
10011ada:	7843      	ldrb	r3, [r0, #1]
10011adc:	7902      	ldrb	r2, [r0, #4]
10011ade:	7944      	ldrb	r4, [r0, #5]
10011ae0:	7800      	ldrb	r0, [r0, #0]
10011ae2:	021b      	lsls	r3, r3, #8
10011ae4:	4303      	orrs	r3, r0
10011ae6:	2b1b      	cmp	r3, #27
10011ae8:	d104      	bne.n	10011af4 <gapm_profile_added_ind_handler+0x1c>
10011aea:	2300      	movs	r3, #0
10011aec:	700b      	strb	r3, [r1, #0]
10011aee:	0223      	lsls	r3, r4, #8
10011af0:	4313      	orrs	r3, r2
10011af2:	804b      	strh	r3, [r1, #2]
10011af4:	203b      	movs	r0, #59	; 0x3b
10011af6:	bd10      	pop	{r4, pc}

10011af8 <gattc_read_req_ind_parser>:
10011af8:	7843      	ldrb	r3, [r0, #1]
10011afa:	7802      	ldrb	r2, [r0, #0]
10011afc:	021b      	lsls	r3, r3, #8
10011afe:	4313      	orrs	r3, r2
10011b00:	804b      	strh	r3, [r1, #2]
10011b02:	4770      	bx	lr

10011b04 <gattc_write_req_ind_parser>:
10011b04:	b508      	push	{r3, lr}
10011b06:	1c13      	adds	r3, r2, #0
10011b08:	0a00      	lsrs	r0, r0, #8
10011b0a:	8010      	strh	r0, [r2, #0]
10011b0c:	784a      	ldrb	r2, [r1, #1]
10011b0e:	7808      	ldrb	r0, [r1, #0]
10011b10:	0212      	lsls	r2, r2, #8
10011b12:	4302      	orrs	r2, r0
10011b14:	805a      	strh	r2, [r3, #2]
10011b16:	78ca      	ldrb	r2, [r1, #3]
10011b18:	7888      	ldrb	r0, [r1, #2]
10011b1a:	0212      	lsls	r2, r2, #8
10011b1c:	4302      	orrs	r2, r0
10011b1e:	809a      	strh	r2, [r3, #4]
10011b20:	794a      	ldrb	r2, [r1, #5]
10011b22:	7908      	ldrb	r0, [r1, #4]
10011b24:	0212      	lsls	r2, r2, #8
10011b26:	4302      	orrs	r2, r0
10011b28:	80da      	strh	r2, [r3, #6]
10011b2a:	3308      	adds	r3, #8
10011b2c:	1c18      	adds	r0, r3, #0
10011b2e:	3106      	adds	r1, #6
10011b30:	4b01      	ldr	r3, [pc, #4]	; (10011b38 <gattc_write_req_ind_parser+0x34>)
10011b32:	4798      	blx	r3
10011b34:	bd08      	pop	{r3, pc}
10011b36:	46c0      	nop			; (mov r8, r8)
10011b38:	100133db 	.word	0x100133db

10011b3c <gattc_att_info_req_parser>:
10011b3c:	7843      	ldrb	r3, [r0, #1]
10011b3e:	7802      	ldrb	r2, [r0, #0]
10011b40:	021b      	lsls	r3, r3, #8
10011b42:	4313      	orrs	r3, r2
10011b44:	800b      	strh	r3, [r1, #0]
10011b46:	4770      	bx	lr

10011b48 <gattc_read_cfm>:
10011b48:	b538      	push	{r3, r4, r5, lr}
10011b4a:	2514      	movs	r5, #20
10011b4c:	1c1c      	adds	r4, r3, #0
10011b4e:	4b14      	ldr	r3, [pc, #80]	; (10011ba0 <gattc_read_cfm+0x58>)
10011b50:	70d9      	strb	r1, [r3, #3]
10011b52:	4914      	ldr	r1, [pc, #80]	; (10011ba4 <gattc_read_cfm+0x5c>)
10011b54:	701d      	strb	r5, [r3, #0]
10011b56:	3d08      	subs	r5, #8
10011b58:	705d      	strb	r5, [r3, #1]
10011b5a:	709d      	strb	r5, [r3, #2]
10011b5c:	880d      	ldrh	r5, [r1, #0]
10011b5e:	8809      	ldrh	r1, [r1, #0]
10011b60:	7218      	strb	r0, [r3, #8]
10011b62:	0a09      	lsrs	r1, r1, #8
10011b64:	7159      	strb	r1, [r3, #5]
10011b66:	0a00      	lsrs	r0, r0, #8
10011b68:	0a21      	lsrs	r1, r4, #8
10011b6a:	711d      	strb	r5, [r3, #4]
10011b6c:	7258      	strb	r0, [r3, #9]
10011b6e:	729c      	strb	r4, [r3, #10]
10011b70:	72d9      	strb	r1, [r3, #11]
10011b72:	731a      	strb	r2, [r3, #12]
10011b74:	1c1d      	adds	r5, r3, #0
10011b76:	2c00      	cmp	r4, #0
10011b78:	d007      	beq.n	10011b8a <gattc_read_cfm+0x42>
10011b7a:	9904      	ldr	r1, [sp, #16]
10011b7c:	1c22      	adds	r2, r4, #0
10011b7e:	480a      	ldr	r0, [pc, #40]	; (10011ba8 <gattc_read_cfm+0x60>)
10011b80:	4b0a      	ldr	r3, [pc, #40]	; (10011bac <gattc_read_cfm+0x64>)
10011b82:	340d      	adds	r4, #13
10011b84:	4798      	blx	r3
10011b86:	b2a1      	uxth	r1, r4
10011b88:	e001      	b.n	10011b8e <gattc_read_cfm+0x46>
10011b8a:	210e      	movs	r1, #14
10011b8c:	735c      	strb	r4, [r3, #13]
10011b8e:	1c0b      	adds	r3, r1, #0
10011b90:	3b08      	subs	r3, #8
10011b92:	71ab      	strb	r3, [r5, #6]
10011b94:	121b      	asrs	r3, r3, #8
10011b96:	71eb      	strb	r3, [r5, #7]
10011b98:	1c28      	adds	r0, r5, #0
10011b9a:	4b05      	ldr	r3, [pc, #20]	; (10011bb0 <gattc_read_cfm+0x68>)
10011b9c:	4798      	blx	r3
10011b9e:	bd38      	pop	{r3, r4, r5, pc}
10011ba0:	100178f0 	.word	0x100178f0
10011ba4:	10017580 	.word	0x10017580
10011ba8:	100178fd 	.word	0x100178fd
10011bac:	100133db 	.word	0x100133db
10011bb0:	10010891 	.word	0x10010891

10011bb4 <gattc_write_cfm>:
10011bb4:	4b0d      	ldr	r3, [pc, #52]	; (10011bec <gattc_write_cfm+0x38>)
10011bb6:	b510      	push	{r4, lr}
10011bb8:	729a      	strb	r2, [r3, #10]
10011bba:	2203      	movs	r2, #3
10011bbc:	2416      	movs	r4, #22
10011bbe:	719a      	strb	r2, [r3, #6]
10011bc0:	2200      	movs	r2, #0
10011bc2:	70d9      	strb	r1, [r3, #3]
10011bc4:	490a      	ldr	r1, [pc, #40]	; (10011bf0 <gattc_write_cfm+0x3c>)
10011bc6:	701c      	strb	r4, [r3, #0]
10011bc8:	3c0a      	subs	r4, #10
10011bca:	705c      	strb	r4, [r3, #1]
10011bcc:	709c      	strb	r4, [r3, #2]
10011bce:	880c      	ldrh	r4, [r1, #0]
10011bd0:	8809      	ldrh	r1, [r1, #0]
10011bd2:	7218      	strb	r0, [r3, #8]
10011bd4:	0a09      	lsrs	r1, r1, #8
10011bd6:	0a00      	lsrs	r0, r0, #8
10011bd8:	711c      	strb	r4, [r3, #4]
10011bda:	7159      	strb	r1, [r3, #5]
10011bdc:	7258      	strb	r0, [r3, #9]
10011bde:	71da      	strb	r2, [r3, #7]
10011be0:	1c18      	adds	r0, r3, #0
10011be2:	210b      	movs	r1, #11
10011be4:	4b03      	ldr	r3, [pc, #12]	; (10011bf4 <gattc_write_cfm+0x40>)
10011be6:	4798      	blx	r3
10011be8:	bd10      	pop	{r4, pc}
10011bea:	46c0      	nop			; (mov r8, r8)
10011bec:	100178f0 	.word	0x100178f0
10011bf0:	10017580 	.word	0x10017580
10011bf4:	10010891 	.word	0x10010891

10011bf8 <gattc_att_info_cfm>:
10011bf8:	b538      	push	{r3, r4, r5, lr}
10011bfa:	4c0e      	ldr	r4, [pc, #56]	; (10011c34 <gattc_att_info_cfm+0x3c>)
10011bfc:	2518      	movs	r5, #24
10011bfe:	7323      	strb	r3, [r4, #12]
10011c00:	2305      	movs	r3, #5
10011c02:	71a3      	strb	r3, [r4, #6]
10011c04:	2300      	movs	r3, #0
10011c06:	70e1      	strb	r1, [r4, #3]
10011c08:	490b      	ldr	r1, [pc, #44]	; (10011c38 <gattc_att_info_cfm+0x40>)
10011c0a:	7025      	strb	r5, [r4, #0]
10011c0c:	3d0c      	subs	r5, #12
10011c0e:	7065      	strb	r5, [r4, #1]
10011c10:	70a5      	strb	r5, [r4, #2]
10011c12:	880d      	ldrh	r5, [r1, #0]
10011c14:	8809      	ldrh	r1, [r1, #0]
10011c16:	7220      	strb	r0, [r4, #8]
10011c18:	0a09      	lsrs	r1, r1, #8
10011c1a:	0a00      	lsrs	r0, r0, #8
10011c1c:	7161      	strb	r1, [r4, #5]
10011c1e:	7260      	strb	r0, [r4, #9]
10011c20:	72a2      	strb	r2, [r4, #10]
10011c22:	71e3      	strb	r3, [r4, #7]
10011c24:	0a12      	lsrs	r2, r2, #8
10011c26:	1c20      	adds	r0, r4, #0
10011c28:	210d      	movs	r1, #13
10011c2a:	4b04      	ldr	r3, [pc, #16]	; (10011c3c <gattc_att_info_cfm+0x44>)
10011c2c:	7125      	strb	r5, [r4, #4]
10011c2e:	72e2      	strb	r2, [r4, #11]
10011c30:	4798      	blx	r3
10011c32:	bd38      	pop	{r3, r4, r5, pc}
10011c34:	100178f0 	.word	0x100178f0
10011c38:	10017580 	.word	0x10017580
10011c3c:	10010891 	.word	0x10010891

10011c40 <gattc_send_evt_cmd_handler>:
10011c40:	b570      	push	{r4, r5, r6, lr}
10011c42:	2610      	movs	r6, #16
10011c44:	ac04      	add	r4, sp, #16
10011c46:	8825      	ldrh	r5, [r4, #0]
10011c48:	4c15      	ldr	r4, [pc, #84]	; (10011ca0 <gattc_send_evt_cmd_handler+0x60>)
10011c4a:	70e2      	strb	r2, [r4, #3]
10011c4c:	4a15      	ldr	r2, [pc, #84]	; (10011ca4 <gattc_send_evt_cmd_handler+0x64>)
10011c4e:	7026      	strb	r6, [r4, #0]
10011c50:	3e04      	subs	r6, #4
10011c52:	7066      	strb	r6, [r4, #1]
10011c54:	70a6      	strb	r6, [r4, #2]
10011c56:	8816      	ldrh	r6, [r2, #0]
10011c58:	8812      	ldrh	r2, [r2, #0]
10011c5a:	7220      	strb	r0, [r4, #8]
10011c5c:	0a12      	lsrs	r2, r2, #8
10011c5e:	7162      	strb	r2, [r4, #5]
10011c60:	4a11      	ldr	r2, [pc, #68]	; (10011ca8 <gattc_send_evt_cmd_handler+0x68>)
10011c62:	7321      	strb	r1, [r4, #12]
10011c64:	8812      	ldrh	r2, [r2, #0]
10011c66:	73a5      	strb	r5, [r4, #14]
10011c68:	3201      	adds	r2, #1
10011c6a:	7262      	strb	r2, [r4, #9]
10011c6c:	1212      	asrs	r2, r2, #8
10011c6e:	72a2      	strb	r2, [r4, #10]
10011c70:	2200      	movs	r2, #0
10011c72:	72e2      	strb	r2, [r4, #11]
10011c74:	0a0a      	lsrs	r2, r1, #8
10011c76:	7362      	strb	r2, [r4, #13]
10011c78:	0a2a      	lsrs	r2, r5, #8
10011c7a:	73e2      	strb	r2, [r4, #15]
10011c7c:	1c19      	adds	r1, r3, #0
10011c7e:	1c2a      	adds	r2, r5, #0
10011c80:	4b0a      	ldr	r3, [pc, #40]	; (10011cac <gattc_send_evt_cmd_handler+0x6c>)
10011c82:	3510      	adds	r5, #16
10011c84:	480a      	ldr	r0, [pc, #40]	; (10011cb0 <gattc_send_evt_cmd_handler+0x70>)
10011c86:	7126      	strb	r6, [r4, #4]
10011c88:	4798      	blx	r3
10011c8a:	b2a9      	uxth	r1, r5
10011c8c:	1c0b      	adds	r3, r1, #0
10011c8e:	3b08      	subs	r3, #8
10011c90:	71a3      	strb	r3, [r4, #6]
10011c92:	121b      	asrs	r3, r3, #8
10011c94:	71e3      	strb	r3, [r4, #7]
10011c96:	1c20      	adds	r0, r4, #0
10011c98:	4b06      	ldr	r3, [pc, #24]	; (10011cb4 <gattc_send_evt_cmd_handler+0x74>)
10011c9a:	4798      	blx	r3
10011c9c:	bd70      	pop	{r4, r5, r6, pc}
10011c9e:	46c0      	nop			; (mov r8, r8)
10011ca0:	100178f0 	.word	0x100178f0
10011ca4:	10017580 	.word	0x10017580
10011ca8:	100168f8 	.word	0x100168f8
10011cac:	100133db 	.word	0x100133db
10011cb0:	10017900 	.word	0x10017900
10011cb4:	10010891 	.word	0x10010891

10011cb8 <gattc_event_cfm_handler>:
10011cb8:	220e      	movs	r2, #14
10011cba:	b508      	push	{r3, lr}
10011cbc:	4b0b      	ldr	r3, [pc, #44]	; (10011cec <gattc_event_cfm_handler+0x34>)
10011cbe:	701a      	strb	r2, [r3, #0]
10011cc0:	3a02      	subs	r2, #2
10011cc2:	705a      	strb	r2, [r3, #1]
10011cc4:	709a      	strb	r2, [r3, #2]
10011cc6:	4a0a      	ldr	r2, [pc, #40]	; (10011cf0 <gattc_event_cfm_handler+0x38>)
10011cc8:	70d8      	strb	r0, [r3, #3]
10011cca:	8810      	ldrh	r0, [r2, #0]
10011ccc:	8812      	ldrh	r2, [r2, #0]
10011cce:	7219      	strb	r1, [r3, #8]
10011cd0:	0a12      	lsrs	r2, r2, #8
10011cd2:	715a      	strb	r2, [r3, #5]
10011cd4:	2202      	movs	r2, #2
10011cd6:	719a      	strb	r2, [r3, #6]
10011cd8:	2200      	movs	r2, #0
10011cda:	0a09      	lsrs	r1, r1, #8
10011cdc:	7118      	strb	r0, [r3, #4]
10011cde:	7259      	strb	r1, [r3, #9]
10011ce0:	71da      	strb	r2, [r3, #7]
10011ce2:	1c18      	adds	r0, r3, #0
10011ce4:	210a      	movs	r1, #10
10011ce6:	4b03      	ldr	r3, [pc, #12]	; (10011cf4 <gattc_event_cfm_handler+0x3c>)
10011ce8:	4798      	blx	r3
10011cea:	bd08      	pop	{r3, pc}
10011cec:	100178f0 	.word	0x100178f0
10011cf0:	10017580 	.word	0x10017580
10011cf4:	10010891 	.word	0x10010891

10011cf8 <gattc_disc_svc_ind_parser>:
10011cf8:	b570      	push	{r4, r5, r6, lr}
10011cfa:	1c15      	adds	r5, r2, #0
10011cfc:	0a00      	lsrs	r0, r0, #8
10011cfe:	8010      	strh	r0, [r2, #0]
10011d00:	784b      	ldrb	r3, [r1, #1]
10011d02:	780a      	ldrb	r2, [r1, #0]
10011d04:	021b      	lsls	r3, r3, #8
10011d06:	4313      	orrs	r3, r2
10011d08:	806b      	strh	r3, [r5, #2]
10011d0a:	78cb      	ldrb	r3, [r1, #3]
10011d0c:	788a      	ldrb	r2, [r1, #2]
10011d0e:	021b      	lsls	r3, r3, #8
10011d10:	4313      	orrs	r3, r2
10011d12:	80ab      	strh	r3, [r5, #4]
10011d14:	790e      	ldrb	r6, [r1, #4]
10011d16:	4b05      	ldr	r3, [pc, #20]	; (10011d2c <gattc_disc_svc_ind_parser+0x34>)
10011d18:	1c30      	adds	r0, r6, #0
10011d1a:	1c0c      	adds	r4, r1, #0
10011d1c:	4798      	blx	r3
10011d1e:	1c32      	adds	r2, r6, #0
10011d20:	71a8      	strb	r0, [r5, #6]
10011d22:	1d61      	adds	r1, r4, #5
10011d24:	1de8      	adds	r0, r5, #7
10011d26:	4b02      	ldr	r3, [pc, #8]	; (10011d30 <gattc_disc_svc_ind_parser+0x38>)
10011d28:	4798      	blx	r3
10011d2a:	bd70      	pop	{r4, r5, r6, pc}
10011d2c:	1000fbf9 	.word	0x1000fbf9
10011d30:	100133db 	.word	0x100133db

10011d34 <gattc_disc_svc_incl_ind_parser>:
10011d34:	b570      	push	{r4, r5, r6, lr}
10011d36:	1c15      	adds	r5, r2, #0
10011d38:	0a00      	lsrs	r0, r0, #8
10011d3a:	8010      	strh	r0, [r2, #0]
10011d3c:	784b      	ldrb	r3, [r1, #1]
10011d3e:	780a      	ldrb	r2, [r1, #0]
10011d40:	021b      	lsls	r3, r3, #8
10011d42:	4313      	orrs	r3, r2
10011d44:	806b      	strh	r3, [r5, #2]
10011d46:	78cb      	ldrb	r3, [r1, #3]
10011d48:	788a      	ldrb	r2, [r1, #2]
10011d4a:	021b      	lsls	r3, r3, #8
10011d4c:	4313      	orrs	r3, r2
10011d4e:	80ab      	strh	r3, [r5, #4]
10011d50:	794b      	ldrb	r3, [r1, #5]
10011d52:	790a      	ldrb	r2, [r1, #4]
10011d54:	021b      	lsls	r3, r3, #8
10011d56:	4313      	orrs	r3, r2
10011d58:	80eb      	strh	r3, [r5, #6]
10011d5a:	798e      	ldrb	r6, [r1, #6]
10011d5c:	4b05      	ldr	r3, [pc, #20]	; (10011d74 <gattc_disc_svc_incl_ind_parser+0x40>)
10011d5e:	1c30      	adds	r0, r6, #0
10011d60:	1c0c      	adds	r4, r1, #0
10011d62:	4798      	blx	r3
10011d64:	7228      	strb	r0, [r5, #8]
10011d66:	1c28      	adds	r0, r5, #0
10011d68:	1c32      	adds	r2, r6, #0
10011d6a:	1de1      	adds	r1, r4, #7
10011d6c:	4b02      	ldr	r3, [pc, #8]	; (10011d78 <gattc_disc_svc_incl_ind_parser+0x44>)
10011d6e:	3009      	adds	r0, #9
10011d70:	4798      	blx	r3
10011d72:	bd70      	pop	{r4, r5, r6, pc}
10011d74:	1000fbf9 	.word	0x1000fbf9
10011d78:	100133db 	.word	0x100133db

10011d7c <gattc_disc_char_ind_parser>:
10011d7c:	b570      	push	{r4, r5, r6, lr}
10011d7e:	1c15      	adds	r5, r2, #0
10011d80:	0a00      	lsrs	r0, r0, #8
10011d82:	8010      	strh	r0, [r2, #0]
10011d84:	784b      	ldrb	r3, [r1, #1]
10011d86:	780a      	ldrb	r2, [r1, #0]
10011d88:	021b      	lsls	r3, r3, #8
10011d8a:	4313      	orrs	r3, r2
10011d8c:	806b      	strh	r3, [r5, #2]
10011d8e:	78cb      	ldrb	r3, [r1, #3]
10011d90:	788a      	ldrb	r2, [r1, #2]
10011d92:	021b      	lsls	r3, r3, #8
10011d94:	4313      	orrs	r3, r2
10011d96:	80ab      	strh	r3, [r5, #4]
10011d98:	790b      	ldrb	r3, [r1, #4]
10011d9a:	1c0c      	adds	r4, r1, #0
10011d9c:	71ab      	strb	r3, [r5, #6]
10011d9e:	794e      	ldrb	r6, [r1, #5]
10011da0:	4b05      	ldr	r3, [pc, #20]	; (10011db8 <gattc_disc_char_ind_parser+0x3c>)
10011da2:	1c30      	adds	r0, r6, #0
10011da4:	4798      	blx	r3
10011da6:	71e8      	strb	r0, [r5, #7]
10011da8:	1c28      	adds	r0, r5, #0
10011daa:	1c32      	adds	r2, r6, #0
10011dac:	1da1      	adds	r1, r4, #6
10011dae:	4b03      	ldr	r3, [pc, #12]	; (10011dbc <gattc_disc_char_ind_parser+0x40>)
10011db0:	3008      	adds	r0, #8
10011db2:	4798      	blx	r3
10011db4:	bd70      	pop	{r4, r5, r6, pc}
10011db6:	46c0      	nop			; (mov r8, r8)
10011db8:	1000fbf9 	.word	0x1000fbf9
10011dbc:	100133db 	.word	0x100133db

10011dc0 <gattc_disc_char_desc_ind_parser>:
10011dc0:	b570      	push	{r4, r5, r6, lr}
10011dc2:	1c15      	adds	r5, r2, #0
10011dc4:	0a00      	lsrs	r0, r0, #8
10011dc6:	8010      	strh	r0, [r2, #0]
10011dc8:	784b      	ldrb	r3, [r1, #1]
10011dca:	780a      	ldrb	r2, [r1, #0]
10011dcc:	021b      	lsls	r3, r3, #8
10011dce:	4313      	orrs	r3, r2
10011dd0:	806b      	strh	r3, [r5, #2]
10011dd2:	788e      	ldrb	r6, [r1, #2]
10011dd4:	4b05      	ldr	r3, [pc, #20]	; (10011dec <gattc_disc_char_desc_ind_parser+0x2c>)
10011dd6:	1c30      	adds	r0, r6, #0
10011dd8:	1c0c      	adds	r4, r1, #0
10011dda:	4798      	blx	r3
10011ddc:	1c32      	adds	r2, r6, #0
10011dde:	7128      	strb	r0, [r5, #4]
10011de0:	1ce1      	adds	r1, r4, #3
10011de2:	1d68      	adds	r0, r5, #5
10011de4:	4b02      	ldr	r3, [pc, #8]	; (10011df0 <gattc_disc_char_desc_ind_parser+0x30>)
10011de6:	4798      	blx	r3
10011de8:	bd70      	pop	{r4, r5, r6, pc}
10011dea:	46c0      	nop			; (mov r8, r8)
10011dec:	1000fbf9 	.word	0x1000fbf9
10011df0:	100133db 	.word	0x100133db

10011df4 <gattc_event_ind_and_notification_parser>:
10011df4:	b510      	push	{r4, lr}
10011df6:	780c      	ldrb	r4, [r1, #0]
10011df8:	1c13      	adds	r3, r2, #0
10011dfa:	2c12      	cmp	r4, #18
10011dfc:	d10e      	bne.n	10011e1c <gattc_event_ind_and_notification_parser+0x28>
10011dfe:	0a00      	lsrs	r0, r0, #8
10011e00:	8010      	strh	r0, [r2, #0]
10011e02:	788a      	ldrb	r2, [r1, #2]
10011e04:	709a      	strb	r2, [r3, #2]
10011e06:	7948      	ldrb	r0, [r1, #5]
10011e08:	790c      	ldrb	r4, [r1, #4]
10011e0a:	0200      	lsls	r0, r0, #8
10011e0c:	4320      	orrs	r0, r4
10011e0e:	8098      	strh	r0, [r3, #4]
10011e10:	3106      	adds	r1, #6
10011e12:	1d98      	adds	r0, r3, #6
10011e14:	4b0b      	ldr	r3, [pc, #44]	; (10011e44 <gattc_event_ind_and_notification_parser+0x50>)
10011e16:	4798      	blx	r3
10011e18:	221b      	movs	r2, #27
10011e1a:	e010      	b.n	10011e3e <gattc_event_ind_and_notification_parser+0x4a>
10011e1c:	2200      	movs	r2, #0
10011e1e:	2c13      	cmp	r4, #19
10011e20:	d10d      	bne.n	10011e3e <gattc_event_ind_and_notification_parser+0x4a>
10011e22:	0a00      	lsrs	r0, r0, #8
10011e24:	8018      	strh	r0, [r3, #0]
10011e26:	788a      	ldrb	r2, [r1, #2]
10011e28:	709a      	strb	r2, [r3, #2]
10011e2a:	7908      	ldrb	r0, [r1, #4]
10011e2c:	78cc      	ldrb	r4, [r1, #3]
10011e2e:	0200      	lsls	r0, r0, #8
10011e30:	4320      	orrs	r0, r4
10011e32:	8098      	strh	r0, [r3, #4]
10011e34:	3106      	adds	r1, #6
10011e36:	1d98      	adds	r0, r3, #6
10011e38:	4b02      	ldr	r3, [pc, #8]	; (10011e44 <gattc_event_ind_and_notification_parser+0x50>)
10011e3a:	4798      	blx	r3
10011e3c:	221c      	movs	r2, #28
10011e3e:	1c10      	adds	r0, r2, #0
10011e40:	bd10      	pop	{r4, pc}
10011e42:	46c0      	nop			; (mov r8, r8)
10011e44:	100133db 	.word	0x100133db

10011e48 <gattc_complete_evt_handler>:
10011e48:	b500      	push	{lr}
10011e4a:	0a00      	lsrs	r0, r0, #8
10011e4c:	8010      	strh	r0, [r2, #0]
10011e4e:	7808      	ldrb	r0, [r1, #0]
10011e50:	7090      	strb	r0, [r2, #2]
10011e52:	784b      	ldrb	r3, [r1, #1]
10011e54:	3801      	subs	r0, #1
10011e56:	70d3      	strb	r3, [r2, #3]
10011e58:	2813      	cmp	r0, #19
10011e5a:	d82c      	bhi.n	10011eb6 <gattc_complete_evt_handler+0x6e>
10011e5c:	f000 f9dc 	bl	10012218 <__gnu_thumb1_case_uqi>
10011e60:	0a0a0a0c 	.word	0x0a0a0a0c
10011e64:	210a0a0a 	.word	0x210a0a0a
10011e68:	111f2121 	.word	0x111f2121
10011e6c:	2b111111 	.word	0x2b111111
10011e70:	2919132b 	.word	0x2919132b
10011e74:	2017      	movs	r0, #23
10011e76:	e01f      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011e78:	2024      	movs	r0, #36	; 0x24
10011e7a:	2b00      	cmp	r3, #0
10011e7c:	d11c      	bne.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011e7e:	3017      	adds	r0, #23
10011e80:	e01a      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011e82:	2025      	movs	r0, #37	; 0x25
10011e84:	e018      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011e86:	4a0d      	ldr	r2, [pc, #52]	; (10011ebc <gattc_complete_evt_handler+0x74>)
10011e88:	201d      	movs	r0, #29
10011e8a:	6813      	ldr	r3, [r2, #0]
10011e8c:	3b01      	subs	r3, #1
10011e8e:	6013      	str	r3, [r2, #0]
10011e90:	e012      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011e92:	4a0a      	ldr	r2, [pc, #40]	; (10011ebc <gattc_complete_evt_handler+0x74>)
10011e94:	201e      	movs	r0, #30
10011e96:	6813      	ldr	r3, [r2, #0]
10011e98:	3b01      	subs	r3, #1
10011e9a:	6013      	str	r3, [r2, #0]
10011e9c:	e00c      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011e9e:	2019      	movs	r0, #25
10011ea0:	e00a      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011ea2:	203b      	movs	r0, #59	; 0x3b
10011ea4:	2b00      	cmp	r3, #0
10011ea6:	d007      	beq.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011ea8:	2182      	movs	r1, #130	; 0x82
10011eaa:	0089      	lsls	r1, r1, #2
10011eac:	5453      	strb	r3, [r2, r1]
10011eae:	3823      	subs	r0, #35	; 0x23
10011eb0:	e002      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011eb2:	2021      	movs	r0, #33	; 0x21
10011eb4:	e000      	b.n	10011eb8 <gattc_complete_evt_handler+0x70>
10011eb6:	2000      	movs	r0, #0
10011eb8:	bd00      	pop	{pc}
10011eba:	46c0      	nop			; (mov r8, r8)
10011ebc:	100168fc 	.word	0x100168fc

10011ec0 <gattc_event_mtu_changed_ind_parser>:
10011ec0:	0a00      	lsrs	r0, r0, #8
10011ec2:	8010      	strh	r0, [r2, #0]
10011ec4:	784b      	ldrb	r3, [r1, #1]
10011ec6:	7809      	ldrb	r1, [r1, #0]
10011ec8:	021b      	lsls	r3, r3, #8
10011eca:	430b      	orrs	r3, r1
10011ecc:	8053      	strh	r3, [r2, #2]
10011ece:	4770      	bx	lr

10011ed0 <gattc_read_ind_parser>:
10011ed0:	0a00      	lsrs	r0, r0, #8
10011ed2:	b508      	push	{r3, lr}
10011ed4:	8010      	strh	r0, [r2, #0]
10011ed6:	1c13      	adds	r3, r2, #0
10011ed8:	2282      	movs	r2, #130	; 0x82
10011eda:	2000      	movs	r0, #0
10011edc:	0092      	lsls	r2, r2, #2
10011ede:	5498      	strb	r0, [r3, r2]
10011ee0:	784a      	ldrb	r2, [r1, #1]
10011ee2:	7808      	ldrb	r0, [r1, #0]
10011ee4:	0212      	lsls	r2, r2, #8
10011ee6:	4302      	orrs	r2, r0
10011ee8:	805a      	strh	r2, [r3, #2]
10011eea:	78ca      	ldrb	r2, [r1, #3]
10011eec:	7888      	ldrb	r0, [r1, #2]
10011eee:	0212      	lsls	r2, r2, #8
10011ef0:	4302      	orrs	r2, r0
10011ef2:	80da      	strh	r2, [r3, #6]
10011ef4:	794a      	ldrb	r2, [r1, #5]
10011ef6:	7908      	ldrb	r0, [r1, #4]
10011ef8:	0212      	lsls	r2, r2, #8
10011efa:	4302      	orrs	r2, r0
10011efc:	809a      	strh	r2, [r3, #4]
10011efe:	3308      	adds	r3, #8
10011f00:	1c18      	adds	r0, r3, #0
10011f02:	3106      	adds	r1, #6
10011f04:	4b01      	ldr	r3, [pc, #4]	; (10011f0c <gattc_read_ind_parser+0x3c>)
10011f06:	4798      	blx	r3
10011f08:	bd08      	pop	{r3, pc}
10011f0a:	46c0      	nop			; (mov r8, r8)
10011f0c:	100133db 	.word	0x100133db

10011f10 <gattc_svc_changed_cfg_ind_parser>:
10011f10:	0a00      	lsrs	r0, r0, #8
10011f12:	8010      	strh	r0, [r2, #0]
10011f14:	784b      	ldrb	r3, [r1, #1]
10011f16:	7809      	ldrb	r1, [r1, #0]
10011f18:	021b      	lsls	r3, r3, #8
10011f1a:	430b      	orrs	r3, r1
10011f1c:	8053      	strh	r3, [r2, #2]
10011f1e:	4770      	bx	lr

10011f20 <init_gattc_task_module>:
10011f20:	2300      	movs	r3, #0
10011f22:	4a02      	ldr	r2, [pc, #8]	; (10011f2c <init_gattc_task_module+0xc>)
10011f24:	8013      	strh	r3, [r2, #0]
10011f26:	4a02      	ldr	r2, [pc, #8]	; (10011f30 <init_gattc_task_module+0x10>)
10011f28:	8013      	strh	r3, [r2, #0]
10011f2a:	4770      	bx	lr
10011f2c:	100168f6 	.word	0x100168f6
10011f30:	100168f8 	.word	0x100168f8

10011f34 <gattm_add_svc_req_handler>:
10011f34:	2200      	movs	r2, #0
10011f36:	210b      	movs	r1, #11
10011f38:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f3a:	1c04      	adds	r4, r0, #0
10011f3c:	7943      	ldrb	r3, [r0, #5]
10011f3e:	b085      	sub	sp, #20
10011f40:	9301      	str	r3, [sp, #4]
10011f42:	ab02      	add	r3, sp, #8
10011f44:	71da      	strb	r2, [r3, #7]
10011f46:	4b37      	ldr	r3, [pc, #220]	; (10012024 <gattm_add_svc_req_handler+0xf0>)
10011f48:	7059      	strb	r1, [r3, #1]
10011f4a:	7099      	strb	r1, [r3, #2]
10011f4c:	4936      	ldr	r1, [pc, #216]	; (10012028 <gattm_add_svc_req_handler+0xf4>)
10011f4e:	701a      	strb	r2, [r3, #0]
10011f50:	8808      	ldrh	r0, [r1, #0]
10011f52:	8809      	ldrh	r1, [r1, #0]
10011f54:	70da      	strb	r2, [r3, #3]
10011f56:	0a09      	lsrs	r1, r1, #8
10011f58:	7118      	strb	r0, [r3, #4]
10011f5a:	7159      	strb	r1, [r3, #5]
10011f5c:	8821      	ldrh	r1, [r4, #0]
10011f5e:	7219      	strb	r1, [r3, #8]
10011f60:	8821      	ldrh	r1, [r4, #0]
10011f62:	0a09      	lsrs	r1, r1, #8
10011f64:	7259      	strb	r1, [r3, #9]
10011f66:	8861      	ldrh	r1, [r4, #2]
10011f68:	7299      	strb	r1, [r3, #10]
10011f6a:	8861      	ldrh	r1, [r4, #2]
10011f6c:	0a09      	lsrs	r1, r1, #8
10011f6e:	72d9      	strb	r1, [r3, #11]
10011f70:	7921      	ldrb	r1, [r4, #4]
10011f72:	7319      	strb	r1, [r3, #12]
10011f74:	4669      	mov	r1, sp
10011f76:	7909      	ldrb	r1, [r1, #4]
10011f78:	7359      	strb	r1, [r3, #13]
10011f7a:	18a1      	adds	r1, r4, r2
10011f7c:	7988      	ldrb	r0, [r1, #6]
10011f7e:	1899      	adds	r1, r3, r2
10011f80:	3201      	adds	r2, #1
10011f82:	7388      	strb	r0, [r1, #14]
10011f84:	2a10      	cmp	r2, #16
10011f86:	d1f8      	bne.n	10011f7a <gattm_add_svc_req_handler+0x46>
10011f88:	1c27      	adds	r7, r4, #0
10011f8a:	2300      	movs	r3, #0
10011f8c:	251e      	movs	r5, #30
10011f8e:	3716      	adds	r7, #22
10011f90:	9300      	str	r3, [sp, #0]
10011f92:	9b00      	ldr	r3, [sp, #0]
10011f94:	9a01      	ldr	r2, [sp, #4]
10011f96:	4e23      	ldr	r6, [pc, #140]	; (10012024 <gattm_add_svc_req_handler+0xf0>)
10011f98:	4293      	cmp	r3, r2
10011f9a:	da21      	bge.n	10011fe0 <gattm_add_svc_req_handler+0xac>
10011f9c:	1c39      	adds	r1, r7, #0
10011f9e:	1970      	adds	r0, r6, r5
10011fa0:	2210      	movs	r2, #16
10011fa2:	4b22      	ldr	r3, [pc, #136]	; (1001202c <gattm_add_svc_req_handler+0xf8>)
10011fa4:	4798      	blx	r3
10011fa6:	1c2b      	adds	r3, r5, #0
10011fa8:	8a3a      	ldrh	r2, [r7, #16]
10011faa:	3310      	adds	r3, #16
10011fac:	b29b      	uxth	r3, r3
10011fae:	54f2      	strb	r2, [r6, r3]
10011fb0:	1c2b      	adds	r3, r5, #0
10011fb2:	8a3a      	ldrh	r2, [r7, #16]
10011fb4:	3311      	adds	r3, #17
10011fb6:	b29b      	uxth	r3, r3
10011fb8:	0a12      	lsrs	r2, r2, #8
10011fba:	54f2      	strb	r2, [r6, r3]
10011fbc:	1c2a      	adds	r2, r5, #0
10011fbe:	1c2b      	adds	r3, r5, #0
10011fc0:	8a79      	ldrh	r1, [r7, #18]
10011fc2:	3212      	adds	r2, #18
10011fc4:	b292      	uxth	r2, r2
10011fc6:	54b1      	strb	r1, [r6, r2]
10011fc8:	8a7a      	ldrh	r2, [r7, #18]
10011fca:	3313      	adds	r3, #19
10011fcc:	b29b      	uxth	r3, r3
10011fce:	0a12      	lsrs	r2, r2, #8
10011fd0:	54f2      	strb	r2, [r6, r3]
10011fd2:	9b00      	ldr	r3, [sp, #0]
10011fd4:	3514      	adds	r5, #20
10011fd6:	3301      	adds	r3, #1
10011fd8:	b2ad      	uxth	r5, r5
10011fda:	9300      	str	r3, [sp, #0]
10011fdc:	3714      	adds	r7, #20
10011fde:	e7d8      	b.n	10011f92 <gattm_add_svc_req_handler+0x5e>
10011fe0:	2114      	movs	r1, #20
10011fe2:	4d13      	ldr	r5, [pc, #76]	; (10012030 <gattm_add_svc_req_handler+0xfc>)
10011fe4:	4b13      	ldr	r3, [pc, #76]	; (10012034 <gattm_add_svc_req_handler+0x100>)
10011fe6:	4351      	muls	r1, r2
10011fe8:	802b      	strh	r3, [r5, #0]
10011fea:	230b      	movs	r3, #11
10011fec:	311e      	adds	r1, #30
10011fee:	80ab      	strh	r3, [r5, #4]
10011ff0:	1c0b      	adds	r3, r1, #0
10011ff2:	3b08      	subs	r3, #8
10011ff4:	71b3      	strb	r3, [r6, #6]
10011ff6:	121b      	asrs	r3, r3, #8
10011ff8:	71f3      	strb	r3, [r6, #7]
10011ffa:	1c30      	adds	r0, r6, #0
10011ffc:	4b0e      	ldr	r3, [pc, #56]	; (10012038 <gattm_add_svc_req_handler+0x104>)
10011ffe:	4798      	blx	r3
10012000:	ab02      	add	r3, sp, #8
10012002:	1dde      	adds	r6, r3, #7
10012004:	1c30      	adds	r0, r6, #0
10012006:	4b0d      	ldr	r3, [pc, #52]	; (1001203c <gattm_add_svc_req_handler+0x108>)
10012008:	4798      	blx	r3
1001200a:	7833      	ldrb	r3, [r6, #0]
1001200c:	20e2      	movs	r0, #226	; 0xe2
1001200e:	2b00      	cmp	r3, #0
10012010:	d106      	bne.n	10012020 <gattm_add_svc_req_handler+0xec>
10012012:	68aa      	ldr	r2, [r5, #8]
10012014:	7853      	ldrb	r3, [r2, #1]
10012016:	7811      	ldrb	r1, [r2, #0]
10012018:	021b      	lsls	r3, r3, #8
1001201a:	430b      	orrs	r3, r1
1001201c:	8023      	strh	r3, [r4, #0]
1001201e:	7890      	ldrb	r0, [r2, #2]
10012020:	b005      	add	sp, #20
10012022:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012024:	100178f0 	.word	0x100178f0
10012028:	10017580 	.word	0x10017580
1001202c:	100133db 	.word	0x100133db
10012030:	10017574 	.word	0x10017574
10012034:	00000b01 	.word	0x00000b01
10012038:	10010891 	.word	0x10010891
1001203c:	100108ed 	.word	0x100108ed

10012040 <gattm_add_attribute_req_handler>:
10012040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012042:	1c1f      	adds	r7, r3, #0
10012044:	4b16      	ldr	r3, [pc, #88]	; (100120a0 <gattm_add_attribute_req_handler+0x60>)
10012046:	9100      	str	r1, [sp, #0]
10012048:	9201      	str	r2, [sp, #4]
1001204a:	1c05      	adds	r5, r0, #0
1001204c:	7946      	ldrb	r6, [r0, #5]
1001204e:	6818      	ldr	r0, [r3, #0]
10012050:	2114      	movs	r1, #20
10012052:	4b14      	ldr	r3, [pc, #80]	; (100120a4 <gattm_add_attribute_req_handler+0x64>)
10012054:	382a      	subs	r0, #42	; 0x2a
10012056:	4798      	blx	r3
10012058:	2311      	movs	r3, #17
1001205a:	4286      	cmp	r6, r0
1001205c:	d21e      	bcs.n	1001209c <gattm_add_attribute_req_handler+0x5c>
1001205e:	2414      	movs	r4, #20
10012060:	4366      	muls	r6, r4
10012062:	19a8      	adds	r0, r5, r6
10012064:	2100      	movs	r1, #0
10012066:	2210      	movs	r2, #16
10012068:	4b0f      	ldr	r3, [pc, #60]	; (100120a8 <gattm_add_attribute_req_handler+0x68>)
1001206a:	3016      	adds	r0, #22
1001206c:	4798      	blx	r3
1001206e:	7968      	ldrb	r0, [r5, #5]
10012070:	1c3a      	adds	r2, r7, #0
10012072:	4360      	muls	r0, r4
10012074:	1828      	adds	r0, r5, r0
10012076:	4b0d      	ldr	r3, [pc, #52]	; (100120ac <gattm_add_attribute_req_handler+0x6c>)
10012078:	3016      	adds	r0, #22
1001207a:	9908      	ldr	r1, [sp, #32]
1001207c:	4798      	blx	r3
1001207e:	466a      	mov	r2, sp
10012080:	796b      	ldrb	r3, [r5, #5]
10012082:	8812      	ldrh	r2, [r2, #0]
10012084:	435c      	muls	r4, r3
10012086:	192c      	adds	r4, r5, r4
10012088:	8522      	strh	r2, [r4, #40]	; 0x28
1001208a:	466a      	mov	r2, sp
1001208c:	8892      	ldrh	r2, [r2, #4]
1001208e:	84e2      	strh	r2, [r4, #38]	; 0x26
10012090:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012092:	8013      	strh	r3, [r2, #0]
10012094:	796b      	ldrb	r3, [r5, #5]
10012096:	3301      	adds	r3, #1
10012098:	716b      	strb	r3, [r5, #5]
1001209a:	2300      	movs	r3, #0
1001209c:	1c18      	adds	r0, r3, #0
1001209e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100120a0:	10016874 	.word	0x10016874
100120a4:	1001222d 	.word	0x1001222d
100120a8:	100133ed 	.word	0x100133ed
100120ac:	100133db 	.word	0x100133db

100120b0 <gattm_att_set_value_req_handler>:
100120b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100120b2:	466b      	mov	r3, sp
100120b4:	1dde      	adds	r6, r3, #7
100120b6:	2300      	movs	r3, #0
100120b8:	1c0d      	adds	r5, r1, #0
100120ba:	210c      	movs	r1, #12
100120bc:	270b      	movs	r7, #11
100120be:	4c17      	ldr	r4, [pc, #92]	; (1001211c <gattm_att_set_value_req_handler+0x6c>)
100120c0:	7033      	strb	r3, [r6, #0]
100120c2:	70e3      	strb	r3, [r4, #3]
100120c4:	4b16      	ldr	r3, [pc, #88]	; (10012120 <gattm_att_set_value_req_handler+0x70>)
100120c6:	7021      	strb	r1, [r4, #0]
100120c8:	8819      	ldrh	r1, [r3, #0]
100120ca:	881b      	ldrh	r3, [r3, #0]
100120cc:	7220      	strb	r0, [r4, #8]
100120ce:	0a1b      	lsrs	r3, r3, #8
100120d0:	7163      	strb	r3, [r4, #5]
100120d2:	0a00      	lsrs	r0, r0, #8
100120d4:	0a2b      	lsrs	r3, r5, #8
100120d6:	7121      	strb	r1, [r4, #4]
100120d8:	7260      	strb	r0, [r4, #9]
100120da:	1c11      	adds	r1, r2, #0
100120dc:	72a5      	strb	r5, [r4, #10]
100120de:	1c2a      	adds	r2, r5, #0
100120e0:	72e3      	strb	r3, [r4, #11]
100120e2:	350c      	adds	r5, #12
100120e4:	4b0f      	ldr	r3, [pc, #60]	; (10012124 <gattm_att_set_value_req_handler+0x74>)
100120e6:	4810      	ldr	r0, [pc, #64]	; (10012128 <gattm_att_set_value_req_handler+0x78>)
100120e8:	7067      	strb	r7, [r4, #1]
100120ea:	70a7      	strb	r7, [r4, #2]
100120ec:	4798      	blx	r3
100120ee:	b2a9      	uxth	r1, r5
100120f0:	4b0e      	ldr	r3, [pc, #56]	; (1001212c <gattm_att_set_value_req_handler+0x7c>)
100120f2:	4d0f      	ldr	r5, [pc, #60]	; (10012130 <gattm_att_set_value_req_handler+0x80>)
100120f4:	1c20      	adds	r0, r4, #0
100120f6:	802b      	strh	r3, [r5, #0]
100120f8:	1c0b      	adds	r3, r1, #0
100120fa:	3b08      	subs	r3, #8
100120fc:	71a3      	strb	r3, [r4, #6]
100120fe:	121b      	asrs	r3, r3, #8
10012100:	71e3      	strb	r3, [r4, #7]
10012102:	4b0c      	ldr	r3, [pc, #48]	; (10012134 <gattm_att_set_value_req_handler+0x84>)
10012104:	80af      	strh	r7, [r5, #4]
10012106:	4798      	blx	r3
10012108:	1c30      	adds	r0, r6, #0
1001210a:	4b0b      	ldr	r3, [pc, #44]	; (10012138 <gattm_att_set_value_req_handler+0x88>)
1001210c:	4798      	blx	r3
1001210e:	7833      	ldrb	r3, [r6, #0]
10012110:	20e2      	movs	r0, #226	; 0xe2
10012112:	2b00      	cmp	r3, #0
10012114:	d101      	bne.n	1001211a <gattm_att_set_value_req_handler+0x6a>
10012116:	68ab      	ldr	r3, [r5, #8]
10012118:	7898      	ldrb	r0, [r3, #2]
1001211a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001211c:	100178f0 	.word	0x100178f0
10012120:	10017580 	.word	0x10017580
10012124:	100133db 	.word	0x100133db
10012128:	100178fc 	.word	0x100178fc
1001212c:	00000b0d 	.word	0x00000b0d
10012130:	10017574 	.word	0x10017574
10012134:	10010891 	.word	0x10010891
10012138:	100108ed 	.word	0x100108ed

1001213c <gattm_att_get_value_req_handler>:
1001213c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001213e:	b085      	sub	sp, #20
10012140:	9201      	str	r2, [sp, #4]
10012142:	220a      	movs	r2, #10
10012144:	1c04      	adds	r4, r0, #0
10012146:	481d      	ldr	r0, [pc, #116]	; (100121bc <gattm_att_get_value_req_handler+0x80>)
10012148:	ab02      	add	r3, sp, #8
1001214a:	1dde      	adds	r6, r3, #7
1001214c:	7002      	strb	r2, [r0, #0]
1001214e:	2300      	movs	r3, #0
10012150:	220b      	movs	r2, #11
10012152:	4d1b      	ldr	r5, [pc, #108]	; (100121c0 <gattm_att_get_value_req_handler+0x84>)
10012154:	1c0f      	adds	r7, r1, #0
10012156:	8829      	ldrh	r1, [r5, #0]
10012158:	882d      	ldrh	r5, [r5, #0]
1001215a:	7101      	strb	r1, [r0, #4]
1001215c:	0a2d      	lsrs	r5, r5, #8
1001215e:	7145      	strb	r5, [r0, #5]
10012160:	0a25      	lsrs	r5, r4, #8
10012162:	7245      	strb	r5, [r0, #9]
10012164:	4917      	ldr	r1, [pc, #92]	; (100121c4 <gattm_att_get_value_req_handler+0x88>)
10012166:	4d18      	ldr	r5, [pc, #96]	; (100121c8 <gattm_att_get_value_req_handler+0x8c>)
10012168:	7033      	strb	r3, [r6, #0]
1001216a:	7042      	strb	r2, [r0, #1]
1001216c:	7082      	strb	r2, [r0, #2]
1001216e:	70c3      	strb	r3, [r0, #3]
10012170:	8029      	strh	r1, [r5, #0]
10012172:	80aa      	strh	r2, [r5, #4]
10012174:	71c3      	strb	r3, [r0, #7]
10012176:	3a09      	subs	r2, #9
10012178:	210a      	movs	r1, #10
1001217a:	4b14      	ldr	r3, [pc, #80]	; (100121cc <gattm_att_get_value_req_handler+0x90>)
1001217c:	7182      	strb	r2, [r0, #6]
1001217e:	7204      	strb	r4, [r0, #8]
10012180:	4798      	blx	r3
10012182:	1c30      	adds	r0, r6, #0
10012184:	4b12      	ldr	r3, [pc, #72]	; (100121d0 <gattm_att_get_value_req_handler+0x94>)
10012186:	4798      	blx	r3
10012188:	7833      	ldrb	r3, [r6, #0]
1001218a:	20e2      	movs	r0, #226	; 0xe2
1001218c:	2b00      	cmp	r3, #0
1001218e:	d112      	bne.n	100121b6 <gattm_att_get_value_req_handler+0x7a>
10012190:	68a9      	ldr	r1, [r5, #8]
10012192:	9801      	ldr	r0, [sp, #4]
10012194:	784d      	ldrb	r5, [r1, #1]
10012196:	780b      	ldrb	r3, [r1, #0]
10012198:	78ca      	ldrb	r2, [r1, #3]
1001219a:	022d      	lsls	r5, r5, #8
1001219c:	431d      	orrs	r5, r3
1001219e:	788b      	ldrb	r3, [r1, #2]
100121a0:	0212      	lsls	r2, r2, #8
100121a2:	431a      	orrs	r2, r3
100121a4:	803a      	strh	r2, [r7, #0]
100121a6:	790e      	ldrb	r6, [r1, #4]
100121a8:	4b0a      	ldr	r3, [pc, #40]	; (100121d4 <gattm_att_get_value_req_handler+0x98>)
100121aa:	3105      	adds	r1, #5
100121ac:	4798      	blx	r3
100121ae:	20e2      	movs	r0, #226	; 0xe2
100121b0:	42ac      	cmp	r4, r5
100121b2:	d100      	bne.n	100121b6 <gattm_att_get_value_req_handler+0x7a>
100121b4:	1c30      	adds	r0, r6, #0
100121b6:	b005      	add	sp, #20
100121b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121ba:	46c0      	nop			; (mov r8, r8)
100121bc:	100178f0 	.word	0x100178f0
100121c0:	10017580 	.word	0x10017580
100121c4:	00000b0b 	.word	0x00000b0b
100121c8:	10017574 	.word	0x10017574
100121cc:	10010891 	.word	0x10010891
100121d0:	100108ed 	.word	0x100108ed
100121d4:	100133db 	.word	0x100133db

100121d8 <htpt_enable_rsp_handler>:
100121d8:	780b      	ldrb	r3, [r1, #0]
100121da:	7013      	strb	r3, [r2, #0]
100121dc:	784b      	ldrb	r3, [r1, #1]
100121de:	7053      	strb	r3, [r2, #1]
100121e0:	4770      	bx	lr

100121e2 <htpt_temp_send_rsp_handler>:
100121e2:	780b      	ldrb	r3, [r1, #0]
100121e4:	7013      	strb	r3, [r2, #0]
100121e6:	4770      	bx	lr

100121e8 <htpt_meas_intv_upd_rsp_handler>:
100121e8:	780b      	ldrb	r3, [r1, #0]
100121ea:	7013      	strb	r3, [r2, #0]
100121ec:	4770      	bx	lr

100121ee <htpt_meas_intv_chg_req_ind_handler>:
100121ee:	78cb      	ldrb	r3, [r1, #3]
100121f0:	7889      	ldrb	r1, [r1, #2]
100121f2:	021b      	lsls	r3, r3, #8
100121f4:	430b      	orrs	r3, r1
100121f6:	8013      	strh	r3, [r2, #0]
100121f8:	4770      	bx	lr

100121fa <htpt_cfg_indntf_ind_handler>:
100121fa:	780b      	ldrb	r3, [r1, #0]
100121fc:	7013      	strb	r3, [r2, #0]
100121fe:	784b      	ldrb	r3, [r1, #1]
10012200:	7053      	strb	r3, [r2, #1]
10012202:	4770      	bx	lr

10012204 <__gnu_thumb1_case_sqi>:
10012204:	b402      	push	{r1}
10012206:	4671      	mov	r1, lr
10012208:	0849      	lsrs	r1, r1, #1
1001220a:	0049      	lsls	r1, r1, #1
1001220c:	5609      	ldrsb	r1, [r1, r0]
1001220e:	0049      	lsls	r1, r1, #1
10012210:	448e      	add	lr, r1
10012212:	bc02      	pop	{r1}
10012214:	4770      	bx	lr
10012216:	46c0      	nop			; (mov r8, r8)

10012218 <__gnu_thumb1_case_uqi>:
10012218:	b402      	push	{r1}
1001221a:	4671      	mov	r1, lr
1001221c:	0849      	lsrs	r1, r1, #1
1001221e:	0049      	lsls	r1, r1, #1
10012220:	5c09      	ldrb	r1, [r1, r0]
10012222:	0049      	lsls	r1, r1, #1
10012224:	448e      	add	lr, r1
10012226:	bc02      	pop	{r1}
10012228:	4770      	bx	lr
1001222a:	46c0      	nop			; (mov r8, r8)

1001222c <__aeabi_uidiv>:
1001222c:	2200      	movs	r2, #0
1001222e:	0843      	lsrs	r3, r0, #1
10012230:	428b      	cmp	r3, r1
10012232:	d374      	bcc.n	1001231e <__aeabi_uidiv+0xf2>
10012234:	0903      	lsrs	r3, r0, #4
10012236:	428b      	cmp	r3, r1
10012238:	d35f      	bcc.n	100122fa <__aeabi_uidiv+0xce>
1001223a:	0a03      	lsrs	r3, r0, #8
1001223c:	428b      	cmp	r3, r1
1001223e:	d344      	bcc.n	100122ca <__aeabi_uidiv+0x9e>
10012240:	0b03      	lsrs	r3, r0, #12
10012242:	428b      	cmp	r3, r1
10012244:	d328      	bcc.n	10012298 <__aeabi_uidiv+0x6c>
10012246:	0c03      	lsrs	r3, r0, #16
10012248:	428b      	cmp	r3, r1
1001224a:	d30d      	bcc.n	10012268 <__aeabi_uidiv+0x3c>
1001224c:	22ff      	movs	r2, #255	; 0xff
1001224e:	0209      	lsls	r1, r1, #8
10012250:	ba12      	rev	r2, r2
10012252:	0c03      	lsrs	r3, r0, #16
10012254:	428b      	cmp	r3, r1
10012256:	d302      	bcc.n	1001225e <__aeabi_uidiv+0x32>
10012258:	1212      	asrs	r2, r2, #8
1001225a:	0209      	lsls	r1, r1, #8
1001225c:	d065      	beq.n	1001232a <__aeabi_uidiv+0xfe>
1001225e:	0b03      	lsrs	r3, r0, #12
10012260:	428b      	cmp	r3, r1
10012262:	d319      	bcc.n	10012298 <__aeabi_uidiv+0x6c>
10012264:	e000      	b.n	10012268 <__aeabi_uidiv+0x3c>
10012266:	0a09      	lsrs	r1, r1, #8
10012268:	0bc3      	lsrs	r3, r0, #15
1001226a:	428b      	cmp	r3, r1
1001226c:	d301      	bcc.n	10012272 <__aeabi_uidiv+0x46>
1001226e:	03cb      	lsls	r3, r1, #15
10012270:	1ac0      	subs	r0, r0, r3
10012272:	4152      	adcs	r2, r2
10012274:	0b83      	lsrs	r3, r0, #14
10012276:	428b      	cmp	r3, r1
10012278:	d301      	bcc.n	1001227e <__aeabi_uidiv+0x52>
1001227a:	038b      	lsls	r3, r1, #14
1001227c:	1ac0      	subs	r0, r0, r3
1001227e:	4152      	adcs	r2, r2
10012280:	0b43      	lsrs	r3, r0, #13
10012282:	428b      	cmp	r3, r1
10012284:	d301      	bcc.n	1001228a <__aeabi_uidiv+0x5e>
10012286:	034b      	lsls	r3, r1, #13
10012288:	1ac0      	subs	r0, r0, r3
1001228a:	4152      	adcs	r2, r2
1001228c:	0b03      	lsrs	r3, r0, #12
1001228e:	428b      	cmp	r3, r1
10012290:	d301      	bcc.n	10012296 <__aeabi_uidiv+0x6a>
10012292:	030b      	lsls	r3, r1, #12
10012294:	1ac0      	subs	r0, r0, r3
10012296:	4152      	adcs	r2, r2
10012298:	0ac3      	lsrs	r3, r0, #11
1001229a:	428b      	cmp	r3, r1
1001229c:	d301      	bcc.n	100122a2 <__aeabi_uidiv+0x76>
1001229e:	02cb      	lsls	r3, r1, #11
100122a0:	1ac0      	subs	r0, r0, r3
100122a2:	4152      	adcs	r2, r2
100122a4:	0a83      	lsrs	r3, r0, #10
100122a6:	428b      	cmp	r3, r1
100122a8:	d301      	bcc.n	100122ae <__aeabi_uidiv+0x82>
100122aa:	028b      	lsls	r3, r1, #10
100122ac:	1ac0      	subs	r0, r0, r3
100122ae:	4152      	adcs	r2, r2
100122b0:	0a43      	lsrs	r3, r0, #9
100122b2:	428b      	cmp	r3, r1
100122b4:	d301      	bcc.n	100122ba <__aeabi_uidiv+0x8e>
100122b6:	024b      	lsls	r3, r1, #9
100122b8:	1ac0      	subs	r0, r0, r3
100122ba:	4152      	adcs	r2, r2
100122bc:	0a03      	lsrs	r3, r0, #8
100122be:	428b      	cmp	r3, r1
100122c0:	d301      	bcc.n	100122c6 <__aeabi_uidiv+0x9a>
100122c2:	020b      	lsls	r3, r1, #8
100122c4:	1ac0      	subs	r0, r0, r3
100122c6:	4152      	adcs	r2, r2
100122c8:	d2cd      	bcs.n	10012266 <__aeabi_uidiv+0x3a>
100122ca:	09c3      	lsrs	r3, r0, #7
100122cc:	428b      	cmp	r3, r1
100122ce:	d301      	bcc.n	100122d4 <__aeabi_uidiv+0xa8>
100122d0:	01cb      	lsls	r3, r1, #7
100122d2:	1ac0      	subs	r0, r0, r3
100122d4:	4152      	adcs	r2, r2
100122d6:	0983      	lsrs	r3, r0, #6
100122d8:	428b      	cmp	r3, r1
100122da:	d301      	bcc.n	100122e0 <__aeabi_uidiv+0xb4>
100122dc:	018b      	lsls	r3, r1, #6
100122de:	1ac0      	subs	r0, r0, r3
100122e0:	4152      	adcs	r2, r2
100122e2:	0943      	lsrs	r3, r0, #5
100122e4:	428b      	cmp	r3, r1
100122e6:	d301      	bcc.n	100122ec <__aeabi_uidiv+0xc0>
100122e8:	014b      	lsls	r3, r1, #5
100122ea:	1ac0      	subs	r0, r0, r3
100122ec:	4152      	adcs	r2, r2
100122ee:	0903      	lsrs	r3, r0, #4
100122f0:	428b      	cmp	r3, r1
100122f2:	d301      	bcc.n	100122f8 <__aeabi_uidiv+0xcc>
100122f4:	010b      	lsls	r3, r1, #4
100122f6:	1ac0      	subs	r0, r0, r3
100122f8:	4152      	adcs	r2, r2
100122fa:	08c3      	lsrs	r3, r0, #3
100122fc:	428b      	cmp	r3, r1
100122fe:	d301      	bcc.n	10012304 <__aeabi_uidiv+0xd8>
10012300:	00cb      	lsls	r3, r1, #3
10012302:	1ac0      	subs	r0, r0, r3
10012304:	4152      	adcs	r2, r2
10012306:	0883      	lsrs	r3, r0, #2
10012308:	428b      	cmp	r3, r1
1001230a:	d301      	bcc.n	10012310 <__aeabi_uidiv+0xe4>
1001230c:	008b      	lsls	r3, r1, #2
1001230e:	1ac0      	subs	r0, r0, r3
10012310:	4152      	adcs	r2, r2
10012312:	0843      	lsrs	r3, r0, #1
10012314:	428b      	cmp	r3, r1
10012316:	d301      	bcc.n	1001231c <__aeabi_uidiv+0xf0>
10012318:	004b      	lsls	r3, r1, #1
1001231a:	1ac0      	subs	r0, r0, r3
1001231c:	4152      	adcs	r2, r2
1001231e:	1a41      	subs	r1, r0, r1
10012320:	d200      	bcs.n	10012324 <__aeabi_uidiv+0xf8>
10012322:	4601      	mov	r1, r0
10012324:	4152      	adcs	r2, r2
10012326:	4610      	mov	r0, r2
10012328:	4770      	bx	lr
1001232a:	e7ff      	b.n	1001232c <__aeabi_uidiv+0x100>
1001232c:	b501      	push	{r0, lr}
1001232e:	2000      	movs	r0, #0
10012330:	f000 f80c 	bl	1001234c <__aeabi_idiv0>
10012334:	bd02      	pop	{r1, pc}
10012336:	46c0      	nop			; (mov r8, r8)

10012338 <__aeabi_uidivmod>:
10012338:	2900      	cmp	r1, #0
1001233a:	d0f7      	beq.n	1001232c <__aeabi_uidiv+0x100>
1001233c:	b503      	push	{r0, r1, lr}
1001233e:	f7ff ff75 	bl	1001222c <__aeabi_uidiv>
10012342:	bc0e      	pop	{r1, r2, r3}
10012344:	4342      	muls	r2, r0
10012346:	1a89      	subs	r1, r1, r2
10012348:	4718      	bx	r3
1001234a:	46c0      	nop			; (mov r8, r8)

1001234c <__aeabi_idiv0>:
1001234c:	4770      	bx	lr
1001234e:	46c0      	nop			; (mov r8, r8)

10012350 <__aeabi_d2uiz>:
10012350:	b538      	push	{r3, r4, r5, lr}
10012352:	2200      	movs	r2, #0
10012354:	4b0c      	ldr	r3, [pc, #48]	; (10012388 <__aeabi_d2uiz+0x38>)
10012356:	1c04      	adds	r4, r0, #0
10012358:	1c0d      	adds	r5, r1, #0
1001235a:	f000 fec7 	bl	100130ec <__aeabi_dcmpge>
1001235e:	2800      	cmp	r0, #0
10012360:	d104      	bne.n	1001236c <__aeabi_d2uiz+0x1c>
10012362:	1c20      	adds	r0, r4, #0
10012364:	1c29      	adds	r1, r5, #0
10012366:	f000 fe25 	bl	10012fb4 <__aeabi_d2iz>
1001236a:	bd38      	pop	{r3, r4, r5, pc}
1001236c:	4b06      	ldr	r3, [pc, #24]	; (10012388 <__aeabi_d2uiz+0x38>)
1001236e:	2200      	movs	r2, #0
10012370:	1c20      	adds	r0, r4, #0
10012372:	1c29      	adds	r1, r5, #0
10012374:	f000 faa4 	bl	100128c0 <__aeabi_dsub>
10012378:	f000 fe1c 	bl	10012fb4 <__aeabi_d2iz>
1001237c:	2380      	movs	r3, #128	; 0x80
1001237e:	061b      	lsls	r3, r3, #24
10012380:	469c      	mov	ip, r3
10012382:	4460      	add	r0, ip
10012384:	e7f1      	b.n	1001236a <__aeabi_d2uiz+0x1a>
10012386:	46c0      	nop			; (mov r8, r8)
10012388:	41e00000 	.word	0x41e00000

1001238c <__aeabi_dmul>:
1001238c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001238e:	465f      	mov	r7, fp
10012390:	4656      	mov	r6, sl
10012392:	464d      	mov	r5, r9
10012394:	4644      	mov	r4, r8
10012396:	b4f0      	push	{r4, r5, r6, r7}
10012398:	1c05      	adds	r5, r0, #0
1001239a:	1c06      	adds	r6, r0, #0
1001239c:	0308      	lsls	r0, r1, #12
1001239e:	b087      	sub	sp, #28
100123a0:	4699      	mov	r9, r3
100123a2:	004f      	lsls	r7, r1, #1
100123a4:	0b03      	lsrs	r3, r0, #12
100123a6:	0fcc      	lsrs	r4, r1, #31
100123a8:	4692      	mov	sl, r2
100123aa:	469b      	mov	fp, r3
100123ac:	0d7f      	lsrs	r7, r7, #21
100123ae:	9401      	str	r4, [sp, #4]
100123b0:	d067      	beq.n	10012482 <__aeabi_dmul+0xf6>
100123b2:	4b6c      	ldr	r3, [pc, #432]	; (10012564 <__aeabi_dmul+0x1d8>)
100123b4:	429f      	cmp	r7, r3
100123b6:	d036      	beq.n	10012426 <__aeabi_dmul+0x9a>
100123b8:	2080      	movs	r0, #128	; 0x80
100123ba:	465b      	mov	r3, fp
100123bc:	0340      	lsls	r0, r0, #13
100123be:	4318      	orrs	r0, r3
100123c0:	00c0      	lsls	r0, r0, #3
100123c2:	0f6b      	lsrs	r3, r5, #29
100123c4:	4318      	orrs	r0, r3
100123c6:	4b68      	ldr	r3, [pc, #416]	; (10012568 <__aeabi_dmul+0x1dc>)
100123c8:	4683      	mov	fp, r0
100123ca:	469c      	mov	ip, r3
100123cc:	2300      	movs	r3, #0
100123ce:	4698      	mov	r8, r3
100123d0:	00ee      	lsls	r6, r5, #3
100123d2:	4467      	add	r7, ip
100123d4:	9300      	str	r3, [sp, #0]
100123d6:	464b      	mov	r3, r9
100123d8:	4649      	mov	r1, r9
100123da:	031d      	lsls	r5, r3, #12
100123dc:	0fc9      	lsrs	r1, r1, #31
100123de:	005b      	lsls	r3, r3, #1
100123e0:	4652      	mov	r2, sl
100123e2:	0b2d      	lsrs	r5, r5, #12
100123e4:	0d5b      	lsrs	r3, r3, #21
100123e6:	4689      	mov	r9, r1
100123e8:	d100      	bne.n	100123ec <__aeabi_dmul+0x60>
100123ea:	e06e      	b.n	100124ca <__aeabi_dmul+0x13e>
100123ec:	495d      	ldr	r1, [pc, #372]	; (10012564 <__aeabi_dmul+0x1d8>)
100123ee:	428b      	cmp	r3, r1
100123f0:	d064      	beq.n	100124bc <__aeabi_dmul+0x130>
100123f2:	2080      	movs	r0, #128	; 0x80
100123f4:	495c      	ldr	r1, [pc, #368]	; (10012568 <__aeabi_dmul+0x1dc>)
100123f6:	0340      	lsls	r0, r0, #13
100123f8:	468c      	mov	ip, r1
100123fa:	2100      	movs	r1, #0
100123fc:	4305      	orrs	r5, r0
100123fe:	00ed      	lsls	r5, r5, #3
10012400:	0f50      	lsrs	r0, r2, #29
10012402:	4305      	orrs	r5, r0
10012404:	00d2      	lsls	r2, r2, #3
10012406:	4463      	add	r3, ip
10012408:	4648      	mov	r0, r9
1001240a:	18ff      	adds	r7, r7, r3
1001240c:	1c7b      	adds	r3, r7, #1
1001240e:	469a      	mov	sl, r3
10012410:	9b00      	ldr	r3, [sp, #0]
10012412:	4060      	eors	r0, r4
10012414:	9002      	str	r0, [sp, #8]
10012416:	430b      	orrs	r3, r1
10012418:	2b0f      	cmp	r3, #15
1001241a:	d900      	bls.n	1001241e <__aeabi_dmul+0x92>
1001241c:	e0ac      	b.n	10012578 <__aeabi_dmul+0x1ec>
1001241e:	4853      	ldr	r0, [pc, #332]	; (1001256c <__aeabi_dmul+0x1e0>)
10012420:	009b      	lsls	r3, r3, #2
10012422:	58c3      	ldr	r3, [r0, r3]
10012424:	469f      	mov	pc, r3
10012426:	465b      	mov	r3, fp
10012428:	431d      	orrs	r5, r3
1001242a:	d000      	beq.n	1001242e <__aeabi_dmul+0xa2>
1001242c:	e082      	b.n	10012534 <__aeabi_dmul+0x1a8>
1001242e:	2308      	movs	r3, #8
10012430:	9300      	str	r3, [sp, #0]
10012432:	2300      	movs	r3, #0
10012434:	469b      	mov	fp, r3
10012436:	3302      	adds	r3, #2
10012438:	2600      	movs	r6, #0
1001243a:	4698      	mov	r8, r3
1001243c:	e7cb      	b.n	100123d6 <__aeabi_dmul+0x4a>
1001243e:	9b02      	ldr	r3, [sp, #8]
10012440:	9301      	str	r3, [sp, #4]
10012442:	4643      	mov	r3, r8
10012444:	2b02      	cmp	r3, #2
10012446:	d159      	bne.n	100124fc <__aeabi_dmul+0x170>
10012448:	2401      	movs	r4, #1
1001244a:	2500      	movs	r5, #0
1001244c:	2600      	movs	r6, #0
1001244e:	9b01      	ldr	r3, [sp, #4]
10012450:	401c      	ands	r4, r3
10012452:	4b44      	ldr	r3, [pc, #272]	; (10012564 <__aeabi_dmul+0x1d8>)
10012454:	2100      	movs	r1, #0
10012456:	032d      	lsls	r5, r5, #12
10012458:	0d0a      	lsrs	r2, r1, #20
1001245a:	0512      	lsls	r2, r2, #20
1001245c:	0b2d      	lsrs	r5, r5, #12
1001245e:	4315      	orrs	r5, r2
10012460:	4a43      	ldr	r2, [pc, #268]	; (10012570 <__aeabi_dmul+0x1e4>)
10012462:	051b      	lsls	r3, r3, #20
10012464:	4015      	ands	r5, r2
10012466:	431d      	orrs	r5, r3
10012468:	006d      	lsls	r5, r5, #1
1001246a:	07e4      	lsls	r4, r4, #31
1001246c:	086d      	lsrs	r5, r5, #1
1001246e:	4325      	orrs	r5, r4
10012470:	1c30      	adds	r0, r6, #0
10012472:	1c29      	adds	r1, r5, #0
10012474:	b007      	add	sp, #28
10012476:	bc3c      	pop	{r2, r3, r4, r5}
10012478:	4690      	mov	r8, r2
1001247a:	4699      	mov	r9, r3
1001247c:	46a2      	mov	sl, r4
1001247e:	46ab      	mov	fp, r5
10012480:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012482:	432b      	orrs	r3, r5
10012484:	d04e      	beq.n	10012524 <__aeabi_dmul+0x198>
10012486:	465b      	mov	r3, fp
10012488:	2b00      	cmp	r3, #0
1001248a:	d100      	bne.n	1001248e <__aeabi_dmul+0x102>
1001248c:	e185      	b.n	1001279a <__aeabi_dmul+0x40e>
1001248e:	4658      	mov	r0, fp
10012490:	f000 fe36 	bl	10013100 <__clzsi2>
10012494:	1c02      	adds	r2, r0, #0
10012496:	2328      	movs	r3, #40	; 0x28
10012498:	1c29      	adds	r1, r5, #0
1001249a:	1a9b      	subs	r3, r3, r2
1001249c:	1c16      	adds	r6, r2, #0
1001249e:	4658      	mov	r0, fp
100124a0:	40d9      	lsrs	r1, r3
100124a2:	3e08      	subs	r6, #8
100124a4:	40b0      	lsls	r0, r6
100124a6:	1c0b      	adds	r3, r1, #0
100124a8:	40b5      	lsls	r5, r6
100124aa:	4303      	orrs	r3, r0
100124ac:	469b      	mov	fp, r3
100124ae:	1c2e      	adds	r6, r5, #0
100124b0:	2300      	movs	r3, #0
100124b2:	4f30      	ldr	r7, [pc, #192]	; (10012574 <__aeabi_dmul+0x1e8>)
100124b4:	9300      	str	r3, [sp, #0]
100124b6:	1abf      	subs	r7, r7, r2
100124b8:	4698      	mov	r8, r3
100124ba:	e78c      	b.n	100123d6 <__aeabi_dmul+0x4a>
100124bc:	4651      	mov	r1, sl
100124be:	4329      	orrs	r1, r5
100124c0:	d12e      	bne.n	10012520 <__aeabi_dmul+0x194>
100124c2:	2500      	movs	r5, #0
100124c4:	2200      	movs	r2, #0
100124c6:	2102      	movs	r1, #2
100124c8:	e79e      	b.n	10012408 <__aeabi_dmul+0x7c>
100124ca:	4651      	mov	r1, sl
100124cc:	4329      	orrs	r1, r5
100124ce:	d023      	beq.n	10012518 <__aeabi_dmul+0x18c>
100124d0:	2d00      	cmp	r5, #0
100124d2:	d100      	bne.n	100124d6 <__aeabi_dmul+0x14a>
100124d4:	e154      	b.n	10012780 <__aeabi_dmul+0x3f4>
100124d6:	1c28      	adds	r0, r5, #0
100124d8:	f000 fe12 	bl	10013100 <__clzsi2>
100124dc:	1c03      	adds	r3, r0, #0
100124de:	2128      	movs	r1, #40	; 0x28
100124e0:	4650      	mov	r0, sl
100124e2:	1ac9      	subs	r1, r1, r3
100124e4:	1c1a      	adds	r2, r3, #0
100124e6:	40c8      	lsrs	r0, r1
100124e8:	4651      	mov	r1, sl
100124ea:	3a08      	subs	r2, #8
100124ec:	4091      	lsls	r1, r2
100124ee:	4095      	lsls	r5, r2
100124f0:	1c0a      	adds	r2, r1, #0
100124f2:	4305      	orrs	r5, r0
100124f4:	481f      	ldr	r0, [pc, #124]	; (10012574 <__aeabi_dmul+0x1e8>)
100124f6:	2100      	movs	r1, #0
100124f8:	1ac3      	subs	r3, r0, r3
100124fa:	e785      	b.n	10012408 <__aeabi_dmul+0x7c>
100124fc:	2b03      	cmp	r3, #3
100124fe:	d100      	bne.n	10012502 <__aeabi_dmul+0x176>
10012500:	e1c2      	b.n	10012888 <__aeabi_dmul+0x4fc>
10012502:	2b01      	cmp	r3, #1
10012504:	d000      	beq.n	10012508 <__aeabi_dmul+0x17c>
10012506:	e16d      	b.n	100127e4 <__aeabi_dmul+0x458>
10012508:	4644      	mov	r4, r8
1001250a:	9b01      	ldr	r3, [sp, #4]
1001250c:	2500      	movs	r5, #0
1001250e:	401c      	ands	r4, r3
10012510:	b2e4      	uxtb	r4, r4
10012512:	2300      	movs	r3, #0
10012514:	2600      	movs	r6, #0
10012516:	e79d      	b.n	10012454 <__aeabi_dmul+0xc8>
10012518:	2500      	movs	r5, #0
1001251a:	2200      	movs	r2, #0
1001251c:	2101      	movs	r1, #1
1001251e:	e773      	b.n	10012408 <__aeabi_dmul+0x7c>
10012520:	2103      	movs	r1, #3
10012522:	e771      	b.n	10012408 <__aeabi_dmul+0x7c>
10012524:	2304      	movs	r3, #4
10012526:	9300      	str	r3, [sp, #0]
10012528:	2300      	movs	r3, #0
1001252a:	469b      	mov	fp, r3
1001252c:	3301      	adds	r3, #1
1001252e:	2600      	movs	r6, #0
10012530:	4698      	mov	r8, r3
10012532:	e750      	b.n	100123d6 <__aeabi_dmul+0x4a>
10012534:	230c      	movs	r3, #12
10012536:	9300      	str	r3, [sp, #0]
10012538:	3b09      	subs	r3, #9
1001253a:	4698      	mov	r8, r3
1001253c:	e74b      	b.n	100123d6 <__aeabi_dmul+0x4a>
1001253e:	2580      	movs	r5, #128	; 0x80
10012540:	2400      	movs	r4, #0
10012542:	032d      	lsls	r5, r5, #12
10012544:	2600      	movs	r6, #0
10012546:	4b07      	ldr	r3, [pc, #28]	; (10012564 <__aeabi_dmul+0x1d8>)
10012548:	e784      	b.n	10012454 <__aeabi_dmul+0xc8>
1001254a:	464b      	mov	r3, r9
1001254c:	46ab      	mov	fp, r5
1001254e:	1c16      	adds	r6, r2, #0
10012550:	9301      	str	r3, [sp, #4]
10012552:	4688      	mov	r8, r1
10012554:	e775      	b.n	10012442 <__aeabi_dmul+0xb6>
10012556:	9b02      	ldr	r3, [sp, #8]
10012558:	46ab      	mov	fp, r5
1001255a:	1c16      	adds	r6, r2, #0
1001255c:	9301      	str	r3, [sp, #4]
1001255e:	4688      	mov	r8, r1
10012560:	e76f      	b.n	10012442 <__aeabi_dmul+0xb6>
10012562:	46c0      	nop			; (mov r8, r8)
10012564:	000007ff 	.word	0x000007ff
10012568:	fffffc01 	.word	0xfffffc01
1001256c:	10016054 	.word	0x10016054
10012570:	800fffff 	.word	0x800fffff
10012574:	fffffc0d 	.word	0xfffffc0d
10012578:	0c33      	lsrs	r3, r6, #16
1001257a:	0436      	lsls	r6, r6, #16
1001257c:	0c36      	lsrs	r6, r6, #16
1001257e:	469c      	mov	ip, r3
10012580:	1c33      	adds	r3, r6, #0
10012582:	0c14      	lsrs	r4, r2, #16
10012584:	0412      	lsls	r2, r2, #16
10012586:	0c12      	lsrs	r2, r2, #16
10012588:	4353      	muls	r3, r2
1001258a:	4698      	mov	r8, r3
1001258c:	4663      	mov	r3, ip
1001258e:	4353      	muls	r3, r2
10012590:	4699      	mov	r9, r3
10012592:	4663      	mov	r3, ip
10012594:	4363      	muls	r3, r4
10012596:	9301      	str	r3, [sp, #4]
10012598:	1c33      	adds	r3, r6, #0
1001259a:	4641      	mov	r1, r8
1001259c:	4363      	muls	r3, r4
1001259e:	0c09      	lsrs	r1, r1, #16
100125a0:	444b      	add	r3, r9
100125a2:	185b      	adds	r3, r3, r1
100125a4:	4599      	cmp	r9, r3
100125a6:	d905      	bls.n	100125b4 <__aeabi_dmul+0x228>
100125a8:	2080      	movs	r0, #128	; 0x80
100125aa:	0240      	lsls	r0, r0, #9
100125ac:	4681      	mov	r9, r0
100125ae:	9901      	ldr	r1, [sp, #4]
100125b0:	4449      	add	r1, r9
100125b2:	9101      	str	r1, [sp, #4]
100125b4:	0c19      	lsrs	r1, r3, #16
100125b6:	9103      	str	r1, [sp, #12]
100125b8:	4641      	mov	r1, r8
100125ba:	0409      	lsls	r1, r1, #16
100125bc:	0c09      	lsrs	r1, r1, #16
100125be:	041b      	lsls	r3, r3, #16
100125c0:	185b      	adds	r3, r3, r1
100125c2:	9304      	str	r3, [sp, #16]
100125c4:	0c2b      	lsrs	r3, r5, #16
100125c6:	4698      	mov	r8, r3
100125c8:	1c33      	adds	r3, r6, #0
100125ca:	042d      	lsls	r5, r5, #16
100125cc:	0c29      	lsrs	r1, r5, #16
100125ce:	434b      	muls	r3, r1
100125d0:	4660      	mov	r0, ip
100125d2:	9300      	str	r3, [sp, #0]
100125d4:	4643      	mov	r3, r8
100125d6:	4665      	mov	r5, ip
100125d8:	4358      	muls	r0, r3
100125da:	435e      	muls	r6, r3
100125dc:	9b00      	ldr	r3, [sp, #0]
100125de:	434d      	muls	r5, r1
100125e0:	0c1b      	lsrs	r3, r3, #16
100125e2:	4699      	mov	r9, r3
100125e4:	19ae      	adds	r6, r5, r6
100125e6:	444e      	add	r6, r9
100125e8:	4684      	mov	ip, r0
100125ea:	42b5      	cmp	r5, r6
100125ec:	d903      	bls.n	100125f6 <__aeabi_dmul+0x26a>
100125ee:	2380      	movs	r3, #128	; 0x80
100125f0:	025b      	lsls	r3, r3, #9
100125f2:	4699      	mov	r9, r3
100125f4:	44cc      	add	ip, r9
100125f6:	0c35      	lsrs	r5, r6, #16
100125f8:	1c2b      	adds	r3, r5, #0
100125fa:	9803      	ldr	r0, [sp, #12]
100125fc:	4463      	add	r3, ip
100125fe:	4684      	mov	ip, r0
10012600:	9305      	str	r3, [sp, #20]
10012602:	9b00      	ldr	r3, [sp, #0]
10012604:	0436      	lsls	r6, r6, #16
10012606:	041b      	lsls	r3, r3, #16
10012608:	0c1b      	lsrs	r3, r3, #16
1001260a:	18f3      	adds	r3, r6, r3
1001260c:	449c      	add	ip, r3
1001260e:	4660      	mov	r0, ip
10012610:	9003      	str	r0, [sp, #12]
10012612:	4658      	mov	r0, fp
10012614:	0405      	lsls	r5, r0, #16
10012616:	0c06      	lsrs	r6, r0, #16
10012618:	0c28      	lsrs	r0, r5, #16
1001261a:	4684      	mov	ip, r0
1001261c:	4350      	muls	r0, r2
1001261e:	1c35      	adds	r5, r6, #0
10012620:	4681      	mov	r9, r0
10012622:	4660      	mov	r0, ip
10012624:	4365      	muls	r5, r4
10012626:	4344      	muls	r4, r0
10012628:	4648      	mov	r0, r9
1001262a:	0c00      	lsrs	r0, r0, #16
1001262c:	4683      	mov	fp, r0
1001262e:	4372      	muls	r2, r6
10012630:	1914      	adds	r4, r2, r4
10012632:	445c      	add	r4, fp
10012634:	42a2      	cmp	r2, r4
10012636:	d903      	bls.n	10012640 <__aeabi_dmul+0x2b4>
10012638:	2280      	movs	r2, #128	; 0x80
1001263a:	0252      	lsls	r2, r2, #9
1001263c:	4693      	mov	fp, r2
1001263e:	445d      	add	r5, fp
10012640:	0c22      	lsrs	r2, r4, #16
10012642:	18ad      	adds	r5, r5, r2
10012644:	464a      	mov	r2, r9
10012646:	0412      	lsls	r2, r2, #16
10012648:	0c12      	lsrs	r2, r2, #16
1001264a:	0424      	lsls	r4, r4, #16
1001264c:	4640      	mov	r0, r8
1001264e:	18a4      	adds	r4, r4, r2
10012650:	4662      	mov	r2, ip
10012652:	434a      	muls	r2, r1
10012654:	4371      	muls	r1, r6
10012656:	4346      	muls	r6, r0
10012658:	4660      	mov	r0, ip
1001265a:	9600      	str	r6, [sp, #0]
1001265c:	4646      	mov	r6, r8
1001265e:	4370      	muls	r0, r6
10012660:	4680      	mov	r8, r0
10012662:	0c10      	lsrs	r0, r2, #16
10012664:	4684      	mov	ip, r0
10012666:	4488      	add	r8, r1
10012668:	44e0      	add	r8, ip
1001266a:	4541      	cmp	r1, r8
1001266c:	d905      	bls.n	1001267a <__aeabi_dmul+0x2ee>
1001266e:	2180      	movs	r1, #128	; 0x80
10012670:	0249      	lsls	r1, r1, #9
10012672:	468c      	mov	ip, r1
10012674:	9900      	ldr	r1, [sp, #0]
10012676:	4461      	add	r1, ip
10012678:	9100      	str	r1, [sp, #0]
1001267a:	9801      	ldr	r0, [sp, #4]
1001267c:	9903      	ldr	r1, [sp, #12]
1001267e:	4684      	mov	ip, r0
10012680:	4461      	add	r1, ip
10012682:	4299      	cmp	r1, r3
10012684:	419b      	sbcs	r3, r3
10012686:	425b      	negs	r3, r3
10012688:	4699      	mov	r9, r3
1001268a:	9805      	ldr	r0, [sp, #20]
1001268c:	4643      	mov	r3, r8
1001268e:	4684      	mov	ip, r0
10012690:	0412      	lsls	r2, r2, #16
10012692:	0c12      	lsrs	r2, r2, #16
10012694:	041b      	lsls	r3, r3, #16
10012696:	189b      	adds	r3, r3, r2
10012698:	4463      	add	r3, ip
1001269a:	469c      	mov	ip, r3
1001269c:	46ab      	mov	fp, r5
1001269e:	4283      	cmp	r3, r0
100126a0:	419b      	sbcs	r3, r3
100126a2:	4640      	mov	r0, r8
100126a4:	190a      	adds	r2, r1, r4
100126a6:	44cc      	add	ip, r9
100126a8:	42a2      	cmp	r2, r4
100126aa:	4189      	sbcs	r1, r1
100126ac:	44e3      	add	fp, ip
100126ae:	45cc      	cmp	ip, r9
100126b0:	41b6      	sbcs	r6, r6
100126b2:	465c      	mov	r4, fp
100126b4:	0c00      	lsrs	r0, r0, #16
100126b6:	4680      	mov	r8, r0
100126b8:	4249      	negs	r1, r1
100126ba:	4276      	negs	r6, r6
100126bc:	425b      	negs	r3, r3
100126be:	1864      	adds	r4, r4, r1
100126c0:	4333      	orrs	r3, r6
100126c2:	4498      	add	r8, r3
100126c4:	428c      	cmp	r4, r1
100126c6:	4189      	sbcs	r1, r1
100126c8:	45ab      	cmp	fp, r5
100126ca:	419b      	sbcs	r3, r3
100126cc:	4249      	negs	r1, r1
100126ce:	425b      	negs	r3, r3
100126d0:	4319      	orrs	r1, r3
100126d2:	1c0d      	adds	r5, r1, #0
100126d4:	9b00      	ldr	r3, [sp, #0]
100126d6:	4445      	add	r5, r8
100126d8:	18ee      	adds	r6, r5, r3
100126da:	0276      	lsls	r6, r6, #9
100126dc:	0de5      	lsrs	r5, r4, #23
100126de:	432e      	orrs	r6, r5
100126e0:	46b3      	mov	fp, r6
100126e2:	9b04      	ldr	r3, [sp, #16]
100126e4:	0256      	lsls	r6, r2, #9
100126e6:	431e      	orrs	r6, r3
100126e8:	1e73      	subs	r3, r6, #1
100126ea:	419e      	sbcs	r6, r3
100126ec:	465b      	mov	r3, fp
100126ee:	0dd2      	lsrs	r2, r2, #23
100126f0:	4332      	orrs	r2, r6
100126f2:	0266      	lsls	r6, r4, #9
100126f4:	4316      	orrs	r6, r2
100126f6:	01db      	lsls	r3, r3, #7
100126f8:	d50a      	bpl.n	10012710 <__aeabi_dmul+0x384>
100126fa:	2301      	movs	r3, #1
100126fc:	4033      	ands	r3, r6
100126fe:	0876      	lsrs	r6, r6, #1
10012700:	431e      	orrs	r6, r3
10012702:	465b      	mov	r3, fp
10012704:	07db      	lsls	r3, r3, #31
10012706:	431e      	orrs	r6, r3
10012708:	465b      	mov	r3, fp
1001270a:	085b      	lsrs	r3, r3, #1
1001270c:	469b      	mov	fp, r3
1001270e:	4657      	mov	r7, sl
10012710:	4b63      	ldr	r3, [pc, #396]	; (100128a0 <__aeabi_dmul+0x514>)
10012712:	18fb      	adds	r3, r7, r3
10012714:	2b00      	cmp	r3, #0
10012716:	dd5a      	ble.n	100127ce <__aeabi_dmul+0x442>
10012718:	0772      	lsls	r2, r6, #29
1001271a:	d009      	beq.n	10012730 <__aeabi_dmul+0x3a4>
1001271c:	220f      	movs	r2, #15
1001271e:	4032      	ands	r2, r6
10012720:	2a04      	cmp	r2, #4
10012722:	d005      	beq.n	10012730 <__aeabi_dmul+0x3a4>
10012724:	1d32      	adds	r2, r6, #4
10012726:	42b2      	cmp	r2, r6
10012728:	41b6      	sbcs	r6, r6
1001272a:	4276      	negs	r6, r6
1001272c:	44b3      	add	fp, r6
1001272e:	1c16      	adds	r6, r2, #0
10012730:	465a      	mov	r2, fp
10012732:	01d2      	lsls	r2, r2, #7
10012734:	d506      	bpl.n	10012744 <__aeabi_dmul+0x3b8>
10012736:	465a      	mov	r2, fp
10012738:	4b5a      	ldr	r3, [pc, #360]	; (100128a4 <__aeabi_dmul+0x518>)
1001273a:	401a      	ands	r2, r3
1001273c:	2380      	movs	r3, #128	; 0x80
1001273e:	4693      	mov	fp, r2
10012740:	00db      	lsls	r3, r3, #3
10012742:	18fb      	adds	r3, r7, r3
10012744:	4a58      	ldr	r2, [pc, #352]	; (100128a8 <__aeabi_dmul+0x51c>)
10012746:	4293      	cmp	r3, r2
10012748:	dd34      	ble.n	100127b4 <__aeabi_dmul+0x428>
1001274a:	2401      	movs	r4, #1
1001274c:	9b02      	ldr	r3, [sp, #8]
1001274e:	2500      	movs	r5, #0
10012750:	401c      	ands	r4, r3
10012752:	2600      	movs	r6, #0
10012754:	4b55      	ldr	r3, [pc, #340]	; (100128ac <__aeabi_dmul+0x520>)
10012756:	e67d      	b.n	10012454 <__aeabi_dmul+0xc8>
10012758:	2080      	movs	r0, #128	; 0x80
1001275a:	465b      	mov	r3, fp
1001275c:	0300      	lsls	r0, r0, #12
1001275e:	4203      	tst	r3, r0
10012760:	d008      	beq.n	10012774 <__aeabi_dmul+0x3e8>
10012762:	4205      	tst	r5, r0
10012764:	d106      	bne.n	10012774 <__aeabi_dmul+0x3e8>
10012766:	4305      	orrs	r5, r0
10012768:	032d      	lsls	r5, r5, #12
1001276a:	0b2d      	lsrs	r5, r5, #12
1001276c:	464c      	mov	r4, r9
1001276e:	1c16      	adds	r6, r2, #0
10012770:	4b4e      	ldr	r3, [pc, #312]	; (100128ac <__aeabi_dmul+0x520>)
10012772:	e66f      	b.n	10012454 <__aeabi_dmul+0xc8>
10012774:	465d      	mov	r5, fp
10012776:	4305      	orrs	r5, r0
10012778:	032d      	lsls	r5, r5, #12
1001277a:	0b2d      	lsrs	r5, r5, #12
1001277c:	4b4b      	ldr	r3, [pc, #300]	; (100128ac <__aeabi_dmul+0x520>)
1001277e:	e669      	b.n	10012454 <__aeabi_dmul+0xc8>
10012780:	4650      	mov	r0, sl
10012782:	f000 fcbd 	bl	10013100 <__clzsi2>
10012786:	1c03      	adds	r3, r0, #0
10012788:	3320      	adds	r3, #32
1001278a:	2b27      	cmp	r3, #39	; 0x27
1001278c:	dc00      	bgt.n	10012790 <__aeabi_dmul+0x404>
1001278e:	e6a6      	b.n	100124de <__aeabi_dmul+0x152>
10012790:	4655      	mov	r5, sl
10012792:	3808      	subs	r0, #8
10012794:	4085      	lsls	r5, r0
10012796:	2200      	movs	r2, #0
10012798:	e6ac      	b.n	100124f4 <__aeabi_dmul+0x168>
1001279a:	1c28      	adds	r0, r5, #0
1001279c:	f000 fcb0 	bl	10013100 <__clzsi2>
100127a0:	1c02      	adds	r2, r0, #0
100127a2:	3220      	adds	r2, #32
100127a4:	2a27      	cmp	r2, #39	; 0x27
100127a6:	dc00      	bgt.n	100127aa <__aeabi_dmul+0x41e>
100127a8:	e675      	b.n	10012496 <__aeabi_dmul+0x10a>
100127aa:	3808      	subs	r0, #8
100127ac:	4085      	lsls	r5, r0
100127ae:	2600      	movs	r6, #0
100127b0:	46ab      	mov	fp, r5
100127b2:	e67d      	b.n	100124b0 <__aeabi_dmul+0x124>
100127b4:	465a      	mov	r2, fp
100127b6:	08f6      	lsrs	r6, r6, #3
100127b8:	0752      	lsls	r2, r2, #29
100127ba:	4316      	orrs	r6, r2
100127bc:	465a      	mov	r2, fp
100127be:	2401      	movs	r4, #1
100127c0:	0255      	lsls	r5, r2, #9
100127c2:	9a02      	ldr	r2, [sp, #8]
100127c4:	055b      	lsls	r3, r3, #21
100127c6:	0b2d      	lsrs	r5, r5, #12
100127c8:	0d5b      	lsrs	r3, r3, #21
100127ca:	4014      	ands	r4, r2
100127cc:	e642      	b.n	10012454 <__aeabi_dmul+0xc8>
100127ce:	4d38      	ldr	r5, [pc, #224]	; (100128b0 <__aeabi_dmul+0x524>)
100127d0:	1bed      	subs	r5, r5, r7
100127d2:	2d38      	cmp	r5, #56	; 0x38
100127d4:	dd0a      	ble.n	100127ec <__aeabi_dmul+0x460>
100127d6:	2401      	movs	r4, #1
100127d8:	9b02      	ldr	r3, [sp, #8]
100127da:	2500      	movs	r5, #0
100127dc:	401c      	ands	r4, r3
100127de:	2600      	movs	r6, #0
100127e0:	2300      	movs	r3, #0
100127e2:	e637      	b.n	10012454 <__aeabi_dmul+0xc8>
100127e4:	9b01      	ldr	r3, [sp, #4]
100127e6:	4657      	mov	r7, sl
100127e8:	9302      	str	r3, [sp, #8]
100127ea:	e791      	b.n	10012710 <__aeabi_dmul+0x384>
100127ec:	2d1f      	cmp	r5, #31
100127ee:	dc25      	bgt.n	1001283c <__aeabi_dmul+0x4b0>
100127f0:	4b30      	ldr	r3, [pc, #192]	; (100128b4 <__aeabi_dmul+0x528>)
100127f2:	1c32      	adds	r2, r6, #0
100127f4:	469c      	mov	ip, r3
100127f6:	4467      	add	r7, ip
100127f8:	40be      	lsls	r6, r7
100127fa:	465b      	mov	r3, fp
100127fc:	40bb      	lsls	r3, r7
100127fe:	1c37      	adds	r7, r6, #0
10012800:	40ea      	lsrs	r2, r5
10012802:	1e7e      	subs	r6, r7, #1
10012804:	41b7      	sbcs	r7, r6
10012806:	4313      	orrs	r3, r2
10012808:	433b      	orrs	r3, r7
1001280a:	1c1e      	adds	r6, r3, #0
1001280c:	465b      	mov	r3, fp
1001280e:	40eb      	lsrs	r3, r5
10012810:	1c1d      	adds	r5, r3, #0
10012812:	0773      	lsls	r3, r6, #29
10012814:	d009      	beq.n	1001282a <__aeabi_dmul+0x49e>
10012816:	230f      	movs	r3, #15
10012818:	4033      	ands	r3, r6
1001281a:	2b04      	cmp	r3, #4
1001281c:	d005      	beq.n	1001282a <__aeabi_dmul+0x49e>
1001281e:	1d33      	adds	r3, r6, #4
10012820:	42b3      	cmp	r3, r6
10012822:	41b6      	sbcs	r6, r6
10012824:	4276      	negs	r6, r6
10012826:	19ad      	adds	r5, r5, r6
10012828:	1c1e      	adds	r6, r3, #0
1001282a:	022b      	lsls	r3, r5, #8
1001282c:	d520      	bpl.n	10012870 <__aeabi_dmul+0x4e4>
1001282e:	2401      	movs	r4, #1
10012830:	9b02      	ldr	r3, [sp, #8]
10012832:	2500      	movs	r5, #0
10012834:	401c      	ands	r4, r3
10012836:	2600      	movs	r6, #0
10012838:	2301      	movs	r3, #1
1001283a:	e60b      	b.n	10012454 <__aeabi_dmul+0xc8>
1001283c:	465a      	mov	r2, fp
1001283e:	4b1e      	ldr	r3, [pc, #120]	; (100128b8 <__aeabi_dmul+0x52c>)
10012840:	1bdb      	subs	r3, r3, r7
10012842:	40da      	lsrs	r2, r3
10012844:	1c13      	adds	r3, r2, #0
10012846:	2d20      	cmp	r5, #32
10012848:	d01c      	beq.n	10012884 <__aeabi_dmul+0x4f8>
1001284a:	4a1c      	ldr	r2, [pc, #112]	; (100128bc <__aeabi_dmul+0x530>)
1001284c:	4694      	mov	ip, r2
1001284e:	465a      	mov	r2, fp
10012850:	4467      	add	r7, ip
10012852:	40ba      	lsls	r2, r7
10012854:	1c17      	adds	r7, r2, #0
10012856:	433e      	orrs	r6, r7
10012858:	1e72      	subs	r2, r6, #1
1001285a:	4196      	sbcs	r6, r2
1001285c:	431e      	orrs	r6, r3
1001285e:	2307      	movs	r3, #7
10012860:	2500      	movs	r5, #0
10012862:	4033      	ands	r3, r6
10012864:	d007      	beq.n	10012876 <__aeabi_dmul+0x4ea>
10012866:	230f      	movs	r3, #15
10012868:	2500      	movs	r5, #0
1001286a:	4033      	ands	r3, r6
1001286c:	2b04      	cmp	r3, #4
1001286e:	d1d6      	bne.n	1001281e <__aeabi_dmul+0x492>
10012870:	076b      	lsls	r3, r5, #29
10012872:	026d      	lsls	r5, r5, #9
10012874:	0b2d      	lsrs	r5, r5, #12
10012876:	2401      	movs	r4, #1
10012878:	08f6      	lsrs	r6, r6, #3
1001287a:	431e      	orrs	r6, r3
1001287c:	9b02      	ldr	r3, [sp, #8]
1001287e:	401c      	ands	r4, r3
10012880:	2300      	movs	r3, #0
10012882:	e5e7      	b.n	10012454 <__aeabi_dmul+0xc8>
10012884:	2700      	movs	r7, #0
10012886:	e7e6      	b.n	10012856 <__aeabi_dmul+0x4ca>
10012888:	2580      	movs	r5, #128	; 0x80
1001288a:	465b      	mov	r3, fp
1001288c:	2401      	movs	r4, #1
1001288e:	032d      	lsls	r5, r5, #12
10012890:	431d      	orrs	r5, r3
10012892:	9b01      	ldr	r3, [sp, #4]
10012894:	032d      	lsls	r5, r5, #12
10012896:	4023      	ands	r3, r4
10012898:	1c1c      	adds	r4, r3, #0
1001289a:	0b2d      	lsrs	r5, r5, #12
1001289c:	4b03      	ldr	r3, [pc, #12]	; (100128ac <__aeabi_dmul+0x520>)
1001289e:	e5d9      	b.n	10012454 <__aeabi_dmul+0xc8>
100128a0:	000003ff 	.word	0x000003ff
100128a4:	feffffff 	.word	0xfeffffff
100128a8:	000007fe 	.word	0x000007fe
100128ac:	000007ff 	.word	0x000007ff
100128b0:	fffffc02 	.word	0xfffffc02
100128b4:	0000041e 	.word	0x0000041e
100128b8:	fffffbe2 	.word	0xfffffbe2
100128bc:	0000043e 	.word	0x0000043e

100128c0 <__aeabi_dsub>:
100128c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100128c2:	464d      	mov	r5, r9
100128c4:	4644      	mov	r4, r8
100128c6:	465f      	mov	r7, fp
100128c8:	4656      	mov	r6, sl
100128ca:	b4f0      	push	{r4, r5, r6, r7}
100128cc:	1c0e      	adds	r6, r1, #0
100128ce:	1c11      	adds	r1, r2, #0
100128d0:	0332      	lsls	r2, r6, #12
100128d2:	0a52      	lsrs	r2, r2, #9
100128d4:	0f47      	lsrs	r7, r0, #29
100128d6:	4317      	orrs	r7, r2
100128d8:	00c5      	lsls	r5, r0, #3
100128da:	031a      	lsls	r2, r3, #12
100128dc:	0058      	lsls	r0, r3, #1
100128de:	0fdb      	lsrs	r3, r3, #31
100128e0:	4699      	mov	r9, r3
100128e2:	0a52      	lsrs	r2, r2, #9
100128e4:	0f4b      	lsrs	r3, r1, #29
100128e6:	b083      	sub	sp, #12
100128e8:	431a      	orrs	r2, r3
100128ea:	00cb      	lsls	r3, r1, #3
100128ec:	9301      	str	r3, [sp, #4]
100128ee:	4bcf      	ldr	r3, [pc, #828]	; (10012c2c <__aeabi_dsub+0x36c>)
100128f0:	0074      	lsls	r4, r6, #1
100128f2:	0ff6      	lsrs	r6, r6, #31
100128f4:	0d64      	lsrs	r4, r4, #21
100128f6:	46b0      	mov	r8, r6
100128f8:	0d40      	lsrs	r0, r0, #21
100128fa:	4298      	cmp	r0, r3
100128fc:	d100      	bne.n	10012900 <__aeabi_dsub+0x40>
100128fe:	e0e8      	b.n	10012ad2 <__aeabi_dsub+0x212>
10012900:	2301      	movs	r3, #1
10012902:	4649      	mov	r1, r9
10012904:	4059      	eors	r1, r3
10012906:	1c0b      	adds	r3, r1, #0
10012908:	429e      	cmp	r6, r3
1001290a:	d100      	bne.n	1001290e <__aeabi_dsub+0x4e>
1001290c:	e0b1      	b.n	10012a72 <__aeabi_dsub+0x1b2>
1001290e:	1a26      	subs	r6, r4, r0
10012910:	2e00      	cmp	r6, #0
10012912:	dc00      	bgt.n	10012916 <__aeabi_dsub+0x56>
10012914:	e11c      	b.n	10012b50 <__aeabi_dsub+0x290>
10012916:	2800      	cmp	r0, #0
10012918:	d142      	bne.n	100129a0 <__aeabi_dsub+0xe0>
1001291a:	1c13      	adds	r3, r2, #0
1001291c:	9901      	ldr	r1, [sp, #4]
1001291e:	430b      	orrs	r3, r1
10012920:	d000      	beq.n	10012924 <__aeabi_dsub+0x64>
10012922:	e0e6      	b.n	10012af2 <__aeabi_dsub+0x232>
10012924:	076b      	lsls	r3, r5, #29
10012926:	d100      	bne.n	1001292a <__aeabi_dsub+0x6a>
10012928:	e08e      	b.n	10012a48 <__aeabi_dsub+0x188>
1001292a:	230f      	movs	r3, #15
1001292c:	402b      	ands	r3, r5
1001292e:	2b04      	cmp	r3, #4
10012930:	d100      	bne.n	10012934 <__aeabi_dsub+0x74>
10012932:	e089      	b.n	10012a48 <__aeabi_dsub+0x188>
10012934:	1d2a      	adds	r2, r5, #4
10012936:	42aa      	cmp	r2, r5
10012938:	41ad      	sbcs	r5, r5
1001293a:	2380      	movs	r3, #128	; 0x80
1001293c:	2601      	movs	r6, #1
1001293e:	4641      	mov	r1, r8
10012940:	426d      	negs	r5, r5
10012942:	197f      	adds	r7, r7, r5
10012944:	041b      	lsls	r3, r3, #16
10012946:	403b      	ands	r3, r7
10012948:	400e      	ands	r6, r1
1001294a:	1c15      	adds	r5, r2, #0
1001294c:	2b00      	cmp	r3, #0
1001294e:	d100      	bne.n	10012952 <__aeabi_dsub+0x92>
10012950:	e083      	b.n	10012a5a <__aeabi_dsub+0x19a>
10012952:	4bb6      	ldr	r3, [pc, #728]	; (10012c2c <__aeabi_dsub+0x36c>)
10012954:	3401      	adds	r4, #1
10012956:	429c      	cmp	r4, r3
10012958:	d100      	bne.n	1001295c <__aeabi_dsub+0x9c>
1001295a:	e116      	b.n	10012b8a <__aeabi_dsub+0x2ca>
1001295c:	1c3a      	adds	r2, r7, #0
1001295e:	4bb4      	ldr	r3, [pc, #720]	; (10012c30 <__aeabi_dsub+0x370>)
10012960:	08ed      	lsrs	r5, r5, #3
10012962:	401a      	ands	r2, r3
10012964:	0750      	lsls	r0, r2, #29
10012966:	0564      	lsls	r4, r4, #21
10012968:	0252      	lsls	r2, r2, #9
1001296a:	4305      	orrs	r5, r0
1001296c:	0b12      	lsrs	r2, r2, #12
1001296e:	0d64      	lsrs	r4, r4, #21
10012970:	2100      	movs	r1, #0
10012972:	0312      	lsls	r2, r2, #12
10012974:	0d0b      	lsrs	r3, r1, #20
10012976:	051b      	lsls	r3, r3, #20
10012978:	0564      	lsls	r4, r4, #21
1001297a:	0b12      	lsrs	r2, r2, #12
1001297c:	431a      	orrs	r2, r3
1001297e:	0863      	lsrs	r3, r4, #1
10012980:	4cac      	ldr	r4, [pc, #688]	; (10012c34 <__aeabi_dsub+0x374>)
10012982:	07f6      	lsls	r6, r6, #31
10012984:	4014      	ands	r4, r2
10012986:	431c      	orrs	r4, r3
10012988:	0064      	lsls	r4, r4, #1
1001298a:	0864      	lsrs	r4, r4, #1
1001298c:	4334      	orrs	r4, r6
1001298e:	1c28      	adds	r0, r5, #0
10012990:	1c21      	adds	r1, r4, #0
10012992:	b003      	add	sp, #12
10012994:	bc3c      	pop	{r2, r3, r4, r5}
10012996:	4690      	mov	r8, r2
10012998:	4699      	mov	r9, r3
1001299a:	46a2      	mov	sl, r4
1001299c:	46ab      	mov	fp, r5
1001299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100129a0:	4ba2      	ldr	r3, [pc, #648]	; (10012c2c <__aeabi_dsub+0x36c>)
100129a2:	429c      	cmp	r4, r3
100129a4:	d0be      	beq.n	10012924 <__aeabi_dsub+0x64>
100129a6:	2380      	movs	r3, #128	; 0x80
100129a8:	041b      	lsls	r3, r3, #16
100129aa:	431a      	orrs	r2, r3
100129ac:	2e38      	cmp	r6, #56	; 0x38
100129ae:	dd00      	ble.n	100129b2 <__aeabi_dsub+0xf2>
100129b0:	e103      	b.n	10012bba <__aeabi_dsub+0x2fa>
100129b2:	2e1f      	cmp	r6, #31
100129b4:	dd00      	ble.n	100129b8 <__aeabi_dsub+0xf8>
100129b6:	e13f      	b.n	10012c38 <__aeabi_dsub+0x378>
100129b8:	2020      	movs	r0, #32
100129ba:	1b83      	subs	r3, r0, r6
100129bc:	4699      	mov	r9, r3
100129be:	1c13      	adds	r3, r2, #0
100129c0:	4649      	mov	r1, r9
100129c2:	408b      	lsls	r3, r1
100129c4:	469c      	mov	ip, r3
100129c6:	9b01      	ldr	r3, [sp, #4]
100129c8:	4660      	mov	r0, ip
100129ca:	40f3      	lsrs	r3, r6
100129cc:	4303      	orrs	r3, r0
100129ce:	9801      	ldr	r0, [sp, #4]
100129d0:	40f2      	lsrs	r2, r6
100129d2:	4088      	lsls	r0, r1
100129d4:	1c01      	adds	r1, r0, #0
100129d6:	1e48      	subs	r0, r1, #1
100129d8:	4181      	sbcs	r1, r0
100129da:	430b      	orrs	r3, r1
100129dc:	1aeb      	subs	r3, r5, r3
100129de:	429d      	cmp	r5, r3
100129e0:	4180      	sbcs	r0, r0
100129e2:	1c1d      	adds	r5, r3, #0
100129e4:	1aba      	subs	r2, r7, r2
100129e6:	4240      	negs	r0, r0
100129e8:	1a17      	subs	r7, r2, r0
100129ea:	023b      	lsls	r3, r7, #8
100129ec:	d400      	bmi.n	100129f0 <__aeabi_dsub+0x130>
100129ee:	e0a8      	b.n	10012b42 <__aeabi_dsub+0x282>
100129f0:	027a      	lsls	r2, r7, #9
100129f2:	0a56      	lsrs	r6, r2, #9
100129f4:	2e00      	cmp	r6, #0
100129f6:	d100      	bne.n	100129fa <__aeabi_dsub+0x13a>
100129f8:	e0ca      	b.n	10012b90 <__aeabi_dsub+0x2d0>
100129fa:	1c30      	adds	r0, r6, #0
100129fc:	f000 fb80 	bl	10013100 <__clzsi2>
10012a00:	1c03      	adds	r3, r0, #0
10012a02:	3b08      	subs	r3, #8
10012a04:	2b1f      	cmp	r3, #31
10012a06:	dd00      	ble.n	10012a0a <__aeabi_dsub+0x14a>
10012a08:	e0cb      	b.n	10012ba2 <__aeabi_dsub+0x2e2>
10012a0a:	2228      	movs	r2, #40	; 0x28
10012a0c:	1c29      	adds	r1, r5, #0
10012a0e:	1a12      	subs	r2, r2, r0
10012a10:	40d1      	lsrs	r1, r2
10012a12:	409e      	lsls	r6, r3
10012a14:	1c0a      	adds	r2, r1, #0
10012a16:	409d      	lsls	r5, r3
10012a18:	4332      	orrs	r2, r6
10012a1a:	429c      	cmp	r4, r3
10012a1c:	dd00      	ble.n	10012a20 <__aeabi_dsub+0x160>
10012a1e:	e0c8      	b.n	10012bb2 <__aeabi_dsub+0x2f2>
10012a20:	1b1c      	subs	r4, r3, r4
10012a22:	1c67      	adds	r7, r4, #1
10012a24:	2f1f      	cmp	r7, #31
10012a26:	dd00      	ble.n	10012a2a <__aeabi_dsub+0x16a>
10012a28:	e0ed      	b.n	10012c06 <__aeabi_dsub+0x346>
10012a2a:	231f      	movs	r3, #31
10012a2c:	1c29      	adds	r1, r5, #0
10012a2e:	1b1c      	subs	r4, r3, r4
10012a30:	1c13      	adds	r3, r2, #0
10012a32:	40a5      	lsls	r5, r4
10012a34:	40a3      	lsls	r3, r4
10012a36:	40f9      	lsrs	r1, r7
10012a38:	1e6c      	subs	r4, r5, #1
10012a3a:	41a5      	sbcs	r5, r4
10012a3c:	40fa      	lsrs	r2, r7
10012a3e:	4319      	orrs	r1, r3
10012a40:	430d      	orrs	r5, r1
10012a42:	1c17      	adds	r7, r2, #0
10012a44:	2400      	movs	r4, #0
10012a46:	e76d      	b.n	10012924 <__aeabi_dsub+0x64>
10012a48:	2380      	movs	r3, #128	; 0x80
10012a4a:	2601      	movs	r6, #1
10012a4c:	4642      	mov	r2, r8
10012a4e:	041b      	lsls	r3, r3, #16
10012a50:	403b      	ands	r3, r7
10012a52:	4016      	ands	r6, r2
10012a54:	2b00      	cmp	r3, #0
10012a56:	d000      	beq.n	10012a5a <__aeabi_dsub+0x19a>
10012a58:	e77b      	b.n	10012952 <__aeabi_dsub+0x92>
10012a5a:	4b74      	ldr	r3, [pc, #464]	; (10012c2c <__aeabi_dsub+0x36c>)
10012a5c:	08ed      	lsrs	r5, r5, #3
10012a5e:	0778      	lsls	r0, r7, #29
10012a60:	4305      	orrs	r5, r0
10012a62:	08fa      	lsrs	r2, r7, #3
10012a64:	429c      	cmp	r4, r3
10012a66:	d03b      	beq.n	10012ae0 <__aeabi_dsub+0x220>
10012a68:	0312      	lsls	r2, r2, #12
10012a6a:	0564      	lsls	r4, r4, #21
10012a6c:	0b12      	lsrs	r2, r2, #12
10012a6e:	0d64      	lsrs	r4, r4, #21
10012a70:	e77e      	b.n	10012970 <__aeabi_dsub+0xb0>
10012a72:	1a23      	subs	r3, r4, r0
10012a74:	469a      	mov	sl, r3
10012a76:	2b00      	cmp	r3, #0
10012a78:	dc00      	bgt.n	10012a7c <__aeabi_dsub+0x1bc>
10012a7a:	e0a5      	b.n	10012bc8 <__aeabi_dsub+0x308>
10012a7c:	2800      	cmp	r0, #0
10012a7e:	d044      	beq.n	10012b0a <__aeabi_dsub+0x24a>
10012a80:	486a      	ldr	r0, [pc, #424]	; (10012c2c <__aeabi_dsub+0x36c>)
10012a82:	4284      	cmp	r4, r0
10012a84:	d100      	bne.n	10012a88 <__aeabi_dsub+0x1c8>
10012a86:	e74d      	b.n	10012924 <__aeabi_dsub+0x64>
10012a88:	2080      	movs	r0, #128	; 0x80
10012a8a:	0400      	lsls	r0, r0, #16
10012a8c:	4302      	orrs	r2, r0
10012a8e:	4653      	mov	r3, sl
10012a90:	2b38      	cmp	r3, #56	; 0x38
10012a92:	dc00      	bgt.n	10012a96 <__aeabi_dsub+0x1d6>
10012a94:	e11c      	b.n	10012cd0 <__aeabi_dsub+0x410>
10012a96:	9b01      	ldr	r3, [sp, #4]
10012a98:	431a      	orrs	r2, r3
10012a9a:	1e51      	subs	r1, r2, #1
10012a9c:	418a      	sbcs	r2, r1
10012a9e:	b2d1      	uxtb	r1, r2
10012aa0:	2200      	movs	r2, #0
10012aa2:	1949      	adds	r1, r1, r5
10012aa4:	42a9      	cmp	r1, r5
10012aa6:	4180      	sbcs	r0, r0
10012aa8:	1c0d      	adds	r5, r1, #0
10012aaa:	19d2      	adds	r2, r2, r7
10012aac:	4240      	negs	r0, r0
10012aae:	1817      	adds	r7, r2, r0
10012ab0:	023b      	lsls	r3, r7, #8
10012ab2:	d546      	bpl.n	10012b42 <__aeabi_dsub+0x282>
10012ab4:	4b5d      	ldr	r3, [pc, #372]	; (10012c2c <__aeabi_dsub+0x36c>)
10012ab6:	3401      	adds	r4, #1
10012ab8:	429c      	cmp	r4, r3
10012aba:	d100      	bne.n	10012abe <__aeabi_dsub+0x1fe>
10012abc:	e169      	b.n	10012d92 <__aeabi_dsub+0x4d2>
10012abe:	2001      	movs	r0, #1
10012ac0:	4a5b      	ldr	r2, [pc, #364]	; (10012c30 <__aeabi_dsub+0x370>)
10012ac2:	086b      	lsrs	r3, r5, #1
10012ac4:	403a      	ands	r2, r7
10012ac6:	4028      	ands	r0, r5
10012ac8:	4318      	orrs	r0, r3
10012aca:	07d5      	lsls	r5, r2, #31
10012acc:	4305      	orrs	r5, r0
10012ace:	0857      	lsrs	r7, r2, #1
10012ad0:	e728      	b.n	10012924 <__aeabi_dsub+0x64>
10012ad2:	1c13      	adds	r3, r2, #0
10012ad4:	9901      	ldr	r1, [sp, #4]
10012ad6:	430b      	orrs	r3, r1
10012ad8:	d100      	bne.n	10012adc <__aeabi_dsub+0x21c>
10012ada:	e711      	b.n	10012900 <__aeabi_dsub+0x40>
10012adc:	464b      	mov	r3, r9
10012ade:	e713      	b.n	10012908 <__aeabi_dsub+0x48>
10012ae0:	1c2b      	adds	r3, r5, #0
10012ae2:	4313      	orrs	r3, r2
10012ae4:	d051      	beq.n	10012b8a <__aeabi_dsub+0x2ca>
10012ae6:	2380      	movs	r3, #128	; 0x80
10012ae8:	031b      	lsls	r3, r3, #12
10012aea:	431a      	orrs	r2, r3
10012aec:	0312      	lsls	r2, r2, #12
10012aee:	0b12      	lsrs	r2, r2, #12
10012af0:	e73e      	b.n	10012970 <__aeabi_dsub+0xb0>
10012af2:	3e01      	subs	r6, #1
10012af4:	2e00      	cmp	r6, #0
10012af6:	d000      	beq.n	10012afa <__aeabi_dsub+0x23a>
10012af8:	e080      	b.n	10012bfc <__aeabi_dsub+0x33c>
10012afa:	1a69      	subs	r1, r5, r1
10012afc:	428d      	cmp	r5, r1
10012afe:	419b      	sbcs	r3, r3
10012b00:	1aba      	subs	r2, r7, r2
10012b02:	425b      	negs	r3, r3
10012b04:	1ad7      	subs	r7, r2, r3
10012b06:	1c0d      	adds	r5, r1, #0
10012b08:	e76f      	b.n	100129ea <__aeabi_dsub+0x12a>
10012b0a:	1c10      	adds	r0, r2, #0
10012b0c:	9b01      	ldr	r3, [sp, #4]
10012b0e:	4318      	orrs	r0, r3
10012b10:	d100      	bne.n	10012b14 <__aeabi_dsub+0x254>
10012b12:	e707      	b.n	10012924 <__aeabi_dsub+0x64>
10012b14:	2301      	movs	r3, #1
10012b16:	425b      	negs	r3, r3
10012b18:	469c      	mov	ip, r3
10012b1a:	44e2      	add	sl, ip
10012b1c:	4653      	mov	r3, sl
10012b1e:	2b00      	cmp	r3, #0
10012b20:	d000      	beq.n	10012b24 <__aeabi_dsub+0x264>
10012b22:	e102      	b.n	10012d2a <__aeabi_dsub+0x46a>
10012b24:	9b01      	ldr	r3, [sp, #4]
10012b26:	19d2      	adds	r2, r2, r7
10012b28:	1959      	adds	r1, r3, r5
10012b2a:	42a9      	cmp	r1, r5
10012b2c:	419b      	sbcs	r3, r3
10012b2e:	425b      	negs	r3, r3
10012b30:	18d7      	adds	r7, r2, r3
10012b32:	1c0d      	adds	r5, r1, #0
10012b34:	e7bc      	b.n	10012ab0 <__aeabi_dsub+0x1f0>
10012b36:	4663      	mov	r3, ip
10012b38:	4303      	orrs	r3, r0
10012b3a:	d100      	bne.n	10012b3e <__aeabi_dsub+0x27e>
10012b3c:	e128      	b.n	10012d90 <__aeabi_dsub+0x4d0>
10012b3e:	1c07      	adds	r7, r0, #0
10012b40:	4665      	mov	r5, ip
10012b42:	076b      	lsls	r3, r5, #29
10012b44:	d000      	beq.n	10012b48 <__aeabi_dsub+0x288>
10012b46:	e6f0      	b.n	1001292a <__aeabi_dsub+0x6a>
10012b48:	2601      	movs	r6, #1
10012b4a:	4643      	mov	r3, r8
10012b4c:	401e      	ands	r6, r3
10012b4e:	e784      	b.n	10012a5a <__aeabi_dsub+0x19a>
10012b50:	2e00      	cmp	r6, #0
10012b52:	d000      	beq.n	10012b56 <__aeabi_dsub+0x296>
10012b54:	e081      	b.n	10012c5a <__aeabi_dsub+0x39a>
10012b56:	1c60      	adds	r0, r4, #1
10012b58:	0540      	lsls	r0, r0, #21
10012b5a:	0d40      	lsrs	r0, r0, #21
10012b5c:	2801      	cmp	r0, #1
10012b5e:	dc00      	bgt.n	10012b62 <__aeabi_dsub+0x2a2>
10012b60:	e107      	b.n	10012d72 <__aeabi_dsub+0x4b2>
10012b62:	9901      	ldr	r1, [sp, #4]
10012b64:	1a68      	subs	r0, r5, r1
10012b66:	4684      	mov	ip, r0
10012b68:	4565      	cmp	r5, ip
10012b6a:	41b6      	sbcs	r6, r6
10012b6c:	1ab8      	subs	r0, r7, r2
10012b6e:	4276      	negs	r6, r6
10012b70:	1b86      	subs	r6, r0, r6
10012b72:	0230      	lsls	r0, r6, #8
10012b74:	d400      	bmi.n	10012b78 <__aeabi_dsub+0x2b8>
10012b76:	e0a1      	b.n	10012cbc <__aeabi_dsub+0x3fc>
10012b78:	468c      	mov	ip, r1
10012b7a:	1b4d      	subs	r5, r1, r5
10012b7c:	45ac      	cmp	ip, r5
10012b7e:	4189      	sbcs	r1, r1
10012b80:	1bd2      	subs	r2, r2, r7
10012b82:	4249      	negs	r1, r1
10012b84:	1a56      	subs	r6, r2, r1
10012b86:	4698      	mov	r8, r3
10012b88:	e734      	b.n	100129f4 <__aeabi_dsub+0x134>
10012b8a:	2200      	movs	r2, #0
10012b8c:	2500      	movs	r5, #0
10012b8e:	e6ef      	b.n	10012970 <__aeabi_dsub+0xb0>
10012b90:	1c28      	adds	r0, r5, #0
10012b92:	f000 fab5 	bl	10013100 <__clzsi2>
10012b96:	3020      	adds	r0, #32
10012b98:	1c03      	adds	r3, r0, #0
10012b9a:	3b08      	subs	r3, #8
10012b9c:	2b1f      	cmp	r3, #31
10012b9e:	dc00      	bgt.n	10012ba2 <__aeabi_dsub+0x2e2>
10012ba0:	e733      	b.n	10012a0a <__aeabi_dsub+0x14a>
10012ba2:	1c02      	adds	r2, r0, #0
10012ba4:	3a28      	subs	r2, #40	; 0x28
10012ba6:	4095      	lsls	r5, r2
10012ba8:	1c2a      	adds	r2, r5, #0
10012baa:	2500      	movs	r5, #0
10012bac:	429c      	cmp	r4, r3
10012bae:	dc00      	bgt.n	10012bb2 <__aeabi_dsub+0x2f2>
10012bb0:	e736      	b.n	10012a20 <__aeabi_dsub+0x160>
10012bb2:	4f1f      	ldr	r7, [pc, #124]	; (10012c30 <__aeabi_dsub+0x370>)
10012bb4:	1ae4      	subs	r4, r4, r3
10012bb6:	4017      	ands	r7, r2
10012bb8:	e6b4      	b.n	10012924 <__aeabi_dsub+0x64>
10012bba:	9b01      	ldr	r3, [sp, #4]
10012bbc:	431a      	orrs	r2, r3
10012bbe:	1e51      	subs	r1, r2, #1
10012bc0:	418a      	sbcs	r2, r1
10012bc2:	b2d3      	uxtb	r3, r2
10012bc4:	2200      	movs	r2, #0
10012bc6:	e709      	b.n	100129dc <__aeabi_dsub+0x11c>
10012bc8:	2b00      	cmp	r3, #0
10012bca:	d000      	beq.n	10012bce <__aeabi_dsub+0x30e>
10012bcc:	e101      	b.n	10012dd2 <__aeabi_dsub+0x512>
10012bce:	1c60      	adds	r0, r4, #1
10012bd0:	0543      	lsls	r3, r0, #21
10012bd2:	0d5b      	lsrs	r3, r3, #21
10012bd4:	2b01      	cmp	r3, #1
10012bd6:	dc00      	bgt.n	10012bda <__aeabi_dsub+0x31a>
10012bd8:	e0b0      	b.n	10012d3c <__aeabi_dsub+0x47c>
10012bda:	4b14      	ldr	r3, [pc, #80]	; (10012c2c <__aeabi_dsub+0x36c>)
10012bdc:	4298      	cmp	r0, r3
10012bde:	d100      	bne.n	10012be2 <__aeabi_dsub+0x322>
10012be0:	e11e      	b.n	10012e20 <__aeabi_dsub+0x560>
10012be2:	9b01      	ldr	r3, [sp, #4]
10012be4:	19d2      	adds	r2, r2, r7
10012be6:	1959      	adds	r1, r3, r5
10012be8:	42a9      	cmp	r1, r5
10012bea:	419b      	sbcs	r3, r3
10012bec:	425b      	negs	r3, r3
10012bee:	18d2      	adds	r2, r2, r3
10012bf0:	0849      	lsrs	r1, r1, #1
10012bf2:	07d5      	lsls	r5, r2, #31
10012bf4:	430d      	orrs	r5, r1
10012bf6:	0857      	lsrs	r7, r2, #1
10012bf8:	1c04      	adds	r4, r0, #0
10012bfa:	e693      	b.n	10012924 <__aeabi_dsub+0x64>
10012bfc:	4b0b      	ldr	r3, [pc, #44]	; (10012c2c <__aeabi_dsub+0x36c>)
10012bfe:	429c      	cmp	r4, r3
10012c00:	d000      	beq.n	10012c04 <__aeabi_dsub+0x344>
10012c02:	e6d3      	b.n	100129ac <__aeabi_dsub+0xec>
10012c04:	e68e      	b.n	10012924 <__aeabi_dsub+0x64>
10012c06:	1c21      	adds	r1, r4, #0
10012c08:	1c13      	adds	r3, r2, #0
10012c0a:	391f      	subs	r1, #31
10012c0c:	40cb      	lsrs	r3, r1
10012c0e:	1c19      	adds	r1, r3, #0
10012c10:	2f20      	cmp	r7, #32
10012c12:	d100      	bne.n	10012c16 <__aeabi_dsub+0x356>
10012c14:	e08e      	b.n	10012d34 <__aeabi_dsub+0x474>
10012c16:	233f      	movs	r3, #63	; 0x3f
10012c18:	1b1c      	subs	r4, r3, r4
10012c1a:	40a2      	lsls	r2, r4
10012c1c:	4315      	orrs	r5, r2
10012c1e:	1e6a      	subs	r2, r5, #1
10012c20:	4195      	sbcs	r5, r2
10012c22:	2700      	movs	r7, #0
10012c24:	430d      	orrs	r5, r1
10012c26:	2400      	movs	r4, #0
10012c28:	e78b      	b.n	10012b42 <__aeabi_dsub+0x282>
10012c2a:	46c0      	nop			; (mov r8, r8)
10012c2c:	000007ff 	.word	0x000007ff
10012c30:	ff7fffff 	.word	0xff7fffff
10012c34:	800fffff 	.word	0x800fffff
10012c38:	1c33      	adds	r3, r6, #0
10012c3a:	1c10      	adds	r0, r2, #0
10012c3c:	3b20      	subs	r3, #32
10012c3e:	40d8      	lsrs	r0, r3
10012c40:	2e20      	cmp	r6, #32
10012c42:	d079      	beq.n	10012d38 <__aeabi_dsub+0x478>
10012c44:	2340      	movs	r3, #64	; 0x40
10012c46:	1b9b      	subs	r3, r3, r6
10012c48:	409a      	lsls	r2, r3
10012c4a:	1c13      	adds	r3, r2, #0
10012c4c:	9a01      	ldr	r2, [sp, #4]
10012c4e:	4313      	orrs	r3, r2
10012c50:	1e59      	subs	r1, r3, #1
10012c52:	418b      	sbcs	r3, r1
10012c54:	2200      	movs	r2, #0
10012c56:	4303      	orrs	r3, r0
10012c58:	e6c0      	b.n	100129dc <__aeabi_dsub+0x11c>
10012c5a:	2c00      	cmp	r4, #0
10012c5c:	d053      	beq.n	10012d06 <__aeabi_dsub+0x446>
10012c5e:	4cc7      	ldr	r4, [pc, #796]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012c60:	42a0      	cmp	r0, r4
10012c62:	d100      	bne.n	10012c66 <__aeabi_dsub+0x3a6>
10012c64:	e0b0      	b.n	10012dc8 <__aeabi_dsub+0x508>
10012c66:	2480      	movs	r4, #128	; 0x80
10012c68:	4271      	negs	r1, r6
10012c6a:	4689      	mov	r9, r1
10012c6c:	0424      	lsls	r4, r4, #16
10012c6e:	4327      	orrs	r7, r4
10012c70:	4649      	mov	r1, r9
10012c72:	2938      	cmp	r1, #56	; 0x38
10012c74:	dd00      	ble.n	10012c78 <__aeabi_dsub+0x3b8>
10012c76:	e0cd      	b.n	10012e14 <__aeabi_dsub+0x554>
10012c78:	291f      	cmp	r1, #31
10012c7a:	dd00      	ble.n	10012c7e <__aeabi_dsub+0x3be>
10012c7c:	e159      	b.n	10012f32 <__aeabi_dsub+0x672>
10012c7e:	2420      	movs	r4, #32
10012c80:	1c3e      	adds	r6, r7, #0
10012c82:	1a61      	subs	r1, r4, r1
10012c84:	408e      	lsls	r6, r1
10012c86:	468a      	mov	sl, r1
10012c88:	46b0      	mov	r8, r6
10012c8a:	4649      	mov	r1, r9
10012c8c:	1c2e      	adds	r6, r5, #0
10012c8e:	40ce      	lsrs	r6, r1
10012c90:	4651      	mov	r1, sl
10012c92:	46b4      	mov	ip, r6
10012c94:	408d      	lsls	r5, r1
10012c96:	4664      	mov	r4, ip
10012c98:	4646      	mov	r6, r8
10012c9a:	4649      	mov	r1, r9
10012c9c:	4326      	orrs	r6, r4
10012c9e:	1e6c      	subs	r4, r5, #1
10012ca0:	41a5      	sbcs	r5, r4
10012ca2:	40cf      	lsrs	r7, r1
10012ca4:	4335      	orrs	r5, r6
10012ca6:	9901      	ldr	r1, [sp, #4]
10012ca8:	1bd7      	subs	r7, r2, r7
10012caa:	468c      	mov	ip, r1
10012cac:	1b4d      	subs	r5, r1, r5
10012cae:	45ac      	cmp	ip, r5
10012cb0:	4192      	sbcs	r2, r2
10012cb2:	4252      	negs	r2, r2
10012cb4:	1abf      	subs	r7, r7, r2
10012cb6:	1c04      	adds	r4, r0, #0
10012cb8:	4698      	mov	r8, r3
10012cba:	e696      	b.n	100129ea <__aeabi_dsub+0x12a>
10012cbc:	4663      	mov	r3, ip
10012cbe:	4665      	mov	r5, ip
10012cc0:	4333      	orrs	r3, r6
10012cc2:	d000      	beq.n	10012cc6 <__aeabi_dsub+0x406>
10012cc4:	e696      	b.n	100129f4 <__aeabi_dsub+0x134>
10012cc6:	2600      	movs	r6, #0
10012cc8:	2700      	movs	r7, #0
10012cca:	2400      	movs	r4, #0
10012ccc:	2500      	movs	r5, #0
10012cce:	e6c4      	b.n	10012a5a <__aeabi_dsub+0x19a>
10012cd0:	2b1f      	cmp	r3, #31
10012cd2:	dc61      	bgt.n	10012d98 <__aeabi_dsub+0x4d8>
10012cd4:	2020      	movs	r0, #32
10012cd6:	1ac3      	subs	r3, r0, r3
10012cd8:	469b      	mov	fp, r3
10012cda:	1c13      	adds	r3, r2, #0
10012cdc:	4659      	mov	r1, fp
10012cde:	408b      	lsls	r3, r1
10012ce0:	4651      	mov	r1, sl
10012ce2:	4699      	mov	r9, r3
10012ce4:	9b01      	ldr	r3, [sp, #4]
10012ce6:	40cb      	lsrs	r3, r1
10012ce8:	469c      	mov	ip, r3
10012cea:	464b      	mov	r3, r9
10012cec:	4660      	mov	r0, ip
10012cee:	4303      	orrs	r3, r0
10012cf0:	469c      	mov	ip, r3
10012cf2:	465b      	mov	r3, fp
10012cf4:	9901      	ldr	r1, [sp, #4]
10012cf6:	4099      	lsls	r1, r3
10012cf8:	4663      	mov	r3, ip
10012cfa:	1e48      	subs	r0, r1, #1
10012cfc:	4181      	sbcs	r1, r0
10012cfe:	4319      	orrs	r1, r3
10012d00:	4653      	mov	r3, sl
10012d02:	40da      	lsrs	r2, r3
10012d04:	e6cd      	b.n	10012aa2 <__aeabi_dsub+0x1e2>
10012d06:	1c3c      	adds	r4, r7, #0
10012d08:	432c      	orrs	r4, r5
10012d0a:	d05d      	beq.n	10012dc8 <__aeabi_dsub+0x508>
10012d0c:	43f1      	mvns	r1, r6
10012d0e:	4689      	mov	r9, r1
10012d10:	2900      	cmp	r1, #0
10012d12:	d155      	bne.n	10012dc0 <__aeabi_dsub+0x500>
10012d14:	9901      	ldr	r1, [sp, #4]
10012d16:	1bd2      	subs	r2, r2, r7
10012d18:	468c      	mov	ip, r1
10012d1a:	1b4d      	subs	r5, r1, r5
10012d1c:	45ac      	cmp	ip, r5
10012d1e:	4189      	sbcs	r1, r1
10012d20:	4249      	negs	r1, r1
10012d22:	1a57      	subs	r7, r2, r1
10012d24:	1c04      	adds	r4, r0, #0
10012d26:	4698      	mov	r8, r3
10012d28:	e65f      	b.n	100129ea <__aeabi_dsub+0x12a>
10012d2a:	4894      	ldr	r0, [pc, #592]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012d2c:	4284      	cmp	r4, r0
10012d2e:	d000      	beq.n	10012d32 <__aeabi_dsub+0x472>
10012d30:	e6ad      	b.n	10012a8e <__aeabi_dsub+0x1ce>
10012d32:	e5f7      	b.n	10012924 <__aeabi_dsub+0x64>
10012d34:	2200      	movs	r2, #0
10012d36:	e771      	b.n	10012c1c <__aeabi_dsub+0x35c>
10012d38:	2300      	movs	r3, #0
10012d3a:	e787      	b.n	10012c4c <__aeabi_dsub+0x38c>
10012d3c:	1c3b      	adds	r3, r7, #0
10012d3e:	432b      	orrs	r3, r5
10012d40:	2c00      	cmp	r4, #0
10012d42:	d000      	beq.n	10012d46 <__aeabi_dsub+0x486>
10012d44:	e0da      	b.n	10012efc <__aeabi_dsub+0x63c>
10012d46:	2b00      	cmp	r3, #0
10012d48:	d100      	bne.n	10012d4c <__aeabi_dsub+0x48c>
10012d4a:	e113      	b.n	10012f74 <__aeabi_dsub+0x6b4>
10012d4c:	1c13      	adds	r3, r2, #0
10012d4e:	9901      	ldr	r1, [sp, #4]
10012d50:	430b      	orrs	r3, r1
10012d52:	d100      	bne.n	10012d56 <__aeabi_dsub+0x496>
10012d54:	e5e6      	b.n	10012924 <__aeabi_dsub+0x64>
10012d56:	1949      	adds	r1, r1, r5
10012d58:	42a9      	cmp	r1, r5
10012d5a:	419b      	sbcs	r3, r3
10012d5c:	19d2      	adds	r2, r2, r7
10012d5e:	425b      	negs	r3, r3
10012d60:	18d7      	adds	r7, r2, r3
10012d62:	023b      	lsls	r3, r7, #8
10012d64:	d400      	bmi.n	10012d68 <__aeabi_dsub+0x4a8>
10012d66:	e121      	b.n	10012fac <__aeabi_dsub+0x6ec>
10012d68:	4b85      	ldr	r3, [pc, #532]	; (10012f80 <__aeabi_dsub+0x6c0>)
10012d6a:	1c0d      	adds	r5, r1, #0
10012d6c:	401f      	ands	r7, r3
10012d6e:	1c04      	adds	r4, r0, #0
10012d70:	e5d8      	b.n	10012924 <__aeabi_dsub+0x64>
10012d72:	1c38      	adds	r0, r7, #0
10012d74:	4328      	orrs	r0, r5
10012d76:	2c00      	cmp	r4, #0
10012d78:	d140      	bne.n	10012dfc <__aeabi_dsub+0x53c>
10012d7a:	2800      	cmp	r0, #0
10012d7c:	d000      	beq.n	10012d80 <__aeabi_dsub+0x4c0>
10012d7e:	e083      	b.n	10012e88 <__aeabi_dsub+0x5c8>
10012d80:	1c10      	adds	r0, r2, #0
10012d82:	9901      	ldr	r1, [sp, #4]
10012d84:	4308      	orrs	r0, r1
10012d86:	d003      	beq.n	10012d90 <__aeabi_dsub+0x4d0>
10012d88:	1c17      	adds	r7, r2, #0
10012d8a:	1c0d      	adds	r5, r1, #0
10012d8c:	4698      	mov	r8, r3
10012d8e:	e5c9      	b.n	10012924 <__aeabi_dsub+0x64>
10012d90:	2600      	movs	r6, #0
10012d92:	2700      	movs	r7, #0
10012d94:	2500      	movs	r5, #0
10012d96:	e660      	b.n	10012a5a <__aeabi_dsub+0x19a>
10012d98:	4650      	mov	r0, sl
10012d9a:	1c13      	adds	r3, r2, #0
10012d9c:	3820      	subs	r0, #32
10012d9e:	40c3      	lsrs	r3, r0
10012da0:	1c18      	adds	r0, r3, #0
10012da2:	4653      	mov	r3, sl
10012da4:	2b20      	cmp	r3, #32
10012da6:	d100      	bne.n	10012daa <__aeabi_dsub+0x4ea>
10012da8:	e0c1      	b.n	10012f2e <__aeabi_dsub+0x66e>
10012daa:	2340      	movs	r3, #64	; 0x40
10012dac:	4651      	mov	r1, sl
10012dae:	1a5b      	subs	r3, r3, r1
10012db0:	409a      	lsls	r2, r3
10012db2:	9901      	ldr	r1, [sp, #4]
10012db4:	4311      	orrs	r1, r2
10012db6:	1e4a      	subs	r2, r1, #1
10012db8:	4191      	sbcs	r1, r2
10012dba:	2200      	movs	r2, #0
10012dbc:	4301      	orrs	r1, r0
10012dbe:	e670      	b.n	10012aa2 <__aeabi_dsub+0x1e2>
10012dc0:	4c6e      	ldr	r4, [pc, #440]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012dc2:	42a0      	cmp	r0, r4
10012dc4:	d000      	beq.n	10012dc8 <__aeabi_dsub+0x508>
10012dc6:	e753      	b.n	10012c70 <__aeabi_dsub+0x3b0>
10012dc8:	1c17      	adds	r7, r2, #0
10012dca:	9d01      	ldr	r5, [sp, #4]
10012dcc:	1c04      	adds	r4, r0, #0
10012dce:	4698      	mov	r8, r3
10012dd0:	e5a8      	b.n	10012924 <__aeabi_dsub+0x64>
10012dd2:	2c00      	cmp	r4, #0
10012dd4:	d128      	bne.n	10012e28 <__aeabi_dsub+0x568>
10012dd6:	1c3c      	adds	r4, r7, #0
10012dd8:	432c      	orrs	r4, r5
10012dda:	d100      	bne.n	10012dde <__aeabi_dsub+0x51e>
10012ddc:	e08a      	b.n	10012ef4 <__aeabi_dsub+0x634>
10012dde:	43db      	mvns	r3, r3
10012de0:	469a      	mov	sl, r3
10012de2:	2b00      	cmp	r3, #0
10012de4:	d000      	beq.n	10012de8 <__aeabi_dsub+0x528>
10012de6:	e082      	b.n	10012eee <__aeabi_dsub+0x62e>
10012de8:	9b01      	ldr	r3, [sp, #4]
10012dea:	19d2      	adds	r2, r2, r7
10012dec:	469c      	mov	ip, r3
10012dee:	4465      	add	r5, ip
10012df0:	429d      	cmp	r5, r3
10012df2:	4189      	sbcs	r1, r1
10012df4:	4249      	negs	r1, r1
10012df6:	1857      	adds	r7, r2, r1
10012df8:	1c04      	adds	r4, r0, #0
10012dfa:	e659      	b.n	10012ab0 <__aeabi_dsub+0x1f0>
10012dfc:	2800      	cmp	r0, #0
10012dfe:	d15b      	bne.n	10012eb8 <__aeabi_dsub+0x5f8>
10012e00:	1c10      	adds	r0, r2, #0
10012e02:	9901      	ldr	r1, [sp, #4]
10012e04:	4308      	orrs	r0, r1
10012e06:	d100      	bne.n	10012e0a <__aeabi_dsub+0x54a>
10012e08:	e0a4      	b.n	10012f54 <__aeabi_dsub+0x694>
10012e0a:	1c17      	adds	r7, r2, #0
10012e0c:	1c0d      	adds	r5, r1, #0
10012e0e:	4698      	mov	r8, r3
10012e10:	4c5a      	ldr	r4, [pc, #360]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012e12:	e587      	b.n	10012924 <__aeabi_dsub+0x64>
10012e14:	433d      	orrs	r5, r7
10012e16:	1e6f      	subs	r7, r5, #1
10012e18:	41bd      	sbcs	r5, r7
10012e1a:	2700      	movs	r7, #0
10012e1c:	b2ed      	uxtb	r5, r5
10012e1e:	e742      	b.n	10012ca6 <__aeabi_dsub+0x3e6>
10012e20:	1c04      	adds	r4, r0, #0
10012e22:	2700      	movs	r7, #0
10012e24:	2500      	movs	r5, #0
10012e26:	e618      	b.n	10012a5a <__aeabi_dsub+0x19a>
10012e28:	4c54      	ldr	r4, [pc, #336]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012e2a:	42a0      	cmp	r0, r4
10012e2c:	d062      	beq.n	10012ef4 <__aeabi_dsub+0x634>
10012e2e:	4653      	mov	r3, sl
10012e30:	2480      	movs	r4, #128	; 0x80
10012e32:	425b      	negs	r3, r3
10012e34:	469a      	mov	sl, r3
10012e36:	0424      	lsls	r4, r4, #16
10012e38:	4327      	orrs	r7, r4
10012e3a:	4653      	mov	r3, sl
10012e3c:	2b38      	cmp	r3, #56	; 0x38
10012e3e:	dd00      	ble.n	10012e42 <__aeabi_dsub+0x582>
10012e40:	e08e      	b.n	10012f60 <__aeabi_dsub+0x6a0>
10012e42:	2b1f      	cmp	r3, #31
10012e44:	dd00      	ble.n	10012e48 <__aeabi_dsub+0x588>
10012e46:	e09d      	b.n	10012f84 <__aeabi_dsub+0x6c4>
10012e48:	2420      	movs	r4, #32
10012e4a:	1ae3      	subs	r3, r4, r3
10012e4c:	469b      	mov	fp, r3
10012e4e:	1c3b      	adds	r3, r7, #0
10012e50:	4659      	mov	r1, fp
10012e52:	408b      	lsls	r3, r1
10012e54:	4651      	mov	r1, sl
10012e56:	4699      	mov	r9, r3
10012e58:	1c2b      	adds	r3, r5, #0
10012e5a:	40cb      	lsrs	r3, r1
10012e5c:	469c      	mov	ip, r3
10012e5e:	464b      	mov	r3, r9
10012e60:	4664      	mov	r4, ip
10012e62:	4323      	orrs	r3, r4
10012e64:	469c      	mov	ip, r3
10012e66:	465b      	mov	r3, fp
10012e68:	409d      	lsls	r5, r3
10012e6a:	4663      	mov	r3, ip
10012e6c:	1e6c      	subs	r4, r5, #1
10012e6e:	41a5      	sbcs	r5, r4
10012e70:	40cf      	lsrs	r7, r1
10012e72:	431d      	orrs	r5, r3
10012e74:	9b01      	ldr	r3, [sp, #4]
10012e76:	18bf      	adds	r7, r7, r2
10012e78:	469c      	mov	ip, r3
10012e7a:	4465      	add	r5, ip
10012e7c:	429d      	cmp	r5, r3
10012e7e:	4192      	sbcs	r2, r2
10012e80:	4252      	negs	r2, r2
10012e82:	18bf      	adds	r7, r7, r2
10012e84:	1c04      	adds	r4, r0, #0
10012e86:	e613      	b.n	10012ab0 <__aeabi_dsub+0x1f0>
10012e88:	1c10      	adds	r0, r2, #0
10012e8a:	9901      	ldr	r1, [sp, #4]
10012e8c:	4308      	orrs	r0, r1
10012e8e:	d100      	bne.n	10012e92 <__aeabi_dsub+0x5d2>
10012e90:	e548      	b.n	10012924 <__aeabi_dsub+0x64>
10012e92:	1a68      	subs	r0, r5, r1
10012e94:	4684      	mov	ip, r0
10012e96:	4285      	cmp	r5, r0
10012e98:	4180      	sbcs	r0, r0
10012e9a:	1abe      	subs	r6, r7, r2
10012e9c:	4240      	negs	r0, r0
10012e9e:	1a30      	subs	r0, r6, r0
10012ea0:	0206      	lsls	r6, r0, #8
10012ea2:	d400      	bmi.n	10012ea6 <__aeabi_dsub+0x5e6>
10012ea4:	e647      	b.n	10012b36 <__aeabi_dsub+0x276>
10012ea6:	468c      	mov	ip, r1
10012ea8:	1b4d      	subs	r5, r1, r5
10012eaa:	45ac      	cmp	ip, r5
10012eac:	4189      	sbcs	r1, r1
10012eae:	1bd2      	subs	r2, r2, r7
10012eb0:	4249      	negs	r1, r1
10012eb2:	1a57      	subs	r7, r2, r1
10012eb4:	4698      	mov	r8, r3
10012eb6:	e535      	b.n	10012924 <__aeabi_dsub+0x64>
10012eb8:	1c10      	adds	r0, r2, #0
10012eba:	9901      	ldr	r1, [sp, #4]
10012ebc:	4308      	orrs	r0, r1
10012ebe:	d034      	beq.n	10012f2a <__aeabi_dsub+0x66a>
10012ec0:	2480      	movs	r4, #128	; 0x80
10012ec2:	0778      	lsls	r0, r7, #29
10012ec4:	08ed      	lsrs	r5, r5, #3
10012ec6:	08ff      	lsrs	r7, r7, #3
10012ec8:	0324      	lsls	r4, r4, #12
10012eca:	4328      	orrs	r0, r5
10012ecc:	4227      	tst	r7, r4
10012ece:	d008      	beq.n	10012ee2 <__aeabi_dsub+0x622>
10012ed0:	08d6      	lsrs	r6, r2, #3
10012ed2:	4226      	tst	r6, r4
10012ed4:	d105      	bne.n	10012ee2 <__aeabi_dsub+0x622>
10012ed6:	08c9      	lsrs	r1, r1, #3
10012ed8:	0752      	lsls	r2, r2, #29
10012eda:	430a      	orrs	r2, r1
10012edc:	1c10      	adds	r0, r2, #0
10012ede:	1c37      	adds	r7, r6, #0
10012ee0:	4698      	mov	r8, r3
10012ee2:	00ff      	lsls	r7, r7, #3
10012ee4:	0f42      	lsrs	r2, r0, #29
10012ee6:	4317      	orrs	r7, r2
10012ee8:	00c5      	lsls	r5, r0, #3
10012eea:	4c24      	ldr	r4, [pc, #144]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012eec:	e51a      	b.n	10012924 <__aeabi_dsub+0x64>
10012eee:	4c23      	ldr	r4, [pc, #140]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012ef0:	42a0      	cmp	r0, r4
10012ef2:	d1a2      	bne.n	10012e3a <__aeabi_dsub+0x57a>
10012ef4:	1c17      	adds	r7, r2, #0
10012ef6:	9d01      	ldr	r5, [sp, #4]
10012ef8:	1c04      	adds	r4, r0, #0
10012efa:	e513      	b.n	10012924 <__aeabi_dsub+0x64>
10012efc:	2b00      	cmp	r3, #0
10012efe:	d035      	beq.n	10012f6c <__aeabi_dsub+0x6ac>
10012f00:	1c13      	adds	r3, r2, #0
10012f02:	9901      	ldr	r1, [sp, #4]
10012f04:	430b      	orrs	r3, r1
10012f06:	d010      	beq.n	10012f2a <__aeabi_dsub+0x66a>
10012f08:	2480      	movs	r4, #128	; 0x80
10012f0a:	0778      	lsls	r0, r7, #29
10012f0c:	08ed      	lsrs	r5, r5, #3
10012f0e:	08ff      	lsrs	r7, r7, #3
10012f10:	0324      	lsls	r4, r4, #12
10012f12:	4328      	orrs	r0, r5
10012f14:	4227      	tst	r7, r4
10012f16:	d0e4      	beq.n	10012ee2 <__aeabi_dsub+0x622>
10012f18:	08d3      	lsrs	r3, r2, #3
10012f1a:	4223      	tst	r3, r4
10012f1c:	d1e1      	bne.n	10012ee2 <__aeabi_dsub+0x622>
10012f1e:	08c9      	lsrs	r1, r1, #3
10012f20:	0752      	lsls	r2, r2, #29
10012f22:	430a      	orrs	r2, r1
10012f24:	1c10      	adds	r0, r2, #0
10012f26:	1c1f      	adds	r7, r3, #0
10012f28:	e7db      	b.n	10012ee2 <__aeabi_dsub+0x622>
10012f2a:	4c14      	ldr	r4, [pc, #80]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012f2c:	e4fa      	b.n	10012924 <__aeabi_dsub+0x64>
10012f2e:	2200      	movs	r2, #0
10012f30:	e73f      	b.n	10012db2 <__aeabi_dsub+0x4f2>
10012f32:	464c      	mov	r4, r9
10012f34:	1c3e      	adds	r6, r7, #0
10012f36:	3c20      	subs	r4, #32
10012f38:	40e6      	lsrs	r6, r4
10012f3a:	4649      	mov	r1, r9
10012f3c:	1c34      	adds	r4, r6, #0
10012f3e:	2920      	cmp	r1, #32
10012f40:	d032      	beq.n	10012fa8 <__aeabi_dsub+0x6e8>
10012f42:	2640      	movs	r6, #64	; 0x40
10012f44:	1a76      	subs	r6, r6, r1
10012f46:	40b7      	lsls	r7, r6
10012f48:	433d      	orrs	r5, r7
10012f4a:	1e6f      	subs	r7, r5, #1
10012f4c:	41bd      	sbcs	r5, r7
10012f4e:	2700      	movs	r7, #0
10012f50:	4325      	orrs	r5, r4
10012f52:	e6a8      	b.n	10012ca6 <__aeabi_dsub+0x3e6>
10012f54:	2780      	movs	r7, #128	; 0x80
10012f56:	2600      	movs	r6, #0
10012f58:	03ff      	lsls	r7, r7, #15
10012f5a:	4c08      	ldr	r4, [pc, #32]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012f5c:	2500      	movs	r5, #0
10012f5e:	e57c      	b.n	10012a5a <__aeabi_dsub+0x19a>
10012f60:	433d      	orrs	r5, r7
10012f62:	1e6f      	subs	r7, r5, #1
10012f64:	41bd      	sbcs	r5, r7
10012f66:	2700      	movs	r7, #0
10012f68:	b2ed      	uxtb	r5, r5
10012f6a:	e783      	b.n	10012e74 <__aeabi_dsub+0x5b4>
10012f6c:	1c17      	adds	r7, r2, #0
10012f6e:	9d01      	ldr	r5, [sp, #4]
10012f70:	4c02      	ldr	r4, [pc, #8]	; (10012f7c <__aeabi_dsub+0x6bc>)
10012f72:	e4d7      	b.n	10012924 <__aeabi_dsub+0x64>
10012f74:	1c17      	adds	r7, r2, #0
10012f76:	9d01      	ldr	r5, [sp, #4]
10012f78:	e4d4      	b.n	10012924 <__aeabi_dsub+0x64>
10012f7a:	46c0      	nop			; (mov r8, r8)
10012f7c:	000007ff 	.word	0x000007ff
10012f80:	ff7fffff 	.word	0xff7fffff
10012f84:	4654      	mov	r4, sl
10012f86:	1c3b      	adds	r3, r7, #0
10012f88:	3c20      	subs	r4, #32
10012f8a:	40e3      	lsrs	r3, r4
10012f8c:	1c1c      	adds	r4, r3, #0
10012f8e:	4653      	mov	r3, sl
10012f90:	2b20      	cmp	r3, #32
10012f92:	d00d      	beq.n	10012fb0 <__aeabi_dsub+0x6f0>
10012f94:	2340      	movs	r3, #64	; 0x40
10012f96:	4651      	mov	r1, sl
10012f98:	1a5b      	subs	r3, r3, r1
10012f9a:	409f      	lsls	r7, r3
10012f9c:	433d      	orrs	r5, r7
10012f9e:	1e6f      	subs	r7, r5, #1
10012fa0:	41bd      	sbcs	r5, r7
10012fa2:	2700      	movs	r7, #0
10012fa4:	4325      	orrs	r5, r4
10012fa6:	e765      	b.n	10012e74 <__aeabi_dsub+0x5b4>
10012fa8:	2700      	movs	r7, #0
10012faa:	e7cd      	b.n	10012f48 <__aeabi_dsub+0x688>
10012fac:	1c0d      	adds	r5, r1, #0
10012fae:	e5c8      	b.n	10012b42 <__aeabi_dsub+0x282>
10012fb0:	2700      	movs	r7, #0
10012fb2:	e7f3      	b.n	10012f9c <__aeabi_dsub+0x6dc>

10012fb4 <__aeabi_d2iz>:
10012fb4:	030b      	lsls	r3, r1, #12
10012fb6:	b530      	push	{r4, r5, lr}
10012fb8:	4c13      	ldr	r4, [pc, #76]	; (10013008 <__aeabi_d2iz+0x54>)
10012fba:	0b1a      	lsrs	r2, r3, #12
10012fbc:	004b      	lsls	r3, r1, #1
10012fbe:	1c05      	adds	r5, r0, #0
10012fc0:	0d5b      	lsrs	r3, r3, #21
10012fc2:	0fc9      	lsrs	r1, r1, #31
10012fc4:	2000      	movs	r0, #0
10012fc6:	42a3      	cmp	r3, r4
10012fc8:	dd10      	ble.n	10012fec <__aeabi_d2iz+0x38>
10012fca:	4810      	ldr	r0, [pc, #64]	; (1001300c <__aeabi_d2iz+0x58>)
10012fcc:	4283      	cmp	r3, r0
10012fce:	dc0e      	bgt.n	10012fee <__aeabi_d2iz+0x3a>
10012fd0:	2080      	movs	r0, #128	; 0x80
10012fd2:	4c0f      	ldr	r4, [pc, #60]	; (10013010 <__aeabi_d2iz+0x5c>)
10012fd4:	0340      	lsls	r0, r0, #13
10012fd6:	4302      	orrs	r2, r0
10012fd8:	1ae4      	subs	r4, r4, r3
10012fda:	2c1f      	cmp	r4, #31
10012fdc:	dd0a      	ble.n	10012ff4 <__aeabi_d2iz+0x40>
10012fde:	480d      	ldr	r0, [pc, #52]	; (10013014 <__aeabi_d2iz+0x60>)
10012fe0:	1ac3      	subs	r3, r0, r3
10012fe2:	40da      	lsrs	r2, r3
10012fe4:	1c13      	adds	r3, r2, #0
10012fe6:	4248      	negs	r0, r1
10012fe8:	4043      	eors	r3, r0
10012fea:	1858      	adds	r0, r3, r1
10012fec:	bd30      	pop	{r4, r5, pc}
10012fee:	4b0a      	ldr	r3, [pc, #40]	; (10013018 <__aeabi_d2iz+0x64>)
10012ff0:	18c8      	adds	r0, r1, r3
10012ff2:	e7fb      	b.n	10012fec <__aeabi_d2iz+0x38>
10012ff4:	1c28      	adds	r0, r5, #0
10012ff6:	40e0      	lsrs	r0, r4
10012ff8:	4c08      	ldr	r4, [pc, #32]	; (1001301c <__aeabi_d2iz+0x68>)
10012ffa:	46a4      	mov	ip, r4
10012ffc:	4463      	add	r3, ip
10012ffe:	409a      	lsls	r2, r3
10013000:	1c13      	adds	r3, r2, #0
10013002:	4303      	orrs	r3, r0
10013004:	e7ef      	b.n	10012fe6 <__aeabi_d2iz+0x32>
10013006:	46c0      	nop			; (mov r8, r8)
10013008:	000003fe 	.word	0x000003fe
1001300c:	0000041d 	.word	0x0000041d
10013010:	00000433 	.word	0x00000433
10013014:	00000413 	.word	0x00000413
10013018:	7fffffff 	.word	0x7fffffff
1001301c:	fffffbed 	.word	0xfffffbed

10013020 <__aeabi_ui2d>:
10013020:	b510      	push	{r4, lr}
10013022:	1e04      	subs	r4, r0, #0
10013024:	d010      	beq.n	10013048 <__aeabi_ui2d+0x28>
10013026:	f000 f86b 	bl	10013100 <__clzsi2>
1001302a:	4a14      	ldr	r2, [pc, #80]	; (1001307c <__aeabi_ui2d+0x5c>)
1001302c:	1a12      	subs	r2, r2, r0
1001302e:	280a      	cmp	r0, #10
10013030:	dc1a      	bgt.n	10013068 <__aeabi_ui2d+0x48>
10013032:	230b      	movs	r3, #11
10013034:	1c21      	adds	r1, r4, #0
10013036:	1a1b      	subs	r3, r3, r0
10013038:	40d9      	lsrs	r1, r3
1001303a:	3015      	adds	r0, #21
1001303c:	030b      	lsls	r3, r1, #12
1001303e:	0552      	lsls	r2, r2, #21
10013040:	4084      	lsls	r4, r0
10013042:	0b1b      	lsrs	r3, r3, #12
10013044:	0d52      	lsrs	r2, r2, #21
10013046:	e001      	b.n	1001304c <__aeabi_ui2d+0x2c>
10013048:	2200      	movs	r2, #0
1001304a:	2300      	movs	r3, #0
1001304c:	2100      	movs	r1, #0
1001304e:	031b      	lsls	r3, r3, #12
10013050:	1c20      	adds	r0, r4, #0
10013052:	0b1c      	lsrs	r4, r3, #12
10013054:	0d0b      	lsrs	r3, r1, #20
10013056:	051b      	lsls	r3, r3, #20
10013058:	4323      	orrs	r3, r4
1001305a:	4c09      	ldr	r4, [pc, #36]	; (10013080 <__aeabi_ui2d+0x60>)
1001305c:	0512      	lsls	r2, r2, #20
1001305e:	4023      	ands	r3, r4
10013060:	4313      	orrs	r3, r2
10013062:	005b      	lsls	r3, r3, #1
10013064:	0859      	lsrs	r1, r3, #1
10013066:	bd10      	pop	{r4, pc}
10013068:	1c03      	adds	r3, r0, #0
1001306a:	3b0b      	subs	r3, #11
1001306c:	409c      	lsls	r4, r3
1001306e:	0552      	lsls	r2, r2, #21
10013070:	0323      	lsls	r3, r4, #12
10013072:	0b1b      	lsrs	r3, r3, #12
10013074:	0d52      	lsrs	r2, r2, #21
10013076:	2400      	movs	r4, #0
10013078:	e7e8      	b.n	1001304c <__aeabi_ui2d+0x2c>
1001307a:	46c0      	nop			; (mov r8, r8)
1001307c:	0000041e 	.word	0x0000041e
10013080:	800fffff 	.word	0x800fffff

10013084 <__aeabi_cdrcmple>:
10013084:	4684      	mov	ip, r0
10013086:	1c10      	adds	r0, r2, #0
10013088:	4662      	mov	r2, ip
1001308a:	468c      	mov	ip, r1
1001308c:	1c19      	adds	r1, r3, #0
1001308e:	4663      	mov	r3, ip
10013090:	e000      	b.n	10013094 <__aeabi_cdcmpeq>
10013092:	46c0      	nop			; (mov r8, r8)

10013094 <__aeabi_cdcmpeq>:
10013094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013096:	f000 f905 	bl	100132a4 <__ledf2>
1001309a:	2800      	cmp	r0, #0
1001309c:	d401      	bmi.n	100130a2 <__aeabi_cdcmpeq+0xe>
1001309e:	2100      	movs	r1, #0
100130a0:	42c8      	cmn	r0, r1
100130a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100130a4 <__aeabi_dcmpeq>:
100130a4:	b510      	push	{r4, lr}
100130a6:	f000 f849 	bl	1001313c <__eqdf2>
100130aa:	4240      	negs	r0, r0
100130ac:	3001      	adds	r0, #1
100130ae:	bd10      	pop	{r4, pc}

100130b0 <__aeabi_dcmplt>:
100130b0:	b510      	push	{r4, lr}
100130b2:	f000 f8f7 	bl	100132a4 <__ledf2>
100130b6:	2800      	cmp	r0, #0
100130b8:	db01      	blt.n	100130be <__aeabi_dcmplt+0xe>
100130ba:	2000      	movs	r0, #0
100130bc:	bd10      	pop	{r4, pc}
100130be:	2001      	movs	r0, #1
100130c0:	bd10      	pop	{r4, pc}
100130c2:	46c0      	nop			; (mov r8, r8)

100130c4 <__aeabi_dcmple>:
100130c4:	b510      	push	{r4, lr}
100130c6:	f000 f8ed 	bl	100132a4 <__ledf2>
100130ca:	2800      	cmp	r0, #0
100130cc:	dd01      	ble.n	100130d2 <__aeabi_dcmple+0xe>
100130ce:	2000      	movs	r0, #0
100130d0:	bd10      	pop	{r4, pc}
100130d2:	2001      	movs	r0, #1
100130d4:	bd10      	pop	{r4, pc}
100130d6:	46c0      	nop			; (mov r8, r8)

100130d8 <__aeabi_dcmpgt>:
100130d8:	b510      	push	{r4, lr}
100130da:	f000 f873 	bl	100131c4 <__gedf2>
100130de:	2800      	cmp	r0, #0
100130e0:	dc01      	bgt.n	100130e6 <__aeabi_dcmpgt+0xe>
100130e2:	2000      	movs	r0, #0
100130e4:	bd10      	pop	{r4, pc}
100130e6:	2001      	movs	r0, #1
100130e8:	bd10      	pop	{r4, pc}
100130ea:	46c0      	nop			; (mov r8, r8)

100130ec <__aeabi_dcmpge>:
100130ec:	b510      	push	{r4, lr}
100130ee:	f000 f869 	bl	100131c4 <__gedf2>
100130f2:	2800      	cmp	r0, #0
100130f4:	da01      	bge.n	100130fa <__aeabi_dcmpge+0xe>
100130f6:	2000      	movs	r0, #0
100130f8:	bd10      	pop	{r4, pc}
100130fa:	2001      	movs	r0, #1
100130fc:	bd10      	pop	{r4, pc}
100130fe:	46c0      	nop			; (mov r8, r8)

10013100 <__clzsi2>:
10013100:	211c      	movs	r1, #28
10013102:	2301      	movs	r3, #1
10013104:	041b      	lsls	r3, r3, #16
10013106:	4298      	cmp	r0, r3
10013108:	d301      	bcc.n	1001310e <__clzsi2+0xe>
1001310a:	0c00      	lsrs	r0, r0, #16
1001310c:	3910      	subs	r1, #16
1001310e:	0a1b      	lsrs	r3, r3, #8
10013110:	4298      	cmp	r0, r3
10013112:	d301      	bcc.n	10013118 <__clzsi2+0x18>
10013114:	0a00      	lsrs	r0, r0, #8
10013116:	3908      	subs	r1, #8
10013118:	091b      	lsrs	r3, r3, #4
1001311a:	4298      	cmp	r0, r3
1001311c:	d301      	bcc.n	10013122 <__clzsi2+0x22>
1001311e:	0900      	lsrs	r0, r0, #4
10013120:	3904      	subs	r1, #4
10013122:	a202      	add	r2, pc, #8	; (adr r2, 1001312c <__clzsi2+0x2c>)
10013124:	5c10      	ldrb	r0, [r2, r0]
10013126:	1840      	adds	r0, r0, r1
10013128:	4770      	bx	lr
1001312a:	46c0      	nop			; (mov r8, r8)
1001312c:	02020304 	.word	0x02020304
10013130:	01010101 	.word	0x01010101
	...

1001313c <__eqdf2>:
1001313c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001313e:	465f      	mov	r7, fp
10013140:	464d      	mov	r5, r9
10013142:	4644      	mov	r4, r8
10013144:	4656      	mov	r6, sl
10013146:	b4f0      	push	{r4, r5, r6, r7}
10013148:	031f      	lsls	r7, r3, #12
1001314a:	005c      	lsls	r4, r3, #1
1001314c:	0fdb      	lsrs	r3, r3, #31
1001314e:	4699      	mov	r9, r3
10013150:	4b1b      	ldr	r3, [pc, #108]	; (100131c0 <__eqdf2+0x84>)
10013152:	030e      	lsls	r6, r1, #12
10013154:	004d      	lsls	r5, r1, #1
10013156:	0fc9      	lsrs	r1, r1, #31
10013158:	4684      	mov	ip, r0
1001315a:	0b36      	lsrs	r6, r6, #12
1001315c:	0d6d      	lsrs	r5, r5, #21
1001315e:	468b      	mov	fp, r1
10013160:	4690      	mov	r8, r2
10013162:	0b3f      	lsrs	r7, r7, #12
10013164:	0d64      	lsrs	r4, r4, #21
10013166:	429d      	cmp	r5, r3
10013168:	d00c      	beq.n	10013184 <__eqdf2+0x48>
1001316a:	4b15      	ldr	r3, [pc, #84]	; (100131c0 <__eqdf2+0x84>)
1001316c:	429c      	cmp	r4, r3
1001316e:	d010      	beq.n	10013192 <__eqdf2+0x56>
10013170:	2301      	movs	r3, #1
10013172:	42a5      	cmp	r5, r4
10013174:	d014      	beq.n	100131a0 <__eqdf2+0x64>
10013176:	1c18      	adds	r0, r3, #0
10013178:	bc3c      	pop	{r2, r3, r4, r5}
1001317a:	4690      	mov	r8, r2
1001317c:	4699      	mov	r9, r3
1001317e:	46a2      	mov	sl, r4
10013180:	46ab      	mov	fp, r5
10013182:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013184:	1c31      	adds	r1, r6, #0
10013186:	2301      	movs	r3, #1
10013188:	4301      	orrs	r1, r0
1001318a:	d1f4      	bne.n	10013176 <__eqdf2+0x3a>
1001318c:	4b0c      	ldr	r3, [pc, #48]	; (100131c0 <__eqdf2+0x84>)
1001318e:	429c      	cmp	r4, r3
10013190:	d1ee      	bne.n	10013170 <__eqdf2+0x34>
10013192:	433a      	orrs	r2, r7
10013194:	2301      	movs	r3, #1
10013196:	2a00      	cmp	r2, #0
10013198:	d1ed      	bne.n	10013176 <__eqdf2+0x3a>
1001319a:	2301      	movs	r3, #1
1001319c:	42a5      	cmp	r5, r4
1001319e:	d1ea      	bne.n	10013176 <__eqdf2+0x3a>
100131a0:	42be      	cmp	r6, r7
100131a2:	d1e8      	bne.n	10013176 <__eqdf2+0x3a>
100131a4:	45c4      	cmp	ip, r8
100131a6:	d1e6      	bne.n	10013176 <__eqdf2+0x3a>
100131a8:	45cb      	cmp	fp, r9
100131aa:	d006      	beq.n	100131ba <__eqdf2+0x7e>
100131ac:	2d00      	cmp	r5, #0
100131ae:	d1e2      	bne.n	10013176 <__eqdf2+0x3a>
100131b0:	4330      	orrs	r0, r6
100131b2:	1c03      	adds	r3, r0, #0
100131b4:	1e58      	subs	r0, r3, #1
100131b6:	4183      	sbcs	r3, r0
100131b8:	e7dd      	b.n	10013176 <__eqdf2+0x3a>
100131ba:	2300      	movs	r3, #0
100131bc:	e7db      	b.n	10013176 <__eqdf2+0x3a>
100131be:	46c0      	nop			; (mov r8, r8)
100131c0:	000007ff 	.word	0x000007ff

100131c4 <__gedf2>:
100131c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100131c6:	4657      	mov	r7, sl
100131c8:	4645      	mov	r5, r8
100131ca:	464e      	mov	r6, r9
100131cc:	b4e0      	push	{r5, r6, r7}
100131ce:	030f      	lsls	r7, r1, #12
100131d0:	004e      	lsls	r6, r1, #1
100131d2:	0fc9      	lsrs	r1, r1, #31
100131d4:	468a      	mov	sl, r1
100131d6:	4932      	ldr	r1, [pc, #200]	; (100132a0 <__gedf2+0xdc>)
100131d8:	031d      	lsls	r5, r3, #12
100131da:	005c      	lsls	r4, r3, #1
100131dc:	4684      	mov	ip, r0
100131de:	0b3f      	lsrs	r7, r7, #12
100131e0:	0d76      	lsrs	r6, r6, #21
100131e2:	4690      	mov	r8, r2
100131e4:	0b2d      	lsrs	r5, r5, #12
100131e6:	0d64      	lsrs	r4, r4, #21
100131e8:	0fdb      	lsrs	r3, r3, #31
100131ea:	428e      	cmp	r6, r1
100131ec:	d00f      	beq.n	1001320e <__gedf2+0x4a>
100131ee:	428c      	cmp	r4, r1
100131f0:	d039      	beq.n	10013266 <__gedf2+0xa2>
100131f2:	2e00      	cmp	r6, #0
100131f4:	d110      	bne.n	10013218 <__gedf2+0x54>
100131f6:	4338      	orrs	r0, r7
100131f8:	4241      	negs	r1, r0
100131fa:	4141      	adcs	r1, r0
100131fc:	4689      	mov	r9, r1
100131fe:	2c00      	cmp	r4, #0
10013200:	d127      	bne.n	10013252 <__gedf2+0x8e>
10013202:	432a      	orrs	r2, r5
10013204:	d125      	bne.n	10013252 <__gedf2+0x8e>
10013206:	2000      	movs	r0, #0
10013208:	2900      	cmp	r1, #0
1001320a:	d10e      	bne.n	1001322a <__gedf2+0x66>
1001320c:	e008      	b.n	10013220 <__gedf2+0x5c>
1001320e:	1c39      	adds	r1, r7, #0
10013210:	4301      	orrs	r1, r0
10013212:	d12e      	bne.n	10013272 <__gedf2+0xae>
10013214:	42b4      	cmp	r4, r6
10013216:	d026      	beq.n	10013266 <__gedf2+0xa2>
10013218:	2c00      	cmp	r4, #0
1001321a:	d00b      	beq.n	10013234 <__gedf2+0x70>
1001321c:	459a      	cmp	sl, r3
1001321e:	d00d      	beq.n	1001323c <__gedf2+0x78>
10013220:	4653      	mov	r3, sl
10013222:	4259      	negs	r1, r3
10013224:	2301      	movs	r3, #1
10013226:	4319      	orrs	r1, r3
10013228:	1c08      	adds	r0, r1, #0
1001322a:	bc1c      	pop	{r2, r3, r4}
1001322c:	4690      	mov	r8, r2
1001322e:	4699      	mov	r9, r3
10013230:	46a2      	mov	sl, r4
10013232:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013234:	432a      	orrs	r2, r5
10013236:	d0f3      	beq.n	10013220 <__gedf2+0x5c>
10013238:	459a      	cmp	sl, r3
1001323a:	d1f1      	bne.n	10013220 <__gedf2+0x5c>
1001323c:	42a6      	cmp	r6, r4
1001323e:	dcef      	bgt.n	10013220 <__gedf2+0x5c>
10013240:	da1a      	bge.n	10013278 <__gedf2+0xb4>
10013242:	4650      	mov	r0, sl
10013244:	4241      	negs	r1, r0
10013246:	4148      	adcs	r0, r1
10013248:	2301      	movs	r3, #1
1001324a:	4241      	negs	r1, r0
1001324c:	4319      	orrs	r1, r3
1001324e:	1c08      	adds	r0, r1, #0
10013250:	e7eb      	b.n	1001322a <__gedf2+0x66>
10013252:	464a      	mov	r2, r9
10013254:	2a00      	cmp	r2, #0
10013256:	d0e1      	beq.n	1001321c <__gedf2+0x58>
10013258:	4258      	negs	r0, r3
1001325a:	4158      	adcs	r0, r3
1001325c:	2201      	movs	r2, #1
1001325e:	4241      	negs	r1, r0
10013260:	4311      	orrs	r1, r2
10013262:	1c08      	adds	r0, r1, #0
10013264:	e7e1      	b.n	1001322a <__gedf2+0x66>
10013266:	1c29      	adds	r1, r5, #0
10013268:	4311      	orrs	r1, r2
1001326a:	d102      	bne.n	10013272 <__gedf2+0xae>
1001326c:	2e00      	cmp	r6, #0
1001326e:	d0c2      	beq.n	100131f6 <__gedf2+0x32>
10013270:	e7d4      	b.n	1001321c <__gedf2+0x58>
10013272:	2002      	movs	r0, #2
10013274:	4240      	negs	r0, r0
10013276:	e7d8      	b.n	1001322a <__gedf2+0x66>
10013278:	42af      	cmp	r7, r5
1001327a:	d8d1      	bhi.n	10013220 <__gedf2+0x5c>
1001327c:	d009      	beq.n	10013292 <__gedf2+0xce>
1001327e:	2000      	movs	r0, #0
10013280:	42af      	cmp	r7, r5
10013282:	d2d2      	bcs.n	1001322a <__gedf2+0x66>
10013284:	4650      	mov	r0, sl
10013286:	4241      	negs	r1, r0
10013288:	4148      	adcs	r0, r1
1001328a:	2301      	movs	r3, #1
1001328c:	4240      	negs	r0, r0
1001328e:	4318      	orrs	r0, r3
10013290:	e7cb      	b.n	1001322a <__gedf2+0x66>
10013292:	45c4      	cmp	ip, r8
10013294:	d8c4      	bhi.n	10013220 <__gedf2+0x5c>
10013296:	2000      	movs	r0, #0
10013298:	45c4      	cmp	ip, r8
1001329a:	d3f3      	bcc.n	10013284 <__gedf2+0xc0>
1001329c:	e7c5      	b.n	1001322a <__gedf2+0x66>
1001329e:	46c0      	nop			; (mov r8, r8)
100132a0:	000007ff 	.word	0x000007ff

100132a4 <__ledf2>:
100132a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100132a6:	465f      	mov	r7, fp
100132a8:	464d      	mov	r5, r9
100132aa:	4644      	mov	r4, r8
100132ac:	4656      	mov	r6, sl
100132ae:	4680      	mov	r8, r0
100132b0:	b4f0      	push	{r4, r5, r6, r7}
100132b2:	1c06      	adds	r6, r0, #0
100132b4:	0308      	lsls	r0, r1, #12
100132b6:	0b00      	lsrs	r0, r0, #12
100132b8:	4684      	mov	ip, r0
100132ba:	482c      	ldr	r0, [pc, #176]	; (1001336c <__ledf2+0xc8>)
100132bc:	004c      	lsls	r4, r1, #1
100132be:	031f      	lsls	r7, r3, #12
100132c0:	005d      	lsls	r5, r3, #1
100132c2:	0fc9      	lsrs	r1, r1, #31
100132c4:	0d64      	lsrs	r4, r4, #21
100132c6:	468b      	mov	fp, r1
100132c8:	4691      	mov	r9, r2
100132ca:	0b3f      	lsrs	r7, r7, #12
100132cc:	0d6d      	lsrs	r5, r5, #21
100132ce:	0fdb      	lsrs	r3, r3, #31
100132d0:	4284      	cmp	r4, r0
100132d2:	d012      	beq.n	100132fa <__ledf2+0x56>
100132d4:	4285      	cmp	r5, r0
100132d6:	d025      	beq.n	10013324 <__ledf2+0x80>
100132d8:	2c00      	cmp	r4, #0
100132da:	d114      	bne.n	10013306 <__ledf2+0x62>
100132dc:	4661      	mov	r1, ip
100132de:	430e      	orrs	r6, r1
100132e0:	4270      	negs	r0, r6
100132e2:	4146      	adcs	r6, r0
100132e4:	2d00      	cmp	r5, #0
100132e6:	d035      	beq.n	10013354 <__ledf2+0xb0>
100132e8:	2e00      	cmp	r6, #0
100132ea:	d021      	beq.n	10013330 <__ledf2+0x8c>
100132ec:	4258      	negs	r0, r3
100132ee:	4158      	adcs	r0, r3
100132f0:	2101      	movs	r1, #1
100132f2:	4243      	negs	r3, r0
100132f4:	430b      	orrs	r3, r1
100132f6:	1c18      	adds	r0, r3, #0
100132f8:	e00e      	b.n	10013318 <__ledf2+0x74>
100132fa:	4661      	mov	r1, ip
100132fc:	2002      	movs	r0, #2
100132fe:	4331      	orrs	r1, r6
10013300:	d10a      	bne.n	10013318 <__ledf2+0x74>
10013302:	42a5      	cmp	r5, r4
10013304:	d00e      	beq.n	10013324 <__ledf2+0x80>
10013306:	2d00      	cmp	r5, #0
10013308:	d112      	bne.n	10013330 <__ledf2+0x8c>
1001330a:	433a      	orrs	r2, r7
1001330c:	d110      	bne.n	10013330 <__ledf2+0x8c>
1001330e:	465b      	mov	r3, fp
10013310:	4259      	negs	r1, r3
10013312:	2301      	movs	r3, #1
10013314:	4319      	orrs	r1, r3
10013316:	1c08      	adds	r0, r1, #0
10013318:	bc3c      	pop	{r2, r3, r4, r5}
1001331a:	4690      	mov	r8, r2
1001331c:	4699      	mov	r9, r3
1001331e:	46a2      	mov	sl, r4
10013320:	46ab      	mov	fp, r5
10013322:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013324:	1c39      	adds	r1, r7, #0
10013326:	2002      	movs	r0, #2
10013328:	4311      	orrs	r1, r2
1001332a:	d1f5      	bne.n	10013318 <__ledf2+0x74>
1001332c:	2c00      	cmp	r4, #0
1001332e:	d0d5      	beq.n	100132dc <__ledf2+0x38>
10013330:	459b      	cmp	fp, r3
10013332:	d1ec      	bne.n	1001330e <__ledf2+0x6a>
10013334:	42ac      	cmp	r4, r5
10013336:	dcea      	bgt.n	1001330e <__ledf2+0x6a>
10013338:	db05      	blt.n	10013346 <__ledf2+0xa2>
1001333a:	45bc      	cmp	ip, r7
1001333c:	d8e7      	bhi.n	1001330e <__ledf2+0x6a>
1001333e:	d00f      	beq.n	10013360 <__ledf2+0xbc>
10013340:	2000      	movs	r0, #0
10013342:	45bc      	cmp	ip, r7
10013344:	d2e8      	bcs.n	10013318 <__ledf2+0x74>
10013346:	4658      	mov	r0, fp
10013348:	4241      	negs	r1, r0
1001334a:	4148      	adcs	r0, r1
1001334c:	4241      	negs	r1, r0
1001334e:	2001      	movs	r0, #1
10013350:	4308      	orrs	r0, r1
10013352:	e7e1      	b.n	10013318 <__ledf2+0x74>
10013354:	433a      	orrs	r2, r7
10013356:	d1c7      	bne.n	100132e8 <__ledf2+0x44>
10013358:	2000      	movs	r0, #0
1001335a:	2e00      	cmp	r6, #0
1001335c:	d1dc      	bne.n	10013318 <__ledf2+0x74>
1001335e:	e7d6      	b.n	1001330e <__ledf2+0x6a>
10013360:	45c8      	cmp	r8, r9
10013362:	d8d4      	bhi.n	1001330e <__ledf2+0x6a>
10013364:	2000      	movs	r0, #0
10013366:	45c8      	cmp	r8, r9
10013368:	d3ed      	bcc.n	10013346 <__ledf2+0xa2>
1001336a:	e7d5      	b.n	10013318 <__ledf2+0x74>
1001336c:	000007ff 	.word	0x000007ff

10013370 <__libc_init_array>:
10013370:	4b0e      	ldr	r3, [pc, #56]	; (100133ac <__libc_init_array+0x3c>)
10013372:	b570      	push	{r4, r5, r6, lr}
10013374:	2500      	movs	r5, #0
10013376:	1c1e      	adds	r6, r3, #0
10013378:	4c0d      	ldr	r4, [pc, #52]	; (100133b0 <__libc_init_array+0x40>)
1001337a:	1ae4      	subs	r4, r4, r3
1001337c:	10a4      	asrs	r4, r4, #2
1001337e:	42a5      	cmp	r5, r4
10013380:	d004      	beq.n	1001338c <__libc_init_array+0x1c>
10013382:	00ab      	lsls	r3, r5, #2
10013384:	58f3      	ldr	r3, [r6, r3]
10013386:	4798      	blx	r3
10013388:	3501      	adds	r5, #1
1001338a:	e7f8      	b.n	1001337e <__libc_init_array+0xe>
1001338c:	f002 fed0 	bl	10016130 <_init>
10013390:	4b08      	ldr	r3, [pc, #32]	; (100133b4 <__libc_init_array+0x44>)
10013392:	2500      	movs	r5, #0
10013394:	1c1e      	adds	r6, r3, #0
10013396:	4c08      	ldr	r4, [pc, #32]	; (100133b8 <__libc_init_array+0x48>)
10013398:	1ae4      	subs	r4, r4, r3
1001339a:	10a4      	asrs	r4, r4, #2
1001339c:	42a5      	cmp	r5, r4
1001339e:	d004      	beq.n	100133aa <__libc_init_array+0x3a>
100133a0:	00ab      	lsls	r3, r5, #2
100133a2:	58f3      	ldr	r3, [r6, r3]
100133a4:	4798      	blx	r3
100133a6:	3501      	adds	r5, #1
100133a8:	e7f8      	b.n	1001339c <__libc_init_array+0x2c>
100133aa:	bd70      	pop	{r4, r5, r6, pc}
100133ac:	1001613c 	.word	0x1001613c
100133b0:	1001613c 	.word	0x1001613c
100133b4:	1001613c 	.word	0x1001613c
100133b8:	10016140 	.word	0x10016140

100133bc <memcmp>:
100133bc:	b530      	push	{r4, r5, lr}
100133be:	2400      	movs	r4, #0
100133c0:	4294      	cmp	r4, r2
100133c2:	d008      	beq.n	100133d6 <memcmp+0x1a>
100133c4:	5d03      	ldrb	r3, [r0, r4]
100133c6:	1c65      	adds	r5, r4, #1
100133c8:	5d0c      	ldrb	r4, [r1, r4]
100133ca:	42a3      	cmp	r3, r4
100133cc:	d001      	beq.n	100133d2 <memcmp+0x16>
100133ce:	1b18      	subs	r0, r3, r4
100133d0:	e002      	b.n	100133d8 <memcmp+0x1c>
100133d2:	1c2c      	adds	r4, r5, #0
100133d4:	e7f4      	b.n	100133c0 <memcmp+0x4>
100133d6:	2000      	movs	r0, #0
100133d8:	bd30      	pop	{r4, r5, pc}

100133da <memcpy>:
100133da:	2300      	movs	r3, #0
100133dc:	b510      	push	{r4, lr}
100133de:	4293      	cmp	r3, r2
100133e0:	d003      	beq.n	100133ea <memcpy+0x10>
100133e2:	5ccc      	ldrb	r4, [r1, r3]
100133e4:	54c4      	strb	r4, [r0, r3]
100133e6:	3301      	adds	r3, #1
100133e8:	e7f9      	b.n	100133de <memcpy+0x4>
100133ea:	bd10      	pop	{r4, pc}

100133ec <memset>:
100133ec:	1c03      	adds	r3, r0, #0
100133ee:	1882      	adds	r2, r0, r2
100133f0:	4293      	cmp	r3, r2
100133f2:	d002      	beq.n	100133fa <memset+0xe>
100133f4:	7019      	strb	r1, [r3, #0]
100133f6:	3301      	adds	r3, #1
100133f8:	e7fa      	b.n	100133f0 <memset+0x4>
100133fa:	4770      	bx	lr

100133fc <iprintf>:
100133fc:	b40f      	push	{r0, r1, r2, r3}
100133fe:	4b0b      	ldr	r3, [pc, #44]	; (1001342c <iprintf+0x30>)
10013400:	b513      	push	{r0, r1, r4, lr}
10013402:	681c      	ldr	r4, [r3, #0]
10013404:	2c00      	cmp	r4, #0
10013406:	d005      	beq.n	10013414 <iprintf+0x18>
10013408:	69a3      	ldr	r3, [r4, #24]
1001340a:	2b00      	cmp	r3, #0
1001340c:	d102      	bne.n	10013414 <iprintf+0x18>
1001340e:	1c20      	adds	r0, r4, #0
10013410:	f000 fb26 	bl	10013a60 <__sinit>
10013414:	ab05      	add	r3, sp, #20
10013416:	1c20      	adds	r0, r4, #0
10013418:	68a1      	ldr	r1, [r4, #8]
1001341a:	9a04      	ldr	r2, [sp, #16]
1001341c:	9301      	str	r3, [sp, #4]
1001341e:	f000 fcd9 	bl	10013dd4 <_vfiprintf_r>
10013422:	bc16      	pop	{r1, r2, r4}
10013424:	bc08      	pop	{r3}
10013426:	b004      	add	sp, #16
10013428:	4718      	bx	r3
1001342a:	46c0      	nop			; (mov r8, r8)
1001342c:	100161c0 	.word	0x100161c0

10013430 <putchar>:
10013430:	b538      	push	{r3, r4, r5, lr}
10013432:	4b08      	ldr	r3, [pc, #32]	; (10013454 <putchar+0x24>)
10013434:	1c05      	adds	r5, r0, #0
10013436:	681c      	ldr	r4, [r3, #0]
10013438:	2c00      	cmp	r4, #0
1001343a:	d005      	beq.n	10013448 <putchar+0x18>
1001343c:	69a3      	ldr	r3, [r4, #24]
1001343e:	2b00      	cmp	r3, #0
10013440:	d102      	bne.n	10013448 <putchar+0x18>
10013442:	1c20      	adds	r0, r4, #0
10013444:	f000 fb0c 	bl	10013a60 <__sinit>
10013448:	1c29      	adds	r1, r5, #0
1001344a:	1c20      	adds	r0, r4, #0
1001344c:	68a2      	ldr	r2, [r4, #8]
1001344e:	f000 ff57 	bl	10014300 <_putc_r>
10013452:	bd38      	pop	{r3, r4, r5, pc}
10013454:	100161c0 	.word	0x100161c0

10013458 <_puts_r>:
10013458:	b570      	push	{r4, r5, r6, lr}
1001345a:	1c05      	adds	r5, r0, #0
1001345c:	1c0e      	adds	r6, r1, #0
1001345e:	2800      	cmp	r0, #0
10013460:	d004      	beq.n	1001346c <_puts_r+0x14>
10013462:	6983      	ldr	r3, [r0, #24]
10013464:	2b00      	cmp	r3, #0
10013466:	d101      	bne.n	1001346c <_puts_r+0x14>
10013468:	f000 fafa 	bl	10013a60 <__sinit>
1001346c:	68ac      	ldr	r4, [r5, #8]
1001346e:	89a3      	ldrh	r3, [r4, #12]
10013470:	071b      	lsls	r3, r3, #28
10013472:	d502      	bpl.n	1001347a <_puts_r+0x22>
10013474:	6923      	ldr	r3, [r4, #16]
10013476:	2b00      	cmp	r3, #0
10013478:	d119      	bne.n	100134ae <_puts_r+0x56>
1001347a:	1c28      	adds	r0, r5, #0
1001347c:	1c21      	adds	r1, r4, #0
1001347e:	f000 f983 	bl	10013788 <__swsetup_r>
10013482:	2800      	cmp	r0, #0
10013484:	d013      	beq.n	100134ae <_puts_r+0x56>
10013486:	2001      	movs	r0, #1
10013488:	4240      	negs	r0, r0
1001348a:	e045      	b.n	10013518 <_puts_r+0xc0>
1001348c:	7831      	ldrb	r1, [r6, #0]
1001348e:	2b00      	cmp	r3, #0
10013490:	da1b      	bge.n	100134ca <_puts_r+0x72>
10013492:	69a2      	ldr	r2, [r4, #24]
10013494:	4293      	cmp	r3, r2
10013496:	da11      	bge.n	100134bc <_puts_r+0x64>
10013498:	1c22      	adds	r2, r4, #0
1001349a:	1c28      	adds	r0, r5, #0
1001349c:	f000 f91c 	bl	100136d8 <__swbuf_r>
100134a0:	3001      	adds	r0, #1
100134a2:	4242      	negs	r2, r0
100134a4:	4142      	adcs	r2, r0
100134a6:	b2d0      	uxtb	r0, r2
100134a8:	2800      	cmp	r0, #0
100134aa:	d1ec      	bne.n	10013486 <_puts_r+0x2e>
100134ac:	3601      	adds	r6, #1
100134ae:	68a3      	ldr	r3, [r4, #8]
100134b0:	7832      	ldrb	r2, [r6, #0]
100134b2:	3b01      	subs	r3, #1
100134b4:	60a3      	str	r3, [r4, #8]
100134b6:	2a00      	cmp	r2, #0
100134b8:	d1e8      	bne.n	1001348c <_puts_r+0x34>
100134ba:	e00c      	b.n	100134d6 <_puts_r+0x7e>
100134bc:	6823      	ldr	r3, [r4, #0]
100134be:	7019      	strb	r1, [r3, #0]
100134c0:	6823      	ldr	r3, [r4, #0]
100134c2:	7819      	ldrb	r1, [r3, #0]
100134c4:	290a      	cmp	r1, #10
100134c6:	d103      	bne.n	100134d0 <_puts_r+0x78>
100134c8:	e7e6      	b.n	10013498 <_puts_r+0x40>
100134ca:	6823      	ldr	r3, [r4, #0]
100134cc:	7019      	strb	r1, [r3, #0]
100134ce:	6823      	ldr	r3, [r4, #0]
100134d0:	3301      	adds	r3, #1
100134d2:	6023      	str	r3, [r4, #0]
100134d4:	e7ea      	b.n	100134ac <_puts_r+0x54>
100134d6:	2b00      	cmp	r3, #0
100134d8:	da17      	bge.n	1001350a <_puts_r+0xb2>
100134da:	69a2      	ldr	r2, [r4, #24]
100134dc:	4293      	cmp	r3, r2
100134de:	db08      	blt.n	100134f2 <_puts_r+0x9a>
100134e0:	230a      	movs	r3, #10
100134e2:	6822      	ldr	r2, [r4, #0]
100134e4:	7013      	strb	r3, [r2, #0]
100134e6:	6823      	ldr	r3, [r4, #0]
100134e8:	7819      	ldrb	r1, [r3, #0]
100134ea:	290a      	cmp	r1, #10
100134ec:	d111      	bne.n	10013512 <_puts_r+0xba>
100134ee:	1c28      	adds	r0, r5, #0
100134f0:	e001      	b.n	100134f6 <_puts_r+0x9e>
100134f2:	1c28      	adds	r0, r5, #0
100134f4:	210a      	movs	r1, #10
100134f6:	1c22      	adds	r2, r4, #0
100134f8:	f000 f8ee 	bl	100136d8 <__swbuf_r>
100134fc:	3001      	adds	r0, #1
100134fe:	4242      	negs	r2, r0
10013500:	4142      	adcs	r2, r0
10013502:	b2d0      	uxtb	r0, r2
10013504:	2800      	cmp	r0, #0
10013506:	d006      	beq.n	10013516 <_puts_r+0xbe>
10013508:	e7bd      	b.n	10013486 <_puts_r+0x2e>
1001350a:	230a      	movs	r3, #10
1001350c:	6822      	ldr	r2, [r4, #0]
1001350e:	7013      	strb	r3, [r2, #0]
10013510:	6823      	ldr	r3, [r4, #0]
10013512:	3301      	adds	r3, #1
10013514:	6023      	str	r3, [r4, #0]
10013516:	200a      	movs	r0, #10
10013518:	bd70      	pop	{r4, r5, r6, pc}
	...

1001351c <puts>:
1001351c:	b508      	push	{r3, lr}
1001351e:	4b03      	ldr	r3, [pc, #12]	; (1001352c <puts+0x10>)
10013520:	1c01      	adds	r1, r0, #0
10013522:	6818      	ldr	r0, [r3, #0]
10013524:	f7ff ff98 	bl	10013458 <_puts_r>
10013528:	bd08      	pop	{r3, pc}
1001352a:	46c0      	nop			; (mov r8, r8)
1001352c:	100161c0 	.word	0x100161c0

10013530 <rand>:
10013530:	4b15      	ldr	r3, [pc, #84]	; (10013588 <rand+0x58>)
10013532:	b510      	push	{r4, lr}
10013534:	681c      	ldr	r4, [r3, #0]
10013536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10013538:	2b00      	cmp	r3, #0
1001353a:	d115      	bne.n	10013568 <rand+0x38>
1001353c:	2018      	movs	r0, #24
1001353e:	f000 fb79 	bl	10013c34 <malloc>
10013542:	4b12      	ldr	r3, [pc, #72]	; (1001358c <rand+0x5c>)
10013544:	63a0      	str	r0, [r4, #56]	; 0x38
10013546:	8003      	strh	r3, [r0, #0]
10013548:	4b11      	ldr	r3, [pc, #68]	; (10013590 <rand+0x60>)
1001354a:	2201      	movs	r2, #1
1001354c:	8043      	strh	r3, [r0, #2]
1001354e:	4b11      	ldr	r3, [pc, #68]	; (10013594 <rand+0x64>)
10013550:	8083      	strh	r3, [r0, #4]
10013552:	4b11      	ldr	r3, [pc, #68]	; (10013598 <rand+0x68>)
10013554:	80c3      	strh	r3, [r0, #6]
10013556:	4b11      	ldr	r3, [pc, #68]	; (1001359c <rand+0x6c>)
10013558:	8103      	strh	r3, [r0, #8]
1001355a:	2305      	movs	r3, #5
1001355c:	8143      	strh	r3, [r0, #10]
1001355e:	3306      	adds	r3, #6
10013560:	8183      	strh	r3, [r0, #12]
10013562:	2300      	movs	r3, #0
10013564:	6102      	str	r2, [r0, #16]
10013566:	6143      	str	r3, [r0, #20]
10013568:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001356a:	4a0d      	ldr	r2, [pc, #52]	; (100135a0 <rand+0x70>)
1001356c:	6920      	ldr	r0, [r4, #16]
1001356e:	6961      	ldr	r1, [r4, #20]
10013570:	4b0c      	ldr	r3, [pc, #48]	; (100135a4 <rand+0x74>)
10013572:	f000 ffdd 	bl	10014530 <__aeabi_lmul>
10013576:	2201      	movs	r2, #1
10013578:	2300      	movs	r3, #0
1001357a:	1880      	adds	r0, r0, r2
1001357c:	4159      	adcs	r1, r3
1001357e:	6120      	str	r0, [r4, #16]
10013580:	6161      	str	r1, [r4, #20]
10013582:	0048      	lsls	r0, r1, #1
10013584:	0840      	lsrs	r0, r0, #1
10013586:	bd10      	pop	{r4, pc}
10013588:	100161c0 	.word	0x100161c0
1001358c:	0000330e 	.word	0x0000330e
10013590:	ffffabcd 	.word	0xffffabcd
10013594:	00001234 	.word	0x00001234
10013598:	ffffe66d 	.word	0xffffe66d
1001359c:	ffffdeec 	.word	0xffffdeec
100135a0:	4c957f2d 	.word	0x4c957f2d
100135a4:	5851f42d 	.word	0x5851f42d

100135a8 <setbuf>:
100135a8:	b508      	push	{r3, lr}
100135aa:	424a      	negs	r2, r1
100135ac:	414a      	adcs	r2, r1
100135ae:	2380      	movs	r3, #128	; 0x80
100135b0:	0052      	lsls	r2, r2, #1
100135b2:	00db      	lsls	r3, r3, #3
100135b4:	f000 f802 	bl	100135bc <setvbuf>
100135b8:	bd08      	pop	{r3, pc}
	...

100135bc <setvbuf>:
100135bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100135be:	1c1e      	adds	r6, r3, #0
100135c0:	4b3c      	ldr	r3, [pc, #240]	; (100136b4 <setvbuf+0xf8>)
100135c2:	1c04      	adds	r4, r0, #0
100135c4:	681d      	ldr	r5, [r3, #0]
100135c6:	1c0f      	adds	r7, r1, #0
100135c8:	9201      	str	r2, [sp, #4]
100135ca:	2d00      	cmp	r5, #0
100135cc:	d005      	beq.n	100135da <setvbuf+0x1e>
100135ce:	69ab      	ldr	r3, [r5, #24]
100135d0:	2b00      	cmp	r3, #0
100135d2:	d102      	bne.n	100135da <setvbuf+0x1e>
100135d4:	1c28      	adds	r0, r5, #0
100135d6:	f000 fa43 	bl	10013a60 <__sinit>
100135da:	4b37      	ldr	r3, [pc, #220]	; (100136b8 <setvbuf+0xfc>)
100135dc:	429c      	cmp	r4, r3
100135de:	d101      	bne.n	100135e4 <setvbuf+0x28>
100135e0:	686c      	ldr	r4, [r5, #4]
100135e2:	e008      	b.n	100135f6 <setvbuf+0x3a>
100135e4:	4b35      	ldr	r3, [pc, #212]	; (100136bc <setvbuf+0x100>)
100135e6:	429c      	cmp	r4, r3
100135e8:	d101      	bne.n	100135ee <setvbuf+0x32>
100135ea:	68ac      	ldr	r4, [r5, #8]
100135ec:	e003      	b.n	100135f6 <setvbuf+0x3a>
100135ee:	4b34      	ldr	r3, [pc, #208]	; (100136c0 <setvbuf+0x104>)
100135f0:	429c      	cmp	r4, r3
100135f2:	d100      	bne.n	100135f6 <setvbuf+0x3a>
100135f4:	68ec      	ldr	r4, [r5, #12]
100135f6:	9b01      	ldr	r3, [sp, #4]
100135f8:	2b02      	cmp	r3, #2
100135fa:	d858      	bhi.n	100136ae <setvbuf+0xf2>
100135fc:	2e00      	cmp	r6, #0
100135fe:	db56      	blt.n	100136ae <setvbuf+0xf2>
10013600:	1c28      	adds	r0, r5, #0
10013602:	1c21      	adds	r1, r4, #0
10013604:	f000 f9be 	bl	10013984 <_fflush_r>
10013608:	2300      	movs	r3, #0
1001360a:	6063      	str	r3, [r4, #4]
1001360c:	61a3      	str	r3, [r4, #24]
1001360e:	89a3      	ldrh	r3, [r4, #12]
10013610:	061b      	lsls	r3, r3, #24
10013612:	d503      	bpl.n	1001361c <setvbuf+0x60>
10013614:	1c28      	adds	r0, r5, #0
10013616:	6921      	ldr	r1, [r4, #16]
10013618:	f000 fb16 	bl	10013c48 <_free_r>
1001361c:	2283      	movs	r2, #131	; 0x83
1001361e:	89a3      	ldrh	r3, [r4, #12]
10013620:	4393      	bics	r3, r2
10013622:	81a3      	strh	r3, [r4, #12]
10013624:	9b01      	ldr	r3, [sp, #4]
10013626:	2b02      	cmp	r3, #2
10013628:	d013      	beq.n	10013652 <setvbuf+0x96>
1001362a:	2f00      	cmp	r7, #0
1001362c:	d125      	bne.n	1001367a <setvbuf+0xbe>
1001362e:	2e00      	cmp	r6, #0
10013630:	d101      	bne.n	10013636 <setvbuf+0x7a>
10013632:	2680      	movs	r6, #128	; 0x80
10013634:	00f6      	lsls	r6, r6, #3
10013636:	1c30      	adds	r0, r6, #0
10013638:	f000 fafc 	bl	10013c34 <malloc>
1001363c:	1e07      	subs	r7, r0, #0
1001363e:	d118      	bne.n	10013672 <setvbuf+0xb6>
10013640:	2080      	movs	r0, #128	; 0x80
10013642:	00c0      	lsls	r0, r0, #3
10013644:	f000 faf6 	bl	10013c34 <malloc>
10013648:	1e07      	subs	r7, r0, #0
1001364a:	d110      	bne.n	1001366e <setvbuf+0xb2>
1001364c:	2001      	movs	r0, #1
1001364e:	4240      	negs	r0, r0
10013650:	e000      	b.n	10013654 <setvbuf+0x98>
10013652:	2000      	movs	r0, #0
10013654:	2202      	movs	r2, #2
10013656:	89a3      	ldrh	r3, [r4, #12]
10013658:	4313      	orrs	r3, r2
1001365a:	81a3      	strh	r3, [r4, #12]
1001365c:	2300      	movs	r3, #0
1001365e:	60a3      	str	r3, [r4, #8]
10013660:	1c23      	adds	r3, r4, #0
10013662:	3347      	adds	r3, #71	; 0x47
10013664:	6023      	str	r3, [r4, #0]
10013666:	6123      	str	r3, [r4, #16]
10013668:	2301      	movs	r3, #1
1001366a:	6163      	str	r3, [r4, #20]
1001366c:	e021      	b.n	100136b2 <setvbuf+0xf6>
1001366e:	2680      	movs	r6, #128	; 0x80
10013670:	00f6      	lsls	r6, r6, #3
10013672:	2280      	movs	r2, #128	; 0x80
10013674:	89a3      	ldrh	r3, [r4, #12]
10013676:	4313      	orrs	r3, r2
10013678:	81a3      	strh	r3, [r4, #12]
1001367a:	9b01      	ldr	r3, [sp, #4]
1001367c:	2b01      	cmp	r3, #1
1001367e:	d105      	bne.n	1001368c <setvbuf+0xd0>
10013680:	89a3      	ldrh	r3, [r4, #12]
10013682:	9a01      	ldr	r2, [sp, #4]
10013684:	431a      	orrs	r2, r3
10013686:	4273      	negs	r3, r6
10013688:	81a2      	strh	r2, [r4, #12]
1001368a:	61a3      	str	r3, [r4, #24]
1001368c:	4b0d      	ldr	r3, [pc, #52]	; (100136c4 <setvbuf+0x108>)
1001368e:	2000      	movs	r0, #0
10013690:	62ab      	str	r3, [r5, #40]	; 0x28
10013692:	89a2      	ldrh	r2, [r4, #12]
10013694:	6027      	str	r7, [r4, #0]
10013696:	6127      	str	r7, [r4, #16]
10013698:	6166      	str	r6, [r4, #20]
1001369a:	0713      	lsls	r3, r2, #28
1001369c:	d509      	bpl.n	100136b2 <setvbuf+0xf6>
1001369e:	2303      	movs	r3, #3
100136a0:	401a      	ands	r2, r3
100136a2:	4253      	negs	r3, r2
100136a4:	4153      	adcs	r3, r2
100136a6:	425b      	negs	r3, r3
100136a8:	401e      	ands	r6, r3
100136aa:	60a6      	str	r6, [r4, #8]
100136ac:	e001      	b.n	100136b2 <setvbuf+0xf6>
100136ae:	2001      	movs	r0, #1
100136b0:	4240      	negs	r0, r0
100136b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100136b4:	100161c0 	.word	0x100161c0
100136b8:	1001609c 	.word	0x1001609c
100136bc:	100160bc 	.word	0x100160bc
100136c0:	100160dc 	.word	0x100160dc
100136c4:	100139dd 	.word	0x100139dd

100136c8 <strlen>:
100136c8:	2300      	movs	r3, #0
100136ca:	5cc2      	ldrb	r2, [r0, r3]
100136cc:	3301      	adds	r3, #1
100136ce:	2a00      	cmp	r2, #0
100136d0:	d1fb      	bne.n	100136ca <strlen+0x2>
100136d2:	1e58      	subs	r0, r3, #1
100136d4:	4770      	bx	lr
	...

100136d8 <__swbuf_r>:
100136d8:	b570      	push	{r4, r5, r6, lr}
100136da:	1c05      	adds	r5, r0, #0
100136dc:	1c0e      	adds	r6, r1, #0
100136de:	1c14      	adds	r4, r2, #0
100136e0:	2800      	cmp	r0, #0
100136e2:	d004      	beq.n	100136ee <__swbuf_r+0x16>
100136e4:	6983      	ldr	r3, [r0, #24]
100136e6:	2b00      	cmp	r3, #0
100136e8:	d101      	bne.n	100136ee <__swbuf_r+0x16>
100136ea:	f000 f9b9 	bl	10013a60 <__sinit>
100136ee:	4b23      	ldr	r3, [pc, #140]	; (1001377c <__swbuf_r+0xa4>)
100136f0:	429c      	cmp	r4, r3
100136f2:	d101      	bne.n	100136f8 <__swbuf_r+0x20>
100136f4:	686c      	ldr	r4, [r5, #4]
100136f6:	e008      	b.n	1001370a <__swbuf_r+0x32>
100136f8:	4b21      	ldr	r3, [pc, #132]	; (10013780 <__swbuf_r+0xa8>)
100136fa:	429c      	cmp	r4, r3
100136fc:	d101      	bne.n	10013702 <__swbuf_r+0x2a>
100136fe:	68ac      	ldr	r4, [r5, #8]
10013700:	e003      	b.n	1001370a <__swbuf_r+0x32>
10013702:	4b20      	ldr	r3, [pc, #128]	; (10013784 <__swbuf_r+0xac>)
10013704:	429c      	cmp	r4, r3
10013706:	d100      	bne.n	1001370a <__swbuf_r+0x32>
10013708:	68ec      	ldr	r4, [r5, #12]
1001370a:	69a3      	ldr	r3, [r4, #24]
1001370c:	60a3      	str	r3, [r4, #8]
1001370e:	89a3      	ldrh	r3, [r4, #12]
10013710:	071b      	lsls	r3, r3, #28
10013712:	d50a      	bpl.n	1001372a <__swbuf_r+0x52>
10013714:	6923      	ldr	r3, [r4, #16]
10013716:	2b00      	cmp	r3, #0
10013718:	d007      	beq.n	1001372a <__swbuf_r+0x52>
1001371a:	6823      	ldr	r3, [r4, #0]
1001371c:	6922      	ldr	r2, [r4, #16]
1001371e:	b2f6      	uxtb	r6, r6
10013720:	1a98      	subs	r0, r3, r2
10013722:	6963      	ldr	r3, [r4, #20]
10013724:	4298      	cmp	r0, r3
10013726:	db0f      	blt.n	10013748 <__swbuf_r+0x70>
10013728:	e008      	b.n	1001373c <__swbuf_r+0x64>
1001372a:	1c28      	adds	r0, r5, #0
1001372c:	1c21      	adds	r1, r4, #0
1001372e:	f000 f82b 	bl	10013788 <__swsetup_r>
10013732:	2800      	cmp	r0, #0
10013734:	d0f1      	beq.n	1001371a <__swbuf_r+0x42>
10013736:	2001      	movs	r0, #1
10013738:	4240      	negs	r0, r0
1001373a:	e01d      	b.n	10013778 <__swbuf_r+0xa0>
1001373c:	1c28      	adds	r0, r5, #0
1001373e:	1c21      	adds	r1, r4, #0
10013740:	f000 f920 	bl	10013984 <_fflush_r>
10013744:	2800      	cmp	r0, #0
10013746:	d1f6      	bne.n	10013736 <__swbuf_r+0x5e>
10013748:	68a3      	ldr	r3, [r4, #8]
1001374a:	3001      	adds	r0, #1
1001374c:	3b01      	subs	r3, #1
1001374e:	60a3      	str	r3, [r4, #8]
10013750:	6823      	ldr	r3, [r4, #0]
10013752:	1c5a      	adds	r2, r3, #1
10013754:	6022      	str	r2, [r4, #0]
10013756:	701e      	strb	r6, [r3, #0]
10013758:	6963      	ldr	r3, [r4, #20]
1001375a:	4298      	cmp	r0, r3
1001375c:	d005      	beq.n	1001376a <__swbuf_r+0x92>
1001375e:	89a3      	ldrh	r3, [r4, #12]
10013760:	1c30      	adds	r0, r6, #0
10013762:	07db      	lsls	r3, r3, #31
10013764:	d508      	bpl.n	10013778 <__swbuf_r+0xa0>
10013766:	2e0a      	cmp	r6, #10
10013768:	d106      	bne.n	10013778 <__swbuf_r+0xa0>
1001376a:	1c28      	adds	r0, r5, #0
1001376c:	1c21      	adds	r1, r4, #0
1001376e:	f000 f909 	bl	10013984 <_fflush_r>
10013772:	2800      	cmp	r0, #0
10013774:	d1df      	bne.n	10013736 <__swbuf_r+0x5e>
10013776:	1c30      	adds	r0, r6, #0
10013778:	bd70      	pop	{r4, r5, r6, pc}
1001377a:	46c0      	nop			; (mov r8, r8)
1001377c:	1001609c 	.word	0x1001609c
10013780:	100160bc 	.word	0x100160bc
10013784:	100160dc 	.word	0x100160dc

10013788 <__swsetup_r>:
10013788:	4b35      	ldr	r3, [pc, #212]	; (10013860 <__swsetup_r+0xd8>)
1001378a:	b570      	push	{r4, r5, r6, lr}
1001378c:	681d      	ldr	r5, [r3, #0]
1001378e:	1c06      	adds	r6, r0, #0
10013790:	1c0c      	adds	r4, r1, #0
10013792:	2d00      	cmp	r5, #0
10013794:	d005      	beq.n	100137a2 <__swsetup_r+0x1a>
10013796:	69ab      	ldr	r3, [r5, #24]
10013798:	2b00      	cmp	r3, #0
1001379a:	d102      	bne.n	100137a2 <__swsetup_r+0x1a>
1001379c:	1c28      	adds	r0, r5, #0
1001379e:	f000 f95f 	bl	10013a60 <__sinit>
100137a2:	4b30      	ldr	r3, [pc, #192]	; (10013864 <__swsetup_r+0xdc>)
100137a4:	429c      	cmp	r4, r3
100137a6:	d101      	bne.n	100137ac <__swsetup_r+0x24>
100137a8:	686c      	ldr	r4, [r5, #4]
100137aa:	e008      	b.n	100137be <__swsetup_r+0x36>
100137ac:	4b2e      	ldr	r3, [pc, #184]	; (10013868 <__swsetup_r+0xe0>)
100137ae:	429c      	cmp	r4, r3
100137b0:	d101      	bne.n	100137b6 <__swsetup_r+0x2e>
100137b2:	68ac      	ldr	r4, [r5, #8]
100137b4:	e003      	b.n	100137be <__swsetup_r+0x36>
100137b6:	4b2d      	ldr	r3, [pc, #180]	; (1001386c <__swsetup_r+0xe4>)
100137b8:	429c      	cmp	r4, r3
100137ba:	d100      	bne.n	100137be <__swsetup_r+0x36>
100137bc:	68ec      	ldr	r4, [r5, #12]
100137be:	89a3      	ldrh	r3, [r4, #12]
100137c0:	b29a      	uxth	r2, r3
100137c2:	0711      	lsls	r1, r2, #28
100137c4:	d423      	bmi.n	1001380e <__swsetup_r+0x86>
100137c6:	06d1      	lsls	r1, r2, #27
100137c8:	d407      	bmi.n	100137da <__swsetup_r+0x52>
100137ca:	2209      	movs	r2, #9
100137cc:	2001      	movs	r0, #1
100137ce:	6032      	str	r2, [r6, #0]
100137d0:	3237      	adds	r2, #55	; 0x37
100137d2:	4313      	orrs	r3, r2
100137d4:	81a3      	strh	r3, [r4, #12]
100137d6:	4240      	negs	r0, r0
100137d8:	e040      	b.n	1001385c <__swsetup_r+0xd4>
100137da:	0753      	lsls	r3, r2, #29
100137dc:	d513      	bpl.n	10013806 <__swsetup_r+0x7e>
100137de:	6b61      	ldr	r1, [r4, #52]	; 0x34
100137e0:	2900      	cmp	r1, #0
100137e2:	d008      	beq.n	100137f6 <__swsetup_r+0x6e>
100137e4:	1c23      	adds	r3, r4, #0
100137e6:	3344      	adds	r3, #68	; 0x44
100137e8:	4299      	cmp	r1, r3
100137ea:	d002      	beq.n	100137f2 <__swsetup_r+0x6a>
100137ec:	1c30      	adds	r0, r6, #0
100137ee:	f000 fa2b 	bl	10013c48 <_free_r>
100137f2:	2300      	movs	r3, #0
100137f4:	6363      	str	r3, [r4, #52]	; 0x34
100137f6:	2224      	movs	r2, #36	; 0x24
100137f8:	89a3      	ldrh	r3, [r4, #12]
100137fa:	4393      	bics	r3, r2
100137fc:	81a3      	strh	r3, [r4, #12]
100137fe:	2300      	movs	r3, #0
10013800:	6063      	str	r3, [r4, #4]
10013802:	6923      	ldr	r3, [r4, #16]
10013804:	6023      	str	r3, [r4, #0]
10013806:	2208      	movs	r2, #8
10013808:	89a3      	ldrh	r3, [r4, #12]
1001380a:	4313      	orrs	r3, r2
1001380c:	81a3      	strh	r3, [r4, #12]
1001380e:	6923      	ldr	r3, [r4, #16]
10013810:	2b00      	cmp	r3, #0
10013812:	d10b      	bne.n	1001382c <__swsetup_r+0xa4>
10013814:	23a0      	movs	r3, #160	; 0xa0
10013816:	89a2      	ldrh	r2, [r4, #12]
10013818:	009b      	lsls	r3, r3, #2
1001381a:	4013      	ands	r3, r2
1001381c:	2280      	movs	r2, #128	; 0x80
1001381e:	0092      	lsls	r2, r2, #2
10013820:	4293      	cmp	r3, r2
10013822:	d003      	beq.n	1001382c <__swsetup_r+0xa4>
10013824:	1c30      	adds	r0, r6, #0
10013826:	1c21      	adds	r1, r4, #0
10013828:	f000 f9ac 	bl	10013b84 <__smakebuf_r>
1001382c:	2301      	movs	r3, #1
1001382e:	89a2      	ldrh	r2, [r4, #12]
10013830:	4013      	ands	r3, r2
10013832:	d005      	beq.n	10013840 <__swsetup_r+0xb8>
10013834:	2300      	movs	r3, #0
10013836:	60a3      	str	r3, [r4, #8]
10013838:	6963      	ldr	r3, [r4, #20]
1001383a:	425b      	negs	r3, r3
1001383c:	61a3      	str	r3, [r4, #24]
1001383e:	e003      	b.n	10013848 <__swsetup_r+0xc0>
10013840:	0791      	lsls	r1, r2, #30
10013842:	d400      	bmi.n	10013846 <__swsetup_r+0xbe>
10013844:	6963      	ldr	r3, [r4, #20]
10013846:	60a3      	str	r3, [r4, #8]
10013848:	2000      	movs	r0, #0
1001384a:	6923      	ldr	r3, [r4, #16]
1001384c:	4283      	cmp	r3, r0
1001384e:	d105      	bne.n	1001385c <__swsetup_r+0xd4>
10013850:	0613      	lsls	r3, r2, #24
10013852:	d503      	bpl.n	1001385c <__swsetup_r+0xd4>
10013854:	2340      	movs	r3, #64	; 0x40
10013856:	431a      	orrs	r2, r3
10013858:	81a2      	strh	r2, [r4, #12]
1001385a:	3801      	subs	r0, #1
1001385c:	bd70      	pop	{r4, r5, r6, pc}
1001385e:	46c0      	nop			; (mov r8, r8)
10013860:	100161c0 	.word	0x100161c0
10013864:	1001609c 	.word	0x1001609c
10013868:	100160bc 	.word	0x100160bc
1001386c:	100160dc 	.word	0x100160dc

10013870 <__sflush_r>:
10013870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013872:	898a      	ldrh	r2, [r1, #12]
10013874:	1c05      	adds	r5, r0, #0
10013876:	1c0c      	adds	r4, r1, #0
10013878:	0713      	lsls	r3, r2, #28
1001387a:	d45e      	bmi.n	1001393a <__sflush_r+0xca>
1001387c:	684b      	ldr	r3, [r1, #4]
1001387e:	2b00      	cmp	r3, #0
10013880:	dc02      	bgt.n	10013888 <__sflush_r+0x18>
10013882:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10013884:	2b00      	cmp	r3, #0
10013886:	dd1a      	ble.n	100138be <__sflush_r+0x4e>
10013888:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001388a:	2f00      	cmp	r7, #0
1001388c:	d017      	beq.n	100138be <__sflush_r+0x4e>
1001388e:	2300      	movs	r3, #0
10013890:	682e      	ldr	r6, [r5, #0]
10013892:	602b      	str	r3, [r5, #0]
10013894:	2380      	movs	r3, #128	; 0x80
10013896:	015b      	lsls	r3, r3, #5
10013898:	401a      	ands	r2, r3
1001389a:	d001      	beq.n	100138a0 <__sflush_r+0x30>
1001389c:	6d62      	ldr	r2, [r4, #84]	; 0x54
1001389e:	e015      	b.n	100138cc <__sflush_r+0x5c>
100138a0:	1c28      	adds	r0, r5, #0
100138a2:	6a21      	ldr	r1, [r4, #32]
100138a4:	2301      	movs	r3, #1
100138a6:	47b8      	blx	r7
100138a8:	1c02      	adds	r2, r0, #0
100138aa:	1c43      	adds	r3, r0, #1
100138ac:	d10e      	bne.n	100138cc <__sflush_r+0x5c>
100138ae:	682b      	ldr	r3, [r5, #0]
100138b0:	2b00      	cmp	r3, #0
100138b2:	d00b      	beq.n	100138cc <__sflush_r+0x5c>
100138b4:	2b1d      	cmp	r3, #29
100138b6:	d001      	beq.n	100138bc <__sflush_r+0x4c>
100138b8:	2b16      	cmp	r3, #22
100138ba:	d102      	bne.n	100138c2 <__sflush_r+0x52>
100138bc:	602e      	str	r6, [r5, #0]
100138be:	2000      	movs	r0, #0
100138c0:	e05e      	b.n	10013980 <__sflush_r+0x110>
100138c2:	2140      	movs	r1, #64	; 0x40
100138c4:	89a3      	ldrh	r3, [r4, #12]
100138c6:	430b      	orrs	r3, r1
100138c8:	81a3      	strh	r3, [r4, #12]
100138ca:	e059      	b.n	10013980 <__sflush_r+0x110>
100138cc:	89a3      	ldrh	r3, [r4, #12]
100138ce:	075b      	lsls	r3, r3, #29
100138d0:	d506      	bpl.n	100138e0 <__sflush_r+0x70>
100138d2:	6863      	ldr	r3, [r4, #4]
100138d4:	1ad2      	subs	r2, r2, r3
100138d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
100138d8:	2b00      	cmp	r3, #0
100138da:	d001      	beq.n	100138e0 <__sflush_r+0x70>
100138dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
100138de:	1ad2      	subs	r2, r2, r3
100138e0:	2300      	movs	r3, #0
100138e2:	1c28      	adds	r0, r5, #0
100138e4:	6a21      	ldr	r1, [r4, #32]
100138e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100138e8:	47b8      	blx	r7
100138ea:	89a3      	ldrh	r3, [r4, #12]
100138ec:	1c42      	adds	r2, r0, #1
100138ee:	d106      	bne.n	100138fe <__sflush_r+0x8e>
100138f0:	682a      	ldr	r2, [r5, #0]
100138f2:	2a00      	cmp	r2, #0
100138f4:	d003      	beq.n	100138fe <__sflush_r+0x8e>
100138f6:	2a1d      	cmp	r2, #29
100138f8:	d001      	beq.n	100138fe <__sflush_r+0x8e>
100138fa:	2a16      	cmp	r2, #22
100138fc:	d119      	bne.n	10013932 <__sflush_r+0xc2>
100138fe:	2200      	movs	r2, #0
10013900:	6062      	str	r2, [r4, #4]
10013902:	6922      	ldr	r2, [r4, #16]
10013904:	6022      	str	r2, [r4, #0]
10013906:	04db      	lsls	r3, r3, #19
10013908:	d505      	bpl.n	10013916 <__sflush_r+0xa6>
1001390a:	1c43      	adds	r3, r0, #1
1001390c:	d102      	bne.n	10013914 <__sflush_r+0xa4>
1001390e:	682b      	ldr	r3, [r5, #0]
10013910:	2b00      	cmp	r3, #0
10013912:	d100      	bne.n	10013916 <__sflush_r+0xa6>
10013914:	6560      	str	r0, [r4, #84]	; 0x54
10013916:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013918:	602e      	str	r6, [r5, #0]
1001391a:	2900      	cmp	r1, #0
1001391c:	d0cf      	beq.n	100138be <__sflush_r+0x4e>
1001391e:	1c23      	adds	r3, r4, #0
10013920:	3344      	adds	r3, #68	; 0x44
10013922:	4299      	cmp	r1, r3
10013924:	d002      	beq.n	1001392c <__sflush_r+0xbc>
10013926:	1c28      	adds	r0, r5, #0
10013928:	f000 f98e 	bl	10013c48 <_free_r>
1001392c:	2000      	movs	r0, #0
1001392e:	6360      	str	r0, [r4, #52]	; 0x34
10013930:	e026      	b.n	10013980 <__sflush_r+0x110>
10013932:	2240      	movs	r2, #64	; 0x40
10013934:	4313      	orrs	r3, r2
10013936:	81a3      	strh	r3, [r4, #12]
10013938:	e022      	b.n	10013980 <__sflush_r+0x110>
1001393a:	690f      	ldr	r7, [r1, #16]
1001393c:	2f00      	cmp	r7, #0
1001393e:	d0be      	beq.n	100138be <__sflush_r+0x4e>
10013940:	680b      	ldr	r3, [r1, #0]
10013942:	600f      	str	r7, [r1, #0]
10013944:	1bdb      	subs	r3, r3, r7
10013946:	9301      	str	r3, [sp, #4]
10013948:	2300      	movs	r3, #0
1001394a:	0792      	lsls	r2, r2, #30
1001394c:	d100      	bne.n	10013950 <__sflush_r+0xe0>
1001394e:	694b      	ldr	r3, [r1, #20]
10013950:	60a3      	str	r3, [r4, #8]
10013952:	9b01      	ldr	r3, [sp, #4]
10013954:	2b00      	cmp	r3, #0
10013956:	ddb2      	ble.n	100138be <__sflush_r+0x4e>
10013958:	1c28      	adds	r0, r5, #0
1001395a:	6a21      	ldr	r1, [r4, #32]
1001395c:	1c3a      	adds	r2, r7, #0
1001395e:	9b01      	ldr	r3, [sp, #4]
10013960:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10013962:	47b0      	blx	r6
10013964:	2800      	cmp	r0, #0
10013966:	dc06      	bgt.n	10013976 <__sflush_r+0x106>
10013968:	2240      	movs	r2, #64	; 0x40
1001396a:	2001      	movs	r0, #1
1001396c:	89a3      	ldrh	r3, [r4, #12]
1001396e:	4240      	negs	r0, r0
10013970:	4313      	orrs	r3, r2
10013972:	81a3      	strh	r3, [r4, #12]
10013974:	e004      	b.n	10013980 <__sflush_r+0x110>
10013976:	9b01      	ldr	r3, [sp, #4]
10013978:	183f      	adds	r7, r7, r0
1001397a:	1a1b      	subs	r3, r3, r0
1001397c:	9301      	str	r3, [sp, #4]
1001397e:	e7e8      	b.n	10013952 <__sflush_r+0xe2>
10013980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10013984 <_fflush_r>:
10013984:	b538      	push	{r3, r4, r5, lr}
10013986:	690b      	ldr	r3, [r1, #16]
10013988:	1c05      	adds	r5, r0, #0
1001398a:	1c0c      	adds	r4, r1, #0
1001398c:	2b00      	cmp	r3, #0
1001398e:	d101      	bne.n	10013994 <_fflush_r+0x10>
10013990:	2000      	movs	r0, #0
10013992:	e01c      	b.n	100139ce <_fflush_r+0x4a>
10013994:	2800      	cmp	r0, #0
10013996:	d004      	beq.n	100139a2 <_fflush_r+0x1e>
10013998:	6983      	ldr	r3, [r0, #24]
1001399a:	2b00      	cmp	r3, #0
1001399c:	d101      	bne.n	100139a2 <_fflush_r+0x1e>
1001399e:	f000 f85f 	bl	10013a60 <__sinit>
100139a2:	4b0b      	ldr	r3, [pc, #44]	; (100139d0 <_fflush_r+0x4c>)
100139a4:	429c      	cmp	r4, r3
100139a6:	d101      	bne.n	100139ac <_fflush_r+0x28>
100139a8:	686c      	ldr	r4, [r5, #4]
100139aa:	e008      	b.n	100139be <_fflush_r+0x3a>
100139ac:	4b09      	ldr	r3, [pc, #36]	; (100139d4 <_fflush_r+0x50>)
100139ae:	429c      	cmp	r4, r3
100139b0:	d101      	bne.n	100139b6 <_fflush_r+0x32>
100139b2:	68ac      	ldr	r4, [r5, #8]
100139b4:	e003      	b.n	100139be <_fflush_r+0x3a>
100139b6:	4b08      	ldr	r3, [pc, #32]	; (100139d8 <_fflush_r+0x54>)
100139b8:	429c      	cmp	r4, r3
100139ba:	d100      	bne.n	100139be <_fflush_r+0x3a>
100139bc:	68ec      	ldr	r4, [r5, #12]
100139be:	220c      	movs	r2, #12
100139c0:	5ea3      	ldrsh	r3, [r4, r2]
100139c2:	2b00      	cmp	r3, #0
100139c4:	d0e4      	beq.n	10013990 <_fflush_r+0xc>
100139c6:	1c28      	adds	r0, r5, #0
100139c8:	1c21      	adds	r1, r4, #0
100139ca:	f7ff ff51 	bl	10013870 <__sflush_r>
100139ce:	bd38      	pop	{r3, r4, r5, pc}
100139d0:	1001609c 	.word	0x1001609c
100139d4:	100160bc 	.word	0x100160bc
100139d8:	100160dc 	.word	0x100160dc

100139dc <_cleanup_r>:
100139dc:	b508      	push	{r3, lr}
100139de:	4902      	ldr	r1, [pc, #8]	; (100139e8 <_cleanup_r+0xc>)
100139e0:	f000 f8ae 	bl	10013b40 <_fwalk_reent>
100139e4:	bd08      	pop	{r3, pc}
100139e6:	46c0      	nop			; (mov r8, r8)
100139e8:	10013985 	.word	0x10013985

100139ec <std.isra.0>:
100139ec:	2300      	movs	r3, #0
100139ee:	b510      	push	{r4, lr}
100139f0:	1c04      	adds	r4, r0, #0
100139f2:	6003      	str	r3, [r0, #0]
100139f4:	6043      	str	r3, [r0, #4]
100139f6:	6083      	str	r3, [r0, #8]
100139f8:	8181      	strh	r1, [r0, #12]
100139fa:	6643      	str	r3, [r0, #100]	; 0x64
100139fc:	81c2      	strh	r2, [r0, #14]
100139fe:	6103      	str	r3, [r0, #16]
10013a00:	6143      	str	r3, [r0, #20]
10013a02:	6183      	str	r3, [r0, #24]
10013a04:	1c19      	adds	r1, r3, #0
10013a06:	2208      	movs	r2, #8
10013a08:	305c      	adds	r0, #92	; 0x5c
10013a0a:	f7ff fcef 	bl	100133ec <memset>
10013a0e:	4b05      	ldr	r3, [pc, #20]	; (10013a24 <std.isra.0+0x38>)
10013a10:	6224      	str	r4, [r4, #32]
10013a12:	6263      	str	r3, [r4, #36]	; 0x24
10013a14:	4b04      	ldr	r3, [pc, #16]	; (10013a28 <std.isra.0+0x3c>)
10013a16:	62a3      	str	r3, [r4, #40]	; 0x28
10013a18:	4b04      	ldr	r3, [pc, #16]	; (10013a2c <std.isra.0+0x40>)
10013a1a:	62e3      	str	r3, [r4, #44]	; 0x2c
10013a1c:	4b04      	ldr	r3, [pc, #16]	; (10013a30 <std.isra.0+0x44>)
10013a1e:	6323      	str	r3, [r4, #48]	; 0x30
10013a20:	bd10      	pop	{r4, pc}
10013a22:	46c0      	nop			; (mov r8, r8)
10013a24:	1001439d 	.word	0x1001439d
10013a28:	100143c5 	.word	0x100143c5
10013a2c:	100143fd 	.word	0x100143fd
10013a30:	10014429 	.word	0x10014429

10013a34 <__sfmoreglue>:
10013a34:	b570      	push	{r4, r5, r6, lr}
10013a36:	2568      	movs	r5, #104	; 0x68
10013a38:	1e4b      	subs	r3, r1, #1
10013a3a:	435d      	muls	r5, r3
10013a3c:	1c0e      	adds	r6, r1, #0
10013a3e:	1c29      	adds	r1, r5, #0
10013a40:	3174      	adds	r1, #116	; 0x74
10013a42:	f000 f947 	bl	10013cd4 <_malloc_r>
10013a46:	1e04      	subs	r4, r0, #0
10013a48:	d008      	beq.n	10013a5c <__sfmoreglue+0x28>
10013a4a:	2100      	movs	r1, #0
10013a4c:	1c2a      	adds	r2, r5, #0
10013a4e:	6001      	str	r1, [r0, #0]
10013a50:	6046      	str	r6, [r0, #4]
10013a52:	300c      	adds	r0, #12
10013a54:	60a0      	str	r0, [r4, #8]
10013a56:	3268      	adds	r2, #104	; 0x68
10013a58:	f7ff fcc8 	bl	100133ec <memset>
10013a5c:	1c20      	adds	r0, r4, #0
10013a5e:	bd70      	pop	{r4, r5, r6, pc}

10013a60 <__sinit>:
10013a60:	6983      	ldr	r3, [r0, #24]
10013a62:	b513      	push	{r0, r1, r4, lr}
10013a64:	2b00      	cmp	r3, #0
10013a66:	d128      	bne.n	10013aba <__sinit+0x5a>
10013a68:	6483      	str	r3, [r0, #72]	; 0x48
10013a6a:	64c3      	str	r3, [r0, #76]	; 0x4c
10013a6c:	6503      	str	r3, [r0, #80]	; 0x50
10013a6e:	4b13      	ldr	r3, [pc, #76]	; (10013abc <__sinit+0x5c>)
10013a70:	4a13      	ldr	r2, [pc, #76]	; (10013ac0 <__sinit+0x60>)
10013a72:	681b      	ldr	r3, [r3, #0]
10013a74:	6282      	str	r2, [r0, #40]	; 0x28
10013a76:	9301      	str	r3, [sp, #4]
10013a78:	4298      	cmp	r0, r3
10013a7a:	d101      	bne.n	10013a80 <__sinit+0x20>
10013a7c:	2301      	movs	r3, #1
10013a7e:	6183      	str	r3, [r0, #24]
10013a80:	1c04      	adds	r4, r0, #0
10013a82:	f000 f81f 	bl	10013ac4 <__sfp>
10013a86:	6060      	str	r0, [r4, #4]
10013a88:	1c20      	adds	r0, r4, #0
10013a8a:	f000 f81b 	bl	10013ac4 <__sfp>
10013a8e:	60a0      	str	r0, [r4, #8]
10013a90:	1c20      	adds	r0, r4, #0
10013a92:	f000 f817 	bl	10013ac4 <__sfp>
10013a96:	2104      	movs	r1, #4
10013a98:	60e0      	str	r0, [r4, #12]
10013a9a:	2200      	movs	r2, #0
10013a9c:	6860      	ldr	r0, [r4, #4]
10013a9e:	f7ff ffa5 	bl	100139ec <std.isra.0>
10013aa2:	68a0      	ldr	r0, [r4, #8]
10013aa4:	2109      	movs	r1, #9
10013aa6:	2201      	movs	r2, #1
10013aa8:	f7ff ffa0 	bl	100139ec <std.isra.0>
10013aac:	68e0      	ldr	r0, [r4, #12]
10013aae:	2112      	movs	r1, #18
10013ab0:	2202      	movs	r2, #2
10013ab2:	f7ff ff9b 	bl	100139ec <std.isra.0>
10013ab6:	2301      	movs	r3, #1
10013ab8:	61a3      	str	r3, [r4, #24]
10013aba:	bd13      	pop	{r0, r1, r4, pc}
10013abc:	10016098 	.word	0x10016098
10013ac0:	100139dd 	.word	0x100139dd

10013ac4 <__sfp>:
10013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013ac6:	4b1d      	ldr	r3, [pc, #116]	; (10013b3c <__sfp+0x78>)
10013ac8:	1c06      	adds	r6, r0, #0
10013aca:	681d      	ldr	r5, [r3, #0]
10013acc:	69ab      	ldr	r3, [r5, #24]
10013ace:	2b00      	cmp	r3, #0
10013ad0:	d102      	bne.n	10013ad8 <__sfp+0x14>
10013ad2:	1c28      	adds	r0, r5, #0
10013ad4:	f7ff ffc4 	bl	10013a60 <__sinit>
10013ad8:	3548      	adds	r5, #72	; 0x48
10013ada:	68ac      	ldr	r4, [r5, #8]
10013adc:	686b      	ldr	r3, [r5, #4]
10013ade:	3b01      	subs	r3, #1
10013ae0:	d405      	bmi.n	10013aee <__sfp+0x2a>
10013ae2:	220c      	movs	r2, #12
10013ae4:	5ea7      	ldrsh	r7, [r4, r2]
10013ae6:	2f00      	cmp	r7, #0
10013ae8:	d010      	beq.n	10013b0c <__sfp+0x48>
10013aea:	3468      	adds	r4, #104	; 0x68
10013aec:	e7f7      	b.n	10013ade <__sfp+0x1a>
10013aee:	682b      	ldr	r3, [r5, #0]
10013af0:	2b00      	cmp	r3, #0
10013af2:	d106      	bne.n	10013b02 <__sfp+0x3e>
10013af4:	1c30      	adds	r0, r6, #0
10013af6:	2104      	movs	r1, #4
10013af8:	f7ff ff9c 	bl	10013a34 <__sfmoreglue>
10013afc:	6028      	str	r0, [r5, #0]
10013afe:	2800      	cmp	r0, #0
10013b00:	d001      	beq.n	10013b06 <__sfp+0x42>
10013b02:	682d      	ldr	r5, [r5, #0]
10013b04:	e7e9      	b.n	10013ada <__sfp+0x16>
10013b06:	230c      	movs	r3, #12
10013b08:	6033      	str	r3, [r6, #0]
10013b0a:	e016      	b.n	10013b3a <__sfp+0x76>
10013b0c:	2301      	movs	r3, #1
10013b0e:	1c20      	adds	r0, r4, #0
10013b10:	425b      	negs	r3, r3
10013b12:	81e3      	strh	r3, [r4, #14]
10013b14:	3302      	adds	r3, #2
10013b16:	81a3      	strh	r3, [r4, #12]
10013b18:	6667      	str	r7, [r4, #100]	; 0x64
10013b1a:	6027      	str	r7, [r4, #0]
10013b1c:	60a7      	str	r7, [r4, #8]
10013b1e:	6067      	str	r7, [r4, #4]
10013b20:	6127      	str	r7, [r4, #16]
10013b22:	6167      	str	r7, [r4, #20]
10013b24:	61a7      	str	r7, [r4, #24]
10013b26:	305c      	adds	r0, #92	; 0x5c
10013b28:	1c39      	adds	r1, r7, #0
10013b2a:	2208      	movs	r2, #8
10013b2c:	f7ff fc5e 	bl	100133ec <memset>
10013b30:	1c20      	adds	r0, r4, #0
10013b32:	6367      	str	r7, [r4, #52]	; 0x34
10013b34:	63a7      	str	r7, [r4, #56]	; 0x38
10013b36:	64a7      	str	r7, [r4, #72]	; 0x48
10013b38:	64e7      	str	r7, [r4, #76]	; 0x4c
10013b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013b3c:	10016098 	.word	0x10016098

10013b40 <_fwalk_reent>:
10013b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013b42:	1c04      	adds	r4, r0, #0
10013b44:	1c07      	adds	r7, r0, #0
10013b46:	2600      	movs	r6, #0
10013b48:	9101      	str	r1, [sp, #4]
10013b4a:	3448      	adds	r4, #72	; 0x48
10013b4c:	2c00      	cmp	r4, #0
10013b4e:	d016      	beq.n	10013b7e <_fwalk_reent+0x3e>
10013b50:	6863      	ldr	r3, [r4, #4]
10013b52:	68a5      	ldr	r5, [r4, #8]
10013b54:	9300      	str	r3, [sp, #0]
10013b56:	9b00      	ldr	r3, [sp, #0]
10013b58:	3b01      	subs	r3, #1
10013b5a:	9300      	str	r3, [sp, #0]
10013b5c:	d40d      	bmi.n	10013b7a <_fwalk_reent+0x3a>
10013b5e:	89ab      	ldrh	r3, [r5, #12]
10013b60:	2b01      	cmp	r3, #1
10013b62:	d908      	bls.n	10013b76 <_fwalk_reent+0x36>
10013b64:	220e      	movs	r2, #14
10013b66:	5eab      	ldrsh	r3, [r5, r2]
10013b68:	3301      	adds	r3, #1
10013b6a:	d004      	beq.n	10013b76 <_fwalk_reent+0x36>
10013b6c:	1c38      	adds	r0, r7, #0
10013b6e:	1c29      	adds	r1, r5, #0
10013b70:	9b01      	ldr	r3, [sp, #4]
10013b72:	4798      	blx	r3
10013b74:	4306      	orrs	r6, r0
10013b76:	3568      	adds	r5, #104	; 0x68
10013b78:	e7ed      	b.n	10013b56 <_fwalk_reent+0x16>
10013b7a:	6824      	ldr	r4, [r4, #0]
10013b7c:	e7e6      	b.n	10013b4c <_fwalk_reent+0xc>
10013b7e:	1c30      	adds	r0, r6, #0
10013b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10013b84 <__smakebuf_r>:
10013b84:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b86:	898b      	ldrh	r3, [r1, #12]
10013b88:	b091      	sub	sp, #68	; 0x44
10013b8a:	079b      	lsls	r3, r3, #30
10013b8c:	d506      	bpl.n	10013b9c <__smakebuf_r+0x18>
10013b8e:	1c0b      	adds	r3, r1, #0
10013b90:	3347      	adds	r3, #71	; 0x47
10013b92:	600b      	str	r3, [r1, #0]
10013b94:	610b      	str	r3, [r1, #16]
10013b96:	2301      	movs	r3, #1
10013b98:	614b      	str	r3, [r1, #20]
10013b9a:	e045      	b.n	10013c28 <__smakebuf_r+0xa4>
10013b9c:	1c0c      	adds	r4, r1, #0
10013b9e:	230e      	movs	r3, #14
10013ba0:	5ec9      	ldrsh	r1, [r1, r3]
10013ba2:	1c06      	adds	r6, r0, #0
10013ba4:	2900      	cmp	r1, #0
10013ba6:	da04      	bge.n	10013bb2 <__smakebuf_r+0x2e>
10013ba8:	2380      	movs	r3, #128	; 0x80
10013baa:	89a5      	ldrh	r5, [r4, #12]
10013bac:	401d      	ands	r5, r3
10013bae:	d110      	bne.n	10013bd2 <__smakebuf_r+0x4e>
10013bb0:	e00c      	b.n	10013bcc <__smakebuf_r+0x48>
10013bb2:	aa01      	add	r2, sp, #4
10013bb4:	f000 fc64 	bl	10014480 <_fstat_r>
10013bb8:	2800      	cmp	r0, #0
10013bba:	dbf5      	blt.n	10013ba8 <__smakebuf_r+0x24>
10013bbc:	23f0      	movs	r3, #240	; 0xf0
10013bbe:	9d02      	ldr	r5, [sp, #8]
10013bc0:	021b      	lsls	r3, r3, #8
10013bc2:	401d      	ands	r5, r3
10013bc4:	4b19      	ldr	r3, [pc, #100]	; (10013c2c <__smakebuf_r+0xa8>)
10013bc6:	18ed      	adds	r5, r5, r3
10013bc8:	426b      	negs	r3, r5
10013bca:	415d      	adcs	r5, r3
10013bcc:	2780      	movs	r7, #128	; 0x80
10013bce:	00ff      	lsls	r7, r7, #3
10013bd0:	e001      	b.n	10013bd6 <__smakebuf_r+0x52>
10013bd2:	2500      	movs	r5, #0
10013bd4:	2740      	movs	r7, #64	; 0x40
10013bd6:	1c30      	adds	r0, r6, #0
10013bd8:	1c39      	adds	r1, r7, #0
10013bda:	f000 f87b 	bl	10013cd4 <_malloc_r>
10013bde:	2800      	cmp	r0, #0
10013be0:	d10c      	bne.n	10013bfc <__smakebuf_r+0x78>
10013be2:	89a3      	ldrh	r3, [r4, #12]
10013be4:	059a      	lsls	r2, r3, #22
10013be6:	d41f      	bmi.n	10013c28 <__smakebuf_r+0xa4>
10013be8:	2202      	movs	r2, #2
10013bea:	4313      	orrs	r3, r2
10013bec:	81a3      	strh	r3, [r4, #12]
10013bee:	1c23      	adds	r3, r4, #0
10013bf0:	3347      	adds	r3, #71	; 0x47
10013bf2:	6023      	str	r3, [r4, #0]
10013bf4:	6123      	str	r3, [r4, #16]
10013bf6:	2301      	movs	r3, #1
10013bf8:	6163      	str	r3, [r4, #20]
10013bfa:	e015      	b.n	10013c28 <__smakebuf_r+0xa4>
10013bfc:	2280      	movs	r2, #128	; 0x80
10013bfe:	4b0c      	ldr	r3, [pc, #48]	; (10013c30 <__smakebuf_r+0xac>)
10013c00:	62b3      	str	r3, [r6, #40]	; 0x28
10013c02:	89a3      	ldrh	r3, [r4, #12]
10013c04:	6020      	str	r0, [r4, #0]
10013c06:	4313      	orrs	r3, r2
10013c08:	81a3      	strh	r3, [r4, #12]
10013c0a:	6120      	str	r0, [r4, #16]
10013c0c:	6167      	str	r7, [r4, #20]
10013c0e:	2d00      	cmp	r5, #0
10013c10:	d00a      	beq.n	10013c28 <__smakebuf_r+0xa4>
10013c12:	230e      	movs	r3, #14
10013c14:	5ee1      	ldrsh	r1, [r4, r3]
10013c16:	1c30      	adds	r0, r6, #0
10013c18:	f000 fc44 	bl	100144a4 <_isatty_r>
10013c1c:	2800      	cmp	r0, #0
10013c1e:	d003      	beq.n	10013c28 <__smakebuf_r+0xa4>
10013c20:	2201      	movs	r2, #1
10013c22:	89a3      	ldrh	r3, [r4, #12]
10013c24:	4313      	orrs	r3, r2
10013c26:	81a3      	strh	r3, [r4, #12]
10013c28:	b011      	add	sp, #68	; 0x44
10013c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c2c:	ffffe000 	.word	0xffffe000
10013c30:	100139dd 	.word	0x100139dd

10013c34 <malloc>:
10013c34:	b508      	push	{r3, lr}
10013c36:	4b03      	ldr	r3, [pc, #12]	; (10013c44 <malloc+0x10>)
10013c38:	1c01      	adds	r1, r0, #0
10013c3a:	6818      	ldr	r0, [r3, #0]
10013c3c:	f000 f84a 	bl	10013cd4 <_malloc_r>
10013c40:	bd08      	pop	{r3, pc}
10013c42:	46c0      	nop			; (mov r8, r8)
10013c44:	100161c0 	.word	0x100161c0

10013c48 <_free_r>:
10013c48:	b530      	push	{r4, r5, lr}
10013c4a:	2900      	cmp	r1, #0
10013c4c:	d03e      	beq.n	10013ccc <_free_r+0x84>
10013c4e:	3904      	subs	r1, #4
10013c50:	680b      	ldr	r3, [r1, #0]
10013c52:	2b00      	cmp	r3, #0
10013c54:	da00      	bge.n	10013c58 <_free_r+0x10>
10013c56:	18c9      	adds	r1, r1, r3
10013c58:	4a1d      	ldr	r2, [pc, #116]	; (10013cd0 <_free_r+0x88>)
10013c5a:	6813      	ldr	r3, [r2, #0]
10013c5c:	1c14      	adds	r4, r2, #0
10013c5e:	2b00      	cmp	r3, #0
10013c60:	d102      	bne.n	10013c68 <_free_r+0x20>
10013c62:	604b      	str	r3, [r1, #4]
10013c64:	6011      	str	r1, [r2, #0]
10013c66:	e031      	b.n	10013ccc <_free_r+0x84>
10013c68:	4299      	cmp	r1, r3
10013c6a:	d20d      	bcs.n	10013c88 <_free_r+0x40>
10013c6c:	6808      	ldr	r0, [r1, #0]
10013c6e:	180a      	adds	r2, r1, r0
10013c70:	429a      	cmp	r2, r3
10013c72:	d103      	bne.n	10013c7c <_free_r+0x34>
10013c74:	6813      	ldr	r3, [r2, #0]
10013c76:	18c3      	adds	r3, r0, r3
10013c78:	600b      	str	r3, [r1, #0]
10013c7a:	6853      	ldr	r3, [r2, #4]
10013c7c:	604b      	str	r3, [r1, #4]
10013c7e:	6021      	str	r1, [r4, #0]
10013c80:	e024      	b.n	10013ccc <_free_r+0x84>
10013c82:	428a      	cmp	r2, r1
10013c84:	d803      	bhi.n	10013c8e <_free_r+0x46>
10013c86:	1c13      	adds	r3, r2, #0
10013c88:	685a      	ldr	r2, [r3, #4]
10013c8a:	2a00      	cmp	r2, #0
10013c8c:	d1f9      	bne.n	10013c82 <_free_r+0x3a>
10013c8e:	681d      	ldr	r5, [r3, #0]
10013c90:	195c      	adds	r4, r3, r5
10013c92:	428c      	cmp	r4, r1
10013c94:	d10b      	bne.n	10013cae <_free_r+0x66>
10013c96:	6809      	ldr	r1, [r1, #0]
10013c98:	1869      	adds	r1, r5, r1
10013c9a:	1858      	adds	r0, r3, r1
10013c9c:	6019      	str	r1, [r3, #0]
10013c9e:	4290      	cmp	r0, r2
10013ca0:	d114      	bne.n	10013ccc <_free_r+0x84>
10013ca2:	6810      	ldr	r0, [r2, #0]
10013ca4:	6852      	ldr	r2, [r2, #4]
10013ca6:	1809      	adds	r1, r1, r0
10013ca8:	6019      	str	r1, [r3, #0]
10013caa:	605a      	str	r2, [r3, #4]
10013cac:	e00e      	b.n	10013ccc <_free_r+0x84>
10013cae:	428c      	cmp	r4, r1
10013cb0:	d902      	bls.n	10013cb8 <_free_r+0x70>
10013cb2:	230c      	movs	r3, #12
10013cb4:	6003      	str	r3, [r0, #0]
10013cb6:	e009      	b.n	10013ccc <_free_r+0x84>
10013cb8:	6808      	ldr	r0, [r1, #0]
10013cba:	180c      	adds	r4, r1, r0
10013cbc:	4294      	cmp	r4, r2
10013cbe:	d103      	bne.n	10013cc8 <_free_r+0x80>
10013cc0:	6814      	ldr	r4, [r2, #0]
10013cc2:	6852      	ldr	r2, [r2, #4]
10013cc4:	1900      	adds	r0, r0, r4
10013cc6:	6008      	str	r0, [r1, #0]
10013cc8:	604a      	str	r2, [r1, #4]
10013cca:	6059      	str	r1, [r3, #4]
10013ccc:	bd30      	pop	{r4, r5, pc}
10013cce:	46c0      	nop			; (mov r8, r8)
10013cd0:	10016904 	.word	0x10016904

10013cd4 <_malloc_r>:
10013cd4:	2303      	movs	r3, #3
10013cd6:	b570      	push	{r4, r5, r6, lr}
10013cd8:	1ccc      	adds	r4, r1, #3
10013cda:	439c      	bics	r4, r3
10013cdc:	3408      	adds	r4, #8
10013cde:	1c05      	adds	r5, r0, #0
10013ce0:	2c0c      	cmp	r4, #12
10013ce2:	d201      	bcs.n	10013ce8 <_malloc_r+0x14>
10013ce4:	240c      	movs	r4, #12
10013ce6:	e005      	b.n	10013cf4 <_malloc_r+0x20>
10013ce8:	2c00      	cmp	r4, #0
10013cea:	da03      	bge.n	10013cf4 <_malloc_r+0x20>
10013cec:	230c      	movs	r3, #12
10013cee:	2000      	movs	r0, #0
10013cf0:	602b      	str	r3, [r5, #0]
10013cf2:	e042      	b.n	10013d7a <_malloc_r+0xa6>
10013cf4:	428c      	cmp	r4, r1
10013cf6:	d3f9      	bcc.n	10013cec <_malloc_r+0x18>
10013cf8:	4a20      	ldr	r2, [pc, #128]	; (10013d7c <_malloc_r+0xa8>)
10013cfa:	6813      	ldr	r3, [r2, #0]
10013cfc:	1c10      	adds	r0, r2, #0
10013cfe:	1c19      	adds	r1, r3, #0
10013d00:	2900      	cmp	r1, #0
10013d02:	d013      	beq.n	10013d2c <_malloc_r+0x58>
10013d04:	680a      	ldr	r2, [r1, #0]
10013d06:	1b12      	subs	r2, r2, r4
10013d08:	d40d      	bmi.n	10013d26 <_malloc_r+0x52>
10013d0a:	2a0b      	cmp	r2, #11
10013d0c:	d902      	bls.n	10013d14 <_malloc_r+0x40>
10013d0e:	600a      	str	r2, [r1, #0]
10013d10:	188b      	adds	r3, r1, r2
10013d12:	e01f      	b.n	10013d54 <_malloc_r+0x80>
10013d14:	428b      	cmp	r3, r1
10013d16:	d102      	bne.n	10013d1e <_malloc_r+0x4a>
10013d18:	685a      	ldr	r2, [r3, #4]
10013d1a:	6002      	str	r2, [r0, #0]
10013d1c:	e01b      	b.n	10013d56 <_malloc_r+0x82>
10013d1e:	684a      	ldr	r2, [r1, #4]
10013d20:	605a      	str	r2, [r3, #4]
10013d22:	1c0b      	adds	r3, r1, #0
10013d24:	e017      	b.n	10013d56 <_malloc_r+0x82>
10013d26:	1c0b      	adds	r3, r1, #0
10013d28:	6849      	ldr	r1, [r1, #4]
10013d2a:	e7e9      	b.n	10013d00 <_malloc_r+0x2c>
10013d2c:	4e14      	ldr	r6, [pc, #80]	; (10013d80 <_malloc_r+0xac>)
10013d2e:	6833      	ldr	r3, [r6, #0]
10013d30:	2b00      	cmp	r3, #0
10013d32:	d103      	bne.n	10013d3c <_malloc_r+0x68>
10013d34:	1c28      	adds	r0, r5, #0
10013d36:	f000 fb1f 	bl	10014378 <_sbrk_r>
10013d3a:	6030      	str	r0, [r6, #0]
10013d3c:	1c28      	adds	r0, r5, #0
10013d3e:	1c21      	adds	r1, r4, #0
10013d40:	f000 fb1a 	bl	10014378 <_sbrk_r>
10013d44:	1c03      	adds	r3, r0, #0
10013d46:	1c42      	adds	r2, r0, #1
10013d48:	d0d0      	beq.n	10013cec <_malloc_r+0x18>
10013d4a:	2203      	movs	r2, #3
10013d4c:	1cc6      	adds	r6, r0, #3
10013d4e:	4396      	bics	r6, r2
10013d50:	4286      	cmp	r6, r0
10013d52:	d10a      	bne.n	10013d6a <_malloc_r+0x96>
10013d54:	601c      	str	r4, [r3, #0]
10013d56:	1c18      	adds	r0, r3, #0
10013d58:	2107      	movs	r1, #7
10013d5a:	300b      	adds	r0, #11
10013d5c:	1d1a      	adds	r2, r3, #4
10013d5e:	4388      	bics	r0, r1
10013d60:	1a82      	subs	r2, r0, r2
10013d62:	d00a      	beq.n	10013d7a <_malloc_r+0xa6>
10013d64:	4251      	negs	r1, r2
10013d66:	5099      	str	r1, [r3, r2]
10013d68:	e007      	b.n	10013d7a <_malloc_r+0xa6>
10013d6a:	1a31      	subs	r1, r6, r0
10013d6c:	1c28      	adds	r0, r5, #0
10013d6e:	f000 fb03 	bl	10014378 <_sbrk_r>
10013d72:	1c43      	adds	r3, r0, #1
10013d74:	d0ba      	beq.n	10013cec <_malloc_r+0x18>
10013d76:	1c33      	adds	r3, r6, #0
10013d78:	e7ec      	b.n	10013d54 <_malloc_r+0x80>
10013d7a:	bd70      	pop	{r4, r5, r6, pc}
10013d7c:	10016904 	.word	0x10016904
10013d80:	10016900 	.word	0x10016900

10013d84 <__sfputc_r>:
10013d84:	6893      	ldr	r3, [r2, #8]
10013d86:	b510      	push	{r4, lr}
10013d88:	3b01      	subs	r3, #1
10013d8a:	6093      	str	r3, [r2, #8]
10013d8c:	2b00      	cmp	r3, #0
10013d8e:	da05      	bge.n	10013d9c <__sfputc_r+0x18>
10013d90:	6994      	ldr	r4, [r2, #24]
10013d92:	42a3      	cmp	r3, r4
10013d94:	db08      	blt.n	10013da8 <__sfputc_r+0x24>
10013d96:	b2cb      	uxtb	r3, r1
10013d98:	2b0a      	cmp	r3, #10
10013d9a:	d005      	beq.n	10013da8 <__sfputc_r+0x24>
10013d9c:	6813      	ldr	r3, [r2, #0]
10013d9e:	1c58      	adds	r0, r3, #1
10013da0:	6010      	str	r0, [r2, #0]
10013da2:	7019      	strb	r1, [r3, #0]
10013da4:	b2c8      	uxtb	r0, r1
10013da6:	e001      	b.n	10013dac <__sfputc_r+0x28>
10013da8:	f7ff fc96 	bl	100136d8 <__swbuf_r>
10013dac:	bd10      	pop	{r4, pc}

10013dae <__sfputs_r>:
10013dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013db0:	1c06      	adds	r6, r0, #0
10013db2:	1c0f      	adds	r7, r1, #0
10013db4:	1c14      	adds	r4, r2, #0
10013db6:	18d5      	adds	r5, r2, r3
10013db8:	42ac      	cmp	r4, r5
10013dba:	d008      	beq.n	10013dce <__sfputs_r+0x20>
10013dbc:	7821      	ldrb	r1, [r4, #0]
10013dbe:	1c30      	adds	r0, r6, #0
10013dc0:	1c3a      	adds	r2, r7, #0
10013dc2:	f7ff ffdf 	bl	10013d84 <__sfputc_r>
10013dc6:	3401      	adds	r4, #1
10013dc8:	1c43      	adds	r3, r0, #1
10013dca:	d1f5      	bne.n	10013db8 <__sfputs_r+0xa>
10013dcc:	e000      	b.n	10013dd0 <__sfputs_r+0x22>
10013dce:	2000      	movs	r0, #0
10013dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10013dd4 <_vfiprintf_r>:
10013dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10013dd6:	b09f      	sub	sp, #124	; 0x7c
10013dd8:	1c06      	adds	r6, r0, #0
10013dda:	1c0f      	adds	r7, r1, #0
10013ddc:	9202      	str	r2, [sp, #8]
10013dde:	9305      	str	r3, [sp, #20]
10013de0:	2800      	cmp	r0, #0
10013de2:	d004      	beq.n	10013dee <_vfiprintf_r+0x1a>
10013de4:	6983      	ldr	r3, [r0, #24]
10013de6:	2b00      	cmp	r3, #0
10013de8:	d101      	bne.n	10013dee <_vfiprintf_r+0x1a>
10013dea:	f7ff fe39 	bl	10013a60 <__sinit>
10013dee:	4b79      	ldr	r3, [pc, #484]	; (10013fd4 <_vfiprintf_r+0x200>)
10013df0:	429f      	cmp	r7, r3
10013df2:	d101      	bne.n	10013df8 <_vfiprintf_r+0x24>
10013df4:	6877      	ldr	r7, [r6, #4]
10013df6:	e008      	b.n	10013e0a <_vfiprintf_r+0x36>
10013df8:	4b77      	ldr	r3, [pc, #476]	; (10013fd8 <_vfiprintf_r+0x204>)
10013dfa:	429f      	cmp	r7, r3
10013dfc:	d101      	bne.n	10013e02 <_vfiprintf_r+0x2e>
10013dfe:	68b7      	ldr	r7, [r6, #8]
10013e00:	e003      	b.n	10013e0a <_vfiprintf_r+0x36>
10013e02:	4b76      	ldr	r3, [pc, #472]	; (10013fdc <_vfiprintf_r+0x208>)
10013e04:	429f      	cmp	r7, r3
10013e06:	d100      	bne.n	10013e0a <_vfiprintf_r+0x36>
10013e08:	68f7      	ldr	r7, [r6, #12]
10013e0a:	89bb      	ldrh	r3, [r7, #12]
10013e0c:	071b      	lsls	r3, r3, #28
10013e0e:	d50a      	bpl.n	10013e26 <_vfiprintf_r+0x52>
10013e10:	693b      	ldr	r3, [r7, #16]
10013e12:	2b00      	cmp	r3, #0
10013e14:	d007      	beq.n	10013e26 <_vfiprintf_r+0x52>
10013e16:	2300      	movs	r3, #0
10013e18:	ad06      	add	r5, sp, #24
10013e1a:	616b      	str	r3, [r5, #20]
10013e1c:	3320      	adds	r3, #32
10013e1e:	766b      	strb	r3, [r5, #25]
10013e20:	3310      	adds	r3, #16
10013e22:	76ab      	strb	r3, [r5, #26]
10013e24:	e03d      	b.n	10013ea2 <_vfiprintf_r+0xce>
10013e26:	1c30      	adds	r0, r6, #0
10013e28:	1c39      	adds	r1, r7, #0
10013e2a:	f7ff fcad 	bl	10013788 <__swsetup_r>
10013e2e:	2800      	cmp	r0, #0
10013e30:	d0f1      	beq.n	10013e16 <_vfiprintf_r+0x42>
10013e32:	2001      	movs	r0, #1
10013e34:	4240      	negs	r0, r0
10013e36:	e0ca      	b.n	10013fce <_vfiprintf_r+0x1fa>
10013e38:	9a05      	ldr	r2, [sp, #20]
10013e3a:	1d11      	adds	r1, r2, #4
10013e3c:	6812      	ldr	r2, [r2, #0]
10013e3e:	9105      	str	r1, [sp, #20]
10013e40:	2a00      	cmp	r2, #0
10013e42:	db7e      	blt.n	10013f42 <_vfiprintf_r+0x16e>
10013e44:	9209      	str	r2, [sp, #36]	; 0x24
10013e46:	3401      	adds	r4, #1
10013e48:	7823      	ldrb	r3, [r4, #0]
10013e4a:	2b2e      	cmp	r3, #46	; 0x2e
10013e4c:	d100      	bne.n	10013e50 <_vfiprintf_r+0x7c>
10013e4e:	e089      	b.n	10013f64 <_vfiprintf_r+0x190>
10013e50:	7821      	ldrb	r1, [r4, #0]
10013e52:	4863      	ldr	r0, [pc, #396]	; (10013fe0 <_vfiprintf_r+0x20c>)
10013e54:	2203      	movs	r2, #3
10013e56:	f000 fb4b 	bl	100144f0 <memchr>
10013e5a:	2800      	cmp	r0, #0
10013e5c:	d008      	beq.n	10013e70 <_vfiprintf_r+0x9c>
10013e5e:	4b60      	ldr	r3, [pc, #384]	; (10013fe0 <_vfiprintf_r+0x20c>)
10013e60:	3401      	adds	r4, #1
10013e62:	1ac0      	subs	r0, r0, r3
10013e64:	2340      	movs	r3, #64	; 0x40
10013e66:	4083      	lsls	r3, r0
10013e68:	1c18      	adds	r0, r3, #0
10013e6a:	682b      	ldr	r3, [r5, #0]
10013e6c:	4318      	orrs	r0, r3
10013e6e:	6028      	str	r0, [r5, #0]
10013e70:	7821      	ldrb	r1, [r4, #0]
10013e72:	1c63      	adds	r3, r4, #1
10013e74:	485b      	ldr	r0, [pc, #364]	; (10013fe4 <_vfiprintf_r+0x210>)
10013e76:	2206      	movs	r2, #6
10013e78:	9302      	str	r3, [sp, #8]
10013e7a:	7629      	strb	r1, [r5, #24]
10013e7c:	f000 fb38 	bl	100144f0 <memchr>
10013e80:	2800      	cmp	r0, #0
10013e82:	d100      	bne.n	10013e86 <_vfiprintf_r+0xb2>
10013e84:	e091      	b.n	10013faa <_vfiprintf_r+0x1d6>
10013e86:	4b58      	ldr	r3, [pc, #352]	; (10013fe8 <_vfiprintf_r+0x214>)
10013e88:	2b00      	cmp	r3, #0
10013e8a:	d000      	beq.n	10013e8e <_vfiprintf_r+0xba>
10013e8c:	e084      	b.n	10013f98 <_vfiprintf_r+0x1c4>
10013e8e:	2207      	movs	r2, #7
10013e90:	9b05      	ldr	r3, [sp, #20]
10013e92:	3307      	adds	r3, #7
10013e94:	4393      	bics	r3, r2
10013e96:	3308      	adds	r3, #8
10013e98:	9305      	str	r3, [sp, #20]
10013e9a:	696b      	ldr	r3, [r5, #20]
10013e9c:	9a03      	ldr	r2, [sp, #12]
10013e9e:	189b      	adds	r3, r3, r2
10013ea0:	616b      	str	r3, [r5, #20]
10013ea2:	9c02      	ldr	r4, [sp, #8]
10013ea4:	7823      	ldrb	r3, [r4, #0]
10013ea6:	2b00      	cmp	r3, #0
10013ea8:	d104      	bne.n	10013eb4 <_vfiprintf_r+0xe0>
10013eaa:	9b02      	ldr	r3, [sp, #8]
10013eac:	1ae3      	subs	r3, r4, r3
10013eae:	9304      	str	r3, [sp, #16]
10013eb0:	d011      	beq.n	10013ed6 <_vfiprintf_r+0x102>
10013eb2:	e003      	b.n	10013ebc <_vfiprintf_r+0xe8>
10013eb4:	2b25      	cmp	r3, #37	; 0x25
10013eb6:	d0f8      	beq.n	10013eaa <_vfiprintf_r+0xd6>
10013eb8:	3401      	adds	r4, #1
10013eba:	e7f3      	b.n	10013ea4 <_vfiprintf_r+0xd0>
10013ebc:	9b04      	ldr	r3, [sp, #16]
10013ebe:	1c30      	adds	r0, r6, #0
10013ec0:	1c39      	adds	r1, r7, #0
10013ec2:	9a02      	ldr	r2, [sp, #8]
10013ec4:	f7ff ff73 	bl	10013dae <__sfputs_r>
10013ec8:	1c43      	adds	r3, r0, #1
10013eca:	d07b      	beq.n	10013fc4 <_vfiprintf_r+0x1f0>
10013ecc:	696a      	ldr	r2, [r5, #20]
10013ece:	9b04      	ldr	r3, [sp, #16]
10013ed0:	4694      	mov	ip, r2
10013ed2:	4463      	add	r3, ip
10013ed4:	616b      	str	r3, [r5, #20]
10013ed6:	7823      	ldrb	r3, [r4, #0]
10013ed8:	2b00      	cmp	r3, #0
10013eda:	d073      	beq.n	10013fc4 <_vfiprintf_r+0x1f0>
10013edc:	2201      	movs	r2, #1
10013ede:	2300      	movs	r3, #0
10013ee0:	4252      	negs	r2, r2
10013ee2:	606a      	str	r2, [r5, #4]
10013ee4:	a902      	add	r1, sp, #8
10013ee6:	3254      	adds	r2, #84	; 0x54
10013ee8:	1852      	adds	r2, r2, r1
10013eea:	3401      	adds	r4, #1
10013eec:	602b      	str	r3, [r5, #0]
10013eee:	60eb      	str	r3, [r5, #12]
10013ef0:	60ab      	str	r3, [r5, #8]
10013ef2:	7013      	strb	r3, [r2, #0]
10013ef4:	65ab      	str	r3, [r5, #88]	; 0x58
10013ef6:	7821      	ldrb	r1, [r4, #0]
10013ef8:	483c      	ldr	r0, [pc, #240]	; (10013fec <_vfiprintf_r+0x218>)
10013efa:	2205      	movs	r2, #5
10013efc:	f000 faf8 	bl	100144f0 <memchr>
10013f00:	2800      	cmp	r0, #0
10013f02:	d009      	beq.n	10013f18 <_vfiprintf_r+0x144>
10013f04:	4b39      	ldr	r3, [pc, #228]	; (10013fec <_vfiprintf_r+0x218>)
10013f06:	3401      	adds	r4, #1
10013f08:	1ac0      	subs	r0, r0, r3
10013f0a:	2301      	movs	r3, #1
10013f0c:	4083      	lsls	r3, r0
10013f0e:	1c18      	adds	r0, r3, #0
10013f10:	682b      	ldr	r3, [r5, #0]
10013f12:	4318      	orrs	r0, r3
10013f14:	6028      	str	r0, [r5, #0]
10013f16:	e7ee      	b.n	10013ef6 <_vfiprintf_r+0x122>
10013f18:	682b      	ldr	r3, [r5, #0]
10013f1a:	06da      	lsls	r2, r3, #27
10013f1c:	d504      	bpl.n	10013f28 <_vfiprintf_r+0x154>
10013f1e:	2253      	movs	r2, #83	; 0x53
10013f20:	2120      	movs	r1, #32
10013f22:	a802      	add	r0, sp, #8
10013f24:	1812      	adds	r2, r2, r0
10013f26:	7011      	strb	r1, [r2, #0]
10013f28:	071a      	lsls	r2, r3, #28
10013f2a:	d504      	bpl.n	10013f36 <_vfiprintf_r+0x162>
10013f2c:	2253      	movs	r2, #83	; 0x53
10013f2e:	212b      	movs	r1, #43	; 0x2b
10013f30:	a802      	add	r0, sp, #8
10013f32:	1812      	adds	r2, r2, r0
10013f34:	7011      	strb	r1, [r2, #0]
10013f36:	7822      	ldrb	r2, [r4, #0]
10013f38:	2a2a      	cmp	r2, #42	; 0x2a
10013f3a:	d100      	bne.n	10013f3e <_vfiprintf_r+0x16a>
10013f3c:	e77c      	b.n	10013e38 <_vfiprintf_r+0x64>
10013f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013f40:	e005      	b.n	10013f4e <_vfiprintf_r+0x17a>
10013f42:	4252      	negs	r2, r2
10013f44:	60ea      	str	r2, [r5, #12]
10013f46:	2202      	movs	r2, #2
10013f48:	4313      	orrs	r3, r2
10013f4a:	602b      	str	r3, [r5, #0]
10013f4c:	e77b      	b.n	10013e46 <_vfiprintf_r+0x72>
10013f4e:	7822      	ldrb	r2, [r4, #0]
10013f50:	3a30      	subs	r2, #48	; 0x30
10013f52:	2a09      	cmp	r2, #9
10013f54:	d804      	bhi.n	10013f60 <_vfiprintf_r+0x18c>
10013f56:	210a      	movs	r1, #10
10013f58:	434b      	muls	r3, r1
10013f5a:	3401      	adds	r4, #1
10013f5c:	189b      	adds	r3, r3, r2
10013f5e:	e7f6      	b.n	10013f4e <_vfiprintf_r+0x17a>
10013f60:	9309      	str	r3, [sp, #36]	; 0x24
10013f62:	e771      	b.n	10013e48 <_vfiprintf_r+0x74>
10013f64:	7863      	ldrb	r3, [r4, #1]
10013f66:	2b2a      	cmp	r3, #42	; 0x2a
10013f68:	d109      	bne.n	10013f7e <_vfiprintf_r+0x1aa>
10013f6a:	9b05      	ldr	r3, [sp, #20]
10013f6c:	3402      	adds	r4, #2
10013f6e:	1d1a      	adds	r2, r3, #4
10013f70:	681b      	ldr	r3, [r3, #0]
10013f72:	9205      	str	r2, [sp, #20]
10013f74:	2b00      	cmp	r3, #0
10013f76:	da0d      	bge.n	10013f94 <_vfiprintf_r+0x1c0>
10013f78:	2301      	movs	r3, #1
10013f7a:	425b      	negs	r3, r3
10013f7c:	e00a      	b.n	10013f94 <_vfiprintf_r+0x1c0>
10013f7e:	2300      	movs	r3, #0
10013f80:	3401      	adds	r4, #1
10013f82:	7822      	ldrb	r2, [r4, #0]
10013f84:	3a30      	subs	r2, #48	; 0x30
10013f86:	2a09      	cmp	r2, #9
10013f88:	d804      	bhi.n	10013f94 <_vfiprintf_r+0x1c0>
10013f8a:	210a      	movs	r1, #10
10013f8c:	434b      	muls	r3, r1
10013f8e:	3401      	adds	r4, #1
10013f90:	189b      	adds	r3, r3, r2
10013f92:	e7f6      	b.n	10013f82 <_vfiprintf_r+0x1ae>
10013f94:	9307      	str	r3, [sp, #28]
10013f96:	e75b      	b.n	10013e50 <_vfiprintf_r+0x7c>
10013f98:	ab05      	add	r3, sp, #20
10013f9a:	9300      	str	r3, [sp, #0]
10013f9c:	1c30      	adds	r0, r6, #0
10013f9e:	1c29      	adds	r1, r5, #0
10013fa0:	1c3a      	adds	r2, r7, #0
10013fa2:	4b13      	ldr	r3, [pc, #76]	; (10013ff0 <_vfiprintf_r+0x21c>)
10013fa4:	e000      	b.n	10013fa8 <_vfiprintf_r+0x1d4>
10013fa6:	bf00      	nop
10013fa8:	e007      	b.n	10013fba <_vfiprintf_r+0x1e6>
10013faa:	ab05      	add	r3, sp, #20
10013fac:	9300      	str	r3, [sp, #0]
10013fae:	1c30      	adds	r0, r6, #0
10013fb0:	1c29      	adds	r1, r5, #0
10013fb2:	1c3a      	adds	r2, r7, #0
10013fb4:	4b0e      	ldr	r3, [pc, #56]	; (10013ff0 <_vfiprintf_r+0x21c>)
10013fb6:	f000 f88b 	bl	100140d0 <_printf_i>
10013fba:	9003      	str	r0, [sp, #12]
10013fbc:	9b03      	ldr	r3, [sp, #12]
10013fbe:	3301      	adds	r3, #1
10013fc0:	d000      	beq.n	10013fc4 <_vfiprintf_r+0x1f0>
10013fc2:	e76a      	b.n	10013e9a <_vfiprintf_r+0xc6>
10013fc4:	89bb      	ldrh	r3, [r7, #12]
10013fc6:	065b      	lsls	r3, r3, #25
10013fc8:	d500      	bpl.n	10013fcc <_vfiprintf_r+0x1f8>
10013fca:	e732      	b.n	10013e32 <_vfiprintf_r+0x5e>
10013fcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
10013fce:	b01f      	add	sp, #124	; 0x7c
10013fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013fd2:	46c0      	nop			; (mov r8, r8)
10013fd4:	1001609c 	.word	0x1001609c
10013fd8:	100160bc 	.word	0x100160bc
10013fdc:	100160dc 	.word	0x100160dc
10013fe0:	10016102 	.word	0x10016102
10013fe4:	10016106 	.word	0x10016106
10013fe8:	00000000 	.word	0x00000000
10013fec:	100160fc 	.word	0x100160fc
10013ff0:	10013daf 	.word	0x10013daf

10013ff4 <_printf_common>:
10013ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013ff6:	1c17      	adds	r7, r2, #0
10013ff8:	9301      	str	r3, [sp, #4]
10013ffa:	690a      	ldr	r2, [r1, #16]
10013ffc:	688b      	ldr	r3, [r1, #8]
10013ffe:	9000      	str	r0, [sp, #0]
10014000:	1c0c      	adds	r4, r1, #0
10014002:	4293      	cmp	r3, r2
10014004:	da00      	bge.n	10014008 <_printf_common+0x14>
10014006:	1c13      	adds	r3, r2, #0
10014008:	1c22      	adds	r2, r4, #0
1001400a:	603b      	str	r3, [r7, #0]
1001400c:	3243      	adds	r2, #67	; 0x43
1001400e:	7812      	ldrb	r2, [r2, #0]
10014010:	2a00      	cmp	r2, #0
10014012:	d001      	beq.n	10014018 <_printf_common+0x24>
10014014:	3301      	adds	r3, #1
10014016:	603b      	str	r3, [r7, #0]
10014018:	6823      	ldr	r3, [r4, #0]
1001401a:	069b      	lsls	r3, r3, #26
1001401c:	d502      	bpl.n	10014024 <_printf_common+0x30>
1001401e:	683b      	ldr	r3, [r7, #0]
10014020:	3302      	adds	r3, #2
10014022:	603b      	str	r3, [r7, #0]
10014024:	2506      	movs	r5, #6
10014026:	6823      	ldr	r3, [r4, #0]
10014028:	401d      	ands	r5, r3
1001402a:	d01e      	beq.n	1001406a <_printf_common+0x76>
1001402c:	1c23      	adds	r3, r4, #0
1001402e:	3343      	adds	r3, #67	; 0x43
10014030:	781b      	ldrb	r3, [r3, #0]
10014032:	1e5a      	subs	r2, r3, #1
10014034:	4193      	sbcs	r3, r2
10014036:	6822      	ldr	r2, [r4, #0]
10014038:	0692      	lsls	r2, r2, #26
1001403a:	d51c      	bpl.n	10014076 <_printf_common+0x82>
1001403c:	2030      	movs	r0, #48	; 0x30
1001403e:	18e1      	adds	r1, r4, r3
10014040:	3140      	adds	r1, #64	; 0x40
10014042:	70c8      	strb	r0, [r1, #3]
10014044:	1c21      	adds	r1, r4, #0
10014046:	1c5a      	adds	r2, r3, #1
10014048:	3145      	adds	r1, #69	; 0x45
1001404a:	7809      	ldrb	r1, [r1, #0]
1001404c:	18a2      	adds	r2, r4, r2
1001404e:	3240      	adds	r2, #64	; 0x40
10014050:	3302      	adds	r3, #2
10014052:	70d1      	strb	r1, [r2, #3]
10014054:	e00f      	b.n	10014076 <_printf_common+0x82>
10014056:	1c22      	adds	r2, r4, #0
10014058:	2301      	movs	r3, #1
1001405a:	9800      	ldr	r0, [sp, #0]
1001405c:	9901      	ldr	r1, [sp, #4]
1001405e:	3219      	adds	r2, #25
10014060:	9e08      	ldr	r6, [sp, #32]
10014062:	47b0      	blx	r6
10014064:	1c43      	adds	r3, r0, #1
10014066:	d00e      	beq.n	10014086 <_printf_common+0x92>
10014068:	3501      	adds	r5, #1
1001406a:	68e3      	ldr	r3, [r4, #12]
1001406c:	683a      	ldr	r2, [r7, #0]
1001406e:	1a9b      	subs	r3, r3, r2
10014070:	429d      	cmp	r5, r3
10014072:	dbf0      	blt.n	10014056 <_printf_common+0x62>
10014074:	e7da      	b.n	1001402c <_printf_common+0x38>
10014076:	1c22      	adds	r2, r4, #0
10014078:	9800      	ldr	r0, [sp, #0]
1001407a:	9901      	ldr	r1, [sp, #4]
1001407c:	3243      	adds	r2, #67	; 0x43
1001407e:	9d08      	ldr	r5, [sp, #32]
10014080:	47a8      	blx	r5
10014082:	1c43      	adds	r3, r0, #1
10014084:	d102      	bne.n	1001408c <_printf_common+0x98>
10014086:	2001      	movs	r0, #1
10014088:	4240      	negs	r0, r0
1001408a:	e020      	b.n	100140ce <_printf_common+0xda>
1001408c:	2306      	movs	r3, #6
1001408e:	6820      	ldr	r0, [r4, #0]
10014090:	68e1      	ldr	r1, [r4, #12]
10014092:	683a      	ldr	r2, [r7, #0]
10014094:	4003      	ands	r3, r0
10014096:	2500      	movs	r5, #0
10014098:	2b04      	cmp	r3, #4
1001409a:	d103      	bne.n	100140a4 <_printf_common+0xb0>
1001409c:	1a8d      	subs	r5, r1, r2
1001409e:	43eb      	mvns	r3, r5
100140a0:	17db      	asrs	r3, r3, #31
100140a2:	401d      	ands	r5, r3
100140a4:	68a3      	ldr	r3, [r4, #8]
100140a6:	6922      	ldr	r2, [r4, #16]
100140a8:	4293      	cmp	r3, r2
100140aa:	dd01      	ble.n	100140b0 <_printf_common+0xbc>
100140ac:	1a9b      	subs	r3, r3, r2
100140ae:	18ed      	adds	r5, r5, r3
100140b0:	2700      	movs	r7, #0
100140b2:	42af      	cmp	r7, r5
100140b4:	da0a      	bge.n	100140cc <_printf_common+0xd8>
100140b6:	1c22      	adds	r2, r4, #0
100140b8:	2301      	movs	r3, #1
100140ba:	9800      	ldr	r0, [sp, #0]
100140bc:	9901      	ldr	r1, [sp, #4]
100140be:	321a      	adds	r2, #26
100140c0:	9e08      	ldr	r6, [sp, #32]
100140c2:	47b0      	blx	r6
100140c4:	1c43      	adds	r3, r0, #1
100140c6:	d0de      	beq.n	10014086 <_printf_common+0x92>
100140c8:	3701      	adds	r7, #1
100140ca:	e7f2      	b.n	100140b2 <_printf_common+0xbe>
100140cc:	2000      	movs	r0, #0
100140ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100140d0 <_printf_i>:
100140d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100140d2:	b08b      	sub	sp, #44	; 0x2c
100140d4:	9206      	str	r2, [sp, #24]
100140d6:	1c0a      	adds	r2, r1, #0
100140d8:	3243      	adds	r2, #67	; 0x43
100140da:	9307      	str	r3, [sp, #28]
100140dc:	9005      	str	r0, [sp, #20]
100140de:	9204      	str	r2, [sp, #16]
100140e0:	7e0a      	ldrb	r2, [r1, #24]
100140e2:	1c0c      	adds	r4, r1, #0
100140e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
100140e6:	2a6e      	cmp	r2, #110	; 0x6e
100140e8:	d100      	bne.n	100140ec <_printf_i+0x1c>
100140ea:	e0a8      	b.n	1001423e <_printf_i+0x16e>
100140ec:	d811      	bhi.n	10014112 <_printf_i+0x42>
100140ee:	2a63      	cmp	r2, #99	; 0x63
100140f0:	d022      	beq.n	10014138 <_printf_i+0x68>
100140f2:	d809      	bhi.n	10014108 <_printf_i+0x38>
100140f4:	2a00      	cmp	r2, #0
100140f6:	d100      	bne.n	100140fa <_printf_i+0x2a>
100140f8:	e0b2      	b.n	10014260 <_printf_i+0x190>
100140fa:	2a58      	cmp	r2, #88	; 0x58
100140fc:	d000      	beq.n	10014100 <_printf_i+0x30>
100140fe:	e0c2      	b.n	10014286 <_printf_i+0x1b6>
10014100:	3145      	adds	r1, #69	; 0x45
10014102:	700a      	strb	r2, [r1, #0]
10014104:	4a7c      	ldr	r2, [pc, #496]	; (100142f8 <_printf_i+0x228>)
10014106:	e04f      	b.n	100141a8 <_printf_i+0xd8>
10014108:	2a64      	cmp	r2, #100	; 0x64
1001410a:	d01d      	beq.n	10014148 <_printf_i+0x78>
1001410c:	2a69      	cmp	r2, #105	; 0x69
1001410e:	d01b      	beq.n	10014148 <_printf_i+0x78>
10014110:	e0b9      	b.n	10014286 <_printf_i+0x1b6>
10014112:	2a73      	cmp	r2, #115	; 0x73
10014114:	d100      	bne.n	10014118 <_printf_i+0x48>
10014116:	e0a7      	b.n	10014268 <_printf_i+0x198>
10014118:	d809      	bhi.n	1001412e <_printf_i+0x5e>
1001411a:	2a6f      	cmp	r2, #111	; 0x6f
1001411c:	d029      	beq.n	10014172 <_printf_i+0xa2>
1001411e:	2a70      	cmp	r2, #112	; 0x70
10014120:	d000      	beq.n	10014124 <_printf_i+0x54>
10014122:	e0b0      	b.n	10014286 <_printf_i+0x1b6>
10014124:	2220      	movs	r2, #32
10014126:	6809      	ldr	r1, [r1, #0]
10014128:	430a      	orrs	r2, r1
1001412a:	6022      	str	r2, [r4, #0]
1001412c:	e037      	b.n	1001419e <_printf_i+0xce>
1001412e:	2a75      	cmp	r2, #117	; 0x75
10014130:	d01f      	beq.n	10014172 <_printf_i+0xa2>
10014132:	2a78      	cmp	r2, #120	; 0x78
10014134:	d033      	beq.n	1001419e <_printf_i+0xce>
10014136:	e0a6      	b.n	10014286 <_printf_i+0x1b6>
10014138:	1c0e      	adds	r6, r1, #0
1001413a:	681a      	ldr	r2, [r3, #0]
1001413c:	3642      	adds	r6, #66	; 0x42
1001413e:	1d11      	adds	r1, r2, #4
10014140:	6019      	str	r1, [r3, #0]
10014142:	6813      	ldr	r3, [r2, #0]
10014144:	7033      	strb	r3, [r6, #0]
10014146:	e0a1      	b.n	1001428c <_printf_i+0x1bc>
10014148:	6821      	ldr	r1, [r4, #0]
1001414a:	681a      	ldr	r2, [r3, #0]
1001414c:	0608      	lsls	r0, r1, #24
1001414e:	d406      	bmi.n	1001415e <_printf_i+0x8e>
10014150:	0649      	lsls	r1, r1, #25
10014152:	d504      	bpl.n	1001415e <_printf_i+0x8e>
10014154:	1d11      	adds	r1, r2, #4
10014156:	6019      	str	r1, [r3, #0]
10014158:	2300      	movs	r3, #0
1001415a:	5ed5      	ldrsh	r5, [r2, r3]
1001415c:	e002      	b.n	10014164 <_printf_i+0x94>
1001415e:	1d11      	adds	r1, r2, #4
10014160:	6019      	str	r1, [r3, #0]
10014162:	6815      	ldr	r5, [r2, #0]
10014164:	2d00      	cmp	r5, #0
10014166:	da3b      	bge.n	100141e0 <_printf_i+0x110>
10014168:	232d      	movs	r3, #45	; 0x2d
1001416a:	9a04      	ldr	r2, [sp, #16]
1001416c:	426d      	negs	r5, r5
1001416e:	7013      	strb	r3, [r2, #0]
10014170:	e036      	b.n	100141e0 <_printf_i+0x110>
10014172:	6821      	ldr	r1, [r4, #0]
10014174:	681a      	ldr	r2, [r3, #0]
10014176:	0608      	lsls	r0, r1, #24
10014178:	d406      	bmi.n	10014188 <_printf_i+0xb8>
1001417a:	0649      	lsls	r1, r1, #25
1001417c:	d504      	bpl.n	10014188 <_printf_i+0xb8>
1001417e:	6815      	ldr	r5, [r2, #0]
10014180:	1d11      	adds	r1, r2, #4
10014182:	6019      	str	r1, [r3, #0]
10014184:	b2ad      	uxth	r5, r5
10014186:	e002      	b.n	1001418e <_printf_i+0xbe>
10014188:	1d11      	adds	r1, r2, #4
1001418a:	6019      	str	r1, [r3, #0]
1001418c:	6815      	ldr	r5, [r2, #0]
1001418e:	4b5a      	ldr	r3, [pc, #360]	; (100142f8 <_printf_i+0x228>)
10014190:	7e22      	ldrb	r2, [r4, #24]
10014192:	9303      	str	r3, [sp, #12]
10014194:	270a      	movs	r7, #10
10014196:	2a6f      	cmp	r2, #111	; 0x6f
10014198:	d11d      	bne.n	100141d6 <_printf_i+0x106>
1001419a:	2708      	movs	r7, #8
1001419c:	e01b      	b.n	100141d6 <_printf_i+0x106>
1001419e:	1c22      	adds	r2, r4, #0
100141a0:	2178      	movs	r1, #120	; 0x78
100141a2:	3245      	adds	r2, #69	; 0x45
100141a4:	7011      	strb	r1, [r2, #0]
100141a6:	4a55      	ldr	r2, [pc, #340]	; (100142fc <_printf_i+0x22c>)
100141a8:	6819      	ldr	r1, [r3, #0]
100141aa:	9203      	str	r2, [sp, #12]
100141ac:	1d08      	adds	r0, r1, #4
100141ae:	6822      	ldr	r2, [r4, #0]
100141b0:	6018      	str	r0, [r3, #0]
100141b2:	680d      	ldr	r5, [r1, #0]
100141b4:	0610      	lsls	r0, r2, #24
100141b6:	d402      	bmi.n	100141be <_printf_i+0xee>
100141b8:	0650      	lsls	r0, r2, #25
100141ba:	d500      	bpl.n	100141be <_printf_i+0xee>
100141bc:	b2ad      	uxth	r5, r5
100141be:	07d3      	lsls	r3, r2, #31
100141c0:	d502      	bpl.n	100141c8 <_printf_i+0xf8>
100141c2:	2320      	movs	r3, #32
100141c4:	431a      	orrs	r2, r3
100141c6:	6022      	str	r2, [r4, #0]
100141c8:	2710      	movs	r7, #16
100141ca:	2d00      	cmp	r5, #0
100141cc:	d103      	bne.n	100141d6 <_printf_i+0x106>
100141ce:	2320      	movs	r3, #32
100141d0:	6822      	ldr	r2, [r4, #0]
100141d2:	439a      	bics	r2, r3
100141d4:	6022      	str	r2, [r4, #0]
100141d6:	1c23      	adds	r3, r4, #0
100141d8:	2200      	movs	r2, #0
100141da:	3343      	adds	r3, #67	; 0x43
100141dc:	701a      	strb	r2, [r3, #0]
100141de:	e002      	b.n	100141e6 <_printf_i+0x116>
100141e0:	270a      	movs	r7, #10
100141e2:	4b45      	ldr	r3, [pc, #276]	; (100142f8 <_printf_i+0x228>)
100141e4:	9303      	str	r3, [sp, #12]
100141e6:	6863      	ldr	r3, [r4, #4]
100141e8:	60a3      	str	r3, [r4, #8]
100141ea:	2b00      	cmp	r3, #0
100141ec:	db03      	blt.n	100141f6 <_printf_i+0x126>
100141ee:	2204      	movs	r2, #4
100141f0:	6821      	ldr	r1, [r4, #0]
100141f2:	4391      	bics	r1, r2
100141f4:	6021      	str	r1, [r4, #0]
100141f6:	2d00      	cmp	r5, #0
100141f8:	d102      	bne.n	10014200 <_printf_i+0x130>
100141fa:	9e04      	ldr	r6, [sp, #16]
100141fc:	2b00      	cmp	r3, #0
100141fe:	d00e      	beq.n	1001421e <_printf_i+0x14e>
10014200:	9e04      	ldr	r6, [sp, #16]
10014202:	1c28      	adds	r0, r5, #0
10014204:	1c39      	adds	r1, r7, #0
10014206:	f7fe f897 	bl	10012338 <__aeabi_uidivmod>
1001420a:	9b03      	ldr	r3, [sp, #12]
1001420c:	3e01      	subs	r6, #1
1001420e:	5c5b      	ldrb	r3, [r3, r1]
10014210:	1c28      	adds	r0, r5, #0
10014212:	7033      	strb	r3, [r6, #0]
10014214:	1c39      	adds	r1, r7, #0
10014216:	f7fe f809 	bl	1001222c <__aeabi_uidiv>
1001421a:	1e05      	subs	r5, r0, #0
1001421c:	d1f1      	bne.n	10014202 <_printf_i+0x132>
1001421e:	2f08      	cmp	r7, #8
10014220:	d109      	bne.n	10014236 <_printf_i+0x166>
10014222:	6823      	ldr	r3, [r4, #0]
10014224:	07db      	lsls	r3, r3, #31
10014226:	d506      	bpl.n	10014236 <_printf_i+0x166>
10014228:	6863      	ldr	r3, [r4, #4]
1001422a:	6922      	ldr	r2, [r4, #16]
1001422c:	4293      	cmp	r3, r2
1001422e:	dc02      	bgt.n	10014236 <_printf_i+0x166>
10014230:	2330      	movs	r3, #48	; 0x30
10014232:	3e01      	subs	r6, #1
10014234:	7033      	strb	r3, [r6, #0]
10014236:	9b04      	ldr	r3, [sp, #16]
10014238:	1b9b      	subs	r3, r3, r6
1001423a:	6123      	str	r3, [r4, #16]
1001423c:	e02b      	b.n	10014296 <_printf_i+0x1c6>
1001423e:	6809      	ldr	r1, [r1, #0]
10014240:	681a      	ldr	r2, [r3, #0]
10014242:	0608      	lsls	r0, r1, #24
10014244:	d407      	bmi.n	10014256 <_printf_i+0x186>
10014246:	0649      	lsls	r1, r1, #25
10014248:	d505      	bpl.n	10014256 <_printf_i+0x186>
1001424a:	1d11      	adds	r1, r2, #4
1001424c:	6019      	str	r1, [r3, #0]
1001424e:	6813      	ldr	r3, [r2, #0]
10014250:	8aa2      	ldrh	r2, [r4, #20]
10014252:	801a      	strh	r2, [r3, #0]
10014254:	e004      	b.n	10014260 <_printf_i+0x190>
10014256:	1d11      	adds	r1, r2, #4
10014258:	6019      	str	r1, [r3, #0]
1001425a:	6813      	ldr	r3, [r2, #0]
1001425c:	6962      	ldr	r2, [r4, #20]
1001425e:	601a      	str	r2, [r3, #0]
10014260:	2300      	movs	r3, #0
10014262:	9e04      	ldr	r6, [sp, #16]
10014264:	6123      	str	r3, [r4, #16]
10014266:	e016      	b.n	10014296 <_printf_i+0x1c6>
10014268:	681a      	ldr	r2, [r3, #0]
1001426a:	1d11      	adds	r1, r2, #4
1001426c:	6019      	str	r1, [r3, #0]
1001426e:	6816      	ldr	r6, [r2, #0]
10014270:	2100      	movs	r1, #0
10014272:	1c30      	adds	r0, r6, #0
10014274:	6862      	ldr	r2, [r4, #4]
10014276:	f000 f93b 	bl	100144f0 <memchr>
1001427a:	2800      	cmp	r0, #0
1001427c:	d001      	beq.n	10014282 <_printf_i+0x1b2>
1001427e:	1b80      	subs	r0, r0, r6
10014280:	6060      	str	r0, [r4, #4]
10014282:	6863      	ldr	r3, [r4, #4]
10014284:	e003      	b.n	1001428e <_printf_i+0x1be>
10014286:	1c26      	adds	r6, r4, #0
10014288:	3642      	adds	r6, #66	; 0x42
1001428a:	7032      	strb	r2, [r6, #0]
1001428c:	2301      	movs	r3, #1
1001428e:	6123      	str	r3, [r4, #16]
10014290:	2300      	movs	r3, #0
10014292:	9a04      	ldr	r2, [sp, #16]
10014294:	7013      	strb	r3, [r2, #0]
10014296:	9b07      	ldr	r3, [sp, #28]
10014298:	9805      	ldr	r0, [sp, #20]
1001429a:	9300      	str	r3, [sp, #0]
1001429c:	1c21      	adds	r1, r4, #0
1001429e:	9b06      	ldr	r3, [sp, #24]
100142a0:	aa09      	add	r2, sp, #36	; 0x24
100142a2:	f7ff fea7 	bl	10013ff4 <_printf_common>
100142a6:	1c43      	adds	r3, r0, #1
100142a8:	d102      	bne.n	100142b0 <_printf_i+0x1e0>
100142aa:	2001      	movs	r0, #1
100142ac:	4240      	negs	r0, r0
100142ae:	e021      	b.n	100142f4 <_printf_i+0x224>
100142b0:	6923      	ldr	r3, [r4, #16]
100142b2:	9805      	ldr	r0, [sp, #20]
100142b4:	9906      	ldr	r1, [sp, #24]
100142b6:	1c32      	adds	r2, r6, #0
100142b8:	9d07      	ldr	r5, [sp, #28]
100142ba:	47a8      	blx	r5
100142bc:	1c43      	adds	r3, r0, #1
100142be:	d0f4      	beq.n	100142aa <_printf_i+0x1da>
100142c0:	6823      	ldr	r3, [r4, #0]
100142c2:	079b      	lsls	r3, r3, #30
100142c4:	d405      	bmi.n	100142d2 <_printf_i+0x202>
100142c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100142c8:	68e0      	ldr	r0, [r4, #12]
100142ca:	4298      	cmp	r0, r3
100142cc:	da12      	bge.n	100142f4 <_printf_i+0x224>
100142ce:	1c18      	adds	r0, r3, #0
100142d0:	e010      	b.n	100142f4 <_printf_i+0x224>
100142d2:	2500      	movs	r5, #0
100142d4:	68e3      	ldr	r3, [r4, #12]
100142d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
100142d8:	1a9b      	subs	r3, r3, r2
100142da:	429d      	cmp	r5, r3
100142dc:	daf3      	bge.n	100142c6 <_printf_i+0x1f6>
100142de:	1c22      	adds	r2, r4, #0
100142e0:	2301      	movs	r3, #1
100142e2:	9805      	ldr	r0, [sp, #20]
100142e4:	9906      	ldr	r1, [sp, #24]
100142e6:	3219      	adds	r2, #25
100142e8:	9e07      	ldr	r6, [sp, #28]
100142ea:	47b0      	blx	r6
100142ec:	1c43      	adds	r3, r0, #1
100142ee:	d0dc      	beq.n	100142aa <_printf_i+0x1da>
100142f0:	3501      	adds	r5, #1
100142f2:	e7ef      	b.n	100142d4 <_printf_i+0x204>
100142f4:	b00b      	add	sp, #44	; 0x2c
100142f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100142f8:	1001610d 	.word	0x1001610d
100142fc:	1001611e 	.word	0x1001611e

10014300 <_putc_r>:
10014300:	b570      	push	{r4, r5, r6, lr}
10014302:	1c05      	adds	r5, r0, #0
10014304:	1c0e      	adds	r6, r1, #0
10014306:	1c14      	adds	r4, r2, #0
10014308:	2800      	cmp	r0, #0
1001430a:	d004      	beq.n	10014316 <_putc_r+0x16>
1001430c:	6983      	ldr	r3, [r0, #24]
1001430e:	2b00      	cmp	r3, #0
10014310:	d101      	bne.n	10014316 <_putc_r+0x16>
10014312:	f7ff fba5 	bl	10013a60 <__sinit>
10014316:	4b15      	ldr	r3, [pc, #84]	; (1001436c <_putc_r+0x6c>)
10014318:	429c      	cmp	r4, r3
1001431a:	d101      	bne.n	10014320 <_putc_r+0x20>
1001431c:	686c      	ldr	r4, [r5, #4]
1001431e:	e008      	b.n	10014332 <_putc_r+0x32>
10014320:	4b13      	ldr	r3, [pc, #76]	; (10014370 <_putc_r+0x70>)
10014322:	429c      	cmp	r4, r3
10014324:	d101      	bne.n	1001432a <_putc_r+0x2a>
10014326:	68ac      	ldr	r4, [r5, #8]
10014328:	e003      	b.n	10014332 <_putc_r+0x32>
1001432a:	4b12      	ldr	r3, [pc, #72]	; (10014374 <_putc_r+0x74>)
1001432c:	429c      	cmp	r4, r3
1001432e:	d100      	bne.n	10014332 <_putc_r+0x32>
10014330:	68ec      	ldr	r4, [r5, #12]
10014332:	68a3      	ldr	r3, [r4, #8]
10014334:	3b01      	subs	r3, #1
10014336:	60a3      	str	r3, [r4, #8]
10014338:	2b00      	cmp	r3, #0
1001433a:	da10      	bge.n	1001435e <_putc_r+0x5e>
1001433c:	69a2      	ldr	r2, [r4, #24]
1001433e:	4293      	cmp	r3, r2
10014340:	db07      	blt.n	10014352 <_putc_r+0x52>
10014342:	6823      	ldr	r3, [r4, #0]
10014344:	701e      	strb	r6, [r3, #0]
10014346:	6823      	ldr	r3, [r4, #0]
10014348:	7819      	ldrb	r1, [r3, #0]
1001434a:	290a      	cmp	r1, #10
1001434c:	d10a      	bne.n	10014364 <_putc_r+0x64>
1001434e:	1c28      	adds	r0, r5, #0
10014350:	e001      	b.n	10014356 <_putc_r+0x56>
10014352:	1c28      	adds	r0, r5, #0
10014354:	1c31      	adds	r1, r6, #0
10014356:	1c22      	adds	r2, r4, #0
10014358:	f7ff f9be 	bl	100136d8 <__swbuf_r>
1001435c:	e005      	b.n	1001436a <_putc_r+0x6a>
1001435e:	6823      	ldr	r3, [r4, #0]
10014360:	701e      	strb	r6, [r3, #0]
10014362:	6823      	ldr	r3, [r4, #0]
10014364:	1c5a      	adds	r2, r3, #1
10014366:	6022      	str	r2, [r4, #0]
10014368:	7818      	ldrb	r0, [r3, #0]
1001436a:	bd70      	pop	{r4, r5, r6, pc}
1001436c:	1001609c 	.word	0x1001609c
10014370:	100160bc 	.word	0x100160bc
10014374:	100160dc 	.word	0x100160dc

10014378 <_sbrk_r>:
10014378:	b538      	push	{r3, r4, r5, lr}
1001437a:	2300      	movs	r3, #0
1001437c:	4c06      	ldr	r4, [pc, #24]	; (10014398 <_sbrk_r+0x20>)
1001437e:	1c05      	adds	r5, r0, #0
10014380:	1c08      	adds	r0, r1, #0
10014382:	6023      	str	r3, [r4, #0]
10014384:	f7f6 fed0 	bl	1000b128 <_sbrk>
10014388:	1c43      	adds	r3, r0, #1
1001438a:	d103      	bne.n	10014394 <_sbrk_r+0x1c>
1001438c:	6823      	ldr	r3, [r4, #0]
1001438e:	2b00      	cmp	r3, #0
10014390:	d000      	beq.n	10014394 <_sbrk_r+0x1c>
10014392:	602b      	str	r3, [r5, #0]
10014394:	bd38      	pop	{r3, r4, r5, pc}
10014396:	46c0      	nop			; (mov r8, r8)
10014398:	10017d48 	.word	0x10017d48

1001439c <__sread>:
1001439c:	b538      	push	{r3, r4, r5, lr}
1001439e:	1c0c      	adds	r4, r1, #0
100143a0:	250e      	movs	r5, #14
100143a2:	5f49      	ldrsh	r1, [r1, r5]
100143a4:	f000 f8b0 	bl	10014508 <_read_r>
100143a8:	2800      	cmp	r0, #0
100143aa:	db03      	blt.n	100143b4 <__sread+0x18>
100143ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
100143ae:	181b      	adds	r3, r3, r0
100143b0:	6563      	str	r3, [r4, #84]	; 0x54
100143b2:	e003      	b.n	100143bc <__sread+0x20>
100143b4:	89a2      	ldrh	r2, [r4, #12]
100143b6:	4b02      	ldr	r3, [pc, #8]	; (100143c0 <__sread+0x24>)
100143b8:	4013      	ands	r3, r2
100143ba:	81a3      	strh	r3, [r4, #12]
100143bc:	bd38      	pop	{r3, r4, r5, pc}
100143be:	46c0      	nop			; (mov r8, r8)
100143c0:	ffffefff 	.word	0xffffefff

100143c4 <__swrite>:
100143c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100143c6:	1c1e      	adds	r6, r3, #0
100143c8:	898b      	ldrh	r3, [r1, #12]
100143ca:	1c05      	adds	r5, r0, #0
100143cc:	1c0c      	adds	r4, r1, #0
100143ce:	1c17      	adds	r7, r2, #0
100143d0:	05db      	lsls	r3, r3, #23
100143d2:	d505      	bpl.n	100143e0 <__swrite+0x1c>
100143d4:	230e      	movs	r3, #14
100143d6:	5ec9      	ldrsh	r1, [r1, r3]
100143d8:	2200      	movs	r2, #0
100143da:	2302      	movs	r3, #2
100143dc:	f000 f874 	bl	100144c8 <_lseek_r>
100143e0:	89a2      	ldrh	r2, [r4, #12]
100143e2:	4b05      	ldr	r3, [pc, #20]	; (100143f8 <__swrite+0x34>)
100143e4:	1c28      	adds	r0, r5, #0
100143e6:	4013      	ands	r3, r2
100143e8:	81a3      	strh	r3, [r4, #12]
100143ea:	1c3a      	adds	r2, r7, #0
100143ec:	230e      	movs	r3, #14
100143ee:	5ee1      	ldrsh	r1, [r4, r3]
100143f0:	1c33      	adds	r3, r6, #0
100143f2:	f000 f81f 	bl	10014434 <_write_r>
100143f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100143f8:	ffffefff 	.word	0xffffefff

100143fc <__sseek>:
100143fc:	b538      	push	{r3, r4, r5, lr}
100143fe:	1c0c      	adds	r4, r1, #0
10014400:	250e      	movs	r5, #14
10014402:	5f49      	ldrsh	r1, [r1, r5]
10014404:	f000 f860 	bl	100144c8 <_lseek_r>
10014408:	89a3      	ldrh	r3, [r4, #12]
1001440a:	1c42      	adds	r2, r0, #1
1001440c:	d103      	bne.n	10014416 <__sseek+0x1a>
1001440e:	4a05      	ldr	r2, [pc, #20]	; (10014424 <__sseek+0x28>)
10014410:	4013      	ands	r3, r2
10014412:	81a3      	strh	r3, [r4, #12]
10014414:	e004      	b.n	10014420 <__sseek+0x24>
10014416:	2280      	movs	r2, #128	; 0x80
10014418:	0152      	lsls	r2, r2, #5
1001441a:	4313      	orrs	r3, r2
1001441c:	81a3      	strh	r3, [r4, #12]
1001441e:	6560      	str	r0, [r4, #84]	; 0x54
10014420:	bd38      	pop	{r3, r4, r5, pc}
10014422:	46c0      	nop			; (mov r8, r8)
10014424:	ffffefff 	.word	0xffffefff

10014428 <__sclose>:
10014428:	b508      	push	{r3, lr}
1001442a:	230e      	movs	r3, #14
1001442c:	5ec9      	ldrsh	r1, [r1, r3]
1001442e:	f000 f815 	bl	1001445c <_close_r>
10014432:	bd08      	pop	{r3, pc}

10014434 <_write_r>:
10014434:	b538      	push	{r3, r4, r5, lr}
10014436:	1c05      	adds	r5, r0, #0
10014438:	2000      	movs	r0, #0
1001443a:	4c07      	ldr	r4, [pc, #28]	; (10014458 <_write_r+0x24>)
1001443c:	6020      	str	r0, [r4, #0]
1001443e:	1c08      	adds	r0, r1, #0
10014440:	1c11      	adds	r1, r2, #0
10014442:	1c1a      	adds	r2, r3, #0
10014444:	f7f6 fe3a 	bl	1000b0bc <_write>
10014448:	1c43      	adds	r3, r0, #1
1001444a:	d103      	bne.n	10014454 <_write_r+0x20>
1001444c:	6823      	ldr	r3, [r4, #0]
1001444e:	2b00      	cmp	r3, #0
10014450:	d000      	beq.n	10014454 <_write_r+0x20>
10014452:	602b      	str	r3, [r5, #0]
10014454:	bd38      	pop	{r3, r4, r5, pc}
10014456:	46c0      	nop			; (mov r8, r8)
10014458:	10017d48 	.word	0x10017d48

1001445c <_close_r>:
1001445c:	b538      	push	{r3, r4, r5, lr}
1001445e:	2300      	movs	r3, #0
10014460:	4c06      	ldr	r4, [pc, #24]	; (1001447c <_close_r+0x20>)
10014462:	1c05      	adds	r5, r0, #0
10014464:	1c08      	adds	r0, r1, #0
10014466:	6023      	str	r3, [r4, #0]
10014468:	f7f6 fe7c 	bl	1000b164 <_close>
1001446c:	1c43      	adds	r3, r0, #1
1001446e:	d103      	bne.n	10014478 <_close_r+0x1c>
10014470:	6823      	ldr	r3, [r4, #0]
10014472:	2b00      	cmp	r3, #0
10014474:	d000      	beq.n	10014478 <_close_r+0x1c>
10014476:	602b      	str	r3, [r5, #0]
10014478:	bd38      	pop	{r3, r4, r5, pc}
1001447a:	46c0      	nop			; (mov r8, r8)
1001447c:	10017d48 	.word	0x10017d48

10014480 <_fstat_r>:
10014480:	b538      	push	{r3, r4, r5, lr}
10014482:	2300      	movs	r3, #0
10014484:	4c06      	ldr	r4, [pc, #24]	; (100144a0 <_fstat_r+0x20>)
10014486:	1c05      	adds	r5, r0, #0
10014488:	1c08      	adds	r0, r1, #0
1001448a:	1c11      	adds	r1, r2, #0
1001448c:	6023      	str	r3, [r4, #0]
1001448e:	f7f6 fe73 	bl	1000b178 <_fstat>
10014492:	1c43      	adds	r3, r0, #1
10014494:	d103      	bne.n	1001449e <_fstat_r+0x1e>
10014496:	6823      	ldr	r3, [r4, #0]
10014498:	2b00      	cmp	r3, #0
1001449a:	d000      	beq.n	1001449e <_fstat_r+0x1e>
1001449c:	602b      	str	r3, [r5, #0]
1001449e:	bd38      	pop	{r3, r4, r5, pc}
100144a0:	10017d48 	.word	0x10017d48

100144a4 <_isatty_r>:
100144a4:	b538      	push	{r3, r4, r5, lr}
100144a6:	2300      	movs	r3, #0
100144a8:	4c06      	ldr	r4, [pc, #24]	; (100144c4 <_isatty_r+0x20>)
100144aa:	1c05      	adds	r5, r0, #0
100144ac:	1c08      	adds	r0, r1, #0
100144ae:	6023      	str	r3, [r4, #0]
100144b0:	f7f6 fe70 	bl	1000b194 <_isatty>
100144b4:	1c43      	adds	r3, r0, #1
100144b6:	d103      	bne.n	100144c0 <_isatty_r+0x1c>
100144b8:	6823      	ldr	r3, [r4, #0]
100144ba:	2b00      	cmp	r3, #0
100144bc:	d000      	beq.n	100144c0 <_isatty_r+0x1c>
100144be:	602b      	str	r3, [r5, #0]
100144c0:	bd38      	pop	{r3, r4, r5, pc}
100144c2:	46c0      	nop			; (mov r8, r8)
100144c4:	10017d48 	.word	0x10017d48

100144c8 <_lseek_r>:
100144c8:	b538      	push	{r3, r4, r5, lr}
100144ca:	1c05      	adds	r5, r0, #0
100144cc:	2000      	movs	r0, #0
100144ce:	4c07      	ldr	r4, [pc, #28]	; (100144ec <_lseek_r+0x24>)
100144d0:	6020      	str	r0, [r4, #0]
100144d2:	1c08      	adds	r0, r1, #0
100144d4:	1c11      	adds	r1, r2, #0
100144d6:	1c1a      	adds	r2, r3, #0
100144d8:	f7f6 fe66 	bl	1000b1a8 <_lseek>
100144dc:	1c43      	adds	r3, r0, #1
100144de:	d103      	bne.n	100144e8 <_lseek_r+0x20>
100144e0:	6823      	ldr	r3, [r4, #0]
100144e2:	2b00      	cmp	r3, #0
100144e4:	d000      	beq.n	100144e8 <_lseek_r+0x20>
100144e6:	602b      	str	r3, [r5, #0]
100144e8:	bd38      	pop	{r3, r4, r5, pc}
100144ea:	46c0      	nop			; (mov r8, r8)
100144ec:	10017d48 	.word	0x10017d48

100144f0 <memchr>:
100144f0:	b2c9      	uxtb	r1, r1
100144f2:	1882      	adds	r2, r0, r2
100144f4:	4290      	cmp	r0, r2
100144f6:	d004      	beq.n	10014502 <memchr+0x12>
100144f8:	7803      	ldrb	r3, [r0, #0]
100144fa:	428b      	cmp	r3, r1
100144fc:	d002      	beq.n	10014504 <memchr+0x14>
100144fe:	3001      	adds	r0, #1
10014500:	e7f8      	b.n	100144f4 <memchr+0x4>
10014502:	2000      	movs	r0, #0
10014504:	4770      	bx	lr
	...

10014508 <_read_r>:
10014508:	b538      	push	{r3, r4, r5, lr}
1001450a:	1c05      	adds	r5, r0, #0
1001450c:	2000      	movs	r0, #0
1001450e:	4c07      	ldr	r4, [pc, #28]	; (1001452c <_read_r+0x24>)
10014510:	6020      	str	r0, [r4, #0]
10014512:	1c08      	adds	r0, r1, #0
10014514:	1c11      	adds	r1, r2, #0
10014516:	1c1a      	adds	r2, r3, #0
10014518:	f7f6 fda4 	bl	1000b064 <_read>
1001451c:	1c43      	adds	r3, r0, #1
1001451e:	d103      	bne.n	10014528 <_read_r+0x20>
10014520:	6823      	ldr	r3, [r4, #0]
10014522:	2b00      	cmp	r3, #0
10014524:	d000      	beq.n	10014528 <_read_r+0x20>
10014526:	602b      	str	r3, [r5, #0]
10014528:	bd38      	pop	{r3, r4, r5, pc}
1001452a:	46c0      	nop			; (mov r8, r8)
1001452c:	10017d48 	.word	0x10017d48

10014530 <__aeabi_lmul>:
10014530:	b5f0      	push	{r4, r5, r6, r7, lr}
10014532:	464f      	mov	r7, r9
10014534:	4646      	mov	r6, r8
10014536:	0405      	lsls	r5, r0, #16
10014538:	0c2d      	lsrs	r5, r5, #16
1001453a:	1c2c      	adds	r4, r5, #0
1001453c:	b4c0      	push	{r6, r7}
1001453e:	0417      	lsls	r7, r2, #16
10014540:	0c16      	lsrs	r6, r2, #16
10014542:	0c3f      	lsrs	r7, r7, #16
10014544:	4699      	mov	r9, r3
10014546:	0c03      	lsrs	r3, r0, #16
10014548:	437c      	muls	r4, r7
1001454a:	4375      	muls	r5, r6
1001454c:	435f      	muls	r7, r3
1001454e:	4373      	muls	r3, r6
10014550:	197d      	adds	r5, r7, r5
10014552:	0c26      	lsrs	r6, r4, #16
10014554:	19ad      	adds	r5, r5, r6
10014556:	469c      	mov	ip, r3
10014558:	42af      	cmp	r7, r5
1001455a:	d903      	bls.n	10014564 <__aeabi_lmul+0x34>
1001455c:	2380      	movs	r3, #128	; 0x80
1001455e:	025b      	lsls	r3, r3, #9
10014560:	4698      	mov	r8, r3
10014562:	44c4      	add	ip, r8
10014564:	464b      	mov	r3, r9
10014566:	4351      	muls	r1, r2
10014568:	4343      	muls	r3, r0
1001456a:	0424      	lsls	r4, r4, #16
1001456c:	0c2e      	lsrs	r6, r5, #16
1001456e:	0c24      	lsrs	r4, r4, #16
10014570:	042d      	lsls	r5, r5, #16
10014572:	4466      	add	r6, ip
10014574:	192c      	adds	r4, r5, r4
10014576:	1859      	adds	r1, r3, r1
10014578:	1989      	adds	r1, r1, r6
1001457a:	1c20      	adds	r0, r4, #0
1001457c:	bc0c      	pop	{r2, r3}
1001457e:	4690      	mov	r8, r2
10014580:	4699      	mov	r9, r3
10014582:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014584:	0000000d 	.word	0x0000000d
10014588:	735b0d0a 	.word	0x735b0d0a
1001458c:	735f736d 	.word	0x735f736d
10014590:	69767265 	.word	0x69767265
10014594:	695f6563 	.word	0x695f6563
10014598:	5d74696e 	.word	0x5d74696e
1001459c:	65730d0a 	.word	0x65730d0a
100145a0:	6e697474 	.word	0x6e697474
100145a4:	72702067 	.word	0x72702067
100145a8:	72616d69 	.word	0x72616d69
100145ac:	65732079 	.word	0x65732079
100145b0:	63697672 	.word	0x63697672
100145b4:	2d0a0d65 	.word	0x2d0a0d65
100145b8:	69757520 	.word	0x69757520
100145bc:	30203a64 	.word	0x30203a64
100145c0:	32302578 	.word	0x32302578
100145c4:	2d0a0d78 	.word	0x2d0a0d78
100145c8:	6e616820 	.word	0x6e616820
100145cc:	3a656c64 	.word	0x3a656c64
100145d0:	25783020 	.word	0x25783020
100145d4:	0d783230 	.word	0x0d783230
100145d8:	63202d0a 	.word	0x63202d0a
100145dc:	20726168 	.word	0x20726168
100145e0:	64697575 	.word	0x64697575
100145e4:	7830203a 	.word	0x7830203a
100145e8:	78323025 	.word	0x78323025
100145ec:	78323025 	.word	0x78323025
100145f0:	202d0a0d 	.word	0x202d0a0d
100145f4:	72616863 	.word	0x72616863
100145f8:	696e6920 	.word	0x696e6920
100145fc:	61762074 	.word	0x61762074
10014600:	3a65756c 	.word	0x3a65756c
10014604:	00642520 	.word	0x00642520
10014608:	735b0d0a 	.word	0x735b0d0a
1001460c:	625f736d 	.word	0x625f736d
10014610:	6f747475 	.word	0x6f747475
10014614:	72705f6e 	.word	0x72705f6e
10014618:	72616d69 	.word	0x72616d69
1001461c:	65735f79 	.word	0x65735f79
10014620:	63697672 	.word	0x63697672
10014624:	65645f65 	.word	0x65645f65
10014628:	656e6966 	.word	0x656e6966
1001462c:	640d0a5d 	.word	0x640d0a5d
10014630:	6e696665 	.word	0x6e696665
10014634:	20676e69 	.word	0x20676e69
10014638:	6d697270 	.word	0x6d697270
1001463c:	20797261 	.word	0x20797261
10014640:	76726573 	.word	0x76726573
10014644:	0d656369 	.word	0x0d656369
10014648:	75202d0a 	.word	0x75202d0a
1001464c:	3a646975 	.word	0x3a646975
10014650:	25783020 	.word	0x25783020
10014654:	0d783230 	.word	0x0d783230
10014658:	68202d0a 	.word	0x68202d0a
1001465c:	6c646e61 	.word	0x6c646e61
10014660:	30203a65 	.word	0x30203a65
10014664:	32302578 	.word	0x32302578
10014668:	2d0a0d78 	.word	0x2d0a0d78
1001466c:	61686320 	.word	0x61686320
10014670:	75752072 	.word	0x75752072
10014674:	203a6469 	.word	0x203a6469
10014678:	30257830 	.word	0x30257830
1001467c:	30257832 	.word	0x30257832
10014680:	0a0d7832 	.word	0x0a0d7832
10014684:	6863202d 	.word	0x6863202d
10014688:	69207261 	.word	0x69207261
1001468c:	2074696e 	.word	0x2074696e
10014690:	756c6176 	.word	0x756c6176
10014694:	25203a65 	.word	0x25203a65
10014698:	00000064 	.word	0x00000064
1001469c:	735b0d0a 	.word	0x735b0d0a
100146a0:	735f736d 	.word	0x735f736d
100146a4:	69767265 	.word	0x69767265
100146a8:	615f6563 	.word	0x615f6563
100146ac:	72657664 	.word	0x72657664
100146b0:	65736974 	.word	0x65736974
100146b4:	610d0a5d 	.word	0x610d0a5d
100146b8:	72657664 	.word	0x72657664
100146bc:	65736974 	.word	0x65736974
100146c0:	746e656d 	.word	0x746e656d
100146c4:	74616420 	.word	0x74616420
100146c8:	65732061 	.word	0x65732061
100146cc:	61662074 	.word	0x61662074
100146d0:	64656c69 	.word	0x64656c69
100146d4:	00000021 	.word	0x00000021
100146d8:	735b0d0a 	.word	0x735b0d0a
100146dc:	735f736d 	.word	0x735f736d
100146e0:	69767265 	.word	0x69767265
100146e4:	615f6563 	.word	0x615f6563
100146e8:	72657664 	.word	0x72657664
100146ec:	65736974 	.word	0x65736974
100146f0:	420d0a5d 	.word	0x420d0a5d
100146f4:	5320454c 	.word	0x5320454c
100146f8:	74726174 	.word	0x74726174
100146fc:	41206465 	.word	0x41206465
10014700:	72657664 	.word	0x72657664
10014704:	65736974 	.word	0x65736974
10014708:	746e656d 	.word	0x746e656d
1001470c:	00000000 	.word	0x00000000
10014710:	735b0d0a 	.word	0x735b0d0a
10014714:	735f736d 	.word	0x735f736d
10014718:	69767265 	.word	0x69767265
1001471c:	615f6563 	.word	0x615f6563
10014720:	72657664 	.word	0x72657664
10014724:	65736974 	.word	0x65736974
10014728:	420d0a5d 	.word	0x420d0a5d
1001472c:	4120454c 	.word	0x4120454c
10014730:	72657664 	.word	0x72657664
10014734:	65736974 	.word	0x65736974
10014738:	746e656d 	.word	0x746e656d
1001473c:	61747320 	.word	0x61747320
10014740:	66207472 	.word	0x66207472
10014744:	656c6961 	.word	0x656c6961
10014748:	72203a64 	.word	0x72203a64
1001474c:	6f736165 	.word	0x6f736165
10014750:	7830206e 	.word	0x7830206e
10014754:	00007825 	.word	0x00007825
10014758:	0000000d 	.word	0x0000000d
1001475c:	735b0d0a 	.word	0x735b0d0a
10014760:	625f736d 	.word	0x625f736d
10014764:	6f747475 	.word	0x6f747475
10014768:	6f635f6e 	.word	0x6f635f6e
1001476c:	6769666e 	.word	0x6769666e
10014770:	5d657275 	.word	0x5d657275
10014774:	72700d0a 	.word	0x72700d0a
10014778:	656c626f 	.word	0x656c626f
1001477c:	6877206d 	.word	0x6877206d
10014780:	20656c69 	.word	0x20656c69
10014784:	74746573 	.word	0x74746573
10014788:	20676e69 	.word	0x20676e69
1001478c:	77207075 	.word	0x77207075
10014790:	2d656b61 	.word	0x2d656b61
10014794:	70207075 	.word	0x70207075
10014798:	00006e69 	.word	0x00006e69
1001479c:	735b0d0a 	.word	0x735b0d0a
100147a0:	625f736d 	.word	0x625f736d
100147a4:	6f747475 	.word	0x6f747475
100147a8:	6f635f6e 	.word	0x6f635f6e
100147ac:	6769666e 	.word	0x6769666e
100147b0:	5d657275 	.word	0x5d657275
100147b4:	61770d0a 	.word	0x61770d0a
100147b8:	752d656b 	.word	0x752d656b
100147bc:	69702070 	.word	0x69702070
100147c0:	6573206e 	.word	0x6573206e
100147c4:	70752074 	.word	0x70752074
100147c8:	726f6320 	.word	0x726f6320
100147cc:	74636572 	.word	0x74636572
100147d0:	0000796c 	.word	0x0000796c
100147d4:	735b0d0a 	.word	0x735b0d0a
100147d8:	625f736d 	.word	0x625f736d
100147dc:	6f747475 	.word	0x6f747475
100147e0:	74625f6e 	.word	0x74625f6e
100147e4:	6e665f31 	.word	0x6e665f31
100147e8:	640d0a5d 	.word	0x640d0a5d
100147ec:	62617369 	.word	0x62617369
100147f0:	676e696c 	.word	0x676e696c
100147f4:	49504720 	.word	0x49504720
100147f8:	6e69204f 	.word	0x6e69204f
100147fc:	72726574 	.word	0x72726574
10014800:	73747075 	.word	0x73747075
10014804:	00000000 	.word	0x00000000
10014808:	735b0d0a 	.word	0x735b0d0a
1001480c:	625f736d 	.word	0x625f736d
10014810:	6f747475 	.word	0x6f747475
10014814:	74625f6e 	.word	0x74625f6e
10014818:	6e665f31 	.word	0x6e665f31
1001481c:	630d0a5d 	.word	0x630d0a5d
10014820:	65727275 	.word	0x65727275
10014824:	6320746e 	.word	0x6320746e
10014828:	61726168 	.word	0x61726168
1001482c:	72657463 	.word	0x72657463
10014830:	69747369 	.word	0x69747369
10014834:	61762063 	.word	0x61762063
10014838:	3a65756c 	.word	0x3a65756c
1001483c:	00642520 	.word	0x00642520
10014840:	735b0d0a 	.word	0x735b0d0a
10014844:	625f736d 	.word	0x625f736d
10014848:	6f747475 	.word	0x6f747475
1001484c:	74625f6e 	.word	0x74625f6e
10014850:	6e665f31 	.word	0x6e665f31
10014854:	750d0a5d 	.word	0x750d0a5d
10014858:	74616470 	.word	0x74616470
1001485c:	20676e69 	.word	0x20676e69
10014860:	20656874 	.word	0x20656874
10014864:	72616863 	.word	0x72616863
10014868:	65746361 	.word	0x65746361
1001486c:	74736972 	.word	0x74736972
10014870:	66206369 	.word	0x66206369
10014874:	656c6961 	.word	0x656c6961
10014878:	00002164 	.word	0x00002164
1001487c:	735b0d0a 	.word	0x735b0d0a
10014880:	625f736d 	.word	0x625f736d
10014884:	6f747475 	.word	0x6f747475
10014888:	74625f6e 	.word	0x74625f6e
1001488c:	6e665f31 	.word	0x6e665f31
10014890:	750d0a5d 	.word	0x750d0a5d
10014894:	74616470 	.word	0x74616470
10014898:	20676e69 	.word	0x20676e69
1001489c:	20656874 	.word	0x20656874
100148a0:	72616863 	.word	0x72616863
100148a4:	65746361 	.word	0x65746361
100148a8:	74736972 	.word	0x74736972
100148ac:	73206369 	.word	0x73206369
100148b0:	65636375 	.word	0x65636375
100148b4:	75667373 	.word	0x75667373
100148b8:	0000006c 	.word	0x0000006c
100148bc:	735b0d0a 	.word	0x735b0d0a
100148c0:	625f736d 	.word	0x625f736d
100148c4:	6f747475 	.word	0x6f747475
100148c8:	74625f6e 	.word	0x74625f6e
100148cc:	6e665f31 	.word	0x6e665f31
100148d0:	730d0a5d 	.word	0x730d0a5d
100148d4:	69646e65 	.word	0x69646e65
100148d8:	6e20676e 	.word	0x6e20676e
100148dc:	6669746f 	.word	0x6669746f
100148e0:	74616369 	.word	0x74616369
100148e4:	206e6f69 	.word	0x206e6f69
100148e8:	6c696166 	.word	0x6c696166
100148ec:	203a6465 	.word	0x203a6465
100148f0:	73616572 	.word	0x73616572
100148f4:	30206e6f 	.word	0x30206e6f
100148f8:	00782578 	.word	0x00782578
100148fc:	735b0d0a 	.word	0x735b0d0a
10014900:	625f736d 	.word	0x625f736d
10014904:	6f747475 	.word	0x6f747475
10014908:	74625f6e 	.word	0x74625f6e
1001490c:	6e665f31 	.word	0x6e665f31
10014910:	730d0a5d 	.word	0x730d0a5d
10014914:	69646e65 	.word	0x69646e65
10014918:	6e20676e 	.word	0x6e20676e
1001491c:	6669746f 	.word	0x6669746f
10014920:	74616369 	.word	0x74616369
10014924:	2e6e6f69 	.word	0x2e6e6f69
10014928:	00002e2e 	.word	0x00002e2e
1001492c:	735b0d0a 	.word	0x735b0d0a
10014930:	625f736d 	.word	0x625f736d
10014934:	6f747475 	.word	0x6f747475
10014938:	74625f6e 	.word	0x74625f6e
1001493c:	6e665f31 	.word	0x6e665f31
10014940:	730d0a5d 	.word	0x730d0a5d
10014944:	69747261 	.word	0x69747261
10014948:	7420676e 	.word	0x7420676e
1001494c:	72656d69 	.word	0x72656d69
10014950:	726f6620 	.word	0x726f6620
10014954:	20642520 	.word	0x20642520
10014958:	0000736d 	.word	0x0000736d
1001495c:	0000000d 	.word	0x0000000d
10014960:	735b0d0a 	.word	0x735b0d0a
10014964:	745f736d 	.word	0x745f736d
10014968:	72656d69 	.word	0x72656d69
1001496c:	5d6e665f 	.word	0x5d6e665f
10014970:	74730d0a 	.word	0x74730d0a
10014974:	6970706f 	.word	0x6970706f
10014978:	7420676e 	.word	0x7420676e
1001497c:	72656d69 	.word	0x72656d69
10014980:	00000000 	.word	0x00000000
10014984:	735b0d0a 	.word	0x735b0d0a
10014988:	745f736d 	.word	0x745f736d
1001498c:	72656d69 	.word	0x72656d69
10014990:	5d6e665f 	.word	0x5d6e665f
10014994:	6e650d0a 	.word	0x6e650d0a
10014998:	696c6261 	.word	0x696c6261
1001499c:	4720676e 	.word	0x4720676e
100149a0:	204f4950 	.word	0x204f4950
100149a4:	65746e69 	.word	0x65746e69
100149a8:	70757272 	.word	0x70757272
100149ac:	00007374 	.word	0x00007374
100149b0:	735b0d0a 	.word	0x735b0d0a
100149b4:	745f736d 	.word	0x745f736d
100149b8:	72656d69 	.word	0x72656d69
100149bc:	6c61635f 	.word	0x6c61635f
100149c0:	6361626c 	.word	0x6361626c
100149c4:	0d0a5d6b 	.word	0x0d0a5d6b
100149c8:	20736d73 	.word	0x20736d73
100149cc:	656d6974 	.word	0x656d6974
100149d0:	6f642072 	.word	0x6f642072
100149d4:	0021656e 	.word	0x0021656e
100149d8:	10008616 	.word	0x10008616
100149dc:	10008632 	.word	0x10008632
100149e0:	10008632 	.word	0x10008632
100149e4:	10008632 	.word	0x10008632
100149e8:	10008632 	.word	0x10008632
100149ec:	0000000d 	.word	0x0000000d
100149f0:	625b0d0a 	.word	0x625b0d0a
100149f4:	635f656c 	.word	0x635f656c
100149f8:	656e6e6f 	.word	0x656e6e6f
100149fc:	64657463 	.word	0x64657463
10014a00:	7070615f 	.word	0x7070615f
10014a04:	6576655f 	.word	0x6576655f
10014a08:	0a5d746e 	.word	0x0a5d746e
10014a0c:	7665640d 	.word	0x7665640d
10014a10:	73656369 	.word	0x73656369
10014a14:	6e6f6320 	.word	0x6e6f6320
10014a18:	7463656e 	.word	0x7463656e
10014a1c:	00006465 	.word	0x00006465
10014a20:	625b0d0a 	.word	0x625b0d0a
10014a24:	645f656c 	.word	0x645f656c
10014a28:	6f637369 	.word	0x6f637369
10014a2c:	63656e6e 	.word	0x63656e6e
10014a30:	5f646574 	.word	0x5f646574
10014a34:	5f707061 	.word	0x5f707061
10014a38:	6e657665 	.word	0x6e657665
10014a3c:	0d0a5d74 	.word	0x0d0a5d74
10014a40:	72656570 	.word	0x72656570
10014a44:	73696420 	.word	0x73696420
10014a48:	6e6e6f63 	.word	0x6e6e6f63
10014a4c:	65746365 	.word	0x65746365
10014a50:	2e2e2e64 	.word	0x2e2e2e64
10014a54:	00000000 	.word	0x00000000
10014a58:	625b0d0a 	.word	0x625b0d0a
10014a5c:	705f656c 	.word	0x705f656c
10014a60:	65726961 	.word	0x65726961
10014a64:	70615f64 	.word	0x70615f64
10014a68:	76655f70 	.word	0x76655f70
10014a6c:	5d746e65 	.word	0x5d746e65
10014a70:	65440d0a 	.word	0x65440d0a
10014a74:	65636976 	.word	0x65636976
10014a78:	61702073 	.word	0x61702073
10014a7c:	64657269 	.word	0x64657269
10014a80:	202e2e2e 	.word	0x202e2e2e
10014a84:	62616e65 	.word	0x62616e65
10014a88:	676e696c 	.word	0x676e696c
10014a8c:	51524920 	.word	0x51524920
10014a90:	206e6f20 	.word	0x206e6f20
10014a94:	4f495047 	.word	0x4f495047
10014a98:	00000030 	.word	0x00000030
10014a9c:	625b0d0a 	.word	0x625b0d0a
10014aa0:	6e5f656c 	.word	0x6e5f656c
10014aa4:	6669746f 	.word	0x6669746f
10014aa8:	74616369 	.word	0x74616369
10014aac:	5f6e6f69 	.word	0x5f6e6f69
10014ab0:	666e6f63 	.word	0x666e6f63
10014ab4:	656d7269 	.word	0x656d7269
10014ab8:	70615f64 	.word	0x70615f64
10014abc:	76655f70 	.word	0x76655f70
10014ac0:	5d746e65 	.word	0x5d746e65
10014ac4:	6f6e0d0a 	.word	0x6f6e0d0a
10014ac8:	69666974 	.word	0x69666974
10014acc:	69746163 	.word	0x69746163
10014ad0:	73206e6f 	.word	0x73206e6f
10014ad4:	20746e65 	.word	0x20746e65
10014ad8:	63637573 	.word	0x63637573
10014adc:	66737365 	.word	0x66737365
10014ae0:	796c6c75 	.word	0x796c6c75
10014ae4:	00000000 	.word	0x00000000
10014ae8:	735b0d0a 	.word	0x735b0d0a
10014aec:	705f736d 	.word	0x705f736d
10014af0:	6674616c 	.word	0x6674616c
10014af4:	5f6d726f 	.word	0x5f6d726f
10014af8:	65746e69 	.word	0x65746e69
10014afc:	70757272 	.word	0x70757272
10014b00:	0d0a5d74 	.word	0x0d0a5d74
10014b04:	5f736d73 	.word	0x5f736d73
10014b08:	74747562 	.word	0x74747562
10014b0c:	635f6e6f 	.word	0x635f6e6f
10014b10:	626c6c61 	.word	0x626c6c61
10014b14:	2e6b6361 	.word	0x2e6b6361
10014b18:	25202e2e 	.word	0x25202e2e
10014b1c:	00000064 	.word	0x00000064
10014b20:	735b0d0a 	.word	0x735b0d0a
10014b24:	705f736d 	.word	0x705f736d
10014b28:	6674616c 	.word	0x6674616c
10014b2c:	5f6d726f 	.word	0x5f6d726f
10014b30:	65746e69 	.word	0x65746e69
10014b34:	70757272 	.word	0x70757272
10014b38:	0d0a5d74 	.word	0x0d0a5d74
10014b3c:	74747562 	.word	0x74747562
10014b40:	20316e6f 	.word	0x20316e6f
10014b44:	73657270 	.word	0x73657270
10014b48:	2e646573 	.word	0x2e646573
10014b4c:	00002e2e 	.word	0x00002e2e
10014b50:	735b0d0a 	.word	0x735b0d0a
10014b54:	705f736d 	.word	0x705f736d
10014b58:	6674616c 	.word	0x6674616c
10014b5c:	5f6d726f 	.word	0x5f6d726f
10014b60:	65746e69 	.word	0x65746e69
10014b64:	70757272 	.word	0x70757272
10014b68:	0d0a5d74 	.word	0x0d0a5d74
10014b6c:	74747562 	.word	0x74747562
10014b70:	20326e6f 	.word	0x20326e6f
10014b74:	73657270 	.word	0x73657270
10014b78:	2e646573 	.word	0x2e646573
10014b7c:	00002e2e 	.word	0x00002e2e
10014b80:	745b0d0a 	.word	0x745b0d0a
10014b84:	72656d69 	.word	0x72656d69
10014b88:	6c61635f 	.word	0x6c61635f
10014b8c:	6361626c 	.word	0x6361626c
10014b90:	6e665f6b 	.word	0x6e665f6b
10014b94:	000d0a5d 	.word	0x000d0a5d
10014b98:	0d0a0a0a 	.word	0x0d0a0a0a
10014b9c:	2a2a2a2a 	.word	0x2a2a2a2a
10014ba0:	2a2a2a2a 	.word	0x2a2a2a2a
10014ba4:	2a2a2a2a 	.word	0x2a2a2a2a
10014ba8:	2a2a2a2a 	.word	0x2a2a2a2a
10014bac:	2a2a2a2a 	.word	0x2a2a2a2a
10014bb0:	2a2a2a2a 	.word	0x2a2a2a2a
10014bb4:	2a2a2a2a 	.word	0x2a2a2a2a
10014bb8:	2a2a2a2a 	.word	0x2a2a2a2a
10014bbc:	2a2a0d0a 	.word	0x2a2a0d0a
10014bc0:	2a2a2a2a 	.word	0x2a2a2a2a
10014bc4:	2a2a2a2a 	.word	0x2a2a2a2a
10014bc8:	2a2a2a2a 	.word	0x2a2a2a2a
10014bcc:	2a2a2a2a 	.word	0x2a2a2a2a
10014bd0:	2a2a2a2a 	.word	0x2a2a2a2a
10014bd4:	2a2a2a2a 	.word	0x2a2a2a2a
10014bd8:	2a2a2a2a 	.word	0x2a2a2a2a
10014bdc:	0d0a2a2a 	.word	0x0d0a2a2a
10014be0:	20202a2a 	.word	0x20202a2a
10014be4:	42415320 	.word	0x42415320
10014be8:	53206552 	.word	0x53206552
10014bec:	6120534d 	.word	0x6120534d
10014bf0:	696c7070 	.word	0x696c7070
10014bf4:	69746163 	.word	0x69746163
10014bf8:	20206e6f 	.word	0x20206e6f
10014bfc:	2a2a2020 	.word	0x2a2a2020
10014c00:	2a2a0d0a 	.word	0x2a2a0d0a
10014c04:	2d2d2d2d 	.word	0x2d2d2d2d
10014c08:	2d2d2d2d 	.word	0x2d2d2d2d
10014c0c:	2d2d2d2d 	.word	0x2d2d2d2d
10014c10:	2d2d2d2d 	.word	0x2d2d2d2d
10014c14:	2d2d2d2d 	.word	0x2d2d2d2d
10014c18:	2d2d2d2d 	.word	0x2d2d2d2d
10014c1c:	2d2d2d2d 	.word	0x2d2d2d2d
10014c20:	00002a2a 	.word	0x00002a2a
10014c24:	2d202a2a 	.word	0x2d202a2a
10014c28:	534d5320 	.word	0x534d5320
10014c2c:	5645445f 	.word	0x5645445f
10014c30:	5f454349 	.word	0x5f454349
10014c34:	45544147 	.word	0x45544147
10014c38:	5f594157 	.word	0x5f594157
10014c3c:	20202031 	.word	0x20202031
10014c40:	2a2a2020 	.word	0x2a2a2020
10014c44:	00000000 	.word	0x00000000
10014c48:	2d202a2a 	.word	0x2d202a2a
10014c4c:	534d5320 	.word	0x534d5320
10014c50:	5645445f 	.word	0x5645445f
10014c54:	5f454349 	.word	0x5f454349
10014c58:	45444f4e 	.word	0x45444f4e
10014c5c:	2020315f 	.word	0x2020315f
10014c60:	20202020 	.word	0x20202020
10014c64:	2a2a2020 	.word	0x2a2a2020
10014c68:	00000000 	.word	0x00000000
10014c6c:	2d202a2a 	.word	0x2d202a2a
10014c70:	534d5320 	.word	0x534d5320
10014c74:	5645445f 	.word	0x5645445f
10014c78:	5f454349 	.word	0x5f454349
10014c7c:	45444f4e 	.word	0x45444f4e
10014c80:	2020325f 	.word	0x2020325f
10014c84:	20202020 	.word	0x20202020
10014c88:	2a2a2020 	.word	0x2a2a2020
10014c8c:	00000000 	.word	0x00000000
10014c90:	2a2a2a2a 	.word	0x2a2a2a2a
10014c94:	2a2a2a2a 	.word	0x2a2a2a2a
10014c98:	2a2a2a2a 	.word	0x2a2a2a2a
10014c9c:	2a2a2a2a 	.word	0x2a2a2a2a
10014ca0:	2a2a2a2a 	.word	0x2a2a2a2a
10014ca4:	2a2a2a2a 	.word	0x2a2a2a2a
10014ca8:	2a2a2a2a 	.word	0x2a2a2a2a
10014cac:	2a2a2a2a 	.word	0x2a2a2a2a
10014cb0:	2a2a0d0a 	.word	0x2a2a0d0a
10014cb4:	2a2a2a2a 	.word	0x2a2a2a2a
10014cb8:	2a2a2a2a 	.word	0x2a2a2a2a
10014cbc:	2a2a2a2a 	.word	0x2a2a2a2a
10014cc0:	2a2a2a2a 	.word	0x2a2a2a2a
10014cc4:	2a2a2a2a 	.word	0x2a2a2a2a
10014cc8:	2a2a2a2a 	.word	0x2a2a2a2a
10014ccc:	2a2a2a2a 	.word	0x2a2a2a2a
10014cd0:	0d0a2a2a 	.word	0x0d0a2a2a
10014cd4:	00000000 	.word	0x00000000
10014cd8:	6d5b0d0a 	.word	0x6d5b0d0a
10014cdc:	5d6e6961 	.word	0x5d6e6961
10014ce0:	6e690d0a 	.word	0x6e690d0a
10014ce4:	61697469 	.word	0x61697469
10014ce8:	697a696c 	.word	0x697a696c
10014cec:	4220676e 	.word	0x4220676e
10014cf0:	6120454c 	.word	0x6120454c
10014cf4:	696c7070 	.word	0x696c7070
10014cf8:	69746163 	.word	0x69746163
10014cfc:	00006e6f 	.word	0x00006e6f
10014d00:	6d5b0d0a 	.word	0x6d5b0d0a
10014d04:	5d6e6961 	.word	0x5d6e6961
10014d08:	65640d0a 	.word	0x65640d0a
10014d0c:	696e6966 	.word	0x696e6966
10014d10:	5320676e 	.word	0x5320676e
10014d14:	6220534d 	.word	0x6220534d
10014d18:	6f747475 	.word	0x6f747475
10014d1c:	6573206e 	.word	0x6573206e
10014d20:	63697672 	.word	0x63697672
10014d24:	61662065 	.word	0x61662065
10014d28:	64656c69 	.word	0x64656c69
10014d2c:	6572202c 	.word	0x6572202c
10014d30:	6e6f7361 	.word	0x6e6f7361
10014d34:	25783020 	.word	0x25783020
10014d38:	00000078 	.word	0x00000078
10014d3c:	6d5b0d0a 	.word	0x6d5b0d0a
10014d40:	5d6e6961 	.word	0x5d6e6961
10014d44:	4d530d0a 	.word	0x4d530d0a
10014d48:	72702053 	.word	0x72702053
10014d4c:	72616d69 	.word	0x72616d69
10014d50:	65732079 	.word	0x65732079
10014d54:	63697672 	.word	0x63697672
10014d58:	65642065 	.word	0x65642065
10014d5c:	656e6966 	.word	0x656e6966
10014d60:	73202c64 	.word	0x73202c64
10014d64:	6220736d 	.word	0x6220736d
10014d68:	6f747475 	.word	0x6f747475
10014d6c:	6168206e 	.word	0x6168206e
10014d70:	656c646e 	.word	0x656c646e
10014d74:	00642520 	.word	0x00642520

10014d78 <startup_template_app_gap_cb>:
	...
10014d8c:	100086ed 10008739 00000000 00000000     ....9...........
10014d9c:	1000877d 00000000 00000000 00000000     }...............
10014dac:	00000000 1000877d 00000000 00000000     ....}...........
	...

10014dc4 <startup_template_app_gatt_server_cb>:
10014dc4:	100087b9 00000000 100087fd 00000000     ................
	...
10014dec:	100094a4 1000952e 100095b8 10009642     ............B...
10014dfc:	100096cc 10009c0c 10009c1a 10009c28     ............(...
10014e0c:	10009c36 10009c44 10009c52 10009c60     6...D...R...`...
10014e1c:	10009c70 10009c80 10009c90 10009ca0     p...............
10014e2c:	10009cb0 10009cc0 10009cd0 10009ce0     ................
10014e3c:	10009cf0 10009d00 10009d10 10009d20     ............ ...
10014e4c:	10009d30 10009d40 10009d50 10009d60     0...@...P...`...
10014e5c:	10009d70 10009d80 10009d90 10009da0     p...............
10014e6c:	10009db0 10009dbe 10009dcc 10009dda     ................
10014e7c:	10009de8 10009df6 10009e04 10009e12     ................
10014e8c:	10009e20 10009e30 10009e40 10009e50      ...0...@...P...
10014e9c:	10009e60 10009e70 10009e80 10009e90     `...p...........
10014eac:	10009ea0 10009eb0 10009ec0 10009ed0     ................
10014ebc:	10009ee0 10009ef0 10009f00 10009f10     ................
10014ecc:	10009f20 10009f32 10009f44 10009fa6      ...2...D.......
10014edc:	10009fda 1000a00e 1000a042 1000a2e2     ........B.......
10014eec:	1000a07a 1000a096 1000a122 1000a13e     z......."...>...
10014efc:	1000a0b2 1000a0ce 1000a0ea 1000a106     ................
10014f0c:	1000a15a 1000a4e8 1000a4e8 1000a4e8     Z...............
10014f1c:	1000a4e8 1000a4e8 1000a4e8 1000a4e8     ................
10014f2c:	1000a4e8 1000a21e 1000a23a 1000a256     ........:...V...
10014f3c:	1000a304 1000a192 1000a4e8 1000a4e8     ................
10014f4c:	1000a4e8 1000a4e8 1000a4e8 1000a4e8     ................
10014f5c:	1000a272 1000a28e 1000a2aa 1000a2c6     r...............
10014f6c:	1000a4e8 1000a47c 1000a4a0 1000a4e8     ....|...........
10014f7c:	1000a4e8 1000a3ae 1000a3d0 1000a3f2     ................
10014f8c:	1000a414 1000a4e8 1000a4e8 1000a4e8     ................
10014f9c:	1000a4e8 1000a4e8 1000a4e8 1000a4e8     ................
10014fac:	1000a4e8 10009f8c 10009fc0 10009ff4     ................
10014fbc:	1000a028 1000a05e 1000a176 1000a1ae     (...^...v.......
10014fcc:	1000a1ca 1000a1e6 1000a202 1000a38c     ................
10014fdc:	1000a436 1000a458 1000a4c4 1000ad40     6...X.......@...
10014fec:	1000ad4e 1000ad6c 1000ad8e 1000adb0     N...l...........

10014ffc <ble_mgr_gap_handle>:
10014ffc:	1000b931 1000b965 1000ba59 00000000     1...e...Y.......
1001500c:	00000000 1000bb01 1000c225 1000c3d1     ........%.......
1001501c:	1000c409 1000cd81 1000c81d 1000c435     ............5...
1001502c:	1000cb39 1000d209 1000d095 1000bed1     9...............
	...

10015048 <ble_mgr_gatt_server_handle>:
	...
10015060:	1000c101 1000c145 1000c1b5 00000000     ....E...........
10015070:	52424153 4d532d65 00000053 0000000d     SABRe-SMS.......
10015080:	625b0d0a 645f656c 63697665 6e695f65     ..[ble_device_in
10015090:	0a5d7469 6976650d 6e206563 20656d61     it]..evice name 
100150a0:	20746573 6c696166 00006465 625b0d0a     set failed....[b
100150b0:	695f656c 5d74696e 6e690d0a 61697469     le_init]..initia
100150c0:	697a696c 5320676e 31424d41 00000031     lizing SAMB11...
100150d0:	625b0d0a 695f656c 5d74696e 41530d0a     ..[ble_init]..SA
100150e0:	3131424d 696e4920 6c616974 74617a69     MB11 Initializat
100150f0:	206e6f69 6c696166 00006465 625b0d0a     ion failed....[b
10015100:	695f656c 5d74696e 6c700d0a 65736165     le_init]..please
10015110:	65686320 74206b63 70206568 7265776f      check the power
10015120:	646e6120 6e6f6320 7463656e 206e6f69      and connection 
10015130:	6168202f 61776472 63206572 656e6e6f     / hardware conne
10015140:	726f7463 00000000 625b0d0a 735f656c     ctor......[ble_s
10015150:	645f7465 635f7665 69666e6f 0d0a5d67     et_dev_config]..
10015160:	61204442 65726464 67207373 66207465     BD address get f
10015170:	656c6961 00000064 625b0d0a 735f656c     ailed.....[ble_s
10015180:	645f7465 635f7665 69666e6f 0d0a5d67     et_dev_config]..
10015190:	41204442 65726464 303a7373 32302578     BD Address:0x%02
100151a0:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
100151b0:	32302558 41202c58 65726464 54207373     X%02X, Address T
100151c0:	3a657079 00006425 625b0d0a 735f656c     ype:%d....[ble_s
100151d0:	645f7465 635f7665 69666e6f 0d0a5d67     et_dev_config]..
100151e0:	20746573 20454c42 69766544 63206563     set BLE Device c
100151f0:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10015200:	0064656c 625b0d0a 735f656c 645f7465     led...[ble_set_d
10015210:	635f7665 69666e6f 0d0a5d67 20746573     ev_config]..set 
10015220:	20454c42 69766544 41206563 65726464     BLE Device Addre
10015230:	66207373 656c6961 00000064 efcdab00     ss failed.......
10015240:	00efcdab 65646e55 656e6966 76452064     ....Undefined Ev
10015250:	20746e65 65636552 64657669 00000000     ent Received....
10015260:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10015270:	61772065 2e2e7469 0000002e 6f666e49     e wait......Info
10015280:	7665443a 20656369 6e756f66 64612064     :Device found ad
10015290:	73657264 255b2073 20205d64 30257830     dress [%d]  0x%0
100152a0:	30255832 30255832 30255832 30255832     2X%02X%02X%02X%0
100152b0:	30255832 00205832 6f666e49 78616d3a     2X%02X .Info:max
100152c0:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
100152d0:	69766564 72206563 68636165 2e2e6465     device reached..
100152e0:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
100152f0:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10015300:	6e6e6163 00676e69 6e616353 676e696e     canning.Scanning
10015310:	61662020 64656c69 00000000 625b0d0a       failed......[b
10015320:	735f656c 5f646e65 76616c73 65735f65     le_send_slave_se
10015330:	65725f63 73657571 0d0a5d74 76616c73     c_request]..slav
10015340:	65732065 69727563 72207974 65757165     e security reque
10015350:	73207473 65636375 75667373 0000006c     st successful...
10015360:	625b0d0a 735f656c 5f646e65 76616c73     ..[ble_send_slav
10015370:	65735f65 65725f63 73657571 0d0a5d74     e_sec_request]..
10015380:	76616c73 65732065 69727563 72207974     slave security r
10015390:	65757165 66207473 656c6961 00000064     equest failed...
100153a0:	625b0d0a 635f656c 656e6e6f 64657463     ..[ble_connected
100153b0:	6174735f 685f6574 6c646e61 0a5d7265     _state_handler].
100153c0:	6e6f630d 7463656e 74206465 6570206f     .connected to pe
100153d0:	64207265 63697665 69772065 61206874     er device with a
100153e0:	65726464 30207373 32302578 32302578     ddress 0x%02x%02
100153f0:	32302578 32302578 32302578 32302578     x%02x%02x%02x%02
10015400:	00000078 625b0d0a 635f656c 656e6e6f     x.....[ble_conne
10015410:	64657463 6174735f 685f6574 6c646e61     cted_state_handl
10015420:	0a5d7265 6e6f630d 7463656e 206e6f69     er]..connection 
10015430:	646e6148 2520656c 00000064 625b0d0a     Handle %d.....[b
10015440:	635f656c 656e6e6f 64657463 6174735f     le_connected_sta
10015450:	685f6574 6c646e61 0a5d7265 7365630d     te_handler]..ces
10015460:	69766c6f 5220676e 6f646e61 6461206d     olving Random ad
10015470:	73657264 75732073 73656363 002a2a73     dress success**.
10015480:	625b0d0a 635f656c 656e6e6f 64657463     ..[ble_connected
10015490:	6174735f 685f6574 6c646e61 0a5d7265     _state_handler].
100154a0:	7365720d 69766c6f 5220676e 6f646e61     .resolving Rando
100154b0:	6461206d 73657264 61662073 64656c69     m address failed
100154c0:	00002a2a 2077654e 6e6e6f43 69746365     **..New Connecti
100154d0:	00006e6f 625b0d0a 635f656c 656e6e6f     on....[ble_conne
100154e0:	64657463 6174735f 685f6574 6c646e61     cted_state_handl
100154f0:	0a5d7265 78616d0d 6d756e20 20726562     er]..max number 
10015500:	6320666f 656e6e6f 6f697463 6572206e     of connection re
10015510:	65686361 25203a64 3d3d2064 69443e3d     ached: %d ===>Di
10015520:	6e6f6373 7463656e 2e676e69 00002e2e     sconnecting.....
10015530:	625b0d0a 635f656c 656e6e6f 64657463     ..[ble_connected
10015540:	6174735f 685f6574 6c646e61 0a5d7265     _state_handler].
10015550:	7665640d 20656369 6e6e6f43 69746365     .device Connecti
10015560:	46206e6f 656c6961 202d2064 74617453     on Failed - Stat
10015570:	203a7375 00006425 23232323 23232323     us: %d..########
10015580:	65442323 65636976 756f4620 0000646e     ##Device Found..
10015590:	23232323 23232323 65442323 65636976     ##########Device
100155a0:	746f4e20 756f4620 0000646e 69766544      Not Found..Devi
100155b0:	69206563 253a7864 00000064 2d454c42     ce idx:%d...BLE-
100155c0:	2055544d 6e616843 2c646567 6e6f4320     MTU Changed, Con
100155d0:	7463656e 206e6f69 646e6148 203a656c     nection Handle: 
100155e0:	202c6425 2077654e 756c6156 25203a65     %d, New Value: %
100155f0:	00000064 2055544d 6e616843 2c646567     d...MTU Changed,
10015600:	6e6f4320 7463656e 206e6f69 646e6148      Connection Hand
10015610:	253a656c 4f202c64 61726570 6e6f6974     le:%d, Operation
10015620:	0064253a 2055544d 6e616843 46206567     :%d.MTU Change F
10015630:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10015640:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10015650:	69746172 253a6e6f 00000064 72616843     ration:%d...Char
10015660:	69725720 43206574 4320646d 6c706d6f      Write Cmd Compl
10015670:	2c657465 6e6f4320 7463656e 206e6f69     ete, Connection 
10015680:	646e6148 253a656c 4f202c64 61726570     Handle:%d, Opera
10015690:	6e6f6974 0064253a 72616843 69725720     tion:%d.Char Wri
100156a0:	43206574 4620646d 656c6961 43202c64     te Cmd Failed, C
100156b0:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100156c0:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100156d0:	00000064 74617453 6f4e2065 61482074     d...State Not Ha
100156e0:	656c646e 64252064 00000000 69766544     ndled %d....Devi
100156f0:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10015700:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10015710:	656c646e 2578303d 00000078 425f5441     ndle=0x%x...AT_B
10015720:	435f454c 5f4e4e4f 41524150 50555f4d     LE_CONN_PARAM_UP
10015730:	45544144 00000020 72636e45 69747079     DATE ...Encrypti
10015740:	4e206e6f 7320746f 74726174 00006465     on Not started..
10015750:	76616c53 65532065 69727563 52207974     Slave Security R
10015760:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10015770:	206e6f69 6c696146 00006465 625b0d0a     ion Failed....[b
10015780:	705f656c 5f726961 75716572 5f747365     le_pair_request_
10015790:	646e6168 5d72656c 65670d0a 6172656e     handler]..genera
100157a0:	20646574 3a4b544c 00000020 30257830     ted LTK: ...0x%0
100157b0:	00205832 625b0d0a 705f656c 5f726961     2X ...[ble_pair_
100157c0:	75716572 5f747365 646e6168 5d72656c     request_handler]
100157d0:	65730d0a 6e69646e 61702067 6e697269     ..sending pairin
100157e0:	65722067 6e6f7073 00006573 72696150     g response..Pair
100157f0:	71655220 74736575 41202d20 65687475      Request - Authe
10015800:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10015810:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10015820:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10015830:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10015840:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10015850:	6e697463 2e2e2067 0000002e 63736944     cting ......Disc
10015860:	656e6e6f 52207463 65757165 46207473     onnect Request F
10015870:	656c6961 00000064 65746e45 20646572     ailed...Entered 
10015880:	73736150 646f632d 00003a65 61656c50     Pass-code:..Plea
10015890:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100158a0:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100158b0:	206e6f28 6568746f 65442072 65636976     (on other Device
100158c0:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
100158d0:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
100158e0:	74616546 20657275 20746f4e 70707573     Feature Not supp
100158f0:	6574726f 00000064 34333231 00003635     orted...123456..
10015900:	625b0d0a 705f656c 5f726961 656e6f64     ..[ble_pair_done
10015910:	6e61685f 72656c64 700d0a5d 69726961     _handler]..pairi
10015920:	7020676e 65636f72 65727564 6d6f6320     ng procedure com
10015930:	74656c70 73206465 65636375 75667373     pleted successfu
10015940:	00796c6c 625b0d0a 705f656c 5f726961     lly...[ble_pair_
10015950:	656e6f64 6e61685f 72656c64 4c0d0a5d     done_handler]..L
10015960:	203a4b54 00000000 30257830 202c5832     TK: ....0x%02X, 
10015970:	00000000 625b0d0a 705f656c 5f726961     ......[ble_pair_
10015980:	656e6f64 6e61685f 72656c64 430d0a5d     done_handler]..C
10015990:	3a4b5253 00000020 625b0d0a 705f656c     SRK: .....[ble_p
100159a0:	5f726961 656e6f64 6e61685f 72656c64     air_done_handler
100159b0:	490d0a5d 003a4b52 625b0d0a 705f656c     ]..IRK:...[ble_p
100159c0:	5f726961 656e6f64 6e61685f 72656c64     air_done_handler
100159d0:	420d0a5d 4420454c 63697665 6f6e2065     ]..BLE Device no
100159e0:	6f662074 20646e75 73206f74 65726f74     t found to store
100159f0:	65687420 69617020 676e6972 666e6920      the pairing inf
10015a00:	0000006f 625b0d0a 705f656c 5f726961     o.....[ble_pair_
10015a10:	656e6f64 6e61685f 72656c64 700d0a5d     done_handler]..p
10015a20:	69726961 6620676e 656c6961 2e2e2e64     airing failed...
10015a30:	63736944 656e6e6f 6e697463 00000067     Disconnecting...
10015a40:	625b0d0a 705f656c 5f726961 656e6f64     ..[ble_pair_done
10015a50:	6e61685f 72656c64 640d0a5d 6f637369     _handler]..disco
10015a60:	63656e6e 65522074 73657571 61462074     nnect Request Fa
10015a70:	64656c69 00000000 72636e45 69747079     iled....Encrypti
10015a80:	63206e6f 6c706d6f 64657465 63757320     on completed suc
10015a90:	73736563 6c6c7566 00000079 20454c42     cessfully...BLE 
10015aa0:	69766544 6e206563 6620746f 646e756f     Device not found
10015ab0:	636e6520 74707972 206e6f69 6f666e69      encryption info
10015ac0:	00000000 72636e45 69747079 66206e6f     ....Encryption f
10015ad0:	656c6961 00000064 2d434e45 3a716552     ailed...ENC-Req:
10015ae0:	6e6f4320 6148206e 656c646e 76654420      Conn Handle Dev
10015af0:	20656369 6e756f46 64683a64 64253a6c     ice Found:hdl:%d
10015b00:	00000000 74736f68 76656420 20656369     ....host device 
10015b10:	76696465 00782520 72656570 76656420     ediv %x.peer dev
10015b20:	20656369 76696465 00782520 5f636e65     ice ediv %x.enc_
10015b30:	20716572 76696465 00782520 20656854     req ediv %x.The 
10015b40:	65646e69 73692078 00642520 2d434e45     index is %d.ENC-
10015b50:	3a716552 79654b20 756f4620 0000646e     Req: Key Found..
10015b60:	72696150 20676e69 6f666e69 74616d72     Pairing informat
10015b70:	206e6f69 7020666f 20726565 69766564     ion of peer devi
10015b80:	69206563 6f6e2073 76612074 616c6961     ce is not availa
10015b90:	2e656c62 00000000 61656c50 75206573     ble.....Please u
10015ba0:	6961706e 68742072 65642065 65636976     npair the device
10015bb0:	6f726620 6570206d 64207265 63697665      from peer devic
10015bc0:	6f6d2865 656c6962 65732029 6e697474     e(mobile) settin
10015bd0:	6d207367 20756e65 20646e61 72617473     gs menu and star
10015be0:	61702074 6e697269 67612067 006e6961     t pairing again.
10015bf0:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10015c00:	52207473 796c7065 69614620 0064656c     st Reply Failed.
10015c10:	72636e45 69747079 52206e6f 65757165     Encryption Reque
10015c20:	52207473 796c7065 00000000 625b0d0a     st Reply......[b
10015c30:	655f656c 746e6576 6e616d5f 72656761     le_event_manager
10015c40:	420d0a5d 452d454c 746e6576 0064253a     ]..BLE-Event:%d.
10015c50:	625b0d0a 655f656c 746e6576 6e616d5f     ..[ble_event_man
10015c60:	72656761 470d0a5d 5f545441 76726553     ager]..GATT_Serv
10015c70:	45207265 746e6576 0064253a 625b0d0a     er Event:%d...[b
10015c80:	655f656c 746e6576 6e616d5f 72656761     le_event_manager
10015c90:	420d0a5d 4d2d454c 67616e61 553a7265     ]..BLE-Manager:U
10015ca0:	6f6e6b6e 45206e77 746e6576 2578303d     nknown Event=0x%
10015cb0:	00000058 625b0d0a 615f656c 72657664     X.....[ble_adver
10015cc0:	65736974 746e656d 7461645f 65735f61     tisement_data_se
10015cd0:	0d0a5d74 5f454c42 5f504147 5f564441     t]..BLE_GAP_ADV_
10015ce0:	504d4f43 4554454c 434f4c5f 4e5f4c41     COMPLETE_LOCAL_N
10015cf0:	5f454d41 42414e45 2620454c 42212026     AME_ENABLE && !B
10015d00:	475f454c 415f5041 535f5644 54524f48     LE_GAP_ADV_SHORT
10015d10:	44454e45 434f4c5f 4e5f4c41 5f454d41     ENED_LOCAL_NAME_
10015d20:	42414e45 0000454c 4c420a0d 44412d45     ENABLE....BLE-AD
10015d30:	00203a56 625b0d0a 615f656c 72657664     V: ...[ble_adver
10015d40:	65736974 746e656d 7461645f 65735f61     tisement_data_se
10015d50:	0d0a5d74 6c696166 74206465 6461206f     t]..failed to ad
10015d60:	6f432064 656c706d 6c206574 6c61636f     d Complete local
10015d70:	6d616e20 00000065 625b0d0a 615f656c      name.....[ble_a
10015d80:	72657664 65736974 746e656d 7461645f     dvertisement_dat
10015d90:	65735f61 0d0a5d74 5f454c42 5f504147     a_set]..BLE_GAP_
10015da0:	5f564441 554e414d 54434146 52455255     ADV_MANUFACTURER
10015db0:	4550535f 49464943 41445f43 455f4154     _SPECIFIC_DATA_E
10015dc0:	4c42414e 00000045 5a2d571c 50532dbe     NABLE....W-Z.-SP
10015dd0:	00000000 625b0d0a 615f656c 72657664     ......[ble_adver
10015de0:	65736974 746e656d 7461645f 65735f61     tisement_data_se
10015df0:	0d0a5d74 6c696166 74206465 6461206f     t]..failed to ad
10015e00:	614d2064 6166756e 72757463 73207265     d Manufacturer s
10015e10:	69636570 20636966 61746164 00000000     pecific data....
10015e20:	625b0d0a 615f656c 72657664 65736974     ..[ble_advertise
10015e30:	746e656d 7461645f 65735f61 0d0a5d74     ment_data_set]..
10015e40:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10015e50:	61642074 73206174 66207465 656c6961     t data set faile
10015e60:	00000064 625b0d0a 615f656c 72657664     d.....[ble_adver
10015e70:	65736974 746e656d 7461645f 65735f61     tisement_data_se
10015e80:	0d0a5d74 65766461 73697472 6e656d65     t]..advertisemen
10015e90:	61642074 203a6174 00207830 78323025     t data: 0x .%02x
10015ea0:	29632528 00000020 625b0d0a 615f656c     (%c) .....[ble_a
10015eb0:	72657664 65736974 746e656d 7461645f     dvertisement_dat
10015ec0:	65735f61 0d0a5d74 20454c42 65766441     a_set]..BLE Adve
10015ed0:	73697472 6e656d65 61642074 73206174     rtisement data s
10015ee0:	73207465 65636375 00007373 1000b7ba     et success......
10015ef0:	1000b7c8 1000b7d6 1000b7e4 1000b7f2     ................
10015f00:	1000b800 1000b80e 1000c326 1000c36e     ........&...n...
10015f10:	1000c2f0 1000c2f0 1000c2f0 1000c326     ............&...
10015f20:	1000c2f0 1000c2f0 1000d508 1000d508     ................
10015f30:	1000d508 1000d508 1000d508 1000d508     ................
10015f40:	1000d508 1000d508 1000d508 1000d508     ................
10015f50:	1000d508 1000d508 1000d508 1000d508     ................
10015f60:	1000d508 1000d508 1000d508 1000d508     ................
10015f70:	1000d508 1000d56c 1000d56c 1000d56c     ....l...l...l...
10015f80:	1000d56c 1000d56c 1000d56c 1000d56c     l...l...l...l...
10015f90:	1000d56c 1000d56c 1000d56c 1000d5da     l...l...l.......
10015fa0:	1000d5da 1000d5da 1000d5da 1000d5da     ................
10015fb0:	1000d5da 1000d5da 1000d5da 1000d5da     ................
10015fc0:	1000d5da 1000d65e 1000d65e 1000d65e     ....^...^...^...
10015fd0:	1000d65e 1000d65e 1000d65e 1000d6cc     ^...^...^.......
10015fe0:	1000d6cc 1000d6cc 1000d6cc 1000d6cc     ................
10015ff0:	1000d6cc 1000d6cc 1000d6cc 1000d6cc     ................
10016000:	1000d73a 1000d73a 1000d7a8 1000d7a8     :...:...........
10016010:	1000d816 1000d7a8 656d6954 74203272     ........Timer2 t
10016020:	67676972 0a0d7265 6d744100 43206c65     rigger...Atmel C
10016030:	2e70726f                                orp.

10016034 <CSWTCH.51>:
10016034:	03010300 03030303 03030303 02020303              ...............

10016043 <CSWTCH.49>:
10016043:	02100402                                         ...

10016046 <client_conf_uuid>:
10016046:	29042902                                         .)

10016048 <presentation_format_uuid>:
10016048:	29012904                                         .)

1001604a <user_desc_uuid>:
1001604a:	29032901                                         .)

1001604c <server_conf_uuid>:
1001604c:	29002903                                         .)

1001604e <extended_props_uuid>:
1001604e:	28022900                                         .)

10016050 <include_uuid>:
10016050:	28032802                                         .(

10016052 <char_uuid>:
10016052:	25782803 25561001 25561001 254a1001     .(x%..V%..V%..J%
10016062:	243e1001 243e1001 253e1001 254a1001     ..>$..>$..>%..J%
10016072:	243e1001 253e1001 243e1001 254a1001     ..>$..>%..>$..J%
10016082:	24421001 24421001 24421001 27581001     ..B$..B$..B$..X'
10016092:	00431001 61600000                                ..C...

10016098 <_global_impure_ptr>:
10016098:	10016160                                `a..

1001609c <__sf_fake_stdin>:
	...

100160bc <__sf_fake_stdout>:
	...

100160dc <__sf_fake_stderr>:
	...
100160fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001610c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001611c:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001612c:	00006665                                ef..

10016130 <_init>:
10016130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016132:	46c0      	nop			; (mov r8, r8)
10016134:	bcf8      	pop	{r3, r4, r5, r6, r7}
10016136:	bc08      	pop	{r3}
10016138:	469e      	mov	lr, r3
1001613a:	4770      	bx	lr

1001613c <__init_array_start>:
1001613c:	1000809d 	.word	0x1000809d

10016140 <_fini>:
10016140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016142:	46c0      	nop			; (mov r8, r8)
10016144:	bcf8      	pop	{r3, r4, r5, r6, r7}
10016146:	bc08      	pop	{r3}
10016148:	469e      	mov	lr, r3
1001614a:	4770      	bx	lr

1001614c <__fini_array_start>:
1001614c:	10008075 	.word	0x10008075
